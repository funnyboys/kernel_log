commit 62ec3d13601bd626ca7a0edef6d45dbb753d94e8
Author: Masahiro Yamada <yamada.masahiro@socionext.com>
Date:   Sun Jul 21 23:23:08 2019 +0900

    ASoC: SOF: use __u32 instead of uint32_t in uapi headers
    
    When CONFIG_UAPI_HEADER_TEST=y, exported headers are compile-tested to
    make sure they can be included from user-space.
    
    Currently, header.h and fw.h are excluded from the test coverage.
    To make them join the compile-test, we need to fix the build errors
    attached below.
    
    For a case like this, we decided to use __u{8,16,32,64} variable types
    in this discussion:
    
      https://lkml.org/lkml/2019/6/5/18
    
    Build log:
    
      CC      usr/include/sound/sof/header.h.s
      CC      usr/include/sound/sof/fw.h.s
    In file included from <command-line>:32:0:
    ./usr/include/sound/sof/header.h:19:2: error: unknown type name ‘uint32_t’
      uint32_t magic;  /**< 'S', 'O', 'F', '\0' */
      ^~~~~~~~
    ./usr/include/sound/sof/header.h:20:2: error: unknown type name ‘uint32_t’
      uint32_t type;  /**< component specific type */
      ^~~~~~~~
    ./usr/include/sound/sof/header.h:21:2: error: unknown type name ‘uint32_t’
      uint32_t size;  /**< size in bytes of data excl. this struct */
      ^~~~~~~~
    ./usr/include/sound/sof/header.h:22:2: error: unknown type name ‘uint32_t’
      uint32_t abi;  /**< SOF ABI version */
      ^~~~~~~~
    ./usr/include/sound/sof/header.h:23:2: error: unknown type name ‘uint32_t’
      uint32_t reserved[4]; /**< reserved for future use */
      ^~~~~~~~
    ./usr/include/sound/sof/header.h:24:2: error: unknown type name ‘uint32_t’
      uint32_t data[0]; /**< Component data - opaque to core */
      ^~~~~~~~
    In file included from <command-line>:32:0:
    ./usr/include/sound/sof/fw.h:49:2: error: unknown type name ‘uint32_t’
      uint32_t size;  /* bytes minus this header */
      ^~~~~~~~
    ./usr/include/sound/sof/fw.h:50:2: error: unknown type name ‘uint32_t’
      uint32_t offset; /* offset from base */
      ^~~~~~~~
    ./usr/include/sound/sof/fw.h:64:2: error: unknown type name ‘uint32_t’
      uint32_t size;  /* bytes minus this header */
      ^~~~~~~~
    ./usr/include/sound/sof/fw.h:65:2: error: unknown type name ‘uint32_t’
      uint32_t num_blocks; /* number of blocks */
      ^~~~~~~~
    ./usr/include/sound/sof/fw.h:73:2: error: unknown type name ‘uint32_t’
      uint32_t file_size; /* size of file minus this header */
      ^~~~~~~~
    ./usr/include/sound/sof/fw.h:74:2: error: unknown type name ‘uint32_t’
      uint32_t num_modules; /* number of modules */
      ^~~~~~~~
    ./usr/include/sound/sof/fw.h:75:2: error: unknown type name ‘uint32_t’
      uint32_t abi;  /* version of header format */
      ^~~~~~~~
    
    Signed-off-by: Masahiro Yamada <yamada.masahiro@socionext.com>
    Link: https://lore.kernel.org/r/20190721142308.30306-1-yamada.masahiro@socionext.com
    Signed-off-by: Mark Brown <broonie@kernel.org>

diff --git a/include/uapi/sound/sof/fw.h b/include/uapi/sound/sof/fw.h
index 1afca973eb09..e9f697467a86 100644
--- a/include/uapi/sound/sof/fw.h
+++ b/include/uapi/sound/sof/fw.h
@@ -13,6 +13,8 @@
 #ifndef __INCLUDE_UAPI_SOF_FW_H__
 #define __INCLUDE_UAPI_SOF_FW_H__
 
+#include <linux/types.h>
+
 #define SND_SOF_FW_SIG_SIZE	4
 #define SND_SOF_FW_ABI		1
 #define SND_SOF_FW_SIG		"Reef"
@@ -46,8 +48,8 @@ enum snd_sof_fw_blk_type {
 
 struct snd_sof_blk_hdr {
 	enum snd_sof_fw_blk_type type;
-	uint32_t size;		/* bytes minus this header */
-	uint32_t offset;	/* offset from base */
+	__u32 size;		/* bytes minus this header */
+	__u32 offset;		/* offset from base */
 } __packed;
 
 /*
@@ -61,8 +63,8 @@ enum snd_sof_fw_mod_type {
 
 struct snd_sof_mod_hdr {
 	enum snd_sof_fw_mod_type type;
-	uint32_t size;		/* bytes minus this header */
-	uint32_t num_blocks;	/* number of blocks */
+	__u32 size;		/* bytes minus this header */
+	__u32 num_blocks;	/* number of blocks */
 } __packed;
 
 /*
@@ -70,9 +72,9 @@ struct snd_sof_mod_hdr {
  */
 struct snd_sof_fw_header {
 	unsigned char sig[SND_SOF_FW_SIG_SIZE]; /* "Reef" */
-	uint32_t file_size;	/* size of file minus this header */
-	uint32_t num_modules;	/* number of modules */
-	uint32_t abi;		/* version of header format */
+	__u32 file_size;	/* size of file minus this header */
+	__u32 num_modules;	/* number of modules */
+	__u32 abi;		/* version of header format */
 } __packed;
 
 #endif

commit 4483151e765b5a7ffb823fe9bb11128101410427
Author: Liam Girdwood <liam.r.girdwood@linux.intel.com>
Date:   Fri Apr 12 11:05:15 2019 -0500

    ASoC: SOF: Add userspace ABI support
    
    Add userspace ABI for audio userspace application IO outside of regular
    ALSA PCM and kcontrols. This is intended to be used to format
    coefficients and data for custom processing components.
    
    Signed-off-by: Liam Girdwood <liam.r.girdwood@linux.intel.com>
    Signed-off-by: Pierre-Louis Bossart <pierre-louis.bossart@linux.intel.com>
    Reviewed-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Mark Brown <broonie@kernel.org>

diff --git a/include/uapi/sound/sof/fw.h b/include/uapi/sound/sof/fw.h
new file mode 100644
index 000000000000..1afca973eb09
--- /dev/null
+++ b/include/uapi/sound/sof/fw.h
@@ -0,0 +1,78 @@
+/* SPDX-License-Identifier: ((GPL-2.0 WITH Linux-syscall-note) OR BSD-3-Clause) */
+/*
+ * This file is provided under a dual BSD/GPLv2 license.  When using or
+ * redistributing this file, you may do so under either license.
+ *
+ * Copyright(c) 2018 Intel Corporation. All rights reserved.
+ */
+
+/*
+ * Firmware file format .
+ */
+
+#ifndef __INCLUDE_UAPI_SOF_FW_H__
+#define __INCLUDE_UAPI_SOF_FW_H__
+
+#define SND_SOF_FW_SIG_SIZE	4
+#define SND_SOF_FW_ABI		1
+#define SND_SOF_FW_SIG		"Reef"
+
+/*
+ * Firmware module is made up of 1 . N blocks of different types. The
+ * Block header is used to determine where and how block is to be copied in the
+ * DSP/host memory space.
+ */
+enum snd_sof_fw_blk_type {
+	SOF_FW_BLK_TYPE_INVALID	= -1,
+	SOF_FW_BLK_TYPE_START	= 0,
+	SOF_FW_BLK_TYPE_RSRVD0	= SOF_FW_BLK_TYPE_START,
+	SOF_FW_BLK_TYPE_IRAM	= 1,	/* local instruction RAM */
+	SOF_FW_BLK_TYPE_DRAM	= 2,	/* local data RAM */
+	SOF_FW_BLK_TYPE_SRAM	= 3,	/* system RAM */
+	SOF_FW_BLK_TYPE_ROM	= 4,
+	SOF_FW_BLK_TYPE_IMR	= 5,
+	SOF_FW_BLK_TYPE_RSRVD6	= 6,
+	SOF_FW_BLK_TYPE_RSRVD7	= 7,
+	SOF_FW_BLK_TYPE_RSRVD8	= 8,
+	SOF_FW_BLK_TYPE_RSRVD9	= 9,
+	SOF_FW_BLK_TYPE_RSRVD10	= 10,
+	SOF_FW_BLK_TYPE_RSRVD11	= 11,
+	SOF_FW_BLK_TYPE_RSRVD12	= 12,
+	SOF_FW_BLK_TYPE_RSRVD13	= 13,
+	SOF_FW_BLK_TYPE_RSRVD14	= 14,
+	/* use SOF_FW_BLK_TYPE_RSVRDX for new block types */
+	SOF_FW_BLK_TYPE_NUM
+};
+
+struct snd_sof_blk_hdr {
+	enum snd_sof_fw_blk_type type;
+	uint32_t size;		/* bytes minus this header */
+	uint32_t offset;	/* offset from base */
+} __packed;
+
+/*
+ * Firmware file is made up of 1 .. N different modules types. The module
+ * type is used to determine how to load and parse the module.
+ */
+enum snd_sof_fw_mod_type {
+	SOF_FW_BASE	= 0,	/* base firmware image */
+	SOF_FW_MODULE	= 1,	/* firmware module */
+};
+
+struct snd_sof_mod_hdr {
+	enum snd_sof_fw_mod_type type;
+	uint32_t size;		/* bytes minus this header */
+	uint32_t num_blocks;	/* number of blocks */
+} __packed;
+
+/*
+ * Firmware file header.
+ */
+struct snd_sof_fw_header {
+	unsigned char sig[SND_SOF_FW_SIG_SIZE]; /* "Reef" */
+	uint32_t file_size;	/* size of file minus this header */
+	uint32_t num_modules;	/* number of modules */
+	uint32_t abi;		/* version of header format */
+} __packed;
+
+#endif
