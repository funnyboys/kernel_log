commit 2d744ecf2b98405723a2138a547e5c75009bc4e5
Author: Mateusz Gorski <mateusz.gorski@linux.intel.com>
Date:   Mon Apr 27 15:27:27 2020 +0200

    ASoC: Intel: Skylake: Automatic DMIC format configuration according to information from NHLT
    
    Automatically choose DMIC pipeline format configuration depending on
    information included in NHLT.
    Change the access rights of appropriate kcontrols to read-only in order
    to prevent user interference.
    
    Signed-off-by: Mateusz Gorski <mateusz.gorski@linux.intel.com>
    Reviewed-by: Cezary Rojewski <cezary.rojewski@intel.com>
    Reviewed-by: Pierre-Louis Bossart <pierre-louis.bossart@linux.intel.com>
    Link: https://lore.kernel.org/r/20200427132727.24942-4-mateusz.gorski@linux.intel.com
    Signed-off-by: Mark Brown <broonie@kernel.org>

diff --git a/include/uapi/sound/skl-tplg-interface.h b/include/uapi/sound/skl-tplg-interface.h
index f2711186c81f..a93c0decfdd5 100644
--- a/include/uapi/sound/skl-tplg-interface.h
+++ b/include/uapi/sound/skl-tplg-interface.h
@@ -19,6 +19,7 @@
 #define SKL_CONTROL_TYPE_BYTE_TLV	0x100
 #define SKL_CONTROL_TYPE_MIC_SELECT	0x102
 #define SKL_CONTROL_TYPE_MULTI_IO_SELECT	0x103
+#define SKL_CONTROL_TYPE_MULTI_IO_SELECT_DMIC	0x104
 
 #define HDA_SST_CFG_MAX	900 /* size of copier cfg*/
 #define MAX_IN_QUEUE 8

commit 1b450791d517d4d6666ab9ab6d9a20c8819e3572
Author: Mateusz Gorski <mateusz.gorski@linux.intel.com>
Date:   Mon Apr 27 15:27:26 2020 +0200

    ASoC: Intel: Multiple I/O PCM format support for pipe
    
    For pipes supporting multiple input/output formats, kcontrol is
    created and selection of pipe input and output configuration
    is done based on control set.
    
    If more than one configuration is supported, then this patch
    allows user to select configuration of choice
    using amixer settings.
    
    Signed-off-by: Mateusz Gorski <mateusz.gorski@linux.intel.com>
    Signed-off-by: Pavan K S <pavan.k.s@intel.com>
    Reviewed-by: Cezary Rojewski <cezary.rojewski@intel.com>
    Reviewed-by: Pierre-Louis Bossart <pierre-louis.bossart@linux.intel.com>
    Link: https://lore.kernel.org/r/20200427132727.24942-3-mateusz.gorski@linux.intel.com
    Signed-off-by: Mark Brown <broonie@kernel.org>

diff --git a/include/uapi/sound/skl-tplg-interface.h b/include/uapi/sound/skl-tplg-interface.h
index 9eee32f5e407..f2711186c81f 100644
--- a/include/uapi/sound/skl-tplg-interface.h
+++ b/include/uapi/sound/skl-tplg-interface.h
@@ -18,6 +18,7 @@
  */
 #define SKL_CONTROL_TYPE_BYTE_TLV	0x100
 #define SKL_CONTROL_TYPE_MIC_SELECT	0x102
+#define SKL_CONTROL_TYPE_MULTI_IO_SELECT	0x103
 
 #define HDA_SST_CFG_MAX	900 /* size of copier cfg*/
 #define MAX_IN_QUEUE 8

commit d9c5252295218df4cfe64353aa860d7b5c8700ef
Author: Masahiro Yamada <yamada.masahiro@socionext.com>
Date:   Thu Jul 25 16:58:31 2019 +0900

    treewide: add "WITH Linux-syscall-note" to SPDX tag of uapi headers
    
    UAPI headers licensed under GPL are supposed to have exception
    "WITH Linux-syscall-note" so that they can be included into non-GPL
    user space application code.
    
    The exception note is missing in some UAPI headers.
    
    Some of them slipped in by the treewide conversion commit b24413180f56
    ("License cleanup: add SPDX GPL-2.0 license identifier to files with
    no license"). Just run:
    
      $ git show --oneline b24413180f56 -- arch/x86/include/uapi/asm/
    
    I believe they are not intentional, and should be fixed too.
    
    This patch was generated by the following script:
    
      git grep -l --not -e Linux-syscall-note --and -e SPDX-License-Identifier \
        -- :arch/*/include/uapi/asm/*.h :include/uapi/ :^*/Kbuild |
      while read file
      do
              sed -i -e '/[[:space:]]OR[[:space:]]/s/\(GPL-[^[:space:]]*\)/(\1 WITH Linux-syscall-note)/g' \
              -e '/[[:space:]]or[[:space:]]/s/\(GPL-[^[:space:]]*\)/(\1 WITH Linux-syscall-note)/g' \
              -e '/[[:space:]]OR[[:space:]]/!{/[[:space:]]or[[:space:]]/!s/\(GPL-[^[:space:]]*\)/\1 WITH Linux-syscall-note/g}' $file
      done
    
    After this patch is applied, there are 5 UAPI headers that do not contain
    "WITH Linux-syscall-note". They are kept untouched since this exception
    applies only to GPL variants.
    
      $ git grep --not -e Linux-syscall-note --and -e SPDX-License-Identifier \
        -- :arch/*/include/uapi/asm/*.h :include/uapi/ :^*/Kbuild
      include/uapi/drm/panfrost_drm.h:/* SPDX-License-Identifier: MIT */
      include/uapi/linux/batman_adv.h:/* SPDX-License-Identifier: MIT */
      include/uapi/linux/qemu_fw_cfg.h:/* SPDX-License-Identifier: BSD-3-Clause */
      include/uapi/linux/vbox_err.h:/* SPDX-License-Identifier: MIT */
      include/uapi/linux/virtio_iommu.h:/* SPDX-License-Identifier: BSD-3-Clause */
    
    Signed-off-by: Masahiro Yamada <yamada.masahiro@socionext.com>
    Reviewed-by: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/include/uapi/sound/skl-tplg-interface.h b/include/uapi/sound/skl-tplg-interface.h
index f39352cef382..9eee32f5e407 100644
--- a/include/uapi/sound/skl-tplg-interface.h
+++ b/include/uapi/sound/skl-tplg-interface.h
@@ -1,4 +1,4 @@
-/* SPDX-License-Identifier: GPL-2.0 */
+/* SPDX-License-Identifier: GPL-2.0 WITH Linux-syscall-note */
 /*
  * skl-tplg-interface.h - Intel DSP FW private data interface
  *

commit fb504caae7ef85be159743bd4b08ecde269ba55f
Author: Dmitry V. Levin <ldv@altlinux.org>
Date:   Mon Aug 13 18:50:02 2018 +0300

    ASoC: uapi: fix sound/skl-tplg-interface.h userspace compilation errors
    
    Include <linux/types.h> and consistently use types it provides
    to fix the following sound/skl-tplg-interface.h userspace compilation errors:
    
    /usr/include/sound/skl-tplg-interface.h:146:2: error: unknown type name 'u32'
      u32 set_params:2;
    /usr/include/sound/skl-tplg-interface.h:147:2: error: unknown type name 'u32'
      u32 rsvd:30;
    /usr/include/sound/skl-tplg-interface.h:148:2: error: unknown type name 'u32'
      u32 param_id;
    /usr/include/sound/skl-tplg-interface.h:149:2: error: unknown type name 'u32'
      u32 max;
    /usr/include/sound/skl-tplg-interface.h:166:2: error: unknown type name 'u16'
      u16 module_id;
    /usr/include/sound/skl-tplg-interface.h:167:2: error: unknown type name 'u16'
      u16 instance_id;
    /usr/include/sound/skl-tplg-interface.h:171:2: error: unknown type name 'u32'
      u32 channels;
    /usr/include/sound/skl-tplg-interface.h:172:2: error: unknown type name 'u32'
      u32 freq;
    /usr/include/sound/skl-tplg-interface.h:173:2: error: unknown type name 'u32'
      u32 bit_depth;
    /usr/include/sound/skl-tplg-interface.h:174:2: error: unknown type name 'u32'
      u32 valid_bit_depth;
    /usr/include/sound/skl-tplg-interface.h:175:2: error: unknown type name 'u32'
      u32 ch_cfg;
    /usr/include/sound/skl-tplg-interface.h:176:2: error: unknown type name 'u32'
      u32 interleaving_style;
    /usr/include/sound/skl-tplg-interface.h:177:2: error: unknown type name 'u32'
      u32 sample_type;
    /usr/include/sound/skl-tplg-interface.h:178:2: error: unknown type name 'u32'
      u32 ch_map;
    /usr/include/sound/skl-tplg-interface.h:182:2: error: unknown type name 'u32'
      u32 set_params:2;
    /usr/include/sound/skl-tplg-interface.h:183:2: error: unknown type name 'u32'
      u32 rsvd:30;
    /usr/include/sound/skl-tplg-interface.h:184:2: error: unknown type name 'u32'
      u32 param_id;
    /usr/include/sound/skl-tplg-interface.h:185:2: error: unknown type name 'u32'
      u32 caps_size;
    /usr/include/sound/skl-tplg-interface.h:186:2: error: unknown type name 'u32'
      u32 caps[HDA_SST_CFG_MAX];
    /usr/include/sound/skl-tplg-interface.h:190:2: error: unknown type name 'u8'
      u8 pipe_id;
    /usr/include/sound/skl-tplg-interface.h:191:2: error: unknown type name 'u8'
      u8 pipe_priority;
    /usr/include/sound/skl-tplg-interface.h:192:2: error: unknown type name 'u16'
      u16 conn_type:4;
    /usr/include/sound/skl-tplg-interface.h:193:2: error: unknown type name 'u16'
      u16 rsvd:4;
    /usr/include/sound/skl-tplg-interface.h:194:2: error: unknown type name 'u16'
      u16 memory_pages:8;
    /usr/include/sound/skl-tplg-interface.h:200:2: error: unknown type name 'u16'
      u16 module_id;
    /usr/include/sound/skl-tplg-interface.h:201:2: error: unknown type name 'u16'
      u16 instance_id;
    /usr/include/sound/skl-tplg-interface.h:202:2: error: unknown type name 'u32'
      u32 max_mcps;
    /usr/include/sound/skl-tplg-interface.h:203:2: error: unknown type name 'u32'
      u32 mem_pages;
    /usr/include/sound/skl-tplg-interface.h:204:2: error: unknown type name 'u32'
      u32 obs;
    /usr/include/sound/skl-tplg-interface.h:205:2: error: unknown type name 'u32'
      u32 ibs;
    /usr/include/sound/skl-tplg-interface.h:206:2: error: unknown type name 'u32'
      u32 vbus_id;
    /usr/include/sound/skl-tplg-interface.h:208:2: error: unknown type name 'u32'
      u32 max_in_queue:8;
    /usr/include/sound/skl-tplg-interface.h:209:2: error: unknown type name 'u32'
      u32 max_out_queue:8;
    /usr/include/sound/skl-tplg-interface.h:210:2: error: unknown type name 'u32'
      u32 time_slot:8;
    /usr/include/sound/skl-tplg-interface.h:211:2: error: unknown type name 'u32'
      u32 core_id:4;
    /usr/include/sound/skl-tplg-interface.h:212:2: error: unknown type name 'u32'
      u32 rsvd1:4;
    /usr/include/sound/skl-tplg-interface.h:214:2: error: unknown type name 'u32'
      u32 module_type:8;
    /usr/include/sound/skl-tplg-interface.h:215:2: error: unknown type name 'u32'
      u32 conn_type:4;
    /usr/include/sound/skl-tplg-interface.h:216:2: error: unknown type name 'u32'
      u32 dev_type:4;
    /usr/include/sound/skl-tplg-interface.h:217:2: error: unknown type name 'u32'
      u32 hw_conn_type:4;
    /usr/include/sound/skl-tplg-interface.h:218:2: error: unknown type name 'u32'
      u32 rsvd2:12;
    /usr/include/sound/skl-tplg-interface.h:220:2: error: unknown type name 'u32'
      u32 params_fixup:8;
    /usr/include/sound/skl-tplg-interface.h:221:2: error: unknown type name 'u32'
      u32 converter:8;
    /usr/include/sound/skl-tplg-interface.h:222:2: error: unknown type name 'u32'
      u32 input_pin_type:1;
    /usr/include/sound/skl-tplg-interface.h:223:2: error: unknown type name 'u32'
      u32 output_pin_type:1;
    /usr/include/sound/skl-tplg-interface.h:224:2: error: unknown type name 'u32'
      u32 is_dynamic_in_pin:1;
    /usr/include/sound/skl-tplg-interface.h:225:2: error: unknown type name 'u32'
      u32 is_dynamic_out_pin:1;
    /usr/include/sound/skl-tplg-interface.h:226:2: error: unknown type name 'u32'
      u32 is_loadable:1;
    /usr/include/sound/skl-tplg-interface.h:227:2: error: unknown type name 'u32'
      u32 rsvd3:11;
    
    Fixes: 0c24fdc00244 ("ASoC: topology: Move skl-tplg-interface.h to uapi")
    Signed-off-by: Dmitry V. Levin <ldv@altlinux.org>
    Reviewed-by: Guenter Roeck <groeck@chromium.org>
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Cc: <stable@vger.kernel.org> # v4.18

diff --git a/include/uapi/sound/skl-tplg-interface.h b/include/uapi/sound/skl-tplg-interface.h
index f58cafa42f18..f39352cef382 100644
--- a/include/uapi/sound/skl-tplg-interface.h
+++ b/include/uapi/sound/skl-tplg-interface.h
@@ -10,6 +10,8 @@
 #ifndef __HDA_TPLG_INTERFACE_H__
 #define __HDA_TPLG_INTERFACE_H__
 
+#include <linux/types.h>
+
 /*
  * Default types range from 0~12. type can range from 0 to 0xff
  * SST types start at higher to avoid any overlapping in future
@@ -143,10 +145,10 @@ enum skl_module_param_type {
 };
 
 struct skl_dfw_algo_data {
-	u32 set_params:2;
-	u32 rsvd:30;
-	u32 param_id;
-	u32 max;
+	__u32 set_params:2;
+	__u32 rsvd:30;
+	__u32 param_id;
+	__u32 max;
 	char params[0];
 } __packed;
 
@@ -163,68 +165,68 @@ enum skl_tuple_type {
 /* v4 configuration data */
 
 struct skl_dfw_v4_module_pin {
-	u16 module_id;
-	u16 instance_id;
+	__u16 module_id;
+	__u16 instance_id;
 } __packed;
 
 struct skl_dfw_v4_module_fmt {
-	u32 channels;
-	u32 freq;
-	u32 bit_depth;
-	u32 valid_bit_depth;
-	u32 ch_cfg;
-	u32 interleaving_style;
-	u32 sample_type;
-	u32 ch_map;
+	__u32 channels;
+	__u32 freq;
+	__u32 bit_depth;
+	__u32 valid_bit_depth;
+	__u32 ch_cfg;
+	__u32 interleaving_style;
+	__u32 sample_type;
+	__u32 ch_map;
 } __packed;
 
 struct skl_dfw_v4_module_caps {
-	u32 set_params:2;
-	u32 rsvd:30;
-	u32 param_id;
-	u32 caps_size;
-	u32 caps[HDA_SST_CFG_MAX];
+	__u32 set_params:2;
+	__u32 rsvd:30;
+	__u32 param_id;
+	__u32 caps_size;
+	__u32 caps[HDA_SST_CFG_MAX];
 } __packed;
 
 struct skl_dfw_v4_pipe {
-	u8 pipe_id;
-	u8 pipe_priority;
-	u16 conn_type:4;
-	u16 rsvd:4;
-	u16 memory_pages:8;
+	__u8 pipe_id;
+	__u8 pipe_priority;
+	__u16 conn_type:4;
+	__u16 rsvd:4;
+	__u16 memory_pages:8;
 } __packed;
 
 struct skl_dfw_v4_module {
 	char uuid[SKL_UUID_STR_SZ];
 
-	u16 module_id;
-	u16 instance_id;
-	u32 max_mcps;
-	u32 mem_pages;
-	u32 obs;
-	u32 ibs;
-	u32 vbus_id;
-
-	u32 max_in_queue:8;
-	u32 max_out_queue:8;
-	u32 time_slot:8;
-	u32 core_id:4;
-	u32 rsvd1:4;
-
-	u32 module_type:8;
-	u32 conn_type:4;
-	u32 dev_type:4;
-	u32 hw_conn_type:4;
-	u32 rsvd2:12;
-
-	u32 params_fixup:8;
-	u32 converter:8;
-	u32 input_pin_type:1;
-	u32 output_pin_type:1;
-	u32 is_dynamic_in_pin:1;
-	u32 is_dynamic_out_pin:1;
-	u32 is_loadable:1;
-	u32 rsvd3:11;
+	__u16 module_id;
+	__u16 instance_id;
+	__u32 max_mcps;
+	__u32 mem_pages;
+	__u32 obs;
+	__u32 ibs;
+	__u32 vbus_id;
+
+	__u32 max_in_queue:8;
+	__u32 max_out_queue:8;
+	__u32 time_slot:8;
+	__u32 core_id:4;
+	__u32 rsvd1:4;
+
+	__u32 module_type:8;
+	__u32 conn_type:4;
+	__u32 dev_type:4;
+	__u32 hw_conn_type:4;
+	__u32 rsvd2:12;
+
+	__u32 params_fixup:8;
+	__u32 converter:8;
+	__u32 input_pin_type:1;
+	__u32 output_pin_type:1;
+	__u32 is_dynamic_in_pin:1;
+	__u32 is_dynamic_out_pin:1;
+	__u32 is_loadable:1;
+	__u32 rsvd3:11;
 
 	struct skl_dfw_v4_pipe pipe;
 	struct skl_dfw_v4_module_fmt in_fmt[MAX_IN_QUEUE];

commit 0c24fdc00244cc08309e397e3783f2943221dc53
Author: Guenter Roeck <groeck@chromium.org>
Date:   Thu May 24 12:49:23 2018 -0700

    ASoC: topology: Move skl-tplg-interface.h to uapi
    
    skl-tplg-interface.h describes firmware format details for Skylake
    topology files. It is part of the ABI and should reside in the uapi
    directory.
    
    While moving the file, also replace the license boilerplate with
    the SPDX License Identifier.
    
    No functional change.
    
    Signed-off-by: Guenter Roeck <groeck@chromium.org>
    Signed-off-by: Mark Brown <broonie@kernel.org>

diff --git a/include/uapi/sound/skl-tplg-interface.h b/include/uapi/sound/skl-tplg-interface.h
new file mode 100644
index 000000000000..f58cafa42f18
--- /dev/null
+++ b/include/uapi/sound/skl-tplg-interface.h
@@ -0,0 +1,237 @@
+/* SPDX-License-Identifier: GPL-2.0 */
+/*
+ * skl-tplg-interface.h - Intel DSP FW private data interface
+ *
+ * Copyright (C) 2015 Intel Corp
+ * Author: Jeeja KP <jeeja.kp@intel.com>
+ *	    Nilofer, Samreen <samreen.nilofer@intel.com>
+ */
+
+#ifndef __HDA_TPLG_INTERFACE_H__
+#define __HDA_TPLG_INTERFACE_H__
+
+/*
+ * Default types range from 0~12. type can range from 0 to 0xff
+ * SST types start at higher to avoid any overlapping in future
+ */
+#define SKL_CONTROL_TYPE_BYTE_TLV	0x100
+#define SKL_CONTROL_TYPE_MIC_SELECT	0x102
+
+#define HDA_SST_CFG_MAX	900 /* size of copier cfg*/
+#define MAX_IN_QUEUE 8
+#define MAX_OUT_QUEUE 8
+
+#define SKL_UUID_STR_SZ 40
+/* Event types goes here */
+/* Reserve event type 0 for no event handlers */
+enum skl_event_types {
+	SKL_EVENT_NONE = 0,
+	SKL_MIXER_EVENT,
+	SKL_MUX_EVENT,
+	SKL_VMIXER_EVENT,
+	SKL_PGA_EVENT
+};
+
+/**
+ * enum skl_ch_cfg - channel configuration
+ *
+ * @SKL_CH_CFG_MONO:	One channel only
+ * @SKL_CH_CFG_STEREO:	L & R
+ * @SKL_CH_CFG_2_1:	L, R & LFE
+ * @SKL_CH_CFG_3_0:	L, C & R
+ * @SKL_CH_CFG_3_1:	L, C, R & LFE
+ * @SKL_CH_CFG_QUATRO:	L, R, Ls & Rs
+ * @SKL_CH_CFG_4_0:	L, C, R & Cs
+ * @SKL_CH_CFG_5_0:	L, C, R, Ls & Rs
+ * @SKL_CH_CFG_5_1:	L, C, R, Ls, Rs & LFE
+ * @SKL_CH_CFG_DUAL_MONO: One channel replicated in two
+ * @SKL_CH_CFG_I2S_DUAL_STEREO_0: Stereo(L,R) in 4 slots, 1st stream:[ L, R, -, - ]
+ * @SKL_CH_CFG_I2S_DUAL_STEREO_1: Stereo(L,R) in 4 slots, 2nd stream:[ -, -, L, R ]
+ * @SKL_CH_CFG_INVALID:	Invalid
+ */
+enum skl_ch_cfg {
+	SKL_CH_CFG_MONO = 0,
+	SKL_CH_CFG_STEREO = 1,
+	SKL_CH_CFG_2_1 = 2,
+	SKL_CH_CFG_3_0 = 3,
+	SKL_CH_CFG_3_1 = 4,
+	SKL_CH_CFG_QUATRO = 5,
+	SKL_CH_CFG_4_0 = 6,
+	SKL_CH_CFG_5_0 = 7,
+	SKL_CH_CFG_5_1 = 8,
+	SKL_CH_CFG_DUAL_MONO = 9,
+	SKL_CH_CFG_I2S_DUAL_STEREO_0 = 10,
+	SKL_CH_CFG_I2S_DUAL_STEREO_1 = 11,
+	SKL_CH_CFG_4_CHANNEL = 12,
+	SKL_CH_CFG_INVALID
+};
+
+enum skl_module_type {
+	SKL_MODULE_TYPE_MIXER = 0,
+	SKL_MODULE_TYPE_COPIER,
+	SKL_MODULE_TYPE_UPDWMIX,
+	SKL_MODULE_TYPE_SRCINT,
+	SKL_MODULE_TYPE_ALGO,
+	SKL_MODULE_TYPE_BASE_OUTFMT,
+	SKL_MODULE_TYPE_KPB,
+	SKL_MODULE_TYPE_MIC_SELECT,
+};
+
+enum skl_core_affinity {
+	SKL_AFFINITY_CORE_0 = 0,
+	SKL_AFFINITY_CORE_1,
+	SKL_AFFINITY_CORE_MAX
+};
+
+enum skl_pipe_conn_type {
+	SKL_PIPE_CONN_TYPE_NONE = 0,
+	SKL_PIPE_CONN_TYPE_FE,
+	SKL_PIPE_CONN_TYPE_BE
+};
+
+enum skl_hw_conn_type {
+	SKL_CONN_NONE = 0,
+	SKL_CONN_SOURCE = 1,
+	SKL_CONN_SINK = 2
+};
+
+enum skl_dev_type {
+	SKL_DEVICE_BT = 0x0,
+	SKL_DEVICE_DMIC = 0x1,
+	SKL_DEVICE_I2S = 0x2,
+	SKL_DEVICE_SLIMBUS = 0x3,
+	SKL_DEVICE_HDALINK = 0x4,
+	SKL_DEVICE_HDAHOST = 0x5,
+	SKL_DEVICE_NONE
+};
+
+/**
+ * enum skl_interleaving - interleaving style
+ *
+ * @SKL_INTERLEAVING_PER_CHANNEL: [s1_ch1...s1_chN,...,sM_ch1...sM_chN]
+ * @SKL_INTERLEAVING_PER_SAMPLE: [s1_ch1...sM_ch1,...,s1_chN...sM_chN]
+ */
+enum skl_interleaving {
+	SKL_INTERLEAVING_PER_CHANNEL = 0,
+	SKL_INTERLEAVING_PER_SAMPLE = 1,
+};
+
+enum skl_sample_type {
+	SKL_SAMPLE_TYPE_INT_MSB = 0,
+	SKL_SAMPLE_TYPE_INT_LSB = 1,
+	SKL_SAMPLE_TYPE_INT_SIGNED = 2,
+	SKL_SAMPLE_TYPE_INT_UNSIGNED = 3,
+	SKL_SAMPLE_TYPE_FLOAT = 4
+};
+
+enum module_pin_type {
+	/* All pins of the module takes same PCM inputs or outputs
+	* e.g. mixout
+	*/
+	SKL_PIN_TYPE_HOMOGENEOUS,
+	/* All pins of the module takes different PCM inputs or outputs
+	* e.g mux
+	*/
+	SKL_PIN_TYPE_HETEROGENEOUS,
+};
+
+enum skl_module_param_type {
+	SKL_PARAM_DEFAULT = 0,
+	SKL_PARAM_INIT,
+	SKL_PARAM_SET,
+	SKL_PARAM_BIND
+};
+
+struct skl_dfw_algo_data {
+	u32 set_params:2;
+	u32 rsvd:30;
+	u32 param_id;
+	u32 max;
+	char params[0];
+} __packed;
+
+enum skl_tkn_dir {
+	SKL_DIR_IN,
+	SKL_DIR_OUT
+};
+
+enum skl_tuple_type {
+	SKL_TYPE_TUPLE,
+	SKL_TYPE_DATA
+};
+
+/* v4 configuration data */
+
+struct skl_dfw_v4_module_pin {
+	u16 module_id;
+	u16 instance_id;
+} __packed;
+
+struct skl_dfw_v4_module_fmt {
+	u32 channels;
+	u32 freq;
+	u32 bit_depth;
+	u32 valid_bit_depth;
+	u32 ch_cfg;
+	u32 interleaving_style;
+	u32 sample_type;
+	u32 ch_map;
+} __packed;
+
+struct skl_dfw_v4_module_caps {
+	u32 set_params:2;
+	u32 rsvd:30;
+	u32 param_id;
+	u32 caps_size;
+	u32 caps[HDA_SST_CFG_MAX];
+} __packed;
+
+struct skl_dfw_v4_pipe {
+	u8 pipe_id;
+	u8 pipe_priority;
+	u16 conn_type:4;
+	u16 rsvd:4;
+	u16 memory_pages:8;
+} __packed;
+
+struct skl_dfw_v4_module {
+	char uuid[SKL_UUID_STR_SZ];
+
+	u16 module_id;
+	u16 instance_id;
+	u32 max_mcps;
+	u32 mem_pages;
+	u32 obs;
+	u32 ibs;
+	u32 vbus_id;
+
+	u32 max_in_queue:8;
+	u32 max_out_queue:8;
+	u32 time_slot:8;
+	u32 core_id:4;
+	u32 rsvd1:4;
+
+	u32 module_type:8;
+	u32 conn_type:4;
+	u32 dev_type:4;
+	u32 hw_conn_type:4;
+	u32 rsvd2:12;
+
+	u32 params_fixup:8;
+	u32 converter:8;
+	u32 input_pin_type:1;
+	u32 output_pin_type:1;
+	u32 is_dynamic_in_pin:1;
+	u32 is_dynamic_out_pin:1;
+	u32 is_loadable:1;
+	u32 rsvd3:11;
+
+	struct skl_dfw_v4_pipe pipe;
+	struct skl_dfw_v4_module_fmt in_fmt[MAX_IN_QUEUE];
+	struct skl_dfw_v4_module_fmt out_fmt[MAX_OUT_QUEUE];
+	struct skl_dfw_v4_module_pin in_pin[MAX_IN_QUEUE];
+	struct skl_dfw_v4_module_pin out_pin[MAX_OUT_QUEUE];
+	struct skl_dfw_v4_module_caps caps;
+} __packed;
+
+#endif
