commit 01c60dcea9f7a97ed0e94245e425002a8ddd6c17
Author: Patrick Venture <venture@google.com>
Date:   Mon Apr 8 07:42:39 2019 -0700

    drivers/misc: Add Aspeed P2A control driver
    
    The ASPEED AST2400, and AST2500 in some configurations include a
    PCI-to-AHB MMIO bridge.  This bridge allows a server to read and write
    in the BMC's physical address space.  This feature is especially useful
    when using this bridge to send large files to the BMC.
    
    The host may use this to send down a firmware image by staging data at a
    specific memory address, and in a coordinated effort with the BMC's
    software stack and kernel, transmit the bytes.
    
    This driver enables the BMC to unlock the PCI bridge on demand, and
    configure it via ioctl to allow the host to write bytes to an agreed
    upon location.  In the primary use-case, the region to use is known
    apriori on the BMC, and the host requests this information.  Once this
    request is received, the BMC's software stack will enable the bridge and
    the region and then using some software flow control (possibly via IPMI
    packets), copy the bytes down.  Once the process is complete, the BMC
    will disable the bridge and unset any region involved.
    
    The default behavior of this bridge when present is: enabled and all
    regions marked read-write.  This driver will fix the regions to be
    read-only and then disable the bridge entirely.
    
    The memory regions protected are:
     * BMC flash MMIO window
     * System flash MMIO windows
     * SOC IO (peripheral MMIO)
     * DRAM
    
    The DRAM region itself is all of DRAM and cannot be further specified.
    Once the PCI bridge is enabled, the host can read all of DRAM, and if
    the DRAM section is write-enabled, then it can write to all of it.
    
    Signed-off-by: Patrick Venture <venture@google.com>
    Reviewed-by: Andrew Jeffery <andrew@aj.id.au>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/include/uapi/linux/aspeed-p2a-ctrl.h b/include/uapi/linux/aspeed-p2a-ctrl.h
new file mode 100644
index 000000000000..033355552a6e
--- /dev/null
+++ b/include/uapi/linux/aspeed-p2a-ctrl.h
@@ -0,0 +1,62 @@
+/* SPDX-License-Identifier: GPL-2.0+ WITH Linux-syscall-note */
+/*
+ * Copyright 2019 Google Inc
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License
+ * as published by the Free Software Foundation; either version
+ * 2 of the License, or (at your option) any later version.
+ *
+ * Provides a simple driver to control the ASPEED P2A interface which allows
+ * the host to read and write to various regions of the BMC's memory.
+ */
+
+#ifndef _UAPI_LINUX_ASPEED_P2A_CTRL_H
+#define _UAPI_LINUX_ASPEED_P2A_CTRL_H
+
+#include <linux/ioctl.h>
+#include <linux/types.h>
+
+#define ASPEED_P2A_CTRL_READ_ONLY 0
+#define ASPEED_P2A_CTRL_READWRITE 1
+
+/*
+ * This driver provides a mechanism for enabling or disabling the read-write
+ * property of specific windows into the ASPEED BMC's memory.
+ *
+ * A user can map a region of the BMC's memory as read-only or read-write, with
+ * the caveat that once any region is mapped, all regions are unlocked for
+ * reading.
+ */
+
+/*
+ * Unlock a region of BMC physical memory for access from the host.
+ *
+ * Also used to read back the optional memory-region configuration for the
+ * driver.
+ */
+struct aspeed_p2a_ctrl_mapping {
+	__u64 addr;
+	__u32 length;
+	__u32 flags;
+};
+
+#define __ASPEED_P2A_CTRL_IOCTL_MAGIC 0xb3
+
+/*
+ * This IOCTL is meant to configure a region or regions of memory given a
+ * starting address and length to be readable by the host, or
+ * readable-writeable.
+ */
+#define ASPEED_P2A_CTRL_IOCTL_SET_WINDOW _IOW(__ASPEED_P2A_CTRL_IOCTL_MAGIC, \
+		0x00, struct aspeed_p2a_ctrl_mapping)
+
+/*
+ * This IOCTL is meant to read back to the user the base address and length of
+ * the memory-region specified to the driver for use with mmap.
+ */
+#define ASPEED_P2A_CTRL_IOCTL_GET_MEMORY_CONFIG \
+	_IOWR(__ASPEED_P2A_CTRL_IOCTL_MAGIC, \
+		0x01, struct aspeed_p2a_ctrl_mapping)
+
+#endif /* _UAPI_LINUX_ASPEED_P2A_CTRL_H */
