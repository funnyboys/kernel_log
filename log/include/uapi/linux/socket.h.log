commit 5e5412c365a32e452daa762eac36121cb8a370bb
Author: Qian Cai <cai@lca.pw>
Date:   Tue Jul 30 11:30:33 2019 -0400

    net/socket: fix GCC8+ Wpacked-not-aligned warnings
    
    There are a lot of those warnings with GCC8+ 64-bit,
    
    In file included from ./include/linux/sctp.h:42,
                     from net/core/skbuff.c:47:
    ./include/uapi/linux/sctp.h:395:1: warning: alignment 4 of 'struct
    sctp_paddr_change' is less than 8 [-Wpacked-not-aligned]
     } __attribute__((packed, aligned(4)));
     ^
    ./include/uapi/linux/sctp.h:728:1: warning: alignment 4 of 'struct
    sctp_setpeerprim' is less than 8 [-Wpacked-not-aligned]
     } __attribute__((packed, aligned(4)));
     ^
    ./include/uapi/linux/sctp.h:727:26: warning: 'sspp_addr' offset 4 in
    'struct sctp_setpeerprim' isn't aligned to 8 [-Wpacked-not-aligned]
      struct sockaddr_storage sspp_addr;
                              ^~~~~~~~~
    ./include/uapi/linux/sctp.h:741:1: warning: alignment 4 of 'struct
    sctp_prim' is less than 8 [-Wpacked-not-aligned]
     } __attribute__((packed, aligned(4)));
     ^
    ./include/uapi/linux/sctp.h:740:26: warning: 'ssp_addr' offset 4 in
    'struct sctp_prim' isn't aligned to 8 [-Wpacked-not-aligned]
      struct sockaddr_storage ssp_addr;
                              ^~~~~~~~
    ./include/uapi/linux/sctp.h:792:1: warning: alignment 4 of 'struct
    sctp_paddrparams' is less than 8 [-Wpacked-not-aligned]
     } __attribute__((packed, aligned(4)));
     ^
    ./include/uapi/linux/sctp.h:784:26: warning: 'spp_address' offset 4 in
    'struct sctp_paddrparams' isn't aligned to 8 [-Wpacked-not-aligned]
      struct sockaddr_storage spp_address;
                              ^~~~~~~~~~~
    ./include/uapi/linux/sctp.h:905:1: warning: alignment 4 of 'struct
    sctp_paddrinfo' is less than 8 [-Wpacked-not-aligned]
     } __attribute__((packed, aligned(4)));
     ^
    ./include/uapi/linux/sctp.h:899:26: warning: 'spinfo_address' offset 4
    in 'struct sctp_paddrinfo' isn't aligned to 8 [-Wpacked-not-aligned]
      struct sockaddr_storage spinfo_address;
                              ^~~~~~~~~~~~~~
    
    This is because the commit 20c9c825b12f ("[SCTP] Fix SCTP socket options
    to work with 32-bit apps on 64-bit kernels.") added "packed, aligned(4)"
    GCC attributes to some structures but one of the members, i.e, "struct
    sockaddr_storage" in those structures has the attribute,
    "aligned(__alignof__ (struct sockaddr *)" which is 8-byte on 64-bit
    systems, so the commit overwrites the designed alignments for
    "sockaddr_storage".
    
    To fix this, "struct sockaddr_storage" needs to be aligned to 4-byte as
    it is only used in those packed sctp structure which is part of UAPI,
    and "struct __kernel_sockaddr_storage" is used in some other
    places of UAPI that need not to change alignments in order to not
    breaking userspace.
    
    Use an implicit alignment for "struct __kernel_sockaddr_storage" so it
    can keep the same alignments as a member in both packed and un-packed
    structures without breaking UAPI.
    
    Suggested-by: David Laight <David.Laight@ACULAB.COM>
    Signed-off-by: Qian Cai <cai@lca.pw>
    Signed-off-by: David S. Miller <davem@davemloft.net>

diff --git a/include/uapi/linux/socket.h b/include/uapi/linux/socket.h
index 8eb96021709c..c3409c8ec0dd 100644
--- a/include/uapi/linux/socket.h
+++ b/include/uapi/linux/socket.h
@@ -6,17 +6,24 @@
  * Desired design of maximum size and alignment (see RFC2553)
  */
 #define _K_SS_MAXSIZE	128	/* Implementation specific max size */
-#define _K_SS_ALIGNSIZE	(__alignof__ (struct sockaddr *))
-				/* Implementation specific desired alignment */
 
 typedef unsigned short __kernel_sa_family_t;
 
+/*
+ * The definition uses anonymous union and struct in order to control the
+ * default alignment.
+ */
 struct __kernel_sockaddr_storage {
-	__kernel_sa_family_t	ss_family;		/* address family */
-	/* Following field(s) are implementation specific */
-	char		__data[_K_SS_MAXSIZE - sizeof(unsigned short)];
+	union {
+		struct {
+			__kernel_sa_family_t	ss_family; /* address family */
+			/* Following field(s) are implementation specific */
+			char __data[_K_SS_MAXSIZE - sizeof(unsigned short)];
 				/* space to achieve desired size, */
 				/* _SS_MAXSIZE value minus size of ss_family */
-} __attribute__ ((aligned(_K_SS_ALIGNSIZE)));	/* force desired alignment */
+		};
+		void *__align; /* implementation specific desired alignment */
+	};
+};
 
 #endif /* _UAPI_LINUX_SOCKET_H */

commit 6f52b16c5b29b89d92c0e7236f4655dc8491ad70
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Wed Nov 1 15:08:43 2017 +0100

    License cleanup: add SPDX license identifier to uapi header files with no license
    
    Many user space API headers are missing licensing information, which
    makes it hard for compliance tools to determine the correct license.
    
    By default are files without license information under the default
    license of the kernel, which is GPLV2.  Marking them GPLV2 would exclude
    them from being included in non GPLV2 code, which is obviously not
    intended. The user space API headers fall under the syscall exception
    which is in the kernels COPYING file:
    
       NOTE! This copyright does *not* cover user programs that use kernel
       services by normal system calls - this is merely considered normal use
       of the kernel, and does *not* fall under the heading of "derived work".
    
    otherwise syscall usage would not be possible.
    
    Update the files which contain no license information with an SPDX
    license identifier.  The chosen identifier is 'GPL-2.0 WITH
    Linux-syscall-note' which is the officially assigned identifier for the
    Linux syscall exception.  SPDX license identifiers are a legally binding
    shorthand, which can be used instead of the full boiler plate text.
    
    This patch is based on work done by Thomas Gleixner and Kate Stewart and
    Philippe Ombredanne.  See the previous patch in this series for the
    methodology of how this patch was researched.
    
    Reviewed-by: Kate Stewart <kstewart@linuxfoundation.org>
    Reviewed-by: Philippe Ombredanne <pombredanne@nexb.com>
    Reviewed-by: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/include/uapi/linux/socket.h b/include/uapi/linux/socket.h
index 76ab0c68561e..8eb96021709c 100644
--- a/include/uapi/linux/socket.h
+++ b/include/uapi/linux/socket.h
@@ -1,3 +1,4 @@
+/* SPDX-License-Identifier: GPL-2.0 WITH Linux-syscall-note */
 #ifndef _UAPI_LINUX_SOCKET_H
 #define _UAPI_LINUX_SOCKET_H
 

commit 607ca46e97a1b6594b29647d98a32d545c24bdff
Author: David Howells <dhowells@redhat.com>
Date:   Sat Oct 13 10:46:48 2012 +0100

    UAPI: (Scripted) Disintegrate include/linux
    
    Signed-off-by: David Howells <dhowells@redhat.com>
    Acked-by: Arnd Bergmann <arnd@arndb.de>
    Acked-by: Thomas Gleixner <tglx@linutronix.de>
    Acked-by: Michael Kerrisk <mtk.manpages@gmail.com>
    Acked-by: Paul E. McKenney <paulmck@linux.vnet.ibm.com>
    Acked-by: Dave Jones <davej@redhat.com>

diff --git a/include/uapi/linux/socket.h b/include/uapi/linux/socket.h
new file mode 100644
index 000000000000..76ab0c68561e
--- /dev/null
+++ b/include/uapi/linux/socket.h
@@ -0,0 +1,21 @@
+#ifndef _UAPI_LINUX_SOCKET_H
+#define _UAPI_LINUX_SOCKET_H
+
+/*
+ * Desired design of maximum size and alignment (see RFC2553)
+ */
+#define _K_SS_MAXSIZE	128	/* Implementation specific max size */
+#define _K_SS_ALIGNSIZE	(__alignof__ (struct sockaddr *))
+				/* Implementation specific desired alignment */
+
+typedef unsigned short __kernel_sa_family_t;
+
+struct __kernel_sockaddr_storage {
+	__kernel_sa_family_t	ss_family;		/* address family */
+	/* Following field(s) are implementation specific */
+	char		__data[_K_SS_MAXSIZE - sizeof(unsigned short)];
+				/* space to achieve desired size, */
+				/* _SS_MAXSIZE value minus size of ss_family */
+} __attribute__ ((aligned(_K_SS_ALIGNSIZE)));	/* force desired alignment */
+
+#endif /* _UAPI_LINUX_SOCKET_H */
