commit e013477bc20763e28d95d74e5ca97411194984ec
Author: Guido Kiener <guido@kiener-muenchen.de>
Date:   Wed Sep 12 10:51:07 2018 +0200

    usb: usbtmc: Add ioctl USBTMC_IOCTL_API_VERSION
    
    Add ioctl USBTMC_IOCTL_API_VERSION to get current API version
    of usbtmc driver.
    
    This is to allow an instrument library to determine whether
    the driver API is compatible with the implementation.
    
    The API may change in future versions. Therefore the macro
    USBTMC_API_VERSION should be incremented when changing tmc.h
    with new flags, ioctls or when changing a significant behavior
    of the driver.
    
    Signed-off-by: Guido Kiener <guido.kiener@rohde-schwarz.com>
    Reviewed-by: Steve Bayless <steve_bayless@keysight.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/include/uapi/linux/usb/tmc.h b/include/uapi/linux/usb/tmc.h
index 4b36108b9cca..fdd4d88a7b95 100644
--- a/include/uapi/linux/usb/tmc.h
+++ b/include/uapi/linux/usb/tmc.h
@@ -89,6 +89,7 @@ struct usbtmc_message {
 #define USBTMC_IOCTL_WRITE		_IOWR(USBTMC_IOC_NR, 13, struct usbtmc_message)
 #define USBTMC_IOCTL_READ		_IOWR(USBTMC_IOC_NR, 14, struct usbtmc_message)
 #define USBTMC_IOCTL_WRITE_RESULT	_IOWR(USBTMC_IOC_NR, 15, __u32)
+#define USBTMC_IOCTL_API_VERSION	_IOR(USBTMC_IOC_NR, 16, __u32)
 
 #define USBTMC488_IOCTL_GET_CAPS	_IOR(USBTMC_IOC_NR, 17, unsigned char)
 #define USBTMC488_IOCTL_READ_STB	_IOR(USBTMC_IOC_NR, 18, unsigned char)

commit ec34d08eff71b6cc69bacd70906cf9ff0d8c87a4
Author: Guido Kiener <guido@kiener-muenchen.de>
Date:   Wed Sep 12 10:51:00 2018 +0200

    usb: usbtmc: Add ioctl USBTMC_IOCTL_AUTO_ABORT
    
    Add ioctl USBTMC_IOCTL_AUTO_ABORT to configure auto_abort for
    each specific file handle.
    
    Signed-off-by: Guido Kiener <guido.kiener@rohde-schwarz.com>
    Reviewed-by: Steve Bayless <steve_bayless@keysight.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/include/uapi/linux/usb/tmc.h b/include/uapi/linux/usb/tmc.h
index 55ca365b66d4..4b36108b9cca 100644
--- a/include/uapi/linux/usb/tmc.h
+++ b/include/uapi/linux/usb/tmc.h
@@ -99,6 +99,7 @@ struct usbtmc_message {
 #define USBTMC488_IOCTL_WAIT_SRQ	_IOW(USBTMC_IOC_NR, 23, __u32)
 
 #define USBTMC_IOCTL_MSG_IN_ATTR	_IOR(USBTMC_IOC_NR, 24, __u8)
+#define USBTMC_IOCTL_AUTO_ABORT		_IOW(USBTMC_IOC_NR, 25, __u8)
 
 /* Cancel and cleanup asynchronous calls */
 #define USBTMC_IOCTL_CANCEL_IO		_IO(USBTMC_IOC_NR, 35)

commit 8409e96f012a777ad9ca2050d567d766e43ec343
Author: Guido Kiener <guido@kiener-muenchen.de>
Date:   Wed Sep 12 10:50:59 2018 +0200

    usb: usbtmc: add ioctl USBTMC_IOCTL_MSG_IN_ATTR
    
    add ioctl USBTMC_IOCTL_MSG_IN_ATTR that returns the specific
    bmTransferAttributes field of the last DEV_DEP_MSG_IN Bulk-IN
    header. This header is received by the read() function. The
    meaning of the (u8) bitmap bmTransferAttributes is:
    
    Bit 0 = EOM flag is set when the last transfer of a USBTMC
    message is received.
    
    Bit 1 = is set when the last byte is a termchar (e.g. '\n').
    Note that this bit is always zero when the device does not support
    the termchar feature or when termchar detection is not enabled
    (see ioctl USBTMC_IOCTL_CONFIG_TERMCHAR).
    
    Signed-off-by: Guido Kiener <guido.kiener@rohde-schwarz.com>
    Reviewed-by: Steve Bayless <steve_bayless@keysight.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/include/uapi/linux/usb/tmc.h b/include/uapi/linux/usb/tmc.h
index e228ad7fc141..55ca365b66d4 100644
--- a/include/uapi/linux/usb/tmc.h
+++ b/include/uapi/linux/usb/tmc.h
@@ -98,6 +98,8 @@ struct usbtmc_message {
 #define USBTMC488_IOCTL_TRIGGER		_IO(USBTMC_IOC_NR, 22)
 #define USBTMC488_IOCTL_WAIT_SRQ	_IOW(USBTMC_IOC_NR, 23, __u32)
 
+#define USBTMC_IOCTL_MSG_IN_ATTR	_IOR(USBTMC_IOC_NR, 24, __u8)
+
 /* Cancel and cleanup asynchronous calls */
 #define USBTMC_IOCTL_CANCEL_IO		_IO(USBTMC_IOC_NR, 35)
 #define USBTMC_IOCTL_CLEANUP_IO		_IO(USBTMC_IOC_NR, 36)

commit 739240a9f6ac4d4c841081029874b3521744e490
Author: Guido Kiener <guido@kiener-muenchen.de>
Date:   Wed Sep 12 10:50:58 2018 +0200

    usb: usbtmc: Add ioctl USBTMC488_IOCTL_WAIT_SRQ
    
    Wait until an SRQ (service request) is received on the interrupt pipe
    or until the given period of time is expired. In contrast to the
    poll() function this ioctl does not return when other (a)synchronous
    I/O operations fail with EPOLLERR.
    
    Signed-off-by: Guido Kiener <guido.kiener@rohde-schwarz.com>
    Reviewed-by: Steve Bayless <steve_bayless@keysight.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/include/uapi/linux/usb/tmc.h b/include/uapi/linux/usb/tmc.h
index 5a69d9dc967d..e228ad7fc141 100644
--- a/include/uapi/linux/usb/tmc.h
+++ b/include/uapi/linux/usb/tmc.h
@@ -96,6 +96,7 @@ struct usbtmc_message {
 #define USBTMC488_IOCTL_GOTO_LOCAL	_IO(USBTMC_IOC_NR, 20)
 #define USBTMC488_IOCTL_LOCAL_LOCKOUT	_IO(USBTMC_IOC_NR, 21)
 #define USBTMC488_IOCTL_TRIGGER		_IO(USBTMC_IOC_NR, 22)
+#define USBTMC488_IOCTL_WAIT_SRQ	_IOW(USBTMC_IOC_NR, 23, __u32)
 
 /* Cancel and cleanup asynchronous calls */
 #define USBTMC_IOCTL_CANCEL_IO		_IO(USBTMC_IOC_NR, 35)

commit 987b81998b41563113f714009e7e748e1211026d
Author: Guido Kiener <guido@kiener-muenchen.de>
Date:   Wed Sep 12 10:50:56 2018 +0200

    usb: usbtmc: Add ioctl USBTMC_IOCTL_CLEANUP_IO
    
    The ioctl USBTMC_IOCTL_CLEANUP_IO kills all submitted urbs to OUT
    and IN bulk, and clears all received data from IN bulk. Internal
    transfer counters and error states are reset.
    
    An application should use this ioctl after an asnychronous transfer
    was canceled and/or error handling has finished.
    
    Signed-off-by: Guido Kiener <guido.kiener@rohde-schwarz.com>
    Reviewed-by: Steve Bayless <steve_bayless@keysight.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/include/uapi/linux/usb/tmc.h b/include/uapi/linux/usb/tmc.h
index 42e275d1d385..5a69d9dc967d 100644
--- a/include/uapi/linux/usb/tmc.h
+++ b/include/uapi/linux/usb/tmc.h
@@ -99,6 +99,7 @@ struct usbtmc_message {
 
 /* Cancel and cleanup asynchronous calls */
 #define USBTMC_IOCTL_CANCEL_IO		_IO(USBTMC_IOC_NR, 35)
+#define USBTMC_IOCTL_CLEANUP_IO		_IO(USBTMC_IOC_NR, 36)
 
 /* Driver encoded usb488 capabilities */
 #define USBTMC488_CAPABILITY_TRIGGER         1

commit 46ecc9d54efc11bf99689901f867854d264cbc0b
Author: Guido Kiener <guido@kiener-muenchen.de>
Date:   Wed Sep 12 10:50:55 2018 +0200

    usb: usbtmc: Add ioctl USBTMC_IOCTL_CANCEL_IO
    
    ioctl USBTMC_IOCTL_CANCEL_IO stops and kills all flying urbs of
    last USBTMC_IOCTL_READ and USBTMC_IOCTL_WRITE function calls.
    A subsequent call to USBTMC_IOCTL_READ or
    USBTMC_IOCTL_WRITE_RESULT returns -ECANCELED with
    information about current transferred data.
    
    Signed-off-by: Guido Kiener <guido.kiener@rohde-schwarz.com>
    Reviewed-by: Steve Bayless <steve_bayless@keysight.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/include/uapi/linux/usb/tmc.h b/include/uapi/linux/usb/tmc.h
index f0fd0d4334ec..42e275d1d385 100644
--- a/include/uapi/linux/usb/tmc.h
+++ b/include/uapi/linux/usb/tmc.h
@@ -97,6 +97,9 @@ struct usbtmc_message {
 #define USBTMC488_IOCTL_LOCAL_LOCKOUT	_IO(USBTMC_IOC_NR, 21)
 #define USBTMC488_IOCTL_TRIGGER		_IO(USBTMC_IOC_NR, 22)
 
+/* Cancel and cleanup asynchronous calls */
+#define USBTMC_IOCTL_CANCEL_IO		_IO(USBTMC_IOC_NR, 35)
+
 /* Driver encoded usb488 capabilities */
 #define USBTMC488_CAPABILITY_TRIGGER         1
 #define USBTMC488_CAPABILITY_SIMPLE          2

commit bb99794a4792068cb4bfd40e99e0f9d8fe7872fa
Author: Guido Kiener <guido@kiener-muenchen.de>
Date:   Wed Sep 12 10:50:54 2018 +0200

    usb: usbtmc: Add ioctl for vendor specific read
    
    The USBTMC_IOCTL_READ call provides for generic synchronous and
    asynchronous reads on bulk IN to implement vendor specific library
    routines.
    
    Depending on transfer_size the function submits one or more urbs (up
    to 16) each with a size of up to 4kB.
    
    The flag USBTMC_FLAG_IGNORE_TRAILER can be used when the transmission
    size is already known. Then the function does not truncate the
    transfer_size to a multiple of 4 kB, but does reserve extra space
    to receive the final short or zero length packet. Note that the
    instrument is allowed to send up to wMaxPacketSize - 1 bytes at the
    end of a message to avoid sending a zero length packet.
    
    With flag USBTMC_FLAG_ASYNC the ioctl is non blocking. When no
    received data is available, the read function submits as many urbs as
    needed to receive transfer_size bytes. However the number of flying
    urbs (=4kB) is limited to 16 even with subsequent calls of this ioctl.
    
    Returns -EAGAIN when non blocking and no data is received.
    Signals EPOLLIN | EPOLLRDNORM when asynchronous urbs are ready to
    be read.
    
    In non blocking mode the usbtmc_message.message pointer may be NULL
    and the ioctl just submits urbs to initiate receiving data. However if
    data is already available due to a previous non blocking call the ioctl
    will return -EINVAL when the message pointer is NULL.
    
    This ioctl does not support compatibility for 32 bit
    applications running on 64 bit systems. However all other
    convenient ioctls of the USBTMC driver can still be used in 32
    bit applications as well. Note that 32 bit applications running
    on 32 bit target systems are not affected by this limitation.
    
    Signed-off-by: Guido Kiener <guido.kiener@rohde-schwarz.com>
    Reviewed-by: Steve Bayless <steve_bayless@keysight.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/include/uapi/linux/usb/tmc.h b/include/uapi/linux/usb/tmc.h
index 0166ba5452d5..f0fd0d4334ec 100644
--- a/include/uapi/linux/usb/tmc.h
+++ b/include/uapi/linux/usb/tmc.h
@@ -64,6 +64,7 @@ struct usbtmc_termchar {
  */
 #define USBTMC_FLAG_ASYNC		0x0001
 #define USBTMC_FLAG_APPEND		0x0002
+#define USBTMC_FLAG_IGNORE_TRAILER	0x0004
 
 struct usbtmc_message {
 	__u32 transfer_size; /* size of bytes to transfer */
@@ -86,6 +87,7 @@ struct usbtmc_message {
 #define USBTMC_IOCTL_EOM_ENABLE	        _IOW(USBTMC_IOC_NR, 11, __u8)
 #define USBTMC_IOCTL_CONFIG_TERMCHAR	_IOW(USBTMC_IOC_NR, 12, struct usbtmc_termchar)
 #define USBTMC_IOCTL_WRITE		_IOWR(USBTMC_IOC_NR, 13, struct usbtmc_message)
+#define USBTMC_IOCTL_READ		_IOWR(USBTMC_IOC_NR, 14, struct usbtmc_message)
 #define USBTMC_IOCTL_WRITE_RESULT	_IOWR(USBTMC_IOC_NR, 15, __u32)
 
 #define USBTMC488_IOCTL_GET_CAPS	_IOR(USBTMC_IOC_NR, 17, unsigned char)

commit b14984518ee60ef7662aa6520b76ae6046e08857
Author: Guido Kiener <guido@kiener-muenchen.de>
Date:   Wed Sep 12 10:50:53 2018 +0200

    usb: usbtmc: Add ioctl USBTMC_IOCTL_WRITE_RESULT
    
    ioctl USBTMC_IOCTL_WRITE_RESULT copies current out_transfer_size
    to given __u32 pointer and returns current out_status of the last
    (asnynchronous) USBTMC_IOCTL_WRITE call.
    
    Signed-off-by: Guido Kiener <guido.kiener@rohde-schwarz.com>
    Reviewed-by: Steve Bayless <steve_bayless@keysight.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/include/uapi/linux/usb/tmc.h b/include/uapi/linux/usb/tmc.h
index 44dc88f3479d..0166ba5452d5 100644
--- a/include/uapi/linux/usb/tmc.h
+++ b/include/uapi/linux/usb/tmc.h
@@ -86,6 +86,7 @@ struct usbtmc_message {
 #define USBTMC_IOCTL_EOM_ENABLE	        _IOW(USBTMC_IOC_NR, 11, __u8)
 #define USBTMC_IOCTL_CONFIG_TERMCHAR	_IOW(USBTMC_IOC_NR, 12, struct usbtmc_termchar)
 #define USBTMC_IOCTL_WRITE		_IOWR(USBTMC_IOC_NR, 13, struct usbtmc_message)
+#define USBTMC_IOCTL_WRITE_RESULT	_IOWR(USBTMC_IOC_NR, 15, __u32)
 
 #define USBTMC488_IOCTL_GET_CAPS	_IOR(USBTMC_IOC_NR, 17, unsigned char)
 #define USBTMC488_IOCTL_READ_STB	_IOR(USBTMC_IOC_NR, 18, unsigned char)

commit 4ddc645f40e90fa3bc7af3a3f3bd7d29e671a775
Author: Guido Kiener <guido@kiener-muenchen.de>
Date:   Wed Sep 12 10:50:52 2018 +0200

    usb: usbtmc: Add ioctl for vendor specific write
    
    The new ioctl USBTMC_IOCTL_WRITE sends a generic message to bulk OUT.
    This ioctl is used for vendor specific or asynchronous I/O as well.
    
    The message is split into chunks of 4k (page size).
    Message size is aligned to 32 bit boundaries.
    
    With flag USBTMC_FLAG_ASYNC the ioctl is non blocking.
    With flag USBTMC_FLAG_APPEND additional urbs are queued and
    out_status/out_transfer_size is not reset. EPOLLOUT | EPOLLWRNORM
    is signaled when all submitted urbs are completed.
    
    Flush flying urbs when file handle is closed or device is
    suspended or reset.
    
    This ioctl does not support compatibility for 32 bit
    applications running on 64 bit systems. However all other
    convenient ioctls of the USBTMC driver can still be used in 32
    bit applications as well. Note that 32 bit applications running
    on 32 bit target systems are not affected by this limitation.
    
    Signed-off-by: Guido Kiener <guido.kiener@rohde-schwarz.com>
    Reviewed-by: Steve Bayless <steve_bayless@keysight.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/include/uapi/linux/usb/tmc.h b/include/uapi/linux/usb/tmc.h
index 5e12928ed1e5..44dc88f3479d 100644
--- a/include/uapi/linux/usb/tmc.h
+++ b/include/uapi/linux/usb/tmc.h
@@ -59,6 +59,19 @@ struct usbtmc_termchar {
 	__u8 term_char_enabled;
 } __attribute__ ((packed));
 
+/*
+ * usbtmc_message->flags:
+ */
+#define USBTMC_FLAG_ASYNC		0x0001
+#define USBTMC_FLAG_APPEND		0x0002
+
+struct usbtmc_message {
+	__u32 transfer_size; /* size of bytes to transfer */
+	__u32 transferred; /* size of received/written bytes */
+	__u32 flags; /* bit 0: 0 = synchronous; 1 = asynchronous */
+	void __user *message; /* pointer to header and data in user space */
+} __attribute__ ((packed));
+
 /* Request values for USBTMC driver's ioctl entry point */
 #define USBTMC_IOC_NR			91
 #define USBTMC_IOCTL_INDICATOR_PULSE	_IO(USBTMC_IOC_NR, 1)
@@ -72,6 +85,7 @@ struct usbtmc_termchar {
 #define USBTMC_IOCTL_SET_TIMEOUT	_IOW(USBTMC_IOC_NR, 10, __u32)
 #define USBTMC_IOCTL_EOM_ENABLE	        _IOW(USBTMC_IOC_NR, 11, __u8)
 #define USBTMC_IOCTL_CONFIG_TERMCHAR	_IOW(USBTMC_IOC_NR, 12, struct usbtmc_termchar)
+#define USBTMC_IOCTL_WRITE		_IOWR(USBTMC_IOC_NR, 13, struct usbtmc_message)
 
 #define USBTMC488_IOCTL_GET_CAPS	_IOR(USBTMC_IOC_NR, 17, unsigned char)
 #define USBTMC488_IOCTL_READ_STB	_IOR(USBTMC_IOC_NR, 18, unsigned char)

commit 658f24f4523e41cda6a389c38b763f4c0cad6fbc
Author: Guido Kiener <guido@kiener-muenchen.de>
Date:   Wed Sep 12 10:50:51 2018 +0200

    usb: usbtmc: Add ioctl for generic requests on control
    
    Add USBTMC_IOCTL_CTRL_REQUEST to send arbitrary requests on the
    control pipe.  Used by specific applications of IVI Foundation,
    Inc. to implement VISA API functions: viUsbControlIn/Out.
    
    The maximum length of control request is set to 4k.
    
    This ioctl does not support compatibility for 32 bit
    applications running on 64 bit systems. However all other
    convenient ioctls of the USBTMC driver can still be used in 32
    bit applications as well. Note that 32 bit applications running
    on 32 bit target systems are not affected by this limitation.
    
    Signed-off-by: Guido Kiener <guido.kiener@rohde-schwarz.com>
    Reviewed-by: Steve Bayless <steve_bayless@keysight.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/include/uapi/linux/usb/tmc.h b/include/uapi/linux/usb/tmc.h
index 729af2f861a4..5e12928ed1e5 100644
--- a/include/uapi/linux/usb/tmc.h
+++ b/include/uapi/linux/usb/tmc.h
@@ -4,6 +4,7 @@
  * Copyright (C) 2008 Novell, Inc.
  * Copyright (C) 2008 Greg Kroah-Hartman <gregkh@suse.de>
  * Copyright (C) 2015 Dave Penkler <dpenkler@gmail.com>
+ * Copyright (C) 2018 IVI Foundation, Inc.
  *
  * This file holds USB constants defined by the USB Device Class
  * and USB488 Subclass Definitions for Test and Measurement devices
@@ -40,6 +41,19 @@
 #define USBTMC488_REQUEST_GOTO_LOCAL			161
 #define USBTMC488_REQUEST_LOCAL_LOCKOUT			162
 
+struct usbtmc_request {
+	__u8 bRequestType;
+	__u8 bRequest;
+	__u16 wValue;
+	__u16 wIndex;
+	__u16 wLength;
+} __attribute__ ((packed));
+
+struct usbtmc_ctrlrequest {
+	struct usbtmc_request req;
+	void __user *data; /* pointer to user space */
+} __attribute__ ((packed));
+
 struct usbtmc_termchar {
 	__u8 term_char;
 	__u8 term_char_enabled;
@@ -53,6 +67,7 @@ struct usbtmc_termchar {
 #define USBTMC_IOCTL_ABORT_BULK_IN	_IO(USBTMC_IOC_NR, 4)
 #define USBTMC_IOCTL_CLEAR_OUT_HALT	_IO(USBTMC_IOC_NR, 6)
 #define USBTMC_IOCTL_CLEAR_IN_HALT	_IO(USBTMC_IOC_NR, 7)
+#define USBTMC_IOCTL_CTRL_REQUEST	_IOWR(USBTMC_IOC_NR, 8, struct usbtmc_ctrlrequest)
 #define USBTMC_IOCTL_GET_TIMEOUT	_IOR(USBTMC_IOC_NR, 9, __u32)
 #define USBTMC_IOCTL_SET_TIMEOUT	_IOW(USBTMC_IOC_NR, 10, __u32)
 #define USBTMC_IOCTL_EOM_ENABLE	        _IOW(USBTMC_IOC_NR, 11, __u8)

commit 12dcaeb77e67c1162a2604f6b589266baec2d1ef
Author: Guido Kiener <guido@kiener-muenchen.de>
Date:   Wed Jul 18 10:45:39 2018 +0200

    usb: usbtmc: Add ioctl for termination character
    
    add USBTMC_IOCTL_CONFIG_TERMCHAR to control TermChar handling
    for next read(). Controls field 'TermChar' and Bit 1 of field
    'bmTransferAttributes' of REQUEST_DEV_DEP_MSG_IN BULK-OUT header.
    
    Allows enabling/disabling of terminating a read on reception of
    term_char individually for each read request.
    
    Reviewed-by: Steve Bayless <steve_bayless@keysight.com>
    Tested-by: Dave Penkler <dpenkler@gmail.com>
    Signed-off-by: Dave Penkler <dpenkler@gmail.com>
    Signed-off-by: Guido Kiener <guido.kiener@rohde-schwarz.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/include/uapi/linux/usb/tmc.h b/include/uapi/linux/usb/tmc.h
index e7317dfdd2ae..729af2f861a4 100644
--- a/include/uapi/linux/usb/tmc.h
+++ b/include/uapi/linux/usb/tmc.h
@@ -40,6 +40,11 @@
 #define USBTMC488_REQUEST_GOTO_LOCAL			161
 #define USBTMC488_REQUEST_LOCAL_LOCKOUT			162
 
+struct usbtmc_termchar {
+	__u8 term_char;
+	__u8 term_char_enabled;
+} __attribute__ ((packed));
+
 /* Request values for USBTMC driver's ioctl entry point */
 #define USBTMC_IOC_NR			91
 #define USBTMC_IOCTL_INDICATOR_PULSE	_IO(USBTMC_IOC_NR, 1)
@@ -51,6 +56,7 @@
 #define USBTMC_IOCTL_GET_TIMEOUT	_IOR(USBTMC_IOC_NR, 9, __u32)
 #define USBTMC_IOCTL_SET_TIMEOUT	_IOW(USBTMC_IOC_NR, 10, __u32)
 #define USBTMC_IOCTL_EOM_ENABLE	        _IOW(USBTMC_IOC_NR, 11, __u8)
+#define USBTMC_IOCTL_CONFIG_TERMCHAR	_IOW(USBTMC_IOC_NR, 12, struct usbtmc_termchar)
 
 #define USBTMC488_IOCTL_GET_CAPS	_IOR(USBTMC_IOC_NR, 17, unsigned char)
 #define USBTMC488_IOCTL_READ_STB	_IOR(USBTMC_IOC_NR, 18, unsigned char)

commit fbd83971f9429849dd3a105b663822d15b7b992b
Author: Guido Kiener <guido@kiener-muenchen.de>
Date:   Wed Jul 18 10:45:38 2018 +0200

    usb: usbtmc: Add ioctl for EOM bit
    
    add USBTMC_IOCTL_EOM_ENABLE to specify EOM bit for next write()
    call. Sets Bit 0 of field 'bmTransferAttributes' of DEV_DEP_MSG_OUT
    Bulk-OUT Header.
    Allows fine grained control over end of message handling on a
    per file descriptor basis.
    
    Reviewed-by: Steve Bayless <steve_bayless@keysight.com>
    Tested-by: Dave Penkler <dpenkler@gmail.com>
    Signed-off-by: Dave Penkler <dpenkler@gmail.com>
    Signed-off-by: Guido Kiener <guido.kiener@rohde-schwarz.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/include/uapi/linux/usb/tmc.h b/include/uapi/linux/usb/tmc.h
index c61bad7150dd..e7317dfdd2ae 100644
--- a/include/uapi/linux/usb/tmc.h
+++ b/include/uapi/linux/usb/tmc.h
@@ -50,6 +50,8 @@
 #define USBTMC_IOCTL_CLEAR_IN_HALT	_IO(USBTMC_IOC_NR, 7)
 #define USBTMC_IOCTL_GET_TIMEOUT	_IOR(USBTMC_IOC_NR, 9, __u32)
 #define USBTMC_IOCTL_SET_TIMEOUT	_IOW(USBTMC_IOC_NR, 10, __u32)
+#define USBTMC_IOCTL_EOM_ENABLE	        _IOW(USBTMC_IOC_NR, 11, __u8)
+
 #define USBTMC488_IOCTL_GET_CAPS	_IOR(USBTMC_IOC_NR, 17, unsigned char)
 #define USBTMC488_IOCTL_READ_STB	_IOR(USBTMC_IOC_NR, 18, unsigned char)
 #define USBTMC488_IOCTL_REN_CONTROL	_IOW(USBTMC_IOC_NR, 19, unsigned char)

commit fe78a7c637057070f20ac9460608a18d775e6349
Author: Guido Kiener <guido@kiener-muenchen.de>
Date:   Wed Jul 18 10:45:37 2018 +0200

    usb: usbtmc: Add ioctl for trigger
    
    add USBTMC488_IOCTL_TRIGGER to send TRIGGER Bulk-OUT header
    according to Subclass USB488 Specification
    
    The usbtmc trigger command is equivalent to the IEEE 488 GET (Group
    Execute Trigger) action. While the "*TRG" command can be sent as
    data to perform the same operation, in some situations an instrument
    will be busy and unable to process the data immediately in which
    case the USBTMC488_IOCTL_TRIGGER can be used to trigger the
    instrument with lower latency.
    
    Reviewed-by: Steve Bayless <steve_bayless@keysight.com>
    Tested-by: Dave Penkler <dpenkler@gmail.com>
    Signed-off-by: Dave Penkler <dpenkler@gmail.com>
    Signed-off-by: Guido Kiener <guido.kiener@rohde-schwarz.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/include/uapi/linux/usb/tmc.h b/include/uapi/linux/usb/tmc.h
index a89ffc33532e..c61bad7150dd 100644
--- a/include/uapi/linux/usb/tmc.h
+++ b/include/uapi/linux/usb/tmc.h
@@ -55,6 +55,7 @@
 #define USBTMC488_IOCTL_REN_CONTROL	_IOW(USBTMC_IOC_NR, 19, unsigned char)
 #define USBTMC488_IOCTL_GOTO_LOCAL	_IO(USBTMC_IOC_NR, 20)
 #define USBTMC488_IOCTL_LOCAL_LOCKOUT	_IO(USBTMC_IOC_NR, 21)
+#define USBTMC488_IOCTL_TRIGGER		_IO(USBTMC_IOC_NR, 22)
 
 /* Driver encoded usb488 capabilities */
 #define USBTMC488_CAPABILITY_TRIGGER         1

commit 048c6d88a0214757926f264823829e79154fcd4f
Author: Guido Kiener <guido@kiener-muenchen.de>
Date:   Wed Jul 18 10:45:36 2018 +0200

    usb: usbtmc: Add ioctls to set/get usb timeout
    
    Add ioctls USBTMC_IOCTL_GET_TIMEOUT / USBTMC_IOCTL_SET_TIMEOUT to
    get/set I/O timeout for specific file handle.
    
    Different operations on an instrument can take different lengths of
    time thus it is important to be able to set the timeout slightly
    longer than the expected duration of each operation to optimise the
    responsiveness of the application. As the instrument may be shared by
    multiple applications the timeout should be settable on a per file
    descriptor basis.
    
    Tested-by: Dave Penkler <dpenkler@gmail.com>
    Reviewed-by: Steve Bayless <steve_bayless@keysight.com>
    Signed-off-by: Dave Penkler <dpenkler@gmail.com>
    Signed-off-by: Guido Kiener <guido.kiener@rohde-schwarz.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/include/uapi/linux/usb/tmc.h b/include/uapi/linux/usb/tmc.h
index 03f6adc8f35b..a89ffc33532e 100644
--- a/include/uapi/linux/usb/tmc.h
+++ b/include/uapi/linux/usb/tmc.h
@@ -16,6 +16,8 @@
 #ifndef __LINUX_USB_TMC_H
 #define __LINUX_USB_TMC_H
 
+#include <linux/types.h>   /* __u8 etc */
+
 /* USB TMC status values */
 #define USBTMC_STATUS_SUCCESS				0x01
 #define USBTMC_STATUS_PENDING				0x02
@@ -46,6 +48,8 @@
 #define USBTMC_IOCTL_ABORT_BULK_IN	_IO(USBTMC_IOC_NR, 4)
 #define USBTMC_IOCTL_CLEAR_OUT_HALT	_IO(USBTMC_IOC_NR, 6)
 #define USBTMC_IOCTL_CLEAR_IN_HALT	_IO(USBTMC_IOC_NR, 7)
+#define USBTMC_IOCTL_GET_TIMEOUT	_IOR(USBTMC_IOC_NR, 9, __u32)
+#define USBTMC_IOCTL_SET_TIMEOUT	_IOW(USBTMC_IOC_NR, 10, __u32)
 #define USBTMC488_IOCTL_GET_CAPS	_IOR(USBTMC_IOC_NR, 17, unsigned char)
 #define USBTMC488_IOCTL_READ_STB	_IOR(USBTMC_IOC_NR, 18, unsigned char)
 #define USBTMC488_IOCTL_REN_CONTROL	_IOW(USBTMC_IOC_NR, 19, unsigned char)

commit 6f52b16c5b29b89d92c0e7236f4655dc8491ad70
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Wed Nov 1 15:08:43 2017 +0100

    License cleanup: add SPDX license identifier to uapi header files with no license
    
    Many user space API headers are missing licensing information, which
    makes it hard for compliance tools to determine the correct license.
    
    By default are files without license information under the default
    license of the kernel, which is GPLV2.  Marking them GPLV2 would exclude
    them from being included in non GPLV2 code, which is obviously not
    intended. The user space API headers fall under the syscall exception
    which is in the kernels COPYING file:
    
       NOTE! This copyright does *not* cover user programs that use kernel
       services by normal system calls - this is merely considered normal use
       of the kernel, and does *not* fall under the heading of "derived work".
    
    otherwise syscall usage would not be possible.
    
    Update the files which contain no license information with an SPDX
    license identifier.  The chosen identifier is 'GPL-2.0 WITH
    Linux-syscall-note' which is the officially assigned identifier for the
    Linux syscall exception.  SPDX license identifiers are a legally binding
    shorthand, which can be used instead of the full boiler plate text.
    
    This patch is based on work done by Thomas Gleixner and Kate Stewart and
    Philippe Ombredanne.  See the previous patch in this series for the
    methodology of how this patch was researched.
    
    Reviewed-by: Kate Stewart <kstewart@linuxfoundation.org>
    Reviewed-by: Philippe Ombredanne <pombredanne@nexb.com>
    Reviewed-by: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/include/uapi/linux/usb/tmc.h b/include/uapi/linux/usb/tmc.h
index 2e59d9c50b8d..03f6adc8f35b 100644
--- a/include/uapi/linux/usb/tmc.h
+++ b/include/uapi/linux/usb/tmc.h
@@ -1,3 +1,4 @@
+/* SPDX-License-Identifier: GPL-2.0 WITH Linux-syscall-note */
 /*
  * Copyright (C) 2007 Stefan Kopp, Gechingen, Germany
  * Copyright (C) 2008 Novell, Inc.

commit 379d3d33c83b667b0edad0110693567306463882
Author: Dave Penkler <dpenkler@gmail.com>
Date:   Wed Jan 27 19:25:24 2016 +0100

    Add ioctls to enable and disable local controls on an instrument
    
    These ioctls provide support for the USBTMC-USB488 control requests
    for REN_CONTROL, GO_TO_LOCAL and LOCAL_LOCKOUT
    
    Signed-off-by: Dave Penkler <dpenkler@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/include/uapi/linux/usb/tmc.h b/include/uapi/linux/usb/tmc.h
index b512fb2d403e..2e59d9c50b8d 100644
--- a/include/uapi/linux/usb/tmc.h
+++ b/include/uapi/linux/usb/tmc.h
@@ -33,6 +33,9 @@
 #define USBTMC_REQUEST_GET_CAPABILITIES			7
 #define USBTMC_REQUEST_INDICATOR_PULSE			64
 #define USBTMC488_REQUEST_READ_STATUS_BYTE		128
+#define USBTMC488_REQUEST_REN_CONTROL			160
+#define USBTMC488_REQUEST_GOTO_LOCAL			161
+#define USBTMC488_REQUEST_LOCAL_LOCKOUT			162
 
 /* Request values for USBTMC driver's ioctl entry point */
 #define USBTMC_IOC_NR			91
@@ -44,6 +47,9 @@
 #define USBTMC_IOCTL_CLEAR_IN_HALT	_IO(USBTMC_IOC_NR, 7)
 #define USBTMC488_IOCTL_GET_CAPS	_IOR(USBTMC_IOC_NR, 17, unsigned char)
 #define USBTMC488_IOCTL_READ_STB	_IOR(USBTMC_IOC_NR, 18, unsigned char)
+#define USBTMC488_IOCTL_REN_CONTROL	_IOW(USBTMC_IOC_NR, 19, unsigned char)
+#define USBTMC488_IOCTL_GOTO_LOCAL	_IO(USBTMC_IOC_NR, 20)
+#define USBTMC488_IOCTL_LOCAL_LOCKOUT	_IO(USBTMC_IOC_NR, 21)
 
 /* Driver encoded usb488 capabilities */
 #define USBTMC488_CAPABILITY_TRIGGER         1

commit 29779d89fd049bfc6c07f19aaf9b8d19fe2ecc8c
Author: Dave Penkler <dpenkler@gmail.com>
Date:   Wed Jan 27 19:22:28 2016 +0100

    Add ioctl to retrieve USBTMC-USB488 capabilities
    
    This is a convenience function to obtain an instrument's
    capabilities from its file descriptor without having to access sysfs
    from the user program.
    
    Signed-off-by: Dave Penkler <dpenkler@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/include/uapi/linux/usb/tmc.h b/include/uapi/linux/usb/tmc.h
index 7e5ced80548f..b512fb2d403e 100644
--- a/include/uapi/linux/usb/tmc.h
+++ b/include/uapi/linux/usb/tmc.h
@@ -2,12 +2,14 @@
  * Copyright (C) 2007 Stefan Kopp, Gechingen, Germany
  * Copyright (C) 2008 Novell, Inc.
  * Copyright (C) 2008 Greg Kroah-Hartman <gregkh@suse.de>
+ * Copyright (C) 2015 Dave Penkler <dpenkler@gmail.com>
  *
  * This file holds USB constants defined by the USB Device Class
- * Definition for Test and Measurement devices published by the USB-IF.
+ * and USB488 Subclass Definitions for Test and Measurement devices
+ * published by the USB-IF.
  *
- * It also has the ioctl definitions for the usbtmc kernel driver that
- * userspace needs to know about.
+ * It also has the ioctl and capability definitions for the
+ * usbtmc kernel driver that userspace needs to know about.
  */
 
 #ifndef __LINUX_USB_TMC_H
@@ -40,6 +42,19 @@
 #define USBTMC_IOCTL_ABORT_BULK_IN	_IO(USBTMC_IOC_NR, 4)
 #define USBTMC_IOCTL_CLEAR_OUT_HALT	_IO(USBTMC_IOC_NR, 6)
 #define USBTMC_IOCTL_CLEAR_IN_HALT	_IO(USBTMC_IOC_NR, 7)
+#define USBTMC488_IOCTL_GET_CAPS	_IOR(USBTMC_IOC_NR, 17, unsigned char)
 #define USBTMC488_IOCTL_READ_STB	_IOR(USBTMC_IOC_NR, 18, unsigned char)
 
+/* Driver encoded usb488 capabilities */
+#define USBTMC488_CAPABILITY_TRIGGER         1
+#define USBTMC488_CAPABILITY_SIMPLE          2
+#define USBTMC488_CAPABILITY_REN_CONTROL     2
+#define USBTMC488_CAPABILITY_GOTO_LOCAL      2
+#define USBTMC488_CAPABILITY_LOCAL_LOCKOUT   2
+#define USBTMC488_CAPABILITY_488_DOT_2       4
+#define USBTMC488_CAPABILITY_DT1             16
+#define USBTMC488_CAPABILITY_RL1             32
+#define USBTMC488_CAPABILITY_SR1             64
+#define USBTMC488_CAPABILITY_FULL_SCPI       128
+
 #endif

commit dbf3e7f654c0f06a932b8fcafac78de9d0b81d68
Author: Dave Penkler <dpenkler@gmail.com>
Date:   Wed Jan 27 19:09:24 2016 +0100

    Implement an ioctl to support the USMTMC-USB488 READ_STATUS_BYTE operation.
    
    Background:
    When performing a read on an instrument that is executing a function
    that runs longer than the USB timeout the instrument may hang and
    require a device reset to recover. The READ_STATUS_BYTE operation
    always returns even when the instrument is busy permitting to poll
    for the appropriate condition. This capability is referred to in
    instrument application notes on synchronizing acquisitions for other
    platforms.
    
    Signed-off-by: Dave Penkler <dpenkler@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/include/uapi/linux/usb/tmc.h b/include/uapi/linux/usb/tmc.h
index c045ae12556c..7e5ced80548f 100644
--- a/include/uapi/linux/usb/tmc.h
+++ b/include/uapi/linux/usb/tmc.h
@@ -30,6 +30,7 @@
 #define USBTMC_REQUEST_CHECK_CLEAR_STATUS		6
 #define USBTMC_REQUEST_GET_CAPABILITIES			7
 #define USBTMC_REQUEST_INDICATOR_PULSE			64
+#define USBTMC488_REQUEST_READ_STATUS_BYTE		128
 
 /* Request values for USBTMC driver's ioctl entry point */
 #define USBTMC_IOC_NR			91
@@ -39,5 +40,6 @@
 #define USBTMC_IOCTL_ABORT_BULK_IN	_IO(USBTMC_IOC_NR, 4)
 #define USBTMC_IOCTL_CLEAR_OUT_HALT	_IO(USBTMC_IOC_NR, 6)
 #define USBTMC_IOCTL_CLEAR_IN_HALT	_IO(USBTMC_IOC_NR, 7)
+#define USBTMC488_IOCTL_READ_STB	_IOR(USBTMC_IOC_NR, 18, unsigned char)
 
 #endif

commit 5e1ddb481776a487b15b40579a000b279ce527c9
Author: David Howells <dhowells@redhat.com>
Date:   Tue Oct 9 09:49:07 2012 +0100

    UAPI: (Scripted) Disintegrate include/linux/usb
    
    Signed-off-by: David Howells <dhowells@redhat.com>
    Acked-by: Arnd Bergmann <arnd@arndb.de>
    Acked-by: Thomas Gleixner <tglx@linutronix.de>
    Acked-by: Michael Kerrisk <mtk.manpages@gmail.com>
    Acked-by: Paul E. McKenney <paulmck@linux.vnet.ibm.com>
    Acked-by: Dave Jones <davej@redhat.com>

diff --git a/include/uapi/linux/usb/tmc.h b/include/uapi/linux/usb/tmc.h
new file mode 100644
index 000000000000..c045ae12556c
--- /dev/null
+++ b/include/uapi/linux/usb/tmc.h
@@ -0,0 +1,43 @@
+/*
+ * Copyright (C) 2007 Stefan Kopp, Gechingen, Germany
+ * Copyright (C) 2008 Novell, Inc.
+ * Copyright (C) 2008 Greg Kroah-Hartman <gregkh@suse.de>
+ *
+ * This file holds USB constants defined by the USB Device Class
+ * Definition for Test and Measurement devices published by the USB-IF.
+ *
+ * It also has the ioctl definitions for the usbtmc kernel driver that
+ * userspace needs to know about.
+ */
+
+#ifndef __LINUX_USB_TMC_H
+#define __LINUX_USB_TMC_H
+
+/* USB TMC status values */
+#define USBTMC_STATUS_SUCCESS				0x01
+#define USBTMC_STATUS_PENDING				0x02
+#define USBTMC_STATUS_FAILED				0x80
+#define USBTMC_STATUS_TRANSFER_NOT_IN_PROGRESS		0x81
+#define USBTMC_STATUS_SPLIT_NOT_IN_PROGRESS		0x82
+#define USBTMC_STATUS_SPLIT_IN_PROGRESS			0x83
+
+/* USB TMC requests values */
+#define USBTMC_REQUEST_INITIATE_ABORT_BULK_OUT		1
+#define USBTMC_REQUEST_CHECK_ABORT_BULK_OUT_STATUS	2
+#define USBTMC_REQUEST_INITIATE_ABORT_BULK_IN		3
+#define USBTMC_REQUEST_CHECK_ABORT_BULK_IN_STATUS	4
+#define USBTMC_REQUEST_INITIATE_CLEAR			5
+#define USBTMC_REQUEST_CHECK_CLEAR_STATUS		6
+#define USBTMC_REQUEST_GET_CAPABILITIES			7
+#define USBTMC_REQUEST_INDICATOR_PULSE			64
+
+/* Request values for USBTMC driver's ioctl entry point */
+#define USBTMC_IOC_NR			91
+#define USBTMC_IOCTL_INDICATOR_PULSE	_IO(USBTMC_IOC_NR, 1)
+#define USBTMC_IOCTL_CLEAR		_IO(USBTMC_IOC_NR, 2)
+#define USBTMC_IOCTL_ABORT_BULK_OUT	_IO(USBTMC_IOC_NR, 3)
+#define USBTMC_IOCTL_ABORT_BULK_IN	_IO(USBTMC_IOC_NR, 4)
+#define USBTMC_IOCTL_CLEAR_OUT_HALT	_IO(USBTMC_IOC_NR, 6)
+#define USBTMC_IOCTL_CLEAR_IN_HALT	_IO(USBTMC_IOC_NR, 7)
+
+#endif
