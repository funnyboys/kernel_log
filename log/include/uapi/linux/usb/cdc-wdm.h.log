commit e2be04c7f9958dde770eeb8b30e829ca969b37bb
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Wed Nov 1 15:09:13 2017 +0100

    License cleanup: add SPDX license identifier to uapi header files with a license
    
    Many user space API headers have licensing information, which is either
    incomplete, badly formatted or just a shorthand for referring to the
    license under which the file is supposed to be.  This makes it hard for
    compliance tools to determine the correct license.
    
    Update these files with an SPDX license identifier.  The identifier was
    chosen based on the license information in the file.
    
    GPL/LGPL licensed headers get the matching GPL/LGPL SPDX license
    identifier with the added 'WITH Linux-syscall-note' exception, which is
    the officially assigned exception identifier for the kernel syscall
    exception:
    
       NOTE! This copyright does *not* cover user programs that use kernel
       services by normal system calls - this is merely considered normal use
       of the kernel, and does *not* fall under the heading of "derived work".
    
    This exception makes it possible to include GPL headers into non GPL
    code, without confusing license compliance tools.
    
    Headers which have either explicit dual licensing or are just licensed
    under a non GPL license are updated with the corresponding SPDX
    identifier and the GPLv2 with syscall exception identifier.  The format
    is:
            ((GPL-2.0 WITH Linux-syscall-note) OR SPDX-ID-OF-OTHER-LICENSE)
    
    SPDX license identifiers are a legally binding shorthand, which can be
    used instead of the full boiler plate text.  The update does not remove
    existing license information as this has to be done on a case by case
    basis and the copyright holders might have to be consulted. This will
    happen in a separate step.
    
    This patch is based on work done by Thomas Gleixner and Kate Stewart and
    Philippe Ombredanne.  See the previous patch in this series for the
    methodology of how this patch was researched.
    
    Reviewed-by: Kate Stewart <kstewart@linuxfoundation.org>
    Reviewed-by: Philippe Ombredanne <pombredanne@nexb.com>
    Reviewed-by: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/include/uapi/linux/usb/cdc-wdm.h b/include/uapi/linux/usb/cdc-wdm.h
index 0dc132e75030..a927c7f6f68a 100644
--- a/include/uapi/linux/usb/cdc-wdm.h
+++ b/include/uapi/linux/usb/cdc-wdm.h
@@ -1,3 +1,4 @@
+/* SPDX-License-Identifier: GPL-2.0 WITH Linux-syscall-note */
 /*
  * USB CDC Device Management userspace API definitions
  *

commit 7ac3764fcafc06e72e1a79a9d998b9fdd900b2a6
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Tue May 27 16:32:10 2014 -0700

    USB: cdc-wdm: properly include types.h
    
    The file include/uapi/linux/usb/cdc-wdm.h uses a __u16 so it needs to
    include types.h as well to make the build system happy.
    
    Fixes: 3edce1cf813a ("USB: cdc-wdm: implement IOCTL_WDM_MAX_COMMAND")
    Cc: stable <stable@vger.kernel.org> # 3.10+
    Cc: Bjørn Mork <bjorn@mork.no>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/include/uapi/linux/usb/cdc-wdm.h b/include/uapi/linux/usb/cdc-wdm.h
index f03134feebd6..0dc132e75030 100644
--- a/include/uapi/linux/usb/cdc-wdm.h
+++ b/include/uapi/linux/usb/cdc-wdm.h
@@ -9,6 +9,8 @@
 #ifndef _UAPI__LINUX_USB_CDC_WDM_H
 #define _UAPI__LINUX_USB_CDC_WDM_H
 
+#include <linux/types.h>
+
 /*
  * This IOCTL is used to retrieve the wMaxCommand for the device,
  * defining the message limit for both reading and writing.

commit 3edce1cf813aa6a087df7730cec0e67d57288300
Author: Bjørn Mork <bjorn@mork.no>
Date:   Sun Mar 17 21:00:06 2013 +0100

    USB: cdc-wdm: implement IOCTL_WDM_MAX_COMMAND
    
    Userspace applications need to know the maximum supported message
    size.
    
    The cdc-wdm driver translates between a character device stream
    and a message based protocol.  Each message is transported as a
    usb control message with no further encapsulation or syncronization.
    Each read or write on the character device should translate to
    exactly one usb control message to ensure that message boundaries
    are kept intact.  That means that the userspace application must
    know the maximum message size supported by the device and driver,
    making this size a vital part of the cdc-wdm character device API.
    
    CDC WDM and CDC MBIM functions export the maximum supported
    message size through CDC functional descriptors.  The cdc-wdm and
    cdc_mbim drivers will parse these descriptors and use the value
    chosen by the device.  The only current way for a userspace
    application to retrive the value is by duplicating the descriptor
    parsing. This is an unnecessary complex task, and application
    writers are likely to postpone it, using a fixed value and adding
    a "todo" item.
    
    QMI functions have no way to tell the host what message size they
    support.  The qmi_wwan driver use a fixed value based on protocol
    recommendations and observed device behaviour.  Userspace
    applications must know and hard code the same value.  This scheme
    will break if we ever encounter a QMI device needing a device
    specific message size quirk.  We are currently unable to support
    such a device because using a non default size would break the
    implicit userspace API.
    
    The message size is currently a hidden attribute of the cdc-wdm
    userspace API.  Retrieving it is unnecessarily complex, increasing
    the possibility of drivers and applications using different limits.
    The resulting errors are hard to debug, and can only be replicated
    on identical hardware.
    
    Exporting the maximum message size from the driver simplifies the
    task for the userspace application, and creates a unified
    information source independent of device and function class. It also
    serves to document that the message size is part of the cdc-wdm
    userspace API.
    
    This proposed API extension has been presented for the authors of
    userspace applications and libraries using the current API: libmbim,
    libqmi, uqmi, oFono and ModemManager.  The replies were:
    
    Aleksander Morgado:
     "We do really need max message size for MBIM; and as you say, it may be
      good to have the max message size info also for QMI, so the new ioctl
      seems a good addition. So +1 from my side, for what it's worth."
    
    Dan Williams:
     "Yeah, +1 here.  I'd prefer the sysfs file, but the fact that that
      doesn't work for fd passing pretty much kills it."
    
    No negative replies are so far received.
    
    Cc: Aleksander Morgado <aleksander@lanedo.com>
    Cc: Dan Williams <dcbw@redhat.com>
    Signed-off-by: Bjørn Mork <bjorn@mork.no>
    Acked-by: Oliver Neukum <oliver@neukum.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/include/uapi/linux/usb/cdc-wdm.h b/include/uapi/linux/usb/cdc-wdm.h
new file mode 100644
index 000000000000..f03134feebd6
--- /dev/null
+++ b/include/uapi/linux/usb/cdc-wdm.h
@@ -0,0 +1,21 @@
+/*
+ * USB CDC Device Management userspace API definitions
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License
+ * version 2 as published by the Free Software Foundation.
+ */
+
+#ifndef _UAPI__LINUX_USB_CDC_WDM_H
+#define _UAPI__LINUX_USB_CDC_WDM_H
+
+/*
+ * This IOCTL is used to retrieve the wMaxCommand for the device,
+ * defining the message limit for both reading and writing.
+ *
+ * For CDC WDM functions this will be the wMaxCommand field of the
+ * Device Management Functional Descriptor.
+ */
+#define IOCTL_WDM_MAX_COMMAND _IOR('H', 0xA0, __u16)
+
+#endif /* _UAPI__LINUX_USB_CDC_WDM_H */
