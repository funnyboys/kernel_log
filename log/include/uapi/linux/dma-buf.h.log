commit a5bff92eaac45bdf6221badf9505c26792fdf99e
Author: Daniel Vetter <daniel.vetter@intel.com>
Date:   Tue Apr 7 15:30:02 2020 +0200

    dma-buf: Fix SET_NAME ioctl uapi
    
    The uapi is the same on 32 and 64 bit, but the number isn't. Everyone
    who botched this please re-read:
    
    https://www.kernel.org/doc/html/v5.4-preprc-cpu/ioctl/botching-up-ioctls.html
    
    Also, the type argument for the ioctl macros is for the type the void
    __user *arg pointer points at, which in this case would be the
    variable-sized char[] of a 0 terminated string. So this was botched in
    more than just the usual ways.
    
    Cc: Sumit Semwal <sumit.semwal@linaro.org>
    Cc: Chenbo Feng <fengc@google.com>
    Cc: Greg Hackmann <ghackmann@google.com>
    Cc: Daniel Vetter <daniel.vetter@ffwll.ch>
    Cc: linux-media@vger.kernel.org
    Cc: linaro-mm-sig@lists.linaro.org
    Cc: minchan@kernel.org
    Cc: surenb@google.com
    Cc: jenhaochen@google.com
    Cc: Martin Liu <liumartin@google.com>
    Signed-off-by: Daniel Vetter <daniel.vetter@intel.com>
    Tested-by: Martin Liu <liumartin@google.com>
    Reviewed-by: Martin Liu <liumartin@google.com>
    Signed-off-by: Sumit Semwal <sumit.semwal@linaro.org>
      [sumits: updated some checkpatch fixes, corrected author email]
    Link: https://patchwork.freedesktop.org/patch/msgid/20200407133002.3486387-1-daniel.vetter@ffwll.ch

diff --git a/include/uapi/linux/dma-buf.h b/include/uapi/linux/dma-buf.h
index dbc7092e04b5..7f30393b92c3 100644
--- a/include/uapi/linux/dma-buf.h
+++ b/include/uapi/linux/dma-buf.h
@@ -39,6 +39,12 @@ struct dma_buf_sync {
 
 #define DMA_BUF_BASE		'b'
 #define DMA_BUF_IOCTL_SYNC	_IOW(DMA_BUF_BASE, 0, struct dma_buf_sync)
+
+/* 32/64bitness of this uapi was botched in android, there's no difference
+ * between them in actual uapi, they're just different numbers.
+ */
 #define DMA_BUF_SET_NAME	_IOW(DMA_BUF_BASE, 1, const char *)
+#define DMA_BUF_SET_NAME_A	_IOW(DMA_BUF_BASE, 1, u32)
+#define DMA_BUF_SET_NAME_B	_IOW(DMA_BUF_BASE, 1, u64)
 
 #endif

commit bb2bb903042517b8fb17b2bc21e00512f2dcac01
Author: Greg Hackmann <ghackmann@google.com>
Date:   Thu Jun 13 15:34:07 2019 -0700

    dma-buf: add DMA_BUF_SET_NAME ioctls
    
    This patch adds complimentary DMA_BUF_SET_NAME  ioctls, which lets
    userspace processes attach a free-form name to each buffer.
    
    This information can be extremely helpful for tracking and accounting
    shared buffers.  For example, on Android, we know what each buffer will
    be used for at allocation time: GL, multimedia, camera, etc.  The
    userspace allocator can use DMA_BUF_SET_NAME to associate that
    information with the buffer, so we can later give developers a
    breakdown of how much memory they're allocating for graphics, camera,
    etc.
    
    Signed-off-by: Greg Hackmann <ghackmann@google.com>
    Signed-off-by: Chenbo Feng <fengc@google.com>
    Signed-off-by: Sumit Semwal <sumit.semwal@linaro.org>
    Link: https://patchwork.freedesktop.org/patch/msgid/20190613223408.139221-3-fengc@google.com

diff --git a/include/uapi/linux/dma-buf.h b/include/uapi/linux/dma-buf.h
index d75df5210a4a..dbc7092e04b5 100644
--- a/include/uapi/linux/dma-buf.h
+++ b/include/uapi/linux/dma-buf.h
@@ -35,7 +35,10 @@ struct dma_buf_sync {
 #define DMA_BUF_SYNC_VALID_FLAGS_MASK \
 	(DMA_BUF_SYNC_RW | DMA_BUF_SYNC_END)
 
+#define DMA_BUF_NAME_LEN	32
+
 #define DMA_BUF_BASE		'b'
 #define DMA_BUF_IOCTL_SYNC	_IOW(DMA_BUF_BASE, 0, struct dma_buf_sync)
+#define DMA_BUF_SET_NAME	_IOW(DMA_BUF_BASE, 1, const char *)
 
 #endif

commit e2be04c7f9958dde770eeb8b30e829ca969b37bb
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Wed Nov 1 15:09:13 2017 +0100

    License cleanup: add SPDX license identifier to uapi header files with a license
    
    Many user space API headers have licensing information, which is either
    incomplete, badly formatted or just a shorthand for referring to the
    license under which the file is supposed to be.  This makes it hard for
    compliance tools to determine the correct license.
    
    Update these files with an SPDX license identifier.  The identifier was
    chosen based on the license information in the file.
    
    GPL/LGPL licensed headers get the matching GPL/LGPL SPDX license
    identifier with the added 'WITH Linux-syscall-note' exception, which is
    the officially assigned exception identifier for the kernel syscall
    exception:
    
       NOTE! This copyright does *not* cover user programs that use kernel
       services by normal system calls - this is merely considered normal use
       of the kernel, and does *not* fall under the heading of "derived work".
    
    This exception makes it possible to include GPL headers into non GPL
    code, without confusing license compliance tools.
    
    Headers which have either explicit dual licensing or are just licensed
    under a non GPL license are updated with the corresponding SPDX
    identifier and the GPLv2 with syscall exception identifier.  The format
    is:
            ((GPL-2.0 WITH Linux-syscall-note) OR SPDX-ID-OF-OTHER-LICENSE)
    
    SPDX license identifiers are a legally binding shorthand, which can be
    used instead of the full boiler plate text.  The update does not remove
    existing license information as this has to be done on a case by case
    basis and the copyright holders might have to be consulted. This will
    happen in a separate step.
    
    This patch is based on work done by Thomas Gleixner and Kate Stewart and
    Philippe Ombredanne.  See the previous patch in this series for the
    methodology of how this patch was researched.
    
    Reviewed-by: Kate Stewart <kstewart@linuxfoundation.org>
    Reviewed-by: Philippe Ombredanne <pombredanne@nexb.com>
    Reviewed-by: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/include/uapi/linux/dma-buf.h b/include/uapi/linux/dma-buf.h
index fb0dedb7c121..d75df5210a4a 100644
--- a/include/uapi/linux/dma-buf.h
+++ b/include/uapi/linux/dma-buf.h
@@ -1,3 +1,4 @@
+/* SPDX-License-Identifier: GPL-2.0 WITH Linux-syscall-note */
 /*
  * Framework for buffer objects that can be shared across devices/subsystems.
  *

commit c11e391da2a8fe973c3c2398452000bed505851e
Author: Daniel Vetter <daniel.vetter@ffwll.ch>
Date:   Thu Feb 11 20:04:51 2016 -0200

    dma-buf: Add ioctls to allow userspace to flush
    
    The userspace might need some sort of cache coherency management e.g. when CPU
    and GPU domains are being accessed through dma-buf at the same time. To
    circumvent this problem there are begin/end coherency markers, that forward
    directly to existing dma-buf device drivers vfunc hooks. Userspace can make use
    of those markers through the DMA_BUF_IOCTL_SYNC ioctl. The sequence would be
    used like following:
         - mmap dma-buf fd
         - for each drawing/upload cycle in CPU 1. SYNC_START ioctl, 2. read/write
           to mmap area 3. SYNC_END ioctl. This can be repeated as often as you
           want (with the new data being consumed by the GPU or say scanout device)
         - munmap once you don't need the buffer any more
    
    v2 (Tiago): Fix header file type names (u64 -> __u64)
    v3 (Tiago): Add documentation. Use enum dma_buf_sync_flags to the begin/end
    dma-buf functions. Check for overflows in start/length.
    v4 (Tiago): use 2d regions for sync.
    v5 (Tiago): forget about 2d regions (v4); use _IOW in DMA_BUF_IOCTL_SYNC and
    remove range information from struct dma_buf_sync.
    v6 (Tiago): use __u64 structured padded flags instead enum. Adjust
    documentation about the recommendation on using sync ioctls.
    v7 (Tiago): Alex' nit on flags definition and being even more wording in the
    doc about sync usage.
    v9 (Tiago): remove useless is_dma_buf_file check. Fix sync.flags conditionals
    and its mask order check. Add <linux/types.h> include in dma-buf.h.
    
    Cc: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Cc: David Herrmann <dh.herrmann@gmail.com>
    Cc: Sumit Semwal <sumit.semwal@linaro.org>
    Reviewed-by: Stéphane Marchesin <marcheu@chromium.org>
    Signed-off-by: Daniel Vetter <daniel.vetter@intel.com>
    Signed-off-by: Tiago Vignatti <tiago.vignatti@intel.com>
    Reviewed-by: David Herrmann <dh.herrmann@gmail.com>
    Signed-off-by: Daniel Vetter <daniel.vetter@ffwll.ch>
    Link: http://patchwork.freedesktop.org/patch/msgid/1455228291-29640-1-git-send-email-tiago.vignatti@intel.com

diff --git a/include/uapi/linux/dma-buf.h b/include/uapi/linux/dma-buf.h
new file mode 100644
index 000000000000..fb0dedb7c121
--- /dev/null
+++ b/include/uapi/linux/dma-buf.h
@@ -0,0 +1,40 @@
+/*
+ * Framework for buffer objects that can be shared across devices/subsystems.
+ *
+ * Copyright(C) 2015 Intel Ltd
+ *
+ * This program is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 2 as published by
+ * the Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
+ * more details.
+ *
+ * You should have received a copy of the GNU General Public License along with
+ * this program.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+#ifndef _DMA_BUF_UAPI_H_
+#define _DMA_BUF_UAPI_H_
+
+#include <linux/types.h>
+
+/* begin/end dma-buf functions used for userspace mmap. */
+struct dma_buf_sync {
+	__u64 flags;
+};
+
+#define DMA_BUF_SYNC_READ      (1 << 0)
+#define DMA_BUF_SYNC_WRITE     (2 << 0)
+#define DMA_BUF_SYNC_RW        (DMA_BUF_SYNC_READ | DMA_BUF_SYNC_WRITE)
+#define DMA_BUF_SYNC_START     (0 << 2)
+#define DMA_BUF_SYNC_END       (1 << 2)
+#define DMA_BUF_SYNC_VALID_FLAGS_MASK \
+	(DMA_BUF_SYNC_RW | DMA_BUF_SYNC_END)
+
+#define DMA_BUF_BASE		'b'
+#define DMA_BUF_IOCTL_SYNC	_IOW(DMA_BUF_BASE, 0, struct dma_buf_sync)
+
+#endif
