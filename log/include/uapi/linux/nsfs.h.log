commit 6f52b16c5b29b89d92c0e7236f4655dc8491ad70
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Wed Nov 1 15:08:43 2017 +0100

    License cleanup: add SPDX license identifier to uapi header files with no license
    
    Many user space API headers are missing licensing information, which
    makes it hard for compliance tools to determine the correct license.
    
    By default are files without license information under the default
    license of the kernel, which is GPLV2.  Marking them GPLV2 would exclude
    them from being included in non GPLV2 code, which is obviously not
    intended. The user space API headers fall under the syscall exception
    which is in the kernels COPYING file:
    
       NOTE! This copyright does *not* cover user programs that use kernel
       services by normal system calls - this is merely considered normal use
       of the kernel, and does *not* fall under the heading of "derived work".
    
    otherwise syscall usage would not be possible.
    
    Update the files which contain no license information with an SPDX
    license identifier.  The chosen identifier is 'GPL-2.0 WITH
    Linux-syscall-note' which is the officially assigned identifier for the
    Linux syscall exception.  SPDX license identifiers are a legally binding
    shorthand, which can be used instead of the full boiler plate text.
    
    This patch is based on work done by Thomas Gleixner and Kate Stewart and
    Philippe Ombredanne.  See the previous patch in this series for the
    methodology of how this patch was researched.
    
    Reviewed-by: Kate Stewart <kstewart@linuxfoundation.org>
    Reviewed-by: Philippe Ombredanne <pombredanne@nexb.com>
    Reviewed-by: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/include/uapi/linux/nsfs.h b/include/uapi/linux/nsfs.h
index 1a3ca79f466b..a0c8552b64ee 100644
--- a/include/uapi/linux/nsfs.h
+++ b/include/uapi/linux/nsfs.h
@@ -1,3 +1,4 @@
+/* SPDX-License-Identifier: GPL-2.0 WITH Linux-syscall-note */
 #ifndef __LINUX_NSFS_H
 #define __LINUX_NSFS_H
 

commit d95fa3c76a66b6d76b1e109ea505c55e66360f3c
Author: Michael Kerrisk (man-pages) <mtk.manpages@gmail.com>
Date:   Wed Jan 25 14:04:15 2017 +1300

    nsfs: Add an ioctl() to return owner UID of a userns
    
    I'd like to write code that discovers the user namespace hierarchy on a
    running system, and also shows who owns the various user namespaces.
    Currently, there is no way of getting the owner UID of a user namespace.
    Therefore, this patch adds a new NS_GET_CREATOR_UID ioctl() that fetches
    the UID (as seen in the user namespace of the caller) of the creator of
    the user namespace referred to by the specified file descriptor.
    
    If the supplied file descriptor does not refer to a user namespace,
    the operation fails with the error EINVAL. If the owner UID does
    not have a mapping in the caller's user namespace return the
    overflow UID as that appears easier to deal with in practice
    in user-space applications.
    
    -- EWB Changed the handling of unmapped UIDs from -EOVERFLOW
       back to the overflow uid.  Per conversation with
       Michael Kerrisk after examining his test code.
    
    Acked-by: Andrey Vagin <avagin@openvz.org>
    Signed-off-by: Michael Kerrisk <mtk-manpages@gmail.com>
    Signed-off-by: Eric W. Biederman <ebiederm@xmission.com>

diff --git a/include/uapi/linux/nsfs.h b/include/uapi/linux/nsfs.h
index 2b48df11056a..1a3ca79f466b 100644
--- a/include/uapi/linux/nsfs.h
+++ b/include/uapi/linux/nsfs.h
@@ -6,11 +6,13 @@
 #define NSIO	0xb7
 
 /* Returns a file descriptor that refers to an owning user namespace */
-#define NS_GET_USERNS	_IO(NSIO, 0x1)
+#define NS_GET_USERNS		_IO(NSIO, 0x1)
 /* Returns a file descriptor that refers to a parent namespace */
-#define NS_GET_PARENT	_IO(NSIO, 0x2)
+#define NS_GET_PARENT		_IO(NSIO, 0x2)
 /* Returns the type of namespace (CLONE_NEW* value) referred to by
    file descriptor */
-#define NS_GET_NSTYPE	_IO(NSIO, 0x3)
+#define NS_GET_NSTYPE		_IO(NSIO, 0x3)
+/* Get owner UID (in the caller's user namespace) for a user namespace */
+#define NS_GET_OWNER_UID	_IO(NSIO, 0x4)
 
 #endif /* __LINUX_NSFS_H */

commit e5ff5ce6e20ee22511398bb31fb912466cf82a36
Author: Michael Kerrisk (man-pages) <mtk.manpages@gmail.com>
Date:   Wed Jan 25 14:03:36 2017 +1300

    nsfs: Add an ioctl() to return the namespace type
    
    Linux 4.9 added two ioctl() operations that can be used to discover:
    
    * the parental relationships for hierarchical namespaces (user and PID)
      [NS_GET_PARENT]
    * the user namespaces that owns a specified non-user-namespace
      [NS_GET_USERNS]
    
    For no good reason that I can glean, NS_GET_USERNS was made synonymous
    with NS_GET_PARENT for user namespaces. It might have been better if
    NS_GET_USERNS had returned an error if the supplied file descriptor
    referred to a user namespace, since it suggests that the caller may be
    confused. More particularly, if it had generated an error, then I wouldn't
    need the new ioctl() operation proposed here. (On the other hand, what
    I propose here may be more generally useful.)
    
    I would like to write code that discovers namespace relationships for
    the purpose of understanding the namespace setup on a running system.
    In particular, given a file descriptor (or pathname) for a namespace,
    N, I'd like to obtain the corresponding user namespace.  Namespace N
    might be a user namespace (in which case my code would just use N) or
    a non-user namespace (in which case my code will use NS_GET_USERNS to
    get the user namespace associated with N). The problem is that there
    is no way to tell the difference by looking at the file descriptor
    (and if I try to use NS_GET_USERNS on an N that is a user namespace, I
    get the parent user namespace of N, which is not what I want).
    
    This patch therefore adds a new ioctl(), NS_GET_NSTYPE, which, given
    a file descriptor that refers to a user namespace, returns the
    namespace type (one of the CLONE_NEW* constants).
    
    Signed-off-by: Michael Kerrisk <mtk-manpages@gmail.com>
    Signed-off-by: Eric W. Biederman <ebiederm@xmission.com>

diff --git a/include/uapi/linux/nsfs.h b/include/uapi/linux/nsfs.h
index 3af617230d1b..2b48df11056a 100644
--- a/include/uapi/linux/nsfs.h
+++ b/include/uapi/linux/nsfs.h
@@ -9,5 +9,8 @@
 #define NS_GET_USERNS	_IO(NSIO, 0x1)
 /* Returns a file descriptor that refers to a parent namespace */
 #define NS_GET_PARENT	_IO(NSIO, 0x2)
+/* Returns the type of namespace (CLONE_NEW* value) referred to by
+   file descriptor */
+#define NS_GET_NSTYPE	_IO(NSIO, 0x3)
 
 #endif /* __LINUX_NSFS_H */

commit a7306ed8d94af729ecef8b6e37506a1c6fc14788
Author: Andrey Vagin <avagin@openvz.org>
Date:   Tue Sep 6 00:47:15 2016 -0700

    nsfs: add ioctl to get a parent namespace
    
    Pid and user namepaces are hierarchical. There is no way to discover
    parent-child relationships.
    
    In a future we will use this interface to dump and restore nested
    namespaces.
    
    Acked-by: Serge Hallyn <serge@hallyn.com>
    Signed-off-by: Andrei Vagin <avagin@openvz.org>
    Signed-off-by: Eric W. Biederman <ebiederm@xmission.com>

diff --git a/include/uapi/linux/nsfs.h b/include/uapi/linux/nsfs.h
index 5cacd5c1b5d7..3af617230d1b 100644
--- a/include/uapi/linux/nsfs.h
+++ b/include/uapi/linux/nsfs.h
@@ -7,5 +7,7 @@
 
 /* Returns a file descriptor that refers to an owning user namespace */
 #define NS_GET_USERNS	_IO(NSIO, 0x1)
+/* Returns a file descriptor that refers to a parent namespace */
+#define NS_GET_PARENT	_IO(NSIO, 0x2)
 
 #endif /* __LINUX_NSFS_H */

commit 6786741dbf99e44fb0c0ed85a37582b8a26f1c3b
Author: Andrey Vagin <avagin@openvz.org>
Date:   Tue Sep 6 00:47:14 2016 -0700

    nsfs: add ioctl to get an owning user namespace for ns file descriptor
    
    Each namespace has an owning user namespace and now there is not way
    to discover these relationships.
    
    Understending namespaces relationships allows to answer the question:
    what capability does process X have to perform operations on a resource
    governed by namespace Y?
    
    After a long discussion, Eric W. Biederman proposed to use ioctl-s for
    this purpose.
    
    The NS_GET_USERNS ioctl returns a file descriptor to an owning user
    namespace.
    It returns EPERM if a target namespace is outside of a current user
    namespace.
    
    v2: rename parent to relative
    
    v3: Add a missing mntput when returning -EAGAIN --EWB
    
    Acked-by: Serge Hallyn <serge@hallyn.com>
    Link: https://lkml.org/lkml/2016/7/6/158
    Signed-off-by: Andrei Vagin <avagin@openvz.org>
    Signed-off-by: Eric W. Biederman <ebiederm@xmission.com>

diff --git a/include/uapi/linux/nsfs.h b/include/uapi/linux/nsfs.h
new file mode 100644
index 000000000000..5cacd5c1b5d7
--- /dev/null
+++ b/include/uapi/linux/nsfs.h
@@ -0,0 +1,11 @@
+#ifndef __LINUX_NSFS_H
+#define __LINUX_NSFS_H
+
+#include <linux/ioctl.h>
+
+#define NSIO	0xb7
+
+/* Returns a file descriptor that refers to an owning user namespace */
+#define NS_GET_USERNS	_IO(NSIO, 0x1)
+
+#endif /* __LINUX_NSFS_H */
