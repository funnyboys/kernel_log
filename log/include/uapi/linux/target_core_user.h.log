commit 6c3796d130ed2860489885a934dcb7bb334d5eb0
Author: bstroesser@ts.fujitsu.com <bstroesser@ts.fujitsu.com>
Date:   Thu May 24 18:49:41 2018 +0200

    scsi: target: tcmu: add read length support
    
    Generally target core and TCMUser seem to work fine for tape devices and
    media changers.  But there is at least one situation where TCMUser is not
    able to support sequential access device emulation correctly.
    
    The situation is when an initiator sends a SCSI READ CDB with a length that
    is greater than the length of the tape block to read. We can distinguish
    two subcases:
    
    A) The initiator sent the READ CDB with the SILI bit being set.
    
       In this case the sequential access device has to transfer the data from
       the tape block (only the length of the tape block) and transmit a good
       status.  The current interface between TCMUser and the userspace does
       not support reduction of the read data size by the userspace program.
    
       The patch below fixes this subcase by allowing the userspace program to
       specify a reduced data size in read direction.
    
    B) The initiator sent the READ CDB with the SILI bit not being set.
    
       In this case the sequential access device has to transfer the data from
       the tape block as in A), but additionally has to transmit CHECK
       CONDITION with the ILI bit set and NO SENSE in the sensebytes. The
       information field in the sensebytes must contain the residual count.
    
       With the below patch a user space program can specify the real read data
       length and appropriate sensebytes.  TCMUser then uses the se_cmd flag
       SCF_TREAT_READ_AS_NORMAL, to force target core to transmit the real data
       size and the sensebytes.  Note: the flag SCF_TREAT_READ_AS_NORMAL is
       introduced by Lee Duncan's patch "[PATCH v4] target: transport should
       handle st FM/EOM/ILI reads" from Tue, 15 May 2018 18:25:24 -0700.
    
    Signed-off-by: Bodo Stroesser <bstroesser@ts.fujitsu.com>
    Acked-by: Mike Christie <mchristi@redhat.com>
    Reviewed-by: Lee Duncan <lduncan@suse.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>

diff --git a/include/uapi/linux/target_core_user.h b/include/uapi/linux/target_core_user.h
index 6e299349b158..b7b57967d90f 100644
--- a/include/uapi/linux/target_core_user.h
+++ b/include/uapi/linux/target_core_user.h
@@ -44,6 +44,7 @@
 #define TCMU_MAILBOX_VERSION 2
 #define ALIGN_SIZE 64 /* Should be enough for most CPUs */
 #define TCMU_MAILBOX_FLAG_CAP_OOOC (1 << 0) /* Out-of-order completions */
+#define TCMU_MAILBOX_FLAG_CAP_READ_LEN (1 << 1) /* Read data length */
 
 struct tcmu_mailbox {
 	__u16 version;
@@ -71,6 +72,7 @@ struct tcmu_cmd_entry_hdr {
 	__u16 cmd_id;
 	__u8 kflags;
 #define TCMU_UFLAG_UNKNOWN_OP 0x1
+#define TCMU_UFLAG_READ_LEN   0x2
 	__u8 uflags;
 
 } __packed;
@@ -119,7 +121,7 @@ struct tcmu_cmd_entry {
 			__u8 scsi_status;
 			__u8 __pad1;
 			__u16 __pad2;
-			__u32 __pad3;
+			__u32 read_len;
 			char sense_buffer[TCMU_SENSE_BUFFERSIZE];
 		} rsp;
 	};

commit 572ccdab50bb3ae9096d6947c2e78a7107acf2dd
Author: Randy Dunlap <rdunlap@infradead.org>
Date:   Sat Apr 14 10:51:05 2018 -0700

    scsi: target: target_core_user.[ch]: convert comments into DOC:
    
    Make documentation on target-supported userspace-I/O design be
    usable by kernel-doc by using "DOC:". This is used in the driver-api
    Documentation chapter.
    
    Signed-off-by: Randy Dunlap <rdunlap@infradead.org>
    To: "Nicholas A. Bellinger" <nab@linux-iscsi.org>
    Cc: linux-scsi@vger.kernel.org
    Cc: target-devel@vger.kernel.org
    Cc: linux-doc@vger.kernel.org
    Cc: "James E.J. Bottomley" <jejb@linux.vnet.ibm.com>
    Cc: "Martin K. Petersen" <martin.petersen@oracle.com>
    Cc: Jonathan Corbet <corbet@lwn.net>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>

diff --git a/include/uapi/linux/target_core_user.h b/include/uapi/linux/target_core_user.h
index 0be80f72646b..6e299349b158 100644
--- a/include/uapi/linux/target_core_user.h
+++ b/include/uapi/linux/target_core_user.h
@@ -9,21 +9,22 @@
 
 #define TCMU_VERSION "2.0"
 
-/*
+/**
+ * DOC: Ring Design
  * Ring Design
  * -----------
  *
  * The mmaped area is divided into three parts:
- * 1) The mailbox (struct tcmu_mailbox, below)
- * 2) The command ring
- * 3) Everything beyond the command ring (data)
+ * 1) The mailbox (struct tcmu_mailbox, below);
+ * 2) The command ring;
+ * 3) Everything beyond the command ring (data).
  *
  * The mailbox tells userspace the offset of the command ring from the
  * start of the shared memory region, and how big the command ring is.
  *
  * The kernel passes SCSI commands to userspace by putting a struct
  * tcmu_cmd_entry in the ring, updating mailbox->cmd_head, and poking
- * userspace via uio's interrupt mechanism.
+ * userspace via UIO's interrupt mechanism.
  *
  * tcmu_cmd_entry contains a header. If the header type is PAD,
  * userspace should skip hdr->length bytes (mod cmdr_size) to find the

commit 6f52b16c5b29b89d92c0e7236f4655dc8491ad70
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Wed Nov 1 15:08:43 2017 +0100

    License cleanup: add SPDX license identifier to uapi header files with no license
    
    Many user space API headers are missing licensing information, which
    makes it hard for compliance tools to determine the correct license.
    
    By default are files without license information under the default
    license of the kernel, which is GPLV2.  Marking them GPLV2 would exclude
    them from being included in non GPLV2 code, which is obviously not
    intended. The user space API headers fall under the syscall exception
    which is in the kernels COPYING file:
    
       NOTE! This copyright does *not* cover user programs that use kernel
       services by normal system calls - this is merely considered normal use
       of the kernel, and does *not* fall under the heading of "derived work".
    
    otherwise syscall usage would not be possible.
    
    Update the files which contain no license information with an SPDX
    license identifier.  The chosen identifier is 'GPL-2.0 WITH
    Linux-syscall-note' which is the officially assigned identifier for the
    Linux syscall exception.  SPDX license identifiers are a legally binding
    shorthand, which can be used instead of the full boiler plate text.
    
    This patch is based on work done by Thomas Gleixner and Kate Stewart and
    Philippe Ombredanne.  See the previous patch in this series for the
    methodology of how this patch was researched.
    
    Reviewed-by: Kate Stewart <kstewart@linuxfoundation.org>
    Reviewed-by: Philippe Ombredanne <pombredanne@nexb.com>
    Reviewed-by: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/include/uapi/linux/target_core_user.h b/include/uapi/linux/target_core_user.h
index 24a1c4ec2248..0be80f72646b 100644
--- a/include/uapi/linux/target_core_user.h
+++ b/include/uapi/linux/target_core_user.h
@@ -1,3 +1,4 @@
+/* SPDX-License-Identifier: GPL-2.0 WITH Linux-syscall-note */
 #ifndef __TARGET_CORE_USER_H
 #define __TARGET_CORE_USER_H
 

commit b3af66e24393f03ef81db17a11387d9e6174bd01
Author: Mike Christie <mchristi@redhat.com>
Date:   Fri Jun 23 01:18:15 2017 -0500

    tcmu: perfom device add, del and reconfig synchronously
    
    This makes the device add, del reconfig operations sync. It fixes
    the issue where for add and reconfig, we do not know if userspace
    successfully completely the operation, so we leave invalid kernel
    structs or report incorrect status for the config/reconfig operations.
    
    Signed-off-by: Mike Christie <mchristi@redhat.com>
    Signed-off-by: Nicholas Bellinger <nab@linux-iscsi.org>

diff --git a/include/uapi/linux/target_core_user.h b/include/uapi/linux/target_core_user.h
index 4bfc9a1b635c..24a1c4ec2248 100644
--- a/include/uapi/linux/target_core_user.h
+++ b/include/uapi/linux/target_core_user.h
@@ -131,6 +131,10 @@ enum tcmu_genl_cmd {
 	TCMU_CMD_ADDED_DEVICE,
 	TCMU_CMD_REMOVED_DEVICE,
 	TCMU_CMD_RECONFIG_DEVICE,
+	TCMU_CMD_ADDED_DEVICE_DONE,
+	TCMU_CMD_REMOVED_DEVICE_DONE,
+	TCMU_CMD_RECONFIG_DEVICE_DONE,
+	TCMU_CMD_SET_FEATURES,
 	__TCMU_CMD_MAX,
 };
 #define TCMU_CMD_MAX (__TCMU_CMD_MAX - 1)
@@ -143,6 +147,9 @@ enum tcmu_genl_attr {
 	TCMU_ATTR_DEV_CFG,
 	TCMU_ATTR_DEV_SIZE,
 	TCMU_ATTR_WRITECACHE,
+	TCMU_ATTR_CMD_STATUS,
+	TCMU_ATTR_DEVICE_ID,
+	TCMU_ATTR_SUPP_KERN_CMD_REPLY,
 	__TCMU_ATTR_MAX,
 };
 #define TCMU_ATTR_MAX (__TCMU_ATTR_MAX - 1)

commit 2d76443e02f260d7a5bd0ede1851ae5534f0c68d
Author: Mike Christie <mchristi@redhat.com>
Date:   Mon Jun 12 01:34:28 2017 -0500

    tcmu: reconfigure netlink attr changes
    
    1. TCMU_ATTR_TYPE is too generic when it describes only the
    reconfiguration type, so rename to TCMU_ATTR_RECONFIG_TYPE.
    
    2. Only return the reconfig type when it is a
    TCMU_CMD_RECONFIG_DEVICE command.
    
    3. CONFIG_* type is not needed. We can pass the value along with an
    ATTR to userspace, so it does not need to read sysfs/configfs.
    
    4. Fix leak in tcmu_dev_path_store and rename to dev_config to
    reflect it is more than just a path that can be changed.
    
    6. Don't update kernel struct value if netlink sending fails.
    
    Signed-off-by: Mike Christie <mchristi@redhat.com>
    Reviewed-by: "Bryant G. Ly" <bryantly@linux.vnet.ibm.com>
    Signed-off-by: Nicholas Bellinger <nab@linux-iscsi.org>

diff --git a/include/uapi/linux/target_core_user.h b/include/uapi/linux/target_core_user.h
index 5b00e3500005..4bfc9a1b635c 100644
--- a/include/uapi/linux/target_core_user.h
+++ b/include/uapi/linux/target_core_user.h
@@ -139,16 +139,12 @@ enum tcmu_genl_attr {
 	TCMU_ATTR_UNSPEC,
 	TCMU_ATTR_DEVICE,
 	TCMU_ATTR_MINOR,
-	TCMU_ATTR_TYPE,
+	TCMU_ATTR_PAD,
+	TCMU_ATTR_DEV_CFG,
+	TCMU_ATTR_DEV_SIZE,
+	TCMU_ATTR_WRITECACHE,
 	__TCMU_ATTR_MAX,
 };
 #define TCMU_ATTR_MAX (__TCMU_ATTR_MAX - 1)
 
-enum tcmu_reconfig_types {
-	NO_RECONFIG,
-	CONFIG_PATH,
-	CONFIG_SIZE,
-	CONFIG_WRITECACHE,
-};
-
 #endif

commit 8a45885c1514cdae2ee64b5ac03ffc00a1a8a9d7
Author: Bryant G. Ly <bryantly@linux.vnet.ibm.com>
Date:   Tue Jun 6 09:28:52 2017 -0500

    tcmu: Add Type of reconfig into netlink
    
    This patch adds more info about the attribute being changed,
    so that usersapce can easily figure out what is happening.
    
    Signed-off-by: Bryant G. Ly <bryantly@linux.vnet.ibm.com>
    Reviewed-By: Mike Christie <mchristi@redhat.com>
    Signed-off-by: Nicholas Bellinger <nab@linux-iscsi.org>

diff --git a/include/uapi/linux/target_core_user.h b/include/uapi/linux/target_core_user.h
index 403a61faada0..5b00e3500005 100644
--- a/include/uapi/linux/target_core_user.h
+++ b/include/uapi/linux/target_core_user.h
@@ -139,8 +139,16 @@ enum tcmu_genl_attr {
 	TCMU_ATTR_UNSPEC,
 	TCMU_ATTR_DEVICE,
 	TCMU_ATTR_MINOR,
+	TCMU_ATTR_TYPE,
 	__TCMU_ATTR_MAX,
 };
 #define TCMU_ATTR_MAX (__TCMU_ATTR_MAX - 1)
 
+enum tcmu_reconfig_types {
+	NO_RECONFIG,
+	CONFIG_PATH,
+	CONFIG_SIZE,
+	CONFIG_WRITECACHE,
+};
+
 #endif

commit 1068be7bd4b05ca41a6a8de724f52a9c87861412
Author: Bryant G. Ly <bryantly@linux.vnet.ibm.com>
Date:   Tue Jun 6 09:28:49 2017 -0500

    tcmu: Add netlink for device reconfiguration
    
    This gives tcmu the ability to handle events that can cause
    reconfiguration, such as resize, path changes, write_cache, etc...
    
    Signed-off-by: Bryant G. Ly <bryantly@linux.vnet.ibm.com>
    Reviewed-By: Mike Christie <mchristi@redhat.com>
    Signed-off-by: Nicholas Bellinger <nab@linux-iscsi.org>

diff --git a/include/uapi/linux/target_core_user.h b/include/uapi/linux/target_core_user.h
index af17b4154ef6..403a61faada0 100644
--- a/include/uapi/linux/target_core_user.h
+++ b/include/uapi/linux/target_core_user.h
@@ -130,6 +130,7 @@ enum tcmu_genl_cmd {
 	TCMU_CMD_UNSPEC,
 	TCMU_CMD_ADDED_DEVICE,
 	TCMU_CMD_REMOVED_DEVICE,
+	TCMU_CMD_RECONFIG_DEVICE,
 	__TCMU_CMD_MAX,
 };
 #define TCMU_CMD_MAX (__TCMU_CMD_MAX - 1)

commit 762b6f00a995863afa274d6b5ffa3880dac1714b
Author: Dmitry V. Levin <ldv@altlinux.org>
Date:   Wed Feb 15 23:04:54 2017 +0300

    uapi: fix linux/target_core_user.h userspace compilation errors
    
    Consistently use types from linux/types.h to fix the following
    linux/target_core_user.h userspace compilation errors:
    
    /usr/include/linux/target_core_user.h:108:4: error: unknown type name 'uint32_t'
        uint32_t iov_cnt;
    /usr/include/linux/target_core_user.h:109:4: error: unknown type name 'uint32_t'
        uint32_t iov_bidi_cnt;
    /usr/include/linux/target_core_user.h:110:4: error: unknown type name 'uint32_t'
        uint32_t iov_dif_cnt;
    /usr/include/linux/target_core_user.h:111:4: error: unknown type name 'uint64_t'
        uint64_t cdb_off;
    /usr/include/linux/target_core_user.h:112:4: error: unknown type name 'uint64_t'
        uint64_t __pad1;
    /usr/include/linux/target_core_user.h:113:4: error: unknown type name 'uint64_t'
        uint64_t __pad2;
    /usr/include/linux/target_core_user.h:117:4: error: unknown type name 'uint8_t'
        uint8_t scsi_status;
    /usr/include/linux/target_core_user.h:118:4: error: unknown type name 'uint8_t'
        uint8_t __pad1;
    /usr/include/linux/target_core_user.h:119:4: error: unknown type name 'uint16_t'
        uint16_t __pad2;
    /usr/include/linux/target_core_user.h:120:4: error: unknown type name 'uint32_t'
        uint32_t __pad3;
    
    Signed-off-by: Dmitry V. Levin <ldv@altlinux.org>
    Signed-off-by: Nicholas Bellinger <nab@linux-iscsi.org>

diff --git a/include/uapi/linux/target_core_user.h b/include/uapi/linux/target_core_user.h
index c506cddb8165..af17b4154ef6 100644
--- a/include/uapi/linux/target_core_user.h
+++ b/include/uapi/linux/target_core_user.h
@@ -105,26 +105,26 @@ struct tcmu_cmd_entry {
 
 	union {
 		struct {
-			uint32_t iov_cnt;
-			uint32_t iov_bidi_cnt;
-			uint32_t iov_dif_cnt;
-			uint64_t cdb_off;
-			uint64_t __pad1;
-			uint64_t __pad2;
+			__u32 iov_cnt;
+			__u32 iov_bidi_cnt;
+			__u32 iov_dif_cnt;
+			__u64 cdb_off;
+			__u64 __pad1;
+			__u64 __pad2;
 			struct iovec iov[0];
 		} req;
 		struct {
-			uint8_t scsi_status;
-			uint8_t __pad1;
-			uint16_t __pad2;
-			uint32_t __pad3;
+			__u8 scsi_status;
+			__u8 __pad1;
+			__u16 __pad2;
+			__u32 __pad3;
 			char sense_buffer[TCMU_SENSE_BUFFERSIZE];
 		} rsp;
 	};
 
 } __packed;
 
-#define TCMU_OP_ALIGN_SIZE sizeof(uint64_t)
+#define TCMU_OP_ALIGN_SIZE sizeof(__u64)
 
 enum tcmu_genl_cmd {
 	TCMU_CMD_UNSPEC,

commit 32c76de3466ed2a875e36c140ac4e3800fdfab6e
Author: Sheng Yang <sheng@yasker.org>
Date:   Mon Feb 29 16:02:15 2016 -0800

    target/user: Report capability of handling out-of-order completions to userspace
    
    TCMU_MAILBOX_FLAG_CAP_OOOC was introduced, and userspace can check the flag
    for out-of-order completion capability support.
    
    Also update the document on how to use the feature.
    
    Signed-off-by: Sheng Yang <sheng@yasker.org>
    Reviewed-by: Andy Grover <agrover@redhat.com>
    Signed-off-by: Nicholas Bellinger <nab@linux-iscsi.org>

diff --git a/include/uapi/linux/target_core_user.h b/include/uapi/linux/target_core_user.h
index 95c6521d8a95..c506cddb8165 100644
--- a/include/uapi/linux/target_core_user.h
+++ b/include/uapi/linux/target_core_user.h
@@ -41,6 +41,7 @@
 
 #define TCMU_MAILBOX_VERSION 2
 #define ALIGN_SIZE 64 /* Should be enough for most CPUs */
+#define TCMU_MAILBOX_FLAG_CAP_OOOC (1 << 0) /* Out-of-order completions */
 
 struct tcmu_mailbox {
 	__u16 version;

commit ac64a2ce509104a746321a4f9646b6750cf281eb
Author: David Disseldorp <ddiss@suse.de>
Date:   Fri Sep 4 01:39:56 2015 +0200

    target: use stringify.h instead of own definition
    
    Signed-off-by: David Disseldorp <ddiss@suse.de>
    Acked-by: Andy Grover <agrover@redhat.com>
    Signed-off-by: Nicholas Bellinger <nab@linux-iscsi.org>

diff --git a/include/uapi/linux/target_core_user.h b/include/uapi/linux/target_core_user.h
index b67f99d3c520..95c6521d8a95 100644
--- a/include/uapi/linux/target_core_user.h
+++ b/include/uapi/linux/target_core_user.h
@@ -42,10 +42,6 @@
 #define TCMU_MAILBOX_VERSION 2
 #define ALIGN_SIZE 64 /* Should be enough for most CPUs */
 
-/* See https://gcc.gnu.org/onlinedocs/cpp/Stringification.html */
-#define xstr(s) str(s)
-#define str(s) #s
-
 struct tcmu_mailbox {
 	__u16 version;
 	__u16 flags;

commit 0ad46af8a618fc38e0cdc3927cfa9f7b42cc9423
Author: Andy Grover <agrover@redhat.com>
Date:   Tue Apr 14 17:30:04 2015 -0700

    target: Version 2 of TCMU ABI
    
    The initial version of TCMU (in 3.18) does not properly handle
    bidirectional SCSI commands -- those with both an in and out buffer. In
    looking to fix this it also became clear that TCMU's support for adding
    new types of entries (opcodes) to the command ring was broken. We need
    to fix this now, so that future issues can be handled properly by adding
    new opcodes.
    
    We make the most of this ABI break by enabling bidi cmd handling within
    TCMP_OP_CMD opcode. Add an iov_bidi_cnt field to tcmu_cmd_entry.req.
    This enables TCMU to describe bidi commands, but further kernel work is
    needed for full bidi support.
    
    Enlarge tcmu_cmd_entry_hdr by 32 bits by pulling in cmd_id and __pad1. Turn
    __pad1 into two 8 bit flags fields, for kernel-set and userspace-set flags,
    "kflags" and "uflags" respectively.
    
    Update version fields so userspace can tell the interface is changed.
    
    Update tcmu-design.txt with details of how new stuff works:
    - Specify an additional requirement for userspace to set UNKNOWN_OP
      (bit 0) in hdr.uflags for unknown/unhandled opcodes.
    - Define how Data-In and Data-Out fields are described in req.iov[]
    
    Changed in v2:
    - Change name of SKIPPED bit to UNKNOWN bit
    - PAD op does not set the bit any more
    - Change len_op helper functions to take just len_op, not the whole struct
    - Change version to 2 in missed spots, and use defines
    - Add 16 unused bytes to cmd_entry.req, in case additional SAM cmd
      parameters need to be included
    - Add iov_dif_cnt field to specify buffers used for DIF info in iov[]
    - Rearrange fields to naturally align cdb_off
    - Handle if userspace sets UNKNOWN_OP by indicating failure of the cmd
    - Wrap some overly long UPDATE_HEAD lines
    
    (Add missing req.iov_bidi_cnt + req.iov_dif_cnt zeroing - Ilias)
    
    Signed-off-by: Andy Grover <agrover@redhat.com>
    Reviewed-by: Ilias Tsitsimpis <iliastsi@arrikto.com>
    Signed-off-by: Nicholas Bellinger <nab@linux-iscsi.org>

diff --git a/include/uapi/linux/target_core_user.h b/include/uapi/linux/target_core_user.h
index b483d1909d3e..b67f99d3c520 100644
--- a/include/uapi/linux/target_core_user.h
+++ b/include/uapi/linux/target_core_user.h
@@ -6,7 +6,7 @@
 #include <linux/types.h>
 #include <linux/uio.h>
 
-#define TCMU_VERSION "1.0"
+#define TCMU_VERSION "2.0"
 
 /*
  * Ring Design
@@ -39,9 +39,13 @@
  * should process the next packet the same way, and so on.
  */
 
-#define TCMU_MAILBOX_VERSION 1
+#define TCMU_MAILBOX_VERSION 2
 #define ALIGN_SIZE 64 /* Should be enough for most CPUs */
 
+/* See https://gcc.gnu.org/onlinedocs/cpp/Stringification.html */
+#define xstr(s) str(s)
+#define str(s) #s
+
 struct tcmu_mailbox {
 	__u16 version;
 	__u16 flags;
@@ -64,31 +68,36 @@ enum tcmu_opcode {
  * Only a few opcodes, and length is 8-byte aligned, so use low bits for opcode.
  */
 struct tcmu_cmd_entry_hdr {
-		__u32 len_op;
+	__u32 len_op;
+	__u16 cmd_id;
+	__u8 kflags;
+#define TCMU_UFLAG_UNKNOWN_OP 0x1
+	__u8 uflags;
+
 } __packed;
 
 #define TCMU_OP_MASK 0x7
 
-static inline enum tcmu_opcode tcmu_hdr_get_op(struct tcmu_cmd_entry_hdr *hdr)
+static inline enum tcmu_opcode tcmu_hdr_get_op(__u32 len_op)
 {
-	return hdr->len_op & TCMU_OP_MASK;
+	return len_op & TCMU_OP_MASK;
 }
 
-static inline void tcmu_hdr_set_op(struct tcmu_cmd_entry_hdr *hdr, enum tcmu_opcode op)
+static inline void tcmu_hdr_set_op(__u32 *len_op, enum tcmu_opcode op)
 {
-	hdr->len_op &= ~TCMU_OP_MASK;
-	hdr->len_op |= (op & TCMU_OP_MASK);
+	*len_op &= ~TCMU_OP_MASK;
+	*len_op |= (op & TCMU_OP_MASK);
 }
 
-static inline __u32 tcmu_hdr_get_len(struct tcmu_cmd_entry_hdr *hdr)
+static inline __u32 tcmu_hdr_get_len(__u32 len_op)
 {
-	return hdr->len_op & ~TCMU_OP_MASK;
+	return len_op & ~TCMU_OP_MASK;
 }
 
-static inline void tcmu_hdr_set_len(struct tcmu_cmd_entry_hdr *hdr, __u32 len)
+static inline void tcmu_hdr_set_len(__u32 *len_op, __u32 len)
 {
-	hdr->len_op &= TCMU_OP_MASK;
-	hdr->len_op |= len;
+	*len_op &= TCMU_OP_MASK;
+	*len_op |= len;
 }
 
 /* Currently the same as SCSI_SENSE_BUFFERSIZE */
@@ -97,13 +106,14 @@ static inline void tcmu_hdr_set_len(struct tcmu_cmd_entry_hdr *hdr, __u32 len)
 struct tcmu_cmd_entry {
 	struct tcmu_cmd_entry_hdr hdr;
 
-	uint16_t cmd_id;
-	uint16_t __pad1;
-
 	union {
 		struct {
+			uint32_t iov_cnt;
+			uint32_t iov_bidi_cnt;
+			uint32_t iov_dif_cnt;
 			uint64_t cdb_off;
-			uint64_t iov_cnt;
+			uint64_t __pad1;
+			uint64_t __pad2;
 			struct iovec iov[0];
 		} req;
 		struct {

commit 3875f15207f9ecb3f24a8e91e7ad196899139595
Author: Kyle McMartin <kyle@redhat.com>
Date:   Thu Dec 18 12:57:14 2014 -0500

    uapi/linux/target_core_user.h: fix headers_install.sh badness
    
    scripts/headers_install.sh will transform __packed to
    __attribute__((packed)), so the #ifndef is not necessary.
    (and, in fact, it's problematic, because we'll end up with the header
     containing:
    #ifndef __attribute__((packed))
    #define __attribu...
    and so forth.)
    
    Cc: stable@vger.kernel.org # 3.18
    Signed-off-by: Kyle McMartin <kyle@redhat.com>
    Signed-off-by: Nicholas Bellinger <nab@linux-iscsi.org>

diff --git a/include/uapi/linux/target_core_user.h b/include/uapi/linux/target_core_user.h
index 7dcfbe6771b1..b483d1909d3e 100644
--- a/include/uapi/linux/target_core_user.h
+++ b/include/uapi/linux/target_core_user.h
@@ -6,10 +6,6 @@
 #include <linux/types.h>
 #include <linux/uio.h>
 
-#ifndef __packed
-#define __packed                        __attribute__((packed))
-#endif
-
 #define TCMU_VERSION "1.0"
 
 /*

commit 7c9e7a6fe11c8dc5b3b9d0e889dde73347247584
Author: Andy Grover <agrover@redhat.com>
Date:   Wed Oct 1 16:07:05 2014 -0700

    target: Add a user-passthrough backstore
    
    Add a LIO storage engine that presents commands to userspace for execution.
    This would allow more complex backstores to be implemented out-of-kernel,
    and also make experimentation a-la FUSE (but at the SCSI level -- "SUSE"?)
    possible.
    
    It uses a mmap()able UIO device per LUN to share a command ring and data
    area. The commands are raw SCSI CDBs and iovs for in/out data. The command
    ring is also reused for returning scsi command status and optional sense
    data.
    
    This implementation is based on Shaohua Li's earlier version but heavily
    modified. Differences include:
    
    * Shared memory allocated by kernel, not locked-down user pages
    * Single ring for command request and response
    * Offsets instead of embedded pointers
    * Generic SCSI CDB passthrough instead of per-cmd specialization in ring
      format.
    * Uses UIO device instead of anon_file passed in mailbox.
    * Optional in-kernel handling of some commands.
    
    The main reason for these differences is to permit greater resiliency
    if the user process dies or hangs.
    
    Things not yet implemented (on purpose):
    
    * Zero copy. The data area is flexible enough to allow page flipping or
      backend-allocated pages to be used by fabrics, but it's not clear these
      are performance wins. Can come later.
    * Out-of-order command completion by userspace. Possible to add by just
      allowing userspace to change cmd_id in rsp cmd entries, but currently
      not supported.
    * No locks between kernel cmd submission and completion routines. Sounds
      like it's possible, but this can come later.
    * Sparse allocation of mmaped area. Current code vmallocs the whole thing.
      If the mapped area was larger and not fully mapped then the driver would
      have more freedom to change cmd and data area sizes based on demand.
    
    Current code open issues:
    
    * The use of idrs may be overkill -- we maybe can replace them with a
      simple counter to generate cmd_ids, and a hash table to get a cmd_id's
      associated pointer.
    * Use of a free-running counter for cmd ring instead of explicit modulo
      math. This would require power-of-2 cmd ring size.
    
    (Add kconfig depends NET - Randy)
    
    Signed-off-by: Andy Grover <agrover@redhat.com>
    Signed-off-by: Nicholas Bellinger <nab@linux-iscsi.org>

diff --git a/include/uapi/linux/target_core_user.h b/include/uapi/linux/target_core_user.h
new file mode 100644
index 000000000000..7dcfbe6771b1
--- /dev/null
+++ b/include/uapi/linux/target_core_user.h
@@ -0,0 +1,142 @@
+#ifndef __TARGET_CORE_USER_H
+#define __TARGET_CORE_USER_H
+
+/* This header will be used by application too */
+
+#include <linux/types.h>
+#include <linux/uio.h>
+
+#ifndef __packed
+#define __packed                        __attribute__((packed))
+#endif
+
+#define TCMU_VERSION "1.0"
+
+/*
+ * Ring Design
+ * -----------
+ *
+ * The mmaped area is divided into three parts:
+ * 1) The mailbox (struct tcmu_mailbox, below)
+ * 2) The command ring
+ * 3) Everything beyond the command ring (data)
+ *
+ * The mailbox tells userspace the offset of the command ring from the
+ * start of the shared memory region, and how big the command ring is.
+ *
+ * The kernel passes SCSI commands to userspace by putting a struct
+ * tcmu_cmd_entry in the ring, updating mailbox->cmd_head, and poking
+ * userspace via uio's interrupt mechanism.
+ *
+ * tcmu_cmd_entry contains a header. If the header type is PAD,
+ * userspace should skip hdr->length bytes (mod cmdr_size) to find the
+ * next cmd_entry.
+ *
+ * Otherwise, the entry will contain offsets into the mmaped area that
+ * contain the cdb and data buffers -- the latter accessible via the
+ * iov array. iov addresses are also offsets into the shared area.
+ *
+ * When userspace is completed handling the command, set
+ * entry->rsp.scsi_status, fill in rsp.sense_buffer if appropriate,
+ * and also set mailbox->cmd_tail equal to the old cmd_tail plus
+ * hdr->length, mod cmdr_size. If cmd_tail doesn't equal cmd_head, it
+ * should process the next packet the same way, and so on.
+ */
+
+#define TCMU_MAILBOX_VERSION 1
+#define ALIGN_SIZE 64 /* Should be enough for most CPUs */
+
+struct tcmu_mailbox {
+	__u16 version;
+	__u16 flags;
+	__u32 cmdr_off;
+	__u32 cmdr_size;
+
+	__u32 cmd_head;
+
+	/* Updated by user. On its own cacheline */
+	__u32 cmd_tail __attribute__((__aligned__(ALIGN_SIZE)));
+
+} __packed;
+
+enum tcmu_opcode {
+	TCMU_OP_PAD = 0,
+	TCMU_OP_CMD,
+};
+
+/*
+ * Only a few opcodes, and length is 8-byte aligned, so use low bits for opcode.
+ */
+struct tcmu_cmd_entry_hdr {
+		__u32 len_op;
+} __packed;
+
+#define TCMU_OP_MASK 0x7
+
+static inline enum tcmu_opcode tcmu_hdr_get_op(struct tcmu_cmd_entry_hdr *hdr)
+{
+	return hdr->len_op & TCMU_OP_MASK;
+}
+
+static inline void tcmu_hdr_set_op(struct tcmu_cmd_entry_hdr *hdr, enum tcmu_opcode op)
+{
+	hdr->len_op &= ~TCMU_OP_MASK;
+	hdr->len_op |= (op & TCMU_OP_MASK);
+}
+
+static inline __u32 tcmu_hdr_get_len(struct tcmu_cmd_entry_hdr *hdr)
+{
+	return hdr->len_op & ~TCMU_OP_MASK;
+}
+
+static inline void tcmu_hdr_set_len(struct tcmu_cmd_entry_hdr *hdr, __u32 len)
+{
+	hdr->len_op &= TCMU_OP_MASK;
+	hdr->len_op |= len;
+}
+
+/* Currently the same as SCSI_SENSE_BUFFERSIZE */
+#define TCMU_SENSE_BUFFERSIZE 96
+
+struct tcmu_cmd_entry {
+	struct tcmu_cmd_entry_hdr hdr;
+
+	uint16_t cmd_id;
+	uint16_t __pad1;
+
+	union {
+		struct {
+			uint64_t cdb_off;
+			uint64_t iov_cnt;
+			struct iovec iov[0];
+		} req;
+		struct {
+			uint8_t scsi_status;
+			uint8_t __pad1;
+			uint16_t __pad2;
+			uint32_t __pad3;
+			char sense_buffer[TCMU_SENSE_BUFFERSIZE];
+		} rsp;
+	};
+
+} __packed;
+
+#define TCMU_OP_ALIGN_SIZE sizeof(uint64_t)
+
+enum tcmu_genl_cmd {
+	TCMU_CMD_UNSPEC,
+	TCMU_CMD_ADDED_DEVICE,
+	TCMU_CMD_REMOVED_DEVICE,
+	__TCMU_CMD_MAX,
+};
+#define TCMU_CMD_MAX (__TCMU_CMD_MAX - 1)
+
+enum tcmu_genl_attr {
+	TCMU_ATTR_UNSPEC,
+	TCMU_ATTR_DEVICE,
+	TCMU_ATTR_MINOR,
+	__TCMU_ATTR_MAX,
+};
+#define TCMU_ATTR_MAX (__TCMU_ATTR_MAX - 1)
+
+#endif
