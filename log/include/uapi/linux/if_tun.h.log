commit 0c3e0e3bb623c3735b8c9ab8aa8332f944f83a9f
Author: Kirill Tkhai <ktkhai@virtuozzo.com>
Date:   Wed Mar 20 12:16:42 2019 +0300

    tun: Add ioctl() TUNGETDEVNETNS cmd to allow obtaining real net ns of tun device
    
    In commit f2780d6d7475 "tun: Add ioctl() SIOCGSKNS cmd to allow
    obtaining net ns of tun device" it was missed that tun may change
    its net ns, while net ns of socket remains the same as it was
    created initially. SIOCGSKNS returns net ns of socket, so it is
    not suitable for obtaining net ns of device.
    
    We may have two tun devices with the same names in two net ns,
    and in this case it's not possible to determ, which of them
    fd refers to (TUNGETIFF will return the same name).
    
    This patch adds new ioctl() cmd for obtaining net ns of a device.
    
    Reported-by: Harald Albrecht <harald.albrecht@gmx.net>
    Signed-off-by: Kirill Tkhai <ktkhai@virtuozzo.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

diff --git a/include/uapi/linux/if_tun.h b/include/uapi/linux/if_tun.h
index 23a6753b37df..454ae31b93c7 100644
--- a/include/uapi/linux/if_tun.h
+++ b/include/uapi/linux/if_tun.h
@@ -60,6 +60,7 @@
 #define TUNSETSTEERINGEBPF _IOR('T', 224, int)
 #define TUNSETFILTEREBPF _IOR('T', 225, int)
 #define TUNSETCARRIER _IOW('T', 226, int)
+#define TUNGETDEVNETNS _IO('T', 227)
 
 /* TUNSETIFF ifr flags */
 #define IFF_TUN		0x0001

commit 26d31925cd5ea4b5b168ed538b0326d63ccbb384
Author: Nicolas Dichtel <nicolas.dichtel@6wind.com>
Date:   Wed Nov 28 19:12:56 2018 +0100

    tun: implement carrier change
    
    The userspace may need to control the carrier state.
    
    Signed-off-by: Nicolas Dichtel <nicolas.dichtel@6wind.com>
    Signed-off-by: Didier Pallard <didier.pallard@6wind.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

diff --git a/include/uapi/linux/if_tun.h b/include/uapi/linux/if_tun.h
index ee432cd3018c..23a6753b37df 100644
--- a/include/uapi/linux/if_tun.h
+++ b/include/uapi/linux/if_tun.h
@@ -59,6 +59,7 @@
 #define TUNGETVNETBE _IOR('T', 223, int)
 #define TUNSETSTEERINGEBPF _IOR('T', 224, int)
 #define TUNSETFILTEREBPF _IOR('T', 225, int)
+#define TUNSETCARRIER _IOW('T', 226, int)
 
 /* TUNSETIFF ifr flags */
 #define IFF_TUN		0x0001

commit aff3d70a07fffc0abb53663e4a4acb059d2f36af
Author: Jason Wang <jasowang@redhat.com>
Date:   Tue Jan 16 16:31:02 2018 +0800

    tun: allow to attach ebpf socket filter
    
    This patch allows userspace to attach eBPF filter to tun. This will
    allow to implement VM dataplane filtering in a more efficient way
    compared to cBPF filter by allowing either qemu or libvirt to
    attach eBPF filter to tun.
    
    Signed-off-by: Jason Wang <jasowang@redhat.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

diff --git a/include/uapi/linux/if_tun.h b/include/uapi/linux/if_tun.h
index fb38c1797131..ee432cd3018c 100644
--- a/include/uapi/linux/if_tun.h
+++ b/include/uapi/linux/if_tun.h
@@ -58,6 +58,7 @@
 #define TUNSETVNETBE _IOW('T', 222, int)
 #define TUNGETVNETBE _IOR('T', 223, int)
 #define TUNSETSTEERINGEBPF _IOR('T', 224, int)
+#define TUNSETFILTEREBPF _IOR('T', 225, int)
 
 /* TUNSETIFF ifr flags */
 #define IFF_TUN		0x0001

commit 96f84061620c6325a2ca9a9a05b410e6461d03c3
Author: Jason Wang <jasowang@redhat.com>
Date:   Mon Dec 4 17:31:23 2017 +0800

    tun: add eBPF based queue selection method
    
    This patch introduces an eBPF based queue selection method. With this,
    the policy could be offloaded to userspace completely through a new
    ioctl TUNSETSTEERINGEBPF.
    
    Signed-off-by: Jason Wang <jasowang@redhat.com>
    Acked-by: Willem de Bruijn <willemb@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

diff --git a/include/uapi/linux/if_tun.h b/include/uapi/linux/if_tun.h
index 030d3e6d6029..fb38c1797131 100644
--- a/include/uapi/linux/if_tun.h
+++ b/include/uapi/linux/if_tun.h
@@ -57,6 +57,7 @@
  */
 #define TUNSETVNETBE _IOW('T', 222, int)
 #define TUNGETVNETBE _IOR('T', 223, int)
+#define TUNSETSTEERINGEBPF _IOR('T', 224, int)
 
 /* TUNSETIFF ifr flags */
 #define IFF_TUN		0x0001

commit 2a171788ba7bb61995e98e8163204fc7880f63b2
Merge: bf5345882bd1 d4c2e9fca5b7
Author: David S. Miller <davem@davemloft.net>
Date:   Sat Nov 4 09:26:51 2017 +0900

    Merge git://git.kernel.org/pub/scm/linux/kernel/git/davem/net
    
    Files removed in 'net-next' had their license header updated
    in 'net'.  We take the remove from 'net-next'.
    
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit e2be04c7f9958dde770eeb8b30e829ca969b37bb
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Wed Nov 1 15:09:13 2017 +0100

    License cleanup: add SPDX license identifier to uapi header files with a license
    
    Many user space API headers have licensing information, which is either
    incomplete, badly formatted or just a shorthand for referring to the
    license under which the file is supposed to be.  This makes it hard for
    compliance tools to determine the correct license.
    
    Update these files with an SPDX license identifier.  The identifier was
    chosen based on the license information in the file.
    
    GPL/LGPL licensed headers get the matching GPL/LGPL SPDX license
    identifier with the added 'WITH Linux-syscall-note' exception, which is
    the officially assigned exception identifier for the kernel syscall
    exception:
    
       NOTE! This copyright does *not* cover user programs that use kernel
       services by normal system calls - this is merely considered normal use
       of the kernel, and does *not* fall under the heading of "derived work".
    
    This exception makes it possible to include GPL headers into non GPL
    code, without confusing license compliance tools.
    
    Headers which have either explicit dual licensing or are just licensed
    under a non GPL license are updated with the corresponding SPDX
    identifier and the GPLv2 with syscall exception identifier.  The format
    is:
            ((GPL-2.0 WITH Linux-syscall-note) OR SPDX-ID-OF-OTHER-LICENSE)
    
    SPDX license identifiers are a legally binding shorthand, which can be
    used instead of the full boiler plate text.  The update does not remove
    existing license information as this has to be done on a case by case
    basis and the copyright holders might have to be consulted. This will
    happen in a separate step.
    
    This patch is based on work done by Thomas Gleixner and Kate Stewart and
    Philippe Ombredanne.  See the previous patch in this series for the
    methodology of how this patch was researched.
    
    Reviewed-by: Kate Stewart <kstewart@linuxfoundation.org>
    Reviewed-by: Philippe Ombredanne <pombredanne@nexb.com>
    Reviewed-by: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/include/uapi/linux/if_tun.h b/include/uapi/linux/if_tun.h
index 3cb5e1d85ddd..47ab4bc62e31 100644
--- a/include/uapi/linux/if_tun.h
+++ b/include/uapi/linux/if_tun.h
@@ -1,3 +1,4 @@
+/* SPDX-License-Identifier: GPL-2.0+ WITH Linux-syscall-note */
 /*
  *  Universal TUN/TAP device driver.
  *  Copyright (C) 1999-2000 Maxim Krasnyansky <max_mk@yahoo.com>

commit 90e33d45940793def6f773b2d528e9f3c84ffdc7
Author: Petar Penkov <peterpenkov96@gmail.com>
Date:   Fri Sep 22 13:49:15 2017 -0700

    tun: enable napi_gro_frags() for TUN/TAP driver
    
    Add a TUN/TAP receive mode that exercises the napi_gro_frags()
    interface. This mode is available only in TAP mode, as the interface
    expects packets with Ethernet headers.
    
    Furthermore, packets follow the layout of the iovec_iter that was
    received. The first iovec is the linear data, and every one after the
    first is a fragment. If there are more fragments than the max number,
    drop the packet. Additionally, invoke eth_get_headlen() to exercise flow
    dissector code and to verify that the header resides in the linear data.
    
    The napi_gro_frags() mode requires setting the IFF_NAPI_FRAGS option.
    This is imposed because this mode is intended for testing via tools like
    syzkaller and packetdrill, and the increased flexibility it provides can
    introduce security vulnerabilities. This flag is accepted only if the
    device is in TAP mode and has the IFF_NAPI flag set as well. This is
    done because both of these are explicit requirements for correct
    operation in this mode.
    
    Signed-off-by: Petar Penkov <peterpenkov96@gmail.com>
    Cc: Eric Dumazet <edumazet@google.com>
    Cc: Mahesh Bandewar <maheshb@google.com>
    Cc: Willem de Bruijn <willemb@google.com>
    Cc: davem@davemloft.net
    Cc: ppenkov@stanford.edu
    Acked-by: Mahesh Bandewar <maheshb@google,com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

diff --git a/include/uapi/linux/if_tun.h b/include/uapi/linux/if_tun.h
index 30b6184884eb..365ade5685c9 100644
--- a/include/uapi/linux/if_tun.h
+++ b/include/uapi/linux/if_tun.h
@@ -61,6 +61,7 @@
 #define IFF_TUN		0x0001
 #define IFF_TAP		0x0002
 #define IFF_NAPI	0x0010
+#define IFF_NAPI_FRAGS	0x0020
 #define IFF_NO_PI	0x1000
 /* This flag has no real effect */
 #define IFF_ONE_QUEUE	0x2000

commit 943170998b200190f99d3fe7e771437e2c51f319
Author: Petar Penkov <peterpenkov96@gmail.com>
Date:   Fri Sep 22 13:49:14 2017 -0700

    tun: enable NAPI for TUN/TAP driver
    
    Changes TUN driver to use napi_gro_receive() upon receiving packets
    rather than netif_rx_ni(). Adds flag IFF_NAPI that enables these
    changes and operation is not affected if the flag is disabled.  SKBs
    are constructed upon packet arrival and are queued to be processed
    later.
    
    The new path was evaluated with a benchmark with the following setup:
    Open two tap devices and a receiver thread that reads in a loop for
    each device. Start one sender thread and pin all threads to different
    CPUs. Send 1M minimum UDP packets to each device and measure sending
    time for each of the sending methods:
            napi_gro_receive():     4.90s
            netif_rx_ni():          4.90s
            netif_receive_skb():    7.20s
    
    Signed-off-by: Petar Penkov <peterpenkov96@gmail.com>
    Cc: Eric Dumazet <edumazet@google.com>
    Cc: Mahesh Bandewar <maheshb@google.com>
    Cc: Willem de Bruijn <willemb@google.com>
    Cc: davem@davemloft.net
    Cc: ppenkov@stanford.edu
    Acked-by: Mahesh Bandewar <maheshb@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

diff --git a/include/uapi/linux/if_tun.h b/include/uapi/linux/if_tun.h
index 3cb5e1d85ddd..30b6184884eb 100644
--- a/include/uapi/linux/if_tun.h
+++ b/include/uapi/linux/if_tun.h
@@ -60,6 +60,7 @@
 /* TUNSETIFF ifr flags */
 #define IFF_TUN		0x0001
 #define IFF_TAP		0x0002
+#define IFF_NAPI	0x0010
 #define IFF_NO_PI	0x1000
 /* This flag has no real effect */
 #define IFF_ONE_QUEUE	0x2000

commit 8b8e658b16336f0f50aba733f51db636ef121f50
Author: Greg Kurz <gkurz@linux.vnet.ibm.com>
Date:   Fri Apr 24 14:50:36 2015 +0200

    macvtap/tun: cross-endian support for little-endian hosts
    
    The VNET_LE flag was introduced to fix accesses to virtio 1.0 headers
    that are always little-endian. It can also be used to handle the special
    case of a legacy little-endian device implemented by a big-endian host.
    
    Let's add a flag and ioctls for big-endian devices as well. If both flags
    are set, little-endian wins.
    
    Since this is isn't a common usecase, the feature is controlled by a kernel
    config option (not set by default).
    
    Both macvtap and tun are covered by this patch since they share the same
    API with userland.
    
    Signed-off-by: Greg Kurz <gkurz@linux.vnet.ibm.com>
    
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>
    Reviewed-by: David Gibson <david@gibson.dropbear.id.au>

diff --git a/include/uapi/linux/if_tun.h b/include/uapi/linux/if_tun.h
index 50ae24335444..3cb5e1d85ddd 100644
--- a/include/uapi/linux/if_tun.h
+++ b/include/uapi/linux/if_tun.h
@@ -50,6 +50,12 @@
 #define TUNGETFILTER _IOR('T', 219, struct sock_fprog)
 #define TUNSETVNETLE _IOW('T', 220, int)
 #define TUNGETVNETLE _IOR('T', 221, int)
+/* The TUNSETVNETBE and TUNGETVNETBE ioctls are for cross-endian support on
+ * little-endian hosts. Not all kernel configurations support them, but all
+ * configurations that support SET also support GET.
+ */
+#define TUNSETVNETBE _IOW('T', 222, int)
+#define TUNGETVNETBE _IOR('T', 223, int)
 
 /* TUNSETIFF ifr flags */
 #define IFF_TUN		0x0001

commit 9c6ab1931fd6198eab61d9d59aff9a1014637ace
Author: Michael S. Tsirkin <mst@redhat.com>
Date:   Tue Dec 16 15:05:23 2014 +0200

    if_tun: drop broken IFF_VNET_LE
    
    Everyone should use TUNSETVNETLE/TUNGETVNETLE instead.
    
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

diff --git a/include/uapi/linux/if_tun.h b/include/uapi/linux/if_tun.h
index 274630caa276..50ae24335444 100644
--- a/include/uapi/linux/if_tun.h
+++ b/include/uapi/linux/if_tun.h
@@ -59,7 +59,6 @@
 #define IFF_ONE_QUEUE	0x2000
 #define IFF_VNET_HDR	0x4000
 #define IFF_TUN_EXCL	0x8000
-#define IFF_VNET_LE	0x10000
 #define IFF_MULTI_QUEUE 0x0100
 #define IFF_ATTACH_QUEUE 0x0200
 #define IFF_DETACH_QUEUE 0x0400

commit 5eea84f478537de769330079dc068414f9d417f4
Author: Michael S. Tsirkin <mst@redhat.com>
Date:   Tue Dec 16 15:05:01 2014 +0200

    if_tun: add TUNSETVNETLE/TUNGETVNETLE
    
    ifreq flags field is only 16 bit wide, so setting IFF_VNET_LE there has
    no effect:
    doesn't fit in two bytes.
    
    The tests passed apparently because they have an even number of bugs,
    all cancelling out.
    
    Luckily we didn't release a kernel with this flag, so it's
    not too late to fix this.
    
    Add TUNSETVNETLE/TUNGETVNETLE to really achieve the purpose
    of IFF_VNET_LE.
    
    This has an added benefit that if we ever want a BE flag,
    we won't have to deal with weird configurations like
    setting both LE and BE at the same time.
    
    IFF_VNET_LE will be dropped in a follow-up patch.
    
    Reported-by: Dan Carpenter <dan.carpenter@oracle.com>
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

diff --git a/include/uapi/linux/if_tun.h b/include/uapi/linux/if_tun.h
index 18b2403982f9..274630caa276 100644
--- a/include/uapi/linux/if_tun.h
+++ b/include/uapi/linux/if_tun.h
@@ -48,6 +48,8 @@
 #define TUNSETQUEUE  _IOW('T', 217, int)
 #define TUNSETIFINDEX	_IOW('T', 218, unsigned int)
 #define TUNGETFILTER _IOR('T', 219, struct sock_fprog)
+#define TUNSETVNETLE _IOW('T', 220, int)
+#define TUNGETVNETLE _IOR('T', 221, int)
 
 /* TUNSETIFF ifr flags */
 #define IFF_TUN		0x0001

commit e999d6ea2a4f313a5bba514b08f6f01b0c0072a9
Author: Michael S. Tsirkin <mst@redhat.com>
Date:   Tue Nov 18 17:38:08 2014 +0200

    tun: add VNET_LE flag
    
    virtio 1.0 modified virtio net header format,
    making all fields little endian.
    
    Users can tweak header format before submitting it to tun,
    but this means more data copies where none were necessary.
    And if the iovec is in RO memory, this means we might
    need to split iovec also means we might in theory overflow
    iovec max size.
    
    This patch adds a simpler way for applications to handle this,
    using new "little endian" flag in tun.
    As a result, tun simply byte-swaps header fields as appropriate.
    This is a NOP on LE architectures.
    
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>

diff --git a/include/uapi/linux/if_tun.h b/include/uapi/linux/if_tun.h
index 277a2607d166..18b2403982f9 100644
--- a/include/uapi/linux/if_tun.h
+++ b/include/uapi/linux/if_tun.h
@@ -57,6 +57,7 @@
 #define IFF_ONE_QUEUE	0x2000
 #define IFF_VNET_HDR	0x4000
 #define IFF_TUN_EXCL	0x8000
+#define IFF_VNET_LE	0x10000
 #define IFF_MULTI_QUEUE 0x0100
 #define IFF_ATTACH_QUEUE 0x0200
 #define IFF_DETACH_QUEUE 0x0400

commit 031f5e0338ef672e728c878129fa044e8830c31a
Author: Michael S. Tsirkin <mst@redhat.com>
Date:   Wed Nov 19 14:44:40 2014 +0200

    tun: move internal flag defines out of uapi
    
    TUN_ flags are internal and never exposed
    to userspace. Any application using it is almost
    certainly buggy.
    
    Move them out to tun.c.
    
    Note: we remove these completely in follow-up patches,
    this code movement is split out for ease of review.
    
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>

diff --git a/include/uapi/linux/if_tun.h b/include/uapi/linux/if_tun.h
index e9502dd1ee2c..277a2607d166 100644
--- a/include/uapi/linux/if_tun.h
+++ b/include/uapi/linux/if_tun.h
@@ -22,21 +22,11 @@
 
 /* Read queue size */
 #define TUN_READQ_SIZE	500
-
-/* TUN device flags */
-#define TUN_TUN_DEV 	0x0001	
-#define TUN_TAP_DEV	0x0002
+/* TUN device type flags: deprecated. Use IFF_TUN/IFF_TAP instead. */
+#define TUN_TUN_DEV 	IFF_TUN
+#define TUN_TAP_DEV	IFF_TAP
 #define TUN_TYPE_MASK   0x000f
 
-#define TUN_FASYNC	0x0010
-#define TUN_NOCHECKSUM	0x0020
-#define TUN_NO_PI	0x0040
-/* This flag has no real effect */
-#define TUN_ONE_QUEUE	0x0080
-#define TUN_PERSIST 	0x0100	
-#define TUN_VNET_HDR 	0x0200
-#define TUN_TAP_MQ      0x0400
-
 /* Ioctl defines */
 #define TUNSETNOCSUM  _IOW('T', 200, int) 
 #define TUNSETDEBUG   _IOW('T', 201, int) 

commit 76975e9cb4a7c6fe39478a3dc4dd292a5c6c8c74
Author: Pavel Emelyanov <xemul@parallels.com>
Date:   Wed Aug 21 14:32:39 2013 +0400

    tun: Get skfilter layout
    
    The only thing we may have from tun device is the fprog, whic contains
    the number of filter elements and a pointer to (user-space) memory
    where the elements are. The program itself may not be available if the
    device is persistent and detached.
    
    Signed-off-by: Pavel Emelyanov <xemul@parallels.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

diff --git a/include/uapi/linux/if_tun.h b/include/uapi/linux/if_tun.h
index cc127b2b4c3d..e9502dd1ee2c 100644
--- a/include/uapi/linux/if_tun.h
+++ b/include/uapi/linux/if_tun.h
@@ -57,6 +57,7 @@
 #define TUNSETVNETHDRSZ _IOW('T', 216, int)
 #define TUNSETQUEUE  _IOW('T', 217, int)
 #define TUNSETIFINDEX	_IOW('T', 218, unsigned int)
+#define TUNGETFILTER _IOR('T', 219, struct sock_fprog)
 
 /* TUNSETIFF ifr flags */
 #define IFF_TUN		0x0001

commit 849c9b6f93cc4cb5eb59301b6380a7a81b43f414
Author: Pavel Emelyanov <xemul@parallels.com>
Date:   Wed Aug 21 14:32:21 2013 +0400

    tun: Allow to skip filter on attach
    
    There's a small problem with sk-filters on tun devices. Consider
    an application doing this sequence of steps:
    
    fd = open("/dev/net/tun");
    ioctl(fd, TUNSETIFF, { .ifr_name = "tun0" });
    ioctl(fd, TUNATTACHFILTER, &my_filter);
    ioctl(fd, TUNSETPERSIST, 1);
    close(fd);
    
    At that point the tun0 will remain in the system and will keep in
    mind that there should be a socket filter at address '&my_filter'.
    
    If after that we do
    
    fd = open("/dev/net/tun");
    ioctl(fd, TUNSETIFF, { .ifr_name = "tun0" });
    
    we most likely receive the -EFAULT error, since tun_attach() would
    try to connect the filter back. But (!) if we provide a filter at
    address &my_filter, then tun0 will be created and the "new" filter
    would be attached, but application may not know about that.
    
    This may create certain problems to anyone using tun-s, but it's
    critical problem for c/r -- if we meet a persistent tun device
    with a filter in mind, we will not be able to attach to it to dump
    its state (flags, owner, address, vnethdr size, etc.).
    
    The proposal is to allow to attach to tun device (with TUNSETIFF)
    w/o attaching the filter to the tun-file's socket. After this
    attach app may e.g clean the device by dropping the filter, it
    doesn't want to have one, or (in case of c/r) get information
    about the device with tun ioctls.
    
    Signed-off-by: Pavel Emelyanov <xemul@parallels.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

diff --git a/include/uapi/linux/if_tun.h b/include/uapi/linux/if_tun.h
index c58d023c4822..cc127b2b4c3d 100644
--- a/include/uapi/linux/if_tun.h
+++ b/include/uapi/linux/if_tun.h
@@ -71,6 +71,7 @@
 #define IFF_DETACH_QUEUE 0x0400
 /* read-only flag */
 #define IFF_PERSIST	0x0800
+#define IFF_NOFILTER	0x1000
 
 /* Socket options */
 #define TUN_TX_TIMESTAMP 1

commit fb7589a162162223e6bb6422dde3fb1ce07d9a78
Author: Pavel Emelyanov <xemul@parallels.com>
Date:   Wed Aug 21 14:31:38 2013 +0400

    tun: Add ability to create tun device with given index
    
    Tun devices cannot be created with ifidex user wants, but it's
    required by checkpoint-restore project.
    
    Long time ago such ability was implemented for rtnl_ops-based
    interface for creating links (9c7dafbf net: Allow to create links
    with given ifindex), but the only API for creating and managing
    tuntap devices is ioctl-based and is evolving with adding new ones
    (cde8b15f tuntap: add ioctl to attach or detach a file form tuntap
    device).
    
    Following that trend, here's how a new ioctl that sets the ifindex
    for device, that _will_ be created by TUNSETIFF ioctl looks like.
    So those who want a tuntap device with the ifindex N, should open
    the tun device, call ioctl(fd, TUNSETIFINDEX, &N), then call TUNSETIFF.
    If the index N is busy, then the register_netdev will find this out
    and the ioctl would be failed with -EBUSY.
    
    If setifindex is not called, then it will be generated as before.
    
    Signed-off-by: Pavel Emelyanov <xemul@parallels.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

diff --git a/include/uapi/linux/if_tun.h b/include/uapi/linux/if_tun.h
index 1870ee29bb37..c58d023c4822 100644
--- a/include/uapi/linux/if_tun.h
+++ b/include/uapi/linux/if_tun.h
@@ -56,6 +56,7 @@
 #define TUNGETVNETHDRSZ _IOR('T', 215, int)
 #define TUNSETVNETHDRSZ _IOW('T', 216, int)
 #define TUNSETQUEUE  _IOW('T', 217, int)
+#define TUNSETIFINDEX	_IOW('T', 218, unsigned int)
 
 /* TUNSETIFF ifr flags */
 #define IFF_TUN		0x0001

commit eda297729171fe16bf34fe5b0419dfb69060f623
Author: Richard Cochran <richardcochran@gmail.com>
Date:   Fri Jul 19 19:40:10 2013 +0200

    tun: Support software transmit time stamping.
    
    This patch adds transmit time stamping to the tun/tap driver. Similar
    support already exists for UDP, can, and raw packets.
    
    Signed-off-by: Richard Cochran <richardcochran@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

diff --git a/include/uapi/linux/if_tun.h b/include/uapi/linux/if_tun.h
index 82334f88967e..1870ee29bb37 100644
--- a/include/uapi/linux/if_tun.h
+++ b/include/uapi/linux/if_tun.h
@@ -71,6 +71,9 @@
 /* read-only flag */
 #define IFF_PERSIST	0x0800
 
+/* Socket options */
+#define TUN_TX_TIMESTAMP 1
+
 /* Features for GSO (TUNSETOFFLOAD). */
 #define TUN_F_CSUM	0x01	/* You can hand me unchecksummed packets. */
 #define TUN_F_TSO4	0x02	/* I can handle TSO for IPv4 packets */

commit 274038f8c94c493e2977983e2aecb5f5f0778479
Author: Pavel Emelyanov <xemul@parallels.com>
Date:   Tue Jun 11 14:41:24 2013 +0400

    tun: Report "persist" flag to userspace
    
    The TUN_PERSIST flag is not reported at all -- both TUNGETIFF, and sysfs
    "flags" attribute skip one. Knowing whether a device is persistent or not
    is critical for checkpoint-restore, thus I propose to add the read-only
    IFF_PERSIST one for this.
    
    Setting this new IFF_PERSIST is hardly possible, as TUNSETIFF doesn't check
    for unknown flags being zero and thus there can be trash.
    
    Signed-off-by: Pavel Emelyanov <xemul@parallels.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

diff --git a/include/uapi/linux/if_tun.h b/include/uapi/linux/if_tun.h
index 2835b85fd46d..82334f88967e 100644
--- a/include/uapi/linux/if_tun.h
+++ b/include/uapi/linux/if_tun.h
@@ -68,6 +68,8 @@
 #define IFF_MULTI_QUEUE 0x0100
 #define IFF_ATTACH_QUEUE 0x0200
 #define IFF_DETACH_QUEUE 0x0400
+/* read-only flag */
+#define IFF_PERSIST	0x0800
 
 /* Features for GSO (TUNSETOFFLOAD). */
 #define TUN_F_CSUM	0x01	/* You can hand me unchecksummed packets. */

commit 5d097109257c03a71845729f8db6b5770c4bbedc
Author: Michael S. Tsirkin <mst@redhat.com>
Date:   Mon Dec 3 10:07:14 2012 +0000

    tun: only queue packets on device
    
    Historically tun supported two modes of operation:
    - in default mode, a small number of packets would get queued
      at the device, the rest would be queued in qdisc
    - in one queue mode, all packets would get queued at the device
    
    This might have made sense up to a point where we made the
    queue depth for both modes the same and set it to
    a huge value (500) so unless the consumer
    is stuck the chance of losing packets is small.
    
    Thus in practice both modes behave the same, but the
    default mode has some problems:
    - if packets are never consumed, fragments are never orphaned
      which cases a DOS for sender using zero copy transmit
    - overrun errors are hard to diagnose: fifo error is incremented
      only once so you can not distinguish between
      userspace that is stuck and a transient failure,
      tcpdump on the device does not show any traffic
    
    Userspace solves this simply by enabling IFF_ONE_QUEUE
    but there seems to be little point in not doing the
    right thing for everyone, by default.
    
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

diff --git a/include/uapi/linux/if_tun.h b/include/uapi/linux/if_tun.h
index 958497ad5bb5..2835b85fd46d 100644
--- a/include/uapi/linux/if_tun.h
+++ b/include/uapi/linux/if_tun.h
@@ -31,6 +31,7 @@
 #define TUN_FASYNC	0x0010
 #define TUN_NOCHECKSUM	0x0020
 #define TUN_NO_PI	0x0040
+/* This flag has no real effect */
 #define TUN_ONE_QUEUE	0x0080
 #define TUN_PERSIST 	0x0100	
 #define TUN_VNET_HDR 	0x0200
@@ -60,6 +61,7 @@
 #define IFF_TUN		0x0001
 #define IFF_TAP		0x0002
 #define IFF_NO_PI	0x1000
+/* This flag has no real effect */
 #define IFF_ONE_QUEUE	0x2000
 #define IFF_VNET_HDR	0x4000
 #define IFF_TUN_EXCL	0x8000

commit cde8b15f1aabe327038ee4e0e11dd6b798572f69
Author: Jason Wang <jasowang@redhat.com>
Date:   Wed Oct 31 19:46:01 2012 +0000

    tuntap: add ioctl to attach or detach a file form tuntap device
    
    Sometimes usespace may need to active/deactive a queue, this could be done by
    detaching and attaching a file from tuntap device.
    
    This patch introduces a new ioctls - TUNSETQUEUE which could be used to do
    this. Flag IFF_ATTACH_QUEUE were introduced to do attaching while
    IFF_DETACH_QUEUE were introduced to do the detaching.
    
    Signed-off-by: Jason Wang <jasowang@redhat.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

diff --git a/include/uapi/linux/if_tun.h b/include/uapi/linux/if_tun.h
index 8ef3a87b58a0..958497ad5bb5 100644
--- a/include/uapi/linux/if_tun.h
+++ b/include/uapi/linux/if_tun.h
@@ -54,6 +54,7 @@
 #define TUNDETACHFILTER _IOW('T', 214, struct sock_fprog)
 #define TUNGETVNETHDRSZ _IOR('T', 215, int)
 #define TUNSETVNETHDRSZ _IOW('T', 216, int)
+#define TUNSETQUEUE  _IOW('T', 217, int)
 
 /* TUNSETIFF ifr flags */
 #define IFF_TUN		0x0001
@@ -63,6 +64,8 @@
 #define IFF_VNET_HDR	0x4000
 #define IFF_TUN_EXCL	0x8000
 #define IFF_MULTI_QUEUE 0x0100
+#define IFF_ATTACH_QUEUE 0x0200
+#define IFF_DETACH_QUEUE 0x0400
 
 /* Features for GSO (TUNSETOFFLOAD). */
 #define TUN_F_CSUM	0x01	/* You can hand me unchecksummed packets. */

commit bbb009941efaece3898910a862f6d23aa55d6ba8
Author: Jason Wang <jasowang@redhat.com>
Date:   Wed Oct 31 19:45:59 2012 +0000

    tuntap: introduce multiqueue flags
    
    Add flags to be used by creating multiqueue tuntap device.
    
    Signed-off-by: Jason Wang <jasowang@redhat.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

diff --git a/include/uapi/linux/if_tun.h b/include/uapi/linux/if_tun.h
index 25a585ce23e6..8ef3a87b58a0 100644
--- a/include/uapi/linux/if_tun.h
+++ b/include/uapi/linux/if_tun.h
@@ -34,6 +34,7 @@
 #define TUN_ONE_QUEUE	0x0080
 #define TUN_PERSIST 	0x0100	
 #define TUN_VNET_HDR 	0x0200
+#define TUN_TAP_MQ      0x0400
 
 /* Ioctl defines */
 #define TUNSETNOCSUM  _IOW('T', 200, int) 
@@ -61,6 +62,7 @@
 #define IFF_ONE_QUEUE	0x2000
 #define IFF_VNET_HDR	0x4000
 #define IFF_TUN_EXCL	0x8000
+#define IFF_MULTI_QUEUE 0x0100
 
 /* Features for GSO (TUNSETOFFLOAD). */
 #define TUN_F_CSUM	0x01	/* You can hand me unchecksummed packets. */

commit 607ca46e97a1b6594b29647d98a32d545c24bdff
Author: David Howells <dhowells@redhat.com>
Date:   Sat Oct 13 10:46:48 2012 +0100

    UAPI: (Scripted) Disintegrate include/linux
    
    Signed-off-by: David Howells <dhowells@redhat.com>
    Acked-by: Arnd Bergmann <arnd@arndb.de>
    Acked-by: Thomas Gleixner <tglx@linutronix.de>
    Acked-by: Michael Kerrisk <mtk.manpages@gmail.com>
    Acked-by: Paul E. McKenney <paulmck@linux.vnet.ibm.com>
    Acked-by: Dave Jones <davej@redhat.com>

diff --git a/include/uapi/linux/if_tun.h b/include/uapi/linux/if_tun.h
new file mode 100644
index 000000000000..25a585ce23e6
--- /dev/null
+++ b/include/uapi/linux/if_tun.h
@@ -0,0 +1,94 @@
+/*
+ *  Universal TUN/TAP device driver.
+ *  Copyright (C) 1999-2000 Maxim Krasnyansky <max_mk@yahoo.com>
+ *
+ *  This program is free software; you can redistribute it and/or modify
+ *  it under the terms of the GNU General Public License as published by
+ *  the Free Software Foundation; either version 2 of the License, or
+ *  (at your option) any later version.
+ *
+ *  This program is distributed in the hope that it will be useful,
+ *  but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ *  GNU General Public License for more details.
+ */
+
+#ifndef _UAPI__IF_TUN_H
+#define _UAPI__IF_TUN_H
+
+#include <linux/types.h>
+#include <linux/if_ether.h>
+#include <linux/filter.h>
+
+/* Read queue size */
+#define TUN_READQ_SIZE	500
+
+/* TUN device flags */
+#define TUN_TUN_DEV 	0x0001	
+#define TUN_TAP_DEV	0x0002
+#define TUN_TYPE_MASK   0x000f
+
+#define TUN_FASYNC	0x0010
+#define TUN_NOCHECKSUM	0x0020
+#define TUN_NO_PI	0x0040
+#define TUN_ONE_QUEUE	0x0080
+#define TUN_PERSIST 	0x0100	
+#define TUN_VNET_HDR 	0x0200
+
+/* Ioctl defines */
+#define TUNSETNOCSUM  _IOW('T', 200, int) 
+#define TUNSETDEBUG   _IOW('T', 201, int) 
+#define TUNSETIFF     _IOW('T', 202, int) 
+#define TUNSETPERSIST _IOW('T', 203, int) 
+#define TUNSETOWNER   _IOW('T', 204, int)
+#define TUNSETLINK    _IOW('T', 205, int)
+#define TUNSETGROUP   _IOW('T', 206, int)
+#define TUNGETFEATURES _IOR('T', 207, unsigned int)
+#define TUNSETOFFLOAD  _IOW('T', 208, unsigned int)
+#define TUNSETTXFILTER _IOW('T', 209, unsigned int)
+#define TUNGETIFF      _IOR('T', 210, unsigned int)
+#define TUNGETSNDBUF   _IOR('T', 211, int)
+#define TUNSETSNDBUF   _IOW('T', 212, int)
+#define TUNATTACHFILTER _IOW('T', 213, struct sock_fprog)
+#define TUNDETACHFILTER _IOW('T', 214, struct sock_fprog)
+#define TUNGETVNETHDRSZ _IOR('T', 215, int)
+#define TUNSETVNETHDRSZ _IOW('T', 216, int)
+
+/* TUNSETIFF ifr flags */
+#define IFF_TUN		0x0001
+#define IFF_TAP		0x0002
+#define IFF_NO_PI	0x1000
+#define IFF_ONE_QUEUE	0x2000
+#define IFF_VNET_HDR	0x4000
+#define IFF_TUN_EXCL	0x8000
+
+/* Features for GSO (TUNSETOFFLOAD). */
+#define TUN_F_CSUM	0x01	/* You can hand me unchecksummed packets. */
+#define TUN_F_TSO4	0x02	/* I can handle TSO for IPv4 packets */
+#define TUN_F_TSO6	0x04	/* I can handle TSO for IPv6 packets */
+#define TUN_F_TSO_ECN	0x08	/* I can handle TSO with ECN bits. */
+#define TUN_F_UFO	0x10	/* I can handle UFO packets */
+
+/* Protocol info prepended to the packets (when IFF_NO_PI is not set) */
+#define TUN_PKT_STRIP	0x0001
+struct tun_pi {
+	__u16  flags;
+	__be16 proto;
+};
+
+/*
+ * Filter spec (used for SETXXFILTER ioctls)
+ * This stuff is applicable only to the TAP (Ethernet) devices.
+ * If the count is zero the filter is disabled and the driver accepts
+ * all packets (promisc mode).
+ * If the filter is enabled in order to accept broadcast packets
+ * broadcast addr must be explicitly included in the addr list.
+ */
+#define TUN_FLT_ALLMULTI 0x0001 /* Accept all multicast packets */
+struct tun_filter {
+	__u16  flags; /* TUN_FLT_ flags see above */
+	__u16  count; /* Number of addresses */
+	__u8   addr[0][ETH_ALEN];
+};
+
+#endif /* _UAPI__IF_TUN_H */
