commit 1713cb37bf671e5d98919536941a8b56337874fd
Author: Kristian Evensen <kristian.evensen@gmail.com>
Date:   Wed Mar 27 11:16:03 2019 +0100

    fou: Support binding FoU socket
    
    An FoU socket is currently bound to the wildcard-address. While this
    works fine, there are several use-cases where the use of the
    wildcard-address is not desirable. For example, I use FoU on some
    multi-homed servers and would like to use FoU on only one of the
    interfaces.
    
    This commit adds support for binding FoU sockets to a given source
    address/interface, as well as connecting the socket to a given
    destination address/port. udp_tunnel already provides the required
    infrastructure, so most of the code added is for exposing and setting
    the different attributes (local address, peer address, etc.).
    
    The lookups performed when we add, delete or get an FoU-socket has also
    been updated to compare all the attributes a user can set. Since the
    comparison now involves several elements, I have added a separate
    comparison-function instead of open-coding.
    
    In order to test the code and ensure that the new comparison code works
    correctly, I started by creating a wildcard socket bound to port 1234 on
    my machine. I then tried to create a non-wildcarded socket bound to the
    same port, as well as fetching and deleting the socket (including source
    address, peer address or interface index in the netlink request).  Both
    the create, fetch and delete request failed. Deleting/fetching the
    socket was only successful when my netlink request attributes matched
    those used to create the socket.
    
    I then repeated the tests, but with a socket bound to a local ip
    address, a socket bound to a local address + interface, and a bound
    socket that was also «connected» to a peer. Add only worked when no
    socket with the matching source address/interface (or wildcard) existed,
    while fetch/delete was only successful when all attributes matched.
    
    In addition to testing that the new code work, I also checked that the
    current behavior is kept. If none of the new attributes are provided,
    then an FoU-socket is configured as before (i.e., wildcarded).  If any
    of the new attributes are provided, the FoU-socket is configured as
    expected.
    
    v1->v2:
    * Fixed building with IPv6 disabled (kbuild).
    * Fixed a return type warning and make the ugly comparison function more
    readable (kbuild).
    * Describe more in detail what has been tested (thanks David Miller).
    * Make peer port required if peer address is specified.
    
    Signed-off-by: Kristian Evensen <kristian.evensen@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

diff --git a/include/uapi/linux/fou.h b/include/uapi/linux/fou.h
index f2ea833a2812..87c2c9f08803 100644
--- a/include/uapi/linux/fou.h
+++ b/include/uapi/linux/fou.h
@@ -16,6 +16,12 @@ enum {
 	FOU_ATTR_IPPROTO,			/* u8 */
 	FOU_ATTR_TYPE,				/* u8 */
 	FOU_ATTR_REMCSUM_NOPARTIAL,		/* flag */
+	FOU_ATTR_LOCAL_V4,			/* u32 */
+	FOU_ATTR_LOCAL_V6,			/* in6_addr */
+	FOU_ATTR_PEER_V4,			/* u32 */
+	FOU_ATTR_PEER_V6,			/* in6_addr */
+	FOU_ATTR_PEER_PORT,			/* u16 */
+	FOU_ATTR_IFINDEX,			/* s32 */
 
 	__FOU_ATTR_MAX,
 };

commit 6f52b16c5b29b89d92c0e7236f4655dc8491ad70
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Wed Nov 1 15:08:43 2017 +0100

    License cleanup: add SPDX license identifier to uapi header files with no license
    
    Many user space API headers are missing licensing information, which
    makes it hard for compliance tools to determine the correct license.
    
    By default are files without license information under the default
    license of the kernel, which is GPLV2.  Marking them GPLV2 would exclude
    them from being included in non GPLV2 code, which is obviously not
    intended. The user space API headers fall under the syscall exception
    which is in the kernels COPYING file:
    
       NOTE! This copyright does *not* cover user programs that use kernel
       services by normal system calls - this is merely considered normal use
       of the kernel, and does *not* fall under the heading of "derived work".
    
    otherwise syscall usage would not be possible.
    
    Update the files which contain no license information with an SPDX
    license identifier.  The chosen identifier is 'GPL-2.0 WITH
    Linux-syscall-note' which is the officially assigned identifier for the
    Linux syscall exception.  SPDX license identifiers are a legally binding
    shorthand, which can be used instead of the full boiler plate text.
    
    This patch is based on work done by Thomas Gleixner and Kate Stewart and
    Philippe Ombredanne.  See the previous patch in this series for the
    methodology of how this patch was researched.
    
    Reviewed-by: Kate Stewart <kstewart@linuxfoundation.org>
    Reviewed-by: Philippe Ombredanne <pombredanne@nexb.com>
    Reviewed-by: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/include/uapi/linux/fou.h b/include/uapi/linux/fou.h
index d2947c52dc67..f2ea833a2812 100644
--- a/include/uapi/linux/fou.h
+++ b/include/uapi/linux/fou.h
@@ -1,3 +1,4 @@
+/* SPDX-License-Identifier: GPL-2.0 WITH Linux-syscall-note */
 /* fou.h - FOU Interface */
 
 #ifndef _UAPI_LINUX_FOU_H

commit 7a6c8c34e5b71ac50e39588e20b39494a9e1d8e5
Author: WANG Cong <xiyou.wangcong@gmail.com>
Date:   Fri Apr 10 12:00:30 2015 -0700

    fou: implement FOU_CMD_GET
    
    Cc: Tom Herbert <tom@herbertland.com>
    Signed-off-by: Cong Wang <xiyou.wangcong@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

diff --git a/include/uapi/linux/fou.h b/include/uapi/linux/fou.h
index c303588bb767..d2947c52dc67 100644
--- a/include/uapi/linux/fou.h
+++ b/include/uapi/linux/fou.h
@@ -25,6 +25,7 @@ enum {
 	FOU_CMD_UNSPEC,
 	FOU_CMD_ADD,
 	FOU_CMD_DEL,
+	FOU_CMD_GET,
 
 	__FOU_CMD_MAX,
 };

commit fe881ef11cf0220f118816181930494d484c4883
Author: Tom Herbert <therbert@google.com>
Date:   Tue Feb 10 16:30:33 2015 -0800

    gue: Use checksum partial with remote checksum offload
    
    Change remote checksum handling to set checksum partial as default
    behavior. Added an iflink parameter to configure not using
    checksum partial (calling csum_partial to update checksum).
    
    Signed-off-by: Tom Herbert <therbert@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

diff --git a/include/uapi/linux/fou.h b/include/uapi/linux/fou.h
index 8df06894da23..c303588bb767 100644
--- a/include/uapi/linux/fou.h
+++ b/include/uapi/linux/fou.h
@@ -14,6 +14,7 @@ enum {
 	FOU_ATTR_AF,				/* u8 */
 	FOU_ATTR_IPPROTO,			/* u8 */
 	FOU_ATTR_TYPE,				/* u8 */
+	FOU_ATTR_REMCSUM_NOPARTIAL,		/* flag */
 
 	__FOU_ATTR_MAX,
 };

commit 37dd0247797b168ad1cc7f5dbec825a1ee66535b
Author: Tom Herbert <therbert@google.com>
Date:   Fri Oct 3 15:48:09 2014 -0700

    gue: Receive side for Generic UDP Encapsulation
    
    This patch adds support receiving for GUE packets in the fou module. The
    fou module now supports direct foo-over-udp (no encapsulation header)
    and GUE. To support this a type parameter is added to the fou netlink
    parameters.
    
    For a GUE socket we define gue_udp_recv, gue_gro_receive, and
    gue_gro_complete to handle the specifics of the GUE protocol. Most
    of the code to manage and configure sockets is common with the fou.
    
    Signed-off-by: Tom Herbert <therbert@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

diff --git a/include/uapi/linux/fou.h b/include/uapi/linux/fou.h
index e03376de453d..8df06894da23 100644
--- a/include/uapi/linux/fou.h
+++ b/include/uapi/linux/fou.h
@@ -13,6 +13,7 @@ enum {
 	FOU_ATTR_PORT,				/* u16 */
 	FOU_ATTR_AF,				/* u8 */
 	FOU_ATTR_IPPROTO,			/* u8 */
+	FOU_ATTR_TYPE,				/* u8 */
 
 	__FOU_ATTR_MAX,
 };
@@ -27,6 +28,12 @@ enum {
 	__FOU_CMD_MAX,
 };
 
+enum {
+	FOU_ENCAP_UNSPEC,
+	FOU_ENCAP_DIRECT,
+	FOU_ENCAP_GUE,
+};
+
 #define FOU_CMD_MAX	(__FOU_CMD_MAX - 1)
 
 #endif /* _UAPI_LINUX_FOU_H */

commit 23461551c00628c3f3fe9cf837bf53cf8f212b63
Author: Tom Herbert <therbert@google.com>
Date:   Wed Sep 17 12:25:56 2014 -0700

    fou: Support for foo-over-udp RX path
    
    This patch provides a receive path for foo-over-udp. This allows
    direct encapsulation of IP protocols over UDP. The bound destination
    port is used to map to an IP protocol, and the XFRM framework
    (udp_encap_rcv) is used to receive encapsulated packets. Upon
    reception, the encapsulation header is logically removed (pointer
    to transport header is advanced) and the packet is reinjected into
    the receive path with the IP protocol indicated by the mapping.
    
    Netlink is used to configure FOU ports. The configuration information
    includes the port number to bind to and the IP protocol corresponding
    to that port.
    
    This should support GRE/UDP
    (http://tools.ietf.org/html/draft-yong-tsvwg-gre-in-udp-encap-02),
    as will as the other IP tunneling protocols (IPIP, SIT).
    
    Signed-off-by: Tom Herbert <therbert@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

diff --git a/include/uapi/linux/fou.h b/include/uapi/linux/fou.h
new file mode 100644
index 000000000000..e03376de453d
--- /dev/null
+++ b/include/uapi/linux/fou.h
@@ -0,0 +1,32 @@
+/* fou.h - FOU Interface */
+
+#ifndef _UAPI_LINUX_FOU_H
+#define _UAPI_LINUX_FOU_H
+
+/* NETLINK_GENERIC related info
+ */
+#define FOU_GENL_NAME		"fou"
+#define FOU_GENL_VERSION	0x1
+
+enum {
+	FOU_ATTR_UNSPEC,
+	FOU_ATTR_PORT,				/* u16 */
+	FOU_ATTR_AF,				/* u8 */
+	FOU_ATTR_IPPROTO,			/* u8 */
+
+	__FOU_ATTR_MAX,
+};
+
+#define FOU_ATTR_MAX		(__FOU_ATTR_MAX - 1)
+
+enum {
+	FOU_CMD_UNSPEC,
+	FOU_CMD_ADD,
+	FOU_CMD_DEL,
+
+	__FOU_CMD_MAX,
+};
+
+#define FOU_CMD_MAX	(__FOU_CMD_MAX - 1)
+
+#endif /* _UAPI_LINUX_FOU_H */
