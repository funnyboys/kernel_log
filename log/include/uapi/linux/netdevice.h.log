commit e2be04c7f9958dde770eeb8b30e829ca969b37bb
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Wed Nov 1 15:09:13 2017 +0100

    License cleanup: add SPDX license identifier to uapi header files with a license
    
    Many user space API headers have licensing information, which is either
    incomplete, badly formatted or just a shorthand for referring to the
    license under which the file is supposed to be.  This makes it hard for
    compliance tools to determine the correct license.
    
    Update these files with an SPDX license identifier.  The identifier was
    chosen based on the license information in the file.
    
    GPL/LGPL licensed headers get the matching GPL/LGPL SPDX license
    identifier with the added 'WITH Linux-syscall-note' exception, which is
    the officially assigned exception identifier for the kernel syscall
    exception:
    
       NOTE! This copyright does *not* cover user programs that use kernel
       services by normal system calls - this is merely considered normal use
       of the kernel, and does *not* fall under the heading of "derived work".
    
    This exception makes it possible to include GPL headers into non GPL
    code, without confusing license compliance tools.
    
    Headers which have either explicit dual licensing or are just licensed
    under a non GPL license are updated with the corresponding SPDX
    identifier and the GPLv2 with syscall exception identifier.  The format
    is:
            ((GPL-2.0 WITH Linux-syscall-note) OR SPDX-ID-OF-OTHER-LICENSE)
    
    SPDX license identifiers are a legally binding shorthand, which can be
    used instead of the full boiler plate text.  The update does not remove
    existing license information as this has to be done on a case by case
    basis and the copyright holders might have to be consulted. This will
    happen in a separate step.
    
    This patch is based on work done by Thomas Gleixner and Kate Stewart and
    Philippe Ombredanne.  See the previous patch in this series for the
    methodology of how this patch was researched.
    
    Reviewed-by: Kate Stewart <kstewart@linuxfoundation.org>
    Reviewed-by: Philippe Ombredanne <pombredanne@nexb.com>
    Reviewed-by: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/include/uapi/linux/netdevice.h b/include/uapi/linux/netdevice.h
index 55818543342d..f3770c5b0fac 100644
--- a/include/uapi/linux/netdevice.h
+++ b/include/uapi/linux/netdevice.h
@@ -1,3 +1,4 @@
+/* SPDX-License-Identifier: GPL-2.0+ WITH Linux-syscall-note */
 /*
  * INET		An implementation of the TCP/IP protocol suite for the LINUX
  *		operating system.  INET is implemented using the  BSD Socket

commit 685343fc3ba61a1f6eef361b786601123db16c28
Author: Tom Gundersen <teg@jklm.no>
Date:   Mon Jul 14 16:37:22 2014 +0200

    net: add name_assign_type netdev attribute
    
    Based on a patch by David Herrmann.
    
    The name_assign_type attribute gives hints where the interface name of a
    given net-device comes from. These values are currently defined:
      NET_NAME_ENUM:
        The ifname is provided by the kernel with an enumerated
        suffix, typically based on order of discovery. Names may
        be reused and unpredictable.
      NET_NAME_PREDICTABLE:
        The ifname has been assigned by the kernel in a predictable way
        that is guaranteed to avoid reuse and always be the same for a
        given device. Examples include statically created devices like
        the loopback device and names deduced from hardware properties
        (including being given explicitly by the firmware). Names
        depending on the order of discovery, or in any other way on the
        existence of other devices, must not be marked as PREDICTABLE.
      NET_NAME_USER:
        The ifname was provided by user-space during net-device setup.
      NET_NAME_RENAMED:
        The net-device has been renamed from userspace. Once this type is set,
        it cannot change again.
      NET_NAME_UNKNOWN:
        This is an internal placeholder to indicate that we yet haven't yet
        categorized the name. It will not be exposed to userspace, rather
        -EINVAL is returned.
    
    The aim of these patches is to improve user-space renaming of interfaces. As
    a general rule, userspace must rename interfaces to guarantee that names stay
    the same every time a given piece of hardware appears (at boot, or when
    attaching it). However, there are several situations where userspace should
    not perform the renaming, and that depends on both the policy of the local
    admin, but crucially also on the nature of the current interface name.
    
    If an interface was created in repsonse to a userspace request, and userspace
    already provided a name, we most probably want to leave that name alone. The
    main instance of this is wifi-P2P devices created over nl80211, which currently
    have a long-standing bug where they are getting renamed by udev. We label such
    names NET_NAME_USER.
    
    If an interface, unbeknown to us, has already been renamed from userspace, we
    most probably want to leave also that alone. This will typically happen when
    third-party plugins (for instance to udev, but the interface is generic so could
    be from anywhere) renames the interface without informing udev about it. A
    typical situation is when you switch root from an installer or an initrd to the
    real system and the new instance of udev does not know what happened before
    the switch. These types of problems have caused repeated issues in the past. To
    solve this, once an interface has been renamed, its name is labelled
    NET_NAME_RENAMED.
    
    In many cases, the kernel is actually able to name interfaces in such a
    way that there is no need for userspace to rename them. This is the case when
    the enumeration order of devices, or in fact any other (non-parent) device on
    the system, can not influence the name of the interface. Examples include
    statically created devices, or any naming schemes based on hardware properties
    of the interface. In this case the admin may prefer to use the kernel-provided
    names, and to make that possible we label such names NET_NAME_PREDICTABLE.
    We want the kernel to have tho possibilty of performing predictable interface
    naming itself (and exposing to userspace that it has), as the information
    necessary for a proper naming scheme for a certain class of devices may not
    be exposed to userspace.
    
    The case where renaming is almost certainly desired, is when the kernel has
    given the interface a name using global device enumeration based on order of
    discovery (ethX, wlanY, etc). These naming schemes are labelled NET_NAME_ENUM.
    
    Lastly, a fallback is left as NET_NAME_UNKNOWN, to indicate that a driver has
    not yet been ported. This is mostly useful as a transitionary measure, allowing
    us to label the various naming schemes bit by bit.
    
    v8: minor documentation fixes
    v9: move comment to the right commit
    
    Signed-off-by: Tom Gundersen <teg@jklm.no>
    Reviewed-by: David Herrmann <dh.herrmann@gmail.com>
    Reviewed-by: Kay Sievers <kay@vrfy.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>

diff --git a/include/uapi/linux/netdevice.h b/include/uapi/linux/netdevice.h
index fdfbd1c17065..55818543342d 100644
--- a/include/uapi/linux/netdevice.h
+++ b/include/uapi/linux/netdevice.h
@@ -37,6 +37,12 @@
 #define INIT_NETDEV_GROUP	0
 
 
+/* interface name assignment types (sysfs name_assign_type attribute) */
+#define NET_NAME_UNKNOWN	0	/* unknown origin (not exposed to userspace) */
+#define NET_NAME_ENUM		1	/* enumerated by kernel */
+#define NET_NAME_PREDICTABLE	2	/* predictably named by the kernel */
+#define NET_NAME_USER		3	/* provided by user-space */
+#define NET_NAME_RENAMED	4	/* renamed by user-space */
 
 /* Media selection options. */
 enum {

commit 339e022396d58f4b4f9b4200ea5309768934bb33
Author: Florian Fainelli <f.fainelli@gmail.com>
Date:   Fri Mar 28 14:25:58 2014 -0700

    net: export NET_ADDR_* values to user-space API
    
    NET_ADDR_* values are exported in the
    /sys/class/net/<iface>/addr_assign_type sysfs attributes, and as such
    constitutes an user-space ABI. Move the NET_ADDR_* definitions from
    include/linux/netdevice.h to include/uapi/linux/netdevice.h
    
    Signed-off-by: Florian Fainelli <f.fainelli@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

diff --git a/include/uapi/linux/netdevice.h b/include/uapi/linux/netdevice.h
index 6b9500bc2d56..fdfbd1c17065 100644
--- a/include/uapi/linux/netdevice.h
+++ b/include/uapi/linux/netdevice.h
@@ -49,5 +49,11 @@ enum {
         IF_PORT_100BASEFX
 };
 
+/* hardware address assignment types */
+#define NET_ADDR_PERM		0	/* address is permanent (default) */
+#define NET_ADDR_RANDOM		1	/* address is generated randomly */
+#define NET_ADDR_STOLEN		2	/* address is stolen from other device */
+#define NET_ADDR_SET		3	/* address is set using
+					 * dev_set_mac_address() */
 
 #endif /* _UAPI_LINUX_NETDEVICE_H */

commit 607ca46e97a1b6594b29647d98a32d545c24bdff
Author: David Howells <dhowells@redhat.com>
Date:   Sat Oct 13 10:46:48 2012 +0100

    UAPI: (Scripted) Disintegrate include/linux
    
    Signed-off-by: David Howells <dhowells@redhat.com>
    Acked-by: Arnd Bergmann <arnd@arndb.de>
    Acked-by: Thomas Gleixner <tglx@linutronix.de>
    Acked-by: Michael Kerrisk <mtk.manpages@gmail.com>
    Acked-by: Paul E. McKenney <paulmck@linux.vnet.ibm.com>
    Acked-by: Dave Jones <davej@redhat.com>

diff --git a/include/uapi/linux/netdevice.h b/include/uapi/linux/netdevice.h
new file mode 100644
index 000000000000..6b9500bc2d56
--- /dev/null
+++ b/include/uapi/linux/netdevice.h
@@ -0,0 +1,53 @@
+/*
+ * INET		An implementation of the TCP/IP protocol suite for the LINUX
+ *		operating system.  INET is implemented using the  BSD Socket
+ *		interface as the means of communication with the user level.
+ *
+ *		Definitions for the Interfaces handler.
+ *
+ * Version:	@(#)dev.h	1.0.10	08/12/93
+ *
+ * Authors:	Ross Biro
+ *		Fred N. van Kempen, <waltje@uWalt.NL.Mugnet.ORG>
+ *		Corey Minyard <wf-rch!minyard@relay.EU.net>
+ *		Donald J. Becker, <becker@cesdis.gsfc.nasa.gov>
+ *		Alan Cox, <alan@lxorguk.ukuu.org.uk>
+ *		Bjorn Ekwall. <bj0rn@blox.se>
+ *              Pekka Riikonen <priikone@poseidon.pspt.fi>
+ *
+ *		This program is free software; you can redistribute it and/or
+ *		modify it under the terms of the GNU General Public License
+ *		as published by the Free Software Foundation; either version
+ *		2 of the License, or (at your option) any later version.
+ *
+ *		Moved to /usr/include/linux for NET3
+ */
+#ifndef _UAPI_LINUX_NETDEVICE_H
+#define _UAPI_LINUX_NETDEVICE_H
+
+#include <linux/if.h>
+#include <linux/if_ether.h>
+#include <linux/if_packet.h>
+#include <linux/if_link.h>
+
+
+#define MAX_ADDR_LEN	32		/* Largest hardware address length */
+
+/* Initial net device group. All devices belong to group 0 by default. */
+#define INIT_NETDEV_GROUP	0
+
+
+
+/* Media selection options. */
+enum {
+        IF_PORT_UNKNOWN = 0,
+        IF_PORT_10BASE2,
+        IF_PORT_10BASET,
+        IF_PORT_AUI,
+        IF_PORT_100BASET,
+        IF_PORT_100BASETX,
+        IF_PORT_100BASEFX
+};
+
+
+#endif /* _UAPI_LINUX_NETDEVICE_H */
