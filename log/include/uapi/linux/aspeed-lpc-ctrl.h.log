commit e2be04c7f9958dde770eeb8b30e829ca969b37bb
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Wed Nov 1 15:09:13 2017 +0100

    License cleanup: add SPDX license identifier to uapi header files with a license
    
    Many user space API headers have licensing information, which is either
    incomplete, badly formatted or just a shorthand for referring to the
    license under which the file is supposed to be.  This makes it hard for
    compliance tools to determine the correct license.
    
    Update these files with an SPDX license identifier.  The identifier was
    chosen based on the license information in the file.
    
    GPL/LGPL licensed headers get the matching GPL/LGPL SPDX license
    identifier with the added 'WITH Linux-syscall-note' exception, which is
    the officially assigned exception identifier for the kernel syscall
    exception:
    
       NOTE! This copyright does *not* cover user programs that use kernel
       services by normal system calls - this is merely considered normal use
       of the kernel, and does *not* fall under the heading of "derived work".
    
    This exception makes it possible to include GPL headers into non GPL
    code, without confusing license compliance tools.
    
    Headers which have either explicit dual licensing or are just licensed
    under a non GPL license are updated with the corresponding SPDX
    identifier and the GPLv2 with syscall exception identifier.  The format
    is:
            ((GPL-2.0 WITH Linux-syscall-note) OR SPDX-ID-OF-OTHER-LICENSE)
    
    SPDX license identifiers are a legally binding shorthand, which can be
    used instead of the full boiler plate text.  The update does not remove
    existing license information as this has to be done on a case by case
    basis and the copyright holders might have to be consulted. This will
    happen in a separate step.
    
    This patch is based on work done by Thomas Gleixner and Kate Stewart and
    Philippe Ombredanne.  See the previous patch in this series for the
    methodology of how this patch was researched.
    
    Reviewed-by: Kate Stewart <kstewart@linuxfoundation.org>
    Reviewed-by: Philippe Ombredanne <pombredanne@nexb.com>
    Reviewed-by: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/include/uapi/linux/aspeed-lpc-ctrl.h b/include/uapi/linux/aspeed-lpc-ctrl.h
index c328c976c684..53abffcde3c6 100644
--- a/include/uapi/linux/aspeed-lpc-ctrl.h
+++ b/include/uapi/linux/aspeed-lpc-ctrl.h
@@ -1,3 +1,4 @@
+/* SPDX-License-Identifier: GPL-2.0+ WITH Linux-syscall-note */
 /*
  * Copyright 2017 IBM Corp.
  *

commit f580ff0e404e5aad83f02093cd22f2475cad6e71
Author: Arnd Bergmann <arnd@arndb.de>
Date:   Tue Mar 28 16:10:32 2017 +0200

    aspeed-lpc-ctrl: include linux/types.h for uapi header
    
    The newly added header file triggers a sanity check:
    
    usr/include/linux/aspeed-lpc-ctrl.h:44: found __[us]{8,16,32,64} type without #include <linux/types.h>
    
    We should include linux/types.h explicitly to ensure the header
    can be included from user space.
    
    Fixes: 6c4e97678501 ("drivers/misc: Add Aspeed LPC control driver")
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>
    Acked-by: Joel Stanley <joel@jms.id.au>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/include/uapi/linux/aspeed-lpc-ctrl.h b/include/uapi/linux/aspeed-lpc-ctrl.h
index f96fa995a3f0..c328c976c684 100644
--- a/include/uapi/linux/aspeed-lpc-ctrl.h
+++ b/include/uapi/linux/aspeed-lpc-ctrl.h
@@ -11,6 +11,7 @@
 #define _UAPI_LINUX_ASPEED_LPC_CTRL_H
 
 #include <linux/ioctl.h>
+#include <linux/types.h>
 
 /* Window types */
 #define ASPEED_LPC_CTRL_WINDOW_FLASH	1

commit 6c4e976785011dfbe461821d0bfc58cfd60eac56
Author: Cyril Bur <cyrilbur@gmail.com>
Date:   Fri Feb 17 14:28:49 2017 +1100

    drivers/misc: Add Aspeed LPC control driver
    
    In order to manage server systems, there is typically another processor
    known as a BMC (Baseboard Management Controller) which is responsible
    for powering the server and other various elements, sometimes fans,
    often the system flash.
    
    The Aspeed BMC family which is what is used on OpenPOWER machines and a
    number of x86 as well is typically connected to the host via an LPC
    (Low Pin Count) bus (among others).
    
    The LPC bus is an ISA bus on steroids. It's generally used by the
    BMC chip to provide the host with access to the system flash (via MEM/FW
    cycles) that contains the BIOS or other host firmware along with a
    number of SuperIO-style IOs (via IO space) such as UARTs, IPMI
    controllers.
    
    On the BMC chip side, this is all configured via a bunch of registers
    whose content is related to a given policy of what devices are exposed
    at a per system level, which is system/vendor specific, so we don't want
    to bolt that into the BMC kernel. This started with a need to provide
    something nicer than /dev/mem for user space to configure these things.
    
    One important aspect of the configuration is how the MEM/FW space is
    exposed to the host (ie, the x86 or POWER). Some registers in that
    bridge can define a window remapping all or portion of the LPC MEM/FW
    space to a portion of the BMC internal bus, with no specific limits
    imposed in HW.
    
    I think it makes sense to ensure that this window is configured by a
    kernel driver that can apply some serious sanity checks on what it is
    configured to map.
    
    In practice, user space wants to control this by flipping the mapping
    between essentially two types of portions of the BMC address space:
    
       - The flash space. This is a region of the BMC MMIO space that
    more/less directly maps the system flash (at least for reads, writes
    are somewhat more complicated).
    
       - One (or more) reserved area(s) of the BMC physical memory.
    
    The latter is needed for a number of things, such as avoiding letting
    the host manipulate the innards of the BMC flash controller via some
    evil backdoor, we want to do flash updates by routing the window to a
    portion of memory (under control of a mailbox protocol via some
    separate set of registers) which the host can use to write new data in
    bulk and then request the BMC to flash it. There are other uses, such
    as allowing the host to boot from an in-memory flash image rather than
    the one in flash (very handy for continuous integration and test, the
    BMC can just download new images).
    
    It is important to note that due to the way the Aspeed chip lets the
    kernel configure the mapping between host LPC addresses and BMC ram
    addresses the offset within the window must be a multiple of size.
    Not doing so will fragment the accessible space rather than simply
    moving 'zero' upwards. This is caused by the nature of HICR8 being a
    mask and the way host LPC addresses are translated.
    
    Signed-off-by: Cyril Bur <cyrilbur@gmail.com>
    Reviewed-by: Joel Stanley <joel@jms.id.au>
    Reviewed-by: Benjamin Herrenschmidt <benh@kernel.crashing.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/include/uapi/linux/aspeed-lpc-ctrl.h b/include/uapi/linux/aspeed-lpc-ctrl.h
new file mode 100644
index 000000000000..f96fa995a3f0
--- /dev/null
+++ b/include/uapi/linux/aspeed-lpc-ctrl.h
@@ -0,0 +1,60 @@
+/*
+ * Copyright 2017 IBM Corp.
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License
+ * as published by the Free Software Foundation; either version
+ * 2 of the License, or (at your option) any later version.
+ */
+
+#ifndef _UAPI_LINUX_ASPEED_LPC_CTRL_H
+#define _UAPI_LINUX_ASPEED_LPC_CTRL_H
+
+#include <linux/ioctl.h>
+
+/* Window types */
+#define ASPEED_LPC_CTRL_WINDOW_FLASH	1
+#define ASPEED_LPC_CTRL_WINDOW_MEMORY	2
+
+/*
+ * This driver provides a window for the host to access a BMC resource
+ * across the BMC <-> Host LPC bus.
+ *
+ * window_type: The BMC resource that the host will access through the
+ * window. BMC flash and BMC RAM.
+ *
+ * window_id: For each window type there may be multiple windows,
+ * these are referenced by ID.
+ *
+ * flags: Reserved for future use, this field is expected to be
+ * zeroed.
+ *
+ * addr: Address on the host LPC bus that the specified window should
+ * be mapped. This address must be power of two aligned.
+ *
+ * offset: Offset into the BMC window that should be mapped to the
+ * host (at addr). This must be a multiple of size.
+ *
+ * size: The size of the mapping. The smallest possible size is 64K.
+ * This must be power of two aligned.
+ *
+ */
+
+struct aspeed_lpc_ctrl_mapping {
+	__u8	window_type;
+	__u8	window_id;
+	__u16	flags;
+	__u32	addr;
+	__u32	offset;
+	__u32	size;
+};
+
+#define __ASPEED_LPC_CTRL_IOCTL_MAGIC	0xb2
+
+#define ASPEED_LPC_CTRL_IOCTL_GET_SIZE	_IOWR(__ASPEED_LPC_CTRL_IOCTL_MAGIC, \
+		0x00, struct aspeed_lpc_ctrl_mapping)
+
+#define ASPEED_LPC_CTRL_IOCTL_MAP	_IOW(__ASPEED_LPC_CTRL_IOCTL_MAGIC, \
+		0x01, struct aspeed_lpc_ctrl_mapping)
+
+#endif /* _UAPI_LINUX_ASPEED_LPC_CTRL_H */
