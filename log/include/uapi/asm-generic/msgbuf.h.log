commit 9ef0e004181956e158fb7ceb9b43810a193f80cd
Author: Masahiro Yamada <yamada.masahiro@socionext.com>
Date:   Wed Dec 4 16:53:00 2019 -0800

    arch: msgbuf.h: make uapi asm/msgbuf.h self-contained
    
    Userspace cannot compile <asm/msgbuf.h> due to some missing type
    definitions.  For example, building it for x86 fails as follows:
    
        CC      usr/include/asm/msgbuf.h.s
      In file included from usr/include/asm/msgbuf.h:6:0,
                       from <command-line>:32:
      usr/include/asm-generic/msgbuf.h:25:20: error: field `msg_perm' has incomplete type
        struct ipc64_perm msg_perm;
                          ^~~~~~~~
      usr/include/asm-generic/msgbuf.h:27:2: error: unknown type name `__kernel_time_t'
        __kernel_time_t msg_stime; /* last msgsnd time */
        ^~~~~~~~~~~~~~~
      usr/include/asm-generic/msgbuf.h:28:2: error: unknown type name `__kernel_time_t'
        __kernel_time_t msg_rtime; /* last msgrcv time */
        ^~~~~~~~~~~~~~~
      usr/include/asm-generic/msgbuf.h:29:2: error: unknown type name `__kernel_time_t'
        __kernel_time_t msg_ctime; /* last change time */
        ^~~~~~~~~~~~~~~
      usr/include/asm-generic/msgbuf.h:41:2: error: unknown type name `__kernel_pid_t'
        __kernel_pid_t msg_lspid; /* pid of last msgsnd */
        ^~~~~~~~~~~~~~
      usr/include/asm-generic/msgbuf.h:42:2: error: unknown type name `__kernel_pid_t'
        __kernel_pid_t msg_lrpid; /* last receive pid */
        ^~~~~~~~~~~~~~
    
    It is just a matter of missing include directive.
    
    Include <asm/ipcbuf.h> to make it self-contained, and add it to
    the compile-test coverage.
    
    Link: http://lkml.kernel.org/r/20191030063855.9989-2-yamada.masahiro@socionext.com
    Signed-off-by: Masahiro Yamada <yamada.masahiro@socionext.com>
    Cc: Arnd Bergmann <arnd@arndb.de>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

diff --git a/include/uapi/asm-generic/msgbuf.h b/include/uapi/asm-generic/msgbuf.h
index af95aa89012e..6504d7b741ce 100644
--- a/include/uapi/asm-generic/msgbuf.h
+++ b/include/uapi/asm-generic/msgbuf.h
@@ -3,6 +3,8 @@
 #define __ASM_GENERIC_MSGBUF_H
 
 #include <asm/bitsperlong.h>
+#include <asm/ipcbuf.h>
+
 /*
  * generic msqid64_ds structure.
  *

commit caf5e32d4ea7253820f38dd7c429f8d4a8019c5f
Author: Arnd Bergmann <arnd@arndb.de>
Date:   Mon Nov 4 21:17:26 2019 +0100

    y2038: ipc: remove __kernel_time_t reference from headers
    
    There are two structures based on time_t that conflict between libc and
    kernel: timeval and timespec. Both are now renamed to __kernel_old_timeval
    and __kernel_old_timespec.
    
    For time_t, the old typedef is still __kernel_time_t. There is nothing
    wrong with that name, but it would be nice to not use that going forward
    as this type is used almost only in deprecated interfaces because of
    the y2038 overflow.
    
    In the IPC headers (msgbuf.h, sembuf.h, shmbuf.h), __kernel_time_t is only
    used for the 64-bit variants, which are not deprecated.
    
    Change these to a plain 'long', which is the same type as __kernel_time_t
    on all 64-bit architectures anyway, to reduce the number of users of the
    old type.
    
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>

diff --git a/include/uapi/asm-generic/msgbuf.h b/include/uapi/asm-generic/msgbuf.h
index 9fe4881557cb..af95aa89012e 100644
--- a/include/uapi/asm-generic/msgbuf.h
+++ b/include/uapi/asm-generic/msgbuf.h
@@ -13,9 +13,9 @@
  * everyone just ended up making identical copies without specific
  * optimizations, so we may just as well all use the same one.
  *
- * 64 bit architectures typically define a 64 bit __kernel_time_t,
- * so they do not need the first three padding words.
- * On big-endian systems, the padding is in the wrong place.
+ * 64 bit architectures use a 64-bit long time field here, while
+ * 32 bit architectures have a pair of unsigned long values.
+ * On big-endian systems, the lower half is in the wrong place.
  *
  * Pad space is left for:
  * - 2 miscellaneous 32-bit values
@@ -24,9 +24,9 @@
 struct msqid64_ds {
 	struct ipc64_perm msg_perm;
 #if __BITS_PER_LONG == 64
-	__kernel_time_t msg_stime;	/* last msgsnd time */
-	__kernel_time_t msg_rtime;	/* last msgrcv time */
-	__kernel_time_t msg_ctime;	/* last change time */
+	long		 msg_stime;	/* last msgsnd time */
+	long		 msg_rtime;	/* last msgrcv time */
+	long		 msg_ctime;	/* last change time */
 #else
 	unsigned long	msg_stime;	/* last msgsnd time */
 	unsigned long	msg_stime_high;

commit f991f01571281b82e5e6ca74445f5d3f42d72212
Author: Arnd Bergmann <arnd@arndb.de>
Date:   Tue May 5 23:13:15 2015 +0200

    y2038: asm-generic: Extend sysvipc data structures
    
    Most architectures now use the asm-generic copy of the sysvipc data
    structures (msqid64_ds, semid64_ds, shmid64_ds), which use 32-bit
    __kernel_time_t on 32-bit architectures but have padding behind them to
    allow extending the type to 64-bit.
    
    Unfortunately, that fails on all big-endian architectures, which have the
    padding on the wrong side. As so many of them get it wrong, we decided to
    not bother even trying to fix it up when we introduced the asm-generic
    copy. Instead we always use the padding word now to provide the upper
    32 bits of the seconds value, regardless of the endianess.
    
    A libc implementation on a typical big-endian system can deal with
    this by providing its own copy of the structure definition to user
    space, and swapping the two 32-bit words before returning from the
    semctl/shmctl/msgctl system calls.
    
    Note that msqid64_ds and shmid64_ds were broken on x32 since commit
    f4b4aae18288 ("x86/headers/uapi: Fix __BITS_PER_LONG value for x32
    builds"). I have sent a separate fix for that, but as we no longer
    have to worry about x32 here, I no longer worry about x32 here and
    use 'unsigned long' instead of __kernel_ulong_t.
    
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>

diff --git a/include/uapi/asm-generic/msgbuf.h b/include/uapi/asm-generic/msgbuf.h
index fb306ebdb36f..9fe4881557cb 100644
--- a/include/uapi/asm-generic/msgbuf.h
+++ b/include/uapi/asm-generic/msgbuf.h
@@ -18,31 +18,30 @@
  * On big-endian systems, the padding is in the wrong place.
  *
  * Pad space is left for:
- * - 64-bit time_t to solve y2038 problem
  * - 2 miscellaneous 32-bit values
  */
 
 struct msqid64_ds {
 	struct ipc64_perm msg_perm;
+#if __BITS_PER_LONG == 64
 	__kernel_time_t msg_stime;	/* last msgsnd time */
-#if __BITS_PER_LONG != 64
-	unsigned long	__unused1;
-#endif
 	__kernel_time_t msg_rtime;	/* last msgrcv time */
-#if __BITS_PER_LONG != 64
-	unsigned long	__unused2;
-#endif
 	__kernel_time_t msg_ctime;	/* last change time */
-#if __BITS_PER_LONG != 64
-	unsigned long	__unused3;
+#else
+	unsigned long	msg_stime;	/* last msgsnd time */
+	unsigned long	msg_stime_high;
+	unsigned long	msg_rtime;	/* last msgrcv time */
+	unsigned long	msg_rtime_high;
+	unsigned long	msg_ctime;	/* last change time */
+	unsigned long	msg_ctime_high;
 #endif
-	__kernel_ulong_t msg_cbytes;	/* current number of bytes on queue */
-	__kernel_ulong_t msg_qnum;	/* number of messages in queue */
-	__kernel_ulong_t msg_qbytes;	/* max number of bytes on queue */
+	unsigned long	msg_cbytes;	/* current number of bytes on queue */
+	unsigned long	msg_qnum;	/* number of messages in queue */
+	unsigned long	 msg_qbytes;	/* max number of bytes on queue */
 	__kernel_pid_t msg_lspid;	/* pid of last msgsnd */
 	__kernel_pid_t msg_lrpid;	/* last receive pid */
-	__kernel_ulong_t __unused4;
-	__kernel_ulong_t __unused5;
+	unsigned long	 __unused4;
+	unsigned long	 __unused5;
 };
 
 #endif /* __ASM_GENERIC_MSGBUF_H */

commit 6f52b16c5b29b89d92c0e7236f4655dc8491ad70
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Wed Nov 1 15:08:43 2017 +0100

    License cleanup: add SPDX license identifier to uapi header files with no license
    
    Many user space API headers are missing licensing information, which
    makes it hard for compliance tools to determine the correct license.
    
    By default are files without license information under the default
    license of the kernel, which is GPLV2.  Marking them GPLV2 would exclude
    them from being included in non GPLV2 code, which is obviously not
    intended. The user space API headers fall under the syscall exception
    which is in the kernels COPYING file:
    
       NOTE! This copyright does *not* cover user programs that use kernel
       services by normal system calls - this is merely considered normal use
       of the kernel, and does *not* fall under the heading of "derived work".
    
    otherwise syscall usage would not be possible.
    
    Update the files which contain no license information with an SPDX
    license identifier.  The chosen identifier is 'GPL-2.0 WITH
    Linux-syscall-note' which is the officially assigned identifier for the
    Linux syscall exception.  SPDX license identifiers are a legally binding
    shorthand, which can be used instead of the full boiler plate text.
    
    This patch is based on work done by Thomas Gleixner and Kate Stewart and
    Philippe Ombredanne.  See the previous patch in this series for the
    methodology of how this patch was researched.
    
    Reviewed-by: Kate Stewart <kstewart@linuxfoundation.org>
    Reviewed-by: Philippe Ombredanne <pombredanne@nexb.com>
    Reviewed-by: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/include/uapi/asm-generic/msgbuf.h b/include/uapi/asm-generic/msgbuf.h
index f55ecc43c60f..fb306ebdb36f 100644
--- a/include/uapi/asm-generic/msgbuf.h
+++ b/include/uapi/asm-generic/msgbuf.h
@@ -1,3 +1,4 @@
+/* SPDX-License-Identifier: GPL-2.0 WITH Linux-syscall-note */
 #ifndef __ASM_GENERIC_MSGBUF_H
 #define __ASM_GENERIC_MSGBUF_H
 

commit b9cd5ca22d6739c61655d4fcf8b29669d5d177a3
Author: H.J. Lu <hjl.tools@gmail.com>
Date:   Fri Dec 27 14:14:21 2013 -0800

    uapi: Use __kernel_ulong_t in struct msqid64_ds
    
    Both x32 and x86-64 use the same struct msqid64_ds for system calls.
    But x32 long is 32-bit. This patch replaces unsigned long with
    __kernel_ulong_t in struct msqid64_ds.
    
    Signed-off-by: H.J. Lu <hjl.tools@gmail.com>
    Link: http://lkml.kernel.org/r/1388182464-28428-6-git-send-email-hjl.tools@gmail.com
    Signed-off-by: H. Peter Anvin <hpa@zytor.com>

diff --git a/include/uapi/asm-generic/msgbuf.h b/include/uapi/asm-generic/msgbuf.h
index aec850d9159e..f55ecc43c60f 100644
--- a/include/uapi/asm-generic/msgbuf.h
+++ b/include/uapi/asm-generic/msgbuf.h
@@ -35,13 +35,13 @@ struct msqid64_ds {
 #if __BITS_PER_LONG != 64
 	unsigned long	__unused3;
 #endif
-	unsigned long  msg_cbytes;	/* current number of bytes on queue */
-	unsigned long  msg_qnum;	/* number of messages in queue */
-	unsigned long  msg_qbytes;	/* max number of bytes on queue */
+	__kernel_ulong_t msg_cbytes;	/* current number of bytes on queue */
+	__kernel_ulong_t msg_qnum;	/* number of messages in queue */
+	__kernel_ulong_t msg_qbytes;	/* max number of bytes on queue */
 	__kernel_pid_t msg_lspid;	/* pid of last msgsnd */
 	__kernel_pid_t msg_lrpid;	/* last receive pid */
-	unsigned long  __unused4;
-	unsigned long  __unused5;
+	__kernel_ulong_t __unused4;
+	__kernel_ulong_t __unused5;
 };
 
 #endif /* __ASM_GENERIC_MSGBUF_H */

commit 8a1ab3155c2ac7fbe5f2038d6e26efeb607a1498
Author: David Howells <dhowells@redhat.com>
Date:   Thu Oct 4 18:20:15 2012 +0100

    UAPI: (Scripted) Disintegrate include/asm-generic
    
    Signed-off-by: David Howells <dhowells@redhat.com>
    Acked-by: Arnd Bergmann <arnd@arndb.de>
    Acked-by: Thomas Gleixner <tglx@linutronix.de>
    Acked-by: Michael Kerrisk <mtk.manpages@gmail.com>
    Acked-by: Paul E. McKenney <paulmck@linux.vnet.ibm.com>
    Acked-by: Dave Jones <davej@redhat.com>

diff --git a/include/uapi/asm-generic/msgbuf.h b/include/uapi/asm-generic/msgbuf.h
new file mode 100644
index 000000000000..aec850d9159e
--- /dev/null
+++ b/include/uapi/asm-generic/msgbuf.h
@@ -0,0 +1,47 @@
+#ifndef __ASM_GENERIC_MSGBUF_H
+#define __ASM_GENERIC_MSGBUF_H
+
+#include <asm/bitsperlong.h>
+/*
+ * generic msqid64_ds structure.
+ *
+ * Note extra padding because this structure is passed back and forth
+ * between kernel and user space.
+ *
+ * msqid64_ds was originally meant to be architecture specific, but
+ * everyone just ended up making identical copies without specific
+ * optimizations, so we may just as well all use the same one.
+ *
+ * 64 bit architectures typically define a 64 bit __kernel_time_t,
+ * so they do not need the first three padding words.
+ * On big-endian systems, the padding is in the wrong place.
+ *
+ * Pad space is left for:
+ * - 64-bit time_t to solve y2038 problem
+ * - 2 miscellaneous 32-bit values
+ */
+
+struct msqid64_ds {
+	struct ipc64_perm msg_perm;
+	__kernel_time_t msg_stime;	/* last msgsnd time */
+#if __BITS_PER_LONG != 64
+	unsigned long	__unused1;
+#endif
+	__kernel_time_t msg_rtime;	/* last msgrcv time */
+#if __BITS_PER_LONG != 64
+	unsigned long	__unused2;
+#endif
+	__kernel_time_t msg_ctime;	/* last change time */
+#if __BITS_PER_LONG != 64
+	unsigned long	__unused3;
+#endif
+	unsigned long  msg_cbytes;	/* current number of bytes on queue */
+	unsigned long  msg_qnum;	/* number of messages in queue */
+	unsigned long  msg_qbytes;	/* max number of bytes on queue */
+	__kernel_pid_t msg_lspid;	/* pid of last msgsnd */
+	__kernel_pid_t msg_lrpid;	/* last receive pid */
+	unsigned long  __unused4;
+	unsigned long  __unused5;
+};
+
+#endif /* __ASM_GENERIC_MSGBUF_H */
