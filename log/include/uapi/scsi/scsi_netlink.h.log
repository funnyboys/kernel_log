commit 075c2b6bf654bdba977795e95bba130113156a35
Author: Masahiro Yamada <yamada.masahiro@socionext.com>
Date:   Sun Jul 21 23:25:02 2019 +0900

    scsi: use __u{8,16,32,64} instead of uint{8,16,32,64}_t in uapi headers
    
    When CONFIG_UAPI_HEADER_TEST=y, exported headers are compile-tested to make
    sure they can be included from user-space.
    
    Currently, scsi_bsg_fc.h, scsi_netlink.h, and scsi_netlink_fc.h are
    excluded from the test coverage. To make them join the compile-test, we
    need to fix the build errors attached below.
    
    For a case like this, we decided to use __u{8,16,32,64} variable types in
    this discussion:
    
      https://lkml.org/lkml/2019/6/5/18
    
    Build log:
    
      CC      usr/include/scsi/scsi_netlink_fc.h.s
      CC      usr/include/scsi/scsi_netlink.h.s
      CC      usr/include/scsi/scsi_bsg_fc.h.s
    In file included from ./usr/include/scsi/scsi_netlink_fc.h:10:0,
                     from <command-line>:32:
    ./usr/include/scsi/scsi_netlink.h:29:2: error: unknown type name  uint8_t
      uint8_t version;
      ^~~~~~~
    ./usr/include/scsi/scsi_netlink.h:30:2: error: unknown type name  uint8_t
      uint8_t transport;
      ^~~~~~~
    ./usr/include/scsi/scsi_netlink.h:31:2: error: unknown type name  uint16_t
      uint16_t magic;
      ^~~~~~~~
    ./usr/include/scsi/scsi_netlink.h:32:2: error: unknown type name  uint16_t
      uint16_t msgtype;
      ^~~~~~~~
      CC      usr/include/rdma/vmw_pvrdma-abi.h.s
    ./usr/include/scsi/scsi_netlink.h:33:2: error: unknown type name  uint16_t
      uint16_t msglen;
      ^~~~~~~~
    ./usr/include/scsi/scsi_netlink.h:34:33: error:  uint64_t  undeclared here (not in a function); did you mean  __uint128_t ?
     } __attribute__((aligned(sizeof(uint64_t))));
                                     ^~~~~~~~
                                     __uint128_t
    ./usr/include/scsi/scsi_netlink.h:78:2: error: expected specifier-qualifier-list before  uint64_t
      uint64_t vendor_id;
      ^~~~~~~~
    In file included from <command-line>:32:0:
    ./usr/include/scsi/scsi_netlink_fc.h:46:2: error: expected specifier-qualifier-list before  uint64_t
      uint64_t seconds;
      ^~~~~~~~
    make[2]: *** [scripts/Makefile.build;302: usr/include/scsi/scsi_netlink_fc.h.s] Error 1
    make[2]: *** Waiting for unfinished jobs....
    In file included from <command-line>:32:0:
    ./usr/include/scsi/scsi_netlink.h:29:2: error: unknown type name  uint8_t
      uint8_t version;
      ^~~~~~~
    ./usr/include/scsi/scsi_netlink.h:30:2: error: unknown type name  uint8_t
      uint8_t transport;
      ^~~~~~~
    ./usr/include/scsi/scsi_netlink.h:31:2: error: unknown type name  uint16_t
      uint16_t magic;
      ^~~~~~~~
    ./usr/include/scsi/scsi_netlink.h:32:2: error: unknown type name  uint16_t
      uint16_t msgtype;
      ^~~~~~~~
    ./usr/include/scsi/scsi_netlink.h:33:2: error: unknown type name  uint16_t
      uint16_t msglen;
      ^~~~~~~~
    ./usr/include/scsi/scsi_netlink.h:34:33: error:  uint64_t  undeclared here (not in a function); did you mean  __uint128_t ?
     } __attribute__((aligned(sizeof(uint64_t))));
                                     ^~~~~~~~
                                     __uint128_t
    ./usr/include/scsi/scsi_netlink.h:78:2: error: expected specifier-qualifier-list before  uint64_t
      uint64_t vendor_id;
      ^~~~~~~~
    make[2]: *** [scripts/Makefile.build;302: usr/include/scsi/scsi_netlink.h.s] Error 1
    In file included from <command-line>:32:0:
    ./usr/include/scsi/scsi_bsg_fc.h:69:2: error: unknown type name  uint8_t
      uint8_t  reserved;
      ^~~~~~~
    ./usr/include/scsi/scsi_bsg_fc.h:72:2: error: unknown type name  uint8_t
      uint8_t  port_id[3];
      ^~~~~~~
    ./usr/include/scsi/scsi_bsg_fc.h:90:2: error: unknown type name  uint8_t
      uint8_t  reserved;
      ^~~~~~~
    ./usr/include/scsi/scsi_bsg_fc.h:93:2: error: unknown type name  uint8_t
      uint8_t  port_id[3];
      ^~~~~~~
    ./usr/include/scsi/scsi_bsg_fc.h:114:2: error: unknown type name  uint8_t
      uint8_t  command_code;
      ^~~~~~~
    ./usr/include/scsi/scsi_bsg_fc.h:117:2: error: unknown type name  uint8_t
      uint8_t  port_id[3];
      ^~~~~~~
    ./usr/include/scsi/scsi_bsg_fc.h:154:2: error: unknown type name  uint32_t
      uint32_t status;  /* See FC_CTELS_STATUS_xxx */
      ^~~~~~~~
    ./usr/include/scsi/scsi_bsg_fc.h:158:3: error: unknown type name  uint8_t
       uint8_t action;  /* fragment_id for CT REJECT */
       ^~~~~~~
    ./usr/include/scsi/scsi_bsg_fc.h:159:3: error: unknown type name  uint8_t
       uint8_t reason_code;
       ^~~~~~~
    ./usr/include/scsi/scsi_bsg_fc.h:160:3: error: unknown type name  uint8_t
       uint8_t reason_explanation;
       ^~~~~~~
    ./usr/include/scsi/scsi_bsg_fc.h:161:3: error: unknown type name  uint8_t
       uint8_t vendor_unique;
       ^~~~~~~
    ./usr/include/scsi/scsi_bsg_fc.h:177:2: error: unknown type name  uint8_t
      uint8_t  reserved;
      ^~~~~~~
    ./usr/include/scsi/scsi_bsg_fc.h:180:2: error: unknown type name  uint8_t
      uint8_t  port_id[3];
      ^~~~~~~
    ./usr/include/scsi/scsi_bsg_fc.h:185:2: error: unknown type name  uint32_t
      uint32_t preamble_word0; /* revision & IN_ID */
      ^~~~~~~~
    ./usr/include/scsi/scsi_bsg_fc.h:186:2: error: unknown type name  uint32_t
      uint32_t preamble_word1; /* GS_Type, GS_SubType, Options, Rsvd */
      ^~~~~~~~
    ./usr/include/scsi/scsi_bsg_fc.h:187:2: error: unknown type name  uint32_t
      uint32_t preamble_word2; /* Cmd Code, Max Size */
      ^~~~~~~~
    ./usr/include/scsi/scsi_bsg_fc.h:207:2: error: unknown type name  uint64_t
      uint64_t vendor_id;
      ^~~~~~~~
    ./usr/include/scsi/scsi_bsg_fc.h:210:2: error: unknown type name  uint32_t
      uint32_t vendor_cmd[0];
      ^~~~~~~~
    ./usr/include/scsi/scsi_bsg_fc.h:217:2: error: unknown type name  uint32_t
      uint32_t vendor_rsp[0];
      ^~~~~~~~
    ./usr/include/scsi/scsi_bsg_fc.h:236:2: error: unknown type name  uint8_t
      uint8_t els_code;
      ^~~~~~~
    ./usr/include/scsi/scsi_bsg_fc.h:254:2: error: unknown type name  uint32_t
      uint32_t preamble_word0; /* revision & IN_ID */
      ^~~~~~~~
    ./usr/include/scsi/scsi_bsg_fc.h:255:2: error: unknown type name  uint32_t
      uint32_t preamble_word1; /* GS_Type, GS_SubType, Options, Rsvd */
      ^~~~~~~~
    ./usr/include/scsi/scsi_bsg_fc.h:256:2: error: unknown type name  uint32_t
      uint32_t preamble_word2; /* Cmd Code, Max Size */
      ^~~~~~~~
    ./usr/include/scsi/scsi_bsg_fc.h:268:2: error: unknown type name  uint32_t
      uint32_t msgcode;
      ^~~~~~~~
    ./usr/include/scsi/scsi_bsg_fc.h:292:2: error: unknown type name  uint32_t
      uint32_t result;
      ^~~~~~~~
    ./usr/include/scsi/scsi_bsg_fc.h:295:2: error: unknown type name  uint32_t
      uint32_t reply_payload_rcv_len;
      ^~~~~~~~
    
    Signed-off-by: Masahiro Yamada <yamada.masahiro@socionext.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>

diff --git a/include/uapi/scsi/scsi_netlink.h b/include/uapi/scsi/scsi_netlink.h
index 5dd382054e45..1b1737c3c9d8 100644
--- a/include/uapi/scsi/scsi_netlink.h
+++ b/include/uapi/scsi/scsi_netlink.h
@@ -26,12 +26,12 @@
 
 /* SCSI_TRANSPORT_MSG event message header */
 struct scsi_nl_hdr {
-	uint8_t version;
-	uint8_t transport;
-	uint16_t magic;
-	uint16_t msgtype;
-	uint16_t msglen;
-} __attribute__((aligned(sizeof(uint64_t))));
+	__u8 version;
+	__u8 transport;
+	__u16 magic;
+	__u16 msgtype;
+	__u16 msglen;
+} __attribute__((aligned(sizeof(__u64))));
 
 /* scsi_nl_hdr->version value */
 #define SCSI_NL_VERSION				1
@@ -75,10 +75,10 @@ struct scsi_nl_hdr {
  */
 struct scsi_nl_host_vendor_msg {
 	struct scsi_nl_hdr snlh;		/* must be 1st element ! */
-	uint64_t vendor_id;
-	uint16_t host_no;
-	uint16_t vmsg_datalen;
-} __attribute__((aligned(sizeof(uint64_t))));
+	__u64 vendor_id;
+	__u16 host_no;
+	__u16 vmsg_datalen;
+} __attribute__((aligned(sizeof(__u64))));
 
 
 /*

commit 17bd0fb319a77d951aa989794898bc2d1caa05a8
Author: Christoph Hellwig <hch@lst.de>
Date:   Wed May 1 12:13:56 2019 -0400

    scsi: scsi_netlink: remove duplicate GPL boilerplate text
    
    The SCSI netlink uapi header already has a proper SPDX tag, remove the
    duplicate boilerplate text.
    
    Signed-off-by: Christoph Hellwig <hch@lst.de>
    Reviewed-by: Hannes Reinecke <hare@suse.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>

diff --git a/include/uapi/scsi/scsi_netlink.h b/include/uapi/scsi/scsi_netlink.h
index 5ccc2333acab..5dd382054e45 100644
--- a/include/uapi/scsi/scsi_netlink.h
+++ b/include/uapi/scsi/scsi_netlink.h
@@ -4,21 +4,6 @@
  *    Used for the posting of outbound SCSI transport events
  *
  *  Copyright (C) 2006   James Smart, Emulex Corporation
- *
- *  This program is free software; you can redistribute it and/or modify
- *  it under the terms of the GNU General Public License as published by
- *  the Free Software Foundation; either version 2 of the License, or
- *  (at your option) any later version.
- *
- *  This program is distributed in the hope that it will be useful,
- *  but WITHOUT ANY WARRANTY; without even the implied warranty of
- *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- *  GNU General Public License for more details.
- *
- *  You should have received a copy of the GNU General Public License
- *  along with this program; if not, write to the Free Software
- *  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
- *
  */
 #ifndef SCSI_NETLINK_H
 #define SCSI_NETLINK_H

commit e2be04c7f9958dde770eeb8b30e829ca969b37bb
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Wed Nov 1 15:09:13 2017 +0100

    License cleanup: add SPDX license identifier to uapi header files with a license
    
    Many user space API headers have licensing information, which is either
    incomplete, badly formatted or just a shorthand for referring to the
    license under which the file is supposed to be.  This makes it hard for
    compliance tools to determine the correct license.
    
    Update these files with an SPDX license identifier.  The identifier was
    chosen based on the license information in the file.
    
    GPL/LGPL licensed headers get the matching GPL/LGPL SPDX license
    identifier with the added 'WITH Linux-syscall-note' exception, which is
    the officially assigned exception identifier for the kernel syscall
    exception:
    
       NOTE! This copyright does *not* cover user programs that use kernel
       services by normal system calls - this is merely considered normal use
       of the kernel, and does *not* fall under the heading of "derived work".
    
    This exception makes it possible to include GPL headers into non GPL
    code, without confusing license compliance tools.
    
    Headers which have either explicit dual licensing or are just licensed
    under a non GPL license are updated with the corresponding SPDX
    identifier and the GPLv2 with syscall exception identifier.  The format
    is:
            ((GPL-2.0 WITH Linux-syscall-note) OR SPDX-ID-OF-OTHER-LICENSE)
    
    SPDX license identifiers are a legally binding shorthand, which can be
    used instead of the full boiler plate text.  The update does not remove
    existing license information as this has to be done on a case by case
    basis and the copyright holders might have to be consulted. This will
    happen in a separate step.
    
    This patch is based on work done by Thomas Gleixner and Kate Stewart and
    Philippe Ombredanne.  See the previous patch in this series for the
    methodology of how this patch was researched.
    
    Reviewed-by: Kate Stewart <kstewart@linuxfoundation.org>
    Reviewed-by: Philippe Ombredanne <pombredanne@nexb.com>
    Reviewed-by: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/include/uapi/scsi/scsi_netlink.h b/include/uapi/scsi/scsi_netlink.h
index 62b4edab15d3..5ccc2333acab 100644
--- a/include/uapi/scsi/scsi_netlink.h
+++ b/include/uapi/scsi/scsi_netlink.h
@@ -1,3 +1,4 @@
+/* SPDX-License-Identifier: GPL-2.0+ WITH Linux-syscall-note */
 /*
  *  SCSI Transport Netlink Interface
  *    Used for the posting of outbound SCSI transport events

commit ee7afd717c26299c85675d84c7ff89a9c989f4fa
Author: David Howells <dhowells@redhat.com>
Date:   Wed Dec 19 16:07:23 2012 +0000

    UAPI: (Scripted) Disintegrate include/scsi
    
    Signed-off-by: David Howells <dhowells@redhat.com>
    Acked-by: Arnd Bergmann <arnd@arndb.de>
    Acked-by: Thomas Gleixner <tglx@linutronix.de>
    Acked-by: Michael Kerrisk <mtk.manpages@gmail.com>
    Acked-by: Paul E. McKenney <paulmck@linux.vnet.ibm.com>
    Acked-by: Dave Jones <davej@redhat.com>

diff --git a/include/uapi/scsi/scsi_netlink.h b/include/uapi/scsi/scsi_netlink.h
new file mode 100644
index 000000000000..62b4edab15d3
--- /dev/null
+++ b/include/uapi/scsi/scsi_netlink.h
@@ -0,0 +1,123 @@
+/*
+ *  SCSI Transport Netlink Interface
+ *    Used for the posting of outbound SCSI transport events
+ *
+ *  Copyright (C) 2006   James Smart, Emulex Corporation
+ *
+ *  This program is free software; you can redistribute it and/or modify
+ *  it under the terms of the GNU General Public License as published by
+ *  the Free Software Foundation; either version 2 of the License, or
+ *  (at your option) any later version.
+ *
+ *  This program is distributed in the hope that it will be useful,
+ *  but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ *  GNU General Public License for more details.
+ *
+ *  You should have received a copy of the GNU General Public License
+ *  along with this program; if not, write to the Free Software
+ *  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ *
+ */
+#ifndef SCSI_NETLINK_H
+#define SCSI_NETLINK_H
+
+#include <linux/netlink.h>
+#include <linux/types.h>
+
+/*
+ * This file intended to be included by both kernel and user space
+ */
+
+/* Single Netlink Message type to send all SCSI Transport messages */
+#define SCSI_TRANSPORT_MSG		NLMSG_MIN_TYPE + 1
+
+/* SCSI Transport Broadcast Groups */
+	/* leaving groups 0 and 1 unassigned */
+#define SCSI_NL_GRP_FC_EVENTS		(1<<2)		/* Group 2 */
+#define SCSI_NL_GRP_CNT			3
+
+
+/* SCSI_TRANSPORT_MSG event message header */
+struct scsi_nl_hdr {
+	uint8_t version;
+	uint8_t transport;
+	uint16_t magic;
+	uint16_t msgtype;
+	uint16_t msglen;
+} __attribute__((aligned(sizeof(uint64_t))));
+
+/* scsi_nl_hdr->version value */
+#define SCSI_NL_VERSION				1
+
+/* scsi_nl_hdr->magic value */
+#define SCSI_NL_MAGIC				0xA1B2
+
+/* scsi_nl_hdr->transport value */
+#define SCSI_NL_TRANSPORT			0
+#define SCSI_NL_TRANSPORT_FC			1
+#define SCSI_NL_MAX_TRANSPORTS			2
+
+/* Transport-based scsi_nl_hdr->msgtype values are defined in each transport */
+
+/*
+ * GENERIC SCSI scsi_nl_hdr->msgtype Values
+ */
+	/* kernel -> user */
+#define SCSI_NL_SHOST_VENDOR			0x0001
+	/* user -> kernel */
+/* SCSI_NL_SHOST_VENDOR msgtype is kernel->user and user->kernel */
+
+
+/*
+ * Message Structures :
+ */
+
+/* macro to round up message lengths to 8byte boundary */
+#define SCSI_NL_MSGALIGN(len)		(((len) + 7) & ~7)
+
+
+/*
+ * SCSI HOST Vendor Unique messages :
+ *   SCSI_NL_SHOST_VENDOR
+ *
+ * Note: The Vendor Unique message payload will begin directly after
+ * 	 this structure, with the length of the payload per vmsg_datalen.
+ *
+ * Note: When specifying vendor_id, be sure to read the Vendor Type and ID
+ *   formatting requirements specified below
+ */
+struct scsi_nl_host_vendor_msg {
+	struct scsi_nl_hdr snlh;		/* must be 1st element ! */
+	uint64_t vendor_id;
+	uint16_t host_no;
+	uint16_t vmsg_datalen;
+} __attribute__((aligned(sizeof(uint64_t))));
+
+
+/*
+ * Vendor ID:
+ *   If transports post vendor-unique events, they must pass a well-known
+ *   32-bit vendor identifier. This identifier consists of 8 bits indicating
+ *   the "type" of identifier contained, and 24 bits of id data.
+ *
+ *   Identifiers for each type:
+ *    PCI :  ID data is the 16 bit PCI Registered Vendor ID
+ */
+#define SCSI_NL_VID_TYPE_SHIFT		56
+#define SCSI_NL_VID_TYPE_MASK		((__u64)0xFF << SCSI_NL_VID_TYPE_SHIFT)
+#define SCSI_NL_VID_TYPE_PCI		((__u64)0x01 << SCSI_NL_VID_TYPE_SHIFT)
+#define SCSI_NL_VID_ID_MASK		(~ SCSI_NL_VID_TYPE_MASK)
+
+
+#define INIT_SCSI_NL_HDR(hdr, t, mtype, mlen)			\
+	{							\
+	(hdr)->version = SCSI_NL_VERSION;			\
+	(hdr)->transport = t;					\
+	(hdr)->magic = SCSI_NL_MAGIC;				\
+	(hdr)->msgtype = mtype;					\
+	(hdr)->msglen = mlen;					\
+	}
+
+#endif /* SCSI_NETLINK_H */
+
