commit b24413180f5600bcb3bb70fbed5cf186b60864bd
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Wed Nov 1 15:07:57 2017 +0100

    License cleanup: add SPDX GPL-2.0 license identifier to files with no license
    
    Many source files in the tree are missing licensing information, which
    makes it harder for compliance tools to determine the correct license.
    
    By default all files without license information are under the default
    license of the kernel, which is GPL version 2.
    
    Update the files which contain no license information with the 'GPL-2.0'
    SPDX license identifier.  The SPDX identifier is a legally binding
    shorthand, which can be used instead of the full boiler plate text.
    
    This patch is based on work done by Thomas Gleixner and Kate Stewart and
    Philippe Ombredanne.
    
    How this work was done:
    
    Patches were generated and checked against linux-4.14-rc6 for a subset of
    the use cases:
     - file had no licensing information it it.
     - file was a */uapi/* one with no licensing information in it,
     - file was a */uapi/* one with existing licensing information,
    
    Further patches will be generated in subsequent months to fix up cases
    where non-standard license headers were used, and references to license
    had to be inferred by heuristics based on keywords.
    
    The analysis to determine which SPDX License Identifier to be applied to
    a file was done in a spreadsheet of side by side results from of the
    output of two independent scanners (ScanCode & Windriver) producing SPDX
    tag:value files created by Philippe Ombredanne.  Philippe prepared the
    base worksheet, and did an initial spot review of a few 1000 files.
    
    The 4.13 kernel was the starting point of the analysis with 60,537 files
    assessed.  Kate Stewart did a file by file comparison of the scanner
    results in the spreadsheet to determine which SPDX license identifier(s)
    to be applied to the file. She confirmed any determination that was not
    immediately clear with lawyers working with the Linux Foundation.
    
    Criteria used to select files for SPDX license identifier tagging was:
     - Files considered eligible had to be source code files.
     - Make and config files were included as candidates if they contained >5
       lines of source
     - File already had some variant of a license header in it (even if <5
       lines).
    
    All documentation files were explicitly excluded.
    
    The following heuristics were used to determine which SPDX license
    identifiers to apply.
    
     - when both scanners couldn't find any license traces, file was
       considered to have no license information in it, and the top level
       COPYING file license applied.
    
       For non */uapi/* files that summary was:
    
       SPDX license identifier                            # files
       ---------------------------------------------------|-------
       GPL-2.0                                              11139
    
       and resulted in the first patch in this series.
    
       If that file was a */uapi/* path one, it was "GPL-2.0 WITH
       Linux-syscall-note" otherwise it was "GPL-2.0".  Results of that was:
    
       SPDX license identifier                            # files
       ---------------------------------------------------|-------
       GPL-2.0 WITH Linux-syscall-note                        930
    
       and resulted in the second patch in this series.
    
     - if a file had some form of licensing information in it, and was one
       of the */uapi/* ones, it was denoted with the Linux-syscall-note if
       any GPL family license was found in the file or had no licensing in
       it (per prior point).  Results summary:
    
       SPDX license identifier                            # files
       ---------------------------------------------------|------
       GPL-2.0 WITH Linux-syscall-note                       270
       GPL-2.0+ WITH Linux-syscall-note                      169
       ((GPL-2.0 WITH Linux-syscall-note) OR BSD-2-Clause)    21
       ((GPL-2.0 WITH Linux-syscall-note) OR BSD-3-Clause)    17
       LGPL-2.1+ WITH Linux-syscall-note                      15
       GPL-1.0+ WITH Linux-syscall-note                       14
       ((GPL-2.0+ WITH Linux-syscall-note) OR BSD-3-Clause)    5
       LGPL-2.0+ WITH Linux-syscall-note                       4
       LGPL-2.1 WITH Linux-syscall-note                        3
       ((GPL-2.0 WITH Linux-syscall-note) OR MIT)              3
       ((GPL-2.0 WITH Linux-syscall-note) AND MIT)             1
    
       and that resulted in the third patch in this series.
    
     - when the two scanners agreed on the detected license(s), that became
       the concluded license(s).
    
     - when there was disagreement between the two scanners (one detected a
       license but the other didn't, or they both detected different
       licenses) a manual inspection of the file occurred.
    
     - In most cases a manual inspection of the information in the file
       resulted in a clear resolution of the license that should apply (and
       which scanner probably needed to revisit its heuristics).
    
     - When it was not immediately clear, the license identifier was
       confirmed with lawyers working with the Linux Foundation.
    
     - If there was any question as to the appropriate license identifier,
       the file was flagged for further research and to be revisited later
       in time.
    
    In total, over 70 hours of logged manual review was done on the
    spreadsheet to determine the SPDX license identifiers to apply to the
    source files by Kate, Philippe, Thomas and, in some cases, confirmation
    by lawyers working with the Linux Foundation.
    
    Kate also obtained a third independent scan of the 4.13 code base from
    FOSSology, and compared selected files where the other two scanners
    disagreed against that SPDX file, to see if there was new insights.  The
    Windriver scanner is based on an older version of FOSSology in part, so
    they are related.
    
    Thomas did random spot checks in about 500 files from the spreadsheets
    for the uapi headers and agreed with SPDX license identifier in the
    files he inspected. For the non-uapi files Thomas did random spot checks
    in about 15000 files.
    
    In initial set of patches against 4.14-rc6, 3 files were found to have
    copy/paste license identifier errors, and have been fixed to reflect the
    correct identifier.
    
    Additionally Philippe spent 10 hours this week doing a detailed manual
    inspection and review of the 12,461 patched files from the initial patch
    version early this week with:
     - a full scancode scan run, collecting the matched texts, detected
       license ids and scores
     - reviewing anything where there was a license detected (about 500+
       files) to ensure that the applied SPDX license was correct
     - reviewing anything where there was no detection but the patch license
       was not GPL-2.0 WITH Linux-syscall-note to ensure that the applied
       SPDX license was correct
    
    This produced a worksheet with 20 files needing minor correction.  This
    worksheet was then exported into 3 different .csv files for the
    different types of files to be modified.
    
    These .csv files were then reviewed by Greg.  Thomas wrote a script to
    parse the csv files and add the proper SPDX tag to the file, in the
    format that the file expected.  This script was further refined by Greg
    based on the output to detect more types of files automatically and to
    distinguish between header and source .c files (which need different
    comment types.)  Finally Greg ran the script using the .csv files to
    generate the patches.
    
    Reviewed-by: Kate Stewart <kstewart@linuxfoundation.org>
    Reviewed-by: Philippe Ombredanne <pombredanne@nexb.com>
    Reviewed-by: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/include/asm-generic/cmpxchg-local.h b/include/asm-generic/cmpxchg-local.h
index 70bef78912b7..f17f14f84d09 100644
--- a/include/asm-generic/cmpxchg-local.h
+++ b/include/asm-generic/cmpxchg-local.h
@@ -1,3 +1,4 @@
+/* SPDX-License-Identifier: GPL-2.0 */
 #ifndef __ASM_GENERIC_CMPXCHG_LOCAL_H
 #define __ASM_GENERIC_CMPXCHG_LOCAL_H
 

commit aa93685afbefa0e31af3a0a03ff97b37ee92a90b
Author: Behan Webster <behanw@converseincode.com>
Date:   Tue Nov 20 21:19:50 2012 +0100

    LLVMLinux: Remove warning about returning an uninitialized variable
    
    Fix uninitialized return code in default case in cmpxchg-local.h
    
    This patch fixes the code to prevent an uninitialized return value that is detected
    when compiling with clang. The bug produces numerous warnings when compiling the
    Linux kernel with clang.
    
    Signed-off-by: Behan Webster <behanw@converseincode.com>
    Signed-off-by: Mark Charlebois <charlebm@gmail.com>
    Acked-by: David Howells <dhowells@redhat.com>
    Acked-by: Arnd Bergmann <arnd@arndb.de>

diff --git a/include/asm-generic/cmpxchg-local.h b/include/asm-generic/cmpxchg-local.h
index d8d4c898c1bb..70bef78912b7 100644
--- a/include/asm-generic/cmpxchg-local.h
+++ b/include/asm-generic/cmpxchg-local.h
@@ -4,7 +4,8 @@
 #include <linux/types.h>
 #include <linux/irqflags.h>
 
-extern unsigned long wrong_size_cmpxchg(volatile void *ptr);
+extern unsigned long wrong_size_cmpxchg(volatile void *ptr)
+	__noreturn;
 
 /*
  * Generic version of __cmpxchg_local (disables interrupts). Takes an unsigned

commit 5042afe7fe32390e79910ecd0a1f0563d4bca38c
Author: Ingo Molnar <mingo@elte.hu>
Date:   Fri Jul 3 08:29:30 2009 -0500

    generic: Use raw local irq variant for generic cmpxchg
    
    The interrupt disabled region is extremly tiny and therefor not
    latency relevant. Avoid cluttering the traces with those pointless
    entries.
    
    Signed-off-by: Ingo Molnar <mingo@elte.hu>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>

diff --git a/include/asm-generic/cmpxchg-local.h b/include/asm-generic/cmpxchg-local.h
index 2533fddd34a6..d8d4c898c1bb 100644
--- a/include/asm-generic/cmpxchg-local.h
+++ b/include/asm-generic/cmpxchg-local.h
@@ -21,7 +21,7 @@ static inline unsigned long __cmpxchg_local_generic(volatile void *ptr,
 	if (size == 8 && sizeof(unsigned long) != 8)
 		wrong_size_cmpxchg(ptr);
 
-	local_irq_save(flags);
+	raw_local_irq_save(flags);
 	switch (size) {
 	case 1: prev = *(u8 *)ptr;
 		if (prev == old)
@@ -42,7 +42,7 @@ static inline unsigned long __cmpxchg_local_generic(volatile void *ptr,
 	default:
 		wrong_size_cmpxchg(ptr);
 	}
-	local_irq_restore(flags);
+	raw_local_irq_restore(flags);
 	return prev;
 }
 
@@ -55,11 +55,11 @@ static inline u64 __cmpxchg64_local_generic(volatile void *ptr,
 	u64 prev;
 	unsigned long flags;
 
-	local_irq_save(flags);
+	raw_local_irq_save(flags);
 	prev = *(u64 *)ptr;
 	if (prev == old)
 		*(u64 *)ptr = new;
-	local_irq_restore(flags);
+	raw_local_irq_restore(flags);
 	return prev;
 }
 

commit df9ee29270c11dba7d0fe0b83ce47a4d8e8d2101
Author: David Howells <dhowells@redhat.com>
Date:   Thu Oct 7 14:08:55 2010 +0100

    Fix IRQ flag handling naming
    
    Fix the IRQ flag handling naming.  In linux/irqflags.h under one configuration,
    it maps:
    
            local_irq_enable() -> raw_local_irq_enable()
            local_irq_disable() -> raw_local_irq_disable()
            local_irq_save() -> raw_local_irq_save()
            ...
    
    and under the other configuration, it maps:
    
            raw_local_irq_enable() -> local_irq_enable()
            raw_local_irq_disable() -> local_irq_disable()
            raw_local_irq_save() -> local_irq_save()
            ...
    
    This is quite confusing.  There should be one set of names expected of the
    arch, and this should be wrapped to give another set of names that are expected
    by users of this facility.
    
    Change this to have the arch provide:
    
            flags = arch_local_save_flags()
            flags = arch_local_irq_save()
            arch_local_irq_restore(flags)
            arch_local_irq_disable()
            arch_local_irq_enable()
            arch_irqs_disabled_flags(flags)
            arch_irqs_disabled()
            arch_safe_halt()
    
    Then linux/irqflags.h wraps these to provide:
    
            raw_local_save_flags(flags)
            raw_local_irq_save(flags)
            raw_local_irq_restore(flags)
            raw_local_irq_disable()
            raw_local_irq_enable()
            raw_irqs_disabled_flags(flags)
            raw_irqs_disabled()
            raw_safe_halt()
    
    with type checking on the flags 'arguments', and then wraps those to provide:
    
            local_save_flags(flags)
            local_irq_save(flags)
            local_irq_restore(flags)
            local_irq_disable()
            local_irq_enable()
            irqs_disabled_flags(flags)
            irqs_disabled()
            safe_halt()
    
    with tracing included if enabled.
    
    The arch functions can now all be inline functions rather than some of them
    having to be macros.
    
    Signed-off-by: David Howells <dhowells@redhat.com> [X86, FRV, MN10300]
    Signed-off-by: Chris Metcalf <cmetcalf@tilera.com> [Tile]
    Signed-off-by: Michal Simek <monstr@monstr.eu> [Microblaze]
    Tested-by: Catalin Marinas <catalin.marinas@arm.com> [ARM]
    Acked-by: Thomas Gleixner <tglx@linutronix.de>
    Acked-by: Haavard Skinnemoen <haavard.skinnemoen@atmel.com> [AVR]
    Acked-by: Tony Luck <tony.luck@intel.com> [IA-64]
    Acked-by: Hirokazu Takata <takata@linux-m32r.org> [M32R]
    Acked-by: Greg Ungerer <gerg@uclinux.org> [M68K/M68KNOMMU]
    Acked-by: Ralf Baechle <ralf@linux-mips.org> [MIPS]
    Acked-by: Kyle McMartin <kyle@mcmartin.ca> [PA-RISC]
    Acked-by: Paul Mackerras <paulus@samba.org> [PowerPC]
    Acked-by: Martin Schwidefsky <schwidefsky@de.ibm.com> [S390]
    Acked-by: Chen Liqin <liqin.chen@sunplusct.com> [Score]
    Acked-by: Matt Fleming <matt@console-pimps.org> [SH]
    Acked-by: David S. Miller <davem@davemloft.net> [Sparc]
    Acked-by: Chris Zankel <chris@zankel.net> [Xtensa]
    Reviewed-by: Richard Henderson <rth@twiddle.net> [Alpha]
    Reviewed-by: Yoshinori Sato <ysato@users.sourceforge.jp> [H8300]
    Cc: starvik@axis.com [CRIS]
    Cc: jesper.nilsson@axis.com [CRIS]
    Cc: linux-cris-kernel@axis.com

diff --git a/include/asm-generic/cmpxchg-local.h b/include/asm-generic/cmpxchg-local.h
index b2ba2fc8829a..2533fddd34a6 100644
--- a/include/asm-generic/cmpxchg-local.h
+++ b/include/asm-generic/cmpxchg-local.h
@@ -2,6 +2,7 @@
 #define __ASM_GENERIC_CMPXCHG_LOCAL_H
 
 #include <linux/types.h>
+#include <linux/irqflags.h>
 
 extern unsigned long wrong_size_cmpxchg(volatile void *ptr);
 

commit 068fbad288a2c18b75b0425fb56d241f018a1cb5
Author: Mathieu Desnoyers <mathieu.desnoyers@polymtl.ca>
Date:   Thu Feb 7 00:16:07 2008 -0800

    Add cmpxchg_local to asm-generic for per cpu atomic operations
    
    Emulates the cmpxchg_local by disabling interrupts around variable modification.
    This is not reentrant wrt NMIs and MCEs. It is only protected against normal
    interrupts, but this is enough for architectures without such interrupt sources
    or if used in a context where the data is not shared with such handlers.
    
    It can be used as a fallback for architectures lacking a real cmpxchg
    instruction.
    
    For architectures that have a real cmpxchg but does not have NMIs or MCE,
    testing which of the generic vs architecture specific cmpxchg is the fastest
    should be done.
    
    asm-generic/cmpxchg.h defines a cmpxchg that uses cmpxchg_local. It is meant to
    be used as a cmpxchg fallback for architectures that do not support SMP.
    
    * Patch series comments
    
    Using cmpxchg_local shows a performance improvements of the fast path goes from
    a 66% speedup on a Pentium 4 to a 14% speedup on AMD64.
    
    In detail:
    
    Tested-by: Mathieu Desnoyers <mathieu.desnoyers@polymtl.ca>
    Measurements on a Pentium4, 3GHz, Hyperthread.
    SLUB Performance testing
    ========================
    1. Kmalloc: Repeatedly allocate then free test
    
    * slub HEAD, test 1
    kmalloc(8) = 201 cycles         kfree = 351 cycles
    kmalloc(16) = 198 cycles        kfree = 359 cycles
    kmalloc(32) = 200 cycles        kfree = 381 cycles
    kmalloc(64) = 224 cycles        kfree = 394 cycles
    kmalloc(128) = 285 cycles       kfree = 424 cycles
    kmalloc(256) = 411 cycles       kfree = 546 cycles
    kmalloc(512) = 480 cycles       kfree = 619 cycles
    kmalloc(1024) = 623 cycles      kfree = 750 cycles
    kmalloc(2048) = 686 cycles      kfree = 811 cycles
    kmalloc(4096) = 482 cycles      kfree = 538 cycles
    kmalloc(8192) = 680 cycles      kfree = 734 cycles
    kmalloc(16384) = 713 cycles     kfree = 843 cycles
    
    * Slub HEAD, test 2
    kmalloc(8) = 190 cycles         kfree = 351 cycles
    kmalloc(16) = 195 cycles        kfree = 360 cycles
    kmalloc(32) = 201 cycles        kfree = 370 cycles
    kmalloc(64) = 245 cycles        kfree = 389 cycles
    kmalloc(128) = 283 cycles       kfree = 413 cycles
    kmalloc(256) = 409 cycles       kfree = 547 cycles
    kmalloc(512) = 476 cycles       kfree = 616 cycles
    kmalloc(1024) = 628 cycles      kfree = 753 cycles
    kmalloc(2048) = 684 cycles      kfree = 811 cycles
    kmalloc(4096) = 480 cycles      kfree = 539 cycles
    kmalloc(8192) = 661 cycles      kfree = 746 cycles
    kmalloc(16384) = 741 cycles     kfree = 856 cycles
    
    * cmpxchg_local Slub test
    kmalloc(8) = 83 cycles          kfree = 363 cycles
    kmalloc(16) = 85 cycles         kfree = 372 cycles
    kmalloc(32) = 92 cycles         kfree = 377 cycles
    kmalloc(64) = 115 cycles        kfree = 397 cycles
    kmalloc(128) = 179 cycles       kfree = 438 cycles
    kmalloc(256) = 314 cycles       kfree = 564 cycles
    kmalloc(512) = 398 cycles       kfree = 615 cycles
    kmalloc(1024) = 573 cycles      kfree = 745 cycles
    kmalloc(2048) = 629 cycles      kfree = 816 cycles
    kmalloc(4096) = 473 cycles      kfree = 548 cycles
    kmalloc(8192) = 659 cycles      kfree = 745 cycles
    kmalloc(16384) = 724 cycles     kfree = 843 cycles
    
    2. Kmalloc: alloc/free test
    
    * slub HEAD, test 1
    kmalloc(8)/kfree = 322 cycles
    kmalloc(16)/kfree = 318 cycles
    kmalloc(32)/kfree = 318 cycles
    kmalloc(64)/kfree = 325 cycles
    kmalloc(128)/kfree = 318 cycles
    kmalloc(256)/kfree = 328 cycles
    kmalloc(512)/kfree = 328 cycles
    kmalloc(1024)/kfree = 328 cycles
    kmalloc(2048)/kfree = 328 cycles
    kmalloc(4096)/kfree = 678 cycles
    kmalloc(8192)/kfree = 1013 cycles
    kmalloc(16384)/kfree = 1157 cycles
    
    * Slub HEAD, test 2
    kmalloc(8)/kfree = 323 cycles
    kmalloc(16)/kfree = 318 cycles
    kmalloc(32)/kfree = 318 cycles
    kmalloc(64)/kfree = 318 cycles
    kmalloc(128)/kfree = 318 cycles
    kmalloc(256)/kfree = 328 cycles
    kmalloc(512)/kfree = 328 cycles
    kmalloc(1024)/kfree = 328 cycles
    kmalloc(2048)/kfree = 328 cycles
    kmalloc(4096)/kfree = 648 cycles
    kmalloc(8192)/kfree = 1009 cycles
    kmalloc(16384)/kfree = 1105 cycles
    
    * cmpxchg_local Slub test
    kmalloc(8)/kfree = 112 cycles
    kmalloc(16)/kfree = 103 cycles
    kmalloc(32)/kfree = 103 cycles
    kmalloc(64)/kfree = 103 cycles
    kmalloc(128)/kfree = 112 cycles
    kmalloc(256)/kfree = 111 cycles
    kmalloc(512)/kfree = 111 cycles
    kmalloc(1024)/kfree = 111 cycles
    kmalloc(2048)/kfree = 121 cycles
    kmalloc(4096)/kfree = 650 cycles
    kmalloc(8192)/kfree = 1042 cycles
    kmalloc(16384)/kfree = 1149 cycles
    
    Tested-by: Mathieu Desnoyers <mathieu.desnoyers@polymtl.ca>
    Measurements on a AMD64 2.0 GHz dual-core
    
    In this test, we seem to remove 10 cycles from the kmalloc fast path.
    On small allocations, it gives a 14% performance increase. kfree fast
    path also seems to have a 10 cycles improvement.
    
    1. Kmalloc: Repeatedly allocate then free test
    
    * cmpxchg_local slub
    kmalloc(8) = 63 cycles      kfree = 126 cycles
    kmalloc(16) = 66 cycles     kfree = 129 cycles
    kmalloc(32) = 76 cycles     kfree = 138 cycles
    kmalloc(64) = 100 cycles    kfree = 288 cycles
    kmalloc(128) = 128 cycles   kfree = 309 cycles
    kmalloc(256) = 170 cycles   kfree = 315 cycles
    kmalloc(512) = 221 cycles   kfree = 357 cycles
    kmalloc(1024) = 324 cycles  kfree = 393 cycles
    kmalloc(2048) = 354 cycles  kfree = 440 cycles
    kmalloc(4096) = 394 cycles  kfree = 330 cycles
    kmalloc(8192) = 523 cycles  kfree = 481 cycles
    kmalloc(16384) = 643 cycles kfree = 649 cycles
    
    * Base
    kmalloc(8) = 74 cycles      kfree = 113 cycles
    kmalloc(16) = 76 cycles     kfree = 116 cycles
    kmalloc(32) = 85 cycles     kfree = 133 cycles
    kmalloc(64) = 111 cycles    kfree = 279 cycles
    kmalloc(128) = 138 cycles   kfree = 294 cycles
    kmalloc(256) = 181 cycles   kfree = 304 cycles
    kmalloc(512) = 237 cycles   kfree = 327 cycles
    kmalloc(1024) = 340 cycles  kfree = 379 cycles
    kmalloc(2048) = 378 cycles  kfree = 433 cycles
    kmalloc(4096) = 399 cycles  kfree = 329 cycles
    kmalloc(8192) = 528 cycles  kfree = 624 cycles
    kmalloc(16384) = 651 cycles kfree = 737 cycles
    
    2. Kmalloc: alloc/free test
    
    * cmpxchg_local slub
    kmalloc(8)/kfree = 96 cycles
    kmalloc(16)/kfree = 97 cycles
    kmalloc(32)/kfree = 97 cycles
    kmalloc(64)/kfree = 97 cycles
    kmalloc(128)/kfree = 97 cycles
    kmalloc(256)/kfree = 105 cycles
    kmalloc(512)/kfree = 108 cycles
    kmalloc(1024)/kfree = 105 cycles
    kmalloc(2048)/kfree = 107 cycles
    kmalloc(4096)/kfree = 390 cycles
    kmalloc(8192)/kfree = 626 cycles
    kmalloc(16384)/kfree = 662 cycles
    
    * Base
    kmalloc(8)/kfree = 116 cycles
    kmalloc(16)/kfree = 116 cycles
    kmalloc(32)/kfree = 116 cycles
    kmalloc(64)/kfree = 116 cycles
    kmalloc(128)/kfree = 116 cycles
    kmalloc(256)/kfree = 126 cycles
    kmalloc(512)/kfree = 126 cycles
    kmalloc(1024)/kfree = 126 cycles
    kmalloc(2048)/kfree = 126 cycles
    kmalloc(4096)/kfree = 384 cycles
    kmalloc(8192)/kfree = 749 cycles
    kmalloc(16384)/kfree = 786 cycles
    
    Tested-by: Christoph Lameter <clameter@sgi.com>
    I can confirm Mathieus' measurement now:
    
    Athlon64:
    
    regular NUMA/discontig
    
    1. Kmalloc: Repeatedly allocate then free test
    10000 times kmalloc(8) -> 79 cycles kfree -> 92 cycles
    10000 times kmalloc(16) -> 79 cycles kfree -> 93 cycles
    10000 times kmalloc(32) -> 88 cycles kfree -> 95 cycles
    10000 times kmalloc(64) -> 124 cycles kfree -> 132 cycles
    10000 times kmalloc(128) -> 157 cycles kfree -> 247 cycles
    10000 times kmalloc(256) -> 200 cycles kfree -> 257 cycles
    10000 times kmalloc(512) -> 250 cycles kfree -> 277 cycles
    10000 times kmalloc(1024) -> 337 cycles kfree -> 314 cycles
    10000 times kmalloc(2048) -> 365 cycles kfree -> 330 cycles
    10000 times kmalloc(4096) -> 352 cycles kfree -> 240 cycles
    10000 times kmalloc(8192) -> 456 cycles kfree -> 340 cycles
    10000 times kmalloc(16384) -> 646 cycles kfree -> 471 cycles
    2. Kmalloc: alloc/free test
    10000 times kmalloc(8)/kfree -> 124 cycles
    10000 times kmalloc(16)/kfree -> 124 cycles
    10000 times kmalloc(32)/kfree -> 124 cycles
    10000 times kmalloc(64)/kfree -> 124 cycles
    10000 times kmalloc(128)/kfree -> 124 cycles
    10000 times kmalloc(256)/kfree -> 132 cycles
    10000 times kmalloc(512)/kfree -> 132 cycles
    10000 times kmalloc(1024)/kfree -> 132 cycles
    10000 times kmalloc(2048)/kfree -> 132 cycles
    10000 times kmalloc(4096)/kfree -> 319 cycles
    10000 times kmalloc(8192)/kfree -> 486 cycles
    10000 times kmalloc(16384)/kfree -> 539 cycles
    
    cmpxchg_local NUMA/discontig
    
    1. Kmalloc: Repeatedly allocate then free test
    10000 times kmalloc(8) -> 55 cycles kfree -> 90 cycles
    10000 times kmalloc(16) -> 55 cycles kfree -> 92 cycles
    10000 times kmalloc(32) -> 70 cycles kfree -> 91 cycles
    10000 times kmalloc(64) -> 100 cycles kfree -> 141 cycles
    10000 times kmalloc(128) -> 128 cycles kfree -> 233 cycles
    10000 times kmalloc(256) -> 172 cycles kfree -> 251 cycles
    10000 times kmalloc(512) -> 225 cycles kfree -> 275 cycles
    10000 times kmalloc(1024) -> 325 cycles kfree -> 311 cycles
    10000 times kmalloc(2048) -> 346 cycles kfree -> 330 cycles
    10000 times kmalloc(4096) -> 351 cycles kfree -> 238 cycles
    10000 times kmalloc(8192) -> 450 cycles kfree -> 342 cycles
    10000 times kmalloc(16384) -> 630 cycles kfree -> 546 cycles
    2. Kmalloc: alloc/free test
    10000 times kmalloc(8)/kfree -> 81 cycles
    10000 times kmalloc(16)/kfree -> 81 cycles
    10000 times kmalloc(32)/kfree -> 81 cycles
    10000 times kmalloc(64)/kfree -> 81 cycles
    10000 times kmalloc(128)/kfree -> 81 cycles
    10000 times kmalloc(256)/kfree -> 91 cycles
    10000 times kmalloc(512)/kfree -> 90 cycles
    10000 times kmalloc(1024)/kfree -> 91 cycles
    10000 times kmalloc(2048)/kfree -> 90 cycles
    10000 times kmalloc(4096)/kfree -> 318 cycles
    10000 times kmalloc(8192)/kfree -> 483 cycles
    10000 times kmalloc(16384)/kfree -> 536 cycles
    
    Changelog:
    - Ran though checkpatch.
    
    Signed-off-by: Mathieu Desnoyers <mathieu.desnoyers@polymtl.ca>
    Cc: <linux-arch@vger.kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

diff --git a/include/asm-generic/cmpxchg-local.h b/include/asm-generic/cmpxchg-local.h
new file mode 100644
index 000000000000..b2ba2fc8829a
--- /dev/null
+++ b/include/asm-generic/cmpxchg-local.h
@@ -0,0 +1,65 @@
+#ifndef __ASM_GENERIC_CMPXCHG_LOCAL_H
+#define __ASM_GENERIC_CMPXCHG_LOCAL_H
+
+#include <linux/types.h>
+
+extern unsigned long wrong_size_cmpxchg(volatile void *ptr);
+
+/*
+ * Generic version of __cmpxchg_local (disables interrupts). Takes an unsigned
+ * long parameter, supporting various types of architectures.
+ */
+static inline unsigned long __cmpxchg_local_generic(volatile void *ptr,
+		unsigned long old, unsigned long new, int size)
+{
+	unsigned long flags, prev;
+
+	/*
+	 * Sanity checking, compile-time.
+	 */
+	if (size == 8 && sizeof(unsigned long) != 8)
+		wrong_size_cmpxchg(ptr);
+
+	local_irq_save(flags);
+	switch (size) {
+	case 1: prev = *(u8 *)ptr;
+		if (prev == old)
+			*(u8 *)ptr = (u8)new;
+		break;
+	case 2: prev = *(u16 *)ptr;
+		if (prev == old)
+			*(u16 *)ptr = (u16)new;
+		break;
+	case 4: prev = *(u32 *)ptr;
+		if (prev == old)
+			*(u32 *)ptr = (u32)new;
+		break;
+	case 8: prev = *(u64 *)ptr;
+		if (prev == old)
+			*(u64 *)ptr = (u64)new;
+		break;
+	default:
+		wrong_size_cmpxchg(ptr);
+	}
+	local_irq_restore(flags);
+	return prev;
+}
+
+/*
+ * Generic version of __cmpxchg64_local. Takes an u64 parameter.
+ */
+static inline u64 __cmpxchg64_local_generic(volatile void *ptr,
+		u64 old, u64 new)
+{
+	u64 prev;
+	unsigned long flags;
+
+	local_irq_save(flags);
+	prev = *(u64 *)ptr;
+	if (prev == old)
+		*(u64 *)ptr = new;
+	local_irq_restore(flags);
+	return prev;
+}
+
+#endif
