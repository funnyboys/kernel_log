commit 23818b3d8590a79d56af9659cf709ebfae30f832
Author: Sudeep Holla <sudeep.holla@arm.com>
Date:   Fri Apr 3 18:10:18 2020 +0100

    firmware: arm_scpi: Add include guard to linux/scpi_protocol.h
    
    If this header is include twice, it will generate loads of compile
    time error with the following below error pattern. It was reported by
    0day kbuild robot on a branch pushed with double inclusion by accident.
    This is based on the similar change in linux/scmi_protocol.h
    
            error: conflicting types for ‘...’
            note: previous declaration of ‘...’ was here
            error: redefinition of ‘...’
    
    Add a header include guard just in case.
    
    Link: https://lore.kernel.org/r/20200403171018.1230-2-sudeep.holla@arm.com
    Reported-by: kbuild test robot <lkp@intel.com>
    Signed-off-by: Sudeep Holla <sudeep.holla@arm.com>

diff --git a/include/linux/scpi_protocol.h b/include/linux/scpi_protocol.h
index ecb004711acf..afbf8037d8db 100644
--- a/include/linux/scpi_protocol.h
+++ b/include/linux/scpi_protocol.h
@@ -4,6 +4,10 @@
  *
  * Copyright (C) 2014 ARM Ltd.
  */
+
+#ifndef _LINUX_SCPI_PROTOCOL_H
+#define _LINUX_SCPI_PROTOCOL_H
+
 #include <linux/types.h>
 
 struct scpi_opp {
@@ -71,3 +75,5 @@ struct scpi_ops *get_scpi_ops(void);
 #else
 static inline struct scpi_ops *get_scpi_ops(void) { return NULL; }
 #endif
+
+#endif /* _LINUX_SCPI_PROTOCOL_H */

commit 9952f6918daa4ab5fc81307a9f90e31a4df3b200
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Tue May 28 10:10:04 2019 -0700

    treewide: Replace GPLv2 boilerplate/reference with SPDX - rule 201
    
    Based on 1 normalized pattern(s):
    
      this program is free software you can redistribute it and or modify
      it under the terms and conditions of the gnu general public license
      version 2 as published by the free software foundation this program
      is distributed in the hope it will be useful but without any
      warranty without even the implied warranty of merchantability or
      fitness for a particular purpose see the gnu general public license
      for more details you should have received a copy of the gnu general
      public license along with this program if not see http www gnu org
      licenses
    
    extracted by the scancode license scanner the SPDX license identifier
    
      GPL-2.0-only
    
    has been chosen to replace the boilerplate/reference in 228 file(s).
    
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Reviewed-by: Allison Randal <allison@lohutok.net>
    Reviewed-by: Steve Winslow <swinslow@gmail.com>
    Reviewed-by: Richard Fontana <rfontana@redhat.com>
    Reviewed-by: Alexios Zavras <alexios.zavras@intel.com>
    Cc: linux-spdx@vger.kernel.org
    Link: https://lkml.kernel.org/r/20190528171438.107155473@linutronix.de
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/include/linux/scpi_protocol.h b/include/linux/scpi_protocol.h
index 327d65663dbf..ecb004711acf 100644
--- a/include/linux/scpi_protocol.h
+++ b/include/linux/scpi_protocol.h
@@ -1,19 +1,8 @@
+/* SPDX-License-Identifier: GPL-2.0-only */
 /*
  * SCPI Message Protocol driver header
  *
  * Copyright (C) 2014 ARM Ltd.
- *
- * This program is free software; you can redistribute it and/or modify it
- * under the terms and conditions of the GNU General Public License,
- * version 2, as published by the Free Software Foundation.
- *
- * This program is distributed in the hope it will be useful, but WITHOUT
- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
- * FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for
- * more details.
- *
- * You should have received a copy of the GNU General Public License along with
- * this program. If not, see <http://www.gnu.org/licenses/>.
  */
 #include <linux/types.h>
 

commit 45ca7df7c345465dbd2426a33012c9c33d27de62
Author: Sudeep Holla <sudeep.holla@arm.com>
Date:   Thu Apr 27 15:08:51 2017 +0100

    firmware: arm_scpi: add support to populate OPPs and get transition latency
    
    Currently only CPU devices use the transition latency and the OPPs
    populated in the SCPI driver. scpi-cpufreq has logic to handle these.
    However, even GPU and other users of SCPI DVFS will need the same logic.
    
    In order to avoid duplication, this patch adds support to get DVFS
    transition latency and add all the OPPs to the device using OPP library
    helper functions. The helper functions added here can be used for any
    device whose DVFS are managed by SCPI.
    
    Also, we also have incorrect dependency on the cluster identifier for
    the CPUs. It's fundamentally wrong as the domain id need not match the
    cluster id. This patch gets rid of that dependency by making use of the
    clock bindings which are already in place.
    
    Signed-off-by: Sudeep Holla <sudeep.holla@arm.com>

diff --git a/include/linux/scpi_protocol.h b/include/linux/scpi_protocol.h
index dc5f989be226..327d65663dbf 100644
--- a/include/linux/scpi_protocol.h
+++ b/include/linux/scpi_protocol.h
@@ -67,6 +67,9 @@ struct scpi_ops {
 	int (*dvfs_get_idx)(u8);
 	int (*dvfs_set_idx)(u8, u8);
 	struct scpi_dvfs_info *(*dvfs_get_info)(u8);
+	int (*device_domain_id)(struct device *);
+	int (*get_transition_latency)(struct device *);
+	int (*add_opps_to_device)(struct device *);
 	int (*sensor_get_capability)(u16 *sensors);
 	int (*sensor_get_info)(u16 sensor_id, struct scpi_sensor_info *);
 	int (*sensor_get_value)(u16, u64 *);

commit 37a441dcd5f4db7f769fee50ba7a2c602903a052
Author: Sudeep Holla <sudeep.holla@arm.com>
Date:   Wed Apr 20 14:05:14 2016 +0100

    firmware: arm_scpi: add support for device power state management
    
    SCPI protocol supports device power state management. This deals with
    power states of various peripheral devices in the system other than the
    core compute subsystem.
    
    This patch adds support for the power state management of those
    peripheral devices.
    
    Tested-by: Mathieu Poirier <mathieu.poirier@linaro.org>
    Tested-by: Jon Medhurst <tixy@linaro.org>
    Reviewed-by: Jon Medhurst <tixy@linaro.org>
    Reviewed-by: Kevin Hilman <khilman@baylibre.com>
    Reviewed-by: Ulf Hansson <ulf.hansson@linaro.org>
    Signed-off-by: Sudeep Holla <sudeep.holla@arm.com>

diff --git a/include/linux/scpi_protocol.h b/include/linux/scpi_protocol.h
index 35de50a65665..dc5f989be226 100644
--- a/include/linux/scpi_protocol.h
+++ b/include/linux/scpi_protocol.h
@@ -70,6 +70,8 @@ struct scpi_ops {
 	int (*sensor_get_capability)(u16 *sensors);
 	int (*sensor_get_info)(u16 sensor_id, struct scpi_sensor_info *);
 	int (*sensor_get_value)(u16, u64 *);
+	int (*device_get_power_state)(u16);
+	int (*device_set_power_state)(u16, u8);
 };
 
 #if IS_REACHABLE(CONFIG_ARM_SCPI_PROTOCOL)

commit fb3b07ef399bd6984f3361a709829618b75e98d8
Author: Sudeep Holla <sudeep.holla@arm.com>
Date:   Mon Jan 25 10:53:38 2016 +0000

    hwmon: (scpi) add energy meter support
    
    SCPI specification v1.1 adds support for energy sensors. This patch
    adds support for the same.
    
    Acked-by: Guenter Roeck <linux@roeck-us.net>
    Reviewed-by: Punit Agrawal <punit.agrawal@arm.com>
    Signed-off-by: Sudeep Holla <sudeep.holla@arm.com>

diff --git a/include/linux/scpi_protocol.h b/include/linux/scpi_protocol.h
index ecd248d46281..35de50a65665 100644
--- a/include/linux/scpi_protocol.h
+++ b/include/linux/scpi_protocol.h
@@ -33,6 +33,7 @@ enum scpi_sensor_class {
 	VOLTAGE,
 	CURRENT,
 	POWER,
+	ENERGY,
 };
 
 struct scpi_sensor_info {

commit 2e8741599cf128ea27674d9ae93b46e847f820b4
Author: Sudeep Holla <sudeep.holla@arm.com>
Date:   Thu Jan 14 17:58:02 2016 +0000

    firmware: arm_scpi: add support for 64-bit sensor values
    
    SCPI specification version 1.1 extended the sensor from 32-bit to 64-bit
    values in order to accommodate new sensor class with 64-bit requirements
    
    Since the SCPI driver sets the higher 32-bit for older protocol version
    to zeros, there's no need to explicitly check the SCPI protocol version
    and the backward compatibility is maintainted.
    
    Acked-by: Guenter Roeck <linux@roeck-us.net>
    Reviewed-by: Punit Agrawal <punit.agrawal@arm.com>
    Signed-off-by: Sudeep Holla <sudeep.holla@arm.com>

diff --git a/include/linux/scpi_protocol.h b/include/linux/scpi_protocol.h
index 72ce932c69b2..ecd248d46281 100644
--- a/include/linux/scpi_protocol.h
+++ b/include/linux/scpi_protocol.h
@@ -68,7 +68,7 @@ struct scpi_ops {
 	struct scpi_dvfs_info *(*dvfs_get_info)(u8);
 	int (*sensor_get_capability)(u16 *sensors);
 	int (*sensor_get_info)(u16 sensor_id, struct scpi_sensor_info *);
-	int (*sensor_get_value)(u16, u32 *);
+	int (*sensor_get_value)(u16, u64 *);
 };
 
 #if IS_REACHABLE(CONFIG_ARM_SCPI_PROTOCOL)

commit 851df3dc11136fde86ebd78ee7527cb43c7cd349
Author: Arnd Bergmann <arnd@arndb.de>
Date:   Mon Nov 16 22:34:58 2015 +0100

    scpi: hide get_scpi_ops in module from built-in code
    
    The scpi_clock driver can be built-in when CONFIG_COMPILE_TEST
    is set even when ARM_SCPI_PROTOCOL is a loadable module, and
    that results in a link error:
    
    drivers/built-in.o: In function `scpi_clocks_probe':
    (.text+0x14453c): undefined reference to `get_scpi_ops'
    
    Using #if IS_REACHABLE() around the get_scpi_ops() declaration
    makes it build successfully in this case for compile-testing,
    but the effect is the same as when ARM_SCPI_PROTOCOL is
    disabled, as the code will not be used.
    
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>
    Acked-by: Punit Agrawal <punit.agrawal@arm.com>

diff --git a/include/linux/scpi_protocol.h b/include/linux/scpi_protocol.h
index 80af3cd35ae4..72ce932c69b2 100644
--- a/include/linux/scpi_protocol.h
+++ b/include/linux/scpi_protocol.h
@@ -71,7 +71,7 @@ struct scpi_ops {
 	int (*sensor_get_value)(u16, u32 *);
 };
 
-#if IS_ENABLED(CONFIG_ARM_SCPI_PROTOCOL)
+#if IS_REACHABLE(CONFIG_ARM_SCPI_PROTOCOL)
 struct scpi_ops *get_scpi_ops(void);
 #else
 static inline struct scpi_ops *get_scpi_ops(void) { return NULL; }

commit 38a1bdc9ff9f6c8cfad228eac5c1ce31ce038b25
Author: Punit Agrawal <punit.agrawal@arm.com>
Date:   Fri Jun 19 15:31:46 2015 +0100

    firmware: arm_scpi: Extend to support sensors
    
    ARM System Control Processor (SCP) provides an API to query and use
    the sensors available in the system. Extend the SCPI driver to support
     sensor messages.
    
    Signed-off-by: Punit Agrawal <punit.agrawal@arm.com>
    Acked-by: Sudeep Holla <sudeep.holla@arm.com>

diff --git a/include/linux/scpi_protocol.h b/include/linux/scpi_protocol.h
index e7169cd54e19..80af3cd35ae4 100644
--- a/include/linux/scpi_protocol.h
+++ b/include/linux/scpi_protocol.h
@@ -28,6 +28,20 @@ struct scpi_dvfs_info {
 	struct scpi_opp *opps;
 };
 
+enum scpi_sensor_class {
+	TEMPERATURE,
+	VOLTAGE,
+	CURRENT,
+	POWER,
+};
+
+struct scpi_sensor_info {
+	u16 sensor_id;
+	u8 class;
+	u8 trigger_type;
+	char name[20];
+} __packed;
+
 /**
  * struct scpi_ops - represents the various operations provided
  *	by SCP through SCPI message protocol
@@ -52,6 +66,9 @@ struct scpi_ops {
 	int (*dvfs_get_idx)(u8);
 	int (*dvfs_set_idx)(u8, u8);
 	struct scpi_dvfs_info *(*dvfs_get_info)(u8);
+	int (*sensor_get_capability)(u16 *sensors);
+	int (*sensor_get_info)(u16 sensor_id, struct scpi_sensor_info *);
+	int (*sensor_get_value)(u16, u32 *);
 };
 
 #if IS_ENABLED(CONFIG_ARM_SCPI_PROTOCOL)

commit 8cb7cf56c9fe5412de238465b27ef35b4d2801aa
Author: Sudeep Holla <sudeep.holla@arm.com>
Date:   Mon Mar 30 10:59:52 2015 +0100

    firmware: add support for ARM System Control and Power Interface(SCPI) protocol
    
    This patch adds support for System Control and Power Interface (SCPI)
    Message Protocol used between the Application Cores(AP) and the System
    Control Processor(SCP). The MHU peripheral provides a mechanism for
    inter-processor communication between SCP's M3 processor and AP.
    
    SCP offers control and management of the core/cluster power states,
    various power domain DVFS including the core/cluster, certain system
    clocks configuration, thermal sensors and many others.
    
    This protocol driver provides interface for all the client drivers using
    SCPI to make use of the features offered by the SCP.
    
    Signed-off-by: Sudeep Holla <sudeep.holla@arm.com>
    Reviewed-by: Jon Medhurst (Tixy) <tixy@linaro.org>
    Cc: Jassi Brar <jassisinghbrar@gmail.com>
    Cc: Liviu Dudau <Liviu.Dudau@arm.com>
    Cc: Lorenzo Pieralisi <lorenzo.pieralisi@arm.com>

diff --git a/include/linux/scpi_protocol.h b/include/linux/scpi_protocol.h
new file mode 100644
index 000000000000..e7169cd54e19
--- /dev/null
+++ b/include/linux/scpi_protocol.h
@@ -0,0 +1,61 @@
+/*
+ * SCPI Message Protocol driver header
+ *
+ * Copyright (C) 2014 ARM Ltd.
+ *
+ * This program is free software; you can redistribute it and/or modify it
+ * under the terms and conditions of the GNU General Public License,
+ * version 2, as published by the Free Software Foundation.
+ *
+ * This program is distributed in the hope it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for
+ * more details.
+ *
+ * You should have received a copy of the GNU General Public License along with
+ * this program. If not, see <http://www.gnu.org/licenses/>.
+ */
+#include <linux/types.h>
+
+struct scpi_opp {
+	u32 freq;
+	u32 m_volt;
+} __packed;
+
+struct scpi_dvfs_info {
+	unsigned int count;
+	unsigned int latency; /* in nanoseconds */
+	struct scpi_opp *opps;
+};
+
+/**
+ * struct scpi_ops - represents the various operations provided
+ *	by SCP through SCPI message protocol
+ * @get_version: returns the major and minor revision on the SCPI
+ *	message protocol
+ * @clk_get_range: gets clock range limit(min - max in Hz)
+ * @clk_get_val: gets clock value(in Hz)
+ * @clk_set_val: sets the clock value, setting to 0 will disable the
+ *	clock (if supported)
+ * @dvfs_get_idx: gets the Operating Point of the given power domain.
+ *	OPP is an index to the list return by @dvfs_get_info
+ * @dvfs_set_idx: sets the Operating Point of the given power domain.
+ *	OPP is an index to the list return by @dvfs_get_info
+ * @dvfs_get_info: returns the DVFS capabilities of the given power
+ *	domain. It includes the OPP list and the latency information
+ */
+struct scpi_ops {
+	u32 (*get_version)(void);
+	int (*clk_get_range)(u16, unsigned long *, unsigned long *);
+	unsigned long (*clk_get_val)(u16);
+	int (*clk_set_val)(u16, unsigned long);
+	int (*dvfs_get_idx)(u8);
+	int (*dvfs_set_idx)(u8, u8);
+	struct scpi_dvfs_info *(*dvfs_get_info)(u8);
+};
+
+#if IS_ENABLED(CONFIG_ARM_SCPI_PROTOCOL)
+struct scpi_ops *get_scpi_ops(void);
+#else
+static inline struct scpi_ops *get_scpi_ops(void) { return NULL; }
+#endif
