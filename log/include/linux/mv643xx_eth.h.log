commit b24413180f5600bcb3bb70fbed5cf186b60864bd
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Wed Nov 1 15:07:57 2017 +0100

    License cleanup: add SPDX GPL-2.0 license identifier to files with no license
    
    Many source files in the tree are missing licensing information, which
    makes it harder for compliance tools to determine the correct license.
    
    By default all files without license information are under the default
    license of the kernel, which is GPL version 2.
    
    Update the files which contain no license information with the 'GPL-2.0'
    SPDX license identifier.  The SPDX identifier is a legally binding
    shorthand, which can be used instead of the full boiler plate text.
    
    This patch is based on work done by Thomas Gleixner and Kate Stewart and
    Philippe Ombredanne.
    
    How this work was done:
    
    Patches were generated and checked against linux-4.14-rc6 for a subset of
    the use cases:
     - file had no licensing information it it.
     - file was a */uapi/* one with no licensing information in it,
     - file was a */uapi/* one with existing licensing information,
    
    Further patches will be generated in subsequent months to fix up cases
    where non-standard license headers were used, and references to license
    had to be inferred by heuristics based on keywords.
    
    The analysis to determine which SPDX License Identifier to be applied to
    a file was done in a spreadsheet of side by side results from of the
    output of two independent scanners (ScanCode & Windriver) producing SPDX
    tag:value files created by Philippe Ombredanne.  Philippe prepared the
    base worksheet, and did an initial spot review of a few 1000 files.
    
    The 4.13 kernel was the starting point of the analysis with 60,537 files
    assessed.  Kate Stewart did a file by file comparison of the scanner
    results in the spreadsheet to determine which SPDX license identifier(s)
    to be applied to the file. She confirmed any determination that was not
    immediately clear with lawyers working with the Linux Foundation.
    
    Criteria used to select files for SPDX license identifier tagging was:
     - Files considered eligible had to be source code files.
     - Make and config files were included as candidates if they contained >5
       lines of source
     - File already had some variant of a license header in it (even if <5
       lines).
    
    All documentation files were explicitly excluded.
    
    The following heuristics were used to determine which SPDX license
    identifiers to apply.
    
     - when both scanners couldn't find any license traces, file was
       considered to have no license information in it, and the top level
       COPYING file license applied.
    
       For non */uapi/* files that summary was:
    
       SPDX license identifier                            # files
       ---------------------------------------------------|-------
       GPL-2.0                                              11139
    
       and resulted in the first patch in this series.
    
       If that file was a */uapi/* path one, it was "GPL-2.0 WITH
       Linux-syscall-note" otherwise it was "GPL-2.0".  Results of that was:
    
       SPDX license identifier                            # files
       ---------------------------------------------------|-------
       GPL-2.0 WITH Linux-syscall-note                        930
    
       and resulted in the second patch in this series.
    
     - if a file had some form of licensing information in it, and was one
       of the */uapi/* ones, it was denoted with the Linux-syscall-note if
       any GPL family license was found in the file or had no licensing in
       it (per prior point).  Results summary:
    
       SPDX license identifier                            # files
       ---------------------------------------------------|------
       GPL-2.0 WITH Linux-syscall-note                       270
       GPL-2.0+ WITH Linux-syscall-note                      169
       ((GPL-2.0 WITH Linux-syscall-note) OR BSD-2-Clause)    21
       ((GPL-2.0 WITH Linux-syscall-note) OR BSD-3-Clause)    17
       LGPL-2.1+ WITH Linux-syscall-note                      15
       GPL-1.0+ WITH Linux-syscall-note                       14
       ((GPL-2.0+ WITH Linux-syscall-note) OR BSD-3-Clause)    5
       LGPL-2.0+ WITH Linux-syscall-note                       4
       LGPL-2.1 WITH Linux-syscall-note                        3
       ((GPL-2.0 WITH Linux-syscall-note) OR MIT)              3
       ((GPL-2.0 WITH Linux-syscall-note) AND MIT)             1
    
       and that resulted in the third patch in this series.
    
     - when the two scanners agreed on the detected license(s), that became
       the concluded license(s).
    
     - when there was disagreement between the two scanners (one detected a
       license but the other didn't, or they both detected different
       licenses) a manual inspection of the file occurred.
    
     - In most cases a manual inspection of the information in the file
       resulted in a clear resolution of the license that should apply (and
       which scanner probably needed to revisit its heuristics).
    
     - When it was not immediately clear, the license identifier was
       confirmed with lawyers working with the Linux Foundation.
    
     - If there was any question as to the appropriate license identifier,
       the file was flagged for further research and to be revisited later
       in time.
    
    In total, over 70 hours of logged manual review was done on the
    spreadsheet to determine the SPDX license identifiers to apply to the
    source files by Kate, Philippe, Thomas and, in some cases, confirmation
    by lawyers working with the Linux Foundation.
    
    Kate also obtained a third independent scan of the 4.13 code base from
    FOSSology, and compared selected files where the other two scanners
    disagreed against that SPDX file, to see if there was new insights.  The
    Windriver scanner is based on an older version of FOSSology in part, so
    they are related.
    
    Thomas did random spot checks in about 500 files from the spreadsheets
    for the uapi headers and agreed with SPDX license identifier in the
    files he inspected. For the non-uapi files Thomas did random spot checks
    in about 15000 files.
    
    In initial set of patches against 4.14-rc6, 3 files were found to have
    copy/paste license identifier errors, and have been fixed to reflect the
    correct identifier.
    
    Additionally Philippe spent 10 hours this week doing a detailed manual
    inspection and review of the 12,461 patched files from the initial patch
    version early this week with:
     - a full scancode scan run, collecting the matched texts, detected
       license ids and scores
     - reviewing anything where there was a license detected (about 500+
       files) to ensure that the applied SPDX license was correct
     - reviewing anything where there was no detection but the patch license
       was not GPL-2.0 WITH Linux-syscall-note to ensure that the applied
       SPDX license was correct
    
    This produced a worksheet with 20 files needing minor correction.  This
    worksheet was then exported into 3 different .csv files for the
    different types of files to be modified.
    
    These .csv files were then reviewed by Greg.  Thomas wrote a script to
    parse the csv files and add the proper SPDX tag to the file, in the
    format that the file expected.  This script was further refined by Greg
    based on the output to detect more types of files automatically and to
    distinguish between header and source .c files (which need different
    comment types.)  Finally Greg ran the script using the .csv files to
    generate the patches.
    
    Reviewed-by: Kate Stewart <kstewart@linuxfoundation.org>
    Reviewed-by: Philippe Ombredanne <pombredanne@nexb.com>
    Reviewed-by: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/include/linux/mv643xx_eth.h b/include/linux/mv643xx_eth.h
index 61a0da38d0cb..3682ae75c7aa 100644
--- a/include/linux/mv643xx_eth.h
+++ b/include/linux/mv643xx_eth.h
@@ -1,3 +1,4 @@
+/* SPDX-License-Identifier: GPL-2.0 */
 /*
  * MV-643XX ethernet platform device data definition file.
  */

commit 574e2af7c0af3273836def5e66f236521bb433c9
Author: Joe Perches <joe@perches.com>
Date:   Thu Aug 1 16:17:48 2013 -0700

    include: Convert ethernet mac address declarations to use ETH_ALEN
    
    It's convenient to have ethernet mac addresses use
    ETH_ALEN to be able to grep for them a bit easier and
    also to ensure that the addresses are __aligned(2).
    
    Add #include <linux/if_ether.h> as necessary.
    
    Signed-off-by: Joe Perches <joe@perches.com>
    Acked-by: Mauro Carvalho Chehab <m.chehab@samsung.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

diff --git a/include/linux/mv643xx_eth.h b/include/linux/mv643xx_eth.h
index 6e8215b15998..61a0da38d0cb 100644
--- a/include/linux/mv643xx_eth.h
+++ b/include/linux/mv643xx_eth.h
@@ -6,6 +6,7 @@
 #define __LINUX_MV643XX_ETH_H
 
 #include <linux/mbus.h>
+#include <linux/if_ether.h>
 
 #define MV643XX_ETH_SHARED_NAME		"mv643xx_eth"
 #define MV643XX_ETH_NAME		"mv643xx_eth_port"
@@ -48,7 +49,7 @@ struct mv643xx_eth_platform_data {
 	 * Use this MAC address if it is valid, overriding the
 	 * address that is already in the hardware.
 	 */
-	u8			mac_addr[6];
+	u8			mac_addr[ETH_ALEN];
 
 	/*
 	 * If speed is 0, autonegotiation is enabled.

commit 5f292354e7ff69afbe9a272ef997b8f3edaf860a
Author: Sebastian Hesselbarth <sebastian.hesselbarth@gmail.com>
Date:   Wed May 29 09:32:45 2013 +0000

    net: mv643xx_eth: add phy_node to platform_data struct
    
    This adds a struct device_node pointer for a phy passed by phandle
    to mv643xx_eth node.
    
    Signed-off-by: Sebastian Hesselbarth <sebastian.hesselbarth@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

diff --git a/include/linux/mv643xx_eth.h b/include/linux/mv643xx_eth.h
index 141d395bbb5f..6e8215b15998 100644
--- a/include/linux/mv643xx_eth.h
+++ b/include/linux/mv643xx_eth.h
@@ -30,6 +30,7 @@ struct mv643xx_eth_shared_platform_data {
 #define MV643XX_ETH_PHY_ADDR(x)		(0x80 | (x))
 #define MV643XX_ETH_PHY_NONE		0xff
 
+struct device_node;
 struct mv643xx_eth_platform_data {
 	/*
 	 * Pointer back to our parent instance, and our port number.
@@ -41,6 +42,7 @@ struct mv643xx_eth_platform_data {
 	 * Whether a PHY is present, and if yes, at which address.
 	 */
 	int			phy_addr;
+	struct device_node	*phy_node;
 
 	/*
 	 * Use this MAC address if it is valid, overriding the

commit c3a07134e6aa5b93a37f72ffa3d11fadf72bf757
Author: Florian Fainelli <florian@openwrt.org>
Date:   Fri Mar 22 03:39:28 2013 +0000

    mv643xx_eth: convert to use the Marvell Orion MDIO driver
    
    This patch converts the Marvell MV643XX ethernet driver to use the
    Marvell Orion MDIO driver. As a result, PowerPC and ARM platforms
    registering the Marvell MV643XX ethernet driver are also updated to
    register a Marvell Orion MDIO driver. This driver voluntarily overlaps
    with the Marvell Ethernet shared registers because it will use a subset
    of this shared register (shared_base + 0x4 to shared_base + 0x84). The
    Ethernet driver is also updated to look up for a PHY device using the
    Orion MDIO bus driver.
    
    For ARM and PowerPC we register a single instance of the "mvmdio" driver
    in the system like it used to be done with the use of the "shared_smi"
    platform_data cookie on ARM.
    
    Note that it is safe to register the mvmdio driver only for the "ge00"
    instance of the driver because this "ge00" interface is guaranteed to
    always be explicitely registered by consumers of
    arch/arm/plat-orion/common.c and other instances (ge01, ge10 and ge11)
    were all pointing their shared_smi to ge00. For PowerPC the in-tree
    Device Tree Source files mention only one MV643XX ethernet MAC instance
    so the MDIO bus driver is registered only when id == 0.
    
    Signed-off-by: Florian Fainelli <florian@openwrt.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>

diff --git a/include/linux/mv643xx_eth.h b/include/linux/mv643xx_eth.h
index 49258e0ed1c6..141d395bbb5f 100644
--- a/include/linux/mv643xx_eth.h
+++ b/include/linux/mv643xx_eth.h
@@ -19,7 +19,6 @@
 
 struct mv643xx_eth_shared_platform_data {
 	struct mbus_dram_target_info	*dram;
-	struct platform_device	*shared_smi;
 	/*
 	 * Max packet size for Tx IP/Layer 4 checksum, when set to 0, default
 	 * limit of 9KiB will be used.

commit 58569aee5a1a5dcc25c34a0a2ed9a377874e6b05
Author: Arnaud Patard (Rtp) <arnaud.patard@rtp-net.org>
Date:   Thu Jul 26 12:15:46 2012 +0200

    ARM: Orion: Set eth packet size csum offload limit
    
    The mv643xx ethernet controller limits the packet size for the TX
    checksum offloading. This patch sets this limits for Kirkwood and
    Dove which have smaller limits that the default.
    
    As a side note, this patch is an updated version of a patch sent some years
    ago: http://lists.infradead.org/pipermail/linux-arm-kernel/2010-June/017320.html
    which seems to have been lost.
    
    Signed-off-by: Arnaud Patard <arnaud.patard@rtp-net.org>
    Signed-off-by: Jason Cooper <jason@lakedaemon.net>
    Cc: <stable@vger.kernel.org>

diff --git a/include/linux/mv643xx_eth.h b/include/linux/mv643xx_eth.h
index 51bf8ada6dc0..49258e0ed1c6 100644
--- a/include/linux/mv643xx_eth.h
+++ b/include/linux/mv643xx_eth.h
@@ -15,6 +15,8 @@
 #define MV643XX_ETH_SIZE_REG_4		0x2224
 #define MV643XX_ETH_BASE_ADDR_ENABLE_REG	0x2290
 
+#define MV643XX_TX_CSUM_DEFAULT_LIMIT	0
+
 struct mv643xx_eth_shared_platform_data {
 	struct mbus_dram_target_info	*dram;
 	struct platform_device	*shared_smi;

commit 452503ebc7cc4cce5b9e52cf2f03255365a53234
Author: Andrew Lunn <andrew@lunn.ch>
Date:   Sat Dec 24 01:24:24 2011 +0100

    ARM: Orion: Eth: Add clk/clkdev support.
    
    The t_clk is moved from the shared part of the ethernet driver into
    the per port section. Each port can have its own gated clock, which it
    needs to enable/disable, as oppossed to there being one clock shared
    by all ports. In practice, only kirkwood supports this at the moment.
    
    Signed-off-by: Andrew Lunn <andrew@lunn.ch>
    Tested-by: Jamie Lentin <jm@lentin.co.uk>
    Signed-off-by: Mike Turquette <mturquette@linaro.org>

diff --git a/include/linux/mv643xx_eth.h b/include/linux/mv643xx_eth.h
index 30b0c4e78f91..51bf8ada6dc0 100644
--- a/include/linux/mv643xx_eth.h
+++ b/include/linux/mv643xx_eth.h
@@ -18,7 +18,6 @@
 struct mv643xx_eth_shared_platform_data {
 	struct mbus_dram_target_info	*dram;
 	struct platform_device	*shared_smi;
-	unsigned int		t_clk;
 	/*
 	 * Max packet size for Tx IP/Layer 4 checksum, when set to 0, default
 	 * limit of 9KiB will be used.

commit 9b2c2ff7a1c04e69842254dd4afe0f8ad4efa439
Author: Saeed Bishara <saeed@marvell.com>
Date:   Sun Jun 27 00:26:43 2010 +0000

    mv643xx_eth: use sw csum for big packets
    
    Some controllers (KW, Dove) limits the TX IP/layer4 checksum offloading to a max size.
    
    Signed-off-by: Saeed Bishara <saeed@marvell.com>
    Acked-by: Lennert Buytenhek <buytenh@wantstofly.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>

diff --git a/include/linux/mv643xx_eth.h b/include/linux/mv643xx_eth.h
index cbbbe9bfecad..30b0c4e78f91 100644
--- a/include/linux/mv643xx_eth.h
+++ b/include/linux/mv643xx_eth.h
@@ -19,6 +19,11 @@ struct mv643xx_eth_shared_platform_data {
 	struct mbus_dram_target_info	*dram;
 	struct platform_device	*shared_smi;
 	unsigned int		t_clk;
+	/*
+	 * Max packet size for Tx IP/Layer 4 checksum, when set to 0, default
+	 * limit of 9KiB will be used.
+	 */
+	int			tx_csum_limit;
 };
 
 #define MV643XX_ETH_PHY_ADDR_DEFAULT	0

commit ac840605f3b1d9b99e1e6629a54994f8e003ff91
Author: Lennert Buytenhek <buytenh@wantstofly.org>
Date:   Tue Aug 26 14:06:47 2008 +0200

    mv643xx_eth: remove force_phy_addr field
    
    Currently, there are two different fields in the
    mv643xx_eth_platform_data struct that together describe the PHY
    address -- one field (phy_addr) has the address of the PHY, but if
    that address is zero, a second field (force_phy_addr) needs to be
    set to distinguish the actual address zero from a zero due to not
    having filled in the PHY address explicitly (which should mean
    'use the default PHY address').
    
    If we are a bit smarter about the encoding of the phy_addr field,
    we can avoid the need for a second field -- this patch does that.
    
    Signed-off-by: Lennert Buytenhek <buytenh@marvell.com>

diff --git a/include/linux/mv643xx_eth.h b/include/linux/mv643xx_eth.h
index 12339eb65704..cbbbe9bfecad 100644
--- a/include/linux/mv643xx_eth.h
+++ b/include/linux/mv643xx_eth.h
@@ -21,6 +21,10 @@ struct mv643xx_eth_shared_platform_data {
 	unsigned int		t_clk;
 };
 
+#define MV643XX_ETH_PHY_ADDR_DEFAULT	0
+#define MV643XX_ETH_PHY_ADDR(x)		(0x80 | (x))
+#define MV643XX_ETH_PHY_NONE		0xff
+
 struct mv643xx_eth_platform_data {
 	/*
 	 * Pointer back to our parent instance, and our port number.
@@ -31,7 +35,6 @@ struct mv643xx_eth_platform_data {
 	/*
 	 * Whether a PHY is present, and if yes, at which address.
 	 */
-	int			force_phy_addr;
 	int			phy_addr;
 
 	/*

commit fc0eb9f226d8ecc8e3b563bf808bd6d61a6153a1
Author: Lennert Buytenhek <buytenh@wantstofly.org>
Date:   Tue Aug 26 12:56:56 2008 +0200

    mv643xx_eth: smi sharing is a per-unit property, not a per-port one
    
    Which top-level unit's SMI interface to use should be a property of
    the top-level unit, not of the individual ports.  This patch moves the
    ->shared_smi pointer from the per-port platform data to the global
    platform data.
    
    Signed-off-by: Lennert Buytenhek <buytenh@marvell.com>

diff --git a/include/linux/mv643xx_eth.h b/include/linux/mv643xx_eth.h
index eb78b00edcde..12339eb65704 100644
--- a/include/linux/mv643xx_eth.h
+++ b/include/linux/mv643xx_eth.h
@@ -17,6 +17,7 @@
 
 struct mv643xx_eth_shared_platform_data {
 	struct mbus_dram_target_info	*dram;
+	struct platform_device	*shared_smi;
 	unsigned int		t_clk;
 };
 
@@ -30,7 +31,6 @@ struct mv643xx_eth_platform_data {
 	/*
 	 * Whether a PHY is present, and if yes, at which address.
 	 */
-	struct platform_device	*shared_smi;
 	int			force_phy_addr;
 	int			phy_addr;
 

commit f7981c1c67b53abb4a7d8a501e68585b9826179a
Author: Lennert Buytenhek <buytenh@wantstofly.org>
Date:   Tue Aug 26 10:23:22 2008 +0200

    mv643xx_eth: require contiguous receive and transmit queue numbering
    
    Simplify receive and transmit queue handling by requiring the set
    of queue numbers to be contiguous starting from zero.
    
    Signed-off-by: Lennert Buytenhek <buytenh@marvell.com>

diff --git a/include/linux/mv643xx_eth.h b/include/linux/mv643xx_eth.h
index 12078577aef6..eb78b00edcde 100644
--- a/include/linux/mv643xx_eth.h
+++ b/include/linux/mv643xx_eth.h
@@ -49,10 +49,10 @@ struct mv643xx_eth_platform_data {
 	int			duplex;
 
 	/*
-	 * Which RX/TX queues to use.
+	 * How many RX/TX queues to use.
 	 */
-	int			rx_queue_mask;
-	int			tx_queue_mask;
+	int			rx_queue_count;
+	int			tx_queue_count;
 
 	/*
 	 * Override default RX/TX queue sizes if nonzero.

commit 3d6b35bc5090cf8d8b7e62eca1f9c21ca56fc6c7
Author: Lennert Buytenhek <buytenh@wantstofly.org>
Date:   Mon Jun 2 01:28:22 2008 +0200

    mv643xx_eth: allow multiple TX queues
    
    As with the multiple RX queue support, allow the platform code to
    specify that the hardware we are running on supports multiple TX
    queues.  This patch only uses the highest-numbered enabled queue
    to send packets to for now, this can be extended later to enable
    QoS and such.
    
    Signed-off-by: Lennert Buytenhek <buytenh@marvell.com>
    Acked-by: Dale Farnsworth <dale@farnsworth.org>

diff --git a/include/linux/mv643xx_eth.h b/include/linux/mv643xx_eth.h
index 1afd7ba6d303..12078577aef6 100644
--- a/include/linux/mv643xx_eth.h
+++ b/include/linux/mv643xx_eth.h
@@ -49,9 +49,10 @@ struct mv643xx_eth_platform_data {
 	int			duplex;
 
 	/*
-	 * Which RX queues to use.
+	 * Which RX/TX queues to use.
 	 */
 	int			rx_queue_mask;
+	int			tx_queue_mask;
 
 	/*
 	 * Override default RX/TX queue sizes if nonzero.

commit 64da80a29c7455321a7df7b47e27d639e3944c1a
Author: Lennert Buytenhek <buytenh@wantstofly.org>
Date:   Mon Jun 2 01:01:26 2008 +0200

    mv643xx_eth: allow multiple RX queues
    
    Allow the platform code to specify that we are running on hardware
    that is capable of supporting multiple RX queues.  If this option
    is used, initialise all of the given RX queues instead of just RX
    queue zero.
    
    Signed-off-by: Lennert Buytenhek <buytenh@marvell.com>
    Acked-by: Dale Farnsworth <dale@farnsworth.org>

diff --git a/include/linux/mv643xx_eth.h b/include/linux/mv643xx_eth.h
index 646177660495..1afd7ba6d303 100644
--- a/include/linux/mv643xx_eth.h
+++ b/include/linux/mv643xx_eth.h
@@ -48,6 +48,11 @@ struct mv643xx_eth_platform_data {
 	int			speed;
 	int			duplex;
 
+	/*
+	 * Which RX queues to use.
+	 */
+	int			rx_queue_mask;
+
 	/*
 	 * Override default RX/TX queue sizes if nonzero.
 	 */

commit fc32b0e28df6655a15b488aaddfc1339f82dc13a
Author: Lennert Buytenhek <buytenh@wantstofly.org>
Date:   Mon Jun 2 00:28:40 2008 +0200

    mv643xx_eth: general cleanup
    
    General cleanup of the mv643xx_eth driver.  Mainly fixes coding
    style / indentation issues, get rid of some useless 'volatile's,
    kill some more superfluous comments, and such.
    
    Signed-off-by: Lennert Buytenhek <buytenh@marvell.com>
    Acked-by: Dale Farnsworth <dale@farnsworth.org>

diff --git a/include/linux/mv643xx_eth.h b/include/linux/mv643xx_eth.h
index a15cdd4a8e58..646177660495 100644
--- a/include/linux/mv643xx_eth.h
+++ b/include/linux/mv643xx_eth.h
@@ -17,30 +17,53 @@
 
 struct mv643xx_eth_shared_platform_data {
 	struct mbus_dram_target_info	*dram;
-	unsigned int	t_clk;
+	unsigned int		t_clk;
 };
 
 struct mv643xx_eth_platform_data {
+	/*
+	 * Pointer back to our parent instance, and our port number.
+	 */
 	struct platform_device	*shared;
-	int		port_number;
+	int			port_number;
 
+	/*
+	 * Whether a PHY is present, and if yes, at which address.
+	 */
 	struct platform_device	*shared_smi;
+	int			force_phy_addr;
+	int			phy_addr;
 
-	u16		force_phy_addr;	/* force override if phy_addr == 0 */
-	u16		phy_addr;
-
-	/* If speed is 0, then speed and duplex are autonegotiated. */
-	int		speed;		/* 0, SPEED_10, SPEED_100, SPEED_1000 */
-	int		duplex;		/* DUPLEX_HALF or DUPLEX_FULL */
-
-	/* non-zero values of the following fields override defaults */
-	u32		tx_queue_size;
-	u32		rx_queue_size;
-	u32		tx_sram_addr;
-	u32		tx_sram_size;
-	u32		rx_sram_addr;
-	u32		rx_sram_size;
-	u8		mac_addr[6];	/* mac address if non-zero*/
+	/*
+	 * Use this MAC address if it is valid, overriding the
+	 * address that is already in the hardware.
+	 */
+	u8			mac_addr[6];
+
+	/*
+	 * If speed is 0, autonegotiation is enabled.
+	 *   Valid values for speed: 0, SPEED_10, SPEED_100, SPEED_1000.
+	 *   Valid values for duplex: DUPLEX_HALF, DUPLEX_FULL.
+	 */
+	int			speed;
+	int			duplex;
+
+	/*
+	 * Override default RX/TX queue sizes if nonzero.
+	 */
+	int			rx_queue_size;
+	int			tx_queue_size;
+
+	/*
+	 * Use on-chip SRAM for RX/TX descriptors if size is nonzero
+	 * and sufficient to contain all descriptors for the requested
+	 * ring sizes.
+	 */
+	unsigned long		rx_sram_addr;
+	int			rx_sram_size;
+	unsigned long		tx_sram_addr;
+	int			tx_sram_size;
 };
 
-#endif /* __LINUX_MV643XX_ETH_H */
+
+#endif

commit ce4e2e4558903ef92edf1ab4e09b0b338a09fd61
Author: Lennert Buytenhek <buytenh@wantstofly.org>
Date:   Thu Apr 24 01:29:59 2008 +0200

    mv643xx_eth: inter-mv643xx SMI port sharing
    
    There exist chips with up to four mv643xx_eth silicon blocks but
    only one external SMI (MII management) interface -- the SMI logic
    of the first block is shared by all the blocks.
    
    Handle this by allowing a per-port override of which
    mv643xx_eth_shared's SMI registers (and spinlock) to use.
    
    Signed-off-by: Lennert Buytenhek <buytenh@marvell.com>
    Acked-by: Nicolas Pitre <nico@marvell.com>
    Signed-off-by: Dale Farnsworth <dale@farnsworth.org>

diff --git a/include/linux/mv643xx_eth.h b/include/linux/mv643xx_eth.h
index 66dc9571922a..a15cdd4a8e58 100644
--- a/include/linux/mv643xx_eth.h
+++ b/include/linux/mv643xx_eth.h
@@ -24,6 +24,8 @@ struct mv643xx_eth_platform_data {
 	struct platform_device	*shared;
 	int		port_number;
 
+	struct platform_device	*shared_smi;
+
 	u16		force_phy_addr;	/* force override if phy_addr == 0 */
 	u16		phy_addr;
 

commit 240e4419e0cfcba737883b637ec2bdcc071ea03d
Author: Lennert Buytenhek <buytenh@wantstofly.org>
Date:   Thu Apr 24 01:27:44 2008 +0200

    mv643xx_eth: shorten shared platform driver name
    
    Change the MV643XX_ETH_SHARED_NAME platform driver name to something
    shorter than 19 characters, so that we can register multiple (otherwise
    we end up with sysfs conflicts since all instances will map to
    "mv643xx_eth_shared." as there is a 20-char sysfs file name limit.)
    
    Signed-off-by: Lennert Buytenhek <buytenh@marvell.com>
    Acked-by: Nicolas Pitre <nico@marvell.com>
    Signed-off-by: Dale Farnsworth <dale@farnsworth.org>

diff --git a/include/linux/mv643xx_eth.h b/include/linux/mv643xx_eth.h
index 9f3a6032ff2e..66dc9571922a 100644
--- a/include/linux/mv643xx_eth.h
+++ b/include/linux/mv643xx_eth.h
@@ -7,8 +7,8 @@
 
 #include <linux/mbus.h>
 
-#define MV643XX_ETH_SHARED_NAME		"mv643xx_eth_shared"
-#define MV643XX_ETH_NAME		"mv643xx_eth"
+#define MV643XX_ETH_SHARED_NAME		"mv643xx_eth"
+#define MV643XX_ETH_NAME		"mv643xx_eth_port"
 #define MV643XX_ETH_SHARED_REGS		0x2000
 #define MV643XX_ETH_SHARED_REGS_SIZE	0x2000
 #define MV643XX_ETH_BAR_4		0x2220

commit c416a41f99be190e1f558cb06f70ddd560ce8b4b
Author: Lennert Buytenhek <buytenh@wantstofly.org>
Date:   Thu Apr 24 01:27:32 2008 +0200

    mv643xx_eth: configurable t_clk
    
    Make t_clk configurable via platform device data (with the current
    hardcoded value, 133 MHz, being the default), as it varies across
    different chip families.
    
    Signed-off-by: Lennert Buytenhek <buytenh@marvell.com>
    Acked-by: Nicolas Pitre <nico@marvell.com>
    Signed-off-by: Dale Farnsworth <dale@farnsworth.org>

diff --git a/include/linux/mv643xx_eth.h b/include/linux/mv643xx_eth.h
index 4801b02b444e..9f3a6032ff2e 100644
--- a/include/linux/mv643xx_eth.h
+++ b/include/linux/mv643xx_eth.h
@@ -17,6 +17,7 @@
 
 struct mv643xx_eth_shared_platform_data {
 	struct mbus_dram_target_info	*dram;
+	unsigned int	t_clk;
 };
 
 struct mv643xx_eth_platform_data {

commit f2ce825d2a89b30af14fa577298fecaab7bc9504
Author: Lennert Buytenhek <buytenh@wantstofly.org>
Date:   Thu Apr 24 01:27:17 2008 +0200

    mv643xx_eth: mbus decode window support
    
    Make it possible to pass mbus_dram_target_info to the mv643xx_eth
    driver via the platform data, and make the mv643xx_eth driver
    program the window registers based on this data if it is passed in.
    
    Signed-off-by: Lennert Buytenhek <buytenh@marvell.com>
    Reviewed-by: Tzachi Perelstein <tzachi@marvell.com>
    Acked-by: Russell King <rmk+kernel@arm.linux.org.uk>
    Signed-off-by: Dale Farnsworth <dale@farnsworth.org>

diff --git a/include/linux/mv643xx_eth.h b/include/linux/mv643xx_eth.h
index 2d59855b61c1..4801b02b444e 100644
--- a/include/linux/mv643xx_eth.h
+++ b/include/linux/mv643xx_eth.h
@@ -5,6 +5,8 @@
 #ifndef __LINUX_MV643XX_ETH_H
 #define __LINUX_MV643XX_ETH_H
 
+#include <linux/mbus.h>
+
 #define MV643XX_ETH_SHARED_NAME		"mv643xx_eth_shared"
 #define MV643XX_ETH_NAME		"mv643xx_eth"
 #define MV643XX_ETH_SHARED_REGS		0x2000
@@ -13,6 +15,10 @@
 #define MV643XX_ETH_SIZE_REG_4		0x2224
 #define MV643XX_ETH_BASE_ADDR_ENABLE_REG	0x2290
 
+struct mv643xx_eth_shared_platform_data {
+	struct mbus_dram_target_info	*dram;
+};
+
 struct mv643xx_eth_platform_data {
 	struct platform_device	*shared;
 	int		port_number;

commit fa3959f457109cc7d082b86ea6daae927982815b
Author: Lennert Buytenhek <buytenh@wantstofly.org>
Date:   Thu Apr 24 01:27:02 2008 +0200

    mv643xx_eth: get rid of static variables, allow multiple instances
    
    Move mv643xx_eth's static state (ethernet register block base address
    and MII management interface spinlock) into a struct hanging off the
    shared platform device.  This is necessary to support chips that
    contain multiple mv643xx_eth silicon blocks.
    
    Signed-off-by: Lennert Buytenhek <buytenh@marvell.com>
    Acked-by: Nicolas Pitre <nico@marvell.com>
    Signed-off-by: Dale Farnsworth <dale@farnsworth.org>

diff --git a/include/linux/mv643xx_eth.h b/include/linux/mv643xx_eth.h
index 30e11aa3c1c9..2d59855b61c1 100644
--- a/include/linux/mv643xx_eth.h
+++ b/include/linux/mv643xx_eth.h
@@ -1,6 +1,7 @@
 /*
  * MV-643XX ethernet platform device data definition file.
  */
+
 #ifndef __LINUX_MV643XX_ETH_H
 #define __LINUX_MV643XX_ETH_H
 
@@ -13,7 +14,9 @@
 #define MV643XX_ETH_BASE_ADDR_ENABLE_REG	0x2290
 
 struct mv643xx_eth_platform_data {
+	struct platform_device	*shared;
 	int		port_number;
+
 	u16		force_phy_addr;	/* force override if phy_addr == 0 */
 	u16		phy_addr;
 

commit 3077d78a74a62c5f531b005efdbcc01a3f2f09ca
Author: Dale Farnsworth <dale@farnsworth.org>
Date:   Mon Oct 29 15:39:01 2007 -0700

    mv643xx_eth: Fix MV643XX_ETH offsets used by Pegasos 2
    
    In the mv643xx_eth driver, we now use offsets from the ethernet
    register block within the chip, but the pegasos 2 platform still
    needs offsets from the full chip's register base address.
    
    Signed-off-by: Dale Farnsworth <dale@farnsworth.org>
    Signed-off-by: Jeff Garzik <jeff@garzik.org>

diff --git a/include/linux/mv643xx_eth.h b/include/linux/mv643xx_eth.h
index 8df230a279a0..30e11aa3c1c9 100644
--- a/include/linux/mv643xx_eth.h
+++ b/include/linux/mv643xx_eth.h
@@ -8,9 +8,9 @@
 #define MV643XX_ETH_NAME		"mv643xx_eth"
 #define MV643XX_ETH_SHARED_REGS		0x2000
 #define MV643XX_ETH_SHARED_REGS_SIZE	0x2000
-#define MV643XX_ETH_BAR_4	0x220
-#define MV643XX_ETH_SIZE_REG_4	0x224
-#define MV643XX_ETH_BASE_ADDR_ENABLE_REG	0x0290
+#define MV643XX_ETH_BAR_4		0x2220
+#define MV643XX_ETH_SIZE_REG_4		0x2224
+#define MV643XX_ETH_BASE_ADDR_ENABLE_REG	0x2290
 
 struct mv643xx_eth_platform_data {
 	int		port_number;

commit 30e69bf4cce16d4c2dcfd629a60fcd8e1aba9fee
Author: Al Viro <viro@ftp.linux.org.uk>
Date:   Sat Oct 27 21:02:32 2007 +0100

    fix breakage in pegasos_eth
    
    Fix fallout from commit b45d9147f1582333e180e1023624c003874b7312
    ("mv643xx_eth: Remove unused register defines")
    
    Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

diff --git a/include/linux/mv643xx_eth.h b/include/linux/mv643xx_eth.h
index 3f272396642b..8df230a279a0 100644
--- a/include/linux/mv643xx_eth.h
+++ b/include/linux/mv643xx_eth.h
@@ -8,6 +8,9 @@
 #define MV643XX_ETH_NAME		"mv643xx_eth"
 #define MV643XX_ETH_SHARED_REGS		0x2000
 #define MV643XX_ETH_SHARED_REGS_SIZE	0x2000
+#define MV643XX_ETH_BAR_4	0x220
+#define MV643XX_ETH_SIZE_REG_4	0x224
+#define MV643XX_ETH_BASE_ADDR_ENABLE_REG	0x0290
 
 struct mv643xx_eth_platform_data {
 	int		port_number;

commit c4a6a2ab5e99980b10d1eef761cd95f2a19ba46d
Author: Lennert Buytenhek <buytenh@wantstofly.org>
Date:   Fri Oct 19 04:09:53 2007 +0200

    mv643xx_eth: Split off mv643xx_eth platform device data
    
    The mv643xx ethernet silicon block is also found in a couple of other
    Marvell chips.  As a first step towards splitting off the mv643xx_eth
    bits from the rest of the mv643xx bits, this patch splits the mv643xx
    ethernet platform device data struct in linux/mv643xx.h off into
    linux/mv643xx_eth.h, and includes the latter from the former.
    
    Signed-off-by: Lennert Buytenhek <buytenh@marvell.com>
    Acked-by: Tzachi Perelstein <tzachi@marvell.com>
    Signed-off-by: Dale Farnsworth <dale@farnsworth.org>

diff --git a/include/linux/mv643xx_eth.h b/include/linux/mv643xx_eth.h
new file mode 100644
index 000000000000..3f272396642b
--- /dev/null
+++ b/include/linux/mv643xx_eth.h
@@ -0,0 +1,31 @@
+/*
+ * MV-643XX ethernet platform device data definition file.
+ */
+#ifndef __LINUX_MV643XX_ETH_H
+#define __LINUX_MV643XX_ETH_H
+
+#define MV643XX_ETH_SHARED_NAME		"mv643xx_eth_shared"
+#define MV643XX_ETH_NAME		"mv643xx_eth"
+#define MV643XX_ETH_SHARED_REGS		0x2000
+#define MV643XX_ETH_SHARED_REGS_SIZE	0x2000
+
+struct mv643xx_eth_platform_data {
+	int		port_number;
+	u16		force_phy_addr;	/* force override if phy_addr == 0 */
+	u16		phy_addr;
+
+	/* If speed is 0, then speed and duplex are autonegotiated. */
+	int		speed;		/* 0, SPEED_10, SPEED_100, SPEED_1000 */
+	int		duplex;		/* DUPLEX_HALF or DUPLEX_FULL */
+
+	/* non-zero values of the following fields override defaults */
+	u32		tx_queue_size;
+	u32		rx_queue_size;
+	u32		tx_sram_addr;
+	u32		tx_sram_size;
+	u32		rx_sram_addr;
+	u32		rx_sram_size;
+	u8		mac_addr[6];	/* mac address if non-zero*/
+};
+
+#endif /* __LINUX_MV643XX_ETH_H */
