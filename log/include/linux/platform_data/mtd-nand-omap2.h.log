commit d2912cb15bdda8ba4a5dd73396ad62641af2f520
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Tue Jun 4 10:11:33 2019 +0200

    treewide: Replace GPLv2 boilerplate/reference with SPDX - rule 500
    
    Based on 2 normalized pattern(s):
    
      this program is free software you can redistribute it and or modify
      it under the terms of the gnu general public license version 2 as
      published by the free software foundation
    
      this program is free software you can redistribute it and or modify
      it under the terms of the gnu general public license version 2 as
      published by the free software foundation #
    
    extracted by the scancode license scanner the SPDX license identifier
    
      GPL-2.0-only
    
    has been chosen to replace the boilerplate/reference in 4122 file(s).
    
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Reviewed-by: Enrico Weigelt <info@metux.net>
    Reviewed-by: Kate Stewart <kstewart@linuxfoundation.org>
    Reviewed-by: Allison Randal <allison@lohutok.net>
    Cc: linux-spdx@vger.kernel.org
    Link: https://lkml.kernel.org/r/20190604081206.933168790@linutronix.de
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/include/linux/platform_data/mtd-nand-omap2.h b/include/linux/platform_data/mtd-nand-omap2.h
index 619df2431e75..de6ada739121 100644
--- a/include/linux/platform_data/mtd-nand-omap2.h
+++ b/include/linux/platform_data/mtd-nand-omap2.h
@@ -1,9 +1,6 @@
+/* SPDX-License-Identifier: GPL-2.0-only */
 /*
  * Copyright (C) 2006 Micron Technology Inc.
- *
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License version 2 as
- * published by the Free Software Foundation.
  */
 
 #ifndef	_MTD_NAND_OMAP2_H

commit 14b661ebb6cfa386afa5a5247eb09e24d420af3a
Merge: 3f3211e755f3 1530578abdac
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Wed Nov 22 20:46:06 2017 -1000

    Merge tag 'for-linus-20171120' of git://git.infradead.org/linux-mtd
    
    Pull MTD updates from Richard Weinberger:
     "General changes:
       -  Unconfuse get_unmapped_area and point/unpoint driver methods
       -  New partition parser: sharpslpart
       -  Kill GENERIC_IO
       -  Various fixes
    
      NAND changes:
       -  Add a flag to mark NANDs that require 3 address cycles to encode a
          page address
       -  Set a default ECC/free layout when NAND_ECC_NONE is requested
       -  Fix a bug in panic_nand_write()
       -  Another batch of cleanups for the denali driver
       -  Fix PM support in the atmel driver
       -  Remove support for platform data in the omap driver
       -  Fix subpage write in the omap driver
       -  Fix irq handling in the mtk driver
       -  Change link order of mtk_ecc and mtk_nand drivers to speed up boot
          time
       -  Change log level of ECC error messages in the mxc driver
       -  Patch the pxa3xx driver to support Armada 8k platforms
       -  Add BAM DMA support to the qcom driver
       -  Convert gpio-nand to the GPIO desc API
       -  Fix ECC handling in the mt29f driver
    
      SPI-NOR changes:
       -  Introduce system power management support
       -  New mechanism to select the proper .quad_enable() hook by JEDEC
          ID, when needed, instead of only by manufacturer ID
       -  Add support to new memory parts from Gigadevice, Winbond, Macronix
          and Everspin
       -  Maintainance for Cadence, Intel, Mediatek and STM32 drivers"
    
    *  tag 'for-linus-20171120' of git://git.infradead.org/linux-mtd: (85 commits)
      mtd: Avoid probe failures when mtd->dbg.dfs_dir is invalid
      mtd: sharpslpart: Add sharpslpart partition parser
      mtd: Add sanity checks in mtd_write/read_oob()
      mtd: remove the get_unmapped_area method
      mtd: implement mtd_get_unmapped_area() using the point method
      mtd: chips/map_rom.c: implement point and unpoint methods
      mtd: chips/map_ram.c: implement point and unpoint methods
      mtd: mtdram: properly handle the phys argument in the point method
      mtd: mtdswap: fix spelling mistake: 'TRESHOLD' -> 'THRESHOLD'
      mtd: slram: use memremap() instead of ioremap()
      kconfig: kill off GENERIC_IO option
      mtd: Fix C++ comment in include/linux/mtd/mtd.h
      mtd: constify mtd_partition
      mtd: plat-ram: Replace manual resource management by devm
      mtd: nand: Fix writing mtdoops to nand flash.
      mtd: intel-spi: Add Intel Lewisburg PCH SPI super SKU PCI ID
      mtd: nand: mtk: fix infinite ECC decode IRQ issue
      mtd: spi-nor: Add support for mr25h128
      mtd: nand: mtk: change the compile sequence of mtk_nand.o and mtk_ecc.o
      mtd: spi-nor: enable 4B opcodes for mx66l51235l
      ...

commit 0d96a4f6a03797b73bee465cada39133b7972e8d
Author: Ladislav Michl <ladis@linux-mips.org>
Date:   Fri Oct 6 13:45:53 2017 +0200

    memory: omap-gpmc: Drop gpmc_status
    
    This field is no longer used, drop it.
    
    Signed-off-by: Ladislav Michl <ladis@linux-mips.org>
    Signed-off-by: Roger Quadros <rogerq@ti.com>

diff --git a/include/linux/platform_data/mtd-nand-omap2.h b/include/linux/platform_data/mtd-nand-omap2.h
index 17d57a18bac5..25e267f1970c 100644
--- a/include/linux/platform_data/mtd-nand-omap2.h
+++ b/include/linux/platform_data/mtd-nand-omap2.h
@@ -63,8 +63,6 @@ struct gpmc_nand_regs {
 	void __iomem	*gpmc_bch_result4[GPMC_BCH_NUM_REMAINDER];
 	void __iomem	*gpmc_bch_result5[GPMC_BCH_NUM_REMAINDER];
 	void __iomem	*gpmc_bch_result6[GPMC_BCH_NUM_REMAINDER];
-	/* Deprecated. Do not use */
-	void __iomem	*gpmc_status;
 };
 
 struct omap_nand_platform_data {

commit 086c321ec57bfda5b15f3553e7def33302955852
Author: Ladislav Michl <ladis@linux-mips.org>
Date:   Tue Oct 10 14:38:07 2017 +0200

    mtd: nand: omap2: Remove omap_nand_platform_data
    
    As driver is now configured using DT, omap_nand_platform_data structure
    is no longer needed.
    
    Signed-off-by: Ladislav Michl <ladis@linux-mips.org>
    Acked-by: Roger Quadros <rogerq@ti.com>
    Signed-off-by: Boris Brezillon <boris.brezillon@free-electrons.com>

diff --git a/include/linux/platform_data/mtd-nand-omap2.h b/include/linux/platform_data/mtd-nand-omap2.h
index 17d57a18bac5..8b8b124e8aea 100644
--- a/include/linux/platform_data/mtd-nand-omap2.h
+++ b/include/linux/platform_data/mtd-nand-omap2.h
@@ -66,21 +66,4 @@ struct gpmc_nand_regs {
 	/* Deprecated. Do not use */
 	void __iomem	*gpmc_status;
 };
-
-struct omap_nand_platform_data {
-	int			cs;
-	struct mtd_partition	*parts;
-	int			nr_parts;
-	bool			flash_bbt;
-	enum nand_io		xfer_type;
-	int			devsize;
-	enum omap_ecc           ecc_opt;
-
-	struct device_node	*elm_of_node;
-
-	/* deprecated */
-	struct gpmc_nand_regs	reg;
-	struct device_node	*of_node;
-	bool			dev_ready;
-};
 #endif

commit 10f22ee367c4aff7841da6a83c10445d7d6328d9
Author: Roger Quadros <rogerq@ti.com>
Date:   Thu Aug 6 17:39:35 2015 +0300

    mtd: nand: omap2: Implement NAND ready using gpiolib
    
    The GPMC WAIT pin status are now available over gpiolib.
    Update the omap_dev_ready() function to use gpio instead of
    directly accessing GPMC register space.
    
    Signed-off-by: Roger Quadros <rogerq@ti.com>
    Acked-by: Brian Norris <computersforpeace@gmail.com>
    Acked-by: Boris Brezillon <boris.brezillon@free-electrons.com>
    Acked-by: Tony Lindgren <tony@atomide.com>

diff --git a/include/linux/platform_data/mtd-nand-omap2.h b/include/linux/platform_data/mtd-nand-omap2.h
index 7f6de5377f80..17d57a18bac5 100644
--- a/include/linux/platform_data/mtd-nand-omap2.h
+++ b/include/linux/platform_data/mtd-nand-omap2.h
@@ -71,7 +71,6 @@ struct omap_nand_platform_data {
 	int			cs;
 	struct mtd_partition	*parts;
 	int			nr_parts;
-	bool			dev_ready;
 	bool			flash_bbt;
 	enum nand_io		xfer_type;
 	int			devsize;
@@ -82,5 +81,6 @@ struct omap_nand_platform_data {
 	/* deprecated */
 	struct gpmc_nand_regs	reg;
 	struct device_node	*of_node;
+	bool			dev_ready;
 };
 #endif

commit 9e6946215dbd9803e8b511928c9f61f3a49e2c58
Author: Roger Quadros <rogerq@ti.com>
Date:   Fri Aug 7 10:38:13 2015 +0300

    memory: omap-gpmc: Prevent GPMC_STATUS from being accessed via gpmc_regs
    
    GPMC_STATUS register is private to the GPMC module and must not be
    accessed directly by NAND driver through the gpmc_regs.
    
    They must use gpmc_omap_get_nand_ops() instead.
    
    Signed-off-by: Roger Quadros <rogerq@ti.com>
    Acked-by: Tony Lindgren <tony@atomide.com>

diff --git a/include/linux/platform_data/mtd-nand-omap2.h b/include/linux/platform_data/mtd-nand-omap2.h
index ff27e5a77e03..7f6de5377f80 100644
--- a/include/linux/platform_data/mtd-nand-omap2.h
+++ b/include/linux/platform_data/mtd-nand-omap2.h
@@ -45,7 +45,6 @@ enum omap_ecc {
 };
 
 struct gpmc_nand_regs {
-	void __iomem	*gpmc_status;
 	void __iomem	*gpmc_nand_command;
 	void __iomem	*gpmc_nand_address;
 	void __iomem	*gpmc_nand_data;
@@ -64,6 +63,8 @@ struct gpmc_nand_regs {
 	void __iomem	*gpmc_bch_result4[GPMC_BCH_NUM_REMAINDER];
 	void __iomem	*gpmc_bch_result5[GPMC_BCH_NUM_REMAINDER];
 	void __iomem	*gpmc_bch_result6[GPMC_BCH_NUM_REMAINDER];
+	/* Deprecated. Do not use */
+	void __iomem	*gpmc_status;
 };
 
 struct omap_nand_platform_data {

commit c9711ec5250b22fd94e9b34c17c095e001a90e66
Author: Roger Quadros <rogerq@ti.com>
Date:   Wed May 21 07:29:03 2014 +0300

    mtd: nand: omap: Clean up device tree support
    
    Move NAND specific device tree parsing to NAND driver.
    
    The NAND controller node must have a compatible id, register space
    resource and interrupt resource.
    
    Signed-off-by: Roger Quadros <rogerq@ti.com>
    Acked-by: Brian Norris <computersforpeace@gmail.com>
    Acked-by: Tony Lindgren <tony@atomide.com>

diff --git a/include/linux/platform_data/mtd-nand-omap2.h b/include/linux/platform_data/mtd-nand-omap2.h
index a067f581e938..ff27e5a77e03 100644
--- a/include/linux/platform_data/mtd-nand-omap2.h
+++ b/include/linux/platform_data/mtd-nand-omap2.h
@@ -76,11 +76,10 @@ struct omap_nand_platform_data {
 	int			devsize;
 	enum omap_ecc           ecc_opt;
 
-	/* for passing the partitions */
-	struct device_node	*of_node;
 	struct device_node	*elm_of_node;
 
 	/* deprecated */
 	struct gpmc_nand_regs	reg;
+	struct device_node	*of_node;
 };
 #endif

commit c509aefd75d026f4ef4aa306131d7a780c2eda7b
Author: Roger Quadros <rogerq@ti.com>
Date:   Wed Aug 5 14:01:50 2015 +0300

    mtd: nand: omap: Use gpmc_omap_get_nand_ops() to get NAND registers
    
    Deprecate nand register passing via platform data and use
    gpmc_omap_get_nand_ops() instead.
    
    Signed-off-by: Roger Quadros <rogerq@ti.com>
    Acked-by: Brian Norris <computersforpeace@gmail.com>
    Acked-by: Tony Lindgren <tony@atomide.com>

diff --git a/include/linux/platform_data/mtd-nand-omap2.h b/include/linux/platform_data/mtd-nand-omap2.h
index 090bbab0130a..a067f581e938 100644
--- a/include/linux/platform_data/mtd-nand-omap2.h
+++ b/include/linux/platform_data/mtd-nand-omap2.h
@@ -75,10 +75,12 @@ struct omap_nand_platform_data {
 	enum nand_io		xfer_type;
 	int			devsize;
 	enum omap_ecc           ecc_opt;
-	struct gpmc_nand_regs	reg;
 
 	/* for passing the partitions */
 	struct device_node	*of_node;
 	struct device_node	*elm_of_node;
+
+	/* deprecated */
+	struct gpmc_nand_regs	reg;
 };
 #endif

commit fef775caa705255358cdf7bbaf9bbc2fd1111761
Author: Ezequiel García <ezequiel@vanguardiasur.com.ar>
Date:   Thu Sep 11 12:02:08 2014 -0300

    nand: omap2: Add support for flash-based bad block table
    
    This commit adds a new platform-data boolean property that enables use
    of a flash-based bad block table. This can also be enabled by setting
    the 'nand-on-flash-bbt' devicetree property.
    
    If the flash BBT is not enabled, the driver falls back to use OOB
    bad block markers only, as before. If the flash BBT is enabled the
    kernel will keep track of bad blocks using a BBT, in addition to
    the OOB markers.
    
    As explained by Brian Norris the reasons for using a BBT are:
    
    ""
    The primary reason would be that NAND datasheets specify it these days.
    A better argument is that nobody guarantees that you can write a
    bad block marker to a worn out block; you may just get program failures.
    
    This has been acknowledged by several developers over the last several
    years.
    
    Additionally, you get a boot-time performance improvement if you only
    have to read a few pages, instead of a page or two from every block on
    the flash.
    ""
    
    Signed-off-by: Ezequiel Garcia <ezequiel@vanguardiasur.com.ar>
    Acked-by: Roger Quadros <rogerq@ti.com>
    Signed-off-by: Brian Norris <computersforpeace@gmail.com>

diff --git a/include/linux/platform_data/mtd-nand-omap2.h b/include/linux/platform_data/mtd-nand-omap2.h
index 16ec262dfcc8..090bbab0130a 100644
--- a/include/linux/platform_data/mtd-nand-omap2.h
+++ b/include/linux/platform_data/mtd-nand-omap2.h
@@ -71,6 +71,7 @@ struct omap_nand_platform_data {
 	struct mtd_partition	*parts;
 	int			nr_parts;
 	bool			dev_ready;
+	bool			flash_bbt;
 	enum nand_io		xfer_type;
 	int			devsize;
 	enum omap_ecc           ecc_opt;

commit 7d5929c1f34304ca5a970cfde8044053e56aa8c9
Author: Roger Quadros <rogerq@ti.com>
Date:   Mon Aug 25 16:15:32 2014 -0700

    mtd: nand: omap: Revert to using software ECC by default
    
    For v3.12 and prior, 1-bit Hamming code ECC via software was the
    default choice. Commit c66d039197e4 in v3.13 changed the behaviour
    to use 1-bit Hamming code via Hardware using a different ECC layout
    i.e. (ROM code layout) than what is used by software ECC.
    
    This ECC layout change causes NAND filesystems created in v3.12
    and prior to be unusable in v3.13 and later. So revert back to
    using software ECC by default if an ECC scheme is not explicitely
    specified.
    
    This defect can be observed on the following boards during legacy boot
    
    -omap3beagle
    -omap3touchbook
    -overo
    -am3517crane
    -devkit8000
    -ldp
    -3430sdp
    
    Signed-off-by: Roger Quadros <rogerq@ti.com>
    Tested-by: Grazvydas Ignotas <notasas@gmail.com>
    Signed-off-by: Tony Lindgren <tony@atomide.com>

diff --git a/include/linux/platform_data/mtd-nand-omap2.h b/include/linux/platform_data/mtd-nand-omap2.h
index 660c029d694f..16ec262dfcc8 100644
--- a/include/linux/platform_data/mtd-nand-omap2.h
+++ b/include/linux/platform_data/mtd-nand-omap2.h
@@ -21,8 +21,17 @@ enum nand_io {
 };
 
 enum omap_ecc {
-	/* 1-bit  ECC calculation by GPMC, Error detection by Software */
-	OMAP_ECC_HAM1_CODE_HW = 0,
+	/*
+	 * 1-bit ECC: calculation and correction by SW
+	 * ECC stored at end of spare area
+	 */
+	OMAP_ECC_HAM1_CODE_SW = 0,
+
+	/*
+	 * 1-bit ECC: calculation by GPMC, Error detection by Software
+	 * ECC layout compatible with ROM code layout
+	 */
+	OMAP_ECC_HAM1_CODE_HW,
 	/* 4-bit  ECC calculation by GPMC, Error detection by Software */
 	OMAP_ECC_BCH4_CODE_HW_DETECTION_SW,
 	/* 4-bit  ECC calculation by GPMC, Error detection by ELM */

commit 27c9fd607587e6c3b517590df4cd35ac85f3d0bd
Author: pekon gupta <pekon@ti.com>
Date:   Mon May 19 13:24:39 2014 +0530

    mtd: nand: omap: add support for BCH16_ECC - GPMC driver updates
    
    This patch add support for BCH16_ECC in GPMC (controller) driver:
    - extends configuration space to include BCH16 registers
    - extends parsing of DT binding for selecting BCH16 ecc-scheme
    
    Signed-off-by: Pekon Gupta <pekon@ti.com>
    Acked-by: Tony Lindgren <tony@atomide.com>
    Signed-off-by: Brian Norris <computersforpeace@gmail.com>

diff --git a/include/linux/platform_data/mtd-nand-omap2.h b/include/linux/platform_data/mtd-nand-omap2.h
index 3e9dd6676b97..660c029d694f 100644
--- a/include/linux/platform_data/mtd-nand-omap2.h
+++ b/include/linux/platform_data/mtd-nand-omap2.h
@@ -31,6 +31,8 @@ enum omap_ecc {
 	OMAP_ECC_BCH8_CODE_HW_DETECTION_SW,
 	/* 8-bit  ECC calculation by GPMC, Error detection by ELM */
 	OMAP_ECC_BCH8_CODE_HW,
+	/* 16-bit ECC calculation by GPMC, Error detection by ELM */
+	OMAP_ECC_BCH16_CODE_HW,
 };
 
 struct gpmc_nand_regs {
@@ -50,6 +52,9 @@ struct gpmc_nand_regs {
 	void __iomem	*gpmc_bch_result1[GPMC_BCH_NUM_REMAINDER];
 	void __iomem	*gpmc_bch_result2[GPMC_BCH_NUM_REMAINDER];
 	void __iomem	*gpmc_bch_result3[GPMC_BCH_NUM_REMAINDER];
+	void __iomem	*gpmc_bch_result4[GPMC_BCH_NUM_REMAINDER];
+	void __iomem	*gpmc_bch_result5[GPMC_BCH_NUM_REMAINDER];
+	void __iomem	*gpmc_bch_result6[GPMC_BCH_NUM_REMAINDER];
 };
 
 struct omap_nand_platform_data {

commit 111b5a317677d09fd6e2a1dc532f32b4df745166
Author: Sachin Kamat <sachin.kamat@linaro.org>
Date:   Mon Dec 30 12:00:20 2013 +0530

    mtd: omap2: Cleanup header files
    
    Commit 2203747c9771 ("ARM: omap: move platform_data definitions")
    moved the files to the current location but forgot to remove the pointer
    to its previous location. Clean it up.
    
    Signed-off-by: Sachin Kamat <sachin.kamat@linaro.org>
    Acked-by: Pekon Gupta <pekon@ti.com>
    Signed-off-by: Brian Norris <computersforpeace@gmail.com>

diff --git a/include/linux/platform_data/mtd-nand-omap2.h b/include/linux/platform_data/mtd-nand-omap2.h
index 4da5bfa2147f..3e9dd6676b97 100644
--- a/include/linux/platform_data/mtd-nand-omap2.h
+++ b/include/linux/platform_data/mtd-nand-omap2.h
@@ -1,6 +1,4 @@
 /*
- * arch/arm/plat-omap/include/mach/nand.h
- *
  * Copyright (C) 2006 Micron Technology Inc.
  *
  * This program is free software; you can redistribute it and/or modify

commit c66d039197e42af8867e5d0d9b904daf0fb9e6bc
Author: Pekon Gupta <pekon@ti.com>
Date:   Thu Oct 24 18:20:18 2013 +0530

    mtd: nand: omap: combine different flavours of 1-bit hamming ecc schemes
    
    OMAP NAND driver currently supports multiple flavours of 1-bit Hamming
    ecc-scheme, like:
    - OMAP_ECC_HAMMING_CODE_DEFAULT
            1-bit hamming ecc code using software library
    - OMAP_ECC_HAMMING_CODE_HW
            1-bit hamming ecc-code using GPMC h/w engine
    - OMAP_ECC_HAMMING_CODE_HW_ROMCODE
            1-bit hamming ecc-code using GPMC h/w engin with ecc-layout compatible
            to ROM code.
    
    This patch combines above multiple ecc-schemes into single implementation:
    - OMAP_ECC_HAM1_CODE_HW
            1-bit hamming ecc-code using GPMC h/w engine with ROM-code compatible
            ecc-layout.
    
    Signed-off-by: Pekon Gupta <pekon@ti.com>
    Reviewed-by: Felipe Balbi <balbi@ti.com>
    Acked-by: Tony Lindgren <tony@atomide.com>
    Tested-by: Ezequiel Garcia <ezequiel.garcia@free-electrons.com>
    Signed-off-by: Brian Norris <computersforpeace@gmail.com>

diff --git a/include/linux/platform_data/mtd-nand-omap2.h b/include/linux/platform_data/mtd-nand-omap2.h
index e4128f1510bf..4da5bfa2147f 100644
--- a/include/linux/platform_data/mtd-nand-omap2.h
+++ b/include/linux/platform_data/mtd-nand-omap2.h
@@ -23,13 +23,8 @@ enum nand_io {
 };
 
 enum omap_ecc {
-		/* 1-bit ecc: stored at end of spare area */
-	OMAP_ECC_HAMMING_CODE_DEFAULT = 0, /* Default, s/w method */
-	OMAP_ECC_HAMMING_CODE_HW, /* gpmc to detect the error */
-		/* 1-bit ecc: stored at beginning of spare area as romcode */
-	OMAP_ECC_HAMMING_CODE_HW_ROMCODE, /* gpmc method & romcode layout */
 	/* 1-bit  ECC calculation by GPMC, Error detection by Software */
-	OMAP_ECC_HAM1_CODE_HW,
+	OMAP_ECC_HAM1_CODE_HW = 0,
 	/* 4-bit  ECC calculation by GPMC, Error detection by Software */
 	OMAP_ECC_BCH4_CODE_HW_DETECTION_SW,
 	/* 4-bit  ECC calculation by GPMC, Error detection by ELM */

commit ac65caf514ec3e55e8d3d510ee37f80dd97418fe
Author: Pekon Gupta <pekon@ti.com>
Date:   Thu Oct 24 18:20:17 2013 +0530

    ARM: OMAP2+: cleaned-up DT support of various ECC schemes
    
    OMAP NAND driver support multiple ECC scheme, which can used in different
    flavours, depending on in-build Hardware engines present on SoC.
    
    This patch updates following in DT bindings related to sectionion of ecc-schemes
    - ti,elm-id: replaces elm_id (maintains backward compatibility)
    - ti,nand-ecc-opts: selection of h/w or s/w implementation of an ecc-scheme
            depends on ti,elm-id. (supported values ham1, bch4, and bch8)
    - maintain backward compatibility to deprecated DT bindings (sw, hw, hw-romcode)
    
    Below table shows different flavours of ecc-schemes supported by OMAP devices
    +---------------------------------------+---------------+---------------+
    | ECC scheme                            |ECC calculation|Error detection|
    +---------------------------------------+---------------+---------------+
    |OMAP_ECC_HAM1_CODE_HW                  |H/W (GPMC)     |S/W            |
    +---------------------------------------+---------------+---------------+
    |OMAP_ECC_BCH8_CODE_HW_DETECTION_SW     |H/W (GPMC)     |S/W            |
    |(requires CONFIG_MTD_NAND_ECC_BCH)     |               |               |
    +---------------------------------------+---------------+---------------+
    |OMAP_ECC_BCH8_CODE_HW                  |H/W (GPMC)     |H/W (ELM)      |
    |(requires CONFIG_MTD_NAND_OMAP_BCH &&  |               |               |
    | ti,elm-id in DT)                      |               |               |
    +---------------------------------------+---------------+---------------+
    
    To optimize footprint of omap2-nand driver, selection of some ECC schemes
    also require enabling following Kconfigs, in addition to setting appropriate
    DT bindings
    - Kconfig:CONFIG_MTD_NAND_ECC_BCH        error detection done in software
    - Kconfig:CONFIG_MTD_NAND_OMAP_BCH       error detection done by h/w engine
    
    Signed-off-by: Pekon Gupta <pekon@ti.com>
    Reviewed-by: Felipe Balbi <balbi@ti.com>
    Acked-by: Tony Lindgren <tony@atomide.com>
    Tested-by: Ezequiel Garcia <ezequiel.garcia@free-electrons.com>
    Signed-off-by: Brian Norris <computersforpeace@gmail.com>

diff --git a/include/linux/platform_data/mtd-nand-omap2.h b/include/linux/platform_data/mtd-nand-omap2.h
index 6bf9ef43ddb1..e4128f1510bf 100644
--- a/include/linux/platform_data/mtd-nand-omap2.h
+++ b/include/linux/platform_data/mtd-nand-omap2.h
@@ -28,8 +28,16 @@ enum omap_ecc {
 	OMAP_ECC_HAMMING_CODE_HW, /* gpmc to detect the error */
 		/* 1-bit ecc: stored at beginning of spare area as romcode */
 	OMAP_ECC_HAMMING_CODE_HW_ROMCODE, /* gpmc method & romcode layout */
-	OMAP_ECC_BCH4_CODE_HW, /* 4-bit BCH ecc code */
-	OMAP_ECC_BCH8_CODE_HW, /* 8-bit BCH ecc code */
+	/* 1-bit  ECC calculation by GPMC, Error detection by Software */
+	OMAP_ECC_HAM1_CODE_HW,
+	/* 4-bit  ECC calculation by GPMC, Error detection by Software */
+	OMAP_ECC_BCH4_CODE_HW_DETECTION_SW,
+	/* 4-bit  ECC calculation by GPMC, Error detection by ELM */
+	OMAP_ECC_BCH4_CODE_HW,
+	/* 8-bit  ECC calculation by GPMC, Error detection by Software */
+	OMAP_ECC_BCH8_CODE_HW_DETECTION_SW,
+	/* 8-bit  ECC calculation by GPMC, Error detection by ELM */
+	OMAP_ECC_BCH8_CODE_HW,
 };
 
 struct gpmc_nand_regs {
@@ -63,5 +71,6 @@ struct omap_nand_platform_data {
 
 	/* for passing the partitions */
 	struct device_node	*of_node;
+	struct device_node	*elm_of_node;
 };
 #endif

commit ccf04c51004d0b973a688a91c879e2d91780d03c
Author: Daniel Mack <zonque@gmail.com>
Date:   Fri Dec 14 11:36:41 2012 +0100

    mtd: omap-nand: pass device_node in platform data
    
    Pass an optional device_node pointer in the platform data, which in turn
    will be put into a mtd_part_parser_data. This way, code that sets up the
    platform devices can pass along the node from DT so that the partitions
    can be parsed.
    
    For non-DT boards, this change has no effect.
    
    Signed-off-by: Daniel Mack <zonque@gmail.com>
    Acked-by: Grant Likely <grant.likely@secretlab.ca>
    Acked-by: Artem Bityutskiy <dedekind1@gmail.com>
    Signed-off-by: Tony Lindgren <tony@atomide.com>

diff --git a/include/linux/platform_data/mtd-nand-omap2.h b/include/linux/platform_data/mtd-nand-omap2.h
index 24d32ca34bef..6bf9ef43ddb1 100644
--- a/include/linux/platform_data/mtd-nand-omap2.h
+++ b/include/linux/platform_data/mtd-nand-omap2.h
@@ -60,6 +60,8 @@ struct omap_nand_platform_data {
 	int			devsize;
 	enum omap_ecc           ecc_opt;
 	struct gpmc_nand_regs	reg;
-};
 
+	/* for passing the partitions */
+	struct device_node	*of_node;
+};
 #endif

commit 2fdf0c98969fdac8f7b191d4988e2e436717c857
Author: Afzal Mohammed <afzal@ti.com>
Date:   Thu Oct 4 15:49:04 2012 +0530

    ARM: OMAP2+: gpmc: nand register helper bch update
    
    Update helper function that provides gpmc-nand register
    details for nand driver with bch register information.
    Using this nand driver can be made self sufficient to
    handle remaining gpmc-nand operations by itself instead
    of relying on gpmc exported nand functions.
    
    Signed-off-by: Afzal Mohammed <afzal@ti.com>

diff --git a/include/linux/platform_data/mtd-nand-omap2.h b/include/linux/platform_data/mtd-nand-omap2.h
index e1965fe581d1..24d32ca34bef 100644
--- a/include/linux/platform_data/mtd-nand-omap2.h
+++ b/include/linux/platform_data/mtd-nand-omap2.h
@@ -13,6 +13,8 @@
 
 #include <linux/mtd/partitions.h>
 
+#define	GPMC_BCH_NUM_REMAINDER	8
+
 enum nand_io {
 	NAND_OMAP_PREFETCH_POLLED = 0,	/* prefetch polled mode, default */
 	NAND_OMAP_POLLED,		/* polled mode, without prefetch */
@@ -43,7 +45,10 @@ struct gpmc_nand_regs {
 	void __iomem	*gpmc_ecc_control;
 	void __iomem	*gpmc_ecc_size_config;
 	void __iomem	*gpmc_ecc1_result;
-	void __iomem	*gpmc_bch_result0;
+	void __iomem	*gpmc_bch_result0[GPMC_BCH_NUM_REMAINDER];
+	void __iomem	*gpmc_bch_result1[GPMC_BCH_NUM_REMAINDER];
+	void __iomem	*gpmc_bch_result2[GPMC_BCH_NUM_REMAINDER];
+	void __iomem	*gpmc_bch_result3[GPMC_BCH_NUM_REMAINDER];
 };
 
 struct omap_nand_platform_data {

commit bc3668ea046be9e841eecfab04bddfa759e765d6
Author: Afzal Mohammed <afzal@ti.com>
Date:   Sat Sep 29 12:26:13 2012 +0530

    ARM: OMAP2+: nand: header cleanup
    
    For common arm zImage existing nand header file
    in platform specific location was moved to generic
    platform data location, but it contained more than
    platform data, remove it. New local header has been
    created for exposing functions.
    
    Also move gpmc-nand platform data to platform header
    meant for nand from gpmc header file
    
    Signed-off-by: Afzal Mohammed <afzal@ti.com>

diff --git a/include/linux/platform_data/mtd-nand-omap2.h b/include/linux/platform_data/mtd-nand-omap2.h
index 1a68c1e5fe53..e1965fe581d1 100644
--- a/include/linux/platform_data/mtd-nand-omap2.h
+++ b/include/linux/platform_data/mtd-nand-omap2.h
@@ -8,7 +8,9 @@
  * published by the Free Software Foundation.
  */
 
-#include <plat/gpmc.h>
+#ifndef	_MTD_NAND_OMAP2_H
+#define	_MTD_NAND_OMAP2_H
+
 #include <linux/mtd/partitions.h>
 
 enum nand_io {
@@ -18,10 +20,35 @@ enum nand_io {
 	NAND_OMAP_PREFETCH_IRQ		/* prefetch enabled irq mode */
 };
 
+enum omap_ecc {
+		/* 1-bit ecc: stored at end of spare area */
+	OMAP_ECC_HAMMING_CODE_DEFAULT = 0, /* Default, s/w method */
+	OMAP_ECC_HAMMING_CODE_HW, /* gpmc to detect the error */
+		/* 1-bit ecc: stored at beginning of spare area as romcode */
+	OMAP_ECC_HAMMING_CODE_HW_ROMCODE, /* gpmc method & romcode layout */
+	OMAP_ECC_BCH4_CODE_HW, /* 4-bit BCH ecc code */
+	OMAP_ECC_BCH8_CODE_HW, /* 8-bit BCH ecc code */
+};
+
+struct gpmc_nand_regs {
+	void __iomem	*gpmc_status;
+	void __iomem	*gpmc_nand_command;
+	void __iomem	*gpmc_nand_address;
+	void __iomem	*gpmc_nand_data;
+	void __iomem	*gpmc_prefetch_config1;
+	void __iomem	*gpmc_prefetch_config2;
+	void __iomem	*gpmc_prefetch_control;
+	void __iomem	*gpmc_prefetch_status;
+	void __iomem	*gpmc_ecc_config;
+	void __iomem	*gpmc_ecc_control;
+	void __iomem	*gpmc_ecc_size_config;
+	void __iomem	*gpmc_ecc1_result;
+	void __iomem	*gpmc_bch_result0;
+};
+
 struct omap_nand_platform_data {
 	int			cs;
 	struct mtd_partition	*parts;
-	struct gpmc_timings	*gpmc_t;
 	int			nr_parts;
 	bool			dev_ready;
 	enum nand_io		xfer_type;
@@ -30,14 +57,4 @@ struct omap_nand_platform_data {
 	struct gpmc_nand_regs	reg;
 };
 
-/* minimum size for IO mapping */
-#define	NAND_IO_SIZE	4
-
-#if defined(CONFIG_MTD_NAND_OMAP2) || defined(CONFIG_MTD_NAND_OMAP2_MODULE)
-extern int gpmc_nand_init(struct omap_nand_platform_data *d);
-#else
-static inline int gpmc_nand_init(struct omap_nand_platform_data *d)
-{
-	return 0;
-}
 #endif

commit 2203747c97712975accc5e69bdaf1ad38a691635
Author: Arnd Bergmann <arnd@arndb.de>
Date:   Fri Aug 24 15:21:06 2012 +0200

    ARM: omap: move platform_data definitions
    
    Platform data for device drivers should be defined in
    include/linux/platform_data/*.h, not in the architecture
    and platform specific directories.
    
    This moves such data out of the omap include directories
    
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>
    Acked-by: Mark Brown <broonie@opensource.wolfsonmicro.com>
    Acked-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Acked-by: Nicolas Pitre <nico@linaro.org>
    Acked-by: Tony Lindgren <tony@atomide.com>
    Cc: Kevin Hilman <khilman@ti.com>
    Cc: "Benoît Cousson" <b-cousson@ti.com>
    Cc: Dmitry Torokhov <dmitry.torokhov@gmail.com>
    Cc: David Woodhouse <dwmw2@infradead.org>
    Cc: Kyungmin Park <kyungmin.park@samsung.com>
    Cc: Ohad Ben-Cohen <ohad@wizery.com>
    Cc: Grant Likely <grant.likely@secretlab.ca>
    Cc: Omar Ramirez Luna <omar.ramirez@ti.com>
    Cc: Tomi Valkeinen <tomi.valkeinen@ti.com>
    Cc: Florian Tobias Schandinat <FlorianSchandinat@gmx.de>
    Cc: Peter Ujfalusi <peter.ujfalusi@ti.com>
    Cc: Jarkko Nikula <jarkko.nikula@bitmer.com>
    Cc: Liam Girdwood <lrg@ti.com>
    Cc: Artem Bityutskiy <artem.bityutskiy@linux.intel.com>
    Cc: Jean Pihet <j-pihet@ti.com>
    Cc: J Keerthy <j-keerthy@ti.com>
    Cc: linux-omap@vger.kernel.org

diff --git a/include/linux/platform_data/mtd-nand-omap2.h b/include/linux/platform_data/mtd-nand-omap2.h
new file mode 100644
index 000000000000..1a68c1e5fe53
--- /dev/null
+++ b/include/linux/platform_data/mtd-nand-omap2.h
@@ -0,0 +1,43 @@
+/*
+ * arch/arm/plat-omap/include/mach/nand.h
+ *
+ * Copyright (C) 2006 Micron Technology Inc.
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation.
+ */
+
+#include <plat/gpmc.h>
+#include <linux/mtd/partitions.h>
+
+enum nand_io {
+	NAND_OMAP_PREFETCH_POLLED = 0,	/* prefetch polled mode, default */
+	NAND_OMAP_POLLED,		/* polled mode, without prefetch */
+	NAND_OMAP_PREFETCH_DMA,		/* prefetch enabled sDMA mode */
+	NAND_OMAP_PREFETCH_IRQ		/* prefetch enabled irq mode */
+};
+
+struct omap_nand_platform_data {
+	int			cs;
+	struct mtd_partition	*parts;
+	struct gpmc_timings	*gpmc_t;
+	int			nr_parts;
+	bool			dev_ready;
+	enum nand_io		xfer_type;
+	int			devsize;
+	enum omap_ecc           ecc_opt;
+	struct gpmc_nand_regs	reg;
+};
+
+/* minimum size for IO mapping */
+#define	NAND_IO_SIZE	4
+
+#if defined(CONFIG_MTD_NAND_OMAP2) || defined(CONFIG_MTD_NAND_OMAP2_MODULE)
+extern int gpmc_nand_init(struct omap_nand_platform_data *d);
+#else
+static inline int gpmc_nand_init(struct omap_nand_platform_data *d)
+{
+	return 0;
+}
+#endif
