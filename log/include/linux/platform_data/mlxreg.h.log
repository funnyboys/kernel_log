commit 0e41bf06eefe969ee5092f4ec55ae1b0ff9c1ea0
Author: Vadim Pasternak <vadimp@mellanox.com>
Date:   Mon Jan 13 16:28:38 2020 +0000

    platform/mellanox: mlxreg-hotplug: Add support for new capability register
    
    Add support for capability register, which is used for detection of the
    actual number of interrupt capable components within the particular
    group, supported by the specific system.
    Such components could be for example the number of power units and
    interrupts related to these units.
    The motivation is to avoid adding a new code in the future in order to
    distinct between the systems type supported different number of the
    components like power supplies, FANs, ASICs, line cards.
    
    Signed-off-by: Vadim Pasternak <vadimp@mellanox.com>
    Signed-off-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>

diff --git a/include/linux/platform_data/mlxreg.h b/include/linux/platform_data/mlxreg.h
index 6d54fe3bcac9..b8da8aef2446 100644
--- a/include/linux/platform_data/mlxreg.h
+++ b/include/linux/platform_data/mlxreg.h
@@ -101,6 +101,7 @@ struct mlxreg_core_data {
  * @aggr_mask: group aggregation mask;
  * @reg: group interrupt status register;
  * @mask: group interrupt mask;
+ * @capability: group capability register;
  * @cache: last status value for elements fro the same group;
  * @count: number of available elements in the group;
  * @ind: element's index inside the group;
@@ -112,6 +113,7 @@ struct mlxreg_core_item {
 	u32 aggr_mask;
 	u32 reg;
 	u32 mask;
+	u32 capability;
 	u32 cache;
 	u8 count;
 	u8 ind;

commit a089e4fed5c5e8717f233d71bb750fbf9e1f38e0
Merge: cf0240a755b8 458c8961c194
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Mon Mar 11 11:22:15 2019 -0700

    Merge tag 'linux-watchdog-5.1-rc1' of git://www.linux-watchdog.org/linux-watchdog
    
    Pull watchdog updates from Wim Van Sebroeck:
    
     - a new watchdog driver for the Mellanox systems
    
     - renesas-wdt: Document r8a77470 support
    
     - numerous 'Mark expected switch fall-throughs'
    
     - qcom: Add suspend/resume support
    
     - some small fixes and documentation updates
    
    * tag 'linux-watchdog-5.1-rc1' of git://www.linux-watchdog.org/linux-watchdog:
      watchdog: w83877f_wdt: Mark expected switch fall-through
      watchdog: sc520_wdt: Mark expected switch fall-through
      watchdog: sbc60xxwdt: Mark expected switch fall-through
      watchdog: smsc37b787_wdt: Mark expected switch fall-through
      watchdog: sc1200: Mark expected switch fall-through
      watchdog: pc87413: Mark expected switch fall-through
      Documentation/watchdog: Add documentation mlx-wdt driver
      watchdog: mlx-wdt: introduce a watchdog driver for Mellanox systems.
      platform_data/mlxreg: additions for Mellanox watchdog driver.
      watchdog: Update sysfs documentation.
      watchdog: dw: remove useless pr_fmt
      watchdog: pika_wdt: drop pointless static qualifier in pikawdt_init
      watchdog/hpwdt: Update Kconfig documentation
      dt-bindings: watchdog: renesas-wdt: Document r8a77470 support
      watchdog: qcom: Add suspend/resume support

commit 9f03161a1bd8cd9ccf11533e52326718c656036e
Author: Michael Shych <michaelsh@mellanox.com>
Date:   Wed Feb 20 09:34:22 2019 +0000

    platform_data/mlxreg: additions for Mellanox watchdog driver.
    
    There are two new fields added to mlxreg core structure:
    features - supported features of device and
    identity - device identity name.
    Add new defines for watchdog features.
    
    Signed-off-by: Michael Shych <michaelsh@mellanox.com>
    Reviewed-by: Guenter Roeck <linux@roeck-us.net>
    Signed-off-by: Guenter Roeck <linux@roeck-us.net>
    Signed-off-by: Wim Van Sebroeck <wim@linux-watchdog.org>

diff --git a/include/linux/platform_data/mlxreg.h b/include/linux/platform_data/mlxreg.h
index 19f5cb618c55..31f7c25a44da 100644
--- a/include/linux/platform_data/mlxreg.h
+++ b/include/linux/platform_data/mlxreg.h
@@ -35,6 +35,19 @@
 #define __LINUX_PLATFORM_DATA_MLXREG_H
 
 #define MLXREG_CORE_LABEL_MAX_SIZE	32
+#define MLXREG_CORE_WD_FEATURE_NOWAYOUT		BIT(0)
+#define MLXREG_CORE_WD_FEATURE_START_AT_BOOT	BIT(1)
+
+/**
+ * enum mlxreg_wdt_type - type of HW watchdog
+ *
+ * TYPE1 HW watchdog implementation exist in old systems.
+ * All new systems have TYPE2 HW watchdog.
+ */
+enum mlxreg_wdt_type {
+	MLX_WDT_TYPE1,
+	MLX_WDT_TYPE2,
+};
 
 /**
  * struct mlxreg_hotplug_device - I2C device data:
@@ -110,11 +123,17 @@ struct mlxreg_core_item {
  * @led_data: led private data;
  * @regmap: register map of parent device;
  * @counter: number of led instances;
+ * @features: supported features of device;
+ * @version: implementation version;
+ * @identity: device identity name;
  */
 struct mlxreg_core_platform_data {
 	struct mlxreg_core_data *data;
 	void *regmap;
 	int counter;
+	u32 features;
+	u32 version;
+	char identity[MLXREG_CORE_LABEL_MAX_SIZE];
 };
 
 /**

commit 946e4e02b11889cb161b15ff4712a8ba21a50eb6
Author: Vadim Pasternak <vadimp@mellanox.com>
Date:   Wed Dec 12 23:59:14 2018 +0000

    platform_data/mlxreg: Add capability field to core platform data
    
    Add capability field to "mlxreg_core_platform_data" structure.
    The purpose of this register is to provide additional info to platform
    driver through the atribute related capability register.
    
    Signed-off-by: Vadim Pasternak <vadimp@mellanox.com>
    Signed-off-by: Darren Hart (VMware) <dvhart@infradead.org>

diff --git a/include/linux/platform_data/mlxreg.h b/include/linux/platform_data/mlxreg.h
index d823713f94ec..1b2f86f96743 100644
--- a/include/linux/platform_data/mlxreg.h
+++ b/include/linux/platform_data/mlxreg.h
@@ -61,6 +61,7 @@ struct mlxreg_hotplug_device {
  * @reg: attribute register;
  * @mask: attribute access mask;
  * @bit: attribute effective bit;
+ * @capability: attribute capability register;
  * @mode: access mode;
  * @np - pointer to node platform associated with attribute;
  * @hpdev - hotplug device data;
@@ -72,6 +73,7 @@ struct mlxreg_core_data {
 	u32 reg;
 	u32 mask;
 	u32 bit;
+	u32 capability;
 	umode_t	mode;
 	struct device_node *np;
 	struct mlxreg_hotplug_device hpdev;

commit 9b28aa1d0eae1be1016c8f4ba504545caff01da3
Author: Vadim Pasternak <vadimp@mellanox.com>
Date:   Wed Dec 12 23:59:13 2018 +0000

    platform_data/mlxreg: Document fixes for core platform data
    
    Remove "led" from the description, since the structure
    "mlxreg_core_platform_data" is used not only for led data.
    
    Signed-off-by: Vadim Pasternak <vadimp@mellanox.com>
    Signed-off-by: Darren Hart (VMware) <dvhart@infradead.org>

diff --git a/include/linux/platform_data/mlxreg.h b/include/linux/platform_data/mlxreg.h
index 19f5cb618c55..d823713f94ec 100644
--- a/include/linux/platform_data/mlxreg.h
+++ b/include/linux/platform_data/mlxreg.h
@@ -107,9 +107,9 @@ struct mlxreg_core_item {
 /**
  * struct mlxreg_core_platform_data - platform data:
  *
- * @led_data: led private data;
+ * @data: instance private data;
  * @regmap: register map of parent device;
- * @counter: number of led instances;
+ * @counter: number of instances;
  */
 struct mlxreg_core_platform_data {
 	struct mlxreg_core_data *data;

commit 98004a78bb6cf18c260cecb49cb01e36cf6a72be
Author: Vadim Pasternak <vadimp@mellanox.com>
Date:   Tue Mar 27 10:02:01 2018 +0000

    platform_data/mlxreg: Document fixes for hotplug device
    
    Remove redunadant description of label in struct mlxreg_hotplug_device.
    
    Change location of access_mode in struct mlxreg_hotplug_device.
    
    Signed-off-by: Vadim Pasternak <vadimp@mellanox.com>
    Signed-off-by: Darren Hart (VMware) <dvhart@infradead.org>

diff --git a/include/linux/platform_data/mlxreg.h b/include/linux/platform_data/mlxreg.h
index 2744cff1b297..19f5cb618c55 100644
--- a/include/linux/platform_data/mlxreg.h
+++ b/include/linux/platform_data/mlxreg.h
@@ -58,11 +58,10 @@ struct mlxreg_hotplug_device {
  * struct mlxreg_core_data - attributes control data:
  *
  * @label: attribute label;
- * @label: attribute register offset;
  * @reg: attribute register;
  * @mask: attribute access mask;
- * @mode: access mode;
  * @bit: attribute effective bit;
+ * @mode: access mode;
  * @np - pointer to node platform associated with attribute;
  * @hpdev - hotplug device data;
  * @health_cntr: dynamic device health indication counter;

commit ef0f62264b2a9e6fc73476ed22ade1ff1f3ad7f3
Author: Vadim Pasternak <vadimp@mellanox.com>
Date:   Tue Feb 13 22:09:36 2018 +0000

    platform/x86: mlx-platform: Add physical bus number auto detection
    
    mlx-platform does not provide a bus number to i2c-mlxcpld, assuming it
    is always one. On some x86 systems, other i2c drivers may probe before
    i2c-mlxcpld, causing bus one to be busy.
    
    Make mlx-platform determine which adapter number is free prior to
    activating i2c-mlxpld, adjusting the mux base numbers accordingly.
    Update the mlxreg-hotplug pdata similarly.
    
    This adds an explicit mlx-platform build dependency on I2C, update the
    Kconfig accordingly. Add the missing REGMAP dependency while we're at
    it.
    
    Signed-off-by: Vadim Pasternak <vadimp@mellanox.com>
    [dvhart: Rewrite commit message more concisely]
    [dvhart: Add build dependencies]
    Signed-off-by: Darren Hart (VMware) <dvhart@infradead.org>

diff --git a/include/linux/platform_data/mlxreg.h b/include/linux/platform_data/mlxreg.h
index 262910967476..2744cff1b297 100644
--- a/include/linux/platform_data/mlxreg.h
+++ b/include/linux/platform_data/mlxreg.h
@@ -130,6 +130,7 @@ struct mlxreg_core_platform_data {
  * @cell_low: location of low aggregation interrupt register;
  * @mask_low: low aggregation interrupt common mask;
  * @deferred_nr: I2C adapter number must be exist prior probing execution;
+ * @shift_nr: I2C adapter numbers must be incremented by this value;
  */
 struct mlxreg_core_hotplug_platform_data {
 	struct mlxreg_core_item *items;
@@ -141,6 +142,7 @@ struct mlxreg_core_hotplug_platform_data {
 	u32 cell_low;
 	u32 mask_low;
 	int deferred_nr;
+	int shift_nr;
 };
 
 #endif /* __LINUX_PLATFORM_DATA_MLXREG_H */

commit d726f6b1997528354e1053accbb6223981e81802
Author: Vadim Pasternak <vadimp@mellanox.com>
Date:   Tue Feb 13 22:09:34 2018 +0000

    platform/x86: mlx-platform: Add deffered bus functionality
    
    mlx-platform activates i2c-mux-reg, which creates buses needed by
    mlxreg-hotplug. If the mlxreg-hotplug probe runs before the i2c-mux-reg
    probe completes, it may attempt to connect a device to an adapter number
    that has not been created yet, and fail.
    
    Make mlx-platform driver record the highest bus number in mlxreg-hotplug
    platform data and defer mlxreg-hotplug probe until all the buses are
    created.
    
    Signed-off-by: Vadim Pasternak <vadimp@mellanox.com>
    [dvhart: rewrite commit message more concisely]
    Signed-off-by: Darren Hart (VMware) <dvhart@infradead.org>

diff --git a/include/linux/platform_data/mlxreg.h b/include/linux/platform_data/mlxreg.h
index fcdc707eab99..262910967476 100644
--- a/include/linux/platform_data/mlxreg.h
+++ b/include/linux/platform_data/mlxreg.h
@@ -129,6 +129,7 @@ struct mlxreg_core_platform_data {
  * @mask: top aggregation interrupt common mask;
  * @cell_low: location of low aggregation interrupt register;
  * @mask_low: low aggregation interrupt common mask;
+ * @deferred_nr: I2C adapter number must be exist prior probing execution;
  */
 struct mlxreg_core_hotplug_platform_data {
 	struct mlxreg_core_item *items;
@@ -139,6 +140,7 @@ struct mlxreg_core_hotplug_platform_data {
 	u32 mask;
 	u32 cell_low;
 	u32 mask_low;
+	int deferred_nr;
 };
 
 #endif /* __LINUX_PLATFORM_DATA_MLXREG_H */

commit c6acad68eb2dbffd0497f91b206de5c362f59ee4
Author: Vadim Pasternak <vadimp@mellanox.com>
Date:   Mon Jan 22 19:55:11 2018 -0800

    platform/mellanox: mlxreg-hotplug: Modify to use a regmap interface
    
    Restructure mlxreg header for unification of hotplug item definitions.
    
    Unify hotplug items to allow any kind of item (power controller, fan
    eeprom, psu eeprom, asic health) in common way.
    
    Use a hardware independent regmap interface, enabling the support of
    hotplug events over programmable devices attached to different bus
    types, such as I2C, LPC, or SPI. Add a device node to the
    mlxreg_core_data structure.
    
    Signed-off-by: Vadim Pasternak <vadimp@mellanox.com>
    Acked-by: Andy Shevchenko <andy.shevchenko@gmail.com>
    [dvhart: spelling corrections, refactor device node introduction]
    Signed-off-by: Darren Hart (VMware) <dvhart@infradead.org>

diff --git a/include/linux/platform_data/mlxreg.h b/include/linux/platform_data/mlxreg.h
index ffbcb7886c62..fcdc707eab99 100644
--- a/include/linux/platform_data/mlxreg.h
+++ b/include/linux/platform_data/mlxreg.h
@@ -34,8 +34,11 @@
 #ifndef __LINUX_PLATFORM_DATA_MLXREG_H
 #define __LINUX_PLATFORM_DATA_MLXREG_H
 
+#define MLXREG_CORE_LABEL_MAX_SIZE	32
+
 /**
  * struct mlxreg_hotplug_device - I2C device data:
+ *
  * @adapter: I2C device adapter;
  * @client: I2C device client;
  * @brdinfo: device board information;
@@ -47,52 +50,95 @@
 struct mlxreg_hotplug_device {
 	struct i2c_adapter *adapter;
 	struct i2c_client *client;
-	struct i2c_board_info brdinfo;
+	struct i2c_board_info *brdinfo;
 	int nr;
 };
 
 /**
- * struct mlxreg_hotplug_platform_data - device platform data:
- * @top_aggr_offset: offset of top aggregation interrupt register;
- * @top_aggr_mask: top aggregation interrupt common mask;
- * @top_aggr_psu_mask: top aggregation interrupt PSU mask;
- * @psu_reg_offset: offset of PSU interrupt register;
- * @psu_mask: PSU interrupt mask;
- * @psu_count: number of equipped replaceable PSUs;
- * @psu: pointer to PSU devices data array;
- * @top_aggr_pwr_mask: top aggregation interrupt power mask;
- * @pwr_reg_offset: offset of power interrupt register
- * @pwr_mask: power interrupt mask;
- * @pwr_count: number of power sources;
- * @pwr: pointer to power devices data array;
- * @top_aggr_fan_mask: top aggregation interrupt FAN mask;
- * @fan_reg_offset: offset of FAN interrupt register;
- * @fan_mask: FAN interrupt mask;
- * @fan_count: number of equipped replaceable FANs;
- * @fan: pointer to FAN devices data array;
+ * struct mlxreg_core_data - attributes control data:
+ *
+ * @label: attribute label;
+ * @label: attribute register offset;
+ * @reg: attribute register;
+ * @mask: attribute access mask;
+ * @mode: access mode;
+ * @bit: attribute effective bit;
+ * @np - pointer to node platform associated with attribute;
+ * @hpdev - hotplug device data;
+ * @health_cntr: dynamic device health indication counter;
+ * @attached: true if device has been attached after good health indication;
+ */
+struct mlxreg_core_data {
+	char label[MLXREG_CORE_LABEL_MAX_SIZE];
+	u32 reg;
+	u32 mask;
+	u32 bit;
+	umode_t	mode;
+	struct device_node *np;
+	struct mlxreg_hotplug_device hpdev;
+	u8 health_cntr;
+	bool attached;
+};
+
+/**
+ * struct mlxreg_core_item - same type components controlled by the driver:
+ *
+ * @data: component data;
+ * @aggr_mask: group aggregation mask;
+ * @reg: group interrupt status register;
+ * @mask: group interrupt mask;
+ * @cache: last status value for elements fro the same group;
+ * @count: number of available elements in the group;
+ * @ind: element's index inside the group;
+ * @inversed: if 0: 0 for signal status is OK, if 1 - 1 is OK;
+ * @health: true if device has health indication, false in other case;
+ */
+struct mlxreg_core_item {
+	struct mlxreg_core_data *data;
+	u32 aggr_mask;
+	u32 reg;
+	u32 mask;
+	u32 cache;
+	u8 count;
+	u8 ind;
+	u8 inversed;
+	u8 health;
+};
+
+/**
+ * struct mlxreg_core_platform_data - platform data:
+ *
+ * @led_data: led private data;
+ * @regmap: register map of parent device;
+ * @counter: number of led instances;
+ */
+struct mlxreg_core_platform_data {
+	struct mlxreg_core_data *data;
+	void *regmap;
+	int counter;
+};
+
+/**
+ * struct mlxreg_core_hotplug_platform_data - hotplug platform data:
  *
- * Structure represents board platform data, related to system hotplug events,
- * like FAN, PSU, power cable insertion and removing. This data provides the
- * number of hot-pluggable devices and hardware description for event handling.
+ * @items: same type components with the hotplug capability;
+ * @irq: platform interrupt number;
+ * @regmap: register map of parent device;
+ * @counter: number of the components with the hotplug capability;
+ * @cell: location of top aggregation interrupt register;
+ * @mask: top aggregation interrupt common mask;
+ * @cell_low: location of low aggregation interrupt register;
+ * @mask_low: low aggregation interrupt common mask;
  */
-struct mlxreg_hotplug_platform_data {
-	u16 top_aggr_offset;
-	u8 top_aggr_mask;
-	u8 top_aggr_psu_mask;
-	u16 psu_reg_offset;
-	u8 psu_mask;
-	u8 psu_count;
-	struct mlxreg_hotplug_device *psu;
-	u8 top_aggr_pwr_mask;
-	u16 pwr_reg_offset;
-	u8 pwr_mask;
-	u8 pwr_count;
-	struct mlxreg_hotplug_device *pwr;
-	u8 top_aggr_fan_mask;
-	u16 fan_reg_offset;
-	u8 fan_mask;
-	u8 fan_count;
-	struct mlxreg_hotplug_device *fan;
+struct mlxreg_core_hotplug_platform_data {
+	struct mlxreg_core_item *items;
+	int irq;
+	void *regmap;
+	int counter;
+	u32 cell;
+	u32 mask;
+	u32 cell_low;
+	u32 mask_low;
 };
 
 #endif /* __LINUX_PLATFORM_DATA_MLXREG_H */

commit 3d838f5514ca5318f46bdb5b3f997cee66091695
Author: Vadim Pasternak <vadimp@mellanox.com>
Date:   Mon Jan 22 18:43:27 2018 -0800

    platform/mellanox: Rename i2c bus to nr
    
    Use Linux convention of nr instead of bus for i2c adapter number.
    
    Signed-off-by: Vadim Pasternak <vadimp@mellanox.com>
    Acked-by: Andy Shevchenko <andy.shevchenko@gmail.com>
    [dvhart: refactored commit into smaller functional changes]
    Signed-off-by: Darren Hart (VMware) <dvhart@infradead.org>

diff --git a/include/linux/platform_data/mlxreg.h b/include/linux/platform_data/mlxreg.h
index 8dcbb8e21ee2..ffbcb7886c62 100644
--- a/include/linux/platform_data/mlxreg.h
+++ b/include/linux/platform_data/mlxreg.h
@@ -39,7 +39,7 @@
  * @adapter: I2C device adapter;
  * @client: I2C device client;
  * @brdinfo: device board information;
- * @bus: I2C bus, where device is attached;
+ * @nr: I2C device adapter number, to which device is to be attached;
  *
  * Structure represents I2C hotplug device static data (board topology) and
  * dynamic data (related kernel objects handles).
@@ -48,7 +48,7 @@ struct mlxreg_hotplug_device {
 	struct i2c_adapter *adapter;
 	struct i2c_client *client;
 	struct i2c_board_info brdinfo;
-	u16 bus;
+	int nr;
 };
 
 /**

commit 1f976f6978bf6156ce822eb279ac86c519b10329
Author: Vadim Pasternak <vadimp@mellanox.com>
Date:   Wed Jan 17 18:21:53 2018 +0000

    platform/x86: Move Mellanox platform hotplug driver to platform/mellanox
    
    In preparation for making the hotplug driver build for different
    architectures, move mlxcpld-hotplug.c to platform/mellanox and the
    header to include/linux/platform_data as mlxreg.h to reflect the new
    interface changes to come.
    
    Replace references to CPLD with REG throughout the files, consistent
    with the new name.
    
    Signed-off-by: Vadim Pasternak <vadimp@mellanox.com>
    Acked-by: Andy Shevchenko <andy.shevchenko@gmail.com>
    [dvhart: update copyright, rewrite commit message]
    Signed-off-by: Darren Hart (VMware) <dvhart@infradead.org>

diff --git a/include/linux/platform_data/mlxreg.h b/include/linux/platform_data/mlxreg.h
new file mode 100644
index 000000000000..8dcbb8e21ee2
--- /dev/null
+++ b/include/linux/platform_data/mlxreg.h
@@ -0,0 +1,98 @@
+/*
+ * Copyright (c) 2017 Mellanox Technologies. All rights reserved.
+ * Copyright (c) 2017 Vadim Pasternak <vadimp@mellanox.com>
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are met:
+ *
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ * 3. Neither the names of the copyright holders nor the names of its
+ *    contributors may be used to endorse or promote products derived from
+ *    this software without specific prior written permission.
+ *
+ * Alternatively, this software may be distributed under the terms of the
+ * GNU General Public License ("GPL") version 2 as published by the Free
+ * Software Foundation.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
+ * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
+ * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
+ * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
+ * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
+ * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
+ * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+ * POSSIBILITY OF SUCH DAMAGE.
+ */
+
+#ifndef __LINUX_PLATFORM_DATA_MLXREG_H
+#define __LINUX_PLATFORM_DATA_MLXREG_H
+
+/**
+ * struct mlxreg_hotplug_device - I2C device data:
+ * @adapter: I2C device adapter;
+ * @client: I2C device client;
+ * @brdinfo: device board information;
+ * @bus: I2C bus, where device is attached;
+ *
+ * Structure represents I2C hotplug device static data (board topology) and
+ * dynamic data (related kernel objects handles).
+ */
+struct mlxreg_hotplug_device {
+	struct i2c_adapter *adapter;
+	struct i2c_client *client;
+	struct i2c_board_info brdinfo;
+	u16 bus;
+};
+
+/**
+ * struct mlxreg_hotplug_platform_data - device platform data:
+ * @top_aggr_offset: offset of top aggregation interrupt register;
+ * @top_aggr_mask: top aggregation interrupt common mask;
+ * @top_aggr_psu_mask: top aggregation interrupt PSU mask;
+ * @psu_reg_offset: offset of PSU interrupt register;
+ * @psu_mask: PSU interrupt mask;
+ * @psu_count: number of equipped replaceable PSUs;
+ * @psu: pointer to PSU devices data array;
+ * @top_aggr_pwr_mask: top aggregation interrupt power mask;
+ * @pwr_reg_offset: offset of power interrupt register
+ * @pwr_mask: power interrupt mask;
+ * @pwr_count: number of power sources;
+ * @pwr: pointer to power devices data array;
+ * @top_aggr_fan_mask: top aggregation interrupt FAN mask;
+ * @fan_reg_offset: offset of FAN interrupt register;
+ * @fan_mask: FAN interrupt mask;
+ * @fan_count: number of equipped replaceable FANs;
+ * @fan: pointer to FAN devices data array;
+ *
+ * Structure represents board platform data, related to system hotplug events,
+ * like FAN, PSU, power cable insertion and removing. This data provides the
+ * number of hot-pluggable devices and hardware description for event handling.
+ */
+struct mlxreg_hotplug_platform_data {
+	u16 top_aggr_offset;
+	u8 top_aggr_mask;
+	u8 top_aggr_psu_mask;
+	u16 psu_reg_offset;
+	u8 psu_mask;
+	u8 psu_count;
+	struct mlxreg_hotplug_device *psu;
+	u8 top_aggr_pwr_mask;
+	u16 pwr_reg_offset;
+	u8 pwr_mask;
+	u8 pwr_count;
+	struct mlxreg_hotplug_device *pwr;
+	u8 top_aggr_fan_mask;
+	u16 fan_reg_offset;
+	u8 fan_mask;
+	u8 fan_count;
+	struct mlxreg_hotplug_device *fan;
+};
+
+#endif /* __LINUX_PLATFORM_DATA_MLXREG_H */
