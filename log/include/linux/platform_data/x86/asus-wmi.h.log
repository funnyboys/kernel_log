commit b0dbd97de1f1fd6b3c9a7bb8f7c795bba7e169d8
Author: Hans de Goede <hdegoede@redhat.com>
Date:   Sun May 10 14:24:31 2020 +0200

    platform/x86: asus-wmi: Add support for SW_TABLET_MODE
    
    On Asus 2-in-1s with a detachable keyboard the Asus WMI interface
    reports if the tablet is attached to the keyboard or not.
    
    Report if the 2-in-1 is in tablet or clamshell mode to userspace
    by reporting SW_TABLET_MODE events to userspace.
    
    This has been tested on a T100TA, T100CHI, T100HA and T200TA.
    
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Signed-off-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>

diff --git a/include/linux/platform_data/x86/asus-wmi.h b/include/linux/platform_data/x86/asus-wmi.h
index d39fc658c320..897b8332a39f 100644
--- a/include/linux/platform_data/x86/asus-wmi.h
+++ b/include/linux/platform_data/x86/asus-wmi.h
@@ -85,6 +85,9 @@
 /* Maximum charging percentage */
 #define ASUS_WMI_DEVID_RSOC		0x00120057
 
+/* Keyboard dock */
+#define ASUS_WMI_DEVID_KBD_DOCK		0x00120063
+
 /* DSTS masks */
 #define ASUS_WMI_DSTS_STATUS_BIT	0x00000001
 #define ASUS_WMI_DSTS_UNKNOWN_BIT	0x00000002

commit 2daa86e78c494d06d0aac231e4533f3dc50fa432
Author: Leonid Maksymchuk <leonmaxx@gmail.com>
Date:   Sun Dec 15 16:26:34 2019 +0200

    platform/x86: asus_wmi: Support throttle thermal policy
    
    Throttle thermal policy ACPI device is used to control CPU cooling and
    throttling. This patch adds sysfs entry for setting current mode and
    Fn+F5 hotkey that switches to next.
    
    Policy modes:
    * 0x00 - default
    * 0x01 - overboost
    * 0x02 - silent
    
    Signed-off-by: Leonid Maksymchuk <leonmaxx@gmail.com>
    Signed-off-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>

diff --git a/include/linux/platform_data/x86/asus-wmi.h b/include/linux/platform_data/x86/asus-wmi.h
index 60249e22e844..d39fc658c320 100644
--- a/include/linux/platform_data/x86/asus-wmi.h
+++ b/include/linux/platform_data/x86/asus-wmi.h
@@ -58,6 +58,7 @@
 #define ASUS_WMI_DEVID_LIGHT_SENSOR	0x00050022 /* ?? */
 #define ASUS_WMI_DEVID_LIGHTBAR		0x00050025
 #define ASUS_WMI_DEVID_FAN_BOOST_MODE	0x00110018
+#define ASUS_WMI_DEVID_THROTTLE_THERMAL_POLICY 0x00120075
 
 /* Misc */
 #define ASUS_WMI_DEVID_CAMERA		0x00060013

commit 0c37f44845557b5e5b91ab320f256a4fd5059648
Author: Kristian Klausen <kristian@klausen.dk>
Date:   Mon Sep 9 19:31:27 2019 +0200

    platform/x86: asus-wmi: Rename CHARGE_THRESHOLD to RSOC
    
    The device is officially called "Relative state of charge" (RSOC).
    At the same time add the missing DEVID from the name.
    
    Signed-off-by: Kristian Klausen <kristian@klausen.dk>
    Signed-off-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>

diff --git a/include/linux/platform_data/x86/asus-wmi.h b/include/linux/platform_data/x86/asus-wmi.h
index 21f0426c8272..60249e22e844 100644
--- a/include/linux/platform_data/x86/asus-wmi.h
+++ b/include/linux/platform_data/x86/asus-wmi.h
@@ -82,7 +82,7 @@
 #define ASUS_WMI_DEVID_LID_RESUME	0x00120031
 
 /* Maximum charging percentage */
-#define ASUS_WMI_CHARGE_THRESHOLD	0x00120057
+#define ASUS_WMI_DEVID_RSOC		0x00120057
 
 /* DSTS masks */
 #define ASUS_WMI_DSTS_STATUS_BIT	0x00000001

commit 7c28503db19cfa28e394a394aca61c79fbf3f969
Author: Kristian Klausen <kristian@klausen.dk>
Date:   Mon Sep 9 19:31:26 2019 +0200

    platform/x86: asus-wmi: Reorder ASUS_WMI_CHARGE_THRESHOLD
    
    At the same time add a comment explaining what it is used for.
    
    Signed-off-by: Kristian Klausen <kristian@klausen.dk>
    Signed-off-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>

diff --git a/include/linux/platform_data/x86/asus-wmi.h b/include/linux/platform_data/x86/asus-wmi.h
index 53934ef38d98..21f0426c8272 100644
--- a/include/linux/platform_data/x86/asus-wmi.h
+++ b/include/linux/platform_data/x86/asus-wmi.h
@@ -61,7 +61,6 @@
 
 /* Misc */
 #define ASUS_WMI_DEVID_CAMERA		0x00060013
-#define ASUS_WMI_CHARGE_THRESHOLD	0x00120057
 
 /* Storage */
 #define ASUS_WMI_DEVID_CARDREADER	0x00080013
@@ -82,6 +81,9 @@
 /* Deep S3 / Resume on LID open */
 #define ASUS_WMI_DEVID_LID_RESUME	0x00120031
 
+/* Maximum charging percentage */
+#define ASUS_WMI_CHARGE_THRESHOLD	0x00120057
+
 /* DSTS masks */
 #define ASUS_WMI_DSTS_STATUS_BIT	0x00000001
 #define ASUS_WMI_DSTS_UNKNOWN_BIT	0x00000002

commit d507a54f5865d8dcbdd16c66a1a2da15640878ca
Author: Kristian Klausen <kristian@klausen.dk>
Date:   Mon Aug 5 21:23:05 2019 +0200

    platform/x86: asus-wmi: Add support for charge threshold
    
    Most newer ASUS laptops supports limiting the battery charge level, which
    help prolonging the battery life.
    
    Tested on a Zenbook UX430UNR.
    
    Signed-off-by: Kristian Klausen <kristian@klausen.dk>
    Signed-off-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>

diff --git a/include/linux/platform_data/x86/asus-wmi.h b/include/linux/platform_data/x86/asus-wmi.h
index 409e16064f4b..53934ef38d98 100644
--- a/include/linux/platform_data/x86/asus-wmi.h
+++ b/include/linux/platform_data/x86/asus-wmi.h
@@ -61,6 +61,7 @@
 
 /* Misc */
 #define ASUS_WMI_DEVID_CAMERA		0x00060013
+#define ASUS_WMI_CHARGE_THRESHOLD	0x00120057
 
 /* Storage */
 #define ASUS_WMI_DEVID_CARDREADER	0x00080013

commit e3168b874321d04c160c9eb937919eb926ae232f
Author: Daniel Drake <drake@endlessm.com>
Date:   Mon Jul 29 16:27:39 2019 +0800

    platform/x86: asus-wmi: fix CPU fan control on recent products
    
    Previously, asus-wmi was using the AGFN interface and FAN_CTRL device
    for CPU fan control. However, this code has been found to be not fully
    working on some recent products, and having checked the spec, these
    interfaces are marked as being removed from future products currently
    in development.
    
    The replacement appears to be the CPU_FAN device, added in spec version
    8.3 (March 2014) and present on many modern Asus laptops.
    
    Add support for this device, and use it whenever it is detected.
    The older approach based on AGFN and FAN_CTRL is used as a fallback
    on products that do not have such device.
    
    Other than switching between automatic and full speed, there is
    no fan speed control through this new interface.
    
    Signed-off-by: Daniel Drake <drake@endlessm.com>
    Signed-off-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>

diff --git a/include/linux/platform_data/x86/asus-wmi.h b/include/linux/platform_data/x86/asus-wmi.h
index 5ae9c062a1f6..409e16064f4b 100644
--- a/include/linux/platform_data/x86/asus-wmi.h
+++ b/include/linux/platform_data/x86/asus-wmi.h
@@ -73,6 +73,7 @@
 /* Fan, Thermal */
 #define ASUS_WMI_DEVID_THERMAL_CTRL	0x00110011
 #define ASUS_WMI_DEVID_FAN_CTRL		0x00110012 /* deprecated */
+#define ASUS_WMI_DEVID_CPU_FAN_CTRL	0x00110013
 
 /* Power */
 #define ASUS_WMI_DEVID_PROCESSOR_STATE	0x00120012

commit 2889ffcfc2522d6d25e5bda704275064062bbb21
Author: Daniel Drake <drake@endlessm.com>
Date:   Mon Jul 29 16:27:37 2019 +0800

    platform/x86: asus-wmi: cleanup AGFN fan handling
    
    The asus-wmi driver currently uses the "AGFN" interface and
    the FAN_CTRL device for fan control. According to the spec, this
    interface is very dated and marked as pending removal from products
    currently in development.
    
    Clean up the way that the AGFN fan is detected and handled, also
    preparing the driver for the introduction of an alternate fan
    control method needed to support recent Asus products.
    
    Not anticipating further development of this interface, simplify
    the code by dropping any notion of being able to control multiple
    AGFN fans (this was already limited to just a single fan through only
    exposing a single fan in sysfs).
    
    Check for the presence of AGFN fans at probe time, simplifying the code
    flow in asus_hwmon_sysfs_is_visible().
    
    Signed-off-by: Daniel Drake <drake@endlessm.com>
    Signed-off-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>

diff --git a/include/linux/platform_data/x86/asus-wmi.h b/include/linux/platform_data/x86/asus-wmi.h
index 4802cd2c7309..5ae9c062a1f6 100644
--- a/include/linux/platform_data/x86/asus-wmi.h
+++ b/include/linux/platform_data/x86/asus-wmi.h
@@ -12,7 +12,7 @@
 #define ASUS_WMI_METHODID_GPID		0x44495047 /* Get Panel ID?? (Resol) */
 #define ASUS_WMI_METHODID_QMOD		0x444F4D51 /* Quiet MODe */
 #define ASUS_WMI_METHODID_SPLV		0x4C425053 /* Set Panel Light Value */
-#define ASUS_WMI_METHODID_AGFN		0x4E464741 /* FaN? */
+#define ASUS_WMI_METHODID_AGFN		0x4E464741 /* Atk Generic FuNction */
 #define ASUS_WMI_METHODID_SFUN		0x4E554653 /* FUNCtionalities */
 #define ASUS_WMI_METHODID_SDSP		0x50534453 /* Set DiSPlay output */
 #define ASUS_WMI_METHODID_GDSP		0x50534447 /* Get DiSPlay output */
@@ -72,7 +72,7 @@
 
 /* Fan, Thermal */
 #define ASUS_WMI_DEVID_THERMAL_CTRL	0x00110011
-#define ASUS_WMI_DEVID_FAN_CTRL		0x00110012
+#define ASUS_WMI_DEVID_FAN_CTRL		0x00110012 /* deprecated */
 
 /* Power */
 #define ASUS_WMI_DEVID_PROCESSOR_STATE	0x00120012

commit 9af93db9e140a4e6e79cdb098919bc928a72cd59
Author: Daniel Drake <drake@endlessm.com>
Date:   Wed Jul 17 13:10:58 2019 +0800

    platform/x86: asus: Rename "fan mode" to "fan boost mode"
    
    The Asus WMI spec indicates that the function being controlled here
    is called "Fan Boost Mode". The user-facing documentation also calls it
    this.
    
    The spec uses the term "fan mode" is used to refer to other things,
    including functionality expected to appear on future products.
    We missed this before as we are not dealing with the most readable of
    specs, and didn't forsee any confusion around shortening the name.
    
    Rename "fan mode" to "fan boost mode" to improve consistency with the
    spec and to avoid a future naming conflict.
    
    There is no interface breakage here since this has yet to be included
    in an official kernel release. I also updated the kernel version listed
    under ABI accordingly.
    
    Signed-off-by: Daniel Drake <drake@endlessm.com>
    Acked-by: Yurii Pavlovskyi <yurii.pavlovskyi@gmail.com>
    Signed-off-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>

diff --git a/include/linux/platform_data/x86/asus-wmi.h b/include/linux/platform_data/x86/asus-wmi.h
index 8551156b8dca..4802cd2c7309 100644
--- a/include/linux/platform_data/x86/asus-wmi.h
+++ b/include/linux/platform_data/x86/asus-wmi.h
@@ -57,7 +57,7 @@
 #define ASUS_WMI_DEVID_KBD_BACKLIGHT	0x00050021
 #define ASUS_WMI_DEVID_LIGHT_SENSOR	0x00050022 /* ?? */
 #define ASUS_WMI_DEVID_LIGHTBAR		0x00050025
-#define ASUS_WMI_DEVID_FAN_MODE		0x00110018
+#define ASUS_WMI_DEVID_FAN_BOOST_MODE	0x00110018
 
 /* Misc */
 #define ASUS_WMI_DEVID_CAMERA		0x00060013

commit b096f626a6827ad2ced5ebdbdc04e62422d463f6
Author: Yurii Pavlovskyi <yurii.pavlovskyi@gmail.com>
Date:   Tue May 14 21:07:05 2019 +0200

    platform/x86: asus-wmi: Switch fan boost mode
    
    The WMI exposes a write-only device ID where up to three fan modes can be
    switched on some laptops (TUF Gaming FX505GM). There is a hotkey
    combination Fn-F5 that does have a fan icon, which is designed to toggle
    between fan modes. The DSTS of the device ID returns information about the
    presence of this capability and the presence of each of the two additional
    fan modes as a bitmask (0x01 - overboost present, 0x02 - silent present)
    [1].
    
    Add a SysFS entry that reads the last written value and updates value in
    WMI on write and a hotkey handler that toggles the modes taking into
    account their availability according to DSTS.
    
    Modes:
    * 0x00 - normal or balanced,
    * 0x01 - overboost, increased fan RPM,
    * 0x02 - silent, decreased fan RPM
    
    [1] Link: https://lkml.org/lkml/2019/4/12/110
    
    Signed-off-by: Yurii Pavlovskyi <yurii.pavlovskyi@gmail.com>
    Suggested-by: Daniel Drake <drake@endlessm.com>
    Signed-off-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>

diff --git a/include/linux/platform_data/x86/asus-wmi.h b/include/linux/platform_data/x86/asus-wmi.h
index 0668f76df921..8551156b8dca 100644
--- a/include/linux/platform_data/x86/asus-wmi.h
+++ b/include/linux/platform_data/x86/asus-wmi.h
@@ -57,6 +57,7 @@
 #define ASUS_WMI_DEVID_KBD_BACKLIGHT	0x00050021
 #define ASUS_WMI_DEVID_LIGHT_SENSOR	0x00050022 /* ?? */
 #define ASUS_WMI_DEVID_LIGHTBAR		0x00050025
+#define ASUS_WMI_DEVID_FAN_MODE		0x00110018
 
 /* Misc */
 #define ASUS_WMI_DEVID_CAMERA		0x00060013

commit e0668f28888184f6c633110a37386f2d4a6fa00e
Author: Yurii Pavlovskyi <yurii.pavlovskyi@gmail.com>
Date:   Tue May 14 21:00:31 2019 +0200

    platform/x86: asus-wmi: Improve DSTS WMI method ID detection
    
    The DSTS method detection mistakenly selects DCTS instead of DSTS if
    nothing is returned when the method ID is not defined in WMNB. As a result,
    the control of keyboard backlight is not functional for TUF Gaming series
    laptops. Implement detection based on _UID of the WMI device instead.
    
    There is evidence that DCTS is handled by ACPI WMI devices that have _UID
    ASUSWMI, whereas none of the devices without ASUSWMI respond to DCTS and
    DSTS is used instead [1].
    
    DSDT examples:
    
    FX505GM (_UID ATK):
    Method (WMNB, 3, Serialized)
    { ...
        If ((Local0 == 0x53545344))
        {
            ...
            Return (Zero)
        }
        ...
        // No return
    }
    
    K54C (_UID ATK):
    Method (WMNB, 3, Serialized)
    { ...
        If ((Local0 == 0x53545344))
        {
            ...
            Return (0x02)
        }
        ...
        Return (0xFFFFFFFE)
    }
    
    [1] Link: https://lkml.org/lkml/2019/4/11/322
    
    Signed-off-by: Yurii Pavlovskyi <yurii.pavlovskyi@gmail.com>
    Suggested-by: Daniel Drake <drake@endlessm.com>
    Signed-off-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>

diff --git a/include/linux/platform_data/x86/asus-wmi.h b/include/linux/platform_data/x86/asus-wmi.h
index bfba245636a7..0668f76df921 100644
--- a/include/linux/platform_data/x86/asus-wmi.h
+++ b/include/linux/platform_data/x86/asus-wmi.h
@@ -18,8 +18,8 @@
 #define ASUS_WMI_METHODID_GDSP		0x50534447 /* Get DiSPlay output */
 #define ASUS_WMI_METHODID_DEVP		0x50564544 /* DEVice Policy */
 #define ASUS_WMI_METHODID_OSVR		0x5256534F /* OS VeRsion */
-#define ASUS_WMI_METHODID_DSTS		0x53544344 /* Device STatuS */
-#define ASUS_WMI_METHODID_DSTS2		0x53545344 /* Device STatuS #2*/
+#define ASUS_WMI_METHODID_DCTS		0x53544344 /* Device status (DCTS) */
+#define ASUS_WMI_METHODID_DSTS		0x53545344 /* Device status (DSTS) */
 #define ASUS_WMI_METHODID_BSTS		0x53545342 /* Bios STatuS ? */
 #define ASUS_WMI_METHODID_DEVS		0x53564544 /* DEVice Set */
 #define ASUS_WMI_METHODID_CFVS		0x53564643 /* CPU Frequency Volt Set */

commit 487579bab867e739be3d2c0064ad3af1221482c8
Author: Chris Chiu <chiu@endlessm.com>
Date:   Thu Apr 18 14:46:48 2019 +0800

    platform/x86: asus-wmi: Add fn-lock mode switch support
    
    Some of latest ASUS laptops support new fn-lock mode switching.
    This commit detect whether if the fn-lock option is enabled in
    BIOS setting, and toggle the fn-lock mode via a new WMI DEVID
    0x00100023 when the corresponding notify code captured.
    
    The ASUS fn-lock mode switch is activated by pressing Fn+Esc.
    When on, keys F1 to F12 behave as applicable, with meanings
    defined by the application being used at the time. When off,
    F1 to F12 directly triggers hardware features, well known audio
    volume up/down, brightness up/down...etc, which were triggered
    by holding down Fn key and F-keys.
    
    Because there's no way to retrieve the fn-lock mode via existing
    WMI methods per ASUS spec, driver need to initialize and keep the
    fn-lock mode by itself.
    
    Signed-off-by: Chris Chiu <chiu@endlessm.com>
    Reviewed-by: Daniel Drake <drake@endlessm.com>
    Signed-off-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>

diff --git a/include/linux/platform_data/x86/asus-wmi.h b/include/linux/platform_data/x86/asus-wmi.h
index 53dfc2541960..bfba245636a7 100644
--- a/include/linux/platform_data/x86/asus-wmi.h
+++ b/include/linux/platform_data/x86/asus-wmi.h
@@ -67,6 +67,7 @@
 /* Input */
 #define ASUS_WMI_DEVID_TOUCHPAD		0x00100011
 #define ASUS_WMI_DEVID_TOUCHPAD_LED	0x00100012
+#define ASUS_WMI_DEVID_FNLOCK		0x00100023
 
 /* Fan, Thermal */
 #define ASUS_WMI_DEVID_THERMAL_CTRL	0x00110011

commit ffb6ce7086ee2d68d8d6d987882f1c5e923fee7e
Author: Daniel Drake <drake@endlessm.com>
Date:   Tue Oct 9 14:40:55 2018 +0800

    platform/x86: asus-wmi: export function for evaluating WMI methods
    
    Export asus_wmi_evaluate_method() and related headers for use by other
    drivers.
    
    hid-asus is going to use this to avoid advertising that it has a keyboard
    backlight when the keyboard backlight is controlled via WMI.
    
    Signed-off-by: Daniel Drake <drake@endlessm.com>
    Signed-off-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>

diff --git a/include/linux/platform_data/x86/asus-wmi.h b/include/linux/platform_data/x86/asus-wmi.h
new file mode 100644
index 000000000000..53dfc2541960
--- /dev/null
+++ b/include/linux/platform_data/x86/asus-wmi.h
@@ -0,0 +1,101 @@
+/* SPDX-License-Identifier: GPL-2.0 */
+#ifndef __PLATFORM_DATA_X86_ASUS_WMI_H
+#define __PLATFORM_DATA_X86_ASUS_WMI_H
+
+#include <linux/errno.h>
+#include <linux/types.h>
+
+/* WMI Methods */
+#define ASUS_WMI_METHODID_SPEC	        0x43455053 /* BIOS SPECification */
+#define ASUS_WMI_METHODID_SFBD		0x44424653 /* Set First Boot Device */
+#define ASUS_WMI_METHODID_GLCD		0x44434C47 /* Get LCD status */
+#define ASUS_WMI_METHODID_GPID		0x44495047 /* Get Panel ID?? (Resol) */
+#define ASUS_WMI_METHODID_QMOD		0x444F4D51 /* Quiet MODe */
+#define ASUS_WMI_METHODID_SPLV		0x4C425053 /* Set Panel Light Value */
+#define ASUS_WMI_METHODID_AGFN		0x4E464741 /* FaN? */
+#define ASUS_WMI_METHODID_SFUN		0x4E554653 /* FUNCtionalities */
+#define ASUS_WMI_METHODID_SDSP		0x50534453 /* Set DiSPlay output */
+#define ASUS_WMI_METHODID_GDSP		0x50534447 /* Get DiSPlay output */
+#define ASUS_WMI_METHODID_DEVP		0x50564544 /* DEVice Policy */
+#define ASUS_WMI_METHODID_OSVR		0x5256534F /* OS VeRsion */
+#define ASUS_WMI_METHODID_DSTS		0x53544344 /* Device STatuS */
+#define ASUS_WMI_METHODID_DSTS2		0x53545344 /* Device STatuS #2*/
+#define ASUS_WMI_METHODID_BSTS		0x53545342 /* Bios STatuS ? */
+#define ASUS_WMI_METHODID_DEVS		0x53564544 /* DEVice Set */
+#define ASUS_WMI_METHODID_CFVS		0x53564643 /* CPU Frequency Volt Set */
+#define ASUS_WMI_METHODID_KBFT		0x5446424B /* KeyBoard FilTer */
+#define ASUS_WMI_METHODID_INIT		0x54494E49 /* INITialize */
+#define ASUS_WMI_METHODID_HKEY		0x59454B48 /* Hot KEY ?? */
+
+#define ASUS_WMI_UNSUPPORTED_METHOD	0xFFFFFFFE
+
+/* Wireless */
+#define ASUS_WMI_DEVID_HW_SWITCH	0x00010001
+#define ASUS_WMI_DEVID_WIRELESS_LED	0x00010002
+#define ASUS_WMI_DEVID_CWAP		0x00010003
+#define ASUS_WMI_DEVID_WLAN		0x00010011
+#define ASUS_WMI_DEVID_WLAN_LED		0x00010012
+#define ASUS_WMI_DEVID_BLUETOOTH	0x00010013
+#define ASUS_WMI_DEVID_GPS		0x00010015
+#define ASUS_WMI_DEVID_WIMAX		0x00010017
+#define ASUS_WMI_DEVID_WWAN3G		0x00010019
+#define ASUS_WMI_DEVID_UWB		0x00010021
+
+/* Leds */
+/* 0x000200XX and 0x000400XX */
+#define ASUS_WMI_DEVID_LED1		0x00020011
+#define ASUS_WMI_DEVID_LED2		0x00020012
+#define ASUS_WMI_DEVID_LED3		0x00020013
+#define ASUS_WMI_DEVID_LED4		0x00020014
+#define ASUS_WMI_DEVID_LED5		0x00020015
+#define ASUS_WMI_DEVID_LED6		0x00020016
+
+/* Backlight and Brightness */
+#define ASUS_WMI_DEVID_ALS_ENABLE	0x00050001 /* Ambient Light Sensor */
+#define ASUS_WMI_DEVID_BACKLIGHT	0x00050011
+#define ASUS_WMI_DEVID_BRIGHTNESS	0x00050012
+#define ASUS_WMI_DEVID_KBD_BACKLIGHT	0x00050021
+#define ASUS_WMI_DEVID_LIGHT_SENSOR	0x00050022 /* ?? */
+#define ASUS_WMI_DEVID_LIGHTBAR		0x00050025
+
+/* Misc */
+#define ASUS_WMI_DEVID_CAMERA		0x00060013
+
+/* Storage */
+#define ASUS_WMI_DEVID_CARDREADER	0x00080013
+
+/* Input */
+#define ASUS_WMI_DEVID_TOUCHPAD		0x00100011
+#define ASUS_WMI_DEVID_TOUCHPAD_LED	0x00100012
+
+/* Fan, Thermal */
+#define ASUS_WMI_DEVID_THERMAL_CTRL	0x00110011
+#define ASUS_WMI_DEVID_FAN_CTRL		0x00110012
+
+/* Power */
+#define ASUS_WMI_DEVID_PROCESSOR_STATE	0x00120012
+
+/* Deep S3 / Resume on LID open */
+#define ASUS_WMI_DEVID_LID_RESUME	0x00120031
+
+/* DSTS masks */
+#define ASUS_WMI_DSTS_STATUS_BIT	0x00000001
+#define ASUS_WMI_DSTS_UNKNOWN_BIT	0x00000002
+#define ASUS_WMI_DSTS_PRESENCE_BIT	0x00010000
+#define ASUS_WMI_DSTS_USER_BIT		0x00020000
+#define ASUS_WMI_DSTS_BIOS_BIT		0x00040000
+#define ASUS_WMI_DSTS_BRIGHTNESS_MASK	0x000000FF
+#define ASUS_WMI_DSTS_MAX_BRIGTH_MASK	0x0000FF00
+#define ASUS_WMI_DSTS_LIGHTBAR_MASK	0x0000000F
+
+#if IS_REACHABLE(CONFIG_ASUS_WMI)
+int asus_wmi_evaluate_method(u32 method_id, u32 arg0, u32 arg1, u32 *retval);
+#else
+static inline int asus_wmi_evaluate_method(u32 method_id, u32 arg0, u32 arg1,
+					   u32 *retval)
+{
+	return -ENODEV;
+}
+#endif
+
+#endif	/* __PLATFORM_DATA_X86_ASUS_WMI_H */
