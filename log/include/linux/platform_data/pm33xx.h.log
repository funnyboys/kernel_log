commit 65880ab160838e0764138894ef4450abdbed4af5
Author: Dave Gerlach <d-gerlach@ti.com>
Date:   Thu Dec 12 21:07:53 2019 -0600

    ARM: OMAP2+: pm33xx-core: Extend platform_data ops for cpuidle
    
    In order for am335x and am437x to properly enter deeper c-states in
    cpuidle they must always call into the sleep33/43xx suspend code and
    also sometimes invoke the wkup_m3_ipc driver. These are both controlled
    by the pm33xx module so we must provide a method for the platform code
    to call back into the module when it is available as the core cpuidle
    ops that are invoked by the cpuidle-arm driver must remain as built in.
    
    Extend the init platform op to take an idle function as an argument so
    that we can use this to call into the pm33xx module for c-states that
    need it. Also add a deinit op so we can unregister this idle function
    from the PM core when the pm33xx module gets unloaded.
    
    Acked-by: Santosh Shilimkar <ssantosh@kernel.org>
    Signed-off-by: Dave Gerlach <d-gerlach@ti.com>
    Acked-by: Santosh Shilimkar <ssantosh@kernel.org>
    Signed-off-by: Tony Lindgren <tony@atomide.com>

diff --git a/include/linux/platform_data/pm33xx.h b/include/linux/platform_data/pm33xx.h
index 8e59f2db2adc..644af1d89cfa 100644
--- a/include/linux/platform_data/pm33xx.h
+++ b/include/linux/platform_data/pm33xx.h
@@ -46,7 +46,8 @@ struct am33xx_pm_sram_addr {
 };
 
 struct am33xx_pm_platform_data {
-	int	(*init)(void);
+	int     (*init)(int (*idle)(u32 wfi_flags));
+	int     (*deinit)(void);
 	int	(*soc_suspend)(unsigned int state, int (*fn)(unsigned long),
 			       unsigned long args);
 	int	(*cpu_suspend)(int (*fn)(unsigned long), unsigned long args);

commit 06ee7a950b6a342cd79590e7243bdda850141967
Author: Dave Gerlach <d-gerlach@ti.com>
Date:   Thu Dec 12 21:07:52 2019 -0600

    ARM: OMAP2+: pm33xx-core: Add cpuidle_ops for am335x/am437x
    
    am335x and am437x can now make use of the generic cpuidle-arm driver.
    This requires that we define init and suspend ops to be passed set as
    the cpuidle ops for the SoC. These ops are invoked directly at the last
    stage of the cpuidle-arm driver in order to allow low level platform
    code to run and bring the CPU the rest of the way into it's desired idle
    state. It is required that the CPUIDLE_METHOD_OF_DECLARE be called from
    code that is built in so define these ops in pm33xx-core where the
    always built-in portion of the PM code for these SoCs lives.
    
    Additionally, although an soc_suspend function is already exposed by the
    pm33xx platform code, it contains additional operations needed for full
    SoC suspend beyond what is needed for a relatively simple CPU suspend
    needed during cpuidle. To get around this introduce cpu_suspend ops to
    be used by the am335x and am437x PM driver for the last stage of cpuidle
    path.
    
    Acked-by: Santosh Shilimkar <ssantosh@kernel.org>
    Signed-off-by: Dave Gerlach <d-gerlach@ti.com>
    Acked-by: Santosh Shilimkar <ssantosh@kernel.org>
    Signed-off-by: Tony Lindgren <tony@atomide.com>

diff --git a/include/linux/platform_data/pm33xx.h b/include/linux/platform_data/pm33xx.h
index dd5971937a64..8e59f2db2adc 100644
--- a/include/linux/platform_data/pm33xx.h
+++ b/include/linux/platform_data/pm33xx.h
@@ -49,6 +49,9 @@ struct am33xx_pm_platform_data {
 	int	(*init)(void);
 	int	(*soc_suspend)(unsigned int state, int (*fn)(unsigned long),
 			       unsigned long args);
+	int	(*cpu_suspend)(int (*fn)(unsigned long), unsigned long args);
+	void    (*begin_suspend)(void);
+	void    (*finish_suspend)(void);
 	struct  am33xx_pm_sram_addr *(*get_sram_addrs)(void);
 	void __iomem *(*get_rtc_base_addr)(void);
 	void (*save_context)(void);

commit 44c22a2d12a5c04da56e746819a5d2cc4cf4a5d7
Author: Keerthy <j-keerthy@ti.com>
Date:   Wed Apr 3 10:27:40 2019 +0530

    ARM: OMAP2+: pm33xx: Add support for rtc+ddr in self refresh mode
    
    Add support for rtc+ddr in self refresh mode. Add addtional
    pm hooks for save/restore and rtc suspend/resume.
    
    Signed-off-by: Keerthy <j-keerthy@ti.com>
    Signed-off-by: Tony Lindgren <tony@atomide.com>

diff --git a/include/linux/platform_data/pm33xx.h b/include/linux/platform_data/pm33xx.h
index fbf5ed73c7cc..dd5971937a64 100644
--- a/include/linux/platform_data/pm33xx.h
+++ b/include/linux/platform_data/pm33xx.h
@@ -51,6 +51,11 @@ struct am33xx_pm_platform_data {
 			       unsigned long args);
 	struct  am33xx_pm_sram_addr *(*get_sram_addrs)(void);
 	void __iomem *(*get_rtc_base_addr)(void);
+	void (*save_context)(void);
+	void (*restore_context)(void);
+	void (*prepare_rtc_suspend)(void);
+	void (*prepare_rtc_resume)(void);
+	int (*check_off_mode_enable)(void);
 };
 
 struct am33xx_pm_sram_data {

commit 8c5a916f4c8815196cc8a86b9582ca89422aac25
Author: Keerthy <j-keerthy@ti.com>
Date:   Mon Jul 9 13:03:17 2018 +0530

    ARM: OMAP2+: sleep33/43xx: Add RTC-Mode support
    
    Add support for RTC mode to low level suspend code. This includes
    providing the rtc base address for the assembly code to configuring the
    PMIC_PWR_EN line late in suspend to enter RTC+DDR mode.
    
    Note: This patch also fold in left out space parameter for
    am33xx_emif_sram_table and am43xx_emif_sram_table
    
    Signed-off-by: Dave Gerlach <d-gerlach@ti.com>
    Signed-off-by: Keerthy <j-keerthy@ti.com>
    Signed-off-by: Tony Lindgren <tony@atomide.com>

diff --git a/include/linux/platform_data/pm33xx.h b/include/linux/platform_data/pm33xx.h
index d231265c135c..fbf5ed73c7cc 100644
--- a/include/linux/platform_data/pm33xx.h
+++ b/include/linux/platform_data/pm33xx.h
@@ -42,6 +42,7 @@ struct am33xx_pm_sram_addr {
 	unsigned long *resume_offset;
 	unsigned long *emif_sram_table;
 	unsigned long *ro_sram_data;
+	unsigned long resume_address;
 };
 
 struct am33xx_pm_platform_data {
@@ -49,6 +50,7 @@ struct am33xx_pm_platform_data {
 	int	(*soc_suspend)(unsigned int state, int (*fn)(unsigned long),
 			       unsigned long args);
 	struct  am33xx_pm_sram_addr *(*get_sram_addrs)(void);
+	void __iomem *(*get_rtc_base_addr)(void);
 };
 
 struct am33xx_pm_sram_data {
@@ -60,6 +62,7 @@ struct am33xx_pm_sram_data {
 struct am33xx_pm_ro_sram_data {
 	u32 amx3_pm_sram_data_virt;
 	u32 amx3_pm_sram_data_phys;
+	void __iomem *rtc_base_virt;
 } __packed __aligned(8);
 
 #endif /* __ASSEMBLER__ */

commit 74655749a58405e259eaaba66bfc391fdbe1e34e
Author: Dave Gerlach <d-gerlach@ti.com>
Date:   Mon Jul 9 13:03:16 2018 +0530

    ARM: OMAP2+: sleep33/43xx: Make sleep actions configurable
    
    Add an argument to the sleep33xx and sleep43xx code to allow us to set
    flags to determine which portions of the code get called in order to use
    the same code for multiple power saving modes. This patch allows us to
    decide whether or not we flush and disable caches, save EMIF context,
    put the memory into self refresh and disable the EMIF, and/or invoke
    the wkup_m3 when entering into WFI.
    
    Signed-off-by: Dave Gerlach <d-gerlach@ti.com>
    Signed-off-by: Tero Kristo <t-kristo@ti.com>
    Signed-off-by: Keerthy <j-keerthy@ti.com>
    Signed-off-by: Tony Lindgren <tony@atomide.com>

diff --git a/include/linux/platform_data/pm33xx.h b/include/linux/platform_data/pm33xx.h
index f9bed2a0af9d..d231265c135c 100644
--- a/include/linux/platform_data/pm33xx.h
+++ b/include/linux/platform_data/pm33xx.h
@@ -12,6 +12,29 @@
 #include <linux/kbuild.h>
 #include <linux/types.h>
 
+/*
+ * WFI Flags for sleep code control
+ *
+ * These flags allow PM code to exclude certain operations from happening
+ * in the low level ASM code found in sleep33xx.S and sleep43xx.S
+ *
+ * WFI_FLAG_FLUSH_CACHE: Flush the ARM caches and disable caching. Only
+ *			 needed when MPU will lose context.
+ * WFI_FLAG_SELF_REFRESH: Let EMIF place DDR memory into self-refresh and
+ *			  disable EMIF.
+ * WFI_FLAG_SAVE_EMIF: Save context of all EMIF registers and restore in
+ *		       resume path. Only needed if PER domain loses context
+ *		       and must also have WFI_FLAG_SELF_REFRESH set.
+ * WFI_FLAG_WAKE_M3: Disable MPU clock or clockdomain to cause wkup_m3 to
+ *		     execute when WFI instruction executes.
+ * WFI_FLAG_RTC_ONLY: Configure the RTC to enter RTC+DDR mode.
+ */
+#define WFI_FLAG_FLUSH_CACHE		BIT(0)
+#define WFI_FLAG_SELF_REFRESH		BIT(1)
+#define WFI_FLAG_SAVE_EMIF		BIT(2)
+#define WFI_FLAG_WAKE_M3		BIT(3)
+#define WFI_FLAG_RTC_ONLY		BIT(4)
+
 #ifndef __ASSEMBLER__
 struct am33xx_pm_sram_addr {
 	void (*do_wfi)(void);
@@ -23,7 +46,8 @@ struct am33xx_pm_sram_addr {
 
 struct am33xx_pm_platform_data {
 	int	(*init)(void);
-	int	(*soc_suspend)(unsigned int state, int (*fn)(unsigned long));
+	int	(*soc_suspend)(unsigned int state, int (*fn)(unsigned long),
+			       unsigned long args);
 	struct  am33xx_pm_sram_addr *(*get_sram_addrs)(void);
 };
 

commit 41d9d44d725808f27b53f266733e6d17d83020ba
Author: Dave Gerlach <d-gerlach@ti.com>
Date:   Fri Feb 23 09:43:56 2018 -0600

    ARM: OMAP2+: pm33xx-core: Add platform code needed for PM
    
    Most of the PM code needed for am335x and am437x can be moved into a
    module under drivers but some core code must remain in mach-omap2 at the
    moment. This includes some internal clockdomain APIs and low-level ARM
    APIs which are also not exported for use by modules.
    
    Implement a few functions that handle these low-level platform
    operations can be passed to the pm33xx module through the use of
    platform data.
    
    In addition to this, to be able to share data structures between C and
    the sleep33xx and sleep43xx assembly code, we can automatically generate
    all of the C struct member offsets and sizes as macros by processing
    pm-asm-offsets.c into assembly code and then extracting the relevant
    data as is done for the generated platform asm-offsets.h files.
    
    Finally, add amx3_common_pm_init to create a dummy platform_device for
    pm33xx so that our soon to be introduced pm33xx module can probe on
    am335x and am437x platforms to enable basic suspend to mem and standby
    support.
    
    Signed-off-by: Dave Gerlach <d-gerlach@ti.com>
    Acked-by: Santosh Shilimkar <ssantosh@kernel.org>
    Signed-off-by: Tony Lindgren <tony@atomide.com>

diff --git a/include/linux/platform_data/pm33xx.h b/include/linux/platform_data/pm33xx.h
new file mode 100644
index 000000000000..f9bed2a0af9d
--- /dev/null
+++ b/include/linux/platform_data/pm33xx.h
@@ -0,0 +1,42 @@
+/* SPDX-License-Identifier: GPL-2.0 */
+/*
+ * TI pm33xx platform data
+ *
+ * Copyright (C) 2016-2018 Texas Instruments, Inc.
+ *	Dave Gerlach <d-gerlach@ti.com>
+ */
+
+#ifndef _LINUX_PLATFORM_DATA_PM33XX_H
+#define _LINUX_PLATFORM_DATA_PM33XX_H
+
+#include <linux/kbuild.h>
+#include <linux/types.h>
+
+#ifndef __ASSEMBLER__
+struct am33xx_pm_sram_addr {
+	void (*do_wfi)(void);
+	unsigned long *do_wfi_sz;
+	unsigned long *resume_offset;
+	unsigned long *emif_sram_table;
+	unsigned long *ro_sram_data;
+};
+
+struct am33xx_pm_platform_data {
+	int	(*init)(void);
+	int	(*soc_suspend)(unsigned int state, int (*fn)(unsigned long));
+	struct  am33xx_pm_sram_addr *(*get_sram_addrs)(void);
+};
+
+struct am33xx_pm_sram_data {
+	u32 wfi_flags;
+	u32 l2_aux_ctrl_val;
+	u32 l2_prefetch_ctrl_val;
+} __packed __aligned(8);
+
+struct am33xx_pm_ro_sram_data {
+	u32 amx3_pm_sram_data_virt;
+	u32 amx3_pm_sram_data_phys;
+} __packed __aligned(8);
+
+#endif /* __ASSEMBLER__ */
+#endif /* _LINUX_PLATFORM_DATA_PM33XX_H */
