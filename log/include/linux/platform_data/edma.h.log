commit 2874c5fd284268364ece81a7bd936f3c8168e567
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Mon May 27 08:55:01 2019 +0200

    treewide: Replace GPLv2 boilerplate/reference with SPDX - rule 152
    
    Based on 1 normalized pattern(s):
    
      this program is free software you can redistribute it and or modify
      it under the terms of the gnu general public license as published by
      the free software foundation either version 2 of the license or at
      your option any later version
    
    extracted by the scancode license scanner the SPDX license identifier
    
      GPL-2.0-or-later
    
    has been chosen to replace the boilerplate/reference in 3029 file(s).
    
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Reviewed-by: Allison Randal <allison@lohutok.net>
    Cc: linux-spdx@vger.kernel.org
    Link: https://lkml.kernel.org/r/20190527070032.746973796@linutronix.de
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/include/linux/platform_data/edma.h b/include/linux/platform_data/edma.h
index 0a533f94438f..ee13d5ca630d 100644
--- a/include/linux/platform_data/edma.h
+++ b/include/linux/platform_data/edma.h
@@ -1,12 +1,8 @@
+/* SPDX-License-Identifier: GPL-2.0-or-later */
 /*
  *  TI EDMA definitions
  *
  *  Copyright (C) 2006-2013 Texas Instruments.
- *
- *  This program is free software; you can redistribute  it and/or modify it
- *  under  the terms of  the GNU General  Public License as published by the
- *  Free Software Foundation;  either version 2 of the  License, or (at your
- *  option) any later version.
  */
 
 /*

commit d6a322774cb7096ca683fc46ddc9482e02ee6133
Merge: 4c257ec37bc3 8b648436eb45
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Wed Jan 13 10:59:52 2016 -0800

    Merge tag 'dmaengine-4.5-rc1' of git://git.infradead.org/users/vkoul/slave-dma
    
    Pull dmaengine updates from Vinod Koul:
     "This round we have few new features, new driver and updates to few
      drivers.
    
      The new features to dmaengine core are:
       - Synchronized transfer termination API to terminate the dmaengine
         transfers in synchronized and async fashion as required by users.
         We have its user now in ALSA dmaengine lib, img, at_xdma, axi_dmac
         drivers.
       - Universal API for channel request and start consolidation of
         request flows.  It's user is ompa-dma driver.
       - Introduce reuse of descriptors and use in pxa_dma driver
    
      Add/Remove:
       - New STM32 DMA driver
       - Removal of unused R-Car HPB-DMAC driver
    
      Updates:
       - ti-dma-crossbar updates for supporting eDMA
       - tegra-apb pm updates
       - idma64
       - mv_xor updates
       - ste_dma updates"
    
    * tag 'dmaengine-4.5-rc1' of git://git.infradead.org/users/vkoul/slave-dma: (54 commits)
      dmaengine: mv_xor: add suspend/resume support
      dmaengine: mv_xor: de-duplicate mv_chan_set_mode*()
      dmaengine: mv_xor: remove mv_xor_chan->current_type field
      dmaengine: omap-dma: Add support for DMA filter mapping to slave devices
      dmaengine: edma: Add support for DMA filter mapping to slave devices
      dmaengine: core: Introduce new, universal API to request a channel
      dmaengine: core: Move and merge the code paths using private_candidate
      dmaengine: core: Skip mask matching when it is not provided to private_candidate
      dmaengine: mdc: Correct terminate_all handling
      dmaengine: edma: Add probe callback to edma_tptc_driver
      dmaengine: dw: fix potential memory leak in dw_dma_parse_dt()
      dmaengine: stm32-dma: Fix unchecked deference of chan->desc
      dmaengine: sh: Remove unused R-Car HPB-DMAC driver
      dmaengine: usb-dmac: Document SoC specific compatibility strings
      ste_dma40: Delete an unnecessary variable initialisation in d40_probe()
      ste_dma40: Delete another unnecessary check in d40_probe()
      ste_dma40: Delete an unnecessary check before the function call "kmem_cache_destroy"
      dmaengine: tegra-apb: Free interrupts before killing tasklets
      dmaengine: tegra-apb: Update driver to use GFP_NOWAIT
      dmaengine: tegra-apb: Only save channel state for those in use
      ...

commit 23e6723c060faf5a0fc8d7bfbec440d29943fa99
Author: Peter Ujfalusi <peter.ujfalusi@ti.com>
Date:   Mon Dec 14 22:47:41 2015 +0200

    dmaengine: edma: Add support for DMA filter mapping to slave devices
    
    Add support for providing device to filter_fn mapping so client drivers
    can switch to use the dma_request_chan() API.
    
    Signed-off-by: Peter Ujfalusi <peter.ujfalusi@ti.com>
    Reviewed-by: Arnd Bergmann <arnd@arndb.de>
    Signed-off-by: Vinod Koul <vinod.koul@intel.com>

diff --git a/include/linux/platform_data/edma.h b/include/linux/platform_data/edma.h
index e2878baeb90e..105700e62ea1 100644
--- a/include/linux/platform_data/edma.h
+++ b/include/linux/platform_data/edma.h
@@ -53,12 +53,16 @@ enum dma_event_q {
 #define EDMA_CTLR(i)			((i) >> 16)
 #define EDMA_CHAN_SLOT(i)		((i) & 0xffff)
 
+#define EDMA_FILTER_PARAM(ctlr, chan)	((int[]) { EDMA_CTLR_CHAN(ctlr, chan) })
+
 struct edma_rsv_info {
 
 	const s16	(*rsv_chans)[2];
 	const s16	(*rsv_slots)[2];
 };
 
+struct dma_slave_map;
+
 /* platform_data for EDMA driver */
 struct edma_soc_info {
 	/*
@@ -76,6 +80,9 @@ struct edma_soc_info {
 
 	s8	(*queue_priority_mapping)[2];
 	const s16	(*xbar_chans)[2];
+
+	const struct dma_slave_map *slave_map;
+	int slavecnt;
 };
 
 #endif

commit ecb7deceff2a51d3be50518969bc06411f485a62
Author: Peter Ujfalusi <peter.ujfalusi@ti.com>
Date:   Wed Dec 9 10:18:10 2015 +0200

    dmaengine: edma: DT: Change memcpy channel array from 16bit to 32bit type
    
    This change makes the DT file to be easier to read since the memcpy
    channels array does not need the '/bits/ 16' to be specified, which might
    confuse some people.
    
    Signed-off-by: Peter Ujfalusi <peter.ujfalusi@ti.com>
    Acked-by: Arnd Bergmann <arnd@arndb.de>
    Acked-by: Rob Herring <robh@kernel.org>
    Acked-by: Tony Lindgren <tony@atomide.com>
    Signed-off-by: Vinod Koul <vinod.koul@intel.com>

diff --git a/include/linux/platform_data/edma.h b/include/linux/platform_data/edma.h
index e2878baeb90e..4299f4ba03bd 100644
--- a/include/linux/platform_data/edma.h
+++ b/include/linux/platform_data/edma.h
@@ -72,7 +72,7 @@ struct edma_soc_info {
 	struct edma_rsv_info	*rsv;
 
 	/* List of channels allocated for memcpy, terminated with -1 */
-	s16			*memcpy_channels;
+	s32			*memcpy_channels;
 
 	s8	(*queue_priority_mapping)[2];
 	const s16	(*xbar_chans)[2];

commit 1be5336bc7ba050ee07d352643bf4c01c513553c
Author: Peter Ujfalusi <peter.ujfalusi@ti.com>
Date:   Fri Oct 16 10:18:10 2015 +0300

    dmaengine: edma: New device tree binding
    
    With the old binding and driver architecture we had many issues:
    No way to assign eDMA channels to event queues, thus not able to tune the
    system by moving specific DMA channels to low/high priority servicing. We
    moved the cyclic channels to high priority within the code, but that was
    just a workaround to this issue.
    Memcopy was fundamentally broken: even if the driver scanned the DT/devices
    in the booted system for direct DMA users (which is not effective when the
    events are going through a crossbar) and created a map of 'used' channels,
    this information was not really usable. Since via dmaengien API the eDMA
    driver will be called with _some_ channel number, we would try to request
    this channel when any channel is requested for memcpy. By luck we got
    channel which is not used by any device most of the time so things worked,
    but if a device would have been using the given channel, but not requested
    it, the memcpy channel would have been waiting for HW event.
    The old code had the am33xx/am43xx DMA event router handling embedded. This
    should have been done in a separate driver since it is not part of the
    actual eDMA IP.
    There were no way to 'lock' PaRAM slots to be used by the DSP for example
    when booting with DT.
    In DT boot the edma node used more than one hwmod which is not a good
    practice and the kernel prints warning because of this.
    
    With the new bindings and the changes in the driver we can:
    - No regression with Legacy binding and non DT boot
    - DMA channels can be assigned to any TC (to set priority)
    - PaRAM slots can be reserved for other cores to use
    - Dynamic power management for CC and TCs, if only TC0 is used all other TC
      can be powered down for example
    
    Signed-off-by: Peter Ujfalusi <peter.ujfalusi@ti.com>
    Signed-off-by: Vinod Koul <vinod.koul@intel.com>

diff --git a/include/linux/platform_data/edma.h b/include/linux/platform_data/edma.h
index 6b9d500956e4..e2878baeb90e 100644
--- a/include/linux/platform_data/edma.h
+++ b/include/linux/platform_data/edma.h
@@ -71,6 +71,9 @@ struct edma_soc_info {
 	/* Resource reservation for other cores */
 	struct edma_rsv_info	*rsv;
 
+	/* List of channels allocated for memcpy, terminated with -1 */
+	s16			*memcpy_channels;
+
 	s8	(*queue_priority_mapping)[2];
 	const s16	(*xbar_chans)[2];
 };

commit 2b6b3b7420190888793c49e97276e1e73bd7eaed
Author: Peter Ujfalusi <peter.ujfalusi@ti.com>
Date:   Wed Oct 14 14:42:53 2015 +0300

    ARM/dmaengine: edma: Merge the two drivers under drivers/dma/
    
    Move the code out from arch/arm/common and merge it inside of the dmaengine
    driver.
    This change is done with as minimal (if eny) functional change to the code
    as possible to avoid introducing regression.
    
    Signed-off-by: Peter Ujfalusi <peter.ujfalusi@ti.com>
    Acked-by: Tony Lindgren <tony@atomide.com>
    Signed-off-by: Vinod Koul <vinod.koul@intel.com>

diff --git a/include/linux/platform_data/edma.h b/include/linux/platform_data/edma.h
index 466021c03169..6b9d500956e4 100644
--- a/include/linux/platform_data/edma.h
+++ b/include/linux/platform_data/edma.h
@@ -41,37 +41,6 @@
 #ifndef EDMA_H_
 #define EDMA_H_
 
-/* PaRAM slots are laid out like this */
-struct edmacc_param {
-	u32 opt;
-	u32 src;
-	u32 a_b_cnt;
-	u32 dst;
-	u32 src_dst_bidx;
-	u32 link_bcntrld;
-	u32 src_dst_cidx;
-	u32 ccnt;
-} __packed;
-
-/* fields in edmacc_param.opt */
-#define SAM		BIT(0)
-#define DAM		BIT(1)
-#define SYNCDIM		BIT(2)
-#define STATIC		BIT(3)
-#define EDMA_FWID	(0x07 << 8)
-#define TCCMODE		BIT(11)
-#define EDMA_TCC(t)	((t) << 12)
-#define TCINTEN		BIT(20)
-#define ITCINTEN	BIT(21)
-#define TCCHEN		BIT(22)
-#define ITCCHEN		BIT(23)
-
-/*ch_status paramater of callback function possible values*/
-#define EDMA_DMA_COMPLETE 1
-#define EDMA_DMA_CC_ERROR 2
-#define EDMA_DMA_TC1_ERROR 3
-#define EDMA_DMA_TC2_ERROR 4
-
 enum dma_event_q {
 	EVENTQ_0 = 0,
 	EVENTQ_1 = 1,
@@ -84,49 +53,6 @@ enum dma_event_q {
 #define EDMA_CTLR(i)			((i) >> 16)
 #define EDMA_CHAN_SLOT(i)		((i) & 0xffff)
 
-#define EDMA_CHANNEL_ANY		-1	/* for edma_alloc_channel() */
-#define EDMA_SLOT_ANY			-1	/* for edma_alloc_slot() */
-#define EDMA_CONT_PARAMS_ANY		 1001
-#define EDMA_CONT_PARAMS_FIXED_EXACT	 1002
-#define EDMA_CONT_PARAMS_FIXED_NOT_EXACT 1003
-
-#define EDMA_MAX_CC               2
-
-struct edma;
-
-struct edma *edma_get_data(struct device *edma_dev);
-
-/* alloc/free DMA channels and their dedicated parameter RAM slots */
-int edma_alloc_channel(struct edma *cc, int channel,
-	void (*callback)(unsigned channel, u16 ch_status, void *data),
-	void *data, enum dma_event_q);
-void edma_free_channel(struct edma *cc, unsigned channel);
-
-/* alloc/free parameter RAM slots */
-int edma_alloc_slot(struct edma *cc, int slot);
-void edma_free_slot(struct edma *cc, unsigned slot);
-
-/* calls that operate on part of a parameter RAM slot */
-dma_addr_t edma_get_position(struct edma *cc, unsigned slot, bool dst);
-void edma_link(struct edma *cc, unsigned from, unsigned to);
-
-/* calls that operate on an entire parameter RAM slot */
-void edma_write_slot(struct edma *cc, unsigned slot,
-		     const struct edmacc_param *params);
-void edma_read_slot(struct edma *cc, unsigned slot,
-		    struct edmacc_param *params);
-
-/* channel control operations */
-int edma_start(struct edma *cc, unsigned channel);
-void edma_stop(struct edma *cc, unsigned channel);
-void edma_clean_channel(struct edma *cc, unsigned channel);
-void edma_pause(struct edma *cc, unsigned channel);
-void edma_resume(struct edma *cc, unsigned channel);
-int edma_trigger_channel(struct edma *cc, unsigned channel);
-
-void edma_assign_channel_eventq(struct edma *cc, unsigned channel,
-				enum dma_event_q eventq_no);
-
 struct edma_rsv_info {
 
 	const s16	(*rsv_chans)[2];

commit ca304fa9bb762f091e851d48de43f623c975d47a
Author: Peter Ujfalusi <peter.ujfalusi@ti.com>
Date:   Wed Oct 14 14:42:49 2015 +0300

    ARM/dmaengine: edma: Public API to use private struct pointer
    
    Instead of relying on indexes pointing to edma private date in the global
    pointer array, pass the private data pointer via the public API.
    
    Signed-off-by: Peter Ujfalusi <peter.ujfalusi@ti.com>
    Signed-off-by: Vinod Koul <vinod.koul@intel.com>

diff --git a/include/linux/platform_data/edma.h b/include/linux/platform_data/edma.h
index c1862423b356..466021c03169 100644
--- a/include/linux/platform_data/edma.h
+++ b/include/linux/platform_data/edma.h
@@ -92,32 +92,40 @@ enum dma_event_q {
 
 #define EDMA_MAX_CC               2
 
+struct edma;
+
+struct edma *edma_get_data(struct device *edma_dev);
+
 /* alloc/free DMA channels and their dedicated parameter RAM slots */
-int edma_alloc_channel(int channel,
+int edma_alloc_channel(struct edma *cc, int channel,
 	void (*callback)(unsigned channel, u16 ch_status, void *data),
 	void *data, enum dma_event_q);
-void edma_free_channel(unsigned channel);
+void edma_free_channel(struct edma *cc, unsigned channel);
 
 /* alloc/free parameter RAM slots */
-int edma_alloc_slot(unsigned ctlr, int slot);
-void edma_free_slot(unsigned slot);
+int edma_alloc_slot(struct edma *cc, int slot);
+void edma_free_slot(struct edma *cc, unsigned slot);
 
 /* calls that operate on part of a parameter RAM slot */
-dma_addr_t edma_get_position(unsigned slot, bool dst);
-void edma_link(unsigned from, unsigned to);
+dma_addr_t edma_get_position(struct edma *cc, unsigned slot, bool dst);
+void edma_link(struct edma *cc, unsigned from, unsigned to);
 
 /* calls that operate on an entire parameter RAM slot */
-void edma_write_slot(unsigned slot, const struct edmacc_param *params);
-void edma_read_slot(unsigned slot, struct edmacc_param *params);
+void edma_write_slot(struct edma *cc, unsigned slot,
+		     const struct edmacc_param *params);
+void edma_read_slot(struct edma *cc, unsigned slot,
+		    struct edmacc_param *params);
 
 /* channel control operations */
-int edma_start(unsigned channel);
-void edma_stop(unsigned channel);
-void edma_clean_channel(unsigned channel);
-void edma_pause(unsigned channel);
-void edma_resume(unsigned channel);
+int edma_start(struct edma *cc, unsigned channel);
+void edma_stop(struct edma *cc, unsigned channel);
+void edma_clean_channel(struct edma *cc, unsigned channel);
+void edma_pause(struct edma *cc, unsigned channel);
+void edma_resume(struct edma *cc, unsigned channel);
+int edma_trigger_channel(struct edma *cc, unsigned channel);
 
-void edma_assign_channel_eventq(unsigned channel, enum dma_event_q eventq_no);
+void edma_assign_channel_eventq(struct edma *cc, unsigned channel,
+				enum dma_event_q eventq_no);
 
 struct edma_rsv_info {
 
@@ -141,6 +149,4 @@ struct edma_soc_info {
 	const s16	(*xbar_chans)[2];
 };
 
-int edma_trigger_channel(unsigned);
-
 #endif

commit d28c2b36d6027702585ca93773b3edd6e5f1a5bd
Author: Peter Ujfalusi <peter.ujfalusi@ti.com>
Date:   Wed Oct 14 14:42:44 2015 +0300

    ARM: common: edma: Remove unused functions
    
    We no longer have users for these functions so they can be removed.
    Remove also unused enums from the header file.
    
    Signed-off-by: Peter Ujfalusi <peter.ujfalusi@ti.com>
    Signed-off-by: Vinod Koul <vinod.koul@intel.com>

diff --git a/include/linux/platform_data/edma.h b/include/linux/platform_data/edma.h
index bdb2710e2aab..c1862423b356 100644
--- a/include/linux/platform_data/edma.h
+++ b/include/linux/platform_data/edma.h
@@ -72,20 +72,6 @@ struct edmacc_param {
 #define EDMA_DMA_TC1_ERROR 3
 #define EDMA_DMA_TC2_ERROR 4
 
-enum address_mode {
-	INCR = 0,
-	FIFO = 1
-};
-
-enum fifo_width {
-	W8BIT = 0,
-	W16BIT = 1,
-	W32BIT = 2,
-	W64BIT = 3,
-	W128BIT = 4,
-	W256BIT = 5
-};
-
 enum dma_event_q {
 	EVENTQ_0 = 0,
 	EVENTQ_1 = 1,
@@ -94,11 +80,6 @@ enum dma_event_q {
 	EVENTQ_DEFAULT = -1
 };
 
-enum sync_dimension {
-	ASYNC = 0,
-	ABSYNC = 1
-};
-
 #define EDMA_CTLR_CHAN(ctlr, chan)	(((ctlr) << 16) | (chan))
 #define EDMA_CTLR(i)			((i) >> 16)
 #define EDMA_CHAN_SLOT(i)		((i) & 0xffff)
@@ -121,22 +102,9 @@ void edma_free_channel(unsigned channel);
 int edma_alloc_slot(unsigned ctlr, int slot);
 void edma_free_slot(unsigned slot);
 
-/* alloc/free a set of contiguous parameter RAM slots */
-int edma_alloc_cont_slots(unsigned ctlr, unsigned int id, int slot, int count);
-int edma_free_cont_slots(unsigned slot, int count);
-
 /* calls that operate on part of a parameter RAM slot */
-void edma_set_src(unsigned slot, dma_addr_t src_port,
-				enum address_mode mode, enum fifo_width);
-void edma_set_dest(unsigned slot, dma_addr_t dest_port,
-				 enum address_mode mode, enum fifo_width);
 dma_addr_t edma_get_position(unsigned slot, bool dst);
-void edma_set_src_index(unsigned slot, s16 src_bidx, s16 src_cidx);
-void edma_set_dest_index(unsigned slot, s16 dest_bidx, s16 dest_cidx);
-void edma_set_transfer_params(unsigned slot, u16 acnt, u16 bcnt, u16 ccnt,
-		u16 bcnt_rld, enum sync_dimension sync_mode);
 void edma_link(unsigned from, unsigned to);
-void edma_unlink(unsigned from);
 
 /* calls that operate on an entire parameter RAM slot */
 void edma_write_slot(unsigned slot, const struct edmacc_param *params);
@@ -146,7 +114,6 @@ void edma_read_slot(unsigned slot, struct edmacc_param *params);
 int edma_start(unsigned channel);
 void edma_stop(unsigned channel);
 void edma_clean_channel(unsigned channel);
-void edma_clear_event(unsigned channel);
 void edma_pause(unsigned channel);
 void edma_resume(unsigned channel);
 

commit eb3fe7def66511120766c8fc05ee9631cce7fe6f
Author: Peter Ujfalusi <peter.ujfalusi@ti.com>
Date:   Tue Jul 8 13:46:37 2014 +0300

    ARM: edma: Add edma_assign_channel_eventq() to move channel to a give queue
    
    In some cases it is desired to move a channel to a specific event queue.
    Such a use case is audio, where it is preferred that it is served with
    highest priority compared to other DMA clients.
    
    Signed-off-by: Peter Ujfalusi <peter.ujfalusi@ti.com>
    Acked-by: Sekhar Nori <nsekhar@ti.com>
    Signed-off-by: Vinod Koul <vinod.koul@intel.com>

diff --git a/include/linux/platform_data/edma.h b/include/linux/platform_data/edma.h
index eb8d5627d080..bdb2710e2aab 100644
--- a/include/linux/platform_data/edma.h
+++ b/include/linux/platform_data/edma.h
@@ -150,6 +150,8 @@ void edma_clear_event(unsigned channel);
 void edma_pause(unsigned channel);
 void edma_resume(unsigned channel);
 
+void edma_assign_channel_eventq(unsigned channel, enum dma_event_q eventq_no);
+
 struct edma_rsv_info {
 
 	const s16	(*rsv_chans)[2];

commit 903ed4913c7fe78d2746445564634264291c7493
Author: Peter Ujfalusi <peter.ujfalusi@ti.com>
Date:   Fri May 16 15:17:20 2014 +0300

    ARM: edma: Remove redundant/unused parameters from edma_soc_info
    
    The following parameters are no longer needed by the edma driver since the
    information can be obtained from the IP's CCCFG register:
    n_channel, n_region, n_slot and n_tc.
    Remove the n_cc as well since in this context it has no meaning. We have
    separate edma_soc_info struct/eDMA3_CC instance so this member does not
    make any sense (and the driver no longer uses it).
    
    Signed-off-by: Peter Ujfalusi <peter.ujfalusi@ti.com>
    Signed-off-by: Sekhar Nori <nsekhar@ti.com>

diff --git a/include/linux/platform_data/edma.h b/include/linux/platform_data/edma.h
index 633e196ebdf2..eb8d5627d080 100644
--- a/include/linux/platform_data/edma.h
+++ b/include/linux/platform_data/edma.h
@@ -158,13 +158,6 @@ struct edma_rsv_info {
 
 /* platform_data for EDMA driver */
 struct edma_soc_info {
-
-	/* how many dma resources of each type */
-	unsigned	n_channel;
-	unsigned	n_region;
-	unsigned	n_slot;
-	unsigned	n_tc;
-	unsigned	n_cc;
 	/*
 	 * Default queue is expected to be a low-priority queue.
 	 * This way, long transfers on the default queue started

commit db885bf82883f9743efe09d91775c579c0ed6842
Author: Peter Ujfalusi <peter.ujfalusi@ti.com>
Date:   Fri May 16 15:17:12 2014 +0300

    ARM: edma: Remove queue_tc_mapping data from edma_soc_info
    
    It is no longer in use by the driver or board files.
    
    Signed-off-by: Peter Ujfalusi <peter.ujfalusi@ti.com>
    Signed-off-by: Sekhar Nori <nsekhar@ti.com>

diff --git a/include/linux/platform_data/edma.h b/include/linux/platform_data/edma.h
index 12f134b1493c..633e196ebdf2 100644
--- a/include/linux/platform_data/edma.h
+++ b/include/linux/platform_data/edma.h
@@ -175,7 +175,6 @@ struct edma_soc_info {
 	/* Resource reservation for other cores */
 	struct edma_rsv_info	*rsv;
 
-	s8	(*queue_tc_mapping)[2];
 	s8	(*queue_priority_mapping)[2];
 	const s16	(*xbar_chans)[2];
 };

commit cdae05a0f0f7d15837dfd6f4200e8caea03c9cbf
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Mon Apr 28 10:49:43 2014 +0000

    dmaengine: edma: Make reading the position of active channels work
    
    As Joel pointed out, edma_read_position() uses memcpy_fromio() to read
    the parameter ram. That's not synchronized with the internal update as
    it does a byte by byte copy. We need to do a 32bit read to get a
    consistent value.
    
    Further reading destination and source is pointless. In DEV_TO_MEM
    transfers we are only interested in the destination, in MEM_TO_DEV we
    care about the source. In MEM_TO_MEM it really does not matter which
    one you read.
    
    Simple solution: Remove the pointers, select dest/source via a bool
    and return the read value.
    
    Remove the export of this function while at it. The only potential
    user is the dmaengine and that's always builtin.
    
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Acked-by: Sekhar Nori <nsekhar@ti.com>
    Signed-off-by: Joel Fernandes <joelf@ti.com>
    Signed-off-by: Vinod Koul <vinod.koul@intel.com>

diff --git a/include/linux/platform_data/edma.h b/include/linux/platform_data/edma.h
index 923f8a3e4ce0..12f134b1493c 100644
--- a/include/linux/platform_data/edma.h
+++ b/include/linux/platform_data/edma.h
@@ -130,7 +130,7 @@ void edma_set_src(unsigned slot, dma_addr_t src_port,
 				enum address_mode mode, enum fifo_width);
 void edma_set_dest(unsigned slot, dma_addr_t dest_port,
 				 enum address_mode mode, enum fifo_width);
-void edma_get_position(unsigned slot, dma_addr_t *src, dma_addr_t *dst);
+dma_addr_t edma_get_position(unsigned slot, bool dst);
 void edma_set_src_index(unsigned slot, s16 src_bidx, s16 src_cidx);
 void edma_set_dest_index(unsigned slot, s16 dest_bidx, s16 dest_cidx);
 void edma_set_transfer_params(unsigned slot, u16 acnt, u16 bcnt, u16 ccnt,

commit 8df4053f0532df8fe47d0434af51676b0fa65491
Author: Peter Ujfalusi <peter.ujfalusi@ti.com>
Date:   Mon Apr 14 14:41:56 2014 +0300

    platform_data: edma: Be precise with the paRAM struct
    
    The edmacc_param struct should follow the layout of the paRAM area in the
    HW. Be explicit on the size of the fields (u32) and also mark the struct
    as packed to avoid any padding on non 32bit architectures.
    
    Signed-off-by: Peter Ujfalusi <peter.ujfalusi@ti.com>
    Acked-by: Joel Fernandes <joelf@ti.com>
    Reviewed-and-Tested-by: Joel Fernandes <joelf@ti.com>
    Signed-off-by: Vinod Koul <vinod.koul@intel.com>

diff --git a/include/linux/platform_data/edma.h b/include/linux/platform_data/edma.h
index f50821cb64be..923f8a3e4ce0 100644
--- a/include/linux/platform_data/edma.h
+++ b/include/linux/platform_data/edma.h
@@ -43,15 +43,15 @@
 
 /* PaRAM slots are laid out like this */
 struct edmacc_param {
-	unsigned int opt;
-	unsigned int src;
-	unsigned int a_b_cnt;
-	unsigned int dst;
-	unsigned int src_dst_bidx;
-	unsigned int link_bcntrld;
-	unsigned int src_dst_cidx;
-	unsigned int ccnt;
-};
+	u32 opt;
+	u32 src;
+	u32 a_b_cnt;
+	u32 dst;
+	u32 src_dst_bidx;
+	u32 link_bcntrld;
+	u32 src_dst_cidx;
+	u32 ccnt;
+} __packed;
 
 /* fields in edmacc_param.opt */
 #define SAM		BIT(0)

commit db60d8da8f643586c95f8fc3e383954f8c57f1f3
Author: Vinod Koul <vinod.koul@intel.com>
Date:   Wed Oct 30 18:22:30 2013 +0530

    dmanengine: fix edma driver to not define DMA_COMPLETE
    
    edma header defines DMA_COMPLETE, this causes issues as commit adfedd9a32e4 move
    DMA_SUCCESS to DMA_COMPLETE. edma should properly namespace its defines and
    needs a future fix
    
    Reported-by: Olof Johansson <olof@lixom.net>
    Signed-off-by: Vinod Koul <vinod.koul@intel.com>

diff --git a/include/linux/platform_data/edma.h b/include/linux/platform_data/edma.h
index 179fb91bb5f2..f50821cb64be 100644
--- a/include/linux/platform_data/edma.h
+++ b/include/linux/platform_data/edma.h
@@ -67,10 +67,10 @@ struct edmacc_param {
 #define ITCCHEN		BIT(23)
 
 /*ch_status paramater of callback function possible values*/
-#define DMA_COMPLETE 1
-#define DMA_CC_ERROR 2
-#define DMA_TC1_ERROR 3
-#define DMA_TC2_ERROR 4
+#define EDMA_DMA_COMPLETE 1
+#define EDMA_DMA_CC_ERROR 2
+#define EDMA_DMA_TC1_ERROR 3
+#define EDMA_DMA_TC2_ERROR 4
 
 enum address_mode {
 	INCR = 0,

commit 96874b9a241c543e2f32d7bd7100af4416522cfb
Author: Joel Fernandes <joelf@ti.com>
Date:   Thu Aug 29 18:05:42 2013 -0500

    ARM: edma: Add function to manually trigger an EDMA channel
    
    Manual trigger for events missed as a result of splitting a
    scatter gather list and DMA'ing it in batches. Add a helper
    function to trigger a channel incase any such events are missed.
    
    Signed-off-by: Joel Fernandes <joelf@ti.com>
    Acked-by: Sekhar Nori <nsekhar@ti.com>
    Signed-off-by: Vinod Koul <vinod.koul@intel.com>

diff --git a/include/linux/platform_data/edma.h b/include/linux/platform_data/edma.h
index 57300fd7cc03..179fb91bb5f2 100644
--- a/include/linux/platform_data/edma.h
+++ b/include/linux/platform_data/edma.h
@@ -180,4 +180,6 @@ struct edma_soc_info {
 	const s16	(*xbar_chans)[2];
 };
 
+int edma_trigger_channel(unsigned);
+
 #endif

commit 2646a0e52b65a5ea3d108794611f95df1a6cb409
Author: Matt Porter <mporter@ti.com>
Date:   Thu Jun 20 16:06:39 2013 -0500

    ARM: edma: Add EDMA crossbar event mux support
    
    EDMA supports a cross bar which provides ability
    to mux additional events into physical channels
    present in the channel controller.
    
    This is required when the number of events present
    in the system are more than number of available
    physical channels.
    
    Changes by Joel:
    * Split EDMA xbar support out of original EDMA DT parsing patch
    to keep it easier for review.
    * Rewrite shift and offset calculation.
    
    Suggested-by: Sekhar Nori <nsekhar@ti.com>
    Suggested by: Andy Shevchenko <andy.shevchenko@gmail.com>
    Signed-off-by: Joel A Fernandes <joelagnel@ti.com>
    Acked-by: Arnd Bergmann <arnd@arndb.de>
    [nsekhar@ti.com: fix checkpatch errors and a minor coding improvement]
    Signed-off-by: Sekhar Nori <nsekhar@ti.com>

diff --git a/include/linux/platform_data/edma.h b/include/linux/platform_data/edma.h
index 317f2beeaece..57300fd7cc03 100644
--- a/include/linux/platform_data/edma.h
+++ b/include/linux/platform_data/edma.h
@@ -177,6 +177,7 @@ struct edma_soc_info {
 
 	s8	(*queue_tc_mapping)[2];
 	s8	(*queue_priority_mapping)[2];
+	const s16	(*xbar_chans)[2];
 };
 
 #endif

commit 6cba4355066bda19f14d4da66b8abbca0ffdfd59
Author: Matt Porter <mporter@ti.com>
Date:   Thu Jun 20 16:06:38 2013 -0500

    ARM: edma: Add DT and runtime PM support to the private EDMA API
    
    Adds support for parsing the TI EDMA DT data into the required EDMA
    private API platform data. Enables runtime PM support to initialize
    the EDMA hwmod. Enables build on OMAP.
    
    Changes by Joel:
    * Setup default one-to-one mapping for queue_priority and queue_tc
    mapping as discussed in [1].
    * Split out xbar stuff to separate patch. [1]
    * Dropped unused DT helper to convert to array
    * Fixed dangling pointer issue with Sekhar's changes
    
    [1] https://patchwork.kernel.org/patch/2226761/
    
    Signed-off-by: Matt Porter <mporter@ti.com>
    [nsekhar@ti.com: fix checkpatch errors, build breakages. Introduce
    edma_setup_info_from_dt() as part of that effort]
    Signed-off-by: Joel A Fernandes <joelagnel@ti.com>
    Acked-by: Arnd Bergmann <arnd@arndb.de>
    Signed-off-by: Sekhar Nori <nsekhar@ti.com>

diff --git a/include/linux/platform_data/edma.h b/include/linux/platform_data/edma.h
index 2344ea2675ad..317f2beeaece 100644
--- a/include/linux/platform_data/edma.h
+++ b/include/linux/platform_data/edma.h
@@ -175,8 +175,8 @@ struct edma_soc_info {
 	/* Resource reservation for other cores */
 	struct edma_rsv_info	*rsv;
 
-	const s8	(*queue_tc_mapping)[2];
-	const s8	(*queue_priority_mapping)[2];
+	s8	(*queue_tc_mapping)[2];
+	s8	(*queue_priority_mapping)[2];
 };
 
 #endif

commit 3ad7a42d5a9c3736cd6d2c6f7e6038d0ca8b316c
Author: Matt Porter <mporter@ti.com>
Date:   Wed Mar 6 11:15:31 2013 -0500

    ARM: davinci: move private EDMA API to arm/common
    
    Move mach-davinci/dma.c to common/edma.c so it can be used
    by OMAP (specifically AM33xx) as well.
    
    Signed-off-by: Matt Porter <mporter@ti.com>
    Acked-by: Chris Ball <cjb@laptop.org> # davinci_mmc.c
    Acked-by: Mark Brown <broonie@linaro.org>
    Acked-by: Olof Johansson <olof@lixom.net>
    [nsekhar@ti.com: dropped davinci sffsdr changes]
    Signed-off-by: Sekhar Nori <nsekhar@ti.com>

diff --git a/include/linux/platform_data/edma.h b/include/linux/platform_data/edma.h
new file mode 100644
index 000000000000..2344ea2675ad
--- /dev/null
+++ b/include/linux/platform_data/edma.h
@@ -0,0 +1,182 @@
+/*
+ *  TI EDMA definitions
+ *
+ *  Copyright (C) 2006-2013 Texas Instruments.
+ *
+ *  This program is free software; you can redistribute  it and/or modify it
+ *  under  the terms of  the GNU General  Public License as published by the
+ *  Free Software Foundation;  either version 2 of the  License, or (at your
+ *  option) any later version.
+ */
+
+/*
+ * This EDMA3 programming framework exposes two basic kinds of resource:
+ *
+ *  Channel	Triggers transfers, usually from a hardware event but
+ *		also manually or by "chaining" from DMA completions.
+ *		Each channel is coupled to a Parameter RAM (PaRAM) slot.
+ *
+ *  Slot	Each PaRAM slot holds a DMA transfer descriptor (PaRAM
+ *		"set"), source and destination addresses, a link to a
+ *		next PaRAM slot (if any), options for the transfer, and
+ *		instructions for updating those addresses.  There are
+ *		more than twice as many slots as event channels.
+ *
+ * Each PaRAM set describes a sequence of transfers, either for one large
+ * buffer or for several discontiguous smaller buffers.  An EDMA transfer
+ * is driven only from a channel, which performs the transfers specified
+ * in its PaRAM slot until there are no more transfers.  When that last
+ * transfer completes, the "link" field may be used to reload the channel's
+ * PaRAM slot with a new transfer descriptor.
+ *
+ * The EDMA Channel Controller (CC) maps requests from channels into physical
+ * Transfer Controller (TC) requests when the channel triggers (by hardware
+ * or software events, or by chaining).  The two physical DMA channels provided
+ * by the TCs are thus shared by many logical channels.
+ *
+ * DaVinci hardware also has a "QDMA" mechanism which is not currently
+ * supported through this interface.  (DSP firmware uses it though.)
+ */
+
+#ifndef EDMA_H_
+#define EDMA_H_
+
+/* PaRAM slots are laid out like this */
+struct edmacc_param {
+	unsigned int opt;
+	unsigned int src;
+	unsigned int a_b_cnt;
+	unsigned int dst;
+	unsigned int src_dst_bidx;
+	unsigned int link_bcntrld;
+	unsigned int src_dst_cidx;
+	unsigned int ccnt;
+};
+
+/* fields in edmacc_param.opt */
+#define SAM		BIT(0)
+#define DAM		BIT(1)
+#define SYNCDIM		BIT(2)
+#define STATIC		BIT(3)
+#define EDMA_FWID	(0x07 << 8)
+#define TCCMODE		BIT(11)
+#define EDMA_TCC(t)	((t) << 12)
+#define TCINTEN		BIT(20)
+#define ITCINTEN	BIT(21)
+#define TCCHEN		BIT(22)
+#define ITCCHEN		BIT(23)
+
+/*ch_status paramater of callback function possible values*/
+#define DMA_COMPLETE 1
+#define DMA_CC_ERROR 2
+#define DMA_TC1_ERROR 3
+#define DMA_TC2_ERROR 4
+
+enum address_mode {
+	INCR = 0,
+	FIFO = 1
+};
+
+enum fifo_width {
+	W8BIT = 0,
+	W16BIT = 1,
+	W32BIT = 2,
+	W64BIT = 3,
+	W128BIT = 4,
+	W256BIT = 5
+};
+
+enum dma_event_q {
+	EVENTQ_0 = 0,
+	EVENTQ_1 = 1,
+	EVENTQ_2 = 2,
+	EVENTQ_3 = 3,
+	EVENTQ_DEFAULT = -1
+};
+
+enum sync_dimension {
+	ASYNC = 0,
+	ABSYNC = 1
+};
+
+#define EDMA_CTLR_CHAN(ctlr, chan)	(((ctlr) << 16) | (chan))
+#define EDMA_CTLR(i)			((i) >> 16)
+#define EDMA_CHAN_SLOT(i)		((i) & 0xffff)
+
+#define EDMA_CHANNEL_ANY		-1	/* for edma_alloc_channel() */
+#define EDMA_SLOT_ANY			-1	/* for edma_alloc_slot() */
+#define EDMA_CONT_PARAMS_ANY		 1001
+#define EDMA_CONT_PARAMS_FIXED_EXACT	 1002
+#define EDMA_CONT_PARAMS_FIXED_NOT_EXACT 1003
+
+#define EDMA_MAX_CC               2
+
+/* alloc/free DMA channels and their dedicated parameter RAM slots */
+int edma_alloc_channel(int channel,
+	void (*callback)(unsigned channel, u16 ch_status, void *data),
+	void *data, enum dma_event_q);
+void edma_free_channel(unsigned channel);
+
+/* alloc/free parameter RAM slots */
+int edma_alloc_slot(unsigned ctlr, int slot);
+void edma_free_slot(unsigned slot);
+
+/* alloc/free a set of contiguous parameter RAM slots */
+int edma_alloc_cont_slots(unsigned ctlr, unsigned int id, int slot, int count);
+int edma_free_cont_slots(unsigned slot, int count);
+
+/* calls that operate on part of a parameter RAM slot */
+void edma_set_src(unsigned slot, dma_addr_t src_port,
+				enum address_mode mode, enum fifo_width);
+void edma_set_dest(unsigned slot, dma_addr_t dest_port,
+				 enum address_mode mode, enum fifo_width);
+void edma_get_position(unsigned slot, dma_addr_t *src, dma_addr_t *dst);
+void edma_set_src_index(unsigned slot, s16 src_bidx, s16 src_cidx);
+void edma_set_dest_index(unsigned slot, s16 dest_bidx, s16 dest_cidx);
+void edma_set_transfer_params(unsigned slot, u16 acnt, u16 bcnt, u16 ccnt,
+		u16 bcnt_rld, enum sync_dimension sync_mode);
+void edma_link(unsigned from, unsigned to);
+void edma_unlink(unsigned from);
+
+/* calls that operate on an entire parameter RAM slot */
+void edma_write_slot(unsigned slot, const struct edmacc_param *params);
+void edma_read_slot(unsigned slot, struct edmacc_param *params);
+
+/* channel control operations */
+int edma_start(unsigned channel);
+void edma_stop(unsigned channel);
+void edma_clean_channel(unsigned channel);
+void edma_clear_event(unsigned channel);
+void edma_pause(unsigned channel);
+void edma_resume(unsigned channel);
+
+struct edma_rsv_info {
+
+	const s16	(*rsv_chans)[2];
+	const s16	(*rsv_slots)[2];
+};
+
+/* platform_data for EDMA driver */
+struct edma_soc_info {
+
+	/* how many dma resources of each type */
+	unsigned	n_channel;
+	unsigned	n_region;
+	unsigned	n_slot;
+	unsigned	n_tc;
+	unsigned	n_cc;
+	/*
+	 * Default queue is expected to be a low-priority queue.
+	 * This way, long transfers on the default queue started
+	 * by the codec engine will not cause audio defects.
+	 */
+	enum dma_event_q	default_queue;
+
+	/* Resource reservation for other cores */
+	struct edma_rsv_info	*rsv;
+
+	const s8	(*queue_tc_mapping)[2];
+	const s8	(*queue_priority_mapping)[2];
+};
+
+#endif
