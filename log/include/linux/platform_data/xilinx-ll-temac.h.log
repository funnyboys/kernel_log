commit 1bd33bf0fe6d3012410db0302187199871b510a0
Author: Esben Haabendal <esben@geanix.com>
Date:   Thu May 23 14:02:20 2019 +0200

    net: ll_temac: Prepare indirect register access for multicast support
    
    With .ndo_set_rx_mode/temac_set_multicast_list() being called in atomic
    context (holding addr_list_lock), and temac_set_multicast_list() needing
    to access temac indirect registers, the mutex used to synchronize indirect
    register is a no-no.
    
    Replace it with a spinlock, and avoid sleeping in
    temac_indirect_busywait().
    
    To avoid excessive holding of the lock, which is now a spinlock, the
    temac_device_reset() function is changed to only hold the lock for short
    periods.  With timeouts, it could be holding the spinlock for more than
    2 seconds.
    
    Signed-off-by: Esben Haabendal <esben@geanix.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

diff --git a/include/linux/platform_data/xilinx-ll-temac.h b/include/linux/platform_data/xilinx-ll-temac.h
index 368530f98176..f4a68136afa6 100644
--- a/include/linux/platform_data/xilinx-ll-temac.h
+++ b/include/linux/platform_data/xilinx-ll-temac.h
@@ -4,6 +4,7 @@
 
 #include <linux/if_ether.h>
 #include <linux/phy.h>
+#include <linux/spinlock.h>
 
 struct ll_temac_platform_data {
 	bool txcsum;		/* Enable/disable TX checksum */
@@ -21,7 +22,7 @@ struct ll_temac_platform_data {
 	 * TEMAC IP block, the same mutex should be passed here, as
 	 * they share the same DCR bus bridge.
 	 */
-	struct mutex *indirect_mutex;
+	spinlock_t *indirect_lock;
 	/* DMA channel control setup */
 	u8 tx_irq_timeout;	/* TX Interrupt Delay Time-out */
 	u8 tx_irq_count;	/* TX Interrupt Coalescing Threshold Count */

commit 7e97a194aca03c6ff86f84e46e196f5c9ed5c32c
Author: Esben Haabendal <esben@geanix.com>
Date:   Tue Apr 30 09:17:58 2019 +0200

    net: ll_temac: Allow configuration of IRQ coalescing
    
    This allows custom setup of IRQ coalescing for platforms using legacy
    platform_device. The irq timeout and count parameters can be used for
    tuning cpu load vs. latency.
    
    I have maintained the 0x00000400 bit in TX_CHNL_CTRL.  It is specified as
    unused in the documentation I have available.  It does not make any
    difference in the hardware I have available, so it is left in to not risk
    breaking other platforms where it might be used.
    
    Signed-off-by: Esben Haabendal <esben@geanix.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

diff --git a/include/linux/platform_data/xilinx-ll-temac.h b/include/linux/platform_data/xilinx-ll-temac.h
index b0b8238a9b7d..368530f98176 100644
--- a/include/linux/platform_data/xilinx-ll-temac.h
+++ b/include/linux/platform_data/xilinx-ll-temac.h
@@ -22,6 +22,11 @@ struct ll_temac_platform_data {
 	 * they share the same DCR bus bridge.
 	 */
 	struct mutex *indirect_mutex;
+	/* DMA channel control setup */
+	u8 tx_irq_timeout;	/* TX Interrupt Delay Time-out */
+	u8 tx_irq_count;	/* TX Interrupt Coalescing Threshold Count */
+	u8 rx_irq_timeout;	/* RX Interrupt Delay Time-out */
+	u8 rx_irq_count;	/* RX Interrupt Coalescing Threshold Count */
 };
 
 #endif /* __LINUX_XILINX_LL_TEMAC_H */

commit f14f5c11f051ca4a41e65017d94408e5e702ba9d
Author: Esben Haabendal <esben@geanix.com>
Date:   Tue Apr 30 09:17:54 2019 +0200

    net: ll_temac: Support indirect_mutex share within TEMAC IP
    
    Indirect register access goes through a DCR bus bridge, which
    allows only one outstanding transaction.  And to make matters
    worse, each TEMAC IP block contains two Ethernet interfaces, and
    although they seem to have separate registers for indirect access,
    they actually share the registers.  Or to be more specific, MSW, LSW
    and CTL registers are physically shared between Ethernet interfaces
    in same TEMAC IP, with RDY register being (almost) specificic to
    the Ethernet interface.  The 0x10000 bit in RDY reflects combined
    bus ready state though.
    
    So we need to take care to synchronize not only within a single
    device, but also between devices in same TEMAC IP.
    
    This commit allows to do that with legacy platform devices.
    
    For OF devices, the xlnx,compound parent of the temac node should be
    used to find siblings, and setup a shared indirect_mutex between them.
    I will leave this work to somebody else, as I don't have hardware to
    test that.  No regression is introduced by that, as before this commit
    using two Ethernet interfaces in same TEMAC block is simply broken.
    
    Signed-off-by: Esben Haabendal <esben@geanix.com>
    Reviewed-by: Andrew Lunn <andrew@lunn.ch>
    Signed-off-by: David S. Miller <davem@davemloft.net>

diff --git a/include/linux/platform_data/xilinx-ll-temac.h b/include/linux/platform_data/xilinx-ll-temac.h
index af87927abab3..b0b8238a9b7d 100644
--- a/include/linux/platform_data/xilinx-ll-temac.h
+++ b/include/linux/platform_data/xilinx-ll-temac.h
@@ -16,6 +16,12 @@ struct ll_temac_platform_data {
 	phy_interface_t phy_interface; /* PHY interface mode */
 	bool reg_little_endian;	/* Little endian TEMAC register access  */
 	bool dma_little_endian;	/* Little endian DMA register access  */
+	/* Pre-initialized mutex to use for synchronizing indirect
+	 * register access.  When using both interfaces of a single
+	 * TEMAC IP block, the same mutex should be passed here, as
+	 * they share the same DCR bus bridge.
+	 */
+	struct mutex *indirect_mutex;
 };
 
 #endif /* __LINUX_XILINX_LL_TEMAC_H */

commit a3246dc41aa3c9d799478ccc8dac5d19c509a923
Author: Esben Haabendal <esben@geanix.com>
Date:   Tue Apr 30 09:17:51 2019 +0200

    net: ll_temac: Add support for non-native register endianness
    
    Replace the powerpc specific MMIO register access functions with the
    generic big-endian mmio access functions, and add support for
    little-endian access depending on configuration.
    
    Big-endian access is maintained as the default, but little-endian can
    be configured in device-tree binding or in platform data.
    
    The temac_ior()/temac_iow() functions are replaced with macro wrappers
    to avoid modifying existing code more than necessary.
    
    Signed-off-by: Esben Haabendal <esben@geanix.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

diff --git a/include/linux/platform_data/xilinx-ll-temac.h b/include/linux/platform_data/xilinx-ll-temac.h
index 82e2f80648b0..af87927abab3 100644
--- a/include/linux/platform_data/xilinx-ll-temac.h
+++ b/include/linux/platform_data/xilinx-ll-temac.h
@@ -14,6 +14,8 @@ struct ll_temac_platform_data {
 	unsigned long long mdio_bus_id; /* Unique id for MDIO bus */
 	int phy_addr;		/* Address of the PHY to connect to */
 	phy_interface_t phy_interface; /* PHY interface mode */
+	bool reg_little_endian;	/* Little endian TEMAC register access  */
+	bool dma_little_endian;	/* Little endian DMA register access  */
 };
 
 #endif /* __LINUX_XILINX_LL_TEMAC_H */

commit 8425c41d1ef762cc15d9501d7117f009a79f3fe9
Author: Esben Haabendal <esben@geanix.com>
Date:   Tue Apr 30 09:17:49 2019 +0200

    net: ll_temac: Extend support to non-device-tree platforms
    
    Support initialization with platdata, so the driver can be used on
    non-device-tree platforms.
    
    For currently supported device-tree platforms, the driver should behave
    as before.
    
    Signed-off-by: Esben Haabendal <esben@geanix.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

diff --git a/include/linux/platform_data/xilinx-ll-temac.h b/include/linux/platform_data/xilinx-ll-temac.h
new file mode 100644
index 000000000000..82e2f80648b0
--- /dev/null
+++ b/include/linux/platform_data/xilinx-ll-temac.h
@@ -0,0 +1,19 @@
+/* SPDX-License-Identifier: GPL-2.0 */
+#ifndef __LINUX_XILINX_LL_TEMAC_H
+#define __LINUX_XILINX_LL_TEMAC_H
+
+#include <linux/if_ether.h>
+#include <linux/phy.h>
+
+struct ll_temac_platform_data {
+	bool txcsum;		/* Enable/disable TX checksum */
+	bool rxcsum;		/* Enable/disable RX checksum */
+	u8 mac_addr[ETH_ALEN];	/* MAC address (6 bytes) */
+	/* Clock frequency for input to MDIO clock generator */
+	u32 mdio_clk_freq;
+	unsigned long long mdio_bus_id; /* Unique id for MDIO bus */
+	int phy_addr;		/* Address of the PHY to connect to */
+	phy_interface_t phy_interface; /* PHY interface mode */
+};
+
+#endif /* __LINUX_XILINX_LL_TEMAC_H */
