commit c942fddf8793b2013be8c901b47d0a8dc02bf99f
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Mon May 27 08:55:06 2019 +0200

    treewide: Replace GPLv2 boilerplate/reference with SPDX - rule 157
    
    Based on 3 normalized pattern(s):
    
      this program is free software you can redistribute it and or modify
      it under the terms of the gnu general public license as published by
      the free software foundation either version 2 of the license or at
      your option any later version this program is distributed in the
      hope that it will be useful but without any warranty without even
      the implied warranty of merchantability or fitness for a particular
      purpose see the gnu general public license for more details
    
      this program is free software you can redistribute it and or modify
      it under the terms of the gnu general public license as published by
      the free software foundation either version 2 of the license or at
      your option any later version [author] [kishon] [vijay] [abraham]
      [i] [kishon]@[ti] [com] this program is distributed in the hope that
      it will be useful but without any warranty without even the implied
      warranty of merchantability or fitness for a particular purpose see
      the gnu general public license for more details
    
      this program is free software you can redistribute it and or modify
      it under the terms of the gnu general public license as published by
      the free software foundation either version 2 of the license or at
      your option any later version [author] [graeme] [gregory]
      [gg]@[slimlogic] [co] [uk] [author] [kishon] [vijay] [abraham] [i]
      [kishon]@[ti] [com] [based] [on] [twl6030]_[usb] [c] [author] [hema]
      [hk] [hemahk]@[ti] [com] this program is distributed in the hope
      that it will be useful but without any warranty without even the
      implied warranty of merchantability or fitness for a particular
      purpose see the gnu general public license for more details
    
    extracted by the scancode license scanner the SPDX license identifier
    
      GPL-2.0-or-later
    
    has been chosen to replace the boilerplate/reference in 1105 file(s).
    
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Reviewed-by: Allison Randal <allison@lohutok.net>
    Reviewed-by: Richard Fontana <rfontana@redhat.com>
    Reviewed-by: Kate Stewart <kstewart@linuxfoundation.org>
    Cc: linux-spdx@vger.kernel.org
    Link: https://lkml.kernel.org/r/20190527070033.202006027@linutronix.de
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/include/linux/platform_data/elm.h b/include/linux/platform_data/elm.h
index fef4b081b736..0f491d8abfdd 100644
--- a/include/linux/platform_data/elm.h
+++ b/include/linux/platform_data/elm.h
@@ -1,18 +1,8 @@
+/* SPDX-License-Identifier: GPL-2.0-or-later */
 /*
  * BCH Error Location Module
  *
  * Copyright (C) 2012 Texas Instruments Incorporated - http://www.ti.com/
- *
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation; either version 2 of the License, or
- * (at your option) any later version.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
- * GNU General Public License for more details.
- *
  */
 
 #ifndef __ELM_H

commit e90a619fb7e1acb5e18f1ab618c6d10b08f0fc70
Author: Miquel Raynal <miquel.raynal@bootlin.com>
Date:   Thu Feb 7 15:28:24 2019 +0100

    mtd: nand: omap: Fix comment in platform data using wrong Kconfig symbol
    
    The symbol that is being used in the #if/#endif block is not the one
    which is mentioned at the bottom.
    
    Fixes: 93af53b8633c ("nand: omap2: Remove horrible ifdefs to fix module probe")
    Signed-off-by: Miquel Raynal <miquel.raynal@bootlin.com>

diff --git a/include/linux/platform_data/elm.h b/include/linux/platform_data/elm.h
index b8686c00f15f..fef4b081b736 100644
--- a/include/linux/platform_data/elm.h
+++ b/include/linux/platform_data/elm.h
@@ -60,6 +60,6 @@ static inline int elm_config(struct device *dev, enum bch_ecc bch_type,
 {
 	return -ENOSYS;
 }
-#endif /* CONFIG_MTD_NAND_ECC_BCH */
+#endif /* CONFIG_MTD_NAND_OMAP_BCH */
 
 #endif /* __ELM_H */

commit 93af53b8633c4cb474585158512182b21219d743
Author: Ezequiel Garc√≠a <ezequiel@vanguardiasur.com.ar>
Date:   Sat Sep 20 17:53:12 2014 +0100

    nand: omap2: Remove horrible ifdefs to fix module probe
    
    The current code abuses ifdefs to determine if the selected ECC scheme
    is supported by the running kernel. As a result the code is hard to read,
    and it also fails to load as a module.
    
    This commit removes all the ifdefs and instead introduces a function
    omap2_nand_ecc_check() to check if the ECC is supported by using
    IS_ENABLED(CONFIG_xxx).
    
    Since IS_ENABLED() is true when a config is =y or =m, this change fixes the
    module so it can be loaded with no issues.
    
    Acked-by: Roger Quadros <rogerq@ti.com>
    Signed-off-by: Ezequiel Garcia <ezequiel@vanguardiasur.com.ar>
    Signed-off-by: Brian Norris <computersforpeace@gmail.com>

diff --git a/include/linux/platform_data/elm.h b/include/linux/platform_data/elm.h
index 780d1e97f620..b8686c00f15f 100644
--- a/include/linux/platform_data/elm.h
+++ b/include/linux/platform_data/elm.h
@@ -42,8 +42,24 @@ struct elm_errorvec {
 	int error_loc[16];
 };
 
+#if IS_ENABLED(CONFIG_MTD_NAND_OMAP_BCH)
 void elm_decode_bch_error_page(struct device *dev, u8 *ecc_calc,
 		struct elm_errorvec *err_vec);
 int elm_config(struct device *dev, enum bch_ecc bch_type,
 	int ecc_steps, int ecc_step_size, int ecc_syndrome_size);
+#else
+static inline void
+elm_decode_bch_error_page(struct device *dev, u8 *ecc_calc,
+			  struct elm_errorvec *err_vec)
+{
+}
+
+static inline int elm_config(struct device *dev, enum bch_ecc bch_type,
+			     int ecc_steps, int ecc_step_size,
+			     int ecc_syndrome_size)
+{
+	return -ENOSYS;
+}
+#endif /* CONFIG_MTD_NAND_ECC_BCH */
+
 #endif /* __ELM_H */

commit 2be589e4b28457f148640dc6addf6da24af64b7f
Author: pekon gupta <pekon@ti.com>
Date:   Mon May 19 13:24:40 2014 +0530

    mtd: nand: omap: add support for BCH16_ECC - ELM driver updates
    
    ELM hardware engine is used to detect ECC errors for BCHx ecc-schemes
    (like BCH4/BCH8/BCH16). This patch extends configuration of ELM registers
    for adding support of BCH16_HW ecc-scheme.
    
    Signed-off-by: Pekon Gupta <pekon@ti.com>
    Signed-off-by: Brian Norris <computersforpeace@gmail.com>

diff --git a/include/linux/platform_data/elm.h b/include/linux/platform_data/elm.h
index 4edb40676b3f..780d1e97f620 100644
--- a/include/linux/platform_data/elm.h
+++ b/include/linux/platform_data/elm.h
@@ -21,6 +21,7 @@
 enum bch_ecc {
 	BCH4_ECC = 0,
 	BCH8_ECC,
+	BCH16_ECC,
 };
 
 /* ELM support 8 error syndrome process */
@@ -38,7 +39,7 @@ struct elm_errorvec {
 	bool error_reported;
 	bool error_uncorrectable;
 	int error_count;
-	int error_loc[ERROR_VECTOR_MAX];
+	int error_loc[16];
 };
 
 void elm_decode_bch_error_page(struct device *dev, u8 *ecc_calc,

commit ea0760244d235688b5fae4e5cdd9412c1fb1c2fe
Author: Pekon Gupta <pekon@ti.com>
Date:   Thu Mar 20 18:48:35 2014 +0530

    mtd: devices: elm: clean elm_load_syndrome
    
    This patch refactors elm_load_syndrome() to make it scalable for newer
    ECC schemes by removing scheme specific macros (like ECC_BYTES*xx),
    and instead using ECC control information passed during elm_config.
    
    Signed-off-by: Pekon Gupta <pekon@ti.com>
    Reviewed-by: Ezequiel Garcia <ezequiel.garcia@free-electrons.com>
    Signed-off-by: Brian Norris <computersforpeace@gmail.com>

diff --git a/include/linux/platform_data/elm.h b/include/linux/platform_data/elm.h
index 6e37156b0902..4edb40676b3f 100644
--- a/include/linux/platform_data/elm.h
+++ b/include/linux/platform_data/elm.h
@@ -26,13 +26,6 @@ enum bch_ecc {
 /* ELM support 8 error syndrome process */
 #define ERROR_VECTOR_MAX		8
 
-#define BCH8_ECC_OOB_BYTES		13
-#define BCH4_ECC_OOB_BYTES		7
-/* RBL requires 14 byte even though BCH8 uses only 13 byte */
-#define BCH8_SIZE			(BCH8_ECC_OOB_BYTES + 1)
-/* Uses 1 extra byte to handle erased pages */
-#define BCH4_SIZE			(BCH4_ECC_OOB_BYTES + 1)
-
 /**
  * struct elm_errorvec - error vector for elm
  * @error_reported:		set true for vectors error is reported

commit 3f4eb14bdbe148fcc3a8e02f506ccc9b8c955ad4
Author: Pekon Gupta <pekon@ti.com>
Date:   Thu Mar 20 18:48:34 2014 +0530

    mtd: devices: elm: check for hardware engine's design constraints
    
    ELM hardware engine is used by BCH ecc-schemes for detecting and locating ECC
    errors. This patch adds the following checks for ELM hardware engine:
    
     - ELM internal buffers are of 1K,
       so it cannot process data with ecc-step-size > 1K.
    
     - ELM engine can execute upto maximum of 8 threads in parallel,
       so in *page-mode* (when complete page is processed in single iteration),
       ELM cannot support ecc-steps > 8.
    
    Signed-off-by: Pekon Gupta <pekon@ti.com>
    Reviewed-by: Ezequiel Garcia <ezequiel.garcia@free-electrons.com>
    Signed-off-by: Brian Norris <computersforpeace@gmail.com>

diff --git a/include/linux/platform_data/elm.h b/include/linux/platform_data/elm.h
index bf0a83b7ed9d..6e37156b0902 100644
--- a/include/linux/platform_data/elm.h
+++ b/include/linux/platform_data/elm.h
@@ -50,5 +50,6 @@ struct elm_errorvec {
 
 void elm_decode_bch_error_page(struct device *dev, u8 *ecc_calc,
 		struct elm_errorvec *err_vec);
-int elm_config(struct device *dev, enum bch_ecc bch_type);
+int elm_config(struct device *dev, enum bch_ecc bch_type,
+	int ecc_steps, int ecc_step_size, int ecc_syndrome_size);
 #endif /* __ELM_H */

commit ad2457894c272279bf73ca46ae5ea5de4876d2a0
Author: Daniel Mack <zonque@gmail.com>
Date:   Mon Mar 4 00:57:20 2013 +0100

    mtd: devices: elm: check for device's presence before configuration
    
    In case the driver is not probed - due to config mismatches or errors
    in the DTS files - dev_get_drvdata() returns NULL, leading to an Ooops
    during boot.
    
    Make elm_config() return an error in such cases to propagate the error
    up to the user, so it can fall back to software mode.
    
    Signed-off-by: Daniel Mack <zonque@gmail.com>
    Acked-by: Peter Korsgaard <jacmet@sunsite.dk>
    Signed-off-by: Artem Bityutskiy <artem.bityutskiy@linux.intel.com>
    Signed-off-by: David Woodhouse <David.Woodhouse@intel.com>

diff --git a/include/linux/platform_data/elm.h b/include/linux/platform_data/elm.h
index 1bd5244d1dcd..bf0a83b7ed9d 100644
--- a/include/linux/platform_data/elm.h
+++ b/include/linux/platform_data/elm.h
@@ -50,5 +50,5 @@ struct elm_errorvec {
 
 void elm_decode_bch_error_page(struct device *dev, u8 *ecc_calc,
 		struct elm_errorvec *err_vec);
-void elm_config(struct device *dev, enum bch_ecc bch_type);
+int elm_config(struct device *dev, enum bch_ecc bch_type);
 #endif /* __ELM_H */

commit 62116e5171e00f85a8d53f76e45b84423c89ff34
Author: Philip Avinash <avinashphilip@ti.com>
Date:   Fri Jan 4 13:26:51 2013 +0530

    mtd: nand: omap2: Support for hardware BCH error correction.
    
    ELM module can be used for hardware error correction of BCH 4 & 8 bit.
    ELM module functionality is verified by checking the availability of
    handle for ELM module in device tree. Hence supporting
    1. ELM module available, BCH error correction done by ELM module. Also
    support read & write page in one shot by adding custom read_page and
    write_page methods. This helps in optimizing code for NAND flashes with
    page size less than 4 KB.
    2. If ELM module not available fall back to software BCH error
    correction support.
    
    New structure member is added to omap_nand_info
    1. "is_elm_used" to know the status of whether the ELM module is used for
       error correction or not.
    2. "elm_dev" device pointer to elm device on detection of ELM module.
    
    Also being here update the device tree documentation of gpmc-nand for
    adding optional property elm_id.
    
    Note:
    ECC layout uses 1 extra bytes for 512 byte of data to handle erased
    pages. Extra byte programmed to zero for programmed pages. Also BCH8
    requires 14 byte ecc to maintain compatibility with RBL ECC layout.
    This results a common ecc layout across RBL, U-boot & Linux with BCH8.
    
    Signed-off-by: Philip Avinash <avinashphilip@ti.com>
    Signed-off-by: Artem Bityutskiy <artem.bityutskiy@linux.intel.com>

diff --git a/include/linux/platform_data/elm.h b/include/linux/platform_data/elm.h
index 11ab6aaf2431..1bd5244d1dcd 100644
--- a/include/linux/platform_data/elm.h
+++ b/include/linux/platform_data/elm.h
@@ -30,7 +30,8 @@ enum bch_ecc {
 #define BCH4_ECC_OOB_BYTES		7
 /* RBL requires 14 byte even though BCH8 uses only 13 byte */
 #define BCH8_SIZE			(BCH8_ECC_OOB_BYTES + 1)
-#define BCH4_SIZE			(BCH4_ECC_OOB_BYTES)
+/* Uses 1 extra byte to handle erased pages */
+#define BCH4_SIZE			(BCH4_ECC_OOB_BYTES + 1)
 
 /**
  * struct elm_errorvec - error vector for elm

commit bf22433575ef30a4807f0620498017df0f27df67
Author: Philip Avinash <avinashphilip@ti.com>
Date:   Fri Jan 4 13:26:50 2013 +0530

    mtd: devices: elm: Add support for ELM error correction
    
    The ELM hardware module can be used to speedup BCH 4/8/16 ECC scheme
    error correction.
    For now only 4 & 8 bit support is added
    
    Signed-off-by: Philip Avinash <avinashphilip@ti.com>
    Signed-off-by: Artem Bityutskiy <artem.bityutskiy@linux.intel.com>

diff --git a/include/linux/platform_data/elm.h b/include/linux/platform_data/elm.h
new file mode 100644
index 000000000000..11ab6aaf2431
--- /dev/null
+++ b/include/linux/platform_data/elm.h
@@ -0,0 +1,53 @@
+/*
+ * BCH Error Location Module
+ *
+ * Copyright (C) 2012 Texas Instruments Incorporated - http://www.ti.com/
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ */
+
+#ifndef __ELM_H
+#define __ELM_H
+
+enum bch_ecc {
+	BCH4_ECC = 0,
+	BCH8_ECC,
+};
+
+/* ELM support 8 error syndrome process */
+#define ERROR_VECTOR_MAX		8
+
+#define BCH8_ECC_OOB_BYTES		13
+#define BCH4_ECC_OOB_BYTES		7
+/* RBL requires 14 byte even though BCH8 uses only 13 byte */
+#define BCH8_SIZE			(BCH8_ECC_OOB_BYTES + 1)
+#define BCH4_SIZE			(BCH4_ECC_OOB_BYTES)
+
+/**
+ * struct elm_errorvec - error vector for elm
+ * @error_reported:		set true for vectors error is reported
+ * @error_uncorrectable:	number of uncorrectable errors
+ * @error_count:		number of correctable errors in the sector
+ * @error_loc:			buffer for error location
+ *
+ */
+struct elm_errorvec {
+	bool error_reported;
+	bool error_uncorrectable;
+	int error_count;
+	int error_loc[ERROR_VECTOR_MAX];
+};
+
+void elm_decode_bch_error_page(struct device *dev, u8 *ecc_calc,
+		struct elm_errorvec *err_vec);
+void elm_config(struct device *dev, enum bch_ecc bch_type);
+#endif /* __ELM_H */
