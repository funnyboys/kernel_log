commit b2745d92bb015cc4454d4195c4ce6e2852db397e
Author: Suman Anna <s-anna@ti.com>
Date:   Thu Feb 27 16:28:34 2020 -0600

    bus: ti-sysc: Add support for PRUSS SYSC type
    
    The PRU-ICSS present on AM33xx/AM43xx/AM57xx has a very unique
    SYSCFG register. The register follows the OMAP4-style SYSC_TYPE3
    for Master Standby and Slave Idle, but also has two additional
    unique fields - STANDBY_INIT and SUB_MWAIT. The STANDBY_INIT is
    a control bit that is used to initiate a Standby sequence (when
    set) and trigger a MStandby request to the SoC's PRCM module. This
    same bit is also used to enable the OCP master ports (when cleared)
    to allow the PRU cores to access any peripherals or memory beyond
    the PRU subsystem. The SUB_MWAIT is a ready status field for the
    external access.
    
    Add support for this SYSC type. The STANDBY_INIT has to be set
    during suspend, without which it results in a hang in the resume
    sequence on AM33xx/AM43xx boards and requires a board reset to
    come out of the hang. Any PRU applications requiring external
    access are supposed to clear the STANDBY_INIT bit. Note that
    the PRUSS context is lost during a suspend sequence because the
    PRUSS module is reset and/or disabled.
    
    Signed-off-by: Suman Anna <s-anna@ti.com>
    Signed-off-by: Roger Quadros <rogerq@ti.com>
    [tony@atomide.com: updated quirk define number and to use -ENODEV]
    Signed-off-by: Tony Lindgren <tony@atomide.com>

diff --git a/include/linux/platform_data/ti-sysc.h b/include/linux/platform_data/ti-sysc.h
index ecd3a979a14d..c59999ce044e 100644
--- a/include/linux/platform_data/ti-sysc.h
+++ b/include/linux/platform_data/ti-sysc.h
@@ -17,6 +17,7 @@ enum ti_sysc_module_type {
 	TI_SYSC_OMAP4_MCASP,
 	TI_SYSC_OMAP4_USB_HOST_FS,
 	TI_SYSC_DRA7_MCAN,
+	TI_SYSC_PRUSS,
 };
 
 struct ti_sysc_cookie {
@@ -49,6 +50,7 @@ struct sysc_regbits {
 	s8 emufree_shift;
 };
 
+#define SYSC_MODULE_QUIRK_PRUSS		BIT(24)
 #define SYSC_MODULE_QUIRK_DSS_RESET	BIT(23)
 #define SYSC_MODULE_QUIRK_RTC_UNLOCK	BIT(22)
 #define SYSC_QUIRK_CLKDM_NOAUTO		BIT(21)

commit 7324a7a0d5e232551eedad69fea3e4b91973d7c6
Author: Tony Lindgren <tony@atomide.com>
Date:   Mon Feb 24 12:58:03 2020 -0800

    bus: ti-sysc: Implement display subsystem reset quirk
    
    The display subsystem (DSS) needs the child outputs disabled for reset.
    In order to prepare to probe DSS without legacy platform data, let's
    implement sysc_pre_reset_quirk_dss() similar to what we have for the
    platform data with omap_dss_reset().
    
    Note that we cannot directly use the old omap_dss_reset() without
    platform data callbacks and updating omap_dss_reset() to understand
    struct device. And we will be dropping omap_dss_reset() anyways when
    all the SoCs are probing with device tree, so let's not mess with the
    legacy code at all.
    
    Cc: Jyri Sarha <jsarha@ti.com>
    Cc: Laurent Pinchart <laurent.pinchart@ideasonboard.com>
    Cc: Tomi Valkeinen <tomi.valkeinen@ti.com>
    Signed-off-by: Tony Lindgren <tony@atomide.com>

diff --git a/include/linux/platform_data/ti-sysc.h b/include/linux/platform_data/ti-sysc.h
index 0b33c3b7302f..ecd3a979a14d 100644
--- a/include/linux/platform_data/ti-sysc.h
+++ b/include/linux/platform_data/ti-sysc.h
@@ -49,6 +49,7 @@ struct sysc_regbits {
 	s8 emufree_shift;
 };
 
+#define SYSC_MODULE_QUIRK_DSS_RESET	BIT(23)
 #define SYSC_MODULE_QUIRK_RTC_UNLOCK	BIT(22)
 #define SYSC_QUIRK_CLKDM_NOAUTO		BIT(21)
 #define SYSC_QUIRK_FORCE_MSTANDBY	BIT(20)

commit e8639e1c986a8a9d0f94549170f6db579376c3ae
Author: Tony Lindgren <tony@atomide.com>
Date:   Mon Feb 24 12:58:03 2020 -0800

    bus: ti-sysc: Handle module unlock quirk needed for some RTC
    
    The RTC modules on am3 and am4 need quirk handling to unlock and lock
    them for reset so let's add the quirk handling based on what we already
    have for legacy platform data. In later patches we will simply drop the
    RTC related platform data and the old quirk handling.
    
    Signed-off-by: Tony Lindgren <tony@atomide.com>

diff --git a/include/linux/platform_data/ti-sysc.h b/include/linux/platform_data/ti-sysc.h
index accab5325cf3..0b33c3b7302f 100644
--- a/include/linux/platform_data/ti-sysc.h
+++ b/include/linux/platform_data/ti-sysc.h
@@ -49,6 +49,7 @@ struct sysc_regbits {
 	s8 emufree_shift;
 };
 
+#define SYSC_MODULE_QUIRK_RTC_UNLOCK	BIT(22)
 #define SYSC_QUIRK_CLKDM_NOAUTO		BIT(21)
 #define SYSC_QUIRK_FORCE_MSTANDBY	BIT(20)
 #define SYSC_MODULE_QUIRK_AESS		BIT(19)

commit feaa8baee82ababa46af95b03cfc28680ad647a6
Author: Tony Lindgren <tony@atomide.com>
Date:   Mon Feb 24 12:58:03 2020 -0800

    bus: ti-sysc: Implement SoC revision handling
    
    We need to know SoC type and features for cases where the same SoC
    may be installed in various versions on the same board and would need
    a separate dts file otherwise for the different variants.
    
    For example, am3703 is pin compatible with omap3630, but has sgx and
    iva accelerators disabled. We must not try to access the sgx or iva
    module registers on am3703, and need to set the unavailable devices
    disabled early.
    
    Let's also detect omap3430 as that is needed for display subsystem
    (DSS) reset later on, and GP vs EMU or HS devices. Further SoC
    specific disabled device detection can be added as needed, such as
    dra71x vs dra76x rtc and usb4.
    
    Cc: Adam Ford <aford173@gmail.com>
    Cc: André Hentschel <nerv@dawncrow.de>
    Cc: H. Nikolaus Schaller <hns@goldelico.com>
    Cc: Keerthy <j-keerthy@ti.com>
    Signed-off-by: Tony Lindgren <tony@atomide.com>

diff --git a/include/linux/platform_data/ti-sysc.h b/include/linux/platform_data/ti-sysc.h
index 2cbde6542849..accab5325cf3 100644
--- a/include/linux/platform_data/ti-sysc.h
+++ b/include/linux/platform_data/ti-sysc.h
@@ -141,6 +141,7 @@ struct clk;
 
 struct ti_sysc_platform_data {
 	struct of_dev_auxdata *auxdata;
+	bool (*soc_type_gp)(void);
 	int (*init_clockdomain)(struct device *dev, struct clk *fck,
 				struct clk *ick, struct ti_sysc_cookie *cookie);
 	void (*clkdm_deny_idle)(struct device *dev,

commit 94f6345712b37e4bb23cb265ce4c65b9d177e75a
Author: Tony Lindgren <tony@atomide.com>
Date:   Thu Dec 12 08:57:58 2019 -0800

    bus: ti-sysc: Implement quirk handling for CLKDM_NOAUTO
    
    For dra7 dcan and dwc3 instances we need to block clockdomain autoidle.
    Let's do this with CLKDM_NOAUTO quirk flag and enable it for dcan and
    dwc3.
    
    Cc: Keerthy <j-keerthy@ti.com>
    Cc: Roger Quadros <rogerq@ti.com>
    Cc: Tero Kristo <t-kristo@ti.com>
    Signed-off-by: Tony Lindgren <tony@atomide.com>

diff --git a/include/linux/platform_data/ti-sysc.h b/include/linux/platform_data/ti-sysc.h
index 8cfe570fdece..2cbde6542849 100644
--- a/include/linux/platform_data/ti-sysc.h
+++ b/include/linux/platform_data/ti-sysc.h
@@ -49,6 +49,7 @@ struct sysc_regbits {
 	s8 emufree_shift;
 };
 
+#define SYSC_QUIRK_CLKDM_NOAUTO		BIT(21)
 #define SYSC_QUIRK_FORCE_MSTANDBY	BIT(20)
 #define SYSC_MODULE_QUIRK_AESS		BIT(19)
 #define SYSC_MODULE_QUIRK_SGX		BIT(18)

commit 93c60483b5feefced92b869d5f97769495bc6313
Author: Tony Lindgren <tony@atomide.com>
Date:   Mon Dec 9 13:55:15 2019 -0800

    bus: ti-sysc: Fix missing force mstandby quirk handling
    
    Commit 03856e928b0e ("bus: ti-sysc: Handle mstandby quirk and use it for
    musb") added quirk handling for mstandby quirk but did not consider that
    we also need a quirk variant for SYSC_QUIRK_FORCE_MSTANDBY.
    
    We need to use forced idle mode for both SYSC_QUIRK_SWSUP_MSTANDBY and
    SYSC_QUIRK_FORCE_MSTANDBY, but SYSC_QUIRK_SWSUP_MSTANDBY also need to
    additionally also configure no-idle mode when enabled.
    
    Fixes: 03856e928b0e ("bus: ti-sysc: Handle mstandby quirk and use it for musb")
    Signed-off-by: Tony Lindgren <tony@atomide.com>

diff --git a/include/linux/platform_data/ti-sysc.h b/include/linux/platform_data/ti-sysc.h
index 0b9380475144..8cfe570fdece 100644
--- a/include/linux/platform_data/ti-sysc.h
+++ b/include/linux/platform_data/ti-sysc.h
@@ -49,6 +49,7 @@ struct sysc_regbits {
 	s8 emufree_shift;
 };
 
+#define SYSC_QUIRK_FORCE_MSTANDBY	BIT(20)
 #define SYSC_MODULE_QUIRK_AESS		BIT(19)
 #define SYSC_MODULE_QUIRK_SGX		BIT(18)
 #define SYSC_MODULE_QUIRK_HDQ1W		BIT(17)

commit 020003f763e24e4ed0bb3d8909f3940891536d5d
Author: Tony Lindgren <tony@atomide.com>
Date:   Thu Nov 14 08:25:28 2019 -0800

    bus: ti-sysc: Add module enable quirk for audio AESS
    
    We must set the autogating bit on enable for AESS (Audio Engine SubSystem)
    when probed with ti-sysc interconnect target module driver. Otherwise it
    won't idle properly.
    
    Cc: Peter Ujfalusi <peter.ujfalusi@ti.com>
    Tested-by: Peter Ujfalusi <peter.ujfalusi@ti.com>
    Signed-off-by: Tony Lindgren <tony@atomide.com>

diff --git a/include/linux/platform_data/ti-sysc.h b/include/linux/platform_data/ti-sysc.h
index b5b7a3423ca8..0b9380475144 100644
--- a/include/linux/platform_data/ti-sysc.h
+++ b/include/linux/platform_data/ti-sysc.h
@@ -49,6 +49,7 @@ struct sysc_regbits {
 	s8 emufree_shift;
 };
 
+#define SYSC_MODULE_QUIRK_AESS		BIT(19)
 #define SYSC_MODULE_QUIRK_SGX		BIT(18)
 #define SYSC_MODULE_QUIRK_HDQ1W		BIT(17)
 #define SYSC_MODULE_QUIRK_I2C		BIT(16)

commit d7f563db7794a6a271b6e9dd6e65a437d6a1d933
Author: Tony Lindgren <tony@atomide.com>
Date:   Wed Aug 14 05:18:16 2019 -0700

    bus: ti-sysc: Add module enable quirk for SGX on omap36xx
    
    Add module enable quirk for SGX needed on omap36xx.
    
    Cc: Adam Ford <aford173@gmail.com>
    Cc: Filip Matijević <filip.matijevic.pz@gmail.com>
    Cc: "H. Nikolaus Schaller" <hns@goldelico.com>
    Cc: Ivaylo Dimitrov <ivo.g.dimitrov.75@gmail.com>
    Cc: moaz korena <moaz@korena.xyz>
    Cc: Merlijn Wajer <merlijn@wizzup.org>
    Cc: Paweł Chmiel <pawel.mikolaj.chmiel@gmail.com>
    Cc: Philipp Rossak <embed3d@gmail.com>
    Cc: Tomi Valkeinen <tomi.valkeinen@ti.com>
    Signed-off-by: Tony Lindgren <tony@atomide.com>

diff --git a/include/linux/platform_data/ti-sysc.h b/include/linux/platform_data/ti-sysc.h
index 1a0905435b32..b5b7a3423ca8 100644
--- a/include/linux/platform_data/ti-sysc.h
+++ b/include/linux/platform_data/ti-sysc.h
@@ -49,6 +49,7 @@ struct sysc_regbits {
 	s8 emufree_shift;
 };
 
+#define SYSC_MODULE_QUIRK_SGX		BIT(18)
 #define SYSC_MODULE_QUIRK_HDQ1W		BIT(17)
 #define SYSC_MODULE_QUIRK_I2C		BIT(16)
 #define SYSC_MODULE_QUIRK_WDT		BIT(15)

commit b58056da2ec28e2c1b66096cd5109997f04d3fd1
Author: Suman Anna <s-anna@ti.com>
Date:   Tue Aug 13 04:13:32 2019 -0700

    bus: ti-sysc: Add missing kerneldoc comments
    
    A few fields in various structures is missing the corresponding
    kerneldoc comments. Add them. Also, fixed the comment for sidlemodes.
    
    Signed-off-by: Suman Anna <s-anna@ti.com>
    Acked-by: Roger Quadros <rogerq@ti.com>
    Signed-off-by: Tony Lindgren <tony@atomide.com>

diff --git a/include/linux/platform_data/ti-sysc.h b/include/linux/platform_data/ti-sysc.h
index 7d009dc08a54..1a0905435b32 100644
--- a/include/linux/platform_data/ti-sysc.h
+++ b/include/linux/platform_data/ti-sysc.h
@@ -72,7 +72,7 @@ struct sysc_regbits {
 
 /**
  * struct sysc_capabilities - capabilities for an interconnect target module
- *
+ * @type: sysc type identifier for the module
  * @sysc_mask: bitmask of supported SYSCONFIG register bits
  * @regbits: bitmask of SYSCONFIG register bits
  * @mod_quirks: bitmask of module specific quirks
@@ -87,8 +87,9 @@ struct sysc_capabilities {
 /**
  * struct sysc_config - configuration for an interconnect target module
  * @sysc_val: configured value for sysc register
+ * @syss_mask: configured mask value for SYSSTATUS register
  * @midlemodes: bitmask of supported master idle modes
- * @sidlemodes: bitmask of supported master idle modes
+ * @sidlemodes: bitmask of supported slave idle modes
  * @srst_udelay: optional delay needed after OCP soft reset
  * @quirks: bitmask of enabled quirks
  */

commit 54d662227caebaabd25823c6d955ba92dfa361a8
Author: Suman Anna <s-anna@ti.com>
Date:   Tue Aug 13 04:13:32 2019 -0700

    bus: ti-sysc: Switch to SPDX license identifier
    
    Use the appropriate SPDX license identifier in the TI sysc
    interconnect target driver source files and drop the previous
    boilerplate license text. Also, add the the SPDX license
    identifier in the associated ti-sysc header files.
    
    Signed-off-by: Suman Anna <s-anna@ti.com>
    Acked-by: Roger Quadros <rogerq@ti.com>
    Signed-off-by: Tony Lindgren <tony@atomide.com>

diff --git a/include/linux/platform_data/ti-sysc.h b/include/linux/platform_data/ti-sysc.h
index 0c587d4fc718..7d009dc08a54 100644
--- a/include/linux/platform_data/ti-sysc.h
+++ b/include/linux/platform_data/ti-sysc.h
@@ -1,3 +1,5 @@
+/* SPDX-License-Identifier: GPL-2.0 */
+
 #ifndef __TI_SYSC_DATA_H__
 #define __TI_SYSC_DATA_H__
 

commit 4e23be473e3063a9d3bc06bb0aee89885fffab0e
Author: Tony Lindgren <tony@atomide.com>
Date:   Mon Jun 10 04:48:05 2019 -0700

    bus: ti-sysc: Add support for module specific reset quirks
    
    Some older interconnect target modules need module internal clock
    toggling quirks to reset properly. We've been doing this in the
    platform code earlier, but need to be able to it directly in the
    ti-sysc driver when we no longer rely on on the platform code.
    
    Let's add reset handling for 1-wire, i2c and watchdog. Later on
    we can add more modules like msdi and dss as they get tested.
    For dra7 pcie, we should be able to just use the rstctrl reset
    driver when available.
    
    Signed-off-by: Tony Lindgren <tony@atomide.com>

diff --git a/include/linux/platform_data/ti-sysc.h b/include/linux/platform_data/ti-sysc.h
index 8822e99ff813..0c587d4fc718 100644
--- a/include/linux/platform_data/ti-sysc.h
+++ b/include/linux/platform_data/ti-sysc.h
@@ -47,6 +47,9 @@ struct sysc_regbits {
 	s8 emufree_shift;
 };
 
+#define SYSC_MODULE_QUIRK_HDQ1W		BIT(17)
+#define SYSC_MODULE_QUIRK_I2C		BIT(16)
+#define SYSC_MODULE_QUIRK_WDT		BIT(15)
 #define SYSS_QUIRK_RESETDONE_INVERTED	BIT(14)
 #define SYSC_QUIRK_SWSUP_MSTANDBY	BIT(13)
 #define SYSC_QUIRK_SWSUP_SIDLE_ACT	BIT(12)

commit e0db94fe87dacd72be0699adcc29e321db7f1689
Author: Tony Lindgren <tony@atomide.com>
Date:   Mon May 27 04:51:53 2019 -0700

    bus: ti-sysc: Make OCP reset work for sysstatus and sysconfig reset bits
    
    We've had minimal OCP softreset support in ti-sysc interconnect target
    module driver only used for MCAN driver so far. But it turns out that
    MCAN has the sysstatus register resetdone bit inverted compared to most
    other modules.
    
    Let's make OCP softreset work for other typical cases with reset status
    in sysstatus or sysconfig register so we can use the new functions for
    sysc_enable_module() and sysc_disable_module() without "ti,hwmods"
    property in the following patches.
    
    Tested-by: Keerthy <j-keerthy@ti.com>
    Signed-off-by: Tony Lindgren <tony@atomide.com>

diff --git a/include/linux/platform_data/ti-sysc.h b/include/linux/platform_data/ti-sysc.h
index 6626fd31e309..8822e99ff813 100644
--- a/include/linux/platform_data/ti-sysc.h
+++ b/include/linux/platform_data/ti-sysc.h
@@ -47,6 +47,7 @@ struct sysc_regbits {
 	s8 emufree_shift;
 };
 
+#define SYSS_QUIRK_RESETDONE_INVERTED	BIT(14)
 #define SYSC_QUIRK_SWSUP_MSTANDBY	BIT(13)
 #define SYSC_QUIRK_SWSUP_SIDLE_ACT	BIT(12)
 #define SYSC_QUIRK_SWSUP_SIDLE		BIT(11)

commit 2b2f7def058a5386838ef4dba70a860285f79e66
Author: Tony Lindgren <tony@atomide.com>
Date:   Mon May 27 04:51:53 2019 -0700

    bus: ti-sysc: Add support for missing clockdomain handling
    
    We need to let ti-sysc driver manage clockdomain autoidle for the
    duration of of reset, enable and idle. And we need to do it before we
    enable the clock and after we disable it. Currently we are still
    relying on platform callbacks indirectly managing clockdomain autoidle.
    But I noticed that for device tree only probed drivers it now happens
    only after we enabling the clocks and before we disable the clocks,
    while it should be the other way around. So far I have not noticed
    any issues with this though.
    
    Let's add new ti_sysc_clkdm_deny_idle() and ti_sysc_clkdm_allow_idle()
    functions for ti-sysc driver to use to manage clockdomains directly via
    platform data callbacks. Note that we can implement the clockdomain
    functions in pdata-quirks.c as for probing devices without "ti,hwmods"
    custom property we don't need to use the other platform data callbacks.
    
    Let's do this in one patch as there's is still an unlikely chance we
    may need to apply this as a fix for v5.2 for dropping legacy platform
    data for some devices. We also do have the option of adding back the
    platform data if needed in case of trouble.
    
    Tested-by: Keerthy <j-keerthy@ti.com>
    Signed-off-by: Tony Lindgren <tony@atomide.com>

diff --git a/include/linux/platform_data/ti-sysc.h b/include/linux/platform_data/ti-sysc.h
index 9256c0305968..6626fd31e309 100644
--- a/include/linux/platform_data/ti-sysc.h
+++ b/include/linux/platform_data/ti-sysc.h
@@ -19,6 +19,7 @@ enum ti_sysc_module_type {
 
 struct ti_sysc_cookie {
 	void *data;
+	void *clkdm;
 };
 
 /**
@@ -125,9 +126,16 @@ struct ti_sysc_module_data {
 };
 
 struct device;
+struct clk;
 
 struct ti_sysc_platform_data {
 	struct of_dev_auxdata *auxdata;
+	int (*init_clockdomain)(struct device *dev, struct clk *fck,
+				struct clk *ick, struct ti_sysc_cookie *cookie);
+	void (*clkdm_deny_idle)(struct device *dev,
+				const struct ti_sysc_cookie *cookie);
+	void (*clkdm_allow_idle)(struct device *dev,
+				 const struct ti_sysc_cookie *cookie);
 	int (*init_module)(struct device *dev,
 			   const struct ti_sysc_module_data *data,
 			   struct ti_sysc_cookie *cookie);

commit b4a9a7a38917e9f947b5e69f7e8d4138d4c82845
Author: Tony Lindgren <tony@atomide.com>
Date:   Thu Mar 21 13:27:08 2019 -0700

    bus: ti-sysc: Handle swsup idle mode quirks
    
    In preparation of dropping interconnect target module platform data in
    favor of devicetree based data, we must pass swsup idle quirks to the
    platform data functions.
    
    For now, let's only tag the UART modules with the SWSUP_SIDLE_ACT quirk.
    The other modules will get tagged with swsup quirks as we drop the
    platform data and test the changes.
    
    Signed-off-by: Tony Lindgren <tony@atomide.com>

diff --git a/include/linux/platform_data/ti-sysc.h b/include/linux/platform_data/ti-sysc.h
index 1384e5cdd310..9256c0305968 100644
--- a/include/linux/platform_data/ti-sysc.h
+++ b/include/linux/platform_data/ti-sysc.h
@@ -46,6 +46,9 @@ struct sysc_regbits {
 	s8 emufree_shift;
 };
 
+#define SYSC_QUIRK_SWSUP_MSTANDBY	BIT(13)
+#define SYSC_QUIRK_SWSUP_SIDLE_ACT	BIT(12)
+#define SYSC_QUIRK_SWSUP_SIDLE		BIT(11)
 #define SYSC_QUIRK_EXT_OPT_CLOCK	BIT(10)
 #define SYSC_QUIRK_LEGACY_IDLE		BIT(9)
 #define SYSC_QUIRK_RESET_STATUS		BIT(8)

commit a54275f4ab204137c9995c686c7f1cd2682cc0a4
Author: Tony Lindgren <tony@atomide.com>
Date:   Thu Mar 21 11:00:21 2019 -0700

    bus: ti-sysc: Add quirk handling for external optional functional clock
    
    We cannot access mcpdm registers at all unless there is an optional pdmclk
    configured. As this is currently only needed for mcpdm, let's check for
    mcpdm in sysc_get_clocks(). If it turns out to be needed for other modules
    too, we can add more flags to the quirks table for this.
    
    Signed-off-by: Tony Lindgren <tony@atomide.com>

diff --git a/include/linux/platform_data/ti-sysc.h b/include/linux/platform_data/ti-sysc.h
index fa97b8c5d26d..1384e5cdd310 100644
--- a/include/linux/platform_data/ti-sysc.h
+++ b/include/linux/platform_data/ti-sysc.h
@@ -46,6 +46,7 @@ struct sysc_regbits {
 	s8 emufree_shift;
 };
 
+#define SYSC_QUIRK_EXT_OPT_CLOCK	BIT(10)
 #define SYSC_QUIRK_LEGACY_IDLE		BIT(9)
 #define SYSC_QUIRK_RESET_STATUS		BIT(8)
 #define SYSC_QUIRK_NO_IDLE		BIT(7)

commit 386cb76681ca6248878c7b76d3d5aa0e8b8a07bb
Author: Tony Lindgren <tony@atomide.com>
Date:   Fri Mar 22 07:49:30 2019 -0700

    bus: ti-sysc: Handle missed no-idle property in addition to no-idle-on-init
    
    We have ti,no-idle in use in addition to ti,no-idle-on-init but we're
    missing handling for it in the ti-sysc interconnect target module driver.
    
    Let's also group the idle defines together and update the binding
    documentation for it.
    
    Cc: devicetree@vger.kernel.org
    Reviewed-by: Rob Herring <robh@kernel.org>
    Signed-off-by: Tony Lindgren <tony@atomide.com>

diff --git a/include/linux/platform_data/ti-sysc.h b/include/linux/platform_data/ti-sysc.h
index 1ea3aab972b4..fa97b8c5d26d 100644
--- a/include/linux/platform_data/ti-sysc.h
+++ b/include/linux/platform_data/ti-sysc.h
@@ -46,8 +46,9 @@ struct sysc_regbits {
 	s8 emufree_shift;
 };
 
-#define SYSC_QUIRK_LEGACY_IDLE		BIT(8)
-#define SYSC_QUIRK_RESET_STATUS		BIT(7)
+#define SYSC_QUIRK_LEGACY_IDLE		BIT(9)
+#define SYSC_QUIRK_RESET_STATUS		BIT(8)
+#define SYSC_QUIRK_NO_IDLE		BIT(7)
 #define SYSC_QUIRK_NO_IDLE_ON_INIT	BIT(6)
 #define SYSC_QUIRK_NO_RESET_ON_INIT	BIT(5)
 #define SYSC_QUIRK_OPT_CLKS_NEEDED	BIT(4)

commit 40d9f9124822013331367fb4ab59936c3ac944d6
Author: Tony Lindgren <tony@atomide.com>
Date:   Mon Sep 24 12:16:54 2018 -0700

    bus: ti-sysc: Defer suspend as needed
    
    We don't care when we suspend but some our children do. In order to
    avoid tagging various modules with SYSC_QUIRK_RESOURCE_PROVIDER, let's
    do it automatically by tagging modules that are busy on suspend for
    noirq suspend. This way we can just do module detection on define DEBUG.
    
    Note that we still need to keep SYSC_QUIRK_LEGACY_IDLE flag around so
    the our legacy single-child devices that set pm_runtime_irq_safe() can
    manage the interconnect target module themselves.
    
    Signed-off-by: Tony Lindgren <tony@atomide.com>

diff --git a/include/linux/platform_data/ti-sysc.h b/include/linux/platform_data/ti-sysc.h
index 2efa3470a451..1ea3aab972b4 100644
--- a/include/linux/platform_data/ti-sysc.h
+++ b/include/linux/platform_data/ti-sysc.h
@@ -46,7 +46,6 @@ struct sysc_regbits {
 	s8 emufree_shift;
 };
 
-#define SYSC_QUIRK_RESOURCE_PROVIDER	BIT(9)
 #define SYSC_QUIRK_LEGACY_IDLE		BIT(8)
 #define SYSC_QUIRK_RESET_STATUS		BIT(7)
 #define SYSC_QUIRK_NO_IDLE_ON_INIT	BIT(6)

commit 7f35e63dbfcb627bd30bac45702ffdf1ddde1516
Author: Faiz Abbas <faiz_abbas@ti.com>
Date:   Mon Jul 9 22:18:38 2018 +0530

    bus: ti-sysc: Add support for using ti-sysc for MCAN on dra76x
    
    The dra76x MCAN generic interconnect module has a its own
    format for the bits in the control registers.
    
    Therefore add a new module type, new regbits and new capabilities
    specific to the MCAN module.
    
    Acked-by: Rob Herring <robh@kernel.org>
    CC: Tony Lindgren <tony@atomide.com>
    Signed-off-by: Faiz Abbas <faiz_abbas@ti.com>
    Signed-off-by: Tony Lindgren <tony@atomide.com>

diff --git a/include/linux/platform_data/ti-sysc.h b/include/linux/platform_data/ti-sysc.h
index 990aad477458..2efa3470a451 100644
--- a/include/linux/platform_data/ti-sysc.h
+++ b/include/linux/platform_data/ti-sysc.h
@@ -14,6 +14,7 @@ enum ti_sysc_module_type {
 	TI_SYSC_OMAP4_SR,
 	TI_SYSC_OMAP4_MCASP,
 	TI_SYSC_OMAP4_USB_HOST_FS,
+	TI_SYSC_DRA7_MCAN,
 };
 
 struct ti_sysc_cookie {

commit e7420c2d4495cbb9c14dd8bf8b3b4e5bdded6e20
Author: Tony Lindgren <tony@atomide.com>
Date:   Mon Apr 16 10:26:46 2018 -0700

    bus: ti-sysc: Tag some modules resource providers for noirq suspend
    
    Modules that provide resources for other modules need to be suspended
    and resumed in the noirq calls. Tag the resource providing modules.
    
    Signed-off-by: Tony Lindgren <tony@atomide.com>

diff --git a/include/linux/platform_data/ti-sysc.h b/include/linux/platform_data/ti-sysc.h
index 80ce28d40832..990aad477458 100644
--- a/include/linux/platform_data/ti-sysc.h
+++ b/include/linux/platform_data/ti-sysc.h
@@ -45,6 +45,7 @@ struct sysc_regbits {
 	s8 emufree_shift;
 };
 
+#define SYSC_QUIRK_RESOURCE_PROVIDER	BIT(9)
 #define SYSC_QUIRK_LEGACY_IDLE		BIT(8)
 #define SYSC_QUIRK_RESET_STATUS		BIT(7)
 #define SYSC_QUIRK_NO_IDLE_ON_INIT	BIT(6)

commit a885f0fe209f262efa2c1cac9278a5774e5f7a80
Author: Tony Lindgren <tony@atomide.com>
Date:   Thu Feb 22 14:03:48 2018 -0800

    bus: ti-sysc: Handle some devices in omap_device compatible way
    
    Now that ti-sysc can manage child devices, we must also be backwards
    compatible with the current omap_device code. With omap_device, we
    assume that the child device manages the interconnect target module
    directly.
    
    The drivers needing special handling are the ones that still set
    pm_runtime_irq_safe(). In the long run we want to update those drivers
    as otherwise they will cause problems with genpd as a permanent PM
    runtime usage count is set on the parent device.
    
    We can handle omap_device these devices by improving the ti-sysc quirk
    handling to detect the devices needing special handling based on
    register map and revision register if usable. We also need to implement
    dev_pm_domain for these child devices just like omap_device does.
    
    Signed-off-by: Tony Lindgren <tony@atomide.com>

diff --git a/include/linux/platform_data/ti-sysc.h b/include/linux/platform_data/ti-sysc.h
index 4176cb90e195..80ce28d40832 100644
--- a/include/linux/platform_data/ti-sysc.h
+++ b/include/linux/platform_data/ti-sysc.h
@@ -45,6 +45,7 @@ struct sysc_regbits {
 	s8 emufree_shift;
 };
 
+#define SYSC_QUIRK_LEGACY_IDLE		BIT(8)
 #define SYSC_QUIRK_RESET_STATUS		BIT(7)
 #define SYSC_QUIRK_NO_IDLE_ON_INIT	BIT(6)
 #define SYSC_QUIRK_NO_RESET_ON_INIT	BIT(5)

commit ef70b0bdeaf893dd6d9c3a8d05d9b65d395506c0
Author: Tony Lindgren <tony@atomide.com>
Date:   Thu Feb 22 14:00:25 2018 -0800

    bus: ti-sysc: Add support for platform data callbacks
    
    We want to pass the device tree configuration for interconnect target
    modules from ti-sysc driver to the existing platform hwmod code.
    
    This allows us to first validate the dts data against the existing
    platform data before we start dropping the platform data in favor of
    device tree data.
    
    To do this, let's add platform data callbacks for PM runtime functions
    to call for the interconnect target modules if platform data is
    available.
    
    Note that as ti-sysc driver can rebind, omap_auxdata_lookup and related
    functions can no longer be __init.
    
    Signed-off-by: Tony Lindgren <tony@atomide.com>

diff --git a/include/linux/platform_data/ti-sysc.h b/include/linux/platform_data/ti-sysc.h
index 1be356330b96..4176cb90e195 100644
--- a/include/linux/platform_data/ti-sysc.h
+++ b/include/linux/platform_data/ti-sysc.h
@@ -16,6 +16,10 @@ enum ti_sysc_module_type {
 	TI_SYSC_OMAP4_USB_HOST_FS,
 };
 
+struct ti_sysc_cookie {
+	void *data;
+};
+
 /**
  * struct sysc_regbits - TI OCP_SYSCONFIG register field offsets
  * @midle_shift: Offset of the midle bit
@@ -83,4 +87,49 @@ struct sysc_config {
 	u32 quirks;
 };
 
+enum sysc_registers {
+	SYSC_REVISION,
+	SYSC_SYSCONFIG,
+	SYSC_SYSSTATUS,
+	SYSC_MAX_REGS,
+};
+
+/**
+ * struct ti_sysc_module_data - ti-sysc to hwmod translation data for a module
+ * @name: legacy "ti,hwmods" module name
+ * @module_pa: physical address of the interconnect target module
+ * @module_size: size of the interconnect target module
+ * @offsets: array of register offsets as listed in enum sysc_registers
+ * @nr_offsets: number of registers
+ * @cap: interconnect target module capabilities
+ * @cfg: interconnect target module configuration
+ *
+ * This data is enough to allocate a new struct omap_hwmod_class_sysconfig
+ * based on device tree data parsed by ti-sysc driver.
+ */
+struct ti_sysc_module_data {
+	const char *name;
+	u64 module_pa;
+	u32 module_size;
+	int *offsets;
+	int nr_offsets;
+	const struct sysc_capabilities *cap;
+	struct sysc_config *cfg;
+};
+
+struct device;
+
+struct ti_sysc_platform_data {
+	struct of_dev_auxdata *auxdata;
+	int (*init_module)(struct device *dev,
+			   const struct ti_sysc_module_data *data,
+			   struct ti_sysc_cookie *cookie);
+	int (*enable_module)(struct device *dev,
+			     const struct ti_sysc_cookie *cookie);
+	int (*idle_module)(struct device *dev,
+			   const struct ti_sysc_cookie *cookie);
+	int (*shutdown_module)(struct device *dev,
+			       const struct ti_sysc_cookie *cookie);
+};
+
 #endif	/* __TI_SYSC_DATA_H__ */

commit c5a2de97fbd2979fab291fb048084d3fddd322dd
Author: Tony Lindgren <tony@atomide.com>
Date:   Fri Dec 15 09:41:23 2017 -0800

    bus: ti-sysc: Add parsing of module capabilities
    
    We need to configure the interconnect target module based on the
    device three configuration.
    
    Let's also add a new quirk for SYSC_QUIRK_RESET_STATUS to indicate
    that the SYSCONFIG reset bit changes after the reset is done.
    
    Signed-off-by: Tony Lindgren <tony@atomide.com>

diff --git a/include/linux/platform_data/ti-sysc.h b/include/linux/platform_data/ti-sysc.h
index 28e5a61d4abc..1be356330b96 100644
--- a/include/linux/platform_data/ti-sysc.h
+++ b/include/linux/platform_data/ti-sysc.h
@@ -41,6 +41,7 @@ struct sysc_regbits {
 	s8 emufree_shift;
 };
 
+#define SYSC_QUIRK_RESET_STATUS		BIT(7)
 #define SYSC_QUIRK_NO_IDLE_ON_INIT	BIT(6)
 #define SYSC_QUIRK_NO_RESET_ON_INIT	BIT(5)
 #define SYSC_QUIRK_OPT_CLKS_NEEDED	BIT(4)
@@ -49,6 +50,8 @@ struct sysc_regbits {
 #define SYSC_QUIRK_UNCACHED		BIT(1)
 #define SYSC_QUIRK_USE_CLOCKACT		BIT(0)
 
+#define SYSC_NR_IDLEMODES		4
+
 /**
  * struct sysc_capabilities - capabilities for an interconnect target module
  *
@@ -65,10 +68,17 @@ struct sysc_capabilities {
 
 /**
  * struct sysc_config - configuration for an interconnect target module
+ * @sysc_val: configured value for sysc register
+ * @midlemodes: bitmask of supported master idle modes
+ * @sidlemodes: bitmask of supported master idle modes
  * @srst_udelay: optional delay needed after OCP soft reset
  * @quirks: bitmask of enabled quirks
  */
 struct sysc_config {
+	u32 sysc_val;
+	u32 syss_mask;
+	u8 midlemodes;
+	u8 sidlemodes;
 	u8 srst_udelay;
 	u32 quirks;
 };

commit 566a9b05e1fa47dcfb93a4459145d0fdc06d3046
Author: Tony Lindgren <tony@atomide.com>
Date:   Fri Dec 15 09:41:19 2017 -0800

    bus: ti-sysc: Handle module quirks based dts configuration
    
    Let's configure few module quirks via device tree using the
    properties for "ti,no-idle-on-init", "ti,no-reset-on-init"
    and "ti,sysc-delay-us".
    
    Let's also reorder the probe a bit so we have pdata available
    earlier, and move the PM runtime calls to sysc_init_module()
    from sysc_read_revision().
    
    Signed-off-by: Tony Lindgren <tony@atomide.com>

diff --git a/include/linux/platform_data/ti-sysc.h b/include/linux/platform_data/ti-sysc.h
index 059be6f6fa94..28e5a61d4abc 100644
--- a/include/linux/platform_data/ti-sysc.h
+++ b/include/linux/platform_data/ti-sysc.h
@@ -41,6 +41,10 @@ struct sysc_regbits {
 	s8 emufree_shift;
 };
 
+#define SYSC_QUIRK_NO_IDLE_ON_INIT	BIT(6)
+#define SYSC_QUIRK_NO_RESET_ON_INIT	BIT(5)
+#define SYSC_QUIRK_OPT_CLKS_NEEDED	BIT(4)
+#define SYSC_QUIRK_OPT_CLKS_IN_RESET	BIT(3)
 #define SYSC_QUIRK_16BIT		BIT(2)
 #define SYSC_QUIRK_UNCACHED		BIT(1)
 #define SYSC_QUIRK_USE_CLOCKACT		BIT(0)
@@ -61,9 +65,11 @@ struct sysc_capabilities {
 
 /**
  * struct sysc_config - configuration for an interconnect target module
+ * @srst_udelay: optional delay needed after OCP soft reset
  * @quirks: bitmask of enabled quirks
  */
 struct sysc_config {
+	u8 srst_udelay;
 	u32 quirks;
 };
 

commit a7199e2b91ded41adbb6fd384a85e358d25f48c8
Author: Tony Lindgren <tony@atomide.com>
Date:   Fri Dec 15 09:41:14 2017 -0800

    bus: ti-sysc: Detect i2c interconnect target module based on register layout
    
    We can easily detect i2c based on it's non-standard module registers that
    consist of two 32-bit registers accessed in 16-bit mode.
    
    So far we don't have other 16-bit modules, so there's currently no need
    to add a custom property for 16-bit register access.
    
    Signed-off-by: Tony Lindgren <tony@atomide.com>

diff --git a/include/linux/platform_data/ti-sysc.h b/include/linux/platform_data/ti-sysc.h
index b76ace0135b3..059be6f6fa94 100644
--- a/include/linux/platform_data/ti-sysc.h
+++ b/include/linux/platform_data/ti-sysc.h
@@ -41,6 +41,7 @@ struct sysc_regbits {
 	s8 emufree_shift;
 };
 
+#define SYSC_QUIRK_16BIT		BIT(2)
 #define SYSC_QUIRK_UNCACHED		BIT(1)
 #define SYSC_QUIRK_USE_CLOCKACT		BIT(0)
 

commit 70a65240efb1116f4f580c2f8235ba58000889b0
Author: Tony Lindgren <tony@atomide.com>
Date:   Fri Dec 15 09:41:09 2017 -0800

    bus: ti-sysc: Add register bits for interconnect target modules
    
    Let's add data for the known interconnect target module types by mapping
    their register bits.
    
    Note that we can handle many quirks for the older omap2 type1 modules
    directly in the driver without a need for adding custom properties.
    
    Signed-off-by: Tony Lindgren <tony@atomide.com>

diff --git a/include/linux/platform_data/ti-sysc.h b/include/linux/platform_data/ti-sysc.h
index 280466099b76..b76ace0135b3 100644
--- a/include/linux/platform_data/ti-sysc.h
+++ b/include/linux/platform_data/ti-sysc.h
@@ -1,6 +1,21 @@
 #ifndef __TI_SYSC_DATA_H__
 #define __TI_SYSC_DATA_H__
 
+enum ti_sysc_module_type {
+	TI_SYSC_OMAP2,
+	TI_SYSC_OMAP2_TIMER,
+	TI_SYSC_OMAP3_SHAM,
+	TI_SYSC_OMAP3_AES,
+	TI_SYSC_OMAP4,
+	TI_SYSC_OMAP4_TIMER,
+	TI_SYSC_OMAP4_SIMPLE,
+	TI_SYSC_OMAP34XX_SR,
+	TI_SYSC_OMAP36XX_SR,
+	TI_SYSC_OMAP4_SR,
+	TI_SYSC_OMAP4_MCASP,
+	TI_SYSC_OMAP4_USB_HOST_FS,
+};
+
 /**
  * struct sysc_regbits - TI OCP_SYSCONFIG register field offsets
  * @midle_shift: Offset of the midle bit
@@ -26,4 +41,29 @@ struct sysc_regbits {
 	s8 emufree_shift;
 };
 
+#define SYSC_QUIRK_UNCACHED		BIT(1)
+#define SYSC_QUIRK_USE_CLOCKACT		BIT(0)
+
+/**
+ * struct sysc_capabilities - capabilities for an interconnect target module
+ *
+ * @sysc_mask: bitmask of supported SYSCONFIG register bits
+ * @regbits: bitmask of SYSCONFIG register bits
+ * @mod_quirks: bitmask of module specific quirks
+ */
+struct sysc_capabilities {
+	const enum ti_sysc_module_type type;
+	const u32 sysc_mask;
+	const struct sysc_regbits *regbits;
+	const u32 mod_quirks;
+};
+
+/**
+ * struct sysc_config - configuration for an interconnect target module
+ * @quirks: bitmask of enabled quirks
+ */
+struct sysc_config {
+	u32 quirks;
+};
+
 #endif	/* __TI_SYSC_DATA_H__ */

commit 49a0a3d805df3b7b4f8a04db6dbf55aa36fd762c
Author: Tony Lindgren <tony@atomide.com>
Date:   Fri Dec 15 09:41:05 2017 -0800

    bus: ti-sysc: Make omap_hwmod_sysc_fields into sysc_regbits platform data
    
    We want to be able to configure hwmod sysc data from ti-sysc driver using
    platform data callbacks. So let's make struct omap_hwmod_sysc_fields into
    struct sysc_data and have it available for both ti-sysc driver and hwmod
    code.
    
    Note that we can make it use s8 instead of u8 as the hwmod code uses the
    feature flags to check for this field. However, for ti-sysc we can use
    -ENODEV to indicate a feature is not supported in the hardware and can
    simplify the code that way.
    
    And let's add also emufree_shift as the dts files will be describing the
    hardware for the SYSCONFIG register capbilities mask.
    
    Cc: Paul Walmsley <paul@pwsan.com>
    Signed-off-by: Tony Lindgren <tony@atomide.com>

diff --git a/include/linux/platform_data/ti-sysc.h b/include/linux/platform_data/ti-sysc.h
new file mode 100644
index 000000000000..280466099b76
--- /dev/null
+++ b/include/linux/platform_data/ti-sysc.h
@@ -0,0 +1,29 @@
+#ifndef __TI_SYSC_DATA_H__
+#define __TI_SYSC_DATA_H__
+
+/**
+ * struct sysc_regbits - TI OCP_SYSCONFIG register field offsets
+ * @midle_shift: Offset of the midle bit
+ * @clkact_shift: Offset of the clockactivity bit
+ * @sidle_shift: Offset of the sidle bit
+ * @enwkup_shift: Offset of the enawakeup bit
+ * @srst_shift: Offset of the softreset bit
+ * @autoidle_shift: Offset of the autoidle bit
+ * @dmadisable_shift: Offset of the dmadisable bit
+ * @emufree_shift; Offset of the emufree bit
+ *
+ * Note that 0 is a valid shift, and for ti-sysc.c -ENODEV can be used if a
+ * feature is not available.
+ */
+struct sysc_regbits {
+	s8 midle_shift;
+	s8 clkact_shift;
+	s8 sidle_shift;
+	s8 enwkup_shift;
+	s8 srst_shift;
+	s8 autoidle_shift;
+	s8 dmadisable_shift;
+	s8 emufree_shift;
+};
+
+#endif	/* __TI_SYSC_DATA_H__ */
