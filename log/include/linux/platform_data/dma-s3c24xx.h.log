commit 2874c5fd284268364ece81a7bd936f3c8168e567
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Mon May 27 08:55:01 2019 +0200

    treewide: Replace GPLv2 boilerplate/reference with SPDX - rule 152
    
    Based on 1 normalized pattern(s):
    
      this program is free software you can redistribute it and or modify
      it under the terms of the gnu general public license as published by
      the free software foundation either version 2 of the license or at
      your option any later version
    
    extracted by the scancode license scanner the SPDX license identifier
    
      GPL-2.0-or-later
    
    has been chosen to replace the boilerplate/reference in 3029 file(s).
    
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Reviewed-by: Allison Randal <allison@lohutok.net>
    Cc: linux-spdx@vger.kernel.org
    Link: https://lkml.kernel.org/r/20190527070032.746973796@linutronix.de
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/include/linux/platform_data/dma-s3c24xx.h b/include/linux/platform_data/dma-s3c24xx.h
index 4f9aba405e96..96d02dbeea67 100644
--- a/include/linux/platform_data/dma-s3c24xx.h
+++ b/include/linux/platform_data/dma-s3c24xx.h
@@ -1,12 +1,8 @@
+/* SPDX-License-Identifier: GPL-2.0-or-later */
 /*
  * S3C24XX DMA handling
  *
  * Copyright (c) 2013 Heiko Stuebner <heiko@sntech.de>
- *
- * This program is free software; you can redistribute it and/or modify it
- * under the terms of the GNU General Public License as published by the Free
- * Software Foundation; either version 2 of the License, or (at your option)
- * any later version.
  */
 
 /* Helper to encode the source selection constraints for early s3c socs. */

commit 34681d84a0f7cc22ded1413dc79eef8a2f23d9c3
Author: Sam Van Den Berge <sam.van.den.berge@telenet.be>
Date:   Thu Sep 22 20:51:15 2016 +0200

    dmaengine: s3c24xx: Add dma_slave_map for s3c2440 devices
    
    This patch updates the s3c24xx dma driver to be able to pass a
    dma_slave_map array via the platform data. This is needed to
    be able to use the new, simpler dmaengine API [1].
    I used the virtual DMA channels as a parameter for the dma_filter
    function. By doing that, I could reuse the existing filter function in
    drivers/dma/s3c24xx-dma.c.
    
    I have tested this on my mini2440 board with the audio driver.
    According to my observations, dma_request_slave_channel in the
    function dmaengine_pcm_new in the file
    sound/soc/soc-generic-dmaengine-pcm.c now returns a valid DMA channel
    whereas before no DMA channel was returned at that point.
    
    Entries for DMACH_XD0, DMACH_XD1 and DMACH_TIMER are missing because I
    don't realy know which driver to use for these.
    
    [1]
    http://lists.infradead.org/pipermail/linux-arm-kernel/2015-December/393635.html
    
    Signed-off-by: Sam Van Den Berge <sam.van.den.berge@telenet.be>
    Reviewed-by: Sylwester Nawrocki <s.nawrocki@samsung.com>
    Acked-by: Arnd Bergmann <arnd@arndb.de>
    Acked-by: Krzysztof Kozlowski <krzk@kernel.org>
    Signed-off-by: Vinod Koul <vinod.koul@intel.com>

diff --git a/include/linux/platform_data/dma-s3c24xx.h b/include/linux/platform_data/dma-s3c24xx.h
index 89ba1b0c90e4..4f9aba405e96 100644
--- a/include/linux/platform_data/dma-s3c24xx.h
+++ b/include/linux/platform_data/dma-s3c24xx.h
@@ -30,16 +30,22 @@ struct s3c24xx_dma_channel {
 	u16 chansel;
 };
 
+struct dma_slave_map;
+
 /**
  * struct s3c24xx_dma_platdata - platform specific settings
  * @num_phy_channels: number of physical channels
  * @channels: array of virtual channel descriptions
  * @num_channels: number of virtual channels
+ * @slave_map: dma slave map matching table
+ * @slavecnt: number of elements in slave_map
  */
 struct s3c24xx_dma_platdata {
 	int num_phy_channels;
 	struct s3c24xx_dma_channel *channels;
 	int num_channels;
+	const struct dma_slave_map *slave_map;
+	int slavecnt;
 };
 
 struct dma_chan;

commit 1fecf8958eb7f90791f2c7e99afac393b64fa976
Author: Heiko Stuebner <heiko@sntech.de>
Date:   Mon Oct 21 05:32:48 2013 +0900

    ARM: S3C24XX: add dma pdata for s3c2410, s3c2440 and s3c2442
    
    s3c2410 and s3c2442 share the same dma channels while s3c2440 has
    slight differences. But on all three the reachable sources per dma
    channel has constraints attached and thus encodes the usable
    combinations using the S3C24XX_DMA_CHANREQ macro.
    
    This also fixes the warning about s3c2410_dma_resource being unused
    as reported by Olof Johansson.
    
    Reported-by: Olof Johansson <olof@lixom.net>
    Signed-off-by: Heiko Stuebner <heiko@sntech.de>
    Reviewed-by: Tomasz Figa <t.figa@samsung.com>
    Signed-off-by: Kukjin Kim <kgene.kim@samsung.com>

diff --git a/include/linux/platform_data/dma-s3c24xx.h b/include/linux/platform_data/dma-s3c24xx.h
index 5a0cfffe3bbb..89ba1b0c90e4 100644
--- a/include/linux/platform_data/dma-s3c24xx.h
+++ b/include/linux/platform_data/dma-s3c24xx.h
@@ -9,6 +9,9 @@
  * any later version.
  */
 
+/* Helper to encode the source selection constraints for early s3c socs. */
+#define S3C24XX_DMA_CHANREQ(src, chan)	((BIT(3) | src) << chan * 4)
+
 enum s3c24xx_dma_bus {
 	S3C24XX_DMA_APB,
 	S3C24XX_DMA_AHB,

commit ddeccb8d6b5bbe2c1e3a29f8c74b52f170c2207d
Author: Heiko Stuebner <heiko@sntech.de>
Date:   Tue Oct 8 06:42:10 2013 +0900

    dmaengine: add driver for Samsung s3c24xx SoCs
    
    This adds a new driver to support the s3c24xx dma using the dmaengine
    and makes the old one in mach-s3c24xx obsolete in the long run.
    
    Conceptually the s3c24xx-dma feels like a distant relative of the pl08x
    with numerous virtual channels being mapped to a lot less physical ones.
    The driver therefore borrows a lot from the amba-pl08x driver in this
    regard. Functionality-wise the driver gains a memcpy ability in addition
    to the slave_sg one.
    
    The driver supports both the method for requesting the peripheral used
    by SoCs before the S3C2443 and the different method for S3C2443 and later.
    
    On earlier SoCs the hardware channels usable for specific peripherals is
    constrainted while on later SoCs all channels can be used for any peripheral.
    
    Tested on a s3c2416-based board, memcpy using the dmatest module and
    slave_sg partially using the spi-s3c64xx driver.
    
    Signed-off-by: Heiko Stuebner <heiko@sntech.de>
    Acked-by: Linus Walleij <linus.walleij@linaro.org>
    Acked-by: Vinod Koul <vinod.koul@intel.com>
    Signed-off-by: Kukjin Kim <kgene.kim@samsung.com>

diff --git a/include/linux/platform_data/dma-s3c24xx.h b/include/linux/platform_data/dma-s3c24xx.h
new file mode 100644
index 000000000000..5a0cfffe3bbb
--- /dev/null
+++ b/include/linux/platform_data/dma-s3c24xx.h
@@ -0,0 +1,43 @@
+/*
+ * S3C24XX DMA handling
+ *
+ * Copyright (c) 2013 Heiko Stuebner <heiko@sntech.de>
+ *
+ * This program is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License as published by the Free
+ * Software Foundation; either version 2 of the License, or (at your option)
+ * any later version.
+ */
+
+enum s3c24xx_dma_bus {
+	S3C24XX_DMA_APB,
+	S3C24XX_DMA_AHB,
+};
+
+/**
+ * @bus: on which bus does the peripheral reside - AHB or APB.
+ * @handshake: is a handshake with the peripheral necessary
+ * @chansel: channel selection information, depending on variant; reqsel for
+ *	     s3c2443 and later and channel-selection map for earlier SoCs
+ *	     see CHANSEL doc in s3c2443-dma.c
+ */
+struct s3c24xx_dma_channel {
+	enum s3c24xx_dma_bus bus;
+	bool handshake;
+	u16 chansel;
+};
+
+/**
+ * struct s3c24xx_dma_platdata - platform specific settings
+ * @num_phy_channels: number of physical channels
+ * @channels: array of virtual channel descriptions
+ * @num_channels: number of virtual channels
+ */
+struct s3c24xx_dma_platdata {
+	int num_phy_channels;
+	struct s3c24xx_dma_channel *channels;
+	int num_channels;
+};
+
+struct dma_chan;
+bool s3c24xx_dma_filter(struct dma_chan *chan, void *param);
