commit ffbf23d50353915dc2622a3b7b4ddc678165f92d
Author: Daniel Baluta <daniel.baluta@nxp.com>
Date:   Thu Aug 1 12:56:36 2019 +0300

    firmware: imx: Add DSP IPC protocol interface
    
    Some of i.MX8 processors (e.g i.MX8QM, i.MX8QXP) contain
    the Tensilica HiFi4 DSP for advanced pre- and post-audio
    processing.
    
    The communication between Host CPU and DSP firmware is
    taking place using a shared memory area for message passing
    and a dedicated Messaging Unit for notifications.
    
    DSP IPC protocol offers a doorbell interface using
    imx-mailbox API.
    
    We use 4 MU channels (2 x TXDB, 2 x RXDB) to implement a
    request-reply protocol.
    
    Connection 0 (txdb0, rxdb0):
            - Host writes messasge to shared memory [SHMEM]
            - Host sends a request [MU]
            - DSP handles request [SHMEM]
            - DSP sends reply [MU]
    
    Connection 1 (txdb1, rxdb1):
            - DSP writes a message to shared memory [SHMEM]
            - DSP sends a request [MU]
            - Host handles request [SHMEM]
            - Host sends reply [MU]
    
    The protocol interface will be used by a Host client to
    communicate with the DSP. First client will be the i.MX8
    part from Sound Open Firmware infrastructure.
    
    The protocol offers the following interface:
    
    On Tx:
       - imx_dsp_ring_doorbell, will be called to notify the DSP
       that it needs to handle a request.
    
    On Rx:
       - clients need to provide two callbacks:
            .handle_reply
            .handle_request
      - the callbacks will be used by the protocol on
        notification arrival from DSP.
    
    Signed-off-by: Daniel Baluta <daniel.baluta@nxp.com>
    Reviewed-by: Oleksij Rempel <o.rempel@pengutronix.de>
    Signed-off-by: Shawn Guo <shawnguo@kernel.org>

diff --git a/include/linux/firmware/imx/dsp.h b/include/linux/firmware/imx/dsp.h
new file mode 100644
index 000000000000..7562099c9e46
--- /dev/null
+++ b/include/linux/firmware/imx/dsp.h
@@ -0,0 +1,67 @@
+/* SPDX-License-Identifier: GPL-2.0+ */
+/*
+ * Copyright 2019 NXP
+ *
+ * Header file for the DSP IPC implementation
+ */
+
+#ifndef _IMX_DSP_IPC_H
+#define _IMX_DSP_IPC_H
+
+#include <linux/device.h>
+#include <linux/types.h>
+#include <linux/mailbox_client.h>
+
+#define DSP_MU_CHAN_NUM		4
+
+struct imx_dsp_chan {
+	struct imx_dsp_ipc *ipc;
+	struct mbox_client cl;
+	struct mbox_chan *ch;
+	char *name;
+	int idx;
+};
+
+struct imx_dsp_ops {
+	void (*handle_reply)(struct imx_dsp_ipc *ipc);
+	void (*handle_request)(struct imx_dsp_ipc *ipc);
+};
+
+struct imx_dsp_ipc {
+	/* Host <-> DSP communication uses 2 txdb and 2 rxdb channels */
+	struct imx_dsp_chan chans[DSP_MU_CHAN_NUM];
+	struct device *dev;
+	struct imx_dsp_ops *ops;
+	void *private_data;
+};
+
+static inline void imx_dsp_set_data(struct imx_dsp_ipc *ipc, void *data)
+{
+	if (!ipc)
+		return;
+
+	ipc->private_data = data;
+}
+
+static inline void *imx_dsp_get_data(struct imx_dsp_ipc *ipc)
+{
+	if (!ipc)
+		return NULL;
+
+	return ipc->private_data;
+}
+
+#if IS_ENABLED(CONFIG_IMX_DSP)
+
+int imx_dsp_ring_doorbell(struct imx_dsp_ipc *dsp, unsigned int chan_idx);
+
+#else
+
+static inline int imx_dsp_ring_doorbell(struct imx_dsp_ipc *ipc,
+					unsigned int chan_idx)
+{
+	return -ENOTSUPP;
+}
+
+#endif
+#endif /* _IMX_DSP_IPC_H */
