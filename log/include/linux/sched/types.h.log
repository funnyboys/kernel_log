commit 11b8462f7e1d25f639c88949a2746a9c2667a766
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Wed Aug 21 21:09:07 2019 +0200

    posix-cpu-timers: Provide array based access to expiry cache
    
    Using struct task_cputime for the expiry cache is a pretty odd choice and
    comes with magic defines to rename the fields for usage in the expiry
    cache.
    
    struct task_cputime is basically a u64 array with 3 members, but it has
    distinct members.
    
    The expiry cache content is different than the content of task_cputime
    because
    
      expiry[PROF]  = task_cputime.stime + task_cputime.utime
      expiry[VIRT]  = task_cputime.utime
      expiry[SCHED] = task_cputime.sum_exec_runtime
    
    So there is no direct mapping between task_cputime and the expiry cache and
    the #define based remapping is just a horrible hack.
    
    Having the expiry cache array based allows further simplification of the
    expiry code.
    
    To avoid an all in one cleanup which is hard to review add a temporary
    anonymous union into struct task_cputime which allows array based access to
    it. That requires to reorder the members. Add a build time sanity check to
    validate that the members are at the same place.
    
    The union and the build time checks will be removed after conversion.
    
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Reviewed-by: Frederic Weisbecker <frederic@kernel.org>
    Link: https://lkml.kernel.org/r/20190821192921.105793824@linutronix.de

diff --git a/include/linux/sched/types.h b/include/linux/sched/types.h
index 2c5c28ddd9b2..3c3e049224ae 100644
--- a/include/linux/sched/types.h
+++ b/include/linux/sched/types.h
@@ -6,8 +6,8 @@
 
 /**
  * struct task_cputime - collected CPU time counts
- * @utime:		time spent in user mode, in nanoseconds
  * @stime:		time spent in kernel mode, in nanoseconds
+ * @utime:		time spent in user mode, in nanoseconds
  * @sum_exec_runtime:	total time spent on the CPU, in nanoseconds
  *
  * This structure groups together three kinds of CPU time that are tracked for
@@ -15,8 +15,8 @@
  * these counts together and treat all three of them in parallel.
  */
 struct task_cputime {
-	u64				utime;
 	u64				stime;
+	u64				utime;
 	unsigned long long		sum_exec_runtime;
 };
 

commit 9eacb5c7e6607aba00a7322b21cad83fc8b101c8
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Wed Aug 21 21:09:05 2019 +0200

    sched: Move struct task_cputime to types.h
    
    For upcoming posix-timer changes to avoid include recursion hell.
    
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Link: https://lkml.kernel.org/r/20190821192920.909530418@linutronix.de

diff --git a/include/linux/sched/types.h b/include/linux/sched/types.h
new file mode 100644
index 000000000000..2c5c28ddd9b2
--- /dev/null
+++ b/include/linux/sched/types.h
@@ -0,0 +1,23 @@
+/* SPDX-License-Identifier: GPL-2.0 */
+#ifndef _LINUX_SCHED_TYPES_H
+#define _LINUX_SCHED_TYPES_H
+
+#include <linux/types.h>
+
+/**
+ * struct task_cputime - collected CPU time counts
+ * @utime:		time spent in user mode, in nanoseconds
+ * @stime:		time spent in kernel mode, in nanoseconds
+ * @sum_exec_runtime:	total time spent on the CPU, in nanoseconds
+ *
+ * This structure groups together three kinds of CPU time that are tracked for
+ * threads and thread groups.  Most things considering CPU time want to group
+ * these counts together and treat all three of them in parallel.
+ */
+struct task_cputime {
+	u64				utime;
+	u64				stime;
+	unsigned long long		sum_exec_runtime;
+};
+
+#endif
