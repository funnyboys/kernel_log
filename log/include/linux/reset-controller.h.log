commit ec939e4c94bd3ef2fd4f34c15f8aaf79bd0c5ee1
Merge: 38206c24ab09 3f6939aec712
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Thu Dec 5 11:43:31 2019 -0800

    Merge tag 'armsoc-drivers' of git://git.kernel.org/pub/scm/linux/kernel/git/soc/soc
    
    Pull ARM SoC driver updates from Olof Johansson:
     "Various driver updates for platforms:
    
       - A larger set of work on Tegra 2/3 around memory controller and
         regulator features, some fuse cleanups, etc..
    
       - MMP platform drivers, in particular for USB PHY, and other smaller
         additions.
    
       - Samsung Exynos 5422 driver for DMC (dynamic memory configuration),
         and ASV (adaptive voltage), allowing the platform to run at more
         optimal operating points.
    
       - Misc refactorings and support for RZ/G2N and R8A774B1 from Renesas
    
       - Clock/reset control driver for TI/OMAP
    
       - Meson-A1 reset controller support
    
       - Qualcomm sdm845 and sda845 SoC IDs for socinfo"
    
    * tag 'armsoc-drivers' of git://git.kernel.org/pub/scm/linux/kernel/git/soc/soc: (150 commits)
      firmware: arm_scmi: Fix doorbell ring logic for !CONFIG_64BIT
      soc: fsl: add RCPM driver
      dt-bindings: fsl: rcpm: Add 'little-endian' and update Chassis definition
      memory: tegra: Consolidate registers definition into common header
      memory: tegra: Ensure timing control debug features are disabled
      memory: tegra: Introduce Tegra30 EMC driver
      memory: tegra: Do not handle error from wait_for_completion_timeout()
      memory: tegra: Increase handshake timeout on Tegra20
      memory: tegra: Print a brief info message about EMC timings
      memory: tegra: Pre-configure debug register on Tegra20
      memory: tegra: Include io.h instead of iopoll.h
      memory: tegra: Adapt for Tegra20 clock driver changes
      memory: tegra: Don't set EMC rate to maximum on probe for Tegra20
      memory: tegra: Add gr2d and gr3d to DRM IOMMU group
      memory: tegra: Set DMA mask based on supported address bits
      soc: at91: Add Atmel SFR SN (Serial Number) support
      memory: atmel-ebi: switch to SPDX license identifiers
      memory: atmel-ebi: move NUM_CS definition inside EBI driver
      soc: mediatek: Refactor bus protection control
      soc: mediatek: Refactor sram control
      ...

commit f430c7ed8bc22992ed528b518da465b060b9223f
Author: Randy Dunlap <rdunlap@infradead.org>
Date:   Tue Oct 22 20:57:06 2019 -0700

    reset: fix reset_control_ops kerneldoc comment
    
    Add a missing short description to the reset_control_ops documentation.
    
    Signed-off-by: Randy Dunlap <rdunlap@infradead.org>
    [p.zabel@pengutronix.de: rebased and updated commit message]
    Signed-off-by: Philipp Zabel <p.zabel@pengutronix.de>

diff --git a/include/linux/reset-controller.h b/include/linux/reset-controller.h
index 984f625d5593..eaae6b4e9f24 100644
--- a/include/linux/reset-controller.h
+++ b/include/linux/reset-controller.h
@@ -7,7 +7,7 @@
 struct reset_controller_dev;
 
 /**
- * struct reset_control_ops
+ * struct reset_control_ops - reset controller driver callbacks
  *
  * @reset: for self-deasserting resets, does all necessary
  *         things to reset the device

commit a48108c0c20f02485b8cc3ca83652a55a0f5e47f
Author: Philipp Zabel <p.zabel@pengutronix.de>
Date:   Tue Oct 22 16:51:37 2019 +0200

    reset: improve of_xlate documentation
    
    Mention of_reset_simple_xlate as the default if of_xlate is not set.
    
    Signed-off-by: Philipp Zabel <p.zabel@pengutronix.de>

diff --git a/include/linux/reset-controller.h b/include/linux/reset-controller.h
index 9326d671b6e6..8d35753d419e 100644
--- a/include/linux/reset-controller.h
+++ b/include/linux/reset-controller.h
@@ -62,7 +62,8 @@ struct reset_control_lookup {
  * @of_node: corresponding device tree node as phandle target
  * @of_reset_n_cells: number of cells in reset line specifiers
  * @of_xlate: translation function to translate from specifier as found in the
- *            device tree to id as given to the reset control ops
+ *            device tree to id as given to the reset control ops, defaults
+ *            to :c:func:`of_reset_simple_xlate`.
  * @nr_resets: number of reset controls in this reset controller device
  */
 struct reset_controller_dev {

commit ed713ce242545388849e411da24cd72c15b2e8e6
Author: Philipp Zabel <p.zabel@pengutronix.de>
Date:   Tue Oct 22 16:11:54 2019 +0200

    reset: fix reset_control_lookup kerneldoc comment
    
    Add a missing colon to fix a documentation build warning:
    
      ./include/linux/reset-controller.h:45: warning: Function parameter or member 'con_id' not described in 'reset_control_lookup'
    
    Fixes: 6691dffab0ab ("reset: add support for non-DT systems")
    Signed-off-by: Philipp Zabel <p.zabel@pengutronix.de>

diff --git a/include/linux/reset-controller.h b/include/linux/reset-controller.h
index 9326d671b6e6..984f625d5593 100644
--- a/include/linux/reset-controller.h
+++ b/include/linux/reset-controller.h
@@ -33,7 +33,7 @@ struct of_phandle_args;
  * @provider: name of the reset controller device controlling this reset line
  * @index: ID of the reset controller in the reset controller device
  * @dev_id: name of the device associated with this reset line
- * @con_id name of the reset line (can be NULL)
+ * @con_id: name of the reset line (can be NULL)
  */
 struct reset_control_lookup {
 	struct list_head list;

commit e2749bb998701e21cdb8b34486b82fc1c051ab41
Author: Bartosz Golaszewski <bgolaszewski@baylibre.com>
Date:   Fri Mar 23 14:04:48 2018 +0100

    reset: modify the way reset lookup works for board files
    
    Commit 7af1bb19f1d7 ("reset: add support for non-DT systems")
    introduced reset control lookup mechanism for boards that still use
    board files.
    
    The routine used to register lookup entries takes the corresponding
    reset_controlled_dev structure as argument.
    
    It's been determined however that for the first user of this new
    interface - davinci psc driver - it will be easier to register the
    lookup entries using the reset controller device name.
    
    This patch changes the way lookup entries are added.
    
    Signed-off-by: Bartosz Golaszewski <bgolaszewski@baylibre.com>
    [p.zabel@pengutronix.de: added missing ERR_PTR]
    Signed-off-by: Philipp Zabel <p.zabel@pengutronix.de>

diff --git a/include/linux/reset-controller.h b/include/linux/reset-controller.h
index 25698f6c1fae..9326d671b6e6 100644
--- a/include/linux/reset-controller.h
+++ b/include/linux/reset-controller.h
@@ -30,24 +30,25 @@ struct of_phandle_args;
  * struct reset_control_lookup - represents a single lookup entry
  *
  * @list: internal list of all reset lookup entries
- * @rcdev: reset controller device controlling this reset line
+ * @provider: name of the reset controller device controlling this reset line
  * @index: ID of the reset controller in the reset controller device
  * @dev_id: name of the device associated with this reset line
  * @con_id name of the reset line (can be NULL)
  */
 struct reset_control_lookup {
 	struct list_head list;
-	struct reset_controller_dev *rcdev;
+	const char *provider;
 	unsigned int index;
 	const char *dev_id;
 	const char *con_id;
 };
 
-#define RESET_LOOKUP(_dev_id, _con_id, _index)				\
+#define RESET_LOOKUP(_provider, _index, _dev_id, _con_id)		\
 	{								\
+		.provider = _provider,					\
+		.index = _index,					\
 		.dev_id = _dev_id,					\
 		.con_id = _con_id,					\
-		.index = _index,					\
 	}
 
 /**
@@ -57,6 +58,7 @@ struct reset_control_lookup {
  * @owner: kernel module of the reset controller driver
  * @list: internal list of reset controller devices
  * @reset_control_head: head of internal list of requested reset controls
+ * @dev: corresponding driver model device struct
  * @of_node: corresponding device tree node as phandle target
  * @of_reset_n_cells: number of cells in reset line specifiers
  * @of_xlate: translation function to translate from specifier as found in the
@@ -68,6 +70,7 @@ struct reset_controller_dev {
 	struct module *owner;
 	struct list_head list;
 	struct list_head reset_control_head;
+	struct device *dev;
 	struct device_node *of_node;
 	int of_reset_n_cells;
 	int (*of_xlate)(struct reset_controller_dev *rcdev,
@@ -82,8 +85,7 @@ struct device;
 int devm_reset_controller_register(struct device *dev,
 				   struct reset_controller_dev *rcdev);
 
-void reset_controller_add_lookup(struct reset_controller_dev *rcdev,
-				 struct reset_control_lookup *lookup,
+void reset_controller_add_lookup(struct reset_control_lookup *lookup,
 				 unsigned int num_entries);
 
 #endif

commit 6691dffab0ab6301bb7b489b1dcf9f5efdef202f
Author: Bartosz Golaszewski <bgolaszewski@baylibre.com>
Date:   Wed Feb 28 14:08:57 2018 +0100

    reset: add support for non-DT systems
    
    The reset framework only supports device-tree. There are some platforms
    however, which need to use it even in legacy, board-file based mode.
    
    An example of such architecture is the DaVinci family of SoCs which
    supports both device tree and legacy boot modes and we don't want to
    introduce any regressions.
    
    We're currently working on converting the platform from its hand-crafted
    clock API to using the common clock framework. Part of the overhaul will
    be representing the chip's power sleep controller's reset lines using
    the reset framework.
    
    This changeset extends the core reset code with a new reset lookup
    entry structure. It contains data allowing the reset core to associate
    reset lines with devices by comparing the dev_id and con_id strings.
    
    It also provides a function allowing drivers to register lookup entries
    with the framework.
    
    The new lookup function is only called as a fallback in case the
    of_node field is NULL and doesn't change anything for current users.
    
    Tested with a dummy reset driver with several lookup entries.
    
    An example lookup table registration from a driver can be found below:
    
    static struct reset_control_lookup foobar_reset_lookup[] = {
            RESET_LOOKUP("foo.0", "foo", 15),
            RESET_LOOKUP("bar.0", NULL,   5),
    };
    
    foobar_probe()
    {
    ...
    
            reset_controller_add_lookup(&rcdev, foobar_reset_lookup,
                                        ARRAY_SIZE(foobar_reset_lookup));
    
    ...
    }
    
    Cc: Sekhar Nori <nsekhar@ti.com>
    Cc: Kevin Hilman <khilman@baylibre.com>
    Cc: David Lechner <david@lechnology.com>
    Signed-off-by: Bartosz Golaszewski <bgolaszewski@baylibre.com>
    Signed-off-by: Philipp Zabel <p.zabel@pengutronix.de>

diff --git a/include/linux/reset-controller.h b/include/linux/reset-controller.h
index adb88f8cefbc..25698f6c1fae 100644
--- a/include/linux/reset-controller.h
+++ b/include/linux/reset-controller.h
@@ -26,6 +26,30 @@ struct module;
 struct device_node;
 struct of_phandle_args;
 
+/**
+ * struct reset_control_lookup - represents a single lookup entry
+ *
+ * @list: internal list of all reset lookup entries
+ * @rcdev: reset controller device controlling this reset line
+ * @index: ID of the reset controller in the reset controller device
+ * @dev_id: name of the device associated with this reset line
+ * @con_id name of the reset line (can be NULL)
+ */
+struct reset_control_lookup {
+	struct list_head list;
+	struct reset_controller_dev *rcdev;
+	unsigned int index;
+	const char *dev_id;
+	const char *con_id;
+};
+
+#define RESET_LOOKUP(_dev_id, _con_id, _index)				\
+	{								\
+		.dev_id = _dev_id,					\
+		.con_id = _con_id,					\
+		.index = _index,					\
+	}
+
 /**
  * struct reset_controller_dev - reset controller entity that might
  *                               provide multiple reset controls
@@ -58,4 +82,8 @@ struct device;
 int devm_reset_controller_register(struct device *dev,
 				   struct reset_controller_dev *rcdev);
 
+void reset_controller_add_lookup(struct reset_controller_dev *rcdev,
+				 struct reset_control_lookup *lookup,
+				 unsigned int num_entries);
+
 #endif

commit b24413180f5600bcb3bb70fbed5cf186b60864bd
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Wed Nov 1 15:07:57 2017 +0100

    License cleanup: add SPDX GPL-2.0 license identifier to files with no license
    
    Many source files in the tree are missing licensing information, which
    makes it harder for compliance tools to determine the correct license.
    
    By default all files without license information are under the default
    license of the kernel, which is GPL version 2.
    
    Update the files which contain no license information with the 'GPL-2.0'
    SPDX license identifier.  The SPDX identifier is a legally binding
    shorthand, which can be used instead of the full boiler plate text.
    
    This patch is based on work done by Thomas Gleixner and Kate Stewart and
    Philippe Ombredanne.
    
    How this work was done:
    
    Patches were generated and checked against linux-4.14-rc6 for a subset of
    the use cases:
     - file had no licensing information it it.
     - file was a */uapi/* one with no licensing information in it,
     - file was a */uapi/* one with existing licensing information,
    
    Further patches will be generated in subsequent months to fix up cases
    where non-standard license headers were used, and references to license
    had to be inferred by heuristics based on keywords.
    
    The analysis to determine which SPDX License Identifier to be applied to
    a file was done in a spreadsheet of side by side results from of the
    output of two independent scanners (ScanCode & Windriver) producing SPDX
    tag:value files created by Philippe Ombredanne.  Philippe prepared the
    base worksheet, and did an initial spot review of a few 1000 files.
    
    The 4.13 kernel was the starting point of the analysis with 60,537 files
    assessed.  Kate Stewart did a file by file comparison of the scanner
    results in the spreadsheet to determine which SPDX license identifier(s)
    to be applied to the file. She confirmed any determination that was not
    immediately clear with lawyers working with the Linux Foundation.
    
    Criteria used to select files for SPDX license identifier tagging was:
     - Files considered eligible had to be source code files.
     - Make and config files were included as candidates if they contained >5
       lines of source
     - File already had some variant of a license header in it (even if <5
       lines).
    
    All documentation files were explicitly excluded.
    
    The following heuristics were used to determine which SPDX license
    identifiers to apply.
    
     - when both scanners couldn't find any license traces, file was
       considered to have no license information in it, and the top level
       COPYING file license applied.
    
       For non */uapi/* files that summary was:
    
       SPDX license identifier                            # files
       ---------------------------------------------------|-------
       GPL-2.0                                              11139
    
       and resulted in the first patch in this series.
    
       If that file was a */uapi/* path one, it was "GPL-2.0 WITH
       Linux-syscall-note" otherwise it was "GPL-2.0".  Results of that was:
    
       SPDX license identifier                            # files
       ---------------------------------------------------|-------
       GPL-2.0 WITH Linux-syscall-note                        930
    
       and resulted in the second patch in this series.
    
     - if a file had some form of licensing information in it, and was one
       of the */uapi/* ones, it was denoted with the Linux-syscall-note if
       any GPL family license was found in the file or had no licensing in
       it (per prior point).  Results summary:
    
       SPDX license identifier                            # files
       ---------------------------------------------------|------
       GPL-2.0 WITH Linux-syscall-note                       270
       GPL-2.0+ WITH Linux-syscall-note                      169
       ((GPL-2.0 WITH Linux-syscall-note) OR BSD-2-Clause)    21
       ((GPL-2.0 WITH Linux-syscall-note) OR BSD-3-Clause)    17
       LGPL-2.1+ WITH Linux-syscall-note                      15
       GPL-1.0+ WITH Linux-syscall-note                       14
       ((GPL-2.0+ WITH Linux-syscall-note) OR BSD-3-Clause)    5
       LGPL-2.0+ WITH Linux-syscall-note                       4
       LGPL-2.1 WITH Linux-syscall-note                        3
       ((GPL-2.0 WITH Linux-syscall-note) OR MIT)              3
       ((GPL-2.0 WITH Linux-syscall-note) AND MIT)             1
    
       and that resulted in the third patch in this series.
    
     - when the two scanners agreed on the detected license(s), that became
       the concluded license(s).
    
     - when there was disagreement between the two scanners (one detected a
       license but the other didn't, or they both detected different
       licenses) a manual inspection of the file occurred.
    
     - In most cases a manual inspection of the information in the file
       resulted in a clear resolution of the license that should apply (and
       which scanner probably needed to revisit its heuristics).
    
     - When it was not immediately clear, the license identifier was
       confirmed with lawyers working with the Linux Foundation.
    
     - If there was any question as to the appropriate license identifier,
       the file was flagged for further research and to be revisited later
       in time.
    
    In total, over 70 hours of logged manual review was done on the
    spreadsheet to determine the SPDX license identifiers to apply to the
    source files by Kate, Philippe, Thomas and, in some cases, confirmation
    by lawyers working with the Linux Foundation.
    
    Kate also obtained a third independent scan of the 4.13 code base from
    FOSSology, and compared selected files where the other two scanners
    disagreed against that SPDX file, to see if there was new insights.  The
    Windriver scanner is based on an older version of FOSSology in part, so
    they are related.
    
    Thomas did random spot checks in about 500 files from the spreadsheets
    for the uapi headers and agreed with SPDX license identifier in the
    files he inspected. For the non-uapi files Thomas did random spot checks
    in about 15000 files.
    
    In initial set of patches against 4.14-rc6, 3 files were found to have
    copy/paste license identifier errors, and have been fixed to reflect the
    correct identifier.
    
    Additionally Philippe spent 10 hours this week doing a detailed manual
    inspection and review of the 12,461 patched files from the initial patch
    version early this week with:
     - a full scancode scan run, collecting the matched texts, detected
       license ids and scores
     - reviewing anything where there was a license detected (about 500+
       files) to ensure that the applied SPDX license was correct
     - reviewing anything where there was no detection but the patch license
       was not GPL-2.0 WITH Linux-syscall-note to ensure that the applied
       SPDX license was correct
    
    This produced a worksheet with 20 files needing minor correction.  This
    worksheet was then exported into 3 different .csv files for the
    different types of files to be modified.
    
    These .csv files were then reviewed by Greg.  Thomas wrote a script to
    parse the csv files and add the proper SPDX tag to the file, in the
    format that the file expected.  This script was further refined by Greg
    based on the output to detect more types of files automatically and to
    distinguish between header and source .c files (which need different
    comment types.)  Finally Greg ran the script using the .csv files to
    generate the patches.
    
    Reviewed-by: Kate Stewart <kstewart@linuxfoundation.org>
    Reviewed-by: Philippe Ombredanne <pombredanne@nexb.com>
    Reviewed-by: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/include/linux/reset-controller.h b/include/linux/reset-controller.h
index db1fe6772ad5..adb88f8cefbc 100644
--- a/include/linux/reset-controller.h
+++ b/include/linux/reset-controller.h
@@ -1,3 +1,4 @@
+/* SPDX-License-Identifier: GPL-2.0 */
 #ifndef _LINUX_RESET_CONTROLLER_H_
 #define _LINUX_RESET_CONTROLLER_H_
 

commit 8d5b5d5ce58ee1b90110f4e358eefe3c3a6b08a2
Author: Masahiro Yamada <yamada.masahiro@socionext.com>
Date:   Sun May 1 19:36:57 2016 +0900

    reset: add devm_reset_controller_register API
    
    Add a device managed API for reset_controller_register().
    
    This helps in reducing code in .remove callbacks and sometimes
    dropping .remove callbacks entirely.
    
    Signed-off-by: Masahiro Yamada <yamada.masahiro@socionext.com>
    Acked-by: Laxman Dewangan <ldewangan@nvidia.com>
    Signed-off-by: Philipp Zabel <p.zabel@pengutronix.de>

diff --git a/include/linux/reset-controller.h b/include/linux/reset-controller.h
index b91ba932bbd4..db1fe6772ad5 100644
--- a/include/linux/reset-controller.h
+++ b/include/linux/reset-controller.h
@@ -53,4 +53,8 @@ struct reset_controller_dev {
 int reset_controller_register(struct reset_controller_dev *rcdev);
 void reset_controller_unregister(struct reset_controller_dev *rcdev);
 
+struct device;
+int devm_reset_controller_register(struct device *dev,
+				   struct reset_controller_dev *rcdev);
+
 #endif

commit c15ddec2ca06076a11195313aa1fce47d2a28c5d
Author: Hans de Goede <hdegoede@redhat.com>
Date:   Tue Feb 23 18:46:25 2016 +0100

    reset: Share struct reset_control between reset_control_get calls
    
    Now that struct reset_control no longer stores the device pointer for
    the device calling reset_control_get we can share a single struct
    reset_control when multiple calls to reset_control_get are made for
    the same reset line (same id / index).
    
    This is a preparation patch for adding support for shared reset lines.
    
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Signed-off-by: Philipp Zabel <p.zabel@pengutronix.de>

diff --git a/include/linux/reset-controller.h b/include/linux/reset-controller.h
index a3a5bcdb1d02..b91ba932bbd4 100644
--- a/include/linux/reset-controller.h
+++ b/include/linux/reset-controller.h
@@ -31,6 +31,7 @@ struct of_phandle_args;
  * @ops: a pointer to device specific struct reset_control_ops
  * @owner: kernel module of the reset controller driver
  * @list: internal list of reset controller devices
+ * @reset_control_head: head of internal list of requested reset controls
  * @of_node: corresponding device tree node as phandle target
  * @of_reset_n_cells: number of cells in reset line specifiers
  * @of_xlate: translation function to translate from specifier as found in the
@@ -41,6 +42,7 @@ struct reset_controller_dev {
 	const struct reset_control_ops *ops;
 	struct module *owner;
 	struct list_head list;
+	struct list_head reset_control_head;
 	struct device_node *of_node;
 	int of_reset_n_cells;
 	int (*of_xlate)(struct reset_controller_dev *rcdev,

commit 203d4f347d86aa9e78342457aa7a3844c4fadd1d
Author: Maxime Ripard <maxime.ripard@free-electrons.com>
Date:   Thu Jan 14 16:24:45 2016 +0100

    reset: Make reset_control_ops const
    
    The ops pointer is holding a pointer to a structure that is usually not
    modified. Make it const.
    
    Signed-off-by: Maxime Ripard <maxime.ripard@free-electrons.com>
    Signed-off-by: Philipp Zabel <p.zabel@pengutronix.de>

diff --git a/include/linux/reset-controller.h b/include/linux/reset-controller.h
index ce6b962ffed4..a3a5bcdb1d02 100644
--- a/include/linux/reset-controller.h
+++ b/include/linux/reset-controller.h
@@ -38,7 +38,7 @@ struct of_phandle_args;
  * @nr_resets: number of reset controls in this reset controller device
  */
 struct reset_controller_dev {
-	struct reset_control_ops *ops;
+	const struct reset_control_ops *ops;
 	struct module *owner;
 	struct list_head list;
 	struct device_node *of_node;

commit 729de41baf63e2172b9d61de61bbd53f231095ca
Author: Dinh Nguyen <dinguyen@opensource.altera.com>
Date:   Fri Oct 10 10:21:14 2014 -0500

    reset: add reset_control_status helper function
    
    There are cases where a system will want to read a reset status bit before
    doing any other toggling. Add a reset_control_status helper function to the
    reset controller API.
    
    Signed-off-by: Dinh Nguyen <dinguyen@opensource.altera.com>
    Signed-off-by: Philipp Zabel <p.zabel@pengutronix.de>

diff --git a/include/linux/reset-controller.h b/include/linux/reset-controller.h
index 41a4695fde08..ce6b962ffed4 100644
--- a/include/linux/reset-controller.h
+++ b/include/linux/reset-controller.h
@@ -12,11 +12,13 @@ struct reset_controller_dev;
  *         things to reset the device
  * @assert: manually assert the reset line, if supported
  * @deassert: manually deassert the reset line, if supported
+ * @status: return the status of the reset line, if supported
  */
 struct reset_control_ops {
 	int (*reset)(struct reset_controller_dev *rcdev, unsigned long id);
 	int (*assert)(struct reset_controller_dev *rcdev, unsigned long id);
 	int (*deassert)(struct reset_controller_dev *rcdev, unsigned long id);
+	int (*status)(struct reset_controller_dev *rcdev, unsigned long id);
 };
 
 struct module;

commit d0d44dd4ac58bc547646a9d0e65b4648f97cb533
Author: Stephen Boyd <sboyd@codeaurora.org>
Date:   Wed Jan 15 10:47:21 2014 -0800

    reset: Silence warning in reset-controller.h
    
    If a user of <linux/reset-controller.h> doesn't include
    <linux/of.h> before including reset-controller.h they'll get a
    warning as follows:
    
      include/linux/reset-controller.h:44:17:
      warning: 'struct of_phandle_args' declared inside parameter list
    
    This is because of_phandle_args is not forward declared. Add the
    declaration to silence this warning.
    
    Acked-by: Philipp Zabel <p.zabel@pengutronix.de>
    Signed-off-by: Stephen Boyd <sboyd@codeaurora.org>
    Signed-off-by: Mike Turquette <mturquette@linaro.org>

diff --git a/include/linux/reset-controller.h b/include/linux/reset-controller.h
index 2f61311ae3e0..41a4695fde08 100644
--- a/include/linux/reset-controller.h
+++ b/include/linux/reset-controller.h
@@ -21,6 +21,7 @@ struct reset_control_ops {
 
 struct module;
 struct device_node;
+struct of_phandle_args;
 
 /**
  * struct reset_controller_dev - reset controller entity that might

commit 61fc41317666be400802ac793f47de816ef7bd57
Author: Philipp Zabel <p.zabel@pengutronix.de>
Date:   Mon Nov 19 17:23:13 2012 +0100

    reset: Add reset controller API
    
    This adds a simple API for devices to request being reset
    by separate reset controller hardware and implements the
    reset signal device tree binding.
    
    Signed-off-by: Philipp Zabel <p.zabel@pengutronix.de>
    Reviewed-by: Stephen Warren <swarren@nvidia.com>
    Reviewed-by: Shawn Guo <shawn.guo@linaro.org>
    Reviewed-by: Marek Vasut <marex@denx.de>
    Reviewed-by: Pavel Machek <pavel@ucw.cz>

diff --git a/include/linux/reset-controller.h b/include/linux/reset-controller.h
new file mode 100644
index 000000000000..2f61311ae3e0
--- /dev/null
+++ b/include/linux/reset-controller.h
@@ -0,0 +1,51 @@
+#ifndef _LINUX_RESET_CONTROLLER_H_
+#define _LINUX_RESET_CONTROLLER_H_
+
+#include <linux/list.h>
+
+struct reset_controller_dev;
+
+/**
+ * struct reset_control_ops
+ *
+ * @reset: for self-deasserting resets, does all necessary
+ *         things to reset the device
+ * @assert: manually assert the reset line, if supported
+ * @deassert: manually deassert the reset line, if supported
+ */
+struct reset_control_ops {
+	int (*reset)(struct reset_controller_dev *rcdev, unsigned long id);
+	int (*assert)(struct reset_controller_dev *rcdev, unsigned long id);
+	int (*deassert)(struct reset_controller_dev *rcdev, unsigned long id);
+};
+
+struct module;
+struct device_node;
+
+/**
+ * struct reset_controller_dev - reset controller entity that might
+ *                               provide multiple reset controls
+ * @ops: a pointer to device specific struct reset_control_ops
+ * @owner: kernel module of the reset controller driver
+ * @list: internal list of reset controller devices
+ * @of_node: corresponding device tree node as phandle target
+ * @of_reset_n_cells: number of cells in reset line specifiers
+ * @of_xlate: translation function to translate from specifier as found in the
+ *            device tree to id as given to the reset control ops
+ * @nr_resets: number of reset controls in this reset controller device
+ */
+struct reset_controller_dev {
+	struct reset_control_ops *ops;
+	struct module *owner;
+	struct list_head list;
+	struct device_node *of_node;
+	int of_reset_n_cells;
+	int (*of_xlate)(struct reset_controller_dev *rcdev,
+			const struct of_phandle_args *reset_spec);
+	unsigned int nr_resets;
+};
+
+int reset_controller_register(struct reset_controller_dev *rcdev);
+void reset_controller_unregister(struct reset_controller_dev *rcdev);
+
+#endif
