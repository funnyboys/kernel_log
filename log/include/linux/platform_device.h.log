commit 9495b7e92f716ab2bd6814fab5e97ab4a39adfdd
Author: Ulf Hansson <ulf.hansson@linaro.org>
Date:   Wed Apr 22 12:09:54 2020 +0200

    driver core: platform: Initialize dma_parms for platform devices
    
    It's currently the platform driver's responsibility to initialize the
    pointer, dma_parms, for its corresponding struct device. The benefit with
    this approach allows us to avoid the initialization and to not waste memory
    for the struct device_dma_parameters, as this can be decided on a case by
    case basis.
    
    However, it has turned out that this approach is not very practical.  Not
    only does it lead to open coding, but also to real errors. In principle
    callers of dma_set_max_seg_size() doesn't check the error code, but just
    assumes it succeeds.
    
    For these reasons, let's do the initialization from the common platform bus
    at the device registration point. This also follows the way the PCI devices
    are being managed, see pci_device_add().
    
    Suggested-by: Christoph Hellwig <hch@lst.de>
    Cc: <stable@vger.kernel.org>
    Tested-by: Haibo Chen <haibo.chen@nxp.com>
    Reviewed-by: Arnd Bergmann <arnd@arndb.de>
    Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>
    Reviewed-by: Christoph Hellwig <hch@lst.de>
    Link: https://lore.kernel.org/r/20200422100954.31211-1-ulf.hansson@linaro.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/include/linux/platform_device.h b/include/linux/platform_device.h
index bdc35753ef7c..77a2aada106d 100644
--- a/include/linux/platform_device.h
+++ b/include/linux/platform_device.h
@@ -25,6 +25,7 @@ struct platform_device {
 	bool		id_auto;
 	struct device	dev;
 	u64		platform_dma_mask;
+	struct device_dma_parameters dma_parms;
 	u32		num_resources;
 	struct resource	*resource;
 

commit 59838093be51ee9447f6ad05483d697b6fa0368d
Merge: db34c5ffee64 18555cb6db23
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Mon Mar 30 13:59:52 2020 -0700

    Merge tag 'driver-core-5.7-rc1' of git://git.kernel.org/pub/scm/linux/kernel/git/gregkh/driver-core
    
    Pull driver core updates from Greg KH:
     "Here is the "big" set of driver core changes for 5.7-rc1.
    
      Nothing huge in here, just lots of little firmware core changes and
      use of new apis, a libfs fix, a debugfs api change, and some driver
      core deferred probe rework.
    
      All of these have been in linux-next for a while with no reported
      issues"
    
    * tag 'driver-core-5.7-rc1' of git://git.kernel.org/pub/scm/linux/kernel/git/gregkh/driver-core: (44 commits)
      Revert "driver core: Set fw_devlink to "permissive" behavior by default"
      driver core: Set fw_devlink to "permissive" behavior by default
      driver core: Replace open-coded list_last_entry()
      driver core: Read atomic counter once in driver_probe_done()
      libfs: fix infoleak in simple_attr_read()
      driver core: Add device links from fwnode only for the primary device
      platform/x86: touchscreen_dmi: Add info for the Chuwi Vi8 Plus tablet
      platform/x86: touchscreen_dmi: Add EFI embedded firmware info support
      Input: icn8505 - Switch to firmware_request_platform for retreiving the fw
      Input: silead - Switch to firmware_request_platform for retreiving the fw
      selftests: firmware: Add firmware_request_platform tests
      test_firmware: add support for firmware_request_platform
      firmware: Add new platform fallback mechanism and firmware_request_platform()
      Revert "drivers: base: power: wakeup.c: Use built-in RCU list checking"
      drivers: base: power: wakeup.c: Use built-in RCU list checking
      component: allow missing unbind callback
      debugfs: remove return value of debugfs_create_file_size()
      debugfs: Check module state before warning in {full/open}_proxy_open()
      firmware: fix a double abort case with fw_load_sysfs_fallback
      arch_topology: Fix putting invalid cpu clk
      ...

commit 890cc39a879906b63912482dfc41944579df2dc6
Author: Dejin Zheng <zhengdejin5@gmail.com>
Date:   Tue Mar 24 00:06:08 2020 +0800

    drivers: provide devm_platform_get_and_ioremap_resource()
    
    Since commit "drivers: provide devm_platform_ioremap_resource()",
    it was wrap platform_get_resource() and devm_ioremap_resource() as
    single helper devm_platform_ioremap_resource(). but now, many drivers
    still used platform_get_resource() and devm_ioremap_resource()
    together in the kernel tree. The reason can not be replaced is they
    still need use the resource variables obtained by platform_get_resource().
    so provide this helper.
    
    Suggested-by: Geert Uytterhoeven <geert@linux-m68k.org>
    Suggested-by: Sergei Shtylyov <sergei.shtylyov@cogentembedded.com>
    Reviewed-by: Geert Uytterhoeven <geert+renesas@glider.be>
    Signed-off-by: Dejin Zheng <zhengdejin5@gmail.com>
    Link: https://lore.kernel.org/r/20200323160612.17277-2-zhengdejin5@gmail.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/include/linux/platform_device.h b/include/linux/platform_device.h
index 041bfa412aa0..f242f66db19d 100644
--- a/include/linux/platform_device.h
+++ b/include/linux/platform_device.h
@@ -55,6 +55,9 @@ extern struct device *
 platform_find_device_by_driver(struct device *start,
 			       const struct device_driver *drv);
 extern void __iomem *
+devm_platform_get_and_ioremap_resource(struct platform_device *pdev,
+				unsigned int index, struct resource **res);
+extern void __iomem *
 devm_platform_ioremap_resource(struct platform_device *pdev,
 			       unsigned int index);
 extern void __iomem *

commit e3a36eb6dfaeea8175c05d5915dcf0b939be6dab
Author: Christoph Hellwig <hch@lst.de>
Date:   Wed Mar 11 17:07:10 2020 +0100

    driver code: clarify and fix platform device DMA mask allocation
    
    This does three inter-related things to clarify the usage of the
    platform device dma_mask field. In the process, fix the bug introduced
    by cdfee5623290 ("driver core: initialize a default DMA mask for
    platform device") that caused Artem Tashkinov's laptop to not boot with
    newer Fedora kernels.
    
    This does:
    
     - First off, rename the field to "platform_dma_mask" to make it
       greppable.
    
       We have way too many different random fields called "dma_mask" in
       various data structures, where some of them are actual masks, and
       some of them are just pointers to the mask. And the structures all
       have pointers to each other, or embed each other inside themselves,
       and "pdev" sometimes means "platform device" and sometimes it means
       "PCI device".
    
       So to make it clear in the code when you actually use this new field,
       give it a unique name (it really should be something even more unique
       like "platform_device_dma_mask", since it's per platform device, not
       per platform, but that gets old really fast, and this is unique
       enough in context).
    
       To further clarify when the field gets used, initialize it when we
       actually start using it with the default value.
    
     - Then, use this field instead of the random one-off allocation in
       platform_device_register_full() that is now unnecessary since we now
       already have a perfectly fine allocation for it in the platform
       device structure.
    
     - The above then allows us to fix the actual bug, where the error path
       of platform_device_register_full() would unconditionally free the
       platform device DMA allocation with 'kfree()'.
    
       That kfree() was dont regardless of whether the allocation had been
       done earlier with the (now removed) kmalloc, or whether
       setup_pdev_dma_masks() had already been used and the dma_mask pointer
       pointed to the mask that was part of the platform device.
    
    It seems most people never triggered the error path, or only triggered
    it from a call chain that set an explicit pdevinfo->dma_mask value (and
    thus caused the unnecessary allocation that was "cleaned up" in the
    error path) before calling platform_device_register_full().
    
    Robin Murphy points out that in Artem's case the wdat_wdt driver failed
    in platform_device_add(), and that was the one that had called
    platform_device_register_full() with pdevinfo.dma_mask = 0, and would
    have caused that kfree() of pdev.dma_mask corrupting the heap.
    
    A later unrelated kmalloc() then oopsed due to the heap corruption.
    
    Fixes: cdfee5623290 ("driver core: initialize a default DMA mask for platform device")
    Reported-bisected-and-tested-by:  Artem S. Tashkinov <aros@gmx.com>
    Reviewed-by: Robin Murphy <robin.murphy@arm.com>
    Cc: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Christoph Hellwig <hch@lst.de>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

diff --git a/include/linux/platform_device.h b/include/linux/platform_device.h
index 276a03c24691..041bfa412aa0 100644
--- a/include/linux/platform_device.h
+++ b/include/linux/platform_device.h
@@ -24,7 +24,7 @@ struct platform_device {
 	int		id;
 	bool		id_auto;
 	struct device	dev;
-	u64		dma_mask;
+	u64		platform_dma_mask;
 	u32		num_resources;
 	struct resource	*resource;
 

commit 469e1906a1b121ecb0c2ef43f28a98fd9d453831
Author: Tomas Winkler <tomas.winkler@intel.com>
Date:   Sat Feb 8 20:44:07 2020 +0200

    platform: constify properties in platform_device
    
    Constify 'struct property_entry *properties' in
    platform_device. It is always passed around as a pointer const struct.
    
    Reviewed-by: Andy Shevchenko <andy.shevchenko@gmail.com>
    Signed-off-by: Tomas Winkler <tomas.winkler@intel.com>
    Link: https://lore.kernel.org/r/20200208184407.1294-2-tomas.winkler@intel.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/include/linux/platform_device.h b/include/linux/platform_device.h
index 276a03c24691..8e83c6ff140d 100644
--- a/include/linux/platform_device.h
+++ b/include/linux/platform_device.h
@@ -89,7 +89,7 @@ struct platform_device_info {
 		size_t size_data;
 		u64 dma_mask;
 
-		struct property_entry *properties;
+		const struct property_entry *properties;
 };
 extern struct platform_device *platform_device_register_full(
 		const struct platform_device_info *pdevinfo);

commit c9c8641d3ebd79274af75f7df3e6a9c6cc8a66e9
Author: Bartosz Golaszewski <bgolaszewski@baylibre.com>
Date:   Tue Oct 22 10:43:16 2019 +0200

    drivers: provide devm_platform_ioremap_resource_byname()
    
    Provide a variant of devm_platform_ioremap_resource() that allows to
    lookup resources from platform devices by name rather than by index.
    
    Signed-off-by: Bartosz Golaszewski <bgolaszewski@baylibre.com>
    Reviewed-by: Arnd Bergmann <arnd@arndb.de>
    Link: https://lore.kernel.org/r/20191022084318.22256-7-brgl@bgdev.pl
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/include/linux/platform_device.h b/include/linux/platform_device.h
index 91fcdbbae89d..276a03c24691 100644
--- a/include/linux/platform_device.h
+++ b/include/linux/platform_device.h
@@ -60,6 +60,9 @@ devm_platform_ioremap_resource(struct platform_device *pdev,
 extern void __iomem *
 devm_platform_ioremap_resource_wc(struct platform_device *pdev,
 				  unsigned int index);
+extern void __iomem *
+devm_platform_ioremap_resource_byname(struct platform_device *pdev,
+				      const char *name);
 extern int platform_get_irq(struct platform_device *, unsigned int);
 extern int platform_get_irq_optional(struct platform_device *, unsigned int);
 extern int platform_irq_count(struct platform_device *);

commit bb6243b4f73d29f8c8faf8f805a2042ac3973b71
Author: Bartosz Golaszewski <bgolaszewski@baylibre.com>
Date:   Tue Oct 22 10:43:14 2019 +0200

    drivers: platform: provide devm_platform_ioremap_resource_wc()
    
    Provide a write-combined variant of devm_platform_ioremap_resource().
    
    Signed-off-by: Bartosz Golaszewski <bgolaszewski@baylibre.com>
    Reviewed-by: Arnd Bergmann <arnd@arndb.de>
    Link: https://lore.kernel.org/r/20191022084318.22256-5-brgl@bgdev.pl
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/include/linux/platform_device.h b/include/linux/platform_device.h
index 51fb7fc28587..91fcdbbae89d 100644
--- a/include/linux/platform_device.h
+++ b/include/linux/platform_device.h
@@ -57,6 +57,9 @@ platform_find_device_by_driver(struct device *start,
 extern void __iomem *
 devm_platform_ioremap_resource(struct platform_device *pdev,
 			       unsigned int index);
+extern void __iomem *
+devm_platform_ioremap_resource_wc(struct platform_device *pdev,
+				  unsigned int index);
 extern int platform_get_irq(struct platform_device *, unsigned int);
 extern int platform_get_irq_optional(struct platform_device *, unsigned int);
 extern int platform_irq_count(struct platform_device *);

commit 8f677bc819e7a74cf10e30daf06e8b151d1e6a94
Merge: a3caeb8ffe5d d6d5df1db6e9
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Sun Oct 27 18:54:13 2019 +0100

    Merge 5.4-rc5 into driver-core-next
    
    We want the sysfs fix in here as well to build on top of.
    
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 201e91091b1d47047f55580b5474e1239f4d17aa
Author: Bartosz Golaszewski <bgolaszewski@baylibre.com>
Date:   Thu Oct 3 11:29:13 2019 +0200

    sh: add the sh_ prefix to early platform symbols
    
    Old early platform device support is now sh-specific. Before moving on
    to implementing new early platform framework based on real platform
    devices, prefix all early platform symbols with 'sh_'.
    
    Signed-off-by: Bartosz Golaszewski <bgolaszewski@baylibre.com>
    Cc: Rich Felker <dalias@libc.org>
    Link: https://lore.kernel.org/r/20191003092913.10731-3-brgl@bgdev.pl
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/include/linux/platform_device.h b/include/linux/platform_device.h
index 85aa28a041a9..f086b6a1bc6b 100644
--- a/include/linux/platform_device.h
+++ b/include/linux/platform_device.h
@@ -332,7 +332,7 @@ extern int platform_dma_configure(struct device *dev);
  * drivers. It should go away once we introduce the new platform_device-based
  * early driver framework.
  */
-static inline int is_early_platform_device(struct platform_device *pdev)
+static inline int is_sh_early_platform_device(struct platform_device *pdev)
 {
 	return 0;
 }

commit 507fd01d5333338753a1cc26322dfc9f856c109f
Author: Bartosz Golaszewski <bgolaszewski@baylibre.com>
Date:   Thu Oct 3 11:29:12 2019 +0200

    drivers: move the early platform device support to arch/sh
    
    SuperH is the only user of the current implementation of early platform
    device support. We want to introduce a more robust approach to early
    probing. As the first step - move all the current early platform code
    to arch/sh.
    
    In order not to export internal drivers/base functions to arch code for
    this temporary solution - copy the two needed routines for driver
    matching from drivers/base/platform.c to arch/sh/drivers/platform_early.c.
    
    Also: call early_platform_cleanup() from subsys_initcall() so that it's
    called after all early devices are probed.
    
    Signed-off-by: Bartosz Golaszewski <bgolaszewski@baylibre.com>
    Cc: Rich Felker <dalias@libc.org>
    Link: https://lore.kernel.org/r/20191003092913.10731-2-brgl@bgdev.pl
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/include/linux/platform_device.h b/include/linux/platform_device.h
index 1b5cec067533..85aa28a041a9 100644
--- a/include/linux/platform_device.h
+++ b/include/linux/platform_device.h
@@ -292,58 +292,6 @@ void platform_unregister_drivers(struct platform_driver * const *drivers,
 #define platform_register_drivers(drivers, count) \
 	__platform_register_drivers(drivers, count, THIS_MODULE)
 
-/* early platform driver interface */
-struct early_platform_driver {
-	const char *class_str;
-	struct platform_driver *pdrv;
-	struct list_head list;
-	int requested_id;
-	char *buffer;
-	int bufsize;
-};
-
-#define EARLY_PLATFORM_ID_UNSET -2
-#define EARLY_PLATFORM_ID_ERROR -3
-
-extern int early_platform_driver_register(struct early_platform_driver *epdrv,
-					  char *buf);
-extern void early_platform_add_devices(struct platform_device **devs, int num);
-
-static inline int is_early_platform_device(struct platform_device *pdev)
-{
-	return !pdev->dev.driver;
-}
-
-extern void early_platform_driver_register_all(char *class_str);
-extern int early_platform_driver_probe(char *class_str,
-				       int nr_probe, int user_only);
-extern void early_platform_cleanup(void);
-
-#define early_platform_init(class_string, platdrv)		\
-	early_platform_init_buffer(class_string, platdrv, NULL, 0)
-
-#ifndef MODULE
-#define early_platform_init_buffer(class_string, platdrv, buf, bufsiz)	\
-static __initdata struct early_platform_driver early_driver = {		\
-	.class_str = class_string,					\
-	.buffer = buf,							\
-	.bufsize = bufsiz,						\
-	.pdrv = platdrv,						\
-	.requested_id = EARLY_PLATFORM_ID_UNSET,			\
-};									\
-static int __init early_platform_driver_setup_func(char *buffer)	\
-{									\
-	return early_platform_driver_register(&early_driver, buffer);	\
-}									\
-early_param(class_string, early_platform_driver_setup_func)
-#else /* MODULE */
-#define early_platform_init_buffer(class_string, platdrv, buf, bufsiz)	\
-static inline char *early_platform_driver_setup_func(void)		\
-{									\
-	return bufsiz ? buf : NULL;					\
-}
-#endif /* MODULE */
-
 #ifdef CONFIG_SUSPEND
 extern int platform_pm_suspend(struct device *dev);
 extern int platform_pm_resume(struct device *dev);
@@ -378,4 +326,16 @@ extern int platform_dma_configure(struct device *dev);
 #define USE_PLATFORM_PM_SLEEP_OPS
 #endif
 
+#ifndef CONFIG_SUPERH
+/*
+ * REVISIT: This stub is needed for all non-SuperH users of early platform
+ * drivers. It should go away once we introduce the new platform_device-based
+ * early driver framework.
+ */
+static inline int is_early_platform_device(struct platform_device *pdev)
+{
+	return 0;
+}
+#endif /* CONFIG_SUPERH */
+
 #endif /* _PLATFORM_DEVICE_H_ */

commit f1da567f1dc1b55d178b8f2d0cfe8353858aac19
Author: Hans de Goede <hdegoede@redhat.com>
Date:   Sat Oct 5 23:04:47 2019 +0200

    driver core: platform: Add platform_get_irq_byname_optional()
    
    Some drivers (e.g dwc3) first try to get an IRQ byname and then fall
    back to the one at index 0. In this case we do not want the error(s)
    printed by platform_get_irq_byname(). This commit adds a new
    platform_get_irq_byname_optional(), which does not print errors, for this.
    
    While at it also improve the kdoc text for platform_get_irq_byname() a bit.
    
    BugLink: https://bugzilla.kernel.org/show_bug.cgi?id=205037
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Reviewed-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Link: https://lore.kernel.org/r/20191005210449.3926-2-hdegoede@redhat.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/include/linux/platform_device.h b/include/linux/platform_device.h
index 1b5cec067533..f2688404d1cd 100644
--- a/include/linux/platform_device.h
+++ b/include/linux/platform_device.h
@@ -64,6 +64,8 @@ extern struct resource *platform_get_resource_byname(struct platform_device *,
 						     unsigned int,
 						     const char *);
 extern int platform_get_irq_byname(struct platform_device *, const char *);
+extern int platform_get_irq_byname_optional(struct platform_device *dev,
+					    const char *name);
 extern int platform_add_devices(struct platform_device **, int);
 
 struct platform_device_info {

commit c6b48dad92aedaa9bdc013ee495cb5b1bbdf1f11
Merge: 1f7d290a7275 fb9617edf6c0
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Wed Sep 18 10:33:46 2019 -0700

    Merge tag 'usb-5.4-rc1' of git://git.kernel.org/pub/scm/linux/kernel/git/gregkh/usb
    
    Pull USB updates from Greg KH:
     "Here is the big set of USB patches for 5.4-rc1.
    
      Two major chunks of code are moving out of the tree and into the
      staging directory, uwb and wusb (wireless USB support), because there
      are no devices that actually use this protocol anymore, and what we
      have today probably doesn't work at all given that the maintainers
      left many many years ago. So move it to staging where it will be
      removed in a few releases if no one screams.
    
      Other than that, lots of little things. The usual gadget and xhci and
      usb serial driver updates, along with a bunch of sysfs file cleanups
      due to the driver core changes to support that. Nothing really major,
      just constant forward progress.
    
      All of these have been in linux-next for a while with no reported
      issues"
    
    * tag 'usb-5.4-rc1' of git://git.kernel.org/pub/scm/linux/kernel/git/gregkh/usb: (159 commits)
      USB: usbcore: Fix slab-out-of-bounds bug during device reset
      usb: cdns3: Remove redundant dev_err call in cdns3_probe()
      USB: rio500: Fix lockdep violation
      USB: rio500: simplify locking
      usb: mtu3: register a USB Role Switch for dual role mode
      usb: common: add USB GPIO based connection detection driver
      usb: common: create Kconfig file
      usb: roles: get usb-role-switch from parent
      usb: roles: Add fwnode_usb_role_switch_get() function
      device connection: Add fwnode_connection_find_match()
      usb: roles: Introduce stubs for the exiting functions in role.h
      dt-bindings: usb: mtu3: add properties about USB Role Switch
      dt-bindings: usb: add binding for USB GPIO based connection detection driver
      dt-bindings: connector: add optional properties for Type-B
      dt-binding: usb: add usb-role-switch property
      usbip: Implement SG support to vhci-hcd and stub driver
      usb: roles: intel: Enable static DRD mode for role switch
      xhci-ext-caps.c: Add property to disable Intel SW switch
      usb: dwc3: remove generic PHY calibrate() calls
      usb: core: phy: add support for PHY calibration
      ...

commit c5c0283a9db1c7ba5881f956a1faf2ebc3dfe70e
Merge: a31f01777bc5 36f3313d6bff
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Tue Sep 3 17:11:07 2019 +0200

    Merge generic_lookup_helpers into usb-next
    
    The lookup helpers are needed here.
    
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8973ea47901c81a1912bd05f1577bed9b5b52506
Author: Thierry Reding <treding@nvidia.com>
Date:   Wed Aug 28 10:34:10 2019 +0200

    driver core: platform: Introduce platform_get_irq_optional()
    
    In some cases the interrupt line of a device is optional. Introduce a
    new platform_get_irq_optional() that works much like platform_get_irq()
    but does not output an error on failure to find the interrupt.
    
    Signed-off-by: Thierry Reding <treding@nvidia.com>
    Reviewed-by: Stephen Boyd <swboyd@chromium.org>
    Link: https://lore.kernel.org/r/20190828083411.2496-1-thierry.reding@gmail.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/include/linux/platform_device.h b/include/linux/platform_device.h
index 37e15a935a42..35bc4355a9df 100644
--- a/include/linux/platform_device.h
+++ b/include/linux/platform_device.h
@@ -58,6 +58,7 @@ extern void __iomem *
 devm_platform_ioremap_resource(struct platform_device *pdev,
 			       unsigned int index);
 extern int platform_get_irq(struct platform_device *, unsigned int);
+extern int platform_get_irq_optional(struct platform_device *, unsigned int);
 extern int platform_irq_count(struct platform_device *);
 extern struct resource *platform_get_resource_byname(struct platform_device *,
 						     unsigned int,

commit cdfee5623290bc893f595636b44fa28e8207c5b3
Author: Christoph Hellwig <hch@lst.de>
Date:   Fri Aug 16 08:24:35 2019 +0200

    driver core: initialize a default DMA mask for platform device
    
    We still treat devices without a DMA mask as defaulting to 32-bits for
    both mask, but a few releases ago we've started warning about such
    cases, as they require special cases to work around this sloppyness.
    Add a dma_mask field to struct platform_device so that we can initialize
    the dma_mask pointer in struct device and initialize both masks to
    32-bits by default, replacing similar functionality in m68k and
    powerpc.  The arch_setup_pdev_archdata hooks is now unused and removed.
    
    Note that the code looks a little odd with the various conditionals
    because we have to support platform_device structures that are
    statically allocated.
    
    Signed-off-by: Christoph Hellwig <hch@lst.de>
    Acked-by: Geert Uytterhoeven <geert@linux-m68k.org>
    Link: https://lore.kernel.org/r/20190816062435.881-7-hch@lst.de
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/include/linux/platform_device.h b/include/linux/platform_device.h
index 9bc36b589827..34a3d8ed8ba7 100644
--- a/include/linux/platform_device.h
+++ b/include/linux/platform_device.h
@@ -24,6 +24,7 @@ struct platform_device {
 	int		id;
 	bool		id_auto;
 	struct device	dev;
+	u64		dma_mask;
 	u32		num_resources;
 	struct resource	*resource;
 
@@ -48,7 +49,6 @@ extern void platform_device_unregister(struct platform_device *);
 extern struct bus_type platform_bus_type;
 extern struct device platform_bus;
 
-extern void arch_setup_pdev_archdata(struct platform_device *);
 extern struct resource *platform_get_resource(struct platform_device *,
 					      unsigned int, unsigned int);
 extern void __iomem *

commit 36f3313d6bff91ab2a9e47698c27d15363640a4e
Author: Suzuki K Poulose <suzuki.poulose@arm.com>
Date:   Tue Jul 23 23:18:38 2019 +0100

    platform: Add platform_find_device_by_driver() helper
    
    Provide a helper to lookup platform devices by matching device
    driver in order to avoid drivers trying to use platform bus
    internals.
    
    Cc: Eric Anholt <eric@anholt.net>
    Cc: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Cc: "Heiko Stübner" <heiko@sntech.de>
    Cc: Inki Dae <inki.dae@samsung.com>
    Cc: "Rafael J. Wysocki" <rafael@kernel.org>
    Cc: Sandy Huang <hjc@rock-chips.com>
    Cc: Seung-Woo Kim <sw0312.kim@samsung.com>
    Tested-by: Heiko Stuebner <heiko@sntech.de>
    Signed-off-by: Suzuki K Poulose <suzuki.poulose@arm.com>
    Link: https://lore.kernel.org/r/20190723221838.12024-8-suzuki.poulose@arm.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/include/linux/platform_device.h b/include/linux/platform_device.h
index 9bc36b589827..37e15a935a42 100644
--- a/include/linux/platform_device.h
+++ b/include/linux/platform_device.h
@@ -51,6 +51,9 @@ extern struct device platform_bus;
 extern void arch_setup_pdev_archdata(struct platform_device *);
 extern struct resource *platform_get_resource(struct platform_device *,
 					      unsigned int, unsigned int);
+extern struct device *
+platform_find_device_by_driver(struct device *start,
+			       const struct device_driver *drv);
 extern void __iomem *
 devm_platform_ioremap_resource(struct platform_device *pdev,
 			       unsigned int index);

commit fe34c89d25429e079ba67416529514120dd715f8
Author: Mauro Carvalho Chehab <mchehab+samsung@kernel.org>
Date:   Tue Jun 18 12:34:59 2019 -0300

    docs: driver-model: move it to the driver-api book
    
    The audience for the Kernel driver-model is clearly Kernel hackers.
    
    Signed-off-by: Mauro Carvalho Chehab <mchehab+samsung@kernel.org>
    Acked-by: Jeff Kirsher <jeffrey.t.kirsher@intel.com> # ice driver changes

diff --git a/include/linux/platform_device.h b/include/linux/platform_device.h
index beb25f277889..9bc36b589827 100644
--- a/include/linux/platform_device.h
+++ b/include/linux/platform_device.h
@@ -4,7 +4,7 @@
  *
  * Copyright (c) 2001-2003 Patrick Mochel <mochel@osdl.org>
  *
- * See Documentation/driver-model/ for more information.
+ * See Documentation/driver-api/driver-model/ for more information.
  */
 
 #ifndef _PLATFORM_DEVICE_H_

commit 55716d26439f5c4008b0bcb7f17d1f7c0d8fbcfc
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Sat Jun 1 10:08:42 2019 +0200

    treewide: Replace GPLv2 boilerplate/reference with SPDX - rule 428
    
    Based on 1 normalized pattern(s):
    
      this file is released under the gplv2
    
    extracted by the scancode license scanner the SPDX license identifier
    
      GPL-2.0-only
    
    has been chosen to replace the boilerplate/reference in 68 file(s).
    
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Reviewed-by: Armijn Hemel <armijn@tjaldur.nl>
    Reviewed-by: Allison Randal <allison@lohutok.net>
    Cc: linux-spdx@vger.kernel.org
    Link: https://lkml.kernel.org/r/20190531190114.292346262@linutronix.de
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/include/linux/platform_device.h b/include/linux/platform_device.h
index cc464850b71e..beb25f277889 100644
--- a/include/linux/platform_device.h
+++ b/include/linux/platform_device.h
@@ -1,10 +1,9 @@
+/* SPDX-License-Identifier: GPL-2.0-only */
 /*
  * platform_device.h - generic, centralized driver model
  *
  * Copyright (c) 2001-2003 Patrick Mochel <mochel@osdl.org>
  *
- * This file is released under the GPLv2
- *
  * See Documentation/driver-model/ for more information.
  */
 

commit 3601fe43e8164f67a8de3de8e988bfcb3a94af46
Merge: cf2e8c544cd3 d01849f7deba
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Fri Mar 8 10:09:53 2019 -0800

    Merge tag 'gpio-v5.1-1' of git://git.kernel.org/pub/scm/linux/kernel/git/linusw/linux-gpio
    
    Pull GPIO updates from Linus Walleij:
     "This is the bulk of GPIO changes for the v5.1 cycle:
    
      Core changes:
    
       - The big change this time around is the irqchip handling in the
         qualcomm pin controllers, closely coupled with the gpiochip. This
         rework, in a classic fall-between-the-chairs fashion has been
         sidestepped for too long.
    
         The Qualcomm IRQchips using the SPMI and SSBI transport mechanisms
         have been rewritten to use hierarchical irqchip. This creates the
         base from which I intend to gradually pull support for hierarchical
         irqchips into the gpiolib irqchip helpers to cut down on duplicate
         code.
    
         We have too many hacks in the kernel because people have been
         working around the missing hierarchical irqchip for years, and once
         it was there, noone understood it for a while. We are now slowly
         adapting to using it.
    
         This is why this pull requests include changes to MFD, SPMI,
         IRQchip core and some ARM Device Trees pertaining to the Qualcomm
         chip family. Since Qualcomm have so many chips and such large
         deployments it is paramount that this platform gets this right, and
         now it (hopefully) does.
    
       - Core support for pull-up and pull-down configuration, also from the
         device tree. When a simple GPIO chip supports an "off or on" pull-up
         or pull-down resistor, we provide a way to set this up using
         machine descriptors or device tree.
    
         If more elaborate control of pull up/down (such as resistance shunt
         setting) is required, drivers should be phased over to use pin
         control. We do not yet provide a userspace ABI for this pull
         up-down setting but I suspect the makers are going to ask for it
         soon enough. PCA953x is the first user of this new API.
    
       - The GPIO mockup driver has been revamped after some discussion
         improving the IRQ simulator in the process.
    
         The idea is to make it possible to use the mockup for both testing
         and virtual prototyping, e.g. when you do not yet have a GPIO
         expander to play with but really want to get something to develop
         code around before hardware is available. It's neat. The blackbox
         testing usecase is currently making its way into kernelci.
    
       - ACPI GPIO core preserves non direction flags when updating flags.
    
       - A new device core helper for devm_platform_ioremap_resource() is
         funneled through the GPIO tree with Greg's ACK.
    
      New drivers:
    
       - TQ-Systems QTMX86 GPIO controllers (using port-mapped I/O)
    
       - Gateworks PLD GPIO driver (vaccumed up from OpenWrt)
    
       - AMD G-Series PCH (Platform Controller Hub) GPIO driver.
    
       - Fintek F81804 & F81966 subvariants.
    
       - PCA953x now supports NXP PCAL6416.
    
      Driver improvements:
    
       - IRQ support on the Nintendo Wii (Hollywood) GPIO.
    
       - get_direction() support for the MVEBU driver.
    
       - Set the right output level on SAMA5D2.
    
       - Drop the unused irq trigger setting on the Spreadtrum driver.
    
       - Wakeup support for PCA953x.
    
       - A slew of cleanups in the various Intel drivers"
    
    * tag 'gpio-v5.1-1' of git://git.kernel.org/pub/scm/linux/kernel/git/linusw/linux-gpio: (110 commits)
      gpio: gpio-omap: fix level interrupt idling
      gpio: amd-fch: Set proper output level for direction_output
      x86: apuv2: remove unused variable
      gpio: pca953x: Use PCA_LATCH_INT
      platform/x86: fix PCENGINES_APU2 Kconfig warning
      gpio: pca953x: Fix dereference of irq data in shutdown
      gpio: amd-fch: Fix type error found by sparse
      gpio: amd-fch: Drop const from resource
      gpio: mxc: add check to return defer probe if clock tree NOT ready
      gpio: ftgpio: Register per-instance irqchip
      gpio: ixp4xx: Add DT bindings
      x86: pcengines apuv2 gpio/leds/keys platform driver
      gpio: AMD G-Series PCH gpio driver
      drivers: depend on HAS_IOMEM for devm_platform_ioremap_resource()
      gpio: tqmx86: Set proper output level for direction_output
      gpio: sprd: Change to use SoC compatible string
      gpio: sprd: Use SoC compatible string instead of wildcard string
      gpio: of: Handle both enable-gpio{,s}
      gpio: of: Restrict enable-gpio quirk to regulator-gpio
      gpio: davinci: use devm_platform_ioremap_resource()
      ...

commit 2c1ea6abde8884208a9b94254740ae4597c62000
Author: Mans Rullgard <mans@mansr.com>
Date:   Thu Feb 21 11:29:35 2019 +0000

    platform: set of_node in platform_device_register_full()
    
    If the provided fwnode is an OF node, set dev.of_node as well.
    
    Also add an of_node_reused flag to struct platform_device_info and copy
    this to the new device.  This is needed to avoid pinctrl settings being
    requested twice.  See 4e75e1d7dac9 ("driver core: add helper to reuse a
    device-tree node") for a longer explanation.
    
    Some drivers are just shims that create extra "glue" devices with the
    DT device as parent and have the real driver bind to these.  In these
    cases, the glue device needs to get a reference to the original DT node
    in order for the main driver to access properties and child nodes.
    
    For example, the sunxi-musb driver creates such a glue device using
    platform_device_register_full().  Consequently, devices attached to
    this USB interface don't get associated with DT nodes, if present,
    the way they do with EHCI.
    
    This change will allow sunxi-musb and similar drivers to easily
    propagate the DT node to child devices as required.
    
    Signed-off-by: Mans Rullgard <mans@mansr.com>
    Reviewed-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/include/linux/platform_device.h b/include/linux/platform_device.h
index c7c081dc6034..466a8d02e298 100644
--- a/include/linux/platform_device.h
+++ b/include/linux/platform_device.h
@@ -63,6 +63,7 @@ extern int platform_add_devices(struct platform_device **, int);
 struct platform_device_info {
 		struct device *parent;
 		struct fwnode_handle *fwnode;
+		bool of_node_reused;
 
 		const char *name;
 		int id;

commit 7945f929f1a77a1c8887a97ca07f87626858ff42
Author: Bartosz Golaszewski <bgolaszewski@baylibre.com>
Date:   Wed Feb 20 11:12:39 2019 +0000

    drivers: provide devm_platform_ioremap_resource()
    
    There are currently 1200+ instances of using platform_get_resource()
    and devm_ioremap_resource() together in the kernel tree.
    
    This patch wraps these two calls in a single helper. Thanks to that
    we don't have to declare a local variable for struct resource * and can
    omit the redundant argument for resource type. We also have one
    function call less.
    
    Signed-off-by: Bartosz Golaszewski <bgolaszewski@baylibre.com>
    Acked-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Reviewed-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>

diff --git a/include/linux/platform_device.h b/include/linux/platform_device.h
index c7c081dc6034..b126b73ed8ef 100644
--- a/include/linux/platform_device.h
+++ b/include/linux/platform_device.h
@@ -52,6 +52,9 @@ extern struct device platform_bus;
 extern void arch_setup_pdev_archdata(struct platform_device *);
 extern struct resource *platform_get_resource(struct platform_device *,
 					      unsigned int, unsigned int);
+extern void __iomem *
+devm_platform_ioremap_resource(struct platform_device *pdev,
+			       unsigned int index);
 extern int platform_get_irq(struct platform_device *, unsigned int);
 extern int platform_irq_count(struct platform_device *);
 extern struct resource *platform_get_resource_byname(struct platform_device *,

commit 719cf71cada1abc4f8727eac918b639a4a502a59
Author: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
Date:   Mon Aug 20 16:45:41 2018 +0300

    ACPI / glue: Split dev_is_platform() out of module for wide use
    
    There would be useful to have in future the similar API in platform
    core, as we have, for example, for PCI subsystem, to check if device
    belongs to it.
    
    Thus, split out conditional to a macro dev_is_platform() for wide use.
    
    No functional change intended.
    
    Signed-off-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>

diff --git a/include/linux/platform_device.h b/include/linux/platform_device.h
index 1a9f38f27f65..c7c081dc6034 100644
--- a/include/linux/platform_device.h
+++ b/include/linux/platform_device.h
@@ -40,6 +40,7 @@ struct platform_device {
 
 #define platform_get_device_id(pdev)	((pdev)->id_entry)
 
+#define dev_is_platform(dev) ((dev)->bus == &platform_bus_type)
 #define to_platform_device(x) container_of((x), struct platform_device, dev)
 
 extern int platform_device_register(struct platform_device *);

commit ac3167257b9fe16c9426c2087ead1c9f1b0992b1
Author: Randy Dunlap <rdunlap@infradead.org>
Date:   Tue Jun 19 22:47:28 2018 -0700

    headers: separate linux/mod_devicetable.h from linux/platform_device.h
    
    At over 4000 #includes, <linux/platform_device.h> is the 9th most
    #included header file in the Linux kernel.  It does not need
    <linux/mod_devicetable.h>, so drop that header and explicitly add
    <linux/mod_devicetable.h> to source files that need it.
    
       4146 #include <linux/platform_device.h>
    
    After this patch, there are 225 files that use <linux/mod_devicetable.h>,
    for a reduction of around 3900 times that <linux/mod_devicetable.h>
    does not have to be read & parsed.
    
        225 #include <linux/mod_devicetable.h>
    
    This patch was build-tested on 20 different arch-es.
    
    It also makes these drivers SubmitChecklist#1 compliant.
    
    Signed-off-by: Randy Dunlap <rdunlap@infradead.org>
    Reported-by: kbuild test robot <lkp@intel.com> # drivers/media/platform/vimc/
    Reported-by: kbuild test robot <lkp@intel.com> # drivers/pinctrl/pinctrl-u300.c
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/include/linux/platform_device.h b/include/linux/platform_device.h
index 3097c943fab9..1a9f38f27f65 100644
--- a/include/linux/platform_device.h
+++ b/include/linux/platform_device.h
@@ -12,13 +12,13 @@
 #define _PLATFORM_DEVICE_H_
 
 #include <linux/device.h>
-#include <linux/mod_devicetable.h>
 
 #define PLATFORM_DEVID_NONE	(-1)
 #define PLATFORM_DEVID_AUTO	(-2)
 
 struct mfd_cell;
 struct property_entry;
+struct platform_device_id;
 
 struct platform_device {
 	const char	*name;

commit 07397df29e57cde5799af16e8f148ae10ed75285
Author: Nipun Gupta <nipun.gupta@nxp.com>
Date:   Sat Apr 28 08:21:58 2018 +0530

    dma-mapping: move dma configuration to bus infrastructure
    
    ACPI/OF support for configuration of DMA is a bus specific aspect, and
    thus should be configured by the bus.  Introduces a 'dma_configure' bus
    method so that busses can control their DMA capabilities.
    
    Also update the PCI, Platform, ACPI and host1x buses to use the new
    method.
    
    Suggested-by: Christoph Hellwig <hch@lst.de>
    Signed-off-by: Nipun Gupta <nipun.gupta@nxp.com>
    Acked-by: Bjorn Helgaas <bhelgaas@google.com>  # PCI parts
    Acked-by: Thierry Reding <treding@nvidia.com>
    Reviewed-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    [hch: simplified host1x_dma_configure based on a comment from Thierry,
          rewrote changelog]
    Signed-off-by: Christoph Hellwig <hch@lst.de>

diff --git a/include/linux/platform_device.h b/include/linux/platform_device.h
index 49f634d96118..3097c943fab9 100644
--- a/include/linux/platform_device.h
+++ b/include/linux/platform_device.h
@@ -356,6 +356,8 @@ extern int platform_pm_restore(struct device *dev);
 #define platform_pm_restore		NULL
 #endif
 
+extern int platform_dma_configure(struct device *dev);
+
 #ifdef CONFIG_PM_SLEEP
 #define USE_PLATFORM_PM_SLEEP_OPS \
 	.suspend = platform_pm_suspend, \

commit 277036f05be242540b7bfe75f226107d04f51b06
Author: Jan Kiszka <jan.kiszka@siemens.com>
Date:   Fri Jun 2 07:43:27 2017 +0200

    platform: Accept const properties
    
    Aligns us with device_add_properties, the function we call.
    
    Signed-off-by: Jan Kiszka <jan.kiszka@siemens.com>
    Reviewed-by: Andy Shevchenko <andy.shevchenko@gmail.com>

diff --git a/include/linux/platform_device.h b/include/linux/platform_device.h
index 98c2a7c7108e..49f634d96118 100644
--- a/include/linux/platform_device.h
+++ b/include/linux/platform_device.h
@@ -172,7 +172,7 @@ extern int platform_device_add_resources(struct platform_device *pdev,
 extern int platform_device_add_data(struct platform_device *pdev,
 				    const void *data, size_t size);
 extern int platform_device_add_properties(struct platform_device *pdev,
-					  struct property_entry *properties);
+				const struct property_entry *properties);
 extern int platform_device_add(struct platform_device *pdev);
 extern void platform_device_del(struct platform_device *pdev);
 extern void platform_device_put(struct platform_device *pdev);

commit f4d05266032346531b9f889e26aa31a0cf2a9822
Author: Heikki Krogerus <heikki.krogerus@linux.intel.com>
Date:   Tue Mar 29 14:52:23 2016 +0300

    device property: don't bother the drivers with struct property_set
    
    Since device_add_property_set() now always takes a copy of
    the property_set, and also since the fwnode type is always
    hard coded to be FWNODE_PDATA, there is no need for the
    drivers to deliver the entire struct property_set. The
    function can just create the instance of it on its own and
    bind the properties from the drivers to it on the spot.
    
    This renames device_add_property_set() to
    device_add_properties(). The function now takes struct
    property_entry as its parameter instead of struct
    property_set.
    
    Reviewed-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    Reviewed-by: Mika Westerberg <mika.westerberg@linux.intel.com>
    Acked-by: Thierry Reding <treding@nvidia.com>
    Acked-by: Lee Jones <lee.jones@linaro.org>
    Signed-off-by: Heikki Krogerus <heikki.krogerus@linux.intel.com>
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>

diff --git a/include/linux/platform_device.h b/include/linux/platform_device.h
index 03b755521fd9..98c2a7c7108e 100644
--- a/include/linux/platform_device.h
+++ b/include/linux/platform_device.h
@@ -18,7 +18,7 @@
 #define PLATFORM_DEVID_AUTO	(-2)
 
 struct mfd_cell;
-struct property_set;
+struct property_entry;
 
 struct platform_device {
 	const char	*name;
@@ -73,7 +73,7 @@ struct platform_device_info {
 		size_t size_data;
 		u64 dma_mask;
 
-		const struct property_set *pset;
+		struct property_entry *properties;
 };
 extern struct platform_device *platform_device_register_full(
 		const struct platform_device_info *pdevinfo);
@@ -172,7 +172,7 @@ extern int platform_device_add_resources(struct platform_device *pdev,
 extern int platform_device_add_data(struct platform_device *pdev,
 				    const void *data, size_t size);
 extern int platform_device_add_properties(struct platform_device *pdev,
-					  const struct property_set *pset);
+					  struct property_entry *properties);
 extern int platform_device_add(struct platform_device *pdev);
 extern void platform_device_del(struct platform_device *pdev);
 extern void platform_device_put(struct platform_device *pdev);

commit 67990608c8b95d2b8ccc29932376ae73d5818727
Merge: c17488d06666 a889f766dbb7
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Tue Jan 12 20:25:09 2016 -0800

    Merge tag 'pm+acpi-4.5-rc1-1' of git://git.kernel.org/pub/scm/linux/kernel/git/rafael/linux-pm
    
    Pull oower management and ACPI updates from Rafael Wysocki:
     "As far as the number of commits goes, ACPICA takes the lead this time,
      followed by cpufreq and the device properties framework changes.
    
      The most significant new feature is the debugfs-based interface to the
      ACPICA's AML debugger added in the previous cycle and a new user space
      tool for accessing it.
    
      On the cpufreq front, the core is updated to handle governors more
      efficiently, particularly on systems where a single cpufreq policy
      object is shared between multiple CPUs, and there are quite a few
      changes in drivers (intel_pstate, cpufreq-dt etc).
    
      The device properties framework is updated to handle built-in (ie
      included in the kernel itself) device properties better, among other
      things by adding a fallback mechanism that will allow drivers to
      provide default properties to be used in case the plaform firmware
      doesn't provide the properties expected by them.
    
      The Operating Performance Points (OPP) framework gets new DT bindings
      and debugfs support.
    
      A new cpufreq driver for ST platforms is added and the ACPI driver for
      AMD SoCs will now support the APM X-Gene ACPI I2C device.
    
      The rest is mostly fixes and cleanups all over.
    
      Specifics:
    
       - Add a debugfs-based interface for interacting with the ACPICA's AML
         debugger introduced in the previous cycle and a new user space tool
         for that, fix some bugs related to the AML debugger and clean up
         the code in question (Lv Zheng, Dan Carpenter, Colin Ian King,
         Markus Elfring).
    
       - Update ACPICA to upstream revision 20151218 including a number of
         fixes and cleanups in the ACPICA core (Bob Moore, Lv Zheng, Labbe
         Corentin, Prarit Bhargava, Colin Ian King, David E Box, Rafael
         Wysocki).
    
         In particular, the previously added erroneous support for the _SUB
         object is dropped, the concatenate operator will support all ACPI
         objects now, the Debug Object handling is improved, the SuperName
         handling of parameters being control methods is fixed, the
         ObjectType operator handling is updated to follow ACPI 5.0A and the
         handling of CondRefOf and RefOf is updated accordingly, module-
         level code will be executed after loading each ACPI table now
         (instead of being run once after all tables containing AML have
         been loaded), the Operation Region handlers management is updated
         to fix some reported problems and a the ACPICA code in the kernel
         is more in line with the upstream now.
    
       - Update the ACPI backlight driver to provide information on whether
         or not it will generate key-presses for brightness change hotkeys
         and update some platform drivers (dell-wmi, thinkpad_acpi) to use
         that information to avoid sending double key-events to users pace
         for these, add new ACPI backlight quirks (Hans de Goede, Aaron Lu,
         Adrien Schildknecht).
    
       - Improve the ACPI handling of interrupt GPIOs (Christophe Ricard).
    
       - Fix the handling of the list of device IDs of device objects found
         in the ACPI namespace and add a helper for checking if there is a
         device object for a given device ID (Lukas Wunner).
    
       - Change the logic in the ACPI namespace scanning code to create
         struct acpi_device objects for all ACPI device objects found in the
         namespace even if _STA fails for them which helps to avoid device
         enumeration problems on Microsoft Surface 3 (Aaron Lu).
    
       - Add support for the APM X-Gene ACPI I2C device to the ACPI driver
         for AMD SoCs (Loc Ho).
    
       - Fix the long-standing issue with the DMA controller on Intel SoCs
         where ACPI tables have no power management support for the DMA
         controller itself, but it can be powered off automatically when the
         last (other) device on the SoC is powered off via ACPI and clean up
         the ACPI driver for Intel SoCs (acpi-lpss) after previous attempts
         to fix that problem (Andy Shevchenko).
    
       - Assorted ACPI fixes and cleanups (Andy Lutomirski, Colin Ian King,
         Javier Martinez Canillas, Ken Xue, Mathias Krause, Rafael Wysocki,
         Sinan Kaya).
    
       - Update the device properties framework for better handling of
         built-in properties, add support for built-in properties to the
         platform bus type, update the MFD subsystem's handling of device
         properties and add support for passing default configuration data
         as device properties to the intel-lpss MFD drivers, convert the
         designware I2C driver to use the unified device properties API and
         add a fallback mechanism for using default built-in properties if
         the platform firmware fails to provide the properties as expected
         by drivers (Andy Shevchenko, Mika Westerberg, Heikki Krogerus,
         Andrew Morton).
    
       - Add new Device Tree bindings to the Operating Performance Points
         (OPP) framework and update the exynos4412 DT binding accordingly,
         introduce debugfs support for the OPP framework (Viresh Kumar,
         Bartlomiej Zolnierkiewicz).
    
       - Migrate the mt8173 cpufreq driver to the new OPP bindings (Pi-Cheng
         Chen).
    
       - Update the cpufreq core to make the handling of governors more
         efficient, especially on systems where policy objects are shared
         between multiple CPUs (Viresh Kumar, Rafael Wysocki).
    
       - Fix cpufreq governor handling on configurations with
         CONFIG_HZ_PERIODIC set (Chen Yu).
    
       - Clean up the cpufreq core code related to the boost sysfs knob
         support and update the ACPI cpufreq driver accordingly (Rafael
         Wysocki).
    
       - Add a new cpufreq driver for ST platforms and corresponding Device
         Tree bindings (Lee Jones).
    
       - Update the intel_pstate driver to allow the P-state selection
         algorithm used by it to depend on the CPU ID of the processor it is
         running on, make it use a special P-state selection algorithm (with
         an IO wait time compensation tweak) on Atom CPUs based on the
         Airmont and Silvermont cores so as to reduce their energy
         consumption and improve intel_pstate documentation (Philippe
         Longepe, Srinivas Pandruvada).
    
       - Update the cpufreq-dt driver to support registering cooling devices
         that use the (P * V^2 * f) dynamic power draw formula where V is
         the voltage, f is the frequency and P is a constant coefficient
         provided by Device Tree and update the arm_big_little cpufreq
         driver to use that support (Punit Agrawal).
    
       - Assorted cpufreq driver (cpufreq-dt, qoriq, pcc-cpufreq,
         blackfin-cpufreq) updates (Andrzej Hajda, Hongtao Jia, Jacob
         Tanenbaum, Markus Elfring).
    
       - cpuidle core tweaks related to polling and measured_us calculation
         (Rik van Riel).
    
       - Removal of modularity from a few cpuidle drivers (clps711x, ux500,
         exynos) that cannot be built as modules in practice (Paul
         Gortmaker).
    
       - PM core update to prevent devices from being probed during system
         suspend/resume which is generally problematic and may lead to
         inconsistent behavior (Grygorii Strashko).
    
       - Assorted updates of the PM core and related code (Julia Lawall,
         Manuel Pégourié-Gonnard, Maruthi Bayyavarapu, Rafael Wysocki, Ulf
         Hansson).
    
       - PNP bus type updates (Christophe Le Roy, Heiner Kallweit).
    
       - PCI PM code cleanups (Jarkko Nikula, Julia Lawall).
    
       - cpupower tool updates (Jacob Tanenbaum, Thomas Renninger)"
    
    * tag 'pm+acpi-4.5-rc1-1' of git://git.kernel.org/pub/scm/linux/kernel/git/rafael/linux-pm: (177 commits)
      PM / clk: don't leave clocks enabled when driver not bound
      i2c: dw: Add APM X-Gene ACPI I2C device support
      ACPI / APD: Add APM X-Gene ACPI I2C device support
      ACPI / LPSS: change 'does not have' to 'has' in comment
      Revert "dmaengine: dw: platform: provide platform data for Intel"
      dmaengine: dw: return immediately from IRQ when DMA isn't in use
      dmaengine: dw: platform: power on device on shutdown
      ACPI / LPSS: override power state for LPSS DMA device
      PM / OPP: Use snprintf() instead of sprintf()
      Documentation: cpufreq: intel_pstate: enhance documentation
      ACPI, PCI, irq: remove redundant check for null string pointer
      ACPI / video: driver must be registered before checking for keypresses
      cpufreq-dt: fix handling regulator_get_voltage() result
      cpufreq: governor: Fix negative idle_time when configured with CONFIG_HZ_PERIODIC
      PM / sleep: Add support for read-only sysfs attributes
      ACPI: Fix white space in a structure definition
      ACPI / SBS: fix inconsistent indenting inside if statement
      PNP: respect PNP_DRIVER_RES_DO_NOT_CHANGE when detaching
      ACPI / PNP: constify device IDs
      ACPI / PCI: Simplify acpi_penalize_isa_irq()
      ...

commit 4b83555d5098e73cf2c5ca7f86c17ca0ba3b968e
Author: Stephen Boyd <sboyd@codeaurora.org>
Date:   Wed Jan 6 17:12:47 2016 -0800

    driver-core: platform: Add platform_irq_count()
    
    A recent patch added calls to of_irq_count() in the qcom pinctrl
    drivers and that caused module build failures because
    of_irq_count() is not an exported symbol. We shouldn't export
    of_irq_count() to modules because it's an internal OF API that
    shouldn't be used by drivers. Platform drivers should use
    platform device APIs instead. Therefore, add a platform_irq_count()
    API that mirrors the of_irq_count() API so that platform drivers
    can stay DT agnostic.
    
    Cc: Andy Gross <andy.gross@linaro.org>
    Acked-by: Rob Herring <robh@kernel.org>
    Acked-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org
    Signed-off-by: Stephen Boyd <sboyd@codeaurora.org>
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>

diff --git a/include/linux/platform_device.h b/include/linux/platform_device.h
index dc777be5f2e1..6abd019c76f8 100644
--- a/include/linux/platform_device.h
+++ b/include/linux/platform_device.h
@@ -51,6 +51,7 @@ extern void arch_setup_pdev_archdata(struct platform_device *);
 extern struct resource *platform_get_resource(struct platform_device *,
 					      unsigned int, unsigned int);
 extern int platform_get_irq(struct platform_device *, unsigned int);
+extern int platform_irq_count(struct platform_device *);
 extern struct resource *platform_get_resource_byname(struct platform_device *,
 						     unsigned int,
 						     const char *);

commit 00bbc1d8e46a92ce7bd80622cf4b09c3b727a741
Author: Mika Westerberg <mika.westerberg@linux.intel.com>
Date:   Mon Nov 30 17:11:38 2015 +0200

    driver core: platform: Add support for built-in device properties
    
    Make it possible to pass built-in device properties to platform device
    drivers. This is useful if the system does not have any firmware interface
    like Device Tree or ACPI which provides these.
    
    Properties associated with the platform device will be automatically
    released when the corresponding device is removed.
    
    Suggested-by: Arnd Bergmann <arnd@arndb.de>
    Signed-off-by: Mika Westerberg <mika.westerberg@linux.intel.com>
    Signed-off-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>

diff --git a/include/linux/platform_device.h b/include/linux/platform_device.h
index dc777be5f2e1..dba40b1c41dc 100644
--- a/include/linux/platform_device.h
+++ b/include/linux/platform_device.h
@@ -18,6 +18,7 @@
 #define PLATFORM_DEVID_AUTO	(-2)
 
 struct mfd_cell;
+struct property_set;
 
 struct platform_device {
 	const char	*name;
@@ -70,6 +71,8 @@ struct platform_device_info {
 		const void *data;
 		size_t size_data;
 		u64 dma_mask;
+
+		const struct property_set *pset;
 };
 extern struct platform_device *platform_device_register_full(
 		const struct platform_device_info *pdevinfo);
@@ -167,6 +170,8 @@ extern int platform_device_add_resources(struct platform_device *pdev,
 					 unsigned int num);
 extern int platform_device_add_data(struct platform_device *pdev,
 				    const void *data, size_t size);
+extern int platform_device_add_properties(struct platform_device *pdev,
+					  const struct property_set *pset);
 extern int platform_device_add(struct platform_device *pdev);
 extern void platform_device_del(struct platform_device *pdev);
 extern void platform_device_put(struct platform_device *pdev);

commit dbe2256ddd8e8420c254c79f4045c41cb5f4bd6b
Author: Thierry Reding <treding@nvidia.com>
Date:   Fri Sep 25 17:29:04 2015 +0200

    driver-core: platform: Provide helpers for multi-driver modules
    
    Some modules register several sub-drivers. Provide a helper that makes
    it easy to register and unregister a list of sub-drivers, as well as
    unwind properly on error.
    
    Signed-off-by: Thierry Reding <treding@nvidia.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/include/linux/platform_device.h b/include/linux/platform_device.h
index bba08f44cc97..dc777be5f2e1 100644
--- a/include/linux/platform_device.h
+++ b/include/linux/platform_device.h
@@ -270,6 +270,14 @@ extern struct platform_device *__platform_create_bundle(
 	struct resource *res, unsigned int n_res,
 	const void *data, size_t size, struct module *module);
 
+int __platform_register_drivers(struct platform_driver * const *drivers,
+				unsigned int count, struct module *owner);
+void platform_unregister_drivers(struct platform_driver * const *drivers,
+				 unsigned int count);
+
+#define platform_register_drivers(drivers, count) \
+	__platform_register_drivers(drivers, count, THIS_MODULE)
+
 /* early platform driver interface */
 struct early_platform_driver {
 	const char *class_str;

commit f309d4443130bf814e991f836e919dca22df37ae
Author: Paul Gortmaker <paul.gortmaker@windriver.com>
Date:   Fri May 1 20:10:57 2015 -0400

    platform_device: better support builtin boilerplate avoidance
    
    We have macros that help reduce the boilerplate for modules
    that register with no extra init/exit complexity other than the
    most standard use case.  However we see an increasing number of
    non-modular drivers using these modular_driver() type register
    functions.
    
    There are several downsides to this:
    1) The code can appear modular to a reader of the code, and they
       won't know if the code really is modular without checking the
       Makefile and Kconfig to see if compilation is governed by a
       bool or tristate.
    2) Coders of drivers may be tempted to code up an __exit function
       that is never used, just in order to satisfy the required three
       args of the modular registration function.
    3) Non-modular code ends up including the <module.h> which increases
       CPP overhead that they don't need.
    4) It hinders us from performing better separation of the module
       init code and the generic init code.
    
    Here we introduce similar macros, with the mapping from module_driver
    to builtin_driver and similar, so that simple changes of:
    
      module_platform_driver()       --->  builtin_platform_driver()
      module_platform_driver_probe() --->  builtin_platform_driver_probe().
    
    can help us avoid #3 above, without having to code up the same
    __init functions and device_initcall() boilerplate.
    
    For non modular code, module_init becomes __initcall.  But direct use
    of __initcall is discouraged, vs. one of the priority categorized
    subgroups.  As __initcall gets mapped onto device_initcall, our
    use of device_initcall directly in this change means that the
    runtime impact is zero -- drivers will remain at level 6 in the
    initcall ordering.
    
    Cc: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>

diff --git a/include/linux/platform_device.h b/include/linux/platform_device.h
index 58f1e75ba105..bba08f44cc97 100644
--- a/include/linux/platform_device.h
+++ b/include/linux/platform_device.h
@@ -222,6 +222,15 @@ static inline void platform_set_drvdata(struct platform_device *pdev,
 	module_driver(__platform_driver, platform_driver_register, \
 			platform_driver_unregister)
 
+/* builtin_platform_driver() - Helper macro for builtin drivers that
+ * don't do anything special in driver init.  This eliminates some
+ * boilerplate.  Each driver may only use this macro once, and
+ * calling it replaces device_initcall().  Note this is meant to be
+ * a parallel of module_platform_driver() above, but w/o _exit stuff.
+ */
+#define builtin_platform_driver(__platform_driver) \
+	builtin_driver(__platform_driver, platform_driver_register)
+
 /* module_platform_driver_probe() - Helper macro for drivers that don't do
  * anything special in module init/exit.  This eliminates a lot of
  * boilerplate.  Each module may only use this macro once, and
@@ -240,6 +249,20 @@ static void __exit __platform_driver##_exit(void) \
 } \
 module_exit(__platform_driver##_exit);
 
+/* builtin_platform_driver_probe() - Helper macro for drivers that don't do
+ * anything special in device init.  This eliminates some boilerplate.  Each
+ * driver may only use this macro once, and using it replaces device_initcall.
+ * This is meant to be a parallel of module_platform_driver_probe above, but
+ * without the __exit parts.
+ */
+#define builtin_platform_driver_probe(__platform_driver, __platform_probe) \
+static int __init __platform_driver##_init(void) \
+{ \
+	return platform_driver_probe(&(__platform_driver), \
+				     __platform_probe);    \
+} \
+device_initcall(__platform_driver##_init); \
+
 #define platform_create_bundle(driver, probe, res, n_res, data, size) \
 	__platform_create_bundle(driver, probe, res, n_res, data, size, THIS_MODULE)
 extern struct platform_device *__platform_create_bundle(

commit ce793486e23e0162a732c605189c8028e0910e86
Author: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
Date:   Mon Mar 16 23:49:03 2015 +0100

    driver core / ACPI: Represent ACPI companions using fwnode_handle
    
    Now that we have struct fwnode_handle, we can use that to point to
    ACPI companions from struct device objects instead of pointing to
    struct acpi_device directly.
    
    There are two benefits from that.  First, the somewhat ugly and
    hackish struct acpi_dev_node can be dropped and, second, the same
    struct fwnode_handle pointer can be used in the future to point
    to other (non-ACPI) firmware device node types.
    
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Acked-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Acked-by: Grant Likely <grant.likely@linaro.org>

diff --git a/include/linux/platform_device.h b/include/linux/platform_device.h
index ae4882ca4a64..58f1e75ba105 100644
--- a/include/linux/platform_device.h
+++ b/include/linux/platform_device.h
@@ -59,7 +59,7 @@ extern int platform_add_devices(struct platform_device **, int);
 
 struct platform_device_info {
 		struct device *parent;
-		struct acpi_dev_node acpi_node;
+		struct fwnode_handle *fwnode;
 
 		const char *name;
 		int id;

commit 291f653a140ad880426125e5e9dbb70f4c184683
Author: Wolfram Sang <wsa@the-dreams.de>
Date:   Tue Oct 28 17:40:42 2014 +0100

    core: platform: let platform_create_bundle initialize module owner
    
    Since commit 9447057eaff8 ("platform_device: use a macro instead of
    platform_driver_register"), platform_driver_register() always overwrites
    the .owner field of a platform_driver with THIS_MODULE. This breaks
    platform_create_bundle() which uses it via platform_driver_probe() from
    within the platform core instead of the module init. Fix it by using a
    similar #define construct to obtain THIS_MODULE and pass it on later.
    
    Reported-by: Russell King <rmk+kernel@arm.linux.org.uk>
    Signed-off-by: Wolfram Sang <wsa@the-dreams.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/include/linux/platform_device.h b/include/linux/platform_device.h
index c8d95c60da19..ae4882ca4a64 100644
--- a/include/linux/platform_device.h
+++ b/include/linux/platform_device.h
@@ -240,10 +240,12 @@ static void __exit __platform_driver##_exit(void) \
 } \
 module_exit(__platform_driver##_exit);
 
-extern struct platform_device *platform_create_bundle(
+#define platform_create_bundle(driver, probe, res, n_res, data, size) \
+	__platform_create_bundle(driver, probe, res, n_res, data, size, THIS_MODULE)
+extern struct platform_device *__platform_create_bundle(
 	struct platform_driver *driver, int (*probe)(struct platform_device *),
 	struct resource *res, unsigned int n_res,
-	const void *data, size_t size);
+	const void *data, size_t size, struct module *module);
 
 /* early platform driver interface */
 struct early_platform_driver {

commit c3b50dc219e1437e4dcb6a1639b004648dc29faa
Author: Wolfram Sang <wsa@the-dreams.de>
Date:   Tue Oct 28 17:40:41 2014 +0100

    core: platform: let platform_driver_probe initialize module owner
    
    Since commit 9447057eaff8 ("platform_device: use a macro instead of
    platform_driver_register"), platform_driver_register() always overwrites
    the .owner field of a platform_driver with THIS_MODULE. This breaks
    platform_driver_probe() which uses it from within the platform core
    instead of the module init. Fix it by using a similar #define construct
    to obtain THIS_MODULE and pass it on later.
    
    Reported-by: Russell King <rmk+kernel@arm.linux.org.uk>
    Signed-off-by: Wolfram Sang <wsa@the-dreams.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/include/linux/platform_device.h b/include/linux/platform_device.h
index 153d303af7eb..c8d95c60da19 100644
--- a/include/linux/platform_device.h
+++ b/include/linux/platform_device.h
@@ -197,8 +197,10 @@ extern void platform_driver_unregister(struct platform_driver *);
 /* non-hotpluggable platform devices may use this so that probe() and
  * its support may live in __init sections, conserving runtime memory.
  */
-extern int platform_driver_probe(struct platform_driver *driver,
-		int (*probe)(struct platform_device *));
+#define platform_driver_probe(drv, probe) \
+	__platform_driver_probe(drv, probe, THIS_MODULE)
+extern int __platform_driver_probe(struct platform_driver *driver,
+		int (*probe)(struct platform_device *), struct module *module);
 
 static inline void *platform_get_drvdata(const struct platform_device *pdev)
 {

commit 3d713e0e382e6fcfb4bba1501645b66c129ad60b
Author: Kim Phillips <kim.phillips@freescale.com>
Date:   Mon Jun 2 19:42:58 2014 -0500

    driver core: platform: add device binding path 'driver_override'
    
    Needed by platform device drivers, such as the upcoming
    vfio-platform driver, in order to bypass the existing OF, ACPI,
    id_table and name string matches, and successfully be able to be
    bound to any device, like so:
    
    echo vfio-platform > /sys/bus/platform/devices/fff51000.ethernet/driver_override
    echo fff51000.ethernet > /sys/bus/platform/devices/fff51000.ethernet/driver/unbind
    echo fff51000.ethernet > /sys/bus/platform/drivers_probe
    
    This mimics "PCI: Introduce new device binding path using
    pci_dev.driver_override", which is an interface enhancement
    for more deterministic PCI device binding, e.g., when in the
    presence of hotplug.
    
    Reviewed-by: Alex Williamson <alex.williamson@redhat.com>
    Reviewed-by: Alexander Graf <agraf@suse.de>
    Reviewed-by: Stuart Yoder <stuart.yoder@freescale.com>
    Signed-off-by: Kim Phillips <kim.phillips@freescale.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/include/linux/platform_device.h b/include/linux/platform_device.h
index 16f6654082dd..153d303af7eb 100644
--- a/include/linux/platform_device.h
+++ b/include/linux/platform_device.h
@@ -28,6 +28,7 @@ struct platform_device {
 	struct resource	*resource;
 
 	const struct platform_device_id	*id_entry;
+	char *driver_override; /* Driver name to force a match */
 
 	/* MFD cell pointer */
 	struct mfd_cell *mfd_cell;

commit 3f9120b0424f3e03c75518cb751f9e2bfa73c32a
Author: Johan Hovold <jhovold@gmail.com>
Date:   Mon Sep 23 16:27:26 2013 +0200

    driver core: prevent deferred probe with platform_driver_probe
    
    Prevent drivers relying on platform_driver_probe from requesting
    deferred probing in order to avoid further futile probe attempts (either
    the driver has been unregistered or its probe function has been set to
    platform_drv_probe_fail when probing is retried).
    
    Note that several platform drivers currently return subsystem errors
    from probe and that these can include -EPROBE_DEFER (e.g. if a gpio
    request fails).
    
    Add a warning to platform_drv_probe that can be used to catch drivers
    that inadvertently request probe deferral while using
    platform_driver_probe.
    
    Signed-off-by: Johan Hovold <jhovold@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/include/linux/platform_device.h b/include/linux/platform_device.h
index ce8e4ffd78c7..16f6654082dd 100644
--- a/include/linux/platform_device.h
+++ b/include/linux/platform_device.h
@@ -178,6 +178,7 @@ struct platform_driver {
 	int (*resume)(struct platform_device *);
 	struct device_driver driver;
 	const struct platform_device_id *id_table;
+	bool prevent_deferred_probe;
 };
 
 #define to_platform_driver(drv)	(container_of((drv), struct platform_driver, \

commit 74b9272bbedf45cb01a048217830d64d59aaa73b
Merge: f5b63ac0f77e 6dd18e4684f3
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Thu Jul 4 15:51:45 2013 -0700

    Merge tag 'devicetree-for-linus' of git://git.secretlab.ca/git/linux
    
    Pull device tree updates from Grant Likely:
     "This branch contains the following changes:
       - Removal of CONFIG_OF_DEVICE, it is always enabled by CONFIG_OF
       - Remove #ifdef from linux/of_platform.h to increase compiler syntax
         coverage
       - Bug fix for address decoding on Bimini and js2x powerpc platforms.
       - miscellaneous binding changes
    
      One note on the above.  The binding changes going in from all kinds of
      different trees has gotten rather out of hand.  I picked up some
      during this cycle, but even going though my tree isn't a great fit.
    
      Ian Campbell has prototyped splitting the bindings and .dtb files into
      a separate repository.  The plan is to migrate to using that sometime
      in the next few kernel releases which should get rid of a lot of the
      churn on binding docs and .dts files"
    
    * tag 'devicetree-for-linus' of git://git.secretlab.ca/git/linux:
      of: Fix address decoding on Bimini and js2x machines
      of: remove CONFIG_OF_DEVICE
      usb: chipidea: depend on CONFIG_OF instead of CONFIG_OF_DEVICE
      of: remove of_platform_driver
      ibmebus: convert of_platform_driver to platform_driver
      driver core: move to_platform_driver to platform_device.h
      mfd: DT bindings for the palmas family MFD
      ARM: dts: omap3-devkit8000: fix NAND memory binding
      of/base: fix typos
      of: remove #ifdef from linux/of_platform.h

commit 10dbc5e39a60944536f3ca59bc9a8a8896355714
Author: Rob Herring <rob.herring@calxeda.com>
Date:   Sun Apr 21 16:38:31 2013 -0500

    driver core: move to_platform_driver to platform_device.h
    
    In converting the last remaining of_platform_driver (ibmebus) to a regular
    platform driver, to_platform_driver is needed to replace
    to_of_platform_driver.
    
    Signed-off-by: Rob Herring <rob.herring@calxeda.com>
    Acked-by: Arnd Bergmann <arnd@arndb.de>
    Tested-by: Benjamin Herrenschmidt <benh@kernel.crashing.org>
    Signed-off-by: Grant Likely <grant.likely@linaro.org>

diff --git a/include/linux/platform_device.h b/include/linux/platform_device.h
index 9abf1db6aea6..3413897474e1 100644
--- a/include/linux/platform_device.h
+++ b/include/linux/platform_device.h
@@ -180,6 +180,9 @@ struct platform_driver {
 	const struct platform_device_id *id_table;
 };
 
+#define to_platform_driver(drv)	(container_of((drv), struct platform_driver, \
+				 driver))
+
 extern int platform_driver_register(struct platform_driver *);
 extern void platform_driver_unregister(struct platform_driver *);
 

commit 9447057eaff871dd7c63c808de761b8732407169
Author: Libo Chen <clbchenlibo.chen@huawei.com>
Date:   Sat May 25 12:40:50 2013 +0800

    platform_device: use a macro instead of platform_driver_register
    
    I found a lot of mistakes using struct platform_driver without owner
    so I make a macro instead of the function platform_driver_register.
    It can set owner in it, then guys don`t care about module owner again.
    
    Signed-off-by: Libo Chen <libo.chen@huawei.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/include/linux/platform_device.h b/include/linux/platform_device.h
index 9abf1db6aea6..cd46ee58b9dc 100644
--- a/include/linux/platform_device.h
+++ b/include/linux/platform_device.h
@@ -180,7 +180,13 @@ struct platform_driver {
 	const struct platform_device_id *id_table;
 };
 
-extern int platform_driver_register(struct platform_driver *);
+/*
+ * use a macro to avoid include chaining to get THIS_MODULE
+ */
+#define platform_driver_register(drv) \
+	__platform_driver_register(drv, THIS_MODULE)
+extern int __platform_driver_register(struct platform_driver *,
+					struct module *);
 extern void platform_driver_unregister(struct platform_driver *);
 
 /* non-hotpluggable platform devices may use this so that probe() and

commit 6ae07f27ab202069bd567967a0099070eb7f77d5
Author: Fabio Porcedda <fabio.porcedda@gmail.com>
Date:   Tue Mar 26 10:35:17 2013 +0100

    driver core: platform_device.h: fix checkpatch errors and warnings
    
    Signed-off-by: Fabio Porcedda <fabio.porcedda@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/include/linux/platform_device.h b/include/linux/platform_device.h
index c082c71f7225..9abf1db6aea6 100644
--- a/include/linux/platform_device.h
+++ b/include/linux/platform_device.h
@@ -20,12 +20,12 @@
 struct mfd_cell;
 
 struct platform_device {
-	const char	* name;
+	const char	*name;
 	int		id;
 	bool		id_auto;
 	struct device	dev;
 	u32		num_resources;
-	struct resource	* resource;
+	struct resource	*resource;
 
 	const struct platform_device_id	*id_entry;
 
@@ -47,9 +47,12 @@ extern struct bus_type platform_bus_type;
 extern struct device platform_bus;
 
 extern void arch_setup_pdev_archdata(struct platform_device *);
-extern struct resource *platform_get_resource(struct platform_device *, unsigned int, unsigned int);
+extern struct resource *platform_get_resource(struct platform_device *,
+					      unsigned int, unsigned int);
 extern int platform_get_irq(struct platform_device *, unsigned int);
-extern struct resource *platform_get_resource_byname(struct platform_device *, unsigned int, const char *);
+extern struct resource *platform_get_resource_byname(struct platform_device *,
+						     unsigned int,
+						     const char *);
 extern int platform_get_irq_byname(struct platform_device *, const char *);
 extern int platform_add_devices(struct platform_device **, int);
 
@@ -161,7 +164,8 @@ extern struct platform_device *platform_device_alloc(const char *name, int id);
 extern int platform_device_add_resources(struct platform_device *pdev,
 					 const struct resource *res,
 					 unsigned int num);
-extern int platform_device_add_data(struct platform_device *pdev, const void *data, size_t size);
+extern int platform_device_add_data(struct platform_device *pdev,
+				    const void *data, size_t size);
 extern int platform_device_add(struct platform_device *pdev);
 extern void platform_device_del(struct platform_device *pdev);
 extern void platform_device_put(struct platform_device *pdev);
@@ -190,7 +194,8 @@ static inline void *platform_get_drvdata(const struct platform_device *pdev)
 	return dev_get_drvdata(&pdev->dev);
 }
 
-static inline void platform_set_drvdata(struct platform_device *pdev, void *data)
+static inline void platform_set_drvdata(struct platform_device *pdev,
+					void *data)
 {
 	dev_set_drvdata(&pdev->dev, data);
 }
@@ -222,10 +227,10 @@ static void __exit __platform_driver##_exit(void) \
 } \
 module_exit(__platform_driver##_exit);
 
-extern struct platform_device *platform_create_bundle(struct platform_driver *driver,
-					int (*probe)(struct platform_device *),
-					struct resource *res, unsigned int n_res,
-					const void *data, size_t size);
+extern struct platform_device *platform_create_bundle(
+	struct platform_driver *driver, int (*probe)(struct platform_device *),
+	struct resource *res, unsigned int n_res,
+	const void *data, size_t size);
 
 /* early platform driver interface */
 struct early_platform_driver {

commit bab734fcdf2c690371e6749ce484b17653b3cb0e
Author: Fabio Porcedda <fabio.porcedda@gmail.com>
Date:   Wed Jan 9 12:15:26 2013 +0100

    driver core: add helper macro for platform_driver_probe() boilerplate
    
    For simple modules that contain a single platform_driver without any
    additional setup code then ends up being a block of duplicated
    boilerplate.  This patch adds a new macro,
    module_platform_driver_probe(), which replaces the
    module_init()/module_exit() registrations with template functions.
    
    This macro use the same idea of module_platform_driver().
    
    This macro is useful to stop the misuse of module_platform_driver() for
    removing the platform_driver_probe() boilerplate.
    
    Signed-off-by: Fabio Porcedda <fabio.porcedda@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/include/linux/platform_device.h b/include/linux/platform_device.h
index a9ded9a3c175..c082c71f7225 100644
--- a/include/linux/platform_device.h
+++ b/include/linux/platform_device.h
@@ -204,6 +204,24 @@ static inline void platform_set_drvdata(struct platform_device *pdev, void *data
 	module_driver(__platform_driver, platform_driver_register, \
 			platform_driver_unregister)
 
+/* module_platform_driver_probe() - Helper macro for drivers that don't do
+ * anything special in module init/exit.  This eliminates a lot of
+ * boilerplate.  Each module may only use this macro once, and
+ * calling it replaces module_init() and module_exit()
+ */
+#define module_platform_driver_probe(__platform_driver, __platform_probe) \
+static int __init __platform_driver##_init(void) \
+{ \
+	return platform_driver_probe(&(__platform_driver), \
+				     __platform_probe);    \
+} \
+module_init(__platform_driver##_init); \
+static void __exit __platform_driver##_exit(void) \
+{ \
+	platform_driver_unregister(&(__platform_driver)); \
+} \
+module_exit(__platform_driver##_exit);
+
 extern struct platform_device *platform_create_bundle(struct platform_driver *driver,
 					int (*probe)(struct platform_device *),
 					struct resource *res, unsigned int n_res,

commit 863f9f30e6c1e30cb19a0cd17c5cf8879257dfd7
Author: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
Date:   Wed Nov 21 00:21:59 2012 +0100

    ACPI / platform: Initialize ACPI handles of platform devices in advance
    
    The current platform device creation and registration code in
    acpi_create_platform_device() is quite convoluted.  This function
    takes an ACPI device node as an argument and eventually calls
    platform_device_register_resndata() to create and register a
    platform device object on the basis of the information contained
    in that code.  However, it doesn't associate the new platform
    device with the ACPI node directly, but instead it relies on
    acpi_platform_notify(), called from within device_add(), to find
    that ACPI node again with the help of acpi_platform_find_device()
    and acpi_platform_match() and then attach the new platform device
    to it.  This causes an additional ACPI namespace walk to happen and
    is clearly suboptimal.
    
    Use the observation that it is now possible to initialize the ACPI
    handle of a device before calling device_add() for it to make this
    code more straightforward.  Namely, add a new field to struct
    platform_device_info allowing us to pass the ACPI handle of interest
    to platform_device_register_full(), which will then use it to
    initialize the new device's ACPI handle before registering it.
    This will cause acpi_platform_notify() to use the ACPI handle from
    the device structure directly instead of using the .find_device()
    routine provided by the device's bus type.  In consequence,
    acpi_platform_bus, acpi_platform_find_device(), and
    acpi_platform_match() are not necessary any more, so remove them.
    
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Reviewed-by: Mika Westerberg <mika.westerberg@linux.intel.com>
    Acked-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/include/linux/platform_device.h b/include/linux/platform_device.h
index 5711e9525a2a..a9ded9a3c175 100644
--- a/include/linux/platform_device.h
+++ b/include/linux/platform_device.h
@@ -55,6 +55,7 @@ extern int platform_add_devices(struct platform_device **, int);
 
 struct platform_device_info {
 		struct device *parent;
+		struct acpi_dev_node acpi_node;
 
 		const char *name;
 		int id;

commit 689ae231afbac8979f96100b372a5a73458baaa9
Author: Jean Delvare <khali@linux-fr.org>
Date:   Fri Jul 27 22:14:59 2012 +0200

    platform: Add support for automatic device IDs
    
    Right now we have support for explicit platform device IDs, as well as
    ID-less platform devices when a given device type can only have one
    instance. However there are cases where multiple instances of a device
    type can exist, and their IDs aren't (and can't be) known in advance
    and do not matter. In that case we need automatic device IDs to avoid
    device name collisions.
    
    I am using magic ID value -2 (PLATFORM_DEVID_AUTO) for this, similar
    to -1 for ID-less devices. The automatically allocated device IDs are
    global (to avoid an additional per-driver cost.) We keep note that the
    ID was automatically allocated so that it can be freed later.
    
    Note that we also restore the ID to PLATFORM_DEVID_AUTO on error and
    device deletion, to avoid avoid unexpected behavior on retry. I don't
    really expect retries on platform device addition, but better safe
    than sorry.
    
    Signed-off-by: Jean Delvare <khali@linux-fr.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/include/linux/platform_device.h b/include/linux/platform_device.h
index 60e9994ef405..5711e9525a2a 100644
--- a/include/linux/platform_device.h
+++ b/include/linux/platform_device.h
@@ -14,11 +14,15 @@
 #include <linux/device.h>
 #include <linux/mod_devicetable.h>
 
+#define PLATFORM_DEVID_NONE	(-1)
+#define PLATFORM_DEVID_AUTO	(-2)
+
 struct mfd_cell;
 
 struct platform_device {
 	const char	* name;
 	int		id;
+	bool		id_auto;
 	struct device	dev;
 	u32		num_resources;
 	struct resource	* resource;

commit eb59c505f8a5906ad2e053d14fab50eb8574fd6f
Merge: 1619ed8f6095 c233523b3d39
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Sun Jan 8 13:10:57 2012 -0800

    Merge branch 'pm-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/rafael/linux-pm
    
    * 'pm-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/rafael/linux-pm: (76 commits)
      PM / Hibernate: Implement compat_ioctl for /dev/snapshot
      PM / Freezer: fix return value of freezable_schedule_timeout_killable()
      PM / shmobile: Allow the A4R domain to be turned off at run time
      PM / input / touchscreen: Make st1232 use device PM QoS constraints
      PM / QoS: Introduce dev_pm_qos_add_ancestor_request()
      PM / shmobile: Remove the stay_on flag from SH7372's PM domains
      PM / shmobile: Don't include SH7372's INTCS in syscore suspend/resume
      PM / shmobile: Add support for the sh7372 A4S power domain / sleep mode
      PM: Drop generic_subsys_pm_ops
      PM / Sleep: Remove forward-only callbacks from AMBA bus type
      PM / Sleep: Remove forward-only callbacks from platform bus type
      PM: Run the driver callback directly if the subsystem one is not there
      PM / Sleep: Make pm_op() and pm_noirq_op() return callback pointers
      PM/Devfreq: Add Exynos4-bus device DVFS driver for Exynos4210/4212/4412.
      PM / Sleep: Merge internal functions in generic_ops.c
      PM / Sleep: Simplify generic system suspend callbacks
      PM / Hibernate: Remove deprecated hibernation snapshot ioctls
      PM / Sleep: Fix freezer failures due to racy usermodehelper_is_disabled()
      ARM: S3C64XX: Implement basic power domain support
      PM / shmobile: Use common always on power domain governor
      ...
    
    Fix up trivial conflict in fs/xfs/xfs_buf.c due to removal of unused
    XBT_FORCE_SLEEP bit

commit 9b39e73d0c2b265a7f8748b0e9a9f09be84079a8
Author: Rafael J. Wysocki <rjw@sisk.pl>
Date:   Sun Dec 18 00:34:24 2011 +0100

    PM / Sleep: Remove forward-only callbacks from platform bus type
    
    The forward-only PM callbacks provided by the platform bus type are
    not necessary any more, because the PM core executes driver callbacks
    when the corresponding subsystem callbacks are not present, so drop
    them.
    
    Signed-off-by: Rafael J. Wysocki <rjw@sisk.pl>

diff --git a/include/linux/platform_device.h b/include/linux/platform_device.h
index 2a23f7d1a825..b5267c951161 100644
--- a/include/linux/platform_device.h
+++ b/include/linux/platform_device.h
@@ -264,62 +264,34 @@ static inline char *early_platform_driver_setup_func(void)		\
 }
 #endif /* MODULE */
 
-#ifdef CONFIG_PM_SLEEP
-extern int platform_pm_prepare(struct device *dev);
-extern void platform_pm_complete(struct device *dev);
-#else
-#define platform_pm_prepare	NULL
-#define platform_pm_complete	NULL
-#endif
-
 #ifdef CONFIG_SUSPEND
 extern int platform_pm_suspend(struct device *dev);
-extern int platform_pm_suspend_noirq(struct device *dev);
 extern int platform_pm_resume(struct device *dev);
-extern int platform_pm_resume_noirq(struct device *dev);
 #else
 #define platform_pm_suspend		NULL
 #define platform_pm_resume		NULL
-#define platform_pm_suspend_noirq	NULL
-#define platform_pm_resume_noirq	NULL
 #endif
 
 #ifdef CONFIG_HIBERNATE_CALLBACKS
 extern int platform_pm_freeze(struct device *dev);
-extern int platform_pm_freeze_noirq(struct device *dev);
 extern int platform_pm_thaw(struct device *dev);
-extern int platform_pm_thaw_noirq(struct device *dev);
 extern int platform_pm_poweroff(struct device *dev);
-extern int platform_pm_poweroff_noirq(struct device *dev);
 extern int platform_pm_restore(struct device *dev);
-extern int platform_pm_restore_noirq(struct device *dev);
 #else
 #define platform_pm_freeze		NULL
 #define platform_pm_thaw		NULL
 #define platform_pm_poweroff		NULL
 #define platform_pm_restore		NULL
-#define platform_pm_freeze_noirq	NULL
-#define platform_pm_thaw_noirq		NULL
-#define platform_pm_poweroff_noirq	NULL
-#define platform_pm_restore_noirq	NULL
 #endif
 
 #ifdef CONFIG_PM_SLEEP
 #define USE_PLATFORM_PM_SLEEP_OPS \
-	.prepare = platform_pm_prepare, \
-	.complete = platform_pm_complete, \
 	.suspend = platform_pm_suspend, \
 	.resume = platform_pm_resume, \
 	.freeze = platform_pm_freeze, \
 	.thaw = platform_pm_thaw, \
 	.poweroff = platform_pm_poweroff, \
-	.restore = platform_pm_restore, \
-	.suspend_noirq = platform_pm_suspend_noirq, \
-	.resume_noirq = platform_pm_resume_noirq, \
-	.freeze_noirq = platform_pm_freeze_noirq, \
-	.thaw_noirq = platform_pm_thaw_noirq, \
-	.poweroff_noirq = platform_pm_poweroff_noirq, \
-	.restore_noirq = platform_pm_restore_noirq,
+	.restore = platform_pm_restore,
 #else
 #define USE_PLATFORM_PM_SLEEP_OPS
 #endif

commit 5a3072be6ce00b10565c78da05ad78df41310045
Author: Uwe Kleine-König <u.kleine-koenig@pengutronix.de>
Date:   Thu Dec 8 22:53:29 2011 +0100

    drivers_base: make argument to platform_device_register_full const
    
    platform_device_register_full doesn't modify *pdevinfo so it can be
    marked as const without further adaptions.
    
    Signed-off-by: Uwe Kleine-König <u.kleine-koenig@pengutronix.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>

diff --git a/include/linux/platform_device.h b/include/linux/platform_device.h
index 165a8d175370..5622fa24e97b 100644
--- a/include/linux/platform_device.h
+++ b/include/linux/platform_device.h
@@ -63,7 +63,7 @@ struct platform_device_info {
 		u64 dma_mask;
 };
 extern struct platform_device *platform_device_register_full(
-		struct platform_device_info *pdevinfo);
+		const struct platform_device_info *pdevinfo);
 
 /**
  * platform_device_register_resndata - add a platform-level device with

commit 907d0ed1c84114d4e8dafd66af982515d3739c90
Author: Lars-Peter Clausen <lars@metafoo.de>
Date:   Wed Nov 16 10:13:35 2011 +0100

    drivercore: Generalize module_platform_driver
    
    This patch generalizes the module_platform_driver macro and introduces a new
    module_driver macro. The module_driver macro takes a driver name, a register
    and a unregister function for this driver type. Using these it construct the
    module init and exit sections which register and unregister the driver. Since
    such init/exit sections are commonly found in drivers this macro can be used
    to eliminate a lot of boilerplate code.
    
    The macro is not intended to be used by driver modules directly, instead it
    should be used to generate bus specific macros for registering drivers like
    the module_platform_driver macro.
    
    Signed-off-by: Lars-Peter Clausen <lars@metafoo.de>
    Acked-by: Grant Likely <grant.likely@secretlab.ca>
    Acked-by: Jonathan Cameron <jic23@kernel.org>
    Acked-by: Wolfram Sang <w.sang@pengutronix.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>

diff --git a/include/linux/platform_device.h b/include/linux/platform_device.h
index 2a23f7d1a825..165a8d175370 100644
--- a/include/linux/platform_device.h
+++ b/include/linux/platform_device.h
@@ -196,16 +196,8 @@ static inline void platform_set_drvdata(struct platform_device *pdev, void *data
  * calling it replaces module_init() and module_exit()
  */
 #define module_platform_driver(__platform_driver) \
-static int __init __platform_driver##_init(void) \
-{ \
-	return platform_driver_register(&(__platform_driver)); \
-} \
-module_init(__platform_driver##_init); \
-static void __exit __platform_driver##_exit(void) \
-{ \
-	platform_driver_unregister(&(__platform_driver)); \
-} \
-module_exit(__platform_driver##_exit);
+	module_driver(__platform_driver, platform_driver_register, \
+			platform_driver_unregister)
 
 extern struct platform_device *platform_create_bundle(struct platform_driver *driver,
 					int (*probe)(struct platform_device *),

commit 18c0635363364ca2fc2d1cbd65bbf918daf89d1a
Merge: 41684f67af75 940ab88962bc
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Sat Oct 29 07:28:36 2011 -0700

    Merge branch 'spi/next' of git://git.secretlab.ca/git/linux-2.6
    
    * 'spi/next' of git://git.secretlab.ca/git/linux-2.6:
      drivercore: Add helper macro for platform_driver boilerplate
      spi: irq: Remove IRQF_DISABLED
      OMAP: SPI: Fix the trying to free nonexistent resource error
      spi/spi-ep93xx: add module.h include
      spi/tegra: fix compilation error in spi-tegra.c
      spi: spi-dw: fix all sparse warnings
      spi/spi-pl022: Call pl022_dma_remove(pl022) only if enable_dma is true
      spi/spi-pl022: calculate_effective_freq() must set rate <= requested rate
      spi/spi-pl022: Don't allocate more sg than required.
      spi/spi-pl022: Use GFP_ATOMIC for allocation from tasklet
      spi/spi-pl022: Resolve formatting issues

commit 940ab88962bc1aff3273a8356d64577a6e386736
Author: Grant Likely <grant.likely@secretlab.ca>
Date:   Wed Oct 5 11:29:49 2011 -0600

    drivercore: Add helper macro for platform_driver boilerplate
    
    For simple modules that contain a single platform_driver without any
    additional setup code then ends up being a block of duplicated
    boilerplate.  This patch adds a new macro, module_platform_driver(),
    which replaces the module_init()/module_exit() registrations with
    template functions.
    
    Signed-off-by: Grant Likely <grant.likely@secretlab.ca>
    Acked-by: Greg Kroah-Hartman <gregkh@suse.de>
    Reviewed-by: Magnus Damm <magnus.damm@gmail.com>
    Reviewed-by: Mark Brown <broonie@opensource.wolfsonmicro.com>
    Reviewed-by: Stephen Boyd <sboyd@codeaurora.org>

diff --git a/include/linux/platform_device.h b/include/linux/platform_device.h
index 27bb05aae70d..08de528afd66 100644
--- a/include/linux/platform_device.h
+++ b/include/linux/platform_device.h
@@ -146,6 +146,23 @@ static inline void platform_set_drvdata(struct platform_device *pdev, void *data
 	dev_set_drvdata(&pdev->dev, data);
 }
 
+/* module_platform_driver() - Helper macro for drivers that don't do
+ * anything special in module init/exit.  This eliminates a lot of
+ * boilerplate.  Each module may only use this macro once, and
+ * calling it replaces module_init() and module_exit()
+ */
+#define module_platform_driver(__platform_driver) \
+static int __init __platform_driver##_init(void) \
+{ \
+	return platform_driver_register(&(__platform_driver)); \
+} \
+module_init(__platform_driver##_init); \
+static void __exit __platform_driver##_exit(void) \
+{ \
+	platform_driver_unregister(&(__platform_driver)); \
+} \
+module_exit(__platform_driver##_exit);
+
 extern struct platform_device *platform_create_bundle(struct platform_driver *driver,
 					int (*probe)(struct platform_device *),
 					struct resource *res, unsigned int n_res,

commit 01dcc60a7cb8cd5193676554b94a90d349bdfd15
Author: Uwe Kleine-König <u.kleine-koenig@pengutronix.de>
Date:   Thu Aug 25 11:16:00 2011 +0200

    new helper to create platform devices with dma mask
    
    compared to the most powerful and already existing helper (namely
    platform_device_register_resndata) this allows to specify a dma_mask.
    To make eventual extensions later more easy, a struct holding the used
    information is created instead of passing the information by function
    parameters.
    
    Signed-off-by: Uwe Kleine-König <u.kleine-koenig@pengutronix.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>

diff --git a/include/linux/platform_device.h b/include/linux/platform_device.h
index 27bb05aae70d..651a066686ac 100644
--- a/include/linux/platform_device.h
+++ b/include/linux/platform_device.h
@@ -49,10 +49,54 @@ extern struct resource *platform_get_resource_byname(struct platform_device *, u
 extern int platform_get_irq_byname(struct platform_device *, const char *);
 extern int platform_add_devices(struct platform_device **, int);
 
-extern struct platform_device *platform_device_register_resndata(
+struct platform_device_info {
+		struct device *parent;
+
+		const char *name;
+		int id;
+
+		const struct resource *res;
+		unsigned int num_res;
+
+		const void *data;
+		size_t size_data;
+		u64 dma_mask;
+};
+extern struct platform_device *platform_device_register_full(
+		struct platform_device_info *pdevinfo);
+
+/**
+ * platform_device_register_resndata - add a platform-level device with
+ * resources and platform-specific data
+ *
+ * @parent: parent device for the device we're adding
+ * @name: base name of the device we're adding
+ * @id: instance id
+ * @res: set of resources that needs to be allocated for the device
+ * @num: number of resources
+ * @data: platform specific data for this platform device
+ * @size: size of platform specific data
+ *
+ * Returns &struct platform_device pointer on success, or ERR_PTR() on error.
+ */
+static inline struct platform_device *platform_device_register_resndata(
 		struct device *parent, const char *name, int id,
 		const struct resource *res, unsigned int num,
-		const void *data, size_t size);
+		const void *data, size_t size) {
+
+	struct platform_device_info pdevinfo = {
+		.parent = parent,
+		.name = name,
+		.id = id,
+		.res = res,
+		.num_res = num,
+		.data = data,
+		.size_data = size,
+		.dma_mask = 0,
+	};
+
+	return platform_device_register_full(&pdevinfo);
+}
 
 /**
  * platform_device_register_simple - add a platform-level device and its resources

commit a77ce8167cc1d0370fcb1d79b367d62e050cb2b0
Author: Kumar Gala <galak@kernel.crashing.org>
Date:   Fri Jun 10 01:52:57 2011 -0500

    driver core: Add ability for arch code to setup pdev_archdata
    
    On some architectures we need to setup pdev_archdata before we add the
    device.  Waiting til a bus_notifier is too late since we might need the
    pdev_archdata in the bus notifier.  One example is setting up of dma_mask
    pointers such that it can be used in a bus_notifier.
    
    We add weak noop version of arch_setup_pdev_archdata() and allow the arch
    code to override with access the full definitions of struct device,
    struct platform_device, and struct pdev_archdata.
    
    Acked-by: Greg Kroah-Hartman <gregkh@suse.de>
    Signed-off-by: Kumar Gala <galak@kernel.crashing.org>

diff --git a/include/linux/platform_device.h b/include/linux/platform_device.h
index ede1a80e3358..27bb05aae70d 100644
--- a/include/linux/platform_device.h
+++ b/include/linux/platform_device.h
@@ -42,6 +42,7 @@ extern void platform_device_unregister(struct platform_device *);
 extern struct bus_type platform_bus_type;
 extern struct device platform_bus;
 
+extern void arch_setup_pdev_archdata(struct platform_device *);
 extern struct resource *platform_get_resource(struct platform_device *, unsigned int, unsigned int);
 extern int platform_get_irq(struct platform_device *, unsigned int);
 extern struct resource *platform_get_resource_byname(struct platform_device *, unsigned int, const char *);

commit 2064af917b3ba7589070064ca4ed12cecd99a63c
Author: Kevin Hilman <khilman@ti.com>
Date:   Fri Apr 29 00:37:26 2011 +0200

    PM: Revert "driver core: platform_bus: allow runtime override of dev_pm_ops"
    
    The platform_bus_set_pm_ops() operation is deprecated in favor of the
    new device power domain infrastructre implemented in commit
    7538e3db6e015e890825fbd9f8659952896ddd5b (PM: add support for device
    power domains)
    
    Signed-off-by: Kevin Hilman <khilman@ti.com>
    Signed-off-by: Rafael J. Wysocki <rjw@sisk.pl>

diff --git a/include/linux/platform_device.h b/include/linux/platform_device.h
index e0093e061b08..ede1a80e3358 100644
--- a/include/linux/platform_device.h
+++ b/include/linux/platform_device.h
@@ -150,9 +150,6 @@ extern struct platform_device *platform_create_bundle(struct platform_driver *dr
 					struct resource *res, unsigned int n_res,
 					const void *data, size_t size);
 
-extern const struct dev_pm_ops * platform_bus_get_pm_ops(void);
-extern void platform_bus_set_pm_ops(const struct dev_pm_ops *pm);
-
 /* early platform driver interface */
 struct early_platform_driver {
 	const char *class_str;

commit 69c9dd1ecf446ad8a830e4afc539a2a1adc85b78
Author: Rafael J. Wysocki <rjw@sisk.pl>
Date:   Fri Apr 29 00:36:05 2011 +0200

    PM: Export platform bus type's default PM callbacks
    
    Export the default PM callbacks defined for the platform bus type so
    that they can be used by power domains for suspending and resuming
    platform devices in the future.
    
    Signed-off-by: Rafael J. Wysocki <rjw@sisk.pl>

diff --git a/include/linux/platform_device.h b/include/linux/platform_device.h
index 744942c95fec..e0093e061b08 100644
--- a/include/linux/platform_device.h
+++ b/include/linux/platform_device.h
@@ -205,4 +205,64 @@ static inline char *early_platform_driver_setup_func(void)		\
 }
 #endif /* MODULE */
 
+#ifdef CONFIG_PM_SLEEP
+extern int platform_pm_prepare(struct device *dev);
+extern void platform_pm_complete(struct device *dev);
+#else
+#define platform_pm_prepare	NULL
+#define platform_pm_complete	NULL
+#endif
+
+#ifdef CONFIG_SUSPEND
+extern int platform_pm_suspend(struct device *dev);
+extern int platform_pm_suspend_noirq(struct device *dev);
+extern int platform_pm_resume(struct device *dev);
+extern int platform_pm_resume_noirq(struct device *dev);
+#else
+#define platform_pm_suspend		NULL
+#define platform_pm_resume		NULL
+#define platform_pm_suspend_noirq	NULL
+#define platform_pm_resume_noirq	NULL
+#endif
+
+#ifdef CONFIG_HIBERNATE_CALLBACKS
+extern int platform_pm_freeze(struct device *dev);
+extern int platform_pm_freeze_noirq(struct device *dev);
+extern int platform_pm_thaw(struct device *dev);
+extern int platform_pm_thaw_noirq(struct device *dev);
+extern int platform_pm_poweroff(struct device *dev);
+extern int platform_pm_poweroff_noirq(struct device *dev);
+extern int platform_pm_restore(struct device *dev);
+extern int platform_pm_restore_noirq(struct device *dev);
+#else
+#define platform_pm_freeze		NULL
+#define platform_pm_thaw		NULL
+#define platform_pm_poweroff		NULL
+#define platform_pm_restore		NULL
+#define platform_pm_freeze_noirq	NULL
+#define platform_pm_thaw_noirq		NULL
+#define platform_pm_poweroff_noirq	NULL
+#define platform_pm_restore_noirq	NULL
+#endif
+
+#ifdef CONFIG_PM_SLEEP
+#define USE_PLATFORM_PM_SLEEP_OPS \
+	.prepare = platform_pm_prepare, \
+	.complete = platform_pm_complete, \
+	.suspend = platform_pm_suspend, \
+	.resume = platform_pm_resume, \
+	.freeze = platform_pm_freeze, \
+	.thaw = platform_pm_thaw, \
+	.poweroff = platform_pm_poweroff, \
+	.restore = platform_pm_restore, \
+	.suspend_noirq = platform_pm_suspend_noirq, \
+	.resume_noirq = platform_pm_resume_noirq, \
+	.freeze_noirq = platform_pm_freeze_noirq, \
+	.thaw_noirq = platform_pm_thaw_noirq, \
+	.poweroff_noirq = platform_pm_poweroff_noirq, \
+	.restore_noirq = platform_pm_restore_noirq,
+#else
+#define USE_PLATFORM_PM_SLEEP_OPS
+#endif
+
 #endif /* _PLATFORM_DEVICE_H_ */

commit e710d7d5a9cab1041b7a3cf9e655b75d92786857
Author: Samuel Ortiz <sameo@linux.intel.com>
Date:   Fri Apr 8 00:43:01 2011 +0200

    mfd: Fetch cell pointer from platform_device->mfd_cell
    
    In order for MFD drivers to fetch their cell pointer but also their
    platform data one, an mfd cell pointer is added to the platform_device
    structure.
    That allows all MFD sub devices drivers to be MFD agnostic, unless
    they really need to access their MFD cell data. Most of them don't,
    especially the ones for IPs used by both MFD and non MFD SoCs.
    
    Cc: Grant Likely <grant.likely@secretlab.ca>
    Acked-by: Greg KH <gregkh@suse.de>
    Signed-off-by: Samuel Ortiz <sameo@linux.intel.com>

diff --git a/include/linux/platform_device.h b/include/linux/platform_device.h
index d96db9825708..744942c95fec 100644
--- a/include/linux/platform_device.h
+++ b/include/linux/platform_device.h
@@ -14,6 +14,8 @@
 #include <linux/device.h>
 #include <linux/mod_devicetable.h>
 
+struct mfd_cell;
+
 struct platform_device {
 	const char	* name;
 	int		id;
@@ -23,6 +25,9 @@ struct platform_device {
 
 	const struct platform_device_id	*id_entry;
 
+	/* MFD cell pointer */
+	struct mfd_cell *mfd_cell;
+
 	/* arch specific additions */
 	struct pdev_archdata	archdata;
 };

commit 71d642908d4e8e7a2a4a6e0490432e719ff466d5
Author: Marc Kleine-Budde <mkl@pengutronix.de>
Date:   Wed Feb 16 23:23:27 2011 +0100

    Driver core: convert platform_{get,set}_drvdata to static inline functions
    
    This patch converts the macros for platform_{get,set}_drvdata to
    static inline functions to add typechecking.
    
    Signed-off-by: Marc Kleine-Budde <mkl@pengutronix.de>
    Acked-by: Uwe Kleine-König <u.kleine-koenig@pengutronix.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>

diff --git a/include/linux/platform_device.h b/include/linux/platform_device.h
index 2e700ec0601f..d96db9825708 100644
--- a/include/linux/platform_device.h
+++ b/include/linux/platform_device.h
@@ -130,8 +130,15 @@ extern void platform_driver_unregister(struct platform_driver *);
 extern int platform_driver_probe(struct platform_driver *driver,
 		int (*probe)(struct platform_device *));
 
-#define platform_get_drvdata(_dev)	dev_get_drvdata(&(_dev)->dev)
-#define platform_set_drvdata(_dev,data)	dev_set_drvdata(&(_dev)->dev, (data))
+static inline void *platform_get_drvdata(const struct platform_device *pdev)
+{
+	return dev_get_drvdata(&pdev->dev);
+}
+
+static inline void platform_set_drvdata(struct platform_device *pdev, void *data)
+{
+	dev_set_drvdata(&pdev->dev, data);
+}
 
 extern struct platform_device *platform_create_bundle(struct platform_driver *driver,
 					int (*probe)(struct platform_device *),

commit c64a0926710153b9d44c979d2942f4a8648fd74e
Author: Kevin Hilman <khilman@ti.com>
Date:   Wed Aug 25 12:50:00 2010 -0700

    driver core: platform_bus: allow runtime override of dev_pm_ops
    
    Currently, the platform_bus allows customization of several of the
    busses dev_pm_ops methods by using weak symbols so that platform code
    can override them.  The weak-symbol approach is not scalable when
    wanting to support multiple platforms in a single kernel binary.
    
    Instead, provide __init methods for platform code to customize the
    dev_pm_ops methods at runtime.
    
    NOTE: after these dynamic methods are merged, the weak symbols should
          be removed from drivers/base/platform.c.  AFAIK, this will only
          affect SH and sh-mobile which should be converted to use this
          runtime approach instead of the weak symbols.  After SH &
          sh-mobile are converted, the weak symobols could be removed.
    
    Tested on OMAP3.
    
    Cc: Magnus Damm <magnus.damm@gmail.com>
    Acked-by: Grant Likely <grant.likely@secretlab.ca>
    Signed-off-by: Kevin Hilman <khilman@deeprootsystems.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>

diff --git a/include/linux/platform_device.h b/include/linux/platform_device.h
index d7ecad0093bb..2e700ec0601f 100644
--- a/include/linux/platform_device.h
+++ b/include/linux/platform_device.h
@@ -138,6 +138,9 @@ extern struct platform_device *platform_create_bundle(struct platform_driver *dr
 					struct resource *res, unsigned int n_res,
 					const void *data, size_t size);
 
+extern const struct dev_pm_ops * platform_bus_get_pm_ops(void);
+extern void platform_bus_set_pm_ops(const struct dev_pm_ops *pm);
+
 /* early platform driver interface */
 struct early_platform_driver {
 	const char *class_str;

commit 44f28bdea09415d40b4d73a7668db5961362ec53
Author: Uwe Kleine-König <u.kleine-koenig@pengutronix.de>
Date:   Mon Jun 21 16:11:44 2010 +0200

    Driver core: reduce duplicated code for platform_device creation
    
    This makes the two similar functions platform_device_register_simple
    and platform_device_register_data one line inline functions using a new
    generic function platform_device_register_resndata.
    
    Signed-off-by: Uwe Kleine-König <u.kleine-koenig@pengutronix.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>

diff --git a/include/linux/platform_device.h b/include/linux/platform_device.h
index 5417944d3687..d7ecad0093bb 100644
--- a/include/linux/platform_device.h
+++ b/include/linux/platform_device.h
@@ -43,10 +43,64 @@ extern struct resource *platform_get_resource_byname(struct platform_device *, u
 extern int platform_get_irq_byname(struct platform_device *, const char *);
 extern int platform_add_devices(struct platform_device **, int);
 
-extern struct platform_device *platform_device_register_simple(const char *, int id,
-					const struct resource *, unsigned int);
-extern struct platform_device *platform_device_register_data(struct device *,
-		const char *, int, const void *, size_t);
+extern struct platform_device *platform_device_register_resndata(
+		struct device *parent, const char *name, int id,
+		const struct resource *res, unsigned int num,
+		const void *data, size_t size);
+
+/**
+ * platform_device_register_simple - add a platform-level device and its resources
+ * @name: base name of the device we're adding
+ * @id: instance id
+ * @res: set of resources that needs to be allocated for the device
+ * @num: number of resources
+ *
+ * This function creates a simple platform device that requires minimal
+ * resource and memory management. Canned release function freeing memory
+ * allocated for the device allows drivers using such devices to be
+ * unloaded without waiting for the last reference to the device to be
+ * dropped.
+ *
+ * This interface is primarily intended for use with legacy drivers which
+ * probe hardware directly.  Because such drivers create sysfs device nodes
+ * themselves, rather than letting system infrastructure handle such device
+ * enumeration tasks, they don't fully conform to the Linux driver model.
+ * In particular, when such drivers are built as modules, they can't be
+ * "hotplugged".
+ *
+ * Returns &struct platform_device pointer on success, or ERR_PTR() on error.
+ */
+static inline struct platform_device *platform_device_register_simple(
+		const char *name, int id,
+		const struct resource *res, unsigned int num)
+{
+	return platform_device_register_resndata(NULL, name, id,
+			res, num, NULL, 0);
+}
+
+/**
+ * platform_device_register_data - add a platform-level device with platform-specific data
+ * @parent: parent device for the device we're adding
+ * @name: base name of the device we're adding
+ * @id: instance id
+ * @data: platform specific data for this platform device
+ * @size: size of platform specific data
+ *
+ * This function creates a simple platform device that requires minimal
+ * resource and memory management. Canned release function freeing memory
+ * allocated for the device allows drivers using such devices to be
+ * unloaded without waiting for the last reference to the device to be
+ * dropped.
+ *
+ * Returns &struct platform_device pointer on success, or ERR_PTR() on error.
+ */
+static inline struct platform_device *platform_device_register_data(
+		struct device *parent, const char *name, int id,
+		const void *data, size_t size)
+{
+	return platform_device_register_resndata(parent, name, id,
+			NULL, 0, data, size);
+}
 
 extern struct platform_device *platform_device_alloc(const char *name, int id);
 extern int platform_device_add_resources(struct platform_device *pdev,

commit 0b7f1a7efb38b551f5948a13d0b36e876ba536db
Author: Geert Uytterhoeven <geert@linux-m68k.org>
Date:   Wed Jan 28 21:01:02 2009 +0100

    platform: Make platform resource input parameters const
    
    Make the platform resource input parameters of platform_device_add_resources()
    and platform_device_register_simple() const, as the resources are copied and
    never modified.
    
    Signed-off-by: Geert Uytterhoeven <geert@linux-m68k.org>
    Acked-by: Greg Kroah-Hartman <gregkh@suse.de>

diff --git a/include/linux/platform_device.h b/include/linux/platform_device.h
index 212da17d06af..5417944d3687 100644
--- a/include/linux/platform_device.h
+++ b/include/linux/platform_device.h
@@ -44,12 +44,14 @@ extern int platform_get_irq_byname(struct platform_device *, const char *);
 extern int platform_add_devices(struct platform_device **, int);
 
 extern struct platform_device *platform_device_register_simple(const char *, int id,
-					struct resource *, unsigned int);
+					const struct resource *, unsigned int);
 extern struct platform_device *platform_device_register_data(struct device *,
 		const char *, int, const void *, size_t);
 
 extern struct platform_device *platform_device_alloc(const char *name, int id);
-extern int platform_device_add_resources(struct platform_device *pdev, struct resource *res, unsigned int num);
+extern int platform_device_add_resources(struct platform_device *pdev,
+					 const struct resource *res,
+					 unsigned int num);
 extern int platform_device_add_data(struct platform_device *pdev, const void *data, size_t size);
 extern int platform_device_add(struct platform_device *pdev);
 extern void platform_device_del(struct platform_device *pdev);

commit 831fad2f75f0d7bfc339de81173e7068a3c72276
Author: Uwe Kleine-König <u.kleine-koenig@pengutronix.de>
Date:   Tue Jan 26 09:35:00 2010 +0100

    Driver core: make struct platform_driver.id_table const
    
    This fixes a warning on several pxa based machines:
    
            arch/arm/mach-pxa/ssp.c:475: warning: initialization discards qualifiers from pointer target type
    
    Signed-off-by: Uwe Kleine-König <u.kleine-koenig@pengutronix.de>
    Acked-by: Vikram Dhillon <dhillonv10@gmail.com>
    Acked-by: Eric Miao <eric.y.miao@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>

diff --git a/include/linux/platform_device.h b/include/linux/platform_device.h
index 2c2d035bfb92..212da17d06af 100644
--- a/include/linux/platform_device.h
+++ b/include/linux/platform_device.h
@@ -62,7 +62,7 @@ struct platform_driver {
 	int (*suspend)(struct platform_device *, pm_message_t state);
 	int (*resume)(struct platform_device *);
 	struct device_driver driver;
-	struct platform_device_id *id_table;
+	const struct platform_device_id *id_table;
 };
 
 extern int platform_driver_register(struct platform_driver *);

commit 3d03ba4d1dd2246adff5a9ff1194a539b3bc05a7
Author: Eric Miao <eric.y.miao@gmail.com>
Date:   Fri Jan 1 15:43:28 2010 +0800

    driver core: make platform_device_id table const
    
    The platform ID table is normally const, force that by adding the attribute.
    
    Signed-off-by: Eric Miao <eric.y.miao@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>

diff --git a/include/linux/platform_device.h b/include/linux/platform_device.h
index 25e64b43e644..2c2d035bfb92 100644
--- a/include/linux/platform_device.h
+++ b/include/linux/platform_device.h
@@ -21,7 +21,7 @@ struct platform_device {
 	u32		num_resources;
 	struct resource	* resource;
 
-	struct platform_device_id	*id_entry;
+	const struct platform_device_id	*id_entry;
 
 	/* arch specific additions */
 	struct pdev_archdata	archdata;

commit ecdf6ceb8cf4756bd4214bf9755755752b6015f5
Author: Dmitry Torokhov <dmitry.torokhov@gmail.com>
Date:   Tue Dec 29 20:11:20 2009 -0800

    Driver core: add platform_create_bundle() helper
    
    Many legacy-style module create singleton platform devices themselves,
    along with corresponding platform driver. Instead of replicating error
    handling code in all such drivers, provide a helper that allocates and
    registers a single platform device and a driver and binds them together.
    
    Signed-off-by: Dmitry Torokhov <dtor@mail.ru>
    Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>

diff --git a/include/linux/platform_device.h b/include/linux/platform_device.h
index 71ff887ca44e..25e64b43e644 100644
--- a/include/linux/platform_device.h
+++ b/include/linux/platform_device.h
@@ -77,6 +77,11 @@ extern int platform_driver_probe(struct platform_driver *driver,
 #define platform_get_drvdata(_dev)	dev_get_drvdata(&(_dev)->dev)
 #define platform_set_drvdata(_dev,data)	dev_set_drvdata(&(_dev)->dev, (data))
 
+extern struct platform_device *platform_create_bundle(struct platform_driver *driver,
+					int (*probe)(struct platform_device *),
+					struct resource *res, unsigned int n_res,
+					const void *data, size_t size);
+
 /* early platform driver interface */
 struct early_platform_driver {
 	const char *class_str;

commit c60e0504c8e4fa14179d0687d80ef25148dd6dd4
Author: Magnus Damm <damm@opensource.se>
Date:   Fri Nov 27 17:38:51 2009 +0900

    Driver Core: Early platform driver buffer
    
    Add early_platform_init_buffer() support and update the
    early platform driver code to allow passing parameters
    to the driver on the kernel command line.
    
    early_platform_init_buffer() simply allows early platform
    drivers to provide a pointer and length to a memory area
    where the remaining part of the kernel command line option
    will be stored.
    
    Needed to pass baud rate and other serial port options
    to the reworked early serial console code on SuperH.
    
    Signed-off-by: Magnus Damm <damm@opensource.se>
    Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>

diff --git a/include/linux/platform_device.h b/include/linux/platform_device.h
index 3c6675c2444b..71ff887ca44e 100644
--- a/include/linux/platform_device.h
+++ b/include/linux/platform_device.h
@@ -83,6 +83,8 @@ struct early_platform_driver {
 	struct platform_driver *pdrv;
 	struct list_head list;
 	int requested_id;
+	char *buffer;
+	int bufsize;
 };
 
 #define EARLY_PLATFORM_ID_UNSET -2
@@ -102,21 +104,29 @@ extern int early_platform_driver_probe(char *class_str,
 				       int nr_probe, int user_only);
 extern void early_platform_cleanup(void);
 
+#define early_platform_init(class_string, platdrv)		\
+	early_platform_init_buffer(class_string, platdrv, NULL, 0)
 
 #ifndef MODULE
-#define early_platform_init(class_string, platform_driver)		\
+#define early_platform_init_buffer(class_string, platdrv, buf, bufsiz)	\
 static __initdata struct early_platform_driver early_driver = {		\
 	.class_str = class_string,					\
-	.pdrv = platform_driver,					\
+	.buffer = buf,							\
+	.bufsize = bufsiz,						\
+	.pdrv = platdrv,						\
 	.requested_id = EARLY_PLATFORM_ID_UNSET,			\
 };									\
-static int __init early_platform_driver_setup_func(char *buf)		\
+static int __init early_platform_driver_setup_func(char *buffer)	\
 {									\
-	return early_platform_driver_register(&early_driver, buf);	\
+	return early_platform_driver_register(&early_driver, buffer);	\
 }									\
 early_param(class_string, early_platform_driver_setup_func)
 #else /* MODULE */
-#define early_platform_init(class_string, platform_driver)
+#define early_platform_init_buffer(class_string, platdrv, buf, bufsiz)	\
+static inline char *early_platform_driver_setup_func(void)		\
+{									\
+	return bufsiz ? buf : NULL;					\
+}
 #endif /* MODULE */
 
 #endif /* _PLATFORM_DEVICE_H_ */

commit 511647ff58fd0f1c1f415d2c757d841650edac91
Author: Magnus Damm <damm@igel.co.jp>
Date:   Wed Jul 8 13:23:07 2009 +0200

    PM: Remove platform device suspend_late()/resume_early() V2
    
    This is V2 of the platform driver power management late/early
    callback removal patch. The callbacks ->suspend_late() and
    ->resume_early() are removed since all in-tree users now have
    been migrated to dev_pm_ops.
    
    Signed-off-by: Magnus Damm <damm@igel.co.jp>
    Acked-by: Greg Kroah-Hartman <gregkh@suse.de>
    Acked-by: Pavel Machek <pavel@ucw.cz>
    Signed-off-by: Rafael J. Wysocki <rjw@sisk.pl>

diff --git a/include/linux/platform_device.h b/include/linux/platform_device.h
index 672a69849735..3c6675c2444b 100644
--- a/include/linux/platform_device.h
+++ b/include/linux/platform_device.h
@@ -60,8 +60,6 @@ struct platform_driver {
 	int (*remove)(struct platform_device *);
 	void (*shutdown)(struct platform_device *);
 	int (*suspend)(struct platform_device *, pm_message_t state);
-	int (*suspend_late)(struct platform_device *, pm_message_t state);
-	int (*resume_early)(struct platform_device *);
 	int (*resume)(struct platform_device *);
 	struct device_driver driver;
 	struct platform_device_id *id_table;

commit d7aacaddcac3971e33cf52d7e610c06696cb347f
Author: Magnus Damm <damm@igel.co.jp>
Date:   Wed Jul 8 13:21:31 2009 +0200

    Driver Core: Add platform device arch data V3
    
    Allow architecture specific data in struct platform_device V3.
    
    With this patch struct pdev_archdata is added to struct
    platform_device, similar to struct dev_archdata in found in
    struct device. Useful for architecture code that needs to
    keep extra data associated with each platform device.
    
    Struct pdev_archdata is different from dev.platform_data, the
    convention is that dev.platform_data points to driver-specific
    data. It may or may not be required by the driver. The format
    of this depends on driver but is the same across architectures.
    
    The structure pdev_archdata is a place for architecture specific
    data. This data is handled by architecture specific code (for
    example runtime PM), and since it is architecture specific it
    should _never_ be touched by device driver code. Exactly like
    struct dev_archdata but for platform devices.
    
    [rjw: This change is for power management mostly and that's why it
     goes through the suspend tree.]
    
    Signed-off-by: Magnus Damm <damm@igel.co.jp>
    Acked-by: Kevin Hilman <khilman@deeprootsystems.com>
    Acked-by: Greg Kroah-Hartman <gregkh@suse.de>
    Signed-off-by: Rafael J. Wysocki <rjw@sisk.pl>

diff --git a/include/linux/platform_device.h b/include/linux/platform_device.h
index 8dc5123b6305..672a69849735 100644
--- a/include/linux/platform_device.h
+++ b/include/linux/platform_device.h
@@ -22,6 +22,9 @@ struct platform_device {
 	struct resource	* resource;
 
 	struct platform_device_id	*id_entry;
+
+	/* arch specific additions */
+	struct pdev_archdata	archdata;
 };
 
 #define platform_get_device_id(pdev)	((pdev)->id_entry)

commit c0afe7ba5e71d8ab66bc42f90b3e237581d3c509
Author: Linus Walleij <linus.ml.walleij@gmail.com>
Date:   Mon Apr 27 02:38:16 2009 +0200

    driver core: Const-correct platform getbyname functions
    
    This converts resource and IRQ getbyname functions for the platform
    bus to use const char *, I ran into compiler moanings when I tried
    using a const char * for looking up a certain resource.
    
    Signed-off-by: Linus Walleij <linus.walleij@stericsson.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>

diff --git a/include/linux/platform_device.h b/include/linux/platform_device.h
index b67bb5d7b221..8dc5123b6305 100644
--- a/include/linux/platform_device.h
+++ b/include/linux/platform_device.h
@@ -36,8 +36,8 @@ extern struct device platform_bus;
 
 extern struct resource *platform_get_resource(struct platform_device *, unsigned int, unsigned int);
 extern int platform_get_irq(struct platform_device *, unsigned int);
-extern struct resource *platform_get_resource_byname(struct platform_device *, unsigned int, char *);
-extern int platform_get_irq_byname(struct platform_device *, char *);
+extern struct resource *platform_get_resource_byname(struct platform_device *, unsigned int, const char *);
+extern int platform_get_irq_byname(struct platform_device *, const char *);
 extern int platform_add_devices(struct platform_device **, int);
 
 extern struct platform_device *platform_device_register_simple(const char *, int id,

commit e67c85626cd02e306da1b4195bfaf68d61050796
Author: Greg Kroah-Hartman <gregkh@suse.de>
Date:   Sun Mar 8 23:13:32 2009 +0800

    Revert driver core: move platform_data into platform_device
    
    This reverts commit 006f4571a15fae3a0575f2a0f9e9b63b3d1012f8:
    
            This patch moves platform_data from struct device into
            struct platform_device, based on the two ideas:
    
            1. Now all platform_driver is registered by platform_driver_register,
               which makes probe()/release()/... of platform_driver passed parameter
               of platform_device *, so platform driver can get platform_data from
               platform_device;
    
            2. Other kind of devices do not need to use platform_data, we can
               decrease size of device if moving it to platform_device.
    
            Taking into consideration of thousands of files to be fixed and they
            can't be finished in one night(maybe it will take a long time), so we
            keep platform_data in device to allow two kind of cases coexist until
            all platform devices pass its platfrom data from
            platform_device->platform_data.
    
            All patches to do this kind of conversion are welcome.
    
    As we don't really want to do it, it was a bad idea.
    
    Cc: David Brownell <david-b@pacbell.net>
    Cc: Ming Lei <tom.leiming@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>

diff --git a/include/linux/platform_device.h b/include/linux/platform_device.h
index 72736fd8223c..b67bb5d7b221 100644
--- a/include/linux/platform_device.h
+++ b/include/linux/platform_device.h
@@ -20,7 +20,6 @@ struct platform_device {
 	struct device	dev;
 	u32		num_resources;
 	struct resource	* resource;
-	void		*platform_data;
 
 	struct platform_device_id	*id_entry;
 };

commit 13977091a988fb0d21821c2221ddc920eba36b79
Author: Magnus Damm <damm@igel.co.jp>
Date:   Mon Mar 30 14:37:25 2009 -0700

    Driver Core: early platform driver
    
    V3 of the early platform driver implementation.
    
    Platform drivers are great for embedded platforms because we can separate
    driver configuration from the actual driver.  So base addresses,
    interrupts and other configuration can be kept with the processor or board
    code, and the platform driver can be reused by many different platforms.
    
    For early devices we have nothing today.  For instance, to configure early
    timers and early serial ports we cannot use platform devices.  This
    because the setup order during boot.  Timers are needed before the
    platform driver core code is available.  The same goes for early printk
    support.  Early in this case means before initcalls.
    
    These early drivers today have their configuration either hard coded or
    they receive it using some special configuration method.  This is working
    quite well, but if we want to support both regular kernel modules and
    early devices then we need to have two ways of configuring the same
    driver.  A single way would be better.
    
    The early platform driver patch is basically a set of functions that allow
    drivers to register themselves and architecture code to locate them and
    probe.  Registration happens through early_param().  The time for the
    probe is decided by the architecture code.
    
    See Documentation/driver-model/platform.txt for more details.
    
    [akpm@linux-foundation.org: coding-style fixes]
    Signed-off-by: Magnus Damm <damm@igel.co.jp>
    Cc: Paul Mundt <lethal@linux-sh.org>
    Cc: Kay Sievers <kay.sievers@vrfy.org>
    Cc: David Brownell <david-b@pacbell.net>
    Cc: Tejun Heo <htejun@gmail.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>

diff --git a/include/linux/platform_device.h b/include/linux/platform_device.h
index 76e470a299bf..72736fd8223c 100644
--- a/include/linux/platform_device.h
+++ b/include/linux/platform_device.h
@@ -77,4 +77,46 @@ extern int platform_driver_probe(struct platform_driver *driver,
 #define platform_get_drvdata(_dev)	dev_get_drvdata(&(_dev)->dev)
 #define platform_set_drvdata(_dev,data)	dev_set_drvdata(&(_dev)->dev, (data))
 
+/* early platform driver interface */
+struct early_platform_driver {
+	const char *class_str;
+	struct platform_driver *pdrv;
+	struct list_head list;
+	int requested_id;
+};
+
+#define EARLY_PLATFORM_ID_UNSET -2
+#define EARLY_PLATFORM_ID_ERROR -3
+
+extern int early_platform_driver_register(struct early_platform_driver *epdrv,
+					  char *buf);
+extern void early_platform_add_devices(struct platform_device **devs, int num);
+
+static inline int is_early_platform_device(struct platform_device *pdev)
+{
+	return !pdev->dev.driver;
+}
+
+extern void early_platform_driver_register_all(char *class_str);
+extern int early_platform_driver_probe(char *class_str,
+				       int nr_probe, int user_only);
+extern void early_platform_cleanup(void);
+
+
+#ifndef MODULE
+#define early_platform_init(class_string, platform_driver)		\
+static __initdata struct early_platform_driver early_driver = {		\
+	.class_str = class_string,					\
+	.pdrv = platform_driver,					\
+	.requested_id = EARLY_PLATFORM_ID_UNSET,			\
+};									\
+static int __init early_platform_driver_setup_func(char *buf)		\
+{									\
+	return early_platform_driver_register(&early_driver, buf);	\
+}									\
+early_param(class_string, early_platform_driver_setup_func)
+#else /* MODULE */
+#define early_platform_init(class_string, platform_driver)
+#endif /* MODULE */
+
 #endif /* _PLATFORM_DEVICE_H_ */

commit 006f4571a15fae3a0575f2a0f9e9b63b3d1012f8
Author: Ming Lei <tom.leiming@gmail.com>
Date:   Sun Mar 8 23:13:32 2009 +0800

    driver core: move platform_data into platform_device
    
    This patch moves platform_data from struct device into
    struct platform_device, based on the two ideas:
    
    1. Now all platform_driver is registered by platform_driver_register,
       which makes probe()/release()/... of platform_driver passed parameter
       of platform_device *, so platform driver can get platform_data from
       platform_device;
    
    2. Other kind of devices do not need to use platform_data, we can
       decrease size of device if moving it to platform_device.
    
    Taking into consideration of thousands of files to be fixed and they
    can't be finished in one night(maybe it will take a long time), so we
    keep platform_data in device to allow two kind of cases coexist until
    all platform devices pass its platfrom data from
    platform_device->platform_data.
    
    All patches to do this kind of conversion are welcome.
    
    Signed-off-by: Ming Lei <tom.leiming@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>

diff --git a/include/linux/platform_device.h b/include/linux/platform_device.h
index 76aef7be32ab..76e470a299bf 100644
--- a/include/linux/platform_device.h
+++ b/include/linux/platform_device.h
@@ -20,6 +20,7 @@ struct platform_device {
 	struct device	dev;
 	u32		num_resources;
 	struct resource	* resource;
+	void		*platform_data;
 
 	struct platform_device_id	*id_entry;
 };

commit 57fee4a58fe802272742caae248872c392a60670
Author: Eric Miao <eric.miao@marvell.com>
Date:   Wed Feb 4 11:52:40 2009 +0800

    platform: introduce module id table for platform devices
    
    Now platform_device is being widely used on SoC processors where the
    peripherals are attached to the system bus, which is simple enough.
    
    However, silicon IPs for these SoCs are usually shared heavily across
    a family of processors, even products from different companies.  This
    makes the original simple driver name based matching insufficient, or
    simply not straight-forward.
    
    Introduce a module id table for platform devices, and makes it clear
    that a platform driver is able to support some shared IP and handle
    slight differences across different platforms (by 'driver_data').
    Module alias is handled automatically when a MODULE_DEVICE_TABLE()
    is defined.
    
    To not disturb the current platform drivers too much, the matched id
    entry is recorded and can be retrieved by platform_get_device_id().
    
    Signed-off-by: Eric Miao <eric.miao@marvell.com>
    Cc: Kay Sievers <kay.sievers@vrfy.org>
    Cc: Ben Dooks <ben-linux@fluff.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>

diff --git a/include/linux/platform_device.h b/include/linux/platform_device.h
index 9a342699c607..76aef7be32ab 100644
--- a/include/linux/platform_device.h
+++ b/include/linux/platform_device.h
@@ -12,6 +12,7 @@
 #define _PLATFORM_DEVICE_H_
 
 #include <linux/device.h>
+#include <linux/mod_devicetable.h>
 
 struct platform_device {
 	const char	* name;
@@ -19,8 +20,12 @@ struct platform_device {
 	struct device	dev;
 	u32		num_resources;
 	struct resource	* resource;
+
+	struct platform_device_id	*id_entry;
 };
 
+#define platform_get_device_id(pdev)	((pdev)->id_entry)
+
 #define to_platform_device(x) container_of((x), struct platform_device, dev)
 
 extern int platform_device_register(struct platform_device *);
@@ -56,6 +61,7 @@ struct platform_driver {
 	int (*resume_early)(struct platform_device *);
 	int (*resume)(struct platform_device *);
 	struct device_driver driver;
+	struct platform_device_id *id_table;
 };
 
 extern int platform_driver_register(struct platform_driver *);

commit adf094931ffb25ef4b381559918f1a34181a5273
Author: Rafael J. Wysocki <rjw@sisk.pl>
Date:   Mon Oct 6 22:46:05 2008 +0200

    PM: Simplify the new suspend/hibernation framework for devices
    
    PM: Simplify the new suspend/hibernation framework for devices
    
    Following the discussion at the Kernel Summit, simplify the new
    device PM framework by merging 'struct pm_ops' and
    'struct pm_ext_ops' and removing pointers to 'struct pm_ext_ops'
    from 'struct platform_driver' and 'struct pci_driver'.
    
    After this change, the suspend/hibernation callbacks will only
    reside in 'struct device_driver' as well as at the bus type/
    device class/device type level.  Accordingly, PCI and platform
    device drivers are now expected to put their suspend/hibernation
    callbacks into the 'struct device_driver' embedded in
    'struct pci_driver' or 'struct platform_driver', respectively.
    
    Signed-off-by: Rafael J. Wysocki <rjw@sisk.pl>
    Acked-by: Pavel Machek <pavel@suse.cz>
    Cc: Jesse Barnes <jbarnes@virtuousgeek.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>

diff --git a/include/linux/platform_device.h b/include/linux/platform_device.h
index 4b8cc6a32479..9a342699c607 100644
--- a/include/linux/platform_device.h
+++ b/include/linux/platform_device.h
@@ -55,7 +55,6 @@ struct platform_driver {
 	int (*suspend_late)(struct platform_device *, pm_message_t state);
 	int (*resume_early)(struct platform_device *);
 	int (*resume)(struct platform_device *);
-	struct pm_ext_ops *pm;
 	struct device_driver driver;
 };
 

commit d8bf254089a6c31d7d01a4d1d2f1861662900855
Author: Dmitry Baryshkov <dbaryshkov@gmail.com>
Date:   Mon Sep 22 14:41:40 2008 -0700

    platform: add new device registration helper
    
    Add a helper that registers simple platform_device w/o resources but with
    parent and device data.
    
    This is usefull to cleanup platform code from code that registers such
    simple devices as leds-gpio, generic-bl, etc.
    
    Signed-off-by: Dmitry Baryshkov <dbaryshkov@gmail.com>
    Cc: David Brownell <dbrownell@users.sourceforge.net>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>

diff --git a/include/linux/platform_device.h b/include/linux/platform_device.h
index 95ac21ab3a09..4b8cc6a32479 100644
--- a/include/linux/platform_device.h
+++ b/include/linux/platform_device.h
@@ -37,6 +37,8 @@ extern int platform_add_devices(struct platform_device **, int);
 
 extern struct platform_device *platform_device_register_simple(const char *, int id,
 					struct resource *, unsigned int);
+extern struct platform_device *platform_device_register_data(struct device *,
+		const char *, int, const void *, size_t);
 
 extern struct platform_device *platform_device_alloc(const char *name, int id);
 extern int platform_device_add_resources(struct platform_device *pdev, struct resource *res, unsigned int num);

commit 25e18499e08cb097cbbfeab5de25d094d5312ee5
Author: Rafael J. Wysocki <rjw@sisk.pl>
Date:   Wed May 21 01:40:43 2008 +0200

    Implement new suspend and hibernation callbacks for platform busses
    
    Implement new suspend and hibernation callbacks for the platform bus
    type.
    
    Signed-off-by: Rafael J. Wysocki <rjw@sisk.pl>
    Acked-by: Pavel Machek <pavel@ucw.cz>
    Signed-off-by: Greg KH <greg@kroah.com>
    Signed-off-by: Jesse Barnes <jbarnes@virtuousgeek.org>

diff --git a/include/linux/platform_device.h b/include/linux/platform_device.h
index 3261681c82a4..95ac21ab3a09 100644
--- a/include/linux/platform_device.h
+++ b/include/linux/platform_device.h
@@ -53,6 +53,7 @@ struct platform_driver {
 	int (*suspend_late)(struct platform_device *, pm_message_t state);
 	int (*resume_early)(struct platform_device *);
 	int (*resume)(struct platform_device *);
+	struct pm_ext_ops *pm;
 	struct device_driver driver;
 };
 

commit ae72cddb2338bc36b991674a56a7bf70ae104d9e
Author: Stephen Rothwell <sfr@canb.auug.org.au>
Date:   Fri Jan 11 17:24:53 2008 +1100

    Driver Core: constify the name passed to platform_device_register_simple
    
    This name is just passed to platform_device_alloc which has its parameter
    declared const.
    
    Signed-off-by: Stephen Rothwell <sfr@canb.auug.org.au>
    Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>

diff --git a/include/linux/platform_device.h b/include/linux/platform_device.h
index e80804316cdb..3261681c82a4 100644
--- a/include/linux/platform_device.h
+++ b/include/linux/platform_device.h
@@ -35,7 +35,7 @@ extern struct resource *platform_get_resource_byname(struct platform_device *, u
 extern int platform_get_irq_byname(struct platform_device *, char *);
 extern int platform_add_devices(struct platform_device **, int);
 
-extern struct platform_device *platform_device_register_simple(char *, int id,
+extern struct platform_device *platform_device_register_simple(const char *, int id,
 					struct resource *, unsigned int);
 
 extern struct platform_device *platform_device_alloc(const char *name, int id);

commit 1359555eb77d240b7c1d7ee75bb07e89e89770e4
Author: Jean Delvare <khali@linux-fr.org>
Date:   Sun Sep 9 12:54:16 2007 +0200

    Driver core: Make platform_device.id an int
    
    While platform_device.id is a u32, platform_device_add() handles "-1"
    as a special id value. This has potential for confusion and bugs.
    Making it an int instead should prevent problems from happening in
    the future.
    
    Signed-off-by: Jean Delvare <khali@linux-fr.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>

diff --git a/include/linux/platform_device.h b/include/linux/platform_device.h
index 8bbd459eafdc..e80804316cdb 100644
--- a/include/linux/platform_device.h
+++ b/include/linux/platform_device.h
@@ -15,7 +15,7 @@
 
 struct platform_device {
 	const char	* name;
-	u32		id;
+	int		id;
 	struct device	dev;
 	u32		num_resources;
 	struct resource	* resource;
@@ -35,9 +35,10 @@ extern struct resource *platform_get_resource_byname(struct platform_device *, u
 extern int platform_get_irq_byname(struct platform_device *, char *);
 extern int platform_add_devices(struct platform_device **, int);
 
-extern struct platform_device *platform_device_register_simple(char *, unsigned int, struct resource *, unsigned int);
+extern struct platform_device *platform_device_register_simple(char *, int id,
+					struct resource *, unsigned int);
 
-extern struct platform_device *platform_device_alloc(const char *name, unsigned int id);
+extern struct platform_device *platform_device_alloc(const char *name, int id);
 extern int platform_device_add_resources(struct platform_device *pdev, struct resource *res, unsigned int num);
 extern int platform_device_add_data(struct platform_device *pdev, const void *data, size_t size);
 extern int platform_device_add(struct platform_device *pdev);

commit 6eefd34fdcbd34e2cddb8b7da26d838367591954
Author: Scott Wood <scottwood@freescale.com>
Date:   Mon Dec 4 14:57:19 2006 -0800

    Driver core: Make platform_device_add_data accept a const pointer
    
    platform_device_add_data() makes a copy of the data that is given to it,
    and thus the parameter can be const.  This removes a warning when data
    from get_property() on powerpc is handed to platform_device_add_data(),
    as get_property() returns a const pointer.
    
    Signed-off-by: Scott Wood <scottwood@freescale.com>
    Signed-off-by: Andrew Morton <akpm@osdl.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>

diff --git a/include/linux/platform_device.h b/include/linux/platform_device.h
index 20f47b81d3fa..8bbd459eafdc 100644
--- a/include/linux/platform_device.h
+++ b/include/linux/platform_device.h
@@ -39,7 +39,7 @@ extern struct platform_device *platform_device_register_simple(char *, unsigned
 
 extern struct platform_device *platform_device_alloc(const char *name, unsigned int id);
 extern int platform_device_add_resources(struct platform_device *pdev, struct resource *res, unsigned int num);
-extern int platform_device_add_data(struct platform_device *pdev, void *data, size_t size);
+extern int platform_device_add_data(struct platform_device *pdev, const void *data, size_t size);
 extern int platform_device_add(struct platform_device *pdev);
 extern void platform_device_del(struct platform_device *pdev);
 extern void platform_device_put(struct platform_device *pdev);

commit c67334fbdfbba533af767610cf3fde8a49710e62
Author: David Brownell <david-b@pacbell.net>
Date:   Thu Nov 16 23:28:47 2006 -0800

    Driver core: platform_driver_probe(), can save codespace
    
    This defines a new platform_driver_probe() method allowing the driver's
    probe() method, and its support code+data, to safely live in __init
    sections for typical system configurations.
    
    Many system-on-chip processors could benefit from this API, to the tune
    of recovering hundreds to thousands of bytes per driver.  That's memory
    which is currently wasted holding code which can never be called after
    system startup, yet can not be removed.   It can't be removed because of
    the linkage requirement that pointers to init section code (like, ideally,
    probe support) must not live in other sections (like driver method tables)
    after those pointers would be invalid.
    
    Signed-off-by: David Brownell <dbrownell@users.sourceforge.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>

diff --git a/include/linux/platform_device.h b/include/linux/platform_device.h
index 29cd6dee13db..20f47b81d3fa 100644
--- a/include/linux/platform_device.h
+++ b/include/linux/platform_device.h
@@ -58,6 +58,12 @@ struct platform_driver {
 extern int platform_driver_register(struct platform_driver *);
 extern void platform_driver_unregister(struct platform_driver *);
 
+/* non-hotpluggable platform devices may use this so that probe() and
+ * its support may live in __init sections, conserving runtime memory.
+ */
+extern int platform_driver_probe(struct platform_driver *driver,
+		int (*probe)(struct platform_device *));
+
 #define platform_get_drvdata(_dev)	dev_get_drvdata(&(_dev)->dev)
 #define platform_set_drvdata(_dev,data)	dev_set_drvdata(&(_dev)->dev, (data))
 

commit 386415d88b1ae50304f9c61aa3e0db082fa90428
Author: David Brownell <david-b@pacbell.net>
Date:   Sun Sep 3 13:16:45 2006 -0700

    PM: platform_bus and late_suspend/early_resume
    
    Teach platform_bus about the new suspend_late/resume_early PM calls,
    issued with IRQs off.  Do we really need sysdev and friends any more,
    or can janitors start switching its users over to platform_device so
    we can do a minor code-ectomy?
    
    Signed-off-by: David Brownell <dbrownell@users.sourceforge.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>

diff --git a/include/linux/platform_device.h b/include/linux/platform_device.h
index 782090c68932..29cd6dee13db 100644
--- a/include/linux/platform_device.h
+++ b/include/linux/platform_device.h
@@ -49,6 +49,8 @@ struct platform_driver {
 	int (*remove)(struct platform_device *);
 	void (*shutdown)(struct platform_device *);
 	int (*suspend)(struct platform_device *, pm_message_t state);
+	int (*suspend_late)(struct platform_device *, pm_message_t state);
+	int (*resume_early)(struct platform_device *);
 	int (*resume)(struct platform_device *);
 	struct device_driver driver;
 };

commit 93ce3061be212f6280e7ccafa9a7f698a95c6d75
Author: Dmitry Torokhov <dtor_core@ameritech.net>
Date:   Sat Dec 10 01:36:27 2005 -0500

    [PATCH] Driver Core: Add platform_device_del()
    
    Driver core: add platform_device_del function
    
    Having platform_device_del90 allows more straightforward error
    handling code in drivers registering platform devices.
    
    Signed-off-by: Dmitry Torokhov <dtor@mail.ru>
    Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>

diff --git a/include/linux/platform_device.h b/include/linux/platform_device.h
index 17e336f40b47..782090c68932 100644
--- a/include/linux/platform_device.h
+++ b/include/linux/platform_device.h
@@ -41,6 +41,7 @@ extern struct platform_device *platform_device_alloc(const char *name, unsigned
 extern int platform_device_add_resources(struct platform_device *pdev, struct resource *res, unsigned int num);
 extern int platform_device_add_data(struct platform_device *pdev, void *data, size_t size);
 extern int platform_device_add(struct platform_device *pdev);
+extern void platform_device_del(struct platform_device *pdev);
 extern void platform_device_put(struct platform_device *pdev);
 
 struct platform_driver {

commit 00d3dcdd96646be6059cc21f2efa94c4edc1eda5
Author: Russell King <rmk@dyn-67.arm.linux.org.uk>
Date:   Wed Nov 9 17:23:39 2005 +0000

    [DRIVER MODEL] Add platform_driver
    
    Introduce struct platform_driver.  This allows the platform device
    driver methods to be passed a platform_device structure instead of
    instead of a plain device structure, and therefore requiring casting
    in every platform driver.
    
    We introduce this in such a way that any existing platform drivers
    registered directly via driver_register continue to work as before,
    thereby allowing a gradual conversion to the new platform_driver
    methods.
    
    Signed-off-by: Russell King <rmk+kernel@arm.linux.org.uk>
    Acked-by: Greg Kroah-Hartman <gregkh@suse.de>

diff --git a/include/linux/platform_device.h b/include/linux/platform_device.h
index 1a165b7ae01b..17e336f40b47 100644
--- a/include/linux/platform_device.h
+++ b/include/linux/platform_device.h
@@ -43,4 +43,19 @@ extern int platform_device_add_data(struct platform_device *pdev, void *data, si
 extern int platform_device_add(struct platform_device *pdev);
 extern void platform_device_put(struct platform_device *pdev);
 
+struct platform_driver {
+	int (*probe)(struct platform_device *);
+	int (*remove)(struct platform_device *);
+	void (*shutdown)(struct platform_device *);
+	int (*suspend)(struct platform_device *, pm_message_t state);
+	int (*resume)(struct platform_device *);
+	struct device_driver driver;
+};
+
+extern int platform_driver_register(struct platform_driver *);
+extern void platform_driver_unregister(struct platform_driver *);
+
+#define platform_get_drvdata(_dev)	dev_get_drvdata(&(_dev)->dev)
+#define platform_set_drvdata(_dev,data)	dev_set_drvdata(&(_dev)->dev, (data))
+
 #endif /* _PLATFORM_DEVICE_H_ */

commit 37c12e7497b6fe2b6a890814f0ff4edce696d862
Author: Russell King <rmk@dyn-67.arm.linux.org.uk>
Date:   Sat Nov 5 21:19:33 2005 +0000

    [DRIVER MODEL] Improved dynamically allocated platform_device interface
    
    Re-jig the simple platform device support to allow private data
    to be attached to a platform device, as well as allowing the
    parent device to be set.
    
    Example usage:
    
            pdev = platform_device_alloc("mydev", id);
            if (pdev) {
                    err = platform_device_add_resources(pdev, &resources,
                                                        ARRAY_SIZE(resources));
                    if (err == 0)
                            err = platform_device_add_data(pdev, &platform_data,
                                                           sizeof(platform_data));
                    if (err == 0)
                            err = platform_device_add(pdev);
            } else {
                    err = -ENOMEM;
            }
            if (err)
                    platform_device_put(pdev);
    
    Signed-off-by: Russell King <rmk+kernel@arm.linux.org.uk>
    Acked-by: Greg Kroah-Hartman <gregkh@suse.de>

diff --git a/include/linux/platform_device.h b/include/linux/platform_device.h
index a726225e0afe..1a165b7ae01b 100644
--- a/include/linux/platform_device.h
+++ b/include/linux/platform_device.h
@@ -37,4 +37,10 @@ extern int platform_add_devices(struct platform_device **, int);
 
 extern struct platform_device *platform_device_register_simple(char *, unsigned int, struct resource *, unsigned int);
 
+extern struct platform_device *platform_device_alloc(const char *name, unsigned int id);
+extern int platform_device_add_resources(struct platform_device *pdev, struct resource *res, unsigned int num);
+extern int platform_device_add_data(struct platform_device *pdev, void *data, size_t size);
+extern int platform_device_add(struct platform_device *pdev);
+extern void platform_device_put(struct platform_device *pdev);
+
 #endif /* _PLATFORM_DEVICE_H_ */

commit bbbf508d6403f9dfeeb040d9cd7366e395632e59
Author: Russell King <rmk@dyn-67.arm.linux.org.uk>
Date:   Sat Oct 29 22:17:58 2005 +0100

    [DRIVER MODEL] Add missing platform_device.h header.
    
    Signed-off-by: Russell King <rmk+kernel@arm.linux.org.uk>

diff --git a/include/linux/platform_device.h b/include/linux/platform_device.h
new file mode 100644
index 000000000000..a726225e0afe
--- /dev/null
+++ b/include/linux/platform_device.h
@@ -0,0 +1,40 @@
+/*
+ * platform_device.h - generic, centralized driver model
+ *
+ * Copyright (c) 2001-2003 Patrick Mochel <mochel@osdl.org>
+ *
+ * This file is released under the GPLv2
+ *
+ * See Documentation/driver-model/ for more information.
+ */
+
+#ifndef _PLATFORM_DEVICE_H_
+#define _PLATFORM_DEVICE_H_
+
+#include <linux/device.h>
+
+struct platform_device {
+	const char	* name;
+	u32		id;
+	struct device	dev;
+	u32		num_resources;
+	struct resource	* resource;
+};
+
+#define to_platform_device(x) container_of((x), struct platform_device, dev)
+
+extern int platform_device_register(struct platform_device *);
+extern void platform_device_unregister(struct platform_device *);
+
+extern struct bus_type platform_bus_type;
+extern struct device platform_bus;
+
+extern struct resource *platform_get_resource(struct platform_device *, unsigned int, unsigned int);
+extern int platform_get_irq(struct platform_device *, unsigned int);
+extern struct resource *platform_get_resource_byname(struct platform_device *, unsigned int, char *);
+extern int platform_get_irq_byname(struct platform_device *, char *);
+extern int platform_add_devices(struct platform_device **, int);
+
+extern struct platform_device *platform_device_register_simple(char *, unsigned int, struct resource *, unsigned int);
+
+#endif /* _PLATFORM_DEVICE_H_ */
