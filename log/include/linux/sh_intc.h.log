commit b24413180f5600bcb3bb70fbed5cf186b60864bd
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Wed Nov 1 15:07:57 2017 +0100

    License cleanup: add SPDX GPL-2.0 license identifier to files with no license
    
    Many source files in the tree are missing licensing information, which
    makes it harder for compliance tools to determine the correct license.
    
    By default all files without license information are under the default
    license of the kernel, which is GPL version 2.
    
    Update the files which contain no license information with the 'GPL-2.0'
    SPDX license identifier.  The SPDX identifier is a legally binding
    shorthand, which can be used instead of the full boiler plate text.
    
    This patch is based on work done by Thomas Gleixner and Kate Stewart and
    Philippe Ombredanne.
    
    How this work was done:
    
    Patches were generated and checked against linux-4.14-rc6 for a subset of
    the use cases:
     - file had no licensing information it it.
     - file was a */uapi/* one with no licensing information in it,
     - file was a */uapi/* one with existing licensing information,
    
    Further patches will be generated in subsequent months to fix up cases
    where non-standard license headers were used, and references to license
    had to be inferred by heuristics based on keywords.
    
    The analysis to determine which SPDX License Identifier to be applied to
    a file was done in a spreadsheet of side by side results from of the
    output of two independent scanners (ScanCode & Windriver) producing SPDX
    tag:value files created by Philippe Ombredanne.  Philippe prepared the
    base worksheet, and did an initial spot review of a few 1000 files.
    
    The 4.13 kernel was the starting point of the analysis with 60,537 files
    assessed.  Kate Stewart did a file by file comparison of the scanner
    results in the spreadsheet to determine which SPDX license identifier(s)
    to be applied to the file. She confirmed any determination that was not
    immediately clear with lawyers working with the Linux Foundation.
    
    Criteria used to select files for SPDX license identifier tagging was:
     - Files considered eligible had to be source code files.
     - Make and config files were included as candidates if they contained >5
       lines of source
     - File already had some variant of a license header in it (even if <5
       lines).
    
    All documentation files were explicitly excluded.
    
    The following heuristics were used to determine which SPDX license
    identifiers to apply.
    
     - when both scanners couldn't find any license traces, file was
       considered to have no license information in it, and the top level
       COPYING file license applied.
    
       For non */uapi/* files that summary was:
    
       SPDX license identifier                            # files
       ---------------------------------------------------|-------
       GPL-2.0                                              11139
    
       and resulted in the first patch in this series.
    
       If that file was a */uapi/* path one, it was "GPL-2.0 WITH
       Linux-syscall-note" otherwise it was "GPL-2.0".  Results of that was:
    
       SPDX license identifier                            # files
       ---------------------------------------------------|-------
       GPL-2.0 WITH Linux-syscall-note                        930
    
       and resulted in the second patch in this series.
    
     - if a file had some form of licensing information in it, and was one
       of the */uapi/* ones, it was denoted with the Linux-syscall-note if
       any GPL family license was found in the file or had no licensing in
       it (per prior point).  Results summary:
    
       SPDX license identifier                            # files
       ---------------------------------------------------|------
       GPL-2.0 WITH Linux-syscall-note                       270
       GPL-2.0+ WITH Linux-syscall-note                      169
       ((GPL-2.0 WITH Linux-syscall-note) OR BSD-2-Clause)    21
       ((GPL-2.0 WITH Linux-syscall-note) OR BSD-3-Clause)    17
       LGPL-2.1+ WITH Linux-syscall-note                      15
       GPL-1.0+ WITH Linux-syscall-note                       14
       ((GPL-2.0+ WITH Linux-syscall-note) OR BSD-3-Clause)    5
       LGPL-2.0+ WITH Linux-syscall-note                       4
       LGPL-2.1 WITH Linux-syscall-note                        3
       ((GPL-2.0 WITH Linux-syscall-note) OR MIT)              3
       ((GPL-2.0 WITH Linux-syscall-note) AND MIT)             1
    
       and that resulted in the third patch in this series.
    
     - when the two scanners agreed on the detected license(s), that became
       the concluded license(s).
    
     - when there was disagreement between the two scanners (one detected a
       license but the other didn't, or they both detected different
       licenses) a manual inspection of the file occurred.
    
     - In most cases a manual inspection of the information in the file
       resulted in a clear resolution of the license that should apply (and
       which scanner probably needed to revisit its heuristics).
    
     - When it was not immediately clear, the license identifier was
       confirmed with lawyers working with the Linux Foundation.
    
     - If there was any question as to the appropriate license identifier,
       the file was flagged for further research and to be revisited later
       in time.
    
    In total, over 70 hours of logged manual review was done on the
    spreadsheet to determine the SPDX license identifiers to apply to the
    source files by Kate, Philippe, Thomas and, in some cases, confirmation
    by lawyers working with the Linux Foundation.
    
    Kate also obtained a third independent scan of the 4.13 code base from
    FOSSology, and compared selected files where the other two scanners
    disagreed against that SPDX file, to see if there was new insights.  The
    Windriver scanner is based on an older version of FOSSology in part, so
    they are related.
    
    Thomas did random spot checks in about 500 files from the spreadsheets
    for the uapi headers and agreed with SPDX license identifier in the
    files he inspected. For the non-uapi files Thomas did random spot checks
    in about 15000 files.
    
    In initial set of patches against 4.14-rc6, 3 files were found to have
    copy/paste license identifier errors, and have been fixed to reflect the
    correct identifier.
    
    Additionally Philippe spent 10 hours this week doing a detailed manual
    inspection and review of the 12,461 patched files from the initial patch
    version early this week with:
     - a full scancode scan run, collecting the matched texts, detected
       license ids and scores
     - reviewing anything where there was a license detected (about 500+
       files) to ensure that the applied SPDX license was correct
     - reviewing anything where there was no detection but the patch license
       was not GPL-2.0 WITH Linux-syscall-note to ensure that the applied
       SPDX license was correct
    
    This produced a worksheet with 20 files needing minor correction.  This
    worksheet was then exported into 3 different .csv files for the
    different types of files to be modified.
    
    These .csv files were then reviewed by Greg.  Thomas wrote a script to
    parse the csv files and add the proper SPDX tag to the file, in the
    format that the file expected.  This script was further refined by Greg
    based on the output to detect more types of files automatically and to
    distinguish between header and source .c files (which need different
    comment types.)  Finally Greg ran the script using the .csv files to
    generate the patches.
    
    Reviewed-by: Kate Stewart <kstewart@linuxfoundation.org>
    Reviewed-by: Philippe Ombredanne <pombredanne@nexb.com>
    Reviewed-by: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/include/linux/sh_intc.h b/include/linux/sh_intc.h
index 32383285da68..c255273b0281 100644
--- a/include/linux/sh_intc.h
+++ b/include/linux/sh_intc.h
@@ -1,3 +1,4 @@
+/* SPDX-License-Identifier: GPL-2.0 */
 #ifndef __SH_INTC_H
 #define __SH_INTC_H
 

commit 5f19f14fed7786652b9617c633db101d26a42251
Author: Paul Mundt <lethal@linux-sh.org>
Date:   Tue May 22 19:07:55 2012 +0900

    sh: intc: Kill off special reservation interface.
    
    At present reserving the IRLs in the IRQ bitmap in addition to the
    dropping of the legacy IRQ pre-allocation prevent IRL IRQs from being
    allocated for the x3proto board.
    
    The only reason to permit reservations was to lock down possible hardware
    vectors prior to dynamic IRQ scanning, but this doesn't matter much given
    that the hardware controller configuration is sorted before we get around
    to doing any dynamic IRQ allocation anyways. Beyond that, all of the
    tables are __init annotated, so quite a bit more work would need to be
    done to support reconfiguring things like IRL controllers on the fly,
    much more than would ever make it worth the hassle.
    
    Signed-off-by: Paul Mundt <lethal@linux-sh.org>

diff --git a/include/linux/sh_intc.h b/include/linux/sh_intc.h
index 6aed0805927f..32383285da68 100644
--- a/include/linux/sh_intc.h
+++ b/include/linux/sh_intc.h
@@ -133,7 +133,6 @@ struct intc_desc symbol __initdata = {					\
 }
 
 int register_intc_controller(struct intc_desc *desc);
-void reserve_intc_vectors(struct intc_vect *vectors, unsigned int nr_vecs);
 int intc_set_priority(unsigned int irq, unsigned int prio);
 int intc_irq_lookup(const char *chipname, intc_enum enum_id);
 void intc_finalize(void);

commit 0f55239348aa85021d8bf8b63d84a796fcc142a4
Author: Rob Herring <rob.herring@calxeda.com>
Date:   Tue Jan 17 13:10:25 2012 -0600

    sh: intc: remove dependency on NR_IRQS
    
    SH intc has a compile time dependency on NR_IRQS. Make this dependency a
    local define so that shmobile (and ARM in general) can have run-time
    NR_IRQS setting.
    
    Signed-off-by: Rob Herring <rob.herring@calxeda.com>

diff --git a/include/linux/sh_intc.h b/include/linux/sh_intc.h
index e1a2ac5c931b..6aed0805927f 100644
--- a/include/linux/sh_intc.h
+++ b/include/linux/sh_intc.h
@@ -3,6 +3,12 @@
 
 #include <linux/ioport.h>
 
+#ifdef CONFIG_SUPERH
+#define INTC_NR_IRQS	512
+#else
+#define INTC_NR_IRQS	1024
+#endif
+
 /*
  * Convert back and forth between INTEVT and IRQ values.
  */

commit 7f1e76370b717be264f0af54719182a96fb8f36d
Author: Rob Herring <rob.herring@calxeda.com>
Date:   Tue Jan 17 11:20:23 2012 -0600

    sh: intc: unify evt2irq/irq2evt macros for sh and arm
    
    Move evt2irq and irq2evt macros definitions out of sh and arm includes
    into a common location.
    
    Signed-off-by: Rob Herring <rob.herring@calxeda.com>

diff --git a/include/linux/sh_intc.h b/include/linux/sh_intc.h
index b160645f5599..e1a2ac5c931b 100644
--- a/include/linux/sh_intc.h
+++ b/include/linux/sh_intc.h
@@ -3,6 +3,17 @@
 
 #include <linux/ioport.h>
 
+/*
+ * Convert back and forth between INTEVT and IRQ values.
+ */
+#ifdef CONFIG_CPU_HAS_INTEVT
+#define evt2irq(evt)		(((evt) >> 5) - 16)
+#define irq2evt(irq)		(((irq) + 16) << 5)
+#else
+#define evt2irq(evt)		(evt)
+#define irq2evt(irq)		(irq)
+#endif
+
 typedef unsigned char intc_enum;
 
 struct intc_vect {

commit 0f966d74cf77a9140a025464a287e1d2fee8a1fc
Author: Rafael J. Wysocki <rjw@sisk.pl>
Date:   Fri Dec 23 01:23:30 2011 +0100

    PM / shmobile: Don't include SH7372's INTCS in syscore suspend/resume
    
    Since the SH7372's INTCS in included into syscore suspend/resume,
    which causes the chip to be accessed when PM domains have been
    turned off during system suspend, the A4R domain containing the
    INTCS has to stay on during system sleep, which is suboptimal
    from the power consumption point of view.
    
    For this reason, add a new INTC flag, skip_syscore_suspend, to mark
    the INTCS for intc_suspend() and intc_resume(), so that they don't
    touch it.  This allows the A4R domain to be turned off during
    system suspend and the INTCS state is resrored during system
    resume by the A4R's "power on" code.
    
    Suggested-by: Magnus Damm <damm@opensource.se>
    Signed-off-by: Rafael J. Wysocki <rjw@sisk.pl>
    Acked-by: Magnus Damm <damm@opensource.se>

diff --git a/include/linux/sh_intc.h b/include/linux/sh_intc.h
index 5812fefbcedf..b160645f5599 100644
--- a/include/linux/sh_intc.h
+++ b/include/linux/sh_intc.h
@@ -95,6 +95,7 @@ struct intc_desc {
 	unsigned int num_resources;
 	intc_enum force_enable;
 	intc_enum force_disable;
+	bool skip_syscore_suspend;
 	struct intc_hw_desc hw;
 };
 

commit 99870bd784ff9eb2405eab060125c0ded74968cd
Author: Paul Mundt <lethal@linux-sh.org>
Date:   Mon Nov 8 17:02:26 2010 +0900

    sh: intc: Fix up initializers for gcc 4.5.
    
    The _INTC_ARRAY() initializer presently does a NULL test which blows up
    as a non-constant initializer under gcc 4.5. This switches over to a type
    test to account for NULL initializers explicitly.
    
    Signed-off-by: Paul Mundt <lethal@linux-sh.org>

diff --git a/include/linux/sh_intc.h b/include/linux/sh_intc.h
index f656d1a43dc0..5812fefbcedf 100644
--- a/include/linux/sh_intc.h
+++ b/include/linux/sh_intc.h
@@ -79,7 +79,7 @@ struct intc_hw_desc {
 	unsigned int nr_subgroups;
 };
 
-#define _INTC_ARRAY(a) a, a == NULL ? 0 : sizeof(a)/sizeof(*a)
+#define _INTC_ARRAY(a) a, __same_type(a, NULL) ? 0 : sizeof(a)/sizeof(*a)
 
 #define INTC_HW_DESC(vectors, groups, mask_regs,	\
 		     prio_regs,	sense_regs, ack_regs)	\

commit 38ab13441c36c0c470b7e4e3b30ec2fb6beba253
Author: Paul Mundt <lethal@linux-sh.org>
Date:   Tue Oct 26 16:05:08 2010 +0900

    sh: Switch dynamic IRQ creation to generic irq allocator.
    
    Now that the genirq code provides an IRQ bitmap of its own and the
    necessary API to manipulate it, there's no need to keep our own version
    around anymore.
    
    In the process we kill off some unused IRQ reservation code, with future
    users now having to tie in to the genirq API as normal.
    
    Signed-off-by: Paul Mundt <lethal@linux-sh.org>

diff --git a/include/linux/sh_intc.h b/include/linux/sh_intc.h
index b4f183a31f13..f656d1a43dc0 100644
--- a/include/linux/sh_intc.h
+++ b/include/linux/sh_intc.h
@@ -129,7 +129,4 @@ static inline int register_intc_userimask(unsigned long addr)
 }
 #endif
 
-int reserve_irq_vector(unsigned int irq);
-void reserve_irq_legacy(void);
-
 #endif /* __SH_INTC_H */

commit 2be6bb0c79c7fbda3425b65ee51c558bbaf4cf91
Author: Paul Mundt <lethal@linux-sh.org>
Date:   Tue Oct 5 22:10:30 2010 +0900

    sh: intc: Split up the INTC code.
    
    This splits up the sh intc core in to something more vaguely resembling
    a subsystem. Most of the functionality was alread fairly well
    compartmentalized, and there were only a handful of interdependencies
    that needed to be resolved in the process.
    
    This also serves as future-proofing for the genirq and sparseirq rework,
    which will make some of the split out functionality wholly generic,
    allowing things to be killed off in place with minimal migration pain.
    
    Signed-off-by: Paul Mundt <lethal@linux-sh.org>

diff --git a/include/linux/sh_intc.h b/include/linux/sh_intc.h
index 1fc69701e0f8..b4f183a31f13 100644
--- a/include/linux/sh_intc.h
+++ b/include/linux/sh_intc.h
@@ -114,7 +114,7 @@ struct intc_desc symbol __initdata = {					\
 			   prio_regs, sense_regs, ack_regs),		\
 }
 
-int __init register_intc_controller(struct intc_desc *desc);
+int register_intc_controller(struct intc_desc *desc);
 void reserve_intc_vectors(struct intc_vect *vectors, unsigned int nr_vecs);
 int intc_set_priority(unsigned int irq, unsigned int prio);
 int intc_irq_lookup(const char *chipname, intc_enum enum_id);

commit d74310d3b18aabbb7d0549ea9e3fd3259c1dce00
Author: Paul Mundt <lethal@linux-sh.org>
Date:   Tue Oct 5 18:13:23 2010 +0900

    sh: intc: Handle early lookups of subgroup IRQs.
    
    If lookups happen while the radix node still points to a subgroup
    mapping, an IRQ hasn't yet been made available for the specified id, so
    error out accordingly. Once the slot is replaced with an IRQ mapping and
    the tag is discarded, lookup can commence as normal.
    
    Signed-off-by: Paul Mundt <lethal@linux-sh.org>

diff --git a/include/linux/sh_intc.h b/include/linux/sh_intc.h
index 04134a6c7b52..1fc69701e0f8 100644
--- a/include/linux/sh_intc.h
+++ b/include/linux/sh_intc.h
@@ -117,7 +117,7 @@ struct intc_desc symbol __initdata = {					\
 int __init register_intc_controller(struct intc_desc *desc);
 void reserve_intc_vectors(struct intc_vect *vectors, unsigned int nr_vecs);
 int intc_set_priority(unsigned int irq, unsigned int prio);
-unsigned int intc_irq_lookup(const char *chipname, intc_enum enum_id);
+int intc_irq_lookup(const char *chipname, intc_enum enum_id);
 void intc_finalize(void);
 
 #ifdef CONFIG_INTC_USERIMASK

commit c1e30ad98fe210688edca872686db4a715c2fb23
Author: Paul Mundt <lethal@linux-sh.org>
Date:   Tue Oct 5 04:47:03 2010 +0900

    sh: intc: Support virtual mappings for IRQ subgroups.
    
    Many interrupts that share a single mask source but are on different
    hardware vectors will have an associated register tied to an INTEVT that
    denotes the precise cause for the interrupt exception being triggered.
    
    This introduces the concept of IRQ subgroups in the intc core, where
    a virtual IRQ map is constructed for each of the pre-defined cause bits,
    and a higher level chained handler takes control of the parent INTEVT.
    This enables CPUs with heavily muxed IRQ vectors (especially across
    disjoint blocks) to break things out in to a series of managed chained
    handlers while being able to dynamically lookup and adopt the IRQs
    created for them.
    
    This is largely an opt-in interface, requiring CPUs to manually submit
    IRQs for subgroup splitting, in addition to providing identifiers in
    their enum maps that can be used for lazy lookup via the radix tree.
    
    Signed-off-by: Paul Mundt <lethal@linux-sh.org>

diff --git a/include/linux/sh_intc.h b/include/linux/sh_intc.h
index d40fd77fa75c..04134a6c7b52 100644
--- a/include/linux/sh_intc.h
+++ b/include/linux/sh_intc.h
@@ -20,6 +20,12 @@ struct intc_group {
 
 #define INTC_GROUP(enum_id, ids...) { enum_id, { ids } }
 
+struct intc_subgroup {
+	unsigned long reg, reg_width;
+	intc_enum parent_id;
+	intc_enum enum_ids[32];
+};
+
 struct intc_mask_reg {
 	unsigned long set_reg, clr_reg, reg_width;
 	intc_enum enum_ids[32];
@@ -69,9 +75,12 @@ struct intc_hw_desc {
 	unsigned int nr_sense_regs;
 	struct intc_mask_reg *ack_regs;
 	unsigned int nr_ack_regs;
+	struct intc_subgroup *subgroups;
+	unsigned int nr_subgroups;
 };
 
-#define _INTC_ARRAY(a) a, sizeof(a)/sizeof(*a)
+#define _INTC_ARRAY(a) a, a == NULL ? 0 : sizeof(a)/sizeof(*a)
+
 #define INTC_HW_DESC(vectors, groups, mask_regs,	\
 		     prio_regs,	sense_regs, ack_regs)	\
 {							\
@@ -109,6 +118,7 @@ int __init register_intc_controller(struct intc_desc *desc);
 void reserve_intc_vectors(struct intc_vect *vectors, unsigned int nr_vecs);
 int intc_set_priority(unsigned int irq, unsigned int prio);
 unsigned int intc_irq_lookup(const char *chipname, intc_enum enum_id);
+void intc_finalize(void);
 
 #ifdef CONFIG_INTC_USERIMASK
 int register_intc_userimask(unsigned long addr);

commit 44629f57accccbb8e6d443246fe6f51b42f7f781
Author: Paul Mundt <lethal@linux-sh.org>
Date:   Thu Sep 23 20:09:38 2010 +0900

    sh: intc: Implement reverse mapping for IRQs to per-controller IDs.
    
    This implements a scheme roughly analogous to the PowerPC virtual to
    hardware IRQ mapping, which we use for IRQ to per-controller ID mapping.
    This makes it possible for drivers to use the IDs directly for lookup
    instead of hardcoding the vector.
    
    The main motivation for this work is as a building block for dynamically
    allocating virtual IRQs for demuxing INTC events sharing a single INTEVT
    in addition to a common masking source.
    
    Signed-off-by: Paul Mundt <lethal@linux-sh.org>

diff --git a/include/linux/sh_intc.h b/include/linux/sh_intc.h
index bff2f286ca61..d40fd77fa75c 100644
--- a/include/linux/sh_intc.h
+++ b/include/linux/sh_intc.h
@@ -108,6 +108,7 @@ struct intc_desc symbol __initdata = {					\
 int __init register_intc_controller(struct intc_desc *desc);
 void reserve_intc_vectors(struct intc_vect *vectors, unsigned int nr_vecs);
 int intc_set_priority(unsigned int irq, unsigned int prio);
+unsigned int intc_irq_lookup(const char *chipname, intc_enum enum_id);
 
 #ifdef CONFIG_INTC_USERIMASK
 int register_intc_userimask(unsigned long addr);

commit 4bacd796ccd6976b03dd490708a1abc291d5521e
Author: Paul Mundt <lethal@linux-sh.org>
Date:   Sat Oct 2 22:02:07 2010 +0900

    sh: Support early IRQ vector map reservation for delayed controllers.
    
    Some controllers will need to be initialized lazily due to pinmux
    constraints, while others may simply have no need to be brought online if
    there are no backing devices for them attached. In this case it's still
    necessary to be able to reserve their hardware vector map before dynamic
    IRQs get a hold of them.
    
    Signed-off-by: Paul Mundt <lethal@linux-sh.org>

diff --git a/include/linux/sh_intc.h b/include/linux/sh_intc.h
index 0d6cd38e673d..bff2f286ca61 100644
--- a/include/linux/sh_intc.h
+++ b/include/linux/sh_intc.h
@@ -106,6 +106,7 @@ struct intc_desc symbol __initdata = {					\
 }
 
 int __init register_intc_controller(struct intc_desc *desc);
+void reserve_intc_vectors(struct intc_vect *vectors, unsigned int nr_vecs);
 int intc_set_priority(unsigned int irq, unsigned int prio);
 
 #ifdef CONFIG_INTC_USERIMASK

commit dc825b17904a06bbd2f79d720b23156e4c01a22f
Author: Paul Mundt <lethal@linux-sh.org>
Date:   Thu Apr 15 13:13:52 2010 +0900

    sh: intc: IRQ auto-distribution support.
    
    This implements support for hardware-managed IRQ balancing as implemented
    by SH-X3 cores (presently only hooked up for SH7786, but can probably be
    carried over to other SH-X3 cores, too).
    
    CPUs need to specify their distribution register along with the mask
    definitions, as these follow the same format. Peripheral IRQs that don't
    opt out of balancing will be automatically distributed at the whim of the
    hardware block, while each CPU needs to verify whether it is handling the
    IRQ or not, especially before clearing the mask.
    
    Signed-off-by: Paul Mundt <lethal@linux-sh.org>

diff --git a/include/linux/sh_intc.h b/include/linux/sh_intc.h
index f0e8cca199c7..0d6cd38e673d 100644
--- a/include/linux/sh_intc.h
+++ b/include/linux/sh_intc.h
@@ -23,6 +23,9 @@ struct intc_group {
 struct intc_mask_reg {
 	unsigned long set_reg, clr_reg, reg_width;
 	intc_enum enum_ids[32];
+#ifdef CONFIG_INTC_BALANCING
+	unsigned long dist_reg;
+#endif
 #ifdef CONFIG_SMP
 	unsigned long smp;
 #endif
@@ -41,8 +44,14 @@ struct intc_sense_reg {
 	intc_enum enum_ids[16];
 };
 
+#ifdef CONFIG_INTC_BALANCING
+#define INTC_SMP_BALANCING(reg)	.dist_reg = (reg)
+#else
+#define INTC_SMP_BALANCING(reg)
+#endif
+
 #ifdef CONFIG_SMP
-#define INTC_SMP(stride, nr) .smp = (stride) | ((nr) << 8)
+#define INTC_SMP(stride, nr)	.smp = (stride) | ((nr) << 8)
 #else
 #define INTC_SMP(stride, nr)
 #endif

commit 43b8774dc409ea5d9369b978e2e7bc79289f0522
Author: Paul Mundt <lethal@linux-sh.org>
Date:   Tue Apr 13 14:43:03 2010 +0900

    sh: intc: userimask support.
    
    This adds support for hardware-assisted userspace irq masking for
    special priority levels. Due to the SR.IMASK interactivity, only some
    platforms implement this in hardware (including but not limited to
    SH-4A interrupt controllers, and ARM-based SH-Mobile CPUs). Each CPU
    needs to wire this up on its own, for now only SH7786 is wired up as an
    example.
    
    Signed-off-by: Paul Mundt <lethal@linux-sh.org>

diff --git a/include/linux/sh_intc.h b/include/linux/sh_intc.h
index 01d8168c5a1b..f0e8cca199c7 100644
--- a/include/linux/sh_intc.h
+++ b/include/linux/sh_intc.h
@@ -99,6 +99,15 @@ struct intc_desc symbol __initdata = {					\
 int __init register_intc_controller(struct intc_desc *desc);
 int intc_set_priority(unsigned int irq, unsigned int prio);
 
+#ifdef CONFIG_INTC_USERIMASK
+int register_intc_userimask(unsigned long addr);
+#else
+static inline int register_intc_userimask(unsigned long addr)
+{
+	return 0;
+}
+#endif
+
 int reserve_irq_vector(unsigned int irq);
 void reserve_irq_legacy(void);
 

commit dec710b77c2cf04bf512acada3c14a16f11708d9
Author: Magnus Damm <damm@opensource.se>
Date:   Fri Mar 19 16:48:01 2010 +0900

    sh: INTC ioremap support
    
    Extend the INTC code with ioremap() support V2.
    
    Support INTC controllers that are not accessible through
    a 1:1 virt:phys window. Needed by SH-Mobile ARM INTCS.
    
    The INTC code behaves as usual if the io window resource
    is omitted. The slow phys->virt lookup only happens during
    setup. The fast path code operates on virtual addresses.
    
    Signed-off-by: Magnus Damm <damm@opensource.se>
    Signed-off-by: Paul Mundt <lethal@linux-sh.org>

diff --git a/include/linux/sh_intc.h b/include/linux/sh_intc.h
index df3777035936..01d8168c5a1b 100644
--- a/include/linux/sh_intc.h
+++ b/include/linux/sh_intc.h
@@ -1,6 +1,8 @@
 #ifndef __SH_INTC_H
 #define __SH_INTC_H
 
+#include <linux/ioport.h>
+
 typedef unsigned char intc_enum;
 
 struct intc_vect {
@@ -71,6 +73,8 @@ struct intc_hw_desc {
 
 struct intc_desc {
 	char *name;
+	struct resource *resource;
+	unsigned int num_resources;
 	intc_enum force_enable;
 	intc_enum force_disable;
 	struct intc_hw_desc hw;

commit 01e9651a21bc0e6731da733593e4aaf4cf46b5e5
Author: Magnus Damm <damm@opensource.se>
Date:   Wed Mar 10 09:31:01 2010 +0000

    sh: add INTC out of memory error handling
    
    Extend the INTC code to warn and return an error code
    in the case of memory allocation failure.
    
    Signed-off-by: Magnus Damm <damm@opensource.se>
    Signed-off-by: Paul Mundt <lethal@linux-sh.org>

diff --git a/include/linux/sh_intc.h b/include/linux/sh_intc.h
index 51d288d8ac88..df3777035936 100644
--- a/include/linux/sh_intc.h
+++ b/include/linux/sh_intc.h
@@ -92,7 +92,7 @@ struct intc_desc symbol __initdata = {					\
 			   prio_regs, sense_regs, ack_regs),		\
 }
 
-void __init register_intc_controller(struct intc_desc *desc);
+int __init register_intc_controller(struct intc_desc *desc);
 int intc_set_priority(unsigned int irq, unsigned int prio);
 
 int reserve_irq_vector(unsigned int irq);

commit d85429a31790361b9e952be3817134c23b3b758a
Author: Magnus Damm <damm@opensource.se>
Date:   Mon Feb 15 11:40:25 2010 +0000

    sh: extend INTC with force_disable
    
    Extend the shared INTC code with force_disable support to
    allow keeping mask bits statically disabled. Needed for
    SDHI support to mask out unsupported interrupt sources.
    
    Signed-off-by: Magnus Damm <damm@opensource.se>
    Signed-off-by: Paul Mundt <lethal@linux-sh.org>

diff --git a/include/linux/sh_intc.h b/include/linux/sh_intc.h
index 66b4b0c45e71..51d288d8ac88 100644
--- a/include/linux/sh_intc.h
+++ b/include/linux/sh_intc.h
@@ -72,6 +72,7 @@ struct intc_hw_desc {
 struct intc_desc {
 	char *name;
 	intc_enum force_enable;
+	intc_enum force_disable;
 	struct intc_hw_desc hw;
 };
 

commit d519095344fda705c9840a579acf6aa6205c37cc
Author: Magnus Damm <damm@opensource.se>
Date:   Tue Feb 9 04:29:22 2010 +0000

    sh: extend INTC with force_enable
    
    Extend the shared INTC code with force_enable support to
    allow keeping mask bits statically enabled. Needed by
    upcoming INTC SDHI patches that mux together a bunch of
    vectors to a single linux interrupt which is masked by
    a priority register, but needs individual mask bits
    constantly enabled.
    
    Signed-off-by: Magnus Damm <damm@opensource.se>
    Signed-off-by: Paul Mundt <lethal@linux-sh.org>

diff --git a/include/linux/sh_intc.h b/include/linux/sh_intc.h
index 7b37526bb73f..66b4b0c45e71 100644
--- a/include/linux/sh_intc.h
+++ b/include/linux/sh_intc.h
@@ -71,6 +71,7 @@ struct intc_hw_desc {
 
 struct intc_desc {
 	char *name;
+	intc_enum force_enable;
 	struct intc_hw_desc hw;
 };
 

commit 577cd7584cf5199f1ea22cca0ad1fa129a98effa
Author: Magnus Damm <damm@opensource.se>
Date:   Tue Feb 9 04:24:46 2010 +0000

    sh: extend INTC with struct intc_hw_desc
    
    This patch updates the INTC code by moving all vectors,
    groups and registers from struct intc_desc to struct
    intc_hw_desc.
    
    The idea is that INTC tables should go from using the
    macro(s) DECLARE_INTC_DESC..() only to using struct
    intc_desc with name and hw initialized using the macro
    INTC_HW_DESC(). This move makes it easy to initialize
    an extended struct intc_desc in the future.
    
    Signed-off-by: Magnus Damm <damm@opensource.se>
    Signed-off-by: Paul Mundt <lethal@linux-sh.org>

diff --git a/include/linux/sh_intc.h b/include/linux/sh_intc.h
index 4ef246f14654..7b37526bb73f 100644
--- a/include/linux/sh_intc.h
+++ b/include/linux/sh_intc.h
@@ -45,7 +45,7 @@ struct intc_sense_reg {
 #define INTC_SMP(stride, nr)
 #endif
 
-struct intc_desc {
+struct intc_hw_desc {
 	struct intc_vect *vectors;
 	unsigned int nr_vectors;
 	struct intc_group *groups;
@@ -56,29 +56,38 @@ struct intc_desc {
 	unsigned int nr_prio_regs;
 	struct intc_sense_reg *sense_regs;
 	unsigned int nr_sense_regs;
-	char *name;
 	struct intc_mask_reg *ack_regs;
 	unsigned int nr_ack_regs;
 };
 
 #define _INTC_ARRAY(a) a, sizeof(a)/sizeof(*a)
+#define INTC_HW_DESC(vectors, groups, mask_regs,	\
+		     prio_regs,	sense_regs, ack_regs)	\
+{							\
+	_INTC_ARRAY(vectors), _INTC_ARRAY(groups),	\
+	_INTC_ARRAY(mask_regs), _INTC_ARRAY(prio_regs),	\
+	_INTC_ARRAY(sense_regs), _INTC_ARRAY(ack_regs),	\
+}
+
+struct intc_desc {
+	char *name;
+	struct intc_hw_desc hw;
+};
+
 #define DECLARE_INTC_DESC(symbol, chipname, vectors, groups,		\
 	mask_regs, prio_regs, sense_regs)				\
 struct intc_desc symbol __initdata = {					\
-	_INTC_ARRAY(vectors), _INTC_ARRAY(groups),			\
-	_INTC_ARRAY(mask_regs), _INTC_ARRAY(prio_regs),			\
-	_INTC_ARRAY(sense_regs),					\
-	chipname,							\
+	.name = chipname,						\
+	.hw = INTC_HW_DESC(vectors, groups, mask_regs,			\
+			   prio_regs, sense_regs, NULL),		\
 }
 
 #define DECLARE_INTC_DESC_ACK(symbol, chipname, vectors, groups,	\
 	mask_regs, prio_regs, sense_regs, ack_regs)			\
 struct intc_desc symbol __initdata = {					\
-	_INTC_ARRAY(vectors), _INTC_ARRAY(groups),			\
-	_INTC_ARRAY(mask_regs), _INTC_ARRAY(prio_regs),			\
-	_INTC_ARRAY(sense_regs),					\
-	chipname,							\
-	_INTC_ARRAY(ack_regs),						\
+	.name = chipname,						\
+	.hw = INTC_HW_DESC(vectors, groups, mask_regs,			\
+			   prio_regs, sense_regs, ack_regs),		\
 }
 
 void __init register_intc_controller(struct intc_desc *desc);

commit 45b9deaf14e74543371aa8faea69c14e27b038c6
Author: Paul Mundt <lethal@linux-sh.org>
Date:   Mon Nov 2 15:43:20 2009 +0900

    sh: intc: Handle legacy IRQ reservation in vector map.
    
    Different CPUs will have different starting vectors, with varying
    amounts of reserved or unusable vector space prior to the first slot.
    This introduces a legacy vector reservation system that inserts itself in
    between the CPU vector map registration and the platform specific IRQ
    setup. This works fine in practice as the only new vectors that boards
    need to establish on their own should be dynamically allocated rather
    than arbitrarily assigned. As a plus, this also makes all of the
    converted platforms sparseirq ready.
    
    Signed-off-by: Paul Mundt <lethal@linux-sh.org>

diff --git a/include/linux/sh_intc.h b/include/linux/sh_intc.h
index 4e4b22d50164..4ef246f14654 100644
--- a/include/linux/sh_intc.h
+++ b/include/linux/sh_intc.h
@@ -84,4 +84,7 @@ struct intc_desc symbol __initdata = {					\
 void __init register_intc_controller(struct intc_desc *desc);
 int intc_set_priority(unsigned int irq, unsigned int prio);
 
+int reserve_irq_vector(unsigned int irq);
+void reserve_irq_legacy(void);
+
 #endif /* __SH_INTC_H */

commit 9b798d50df3a98d22a6cbae565d9f4f630d161a6
Author: Paul Mundt <lethal@linux-sh.org>
Date:   Tue Oct 27 11:36:43 2009 +0900

    sh: intc: Make ack_regs generally available.
    
    Currently this is ifdef'ed under SH-3 and SH-4A, but there are other CPUs
    that will need this as well. Given the size of the existing data
    structures, this doesn't cause any additional cacheline utilization for
    the existing users, so has no direct impact on the data structures.
    
    Signed-off-by: Paul Mundt <lethal@linux-sh.org>

diff --git a/include/linux/sh_intc.h b/include/linux/sh_intc.h
index 68e212ff9dde..4e4b22d50164 100644
--- a/include/linux/sh_intc.h
+++ b/include/linux/sh_intc.h
@@ -57,10 +57,8 @@ struct intc_desc {
 	struct intc_sense_reg *sense_regs;
 	unsigned int nr_sense_regs;
 	char *name;
-#if defined(CONFIG_CPU_SH3) || defined(CONFIG_CPU_SH4A)
 	struct intc_mask_reg *ack_regs;
 	unsigned int nr_ack_regs;
-#endif
 };
 
 #define _INTC_ARRAY(a) a, sizeof(a)/sizeof(*a)
@@ -73,7 +71,6 @@ struct intc_desc symbol __initdata = {					\
 	chipname,							\
 }
 
-#if defined(CONFIG_CPU_SH3) || defined(CONFIG_CPU_SH4A)
 #define DECLARE_INTC_DESC_ACK(symbol, chipname, vectors, groups,	\
 	mask_regs, prio_regs, sense_regs, ack_regs)			\
 struct intc_desc symbol __initdata = {					\
@@ -83,7 +80,6 @@ struct intc_desc symbol __initdata = {					\
 	chipname,							\
 	_INTC_ARRAY(ack_regs),						\
 }
-#endif
 
 void __init register_intc_controller(struct intc_desc *desc);
 int intc_set_priority(unsigned int irq, unsigned int prio);

commit 05ecd5a1f76c183cca381705b3adb7d77c9a0439
Author: Pawel Moll <pawel.moll@st.com>
Date:   Mon Aug 24 19:52:38 2009 +0900

    sh: Simplify "multi-evt" interrupt handling.
    
    This patch changes the way in which "multi-evt" interrups are handled.
    The intc_evt2irq_table and related intc_evt2irq() have been removed and
    the "redirecting" handler is installed for the coupled interrupts.
    
    Thanks to that the do_IRQ() function don't have to use another level
    of indirection for all the interrupts...
    
    Signed-off-by: Pawel Moll <pawel.moll@st.com>
    Signed-off-by: Stuart Menefy <stuart.menefy@st.com>
    Signed-off-by: Paul Mundt <lethal@linux-sh.org>

diff --git a/include/linux/sh_intc.h b/include/linux/sh_intc.h
index eb1423a0078d..68e212ff9dde 100644
--- a/include/linux/sh_intc.h
+++ b/include/linux/sh_intc.h
@@ -85,7 +85,6 @@ struct intc_desc symbol __initdata = {					\
 }
 #endif
 
-unsigned int intc_evt2irq(unsigned int vector);
 void __init register_intc_controller(struct intc_desc *desc);
 int intc_set_priority(unsigned int irq, unsigned int prio);
 

commit bdaa6e8062d7f8085d8ed94ff88c99406ad53d79
Author: Magnus Damm <damm@igel.co.jp>
Date:   Tue Feb 24 22:58:57 2009 +0900

    sh: multiple vectors per irq - base
    
    Instead of keeping the single vector -> single linux irq mapping
    we extend the intc code to support merging of vectors to a single
    linux irq. This helps processors such as sh7750, sh7780 and sh7785
    which have more vectors than masking ability. With this patch in
    place we can modify the intc tables to use one irq per maskable
    irq source. Please note the following:
    
     - If multiple vectors share the same enum then only the
       first vector will be available as a linux irq.
    
     - Drivers may need to be rewritten to get pending irq
       source from the hardware block instead of irq number.
    
    This patch together with the sh7785 specific intc tables solves
    DMA controller irq issues related to buggy interrupt masking.
    
    Reported-by: Yoshihiro Shimoda <shimoda.yoshihiro@renesas.com>
    Signed-off-by: Magnus Damm <damm@igel.co.jp>
    Signed-off-by: Paul Mundt <lethal@linux-sh.org>

diff --git a/include/linux/sh_intc.h b/include/linux/sh_intc.h
index 68e212ff9dde..eb1423a0078d 100644
--- a/include/linux/sh_intc.h
+++ b/include/linux/sh_intc.h
@@ -85,6 +85,7 @@ struct intc_desc symbol __initdata = {					\
 }
 #endif
 
+unsigned int intc_evt2irq(unsigned int vector);
 void __init register_intc_controller(struct intc_desc *desc);
 int intc_set_priority(unsigned int irq, unsigned int prio);
 

commit bbfbd8b151fe35c9a1180a7f5254c5d6b8387cc0
Author: Paul Mundt <lethal@linux-sh.org>
Date:   Wed Oct 1 16:13:54 2008 +0900

    sh: Move the shared INTC code out to drivers/sh/
    
    The INTC code will be re-used across different architectures, so move
    this out to drivers/sh/ and include/linux/sh_intc.h respectively.
    
    Signed-off-by: Paul Mundt <lethal@linux-sh.org>

diff --git a/include/linux/sh_intc.h b/include/linux/sh_intc.h
new file mode 100644
index 000000000000..68e212ff9dde
--- /dev/null
+++ b/include/linux/sh_intc.h
@@ -0,0 +1,91 @@
+#ifndef __SH_INTC_H
+#define __SH_INTC_H
+
+typedef unsigned char intc_enum;
+
+struct intc_vect {
+	intc_enum enum_id;
+	unsigned short vect;
+};
+
+#define INTC_VECT(enum_id, vect) { enum_id, vect }
+#define INTC_IRQ(enum_id, irq) INTC_VECT(enum_id, irq2evt(irq))
+
+struct intc_group {
+	intc_enum enum_id;
+	intc_enum enum_ids[32];
+};
+
+#define INTC_GROUP(enum_id, ids...) { enum_id, { ids } }
+
+struct intc_mask_reg {
+	unsigned long set_reg, clr_reg, reg_width;
+	intc_enum enum_ids[32];
+#ifdef CONFIG_SMP
+	unsigned long smp;
+#endif
+};
+
+struct intc_prio_reg {
+	unsigned long set_reg, clr_reg, reg_width, field_width;
+	intc_enum enum_ids[16];
+#ifdef CONFIG_SMP
+	unsigned long smp;
+#endif
+};
+
+struct intc_sense_reg {
+	unsigned long reg, reg_width, field_width;
+	intc_enum enum_ids[16];
+};
+
+#ifdef CONFIG_SMP
+#define INTC_SMP(stride, nr) .smp = (stride) | ((nr) << 8)
+#else
+#define INTC_SMP(stride, nr)
+#endif
+
+struct intc_desc {
+	struct intc_vect *vectors;
+	unsigned int nr_vectors;
+	struct intc_group *groups;
+	unsigned int nr_groups;
+	struct intc_mask_reg *mask_regs;
+	unsigned int nr_mask_regs;
+	struct intc_prio_reg *prio_regs;
+	unsigned int nr_prio_regs;
+	struct intc_sense_reg *sense_regs;
+	unsigned int nr_sense_regs;
+	char *name;
+#if defined(CONFIG_CPU_SH3) || defined(CONFIG_CPU_SH4A)
+	struct intc_mask_reg *ack_regs;
+	unsigned int nr_ack_regs;
+#endif
+};
+
+#define _INTC_ARRAY(a) a, sizeof(a)/sizeof(*a)
+#define DECLARE_INTC_DESC(symbol, chipname, vectors, groups,		\
+	mask_regs, prio_regs, sense_regs)				\
+struct intc_desc symbol __initdata = {					\
+	_INTC_ARRAY(vectors), _INTC_ARRAY(groups),			\
+	_INTC_ARRAY(mask_regs), _INTC_ARRAY(prio_regs),			\
+	_INTC_ARRAY(sense_regs),					\
+	chipname,							\
+}
+
+#if defined(CONFIG_CPU_SH3) || defined(CONFIG_CPU_SH4A)
+#define DECLARE_INTC_DESC_ACK(symbol, chipname, vectors, groups,	\
+	mask_regs, prio_regs, sense_regs, ack_regs)			\
+struct intc_desc symbol __initdata = {					\
+	_INTC_ARRAY(vectors), _INTC_ARRAY(groups),			\
+	_INTC_ARRAY(mask_regs), _INTC_ARRAY(prio_regs),			\
+	_INTC_ARRAY(sense_regs),					\
+	chipname,							\
+	_INTC_ARRAY(ack_regs),						\
+}
+#endif
+
+void __init register_intc_controller(struct intc_desc *desc);
+int intc_set_priority(unsigned int irq, unsigned int prio);
+
+#endif /* __SH_INTC_H */
