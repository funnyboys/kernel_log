commit b24413180f5600bcb3bb70fbed5cf186b60864bd
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Wed Nov 1 15:07:57 2017 +0100

    License cleanup: add SPDX GPL-2.0 license identifier to files with no license
    
    Many source files in the tree are missing licensing information, which
    makes it harder for compliance tools to determine the correct license.
    
    By default all files without license information are under the default
    license of the kernel, which is GPL version 2.
    
    Update the files which contain no license information with the 'GPL-2.0'
    SPDX license identifier.  The SPDX identifier is a legally binding
    shorthand, which can be used instead of the full boiler plate text.
    
    This patch is based on work done by Thomas Gleixner and Kate Stewart and
    Philippe Ombredanne.
    
    How this work was done:
    
    Patches were generated and checked against linux-4.14-rc6 for a subset of
    the use cases:
     - file had no licensing information it it.
     - file was a */uapi/* one with no licensing information in it,
     - file was a */uapi/* one with existing licensing information,
    
    Further patches will be generated in subsequent months to fix up cases
    where non-standard license headers were used, and references to license
    had to be inferred by heuristics based on keywords.
    
    The analysis to determine which SPDX License Identifier to be applied to
    a file was done in a spreadsheet of side by side results from of the
    output of two independent scanners (ScanCode & Windriver) producing SPDX
    tag:value files created by Philippe Ombredanne.  Philippe prepared the
    base worksheet, and did an initial spot review of a few 1000 files.
    
    The 4.13 kernel was the starting point of the analysis with 60,537 files
    assessed.  Kate Stewart did a file by file comparison of the scanner
    results in the spreadsheet to determine which SPDX license identifier(s)
    to be applied to the file. She confirmed any determination that was not
    immediately clear with lawyers working with the Linux Foundation.
    
    Criteria used to select files for SPDX license identifier tagging was:
     - Files considered eligible had to be source code files.
     - Make and config files were included as candidates if they contained >5
       lines of source
     - File already had some variant of a license header in it (even if <5
       lines).
    
    All documentation files were explicitly excluded.
    
    The following heuristics were used to determine which SPDX license
    identifiers to apply.
    
     - when both scanners couldn't find any license traces, file was
       considered to have no license information in it, and the top level
       COPYING file license applied.
    
       For non */uapi/* files that summary was:
    
       SPDX license identifier                            # files
       ---------------------------------------------------|-------
       GPL-2.0                                              11139
    
       and resulted in the first patch in this series.
    
       If that file was a */uapi/* path one, it was "GPL-2.0 WITH
       Linux-syscall-note" otherwise it was "GPL-2.0".  Results of that was:
    
       SPDX license identifier                            # files
       ---------------------------------------------------|-------
       GPL-2.0 WITH Linux-syscall-note                        930
    
       and resulted in the second patch in this series.
    
     - if a file had some form of licensing information in it, and was one
       of the */uapi/* ones, it was denoted with the Linux-syscall-note if
       any GPL family license was found in the file or had no licensing in
       it (per prior point).  Results summary:
    
       SPDX license identifier                            # files
       ---------------------------------------------------|------
       GPL-2.0 WITH Linux-syscall-note                       270
       GPL-2.0+ WITH Linux-syscall-note                      169
       ((GPL-2.0 WITH Linux-syscall-note) OR BSD-2-Clause)    21
       ((GPL-2.0 WITH Linux-syscall-note) OR BSD-3-Clause)    17
       LGPL-2.1+ WITH Linux-syscall-note                      15
       GPL-1.0+ WITH Linux-syscall-note                       14
       ((GPL-2.0+ WITH Linux-syscall-note) OR BSD-3-Clause)    5
       LGPL-2.0+ WITH Linux-syscall-note                       4
       LGPL-2.1 WITH Linux-syscall-note                        3
       ((GPL-2.0 WITH Linux-syscall-note) OR MIT)              3
       ((GPL-2.0 WITH Linux-syscall-note) AND MIT)             1
    
       and that resulted in the third patch in this series.
    
     - when the two scanners agreed on the detected license(s), that became
       the concluded license(s).
    
     - when there was disagreement between the two scanners (one detected a
       license but the other didn't, or they both detected different
       licenses) a manual inspection of the file occurred.
    
     - In most cases a manual inspection of the information in the file
       resulted in a clear resolution of the license that should apply (and
       which scanner probably needed to revisit its heuristics).
    
     - When it was not immediately clear, the license identifier was
       confirmed with lawyers working with the Linux Foundation.
    
     - If there was any question as to the appropriate license identifier,
       the file was flagged for further research and to be revisited later
       in time.
    
    In total, over 70 hours of logged manual review was done on the
    spreadsheet to determine the SPDX license identifiers to apply to the
    source files by Kate, Philippe, Thomas and, in some cases, confirmation
    by lawyers working with the Linux Foundation.
    
    Kate also obtained a third independent scan of the 4.13 code base from
    FOSSology, and compared selected files where the other two scanners
    disagreed against that SPDX file, to see if there was new insights.  The
    Windriver scanner is based on an older version of FOSSology in part, so
    they are related.
    
    Thomas did random spot checks in about 500 files from the spreadsheets
    for the uapi headers and agreed with SPDX license identifier in the
    files he inspected. For the non-uapi files Thomas did random spot checks
    in about 15000 files.
    
    In initial set of patches against 4.14-rc6, 3 files were found to have
    copy/paste license identifier errors, and have been fixed to reflect the
    correct identifier.
    
    Additionally Philippe spent 10 hours this week doing a detailed manual
    inspection and review of the 12,461 patched files from the initial patch
    version early this week with:
     - a full scancode scan run, collecting the matched texts, detected
       license ids and scores
     - reviewing anything where there was a license detected (about 500+
       files) to ensure that the applied SPDX license was correct
     - reviewing anything where there was no detection but the patch license
       was not GPL-2.0 WITH Linux-syscall-note to ensure that the applied
       SPDX license was correct
    
    This produced a worksheet with 20 files needing minor correction.  This
    worksheet was then exported into 3 different .csv files for the
    different types of files to be modified.
    
    These .csv files were then reviewed by Greg.  Thomas wrote a script to
    parse the csv files and add the proper SPDX tag to the file, in the
    format that the file expected.  This script was further refined by Greg
    based on the output to detect more types of files automatically and to
    distinguish between header and source .c files (which need different
    comment types.)  Finally Greg ran the script using the .csv files to
    generate the patches.
    
    Reviewed-by: Kate Stewart <kstewart@linuxfoundation.org>
    Reviewed-by: Philippe Ombredanne <pombredanne@nexb.com>
    Reviewed-by: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/include/linux/isa.h b/include/linux/isa.h
index f2d0258414cf..41336da0f4e7 100644
--- a/include/linux/isa.h
+++ b/include/linux/isa.h
@@ -1,3 +1,4 @@
+/* SPDX-License-Identifier: GPL-2.0 */
 /*
  * ISA bus.
  */

commit 5e25db870ec983be138b343a3d04c79a5c1f1703
Author: William Breathitt Gray <vilhelm.gray@gmail.com>
Date:   Mon May 9 09:39:50 2016 -0400

    isa: Dummy isa_register_driver should return error code
    
    The inline isa_register_driver stub simply allows compilation on systems
    with CONFIG_ISA disabled; the dummy isa_register_driver does not
    register an isa_driver at all. The inline isa_register_driver should
    return -ENODEV to indicate lack of support when attempting to register
    an isa_driver on such a system with CONFIG_ISA disabled.
    
    Cc: Matthew Wilcox <matthew@wil.cx>
    Reported-by: Sasha Levin <sasha.levin@oracle.com>
    Tested-by: Ye Xiaolong
    Signed-off-by: William Breathitt Gray <vilhelm.gray@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/include/linux/isa.h b/include/linux/isa.h
index 384ab9b7d79a..f2d0258414cf 100644
--- a/include/linux/isa.h
+++ b/include/linux/isa.h
@@ -6,6 +6,7 @@
 #define __LINUX_ISA_H
 
 #include <linux/device.h>
+#include <linux/errno.h>
 #include <linux/kernel.h>
 
 struct isa_driver {
@@ -28,7 +29,7 @@ void isa_unregister_driver(struct isa_driver *);
 #else
 static inline int isa_register_driver(struct isa_driver *d, unsigned int i)
 {
-	return 0;
+	return -ENODEV;
 }
 
 static inline void isa_unregister_driver(struct isa_driver *d)

commit 3a4955111ad46a022f05b51f91306d864f989625
Author: William Breathitt Gray <vilhelm.gray@gmail.com>
Date:   Fri May 27 18:08:27 2016 -0400

    isa: Allow ISA-style drivers on modern systems
    
    Several modern devices, such as PC/104 cards, are expected to run on
    modern systems via an ISA bus interface. Since ISA is a legacy interface
    for most modern architectures, ISA support should remain disabled in
    general. Support for ISA-style drivers should be enabled on a per driver
    basis.
    
    To allow ISA-style drivers on modern systems, this patch introduces the
    ISA_BUS_API and ISA_BUS Kconfig options. The ISA bus driver will now
    build conditionally on the ISA_BUS_API Kconfig option, which defaults to
    the legacy ISA Kconfig option. The ISA_BUS Kconfig option allows the
    ISA_BUS_API Kconfig option to be selected on architectures which do not
    enable ISA (e.g. X86_64).
    
    The ISA_BUS Kconfig option is currently only implemented for X86
    architectures. Other architectures may have their own ISA_BUS Kconfig
    options added as required.
    
    Reviewed-by: Guenter Roeck <linux@roeck-us.net>
    Signed-off-by: William Breathitt Gray <vilhelm.gray@gmail.com>
    Acked-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/include/linux/isa.h b/include/linux/isa.h
index 5ab85281230b..384ab9b7d79a 100644
--- a/include/linux/isa.h
+++ b/include/linux/isa.h
@@ -22,7 +22,7 @@ struct isa_driver {
 
 #define to_isa_driver(x) container_of((x), struct isa_driver, driver)
 
-#ifdef CONFIG_ISA
+#ifdef CONFIG_ISA_BUS_API
 int isa_register_driver(struct isa_driver *, unsigned int);
 void isa_unregister_driver(struct isa_driver *);
 #else

commit d9a9c6172d1cec51851e9015b6c4379635c31f1a
Author: William Breathitt Gray <vilhelm.gray@gmail.com>
Date:   Sun May 1 18:43:10 2016 -0400

    isa: Implement the max_num_isa_dev macro
    
    max_num_isa_dev is a macro to determine the maximum possible number of
    ISA devices which may be registered in the I/O port address space given
    the address extent of the ISA devices.
    
    The highest base address possible for an ISA device is 0x3FF; this
    results in 1024 possible base addresses. Dividing the number of possible
    base addresses by the address extent taken by each device results in the
    maximum number of devices on a system.
    
    Signed-off-by: William Breathitt Gray <vilhelm.gray@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/include/linux/isa.h b/include/linux/isa.h
index e394917d18c2..5ab85281230b 100644
--- a/include/linux/isa.h
+++ b/include/linux/isa.h
@@ -57,4 +57,15 @@ static void __exit __isa_driver##_exit(void) \
 } \
 module_exit(__isa_driver##_exit);
 
+/**
+ * max_num_isa_dev() - Maximum possible number registered of an ISA device
+ * @__ida_dev_ext: ISA device address extent
+ *
+ * The highest base address possible for an ISA device is 0x3FF; this results in
+ * 1024 possible base addresses. Dividing the number of possible base addresses
+ * by the address extent taken by each device results in the maximum number of
+ * devices on a system.
+ */
+#define max_num_isa_dev(__isa_dev_ext) (1024 / __isa_dev_ext)
+
 #endif /* __LINUX_ISA_H */

commit 339e6e31d2bfb40354cbfe672b357b88a88223f2
Author: William Breathitt Gray <vilhelm.gray@gmail.com>
Date:   Sun May 1 18:42:47 2016 -0400

    isa: Implement the module_isa_driver macro
    
    The module_isa_driver macro is a helper macro for ISA drivers which do
    not do anything special in module init/exit. This eliminates a lot of
    boilerplate code. Each module may only use this macro once, and calling
    it replaces module_init and module_exit.
    
    Signed-off-by: William Breathitt Gray <vilhelm.gray@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/include/linux/isa.h b/include/linux/isa.h
index b0270e3814c8..e394917d18c2 100644
--- a/include/linux/isa.h
+++ b/include/linux/isa.h
@@ -36,4 +36,25 @@ static inline void isa_unregister_driver(struct isa_driver *d)
 }
 #endif
 
+/**
+ * module_isa_driver() - Helper macro for registering a ISA driver
+ * @__isa_driver: isa_driver struct
+ * @__num_isa_dev: number of devices to register
+ *
+ * Helper macro for ISA drivers which do not do anything special in module
+ * init/exit. This eliminates a lot of boilerplate code. Each module may only
+ * use this macro once, and calling it replaces module_init and module_exit.
+ */
+#define module_isa_driver(__isa_driver, __num_isa_dev) \
+static int __init __isa_driver##_init(void) \
+{ \
+	return isa_register_driver(&(__isa_driver), __num_isa_dev); \
+} \
+module_init(__isa_driver##_init); \
+static void __exit __isa_driver##_exit(void) \
+{ \
+	isa_unregister_driver(&(__isa_driver)); \
+} \
+module_exit(__isa_driver##_exit);
+
 #endif /* __LINUX_ISA_H */

commit 8ac0fba2da41620f4931a1007c71b0d4723eb02a
Author: William Breathitt Gray <vilhelm.gray@gmail.com>
Date:   Sun May 1 17:50:29 2016 -0400

    isa: Decouple X86_32 dependency from the ISA Kconfig option
    
    The introduction of the ISA_BUS option blocks the compilation of ISA
    drivers on non-x86 platforms. The ISA_BUS configuration option should
    not be necessary if the X86_32 dependency can be decoupled from the ISA
    configuration option. This patch both removes the ISA_BUS configuration
    option entirely and removes the X86_32 dependency from the ISA
    configuration option.
    
    Acked-by: Ingo Molnar <mingo@kernel.org>
    Signed-off-by: William Breathitt Gray <vilhelm.gray@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/include/linux/isa.h b/include/linux/isa.h
index 2a02862775eb..b0270e3814c8 100644
--- a/include/linux/isa.h
+++ b/include/linux/isa.h
@@ -22,7 +22,7 @@ struct isa_driver {
 
 #define to_isa_driver(x) container_of((x), struct isa_driver, driver)
 
-#ifdef CONFIG_ISA_BUS
+#ifdef CONFIG_ISA
 int isa_register_driver(struct isa_driver *, unsigned int);
 void isa_unregister_driver(struct isa_driver *);
 #else

commit b3c1be1b789cca6d3e39c950dfed690f0511fe76
Author: William Breathitt Gray <vilhelm.gray@gmail.com>
Date:   Fri Jan 22 11:28:07 2016 -0500

    base: isa: Remove X86_32 dependency
    
    Many motherboards utilize a LPC to ISA bridge in order to decode
    ISA-style port-mapped I/O addresses. This is particularly true for
    embedded motherboards supporting the PC/104 bus (a bus specification
    derived from ISA).
    
    These motherboards are now commonly running 64-bit x86 processors. The
    X86_32 dependency should be removed from the ISA bus configuration
    option in order to support these newer motherboards.
    
    A new config option, CONFIG_ISA_BUS, is introduced to allow for the
    compilation of the ISA bus driver independent of the CONFIG_ISA option.
    Devices which communicate via ISA-compatible buses can now be supported
    independent of the dependencies of the CONFIG_ISA option.
    
    Signed-off-by: William Breathitt Gray <vilhelm.gray@gmail.com>
    Reviewed-by: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/include/linux/isa.h b/include/linux/isa.h
index b0270e3814c8..2a02862775eb 100644
--- a/include/linux/isa.h
+++ b/include/linux/isa.h
@@ -22,7 +22,7 @@ struct isa_driver {
 
 #define to_isa_driver(x) container_of((x), struct isa_driver, driver)
 
-#ifdef CONFIG_ISA
+#ifdef CONFIG_ISA_BUS
 int isa_register_driver(struct isa_driver *, unsigned int);
 void isa_unregister_driver(struct isa_driver *);
 #else

commit fa890d586cc127ce72597ba0a909bfecf784e10c
Author: Matthew Wilcox <matthew@wil.cx>
Date:   Sun Sep 16 17:01:26 2007 -0600

    Fix non-ISA link error in drivers/scsi/advansys.c
    
    When CONFIG_ISA is disabled, the isa_driver support will not be compiled
    in.  Define stubs so that we don't get link-time errors.
    
    Signed-off-by: Matthew Wilcox <matthew@wil.cx>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

diff --git a/include/linux/isa.h b/include/linux/isa.h
index 1b855335cb11..b0270e3814c8 100644
--- a/include/linux/isa.h
+++ b/include/linux/isa.h
@@ -22,7 +22,18 @@ struct isa_driver {
 
 #define to_isa_driver(x) container_of((x), struct isa_driver, driver)
 
+#ifdef CONFIG_ISA
 int isa_register_driver(struct isa_driver *, unsigned int);
 void isa_unregister_driver(struct isa_driver *);
+#else
+static inline int isa_register_driver(struct isa_driver *d, unsigned int i)
+{
+	return 0;
+}
+
+static inline void isa_unregister_driver(struct isa_driver *d)
+{
+}
+#endif
 
 #endif /* __LINUX_ISA_H */

commit a5117ba7da37deb09df5eb802dace229b3fb1e9f
Author: Rene Herman <rene.herman@keyaccess.nl>
Date:   Tue Jun 6 23:54:02 2006 +0200

    [PATCH] Driver model: add ISA bus
    
    During the recent "isa drivers using platform devices" discussion it was
    pointed out that (ALSA) ISA drivers ran into the problem of not having
    the option to fail driver load (device registration rather) upon not
    finding their hardware due to a probe() error not being passed up
    through the driver model. In the course of that, I suggested a seperate
    ISA bus might be best; Russell King agreed and suggested this bus could
    use the .match() method for the actual device discovery.
    
    The attached does this. For this old non (generically) discoverable ISA
    hardware only the driver itself can do discovery so as a difference with
    the platform_bus, this isa_bus also distributes match() up to the driver.
    
    As another difference: these devices only exist in the driver model due
    to the driver creating them because it might want to drive them, meaning
    that all device creation has been made internal as well.
    
    The usage model this provides is nice, and has been acked from the ALSA
    side by Takashi Iwai and Jaroslav Kysela. The ALSA driver module_init's
    now (for oldisa-only drivers) become:
    
    static int __init alsa_card_foo_init(void)
    {
            return isa_register_driver(&snd_foo_isa_driver, SNDRV_CARDS);
    }
    
    static void __exit alsa_card_foo_exit(void)
    {
            isa_unregister_driver(&snd_foo_isa_driver);
    }
    
    Quite like the other bus models therefore. This removes a lot of
    duplicated init code from the ALSA ISA drivers.
    
    The passed in isa_driver struct is the regular driver struct embedding a
    struct device_driver, the normal probe/remove/shutdown/suspend/resume
    callbacks, and as indicated that .match callback.
    
    The "SNDRV_CARDS" you see being passed in is a "unsigned int ndev"
    parameter, indicating how many devices to create and call our methods with.
    
    The platform_driver callbacks are called with a platform_device param;
    the isa_driver callbacks are being called with a "struct device *dev,
    unsigned int id" pair directly -- with the device creation completely
    internal to the bus it's much cleaner to not leak isa_dev's by passing
    them in at all. The id is the only thing we ever want other then the
    struct device * anyways, and it makes for nicer code in the callbacks as
    well.
    
    With this additional .match() callback ISA drivers have all options. If
    ALSA would want to keep the old non-load behaviour, it could stick all
    of the old .probe in .match, which would only keep them registered after
    everything was found to be present and accounted for. If it wanted the
    behaviour of always loading as it inadvertently did for a bit after the
    changeover to platform devices, it could just not provide a .match() and
    do everything in .probe() as before.
    
    If it, as Takashi Iwai already suggested earlier as a way of following
    the model from saner buses more closely, wants to load when a later bind
    could conceivably succeed, it could use .match() for the prerequisites
    (such as checking the user wants the card enabled and that port/irq/dma
    values have been passed in) and .probe() for everything else. This is
    the nicest model.
    
    To the code...
    
    This exports only two functions; isa_{,un}register_driver().
    
    isa_register_driver() register's the struct device_driver, and then
    loops over the passed in ndev creating devices and registering them.
    This causes the bus match method to be called for them, which is:
    
    int isa_bus_match(struct device *dev, struct device_driver *driver)
    {
              struct isa_driver *isa_driver = to_isa_driver(driver);
    
              if (dev->platform_data == isa_driver) {
                      if (!isa_driver->match ||
                              isa_driver->match(dev, to_isa_dev(dev)->id))
                              return 1;
                      dev->platform_data = NULL;
              }
              return 0;
    }
    
    The first thing this does is check if this device is in fact one of this
    driver's devices by seeing if the device's platform_data pointer is set
    to this driver. Platform devices compare strings, but we don't need to
    do that with everything being internal, so isa_register_driver() abuses
    dev->platform_data as a isa_driver pointer which we can then check here.
    I believe platform_data is available for this, but if rather not, moving
    the isa_driver pointer to the private struct isa_dev is ofcourse fine as
    well.
    
    Then, if the the driver did not provide a .match, it matches. If it did,
    the driver match() method is called to determine a match.
    
    If it did _not_ match, dev->platform_data is reset to indicate this to
    isa_register_driver which can then unregister the device again.
    
    If during all this, there's any error, or no devices matched at all
    everything is backed out again and the error, or -ENODEV, is returned.
    
    isa_unregister_driver() just unregisters the matched devices and the
    driver itself.
    
    More global points/questions...
    
    - I'm introducing include/linux/isa.h. It was available but is ofcourse
    a somewhat generic name. Moving more isa stuff over to it in time is
    ofcourse fine, so can I have it please? :)
    
    - I'm using device_initcall() and added the isa.o (dependent on
    CONFIG_ISA) after the base driver model things in the Makefile. Will
    this do, or I really need to stick it in drivers/base/init.c, inside
    #ifdef CONFIG_ISA? It's working fine.
    
    Lastly -- I also looked, a bit, into integrating with PnP. "Old ISA"
    could be another pnp_protocol, but this does not seem to be a good
    match, largely due to the same reason platform_devices weren't -- the
    devices do not have a life of their own outside the driver, meaning the
    pnp_protocol {get,set}_resources callbacks would need to callback into
    driver -- which again means you first need to _have_ that driver. Even
    if there's clean way around that, you only end up inventing fake but
    valid-form PnP IDs and generally catering to the PnP layer without any
    practical advantages over this very simple isa_bus. The thing I also
    suggested earlier about the user echoing values into /sys to set up the
    hardware from userspace first is... well, cute, but a horrible idea from
    a user standpoint.
    
    Comments ofcourse appreciated. Hope it's okay. As said, the usage model
    is nice at least.
    
    Signed-off-by: Rene Herman <rene.herman@keyaccess.nl>

diff --git a/include/linux/isa.h b/include/linux/isa.h
new file mode 100644
index 000000000000..1b855335cb11
--- /dev/null
+++ b/include/linux/isa.h
@@ -0,0 +1,28 @@
+/*
+ * ISA bus.
+ */
+
+#ifndef __LINUX_ISA_H
+#define __LINUX_ISA_H
+
+#include <linux/device.h>
+#include <linux/kernel.h>
+
+struct isa_driver {
+	int (*match)(struct device *, unsigned int);
+	int (*probe)(struct device *, unsigned int);
+	int (*remove)(struct device *, unsigned int);
+	void (*shutdown)(struct device *, unsigned int);
+	int (*suspend)(struct device *, unsigned int, pm_message_t);
+	int (*resume)(struct device *, unsigned int);
+
+	struct device_driver driver;
+	struct device *devices;
+};
+
+#define to_isa_driver(x) container_of((x), struct isa_driver, driver)
+
+int isa_register_driver(struct isa_driver *, unsigned int);
+void isa_unregister_driver(struct isa_driver *);
+
+#endif /* __LINUX_ISA_H */
