commit bedb404e91bb2908d9921fc736a518a9d89525fc
Author: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
Date:   Mon Feb 17 13:40:15 2020 +0200

    serial: 8250_port: Don't use power management for kernel console
    
    Doing any kind of power management for kernel console is really bad idea.
    
    First of all, it runs in poll and atomic mode. This fact attaches a limitation
    on the functions that might be called. For example, pm_runtime_get_sync() might
    sleep and thus can't be used. This call needs, for example, to bring the device
    to powered on state on the system, where the power on sequence may require
    on-atomic operations, such as Intel Cherrytrail with ACPI enumerated UARTs.
    That said, on ACPI enabled platforms it might even call firmware for a job.
    
    On the other hand pm_runtime_get() doesn't guarantee that device will become
    powered on fast enough.
    
    Besides that, imagine the case when console is about to print a kernel Oops and
    it's powered off. In such an emergency case calling the complex functions is
    not the best what we can do, taking into consideration that user wants to see
    at least something of the last kernel word before it passes away.
    
    Here we modify the 8250 console code to prevent runtime power management.
    
    Note, there is a behaviour change for OMAP boards. It will require to detach
    kernel console to become idle.
    
    Link: https://lists.openwall.net/linux-kernel/2018/09/29/65
    Suggested-by: Russell King <rmk+kernel@armlinux.org.uk>
    Signed-off-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    Link: https://lore.kernel.org/r/20200217114016.49856-6-andriy.shevchenko@linux.intel.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/include/linux/serial_8250.h b/include/linux/serial_8250.h
index 0901c2aa366c..6545f8cfc8fa 100644
--- a/include/linux/serial_8250.h
+++ b/include/linux/serial_8250.h
@@ -179,6 +179,7 @@ void serial8250_set_defaults(struct uart_8250_port *up);
 void serial8250_console_write(struct uart_8250_port *up, const char *s,
 			      unsigned int count);
 int serial8250_console_setup(struct uart_port *port, char *options, bool probe);
+int serial8250_console_exit(struct uart_port *port);
 
 extern void serial8250_set_isa_configurator(void (*v)
 					(int port, struct uart_port *up,

commit 058bc104f7ca5c83d81695ee96f03dbd93bae518
Author: Lukas Wunner <lukas@wunner.de>
Date:   Fri Feb 28 14:31:06 2020 +0100

    serial: 8250: Generalize rs485 software emulation
    
    Commit e490c9144cfa ("tty: Add software emulated RS485 support for 8250")
    introduced support to use RTS as an rs485 Transmit Enable signal.
    So far the only drivers taking advantage of it are 8250_omap.c and
    8250_of.c.
    
    We're about to make use of the feature in 8250_bcm2835aux.c as well.
    The bcm2835aux differs from omap chips by inverting the meaning of RTS
    in the MCR register.  Moreover, omap achieves half-duplex mode by
    disabling the RX interrupt and clearing the RX FIFO when TX stops.
    The bcm2835aux requires disabling the receiver instead.
    
    Support these behavioral differences by generalizing the rs485 emulation:
    Introduce ->rs485_start_tx() and ->rs485_stop_tx() callbacks in struct
    uart_8250_port, provide generic implementations containing the existing
    code and use them as callbacks in 8250_omap.c and 8250_of.c.
    
    start_tx_rs485() is idempotent in that it recognizes whether RTS is
    already asserted.  Achieve the same by introducing a tx_stopped flag in
    struct uart_8250_em485.  This may even perform a little better on arches
    where memory access is faster than mmio access.
    
    Signed-off-by: Lukas Wunner <lukas@wunner.de>
    Cc: Matwey V. Kornilov <matwey@sai.msu.ru>
    Link: https://lore.kernel.org/r/5ac0464ae4414708e723a1e0d52b0c1b2bd41b9b.1582895077.git.lukas@wunner.de
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/include/linux/serial_8250.h b/include/linux/serial_8250.h
index 6a8e8c48c882..0901c2aa366c 100644
--- a/include/linux/serial_8250.h
+++ b/include/linux/serial_8250.h
@@ -81,6 +81,7 @@ struct uart_8250_em485 {
 	struct hrtimer		stop_tx_timer;  /* "rs485 stop tx" timer */
 	struct hrtimer		*active_timer;  /* pointer to active timer */
 	struct uart_8250_port	*port;          /* for hrtimer callbacks */
+	unsigned int		tx_stopped:1;	/* tx is currently stopped */
 };
 
 /*
@@ -132,6 +133,8 @@ struct uart_8250_port {
 	void			(*dl_write)(struct uart_8250_port *, int);
 
 	struct uart_8250_em485 *em485;
+	void			(*rs485_start_tx)(struct uart_8250_port *);
+	void			(*rs485_stop_tx)(struct uart_8250_port *);
 
 	/* Serial port overrun backoff */
 	struct delayed_work overrun_backoff;

commit d68fefdd5b5f107403568c8a4650e858132bd83a
Author: Dmitry Safonov <dima@arista.com>
Date:   Fri Dec 13 00:06:04 2019 +0000

    tty/serial: Migrate 8250_fsl to use has_sysrq
    
    The SUPPORT_SYSRQ ifdeffery is not nice as:
    - May create misunderstanding about sizeof(struct uart_port) between
      different objects
    - Prevents moving functions from serial_core.h
    - Reduces readability (well, it's ifdeffery - it's hard to follow)
    
    In order to remove SUPPORT_SYSRQ, has_sysrq variable has been added.
    Initialise it in driver's probe and remove ifdeffery.
    
    In contrast to 8250/8250_of, legacy_serial on powerpc does fill
    (struct plat_serial8250_port). The reason is likely that it's done on
    device_initcall(), not on probe. So, 8250_core is not yet probed.
    
    Propagate value from platform_device on 8250 probe - in case powepc
    legacy driver it's initialized on initcall, in case 8250_of it will be
    initialized later on of_platform_serial_setup().
    
    Cc: Benjamin Herrenschmidt <benh@kernel.crashing.org>
    Cc: Paul Mackerras <paulus@samba.org>
    Cc: Michael Ellerman <mpe@ellerman.id.au>
    Cc: linuxppc-dev@lists.ozlabs.org
    Signed-off-by: Dmitry Safonov <dima@arista.com>
    Link: https://lore.kernel.org/r/20191213000657.931618-6-dima@arista.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/include/linux/serial_8250.h b/include/linux/serial_8250.h
index bb2bc99388ca..6a8e8c48c882 100644
--- a/include/linux/serial_8250.h
+++ b/include/linux/serial_8250.h
@@ -25,6 +25,7 @@ struct plat_serial8250_port {
 	unsigned char	regshift;	/* register shift */
 	unsigned char	iotype;		/* UPIO_* */
 	unsigned char	hub6;
+	unsigned char	has_sysrq;	/* supports magic SysRq */
 	upf_t		flags;		/* UPF_* flags */
 	unsigned int	type;		/* If UPF_FIXED_TYPE */
 	unsigned int	(*serial_in)(struct uart_port *, int);

commit 4a96895f74c9633b51427fd080ab70fa62b65bc4
Author: Yegor Yefremov <yegorslists@googlemail.com>
Date:   Thu Jun 20 08:24:20 2019 +0200

    tty/serial/8250: use mctrl_gpio helpers
    
    This patch permits the usage for GPIOs to control
    the CTS/RTS/DTR/DSR/DCD/RI signals.
    
    Changed by Stefan:
    Only call mctrl_gpio_init(), if the device has no ACPI companion device
    to not break existing ACPI based systems. Also only use the mctrl_gpio_
    functions when "gpios" is available.
    
    Use MSR / MCR <-> TIOCM wrapper functions.
    
    Signed-off-by: Yegor Yefremov <yegorslists@googlemail.com>
    Signed-off-by: Stefan Roese <sr@denx.de>
    Reviewed-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    Reviewed-by: Mika Westerberg <mika.westerberg@linux.intel.com>
    Tested-by: Yegor Yefremov <yegorslists@googlemail.com>
    Cc: Mika Westerberg <mika.westerberg@linux.intel.com>
    Cc: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    Cc: Giulio Benetti <giulio.benetti@micronovasrl.com>
    Cc: Yegor Yefremov <yegorslists@googlemail.com>
    Cc: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/include/linux/serial_8250.h b/include/linux/serial_8250.h
index 5e0b59422a68..bb2bc99388ca 100644
--- a/include/linux/serial_8250.h
+++ b/include/linux/serial_8250.h
@@ -110,6 +110,7 @@ struct uart_8250_port {
 						 *   if no_console_suspend
 						 */
 	unsigned char		probe;
+	struct mctrl_gpios	*gpios;
 #define UART_PROBE_RSA	(1 << 0)
 
 	/*

commit 2874c5fd284268364ece81a7bd936f3c8168e567
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Mon May 27 08:55:01 2019 +0200

    treewide: Replace GPLv2 boilerplate/reference with SPDX - rule 152
    
    Based on 1 normalized pattern(s):
    
      this program is free software you can redistribute it and or modify
      it under the terms of the gnu general public license as published by
      the free software foundation either version 2 of the license or at
      your option any later version
    
    extracted by the scancode license scanner the SPDX license identifier
    
      GPL-2.0-or-later
    
    has been chosen to replace the boilerplate/reference in 3029 file(s).
    
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Reviewed-by: Allison Randal <allison@lohutok.net>
    Cc: linux-spdx@vger.kernel.org
    Link: https://lkml.kernel.org/r/20190527070032.746973796@linutronix.de
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/include/linux/serial_8250.h b/include/linux/serial_8250.h
index 5a655ba8d273..5e0b59422a68 100644
--- a/include/linux/serial_8250.h
+++ b/include/linux/serial_8250.h
@@ -1,12 +1,8 @@
+/* SPDX-License-Identifier: GPL-2.0-or-later */
 /*
  *  linux/include/linux/serial_8250.h
  *
  *  Copyright (C) 2004 Russell King
- *
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation; either version 2 of the License, or
- * (at your option) any later version.
  */
 #ifndef _LINUX_SERIAL_8250_H
 #define _LINUX_SERIAL_8250_H

commit 6d7f677a2afa1c82d7fc7af7f9159cbffd5dc010
Author: Darwin Dingel <darwin.dingel@alliedtelesis.co.nz>
Date:   Mon Dec 10 11:29:09 2018 +1300

    serial: 8250: Rate limit serial port rx interrupts during input overruns
    
    When a serial port gets faulty or gets flooded with inputs, its interrupt
    handler starts to work double time to get the characters to the workqueue
    for the tty layer to handle them. When this busy time on the serial/tty
    subsystem happens during boot, where it is also busy on the userspace
    trying to initialise, some processes can continuously get preempted
    and will be on hold until the interrupts subside.
    
    The fix is to backoff on processing received characters for a specified
    amount of time when an input overrun is seen (received a new character
    before the previous one is processed). This only stops receive and will
    continue to transmit characters to serial port. After the backoff period
    is done, it receive will be re-enabled. This is optional and will only
    be enabled by setting 'overrun-throttle-ms' in the dts.
    
    Signed-off-by: Darwin Dingel <darwin.dingel@alliedtelesis.co.nz>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/include/linux/serial_8250.h b/include/linux/serial_8250.h
index 18e21427bce4..5a655ba8d273 100644
--- a/include/linux/serial_8250.h
+++ b/include/linux/serial_8250.h
@@ -134,6 +134,10 @@ struct uart_8250_port {
 	void			(*dl_write)(struct uart_8250_port *, int);
 
 	struct uart_8250_em485 *em485;
+
+	/* Serial port overrun backoff */
+	struct delayed_work overrun_backoff;
+	u32 overrun_backoff_time_ms;
 };
 
 static inline struct uart_8250_port *up_to_u8250p(struct uart_port *up)

commit 6226e5f31a786b58f33781852c897ac32a325ce6
Author: Jisheng Zhang <Jisheng.Zhang@synaptics.com>
Date:   Thu Jul 12 09:58:14 2018 +0800

    serial: 8250: export serial8250_do_set_divisor()
    
    Some drivers could call serial8250_do_set_divisor() to complete its
    own set_divisor routine. Export this symbol for code reusing.
    
    Signed-off-by: Jisheng Zhang <Jisheng.Zhang@synaptics.com>
    Reviewed-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/include/linux/serial_8250.h b/include/linux/serial_8250.h
index 76b9db71e489..18e21427bce4 100644
--- a/include/linux/serial_8250.h
+++ b/include/linux/serial_8250.h
@@ -160,6 +160,9 @@ extern void serial8250_do_shutdown(struct uart_port *port);
 extern void serial8250_do_pm(struct uart_port *port, unsigned int state,
 			     unsigned int oldstate);
 extern void serial8250_do_set_mctrl(struct uart_port *port, unsigned int mctrl);
+extern void serial8250_do_set_divisor(struct uart_port *port, unsigned int baud,
+				      unsigned int quot,
+				      unsigned int quot_frac);
 extern int fsl8250_handle_irq(struct uart_port *port);
 int serial8250_handle_irq(struct uart_port *port, unsigned int iir);
 unsigned char serial8250_rx_chars(struct uart_8250_port *up, unsigned char lsr);

commit ebbaf9ab9ebd69f42b286c7a67cc84571c3d947a
Author: Jeremy Kerr <jk@ozlabs.org>
Date:   Tue Mar 27 11:48:25 2018 +0800

    serial/8250: export serial8250_read_char
    
    Currently, we export serial8250_rx_chars, which does a whole bunch of
    reads from the 8250 data register, without any form of flow control
    between reads.
    
    An upcoming change to the aspeed vuart driver implements more
    fine-grained flow control in the interrupt handler, requiring
    character-at-a-time control over the rx path.
    
    This change exports serial8250_read_char to allow this.
    
    Signed-off-by: Jeremy Kerr <jk@ozlabs.org>
    Tested-by: Eddie James <eajames@linux.vnet.ibm.com>
    Tested-by: Joel Stanley <joel@jms.id.au>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/include/linux/serial_8250.h b/include/linux/serial_8250.h
index a27ef5f56431..76b9db71e489 100644
--- a/include/linux/serial_8250.h
+++ b/include/linux/serial_8250.h
@@ -163,6 +163,7 @@ extern void serial8250_do_set_mctrl(struct uart_port *port, unsigned int mctrl);
 extern int fsl8250_handle_irq(struct uart_port *port);
 int serial8250_handle_irq(struct uart_port *port, unsigned int iir);
 unsigned char serial8250_rx_chars(struct uart_8250_port *up, unsigned char lsr);
+void serial8250_read_char(struct uart_8250_port *up, unsigned char lsr);
 void serial8250_tx_chars(struct uart_8250_port *up);
 unsigned int serial8250_modem_status(struct uart_8250_port *up);
 void serial8250_init_port(struct uart_8250_port *up);

commit 6e0a5de2136b26bd0b3501f2f362abfffeb47d1e
Author: Rafael Gago <rafael.gago@gmail.com>
Date:   Mon Jul 31 10:46:43 2017 +0200

    serial: 8250: Use hrtimers for rs485 delays
    
    Previously the timers where based on the classic timers, giving a too
    coarse resolution on systems with configs of less than 1000 HZ.
    
    This patch changes the rs485 timers to hrtimers.
    
    Signed-off-by: Rafael Gago Castano <rgc@hms.se>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/include/linux/serial_8250.h b/include/linux/serial_8250.h
index 61fbb440449c..a27ef5f56431 100644
--- a/include/linux/serial_8250.h
+++ b/include/linux/serial_8250.h
@@ -80,9 +80,10 @@ struct uart_8250_ops {
 };
 
 struct uart_8250_em485 {
-	struct timer_list	start_tx_timer; /* "rs485 start tx" timer */
-	struct timer_list	stop_tx_timer;  /* "rs485 stop tx" timer */
-	struct timer_list	*active_timer;  /* pointer to active timer */
+	struct hrtimer		start_tx_timer; /* "rs485 start tx" timer */
+	struct hrtimer		stop_tx_timer;  /* "rs485 stop tx" timer */
+	struct hrtimer		*active_timer;  /* pointer to active timer */
+	struct uart_8250_port	*port;          /* for hrtimer callbacks */
 };
 
 /*

commit db405a8f8bf70daf57ed88808a2bf9c5fe308c70
Author: Ed Blake <ed.blake@imgtec.com>
Date:   Thu Nov 10 18:07:55 2016 +0000

    serial: 8250: Expose set_ldisc function
    
    Expose set_ldisc() function so that it can be overridden with a
    platform specific implementation.
    
    Signed-off-by: Ed Blake <ed.blake@imgtec.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/include/linux/serial_8250.h b/include/linux/serial_8250.h
index 04185e03d7be..61fbb440449c 100644
--- a/include/linux/serial_8250.h
+++ b/include/linux/serial_8250.h
@@ -36,6 +36,8 @@ struct plat_serial8250_port {
 	void		(*set_termios)(struct uart_port *,
 			               struct ktermios *new,
 			               struct ktermios *old);
+	void		(*set_ldisc)(struct uart_port *,
+				     struct ktermios *);
 	unsigned int	(*get_mctrl)(struct uart_port *);
 	int		(*handle_irq)(struct uart_port *);
 	void		(*pm)(struct uart_port *, unsigned int state,
@@ -149,6 +151,8 @@ extern int early_serial8250_setup(struct earlycon_device *device,
 					 const char *options);
 extern void serial8250_do_set_termios(struct uart_port *port,
 		struct ktermios *termios, struct ktermios *old);
+extern void serial8250_do_set_ldisc(struct uart_port *port,
+				    struct ktermios *termios);
 extern unsigned int serial8250_do_get_mctrl(struct uart_port *port);
 extern int serial8250_do_startup(struct uart_port *port);
 extern void serial8250_do_shutdown(struct uart_port *port);

commit 98838d95075a5295f3478ceba18bcccf472e30f4
Author: Ed Blake <ed.blake@imgtec.com>
Date:   Thu Nov 10 18:07:54 2016 +0000

    serial: 8250: Add IrDA to UART capabilities
    
    Add an IrDA UART capability flag and change the type of
    uart_8250_port.capabilities to be u32 rather than unsigned short to
    accommodate the additional flag.
    
    Signed-off-by: Ed Blake <ed.blake@imgtec.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/include/linux/serial_8250.h b/include/linux/serial_8250.h
index 48ec7651989b..04185e03d7be 100644
--- a/include/linux/serial_8250.h
+++ b/include/linux/serial_8250.h
@@ -94,7 +94,7 @@ struct uart_8250_port {
 	struct uart_port	port;
 	struct timer_list	timer;		/* "no irq" timer */
 	struct list_head	list;		/* ports on this IRQ */
-	unsigned short		capabilities;	/* port capabilities */
+	u32			capabilities;	/* port capabilities */
 	unsigned short		bugs;		/* port bugs */
 	bool			fifo_bug;	/* min RX trigger if enabled */
 	unsigned int		tx_loadsz;	/* transmit fifo load size */
@@ -168,6 +168,6 @@ int serial8250_console_setup(struct uart_port *port, char *options, bool probe);
 
 extern void serial8250_set_isa_configurator(void (*v)
 					(int port, struct uart_port *up,
-						unsigned short *capabilities));
+						u32 *capabilities));
 
 #endif

commit 5db4f7f80d165fc9725f356e99feec409e446baa
Author: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
Date:   Tue Aug 16 15:06:54 2016 +0300

    Revert "tty/serial/8250: use mctrl_gpio helpers"
    
    Serial console is broken in v4.8-rcX. Mika and I independently bisected down to
    commit 4ef03d328769 ("tty/serial/8250: use mctrl_gpio helpers").
    
    Since neither author nor anyone else didn't propose a solution we better revert
    it for now.
    
    This reverts commit 4ef03d328769eddbfeca1f1c958fdb181a69c341.
    
    Link: https://lkml.kernel.org/r/20160809130229.GN1729@lahna.fi.intel.com
    Signed-off-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    Tested-by: Heikki Krogerus <heikki.krogerus@linux.intel.com>
    Tested-by: Mika Westerberg <mika.westerberg@linux.intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/include/linux/serial_8250.h b/include/linux/serial_8250.h
index 923266cd294a..48ec7651989b 100644
--- a/include/linux/serial_8250.h
+++ b/include/linux/serial_8250.h
@@ -111,7 +111,6 @@ struct uart_8250_port {
 						 *   if no_console_suspend
 						 */
 	unsigned char		probe;
-	struct mctrl_gpios	*gpios;
 #define UART_PROBE_RSA	(1 << 0)
 
 	/*

commit 4ef03d328769eddbfeca1f1c958fdb181a69c341
Author: Yegor Yefremov <yegorslists@googlemail.com>
Date:   Tue May 31 10:59:18 2016 +0200

    tty/serial/8250: use mctrl_gpio helpers
    
    This patch permits the usage for GPIOs to control
    the CTS/RTS/DTR/DSR/DCD/RI signals.
    
    Signed-off-by: Yegor Yefremov <yegorslists@googlemail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/include/linux/serial_8250.h b/include/linux/serial_8250.h
index 48ec7651989b..923266cd294a 100644
--- a/include/linux/serial_8250.h
+++ b/include/linux/serial_8250.h
@@ -111,6 +111,7 @@ struct uart_8250_port {
 						 *   if no_console_suspend
 						 */
 	unsigned char		probe;
+	struct mctrl_gpios	*gpios;
 #define UART_PROBE_RSA	(1 << 0)
 
 	/*

commit 144ef5c2df9b473dad7eab375adcf5b11d0b1e47
Author: Wan Ahmad Zainie <wan.ahmad.zainie.wan.mohamad@intel.com>
Date:   Wed Apr 6 12:06:51 2016 +0800

    serial: 8250: export get_mctrl function
    
    Exposes get_mctrl() function so that it can be overriden with platform
    specific implementation.
    
    Signed-off-by: Wan Ahmad Zainie <wan.ahmad.zainie.wan.mohamad@intel.com>
    Reviewed-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    Reviewed-by: Heikki Krogerus <heikki.krogerus@linux.intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/include/linux/serial_8250.h b/include/linux/serial_8250.h
index 434879759725..48ec7651989b 100644
--- a/include/linux/serial_8250.h
+++ b/include/linux/serial_8250.h
@@ -36,6 +36,7 @@ struct plat_serial8250_port {
 	void		(*set_termios)(struct uart_port *,
 			               struct ktermios *new,
 			               struct ktermios *old);
+	unsigned int	(*get_mctrl)(struct uart_port *);
 	int		(*handle_irq)(struct uart_port *);
 	void		(*pm)(struct uart_port *, unsigned int state,
 			      unsigned old);
@@ -148,6 +149,7 @@ extern int early_serial8250_setup(struct earlycon_device *device,
 					 const char *options);
 extern void serial8250_do_set_termios(struct uart_port *port,
 		struct ktermios *termios, struct ktermios *old);
+extern unsigned int serial8250_do_get_mctrl(struct uart_port *port);
 extern int serial8250_do_startup(struct uart_port *port);
 extern void serial8250_do_shutdown(struct uart_port *port);
 extern void serial8250_do_pm(struct uart_port *port, unsigned int state,

commit e490c9144cfaa8e2242c1e5d5187230928f27417
Author: Matwey V. Kornilov <matwey@sai.msu.ru>
Date:   Mon Feb 1 21:09:21 2016 +0300

    tty: Add software emulated RS485 support for 8250
    
    Implementation of software emulation of RS485 direction handling is based
    on omap_serial driver.
    Before and after transmission RTS is set to the appropriate value.
    
    Note that before calling serial8250_em485_init() the caller has to
    ensure that UART will interrupt when shift register empty. Otherwise,
    emultaion cannot be used.
    
    Both serial8250_em485_init() and serial8250_em485_destroy() are
    idempotent functions.
    
    Signed-off-by: Matwey V. Kornilov <matwey@sai.msu.ru>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/include/linux/serial_8250.h b/include/linux/serial_8250.h
index faa0e0370ce7..434879759725 100644
--- a/include/linux/serial_8250.h
+++ b/include/linux/serial_8250.h
@@ -76,6 +76,12 @@ struct uart_8250_ops {
 	void		(*release_irq)(struct uart_8250_port *);
 };
 
+struct uart_8250_em485 {
+	struct timer_list	start_tx_timer; /* "rs485 start tx" timer */
+	struct timer_list	stop_tx_timer;  /* "rs485 stop tx" timer */
+	struct timer_list	*active_timer;  /* pointer to active timer */
+};
+
 /*
  * This should be used by drivers which want to register
  * their own 8250 ports without registering their own
@@ -122,6 +128,8 @@ struct uart_8250_port {
 	/* 8250 specific callbacks */
 	int			(*dl_read)(struct uart_8250_port *);
 	void			(*dl_write)(struct uart_8250_port *, int);
+
+	struct uart_8250_em485 *em485;
 };
 
 static inline struct uart_8250_port *up_to_u8250p(struct uart_port *up)

commit f3fb7ef3981abdca871d65e8c7d9a827225eb2ba
Author: Vineet Gupta <Vineet.Gupta1@synopsys.com>
Date:   Thu Jul 9 11:50:38 2015 +0530

    tty/early: make serial8250_early_{in,out} static again
    
    Commit ed71871bed719 ("tty/8250_early: Turn serial_in/serial_out into
    weak symbols") made these routines weak to allow platform specific
    Big endian override
    
    However recent updates to core, specifically ebc5e20082 ("serial:
    of_serial: Support big-endian register accesses") and 6e63be3fee14
    ("serial: earlycon: Add support for big-endian MMIO accesses") means
    that round about way to overide the early serial accessors is no longer
    needed.
    
    Cc: Jiri Slaby <jslaby@suse.cz>
    Cc: Peter Hurley <peter@hurleysoftware.com>
    Cc: Rob Herring <robh@kernel.org>
    Cc: Kevin Cernekee <cernekee@gmail.com>
    Acked-by: Noam Camus <noamc@ezchip.com>
    Signed-off-by: Vineet Gupta <vgupta@synopsys.com>
    Reviewed-by: Peter Hurley <peter@hurleysoftware.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/include/linux/serial_8250.h b/include/linux/serial_8250.h
index 7f156bde38d9..faa0e0370ce7 100644
--- a/include/linux/serial_8250.h
+++ b/include/linux/serial_8250.h
@@ -136,8 +136,6 @@ void serial8250_resume_port(int line);
 
 extern int early_serial_setup(struct uart_port *port);
 
-extern unsigned int serial8250_early_in(struct uart_port *port, int offset);
-extern void serial8250_early_out(struct uart_port *port, int offset, int value);
 extern int early_serial8250_setup(struct earlycon_device *device,
 					 const char *options);
 extern void serial8250_do_set_termios(struct uart_port *port,

commit b6830f6df8914faae9561bb245860c21af9b9e9b
Author: Peter Hurley <peter@hurleysoftware.com>
Date:   Sat Jun 27 09:19:00 2015 -0400

    serial: 8250: Split base port operations from universal driver
    
    Refactor base port operations into new file; 8250_port.c.
    
    Legacy irq handling, RSA port support, port storage for universal
    driver, driver definition, module parameters and linkage remain in
    8250_core.c
    
    The source file split and resulting modules is diagrammed below:
    
      8250_core.c ====>   8250_core.c __
                  \                     \
                   \                     +-- 8250.ko (alias 8250_core)
                    \     8250_pnp.c  __/     (universal driver)
                     \
                      =>  8250_port.c __
                                        \
                                         +-- 8250_base.ko
                          8250_dma.c  __/     (port operations)
    
    Signed-off-by: Peter Hurley <peter@hurleysoftware.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/include/linux/serial_8250.h b/include/linux/serial_8250.h
index ba82c07feb95..7f156bde38d9 100644
--- a/include/linux/serial_8250.h
+++ b/include/linux/serial_8250.h
@@ -152,6 +152,11 @@ int serial8250_handle_irq(struct uart_port *port, unsigned int iir);
 unsigned char serial8250_rx_chars(struct uart_8250_port *up, unsigned char lsr);
 void serial8250_tx_chars(struct uart_8250_port *up);
 unsigned int serial8250_modem_status(struct uart_8250_port *up);
+void serial8250_init_port(struct uart_8250_port *up);
+void serial8250_set_defaults(struct uart_8250_port *up);
+void serial8250_console_write(struct uart_8250_port *up, const char *s,
+			      unsigned int count);
+int serial8250_console_setup(struct uart_port *port, char *options, bool probe);
 
 extern void serial8250_set_isa_configurator(void (*v)
 					(int port, struct uart_port *up,

commit 34d2e4584ae594eff29d1595d47d7d044e57f834
Author: Masahiro Yamada <yamada.masahiro@socionext.com>
Date:   Tue May 26 13:28:48 2015 +0900

    serial: 8250: include <linux/serial_reg.h> from serial_8250.h
    
    The header file, include/linux/serial_8250.h, contains references to
    UART_LSR_BRK_ERROR_BITS and UART_MSR_ANY_DELTA that are defined in
    <linux/serial_reg.h>.
    
    Signed-off-by: Masahiro Yamada <yamada.masahiro@socionext.com>
    Reviewed-by: Peter Hurley <peter@hurleysoftware.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/include/linux/serial_8250.h b/include/linux/serial_8250.h
index f0c68d88b6f4..ba82c07feb95 100644
--- a/include/linux/serial_8250.h
+++ b/include/linux/serial_8250.h
@@ -12,6 +12,7 @@
 #define _LINUX_SERIAL_8250_H
 
 #include <linux/serial_core.h>
+#include <linux/serial_reg.h>
 #include <linux/platform_device.h>
 
 /*

commit 1c5841e832e2d7563c31de4946118e78baf573a3
Author: Eddie Huang <eddie.huang@mediatek.com>
Date:   Tue Apr 28 21:40:32 2015 +0800

    tty: serial: 8250: export early_serial8250_setup function
    
    8250-like uart driver may call early_serial8250_setup to
    reuse 8250_early.c character output function.
    
    Signed-off-by: Eddie Huang <eddie.huang@mediatek.com>
    Tested-by: Sascha Hauer <s.hauer@pengutronix.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/include/linux/serial_8250.h b/include/linux/serial_8250.h
index 78097e7a330a..f0c68d88b6f4 100644
--- a/include/linux/serial_8250.h
+++ b/include/linux/serial_8250.h
@@ -137,6 +137,8 @@ extern int early_serial_setup(struct uart_port *port);
 
 extern unsigned int serial8250_early_in(struct uart_port *port, int offset);
 extern void serial8250_early_out(struct uart_port *port, int offset, int value);
+extern int early_serial8250_setup(struct earlycon_device *device,
+					 const char *options);
 extern void serial8250_do_set_termios(struct uart_port *port,
 		struct ktermios *termios, struct ktermios *old);
 extern int serial8250_do_startup(struct uart_port *port);

commit 403753937020549e4bb0d8ef6e915f00a338a096
Author: Peter Hurley <peter@hurleysoftware.com>
Date:   Tue Feb 24 14:25:14 2015 -0500

    serial: 8250: Decouple RSA probe
    
    Prepare for 8250 split; separate RSA probe and resource management
    from base port operations. Override base port operations for the
    config_port(), request_port() and release_port() methods to
    implement the optional RSA probe and resource management only in
    the universal/legacy 8250 driver.
    
    Introduce 'probe' flags for 8250 ports, which allows drivers higher
    up the driver stack to enable optional probes.
    
    Signed-off-by: Peter Hurley <peter@hurleysoftware.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/include/linux/serial_8250.h b/include/linux/serial_8250.h
index 50735a9ad598..78097e7a330a 100644
--- a/include/linux/serial_8250.h
+++ b/include/linux/serial_8250.h
@@ -102,6 +102,8 @@ struct uart_8250_port {
 	unsigned char		canary;		/* non-zero during system sleep
 						 *   if no_console_suspend
 						 */
+	unsigned char		probe;
+#define UART_PROBE_RSA	(1 << 0)
 
 	/*
 	 * Some bits in registers are cleared on a read, so they must

commit a4416cd1ac7b48988f0f41a17769d65c71ffc504
Author: Peter Hurley <peter@hurleysoftware.com>
Date:   Tue Feb 24 14:25:07 2015 -0500

    serial: 8250: Separate legacy irq handling from core port operations
    
    Prepare for 8250 split; decouple irq setup/teardown and handler from
    core port operations.
    
    Introduce setup_irq() and release_irq() 8250 driver methods; the 8250
    core will use these methods to install and remove irq handling for
    the given 8250 port.
    
    Refactor irq chain linking/unlinking from 8250 core into
    univ8250_setup_irq()/univ8250_release_irq() for the universal 8250 driver.
    
    Signed-off-by: Peter Hurley <peter@hurleysoftware.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/include/linux/serial_8250.h b/include/linux/serial_8250.h
index ca9f87beac63..50735a9ad598 100644
--- a/include/linux/serial_8250.h
+++ b/include/linux/serial_8250.h
@@ -60,6 +60,20 @@ enum {
 };
 
 struct uart_8250_dma;
+struct uart_8250_port;
+
+/**
+ * 8250 core driver operations
+ *
+ * @setup_irq()		Setup irq handling. The universal 8250 driver links this
+ *			port to the irq chain. Other drivers may @request_irq().
+ * @release_irq()	Undo irq handling. The universal 8250 driver unlinks
+ *			the port from the irq chain.
+ */
+struct uart_8250_ops {
+	int		(*setup_irq)(struct uart_8250_port *);
+	void		(*release_irq)(struct uart_8250_port *);
+};
 
 /*
  * This should be used by drivers which want to register
@@ -100,6 +114,7 @@ struct uart_8250_port {
 	unsigned char		msr_saved_flags;
 
 	struct uart_8250_dma	*dma;
+	const struct uart_8250_ops *ops;
 
 	/* 8250 specific callbacks */
 	int			(*dl_read)(struct uart_8250_port *);

commit df519e7bd33cf56d8a5ce357dfb94248d427b688
Author: Peter Hurley <peter@hurleysoftware.com>
Date:   Mon Mar 9 16:27:22 2015 -0400

    serial: 8250_early: Remove setup_early_serial8250_console()
    
    setup_earlycon() will now match and register the desired earlycon
    from the param string (as if 'earlycon=...' had been set on the
    command line). Use setup_earlycon() from existing arch call sites
    which start an earlycon directly.
    
    Acked-by: Rob Herring <robh@kernel.org>
    Signed-off-by: Peter Hurley <peter@hurleysoftware.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/include/linux/serial_8250.h b/include/linux/serial_8250.h
index f26ae7fa30ae..ca9f87beac63 100644
--- a/include/linux/serial_8250.h
+++ b/include/linux/serial_8250.h
@@ -120,7 +120,6 @@ extern int early_serial_setup(struct uart_port *port);
 
 extern unsigned int serial8250_early_in(struct uart_port *port, int offset);
 extern void serial8250_early_out(struct uart_port *port, int offset, int value);
-extern int setup_early_serial8250_console(char *cmdline);
 extern void serial8250_do_set_termios(struct uart_port *port,
 		struct ktermios *termios, struct ktermios *old);
 extern int serial8250_do_startup(struct uart_port *port);

commit c7cef0a84912cab3c9df8949b034e4aa62982ec9
Author: Peter Hurley <peter@hurleysoftware.com>
Date:   Mon Mar 9 16:27:12 2015 -0400

    console: Add extensible console matching
    
    Add match() method to struct console which allows the console to
    perform console command line matching instead of (or in addition to)
    default console matching (ie., by fixed name and index).
    
    The match() method returns 0 to indicate a successful match; normal
    console matching occurs if no match() method is defined or the
    match() method returns non-zero. The match() method is expected to set
    the console index if required.
    
    Re-implement earlycon-to-console-handoff with direct matching of
    "console=uart|uart8250,..." to the 8250 ttyS console.
    
    Acked-by: Rob Herring <robh@kernel.org>
    Signed-off-by: Peter Hurley <peter@hurleysoftware.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/include/linux/serial_8250.h b/include/linux/serial_8250.h
index a8efa235b7c1..f26ae7fa30ae 100644
--- a/include/linux/serial_8250.h
+++ b/include/linux/serial_8250.h
@@ -118,8 +118,6 @@ void serial8250_resume_port(int line);
 
 extern int early_serial_setup(struct uart_port *port);
 
-extern int serial8250_find_port(struct uart_port *p);
-extern int serial8250_find_port_for_earlycon(void);
 extern unsigned int serial8250_early_in(struct uart_port *port, int offset);
 extern void serial8250_early_out(struct uart_port *port, int offset, int value);
 extern int setup_early_serial8250_console(char *cmdline);

commit 4516d50aabedbe5ae334155193e4d35c02390d9a
Author: Peter Hurley <peter@hurleysoftware.com>
Date:   Thu Jan 22 12:24:30 2015 -0500

    serial: 8250: Use canary to restart console after suspend
    
    When using no_console_suspend, the serial console may be powered off
    anyway during system sleep. Upon resume, the port may be in its default
    power-on state, but is expected to continue console i/o before the device
    has received its pm callback. The resultant garbage i/o can cause all
    kinds of havoc on the remote end.
    
    Use the scratch register as a canary to discover if the console
    has been powered-off. Write a non-zero value to the scratch register
    at port suspend and reprogram the port before any console i/o if the
    scratch register != canary before port resume.
    
    This workaround is disabled for omap_8250 (which uses different divisor
    programming).
    
    Credit to Doug Anderson <dianders@chromium.org> for the idea of using
    the scratch register canary to discover port power-down.
    
    Cc: Doug Anderson <dianders@chromium.org>
    Signed-off-by: Peter Hurley <peter@hurleysoftware.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/include/linux/serial_8250.h b/include/linux/serial_8250.h
index 245b959f1ff6..a8efa235b7c1 100644
--- a/include/linux/serial_8250.h
+++ b/include/linux/serial_8250.h
@@ -85,6 +85,9 @@ struct uart_8250_port {
 	unsigned char		mcr_force;	/* mask of forced bits */
 	unsigned char		cur_iotype;	/* Running I/O type */
 	unsigned int		rpm_tx_active;
+	unsigned char		canary;		/* non-zero during system sleep
+						 *   if no_console_suspend
+						 */
 
 	/*
 	 * Some bits in registers are cleared on a read, so they must

commit 4bf4ea9dca4ba1984abeb592f429265b9bacac42
Author: Peter Hurley <peter@hurleysoftware.com>
Date:   Tue Dec 30 20:28:15 2014 -0500

    serial: omap_8250: Fix RTS handling
    
    The OMAP3 UART ignores MCR[1] (ie., UART_MCR_RTS) when in autoRTS
    mode (UPF_HARD_FLOW + CRTSCTS). This makes it impossible for either
    the serial core or userspace to manually flow control the sender.
    
    Disable autoRTS mode when RTS is lowered and restore the previous
    mode when RTS is raised.
    
    Note that the OMAP3 UART provides no mechanism for switching from
    autoRTS mode without corrupting incoming data; to access the
    necessary register, the line control settings must be set to 8-e-2
    and thus any data received during that time will be interpreted with
    those settings. This corruption has been observed in practice.
    
    Cc: Sebastian Andrzej Siewior <bigeasy@linutronix.de>
    Signed-off-by: Peter Hurley <peter@hurleysoftware.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/include/linux/serial_8250.h b/include/linux/serial_8250.h
index e02acf0a0ec9..245b959f1ff6 100644
--- a/include/linux/serial_8250.h
+++ b/include/linux/serial_8250.h
@@ -126,6 +126,7 @@ extern int serial8250_do_startup(struct uart_port *port);
 extern void serial8250_do_shutdown(struct uart_port *port);
 extern void serial8250_do_pm(struct uart_port *port, unsigned int state,
 			     unsigned int oldstate);
+extern void serial8250_do_set_mctrl(struct uart_port *port, unsigned int mctrl);
 extern int fsl8250_handle_irq(struct uart_port *port);
 int serial8250_handle_irq(struct uart_port *port, unsigned int iir);
 unsigned char serial8250_rx_chars(struct uart_8250_port *up, unsigned char lsr);

commit 039ec1f010e6b058f497381d5a6bb840e160b4ac
Author: Ricardo Ribalda Delgado <ricardo.ribalda@gmail.com>
Date:   Thu Nov 6 09:22:53 2014 +0100

    serial/8250: Remove obsolete handling of rs485 ioctls
    
    There is no more users for this functions. All the 8250 drivers are
    using the rs485 handler on serial_core instead.
    
    Reviewed-by: Alan Cox <alan@linux.intel.com>
    Cc: Jiri Slaby <jslaby@suse.cz>
    Cc: Sebastian Andrzej Siewior <bigeasy@linutronix.de>
    Cc: Alan Cox <alan@linux.intel.com>
    Cc: Tony Lindgren <tony@atomide.com>
    Cc: Peter Hurley <peter@hurleysoftware.com>
    Cc: Yoshihiro YUNOMAE <yoshihiro.yunomae.ez@hitachi.com>
    Cc: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    Cc: Ingo Molnar <mingo@elte.hu>
    Signed-off-by: Ricardo Ribalda Delgado <ricardo.ribalda@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/include/linux/serial_8250.h b/include/linux/serial_8250.h
index 3df10d5f154b..e02acf0a0ec9 100644
--- a/include/linux/serial_8250.h
+++ b/include/linux/serial_8250.h
@@ -97,13 +97,10 @@ struct uart_8250_port {
 	unsigned char		msr_saved_flags;
 
 	struct uart_8250_dma	*dma;
-	struct serial_rs485     rs485;
 
 	/* 8250 specific callbacks */
 	int			(*dl_read)(struct uart_8250_port *);
 	void			(*dl_write)(struct uart_8250_port *, int);
-	int			(*rs485_config)(struct uart_8250_port *,
-						struct serial_rs485 *rs485);
 };
 
 static inline struct uart_8250_port *up_to_u8250p(struct uart_port *up)

commit baeb7ef34952f523a129e5d1369aa42ecbe7f8c9
Author: Sebastian Andrzej Siewior <bigeasy@linutronix.de>
Date:   Mon Sep 29 10:21:03 2014 +0200

    tty: serial: 8250: use 32bit variable for rpm_tx_active
    
    The kbuild test robot wrote me:
    |  make.cross ARCH=powerpc
    |>> ERROR: ".__xchg_called_with_bad_pointer" [drivers/tty/serial/8250/8250.ko] undefined!
    
    The generic implementation of xchg() on arm and x86 works for variables of
    size one bye (char). According to the report powerpc does not support
    xchg() for one byte sized variables and looking further it seems also to
    be the same case for sparc and tile (or for 10 out of 26 architectures
    which provide a custom implementation).
    For that reason I increase the size of the variable from one to four
    bytes to get it work on powerpc (and the others).
    
    Reported-By: kbuild test robot <fengguang.wu@intel.com>
    Signed-off-by: Sebastian Andrzej Siewior <bigeasy@linutronix.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/include/linux/serial_8250.h b/include/linux/serial_8250.h
index c267412a3ef4..3df10d5f154b 100644
--- a/include/linux/serial_8250.h
+++ b/include/linux/serial_8250.h
@@ -84,7 +84,7 @@ struct uart_8250_port {
 	unsigned char		mcr_mask;	/* mask of user bits */
 	unsigned char		mcr_force;	/* mask of forced bits */
 	unsigned char		cur_iotype;	/* Running I/O type */
-	unsigned char		rpm_tx_active;
+	unsigned int		rpm_tx_active;
 
 	/*
 	 * Some bits in registers are cleared on a read, so they must

commit d74d5d1b7288ff9d4439c8c7e0e314cde9743467
Author: Sebastian Andrzej Siewior <bigeasy@linutronix.de>
Date:   Wed Sep 10 21:29:57 2014 +0200

    tty: serial: 8250_core: add run time pm
    
    While comparing the OMAP-serial and the 8250 part of this I noticed that
    the latter does not use run time-pm. Here are the pieces. It is
    basically a get before first register access and a last_busy + put after
    last access. This has to be enabled from userland _and_ UART_CAP_RPM is
    required for this.
    The runtime PM can usually work transparently in the background however
    there is one exception to this: After serial8250_tx_chars() completes
    there still may be unsent bytes in the FIFO (depending on CPU speed vs
    baud rate + flow control). Even if the TTY-buffer is empty we do not
    want RPM to disable the device because it won't send the remaining
    bytes. Instead we leave serial8250_tx_chars() with RPM enabled and wait
    for the FIFO empty interrupt. Once we enter serial8250_tx_chars() with
    an empty buffer we know that the FIFO is empty and since we are not going
    to send anything, we can disable the device.
    That xchg() is to ensure that serial8250_tx_chars() can be called
    multiple times and only the first invocation will actually invoke the
    runtime PM function. So that the last invocation of __stop_tx() will
    disable runtime pm.
    
    NOTE: do not enable RPM on the device unless you know what you do! If
    the device goes idle, it won't be woken up by incomming RX data _unless_
    there is a wakeup irq configured which is usually the RX pin configure
    for wakeup via the reset module. The RX activity will then wake up the
    device from idle. However the first character is garbage and lost. The
    following bytes will be received once the device is up in time. On the
    beagle board xm (omap3) it takes approx 13ms from the first wakeup byte
    until the first byte that is received properly if the device was in
    core-off.
    
    v5…v8:
            - drop RPM from serial8250_set_mctrl() it will be used in
              restore path which already has RPM active and holds
              dev->power.lock
    v4…v5:
            - add a wrapper around rpm function and introduce UART_CAP_RPM
              to ensure RPM put is invoked after the TX FIFO is empty.
    v3…v4:
            - added runtime to the console code
            - removed device_may_wakeup() from serial8250_set_sleep()
    
    Cc: mika.westerberg@linux.intel.com
    Reviewed-by: Tony Lindgren <tony@atomide.com>
    Tested-by: Tony Lindgren <tony@atomide.com>
    Signed-off-by: Sebastian Andrzej Siewior <bigeasy@linutronix.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/include/linux/serial_8250.h b/include/linux/serial_8250.h
index 6fc9d7bee05e..c267412a3ef4 100644
--- a/include/linux/serial_8250.h
+++ b/include/linux/serial_8250.h
@@ -84,6 +84,7 @@ struct uart_8250_port {
 	unsigned char		mcr_mask;	/* mask of user bits */
 	unsigned char		mcr_force;	/* mask of forced bits */
 	unsigned char		cur_iotype;	/* Running I/O type */
+	unsigned char		rpm_tx_active;
 
 	/*
 	 * Some bits in registers are cleared on a read, so they must

commit b99b121b2aa42e60e5b73fdd3a49863337839c7b
Author: Sebastian Andrzej Siewior <bigeasy@linutronix.de>
Date:   Fri Sep 5 21:02:37 2014 +0200

    tty: serial: 8250_core: allow to overwrite & export serial8250_startup()
    
    The OMAP version of the 8250 can actually use 1:1 serial8250_startup().
    However it needs to be extended by a wake up irq which should to be
    requested & enabled at ->startup() time and disabled at ->shutdown() time.
    
    v2…v3: properly copy callbacks
    v1…v2: add shutdown callback
    
    Acked-by: Alan Cox <alan@linux.intel.com>
    Signed-off-by: Sebastian Andrzej Siewior <bigeasy@linutronix.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/include/linux/serial_8250.h b/include/linux/serial_8250.h
index 6dd671765312..6fc9d7bee05e 100644
--- a/include/linux/serial_8250.h
+++ b/include/linux/serial_8250.h
@@ -124,6 +124,8 @@ extern void serial8250_early_out(struct uart_port *port, int offset, int value);
 extern int setup_early_serial8250_console(char *cmdline);
 extern void serial8250_do_set_termios(struct uart_port *port,
 		struct ktermios *termios, struct ktermios *old);
+extern int serial8250_do_startup(struct uart_port *port);
+extern void serial8250_do_shutdown(struct uart_port *port);
 extern void serial8250_do_pm(struct uart_port *port, unsigned int state,
 			     unsigned int oldstate);
 extern int fsl8250_handle_irq(struct uart_port *port);

commit e676253b19b2d269cccf67fdb1592120a0cd0676
Author: Ricardo Ribalda Delgado <ricardo.ribalda@gmail.com>
Date:   Tue Aug 5 11:45:59 2014 +0200

    serial/8250: Add support for RS485 IOCTLs
    
    This patch allow the users of the 8250 infrastructure to define a
    handler for RS485 configration.
    
    If no handler is defined the 8250 driver will work as usual.
    
    Signed-off-by: Ricardo Ribalda Delgado <ricardo.ribalda@gmail.com>
    Acked-by: Alan Cox <alan@linux.intel.com>
    --
    v2:Change suggested by Alan "One Thousand Gnomes":
    - Move rs485 structure further down on the uart_8250_port structure
    
     drivers/tty/serial/8250/8250_core.c | 39 +++++++++++++++++++++++++++++++++++++
     include/linux/serial_8250.h         |  3 +++
     2 files changed, 42 insertions(+)
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/include/linux/serial_8250.h b/include/linux/serial_8250.h
index f93649e22c43..6dd671765312 100644
--- a/include/linux/serial_8250.h
+++ b/include/linux/serial_8250.h
@@ -96,10 +96,13 @@ struct uart_8250_port {
 	unsigned char		msr_saved_flags;
 
 	struct uart_8250_dma	*dma;
+	struct serial_rs485     rs485;
 
 	/* 8250 specific callbacks */
 	int			(*dl_read)(struct uart_8250_port *);
 	void			(*dl_write)(struct uart_8250_port *, int);
+	int			(*rs485_config)(struct uart_8250_port *,
+						struct serial_rs485 *rs485);
 };
 
 static inline struct uart_8250_port *up_to_u8250p(struct uart_port *up)

commit aef9a7bd9b676f797dd5cefd43deb30d36b976a9
Author: Yoshihiro YUNOMAE <yoshihiro.yunomae.ez@hitachi.com>
Date:   Wed Jul 16 01:19:36 2014 +0000

    serial/uart/8250: Add tunable RX interrupt trigger I/F of FIFO buffers
    
    Add tunable RX interrupt trigger I/F of FIFO buffers.
    
    Serial devices are used as not only message communication devices but control
    or sending communication devices. For the latter uses, normally small data
    will be exchanged, so user applications want to receive data unit as soon as
    possible for real-time tendency. If we have a sensor which sends a 1 byte data
    each time and must control a device based on the sensor feedback, the RX
    interrupt should be triggered for each data.
    
    According to HW specification of serial UART devices, RX interrupt trigger
    can be changed, but the trigger is hard-coded. For example, RX interrupt trigger
    in 16550A can be set to 1, 4, 8, or 14 bytes for HW, but current driver sets
    the trigger to only 8bytes.
    
    This patch makes some devices change RX interrupt trigger from userland.
    
    <How to use>
    - Read current setting
     # cat /sys/class/tty/ttyS0/rx_trig_bytes
     8
    
    - Write user setting
     # echo 1 > /sys/class/tty/ttyS0/rx_trig_bytes
     # cat /sys/class/tty/ttyS0/rx_trig_bytes
     1
    
    <Support uart devices>
    - 16550A and Tegra (1, 4, 8, or 14 bytes)
    - 16650V2 (8, 16, 24, or 28 bytes)
    - 16654 (8, 16, 56, or 60 bytes)
    - 16750 (1, 16, 32, or 56 bytes)
    
    <Change log>
    Changes in V9:
     - Use attr_group instead of dev_spec_attr_group of uart_port structure
    
    Changes in V8:
     - Divide this patch from V7's patch based on Greg's comment
    
    Changes in V7:
     - Add Documentation
     - Change I/F name from rx_int_trig to rx_trig_bytes because the name
       rx_int_trig is hard to understand how users specify the value
    
    Changes in V6:
     - Move FCR_RX_TRIG_* definition in 8250.h to include/uapi/linux/serial_reg.h,
       rename those to UART_FCR_R_TRIG_*, and use UART_FCR_TRIGGER_MASK to
       UART_FCR_R_TRIG_BITS()
     - Change following function names:
        convert_fcr2val() => fcr_get_rxtrig_bytes()
        convert_val2rxtrig() => bytes_to_fcr_rxtrig()
     - Fix typo in serial8250_do_set_termios()
     - Delete the verbose error message pr_info() in bytes_to_fcr_rxtrig()
     - Rename *rx_int_trig/rx_trig* to *rxtrig* for several functions or variables
       (but UI remains rx_int_trig)
     - Change the meaningless variable name 'val' to 'bytes' following functions:
        fcr_get_rxtrig_bytes(), bytes_to_fcr_rxtrig(), do_set_rxtrig(),
        do_serial8250_set_rxtrig(), and serial8250_set_attr_rxtrig()
     - Use up->fcr in order to get rxtrig_bytes instead of rx_trig_raw in
       fcr_get_rxtrig_bytes()
     - Use conf_type->rxtrig_bytes[0] instead of switch statement for support check
       in register_dev_spec_attr_grp()
     - Delete the checking whether a user changed FCR or not when minimum buffer
       is needed in serial8250_do_set_termios()
    
    Changes in V5.1:
     - Fix FCR_RX_TRIG_MAX_STATE definition
    
    Changes in V5:
     - Support Tegra, 16650V2, 16654, and 16750
     - Store default FCR value to up->fcr when the port is first created
     - Add rx_trig_byte[] in uart_config[] for each device and use rx_trig_byte[]
       in convert_fcr2val() and convert_val2rxtrig()
    
    Changes in V4:
     - Introduce fifo_bug flag in uart_8250_port structure
       This is enabled only when parity is enabled and UART_BUG_PARITY is enabled
       for up->bugs. If this flag is enabled, user cannot set RX trigger.
     - Return -EOPNOTSUPP when it does not support device at convert_fcr2val() and
       at convert_val2rxtrig()
     - Set the nearest lower RX trigger when users input a meaningless value at
       convert_val2rxtrig()
     - Check whether p->fcr is existing at serial8250_clear_and_reinit_fifos()
     - Set fcr = up->fcr in the begging of serial8250_do_set_termios()
    
    Changes in V3:
     - Change I/F from ioctl(2) to sysfs(rx_int_trig)
    
    Changed in V2:
     - Use _IOW for TIOCSFIFORTRIG definition
     - Pass the interrupt trigger value itself
    
    Signed-off-by: Yoshihiro YUNOMAE <yoshihiro.yunomae.ez@hitachi.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/include/linux/serial_8250.h b/include/linux/serial_8250.h
index 730ab4b3d686..f93649e22c43 100644
--- a/include/linux/serial_8250.h
+++ b/include/linux/serial_8250.h
@@ -74,8 +74,10 @@ struct uart_8250_port {
 	struct list_head	list;		/* ports on this IRQ */
 	unsigned short		capabilities;	/* port capabilities */
 	unsigned short		bugs;		/* port bugs */
+	bool			fifo_bug;	/* min RX trigger if enabled */
 	unsigned int		tx_loadsz;	/* transmit fifo load size */
 	unsigned char		acr;
+	unsigned char		fcr;
 	unsigned char		ier;
 	unsigned char		lcr;
 	unsigned char		mcr;

commit b1261c86fe238cc0da3f5dc837a38a0c39f3e7c4
Author: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
Date:   Mon Jul 14 14:26:14 2014 +0300

    serial: 8250: introduce up_to_u8250p() helper
    
    It helps to cast struct uart_port to struct uart_8250_port at runtime.
    
    Signed-off-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/include/linux/serial_8250.h b/include/linux/serial_8250.h
index af47a8af6024..730ab4b3d686 100644
--- a/include/linux/serial_8250.h
+++ b/include/linux/serial_8250.h
@@ -100,6 +100,11 @@ struct uart_8250_port {
 	void			(*dl_write)(struct uart_8250_port *, int);
 };
 
+static inline struct uart_8250_port *up_to_u8250p(struct uart_port *up)
+{
+	return container_of(up, struct uart_8250_port, port);
+}
+
 int serial8250_register_8250_port(struct uart_8250_port *);
 void serial8250_unregister_port(int line);
 void serial8250_suspend_port(int line);

commit 9ee4b83e51f741a645c43e61b9f3f8075ca0fdf4
Author: Heikki Krogerus <heikki.krogerus@linux.intel.com>
Date:   Thu Jan 10 11:25:11 2013 +0200

    serial: 8250: Add support for dmaengine
    
    Add support for dmaengine API. The drivers can implement the
    struct uart_8250_dma member in struct uart_8250_port and
    8250.c can take care of the rest.
    
    Signed-off-by: Heikki Krogerus <heikki.krogerus@linux.intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/include/linux/serial_8250.h b/include/linux/serial_8250.h
index c490d20b3fb8..af47a8af6024 100644
--- a/include/linux/serial_8250.h
+++ b/include/linux/serial_8250.h
@@ -59,6 +59,8 @@ enum {
 	PLAT8250_DEV_SM501,
 };
 
+struct uart_8250_dma;
+
 /*
  * This should be used by drivers which want to register
  * their own 8250 ports without registering their own
@@ -91,6 +93,8 @@ struct uart_8250_port {
 #define MSR_SAVE_FLAGS UART_MSR_ANY_DELTA
 	unsigned char		msr_saved_flags;
 
+	struct uart_8250_dma	*dma;
+
 	/* 8250 specific callbacks */
 	int			(*dl_read)(struct uart_8250_port *);
 	void			(*dl_write)(struct uart_8250_port *, int);

commit ed71871bed7198ca4aa6a79b7a93b73ad6408e98
Author: Noam Camus <noamc@ezchip.com>
Date:   Fri Nov 16 07:03:05 2012 +0200

    tty/8250_early: Turn serial_in/serial_out into weak symbols.
    
    Allows overriding default methods serial_in/serial_out.
    
    In such platform specific replacement it is possible to use
    other regshift, biased register offset, any other manipulation
    that is not covered with common default methods.
    
    Overriding default methods may be useful for platforms which got
    serial peripheral with registers represented in big endian.
    In this situation and assuming that 32 bit operations / alignment
    is required then it may be useful to swab words before/after
    accessing the serial registers.
    
    Signed-off-by: Noam Camus <noamc@ezchip.com>
    Acked-by: Alan Cox <alan@linux.intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/include/linux/serial_8250.h b/include/linux/serial_8250.h
index c174c90fb3fb..c490d20b3fb8 100644
--- a/include/linux/serial_8250.h
+++ b/include/linux/serial_8250.h
@@ -105,6 +105,8 @@ extern int early_serial_setup(struct uart_port *port);
 
 extern int serial8250_find_port(struct uart_port *p);
 extern int serial8250_find_port_for_earlycon(void);
+extern unsigned int serial8250_early_in(struct uart_port *port, int offset);
+extern void serial8250_early_out(struct uart_port *port, int offset, int value);
 extern int setup_early_serial8250_console(char *cmdline);
 extern void serial8250_do_set_termios(struct uart_port *port,
 		struct ktermios *termios, struct ktermios *old);

commit ce7240e445303de3ca66e6d08f17a2ec278a5bf6
Author: Alan Cox <alan@linux.intel.com>
Date:   Tue Jul 17 17:06:20 2012 +0100

    8250: three way resolve of the 8250 diffs
    
    This resolves the differences between the original 8250 patch, the revised 8250 patch
    and the independant clean up of the octeon driver (to use platform devices properly yay!)
    
    Signed-off-by: Alan Cox <alan@linux.intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/include/linux/serial_8250.h b/include/linux/serial_8250.h
index f41dcc949218..c174c90fb3fb 100644
--- a/include/linux/serial_8250.h
+++ b/include/linux/serial_8250.h
@@ -65,8 +65,36 @@ enum {
  * platform device.  Using these will make your driver
  * dependent on the 8250 driver.
  */
-struct uart_port;
-struct uart_8250_port;
+
+struct uart_8250_port {
+	struct uart_port	port;
+	struct timer_list	timer;		/* "no irq" timer */
+	struct list_head	list;		/* ports on this IRQ */
+	unsigned short		capabilities;	/* port capabilities */
+	unsigned short		bugs;		/* port bugs */
+	unsigned int		tx_loadsz;	/* transmit fifo load size */
+	unsigned char		acr;
+	unsigned char		ier;
+	unsigned char		lcr;
+	unsigned char		mcr;
+	unsigned char		mcr_mask;	/* mask of user bits */
+	unsigned char		mcr_force;	/* mask of forced bits */
+	unsigned char		cur_iotype;	/* Running I/O type */
+
+	/*
+	 * Some bits in registers are cleared on a read, so they must
+	 * be saved whenever the register is read but the bits will not
+	 * be immediately processed.
+	 */
+#define LSR_SAVE_FLAGS UART_LSR_BRK_ERROR_BITS
+	unsigned char		lsr_saved_flags;
+#define MSR_SAVE_FLAGS UART_MSR_ANY_DELTA
+	unsigned char		msr_saved_flags;
+
+	/* 8250 specific callbacks */
+	int			(*dl_read)(struct uart_8250_port *);
+	void			(*dl_write)(struct uart_8250_port *, int);
+};
 
 int serial8250_register_8250_port(struct uart_8250_port *);
 void serial8250_unregister_port(int line);

commit 2655a2c76f80d91da34faa8f4e114d1793435ed3
Author: Alan Cox <alan@linux.intel.com>
Date:   Thu Jul 12 12:59:50 2012 +0100

    8250: use the 8250 register interface not the legacy one
    
    The old interface just copies bits over and calls the newer one.
    In addition we can now pass more information.
    
    Signed-off-by: Alan Cox <alan@linux.intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/include/linux/serial_8250.h b/include/linux/serial_8250.h
index a416e92012ef..f41dcc949218 100644
--- a/include/linux/serial_8250.h
+++ b/include/linux/serial_8250.h
@@ -69,7 +69,6 @@ struct uart_port;
 struct uart_8250_port;
 
 int serial8250_register_8250_port(struct uart_8250_port *);
-int serial8250_register_port(struct uart_port *);
 void serial8250_unregister_port(int line);
 void serial8250_suspend_port(int line);
 void serial8250_resume_port(int line);

commit d5b4bb4d103cd601d8009f2d3a7e44586c9ae7cc
Merge: c80ddb526331 bb8187d35f82
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Wed May 23 17:12:06 2012 -0700

    Merge branch 'delete-mca' of git://git.kernel.org/pub/scm/linux/kernel/git/paulg/linux
    
    Pull the MCA deletion branch from Paul Gortmaker:
     "It was good that we could support MCA machines back in the day, but
      realistically, nobody is using them anymore.  They were mostly limited
      to 386-sx 16MHz CPU and some 486 class machines and never more than
      64MB of RAM.  Even the enthusiast hobbyist community seems to have
      dried up close to ten years ago, based on what you can find searching
      various websites dedicated to the relatively short lived hardware.
    
      So lets remove the support relating to CONFIG_MCA.  There is no point
      carrying this forward, wasting cycles doing routine maintenance on it;
      wasting allyesconfig build time on validating it, wasting I/O on git
      grep'ping over it, and so on."
    
    Let's see if anybody screams.  It generally has compiled, and James
    Bottomley pointed out that there was a MCA extension from NCR that
    allowed for up to 4GB of memory and PPro-class machines.  So in *theory*
    there may be users out there.
    
    But even James (technically listed as a maintainer) doesn't actually
    have a system, and while Alan Cox claims to have a machine in his cellar
    that he offered to anybody who wants to take it off his hands, he didn't
    argue for keeping MCA support either.
    
    So we could bring it back.  But somebody had better speak up and talk
    about how they have actually been using said MCA hardware with modern
    kernels for us to do that.  And David already took the patch to delete
    all the networking driver code (commit a5e371f61ad3: "drivers/net:
    delete all code/drivers depending on CONFIG_MCA").
    
    * 'delete-mca' of git://git.kernel.org/pub/scm/linux/kernel/git/paulg/linux:
      MCA: delete all remaining traces of microchannel bus support.
      scsi: delete the MCA specific drivers and driver code
      serial: delete the MCA specific 8250 support.
      arm: remove ability to select CONFIG_MCA

commit d157be852f6c76dc467f3a03b89263880e14c513
Author: Paul Gortmaker <paul.gortmaker@windriver.com>
Date:   Wed May 16 20:27:32 2012 -0400

    serial: delete the MCA specific 8250 support.
    
    The support for CONFIG_MCA is being removed, since the 20
    year old hardware simply isn't capable of meeting today's
    software demands on CPU and memory resources.
    
    This commit removes the MCA specific 8250 UART code.
    
    Cc: Alan Cox <alan@linux.intel.com>
    Cc: linux-serial@vger.kernel.org
    Acked-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>

diff --git a/include/linux/serial_8250.h b/include/linux/serial_8250.h
index 8f012f8ac8e9..6c5047dbfea3 100644
--- a/include/linux/serial_8250.h
+++ b/include/linux/serial_8250.h
@@ -54,7 +54,6 @@ enum {
 	PLAT8250_DEV_BOCA,
 	PLAT8250_DEV_EXAR_ST16C554,
 	PLAT8250_DEV_HUB6,
-	PLAT8250_DEV_MCA,
 	PLAT8250_DEV_AU1X00,
 	PLAT8250_DEV_SM501,
 };

commit f73fa05b90eb8c0dd3230c364cf1107f4f8f3848
Author: Magnus Damm <damm@opensource.se>
Date:   Wed May 2 21:47:27 2012 +0900

    serial8250: Introduce serial8250_register_8250_port()
    
    Introduce yet another 8250 registration function.
    This time it is serial8250_register_8250_port() and it
    allows us to register 8250 hardware instances using struct
    uart_8250_port. The new function makes it possible to
    register 8250 hardware that makes use of 8250 specific
    callbacks such as ->dl_read() and ->dl_write().
    
    Signed-off-by: Magnus Damm <damm@opensource.se>
    Acked-by: Arnd Bergmann <arnd@arndb.de>
    Acked-by: Alan Cox <alan@linux.intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/include/linux/serial_8250.h b/include/linux/serial_8250.h
index a522fd977aad..10dbce5205af 100644
--- a/include/linux/serial_8250.h
+++ b/include/linux/serial_8250.h
@@ -69,6 +69,7 @@ enum {
 struct uart_port;
 struct uart_8250_port;
 
+int serial8250_register_8250_port(struct uart_8250_port *);
 int serial8250_register_port(struct uart_port *);
 void serial8250_unregister_port(int line);
 void serial8250_suspend_port(int line);

commit bf03f65b7967df5807ddef7b99f8a41d4c94fc70
Author: Dan Williams <dan.j.williams@intel.com>
Date:   Tue Apr 10 14:10:53 2012 -0700

    tegra, serial8250: add ->handle_break() uart_port op
    
    The "KT" serial port has another use case for a "received break" quirk,
    so before adding another special case to the 8250 core take this
    opportunity to push such quirks out of the core and into a uart_port op.
    
    Stephen says:
    "If the callback function is to no longer live in 8250.c itself,
     arch/arm/mach-tegra/devices.c isn't logically a good place to put it,
     and that file will be going away once we get rid of all the board files
     and move solely to device tree."
    
    ...so since 8250_pci.c houses all the quirks for pci serial devices this
    quirk is similarly housed in of_serial.c.  Once the open firmware
    conversion completes the infrastructure details
    (include/linux/of_serial.h, and the export) can all be removed to make
    this self contained to of_serial.c.
    
    Cc: Nhan H Mai <nhan.h.mai@intel.com>
    Cc: Colin Cross <ccross@android.com>
    Cc: Olof Johansson <olof@lixom.net>
    [stephen: kill CONFIG_SERIAL_TEGRA in favor just using CONFIG_ARCH_TEGRA]
    Cc: Grant Likely <grant.likely@secretlab.ca>
    Acked-by: Arnd Bergmann <arnd@arndb.de>
    Acked-by: Sudhakar Mamillapalli <sudhakar@fb.com>
    Reported-by: Alan Cox <alan@lxorguk.ukuu.org.uk>
    Acked-by: Alan Cox <alan@linux.intel.com>
    Signed-off-by: Dan Williams <dan.j.williams@intel.com>
    Acked-by: Stephen Warren <swarren@wwwdotorg.org>
    Tested-by: Stephen Warren <swarren@wwwdotorg.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/include/linux/serial_8250.h b/include/linux/serial_8250.h
index 8f012f8ac8e9..a522fd977aad 100644
--- a/include/linux/serial_8250.h
+++ b/include/linux/serial_8250.h
@@ -38,6 +38,7 @@ struct plat_serial8250_port {
 	int		(*handle_irq)(struct uart_port *);
 	void		(*pm)(struct uart_port *, unsigned int state,
 			      unsigned old);
+	void		(*handle_break)(struct uart_port *);
 };
 
 /*

commit 9deaa53ac7fa373623123aa4f18828dd62292b1a
Author: Paul Gortmaker <paul.gortmaker@windriver.com>
Date:   Sun Dec 4 18:42:23 2011 -0500

    serial: add irq handler for Freescale 16550 errata.
    
    Sending a break on the SOC UARTs found in some MPC83xx/85xx/86xx
    chips seems to cause a short lived IRQ storm (/proc/interrupts
    typically shows somewhere between 300 and 1500 events).  Unfortunately
    this renders SysRQ over the serial console completely inoperable.
    
    The suggested workaround in the errata is to read the Rx register,
    wait one character period, and then read the Rx register again.
    We achieve this by tracking the old LSR value, and on the subsequent
    interrupt event after a break, we don't read LSR, instead we just
    read the RBR again and return immediately.
    
    The "fsl,ns16550" is used in the compatible field of the serial
    device to mark UARTs known to have this issue.
    
    Thanks to Scott Wood for providing the errata data which led to
    a much cleaner fix.
    
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>
    Acked-by: Alan Cox <alan@linux.intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>

diff --git a/include/linux/serial_8250.h b/include/linux/serial_8250.h
index b44034eca123..8f012f8ac8e9 100644
--- a/include/linux/serial_8250.h
+++ b/include/linux/serial_8250.h
@@ -82,6 +82,7 @@ extern void serial8250_do_set_termios(struct uart_port *port,
 		struct ktermios *termios, struct ktermios *old);
 extern void serial8250_do_pm(struct uart_port *port, unsigned int state,
 			     unsigned int oldstate);
+extern int fsl8250_handle_irq(struct uart_port *port);
 int serial8250_handle_irq(struct uart_port *port, unsigned int iir);
 unsigned char serial8250_rx_chars(struct uart_8250_port *up, unsigned char lsr);
 void serial8250_tx_chars(struct uart_8250_port *up);

commit 3986fb2ba67bb30cac18b0cff48c88d69ad37681
Author: Paul Gortmaker <paul.gortmaker@windriver.com>
Date:   Sun Dec 4 18:42:20 2011 -0500

    serial: export the key functions for an 8250 IRQ handler
    
    For drivers that need to construct their own IRQ handler, the
    three components are seen in the current handle_port -- i.e.
    Rx, Tx and modem_status.
    
    Make these exported symbols so that "almost" 8250 UARTs can
    construct their own IRQ handler with these shared components,
    while working around their own unique errata issues.
    
    The function names are given a serial8250 prefix, since they
    are now entering the global namespace.
    
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>
    Acked-by: Alan Cox <alan@linux.intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>

diff --git a/include/linux/serial_8250.h b/include/linux/serial_8250.h
index 1f05bbeac01e..b44034eca123 100644
--- a/include/linux/serial_8250.h
+++ b/include/linux/serial_8250.h
@@ -66,6 +66,7 @@ enum {
  * dependent on the 8250 driver.
  */
 struct uart_port;
+struct uart_8250_port;
 
 int serial8250_register_port(struct uart_port *);
 void serial8250_unregister_port(int line);
@@ -82,6 +83,9 @@ extern void serial8250_do_set_termios(struct uart_port *port,
 extern void serial8250_do_pm(struct uart_port *port, unsigned int state,
 			     unsigned int oldstate);
 int serial8250_handle_irq(struct uart_port *port, unsigned int iir);
+unsigned char serial8250_rx_chars(struct uart_8250_port *up, unsigned char lsr);
+void serial8250_tx_chars(struct uart_8250_port *up);
+unsigned int serial8250_modem_status(struct uart_8250_port *up);
 
 extern void serial8250_set_isa_configurator(void (*v)
 					(int port, struct uart_port *up,

commit 9a234349de01de3437784c0ef03d95353f055fae
Author: Greg Kroah-Hartman <gregkh@suse.de>
Date:   Wed Aug 24 15:25:49 2011 -0700

    Revert "tty: serial8250: add helpers for the DesignWare 8250"
    
    This reverts commit 6b1a98d1c4851235d9b6764b3f7b7db7909fc760.
    
    It causes a build error that needs to be resolved differently.
    
    Cc: Alan Cox <alan@linux.intel.com>
    Cc: Arnd Bergmann <arnd@arndb.de>
    Cc: Jamie Iles <jamie@jamieiles.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>

diff --git a/include/linux/serial_8250.h b/include/linux/serial_8250.h
index 09e2dbcd7ca3..1f05bbeac01e 100644
--- a/include/linux/serial_8250.h
+++ b/include/linux/serial_8250.h
@@ -86,13 +86,5 @@ int serial8250_handle_irq(struct uart_port *port, unsigned int iir);
 extern void serial8250_set_isa_configurator(void (*v)
 					(int port, struct uart_port *up,
 						unsigned short *capabilities));
-#ifndef SERIAL_8250_DW
-extern int serial8250_use_designware_io(struct uart_port *up);
-#else
-static inline int serial8250_use_designware_io(struct uart_port *up)
-{
-	return -EIO;
-}
-#endif
 
 #endif

commit 6b1a98d1c4851235d9b6764b3f7b7db7909fc760
Author: Jamie Iles <jamie@jamieiles.com>
Date:   Tue Aug 16 17:47:46 2011 +0100

    tty: serial8250: add helpers for the DesignWare 8250
    
    The Synopsys DesignWare 8250 is an 8250 that has an extra interrupt that
    gets raised when writing to the LCR when busy.  To handle this we need
    special serial_out, serial_in and handle_irq methods.  Add a new
    function serial8250_use_designware_io() that configures a uart_port with
    these accessors.
    
    Cc: Alan Cox <alan@linux.intel.com>
    Acked-by: Arnd Bergmann <arnd@arndb.de>
    Signed-off-by: Jamie Iles <jamie@jamieiles.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>

diff --git a/include/linux/serial_8250.h b/include/linux/serial_8250.h
index 1f05bbeac01e..09e2dbcd7ca3 100644
--- a/include/linux/serial_8250.h
+++ b/include/linux/serial_8250.h
@@ -86,5 +86,13 @@ int serial8250_handle_irq(struct uart_port *port, unsigned int iir);
 extern void serial8250_set_isa_configurator(void (*v)
 					(int port, struct uart_port *up,
 						unsigned short *capabilities));
+#ifndef SERIAL_8250_DW
+extern int serial8250_use_designware_io(struct uart_port *up);
+#else
+static inline int serial8250_use_designware_io(struct uart_port *up)
+{
+	return -EIO;
+}
+#endif
 
 #endif

commit 583d28e92f667eb6cc81ea87daaa7e321c23fe14
Author: Jamie Iles <jamie@jamieiles.com>
Date:   Mon Aug 15 10:17:52 2011 +0100

    tty: serial8250: allow platforms to override irq handler
    
    Some ports (e.g. Synopsys DesignWare 8250) have special requirements for
    handling the interrupts.  Allow these platforms to specify their own
    interrupt handler that will override the default.
    serial8250_handle_irq() is provided so that platforms can extend the IRQ
    handler rather than completely replacing it.
    
    Signed-off-by: Jamie Iles <jamie@jamieiles.com>
    Acked-by: Alan Cox <alan@linux.intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>

diff --git a/include/linux/serial_8250.h b/include/linux/serial_8250.h
index 97f5b45bbc07..1f05bbeac01e 100644
--- a/include/linux/serial_8250.h
+++ b/include/linux/serial_8250.h
@@ -35,6 +35,7 @@ struct plat_serial8250_port {
 	void		(*set_termios)(struct uart_port *,
 			               struct ktermios *new,
 			               struct ktermios *old);
+	int		(*handle_irq)(struct uart_port *);
 	void		(*pm)(struct uart_port *, unsigned int state,
 			      unsigned old);
 };
@@ -80,6 +81,7 @@ extern void serial8250_do_set_termios(struct uart_port *port,
 		struct ktermios *termios, struct ktermios *old);
 extern void serial8250_do_pm(struct uart_port *port, unsigned int state,
 			     unsigned int oldstate);
+int serial8250_handle_irq(struct uart_port *port, unsigned int iir);
 
 extern void serial8250_set_isa_configurator(void (*v)
 					(int port, struct uart_port *up,

commit af7f3743567e3d5b40e2f9c21541b7f40b99c103
Author: Alan Cox <alan@linux.intel.com>
Date:   Mon Oct 18 11:38:02 2010 -0700

    serial: abstraction for 8250 legacy ports
    
    Not every platform that has generic legacy 8250 ports manages to have them
    clocked the right way or without errata. Provide a generic interface to
    allow platforms to override the default behaviour in a manner that dumps
    the complexity in *their* code not the 8250 driver.
    
    Signed-off-by: Alan Cox <alan@linux.intel.com>
    Signed-off-by: Dirk Brandewie <dirk.brandewie@gmail.com>
    Acked-by: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>

diff --git a/include/linux/serial_8250.h b/include/linux/serial_8250.h
index bf9c2bdb2e05..97f5b45bbc07 100644
--- a/include/linux/serial_8250.h
+++ b/include/linux/serial_8250.h
@@ -81,4 +81,8 @@ extern void serial8250_do_set_termios(struct uart_port *port,
 extern void serial8250_do_pm(struct uart_port *port, unsigned int state,
 			     unsigned int oldstate);
 
+extern void serial8250_set_isa_configurator(void (*v)
+					(int port, struct uart_port *up,
+						unsigned short *capabilities));
+
 #endif

commit c161afe9759ddcc174d08e7c4f683d08ac9ba86f
Author: Manuel Lauss <manuel.lauss@googlemail.com>
Date:   Sat Sep 25 15:13:45 2010 +0200

    8250: allow platforms to override PM hook.
    
    Add a hook for platforms to specify custom pm methods.
    
    Signed-off-by: Manuel Lauss <manuel.lauss@googlemail.com>
    Cc: Alan Cox <alan@lxorguk.ukuu.org.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>

diff --git a/include/linux/serial_8250.h b/include/linux/serial_8250.h
index 7638deaaba65..bf9c2bdb2e05 100644
--- a/include/linux/serial_8250.h
+++ b/include/linux/serial_8250.h
@@ -35,6 +35,8 @@ struct plat_serial8250_port {
 	void		(*set_termios)(struct uart_port *,
 			               struct ktermios *new,
 			               struct ktermios *old);
+	void		(*pm)(struct uart_port *, unsigned int state,
+			      unsigned old);
 };
 
 /*
@@ -76,5 +78,7 @@ extern int serial8250_find_port_for_earlycon(void);
 extern int setup_early_serial8250_console(char *cmdline);
 extern void serial8250_do_set_termios(struct uart_port *port,
 		struct ktermios *termios, struct ktermios *old);
+extern void serial8250_do_pm(struct uart_port *port, unsigned int state,
+			     unsigned int oldstate);
 
 #endif

commit 235dae5d094c415fcf0fc79fa637f1901bc8afe2
Author: Philippe Langlais <philippe.langlais@stericsson.com>
Date:   Thu Jul 29 17:13:57 2010 +0200

    U6715 16550A serial driver support
    
    UART Features extract from STEricsson U6715 data-sheet (arm926 SoC for mobile phone):
    * Fully compatible with industry standard 16C550 and 16C450 from various
    manufacturers
    * RX and TX 64 byte FIFO reduces CPU interrupts
    * Full double buffering
    * Modem control signals include CTS, RTS, (and DSR, DTR on UART1 only)
    * Automatic baud rate selection
    * Manual or automatic RTS/CTS smart hardware flow control
    * Programmable serial characteristics:
    – Baud rate generation (50 to 3.25M baud)
    – 5, 6, 7 or 8-bit characters
    – Even, odd or no-parity bit generation and detection
    – 1, 1.5 or 2 stop bit generation
    * Independent control of transmit, receive, line status, data set interrupts and FIFOs
    * Full status-reporting capabilities
    * Separate DMA signaling for RX and TX
    * Timed interrupt to spread receive interrupt on known duration
    * DMA time-out interrupt to allow detection of end of reception
    * Carkit pulse coding and decoding compliant with USB carkit control interface [40]
    
    In 16550A auto-configuration, if the fifo size is 64 then it's an U6 16550A port
    Add set_termios hook & export serial8250_do_set_termios to change uart
    clock following baudrate
    
    Signed-off-by: Philippe Langlais <philippe.langlais@stericsson.com>
    Acked-by: Alan Cox <alan@linux.intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>

diff --git a/include/linux/serial_8250.h b/include/linux/serial_8250.h
index fb46aba11fb5..7638deaaba65 100644
--- a/include/linux/serial_8250.h
+++ b/include/linux/serial_8250.h
@@ -32,6 +32,9 @@ struct plat_serial8250_port {
 	unsigned int	type;		/* If UPF_FIXED_TYPE */
 	unsigned int	(*serial_in)(struct uart_port *, int);
 	void		(*serial_out)(struct uart_port *, int, int);
+	void		(*set_termios)(struct uart_port *,
+			               struct ktermios *new,
+			               struct ktermios *old);
 };
 
 /*
@@ -71,5 +74,7 @@ extern int early_serial_setup(struct uart_port *port);
 extern int serial8250_find_port(struct uart_port *p);
 extern int serial8250_find_port_for_earlycon(void);
 extern int setup_early_serial8250_console(char *cmdline);
+extern void serial8250_do_set_termios(struct uart_port *port,
+		struct ktermios *termios, struct ktermios *old);
 
 #endif

commit 1c2f04937b3e397a5695953c6b82aa4c77d21eb8
Author: Vikram Pandita <vikram.pandita@ti.com>
Date:   Sat Sep 19 13:13:19 2009 -0700

    serial: 8250: add IRQ trigger support
    
    There is currently no provision for passing IRQ trigger flags for
    serial IRQs with triggering requirements (such as GPIO IRQs)
    
    This patch adds irqflags to plat_serial8250_port that can be passed
    from board file to reqest_irq() of 8250 driver
    
    Changes are backward compatible with boards passing UPF_SHARE_IRQ flag
    
    Tested on Zoom2 board that has IRQF_TRIGGER_RISING requirement for 8250 irq
    
    [Moved new flag to end to fix bugs in the original with the old_serial array
            -- Alan]
    
    Signed-off-by: Vikram Pandita <vikram.pandita@ti.com>
    Signed-off-by: Alan Cox <alan@linux.intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>

diff --git a/include/linux/serial_8250.h b/include/linux/serial_8250.h
index d4d2a78ad43e..fb46aba11fb5 100644
--- a/include/linux/serial_8250.h
+++ b/include/linux/serial_8250.h
@@ -22,6 +22,7 @@ struct plat_serial8250_port {
 	void __iomem	*membase;	/* ioremap cookie or NULL */
 	resource_size_t	mapbase;	/* resource base */
 	unsigned int	irq;		/* interrupt number */
+	unsigned long	irqflags;	/* request_irq flags */
 	unsigned int	uartclk;	/* UART clock rate */
 	void            *private_data;
 	unsigned char	regshift;	/* register shift */

commit 8e23fcc89c8091790903927449f8efb9b4e23960
Author: David Daney <ddaney@caviumnetworks.com>
Date:   Fri Jan 2 13:49:54 2009 +0000

    Serial: Allow port type to be specified when calling serial8250_register_port.
    
    Add flag value UPF_FIXED_TYPE which specifies that the UART type is
    known and should not be probed.  For this case the UARTs properties
    are just copied out of the uart_config entry.
    
    This allows us to keep SOC specific 8250 probe code out of 8250.c.  In
    this case we know the serial hardware will not be changing as it is on
    the same silicon as the CPU, and we can specify it with certainty in
    the board/cpu setup code.
    
    The alternative is to load up 8250.c with a bunch of OCTEON specific
    special cases in the probing code.
    
    Signed-off-by: David Daney <ddaney@caviumnetworks.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Alan Cox <alan@redhat.com>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

diff --git a/include/linux/serial_8250.h b/include/linux/serial_8250.h
index 77d83d929f2c..d4d2a78ad43e 100644
--- a/include/linux/serial_8250.h
+++ b/include/linux/serial_8250.h
@@ -28,6 +28,7 @@ struct plat_serial8250_port {
 	unsigned char	iotype;		/* UPIO_* */
 	unsigned char	hub6;
 	upf_t		flags;		/* UPF_* flags */
+	unsigned int	type;		/* If UPF_FIXED_TYPE */
 	unsigned int	(*serial_in)(struct uart_port *, int);
 	void		(*serial_out)(struct uart_port *, int, int);
 };

commit 7d6a07d123b62bf4fa71867420c23da3ca36c995
Author: David Daney <ddaney@caviumnetworks.com>
Date:   Fri Jan 2 13:49:47 2009 +0000

    8250: Serial driver changes to support future Cavium OCTEON serial patches.
    
    In order to use Cavium OCTEON specific serial i/o drivers, we first
    patch the 8250 driver to use replaceable I/O functions.  Compatible
    I/O functions are added for existing iotypeS.
    
    An added benefit of this change is that it makes it easy to factor
    some of the existing special cases out to board/SOC specific support
    code.
    
    The alternative is to load up 8250.c with a bunch of OCTEON specific
    iotype code and bug work-arounds.
    
    Signed-off-by: David Daney <ddaney@caviumnetworks.com>
    Signed-off-by: Tomaso Paoletti <tpaoletti@caviumnetworks.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Alan Cox <alan@redhat.com>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

diff --git a/include/linux/serial_8250.h b/include/linux/serial_8250.h
index 3d37c94abbc8..77d83d929f2c 100644
--- a/include/linux/serial_8250.h
+++ b/include/linux/serial_8250.h
@@ -28,6 +28,8 @@ struct plat_serial8250_port {
 	unsigned char	iotype;		/* UPIO_* */
 	unsigned char	hub6;
 	upf_t		flags;		/* UPF_* flags */
+	unsigned int	(*serial_in)(struct uart_port *, int);
+	void		(*serial_out)(struct uart_port *, int, int);
 };
 
 /*

commit 61711f8fd8180e458cfb6846bcf4fc636a95f3db
Author: Magnus Damm <magnus.damm@gmail.com>
Date:   Mon Apr 28 02:14:22 2008 -0700

    sm501: add uart support
    
    This patch extends the sm501 mfd with 8250 uart support. We're currently
    doing this in the board specific r2d-1 code already, but it would be nice to
    do move things into the mfd since it's more chip specific than board specific.
    
    Signed-off-by: Magnus Damm <damm@igel.co.jp>
    Cc: Ben Dooks <ben-linux@fluff.org>
    Cc: Paul Mundt <lethal@linux-sh.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

diff --git a/include/linux/serial_8250.h b/include/linux/serial_8250.h
index 00b65c0a82ca..3d37c94abbc8 100644
--- a/include/linux/serial_8250.h
+++ b/include/linux/serial_8250.h
@@ -46,6 +46,7 @@ enum {
 	PLAT8250_DEV_HUB6,
 	PLAT8250_DEV_MCA,
 	PLAT8250_DEV_AU1X00,
+	PLAT8250_DEV_SM501,
 };
 
 /*

commit 74a197417240120d638d67d74f48655fb7f46f16
Author: Will Newton <will.newton@gmail.com>
Date:   Mon Feb 4 22:27:50 2008 -0800

    8250.c: support specifying DW APB UARTs in device platform_data
    
    Allow the private_data field to be specified in platform_data for the
    standard 8250/16550 UART.  This field is used by DW APB type UARTs and
    without this patch it's only possible to set this field when registering
    the port by hand.  If private_data is not set then the driver will
    potentially oops with a NULL pointer dereference.
    
    Signed-off-by: Will Newton <will.newton@gmail.com>
    Acked-by: Alan Cox <alan@lxorguk.ukuu.org.uk>
    Cc: Russell King <rmk@arm.linux.org.uk>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

diff --git a/include/linux/serial_8250.h b/include/linux/serial_8250.h
index afe0f6d9b9bc..00b65c0a82ca 100644
--- a/include/linux/serial_8250.h
+++ b/include/linux/serial_8250.h
@@ -23,6 +23,7 @@ struct plat_serial8250_port {
 	resource_size_t	mapbase;	/* resource base */
 	unsigned int	irq;		/* interrupt number */
 	unsigned int	uartclk;	/* UART clock rate */
+	void            *private_data;
 	unsigned char	regshift;	/* register shift */
 	unsigned char	iotype;		/* UPIO_* */
 	unsigned char	hub6;

commit 4f640efb3170dbcf99a37a3cc99060647b95428c
Author: Josh Boyer <jwboyer@linux.vnet.ibm.com>
Date:   Mon Jul 23 18:43:44 2007 -0700

    Use resource_size_t for serial port IO addresses
    
    At present, various parts of the serial code use unsigned long to define
    resource addresses.  This is a problem, because some 32-bit platforms have
    physical addresses larger than 32-bits, and have mmio serial uarts located
    above the 4GB point.
    
    This patch changes the type of mapbase in both struct uart_port and struct
    plat_serial8250_port to resource_size_t, which can be configured to be 64
    bits on such platforms.  The mapbase in serial_struct can't safely be
    changed, because that structure is user visible.
    
    Signed-off-by: David Gibson <dwg@au1.ibm.com>
    Signed-off-by: Josh Boyer <jwboyer@linux.vnet.ibm.com>
    Cc: Russell King <rmk@arm.linux.org.uk>
    Cc: Paul Mackerras <paulus@samba.org>
    Cc: Jason Wessel <jason.wessel@windriver.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

diff --git a/include/linux/serial_8250.h b/include/linux/serial_8250.h
index 8518fa2a6f89..afe0f6d9b9bc 100644
--- a/include/linux/serial_8250.h
+++ b/include/linux/serial_8250.h
@@ -20,7 +20,7 @@
 struct plat_serial8250_port {
 	unsigned long	iobase;		/* io base address */
 	void __iomem	*membase;	/* ioremap cookie or NULL */
-	unsigned long	mapbase;	/* resource base */
+	resource_size_t	mapbase;	/* resource base */
 	unsigned int	irq;		/* interrupt number */
 	unsigned int	uartclk;	/* UART clock rate */
 	unsigned char	regshift;	/* register shift */

commit b187f180cc942e50007aa039f8e3a620ee5f3171
Author: Yinghai Lu <Yinghai.Lu@Sun.COM>
Date:   Wed Jul 18 00:49:10 2007 -0700

    serial: add early_serial_setup() back to header file
    
    early_serial_setup was removed from serial.h, but forgot to put in
    serial_8250.h
    
    Signed-off-by: Yinghai Lu <yinghai.lu@sun.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

diff --git a/include/linux/serial_8250.h b/include/linux/serial_8250.h
index 706ee9a4c80c..8518fa2a6f89 100644
--- a/include/linux/serial_8250.h
+++ b/include/linux/serial_8250.h
@@ -60,6 +60,8 @@ void serial8250_unregister_port(int line);
 void serial8250_suspend_port(int line);
 void serial8250_resume_port(int line);
 
+extern int early_serial_setup(struct uart_port *port);
+
 extern int serial8250_find_port(struct uart_port *p);
 extern int serial8250_find_port_for_earlycon(void);
 extern int setup_early_serial8250_console(char *cmdline);

commit 18a8bd949d6adb311ea816125ff65050df1f3f6e
Author: Yinghai Lu <Yinghai.Lu@Sun.COM>
Date:   Sun Jul 15 23:37:59 2007 -0700

    serial: convert early_uart to earlycon for 8250
    
    Beacuse SERIAL_PORT_DFNS is removed from include/asm-i386/serial.h and
    include/asm-x86_64/serial.h.  the serial8250_ports need to be probed late in
    serial initializing stage.  the console_init=>serial8250_console_init=>
    register_console=>serial8250_console_setup will return -ENDEV, and console
    ttyS0 can not be enabled at that time.  need to wait till uart_add_one_port in
    drivers/serial/serial_core.c to call register_console to get console ttyS0.
    that is too late.
    
    Make early_uart to use early_param, so uart console can be used earlier.  Make
    it to be bootconsole with CON_BOOT flag, so can use console handover feature.
    and it will switch to corresponding normal serial console automatically.
    
    new command line will be:
            console=uart8250,io,0x3f8,9600n8
            console=uart8250,mmio,0xff5e0000,115200n8
    or
            earlycon=uart8250,io,0x3f8,9600n8
            earlycon=uart8250,mmio,0xff5e0000,115200n8
    
    it will print in very early stage:
            Early serial console at I/O port 0x3f8 (options '9600n8')
            console [uart0] enabled
    later for console it will print:
            console handover: boot [uart0] -> real [ttyS0]
    
    Signed-off-by: <yinghai.lu@sun.com>
    Cc: Andi Kleen <ak@suse.de>
    Cc: Bjorn Helgaas <bjorn.helgaas@hp.com>
    Cc: Russell King <rmk@arm.linux.org.uk>
    Cc: Gerd Hoffmann <kraxel@suse.de>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

diff --git a/include/linux/serial_8250.h b/include/linux/serial_8250.h
index 71310d80c09a..706ee9a4c80c 100644
--- a/include/linux/serial_8250.h
+++ b/include/linux/serial_8250.h
@@ -60,4 +60,8 @@ void serial8250_unregister_port(int line);
 void serial8250_suspend_port(int line);
 void serial8250_resume_port(int line);
 
+extern int serial8250_find_port(struct uart_port *p);
+extern int serial8250_find_port_for_earlycon(void);
+extern int setup_early_serial8250_console(char *cmdline);
+
 #endif

commit e0980dafa329d33bb88edc8a3ef9fab4e070590c
Author: Paul B Schroeder <pschroeder@uplogix.com>
Date:   Wed Dec 6 20:37:03 2006 -0800

    [PATCH] Exar quad port serial
    
    This is on our "Envoy" boxes which we have, according to the documentation, an
    "Exar ST16C554/554D Quad UART with 16-byte Fifo's".  The box also has two
    other "on-board" serial ports and a modem chip.
    
    The two on-board serial UARTs were being detected along with the first two
    Exar UARTs.  The last two Exar UARTs were not showing up and neither was the
    modem.
    
    This patch was the only way I could the kernel to see beyond the standard four
    serial ports and get all four of the Exar UARTs to show up.
    
    [akpm@osdl.org: build fix]
    Signed-off-by:  Paul B Schroeder <pschroeder@uplogix.com>
    Cc: Lennart Sorensen <lsorense@csclub.uwaterloo.ca>
    Acked-by: Alan Cox <alan@lxorguk.ukuu.org.uk>
    Cc: Russell King <rmk@arm.linux.org.uk>
    Cc: Greg KH <greg@kroah.com>
    Signed-off-by: Andrew Morton <akpm@osdl.org>
    Signed-off-by: Linus Torvalds <torvalds@osdl.org>

diff --git a/include/linux/serial_8250.h b/include/linux/serial_8250.h
index 8e9681413726..71310d80c09a 100644
--- a/include/linux/serial_8250.h
+++ b/include/linux/serial_8250.h
@@ -41,6 +41,7 @@ enum {
 	PLAT8250_DEV_FOURPORT,
 	PLAT8250_DEV_ACCENT,
 	PLAT8250_DEV_BOCA,
+	PLAT8250_DEV_EXAR_ST16C554,
 	PLAT8250_DEV_HUB6,
 	PLAT8250_DEV_MCA,
 	PLAT8250_DEV_AU1X00,

commit 104c7b03ea0913a24be103db66d8cf1f1f99a49a
Author: Lennert Buytenhek <buytenh@wantstofly.org>
Date:   Sat Mar 25 23:03:13 2006 +0000

    [ARM] 3383/3: ixp2000: ixdp2x01 platform serial conversion
    
    Patch from Lennert Buytenhek
    
    Add a PLAT8250_DEV_PLATFORM2, and convert the two ixdp2x01 CPLD serial
    ports to use platform serial devices with ids PLAT8250_DEV_PLATFORM[12].
    (The on-chip xscale UART is PLAT8250_DEV_PLATFORM, id #0.)
    
    Signed-off-by: Lennert Buytenhek <buytenh@wantstofly.org>
    Signed-off-by: Russell King <rmk+kernel@arm.linux.org.uk>

diff --git a/include/linux/serial_8250.h b/include/linux/serial_8250.h
index 73b464f0926a..8e9681413726 100644
--- a/include/linux/serial_8250.h
+++ b/include/linux/serial_8250.h
@@ -37,6 +37,7 @@ enum {
 	PLAT8250_DEV_LEGACY = -1,
 	PLAT8250_DEV_PLATFORM,
 	PLAT8250_DEV_PLATFORM1,
+	PLAT8250_DEV_PLATFORM2,
 	PLAT8250_DEV_FOURPORT,
 	PLAT8250_DEV_ACCENT,
 	PLAT8250_DEV_BOCA,

commit 0077d45e46fe2af3aaee5813c99268afcd0e7c0e
Author: Russell King <rmk@dyn-67.arm.linux.org.uk>
Date:   Sat Jan 21 23:03:28 2006 +0000

    [SERIAL] Make uart_port flags a bitwise type
    
    Same reasoning as commit 747c8a55946ed037bf7d62454c3c599c02af2262
    but this time we're making uart_port flags a bitwise type - not
    all of these flags correspond with the old ASYNC_ flags, so there
    is the possibility for bugs if the wrong ASYNC_* constants are
    used.  Always use UPF_* constants for uart_port->flags.
    
    Signed-off-by: Russell King <rmk+kernel@arm.linux.org.uk>

diff --git a/include/linux/serial_8250.h b/include/linux/serial_8250.h
index cee302aefdb7..73b464f0926a 100644
--- a/include/linux/serial_8250.h
+++ b/include/linux/serial_8250.h
@@ -26,7 +26,7 @@ struct plat_serial8250_port {
 	unsigned char	regshift;	/* register shift */
 	unsigned char	iotype;		/* UPIO_* */
 	unsigned char	hub6;
-	unsigned int	flags;		/* UPF_* flags */
+	upf_t		flags;		/* UPF_* flags */
 };
 
 /*

commit 21c614a7899046ab108b3d327d76c33443a8ebf2
Author: Pantelis Antoniou <pantelis.antoniou@gmail.com>
Date:   Sun Nov 6 09:07:03 2005 +0000

    [SERIAL] Support Au1x00 8250 UARTs using the generic 8250 driver.
    
    The offsets of the registers are in a different place, and
    some parts cannot handle a full set of modem control signals.
    
    Signed-off-by: Pantelis Antoniou <pantelis@embeddedalley.ocm>
    Signed-off-by: Russell King <rmk+kernel@arm.linux.org.uk>

diff --git a/include/linux/serial_8250.h b/include/linux/serial_8250.h
index 2b799d40d669..cee302aefdb7 100644
--- a/include/linux/serial_8250.h
+++ b/include/linux/serial_8250.h
@@ -42,6 +42,7 @@ enum {
 	PLAT8250_DEV_BOCA,
 	PLAT8250_DEV_HUB6,
 	PLAT8250_DEV_MCA,
+	PLAT8250_DEV_AU1X00,
 };
 
 /*

commit d052d1beff706920e82c5d55006b08e256b5df09
Author: Russell King <rmk@dyn-67.arm.linux.org.uk>
Date:   Sat Oct 29 19:07:23 2005 +0100

    Create platform_device.h to contain all the platform device details.
    Convert everyone who uses platform_bus_type to include
    linux/platform_device.h.
    
    Signed-off-by: Russell King <rmk+kernel@arm.linux.org.uk>
    Acked-by: Greg Kroah-Hartman <gregkh@suse.de>

diff --git a/include/linux/serial_8250.h b/include/linux/serial_8250.h
index 317a979b24de..2b799d40d669 100644
--- a/include/linux/serial_8250.h
+++ b/include/linux/serial_8250.h
@@ -12,7 +12,7 @@
 #define _LINUX_SERIAL_8250_H
 
 #include <linux/serial_core.h>
-#include <linux/device.h>
+#include <linux/platform_device.h>
 
 /*
  * This is the platform device platform_data structure

commit 6df29debb7fc04ac3f92038c57437f40bab4e72d
Author: Russell King <rmk@dyn-67.arm.linux.org.uk>
Date:   Thu Sep 8 16:04:41 2005 +0100

    [SERIAL] Use an enum for serial8250 platform device IDs
    
    Rather than hard-coding the platform device IDs, enumerate them.
    We don't particularly care about the actual ID we get, just as
    long as they're unique.
    
    Signed-off-by: Russell King <rmk+kernel@arm.linux.org.uk>

diff --git a/include/linux/serial_8250.h b/include/linux/serial_8250.h
index d8a023d804d4..317a979b24de 100644
--- a/include/linux/serial_8250.h
+++ b/include/linux/serial_8250.h
@@ -29,6 +29,21 @@ struct plat_serial8250_port {
 	unsigned int	flags;		/* UPF_* flags */
 };
 
+/*
+ * Allocate 8250 platform device IDs.  Nothing is implied by
+ * the numbering here, except for the legacy entry being -1.
+ */
+enum {
+	PLAT8250_DEV_LEGACY = -1,
+	PLAT8250_DEV_PLATFORM,
+	PLAT8250_DEV_PLATFORM1,
+	PLAT8250_DEV_FOURPORT,
+	PLAT8250_DEV_ACCENT,
+	PLAT8250_DEV_BOCA,
+	PLAT8250_DEV_HUB6,
+	PLAT8250_DEV_MCA,
+};
+
 /*
  * This should be used by drivers which want to register
  * their own 8250 ports without registering their own

commit bc49a661e6e82bfa8219c3d0a2e4dea51c847d23
Author: Russell King <rmk@dyn-67.arm.linux.org.uk>
Date:   Thu Sep 1 15:56:26 2005 +0100

    [SERIAL] Move serial8250_*_port prototypes to linux/serial_8250.h
    
    Signed-off-by: Russell King <rmk+kernel@arm.linux.org.uk>

diff --git a/include/linux/serial_8250.h b/include/linux/serial_8250.h
index 3e3c1fa35b06..d8a023d804d4 100644
--- a/include/linux/serial_8250.h
+++ b/include/linux/serial_8250.h
@@ -14,6 +14,9 @@
 #include <linux/serial_core.h>
 #include <linux/device.h>
 
+/*
+ * This is the platform device platform_data structure
+ */
 struct plat_serial8250_port {
 	unsigned long	iobase;		/* io base address */
 	void __iomem	*membase;	/* ioremap cookie or NULL */
@@ -26,4 +29,17 @@ struct plat_serial8250_port {
 	unsigned int	flags;		/* UPF_* flags */
 };
 
+/*
+ * This should be used by drivers which want to register
+ * their own 8250 ports without registering their own
+ * platform device.  Using these will make your driver
+ * dependent on the 8250 driver.
+ */
+struct uart_port;
+
+int serial8250_register_port(struct uart_port *);
+void serial8250_unregister_port(int line);
+void serial8250_suspend_port(int line);
+void serial8250_resume_port(int line);
+
 #endif

commit ec9f47cd6a14ca069bb7552a984c0a338fc7262b
Author: Russell King <rmk@dyn-67.arm.linux.org.uk>
Date:   Mon Jun 27 11:12:54 2005 +0100

    [PATCH] Serial: Split 8250 port table
    
    Add separate files for the different 8250 ISA-based serial boards.
    
    Looking across all the various architectures, it seems reasonable that
    we can key the availability of the configuration options for these
    beasts to the bus-related symbols (iow, CONFIG_ISA).  We also standardise
    the base baud/uart clock rate for these boards - I'm sure that isn't
    architecture specific, but is solely dependent on the crystal fitted
    on the board (which should be the same no matter what type of machine
    its fitted into.)
    
    Signed-off-by: Russell King <rmk+kernel@arm.linux.org.uk>

diff --git a/include/linux/serial_8250.h b/include/linux/serial_8250.h
index 823181af6ddf..3e3c1fa35b06 100644
--- a/include/linux/serial_8250.h
+++ b/include/linux/serial_8250.h
@@ -22,6 +22,7 @@ struct plat_serial8250_port {
 	unsigned int	uartclk;	/* UART clock rate */
 	unsigned char	regshift;	/* register shift */
 	unsigned char	iotype;		/* UPIO_* */
+	unsigned char	hub6;
 	unsigned int	flags;		/* UPF_* flags */
 };
 

commit 1da177e4c3f41524e886b7f1b8a0c1fc7321cac2
Author: Linus Torvalds <torvalds@ppc970.osdl.org>
Date:   Sat Apr 16 15:20:36 2005 -0700

    Linux-2.6.12-rc2
    
    Initial git repository build. I'm not bothering with the full history,
    even though we have it. We can create a separate "historical" git
    archive of that later if we want to, and in the meantime it's about
    3.2GB when imported into git - space that would just make the early
    git days unnecessarily complicated, when we don't have a lot of good
    infrastructure for it.
    
    Let it rip!

diff --git a/include/linux/serial_8250.h b/include/linux/serial_8250.h
new file mode 100644
index 000000000000..823181af6ddf
--- /dev/null
+++ b/include/linux/serial_8250.h
@@ -0,0 +1,28 @@
+/*
+ *  linux/include/linux/serial_8250.h
+ *
+ *  Copyright (C) 2004 Russell King
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ */
+#ifndef _LINUX_SERIAL_8250_H
+#define _LINUX_SERIAL_8250_H
+
+#include <linux/serial_core.h>
+#include <linux/device.h>
+
+struct plat_serial8250_port {
+	unsigned long	iobase;		/* io base address */
+	void __iomem	*membase;	/* ioremap cookie or NULL */
+	unsigned long	mapbase;	/* resource base */
+	unsigned int	irq;		/* interrupt number */
+	unsigned int	uartclk;	/* UART clock rate */
+	unsigned char	regshift;	/* register shift */
+	unsigned char	iotype;		/* UPIO_* */
+	unsigned int	flags;		/* UPF_* flags */
+};
+
+#endif
