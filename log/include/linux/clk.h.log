commit 64c76b31774db5a0c0ce8df13aef618912136e32
Author: Martin Blumenstingl <martin.blumenstingl@googlemail.com>
Date:   Thu Dec 26 20:12:24 2019 +0100

    clk: clarify that clk_set_rate() does updates from top to bottom
    
    clk_set_rate() currently starts updating the rate for a clock at the
    top-most affected clock and then walks down the tree to update the
    bottom-most affected clock last.
    This behavior is important for protected clocks where we can switch
    between multiple parents to achieve the same output.
    
    An example for this is the mali clock tree on Amlogic SoCs:
      mali_0_mux (must not change when enabled)
        mali_0_div (must not change when enabled)
         mali_0 (gate)
      mali_1_mux (must not change when enabled)
        mali_1_div (must not change when enabled)
          mali_1 (gate)
    The final output can either use mali_0_gate or mali_1. To change the
    final output we must switch to the "inactive" tree. Assuming mali_0 is
    active, then we need to prepare mali_1 with the new desired rate and
    finally switch the output to the mali_1 tree. This process will then
    protect the mali_1 tree and at the same time unprotect the mali_0 tree.
    The next call to clk_set_rate() will then switch from the mali_1 tree
    back to mali_0.
    
    Acked-by: Stephen Boyd <sboyd@kernel.org>
    Signed-off-by: Martin Blumenstingl <martin.blumenstingl@googlemail.com>
    Signed-off-by: Jerome Brunet <jbrunet@baylibre.com>

diff --git a/include/linux/clk.h b/include/linux/clk.h
index 18b7b95a8253..7fd6a1febcf4 100644
--- a/include/linux/clk.h
+++ b/include/linux/clk.h
@@ -627,6 +627,9 @@ long clk_round_rate(struct clk *clk, unsigned long rate);
  * @clk: clock source
  * @rate: desired clock rate in Hz
  *
+ * Updating the rate starts at the top-most affected clock and then
+ * walks the tree down to the bottom-most clock that needs updating.
+ *
  * Returns success (0) or negative errno.
  */
 int clk_set_rate(struct clk *clk, unsigned long rate);

commit a703d279c57e1bfe2b6536c3a17c1c498b416d24
Merge: 1ddd00276fd5 ebd47c843406
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Fri Sep 20 15:45:07 2019 -0700

    Merge tag 'clk-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/clk/linux
    
    Pull clk updates from Stephen Boyd:
     "We have a small collection of core framework updates this time, mostly
      around clk registration by clk providers and debugfs "nice to haves"
      for rate constraints. I'll highlight that we're now setting the
      clk_init_data pointer inside struct clk_hw to NULL during
      clk_register(), which may break some drivers that thought they could
      use that pointer during normal operations. That change has been
      sitting in next for a while now but maybe something is still broken.
      We'l see. Other than that the core framework changes aren't invasive
      and they're fixing bugs, simplifying, and making things better.
    
      On the clk driver side we got the usual addition of new SoC support,
      new features for existing drivers, and bug fixes scattered throughout.
      The biggest diffstat is the Amlogic driver that gained CPU clk support
      in addition to migrating to the new way of specifying clk parents.
      After that the Qualcomm, i.MX, Mediatek, and Rockchip clk drivers got
      support for various new SoCs and clock controllers from those vendors.
    
      Core:
       - Drop NULL checks in clk debugfs
       - Add min/max rates to clk debugfs
       - Set clk_init_data pointer inside clk_hw to NULL after registration
       - Make clk_bulk_get_all() return an 'id' corresponding to clock-names
       - Evict parents from parent cache when they're unregistered
    
      New Drivers:
       - Add clock driver for i.MX8MN SoCs
       - Support aspeed AST2600 SoCs
       - Support for Mediatek MT6779 SoCs
       - Support qcom SM8150 GCC and RPMh clks
       - Support qcom QCS404 WCSS clks
       - Add CPU clock support for Armada 7K/8K (specifically AP806 and AP807)
       - Addition of clock driver for Rockchip rk3308 SoCs
    
      Updates:
       - Add regulator support to the cdce925 clk driver
       - Add support for Raspberry Pi 4 bcm2711 SoCs
       - Add SDIO gate support to aspeed driver
       - Add missing of_node_put() calls in various clk drivers
       - Migrate Amlogic driver to new clock parent description method
       - Add DVFS support to Amlogic Meson g12
       - Add Amlogic Meson g12a reset support to the axg audio clock controller
       - Add sm1 support to the Amlogic Meson g12a clock controller
       - Switch i.MX8MM clock driver to platform driver
       - Add Hifi4 DSP related clocks for i.MX8QXP SoC
       - Fix Audio PLL setting and parent clock for USB
       - Misc i.MX8 clock driver improvements and corrections
       - Set floor ops for Qualcomm SD clks so that rounding works
       - Fix "always-on" Clock Domains on Renesas R-Car M1A, RZ/A1, RZ/A2, and RZ/N1
       - Enable the Allwinner V3 SoC and fix the i2s clock for H6"
    
    * tag 'clk-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/clk/linux: (137 commits)
      clk: Drop !clk checks in debugfs dumping
      clk: imx: imx8mn: fix pll mux bit
      clk: imx: imx8mm: fix pll mux bit
      clk: imx: clk-pll14xx: unbypass PLL by default
      clk: imx: pll14xx: avoid glitch when set rate
      clk: mvebu: ap80x: add AP807 clock support
      clk: mvebu: ap806: Prepare the introduction of AP807 clock support
      clk: mvebu: ap806: add AP-DCLK (hclk) to system controller driver
      clk: mvebu: ap806: be more explicit on what SaR is
      clk: mvebu: ap80x-cpu: add AP807 CPU clock support
      clk: mvebu: ap806-cpu: prepare mapping of AP807 CPU clock
      dt-bindings: ap806: Document AP807 clock compatible
      dt-bindings: ap80x: Document AP807 CPU clock compatible
      clk: sprd: add missing kfree
      clk: at91: allow 24 Mhz clock as input for PLL
      clk: Make clk_bulk_get_all() return a valid "id"
      clk: actions: Fix factor clk struct member access
      clk: qcom: rcg: Return failure for RCG update
      clk: remove extra ---help--- tags in Kconfig
      clk: add include guard to clk-conf.h
      ...

commit 570aaec7e9436eae5ffe4588d08e5262731e1b75
Author: Andrey Smirnov <andrew.smirnov@gmail.com>
Date:   Wed Jul 17 07:56:51 2019 -0700

    clk: Constify struct clk_bulk_data * where possible
    
    The following functions:
    
        - clk_bulk_enable()
        - clk_bulk_prepare()
        - clk_bulk_disable()
        - clk_bulk_unprepare()
    
    already expect const clk_bulk_data * as a second parameter, however
    their no-op version have mismatching prototypes that don't. Fix that.
    
    While at it, constify the second argument of clk_bulk_prepare_enable()
    and clk_bulk_disable_unprepare(), since the functions they are
    comprised of already accept const clk_bulk_data *.
    
    Signed-off-by: Andrey Smirnov <andrew.smirnov@gmail.com>
    Cc: Russell King <linux@armlinux.org.uk>
    Cc: Stephen Boyd <sboyd@kernel.org>
    Cc: Chris Healy <cphealy@gmail.com>
    Cc: linux-clk@vger.kernel.org
    Cc: linux-kernel@vger.kernel.org
    Link: https://lkml.kernel.org/r/20190717145651.17250-1-andrew.smirnov@gmail.com
    Signed-off-by: Stephen Boyd <sboyd@kernel.org>

diff --git a/include/linux/clk.h b/include/linux/clk.h
index 3c096c7a51dc..7a795fd6d141 100644
--- a/include/linux/clk.h
+++ b/include/linux/clk.h
@@ -239,7 +239,8 @@ static inline int clk_prepare(struct clk *clk)
 	return 0;
 }
 
-static inline int __must_check clk_bulk_prepare(int num_clks, struct clk_bulk_data *clks)
+static inline int __must_check
+clk_bulk_prepare(int num_clks, const struct clk_bulk_data *clks)
 {
 	might_sleep();
 	return 0;
@@ -263,7 +264,8 @@ static inline void clk_unprepare(struct clk *clk)
 {
 	might_sleep();
 }
-static inline void clk_bulk_unprepare(int num_clks, struct clk_bulk_data *clks)
+static inline void clk_bulk_unprepare(int num_clks,
+				      const struct clk_bulk_data *clks)
 {
 	might_sleep();
 }
@@ -819,7 +821,8 @@ static inline int clk_enable(struct clk *clk)
 	return 0;
 }
 
-static inline int __must_check clk_bulk_enable(int num_clks, struct clk_bulk_data *clks)
+static inline int __must_check clk_bulk_enable(int num_clks,
+					       const struct clk_bulk_data *clks)
 {
 	return 0;
 }
@@ -828,7 +831,7 @@ static inline void clk_disable(struct clk *clk) {}
 
 
 static inline void clk_bulk_disable(int num_clks,
-				    struct clk_bulk_data *clks) {}
+				    const struct clk_bulk_data *clks) {}
 
 static inline unsigned long clk_get_rate(struct clk *clk)
 {
@@ -917,8 +920,8 @@ static inline void clk_disable_unprepare(struct clk *clk)
 	clk_unprepare(clk);
 }
 
-static inline int __must_check clk_bulk_prepare_enable(int num_clks,
-					struct clk_bulk_data *clks)
+static inline int __must_check
+clk_bulk_prepare_enable(int num_clks, const struct clk_bulk_data *clks)
 {
 	int ret;
 
@@ -933,7 +936,7 @@ static inline int __must_check clk_bulk_prepare_enable(int num_clks,
 }
 
 static inline void clk_bulk_disable_unprepare(int num_clks,
-					      struct clk_bulk_data *clks)
+					      const struct clk_bulk_data *clks)
 {
 	clk_bulk_disable(num_clks, clks);
 	clk_bulk_unprepare(num_clks, clks);

commit 6ee82ef04e38b0d8b09b04bc1b068673deed6582
Author: Sylwester Nawrocki <s.nawrocki@samsung.com>
Date:   Mon Jul 1 13:46:51 2019 +0200

    clk: Add missing documentation of devm_clk_bulk_get_optional() argument
    
    Fix an incomplete devm_clk_bulk_get_optional() function documentation
    by adding description of the num_clks argument as in other *clk_bulk*
    functions.
    
    Fixes: 9bd5ef0bd874 ("clk: Add devm_clk_bulk_get_optional() function")
    Reported-by: kbuild test robot <lkp@intel.com>
    Signed-off-by: Sylwester Nawrocki <s.nawrocki@samsung.com>
    Signed-off-by: Stephen Boyd <sboyd@kernel.org>

diff --git a/include/linux/clk.h b/include/linux/clk.h
index 3c096c7a51dc..853a8f181394 100644
--- a/include/linux/clk.h
+++ b/include/linux/clk.h
@@ -359,6 +359,7 @@ int __must_check devm_clk_bulk_get(struct device *dev, int num_clks,
 /**
  * devm_clk_bulk_get_optional - managed get multiple optional consumer clocks
  * @dev: device for clock "consumer"
+ * @num_clks: the number of clk_bulk_data
  * @clks: pointer to the clk_bulk_data table of consumer
  *
  * Behaves the same as devm_clk_bulk_get() except where there is no clock

commit 916f562fb28a49457d3d99d156ca415b50d6750e
Merge: edafb6fe42cf b1511f7a48c3
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Wed Jul 17 10:07:48 2019 -0700

    Merge tag 'clk-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/clk/linux
    
    Pull clk updates from Stephen Boyd:
     "This round of clk driver and framework updates is heavy on the driver
      update side. The two main highlights in the core framework are the
      addition of an bulk clk_get API that handles optional clks and an
      extra debugfs file that tells the developer about the current parent
      of a clk.
    
      The driver updates are dominated by i.MX in the diffstat, but that is
      mostly because that SoC has started converting to the clk_hw style of
      clk registration. The next big update is in the Amlogic meson clk
      driver that gained some support for audio, cpu, and temperature clks
      while fixing some PLL issues. Finally, the biggest thing that stands
      out is the conversion of a large part of the Allwinner sunxi-ng driver
      to the new clk parent scheme that uses less strings and more pointer
      comparisons to match clk parents and children up.
    
      In general, it looks like we have a lot of little fixes and tweaks
      here and there to clk data along with the normal addition of a handful
      of new drivers and a couple new core framework features.
    
      Core:
       - Add a 'clk_parent' file in clk debugfs
       - Add a clk_bulk_get_optional() API (with devm too)
    
      New Drivers:
       - Support gated clk controller on MIPS based BCM63XX SoCs
       - Support SiLabs Si5341 and Si5340 chips
       - Support for CPU clks on Raspberry Pi devices
       - Audsys clock driver for MediaTek MT8516 SoCs
    
      Updates:
       - Convert a large portion of the Allwinner sunxi-ng driver to new clk parent scheme
       - Small frequency support for SiLabs Si544 chips
       - Slow clk support for AT91 SAM9X60 SoCs
       - Remove dead code in various clk drivers (-Wunused)
       - Support for Marvell 98DX1135 SoCs
       - Get duty cycle of generic pwm clks
       - Improvement in mmc phase calculation and cleanup of some rate defintions
       - Switch i.MX6 and i.MX7 clock drivers to clk_hw based APIs
       - Add GPIO, SNVS and GIC clocks for i.MX8 drivers
       - Mark imx6sx/ul/ull/sll MMDC_P1_IPG and imx8mm DRAM_APB as critical clock
       - Correct imx7ulp nic1_bus_clk and imx8mm audio_pll2_clk clock setting
       - Add clks for new Exynos5422 Dynamic Memory Controller driver
       - Clock definition for Exynos4412 Mali
       - Add CMM (Color Management Module) clocks on Renesas R-Car H3, M3-N, E3, and D3
       - Add TPU (Timer Pulse Unit / PWM) clocks on Renesas RZ/G2M
       - Support for 32 bit clock IDs in TI's sci-clks for J721e SoCs
       - TI clock probing done from DT by default instead of firmware
       - Fix Amlogic Meson mpll fractional part and spread sprectrum issues
       - Add Amlogic meson8 audio clocks
       - Add Amlogic g12a temperature sensors clocks
       - Add Amlogic g12a and g12b cpu clocks
       - Add TPU (Timer Pulse Unit / PWM) clocks on Renesas R-Car H3, M3-W, and M3-N
       - Add CMM (Color Management Module) clocks on Renesas R-Car M3-W
       - Add Clock Domain support on Renesas RZ/N1"
    
    * tag 'clk-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/clk/linux: (190 commits)
      clk: consoldiate the __clk_get_hw() declarations
      clk: sprd: Add check for return value of sprd_clk_regmap_init()
      clk: lochnagar: Update DT binding doc to include the primary SPDIF MCLK
      clk: Add Si5341/Si5340 driver
      dt-bindings: clock: Add silabs,si5341
      clk: clk-si544: Implement small frequency change support
      clk: add BCM63XX gated clock controller driver
      devicetree: document the BCM63XX gated clock bindings
      clk: at91: sckc: use dedicated functions to unregister clock
      clk: at91: sckc: improve error path for sama5d4 sck registration
      clk: at91: sckc: remove unnecessary line
      clk: at91: sckc: improve error path for sam9x5 sck register
      clk: at91: sckc: add support to free slow clock osclillator
      clk: at91: sckc: add support to free slow rc oscillator
      clk: at91: sckc: add support to free slow oscillator
      clk: rockchip: export HDMIPHY clock on rk3228
      clk: rockchip: add watchdog pclk on rk3328
      clk: rockchip: add clock id for hdmi_phy special clock on rk3228
      clk: rockchip: add clock id for watchdog pclk on rk3328
      clk: at91: sckc: add support for SAM9X60
      ...

commit 9bd5ef0bd8743700d9adffb6fbb1baa346575457
Author: Sylwester Nawrocki <s.nawrocki@samsung.com>
Date:   Wed Jun 19 11:39:26 2019 +0200

    clk: Add devm_clk_bulk_get_optional() function
    
    Add managed version of the clk_bulk_get_optional() helper function.
    
    Signed-off-by: Sylwester Nawrocki <s.nawrocki@samsung.com>
    [sboyd@kernel.org: Mark __devm_clk_bulk_get() static]
    Signed-off-by: Stephen Boyd <sboyd@kernel.org>

diff --git a/include/linux/clk.h b/include/linux/clk.h
index 1b50e7d1675c..5e7b2dd84965 100644
--- a/include/linux/clk.h
+++ b/include/linux/clk.h
@@ -359,6 +359,28 @@ int __must_check clk_bulk_get_optional(struct device *dev, int num_clks,
  */
 int __must_check devm_clk_bulk_get(struct device *dev, int num_clks,
 				   struct clk_bulk_data *clks);
+/**
+ * devm_clk_bulk_get_optional - managed get multiple optional consumer clocks
+ * @dev: device for clock "consumer"
+ * @clks: pointer to the clk_bulk_data table of consumer
+ *
+ * Behaves the same as devm_clk_bulk_get() except where there is no clock
+ * producer.  In this case, instead of returning -ENOENT, the function returns
+ * NULL for given clk. It is assumed all clocks in clk_bulk_data are optional.
+ *
+ * Returns 0 if all clocks specified in clk_bulk_data table are obtained
+ * successfully or for any clk there was no clk provider available, otherwise
+ * returns valid IS_ERR() condition containing errno.
+ * The implementation uses @dev and @clk_bulk_data.id to determine the
+ * clock consumer, and thereby the clock producer.
+ * The clock returned is stored in each @clk_bulk_data.clk field.
+ *
+ * Drivers must assume that the clock source is not enabled.
+ *
+ * clk_bulk_get should not be called from within interrupt context.
+ */
+int __must_check devm_clk_bulk_get_optional(struct device *dev, int num_clks,
+					    struct clk_bulk_data *clks);
 /**
  * devm_clk_bulk_get_all - managed get multiple clk consumers
  * @dev: device for clock "consumer"
@@ -760,6 +782,12 @@ static inline int __must_check devm_clk_bulk_get(struct device *dev, int num_clk
 	return 0;
 }
 
+static inline int __must_check devm_clk_bulk_get_optional(struct device *dev,
+				int num_clks, struct clk_bulk_data *clks)
+{
+	return 0;
+}
+
 static inline int __must_check devm_clk_bulk_get_all(struct device *dev,
 						     struct clk_bulk_data **clks)
 {

commit 2f25528e4edddc6eddd42c8d41c9c9e341c8b9da
Author: Sylwester Nawrocki <s.nawrocki@samsung.com>
Date:   Wed Jun 19 11:39:25 2019 +0200

    clk: Add clk_bulk_get_optional() function
    
    clk_bulk_get_optional() allows to get a group of clocks where one
    or more is optional.  For a not available clock, e.g. not specifed
    in the clock consumer node in DT, its respective struct clk pointer
    will be NULL.  This allows for operating on a group of returned
    clocks (struct clk_bulk_data array) with existing clk_bulk* APIs.
    
    Signed-off-by: Sylwester Nawrocki <s.nawrocki@samsung.com>
    Signed-off-by: Stephen Boyd <sboyd@kernel.org>

diff --git a/include/linux/clk.h b/include/linux/clk.h
index f689fc58d7be..1b50e7d1675c 100644
--- a/include/linux/clk.h
+++ b/include/linux/clk.h
@@ -332,6 +332,19 @@ int __must_check clk_bulk_get(struct device *dev, int num_clks,
  */
 int __must_check clk_bulk_get_all(struct device *dev,
 				  struct clk_bulk_data **clks);
+
+/**
+ * clk_bulk_get_optional - lookup and obtain a number of references to clock producer
+ * @dev: device for clock "consumer"
+ * @num_clks: the number of clk_bulk_data
+ * @clks: the clk_bulk_data table of consumer
+ *
+ * Behaves the same as clk_bulk_get() except where there is no clock producer.
+ * In this case, instead of returning -ENOENT, the function returns 0 and
+ * NULL for a clk for which a clock producer could not be determined.
+ */
+int __must_check clk_bulk_get_optional(struct device *dev, int num_clks,
+				       struct clk_bulk_data *clks);
 /**
  * devm_clk_bulk_get - managed get multiple clk consumers
  * @dev: device for clock "consumer"
@@ -718,6 +731,12 @@ static inline int __must_check clk_bulk_get(struct device *dev, int num_clks,
 	return 0;
 }
 
+static inline int __must_check clk_bulk_get_optional(struct device *dev,
+				int num_clks, struct clk_bulk_data *clks)
+{
+	return 0;
+}
+
 static inline int __must_check clk_bulk_get_all(struct device *dev,
 					 struct clk_bulk_data **clks)
 {

commit d2912cb15bdda8ba4a5dd73396ad62641af2f520
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Tue Jun 4 10:11:33 2019 +0200

    treewide: Replace GPLv2 boilerplate/reference with SPDX - rule 500
    
    Based on 2 normalized pattern(s):
    
      this program is free software you can redistribute it and or modify
      it under the terms of the gnu general public license version 2 as
      published by the free software foundation
    
      this program is free software you can redistribute it and or modify
      it under the terms of the gnu general public license version 2 as
      published by the free software foundation #
    
    extracted by the scancode license scanner the SPDX license identifier
    
      GPL-2.0-only
    
    has been chosen to replace the boilerplate/reference in 4122 file(s).
    
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Reviewed-by: Enrico Weigelt <info@metux.net>
    Reviewed-by: Kate Stewart <kstewart@linuxfoundation.org>
    Reviewed-by: Allison Randal <allison@lohutok.net>
    Cc: linux-spdx@vger.kernel.org
    Link: https://lkml.kernel.org/r/20190604081206.933168790@linutronix.de
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/include/linux/clk.h b/include/linux/clk.h
index f689fc58d7be..c8e3325868bd 100644
--- a/include/linux/clk.h
+++ b/include/linux/clk.h
@@ -1,13 +1,10 @@
+/* SPDX-License-Identifier: GPL-2.0-only */
 /*
  *  linux/include/linux/clk.h
  *
  *  Copyright (C) 2004 ARM Limited.
  *  Written by Deep Blue Solutions Limited.
  *  Copyright (C) 2011-2012 Linaro Ltd <mturquette@linaro.org>
- *
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License version 2 as
- * published by the Free Software Foundation.
  */
 #ifndef __LINUX_CLK_H
 #define __LINUX_CLK_H

commit b88c9f4129dcec941e5a26508e991c08051ed1ac
Author: Dmitry Osipenko <digetx@gmail.com>
Date:   Thu Apr 25 16:28:37 2019 +0300

    clk: Add missing stubs for a few functions
    
    Compilation fails if any of undeclared clk_set_*() functions are in use
    and CONFIG_HAVE_CLK=n.
    
    Reported-by: kbuild test robot <lkp@intel.com>
    Signed-off-by: Dmitry Osipenko <digetx@gmail.com>
    Signed-off-by: Stephen Boyd <sboyd@kernel.org>

diff --git a/include/linux/clk.h b/include/linux/clk.h
index d8bc1a856b39..f689fc58d7be 100644
--- a/include/linux/clk.h
+++ b/include/linux/clk.h
@@ -811,6 +811,22 @@ static inline bool clk_has_parent(struct clk *clk, struct clk *parent)
 	return true;
 }
 
+static inline int clk_set_rate_range(struct clk *clk, unsigned long min,
+				     unsigned long max)
+{
+	return 0;
+}
+
+static inline int clk_set_min_rate(struct clk *clk, unsigned long rate)
+{
+	return 0;
+}
+
+static inline int clk_set_max_rate(struct clk *clk, unsigned long rate)
+{
+	return 0;
+}
+
 static inline int clk_set_parent(struct clk *clk, struct clk *parent)
 {
 	return 0;

commit 60b8f0ddf1a927ef02141a6610fd52575134f821
Author: Phil Edworthy <phil.edworthy@renesas.com>
Date:   Mon Dec 3 11:13:09 2018 +0000

    clk: Add (devm_)clk_get_optional() functions
    
    This adds clk_get_optional() and devm_clk_get_optional() functions to get
    optional clocks.
    
    They behave the same as (devm_)clk_get() except where there is no clock
    producer. In this case, instead of returning -ENOENT, the function
    returns NULL. This makes error checking simpler and allows
    clk_prepare_enable, etc to be called on the returned reference
    without additional checks.
    
    Signed-off-by: Phil Edworthy <phil.edworthy@renesas.com>
    Reviewed-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    Cc: Russell King <linux@armlinux.org.uk>
    [sboyd@kernel.org: Document in devres.txt]
    Signed-off-by: Stephen Boyd <sboyd@kernel.org>

diff --git a/include/linux/clk.h b/include/linux/clk.h
index a7773b5c0b9f..d8bc1a856b39 100644
--- a/include/linux/clk.h
+++ b/include/linux/clk.h
@@ -383,6 +383,17 @@ int __must_check devm_clk_bulk_get_all(struct device *dev,
  */
 struct clk *devm_clk_get(struct device *dev, const char *id);
 
+/**
+ * devm_clk_get_optional - lookup and obtain a managed reference to an optional
+ *			   clock producer.
+ * @dev: device for clock "consumer"
+ * @id: clock consumer ID
+ *
+ * Behaves the same as devm_clk_get() except where there is no clock producer.
+ * In this case, instead of returning -ENOENT, the function returns NULL.
+ */
+struct clk *devm_clk_get_optional(struct device *dev, const char *id);
+
 /**
  * devm_get_clk_from_child - lookup and obtain a managed reference to a
  *			     clock producer from child node.
@@ -718,6 +729,12 @@ static inline struct clk *devm_clk_get(struct device *dev, const char *id)
 	return NULL;
 }
 
+static inline struct clk *devm_clk_get_optional(struct device *dev,
+						const char *id)
+{
+	return NULL;
+}
+
 static inline int __must_check devm_clk_bulk_get(struct device *dev, int num_clks,
 						 struct clk_bulk_data *clks)
 {
@@ -862,6 +879,25 @@ static inline void clk_bulk_disable_unprepare(int num_clks,
 	clk_bulk_unprepare(num_clks, clks);
 }
 
+/**
+ * clk_get_optional - lookup and obtain a reference to an optional clock
+ *		      producer.
+ * @dev: device for clock "consumer"
+ * @id: clock consumer ID
+ *
+ * Behaves the same as clk_get() except where there is no clock producer. In
+ * this case, instead of returning -ENOENT, the function returns NULL.
+ */
+static inline struct clk *clk_get_optional(struct device *dev, const char *id)
+{
+	struct clk *clk = clk_get(dev, id);
+
+	if (clk == ERR_PTR(-ENOENT))
+		return NULL;
+
+	return clk;
+}
+
 #if defined(CONFIG_OF) && defined(CONFIG_COMMON_CLK)
 struct clk *of_clk_get(struct device_node *np, int index);
 struct clk *of_clk_get_by_name(struct device_node *np, const char *name);

commit c1f74dbe59b74016adb8f96667fe27f135c5247f
Merge: 19ef24654f2e c8da78e8a1da f08c2e2865f6
Author: Stephen Boyd <sboyd@kernel.org>
Date:   Thu Oct 18 15:43:38 2018 -0700

    Merge branches 'clk-tegra' and 'clk-bulk-get-all' into clk-next
    
      - Nvidia Tegra clk driver MBIST workaround fix
      - clk_bulk_get_all() API and friends to get all the clks for a device
    
    * clk-tegra:
      clk: tegra210: Include size.h for compilation ease
      clk: tegra: Fixes for MBIST work around
      clk: tegra: probe deferral error reporting
    
    * clk-bulk-get-all:
      clk: add managed version of clk_bulk_get_all
      clk: add new APIs to operate on all available clocks
      clk: bulk: add of_clk_bulk_get()

commit f08c2e2865f6f9b172f37d7bbf24716f9ebad553
Author: Dong Aisheng <aisheng.dong@nxp.com>
Date:   Fri Aug 31 12:45:55 2018 +0800

    clk: add managed version of clk_bulk_get_all
    
    This patch introduces the managed version of clk_bulk_get_all.
    
    Cc: Michael Turquette <mturquette@baylibre.com>
    Cc: Stephen Boyd <sboyd@codeaurora.org>
    Tested-by: Thor Thayer <thor.thayer@linux.intel.com>
    Signed-off-by: Dong Aisheng <aisheng.dong@nxp.com>
    Signed-off-by: Stephen Boyd <sboyd@kernel.org>

diff --git a/include/linux/clk.h b/include/linux/clk.h
index e9433c76757b..c705271dc1f2 100644
--- a/include/linux/clk.h
+++ b/include/linux/clk.h
@@ -346,6 +346,22 @@ int __must_check clk_bulk_get_all(struct device *dev,
  */
 int __must_check devm_clk_bulk_get(struct device *dev, int num_clks,
 				   struct clk_bulk_data *clks);
+/**
+ * devm_clk_bulk_get_all - managed get multiple clk consumers
+ * @dev: device for clock "consumer"
+ * @clks: pointer to the clk_bulk_data table of consumer
+ *
+ * Returns a positive value for the number of clocks obtained while the
+ * clock references are stored in the clk_bulk_data table in @clks field.
+ * Returns 0 if there're none and a negative value if something failed.
+ *
+ * This helper function allows drivers to get several clk
+ * consumers in one operation with management, the clks will
+ * automatically be freed when the device is unbound.
+ */
+
+int __must_check devm_clk_bulk_get_all(struct device *dev,
+				       struct clk_bulk_data **clks);
 
 /**
  * devm_clk_get - lookup and obtain a managed reference to a clock producer.
@@ -691,6 +707,13 @@ static inline int __must_check devm_clk_bulk_get(struct device *dev, int num_clk
 	return 0;
 }
 
+static inline int __must_check devm_clk_bulk_get_all(struct device *dev,
+						     struct clk_bulk_data **clks)
+{
+
+	return 0;
+}
+
 static inline struct clk *devm_get_clk_from_child(struct device *dev,
 				struct device_node *np, const char *con_id)
 {

commit 616e45df7c4aa71279c07cc803a1d51f43f89f37
Author: Dong Aisheng <aisheng.dong@nxp.com>
Date:   Fri Aug 31 12:45:54 2018 +0800

    clk: add new APIs to operate on all available clocks
    
    This patch introduces of_clk_bulk_get_all and clk_bulk_x_all APIs
    to users who just want to handle all available clocks from device tree
    without need to know the detailed clock information likes clock numbers
    and names. This is useful in writing some generic drivers to handle clock
    part.
    
    Cc: Stephen Boyd <sboyd@codeaurora.org>
    Cc: Masahiro Yamada <yamada.masahiro@socionext.com>
    Tested-by: Thor Thayer <thor.thayer@linux.intel.com>
    Signed-off-by: Dong Aisheng <aisheng.dong@nxp.com>
    Signed-off-by: Stephen Boyd <sboyd@kernel.org>

diff --git a/include/linux/clk.h b/include/linux/clk.h
index 4f750c481b82..e9433c76757b 100644
--- a/include/linux/clk.h
+++ b/include/linux/clk.h
@@ -312,7 +312,26 @@ struct clk *clk_get(struct device *dev, const char *id);
  */
 int __must_check clk_bulk_get(struct device *dev, int num_clks,
 			      struct clk_bulk_data *clks);
-
+/**
+ * clk_bulk_get_all - lookup and obtain all available references to clock
+ *		      producer.
+ * @dev: device for clock "consumer"
+ * @clks: pointer to the clk_bulk_data table of consumer
+ *
+ * This helper function allows drivers to get all clk consumers in one
+ * operation. If any of the clk cannot be acquired then any clks
+ * that were obtained will be freed before returning to the caller.
+ *
+ * Returns a positive value for the number of clocks obtained while the
+ * clock references are stored in the clk_bulk_data table in @clks field.
+ * Returns 0 if there're none and a negative value if something failed.
+ *
+ * Drivers must assume that the clock source is not enabled.
+ *
+ * clk_bulk_get should not be called from within interrupt context.
+ */
+int __must_check clk_bulk_get_all(struct device *dev,
+				  struct clk_bulk_data **clks);
 /**
  * devm_clk_bulk_get - managed get multiple clk consumers
  * @dev: device for clock "consumer"
@@ -487,6 +506,19 @@ void clk_put(struct clk *clk);
  */
 void clk_bulk_put(int num_clks, struct clk_bulk_data *clks);
 
+/**
+ * clk_bulk_put_all - "free" all the clock source
+ * @num_clks: the number of clk_bulk_data
+ * @clks: the clk_bulk_data table of consumer
+ *
+ * Note: drivers must ensure that all clk_bulk_enable calls made on this
+ * clock source are balanced by clk_bulk_disable calls prior to calling
+ * this function.
+ *
+ * clk_bulk_put_all should not be called from within interrupt context.
+ */
+void clk_bulk_put_all(int num_clks, struct clk_bulk_data *clks);
+
 /**
  * devm_clk_put	- "free" a managed clock source
  * @dev: device used to acquire the clock
@@ -642,6 +674,12 @@ static inline int __must_check clk_bulk_get(struct device *dev, int num_clks,
 	return 0;
 }
 
+static inline int __must_check clk_bulk_get_all(struct device *dev,
+					 struct clk_bulk_data **clks)
+{
+	return 0;
+}
+
 static inline struct clk *devm_clk_get(struct device *dev, const char *id)
 {
 	return NULL;
@@ -663,6 +701,8 @@ static inline void clk_put(struct clk *clk) {}
 
 static inline void clk_bulk_put(int num_clks, struct clk_bulk_data *clks) {}
 
+static inline void clk_bulk_put_all(int num_clks, struct clk_bulk_data *clks) {}
+
 static inline void devm_clk_put(struct device *dev, struct clk *clk) {}
 
 

commit 8b95d1ce3300c411728954473316bd04d0ba9883
Author: Russ Dill <Russ.Dill@ti.com>
Date:   Tue Sep 4 12:19:35 2018 +0530

    clk: Add functions to save/restore clock context en-masse
    
    Deep enough power saving mode can result into losing context of the clock
    registers also, and they need to be restored once coming back from the power
    saving mode. Hence add functions to save/restore clock context.
    
    Signed-off-by: Keerthy <j-keerthy@ti.com>
    Signed-off-by: Russ Dill <Russ.Dill@ti.com>
    Acked-by: Tony Lindgren <tony@atomide.com>
    Signed-off-by: Tero Kristo <t-kristo@ti.com>

diff --git a/include/linux/clk.h b/include/linux/clk.h
index 4f750c481b82..7da754d79f9d 100644
--- a/include/linux/clk.h
+++ b/include/linux/clk.h
@@ -629,6 +629,23 @@ struct clk *clk_get_parent(struct clk *clk);
  */
 struct clk *clk_get_sys(const char *dev_id, const char *con_id);
 
+/**
+ * clk_save_context - save clock context for poweroff
+ *
+ * Saves the context of the clock register for powerstates in which the
+ * contents of the registers will be lost. Occurs deep within the suspend
+ * code so locking is not necessary.
+ */
+int clk_save_context(void);
+
+/**
+ * clk_restore_context - restore clock context after poweroff
+ *
+ * This occurs with all clocks enabled. Occurs deep within the resume code
+ * so locking is not necessary.
+ */
+void clk_restore_context(void);
+
 #else /* !CONFIG_HAVE_CLK */
 
 static inline struct clk *clk_get(struct device *dev, const char *id)
@@ -728,6 +745,14 @@ static inline struct clk *clk_get_sys(const char *dev_id, const char *con_id)
 {
 	return NULL;
 }
+
+static inline int clk_save_context(void)
+{
+	return 0;
+}
+
+static inline void clk_restore_context(void) {}
+
 #endif
 
 /* clk_prepare_enable helps cases using clk_enable in non-atomic context. */

commit 9fba738a53dda20e748d6ee240b6c017c8146b4b
Author: Jerome Brunet <jbrunet@baylibre.com>
Date:   Tue Jun 19 16:41:41 2018 +0200

    clk: add duty cycle support
    
    Add the possibility to apply and query the clock signal duty cycle ratio.
    
    This is useful when the duty cycle of the clock signal depends on some
    other parameters controlled by the clock framework.
    
    For example, the duty cycle of a divider may depends on the raw divider
    setting (ratio = N / div) , which is controlled by the CCF. In such case,
    going through the pwm framework to control the duty cycle ratio of this
    clock would be a burden.
    
    A clock provider is not required to implement the operation to set and get
    the duty cycle. If it does not implement .get_duty_cycle(), the ratio is
    assumed to be 50%.
    
    This change also adds a new flag, CLK_DUTY_CYCLE_PARENT. This flag should
    be used to indicate that a clock, such as gates and muxes, may inherit
    the duty cycle ratio of its parent clock. If a clock does not provide a
    get_duty_cycle() callback and has CLK_DUTY_CYCLE_PARENT, then the call
    will be directly forwarded to its parent clock, if any. For
    set_duty_cycle(), the clock should also have CLK_SET_RATE_PARENT for the
    call to be forwarded
    
    Signed-off-by: Jerome Brunet <jbrunet@baylibre.com>
    Signed-off-by: Michael Turquette <mturquette@baylibre.com>
    Link: lkml.kernel.org/r/20180619144141.8506-1-jbrunet@baylibre.com

diff --git a/include/linux/clk.h b/include/linux/clk.h
index 0dbd0885b2c2..4f750c481b82 100644
--- a/include/linux/clk.h
+++ b/include/linux/clk.h
@@ -141,6 +141,27 @@ int clk_set_phase(struct clk *clk, int degrees);
  */
 int clk_get_phase(struct clk *clk);
 
+/**
+ * clk_set_duty_cycle - adjust the duty cycle ratio of a clock signal
+ * @clk: clock signal source
+ * @num: numerator of the duty cycle ratio to be applied
+ * @den: denominator of the duty cycle ratio to be applied
+ *
+ * Adjust the duty cycle of a clock signal by the specified ratio. Returns 0 on
+ * success, -EERROR otherwise.
+ */
+int clk_set_duty_cycle(struct clk *clk, unsigned int num, unsigned int den);
+
+/**
+ * clk_get_duty_cycle - return the duty cycle ratio of a clock signal
+ * @clk: clock signal source
+ * @scale: scaling factor to be applied to represent the ratio as an integer
+ *
+ * Returns the duty cycle ratio multiplied by the scale provided, otherwise
+ * returns -EERROR.
+ */
+int clk_get_scaled_duty_cycle(struct clk *clk, unsigned int scale);
+
 /**
  * clk_is_match - check if two clk's point to the same hardware clock
  * @p: clk compared against q
@@ -183,6 +204,18 @@ static inline long clk_get_phase(struct clk *clk)
 	return -ENOTSUPP;
 }
 
+static inline int clk_set_duty_cycle(struct clk *clk, unsigned int num,
+				     unsigned int den)
+{
+	return -ENOTSUPP;
+}
+
+static inline unsigned int clk_get_scaled_duty_cycle(struct clk *clk,
+						     unsigned int scale)
+{
+	return 0;
+}
+
 static inline bool clk_is_match(const struct clk *p, const struct clk *q)
 {
 	return p == q;

commit 6e0d4ff4580c1272f4e4860bf22841ef31fd31ba
Author: Dong Aisheng <aisheng.dong@nxp.com>
Date:   Tue Jan 23 20:24:45 2018 +0800

    clk: add more __must_check for bulk APIs
    
    we need it even when !CONFIG_HAVE_CLK because it allows
    us to catch missing checking return values in the non-clk
    compile configurations too. More test coverage.
    
    Cc: Stephen Boyd <sboyd@codeaurora.org>
    Suggested-by: Stephen Boyd <sboyd@codeaurora.org>
    Signed-off-by: Dong Aisheng <aisheng.dong@nxp.com>
    Signed-off-by: Stephen Boyd <sboyd@kernel.org>

diff --git a/include/linux/clk.h b/include/linux/clk.h
index 4c4ef9f34db3..0dbd0885b2c2 100644
--- a/include/linux/clk.h
+++ b/include/linux/clk.h
@@ -209,7 +209,7 @@ static inline int clk_prepare(struct clk *clk)
 	return 0;
 }
 
-static inline int clk_bulk_prepare(int num_clks, struct clk_bulk_data *clks)
+static inline int __must_check clk_bulk_prepare(int num_clks, struct clk_bulk_data *clks)
 {
 	might_sleep();
 	return 0;
@@ -603,8 +603,8 @@ static inline struct clk *clk_get(struct device *dev, const char *id)
 	return NULL;
 }
 
-static inline int clk_bulk_get(struct device *dev, int num_clks,
-			       struct clk_bulk_data *clks)
+static inline int __must_check clk_bulk_get(struct device *dev, int num_clks,
+					    struct clk_bulk_data *clks)
 {
 	return 0;
 }
@@ -614,8 +614,8 @@ static inline struct clk *devm_clk_get(struct device *dev, const char *id)
 	return NULL;
 }
 
-static inline int devm_clk_bulk_get(struct device *dev, int num_clks,
-				    struct clk_bulk_data *clks)
+static inline int __must_check devm_clk_bulk_get(struct device *dev, int num_clks,
+						 struct clk_bulk_data *clks)
 {
 	return 0;
 }
@@ -645,7 +645,7 @@ static inline int clk_enable(struct clk *clk)
 	return 0;
 }
 
-static inline int clk_bulk_enable(int num_clks, struct clk_bulk_data *clks)
+static inline int __must_check clk_bulk_enable(int num_clks, struct clk_bulk_data *clks)
 {
 	return 0;
 }
@@ -719,8 +719,8 @@ static inline void clk_disable_unprepare(struct clk *clk)
 	clk_unprepare(clk);
 }
 
-static inline int clk_bulk_prepare_enable(int num_clks,
-					  struct clk_bulk_data *clks)
+static inline int __must_check clk_bulk_prepare_enable(int num_clks,
+					struct clk_bulk_data *clks)
 {
 	int ret;
 

commit 55e9b8b7b806ec3f9a8817e13596682a5981c19c
Author: Jerome Brunet <jbrunet@baylibre.com>
Date:   Fri Dec 1 22:51:59 2017 +0100

    clk: add clk_rate_exclusive api
    
    Using clock rate protection, we can now provide a way for clock consumer
    to claim exclusive control over the rate of a producer
    
    So far, rate change operations have been a "last write wins" affair. This
    changes allows drivers to explicitly protect against this behavior, if
    required.
    
    Of course, if exclusivity over a producer is claimed more than once, the
    rate is effectively locked as exclusivity cannot be preempted
    
    Tested-by: Maxime Ripard <maxime.ripard@free-electrons.com>
    Acked-by: Michael Turquette <mturquette@baylibre.com>
    Signed-off-by: Jerome Brunet <jbrunet@baylibre.com>
    Signed-off-by: Michael Turquette <mturquette@baylibre.com>
    Link: lkml.kernel.org/r/20171201215200.23523-10-jbrunet@baylibre.com

diff --git a/include/linux/clk.h b/include/linux/clk.h
index 12c96d94d1fa..4c4ef9f34db3 100644
--- a/include/linux/clk.h
+++ b/include/linux/clk.h
@@ -331,6 +331,38 @@ struct clk *devm_clk_get(struct device *dev, const char *id);
  */
 struct clk *devm_get_clk_from_child(struct device *dev,
 				    struct device_node *np, const char *con_id);
+/**
+ * clk_rate_exclusive_get - get exclusivity over the rate control of a
+ *                          producer
+ * @clk: clock source
+ *
+ * This function allows drivers to get exclusive control over the rate of a
+ * provider. It prevents any other consumer to execute, even indirectly,
+ * opereation which could alter the rate of the provider or cause glitches
+ *
+ * If exlusivity is claimed more than once on clock, even by the same driver,
+ * the rate effectively gets locked as exclusivity can't be preempted.
+ *
+ * Must not be called from within atomic context.
+ *
+ * Returns success (0) or negative errno.
+ */
+int clk_rate_exclusive_get(struct clk *clk);
+
+/**
+ * clk_rate_exclusive_put - release exclusivity over the rate control of a
+ *                          producer
+ * @clk: clock source
+ *
+ * This function allows drivers to release the exclusivity it previously got
+ * from clk_rate_exclusive_get()
+ *
+ * The caller must balance the number of clk_rate_exclusive_get() and
+ * clk_rate_exclusive_put() calls.
+ *
+ * Must not be called from within atomic context.
+ */
+void clk_rate_exclusive_put(struct clk *clk);
 
 /**
  * clk_enable - inform the system when the clock source should be running.
@@ -472,6 +504,23 @@ long clk_round_rate(struct clk *clk, unsigned long rate);
  */
 int clk_set_rate(struct clk *clk, unsigned long rate);
 
+/**
+ * clk_set_rate_exclusive- set the clock rate and claim exclusivity over
+ *                         clock source
+ * @clk: clock source
+ * @rate: desired clock rate in Hz
+ *
+ * This helper function allows drivers to atomically set the rate of a producer
+ * and claim exclusivity over the rate control of the producer.
+ *
+ * It is essentially a combination of clk_set_rate() and
+ * clk_rate_exclusite_get(). Caller must balance this call with a call to
+ * clk_rate_exclusive_put()
+ *
+ * Returns success (0) or negative errno.
+ */
+int clk_set_rate_exclusive(struct clk *clk, unsigned long rate);
+
 /**
  * clk_has_parent - check if a clock is a possible parent for another
  * @clk: clock source
@@ -583,6 +632,14 @@ static inline void clk_bulk_put(int num_clks, struct clk_bulk_data *clks) {}
 
 static inline void devm_clk_put(struct device *dev, struct clk *clk) {}
 
+
+static inline int clk_rate_exclusive_get(struct clk *clk)
+{
+	return 0;
+}
+
+static inline void clk_rate_exclusive_put(struct clk *clk) {}
+
 static inline int clk_enable(struct clk *clk)
 {
 	return 0;
@@ -609,6 +666,11 @@ static inline int clk_set_rate(struct clk *clk, unsigned long rate)
 	return 0;
 }
 
+static inline int clk_set_rate_exclusive(struct clk *clk, unsigned long rate)
+{
+	return 0;
+}
+
 static inline long clk_round_rate(struct clk *clk, unsigned long rate)
 {
 	return 0;

commit 1430858fa827e0c11921f26f429ccf22188d4a56
Merge: 2931dc7d9daf 3c48d86cc959
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Fri Jul 14 12:37:41 2017 -0700

    Merge tag 'clk-bulk-get-prep-enable' of git://git.kernel.org/pub/scm/linux/kernel/git/clk/linux
    
    Pull clk api update from Stephen Boyd:
     "Small patch to add the clk_bulk_prepare_enable() and
      clk_bulk_disable_unprepare() API to the newly introduced
      clk bulk APIs.
    
      It would be good to get this into the -rc1 so that other
      driver trees can use it for code targeted for the next
      merge window"
    
    * tag 'clk-bulk-get-prep-enable' of git://git.kernel.org/pub/scm/linux/kernel/git/clk/linux:
      clk: Provide bulk prepare_enable disable_unprepare variants

commit 3c48d86cc959309ee168fb87737a8cb3f97c5224
Author: Bjorn Andersson <bjorn.andersson@linaro.org>
Date:   Wed Jul 12 15:04:16 2017 -0700

    clk: Provide bulk prepare_enable disable_unprepare variants
    
    This extends the existing set of bulk helpers with prepare_enable and
    disable_unprepare variants.
    
    Cc: Russell King <linux@armlinux.org.uk>,
    Cc: Dong Aisheng <aisheng.dong@nxp.com>
    Signed-off-by: Bjorn Andersson <bjorn.andersson@linaro.org>
    Signed-off-by: Stephen Boyd <sboyd@codeaurora.org>

diff --git a/include/linux/clk.h b/include/linux/clk.h
index c673f0b91751..690e6a6921e1 100644
--- a/include/linux/clk.h
+++ b/include/linux/clk.h
@@ -657,6 +657,28 @@ static inline void clk_disable_unprepare(struct clk *clk)
 	clk_unprepare(clk);
 }
 
+static inline int clk_bulk_prepare_enable(int num_clks,
+					  struct clk_bulk_data *clks)
+{
+	int ret;
+
+	ret = clk_bulk_prepare(num_clks, clks);
+	if (ret)
+		return ret;
+	ret = clk_bulk_enable(num_clks, clks);
+	if (ret)
+		clk_bulk_unprepare(num_clks, clks);
+
+	return ret;
+}
+
+static inline void clk_bulk_disable_unprepare(int num_clks,
+					      struct clk_bulk_data *clks)
+{
+	clk_bulk_disable(num_clks, clks);
+	clk_bulk_unprepare(num_clks, clks);
+}
+
 #if defined(CONFIG_OF) && defined(CONFIG_COMMON_CLK)
 struct clk *of_clk_get(struct device_node *np, int index);
 struct clk *of_clk_get_by_name(struct device_node *np, const char *name);

commit 887541159c5e4a89779c021553f89df9596ddd94
Merge: c3c4cb8d6277 618aee02e2f5
Author: Stephen Boyd <sboyd@codeaurora.org>
Date:   Fri Jun 2 15:39:32 2017 -0700

    Merge branch 'clk-bulk-get' into clk-next
    
    * clk-bulk-get:
      clk: add managed version of clk_bulk_get
      clk: add clk_bulk_get accessories

commit 618aee02e2f57042f4cdeab228caf631e524b281
Author: Dong Aisheng <aisheng.dong@nxp.com>
Date:   Fri May 19 21:49:05 2017 +0800

    clk: add managed version of clk_bulk_get
    
    This patch introduces the managed version of clk_bulk_get.
    
    Cc: Michael Turquette <mturquette@baylibre.com>
    Cc: Stephen Boyd <sboyd@codeaurora.org>
    Cc: Russell King <linux@arm.linux.org.uk>
    Cc: Geert Uytterhoeven <geert@linux-m68k.org>
    Cc: "Rafael J. Wysocki" <rjw@rjwysocki.net>
    Cc: Viresh Kumar <viresh.kumar@linaro.org>
    Cc: Mark Brown <broonie@kernel.org>
    Cc: Shawn Guo <shawnguo@kernel.org>
    Cc: Fabio Estevam <fabio.estevam@nxp.com>
    Cc: Sascha Hauer <kernel@pengutronix.de>
    Cc: Anson Huang <anson.huang@nxp.com>
    Cc: Robin Gong <yibin.gong@nxp.com>
    Cc: Bai Ping <ping.bai@nxp.com>
    Cc: Leonard Crestez <leonard.crestez@nxp.com>
    Cc: Octavian Purdila <octavian.purdila@nxp.com>
    Signed-off-by: Dong Aisheng <aisheng.dong@nxp.com>
    Signed-off-by: Stephen Boyd <sboyd@codeaurora.org>

diff --git a/include/linux/clk.h b/include/linux/clk.h
index 72b0cfce9165..c673f0b91751 100644
--- a/include/linux/clk.h
+++ b/include/linux/clk.h
@@ -280,6 +280,21 @@ struct clk *clk_get(struct device *dev, const char *id);
 int __must_check clk_bulk_get(struct device *dev, int num_clks,
 			      struct clk_bulk_data *clks);
 
+/**
+ * devm_clk_bulk_get - managed get multiple clk consumers
+ * @dev: device for clock "consumer"
+ * @num_clks: the number of clk_bulk_data
+ * @clks: the clk_bulk_data table of consumer
+ *
+ * Return 0 on success, an errno on failure.
+ *
+ * This helper function allows drivers to get several clk
+ * consumers in one operation with management, the clks will
+ * automatically be freed when the device is unbound.
+ */
+int __must_check devm_clk_bulk_get(struct device *dev, int num_clks,
+				   struct clk_bulk_data *clks);
+
 /**
  * devm_clk_get - lookup and obtain a managed reference to a clock producer.
  * @dev: device for clock "consumer"
@@ -550,6 +565,12 @@ static inline struct clk *devm_clk_get(struct device *dev, const char *id)
 	return NULL;
 }
 
+static inline int devm_clk_bulk_get(struct device *dev, int num_clks,
+				    struct clk_bulk_data *clks)
+{
+	return 0;
+}
+
 static inline struct clk *devm_get_clk_from_child(struct device *dev,
 				struct device_node *np, const char *con_id)
 {

commit 266e4e9d9150e98141b85c7400f8aa3cd57a7f9b
Author: Dong Aisheng <aisheng.dong@nxp.com>
Date:   Fri May 19 21:49:04 2017 +0800

    clk: add clk_bulk_get accessories
    
    These helper function allows drivers to get several clk consumers in
    one operation. If any of the clk cannot be acquired then any clks
    that were got will be put before returning to the caller.
    
    This can relieve the driver owners' life who needs to handle many clocks,
    as well as each clock error reporting.
    
    Cc: Michael Turquette <mturquette@baylibre.com>
    Cc: Stephen Boyd <sboyd@codeaurora.org>
    Cc: Russell King <linux@arm.linux.org.uk>
    Cc: Geert Uytterhoeven <geert@linux-m68k.org>
    Cc: "Rafael J. Wysocki" <rjw@rjwysocki.net>
    Cc: Viresh Kumar <viresh.kumar@linaro.org>
    Cc: Mark Brown <broonie@kernel.org>
    Cc: Shawn Guo <shawnguo@kernel.org>
    Cc: Fabio Estevam <fabio.estevam@nxp.com>
    Cc: Sascha Hauer <kernel@pengutronix.de>
    Cc: Anson Huang <anson.huang@nxp.com>
    Cc: Robin Gong <yibin.gong@nxp.com>
    Cc: Bai Ping <ping.bai@nxp.com>
    Cc: Leonard Crestez <leonard.crestez@nxp.com>
    Cc: Octavian Purdila <octavian.purdila@nxp.com>
    Signed-off-by: Dong Aisheng <aisheng.dong@nxp.com>
    Signed-off-by: Stephen Boyd <sboyd@codeaurora.org>

diff --git a/include/linux/clk.h b/include/linux/clk.h
index 024cd07870d0..72b0cfce9165 100644
--- a/include/linux/clk.h
+++ b/include/linux/clk.h
@@ -77,6 +77,21 @@ struct clk_notifier_data {
 	unsigned long		new_rate;
 };
 
+/**
+ * struct clk_bulk_data - Data used for bulk clk operations.
+ *
+ * @id: clock consumer ID
+ * @clk: struct clk * to store the associated clock
+ *
+ * The CLK APIs provide a series of clk_bulk_() API calls as
+ * a convenience to consumers which require multiple clks.  This
+ * structure is used to manage data for these calls.
+ */
+struct clk_bulk_data {
+	const char		*id;
+	struct clk		*clk;
+};
+
 #ifdef CONFIG_COMMON_CLK
 
 /**
@@ -185,12 +200,20 @@ static inline bool clk_is_match(const struct clk *p, const struct clk *q)
  */
 #ifdef CONFIG_HAVE_CLK_PREPARE
 int clk_prepare(struct clk *clk);
+int __must_check clk_bulk_prepare(int num_clks,
+				  const struct clk_bulk_data *clks);
 #else
 static inline int clk_prepare(struct clk *clk)
 {
 	might_sleep();
 	return 0;
 }
+
+static inline int clk_bulk_prepare(int num_clks, struct clk_bulk_data *clks)
+{
+	might_sleep();
+	return 0;
+}
 #endif
 
 /**
@@ -204,11 +227,16 @@ static inline int clk_prepare(struct clk *clk)
  */
 #ifdef CONFIG_HAVE_CLK_PREPARE
 void clk_unprepare(struct clk *clk);
+void clk_bulk_unprepare(int num_clks, const struct clk_bulk_data *clks);
 #else
 static inline void clk_unprepare(struct clk *clk)
 {
 	might_sleep();
 }
+static inline void clk_bulk_unprepare(int num_clks, struct clk_bulk_data *clks)
+{
+	might_sleep();
+}
 #endif
 
 #ifdef CONFIG_HAVE_CLK
@@ -229,6 +257,29 @@ static inline void clk_unprepare(struct clk *clk)
  */
 struct clk *clk_get(struct device *dev, const char *id);
 
+/**
+ * clk_bulk_get - lookup and obtain a number of references to clock producer.
+ * @dev: device for clock "consumer"
+ * @num_clks: the number of clk_bulk_data
+ * @clks: the clk_bulk_data table of consumer
+ *
+ * This helper function allows drivers to get several clk consumers in one
+ * operation. If any of the clk cannot be acquired then any clks
+ * that were obtained will be freed before returning to the caller.
+ *
+ * Returns 0 if all clocks specified in clk_bulk_data table are obtained
+ * successfully, or valid IS_ERR() condition containing errno.
+ * The implementation uses @dev and @clk_bulk_data.id to determine the
+ * clock consumer, and thereby the clock producer.
+ * The clock returned is stored in each @clk_bulk_data.clk field.
+ *
+ * Drivers must assume that the clock source is not enabled.
+ *
+ * clk_bulk_get should not be called from within interrupt context.
+ */
+int __must_check clk_bulk_get(struct device *dev, int num_clks,
+			      struct clk_bulk_data *clks);
+
 /**
  * devm_clk_get - lookup and obtain a managed reference to a clock producer.
  * @dev: device for clock "consumer"
@@ -278,6 +329,18 @@ struct clk *devm_get_clk_from_child(struct device *dev,
  */
 int clk_enable(struct clk *clk);
 
+/**
+ * clk_bulk_enable - inform the system when the set of clks should be running.
+ * @num_clks: the number of clk_bulk_data
+ * @clks: the clk_bulk_data table of consumer
+ *
+ * May be called from atomic contexts.
+ *
+ * Returns success (0) or negative errno.
+ */
+int __must_check clk_bulk_enable(int num_clks,
+				 const struct clk_bulk_data *clks);
+
 /**
  * clk_disable - inform the system when the clock source is no longer required.
  * @clk: clock source
@@ -294,6 +357,24 @@ int clk_enable(struct clk *clk);
  */
 void clk_disable(struct clk *clk);
 
+/**
+ * clk_bulk_disable - inform the system when the set of clks is no
+ *		      longer required.
+ * @num_clks: the number of clk_bulk_data
+ * @clks: the clk_bulk_data table of consumer
+ *
+ * Inform the system that a set of clks is no longer required by
+ * a driver and may be shut down.
+ *
+ * May be called from atomic contexts.
+ *
+ * Implementation detail: if the set of clks is shared between
+ * multiple drivers, clk_bulk_enable() calls must be balanced by the
+ * same number of clk_bulk_disable() calls for the clock source to be
+ * disabled.
+ */
+void clk_bulk_disable(int num_clks, const struct clk_bulk_data *clks);
+
 /**
  * clk_get_rate - obtain the current clock rate (in Hz) for a clock source.
  *		  This is only valid once the clock source has been enabled.
@@ -313,6 +394,19 @@ unsigned long clk_get_rate(struct clk *clk);
  */
 void clk_put(struct clk *clk);
 
+/**
+ * clk_bulk_put	- "free" the clock source
+ * @num_clks: the number of clk_bulk_data
+ * @clks: the clk_bulk_data table of consumer
+ *
+ * Note: drivers must ensure that all clk_bulk_enable calls made on this
+ * clock source are balanced by clk_bulk_disable calls prior to calling
+ * this function.
+ *
+ * clk_bulk_put should not be called from within interrupt context.
+ */
+void clk_bulk_put(int num_clks, struct clk_bulk_data *clks);
+
 /**
  * devm_clk_put	- "free" a managed clock source
  * @dev: device used to acquire the clock
@@ -445,6 +539,12 @@ static inline struct clk *clk_get(struct device *dev, const char *id)
 	return NULL;
 }
 
+static inline int clk_bulk_get(struct device *dev, int num_clks,
+			       struct clk_bulk_data *clks)
+{
+	return 0;
+}
+
 static inline struct clk *devm_clk_get(struct device *dev, const char *id)
 {
 	return NULL;
@@ -458,6 +558,8 @@ static inline struct clk *devm_get_clk_from_child(struct device *dev,
 
 static inline void clk_put(struct clk *clk) {}
 
+static inline void clk_bulk_put(int num_clks, struct clk_bulk_data *clks) {}
+
 static inline void devm_clk_put(struct device *dev, struct clk *clk) {}
 
 static inline int clk_enable(struct clk *clk)
@@ -465,8 +567,17 @@ static inline int clk_enable(struct clk *clk)
 	return 0;
 }
 
+static inline int clk_bulk_enable(int num_clks, struct clk_bulk_data *clks)
+{
+	return 0;
+}
+
 static inline void clk_disable(struct clk *clk) {}
 
+
+static inline void clk_bulk_disable(int num_clks,
+				    struct clk_bulk_data *clks) {}
+
 static inline unsigned long clk_get_rate(struct clk *clk)
 {
 	return 0;

commit 428c9de583921c4b699622272c04af4e362c474c
Author: Geert Uytterhoeven <geert+renesas@glider.be>
Date:   Fri Apr 28 15:08:53 2017 +0200

    clk: Provide dummy of_clk_get_from_provider() for compile-testing
    
    When CONFIG_ON=n, dummies are provided for of_clk_get() and
    of_clk_get_by_name(), but not for of_clk_get_from_provider().
    
    Provide a dummy for the latter, to improve the ability to do
    compile-testing.  This requires removing the existing dummy in the
    Lantiq clock code.
    
    Fixes: 766e6a4ec602d0c1 ("clk: add DT clock binding support")
    Signed-off-by: Geert Uytterhoeven <geert+renesas@glider.be>
    Acked-by: Thomas Langer <thomas.langer@intel.com>
    Signed-off-by: Stephen Boyd <sboyd@codeaurora.org>

diff --git a/include/linux/clk.h b/include/linux/clk.h
index 024cd07870d0..e790d19b8ffb 100644
--- a/include/linux/clk.h
+++ b/include/linux/clk.h
@@ -539,6 +539,10 @@ static inline struct clk *of_clk_get_by_name(struct device_node *np,
 {
 	return ERR_PTR(-ENOENT);
 }
+static inline struct clk *of_clk_get_from_provider(struct of_phandle_args *clkspec)
+{
+	return ERR_PTR(-ENOENT);
+}
 #endif
 
 #endif

commit 0e056eb5530da802c07f080d6bbd43c50e799efd
Author: mchehab@s-opensource.com <mchehab@s-opensource.com>
Date:   Thu Mar 30 17:11:36 2017 -0300

    kernel-api.rst: fix a series of errors when parsing C files
    
    ./lib/string.c:134: WARNING: Inline emphasis start-string without end-string.
    ./mm/filemap.c:522: WARNING: Inline interpreted text or phrase reference start-string without end-string.
    ./mm/filemap.c:1283: ERROR: Unexpected indentation.
    ./mm/filemap.c:3003: WARNING: Inline interpreted text or phrase reference start-string without end-string.
    ./mm/vmalloc.c:1544: WARNING: Inline emphasis start-string without end-string.
    ./mm/page_alloc.c:4245: ERROR: Unexpected indentation.
    ./ipc/util.c:676: ERROR: Unexpected indentation.
    ./drivers/pci/irq.c:35: WARNING: Block quote ends without a blank line; unexpected unindent.
    ./security/security.c:109: ERROR: Unexpected indentation.
    ./security/security.c:110: WARNING: Definition list ends without a blank line; unexpected unindent.
    ./block/genhd.c:275: WARNING: Inline strong start-string without end-string.
    ./block/genhd.c:283: WARNING: Inline strong start-string without end-string.
    ./include/linux/clk.h:134: WARNING: Inline emphasis start-string without end-string.
    ./include/linux/clk.h:134: WARNING: Inline emphasis start-string without end-string.
    ./ipc/util.c:477: ERROR: Unknown target name: "s".
    
    Signed-off-by: Mauro Carvalho Chehab <mchehab@s-opensource.com>
    Acked-by: Bjorn Helgaas <bhelgaas@google.com>
    Signed-off-by: Jonathan Corbet <corbet@lwn.net>

diff --git a/include/linux/clk.h b/include/linux/clk.h
index e9d36b3e49de..024cd07870d0 100644
--- a/include/linux/clk.h
+++ b/include/linux/clk.h
@@ -132,8 +132,8 @@ int clk_get_phase(struct clk *clk);
  * @q: clk compared against p
  *
  * Returns true if the two struct clk pointers both point to the same hardware
- * clock node. Put differently, returns true if struct clk *p and struct clk *q
- * share the same struct clk_core object.
+ * clock node. Put differently, returns true if @p and @q
+ * share the same &struct clk_core object.
  *
  * Returns false otherwise. Note that two NULL clks are treated as matching.
  */

commit 71a2f11511b4d1dc8b8e326e10ec6533b534ddf1
Author: Kuninori Morimoto <kuninori.morimoto.gx@renesas.com>
Date:   Mon Dec 5 05:23:20 2016 +0000

    clk: add devm_get_clk_from_child() API
    
    Some driver is using this type of DT bindings for clock (more detail,
    see ${LINUX}/Documentation/devicetree/bindings/sound/simple-card.txt).
    
            sound_soc {
                    ...
                    cpu {
                            clocks = <&xxx>;
                            ...
                    };
                    codec {
                            clocks = <&xxx>;
                            ...
                    };
            };
    
    Current driver in this case uses of_clk_get() for each node, but there
    is no devm_of_clk_get() today.
    OTOH, the problem of having devm_of_clk_get() is that it encourages the
    use of of_clk_get() when clk_get() is more desirable.
    
    Thus, this patch adds new devm_get_clk_from_chile() which explicitly
    reads as get a clock from a child node of this device.
    By this function, we can also use this type of DT bindings
    
            sound_soc {
                    clocks = <&xxx>, <&xxx>;
                    clock-names = "cpu", "codec";
                    clock-ranges;
                    ...
                    cpu {
                            ...
                    };
                    codec {
                            ...
                    };
            };
    
    Signed-off-by: Kuninori Morimoto <kuninori.morimoto.gx@renesas.com>
    [sboyd@codeurora.org: Rename subject to clk + add API]
    Signed-off-by: Stephen Boyd <sboyd@codeaurora.org>

diff --git a/include/linux/clk.h b/include/linux/clk.h
index 123c02788807..e9d36b3e49de 100644
--- a/include/linux/clk.h
+++ b/include/linux/clk.h
@@ -17,8 +17,9 @@
 #include <linux/notifier.h>
 
 struct device;
-
 struct clk;
+struct device_node;
+struct of_phandle_args;
 
 /**
  * DOC: clk notifier callback types
@@ -248,6 +249,23 @@ struct clk *clk_get(struct device *dev, const char *id);
  */
 struct clk *devm_clk_get(struct device *dev, const char *id);
 
+/**
+ * devm_get_clk_from_child - lookup and obtain a managed reference to a
+ *			     clock producer from child node.
+ * @dev: device for clock "consumer"
+ * @np: pointer to clock consumer node
+ * @con_id: clock consumer ID
+ *
+ * This function parses the clocks, and uses them to look up the
+ * struct clk from the registered list of clock providers by using
+ * @np and @con_id
+ *
+ * The clock will automatically be freed when the device is unbound
+ * from the bus.
+ */
+struct clk *devm_get_clk_from_child(struct device *dev,
+				    struct device_node *np, const char *con_id);
+
 /**
  * clk_enable - inform the system when the clock source should be running.
  * @clk: clock source
@@ -432,6 +450,12 @@ static inline struct clk *devm_clk_get(struct device *dev, const char *id)
 	return NULL;
 }
 
+static inline struct clk *devm_get_clk_from_child(struct device *dev,
+				struct device_node *np, const char *con_id)
+{
+	return NULL;
+}
+
 static inline void clk_put(struct clk *clk) {}
 
 static inline void devm_clk_put(struct device *dev, struct clk *clk) {}
@@ -501,9 +525,6 @@ static inline void clk_disable_unprepare(struct clk *clk)
 	clk_unprepare(clk);
 }
 
-struct device_node;
-struct of_phandle_args;
-
 #if defined(CONFIG_OF) && defined(CONFIG_COMMON_CLK)
 struct clk *of_clk_get(struct device_node *np, int index);
 struct clk *of_clk_get_by_name(struct device_node *np, const char *name);

commit 1056c9bd2702ea1bb79abf9bd1e78c578589d247
Merge: 797cee982eef d22527fed2f0
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Sat Jul 30 11:20:02 2016 -0700

    Merge tag 'clk-for-linus-4.8' of git://git.kernel.org/pub/scm/linux/kernel/git/clk/linux
    
    Pull clk updates from Michael Turquette:
     "The bulk of the changes are updates and fixes to existing clk provider
      drivers, along with a pretty standard number of new drivers.  The core
      recieved a small number of updates as well.
    
      Core changes of note:
       - removed CLK_IS_ROOT flag
    
      New clk provider drivers:
       - Renesas r8a7796 clock pulse generator / module standby and
         software reset
       - Allwinner sun8i H3 clock controller unit
       - AmLogic meson8b clock controller (rewritten)
       - AmLogic gxbb clock controller
       - support for some new ICs was added by simple changes to static
         data tables for chips sharing the same family
    
      Driver updates of note:
       - the Allwinner sunxi clock driver infrastucture was rewritten to
         comform to the state of the art at drivers/clk/sunxi-ng.  The old
         implementation is still supported for backwards compatibility with
         the DT ABI"
    
    * tag 'clk-for-linus-4.8' of git://git.kernel.org/pub/scm/linux/kernel/git/clk/linux: (162 commits)
      clk: Makefile: re-sort and clean up
      Revert "clk: gxbb: expose CLKID_MMC_PCLK"
      clk: samsung: Allow modular build of the Audio Subsystem CLKCON driver
      clk: samsung: make clk-s5pv210-audss explicitly non-modular
      clk: exynos5433: remove CLK_IGNORE_UNUSED flag from SPI clocks
      clk: oxnas: Add hardware dependencies
      clk: imx7d: do not set parent of ethernet time/ref clocks
      ARM: dt: sun8i: switch the H3 to the new CCU driver
      clk: sunxi-ng: h3: Fix Kconfig symbol typo
      clk: sunxi-ng: h3: Fix audio clock divider offset
      clk: sunxi-ng: Add H3 clocks
      clk: sunxi-ng: Add N-K-M-P factor clock
      clk: sunxi-ng: Add N-K-M Factor clock
      clk: sunxi-ng: Add N-M-factor clock support
      clk: sunxi-ng: Add N-K-factor clock support
      clk: sunxi-ng: Add M-P factor clock support
      clk: sunxi-ng: Add divider
      clk: sunxi-ng: Add phase clock support
      clk: sunxi-ng: Add mux clock support
      clk: sunxi-ng: Add gate clock support
      ...

commit e81b87d22a8fed6bac24197972c9c394a2b92b5d
Author: Krzysztof Kozlowski <k.kozlowski@samsung.com>
Date:   Tue Jun 28 13:25:04 2016 +0200

    clk: Provide notifier stubs when !COMMON_CLK
    
    The clk notifier symbols are hidden by COMMON_CLK.  However on some
    platforms HAVE_CLK might be set while COMMON_CLK not which leads to
    compile test build errors like:
    
    $ make.cross ARCH=sh
       drivers/devfreq/tegra-devfreq.c: In function 'tegra_actmon_rate_notify_cb':
    >> drivers/devfreq/tegra-devfreq.c:391:16: error: 'POST_RATE_CHANGE' undeclared (first use in this function)
         if (action != POST_RATE_CHANGE)
                       ^
       drivers/devfreq/tegra-devfreq.c: In function 'tegra_devfreq_probe':
    >> drivers/devfreq/tegra-devfreq.c:654:8: error: implicit declaration of function 'clk_notifier_register' [-Werror=implicit-function-declaration]
         err = clk_notifier_register(tegra->emc_clock, &tegra->rate_change_nb);
               ^
    
    Export the macros and data type declarations outside of COMMON_CLK ifdef
    and provide stubs to fix the compile testing.
    
    Reported-by: kbuild test robot <lkp@intel.com>
    Signed-off-by: Krzysztof Kozlowski <k.kozlowski@samsung.com>
    Tested-by: Bartlomiej Zolnierkiewicz <b.zolnierkie@samsung.com>
    Signed-off-by: Stephen Boyd <sboyd@codeaurora.org>

diff --git a/include/linux/clk.h b/include/linux/clk.h
index 0df4a51e1a78..a89ba4e7af7a 100644
--- a/include/linux/clk.h
+++ b/include/linux/clk.h
@@ -20,8 +20,6 @@ struct device;
 
 struct clk;
 
-#ifdef CONFIG_COMMON_CLK
-
 /**
  * DOC: clk notifier callback types
  *
@@ -78,6 +76,8 @@ struct clk_notifier_data {
 	unsigned long		new_rate;
 };
 
+#ifdef CONFIG_COMMON_CLK
+
 /**
  * clk_notifier_register: register a clock rate-change notifier callback
  * @clk: clock whose rate we are interested in
@@ -140,6 +140,18 @@ bool clk_is_match(const struct clk *p, const struct clk *q);
 
 #else
 
+static inline int clk_notifier_register(struct clk *clk,
+					struct notifier_block *nb)
+{
+	return -ENOTSUPP;
+}
+
+static inline int clk_notifier_unregister(struct clk *clk,
+					  struct notifier_block *nb)
+{
+	return -ENOTSUPP;
+}
+
 static inline long clk_get_accuracy(struct clk *clk)
 {
 	return -ENOTSUPP;

commit b81ea968706bdb5c2f2af62c5700573a32ab310a
Author: Daniel Lezcano <daniel.lezcano@linaro.org>
Date:   Thu Jun 2 22:44:49 2016 +0200

    clk: Add missing clk_get_sys() stub
    
    When compiling with the COMPILE_TEST option set, the clps711x does not
    compile because of the clk_get_sys() noop stub missing.
    
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Reviewed-by: Michael Turquette <mturquette@baylibre.com>

diff --git a/include/linux/clk.h b/include/linux/clk.h
index 0df4a51e1a78..834179f3fa72 100644
--- a/include/linux/clk.h
+++ b/include/linux/clk.h
@@ -461,6 +461,10 @@ static inline struct clk *clk_get_parent(struct clk *clk)
 	return NULL;
 }
 
+static inline struct clk *clk_get_sys(const char *dev_id, const char *con_id)
+{
+	return NULL;
+}
 #endif
 
 /* clk_prepare_enable helps cases using clk_enable in non-atomic context. */

commit 2d34e507293102f29ee94d9a9c5b890696d42452
Author: Russell King <rmk+kernel@arm.linux.org.uk>
Date:   Mon Mar 9 11:03:00 2015 +0000

    clkdev: get rid of redundant clk_add_alias() prototype in linux/clk.h
    
    clk_add_alias() is provided by clkdev, and is not part of the clk API.
    Howver, it is prototyped in two locations: linux/clkdev.h and
    linux/clk.h.  This is a mess.  Get rid of the redundant and unnecessary
    version in linux/clk.h.
    
    Acked-by: Tony Lindgren <tony@atomide.com>
    Tested-by: Robert Jarzmik <robert.jarzmik@free.fr>
    Acked-by: Sekhar Nori <nsekhar@ti.com>
    Signed-off-by: Russell King <rmk+kernel@arm.linux.org.uk>

diff --git a/include/linux/clk.h b/include/linux/clk.h
index cafb22df8d00..0df4a51e1a78 100644
--- a/include/linux/clk.h
+++ b/include/linux/clk.h
@@ -485,19 +485,6 @@ static inline void clk_disable_unprepare(struct clk *clk)
 	clk_unprepare(clk);
 }
 
-/**
- * clk_add_alias - add a new clock alias
- * @alias: name for clock alias
- * @alias_dev_name: device name
- * @id: platform specific clock name
- * @dev: device
- *
- * Allows using generic clock names for drivers by adding a new alias.
- * Assumes clkdev, see clkdev.h for more info.
- */
-int clk_add_alias(const char *alias, const char *alias_dev_name, char *id,
-			struct device *dev);
-
 struct device_node;
 struct of_phandle_args;
 

commit d2d14a77886485310ec66e575f00ea5232ac7a14
Author: Russell King <rmk+kernel@arm.linux.org.uk>
Date:   Sat Mar 14 15:12:35 2015 +0000

    clk: update clk API documentation to clarify clk_round_rate()
    
    The idea is that rate = clk_round_rate(clk, r) is equivalent to:
    
            clk_set_rate(clk, r);
            rate = clk_get_rate(clk);
    
    except that clk_round_rate() does not change the hardware in any way.
    
    Signed-off-by: Russell King <rmk+kernel@arm.linux.org.uk>

diff --git a/include/linux/clk.h b/include/linux/clk.h
index 68c16a6bedb3..cafb22df8d00 100644
--- a/include/linux/clk.h
+++ b/include/linux/clk.h
@@ -306,6 +306,20 @@ void devm_clk_put(struct device *dev, struct clk *clk);
  * @clk: clock source
  * @rate: desired clock rate in Hz
  *
+ * This answers the question "if I were to pass @rate to clk_set_rate(),
+ * what clock rate would I end up with?" without changing the hardware
+ * in any way.  In other words:
+ *
+ *   rate = clk_round_rate(clk, r);
+ *
+ * and:
+ *
+ *   clk_set_rate(clk, r);
+ *   rate = clk_get_rate(clk);
+ *
+ * are equivalent except the former does not modify the clock hardware
+ * in any way.
+ *
  * Returns rounded clock rate in Hz, or negative errno.
  */
 long clk_round_rate(struct clk *clk, unsigned long rate);

commit 3d3801effda19b21012b5d1981e96cc277df85fd
Author: Michael Turquette <mturquette@linaro.org>
Date:   Wed Feb 25 09:11:01 2015 -0800

    clk: introduce clk_is_match
    
    Some drivers compare struct clk pointers as a means of knowing
    if the two pointers reference the same clock hardware. This behavior is
    dubious (drivers must not dereference struct clk), but did not cause any
    regressions until the per-user struct clk patch was merged. Now the test
    for matching clk's will always fail with per-user struct clk's.
    
    clk_is_match is introduced to fix the regression and prevent drivers
    from comparing the pointers manually.
    
    Fixes: 035a61c314eb ("clk: Make clk API return per-user struct clk instances")
    Cc: Russell King <linux@arm.linux.org.uk>
    Cc: Shawn Guo <shawn.guo@linaro.org>
    Cc: Tomeu Vizoso <tomeu.vizoso@collabora.com>
    Signed-off-by: Michael Turquette <mturquette@linaro.org>
    [arnd@arndb.de: Fix COMMON_CLK=N && HAS_CLK=Y config]
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>
    [sboyd@codeaurora.org: const arguments to clk_is_match() and
    remove unnecessary ternary operation]
    Signed-off-by: Stephen Boyd <sboyd@codeaurora.org>

diff --git a/include/linux/clk.h b/include/linux/clk.h
index 8381bbfbc308..68c16a6bedb3 100644
--- a/include/linux/clk.h
+++ b/include/linux/clk.h
@@ -125,6 +125,19 @@ int clk_set_phase(struct clk *clk, int degrees);
  */
 int clk_get_phase(struct clk *clk);
 
+/**
+ * clk_is_match - check if two clk's point to the same hardware clock
+ * @p: clk compared against q
+ * @q: clk compared against p
+ *
+ * Returns true if the two struct clk pointers both point to the same hardware
+ * clock node. Put differently, returns true if struct clk *p and struct clk *q
+ * share the same struct clk_core object.
+ *
+ * Returns false otherwise. Note that two NULL clks are treated as matching.
+ */
+bool clk_is_match(const struct clk *p, const struct clk *q);
+
 #else
 
 static inline long clk_get_accuracy(struct clk *clk)
@@ -142,6 +155,11 @@ static inline long clk_get_phase(struct clk *clk)
 	return -ENOTSUPP;
 }
 
+static inline bool clk_is_match(const struct clk *p, const struct clk *q)
+{
+	return p == q;
+}
+
 #endif
 
 /**

commit 1c8e600440c7f5036bd9a94526d01e9c7cb68dca
Author: Tomeu Vizoso <tomeu.vizoso@collabora.com>
Date:   Fri Jan 23 12:03:31 2015 +0100

    clk: Add rate constraints to clocks
    
    Adds a way for clock consumers to set maximum and minimum rates. This
    can be used for thermal drivers to set minimum rates, or by misc.
    drivers to set maximum rates to assure a minimum performance level.
    
    Changes the signature of the determine_rate callback by adding the
    parameters min_rate and max_rate.
    
    Signed-off-by: Tomeu Vizoso <tomeu.vizoso@collabora.com>
    Signed-off-by: Stephen Boyd <sboyd@codeaurora.org>
    [sboyd@codeaurora.org: set req_rate in __clk_init]
    Signed-off-by: Michael Turquette <mturquette@linaro.org>
    [mturquette@linaro.org: min/max rate for sun6i_ahb1_clk_determine_rate
                            migrated clk-private.h changes to clk.c]

diff --git a/include/linux/clk.h b/include/linux/clk.h
index ba7e9eda4347..8381bbfbc308 100644
--- a/include/linux/clk.h
+++ b/include/linux/clk.h
@@ -313,6 +313,34 @@ int clk_set_rate(struct clk *clk, unsigned long rate);
  */
 bool clk_has_parent(struct clk *clk, struct clk *parent);
 
+/**
+ * clk_set_rate_range - set a rate range for a clock source
+ * @clk: clock source
+ * @min: desired minimum clock rate in Hz, inclusive
+ * @max: desired maximum clock rate in Hz, inclusive
+ *
+ * Returns success (0) or negative errno.
+ */
+int clk_set_rate_range(struct clk *clk, unsigned long min, unsigned long max);
+
+/**
+ * clk_set_min_rate - set a minimum clock rate for a clock source
+ * @clk: clock source
+ * @rate: desired minimum clock rate in Hz, inclusive
+ *
+ * Returns success (0) or negative errno.
+ */
+int clk_set_min_rate(struct clk *clk, unsigned long rate);
+
+/**
+ * clk_set_max_rate - set a maximum clock rate for a clock source
+ * @clk: clock source
+ * @rate: desired maximum clock rate in Hz, inclusive
+ *
+ * Returns success (0) or negative errno.
+ */
+int clk_set_max_rate(struct clk *clk, unsigned long rate);
+
 /**
  * clk_set_parent - set the parent clock source for this clock
  * @clk: clock source

commit 4e88f3de89fbb7b5a5a0aca20376b276d26732ac
Author: Thierry Reding <treding@nvidia.com>
Date:   Wed Jan 21 17:13:00 2015 +0100

    clk: Introduce clk_has_parent()
    
    This new function is similar to clk_set_parent(), except that it doesn't
    actually change the parent. It merely checks that the given parent clock
    can be a parent for the given clock.
    
    A situation where this is useful is to check that a particular setup is
    valid before switching to it. One specific use-case for this is atomic
    modesetting in the DRM framework where setting a mode is divided into a
    check phase where a given configuration is validated before applying
    changes to the hardware.
    
    Cc: Russell King <linux@arm.linux.org.uk>
    Signed-off-by: Thierry Reding <treding@nvidia.com>
    Reviewed-by: Stephen Boyd <sboyd@codeaurora.org>
    Signed-off-by: Michael Turquette <mturquette@linaro.org>

diff --git a/include/linux/clk.h b/include/linux/clk.h
index c7f258a81761..ba7e9eda4347 100644
--- a/include/linux/clk.h
+++ b/include/linux/clk.h
@@ -301,6 +301,18 @@ long clk_round_rate(struct clk *clk, unsigned long rate);
  */
 int clk_set_rate(struct clk *clk, unsigned long rate);
 
+/**
+ * clk_has_parent - check if a clock is a possible parent for another
+ * @clk: clock source
+ * @parent: parent clock source
+ *
+ * This function can be used in drivers that need to check that a clock can be
+ * the parent of another without actually changing the parent.
+ *
+ * Returns true if @parent is a possible parent for @clk, false otherwise.
+ */
+bool clk_has_parent(struct clk *clk, struct clk *parent);
+
 /**
  * clk_set_parent - set the parent clock source for this clock
  * @clk: clock source
@@ -374,6 +386,11 @@ static inline long clk_round_rate(struct clk *clk, unsigned long rate)
 	return 0;
 }
 
+static inline bool clk_has_parent(struct clk *clk, struct clk *parent)
+{
+	return true;
+}
+
 static inline int clk_set_parent(struct clk *clk, struct clk *parent)
 {
 	return 0;

commit c0fa2373f8cfed90437d8d7b17e0b1a84009a10a
Merge: fcc3a5d27757 98d147f50eb0
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Wed Oct 15 07:05:03 2014 +0200

    Merge tag 'clk-for-linus-3.18' of git://git.linaro.org/people/mike.turquette/linux
    
    Pull clock tree updates from Mike Turquette:
     "The clk tree changes for 3.18 are dominated by clock drivers.  Mostly
      fixes and enhancements to existing drivers as well as new drivers.
      This tag contains a bit more arch code than I usually take due to some
      OMAP2+ changes.  Additionally it contains the restart notifier
      handlers which are merged as a dependency into several trees.
    
      The PXA changes are the only messy part.  Due to having a stable tree
      I had to revert one patch and follow up with one more fix near the tip
      of this tag.  Some dead code is introduced but it will soon become
      live code after 3.18-rc1 is released as the rest of the PXA family is
      converted over to the common clock framework.
    
      Another trend in this tag is that multiple vendors have started to
      push the complexity of changing their CPU frequency into the clock
      driver, whereas this used to be done in CPUfreq drivers.
    
      Changes to the clk core include a generic gpio-clock type and a
      clk_set_phase() function added to the top-level clk.h api.  Due to
      some confusion on the fbdev mailing list the kernel boot parameters
      documentation was updated to further explain the clk_ignore_unused
      parameter, which is often required by users of the simplefb driver.
    
      Finally some fixes to the locking around the clock debugfs stuff was
      done to prevent deadlocks when interacting with other subsystems."
    
    * tag 'clk-for-linus-3.18' of git://git.linaro.org/people/mike.turquette/linux: (99 commits)
      clk: pxa clocks build system fix
      Revert "arm: pxa: Transition pxa27x to clk framework"
      clk: samsung: register restart handlers for s3c2412 and s3c2443
      clk: rockchip: add restart handler
      clk: rockchip: rk3288: i2s_frac adds flag to set parent's rate
      doc/kernel-parameters.txt: clarify clk_ignore_unused
      arm: pxa: Transition pxa27x to clk framework
      dts: add devicetree bindings for pxa27x clocks
      clk: add pxa27x clock drivers
      arm: pxa: add clock pll selection bits
      clk: dts: document pxa clock binding
      clk: add pxa clocks infrastructure
      clk: gpio-gate: Ensure gpiod_ APIs are prototyped
      clk: ti: dra7-atl-clock: Mark the device as pm_runtime_irq_safe
      clk: ti: LLVMLinux: Move __init outside of type definition
      clk: ti: consider the fact that of_clk_get() might return an error
      clk: ti: dra7-atl-clock: fix a memory leak
      clk: ti: change clock init to use generic of_clk_init
      clk: hix5hd2: add I2C clocks
      clk: hix5hd2: add watchdog0 clocks
      ...

commit e59c5371fb9d8268d1c043172e88cecab9dc934f
Author: Mike Turquette <mturquette@linaro.org>
Date:   Tue Feb 18 21:21:25 2014 -0800

    clk: introduce clk_set_phase function & callback
    
    A common operation for a clock signal generator is to shift the phase of
    that signal. This patch introduces a new function to the clk.h API to
    dynamically adjust the phase of a clock signal. Additionally this patch
    introduces support for the new function in the common clock framework
    via the .set_phase call back in struct clk_ops.
    
    Signed-off-by: Mike Turquette <mturquette@linaro.org>
    Signed-off-by: Maxime Ripard <maxime.ripard@free-electrons.com>
    Reviewed-by: Heiko Stuebner <heiko@sntech.de>
    Acked-by: Hans de Goede <hdegoede@redhat.com>

diff --git a/include/linux/clk.h b/include/linux/clk.h
index fb5e097d8f72..38bdedd3e389 100644
--- a/include/linux/clk.h
+++ b/include/linux/clk.h
@@ -106,6 +106,25 @@ int clk_notifier_unregister(struct clk *clk, struct notifier_block *nb);
  */
 long clk_get_accuracy(struct clk *clk);
 
+/**
+ * clk_set_phase - adjust the phase shift of a clock signal
+ * @clk: clock signal source
+ * @degrees: number of degrees the signal is shifted
+ *
+ * Shifts the phase of a clock signal by the specified degrees. Returns 0 on
+ * success, -EERROR otherwise.
+ */
+int clk_set_phase(struct clk *clk, int degrees);
+
+/**
+ * clk_get_phase - return the phase shift of a clock signal
+ * @clk: clock signal source
+ *
+ * Returns the phase shift of a clock node in degrees, otherwise returns
+ * -EERROR.
+ */
+int clk_get_phase(struct clk *clk);
+
 #else
 
 static inline long clk_get_accuracy(struct clk *clk)
@@ -113,6 +132,16 @@ static inline long clk_get_accuracy(struct clk *clk)
 	return -ENOTSUPP;
 }
 
+static inline long clk_set_phase(struct clk *clk, int phase)
+{
+	return -ENOTSUPP;
+}
+
+static inline long clk_get_phase(struct clk *clk)
+{
+	return -ENOTSUPP;
+}
+
 #endif
 
 /**

commit da3dae54e4ff09886b9a19224c8d9556bb2ba096
Author: Masanari Iida <standby24x7@gmail.com>
Date:   Tue Sep 9 01:27:23 2014 +0900

    Documentation: Docbook: Fix generated DocBook/kernel-api.xml
    
    This patch fix spelling typo found in DocBook/kernel-api.xml.
    It is because the file is generated from the source comments,
    I have to fix the comments in source codes.
    
    Signed-off-by: Masanari Iida <standby24x7@gmail.com>
    Acked-by: Randy Dunlap <rdunlap@infradead.org>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>

diff --git a/include/linux/clk.h b/include/linux/clk.h
index fb5e097d8f72..afb44bfaf8d1 100644
--- a/include/linux/clk.h
+++ b/include/linux/clk.h
@@ -238,7 +238,7 @@ void clk_put(struct clk *clk);
 
 /**
  * devm_clk_put	- "free" a managed clock source
- * @dev: device used to acuqire the clock
+ * @dev: device used to acquire the clock
  * @clk: clock source acquired with devm_clk_get()
  *
  * Note: drivers must ensure that all clk_enable calls made on this

commit 86bcfa2e87c42b8af77188e7a939e952199d4da1
Author: Mike Turquette <mturquette@linaro.org>
Date:   Mon Feb 24 16:08:41 2014 -0800

    clk: add pr_debug & kerneldoc around clk notifiers
    
    Both the pr_err and the additional kerneldoc aim to help when debugging
    errors thrown from within a clock rate-change notifier callback.
    
    Reported-by: Sören Brinkmann <soren.brinkmann@xilinx.com>
    Acked-by: Sören Brinkmann <soren.brinkmann@xilinx.com>
    Signed-off-by: Mike Turquette <mturquette@linaro.org>

diff --git a/include/linux/clk.h b/include/linux/clk.h
index 0dd91148165e..fb5e097d8f72 100644
--- a/include/linux/clk.h
+++ b/include/linux/clk.h
@@ -78,8 +78,22 @@ struct clk_notifier_data {
 	unsigned long		new_rate;
 };
 
+/**
+ * clk_notifier_register: register a clock rate-change notifier callback
+ * @clk: clock whose rate we are interested in
+ * @nb: notifier block with callback function pointer
+ *
+ * ProTip: debugging across notifier chains can be frustrating. Make sure that
+ * your notifier callback function prints a nice big warning in case of
+ * failure.
+ */
 int clk_notifier_register(struct clk *clk, struct notifier_block *nb);
 
+/**
+ * clk_notifier_unregister: unregister a clock rate-change notifier callback
+ * @clk: clock whose rate we are no longer interested in
+ * @nb: notifier block which will be unregistered
+ */
 int clk_notifier_unregister(struct clk *clk, struct notifier_block *nb);
 
 /**

commit 5279fc402ae59361a224d641d5823b21b4206232
Author: Boris BREZILLON <b.brezillon@overkiz.com>
Date:   Sat Dec 21 10:34:47 2013 +0100

    clk: add clk accuracy retrieval support
    
    The clock accuracy is expressed in ppb (parts per billion) and represents
    the possible clock drift.
    Say you have a clock (e.g. an oscillator) which provides a fixed clock of
    20MHz with an accuracy of +- 20Hz. This accuracy expressed in ppb is
    20Hz/20MHz = 1000 ppb (or 1 ppm).
    
    Clock users may need the clock accuracy information in order to choose
    the best clock (the one with the best accuracy) across several available
    clocks.
    
    This patch adds clk accuracy retrieval support for common clk framework by
    means of a new function called clk_get_accuracy.
    This function returns the given clock accuracy expressed in ppb.
    
    In order to get the clock accuracy, this implementation adds one callback
    called recalc_accuracy to the clk_ops structure.
    This callback is given the parent clock accuracy (if the clock is not a
    root clock) and should recalculate the given clock accuracy.
    
    This callback is optional and may be implemented if the clock is not
    a perfect clock (accuracy != 0 ppb).
    
    Signed-off-by: Boris BREZILLON <b.brezillon@overkiz.com>
    Signed-off-by: Mike Turquette <mturquette@linaro.org>

diff --git a/include/linux/clk.h b/include/linux/clk.h
index 9a6d04524b1a..0dd91148165e 100644
--- a/include/linux/clk.h
+++ b/include/linux/clk.h
@@ -82,6 +82,23 @@ int clk_notifier_register(struct clk *clk, struct notifier_block *nb);
 
 int clk_notifier_unregister(struct clk *clk, struct notifier_block *nb);
 
+/**
+ * clk_get_accuracy - obtain the clock accuracy in ppb (parts per billion)
+ *		      for a clock source.
+ * @clk: clock source
+ *
+ * This gets the clock source accuracy expressed in ppb.
+ * A perfect clock returns 0.
+ */
+long clk_get_accuracy(struct clk *clk);
+
+#else
+
+static inline long clk_get_accuracy(struct clk *clk)
+{
+	return -ENOTSUPP;
+}
+
 #endif
 
 /**

commit fb72a0590b770f7da6a02bde6b8a147a3d9f6168
Author: Soren Brinkmann <soren.brinkmann@xilinx.com>
Date:   Wed Apr 3 12:17:12 2013 -0700

    clk: Properly handle notifier return values
    
    Notifiers may return NOTIFY_(OK|DONE|STOP|BAD). The CCF uses an
    inconsistent mix of checking against NOTIFY_STOP or NOTIFY_BAD.
    This inconsistency leaves errors undetected in some cases:
    clk_set_parent() calls __clk_speculate_rates(), which stops when it
    hits a NOTIFIER_BAD (STOP is ignored), and passes this value back to the
    caller.
    clk_set_parent() compares this return value against NOTIFY_STOP only,
    ignoring NOTIFY_BAD returns.
    
    Use NOTIFY_STOP_MASK to detect a negative notifier return value and
    document all four return value options.
    
    Signed-off-by: Soren Brinkmann <soren.brinkmann@xilinx.com>
    Signed-off-by: Mike Turquette <mturquette@linaro.org>

diff --git a/include/linux/clk.h b/include/linux/clk.h
index b3ac22d0fc1f..9a6d04524b1a 100644
--- a/include/linux/clk.h
+++ b/include/linux/clk.h
@@ -28,16 +28,16 @@ struct clk;
  * PRE_RATE_CHANGE - called immediately before the clk rate is changed,
  *     to indicate that the rate change will proceed.  Drivers must
  *     immediately terminate any operations that will be affected by the
- *     rate change.  Callbacks may either return NOTIFY_DONE or
- *     NOTIFY_STOP.
+ *     rate change.  Callbacks may either return NOTIFY_DONE, NOTIFY_OK,
+ *     NOTIFY_STOP or NOTIFY_BAD.
  *
  * ABORT_RATE_CHANGE: called if the rate change failed for some reason
  *     after PRE_RATE_CHANGE.  In this case, all registered notifiers on
  *     the clk will be called with ABORT_RATE_CHANGE. Callbacks must
- *     always return NOTIFY_DONE.
+ *     always return NOTIFY_DONE or NOTIFY_OK.
  *
  * POST_RATE_CHANGE - called after the clk rate change has successfully
- *     completed.  Callbacks must always return NOTIFY_DONE.
+ *     completed.  Callbacks must always return NOTIFY_DONE or NOTIFY_OK.
  *
  */
 #define PRE_RATE_CHANGE			BIT(0)

commit 93abe8e4b13ae9a0428ce940a8a03ac72a7626f1
Author: Viresh Kumar <viresh.kumar@st.com>
Date:   Mon Jul 30 14:39:27 2012 -0700

    clk: add non CONFIG_HAVE_CLK routines
    
    Many drivers are shared between architectures that may or may not have
    HAVE_CLK selected for them.  To remove compilation errors for them we
    enclose clk_*() calls in these drivers within #ifdef CONFIG_HAVE_CLK,
    #endif.
    
    This patch removes the need of these CONFIG_HAVE_CLK statements, by
    introducing dummy routines when HAVE_CLK is not selected by platforms.
    So, definition of these routines will always be available.  These calls
    will return error for platforms that don't select HAVE_CLK.
    
    Signed-off-by: Viresh Kumar <viresh.kumar@st.com>
    Cc: Wolfram Sang <w.sang@pengutronix.de>
    Cc: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Cc: Jeff Garzik <jgarzik@redhat.com>
    Cc: Andrew Lunn <andrew@lunn.ch>
    Cc: Bhupesh Sharma <bhupesh.sharma@st.com>
    Cc: Giuseppe Cavallaro <peppe.cavallaro@st.com>
    Cc: Russell King <rmk@arm.linux.org.uk>
    Cc: Mike Turquette <mturquette@linaro.org>
    Cc: Sergei Shtylyov <sshtylyov@ru.mvista.com>
    Cc: viresh kumar <viresh.linux@gmail.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

diff --git a/include/linux/clk.h b/include/linux/clk.h
index 2fd6a4234531..b3ac22d0fc1f 100644
--- a/include/linux/clk.h
+++ b/include/linux/clk.h
@@ -84,6 +84,43 @@ int clk_notifier_unregister(struct clk *clk, struct notifier_block *nb);
 
 #endif
 
+/**
+ * clk_prepare - prepare a clock source
+ * @clk: clock source
+ *
+ * This prepares the clock source for use.
+ *
+ * Must not be called from within atomic context.
+ */
+#ifdef CONFIG_HAVE_CLK_PREPARE
+int clk_prepare(struct clk *clk);
+#else
+static inline int clk_prepare(struct clk *clk)
+{
+	might_sleep();
+	return 0;
+}
+#endif
+
+/**
+ * clk_unprepare - undo preparation of a clock source
+ * @clk: clock source
+ *
+ * This undoes a previously prepared clock.  The caller must balance
+ * the number of prepare and unprepare calls.
+ *
+ * Must not be called from within atomic context.
+ */
+#ifdef CONFIG_HAVE_CLK_PREPARE
+void clk_unprepare(struct clk *clk);
+#else
+static inline void clk_unprepare(struct clk *clk)
+{
+	might_sleep();
+}
+#endif
+
+#ifdef CONFIG_HAVE_CLK
 /**
  * clk_get - lookup and obtain a reference to a clock producer.
  * @dev: device for clock "consumer"
@@ -121,24 +158,6 @@ struct clk *clk_get(struct device *dev, const char *id);
  */
 struct clk *devm_clk_get(struct device *dev, const char *id);
 
-/**
- * clk_prepare - prepare a clock source
- * @clk: clock source
- *
- * This prepares the clock source for use.
- *
- * Must not be called from within atomic context.
- */
-#ifdef CONFIG_HAVE_CLK_PREPARE
-int clk_prepare(struct clk *clk);
-#else
-static inline int clk_prepare(struct clk *clk)
-{
-	might_sleep();
-	return 0;
-}
-#endif
-
 /**
  * clk_enable - inform the system when the clock source should be running.
  * @clk: clock source
@@ -167,47 +186,6 @@ int clk_enable(struct clk *clk);
  */
 void clk_disable(struct clk *clk);
 
-
-/**
- * clk_unprepare - undo preparation of a clock source
- * @clk: clock source
- *
- * This undoes a previously prepared clock.  The caller must balance
- * the number of prepare and unprepare calls.
- *
- * Must not be called from within atomic context.
- */
-#ifdef CONFIG_HAVE_CLK_PREPARE
-void clk_unprepare(struct clk *clk);
-#else
-static inline void clk_unprepare(struct clk *clk)
-{
-	might_sleep();
-}
-#endif
-
-/* clk_prepare_enable helps cases using clk_enable in non-atomic context. */
-static inline int clk_prepare_enable(struct clk *clk)
-{
-	int ret;
-
-	ret = clk_prepare(clk);
-	if (ret)
-		return ret;
-	ret = clk_enable(clk);
-	if (ret)
-		clk_unprepare(clk);
-
-	return ret;
-}
-
-/* clk_disable_unprepare helps cases using clk_disable in non-atomic context. */
-static inline void clk_disable_unprepare(struct clk *clk)
-{
-	clk_disable(clk);
-	clk_unprepare(clk);
-}
-
 /**
  * clk_get_rate - obtain the current clock rate (in Hz) for a clock source.
  *		  This is only valid once the clock source has been enabled.
@@ -298,6 +276,78 @@ struct clk *clk_get_parent(struct clk *clk);
  */
 struct clk *clk_get_sys(const char *dev_id, const char *con_id);
 
+#else /* !CONFIG_HAVE_CLK */
+
+static inline struct clk *clk_get(struct device *dev, const char *id)
+{
+	return NULL;
+}
+
+static inline struct clk *devm_clk_get(struct device *dev, const char *id)
+{
+	return NULL;
+}
+
+static inline void clk_put(struct clk *clk) {}
+
+static inline void devm_clk_put(struct device *dev, struct clk *clk) {}
+
+static inline int clk_enable(struct clk *clk)
+{
+	return 0;
+}
+
+static inline void clk_disable(struct clk *clk) {}
+
+static inline unsigned long clk_get_rate(struct clk *clk)
+{
+	return 0;
+}
+
+static inline int clk_set_rate(struct clk *clk, unsigned long rate)
+{
+	return 0;
+}
+
+static inline long clk_round_rate(struct clk *clk, unsigned long rate)
+{
+	return 0;
+}
+
+static inline int clk_set_parent(struct clk *clk, struct clk *parent)
+{
+	return 0;
+}
+
+static inline struct clk *clk_get_parent(struct clk *clk)
+{
+	return NULL;
+}
+
+#endif
+
+/* clk_prepare_enable helps cases using clk_enable in non-atomic context. */
+static inline int clk_prepare_enable(struct clk *clk)
+{
+	int ret;
+
+	ret = clk_prepare(clk);
+	if (ret)
+		return ret;
+	ret = clk_enable(clk);
+	if (ret)
+		clk_unprepare(clk);
+
+	return ret;
+}
+
+/* clk_disable_unprepare helps cases using clk_disable in non-atomic context. */
+static inline void clk_disable_unprepare(struct clk *clk)
+{
+	clk_disable(clk);
+	clk_unprepare(clk);
+}
+
 /**
  * clk_add_alias - add a new clock alias
  * @alias: name for clock alias

commit 9161c3b796a2841a9a7be3d9c9dd121269ce90e8
Merge: 97027da6adf2 137f8a7213d8
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Tue Jul 24 16:40:57 2012 -0700

    Merge tag 'clk-for-linus' of git://git.linaro.org/people/mturquette/linux
    
    Pull common clk framework changes from Michael Turquette:
     "This includes a small number of core framework improvments, platform
      ports and new DT bindings."
    
    Fix up trivial conflicts in drivers/clk/Makefile
    
    * tag 'clk-for-linus' of git://git.linaro.org/people/mturquette/linux: (21 commits)
      clk: fix compile for OF && !COMMON_CLK
      clk: fix clk_get on of_clk_get_by_name return check
      clk: mxs: clk_register_clkdev mx28 usb clocks
      clk: add highbank clock support
      dt: add clock binding doc to primecell bindings
      clk: add DT fixed-clock binding support
      clk: add DT clock binding support
      ARM: integrator: convert to common clock
      clk: add versatile ICST307 driver
      ARM: integrator: put symbolic bus names on devices
      ARM: u300: convert to common clock
      clk: cache parent clocks only for muxes
      clk: wm831x: Add initial WM831x clock driver
      clk: Constify struct clk_init_data
      clk: Add CLK_IS_BASIC flag to identify basic clocks
      clk: Add support for rate table based dividers
      clk: Add support for power of two type dividers
      clk: mxs: imx28: decrease the frequency of ref_io1 for SSP2 and SSP3
      clk: mxs: add clkdev lookup for pwm
      clk: mxs: Fix the GPMI clock name
      ...

commit a58b3a4aba2fd5c445d9deccc73192bff48b591d
Author: Jan-Simon Möller <jansimon.moeller@gmx.de>
Date:   Mon Jul 23 20:48:56 2012 +0200

    Fix typo in include/linux/clk.h .
    
    Signed-off-by: Jan-Simon Möller <jansimon.moeller@gmx.de>
    Cc: Russell King <linux@arm.linux.org.uk>
    Cc: linux-kernel@vger.kernel.org
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>

diff --git a/include/linux/clk.h b/include/linux/clk.h
index ad5c43e8ae8a..f6fb40c8bf97 100644
--- a/include/linux/clk.h
+++ b/include/linux/clk.h
@@ -86,7 +86,7 @@ int clk_notifier_unregister(struct clk *clk, struct notifier_block *nb);
 /**
  * clk_get - lookup and obtain a reference to a clock producer.
  * @dev: device for clock "consumer"
- * @id: clock comsumer ID
+ * @id: clock consumer ID
  *
  * Returns a struct clk corresponding to the clock producer, or
  * valid IS_ERR() condition containing errno.  The implementation
@@ -103,7 +103,7 @@ struct clk *clk_get(struct device *dev, const char *id);
 /**
  * devm_clk_get - lookup and obtain a managed reference to a clock producer.
  * @dev: device for clock "consumer"
- * @id: clock comsumer ID
+ * @id: clock consumer ID
  *
  * Returns a struct clk corresponding to the clock producer, or
  * valid IS_ERR() condition containing errno.  The implementation

commit 137f8a7213d80c1388ca48280c1ef0856b6fec30
Author: Rob Herring <rob.herring@calxeda.com>
Date:   Wed Jul 18 11:52:23 2012 +0800

    clk: fix compile for OF && !COMMON_CLK
    
    With commit 766e6a4ec602d0c107 (clk: add DT clock binding support),
    compiling with OF && !COMMON_CLK is broken.
    
    Reported-by: Alexandre Pereira da Silva <aletes.xgr@gmail.com>
    Reported-by: Prashant Gaikwad <pgaikwad@nvidia.com>
    Signed-off-by: Rob Herring <rob.herring@calxeda.com>
    Signed-off-by: Mike Turquette <mturquette@linaro.org>

diff --git a/include/linux/clk.h b/include/linux/clk.h
index 071e24083dc8..6587b5280583 100644
--- a/include/linux/clk.h
+++ b/include/linux/clk.h
@@ -314,7 +314,7 @@ int clk_add_alias(const char *alias, const char *alias_dev_name, char *id,
 struct device_node;
 struct of_phandle_args;
 
-#ifdef CONFIG_OF
+#if defined(CONFIG_OF) && defined(CONFIG_COMMON_CLK)
 struct clk *of_clk_get(struct device_node *np, int index);
 struct clk *of_clk_get_by_name(struct device_node *np, const char *name);
 struct clk *of_clk_get_from_provider(struct of_phandle_args *clkspec);

commit 9f1612d351a8e57d3d694e828641d3e4eeb224f8
Author: Shawn Guo <shawn.guo@linaro.org>
Date:   Wed Jul 18 11:52:22 2012 +0800

    clk: fix clk_get on of_clk_get_by_name return check
    
    The commit 766e6a4 (clk: add DT clock binding support) plugs device
    tree clk lookup of_clk_get_by_name into clk_get, and fall on non-DT
    lookup clk_get_sys if DT lookup fails.
    
    The return check on of_clk_get_by_name takes (clk != NULL) as a
    successful DT lookup.  But it's not the case.  For any system that
    does not define clk lookup in device tree, ERR_PTR(-ENOENT) will be
    returned, and consequently, all the client drivers calling clk_get
    in their probe functions will fail to probe with error code -ENOENT
    returned.
    
    Fix the issue by checking of_clk_get_by_name return with !IS_ERR(clk),
    and update of_clk_get and of_clk_get_by_name for !CONFIG_OF build
    correspondingly.
    
    Signed-off-by: Shawn Guo <shawn.guo@linaro.org>
    Acked-by: Rob Herring <rob.herring@calxeda.com>
    Tested-by: Marek Vasut <marex@denx.de>
    Tested-by: Lauri Hintsala <lauri.hintsala@bluegiga.com>
    Signed-off-by: Mike Turquette <mturquette@linaro.org>

diff --git a/include/linux/clk.h b/include/linux/clk.h
index 8b70342e7e0b..071e24083dc8 100644
--- a/include/linux/clk.h
+++ b/include/linux/clk.h
@@ -12,6 +12,7 @@
 #ifndef __LINUX_CLK_H
 #define __LINUX_CLK_H
 
+#include <linux/err.h>
 #include <linux/kernel.h>
 #include <linux/notifier.h>
 
@@ -320,12 +321,12 @@ struct clk *of_clk_get_from_provider(struct of_phandle_args *clkspec);
 #else
 static inline struct clk *of_clk_get(struct device_node *np, int index)
 {
-	return NULL;
+	return ERR_PTR(-ENOENT);
 }
 static inline struct clk *of_clk_get_by_name(struct device_node *np,
 					     const char *name)
 {
-	return NULL;
+	return ERR_PTR(-ENOENT);
 }
 #endif
 

commit 766e6a4ec602d0c107553b91b3434fe9c03474f4
Author: Grant Likely <grant.likely@secretlab.ca>
Date:   Mon Apr 9 14:50:06 2012 -0500

    clk: add DT clock binding support
    
    Based on work 1st by Ben Herrenschmidt and Jeremy Kerr, then by Grant
    Likely, this patch adds support to clk_get to allow drivers to retrieve
    clock data from the device tree.
    
    Platforms scan for clocks in DT with of_clk_init and a match table, and
    the register a provider through of_clk_add_provider. The provider's
    clk_src_get function will be called when a device references the
    provider's OF node for a clock reference.
    
    v6 (Rob Herring):
        - Return error values instead of NULL to match clock framework
          expectations
    
    v5 (Rob Herring):
        - Move from drivers/of into common clock subsystem
        - Squashed "dt/clock: add a simple provider get function" and
          "dt/clock: add function to get parent clock name"
        - Rebase to 3.4-rc1
        - Drop CONFIG_OF_CLOCK and just use CONFIG_OF
        - Add missing EXPORT_SYMBOL to various functions
        - s/clock-output-name/clock-output-names/
        - Define that fixed-clock binding is a single output
    
    v4 (Rob Herring):
        - Rework for common clk subsystem
        - Add of_clk_get_parent_name function
    
    v3: - Clarified documentation
    
    v2: - fixed errant ';' causing compile error
        - Editorial fixes from Shawn Guo
        - merged in adding lookup to clkdev
        - changed property names to match established convention. After
          working with the binding a bit it really made more sense to follow the
          lead of 'reg', 'gpios' and 'interrupts' by making the input simply
          'clocks' & 'clock-names' instead of 'clock-input-*', and to only use
          clock-output* for the producer nodes. (Sorry Shawn, this will mean
          you need to change some code, but it should be trivial)
        - Add ability to inherit clocks from parent nodes by using an empty
          'clock-ranges' property.  Useful for busses.  I could use some feedback
          on the new property name, 'clock-ranges' doesn't feel right to me.
    
    Signed-off-by: Grant Likely <grant.likely@secretlab.ca>
    Signed-off-by: Rob Herring <rob.herring@calxeda.com>
    Reviewed-by: Shawn Guo <shawn.guo@freescale.com>
    Cc: Sascha Hauer <kernel@pengutronix.de>
    Signed-off-by: Mike Turquette <mturquette@linaro.org>

diff --git a/include/linux/clk.h b/include/linux/clk.h
index ad5c43e8ae8a..8b70342e7e0b 100644
--- a/include/linux/clk.h
+++ b/include/linux/clk.h
@@ -310,4 +310,23 @@ struct clk *clk_get_sys(const char *dev_id, const char *con_id);
 int clk_add_alias(const char *alias, const char *alias_dev_name, char *id,
 			struct device *dev);
 
+struct device_node;
+struct of_phandle_args;
+
+#ifdef CONFIG_OF
+struct clk *of_clk_get(struct device_node *np, int index);
+struct clk *of_clk_get_by_name(struct device_node *np, const char *name);
+struct clk *of_clk_get_from_provider(struct of_phandle_args *clkspec);
+#else
+static inline struct clk *of_clk_get(struct device_node *np, int index)
+{
+	return NULL;
+}
+static inline struct clk *of_clk_get_by_name(struct device_node *np,
+					     const char *name)
+{
+	return NULL;
+}
+#endif
+
 #endif

commit e12ff34402bd3a6cbeab0423012066874bb10f4b
Merge: bef945965884 e9d7f4065408
Author: Arnd Bergmann <arnd@arndb.de>
Date:   Fri May 11 17:13:00 2012 +0200

    Merge branch 'depends/rmk/clkdev' into next/clock
    
    * depends/rmk/clkdev:
      CLKDEV: provide helpers for common clock framework
      ARM: 7392/1: CLKDEV: Optimize clk_find()
      ARM: 7376/1: clkdev: Implement managed clk_get()

commit 8b7730ddff5affd623bed2affa0d0fa47ebbad3b
Author: Rob Herring <rob.herring@calxeda.com>
Date:   Mon Apr 9 15:24:59 2012 -0500

    clk: remove trailing whitespace from clk.h
    
    Remove trailing whitespace from 2 lines.
    
    Signed-off-by: Rob Herring <rob.herring@calxeda.com>

diff --git a/include/linux/clk.h b/include/linux/clk.h
index c9547d99e52c..0e078bdec09f 100644
--- a/include/linux/clk.h
+++ b/include/linux/clk.h
@@ -220,7 +220,7 @@ void clk_put(struct clk *clk);
  * Returns rounded clock rate in Hz, or negative errno.
  */
 long clk_round_rate(struct clk *clk, unsigned long rate);
- 
+
 /**
  * clk_set_rate - set the clock rate for a clock source
  * @clk: clock source
@@ -229,7 +229,7 @@ long clk_round_rate(struct clk *clk, unsigned long rate);
  * Returns success (0) or negative errno.
  */
 int clk_set_rate(struct clk *clk, unsigned long rate);
- 
+
 /**
  * clk_set_parent - set the parent clock source for this clock
  * @clk: clock source

commit 7e87aed965fa7a642fc299af96d370dad7b5b814
Author: Mark Brown <broonie@opensource.wolfsonmicro.com>
Date:   Sun Apr 1 15:31:23 2012 +0100

    clk: Remove comment for end of CONFIG_COMMON_CLK section
    
    The comment is inaccurate (it actually ends the CONFIG_COMMON_CLK
    section, there's no else) and given that we've just got a single level
    of ifdef isn't really needed anyway.
    
    Signed-off-by: Mark Brown <broonie@opensource.wolfsonmicro.com>
    Signed-off-by: Mike Turquette <mturquette@linaro.org>

diff --git a/include/linux/clk.h b/include/linux/clk.h
index b0252726df61..c9547d99e52c 100644
--- a/include/linux/clk.h
+++ b/include/linux/clk.h
@@ -81,7 +81,7 @@ int clk_notifier_register(struct clk *clk, struct notifier_block *nb);
 
 int clk_notifier_unregister(struct clk *clk, struct notifier_block *nb);
 
-#endif /* !CONFIG_COMMON_CLK */
+#endif
 
 /**
  * clk_get - lookup and obtain a reference to a clock producer.

commit a8a97db984bdc5e89d42e41891543d2daaf314cb
Author: Mark Brown <broonie@sirena.org.uk>
Date:   Thu Apr 5 11:42:09 2012 +0100

    ARM: 7376/1: clkdev: Implement managed clk_get()
    
    Allow clk API users to simplify their cleanup paths by providing a
    managed version of clk_get() and clk_put().
    
    Signed-off-by: Mark Brown <broonie@opensource.wolfsonmicro.com>
    Signed-off-by: Russell King <rmk+kernel@arm.linux.org.uk>

diff --git a/include/linux/clk.h b/include/linux/clk.h
index b0252726df61..70cf722ac3af 100644
--- a/include/linux/clk.h
+++ b/include/linux/clk.h
@@ -100,6 +100,26 @@ int clk_notifier_unregister(struct clk *clk, struct notifier_block *nb);
  */
 struct clk *clk_get(struct device *dev, const char *id);
 
+/**
+ * devm_clk_get - lookup and obtain a managed reference to a clock producer.
+ * @dev: device for clock "consumer"
+ * @id: clock comsumer ID
+ *
+ * Returns a struct clk corresponding to the clock producer, or
+ * valid IS_ERR() condition containing errno.  The implementation
+ * uses @dev and @id to determine the clock consumer, and thereby
+ * the clock producer.  (IOW, @id may be identical strings, but
+ * clk_get may return different clock producers depending on @dev.)
+ *
+ * Drivers must assume that the clock source is not enabled.
+ *
+ * devm_clk_get should not be called from within interrupt context.
+ *
+ * The clock will automatically be freed when the device is unbound
+ * from the bus.
+ */
+struct clk *devm_clk_get(struct device *dev, const char *id);
+
 /**
  * clk_prepare - prepare a clock source
  * @clk: clock source
@@ -206,6 +226,18 @@ unsigned long clk_get_rate(struct clk *clk);
  */
 void clk_put(struct clk *clk);
 
+/**
+ * devm_clk_put	- "free" a managed clock source
+ * @dev: device used to acuqire the clock
+ * @clk: clock source acquired with devm_clk_get()
+ *
+ * Note: drivers must ensure that all clk_enable calls made on this
+ * clock source are balanced by clk_disable calls prior to calling
+ * this function.
+ *
+ * clk_put should not be called from within interrupt context.
+ */
+void devm_clk_put(struct device *dev, struct clk *clk);
 
 /*
  * The remaining APIs are optional for machine class support.

commit b2476490ef11134b65544d8f062cff96c53e941b
Author: Mike Turquette <mturquette@linaro.org>
Date:   Thu Mar 15 23:11:19 2012 -0700

    clk: introduce the common clock framework
    
    The common clock framework defines a common struct clk useful across
    most platforms as well as an implementation of the clk api that drivers
    can use safely for managing clocks.
    
    The net result is consolidation of many different struct clk definitions
    and platform-specific clock framework implementations.
    
    This patch introduces the common struct clk, struct clk_ops and an
    implementation of the well-known clock api in include/clk/clk.h.
    Platforms may define their own hardware-specific clock structure and
    their own clock operation callbacks, so long as it wraps an instance of
    struct clk_hw.
    
    See Documentation/clk.txt for more details.
    
    This patch is based on the work of Jeremy Kerr, which in turn was based
    on the work of Ben Herrenschmidt.
    
    Signed-off-by: Mike Turquette <mturquette@linaro.org>
    Signed-off-by: Mike Turquette <mturquette@ti.com>
    Reviewed-by: Thomas Gleixner <tglx@linutronix.de>
    Tested-by: Andrew Lunn <andrew@lunn.ch>
    Reviewed-by: Rob Herring <rob.herring <at> calxeda.com>
    Cc: Russell King <linux@arm.linux.org.uk>
    Cc: Jeremy Kerr <jeremy.kerr@canonical.com>
    Cc: Arnd Bergman <arnd.bergmann@linaro.org>
    Cc: Paul Walmsley <paul@pwsan.com>
    Cc: Shawn Guo <shawn.guo@freescale.com>
    Cc: Sascha Hauer <s.hauer@pengutronix.de>
    Cc: Richard Zhao <richard.zhao@linaro.org>
    Cc: Saravana Kannan <skannan@codeaurora.org>
    Cc: Magnus Damm <magnus.damm@gmail.com>
    Cc: Mark Brown <broonie@opensource.wolfsonmicro.com>
    Cc: Linus Walleij <linus.walleij@stericsson.com>
    Cc: Stephen Boyd <sboyd@codeaurora.org>
    Cc: Amit Kucheria <amit.kucheria@linaro.org>
    Cc: Deepak Saxena <dsaxena@linaro.org>
    Cc: Grant Likely <grant.likely@secretlab.ca>
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>

diff --git a/include/linux/clk.h b/include/linux/clk.h
index b9d46fa154b4..b0252726df61 100644
--- a/include/linux/clk.h
+++ b/include/linux/clk.h
@@ -3,6 +3,7 @@
  *
  *  Copyright (C) 2004 ARM Limited.
  *  Written by Deep Blue Solutions Limited.
+ *  Copyright (C) 2011-2012 Linaro Ltd <mturquette@linaro.org>
  *
  * This program is free software; you can redistribute it and/or modify
  * it under the terms of the GNU General Public License version 2 as
@@ -12,18 +13,75 @@
 #define __LINUX_CLK_H
 
 #include <linux/kernel.h>
+#include <linux/notifier.h>
 
 struct device;
 
-/*
- * The base API.
+struct clk;
+
+#ifdef CONFIG_COMMON_CLK
+
+/**
+ * DOC: clk notifier callback types
+ *
+ * PRE_RATE_CHANGE - called immediately before the clk rate is changed,
+ *     to indicate that the rate change will proceed.  Drivers must
+ *     immediately terminate any operations that will be affected by the
+ *     rate change.  Callbacks may either return NOTIFY_DONE or
+ *     NOTIFY_STOP.
+ *
+ * ABORT_RATE_CHANGE: called if the rate change failed for some reason
+ *     after PRE_RATE_CHANGE.  In this case, all registered notifiers on
+ *     the clk will be called with ABORT_RATE_CHANGE. Callbacks must
+ *     always return NOTIFY_DONE.
+ *
+ * POST_RATE_CHANGE - called after the clk rate change has successfully
+ *     completed.  Callbacks must always return NOTIFY_DONE.
+ *
  */
+#define PRE_RATE_CHANGE			BIT(0)
+#define POST_RATE_CHANGE		BIT(1)
+#define ABORT_RATE_CHANGE		BIT(2)
 
+/**
+ * struct clk_notifier - associate a clk with a notifier
+ * @clk: struct clk * to associate the notifier with
+ * @notifier_head: a blocking_notifier_head for this clk
+ * @node: linked list pointers
+ *
+ * A list of struct clk_notifier is maintained by the notifier code.
+ * An entry is created whenever code registers the first notifier on a
+ * particular @clk.  Future notifiers on that @clk are added to the
+ * @notifier_head.
+ */
+struct clk_notifier {
+	struct clk			*clk;
+	struct srcu_notifier_head	notifier_head;
+	struct list_head		node;
+};
 
-/*
- * struct clk - an machine class defined object / cookie.
+/**
+ * struct clk_notifier_data - rate data to pass to the notifier callback
+ * @clk: struct clk * being changed
+ * @old_rate: previous rate of this clk
+ * @new_rate: new rate of this clk
+ *
+ * For a pre-notifier, old_rate is the clk's rate before this rate
+ * change, and new_rate is what the rate will be in the future.  For a
+ * post-notifier, old_rate and new_rate are both set to the clk's
+ * current rate (this was done to optimize the implementation).
  */
-struct clk;
+struct clk_notifier_data {
+	struct clk		*clk;
+	unsigned long		old_rate;
+	unsigned long		new_rate;
+};
+
+int clk_notifier_register(struct clk *clk, struct notifier_block *nb);
+
+int clk_notifier_unregister(struct clk *clk, struct notifier_block *nb);
+
+#endif /* !CONFIG_COMMON_CLK */
 
 /**
  * clk_get - lookup and obtain a reference to a clock producer.

commit 42c5d52f2bbf68add2d7a6982753993e0c75a119
Author: Richard Zhao <richard.zhao@linaro.org>
Date:   Tue Nov 15 14:47:56 2011 +0800

    clk: add helper functions clk_prepare_enable and clk_disable_unprepare
    
    It's for migrating to generic clk framework API.
    
    The helper functions  help cases clk_enable/clk_disable is used
    in non-atomic context.
    For example, Call clk_enable in probe and clk_disable in remove.
    
    Signed-off-by: Richard Zhao <richard.zhao@linaro.org>
    Signed-off-by: Sascha Hauer <s.hauer@pengutronix.de>
    Signed-off-by: Shawn Guo <shawn.guo@linaro.org>
    Cc: Russell King <linux@arm.linux.org.uk>
    Acked-by: Marek Vasut <marek.vasut@gmail.com>

diff --git a/include/linux/clk.h b/include/linux/clk.h
index 7213b52b2c0e..b9d46fa154b4 100644
--- a/include/linux/clk.h
+++ b/include/linux/clk.h
@@ -107,6 +107,28 @@ static inline void clk_unprepare(struct clk *clk)
 }
 #endif
 
+/* clk_prepare_enable helps cases using clk_enable in non-atomic context. */
+static inline int clk_prepare_enable(struct clk *clk)
+{
+	int ret;
+
+	ret = clk_prepare(clk);
+	if (ret)
+		return ret;
+	ret = clk_enable(clk);
+	if (ret)
+		clk_unprepare(clk);
+
+	return ret;
+}
+
+/* clk_disable_unprepare helps cases using clk_disable in non-atomic context. */
+static inline void clk_disable_unprepare(struct clk *clk)
+{
+	clk_disable(clk);
+	clk_unprepare(clk);
+}
+
 /**
  * clk_get_rate - obtain the current clock rate (in Hz) for a clock source.
  *		  This is only valid once the clock source has been enabled.

commit 40d3e0f4942ec12c4521fe1b2a2b774164cd2c80
Author: Russell King <rmk+kernel@arm.linux.org.uk>
Date:   Thu Sep 22 11:30:50 2011 +0100

    clk: provide prepare/unprepare functions
    
    As discussed previously, there's the need on some platforms to run some
    parts of clk_enable() in contexts which can schedule.  The solution
    which was agreed upon was to provide clk_prepare() and clk_unprepare()
    to contain this parts, while clk_enable() and clk_disable() perform
    the atomic part.
    
    This patch provides a common definition for clk_prepare() and
    clk_unprepare() in linux/clk.h, and provides an upgrade path for
    existing implementation and drivers: drivers can start using
    clk_prepare() and clk_unprepare() once this patch is merged without
    having to wait for platform support.  Platforms can then start to
    provide these additional functions.
    
    Eventually, HAVE_CLK_PREPARE will be removed from the kernel, and
    everyone will have to provide these new APIs.
    
    Acked-by: Saravana Kannan <skannan@codeaurora.org>
    Signed-off-by: Russell King <rmk+kernel@arm.linux.org.uk>

diff --git a/include/linux/clk.h b/include/linux/clk.h
index 1d37f42ac294..7213b52b2c0e 100644
--- a/include/linux/clk.h
+++ b/include/linux/clk.h
@@ -11,6 +11,8 @@
 #ifndef __LINUX_CLK_H
 #define __LINUX_CLK_H
 
+#include <linux/kernel.h>
+
 struct device;
 
 /*
@@ -40,12 +42,32 @@ struct clk;
  */
 struct clk *clk_get(struct device *dev, const char *id);
 
+/**
+ * clk_prepare - prepare a clock source
+ * @clk: clock source
+ *
+ * This prepares the clock source for use.
+ *
+ * Must not be called from within atomic context.
+ */
+#ifdef CONFIG_HAVE_CLK_PREPARE
+int clk_prepare(struct clk *clk);
+#else
+static inline int clk_prepare(struct clk *clk)
+{
+	might_sleep();
+	return 0;
+}
+#endif
+
 /**
  * clk_enable - inform the system when the clock source should be running.
  * @clk: clock source
  *
  * If the clock can not be enabled/disabled, this should return success.
  *
+ * May be called from atomic contexts.
+ *
  * Returns success (0) or negative errno.
  */
 int clk_enable(struct clk *clk);
@@ -57,6 +79,8 @@ int clk_enable(struct clk *clk);
  * Inform the system that a clock source is no longer required by
  * a driver and may be shut down.
  *
+ * May be called from atomic contexts.
+ *
  * Implementation detail: if the clock source is shared between
  * multiple drivers, clk_enable() calls must be balanced by the
  * same number of clk_disable() calls for the clock source to be
@@ -64,6 +88,25 @@ int clk_enable(struct clk *clk);
  */
 void clk_disable(struct clk *clk);
 
+
+/**
+ * clk_unprepare - undo preparation of a clock source
+ * @clk: clock source
+ *
+ * This undoes a previously prepared clock.  The caller must balance
+ * the number of prepare and unprepare calls.
+ *
+ * Must not be called from within atomic context.
+ */
+#ifdef CONFIG_HAVE_CLK_PREPARE
+void clk_unprepare(struct clk *clk);
+#else
+static inline void clk_unprepare(struct clk *clk)
+{
+	might_sleep();
+}
+#endif
+
 /**
  * clk_get_rate - obtain the current clock rate (in Hz) for a clock source.
  *		  This is only valid once the clock source has been enabled.

commit c0683039207226afcffbe0fbf6a1caaee77a37b0
Author: Tony Lindgren <tony@atomide.com>
Date:   Wed Jun 3 17:43:14 2009 +0100

    [ARM] 5536/1: Move clk_add_alias() to arch/arm/common/clkdev.c
    
    This can be used for other arm platforms too as discussed
    on the linux-arm-kernel list.
    
    Also check the return value with IS_ERR and return PTR_ERR
    as suggested by Russell King.
    
    Signed-off-by: Tony Lindgren <tony@atomide.com>
    Signed-off-by: Russell King <rmk+kernel@arm.linux.org.uk>

diff --git a/include/linux/clk.h b/include/linux/clk.h
index 1db9bbf444a3..1d37f42ac294 100644
--- a/include/linux/clk.h
+++ b/include/linux/clk.h
@@ -142,4 +142,17 @@ struct clk *clk_get_parent(struct clk *clk);
  */
 struct clk *clk_get_sys(const char *dev_id, const char *con_id);
 
+/**
+ * clk_add_alias - add a new clock alias
+ * @alias: name for clock alias
+ * @alias_dev_name: device name
+ * @id: platform specific clock name
+ * @dev: device
+ *
+ * Allows using generic clock names for drivers by adding a new alias.
+ * Assumes clkdev, see clkdev.h for more info.
+ */
+int clk_add_alias(const char *alias, const char *alias_dev_name, char *id,
+			struct device *dev);
+
 #endif

commit 05fd8e73e1357feaea9c48938d937eae76b4aef4
Author: Sascha Hauer <s.hauer@pengutronix.de>
Date:   Sat Mar 7 12:55:49 2009 +0100

    clkdev: add possibility to get a clock based on the device name
    
    This adds clk_get_sys to get a clock without the associated struct
    device.
    
    Signed-off-by: Sascha Hauer <s.hauer@pengutronix.de>

diff --git a/include/linux/clk.h b/include/linux/clk.h
index 778777316ea4..1db9bbf444a3 100644
--- a/include/linux/clk.h
+++ b/include/linux/clk.h
@@ -125,4 +125,21 @@ int clk_set_parent(struct clk *clk, struct clk *parent);
  */
 struct clk *clk_get_parent(struct clk *clk);
 
+/**
+ * clk_get_sys - get a clock based upon the device name
+ * @dev_id: device name
+ * @con_id: connection ID
+ *
+ * Returns a struct clk corresponding to the clock producer, or
+ * valid IS_ERR() condition containing errno.  The implementation
+ * uses @dev_id and @con_id to determine the clock consumer, and
+ * thereby the clock producer. In contrast to clk_get() this function
+ * takes the device name instead of the device itself for identification.
+ *
+ * Drivers must assume that the clock source is not enabled.
+ *
+ * clk_get_sys should not be called from within interrupt context.
+ */
+struct clk *clk_get_sys(const char *dev_id, const char *con_id);
+
 #endif

commit f7ad160b49c49dc9cd383b9184c6fa4a9b4f7ebb
Author: Alex Raimondi <raimondi@miromico.ch>
Date:   Wed Oct 15 22:02:03 2008 -0700

    include/linux/clk.h: fix comment
    
    clk_get and clk_put may not be used from within interrupt context.  Change
    comment to this function.
    
    Signed-off-by: Alex Raimondi <raimondi@miromico.ch>
    Signed-off-by: Haavard Skinnemoen <haavard.skinnemoen@atmel.com>
    Acked-by: Russell King <rmk+kernel@arm.linux.org.uk>
    Cc: john stultz <johnstul@us.ibm.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

diff --git a/include/linux/clk.h b/include/linux/clk.h
index 5ca8c6fddb56..778777316ea4 100644
--- a/include/linux/clk.h
+++ b/include/linux/clk.h
@@ -35,6 +35,8 @@ struct clk;
  * clk_get may return different clock producers depending on @dev.)
  *
  * Drivers must assume that the clock source is not enabled.
+ *
+ * clk_get should not be called from within interrupt context.
  */
 struct clk *clk_get(struct device *dev, const char *id);
 
@@ -76,6 +78,8 @@ unsigned long clk_get_rate(struct clk *clk);
  * Note: drivers must ensure that all clk_enable calls made on this
  * clock source are balanced by clk_disable calls prior to calling
  * this function.
+ *
+ * clk_put should not be called from within interrupt context.
  */
 void clk_put(struct clk *clk);
 

commit 686f8c5d77149f78ff6090dde774b2e43a7319b2
Author: Todd Poynor <tpoynor@mvista.com>
Date:   Sat Mar 25 18:15:24 2006 +0000

    include/linux/clk.h is betraying its ARM origins
    
    include/linux/clk.h is betraying its ARM origins.
    
    Signed-off-by: Todd Poynor <tpoynor@mvista.com>
    Signed-off-by: Russell King <rmk+kernel@arm.linux.org.uk>

diff --git a/include/linux/clk.h b/include/linux/clk.h
index 12848f81bb37..5ca8c6fddb56 100644
--- a/include/linux/clk.h
+++ b/include/linux/clk.h
@@ -8,8 +8,8 @@
  * it under the terms of the GNU General Public License version 2 as
  * published by the Free Software Foundation.
  */
-#ifndef ASMARM_CLOCK_H
-#define ASMARM_CLOCK_H
+#ifndef __LINUX_CLK_H
+#define __LINUX_CLK_H
 
 struct device;
 

commit f8ce25476d5f12ffa29b885e49c38cd95053437e
Author: Russell King <rmk@dyn-67.arm.linux.org.uk>
Date:   Sat Jan 7 16:15:52 2006 +0000

    [ARM] Move asm/hardware/clock.h to linux/clk.h
    
    This is needs to be visible to other architectures using the AMBA
    bus and peripherals.
    
    Signed-off-by: Russell King <rmk+kernel@arm.linux.org.uk>

diff --git a/include/linux/clk.h b/include/linux/clk.h
new file mode 100644
index 000000000000..12848f81bb37
--- /dev/null
+++ b/include/linux/clk.h
@@ -0,0 +1,124 @@
+/*
+ *  linux/include/linux/clk.h
+ *
+ *  Copyright (C) 2004 ARM Limited.
+ *  Written by Deep Blue Solutions Limited.
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation.
+ */
+#ifndef ASMARM_CLOCK_H
+#define ASMARM_CLOCK_H
+
+struct device;
+
+/*
+ * The base API.
+ */
+
+
+/*
+ * struct clk - an machine class defined object / cookie.
+ */
+struct clk;
+
+/**
+ * clk_get - lookup and obtain a reference to a clock producer.
+ * @dev: device for clock "consumer"
+ * @id: clock comsumer ID
+ *
+ * Returns a struct clk corresponding to the clock producer, or
+ * valid IS_ERR() condition containing errno.  The implementation
+ * uses @dev and @id to determine the clock consumer, and thereby
+ * the clock producer.  (IOW, @id may be identical strings, but
+ * clk_get may return different clock producers depending on @dev.)
+ *
+ * Drivers must assume that the clock source is not enabled.
+ */
+struct clk *clk_get(struct device *dev, const char *id);
+
+/**
+ * clk_enable - inform the system when the clock source should be running.
+ * @clk: clock source
+ *
+ * If the clock can not be enabled/disabled, this should return success.
+ *
+ * Returns success (0) or negative errno.
+ */
+int clk_enable(struct clk *clk);
+
+/**
+ * clk_disable - inform the system when the clock source is no longer required.
+ * @clk: clock source
+ *
+ * Inform the system that a clock source is no longer required by
+ * a driver and may be shut down.
+ *
+ * Implementation detail: if the clock source is shared between
+ * multiple drivers, clk_enable() calls must be balanced by the
+ * same number of clk_disable() calls for the clock source to be
+ * disabled.
+ */
+void clk_disable(struct clk *clk);
+
+/**
+ * clk_get_rate - obtain the current clock rate (in Hz) for a clock source.
+ *		  This is only valid once the clock source has been enabled.
+ * @clk: clock source
+ */
+unsigned long clk_get_rate(struct clk *clk);
+
+/**
+ * clk_put	- "free" the clock source
+ * @clk: clock source
+ *
+ * Note: drivers must ensure that all clk_enable calls made on this
+ * clock source are balanced by clk_disable calls prior to calling
+ * this function.
+ */
+void clk_put(struct clk *clk);
+
+
+/*
+ * The remaining APIs are optional for machine class support.
+ */
+
+
+/**
+ * clk_round_rate - adjust a rate to the exact rate a clock can provide
+ * @clk: clock source
+ * @rate: desired clock rate in Hz
+ *
+ * Returns rounded clock rate in Hz, or negative errno.
+ */
+long clk_round_rate(struct clk *clk, unsigned long rate);
+ 
+/**
+ * clk_set_rate - set the clock rate for a clock source
+ * @clk: clock source
+ * @rate: desired clock rate in Hz
+ *
+ * Returns success (0) or negative errno.
+ */
+int clk_set_rate(struct clk *clk, unsigned long rate);
+ 
+/**
+ * clk_set_parent - set the parent clock source for this clock
+ * @clk: clock source
+ * @parent: parent clock source
+ *
+ * Returns success (0) or negative errno.
+ */
+int clk_set_parent(struct clk *clk, struct clk *parent);
+
+/**
+ * clk_get_parent - get the parent clock source for this clock
+ * @clk: clock source
+ *
+ * Returns struct clk corresponding to parent clock source, or
+ * valid IS_ERR() condition containing errno.
+ */
+struct clk *clk_get_parent(struct clk *clk);
+
+#endif
