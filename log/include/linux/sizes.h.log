commit b7d5c9239855f99762e8a547bea03a436e8a12e8
Merge: 608745f12462 8ff80fbe7e98
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Tue Jul 9 11:35:38 2019 -0700

    Merge branch 'x86-boot-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip
    
    Pull x86 boot updates from Thomas Gleixner:
     "Assorted updates to kexec/kdump:
    
       - Proper kexec support for 4/5-level paging and jumping from a
         5-level to a 4-level paging kernel.
    
       - Make the EFI support for kexec/kdump more robust
    
       - Enforce that the GDT is properly aligned instead of getting the
         alignment by chance"
    
    * 'x86-boot-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip:
      x86/kdump/64: Restrict kdump kernel reservation to <64TB
      x86/kexec/64: Prevent kexec from 5-level paging to a 4-level only kernel
      x86/boot: Add xloadflags bits to check for 5-level paging support
      x86/boot: Make the GDT 8-byte aligned
      x86/kexec: Add the ACPI NVS region to the ident map
      x86/boot: Call get_rsdp_addr() after console_init()
      Revert "x86/boot: Disable RSDP parsing temporarily"
      x86/boot: Use efi_setup_data for searching RSDP on kexec-ed kernels
      x86/kexec: Add the EFI system tables and ACPI tables to the ident map

commit 8ff80fbe7e9870078b1cc3c2cdd8f3f223b333a9
Author: Baoquan He <bhe@redhat.com>
Date:   Fri May 24 15:38:10 2019 +0800

    x86/kdump/64: Restrict kdump kernel reservation to <64TB
    
    Restrict kdump to only reserve crashkernel below 64TB.
    
    The reaons is that the kdump may jump from a 5-level paging mode to a
    4-level paging mode kernel. If a 4-level paging mode kdump kernel is put
    above 64TB, then the kdump kernel cannot start.
    
    The 1st kernel reserves the kdump kernel region during bootup. At that
    point it is not known whether the kdump kernel has 5-level or 4-level
    paging support.
    
    To support both restrict the kdump kernel reservation to the lower 64TB
    address space to ensure that a 4-level paging mode kdump kernel can be
    loaded and successfully started.
    
    [ tglx: Massaged changelog ]
    
    Signed-off-by: Baoquan He <bhe@redhat.com>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Acked-by: Kirill A. Shutemov <kirill.shutemov@linux.intel.com>
    Acked-by: Dave Young <dyoung@redhat.com>
    Cc: bp@alien8.de
    Cc: hpa@zytor.com
    Link: https://lkml.kernel.org/r/20190524073810.24298-4-bhe@redhat.com

diff --git a/include/linux/sizes.h b/include/linux/sizes.h
index fbde0bc7e882..8651269cb46c 100644
--- a/include/linux/sizes.h
+++ b/include/linux/sizes.h
@@ -47,5 +47,6 @@
 #define SZ_2G				0x80000000
 
 #define SZ_4G				_AC(0x100000000, ULL)
+#define SZ_64T				_AC(0x400000000000, ULL)
 
 #endif /* __LINUX_SIZES_H__ */

commit d2912cb15bdda8ba4a5dd73396ad62641af2f520
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Tue Jun 4 10:11:33 2019 +0200

    treewide: Replace GPLv2 boilerplate/reference with SPDX - rule 500
    
    Based on 2 normalized pattern(s):
    
      this program is free software you can redistribute it and or modify
      it under the terms of the gnu general public license version 2 as
      published by the free software foundation
    
      this program is free software you can redistribute it and or modify
      it under the terms of the gnu general public license version 2 as
      published by the free software foundation #
    
    extracted by the scancode license scanner the SPDX license identifier
    
      GPL-2.0-only
    
    has been chosen to replace the boilerplate/reference in 4122 file(s).
    
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Reviewed-by: Enrico Weigelt <info@metux.net>
    Reviewed-by: Kate Stewart <kstewart@linuxfoundation.org>
    Reviewed-by: Allison Randal <allison@lohutok.net>
    Cc: linux-spdx@vger.kernel.org
    Link: https://lkml.kernel.org/r/20190604081206.933168790@linutronix.de
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/include/linux/sizes.h b/include/linux/sizes.h
index fbde0bc7e882..1cbb4c4d016e 100644
--- a/include/linux/sizes.h
+++ b/include/linux/sizes.h
@@ -1,9 +1,6 @@
+/* SPDX-License-Identifier: GPL-2.0-only */
 /*
  * include/linux/sizes.h
- *
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License version 2 as
- * published by the Free Software Foundation.
  */
 #ifndef __LINUX_SIZES_H__
 #define __LINUX_SIZES_H__

commit f2b9ba871beb92fd6884b957acb14621b15fbe2b
Author: Ard Biesheuvel <ard.biesheuvel@linaro.org>
Date:   Tue Mar 6 17:15:32 2018 +0000

    arm64/kernel: kaslr: reduce module randomization range to 4 GB
    
    We currently have to rely on the GCC large code model for KASLR for
    two distinct but related reasons:
    - if we enable full randomization, modules will be loaded very far away
      from the core kernel, where they are out of range for ADRP instructions,
    - even without full randomization, the fact that the 128 MB module region
      is now no longer fully reserved for kernel modules means that there is
      a very low likelihood that the normal bottom-up allocation of other
      vmalloc regions may collide, and use up the range for other things.
    
    Large model code is suboptimal, given that each symbol reference involves
    a literal load that goes through the D-cache, reducing cache utilization.
    But more importantly, literals are not instructions but part of .text
    nonetheless, and hence mapped with executable permissions.
    
    So let's get rid of our dependency on the large model for KASLR, by:
    - reducing the full randomization range to 4 GB, thereby ensuring that
      ADRP references between modules and the kernel are always in range,
    - reduce the spillover range to 4 GB as well, so that we fallback to a
      region that is still guaranteed to be in range
    - move the randomization window of the core kernel to the middle of the
      VMALLOC space
    
    Note that KASAN always uses the module region outside of the vmalloc space,
    so keep the kernel close to that if KASAN is enabled.
    
    Signed-off-by: Ard Biesheuvel <ard.biesheuvel@linaro.org>
    Signed-off-by: Will Deacon <will.deacon@arm.com>

diff --git a/include/linux/sizes.h b/include/linux/sizes.h
index ce3e8150c174..fbde0bc7e882 100644
--- a/include/linux/sizes.h
+++ b/include/linux/sizes.h
@@ -8,6 +8,8 @@
 #ifndef __LINUX_SIZES_H__
 #define __LINUX_SIZES_H__
 
+#include <linux/const.h>
+
 #define SZ_1				0x00000001
 #define SZ_2				0x00000002
 #define SZ_4				0x00000004
@@ -44,4 +46,6 @@
 #define SZ_1G				0x40000000
 #define SZ_2G				0x80000000
 
+#define SZ_4G				_AC(0x100000000, ULL)
+
 #endif /* __LINUX_SIZES_H__ */

commit dccd2304cc907c4b4d2920eeb24b055320fe942e
Author: Alessandro Rubini <rubini@gnudd.com>
Date:   Sun Jun 24 12:46:05 2012 +0100

    ARM: 7430/1: sizes.h: move from asm-generic to <linux/sizes.h>
    
    sizes.h is used throughout the AMBA code and drivers, so the header
    should be available to everyone in order to driver AMBA/PrimeCell
    peripherals behind a PCI bridge where the host can be any platform
    (I'm doing it under x86).
    
    At this step <asm-generic/sizes.h> includes <linux/sizes.h>,
    to allow a grace period for both in-tree and out-of-tree drivers.
    
    Signed-off-by: Alessandro Rubini <rubini@gnudd.com>
    Acked-by: Giancarlo Asnaghi <giancarlo.asnaghi@st.com>
    Acked-by: Linus Walleij <linus.walleij@linaro.org>
    Cc: Alan Cox <alan@linux.intel.com>
    Signed-off-by: Russell King <rmk+kernel@arm.linux.org.uk>

diff --git a/include/linux/sizes.h b/include/linux/sizes.h
new file mode 100644
index 000000000000..ce3e8150c174
--- /dev/null
+++ b/include/linux/sizes.h
@@ -0,0 +1,47 @@
+/*
+ * include/linux/sizes.h
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation.
+ */
+#ifndef __LINUX_SIZES_H__
+#define __LINUX_SIZES_H__
+
+#define SZ_1				0x00000001
+#define SZ_2				0x00000002
+#define SZ_4				0x00000004
+#define SZ_8				0x00000008
+#define SZ_16				0x00000010
+#define SZ_32				0x00000020
+#define SZ_64				0x00000040
+#define SZ_128				0x00000080
+#define SZ_256				0x00000100
+#define SZ_512				0x00000200
+
+#define SZ_1K				0x00000400
+#define SZ_2K				0x00000800
+#define SZ_4K				0x00001000
+#define SZ_8K				0x00002000
+#define SZ_16K				0x00004000
+#define SZ_32K				0x00008000
+#define SZ_64K				0x00010000
+#define SZ_128K				0x00020000
+#define SZ_256K				0x00040000
+#define SZ_512K				0x00080000
+
+#define SZ_1M				0x00100000
+#define SZ_2M				0x00200000
+#define SZ_4M				0x00400000
+#define SZ_8M				0x00800000
+#define SZ_16M				0x01000000
+#define SZ_32M				0x02000000
+#define SZ_64M				0x04000000
+#define SZ_128M				0x08000000
+#define SZ_256M				0x10000000
+#define SZ_512M				0x20000000
+
+#define SZ_1G				0x40000000
+#define SZ_2G				0x80000000
+
+#endif /* __LINUX_SIZES_H__ */
