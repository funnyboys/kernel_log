commit 29d9f30d4ce6c7a38745a54a8cddface10013490
Merge: 56a451b78067 7f80ccfe9968
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Tue Mar 31 17:29:33 2020 -0700

    Merge git://git.kernel.org/pub/scm/linux/kernel/git/netdev/net-next
    
    Pull networking updates from David Miller:
     "Highlights:
    
       1) Fix the iwlwifi regression, from Johannes Berg.
    
       2) Support BSS coloring and 802.11 encapsulation offloading in
          hardware, from John Crispin.
    
       3) Fix some potential Spectre issues in qtnfmac, from Sergey
          Matyukevich.
    
       4) Add TTL decrement action to openvswitch, from Matteo Croce.
    
       5) Allow paralleization through flow_action setup by not taking the
          RTNL mutex, from Vlad Buslov.
    
       6) A lot of zero-length array to flexible-array conversions, from
          Gustavo A. R. Silva.
    
       7) Align XDP statistics names across several drivers for consistency,
          from Lorenzo Bianconi.
    
       8) Add various pieces of infrastructure for offloading conntrack, and
          make use of it in mlx5 driver, from Paul Blakey.
    
       9) Allow using listening sockets in BPF sockmap, from Jakub Sitnicki.
    
      10) Lots of parallelization improvements during configuration changes
          in mlxsw driver, from Ido Schimmel.
    
      11) Add support to devlink for generic packet traps, which report
          packets dropped during ACL processing. And use them in mlxsw
          driver. From Jiri Pirko.
    
      12) Support bcmgenet on ACPI, from Jeremy Linton.
    
      13) Make BPF compatible with RT, from Thomas Gleixnet, Alexei
          Starovoitov, and your's truly.
    
      14) Support XDP meta-data in virtio_net, from Yuya Kusakabe.
    
      15) Fix sysfs permissions when network devices change namespaces, from
          Christian Brauner.
    
      16) Add a flags element to ethtool_ops so that drivers can more simply
          indicate which coalescing parameters they actually support, and
          therefore the generic layer can validate the user's ethtool
          request. Use this in all drivers, from Jakub Kicinski.
    
      17) Offload FIFO qdisc in mlxsw, from Petr Machata.
    
      18) Support UDP sockets in sockmap, from Lorenz Bauer.
    
      19) Fix stretch ACK bugs in several TCP congestion control modules,
          from Pengcheng Yang.
    
      20) Support virtual functiosn in octeontx2 driver, from Tomasz
          Duszynski.
    
      21) Add region operations for devlink and use it in ice driver to dump
          NVM contents, from Jacob Keller.
    
      22) Add support for hw offload of MACSEC, from Antoine Tenart.
    
      23) Add support for BPF programs that can be attached to LSM hooks,
          from KP Singh.
    
      24) Support for multiple paths, path managers, and counters in MPTCP.
          From Peter Krystad, Paolo Abeni, Florian Westphal, Davide Caratti,
          and others.
    
      25) More progress on adding the netlink interface to ethtool, from
          Michal Kubecek"
    
    * git://git.kernel.org/pub/scm/linux/kernel/git/netdev/net-next: (2121 commits)
      net: ipv6: rpl_iptunnel: Fix potential memory leak in rpl_do_srh_inline
      cxgb4/chcr: nic-tls stats in ethtool
      net: dsa: fix oops while probing Marvell DSA switches
      net/bpfilter: remove superfluous testing message
      net: macb: Fix handling of fixed-link node
      net: dsa: ksz: Select KSZ protocol tag
      netdevsim: dev: Fix memory leak in nsim_dev_take_snapshot_write
      net: stmmac: add EHL 2.5Gbps PCI info and PCI ID
      net: stmmac: add EHL PSE0 & PSE1 1Gbps PCI info and PCI ID
      net: stmmac: create dwmac-intel.c to contain all Intel platform
      net: dsa: bcm_sf2: Support specifying VLAN tag egress rule
      net: dsa: bcm_sf2: Add support for matching VLAN TCI
      net: dsa: bcm_sf2: Move writing of CFP_DATA(5) into slicing functions
      net: dsa: bcm_sf2: Check earlier for FLOW_EXT and FLOW_MAC_EXT
      net: dsa: bcm_sf2: Disable learning for ASP port
      net: dsa: b53: Deny enslaving port 7 for 7278 into a bridge
      net: dsa: b53: Prevent tagged VLAN on port 7 for 7278
      net: dsa: b53: Restore VLAN entries upon (re)configuration
      net: dsa: bcm_sf2: Fix overflow checks
      hv_netvsc: Remove unnecessary round_up for recv_completion_cnt
      ...

commit 3f50f132d8400e129fc9eb68b5020167ef80a244
Author: John Fastabend <john.fastabend@gmail.com>
Date:   Mon Mar 30 14:36:39 2020 -0700

    bpf: Verifier, do explicit ALU32 bounds tracking
    
    It is not possible for the current verifier to track ALU32 and JMP ops
    correctly. This can result in the verifier aborting with errors even though
    the program should be verifiable. BPF codes that hit this can work around
    it by changin int variables to 64-bit types, marking variables volatile,
    etc. But this is all very ugly so it would be better to avoid these tricks.
    
    But, the main reason to address this now is do_refine_retval_range() was
    assuming return values could not be negative. Once we fixed this code that
    was previously working will no longer work. See do_refine_retval_range()
    patch for details. And we don't want to suddenly cause programs that used
    to work to fail.
    
    The simplest example code snippet that illustrates the problem is likely
    this,
    
     53: w8 = w0                    // r8 <- [0, S32_MAX],
                                    // w8 <- [-S32_MIN, X]
     54: w8 <s 0                    // r8 <- [0, U32_MAX]
                                    // w8 <- [0, X]
    
    The expected 64-bit and 32-bit bounds after each line are shown on the
    right. The current issue is without the w* bounds we are forced to use
    the worst case bound of [0, U32_MAX]. To resolve this type of case,
    jmp32 creating divergent 32-bit bounds from 64-bit bounds, we add explicit
    32-bit register bounds s32_{min|max}_value and u32_{min|max}_value. Then
    from branch_taken logic creating new bounds we can track 32-bit bounds
    explicitly.
    
    The next case we observed is ALU ops after the jmp32,
    
     53: w8 = w0                    // r8 <- [0, S32_MAX],
                                    // w8 <- [-S32_MIN, X]
     54: w8 <s 0                    // r8 <- [0, U32_MAX]
                                    // w8 <- [0, X]
     55: w8 += 1                    // r8 <- [0, U32_MAX+1]
                                    // w8 <- [0, X+1]
    
    In order to keep the bounds accurate at this point we also need to track
    ALU32 ops. To do this we add explicit ALU32 logic for each of the ALU
    ops, mov, add, sub, etc.
    
    Finally there is a question of how and when to merge bounds. The cases
    enumerate here,
    
    1. MOV ALU32   - zext 32-bit -> 64-bit
    2. MOV ALU64   - copy 64-bit -> 32-bit
    3. op  ALU32   - zext 32-bit -> 64-bit
    4. op  ALU64   - n/a
    5. jmp ALU32   - 64-bit: var32_off | upper_32_bits(var64_off)
    6. jmp ALU64   - 32-bit: (>> (<< var64_off))
    
    Details for each case,
    
    For "MOV ALU32" BPF arch zero extends so we simply copy the bounds
    from 32-bit into 64-bit ensuring we truncate var_off and 64-bit
    bounds correctly. See zext_32_to_64.
    
    For "MOV ALU64" copy all bounds including 32-bit into new register. If
    the src register had 32-bit bounds the dst register will as well.
    
    For "op ALU32" zero extend 32-bit into 64-bit the same as move,
    see zext_32_to_64.
    
    For "op ALU64" calculate both 32-bit and 64-bit bounds no merging
    is done here. Except we have a special case. When RSH or ARSH is
    done we can't simply ignore shifting bits from 64-bit reg into the
    32-bit subreg. So currently just push bounds from 64-bit into 32-bit.
    This will be correct in the sense that they will represent a valid
    state of the register. However we could lose some accuracy if an
    ARSH is following a jmp32 operation. We can handle this special
    case in a follow up series.
    
    For "jmp ALU32" mark 64-bit reg unknown and recalculate 64-bit bounds
    from tnum by setting var_off to ((<<(>>var_off)) | var32_off). We
    special case if 64-bit bounds has zero'd upper 32bits at which point
    we can simply copy 32-bit bounds into 64-bit register. This catches
    a common compiler trick where upper 32-bits are zeroed and then
    32-bit ops are used followed by a 64-bit compare or 64-bit op on
    a pointer. See __reg_combine_64_into_32().
    
    For "jmp ALU64" cast the bounds of the 64bit to their 32-bit
    counterpart. For example s32_min_value = (s32)reg->smin_value. For
    tnum use only the lower 32bits via, (>>(<<var_off)). See
    __reg_combine_64_into_32().
    
    Signed-off-by: John Fastabend <john.fastabend@gmail.com>
    Signed-off-by: Alexei Starovoitov <ast@kernel.org>
    Link: https://lore.kernel.org/bpf/158560419880.10843.11448220440809118343.stgit@john-Precision-5820-Tower

diff --git a/include/linux/limits.h b/include/linux/limits.h
index 76afcd24ff8c..0d3de82dd354 100644
--- a/include/linux/limits.h
+++ b/include/linux/limits.h
@@ -27,6 +27,7 @@
 #define S16_MAX		((s16)(U16_MAX >> 1))
 #define S16_MIN		((s16)(-S16_MAX - 1))
 #define U32_MAX		((u32)~0U)
+#define U32_MIN		((u32)0)
 #define S32_MAX		((s32)(U32_MAX >> 1))
 #define S32_MIN		((s32)(-S32_MAX - 1))
 #define U64_MAX		((u64)~0ULL)

commit 3e0e9f8c6e3ca92154a74edc23a8872da921d2b6
Author: Vincenzo Frascino <vincenzo.frascino@arm.com>
Date:   Fri Mar 20 14:53:28 2020 +0000

    linux/limits.h: Extract common header for vDSO
    
    The vDSO library should only include the necessary headers required for
    a userspace library (UAPI and a minimal set of kernel headers). To make
    this possible it is necessary to isolate from the kernel headers the
    common parts that are strictly necessary to build the library.
    
    Split limits.h into linux and common headers to make the latter suitable
    for inclusion in the vDSO library.
    
    Signed-off-by: Vincenzo Frascino <vincenzo.frascino@arm.com>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Link: https://lkml.kernel.org/r/20200320145351.32292-4-vincenzo.frascino@arm.com

diff --git a/include/linux/limits.h b/include/linux/limits.h
index 76afcd24ff8c..7fc497ee1393 100644
--- a/include/linux/limits.h
+++ b/include/linux/limits.h
@@ -4,19 +4,8 @@
 
 #include <uapi/linux/limits.h>
 #include <linux/types.h>
+#include <vdso/limits.h>
 
-#define USHRT_MAX	((unsigned short)~0U)
-#define SHRT_MAX	((short)(USHRT_MAX >> 1))
-#define SHRT_MIN	((short)(-SHRT_MAX - 1))
-#define INT_MAX		((int)(~0U >> 1))
-#define INT_MIN		(-INT_MAX - 1)
-#define UINT_MAX	(~0U)
-#define LONG_MAX	((long)(~0UL >> 1))
-#define LONG_MIN	(-LONG_MAX - 1)
-#define ULONG_MAX	(~0UL)
-#define LLONG_MAX	((long long)(~0ULL >> 1))
-#define LLONG_MIN	(-LLONG_MAX - 1)
-#define ULLONG_MAX	(~0ULL)
 #define SIZE_MAX	(~(size_t)0)
 #define PHYS_ADDR_MAX	(~(phys_addr_t)0)
 

commit 54d50897d544c874562253e2a8f70dfcad22afe8
Author: Masahiro Yamada <yamada.masahiro@socionext.com>
Date:   Thu Mar 7 16:27:14 2019 -0800

    linux/kernel.h: split *_MAX and *_MIN macros into <linux/limits.h>
    
    <linux/kernel.h> tends to be cluttered because we often put various sort
    of unrelated stuff in it.  So, we have split out a sensible chunk of
    code into a separate header from time to time.
    
    This commit splits out the *_MAX and *_MIN defines.
    
    The standard header <limits.h> contains various MAX, MIN constants
    including numerial limits.  [1]
    
    I think it makes sense to move in-kernel MAX, MIN constants into
    include/linux/limits.h.
    
    We already have include/uapi/linux/limits.h to contain some user-space
    constants.  I changed its include guard to _UAPI_LINUX_LIMITS_H.  This
    change has no impact to the user-space because
    scripts/headers_install.sh rips off the '_UAPI' prefix from the include
    guards of exported headers.
    
    [1] http://pubs.opengroup.org/onlinepubs/009604499/basedefs/limits.h.html
    
    Link: http://lkml.kernel.org/r/1549156242-20806-2-git-send-email-yamada.masahiro@socionext.com
    Signed-off-by: Masahiro Yamada <yamada.masahiro@socionext.com>
    Cc: Alex Elder <elder@linaro.org>
    Cc: Alexey Dobriyan <adobriyan@gmail.com>
    Cc: Zhang Yanmin <yanmin.zhang@intel.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

diff --git a/include/linux/limits.h b/include/linux/limits.h
new file mode 100644
index 000000000000..76afcd24ff8c
--- /dev/null
+++ b/include/linux/limits.h
@@ -0,0 +1,36 @@
+/* SPDX-License-Identifier: GPL-2.0 */
+#ifndef _LINUX_LIMITS_H
+#define _LINUX_LIMITS_H
+
+#include <uapi/linux/limits.h>
+#include <linux/types.h>
+
+#define USHRT_MAX	((unsigned short)~0U)
+#define SHRT_MAX	((short)(USHRT_MAX >> 1))
+#define SHRT_MIN	((short)(-SHRT_MAX - 1))
+#define INT_MAX		((int)(~0U >> 1))
+#define INT_MIN		(-INT_MAX - 1)
+#define UINT_MAX	(~0U)
+#define LONG_MAX	((long)(~0UL >> 1))
+#define LONG_MIN	(-LONG_MAX - 1)
+#define ULONG_MAX	(~0UL)
+#define LLONG_MAX	((long long)(~0ULL >> 1))
+#define LLONG_MIN	(-LLONG_MAX - 1)
+#define ULLONG_MAX	(~0ULL)
+#define SIZE_MAX	(~(size_t)0)
+#define PHYS_ADDR_MAX	(~(phys_addr_t)0)
+
+#define U8_MAX		((u8)~0U)
+#define S8_MAX		((s8)(U8_MAX >> 1))
+#define S8_MIN		((s8)(-S8_MAX - 1))
+#define U16_MAX		((u16)~0U)
+#define S16_MAX		((s16)(U16_MAX >> 1))
+#define S16_MIN		((s16)(-S16_MAX - 1))
+#define U32_MAX		((u32)~0U)
+#define S32_MAX		((s32)(U32_MAX >> 1))
+#define S32_MIN		((s32)(-S32_MAX - 1))
+#define U64_MAX		((u64)~0ULL)
+#define S64_MAX		((s64)(U64_MAX >> 1))
+#define S64_MIN		((s64)(-S64_MAX - 1))
+
+#endif /* _LINUX_LIMITS_H */

commit 607ca46e97a1b6594b29647d98a32d545c24bdff
Author: David Howells <dhowells@redhat.com>
Date:   Sat Oct 13 10:46:48 2012 +0100

    UAPI: (Scripted) Disintegrate include/linux
    
    Signed-off-by: David Howells <dhowells@redhat.com>
    Acked-by: Arnd Bergmann <arnd@arndb.de>
    Acked-by: Thomas Gleixner <tglx@linutronix.de>
    Acked-by: Michael Kerrisk <mtk.manpages@gmail.com>
    Acked-by: Paul E. McKenney <paulmck@linux.vnet.ibm.com>
    Acked-by: Dave Jones <davej@redhat.com>

diff --git a/include/linux/limits.h b/include/linux/limits.h
deleted file mode 100644
index 2d0f94162fb3..000000000000
--- a/include/linux/limits.h
+++ /dev/null
@@ -1,20 +0,0 @@
-#ifndef _LINUX_LIMITS_H
-#define _LINUX_LIMITS_H
-
-#define NR_OPEN	        1024
-
-#define NGROUPS_MAX    65536	/* supplemental group IDs are available */
-#define ARG_MAX       131072	/* # bytes of args + environ for exec() */
-#define LINK_MAX         127	/* # links a file may have */
-#define MAX_CANON        255	/* size of the canonical input queue */
-#define MAX_INPUT        255	/* size of the type-ahead buffer */
-#define NAME_MAX         255	/* # chars in a file name */
-#define PATH_MAX        4096	/* # chars in a path name including nul */
-#define PIPE_BUF        4096	/* # bytes in atomic write to a pipe */
-#define XATTR_NAME_MAX   255	/* # chars in an extended attribute name */
-#define XATTR_SIZE_MAX 65536	/* size of an extended attribute value (64k) */
-#define XATTR_LIST_MAX 65536	/* size of extended attribute namelist (64k) */
-
-#define RTSIG_MAX	  32
-
-#endif

commit f9e86f419073605b4520848021cc042963c227c7
Author: Roland McGrath <roland@redhat.com>
Date:   Tue Jul 17 04:03:49 2007 -0700

    Remove CHILD_MAX
    
    The CHILD_MAX macro in limits.h should not be there.  It claims to be the
    limit on processes a user can own, but its value is wrong for that.
    There is no constant value, but a variable resource limit (RLIMIT_NPROC).
    Nothing in the kernel uses CHILD_MAX.
    
    The proper thing to do according to POSIX is not to define CHILD_MAX at all.
    The sysconf (_SC_CHILD_MAX) implementation works by calling getrlimit.
    
    Signed-off-by: Roland McGrath <roland@redhat.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

diff --git a/include/linux/limits.h b/include/linux/limits.h
index c4b4e579c01d..2d0f94162fb3 100644
--- a/include/linux/limits.h
+++ b/include/linux/limits.h
@@ -5,7 +5,6 @@
 
 #define NGROUPS_MAX    65536	/* supplemental group IDs are available */
 #define ARG_MAX       131072	/* # bytes of args + environ for exec() */
-#define CHILD_MAX        999    /* no limit :-) */
 #define LINK_MAX         127	/* # links a file may have */
 #define MAX_CANON        255	/* size of the canonical input queue */
 #define MAX_INPUT        255	/* size of the type-ahead buffer */

commit 77293034696e3e0b6c8b8fc1f96be091104b3d2b
Author: Roland McGrath <roland@redhat.com>
Date:   Tue Jul 17 04:03:49 2007 -0700

    Remove OPEN_MAX
    
    The OPEN_MAX macro in limits.h should not be there.  It claims to be the
    limit on file descriptors in a process, but its value is wrong for that.
    There is no constant value, but a variable resource limit (RLIMIT_NOFILE).
    Nothing in the kernel uses OPEN_MAX except things that are wrong to do so.
    I've submitted other patches to remove those uses.
    
    The proper thing to do according to POSIX is not to define OPEN_MAX at all.
    The sysconf (_SC_OPEN_MAX) implementation works by calling getrlimit.
    
    Signed-off-by: Roland McGrath <roland@redhat.com>
    Cc: "David S. Miller" <davem@davemloft.net>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

diff --git a/include/linux/limits.h b/include/linux/limits.h
index eaf2e099f125..c4b4e579c01d 100644
--- a/include/linux/limits.h
+++ b/include/linux/limits.h
@@ -6,7 +6,6 @@
 #define NGROUPS_MAX    65536	/* supplemental group IDs are available */
 #define ARG_MAX       131072	/* # bytes of args + environ for exec() */
 #define CHILD_MAX        999    /* no limit :-) */
-#define OPEN_MAX         256	/* # open files a process may have */
 #define LINK_MAX         127	/* # links a file may have */
 #define MAX_CANON        255	/* size of the canonical input queue */
 #define MAX_INPUT        255	/* size of the type-ahead buffer */

commit 1da177e4c3f41524e886b7f1b8a0c1fc7321cac2
Author: Linus Torvalds <torvalds@ppc970.osdl.org>
Date:   Sat Apr 16 15:20:36 2005 -0700

    Linux-2.6.12-rc2
    
    Initial git repository build. I'm not bothering with the full history,
    even though we have it. We can create a separate "historical" git
    archive of that later if we want to, and in the meantime it's about
    3.2GB when imported into git - space that would just make the early
    git days unnecessarily complicated, when we don't have a lot of good
    infrastructure for it.
    
    Let it rip!

diff --git a/include/linux/limits.h b/include/linux/limits.h
new file mode 100644
index 000000000000..eaf2e099f125
--- /dev/null
+++ b/include/linux/limits.h
@@ -0,0 +1,22 @@
+#ifndef _LINUX_LIMITS_H
+#define _LINUX_LIMITS_H
+
+#define NR_OPEN	        1024
+
+#define NGROUPS_MAX    65536	/* supplemental group IDs are available */
+#define ARG_MAX       131072	/* # bytes of args + environ for exec() */
+#define CHILD_MAX        999    /* no limit :-) */
+#define OPEN_MAX         256	/* # open files a process may have */
+#define LINK_MAX         127	/* # links a file may have */
+#define MAX_CANON        255	/* size of the canonical input queue */
+#define MAX_INPUT        255	/* size of the type-ahead buffer */
+#define NAME_MAX         255	/* # chars in a file name */
+#define PATH_MAX        4096	/* # chars in a path name including nul */
+#define PIPE_BUF        4096	/* # bytes in atomic write to a pipe */
+#define XATTR_NAME_MAX   255	/* # chars in an extended attribute name */
+#define XATTR_SIZE_MAX 65536	/* size of an extended attribute value (64k) */
+#define XATTR_LIST_MAX 65536	/* size of extended attribute namelist (64k) */
+
+#define RTSIG_MAX	  32
+
+#endif
