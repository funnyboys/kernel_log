commit 4b3ab9372ffa569827c8f7b7ffc7b69ba544a3bd
Author: Vignesh R <vigneshr@ti.com>
Date:   Mon Dec 3 13:31:18 2018 +0530

    iio: adc: ti_am335x_tscadc: Improve accuracy of measurement
    
    When performing single ended measurements with TSCADC, its recommended
    to set negative input (SEL_INM_SWC_3_0) of ADC step to ADC's VREFN in the
    corresponding STEP_CONFIGx register.
    
    Also, the positive(SEL_RFP_SWC_2_0) and negative(SEL_RFM_SWC_1_0)
    reference voltage for ADC step needs to be set to VREFP and VREFN
    respectively in STEP_CONFIGx register.
    Without these changes, there may be variation of as much as ~2% in the
    ADC's digital output which is bad for precise measurement.
    
    Signed-off-by: Vignesh R <vigneshr@ti.com>
    Acked-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Signed-off-by: Lee Jones <lee.jones@linaro.org>

diff --git a/include/linux/mfd/ti_am335x_tscadc.h b/include/linux/mfd/ti_am335x_tscadc.h
index b9a53e013bff..483168403ae5 100644
--- a/include/linux/mfd/ti_am335x_tscadc.h
+++ b/include/linux/mfd/ti_am335x_tscadc.h
@@ -78,6 +78,8 @@
 #define STEPCONFIG_YNN		BIT(8)
 #define STEPCONFIG_XNP		BIT(9)
 #define STEPCONFIG_YPN		BIT(10)
+#define STEPCONFIG_RFP(val)	((val) << 12)
+#define STEPCONFIG_RFP_VREFP	(0x3 << 12)
 #define STEPCONFIG_INM_MASK	(0xF << 15)
 #define STEPCONFIG_INM(val)	((val) << 15)
 #define STEPCONFIG_INM_ADCREFM	STEPCONFIG_INM(8)
@@ -86,6 +88,8 @@
 #define STEPCONFIG_INP_AN4	STEPCONFIG_INP(4)
 #define STEPCONFIG_INP_ADCREFM	STEPCONFIG_INP(8)
 #define STEPCONFIG_FIFO1	BIT(26)
+#define STEPCONFIG_RFM(val)	((val) << 23)
+#define STEPCONFIG_RFM_VREFN	(0x3 << 23)
 
 /* Delay register */
 #define STEPDELAY_OPEN_MASK	(0x3FFFF << 0)

commit f438b9da75eb80eb6c4095a5b75324cc9a7f0570
Author: Mugunthan V N <mugunthanvnm@ti.com>
Date:   Wed Oct 5 14:34:41 2016 +0530

    drivers: iio: ti_am335x_adc: add dma support
    
    This patch adds the required pieces to ti_am335x_adc driver for
    DMA support
    
    Signed-off-by: Mugunthan V N <mugunthanvnm@ti.com>
    Reviewed-by: Peter Ujfalusi <peter.ujfalusi@ti.com>
    Signed-off-by: Jonathan Cameron <jic23@kernel.org>

diff --git a/include/linux/mfd/ti_am335x_tscadc.h b/include/linux/mfd/ti_am335x_tscadc.h
index e45a208d9944..b9a53e013bff 100644
--- a/include/linux/mfd/ti_am335x_tscadc.h
+++ b/include/linux/mfd/ti_am335x_tscadc.h
@@ -23,6 +23,8 @@
 #define REG_IRQENABLE		0x02C
 #define REG_IRQCLR		0x030
 #define REG_IRQWAKEUP		0x034
+#define REG_DMAENABLE_SET	0x038
+#define REG_DMAENABLE_CLEAR	0x03c
 #define REG_CTRL		0x040
 #define REG_ADCFSM		0x044
 #define REG_CLKDIV		0x04C
@@ -36,6 +38,7 @@
 #define REG_FIFO0THR		0xE8
 #define REG_FIFO1CNT		0xF0
 #define REG_FIFO1THR		0xF4
+#define REG_DMA1REQ		0xF8
 #define REG_FIFO0		0x100
 #define REG_FIFO1		0x200
 
@@ -126,6 +129,10 @@
 #define FIFOREAD_DATA_MASK (0xfff << 0)
 #define FIFOREAD_CHNLID_MASK (0xf << 16)
 
+/* DMA ENABLE/CLEAR Register */
+#define DMA_FIFO0		BIT(0)
+#define DMA_FIFO1		BIT(1)
+
 /* Sequencer Status */
 #define SEQ_STATUS BIT(5)
 #define CHARGE_STEP		0x11

commit c9329d8638cfa1a86faf4fb8bd4922a3d9c6c437
Author: Mugunthan V N <mugunthanvnm@ti.com>
Date:   Wed Oct 5 14:34:40 2016 +0530

    mfd: ti_am335x_tscadc: store physical address
    
    store the physical address of the device in its priv to use it
    for DMA addressing in the client drivers.
    
    Signed-off-by: Mugunthan V N <mugunthanvnm@ti.com>
    Acked-for-MFD-by: Lee Jones <lee.jones@linaro.org>
    Signed-off-by: Jonathan Cameron <jic23@kernel.org>

diff --git a/include/linux/mfd/ti_am335x_tscadc.h b/include/linux/mfd/ti_am335x_tscadc.h
index 7f55b8b41032..e45a208d9944 100644
--- a/include/linux/mfd/ti_am335x_tscadc.h
+++ b/include/linux/mfd/ti_am335x_tscadc.h
@@ -155,6 +155,7 @@ struct ti_tscadc_dev {
 	struct device *dev;
 	struct regmap *regmap;
 	void __iomem *tscadc_base;
+	phys_addr_t tscadc_phys_base;
 	int irq;
 	int used_cells;	/* 1-2 */
 	int tsc_wires;

commit 7175cce1c3f1d8c8840d2004f78f96a3904249b5
Author: Vignesh R <vigneshr@ti.com>
Date:   Wed Aug 17 17:43:01 2016 +0530

    iio: adc: ti_am335x_adc: Increase timeout value waiting for ADC sample
    
    Now that open delay and sample delay for each channel is configurable
    via DT, the default IDLE_TIMEOUT value is not enough as this is
    calculated based on hardcoded macros. This results in driver returning
    EBUSY sometimes. Fix this by increasing the timeout
    value based on maximum value possible to open delay and sample delays
    for each channel.
    
    Fixes: 5dc11e810676e ("iio: adc: ti_am335x_adc: make sample delay, open delay, averaging DT parameters")
    Signed-off-by: Vignesh R <vigneshr@ti.com>
    Acked-by: Lee Jones <lee.jones@linaro.org>
    Cc: <Stable@vger.kernel.org>
    Signed-off-by: Jonathan Cameron <jic23@kernel.org>

diff --git a/include/linux/mfd/ti_am335x_tscadc.h b/include/linux/mfd/ti_am335x_tscadc.h
index 2567a87872b0..7f55b8b41032 100644
--- a/include/linux/mfd/ti_am335x_tscadc.h
+++ b/include/linux/mfd/ti_am335x_tscadc.h
@@ -138,16 +138,16 @@
 /*
  * time in us for processing a single channel, calculated as follows:
  *
- * num cycles = open delay + (sample delay + conv time) * averaging
+ * max num cycles = open delay + (sample delay + conv time) * averaging
  *
- * num cycles: 152 + (1 + 13) * 16 = 376
+ * max num cycles: 262143 + (255 + 13) * 16 = 266431
  *
  * clock frequency: 26MHz / 8 = 3.25MHz
  * clock period: 1 / 3.25MHz = 308ns
  *
- * processing time: 376 * 308ns = 116us
+ * max processing time: 266431 * 308ns = 83ms(approx)
  */
-#define IDLE_TIMEOUT 116 /* microsec */
+#define IDLE_TIMEOUT 83 /* milliseconds */
 
 #define TSCADC_CELLS		2
 

commit 0d3a7cce3e8bc5c060b1f038984c10cb70289e1d
Author: Andrew F. Davis <afd@ti.com>
Date:   Wed Jun 8 10:54:35 2016 -0500

    mfd: ti_am335x_tscadc: Rename regmap_tscadc to regmap
    
    The regmap structure pointer is named regmap_tscadc, this is not
    consistent with other drivers and is redundant, it also contributes
    to several checkpatch warnings involving long lines. Rename this.
    
    Signed-off-by: Andrew F. Davis <afd@ti.com>
    Signed-off-by: Lee Jones <lee.jones@linaro.org>

diff --git a/include/linux/mfd/ti_am335x_tscadc.h b/include/linux/mfd/ti_am335x_tscadc.h
index 1fd50dcfe47c..2567a87872b0 100644
--- a/include/linux/mfd/ti_am335x_tscadc.h
+++ b/include/linux/mfd/ti_am335x_tscadc.h
@@ -153,7 +153,7 @@
 
 struct ti_tscadc_dev {
 	struct device *dev;
-	struct regmap *regmap_tscadc;
+	struct regmap *regmap;
 	void __iomem *tscadc_base;
 	int irq;
 	int used_cells;	/* 1-2 */

commit b10848e6f9fa7638fc0713695a12c0735ffb52b7
Author: Vignesh R <vigneshr@ti.com>
Date:   Wed Jan 7 11:19:36 2015 +0530

    mfd: ti_am335x_tscadc: Remove unwanted reg_se_cache save
    
    In one shot mode, sequencer automatically disables all enabled steps at
    the end of each cycle. (both ADC steps and TSC steps) Hence these steps
    need not be saved in reg_se_cache for clearing these steps at a later
    stage.
    Also, when ADC wakes up Sequencer should not be busy executing any of the
    config steps except for the charge step. Previously charge step was 1 ADC
    clock cycle and hence it was ignored.
    TSC steps are always disabled at the end of each conversion cycle, hence
    there is no need to explicitly disable TSC steps by writing 0 to REG_SE.
    
    Signed-off-by: Vignesh R <vigneshr@ti.com>
    Signed-off-by: Lee Jones <lee.jones@linaro.org>

diff --git a/include/linux/mfd/ti_am335x_tscadc.h b/include/linux/mfd/ti_am335x_tscadc.h
index 3f4e994ace2b..1fd50dcfe47c 100644
--- a/include/linux/mfd/ti_am335x_tscadc.h
+++ b/include/linux/mfd/ti_am335x_tscadc.h
@@ -128,6 +128,7 @@
 
 /* Sequencer Status */
 #define SEQ_STATUS BIT(5)
+#define CHARGE_STEP		0x11
 
 #define ADC_CLK			3000000
 #define TOTAL_STEPS		16

commit 344d635b9a41b19837ccf8083a99ea688027019c
Author: Brad Griffis <bgriffis@ti.com>
Date:   Tue Feb 3 11:44:12 2015 -0800

    Input: ti_am335x_tsc - remove udelay in interrupt handler
    
    TSC interrupt handler had udelay to avoid reporting of false pen-up
    interrupt to user space. This patch implements workaround suggesting in
    Advisory 1.0.31 of silicon errata for am335x, thus eliminating udelay and
    touchscreen lag. This also improves performance of touchscreen and
    eliminates sudden jump of cursor at touch release.
    
    IDLECONFIG and CHARGECONFIG registers are to be configured with same values
    in order to eliminate false pen-up events. This workaround may result in
    false pen-down to be detected, hence considerable charge step delay needs
    to be added. The charge delay is set to 0xB000 (in terms of ADC clock
    cycles) by default.
    
    TSC steps are disabled at the end of every sampling cycle and EOS bit is
    set. Once the EOS bit is set, the TSC steps need to be re-enabled to begin
    next sampling cycle.
    
    Signed-off-by: Brad Griffis <bgriffis@ti.com>
    [vigneshr@ti.com: Ported the patch from v3.12 to v3.19rc1]
    Signed-off-by: Vignesh R <vigneshr@ti.com>
    Signed-off-by: Dmitry Torokhov <dmitry.torokhov@gmail.com>

diff --git a/include/linux/mfd/ti_am335x_tscadc.h b/include/linux/mfd/ti_am335x_tscadc.h
index e2e70053470e..3f4e994ace2b 100644
--- a/include/linux/mfd/ti_am335x_tscadc.h
+++ b/include/linux/mfd/ti_am335x_tscadc.h
@@ -52,6 +52,7 @@
 
 /* IRQ enable */
 #define IRQENB_HW_PEN		BIT(0)
+#define IRQENB_EOS		BIT(1)
 #define IRQENB_FIFO0THRES	BIT(2)
 #define IRQENB_FIFO0OVRRUN	BIT(3)
 #define IRQENB_FIFO0UNDRFLW	BIT(4)
@@ -107,7 +108,7 @@
 /* Charge delay */
 #define CHARGEDLY_OPEN_MASK	(0x3FFFF << 0)
 #define CHARGEDLY_OPEN(val)	((val) << 0)
-#define CHARGEDLY_OPENDLY	CHARGEDLY_OPEN(1)
+#define CHARGEDLY_OPENDLY	CHARGEDLY_OPEN(0x400)
 
 /* Control register */
 #define CNTRLREG_TSCSSENB	BIT(0)

commit f0933a60d1902c918249d11fb6d9a5ffd581ef5b
Author: Jeff Lance <j-lance1@ti.com>
Date:   Thu Sep 4 19:01:57 2014 +0200

    mfd: ti_am335x_tscadc: Update logic in CTRL register for 5-wire TS
    
    The logic in AFE_Pen_Ctrl bitmask in the CTRL register is different for five
    wire versus four or eight wire touschscreens. This patch should fix this for
    five-wire touch screens. There should be no change needed here for four and
    eight wire tousch screens.
    
    Signed-off-by: Jeff Lance <j-lance1@ti.com>
    [bigeasy: keep the change mfd only]
    Signed-off-by: Sebastian Andrzej Siewior <bigeasy@linutronix.de>
    Signed-off-by: Lee Jones <lee.jones@linaro.org>

diff --git a/include/linux/mfd/ti_am335x_tscadc.h b/include/linux/mfd/ti_am335x_tscadc.h
index fb96c84dada5..e2e70053470e 100644
--- a/include/linux/mfd/ti_am335x_tscadc.h
+++ b/include/linux/mfd/ti_am335x_tscadc.h
@@ -155,6 +155,7 @@ struct ti_tscadc_dev {
 	void __iomem *tscadc_base;
 	int irq;
 	int used_cells;	/* 1-2 */
+	int tsc_wires;
 	int tsc_cell;	/* -1 if not used */
 	int adc_cell;	/* -1 if not used */
 	struct mfd_cell cells[TSCADC_CELLS];

commit 7ca6740cd1cd410828a01151a044b51910d06eff
Author: Sebastian Andrzej Siewior <bigeasy@linutronix.de>
Date:   Thu Dec 19 16:28:31 2013 +0100

    mfd: input: iio: ti_amm335x: Rework TSC/ADC synchronization
    
    The ADC driver always programs all possible ADC values and discards
    them except for the value IIO asked for. On the am335x-evm the driver
    programs four values and it takes 500us to gather them. Reducing the number
    of conversations down to the (required) one also reduces the busy loop down
    to 125us.
    
    This leads to another error, namely the FIFOCOUNT register is sometimes
    (like one out of 10 attempts) not updated in time leading to EBUSY.
    The next read has the FIFOCOUNT register updated.
    Checking for the ADCSTAT register for being idle isn't a good choice either.
    The problem is that if TSC is used at the same time, the HW completes the
    conversation for ADC *and* before the driver noticed it, the HW begins to
    perform a TSC conversation and so the driver never seen the HW idle. The
    next time we would have two values in the FIFO but since the driver reads
    everything we always see the current one.
    So instead of polling for the IDLE bit in ADCStatus register, we should
    check the FIFOCOUNT register. It should be one instead of zero because we
    request one value.
    
    This change in turn leads to another error. Sometimes if TSC & ADC are
    used together the TSC starts generating interrupts even if nobody
    actually touched the touchscreen. The interrupts seem valid because TSC's
    FIFO is filled with values for each channel of the TSC. This condition stops
    after a few ADC reads but will occur again. Not good.
    
    On top of this (even without the changes I just mentioned) there is a ADC
    & TSC lockup condition which was reported to me by Jeff Lance including the
    following test case:
    A busy loop of "cat /sys/bus/iio/devices/iio\:device0/in_voltage4_raw"
    and a mug on touch screen. With this setup, the hardware will lockup after
    something between 20 minutes and it could take up to a couple of hours.
    During that lockup, the ADCSTAT register says 0x30 (or 0x70) which means
    STEP_ID = IDLE and FSM_BUSY = yes. That means the hardware says that it is
    idle and busy at the same time which is an invalid condition.
    
    For all this reasons I decided to rework this TSC/ADC part and add a
    handshake / synchronization here:
    First the ADC signals that it needs the HW and writes a 0 mask into the
    SE register. The HW (if active) will complete the current conversation
    and become idle. The TSC driver will gather the values from the FIFO
    (woken up by an interrupt) and won't "enable" another conversation.
    Instead it will wake up the ADC driver which is already waiting. The ADC
    driver will start "its" conversation and once it is done, it will
    enable the TSC steps so the TSC will work again.
    
    After this rework I haven't observed the lockup so far. Plus the busy
    loop has been reduced from 500us to 125us.
    
    The continues-read mode remains unchanged.
    
    Signed-off-by: Sebastian Andrzej Siewior <bigeasy@linutronix.de>
    Acked-by: Jonathan Cameron <jic23@kernel.org>
    Signed-off-by: Lee Jones <lee.jones@linaro.org>

diff --git a/include/linux/mfd/ti_am335x_tscadc.h b/include/linux/mfd/ti_am335x_tscadc.h
index 2fa9c0613da4..fb96c84dada5 100644
--- a/include/linux/mfd/ti_am335x_tscadc.h
+++ b/include/linux/mfd/ti_am335x_tscadc.h
@@ -159,6 +159,9 @@ struct ti_tscadc_dev {
 	int adc_cell;	/* -1 if not used */
 	struct mfd_cell cells[TSCADC_CELLS];
 	u32 reg_se_cache;
+	bool adc_waiting;
+	bool adc_in_use;
+	wait_queue_head_t reg_se_wait;
 	spinlock_t reg_lock;
 	unsigned int clk_div;
 
@@ -179,5 +182,6 @@ static inline struct ti_tscadc_dev *ti_tscadc_dev_get(struct platform_device *p)
 void am335x_tsc_se_set_cache(struct ti_tscadc_dev *tsadc, u32 val);
 void am335x_tsc_se_set_once(struct ti_tscadc_dev *tsadc, u32 val);
 void am335x_tsc_se_clr(struct ti_tscadc_dev *tsadc, u32 val);
+void am335x_tsc_se_adc_done(struct ti_tscadc_dev *tsadc);
 
 #endif

commit 7e170c6e4f7501bea900aa66b2b27a6ce5001e25
Author: Sebastian Andrzej Siewior <bigeasy@linutronix.de>
Date:   Thu Dec 19 16:28:29 2013 +0100

    mfd: ti_am335x_tscadc: Don't read back REG_SE
    
    The purpose of reg_se_cache has been defeated. It should avoid the
    read-back of the register to avoid the latency and the fact that the
    bits are reset to 0 after the individual conversation took place.
    
    The reason why this is required like this to work, is that read-back of
    the register removes the bits of the ADC so they do not start another
    conversation after the register is re-written from the TSC side for the
    update.
    To avoid the not required read-back I introduce a "set once" variant which
    does not update the cache mask. After the conversation completes, the
    bit is removed from the SE register anyway and we don't plan a new
    conversation "any time soon". The current set function is renamed to
    set_cache to distinguish the two operations.
    This is a small preparation for a larger sync-rework.
    
    Signed-off-by: Sebastian Andrzej Siewior <bigeasy@linutronix.de>
    Acked-by: Dmitry Torokhov <dmitry.torokhov@gmail.com>
    Acked-by: Jonathan Cameron <jic23@kernel.org>
    Signed-off-by: Lee Jones <lee.jones@linaro.org>

diff --git a/include/linux/mfd/ti_am335x_tscadc.h b/include/linux/mfd/ti_am335x_tscadc.h
index 1fe72199e670..2fa9c0613da4 100644
--- a/include/linux/mfd/ti_am335x_tscadc.h
+++ b/include/linux/mfd/ti_am335x_tscadc.h
@@ -176,7 +176,8 @@ static inline struct ti_tscadc_dev *ti_tscadc_dev_get(struct platform_device *p)
 	return *tscadc_dev;
 }
 
-void am335x_tsc_se_set(struct ti_tscadc_dev *tsadc, u32 val);
+void am335x_tsc_se_set_cache(struct ti_tscadc_dev *tsadc, u32 val);
+void am335x_tsc_se_set_once(struct ti_tscadc_dev *tsadc, u32 val);
 void am335x_tsc_se_clr(struct ti_tscadc_dev *tsadc, u32 val);
 
 #endif

commit 3466bd2273b81a0a29d0e134ba1c78b64b84f40b
Author: Sebastian Andrzej Siewior <bigeasy@linutronix.de>
Date:   Thu Dec 19 16:28:28 2013 +0100

    mfd: ti_am335x_tscadc: Make am335x_tsc_se_update() local
    
    Since the "recent" changes, am335x_tsc_se_update() has no longer any
    users outside of this file so make it local.
    
    Signed-off-by: Sebastian Andrzej Siewior <bigeasy@linutronix.de>
    Signed-off-by: Lee Jones <lee.jones@linaro.org>

diff --git a/include/linux/mfd/ti_am335x_tscadc.h b/include/linux/mfd/ti_am335x_tscadc.h
index d498d98f0c2c..1fe72199e670 100644
--- a/include/linux/mfd/ti_am335x_tscadc.h
+++ b/include/linux/mfd/ti_am335x_tscadc.h
@@ -176,7 +176,6 @@ static inline struct ti_tscadc_dev *ti_tscadc_dev_get(struct platform_device *p)
 	return *tscadc_dev;
 }
 
-void am335x_tsc_se_update(struct ti_tscadc_dev *tsadc);
 void am335x_tsc_se_set(struct ti_tscadc_dev *tsadc, u32 val);
 void am335x_tsc_se_clr(struct ti_tscadc_dev *tsadc, u32 val);
 

commit db0b2d01163cc3050eb52a979541e0d16553be48
Merge: 16cd9d1c0f14 90b128ed1557
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Fri Nov 15 16:37:40 2013 -0800

    Merge tag 'mfd-3.13-1' of git://git.kernel.org/pub/scm/linux/kernel/git/sameo/mfd-next
    
    Pull MFD updates from Samuel Ortiz:
     "For the 3.13 merge window we have a couple of new drivers for the AMS
      AS3722 PMIC and for STMicroelectronics STw481x PMIC.
    
      Although this is a smaller update than usual, we also have:
    
       - Device tree support for the max77693 driver
    
       - linux/of.h inclusion for all DT compatible MFD drivers, to avoid
         build breakage in the future
    
       - Support for Intel Wildcat Point-LP PCH through the lpc_ich driver
    
       - A small arizona update for new wm5110 DSP registers and a few fixes
    
       - A small palmas update as well, including an of_device table
         addition and a few minor fixes
    
       - Two small mfd-core changes, one including a memory leak fix for
         when mfd_add_device() fails
    
       - Our usual round of minor cleanups and janitorial fixes"
    
    * tag 'mfd-3.13-1' of git://git.kernel.org/pub/scm/linux/kernel/git/sameo/mfd-next: (63 commits)
      Documentation: mfd: Update s2mps11.txt
      mfd: pm8921: Potential NULL dereference in pm8921_remove()
      mfd: Fix memory leak in mfd_add_devices()
      mfd: Stop setting refcounting pointers in original mfd_cell arrays
      mfd: wm5110: Enable micd clamp functionality
      mfd: lpc_ich: Add Device IDs for Intel Wildcat Point-LP PCH
      mfd: max77693: Fix up bug of wrong interrupt number
      mfd: as3722: Don't export the regmap config
      mfd: twl6040: Remove obsolete cleanup for i2c clientdata
      mfd: tps65910: Remove warning during dt node parsing
      mfd: lpc_sch: Ignore resource conflicts when adding mfd cells
      mfd: ti_am335x_tscadc: Avoid possible deadlock of reg_lock
      mfd: syscon: Return -ENOSYS if CONFIG_MFD_SYSCON is not enabled
      mfd: Add support for ams AS3722 PMIC
      mfd: max77693: Include linux/of.h header
      mfd: tc3589x: Detect the precise version
      mfd: omap-usb: prepare/unprepare clock while enable/disable
      mfd: max77686: Include linux/of.h header
      mfd: max8907: Include linux/of.h header
      mfd: max8997: Include linux/of.h header
      ...

commit e90f875419967589d75d1a3e2b89c5f2720e794e
Author: Matthias Kaehlcke <matthias.list@kaehlcke.net>
Date:   Mon Sep 23 22:43:29 2013 +0200

    mfd: ti_am335x_tscadc: Restore clock divider on resume
    
    The ADC clock divider needs to be restored on resume as the register content
    is lost when the ADC is powered down
    
    Signed-off-by: Matthias Kaehlcke <matthias@kaehlcke.net>
    Signed-off-by: Lee Jones <lee.jones@linaro.org>

diff --git a/include/linux/mfd/ti_am335x_tscadc.h b/include/linux/mfd/ti_am335x_tscadc.h
index 4befdb85dd9c..7b68a061cd60 100644
--- a/include/linux/mfd/ti_am335x_tscadc.h
+++ b/include/linux/mfd/ti_am335x_tscadc.h
@@ -151,6 +151,7 @@ struct ti_tscadc_dev {
 	struct mfd_cell cells[TSCADC_CELLS];
 	u32 reg_se_cache;
 	spinlock_t reg_lock;
+	unsigned int clk_div;
 
 	/* tsc device */
 	struct titsc *tsc;

commit 1a54b7dabf8f20df2894aed9683155ff89fc20e8
Author: Matthias Kaehlcke <matthias.list@kaehlcke.net>
Date:   Tue Sep 10 23:02:18 2013 +0200

    mfd: ti_am335x_tscadc: Fix idle timeout value
    
    The old timeout value was based on the assumption that the minimum values are
    used for the open and sample delay and no averaging is done. In fact the ADC
    and touchscreen driver both use an open delay of 152 cycles and averaging over
    16 samples. This patch adjusts the timeout value accordingly
    
    Signed-off-by: Matthias Kaehlcke <matthias@kaehlcke.net>
    Signed-off-by: Lee Jones <lee.jones@linaro.org>

diff --git a/include/linux/mfd/ti_am335x_tscadc.h b/include/linux/mfd/ti_am335x_tscadc.h
index 25f2c611ab01..4befdb85dd9c 100644
--- a/include/linux/mfd/ti_am335x_tscadc.h
+++ b/include/linux/mfd/ti_am335x_tscadc.h
@@ -125,13 +125,18 @@
 #define TOTAL_CHANNELS		8
 
 /*
-* ADC runs at 3MHz, and it takes
-* 15 cycles to latch one data output.
-* Hence the idle time for ADC to
-* process one sample data would be
-* around 5 micro seconds.
-*/
-#define IDLE_TIMEOUT 5 /* microsec */
+ * time in us for processing a single channel, calculated as follows:
+ *
+ * num cycles = open delay + (sample delay + conv time) * averaging
+ *
+ * num cycles: 152 + (1 + 13) * 16 = 376
+ *
+ * clock frequency: 26MHz / 8 = 3.25MHz
+ * clock period: 1 / 3.25MHz = 308ns
+ *
+ * processing time: 376 * 308ns = 116us
+ */
+#define IDLE_TIMEOUT 116 /* microsec */
 
 #define TSCADC_CELLS		2
 

commit 3ffdea3feca9e2c95c2e93e217d77c9c368f747a
Merge: 9076b09e07da 074b6a8d9d73
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Sun Sep 22 11:30:12 2013 -0700

    Merge tag 'iio-for-3.13a' of git://git.kernel.org/pub/scm/linux/kernel/git/jic23/iio into staging-next
    
    Jonathan writes:
    
    First round of new drivers, functionality and cleanups for IIO in the 3.13 cycle
    
    A number of new drivers and some new functionality + a lot of cleanups
    all over IIO.
    
    New Core Elements
    
    1) New INT_TIME info_mask element for integration time, which may have
       different effects on measurement noise and similar, than an amplifier
       and hence is different from existing SCALE.  Already existed in some
       drivers as a custom attribute.
    
    2) Introduce a iio_push_buffers_with_timestamp helper to cover the common
       case of filling the last 64 bits of data to be passed to the buffer with
       a timestamp.  Applied to lots of drivers. Cuts down on repeated code and
       moves a slightly fiddly bit of logic into a single location.
    
    3) Introduce info_mask_[shared_by_dir/shared_by_all] elements to allow support
       of elements such as sampling_frequency which is typically shared by all
       input channels on a device.  This reduces code and makes these controls
       available from in kernel consumers of IIO devices.
    
    New drivers
    
    1) MCP3422/3/4 ADC
    
    2) TSL4531 ambient light sensor
    
    3) TCS3472/5 color light sensor
    
    4) GP2AP020A00F ambient light / proximity sensor
    
    5) LPS001WP support added to ST pressure sensor driver.
    
    New driver functionality
    
    1) ti_am335x_adc Add buffered sampling support.
       This device has a hardware fifo that is fed directly into an IIO kfifo
       buffer based on a watershed interrupt.  Note this will act as an example
       of how to handle this increasingly common type of device.
       The only previous example - sca3000 - take a less than optimal approach
       which is largely why it is still in staging.
       A couple of little cleanups for that new functionality followed later.
    
    Core cleanups:
    
    1) MAINTAINERS - Sachin actually brought my email address up to date because
       I said I'd do it and never got around to it :)
    
    2) Assign buffer list elements as single element lists to simplify the
       iio_buffer_is_active logic.
    
    3) wake_up_interruptible_poll instead of wake_up_interruptible to only wake
       up threads waiting for poll notifications.
    
    4) Add O_CLOEXEC flag to anon_inode_get_fd call for IIO event interface.
    
    5) Change iio_push_to_buffers to take a void * pointer so as to avoid some
       annoying and unnecessary type casts.
    
    6) iio_compute_scan_bytes incorrectly took a long rather than unsigned long.
    
    7) Various minor tidy ups.
    
    Driver cleanups (in no particular order)
    
    1) Another set of devm_ allocations patches from Sachin Kamat.
    
    2) tsl2x7x - 0 to NULL cleanup.
    
    3) hmc5843 - fix missing > in MODULE_AUTHOR
    
    4) Set of strict_strto* to kstrto* conversions.
    
    5) mxs-lradc - fix ordering of resource removal to match creation
    
    6) mxs-lradc - add MODULE_ALIAS
    
    7) adc7606 - drop a work pending test duplicated in core functions.
    
    8) hmc5843 - devm_ allocation patch
    
    9) Series of redundant breaks removed.
    
    10) ad2s1200 - pr_err -> dev_err
    
    11) adjd_s311 - use INT_TIME
    
    12)  ST sensors - large set of cleanups from Lee Jones and removed restriction
        to using only triggers provided by the st_sensors themselves from
        Dennis Ciocca.
    
    13) dummy and tmp006 provide sampling_frequency via info_mask_shared_by_all.
    
    14) tcs3472 - fix incorrect buffer size and wrong device pointer used in
        suspend / resume functions.
    
    15) max1363 - use defaults for buffer setup ops as provided by the triggered
        buffer helpers as they are the same as were specified in max1363 driver.
    
    16) Trivial tidy ups in a number of other drivers.

commit ca9a563805f7ae821e3303b1bdbc65d3a3c783ff
Author: Zubair Lutfullah <zubair.lutfullah@gmail.com>
Date:   Thu Sep 19 07:24:00 2013 +0100

    iio: ti_am335x_adc: Add continuous sampling support
    
    Previously the driver had only one-shot reading functionality.
    This patch adds continuous sampling support to the driver.
    
    Continuous sampling starts when buffer is enabled.
    HW IRQ wakes worker thread that pushes samples to userspace.
    Sampling stops when buffer is disabled by userspace.
    
    Patil Rachna (TI) laid the ground work for ADC HW register access.
    Russ Dill (TI) fixed bugs in the driver relevant to FIFOs and IRQs.
    
    I fixed channel scanning so multiple ADC channels can be read
    simultaneously and pushed to userspace.
    Restructured the driver to fit IIO ABI.
    And added INDIO_BUFFER_HARDWARE mode.
    
    Signed-off-by: Zubair Lutfullah <zubair.lutfullah@gmail.com>
    Acked-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Russ Dill <Russ.Dill@ti.com>
    Acked-by: Lee Jones <lee.jones@linaro.org>
    Acked-by: Sebastian Andrzej Siewior <bigeasy@linutronix.de>
    Signed-off-by: Jonathan Cameron <jic23@kernel.org>

diff --git a/include/linux/mfd/ti_am335x_tscadc.h b/include/linux/mfd/ti_am335x_tscadc.h
index db1791bb997a..7d98562b3b51 100644
--- a/include/linux/mfd/ti_am335x_tscadc.h
+++ b/include/linux/mfd/ti_am335x_tscadc.h
@@ -46,16 +46,24 @@
 /* Step Enable */
 #define STEPENB_MASK		(0x1FFFF << 0)
 #define STEPENB(val)		((val) << 0)
+#define ENB(val)			(1 << (val))
+#define STPENB_STEPENB		STEPENB(0x1FFFF)
+#define STPENB_STEPENB_TC	STEPENB(0x1FFF)
 
 /* IRQ enable */
 #define IRQENB_HW_PEN		BIT(0)
 #define IRQENB_FIFO0THRES	BIT(2)
+#define IRQENB_FIFO0OVRRUN	BIT(3)
+#define IRQENB_FIFO0UNDRFLW	BIT(4)
 #define IRQENB_FIFO1THRES	BIT(5)
+#define IRQENB_FIFO1OVRRUN	BIT(6)
+#define IRQENB_FIFO1UNDRFLW	BIT(7)
 #define IRQENB_PENUP		BIT(9)
 
 /* Step Configuration */
 #define STEPCONFIG_MODE_MASK	(3 << 0)
 #define STEPCONFIG_MODE(val)	((val) << 0)
+#define STEPCONFIG_MODE_SWCNT	STEPCONFIG_MODE(1)
 #define STEPCONFIG_MODE_HWSYNC	STEPCONFIG_MODE(2)
 #define STEPCONFIG_AVG_MASK	(7 << 2)
 #define STEPCONFIG_AVG(val)	((val) << 2)
@@ -124,6 +132,7 @@
 #define	MAX_CLK_DIV		7
 #define TOTAL_STEPS		16
 #define TOTAL_CHANNELS		8
+#define FIFO1_THRESHOLD		19
 
 /*
 * ADC runs at 3MHz, and it takes

commit 8de4651abe61c6b6a94a70a57ef163020fed05ee
Merge: 327fff3e1391 9c31e8840836
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Sat Sep 7 20:14:19 2013 -0700

    Merge tag 'mfd-3.12-1' of git://git.kernel.org/pub/scm/linux/kernel/git/sameo/mfd-next
    
    Pull MFD (multi-function device) updates from Samuel Ortiz:
     "For the 3.12 merge window we have one new driver for the DA9063 PMIC
      from Dialog Semiconductor.
    
      Besides that driver we also have:
    
       - Device tree support for the s2mps11 driver
    
       - More devm_* conversion for the pm8921, max89xx, menelaus, tps65010,
         wl1273 and pcf50633-adc drivers.
    
       - A conversion to threaded IRQ and IRQ domain for the twl6030 driver.
    
       - A fairly big update for the rtsx driver: Better power saving
         support, better vendor settings handling, and a few fixes.
    
       - Support for a couple more boards (COMe-bHL6 and COMe-cTH6) for the
         Kontron driver.
    
       - A conversion to the dev_get_platdata() API for all MFD drivers.
    
       - A removal of non-DT (legacy) support for the twl6040 driver.
    
       - A few fixes and additions (Mic detect level) to the wm5110 register
         tables.
    
       - Regmap support for the davinci_voicecodec driver.
    
       - The usual bunch of minor cleanups and janitorial fixes"
    
    * tag 'mfd-3.12-1' of git://git.kernel.org/pub/scm/linux/kernel/git/sameo/mfd-next: (81 commits)
      mfd: ucb1x00-core: Rewrite ucb1x00_add_dev()
      mfd: ab8500-debugfs: Apply a check for -ENOMEM after allocating memory for event name
      mfd: ab8500-debugfs: Apply a check for -ENOMEM after allocating memory for sysfs
      mfd: timberdale: Use module_pci_driver
      mfd: timberdale: Remove redundant break
      mfd: timberdale: Staticize local variables
      mfd: ab8500-debugfs: Staticize local variables
      mfd: db8500-prcmu: Staticize clk_mgt
      mfd: db8500-prcmu: Use ANSI function declaration
      mfd: omap-usb-host: Staticize usbhs_driver_name
      mfd: 88pm805: Fix potential NULL pdata dereference
      mfd: 88pm800: Fix potential NULL pdata dereference
      mfd: twl6040: Use regmap for register cache
      mfd: davinci_voicecodec: Provide a regmap for register I/O
      mfd: davinci_voicecodec: Remove unused read and write functions
      mmc: memstick: rtsx: Modify copyright comments
      mmc: rtsx: Clear SD_CLK toggle enable bit if switching voltage fail
      mfd: mmc: rtsx: Change default tx phase
      mfd: pcf50633-adc: Use devm_*() functions
      mfd: rtsx: Copyright modifications
      ...

commit efe3126afce32e3100af3029a80701d47e1b6999
Author: Patil, Rachna <rachna@ti.com>
Date:   Sat Jul 20 17:27:35 2013 +0100

    MFD: ti_tscadc: ADC Clock check not required
    
    ADC is ideally expected to work at a frequency of 3MHz.
    The present code had a check, which returned error if the frequency
    went below the threshold  value. But since AM335x supports various
    working frequencies, this check is not required.
    Now the code just uses the internal ADC clock divider to set the ADC
    frequency w.r.t the sys clock.
    
    Signed-off-by: Patil, Rachna <rachna@ti.com>
    Signed-off-by: Zubair Lutfullah <zubair.lutfullah@gmail.com>
    Signed-off-by: Lee Jones <lee.jones@linaro.org>
    Signed-off-by: Samuel Ortiz <sameo@linux.intel.com>

diff --git a/include/linux/mfd/ti_am335x_tscadc.h b/include/linux/mfd/ti_am335x_tscadc.h
index 8d73fe29796a..71bb41c32a64 100644
--- a/include/linux/mfd/ti_am335x_tscadc.h
+++ b/include/linux/mfd/ti_am335x_tscadc.h
@@ -114,7 +114,6 @@
 #define CNTRLREG_TSCENB		BIT(7)
 
 #define ADC_CLK			3000000
-#define	MAX_CLK_DIV		7
 #define TOTAL_STEPS		16
 #define TOTAL_CHANNELS		8
 

commit b1451e546899bc8f450773b2af02e0cd000cf1fa
Author: Patil, Rachna <rachna@ti.com>
Date:   Sat Jul 20 17:27:00 2013 +0100

    iio: ti_am335x_adc: Fix wrong samples received on 1st read
    
    Previously we tried to read data form ADC even before ADC sequencer
    finished sampling. This led to wrong samples.
    We now wait on ADC status register idle bit to be set.
    
    Signed-off-by: Patil, Rachna <rachna@ti.com>
    Signed-off-by: Zubair Lutfullah <zubair.lutfullah@gmail.com>
    Signed-off-by: Jonathan Cameron <jic23@kernel.org>

diff --git a/include/linux/mfd/ti_am335x_tscadc.h b/include/linux/mfd/ti_am335x_tscadc.h
index 8d73fe29796a..db1791bb997a 100644
--- a/include/linux/mfd/ti_am335x_tscadc.h
+++ b/include/linux/mfd/ti_am335x_tscadc.h
@@ -113,11 +113,27 @@
 #define CNTRLREG_8WIRE		CNTRLREG_AFE_CTRL(3)
 #define CNTRLREG_TSCENB		BIT(7)
 
+/* FIFO READ Register */
+#define FIFOREAD_DATA_MASK (0xfff << 0)
+#define FIFOREAD_CHNLID_MASK (0xf << 16)
+
+/* Sequencer Status */
+#define SEQ_STATUS BIT(5)
+
 #define ADC_CLK			3000000
 #define	MAX_CLK_DIV		7
 #define TOTAL_STEPS		16
 #define TOTAL_CHANNELS		8
 
+/*
+* ADC runs at 3MHz, and it takes
+* 15 cycles to latch one data output.
+* Hence the idle time for ADC to
+* process one sample data would be
+* around 5 micro seconds.
+*/
+#define IDLE_TIMEOUT 5 /* microsec */
+
 #define TSCADC_CELLS		2
 
 struct ti_tscadc_dev {

commit 8c896308feae7fb2e8da4ae4c09fe2d2ca18ad7b
Author: Sebastian Andrzej Siewior <bigeasy@linutronix.de>
Date:   Wed May 29 14:46:21 2013 +0200

    input: ti_am335x_adc: use only FIFO0 and clean up a little
    
    The driver programs a threshold of "coordinate_readouts" say 5. The
    REG_FIFO0THR registers says it should it be programmed to "threshold
    minus one". The driver does not expect just 5 coordinates but 5 * 2 + 2.
    Multiplied by two because 5 for X and 5 for Y and plus 2 because we have
    two Z.
    The whole thing kind of works because It reads the 5 coordinates for X
    and Y from FIFO0 and FIFO1 and the last element in each FIFO is ignored
    within the loop and read later.
    Nothing guaranties that FIFO1 is ready by the time it is read. In fact I
    could see that that FIFO1 reaturns for Y channels 8,9, 10, 12, 6 and for
    Y channel 7 for Z. The problem is that channel 7 and channel 12 got
    somehow mixed up.
    The other Problem is that FIFO1 is also used by the IIO part leading to
    wrong results if both (tsc & adc) are used.
    
    The patch tries to clean up the whole thing a little:
    - Remove the +1 and -1 in REG_STEPCONFIG, REG_STEPDELAY and its counter
      part in the for loop. This is just confusing.
    
    - Use only FIFO0 in TSC. The fifo has space for 64 entries so should be
      fine.
    
    - Read the whole FIFO in one function and check the channel.
    
    - in case we dawdle around, make sure we only read a multiple of our
      coordinate set. On the second interrupt we will cleanup the remaining
      enties.
    
    Acked-by: Dmitry Torokhov <dmitry.torokhov@gmail.com>
    Signed-off-by: Sebastian Andrzej Siewior <bigeasy@linutronix.de>

diff --git a/include/linux/mfd/ti_am335x_tscadc.h b/include/linux/mfd/ti_am335x_tscadc.h
index 533f200e6d0e..8d73fe29796a 100644
--- a/include/linux/mfd/ti_am335x_tscadc.h
+++ b/include/linux/mfd/ti_am335x_tscadc.h
@@ -30,8 +30,8 @@
 #define REG_IDLECONFIG		0x058
 #define REG_CHARGECONFIG	0x05C
 #define REG_CHARGEDELAY		0x060
-#define REG_STEPCONFIG(n)	(0x64 + ((n - 1) * 8))
-#define REG_STEPDELAY(n)	(0x68 + ((n - 1) * 8))
+#define REG_STEPCONFIG(n)	(0x64 + ((n) * 8))
+#define REG_STEPDELAY(n)	(0x68 + ((n) * 8))
 #define REG_FIFO0CNT		0xE4
 #define REG_FIFO0THR		0xE8
 #define REG_FIFO1CNT		0xF0

commit a3e509bb328287beba05017037e505bc53b62724
Author: Sebastian Andrzej Siewior <bigeasy@linutronix.de>
Date:   Tue May 21 18:49:58 2013 +0200

    input: mfd: ti_am335x_tsc remove remaining platform data pieces
    
    The two header files removed here are unused and have no users as this
    platform was never used with platform devices.
    
    Signed-off-by: Sebastian Andrzej Siewior <bigeasy@linutronix.de>

diff --git a/include/linux/mfd/ti_am335x_tscadc.h b/include/linux/mfd/ti_am335x_tscadc.h
index fe54ba4a3b2f..533f200e6d0e 100644
--- a/include/linux/mfd/ti_am335x_tscadc.h
+++ b/include/linux/mfd/ti_am335x_tscadc.h
@@ -120,11 +120,6 @@
 
 #define TSCADC_CELLS		2
 
-struct mfd_tscadc_board {
-	struct tsc_data *tsc_init;
-	struct adc_data *adc_init;
-};
-
 struct ti_tscadc_dev {
 	struct device *dev;
 	struct regmap *regmap_tscadc;

commit 24d5c82f8227d4dedf177df3f062eb35db15aaf6
Author: Pantelis Antoniou <panto@antoniou-consulting.com>
Date:   Sat Oct 13 16:37:24 2012 +0300

    mfd: ti_tscadc: deal with partial activation
    
    Fix the mfd device in the case where a subdevice might not be activated.
    
    Signed-off-by: Pantelis Antoniou <panto@antoniou-consulting.com>
    Signed-off-by: Felipe Balbi <balbi@ti.com>
    Signed-off-by: Sebastian Andrzej Siewior <bigeasy@linutronix.de>

diff --git a/include/linux/mfd/ti_am335x_tscadc.h b/include/linux/mfd/ti_am335x_tscadc.h
index e36ae4184917..fe54ba4a3b2f 100644
--- a/include/linux/mfd/ti_am335x_tscadc.h
+++ b/include/linux/mfd/ti_am335x_tscadc.h
@@ -120,11 +120,6 @@
 
 #define TSCADC_CELLS		2
 
-enum tscadc_cells {
-	TSC_CELL,
-	ADC_CELL,
-};
-
 struct mfd_tscadc_board {
 	struct tsc_data *tsc_init;
 	struct adc_data *adc_init;
@@ -135,6 +130,9 @@ struct ti_tscadc_dev {
 	struct regmap *regmap_tscadc;
 	void __iomem *tscadc_base;
 	int irq;
+	int used_cells;	/* 1-2 */
+	int tsc_cell;	/* -1 if not used */
+	int adc_cell;	/* -1 if not used */
 	struct mfd_cell cells[TSCADC_CELLS];
 	u32 reg_se_cache;
 	spinlock_t reg_lock;

commit bb76dc09ddfc135c6c5e8eb7d3c583bfa8bdd439
Author: Patil, Rachna <rachna@ti.com>
Date:   Thu Jan 24 03:45:06 2013 +0000

    input: ti_am33x_tsc: Order of TSC wires, made configurable
    
    The current driver expected touchscreen input
    wires(XP,XN,YP,YN) to be connected in a particular order.
    Making changes to accept this as platform data.
    
    Sebastian reworked the original patch and removed a lot of the not
    required pieces.
    
    Signed-off-by: Patil, Rachna <rachna@ti.com>
    Signed-off-by: Felipe Balbi <balbi@ti.com>
    Signed-off-by: Sebastian Andrzej Siewior <bigeasy@linutronix.de>

diff --git a/include/linux/mfd/ti_am335x_tscadc.h b/include/linux/mfd/ti_am335x_tscadc.h
index 4258627d076a..e36ae4184917 100644
--- a/include/linux/mfd/ti_am335x_tscadc.h
+++ b/include/linux/mfd/ti_am335x_tscadc.h
@@ -71,8 +71,6 @@
 #define STEPCONFIG_INM_ADCREFM	STEPCONFIG_INM(8)
 #define STEPCONFIG_INP_MASK	(0xF << 19)
 #define STEPCONFIG_INP(val)	((val) << 19)
-#define STEPCONFIG_INP_AN2	STEPCONFIG_INP(2)
-#define STEPCONFIG_INP_AN3	STEPCONFIG_INP(3)
 #define STEPCONFIG_INP_AN4	STEPCONFIG_INP(4)
 #define STEPCONFIG_INP_ADCREFM	STEPCONFIG_INP(8)
 #define STEPCONFIG_FIFO1	BIT(26)
@@ -94,7 +92,6 @@
 #define STEPCHARGE_INM_AN1	STEPCHARGE_INM(1)
 #define STEPCHARGE_INP_MASK	(0xF << 19)
 #define STEPCHARGE_INP(val)	((val) << 19)
-#define STEPCHARGE_INP_AN1	STEPCHARGE_INP(1)
 #define STEPCHARGE_RFM_MASK	(3 << 23)
 #define STEPCHARGE_RFM(val)	((val) << 23)
 #define STEPCHARGE_RFM_XNUR	STEPCHARGE_RFM(1)

commit abeccee40320245a2a6a006dc8466a703cbd1d5e
Author: Patil, Rachna <rachna@ti.com>
Date:   Thu Jan 24 03:45:05 2013 +0000

    input: ti_am33x_tsc: Step enable bits made configurable
    
    Current code has hard coded value written to
    step enable bits. Now the bits are updated based
    on how many steps are needed to be configured got
    from platform data.
    
    The user needs to take care not to exceed
    the count more than 16. While using ADC and TSC
    one should take care to set this parameter correctly.
    
    Sebastian added the common lock and moved the code, that manipulates the
    steps, from into the mfd module.
    
    Signed-off-by: Patil, Rachna <rachna@ti.com>
    Signed-off-by: Felipe Balbi <balbi@ti.com>
    Signed-off-by: Sebastian Andrzej Siewior <bigeasy@linutronix.de>

diff --git a/include/linux/mfd/ti_am335x_tscadc.h b/include/linux/mfd/ti_am335x_tscadc.h
index 8114e4e8b91b..4258627d076a 100644
--- a/include/linux/mfd/ti_am335x_tscadc.h
+++ b/include/linux/mfd/ti_am335x_tscadc.h
@@ -46,8 +46,6 @@
 /* Step Enable */
 #define STEPENB_MASK		(0x1FFFF << 0)
 #define STEPENB(val)		((val) << 0)
-#define STPENB_STEPENB		STEPENB(0x1FFFF)
-#define STPENB_STEPENB_TC	STEPENB(0x1FFF)
 
 /* IRQ enable */
 #define IRQENB_HW_PEN		BIT(0)
@@ -141,6 +139,8 @@ struct ti_tscadc_dev {
 	void __iomem *tscadc_base;
 	int irq;
 	struct mfd_cell cells[TSCADC_CELLS];
+	u32 reg_se_cache;
+	spinlock_t reg_lock;
 
 	/* tsc device */
 	struct titsc *tsc;
@@ -156,4 +156,8 @@ static inline struct ti_tscadc_dev *ti_tscadc_dev_get(struct platform_device *p)
 	return *tscadc_dev;
 }
 
+void am335x_tsc_se_update(struct ti_tscadc_dev *tsadc);
+void am335x_tsc_se_set(struct ti_tscadc_dev *tsadc, u32 val);
+void am335x_tsc_se_clr(struct ti_tscadc_dev *tsadc, u32 val);
+
 #endif

commit a9bce1b03c2199e66d36cda8aac675338bc074a7
Author: Sebastian Andrzej Siewior <bigeasy@linutronix.de>
Date:   Wed Jun 5 16:13:47 2013 +0200

    mfd: input: iio: ti_am335x_adc: use one structure for ti_tscadc_dev
    
    The mfd driver creates platform data for the child devices and it is the
    ti_tscadc_dev struct. This struct is copied for the two devices.
    The copy of the structure makes a common lock in this structure a little
    less usefull. Therefore the platform data is not a pointer to the
    structure and the same structure is used.
    While doing the change I noticed that the suspend/resume code assumes
    the wrong pointer for ti_tscadc_dev and this has been fixed as well.
    
    Signed-off-by: Sebastian Andrzej Siewior <bigeasy@linutronix.de>

diff --git a/include/linux/mfd/ti_am335x_tscadc.h b/include/linux/mfd/ti_am335x_tscadc.h
index c79ad5d2f271..8114e4e8b91b 100644
--- a/include/linux/mfd/ti_am335x_tscadc.h
+++ b/include/linux/mfd/ti_am335x_tscadc.h
@@ -149,4 +149,11 @@ struct ti_tscadc_dev {
 	struct adc_device *adc;
 };
 
+static inline struct ti_tscadc_dev *ti_tscadc_dev_get(struct platform_device *p)
+{
+	struct ti_tscadc_dev **tscadc_dev = p->dev.platform_data;
+
+	return *tscadc_dev;
+}
+
 #endif

commit 5e53a69b44e893227b046a7bc74db3cb40d7f39b
Author: Patil, Rachna <rachna@ti.com>
Date:   Tue Oct 16 12:55:45 2012 +0530

    IIO : ADC: tiadc: Add support of TI's ADC driver
    
    This patch adds support for TI's ADC driver.
    This is a multifunctional device.
    Analog input lines are provided on which
    voltage measurements can be carried out.
    You can have upto 8 input lines.
    
    Signed-off-by: Patil, Rachna <rachna@ti.com>
    Acked-by: Jonathan Cameron <jic23@kernel.org>
    Signed-off-by: Samuel Ortiz <sameo@linux.intel.com>

diff --git a/include/linux/mfd/ti_am335x_tscadc.h b/include/linux/mfd/ti_am335x_tscadc.h
index fc18b2ef753f..c79ad5d2f271 100644
--- a/include/linux/mfd/ti_am335x_tscadc.h
+++ b/include/linux/mfd/ti_am335x_tscadc.h
@@ -120,15 +120,19 @@
 
 #define ADC_CLK			3000000
 #define	MAX_CLK_DIV		7
+#define TOTAL_STEPS		16
+#define TOTAL_CHANNELS		8
 
-#define TSCADC_CELLS		1
+#define TSCADC_CELLS		2
 
 enum tscadc_cells {
 	TSC_CELL,
+	ADC_CELL,
 };
 
 struct mfd_tscadc_board {
 	struct tsc_data *tsc_init;
+	struct adc_data *adc_init;
 };
 
 struct ti_tscadc_dev {
@@ -140,6 +144,9 @@ struct ti_tscadc_dev {
 
 	/* tsc device */
 	struct titsc *tsc;
+
+	/* adc device */
+	struct adc_device *adc;
 };
 
 #endif

commit 2b99bafab19145a72e2c557326fc4662a864a162
Author: Patil, Rachna <rachna@ti.com>
Date:   Tue Oct 16 12:55:44 2012 +0530

    input: TSC: ti_tsc: Convert TSC into a MFDevice
    
    This patch converts touchscreen into a MFD client.
    All the register definitions, clock initialization,
    etc has been moved to MFD core driver.
    
    Signed-off-by: Patil, Rachna <rachna@ti.com>
    Signed-off-by: Samuel Ortiz <sameo@linux.intel.com>

diff --git a/include/linux/mfd/ti_am335x_tscadc.h b/include/linux/mfd/ti_am335x_tscadc.h
index b7232b157061..fc18b2ef753f 100644
--- a/include/linux/mfd/ti_am335x_tscadc.h
+++ b/include/linux/mfd/ti_am335x_tscadc.h
@@ -47,6 +47,7 @@
 #define STEPENB_MASK		(0x1FFFF << 0)
 #define STEPENB(val)		((val) << 0)
 #define STPENB_STEPENB		STEPENB(0x1FFFF)
+#define STPENB_STEPENB_TC	STEPENB(0x1FFF)
 
 /* IRQ enable */
 #define IRQENB_HW_PEN		BIT(0)
@@ -120,7 +121,11 @@
 #define ADC_CLK			3000000
 #define	MAX_CLK_DIV		7
 
-#define TSCADC_CELLS		0
+#define TSCADC_CELLS		1
+
+enum tscadc_cells {
+	TSC_CELL,
+};
 
 struct mfd_tscadc_board {
 	struct tsc_data *tsc_init;
@@ -132,6 +137,9 @@ struct ti_tscadc_dev {
 	void __iomem *tscadc_base;
 	int irq;
 	struct mfd_cell cells[TSCADC_CELLS];
+
+	/* tsc device */
+	struct titsc *tsc;
 };
 
 #endif

commit 01636eb970a029897b06fb96026941429212ddd9
Author: Patil, Rachna <rachna@ti.com>
Date:   Tue Oct 16 12:55:43 2012 +0530

    mfd: ti_tscadc: Add support for TI's TSC/ADC MFDevice
    
    Add the mfd core driver which supports touchscreen
    and ADC.
    With this patch we are only adding infrastructure to
    support the MFD clients.
    
    Signed-off-by: Patil, Rachna <rachna@ti.com>
    Signed-off-by: Samuel Ortiz <sameo@linux.intel.com>

diff --git a/include/linux/mfd/ti_am335x_tscadc.h b/include/linux/mfd/ti_am335x_tscadc.h
new file mode 100644
index 000000000000..b7232b157061
--- /dev/null
+++ b/include/linux/mfd/ti_am335x_tscadc.h
@@ -0,0 +1,137 @@
+#ifndef __LINUX_TI_AM335X_TSCADC_MFD_H
+#define __LINUX_TI_AM335X_TSCADC_MFD_H
+
+/*
+ * TI Touch Screen / ADC MFD driver
+ *
+ * Copyright (C) 2012 Texas Instruments Incorporated - http://www.ti.com/
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License as
+ * published by the Free Software Foundation version 2.
+ *
+ * This program is distributed "as is" WITHOUT ANY WARRANTY of any
+ * kind, whether express or implied; without even the implied warranty
+ * of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ */
+
+#include <linux/mfd/core.h>
+
+#define REG_RAWIRQSTATUS	0x024
+#define REG_IRQSTATUS		0x028
+#define REG_IRQENABLE		0x02C
+#define REG_IRQCLR		0x030
+#define REG_IRQWAKEUP		0x034
+#define REG_CTRL		0x040
+#define REG_ADCFSM		0x044
+#define REG_CLKDIV		0x04C
+#define REG_SE			0x054
+#define REG_IDLECONFIG		0x058
+#define REG_CHARGECONFIG	0x05C
+#define REG_CHARGEDELAY		0x060
+#define REG_STEPCONFIG(n)	(0x64 + ((n - 1) * 8))
+#define REG_STEPDELAY(n)	(0x68 + ((n - 1) * 8))
+#define REG_FIFO0CNT		0xE4
+#define REG_FIFO0THR		0xE8
+#define REG_FIFO1CNT		0xF0
+#define REG_FIFO1THR		0xF4
+#define REG_FIFO0		0x100
+#define REG_FIFO1		0x200
+
+/*	Register Bitfields	*/
+/* IRQ wakeup enable */
+#define IRQWKUP_ENB		BIT(0)
+
+/* Step Enable */
+#define STEPENB_MASK		(0x1FFFF << 0)
+#define STEPENB(val)		((val) << 0)
+#define STPENB_STEPENB		STEPENB(0x1FFFF)
+
+/* IRQ enable */
+#define IRQENB_HW_PEN		BIT(0)
+#define IRQENB_FIFO0THRES	BIT(2)
+#define IRQENB_FIFO1THRES	BIT(5)
+#define IRQENB_PENUP		BIT(9)
+
+/* Step Configuration */
+#define STEPCONFIG_MODE_MASK	(3 << 0)
+#define STEPCONFIG_MODE(val)	((val) << 0)
+#define STEPCONFIG_MODE_HWSYNC	STEPCONFIG_MODE(2)
+#define STEPCONFIG_AVG_MASK	(7 << 2)
+#define STEPCONFIG_AVG(val)	((val) << 2)
+#define STEPCONFIG_AVG_16	STEPCONFIG_AVG(4)
+#define STEPCONFIG_XPP		BIT(5)
+#define STEPCONFIG_XNN		BIT(6)
+#define STEPCONFIG_YPP		BIT(7)
+#define STEPCONFIG_YNN		BIT(8)
+#define STEPCONFIG_XNP		BIT(9)
+#define STEPCONFIG_YPN		BIT(10)
+#define STEPCONFIG_INM_MASK	(0xF << 15)
+#define STEPCONFIG_INM(val)	((val) << 15)
+#define STEPCONFIG_INM_ADCREFM	STEPCONFIG_INM(8)
+#define STEPCONFIG_INP_MASK	(0xF << 19)
+#define STEPCONFIG_INP(val)	((val) << 19)
+#define STEPCONFIG_INP_AN2	STEPCONFIG_INP(2)
+#define STEPCONFIG_INP_AN3	STEPCONFIG_INP(3)
+#define STEPCONFIG_INP_AN4	STEPCONFIG_INP(4)
+#define STEPCONFIG_INP_ADCREFM	STEPCONFIG_INP(8)
+#define STEPCONFIG_FIFO1	BIT(26)
+
+/* Delay register */
+#define STEPDELAY_OPEN_MASK	(0x3FFFF << 0)
+#define STEPDELAY_OPEN(val)	((val) << 0)
+#define STEPCONFIG_OPENDLY	STEPDELAY_OPEN(0x098)
+#define STEPDELAY_SAMPLE_MASK	(0xFF << 24)
+#define STEPDELAY_SAMPLE(val)	((val) << 24)
+#define STEPCONFIG_SAMPLEDLY	STEPDELAY_SAMPLE(0)
+
+/* Charge Config */
+#define STEPCHARGE_RFP_MASK	(7 << 12)
+#define STEPCHARGE_RFP(val)	((val) << 12)
+#define STEPCHARGE_RFP_XPUL	STEPCHARGE_RFP(1)
+#define STEPCHARGE_INM_MASK	(0xF << 15)
+#define STEPCHARGE_INM(val)	((val) << 15)
+#define STEPCHARGE_INM_AN1	STEPCHARGE_INM(1)
+#define STEPCHARGE_INP_MASK	(0xF << 19)
+#define STEPCHARGE_INP(val)	((val) << 19)
+#define STEPCHARGE_INP_AN1	STEPCHARGE_INP(1)
+#define STEPCHARGE_RFM_MASK	(3 << 23)
+#define STEPCHARGE_RFM(val)	((val) << 23)
+#define STEPCHARGE_RFM_XNUR	STEPCHARGE_RFM(1)
+
+/* Charge delay */
+#define CHARGEDLY_OPEN_MASK	(0x3FFFF << 0)
+#define CHARGEDLY_OPEN(val)	((val) << 0)
+#define CHARGEDLY_OPENDLY	CHARGEDLY_OPEN(1)
+
+/* Control register */
+#define CNTRLREG_TSCSSENB	BIT(0)
+#define CNTRLREG_STEPID		BIT(1)
+#define CNTRLREG_STEPCONFIGWRT	BIT(2)
+#define CNTRLREG_POWERDOWN	BIT(4)
+#define CNTRLREG_AFE_CTRL_MASK	(3 << 5)
+#define CNTRLREG_AFE_CTRL(val)	((val) << 5)
+#define CNTRLREG_4WIRE		CNTRLREG_AFE_CTRL(1)
+#define CNTRLREG_5WIRE		CNTRLREG_AFE_CTRL(2)
+#define CNTRLREG_8WIRE		CNTRLREG_AFE_CTRL(3)
+#define CNTRLREG_TSCENB		BIT(7)
+
+#define ADC_CLK			3000000
+#define	MAX_CLK_DIV		7
+
+#define TSCADC_CELLS		0
+
+struct mfd_tscadc_board {
+	struct tsc_data *tsc_init;
+};
+
+struct ti_tscadc_dev {
+	struct device *dev;
+	struct regmap *regmap_tscadc;
+	void __iomem *tscadc_base;
+	int irq;
+	struct mfd_cell cells[TSCADC_CELLS];
+};
+
+#endif
