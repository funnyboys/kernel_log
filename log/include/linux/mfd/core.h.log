commit 571d54ed91c0fae174d933683c0c2e11c84843d9
Merge: 9d71d3cd9ef0 8211d1e83ade
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Thu Jun 4 20:11:25 2020 -0700

    Merge tag 'devicetree-for-5.8' of git://git.kernel.org/pub/scm/linux/kernel/git/robh/linux
    
    Pull devicetree updates from Rob Herring:
    
     - Convert various DT (non-binding) doc files to ReST
    
     - Various improvements to device link code
    
     - Fix __of_attach_node_sysfs refcounting bug
    
     - Add support for 'memory-region-names' with reserved-memory binding
    
     - Vendor prefixes for Protonic Holland, BeagleBoard.org, Alps, Check
       Point, WÃ¼rth Elektronik, U-Boot, Vaisala, Baikal Electronics,
       Shanghai Awinic Technology Co., MikroTik, Silex Insight
    
     - A bunch more binding conversions to DT schema. Only 3K to go.
    
     - Add a minimum version check for schema tools
    
     - Treewide dropping of 'allOf' usage with schema references. Not needed
       in new json-schema spec.
    
     - Some formatting clean-ups of schemas
    
    * tag 'devicetree-for-5.8' of git://git.kernel.org/pub/scm/linux/kernel/git/robh/linux: (194 commits)
      dt-bindings: clock: Add documentation for X1830 bindings.
      dt-bindings: mailbox: Convert imx mu to json-schema
      dt-bindings: power: Convert imx gpcv2 to json-schema
      dt-bindings: power: Convert imx gpc to json-schema
      dt-bindings: Merge gpio-usb-b-connector with usb-connector
      dt-bindings: timer: renesas: cmt: Convert to json-schema
      dt-bindings: clock: Convert i.MX8QXP LPCG to json-schema
      dt-bindings: timer: Convert i.MX GPT to json-schema
      dt-bindings: thermal: rcar-thermal: Add device tree support for r8a7742
      dt-bindings: serial: Add binding for UART pin swap
      dt-bindings: geni-se: Add interconnect binding for GENI QUP
      dt-bindings: geni-se: Convert QUP geni-se bindings to YAML
      dt-bindings: vendor-prefixes: Add Silex Insight vendor prefix
      dt-bindings: input: touchscreen: edt-ft5x06: change reg property
      dt-bindings: usb: qcom,dwc3: Introduce interconnect properties for Qualcomm DWC3 driver
      dt-bindings: timer: renesas: mtu2: Convert to json-schema
      of/fdt: Remove redundant kbasename function call
      dt-bindings: clock: Convert i.MX1 clock to json-schema
      dt-bindings: clock: Convert i.MX21 clock to json-schema
      dt-bindings: clock: Convert i.MX25 clock to json-schema
      ...

commit 9aa8759960e36291e7663288d58b47ee4927b6f5
Author: Tomas Winkler <tomas.winkler@intel.com>
Date:   Sat May 16 14:06:08 2020 +0300

    mfd: Constify properties in mfd_cell
    
    Constify 'struct property_entry *properties' in mfd_cell.
    It is always passed around as a pointer const struct.
    
    Signed-off-by: Tomas Winkler <tomas.winkler@intel.com>
    Signed-off-by: Lee Jones <lee.jones@linaro.org>

diff --git a/include/linux/mfd/core.h b/include/linux/mfd/core.h
index d01d1299e49d..7e5ac3c00891 100644
--- a/include/linux/mfd/core.h
+++ b/include/linux/mfd/core.h
@@ -70,7 +70,7 @@ struct mfd_cell {
 	size_t			pdata_size;
 
 	/* device properties passed to the sub devices drivers */
-	struct property_entry *properties;
+	const struct property_entry *properties;
 
 	/*
 	 * Device Tree compatible string

commit d8e81bc3e87c9e7994f5bf24e215a607899ca470
Author: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
Date:   Wed Apr 15 16:45:16 2020 +0200

    docs: dt: convert usage-model.txt to ReST
    
    - Add a SPDX header;
    - Adjust document title;
    - Use footnoote markups;
    - Some whitespace fixes and new line breaks;
    - Mark literal blocks as such;
    - Add it to devicetree/index.rst.
    
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
    Acked-by: Lee Jones <lee.jones@linaro.org>
    Signed-off-by: Rob Herring <robh@kernel.org>

diff --git a/include/linux/mfd/core.h b/include/linux/mfd/core.h
index d01d1299e49d..21718c8b2b48 100644
--- a/include/linux/mfd/core.h
+++ b/include/linux/mfd/core.h
@@ -74,7 +74,7 @@ struct mfd_cell {
 
 	/*
 	 * Device Tree compatible string
-	 * See: Documentation/devicetree/usage-model.txt Chapter 2.2 for details
+	 * See: Documentation/devicetree/usage-model.rst Chapter 2.2 for details
 	 */
 	const char		*of_compatible;
 

commit 5a47c0fbd276b7f57bd38f153e8b15784b2f6f22
Author: Lee Jones <lee.jones@linaro.org>
Date:   Mon Oct 21 10:47:37 2019 +0100

    mfd: mfd-core: Remove usage counting for .{en,dis}able() call-backs
    
    The MFD implementation for reference counting was complex and unnecessary.
    There was only one bona fide user which has now been converted to handle
    the process in a different way. Any future resource protection, shared
    enablement functions should be handed by the parent device, rather than
    through the MFD subsystem API.
    
    Signed-off-by: Lee Jones <lee.jones@linaro.org>
    Reviewed-by: Daniel Thompson <daniel.thompson@linaro.org>
    Reviewed-by: Mark Brown <broonie@kernel.org>

diff --git a/include/linux/mfd/core.h b/include/linux/mfd/core.h
index 63ac3cc86608..d01d1299e49d 100644
--- a/include/linux/mfd/core.h
+++ b/include/linux/mfd/core.h
@@ -59,8 +59,6 @@ struct mfd_cell {
 	const char		*name;
 	int			id;
 
-	/* refcounting for multiple drivers to use a single cell */
-	atomic_t		*usage_count;
 	int			(*enable)(struct platform_device *dev);
 	int			(*disable)(struct platform_device *dev);
 

commit ead1c83ddd7613d9e61368dc686d014e37955192
Author: Lee Jones <lee.jones@linaro.org>
Date:   Fri Oct 18 13:31:39 2019 +0100

    mfd: mfd-core: Remove mfd_clone_cell()
    
    Providing a subsystem-level API helper seems over-kill just to save a
    few lines of C-code.  Previous commits saw us convert mfd_clone_cell()'s
    only user over to use a more traditional style of MFD child-device
    registration.  Now we can remove the superfluous helper from the MFD API.
    
    Signed-off-by: Lee Jones <lee.jones@linaro.org>
    Reviewed-by: Daniel Thompson <daniel.thompson@linaro.org>

diff --git a/include/linux/mfd/core.h b/include/linux/mfd/core.h
index 9a97e0932592..63ac3cc86608 100644
--- a/include/linux/mfd/core.h
+++ b/include/linux/mfd/core.h
@@ -115,24 +115,6 @@ struct mfd_cell {
 extern int mfd_cell_enable(struct platform_device *pdev);
 extern int mfd_cell_disable(struct platform_device *pdev);
 
-/*
- * "Clone" multiple platform devices for a single cell. This is to be used
- * for devices that have multiple users of a cell.  For example, if an mfd
- * driver wants the cell "foo" to be used by a GPIO driver, an MTD driver,
- * and a platform driver, the following bit of code would be use after first
- * calling mfd_add_devices():
- *
- * const char *fclones[] = { "foo-gpio", "foo-mtd" };
- * err = mfd_clone_cells("foo", fclones, ARRAY_SIZE(fclones));
- *
- * Each driver (MTD, GPIO, and platform driver) would then register
- * platform_drivers for "foo-mtd", "foo-gpio", and "foo", respectively.
- * The cell's .enable/.disable hooks should be used to deal with hardware
- * resource contention.
- */
-extern int mfd_clone_cell(const char *cell, const char **clones,
-		size_t n_clones);
-
 /*
  * Given a platform device that's been created by mfd_add_devices(), fetch
  * the mfd_cell that created it.

commit 393f05f1d4651f7e4661a8739c381300dd9e39dc
Author: Lee Jones <lee.jones@linaro.org>
Date:   Tue Feb 9 14:08:27 2016 +0000

    mfd: Provide MACRO to declare commonly defined MFD cell attributes
    
    Signed-off-by: Lee Jones <lee.jones@linaro.org>
    Acked-by: Laxman Dewangan <ldewangan@nvidia.com>
    Tested-by: Laxman Dewangan <ldewangan@nvidia.com>

diff --git a/include/linux/mfd/core.h b/include/linux/mfd/core.h
index b43fc5773ad7..9a97e0932592 100644
--- a/include/linux/mfd/core.h
+++ b/include/linux/mfd/core.h
@@ -12,6 +12,35 @@
 
 #include <linux/platform_device.h>
 
+#define MFD_RES_SIZE(arr) (sizeof(arr) / sizeof(struct resource))
+
+#define MFD_CELL_ALL(_name, _res, _pdata, _pdsize, _id, _compat, _match)\
+	{								\
+		.name = (_name),					\
+		.resources = (_res),					\
+		.num_resources = MFD_RES_SIZE((_res)),			\
+		.platform_data = (_pdata),				\
+		.pdata_size = (_pdsize),				\
+		.of_compatible = (_compat),				\
+		.acpi_match = (_match),					\
+		.id = (_id),						\
+	}
+
+#define OF_MFD_CELL(_name, _res, _pdata, _pdsize,_id, _compat)		\
+	MFD_CELL_ALL(_name, _res, _pdata, _pdsize, _id, _compat, NULL)	\
+
+#define ACPI_MFD_CELL(_name, _res, _pdata, _pdsize, _id, _match)	\
+	MFD_CELL_ALL(_name, _res, _pdata, _pdsize, _id, NULL, _match)	\
+
+#define MFD_CELL_BASIC(_name, _res, _pdata, _pdsize, _id)		\
+	MFD_CELL_ALL(_name, _res, _pdata, _pdsize, _id, NULL, NULL)	\
+
+#define MFD_CELL_RES(_name, _res)					\
+	MFD_CELL_ALL(_name, _res, NULL, 0, 0, NULL, NULL)		\
+
+#define MFD_CELL_NAME(_name)						\
+	MFD_CELL_ALL(_name, NULL, NULL, 0, 0, NULL, NULL)		\
+
 struct irq_domain;
 struct property_entry;
 

commit d2912cb15bdda8ba4a5dd73396ad62641af2f520
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Tue Jun 4 10:11:33 2019 +0200

    treewide: Replace GPLv2 boilerplate/reference with SPDX - rule 500
    
    Based on 2 normalized pattern(s):
    
      this program is free software you can redistribute it and or modify
      it under the terms of the gnu general public license version 2 as
      published by the free software foundation
    
      this program is free software you can redistribute it and or modify
      it under the terms of the gnu general public license version 2 as
      published by the free software foundation #
    
    extracted by the scancode license scanner the SPDX license identifier
    
      GPL-2.0-only
    
    has been chosen to replace the boilerplate/reference in 4122 file(s).
    
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Reviewed-by: Enrico Weigelt <info@metux.net>
    Reviewed-by: Kate Stewart <kstewart@linuxfoundation.org>
    Reviewed-by: Allison Randal <allison@lohutok.net>
    Cc: linux-spdx@vger.kernel.org
    Link: https://lkml.kernel.org/r/20190604081206.933168790@linutronix.de
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/include/linux/mfd/core.h b/include/linux/mfd/core.h
index 99c0395fe1f9..b43fc5773ad7 100644
--- a/include/linux/mfd/core.h
+++ b/include/linux/mfd/core.h
@@ -1,14 +1,10 @@
+/* SPDX-License-Identifier: GPL-2.0-only */
 /*
  * drivers/mfd/mfd-core.h
  *
  * core MFD support
  * Copyright (c) 2006 Ian Molton
  * Copyright (c) 2007 Dmitry Baryshkov
- *
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License version 2 as
- * published by the Free Software Foundation.
- *
  */
 
 #ifndef MFD_CORE_H

commit 6eb59af580dcffc6f6982ac8ef6d27a1a5f26b27
Merge: 4d230d4d030e b52207ef4ea5
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Fri May 20 11:10:24 2016 -0700

    Merge tag 'mfd-for-linus-4.7' of git://git.kernel.org/pub/scm/linux/kernel/git/lee/mfd
    
    Pull MFD updates from Lee Jones:
     "New Drivers:
       - Add new driver for MAXIM MAX77620/MAX20024 PMIC
       - Add new driver for Hisilicon HI665X PMIC
    
      New Device Support:
       - Add support for AXP809 in axp20x-rsb
       - Add support for Power Supply in axp20x
    
      New core features:
       - devm_mfd_* managed resources
    
      Fix-ups:
       - Remove unused code (da9063-irq, wm8400-core, tps6105x,
         smsc-ece1099, twl4030-power)
       - Improve clean-up in error path (intel_quark_i2c_gpio)
       - Explicitly include headers (syscon.h)
       - Allow building as modules (max77693)
       - Use IS_ENABLED() instead of rolling your own (dm355evm_msp,
         wm8400-core)
       - DT adaptions (axp20x, hi655x, arizona, max77620)
       - Remove CLK_IS_ROOT flag (intel-lpss, intel_quark)
       - Move to gpiochip API (asic3, dm355evm_msp, htc-egpio, htc-i2cpld,
         sm501, tc6393xb, tps65010, ucb1x00, vexpress)
       - Make use of devm_mfd_* calls (act8945a, as3711, atmel-hlcdc,
         bcm590xx, hi6421-pmic-core, lp3943, menf21bmc, mt6397, rdc321x,
         rk808, rn5t618, rt5033, sky81452, stw481x, tps6507x, tps65217,
         wm8400)
    
      Bug Fixes"
       - Fix ACPI child matching (mfd-core)
       - Fix start-up ordering issues (mt6397-core, arizona-core)
       - Fix forgotten register state on resume (intel-lpss)
       - Fix Clock related issues (twl6040)
       - Fix scheduling whilst atomic (omap-usb-tll)
       - Kconfig changes (vexpress)"
    
    * tag 'mfd-for-linus-4.7' of git://git.kernel.org/pub/scm/linux/kernel/git/lee/mfd: (73 commits)
      mfd: hi655x: Add MFD driver for hi655x
      mfd: ab8500-debugfs: Trivial fix of spelling mistake on "between"
      mfd: vexpress: Add !ARCH_USES_GETTIMEOFFSET dependency
      mfd: Add device-tree binding doc for PMIC MAX77620/MAX20024
      mfd: max77620: Add core driver for MAX77620/MAX20024
      mfd: arizona: Add defines for GPSW values that can be used from DT
      mfd: omap-usb-tll: Fix scheduling while atomic BUG
      mfd: wm5110: ARIZONA_CLOCK_CONTROL should be volatile
      mfd: axp20x: Add a cell for the ac power_supply part of the axp20x PMICs
      mfd: intel_soc_pmic_core: Terminate panel control GPIO lookup table correctly
      mfd: wl1273-core: Use devm_mfd_add_devices() for mfd_device registration
      mfd: tps65910: Use devm_mfd_add_devices and devm_regmap_add_irq_chip
      mfd: sec: Use devm_mfd_add_devices and devm_regmap_add_irq_chip
      mfd: rc5t583: Use devm_mfd_add_devices and devm_request_threaded_irq
      mfd: max77686: Use devm_mfd_add_devices and devm_regmap_add_irq_chip
      mfd: as3722: Use devm_mfd_add_devices and devm_regmap_add_irq_chip
      mfd: twl4030-power: Remove driver path in file comment
      MAINTAINERS: Add entry for X-Powers AXP family PMIC drivers
      mfd: smsc-ece1099: Remove unnecessarily remove callback
      mfd: Use IS_ENABLED(CONFIG_FOO) instead of checking FOO || FOO_MODULE
      ...

commit a8f447be8056d9ce17bf7757d6de79426700bb8b
Author: Laxman Dewangan <ldewangan@nvidia.com>
Date:   Fri Apr 8 00:12:55 2016 +0530

    mfd: Add resource managed APIs for mfd_add_devices
    
    Add resource managed API devm_mfd_add_devices() for the mfd_add_devices().
    
    This helps in reducing code in error path as it is not required
    to call mfd_remove_devices() explicitly to remove all child-devices.
    In some cases, it also helps not to implement .remove() callback
    which get called during driver unbind.
    
    Signed-off-by: Laxman Dewangan <ldewangan@nvidia.com>
    Signed-off-by: Lee Jones <lee.jones@linaro.org>

diff --git a/include/linux/mfd/core.h b/include/linux/mfd/core.h
index bc6f7e00fb3d..4a0268afe546 100644
--- a/include/linux/mfd/core.h
+++ b/include/linux/mfd/core.h
@@ -131,4 +131,8 @@ static inline int mfd_add_hotplug_devices(struct device *parent,
 
 extern void mfd_remove_devices(struct device *parent);
 
+extern int devm_mfd_add_devices(struct device *dev, int id,
+				const struct mfd_cell *cells, int n_devs,
+				struct resource *mem_base,
+				int irq_base, struct irq_domain *irq_domain);
 #endif

commit f4d05266032346531b9f889e26aa31a0cf2a9822
Author: Heikki Krogerus <heikki.krogerus@linux.intel.com>
Date:   Tue Mar 29 14:52:23 2016 +0300

    device property: don't bother the drivers with struct property_set
    
    Since device_add_property_set() now always takes a copy of
    the property_set, and also since the fwnode type is always
    hard coded to be FWNODE_PDATA, there is no need for the
    drivers to deliver the entire struct property_set. The
    function can just create the instance of it on its own and
    bind the properties from the drivers to it on the spot.
    
    This renames device_add_property_set() to
    device_add_properties(). The function now takes struct
    property_entry as its parameter instead of struct
    property_set.
    
    Reviewed-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    Reviewed-by: Mika Westerberg <mika.westerberg@linux.intel.com>
    Acked-by: Thierry Reding <treding@nvidia.com>
    Acked-by: Lee Jones <lee.jones@linaro.org>
    Signed-off-by: Heikki Krogerus <heikki.krogerus@linux.intel.com>
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>

diff --git a/include/linux/mfd/core.h b/include/linux/mfd/core.h
index bc6f7e00fb3d..9837f1e8c94c 100644
--- a/include/linux/mfd/core.h
+++ b/include/linux/mfd/core.h
@@ -17,7 +17,7 @@
 #include <linux/platform_device.h>
 
 struct irq_domain;
-struct property_set;
+struct property_entry;
 
 /* Matches ACPI PNP id, either _HID or _CID, or ACPI _ADR */
 struct mfd_cell_acpi_match {
@@ -47,7 +47,7 @@ struct mfd_cell {
 	size_t			pdata_size;
 
 	/* device properties passed to the sub devices drivers */
-	const struct property_set *pset;
+	struct property_entry *properties;
 
 	/*
 	 * Device Tree compatible string

commit 4d215cabc784990df11fbcca7af70adf53c9ff17
Author: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
Date:   Mon Nov 30 17:11:40 2015 +0200

    mfd: core: propagate device properties to sub devices drivers
    
    In the similar way like we do for the platform data we propagate the device
    properties. For example, in case of Intel LPSS drivers we may provide a
    specific property to tell the actual device driver an additional information
    such as platform name.
    
    Signed-off-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>

diff --git a/include/linux/mfd/core.h b/include/linux/mfd/core.h
index 27dac3ff18b9..bc6f7e00fb3d 100644
--- a/include/linux/mfd/core.h
+++ b/include/linux/mfd/core.h
@@ -17,6 +17,7 @@
 #include <linux/platform_device.h>
 
 struct irq_domain;
+struct property_set;
 
 /* Matches ACPI PNP id, either _HID or _CID, or ACPI _ADR */
 struct mfd_cell_acpi_match {
@@ -44,6 +45,10 @@ struct mfd_cell {
 	/* platform data passed to the sub devices drivers */
 	void			*platform_data;
 	size_t			pdata_size;
+
+	/* device properties passed to the sub devices drivers */
+	const struct property_set *pset;
+
 	/*
 	 * Device Tree compatible string
 	 * See: Documentation/devicetree/usage-model.txt Chapter 2.2 for details

commit 98a3be44ffa67b812de7aa7aed9f2331edcfb1a5
Author: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
Date:   Fri Oct 23 12:16:41 2015 +0300

    mfd: core: redo ACPI matching of the children devices
    
    There is at least one board on the market, i.e. Intel Galileo Gen2, that uses
    _ADR to distinguish the devices under one actual device. Due to this we have to
    improve the quirk in the MFD core to handle that board.
    
    Acked-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Acked-by: Lee Jones <lee.jones@linaro.org>
    Signed-off-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    Signed-off-by: Wolfram Sang <wsa@the-dreams.de>

diff --git a/include/linux/mfd/core.h b/include/linux/mfd/core.h
index a76bc100bf97..27dac3ff18b9 100644
--- a/include/linux/mfd/core.h
+++ b/include/linux/mfd/core.h
@@ -18,6 +18,12 @@
 
 struct irq_domain;
 
+/* Matches ACPI PNP id, either _HID or _CID, or ACPI _ADR */
+struct mfd_cell_acpi_match {
+	const char			*pnpid;
+	const unsigned long long	adr;
+};
+
 /*
  * This struct describes the MFD part ("cell").
  * After registration the copy of this structure will become the platform data
@@ -44,8 +50,8 @@ struct mfd_cell {
 	 */
 	const char		*of_compatible;
 
-	/* Matches ACPI PNP id, either _HID or _CID */
-	const char		*acpi_pnpid;
+	/* Matches ACPI */
+	const struct mfd_cell_acpi_match	*acpi_match;
 
 	/*
 	 * These resources can be specified relative to the parent device.

commit a7975473cc41773d9f6d8ea72b48c7656e6cd0f6
Author: Johan Hovold <johan@kernel.org>
Date:   Fri Sep 26 12:55:30 2014 +0200

    mfd: core: Add helper function to register hotplug devices
    
    Hot-pluggable multi-function devices should always be registered with
    PLATFORM_DEVID_AUTO to avoid name collisions on the platform bus. This
    helper also hides the memory map and irq parameters, which aren't used
    by hot-pluggable (e.g. USB-based) devices.
    
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Signed-off-by: Lee Jones <lee.jones@linaro.org>

diff --git a/include/linux/mfd/core.h b/include/linux/mfd/core.h
index 73e1709d4c09..a76bc100bf97 100644
--- a/include/linux/mfd/core.h
+++ b/include/linux/mfd/core.h
@@ -111,6 +111,13 @@ extern int mfd_add_devices(struct device *parent, int id,
 			   struct resource *mem_base,
 			   int irq_base, struct irq_domain *irq_domain);
 
+static inline int mfd_add_hotplug_devices(struct device *parent,
+		const struct mfd_cell *cells, int n_devs)
+{
+	return mfd_add_devices(parent, PLATFORM_DEVID_AUTO, cells, n_devs,
+			NULL, 0, NULL);
+}
+
 extern void mfd_remove_devices(struct device *parent);
 
 #endif

commit 6ab3430129e258ea31dd214adf1c760dfafde67a
Author: Mika Westerberg <mika.westerberg@linux.intel.com>
Date:   Tue Sep 16 14:52:36 2014 +0300

    mfd: Add ACPI support
    
    If an MFD device is backed by ACPI namespace, we should allow subdevice
    drivers to access their corresponding ACPI companion devices through normal
    means (e.g using ACPI_COMPANION()).
    
    This patch adds such support to the MFD core. If the MFD parent device
    does not specify any ACPI _HID/_CID for the child device, the child
    device will share the parent ACPI companion device. Otherwise the child
    device will be assigned with the corresponding ACPI companion, if found
    in the namespace below the parent.
    
    Signed-off-by: Mika Westerberg <mika.westerberg@linux.intel.com>
    Reviewed-by: Darren Hart <dvhart@linux.intel.com>
    Signed-off-by: Lee Jones <lee.jones@linaro.org>

diff --git a/include/linux/mfd/core.h b/include/linux/mfd/core.h
index f543de91ce19..73e1709d4c09 100644
--- a/include/linux/mfd/core.h
+++ b/include/linux/mfd/core.h
@@ -44,6 +44,9 @@ struct mfd_cell {
 	 */
 	const char		*of_compatible;
 
+	/* Matches ACPI PNP id, either _HID or _CID */
+	const char		*acpi_pnpid;
+
 	/*
 	 * These resources can be specified relative to the parent device.
 	 * For accessing hardware you should use resources from the platform dev

commit 9f8c0fe9542141fd0008d5c0f6ae365890f6da94
Author: Lee Jones <lee.jones@linaro.org>
Date:   Fri May 23 16:44:10 2014 +0100

    regulator: Constify the pointer to alias name array
    
    Toughen-up checks for read-only regulator names.
    
    Signed-off-by: Lee Jones <lee.jones@linaro.org>
    Signed-off-by: Mark Brown <broonie@linaro.org>

diff --git a/include/linux/mfd/core.h b/include/linux/mfd/core.h
index bdba8c61207b..f543de91ce19 100644
--- a/include/linux/mfd/core.h
+++ b/include/linux/mfd/core.h
@@ -63,7 +63,7 @@ struct mfd_cell {
 	/* A list of regulator supplies that should be mapped to the MFD
 	 * device rather than the child device when requested
 	 */
-	const char		**parent_supplies;
+	const char * const	*parent_supplies;
 	int			num_parent_supplies;
 };
 

commit db0b2d01163cc3050eb52a979541e0d16553be48
Merge: 16cd9d1c0f14 90b128ed1557
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Fri Nov 15 16:37:40 2013 -0800

    Merge tag 'mfd-3.13-1' of git://git.kernel.org/pub/scm/linux/kernel/git/sameo/mfd-next
    
    Pull MFD updates from Samuel Ortiz:
     "For the 3.13 merge window we have a couple of new drivers for the AMS
      AS3722 PMIC and for STMicroelectronics STw481x PMIC.
    
      Although this is a smaller update than usual, we also have:
    
       - Device tree support for the max77693 driver
    
       - linux/of.h inclusion for all DT compatible MFD drivers, to avoid
         build breakage in the future
    
       - Support for Intel Wildcat Point-LP PCH through the lpc_ich driver
    
       - A small arizona update for new wm5110 DSP registers and a few fixes
    
       - A small palmas update as well, including an of_device table
         addition and a few minor fixes
    
       - Two small mfd-core changes, one including a memory leak fix for
         when mfd_add_device() fails
    
       - Our usual round of minor cleanups and janitorial fixes"
    
    * tag 'mfd-3.13-1' of git://git.kernel.org/pub/scm/linux/kernel/git/sameo/mfd-next: (63 commits)
      Documentation: mfd: Update s2mps11.txt
      mfd: pm8921: Potential NULL dereference in pm8921_remove()
      mfd: Fix memory leak in mfd_add_devices()
      mfd: Stop setting refcounting pointers in original mfd_cell arrays
      mfd: wm5110: Enable micd clamp functionality
      mfd: lpc_ich: Add Device IDs for Intel Wildcat Point-LP PCH
      mfd: max77693: Fix up bug of wrong interrupt number
      mfd: as3722: Don't export the regmap config
      mfd: twl6040: Remove obsolete cleanup for i2c clientdata
      mfd: tps65910: Remove warning during dt node parsing
      mfd: lpc_sch: Ignore resource conflicts when adding mfd cells
      mfd: ti_am335x_tscadc: Avoid possible deadlock of reg_lock
      mfd: syscon: Return -ENOSYS if CONFIG_MFD_SYSCON is not enabled
      mfd: Add support for ams AS3722 PMIC
      mfd: max77693: Include linux/of.h header
      mfd: tc3589x: Detect the precise version
      mfd: omap-usb: prepare/unprepare clock while enable/disable
      mfd: max77686: Include linux/of.h header
      mfd: max8907: Include linux/of.h header
      mfd: max8997: Include linux/of.h header
      ...

commit 03e361b25ee8dfb1fd9b890072c23c4aae01c6c7
Author: Geert Uytterhoeven <geert@linux-m68k.org>
Date:   Tue Oct 29 10:03:04 2013 +0100

    mfd: Stop setting refcounting pointers in original mfd_cell arrays
    
    Commit 1e29af62f2b285bd18685da93c3ce8c33ca2d1db ("mfd: Add refcounting
    support to mfd_cells") had to drop the "const" keyword on the "cell"
    parameter of mfd_add_devices(), as it added the refcounting pointers
    to the objects of the passed mfd_cell array itself.
    
    However, the mfd core code operates on copies of the mfd_cell objects,
    so there's no need to modify the originally passed objects.
    
    Hence, move the setting of the refcounting pointers from mfd_add_devices()
    to mfd_platform_add_cell(), where the copy of the mfd_cell objects is made.
    mfd_clone_cell() can just pass (a copy of) the original usage_count
    pointer.
    
    This allows to make the "cell" parameter of mfd_add_devices() "const"
    again, and avoids future race conditions when registering multiple
    instances of the same device in parallel.
    
    Signed-off-by: Geert Uytterhoeven <geert@linux-m68k.org>
    Signed-off-by: Lee Jones <lee.jones@linaro.org>

diff --git a/include/linux/mfd/core.h b/include/linux/mfd/core.h
index cebe97ee98b8..60ced604664f 100644
--- a/include/linux/mfd/core.h
+++ b/include/linux/mfd/core.h
@@ -98,7 +98,7 @@ static inline const struct mfd_cell *mfd_get_cell(struct platform_device *pdev)
 }
 
 extern int mfd_add_devices(struct device *parent, int id,
-			   struct mfd_cell *cells, int n_devs,
+			   const struct mfd_cell *cells, int n_devs,
 			   struct resource *mem_base,
 			   int irq_base, struct irq_domain *irq_domain);
 

commit 7fcd427465e710d0c4e2737d2f02b2ffa14b9bb3
Author: Charles Keepax <ckeepax@opensource.wolfsonmicro.com>
Date:   Tue Oct 15 20:14:21 2013 +0100

    mfd: Allow mapping regulator supplies to MFD device from children
    
    Occasionally, it is useful to map supplies from a child device onto the
    MFD device. A typical usecase for this would be if the MFD device is
    represented as a single node in device tree. All supplies will be
    defined in device tree as existing on the MFD device. When a child
    depends on frameworks which might have no knowledge of MFD to lookup
    supplies on its behalf the supply will not be found.
    
    This patch adds a list of supplies that should be looked up on the
    parent rather than the child as part of the mfd_cell structure.
    
    Signed-off-by: Charles Keepax <ckeepax@opensource.wolfsonmicro.com>
    Acked-by: Lee Jones <lee.jones@linaro.org>
    Signed-off-by: Mark Brown <broonie@linaro.org>

diff --git a/include/linux/mfd/core.h b/include/linux/mfd/core.h
index cebe97ee98b8..7314fc4e6d25 100644
--- a/include/linux/mfd/core.h
+++ b/include/linux/mfd/core.h
@@ -59,6 +59,12 @@ struct mfd_cell {
 	 * pm_runtime_no_callbacks().
 	 */
 	bool			pm_runtime_no_callbacks;
+
+	/* A list of regulator supplies that should be mapped to the MFD
+	 * device rather than the child device when requested
+	 */
+	const char		**parent_supplies;
+	int			num_parent_supplies;
 };
 
 /*

commit 0848c94fb4a5cc213a7fb0fb3a5721ad6e16f096
Author: Mark Brown <broonie@opensource.wolfsonmicro.com>
Date:   Tue Sep 11 15:16:36 2012 +0800

    mfd: core: Push irqdomain mapping out into devices
    
    Currently the MFD core supports remapping MFD cell interrupts using an
    irqdomain but only if the MFD is being instantiated using device tree
    and only if the device tree bindings use the pattern of registering IPs
    in the device tree with compatible properties.  This will be actively
    harmful for drivers which support non-DT platforms and use this pattern
    for their DT bindings as it will mean that the core will silently change
    remapping behaviour and it is also limiting for drivers which don't do
    DT with this particular pattern.  There is also a potential fragility if
    there are interrupts not associated with MFD cells and all the cells are
    omitted from the device tree for some reason.
    
    Instead change the code to take an IRQ domain as an optional argument,
    allowing drivers to take the decision about the parent domain for their
    interrupts.  The one current user of this feature is ab8500-core, it has
    the domain lookup pushed out into the driver.
    
    Signed-off-by: Mark Brown <broonie@opensource.wolfsonmicro.com>
    Signed-off-by: Samuel Ortiz <sameo@linux.intel.com>

diff --git a/include/linux/mfd/core.h b/include/linux/mfd/core.h
index 3a8435a8058f..cebe97ee98b8 100644
--- a/include/linux/mfd/core.h
+++ b/include/linux/mfd/core.h
@@ -16,6 +16,8 @@
 
 #include <linux/platform_device.h>
 
+struct irq_domain;
+
 /*
  * This struct describes the MFD part ("cell").
  * After registration the copy of this structure will become the platform data
@@ -98,7 +100,7 @@ static inline const struct mfd_cell *mfd_get_cell(struct platform_device *pdev)
 extern int mfd_add_devices(struct device *parent, int id,
 			   struct mfd_cell *cells, int n_devs,
 			   struct resource *mem_base,
-			   int irq_base);
+			   int irq_base, struct irq_domain *irq_domain);
 
 extern void mfd_remove_devices(struct device *parent);
 

commit 2968ab133ec790134d4347aa4264c2eb064b42e7
Author: Lee Jones <lee.jones@linaro.org>
Date:   Mon Jul 2 10:50:19 2012 +0100

    mfd: Attaching a node to new 'struct mfd_cell' of_compatible variable
    
    Applying a succinct description to the of_compatible variable recently
    added to the mfd_cell struct. Also link to the documentation page where
    more information can be found about compatible properties.
    
    Signed-off-by: Lee Jones <lee.jones@linaro.org>
    Signed-off-by: Samuel Ortiz <sameo@linux.intel.com>

diff --git a/include/linux/mfd/core.h b/include/linux/mfd/core.h
index 99b7eb1961b6..3a8435a8058f 100644
--- a/include/linux/mfd/core.h
+++ b/include/linux/mfd/core.h
@@ -36,6 +36,10 @@ struct mfd_cell {
 	/* platform data passed to the sub devices drivers */
 	void			*platform_data;
 	size_t			pdata_size;
+	/*
+	 * Device Tree compatible string
+	 * See: Documentation/devicetree/usage-model.txt Chapter 2.2 for details
+	 */
 	const char		*of_compatible;
 
 	/*

commit c94bb233a9fee3314dc5d9c7de9fa702e91283f2
Author: Lee Jones <lee.jones@linaro.org>
Date:   Fri Jun 29 19:01:03 2012 +0200

    mfd: Make MFD core code Device Tree and IRQ domain aware
    
    During Device Tree enablement of the ab8500 and db8500-prcmu drivers,
    a decision was made to omit registration through the MFD API and use
    Device Tree directly. However, because MFD devices have a different
    address space and the ab8500 and db8500 both use I2C to communicate,
    this causes issues with address translation during execution of
    of_platform_populate(). So the solution is to make the MFD core aware
    of Device Tree and have it assign the correct node pointers instead.
    
    To make this work the MFD core also needs to be awere of IRQ domains,
    as Device Tree insists on IRQ domain compatibility. So, instead of
    providing an irq-base via platform code, in the DT case we simply
    look up the IRQ domain and map to the correct virtual IRQ.
    
    Signed-off-by: Lee Jones <lee.jones@linaro.org>
    Signed-off-by: Samuel Ortiz <sameo@linux.intel.com>

diff --git a/include/linux/mfd/core.h b/include/linux/mfd/core.h
index 4e76163dd862..99b7eb1961b6 100644
--- a/include/linux/mfd/core.h
+++ b/include/linux/mfd/core.h
@@ -36,6 +36,7 @@ struct mfd_cell {
 	/* platform data passed to the sub devices drivers */
 	void			*platform_data;
 	size_t			pdata_size;
+	const char		*of_compatible;
 
 	/*
 	 * These resources can be specified relative to the parent device.

commit ba279f58c6148c1dc76265da98eb292e76c15a32
Author: Samuel Ortiz <sameo@linux.intel.com>
Date:   Fri Apr 8 02:04:50 2011 +0200

    mfd: Remove mfd_data
    
    Cell pointers are passed through device->mfd_cell and platform data
    is passed through the MFD cell platform_data pointer.
    
    Signed-off-by: Samuel Ortiz <sameo@linux.intel.com>

diff --git a/include/linux/mfd/core.h b/include/linux/mfd/core.h
index 68c13e52a50c..4e76163dd862 100644
--- a/include/linux/mfd/core.h
+++ b/include/linux/mfd/core.h
@@ -33,9 +33,6 @@ struct mfd_cell {
 	int			(*suspend)(struct platform_device *dev);
 	int			(*resume)(struct platform_device *dev);
 
-	/* mfd_data can be used to pass data to client drivers */
-	void			*mfd_data;
-
 	/* platform data passed to the sub devices drivers */
 	void			*platform_data;
 	size_t			pdata_size;
@@ -93,24 +90,6 @@ static inline const struct mfd_cell *mfd_get_cell(struct platform_device *pdev)
 	return pdev->mfd_cell;
 }
 
-/*
- * Given a platform device that's been created by mfd_add_devices(), fetch
- * the .mfd_data entry from the mfd_cell that created it.
- * Otherwise just return the platform_data pointer.
- * This maintains compatibility with platform drivers whose devices aren't
- * created by the mfd layer, and expect platform_data to contain what would've
- * otherwise been in mfd_data.
- */
-static inline void *mfd_get_data(struct platform_device *pdev)
-{
-	const struct mfd_cell *cell = mfd_get_cell(pdev);
-
-	if (cell)
-		return cell->mfd_data;
-	else
-		return pdev->dev.platform_data;
-}
-
 extern int mfd_add_devices(struct device *parent, int id,
 			   struct mfd_cell *cells, int n_devs,
 			   struct resource *mem_base,

commit eb8956074e7652e802be5f078080c704c2c87104
Author: Samuel Ortiz <sameo@linux.intel.com>
Date:   Wed Apr 6 16:52:52 2011 +0200

    mfd: Add platform data pointer back
    
    Now that we have a way to pass MFD cells down to the sub drivers,
    we can gradually get rid of mfd_data by putting the platform pointer
    back in place.
    
    Signed-off-by: Samuel Ortiz <sameo@linux.intel.com>

diff --git a/include/linux/mfd/core.h b/include/linux/mfd/core.h
index aef23309a742..68c13e52a50c 100644
--- a/include/linux/mfd/core.h
+++ b/include/linux/mfd/core.h
@@ -36,6 +36,10 @@ struct mfd_cell {
 	/* mfd_data can be used to pass data to client drivers */
 	void			*mfd_data;
 
+	/* platform data passed to the sub devices drivers */
+	void			*platform_data;
+	size_t			pdata_size;
+
 	/*
 	 * These resources can be specified relative to the parent device.
 	 * For accessing hardware you should use resources from the platform dev

commit e710d7d5a9cab1041b7a3cf9e655b75d92786857
Author: Samuel Ortiz <sameo@linux.intel.com>
Date:   Fri Apr 8 00:43:01 2011 +0200

    mfd: Fetch cell pointer from platform_device->mfd_cell
    
    In order for MFD drivers to fetch their cell pointer but also their
    platform data one, an mfd cell pointer is added to the platform_device
    structure.
    That allows all MFD sub devices drivers to be MFD agnostic, unless
    they really need to access their MFD cell data. Most of them don't,
    especially the ones for IPs used by both MFD and non MFD SoCs.
    
    Cc: Grant Likely <grant.likely@secretlab.ca>
    Acked-by: Greg KH <gregkh@suse.de>
    Signed-off-by: Samuel Ortiz <sameo@linux.intel.com>

diff --git a/include/linux/mfd/core.h b/include/linux/mfd/core.h
index ad1b19aa6508..aef23309a742 100644
--- a/include/linux/mfd/core.h
+++ b/include/linux/mfd/core.h
@@ -86,16 +86,25 @@ extern int mfd_clone_cell(const char *cell, const char **clones,
  */
 static inline const struct mfd_cell *mfd_get_cell(struct platform_device *pdev)
 {
-	return pdev->dev.platform_data;
+	return pdev->mfd_cell;
 }
 
 /*
  * Given a platform device that's been created by mfd_add_devices(), fetch
  * the .mfd_data entry from the mfd_cell that created it.
+ * Otherwise just return the platform_data pointer.
+ * This maintains compatibility with platform drivers whose devices aren't
+ * created by the mfd layer, and expect platform_data to contain what would've
+ * otherwise been in mfd_data.
  */
 static inline void *mfd_get_data(struct platform_device *pdev)
 {
-	return mfd_get_cell(pdev)->mfd_data;
+	const struct mfd_cell *cell = mfd_get_cell(pdev);
+
+	if (cell)
+		return cell->mfd_data;
+	else
+		return pdev->dev.platform_data;
 }
 
 extern int mfd_add_devices(struct device *parent, int id,

commit fa1df691688f34cbcd5bf77bd084bbe47e9d6bfe
Author: Andres Salomon <dilinger@queued.net>
Date:   Mon Mar 21 19:19:35 2011 -0700

    mfd: Add mfd_clone_cell(), convert cs5535-mfd/olpc-xo1 to it
    
    Replace mfd_shared_platform_driver_register with mfd_clone_cell.  The
    former was called by an mfd client, and registered both a platform driver
    and device.  The latter is called by an mfd driver, and registers only a
    platform device.
    
    The downside of this is that mfd drivers need to be modified whenever
    new clients are added that share a cell; the upside is that it fits
    Linux's driver model better.  It's also simpler.
    
    This also converts cs5535-mfd/olpc-xo1 from the old API.  cs5535-mfd
    now creates the olpc-xo1-{acpi,pms} devices, while olpc-xo1 binds to
    them via platform drivers.
    
    Signed-off-by: Andres Salomon <dilinger@queued.net>
    Signed-off-by: Samuel Ortiz <sameo@linux.intel.com>

diff --git a/include/linux/mfd/core.h b/include/linux/mfd/core.h
index 1408bf8eed5f..ad1b19aa6508 100644
--- a/include/linux/mfd/core.h
+++ b/include/linux/mfd/core.h
@@ -62,6 +62,24 @@ struct mfd_cell {
 extern int mfd_cell_enable(struct platform_device *pdev);
 extern int mfd_cell_disable(struct platform_device *pdev);
 
+/*
+ * "Clone" multiple platform devices for a single cell. This is to be used
+ * for devices that have multiple users of a cell.  For example, if an mfd
+ * driver wants the cell "foo" to be used by a GPIO driver, an MTD driver,
+ * and a platform driver, the following bit of code would be use after first
+ * calling mfd_add_devices():
+ *
+ * const char *fclones[] = { "foo-gpio", "foo-mtd" };
+ * err = mfd_clone_cells("foo", fclones, ARRAY_SIZE(fclones));
+ *
+ * Each driver (MTD, GPIO, and platform driver) would then register
+ * platform_drivers for "foo-mtd", "foo-gpio", and "foo", respectively.
+ * The cell's .enable/.disable hooks should be used to deal with hardware
+ * resource contention.
+ */
+extern int mfd_clone_cell(const char *cell, const char **clones,
+		size_t n_clones);
+
 /*
  * Given a platform device that's been created by mfd_add_devices(), fetch
  * the mfd_cell that created it.
@@ -87,13 +105,4 @@ extern int mfd_add_devices(struct device *parent, int id,
 
 extern void mfd_remove_devices(struct device *parent);
 
-/*
- * For MFD drivers with clients sharing access to resources, these create
- * multiple platform devices per cell.  Contention handling must still be
- * handled via drivers (ie, with enable/disable hooks).
- */
-extern int mfd_shared_platform_driver_register(struct platform_driver *drv,
-		const char *cellname);
-extern void mfd_shared_platform_driver_unregister(struct platform_driver *drv);
-
 #endif

commit f77289ac25b0c81acbed6f9c17cb14809a04e18b
Author: Andres Salomon <dilinger@queued.net>
Date:   Thu Mar 3 09:51:58 2011 -0800

    mfd: Rename mfd_shared_cell_{en,dis}able to drop the "shared" part
    
    As requested by Samuel, there's not really any reason to have "shared"
    in the name.
    
    This also modifies the only user of the function, as well.
    
    Signed-off-by: Andres Salomon <dilinger@queued.net>
    Signed-off-by: Samuel Ortiz <sameo@linux.intel.com>

diff --git a/include/linux/mfd/core.h b/include/linux/mfd/core.h
index ed9970412cc2..1408bf8eed5f 100644
--- a/include/linux/mfd/core.h
+++ b/include/linux/mfd/core.h
@@ -59,8 +59,8 @@ struct mfd_cell {
  * being called only when a device is first being enabled or no other
  * clients are making use of it.
  */
-extern int mfd_shared_cell_enable(struct platform_device *pdev);
-extern int mfd_shared_cell_disable(struct platform_device *pdev);
+extern int mfd_cell_enable(struct platform_device *pdev);
+extern int mfd_cell_disable(struct platform_device *pdev);
 
 /*
  * Given a platform device that's been created by mfd_add_devices(), fetch

commit a9bbba996302344b1fac7773cf8198f6fee35ac1
Author: Andres Salomon <dilinger@queued.net>
Date:   Thu Feb 17 19:07:35 2011 -0800

    mfd: add platform_device sharing support for mfd
    
    This adds functions to enable platform_device sharing for mfd clients.
    
    Each platform driver (mfd client) that wants to share an mfd_cell's
    platform_device uses the mfd_shared_platform_driver_{un,}register()
    functions instead of platform_driver_{un,}register().  Along with
    registering the platform driver, these also register a new platform
    device with the same characteristics as the original cell, but a different
    name.  Given an mfd_cell with the name "foo", drivers that want to
    share access to its resources can call mfd_shared_platform_driver_register
    with platform drivers named (for example) "bar" and "baz".  This
    will register two platform devices and drivers named "bar" and "baz"
    that share the same cell as the platform device "foo".  The drivers
    can then call "foo" cell's enable hooks (or mfd_shared_cell_enable)
    to enable resources, and obtain platform resources as they normally
    would.
    
    This deals with platform handling only; mfd driver-specific details,
    hardware handling, refcounting, etc are all dealt with separately.
    
    Signed-off-by: Andres Salomon <dilinger@queued.net>
    Signed-off-by: Samuel Ortiz <sameo@linux.intel.com>

diff --git a/include/linux/mfd/core.h b/include/linux/mfd/core.h
index 22a2f5ebd9db..ed9970412cc2 100644
--- a/include/linux/mfd/core.h
+++ b/include/linux/mfd/core.h
@@ -87,4 +87,13 @@ extern int mfd_add_devices(struct device *parent, int id,
 
 extern void mfd_remove_devices(struct device *parent);
 
+/*
+ * For MFD drivers with clients sharing access to resources, these create
+ * multiple platform devices per cell.  Contention handling must still be
+ * handled via drivers (ie, with enable/disable hooks).
+ */
+extern int mfd_shared_platform_driver_register(struct platform_driver *drv,
+		const char *cellname);
+extern void mfd_shared_platform_driver_unregister(struct platform_driver *drv);
+
 #endif

commit 1e29af62f2b285bd18685da93c3ce8c33ca2d1db
Author: Andres Salomon <dilinger@queued.net>
Date:   Thu Feb 17 19:07:34 2011 -0800

    mfd: Add refcounting support to mfd_cells
    
    This provides convenience functions for sharing of cells across
    multiple mfd clients.  Mfd drivers can provide enable/disable hooks
    to actually tweak the hardware, and clients can call
    mfd_shared_cell_{en,dis}able without having to worry about whether
    or not another client happens to have enabled or disabled the
    cell/hardware.
    
    Note that this is purely optional; drivers can continue to use
    the mfd_cell's enable/disable hooks for their own purposes, if
    desired.
    
    Signed-off-by: Andres Salomon <dilinger@queued.net>
    Signed-off-by: Samuel Ortiz <sameo@linux.intel.com>

diff --git a/include/linux/mfd/core.h b/include/linux/mfd/core.h
index 71cd1f983cce..22a2f5ebd9db 100644
--- a/include/linux/mfd/core.h
+++ b/include/linux/mfd/core.h
@@ -25,8 +25,11 @@ struct mfd_cell {
 	const char		*name;
 	int			id;
 
+	/* refcounting for multiple drivers to use a single cell */
+	atomic_t		*usage_count;
 	int			(*enable)(struct platform_device *dev);
 	int			(*disable)(struct platform_device *dev);
+
 	int			(*suspend)(struct platform_device *dev);
 	int			(*resume)(struct platform_device *dev);
 
@@ -50,6 +53,15 @@ struct mfd_cell {
 	bool			pm_runtime_no_callbacks;
 };
 
+/*
+ * Convenience functions for clients using shared cells.  Refcounting
+ * happens automatically, with the cell's enable/disable callbacks
+ * being called only when a device is first being enabled or no other
+ * clients are making use of it.
+ */
+extern int mfd_shared_cell_enable(struct platform_device *pdev);
+extern int mfd_shared_cell_disable(struct platform_device *pdev);
+
 /*
  * Given a platform device that's been created by mfd_add_devices(), fetch
  * the mfd_cell that created it.
@@ -69,7 +81,7 @@ static inline void *mfd_get_data(struct platform_device *pdev)
 }
 
 extern int mfd_add_devices(struct device *parent, int id,
-			   const struct mfd_cell *cells, int n_devs,
+			   struct mfd_cell *cells, int n_devs,
 			   struct resource *mem_base,
 			   int irq_base);
 

commit dcb50e83bb86d66d3554ba9c365488669c84d037
Author: Andres Salomon <dilinger@queued.net>
Date:   Thu Feb 17 19:07:33 2011 -0800

    mfd: Remove driver_data field from mfd_cell
    
    All users of this have now been switched over to using mfd_data;
    it can go away now.
    
    Signed-off-by: Andres Salomon <dilinger@queued.net>
    Signed-off-by: Samuel Ortiz <sameo@linux.intel.com>

diff --git a/include/linux/mfd/core.h b/include/linux/mfd/core.h
index f317fe4f8366..71cd1f983cce 100644
--- a/include/linux/mfd/core.h
+++ b/include/linux/mfd/core.h
@@ -30,9 +30,6 @@ struct mfd_cell {
 	int			(*suspend)(struct platform_device *dev);
 	int			(*resume)(struct platform_device *dev);
 
-	/* driver-specific data for MFD-aware "cell" drivers */
-	void			*driver_data;
-
 	/* mfd_data can be used to pass data to client drivers */
 	void			*mfd_data;
 

commit 65e523595a31813c0f20ffd249792c60e253438e
Author: Andres Salomon <dilinger@queued.net>
Date:   Thu Feb 17 19:07:25 2011 -0800

    mfd: Rename platform_data field of mfd_cell to mfd_data
    
    Rename the platform_data variable to imply a distinction between
    common platform_data driver usage (typically accessed via
    pdev->dev.platform_data) and the way MFD passes data down to
    clients (using a wrapper named mfd_get_data).
    
    All clients have already been changed to use the wrapper function,
    so this can be a quick single-commit change that only touches things
    in drivers/mfd.
    
    Signed-off-by: Andres Salomon <dilinger@queued.net>
    Acked-by: Linus Walleij <linus.walleij@stericsson.com>
    Signed-off-by: Samuel Ortiz <sameo@linux.intel.com>

diff --git a/include/linux/mfd/core.h b/include/linux/mfd/core.h
index 923ec2591eb7..f317fe4f8366 100644
--- a/include/linux/mfd/core.h
+++ b/include/linux/mfd/core.h
@@ -33,8 +33,8 @@ struct mfd_cell {
 	/* driver-specific data for MFD-aware "cell" drivers */
 	void			*driver_data;
 
-	/* platform_data can be used to pass data to "generic" drivers */
-	void			*platform_data;
+	/* mfd_data can be used to pass data to client drivers */
+	void			*mfd_data;
 
 	/*
 	 * These resources can be specified relative to the parent device.
@@ -64,11 +64,11 @@ static inline const struct mfd_cell *mfd_get_cell(struct platform_device *pdev)
 
 /*
  * Given a platform device that's been created by mfd_add_devices(), fetch
- * the .platform_data entry from the mfd_cell that created it.
+ * the .mfd_data entry from the mfd_cell that created it.
  */
 static inline void *mfd_get_data(struct platform_device *pdev)
 {
-	return mfd_get_cell(pdev)->platform_data;
+	return mfd_get_cell(pdev)->mfd_data;
 }
 
 extern int mfd_add_devices(struct device *parent, int id,

commit 40e03f571b2e63827f2afb90ea9aa459612c29e3
Author: Andres Salomon <dilinger@queued.net>
Date:   Thu Feb 17 19:07:24 2011 -0800

    mfd: Drop data_size from mfd_cell struct
    
    Now that there are no more users of this, drop it.
    
    Signed-off-by: Andres Salomon <dilinger@queued.net>
    Signed-off-by: Samuel Ortiz <sameo@linux.intel.com>

diff --git a/include/linux/mfd/core.h b/include/linux/mfd/core.h
index aefc378f8dc9..923ec2591eb7 100644
--- a/include/linux/mfd/core.h
+++ b/include/linux/mfd/core.h
@@ -36,9 +36,6 @@ struct mfd_cell {
 	/* platform_data can be used to pass data to "generic" drivers */
 	void			*platform_data;
 
-	/* unused */
-	size_t			data_size;
-
 	/*
 	 * These resources can be specified relative to the parent device.
 	 * For accessing hardware you should use resources from the platform dev

commit fe891a008f3310be47786e87c158edebdb71e265
Author: Andres Salomon <dilinger@queued.net>
Date:   Thu Feb 17 19:07:09 2011 -0800

    mfd-core: Unconditionally add mfd_cell to every platform_device
    
    Previously, one would set the mfd_cell's platform_data/data_size to point
    to the current mfd_cell in order to pass that information along to drivers.
    
    This causes the current mfd_cell to always be available to drivers.  It
    also adds a wrapper function for fetching the mfd cell from a platform
    device, similar to what originally existed for mfd devices.
    
    Drivers who previously used platform_data for other purposes can still
    use it; the difference is that mfd_get_data() must be used to
    access it (and the pdata structure is no longer allocated in
    mfd_add_devices).
    
    Note that mfd_get_data is intentionally vague (in name) about where
    the data is stored; variable name changes can come later without having
    to touch brazillions of drivers.
    
    Signed-off-by: Andres Salomon <dilinger@queued.net>
    Signed-off-by: Samuel Ortiz <sameo@linux.intel.com>

diff --git a/include/linux/mfd/core.h b/include/linux/mfd/core.h
index 1fd7c4467e5a..aefc378f8dc9 100644
--- a/include/linux/mfd/core.h
+++ b/include/linux/mfd/core.h
@@ -33,9 +33,10 @@ struct mfd_cell {
 	/* driver-specific data for MFD-aware "cell" drivers */
 	void			*driver_data;
 
-	/* platform_data can be used to either pass data to "generic"
-	   driver or as a hook to mfd_cell for the "cell" drivers */
+	/* platform_data can be used to pass data to "generic" drivers */
 	void			*platform_data;
+
+	/* unused */
 	size_t			data_size;
 
 	/*
@@ -55,6 +56,24 @@ struct mfd_cell {
 	bool			pm_runtime_no_callbacks;
 };
 
+/*
+ * Given a platform device that's been created by mfd_add_devices(), fetch
+ * the mfd_cell that created it.
+ */
+static inline const struct mfd_cell *mfd_get_cell(struct platform_device *pdev)
+{
+	return pdev->dev.platform_data;
+}
+
+/*
+ * Given a platform device that's been created by mfd_add_devices(), fetch
+ * the .platform_data entry from the mfd_cell that created it.
+ */
+static inline void *mfd_get_data(struct platform_device *pdev)
+{
+	return mfd_get_cell(pdev)->platform_data;
+}
+
 extern int mfd_add_devices(struct device *parent, int id,
 			   const struct mfd_cell *cells, int n_devs,
 			   struct resource *mem_base,

commit 2798e226ad7db82725ba03da933638e981b472f7
Author: Andres Salomon <dilinger@queued.net>
Date:   Thu Feb 17 19:07:08 2011 -0800

    mfd-core: Fix up typos/vagueness in comment
    
    Signed-off-by: Andres Salomon <dilinger@queued.net>
    Signed-off-by: Samuel Ortiz <sameo@linux.intel.com>

diff --git a/include/linux/mfd/core.h b/include/linux/mfd/core.h
index 835996e167e1..1fd7c4467e5a 100644
--- a/include/linux/mfd/core.h
+++ b/include/linux/mfd/core.h
@@ -39,8 +39,8 @@ struct mfd_cell {
 	size_t			data_size;
 
 	/*
-	 * This resources can be specified relatively to the parent device.
-	 * For accessing device you should use resources from device
+	 * These resources can be specified relative to the parent device.
+	 * For accessing hardware you should use resources from the platform dev
 	 */
 	int			num_resources;
 	const struct resource	*resources;

commit 4c90aa94f6b3e33f57faaf19ef9819195dff61d3
Author: Mark Brown <broonie@opensource.wolfsonmicro.com>
Date:   Fri Nov 26 17:19:34 2010 +0000

    mfd: Provide pm_runtime_no_callbacks flag in cell data
    
    Allow MFD cells to have pm_runtime_no_callbacks() called on them during
    registration. This causes the runtime PM framework to ignore them,
    allowing use of runtime PM to suspend the device as a whole even if
    not all drivers for the MFD can usefully implement runtime PM. For
    example, RTCs are likely to run continuously regardless of the power
    state of the system.
    
    Signed-off-by: Mark Brown <broonie@opensource.wolfsonmicro.com>
    Signed-off-by: Samuel Ortiz <sameo@linux.intel.com>

diff --git a/include/linux/mfd/core.h b/include/linux/mfd/core.h
index 5582ab3d3e48..835996e167e1 100644
--- a/include/linux/mfd/core.h
+++ b/include/linux/mfd/core.h
@@ -47,6 +47,12 @@ struct mfd_cell {
 
 	/* don't check for resource conflicts */
 	bool			ignore_resource_conflicts;
+
+	/*
+	 * Disable runtime PM callbacks for this subdevice - see
+	 * pm_runtime_no_callbacks().
+	 */
+	bool			pm_runtime_no_callbacks;
 };
 
 extern int mfd_add_devices(struct device *parent, int id,

commit b595076a180a56d1bb170e6eceda6eb9d76f4cd3
Author: Uwe Kleine-KÃ¶nig <u.kleine-koenig@pengutronix.de>
Date:   Mon Nov 1 15:38:34 2010 -0400

    tree-wide: fix comment/printk typos
    
    "gadget", "through", "command", "maintain", "maintain", "controller", "address",
    "between", "initiali[zs]e", "instead", "function", "select", "already",
    "equal", "access", "management", "hierarchy", "registration", "interest",
    "relative", "memory", "offset", "already",
    
    Signed-off-by: Uwe Kleine-KÃ¶nig <u.kleine-koenig@pengutronix.de>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>

diff --git a/include/linux/mfd/core.h b/include/linux/mfd/core.h
index cb93d80aa642..5582ab3d3e48 100644
--- a/include/linux/mfd/core.h
+++ b/include/linux/mfd/core.h
@@ -39,7 +39,7 @@ struct mfd_cell {
 	size_t			data_size;
 
 	/*
-	 * This resources can be specified relatievly to the parent device.
+	 * This resources can be specified relatively to the parent device.
 	 * For accessing device you should use resources from device
 	 */
 	int			num_resources;

commit 5f2545fa156f3d4d327038d7664608e146809a3c
Author: Daniel Drake <dsd@laptop.org>
Date:   Thu Sep 30 21:55:36 2010 +0100

    mfd: Allow for bypass of cell resource conflict check
    
    The upcoming VIA VX855 MFD driver needs to communicate resources
    to subdevices where the resources may be claimed by ACPI.
    
    Add a flag to mfd_cell to request that resources are not policed.
    
    Signed-off-by: Daniel Drake <dsd@laptop.org>
    Signed-off-by: Samuel Ortiz <sameo@linux.intel.com>

diff --git a/include/linux/mfd/core.h b/include/linux/mfd/core.h
index 11d740b8831d..cb93d80aa642 100644
--- a/include/linux/mfd/core.h
+++ b/include/linux/mfd/core.h
@@ -44,6 +44,9 @@ struct mfd_cell {
 	 */
 	int			num_resources;
 	const struct resource	*resources;
+
+	/* don't check for resource conflicts */
+	bool			ignore_resource_conflicts;
 };
 
 extern int mfd_add_devices(struct device *parent, int id,

commit 3bed6e415fc2cbf8d706848a62a48aebe84435e5
Author: Mark Brown <broonie@opensource.wolfsonmicro.com>
Date:   Mon Jul 27 14:45:51 2009 +0100

    mfd: Allow multiple MFD cells with the same name
    
    Provide basic support for MFDs having multiple cells of a given
    type with different IDs by adding an id to the mfd_cell structure
    and then adding that to the id passed in to mfd_add_devices().
    
    As it stands this approach requires that MFDs using this feature
    deal with ensuring that there aren't any ID collisions resulting
    from multiple MFDs of the same type being instantiated. This needs
    to happen with the existing code too, but with this approach there
    is a knock on effect on the IDs for non-duplicated devices.
    
    Signed-off-by: Mark Brown <broonie@opensource.wolfsonmicro.com>
    Signed-off-by: Samuel Ortiz <sameo@linux.intel.com>

diff --git a/include/linux/mfd/core.h b/include/linux/mfd/core.h
index 49ef857cdb2d..11d740b8831d 100644
--- a/include/linux/mfd/core.h
+++ b/include/linux/mfd/core.h
@@ -23,6 +23,7 @@
  */
 struct mfd_cell {
 	const char		*name;
+	int			id;
 
 	int			(*enable)(struct platform_device *dev);
 	int			(*disable)(struct platform_device *dev);

commit 424f525a1241351da947fb48a938128ddd774511
Author: Dmitry Baryshkov <dbaryshkov@gmail.com>
Date:   Tue Jul 29 01:30:26 2008 +0200

    mfd: accept pure device as a parent, not only platform_device
    
    Signed-off-by: Dmitry Baryshkov <dbaryshkov@gmail.com>
    Signed-off-by: Samuel Ortiz <sameo@openedhand.com>

diff --git a/include/linux/mfd/core.h b/include/linux/mfd/core.h
index ea45d4a5a2ac..49ef857cdb2d 100644
--- a/include/linux/mfd/core.h
+++ b/include/linux/mfd/core.h
@@ -45,11 +45,11 @@ struct mfd_cell {
 	const struct resource	*resources;
 };
 
-extern int mfd_add_devices(struct platform_device *parent,
+extern int mfd_add_devices(struct device *parent, int id,
 			   const struct mfd_cell *cells, int n_devs,
 			   struct resource *mem_base,
 			   int irq_base);
 
-extern void mfd_remove_devices(struct platform_device *parent);
+extern void mfd_remove_devices(struct device *parent);
 
 #endif

commit 56edb58be157a06dc147a988af3588059556d392
Author: Mike Rapoport <mike@compulab.co.il>
Date:   Tue Jul 29 01:23:32 2008 +0200

    mfd: add platform_data to mfd_cell
    
    Adding platform_data to mfd_cell allows passing of platform data directly
    to the platform_device created for each cell and thus reuse of existing
    drivers.
    On the other side it can be used as a hook to mfd_cell itself
    removing the need in mfd_get_cell method.
    
    Signed-off-by: Mike Rapoport <mike@compulab.co.il>
    Acked-by: Dmitry Baryshkov <dbaryshkov@gmail.com>
    Signed-off-by: Samuel Ortiz <sameo@openedhand.com>

diff --git a/include/linux/mfd/core.h b/include/linux/mfd/core.h
index b7cbb9968339..ea45d4a5a2ac 100644
--- a/include/linux/mfd/core.h
+++ b/include/linux/mfd/core.h
@@ -29,7 +29,13 @@ struct mfd_cell {
 	int			(*suspend)(struct platform_device *dev);
 	int			(*resume)(struct platform_device *dev);
 
-	void			*driver_data; /* driver-specific data */
+	/* driver-specific data for MFD-aware "cell" drivers */
+	void			*driver_data;
+
+	/* platform_data can be used to either pass data to "generic"
+	   driver or as a hook to mfd_cell for the "cell" drivers */
+	void			*platform_data;
+	size_t			data_size;
 
 	/*
 	 * This resources can be specified relatievly to the parent device.
@@ -39,11 +45,6 @@ struct mfd_cell {
 	const struct resource	*resources;
 };
 
-static inline struct mfd_cell *mfd_get_cell(struct platform_device *pdev)
-{
-	return (struct mfd_cell *)pdev->dev.platform_data;
-}
-
 extern int mfd_add_devices(struct platform_device *parent,
 			   const struct mfd_cell *cells, int n_devs,
 			   struct resource *mem_base,

commit 7f71ac9374fec066e428892a68db158946cee1fb
Author: Ben Dooks <ben-linux@fluff.org>
Date:   Mon Jul 28 18:29:09 2008 +0200

    mfd: Coding style fixes
    
    Fix some coding style fixes in the mfd core driver.
    
    Signed-off-by: Ben Dooks <ben-linux@fluff.org>
    Signed-off-by: Samuel Ortiz <sameo@openedhand.com>

diff --git a/include/linux/mfd/core.h b/include/linux/mfd/core.h
index bb3dd0545928..b7cbb9968339 100644
--- a/include/linux/mfd/core.h
+++ b/include/linux/mfd/core.h
@@ -1,5 +1,3 @@
-#ifndef MFD_CORE_H
-#define MFD_CORE_H
 /*
  * drivers/mfd/mfd-core.h
  *
@@ -13,6 +11,9 @@
  *
  */
 
+#ifndef MFD_CORE_H
+#define MFD_CORE_H
+
 #include <linux/platform_device.h>
 
 /*
@@ -38,17 +39,15 @@ struct mfd_cell {
 	const struct resource	*resources;
 };
 
-static inline struct mfd_cell *
-mfd_get_cell(struct platform_device *pdev)
+static inline struct mfd_cell *mfd_get_cell(struct platform_device *pdev)
 {
 	return (struct mfd_cell *)pdev->dev.platform_data;
 }
 
-extern int mfd_add_devices(
-		struct platform_device *parent,
-		const struct mfd_cell *cells, int n_devs,
-		struct resource *mem_base,
-		int irq_base);
+extern int mfd_add_devices(struct platform_device *parent,
+			   const struct mfd_cell *cells, int n_devs,
+			   struct resource *mem_base,
+			   int irq_base);
 
 extern void mfd_remove_devices(struct platform_device *parent);
 

commit aa613de676986f136fa6f48a4d709b5d264f4f38
Author: Dmitry Baryshkov <dbaryshkov@gmail.com>
Date:   Fri Jun 27 10:37:19 2008 +0100

    [ARM] 5127/1: Core MFD support
    
    This patch provides a common subdevice registration system for MFD type
    chips, using platfrom device.
    
    Signed-off-by: Ian Molton <spyro@f2s.com>
    Signed-off-by: Dmitry Baryshkov <dbaryshkov@gmail.com>
    Signed-off-by: Russell King <rmk+kernel@arm.linux.org.uk>

diff --git a/include/linux/mfd/core.h b/include/linux/mfd/core.h
new file mode 100644
index 000000000000..bb3dd0545928
--- /dev/null
+++ b/include/linux/mfd/core.h
@@ -0,0 +1,55 @@
+#ifndef MFD_CORE_H
+#define MFD_CORE_H
+/*
+ * drivers/mfd/mfd-core.h
+ *
+ * core MFD support
+ * Copyright (c) 2006 Ian Molton
+ * Copyright (c) 2007 Dmitry Baryshkov
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation.
+ *
+ */
+
+#include <linux/platform_device.h>
+
+/*
+ * This struct describes the MFD part ("cell").
+ * After registration the copy of this structure will become the platform data
+ * of the resulting platform_device
+ */
+struct mfd_cell {
+	const char		*name;
+
+	int			(*enable)(struct platform_device *dev);
+	int			(*disable)(struct platform_device *dev);
+	int			(*suspend)(struct platform_device *dev);
+	int			(*resume)(struct platform_device *dev);
+
+	void			*driver_data; /* driver-specific data */
+
+	/*
+	 * This resources can be specified relatievly to the parent device.
+	 * For accessing device you should use resources from device
+	 */
+	int			num_resources;
+	const struct resource	*resources;
+};
+
+static inline struct mfd_cell *
+mfd_get_cell(struct platform_device *pdev)
+{
+	return (struct mfd_cell *)pdev->dev.platform_data;
+}
+
+extern int mfd_add_devices(
+		struct platform_device *parent,
+		const struct mfd_cell *cells, int n_devs,
+		struct resource *mem_base,
+		int irq_base);
+
+extern void mfd_remove_devices(struct platform_device *parent);
+
+#endif
