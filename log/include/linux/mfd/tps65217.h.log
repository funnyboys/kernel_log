commit 511cb17448d95e4277451cdee882e72b6a9a3099
Author: Keerthy <j-keerthy@ti.com>
Date:   Wed Aug 30 14:59:10 2017 +0530

    mfd: tps65217: Introduce dependency on CONFIG_OF
    
    Currently the driver boots only via device tree hence add a
    dependency on CONFIG_OF. This leaves with a bunch of unused code
    so clean that up. This patch also makes use of probe_new function
    in place of the probe function so as to avoid passing i2c_device_id.
    
    Signed-off-by: Keerthy <j-keerthy@ti.com>
    Reviewed-by: Javier Martinez Canillas <javierm@redhat.com>
    Signed-off-by: Lee Jones <lee.jones@linaro.org>

diff --git a/include/linux/mfd/tps65217.h b/include/linux/mfd/tps65217.h
index eac285756b37..b5dd108421c8 100644
--- a/include/linux/mfd/tps65217.h
+++ b/include/linux/mfd/tps65217.h
@@ -263,7 +263,6 @@ struct tps65217_board {
 struct tps65217 {
 	struct device *dev;
 	struct tps65217_board *pdata;
-	unsigned long id;
 	struct regulator_desc desc[TPS65217_NUM_REGULATOR];
 	struct regmap *regmap;
 	u8 *strobes;
@@ -278,11 +277,6 @@ static inline struct tps65217 *dev_to_tps65217(struct device *dev)
 	return dev_get_drvdata(dev);
 }
 
-static inline unsigned long tps65217_chip_id(struct tps65217 *tps65217)
-{
-	return tps65217->id;
-}
-
 int tps65217_reg_read(struct tps65217 *tps, unsigned int reg,
 					unsigned int *val);
 int tps65217_reg_write(struct tps65217 *tps, unsigned int reg,

commit ac5a28b0d3d173ba0a581342416ed339f2c3be3d
Merge: b0b3a37b908b 93559191e71b
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Mon Dec 19 08:16:26 2016 -0800

    Merge tag 'mfd-for-linus-4.10' of git://git.kernel.org/pub/scm/linux/kernel/git/lee/mfd
    
    Pull MFD updates from Lee Jones:
     "New Device Support
       - Add support for Ricoh RC5T619 PMIC to rn5t618
       - Add support for PM8821 PMIC to qcom-pm8xxx
    
      New Functionality:
       - Add support for GPIO to lpc_ich
       - Add support for GPADC to sun4i
       - Add ability for rk808 to shutdown
    
      Fix-ups:
       - Simplify/strip unnecessary code; tps65218, palmas, tps65217
       - Device Tree binding updates; tps65218, altera-a10sr
       - Provide/export device ID info; tps65218, axp20x-i2c, hi655x-pmic,
         fsl-imx25-tsadc, intel_soc_pmic_bxtwc
       - Use MFD API instead of of_platform_populate(); tps65218
       - Generalise name-space; pm8xxx
       - Supply/edit regmap configuration; axp20x, cs47l24-tables, axp20x
       - Enable compile testing; max77620, max77686, exynos-lpass,
         abx500-core
       - Coding style issues; wm8994-core, wm5102-tables
       - Supply endian support; syscon
       - Remove module support; ab3100-core, ab8500-debugfs, ab8500-gpadc,
         abx500-core
    
      Bug Fixes:
       - Fix ordering issues; wm8994
       - Fix dependencies (build-time/run-time); exynos_lpass, sun4i-gpadc
       - Fix compiler warnings; sun4i-gpadc
       - Fix leaks; mfd-core
       - Fix page fault during module unload; tps65217"
    
    * tag 'mfd-for-linus-4.10' of git://git.kernel.org/pub/scm/linux/kernel/git/lee/mfd: (49 commits)
      mfd: tps65217: Support an interrupt pin as the system wakeup
      mfd: tps65217: Make an interrupt handler simpler
      mfd: tps65217: Update register interrupt mask bits instead of writing operation
      mfd: tps65217: Specify the IRQ name
      mfd: tps65217: Fix page fault on unloading modules
      mfd: palmas: Remove redundant check in palmas_power_off
      mfd: arizona: Disable IRQs during driver remove
      mfd: pm8xxx: add support to pm8821
      mfd: intel-lpss: Try to enable Memory-Write-Invalidate
      mfd: rn5t618: Add Ricoh RC5T619 PMIC support
      mfd: axp20x: Add address extension registers for AXP806 regmap
      mfd: intel_soc_pmic_bxtwc: Fix a typo in MODULE_DEVICE_TABLE()
      mfd: core: Fix device reference leak in mfd_clone_cell
      mfd: bcm590xx: Simplify a test
      mfd: sun4i-gpadc: Select regmap-irq
      mfd: abx500-core: drop unused MODULE_ tags from non-modular code
      mfd: ab8500: make sysctrl explicitly non-modular
      mfd: ab8500-gpadc: Make it explicitly non-modular
      mfd: ab8500-debugfs: Make it explicitly non-modular
      mfd: ab8500-core: Make it explicitly non-modular
      ...

commit fa9170522b362aefb4fef58b5cbff45dbefec258
Author: Milo Kim <woogyom.kim@gmail.com>
Date:   Tue Nov 15 22:02:14 2016 +0900

    mfd: tps65217: Make an interrupt handler simpler
    
    Rework the IRQ handler by using HW IRQ number and status bit.
    
    Each HW IRQ number is matched with TPS65217 register layout[*].
    (USB IRQ number is 0, AC is 1, Push button is 2)
    
    When an interrupt is enabled, mask bit should be cleared (unmasked).
    If an interrupt is disabled, then mask bit should be set (masked).
    This mask value is updated into the TPS65217 register in irq_sync_unlock().
    
    Mask bit and interrupt status bit can be handled with HW IRQ number.
    Eventually, additional IRQ data, 'tps65217_irqs[]' and the function,
    'irq_to_tps65217_irq()' are not necessary.
    
    [*] TPS65217 interrupt register layout
    
     Bit7  6     5     4     3    2     1     0
    ----------------------------------------------
    | x | PBM | ACM | USBM | x | PBI | ACI | USBI
    
    PBM:  Push button status change interrupt mask
    ACM:  AC interrupt mask
    USBM: USB power status change interrupt mask
    PBI:  Push button status change interrupt
    ACI:  AC power status change interrupt
    USBI: USB power status change interrupt
    x:    Not used
    
    Signed-off-by: Milo Kim <woogyom.kim@gmail.com>
    Signed-off-by: Lee Jones <lee.jones@linaro.org>

diff --git a/include/linux/mfd/tps65217.h b/include/linux/mfd/tps65217.h
index dfa9f0d0ae2b..20d9dd3d74f1 100644
--- a/include/linux/mfd/tps65217.h
+++ b/include/linux/mfd/tps65217.h
@@ -79,6 +79,7 @@
 #define TPS65217_INT_PBI		BIT(2)
 #define TPS65217_INT_ACI		BIT(1)
 #define TPS65217_INT_USBI		BIT(0)
+#define TPS65217_INT_SHIFT		4
 #define TPS65217_INT_MASK		(TPS65217_INT_PBM | TPS65217_INT_ACM | \
 					TPS65217_INT_USBM)
 

commit 6d2c2b9f806a4ec81833af533d57395db856d5a3
Author: Milo Kim <woogyom.kim@gmail.com>
Date:   Tue Nov 15 22:02:13 2016 +0900

    mfd: tps65217: Update register interrupt mask bits instead of writing operation
    
    TPS65217 interrupt register includes read/writeable mask bits with
    read-only status bits. (bit 4, 5, 6 are R/W, bit 0, 1, 2 are RO)
    And reserved bit is not required.
    
    Register update operation is preferred for disabling all interrupts during
    the device initialisation.
    
    Signed-off-by: Milo Kim <woogyom.kim@gmail.com>
    Signed-off-by: Lee Jones <lee.jones@linaro.org>

diff --git a/include/linux/mfd/tps65217.h b/include/linux/mfd/tps65217.h
index 4ccda8969639..dfa9f0d0ae2b 100644
--- a/include/linux/mfd/tps65217.h
+++ b/include/linux/mfd/tps65217.h
@@ -73,13 +73,14 @@
 #define TPS65217_PPATH_AC_CURRENT_MASK	0x0C
 #define TPS65217_PPATH_USB_CURRENT_MASK	0x03
 
-#define TPS65217_INT_RESERVEDM		BIT(7)
 #define TPS65217_INT_PBM		BIT(6)
 #define TPS65217_INT_ACM		BIT(5)
 #define TPS65217_INT_USBM		BIT(4)
 #define TPS65217_INT_PBI		BIT(2)
 #define TPS65217_INT_ACI		BIT(1)
 #define TPS65217_INT_USBI		BIT(0)
+#define TPS65217_INT_MASK		(TPS65217_INT_PBM | TPS65217_INT_ACM | \
+					TPS65217_INT_USBM)
 
 #define TPS65217_CHGCONFIG0_TREG	BIT(7)
 #define TPS65217_CHGCONFIG0_DPPM	BIT(6)

commit 72478a0cc4025e16f68672844ebebf60524e1668
Author: Milo Kim <woogyom.kim@gmail.com>
Date:   Fri Oct 28 21:37:02 2016 +0900

    mfd: tps65217: Fix mismatched interrupt number
    
    Enum value of 'tps65217_irq_type' is not matched with DT parsed hwirq
    number[*].
    
    The MFD driver gets the IRQ data by referencing hwirq, but the value is
    different. So, irq_to_tps65217_irq() returns mismatched IRQ data.
    Eventually, the power button driver enables not PB but USB interrupt
    when it is probed.
    
    According to the TPS65217 register map[**], USB interrupt is the LSB.
    This patch defines synchronized IRQ value.
    
    [*]  include/dt-bindings/mfd/tps65217.h
    [**] http://www.ti.com/lit/ds/symlink/tps65217.pdf
    
    Signed-off-by: Milo Kim <woogyom.kim@gmail.com>
    Signed-off-by: Tony Lindgren <tony@atomide.com>

diff --git a/include/linux/mfd/tps65217.h b/include/linux/mfd/tps65217.h
index 4ccda8969639..3cbec4b2496a 100644
--- a/include/linux/mfd/tps65217.h
+++ b/include/linux/mfd/tps65217.h
@@ -234,12 +234,11 @@ struct tps65217_bl_pdata {
 	int dft_brightness;
 };
 
-enum tps65217_irq_type {
-	TPS65217_IRQ_PB,
-	TPS65217_IRQ_AC,
-	TPS65217_IRQ_USB,
-	TPS65217_NUM_IRQ
-};
+/* Interrupt numbers */
+#define TPS65217_IRQ_USB		0
+#define TPS65217_IRQ_AC			1
+#define TPS65217_IRQ_PB			2
+#define TPS65217_NUM_IRQ		3
 
 /**
  * struct tps65217_board - packages regulator init data

commit 6556bdacf646fcaa0586123ba85412de1c8f0eee
Author: Marcin Niestroj <m.niestroj@grinn-global.com>
Date:   Fri Sep 9 10:42:02 2016 +0200

    mfd: tps65217: Add support for IRQs
    
    Add support for handling IRQs: power button, AC and USB power state
    changes. Mask and interrupt bits are shared within one register, which
    prevents us to use regmap_irq implementation. New irq_domain is created in
    order to add interrupt handling for each tps65217's subsystem. IRQ
    resources have been added for charger subsystem to be able to notify about
    AC and USB state changes.
    
    Signed-off-by: Marcin Niestroj <m.niestroj@grinn-global.com>
    Reviewed-by: Grygorii Strashko <grygorii.strashko@ti.com>
    Tested-by: Tony Lindgren <tony@atomide.com>
    Signed-off-by: Lee Jones <lee.jones@linaro.org>

diff --git a/include/linux/mfd/tps65217.h b/include/linux/mfd/tps65217.h
index 1c88231496d3..4ccda8969639 100644
--- a/include/linux/mfd/tps65217.h
+++ b/include/linux/mfd/tps65217.h
@@ -73,6 +73,7 @@
 #define TPS65217_PPATH_AC_CURRENT_MASK	0x0C
 #define TPS65217_PPATH_USB_CURRENT_MASK	0x03
 
+#define TPS65217_INT_RESERVEDM		BIT(7)
 #define TPS65217_INT_PBM		BIT(6)
 #define TPS65217_INT_ACM		BIT(5)
 #define TPS65217_INT_USBM		BIT(4)
@@ -233,6 +234,13 @@ struct tps65217_bl_pdata {
 	int dft_brightness;
 };
 
+enum tps65217_irq_type {
+	TPS65217_IRQ_PB,
+	TPS65217_IRQ_AC,
+	TPS65217_IRQ_USB,
+	TPS65217_NUM_IRQ
+};
+
 /**
  * struct tps65217_board - packages regulator init data
  * @tps65217_regulator_data: regulator initialization values
@@ -258,6 +266,10 @@ struct tps65217 {
 	struct regulator_desc desc[TPS65217_NUM_REGULATOR];
 	struct regmap *regmap;
 	u8 *strobes;
+	struct irq_domain *irq_domain;
+	struct mutex irq_lock;
+	u8 irq_mask;
+	int irq;
 };
 
 static inline struct tps65217 *dev_to_tps65217(struct device *dev)

commit 3de56099591a4042556a2d05d4703387ad950c6f
Author: Russ Dill <Russ.Dill@ti.com>
Date:   Fri Jun 24 13:58:07 2016 +0530

    regulator: tps65217: Enable suspend configuration
    
    The TPS65217 has a pre-defined power-up / power-down sequence which in
    a typical application does not need to be changed. However, it is possible
    to define custom sequences under I2C control. The power-up sequence is
    defined by strobes and delay times. Each output rail is assigned to a
    strobe to determine the order in which the rails are enabled.
    
    Every regulator of tps65217 PMIC has sequence registers and every
    regulator has a default strobe value and gets disabled when a particular
    power down sequence occurs.
    
    To keep a regulator on during suspend we write value 0 to strobe so
    that the regulator is out of all sequencers and is not impacted by any
    power down sequence. Hence saving the default strobe value during probe
    so that when we want to regulator to be enabled during suspend we write 0
    to strobe and when we want it to get disabled during suspend we write
    the default saved strobe value.
    
    This allows platform data to specify which power rails should be on or off
    during RTC only suspend. This is necessary to keep DDR state while in RTC
    only suspend.
    
    Signed-off-by: Russ Dill <Russ.Dill@ti.com>
    [Enhanced commit log and added dynamic allocation for strobes]
    Signed-off-by: Keerthy <j-keerthy@ti.com>
    Signed-off-by: Mark Brown <broonie@kernel.org>

diff --git a/include/linux/mfd/tps65217.h b/include/linux/mfd/tps65217.h
index ac7fba44d7e4..1c88231496d3 100644
--- a/include/linux/mfd/tps65217.h
+++ b/include/linux/mfd/tps65217.h
@@ -257,6 +257,7 @@ struct tps65217 {
 	unsigned long id;
 	struct regulator_desc desc[TPS65217_NUM_REGULATOR];
 	struct regmap *regmap;
+	u8 *strobes;
 };
 
 static inline struct tps65217 *dev_to_tps65217(struct device *dev)

commit 0b496b4c95c74ba795bc642a6092263ebf905759
Author: Mark Brown <broonie@kernel.org>
Date:   Fri Sep 5 22:16:18 2014 +0100

    mfd: tps65217: Tell regmap what registers are valid
    
    Allow regmap to provide debugfs access to the register map by telling it
    what registers are valid.
    
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Lee Jones <lee.jones@linaro.org>

diff --git a/include/linux/mfd/tps65217.h b/include/linux/mfd/tps65217.h
index 95d6938737fd..ac7fba44d7e4 100644
--- a/include/linux/mfd/tps65217.h
+++ b/include/linux/mfd/tps65217.h
@@ -60,6 +60,8 @@
 #define TPS65217_REG_SEQ5		0X1D
 #define TPS65217_REG_SEQ6		0X1E
 
+#define TPS65217_REG_MAX		TPS65217_REG_SEQ6
+
 /* Register field definitions */
 #define TPS65217_CHIPID_CHIP_MASK	0xF0
 #define TPS65217_CHIPID_REV_MASK	0x0F

commit 073a77d03ee88ae3a5504b3f73632841a55d60a1
Author: Axel Lin <axel.lin@ingics.com>
Date:   Tue Apr 15 19:47:38 2014 +0800

    regulator: tps65217: Remove *rdev[] from struct tps65217
    
    Now this driver uses devm_regulator_register() so we don't need to save rdev
    pointer to tps->rdev[i] for cleanup.
    
    Signed-off-by: Axel Lin <axel.lin@ingics.com>
    Acked-by: Lee Jones <lee.jones@linaro.org>
    Signed-off-by: Mark Brown <broonie@linaro.org>

diff --git a/include/linux/mfd/tps65217.h b/include/linux/mfd/tps65217.h
index 54b5458ec084..95d6938737fd 100644
--- a/include/linux/mfd/tps65217.h
+++ b/include/linux/mfd/tps65217.h
@@ -254,7 +254,6 @@ struct tps65217 {
 	struct tps65217_board *pdata;
 	unsigned long id;
 	struct regulator_desc desc[TPS65217_NUM_REGULATOR];
-	struct regulator_dev *rdev[TPS65217_NUM_REGULATOR];
 	struct regmap *regmap;
 };
 

commit 5c6fbd56d16f38fddec629e1dccdeee5ad7f5a42
Author: Lee Jones <lee.jones@linaro.org>
Date:   Mon Feb 3 08:24:20 2014 +0000

    mfd: tps65217: Naturalise cross-architecture discrepancies
    
    If we compile the TPS65217 for a 64bit architecture we receive the following
    warnings:
    
    drivers/mfd/tps65217.c: In function ‘tps65217_probe’:
    drivers/mfd/tps65217.c:173:13:
      warning: cast from pointer to integer of different size
       chip_id = (unsigned int)match->data;
                 ^
    
    Signed-off-by: Lee Jones <lee.jones@linaro.org>

diff --git a/include/linux/mfd/tps65217.h b/include/linux/mfd/tps65217.h
index a5a7f0130e96..54b5458ec084 100644
--- a/include/linux/mfd/tps65217.h
+++ b/include/linux/mfd/tps65217.h
@@ -252,7 +252,7 @@ struct tps65217_board {
 struct tps65217 {
 	struct device *dev;
 	struct tps65217_board *pdata;
-	unsigned int id;
+	unsigned long id;
 	struct regulator_desc desc[TPS65217_NUM_REGULATOR];
 	struct regulator_dev *rdev[TPS65217_NUM_REGULATOR];
 	struct regmap *regmap;
@@ -263,7 +263,7 @@ static inline struct tps65217 *dev_to_tps65217(struct device *dev)
 	return dev_get_drvdata(dev);
 }
 
-static inline int tps65217_chip_id(struct tps65217 *tps65217)
+static inline unsigned long tps65217_chip_id(struct tps65217 *tps65217)
 {
 	return tps65217->id;
 }

commit 6290d60656e9f4f5a0071bafa798370ab35978a0
Author: Axel Lin <axel.lin@ingics.com>
Date:   Fri Aug 30 18:06:06 2013 +0800

    regulator: tps65217: Convert to use linear ranges
    
    Below is the equation in original code:
    
    tps65217_uv1_ranges:
            0  ... 24: uV = vsel * 25000 + 900000;
            25 ... 52: uV = (vsel - 24) * 50000 + 1500000;
                          = (vsel - 25) * 50000 + 1550000;
            53 ... 55: uV = (vsel - 52) * 100000 + 2900000;
                          = (vsel - 53) * 100000 + 3000000;
            56 ... 62: uV = 3300000;
    
    tps65217_uv2_ranges:
            0  ...  8: uV = vsel * 50000 + 1500000;
            9  ... 13: uV = (vsel - 8) * 100000 + 1900000;
                          = (vsel - 9) * 100000 + 2000000;
            14 ... 31: uV = (vsel - 13) * 50000 + 2400000;
                          = (vsel - 14) * 50000 + 2450000;
    
    The voltage tables are composed of linear ranges.
    This patch converts this driver to use multiple linear ranges APIs.
    
    In original code, voltage range for DCDC1 is 900000 ~ 1800000 and voltage range
    for DCDC3 is 900000 ~ 1500000.  This patch separates the range 25~52 in
    tps65217_uv1_ranges table to two linear ranges: 25~30 and 31~52.
    This change makes it possible to reuse the same linear_ranges table for DCDCx.
    
    Signed-off-by: Axel Lin <axel.lin@ingics.com>
    Signed-off-by: Mark Brown <broonie@linaro.org>

diff --git a/include/linux/mfd/tps65217.h b/include/linux/mfd/tps65217.h
index 29eab2bd3dfa..a5a7f0130e96 100644
--- a/include/linux/mfd/tps65217.h
+++ b/include/linux/mfd/tps65217.h
@@ -243,24 +243,6 @@ struct tps65217_board {
 	struct tps65217_bl_pdata *bl_pdata;
 };
 
-/**
- * struct tps_info - packages regulator constraints
- * @name:		Voltage regulator name
- * @min_uV:		minimum micro volts
- * @max_uV:		minimum micro volts
- * @vsel_to_uv:		Function pointer to get voltage from selector
- * @uv_to_vsel:		Function pointer to get selector from voltage
- *
- * This data is used to check the regualtor voltage limits while setting.
- */
-struct tps_info {
-	const char *name;
-	int min_uV;
-	int max_uV;
-	int (*vsel_to_uv)(unsigned int vsel);
-	int (*uv_to_vsel)(int uV, unsigned int *vsel);
-};
-
 /**
  * struct tps65217 - tps65217 sub-driver chip access routines
  *
@@ -273,7 +255,6 @@ struct tps65217 {
 	unsigned int id;
 	struct regulator_desc desc[TPS65217_NUM_REGULATOR];
 	struct regulator_dev *rdev[TPS65217_NUM_REGULATOR];
-	struct tps_info *info[TPS65217_NUM_REGULATOR];
 	struct regmap *regmap;
 };
 

commit 4d22f8c306233433bdf9298b2e7806e9c71674bc
Author: Matus Ujhelyi <ujhelyi.m@gmail.com>
Date:   Mon Apr 29 16:18:08 2013 -0700

    drivers/video/backlight/tps65217_bl.c add default brightness value option
    
    Signed-off-by: Matus Ujhelyi <matus.ujhelyi@streamunlimited.com>
    Cc: Grant Likely <grant.likely@secretlab.ca>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

diff --git a/include/linux/mfd/tps65217.h b/include/linux/mfd/tps65217.h
index 290762f93930..29eab2bd3dfa 100644
--- a/include/linux/mfd/tps65217.h
+++ b/include/linux/mfd/tps65217.h
@@ -228,6 +228,7 @@ enum tps65217_bl_fdim {
 struct tps65217_bl_pdata {
 	enum tps65217_bl_isel isel;
 	enum tps65217_bl_fdim fdim;
+	int dft_brightness;
 };
 
 /**

commit eebfdc17cc6c9f184a713d84b84e7602236360c6
Author: Matthias Kaehlcke <matthias@kaehlcke.net>
Date:   Mon Sep 24 22:25:28 2012 +0200

    backlight: Add TPS65217 WLED driver
    
    The TPS65217 chip contains a boost converter and current sinks which can be
    used to drive LEDs for use as backlights. Expose this functionality via the
    backlight API.
    
    Tested on an AM335x based custom board with a single WLED string, using
    different values for ISEL and FDIM (though it would be hard to tell the
    difference except for the value in WLEDCTRL1). Both instantiation through the
    device tree and by passing platform data have been tested. Testing has been
    done with an Androidized 3.2 kernel from the rowboat project. Koen Kooi
    reported the driver to be working on a Beaglebone board with LCD3 cape
    
    Signed-off-by: Matthias Kaehlcke <matthias@kaehlcke.net>
    Signed-off-by: Samuel Ortiz <sameo@linux.intel.com>

diff --git a/include/linux/mfd/tps65217.h b/include/linux/mfd/tps65217.h
index 7cd83d826ed8..290762f93930 100644
--- a/include/linux/mfd/tps65217.h
+++ b/include/linux/mfd/tps65217.h
@@ -213,6 +213,23 @@ enum tps65217_regulator_id {
 /* Number of total regulators available */
 #define TPS65217_NUM_REGULATOR		(TPS65217_NUM_DCDC + TPS65217_NUM_LDO)
 
+enum tps65217_bl_isel {
+	TPS65217_BL_ISET1 = 1,
+	TPS65217_BL_ISET2,
+};
+
+enum tps65217_bl_fdim {
+	TPS65217_BL_FDIM_100HZ,
+	TPS65217_BL_FDIM_200HZ,
+	TPS65217_BL_FDIM_500HZ,
+	TPS65217_BL_FDIM_1000HZ,
+};
+
+struct tps65217_bl_pdata {
+	enum tps65217_bl_isel isel;
+	enum tps65217_bl_fdim fdim;
+};
+
 /**
  * struct tps65217_board - packages regulator init data
  * @tps65217_regulator_data: regulator initialization values
@@ -222,6 +239,7 @@ enum tps65217_regulator_id {
 struct tps65217_board {
 	struct regulator_init_data *tps65217_init_data[TPS65217_NUM_REGULATOR];
 	struct device_node *of_node[TPS65217_NUM_REGULATOR];
+	struct tps65217_bl_pdata *bl_pdata;
 };
 
 /**

commit 817bb7fbfb0a1ad5f9d475cef0752d4ec5fdeac2
Author: AnilKumar Ch <anilkumar@ti.com>
Date:   Mon Aug 13 20:36:05 2012 +0530

    mfd: Move tps65217 regulator plat data handling to regulator
    
    Regulator platform data handling was mistakenly added to MFD
    driver. So we will see build errors if we compile MFD drivers
    without CONFIG_REGULATOR. This patch moves regulator platform
    data handling from TPS65217 MFD driver to regulator driver.
    
    This makes MFD driver independent of REGULATOR framework so
    build error is fixed if CONFIG_REGULATOR is not set.
    
    drivers/built-in.o: In function `tps65217_probe':
    tps65217.c:(.devinit.text+0x13e37): undefined reference
    to `of_regulator_match'
    
    This patch also fix allocation size of tps65217 platform data.
    Current implementation allocates a struct tps65217_board for each
    regulator specified in the device tree. But the structure itself
    provides array of regulators so one instance of it is sufficient.
    
    Signed-off-by: AnilKumar Ch <anilkumar@ti.com>

diff --git a/include/linux/mfd/tps65217.h b/include/linux/mfd/tps65217.h
index 12c06870829a..7cd83d826ed8 100644
--- a/include/linux/mfd/tps65217.h
+++ b/include/linux/mfd/tps65217.h
@@ -22,6 +22,9 @@
 #include <linux/regulator/driver.h>
 #include <linux/regulator/machine.h>
 
+/* TPS chip id list */
+#define TPS65217			0xF0
+
 /* I2C ID for TPS65217 part */
 #define TPS65217_I2C_ID			0x24
 
@@ -248,13 +251,11 @@ struct tps_info {
 struct tps65217 {
 	struct device *dev;
 	struct tps65217_board *pdata;
+	unsigned int id;
 	struct regulator_desc desc[TPS65217_NUM_REGULATOR];
 	struct regulator_dev *rdev[TPS65217_NUM_REGULATOR];
 	struct tps_info *info[TPS65217_NUM_REGULATOR];
 	struct regmap *regmap;
-
-	/* Client devices */
-	struct platform_device *regulator_pdev[TPS65217_NUM_REGULATOR];
 };
 
 static inline struct tps65217 *dev_to_tps65217(struct device *dev)
@@ -262,6 +263,11 @@ static inline struct tps65217 *dev_to_tps65217(struct device *dev)
 	return dev_get_drvdata(dev);
 }
 
+static inline int tps65217_chip_id(struct tps65217 *tps65217)
+{
+	return tps65217->id;
+}
+
 int tps65217_reg_read(struct tps65217 *tps, unsigned int reg,
 					unsigned int *val);
 int tps65217_reg_write(struct tps65217 *tps, unsigned int reg,

commit a7f1b63eb85606ad77a559b95c703b99e1205aa4
Author: AnilKumar Ch <anilkumar@ti.com>
Date:   Tue Jul 10 16:39:42 2012 +0530

    regulator: tps65217: Add device tree support
    
    This commit adds device tree support for tps65217 pmic. And usage
    details are added to device tree documentation. Driver is tested
    by using kernel module with regulator set and get APIs.
    
    Signed-off-by: AnilKumar Ch <anilkumar@ti.com>
    Signed-off-by: Mark Brown <broonie@opensource.wolfsonmicro.com>

diff --git a/include/linux/mfd/tps65217.h b/include/linux/mfd/tps65217.h
index 3a80da103f3f..12c06870829a 100644
--- a/include/linux/mfd/tps65217.h
+++ b/include/linux/mfd/tps65217.h
@@ -217,7 +217,8 @@ enum tps65217_regulator_id {
  * Board data may be used to initialize regulator.
  */
 struct tps65217_board {
-	struct regulator_init_data *tps65217_init_data;
+	struct regulator_init_data *tps65217_init_data[TPS65217_NUM_REGULATOR];
+	struct device_node *of_node[TPS65217_NUM_REGULATOR];
 };
 
 /**

commit d172f319c1094ef22d2a00f43e8a7da4dd02c8f3
Author: Axel Lin <axel.lin@gmail.com>
Date:   Fri Jun 29 09:45:16 2012 +0800

    regulator: tps65217: Convert LDO1 to use regulator_list_voltage_table
    
    Convert tps65217_pmic_ldo1_ops to use regulator_list_voltage_table.
    
    We have n_voltages and volt_table settings in regulator_desc,
    so we don't need the table and table_len fields in struct tps_info.
    Thus remove them from struct tps_info.
    
    Signed-off-by: Axel Lin <axel.lin@gmail.com>
    Signed-off-by: Mark Brown <broonie@opensource.wolfsonmicro.com>

diff --git a/include/linux/mfd/tps65217.h b/include/linux/mfd/tps65217.h
index 4e035a41a9b0..3a80da103f3f 100644
--- a/include/linux/mfd/tps65217.h
+++ b/include/linux/mfd/tps65217.h
@@ -227,8 +227,6 @@ struct tps65217_board {
  * @max_uV:		minimum micro volts
  * @vsel_to_uv:		Function pointer to get voltage from selector
  * @uv_to_vsel:		Function pointer to get selector from voltage
- * @table:		Table for non-uniform voltage step-size
- * @table_len:		Length of the voltage table
  *
  * This data is used to check the regualtor voltage limits while setting.
  */
@@ -238,8 +236,6 @@ struct tps_info {
 	int max_uV;
 	int (*vsel_to_uv)(unsigned int vsel);
 	int (*uv_to_vsel)(int uV, unsigned int *vsel);
-	const int *table;
-	unsigned int table_len;
 };
 
 /**

commit b4bc9ef6253578ecc71eec79a7dd423d0a282a4b
Author: Axel Lin <axel.lin@gmail.com>
Date:   Wed Jun 13 11:27:11 2012 +0800

    regulator: tps65217: Convert to regulator_[is_enabled|get_voltage_sel]_regmap
    
    This patch converts .is_enabled and .get_voltage_sel to
    regulator_is_enabled_regmap and regulator_get_voltage_sel_regmap.
    
    For .enable, .disable, and .set_voltage_sel, the write protect level is either
    1 or 2. So we cannot use regulator_[enable|disable|set_voltage_sel]_regmap.
    
    Now we store the enable reg/mask and vsel reg/mask in regulator_desc,
    so we can remove enable_mask, set_vout_reg, and set_vout_mask from
    struct tps_info.
    
    Signed-off-by: Axel Lin <axel.lin@gmail.com>
    Signed-off-by: Mark Brown <broonie@opensource.wolfsonmicro.com>

diff --git a/include/linux/mfd/tps65217.h b/include/linux/mfd/tps65217.h
index e030ef9a64ee..4e035a41a9b0 100644
--- a/include/linux/mfd/tps65217.h
+++ b/include/linux/mfd/tps65217.h
@@ -229,9 +229,6 @@ struct tps65217_board {
  * @uv_to_vsel:		Function pointer to get selector from voltage
  * @table:		Table for non-uniform voltage step-size
  * @table_len:		Length of the voltage table
- * @enable_mask:	Regulator enable mask bits
- * @set_vout_reg:	Regulator output voltage set register
- * @set_vout_mask:	Regulator output voltage set mask
  *
  * This data is used to check the regualtor voltage limits while setting.
  */
@@ -243,9 +240,6 @@ struct tps_info {
 	int (*uv_to_vsel)(int uV, unsigned int *vsel);
 	const int *table;
 	unsigned int table_len;
-	unsigned int enable_mask;
-	unsigned int set_vout_reg;
-	unsigned int set_vout_mask;
 };
 
 /**

commit d48f411c10f2badaf88e6050cd3d3acd52197356
Author: AnilKumar Ch <anilkumar@ti.com>
Date:   Wed Jan 11 16:11:41 2012 +0530

    mfd: Add new mfd device for TPS65217
    
    The TPS65217 chip is a power management IC for Portable Navigation Systems
    and Tablet Computing devices. It contains the following components:
    
    - Regulators
    - White LED
    - USB battery charger
    
    This patch adds support for tps65217 mfd device. At this time only
    the regulator functionality is made available.
    
    Signed-off-by: AnilKumar Ch <anilkumar@ti.com>
    Reviwed-by: Mark Brown <broonie@opensource.wolfsonmicro.com>
    Signed-off-by: Samuel Ortiz <sameo@linux.intel.com>

diff --git a/include/linux/mfd/tps65217.h b/include/linux/mfd/tps65217.h
new file mode 100644
index 000000000000..e030ef9a64ee
--- /dev/null
+++ b/include/linux/mfd/tps65217.h
@@ -0,0 +1,283 @@
+/*
+ * linux/mfd/tps65217.h
+ *
+ * Functions to access TPS65217 power management chip.
+ *
+ * Copyright (C) 2011 Texas Instruments Incorporated - http://www.ti.com/
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License as
+ * published by the Free Software Foundation version 2.
+ *
+ * This program is distributed "as is" WITHOUT ANY WARRANTY of any
+ * kind, whether express or implied; without even the implied warranty
+ * of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ */
+
+#ifndef __LINUX_MFD_TPS65217_H
+#define __LINUX_MFD_TPS65217_H
+
+#include <linux/i2c.h>
+#include <linux/regulator/driver.h>
+#include <linux/regulator/machine.h>
+
+/* I2C ID for TPS65217 part */
+#define TPS65217_I2C_ID			0x24
+
+/* All register addresses */
+#define TPS65217_REG_CHIPID		0X00
+#define TPS65217_REG_PPATH		0X01
+#define TPS65217_REG_INT		0X02
+#define TPS65217_REG_CHGCONFIG0		0X03
+#define TPS65217_REG_CHGCONFIG1		0X04
+#define TPS65217_REG_CHGCONFIG2		0X05
+#define TPS65217_REG_CHGCONFIG3		0X06
+#define TPS65217_REG_WLEDCTRL1		0X07
+#define TPS65217_REG_WLEDCTRL2		0X08
+#define TPS65217_REG_MUXCTRL		0X09
+#define TPS65217_REG_STATUS		0X0A
+#define TPS65217_REG_PASSWORD		0X0B
+#define TPS65217_REG_PGOOD		0X0C
+#define TPS65217_REG_DEFPG		0X0D
+#define TPS65217_REG_DEFDCDC1		0X0E
+#define TPS65217_REG_DEFDCDC2		0X0F
+#define TPS65217_REG_DEFDCDC3		0X10
+#define TPS65217_REG_DEFSLEW		0X11
+#define TPS65217_REG_DEFLDO1		0X12
+#define TPS65217_REG_DEFLDO2		0X13
+#define TPS65217_REG_DEFLS1		0X14
+#define TPS65217_REG_DEFLS2		0X15
+#define TPS65217_REG_ENABLE		0X16
+#define TPS65217_REG_DEFUVLO		0X18
+#define TPS65217_REG_SEQ1		0X19
+#define TPS65217_REG_SEQ2		0X1A
+#define TPS65217_REG_SEQ3		0X1B
+#define TPS65217_REG_SEQ4		0X1C
+#define TPS65217_REG_SEQ5		0X1D
+#define TPS65217_REG_SEQ6		0X1E
+
+/* Register field definitions */
+#define TPS65217_CHIPID_CHIP_MASK	0xF0
+#define TPS65217_CHIPID_REV_MASK	0x0F
+
+#define TPS65217_PPATH_ACSINK_ENABLE	BIT(7)
+#define TPS65217_PPATH_USBSINK_ENABLE	BIT(6)
+#define TPS65217_PPATH_AC_PW_ENABLE	BIT(5)
+#define TPS65217_PPATH_USB_PW_ENABLE	BIT(4)
+#define TPS65217_PPATH_AC_CURRENT_MASK	0x0C
+#define TPS65217_PPATH_USB_CURRENT_MASK	0x03
+
+#define TPS65217_INT_PBM		BIT(6)
+#define TPS65217_INT_ACM		BIT(5)
+#define TPS65217_INT_USBM		BIT(4)
+#define TPS65217_INT_PBI		BIT(2)
+#define TPS65217_INT_ACI		BIT(1)
+#define TPS65217_INT_USBI		BIT(0)
+
+#define TPS65217_CHGCONFIG0_TREG	BIT(7)
+#define TPS65217_CHGCONFIG0_DPPM	BIT(6)
+#define TPS65217_CHGCONFIG0_TSUSP	BIT(5)
+#define TPS65217_CHGCONFIG0_TERMI	BIT(4)
+#define TPS65217_CHGCONFIG0_ACTIVE	BIT(3)
+#define TPS65217_CHGCONFIG0_CHGTOUT	BIT(2)
+#define TPS65217_CHGCONFIG0_PCHGTOUT	BIT(1)
+#define TPS65217_CHGCONFIG0_BATTEMP	BIT(0)
+
+#define TPS65217_CHGCONFIG1_TMR_MASK	0xC0
+#define TPS65217_CHGCONFIG1_TMR_ENABLE	BIT(5)
+#define TPS65217_CHGCONFIG1_NTC_TYPE	BIT(4)
+#define TPS65217_CHGCONFIG1_RESET	BIT(3)
+#define TPS65217_CHGCONFIG1_TERM	BIT(2)
+#define TPS65217_CHGCONFIG1_SUSP	BIT(1)
+#define TPS65217_CHGCONFIG1_CHG_EN	BIT(0)
+
+#define TPS65217_CHGCONFIG2_DYNTMR	BIT(7)
+#define TPS65217_CHGCONFIG2_VPREGHG	BIT(6)
+#define TPS65217_CHGCONFIG2_VOREG_MASK	0x30
+
+#define TPS65217_CHGCONFIG3_ICHRG_MASK	0xC0
+#define TPS65217_CHGCONFIG3_DPPMTH_MASK	0x30
+#define TPS65217_CHGCONFIG2_PCHRGT	BIT(3)
+#define TPS65217_CHGCONFIG2_TERMIF	0x06
+#define TPS65217_CHGCONFIG2_TRANGE	BIT(0)
+
+#define TPS65217_WLEDCTRL1_ISINK_ENABLE	BIT(3)
+#define TPS65217_WLEDCTRL1_ISEL		BIT(2)
+#define TPS65217_WLEDCTRL1_FDIM_MASK	0x03
+
+#define TPS65217_WLEDCTRL2_DUTY_MASK	0x7F
+
+#define TPS65217_MUXCTRL_MUX_MASK	0x07
+
+#define TPS65217_STATUS_OFF		BIT(7)
+#define TPS65217_STATUS_ACPWR		BIT(3)
+#define TPS65217_STATUS_USBPWR		BIT(2)
+#define TPS65217_STATUS_PB		BIT(0)
+
+#define TPS65217_PASSWORD_REGS_UNLOCK	0x7D
+
+#define TPS65217_PGOOD_LDO3_PG		BIT(6)
+#define TPS65217_PGOOD_LDO4_PG		BIT(5)
+#define TPS65217_PGOOD_DC1_PG		BIT(4)
+#define TPS65217_PGOOD_DC2_PG		BIT(3)
+#define TPS65217_PGOOD_DC3_PG		BIT(2)
+#define TPS65217_PGOOD_LDO1_PG		BIT(1)
+#define TPS65217_PGOOD_LDO2_PG		BIT(0)
+
+#define TPS65217_DEFPG_LDO1PGM		BIT(3)
+#define TPS65217_DEFPG_LDO2PGM		BIT(2)
+#define TPS65217_DEFPG_PGDLY_MASK	0x03
+
+#define TPS65217_DEFDCDCX_XADJX		BIT(7)
+#define TPS65217_DEFDCDCX_DCDC_MASK	0x3F
+
+#define TPS65217_DEFSLEW_GO		BIT(7)
+#define TPS65217_DEFSLEW_GODSBL		BIT(6)
+#define TPS65217_DEFSLEW_PFM_EN1	BIT(5)
+#define TPS65217_DEFSLEW_PFM_EN2	BIT(4)
+#define TPS65217_DEFSLEW_PFM_EN3	BIT(3)
+#define TPS65217_DEFSLEW_SLEW_MASK	0x07
+
+#define TPS65217_DEFLDO1_LDO1_MASK	0x0F
+
+#define TPS65217_DEFLDO2_TRACK		BIT(6)
+#define TPS65217_DEFLDO2_LDO2_MASK	0x3F
+
+#define TPS65217_DEFLDO3_LDO3_EN	BIT(5)
+#define TPS65217_DEFLDO3_LDO3_MASK	0x1F
+
+#define TPS65217_DEFLDO4_LDO4_EN	BIT(5)
+#define TPS65217_DEFLDO4_LDO4_MASK	0x1F
+
+#define TPS65217_ENABLE_LS1_EN		BIT(6)
+#define TPS65217_ENABLE_LS2_EN		BIT(5)
+#define TPS65217_ENABLE_DC1_EN		BIT(4)
+#define TPS65217_ENABLE_DC2_EN		BIT(3)
+#define TPS65217_ENABLE_DC3_EN		BIT(2)
+#define TPS65217_ENABLE_LDO1_EN		BIT(1)
+#define TPS65217_ENABLE_LDO2_EN		BIT(0)
+
+#define TPS65217_DEFUVLO_UVLOHYS	BIT(2)
+#define TPS65217_DEFUVLO_UVLO_MASK	0x03
+
+#define TPS65217_SEQ1_DC1_SEQ_MASK	0xF0
+#define TPS65217_SEQ1_DC2_SEQ_MASK	0x0F
+
+#define TPS65217_SEQ2_DC3_SEQ_MASK	0xF0
+#define TPS65217_SEQ2_LDO1_SEQ_MASK	0x0F
+
+#define TPS65217_SEQ3_LDO2_SEQ_MASK	0xF0
+#define TPS65217_SEQ3_LDO3_SEQ_MASK	0x0F
+
+#define TPS65217_SEQ4_LDO4_SEQ_MASK	0xF0
+
+#define TPS65217_SEQ5_DLY1_MASK		0xC0
+#define TPS65217_SEQ5_DLY2_MASK		0x30
+#define TPS65217_SEQ5_DLY3_MASK		0x0C
+#define TPS65217_SEQ5_DLY4_MASK		0x03
+
+#define TPS65217_SEQ6_DLY5_MASK		0xC0
+#define TPS65217_SEQ6_DLY6_MASK		0x30
+#define TPS65217_SEQ6_SEQUP		BIT(2)
+#define TPS65217_SEQ6_SEQDWN		BIT(1)
+#define TPS65217_SEQ6_INSTDWN		BIT(0)
+
+#define TPS65217_MAX_REGISTER		0x1E
+#define TPS65217_PROTECT_NONE		0
+#define TPS65217_PROTECT_L1		1
+#define TPS65217_PROTECT_L2		2
+
+
+enum tps65217_regulator_id {
+	/* DCDC's */
+	TPS65217_DCDC_1,
+	TPS65217_DCDC_2,
+	TPS65217_DCDC_3,
+	/* LDOs */
+	TPS65217_LDO_1,
+	TPS65217_LDO_2,
+	TPS65217_LDO_3,
+	TPS65217_LDO_4,
+};
+
+#define TPS65217_MAX_REG_ID		TPS65217_LDO_4
+
+/* Number of step-down converters available */
+#define TPS65217_NUM_DCDC		3
+/* Number of LDO voltage regulators available */
+#define TPS65217_NUM_LDO		4
+/* Number of total regulators available */
+#define TPS65217_NUM_REGULATOR		(TPS65217_NUM_DCDC + TPS65217_NUM_LDO)
+
+/**
+ * struct tps65217_board - packages regulator init data
+ * @tps65217_regulator_data: regulator initialization values
+ *
+ * Board data may be used to initialize regulator.
+ */
+struct tps65217_board {
+	struct regulator_init_data *tps65217_init_data;
+};
+
+/**
+ * struct tps_info - packages regulator constraints
+ * @name:		Voltage regulator name
+ * @min_uV:		minimum micro volts
+ * @max_uV:		minimum micro volts
+ * @vsel_to_uv:		Function pointer to get voltage from selector
+ * @uv_to_vsel:		Function pointer to get selector from voltage
+ * @table:		Table for non-uniform voltage step-size
+ * @table_len:		Length of the voltage table
+ * @enable_mask:	Regulator enable mask bits
+ * @set_vout_reg:	Regulator output voltage set register
+ * @set_vout_mask:	Regulator output voltage set mask
+ *
+ * This data is used to check the regualtor voltage limits while setting.
+ */
+struct tps_info {
+	const char *name;
+	int min_uV;
+	int max_uV;
+	int (*vsel_to_uv)(unsigned int vsel);
+	int (*uv_to_vsel)(int uV, unsigned int *vsel);
+	const int *table;
+	unsigned int table_len;
+	unsigned int enable_mask;
+	unsigned int set_vout_reg;
+	unsigned int set_vout_mask;
+};
+
+/**
+ * struct tps65217 - tps65217 sub-driver chip access routines
+ *
+ * Device data may be used to access the TPS65217 chip
+ */
+
+struct tps65217 {
+	struct device *dev;
+	struct tps65217_board *pdata;
+	struct regulator_desc desc[TPS65217_NUM_REGULATOR];
+	struct regulator_dev *rdev[TPS65217_NUM_REGULATOR];
+	struct tps_info *info[TPS65217_NUM_REGULATOR];
+	struct regmap *regmap;
+
+	/* Client devices */
+	struct platform_device *regulator_pdev[TPS65217_NUM_REGULATOR];
+};
+
+static inline struct tps65217 *dev_to_tps65217(struct device *dev)
+{
+	return dev_get_drvdata(dev);
+}
+
+int tps65217_reg_read(struct tps65217 *tps, unsigned int reg,
+					unsigned int *val);
+int tps65217_reg_write(struct tps65217 *tps, unsigned int reg,
+			unsigned int val, unsigned int level);
+int tps65217_set_bits(struct tps65217 *tps, unsigned int reg,
+		unsigned int mask, unsigned int val, unsigned int level);
+int tps65217_clear_bits(struct tps65217 *tps, unsigned int reg,
+		unsigned int mask, unsigned int level);
+
+#endif /*  __LINUX_MFD_TPS65217_H */
