commit f591df3cc6d60cadf8ceff5d44af73ea6ba0a39a
Author: Zhengyuan Liu <liuzhengyuan@kylinos.cn>
Date:   Fri Dec 20 10:21:28 2019 +0800

    md/raid6: fix algorithm choice under larger PAGE_SIZE
    
    There are several algorithms available for raid6 to generate xor and syndrome
    parity, including basic int1, int2 ... int32 and SIMD optimized implementation
    like sse and neon.  To test and choose the best algorithms at the initial
    stage, we need provide enough disk data to feed the algorithms. However, the
    disk number we provided depends on page size and gfmul table, seeing bellow:
    
        const int disks = (65536/PAGE_SIZE) + 2;
    
    So when come to 64K PAGE_SIZE, there is only one data disk plus 2 parity disk,
    as a result the chosed algorithm is not reliable. For example, on my arm64
    machine with 64K page enabled, it will choose intx32 as the best one, although
    the NEON implementation is better.
    
    This patch tries to fix the problem by defining a constant raid6 disk number to
    supporting arbitrary page size.
    
    Suggested-by: H. Peter Anvin <hpa@zytor.com>
    Signed-off-by: Zhengyuan Liu <liuzhengyuan@kylinos.cn>
    Signed-off-by: Song Liu <songliubraving@fb.com>

diff --git a/include/linux/raid/pq.h b/include/linux/raid/pq.h
index e0ddb47f4402..154e954b711d 100644
--- a/include/linux/raid/pq.h
+++ b/include/linux/raid/pq.h
@@ -28,6 +28,7 @@ extern const char raid6_empty_zero_page[PAGE_SIZE];
 #include <errno.h>
 #include <inttypes.h>
 #include <stddef.h>
+#include <string.h>
 #include <sys/mman.h>
 #include <sys/time.h>
 #include <sys/types.h>
@@ -43,6 +44,9 @@ typedef uint64_t u64;
 #ifndef PAGE_SIZE
 # define PAGE_SIZE 4096
 #endif
+#ifndef PAGE_SHIFT
+# define PAGE_SHIFT 12
+#endif
 extern const char raid6_empty_zero_page[PAGE_SIZE];
 
 #define __init

commit 5e5ac01c2b8802921fee680518a986011cb59820
Author: Zhengyuan Liu <liuzhengyuan@kylinos.cn>
Date:   Fri Dec 20 10:21:27 2019 +0800

    raid6/test: fix a compilation warning
    
    The compilation warning is redefination showed as following:
    
            In file included from tables.c:2:
            ../../../include/linux/export.h:180: warning: "EXPORT_SYMBOL" redefined
             #define EXPORT_SYMBOL(sym)  __EXPORT_SYMBOL(sym, "")
    
            In file included from tables.c:1:
            ../../../include/linux/raid/pq.h:61: note: this is the location of the previous definition
             #define EXPORT_SYMBOL(sym)
    
    Fixes: 69a94abb82ee ("export.h, genksyms: do not make genksyms calculate CRC of trimmed symbols")
    Signed-off-by: Zhengyuan Liu <liuzhengyuan@kylinos.cn>
    Signed-off-by: Song Liu <songliubraving@fb.com>

diff --git a/include/linux/raid/pq.h b/include/linux/raid/pq.h
index 0b6e7ad9cd2a..e0ddb47f4402 100644
--- a/include/linux/raid/pq.h
+++ b/include/linux/raid/pq.h
@@ -58,7 +58,9 @@ extern const char raid6_empty_zero_page[PAGE_SIZE];
 #define enable_kernel_altivec()
 #define disable_kernel_altivec()
 
+#undef	EXPORT_SYMBOL
 #define EXPORT_SYMBOL(sym)
+#undef	EXPORT_SYMBOL_GPL
 #define EXPORT_SYMBOL_GPL(sym)
 #define MODULE_LICENSE(licence)
 #define MODULE_DESCRIPTION(desc)

commit 6b8651aac1dca6140dd7fb4c9fec2736ed3f6223
Author: Zhengyuan Liu <liuzhengyuan@kylinos.cn>
Date:   Fri Dec 20 10:21:26 2019 +0800

    raid6/test: fix a compilation error
    
    The compilation error is redeclaration showed as following:
    
            In file included from ../../../include/linux/limits.h:6,
                             from /usr/include/x86_64-linux-gnu/bits/local_lim.h:38,
                             from /usr/include/x86_64-linux-gnu/bits/posix1_lim.h:161,
                             from /usr/include/limits.h:183,
                             from /usr/lib/gcc/x86_64-linux-gnu/8/include-fixed/limits.h:194,
                             from /usr/lib/gcc/x86_64-linux-gnu/8/include-fixed/syslimits.h:7,
                             from /usr/lib/gcc/x86_64-linux-gnu/8/include-fixed/limits.h:34,
                             from ../../../include/linux/raid/pq.h:30,
                             from algos.c:14:
            ../../../include/linux/types.h:114:15: error: conflicting types for ‘int64_t’
             typedef s64   int64_t;
                           ^~~~~~~
            In file included from /usr/include/stdint.h:34,
                             from /usr/lib/gcc/x86_64-linux-gnu/8/include/stdint.h:9,
                             from /usr/include/inttypes.h:27,
                             from ../../../include/linux/raid/pq.h:29,
                             from algos.c:14:
            /usr/include/x86_64-linux-gnu/bits/stdint-intn.h:27:19: note: previous \
            declaration of ‘int64_t’ was here
             typedef __int64_t int64_t;
    
    Fixes: 54d50897d544 ("linux/kernel.h: split *_MAX and *_MIN macros into <linux/limits.h>")
    Signed-off-by: Zhengyuan Liu <liuzhengyuan@kylinos.cn>
    Signed-off-by: Song Liu <songliubraving@fb.com>

diff --git a/include/linux/raid/pq.h b/include/linux/raid/pq.h
index 0832c9b66852..0b6e7ad9cd2a 100644
--- a/include/linux/raid/pq.h
+++ b/include/linux/raid/pq.h
@@ -27,7 +27,6 @@ extern const char raid6_empty_zero_page[PAGE_SIZE];
 
 #include <errno.h>
 #include <inttypes.h>
-#include <limits.h>
 #include <stddef.h>
 #include <sys/mman.h>
 #include <sys/time.h>

commit dd165a658d9018cf31f87d2ea2f26293f215d91d
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Mon May 20 19:08:13 2019 +0200

    treewide: Replace GPLv2 boilerplate/reference with SPDX - rule 48
    
    Based on 1 normalized pattern(s):
    
      this program is free software you can redistribute it and or modify
      it under the terms of the gnu general public license as published by
      the free software foundation inc 53 temple place ste 330 boston ma
      02111 1307 usa either version 2 of the license or at your option any
      later version incorporated herein by reference
    
    extracted by the scancode license scanner the SPDX license identifier
    
      GPL-2.0-or-later
    
    has been chosen to replace the boilerplate/reference in 13 file(s).
    
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Reviewed-by: Allison Randal <allison@lohutok.net>
    Reviewed-by: Kate Stewart <kstewart@linuxfoundation.org>
    Cc: linux-spdx@vger.kernel.org
    Link: https://lkml.kernel.org/r/20190520170858.645641371@linutronix.de
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/include/linux/raid/pq.h b/include/linux/raid/pq.h
index 605cf46c17bd..0832c9b66852 100644
--- a/include/linux/raid/pq.h
+++ b/include/linux/raid/pq.h
@@ -1,13 +1,8 @@
+/* SPDX-License-Identifier: GPL-2.0-or-later */
 /* -*- linux-c -*- ------------------------------------------------------- *
  *
  *   Copyright 2003 H. Peter Anvin - All Rights Reserved
  *
- *   This program is free software; you can redistribute it and/or modify
- *   it under the terms of the GNU General Public License as published by
- *   the Free Software Foundation, Inc., 53 Temple Place Ste 330,
- *   Boston MA 02111-1307, USA; either version 2 of the License, or
- *   (at your option) any later version; incorporated herein by reference.
- *
  * ----------------------------------------------------------------------- */
 
 #ifndef LINUX_RAID_RAID6_H

commit be85f93ae2df32dea0b20908316f1d894c3e0f64
Author: Daniel Verkamp <dverkamp@chromium.org>
Date:   Mon Nov 12 15:26:52 2018 -0800

    lib/raid6: add option to skip algo benchmarking
    
    This is helpful for systems where fast startup time is important.
    It is especially nice to avoid benchmarking RAID functions that are
    never used (for example, BTRFS selects RAID6_PQ even if the parity RAID
    mode is not in use).
    
    This saves 250+ milliseconds of boot time on modern x86 and ARM systems
    with a dozen or more available implementations.
    
    The new option is defaulted to 'y' to match the previous behavior of
    always benchmarking on init.
    
    Signed-off-by: Daniel Verkamp <dverkamp@chromium.org>
    Signed-off-by: Shaohua Li <shli@fb.com>

diff --git a/include/linux/raid/pq.h b/include/linux/raid/pq.h
index d7c99161bba2..605cf46c17bd 100644
--- a/include/linux/raid/pq.h
+++ b/include/linux/raid/pq.h
@@ -70,6 +70,9 @@ extern const char raid6_empty_zero_page[PAGE_SIZE];
 #define MODULE_DESCRIPTION(desc)
 #define subsys_initcall(x)
 #define module_exit(x)
+
+#define IS_ENABLED(x) (x)
+#define CONFIG_RAID6_PQ_BENCHMARK 1
 #endif /* __KERNEL__ */
 
 /* Routine choices */

commit 58af3110a7c5d161f72f94a98c6f2b9b75bf5cf9
Author: Daniel Verkamp <dverkamp@chromium.org>
Date:   Mon Nov 12 15:22:17 2018 -0800

    lib/raid6: avoid __attribute_const__ redefinition
    
    This is defined in glibc's sys/cdefs.h on my system with the same
    definition as the raid6test fallback definition.  Add a #ifndef check to
    avoid a compiler warning about redefining it.
    
    Signed-off-by: Daniel Verkamp <dverkamp@chromium.org>
    Signed-off-by: Shaohua Li <shli@fb.com>

diff --git a/include/linux/raid/pq.h b/include/linux/raid/pq.h
index 0c245dcb8b48..d7c99161bba2 100644
--- a/include/linux/raid/pq.h
+++ b/include/linux/raid/pq.h
@@ -53,7 +53,9 @@ extern const char raid6_empty_zero_page[PAGE_SIZE];
 
 #define __init
 #define __exit
-#define __attribute_const__ __attribute__((const))
+#ifndef __attribute_const__
+# define __attribute_const__ __attribute__((const))
+#endif
 #define noinline __attribute__((noinline))
 
 #define preempt_enable()

commit e731f3e28b7e7d1c745b03084e01036ee00018eb
Author: Daniel Verkamp <dverkamp@chromium.org>
Date:   Mon Nov 12 15:22:16 2018 -0800

    lib/raid6: add missing include for raid6test
    
    Add #include <sys/time.h> for gettimeofday() to fix the compiler warning
    about an implicitly defined functions.
    
    Signed-off-by: Daniel Verkamp <dverkamp@chromium.org>
    Signed-off-by: Shaohua Li <shli@fb.com>

diff --git a/include/linux/raid/pq.h b/include/linux/raid/pq.h
index ea8505204fdf..0c245dcb8b48 100644
--- a/include/linux/raid/pq.h
+++ b/include/linux/raid/pq.h
@@ -35,6 +35,7 @@ extern const char raid6_empty_zero_page[PAGE_SIZE];
 #include <limits.h>
 #include <stddef.h>
 #include <sys/mman.h>
+#include <sys/time.h>
 #include <sys/types.h>
 
 /* Not standard, but glibc defines it */

commit 49a695ba723224875df50e327bd7b0b65dd9a56b
Merge: 299f89d53e61 c1b25a17d249
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Sat Apr 7 12:08:19 2018 -0700

    Merge tag 'powerpc-4.17-1' of git://git.kernel.org/pub/scm/linux/kernel/git/powerpc/linux
    
    Pull powerpc updates from Michael Ellerman:
     "Notable changes:
    
       - Support for 4PB user address space on 64-bit, opt-in via mmap().
    
       - Removal of POWER4 support, which was accidentally broken in 2016
         and no one noticed, and blocked use of some modern instructions.
    
       - Workarounds so that the hypervisor can enable Transactional Memory
         on Power9.
    
       - A series to disable the DAWR (Data Address Watchpoint Register) on
         Power9.
    
       - More information displayed in the meltdown/spectre_v1/v2 sysfs
         files.
    
       - A vpermxor (Power8 Altivec) implementation for the raid6 Q
         Syndrome.
    
       - A big series to make the allocation of our pacas (per cpu area),
         kernel page tables, and per-cpu stacks NUMA aware when using the
         Radix MMU on Power9.
    
      And as usual many fixes, reworks and cleanups.
    
      Thanks to: Aaro Koskinen, Alexandre Belloni, Alexey Kardashevskiy,
      Alistair Popple, Andy Shevchenko, Aneesh Kumar K.V, Anshuman Khandual,
      Balbir Singh, Benjamin Herrenschmidt, Christophe Leroy, Christophe
      Lombard, Cyril Bur, Daniel Axtens, Dave Young, Finn Thain, Frederic
      Barrat, Gustavo Romero, Horia Geantă, Jonathan Neuschäfer, Kees Cook,
      Larry Finger, Laurent Dufour, Laurent Vivier, Logan Gunthorpe,
      Madhavan Srinivasan, Mark Greer, Mark Hairgrove, Markus Elfring,
      Mathieu Malaterre, Matt Brown, Matt Evans, Mauricio Faria de Oliveira,
      Michael Neuling, Naveen N. Rao, Nicholas Piggin, Paul Mackerras,
      Philippe Bergheaud, Ram Pai, Rob Herring, Sam Bobroff, Segher
      Boessenkool, Simon Guo, Simon Horman, Stewart Smith, Sukadev
      Bhattiprolu, Suraj Jitindar Singh, Thiago Jung Bauermann, Vaibhav
      Jain, Vaidyanathan Srinivasan, Vasant Hegde, Wei Yongjun"
    
    * tag 'powerpc-4.17-1' of git://git.kernel.org/pub/scm/linux/kernel/git/powerpc/linux: (207 commits)
      powerpc/64s/idle: Fix restore of AMOR on POWER9 after deep sleep
      powerpc/64s: Fix POWER9 DD2.2 and above in cputable features
      powerpc/64s: Fix pkey support in dt_cpu_ftrs, add CPU_FTR_PKEY bit
      powerpc/64s: Fix dt_cpu_ftrs to have restore_cpu clear unwanted LPCR bits
      Revert "powerpc/64s/idle: POWER9 ESL=0 stop avoid save/restore overhead"
      powerpc: iomap.c: introduce io{read|write}64_{lo_hi|hi_lo}
      powerpc: io.h: move iomap.h include so that it can use readq/writeq defs
      cxl: Fix possible deadlock when processing page faults from cxllib
      powerpc/hw_breakpoint: Only disable hw breakpoint if cpu supports it
      powerpc/mm/radix: Update command line parsing for disable_radix
      powerpc/mm/radix: Parse disable_radix commandline correctly.
      powerpc/mm/hugetlb: initialize the pagetable cache correctly for hugetlb
      powerpc/mm/radix: Update pte fragment count from 16 to 256 on radix
      powerpc/mm/keys: Update documentation and remove unnecessary check
      powerpc/64s/idle: POWER9 ESL=0 stop avoid save/restore overhead
      powerpc/64s/idle: Consolidate power9_offline_stop()/power9_idle_stop()
      powerpc/powernv: Always stop secondaries before reboot/shutdown
      powerpc: hard disable irqs in smp_send_stop loop
      powerpc: use NMI IPI for smp_send_stop
      powerpc/powernv: Fix SMT4 forcing idle code
      ...

commit 889ce12b1650b3c388634451872638a08faf6d6b
Author: Arnd Bergmann <arnd@arndb.de>
Date:   Fri Mar 9 16:05:23 2018 +0100

    raid: remove tile specific raid6 implementation
    
    The Tile architecture is getting removed, so we no longer need this either.
    
    Acked-by: Ard Biesheuvel <ard.biesheuvel@linaro.org>
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>

diff --git a/include/linux/raid/pq.h b/include/linux/raid/pq.h
index 583cdd3d49ca..a366cc314479 100644
--- a/include/linux/raid/pq.h
+++ b/include/linux/raid/pq.h
@@ -105,7 +105,6 @@ extern const struct raid6_calls raid6_avx2x4;
 extern const struct raid6_calls raid6_avx512x1;
 extern const struct raid6_calls raid6_avx512x2;
 extern const struct raid6_calls raid6_avx512x4;
-extern const struct raid6_calls raid6_tilegx8;
 extern const struct raid6_calls raid6_s390vx8;
 
 struct raid6_recov_calls {

commit 751ba79cc552c146595cd439b21c4ff8998c3b69
Author: Matt Brown <matthew.brown.dev@gmail.com>
Date:   Fri Aug 4 13:42:32 2017 +1000

    lib/raid6/altivec: Add vpermxor implementation for raid6 Q syndrome
    
    This patch uses the vpermxor instruction to optimise the raid6 Q
    syndrome. This instruction was made available with POWER8, ISA version
    2.07. It allows for both vperm and vxor instructions to be done in a
    single instruction. This has been tested for correctness on a ppc64le
    vm with a basic RAID6 setup containing 5 drives.
    
    The performance benchmarks are from the raid6test in the
    /lib/raid6/test directory. These results are from an IBM Firestone
    machine with ppc64le architecture. The benchmark results show a 35%
    speed increase over the best existing algorithm for powerpc (altivec).
    The raid6test has also been run on a big-endian ppc64 vm to ensure it
    also works for big-endian architectures.
    
    Performance benchmarks:
      raid6: altivecx4 gen() 18773 MB/s
      raid6: altivecx8 gen() 19438 MB/s
    
      raid6: vpermxor4 gen() 25112 MB/s
      raid6: vpermxor8 gen() 26279 MB/s
    
    Signed-off-by: Matt Brown <matthew.brown.dev@gmail.com>
    Reviewed-by: Daniel Axtens <dja@axtens.net>
    [mpe: Add VPERMXOR macro so we can build with old binutils]
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>

diff --git a/include/linux/raid/pq.h b/include/linux/raid/pq.h
index 583cdd3d49ca..fd2e02461e41 100644
--- a/include/linux/raid/pq.h
+++ b/include/linux/raid/pq.h
@@ -107,6 +107,10 @@ extern const struct raid6_calls raid6_avx512x2;
 extern const struct raid6_calls raid6_avx512x4;
 extern const struct raid6_calls raid6_tilegx8;
 extern const struct raid6_calls raid6_s390vx8;
+extern const struct raid6_calls raid6_vpermxor1;
+extern const struct raid6_calls raid6_vpermxor2;
+extern const struct raid6_calls raid6_vpermxor4;
+extern const struct raid6_calls raid6_vpermxor8;
 
 struct raid6_recov_calls {
 	void (*data2)(int, size_t, int, int, void **);

commit 6ec4e2514decd6fb4782a9364fa71d6244d05af4
Author: Ard Biesheuvel <ard.biesheuvel@linaro.org>
Date:   Thu Jul 13 18:16:01 2017 +0100

    md/raid6: implement recovery using ARM NEON intrinsics
    
    Provide a NEON accelerated implementation of the recovery algorithm,
    which supersedes the default byte-by-byte one.
    
    Signed-off-by: Ard Biesheuvel <ard.biesheuvel@linaro.org>
    Signed-off-by: Catalin Marinas <catalin.marinas@arm.com>

diff --git a/include/linux/raid/pq.h b/include/linux/raid/pq.h
index 30f945329818..583cdd3d49ca 100644
--- a/include/linux/raid/pq.h
+++ b/include/linux/raid/pq.h
@@ -121,6 +121,7 @@ extern const struct raid6_recov_calls raid6_recov_ssse3;
 extern const struct raid6_recov_calls raid6_recov_avx2;
 extern const struct raid6_recov_calls raid6_recov_avx512;
 extern const struct raid6_recov_calls raid6_recov_s390xc;
+extern const struct raid6_recov_calls raid6_recov_neon;
 
 extern const struct raid6_calls raid6_neonx1;
 extern const struct raid6_calls raid6_neonx2;

commit b5dceda1f7ef66cba6f8d766502f242a27f96e6d
Author: Anup Patel <anup.patel@broadcom.com>
Date:   Mon May 15 10:34:52 2017 +0530

    lib/raid6: Add log-of-2 table for RAID6 HW requiring disk position
    
    The raid6_gfexp table represents {2}^n values for 0 <= n < 256. The
    Linux async_tx framework pass values from raid6_gfexp as coefficients
    for each source to prep_dma_pq() callback of DMA channel with PQ
    capability. This creates problem for RAID6 offload engines (such as
    Broadcom SBA) which take disk position (i.e. log of {2}) instead of
    multiplicative cofficients from raid6_gfexp table.
    
    This patch adds raid6_gflog table having log-of-2 value for any given
    x such that 0 <= x < 256. For any given disk coefficient x, the
    corresponding disk position is given by raid6_gflog[x]. The RAID6
    offload engine driver can use this newly added raid6_gflog table to
    get disk position from multiplicative coefficient.
    
    Signed-off-by: Anup Patel <anup.patel@broadcom.com>
    Reviewed-by: Scott Branden <scott.branden@broadcom.com>
    Reviewed-by: Ray Jui <ray.jui@broadcom.com>
    Acked-by: Shaohua Li <shli@fb.com>
    Signed-off-by: Vinod Koul <vinod.koul@intel.com>

diff --git a/include/linux/raid/pq.h b/include/linux/raid/pq.h
index 4d57bbaaa1bf..30f945329818 100644
--- a/include/linux/raid/pq.h
+++ b/include/linux/raid/pq.h
@@ -142,6 +142,7 @@ int raid6_select_algo(void);
 extern const u8 raid6_gfmul[256][256] __attribute__((aligned(256)));
 extern const u8 raid6_vgfmul[256][32] __attribute__((aligned(256)));
 extern const u8 raid6_gfexp[256]      __attribute__((aligned(256)));
+extern const u8 raid6_gflog[256]      __attribute__((aligned(256)));
 extern const u8 raid6_gfinv[256]      __attribute__((aligned(256)));
 extern const u8 raid6_gfexi[256]      __attribute__((aligned(256)));
 

commit c23112e0395a89c8a52cd955442240de7fba46aa
Merge: 4dfddf503670 bb086a89a406
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Fri Oct 7 09:45:43 2016 -0700

    Merge tag 'md/4.9-rc1' of git://git.kernel.org/pub/scm/linux/kernel/git/shli/md
    
    Pull MD updates from Shaohua Li:
     "This update includes:
    
       - new AVX512 instruction based raid6 gen/recovery algorithm
    
       - a couple of md-cluster related bug fixes
    
       - fix a potential deadlock
    
       - set nonrotational bit for raid array with SSD
    
       - set correct max_hw_sectors for raid5/6, which hopefuly can improve
         performance a little bit
    
       - other minor fixes"
    
    * tag 'md/4.9-rc1' of git://git.kernel.org/pub/scm/linux/kernel/git/shli/md:
      md: set rotational bit
      raid6/test/test.c: bug fix: Specify aligned(alignment) attributes to the char arrays
      raid5: handle register_shrinker failure
      raid5: fix to detect failure of register_shrinker
      md: fix a potential deadlock
      md/bitmap: fix wrong cleanup
      raid5: allow arbitrary max_hw_sectors
      lib/raid6: Add AVX512 optimized xor_syndrome functions
      lib/raid6/test/Makefile: Add avx512 gen_syndrome and recovery functions
      lib/raid6: Add AVX512 optimized recovery functions
      lib/raid6: Add AVX512 optimized gen_syndrome functions
      md-cluster: make resync lock also could be interruptted
      md-cluster: introduce dlm_lock_sync_interruptible to fix tasks hang
      md-cluster: convert the completion to wait queue
      md-cluster: protect md_find_rdev_nr_rcu with rcu lock
      md-cluster: clean related infos of cluster
      md: changes for MD_STILL_CLOSED flag
      md-cluster: remove some unnecessary dlm_unlock_sync
      md-cluster: use FORCEUNLOCK in lockres_free
      md-cluster: call md_kick_rdev_from_array once ack failed

commit 13c520b2993c9faae6770264d33ff1e1ea4c2ceb
Author: Gayatri Kammela <gayatri.kammela@intel.com>
Date:   Fri Aug 12 18:03:20 2016 -0700

    lib/raid6: Add AVX512 optimized recovery functions
    
    Optimize RAID6 recovery functions to take advantage of
    the 512-bit ZMM integer instructions introduced in AVX512.
    
    AVX512 optimized recovery functions, which is simply based
    on recov_avx2.c written by Jim Kukunas
    
    This patch was tested and benchmarked before submission on
    a hardware that has AVX512 flags to support such instructions
    
    Cc: Jim Kukunas <james.t.kukunas@linux.intel.com>
    Cc: H. Peter Anvin <hpa@zytor.com>
    Cc: Fenghua Yu <fenghua.yu@intel.com>
    Signed-off-by: Megha Dey <megha.dey@linux.intel.com>
    Signed-off-by: Gayatri Kammela <gayatri.kammela@intel.com>
    Reviewed-by: Fenghua Yu <fenghua.yu@intel.com>
    Signed-off-by: Shaohua Li <shli@fb.com>

diff --git a/include/linux/raid/pq.h b/include/linux/raid/pq.h
index 0c529a55b52e..1abd89584568 100644
--- a/include/linux/raid/pq.h
+++ b/include/linux/raid/pq.h
@@ -118,6 +118,7 @@ struct raid6_recov_calls {
 extern const struct raid6_recov_calls raid6_recov_intx1;
 extern const struct raid6_recov_calls raid6_recov_ssse3;
 extern const struct raid6_recov_calls raid6_recov_avx2;
+extern const struct raid6_recov_calls raid6_recov_avx512;
 
 extern const struct raid6_calls raid6_neonx1;
 extern const struct raid6_calls raid6_neonx2;

commit e0a491c1296874a1aca51cc68452f12a4d950029
Author: Gayatri Kammela <gayatri.kammela@intel.com>
Date:   Fri Aug 12 18:03:19 2016 -0700

    lib/raid6: Add AVX512 optimized gen_syndrome functions
    
    Optimize RAID6 gen_syndrom functions to take advantage of
    the 512-bit ZMM integer instructions introduced in AVX512.
    
    AVX512 optimized gen_syndrom functions, which is simply based
    on avx2.c written by Yuanhan Liu and sse2.c written by hpa.
    
    The patch was tested and benchmarked before submission on
    a hardware that has AVX512 flags to support such instructions
    
    Cc: H. Peter Anvin <hpa@zytor.com>
    Cc: Jim Kukunas <james.t.kukunas@linux.intel.com>
    Cc: Fenghua Yu <fenghua.yu@intel.com>
    Signed-off-by: Megha Dey <megha.dey@linux.intel.com>
    Signed-off-by: Gayatri Kammela <gayatri.kammela@intel.com>
    Reviewed-by: Fenghua Yu <fenghua.yu@intel.com>
    Signed-off-by: Shaohua Li <shli@fb.com>

diff --git a/include/linux/raid/pq.h b/include/linux/raid/pq.h
index a0118d5929a9..0c529a55b52e 100644
--- a/include/linux/raid/pq.h
+++ b/include/linux/raid/pq.h
@@ -102,6 +102,9 @@ extern const struct raid6_calls raid6_altivec8;
 extern const struct raid6_calls raid6_avx2x1;
 extern const struct raid6_calls raid6_avx2x2;
 extern const struct raid6_calls raid6_avx2x4;
+extern const struct raid6_calls raid6_avx512x1;
+extern const struct raid6_calls raid6_avx512x2;
+extern const struct raid6_calls raid6_avx512x4;
 extern const struct raid6_calls raid6_tilegx8;
 
 struct raid6_recov_calls {

commit f5b55fa1f81d518925d68b50d2316850c525d1ad
Author: Martin Schwidefsky <schwidefsky@de.ibm.com>
Date:   Wed Aug 31 09:27:35 2016 +0200

    RAID/s390: provide raid6 recovery optimization
    
    The XC instruction can be used to improve the speed of the raid6
    recovery. The loops now operate on blocks of 256 bytes.
    
    Signed-off-by: Martin Schwidefsky <schwidefsky@de.ibm.com>

diff --git a/include/linux/raid/pq.h b/include/linux/raid/pq.h
index c032a6a408a6..395a4c674168 100644
--- a/include/linux/raid/pq.h
+++ b/include/linux/raid/pq.h
@@ -116,6 +116,7 @@ struct raid6_recov_calls {
 extern const struct raid6_recov_calls raid6_recov_intx1;
 extern const struct raid6_recov_calls raid6_recov_ssse3;
 extern const struct raid6_recov_calls raid6_recov_avx2;
+extern const struct raid6_recov_calls raid6_recov_s390xc;
 
 extern const struct raid6_calls raid6_neonx1;
 extern const struct raid6_calls raid6_neonx2;

commit 474fd6e80fe529e9adeeb7ea9d4e5d6c4da0b7fe
Author: Martin Schwidefsky <schwidefsky@de.ibm.com>
Date:   Tue Aug 23 13:30:24 2016 +0200

    RAID/s390: add SIMD implementation for raid6 gen/xor
    
    Using vector registers is slightly faster:
    
    raid6: vx128x8  gen() 19705 MB/s
    raid6: vx128x8  xor() 11886 MB/s
    raid6: using algorithm vx128x8 gen() 19705 MB/s
    raid6: .... xor() 11886 MB/s, rmw enabled
    
    vs the software algorithms:
    
    raid6: int64x1  gen()  3018 MB/s
    raid6: int64x1  xor()  1429 MB/s
    raid6: int64x2  gen()  4661 MB/s
    raid6: int64x2  xor()  3143 MB/s
    raid6: int64x4  gen()  5392 MB/s
    raid6: int64x4  xor()  3509 MB/s
    raid6: int64x8  gen()  4441 MB/s
    raid6: int64x8  xor()  3207 MB/s
    raid6: using algorithm int64x4 gen() 5392 MB/s
    raid6: .... xor() 3509 MB/s, rmw enabled
    
    Signed-off-by: Martin Schwidefsky <schwidefsky@de.ibm.com>

diff --git a/include/linux/raid/pq.h b/include/linux/raid/pq.h
index a0118d5929a9..c032a6a408a6 100644
--- a/include/linux/raid/pq.h
+++ b/include/linux/raid/pq.h
@@ -103,6 +103,7 @@ extern const struct raid6_calls raid6_avx2x1;
 extern const struct raid6_calls raid6_avx2x2;
 extern const struct raid6_calls raid6_avx2x4;
 extern const struct raid6_calls raid6_tilegx8;
+extern const struct raid6_calls raid6_s390vx8;
 
 struct raid6_recov_calls {
 	void (*data2)(int, size_t, int, int, void **);

commit 6a84f57241e1fb9fb6772256f538d1073359a32d
Author: Gayatri Kammela <gayatri.kammela@intel.com>
Date:   Thu Jan 21 14:02:39 2016 -0800

    raid6/algos.c : bug fix : Add the missing definitions to the pq.h file
    
    Adding these pr_info and pr_err definitions so as to allow code to be
    compiled successfully for testing in userspace, since the printk has
    been replaced by pr_info and pr_err in algos.c
    
    Absence of these definitions result in the compilation errors
    such as ' undefined reference to `pr_info' ' ' undefined reference to
    `pr_err' '
    
    Cc: NeilBrown <neilb@suse.com>
    Cc: Anton Blanchard <anton@samba.org>
    Cc: Fenghua Yu <fenghua.yu@intel.com>
    Signed-off-by: Gayatri Kammela <gayatri.kammela@intel.com>
    Signed-off-by: Shaohua Li <shli@fb.com>

diff --git a/include/linux/raid/pq.h b/include/linux/raid/pq.h
index a7a06d1dcf9c..a0118d5929a9 100644
--- a/include/linux/raid/pq.h
+++ b/include/linux/raid/pq.h
@@ -152,6 +152,8 @@ void raid6_dual_recov(int disks, size_t bytes, int faila, int failb,
 
 # define jiffies	raid6_jiffies()
 # define printk 	printf
+# define pr_err(format, ...) fprintf(stderr, format, ## __VA_ARGS__)
+# define pr_info(format, ...) fprintf(stdout, format, ## __VA_ARGS__)
 # define GFP_KERNEL	0
 # define __get_free_pages(x, y)	((unsigned long)mmap(NULL, PAGE_SIZE << (y), \
 						     PROT_READ|PROT_WRITE,   \

commit fe5cbc6e06c7d8b3a86f6f5491d74766bb5c2827
Author: Markus Stockhausen <stockhausen@collogia.de>
Date:   Mon Dec 15 12:57:04 2014 +1100

    md/raid6 algorithms: delta syndrome functions
    
    v3: s-o-b comment, explanation of performance and descision for
    the start/stop implementation
    
    Implementing rmw functionality for RAID6 requires optimized syndrome
    calculation. Up to now we can only generate a complete syndrome. The
    target P/Q pages are always overwritten. With this patch we provide
    a framework for inplace P/Q modification. In the first place simply
    fill those functions with NULL values.
    
    xor_syndrome() has two additional parameters: start & stop. These
    will indicate the first and last page that are changing during a
    rmw run. That makes it possible to avoid several unneccessary loops
    and speed up calculation. The caller needs to implement the following
    logic to make the functions work.
    
    1) xor_syndrome(disks, start, stop, ...): "Remove" all data of source
    blocks inside P/Q between (and including) start and end.
    
    2) modify any block with start <= block <= stop
    
    3) xor_syndrome(disks, start, stop, ...): "Reinsert" all data of
    source blocks into P/Q between (and including) start and end.
    
    Pages between start and stop that won't be changed should be filled
    with a pointer to the kernel zero page. The reasons for not taking NULL
    pages are:
    
    1) Algorithms cross the whole source data line by line. Thus avoid
    additional branches.
    
    2) Having a NULL page avoids calculating the XOR P parity but still
    need calulation steps for the Q parity. Depending on the algorithm
    unrolling that might be only a difference of 2 instructions per loop.
    
    The benchmark numbers of the gen_syndrome() functions are displayed in
    the kernel log. Do the same for the xor_syndrome() functions. This
    will help to analyze performance problems and give an rough estimate
    how well the algorithm works. The choice of the fastest algorithm will
    still depend on the gen_syndrome() performance.
    
    With the start/stop page implementation the speed can vary a lot in real
    life. E.g. a change of page 0 & page 15 on a stripe will be harder to
    compute than the case where page 0 & page 1 are XOR candidates. To be not
    to enthusiatic about the expected speeds we will run a worse case test
    that simulates a change on the upper half of the stripe. So we do:
    
    1) calculation of P/Q for the upper pages
    
    2) continuation of Q for the lower (empty) pages
    
    Signed-off-by: Markus Stockhausen <stockhausen@collogia.de>
    Signed-off-by: NeilBrown <neilb@suse.de>

diff --git a/include/linux/raid/pq.h b/include/linux/raid/pq.h
index 73069cb6c54a..a7a06d1dcf9c 100644
--- a/include/linux/raid/pq.h
+++ b/include/linux/raid/pq.h
@@ -72,6 +72,7 @@ extern const char raid6_empty_zero_page[PAGE_SIZE];
 /* Routine choices */
 struct raid6_calls {
 	void (*gen_syndrome)(int, size_t, void **);
+	void (*xor_syndrome)(int, int, int, size_t, void **);
 	int  (*valid)(void);	/* Returns 1 if this routine set is usable */
 	const char *name;	/* Name of this routine set */
 	int prefer;		/* Has special performance attribute */

commit 4d7696f1b05f4aeb586c74868fe3da2731daca4b
Merge: b05430fc9341 bfc90cb0936f
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Tue Sep 10 13:03:41 2013 -0700

    Merge tag 'md/3.12' of git://neil.brown.name/md
    
    Pull md update from Neil Brown:
     "Headline item is multithreading for RAID5 so that more IO/sec can be
      supported on fast (SSD) devices.  Also TILE-Gx SIMD suppor for RAID6
      calculations and an assortment of bug fixes"
    
    * tag 'md/3.12' of git://neil.brown.name/md:
      raid5: only wakeup necessary threads
      md/raid5: flush out all pending requests before proceeding with reshape.
      md/raid5: use seqcount to protect access to shape in make_request.
      raid5: sysfs entry to control worker thread number
      raid5: offload stripe handle to workqueue
      raid5: fix stripe release order
      raid5: make release_stripe lockless
      md: avoid deadlock when dirty buffers during md_stop.
      md: Don't test all of mddev->flags at once.
      md: Fix apparent cut-and-paste error in super_90_validate
      raid6/test: replace echo -e with printf
      RAID: add tilegx SIMD implementation of raid6
      md: fix safe_mode buglet.
      md: don't call md_allow_write in get_bitmap_file.

commit ae77cbc1e7b90473a2b0963bce0e1eb163873214
Author: Ken Steele <ken@tilera.com>
Date:   Wed Aug 7 12:39:56 2013 -0400

    RAID: add tilegx SIMD implementation of raid6
    
    This change adds TILE-Gx SIMD instructions to the software raid
    (md), modeling the Altivec implementation. This is only for Syndrome
    generation; there is more that could be done to improve recovery,
    as in the recent Intel SSE3 recovery implementation.
    
    The code unrolls 8 times; this turns out to be the best on tilegx
    hardware among the set 1, 2, 4, 8 or 16.  The code reads one
    cache-line of data from each disk, stores P and Q then goes to the
    next cache-line.
    
    The test code in sys/linux/lib/raid6/test reports 2008 MB/s data
    read rate for syndrome generation using 18 disks (16 data and 2
    parity). It was 1512 MB/s before this SIMD optimizations. This is
    running on 1 core with all the data in cache.
    
    This is based on the paper The Mathematics of RAID-6.
    (http://kernel.org/pub/linux/kernel/people/hpa/raid6.pdf).
    
    Signed-off-by: Ken Steele <ken@tilera.com>
    Signed-off-by: Chris Metcalf <cmetcalf@tilera.com>
    Signed-off-by: NeilBrown <neilb@suse.de>

diff --git a/include/linux/raid/pq.h b/include/linux/raid/pq.h
index 8dfaa2ce2e95..6d5df8adb53a 100644
--- a/include/linux/raid/pq.h
+++ b/include/linux/raid/pq.h
@@ -101,6 +101,7 @@ extern const struct raid6_calls raid6_altivec8;
 extern const struct raid6_calls raid6_avx2x1;
 extern const struct raid6_calls raid6_avx2x2;
 extern const struct raid6_calls raid6_avx2x4;
+extern const struct raid6_calls raid6_tilegx8;
 
 struct raid6_recov_calls {
 	void (*data2)(int, size_t, int, int, void **);

commit 7d11965ddb9b9b1e0a5d13c58345ada1ccbc663b
Author: Ard Biesheuvel <ard.biesheuvel@linaro.org>
Date:   Thu May 16 17:20:32 2013 +0200

    lib/raid6: add ARM-NEON accelerated syndrome calculation
    
    Rebased/reworked a patch contributed by Rob Herring that uses
    NEON intrinsics to perform the RAID-6 syndrome calculations.
    It uses the existing unroll.awk code to generate several
    unrolled versions of which the best performing one is selected
    at boot time.
    
    Signed-off-by: Ard Biesheuvel <ard.biesheuvel@linaro.org>
    Acked-by: Nicolas Pitre <nico@linaro.org>
    Cc: hpa@linux.intel.com

diff --git a/include/linux/raid/pq.h b/include/linux/raid/pq.h
index 8dfaa2ce2e95..0f424698064f 100644
--- a/include/linux/raid/pq.h
+++ b/include/linux/raid/pq.h
@@ -114,6 +114,11 @@ extern const struct raid6_recov_calls raid6_recov_intx1;
 extern const struct raid6_recov_calls raid6_recov_ssse3;
 extern const struct raid6_recov_calls raid6_recov_avx2;
 
+extern const struct raid6_calls raid6_neonx1;
+extern const struct raid6_calls raid6_neonx2;
+extern const struct raid6_calls raid6_neonx4;
+extern const struct raid6_calls raid6_neonx8;
+
 /* Algorithm list */
 extern const struct raid6_calls * const raid6_algos[];
 extern const struct raid6_recov_calls *const raid6_recov_algos[];

commit 2c935842bdb46f5f557426feb4d2bdfdad1aa5f9
Author: Yuanhan Liu <yuanhan.liu@linux.intel.com>
Date:   Fri Nov 30 13:10:39 2012 -0800

    lib/raid6: Add AVX2 optimized gen_syndrome functions
    
    Add AVX2 optimized gen_syndrom functions, which is simply based on
    sse2.c written by hpa.
    
    Signed-off-by: Yuanhan Liu <yuanhan.liu@linux.intel.com>
    Reviewed-by: H. Peter Anvin <hpa@zytor.com>
    Signed-off-by: Jim Kukunas <james.t.kukunas@linux.intel.com>
    Signed-off-by: NeilBrown <neilb@suse.de>

diff --git a/include/linux/raid/pq.h b/include/linux/raid/pq.h
index 3156347452b9..8dfaa2ce2e95 100644
--- a/include/linux/raid/pq.h
+++ b/include/linux/raid/pq.h
@@ -98,6 +98,9 @@ extern const struct raid6_calls raid6_altivec1;
 extern const struct raid6_calls raid6_altivec2;
 extern const struct raid6_calls raid6_altivec4;
 extern const struct raid6_calls raid6_altivec8;
+extern const struct raid6_calls raid6_avx2x1;
+extern const struct raid6_calls raid6_avx2x2;
+extern const struct raid6_calls raid6_avx2x4;
 
 struct raid6_recov_calls {
 	void (*data2)(int, size_t, int, int, void **);

commit 7056741fd9fc14a65608549a4657cf5178f05f63
Author: Jim Kukunas <james.t.kukunas@linux.intel.com>
Date:   Thu Nov 8 13:47:44 2012 -0800

    lib/raid6: Add AVX2 optimized recovery functions
    
    Optimize RAID6 recovery functions to take advantage of
    the 256-bit YMM integer instructions introduced in AVX2.
    
    The patch was tested and benchmarked before submission.
    However hardware is not yet released so benchmark numbers
    cannot be reported.
    
    Acked-by: "H. Peter Anvin" <hpa@zytor.com>
    Signed-off-by: Jim Kukunas <james.t.kukunas@linux.intel.com>
    Signed-off-by: NeilBrown <neilb@suse.de>

diff --git a/include/linux/raid/pq.h b/include/linux/raid/pq.h
index 640c69ceec96..3156347452b9 100644
--- a/include/linux/raid/pq.h
+++ b/include/linux/raid/pq.h
@@ -109,6 +109,7 @@ struct raid6_recov_calls {
 
 extern const struct raid6_recov_calls raid6_recov_intx1;
 extern const struct raid6_recov_calls raid6_recov_ssse3;
+extern const struct raid6_recov_calls raid6_recov_avx2;
 
 /* Algorithm list */
 extern const struct raid6_calls * const raid6_algos[];

commit 048a8b8c89dc427dd7a58527c8923224b1e66d83
Author: Jim Kukunas <james.t.kukunas@linux.intel.com>
Date:   Tue May 22 13:54:18 2012 +1000

    lib/raid6: Add SSSE3 optimized recovery functions
    
    Add SSSE3 optimized recovery functions, as well as a system
    for selecting the most appropriate recovery functions to use.
    
    Originally-by: H. Peter Anvin <hpa@zytor.com>
    Signed-off-by: Jim Kukunas <james.t.kukunas@linux.intel.com>
    Signed-off-by: NeilBrown <neilb@suse.de>

diff --git a/include/linux/raid/pq.h b/include/linux/raid/pq.h
index 53272e9860a7..640c69ceec96 100644
--- a/include/linux/raid/pq.h
+++ b/include/linux/raid/pq.h
@@ -99,8 +99,20 @@ extern const struct raid6_calls raid6_altivec2;
 extern const struct raid6_calls raid6_altivec4;
 extern const struct raid6_calls raid6_altivec8;
 
+struct raid6_recov_calls {
+	void (*data2)(int, size_t, int, int, void **);
+	void (*datap)(int, size_t, int, void **);
+	int  (*valid)(void);
+	const char *name;
+	int priority;
+};
+
+extern const struct raid6_recov_calls raid6_recov_intx1;
+extern const struct raid6_recov_calls raid6_recov_ssse3;
+
 /* Algorithm list */
 extern const struct raid6_calls * const raid6_algos[];
+extern const struct raid6_recov_calls *const raid6_recov_algos[];
 int raid6_select_algo(void);
 
 /* Return values from chk_syndrome */
@@ -111,14 +123,16 @@ int raid6_select_algo(void);
 
 /* Galois field tables */
 extern const u8 raid6_gfmul[256][256] __attribute__((aligned(256)));
+extern const u8 raid6_vgfmul[256][32] __attribute__((aligned(256)));
 extern const u8 raid6_gfexp[256]      __attribute__((aligned(256)));
 extern const u8 raid6_gfinv[256]      __attribute__((aligned(256)));
 extern const u8 raid6_gfexi[256]      __attribute__((aligned(256)));
 
 /* Recovery routines */
-void raid6_2data_recov(int disks, size_t bytes, int faila, int failb,
+extern void (*raid6_2data_recov)(int disks, size_t bytes, int faila, int failb,
 		       void **ptrs);
-void raid6_datap_recov(int disks, size_t bytes, int faila, void **ptrs);
+extern void (*raid6_datap_recov)(int disks, size_t bytes, int faila,
+			void **ptrs);
 void raid6_dual_recov(int disks, size_t bytes, int faila, int failb,
 		      void **ptrs);
 

commit 38059ec2bd2ce9e4709f49f34795aa0944287908
Author: Steven Rostedt <rostedt@goodmis.org>
Date:   Fri Dec 23 10:17:51 2011 +1100

    md: Fix userspace free_pages() macro
    
    While using etags to find free_pages(), I stumbled across this debug
    definition of free_pages() that is to be used while debugging some raid
    code in userspace. The __get_free_pages() allocates the correct size,
    but the free_pages() does not match. free_pages(), like
    __get_free_pages(), takes an order and not a size.
    
    Acked-by: H. Peter Anvin <hpa@zytor.com>
    Signed-off-by: Steven Rostedt <rostedt@goodmis.org>
    Signed-off-by: NeilBrown <neilb@suse.de>

diff --git a/include/linux/raid/pq.h b/include/linux/raid/pq.h
index 2b59cc824395..53272e9860a7 100644
--- a/include/linux/raid/pq.h
+++ b/include/linux/raid/pq.h
@@ -132,7 +132,7 @@ void raid6_dual_recov(int disks, size_t bytes, int faila, int failb,
 						     PROT_READ|PROT_WRITE,   \
 						     MAP_PRIVATE|MAP_ANONYMOUS,\
 						     0, 0))
-# define free_pages(x, y)	munmap((void *)(x), (y)*PAGE_SIZE)
+# define free_pages(x, y)	munmap((void *)(x), PAGE_SIZE << (y))
 
 static inline void cpu_relax(void)
 {

commit d5302fe41ffb28d0a48be6a71becba36d3453ae0
Author: NeilBrown <neilb@suse.de>
Date:   Thu Aug 12 06:38:24 2010 +1000

    Make lib/raid6/test build correctly.
    
    Some bit-rot needs to be cleaned out.
    
    Signed-off-by: NeilBrown <neilb@suse.de>

diff --git a/include/linux/raid/pq.h b/include/linux/raid/pq.h
index 1cbbd2c11aa9..2b59cc824395 100644
--- a/include/linux/raid/pq.h
+++ b/include/linux/raid/pq.h
@@ -62,7 +62,9 @@ extern const char raid6_empty_zero_page[PAGE_SIZE];
 #define disable_kernel_altivec()
 
 #define EXPORT_SYMBOL(sym)
+#define EXPORT_SYMBOL_GPL(sym)
 #define MODULE_LICENSE(licence)
+#define MODULE_DESCRIPTION(desc)
 #define subsys_initcall(x)
 #define module_exit(x)
 #endif /* __KERNEL__ */

commit 7820f9e1dddcfebae2698fb2a245d04ce3aa6e74
Author: NeilBrown <neilb@suse.de>
Date:   Mon Dec 14 12:49:47 2009 +1100

    md: remove sparse warning:symbol XXX was not declared.
    
    Signed-off-by: NeilBrown <neilb@suse.de>

diff --git a/include/linux/raid/pq.h b/include/linux/raid/pq.h
index d92480f8285c..1cbbd2c11aa9 100644
--- a/include/linux/raid/pq.h
+++ b/include/linux/raid/pq.h
@@ -78,6 +78,25 @@ struct raid6_calls {
 /* Selected algorithm */
 extern struct raid6_calls raid6_call;
 
+/* Various routine sets */
+extern const struct raid6_calls raid6_intx1;
+extern const struct raid6_calls raid6_intx2;
+extern const struct raid6_calls raid6_intx4;
+extern const struct raid6_calls raid6_intx8;
+extern const struct raid6_calls raid6_intx16;
+extern const struct raid6_calls raid6_intx32;
+extern const struct raid6_calls raid6_mmxx1;
+extern const struct raid6_calls raid6_mmxx2;
+extern const struct raid6_calls raid6_sse1x1;
+extern const struct raid6_calls raid6_sse1x2;
+extern const struct raid6_calls raid6_sse2x1;
+extern const struct raid6_calls raid6_sse2x2;
+extern const struct raid6_calls raid6_sse2x4;
+extern const struct raid6_calls raid6_altivec1;
+extern const struct raid6_calls raid6_altivec2;
+extern const struct raid6_calls raid6_altivec4;
+extern const struct raid6_calls raid6_altivec8;
+
 /* Algorithm list */
 extern const struct raid6_calls * const raid6_algos[];
 int raid6_select_algo(void);

commit f701d589aa34d7531183c9ac6f7713ba14212b02
Author: Dan Williams <dan.j.williams@intel.com>
Date:   Tue Mar 31 15:09:39 2009 +1100

    md/raid6: move raid6 data processing to raid6_pq.ko
    
    Move the raid6 data processing routines into a standalone module
    (raid6_pq) to prepare them to be called from async_tx wrappers and other
    non-md drivers/modules.  This precludes a circular dependency of raid456
    needing the async modules for data processing while those modules in
    turn depend on raid456 for the base level synchronous raid6 routines.
    
    To support this move:
    1/ The exportable definitions in raid6.h move to include/linux/raid/pq.h
    2/ The raid6_call, recovery calls, and table symbols are exported
    3/ Extra #ifdef __KERNEL__ statements to enable the userspace raid6test to
       compile
    
    Signed-off-by: Dan Williams <dan.j.williams@intel.com>
    Signed-off-by: NeilBrown <neilb@suse.de>

diff --git a/include/linux/raid/pq.h b/include/linux/raid/pq.h
new file mode 100644
index 000000000000..d92480f8285c
--- /dev/null
+++ b/include/linux/raid/pq.h
@@ -0,0 +1,132 @@
+/* -*- linux-c -*- ------------------------------------------------------- *
+ *
+ *   Copyright 2003 H. Peter Anvin - All Rights Reserved
+ *
+ *   This program is free software; you can redistribute it and/or modify
+ *   it under the terms of the GNU General Public License as published by
+ *   the Free Software Foundation, Inc., 53 Temple Place Ste 330,
+ *   Boston MA 02111-1307, USA; either version 2 of the License, or
+ *   (at your option) any later version; incorporated herein by reference.
+ *
+ * ----------------------------------------------------------------------- */
+
+#ifndef LINUX_RAID_RAID6_H
+#define LINUX_RAID_RAID6_H
+
+#ifdef __KERNEL__
+
+/* Set to 1 to use kernel-wide empty_zero_page */
+#define RAID6_USE_EMPTY_ZERO_PAGE 0
+#include <linux/blkdev.h>
+
+/* We need a pre-zeroed page... if we don't want to use the kernel-provided
+   one define it here */
+#if RAID6_USE_EMPTY_ZERO_PAGE
+# define raid6_empty_zero_page empty_zero_page
+#else
+extern const char raid6_empty_zero_page[PAGE_SIZE];
+#endif
+
+#else /* ! __KERNEL__ */
+/* Used for testing in user space */
+
+#include <errno.h>
+#include <inttypes.h>
+#include <limits.h>
+#include <stddef.h>
+#include <sys/mman.h>
+#include <sys/types.h>
+
+/* Not standard, but glibc defines it */
+#define BITS_PER_LONG __WORDSIZE
+
+typedef uint8_t  u8;
+typedef uint16_t u16;
+typedef uint32_t u32;
+typedef uint64_t u64;
+
+#ifndef PAGE_SIZE
+# define PAGE_SIZE 4096
+#endif
+extern const char raid6_empty_zero_page[PAGE_SIZE];
+
+#define __init
+#define __exit
+#define __attribute_const__ __attribute__((const))
+#define noinline __attribute__((noinline))
+
+#define preempt_enable()
+#define preempt_disable()
+#define cpu_has_feature(x) 1
+#define enable_kernel_altivec()
+#define disable_kernel_altivec()
+
+#define EXPORT_SYMBOL(sym)
+#define MODULE_LICENSE(licence)
+#define subsys_initcall(x)
+#define module_exit(x)
+#endif /* __KERNEL__ */
+
+/* Routine choices */
+struct raid6_calls {
+	void (*gen_syndrome)(int, size_t, void **);
+	int  (*valid)(void);	/* Returns 1 if this routine set is usable */
+	const char *name;	/* Name of this routine set */
+	int prefer;		/* Has special performance attribute */
+};
+
+/* Selected algorithm */
+extern struct raid6_calls raid6_call;
+
+/* Algorithm list */
+extern const struct raid6_calls * const raid6_algos[];
+int raid6_select_algo(void);
+
+/* Return values from chk_syndrome */
+#define RAID6_OK	0
+#define RAID6_P_BAD	1
+#define RAID6_Q_BAD	2
+#define RAID6_PQ_BAD	3
+
+/* Galois field tables */
+extern const u8 raid6_gfmul[256][256] __attribute__((aligned(256)));
+extern const u8 raid6_gfexp[256]      __attribute__((aligned(256)));
+extern const u8 raid6_gfinv[256]      __attribute__((aligned(256)));
+extern const u8 raid6_gfexi[256]      __attribute__((aligned(256)));
+
+/* Recovery routines */
+void raid6_2data_recov(int disks, size_t bytes, int faila, int failb,
+		       void **ptrs);
+void raid6_datap_recov(int disks, size_t bytes, int faila, void **ptrs);
+void raid6_dual_recov(int disks, size_t bytes, int faila, int failb,
+		      void **ptrs);
+
+/* Some definitions to allow code to be compiled for testing in userspace */
+#ifndef __KERNEL__
+
+# define jiffies	raid6_jiffies()
+# define printk 	printf
+# define GFP_KERNEL	0
+# define __get_free_pages(x, y)	((unsigned long)mmap(NULL, PAGE_SIZE << (y), \
+						     PROT_READ|PROT_WRITE,   \
+						     MAP_PRIVATE|MAP_ANONYMOUS,\
+						     0, 0))
+# define free_pages(x, y)	munmap((void *)(x), (y)*PAGE_SIZE)
+
+static inline void cpu_relax(void)
+{
+	/* Nothing */
+}
+
+#undef  HZ
+#define HZ 1000
+static inline uint32_t raid6_jiffies(void)
+{
+	struct timeval tv;
+	gettimeofday(&tv, NULL);
+	return tv.tv_sec*1000 + tv.tv_usec/1000;
+}
+
+#endif /* ! __KERNEL__ */
+
+#endif /* LINUX_RAID_RAID6_H */
