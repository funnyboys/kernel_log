commit 84a4062632462c4320704fcdf8e99e89e94c0aba
Author: Johan Korsnes <jkorsnes@cisco.com>
Date:   Fri Jan 17 13:08:36 2020 +0100

    HID: core: increase HID report buffer size to 8KiB
    
    We have a HID touch device that reports its opens and shorts test
    results in HID buffers of size 8184 bytes. The maximum size of the HID
    buffer is currently set to 4096 bytes, causing probe of this device to
    fail. With this patch we increase the maximum size of the HID buffer to
    8192 bytes, making device probe and acquisition of said buffers succeed.
    
    Signed-off-by: Johan Korsnes <jkorsnes@cisco.com>
    Cc: Alan Stern <stern@rowland.harvard.edu>
    Cc: Armando Visconti <armando.visconti@st.com>
    Cc: Jiri Kosina <jkosina@suse.cz>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>

diff --git a/include/linux/hid.h b/include/linux/hid.h
index cd41f209043f..875f71132b14 100644
--- a/include/linux/hid.h
+++ b/include/linux/hid.h
@@ -492,7 +492,7 @@ struct hid_report_enum {
 };
 
 #define HID_MIN_BUFFER_SIZE	64		/* make sure there is at least a packet size of space */
-#define HID_MAX_BUFFER_SIZE	4096		/* 4kb */
+#define HID_MAX_BUFFER_SIZE	8192		/* 8kb */
 #define HID_CONTROL_FIFO_SIZE	256		/* to init devices with >100 reports */
 #define HID_OUTPUT_FIFO_SIZE	64
 

commit aaeabb121a6271775cef35ec3197e9ef124fdb2a
Author: Joshua Clayton <stillcompiling@gmail.com>
Date:   Mon Aug 12 09:20:21 2019 -0600

    HID: core: Add printk_once variants to hid_warn() etc
    
    hid_warn_once() is needed. Add the others as part of the block.
    
    Signed-off-by: Joshua Clayton <stillcompiling@gmail.com>
    Signed-off-by: Benjamin Tissoires <benjamin.tissoires@redhat.com>

diff --git a/include/linux/hid.h b/include/linux/hid.h
index e6c7efdb0458..cd41f209043f 100644
--- a/include/linux/hid.h
+++ b/include/linux/hid.h
@@ -1171,4 +1171,15 @@ do {									\
 #define hid_dbg(hid, fmt, ...)				\
 	dev_dbg(&(hid)->dev, fmt, ##__VA_ARGS__)
 
+#define hid_err_once(hid, fmt, ...)			\
+	dev_err_once(&(hid)->dev, fmt, ##__VA_ARGS__)
+#define hid_notice_once(hid, fmt, ...)			\
+	dev_notice_once(&(hid)->dev, fmt, ##__VA_ARGS__)
+#define hid_warn_once(hid, fmt, ...)			\
+	dev_warn_once(&(hid)->dev, fmt, ##__VA_ARGS__)
+#define hid_info_once(hid, fmt, ...)			\
+	dev_info_once(&(hid)->dev, fmt, ##__VA_ARGS__)
+#define hid_dbg_once(hid, fmt, ...)			\
+	dev_dbg_once(&(hid)->dev, fmt, ##__VA_ARGS__)
+
 #endif

commit 337c22ab1d4f316f37e7a7c78bdea3d768270542
Author: Joshua Clayton <stillcompiling@gmail.com>
Date:   Mon Aug 12 09:20:20 2019 -0600

    HID: core: reformat and reduce hid_printk macros
    
    Reformat hid_printk macros to use standard __VA_ARGS__ syntax.
    Per Joe Perches hid_printk(), hid_emerg(), hid_crit(), and hid_alert() are
    unlikely ever to be used. Remove them.
    
    Signed-off-by: Joshua Clayton <stillcompiling@gmail.com>
    Signed-off-by: Benjamin Tissoires <benjamin.tissoires@redhat.com>

diff --git a/include/linux/hid.h b/include/linux/hid.h
index d770ab1a0479..e6c7efdb0458 100644
--- a/include/linux/hid.h
+++ b/include/linux/hid.h
@@ -1154,29 +1154,21 @@ int hid_pidff_init(struct hid_device *hid);
 #define hid_pidff_init NULL
 #endif
 
-#define dbg_hid(format, arg...)						\
+#define dbg_hid(fmt, ...)						\
 do {									\
 	if (hid_debug)							\
-		printk(KERN_DEBUG "%s: " format, __FILE__, ##arg);	\
+		printk(KERN_DEBUG "%s: " fmt, __FILE__, ##__VA_ARGS__);	\
 } while (0)
 
-#define hid_printk(level, hid, fmt, arg...)		\
-	dev_printk(level, &(hid)->dev, fmt, ##arg)
-#define hid_emerg(hid, fmt, arg...)			\
-	dev_emerg(&(hid)->dev, fmt, ##arg)
-#define hid_crit(hid, fmt, arg...)			\
-	dev_crit(&(hid)->dev, fmt, ##arg)
-#define hid_alert(hid, fmt, arg...)			\
-	dev_alert(&(hid)->dev, fmt, ##arg)
-#define hid_err(hid, fmt, arg...)			\
-	dev_err(&(hid)->dev, fmt, ##arg)
-#define hid_notice(hid, fmt, arg...)			\
-	dev_notice(&(hid)->dev, fmt, ##arg)
-#define hid_warn(hid, fmt, arg...)			\
-	dev_warn(&(hid)->dev, fmt, ##arg)
-#define hid_info(hid, fmt, arg...)			\
-	dev_info(&(hid)->dev, fmt, ##arg)
-#define hid_dbg(hid, fmt, arg...)			\
-	dev_dbg(&(hid)->dev, fmt, ##arg)
+#define hid_err(hid, fmt, ...)				\
+	dev_err(&(hid)->dev, fmt, ##__VA_ARGS__)
+#define hid_notice(hid, fmt, ...)			\
+	dev_notice(&(hid)->dev, fmt, ##__VA_ARGS__)
+#define hid_warn(hid, fmt, ...)				\
+	dev_warn(&(hid)->dev, fmt, ##__VA_ARGS__)
+#define hid_info(hid, fmt, ...)				\
+	dev_info(&(hid)->dev, fmt, ##__VA_ARGS__)
+#define hid_dbg(hid, fmt, ...)				\
+	dev_dbg(&(hid)->dev, fmt, ##__VA_ARGS__)
 
 #endif

commit 1a59d1b8e05ea6ab45f7e18897de1ef0e6bc3da6
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Mon May 27 08:55:05 2019 +0200

    treewide: Replace GPLv2 boilerplate/reference with SPDX - rule 156
    
    Based on 1 normalized pattern(s):
    
      this program is free software you can redistribute it and or modify
      it under the terms of the gnu general public license as published by
      the free software foundation either version 2 of the license or at
      your option any later version this program is distributed in the
      hope that it will be useful but without any warranty without even
      the implied warranty of merchantability or fitness for a particular
      purpose see the gnu general public license for more details you
      should have received a copy of the gnu general public license along
      with this program if not write to the free software foundation inc
      59 temple place suite 330 boston ma 02111 1307 usa
    
    extracted by the scancode license scanner the SPDX license identifier
    
      GPL-2.0-or-later
    
    has been chosen to replace the boilerplate/reference in 1334 file(s).
    
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Reviewed-by: Allison Randal <allison@lohutok.net>
    Reviewed-by: Richard Fontana <rfontana@redhat.com>
    Cc: linux-spdx@vger.kernel.org
    Link: https://lkml.kernel.org/r/20190527070033.113240726@linutronix.de
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/include/linux/hid.h b/include/linux/hid.h
index ae9da674b749..d770ab1a0479 100644
--- a/include/linux/hid.h
+++ b/include/linux/hid.h
@@ -1,22 +1,10 @@
+/* SPDX-License-Identifier: GPL-2.0-or-later */
 /*
  *  Copyright (c) 1999 Andreas Gal
  *  Copyright (c) 2000-2001 Vojtech Pavlik
  *  Copyright (c) 2006-2007 Jiri Kosina
  */
 /*
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation; either version 2 of the License, or
- * (at your option) any later version.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
  *
  * Should you need to contact me, the author, you can do so either by
  * e-mail - mail your message to <vojtech@ucw.cz>, or by paper mail:

commit 63b6f0b827d6b40e53bac5abc8150fa117d27bec
Merge: 39b3c3a5fbc5 4ceabaf7909d 2eb3c3e6eafb 640d4ea83c8a 161f62cd07fd 70cd8121ca7d 77f9f7721866 59579a8d173e
Author: Jiri Kosina <jkosina@suse.cz>
Date:   Mon May 6 15:45:18 2019 +0200

    Merge branches 'for-5.1/upstream-fixes', 'for-5.2/core', 'for-5.2/ish', 'for-5.2/logitech', 'for-5.2/macally', 'for-5.2/picolcd', 'for-5.2/sensor' and 'for-5.2/u2fzero' into for-linus

commit d43c17ead879ba7c076dc2f5fd80cd76047c9ff4
Author: Benjamin Tissoires <benjamin.tissoires@redhat.com>
Date:   Wed Apr 3 16:20:20 2019 +0200

    HID: input: make sure the wheel high resolution multiplier is set
    
    Some old mice have a tendency to not accept the high resolution multiplier.
    They reply with a -EPIPE which was previously ignored.
    
    Force the call to resolution multiplier to be synchronous and actually
    check for the answer. If this fails, consider the mouse like a normal one.
    
    Fixes: 2dc702c991e377 ("HID: input: use the Resolution Multiplier for
           high-resolution scrolling")
    Link: https://bugzilla.redhat.com/show_bug.cgi?id=1700071
    Reported-and-tested-by: James Feeney <james@nurealm.net>
    Cc: stable@vger.kernel.org  # v5.0+
    Signed-off-by: Benjamin Tissoires <benjamin.tissoires@redhat.com>

diff --git a/include/linux/hid.h b/include/linux/hid.h
index f9707d1dcb58..2c69340d372d 100644
--- a/include/linux/hid.h
+++ b/include/linux/hid.h
@@ -893,7 +893,7 @@ struct hid_field *hidinput_get_led_field(struct hid_device *hid);
 unsigned int hidinput_count_leds(struct hid_device *hid);
 __s32 hidinput_calc_abs_res(const struct hid_field *field, __u16 code);
 void hid_output_report(struct hid_report *report, __u8 *data);
-void __hid_request(struct hid_device *hid, struct hid_report *rep, int reqtype);
+int __hid_request(struct hid_device *hid, struct hid_report *rep, int reqtype);
 u8 *hid_alloc_report_buf(struct hid_report *report, gfp_t flags);
 struct hid_device *hid_allocate_device(void);
 struct hid_report *hid_register_report(struct hid_device *device,

commit c9121cf637331b6fc07a60708c6ca0a161e7deb5
Author: Hans de Goede <hdegoede@redhat.com>
Date:   Sat Apr 20 13:21:56 2019 +0200

    HID: logitech-dj: add support for 27 MHz receivers
    
    Most Logitech wireless keyboard and mice using the 27 MHz are hidpp10
    devices, add support to logitech-dj for their receivers.
    
    Doing so leads to 2 improvements:
    
    1) All these devices share the same USB product-id for their receiver,
    making it impossible to properly map some special keys / buttons
    which differ from device to device. Adding support to logitech-dj to
    see these as hidpp10 devices allows us to get the actual device-id
    from the keyboard / mouse.
    
    2) It enables battery-monitoring of these devices
    
    This patch uses a new HID group for 27Mhz devices, since the logitech-hidpp
    code needs to be able to differentiate them from other devices instantiated
    by the logitech-dj code.
    
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Signed-off-by: Benjamin Tissoires <benjamin.tissoires@redhat.com>

diff --git a/include/linux/hid.h b/include/linux/hid.h
index f9707d1dcb58..9f161fa5cbd4 100644
--- a/include/linux/hid.h
+++ b/include/linux/hid.h
@@ -382,6 +382,7 @@ struct hid_item {
 #define HID_GROUP_WACOM				0x0101
 #define HID_GROUP_LOGITECH_DJ_DEVICE		0x0102
 #define HID_GROUP_STEAM				0x0103
+#define HID_GROUP_LOGITECH_27MHZ_DEVICE		0x0104
 
 /*
  * HID protocol status

commit 58e75155009cc800005629955d3482f36a1e0eec
Author: Nicolas Saenz Julienne <nsaenzjulienne@suse.de>
Date:   Wed Mar 27 11:18:48 2019 +0100

    HID: core: move Usage Page concatenation to Main item
    
    As seen on some USB wireless keyboards manufactured by Primax, the HID
    parser was using some assumptions that are not always true. In this case
    it's s the fact that, inside the scope of a main item, an Usage Page
    will always precede an Usage.
    
    The spec is not pretty clear as 6.2.2.7 states "Any usage that follows
    is interpreted as a Usage ID and concatenated with the Usage Page".
    While 6.2.2.8 states "When the parser encounters a main item it
    concatenates the last declared Usage Page with a Usage to form a
    complete usage value." Being somewhat contradictory it was decided to
    match Window's implementation, which follows 6.2.2.8.
    
    In summary, the patch moves the Usage Page concatenation from the local
    item parsing function to the main item parsing function.
    
    Signed-off-by: Nicolas Saenz Julienne <nsaenzjulienne@suse.de>
    Reviewed-by: Terry Junge <terry.junge@poly.com>
    Signed-off-by: Benjamin Tissoires <benjamin.tissoires@redhat.com>

diff --git a/include/linux/hid.h b/include/linux/hid.h
index f9707d1dcb58..ac0c70b4ce10 100644
--- a/include/linux/hid.h
+++ b/include/linux/hid.h
@@ -417,6 +417,7 @@ struct hid_global {
 
 struct hid_local {
 	unsigned usage[HID_MAX_USAGES]; /* usage array */
+	u8 usage_size[HID_MAX_USAGES]; /* usage size array */
 	unsigned collection_index[HID_MAX_USAGES]; /* collection index array */
 	unsigned usage_index;
 	unsigned usage_minimum;

commit 1950f462916edc9581168ca8d5882a8101e8bbcf
Author: Philipp Zabel <philipp.zabel@gmail.com>
Date:   Mon Jan 14 08:19:22 2019 +0100

    HID: core: simplify active collection tracking
    
    Manually tracking an active collection to set collection parents is not
    necessary, we just have to look one step back into the collection stack
    to find the correct parent.
    
    Signed-off-by: Philipp Zabel <philipp.zabel@gmail.com>
    Reviewed-by: Peter Hutterer <peter.hutterer@who-t.net>
    Signed-off-by: Benjamin Tissoires <benjamin.tissoires@redhat.com>

diff --git a/include/linux/hid.h b/include/linux/hid.h
index 992bbb7196df..f9707d1dcb58 100644
--- a/include/linux/hid.h
+++ b/include/linux/hid.h
@@ -658,7 +658,6 @@ struct hid_parser {
 	unsigned int         *collection_stack;
 	unsigned int          collection_stack_ptr;
 	unsigned int          collection_stack_size;
-	int                   active_collection_idx; /* device->collection */
 	struct hid_device    *device;
 	unsigned int          scan_flags;
 };

commit ee46967fc6e74d412fe1ec15f77fdb8624bde2b0
Author: Peter Hutterer <peter.hutterer@who-t.net>
Date:   Wed Jan 9 13:50:18 2019 +1000

    HID: core: replace the collection tree pointers with indices
    
    Previously, the pointer to the parent collection was stored. If a device
    exceeds 16 collections (HID_DEFAULT_NUM_COLLECTIONS), the array to store
    the collections is reallocated, the pointer to the parent collection becomes
    invalid.
    
    Replace the pointers with an index-based lookup into the collections array.
    
    Fixes: c53431eb696f3c ("HID: core: store the collections as a basic tree")
    Reported-by: Pandruvada, Srinivas <srinivas.pandruvada@intel.com>
    Signed-off-by: Peter Hutterer <peter.hutterer@who-t.net>
    Tested-by: Kyle Pelton <kyle.d.pelton@linux.intel.com>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>

diff --git a/include/linux/hid.h b/include/linux/hid.h
index d99287327ef2..992bbb7196df 100644
--- a/include/linux/hid.h
+++ b/include/linux/hid.h
@@ -430,7 +430,7 @@ struct hid_local {
  */
 
 struct hid_collection {
-	struct hid_collection *parent;
+	int parent_idx; /* device->collection */
 	unsigned type;
 	unsigned usage;
 	unsigned level;
@@ -658,7 +658,7 @@ struct hid_parser {
 	unsigned int         *collection_stack;
 	unsigned int          collection_stack_ptr;
 	unsigned int          collection_stack_size;
-	struct hid_collection *active_collection;
+	int                   active_collection_idx; /* device->collection */
 	struct hid_device    *device;
 	unsigned int          scan_flags;
 };

commit bd8879faafe6d057237461c4d58d8b0d37b9e3ee
Merge: f8f807441eef 8c32d47b151b 0e1f37d120ec 7f5592742a42 aeed35faee52 31a8b3ee16e3 16767229940f 74fbc7d371d9
Author: Jiri Kosina <jkosina@suse.cz>
Date:   Thu Jan 3 12:50:28 2019 +0100

    Merge branches 'for-4.20/upstream-fixes', 'for-4.21/core', 'for-4.21/hid-asus', 'for-4.21/hid-core', 'for-4.21/hid-cougar', 'for-4.21/hidraw', 'for-4.21/highres-wheel' and 'for-4.21/ish' into for-linus

commit 2dc702c991e3774af9d7ce410eef410ca9e2357e
Author: Peter Hutterer <peter.hutterer@who-t.net>
Date:   Wed Dec 5 10:42:24 2018 +1000

    HID: input: use the Resolution Multiplier for high-resolution scrolling
    
    Windows uses a magic number of 120 for a wheel click. High-resolution
    scroll wheels are supposed to use a fraction of 120 to signal smaller
    scroll steps. This is implemented by the Resolution Multiplier in the
    device itself.
    
    If the multiplier is present in the report descriptor, set it to the
    logical max and then use the resolution multiplier to calculate the
    high-resolution events. This is the recommendation by Microsoft, see
    http://msdn.microsoft.com/en-us/windows/hardware/gg487477.aspx
    
    Note that all mice encountered so far have a logical min/max of 0/1, so
    it's a binary "yes or no" to high-res scrolling anyway.
    
    To make userspace simpler, always enable the REL_WHEEL_HI_RES bit. Where
    the device doesn't support high-resolution scrolling, the value for the
    high-res data will simply be a multiple of 120 every time. For userspace,
    if REL_WHEEL_HI_RES is available that is the one to be used.
    
    Potential side-effect: a device with a Resolution Multiplier applying to
    other Input items will have those items set to the logical max as well.
    This cannot easily be worked around but it is doubtful such devices exist.
    
    Signed-off-by: Peter Hutterer <peter.hutterer@who-t.net>
    Verified-by: Harry Cutts <hcutts@chromium.org>
    Signed-off-by: Benjamin Tissoires <benjamin.tissoires@redhat.com>

diff --git a/include/linux/hid.h b/include/linux/hid.h
index fd8d860365a4..93db548f8761 100644
--- a/include/linux/hid.h
+++ b/include/linux/hid.h
@@ -233,6 +233,7 @@ struct hid_item {
 #define HID_DC_BATTERYSTRENGTH	0x00060020
 
 #define HID_CP_CONSUMER_CONTROL	0x000c0001
+#define HID_CP_AC_PAN		0x000c0238
 
 #define HID_DG_DIGITIZER	0x000d0001
 #define HID_DG_PEN		0x000d0002
@@ -441,11 +442,13 @@ struct hid_usage {
 	__s8	  resolution_multiplier;/* Effective Resolution Multiplier
 					   (HUT v1.12, 4.3.1), default: 1 */
 	/* hidinput data */
+	__s8	  wheel_factor;		/* 120/resolution_multiplier */
 	__u16     code;			/* input driver code */
 	__u8      type;			/* input driver type */
 	__s8	  hat_min;		/* hat switch fun */
 	__s8	  hat_max;		/* ditto */
 	__s8	  hat_dir;		/* ditto */
+	__s16	  wheel_accumulated;	/* hi-res wheel */
 };
 
 struct hid_input;

commit 5a4abb36f312cf83206b1b7d1308ba47cba0b3cc
Author: Peter Hutterer <peter.hutterer@who-t.net>
Date:   Wed Dec 5 10:42:23 2018 +1000

    HID: core: process the Resolution Multiplier
    
    The Resolution Multiplier is a feature report that modifies the value of
    Usages within the same Logical Collection. If the multiplier is set to
    anything but 1, the hardware reports (value * multiplier) for the same amount
    of physical movement, i.e. the value we receive in the kernel is
    pre-multiplied.
    
    The hardware may either send a single (value * multiplier), or by sending
    multiplier as many reports with the same value, or a combination of these two
    options. For example, when the Microsoft Sculpt Ergonomic mouse Resolution
    Multiplier is set to 12, the Wheel sends out 12 for every detent but AC Pan
    sends out a value of 3 at 4 times the frequency.
    
    The effective multiplier is based on the physical min/max of the multiplier
    field, a logical min/max of [0,1] with a physical min/max of [1,8] means the
    multiplier is either 1 or 8.
    
    The Resolution Multiplier was introduced for high-resolution scrolling in
    Windows Vista and is commonly used on Microsoft mice.
    
    The recommendation for the Resolution Multiplier is to default to 1 for
    backwards compatibility. This patch adds an arbitrary upper limit at 255. The
    only known use case for the Resolution Multiplier is for scroll wheels where the
    multiplier has to be a fraction of 120 to work with Windows.
    
    Signed-off-by: Peter Hutterer <peter.hutterer@who-t.net>
    Verified-by: Harry Cutts <hcutts@chromium.org>
    Signed-off-by: Benjamin Tissoires <benjamin.tissoires@redhat.com>

diff --git a/include/linux/hid.h b/include/linux/hid.h
index fdfda898656c..fd8d860365a4 100644
--- a/include/linux/hid.h
+++ b/include/linux/hid.h
@@ -219,6 +219,7 @@ struct hid_item {
 #define HID_GD_VBRZ		0x00010045
 #define HID_GD_VNO		0x00010046
 #define HID_GD_FEATURE		0x00010047
+#define HID_GD_RESOLUTION_MULTIPLIER	0x00010048
 #define HID_GD_SYSTEM_CONTROL	0x00010080
 #define HID_GD_UP		0x00010090
 #define HID_GD_DOWN		0x00010091
@@ -437,6 +438,8 @@ struct hid_usage {
 	unsigned  hid;			/* hid usage code */
 	unsigned  collection_index;	/* index into collection array */
 	unsigned  usage_index;		/* index into usage array */
+	__s8	  resolution_multiplier;/* Effective Resolution Multiplier
+					   (HUT v1.12, 4.3.1), default: 1 */
 	/* hidinput data */
 	__u16     code;			/* input driver code */
 	__u8      type;			/* input driver type */
@@ -894,6 +897,8 @@ struct hid_report *hid_validate_values(struct hid_device *hid,
 				       unsigned int type, unsigned int id,
 				       unsigned int field_index,
 				       unsigned int report_counts);
+
+void hid_setup_resolution_multiplier(struct hid_device *hid);
 int hid_open_report(struct hid_device *device);
 int hid_check_keys_pressed(struct hid_device *hid);
 int hid_connect(struct hid_device *hid, unsigned int connect_mask);

commit c53431eb696f3c64c12c00afb81048af54b61532
Author: Peter Hutterer <peter.hutterer@who-t.net>
Date:   Wed Dec 5 10:42:22 2018 +1000

    HID: core: store the collections as a basic tree
    
    For each collection parsed, store a pointer to the parent collection
    (if any). This makes it a lot easier to look up which collection(s)
    any given item is part of
    
    Signed-off-by: Peter Hutterer <peter.hutterer@who-t.net>
    Verified-by: Harry Cutts <hcutts@chromium.org>
    Signed-off-by: Benjamin Tissoires <benjamin.tissoires@redhat.com>

diff --git a/include/linux/hid.h b/include/linux/hid.h
index a355d61940f2..fdfda898656c 100644
--- a/include/linux/hid.h
+++ b/include/linux/hid.h
@@ -427,6 +427,7 @@ struct hid_local {
  */
 
 struct hid_collection {
+	struct hid_collection *parent;
 	unsigned type;
 	unsigned usage;
 	unsigned level;
@@ -650,6 +651,7 @@ struct hid_parser {
 	unsigned int         *collection_stack;
 	unsigned int          collection_stack_ptr;
 	unsigned int          collection_stack_size;
+	struct hid_collection *active_collection;
 	struct hid_device    *device;
 	unsigned int          scan_flags;
 };

commit 7f5592742a429b4de770fc5b796d18de43a15fdc
Author: Chris Chiu <chiu@endlessm.com>
Date:   Mon Dec 3 14:46:21 2018 +0800

    HID: input: support Microsoft wireless radio control hotkey
    
    The ASUS laptops start to support the airplane mode radio management
    to replace the original mechanism of airplane mode toggle hotkey.
    On the ASUS P5440FF, it presents as a HID device connecting via
    I2C, named i2c-AMPD0001. When pressing it, the Embedded Controller
    send hid report via I2C and switch the airplane mode indicator LED
    based on the status.
    
    However, it's not working because it fails to be identified as a
    hidinput device. It fails in hidinput_connect() due to the macro
    IS_INPUT_APPLICATION doesn't have HID_GD_WIRELESS_RADIO_CTLS as
    a legit application code.
    
    It's easy to add the HID I2C vendor and product id to the quirk
    list and apply HID_QUIRK_HIDINPUT_FORCE to make it work. But it
    makes more sense to support it as a generic input application.
    
    Signed-off-by: Chris Chiu <chiu@endlessm.com>
    Signed-off-by: Benjamin Tissoires <benjamin.tissoires@redhat.com>

diff --git a/include/linux/hid.h b/include/linux/hid.h
index ce5f996c8d3d..42079116fb61 100644
--- a/include/linux/hid.h
+++ b/include/linux/hid.h
@@ -840,7 +840,8 @@ static inline bool hid_is_using_ll_driver(struct hid_device *hdev,
 #define IS_INPUT_APPLICATION(a) \
 		(((a >= HID_UP_GENDESK) && (a <= HID_GD_MULTIAXIS)) \
 		|| ((a >= HID_DG_PEN) && (a <= HID_DG_WHITEBOARD)) \
-		|| (a == HID_GD_SYSTEM_CONTROL) || (a == HID_CP_CONSUMER_CONTROL))
+		|| (a == HID_GD_SYSTEM_CONTROL) || (a == HID_CP_CONSUMER_CONTROL) \
+		|| (a == HID_GD_WIRELESS_RADIO_CTLS))
 
 /* HID core API */
 

commit 2fc00c1e0f9d2abe0df74c33cf9f40d12b9b892f
Author: Chris Chiu <chiu@endlessm.com>
Date:   Mon Dec 3 14:46:20 2018 +0800

    HID: use macros in IS_INPUT_APPLICATION
    
    Add missing definition for HID_DG_WHITEBOARD then replace the hid
    usage hex with macros for better readibility.
    
    Signed-off-by: Chris Chiu <chiu@endlessm.com>
    Signed-off-by: Benjamin Tissoires <benjamin.tissoires@redhat.com>

diff --git a/include/linux/hid.h b/include/linux/hid.h
index a355d61940f2..ce5f996c8d3d 100644
--- a/include/linux/hid.h
+++ b/include/linux/hid.h
@@ -238,6 +238,7 @@ struct hid_item {
 #define HID_DG_LIGHTPEN		0x000d0003
 #define HID_DG_TOUCHSCREEN	0x000d0004
 #define HID_DG_TOUCHPAD		0x000d0005
+#define HID_DG_WHITEBOARD	0x000d0006
 #define HID_DG_STYLUS		0x000d0020
 #define HID_DG_PUCK		0x000d0021
 #define HID_DG_FINGER		0x000d0022
@@ -836,7 +837,10 @@ static inline bool hid_is_using_ll_driver(struct hid_device *hdev,
 
 /* Applications from HID Usage Tables 4/8/99 Version 1.1 */
 /* We ignore a few input applications that are not widely used */
-#define IS_INPUT_APPLICATION(a) (((a >= 0x00010000) && (a <= 0x00010008)) || (a == 0x00010080) || (a == 0x000c0001) || ((a >= 0x000d0002) && (a <= 0x000d0006)))
+#define IS_INPUT_APPLICATION(a) \
+		(((a >= HID_UP_GENDESK) && (a <= HID_GD_MULTIAXIS)) \
+		|| ((a >= HID_DG_PEN) && (a <= HID_DG_WHITEBOARD)) \
+		|| (a == HID_GD_SYSTEM_CONTROL) || (a == HID_CP_CONSUMER_CONTROL))
 
 /* HID core API */
 

commit f1539a0c2545d7bd82e451bd1464f2a820f55de4
Author: Benjamin Tissoires <benjamin.tissoires@redhat.com>
Date:   Wed Nov 21 16:27:11 2018 +0100

    Revert "HID: input: Create a utility class for counting scroll events"
    
    This reverts commit 1ff2e1a44e02d4bdbb9be67c7d9acc240a67141f.
    
    It turns out the current API is not that compatible with
    some Microsoft mice, so better start again from scratch.
    
    Signed-off-by: Benjamin Tissoires <benjamin.tissoires@redhat.com>
    Acked-by: Harry Cutts <hcutts@chromium.org>
    Acked-by: Dmitry Torokhov <dmitry.torokhov@gmail.com>
    Acked-by: Jiri Kosina <jkosina@suse.cz>

diff --git a/include/linux/hid.h b/include/linux/hid.h
index 387c70df6f29..a355d61940f2 100644
--- a/include/linux/hid.h
+++ b/include/linux/hid.h
@@ -1139,34 +1139,6 @@ static inline u32 hid_report_len(struct hid_report *report)
 int hid_report_raw_event(struct hid_device *hid, int type, u8 *data, u32 size,
 		int interrupt);
 
-
-/**
- * struct hid_scroll_counter - Utility class for processing high-resolution
- *                             scroll events.
- * @dev: the input device for which events should be reported.
- * @microns_per_hi_res_unit: the amount moved by the user's finger for each
- *                           high-resolution unit reported by the mouse, in
- *                           microns.
- * @resolution_multiplier: the wheel's resolution in high-resolution mode as a
- *                         multiple of its lower resolution. For example, if
- *                         moving the wheel by one "notch" would result in a
- *                         value of 1 in low-resolution mode but 8 in
- *                         high-resolution, the multiplier is 8.
- * @remainder: counts the number of high-resolution units moved since the last
- *             low-resolution event (REL_WHEEL or REL_HWHEEL) was sent. Should
- *             only be used by class methods.
- */
-struct hid_scroll_counter {
-	struct input_dev *dev;
-	int microns_per_hi_res_unit;
-	int resolution_multiplier;
-
-	int remainder;
-};
-
-void hid_scroll_counter_handle_scroll(struct hid_scroll_counter *counter,
-				      int hi_res_value);
-
 /* HID quirks API */
 unsigned long hid_lookup_quirk(const struct hid_device *hdev);
 int hid_quirks_init(char **quirks_param, __u16 bus, int count);

commit aa9b760cec2385ad408bb2e346c7f6dc1be69a79
Author: Linus Walleij <linus.walleij@linaro.org>
Date:   Sun Nov 4 11:32:47 2018 +0100

    HID: fix up .raw_event() documentation
    
    The documentation for the .raw_event() callback says that if the
    driver return 1, there will be no further processing of the event,
    but this is not true, the actual code in hid-core.c looks like this:
    
      if (hdrv && hdrv->raw_event && hid_match_report(hid, report)) {
               ret = hdrv->raw_event(hid, report, data, size);
               if (ret < 0)
                       goto unlock;
       }
    
       ret = hid_report_raw_event(hid, type, data, size, interrupt);
    
    The only return value that has any effect on the processing is
    a negative error.
    
    Correct this as it seems to confuse people: I found bogus code in
    the Razer out-of-tree driver attempting to return 1 here.
    
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>

diff --git a/include/linux/hid.h b/include/linux/hid.h
index 2827b87590d8..387c70df6f29 100644
--- a/include/linux/hid.h
+++ b/include/linux/hid.h
@@ -722,8 +722,8 @@ struct hid_usage_id {
  * input will not be passed to raw_event unless hid_device_io_start is
  * called.
  *
- * raw_event and event should return 0 on no action performed, 1 when no
- * further processing should be done and negative on error
+ * raw_event and event should return negative on error, any other value will
+ * pass the event on to .event() typically return 0 for success.
  *
  * input_mapping shall return a negative value to completely ignore this usage
  * (e.g. doubled or invalid usage), zero to continue with parsing of this

commit 276e722761a1c7903fbfb065420fd1850b00f1dd
Merge: 4e7be68e8d0f d9ca1c990a7f
Author: Jiri Kosina <jkosina@suse.cz>
Date:   Tue Oct 23 13:35:22 2018 +0200

    Merge branch 'for-4.20/logitech-highres' into for-linus
    
    High-resolution support for hid-logitech

commit 1ff2e1a44e02d4bdbb9be67c7d9acc240a67141f
Author: Harry Cutts <hcutts@chromium.org>
Date:   Thu Aug 30 14:56:19 2018 -0700

    HID: input: Create a utility class for counting scroll events
    
    To avoid code duplication, this class counts high-resolution scroll
    movements and emits the legacy low-resolution events when appropriate.
    Drivers should be able to create one instance for each scroll wheel that
    they need to handle.
    
    Signed-off-by: Harry Cutts <hcutts@chromium.org>
    Reviewed-by: Benjamin Tissoires <benjamin.tissoires@redhat.com>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>

diff --git a/include/linux/hid.h b/include/linux/hid.h
index 834e6461a690..037e37b0b0e6 100644
--- a/include/linux/hid.h
+++ b/include/linux/hid.h
@@ -1138,6 +1138,34 @@ static inline u32 hid_report_len(struct hid_report *report)
 int hid_report_raw_event(struct hid_device *hid, int type, u8 *data, u32 size,
 		int interrupt);
 
+
+/**
+ * struct hid_scroll_counter - Utility class for processing high-resolution
+ *                             scroll events.
+ * @dev: the input device for which events should be reported.
+ * @microns_per_hi_res_unit: the amount moved by the user's finger for each
+ *                           high-resolution unit reported by the mouse, in
+ *                           microns.
+ * @resolution_multiplier: the wheel's resolution in high-resolution mode as a
+ *                         multiple of its lower resolution. For example, if
+ *                         moving the wheel by one "notch" would result in a
+ *                         value of 1 in low-resolution mode but 8 in
+ *                         high-resolution, the multiplier is 8.
+ * @remainder: counts the number of high-resolution units moved since the last
+ *             low-resolution event (REL_WHEEL or REL_HWHEEL) was sent. Should
+ *             only be used by class methods.
+ */
+struct hid_scroll_counter {
+	struct input_dev *dev;
+	int microns_per_hi_res_unit;
+	int resolution_multiplier;
+
+	int remainder;
+};
+
+void hid_scroll_counter_handle_scroll(struct hid_scroll_counter *counter,
+				      int hi_res_value);
+
 /* HID quirks API */
 unsigned long hid_lookup_quirk(const struct hid_device *hdev);
 int hid_quirks_init(char **quirks_param, __u16 bus, int count);

commit 0d6c3011409135ea84e2a231b013a22017ff999a
Author: Benjamin Tissoires <benjamin.tissoires@redhat.com>
Date:   Tue Sep 4 15:31:14 2018 +0200

    HID: core: fix grouping by application
    
    commit f07b3c1da92d ("HID: generic: create one input report per
    application type") was effectively the same as MULTI_INPUT:
    hidinput->report was never set, so hidinput_match_application()
    always returned null.
    
    Fix that by testing against the real application.
    
    Note that this breaks some old eGalax touchscreens that expect MULTI_INPUT
    instead of HID_QUIRK_INPUT_PER_APP. Enable this quirk for backward
    compatibility on all non-Win8 touchscreens.
    
    link: https://bugzilla.kernel.org/show_bug.cgi?id=200847
    link: https://bugzilla.kernel.org/show_bug.cgi?id=200849
    link: https://bugs.archlinux.org/task/59699
    link: https://github.com/NixOS/nixpkgs/issues/45165
    
    Cc: stable@vger.kernel.org # v4.18+
    Signed-off-by: Benjamin Tissoires <benjamin.tissoires@redhat.com>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>

diff --git a/include/linux/hid.h b/include/linux/hid.h
index 834e6461a690..d44a78362942 100644
--- a/include/linux/hid.h
+++ b/include/linux/hid.h
@@ -526,6 +526,7 @@ struct hid_input {
 	const char *name;
 	bool registered;
 	struct list_head reports;	/* the list of reports */
+	unsigned int application;	/* application usage for this input */
 };
 
 enum hid_type {

commit 16501e846dd23f56a23330cd874cfbfaf60daf1a
Merge: f5dd80715ae1 28a042a3b7ab
Author: Jiri Kosina <jkosina@suse.cz>
Date:   Mon Aug 20 18:09:06 2018 +0200

    Merge branch 'for-4.19/multitouch-multiaxis' into for-linus
    
    Multitouch updates:
    
    - Dial support
    - Palm rejection for touchscreens
    - a few small assorted fixes

commit 1a8861f117608e269647fb09658ce77bd5899d42
Author: Daniel M. Lambea <dmlambea@gmail.com>
Date:   Tue Jul 17 22:35:36 2018 +0100

    HID: cougar: make compare_device_paths reusable
    
    The function compare_device_paths from wacom_sys.c is generic
    and useful for other drivers. Move the function to hid-core and
    rename it as hid_compare_device_paths.
    
    Signed-off-by: Daniel M. Lambea <dmlambea@gmail.com>
    Reviewed-by: Benjamin Tissoires <benjamin.tissoires@redhat.com>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>

diff --git a/include/linux/hid.h b/include/linux/hid.h
index 773bcb1d4044..938d9ba6d7cd 100644
--- a/include/linux/hid.h
+++ b/include/linux/hid.h
@@ -894,6 +894,8 @@ const struct hid_device_id *hid_match_id(const struct hid_device *hdev,
 					 const struct hid_device_id *id);
 const struct hid_device_id *hid_match_device(struct hid_device *hdev,
 					     struct hid_driver *hdrv);
+bool hid_compare_device_paths(struct hid_device *hdev_a,
+			      struct hid_device *hdev_b, char separator);
 s32 hid_snto32(__u32 value, unsigned n);
 __u32 hid_field_extract(const struct hid_device *hid, __u8 *report,
 		     unsigned offset, unsigned n);

commit 08a8a7cf14595f95d5cbb28ef5c15c56a6255fb4
Author: Benjamin Tissoires <benjamin.tissoires@redhat.com>
Date:   Fri Jul 13 16:13:50 2018 +0200

    HID: core: do not upper bound the collection stack
    
    Looks like 4 was sufficient until now. However, the Surface Dial needs
    a stack of 5 and simply fails at probing.
    Dynamically add HID_COLLECTION_STACK_SIZE to the size of the stack if
    we hit the upper bound.
    
    Checkpatch complains about bare unsigned, so converting those to
    'unsigned int' in struct hid_parser
    
    Acked-by: Peter Hutterer <peter.hutterer@who-t.net>
    Signed-off-by: Benjamin Tissoires <benjamin.tissoires@redhat.com>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>

diff --git a/include/linux/hid.h b/include/linux/hid.h
index 2e4498d52a2f..aee281522c6d 100644
--- a/include/linux/hid.h
+++ b/include/linux/hid.h
@@ -644,12 +644,13 @@ static inline void hid_set_drvdata(struct hid_device *hdev, void *data)
 struct hid_parser {
 	struct hid_global     global;
 	struct hid_global     global_stack[HID_GLOBAL_STACK_SIZE];
-	unsigned              global_stack_ptr;
+	unsigned int          global_stack_ptr;
 	struct hid_local      local;
-	unsigned              collection_stack[HID_COLLECTION_STACK_SIZE];
-	unsigned              collection_stack_ptr;
+	unsigned int         *collection_stack;
+	unsigned int          collection_stack_ptr;
+	unsigned int          collection_stack_size;
 	struct hid_device    *device;
-	unsigned              scan_flags;
+	unsigned int          scan_flags;
 };
 
 struct hid_class_descriptor {

commit ba6b055e0f3b4ff4942e4ab273260affcfad9bff
Author: Benjamin Tissoires <benjamin.tissoires@redhat.com>
Date:   Fri Jul 13 16:13:49 2018 +0200

    HID: input: enable Totem on the Dell Canvas 27
    
    The Dell Canvas 27 has a tool that can be put on the surface and acts
    as a dial. The firmware processes the detection of the tool and forward
    regular HID reports with X, Y, Azimuth, rotation, width/height.
    
    The firmware also exports Contact ID, Countact Count which may hint that
    several totems can be used at the same time (the FW only supports one).
    
    We can tell that MT_TOOL_DIAL will be reported by setting the min/max
    of ABS_MT_TOOL_TYPE to MT_TOOL_DIAL.
    
    This tool is aimed at being used by the system and not the applications,
    so the user space processing should not go through the regular touch
    inputs.
    We set INPUT_PROP_DIRECT which applies ID_INPUT_TOUCHSCREEN to this new
    type of devices, but we will counter this for the time being with the
    special udev hwdb entry mentioned above.
    
    Link: https://bugzilla.redhat.com/show_bug.cgi?id=1511846
    
    Acked-by: Peter Hutterer <peter.hutterer@who-t.net>
    Signed-off-by: Benjamin Tissoires <benjamin.tissoires@redhat.com>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>

diff --git a/include/linux/hid.h b/include/linux/hid.h
index 773bcb1d4044..2e4498d52a2f 100644
--- a/include/linux/hid.h
+++ b/include/linux/hid.h
@@ -190,6 +190,12 @@ struct hid_item {
  * http://www.usb.org/developers/hidpage/HUTRR40RadioHIDUsagesFinal.pdf
  */
 #define HID_GD_WIRELESS_RADIO_CTLS	0x0001000c
+/*
+ * System Multi-Axis, see:
+ * http://www.usb.org/developers/hidpage/HUTRR62_-_Generic_Desktop_CA_for_System_Multi-Axis_Controllers.txt
+ */
+#define HID_GD_SYSTEM_MULTIAXIS	0x0001000e
+
 #define HID_GD_X		0x00010030
 #define HID_GD_Y		0x00010031
 #define HID_GD_Z		0x00010032

commit 8f732850df1b2b4d8d719f7e606dfb3050e7ea11
Author: Benjamin Tissoires <benjamin.tissoires@redhat.com>
Date:   Thu May 31 13:49:29 2018 +0200

    HID: core: allow concurrent registration of drivers
    
    Detected on the Dell XPS 9365.
    
    The laptop has 2 devices that benefit from the hid-generic auto-unbinding.
    When those 2 devices are presented to the userspace, udev loads both wacom and
    hid-multitouch. When this happens, the code in __hid_bus_reprobe_drivers() is
    called concurrently and the second device gets reprobed twice.
    
    An other bug in the power_supply subsystem prevent to remove the wacom driver
    if it just finished its initialization, which basically kills the wacom node.
    
    [jkosina@suse.cz: reformat changelog a bit]
    Fixes c17a7476e4c4 ("HID: core: rewrite the hid-generic automatic unbind")
    Cc: stable@vger.kernel.org # v4.17
    Tested-by: Mario Limonciello <mario.limonciello@dell.com>
    Signed-off-by: Benjamin Tissoires <benjamin.tissoires@redhat.com>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>

diff --git a/include/linux/hid.h b/include/linux/hid.h
index 41a3d5775394..773bcb1d4044 100644
--- a/include/linux/hid.h
+++ b/include/linux/hid.h
@@ -511,6 +511,7 @@ struct hid_output_fifo {
 #define HID_STAT_ADDED		BIT(0)
 #define HID_STAT_PARSED		BIT(1)
 #define HID_STAT_DUP_DETECTED	BIT(2)
+#define HID_STAT_REPROBED	BIT(3)
 
 struct hid_input {
 	struct list_head list;
@@ -579,7 +580,7 @@ struct hid_device {							/* device report descriptor */
 	bool battery_avoid_query;
 #endif
 
-	unsigned int status;						/* see STAT flags above */
+	unsigned long status;						/* see STAT flags above */
 	unsigned claimed;						/* Claimed by hidinput, hiddev? */
 	unsigned quirks;						/* Various quirks the device can pull on us */
 	bool io_started;						/* If IO has started */

commit 25721aefe1d0b0d604d66fb5912fb383ce56c6ac
Merge: 72d0beb4d6d4 abb36fe691b2
Author: Jiri Kosina <jkosina@suse.cz>
Date:   Fri Jun 8 10:25:50 2018 +0200

    Merge branch 'for-4.18/multitouch' into for-linus
    
    - improvement of duplicate usage handling in hid-input from Benjamin Tissoires
    - Win 8.1 precisioun touchpad spec implementation from Benjamin Tissoires

commit c164d6abf3841ffacfdb757c10616f9cb1f67276
Author: Rodrigo Rivas Costa <rodrigorivascosta@gmail.com>
Date:   Mon Apr 16 14:27:02 2018 +0200

    HID: add driver for Valve Steam Controller
    
    There are two ways to connect the Steam Controller: directly to the USB
    or with the USB wireless adapter.  Both methods are similar, but the
    wireless adapter can connect up to 4 devices at the same time.
    
    The wired device will appear as 3 interfaces: a virtual mouse, a virtual
    keyboard and a custom HID device.
    
    The wireless device will appear as 5 interfaces: a virtual keyboard and
    4 custom HID devices, that will remain silent until a device is actually
    connected.
    
    The custom HID device has a report descriptor with all vendor specific
    usages, so the hid-generic is not very useful. In a PC/SteamBox Valve
    Steam Client provices a software translation by using hidraw and a
    creates a uinput virtual gamepad and XTest keyboard/mouse.
    
    This driver intercepts the hidraw usage, so it can get out of the way
    when the Steam Client is in use.
    
    Signed-off-by: Rodrigo Rivas Costa <rodrigorivascosta@gmail.com>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>

diff --git a/include/linux/hid.h b/include/linux/hid.h
index 26240a22978a..08d92bb005fd 100644
--- a/include/linux/hid.h
+++ b/include/linux/hid.h
@@ -367,6 +367,7 @@ struct hid_item {
 #define HID_GROUP_RMI				0x0100
 #define HID_GROUP_WACOM				0x0101
 #define HID_GROUP_LOGITECH_DJ_DEVICE		0x0102
+#define HID_GROUP_STEAM				0x0103
 
 /*
  * HID protocol status

commit 02946f4b43b11026b1a76857a33b09078b900939
Author: Benjamin Tissoires <benjamin.tissoires@redhat.com>
Date:   Tue Apr 24 10:04:37 2018 +0200

    HID: multitouch: implement precision touchpad latency and switches
    
    The Win 8.1 precision touchpad spec introduce new modes for touchpads
    that can come in handy[1].
    
    Implement the settings of these modes, so we are not taken off-guard if
    a firmware decides to enforce them.
    
    [1] https://docs.microsoft.com/en-us/windows-hardware/design/component-guidelines/windows-precision-touchpad-required-hid-top-level-collections
    
    Signed-off-by: Benjamin Tissoires <benjamin.tissoires@redhat.com>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>

diff --git a/include/linux/hid.h b/include/linux/hid.h
index f03d7a410c5d..a1be991e1eae 100644
--- a/include/linux/hid.h
+++ b/include/linux/hid.h
@@ -292,9 +292,12 @@ struct hid_item {
 #define HID_DG_CONTACTCOUNT	0x000d0054
 #define HID_DG_CONTACTMAX	0x000d0055
 #define HID_DG_SCANTIME		0x000d0056
+#define HID_DG_SURFACESWITCH	0x000d0057
+#define HID_DG_BUTTONSWITCH	0x000d0058
 #define HID_DG_BUTTONTYPE	0x000d0059
 #define HID_DG_BARRELSWITCH2	0x000d005a
 #define HID_DG_TOOLSERIALNUMBER	0x000d005b
+#define HID_DG_LATENCYMODE	0x000d0060
 
 #define HID_VD_ASUS_CUSTOM_MEDIA_KEYS	0xff310076
 /*

commit c554bb045511bd6b498b6a61cffa48e473853703
Author: Benjamin Tissoires <benjamin.tissoires@redhat.com>
Date:   Tue Apr 24 10:04:34 2018 +0200

    HID: input: append a suffix matching the application
    
    Given that we create one input node per application, we should name
    the input node accordingly to not lose userspace.
    
    Signed-off-by: Benjamin Tissoires <benjamin.tissoires@redhat.com>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>

diff --git a/include/linux/hid.h b/include/linux/hid.h
index bcc91bfdd2cb..f03d7a410c5d 100644
--- a/include/linux/hid.h
+++ b/include/linux/hid.h
@@ -512,6 +512,7 @@ struct hid_input {
 	struct list_head list;
 	struct hid_report *report;
 	struct input_dev *input;
+	const char *name;
 	bool registered;
 	struct list_head reports;	/* the list of reports */
 };

commit f07b3c1da92db108662f99417a212fc1eddc44d1
Author: Benjamin Tissoires <benjamin.tissoires@redhat.com>
Date:   Tue Apr 24 10:04:33 2018 +0200

    HID: generic: create one input report per application type
    
    It is not a good idea to try to fit all types of applications in the
    same input report. There are a lot of devices that are needing
    the quirk HID_MULTI_INPUT but this quirk doesn't match the actual HID
    description as it is based on the report ID.
    
    Given that most devices with MULTI_INPUT I can think of split nicely
    the devices inputs into application, it is a good thing to split the
    devices by default based on this assumption.
    
    Also make hid-multitouch following this rule, to not have to deal
    with too many input created.
    
    While we are at it, fix some checkpatch complaints about converting
    'unsigned' to 'unsigned int'.
    
    Signed-off-by: Benjamin Tissoires <benjamin.tissoires@redhat.com>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>

diff --git a/include/linux/hid.h b/include/linux/hid.h
index 396068ccc197..bcc91bfdd2cb 100644
--- a/include/linux/hid.h
+++ b/include/linux/hid.h
@@ -341,6 +341,7 @@ struct hid_item {
 /* BIT(8) reserved for backward compatibility, was HID_QUIRK_NO_EMPTY_INPUT */
 /* BIT(9) reserved for backward compatibility, was NO_INIT_INPUT_REPORTS */
 #define HID_QUIRK_ALWAYS_POLL			BIT(10)
+#define HID_QUIRK_INPUT_PER_APP			BIT(11)
 #define HID_QUIRK_SKIP_OUTPUT_REPORTS		BIT(16)
 #define HID_QUIRK_SKIP_OUTPUT_REPORT_ID		BIT(17)
 #define HID_QUIRK_NO_OUTPUT_REPORTS_ON_INTR_EP	BIT(18)
@@ -465,8 +466,9 @@ struct hid_field {
 struct hid_report {
 	struct list_head list;
 	struct list_head hidinput_list;
-	unsigned id;					/* id of this report */
-	unsigned type;					/* report type */
+	unsigned int id;				/* id of this report */
+	unsigned int type;				/* report type */
+	unsigned int application;			/* application usage for this report */
 	struct hid_field *field[HID_MAX_FIELDS];	/* fields of the report */
 	unsigned maxfield;				/* maximum valid field index */
 	unsigned size;					/* size of the report (bits) */
@@ -861,7 +863,9 @@ void hid_output_report(struct hid_report *report, __u8 *data);
 void __hid_request(struct hid_device *hid, struct hid_report *rep, int reqtype);
 u8 *hid_alloc_report_buf(struct hid_report *report, gfp_t flags);
 struct hid_device *hid_allocate_device(void);
-struct hid_report *hid_register_report(struct hid_device *device, unsigned type, unsigned id);
+struct hid_report *hid_register_report(struct hid_device *device,
+				       unsigned int type, unsigned int id,
+				       unsigned int application);
 int hid_parse_report(struct hid_device *hid, __u8 *start, unsigned size);
 struct hid_report *hid_validate_values(struct hid_device *hid,
 				       unsigned int type, unsigned int id,

commit e1b63c0148a7f8edf1691770ec0527fe86fb6ab8
Author: Benjamin Tissoires <benjamin.tissoires@redhat.com>
Date:   Tue Apr 24 10:04:32 2018 +0200

    HID: store the full list of reports in the hidinput
    
    We were only storing the report in case of QUIRK_MULTI_INPUT.
    It is interesting for the upcoming  HID_QUIRK_INPUT_PER_APP to also
    store the full list of reports that are attached to it.
    
    We need the full list because a device (Advanced Silicon has some)
    might want to use a different report ID for the Input reports and
    the Output reports. Storing the full list allows the drivers to
    have all the data.
    
    Signed-off-by: Benjamin Tissoires <benjamin.tissoires@redhat.com>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>

diff --git a/include/linux/hid.h b/include/linux/hid.h
index 0267aa5c1ea3..396068ccc197 100644
--- a/include/linux/hid.h
+++ b/include/linux/hid.h
@@ -464,6 +464,7 @@ struct hid_field {
 
 struct hid_report {
 	struct list_head list;
+	struct list_head hidinput_list;
 	unsigned id;					/* id of this report */
 	unsigned type;					/* report type */
 	struct hid_field *field[HID_MAX_FIELDS];	/* fields of the report */
@@ -510,6 +511,7 @@ struct hid_input {
 	struct hid_report *report;
 	struct input_dev *input;
 	bool registered;
+	struct list_head reports;	/* the list of reports */
 };
 
 enum hid_type {

commit 190d7f02ce8ef6774a69d3ec18c288c8a9601a4e
Author: Benjamin Tissoires <benjamin.tissoires@redhat.com>
Date:   Fri Dec 8 15:28:18 2017 +0100

    HID: input: do not increment usages when a duplicate is found
    
    This is something that bothered us from a long time. When hid-input
    doesn't know how to map a usage, it uses *_MISC. But there is something
    else which increments the usage if the evdev code is already used.
    
    This leads to few issues:
    - some devices may have their ABS_X mapped to ABS_Y if they export a bad
      set of usages (see the DragonRise joysticks IIRC -> fixed in a specific
      HID driver)
    - *_MISC + N might (will) conflict with other defined axes (my Logitech
      H800 exports some multitouch axes because of that)
    - this prevents to freely add some new evdev usages, because "hey, my
      headset will now report ABS_COFFEE, and it's not coffee capable".
    
    So let's try to kill this nonsense, and hope we won't break too many
    devices.
    
    I my headset case, the ABS_MISC axes are created because of some
    proprietary usages, so we might not break that many devices.
    
    For backward compatibility, a quirk HID_QUIRK_INCREMENT_USAGE_ON_DUPLICATE
    is created and can be applied to any device that needs this behavior.
    
    Signed-off-by: Benjamin Tissoires <benjamin.tissoires@redhat.com>
    Acked-by: Peter Hutterer <peter.hutterer@who-t.net>
    Acked-by: Dmitry Torokhov <dmitry.torokhov@gmail.com>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>

diff --git a/include/linux/hid.h b/include/linux/hid.h
index 8da3e1f48195..0267aa5c1ea3 100644
--- a/include/linux/hid.h
+++ b/include/linux/hid.h
@@ -345,6 +345,7 @@ struct hid_item {
 #define HID_QUIRK_SKIP_OUTPUT_REPORT_ID		BIT(17)
 #define HID_QUIRK_NO_OUTPUT_REPORTS_ON_INTR_EP	BIT(18)
 #define HID_QUIRK_HAVE_SPECIAL_DRIVER		BIT(19)
+#define HID_QUIRK_INCREMENT_USAGE_ON_DUPLICATE	BIT(20)
 #define HID_QUIRK_FULLSPEED_INTERVAL		BIT(28)
 #define HID_QUIRK_NO_INIT_REPORTS		BIT(29)
 #define HID_QUIRK_NO_IGNORE			BIT(30)
@@ -502,6 +503,7 @@ struct hid_output_fifo {
 
 #define HID_STAT_ADDED		BIT(0)
 #define HID_STAT_PARSED		BIT(1)
+#define HID_STAT_DUP_DETECTED	BIT(2)
 
 struct hid_input {
 	struct list_head list;

commit 2e210bbb7429cdcf1a1a3ad00c1bf98bd9bf2452
Author: Dmitry Torokhov <dmitry.torokhov@gmail.com>
Date:   Tue Apr 3 10:52:20 2018 -0700

    HID: input: fix battery level reporting on BT mice
    
    The commit 581c4484769e ("HID: input: map digitizer battery usage")
    assumed that devices having input (qas opposed to feature) report for
    battery strength would report the data on their own, without the need to
    be polled by the kernel; unfortunately it is not so. Many wireless mice
    do not send unsolicited reports with battery strength data and have to
    be polled explicitly. As a complication, stylus devices on digitizers
    are not normally connected to the base and thus can not be polled - the
    base can only determine battery strength in the stylus when it is in
    proximity.
    
    To solve this issue, we add a special flag that tells the kernel
    to avoid polling the device (and expect unsolicited reports) and set it
    when report field with physical usage of digitizer stylus (HID_DG_STYLUS).
    Unless this flag is set, and we have not seen the unsolicited reports,
    the kernel will attempt to poll the device when userspace attempts to
    read "capacity" and "state" attributes of power_supply object
    corresponding to the devices battery.
    
    Fixes: 581c4484769e ("HID: input: map digitizer battery usage")
    Bugzilla: https://bugzilla.kernel.org/show_bug.cgi?id=198095
    Cc: stable@vger.kernel.org
    Reported-and-tested-by: Martin van Es <martin@mrvanes.com>
    Signed-off-by: Dmitry Torokhov <dmitry.torokhov@gmail.com>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>

diff --git a/include/linux/hid.h b/include/linux/hid.h
index 8da3e1f48195..26240a22978a 100644
--- a/include/linux/hid.h
+++ b/include/linux/hid.h
@@ -516,6 +516,12 @@ enum hid_type {
 	HID_TYPE_USBNONE
 };
 
+enum hid_battery_status {
+	HID_BATTERY_UNKNOWN = 0,
+	HID_BATTERY_QUERIED,		/* Kernel explicitly queried battery strength */
+	HID_BATTERY_REPORTED,		/* Device sent unsolicited battery strength report */
+};
+
 struct hid_driver;
 struct hid_ll_driver;
 
@@ -558,7 +564,8 @@ struct hid_device {							/* device report descriptor */
 	__s32 battery_max;
 	__s32 battery_report_type;
 	__s32 battery_report_id;
-	bool battery_reported;
+	enum hid_battery_status battery_status;
+	bool battery_avoid_query;
 #endif
 
 	unsigned int status;						/* see STAT flags above */

commit e2d39e0f95cb414b1fb6530f8429ad411586922b
Merge: 108ff0e8012a 2ddc8e2d2b59
Author: Jiri Kosina <jkosina@suse.cz>
Date:   Thu Apr 5 13:28:46 2018 +0200

    Merge branch 'for-4.17/upstream' into for-linus
    
    Pull a few small generic code cleanups.

commit af73686e7bfe49fbbccc099995be8c78ce5bfe9a
Merge: f73fee743b5c 2904e68ff2ce
Author: Jiri Kosina <jkosina@suse.cz>
Date:   Thu Apr 5 13:19:57 2018 +0200

    Merge branch 'for-4.17/multitouch' into for-linus
    
    Pull Razer Blade Stealth support improvement and a few generic cleanups

commit 39335d1cbb8fb3260ac5f18fbcc45beb690e5ebd
Author: Benjamin Tissoires <benjamin.tissoires@redhat.com>
Date:   Tue Mar 20 12:04:49 2018 +0100

    HID: core: remove the need for HID_QUIRK_NO_EMPTY_INPUT
    
    There is no real point of registering an empty input node.
    This should be default, but given some drivers need the blank input
    node to set it up during input_configured, we need to postpone
    the check for hidinput_has_been_populated().
    
    Signed-off-by: Benjamin Tissoires <benjamin.tissoires@redhat.com>
    Acked-by: Peter Hutterer <peter.hutterer@who-t.net>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>

diff --git a/include/linux/hid.h b/include/linux/hid.h
index bc92005e5f08..b0db16fa7093 100644
--- a/include/linux/hid.h
+++ b/include/linux/hid.h
@@ -338,7 +338,7 @@ struct hid_item {
 #define HID_QUIRK_BADPAD			BIT(5)
 #define HID_QUIRK_MULTI_INPUT			BIT(6)
 #define HID_QUIRK_HIDINPUT_FORCE		BIT(7)
-#define HID_QUIRK_NO_EMPTY_INPUT		BIT(8)
+/* BIT(8) reserved for backward compatibility, was HID_QUIRK_NO_EMPTY_INPUT */
 /* BIT(9) reserved for backward compatibility, was NO_INIT_INPUT_REPORTS */
 #define HID_QUIRK_ALWAYS_POLL			BIT(10)
 #define HID_QUIRK_SKIP_OUTPUT_REPORTS		BIT(16)

commit c30e5989d6926c5c1c77c87ed1e54f506e095d74
Author: Benjamin Tissoires <benjamin.tissoires@redhat.com>
Date:   Tue Mar 20 12:04:48 2018 +0100

    HID: use BIT() macro for quirks too
    
    This should prevent future mess ups fortunately.
    
    Signed-off-by: Benjamin Tissoires <benjamin.tissoires@redhat.com>
    Acked-by: Peter Hutterer <peter.hutterer@who-t.net>
    --
     include/linux/hid.h | 52 ++++++++++++++++++++++++++--------------------------
     1 file changed, 26 insertions(+), 26 deletions(-)
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>

diff --git a/include/linux/hid.h b/include/linux/hid.h
index d104f2ebc809..bc92005e5f08 100644
--- a/include/linux/hid.h
+++ b/include/linux/hid.h
@@ -311,13 +311,13 @@ struct hid_item {
  * HID connect requests
  */
 
-#define HID_CONNECT_HIDINPUT		0x01
-#define HID_CONNECT_HIDINPUT_FORCE	0x02
-#define HID_CONNECT_HIDRAW		0x04
-#define HID_CONNECT_HIDDEV		0x08
-#define HID_CONNECT_HIDDEV_FORCE	0x10
-#define HID_CONNECT_FF			0x20
-#define HID_CONNECT_DRIVER		0x40
+#define HID_CONNECT_HIDINPUT		BIT(0)
+#define HID_CONNECT_HIDINPUT_FORCE	BIT(1)
+#define HID_CONNECT_HIDRAW		BIT(2)
+#define HID_CONNECT_HIDDEV		BIT(3)
+#define HID_CONNECT_HIDDEV_FORCE	BIT(4)
+#define HID_CONNECT_FF			BIT(5)
+#define HID_CONNECT_DRIVER		BIT(6)
 #define HID_CONNECT_DEFAULT	(HID_CONNECT_HIDINPUT|HID_CONNECT_HIDRAW| \
 		HID_CONNECT_HIDDEV|HID_CONNECT_FF)
 
@@ -330,25 +330,25 @@ struct hid_item {
  */
 #define MAX_USBHID_BOOT_QUIRKS 4
 
-#define HID_QUIRK_INVERT			0x00000001
-#define HID_QUIRK_NOTOUCH			0x00000002
-#define HID_QUIRK_IGNORE			0x00000004
-#define HID_QUIRK_NOGET				0x00000008
-#define HID_QUIRK_HIDDEV_FORCE			0x00000010
-#define HID_QUIRK_BADPAD			0x00000020
-#define HID_QUIRK_MULTI_INPUT			0x00000040
-#define HID_QUIRK_HIDINPUT_FORCE		0x00000080
-#define HID_QUIRK_NO_EMPTY_INPUT		0x00000100
-/* 0x00000200 reserved for backward compatibility, was NO_INIT_INPUT_REPORTS */
-#define HID_QUIRK_ALWAYS_POLL			0x00000400
-#define HID_QUIRK_SKIP_OUTPUT_REPORTS		0x00010000
-#define HID_QUIRK_SKIP_OUTPUT_REPORT_ID		0x00020000
-#define HID_QUIRK_NO_OUTPUT_REPORTS_ON_INTR_EP	0x00040000
-#define HID_QUIRK_HAVE_SPECIAL_DRIVER		0x00080000
-#define HID_QUIRK_FULLSPEED_INTERVAL		0x10000000
-#define HID_QUIRK_NO_INIT_REPORTS		0x20000000
-#define HID_QUIRK_NO_IGNORE			0x40000000
-#define HID_QUIRK_NO_INPUT_SYNC			0x80000000
+#define HID_QUIRK_INVERT			BIT(0)
+#define HID_QUIRK_NOTOUCH			BIT(1)
+#define HID_QUIRK_IGNORE			BIT(2)
+#define HID_QUIRK_NOGET				BIT(3)
+#define HID_QUIRK_HIDDEV_FORCE			BIT(4)
+#define HID_QUIRK_BADPAD			BIT(5)
+#define HID_QUIRK_MULTI_INPUT			BIT(6)
+#define HID_QUIRK_HIDINPUT_FORCE		BIT(7)
+#define HID_QUIRK_NO_EMPTY_INPUT		BIT(8)
+/* BIT(9) reserved for backward compatibility, was NO_INIT_INPUT_REPORTS */
+#define HID_QUIRK_ALWAYS_POLL			BIT(10)
+#define HID_QUIRK_SKIP_OUTPUT_REPORTS		BIT(16)
+#define HID_QUIRK_SKIP_OUTPUT_REPORT_ID		BIT(17)
+#define HID_QUIRK_NO_OUTPUT_REPORTS_ON_INTR_EP	BIT(18)
+#define HID_QUIRK_HAVE_SPECIAL_DRIVER		BIT(19)
+#define HID_QUIRK_FULLSPEED_INTERVAL		BIT(28)
+#define HID_QUIRK_NO_INIT_REPORTS		BIT(29)
+#define HID_QUIRK_NO_IGNORE			BIT(30)
+#define HID_QUIRK_NO_INPUT_SYNC			BIT(31)
 
 /*
  * HID device groups

commit 1c6ef16d38091a1820e98df25900b5977e404bbd
Author: Benjamin Tissoires <benjamin.tissoires@redhat.com>
Date:   Tue Mar 20 12:04:47 2018 +0100

    HID: use BIT macro instead of plain integers for flags
    
    This can lead to some hairy situation with the developer losing
    a day or two realizing that 4 should be after 2, not 3.
    
    Signed-off-by: Benjamin Tissoires <benjamin.tissoires@redhat.com>
    Reviewed-by: Dmitry Torokhov <dmitry.torokhov@gmail.com>
    Acked-by: Peter Hutterer <peter.hutterer@who-t.net>
    --
     include/linux/hid.h | 13 +++++++------
     1 file changed, 7 insertions(+), 6 deletions(-)
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>

diff --git a/include/linux/hid.h b/include/linux/hid.h
index 091a81cf330f..d104f2ebc809 100644
--- a/include/linux/hid.h
+++ b/include/linux/hid.h
@@ -26,6 +26,7 @@
 #define __HID_H
 
 
+#include <linux/bitops.h>
 #include <linux/types.h>
 #include <linux/slab.h>
 #include <linux/list.h>
@@ -494,13 +495,13 @@ struct hid_output_fifo {
 	char *raw_report;
 };
 
-#define HID_CLAIMED_INPUT	1
-#define HID_CLAIMED_HIDDEV	2
-#define HID_CLAIMED_HIDRAW	4
-#define HID_CLAIMED_DRIVER	8
+#define HID_CLAIMED_INPUT	BIT(0)
+#define HID_CLAIMED_HIDDEV	BIT(1)
+#define HID_CLAIMED_HIDRAW	BIT(2)
+#define HID_CLAIMED_DRIVER	BIT(3)
 
-#define HID_STAT_ADDED		1
-#define HID_STAT_PARSED		2
+#define HID_STAT_ADDED		BIT(0)
+#define HID_STAT_PARSED		BIT(1)
 
 struct hid_input {
 	struct list_head list;

commit c17a7476e4c41884d82e3675c25ceae982c07a63
Author: Benjamin Tissoires <benjamin.tissoires@redhat.com>
Date:   Fri Dec 8 15:29:44 2017 +0100

    HID: core: rewrite the hid-generic automatic unbind
    
    We actually can have the unbind/rebind logic in hid-core.c, leaving
    only the match function in hid-generic.
    
    This makes hid-generic simpler and the whole logic simpler too.
    
    Signed-off-by: Benjamin Tissoires <benjamin.tissoires@redhat.com>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>

diff --git a/include/linux/hid.h b/include/linux/hid.h
index 091a81cf330f..a62ee4a609ac 100644
--- a/include/linux/hid.h
+++ b/include/linux/hid.h
@@ -686,8 +686,6 @@ struct hid_usage_id {
  * @input_mapped: invoked on input registering after mapping an usage
  * @input_configured: invoked just before the device is registered
  * @feature_mapping: invoked on feature registering
- * @bus_add_driver: invoked when a HID driver is about to be added
- * @bus_removed_driver: invoked when a HID driver has been removed
  * @suspend: invoked on suspend (NULL means nop)
  * @resume: invoked on resume if device was not reset (NULL means nop)
  * @reset_resume: invoked on resume if device was reset (NULL means nop)
@@ -742,8 +740,6 @@ struct hid_driver {
 	void (*feature_mapping)(struct hid_device *hdev,
 			struct hid_field *field,
 			struct hid_usage *usage);
-	void (*bus_add_driver)(struct hid_driver *driver);
-	void (*bus_removed_driver)(struct hid_driver *driver);
 #ifdef CONFIG_PM
 	int (*suspend)(struct hid_device *hdev, pm_message_t message);
 	int (*resume)(struct hid_device *hdev);

commit 6de0b13cc0b4ba10e98a9263d7a83b940720b77a
Author: Aaron Ma <aaron.ma@canonical.com>
Date:   Mon Jan 8 10:41:41 2018 +0800

    HID: core: Fix size as type u32
    
    When size is negative, calling memset will make segment fault.
    Declare the size as type u32 to keep memset safe.
    
    size in struct hid_report is unsigned, fix return type of
    hid_report_len to u32.
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Aaron Ma <aaron.ma@canonical.com>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>

diff --git a/include/linux/hid.h b/include/linux/hid.h
index 091a81cf330f..0efe80b59156 100644
--- a/include/linux/hid.h
+++ b/include/linux/hid.h
@@ -851,7 +851,7 @@ extern int hidinput_connect(struct hid_device *hid, unsigned int force);
 extern void hidinput_disconnect(struct hid_device *);
 
 int hid_set_field(struct hid_field *, unsigned, __s32);
-int hid_input_report(struct hid_device *, int type, u8 *, int, int);
+int hid_input_report(struct hid_device *, int type, u8 *, u32, int);
 int hidinput_find_field(struct hid_device *hid, unsigned int type, unsigned int code, struct hid_field **field);
 struct hid_field *hidinput_get_led_field(struct hid_device *hid);
 unsigned int hidinput_count_leds(struct hid_device *hid);
@@ -1102,13 +1102,13 @@ static inline void hid_hw_wait(struct hid_device *hdev)
  *
  * @report: the report we want to know the length
  */
-static inline int hid_report_len(struct hid_report *report)
+static inline u32 hid_report_len(struct hid_report *report)
 {
 	/* equivalent to DIV_ROUND_UP(report->size, 8) + !!(report->id > 0) */
 	return ((report->size - 1) >> 3) + 1 + (report->id > 0);
 }
 
-int hid_report_raw_event(struct hid_device *hid, int type, u8 *data, int size,
+int hid_report_raw_event(struct hid_device *hid, int type, u8 *data, u32 size,
 		int interrupt);
 
 /* HID quirks API */

commit 00720277a517e6dcc4773fb413711fe0131ee9bd
Author: Wei-Ning Huang <wnhuang@chromium.org>
Date:   Thu Oct 12 14:21:43 2017 +0800

    HID: hid-multitouch: support fine-grain orientation reporting
    
    The current hid-multitouch driver only allow the report of two
    orientations, vertical and horizontal. We use the Azimuth orientation
    usage 0x3F under the Digitizer usage page to report orientation if the
    device supports it.
    
    Changelog:
      v1 -> v2:
       - Fix commit message.
       - Remove resolution reporting for ABS_MT_ORIENTATION.
      v2 -> v3:
       - Fix commit message.
      v3 -> v4:
       - Fix ABS_MT_ORIENTATION ABS param range.
       - Don't set ABS_MT_ORIENTATION in ABS_DG_HEIGHT when it is already
         set by ABS_DG_AZIMUTH.
      v4 -> v5:
       - Improve multi-touch-protocol.rst documentation.
    
    Signed-off-by: Wei-Ning Huang <wnhuang@chromium.org>
    Signed-off-by: Wei-Ning Huang <wnhuang@google.com>
    Reviewed-by: Dmitry Torokhov <dtor@chromium.org>
    Reviewed-by: Henrik Rydberg <rydberg@bitmath.org>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>

diff --git a/include/linux/hid.h b/include/linux/hid.h
index 39cdeb205caa..091a81cf330f 100644
--- a/include/linux/hid.h
+++ b/include/linux/hid.h
@@ -281,6 +281,7 @@ struct hid_item {
 
 #define HID_DG_DEVICECONFIG	0x000d000e
 #define HID_DG_DEVICESETTINGS	0x000d0023
+#define HID_DG_AZIMUTH		0x000d003f
 #define HID_DG_CONFIDENCE	0x000d0047
 #define HID_DG_WIDTH		0x000d0048
 #define HID_DG_HEIGHT		0x000d0049

commit e04a0442d33b8cf183bba38646447b891bb02123
Author: Benjamin Tissoires <benjamin.tissoires@redhat.com>
Date:   Mon Nov 20 11:48:44 2017 +0100

    HID: core: remove the absolute need of hid_have_special_driver[]
    
    Most HID devices behave properly when they are used with hid-generic.
    Since kernel v4.12, we do not poll for input reports at plug in, so
    hid-generic should behave properly with all HID devices.
    
    There has been a long standing list of HID devices that have a special
    driver. It used to be just a few, but with time, this list went too big,
    and we can not ask users to know which HID special driver will pick up
    their device.
    
    We can teach hid-generic to be nice with others. If a device is not
    explicitly marked with HID_QUIRK_HAVE_SPECIAL_DRIVER, we can allow
    hid-generic to pick up the device as long as no other loaded HID driver
    will match the device.
    
    When the special driver appears, hid-generic can step back and let
    the special driver handling the device. In case this special driver
    is removed, this good old pal of hid-generic will rebind to the device.
    
    This basically makes the list hid_have_special_driver[] useless. It
    still allows to not see a hid-generic driver bound and removed during
    boot, so we can keep it around.
    
    This will also help other people to have a special HID driver without
    the need of recompiling hid-core.
    
    Signed-off-by: Benjamin Tissoires <benjamin.tissoires@redhat.com>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>

diff --git a/include/linux/hid.h b/include/linux/hid.h
index 83df331576a5..39cdeb205caa 100644
--- a/include/linux/hid.h
+++ b/include/linux/hid.h
@@ -672,6 +672,7 @@ struct hid_usage_id {
  * 	      to be called)
  * @dyn_list: list of dynamically added device ids
  * @dyn_lock: lock protecting @dyn_list
+ * @match: check if the given device is handled by this driver
  * @probe: new device inserted
  * @remove: device removed (NULL if not a hot-plug capable driver)
  * @report_table: on which reports to call raw_event (NULL means all)
@@ -684,6 +685,8 @@ struct hid_usage_id {
  * @input_mapped: invoked on input registering after mapping an usage
  * @input_configured: invoked just before the device is registered
  * @feature_mapping: invoked on feature registering
+ * @bus_add_driver: invoked when a HID driver is about to be added
+ * @bus_removed_driver: invoked when a HID driver has been removed
  * @suspend: invoked on suspend (NULL means nop)
  * @resume: invoked on resume if device was not reset (NULL means nop)
  * @reset_resume: invoked on resume if device was reset (NULL means nop)
@@ -712,6 +715,7 @@ struct hid_driver {
 	struct list_head dyn_list;
 	spinlock_t dyn_lock;
 
+	bool (*match)(struct hid_device *dev, bool ignore_special_driver);
 	int (*probe)(struct hid_device *dev, const struct hid_device_id *id);
 	void (*remove)(struct hid_device *dev);
 
@@ -737,6 +741,8 @@ struct hid_driver {
 	void (*feature_mapping)(struct hid_device *hdev,
 			struct hid_field *field,
 			struct hid_usage *usage);
+	void (*bus_add_driver)(struct hid_driver *driver);
+	void (*bus_removed_driver)(struct hid_driver *driver);
 #ifdef CONFIG_PM
 	int (*suspend)(struct hid_device *hdev, pm_message_t message);
 	int (*resume)(struct hid_device *hdev);
@@ -815,6 +821,8 @@ extern bool hid_ignore(struct hid_device *);
 extern int hid_add_device(struct hid_device *);
 extern void hid_destroy_device(struct hid_device *);
 
+extern struct bus_type hid_bus_type;
+
 extern int __must_check __hid_register_driver(struct hid_driver *,
 		struct module *, const char *mod_name);
 
@@ -865,6 +873,8 @@ bool hid_match_one_id(const struct hid_device *hdev,
 		      const struct hid_device_id *id);
 const struct hid_device_id *hid_match_id(const struct hid_device *hdev,
 					 const struct hid_device_id *id);
+const struct hid_device_id *hid_match_device(struct hid_device *hdev,
+					     struct hid_driver *hdrv);
 s32 hid_snto32(__u32 value, unsigned n);
 __u32 hid_field_extract(const struct hid_device *hid, __u8 *report,
 		     unsigned offset, unsigned n);

commit 6e65d9d5492f370dd0e5418bdd38265b2ca74f88
Author: Benjamin Tissoires <benjamin.tissoires@redhat.com>
Date:   Mon Nov 20 11:48:42 2017 +0100

    HID: quirks: move the list of special devices into a quirk
    
    It is better to centralize the information of special devices in one
    single file. Instead of manually parsing the list of devices that
    have a special driver or those that need to be ignored, introduce
    HID_QUIRK_HAVE_SPECIAL_DRIVER and set the correct quirks while fetching
    those quirks.
    
    Signed-off-by: Benjamin Tissoires <benjamin.tissoires@redhat.com>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>

diff --git a/include/linux/hid.h b/include/linux/hid.h
index 129a0d71e06a..83df331576a5 100644
--- a/include/linux/hid.h
+++ b/include/linux/hid.h
@@ -342,6 +342,7 @@ struct hid_item {
 #define HID_QUIRK_SKIP_OUTPUT_REPORTS		0x00010000
 #define HID_QUIRK_SKIP_OUTPUT_REPORT_ID		0x00020000
 #define HID_QUIRK_NO_OUTPUT_REPORTS_ON_INTR_EP	0x00040000
+#define HID_QUIRK_HAVE_SPECIAL_DRIVER		0x00080000
 #define HID_QUIRK_FULLSPEED_INTERVAL		0x10000000
 #define HID_QUIRK_NO_INIT_REPORTS		0x20000000
 #define HID_QUIRK_NO_IGNORE			0x40000000

commit d5d3e202753cc023100a854788a4ad83d7c2821a
Author: Benjamin Tissoires <benjamin.tissoires@redhat.com>
Date:   Mon Nov 20 11:48:41 2017 +0100

    HID: core: move the dynamic quirks handling in core
    
    usbhid has a list of dynamic quirks in addition to a list of static quirks.
    There is not much USB specific in that, so move this part of the module
    in core so we can have one central place for quirks.
    
    Signed-off-by: Benjamin Tissoires <benjamin.tissoires@redhat.com>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>

diff --git a/include/linux/hid.h b/include/linux/hid.h
index d491027a7c22..129a0d71e06a 100644
--- a/include/linux/hid.h
+++ b/include/linux/hid.h
@@ -860,7 +860,9 @@ int hid_open_report(struct hid_device *device);
 int hid_check_keys_pressed(struct hid_device *hid);
 int hid_connect(struct hid_device *hid, unsigned int connect_mask);
 void hid_disconnect(struct hid_device *hid);
-const struct hid_device_id *hid_match_id(struct hid_device *hdev,
+bool hid_match_one_id(const struct hid_device *hdev,
+		      const struct hid_device_id *id);
+const struct hid_device_id *hid_match_id(const struct hid_device *hdev,
 					 const struct hid_device_id *id);
 s32 hid_snto32(__u32 value, unsigned n);
 __u32 hid_field_extract(const struct hid_device *hid, __u8 *report,
@@ -1098,9 +1100,9 @@ int hid_report_raw_event(struct hid_device *hid, int type, u8 *data, int size,
 		int interrupt);
 
 /* HID quirks API */
-u32 usbhid_lookup_quirk(const u16 idVendor, const u16 idProduct);
-int usbhid_quirks_init(char **quirks_param);
-void usbhid_quirks_exit(void);
+unsigned long hid_lookup_quirk(const struct hid_device *hdev);
+int hid_quirks_init(char **quirks_param, __u16 bus, int count);
+void hid_quirks_exit(__u16 bus);
 
 #ifdef CONFIG_HID_PID
 int hid_pidff_init(struct hid_device *hid);

commit 6ed7a70be54ef6148cbfce0d59d12d2aa41bbb23
Merge: b50b9d3d21e0 7da85fbf1c87
Author: Jiri Kosina <jkosina@suse.cz>
Date:   Wed Nov 15 11:10:38 2017 +0100

    Merge branch 'for-4.15/upstream' into for-linus
    
    - cp2112: GPIO error handling and Kconfig fixes from Sébastien Szymanski
    - i2c-hid: fixup / quirk for Apollo-Lake based laptops, from Hans de Goede
    - Input/Core: add eraser tool support, from Ping Cheng
    - small assorted code fixes
    
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>

commit 29cc309d8bf19a36c5196bf626662319af6e3c0b
Author: Nicolas Boichat <drinkcat@chromium.org>
Date:   Tue Aug 22 09:10:11 2017 +0800

    HID: hid-multitouch: forward MSC_TIMESTAMP
    
    Computes and forwards the device timestamp according to the specification.
    
    Many devices use a 16-bit timestamp field, with a resolution of 100us,
    therefore rolling around very frequently (every 6.5 seconds). To make sure
    there is no ambiguity, the timestamp reported to the input stack reset to
    0 whenever the time between 2 received events is greater than
    MAX_TIMESTAMP_INTERVAL (1 second).
    
    Signed-off-by: Nicolas Boichat <drinkcat@chromium.org>
    Acked-by: Benjamin Tissoires <benjamin.tissoires@redhat.com>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>

diff --git a/include/linux/hid.h b/include/linux/hid.h
index ab05a86269dc..47dd962d9a7a 100644
--- a/include/linux/hid.h
+++ b/include/linux/hid.h
@@ -289,6 +289,7 @@ struct hid_item {
 #define HID_DG_DEVICEINDEX	0x000d0053
 #define HID_DG_CONTACTCOUNT	0x000d0054
 #define HID_DG_CONTACTMAX	0x000d0055
+#define HID_DG_SCANTIME		0x000d0056
 #define HID_DG_BUTTONTYPE	0x000d0059
 #define HID_DG_BARRELSWITCH2	0x000d005a
 #define HID_DG_TOOLSERIALNUMBER	0x000d005b

commit 4f210c2938053e894ee00500dd0661f7a27a6ff4
Author: Jaejoong Kim <climbbb.kim@gmail.com>
Date:   Wed Sep 20 18:40:36 2017 +0900

    HID: add comment for power callback in struct hid_ll_driver
    
    There is a missing comment in struct hid_ll_driver. So, add it.
    
    Signed-off-by: Jaejoong Kim <climbbb.kim@gmail.com>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>

diff --git a/include/linux/hid.h b/include/linux/hid.h
index ab05a86269dc..7c3d4a17bbde 100644
--- a/include/linux/hid.h
+++ b/include/linux/hid.h
@@ -753,6 +753,7 @@ struct hid_driver {
  * @stop: called on remove
  * @open: called by input layer on open
  * @close: called by input layer on close
+ * @power: request underlying hardware to enter requested power mode
  * @parse: this method is called only once to parse the device data,
  *	   shouldn't allocate anything to not leak memory
  * @request: send report request to device (e.g. feature report)

commit b42a362e6d10c342004b183defcb9940331b6737
Merge: 70b8e9eb3b50 de6c5070ad39
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Tue Sep 5 11:54:41 2017 -0700

    Merge branch 'for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/jikos/hid
    
    Pull HID update from Jiri Kosina:
    
     - Wacom driver fixes/updates (device name generation improvements,
       touch ring status support) from Jason Gerecke
    
     - T100 touchpad support from Hans de Goede
    
     - support for batteries driven by HID input reports, from Dmitry
       Torokhov
    
     - Arnd pointed out that driver_lock semaphore is superfluous, as driver
       core already provides all the necessary concurency protection.
       Removal patch from Binoy Jayan
    
     - logical minimum numbering improvements in sensor-hub driver, from
       Srinivas Pandruvada
    
     - support for Microsoft Win8 Wireless Radio Controls extensions from
       João Paulo Rechi Vita
    
     - assorted small fixes and device ID additions
    
    * 'for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/jikos/hid: (28 commits)
      HID: prodikeys: constify snd_rawmidi_ops structures
      HID: sensor: constify platform_device_id
      HID: input: throttle battery uevents
      HID: usbmouse: constify usb_device_id and fix space before '[' error
      HID: usbkbd: constify usb_device_id and fix space before '[' error.
      HID: hid-sensor-hub: Force logical minimum to 1 for power and report state
      HID: wacom: Do not completely map WACOM_HID_WD_TOUCHRINGSTATUS usage
      HID: asus: Add T100CHI bluetooth keyboard dock touchpad support
      HID: ntrig: constify attribute_group structures.
      HID: logitech-hidpp: constify attribute_group structures.
      HID: sensor: constify attribute_group structures.
      HID: multitouch: constify attribute_group structures.
      HID: multitouch: use proper symbolic constant for 0xff310076 application
      HID: multitouch: Support Asus T304UA media keys
      HID: multitouch: Support HID_GD_WIRELESS_RADIO_CTLS
      HID: input: optionally use device id in battery name
      HID: input: map digitizer battery usage
      HID: Remove the semaphore driver_lock
      HID: wacom: add USB_HID dependency
      HID: add ALWAYS_POLL quirk for Logitech 0xc077
      ...

commit de6c5070ad3956125fe8d407381c1b18f9749f93
Merge: 5c891d5e094c 9d14201c7444
Author: Jiri Kosina <jkosina@suse.cz>
Date:   Tue Sep 5 11:14:10 2017 +0200

    Merge branch 'for-4.14/wacom' into for-linus
    
    - name generation improvement for Wacom devices from Jason Gerecke
    - Kconfig dependency fix for Wacom driver from Arnd Bergmann

commit 38e50c9ba84ad755247220ce6a881fbdb44aaeec
Merge: d29ed11bb728 39bbf40227bc
Author: Jiri Kosina <jkosina@suse.cz>
Date:   Tue Sep 5 11:11:52 2017 +0200

    Merge branch 'for-4.14/multitouch' into for-linus
    
    - support for media keys on Asus T304UA from João Paulo Rechi Vita
    - support for Microsoft Win8 Wireless Radio Controls extensions
      from João Paulo Rechi Vita
    
    Conflicts:
            drivers/hid/hid-ids.h
    
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>

commit 2682b892368bf304e7ecddd9ac68045db516a009
Merge: aaf4f13c456f 6f68f0ac7208
Author: Jiri Kosina <jkosina@suse.cz>
Date:   Tue Sep 5 11:08:52 2017 +0200

    Merge branch 'for-4.14/driver-lock-removal' into for-linus
    
    - Arnd pointed out that driver_lock semaphore is superfluous, as
      driver core already provides all the necessary concurency protection.
      Removal patch from Binoy Jayan

commit b3c4ec71ec413c2e5bfb028bdf1737af07f1fde0
Author: Abdulhadi Mohamed <abdulahhadi2@gmail.com>
Date:   Wed Jul 19 16:31:10 2017 +0100

    usb: gadget: f_hid: {GET,SET} PROTOCOL Support
    
    The current f_hid driver doesn't handle GET_PROCOTOL and
    SET_PROCOTOL requests, which are required to operate HID
    gadgets in BOOT mode. This patch implements this feature for
    devices that have the same implementation for REPORT and BOOT mode
    so that these devices are recognized by older BIOSes.
    
    Signed-off-by: Abdulhadi Mohamed <abdulahhadi2@gmail.com>
    Signed-off-by: Felipe Balbi <felipe.balbi@linux.intel.com>

diff --git a/include/linux/hid.h b/include/linux/hid.h
index 5006f9b5d837..6519cdc4c7d3 100644
--- a/include/linux/hid.h
+++ b/include/linux/hid.h
@@ -362,6 +362,12 @@ struct hid_item {
 #define HID_GROUP_WACOM				0x0101
 #define HID_GROUP_LOGITECH_DJ_DEVICE		0x0102
 
+/*
+ * HID protocol status
+ */
+#define HID_REPORT_PROTOCOL	1
+#define HID_BOOT_PROTOCOL	0
+
 /*
  * This is the global environment of the parser. This information is
  * persistent for main-items. The global environment can be saved and

commit 957b8dffa4e3d191f0f1571d006d0e520790dcb9
Author: João Paulo Rechi Vita <jprvita@gmail.com>
Date:   Mon Jul 24 14:22:25 2017 -0700

    HID: multitouch: Support Asus T304UA media keys
    
    The Asus T304UA convertible sports a magnetic detachable keyboard with
    touchpad, which is connected over USB. Most of the keyboard hotkeys are
    exposed through the same USB interface as the touchpad, defined in the
    report descriptor as follows:
    
    0x06, 0x31, 0xFF,  // Usage Page (Vendor Defined 0xFF31)
    0x09, 0x76,        // Usage (0x76)
    0xA1, 0x01,        // Collection (Application)
    0x05, 0xFF,        //   Usage Page (Reserved 0xFF)
    0x85, 0x5A,        //   Report ID (90)
    0x19, 0x00,        //   Usage Minimum (0x00)
    0x2A, 0xFF, 0x00,  //   Usage Maximum (0xFF)
    0x15, 0x00,        //   Logical Minimum (0)
    0x26, 0xFF, 0x00,  //   Logical Maximum (255)
    0x75, 0x08,        //   Report Size (8)
    0x95, 0x0F,        //   Report Count (15)
    0xB1, 0x02,        //   Feature (Data,Var,Abs,No Wrap,Linear,Preferred State,No Null Position,Non-volatile)
    0x05, 0xFF,        //   Usage Page (Reserved 0xFF)
    0x85, 0x5A,        //   Report ID (90)
    0x19, 0x00,        //   Usage Minimum (0x00)
    0x2A, 0xFF, 0x00,  //   Usage Maximum (0xFF)
    0x15, 0x00,        //   Logical Minimum (0)
    0x26, 0xFF, 0x00,  //   Logical Maximum (255)
    0x75, 0x08,        //   Report Size (8)
    0x95, 0x02,        //   Report Count (2)
    0x81, 0x02,        //   Input (Data,Var,Abs,No Wrap,Linear,Preferred State,No Null Position)
    0xC0,              // End Collection
    
    This UsagePage is declared as a variable, but we need to treat it as an
    array to be able to map each Usage we care about to its corresponding
    input key.
    
    Signed-off-by: João Paulo Rechi Vita <jprvita@endlessm.com>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>

diff --git a/include/linux/hid.h b/include/linux/hid.h
index 5006f9b5d837..a08e6b15d98d 100644
--- a/include/linux/hid.h
+++ b/include/linux/hid.h
@@ -173,6 +173,7 @@ struct hid_item {
 #define HID_UP_LOGIVENDOR3   0xff430000
 #define HID_UP_LNVENDOR		0xffa00000
 #define HID_UP_SENSOR		0x00200000
+#define HID_UP_ASUSVENDOR	0xff310000
 
 #define HID_USAGE		0x0000ffff
 
@@ -292,6 +293,7 @@ struct hid_item {
 #define HID_DG_BARRELSWITCH2	0x000d005a
 #define HID_DG_TOOLSERIALNUMBER	0x000d005b
 
+#define HID_VD_ASUS_CUSTOM_MEDIA_KEYS	0xff310076
 /*
  * HID report types --- Ouch! HID spec says 1 2 3!
  */

commit 581c4484769e692eade761c17c22549aaefe6749
Author: Dmitry Torokhov <dmitry.torokhov@gmail.com>
Date:   Tue Aug 1 15:38:01 2017 -0700

    HID: input: map digitizer battery usage
    
    We already mapped battery strength reports from the generic device
    control page, but we did not update capacity from input reports, nor we
    mapped the battery strength report from the digitizer page, so let's
    implement this now.
    
    Batteries driven by the input reports will now start in "unknown" state,
    and will get updated once we receive first report containing battery
    strength from the device.
    
    Signed-off-by: Dmitry Torokhov <dmitry.torokhov@gmail.com>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>

diff --git a/include/linux/hid.h b/include/linux/hid.h
index 5006f9b5d837..281d1ffcbe02 100644
--- a/include/linux/hid.h
+++ b/include/linux/hid.h
@@ -542,10 +542,12 @@ struct hid_device {							/* device report descriptor */
 	 * battery is non-NULL.
 	 */
 	struct power_supply *battery;
+	__s32 battery_capacity;
 	__s32 battery_min;
 	__s32 battery_max;
 	__s32 battery_report_type;
 	__s32 battery_report_id;
+	bool battery_reported;
 #endif
 
 	unsigned int status;						/* see STAT flags above */

commit 6f68f0ac72087c29a94d1736324902e3ec07a4ec
Author: Binoy Jayan <binoy.jayan@linaro.org>
Date:   Wed Jun 14 12:59:51 2017 +0530

    HID: Remove the semaphore driver_lock
    
    The semaphore 'driver_lock' is used as a simple mutex, and also unnecessary as
    suggested by Arnd. Hence removing it, as the concurrency between the probe and
    remove is already handled in the driver core.
    
    Suggested-by: Arnd Bergmann <arnd@arndb.de>
    Signed-off-by: Binoy Jayan <binoy.jayan@linaro.org>
    Acked-by: Benjamin Tissoires <benjamin.tissoires@redhat.com>
    Reviewed-by: David Herrmann <dh.herrmann@gmail.com>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>

diff --git a/include/linux/hid.h b/include/linux/hid.h
index 5006f9b5d837..142409fc1ff3 100644
--- a/include/linux/hid.h
+++ b/include/linux/hid.h
@@ -526,7 +526,6 @@ struct hid_device {							/* device report descriptor */
 	struct hid_report_enum report_enum[HID_REPORT_TYPES];
 	struct work_struct led_work;					/* delayed LED worker */
 
-	struct semaphore driver_lock;					/* protects the current driver, except during input */
 	struct semaphore driver_input_lock;				/* protects the current driver */
 	struct device dev;						/* device */
 	struct hid_driver *driver;
@@ -551,7 +550,7 @@ struct hid_device {							/* device report descriptor */
 	unsigned int status;						/* see STAT flags above */
 	unsigned claimed;						/* Claimed by hidinput, hiddev? */
 	unsigned quirks;						/* Various quirks the device can pull on us */
-	bool io_started;						/* Protected by driver_lock. If IO has started */
+	bool io_started;						/* If IO has started */
 
 	struct list_head inputs;					/* The list of inputs */
 	void *hiddev;							/* The hiddev structure */

commit fc2237a724a9e448599076d7d23497f51e2f7441
Author: Jason Gerecke <killertofu@gmail.com>
Date:   Mon Jul 24 09:46:18 2017 -0700

    HID: introduce hid_is_using_ll_driver
    
    Although HID itself is transport-agnostic, occasionally a driver may
    want to interact with the low-level transport that a device is connected
    through. To do this, we need to know what kind of bus is in use. The
    first guess may be to look at the 'bus' field of the 'struct hid_device',
    but this field may be emulated in some cases (e.g. uhid).
    
    More ideally, we can check which ll_driver a device is using. This
    function introduces a 'hid_is_using_ll_driver' function and makes the
    'struct hid_ll_driver' of the four most common transports accessible
    through hid.h.
    
    Signed-off-by: Jason Gerecke <jason.gerecke@wacom.com>
    Acked-By: Benjamin Tissoires <benjamin.tissoires@redhat.com>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>

diff --git a/include/linux/hid.h b/include/linux/hid.h
index 5006f9b5d837..3853408daf7f 100644
--- a/include/linux/hid.h
+++ b/include/linux/hid.h
@@ -777,6 +777,17 @@ struct hid_ll_driver {
 	int (*idle)(struct hid_device *hdev, int report, int idle, int reqtype);
 };
 
+extern struct hid_ll_driver i2c_hid_ll_driver;
+extern struct hid_ll_driver hidp_hid_driver;
+extern struct hid_ll_driver uhid_hid_driver;
+extern struct hid_ll_driver usb_hid_driver;
+
+static inline bool hid_is_using_ll_driver(struct hid_device *hdev,
+		struct hid_ll_driver *driver)
+{
+	return hdev->ll_driver == driver;
+}
+
 #define	PM_HINT_FULLON	1<<5
 #define PM_HINT_NORMAL	1<<1
 

commit 837c194a4dfedd69ddbd5a586401380190776f48
Merge: 604250ddcf87 9609827458c3 13b2e1ba486f 283a21da1239 08585e43d228 75a5f3ac5c86
Author: Jiri Kosina <jkosina@suse.cz>
Date:   Mon Jul 10 11:11:25 2017 +0200

    Merge branches 'for-4.13/multitouch', 'for-4.13/retrode', 'for-4.13/transport-open-close-consolidation', 'for-4.13/upstream' and 'for-4.13/wacom' into for-linus

commit 283a21da1239d8db7fdf6d9077feed73a6efffa2
Author: Dmitry Torokhov <dmitry.torokhov@gmail.com>
Date:   Tue Jun 6 23:59:38 2017 -0700

    HID: remove no longer used hid->open field
    
    Now that all users have migrated to use hid->ll_open_count, we can remove
    hid->open field.
    
    Signed-off-by: Dmitry Torokhov <dmitry.torokhov@gmail.com>
    Reviewed-by: Andy Shevchenko <andy.shevchenko@gmail.com>
    Reviewed-by: Benjamin Tissoires <benjamin.tissoires@redhat.com>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>

diff --git a/include/linux/hid.h b/include/linux/hid.h
index 5501eb64dbc4..72e8ac667771 100644
--- a/include/linux/hid.h
+++ b/include/linux/hid.h
@@ -548,7 +548,6 @@ struct hid_device {							/* device report descriptor */
 	void *hiddev;							/* The hiddev structure */
 	void *hidraw;
 
-	int open;							/* is the device open by anyone? */
 	char name[128];							/* Device name */
 	char phys[64];							/* Device physical location */
 	char uniq[64];							/* Device unique identifier (serial #) */

commit aaac082dac0a8ac6b00509c7ae2fa8280f966652
Author: Dmitry Torokhov <dmitry.torokhov@gmail.com>
Date:   Tue Jun 6 23:59:34 2017 -0700

    HID: serialize hid_hw_open and hid_hw_close
    
    The HID transport drivers either re-implement exactly the same logic
    (usbhid, i2c-hid) or forget to implement it (usbhid) which causes issues
    when the same device is accessed via multiple interfaces (for example input
    device through evdev and also hidraw). Let's muve the locking logic into
    HID core to make sure the serialized behavior is always enforced.
    
    Also let's uninline and move hid_hw_start() and hid_hw_stop() into hid-core
    as hid_hw_start() is somewhat large and do not believe we get any benefit
    from these two being inline.
    
    Signed-off-by: Dmitry Torokhov <dmitry.torokhov@gmail.com>
    Reviewed-by: Andy Shevchenko <andy.shevchenko@gmail.com>
    Reviewed-by: Benjamin Tissoires <benjamin.tissoires@redhat.com>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>

diff --git a/include/linux/hid.h b/include/linux/hid.h
index 5be325d890d9..5501eb64dbc4 100644
--- a/include/linux/hid.h
+++ b/include/linux/hid.h
@@ -34,6 +34,7 @@
 #include <linux/workqueue.h>
 #include <linux/input.h>
 #include <linux/semaphore.h>
+#include <linux/mutex.h>
 #include <linux/power_supply.h>
 #include <uapi/linux/hid.h>
 
@@ -520,7 +521,10 @@ struct hid_device {							/* device report descriptor */
 	struct semaphore driver_input_lock;				/* protects the current driver */
 	struct device dev;						/* device */
 	struct hid_driver *driver;
+
 	struct hid_ll_driver *ll_driver;
+	struct mutex ll_open_lock;
+	unsigned int ll_open_count;
 
 #ifdef CONFIG_HID_BATTERY_STRENGTH
 	/*
@@ -937,69 +941,11 @@ static inline int __must_check hid_parse(struct hid_device *hdev)
 	return hid_open_report(hdev);
 }
 
-/**
- * hid_hw_start - start underlaying HW
- *
- * @hdev: hid device
- * @connect_mask: which outputs to connect, see HID_CONNECT_*
- *
- * Call this in probe function *after* hid_parse. This will setup HW buffers
- * and start the device (if not deffered to device open). hid_hw_stop must be
- * called if this was successful.
- */
-static inline int __must_check hid_hw_start(struct hid_device *hdev,
-		unsigned int connect_mask)
-{
-	int ret = hdev->ll_driver->start(hdev);
-	if (ret || !connect_mask)
-		return ret;
-	ret = hid_connect(hdev, connect_mask);
-	if (ret)
-		hdev->ll_driver->stop(hdev);
-	return ret;
-}
-
-/**
- * hid_hw_stop - stop underlaying HW
- *
- * @hdev: hid device
- *
- * This is usually called from remove function or from probe when something
- * failed and hid_hw_start was called already.
- */
-static inline void hid_hw_stop(struct hid_device *hdev)
-{
-	hid_disconnect(hdev);
-	hdev->ll_driver->stop(hdev);
-}
-
-/**
- * hid_hw_open - signal underlaying HW to start delivering events
- *
- * @hdev: hid device
- *
- * Tell underlying HW to start delivering events from the device.
- * This function should be called sometime after successful call
- * to hid_hiw_start().
- */
-static inline int __must_check hid_hw_open(struct hid_device *hdev)
-{
-	return hdev->ll_driver->open(hdev);
-}
-
-/**
- * hid_hw_close - signal underlaying HW to stop delivering events
- *
- * @hdev: hid device
- *
- * This function indicates that we are not interested in the events
- * from this device anymore. Delivery of events may or may not stop,
- * depending on the number of users still outstanding.
- */
-static inline void hid_hw_close(struct hid_device *hdev)
-{
-	hdev->ll_driver->close(hdev);
-}
+int __must_check hid_hw_start(struct hid_device *hdev,
+			      unsigned int connect_mask);
+void hid_hw_stop(struct hid_device *hdev);
+int __must_check hid_hw_open(struct hid_device *hdev);
+void hid_hw_close(struct hid_device *hdev);
 
 /**
  * hid_hw_power - requests underlying HW to go into given power mode

commit 6e7edabfc6a8ac5dce8c55363a7bb1576fc9348f
Author: Hans de Goede <hdegoede@redhat.com>
Date:   Thu May 11 19:11:11 2017 +0200

    HID: Microsoft Win8 Wireless Radio Controls cleanup
    
    Use a better URL for the HUTRR40 Radio HID Usages documentation and use the
    HID_GD_WIRELESS_RADIO_CTLS define rather then hardcoding a check for
    0x0001000c.
    
    Fixes: 61df56bef9 ("HID: Add mapping for Microsoft Win8 Wireless Radio Controls extensions")
    Suggested-by: Benjamin Tissoires <benjamin.tissoires@redhat.com>
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>

diff --git a/include/linux/hid.h b/include/linux/hid.h
index 0b29466bbc21..bebbf4893448 100644
--- a/include/linux/hid.h
+++ b/include/linux/hid.h
@@ -183,9 +183,8 @@ struct hid_item {
 #define HID_GD_KEYPAD		0x00010007
 #define HID_GD_MULTIAXIS	0x00010008
 /*
- * Microsoft Win8 Wireless Radio Controls extensions CA, see (checked 09052017):
- * https://docs.microsoft.com/en-us/windows-hardware/drivers/hid/airplane-mode-radio-management
- * https://web.archive.org/web/20170509144631/https://docs.microsoft.com/en-us/windows-hardware/drivers/hid/airplane-mode-radio-management
+ * Microsoft Win8 Wireless Radio Controls extensions CA, see:
+ * http://www.usb.org/developers/hidpage/HUTRR40RadioHIDUsagesFinal.pdf
  */
 #define HID_GD_WIRELESS_RADIO_CTLS	0x0001000c
 #define HID_GD_X		0x00010030

commit 61df56bef97e1708bfbc006b307b00834ad61fe8
Author: Hans de Goede <hdegoede@redhat.com>
Date:   Wed May 10 17:12:52 2017 +0200

    HID: Add mapping for Microsoft Win8 Wireless Radio Controls extensions
    
    Microsoft has defined some extra HUT codes for the Generic Desktop Page
    for Wireless Radio controls, see:
    
    https://docs.microsoft.com/en-us/windows-hardware/drivers/hid/airplane-mode-radio-management
    https://web.archive.org/web/20170509144631/https://docs.microsoft.com/en-us/windows-hardware/drivers/hid/airplane-mode-radio-management
    
    I've 3 2-in-1 keyboard docks: Dell Venue Pro 11 keyboard dock,
    HP pavilion x2 keyboard dock and a PEAQ C1010 keyboard dock which have
    a wireless radio toggle hotkey, which uses the 0x000100c6 HUT code
    defined in these extensions.
    
    This commit adds a mapping for this key, this makes the rfkill toggle
    hotkey work on the Dell Venue Pro 11 and HP Pavilion X2 keyboards,
    the PEAQ C1010 keyboard does generate events for the 0x000100c6 HUT
    code when pressed, but the reported value is always 0.
    
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Reviewed-by: Benjamin Tissoires <benjamin.tissoires@redhat.com>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>

diff --git a/include/linux/hid.h b/include/linux/hid.h
index 5be325d890d9..0b29466bbc21 100644
--- a/include/linux/hid.h
+++ b/include/linux/hid.h
@@ -182,6 +182,12 @@ struct hid_item {
 #define HID_GD_KEYBOARD		0x00010006
 #define HID_GD_KEYPAD		0x00010007
 #define HID_GD_MULTIAXIS	0x00010008
+/*
+ * Microsoft Win8 Wireless Radio Controls extensions CA, see (checked 09052017):
+ * https://docs.microsoft.com/en-us/windows-hardware/drivers/hid/airplane-mode-radio-management
+ * https://web.archive.org/web/20170509144631/https://docs.microsoft.com/en-us/windows-hardware/drivers/hid/airplane-mode-radio-management
+ */
+#define HID_GD_WIRELESS_RADIO_CTLS	0x0001000c
 #define HID_GD_X		0x00010030
 #define HID_GD_Y		0x00010031
 #define HID_GD_Z		0x00010032
@@ -210,6 +216,10 @@ struct hid_item {
 #define HID_GD_DOWN		0x00010091
 #define HID_GD_RIGHT		0x00010092
 #define HID_GD_LEFT		0x00010093
+/* Microsoft Win8 Wireless Radio Controls CA usage codes */
+#define HID_GD_RFKILL_BTN	0x000100c6
+#define HID_GD_RFKILL_LED	0x000100c7
+#define HID_GD_RFKILL_SWITCH	0x000100c8
 
 #define HID_DC_BATTERYSTRENGTH	0x00060020
 

commit 18fc2163b8a410d4d36b8f44658580731c0afaa1
Merge: d529a4ad91ef c846fe9ce90a ac34b970a9ec c3883fe06488 733aca90300b d3d9adfe3059 9547837bdccb a4bf6153b317 e9d0a26d3481 07e88a35dcea 959d973e9890 149f6f6b8ff3
Author: Jiri Kosina <jkosina@suse.cz>
Date:   Tue May 2 11:01:10 2017 +0200

    Merge branches 'for-4.11/upstream-fixes', 'for-4.12/accutouch', 'for-4.12/cp2112', 'for-4.12/hid-core-null-state-handling', 'for-4.12/hiddev', 'for-4.12/i2c-hid', 'for-4.12/innomedia', 'for-4.12/logitech-hidpp-battery-power-supply', 'for-4.12/multitouch', 'for-4.12/nti', 'for-4.12/upstream' and 'for-4.12/wacom' into for-linus

commit 959d973e9890150342df76160d966ab1270208df
Author: Xiaolei Yu <dreifachstein@gmail.com>
Date:   Sat Mar 25 14:04:58 2017 +0800

    HID: add two missing usages for digitizer
    
    They are part of HUTRR34 for multi-touch digitizers:
    
    0x0E    Device configuration    CA      16.7
    0x23    Device settings         CL      16.7
    
    Signed-off-by: Xiaolei Yu <dreifachstein@gmail.com>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>

diff --git a/include/linux/hid.h b/include/linux/hid.h
index 28f38e2b8f30..536f11fd21d5 100644
--- a/include/linux/hid.h
+++ b/include/linux/hid.h
@@ -268,6 +268,8 @@ struct hid_item {
 #define HID_CP_APPLICATIONLAUNCHBUTTONS	0x000c0180
 #define HID_CP_GENERICGUIAPPLICATIONCONTROLS	0x000c0200
 
+#define HID_DG_DEVICECONFIG	0x000d000e
+#define HID_DG_DEVICESETTINGS	0x000d0023
 #define HID_DG_CONFIDENCE	0x000d0047
 #define HID_DG_WIDTH		0x000d0048
 #define HID_DG_HEIGHT		0x000d0049

commit 733aca90300b76575b8a465dc49cbed7a991fd8b
Author: Jaejoong Kim <climbbb.kim@gmail.com>
Date:   Fri Mar 3 17:54:01 2017 +0900

    HID: hiddev: reallocate hiddev's minor number
    
    We need to store the minor number each drivers. In case of hidraw, the
    minor number is stored stores in struct hidraw. But hiddev's minor is
    located in struct hid_device.
    
    The hid-core driver announces a kernel message which driver is loaded when
    HID device connected, but hiddev's minor number is always zero. To proper
    display hiddev's minor number, we need to store the minor number asked from
    usb core and do some refactoring work (move from hiddev.c to hiddev.h) to
    access hiddev in hid-core.
    
    [jkosina@suse.cz: rebase on top of newer codebase]
    Reviewed-by: Benjamin Tissoires <benjamin.tissoires@redhat.com>
    Signed-off-by: Jaejoong Kim <climbbb.kim@gmail.com>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>

diff --git a/include/linux/hid.h b/include/linux/hid.h
index b2e472c3e595..24de54835e52 100644
--- a/include/linux/hid.h
+++ b/include/linux/hid.h
@@ -541,7 +541,6 @@ struct hid_device {							/* device report descriptor */
 	struct list_head inputs;					/* The list of inputs */
 	void *hiddev;							/* The hiddev structure */
 	void *hidraw;
-	int minor;							/* Hiddev minor number */
 
 	int open;							/* is the device open by anyone? */
 	char name[128];							/* Device name */

commit 9143059fafd4eebed2d43ffb5455178d4010e60a
Author: Benjamin Tissoires <benjamin.tissoires@redhat.com>
Date:   Wed Mar 8 15:11:14 2017 +0100

    HID: remove initial reading of reports at connect
    
    It looks like a bunch of devices do not like to be polled
    for their reports at init time. When you look into the details,
    it seems that for those that are requiring the quirk
    HID_QUIRK_NO_INIT_REPORTS, the driver fails to retrieve part
    of the features/inputs while others (more generic) work.
    
    IMO, it should be acceptable to remove the need for the quirk
    in the general case. On the small amount of cases where
    we actually need to read the current values, the driver
    in charge (hid-mt or wacom) already retrieves the features
    manually.
    
    There are 2 cases where we might need to retrieve the reports at
    init:
    1. hiddev devices with specific use-space tool
    2. a device that would require the driver to fetch a specific
       feature/input at plug
    
    For case 2, I have seen this a few time on hid-multitouch. It
    is solved in hid-multitouch directly by fetching the feature.
    I hope it won't be too common and this can be solved on a per-case
    basis (crossing fingers).
    
    For case 1, we moved the implementation of HID_QUIRK_NO_INIT_REPORTS
    in hiddev. When somebody starts calling ioctls that needs an initial
    update, the hiddev device will fetch the initial state of the reports
    to mimic the current behavior. This adds a small amount of time during
    the first HIDIOCGUSAGE(S), but it should be acceptable in
    most cases. To keep the currently known broken devices, we have to
    keep around HID_QUIRK_NO_INIT_REPORTS, but the scope will only be
    for hiddev.
    
    Note that I don't think hidraw would be affected and I checked that
    the FF drivers that need to interact with the report fields are all
    using output reports, which are not initialized by
    usbhid_init_reports().
    
    NO_INIT_INPUT_REPORTS is then replaced by HID_QUIRK_NO_INIT_REPORTS:
    there is no point keeping it for just one device.
    
    Signed-off-by: Benjamin Tissoires <benjamin.tissoires@redhat.com>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>

diff --git a/include/linux/hid.h b/include/linux/hid.h
index 28f38e2b8f30..b2e472c3e595 100644
--- a/include/linux/hid.h
+++ b/include/linux/hid.h
@@ -322,7 +322,7 @@ struct hid_item {
 #define HID_QUIRK_MULTI_INPUT			0x00000040
 #define HID_QUIRK_HIDINPUT_FORCE		0x00000080
 #define HID_QUIRK_NO_EMPTY_INPUT		0x00000100
-#define HID_QUIRK_NO_INIT_INPUT_REPORTS		0x00000200
+/* 0x00000200 reserved for backward compatibility, was NO_INIT_INPUT_REPORTS */
 #define HID_QUIRK_ALWAYS_POLL			0x00000400
 #define HID_QUIRK_SKIP_OUTPUT_REPORTS		0x00010000
 #define HID_QUIRK_SKIP_OUTPUT_REPORT_ID		0x00020000

commit 96e132ebc0a162c643e0e6e6f1f85c3be3355715
Merge: 9ce12d8be12c 13c28b029708 8cd16166b000 608ad1848b41 f8690450f3d0 b897f6db3ae2 594312b88b0f de66a1a04c25 9c5dcd723171 c60fa555b11b c9cfb2aca265
Author: Jiri Kosina <jkosina@suse.cz>
Date:   Wed Dec 14 10:12:26 2016 +0100

    Merge branches 'for-4.10/asus', 'for-4.10/cp2112', 'for-4.10/i2c-hid-nopower', 'for-4.10/intel-ish', 'for-4.10/mayflash', 'for-4.10/microsoft-surface-3', 'for-4.10/multitouch', 'for-4.10/sony', 'for-4.10/udraw-ps3', 'for-4.10/upstream' and 'for-4.10/wacom/generic' into for-linus

commit 72d19459d7919f966594576bb042d15a451f27ea
Author: Benjamin Tissoires <benjamin.tissoires@redhat.com>
Date:   Fri Nov 25 14:27:21 2016 +0100

    HID: input: rework HID_QUIRK_MULTI_INPUT
    
    The purpose of HID_QUIRK_MULTI_INPUT is to have an input device per
    report id. This is useful when the HID device presents several HID
    collections of different device types.
    
    The current implementation of hid-input creates one input node per id per
    type (input or output). This is problematic for the LEDs of a keyboard as
    they are often set through an output report. The current code creates
    one input node with all the keyboard keys, and one other with only the
    LEDs.
    
    To solve this, we use a two-passes way:
    - first, we initialize all input nodes and associate one per report id
    - then, we register all the input nodes
    
    Signed-off-by: Benjamin Tissoires <benjamin.tissoires@redhat.com>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>

diff --git a/include/linux/hid.h b/include/linux/hid.h
index b2ec82712baa..596b9232c19e 100644
--- a/include/linux/hid.h
+++ b/include/linux/hid.h
@@ -479,6 +479,7 @@ struct hid_input {
 	struct list_head list;
 	struct hid_report *report;
 	struct input_dev *input;
+	bool registered;
 };
 
 enum hid_type {

commit 93aab7fa4f8091d8fe2aed7e79a650fc1c084512
Author: Jason Gerecke <killertofu@gmail.com>
Date:   Wed Oct 19 18:03:52 2016 -0700

    HID: wacom: generic: Add support for battery status on pen and pad interfaces
    
    Adds support for usages that may appear on the pen or pad interface which
    report the state of the tablet battery.
    
    Signed-off-by: Jason Gerecke <jason.gerecke@wacom.com>
    Reviewed-by: Benjamin Tissoires <benjamin.tissoires@redhat.com>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>

diff --git a/include/linux/hid.h b/include/linux/hid.h
index e712101a1670..3baa2f962e48 100644
--- a/include/linux/hid.h
+++ b/include/linux/hid.h
@@ -231,6 +231,7 @@ struct hid_item {
 #define HID_DG_TAP		0x000d0035
 #define HID_DG_TABLETFUNCTIONKEY	0x000d0039
 #define HID_DG_PROGRAMCHANGEKEY	0x000d003a
+#define HID_DG_BATTERYSTRENGTH	0x000d003b
 #define HID_DG_INVERT		0x000d003c
 #define HID_DG_TILT_X		0x000d003d
 #define HID_DG_TILT_Y		0x000d003e

commit 50066a042da5457ae5b6397425f0a7ca556231e3
Author: Jason Gerecke <killertofu@gmail.com>
Date:   Wed Oct 19 18:03:42 2016 -0700

    HID: wacom: generic: Add support for height, tilt, and twist usages
    
    The HID standard defines usages that allow digitizers to report the pen's
    height, tilt, and rotation and which are used by Wacom's new "MobileStudio
    Pro" devices.
    
    Note that 'hidinput_calc_abs_res' expects ABS_Z (historically used by our
    driver to report twist) to have linear units. To ensure it calculates a
    resolution with the actually-angular units provided in the HID descriptor
    we nedd to lie and tell it we're calculating it for the (rotational) ABS_RZ
    axis instead.
    
    Signed-off-by: Jason Gerecke <jason.gerecke@wacom.com>
    Reviewed-by: Benjamin Tissoires <benjamin.tissoires@redhat.com>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>

diff --git a/include/linux/hid.h b/include/linux/hid.h
index b2ec82712baa..e712101a1670 100644
--- a/include/linux/hid.h
+++ b/include/linux/hid.h
@@ -232,6 +232,9 @@ struct hid_item {
 #define HID_DG_TABLETFUNCTIONKEY	0x000d0039
 #define HID_DG_PROGRAMCHANGEKEY	0x000d003a
 #define HID_DG_INVERT		0x000d003c
+#define HID_DG_TILT_X		0x000d003d
+#define HID_DG_TILT_Y		0x000d003e
+#define HID_DG_TWIST		0x000d0041
 #define HID_DG_TIPSWITCH	0x000d0042
 #define HID_DG_TIPSWITCH2	0x000d0043
 #define HID_DG_BARRELSWITCH	0x000d0044

commit 6c3f70ac7c6b4a29b6905be879282628e65f50dd
Author: Colin Ian King <colin.king@canonical.com>
Date:   Tue Sep 27 11:58:44 2016 -0700

    HID: add missing \n to end of dev_warn messages
    
    Trival fix, dev_warn messages are missing a \n, so add it.
    
    Signed-off-by: Colin Ian King <colin.king@canonical.com>
    Reviewed-by: Benjamin Tissoires <benjamin.tissoires@redhat.com>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>

diff --git a/include/linux/hid.h b/include/linux/hid.h
index 75b66eccc692..b2ec82712baa 100644
--- a/include/linux/hid.h
+++ b/include/linux/hid.h
@@ -837,7 +837,7 @@ __u32 hid_field_extract(const struct hid_device *hid, __u8 *report,
  */
 static inline void hid_device_io_start(struct hid_device *hid) {
 	if (hid->io_started) {
-		dev_warn(&hid->dev, "io already started");
+		dev_warn(&hid->dev, "io already started\n");
 		return;
 	}
 	hid->io_started = true;
@@ -857,7 +857,7 @@ static inline void hid_device_io_start(struct hid_device *hid) {
  */
 static inline void hid_device_io_stop(struct hid_device *hid) {
 	if (!hid->io_started) {
-		dev_warn(&hid->dev, "io already stopped");
+		dev_warn(&hid->dev, "io already stopped\n");
 		return;
 	}
 	hid->io_started = false;

commit ba91a96718d17160890e161f702db6e60747248a
Author: Geliang Tang <geliangtang@163.com>
Date:   Sun Dec 27 17:25:22 2015 +0800

    HID: add a new helper to_hid_driver()
    
    Add a new helper to_hid_driver() and use it in hid-core.c.
    
    Signed-off-by: Geliang Tang <geliangtang@163.com>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>

diff --git a/include/linux/hid.h b/include/linux/hid.h
index 1472026367ed..75b66eccc692 100644
--- a/include/linux/hid.h
+++ b/include/linux/hid.h
@@ -717,6 +717,9 @@ struct hid_driver {
 	struct device_driver driver;
 };
 
+#define to_hid_driver(pdrv) \
+	container_of(pdrv, struct hid_driver, driver)
+
 /**
  * hid_ll_driver - low level driver callbacks
  * @start: called on probe to start the device

commit d8ce9bf5551bfea431893bdd0a943f24a5170828
Author: Geliang Tang <geliangtang@163.com>
Date:   Sun Dec 27 17:25:20 2015 +0800

    HID: move to_hid_device() to hid.h
    
    to_hid_device() macro is defined in both hid-lg4ff.c and
    hid-logitech-hidpp.c. So I move it to include/linux/hid.h.
    
    Signed-off-by: Geliang Tang <geliangtang@163.com>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>

diff --git a/include/linux/hid.h b/include/linux/hid.h
index a6d7a3fc2cb3..1472026367ed 100644
--- a/include/linux/hid.h
+++ b/include/linux/hid.h
@@ -565,6 +565,9 @@ struct hid_device {							/* device report descriptor */
 	wait_queue_head_t debug_wait;
 };
 
+#define to_hid_device(pdev) \
+	container_of(pdev, struct hid_device, dev)
+
 static inline void *hid_get_drvdata(struct hid_device *hdev)
 {
 	return dev_get_drvdata(&hdev->dev);

commit b466c1dd73d5303a313fb0c962e4eb5879bc1336
Author: Simon Wood <simon@mungewell.org>
Date:   Thu Nov 19 16:42:14 2015 -0700

    HID: Add vendor specific usage pages for Logitech G920
    
    The Logitech G920 uses a couple of vendor specific usage pages,
    which results in incorrect number of axis/buttons being detected.
    
    This patch adds these pages to the 'ignore' list.
    
    Reported-by: Elias Vanderstuyft <elias.vds@gmail.com>
    Signed-off-by: Simon Wood <simon@mungewell.org>
    Reviewed-by: Benjamin Tissoires <benjamin.tissoires@redhat.com>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>

diff --git a/include/linux/hid.h b/include/linux/hid.h
index 251a1d382e23..a6d7a3fc2cb3 100644
--- a/include/linux/hid.h
+++ b/include/linux/hid.h
@@ -168,6 +168,8 @@ struct hid_item {
 #define HID_UP_MSVENDOR		0xff000000
 #define HID_UP_CUSTOM		0x00ff0000
 #define HID_UP_LOGIVENDOR	0xffbc0000
+#define HID_UP_LOGIVENDOR2   0xff090000
+#define HID_UP_LOGIVENDOR3   0xff430000
 #define HID_UP_LNVENDOR		0xffa00000
 #define HID_UP_SENSOR		0x00200000
 

commit 9154301a47b33bdc273d8254c407792524367558
Author: Dmitry Torokhov <dmitry.torokhov@gmail.com>
Date:   Tue Sep 29 15:52:59 2015 -0700

    HID: hid-input: allow input_configured callback return errors
    
    When configuring input device via input_configured callback we may
    encounter errors (for example input_mt_init_slots() may fail). Instead
    of continuing with half-initialized input device let's allow driver
    indicate failures.
    
    Signed-off-by: Jaikumar Ganesh <jaikumarg@android.com>
    Signed-off-by: Arve Hjønnevåg <arve@android.com>
    Reviewed-by: Benjamin Tissoires <benjamin.tissoires@redhat.com>
    Reviewed-by: David Herrmann <dh.herrmann@gmail.com>
    Acked-by: Nikolai Kondrashov <Nikolai.Kondrashov@redhat.com>
    Acked-by: Andrew Duggan <aduggan@synaptics.com>
    Signed-off-by: Dmitry Torokhov <dmitry.torokhov@gmail.com>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>

diff --git a/include/linux/hid.h b/include/linux/hid.h
index f17980de2662..251a1d382e23 100644
--- a/include/linux/hid.h
+++ b/include/linux/hid.h
@@ -698,8 +698,8 @@ struct hid_driver {
 	int (*input_mapped)(struct hid_device *hdev,
 			struct hid_input *hidinput, struct hid_field *field,
 			struct hid_usage *usage, unsigned long **bit, int *max);
-	void (*input_configured)(struct hid_device *hdev,
-				 struct hid_input *hidinput);
+	int (*input_configured)(struct hid_device *hdev,
+				struct hid_input *hidinput);
 	void (*feature_mapping)(struct hid_device *hdev,
 			struct hid_field *field,
 			struct hid_usage *usage);

commit 04fba7864ffcceae8a5f78d88ae1fd8d682a5123
Author: Goffredo Baroncelli <kreijack@inwind.it>
Date:   Sat May 30 11:00:26 2015 +0200

    HID: Export hid_field_extract()
    
    Rename the function extract() to hid_field_extract(), make it external linkage
    to allow the use from other modules.
    
    Suggested-by: Jiri Kosina <jkosina@suse.cz>
    Signed-off-by: Goffredo Baroncelli <kreijack@inwind.it>
    Reviewed-by: Benjamin Tissoires <benjamin.tissoires@redhat.com>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>

diff --git a/include/linux/hid.h b/include/linux/hid.h
index 176b43670e5d..f17980de2662 100644
--- a/include/linux/hid.h
+++ b/include/linux/hid.h
@@ -815,6 +815,8 @@ void hid_disconnect(struct hid_device *hid);
 const struct hid_device_id *hid_match_id(struct hid_device *hdev,
 					 const struct hid_device_id *id);
 s32 hid_snto32(__u32 value, unsigned n);
+__u32 hid_field_extract(const struct hid_device *hid, __u8 *report,
+		     unsigned offset, unsigned n);
 
 /**
  * hid_device_io_start - enable HID input during probe, remove

commit 8de29a35dc840a05e451ad035bcb06e21ccf605f
Merge: 31f7dc796998 2e455c27bddb
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Tue Apr 14 08:25:26 2015 -0800

    Merge branch 'for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/jikos/hid
    
    Pull HID updates from Jiri Kosina:
    
     - quite a few firmware fixes for RMI driver by Andrew Duggan
    
     - huion and uclogic drivers have been substantially overlaping in
       functionality laterly.  This redundancy is fixed by hid-huion driver
       being merged into hid-uclogic; work done by Benjamin Tissoires and
       Nikolai Kondrashov
    
     - i2c-hid now supports ACPI GPIO interrupts; patch from Mika Westerberg
    
     - Some of the quirks, that got separated into individual drivers, have
       historically had EXPERT dependency.  As HID subsystem matured (as
       well as the individual drivers), this made less and less sense.  This
       dependency is now being removed by patch from Jean Delvare
    
     - Logitech lg4ff driver received a couple of improvements for mode
       switching, by Michal Malý
    
     - multitouch driver now supports clickpads, patches by Benjamin
       Tissoires and Seth Forshee
    
     - hid-sensor framework received a substantial update; namely support
       for Custom and Generic pages is being added; work done by Srinivas
       Pandruvada
    
     - wacom driver received substantial update; it now supports
       i2c-conntected devices (Mika Westerberg), Bamboo PADs are now
       properly supported (Benjamin Tissoires), much improved battery
       reporting (Jason Gerecke) and pen proximity cleanups (Ping Cheng)
    
     - small assorted fixes and device ID additions
    
    * 'for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/jikos/hid: (68 commits)
      HID: sensor: Update document for custom sensor
      HID: sensor: Custom and Generic sensor support
      HID: debug: fix error handling in hid_debug_events_read()
      Input - mt: Fix input_mt_get_slot_by_key
      HID: logitech-hidpp: fix error return code
      HID: wacom: Add support for Cintiq 13HD Touch
      HID: logitech-hidpp: add a module parameter to keep firmware gestures
      HID: usbhid: yet another mouse with ALWAYS_POLL
      HID: usbhid: more mice with ALWAYS_POLL
      HID: wacom: set stylus_in_proximity before checking touch_down
      HID: wacom: use wacom_wac_finger_count_touches to set touch_down
      HID: wacom: remove hardcoded WACOM_QUIRK_MULTI_INPUT
      HID: pidff: effect can't be NULL
      HID: add quirk for PIXART OEM mouse used by HP
      HID: add HP OEM mouse to quirk ALWAYS_POLL
      HID: wacom: ask for a in-prox report when it was missed
      HID: hid-sensor-hub: Fix sparse warning
      HID: hid-sensor-hub: fix attribute read for logical usage id
      HID: plantronics: fix Kconfig default
      HID: pidff: support more than one concurrent effect
      ...

commit 05f6d02521d4c7a656c5135d6d81c345ce531ac0
Merge: 43faadfe96d3 feb6faf1e5d4 ee20fe2386e4 a485923efbb8 7af05e73cd20 b832da56024b 2c6e0277e1ea f097deef59a6 2e701a359ac2 8fec02a73e31 b4bf2120d40b
Author: Jiri Kosina <jkosina@suse.cz>
Date:   Mon Apr 13 23:41:15 2015 +0200

    Merge branches 'for-4.0/upstream-fixes', 'for-4.1/genius', 'for-4.1/huion-uclogic-merge', 'for-4.1/i2c-hid', 'for-4.1/kconfig-drop-expert-dependency', 'for-4.1/logitech', 'for-4.1/multitouch', 'for-4.1/rmi', 'for-4.1/sony', 'for-4.1/upstream' and 'for-4.1/wacom' into for-linus

commit 297d716f6260cc9421d971b124ca196b957ee458
Author: Krzysztof Kozlowski <k.kozlowski@samsung.com>
Date:   Thu Mar 12 08:44:11 2015 +0100

    power_supply: Change ownership from driver to core
    
    Change the ownership of power_supply structure from each driver
    implementing the class to the power supply core.
    
    The patch changes power_supply_register() function thus all drivers
    implementing power supply class are adjusted.
    
    Each driver provides the implementation of power supply. However it
    should not be the owner of power supply class instance because it is
    exposed by core to other subsystems with power_supply_get_by_name().
    These other subsystems have no knowledge when the driver will unregister
    the power supply. This leads to several issues when driver is unbound -
    mostly because user of power supply accesses freed memory.
    
    Instead let the core own the instance of struct 'power_supply'.  Other
    users of this power supply will still access valid memory because it
    will be freed when device reference count reaches 0. Currently this
    means "it will leak" but power_supply_put() call in next patches will
    solve it.
    
    This solves invalid memory references in following race condition
    scenario:
    
    Thread 1: charger manager
    Thread 2: power supply driver, used by charger manager
    
    THREAD 1 (charger manager)         THREAD 2 (power supply driver)
    ==========================         ==============================
    psy = power_supply_get_by_name()
                                       Driver unbind, .remove
                                         power_supply_unregister()
                                         Device fully removed
    psy->get_property()
    
    The 'get_property' call is executed in invalid context because the driver was
    unbound and struct 'power_supply' memory was freed.
    
    This could be observed easily with charger manager driver (here compiled
    with max17040 fuel gauge):
    
    $ cat /sys/devices/virtual/power_supply/cm-battery/capacity &
    $ echo "1-0036" > /sys/bus/i2c/drivers/max17040/unbind
    [   55.725123] Unable to handle kernel NULL pointer dereference at virtual address 00000000
    [   55.732584] pgd = d98d4000
    [   55.734060] [00000000] *pgd=5afa2831, *pte=00000000, *ppte=00000000
    [   55.740318] Internal error: Oops: 80000007 [#1] PREEMPT SMP ARM
    [   55.746210] Modules linked in:
    [   55.749259] CPU: 1 PID: 2936 Comm: cat Tainted: G        W       3.19.0-rc1-next-20141226-00048-gf79f475f3c44-dirty #1496
    [   55.760190] Hardware name: SAMSUNG EXYNOS (Flattened Device Tree)
    [   55.766270] task: d9b76f00 ti: daf54000 task.ti: daf54000
    [   55.771647] PC is at 0x0
    [   55.774182] LR is at charger_get_property+0x2f4/0x36c
    [   55.779201] pc : [<00000000>]    lr : [<c034b0b4>]    psr: 60000013
    [   55.779201] sp : daf55e90  ip : 00000003  fp : 00000000
    [   55.790657] r10: 00000000  r9 : c06e2878  r8 : d9b26c68
    [   55.795865] r7 : dad81610  r6 : daec7410  r5 : daf55ebc  r4 : 00000000
    [   55.802367] r3 : 00000000  r2 : daf55ebc  r1 : 0000002a  r0 : d9b26c68
    [   55.808879] Flags: nZCv  IRQs on  FIQs on  Mode SVC_32  ISA ARM  Segment user
    [   55.815994] Control: 10c5387d  Table: 598d406a  DAC: 00000015
    [   55.821723] Process cat (pid: 2936, stack limit = 0xdaf54210)
    [   55.827451] Stack: (0xdaf55e90 to 0xdaf56000)
    [   55.831795] 5e80:                                     60000013 c01459c4 0000002a c06f8ef8
    [   55.839956] 5ea0: db651000 c06f8ef8 daebac00 c04cb668 daebac08 c0346864 00000000 c01459c4
    [   55.848115] 5ec0: d99eaa80 c06f8ef8 00000fff 00001000 db651000 c027f25c c027f240 d99eaa80
    [   55.856274] 5ee0: d9a06c00 c0146218 daf55f18 00001000 d99eaa80 db4c18c0 00000001 00000001
    [   55.864468] 5f00: daf55f80 c0144c78 c0144c54 c0107f90 00015000 d99eaab0 00000000 00000000
    [   55.872603] 5f20: 000051c7 00000000 db4c18c0 c04a9370 00015000 00001000 daf55f80 00001000
    [   55.880763] 5f40: daf54000 00015000 00000000 c00e53dc db4c18c0 c00e548c 0000000d 00008124
    [   55.888937] 5f60: 00000001 00000000 00000000 db4c18c0 db4c18c0 00001000 00015000 c00e5550
    [   55.897099] 5f80: 00000000 00000000 00001000 00001000 00015000 00000003 00000003 c000f364
    [   55.905239] 5fa0: 00000000 c000f1a0 00001000 00015000 00000003 00015000 00001000 0001333c
    [   55.913399] 5fc0: 00001000 00015000 00000003 00000003 00000002 00000000 00000000 00000000
    [   55.921560] 5fe0: 7fffe000 be999850 0000a225 b6f3c19c 60000010 00000003 00000000 00000000
    [   55.929744] [<c034b0b4>] (charger_get_property) from [<c0346864>] (power_supply_show_property+0x48/0x20c)
    [   55.939286] [<c0346864>] (power_supply_show_property) from [<c027f25c>] (dev_attr_show+0x1c/0x48)
    [   55.948130] [<c027f25c>] (dev_attr_show) from [<c0146218>] (sysfs_kf_seq_show+0x84/0x104)
    [   55.956298] [<c0146218>] (sysfs_kf_seq_show) from [<c0144c78>] (kernfs_seq_show+0x24/0x28)
    [   55.964536] [<c0144c78>] (kernfs_seq_show) from [<c0107f90>] (seq_read+0x1b0/0x484)
    [   55.972172] [<c0107f90>] (seq_read) from [<c00e53dc>] (__vfs_read+0x18/0x4c)
    [   55.979188] [<c00e53dc>] (__vfs_read) from [<c00e548c>] (vfs_read+0x7c/0x100)
    [   55.986304] [<c00e548c>] (vfs_read) from [<c00e5550>] (SyS_read+0x40/0x8c)
    [   55.993164] [<c00e5550>] (SyS_read) from [<c000f1a0>] (ret_fast_syscall+0x0/0x48)
    [   56.000626] Code: bad PC value
    [   56.011652] ---[ end trace 7b64343fbdae8ef1 ]---
    
    Signed-off-by: Krzysztof Kozlowski <k.kozlowski@samsung.com>
    Reviewed-by: Bartlomiej Zolnierkiewicz <b.zolnierkie@samsung.com>
    
    [for the nvec part]
    Reviewed-by: Marc Dietrich <marvin24@gmx.de>
    
    [for compal-laptop.c]
    Acked-by: Darren Hart <dvhart@linux.intel.com>
    
    [for the mfd part]
    Acked-by: Lee Jones <lee.jones@linaro.org>
    
    [for the hid part]
    Acked-by: Jiri Kosina <jkosina@suse.cz>
    
    [for the acpi part]
    Acked-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    
    Signed-off-by: Sebastian Reichel <sre@kernel.org>

diff --git a/include/linux/hid.h b/include/linux/hid.h
index efc7787a41a8..f94cf28e4b7c 100644
--- a/include/linux/hid.h
+++ b/include/linux/hid.h
@@ -514,10 +514,10 @@ struct hid_device {							/* device report descriptor */
 #ifdef CONFIG_HID_BATTERY_STRENGTH
 	/*
 	 * Power supply information for HID devices which report
-	 * battery strength. power_supply is registered iff
-	 * battery.name is non-NULL.
+	 * battery strength. power_supply was successfully registered if
+	 * battery is non-NULL.
 	 */
-	struct power_supply battery;
+	struct power_supply *battery;
 	__s32 battery_min;
 	__s32 battery_max;
 	__s32 battery_report_type;

commit 2c6e0277e1eab3df5db81c59e408b7b1c14b1b72
Author: Seth Forshee <seth.forshee@canonical.com>
Date:   Wed Mar 11 17:26:41 2015 -0500

    HID: multitouch: Add support for button type usage
    
    According to [1], Windows Precision Touchpad devices must supply
    a button type usage in the device capabilities feature report. A
    value of 0 indicates that the device contains a depressible
    button (i.e. it's a click-pad) whereas a value of 1 indicates
    a non-depressible button. Add support for this usage and set
    INPUT_PROP_BUTTONPAD on the touchpad input device whenever a
    depressible button is present.
    
    [1] https://msdn.microsoft.com/en-us/library/windows/hardware/dn467314(v=vs.85).aspx
    
    Signed-off-by: Seth Forshee <seth.forshee@canonical.com>
    Reviewed-by: Benjamin Tissoires <benjamin.tissoires@redhat.com>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>

diff --git a/include/linux/hid.h b/include/linux/hid.h
index efc7787a41a8..f455c38d7562 100644
--- a/include/linux/hid.h
+++ b/include/linux/hid.h
@@ -269,6 +269,7 @@ struct hid_item {
 #define HID_DG_DEVICEINDEX	0x000d0053
 #define HID_DG_CONTACTCOUNT	0x000d0054
 #define HID_DG_CONTACTMAX	0x000d0055
+#define HID_DG_BUTTONTYPE	0x000d0059
 #define HID_DG_BARRELSWITCH2	0x000d005a
 #define HID_DG_TOOLSERIALNUMBER	0x000d005b
 

commit f3dddf2432e3123ef34b470129295641f7513d26
Author: Dmitry Torokhov <dmitry.torokhov@gmail.com>
Date:   Wed Mar 4 14:10:26 2015 -0800

    HID: map telephony usage page
    
    Currently HID code maps usages from telephony page into BTN_0, BTN_1, etc
    keys which get interpreted by mousedev and userspace as left/right/middle
    button clicks, which is not really helpful.
    
    This change adds mappings for usages that have corresponding input event
    definitions, and leaves the rest unmapped. This can be changed when
    there are userspace consumers for more telephony usages.
    
    Signed-off-by: Dmitry Torokhov <dmitry.torokhov@gmail.com>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>

diff --git a/include/linux/hid.h b/include/linux/hid.h
index efc7787a41a8..69f9cf7f078d 100644
--- a/include/linux/hid.h
+++ b/include/linux/hid.h
@@ -159,6 +159,7 @@ struct hid_item {
 #define HID_UP_LED		0x00080000
 #define HID_UP_BUTTON		0x00090000
 #define HID_UP_ORDINAL		0x000a0000
+#define HID_UP_TELEPHONY	0x000b0000
 #define HID_UP_CONSUMER		0x000c0000
 #define HID_UP_DIGITIZER	0x000d0000
 #define HID_UP_PID		0x000f0000

commit e39f2d5956999c05c85814787a113ffadbcd4b26
Author: Andrew Duggan <aduggan@synaptics.com>
Date:   Fri Dec 12 10:17:26 2014 -0800

    HID: rmi: Scan the report descriptor to determine if the device is suitable for the hid-rmi driver
    
    On composite HID devices there may be multiple HID devices on separate
    interfaces, but hid-rmi should only bind to the touchpad. The previous version
    simply checked that the interface protocol was set to mouse. Unfortuately, it
    is not always the case that the touchpad has the mouse interface protocol set.
    This patch takes a different approach and scans the report descriptor looking
    for the Generic Desktop Pointer usage and the Vendor Specific Top Level
    Collection needed by the hid-rmi driver to interface with the device.
    
    Signed-off-by: Andrew Duggan <aduggan@synaptics.com>
    Reviewed-by: Benjamin Tissoires <benjamin.tissoires@redhat.com>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>

diff --git a/include/linux/hid.h b/include/linux/hid.h
index 06c4607744f6..efc7787a41a8 100644
--- a/include/linux/hid.h
+++ b/include/linux/hid.h
@@ -574,7 +574,9 @@ static inline void hid_set_drvdata(struct hid_device *hdev, void *data)
 #define HID_GLOBAL_STACK_SIZE 4
 #define HID_COLLECTION_STACK_SIZE 4
 
-#define HID_SCAN_FLAG_MT_WIN_8			0x00000001
+#define HID_SCAN_FLAG_MT_WIN_8			BIT(0)
+#define HID_SCAN_FLAG_VENDOR_SPECIFIC		BIT(1)
+#define HID_SCAN_FLAG_GD_POINTER		BIT(2)
 
 struct hid_parser {
 	struct hid_global     global;

commit 019e129f9b2d582e5901c0594427cb4026daa413
Merge: 3ee420ba2e7f dabb05c6670e 6296f4a8eb86 c87d92b30208 f486d9dbcc8b be3b16341d5c a45c30ec5934 cabd9b5f1fc3 68a49e51a4a9 601a22f37914
Author: Jiri Kosina <jkosina@suse.cz>
Date:   Fri Dec 12 11:15:33 2014 +0100

    Merge branches 'for-3.19/hid-report-len', 'for-3.19/i2c-hid', 'for-3.19/lenovo', 'for-3.19/logitech', 'for-3.19/microsoft', 'for-3.19/plantronics', 'for-3.19/rmi', 'for-3.19/sony' and 'for-3.19/wacom' into for-linus

commit dabb05c6670e6e4415d7b56cd5864a5dbd90207f
Author: Mathieu Magnaudet <mathieu.magnaudet@gmail.com>
Date:   Thu Nov 27 16:02:36 2014 +0100

    HID: make hid_report_len as a static inline function in hid.h
    
    In several hid drivers it is necessary to calculate the length of an
    hid_report. This patch exports the existing static function hid_report_len of
    hid-core.c as an inline function in hid.h
    
    Signed-off-by: Mathieu Magnaudet <mathieu.magnaudet@enac.fr>
    Reviewed-by: Benjamin Tissoires <benjamin.tissoires@gmail.com>
    Reviewed-by: David Herrmann <dh.herrmann@gmail.com>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>

diff --git a/include/linux/hid.h b/include/linux/hid.h
index 78ea9bf941cd..2366fda010c8 100644
--- a/include/linux/hid.h
+++ b/include/linux/hid.h
@@ -1063,6 +1063,17 @@ static inline void hid_hw_wait(struct hid_device *hdev)
 		hdev->ll_driver->wait(hdev);
 }
 
+/**
+ * hid_report_len - calculate the report length
+ *
+ * @report: the report we want to know the length
+ */
+static inline int hid_report_len(struct hid_report *report)
+{
+	/* equivalent to DIV_ROUND_UP(report->size, 8) + !!(report->id > 0) */
+	return ((report->size - 1) >> 3) + 1 + (report->id > 0);
+}
+
 int hid_report_raw_event(struct hid_device *hid, int type, u8 *data, int size,
 		int interrupt);
 

commit a45c30ec59342c47604ea074bcf56a43a8cde8aa
Author: JD Cole <jd@jdc.me>
Date:   Fri Oct 31 17:44:42 2014 -0700

    HID: added missing HID Consumer Page identifiers
    
    Adds CA and NAry usage type identifiers.
    
    Signed-off-by: JD Cole <jd.cole@plantronics.com>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>

diff --git a/include/linux/hid.h b/include/linux/hid.h
index a63f2aaed646..58a89ed86acc 100644
--- a/include/linux/hid.h
+++ b/include/linux/hid.h
@@ -236,6 +236,30 @@ struct hid_item {
 #define HID_DG_TABLETPICK	0x000d0046
 
 #define HID_CP_CONSUMERCONTROL	0x000c0001
+#define HID_CP_NUMERICKEYPAD	0x000c0002
+#define HID_CP_PROGRAMMABLEBUTTONS	0x000c0003
+#define HID_CP_MICROPHONE	0x000c0004
+#define HID_CP_HEADPHONE	0x000c0005
+#define HID_CP_GRAPHICEQUALIZER	0x000c0006
+#define HID_CP_FUNCTIONBUTTONS	0x000c0036
+#define HID_CP_SELECTION	0x000c0080
+#define HID_CP_MEDIASELECTION	0x000c0087
+#define HID_CP_SELECTDISC	0x000c00ba
+#define HID_CP_PLAYBACKSPEED	0x000c00f1
+#define HID_CP_PROXIMITY	0x000c0109
+#define HID_CP_SPEAKERSYSTEM	0x000c0160
+#define HID_CP_CHANNELLEFT	0x000c0161
+#define HID_CP_CHANNELRIGHT	0x000c0162
+#define HID_CP_CHANNELCENTER	0x000c0163
+#define HID_CP_CHANNELFRONT	0x000c0164
+#define HID_CP_CHANNELCENTERFRONT	0x000c0165
+#define HID_CP_CHANNELSIDE	0x000c0166
+#define HID_CP_CHANNELSURROUND	0x000c0167
+#define HID_CP_CHANNELLOWFREQUENCYENHANCEMENT	0x000c0168
+#define HID_CP_CHANNELTOP	0x000c0169
+#define HID_CP_CHANNELUNKNOWN	0x000c016a
+#define HID_CP_APPLICATIONLAUNCHBUTTONS	0x000c0180
+#define HID_CP_GENERICGUIAPPLICATIONCONTROLS	0x000c0200
 
 #define HID_DG_CONFIDENCE	0x000d0047
 #define HID_DG_WIDTH		0x000d0048

commit 1a3f83f6493f9d78aa0fe31401fd530b0fe296da
Author: JD Cole <jd@jdc.me>
Date:   Fri Oct 31 17:34:42 2014 -0700

    HID: plantronics: fix errant mouse events
    
    This version of the driver prevents Telephony pages which are not mapped as
    Consumer Control applications AND are not on the Consumer Page from being
    registered by the hid-input driver.
    
    Signed-off-by: JD Cole <jd.cole@plantronics.com>
    Reviewed-by: Dmitry Torokhov <dmitry.torokhov@gmail.com>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>

diff --git a/include/linux/hid.h b/include/linux/hid.h
index 78ea9bf941cd..a63f2aaed646 100644
--- a/include/linux/hid.h
+++ b/include/linux/hid.h
@@ -234,6 +234,9 @@ struct hid_item {
 #define HID_DG_BARRELSWITCH	0x000d0044
 #define HID_DG_ERASER		0x000d0045
 #define HID_DG_TABLETPICK	0x000d0046
+
+#define HID_CP_CONSUMERCONTROL	0x000c0001
+
 #define HID_DG_CONFIDENCE	0x000d0047
 #define HID_DG_WIDTH		0x000d0048
 #define HID_DG_HEIGHT		0x000d0049

commit d610274b0301e5ef35811fa736036d022f707564
Author: Benjamin Tissoires <benjamin.tissoires@redhat.com>
Date:   Tue Sep 30 13:18:25 2014 -0400

    HID: logitech-dj: rely on hid groups to separate receivers from dj devices
    
    Several benefits here:
    - we can drop the macro is_dj_device: I never been really conviced by
      this macro as we could fall into a null pointer anytime. Anyway time
      showed that this never happened.
    - we can simplify the hid driver logitech-djdevice, and make it aware
      of any new receiver VID/PID.
    - we can use the Wireless PID of the DJ device as the product id of the
      hid device, this way the sysfs will differentiate between different
      DJ devices.
    
    Signed-off-by: Benjamin Tisssoires <benjamin.tissoires@redhat.com>
    Tested-by: Andrew de los Reyes <adlr@chromium.org>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>

diff --git a/include/linux/hid.h b/include/linux/hid.h
index 5b1ff6110e25..7d6e0556302a 100644
--- a/include/linux/hid.h
+++ b/include/linux/hid.h
@@ -313,6 +313,7 @@ struct hid_item {
  */
 #define HID_GROUP_RMI				0x0100
 #define HID_GROUP_WACOM				0x0101
+#define HID_GROUP_LOGITECH_DJ_DEVICE		0x0102
 
 /*
  * This is the global environment of the parser. This information is

commit c241c5eea822344639898512780cff823fc7d730
Author: Benjamin Tissoires <benjamin.tissoires@redhat.com>
Date:   Tue Sep 30 13:18:23 2014 -0400

    HID: fix merge from wacom into the HID tree
    
    While merging wacom from the input to the hid tree, some
    comments have been duplicated. We can also integrate the
    test for Synaptics devices in the switch case below, so
    it is clear that there will be only one place for such
    quirks.
    
    No functional changes are expected in this commit.
    
    Signed-off-by: Benjamin Tissoires <benjamin.tissoires@redhat.com>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>

diff --git a/include/linux/hid.h b/include/linux/hid.h
index 78ea9bf941cd..5b1ff6110e25 100644
--- a/include/linux/hid.h
+++ b/include/linux/hid.h
@@ -312,10 +312,6 @@ struct hid_item {
  * Vendor specific HID device groups
  */
 #define HID_GROUP_RMI				0x0100
-
-/*
- * Vendor specific HID device groups
- */
 #define HID_GROUP_WACOM				0x0101
 
 /*

commit ee5db7e47faccd07a8a17f73afb30345f8331e61
Merge: 467669c5740a 5235166fbc33 368d4e59b002 604b607748a5 5b65c2a02966 981c5b4a3b37 8493ecca74a7 5df4eb054fe0 5ae6e89f7409
Author: Jiri Kosina <jkosina@suse.cz>
Date:   Mon Oct 6 23:34:40 2014 +0200

    Merge branches 'for-3.18/always-poll-quirk', 'for-3.18/logitech', 'for-3.18/picolcd', 'for-3.18/rmi', 'for-3.18/sony', 'for-3.18/uhid', 'for-3.18/upstream' and 'for-3.18/wacom' into for-linus

commit 7704ac937345d4b502062952657027234aa86a37
Author: Benjamin Tissoires <benjamin.tissoires@redhat.com>
Date:   Tue Sep 23 12:08:08 2014 -0400

    HID: wacom: implement generic HID handling for pen generic devices
    
    ISDv4 and v5 are plain HID devices. We can directly implement a generic
    HID parsing/handling and remove the need to manually add those PID in
    the list of supported devices.
    
    This patch implements the pen support only. The finger part will come in
    a later patch.
    
    To be properly notified of an .event() and a .report(), we need to force
    hid-core to go through the HID parsing. By default, wacom.ko binds only
    hidraw, so the hid parsing is not done by hid-core. When a true HID device
    is there, we add the flag HID_CLAIMED_DRIVER to hid->claimed which will
    force hid-core to parse the incoming reports.
    (Note that this can be easily backported by directly setting the .claimed
    flag to HID_CLAIMED_DRIVER even if hid-core does not support
    HID_CONNECT_DRIVER)
    
    Signed-off-by: Benjamin Tissoires <benjamin.tissoires@redhat.com>
    Acked-by: Jason Gerecke <killertofu@gmail.com>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>

diff --git a/include/linux/hid.h b/include/linux/hid.h
index f53c4a9cca1d..3dcd00496064 100644
--- a/include/linux/hid.h
+++ b/include/linux/hid.h
@@ -265,6 +265,7 @@ struct hid_item {
 #define HID_CONNECT_HIDDEV		0x08
 #define HID_CONNECT_HIDDEV_FORCE	0x10
 #define HID_CONNECT_FF			0x20
+#define HID_CONNECT_DRIVER		0x40
 #define HID_CONNECT_DEFAULT	(HID_CONNECT_HIDINPUT|HID_CONNECT_HIDRAW| \
 		HID_CONNECT_HIDDEV|HID_CONNECT_FF)
 
@@ -440,6 +441,7 @@ struct hid_output_fifo {
 #define HID_CLAIMED_INPUT	1
 #define HID_CLAIMED_HIDDEV	2
 #define HID_CLAIMED_HIDRAW	4
+#define HID_CLAIMED_DRIVER	8
 
 #define HID_STAT_ADDED		1
 #define HID_STAT_PARSED		2

commit 0b750b3baa2d64f1b77aecc10f20deeb28efe60d
Author: Johan Hovold <johan@kernel.org>
Date:   Fri Sep 5 18:08:47 2014 +0200

    HID: usbhid: add always-poll quirk
    
    Add quirk to make sure that a device is always polled for input events
    even if it hasn't been opened.
    
    This is needed for devices that disconnects from the bus unless the
    interrupt endpoint has been polled at least once or when not responding
    to an input event (e.g. after having shut down X).
    
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>

diff --git a/include/linux/hid.h b/include/linux/hid.h
index f53c4a9cca1d..26ee25fced27 100644
--- a/include/linux/hid.h
+++ b/include/linux/hid.h
@@ -287,6 +287,7 @@ struct hid_item {
 #define HID_QUIRK_HIDINPUT_FORCE		0x00000080
 #define HID_QUIRK_NO_EMPTY_INPUT		0x00000100
 #define HID_QUIRK_NO_INIT_INPUT_REPORTS		0x00000200
+#define HID_QUIRK_ALWAYS_POLL			0x00000400
 #define HID_QUIRK_SKIP_OUTPUT_REPORTS		0x00010000
 #define HID_QUIRK_SKIP_OUTPUT_REPORT_ID		0x00020000
 #define HID_QUIRK_NO_OUTPUT_REPORTS_ON_INTR_EP	0x00040000

commit 664fb23070ae66a023250a83870a5bae7cd0efeb
Merge: 8065be8d032f c704b4ef1a81
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Fri Aug 8 17:39:48 2014 -0700

    Merge branch 'for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/dtor/input
    
    Pull input updates from Dmitry Torokhov:
     - big update to Wacom driver by Benjamin Tissoires, converting it to
       HID infrastructure and unifying USB and Bluetooth models
     - large update to ALPS driver by Hans de Goede, which adds support for
       newer touchpad models as well as cleans up and restructures the code
     - more changes to Atmel MXT driver, including device tree support
     - new driver for iPaq x3xxx touchscreen
     - driver for serial Wacom tablets
     - driver for Microchip's CAP1106
     - assorted cleanups and improvements to existing drover and input core
    
    * 'for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/dtor/input: (93 commits)
      Input: wacom - update the ABI doc according to latest changes
      Input: wacom - only register once the MODULE_* macros
      Input: HID - remove hid-wacom Bluetooth driver
      Input: wacom - add copyright note and bump version to 2.0
      Input: wacom - remove passing id for wacom_set_report
      Input: wacom - check for bluetooth protocol while setting OLEDs
      Input: wacom - handle Intuos 4 BT in wacom.ko
      Input: wacom - handle Graphire BT tablets in wacom.ko
      Input: wacom - prepare the driver to include BT devices
      Input: hyperv-keyboard - register as a wakeup source
      Input: imx_keypad - remove ifdef round PM methods
      Input: jornada720_ts - get rid of space indentation and use tab
      Input: jornada720_ts - switch to using managed resources
      Input: alps - Rushmore and v7 resolution support
      Input: mcs5000_ts - remove ifdef around power management methods
      Input: mcs5000_ts - protect PM functions with CONFIG_PM_SLEEP
      Input: ads7846 - release resources on failure for clean exit
      Input: wacom - add support for 0x12C ISDv4 sensor
      Input: atmel_mxt_ts - use deep sleep mode when stopped
      ARM: dts: am437x-gp-evm: Update binding for touchscreen size
      ...

commit f3d4ff0e04cc4450bdc7a4140020913b1280d205
Author: Jamie Lentin <jm@lentin.co.uk>
Date:   Wed Jul 23 23:30:48 2014 +0100

    HID: lenovo: Add support for Compact (BT|USB) keyboard
    
    Add support for both ThinkPad Compact Bluetooth Keyboard with
    TrackPoint and ThinkPad Compact USB Keyboard with TrackPoint.
    
    Signed-off-by: Jamie Lentin <jm@lentin.co.uk>
    Reviewed-by: Antonio Ospite <ao2@ao2.it>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>

diff --git a/include/linux/hid.h b/include/linux/hid.h
index 77632cf159c0..fca74f1d5c84 100644
--- a/include/linux/hid.h
+++ b/include/linux/hid.h
@@ -167,6 +167,7 @@ struct hid_item {
 #define HID_UP_MSVENDOR		0xff000000
 #define HID_UP_CUSTOM		0x00ff0000
 #define HID_UP_LOGIVENDOR	0xffbc0000
+#define HID_UP_LNVENDOR		0xffa00000
 #define HID_UP_SENSOR		0x00200000
 
 #define HID_USAGE		0x0000ffff

commit 29b4739134c73a2873adec93346f09bb76d6a794
Author: Benjamin Tissoires <benjamin.tissoires@redhat.com>
Date:   Thu Jul 24 12:52:23 2014 -0700

    Input: wacom - switch from an USB driver to a HID driver
    
    All USB Wacom tablets are actually HID devices.
    For historical reasons, they are handled as plain USB devices.
    The current code makes more and more reference to the HID subsystem
    like implementing its own HID report descriptor parser to handle new
    devices.
    
    From the user point of view, we can transparently switch from this state
    to a driver handled in the HID subsystem and clean up a lot of USB specific
    code in the wacom.ko driver.
    
    The other benefit once the USB dependecies have been removed is that we can
    use a tool like uhid to make regression tests and allow further cleanup or
    new implementations without risking breaking current behaviors.
    
    To match the current handling of devices in wacom_wac.c, we rely on the
    hid_type set by usbhid. usbhid sets the hid_type to HID_TYPE_USBMOUSE when
    it sees a USB boot mouse protocol declared and HID_TYPE_USBNONE when the
    device is plain HID. There is thus a one to one matching between the list
    of supported devices before and after the switch from USB to HID.
    
    Signed-off-by: Benjamin Tissoires <benjamin.tissoires@redhat.com>
    Reviewed-by: Jason Gerecke <killertofu@gmail.com>
    Tested-by: Jason Gerecke <killertofu@gmail.com>
    Signed-off-by: Dmitry Torokhov <dmitry.torokhov@gmail.com>

diff --git a/include/linux/hid.h b/include/linux/hid.h
index 77632cf159c0..07fa80671db0 100644
--- a/include/linux/hid.h
+++ b/include/linux/hid.h
@@ -310,6 +310,11 @@ struct hid_item {
  */
 #define HID_GROUP_RMI				0x0100
 
+/*
+ * Vendor specific HID device groups
+ */
+#define HID_GROUP_WACOM				0x0101
+
 /*
  * This is the global environment of the parser. This information is
  * persistent for main-items. The global environment can be saved and

commit beea3f4a29e76561a3aa02cf5314c91a06150f60
Merge: af5666e0f760 f58b8487bcc8 ba391e5a5ac6 88f6576fa155 e4aecaf2f53b
Author: Jiri Kosina <jkosina@suse.cz>
Date:   Wed Jun 4 13:09:43 2014 +0200

    Merge branches 'for-3.16/i2c-hid', 'for-3.16/rmi4', 'for-3.16/sony' and 'for-3.16/thingm' into for-linus

commit 368c96640d10a145da5f258f2d2833668d4f3629
Author: Ping Cheng <pinglinux@gmail.com>
Date:   Mon Jun 2 17:19:52 2014 -0700

    HID: core: add two new usages for digitizer
    
    On Feb 17, 2014, two new usages are approved to HID usage Table 18 -
    Digitizer Page:
    
    5A      Secondary Barrel Switch         MC      16.4
    5B      Transducer Serial Number        SV      16.3.1
    
    This patch adds relevant definitions to hid/input. It also removes
    outdated comments in hid.h.
    
    Signed-off-by: Ping Cheng <pingc@wacom.com>
    Reviewed-by: Benjamin Tissoires <benjamin.tissoires@redhat.com>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>

diff --git a/include/linux/hid.h b/include/linux/hid.h
index 720e3a10608c..a468ec8cc4fe 100644
--- a/include/linux/hid.h
+++ b/include/linux/hid.h
@@ -233,11 +233,6 @@ struct hid_item {
 #define HID_DG_BARRELSWITCH	0x000d0044
 #define HID_DG_ERASER		0x000d0045
 #define HID_DG_TABLETPICK	0x000d0046
-/*
- * as of May 20, 2009 the usages below are not yet in the official USB spec
- * but are being pushed by Microsft as described in their paper "Digitizer
- * Drivers for Windows Touch and Pen-Based Computers"
- */
 #define HID_DG_CONFIDENCE	0x000d0047
 #define HID_DG_WIDTH		0x000d0048
 #define HID_DG_HEIGHT		0x000d0049
@@ -246,6 +241,8 @@ struct hid_item {
 #define HID_DG_DEVICEINDEX	0x000d0053
 #define HID_DG_CONTACTCOUNT	0x000d0054
 #define HID_DG_CONTACTMAX	0x000d0055
+#define HID_DG_BARRELSWITCH2	0x000d005a
+#define HID_DG_TOOLSERIALNUMBER	0x000d005b
 
 /*
  * HID report types --- Ouch! HID spec says 1 2 3!

commit ba391e5a5ac6697b8bcae8c0d01439cb765d9ef8
Author: Benjamin Tissoires <benjamin.tissoires@redhat.com>
Date:   Wed May 21 11:15:56 2014 -0400

    HID: rmi: do not handle touchscreens through hid-rmi
    
    Currently, hid-rmi drives every Synaptics product, but the touchscreens
    on the Windows tablets should be handled through hid-multitouch.
    
    Instead of providing a long list of PIDs, rely on the scan_report
    capability to detect which should go to hid-multitouch, and which
    should not go to hid-rmi.
    
    related bug:
    https://bugzilla.kernel.org/show_bug.cgi?id=74241
    https://bugzilla.redhat.com/show_bug.cgi?id=1089583
    
    Signed-off-by: Benjamin Tissoires <benjamin.tissoires@redhat.com>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>

diff --git a/include/linux/hid.h b/include/linux/hid.h
index 54f855b2c902..8ce9ff4d50af 100644
--- a/include/linux/hid.h
+++ b/include/linux/hid.h
@@ -299,12 +299,20 @@ struct hid_item {
 
 /*
  * HID device groups
+ *
+ * Note: HID_GROUP_ANY is declared in linux/mod_devicetable.h
+ * and has a value of 0x0000
  */
 #define HID_GROUP_GENERIC			0x0001
 #define HID_GROUP_MULTITOUCH			0x0002
 #define HID_GROUP_SENSOR_HUB			0x0003
 #define HID_GROUP_MULTITOUCH_WIN_8		0x0004
 
+/*
+ * Vendor specific HID device groups
+ */
+#define HID_GROUP_RMI				0x0100
+
 /*
  * This is the global environment of the parser. This information is
  * persistent for main-items. The global environment can be saved and

commit 9fb6bf02e3ad04c20edb8e46536ce3eeda32c736
Author: Benjamin Tissoires <benjamin.tissoires@redhat.com>
Date:   Mon Apr 7 13:39:33 2014 -0400

    HID: rmi: introduce RMI driver for Synaptics touchpads
    
    This driver add support for RMI4 over USB or I2C.
    The current state is that it uses its own RMI4 implementation, but once
    RMI4 is merged upstream, the driver will be a transport driver for the
    RMI4 library.
    
    Part of this driver should be considered as temporary. Most of the RMI4
    processing and input handling will be deleted at some point.
    
    I based my work on Andrew's regarding its port of RMI4 over HID (see
    https://github.com/mightybigcar/synaptics-rmi4/tree/rmihid )
    This repo presents how the driver may looks like at the end:
    https://github.com/mightybigcar/synaptics-rmi4/blob/rmihid/drivers/input/rmi4/rmi_hid.c
    
    Without this temporary solution, the workaround we gave to users
    is to disable i2c-hid, which leads to disabling the touchscreen on the
    XPS 11 and 12 (Haswell generation).
    
    Related bugs:
    https://bugzilla.redhat.com/show_bug.cgi?id=1048314
    https://bugs.launchpad.net/ubuntu/+source/linux/+bug/1218973
    
    Signed-off-by: Andrew Duggan <aduggan@synaptics.com>
    Signed-off-by: Benjamin Tissoires <benjamin.tissoires@redhat.com>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>

diff --git a/include/linux/hid.h b/include/linux/hid.h
index 720e3a10608c..54f855b2c902 100644
--- a/include/linux/hid.h
+++ b/include/linux/hid.h
@@ -570,6 +570,8 @@ struct hid_descriptor {
 	.bus = BUS_USB, .vendor = (ven), .product = (prod)
 #define HID_BLUETOOTH_DEVICE(ven, prod)					\
 	.bus = BUS_BLUETOOTH, .vendor = (ven), .product = (prod)
+#define HID_I2C_DEVICE(ven, prod)				\
+	.bus = BUS_I2C, .vendor = (ven), .product = (prod)
 
 #define HID_REPORT_ID(rep) \
 	.report_type = (rep)

commit fa1054a29b21e4c932b5c93def600149451cec32
Merge: 6cf8c85f8bc3 9abebedb123a b95dd3ca034a 4522643aa963
Author: Jiri Kosina <jkosina@suse.cz>
Date:   Tue Apr 1 19:06:50 2014 +0200

    Merge branches 'for-3.15/multitouch', 'for-3.15/sony' and 'for-3.15/uhid' into for-linus

commit 6fd182028c43baf1c7d017d52b0134ecadbdc447
Author: Benjamin Tissoires <benjamin.tissoires@redhat.com>
Date:   Sat Mar 8 22:52:43 2014 -0500

    HID: remove hid_output_raw_report transport implementations
    
    Nobody calls hid_output_raw_report anymore, and nobody should.
    We can now remove the various implementation in the different
    transport drivers and the declarations.
    
    Reviewed-by: David Herrmann <dh.herrmann@gmail.com>
    Signed-off-by: Benjamin Tissoires <benjamin.tissoires@redhat.com>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>

diff --git a/include/linux/hid.h b/include/linux/hid.h
index 3fe444f4a36f..01a90b8d53bb 100644
--- a/include/linux/hid.h
+++ b/include/linux/hid.h
@@ -510,9 +510,6 @@ struct hid_device {							/* device report descriptor */
 				  struct hid_usage *, __s32);
 	void (*hiddev_report_event) (struct hid_device *, struct hid_report *);
 
-	/* handler for raw output data, used by hidraw */
-	int (*hid_output_raw_report) (struct hid_device *, __u8 *, size_t, unsigned char);
-
 	/* debugging support via debugfs */
 	unsigned short debug;
 	struct dentry *debug_dir;
@@ -1019,22 +1016,6 @@ static inline int hid_hw_output_report(struct hid_device *hdev, __u8 *buf,
 	return -ENOSYS;
 }
 
-/**
- * hid_output_raw_report - send an output or a feature report to the device
- *
- * @hdev: hid device
- * @buf: raw data to transfer
- * @len: length of buf
- * @report_type: HID_FEATURE_REPORT or HID_OUTPUT_REPORT
- *
- * @return: count of data transfered, negative if error
- */
-static inline int hid_output_raw_report(struct hid_device *hdev, __u8 *buf,
-					size_t len, unsigned char report_type)
-{
-	return hdev->hid_output_raw_report(hdev, buf, len, report_type);
-}
-
 /**
  * hid_hw_idle - send idle request to device
  *

commit e534a9352237e84263cecedff283387b144b3ed8
Author: Benjamin Tissoires <benjamin.tissoires@redhat.com>
Date:   Sat Mar 8 22:52:42 2014 -0500

    HID: sony: do not rely on hid_output_raw_report
    
    hid_out_raw_report is going to be obsoleted as it is not part of the
    unified HID low level transport documentation
    (Documentation/hid/hid-transport.txt)
    
    To do so, we need to introduce two new quirks:
    * HID_QUIRK_NO_OUTPUT_REPORTS_ON_INTR_EP: this quirks prevents the
      transport driver to use the interrupt channel to send output report
      (and thus force to use HID_REQ_SET_REPORT command)
    * HID_QUIRK_SKIP_OUTPUT_REPORT_ID: this one forces usbhid to not
      include the report ID in the buffer it sends to the device through
      HID_REQ_SET_REPORT in case of an output report
    
    This also fixes a regression introduced in commit 3a75b24949a8
    (HID: hidraw: replace hid_output_raw_report() calls by appropriates ones).
    The hidraw API was not able to communicate with the PS3 SixAxis
    controllers in USB mode.
    
    Reviewed-by: David Herrmann <dh.herrmann@gmail.com>
    Signed-off-by: Benjamin Tissoires <benjamin.tissoires@redhat.com>
    Tested-by: Antonio Ospite <ao2@ao2.it>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>

diff --git a/include/linux/hid.h b/include/linux/hid.h
index 5eb282e0dff7..3fe444f4a36f 100644
--- a/include/linux/hid.h
+++ b/include/linux/hid.h
@@ -287,6 +287,8 @@ struct hid_item {
 #define HID_QUIRK_NO_EMPTY_INPUT		0x00000100
 #define HID_QUIRK_NO_INIT_INPUT_REPORTS		0x00000200
 #define HID_QUIRK_SKIP_OUTPUT_REPORTS		0x00010000
+#define HID_QUIRK_SKIP_OUTPUT_REPORT_ID		0x00020000
+#define HID_QUIRK_NO_OUTPUT_REPORTS_ON_INTR_EP	0x00040000
 #define HID_QUIRK_FULLSPEED_INTERVAL		0x10000000
 #define HID_QUIRK_NO_INIT_REPORTS		0x20000000
 #define HID_QUIRK_NO_IGNORE			0x40000000

commit 6aef704e38293524067505eeafec9c811b18d66a
Author: Benjamin Tissoires <benjamin.tissoires@redhat.com>
Date:   Fri Feb 28 11:41:25 2014 -0500

    HID: multitouch: add support of other generic collections in hid-mt
    
    The ANTON Touch Pad is a device which can switch from a multitouch
    touchpad to a mouse. It thus presents several generic collections which
    are currently ignored by hid-multitouch. Enable them by not ignoring
    them in mt_input_mapping.
    Adding also a suffix for them depending on their application.
    
    Reported-by: Edel Maks <edelmaks@gmail.com>
    Signed-off-by: Benjamin Tissoires <benjamin.tissoires@redhat.com>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>

diff --git a/include/linux/hid.h b/include/linux/hid.h
index 5eb282e0dff7..e224516cc565 100644
--- a/include/linux/hid.h
+++ b/include/linux/hid.h
@@ -201,6 +201,7 @@ struct hid_item {
 #define HID_GD_VBRZ		0x00010045
 #define HID_GD_VNO		0x00010046
 #define HID_GD_FEATURE		0x00010047
+#define HID_GD_SYSTEM_CONTROL	0x00010080
 #define HID_GD_UP		0x00010090
 #define HID_GD_DOWN		0x00010091
 #define HID_GD_RIGHT		0x00010092
@@ -208,6 +209,8 @@ struct hid_item {
 
 #define HID_DC_BATTERYSTRENGTH	0x00060020
 
+#define HID_CP_CONSUMER_CONTROL	0x000c0001
+
 #define HID_DG_DIGITIZER	0x000d0001
 #define HID_DG_PEN		0x000d0002
 #define HID_DG_LIGHTPEN		0x000d0003

commit 3c86726cfe38952f0366f86acfbbb025813ec1c2
Author: Benjamin Tissoires <benjamin.tissoires@redhat.com>
Date:   Thu Feb 20 15:24:49 2014 -0500

    HID: make .raw_request mandatory
    
    SET_REPORT and GET_REPORT are mandatory in the HID specification.
    Make the corresponding API in hid-core mandatory too, which removes the
    need to test against it in some various places.
    
    Signed-off-by: Benjamin Tissoires <benjamin.tissoires@redhat.com>
    Reviewed-by: David Herrmann <dh.herrmann@gmail.com>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>

diff --git a/include/linux/hid.h b/include/linux/hid.h
index 60f3ff762376..5eb282e0dff7 100644
--- a/include/linux/hid.h
+++ b/include/linux/hid.h
@@ -992,11 +992,8 @@ static inline int hid_hw_raw_request(struct hid_device *hdev,
 	if (len < 1 || len > HID_MAX_BUFFER_SIZE || !buf)
 		return -EINVAL;
 
-	if (hdev->ll_driver->raw_request)
-		return hdev->ll_driver->raw_request(hdev, reportnum, buf, len,
+	return hdev->ll_driver->raw_request(hdev, reportnum, buf, len,
 						    rtype, reqtype);
-
-	return -ENOSYS;
 }
 
 /**

commit 5318251744b2c8a288f91f4e53ed69f2a01d6412
Author: Benjamin Tissoires <benjamin.tissoires@redhat.com>
Date:   Mon Feb 10 12:58:59 2014 -0500

    HID: core: check parameters when sending/receiving data from the device
    
    It is better to check them soon enough before triggering any kernel panic.
    
    Signed-off-by: Benjamin Tissoires <benjamin.tissoires@redhat.com>
    Reviewed-by: David Herrmann <dh.herrmann@gmail.com>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>

diff --git a/include/linux/hid.h b/include/linux/hid.h
index 09fbbd7fb784..60f3ff762376 100644
--- a/include/linux/hid.h
+++ b/include/linux/hid.h
@@ -989,6 +989,9 @@ static inline int hid_hw_raw_request(struct hid_device *hdev,
 				  unsigned char reportnum, __u8 *buf,
 				  size_t len, unsigned char rtype, int reqtype)
 {
+	if (len < 1 || len > HID_MAX_BUFFER_SIZE || !buf)
+		return -EINVAL;
+
 	if (hdev->ll_driver->raw_request)
 		return hdev->ll_driver->raw_request(hdev, reportnum, buf, len,
 						    rtype, reqtype);
@@ -1008,6 +1011,9 @@ static inline int hid_hw_raw_request(struct hid_device *hdev,
 static inline int hid_hw_output_report(struct hid_device *hdev, __u8 *buf,
 					size_t len)
 {
+	if (len < 1 || len > HID_MAX_BUFFER_SIZE || !buf)
+		return -EINVAL;
+
 	if (hdev->ll_driver->output_report)
 		return hdev->ll_driver->output_report(hdev, buf, len);
 

commit 4fa5a7f76cc7b6ac87f57741edd2b124851d119f
Author: Benjamin Tissoires <benjamin.tissoires@redhat.com>
Date:   Mon Feb 10 12:58:48 2014 -0500

    HID: core: implement generic .request()
    
    .request() can be emulated through .raw_request()
    we can implement this emulation in hid-core, and make .request
    not mandatory for transport layer drivers.
    
    Signed-off-by: Benjamin Tissoires <benjamin.tissoires@redhat.com>
    Reviewed-by: David Herrmann <dh.herrmann@gmail.com>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>

diff --git a/include/linux/hid.h b/include/linux/hid.h
index a837ede65ec6..09fbbd7fb784 100644
--- a/include/linux/hid.h
+++ b/include/linux/hid.h
@@ -753,6 +753,7 @@ struct hid_field *hidinput_get_led_field(struct hid_device *hid);
 unsigned int hidinput_count_leds(struct hid_device *hid);
 __s32 hidinput_calc_abs_res(const struct hid_field *field, __u16 code);
 void hid_output_report(struct hid_report *report, __u8 *data);
+void __hid_request(struct hid_device *hid, struct hid_report *rep, int reqtype);
 u8 *hid_alloc_report_buf(struct hid_report *report, gfp_t flags);
 struct hid_device *hid_allocate_device(void);
 struct hid_report *hid_register_report(struct hid_device *device, unsigned type, unsigned id);
@@ -965,7 +966,9 @@ static inline void hid_hw_request(struct hid_device *hdev,
 				  struct hid_report *report, int reqtype)
 {
 	if (hdev->ll_driver->request)
-		hdev->ll_driver->request(hdev, report, reqtype);
+		return hdev->ll_driver->request(hdev, report, reqtype);
+
+	__hid_request(hdev, report, reqtype);
 }
 
 /**

commit 7e845d46b13e7730a3720e978c28117ce422edf9
Author: Benjamin Tissoires <benjamin.tissoires@redhat.com>
Date:   Wed Feb 5 16:33:23 2014 -0500

    HID: introduce helper to access hid_output_raw_report()
    
    Add a helper to access hdev->hid_output_raw_report().
    
    To convert the drivers, use the following snippets:
    
    for i in drivers/hid/*.c
    do
      sed -i.bak "s/[^ \t]*->hid_output_raw_report(/hid_output_raw_report(/g" $i
    done
    
    Then manually fix for checkpatch.pl
    
    Reviewed-by: David Herrmann <dh.herrmann@gmail.com>
    Signed-off-by: Benjamin Tissoires <benjamin.tissoires@redhat.com>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>

diff --git a/include/linux/hid.h b/include/linux/hid.h
index c56681a66b0b..a837ede65ec6 100644
--- a/include/linux/hid.h
+++ b/include/linux/hid.h
@@ -1011,6 +1011,22 @@ static inline int hid_hw_output_report(struct hid_device *hdev, __u8 *buf,
 	return -ENOSYS;
 }
 
+/**
+ * hid_output_raw_report - send an output or a feature report to the device
+ *
+ * @hdev: hid device
+ * @buf: raw data to transfer
+ * @len: length of buf
+ * @report_type: HID_FEATURE_REPORT or HID_OUTPUT_REPORT
+ *
+ * @return: count of data transfered, negative if error
+ */
+static inline int hid_output_raw_report(struct hid_device *hdev, __u8 *buf,
+					size_t len, unsigned char report_type)
+{
+	return hdev->hid_output_raw_report(hdev, buf, len, report_type);
+}
+
 /**
  * hid_hw_idle - send idle request to device
  *

commit cafebc058bf86e63fff5354864781d3de11e41d3
Author: Benjamin Tissoires <benjamin.tissoires@redhat.com>
Date:   Wed Feb 5 16:33:22 2014 -0500

    HID: remove hid_get_raw_report in struct hid_device
    
    dev->hid_get_raw_report(X) and hid_hw_raw_request(X, HID_REQ_GET_REPORT)
    are strictly equivalent. Switch the hid subsystem to the hid_hw notation
    and remove the field .hid_get_raw_report in struct hid_device.
    
    Reviewed-by: David Herrmann <dh.herrmann@gmail.com>
    Signed-off-by: Benjamin Tissoires <benjamin.tissoires@redhat.com>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>

diff --git a/include/linux/hid.h b/include/linux/hid.h
index 38c307b8138a..c56681a66b0b 100644
--- a/include/linux/hid.h
+++ b/include/linux/hid.h
@@ -508,9 +508,6 @@ struct hid_device {							/* device report descriptor */
 				  struct hid_usage *, __s32);
 	void (*hiddev_report_event) (struct hid_device *, struct hid_report *);
 
-	/* handler for raw input (Get_Report) data, used by hidraw */
-	int (*hid_get_raw_report) (struct hid_device *, unsigned char, __u8 *, size_t, unsigned char);
-
 	/* handler for raw output data, used by hidraw */
 	int (*hid_output_raw_report) (struct hid_device *, __u8 *, size_t, unsigned char);
 

commit b40272e4d0e6d07a0bf9409e5f95d622422cd73d
Author: Benjamin Tissoires <benjamin.tissoires@redhat.com>
Date:   Wed Feb 5 16:33:19 2014 -0500

    HID: remove hidinput_input_event handler
    
    All the different transport drivers use now the generic event handling
    in hid-input. We can remove the handler definitively now.
    
    Reviewed-by: David Herrmann <dh.herrmann@gmail.com>
    Signed-off-by: Benjamin Tissoires <benjamin.tissoires@redhat.com>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>

diff --git a/include/linux/hid.h b/include/linux/hid.h
index dddcad07c2d9..38c307b8138a 100644
--- a/include/linux/hid.h
+++ b/include/linux/hid.h
@@ -675,7 +675,6 @@ struct hid_driver {
  * @stop: called on remove
  * @open: called by input layer on open
  * @close: called by input layer on close
- * @hidinput_input_event: event input event (e.g. ff or leds)
  * @parse: this method is called only once to parse the device data,
  *	   shouldn't allocate anything to not leak memory
  * @request: send report request to device (e.g. feature report)
@@ -693,9 +692,6 @@ struct hid_ll_driver {
 
 	int (*power)(struct hid_device *hdev, int level);
 
-	int (*hidinput_input_event) (struct input_dev *idev, unsigned int type,
-			unsigned int code, int value);
-
 	int (*parse)(struct hid_device *hdev);
 
 	void (*request)(struct hid_device *hdev,

commit b69d6536794c93dda362ab79c9f559382e3465be
Author: Benjamin Tissoires <benjamin.tissoires@redhat.com>
Date:   Wed Feb 5 16:33:16 2014 -0500

    HID: add inliners for ll_driver transport-layer callbacks
    
    Those callbacks are not mandatory, so it's better to add inliners
    to use them safely.
    
    Reviewed-by: David Herrmann <dh.herrmann@gmail.com>
    Signed-off-by: Benjamin Tissoires <benjamin.tissoires@redhat.com>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>

diff --git a/include/linux/hid.h b/include/linux/hid.h
index 003cc8e89831..dddcad07c2d9 100644
--- a/include/linux/hid.h
+++ b/include/linux/hid.h
@@ -680,6 +680,8 @@ struct hid_driver {
  *	   shouldn't allocate anything to not leak memory
  * @request: send report request to device (e.g. feature report)
  * @wait: wait for buffered io to complete (send/recv reports)
+ * @raw_request: send raw report request to device (e.g. feature report)
+ * @output_report: send output report to device
  * @idle: send idle request to device
  */
 struct hid_ll_driver {
@@ -973,6 +975,49 @@ static inline void hid_hw_request(struct hid_device *hdev,
 		hdev->ll_driver->request(hdev, report, reqtype);
 }
 
+/**
+ * hid_hw_raw_request - send report request to device
+ *
+ * @hdev: hid device
+ * @reportnum: report ID
+ * @buf: in/out data to transfer
+ * @len: length of buf
+ * @rtype: HID report type
+ * @reqtype: HID_REQ_GET_REPORT or HID_REQ_SET_REPORT
+ *
+ * @return: count of data transfered, negative if error
+ *
+ * Same behavior as hid_hw_request, but with raw buffers instead.
+ */
+static inline int hid_hw_raw_request(struct hid_device *hdev,
+				  unsigned char reportnum, __u8 *buf,
+				  size_t len, unsigned char rtype, int reqtype)
+{
+	if (hdev->ll_driver->raw_request)
+		return hdev->ll_driver->raw_request(hdev, reportnum, buf, len,
+						    rtype, reqtype);
+
+	return -ENOSYS;
+}
+
+/**
+ * hid_hw_output_report - send output report to device
+ *
+ * @hdev: hid device
+ * @buf: raw data to transfer
+ * @len: length of buf
+ *
+ * @return: count of data transfered, negative if error
+ */
+static inline int hid_hw_output_report(struct hid_device *hdev, __u8 *buf,
+					size_t len)
+{
+	if (hdev->ll_driver->output_report)
+		return hdev->ll_driver->output_report(hdev, buf, len);
+
+	return -ENOSYS;
+}
+
 /**
  * hid_hw_idle - send idle request to device
  *

commit cd4dc0821bc97947f25c8483a4aa0711bff8619a
Author: Frank Praznik <frank.praznik@oh.rr.com>
Date:   Wed Jan 22 13:49:41 2014 -0500

    HID: Add transport-driver callbacks to the hid_ll_driver struct
    
    Add raw_request and output_report callbacks to the hid_ll_driver struct.
    
    Signed-off-by: Frank Praznik <frank.praznik@oh.rr.com>
    Acked-by: David Herrmann <dh.herrmann@gmail.com>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>

diff --git a/include/linux/hid.h b/include/linux/hid.h
index 31b9d299ef6c..003cc8e89831 100644
--- a/include/linux/hid.h
+++ b/include/linux/hid.h
@@ -700,8 +700,14 @@ struct hid_ll_driver {
 			struct hid_report *report, int reqtype);
 
 	int (*wait)(struct hid_device *hdev);
-	int (*idle)(struct hid_device *hdev, int report, int idle, int reqtype);
 
+	int (*raw_request) (struct hid_device *hdev, unsigned char reportnum,
+			    __u8 *buf, size_t len, unsigned char rtype,
+			    int reqtype);
+
+	int (*output_report) (struct hid_device *hdev, __u8 *buf, size_t len);
+
+	int (*idle)(struct hid_device *hdev, int report, int idle, int reqtype);
 };
 
 #define	PM_HINT_FULLON	1<<5

commit 331415ff16a12147d57d5c953f3a961b7ede348b
Author: Kees Cook <keescook@chromium.org>
Date:   Wed Sep 11 21:56:50 2013 +0200

    HID: provide a helper for validating hid reports
    
    Many drivers need to validate the characteristics of their HID report
    during initialization to avoid misusing the reports. This adds a common
    helper to perform validation of the report exisitng, the field existing,
    and the expected number of values within the field.
    
    Signed-off-by: Kees Cook <keescook@chromium.org>
    Cc: stable@vger.kernel.org
    Reviewed-by: Benjamin Tissoires <benjamin.tissoires@redhat.com>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>

diff --git a/include/linux/hid.h b/include/linux/hid.h
index ee1ffc5e19c9..31b9d299ef6c 100644
--- a/include/linux/hid.h
+++ b/include/linux/hid.h
@@ -756,6 +756,10 @@ u8 *hid_alloc_report_buf(struct hid_report *report, gfp_t flags);
 struct hid_device *hid_allocate_device(void);
 struct hid_report *hid_register_report(struct hid_device *device, unsigned type, unsigned id);
 int hid_parse_report(struct hid_device *hid, __u8 *start, unsigned size);
+struct hid_report *hid_validate_values(struct hid_device *hid,
+				       unsigned int type, unsigned int id,
+				       unsigned int field_index,
+				       unsigned int report_counts);
 int hid_open_report(struct hid_device *device);
 int hid_check_keys_pressed(struct hid_device *hid);
 int hid_connect(struct hid_device *hid, unsigned int connect_mask);

commit 63faf15dba4a7d6fb18ed5c45670a152d0c5330b
Merge: 75ba899e9521 3d7d248cf484 ddf7540e9c3a 595e9276ce68 50c9d75b6f01 f5e4e7fdd576 27f1d2f9acf2 95f712662d96
Author: Jiri Kosina <jkosina@suse.cz>
Date:   Fri Sep 6 11:58:37 2013 +0200

    Merge branches 'for-3.12/devm', 'for-3.12/i2c-hid', 'for-3.12/i2c-hid-dt', 'for-3.12/logitech', 'for-3.12/multitouch-win8', 'for-3.12/trasnport-driver-cleanup', 'for-3.12/uhid', 'for-3.12/upstream' and 'for-3.12/wiimote' into for-linus

commit 39054a5afbb05f83aaa26f6cf55027e269744ba3
Author: David Herrmann <dh.herrmann@gmail.com>
Date:   Mon Sep 2 14:00:05 2013 +0200

    HID: move HID_REPORT_TYPES closer to the report-definitions
    
    HID_REPORT_TYPES defines the number of available report-types. Move it
    closer to the actualy definition of the report-types so we can see the
    relation more clearly (and hopefully will never forget to update it).
    
    Signed-off-by: David Herrmann <dh.herrmann@gmail.com>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>

diff --git a/include/linux/hid.h b/include/linux/hid.h
index d50137691a78..729bf27aac8f 100644
--- a/include/linux/hid.h
+++ b/include/linux/hid.h
@@ -252,6 +252,8 @@ struct hid_item {
 #define HID_OUTPUT_REPORT	1
 #define HID_FEATURE_REPORT	2
 
+#define HID_REPORT_TYPES	3
+
 /*
  * HID connect requests
  */
@@ -401,8 +403,6 @@ struct hid_report_enum {
 	struct hid_report *report_id_hash[HID_MAX_IDS];
 };
 
-#define HID_REPORT_TYPES 3
-
 #define HID_MIN_BUFFER_SIZE	64		/* make sure there is at least a packet size of space */
 #define HID_MAX_BUFFER_SIZE	4096		/* 4kb */
 #define HID_CONTROL_FIFO_SIZE	256		/* to init devices with >100 reports */

commit 47ab1a2de42031021965b81cbab4f3b4c5696d07
Merge: be67b68d52fa 43622021d2e2
Author: Jiri Kosina <jkosina@suse.cz>
Date:   Wed Sep 4 12:06:25 2013 +0200

    Merge branch 'for-3.11/CVE-2013-2888' into for-3.12/upstream
    
    This one didn't make it for 3.11 due to being applied too close
    to release, queue it for 3.12 merge window.
    
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>

commit 43622021d2e2b82ea03d883926605bdd0525e1d1
Author: Kees Cook <keescook@chromium.org>
Date:   Wed Aug 28 22:29:55 2013 +0200

    HID: validate HID report id size
    
    The "Report ID" field of a HID report is used to build indexes of
    reports. The kernel's index of these is limited to 256 entries, so any
    malicious device that sets a Report ID greater than 255 will trigger
    memory corruption on the host:
    
    [ 1347.156239] BUG: unable to handle kernel paging request at ffff88094958a878
    [ 1347.156261] IP: [<ffffffff813e4da0>] hid_register_report+0x2a/0x8b
    
    CVE-2013-2888
    
    Signed-off-by: Kees Cook <keescook@chromium.org>
    Cc: stable@kernel.org
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>

diff --git a/include/linux/hid.h b/include/linux/hid.h
index 0c48991b0402..ff545cc33c3a 100644
--- a/include/linux/hid.h
+++ b/include/linux/hid.h
@@ -393,10 +393,12 @@ struct hid_report {
 	struct hid_device *device;			/* associated device */
 };
 
+#define HID_MAX_IDS 256
+
 struct hid_report_enum {
 	unsigned numbered;
 	struct list_head report_list;
-	struct hid_report *report_id_hash[256];
+	struct hid_report *report_id_hash[HID_MAX_IDS];
 };
 
 #define HID_REPORT_TYPES 3

commit 595e9276ce68791317484ec7f0f9f2e0457c3b34
Author: Benjamin Tissoires <benjamin.tissoires@redhat.com>
Date:   Thu Aug 22 14:51:09 2013 +0200

    HID: do not init input reports for Win 8 multitouch devices
    
    Some multitouch screens do not like to be polled for input reports.
    However, the Win8 spec says that all touches should be sent during
    each report, making the initialization of reports unnecessary.
    The Win7 spec is less precise, so do not use this for those devices.
    
    Add the quirk HID_QUIRK_NO_INIT_INPUT_REPORTS so that we do not have to
    introduce a quirk for each problematic device. This quirk makes the driver
    behave the same way the Win 8 does. It actually retrieves the features,
    but not the inputs.
    
    Signed-off-by: Benjamin Tissoires <benjamin.tissoires@redhat.com>
    Reviewed-by: Henrik Rydberg <rydberg@euromail.se>
    Tested-by: Srinivas Pandruvada<srinivas.pandruvada@linux.intel.com>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>

diff --git a/include/linux/hid.h b/include/linux/hid.h
index cef1e9b86cc4..bc132d2a20aa 100644
--- a/include/linux/hid.h
+++ b/include/linux/hid.h
@@ -283,6 +283,7 @@ struct hid_item {
 #define HID_QUIRK_MULTI_INPUT			0x00000040
 #define HID_QUIRK_HIDINPUT_FORCE		0x00000080
 #define HID_QUIRK_NO_EMPTY_INPUT		0x00000100
+#define HID_QUIRK_NO_INIT_INPUT_REPORTS		0x00000200
 #define HID_QUIRK_SKIP_OUTPUT_REPORTS		0x00010000
 #define HID_QUIRK_FULLSPEED_INTERVAL		0x10000000
 #define HID_QUIRK_NO_INIT_REPORTS		0x20000000

commit f961bd3516e4f699bbacff5d7f5247d6d87c59f0
Author: Benjamin Tissoires <benjamin.tissoires@redhat.com>
Date:   Thu Aug 22 14:51:08 2013 +0200

    HID: detect Win 8 multitouch devices in core
    
    Detecting Win 8 multitouch devices in core allows us to set quirks
    before the device is parsed through hid_hw_start().
    It also simplifies the detection of those devices in hid-multitouch and
    makes the handling of those devices cleaner.
    
    As Win 8 multitouch panels are in the group multitouch and rely on a
    special feature to be detected, this patch adds a bitfield in the parser.
    
    Signed-off-by: Benjamin Tissoires <benjamin.tissoires@redhat.com>
    Reviewed-by: Henrik Rydberg <rydberg@euromail.se>
    Tested-by: Srinivas Pandruvada<srinivas.pandruvada@linux.intel.com>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>

diff --git a/include/linux/hid.h b/include/linux/hid.h
index 0c48991b0402..cef1e9b86cc4 100644
--- a/include/linux/hid.h
+++ b/include/linux/hid.h
@@ -295,6 +295,7 @@ struct hid_item {
 #define HID_GROUP_GENERIC			0x0001
 #define HID_GROUP_MULTITOUCH			0x0002
 #define HID_GROUP_SENSOR_HUB			0x0003
+#define HID_GROUP_MULTITOUCH_WIN_8		0x0004
 
 /*
  * This is the global environment of the parser. This information is
@@ -532,6 +533,8 @@ static inline void hid_set_drvdata(struct hid_device *hdev, void *data)
 #define HID_GLOBAL_STACK_SIZE 4
 #define HID_COLLECTION_STACK_SIZE 4
 
+#define HID_SCAN_FLAG_MT_WIN_8			0x00000001
+
 struct hid_parser {
 	struct hid_global     global;
 	struct hid_global     global_stack[HID_GLOBAL_STACK_SIZE];
@@ -540,6 +543,7 @@ struct hid_parser {
 	unsigned              collection_stack[HID_COLLECTION_STACK_SIZE];
 	unsigned              collection_stack_ptr;
 	struct hid_device    *device;
+	unsigned              scan_flags;
 };
 
 struct hid_class_descriptor {

commit 50c9d75b6f01a337aab728511bc1d2a0a3d7b800
Author: David Herrmann <dh.herrmann@gmail.com>
Date:   Mon Jul 15 19:10:12 2013 +0200

    HID: input: generic hidinput_input_event handler
    
    The hidinput_input_event() callback converts input events written from
    userspace into HID reports and sends them to the device. We currently
    implement this in every HID transport driver, even though most of them do
    the same.
    
    This provides a generic hidinput_input_event() implementation which is
    mostly copied from usbhid. It uses a delayed worker to allow multiple LED
    events to be collected into a single output event.
    We use the custom ->request() transport driver callback to allow drivers
    to adjust the outgoing report and handle the request asynchronously. If no
    custom ->request() callback is available, we fall back to the generic raw
    output report handler (which is synchronous).
    
    Drivers can still provide custom hidinput_input_event() handlers (see
    logitech-dj) if the generic implementation doesn't fit their needs.
    
    Signed-off-by: David Herrmann <dh.herrmann@gmail.com>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>

diff --git a/include/linux/hid.h b/include/linux/hid.h
index b8058c5c5594..ea4b828cb9cd 100644
--- a/include/linux/hid.h
+++ b/include/linux/hid.h
@@ -456,6 +456,7 @@ struct hid_device {							/* device report descriptor */
 	enum hid_type type;						/* device type (mouse, kbd, ...) */
 	unsigned country;						/* HID country */
 	struct hid_report_enum report_enum[HID_REPORT_TYPES];
+	struct work_struct led_work;					/* delayed LED worker */
 
 	struct semaphore driver_lock;					/* protects the current driver, except during input */
 	struct semaphore driver_input_lock;				/* protects the current driver */

commit ddf64a3c03d4d68431146a0f1622844cc6cb6c22
Author: David Herrmann <dh.herrmann@gmail.com>
Date:   Mon Jul 15 19:10:10 2013 +0200

    HID: usbhid: make usbhid_set_leds() static
    
    usbhid_set_leds() is only used inside of usbhid/hid-core.c so no need to
    export it.
    
    Signed-off-by: David Herrmann <dh.herrmann@gmail.com>
    Reviewed-by: Benjamin Tissoires <benjamin.tissoires@redhat.com>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>

diff --git a/include/linux/hid.h b/include/linux/hid.h
index 0c48991b0402..b8058c5c5594 100644
--- a/include/linux/hid.h
+++ b/include/linux/hid.h
@@ -989,7 +989,6 @@ int hid_report_raw_event(struct hid_device *hid, int type, u8 *data, int size,
 u32 usbhid_lookup_quirk(const u16 idVendor, const u16 idProduct);
 int usbhid_quirks_init(char **quirks_param);
 void usbhid_quirks_exit(void);
-void usbhid_set_leds(struct hid_device *hid);
 
 #ifdef CONFIG_HID_PID
 int hid_pidff_init(struct hid_device *hid);

commit 27ce405039bfe6d3f4143415c638f56a3df77dca
Author: Jiri Kosina <jkosina@suse.cz>
Date:   Wed Jul 10 19:56:27 2013 +0200

    HID: fix data access in implement()
    
    implement() is setting bytes in LE data stream. In case the data is not
    aligned to 64bits, it reads past the allocated buffer. It doesn't really
    change any value there (it's properly bitmasked), but in case that this
    read past the boundary hits a page boundary, pagefault happens when
    accessing 64bits of 'x' in implement(), and kernel oopses.
    
    This happens much more often when numbered reports are in use, as the
    initial 8bit skip in the buffer makes the whole process work on values
    which are not aligned to 64bits.
    
    This problem dates back to attempts in 2005 and 2006 to make implement()
    and extract() as generic as possible, and even back then the problem
    was realized by Adam Kroperlin, but falsely assumed to be impossible
    to cause any harm:
    
      http://www.mail-archive.com/linux-usb-devel@lists.sourceforge.net/msg47690.html
    
    I have made several attempts at fixing it "on the spot" directly in
    implement(), but the results were horrible; the special casing for processing
    last 64bit chunk and switching to different math makes it unreadable mess.
    
    I therefore took a path to allocate a few bytes more which will never make
    it into final report, but are there as a cushion for all the 64bit math
    operations happening in implement() and extract().
    
    All callers of hid_output_report() are converted at the same time to allocate
    the buffer by newly introduced hid_alloc_report_buf() helper.
    
    Bruno noticed that the whole raw_size test can be dropped as well, as
    hid_alloc_report_buf() makes sure that the buffer is always of a proper
    size.
    
    Reviewed-by: Benjamin Tissoires <benjamin.tissoires@redhat.com>
    Acked-by: Gustavo Padovan <gustavo.padovan@collabora.co.uk>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>

diff --git a/include/linux/hid.h b/include/linux/hid.h
index 0c48991b0402..acccdf4eb485 100644
--- a/include/linux/hid.h
+++ b/include/linux/hid.h
@@ -744,6 +744,7 @@ struct hid_field *hidinput_get_led_field(struct hid_device *hid);
 unsigned int hidinput_count_leds(struct hid_device *hid);
 __s32 hidinput_calc_abs_res(const struct hid_field *field, __u16 code);
 void hid_output_report(struct hid_report *report, __u8 *data);
+u8 *hid_alloc_report_buf(struct hid_report *report, gfp_t flags);
 struct hid_device *hid_allocate_device(void);
 struct hid_report *hid_register_report(struct hid_device *device, unsigned type, unsigned id);
 int hid_parse_report(struct hid_device *hid, __u8 *start, unsigned size);

commit 1deb9d341d475ff84262e927d6c0e36fecb9942e
Author: Jiri Kosina <jkosina@suse.cz>
Date:   Mon May 6 13:05:50 2013 +0200

    HID: debug: fix RCU preemption issue
    
    Commit 2353f2bea ("HID: protect hid_debug_list") introduced mutex
    locking around debug_list access to prevent SMP races when debugfs
    nodes are being operated upon by multiple userspace processess.
    
    mutex is not a proper synchronization primitive though, as the hid-debug
    callbacks are being called from atomic contexts.
    
    We also have to be careful about disabling IRQs when taking the lock
    to prevent deadlock against IRQ handlers.
    
    Benjamin reports this has also been reported in RH bugzilla as bug #958935.
    
     ===============================
     [ INFO: suspicious RCU usage. ]
     3.9.0+ #94 Not tainted
     -------------------------------
     include/linux/rcupdate.h:476 Illegal context switch in RCU read-side critical section!
    
     other info that might help us debug this:
    
     rcu_scheduler_active = 1, debug_locks = 0
     4 locks held by Xorg/5502:
      #0:  (&evdev->mutex){+.+...}, at: [<ffffffff81512c3d>] evdev_write+0x6d/0x160
      #1:  (&(&dev->event_lock)->rlock#2){-.-...}, at: [<ffffffff8150dd9b>] input_inject_event+0x5b/0x230
      #2:  (rcu_read_lock){.+.+..}, at: [<ffffffff8150dd82>] input_inject_event+0x42/0x230
      #3:  (&(&usbhid->lock)->rlock){-.....}, at: [<ffffffff81565289>] usb_hidinput_input_event+0x89/0x120
    
     stack backtrace:
     CPU: 0 PID: 5502 Comm: Xorg Not tainted 3.9.0+ #94
     Hardware name: Dell Inc. OptiPlex 390/0M5DCD, BIOS A09 07/24/2012
      0000000000000001 ffff8800689c7c38 ffffffff816f249f ffff8800689c7c68
      ffffffff810acb1d 0000000000000000 ffffffff81a03ac7 000000000000019d
      0000000000000000 ffff8800689c7c90 ffffffff8107cda7 0000000000000000
     Call Trace:
      [<ffffffff816f249f>] dump_stack+0x19/0x1b
      [<ffffffff810acb1d>] lockdep_rcu_suspicious+0xfd/0x130
      [<ffffffff8107cda7>] __might_sleep+0xc7/0x230
      [<ffffffff816f7770>] mutex_lock_nested+0x40/0x3a0
      [<ffffffff81312ac4>] ? vsnprintf+0x354/0x640
      [<ffffffff81553cc4>] hid_debug_event+0x34/0x100
      [<ffffffff81554197>] hid_dump_input+0x67/0xa0
      [<ffffffff81556430>] hid_set_field+0x50/0x120
      [<ffffffff8156529a>] usb_hidinput_input_event+0x9a/0x120
      [<ffffffff8150d89e>] input_handle_event+0x8e/0x530
      [<ffffffff8150df10>] input_inject_event+0x1d0/0x230
      [<ffffffff8150dd82>] ? input_inject_event+0x42/0x230
      [<ffffffff81512cae>] evdev_write+0xde/0x160
      [<ffffffff81185038>] vfs_write+0xc8/0x1f0
      [<ffffffff81185535>] SyS_write+0x55/0xa0
      [<ffffffff81704482>] system_call_fastpath+0x16/0x1b
     BUG: sleeping function called from invalid context at kernel/mutex.c:413
     in_atomic(): 1, irqs_disabled(): 1, pid: 5502, name: Xorg
     INFO: lockdep is turned off.
     irq event stamp: 1098574
     hardirqs last  enabled at (1098573): [<ffffffff816fb53f>] _raw_spin_unlock_irqrestore+0x3f/0x70
     hardirqs last disabled at (1098574): [<ffffffff816faaf5>] _raw_spin_lock_irqsave+0x25/0xa0
     softirqs last  enabled at (1098306): [<ffffffff8104971f>] __do_softirq+0x18f/0x3c0
     softirqs last disabled at (1097867): [<ffffffff81049ad5>] irq_exit+0xa5/0xb0
     CPU: 0 PID: 5502 Comm: Xorg Not tainted 3.9.0+ #94
     Hardware name: Dell Inc. OptiPlex 390/0M5DCD, BIOS A09 07/24/2012
      ffffffff81a03ac7 ffff8800689c7c68 ffffffff816f249f ffff8800689c7c90
      ffffffff8107ce60 0000000000000000 ffff8800689c7fd8 ffff88006a62c800
      ffff8800689c7d10 ffffffff816f7770 ffff8800689c7d00 ffffffff81312ac4
     Call Trace:
      [<ffffffff816f249f>] dump_stack+0x19/0x1b
      [<ffffffff8107ce60>] __might_sleep+0x180/0x230
      [<ffffffff816f7770>] mutex_lock_nested+0x40/0x3a0
      [<ffffffff81312ac4>] ? vsnprintf+0x354/0x640
      [<ffffffff81553cc4>] hid_debug_event+0x34/0x100
      [<ffffffff81554197>] hid_dump_input+0x67/0xa0
      [<ffffffff81556430>] hid_set_field+0x50/0x120
      [<ffffffff8156529a>] usb_hidinput_input_event+0x9a/0x120
      [<ffffffff8150d89e>] input_handle_event+0x8e/0x530
      [<ffffffff8150df10>] input_inject_event+0x1d0/0x230
      [<ffffffff8150dd82>] ? input_inject_event+0x42/0x230
      [<ffffffff81512cae>] evdev_write+0xde/0x160
      [<ffffffff81185038>] vfs_write+0xc8/0x1f0
      [<ffffffff81185535>] SyS_write+0x55/0xa0
      [<ffffffff81704482>] system_call_fastpath+0x16/0x1b
    
    Reported-by: majianpeng <majianpeng@gmail.com>
    Reported-by: Benjamin Tissoires <benjamin.tissoires@gmail.com>
    Reviewed-by: Dmitry Torokhov <dmitry.torokhov@gmail.com>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>

diff --git a/include/linux/hid.h b/include/linux/hid.h
index af1b86d46f6e..0c48991b0402 100644
--- a/include/linux/hid.h
+++ b/include/linux/hid.h
@@ -515,7 +515,7 @@ struct hid_device {							/* device report descriptor */
 	struct dentry *debug_rdesc;
 	struct dentry *debug_events;
 	struct list_head debug_list;
-	struct mutex debug_list_lock;
+	spinlock_t  debug_list_lock;
 	wait_queue_head_t debug_wait;
 };
 

commit 72c16d9a5c303dce928a52a8861fe7a2a25f849a
Merge: 4f5a81042909 fb4d8d98dc24
Author: Jiri Kosina <jkosina@suse.cz>
Date:   Tue Apr 30 10:17:48 2013 +0200

    Merge branch 'for-3.10/mt-hybrid-finger-pen' into for-linus
    
    Conflicts:
            drivers/hid/hid-multitouch.c

commit 4f5a81042909fed6977881f22c024aa3582cfcca
Merge: 9a4a5574ce42 2353f2bea307 7c4d577367fb d991938a807a
Author: Jiri Kosina <jkosina@suse.cz>
Date:   Tue Apr 30 10:12:44 2013 +0200

    Merge branches 'for-3.10/appleir', 'for-3.10/hid-debug', 'for-3.10/hid-driver-transport-cleanups', 'for-3.10/i2c-hid' and 'for-3.10/logitech' into for-linus

commit 2353f2bea307390e015493118e425152b8a5a431
Author: Jiri Kosina <jkosina@suse.cz>
Date:   Tue Apr 16 15:40:09 2013 -0700

    HID: protect hid_debug_list
    
    Accesses to hid_device->hid_debug_list are not serialized properly, which
    could result in SMP concurrency issues when HID debugfs events are accessesed
    by multiple userspace processess.
    
    Serialize all the list operations by a mutex.
    
    Spotted by Al Viro.
    
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>

diff --git a/include/linux/hid.h b/include/linux/hid.h
index e14b465b1146..06579c72d195 100644
--- a/include/linux/hid.h
+++ b/include/linux/hid.h
@@ -512,6 +512,7 @@ struct hid_device {							/* device report descriptor */
 	struct dentry *debug_rdesc;
 	struct dentry *debug_events;
 	struct list_head debug_list;
+	struct mutex debug_list_lock;
 	wait_queue_head_t debug_wait;
 };
 

commit 4f22decf9b6329acfe59091c5cba6b378b9b31db
Author: Benjamin Tissoires <benjamin.tissoires@redhat.com>
Date:   Fri Mar 22 18:38:28 2013 +0100

    HID: input: don't register unmapped input devices
    
    There is no need to register an input device containing no events.
    This allows drivers using the quirk MULTI_INPUT to register one input
    per report effectively used.
    
    For backward compatibility, we need to add a quirk to request
    this behavior.
    
    Signed-off-by: Benjamin Tissoires <benjamin.tissoires@redhat.com>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>

diff --git a/include/linux/hid.h b/include/linux/hid.h
index 863744c38ddc..fffa06bc4880 100644
--- a/include/linux/hid.h
+++ b/include/linux/hid.h
@@ -282,6 +282,7 @@ struct hid_item {
 #define HID_QUIRK_BADPAD			0x00000020
 #define HID_QUIRK_MULTI_INPUT			0x00000040
 #define HID_QUIRK_HIDINPUT_FORCE		0x00000080
+#define HID_QUIRK_NO_EMPTY_INPUT		0x00000100
 #define HID_QUIRK_SKIP_OUTPUT_REPORTS		0x00010000
 #define HID_QUIRK_FULLSPEED_INTERVAL		0x10000000
 #define HID_QUIRK_NO_INIT_REPORTS		0x20000000

commit 9684819b5a29e62acd8265a92d8f3454de9bb71e
Author: Benjamin Tissoires <benjamin.tissoires@redhat.com>
Date:   Wed Feb 27 16:38:17 2013 +0100

    HID: ll_driver: Extend the interface with idle requests
    
    Some drivers send the idle command directly to underlying device,
    creating an unwanted dependency on the underlying transport layer.
    This patch adds hid_hw_idle() to the interface, thereby removing
    usbhid from the lion share of the drivers.
    
    Signed-off-by: Benjamin Tissoires <benjamin.tissoires@redhat.com>
    Reviewed-by: David Herrmann <dh.herrmann@gmail.com>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>

diff --git a/include/linux/hid.h b/include/linux/hid.h
index 7071eb3d36c7..863744c38ddc 100644
--- a/include/linux/hid.h
+++ b/include/linux/hid.h
@@ -664,6 +664,7 @@ struct hid_driver {
  *	   shouldn't allocate anything to not leak memory
  * @request: send report request to device (e.g. feature report)
  * @wait: wait for buffered io to complete (send/recv reports)
+ * @idle: send idle request to device
  */
 struct hid_ll_driver {
 	int (*start)(struct hid_device *hdev);
@@ -683,6 +684,7 @@ struct hid_ll_driver {
 			struct hid_report *report, int reqtype);
 
 	int (*wait)(struct hid_device *hdev);
+	int (*idle)(struct hid_device *hdev, int report, int idle, int reqtype);
 
 };
 
@@ -906,6 +908,23 @@ static inline void hid_hw_request(struct hid_device *hdev,
 		hdev->ll_driver->request(hdev, report, reqtype);
 }
 
+/**
+ * hid_hw_idle - send idle request to device
+ *
+ * @hdev: hid device
+ * @report: report to control
+ * @idle: idle state
+ * @reqtype: hid request type
+ */
+static inline int hid_hw_idle(struct hid_device *hdev, int report, int idle,
+		int reqtype)
+{
+	if (hdev->ll_driver->idle)
+		return hdev->ll_driver->idle(hdev, report, idle, reqtype);
+
+	return 0;
+}
+
 /**
  * hid_hw_wait - wait for buffered io to complete
  *

commit c849a6143bec520aff2a6646518b0d041402428b
Author: Andrew de los Reyes <adlr@chromium.org>
Date:   Mon Feb 18 09:20:21 2013 -0800

    HID: Separate struct hid_device's driver_lock into two locks.
    
    This patch separates struct hid_device's driver_lock into two. The
    goal is to allow hid device drivers to receive input during their
    probe() or remove() function calls. This is necessary because some
    drivers need to communicate with the device to determine parameters
    needed during probe (e.g., size of a multi-touch surface), and if
    possible, may perfer to communicate with a device on host-initiated
    disconnect (e.g., to put it into a low-power state).
    
    Historically, three functions used driver_lock:
    
    - hid_device_probe: blocks to acquire lock
    - hid_device_remove: blocks to acquire lock
    - hid_input_report: if locked returns -EBUSY, else acquires lock
    
    This patch adds another lock (driver_input_lock) which is used to
    block input from occurring. The lock behavior is now:
    
    - hid_device_probe: blocks to acq. driver_lock, then driver_input_lock
    - hid_device_remove: blocks to acq. driver_lock, then driver_input_lock
    - hid_input_report: if driver_input_lock locked returns -EBUSY, else
      acquires driver_input_lock
    
    This patch also adds two helper functions to be called during probe()
    or remove(): hid_device_io_start() and hid_device_io_stop(). These
    functions lock and unlock, respectively, driver_input_lock; they also
    make a note of whether they did so that hid-core knows if a driver has
    changed the lock state.
    
    This patch results in no behavior change for existing devices and
    drivers. However, during a probe() or remove() function call in a
    driver, that driver may now selectively call hid_device_io_start() to
    let input events come through, then optionally call
    hid_device_io_stop() to stop them.
    
    Signed-off-by: Andrew de los Reyes <adlr@chromium.org>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>

diff --git a/include/linux/hid.h b/include/linux/hid.h
index e14b465b1146..895b85639dec 100644
--- a/include/linux/hid.h
+++ b/include/linux/hid.h
@@ -456,7 +456,8 @@ struct hid_device {							/* device report descriptor */
 	unsigned country;						/* HID country */
 	struct hid_report_enum report_enum[HID_REPORT_TYPES];
 
-	struct semaphore driver_lock;					/* protects the current driver */
+	struct semaphore driver_lock;					/* protects the current driver, except during input */
+	struct semaphore driver_input_lock;				/* protects the current driver */
 	struct device dev;						/* device */
 	struct hid_driver *driver;
 	struct hid_ll_driver *ll_driver;
@@ -477,6 +478,7 @@ struct hid_device {							/* device report descriptor */
 	unsigned int status;						/* see STAT flags above */
 	unsigned claimed;						/* Claimed by hidinput, hiddev? */
 	unsigned quirks;						/* Various quirks the device can pull on us */
+	bool io_started;						/* Protected by driver_lock. If IO has started */
 
 	struct list_head inputs;					/* The list of inputs */
 	void *hiddev;							/* The hiddev structure */
@@ -599,6 +601,10 @@ struct hid_usage_id {
  * @resume: invoked on resume if device was not reset (NULL means nop)
  * @reset_resume: invoked on resume if device was reset (NULL means nop)
  *
+ * probe should return -errno on error, or 0 on success. During probe,
+ * input will not be passed to raw_event unless hid_device_io_start is
+ * called.
+ *
  * raw_event and event should return 0 on no action performed, 1 when no
  * further processing should be done and negative on error
  *
@@ -737,6 +743,44 @@ const struct hid_device_id *hid_match_id(struct hid_device *hdev,
 					 const struct hid_device_id *id);
 s32 hid_snto32(__u32 value, unsigned n);
 
+/**
+ * hid_device_io_start - enable HID input during probe, remove
+ *
+ * @hid - the device
+ *
+ * This should only be called during probe or remove and only be
+ * called by the thread calling probe or remove. It will allow
+ * incoming packets to be delivered to the driver.
+ */
+static inline void hid_device_io_start(struct hid_device *hid) {
+	if (hid->io_started) {
+		dev_warn(&hid->dev, "io already started");
+		return;
+	}
+	hid->io_started = true;
+	up(&hid->driver_input_lock);
+}
+
+/**
+ * hid_device_io_stop - disable HID input during probe, remove
+ *
+ * @hid - the device
+ *
+ * Should only be called after hid_device_io_start. It will prevent
+ * incoming packets from going to the driver for the duration of
+ * probe, remove. If called during probe, packets will still go to the
+ * driver after probe is complete. This function should only be called
+ * by the thread calling probe or remove.
+ */
+static inline void hid_device_io_stop(struct hid_device *hid) {
+	if (!hid->io_started) {
+		dev_warn(&hid->dev, "io already stopped");
+		return;
+	}
+	hid->io_started = false;
+	down(&hid->driver_input_lock);
+}
+
 /**
  * hid_map_usage - map usage input bits
  *

commit 3373443befa73ee60e4275e7699b26058b01455a
Author: Henrik Rydberg <rydberg@euromail.se>
Date:   Mon Feb 25 11:31:44 2013 +0100

    HID: Extend the interface with wait io request
    
    Some drivers need to wait for an io from the underlying device, creating
    an unwanted dependency on the underlying transport layer. This patch adds
    wait() to the interface, thereby removing usbhid from the lion share of
    the drivers.
    
    Signed-off-by: Henrik Rydberg <rydberg@euromail.se>
    Signed-off-by: Benjamin Tissoires <benjamin.tissoires@gmail.com>
    Reviewed-by: Mika Westerberg <mika.westerberg@linux.intel.com>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>

diff --git a/include/linux/hid.h b/include/linux/hid.h
index 261c713d4842..7071eb3d36c7 100644
--- a/include/linux/hid.h
+++ b/include/linux/hid.h
@@ -663,6 +663,7 @@ struct hid_driver {
  * @parse: this method is called only once to parse the device data,
  *	   shouldn't allocate anything to not leak memory
  * @request: send report request to device (e.g. feature report)
+ * @wait: wait for buffered io to complete (send/recv reports)
  */
 struct hid_ll_driver {
 	int (*start)(struct hid_device *hdev);
@@ -681,6 +682,8 @@ struct hid_ll_driver {
 	void (*request)(struct hid_device *hdev,
 			struct hid_report *report, int reqtype);
 
+	int (*wait)(struct hid_device *hdev);
+
 };
 
 #define	PM_HINT_FULLON	1<<5
@@ -903,6 +906,17 @@ static inline void hid_hw_request(struct hid_device *hdev,
 		hdev->ll_driver->request(hdev, report, reqtype);
 }
 
+/**
+ * hid_hw_wait - wait for buffered io to complete
+ *
+ * @hdev: hid device
+ */
+static inline void hid_hw_wait(struct hid_device *hdev)
+{
+	if (hdev->ll_driver->wait)
+		hdev->ll_driver->wait(hdev);
+}
+
 int hid_report_raw_event(struct hid_device *hid, int type, u8 *data, int size,
 		int interrupt);
 

commit e90a6df80dc45ab53d2f4f4db297434e48c0208e
Author: Henrik Rydberg <rydberg@euromail.se>
Date:   Mon Feb 25 11:31:43 2013 +0100

    HID: Extend the interface with report requests
    
    Some drivers send reports directly to underlying device, creating an
    unwanted dependency on the underlying transport layer. This patch adds
    hid_hw_request() to the interface, thereby removing usbhid from the
    lion share of the drivers.
    
    Signed-off-by: Henrik Rydberg <rydberg@euromail.se>
    Signed-off-by: Benjamin Tissoires <benjamin.tissoires@gmail.com>
    Reviewed-by: Mika Westerberg <mika.westerberg@linux.intel.com>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>

diff --git a/include/linux/hid.h b/include/linux/hid.h
index e14b465b1146..261c713d4842 100644
--- a/include/linux/hid.h
+++ b/include/linux/hid.h
@@ -662,6 +662,7 @@ struct hid_driver {
  * @hidinput_input_event: event input event (e.g. ff or leds)
  * @parse: this method is called only once to parse the device data,
  *	   shouldn't allocate anything to not leak memory
+ * @request: send report request to device (e.g. feature report)
  */
 struct hid_ll_driver {
 	int (*start)(struct hid_device *hdev);
@@ -676,6 +677,10 @@ struct hid_ll_driver {
 			unsigned int code, int value);
 
 	int (*parse)(struct hid_device *hdev);
+
+	void (*request)(struct hid_device *hdev,
+			struct hid_report *report, int reqtype);
+
 };
 
 #define	PM_HINT_FULLON	1<<5
@@ -883,6 +888,21 @@ static inline int hid_hw_power(struct hid_device *hdev, int level)
 	return hdev->ll_driver->power ? hdev->ll_driver->power(hdev, level) : 0;
 }
 
+
+/**
+ * hid_hw_request - send report request to device
+ *
+ * @hdev: hid device
+ * @report: report to send
+ * @reqtype: hid request type
+ */
+static inline void hid_hw_request(struct hid_device *hdev,
+				  struct hid_report *report, int reqtype)
+{
+	if (hdev->ll_driver->request)
+		hdev->ll_driver->request(hdev, report, reqtype);
+}
+
 int hid_report_raw_event(struct hid_device *hid, int type, u8 *data, int size,
 		int interrupt);
 

commit 73759518d6d6b56e398791b7522328baf4181a82
Merge: 539cf54bdd92 483f86a54c6d 7e3cc447ff89 1b474fe82d4e 30ba2fbde184
Author: Jiri Kosina <jkosina@suse.cz>
Date:   Thu Feb 21 10:45:01 2013 +0100

    Merge branches 'for-3.9/logitech', 'for-3.9/multitouch', 'for-3.9/ntrig', 'for-3.9/thingm' and 'for-3.9/upstream' into for-linus

commit 6d85d037d6247b06e1060b5e5ad0e4854a7d1e3b
Author: Benjamin Tissoires <benjamin.tissoires@gmail.com>
Date:   Thu Jan 31 17:22:23 2013 +0100

    HID: core: add "report" hook, called once the report has been parsed
    
    This callback is called when the parsing of the report has been done
    by hid-core (so after the calls to .event). The hid drivers can now
    have access to the whole report by relying on the values stored in
    the different fields.
    
    Signed-off-by: Benjamin Tissoires <benjamin.tissoires@gmail.com>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>

diff --git a/include/linux/hid.h b/include/linux/hid.h
index 7330a0fef0c0..9f56e9040f66 100644
--- a/include/linux/hid.h
+++ b/include/linux/hid.h
@@ -589,6 +589,7 @@ struct hid_usage_id {
  * @raw_event: if report in report_table, this hook is called (NULL means nop)
  * @usage_table: on which events to call event (NULL means all)
  * @event: if usage in usage_table, this hook is called (NULL means nop)
+ * @report: this hook is called after parsing a report (NULL means nop)
  * @report_fixup: called before report descriptor parsing (NULL means nop)
  * @input_mapping: invoked on input registering before mapping an usage
  * @input_mapped: invoked on input registering after mapping an usage
@@ -627,6 +628,7 @@ struct hid_driver {
 	const struct hid_usage_id *usage_table;
 	int (*event)(struct hid_device *hdev, struct hid_field *field,
 			struct hid_usage *usage, __s32 value);
+	void (*report)(struct hid_device *hdev, struct hid_report *report);
 
 	__u8 *(*report_fixup)(struct hid_device *hdev, __u8 *buf,
 			unsigned int *size);

commit d463f4719a2fa883bc0bb1fb67e6fea2307aa6df
Author: H Hartley Sweeten <hartleys@visionengravers.com>
Date:   Mon Dec 17 15:27:33 2012 -0700

    HID: hid.h: remove unused hid_generic_{init,exit} prototypes
    
    These functions are not defined. Remove the extern declarations.
    
    Signed-off-by: H Hartley Sweeten <hsweeten@visionengravers.com>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>

diff --git a/include/linux/hid.h b/include/linux/hid.h
index d6c71a674310..828726c70503 100644
--- a/include/linux/hid.h
+++ b/include/linux/hid.h
@@ -884,9 +884,6 @@ static inline int hid_hw_power(struct hid_device *hdev, int level)
 int hid_report_raw_event(struct hid_device *hid, int type, u8 *data, int size,
 		int interrupt);
 
-extern int hid_generic_init(void);
-extern void hid_generic_exit(void);
-
 /* HID quirks API */
 u32 usbhid_lookup_quirk(const u16 idVendor, const u16 idProduct);
 int usbhid_quirks_init(char **quirks_param);

commit 4d02c58eb1f19433cb852b2bde41c44849691614
Author: H Hartley Sweeten <hartleys@visionengravers.com>
Date:   Mon Dec 17 15:26:55 2012 -0700

    HID: introduce helper for hid_driver boilerplate
    
    Introduce the module_hid_driver macro which is a convenience macro
    for HID driver modules similar to module_usb_driver. It is intended
    to be used by drivers with init/exit sections that do nothing but
    register/unregister the HID driver.
    
    Signed-off-by: H Hartley Sweeten <hsweeten@visionengravers.com>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>

diff --git a/include/linux/hid.h b/include/linux/hid.h
index 7330a0fef0c0..d6c71a674310 100644
--- a/include/linux/hid.h
+++ b/include/linux/hid.h
@@ -700,6 +700,18 @@ extern int __must_check __hid_register_driver(struct hid_driver *,
 
 extern void hid_unregister_driver(struct hid_driver *);
 
+/**
+ * module_hid_driver() - Helper macro for registering a HID driver
+ * @__hid_driver: hid_driver struct
+ *
+ * Helper macro for HID drivers which do not do anything special in module
+ * init/exit. This eliminates a lot of boilerplate. Each module may only
+ * use this macro once, and calling it replaces module_init() and module_exit()
+ */
+#define module_hid_driver(__hid_driver) \
+	module_driver(__hid_driver, hid_register_driver, \
+		      hid_unregister_driver)
+
 extern void hidinput_hid_event(struct hid_device *, struct hid_field *, struct hid_usage *, __s32);
 extern void hidinput_report_event(struct hid_device *hid, struct hid_report *report);
 extern int hidinput_connect(struct hid_device *hid, unsigned int force);

commit 818b930bc15077fc00ff16bb22c5df1857f05afa
Merge: f9af7b9edccb b5531318f18b 7a7d6d9c5fcd 1b42fc4a2889 955dca354c3c 68fd32b8228a 4529eefad087
Author: Jiri Kosina <jkosina@suse.cz>
Date:   Wed Dec 12 21:41:55 2012 +0100

    Merge branches 'for-3.7/upstream-fixes', 'for-3.8/hidraw', 'for-3.8/i2c-hid', 'for-3.8/multitouch', 'for-3.8/roccat', 'for-3.8/sensors' and 'for-3.8/upstream' into for-linus
    
    Conflicts:
            drivers/hid/hid-core.c

commit 83499b52c61f50292f0aae36499de8a8fc3e37c3
Author: Alexander Holler <holler@ahsoftware.de>
Date:   Sun Dec 9 12:44:30 2012 +0100

    HID: sensors: autodetect USB HID sensor hubs
    
    It should not be necessary to add IDs for HID sensor hubs to lists in
    hid-core.c and hid-sensor-hub.c. So instead of a whitelist, autodetect such USB
    HID sensor hubs, based on a collection of type physical inside a useage page of
    type sensor. If some sensor hubs stil must be usable as raw devices, a
    blacklist might be created.
    
    Signed-off-by: Alexander Holler <holler@ahsoftware.de>
    Acked-by: "Pandruvada, Srinivas" <srinivas.pandruvada@intel.com>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>

diff --git a/include/linux/hid.h b/include/linux/hid.h
index c076041a069e..c5f6ec2b15c2 100644
--- a/include/linux/hid.h
+++ b/include/linux/hid.h
@@ -167,6 +167,7 @@ struct hid_item {
 #define HID_UP_MSVENDOR		0xff000000
 #define HID_UP_CUSTOM		0x00ff0000
 #define HID_UP_LOGIVENDOR	0xffbc0000
+#define HID_UP_SENSOR		0x00200000
 
 #define HID_USAGE		0x0000ffff
 
@@ -292,6 +293,7 @@ struct hid_item {
  */
 #define HID_GROUP_GENERIC			0x0001
 #define HID_GROUP_MULTITOUCH			0x0002
+#define HID_GROUP_SENSOR_HUB			0x0003
 
 /*
  * This is the global environment of the parser. This information is

commit 4529eefad087f97b33c0f31984d924b1f15d7bae
Author: Lamarque V. Souza <lamarque@gmail.com>
Date:   Thu Dec 6 12:39:55 2012 -0200

    HID: hidp: fallback to input session properly if hid is blacklisted
    
    This patch against kernel 3.7.0-rc8 fixes a kernel oops when turning on the
    bluetooth mouse with id 0458:0058 [1].
    
    The mouse in question supports both input and hid sessions, however it is
    blacklisted in drivers/hid/hid-core.c so the input session is one that should
    be used. Long ago (around kernel 3.0.0) some changes in the bluetooth
    subsystem made the kernel do not fallback to input session when hid session is
    not supported or blacklisted. This patch restore that behaviour by making the
    kernel try the input session if hid_add_device returns ENODEV.
    
    The patch exports hid_ignore() from hid-core.c so that it can be used in the
    bluetooth subsystem.
    
    [1] https://bugzilla.kernel.org/show_bug.cgi?id=39882
    
    Signed-off-by: Lamarque V. Souza <lamarque@gmail.com>
    Acked-by: Gustavo Padovan <gustavo.padovan@collabora.co.uk>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>

diff --git a/include/linux/hid.h b/include/linux/hid.h
index 7e1f37db7582..abce7eb4f258 100644
--- a/include/linux/hid.h
+++ b/include/linux/hid.h
@@ -721,6 +721,7 @@ struct hid_ll_driver {
 
 extern int hid_debug;
 
+extern bool hid_ignore(struct hid_device *);
 extern int hid_add_device(struct hid_device *);
 extern void hid_destroy_device(struct hid_device *);
 

commit f262d1fa2c651a5e2f92b6aee8779597631cd5d4
Author: Benjamin Tissoires <benjamin.tissoires@gmail.com>
Date:   Wed Nov 14 16:59:16 2012 +0100

    HID: add usage_index in struct hid_usage.
    
    Currently, there is no way to know the index of the current field
    in the .input_mapping and .event callbacks  when this field is inside
    an array of HID fields.
    This patch adds this index to the struct hid_usage so that this
    information is available to input_mapping and event callbacks.
    
    Signed-off-by: Benjamin Tissoires <benjamin.tissoires@gmail.com>
    Acked-by: Jiri Kosina <jkosina@suse.cz>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>

diff --git a/include/linux/hid.h b/include/linux/hid.h
index 4161bf2c0b5b..d2c42dd222c1 100644
--- a/include/linux/hid.h
+++ b/include/linux/hid.h
@@ -342,6 +342,7 @@ struct hid_collection {
 struct hid_usage {
 	unsigned  hid;			/* hid usage code */
 	unsigned  collection_index;	/* index into collection array */
+	unsigned  usage_index;		/* index into usage array */
 	/* hidinput data */
 	__u16     code;			/* input driver code */
 	__u8      type;			/* input driver type */

commit 774638386826621c984ab6994439f474709cac5e
Author: Benjamin Tissoires <benjamin.tissoires@gmail.com>
Date:   Wed Nov 14 16:59:15 2012 +0100

    HID: fix unit exponent parsing
    
    HID spec details special values for the HID field unit exponent.
    Basically, the range [0x8..0xf] correspond to [-8..-1], so this is
    a standard two's complement on a half-byte.
    
    Signed-off-by: Benjamin Tissoires <benjamin.tissoires@gmail.com>
    Acked-by: Jiri Kosina <jkosina@suse.cz>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>

diff --git a/include/linux/hid.h b/include/linux/hid.h
index c6bef8f54a82..4161bf2c0b5b 100644
--- a/include/linux/hid.h
+++ b/include/linux/hid.h
@@ -717,6 +717,7 @@ int hid_connect(struct hid_device *hid, unsigned int connect_mask);
 void hid_disconnect(struct hid_device *hid);
 const struct hid_device_id *hid_match_id(struct hid_device *hdev,
 					 const struct hid_device_id *id);
+s32 hid_snto32(__u32 value, unsigned n);
 
 /**
  * hid_map_usage - map usage input bits

commit 37cf6e6fc34e2fca4e7c565697e7cd5c317bc316
Author: Benjamin Tissoires <benjamin.tissoires@gmail.com>
Date:   Wed Nov 14 16:59:13 2012 +0100

    HID: export hidinput_calc_abs_res
    
    Exporting the function allows us to calculate the resolution in third
    party drivers like hid-multitouch.
    This patch also complete the function with additional valid axes.
    
    Signed-off-by: Benjamin Tissoires <benjamin.tissoires@gmail.com>
    Acked-by: Jiri Kosina <jkosina@suse.cz>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>

diff --git a/include/linux/hid.h b/include/linux/hid.h
index c076041a069e..c6bef8f54a82 100644
--- a/include/linux/hid.h
+++ b/include/linux/hid.h
@@ -706,6 +706,7 @@ int hid_input_report(struct hid_device *, int type, u8 *, int, int);
 int hidinput_find_field(struct hid_device *hid, unsigned int type, unsigned int code, struct hid_field **field);
 struct hid_field *hidinput_get_led_field(struct hid_device *hid);
 unsigned int hidinput_count_leds(struct hid_device *hid);
+__s32 hidinput_calc_abs_res(const struct hid_field *field, __u16 code);
 void hid_output_report(struct hid_report *report, __u8 *data);
 struct hid_device *hid_allocate_device(void);
 struct hid_report *hid_register_report(struct hid_device *device, unsigned type, unsigned id);

commit 607ca46e97a1b6594b29647d98a32d545c24bdff
Author: David Howells <dhowells@redhat.com>
Date:   Sat Oct 13 10:46:48 2012 +0100

    UAPI: (Scripted) Disintegrate include/linux
    
    Signed-off-by: David Howells <dhowells@redhat.com>
    Acked-by: Arnd Bergmann <arnd@arndb.de>
    Acked-by: Thomas Gleixner <tglx@linutronix.de>
    Acked-by: Michael Kerrisk <mtk.manpages@gmail.com>
    Acked-by: Paul E. McKenney <paulmck@linux.vnet.ibm.com>
    Acked-by: Dave Jones <davej@redhat.com>

diff --git a/include/linux/hid.h b/include/linux/hid.h
index 7e1f37db7582..c076041a069e 100644
--- a/include/linux/hid.h
+++ b/include/linux/hid.h
@@ -1,12 +1,8 @@
-#ifndef __HID_H
-#define __HID_H
-
 /*
  *  Copyright (c) 1999 Andreas Gal
  *  Copyright (c) 2000-2001 Vojtech Pavlik
  *  Copyright (c) 2006-2007 Jiri Kosina
  */
-
 /*
  * This program is free software; you can redistribute it and/or modify
  * it under the terms of the GNU General Public License as published by
@@ -26,43 +22,9 @@
  * e-mail - mail your message to <vojtech@ucw.cz>, or by paper mail:
  * Vojtech Pavlik, Simunkova 1594, Prague 8, 182 00 Czech Republic
  */
+#ifndef __HID_H
+#define __HID_H
 
-/*
- * USB HID (Human Interface Device) interface class code
- */
-
-#define USB_INTERFACE_CLASS_HID		3
-
-/*
- * USB HID interface subclass and protocol codes
- */
-
-#define USB_INTERFACE_SUBCLASS_BOOT	1
-#define USB_INTERFACE_PROTOCOL_KEYBOARD	1
-#define USB_INTERFACE_PROTOCOL_MOUSE	2
-
-/*
- * HID class requests
- */
-
-#define HID_REQ_GET_REPORT		0x01
-#define HID_REQ_GET_IDLE		0x02
-#define HID_REQ_GET_PROTOCOL		0x03
-#define HID_REQ_SET_REPORT		0x09
-#define HID_REQ_SET_IDLE		0x0A
-#define HID_REQ_SET_PROTOCOL		0x0B
-
-/*
- * HID class descriptor types
- */
-
-#define HID_DT_HID			(USB_TYPE_CLASS | 0x01)
-#define HID_DT_REPORT			(USB_TYPE_CLASS | 0x02)
-#define HID_DT_PHYSICAL			(USB_TYPE_CLASS | 0x03)
-
-#define HID_MAX_DESCRIPTOR_SIZE		4096
-
-#ifdef __KERNEL__
 
 #include <linux/types.h>
 #include <linux/slab.h>
@@ -73,6 +35,7 @@
 #include <linux/input.h>
 #include <linux/semaphore.h>
 #include <linux/power_supply.h>
+#include <uapi/linux/hid.h>
 
 /*
  * We parse each description item into this structure. Short items data
@@ -943,7 +906,4 @@ do {									\
 #define hid_dbg(hid, fmt, arg...)			\
 	dev_dbg(&(hid)->dev, fmt, ##arg)
 
-#endif /* __KERNEL__ */
-
 #endif
-

commit 7e55bdedfa4a72baa0d4fec8d0948cb65342a9a0
Author: Henrik Rydberg <rydberg@euromail.se>
Date:   Mon Sep 3 12:28:59 2012 +0200

    HID: Allow more fields in the hid report
    
    Some recent hardware define more than 128 fields in the report
    descriptor. Increase the limit to 256. This adds another kilobyte of
    memory per report.
    
    Tested-by: Ping Cheng <pingc@wacom.com>
    Acked-by: Jiri Kosina <jkosina@suse.cz>
    Signed-off-by: Henrik Rydberg <rydberg@euromail.se>

diff --git a/include/linux/hid.h b/include/linux/hid.h
index f37da2803005..7e1f37db7582 100644
--- a/include/linux/hid.h
+++ b/include/linux/hid.h
@@ -414,7 +414,7 @@ struct hid_field {
 	__u16 dpad;			/* dpad input code */
 };
 
-#define HID_MAX_FIELDS 128
+#define HID_MAX_FIELDS 256
 
 struct hid_report {
 	struct list_head list;

commit 9ebf3d7687192923e3d44fdbcd8d9f8375053fb8
Author: Henrik Rydberg <rydberg@euromail.se>
Date:   Mon Jul 30 13:28:18 2012 +0200

    HID: Add an input configured notification callback
    
    A hid device may create several input devices, and a driver may need
    to prepare or finalize the configuration per input device. Currently,
    there is no sane way for a driver to know when a device has been
    configured. This patch adds a callback providing that information.
    
    Reviewed-and-tested-by: Benjamin Tissoires <benjamin.tissoires@enac.fr>
    Tested-by: Ping Cheng <pingc@wacom.com>
    Acked-by: Jiri Kosina <jkosina@suse.cz>
    Signed-off-by: Henrik Rydberg <rydberg@euromail.se>

diff --git a/include/linux/hid.h b/include/linux/hid.h
index 42970de1b40c..f37da2803005 100644
--- a/include/linux/hid.h
+++ b/include/linux/hid.h
@@ -626,6 +626,7 @@ struct hid_usage_id {
  * @report_fixup: called before report descriptor parsing (NULL means nop)
  * @input_mapping: invoked on input registering before mapping an usage
  * @input_mapped: invoked on input registering after mapping an usage
+ * @input_configured: invoked just before the device is registered
  * @feature_mapping: invoked on feature registering
  * @suspend: invoked on suspend (NULL means nop)
  * @resume: invoked on resume if device was not reset (NULL means nop)
@@ -670,6 +671,8 @@ struct hid_driver {
 	int (*input_mapped)(struct hid_device *hdev,
 			struct hid_input *hidinput, struct hid_field *field,
 			struct hid_usage *usage, unsigned long **bit, int *max);
+	void (*input_configured)(struct hid_device *hdev,
+				 struct hid_input *hidinput);
 	void (*feature_mapping)(struct hid_device *hdev,
 			struct hid_field *field,
 			struct hid_usage *usage);

commit 929578ab0339fe42bb3ceeaa2e6607189cddf70b
Author: Keng-Yu Lin <kengyu@canonical.com>
Date:   Fri Jul 6 18:06:11 2012 +0800

    HID: Add suport for the brightness control keys on HP keyboards
    
    The keys are found on the keyboards bundled with HP All-In-One machines
    with USB VID/PID of 04ca:004d and 04f2:1061.
    
    Signed-off-by: Keng-Yu Lin <kengyu@canonical.com>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>

diff --git a/include/linux/hid.h b/include/linux/hid.h
index 449fa385703d..42970de1b40c 100644
--- a/include/linux/hid.h
+++ b/include/linux/hid.h
@@ -200,6 +200,7 @@ struct hid_item {
 #define HID_UP_DIGITIZER	0x000d0000
 #define HID_UP_PID		0x000f0000
 #define HID_UP_HPVENDOR         0xff7f0000
+#define HID_UP_HPVENDOR2        0xff010000
 #define HID_UP_MSVENDOR		0xff000000
 #define HID_UP_CUSTOM		0x00ff0000
 #define HID_UP_LOGIVENDOR	0xffbc0000

commit 56ccd186f1837dd418cd094f0e96b3196bbab9ef
Merge: b3d07e0344ea d1257081aecf
Author: Jiri Kosina <jkosina@suse.cz>
Date:   Tue May 22 11:32:31 2012 +0200

    Merge branch 'upstream' into for-linus
    
    Conflicts:
            drivers/hid/hid-core.c

commit 4fa3a5837b8427faab9b064b1948795eb77b9f8d
Author: Henrik Rydberg <rydberg@euromail.se>
Date:   Tue May 1 08:40:01 2012 +0200

    HID: hid-multitouch: Switch to device groups
    
    Switch the driver over to device group handling.  By adding the
    HID_GROUP_MULTITOUCH group to hid-core, hid-generic will no longer
    match multitouch devices.  By adding the HID_GROUP_MULTITOUCH entry to
    the device list, hid-multitouch will match all unknown multitouch
    devices, and udev will automatically load the module.
    
    Since HID_QUIRK_MULTITOUCH never gets set, the special quirks handling
    can be removed.  Since all HID MT devices have HID_DG_CONTACTID, they
    can be removed from the hid_have_special_driver list.
    
    With this patch, the unknown device ids are no longer NULL, so the code
    is modified to check for the generic entry instead.
    
    Signed-off-by: Henrik Rydberg <rydberg@euromail.se>
    Acked-by: Benjamin Tissoires <benjamin.tissoires@gmail.com>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>

diff --git a/include/linux/hid.h b/include/linux/hid.h
index dd694fb0c284..2c7a19515c3a 100644
--- a/include/linux/hid.h
+++ b/include/linux/hid.h
@@ -317,7 +317,6 @@ struct hid_item {
 #define HID_QUIRK_BADPAD			0x00000020
 #define HID_QUIRK_MULTI_INPUT			0x00000040
 #define HID_QUIRK_HIDINPUT_FORCE		0x00000080
-#define HID_QUIRK_MULTITOUCH			0x00000100
 #define HID_QUIRK_SKIP_OUTPUT_REPORTS		0x00010000
 #define HID_QUIRK_FULLSPEED_INTERVAL		0x10000000
 #define HID_QUIRK_NO_INIT_REPORTS		0x20000000
@@ -328,6 +327,7 @@ struct hid_item {
  * HID device groups
  */
 #define HID_GROUP_GENERIC			0x0001
+#define HID_GROUP_MULTITOUCH			0x0002
 
 /*
  * This is the global environment of the parser. This information is

commit 070748ed0b52399858a5967026a452bbb903a64c
Author: Henrik Rydberg <rydberg@euromail.se>
Date:   Mon Apr 23 12:07:05 2012 +0200

    HID: Create a generic device group
    
    Devices that do not have a special driver are handled by the generic
    driver. This patch does the same thing using device groups; Instead of
    forcing a particular driver, the appropriate driver is picked up by
    udev. As a consequence, one can now move a device from generic to
    specific handling by a simple rebind. By adding a new device id to the
    generic driver, the same thing can be done in reverse.
    
    Signed-off-by: Henrik Rydberg <rydberg@euromail.se>
    Acked-by: Benjamin Tissoires <benjamin.tissoires@gmail.com>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>

diff --git a/include/linux/hid.h b/include/linux/hid.h
index f45d33d0c121..dd694fb0c284 100644
--- a/include/linux/hid.h
+++ b/include/linux/hid.h
@@ -586,12 +586,12 @@ struct hid_descriptor {
 	struct hid_class_descriptor desc[1];
 } __attribute__ ((packed));
 
-#define HID_DEVICE(b, ven, prod) \
-	.bus = (b), \
-	.vendor = (ven), .product = (prod)
-
-#define HID_USB_DEVICE(ven, prod)	HID_DEVICE(BUS_USB, ven, prod)
-#define HID_BLUETOOTH_DEVICE(ven, prod)	HID_DEVICE(BUS_BLUETOOTH, ven, prod)
+#define HID_DEVICE(b, g, ven, prod)					\
+	.bus = (b), .group = (g), .vendor = (ven), .product = (prod)
+#define HID_USB_DEVICE(ven, prod)				\
+	.bus = BUS_USB, .vendor = (ven), .product = (prod)
+#define HID_BLUETOOTH_DEVICE(ven, prod)					\
+	.bus = BUS_BLUETOOTH, .vendor = (ven), .product = (prod)
 
 #define HID_REPORT_ID(rep) \
 	.report_type = (rep)

commit 734c660931095ae165c0db6ff60558fc4173bfd0
Author: Henrik Rydberg <rydberg@euromail.se>
Date:   Mon Apr 23 12:07:03 2012 +0200

    HID: Scan the device for group info before adding it
    
    In order to allow the report descriptor to influence the hid device
    properties, one needs to parse the descriptor early, without reference
    to any driver. Scan the descriptor for group information during device
    add, before the device has been broadcast to userland. The device
    modalias will contain group information which can be used to
    differentiate between modules. For starters, just handle the generic
    group.
    
    Signed-off-by: Henrik Rydberg <rydberg@euromail.se>
    Acked-by: Benjamin Tissoires <benjamin.tissoires@gmail.com>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>

diff --git a/include/linux/hid.h b/include/linux/hid.h
index a0e27ddb887d..f45d33d0c121 100644
--- a/include/linux/hid.h
+++ b/include/linux/hid.h
@@ -324,6 +324,11 @@ struct hid_item {
 #define HID_QUIRK_NO_IGNORE			0x40000000
 #define HID_QUIRK_NO_INPUT_SYNC			0x80000000
 
+/*
+ * HID device groups
+ */
+#define HID_GROUP_GENERIC			0x0001
+
 /*
  * This is the global environment of the parser. This information is
  * persistent for main-items. The global environment can be saved and

commit 4d53b8012f1f01ddb3f24db2031b042bb4cbd0d0
Author: Henrik Rydberg <rydberg@euromail.se>
Date:   Mon Apr 23 12:07:02 2012 +0200

    HID: Add device group to modalias
    
    HID devices are only partially presented to userland.  Hotplugged
    devices emit events containing a modalias based on the basic bus,
    vendor and product entities. However, in practise a hid device can
    depend on details such as a single usb interface or a particular item
    in a report descriptor.
    
    This patch adds a device group to the hid device id, and broadcasts it
    using uevent and the device modalias.  The module alias generation is
    modified to match. As a consequence, a device with a non-zero group
    will be processed by the corresponding group driver instead of by the
    generic hid driver.
    
    Signed-off-by: Henrik Rydberg <rydberg@euromail.se>
    Acked-by: Benjamin Tissoires <benjamin.tissoires@gmail.com>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>

diff --git a/include/linux/hid.h b/include/linux/hid.h
index d8e7cc7f894f..a0e27ddb887d 100644
--- a/include/linux/hid.h
+++ b/include/linux/hid.h
@@ -476,6 +476,7 @@ struct hid_device {							/* device report descriptor */
 	unsigned maxcollection;						/* Number of parsed collections */
 	unsigned maxapplication;					/* Number of applications */
 	__u16 bus;							/* BUS ID */
+	__u16 group;							/* Report group */
 	__u32 vendor;							/* Vendor ID */
 	__u32 product;							/* Product ID */
 	__u32 version;							/* HID version */

commit a7197c2e4120ce40e7e3f5580336b9a1dc791220
Author: Henrik Rydberg <rydberg@euromail.se>
Date:   Sun Apr 22 14:21:40 2012 +0200

    HID: Handle driver-specific device descriptor in core
    
    The low-level driver can read the report descriptor, but it cannot
    determine driver-specific changes to it. The hid core can fixup
    and parse the report descriptor during driver attach, but does
    not have direct access to the descriptor when doing so.
    
    To be able to handle attach/detach of hid drivers properly,
    a semantic change to hid_parse_report() is needed. This function has
    been used in two ways, both as descriptor reader in the ll drivers and
    as a parsor in the probe of the drivers. This patch splits the usage
    by introducing hid_open_report(), and modifies the hid_parse() macro
    to call hid_open_report() instead. The only usage of hid_parse_report()
    is then to read and store the device descriptor. As a consequence, we
    can handle the report fixups automatically inside the hid core.
    
    Signed-off-by: Henrik Rydberg <rydberg@euromail.se>
    Tested-by: Nikolai Kondrashov <spbnick@gmail.com>
    Tested-by: Benjamin Tissoires <benjamin.tissoires@gmail.com>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>

diff --git a/include/linux/hid.h b/include/linux/hid.h
index 3a95da60fd3e..d8e7cc7f894f 100644
--- a/include/linux/hid.h
+++ b/include/linux/hid.h
@@ -467,6 +467,8 @@ struct hid_driver;
 struct hid_ll_driver;
 
 struct hid_device {							/* device report descriptor */
+	__u8 *dev_rdesc;
+	unsigned dev_rsize;
 	__u8 *rdesc;
 	unsigned rsize;
 	struct hid_collection *collection;				/* List of HID collections */
@@ -735,6 +737,7 @@ void hid_output_report(struct hid_report *report, __u8 *data);
 struct hid_device *hid_allocate_device(void);
 struct hid_report *hid_register_report(struct hid_device *device, unsigned type, unsigned id);
 int hid_parse_report(struct hid_device *hid, __u8 *start, unsigned size);
+int hid_open_report(struct hid_device *device);
 int hid_check_keys_pressed(struct hid_device *hid);
 int hid_connect(struct hid_device *hid, unsigned int connect_mask);
 void hid_disconnect(struct hid_device *hid);
@@ -805,16 +808,7 @@ static inline void hid_map_usage_clear(struct hid_input *hidinput,
  */
 static inline int __must_check hid_parse(struct hid_device *hdev)
 {
-	int ret;
-
-	if (hdev->status & HID_STAT_PARSED)
-		return 0;
-
-	ret = hdev->ll_driver->parse(hdev);
-	if (!ret)
-		hdev->status |= HID_STAT_PARSED;
-
-	return ret;
+	return hid_open_report(hdev);
 }
 
 /**

commit b6787242f32700377d3da3b8d788ab3928bab849
Author: Jiri Kosina <jkosina@suse.cz>
Date:   Fri Apr 27 00:56:08 2012 +0200

    HID: hidraw: add proper error handling to raw event reporting
    
    If kmemdup() in hidraw_report_event() fails, we are not propagating
    this fact properly.
    
    Let hidraw_report_event() and hid_report_raw_event() return an error
    value to the caller.
    
    Reported-by: Oliver Neukum <oneukum@suse.de>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>

diff --git a/include/linux/hid.h b/include/linux/hid.h
index 3a95da60fd3e..58b3857dc51c 100644
--- a/include/linux/hid.h
+++ b/include/linux/hid.h
@@ -896,7 +896,7 @@ static inline int hid_hw_power(struct hid_device *hdev, int level)
 	return hdev->ll_driver->power ? hdev->ll_driver->power(hdev, level) : 0;
 }
 
-void hid_report_raw_event(struct hid_device *hid, int type, u8 *data, int size,
+int hid_report_raw_event(struct hid_device *hid, int type, u8 *data, int size,
 		int interrupt);
 
 extern int hid_generic_init(void);

commit 420174afdc7023c000e5b5b1b6fe9e028470c713
Merge: e0273728564a 652aa6a9ac4a
Author: Jiri Kosina <jkosina@suse.cz>
Date:   Mon Jan 9 11:24:59 2012 +0100

    Merge branch 'hid-battery' of git://git.kernel.org/pub/scm/linux/kernel/git/jeremy/xen into for-linus

commit ce63920b395f1476e2d28cca16a56919289f0b62
Author: Jeremy Fitzhardinge <jeremy@goop.org>
Date:   Fri Dec 2 21:57:50 2011 -0800

    hid-input/battery: remove battery_val
    
    hidinput_get_battery_property() now directly polls the device for the
    current battery strength, so there's no need for battery_val, or the
    code to set it on the input event path.
    
    Signed-off-by: Jeremy Fitzhardinge <jeremy@goop.org>

diff --git a/include/linux/hid.h b/include/linux/hid.h
index 9351d3d1d089..0e76f0ca110a 100644
--- a/include/linux/hid.h
+++ b/include/linux/hid.h
@@ -495,7 +495,6 @@ struct hid_device {							/* device report descriptor */
 	struct power_supply battery;
 	__s32 battery_min;
 	__s32 battery_max;
-	__s32 battery_val;
 	__s32 battery_report_type;
 	__s32 battery_report_id;
 #endif

commit fb8ac91b4dccbdda0ad51d499079d05143783ba4
Author: Jeremy Fitzhardinge <jeremy@goop.org>
Date:   Fri Dec 2 11:18:45 2011 -0800

    hid-input/battery: deal with both FEATURE and INPUT report batteries
    
    Some devices seem to report batteries as FEATUREs, others as INPUTs.
    
    Signed-off-by: Jeremy Fitzhardinge <jeremy@goop.org>

diff --git a/include/linux/hid.h b/include/linux/hid.h
index fa772c86fa2c..9351d3d1d089 100644
--- a/include/linux/hid.h
+++ b/include/linux/hid.h
@@ -496,6 +496,7 @@ struct hid_device {							/* device report descriptor */
 	__s32 battery_min;
 	__s32 battery_max;
 	__s32 battery_val;
+	__s32 battery_report_type;
 	__s32 battery_report_id;
 #endif
 

commit bbc21cfd55858d7c3e55bfaa91fa934b0b13ad4d
Author: Jeremy Fitzhardinge <jeremy@goop.org>
Date:   Fri Dec 2 11:12:36 2011 -0800

    hid-input/battery: add quirks for battery
    
    Some devices always report percentage, despite having 0/255 as their
    min/max, so add a quirk for them.
    
    Signed-off-by: Jeremy Fitzhardinge <jeremy@goop.org>

diff --git a/include/linux/hid.h b/include/linux/hid.h
index b5df198d87a5..fa772c86fa2c 100644
--- a/include/linux/hid.h
+++ b/include/linux/hid.h
@@ -735,6 +735,8 @@ int hid_parse_report(struct hid_device *hid, __u8 *start, unsigned size);
 int hid_check_keys_pressed(struct hid_device *hid);
 int hid_connect(struct hid_device *hid, unsigned int connect_mask);
 void hid_disconnect(struct hid_device *hid);
+const struct hid_device_id *hid_match_id(struct hid_device *hdev,
+					 const struct hid_device_id *id);
 
 /**
  * hid_map_usage - map usage input bits

commit c5a92aa3eb7425da68797a820d208edad36551f7
Author: Daniel Nicoletti <dantti12@gmail.com>
Date:   Fri Dec 2 03:52:22 2011 -0200

    hid-input: add support for HID devices reporting Battery Strength
    
    I've sent an email earlier asking for help with a GetFeature code, and now I
    have a second patch on top of Jeremy's to provide the battery functionality
    for devices that support reporting it.
    
    If I understood correctly when talking to Jeremy he said his device
    never actually reported the status as an input event (sorry if I didn't
    understand it correctly), and after reading HID specs I believe it's
    really because it was meant to be probed, I have an Apple Keyboard and
    Magic Trackpad both bluetooth batteries operated, so using PacketLogger
    I saw that Mac OSX always ask the battery status using the so called
    GetFeature.
    
    What my patch does is basically:
    - store the report id that matches the battery_strength
    - setup the battery if 0x6.0x20 is found, even if that is reported as a feature
      (as it was meant to be but only the MagicTrackpad does)
    - when upower or someone access /sys/class/power_supply/hid-*/capacity it
      will probe the device and return it's status.
    
    It works great for both devices, but I have two concerns:
    - the report_features function has a duplicated code
    - it would be nice if it was possible for specific drivers to provide their own
      probe as there might be some strange devices... (but maybe it's
    already possible)
    
    I've talked to the upower dev and he fixed it to be able to show the
    right percentage.
    
    Here how the uevent file (in /sys/class/power_supply/hid-*/) looks like:
    POWER_SUPPLY_NAME=hid-00:22:41:D9:18:E7-battery
    POWER_SUPPLY_PRESENT=1
    POWER_SUPPLY_ONLINE=1
    POWER_SUPPLY_CAPACITY=66
    POWER_SUPPLY_MODEL_NAME=MacAdmin’s keyboard
    POWER_SUPPLY_STATUS=Discharging
    
    POWER_SUPPLY_NAME=hid-70:CD:60:F5:FF:3F-battery
    POWER_SUPPLY_PRESENT=1
    POWER_SUPPLY_ONLINE=1
    POWER_SUPPLY_CAPACITY=62
    POWER_SUPPLY_MODEL_NAME=nexx’s Trackpad
    POWER_SUPPLY_STATUS=Discharging
    
    Signed-off-by: Daniel Nicoletti <dantti12@gmail.com>

diff --git a/include/linux/hid.h b/include/linux/hid.h
index 7f344c3da767..b5df198d87a5 100644
--- a/include/linux/hid.h
+++ b/include/linux/hid.h
@@ -496,6 +496,7 @@ struct hid_device {							/* device report descriptor */
 	__s32 battery_min;
 	__s32 battery_max;
 	__s32 battery_val;
+	__s32 battery_report_id;
 #endif
 
 	unsigned int status;						/* see STAT flags above */

commit e0273728564a395a13cfed70e34da4f2613d2d44
Merge: 74c4fb058083 11576c6114c3 d41c2a7011df 4371ea8202e9 cd07655e732b 78761ff9bc4e 90120d66974e
Author: Jiri Kosina <jkosina@suse.cz>
Date:   Thu Jan 5 15:51:02 2012 +0100

    Merge branches 'hyperv', 'multitouch', 'roccat', 'upstream', 'upstream-fixes', 'wacom' and 'wiimote' into for-linus

commit 4371ea8202e98c8ef77ca887de3b19affbb3498f
Author: Daniel Kurtz <djkurtz@chromium.org>
Date:   Thu Nov 17 19:23:50 2011 +0800

    HID: usbhid: defer LED setting to a workqueue
    
    Defer LED setting action to a workqueue.
    This is more likely to send all LED change events in a single URB.
    
    Signed-off-by: Daniel Kurtz <djkurtz@chromium.org>
    Acked-by: Oliver Neukum <oneukum@suse.de>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>

diff --git a/include/linux/hid.h b/include/linux/hid.h
index 7f344c3da767..999a54c72b20 100644
--- a/include/linux/hid.h
+++ b/include/linux/hid.h
@@ -727,6 +727,8 @@ extern void hidinput_disconnect(struct hid_device *);
 int hid_set_field(struct hid_field *, unsigned, __s32);
 int hid_input_report(struct hid_device *, int type, u8 *, int, int);
 int hidinput_find_field(struct hid_device *hid, unsigned int type, unsigned int code, struct hid_field **field);
+struct hid_field *hidinput_get_led_field(struct hid_device *hid);
+unsigned int hidinput_count_leds(struct hid_device *hid);
 void hid_output_report(struct hid_report *report, __u8 *data);
 struct hid_device *hid_allocate_device(void);
 struct hid_report *hid_register_report(struct hid_device *device, unsigned type, unsigned id);

commit 4f5ca836bef3dd3eb602152d5d712a513998264e
Author: Jeremy Fitzhardinge <jeremy@goop.org>
Date:   Wed Nov 23 00:49:14 2011 -0800

    HID: hid-input: add support for HID devices reporting Battery Strength
    
    Some HID devices, such as my Bluetooth mouse, report their battery
    strength as an event.  Rather than passing it through as a strange
    absolute input event, this patch registers it with the power_supply
    subsystem as a battery, so that the device's Battery Strength can be
    reported to usermode.
    
    The battery appears in sysfs names
    /sys/class/power_supply/hid-<UNIQ>-battery, and it is a child of the
    battery-containing device, so it should be clear what it's the battery of.
    
    Unfortunately on my current Fedora 16 system, while the battery does
    appear in the UI, it is listed as a Laptop Battery with 0% charge (since
    it ignores the "capacity" property of the battery and instead computes
    it from the "energy*" fields, which we can't supply given the limited
    information contained within the HID Report).
    
    Still, this patch is the first step.
    
    Signed-off-by: Jeremy Fitzhardinge <jeremy@goop.org>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>

diff --git a/include/linux/hid.h b/include/linux/hid.h
index deed5f9a1e1c..7f344c3da767 100644
--- a/include/linux/hid.h
+++ b/include/linux/hid.h
@@ -72,6 +72,7 @@
 #include <linux/workqueue.h>
 #include <linux/input.h>
 #include <linux/semaphore.h>
+#include <linux/power_supply.h>
 
 /*
  * We parse each description item into this structure. Short items data
@@ -190,6 +191,7 @@ struct hid_item {
 #define HID_UP_UNDEFINED	0x00000000
 #define HID_UP_GENDESK		0x00010000
 #define HID_UP_SIMULATION	0x00020000
+#define HID_UP_GENDEVCTRLS	0x00060000
 #define HID_UP_KEYBOARD		0x00070000
 #define HID_UP_LED		0x00080000
 #define HID_UP_BUTTON		0x00090000
@@ -239,6 +241,8 @@ struct hid_item {
 #define HID_GD_RIGHT		0x00010092
 #define HID_GD_LEFT		0x00010093
 
+#define HID_DC_BATTERYSTRENGTH	0x00060020
+
 #define HID_DG_DIGITIZER	0x000d0001
 #define HID_DG_PEN		0x000d0002
 #define HID_DG_LIGHTPEN		0x000d0003
@@ -482,6 +486,18 @@ struct hid_device {							/* device report descriptor */
 	struct hid_driver *driver;
 	struct hid_ll_driver *ll_driver;
 
+#ifdef CONFIG_HID_BATTERY_STRENGTH
+	/*
+	 * Power supply information for HID devices which report
+	 * battery strength. power_supply is registered iff
+	 * battery.name is non-NULL.
+	 */
+	struct power_supply battery;
+	__s32 battery_min;
+	__s32 battery_max;
+	__s32 battery_val;
+#endif
+
 	unsigned int status;						/* see STAT flags above */
 	unsigned claimed;						/* Claimed by hidinput, hiddev? */
 	unsigned quirks;						/* Various quirks the device can pull on us */

commit eb5589a8f0dab7e29021344228856339e6a1249c
Author: Paul Gortmaker <paul.gortmaker@windriver.com>
Date:   Fri May 27 09:02:11 2011 -0400

    include: convert various register fcns to macros to avoid include chaining
    
    The original implementations reference THIS_MODULE in an inline.
    We could include <linux/export.h>, but it is better to avoid chaining.
    
    Fortunately someone else already thought of this, and made a similar
    inline into a #define in <linux/device.h> for device_schedule_callback(),
    [see commit 523ded71de0] so follow that precedent here.
    
    Also bubble up any __must_check that were used on the prev. wrapper inline
    functions up one to the real __register functions, to preserve any prev.
    sanity checks that were used in those instances.
    
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>

diff --git a/include/linux/hid.h b/include/linux/hid.h
index deed5f9a1e1c..c235e4e8767c 100644
--- a/include/linux/hid.h
+++ b/include/linux/hid.h
@@ -697,10 +697,11 @@ extern void hid_destroy_device(struct hid_device *);
 
 extern int __must_check __hid_register_driver(struct hid_driver *,
 		struct module *, const char *mod_name);
-static inline int __must_check hid_register_driver(struct hid_driver *driver)
-{
-	return __hid_register_driver(driver, THIS_MODULE, KBUILD_MODNAME);
-}
+
+/* use a define to avoid include chaining to get THIS_MODULE & friends */
+#define hid_register_driver(driver) \
+	__hid_register_driver(driver, THIS_MODULE, KBUILD_MODNAME)
+
 extern void hid_unregister_driver(struct hid_driver *);
 
 extern void hidinput_hid_event(struct hid_device *, struct hid_field *, struct hid_usage *, __s32);

commit b3aec7b686329e6bb65aa08c7f9458f7fd512f06
Merge: f6f124278445 1bcc20675a1a
Author: Jiri Kosina <jkosina@suse.cz>
Date:   Tue Oct 25 09:59:04 2011 +0200

    Merge branch 'upstream' into for-linus
    
    Conflicts:
            drivers/hid/hid-core.c
            drivers/hid/hid-ids.h

commit b77c3920e90e96103e4f41442999402925fe5f73
Author: Benjamin Tissoires <benjamin.tissoires@gmail.com>
Date:   Wed Sep 21 16:56:54 2011 +0200

    HID: add autodetection of multitouch devices
    
    As mentioned by http://www.microsoft.com/whdc/device/input/DigitizerDrvs_touch.mspx
    multitouch devices are those that have the input report HID_CONTACTID.
    
    This patch detects this and unloads the generic-usb driver.
    
    Signed-off-by: Benjamin Tissoires <benjamin.tissoires@enac.fr>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>

diff --git a/include/linux/hid.h b/include/linux/hid.h
index 9cf8e7ae7450..6fb743d72bfe 100644
--- a/include/linux/hid.h
+++ b/include/linux/hid.h
@@ -312,6 +312,7 @@ struct hid_item {
 #define HID_QUIRK_BADPAD			0x00000020
 #define HID_QUIRK_MULTI_INPUT			0x00000040
 #define HID_QUIRK_HIDINPUT_FORCE		0x00000080
+#define HID_QUIRK_MULTITOUCH			0x00000100
 #define HID_QUIRK_SKIP_OUTPUT_REPORTS		0x00010000
 #define HID_QUIRK_FULLSPEED_INTERVAL		0x10000000
 #define HID_QUIRK_NO_INIT_REPORTS		0x20000000

commit 4ea5454203d991ec85264f64f89ca8855fce69b0
Author: David Herrmann <dh.herrmann@googlemail.com>
Date:   Wed Aug 10 14:02:07 2011 +0200

    HID: Fix race condition between driver core and ll-driver
    
    HID low level drivers register new devices with the HID core which then
    adds the devices to the HID bus. The HID bus normally immediately probes
    an appropriate driver which then handles HID input for this device.
    The ll driver now uses the hid_input_report() function to report input
    events for a specific device. However, if the HID bus unloads the driver
    at the same time (for instance via a call to
     /sys/bus/hid/devices/<dev>/unbind) then the hdev->driver pointer may be
    used by hid_input_report() and hid_device_remove() at the same time
    which may cause hdev->driver to point to invalid memory.
    
    This fix adds a semaphore to every hid device which protects
    hdev->driver from asynchronous access. This semaphore is locked during
    driver *_probe and *_remove and also inside hid_input_report(). The
    *_probe and *_remove functions may sleep so the semaphore is good here,
    however, hid_input_report() is in atomic context and hence only uses
    down_trylock(). If it cannot acquire the lock it simply drops the input
    package.
    
    The low-level drivers report input events synchronously so
    hid_input_report() should never be entered twice at the same time on the
    same device. Hence, the lock should always be available. But if the
    driver is currently probed/removed then the lock is not available and
    dropping the package should be safe because this is what would have
    happened if the package arrived some milliseconds earlier/later.
    
    This also fixes another race condition while probing drivers:
    First the *_probe function of the driver is called and only if that
    succeeds, the related input device of hidinput is registered. If the low
    level driver reports input events after the *_probe function returned
    but before the input device is registered, then a NULL pointer
    dereference will occur. (Equivalently on driver remove function).
    This is not possible anymore, since the semaphore lock drops all
    incoming packages until the driver/device is fully initialized.
    
    Signed-off-by: David Herrmann <dh.herrmann@googlemail.com>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>

diff --git a/include/linux/hid.h b/include/linux/hid.h
index 9cf8e7ae7450..9c02d07af0d1 100644
--- a/include/linux/hid.h
+++ b/include/linux/hid.h
@@ -71,6 +71,7 @@
 #include <linux/timer.h>
 #include <linux/workqueue.h>
 #include <linux/input.h>
+#include <linux/semaphore.h>
 
 /*
  * We parse each description item into this structure. Short items data
@@ -475,6 +476,7 @@ struct hid_device {							/* device report descriptor */
 	unsigned country;						/* HID country */
 	struct hid_report_enum report_enum[HID_REPORT_TYPES];
 
+	struct semaphore driver_lock;					/* protects the current driver */
 	struct device dev;						/* device */
 	struct hid_driver *driver;
 	struct hid_ll_driver *ll_driver;

commit 6dc1418e13144162e8bc4858789010d8f0e1e65c
Author: Tomoki Sekiyama <tomoki.sekiyama@gmail.com>
Date:   Mon May 23 15:45:44 2011 -0700

    HID: yurex: recognize GeneralKeys wireless presenter as generic HID
    
    Unfortunately, the device seems to have the same Vendor ID and Product ID
    as YUREX leg-shakes sensors, and the commit 6bc235a2e2 ("USB: add driver
    for Meywa-Denki & Kayac YUREX") added the ID to hid_ignore_list.
    
    I believe that we can distinguish YUREX and the Wireless Presenter by
    device type.  The patch below makes the driver ignore only YUREX
    (bInterfaceProtocol==0), and recognize Wireless Presenter
    (bInterfaceProtocol is keyboard or mouse) as generic HID.  (I don't have
    the Wireless Presenter, so not yet ested.)
    
    ** YUREX lsusb information:
    Bus 002 Device 007: ID 0c45:1010 Microdia
    Device Descriptor:
       bLength                18
       bDescriptorType         1
       bcdUSB               1.10
       bDeviceClass            0 (Defined at Interface level)
       bDeviceSubClass         0
       bDeviceProtocol         0
       bMaxPacketSize0         8
       idVendor           0x0c45 Microdia
       idProduct          0x1010
       bcdDevice            0.03
       iManufacturer           1 JESS
       iProduct                2 YUREX
       iSerial                 3 10000269
       bNumConfigurations      1
       Configuration Descriptor:
         bLength                 9
         bDescriptorType         2
         wTotalLength           34
         bNumInterfaces          1
         bConfigurationValue     1
         iConfiguration          0
         bmAttributes         0xa0
           (Bus Powered)
           Remote Wakeup
         MaxPower              100mA
         Interface Descriptor:
           bLength                 9
           bDescriptorType         4
           bInterfaceNumber        0
           bAlternateSetting       0
           bNumEndpoints           1
           bInterfaceClass         3 Human Interface Device
           bInterfaceSubClass      1 Boot Interface Subclass
           bInterfaceProtocol      0 None
           iInterface              0
             HID Device Descriptor:
               bLength                 9
               bDescriptorType        33
               bcdHID               1.10
               bCountryCode            0 Not supported
               bNumDescriptors         1
               bDescriptorType        34 Report
               wDescriptorLength      31
              Report Descriptors:
                ** UNAVAILABLE **
           Endpoint Descriptor:
             bLength                 7
             bDescriptorType         5
             bEndpointAddress     0x81  EP 1 IN
             bmAttributes            3
               Transfer Type            Interrupt
               Synch Type               None
               Usage Type               Data
             wMaxPacketSize     0x0008  1x 8 bytes
             bInterval              10
    Device Status:     0x0002
       (Bus Powered)
       Remote Wakeup Enabled
    
    Addresses https://bugzilla.kernel.org/show_bug.cgi?id=26922
    
    Signed-off-by: Tomoki Sekiyama <tomoki.sekiyama@gmail.com>
    Cc: Greg KH <gregkh@suse.de>
    Cc: "Rafael J. Wysocki" <rjw@sisk.pl>
    Cc: Maciej Rutecki <maciej.rutecki@gmail.com>
    Reported-by: Thomas B?chler <thomas@archlinux.org>
    Tested-by: Thomas B?chler <thomas@archlinux.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>

diff --git a/include/linux/hid.h b/include/linux/hid.h
index 42f7e2fb501f..9cf8e7ae7450 100644
--- a/include/linux/hid.h
+++ b/include/linux/hid.h
@@ -453,7 +453,8 @@ struct hid_input {
 
 enum hid_type {
 	HID_TYPE_OTHER = 0,
-	HID_TYPE_USBMOUSE
+	HID_TYPE_USBMOUSE,
+	HID_TYPE_USBNONE
 };
 
 struct hid_driver;

commit 25985edcedea6396277003854657b5f3cb31a628
Author: Lucas De Marchi <lucas.demarchi@profusion.mobi>
Date:   Wed Mar 30 22:57:33 2011 -0300

    Fix common misspellings
    
    Fixes generated by 'codespell' and manually reviewed.
    
    Signed-off-by: Lucas De Marchi <lucas.demarchi@profusion.mobi>

diff --git a/include/linux/hid.h b/include/linux/hid.h
index bb29bb1dbd2f..42f7e2fb501f 100644
--- a/include/linux/hid.h
+++ b/include/linux/hid.h
@@ -799,7 +799,7 @@ static inline int __must_check hid_parse(struct hid_device *hdev)
  *
  * Call this in probe function *after* hid_parse. This will setup HW buffers
  * and start the device (if not deffered to device open). hid_hw_stop must be
- * called if this was successfull.
+ * called if this was successful.
  */
 static inline int __must_check hid_hw_start(struct hid_device *hdev,
 		unsigned int connect_mask)

commit 65b06194c9c9f41bc07ac6a6d42edb4b9e43fea4
Merge: b4a65f4ef59b 0ff1731a1ae5 4875ac114d8b 7b2a64c96ad5 61c29f5b1856 0ae43810976b 5623a24a8081
Author: Jiri Kosina <jkosina@suse.cz>
Date:   Thu Mar 17 14:31:46 2011 +0100

    Merge branches 'dragonrise', 'hidraw-feature', 'multitouch', 'ntrig', 'roccat', 'upstream' and 'upstream-fixes' into for-linus

commit f635bd11c8d332d917fb9a4cad3071b2357d5b2a
Author: Henrik Rydberg <rydberg@euromail.se>
Date:   Thu Feb 24 19:30:59 2011 +0100

    HID: Do not create input devices for feature reports
    
    When the multi input quirk is set, there is a new input device
    created for every feature report. Since the idea is to present
    features per hid device, not per input device, revert back to
    the original report loop and change the feature_mapping() callback
    to not take the input device as argument.
    
    Signed-off-by: Henrik Rydberg <rydberg@euromail.se>
    Tested-by: Benjamin Tissoires <benjmain.tissoires@gmail.com>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>

diff --git a/include/linux/hid.h b/include/linux/hid.h
index d91c25e253c8..fc5faf60f6df 100644
--- a/include/linux/hid.h
+++ b/include/linux/hid.h
@@ -638,7 +638,7 @@ struct hid_driver {
 			struct hid_input *hidinput, struct hid_field *field,
 			struct hid_usage *usage, unsigned long **bit, int *max);
 	void (*feature_mapping)(struct hid_device *hdev,
-			struct hid_input *hidinput, struct hid_field *field,
+			struct hid_field *field,
 			struct hid_usage *usage);
 #ifdef CONFIG_PM
 	int (*suspend)(struct hid_device *hdev, pm_message_t message);

commit b4dbde9da8ece42bbe4c70c26bac3b28dd6a3ddb
Author: Alan Ott <alan@signal11.us>
Date:   Tue Jan 18 03:04:39 2011 -0500

    HID: Add Support for Setting and Getting Feature Reports from hidraw
    
    Per the HID Specification, Feature reports must be sent and received on
    the Configuration endpoint (EP 0) through the Set_Report/Get_Report
    interfaces.  This patch adds two ioctls to hidraw to set and get feature
    reports to and from the device.  Modifications were made to hidraw and
    usbhid.
    
    New hidraw ioctls:
      HIDIOCSFEATURE - Perform a Set_Report transfer of a Feature report.
      HIDIOCGFEATURE - Perform a Get_Report transfer of a Feature report.
    
    Signed-off-by: Alan Ott <alan@signal11.us>
    Signed-off-by: Antonio Ospite <ospite@studenti.unina.it>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>

diff --git a/include/linux/hid.h b/include/linux/hid.h
index d91c25e253c8..e8ee0a93bda3 100644
--- a/include/linux/hid.h
+++ b/include/linux/hid.h
@@ -504,6 +504,9 @@ struct hid_device {							/* device report descriptor */
 				  struct hid_usage *, __s32);
 	void (*hiddev_report_event) (struct hid_device *, struct hid_report *);
 
+	/* handler for raw input (Get_Report) data, used by hidraw */
+	int (*hid_get_raw_report) (struct hid_device *, unsigned char, __u8 *, size_t, unsigned char);
+
 	/* handler for raw output data, used by hidraw */
 	int (*hid_output_raw_report) (struct hid_device *, __u8 *, size_t, unsigned char);
 

commit 8f685fbda43deccd130d192c9fcef1444649eaca
Merge: d24450e2075b 2d93666e7066
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Thu Jan 13 09:58:38 2011 -0800

    Merge branch 'for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/jikos/hid
    
    * 'for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/jikos/hid:
      HID: hid-multitouch: minor fixes based on additional review
      HID: Switch turbox/mosart touchscreen to hid-mosart
      HID: add Add Cando touch screen 10.1-inch product id
      HID: hid-mulitouch: add support for the 'Sensing Win7-TwoFinger'
      HID: hid-multitouch: add support for Cypress TrueTouch panels
      HID: hid-multitouch: support for PixCir-based panels
      HID: set HID_MAX_FIELD at 128
      HID: add feature_mapping callback

commit 281054ac8dfc083442c571be44f1c5b9821812ae
Author: Benjamin Tissoires <benjamin.tissoires@enac.fr>
Date:   Fri Jan 7 23:45:11 2011 +0100

    HID: set HID_MAX_FIELD at 128
    
    Stantums multitouch panels sends more than 64 reports and this results
    in not being able to handle all the touches given by this device.
    
    This patch is required to be able to include Stantum panels in the
    unified hid-multitouch driver.
    
    Signed-off-by: Benjamin Tissoires <benjamin.tissoires@enac.fr>
    Acked-by: Henrik Rydberg <rydberg@euromail.se>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>

diff --git a/include/linux/hid.h b/include/linux/hid.h
index 96bd7920a01a..1ebc6e39f20d 100644
--- a/include/linux/hid.h
+++ b/include/linux/hid.h
@@ -402,7 +402,7 @@ struct hid_field {
 	__u16 dpad;			/* dpad input code */
 };
 
-#define HID_MAX_FIELDS 64
+#define HID_MAX_FIELDS 128
 
 struct hid_report {
 	struct list_head list;

commit 0d2689c0f054f6a8bf3115d6386bd9c2d65dc44b
Author: Benjamin Tissoires <benjamin.tissoires@enac.fr>
Date:   Fri Jan 7 23:44:32 2011 +0100

    HID: add feature_mapping callback
    
    Currently hid doesn't export the features it knows to the specific modules.
    Some information can be really important in such features: MosArt and
    Cypress devices are by default not in a multitouch mode.
    We have to send the value 2 on the right feature.
    
    This patch exports to the module the features report so they can find the
    right feature to set up the correct mode.
    
    Signed-off-by: Benjamin Tissoires <benjamin.tissoires@enac.fr>
    Acked-by: Henrik Rydberg <rydberg@euromail.se>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>

diff --git a/include/linux/hid.h b/include/linux/hid.h
index bb0f56f5c01e..96bd7920a01a 100644
--- a/include/linux/hid.h
+++ b/include/linux/hid.h
@@ -593,6 +593,7 @@ struct hid_usage_id {
  * @report_fixup: called before report descriptor parsing (NULL means nop)
  * @input_mapping: invoked on input registering before mapping an usage
  * @input_mapped: invoked on input registering after mapping an usage
+ * @feature_mapping: invoked on feature registering
  * @suspend: invoked on suspend (NULL means nop)
  * @resume: invoked on resume if device was not reset (NULL means nop)
  * @reset_resume: invoked on resume if device was reset (NULL means nop)
@@ -636,6 +637,9 @@ struct hid_driver {
 	int (*input_mapped)(struct hid_device *hdev,
 			struct hid_input *hidinput, struct hid_field *field,
 			struct hid_usage *usage, unsigned long **bit, int *max);
+	void (*feature_mapping)(struct hid_device *hdev,
+			struct hid_input *hidinput, struct hid_field *field,
+			struct hid_usage *usage);
 #ifdef CONFIG_PM
 	int (*suspend)(struct hid_device *hdev, pm_message_t message);
 	int (*resume)(struct hid_device *hdev);

commit 4291ee305e9bb0699504a66f0e2b7aefcf0512a5
Author: Joe Perches <joe@perches.com>
Date:   Thu Dec 9 19:29:03 2010 -0800

    HID: Add and use hid_<level>: dev_<level> equivalents
    
    Neaten current uses of dev_<level> by adding and using
    hid specific hid_<level> macros.
    
    Convert existing uses of dev_<level> uses to hid_<level>.
    Convert hid-pidff printk uses to hid_<level>.
    
    Remove err_hid and use hid_err instead.
    
    Add missing newlines to logging messages where necessary.
    Coalesce format strings.
    
    Add and use pr_fmt(fmt) KBUILD_MODNAME ": " fmt
    
    Other miscellaneous changes:
    
    Add const struct hid_device * argument to hid-core functions
    extract() and implement() so hid_<level> can be used by them.
    Fix bad indentation in hid-core hid_input_field function
    that calls extract() function above.
    
    Signed-off-by: Joe Perches <joe@perches.com>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>

diff --git a/include/linux/hid.h b/include/linux/hid.h
index e2af195d8b46..20b9801f669b 100644
--- a/include/linux/hid.h
+++ b/include/linux/hid.h
@@ -881,12 +881,32 @@ int hid_pidff_init(struct hid_device *hid);
 #define hid_pidff_init NULL
 #endif
 
-#define dbg_hid(format, arg...) if (hid_debug) \
-				printk(KERN_DEBUG "%s: " format ,\
-				__FILE__ , ## arg)
-#define err_hid(format, arg...) printk(KERN_ERR "%s: " format "\n" , \
-		__FILE__ , ## arg)
-#endif /* HID_FF */
+#define dbg_hid(format, arg...)						\
+do {									\
+	if (hid_debug)							\
+		printk(KERN_DEBUG "%s: " format, __FILE__, ##arg);	\
+} while (0)
+
+#define hid_printk(level, hid, fmt, arg...)		\
+	dev_printk(level, &(hid)->dev, fmt, ##arg)
+#define hid_emerg(hid, fmt, arg...)			\
+	dev_emerg(&(hid)->dev, fmt, ##arg)
+#define hid_crit(hid, fmt, arg...)			\
+	dev_crit(&(hid)->dev, fmt, ##arg)
+#define hid_alert(hid, fmt, arg...)			\
+	dev_alert(&(hid)->dev, fmt, ##arg)
+#define hid_err(hid, fmt, arg...)			\
+	dev_err(&(hid)->dev, fmt, ##arg)
+#define hid_notice(hid, fmt, arg...)			\
+	dev_notice(&(hid)->dev, fmt, ##arg)
+#define hid_warn(hid, fmt, arg...)			\
+	dev_warn(&(hid)->dev, fmt, ##arg)
+#define hid_info(hid, fmt, arg...)			\
+	dev_info(&(hid)->dev, fmt, ##arg)
+#define hid_dbg(hid, fmt, arg...)			\
+	dev_dbg(&(hid)->dev, fmt, ##arg)
+
+#endif /* __KERNEL__ */
 
 #endif
 

commit 5bea7660bba973dc5e8e9d92b11fb1dd5b524ebf
Author: Dmitry Torokhov <dmitry.torokhov@gmail.com>
Date:   Tue Dec 7 23:02:48 2010 -0800

    HID: add hid_hw_open/close/power() handlers
    
    Instead of exposing the guts of hid->ll_driver relationship to HID
    sub-drivers provide these helpers to encapsulate the details.
    
    Signed-off-by: Dmitry Torokhov <dtor@mail.ru>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>

diff --git a/include/linux/hid.h b/include/linux/hid.h
index bb0f56f5c01e..e2af195d8b46 100644
--- a/include/linux/hid.h
+++ b/include/linux/hid.h
@@ -820,6 +820,49 @@ static inline void hid_hw_stop(struct hid_device *hdev)
 	hdev->ll_driver->stop(hdev);
 }
 
+/**
+ * hid_hw_open - signal underlaying HW to start delivering events
+ *
+ * @hdev: hid device
+ *
+ * Tell underlying HW to start delivering events from the device.
+ * This function should be called sometime after successful call
+ * to hid_hiw_start().
+ */
+static inline int __must_check hid_hw_open(struct hid_device *hdev)
+{
+	return hdev->ll_driver->open(hdev);
+}
+
+/**
+ * hid_hw_close - signal underlaying HW to stop delivering events
+ *
+ * @hdev: hid device
+ *
+ * This function indicates that we are not interested in the events
+ * from this device anymore. Delivery of events may or may not stop,
+ * depending on the number of users still outstanding.
+ */
+static inline void hid_hw_close(struct hid_device *hdev)
+{
+	hdev->ll_driver->close(hdev);
+}
+
+/**
+ * hid_hw_power - requests underlying HW to go into given power mode
+ *
+ * @hdev: hid device
+ * @level: requested power level (one of %PM_HINT_* defines)
+ *
+ * This function requests underlying hardware to enter requested power
+ * mode.
+ */
+
+static inline int hid_hw_power(struct hid_device *hdev, int level)
+{
+	return hdev->ll_driver->power ? hdev->ll_driver->power(hdev, level) : 0;
+}
+
 void hid_report_raw_event(struct hid_device *hid, int type, u8 *data, int size,
 		int interrupt);
 

commit 8b66a16f25f819bb1f132f075c5c01a288776cf8
Merge: bbd128b5acae 41fa92302be7
Author: Jiri Kosina <jkosina@suse.cz>
Date:   Sat Oct 23 22:49:32 2010 +0200

    Merge branch 'uc-logic' into for-linus
    
    Conflicts:
            drivers/hid/hid-ids.h
            drivers/hid/hid-lg.c
            drivers/hid/usbhid/hid-quirks.c

commit 24750f3e469bef81a96c0036cd4700df5fb48925
Author: Henrik Rydberg <rydberg@thabit.(none)>
Date:   Tue Aug 24 10:54:44 2010 +0200

    HID: Add a hid quirk for input sync override
    
    As of lately, HID devices which send per-frame data split over several
    HID reports have started to emerge. This patch adds a quirk which
    allows the HID driver to take over the input layer synchronization,
    and hence the control of the frame boundary.
    
    Signed-off-by: Henrik Rydberg <rydberg@euromail.se>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>

diff --git a/include/linux/hid.h b/include/linux/hid.h
index 42a0f1d11365..4cfe02c3fa4e 100644
--- a/include/linux/hid.h
+++ b/include/linux/hid.h
@@ -316,6 +316,7 @@ struct hid_item {
 #define HID_QUIRK_FULLSPEED_INTERVAL		0x10000000
 #define HID_QUIRK_NO_INIT_REPORTS		0x20000000
 #define HID_QUIRK_NO_IGNORE			0x40000000
+#define HID_QUIRK_NO_INPUT_SYNC			0x80000000
 
 /*
  * This is the global environment of the parser. This information is

commit 73e4008ddddc84d5f2499c17012b340a0dae153e
Author: Nikolai Kondrashov <spbnick@gmail.com>
Date:   Fri Aug 6 23:03:06 2010 +0400

    HID: allow resizing and replacing report descriptors
    
    Update hid_driver's report_fixup prototype to allow changing report
    descriptor size and/or returning completely different report descriptor.
    Update existing usage accordingly.
    
    This is to give more freedom in descriptor fixup and to allow having a whole
    fixed descriptor in the code for the sake of readability.
    
    Signed-off-by: Nikolai Kondrashov <spbnick@gmail.com>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>

diff --git a/include/linux/hid.h b/include/linux/hid.h
index 42a0f1d11365..0a34fb071379 100644
--- a/include/linux/hid.h
+++ b/include/linux/hid.h
@@ -626,8 +626,8 @@ struct hid_driver {
 	int (*event)(struct hid_device *hdev, struct hid_field *field,
 			struct hid_usage *usage, __s32 value);
 
-	void (*report_fixup)(struct hid_device *hdev, __u8 *buf,
-			unsigned int size);
+	__u8 *(*report_fixup)(struct hid_device *hdev, __u8 *buf,
+			unsigned int *size);
 
 	int (*input_mapping)(struct hid_device *hdev,
 			struct hid_input *hidinput, struct hid_field *field,

commit 3a343ee4509c982552b35fbc99d3213f3bb1acde
Author: Daniel Mack <daniel@caiaq.de>
Date:   Mon Jul 12 19:28:27 2010 +0200

    HID: add HID_QUIRK_HIDINPUT_FORCE
    
    For devices with exotic HID report descriptors, it might be necessary to
    make the HID core force the registration of an input device. Make that
    possible by introducing a new quirk type.
    
    Signed-off-by: Daniel Mack <daniel@caiaq.de>
    Cc: Jiri Kosina <jkosina@suse.cz>
    Cc: Dmitry Torokhov <dmitry.torokhov@gmail.com>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>

diff --git a/include/linux/hid.h b/include/linux/hid.h
index 895001f7f4b2..42a0f1d11365 100644
--- a/include/linux/hid.h
+++ b/include/linux/hid.h
@@ -311,6 +311,7 @@ struct hid_item {
 #define HID_QUIRK_HIDDEV_FORCE			0x00000010
 #define HID_QUIRK_BADPAD			0x00000020
 #define HID_QUIRK_MULTI_INPUT			0x00000040
+#define HID_QUIRK_HIDINPUT_FORCE		0x00000080
 #define HID_QUIRK_SKIP_OUTPUT_REPORTS		0x00010000
 #define HID_QUIRK_FULLSPEED_INTERVAL		0x10000000
 #define HID_QUIRK_NO_INIT_REPORTS		0x20000000

commit ef77ad5e67447b3744574c29b97da6677d6d3f18
Merge: 7426ef52b42e 23d021167eeb da54a0ced450 f77e347bd44e 6a740aa4f47b
Author: Jiri Kosina <jkosina@suse.cz>
Date:   Wed May 19 14:05:06 2010 +0200

    Merge branches 'upstream-fixes', 'bkl-removal', 'debugfs-fixes' and 'hid-suspend' into for-linus

commit 6a740aa4f47b9f29bad5292cf51f008f3edad9b1
Author: Bruno Prémont <bonbons@linux-vserver.org>
Date:   Sun Apr 25 21:40:03 2010 +0200

    HID: add suspend/resume hooks for hid drivers
    
    Add suspend/resume hooks for HID drivers so these can do some
    additional state adjustment when device gets suspended/resumed.
    
    Signed-off-by: Bruno Prémont <bonbons@linux-vserver.org>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>

diff --git a/include/linux/hid.h b/include/linux/hid.h
index b1344ec4b7fc..069e587ae8e6 100644
--- a/include/linux/hid.h
+++ b/include/linux/hid.h
@@ -589,6 +589,9 @@ struct hid_usage_id {
  * @report_fixup: called before report descriptor parsing (NULL means nop)
  * @input_mapping: invoked on input registering before mapping an usage
  * @input_mapped: invoked on input registering after mapping an usage
+ * @suspend: invoked on suspend (NULL means nop)
+ * @resume: invoked on resume if device was not reset (NULL means nop)
+ * @reset_resume: invoked on resume if device was reset (NULL means nop)
  *
  * raw_event and event should return 0 on no action performed, 1 when no
  * further processing should be done and negative on error
@@ -629,6 +632,11 @@ struct hid_driver {
 	int (*input_mapped)(struct hid_device *hdev,
 			struct hid_input *hidinput, struct hid_field *field,
 			struct hid_usage *usage, unsigned long **bit, int *max);
+#ifdef CONFIG_PM
+	int (*suspend)(struct hid_device *hdev, pm_message_t message);
+	int (*resume)(struct hid_device *hdev);
+	int (*reset_resume)(struct hid_device *hdev);
+#endif
 /* private: */
 	struct device_driver driver;
 };

commit b5e5a37e36cd4d355b875665312d7aaae4e5833c
Author: Bastien Nocera <hadess@hadess.net>
Date:   Fri Apr 16 17:19:50 2010 +0100

    HID: add HID_QUIRK_HIDDEV_FORCE and HID_QUIRK_NO_IGNORE
    
    Add two quirks to make it possible for usbhid module options to
    override whether a device is ignored (HID_QUIRK_NO_IGNORE) and
    whether to connect a hiddev device (HID_QUIRK_HIDDEV_FORCE).
    
    Passing HID_QUIRK_NO_IGNORE for your device means that it will
    not be ignored by the HID layer, even if present in a blacklist.
    
    HID_QUIRK_HIDDEV_FORCE will force the creation of a hiddev for that
    device, making it accessible from user-space.
    
    Tested with an Apple IR Receiver, switching it from using appleir
    to using lirc's macmini driver.
    
    Signed-off-by: Bastien Nocera <hadess@hadess.net>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>

diff --git a/include/linux/hid.h b/include/linux/hid.h
index b1344ec4b7fc..f1f2b6f0d1c4 100644
--- a/include/linux/hid.h
+++ b/include/linux/hid.h
@@ -308,11 +308,13 @@ struct hid_item {
 #define HID_QUIRK_NOTOUCH			0x00000002
 #define HID_QUIRK_IGNORE			0x00000004
 #define HID_QUIRK_NOGET				0x00000008
+#define HID_QUIRK_HIDDEV_FORCE			0x00000010
 #define HID_QUIRK_BADPAD			0x00000020
 #define HID_QUIRK_MULTI_INPUT			0x00000040
 #define HID_QUIRK_SKIP_OUTPUT_REPORTS		0x00010000
 #define HID_QUIRK_FULLSPEED_INTERVAL		0x10000000
 #define HID_QUIRK_NO_INIT_REPORTS		0x20000000
+#define HID_QUIRK_NO_IGNORE			0x40000000
 
 /*
  * This is the global environment of the parser. This information is

commit 14ef2b0c026558d37662e5e095d59c64597d5769
Merge: 57ab12e418ec 71b38bd4c1cc
Author: Jiri Kosina <jkosina@suse.cz>
Date:   Thu Feb 25 17:39:16 2010 +0100

    Merge branches 'upstream', 'raw_report_modifications' and 'apple_magic_mouse' into for-linus
    
    Conflicts:
            drivers/hid/Kconfig

commit 90a006abf8015c8cab893555244d8fc673b24839
Author: Michael Poole <mdpoole@troilus.org>
Date:   Sun Jan 24 22:32:29 2010 -0500

    HID: Export hid_register_report
    
    The Apple Magic Mouse (and probably other devices) publish reports that are not
    called out in their HID report descriptors -- they only send them when enabled
    through other writes to the device.  This allows a driver to handle these
    unlisted reports.
    
    Signed-off-by: Michael Poole <mdpoole@troilus.org>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>

diff --git a/include/linux/hid.h b/include/linux/hid.h
index 3661a626941d..456838c8884e 100644
--- a/include/linux/hid.h
+++ b/include/linux/hid.h
@@ -690,6 +690,7 @@ int hid_input_report(struct hid_device *, int type, u8 *, int, int);
 int hidinput_find_field(struct hid_device *hid, unsigned int type, unsigned int code, struct hid_field **field);
 void hid_output_report(struct hid_report *report, __u8 *data);
 struct hid_device *hid_allocate_device(void);
+struct hid_report *hid_register_report(struct hid_device *device, unsigned type, unsigned id);
 int hid_parse_report(struct hid_device *hid, __u8 *start, unsigned size);
 int hid_check_keys_pressed(struct hid_device *hid);
 int hid_connect(struct hid_device *hid, unsigned int connect_mask);

commit d4bfa033ed84e0ae446eff445d107ffd5ee78df3
Author: Jiri Kosina <jkosina@suse.cz>
Date:   Fri Jan 29 15:03:36 2010 +0100

    HID: make raw reports possible for both feature and output reports
    
    In commit 2da31939a42 ("Bluetooth: Implement raw output support for HIDP
    layer"), support for Bluetooth hid_output_raw_report was added, but it
    pushes the data to the intr socket instead of the ctrl one. This has been
    fixed by 6bf8268f9a91f1 ("Bluetooth: Use the control channel for raw HID reports")
    
    Still, it is necessary to distinguish whether the report in question should be
    either FEATURE or OUTPUT. For this, we have to extend the generic HID API,
    so that hid_output_raw_report() callback provides means to specify this
    value so that it can be passed down to lower level hardware drivers (currently
    Bluetooth and USB).
    
    Based on original patch by Bastien Nocera <hadess@hadess.net>
    Acked-by: Marcel Holtmann <marcel@holtmann.org>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>

diff --git a/include/linux/hid.h b/include/linux/hid.h
index 87093652dda8..3661a626941d 100644
--- a/include/linux/hid.h
+++ b/include/linux/hid.h
@@ -501,7 +501,7 @@ struct hid_device {							/* device report descriptor */
 	void (*hiddev_report_event) (struct hid_device *, struct hid_report *);
 
 	/* handler for raw output data, used by hidraw */
-	int (*hid_output_raw_report) (struct hid_device *, __u8 *, size_t);
+	int (*hid_output_raw_report) (struct hid_device *, __u8 *, size_t, unsigned char);
 
 	/* debugging support via debugfs */
 	unsigned short debug;

commit 8b0e58a70a7a41443c779de074288035b014cb94
Author: Stephane Chatty <chatty@lii-enac.fr>
Date:   Wed Jan 13 21:52:34 2010 +0100

    HID: let hid-input accept digitizers
    
    Extended IS_INPUT_APPLICATION to accept digitzers that are actual input
    devices (touchscreens, light pens, touch pads, white boards)
    
    Signed-off-by: Stephane Chatty <chatty@enac.fr>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>

diff --git a/include/linux/hid.h b/include/linux/hid.h
index 87093652dda8..b978c1e2e74d 100644
--- a/include/linux/hid.h
+++ b/include/linux/hid.h
@@ -663,7 +663,7 @@ struct hid_ll_driver {
 
 /* Applications from HID Usage Tables 4/8/99 Version 1.1 */
 /* We ignore a few input applications that are not widely used */
-#define IS_INPUT_APPLICATION(a) (((a >= 0x00010000) && (a <= 0x00010008)) || (a == 0x00010080) || (a == 0x000c0001) || (a == 0x000d0002))
+#define IS_INPUT_APPLICATION(a) (((a >= 0x00010000) && (a <= 0x00010008)) || (a == 0x00010080) || (a == 0x000c0001) || ((a >= 0x000d0002) && (a <= 0x000d0006)))
 
 /* HID core API */
 

commit 5b915d9e6dc3d22fedde91dfef1cb1a8fa9a1870
Author: Jiri Kosina <jkosina@suse.cz>
Date:   Thu Nov 5 14:08:03 2009 +0100

    HID: fixup quirk for NCR devices
    
    NCR devices are terminally broken by design -- they claim themselves to contain
    proper input applications in their HID report descriptor, but behave very badly
    if treated in standard way.
    
    According to NCR developers, the devices get confused when queried for reports
    in a standard way, rendering them unusable.
    
    NCR is shipping application called "RPSL" that can be used to drive these
    devices through hiddev, under the assumption that in-kernel driver doesn't
    perform initial report query.
    If it does, neither in-kernel nor hiddev-based driver can operate with these
    devices any more.
    
    Introduce a quirk that skips the report query for all NCR devices. The previous
    NOGET quirk was wrong and had been introduced because I misunderstood the nature
    of brokenness of these devices.
    
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>

diff --git a/include/linux/hid.h b/include/linux/hid.h
index 10f628416740..87093652dda8 100644
--- a/include/linux/hid.h
+++ b/include/linux/hid.h
@@ -312,6 +312,7 @@ struct hid_item {
 #define HID_QUIRK_MULTI_INPUT			0x00000040
 #define HID_QUIRK_SKIP_OUTPUT_REPORTS		0x00010000
 #define HID_QUIRK_FULLSPEED_INTERVAL		0x10000000
+#define HID_QUIRK_NO_INIT_REPORTS		0x20000000
 
 /*
  * This is the global environment of the parser. This information is

commit c4c259bcc27c4242b012106afdba183622b1735f
Author: Jiri Kosina <jkosina@suse.cz>
Date:   Tue Sep 15 16:27:45 2009 +0200

    HID: consolidate connect and disconnect into core code
    
    HID core registers input, hidraw and hiddev devices, but leaves
    unregistering it up to the individual driver, which is not really nice.
    Let's move all the logic to the core.
    
    Reported-by: Marcel Holtmann <marcel@holtmann.org>
    Reported-by: Brian Rogers <brian@xyzw.org>
    Acked-by: Marcel Holtmann <marcel@holtmann.org>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>

diff --git a/include/linux/hid.h b/include/linux/hid.h
index a0ebdace7baa..10f628416740 100644
--- a/include/linux/hid.h
+++ b/include/linux/hid.h
@@ -494,6 +494,7 @@ struct hid_device {							/* device report descriptor */
 
 	/* hiddev event handler */
 	int (*hiddev_connect)(struct hid_device *, unsigned int);
+	void (*hiddev_disconnect)(struct hid_device *);
 	void (*hiddev_hid_event) (struct hid_device *, struct hid_field *field,
 				  struct hid_usage *, __s32);
 	void (*hiddev_report_event) (struct hid_device *, struct hid_report *);
@@ -691,6 +692,7 @@ struct hid_device *hid_allocate_device(void);
 int hid_parse_report(struct hid_device *hid, __u8 *start, unsigned size);
 int hid_check_keys_pressed(struct hid_device *hid);
 int hid_connect(struct hid_device *hid, unsigned int connect_mask);
+void hid_disconnect(struct hid_device *hid);
 
 /**
  * hid_map_usage - map usage input bits
@@ -800,6 +802,7 @@ static inline int __must_check hid_hw_start(struct hid_device *hdev,
  */
 static inline void hid_hw_stop(struct hid_device *hdev)
 {
+	hid_disconnect(hdev);
 	hdev->ll_driver->stop(hdev);
 }
 

commit 8123e8f7c89a07cb22279b15bf47cdee0205d4a1
Merge: affbb8c6e690 42960a13001a a809dda0369a
Author: Jiri Kosina <jkosina@suse.cz>
Date:   Sun Sep 13 20:09:41 2009 +0200

    Merge branches 'upstream', 'upstream-fixes' and 'debugfs' into for-linus

commit cd667ce24796700e1a0e6e7528efc61c96ff832e
Author: Jiri Kosina <jkosina@suse.cz>
Date:   Fri Jun 12 15:20:57 2009 +0200

    HID: use debugfs for events/reports dumping
    
    This is a followup patch to the one implemeting rdesc representation in debugfs
    rather than being dependent on compile-time CONFIG_HID_DEBUG setting.
    
    The API of the appropriate formatting functions is slightly modified -- if
    they are passed seq_file pointer, the one-shot output for 'rdesc' file mode
    is used, and therefore the message is formatted into the corresponding seq_file
    immediately.
    
    Otherwise the called function allocated a new buffer, formats the text into the
    buffer and returns the pointer to it, so that it can be queued into the ring-buffer
    of the processess blocked waiting on input on 'events' file in debugfs.
    
    'debug' parameter to the 'hid' module is now used solely for the prupose of inetrnal
    driver state debugging (parser, transport, etc).
    
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>

diff --git a/include/linux/hid.h b/include/linux/hid.h
index da09ab140ef1..60fa52913f89 100644
--- a/include/linux/hid.h
+++ b/include/linux/hid.h
@@ -451,10 +451,6 @@ struct hid_device {							/* device report descriptor */
 	char phys[64];							/* Device physical location */
 	char uniq[64];							/* Device unique identifier (serial #) */
 
-	/* debugfs */
-	struct dentry *debug_dir;
-	struct dentry *debug_rdesc;
-
 	void *driver_data;
 
 	/* temporary hid_ff handling (until moved to the drivers) */
@@ -468,6 +464,14 @@ struct hid_device {							/* device report descriptor */
 
 	/* handler for raw output data, used by hidraw */
 	int (*hid_output_raw_report) (struct hid_device *, __u8 *, size_t);
+
+	/* debugging support via debugfs */
+	unsigned short debug;
+	struct dentry *debug_dir;
+	struct dentry *debug_rdesc;
+	struct dentry *debug_events;
+	struct list_head debug_list;
+	wait_queue_head_t debug_wait;
 };
 
 static inline void *hid_get_drvdata(struct hid_device *hdev)
@@ -625,9 +629,7 @@ struct hid_ll_driver {
 
 /* HID core API */
 
-#ifdef CONFIG_HID_DEBUG
 extern int hid_debug;
-#endif
 
 extern int hid_add_device(struct hid_device *);
 extern void hid_destroy_device(struct hid_device *);
@@ -783,21 +785,9 @@ int hid_pidff_init(struct hid_device *hid);
 #define hid_pidff_init NULL
 #endif
 
-#ifdef CONFIG_HID_DEBUG
 #define dbg_hid(format, arg...) if (hid_debug) \
 				printk(KERN_DEBUG "%s: " format ,\
 				__FILE__ , ## arg)
-#define dbg_hid_line(format, arg...) if (hid_debug) \
-				printk(format, ## arg)
-#else
-static inline int __attribute__((format(printf, 1, 2)))
-dbg_hid(const char *fmt, ...)
-{
-	return 0;
-}
-#define dbg_hid_line dbg_hid
-#endif /* HID_DEBUG */
-
 #define err_hid(format, arg...) printk(KERN_ERR "%s: " format "\n" , \
 		__FILE__ , ## arg)
 #endif /* HID_FF */

commit a635f9dd83f3382577f4544a96df12356e951a40
Author: Jiri Kosina <jkosina@suse.cz>
Date:   Fri Jun 12 15:20:55 2009 +0200

    HID: use debugfs for report dumping descriptor
    
    It is a little bit inconvenient for people who have some non-standard
    HID hardware (usually violating the HID specification) to have to
    recompile kernel with CONFIG_HID_DEBUG to be able to see kernel's perspective
    of the HID report descriptor and observe the parsed events. Plus the messages
    are then mixed up inconveniently with the rest of the dmesg stuff.
    
    This patch implements /sys/kernel/debug/hid/<device>/rdesc file, which
    represents the kernel's view of report descriptor (both the raw report
    descriptor data and parsed contents).
    
    With all the device-specific debug data being available through debugfs, there
    is no need for keeping CONFIG_HID_DEBUG, as the 'debug' parameter to the
    hid module will now only output only driver-specific debugging options, which has
    absolutely minimal memory footprint, just a few error messages and one global
    flag (hid_debug).
    
    We use the current set of output formatting functions. The ones that need to be
    used both for one-shot rdesc seq_file and also for continuous flow of data
    (individual reports, as being sent by the device) distinguish according to the
    passed seq_file parameter, and if it is NULL, it still output to kernel ringbuffer,
    otherwise the corresponding seq_file is used for output.
    
    The format of the output is preserved.
    
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>

diff --git a/include/linux/hid.h b/include/linux/hid.h
index a72876e43589..da09ab140ef1 100644
--- a/include/linux/hid.h
+++ b/include/linux/hid.h
@@ -451,6 +451,10 @@ struct hid_device {							/* device report descriptor */
 	char phys[64];							/* Device physical location */
 	char uniq[64];							/* Device unique identifier (serial #) */
 
+	/* debugfs */
+	struct dentry *debug_dir;
+	struct dentry *debug_rdesc;
+
 	void *driver_data;
 
 	/* temporary hid_ff handling (until moved to the drivers) */

commit 89f536ccfa8b370ff4d054f4061858ca9322c25a
Author: Stephane Chatty <chatty@enac.fr>
Date:   Wed May 20 15:41:24 2009 +0200

    HID: add new multitouch and digitizer contants
    
    Added constants to hid.h for all digitizer usages (including the new multitouch
    ones that are not yet in the official USB spec but are being pushed by Microsft
    as described in their paper "Digitizer Drivers for Windows Touch and Pen-Based
    Computers"). Updated hid-debug.c to support the new MT input constants such as
    ABS_MT_POSITION_X.
    
    Signed-off-by: Stephane Chatty <chatty@enac.fr>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>

diff --git a/include/linux/hid.h b/include/linux/hid.h
index a72876e43589..53489fd4d700 100644
--- a/include/linux/hid.h
+++ b/include/linux/hid.h
@@ -238,6 +238,42 @@ struct hid_item {
 #define HID_GD_RIGHT		0x00010092
 #define HID_GD_LEFT		0x00010093
 
+#define HID_DG_DIGITIZER	0x000d0001
+#define HID_DG_PEN		0x000d0002
+#define HID_DG_LIGHTPEN		0x000d0003
+#define HID_DG_TOUCHSCREEN	0x000d0004
+#define HID_DG_TOUCHPAD		0x000d0005
+#define HID_DG_STYLUS		0x000d0020
+#define HID_DG_PUCK		0x000d0021
+#define HID_DG_FINGER		0x000d0022
+#define HID_DG_TIPPRESSURE	0x000d0030
+#define HID_DG_BARRELPRESSURE	0x000d0031
+#define HID_DG_INRANGE		0x000d0032
+#define HID_DG_TOUCH		0x000d0033
+#define HID_DG_UNTOUCH		0x000d0034
+#define HID_DG_TAP		0x000d0035
+#define HID_DG_TABLETFUNCTIONKEY	0x000d0039
+#define HID_DG_PROGRAMCHANGEKEY	0x000d003a
+#define HID_DG_INVERT		0x000d003c
+#define HID_DG_TIPSWITCH	0x000d0042
+#define HID_DG_TIPSWITCH2	0x000d0043
+#define HID_DG_BARRELSWITCH	0x000d0044
+#define HID_DG_ERASER		0x000d0045
+#define HID_DG_TABLETPICK	0x000d0046
+/*
+ * as of May 20, 2009 the usages below are not yet in the official USB spec
+ * but are being pushed by Microsft as described in their paper "Digitizer
+ * Drivers for Windows Touch and Pen-Based Computers"
+ */
+#define HID_DG_CONFIDENCE	0x000d0047
+#define HID_DG_WIDTH		0x000d0048
+#define HID_DG_HEIGHT		0x000d0049
+#define HID_DG_CONTACTID	0x000d0051
+#define HID_DG_INPUTMODE	0x000d0052
+#define HID_DG_DEVICEINDEX	0x000d0053
+#define HID_DG_CONTACTCOUNT	0x000d0054
+#define HID_DG_CONTACTMAX	0x000d0055
+
 /*
  * HID report types --- Ouch! HID spec says 1 2 3!
  */

commit 621de593081524da2f0f7b060f5951b4155eb4a2
Merge: afa5eb7c6868 6d77976800c3
Author: Jiri Kosina <jkosina@suse.cz>
Date:   Mon Mar 30 15:14:53 2009 +0200

    Merge branch 'autosuspend' into for-next
    
    Conflicts:
    
            drivers/hid/hid-core.c

commit afa5eb7c68689ced4284f01c96feed44a2d0a127
Author: Jiri Slaby <jirislaby@gmail.com>
Date:   Wed Mar 18 09:13:37 2009 +0100

    HID: remove compat stuff
    
    This removal was scheduled and there is no problem with later
    distros to adapt for the new bus, thanks to aliases.
    
    module-init-tools map files are deprecated nowadays, so that
    the patch which introduced hid ones into the m-i-t won't be
    accepted and hence there is no reason for leaving compat stuff in.
    
    Signed-off-by: Jiri Slaby <jirislaby@gmail.com>
    Cc: Jiri Kosina <jkosina@suse.cz>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>

diff --git a/include/linux/hid.h b/include/linux/hid.h
index a46cda488695..a46cbea71d65 100644
--- a/include/linux/hid.h
+++ b/include/linux/hid.h
@@ -792,21 +792,5 @@ dbg_hid(const char *fmt, ...)
 		__FILE__ , ## arg)
 #endif /* HID_FF */
 
-#ifdef __KERNEL__
-#ifdef CONFIG_HID_COMPAT
-#define HID_COMPAT_LOAD_DRIVER(name)	\
-/* prototype to avoid sparse warning */	\
-extern void hid_compat_##name(void);	\
-void hid_compat_##name(void) { }	\
-EXPORT_SYMBOL(hid_compat_##name)
-#else
-#define HID_COMPAT_LOAD_DRIVER(name)
-#endif /* HID_COMPAT */
-#define HID_COMPAT_CALL_DRIVER(name)	do {	\
-	extern void hid_compat_##name(void);	\
-	hid_compat_##name();			\
-} while (0)
-#endif /* __KERNEL__ */
-
 #endif
 

commit 6f4303fb2ec68055e793b84887a7ae0f9ea7cc2d
Author: Jiri Kosina <jkosina@suse.cz>
Date:   Thu Jan 29 00:15:51 2009 +0100

    HID: bring back possibility to specify vid/pid ignore on module load
    
    When hid quirks were converted to specialized driver, the HID_QUIRK_IGNORE
    has been moved completely, as the hid_ignore_list[] has been moved into the
    generic code.
    
    However userspace already got used to the possibility that modprobing
    usbhid with
    
            'quirks=vid:pid:0x4'
    
    makes the device ignored by usbhid driver. So keep this quirk flag in place
    for backwards compatibility.
    
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>

diff --git a/include/linux/hid.h b/include/linux/hid.h
index fa8ee9cef7be..a46cda488695 100644
--- a/include/linux/hid.h
+++ b/include/linux/hid.h
@@ -270,6 +270,7 @@ struct hid_item {
 
 #define HID_QUIRK_INVERT			0x00000001
 #define HID_QUIRK_NOTOUCH			0x00000002
+#define HID_QUIRK_IGNORE			0x00000004
 #define HID_QUIRK_NOGET				0x00000008
 #define HID_QUIRK_BADPAD			0x00000020
 #define HID_QUIRK_MULTI_INPUT			0x00000040

commit 0361a28d3f9a4315a100c7b37ba0b55cfe15fe07
Author: Oliver Neukum <oliver@neukum.org>
Date:   Wed Dec 17 15:38:03 2008 +0100

    HID: autosuspend support for USB HID
    
    This uses the USB busy mechanism for aggessive autosuspend of USB
    HID devices. It autosuspends all opened devices supporting remote wakeup
    after a timeout unless
    
    - output is being done to the device
    - a key is being held down (remote wakeup isn't triggered upon key release)
    - LED(s) are lit
    - hiddev is opened
    
    As in the current driver closed devices will be autosuspended even if they
    don't support remote wakeup.
    
    The patch is quite large because output to devices is done in hard interrupt
    context meaning a lot a queuing and locking had to be touched. The LED stuff
    has been solved by means of a simple counter. Additions to the generic HID code
    could be avoided. In addition it now covers hidraw. It contains an embryonic
    version of an API to let the generic HID code tell the lower levels which
    capabilities with respect to power management are needed.
    
    Signed-off-by: Oliver Neukum <oneukum@suse.de>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>

diff --git a/include/linux/hid.h b/include/linux/hid.h
index fa8ee9cef7be..6ac7795a8acc 100644
--- a/include/linux/hid.h
+++ b/include/linux/hid.h
@@ -603,12 +603,17 @@ struct hid_ll_driver {
 	int (*open)(struct hid_device *hdev);
 	void (*close)(struct hid_device *hdev);
 
+	int (*power)(struct hid_device *hdev, int level);
+
 	int (*hidinput_input_event) (struct input_dev *idev, unsigned int type,
 			unsigned int code, int value);
 
 	int (*parse)(struct hid_device *hdev);
 };
 
+#define	PM_HINT_FULLON	1<<5
+#define PM_HINT_NORMAL	1<<1
+
 /* Applications from HID Usage Tables 4/8/99 Version 1.1 */
 /* We ignore a few input applications that are not widely used */
 #define IS_INPUT_APPLICATION(a) (((a >= 0x00010000) && (a <= 0x00010008)) || (a == 0x00010080) || (a == 0x000c0001) || (a == 0x000d0002))
@@ -641,6 +646,7 @@ int hidinput_find_field(struct hid_device *hid, unsigned int type, unsigned int
 void hid_output_report(struct hid_report *report, __u8 *data);
 struct hid_device *hid_allocate_device(void);
 int hid_parse_report(struct hid_device *hid, __u8 *start, unsigned size);
+int hid_check_keys_pressed(struct hid_device *hid);
 int hid_connect(struct hid_device *hid, unsigned int connect_mask);
 
 /**

commit b08ead0527bcfdcab39a347b531701289485b484
Author: Jaswinder Singh Rajput <jaswinderrajput@gmail.com>
Date:   Fri Jan 30 21:15:34 2009 +0530

    headers_check fix: linux/hid.h
    
    fix the following 'make headers_check' warnings:
    
      usr/include/linux/hid.h:69: extern's make no sense in userspace
      usr/include/linux/hid.h:76: extern's make no sense in userspace
    
    Signed-off-by: Jaswinder Singh Rajput <jaswinderrajput@gmail.com>

diff --git a/include/linux/hid.h b/include/linux/hid.h
index 81aa84d60c6b..fa8ee9cef7be 100644
--- a/include/linux/hid.h
+++ b/include/linux/hid.h
@@ -791,6 +791,7 @@ dbg_hid(const char *fmt, ...)
 		__FILE__ , ## arg)
 #endif /* HID_FF */
 
+#ifdef __KERNEL__
 #ifdef CONFIG_HID_COMPAT
 #define HID_COMPAT_LOAD_DRIVER(name)	\
 /* prototype to avoid sparse warning */	\
@@ -804,6 +805,7 @@ EXPORT_SYMBOL(hid_compat_##name)
 	extern void hid_compat_##name(void);	\
 	hid_compat_##name();			\
 } while (0)
+#endif /* __KERNEL__ */
 
 #endif
 

commit 725cf0f47dbb02e0482f081828cff73f55479b79
Author: Hannes Eder <hannes@hanneseder.net>
Date:   Tue Dec 16 14:20:23 2008 +0100

    HID: avoid sparse warning in HID_COMPAT_LOAD_DRIVER
    
    Impact: include a prototype for the exported function in the macro
    
    Fix about 20 of this warnings:
    
      drivers/hid/hid-a4tech.c:162:1: warning: symbol 'hid_compat_a4tech' was not declared. Should it be static?
    
    Signed-off-by: Hannes Eder <hannes@hanneseder.net>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>

diff --git a/include/linux/hid.h b/include/linux/hid.h
index 215035bbb288..81aa84d60c6b 100644
--- a/include/linux/hid.h
+++ b/include/linux/hid.h
@@ -793,6 +793,8 @@ dbg_hid(const char *fmt, ...)
 
 #ifdef CONFIG_HID_COMPAT
 #define HID_COMPAT_LOAD_DRIVER(name)	\
+/* prototype to avoid sparse warning */	\
+extern void hid_compat_##name(void);	\
 void hid_compat_##name(void) { }	\
 EXPORT_SYMBOL(hid_compat_##name)
 #else

commit 3a6f82f7a22cf19687f556997c6978b31c109360
Author: Jiri Slaby <jirislaby@gmail.com>
Date:   Mon Nov 24 16:20:09 2008 +0100

    HID: add dynids facility
    
    Allow adding new devices to the hid drivers on the fly without
    a need of kernel recompilation.
    
    Now, one can test a driver e.g. by:
    echo 0003:045E:00F0.0003 > ../generic-usb/unbind
    echo 0003 045E 00F0 > new_id
    from some driver subdir.
    
    Signed-off-by: Jiri Slaby <jirislaby@gmail.com>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>

diff --git a/include/linux/hid.h b/include/linux/hid.h
index 2c20f20283b2..215035bbb288 100644
--- a/include/linux/hid.h
+++ b/include/linux/hid.h
@@ -531,6 +531,8 @@ struct hid_usage_id {
  * @name: driver name (e.g. "Footech_bar-wheel")
  * @id_table: which devices is this driver for (must be non-NULL for probe
  * 	      to be called)
+ * @dyn_list: list of dynamically added device ids
+ * @dyn_lock: lock protecting @dyn_list
  * @probe: new device inserted
  * @remove: device removed (NULL if not a hot-plug capable driver)
  * @report_table: on which reports to call raw_event (NULL means all)
@@ -558,6 +560,9 @@ struct hid_driver {
 	char *name;
 	const struct hid_device_id *id_table;
 
+	struct list_head dyn_list;
+	spinlock_t dyn_lock;
+
 	int (*probe)(struct hid_device *dev, const struct hid_device_id *id);
 	void (*remove)(struct hid_device *dev);
 

commit 0ed94b334265b6ee3e3336b4fedacfa9cb2ccaba
Author: Jiri Slaby <jirislaby@gmail.com>
Date:   Mon Nov 24 16:20:07 2008 +0100

    HID: move usbhid flags to usbhid.h
    
    Move usbhid specific flags from global hid.h into local usbhid.h.
    
    Signed-off-by: Jiri Slaby <jirislaby@gmail.com>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>

diff --git a/include/linux/hid.h b/include/linux/hid.h
index e5780f8c934a..2c20f20283b2 100644
--- a/include/linux/hid.h
+++ b/include/linux/hid.h
@@ -403,15 +403,6 @@ struct hid_output_fifo {
 #define HID_STAT_ADDED		1
 #define HID_STAT_PARSED		2
 
-#define HID_CTRL_RUNNING	1
-#define HID_OUT_RUNNING		2
-#define HID_IN_RUNNING		3
-#define HID_RESET_PENDING	4
-#define HID_SUSPENDED		5
-#define HID_CLEAR_HALT		6
-#define HID_DISCONNECTED	7
-#define HID_STARTED		8
-
 struct hid_input {
 	struct list_head list;
 	struct hid_report *report;

commit 3d5afd324a4bf9f64f59599bf1e93cd7dd1dc97a
Author: Jiri Slaby <jirislaby@gmail.com>
Date:   Mon Oct 27 12:16:15 2008 +0100

    HID: fix oops during suspend of unbound HID devices
    
    Usbhid structure is allocated on start invoked only from probe
    of some driver. When there is no driver, the structure is null
    and causes null-dereference oopses.
    
    Fix it by allocating the structure on probe and disconnect of
    the device itself. Also make sure we won't race between start
    and resume or stop and suspend respectively.
    
    References: http://bugzilla.kernel.org/show_bug.cgi?id=11827
    
    Signed-off-by: Jiri Slaby <jirislaby@gmail.com>
    Cc: Johannes Berg <johannes@sipsolutions.net>
    Cc: Andreas Schwab <schwab@suse.de>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>

diff --git a/include/linux/hid.h b/include/linux/hid.h
index 5355ca4b939e..e5780f8c934a 100644
--- a/include/linux/hid.h
+++ b/include/linux/hid.h
@@ -410,6 +410,7 @@ struct hid_output_fifo {
 #define HID_SUSPENDED		5
 #define HID_CLEAR_HALT		6
 #define HID_DISCONNECTED	7
+#define HID_STARTED		8
 
 struct hid_input {
 	struct list_head list;

commit a73a63701f8f23e70674b3c5e367a0a726c18468
Author: Jiri Slaby <jirislaby@gmail.com>
Date:   Wed Oct 22 14:45:11 2008 +0200

    HID: add hid_type to general hid struct
    
    Add type to the hid structure to distinguish to which device type
    (now only mouse) we are talking to. Needed for per device type ignore
    list support.
    
    Note: this patch leaves the type as unknown for bluetooth devices,
    there is not support for this in the hidp code.
    
    Signed-off-by: Jiri Slaby <jirislaby@gmail.com>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>

diff --git a/include/linux/hid.h b/include/linux/hid.h
index f13bca2dd53b..5355ca4b939e 100644
--- a/include/linux/hid.h
+++ b/include/linux/hid.h
@@ -417,6 +417,11 @@ struct hid_input {
 	struct input_dev *input;
 };
 
+enum hid_type {
+	HID_TYPE_OTHER = 0,
+	HID_TYPE_USBMOUSE
+};
+
 struct hid_driver;
 struct hid_ll_driver;
 
@@ -431,6 +436,7 @@ struct hid_device {							/* device report descriptor */
 	__u32 vendor;							/* Vendor ID */
 	__u32 product;							/* Product ID */
 	__u32 version;							/* HID version */
+	enum hid_type type;						/* device type (mouse, kbd, ...) */
 	unsigned country;						/* HID country */
 	struct hid_report_enum report_enum[HID_REPORT_TYPES];
 

commit f129ea6d1efe0eddcbb1f0faaec5623788ad9e58
Author: Anssi Hannula <anssi.hannula@gmail.com>
Date:   Sat Oct 4 14:44:06 2008 +0200

    HID: fix a lockup regression when using force feedback on a PID device
    
    Commit 8006479c9b75fb6594a7b746af3d7f1fbb68f18f introduced a spinlock in
    input_dev->event_lock, which is locked when handling input events.
    However, the hid-pidff driver sleeps when handling events as it waits for
    reports being sent to the device before changing the report contents
    again.
    This causes a system lockup when trying to use force feedback with a PID
    device, a regression introduced in 2.6.24 and 2.6.23.15.
    
    Fix it by extracting the raw report data from struct hid_report
    immediately when hid_submit_report() is called, therefore allowing
    drivers to change the contents of struct hid_report immediately without
    affecting the already-queued transfer.
    
    In hid-pidff, re-add the removed usbhid_wait_io() to
    pidff_erase_effect() instead, to prevent a full report queue from causing
    the submission to fail, thus not freeing up device memory.
    pidff_erase_effect() is not called while dev->event_lock is held.
    
    Signed-off-by: Anssi Hannula <anssi.hannula@gmail.com>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>

diff --git a/include/linux/hid.h b/include/linux/hid.h
index dcdef0bb4bba..f13bca2dd53b 100644
--- a/include/linux/hid.h
+++ b/include/linux/hid.h
@@ -388,6 +388,12 @@ struct hid_report_enum {
 struct hid_control_fifo {
 	unsigned char dir;
 	struct hid_report *report;
+	char *raw_report;
+};
+
+struct hid_output_fifo {
+	struct hid_report *report;
+	char *raw_report;
 };
 
 #define HID_CLAIMED_INPUT	1

commit 76483cf4d0efbc35eaf9905a437f2f1be0221360
Author: Jiri Slaby <jirislaby@gmail.com>
Date:   Thu Sep 18 12:23:33 2008 +0200

    HID: remove hid-ff
    
    hid-ff.c now calls only pidff (generic driver), the special ones are now
    in separate drivers. Invoke pidff on all non-special directly.
    
    Signed-off-by: Jiri Slaby <jirislaby@gmail.com>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>

diff --git a/include/linux/hid.h b/include/linux/hid.h
index 0773ba6a66f2..dcdef0bb4bba 100644
--- a/include/linux/hid.h
+++ b/include/linux/hid.h
@@ -757,17 +757,10 @@ int usbhid_quirks_init(char **quirks_param);
 void usbhid_quirks_exit(void);
 void usbhid_set_leds(struct hid_device *hid);
 
-#ifdef CONFIG_HID_FF
-int hid_ff_init(struct hid_device *hid);
-
 #ifdef CONFIG_HID_PID
 int hid_pidff_init(struct hid_device *hid);
 #else
-static inline int hid_pidff_init(struct hid_device *hid) { return -ENODEV; }
-#endif
-
-#else
-#define hid_ff_init	NULL
+#define hid_pidff_init NULL
 #endif
 
 #ifdef CONFIG_HID_DEBUG

commit 987fbc1f7d446f4bf7063d3b756ae29db80be75e
Author: Jiri Slaby <jirislaby@gmail.com>
Date:   Thu Sep 18 12:23:32 2008 +0200

    HID: move zeroplus FF processing
    
    Signed-off-by: Jiri Slaby <jirislaby@gmail.com>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>

diff --git a/include/linux/hid.h b/include/linux/hid.h
index 8266e50637b4..0773ba6a66f2 100644
--- a/include/linux/hid.h
+++ b/include/linux/hid.h
@@ -760,7 +760,6 @@ void usbhid_set_leds(struct hid_device *hid);
 #ifdef CONFIG_HID_FF
 int hid_ff_init(struct hid_device *hid);
 
-int hid_zpff_init(struct hid_device *hid);
 #ifdef CONFIG_HID_PID
 int hid_pidff_init(struct hid_device *hid);
 #else

commit 10e41a711e55f485709b4ca157e587cf36ef5a69
Author: Jiri Slaby <jirislaby@gmail.com>
Date:   Thu Sep 18 12:23:31 2008 +0200

    HID: move thrustmaster FF processing
    
    Signed-off-by: Jiri Slaby <jirislaby@gmail.com>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>

diff --git a/include/linux/hid.h b/include/linux/hid.h
index 63b808067203..8266e50637b4 100644
--- a/include/linux/hid.h
+++ b/include/linux/hid.h
@@ -760,7 +760,6 @@ void usbhid_set_leds(struct hid_device *hid);
 #ifdef CONFIG_HID_FF
 int hid_ff_init(struct hid_device *hid);
 
-int hid_tmff_init(struct hid_device *hid);
 int hid_zpff_init(struct hid_device *hid);
 #ifdef CONFIG_HID_PID
 int hid_pidff_init(struct hid_device *hid);

commit 5f022298aab58ddff9bccdb28b82a59109789da9
Author: Jiri Slaby <jirislaby@gmail.com>
Date:   Thu Sep 18 19:43:32 2008 +0200

    HID: move pantherlord FF processing
    
    Move the force feedback processing into a separate module.
    
    [jkosina@suse.cz: fix Kconfig texts a little bit]
    
    Signed-off-by: Jiri Slaby <jirislaby@gmail.com>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>

diff --git a/include/linux/hid.h b/include/linux/hid.h
index 15ee33e0463e..63b808067203 100644
--- a/include/linux/hid.h
+++ b/include/linux/hid.h
@@ -760,7 +760,6 @@ void usbhid_set_leds(struct hid_device *hid);
 #ifdef CONFIG_HID_FF
 int hid_ff_init(struct hid_device *hid);
 
-int hid_plff_init(struct hid_device *hid);
 int hid_tmff_init(struct hid_device *hid);
 int hid_zpff_init(struct hid_device *hid);
 #ifdef CONFIG_HID_PID

commit 606bd0a8616a0e59021cb2997e942513f24f641d
Author: Jiri Slaby <jirislaby@gmail.com>
Date:   Fri Jul 4 23:06:45 2008 +0200

    HID: move logitech FF processing
    
    Merge the logitech force feedback processing directly into logitech
    driver from the usbhid core.
    
    Signed-off-by: Jiri Slaby <jirislaby@gmail.com>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>

diff --git a/include/linux/hid.h b/include/linux/hid.h
index b0f03fa2ed19..15ee33e0463e 100644
--- a/include/linux/hid.h
+++ b/include/linux/hid.h
@@ -760,8 +760,6 @@ void usbhid_set_leds(struct hid_device *hid);
 #ifdef CONFIG_HID_FF
 int hid_ff_init(struct hid_device *hid);
 
-int hid_lgff_init(struct hid_device *hid);
-int hid_lg2ff_init(struct hid_device *hid);
 int hid_plff_init(struct hid_device *hid);
 int hid_tmff_init(struct hid_device *hid);
 int hid_zpff_init(struct hid_device *hid);

commit 6edfa8dc33803a49ad936ead9840e453bee6ca3b
Author: Jiri Slaby <jirislaby@gmail.com>
Date:   Fri Jun 27 20:41:02 2008 +0200

    HID: move reset leds quirk
    
    Move the handling of the leds resetting from the core to
    the dell and logitech drivers.
    
    Signed-off-by: Jiri Slaby <jirislaby@gmail.com>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>

diff --git a/include/linux/hid.h b/include/linux/hid.h
index 043209f7bfcf..b0f03fa2ed19 100644
--- a/include/linux/hid.h
+++ b/include/linux/hid.h
@@ -274,7 +274,6 @@ struct hid_item {
 #define HID_QUIRK_BADPAD			0x00000020
 #define HID_QUIRK_MULTI_INPUT			0x00000040
 #define HID_QUIRK_SKIP_OUTPUT_REPORTS		0x00010000
-#define HID_QUIRK_RESET_LEDS			0x00100000
 #define HID_QUIRK_FULLSPEED_INTERVAL		0x10000000
 
 /*
@@ -756,6 +755,7 @@ extern void hid_generic_exit(void);
 u32 usbhid_lookup_quirk(const u16 idVendor, const u16 idProduct);
 int usbhid_quirks_init(char **quirks_param);
 void usbhid_quirks_exit(void);
+void usbhid_set_leds(struct hid_device *hid);
 
 #ifdef CONFIG_HID_FF
 int hid_ff_init(struct hid_device *hid);

commit 93c10132a7ac160df3175b53f7ee857625412165
Author: Jiri Slaby <jirislaby@gmail.com>
Date:   Fri Jun 27 00:04:24 2008 +0200

    HID: move connect quirks
    
    Move connecting from usbhid to the hid layer and fix also hidp in
    that manner.
    This removes all the ignore/force hidinput/hiddev connecting quirks.
    
    Signed-off-by: Jiri Slaby <jirislaby@gmail.com>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>

diff --git a/include/linux/hid.h b/include/linux/hid.h
index 43aa51a7fa95..043209f7bfcf 100644
--- a/include/linux/hid.h
+++ b/include/linux/hid.h
@@ -246,6 +246,19 @@ struct hid_item {
 #define HID_OUTPUT_REPORT	1
 #define HID_FEATURE_REPORT	2
 
+/*
+ * HID connect requests
+ */
+
+#define HID_CONNECT_HIDINPUT		0x01
+#define HID_CONNECT_HIDINPUT_FORCE	0x02
+#define HID_CONNECT_HIDRAW		0x04
+#define HID_CONNECT_HIDDEV		0x08
+#define HID_CONNECT_HIDDEV_FORCE	0x10
+#define HID_CONNECT_FF			0x20
+#define HID_CONNECT_DEFAULT	(HID_CONNECT_HIDINPUT|HID_CONNECT_HIDRAW| \
+		HID_CONNECT_HIDDEV|HID_CONNECT_FF)
+
 /*
  * HID device quirks.
  */
@@ -258,13 +271,10 @@ struct hid_item {
 #define HID_QUIRK_INVERT			0x00000001
 #define HID_QUIRK_NOTOUCH			0x00000002
 #define HID_QUIRK_NOGET				0x00000008
-#define HID_QUIRK_HIDDEV			0x00000010
 #define HID_QUIRK_BADPAD			0x00000020
 #define HID_QUIRK_MULTI_INPUT			0x00000040
 #define HID_QUIRK_SKIP_OUTPUT_REPORTS		0x00010000
 #define HID_QUIRK_RESET_LEDS			0x00100000
-#define HID_QUIRK_HIDINPUT			0x00200000
-#define HID_QUIRK_IGNORE_HIDINPUT		0x01000000
 #define HID_QUIRK_FULLSPEED_INTERVAL		0x10000000
 
 /*
@@ -439,7 +449,11 @@ struct hid_device {							/* device report descriptor */
 
 	void *driver_data;
 
+	/* temporary hid_ff handling (until moved to the drivers) */
+	int (*ff_init)(struct hid_device *);
+
 	/* hiddev event handler */
+	int (*hiddev_connect)(struct hid_device *, unsigned int);
 	void (*hiddev_hid_event) (struct hid_device *, struct hid_field *field,
 				  struct hid_usage *, __s32);
 	void (*hiddev_report_event) (struct hid_device *, struct hid_report *);
@@ -610,7 +624,7 @@ extern void hid_unregister_driver(struct hid_driver *);
 
 extern void hidinput_hid_event(struct hid_device *, struct hid_field *, struct hid_usage *, __s32);
 extern void hidinput_report_event(struct hid_device *hid, struct hid_report *report);
-extern int hidinput_connect(struct hid_device *);
+extern int hidinput_connect(struct hid_device *hid, unsigned int force);
 extern void hidinput_disconnect(struct hid_device *);
 
 int hid_set_field(struct hid_field *, unsigned, __s32);
@@ -619,6 +633,7 @@ int hidinput_find_field(struct hid_device *hid, unsigned int type, unsigned int
 void hid_output_report(struct hid_report *report, __u8 *data);
 struct hid_device *hid_allocate_device(void);
 int hid_parse_report(struct hid_device *hid, __u8 *start, unsigned size);
+int hid_connect(struct hid_device *hid, unsigned int connect_mask);
 
 /**
  * hid_map_usage - map usage input bits
@@ -700,14 +715,22 @@ static inline int __must_check hid_parse(struct hid_device *hdev)
  * hid_hw_start - start underlaying HW
  *
  * @hdev: hid device
+ * @connect_mask: which outputs to connect, see HID_CONNECT_*
  *
  * Call this in probe function *after* hid_parse. This will setup HW buffers
  * and start the device (if not deffered to device open). hid_hw_stop must be
  * called if this was successfull.
  */
-static inline int __must_check hid_hw_start(struct hid_device *hdev)
+static inline int __must_check hid_hw_start(struct hid_device *hdev,
+		unsigned int connect_mask)
 {
-	return hdev->ll_driver->start(hdev);
+	int ret = hdev->ll_driver->start(hdev);
+	if (ret || !connect_mask)
+		return ret;
+	ret = hid_connect(hdev, connect_mask);
+	if (ret)
+		hdev->ll_driver->stop(hdev);
+	return ret;
 }
 
 /**
@@ -749,7 +772,7 @@ static inline int hid_pidff_init(struct hid_device *hid) { return -ENODEV; }
 #endif
 
 #else
-static inline int hid_ff_init(struct hid_device *hid) { return -1; }
+#define hid_ff_init	NULL
 #endif
 
 #ifdef CONFIG_HID_DEBUG

commit bd28ce008bdc68ef5902f68d2d62cbb7fa78c415
Author: Jiri Slaby <jirislaby@gmail.com>
Date:   Wed Jun 25 23:47:04 2008 +0200

    HID: move sony quirks
    
    Signed-off-by: Jiri Slaby <jirislaby@gmail.com>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>

diff --git a/include/linux/hid.h b/include/linux/hid.h
index 9eac330a1dfa..43aa51a7fa95 100644
--- a/include/linux/hid.h
+++ b/include/linux/hid.h
@@ -262,7 +262,6 @@ struct hid_item {
 #define HID_QUIRK_BADPAD			0x00000020
 #define HID_QUIRK_MULTI_INPUT			0x00000040
 #define HID_QUIRK_SKIP_OUTPUT_REPORTS		0x00010000
-#define HID_QUIRK_SONY_PS3_CONTROLLER		0x00040000
 #define HID_QUIRK_RESET_LEDS			0x00100000
 #define HID_QUIRK_HIDINPUT			0x00200000
 #define HID_QUIRK_IGNORE_HIDINPUT		0x01000000

commit 2b88b803018dbc2e9c68cbcd1739186e0715911a
Author: Jiri Slaby <jirislaby@gmail.com>
Date:   Wed Jun 25 23:03:55 2008 +0200

    HID: remove rdesc quirk support
    
    Remove support for both dynamic and static report descriptor
    quirks. There is no longer rdesc code which it would support,
    so it's useless.
    
    Signed-off-by: Jiri Slaby <jirislaby@gmail.com>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>

diff --git a/include/linux/hid.h b/include/linux/hid.h
index 0de5fe8894d9..9eac330a1dfa 100644
--- a/include/linux/hid.h
+++ b/include/linux/hid.h
@@ -734,7 +734,6 @@ extern void hid_generic_exit(void);
 u32 usbhid_lookup_quirk(const u16 idVendor, const u16 idProduct);
 int usbhid_quirks_init(char **quirks_param);
 void usbhid_quirks_exit(void);
-void usbhid_fixup_report_descriptor(const u16, const u16, char *, unsigned, char **);
 
 #ifdef CONFIG_HID_FF
 int hid_ff_init(struct hid_device *hid);

commit 3715ade981d524f9bb3b851a1eb81d3604a873bc
Author: Jiri Slaby <jirislaby@gmail.com>
Date:   Thu Jul 31 11:09:37 2008 +0200

    HID: remove hid-input-quirks
    
    Remove the file since these is no user now.
    
    Signed-off-by: Jiri Slaby <jirislaby@gmail.com>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>

diff --git a/include/linux/hid.h b/include/linux/hid.h
index 5b47feecc101..0de5fe8894d9 100644
--- a/include/linux/hid.h
+++ b/include/linux/hid.h
@@ -617,9 +617,6 @@ extern void hidinput_disconnect(struct hid_device *);
 int hid_set_field(struct hid_field *, unsigned, __s32);
 int hid_input_report(struct hid_device *, int type, u8 *, int, int);
 int hidinput_find_field(struct hid_device *hid, unsigned int type, unsigned int code, struct hid_field **field);
-int hidinput_mapping_quirks(struct hid_usage *, struct hid_input *,
-		unsigned long **, int *);
-int hidinput_event_quirks(struct hid_device *, struct hid_field *, struct hid_usage *, __s32);
 void hid_output_report(struct hid_report *report, __u8 *data);
 struct hid_device *hid_allocate_device(void);
 int hid_parse_report(struct hid_device *hid, __u8 *start, unsigned size);

commit 980a3da6acdd577ee3ae192e868dc52fe4b7f2e5
Author: Jiri Slaby <jirislaby@gmail.com>
Date:   Wed Jun 25 22:31:48 2008 +0200

    HID: move samsung quirks
    
    Signed-off-by: Jiri Slaby <jirislaby@gmail.com>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>

diff --git a/include/linux/hid.h b/include/linux/hid.h
index 3a639bff4ab2..5b47feecc101 100644
--- a/include/linux/hid.h
+++ b/include/linux/hid.h
@@ -268,12 +268,6 @@ struct hid_item {
 #define HID_QUIRK_IGNORE_HIDINPUT		0x01000000
 #define HID_QUIRK_FULLSPEED_INTERVAL		0x10000000
 
-/*
- * Separate quirks for runtime report descriptor fixup
- */
-
-#define HID_QUIRK_RDESC_SAMSUNG_REMOTE		0x00000040
-
 /*
  * This is the global environment of the parser. This information is
  * persistent for main-items. The global environment can be saved and

commit 3b8006e51038ef263a0404756d9e190c9a9f74d5
Author: Jiri Slaby <jirislaby@gmail.com>
Date:   Wed Jun 25 00:07:50 2008 +0200

    HID: move monterey quirks
    
    Signed-off-by: Jiri Slaby <jirislaby@gmail.com>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>

diff --git a/include/linux/hid.h b/include/linux/hid.h
index 7f4c94ffa617..3a639bff4ab2 100644
--- a/include/linux/hid.h
+++ b/include/linux/hid.h
@@ -272,7 +272,6 @@ struct hid_item {
  * Separate quirks for runtime report descriptor fixup
  */
 
-#define HID_QUIRK_RDESC_BUTTON_CONSUMER		0x00000020
 #define HID_QUIRK_RDESC_SAMSUNG_REMOTE		0x00000040
 
 /*

commit 1e76253220dbe66e048e55680266dd1f4af0be85
Author: Jiri Slaby <jirislaby@gmail.com>
Date:   Tue Jun 24 23:46:21 2008 +0200

    HID: move petalynx quirks
    
    Signed-off-by: Jiri Slaby <jirislaby@gmail.com>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>

diff --git a/include/linux/hid.h b/include/linux/hid.h
index 298cbcce3a2d..7f4c94ffa617 100644
--- a/include/linux/hid.h
+++ b/include/linux/hid.h
@@ -272,7 +272,6 @@ struct hid_item {
  * Separate quirks for runtime report descriptor fixup
  */
 
-#define HID_QUIRK_RDESC_PETALYNX		0x00000008
 #define HID_QUIRK_RDESC_BUTTON_CONSUMER		0x00000020
 #define HID_QUIRK_RDESC_SAMSUNG_REMOTE		0x00000040
 

commit 1f243e302cea1561ac881eb5d27041c5342beba4
Author: Jiri Slaby <jirislaby@gmail.com>
Date:   Tue Jun 24 21:11:21 2008 +0200

    HID: move ezkey quirks
    
    Signed-off-by: Jiri Slaby <jirislaby@gmail.com>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>

diff --git a/include/linux/hid.h b/include/linux/hid.h
index d9ab4a3af431..298cbcce3a2d 100644
--- a/include/linux/hid.h
+++ b/include/linux/hid.h
@@ -266,7 +266,6 @@ struct hid_item {
 #define HID_QUIRK_RESET_LEDS			0x00100000
 #define HID_QUIRK_HIDINPUT			0x00200000
 #define HID_QUIRK_IGNORE_HIDINPUT		0x01000000
-#define HID_QUIRK_HWHEEL_WHEEL_INVERT		0x04000000
 #define HID_QUIRK_FULLSPEED_INTERVAL		0x10000000
 
 /*

commit 3b239cd739a9499da08326356add3d9d992c7911
Author: Jiri Slaby <jirislaby@gmail.com>
Date:   Tue Jun 24 20:42:25 2008 +0200

    HID: move cherry quirks
    
    Signed-off-by: Jiri Slaby <jirislaby@gmail.com>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>

diff --git a/include/linux/hid.h b/include/linux/hid.h
index a7cc4af2e467..d9ab4a3af431 100644
--- a/include/linux/hid.h
+++ b/include/linux/hid.h
@@ -273,7 +273,6 @@ struct hid_item {
  * Separate quirks for runtime report descriptor fixup
  */
 
-#define HID_QUIRK_RDESC_CYMOTION		0x00000001
 #define HID_QUIRK_RDESC_PETALYNX		0x00000008
 #define HID_QUIRK_RDESC_BUTTON_CONSUMER		0x00000020
 #define HID_QUIRK_RDESC_SAMSUNG_REMOTE		0x00000040

commit 14a21cd459f97e3b3cc4fcde48fc5bcdb81d097e
Author: Jiri Slaby <jirislaby@gmail.com>
Date:   Mon Jun 23 23:31:09 2008 +0200

    HID: move a4tech quirks
    
    Signed-off-by: Jiri Slaby <jirislaby@gmail.com>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>

diff --git a/include/linux/hid.h b/include/linux/hid.h
index 27bfbcc1ef81..a7cc4af2e467 100644
--- a/include/linux/hid.h
+++ b/include/linux/hid.h
@@ -261,14 +261,11 @@ struct hid_item {
 #define HID_QUIRK_HIDDEV			0x00000010
 #define HID_QUIRK_BADPAD			0x00000020
 #define HID_QUIRK_MULTI_INPUT			0x00000040
-#define HID_QUIRK_2WHEEL_MOUSE_HACK_7		0x00000080
-#define HID_QUIRK_2WHEEL_MOUSE_HACK_ON		0x00000200
 #define HID_QUIRK_SKIP_OUTPUT_REPORTS		0x00010000
 #define HID_QUIRK_SONY_PS3_CONTROLLER		0x00040000
 #define HID_QUIRK_RESET_LEDS			0x00100000
 #define HID_QUIRK_HIDINPUT			0x00200000
 #define HID_QUIRK_IGNORE_HIDINPUT		0x01000000
-#define HID_QUIRK_2WHEEL_MOUSE_HACK_B8		0x02000000
 #define HID_QUIRK_HWHEEL_WHEEL_INVERT		0x04000000
 #define HID_QUIRK_FULLSPEED_INTERVAL		0x10000000
 
@@ -453,8 +450,6 @@ struct hid_device {							/* device report descriptor */
 
 	void *driver_data;
 
-	__s32 delayed_value;						/* For A4 Tech mice hwheel quirk */
-
 	/* hiddev event handler */
 	void (*hiddev_hid_event) (struct hid_device *, struct hid_field *field,
 				  struct hid_usage *, __s32);

commit 0f2213208f8da51bcb665309e3468f000489c04f
Author: Jiri Slaby <jirislaby@gmail.com>
Date:   Mon Jun 23 22:54:08 2008 +0200

    HID: move cypress quirks
    
    Signed-off-by: Jiri Slaby <jirislaby@gmail.com>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>

diff --git a/include/linux/hid.h b/include/linux/hid.h
index a83d211021de..27bfbcc1ef81 100644
--- a/include/linux/hid.h
+++ b/include/linux/hid.h
@@ -262,7 +262,6 @@ struct hid_item {
 #define HID_QUIRK_BADPAD			0x00000020
 #define HID_QUIRK_MULTI_INPUT			0x00000040
 #define HID_QUIRK_2WHEEL_MOUSE_HACK_7		0x00000080
-#define HID_QUIRK_2WHEEL_MOUSE_HACK_5		0x00000100
 #define HID_QUIRK_2WHEEL_MOUSE_HACK_ON		0x00000200
 #define HID_QUIRK_SKIP_OUTPUT_REPORTS		0x00010000
 #define HID_QUIRK_SONY_PS3_CONTROLLER		0x00040000
@@ -278,7 +277,6 @@ struct hid_item {
  */
 
 #define HID_QUIRK_RDESC_CYMOTION		0x00000001
-#define HID_QUIRK_RDESC_SWAPPED_MIN_MAX		0x00000004
 #define HID_QUIRK_RDESC_PETALYNX		0x00000008
 #define HID_QUIRK_RDESC_BUTTON_CONSUMER		0x00000020
 #define HID_QUIRK_RDESC_SAMSUNG_REMOTE		0x00000040

commit 90231e7eaf752856a2c13f786f36ec7f641bad28
Author: Jiri Slaby <jirislaby@gmail.com>
Date:   Mon Jun 23 21:56:07 2008 +0200

    HID: move sunplus quirks
    
    Signed-off-by: Jiri Slaby <jirislaby@gmail.com>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>

diff --git a/include/linux/hid.h b/include/linux/hid.h
index 1f1edd886ef8..a83d211021de 100644
--- a/include/linux/hid.h
+++ b/include/linux/hid.h
@@ -282,7 +282,6 @@ struct hid_item {
 #define HID_QUIRK_RDESC_PETALYNX		0x00000008
 #define HID_QUIRK_RDESC_BUTTON_CONSUMER		0x00000020
 #define HID_QUIRK_RDESC_SAMSUNG_REMOTE		0x00000040
-#define HID_QUIRK_RDESC_SUNPLUS_WDESKTOP	0x00000100
 
 /*
  * This is the global environment of the parser. This information is

commit 78a849a682a1d5ee7b7187b08abdc48656326a4e
Author: Jiri Slaby <jirislaby@gmail.com>
Date:   Fri Jun 20 21:26:11 2008 +0200

    HID: move microsoft quirks
    
    Move them from the core code to a separate driver.
    
    Signed-off-by: Jiri Slaby <jirislaby@gmail.com>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>

diff --git a/include/linux/hid.h b/include/linux/hid.h
index 60e44e6b86e6..1f1edd886ef8 100644
--- a/include/linux/hid.h
+++ b/include/linux/hid.h
@@ -271,7 +271,6 @@ struct hid_item {
 #define HID_QUIRK_IGNORE_HIDINPUT		0x01000000
 #define HID_QUIRK_2WHEEL_MOUSE_HACK_B8		0x02000000
 #define HID_QUIRK_HWHEEL_WHEEL_INVERT		0x04000000
-#define HID_QUIRK_MICROSOFT_KEYS		0x08000000
 #define HID_QUIRK_FULLSPEED_INTERVAL		0x10000000
 
 /*
@@ -283,7 +282,6 @@ struct hid_item {
 #define HID_QUIRK_RDESC_PETALYNX		0x00000008
 #define HID_QUIRK_RDESC_BUTTON_CONSUMER		0x00000020
 #define HID_QUIRK_RDESC_SAMSUNG_REMOTE		0x00000040
-#define HID_QUIRK_RDESC_MICROSOFT_RECV_1028	0x00000080
 #define HID_QUIRK_RDESC_SUNPLUS_WDESKTOP	0x00000100
 
 /*

commit 02ae9a1a8bc1d08a8fd5f6a0b8bde400b0f891b9
Author: Jiri Slaby <jirislaby@gmail.com>
Date:   Fri May 16 11:49:22 2008 +0200

    HID: add compat support
    
    Add compat option to hid code to allow loading of all modules on
    systems which don't allow autoloading because of old userspace.
    
    Signed-off-by: Jiri Slaby <jirislaby@gmail.com>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>

diff --git a/include/linux/hid.h b/include/linux/hid.h
index 75cc1531dd84..60e44e6b86e6 100644
--- a/include/linux/hid.h
+++ b/include/linux/hid.h
@@ -790,10 +790,23 @@ dbg_hid(const char *fmt, ...)
 	return 0;
 }
 #define dbg_hid_line dbg_hid
-#endif
+#endif /* HID_DEBUG */
 
 #define err_hid(format, arg...) printk(KERN_ERR "%s: " format "\n" , \
 		__FILE__ , ## arg)
-#endif
+#endif /* HID_FF */
+
+#ifdef CONFIG_HID_COMPAT
+#define HID_COMPAT_LOAD_DRIVER(name)	\
+void hid_compat_##name(void) { }	\
+EXPORT_SYMBOL(hid_compat_##name)
+#else
+#define HID_COMPAT_LOAD_DRIVER(name)
+#endif /* HID_COMPAT */
+#define HID_COMPAT_CALL_DRIVER(name)	do {	\
+	extern void hid_compat_##name(void);	\
+	hid_compat_##name();			\
+} while (0)
+
 #endif
 

commit 8c19a51591d06f5226499972567f528cf6066bb7
Author: Jiri Slaby <jirislaby@gmail.com>
Date:   Wed Jun 18 23:36:49 2008 +0200

    HID: move apple quirks
    
    Move them from the core code to a separate driver.
    
    Signed-off-by: Jiri Slaby <jslaby@suse.cz>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>

diff --git a/include/linux/hid.h b/include/linux/hid.h
index 0644fd33b983..75cc1531dd84 100644
--- a/include/linux/hid.h
+++ b/include/linux/hid.h
@@ -264,13 +264,7 @@ struct hid_item {
 #define HID_QUIRK_2WHEEL_MOUSE_HACK_7		0x00000080
 #define HID_QUIRK_2WHEEL_MOUSE_HACK_5		0x00000100
 #define HID_QUIRK_2WHEEL_MOUSE_HACK_ON		0x00000200
-#define HID_QUIRK_MIGHTYMOUSE			0x00000400
-#define HID_QUIRK_APPLE_HAS_FN			0x00000800
-#define HID_QUIRK_APPLE_FN_ON			0x00001000
-#define HID_QUIRK_INVERT_HWHEEL			0x00002000
-#define HID_QUIRK_APPLE_ISO_KEYBOARD		0x00004000
 #define HID_QUIRK_SKIP_OUTPUT_REPORTS		0x00010000
-#define HID_QUIRK_IGNORE_MOUSE			0x00020000
 #define HID_QUIRK_SONY_PS3_CONTROLLER		0x00040000
 #define HID_QUIRK_RESET_LEDS			0x00100000
 #define HID_QUIRK_HIDINPUT			0x00200000
@@ -279,7 +273,6 @@ struct hid_item {
 #define HID_QUIRK_HWHEEL_WHEEL_INVERT		0x04000000
 #define HID_QUIRK_MICROSOFT_KEYS		0x08000000
 #define HID_QUIRK_FULLSPEED_INTERVAL		0x10000000
-#define HID_QUIRK_APPLE_NUMLOCK_EMULATION	0x20000000
 
 /*
  * Separate quirks for runtime report descriptor fixup
@@ -288,7 +281,6 @@ struct hid_item {
 #define HID_QUIRK_RDESC_CYMOTION		0x00000001
 #define HID_QUIRK_RDESC_SWAPPED_MIN_MAX		0x00000004
 #define HID_QUIRK_RDESC_PETALYNX		0x00000008
-#define HID_QUIRK_RDESC_MACBOOK_JIS		0x00000010
 #define HID_QUIRK_RDESC_BUTTON_CONSUMER		0x00000020
 #define HID_QUIRK_RDESC_SAMSUNG_REMOTE		0x00000040
 #define HID_QUIRK_RDESC_MICROSOFT_RECV_1028	0x00000080
@@ -475,10 +467,6 @@ struct hid_device {							/* device report descriptor */
 
 	/* handler for raw output data, used by hidraw */
 	int (*hid_output_raw_report) (struct hid_device *, __u8 *, size_t);
-#ifdef CONFIG_USB_HIDINPUT_POWERBOOK
-	unsigned long apple_pressed_fn[BITS_TO_LONGS(KEY_CNT)];
-	unsigned long pb_pressed_numlock[BITS_TO_LONGS(KEY_CNT)];
-#endif
 };
 
 static inline void *hid_get_drvdata(struct hid_device *hdev)
@@ -652,7 +640,6 @@ int hidinput_find_field(struct hid_device *hid, unsigned int type, unsigned int
 int hidinput_mapping_quirks(struct hid_usage *, struct hid_input *,
 		unsigned long **, int *);
 int hidinput_event_quirks(struct hid_device *, struct hid_field *, struct hid_usage *, __s32);
-int hidinput_apple_event(struct hid_device *, struct input_dev *, struct hid_usage *, __s32);
 void hid_output_report(struct hid_report *report, __u8 *data);
 struct hid_device *hid_allocate_device(void);
 int hid_parse_report(struct hid_device *hid, __u8 *start, unsigned size);

commit d458a9dfc4de24870b8c747484b1988726534bee
Author: Jiri Slaby <jirislaby@gmail.com>
Date:   Fri May 16 11:49:20 2008 +0200

    HID: move ignore quirks
    
    Move ignore quirks from usbhid-quirks into hid-core code. Also don't output
    warning when ENODEV is error code in usbhid and try ordinal input in hidp
    when that error is returned.
    
    Signed-off-by: Jiri Slaby <jslaby@suse.cz>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>

diff --git a/include/linux/hid.h b/include/linux/hid.h
index e9c4154ba336..0644fd33b983 100644
--- a/include/linux/hid.h
+++ b/include/linux/hid.h
@@ -257,7 +257,6 @@ struct hid_item {
 
 #define HID_QUIRK_INVERT			0x00000001
 #define HID_QUIRK_NOTOUCH			0x00000002
-#define HID_QUIRK_IGNORE			0x00000004
 #define HID_QUIRK_NOGET				0x00000008
 #define HID_QUIRK_HIDDEV			0x00000010
 #define HID_QUIRK_BADPAD			0x00000020

commit 5f22a7992349c5ca3842190be52d5e9a1dd7adf4
Author: Jiri Slaby <jirislaby@gmail.com>
Date:   Fri May 16 11:49:19 2008 +0200

    HID: move logitech quirks
    
    Move them from the core and input code to a separate driver.
    
    Signed-off-by: Jiri Slaby <jslaby@suse.cz>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>

diff --git a/include/linux/hid.h b/include/linux/hid.h
index 986c0e7ea66a..e9c4154ba336 100644
--- a/include/linux/hid.h
+++ b/include/linux/hid.h
@@ -270,15 +270,11 @@ struct hid_item {
 #define HID_QUIRK_APPLE_FN_ON			0x00001000
 #define HID_QUIRK_INVERT_HWHEEL			0x00002000
 #define HID_QUIRK_APPLE_ISO_KEYBOARD		0x00004000
-#define HID_QUIRK_BAD_RELATIVE_KEYS		0x00008000
 #define HID_QUIRK_SKIP_OUTPUT_REPORTS		0x00010000
 #define HID_QUIRK_IGNORE_MOUSE			0x00020000
 #define HID_QUIRK_SONY_PS3_CONTROLLER		0x00040000
-#define HID_QUIRK_DUPLICATE_USAGES		0x00080000
 #define HID_QUIRK_RESET_LEDS			0x00100000
 #define HID_QUIRK_HIDINPUT			0x00200000
-#define HID_QUIRK_LOGITECH_IGNORE_DOUBLED_WHEEL	0x00400000
-#define HID_QUIRK_LOGITECH_EXPANDED_KEYMAP	0x00800000
 #define HID_QUIRK_IGNORE_HIDINPUT		0x01000000
 #define HID_QUIRK_2WHEEL_MOUSE_HACK_B8		0x02000000
 #define HID_QUIRK_HWHEEL_WHEEL_INVERT		0x04000000
@@ -291,7 +287,6 @@ struct hid_item {
  */
 
 #define HID_QUIRK_RDESC_CYMOTION		0x00000001
-#define HID_QUIRK_RDESC_LOGITECH		0x00000002
 #define HID_QUIRK_RDESC_SWAPPED_MIN_MAX		0x00000004
 #define HID_QUIRK_RDESC_PETALYNX		0x00000008
 #define HID_QUIRK_RDESC_MACBOOK_JIS		0x00000010

commit 022e8c4d08b3b06361594b60412db0242035c4b4
Author: Jiri Slaby <jirislaby@gmail.com>
Date:   Fri May 16 11:49:18 2008 +0200

    HID: move usage input mapping to hid.h
    
    This mapping are currently used on 2 placces and will be needed by more
    quirk drivers, so move them to hid.h to allow them to use it.
    
    Signed-off-by: Jiri Slaby <jslaby@suse.cz>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>

diff --git a/include/linux/hid.h b/include/linux/hid.h
index ac2584fe65c5..986c0e7ea66a 100644
--- a/include/linux/hid.h
+++ b/include/linux/hid.h
@@ -655,13 +655,67 @@ extern void hidinput_disconnect(struct hid_device *);
 int hid_set_field(struct hid_field *, unsigned, __s32);
 int hid_input_report(struct hid_device *, int type, u8 *, int, int);
 int hidinput_find_field(struct hid_device *hid, unsigned int type, unsigned int code, struct hid_field **field);
-int hidinput_mapping_quirks(struct hid_usage *, struct input_dev *, unsigned long **, int *);
+int hidinput_mapping_quirks(struct hid_usage *, struct hid_input *,
+		unsigned long **, int *);
 int hidinput_event_quirks(struct hid_device *, struct hid_field *, struct hid_usage *, __s32);
 int hidinput_apple_event(struct hid_device *, struct input_dev *, struct hid_usage *, __s32);
 void hid_output_report(struct hid_report *report, __u8 *data);
 struct hid_device *hid_allocate_device(void);
 int hid_parse_report(struct hid_device *hid, __u8 *start, unsigned size);
 
+/**
+ * hid_map_usage - map usage input bits
+ *
+ * @hidinput: hidinput which we are interested in
+ * @usage: usage to fill in
+ * @bit: pointer to input->{}bit (out parameter)
+ * @max: maximal valid usage->code to consider later (out parameter)
+ * @type: input event type (EV_KEY, EV_REL, ...)
+ * @c: code which corresponds to this usage and type
+ */
+static inline void hid_map_usage(struct hid_input *hidinput,
+		struct hid_usage *usage, unsigned long **bit, int *max,
+		__u8 type, __u16 c)
+{
+	struct input_dev *input = hidinput->input;
+
+	usage->type = type;
+	usage->code = c;
+
+	switch (type) {
+	case EV_ABS:
+		*bit = input->absbit;
+		*max = ABS_MAX;
+		break;
+	case EV_REL:
+		*bit = input->relbit;
+		*max = REL_MAX;
+		break;
+	case EV_KEY:
+		*bit = input->keybit;
+		*max = KEY_MAX;
+		break;
+	case EV_LED:
+		*bit = input->ledbit;
+		*max = LED_MAX;
+		break;
+	}
+}
+
+/**
+ * hid_map_usage_clear - map usage input bits and clear the input bit
+ *
+ * The same as hid_map_usage, except the @c bit is also cleared in supported
+ * bits (@bit).
+ */
+static inline void hid_map_usage_clear(struct hid_input *hidinput,
+		struct hid_usage *usage, unsigned long **bit, int *max,
+		__u8 type, __u16 c)
+{
+	hid_map_usage(hidinput, usage, bit, max, type, c);
+	clear_bit(c, *bit);
+}
+
 /**
  * hid_parse - parse HW reports
  *

commit c500c9714011edab021591340042787722db9cf0
Author: Jiri Slaby <jirislaby@gmail.com>
Date:   Fri May 16 11:49:16 2008 +0200

    HID: hid, make parsing event driven
    
    Next step for complete hid bus, this patch includes:
    - call parser either from probe or from hid-core if there is no probe.
    - add ll_driver structure and centralize some stuff there (open, close...)
    - split and merge usb_hid_configure and hid_probe into several functions
      to allow hooks/fixes between them
    
    Signed-off-by: Jiri Slaby <jslaby@suse.cz>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>

diff --git a/include/linux/hid.h b/include/linux/hid.h
index c4bea0eda85b..ac2584fe65c5 100644
--- a/include/linux/hid.h
+++ b/include/linux/hid.h
@@ -419,6 +419,7 @@ struct hid_control_fifo {
 #define HID_CLAIMED_HIDRAW	4
 
 #define HID_STAT_ADDED		1
+#define HID_STAT_PARSED		2
 
 #define HID_CTRL_RUNNING	1
 #define HID_OUT_RUNNING		2
@@ -435,6 +436,7 @@ struct hid_input {
 };
 
 struct hid_driver;
+struct hid_ll_driver;
 
 struct hid_device {							/* device report descriptor */
 	__u8 *rdesc;
@@ -452,6 +454,7 @@ struct hid_device {							/* device report descriptor */
 
 	struct device dev;						/* device */
 	struct hid_driver *driver;
+	struct hid_ll_driver *ll_driver;
 
 	unsigned int status;						/* see STAT flags above */
 	unsigned claimed;						/* Claimed by hidinput, hiddev? */
@@ -471,11 +474,6 @@ struct hid_device {							/* device report descriptor */
 
 	__s32 delayed_value;						/* For A4 Tech mice hwheel quirk */
 
-	/* device-specific function pointers */
-	int (*hidinput_input_event) (struct input_dev *, unsigned int, unsigned int, int);
-	int (*hid_open) (struct hid_device *);
-	void (*hid_close) (struct hid_device *);
-
 	/* hiddev event handler */
 	void (*hiddev_hid_event) (struct hid_device *, struct hid_field *field,
 				  struct hid_usage *, __s32);
@@ -561,9 +559,22 @@ struct hid_usage_id {
  * @raw_event: if report in report_table, this hook is called (NULL means nop)
  * @usage_table: on which events to call event (NULL means all)
  * @event: if usage in usage_table, this hook is called (NULL means nop)
+ * @report_fixup: called before report descriptor parsing (NULL means nop)
+ * @input_mapping: invoked on input registering before mapping an usage
+ * @input_mapped: invoked on input registering after mapping an usage
  *
  * raw_event and event should return 0 on no action performed, 1 when no
  * further processing should be done and negative on error
+ *
+ * input_mapping shall return a negative value to completely ignore this usage
+ * (e.g. doubled or invalid usage), zero to continue with parsing of this
+ * usage by generic code (no special handling needed) or positive to skip
+ * generic parsing (needed special handling which was done in the hook already)
+ * input_mapped shall return negative to inform the layer that this usage
+ * should not be considered for further processing or zero to notify that
+ * no processing was performed and should be done in a generic manner
+ * Both these functions may be NULL which means the same behavior as returning
+ * zero from them.
  */
 struct hid_driver {
 	char *name;
@@ -578,10 +589,43 @@ struct hid_driver {
 	const struct hid_usage_id *usage_table;
 	int (*event)(struct hid_device *hdev, struct hid_field *field,
 			struct hid_usage *usage, __s32 value);
+
+	void (*report_fixup)(struct hid_device *hdev, __u8 *buf,
+			unsigned int size);
+
+	int (*input_mapping)(struct hid_device *hdev,
+			struct hid_input *hidinput, struct hid_field *field,
+			struct hid_usage *usage, unsigned long **bit, int *max);
+	int (*input_mapped)(struct hid_device *hdev,
+			struct hid_input *hidinput, struct hid_field *field,
+			struct hid_usage *usage, unsigned long **bit, int *max);
 /* private: */
 	struct device_driver driver;
 };
 
+/**
+ * hid_ll_driver - low level driver callbacks
+ * @start: called on probe to start the device
+ * @stop: called on remove
+ * @open: called by input layer on open
+ * @close: called by input layer on close
+ * @hidinput_input_event: event input event (e.g. ff or leds)
+ * @parse: this method is called only once to parse the device data,
+ *	   shouldn't allocate anything to not leak memory
+ */
+struct hid_ll_driver {
+	int (*start)(struct hid_device *hdev);
+	void (*stop)(struct hid_device *hdev);
+
+	int (*open)(struct hid_device *hdev);
+	void (*close)(struct hid_device *hdev);
+
+	int (*hidinput_input_event) (struct input_dev *idev, unsigned int type,
+			unsigned int code, int value);
+
+	int (*parse)(struct hid_device *hdev);
+};
+
 /* Applications from HID Usage Tables 4/8/99 Version 1.1 */
 /* We ignore a few input applications that are not widely used */
 #define IS_INPUT_APPLICATION(a) (((a >= 0x00010000) && (a <= 0x00010008)) || (a == 0x00010080) || (a == 0x000c0001) || (a == 0x000d0002))
@@ -618,6 +662,56 @@ void hid_output_report(struct hid_report *report, __u8 *data);
 struct hid_device *hid_allocate_device(void);
 int hid_parse_report(struct hid_device *hid, __u8 *start, unsigned size);
 
+/**
+ * hid_parse - parse HW reports
+ *
+ * @hdev: hid device
+ *
+ * Call this from probe after you set up the device (if needed). Your
+ * report_fixup will be called (if non-NULL) after reading raw report from
+ * device before passing it to hid layer for real parsing.
+ */
+static inline int __must_check hid_parse(struct hid_device *hdev)
+{
+	int ret;
+
+	if (hdev->status & HID_STAT_PARSED)
+		return 0;
+
+	ret = hdev->ll_driver->parse(hdev);
+	if (!ret)
+		hdev->status |= HID_STAT_PARSED;
+
+	return ret;
+}
+
+/**
+ * hid_hw_start - start underlaying HW
+ *
+ * @hdev: hid device
+ *
+ * Call this in probe function *after* hid_parse. This will setup HW buffers
+ * and start the device (if not deffered to device open). hid_hw_stop must be
+ * called if this was successfull.
+ */
+static inline int __must_check hid_hw_start(struct hid_device *hdev)
+{
+	return hdev->ll_driver->start(hdev);
+}
+
+/**
+ * hid_hw_stop - stop underlaying HW
+ *
+ * @hdev: hid device
+ *
+ * This is usually called from remove function or from probe when something
+ * failed and hid_hw_start was called already.
+ */
+static inline void hid_hw_stop(struct hid_device *hdev)
+{
+	hdev->ll_driver->stop(hdev);
+}
+
 void hid_report_raw_event(struct hid_device *hid, int type, u8 *data, int size,
 		int interrupt);
 

commit 85cdaf524b7ddab627e7d15405693f2511ef7505
Author: Jiri Slaby <jirislaby@gmail.com>
Date:   Fri May 16 11:49:15 2008 +0200

    HID: make a bus from hid code
    
    Make a bus from hid core. This is the first step for converting all the
    quirks and separate almost-drivers into real drivers attached to this bus.
    
    It's implemented to change behaviour in very tiny manner, so that no driver
    needs to be changed this time.
    
    Also add generic drivers for both usb and bt into usbhid or hidp
    respectively which will bind all non-blacklisted device. Those blacklisted
    will be either grabbed by special drivers or by nobody if they are broken at
    the very rude base.
    
    Signed-off-by: Jiri Slaby <jslaby@suse.cz>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>

diff --git a/include/linux/hid.h b/include/linux/hid.h
index b7a17762a0b2..c4bea0eda85b 100644
--- a/include/linux/hid.h
+++ b/include/linux/hid.h
@@ -418,6 +418,8 @@ struct hid_control_fifo {
 #define HID_CLAIMED_HIDDEV	2
 #define HID_CLAIMED_HIDRAW	4
 
+#define HID_STAT_ADDED		1
+
 #define HID_CTRL_RUNNING	1
 #define HID_OUT_RUNNING		2
 #define HID_IN_RUNNING		3
@@ -432,22 +434,26 @@ struct hid_input {
 	struct input_dev *input;
 };
 
+struct hid_driver;
+
 struct hid_device {							/* device report descriptor */
-	 __u8 *rdesc;
+	__u8 *rdesc;
 	unsigned rsize;
 	struct hid_collection *collection;				/* List of HID collections */
 	unsigned collection_size;					/* Number of allocated hid_collections */
 	unsigned maxcollection;						/* Number of parsed collections */
 	unsigned maxapplication;					/* Number of applications */
-	unsigned short bus;                                             /* BUS ID */
-	unsigned short vendor;                                          /* Vendor ID */
-	unsigned short product;                                         /* Product ID */
-	unsigned version;						/* HID version */
+	__u16 bus;							/* BUS ID */
+	__u32 vendor;							/* Vendor ID */
+	__u32 product;							/* Product ID */
+	__u32 version;							/* HID version */
 	unsigned country;						/* HID country */
 	struct hid_report_enum report_enum[HID_REPORT_TYPES];
 
-	struct device *dev;						/* device */
+	struct device dev;						/* device */
+	struct hid_driver *driver;
 
+	unsigned int status;						/* see STAT flags above */
 	unsigned claimed;						/* Claimed by hidinput, hiddev? */
 	unsigned quirks;						/* Various quirks the device can pull on us */
 
@@ -483,6 +489,16 @@ struct hid_device {							/* device report descriptor */
 #endif
 };
 
+static inline void *hid_get_drvdata(struct hid_device *hdev)
+{
+	return dev_get_drvdata(&hdev->dev);
+}
+
+static inline void hid_set_drvdata(struct hid_device *hdev, void *data)
+{
+	dev_set_drvdata(&hdev->dev, data);
+}
+
 #define HID_GLOBAL_STACK_SIZE 4
 #define HID_COLLECTION_STACK_SIZE 4
 
@@ -511,6 +527,61 @@ struct hid_descriptor {
 	struct hid_class_descriptor desc[1];
 } __attribute__ ((packed));
 
+#define HID_DEVICE(b, ven, prod) \
+	.bus = (b), \
+	.vendor = (ven), .product = (prod)
+
+#define HID_USB_DEVICE(ven, prod)	HID_DEVICE(BUS_USB, ven, prod)
+#define HID_BLUETOOTH_DEVICE(ven, prod)	HID_DEVICE(BUS_BLUETOOTH, ven, prod)
+
+#define HID_REPORT_ID(rep) \
+	.report_type = (rep)
+#define HID_USAGE_ID(uhid, utype, ucode) \
+	.usage_hid = (uhid), .usage_type = (utype), .usage_code = (ucode)
+/* we don't want to catch types and codes equal to 0 */
+#define HID_TERMINATOR		(HID_ANY_ID - 1)
+
+struct hid_report_id {
+	__u32 report_type;
+};
+struct hid_usage_id {
+	__u32 usage_hid;
+	__u32 usage_type;
+	__u32 usage_code;
+};
+
+/**
+ * struct hid_driver
+ * @name: driver name (e.g. "Footech_bar-wheel")
+ * @id_table: which devices is this driver for (must be non-NULL for probe
+ * 	      to be called)
+ * @probe: new device inserted
+ * @remove: device removed (NULL if not a hot-plug capable driver)
+ * @report_table: on which reports to call raw_event (NULL means all)
+ * @raw_event: if report in report_table, this hook is called (NULL means nop)
+ * @usage_table: on which events to call event (NULL means all)
+ * @event: if usage in usage_table, this hook is called (NULL means nop)
+ *
+ * raw_event and event should return 0 on no action performed, 1 when no
+ * further processing should be done and negative on error
+ */
+struct hid_driver {
+	char *name;
+	const struct hid_device_id *id_table;
+
+	int (*probe)(struct hid_device *dev, const struct hid_device_id *id);
+	void (*remove)(struct hid_device *dev);
+
+	const struct hid_report_id *report_table;
+	int (*raw_event)(struct hid_device *hdev, struct hid_report *report,
+			u8 *data, int size);
+	const struct hid_usage_id *usage_table;
+	int (*event)(struct hid_device *hdev, struct hid_field *field,
+			struct hid_usage *usage, __s32 value);
+/* private: */
+	struct device_driver driver;
+};
+
 /* Applications from HID Usage Tables 4/8/99 Version 1.1 */
 /* We ignore a few input applications that are not widely used */
 #define IS_INPUT_APPLICATION(a) (((a >= 0x00010000) && (a <= 0x00010008)) || (a == 0x00010080) || (a == 0x000c0001) || (a == 0x000d0002))
@@ -521,6 +592,17 @@ struct hid_descriptor {
 extern int hid_debug;
 #endif
 
+extern int hid_add_device(struct hid_device *);
+extern void hid_destroy_device(struct hid_device *);
+
+extern int __must_check __hid_register_driver(struct hid_driver *,
+		struct module *, const char *mod_name);
+static inline int __must_check hid_register_driver(struct hid_driver *driver)
+{
+	return __hid_register_driver(driver, THIS_MODULE, KBUILD_MODNAME);
+}
+extern void hid_unregister_driver(struct hid_driver *);
+
 extern void hidinput_hid_event(struct hid_device *, struct hid_field *, struct hid_usage *, __s32);
 extern void hidinput_report_event(struct hid_device *hid, struct hid_report *report);
 extern int hidinput_connect(struct hid_device *);
@@ -533,8 +615,14 @@ int hidinput_mapping_quirks(struct hid_usage *, struct input_dev *, unsigned lon
 int hidinput_event_quirks(struct hid_device *, struct hid_field *, struct hid_usage *, __s32);
 int hidinput_apple_event(struct hid_device *, struct input_dev *, struct hid_usage *, __s32);
 void hid_output_report(struct hid_report *report, __u8 *data);
-void hid_free_device(struct hid_device *device);
-struct hid_device *hid_parse_report(__u8 *start, unsigned size);
+struct hid_device *hid_allocate_device(void);
+int hid_parse_report(struct hid_device *hid, __u8 *start, unsigned size);
+
+void hid_report_raw_event(struct hid_device *hid, int type, u8 *data, int size,
+		int interrupt);
+
+extern int hid_generic_init(void);
+extern void hid_generic_exit(void);
 
 /* HID quirks API */
 u32 usbhid_lookup_quirk(const u16 idVendor, const u16 idProduct);

commit e8c84f9a5f06912c94c38961096c994da3890a2e
Author: Jiri Slaby <jirislaby@gmail.com>
Date:   Mon May 19 15:50:01 2008 +0200

    modpost: add support for hid
    
    Generate aliases for hid device modules to support autoloading.
    
    Signed-off-by: Jiri Slaby <jirislaby@gmail.com>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>

diff --git a/include/linux/hid.h b/include/linux/hid.h
index ac4e678a04ed..b7a17762a0b2 100644
--- a/include/linux/hid.h
+++ b/include/linux/hid.h
@@ -67,6 +67,7 @@
 #include <linux/types.h>
 #include <linux/slab.h>
 #include <linux/list.h>
+#include <linux/mod_devicetable.h> /* hid_device_id */
 #include <linux/timer.h>
 #include <linux/workqueue.h>
 #include <linux/input.h>

commit f472f80034ae5d0be7d7196c7e65d0ca8890afb4
Author: Rafi Rubin <rafi@seas.upenn.edu>
Date:   Thu Jun 19 11:51:04 2008 +0200

    HID: add n-trig digitizer usage
    
    This adds a hid usage that is reported by the N-Trig digitizer in the Dell
    Latitude XT screen.
    
    Signed-off-by: Rafi Rubin <rafi@seas.upenn.edu>
    Signed-off-by: Vojtech Pavlik <vojtech@suse.cz>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>

diff --git a/include/linux/hid.h b/include/linux/hid.h
index fe56b86f2c67..ac4e678a04ed 100644
--- a/include/linux/hid.h
+++ b/include/linux/hid.h
@@ -512,7 +512,7 @@ struct hid_descriptor {
 
 /* Applications from HID Usage Tables 4/8/99 Version 1.1 */
 /* We ignore a few input applications that are not widely used */
-#define IS_INPUT_APPLICATION(a) (((a >= 0x00010000) && (a <= 0x00010008)) || (a == 0x00010080) || (a == 0x000c0001))
+#define IS_INPUT_APPLICATION(a) (((a >= 0x00010000) && (a <= 0x00010008)) || (a == 0x00010080) || (a == 0x000c0001) || (a == 0x000d0002))
 
 /* HID core API */
 

commit f8dea7a3d47ee7c857965b22e33229e7de410a88
Author: Adrian Bunk <bunk@kernel.org>
Date:   Tue May 20 01:31:25 2008 +0200

    HID: remove CVS keywords
    
    This patch removes CVS keywords that weren't updated for a long time
    from comments.
    
    Signed-off-by: Adrian Bunk <bunk@kernel.org>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>

diff --git a/include/linux/hid.h b/include/linux/hid.h
index 6fc10d19d14d..fe56b86f2c67 100644
--- a/include/linux/hid.h
+++ b/include/linux/hid.h
@@ -2,8 +2,6 @@
 #define __HID_H
 
 /*
- * $Id: hid.h,v 1.24 2001/12/27 10:37:41 vojtech Exp $
- *
  *  Copyright (c) 1999 Andreas Gal
  *  Copyright (c) 2000-2001 Vojtech Pavlik
  *  Copyright (c) 2006-2007 Jiri Kosina

commit 6e7045990f35ef9250804b3fd85e855b8c2aaeb6
Author: Diego 'Flameeyes' Petteno <flameeyes@gmail.com>
Date:   Mon May 5 16:20:50 2008 +0200

    HID: split Numlock emulation quirk from HID_QUIRK_APPLE_HAS_FN.
    
    Since 2.6.25 the HID_QUIRK_APPLE_HAS_FN quirk is enabled even for
    non-laptop Apple keyboards of the Aluminium series. The USB version of
    these don't need Numlock emulation, like the laptop (and Aluminium
    Wireless) do, as they have a proper keypad.
    
    This patch splits the Numlock emulation for Apple keyboards in a
    different quirk flag, so that it can be enabled for all the keyboards
    but the Aluminium USB ones.
    
    If the Numlock emulation is enabled for Aluminium USB keyboards, the
    JKL and UIO keys become the numeric pad, and the rest of the keyboard
    is disabled, included the key used to disable Numlock.
    
    Additionally, these keyboard should not have a Numlock at all, as the
    Numlock key is instead replaced by the 'Clear' key as usual for Apple
    USB keyboards.
    
    Signed-off-by: Diego 'Flameeyes' Petteno <flameeyes@gmail.com>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>

diff --git a/include/linux/hid.h b/include/linux/hid.h
index 4ce3b7a979ba..6fc10d19d14d 100644
--- a/include/linux/hid.h
+++ b/include/linux/hid.h
@@ -285,6 +285,7 @@ struct hid_item {
 #define HID_QUIRK_HWHEEL_WHEEL_INVERT		0x04000000
 #define HID_QUIRK_MICROSOFT_KEYS		0x08000000
 #define HID_QUIRK_FULLSPEED_INTERVAL		0x10000000
+#define HID_QUIRK_APPLE_NUMLOCK_EMULATION	0x20000000
 
 /*
  * Separate quirks for runtime report descriptor fixup

commit 01d7b369887b6feb7c9ce2b20988fafe3f70841c
Author: Al Viro <viro@ftp.linux.org.uk>
Date:   Mon Apr 28 07:00:05 2008 +0100

    usbhid endianness annotations and fixes
    
    usb_control_msg() converts arguments to little-endian itself,
    doing that in caller means breakage on big-endian boxen.
    
    Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

diff --git a/include/linux/hid.h b/include/linux/hid.h
index d951ec411241..4ce3b7a979ba 100644
--- a/include/linux/hid.h
+++ b/include/linux/hid.h
@@ -498,13 +498,13 @@ struct hid_parser {
 
 struct hid_class_descriptor {
 	__u8  bDescriptorType;
-	__u16 wDescriptorLength;
+	__le16 wDescriptorLength;
 } __attribute__ ((packed));
 
 struct hid_descriptor {
 	__u8  bLength;
 	__u8  bDescriptorType;
-	__u16 bcdHID;
+	__le16 bcdHID;
 	__u8  bCountryCode;
 	__u8  bNumDescriptors;
 

commit 69626f23bce6521367ac1e6a2a6e8fba8f0a848a
Author: Oliver Neukum <oliver@neukum.org>
Date:   Mon Mar 31 16:27:30 2008 +0200

    HID: fix race between open() and disconnect() in usbhid
    
    There is a window:
    
    task A                                  task B
    spin_lock_irq(&usbhid->inlock); /* Sync with error handler */
    usb_set_intfdata(intf, NULL);
    spin_unlock_irq(&usbhid->inlock);
    usb_kill_urb(usbhid->urbin);
    usb_kill_urb(usbhid->urbout);
    usb_kill_urb(usbhid->urbctrl);
    
    del_timer_sync(&usbhid->io_retry);
    cancel_work_sync(&usbhid->reset_work);
    
                                                    if (!hid->open++) {
                                                            res = usb_autopm_get_interface(usbhid->intf);
                                                            if (res < 0) {
                                                                    hid->open--;
                                                                    return -EIO;
                                                            }
                                                    }
                                                    if (hid_start_in(hid))
    
    if (hid->claimed & HID_CLAIMED_INPUT)
            hidinput_disconnect(hid);
    
    in which an open() to an already disconnected device will submit an URB
    to an undead device. In case disconnect() was called by an ioctl, this'll
    oops. Fix by introducing a new flag and checking it in hid_start_in().
    
    Signed-off-by: Oliver Neukum <oneukum@suse.de>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>

diff --git a/include/linux/hid.h b/include/linux/hid.h
index fe4ac31eced2..d951ec411241 100644
--- a/include/linux/hid.h
+++ b/include/linux/hid.h
@@ -424,6 +424,7 @@ struct hid_control_fifo {
 #define HID_RESET_PENDING	4
 #define HID_SUSPENDED		5
 #define HID_CLEAR_HALT		6
+#define HID_DISCONNECTED	7
 
 struct hid_input {
 	struct list_head list;

commit abdff0f7749a6696ba2a4238b675cbc55abcdb7a
Author: Adrian Bunk <bunk@kernel.org>
Date:   Mon Mar 31 01:53:56 2008 +0200

    HID: make hid_input_field and usbhid_modify_dquirk static
    
    This patch makes the following needlessly global functions static:
    - hid-core.c:hid_input_field()
    - usbhid/hid-quirks.c:usbhid_modify_dquirk()
    
    Signed-off-by: Adrian Bunk <bunk@kernel.org>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>

diff --git a/include/linux/hid.h b/include/linux/hid.h
index cd526af12d7b..fe4ac31eced2 100644
--- a/include/linux/hid.h
+++ b/include/linux/hid.h
@@ -531,14 +531,12 @@ int hidinput_find_field(struct hid_device *hid, unsigned int type, unsigned int
 int hidinput_mapping_quirks(struct hid_usage *, struct input_dev *, unsigned long **, int *);
 int hidinput_event_quirks(struct hid_device *, struct hid_field *, struct hid_usage *, __s32);
 int hidinput_apple_event(struct hid_device *, struct input_dev *, struct hid_usage *, __s32);
-void hid_input_field(struct hid_device *hid, struct hid_field *field, __u8 *data, int interrupt);
 void hid_output_report(struct hid_report *report, __u8 *data);
 void hid_free_device(struct hid_device *device);
 struct hid_device *hid_parse_report(__u8 *start, unsigned size);
 
 /* HID quirks API */
 u32 usbhid_lookup_quirk(const u16 idVendor, const u16 idProduct);
-int usbhid_modify_dquirk(const u16 idVendor, const u16 idProduct, const u32 quirks);
 int usbhid_quirks_init(char **quirks_param);
 void usbhid_quirks_exit(void);
 void usbhid_fixup_report_descriptor(const u16, const u16, char *, unsigned, char **);

commit c17f9c901c4e62cbf857b831bcc3070380449b88
Author: Anssi Hannula <anssi.hannula@gmail.com>
Date:   Tue Apr 1 01:51:11 2008 +0200

    HID: force feedback driver for Logitech Rumblepad 2
    
    Add force feedback support for Logitech Rumblepad 2.
    
    Tested-By: Edgar Simo <bobbens@gmail.com>
    Signed-off-by: Anssi Hannula <anssi.hannula@gmail.com>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>

diff --git a/include/linux/hid.h b/include/linux/hid.h
index 9db600f72e2a..cd526af12d7b 100644
--- a/include/linux/hid.h
+++ b/include/linux/hid.h
@@ -547,6 +547,7 @@ void usbhid_fixup_report_descriptor(const u16, const u16, char *, unsigned, char
 int hid_ff_init(struct hid_device *hid);
 
 int hid_lgff_init(struct hid_device *hid);
+int hid_lg2ff_init(struct hid_device *hid);
 int hid_plff_init(struct hid_device *hid);
 int hid_tmff_init(struct hid_device *hid);
 int hid_zpff_init(struct hid_device *hid);

commit 1d1bdd20008416a744c0c844e231e7ba69c11699
Author: Jiri Slaby <jirislaby@gmail.com>
Date:   Wed Mar 19 21:55:04 2008 +0100

    HID: move wait from hid to usbhid
    
    Since only place where this is used is usbhid, move it there.
    
    Signed-off-by: Jiri Slaby <jslaby@suse.cz>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>

diff --git a/include/linux/hid.h b/include/linux/hid.h
index 69ba58434dcb..9db600f72e2a 100644
--- a/include/linux/hid.h
+++ b/include/linux/hid.h
@@ -455,8 +455,6 @@ struct hid_device {							/* device report descriptor */
 	void *hidraw;
 	int minor;							/* Hiddev minor number */
 
-	wait_queue_head_t wait;						/* For sleeping */
-
 	int open;							/* is the device open by anyone? */
 	char name[128];							/* Device name */
 	char phys[64];							/* Device physical location */

commit 1b184cf37f5cf098f07725b483a2055e95725476
Author: Jiri Slaby <jirislaby@gmail.com>
Date:   Sun Mar 9 16:29:24 2008 +0100

    HID: make function from dbg_hid
    
    To check paramters even if debug is disabled, convert dbg_hid
    to inline function with __attribute__(format) checking.
    
    Signed-off-by: Jiri Slaby <jirislaby@gmail.com>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>

diff --git a/include/linux/hid.h b/include/linux/hid.h
index 5bf6282f1635..69ba58434dcb 100644
--- a/include/linux/hid.h
+++ b/include/linux/hid.h
@@ -569,7 +569,11 @@ static inline int hid_ff_init(struct hid_device *hid) { return -1; }
 #define dbg_hid_line(format, arg...) if (hid_debug) \
 				printk(format, ## arg)
 #else
-#define dbg_hid(format, arg...) do {} while (0)
+static inline int __attribute__((format(printf, 1, 2)))
+dbg_hid(const char *fmt, ...)
+{
+	return 0;
+}
 #define dbg_hid_line dbg_hid
 #endif
 

commit 5f1ab74f650b392ebcaa7cf3283e56d8dc6c7e56
Author: Jiri Kosina <jkosina@suse.cz>
Date:   Fri Mar 14 16:53:07 2008 +0100

    HID: Sunplus Wireless Desktop needs report descriptor fixup
    
    This device has reports lower logical maximum compared to the real
    usages for Zoom+ and Zoom- it emits.
    
    This patch bumps the values in the report descriptor up, and also
    adjusts HID_MAX_USAGE accordingly.
    
    Reported-by: Khelben Blackstaff <eye.of.the.8eholder@gmail.com>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>

diff --git a/include/linux/hid.h b/include/linux/hid.h
index e9701f22d423..5bf6282f1635 100644
--- a/include/linux/hid.h
+++ b/include/linux/hid.h
@@ -298,6 +298,7 @@ struct hid_item {
 #define HID_QUIRK_RDESC_BUTTON_CONSUMER		0x00000020
 #define HID_QUIRK_RDESC_SAMSUNG_REMOTE		0x00000040
 #define HID_QUIRK_RDESC_MICROSOFT_RECV_1028	0x00000080
+#define HID_QUIRK_RDESC_SUNPLUS_WDESKTOP	0x00000100
 
 /*
  * This is the global environment of the parser. This information is
@@ -322,7 +323,7 @@ struct hid_global {
  * This is the local environment. It is persistent up the next main-item.
  */
 
-#define HID_MAX_USAGES			8192
+#define HID_MAX_USAGES			12288
 #define HID_DEFAULT_NUM_COLLECTIONS	16
 
 struct hid_local {

commit 974faac46455076c709a745f546b348017ad18dc
Author: Jim Duchek <jim.duchek@gmail.com>
Date:   Fri Mar 14 15:53:49 2008 +0100

    HID: quirk for MS Wireless Desktop Receiver (model 1028)
    
    Microsoft's wireless desktop receiver (Model 1028) has a bug in the report
    descriptor -- namely, in four seperate places it uses USAGE_MIN and _MAX when
    it quite obviously doesn't intend to.
    
    In other words, it reports that it has pretty much _everything_ in 'consumer'
    and 'generic desktop'.  And then the X evdev driver believes I have a mouse
    with 36 absolute axes and a huge pile of keys and buttons, when I in fact,
    should have zero.  255/256 in three of the cases, and 0-1024 in another.
    
    This patch fixes the report descriptor of this device before it enters the HID
    parser.
    
    Signed-off-by: Jim Duchek <jim.duchek@gmail.com>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>

diff --git a/include/linux/hid.h b/include/linux/hid.h
index af1f7e57a12d..e9701f22d423 100644
--- a/include/linux/hid.h
+++ b/include/linux/hid.h
@@ -297,6 +297,7 @@ struct hid_item {
 #define HID_QUIRK_RDESC_MACBOOK_JIS		0x00000010
 #define HID_QUIRK_RDESC_BUTTON_CONSUMER		0x00000020
 #define HID_QUIRK_RDESC_SAMSUNG_REMOTE		0x00000040
+#define HID_QUIRK_RDESC_MICROSOFT_RECV_1028	0x00000080
 
 /*
  * This is the global environment of the parser. This information is

commit f345c37c37641beceb0e52f61bb4cbc72904ee09
Author: Pekka Sarnila <sarnila@adit.fi>
Date:   Thu Mar 6 13:23:14 2008 +0100

    HID: fixup fullspeed interval on highspeed Afatech DVB-T IR kbd
    
    Many vendors highspeed devices give erroneously fullspeed interval value in
    endpoint descriptor for interrupt endpoints. This quirk fixes up that by
    recalculating the right value for highspeed device.
    
    At the time of hid configuration this quirk calculates which highspeed interval
    value gives same interval delay as, or next smaller then, what it would be if
    the original value would be interpreted as fullspeed value. In subsequent urbs
    that new value is used instead.
    
    Forming the 'hid->name' in usb_hid_config() was moved up to accommodate more
    descriptive printk reporting the fixup.
    
    In this patch the quirk is set for one such device: Afatech DVB-T 2 infrared
    HID-keyboard. It reports value 16 which means 4,069s in highspeed while
    obviously 16ms was intended. In this case quirk calculates new value to be 8
    which gives when interpreted as highspeed value 16ms as wanted. The behavior of
    the device was verified to be what expected both before and after the patch.
    
    Signed-off-by: Pekka Sarnila <sarnila@adit.fi>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>

diff --git a/include/linux/hid.h b/include/linux/hid.h
index 74ff57596eb1..af1f7e57a12d 100644
--- a/include/linux/hid.h
+++ b/include/linux/hid.h
@@ -284,6 +284,7 @@ struct hid_item {
 #define HID_QUIRK_2WHEEL_MOUSE_HACK_B8		0x02000000
 #define HID_QUIRK_HWHEEL_WHEEL_INVERT		0x04000000
 #define HID_QUIRK_MICROSOFT_KEYS		0x08000000
+#define HID_QUIRK_FULLSPEED_INTERVAL		0x10000000
 
 /*
  * Separate quirks for runtime report descriptor fixup

commit 68a1f2cc8676f22a6fd49f344f99e326eb7f5117
Author: Jiri Kosina <jkosina@suse.cz>
Date:   Thu Feb 7 16:48:46 2008 +0100

    HID: fix processing of event quirks
    
    The old code (before move) stopped further processing of the
    event after it has been already processed by the quirk handler.
    
    The new code didn't propagate the return value properly, and
    therefore the processing always proceeded, which was wrong.
    
    This patch fixes it. Pointed out in kernel.org bugzilla #9842
    
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>

diff --git a/include/linux/hid.h b/include/linux/hid.h
index 3902690647b0..74ff57596eb1 100644
--- a/include/linux/hid.h
+++ b/include/linux/hid.h
@@ -528,7 +528,7 @@ int hid_set_field(struct hid_field *, unsigned, __s32);
 int hid_input_report(struct hid_device *, int type, u8 *, int, int);
 int hidinput_find_field(struct hid_device *hid, unsigned int type, unsigned int code, struct hid_field **field);
 int hidinput_mapping_quirks(struct hid_usage *, struct input_dev *, unsigned long **, int *);
-void hidinput_event_quirks(struct hid_device *, struct hid_field *, struct hid_usage *, __s32);
+int hidinput_event_quirks(struct hid_device *, struct hid_field *, struct hid_usage *, __s32);
 int hidinput_apple_event(struct hid_device *, struct input_dev *, struct hid_usage *, __s32);
 void hid_input_field(struct hid_device *hid, struct hid_field *field, __u8 *data, int interrupt);
 void hid_output_report(struct hid_report *report, __u8 *data);

commit fe56caa97e626cc6d6e18adbd5ccd1a9aa9a4fcf
Author: Robert Schedel <r.schedel@yahoo.de>
Date:   Wed Dec 26 00:57:40 2007 +0100

    HID: Support Samsung IR remote
    
    Samsung USB remotes (0419:0001) are rejected by kernel 2.6.23, because the
    report descriptor from the remote contains a 48 bit HID report field. HID 1.11
    states: Fields may span at most 4 bytes.
    
    This patch, based on 2.6.23, fixes this by modifying the internal report
    descriptor in hid-quirks.c. Additional user space support (e.g. LIRC) is
    required to fetch the information from the hiddev interface.
    
    The burden to reconstruct the data is moved into userspace (lirc through hiddev).
    There is no need to set HID_QUIRK_HIDDEV quirk, as the device has also output
    applications, which trigger the creation of hiddev device automatically.
    
    Signed-off-by: Robert Schedel <r.schedel@yahoo.de>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>

diff --git a/include/linux/hid.h b/include/linux/hid.h
index 6a70b788ee9c..3902690647b0 100644
--- a/include/linux/hid.h
+++ b/include/linux/hid.h
@@ -295,6 +295,7 @@ struct hid_item {
 #define HID_QUIRK_RDESC_PETALYNX		0x00000008
 #define HID_QUIRK_RDESC_MACBOOK_JIS		0x00000010
 #define HID_QUIRK_RDESC_BUTTON_CONSUMER		0x00000020
+#define HID_QUIRK_RDESC_SAMSUNG_REMOTE		0x00000040
 
 /*
  * This is the global environment of the parser. This information is

commit 70d215c4a7dfbddc138a2dd726d8f80f3e6d2622
Author: Fengguang Wu <wfg@mail.ustc.edu.cn>
Date:   Fri Dec 7 16:35:14 2007 +0800

    HID: the `bit' in hidinput_mapping_quirks() is an out parameter
    
    Fix a panic, by changing
            hidinput_mapping_quirks(,, unsigned long *bit,)
    to
            hidinput_mapping_quirks(,, unsigned long **bit,)
    
    The `bit' in this function is an out parameter.
    
    Signed-off-by: Fengguang Wu <wfg@mail.ustc.edu.cn>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>

diff --git a/include/linux/hid.h b/include/linux/hid.h
index 24f04cd742de..6a70b788ee9c 100644
--- a/include/linux/hid.h
+++ b/include/linux/hid.h
@@ -526,7 +526,7 @@ extern void hidinput_disconnect(struct hid_device *);
 int hid_set_field(struct hid_field *, unsigned, __s32);
 int hid_input_report(struct hid_device *, int type, u8 *, int, int);
 int hidinput_find_field(struct hid_device *hid, unsigned int type, unsigned int code, struct hid_field **field);
-int hidinput_mapping_quirks(struct hid_usage *, struct input_dev *, unsigned long *, int *);
+int hidinput_mapping_quirks(struct hid_usage *, struct input_dev *, unsigned long **, int *);
 void hidinput_event_quirks(struct hid_device *, struct hid_field *, struct hid_usage *, __s32);
 int hidinput_apple_event(struct hid_device *, struct input_dev *, struct hid_usage *, __s32);
 void hid_input_field(struct hid_device *hid, struct hid_field *field, __u8 *data, int interrupt);

commit 628edcde87592a7ac6e72b555bb03ea265bcfbd2
Author: Jiri Kosina <jkosina@suse.cz>
Date:   Mon Nov 26 13:26:33 2007 +0100

    HID: proper handling of MS 4k and 6k devices
    
    This removes ugly macros IS_* to distinguish devices that
    need special handling in hid-input, and establish proper
    quirks for them.
    
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>

diff --git a/include/linux/hid.h b/include/linux/hid.h
index 33ec33389b37..24f04cd742de 100644
--- a/include/linux/hid.h
+++ b/include/linux/hid.h
@@ -283,6 +283,7 @@ struct hid_item {
 #define HID_QUIRK_IGNORE_HIDINPUT		0x01000000
 #define HID_QUIRK_2WHEEL_MOUSE_HACK_B8		0x02000000
 #define HID_QUIRK_HWHEEL_WHEEL_INVERT		0x04000000
+#define HID_QUIRK_MICROSOFT_KEYS		0x08000000
 
 /*
  * Separate quirks for runtime report descriptor fixup

commit 36ccaad640737899b069a9a93a82765f0e675a20
Author: Jiri Kosina <jkosina@suse.cz>
Date:   Mon Nov 26 13:18:00 2007 +0100

    HID: hid-input quirk for BTC 8193
    
    BTC 8193 keyboard handles its scrollwheel in very non-standard way.
    It produces two non-standard usages for scrolling up and down, in
    both cases with postive value equaling to 1. We handle this by temporary
    mapping, which we then catch in quirk event handler, and remap to
    negative HWHEEL even in order to introduce correct behavior.
    
    Also the button requires special mapping, as it triggers standard-violating
    usage code.
    
    Reported in kernel.org bugzilla #9385
    
    Reported-by: Kir Kolyshkin <kir@sacred.ru>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>

diff --git a/include/linux/hid.h b/include/linux/hid.h
index dca5804836f3..33ec33389b37 100644
--- a/include/linux/hid.h
+++ b/include/linux/hid.h
@@ -282,6 +282,7 @@ struct hid_item {
 #define HID_QUIRK_LOGITECH_EXPANDED_KEYMAP	0x00800000
 #define HID_QUIRK_IGNORE_HIDINPUT		0x01000000
 #define HID_QUIRK_2WHEEL_MOUSE_HACK_B8		0x02000000
+#define HID_QUIRK_HWHEEL_WHEEL_INVERT		0x04000000
 
 /*
  * Separate quirks for runtime report descriptor fixup

commit 87bc2aa9933afc032a93490e1642918121e7470b
Author: Jiri Kosina <jkosina@suse.cz>
Date:   Fri Nov 23 13:16:02 2007 +0100

    HID: separate hid-input event quirks from generic code
    
    This patch separates also the hid-input quirks that have to be
    applied at the time the event occurs, so that the generic code
    handling HUT-compliant devices is not messed up by them too much.
    
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>

diff --git a/include/linux/hid.h b/include/linux/hid.h
index cd5d562b1b7c..dca5804836f3 100644
--- a/include/linux/hid.h
+++ b/include/linux/hid.h
@@ -525,6 +525,8 @@ int hid_set_field(struct hid_field *, unsigned, __s32);
 int hid_input_report(struct hid_device *, int type, u8 *, int, int);
 int hidinput_find_field(struct hid_device *hid, unsigned int type, unsigned int code, struct hid_field **field);
 int hidinput_mapping_quirks(struct hid_usage *, struct input_dev *, unsigned long *, int *);
+void hidinput_event_quirks(struct hid_device *, struct hid_field *, struct hid_usage *, __s32);
+int hidinput_apple_event(struct hid_device *, struct input_dev *, struct hid_usage *, __s32);
 void hid_input_field(struct hid_device *hid, struct hid_field *field, __u8 *data, int interrupt);
 void hid_output_report(struct hid_report *report, __u8 *data);
 void hid_free_device(struct hid_device *device);

commit 10bd065facb2594bd508597ef464d401b212f379
Author: Jiri Kosina <jkosina@suse.cz>
Date:   Thu Nov 22 15:18:18 2007 +0100

    HID: refactor mapping to input subsystem for quirky devices
    
    Currently, the handling of mapping between hid and input for devices
    that don't conform to HUT 1.12 specification is very messy -- no per-device
    handling, no blacklists, conditions on idVendor and idProduct placed
    all over the code.
    
    This patch moves all the device-specific input mapping to a separate
    file, and introduces a blacklist-style handling for non-standard
    device-specific mappings.
    
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>

diff --git a/include/linux/hid.h b/include/linux/hid.h
index c67eeb516040..cd5d562b1b7c 100644
--- a/include/linux/hid.h
+++ b/include/linux/hid.h
@@ -524,6 +524,7 @@ extern void hidinput_disconnect(struct hid_device *);
 int hid_set_field(struct hid_field *, unsigned, __s32);
 int hid_input_report(struct hid_device *, int type, u8 *, int, int);
 int hidinput_find_field(struct hid_device *hid, unsigned int type, unsigned int code, struct hid_field **field);
+int hidinput_mapping_quirks(struct hid_usage *, struct input_dev *, unsigned long *, int *);
 void hid_input_field(struct hid_device *hid, struct hid_field *field, __u8 *data, int interrupt);
 void hid_output_report(struct hid_report *report, __u8 *data);
 void hid_free_device(struct hid_device *device);

commit af9e0eacdc072ba28fd139b90de27023d9cb0598
Author: Jiri Kosina <jkosina@suse.cz>
Date:   Wed Nov 14 12:13:26 2007 +0100

    HID: add full support for Genius KB-29E
    
    Genius KB-29E has broken report descriptor, which causes some of the
    Consumer usages to appear incorrectly as Button usages. We fix it by
    fixing the report descriptor before it is being parsed.
    
    Also a few of the keys violate the HUT standard, so they need a special
    handling. They currently fall into "Reserved" range as per HUT 1.12.
    
    Reported-by: Szekeres Istvan <szekeres@iii.hu>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>

diff --git a/include/linux/hid.h b/include/linux/hid.h
index 991bbcdc1ca7..c67eeb516040 100644
--- a/include/linux/hid.h
+++ b/include/linux/hid.h
@@ -292,6 +292,7 @@ struct hid_item {
 #define HID_QUIRK_RDESC_SWAPPED_MIN_MAX		0x00000004
 #define HID_QUIRK_RDESC_PETALYNX		0x00000008
 #define HID_QUIRK_RDESC_MACBOOK_JIS		0x00000010
+#define HID_QUIRK_RDESC_BUTTON_CONSUMER		0x00000020
 
 /*
  * This is the global environment of the parser. This information is

commit c80e5ffac0579499ca28444155118ffcdd9b8d7e
Author: Pavel Troller <patrol@sinus.cz>
Date:   Mon Oct 29 11:13:46 2007 +0100

    HID: Implement horizontal wheel handling for A4 Tech X5-005D
    
    This mouse distinguishes horizontal wheel from vertical by a special "pseudo
    event" GenericDesktop.00b8, with values of 0 for vertical and 8 for horizontal
    wheel. Because this event is supplied by the parser too late, we need to delay
    a wheel event, wait for this one and send either REL_WHEEL or REL_HWHEEL to
    input depending on the event value.
    
    Signed-off-by: Pavel Troller <patrol@sinus.cz>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>

diff --git a/include/linux/hid.h b/include/linux/hid.h
index 833f2af8aab9..991bbcdc1ca7 100644
--- a/include/linux/hid.h
+++ b/include/linux/hid.h
@@ -281,6 +281,7 @@ struct hid_item {
 #define HID_QUIRK_LOGITECH_IGNORE_DOUBLED_WHEEL	0x00400000
 #define HID_QUIRK_LOGITECH_EXPANDED_KEYMAP	0x00800000
 #define HID_QUIRK_IGNORE_HIDINPUT		0x01000000
+#define HID_QUIRK_2WHEEL_MOUSE_HACK_B8		0x02000000
 
 /*
  * Separate quirks for runtime report descriptor fixup
@@ -456,6 +457,8 @@ struct hid_device {							/* device report descriptor */
 
 	void *driver_data;
 
+	__s32 delayed_value;						/* For A4 Tech mice hwheel quirk */
+
 	/* device-specific function pointers */
 	int (*hidinput_input_event) (struct input_dev *, unsigned int, unsigned int, int);
 	int (*hid_open) (struct hid_device *);

commit 81e1a875505f2963f4d22f7e7ade39d764755f9b
Author: Michel Daenzer <michel@tungstengraphics.com>
Date:   Wed Oct 24 16:30:34 2007 +0200

    HID: Rename some code identifiers from PowerBook specific to Apple generic
    
    Preserve identifiers exposed in build and run time configuration though in
    order not to break existing configurations.
    
    This is in preparation for adding support for Apple aluminum USB keyboards.
    
    Signed-off-by: Michel Daenzer <michel@tungstengraphics.com>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>

diff --git a/include/linux/hid.h b/include/linux/hid.h
index 6e35b92b1d2c..833f2af8aab9 100644
--- a/include/linux/hid.h
+++ b/include/linux/hid.h
@@ -267,10 +267,10 @@ struct hid_item {
 #define HID_QUIRK_2WHEEL_MOUSE_HACK_5		0x00000100
 #define HID_QUIRK_2WHEEL_MOUSE_HACK_ON		0x00000200
 #define HID_QUIRK_MIGHTYMOUSE			0x00000400
-#define HID_QUIRK_POWERBOOK_HAS_FN		0x00000800
-#define HID_QUIRK_POWERBOOK_FN_ON		0x00001000
+#define HID_QUIRK_APPLE_HAS_FN			0x00000800
+#define HID_QUIRK_APPLE_FN_ON			0x00001000
 #define HID_QUIRK_INVERT_HWHEEL			0x00002000
-#define HID_QUIRK_POWERBOOK_ISO_KEYBOARD        0x00004000
+#define HID_QUIRK_APPLE_ISO_KEYBOARD		0x00004000
 #define HID_QUIRK_BAD_RELATIVE_KEYS		0x00008000
 #define HID_QUIRK_SKIP_OUTPUT_REPORTS		0x00010000
 #define HID_QUIRK_IGNORE_MOUSE			0x00020000
@@ -469,7 +469,7 @@ struct hid_device {							/* device report descriptor */
 	/* handler for raw output data, used by hidraw */
 	int (*hid_output_raw_report) (struct hid_device *, __u8 *, size_t);
 #ifdef CONFIG_USB_HIDINPUT_POWERBOOK
-	unsigned long pb_pressed_fn[BITS_TO_LONGS(KEY_CNT)];
+	unsigned long apple_pressed_fn[BITS_TO_LONGS(KEY_CNT)];
 	unsigned long pb_pressed_numlock[BITS_TO_LONGS(KEY_CNT)];
 #endif
 };

commit 7b19ada2ed3c1eccb9fe94d74b05e1428224663d
Author: Jiri Slaby <jirislaby@gmail.com>
Date:   Thu Oct 18 23:40:32 2007 -0700

    get rid of input BIT* duplicate defines
    
    get rid of input BIT* duplicate defines
    
    use newly global defined macros for input layer. Also remove includes of
    input.h from non-input sources only for BIT macro definiton. Define the
    macro temporarily in local manner, all those local definitons will be
    removed further in this patchset (to not break bisecting).
    BIT macro will be globally defined (1<<x)
    
    Signed-off-by: Jiri Slaby <jirislaby@gmail.com>
    Cc: <dtor@mail.ru>
    Acked-by: Jiri Kosina <jkosina@suse.cz>
    Cc: <lenb@kernel.org>
    Acked-by: Marcel Holtmann <marcel@holtmann.org>
    Cc: <perex@suse.cz>
    Acked-by: Mauro Carvalho Chehab <mchehab@infradead.org>
    Cc: <vernux@us.ibm.com>
    Cc: <malattia@linux.it>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

diff --git a/include/linux/hid.h b/include/linux/hid.h
index edb8024d744b..6e35b92b1d2c 100644
--- a/include/linux/hid.h
+++ b/include/linux/hid.h
@@ -469,8 +469,8 @@ struct hid_device {							/* device report descriptor */
 	/* handler for raw output data, used by hidraw */
 	int (*hid_output_raw_report) (struct hid_device *, __u8 *, size_t);
 #ifdef CONFIG_USB_HIDINPUT_POWERBOOK
-	unsigned long pb_pressed_fn[NBITS(KEY_MAX)];
-	unsigned long pb_pressed_numlock[NBITS(KEY_MAX)];
+	unsigned long pb_pressed_fn[BITS_TO_LONGS(KEY_CNT)];
+	unsigned long pb_pressed_numlock[BITS_TO_LONGS(KEY_CNT)];
 #endif
 };
 

commit 57d292bd7e6e72898e533687af481603597b1ca7
Author: Jiri Kosina <jkosina@suse.cz>
Date:   Mon Oct 15 15:17:41 2007 +0200

    HID: fix HIDIOCGRDESC memory access in hidraw
    
    Fix bogus copying of data into userspace when HIDIOCGRDESC is issued.
    HID-transport layer makes sure that dev->hid->rdesc is not larger than
    HID_MAX_DESCRIPTOR_SIZE.
    
    Noticed-by: Al Viro <viro@ftp.linux.org.uk>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

diff --git a/include/linux/hid.h b/include/linux/hid.h
index 55e51f9f76cb..edb8024d744b 100644
--- a/include/linux/hid.h
+++ b/include/linux/hid.h
@@ -29,13 +29,6 @@
  * Vojtech Pavlik, Simunkova 1594, Prague 8, 182 00 Czech Republic
  */
 
-#include <linux/types.h>
-#include <linux/slab.h>
-#include <linux/list.h>
-#include <linux/timer.h>
-#include <linux/workqueue.h>
-#include <linux/input.h>
-
 /*
  * USB HID (Human Interface Device) interface class code
  */
@@ -69,6 +62,17 @@
 #define HID_DT_REPORT			(USB_TYPE_CLASS | 0x02)
 #define HID_DT_PHYSICAL			(USB_TYPE_CLASS | 0x03)
 
+#define HID_MAX_DESCRIPTOR_SIZE		4096
+
+#ifdef __KERNEL__
+
+#include <linux/types.h>
+#include <linux/slab.h>
+#include <linux/list.h>
+#include <linux/timer.h>
+#include <linux/workqueue.h>
+#include <linux/input.h>
+
 /*
  * We parse each description item into this structure. Short items data
  * values are expanded to 32-bit signed int, long items contain a pointer
@@ -311,7 +315,6 @@ struct hid_global {
  * This is the local environment. It is persistent up the next main-item.
  */
 
-#define HID_MAX_DESCRIPTOR_SIZE		4096
 #define HID_MAX_USAGES			8192
 #define HID_DEFAULT_NUM_COLLECTIONS	16
 
@@ -560,4 +563,5 @@ static inline int hid_ff_init(struct hid_device *hid) { return -1; }
 #define err_hid(format, arg...) printk(KERN_ERR "%s: " format "\n" , \
 		__FILE__ , ## arg)
 #endif
+#endif
 

commit d057fd4cb892087955568a139d15eae4115a0174
Merge: bb6c8d8fa9b5 709d27c04f4e
Author: Jiri Kosina <jkosina@suse.cz>
Date:   Sun Oct 14 14:47:56 2007 +0200

    Merge branch 'hidraw' into for-linus

commit 86166b7bcda0bcb53525114fa1c87ac432be478e
Author: Jiri Kosina <jkosina@suse.cz>
Date:   Mon May 14 09:57:40 2007 +0200

    HID: add hidraw interface
    
    hidraw is an interface that is going to obsolete hiddev one
    day.
    
    Many userland applications are using libusb instead of using
    kernel-provided hiddev interface. This is caused by various
    reasons - the HID parser in kernel doesn't handle all the
    HID hardware on the planet properly, some devices might require
    its own specific quirks/drivers, etc.
    
    hiddev interface tries to do its best to parse all the received
    reports properly, and presents only parsed usages into userspace.
    This is however often not enough, and that's the reason why
    many userland applications just don't use hiddev at all, and
    rather use libusb to read raw USB events and process them on
    their own.
    
    Another drawback of hiddev is that it is USB-specific.
    
    hidraw interface provides userspace readers with really raw HID
    reports, no matter what the low-level transport layer is (USB/BT),
    and gives the userland applications all the freedom to process
    the HID reports in a way they wish to.
    
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>

diff --git a/include/linux/hid.h b/include/linux/hid.h
index 898103b401f1..0ac2b5260b26 100644
--- a/include/linux/hid.h
+++ b/include/linux/hid.h
@@ -403,6 +403,7 @@ struct hid_control_fifo {
 
 #define HID_CLAIMED_INPUT	1
 #define HID_CLAIMED_HIDDEV	2
+#define HID_CLAIMED_HIDRAW	4
 
 #define HID_CTRL_RUNNING	1
 #define HID_OUT_RUNNING		2
@@ -438,6 +439,7 @@ struct hid_device {							/* device report descriptor */
 
 	struct list_head inputs;					/* The list of inputs */
 	void *hiddev;							/* The hiddev structure */
+	void *hidraw;
 	int minor;							/* Hiddev minor number */
 
 	wait_queue_head_t wait;						/* For sleeping */
@@ -458,6 +460,9 @@ struct hid_device {							/* device report descriptor */
 	void (*hiddev_hid_event) (struct hid_device *, struct hid_field *field,
 				  struct hid_usage *, __s32);
 	void (*hiddev_report_event) (struct hid_device *, struct hid_report *);
+
+	/* handler for raw output data, used by hidraw */
+	int (*hid_output_raw_report) (struct hid_device *, __u8 *, size_t);
 #ifdef CONFIG_USB_HIDINPUT_POWERBOOK
 	unsigned long pb_pressed_fn[NBITS(KEY_MAX)];
 	unsigned long pb_pressed_numlock[NBITS(KEY_MAX)];

commit 08f06177f4089abeba904cc12a2a50cffa9ffce6
Author: Tomoya Adachi <adachi@il.is.s.u-tokyo.ac.jp>
Date:   Wed Oct 3 23:27:49 2007 +0200

    USBHID: report descriptor fix for MacBook JIS keyboard
    
    This patch fixes the problem, that Japanese MacBook doesn't recognize some keys
    like '\'(yen, or backslash), '|'(pipe), and '_'(underscore).
    
    It is due to that MacBook JIS keyboard (jp106) sends wrong report descriptor.
    It saids "logical maximum = 0x65", so Keyboard.0089 is mapped to Key.Unknown,
    while it should be accepted as Key.Yen.
    
    Signed-off-by: Tomoya Adachi <adachi@il.is.s.u-tokyo.ac.jp>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>

diff --git a/include/linux/hid.h b/include/linux/hid.h
index eb42e10e3c86..35f5384a465b 100644
--- a/include/linux/hid.h
+++ b/include/linux/hid.h
@@ -286,6 +286,7 @@ struct hid_item {
 #define HID_QUIRK_RDESC_LOGITECH		0x00000002
 #define HID_QUIRK_RDESC_SWAPPED_MIN_MAX		0x00000004
 #define HID_QUIRK_RDESC_PETALYNX		0x00000008
+#define HID_QUIRK_RDESC_MACBOOK_JIS		0x00000010
 
 /*
  * This is the global environment of the parser. This information is

commit 0ce91cf9ce23127932e8b5241d8a7d2bf62df017
Author: Stelian Pop <stelian@popies.net>
Date:   Tue Sep 11 23:34:55 2007 +0200

    HID: enable hiddev for the SantaRosa MacBookPro IR receiver
    
    The infrared remote receiver found in the SantaRosa MacBookPro
    laptops (MacBookPro3,1) need to be forced to expose a HIDDEV
    interface (instead of HIDINPUT) so that lirc can access it using
    the 'macmini' driver.
    
    The patch below adds the required quirk for forcing the HIDDEV
    interface to be activated (HID_QUIRK_HIDDEV) and introduces a new
    quirk which forces the HIDINPUT interface to be ignored
    (HID_QUIRK_IGNORE_HIDINPUT).
    
    Note that Apple calls this receiver 'IRController4' (info taken
    from Apple's driver Info.plist). Older Mac{Book,Mini,Pro}s seem
    to all use the 'IRController1' device (USB id 05ac:8240) which
    doesn't need those quirks.
    
    Signed-off-by: Stelian Pop <stelian@popies.net>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>

diff --git a/include/linux/hid.h b/include/linux/hid.h
index 898103b401f1..eb42e10e3c86 100644
--- a/include/linux/hid.h
+++ b/include/linux/hid.h
@@ -276,6 +276,7 @@ struct hid_item {
 #define HID_QUIRK_HIDINPUT			0x00200000
 #define HID_QUIRK_LOGITECH_IGNORE_DOUBLED_WHEEL	0x00400000
 #define HID_QUIRK_LOGITECH_EXPANDED_KEYMAP	0x00800000
+#define HID_QUIRK_IGNORE_HIDINPUT		0x01000000
 
 /*
  * Separate quirks for runtime report descriptor fixup

commit feb485d4010e450183bd422d90c0d0f6be98f932
Merge: 58037eb961f8 2c1d8aea2ca7
Author: Jiri Kosina <jkosina@suse.cz>
Date:   Mon Jul 9 14:23:37 2007 +0200

    Merge branches 'debug-module-param' and 'upstream' into for-linus

commit 5f9c464aaa1ba3a773c47004e98eb1f3aa2ab2a4
Author: Ryo Dairiki <ryo-dairiki@users.sourceforge.net>
Date:   Mon Jun 25 10:31:12 2007 +0200

    HID: support for logitech cordless desktop LX500 special mapping
    
    This keyboard has wireless mouse which has left, middle, right buttons and
    2-dimensional scrolling wheel.  Unfornetuly, this wheel reports side scrolling
    events and 11 or 12 button events at the same time.
    
    I've wrote a patch to fix this mapping.  I'm not sure if this mapping is proper
    for buttons, because , for example, there is no entry for "burn cd" in input.h.
    
    The patch also supress 11 and 12 button events from mouse when you scroll the
    wheel left and right.  With this patch, only side scrolling events are
    reported.  (This mouse has only 4 buttons and 2D wheel. There is no such
    buttons like 11 and 12.)
    
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>

diff --git a/include/linux/hid.h b/include/linux/hid.h
index 4daf5eea78a1..44b64f0d0555 100644
--- a/include/linux/hid.h
+++ b/include/linux/hid.h
@@ -274,6 +274,8 @@ struct hid_item {
 #define HID_QUIRK_DUPLICATE_USAGES		0x00080000
 #define HID_QUIRK_RESET_LEDS			0x00100000
 #define HID_QUIRK_HIDINPUT			0x00200000
+#define HID_QUIRK_LOGITECH_IGNORE_DOUBLED_WHEEL	0x00400000
+#define HID_QUIRK_LOGITECH_EXPANDED_KEYMAP	0x00800000
 
 /*
  * Separate quirks for runtime report descriptor fixup

commit ea9a4a8b0e5a34eca6613e39d21be879d92ecff5
Author: Jiri Kosina <jkosina@suse.cz>
Date:   Tue Jun 19 14:09:14 2007 +0200

    HID: separate quirks for report descriptor fixup
    
    Lately there have been quite a lot of bug reports against broken devices
    which require us to fix their report descriptor in the runtime, before it
    is passed to the HID parser. Those devices have eaten quite an amount of
    our quirks space, which isn't particularly necessary - the quirks are not
    needed after the report descriptor is parsed, and they just consume bits.
    
    Therefore this patch separates the quirks for report descriptor fixup, and
    moves their handling into separate code. The quirks are then forgotten as
    soon as the report descriptor has been parsed.
    
    Module parameter 'rdesc_quirks' is introduced to be able to modify these
    quirks in runtime in a similar way to 'quirks' parameter for ordinary HID
    quirks.
    
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>

diff --git a/include/linux/hid.h b/include/linux/hid.h
index e41067951dd9..4daf5eea78a1 100644
--- a/include/linux/hid.h
+++ b/include/linux/hid.h
@@ -263,21 +263,26 @@ struct hid_item {
 #define HID_QUIRK_2WHEEL_MOUSE_HACK_5		0x00000100
 #define HID_QUIRK_2WHEEL_MOUSE_HACK_ON		0x00000200
 #define HID_QUIRK_MIGHTYMOUSE			0x00000400
-#define HID_QUIRK_CYMOTION			0x00000800
-#define HID_QUIRK_POWERBOOK_HAS_FN		0x00001000
-#define HID_QUIRK_POWERBOOK_FN_ON		0x00002000
-#define HID_QUIRK_INVERT_HWHEEL			0x00004000
-#define HID_QUIRK_POWERBOOK_ISO_KEYBOARD        0x00008000
-#define HID_QUIRK_BAD_RELATIVE_KEYS		0x00010000
-#define HID_QUIRK_SKIP_OUTPUT_REPORTS		0x00020000
-#define HID_QUIRK_IGNORE_MOUSE			0x00040000
-#define HID_QUIRK_SONY_PS3_CONTROLLER		0x00080000
-#define HID_QUIRK_LOGITECH_DESCRIPTOR		0x00100000
-#define HID_QUIRK_DUPLICATE_USAGES		0x00200000
-#define HID_QUIRK_RESET_LEDS			0x00400000
-#define HID_QUIRK_SWAPPED_MIN_MAX		0x00800000
-#define HID_QUIRK_HIDINPUT			0x01000000
-#define HID_QUIRK_PETALYNX_DESCRIPTOR		0x02000000
+#define HID_QUIRK_POWERBOOK_HAS_FN		0x00000800
+#define HID_QUIRK_POWERBOOK_FN_ON		0x00001000
+#define HID_QUIRK_INVERT_HWHEEL			0x00002000
+#define HID_QUIRK_POWERBOOK_ISO_KEYBOARD        0x00004000
+#define HID_QUIRK_BAD_RELATIVE_KEYS		0x00008000
+#define HID_QUIRK_SKIP_OUTPUT_REPORTS		0x00010000
+#define HID_QUIRK_IGNORE_MOUSE			0x00020000
+#define HID_QUIRK_SONY_PS3_CONTROLLER		0x00040000
+#define HID_QUIRK_DUPLICATE_USAGES		0x00080000
+#define HID_QUIRK_RESET_LEDS			0x00100000
+#define HID_QUIRK_HIDINPUT			0x00200000
+
+/*
+ * Separate quirks for runtime report descriptor fixup
+ */
+
+#define HID_QUIRK_RDESC_CYMOTION		0x00000001
+#define HID_QUIRK_RDESC_LOGITECH		0x00000002
+#define HID_QUIRK_RDESC_SWAPPED_MIN_MAX		0x00000004
+#define HID_QUIRK_RDESC_PETALYNX		0x00000008
 
 /*
  * This is the global environment of the parser. This information is
@@ -508,6 +513,7 @@ u32 usbhid_lookup_quirk(const u16 idVendor, const u16 idProduct);
 int usbhid_modify_dquirk(const u16 idVendor, const u16 idProduct, const u32 quirks);
 int usbhid_quirks_init(char **quirks_param);
 void usbhid_quirks_exit(void);
+void usbhid_fixup_report_descriptor(const u16, const u16, char *, unsigned, char **);
 
 #ifdef CONFIG_HID_FF
 int hid_ff_init(struct hid_device *hid);

commit 92d9e6e607eb7f8f1d2a43935f45cf300cf6fdf8
Author: Jiri Kosina <jkosina@suse.cz>
Date:   Mon Jun 18 13:30:11 2007 +0200

    HID: support for Petalynx Maxter remote control
    
    Petalynx Maxter remote control [1] 0x18b1/0x0037 emits 0xfa and 0xfc from
    consumer page (reserved in HUT 1.12) for back and more keys. It also emits
    a few usages from LOGIVENDOR page, which need adding.
    
    Also, this device has broken report descriptor - the reported maximum is too
    low - it doesn't contain the range for 'back' and 'more' keys, so we need to
    bump it up before the report descriptor is being parsed.
    
    Besides all this, it also requires NOGET quirk.
    
    This patch does so.
    
    [1] http://www.elmak.pl/index.php?option=com_phpshop&page=shop.browse&category_id=14&ext=opis&lang=en
    
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>

diff --git a/include/linux/hid.h b/include/linux/hid.h
index 6e45d1056e1b..e41067951dd9 100644
--- a/include/linux/hid.h
+++ b/include/linux/hid.h
@@ -277,6 +277,7 @@ struct hid_item {
 #define HID_QUIRK_RESET_LEDS			0x00400000
 #define HID_QUIRK_SWAPPED_MIN_MAX		0x00800000
 #define HID_QUIRK_HIDINPUT			0x01000000
+#define HID_QUIRK_PETALYNX_DESCRIPTOR		0x02000000
 
 /*
  * This is the global environment of the parser. This information is

commit defd208681b721dbf2b69347cca5302d60246405
Author: Jiri Kosina <jkosina@suse.cz>
Date:   Sat May 19 16:28:04 2007 +0200

    HID: force hid-input for Microsoft SideWinder GameVoice device
    
    Microsoft SideWinder GameVoice driver is a trivial device with a few buttons
    (0x09 HID usage) and an audio connector, which just forwards the audio input
    into oridinary sound card present in the computer.
    
    Despite this fact, the only interface of this device reports itself as a
    Telephony/Headset type of HID device. This is apparently incorrect - the device
    itself doesn't provide any audio/telephony functionality. This is achieved in
    userland application which only needs to receive the button events from the HID
    driver.
    
    This patch establishes a new quirk which forces hid-input to claim a device it
    will otherwise leave untouched.
    
    Reported-by: Tomas Carnecky <tom@dbservice.com>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>

diff --git a/include/linux/hid.h b/include/linux/hid.h
index 827ee748fd4c..6e45d1056e1b 100644
--- a/include/linux/hid.h
+++ b/include/linux/hid.h
@@ -276,6 +276,7 @@ struct hid_item {
 #define HID_QUIRK_DUPLICATE_USAGES		0x00200000
 #define HID_QUIRK_RESET_LEDS			0x00400000
 #define HID_QUIRK_SWAPPED_MIN_MAX		0x00800000
+#define HID_QUIRK_HIDINPUT			0x01000000
 
 /*
  * This is the global environment of the parser. This information is

commit 58037eb961f859607b161c50d9d4ecb374de1e8f
Author: Jiri Kosina <jkosina@suse.cz>
Date:   Wed May 30 15:07:13 2007 +0200

    HID: make debugging output runtime-configurable
    
    There have been many reports recently about broken HID devices, the
    diagnosis of which required users to recompile their kernels in order
    to be able to provide debugging output needed for coding a quirk for
    a particular device.
    
    This patch makes CONFIG_HID_DEBUG default y if !EMBEDDED and makes it
    possible to control debugging output produced by HID code by supplying
    'debug=1' module parameter.
    
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>

diff --git a/include/linux/hid.h b/include/linux/hid.h
index 827ee748fd4c..eb53d9a9ae54 100644
--- a/include/linux/hid.h
+++ b/include/linux/hid.h
@@ -488,6 +488,11 @@ struct hid_descriptor {
 #define IS_INPUT_APPLICATION(a) (((a >= 0x00010000) && (a <= 0x00010008)) || (a == 0x00010080) || (a == 0x000c0001))
 
 /* HID core API */
+
+#ifdef CONFIG_HID_DEBUG
+extern int hid_debug;
+#endif
+
 extern void hidinput_hid_event(struct hid_device *, struct hid_field *, struct hid_usage *, __s32);
 extern void hidinput_report_event(struct hid_device *hid, struct hid_report *report);
 extern int hidinput_connect(struct hid_device *);
@@ -523,14 +528,19 @@ static inline int hid_pidff_init(struct hid_device *hid) { return -ENODEV; }
 #else
 static inline int hid_ff_init(struct hid_device *hid) { return -1; }
 #endif
-#ifdef DEBUG
-#define dbg(format, arg...) printk(KERN_DEBUG "%s: " format "\n" , \
-		__FILE__ , ## arg)
+
+#ifdef CONFIG_HID_DEBUG
+#define dbg_hid(format, arg...) if (hid_debug) \
+				printk(KERN_DEBUG "%s: " format ,\
+				__FILE__ , ## arg)
+#define dbg_hid_line(format, arg...) if (hid_debug) \
+				printk(format, ## arg)
 #else
-#define dbg(format, arg...) do {} while (0)
+#define dbg_hid(format, arg...) do {} while (0)
+#define dbg_hid_line dbg_hid
 #endif
 
-#define err(format, arg...) printk(KERN_ERR "%s: " format "\n" , \
+#define err_hid(format, arg...) printk(KERN_ERR "%s: " format "\n" , \
 		__FILE__ , ## arg)
 #endif
 

commit 66da876962f782a3974b4a957d12f20656584a4d
Author: Jiri Kosina <jkosina@suse.cz>
Date:   Wed May 2 11:55:42 2007 +0200

    USB HID: report descriptor of Cypress USB barcode readers needs fixup
    
    Certain versions of Cypress USB barcode readers (this problem is known to
    happen at least with PIDs 0xde61 and 0xde64) have report descriptor which
    has swapped usage min and usage max tag. This results in HID parser failing
    for report descriptor of these devices, as it (wrongly) requires allocating
    more usages than HID_MAX_USAGES.
    
    Solve this by walking through the report descriptor for such devices, and swap
    the usage min and usage max items (and their values) to be in proper order.
    
    Reported-by: Bret Towe <magnade@gmail.com>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>

diff --git a/include/linux/hid.h b/include/linux/hid.h
index 37076b116ed0..827ee748fd4c 100644
--- a/include/linux/hid.h
+++ b/include/linux/hid.h
@@ -275,6 +275,7 @@ struct hid_item {
 #define HID_QUIRK_LOGITECH_DESCRIPTOR		0x00100000
 #define HID_QUIRK_DUPLICATE_USAGES		0x00200000
 #define HID_QUIRK_RESET_LEDS			0x00400000
+#define HID_QUIRK_SWAPPED_MIN_MAX		0x00800000
 
 /*
  * This is the global environment of the parser. This information is

commit 876b9276b993723f7a74d55b3b49b9186f05d09d
Author: Paul Walmsley <paul@booyaka.com>
Date:   Thu Apr 19 14:56:12 2007 +0200

    USB HID: add 'quirks' module parameter
    
    Add a 'quirks' module parameter for the usbhid module, so users can
    add or modify quirks at module load time.
    
    Signed-off-by: Paul Walmsley <paul@booyaka.com>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>

diff --git a/include/linux/hid.h b/include/linux/hid.h
index 4ba456d71f6b..37076b116ed0 100644
--- a/include/linux/hid.h
+++ b/include/linux/hid.h
@@ -247,6 +247,11 @@ struct hid_item {
  * HID device quirks.
  */
 
+/* 
+ * Increase this if you need to configure more HID quirks at module load time
+ */
+#define MAX_USBHID_BOOT_QUIRKS 4
+
 #define HID_QUIRK_INVERT			0x00000001
 #define HID_QUIRK_NOTOUCH			0x00000002
 #define HID_QUIRK_IGNORE			0x00000004
@@ -495,8 +500,11 @@ void hid_output_report(struct hid_report *report, __u8 *data);
 void hid_free_device(struct hid_device *device);
 struct hid_device *hid_parse_report(__u8 *start, unsigned size);
 
+/* HID quirks API */
 u32 usbhid_lookup_quirk(const u16 idVendor, const u16 idProduct);
 int usbhid_modify_dquirk(const u16 idVendor, const u16 idProduct, const u32 quirks);
+int usbhid_quirks_init(char **quirks_param);
+void usbhid_quirks_exit(void);
 
 #ifdef CONFIG_HID_FF
 int hid_ff_init(struct hid_device *hid);

commit 8cef908235bcac898a4f4ccc50c781e08022a579
Author: Paul Walmsley <paul@booyaka.com>
Date:   Thu Apr 19 14:37:44 2007 +0200

    USB HID: add support for dynamically-created quirks
    
    Add internal support for dynamically-allocated HID quirks, "dquirks"
    (for "dynamic quirks").  Includes several functions to add/modify quirks
    from the list.  This code is used by the next patch to implement quirk
    modification upon module load.
    
    Signed-off-by: Paul Walmsley <paul@booyaka.com>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>

diff --git a/include/linux/hid.h b/include/linux/hid.h
index 23e0dcf8ec41..4ba456d71f6b 100644
--- a/include/linux/hid.h
+++ b/include/linux/hid.h
@@ -496,6 +496,7 @@ void hid_free_device(struct hid_device *device);
 struct hid_device *hid_parse_report(__u8 *start, unsigned size);
 
 u32 usbhid_lookup_quirk(const u16 idVendor, const u16 idProduct);
+int usbhid_modify_dquirk(const u16 idVendor, const u16 idProduct, const u32 quirks);
 
 #ifdef CONFIG_HID_FF
 int hid_ff_init(struct hid_device *hid);

commit 2eb5dc30eb87aa30f67e3dff39d5c9f3fb643260
Author: Paul Walmsley <paul@booyaka.com>
Date:   Thu Apr 19 13:27:04 2007 +0200

    USB HID: encapsulate quirk handling into hid-quirks.c
    
    Move the USB_VENDOR* and USB_DEVICE* defines and the hid_blacklist[]
    array there from hid-core.c.  Add
    hid-quirks.c:usbhid_lookup_any_quirks() to return quirk information to
    hid-core.c.  Convert __u32, __u16 types to u32, u16.
    
    Signed-off-by: Paul Walmsley <paul@booyaka.com>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>

diff --git a/include/linux/hid.h b/include/linux/hid.h
index d73b24b1e265..23e0dcf8ec41 100644
--- a/include/linux/hid.h
+++ b/include/linux/hid.h
@@ -495,6 +495,8 @@ void hid_output_report(struct hid_report *report, __u8 *data);
 void hid_free_device(struct hid_device *device);
 struct hid_device *hid_parse_report(__u8 *start, unsigned size);
 
+u32 usbhid_lookup_quirk(const u16 idVendor, const u16 idProduct);
+
 #ifdef CONFIG_HID_FF
 int hid_ff_init(struct hid_device *hid);
 

commit 713c8aad6b7202671ce1ac6109f6b48d8223e938
Author: Pete Zaitcev <zaitcev@redhat.com>
Date:   Fri Apr 6 14:33:18 2007 +0200

    USB HID: numlock quirk for dell W7658 keyboard
    
    On Dell W7658 keyboard, when BIOS sets NumLock LED on, it survives the
    takeover by kernel and thus confuses users.
    
    Eating of an increasibly scarce quirk bit is unfortunate. We do it for safety,
    given the history of nervous input devices which crash if anything unusual
    happens.
    
    Signed-off-by: Pete Zaitcev <zaitcev@redhat.com>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>

diff --git a/include/linux/hid.h b/include/linux/hid.h
index 55184415fd6b..d73b24b1e265 100644
--- a/include/linux/hid.h
+++ b/include/linux/hid.h
@@ -269,6 +269,7 @@ struct hid_item {
 #define HID_QUIRK_SONY_PS3_CONTROLLER		0x00080000
 #define HID_QUIRK_LOGITECH_DESCRIPTOR		0x00100000
 #define HID_QUIRK_DUPLICATE_USAGES		0x00200000
+#define HID_QUIRK_RESET_LEDS			0x00400000
 
 /*
  * This is the global environment of the parser. This information is

commit 85cbea3952135ecad4b47cb6cc57e25279129e2d
Author: Jiri Kosina <jkosina@suse.cz>
Date:   Thu Apr 5 12:23:09 2007 +0200

    USB HID: Logitech MX3000 keyboard needs report descriptor quirk
    
    Logitech MX3000 contains report descriptor which doesn't cover usages
    above 0x28c, but emits such usages. Report descriptor needs fixing
    in the very same way as with receivers shipped with S510 keyboards.
    
    This patch also adds a few mappings for multimedia keys that S510 didn't
    emit.
    
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>

diff --git a/include/linux/hid.h b/include/linux/hid.h
index 8c97d4d3fdb0..55184415fd6b 100644
--- a/include/linux/hid.h
+++ b/include/linux/hid.h
@@ -267,7 +267,7 @@ struct hid_item {
 #define HID_QUIRK_SKIP_OUTPUT_REPORTS		0x00020000
 #define HID_QUIRK_IGNORE_MOUSE			0x00040000
 #define HID_QUIRK_SONY_PS3_CONTROLLER		0x00080000
-#define HID_QUIRK_LOGITECH_S510_DESCRIPTOR	0x00100000
+#define HID_QUIRK_LOGITECH_DESCRIPTOR		0x00100000
 #define HID_QUIRK_DUPLICATE_USAGES		0x00200000
 
 /*

commit 25914662b7e86f8cf8abdde0497e7fe8bdddf2ae
Author: Jiri Kosina <jkosina@suse.cz>
Date:   Thu Mar 1 09:54:44 2007 +0100

    HID: fix Logitech DiNovo Edge touchwheel and Logic3 /SpectraVideo middle button
    
    Dongle shipped with Logitech DiNovo Edge (0x046d/0xc714) behaves in a weird
    non-standard way - it contains multiple reports with the same usage, which
    results in remapping of GenericDesktop.X and GenericDesktop.Y usages to
    GenericDesktop.Z and GenericDesktop.RX respectively, thus rendering the
    touchwheel unusable.
    
    The commit 35068976916fdef82d6e69ef1f8c9a1c47732759 solved this
    in a way that it didn't remap certain usages. This however breaks
    (at least) middle button of Logic3 / SpectraVideo (0x1267/0x0210),
    which in contrary requires the remapping.
    
    To make both of the harware work, allow remapping of these usages again,
    and introduce a quirk for Logitech DiNovo Edge "touchwheel" instead - we
    disable remapping for key, abs and rel events only for this hardware.
    
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>

diff --git a/include/linux/hid.h b/include/linux/hid.h
index b08ad8a23699..8c97d4d3fdb0 100644
--- a/include/linux/hid.h
+++ b/include/linux/hid.h
@@ -268,6 +268,7 @@ struct hid_item {
 #define HID_QUIRK_IGNORE_MOUSE			0x00040000
 #define HID_QUIRK_SONY_PS3_CONTROLLER		0x00080000
 #define HID_QUIRK_LOGITECH_S510_DESCRIPTOR	0x00100000
+#define HID_QUIRK_DUPLICATE_USAGES		0x00200000
 
 /*
  * This is the global environment of the parser. This information is

commit b55fd23ccdf32f969a7b4180c6e52d62d8e99972
Author: Jiri Kosina <jkosina@suse.cz>
Date:   Wed Feb 21 19:27:49 2007 +0100

    HID: fix broken Logitech S510 keyboard report descriptor; make extra keys work
    
    This patch makes extra keys (F1-F12 in special mode, zooming, rotate, shuffle)
    on Logitech S510 keyboard work.
    
    Logitech S510 keyboard sends in report no. 3 keys which are far above the
    logical maximum described in descriptor for given report.
    
    This patch introduces a HID quirk for this wireless USB receiver/keyboard
    in order to fix the report descriptor before it's being parsed - the logical
    maximum and the number of usages is bumped up to 0x104d). The values are in the
    "Reserved" area of consumer HUT, so HID_MAX_USAGE had to be changed too.
    
    In addition to proper extracting of  the values from report descriptor, proper
    HID-input mapping is introduced for them.
    
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>

diff --git a/include/linux/hid.h b/include/linux/hid.h
index d26b08f461f2..b08ad8a23699 100644
--- a/include/linux/hid.h
+++ b/include/linux/hid.h
@@ -6,7 +6,7 @@
  *
  *  Copyright (c) 1999 Andreas Gal
  *  Copyright (c) 2000-2001 Vojtech Pavlik
- *  Copyright (c) 2006 Jiri Kosina
+ *  Copyright (c) 2006-2007 Jiri Kosina
  */
 
 /*
@@ -267,6 +267,7 @@ struct hid_item {
 #define HID_QUIRK_SKIP_OUTPUT_REPORTS		0x00020000
 #define HID_QUIRK_IGNORE_MOUSE			0x00040000
 #define HID_QUIRK_SONY_PS3_CONTROLLER		0x00080000
+#define HID_QUIRK_LOGITECH_S510_DESCRIPTOR	0x00100000
 
 /*
  * This is the global environment of the parser. This information is
@@ -292,7 +293,7 @@ struct hid_global {
  */
 
 #define HID_MAX_DESCRIPTOR_SIZE		4096
-#define HID_MAX_USAGES			1024
+#define HID_MAX_USAGES			8192
 #define HID_DEFAULT_NUM_COLLECTIONS	16
 
 struct hid_local {

commit 4a1a4d8b87389e35c3af04c0d0a95f6a0391b964
Author: Geoff Levand <geoffrey.levand@am.sony.com>
Date:   Mon Jan 15 20:11:52 2007 -0800

    USB: ps3 controller hid quirk
    
    Add the USB HID quirk HID_QUIRK_SONY_PS3_CONTROLLER.  This sends an
    HID_REQ_GET_REPORT to the the PS3 controller to put the device into
    'operational mode'.
    
    Signed-off-by: Geoff Levand <geoffrey.levand@am.sony.com>
    Cc: David Brownell <dbrownell@users.sourceforge.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>

diff --git a/include/linux/hid.h b/include/linux/hid.h
index 93173fe45634..d26b08f461f2 100644
--- a/include/linux/hid.h
+++ b/include/linux/hid.h
@@ -266,6 +266,7 @@ struct hid_item {
 #define HID_QUIRK_BAD_RELATIVE_KEYS		0x00010000
 #define HID_QUIRK_SKIP_OUTPUT_REPORTS		0x00020000
 #define HID_QUIRK_IGNORE_MOUSE			0x00040000
+#define HID_QUIRK_SONY_PS3_CONTROLLER		0x00080000
 
 /*
  * This is the global environment of the parser. This information is

commit a417a21e10831bca695b4ba9c74f4ddf5a95ac06
Author: Soeren Sonnenburg <kernel@nn7.de>
Date:   Mon Feb 5 10:06:01 2007 +0100

    USB HID: handle multi-interface devices for Apple macbook pro properly
    
    Some HID devices by Apple have both keyboard and mouse interfaces; the
    keyboard interface is handled by usbhid, but the mouse (really
    touchpad) interface must be handled by the separate 'appletouch'
    driver.  Using HID_QUIRK_IGNORE will make hiddev ignore both
    interfaces, therefore a new quirk flag to ignore only the mouse
    interface is required.
    
    Signed-off-by: Soeren Sonnenburg <kernel@nn7.de>
    Signed-off-by: Sergey Vlasov <vsu@altlinux.ru>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>

diff --git a/include/linux/hid.h b/include/linux/hid.h
index 829690d8071e..93173fe45634 100644
--- a/include/linux/hid.h
+++ b/include/linux/hid.h
@@ -265,6 +265,7 @@ struct hid_item {
 #define HID_QUIRK_POWERBOOK_ISO_KEYBOARD        0x00008000
 #define HID_QUIRK_BAD_RELATIVE_KEYS		0x00010000
 #define HID_QUIRK_SKIP_OUTPUT_REPORTS		0x00020000
+#define HID_QUIRK_IGNORE_MOUSE			0x00040000
 
 /*
  * This is the global environment of the parser. This information is

commit 7c379146005d277982acde02da44c773de5e7e5a
Author: Jiri Kosina <jkosina@suse.cz>
Date:   Wed Jan 24 11:54:19 2007 +0100

    HID: API - fix leftovers of hidinput API in USB HID
    
    hidinput_{open,close}() functions do not belong to usbhid, but
    to the generic HID layer. Move them, and fix hooks in struct
    hid_device, so that now the callbacks are done to transport-specific
    _open() functions, but not input_open() functions.
    
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>

diff --git a/include/linux/hid.h b/include/linux/hid.h
index 189460e7b03f..829690d8071e 100644
--- a/include/linux/hid.h
+++ b/include/linux/hid.h
@@ -431,8 +431,8 @@ struct hid_device {							/* device report descriptor */
 
 	/* device-specific function pointers */
 	int (*hidinput_input_event) (struct input_dev *, unsigned int, unsigned int, int);
-	int (*hidinput_open) (struct input_dev *);
-	void (*hidinput_close) (struct input_dev *);
+	int (*hid_open) (struct hid_device *);
+	void (*hid_close) (struct hid_device *);
 
 	/* hiddev event handler */
 	void (*hiddev_hid_event) (struct hid_device *, struct hid_field *field,

commit c080d89ad91e98fec0e8fc5f448a1ad899bd85c7
Author: Jiri Kosina <jkosina@suse.cz>
Date:   Thu Jan 25 11:43:31 2007 +0100

    HID: hid debug from hid-debug.h to hid layer
    
    hid-debug.h contains a lot of code, and should not therefore
    be a header.
    
    This patch moves the code to generic hid layer as .c source, and
    introduces CONFIG_HID_DEBUG to conditionally compile it, instead
    of playing with #define DEBUG and including hid-debug.h.
    
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>

diff --git a/include/linux/hid.h b/include/linux/hid.h
index 18d0f2ce817f..189460e7b03f 100644
--- a/include/linux/hid.h
+++ b/include/linux/hid.h
@@ -472,16 +472,6 @@ struct hid_descriptor {
 	struct hid_class_descriptor desc[1];
 } __attribute__ ((packed));
 
-#ifdef DEBUG
-#include "hid-debug.h"
-#else
-#define hid_dump_input(a,b)	do { } while (0)
-#define hid_dump_device(c)	do { } while (0)
-#define hid_dump_field(a,b)	do { } while (0)
-#define resolv_usage(a)		do { } while (0)
-#define resolv_event(a,b)	do { } while (0)
-#endif
-
 /* Applications from HID Usage Tables 4/8/99 Version 1.1 */
 /* We ignore a few input applications that are not widely used */
 #define IS_INPUT_APPLICATION(a) (((a >= 0x00010000) && (a <= 0x00010008)) || (a == 0x00010080) || (a == 0x000c0001))

commit 20eb12790670985c8e30821218993bd260387b89
Author: Anssi Hannula <anssi.hannula@gmail.com>
Date:   Thu Jan 11 16:51:18 2007 +0200

    hid: force feedback driver for PantherLord USB/PS2 2in1 Adapter
    
    Add a force feedback driver for PantherLord USB/PS2 2in1 Adapter,
    0810:0001. The device identifies itself as "Twin USB Joystick".
    
    Signed-off-by: Anssi Hannula <anssi.hannula@gmail.com>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>

diff --git a/include/linux/hid.h b/include/linux/hid.h
index 523b8341e791..18d0f2ce817f 100644
--- a/include/linux/hid.h
+++ b/include/linux/hid.h
@@ -504,6 +504,7 @@ struct hid_device *hid_parse_report(__u8 *start, unsigned size);
 int hid_ff_init(struct hid_device *hid);
 
 int hid_lgff_init(struct hid_device *hid);
+int hid_plff_init(struct hid_device *hid);
 int hid_tmff_init(struct hid_device *hid);
 int hid_zpff_init(struct hid_device *hid);
 #ifdef CONFIG_HID_PID

commit 5556feae1c4e1cf2021b5fb2ef99973125de2250
Author: Anssi Hannula <anssi.hannula@gmail.com>
Date:   Thu Jan 11 16:51:17 2007 +0200

    hid: quirk for multi-input devices with unneeded output reports
    
    Add new quirk HID_QUIRK_SKIP_OUTPUT_REPORTS to skip output reports
    when enumerating reports on a hid-input device. Add this quirk and
    HID_QUIRK_MULTI_INPUT to 0810:0001.
    
    PantherLord Twin USB Joystick, 0810:0001 has separate input reports
    for 2 distinct game controllers in the same interface, so it needs
    HID_QUIRK_MULTI_INPUT. However, the device also contains one output
    report per controller which is used to control the force feedback
    function, and we do not want those to appear as separate input
    devices as well. The simplest approach seems to be to add a quirk to
    skip output reports on 0810:0001, and allow the force feedback
    driver to handle those.
    
    Signed-off-by: Anssi Hannula <anssi.hannula@gmail.com>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>

diff --git a/include/linux/hid.h b/include/linux/hid.h
index 342b4e639acb..523b8341e791 100644
--- a/include/linux/hid.h
+++ b/include/linux/hid.h
@@ -264,6 +264,7 @@ struct hid_item {
 #define HID_QUIRK_INVERT_HWHEEL			0x00004000
 #define HID_QUIRK_POWERBOOK_ISO_KEYBOARD        0x00008000
 #define HID_QUIRK_BAD_RELATIVE_KEYS		0x00010000
+#define HID_QUIRK_SKIP_OUTPUT_REPORTS		0x00020000
 
 /*
  * This is the global environment of the parser. This information is

commit 76398f9667e8369023ed5f4847fb59e9da8b6968
Author: Jiri Kosina <jkosina@suse.cz>
Date:   Mon Jan 29 12:44:41 2007 +0100

    HID: fix pb_fnmode and move it to generic HID
    
    The apple powerbook people are used to switch the pb_fnmode
    setting at runtime through writing to sysfs, altering the
    module parameter value. This was broken for them in 2.6.20-rc1
    when generic HID layer was introduced, as the pb_fnmode flag
    was made per-hiddevice, instead of global variable.
    
    This patch moves the pb_fnmode module parameter from usbhid module
    to hid module, but apart from that retains backward compatibility
    with respect to changing the mode through sysfs.
    
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>

diff --git a/include/linux/hid.h b/include/linux/hid.h
index 770120add15a..342b4e639acb 100644
--- a/include/linux/hid.h
+++ b/include/linux/hid.h
@@ -438,7 +438,6 @@ struct hid_device {							/* device report descriptor */
 				  struct hid_usage *, __s32);
 	void (*hiddev_report_event) (struct hid_device *, struct hid_report *);
 #ifdef CONFIG_USB_HIDINPUT_POWERBOOK
-	unsigned int  pb_fnmode;
 	unsigned long pb_pressed_fn[NBITS(KEY_MAX)];
 	unsigned long pb_pressed_numlock[NBITS(KEY_MAX)];
 #endif

commit 4c2ae844b5ef85fd4b571c9c91ac48afa6ef2dfc
Author: Jiri Kosina <jkosina@suse.cz>
Date:   Fri Dec 8 18:41:22 2006 +0100

    [PATCH] Generic HID layer - pb_fnmode
    
    pb_fnmode parameter has to be passed to usbhid, both for compatibility reasons
    and also because it logically belongs there.
    
    Also removes empty hid-input.c file in drivers/usb/input.
    
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>
    Signed-off-by: Marcel Holtmann <marcel@holtmann.org>
    Cc: Dmitry Torokhov <dmitry.torokhov@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>

diff --git a/include/linux/hid.h b/include/linux/hid.h
index 342b4e639acb..770120add15a 100644
--- a/include/linux/hid.h
+++ b/include/linux/hid.h
@@ -438,6 +438,7 @@ struct hid_device {							/* device report descriptor */
 				  struct hid_usage *, __s32);
 	void (*hiddev_report_event) (struct hid_device *, struct hid_report *);
 #ifdef CONFIG_USB_HIDINPUT_POWERBOOK
+	unsigned int  pb_fnmode;
 	unsigned long pb_pressed_fn[NBITS(KEY_MAX)];
 	unsigned long pb_pressed_numlock[NBITS(KEY_MAX)];
 #endif

commit aa8de2f038baec993f07ef66fb3e94481d1ec22b
Author: Jiri Kosina <jkosina@suse.cz>
Date:   Fri Dec 8 18:41:17 2006 +0100

    [PATCH] Generic HID layer - input and event reporting
    
    hid_input_report() was needlessly USB-specific in USB HID. This patch
    makes the function independent of HID implementation and fixes all
    the current users. Bluetooth patches comply with this prototype.
    
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>
    Signed-off-by: Marcel Holtmann <marcel@holtmann.org>
    Cc: Dmitry Torokhov <dmitry.torokhov@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>

diff --git a/include/linux/hid.h b/include/linux/hid.h
index 5a969a137b85..342b4e639acb 100644
--- a/include/linux/hid.h
+++ b/include/linux/hid.h
@@ -436,7 +436,7 @@ struct hid_device {							/* device report descriptor */
 	/* hiddev event handler */
 	void (*hiddev_hid_event) (struct hid_device *, struct hid_field *field,
 				  struct hid_usage *, __s32);
-
+	void (*hiddev_report_event) (struct hid_device *, struct hid_report *);
 #ifdef CONFIG_USB_HIDINPUT_POWERBOOK
 	unsigned long pb_pressed_fn[NBITS(KEY_MAX)];
 	unsigned long pb_pressed_numlock[NBITS(KEY_MAX)];
@@ -492,6 +492,7 @@ extern int hidinput_connect(struct hid_device *);
 extern void hidinput_disconnect(struct hid_device *);
 
 int hid_set_field(struct hid_field *, unsigned, __s32);
+int hid_input_report(struct hid_device *, int type, u8 *, int, int);
 int hidinput_find_field(struct hid_device *hid, unsigned int type, unsigned int code, struct hid_field **field);
 void hid_input_field(struct hid_device *hid, struct hid_field *field, __u8 *data, int interrupt);
 void hid_output_report(struct hid_report *report, __u8 *data);

commit aa938f7974b82cfd9ee955031987344f332b7c77
Author: Jiri Kosina <jkosina@suse.cz>
Date:   Fri Dec 8 18:41:10 2006 +0100

    [PATCH] Generic HID layer - hiddev
    
    - hiddev is USB-only (agreed with Marcel Holtmann that Bluetooth currently
      doesn't need it, and future planned interface (rawhid) will be more flexible
      and usable)
    - both HID and USB-hid can be now compiled as modules (wasn't possible before
      hiddev was fully separated from generic HID layer)
    
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>
    Signed-off-by: Marcel Holtmann <marcel@holtmann.org>
    Cc: Dmitry Torokhov <dmitry.torokhov@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>

diff --git a/include/linux/hid.h b/include/linux/hid.h
index fc6f74228da3..5a969a137b85 100644
--- a/include/linux/hid.h
+++ b/include/linux/hid.h
@@ -433,6 +433,10 @@ struct hid_device {							/* device report descriptor */
 	int (*hidinput_open) (struct input_dev *);
 	void (*hidinput_close) (struct input_dev *);
 
+	/* hiddev event handler */
+	void (*hiddev_hid_event) (struct hid_device *, struct hid_field *field,
+				  struct hid_usage *, __s32);
+
 #ifdef CONFIG_USB_HIDINPUT_POWERBOOK
 	unsigned long pb_pressed_fn[NBITS(KEY_MAX)];
 	unsigned long pb_pressed_numlock[NBITS(KEY_MAX)];
@@ -477,13 +481,9 @@ struct hid_descriptor {
 #define resolv_event(a,b)	do { } while (0)
 #endif
 
-#ifdef CONFIG_HID
 /* Applications from HID Usage Tables 4/8/99 Version 1.1 */
 /* We ignore a few input applications that are not widely used */
 #define IS_INPUT_APPLICATION(a) (((a >= 0x00010000) && (a <= 0x00010008)) || (a == 0x00010080) || (a == 0x000c0001))
-#else
-#define IS_INPUT_APPLICATION(a) (0)
-#endif
 
 /* HID core API */
 extern void hidinput_hid_event(struct hid_device *, struct hid_field *, struct hid_usage *, __s32);

commit 4916b3a57fc94664677d439b911b8aaf86c7ec23
Author: Jiri Kosina <jkosina@suse.cz>
Date:   Fri Dec 8 18:41:03 2006 +0100

    [PATCH] Generic HID layer - USB API
    
    - 'dev' in struct hid_device changed from struct usb_device to
      struct device and fixed all the users
    - renamed functions which are part of USB HID API from 'hid_*' to
      'usbhid_*'
    - force feedback initialization moved from common part into USB-specific
      driver
    - added usbhid.h header for USB HID API users
    - removed USB-specific fields from struct hid_device and moved them
      to new usbhid_device, which is pointed to by hid_device->driver_data
    - fixed all USB users to use this new structure
    
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>
    Signed-off-by: Marcel Holtmann <marcel@holtmann.org>
    Cc: Dmitry Torokhov <dmitry.torokhov@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>

diff --git a/include/linux/hid.h b/include/linux/hid.h
index 0473b45b73b8..fc6f74228da3 100644
--- a/include/linux/hid.h
+++ b/include/linux/hid.h
@@ -410,41 +410,7 @@ struct hid_device {							/* device report descriptor */
 	unsigned country;						/* HID country */
 	struct hid_report_enum report_enum[HID_REPORT_TYPES];
 
-	struct usb_device *dev;						/* device */
-
-	/* USB specific fields */
-
-	struct usb_interface *intf;					/* USB interface */
-	int ifnum;							/* USB interface number */
-
-	unsigned long iofl;						/* I/O flags (CTRL_RUNNING, OUT_RUNNING) */
-	struct timer_list io_retry;					/* Retry timer */
-	unsigned long stop_retry;					/* Time to give up, in jiffies */
-	unsigned int retry_delay;					/* Delay length in ms */
-	struct work_struct reset_work;					/* Task context for resets */
-
-	unsigned int bufsize;						/* URB buffer size */
-
-	struct urb *urbin;						/* Input URB */
-	char *inbuf;							/* Input buffer */
-	dma_addr_t inbuf_dma;						/* Input buffer dma */
-	spinlock_t inlock;						/* Input fifo spinlock */
-
-	struct urb *urbctrl;						/* Control URB */
-	struct usb_ctrlrequest *cr;					/* Control request struct */
-	dma_addr_t cr_dma;						/* Control request struct dma */
-	struct hid_control_fifo ctrl[HID_CONTROL_FIFO_SIZE];		/* Control fifo */
-	unsigned char ctrlhead, ctrltail;				/* Control fifo head & tail */
-	char *ctrlbuf;							/* Control buffer */
-	dma_addr_t ctrlbuf_dma;						/* Control buffer dma */
-	spinlock_t ctrllock;						/* Control fifo spinlock */
-
-	struct urb *urbout;						/* Output URB */
-	struct hid_report *out[HID_CONTROL_FIFO_SIZE];			/* Output pipe fifo */
-	unsigned char outhead, outtail;					/* Output pipe fifo head & tail */
-	char *outbuf;							/* Output buffer */
-	dma_addr_t outbuf_dma;						/* Output buffer dma */
-	spinlock_t outlock;						/* Output fifo spinlock */
+	struct device *dev;						/* device */
 
 	unsigned claimed;						/* Claimed by hidinput, hiddev? */
 	unsigned quirks;						/* Various quirks the device can pull on us */

commit 229695e51efc4ed5e04ab471c82591d0f432909d
Author: Jiri Kosina <jkosina@suse.cz>
Date:   Fri Dec 8 18:40:53 2006 +0100

    [PATCH] Generic HID layer - API
    
    - fixed generic API (added neccessary EXPORT_SYMBOL, fixed hid.h to provide correct
      prototypes)
    - extended hid_device with open/close/event function pointers to driver-specific
      functions
    - added driver specific driver_data to hid_device
    
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>
    Signed-off-by: Marcel Holtmann <marcel@holtmann.org>
    Cc: Dmitry Torokhov <dmitry.torokhov@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>

diff --git a/include/linux/hid.h b/include/linux/hid.h
index ee567ae6fec1..0473b45b73b8 100644
--- a/include/linux/hid.h
+++ b/include/linux/hid.h
@@ -403,11 +403,17 @@ struct hid_device {							/* device report descriptor */
 	unsigned collection_size;					/* Number of allocated hid_collections */
 	unsigned maxcollection;						/* Number of parsed collections */
 	unsigned maxapplication;					/* Number of applications */
+	unsigned short bus;                                             /* BUS ID */
+	unsigned short vendor;                                          /* Vendor ID */
+	unsigned short product;                                         /* Product ID */
 	unsigned version;						/* HID version */
 	unsigned country;						/* HID country */
 	struct hid_report_enum report_enum[HID_REPORT_TYPES];
 
-	struct usb_device *dev;						/* USB device */
+	struct usb_device *dev;						/* device */
+
+	/* USB specific fields */
+
 	struct usb_interface *intf;					/* USB interface */
 	int ifnum;							/* USB interface number */
 
@@ -454,6 +460,13 @@ struct hid_device {							/* device report descriptor */
 	char phys[64];							/* Device physical location */
 	char uniq[64];							/* Device unique identifier (serial #) */
 
+	void *driver_data;
+
+	/* device-specific function pointers */
+	int (*hidinput_input_event) (struct input_dev *, unsigned int, unsigned int, int);
+	int (*hidinput_open) (struct input_dev *);
+	void (*hidinput_close) (struct input_dev *);
+
 #ifdef CONFIG_USB_HIDINPUT_POWERBOOK
 	unsigned long pb_pressed_fn[NBITS(KEY_MAX)];
 	unsigned long pb_pressed_numlock[NBITS(KEY_MAX)];
@@ -502,17 +515,15 @@ struct hid_descriptor {
 /* Applications from HID Usage Tables 4/8/99 Version 1.1 */
 /* We ignore a few input applications that are not widely used */
 #define IS_INPUT_APPLICATION(a) (((a >= 0x00010000) && (a <= 0x00010008)) || (a == 0x00010080) || (a == 0x000c0001))
+#else
+#define IS_INPUT_APPLICATION(a) (0)
+#endif
+
+/* HID core API */
 extern void hidinput_hid_event(struct hid_device *, struct hid_field *, struct hid_usage *, __s32);
 extern void hidinput_report_event(struct hid_device *hid, struct hid_report *report);
 extern int hidinput_connect(struct hid_device *);
 extern void hidinput_disconnect(struct hid_device *);
-#else
-#define IS_INPUT_APPLICATION(a) (0)
-static inline void hidinput_hid_event(struct hid_device *hid, struct hid_field *field, struct hid_usage *usage, __s32 value) { }
-static inline void hidinput_report_event(struct hid_device *hid, struct hid_report *report) { }
-static inline int hidinput_connect(struct hid_device *hid) { return -ENODEV; }
-static inline void hidinput_disconnect(struct hid_device *hid) { }
-#endif
 
 int hid_set_field(struct hid_field *, unsigned, __s32);
 int hidinput_find_field(struct hid_device *hid, unsigned int type, unsigned int code, struct hid_field **field);
@@ -536,5 +547,14 @@ static inline int hid_pidff_init(struct hid_device *hid) { return -ENODEV; }
 #else
 static inline int hid_ff_init(struct hid_device *hid) { return -1; }
 #endif
+#ifdef DEBUG
+#define dbg(format, arg...) printk(KERN_DEBUG "%s: " format "\n" , \
+		__FILE__ , ## arg)
+#else
+#define dbg(format, arg...) do {} while (0)
+#endif
+
+#define err(format, arg...) printk(KERN_ERR "%s: " format "\n" , \
+		__FILE__ , ## arg)
 #endif
 

commit dde5845a529ff753364a6d1aea61180946270bfa
Author: Jiri Kosina <jkosina@suse.cz>
Date:   Fri Dec 8 18:40:44 2006 +0100

    [PATCH] Generic HID layer - code split
    
    The "big main" split of USB HID code into generic HID code and
    USB-transport specific HID handling.
    
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>
    Signed-off-by: Marcel Holtmann <marcel@holtmann.org>
    Cc: Dmitry Torokhov <dmitry.torokhov@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>

diff --git a/include/linux/hid.h b/include/linux/hid.h
new file mode 100644
index 000000000000..ee567ae6fec1
--- /dev/null
+++ b/include/linux/hid.h
@@ -0,0 +1,540 @@
+#ifndef __HID_H
+#define __HID_H
+
+/*
+ * $Id: hid.h,v 1.24 2001/12/27 10:37:41 vojtech Exp $
+ *
+ *  Copyright (c) 1999 Andreas Gal
+ *  Copyright (c) 2000-2001 Vojtech Pavlik
+ *  Copyright (c) 2006 Jiri Kosina
+ */
+
+/*
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
+ *
+ * Should you need to contact me, the author, you can do so either by
+ * e-mail - mail your message to <vojtech@ucw.cz>, or by paper mail:
+ * Vojtech Pavlik, Simunkova 1594, Prague 8, 182 00 Czech Republic
+ */
+
+#include <linux/types.h>
+#include <linux/slab.h>
+#include <linux/list.h>
+#include <linux/timer.h>
+#include <linux/workqueue.h>
+#include <linux/input.h>
+
+/*
+ * USB HID (Human Interface Device) interface class code
+ */
+
+#define USB_INTERFACE_CLASS_HID		3
+
+/*
+ * USB HID interface subclass and protocol codes
+ */
+
+#define USB_INTERFACE_SUBCLASS_BOOT	1
+#define USB_INTERFACE_PROTOCOL_KEYBOARD	1
+#define USB_INTERFACE_PROTOCOL_MOUSE	2
+
+/*
+ * HID class requests
+ */
+
+#define HID_REQ_GET_REPORT		0x01
+#define HID_REQ_GET_IDLE		0x02
+#define HID_REQ_GET_PROTOCOL		0x03
+#define HID_REQ_SET_REPORT		0x09
+#define HID_REQ_SET_IDLE		0x0A
+#define HID_REQ_SET_PROTOCOL		0x0B
+
+/*
+ * HID class descriptor types
+ */
+
+#define HID_DT_HID			(USB_TYPE_CLASS | 0x01)
+#define HID_DT_REPORT			(USB_TYPE_CLASS | 0x02)
+#define HID_DT_PHYSICAL			(USB_TYPE_CLASS | 0x03)
+
+/*
+ * We parse each description item into this structure. Short items data
+ * values are expanded to 32-bit signed int, long items contain a pointer
+ * into the data area.
+ */
+
+struct hid_item {
+	unsigned  format;
+	__u8      size;
+	__u8      type;
+	__u8      tag;
+	union {
+	    __u8   u8;
+	    __s8   s8;
+	    __u16  u16;
+	    __s16  s16;
+	    __u32  u32;
+	    __s32  s32;
+	    __u8  *longdata;
+	} data;
+};
+
+/*
+ * HID report item format
+ */
+
+#define HID_ITEM_FORMAT_SHORT	0
+#define HID_ITEM_FORMAT_LONG	1
+
+/*
+ * Special tag indicating long items
+ */
+
+#define HID_ITEM_TAG_LONG	15
+
+/*
+ * HID report descriptor item type (prefix bit 2,3)
+ */
+
+#define HID_ITEM_TYPE_MAIN		0
+#define HID_ITEM_TYPE_GLOBAL		1
+#define HID_ITEM_TYPE_LOCAL		2
+#define HID_ITEM_TYPE_RESERVED		3
+
+/*
+ * HID report descriptor main item tags
+ */
+
+#define HID_MAIN_ITEM_TAG_INPUT			8
+#define HID_MAIN_ITEM_TAG_OUTPUT		9
+#define HID_MAIN_ITEM_TAG_FEATURE		11
+#define HID_MAIN_ITEM_TAG_BEGIN_COLLECTION	10
+#define HID_MAIN_ITEM_TAG_END_COLLECTION	12
+
+/*
+ * HID report descriptor main item contents
+ */
+
+#define HID_MAIN_ITEM_CONSTANT		0x001
+#define HID_MAIN_ITEM_VARIABLE		0x002
+#define HID_MAIN_ITEM_RELATIVE		0x004
+#define HID_MAIN_ITEM_WRAP		0x008
+#define HID_MAIN_ITEM_NONLINEAR		0x010
+#define HID_MAIN_ITEM_NO_PREFERRED	0x020
+#define HID_MAIN_ITEM_NULL_STATE	0x040
+#define HID_MAIN_ITEM_VOLATILE		0x080
+#define HID_MAIN_ITEM_BUFFERED_BYTE	0x100
+
+/*
+ * HID report descriptor collection item types
+ */
+
+#define HID_COLLECTION_PHYSICAL		0
+#define HID_COLLECTION_APPLICATION	1
+#define HID_COLLECTION_LOGICAL		2
+
+/*
+ * HID report descriptor global item tags
+ */
+
+#define HID_GLOBAL_ITEM_TAG_USAGE_PAGE		0
+#define HID_GLOBAL_ITEM_TAG_LOGICAL_MINIMUM	1
+#define HID_GLOBAL_ITEM_TAG_LOGICAL_MAXIMUM	2
+#define HID_GLOBAL_ITEM_TAG_PHYSICAL_MINIMUM	3
+#define HID_GLOBAL_ITEM_TAG_PHYSICAL_MAXIMUM	4
+#define HID_GLOBAL_ITEM_TAG_UNIT_EXPONENT	5
+#define HID_GLOBAL_ITEM_TAG_UNIT		6
+#define HID_GLOBAL_ITEM_TAG_REPORT_SIZE		7
+#define HID_GLOBAL_ITEM_TAG_REPORT_ID		8
+#define HID_GLOBAL_ITEM_TAG_REPORT_COUNT	9
+#define HID_GLOBAL_ITEM_TAG_PUSH		10
+#define HID_GLOBAL_ITEM_TAG_POP			11
+
+/*
+ * HID report descriptor local item tags
+ */
+
+#define HID_LOCAL_ITEM_TAG_USAGE		0
+#define HID_LOCAL_ITEM_TAG_USAGE_MINIMUM	1
+#define HID_LOCAL_ITEM_TAG_USAGE_MAXIMUM	2
+#define HID_LOCAL_ITEM_TAG_DESIGNATOR_INDEX	3
+#define HID_LOCAL_ITEM_TAG_DESIGNATOR_MINIMUM	4
+#define HID_LOCAL_ITEM_TAG_DESIGNATOR_MAXIMUM	5
+#define HID_LOCAL_ITEM_TAG_STRING_INDEX		7
+#define HID_LOCAL_ITEM_TAG_STRING_MINIMUM	8
+#define HID_LOCAL_ITEM_TAG_STRING_MAXIMUM	9
+#define HID_LOCAL_ITEM_TAG_DELIMITER		10
+
+/*
+ * HID usage tables
+ */
+
+#define HID_USAGE_PAGE		0xffff0000
+
+#define HID_UP_UNDEFINED	0x00000000
+#define HID_UP_GENDESK		0x00010000
+#define HID_UP_SIMULATION	0x00020000
+#define HID_UP_KEYBOARD		0x00070000
+#define HID_UP_LED		0x00080000
+#define HID_UP_BUTTON		0x00090000
+#define HID_UP_ORDINAL		0x000a0000
+#define HID_UP_CONSUMER		0x000c0000
+#define HID_UP_DIGITIZER	0x000d0000
+#define HID_UP_PID		0x000f0000
+#define HID_UP_HPVENDOR         0xff7f0000
+#define HID_UP_MSVENDOR		0xff000000
+#define HID_UP_CUSTOM		0x00ff0000
+#define HID_UP_LOGIVENDOR	0xffbc0000
+
+#define HID_USAGE		0x0000ffff
+
+#define HID_GD_POINTER		0x00010001
+#define HID_GD_MOUSE		0x00010002
+#define HID_GD_JOYSTICK		0x00010004
+#define HID_GD_GAMEPAD		0x00010005
+#define HID_GD_KEYBOARD		0x00010006
+#define HID_GD_KEYPAD		0x00010007
+#define HID_GD_MULTIAXIS	0x00010008
+#define HID_GD_X		0x00010030
+#define HID_GD_Y		0x00010031
+#define HID_GD_Z		0x00010032
+#define HID_GD_RX		0x00010033
+#define HID_GD_RY		0x00010034
+#define HID_GD_RZ		0x00010035
+#define HID_GD_SLIDER		0x00010036
+#define HID_GD_DIAL		0x00010037
+#define HID_GD_WHEEL		0x00010038
+#define HID_GD_HATSWITCH	0x00010039
+#define HID_GD_BUFFER		0x0001003a
+#define HID_GD_BYTECOUNT	0x0001003b
+#define HID_GD_MOTION		0x0001003c
+#define HID_GD_START		0x0001003d
+#define HID_GD_SELECT		0x0001003e
+#define HID_GD_VX		0x00010040
+#define HID_GD_VY		0x00010041
+#define HID_GD_VZ		0x00010042
+#define HID_GD_VBRX		0x00010043
+#define HID_GD_VBRY		0x00010044
+#define HID_GD_VBRZ		0x00010045
+#define HID_GD_VNO		0x00010046
+#define HID_GD_FEATURE		0x00010047
+#define HID_GD_UP		0x00010090
+#define HID_GD_DOWN		0x00010091
+#define HID_GD_RIGHT		0x00010092
+#define HID_GD_LEFT		0x00010093
+
+/*
+ * HID report types --- Ouch! HID spec says 1 2 3!
+ */
+
+#define HID_INPUT_REPORT	0
+#define HID_OUTPUT_REPORT	1
+#define HID_FEATURE_REPORT	2
+
+/*
+ * HID device quirks.
+ */
+
+#define HID_QUIRK_INVERT			0x00000001
+#define HID_QUIRK_NOTOUCH			0x00000002
+#define HID_QUIRK_IGNORE			0x00000004
+#define HID_QUIRK_NOGET				0x00000008
+#define HID_QUIRK_HIDDEV			0x00000010
+#define HID_QUIRK_BADPAD			0x00000020
+#define HID_QUIRK_MULTI_INPUT			0x00000040
+#define HID_QUIRK_2WHEEL_MOUSE_HACK_7		0x00000080
+#define HID_QUIRK_2WHEEL_MOUSE_HACK_5		0x00000100
+#define HID_QUIRK_2WHEEL_MOUSE_HACK_ON		0x00000200
+#define HID_QUIRK_MIGHTYMOUSE			0x00000400
+#define HID_QUIRK_CYMOTION			0x00000800
+#define HID_QUIRK_POWERBOOK_HAS_FN		0x00001000
+#define HID_QUIRK_POWERBOOK_FN_ON		0x00002000
+#define HID_QUIRK_INVERT_HWHEEL			0x00004000
+#define HID_QUIRK_POWERBOOK_ISO_KEYBOARD        0x00008000
+#define HID_QUIRK_BAD_RELATIVE_KEYS		0x00010000
+
+/*
+ * This is the global environment of the parser. This information is
+ * persistent for main-items. The global environment can be saved and
+ * restored with PUSH/POP statements.
+ */
+
+struct hid_global {
+	unsigned usage_page;
+	__s32    logical_minimum;
+	__s32    logical_maximum;
+	__s32    physical_minimum;
+	__s32    physical_maximum;
+	__s32    unit_exponent;
+	unsigned unit;
+	unsigned report_id;
+	unsigned report_size;
+	unsigned report_count;
+};
+
+/*
+ * This is the local environment. It is persistent up the next main-item.
+ */
+
+#define HID_MAX_DESCRIPTOR_SIZE		4096
+#define HID_MAX_USAGES			1024
+#define HID_DEFAULT_NUM_COLLECTIONS	16
+
+struct hid_local {
+	unsigned usage[HID_MAX_USAGES]; /* usage array */
+	unsigned collection_index[HID_MAX_USAGES]; /* collection index array */
+	unsigned usage_index;
+	unsigned usage_minimum;
+	unsigned delimiter_depth;
+	unsigned delimiter_branch;
+};
+
+/*
+ * This is the collection stack. We climb up the stack to determine
+ * application and function of each field.
+ */
+
+struct hid_collection {
+	unsigned type;
+	unsigned usage;
+	unsigned level;
+};
+
+struct hid_usage {
+	unsigned  hid;			/* hid usage code */
+	unsigned  collection_index;	/* index into collection array */
+	/* hidinput data */
+	__u16     code;			/* input driver code */
+	__u8      type;			/* input driver type */
+	__s8	  hat_min;		/* hat switch fun */
+	__s8	  hat_max;		/* ditto */
+	__s8	  hat_dir;		/* ditto */
+};
+
+struct hid_input;
+
+struct hid_field {
+	unsigned  physical;		/* physical usage for this field */
+	unsigned  logical;		/* logical usage for this field */
+	unsigned  application;		/* application usage for this field */
+	struct hid_usage *usage;	/* usage table for this function */
+	unsigned  maxusage;		/* maximum usage index */
+	unsigned  flags;		/* main-item flags (i.e. volatile,array,constant) */
+	unsigned  report_offset;	/* bit offset in the report */
+	unsigned  report_size;		/* size of this field in the report */
+	unsigned  report_count;		/* number of this field in the report */
+	unsigned  report_type;		/* (input,output,feature) */
+	__s32    *value;		/* last known value(s) */
+	__s32     logical_minimum;
+	__s32     logical_maximum;
+	__s32     physical_minimum;
+	__s32     physical_maximum;
+	__s32     unit_exponent;
+	unsigned  unit;
+	struct hid_report *report;	/* associated report */
+	unsigned index;			/* index into report->field[] */
+	/* hidinput data */
+	struct hid_input *hidinput;	/* associated input structure */
+	__u16 dpad;			/* dpad input code */
+};
+
+#define HID_MAX_FIELDS 64
+
+struct hid_report {
+	struct list_head list;
+	unsigned id;					/* id of this report */
+	unsigned type;					/* report type */
+	struct hid_field *field[HID_MAX_FIELDS];	/* fields of the report */
+	unsigned maxfield;				/* maximum valid field index */
+	unsigned size;					/* size of the report (bits) */
+	struct hid_device *device;			/* associated device */
+};
+
+struct hid_report_enum {
+	unsigned numbered;
+	struct list_head report_list;
+	struct hid_report *report_id_hash[256];
+};
+
+#define HID_REPORT_TYPES 3
+
+#define HID_MIN_BUFFER_SIZE	64		/* make sure there is at least a packet size of space */
+#define HID_MAX_BUFFER_SIZE	4096		/* 4kb */
+#define HID_CONTROL_FIFO_SIZE	256		/* to init devices with >100 reports */
+#define HID_OUTPUT_FIFO_SIZE	64
+
+struct hid_control_fifo {
+	unsigned char dir;
+	struct hid_report *report;
+};
+
+#define HID_CLAIMED_INPUT	1
+#define HID_CLAIMED_HIDDEV	2
+
+#define HID_CTRL_RUNNING	1
+#define HID_OUT_RUNNING		2
+#define HID_IN_RUNNING		3
+#define HID_RESET_PENDING	4
+#define HID_SUSPENDED		5
+#define HID_CLEAR_HALT		6
+
+struct hid_input {
+	struct list_head list;
+	struct hid_report *report;
+	struct input_dev *input;
+};
+
+struct hid_device {							/* device report descriptor */
+	 __u8 *rdesc;
+	unsigned rsize;
+	struct hid_collection *collection;				/* List of HID collections */
+	unsigned collection_size;					/* Number of allocated hid_collections */
+	unsigned maxcollection;						/* Number of parsed collections */
+	unsigned maxapplication;					/* Number of applications */
+	unsigned version;						/* HID version */
+	unsigned country;						/* HID country */
+	struct hid_report_enum report_enum[HID_REPORT_TYPES];
+
+	struct usb_device *dev;						/* USB device */
+	struct usb_interface *intf;					/* USB interface */
+	int ifnum;							/* USB interface number */
+
+	unsigned long iofl;						/* I/O flags (CTRL_RUNNING, OUT_RUNNING) */
+	struct timer_list io_retry;					/* Retry timer */
+	unsigned long stop_retry;					/* Time to give up, in jiffies */
+	unsigned int retry_delay;					/* Delay length in ms */
+	struct work_struct reset_work;					/* Task context for resets */
+
+	unsigned int bufsize;						/* URB buffer size */
+
+	struct urb *urbin;						/* Input URB */
+	char *inbuf;							/* Input buffer */
+	dma_addr_t inbuf_dma;						/* Input buffer dma */
+	spinlock_t inlock;						/* Input fifo spinlock */
+
+	struct urb *urbctrl;						/* Control URB */
+	struct usb_ctrlrequest *cr;					/* Control request struct */
+	dma_addr_t cr_dma;						/* Control request struct dma */
+	struct hid_control_fifo ctrl[HID_CONTROL_FIFO_SIZE];		/* Control fifo */
+	unsigned char ctrlhead, ctrltail;				/* Control fifo head & tail */
+	char *ctrlbuf;							/* Control buffer */
+	dma_addr_t ctrlbuf_dma;						/* Control buffer dma */
+	spinlock_t ctrllock;						/* Control fifo spinlock */
+
+	struct urb *urbout;						/* Output URB */
+	struct hid_report *out[HID_CONTROL_FIFO_SIZE];			/* Output pipe fifo */
+	unsigned char outhead, outtail;					/* Output pipe fifo head & tail */
+	char *outbuf;							/* Output buffer */
+	dma_addr_t outbuf_dma;						/* Output buffer dma */
+	spinlock_t outlock;						/* Output fifo spinlock */
+
+	unsigned claimed;						/* Claimed by hidinput, hiddev? */
+	unsigned quirks;						/* Various quirks the device can pull on us */
+
+	struct list_head inputs;					/* The list of inputs */
+	void *hiddev;							/* The hiddev structure */
+	int minor;							/* Hiddev minor number */
+
+	wait_queue_head_t wait;						/* For sleeping */
+
+	int open;							/* is the device open by anyone? */
+	char name[128];							/* Device name */
+	char phys[64];							/* Device physical location */
+	char uniq[64];							/* Device unique identifier (serial #) */
+
+#ifdef CONFIG_USB_HIDINPUT_POWERBOOK
+	unsigned long pb_pressed_fn[NBITS(KEY_MAX)];
+	unsigned long pb_pressed_numlock[NBITS(KEY_MAX)];
+#endif
+};
+
+#define HID_GLOBAL_STACK_SIZE 4
+#define HID_COLLECTION_STACK_SIZE 4
+
+struct hid_parser {
+	struct hid_global     global;
+	struct hid_global     global_stack[HID_GLOBAL_STACK_SIZE];
+	unsigned              global_stack_ptr;
+	struct hid_local      local;
+	unsigned              collection_stack[HID_COLLECTION_STACK_SIZE];
+	unsigned              collection_stack_ptr;
+	struct hid_device    *device;
+};
+
+struct hid_class_descriptor {
+	__u8  bDescriptorType;
+	__u16 wDescriptorLength;
+} __attribute__ ((packed));
+
+struct hid_descriptor {
+	__u8  bLength;
+	__u8  bDescriptorType;
+	__u16 bcdHID;
+	__u8  bCountryCode;
+	__u8  bNumDescriptors;
+
+	struct hid_class_descriptor desc[1];
+} __attribute__ ((packed));
+
+#ifdef DEBUG
+#include "hid-debug.h"
+#else
+#define hid_dump_input(a,b)	do { } while (0)
+#define hid_dump_device(c)	do { } while (0)
+#define hid_dump_field(a,b)	do { } while (0)
+#define resolv_usage(a)		do { } while (0)
+#define resolv_event(a,b)	do { } while (0)
+#endif
+
+#ifdef CONFIG_HID
+/* Applications from HID Usage Tables 4/8/99 Version 1.1 */
+/* We ignore a few input applications that are not widely used */
+#define IS_INPUT_APPLICATION(a) (((a >= 0x00010000) && (a <= 0x00010008)) || (a == 0x00010080) || (a == 0x000c0001))
+extern void hidinput_hid_event(struct hid_device *, struct hid_field *, struct hid_usage *, __s32);
+extern void hidinput_report_event(struct hid_device *hid, struct hid_report *report);
+extern int hidinput_connect(struct hid_device *);
+extern void hidinput_disconnect(struct hid_device *);
+#else
+#define IS_INPUT_APPLICATION(a) (0)
+static inline void hidinput_hid_event(struct hid_device *hid, struct hid_field *field, struct hid_usage *usage, __s32 value) { }
+static inline void hidinput_report_event(struct hid_device *hid, struct hid_report *report) { }
+static inline int hidinput_connect(struct hid_device *hid) { return -ENODEV; }
+static inline void hidinput_disconnect(struct hid_device *hid) { }
+#endif
+
+int hid_set_field(struct hid_field *, unsigned, __s32);
+int hidinput_find_field(struct hid_device *hid, unsigned int type, unsigned int code, struct hid_field **field);
+void hid_input_field(struct hid_device *hid, struct hid_field *field, __u8 *data, int interrupt);
+void hid_output_report(struct hid_report *report, __u8 *data);
+void hid_free_device(struct hid_device *device);
+struct hid_device *hid_parse_report(__u8 *start, unsigned size);
+
+#ifdef CONFIG_HID_FF
+int hid_ff_init(struct hid_device *hid);
+
+int hid_lgff_init(struct hid_device *hid);
+int hid_tmff_init(struct hid_device *hid);
+int hid_zpff_init(struct hid_device *hid);
+#ifdef CONFIG_HID_PID
+int hid_pidff_init(struct hid_device *hid);
+#else
+static inline int hid_pidff_init(struct hid_device *hid) { return -ENODEV; }
+#endif
+
+#else
+static inline int hid_ff_init(struct hid_device *hid) { return -1; }
+#endif
+#endif
+
