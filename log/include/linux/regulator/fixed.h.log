commit f7907e57aea2adcd0b57ebcca410e125412ab680
Author: Peng Fan <peng.fan@nxp.com>
Date:   Tue Oct 29 01:21:31 2019 +0000

    regulator: fixed: add off-on-delay
    
    Depends on board design, the gpio controlling regulator may
    connects with a big capacitance. When need off, it takes some time
    to let the regulator to be truly off. If not add enough delay, the
    regulator might have always been on, so introduce off-on-delay to
    handle such case.
    
    Signed-off-by: Peng Fan <peng.fan@nxp.com>
    Link: https://lore.kernel.org/r/1572311875-22880-3-git-send-email-peng.fan@nxp.com
    Signed-off-by: Mark Brown <broonie@kernel.org>

diff --git a/include/linux/regulator/fixed.h b/include/linux/regulator/fixed.h
index d44ce5f18a56..55319943fcc5 100644
--- a/include/linux/regulator/fixed.h
+++ b/include/linux/regulator/fixed.h
@@ -36,6 +36,7 @@ struct fixed_voltage_config {
 	const char *input_supply;
 	int microvolts;
 	unsigned startup_delay;
+	unsigned int off_on_delay;
 	unsigned enabled_at_boot:1;
 	struct regulator_init_data *init_data;
 };

commit 2874c5fd284268364ece81a7bd936f3c8168e567
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Mon May 27 08:55:01 2019 +0200

    treewide: Replace GPLv2 boilerplate/reference with SPDX - rule 152
    
    Based on 1 normalized pattern(s):
    
      this program is free software you can redistribute it and or modify
      it under the terms of the gnu general public license as published by
      the free software foundation either version 2 of the license or at
      your option any later version
    
    extracted by the scancode license scanner the SPDX license identifier
    
      GPL-2.0-or-later
    
    has been chosen to replace the boilerplate/reference in 3029 file(s).
    
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Reviewed-by: Allison Randal <allison@lohutok.net>
    Cc: linux-spdx@vger.kernel.org
    Link: https://lkml.kernel.org/r/20190527070032.746973796@linutronix.de
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/include/linux/regulator/fixed.h b/include/linux/regulator/fixed.h
index f10140da7145..d44ce5f18a56 100644
--- a/include/linux/regulator/fixed.h
+++ b/include/linux/regulator/fixed.h
@@ -1,3 +1,4 @@
+/* SPDX-License-Identifier: GPL-2.0-or-later */
 /*
  * fixed.h
  *
@@ -7,11 +8,6 @@
  *
  * Copyright (c) 2009 Nokia Corporation
  * Roger Quadros <ext-roger.quadros@nokia.com>
- *
- * This program is free software; you can redistribute it and/or
- * modify it under the terms of the GNU General Public License as
- * published by the Free Software Foundation; either version 2 of the
- * License, or (at your option) any later version.
  */
 
 #ifndef __REGULATOR_FIXED_H

commit 01dc79cd6fe7d25b0eba84009634f5435cbdb4e6
Author: Linus Walleij <linus.walleij@linaro.org>
Date:   Tue Jan 29 11:31:53 2019 +0100

    regulator: fixed/gpio: Pull inversion/OD into gpiolib
    
    This pushes the handling of inversion semantics and open drain
    settings to the GPIO descriptor and gpiolib. All affected board
    files are also augmented.
    
    This is especially nice since we don't have to have any
    confusing flags passed around to the left and right littering
    the fixed and GPIO regulator drivers and the regulator core.
    It is all just very straight-forward: the core asks the GPIO
    line to be asserted or deasserted and gpiolib deals with the
    rest depending on how the platform is configured: if the line
    is active low, it deals with that, if the line is open drain,
    it deals with that too.
    
    Cc: Alexander Shiyan <shc_work@mail.ru> # i.MX boards user
    Cc: Haojian Zhuang <haojian.zhuang@gmail.com> # MMP2 maintainer
    Cc: Aaro Koskinen <aaro.koskinen@iki.fi> # OMAP1 maintainer
    Cc: Tony Lindgren <tony@atomide.com> # OMAP1,2,3 maintainer
    Cc: Mike Rapoport <rppt@linux.vnet.ibm.com> # EM-X270 maintainer
    Cc: Robert Jarzmik <robert.jarzmik@free.fr> # EZX maintainer
    Cc: Philipp Zabel <philipp.zabel@gmail.com> # Magician maintainer
    Cc: Petr Cvek <petr.cvek@tul.cz> # Magician
    Cc: Robert Jarzmik <robert.jarzmik@free.fr> # PXA
    Cc: Paul Parsons <lost.distance@yahoo.com> # hx4700
    Cc: Daniel Mack <zonque@gmail.com> # Raumfeld maintainer
    Cc: Marc Zyngier <marc.zyngier@arm.com> # Zeus maintainer
    Cc: Geert Uytterhoeven <geert+renesas@glider.be> # SuperH pinctrl/GPIO maintainer
    Cc: Russell King <rmk+kernel@armlinux.org.uk> # SA1100
    Tested-by: Marek Szyprowski <m.szyprowski@samsung.com>
    Tested-by: Janusz Krzysztofik <jmkrzyszt@gmail.com> #OMAP1 Amstrad Delta
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>
    Signed-off-by: Mark Brown <broonie@kernel.org>

diff --git a/include/linux/regulator/fixed.h b/include/linux/regulator/fixed.h
index 1a4340ed8e2b..f10140da7145 100644
--- a/include/linux/regulator/fixed.h
+++ b/include/linux/regulator/fixed.h
@@ -25,14 +25,6 @@ struct regulator_init_data;
  * @input_supply:	Name of the input regulator supply
  * @microvolts:		Output voltage of regulator
  * @startup_delay:	Start-up time in microseconds
- * @gpio_is_open_drain: Gpio pin is open drain or normal type.
- *			If it is open drain type then HIGH will be set
- *			through PULL-UP with setting gpio as input
- *			and low will be set as gpio-output with driven
- *			to low. For non-open-drain case, the gpio will
- *			will be in output and drive to low/high accordingly.
- * @enable_high:	Polarity of enable GPIO
- *			1 = Active high, 0 = Active low
  * @enabled_at_boot:	Whether regulator has been enabled at
  * 			boot or not. 1 = Yes, 0 = No
  * 			This is used to keep the regulator at
@@ -48,8 +40,6 @@ struct fixed_voltage_config {
 	const char *input_supply;
 	int microvolts;
 	unsigned startup_delay;
-	unsigned gpio_is_open_drain:1;
-	unsigned enable_high:1;
 	unsigned enabled_at_boot:1;
 	struct regulator_init_data *init_data;
 };

commit efdfeb079cc3b6c7d9c19959c5ed65ce2510dd1d
Author: Linus Walleij <linus.walleij@linaro.org>
Date:   Thu Sep 6 14:24:36 2018 +0200

    regulator: fixed: Convert to use GPIO descriptor only
    
    As we augmented the regulator core to accept a GPIO descriptor instead
    of a GPIO number, we can augment the fixed GPIO regulator to look up
    and pass that descriptor directly from device tree or board GPIO
    descriptor look up tables.
    
    Some boards just auto-enumerate their fixed regulator platform devices
    and I have assumed they get names like "fixed-regulator.0" but it's
    pretty hard to guess this. I need some testing from board maintainers to
    be sure. Other boards are straight forward, using just plain
    "fixed-regulator" (ID -1) or "fixed-regulator.1" hammering down the
    device ID.
    
    It seems the da9055 and da9211 has never got around to actually passing
    any enable gpio into its platform data (not the in-tree code anyway) so we
    can just decide to simply pass a descriptor instead.
    
    The fixed GPIO-controlled regulator in mach-pxa/ezx.c was confusingly named
    "*_dummy_supply_device" while it is a very real device backed by a GPIO
    line. There is nothing dummy about it at all, so I renamed it with the
    infix *_regulator_* as part of this patch set.
    
    Intel MID portions tested by Andy.
    
    Tested-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com> # Check the x86 BCM stuff
    Acked-by: Tony Lindgren <tony@atomide.com> # OMAP1,2,3 maintainer
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>
    Reviewed-by: Janusz Krzysztofik <jmkrzyszt@gmail.com>
    Reviewed-by: Mike Rapoport <rppt@linux.vnet.ibm.com>
    Signed-off-by: Mark Brown <broonie@kernel.org>

diff --git a/include/linux/regulator/fixed.h b/include/linux/regulator/fixed.h
index 48918be649d4..1a4340ed8e2b 100644
--- a/include/linux/regulator/fixed.h
+++ b/include/linux/regulator/fixed.h
@@ -24,8 +24,6 @@ struct regulator_init_data;
  * @supply_name:	Name of the regulator supply
  * @input_supply:	Name of the input regulator supply
  * @microvolts:		Output voltage of regulator
- * @gpio:		GPIO to use for enable control
- * 			set to -EINVAL if not used
  * @startup_delay:	Start-up time in microseconds
  * @gpio_is_open_drain: Gpio pin is open drain or normal type.
  *			If it is open drain type then HIGH will be set
@@ -49,7 +47,6 @@ struct fixed_voltage_config {
 	const char *supply_name;
 	const char *input_supply;
 	int microvolts;
-	int gpio;
 	unsigned startup_delay;
 	unsigned gpio_is_open_drain:1;
 	unsigned enable_high:1;

commit 3384fb98845dc014770caa224d61a2effd258ca5
Merge: 8cfc545e0e3e ade7515fefad
Author: Mark Brown <broonie@opensource.wolfsonmicro.com>
Date:   Sun Jul 22 19:32:00 2012 +0100

    Merge branch 'regulator-drivers' into regulator-next

commit 6be5bfc3bf0d31a70745a52e69f7f46de974193f
Author: Laxman Dewangan <ldewangan@nvidia.com>
Date:   Thu Jul 5 18:12:01 2012 +0530

    regulator: fixed: dt: support for input supply
    
    Add support for input supply in DT parsing of node.
    The input supply will be provided by the property
    "vin-supply" in the regulator node.
    
    Signed-off-by: Laxman Dewangan <ldewangan@nvidia.com>
    Signed-off-by: Mark Brown <broonie@opensource.wolfsonmicro.com>

diff --git a/include/linux/regulator/fixed.h b/include/linux/regulator/fixed.h
index f83f7440b488..d6c24c53adf4 100644
--- a/include/linux/regulator/fixed.h
+++ b/include/linux/regulator/fixed.h
@@ -22,6 +22,7 @@ struct regulator_init_data;
 /**
  * struct fixed_voltage_config - fixed_voltage_config structure
  * @supply_name:	Name of the regulator supply
+ * @input_supply:	Name of the input regulator supply
  * @microvolts:		Output voltage of regulator
  * @gpio:		GPIO to use for enable control
  * 			set to -EINVAL if not used
@@ -46,6 +47,7 @@ struct regulator_init_data;
  */
 struct fixed_voltage_config {
 	const char *supply_name;
+	const char *input_supply;
 	int microvolts;
 	int gpio;
 	unsigned startup_delay;

commit 15719ccc274981b19ad8fe9ac20c94249de8a257
Author: Guennadi Liakhovetski <g.liakhovetski@gmx.de>
Date:   Tue Jun 19 17:44:39 2012 +0200

    regulator: extend the fixed dummy voltage regulator to accept voltage
    
    Trivially extend the regulator_register_always_on() helper function to be
    even more useful by adding a voltage parameter to it.
    
    Signed-off-by: Guennadi Liakhovetski <g.liakhovetski@gmx.de>
    Signed-off-by: Mark Brown <broonie@opensource.wolfsonmicro.com>

diff --git a/include/linux/regulator/fixed.h b/include/linux/regulator/fixed.h
index 6b9325b5e371..680f24e08af2 100644
--- a/include/linux/regulator/fixed.h
+++ b/include/linux/regulator/fixed.h
@@ -59,16 +59,16 @@ struct regulator_consumer_supply;
 
 #if IS_ENABLED(CONFIG_REGULATOR)
 struct platform_device *regulator_register_always_on(int id, const char *name,
-		struct regulator_consumer_supply *supplies, int num_supplies);
+		struct regulator_consumer_supply *supplies, int num_supplies, int uv);
 #else
 static inline struct platform_device *regulator_register_always_on(int id, const char *name,
-		struct regulator_consumer_supply *supplies, int num_supplies)
+		struct regulator_consumer_supply *supplies, int num_supplies, int uv)
 {
 	return NULL;
 }
 #endif
 
 #define regulator_register_fixed(id, s, ns) regulator_register_always_on(id, \
-						"fixed-dummy", s, ns)
+						"fixed-dummy", s, ns, 0)
 
 #endif

commit dfad84aeab5f71b33a12e6803a809f698bdef5a2
Author: Guennadi Liakhovetski <g.liakhovetski@gmx.de>
Date:   Tue Jun 19 17:43:56 2012 +0200

    regulator: support multiple dummy fixed regulators
    
    Currently regulator_register_fixed() uses a constant name to register a
    fixed dummy regulator. This is sufficient in principle, since there is no
    reason to register multiple such regulators. The user can simply supply all
    consumers in one array and use it to initialise such a regulator. However,
    in some cases it can be convenient to register multiple such regulators.
    This is also a prerequisite for the upcoming patch, that will add a voltage
    parameter to this function. The original function is provided as a wrapper
    macro.
    
    Signed-off-by: Guennadi Liakhovetski <g.liakhovetski@gmx.de>
    Signed-off-by: Mark Brown <broonie@opensource.wolfsonmicro.com>

diff --git a/include/linux/regulator/fixed.h b/include/linux/regulator/fixed.h
index f83f7440b488..6b9325b5e371 100644
--- a/include/linux/regulator/fixed.h
+++ b/include/linux/regulator/fixed.h
@@ -58,14 +58,17 @@ struct fixed_voltage_config {
 struct regulator_consumer_supply;
 
 #if IS_ENABLED(CONFIG_REGULATOR)
-struct platform_device *regulator_register_fixed(int id,
+struct platform_device *regulator_register_always_on(int id, const char *name,
 		struct regulator_consumer_supply *supplies, int num_supplies);
 #else
-static inline struct platform_device *regulator_register_fixed(int id,
+static inline struct platform_device *regulator_register_always_on(int id, const char *name,
 		struct regulator_consumer_supply *supplies, int num_supplies)
 {
 	return NULL;
 }
 #endif
 
+#define regulator_register_fixed(id, s, ns) regulator_register_always_on(id, \
+						"fixed-dummy", s, ns)
+
 #endif

commit a4d9f179cc788b7f4b735d32c2e4a3b2562e8240
Author: Laxman Dewangan <ldewangan@nvidia.com>
Date:   Wed Mar 7 15:58:33 2012 +0530

    regulator: fixed: Support for open drain gpio pin
    
    Adding flag on fixed regulator board configuration structure
    to specify whether gpio is open drain type or not.
    Passing this information to gpio library when requesting
    gpio so that gpio driver can set the pin state accordingly,
    for open drain type:
    - Pin can be set HIGH as setting as input, PULL UP on
      pin make this as HIGH.
    - Pin can be set LOW as setting it as output and drive to LOW.
    
    The non-open drain pin can be  set HIGH/LOW by setting it to
    output and driving it to HIGH/LOW.
    
    Signed-off-by: Laxman Dewangan <ldewangan@nvidia.com>
    Signed-off-by: Mark Brown <broonie@opensource.wolfsonmicro.com>

diff --git a/include/linux/regulator/fixed.h b/include/linux/regulator/fixed.h
index 936a7d8c11a9..f83f7440b488 100644
--- a/include/linux/regulator/fixed.h
+++ b/include/linux/regulator/fixed.h
@@ -26,6 +26,12 @@ struct regulator_init_data;
  * @gpio:		GPIO to use for enable control
  * 			set to -EINVAL if not used
  * @startup_delay:	Start-up time in microseconds
+ * @gpio_is_open_drain: Gpio pin is open drain or normal type.
+ *			If it is open drain type then HIGH will be set
+ *			through PULL-UP with setting gpio as input
+ *			and low will be set as gpio-output with driven
+ *			to low. For non-open-drain case, the gpio will
+ *			will be in output and drive to low/high accordingly.
  * @enable_high:	Polarity of enable GPIO
  *			1 = Active high, 0 = Active low
  * @enabled_at_boot:	Whether regulator has been enabled at
@@ -43,6 +49,7 @@ struct fixed_voltage_config {
 	int microvolts;
 	int gpio;
 	unsigned startup_delay;
+	unsigned gpio_is_open_drain:1;
 	unsigned enable_high:1;
 	unsigned enabled_at_boot:1;
 	struct regulator_init_data *init_data;

commit 613330a0f73b2698b2210ea89092eb56635fc5d8
Author: Sascha Hauer <s.hauer@pengutronix.de>
Date:   Sat Mar 3 12:40:02 2012 +0100

    regulator: provide a helper for registering a fixed regulator
    
    Some devices require a regulator to work, but boards may not have
    a software controllable regulator for this device. Provide a helper
    function to make it simpler for these boards to register a fixed
    regulator as a dummy regulator.
    
    Signed-off-by: Sascha Hauer <s.hauer@pengutronix.de>
    Signed-off-by: Mark Brown <broonie@opensource.wolfsonmicro.com>

diff --git a/include/linux/regulator/fixed.h b/include/linux/regulator/fixed.h
index ffd7d508e726..936a7d8c11a9 100644
--- a/include/linux/regulator/fixed.h
+++ b/include/linux/regulator/fixed.h
@@ -48,4 +48,17 @@ struct fixed_voltage_config {
 	struct regulator_init_data *init_data;
 };
 
+struct regulator_consumer_supply;
+
+#if IS_ENABLED(CONFIG_REGULATOR)
+struct platform_device *regulator_register_fixed(int id,
+		struct regulator_consumer_supply *supplies, int num_supplies);
+#else
+static inline struct platform_device *regulator_register_fixed(int id,
+		struct regulator_consumer_supply *supplies, int num_supplies)
+{
+	return NULL;
+}
+#endif
+
 #endif

commit eda79a3041a2cada0d4ee9491c99c3874b322356
Author: Adrian Hunter <adrian.hunter@nokia.com>
Date:   Tue Jan 12 12:25:13 2010 +0200

    regulator: Add 'start-up time' to fixed voltage regulators
    
    Add a field to specify a delay for the start-up time of
    a fixed voltage regulator.
    
    Signed-off-by: Adrian Hunter <adrian.hunter@nokia.com>
    Acked-by: Mark Brown <broonie@opensource.wolfsonmicro.com>
    Signed-off-by: Liam Girdwood <lrg@slimlogic.co.uk>

diff --git a/include/linux/regulator/fixed.h b/include/linux/regulator/fixed.h
index e94a4a1c7c8a..ffd7d508e726 100644
--- a/include/linux/regulator/fixed.h
+++ b/include/linux/regulator/fixed.h
@@ -25,6 +25,7 @@ struct regulator_init_data;
  * @microvolts:		Output voltage of regulator
  * @gpio:		GPIO to use for enable control
  * 			set to -EINVAL if not used
+ * @startup_delay:	Start-up time in microseconds
  * @enable_high:	Polarity of enable GPIO
  *			1 = Active high, 0 = Active low
  * @enabled_at_boot:	Whether regulator has been enabled at
@@ -41,6 +42,7 @@ struct fixed_voltage_config {
 	const char *supply_name;
 	int microvolts;
 	int gpio;
+	unsigned startup_delay;
 	unsigned enable_high:1;
 	unsigned enabled_at_boot:1;
 	struct regulator_init_data *init_data;

commit 86d9884b6a3646bc24e57430f1f694c5171c1bf6
Author: Roger Quadros <ext-roger.quadros@nokia.com>
Date:   Thu Aug 6 19:37:29 2009 +0300

    regulator: Add GPIO enable control to fixed voltage regulator driver
    
    Now fixed regulators that have their enable pin connected to a GPIO line
    can use the fixed regulator driver for regulator enable/disable control.
    The GPIO number and polarity information is passed through platform data.
    GPIO enable control is achieved using gpiolib.
    
    Signed-off-by: Roger Quadros <ext-roger.quadros@nokia.com>
    Reviewed-by: Philipp Zabel <philipp.zabel@gmail.com>
    Reviewed-by: Felipe Balbi <felipe.balbi@nokia.com>
    Acked-by: Mark Brown <broonie@opensource.wolfsonmicro.com>
    Signed-off-by: Liam Girdwood <lrg@slimlogic.co.uk>

diff --git a/include/linux/regulator/fixed.h b/include/linux/regulator/fixed.h
index 91b4da31f1b5..e94a4a1c7c8a 100644
--- a/include/linux/regulator/fixed.h
+++ b/include/linux/regulator/fixed.h
@@ -5,6 +5,9 @@
  *
  * Author: Mark Brown <broonie@opensource.wolfsonmicro.com>
  *
+ * Copyright (c) 2009 Nokia Corporation
+ * Roger Quadros <ext-roger.quadros@nokia.com>
+ *
  * This program is free software; you can redistribute it and/or
  * modify it under the terms of the GNU General Public License as
  * published by the Free Software Foundation; either version 2 of the
@@ -16,9 +19,30 @@
 
 struct regulator_init_data;
 
+/**
+ * struct fixed_voltage_config - fixed_voltage_config structure
+ * @supply_name:	Name of the regulator supply
+ * @microvolts:		Output voltage of regulator
+ * @gpio:		GPIO to use for enable control
+ * 			set to -EINVAL if not used
+ * @enable_high:	Polarity of enable GPIO
+ *			1 = Active high, 0 = Active low
+ * @enabled_at_boot:	Whether regulator has been enabled at
+ * 			boot or not. 1 = Yes, 0 = No
+ * 			This is used to keep the regulator at
+ * 			the default state
+ * @init_data:		regulator_init_data
+ *
+ * This structure contains fixed voltage regulator configuration
+ * information that must be passed by platform code to the fixed
+ * voltage regulator driver.
+ */
 struct fixed_voltage_config {
 	const char *supply_name;
 	int microvolts;
+	int gpio;
+	unsigned enable_high:1;
+	unsigned enabled_at_boot:1;
 	struct regulator_init_data *init_data;
 };
 

commit bcf3402c50a48d51462f37f72129d9c4369702b4
Author: Mark Brown <broonie@opensource.wolfsonmicro.com>
Date:   Mon Jan 19 13:37:04 2009 +0000

    regulator: Allow init_data to be passed to fixed voltage regulators
    
    Signed-off-by: Mark Brown <broonie@opensource.wolfsonmicro.com>
    Signed-off-by: Liam Girdwood <lrg@slimlogic.co.uk>

diff --git a/include/linux/regulator/fixed.h b/include/linux/regulator/fixed.h
index 1387a5d2190e..91b4da31f1b5 100644
--- a/include/linux/regulator/fixed.h
+++ b/include/linux/regulator/fixed.h
@@ -14,9 +14,12 @@
 #ifndef __REGULATOR_FIXED_H
 #define __REGULATOR_FIXED_H
 
+struct regulator_init_data;
+
 struct fixed_voltage_config {
 	const char *supply_name;
 	int microvolts;
+	struct regulator_init_data *init_data;
 };
 
 #endif

commit 48d335ba3164ce99cb8847513d0e3b6ee604eb20
Author: Mark Brown <broonie@opensource.wolfsonmicro.com>
Date:   Wed Apr 30 15:50:21 2008 +0100

    regulator: fixed regulator interface
    
    This patch adds support for fixed regulators. This class of regulator is
    not software controllable but can coexist on machines with software
    controlable regulators.
    
    Signed-off-by: Mark Brown <broonie@opensource.wolfsonmicro.com>
    Signed-off-by: Liam Girdwood <lg@opensource.wolfsonmicro.com>

diff --git a/include/linux/regulator/fixed.h b/include/linux/regulator/fixed.h
new file mode 100644
index 000000000000..1387a5d2190e
--- /dev/null
+++ b/include/linux/regulator/fixed.h
@@ -0,0 +1,22 @@
+/*
+ * fixed.h
+ *
+ * Copyright 2008 Wolfson Microelectronics PLC.
+ *
+ * Author: Mark Brown <broonie@opensource.wolfsonmicro.com>
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License as
+ * published by the Free Software Foundation; either version 2 of the
+ * License, or (at your option) any later version.
+ */
+
+#ifndef __REGULATOR_FIXED_H
+#define __REGULATOR_FIXED_H
+
+struct fixed_voltage_config {
+	const char *supply_name;
+	int microvolts;
+};
+
+#endif
