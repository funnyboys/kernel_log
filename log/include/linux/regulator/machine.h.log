commit 0ed4513c9a32a479b4dc41685be68edf1e99c139
Merge: 65244e5b1f4f d22b85a1b97d
Author: Mark Brown <broonie@kernel.org>
Date:   Thu Jul 4 17:34:34 2019 +0100

    Merge remote-tracking branch 'regulator/topic/coupled' into regulator-next

commit d8ca7d184b33af7913c244900df77c6cad6a5590
Author: Dmitry Osipenko <digetx@gmail.com>
Date:   Mon Jun 24 00:08:31 2019 +0300

    regulator: core: Introduce API for regulators coupling customization
    
    Right now regulator core supports only one type of regulators coupling,
    the "voltage max-spread" which keeps voltages of coupled regulators in a
    given range from each other. A more sophisticated coupling may be required
    in practice, one example is the NVIDIA Tegra SoCs which besides the
    max-spreading have other restrictions that must be adhered. Introduce API
    that allow platforms to provide their own customized coupling algorithms.
    
    Signed-off-by: Dmitry Osipenko <digetx@gmail.com>
    Signed-off-by: Mark Brown <broonie@kernel.org>

diff --git a/include/linux/regulator/machine.h b/include/linux/regulator/machine.h
index 1d34a70ffda2..21db06e5c1ed 100644
--- a/include/linux/regulator/machine.h
+++ b/include/linux/regulator/machine.h
@@ -156,7 +156,7 @@ struct regulation_constraints {
 	int system_load;
 
 	/* used for coupled regulators */
-	int max_spread;
+	u32 *max_spread;
 
 	/* used for changing voltage in steps */
 	int max_uV_step;

commit d2912cb15bdda8ba4a5dd73396ad62641af2f520
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Tue Jun 4 10:11:33 2019 +0200

    treewide: Replace GPLv2 boilerplate/reference with SPDX - rule 500
    
    Based on 2 normalized pattern(s):
    
      this program is free software you can redistribute it and or modify
      it under the terms of the gnu general public license version 2 as
      published by the free software foundation
    
      this program is free software you can redistribute it and or modify
      it under the terms of the gnu general public license version 2 as
      published by the free software foundation #
    
    extracted by the scancode license scanner the SPDX license identifier
    
      GPL-2.0-only
    
    has been chosen to replace the boilerplate/reference in 4122 file(s).
    
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Reviewed-by: Enrico Weigelt <info@metux.net>
    Reviewed-by: Kate Stewart <kstewart@linuxfoundation.org>
    Reviewed-by: Allison Randal <allison@lohutok.net>
    Cc: linux-spdx@vger.kernel.org
    Link: https://lkml.kernel.org/r/20190604081206.933168790@linutronix.de
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/include/linux/regulator/machine.h b/include/linux/regulator/machine.h
index 1d34a70ffda2..5539efa76d26 100644
--- a/include/linux/regulator/machine.h
+++ b/include/linux/regulator/machine.h
@@ -1,3 +1,4 @@
+/* SPDX-License-Identifier: GPL-2.0-only */
 /*
  * machine.h -- SoC Regulator support, machine/board driver API.
  *
@@ -5,10 +6,6 @@
  *
  * Author: Liam Girdwood <lrg@slimlogic.co.uk>
  *
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License version 2 as
- * published by the Free Software Foundation.
- *
  * Regulator Machine/Board Interface.
  */
 

commit 85254bcf394f93a8955814da1eef4d477b63eb84
Author: Dmitry Osipenko <digetx@gmail.com>
Date:   Fri Oct 5 18:36:35 2018 +0300

    regulator: core: Add new max_uV_step constraint
    
    On NVIDIA Tegra30 there is a requirement for regulator "A" to have voltage
    higher than voltage of regulator "B" by N microvolts, the N value changes
    depending on the voltage of regulator "B". This is similar to min-spread
    between voltages of regulators, the difference is that the spread value
    isn't fixed. This means that extra carefulness is required for regulator
    "A" to drop its voltage without violating the requirement, hence its
    voltage should be changed in steps so that its couple "B" could follow
    (there is also max-spread requirement).
    
    Add new "max_uV_step" constraint that breaks voltage change into several
    steps, each step is limited by the max_uV_step value.
    
    Signed-off-by: Dmitry Osipenko <digetx@gmail.com>
    Signed-off-by: Mark Brown <broonie@kernel.org>

diff --git a/include/linux/regulator/machine.h b/include/linux/regulator/machine.h
index a459a5e973a7..1d34a70ffda2 100644
--- a/include/linux/regulator/machine.h
+++ b/include/linux/regulator/machine.h
@@ -158,6 +158,9 @@ struct regulation_constraints {
 	/* used for coupled regulators */
 	int max_spread;
 
+	/* used for changing voltage in steps */
+	int max_uV_step;
+
 	/* valid regulator operating modes for this machine */
 	unsigned int valid_modes_mask;
 

commit 3edd79cf5a44b12dbb13bc320f5788aed6562b36
Author: Marek Szyprowski <m.szyprowski@samsung.com>
Date:   Mon Sep 3 16:49:37 2018 +0200

    regulator: Fix 'do-nothing' value for regulators without suspend state
    
    Some regulators don't have all states defined and in such cases regulator
    core should not assume anything. However in current implementation
    of of_get_regulation_constraints() DO_NOTHING_IN_SUSPEND enable value was
    set only for regulators which had suspend node defined, otherwise the
    default 0 value was used, what means DISABLE_IN_SUSPEND. This lead to
    broken system suspend/resume on boards, which had simple regulator
    constraints definition (without suspend state nodes).
    
    To avoid further mismatches between the default and uninitialized values
    of the suspend enabled/disabled states, change the values of the them,
    so default '0' means DO_NOTHING_IN_SUSPEND.
    
    Fixes: 72069f9957a1: regulator: leave one item to record whether regulator is enabled
    Signed-off-by: Marek Szyprowski <m.szyprowski@samsung.com>
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Cc: stable@vger.kernel.org

diff --git a/include/linux/regulator/machine.h b/include/linux/regulator/machine.h
index 3468703d663a..a459a5e973a7 100644
--- a/include/linux/regulator/machine.h
+++ b/include/linux/regulator/machine.h
@@ -48,9 +48,9 @@ struct regulator;
  * DISABLE_IN_SUSPEND	- turn off regulator in suspend states
  * ENABLE_IN_SUSPEND	- keep regulator on in suspend states
  */
-#define DO_NOTHING_IN_SUSPEND	(-1)
-#define DISABLE_IN_SUSPEND	0
-#define ENABLE_IN_SUSPEND	1
+#define DO_NOTHING_IN_SUSPEND	0
+#define DISABLE_IN_SUSPEND	1
+#define ENABLE_IN_SUSPEND	2
 
 /* Regulator active discharge flags */
 enum regulator_active_discharge {

commit a085a31af566254fb8f7721911c828c8fa797894
Author: Maciej Purski <m.purski@samsung.com>
Date:   Mon Apr 23 16:33:39 2018 +0200

    regulator: core: Parse coupled regulators properties
    
    On Odroid XU3/4 and other Exynos5422 based boards there is a case, that
    different devices on the board are supplied by different regulators
    with non-fixed voltages. If one of these devices temporarily requires
    higher voltage, there might occur a situation that the spread between
    devices' voltages is so high, that there is a risk of changing
    'high' and 'low' states on the interconnection between devices powered
    by those regulators.
    
    Add new structure "coupling_desc" to regulator_dev, which contains
    pointers to all coupled regulators including the owner of the structure,
    number of coupled regulators and counter of currently resolved
    regulators.
    
    Add of_functions to parse all data needed in regulator coupling.
    Provide method to check DTS data consistency. Check if each coupled
    regulator's max_spread is equal and if their lists of regulators match.
    
    Signed-off-by: Maciej Purski <m.purski@samsung.com>
    Signed-off-by: Mark Brown <broonie@kernel.org>

diff --git a/include/linux/regulator/machine.h b/include/linux/regulator/machine.h
index 93a04893c739..3468703d663a 100644
--- a/include/linux/regulator/machine.h
+++ b/include/linux/regulator/machine.h
@@ -103,6 +103,7 @@ struct regulator_state {
  * @ilim_uA: Maximum input current.
  * @system_load: Load that isn't captured by any consumer requests.
  *
+ * @max_spread: Max possible spread between coupled regulators
  * @valid_modes_mask: Mask of modes which may be configured by consumers.
  * @valid_ops_mask: Operations which may be performed by consumers.
  *
@@ -154,6 +155,9 @@ struct regulation_constraints {
 
 	int system_load;
 
+	/* used for coupled regulators */
+	int max_spread;
+
 	/* valid regulator operating modes for this machine */
 	unsigned int valid_modes_mask;
 

commit f7efad10b5c492892b1e5decf5d3ebb29fa5c9af
Author: Chunyan Zhang <zhang.chunyan@linaro.org>
Date:   Fri Jan 26 21:08:47 2018 +0800

    regulator: add PM suspend and resume hooks
    
    In this patch, consumers are allowed to set suspend voltage, and this
    actually just set the "uV" in constraint::regulator_state, when the
    regulator_suspend_late() was called by PM core through callback when
    the system is entering into suspend, the regulator device would act
    suspend activity then.
    
    And it assumes that if any consumer set suspend voltage, the regulator
    device should be enabled in the suspend state.  And if the suspend
    voltage of a regulator device for all consumers was set zero, the
    regulator device would be off in the suspend state.
    
    This patch also provides a new function hook to regulator devices for
    resuming from suspend states.
    
    Signed-off-by: Chunyan Zhang <zhang.chunyan@linaro.org>
    Signed-off-by: Mark Brown <broonie@kernel.org>

diff --git a/include/linux/regulator/machine.h b/include/linux/regulator/machine.h
index c4a56df8931b..93a04893c739 100644
--- a/include/linux/regulator/machine.h
+++ b/include/linux/regulator/machine.h
@@ -66,17 +66,24 @@ enum regulator_active_discharge {
  * state.  One of enabled or disabled must be set for the
  * configuration to be applied.
  *
- * @uV: Operating voltage during suspend.
+ * @uV: Default operating voltage during suspend, it can be adjusted
+ *	among <min_uV, max_uV>.
+ * @min_uV: Minimum suspend voltage may be set.
+ * @max_uV: Maximum suspend voltage may be set.
  * @mode: Operating mode during suspend.
  * @enabled: operations during suspend.
  *	     - DO_NOTHING_IN_SUSPEND
  *	     - DISABLE_IN_SUSPEND
  *	     - ENABLE_IN_SUSPEND
+ * @changeable: Is this state can be switched between enabled/disabled,
  */
 struct regulator_state {
-	int uV;	/* suspend voltage */
-	unsigned int mode; /* suspend regulator operating mode */
+	int uV;
+	int min_uV;
+	int max_uV;
+	unsigned int mode;
 	int enabled;
+	bool changeable;
 };
 
 /**

commit aa27bbc6c6c60227c096d515f55ffe6cdfef7d2b
Author: Chunyan Zhang <zhang.chunyan@linaro.org>
Date:   Fri Jan 26 21:08:46 2018 +0800

    regulator: empty the old suspend functions
    
    Regualtor suspend/resume functions should only be called by PM suspend
    core via registering dev_pm_ops, and regulator devices should implement
    the callback functions.  Thus, any regulator consumer shouldn't call
    the regulator suspend/resume functions directly.
    
    In order to avoid compile errors, two empty functions with the same name
    still be left for the time being.
    
    Signed-off-by: Chunyan Zhang <zhang.chunyan@linaro.org>
    Signed-off-by: Mark Brown <broonie@kernel.org>

diff --git a/include/linux/regulator/machine.h b/include/linux/regulator/machine.h
index ce89c5548c89..c4a56df8931b 100644
--- a/include/linux/regulator/machine.h
+++ b/include/linux/regulator/machine.h
@@ -236,12 +236,12 @@ struct regulator_init_data {
 
 #ifdef CONFIG_REGULATOR
 void regulator_has_full_constraints(void);
-int regulator_suspend_prepare(suspend_state_t state);
-int regulator_suspend_finish(void);
 #else
 static inline void regulator_has_full_constraints(void)
 {
 }
+#endif
+
 static inline int regulator_suspend_prepare(suspend_state_t state)
 {
 	return 0;
@@ -250,6 +250,5 @@ static inline int regulator_suspend_finish(void)
 {
 	return 0;
 }
-#endif
 
 #endif

commit 72069f9957a11896e79e95c8b55ec815e97c2187
Author: Chunyan Zhang <zhang.chunyan@linaro.org>
Date:   Fri Jan 26 21:08:45 2018 +0800

    regulator: leave one item to record whether regulator is enabled
    
    The items "disabled" and "enabled" are a little redundant, since only one
    of them would be set to record if the regulator device should keep on
    or be switched to off in suspend states.
    
    So in this patch, the "disabled" was removed, only leave the "enabled":
      - enabled == 1 for regulator-on-in-suspend
      - enabled == 0 for regulator-off-in-suspend
      - enabled == -1 means do nothing when entering suspend mode.
    
    Signed-off-by: Chunyan Zhang <zhang.chunyan@linaro.org>
    Signed-off-by: Mark Brown <broonie@kernel.org>

diff --git a/include/linux/regulator/machine.h b/include/linux/regulator/machine.h
index 9cd4fef37203..ce89c5548c89 100644
--- a/include/linux/regulator/machine.h
+++ b/include/linux/regulator/machine.h
@@ -42,6 +42,16 @@ struct regulator;
 #define REGULATOR_CHANGE_DRMS		0x10
 #define REGULATOR_CHANGE_BYPASS		0x20
 
+/*
+ * operations in suspend mode
+ * DO_NOTHING_IN_SUSPEND - the default value
+ * DISABLE_IN_SUSPEND	- turn off regulator in suspend states
+ * ENABLE_IN_SUSPEND	- keep regulator on in suspend states
+ */
+#define DO_NOTHING_IN_SUSPEND	(-1)
+#define DISABLE_IN_SUSPEND	0
+#define ENABLE_IN_SUSPEND	1
+
 /* Regulator active discharge flags */
 enum regulator_active_discharge {
 	REGULATOR_ACTIVE_DISCHARGE_DEFAULT,
@@ -58,14 +68,15 @@ enum regulator_active_discharge {
  *
  * @uV: Operating voltage during suspend.
  * @mode: Operating mode during suspend.
- * @enabled: Enabled during suspend.
- * @disabled: Disabled during suspend.
+ * @enabled: operations during suspend.
+ *	     - DO_NOTHING_IN_SUSPEND
+ *	     - DISABLE_IN_SUSPEND
+ *	     - ENABLE_IN_SUSPEND
  */
 struct regulator_state {
 	int uV;	/* suspend voltage */
 	unsigned int mode; /* suspend regulator operating mode */
-	int enabled; /* is regulator enabled in this suspend state */
-	int disabled; /* is the regulator disabled in this suspend state */
+	int enabled;
 };
 
 /**

commit 3ffad468cf1d9825b425733941bdad0d8d20e795
Author: Matthias Kaehlcke <mka@chromium.org>
Date:   Tue May 16 11:43:43 2017 -0700

    regulator: Allow for asymmetric settling times
    
    Some regulators have different settling times for voltage increases and
    decreases. To avoid a time penalty on the faster transition allow for
    different settings for up- and downward transitions.
    
    Signed-off-by: Matthias Kaehlcke <mka@chromium.org>
    Acked-by: Laxman Dewangan <ldewangan@nvidia.com>
    Signed-off-by: Mark Brown <broonie@kernel.org>

diff --git a/include/linux/regulator/machine.h b/include/linux/regulator/machine.h
index 117699d1f7df..9cd4fef37203 100644
--- a/include/linux/regulator/machine.h
+++ b/include/linux/regulator/machine.h
@@ -110,6 +110,10 @@ struct regulator_state {
  * @ramp_delay: Time to settle down after voltage change (unit: uV/us)
  * @settling_time: Time to settle down after voltage change when voltage
  *		   change is non-linear (unit: microseconds).
+ * @settling_time_up: Time to settle down after voltage increase when voltage
+ *		      change is non-linear (unit: microseconds).
+ * @settling_time_down : Time to settle down after voltage decrease when
+ *			 voltage change is non-linear (unit: microseconds).
  * @active_discharge: Enable/disable active discharge. The enum
  *		      regulator_active_discharge values are used for
  *		      initialisation.
@@ -152,6 +156,8 @@ struct regulation_constraints {
 
 	unsigned int ramp_delay;
 	unsigned int settling_time;
+	unsigned int settling_time_up;
+	unsigned int settling_time_down;
 	unsigned int enable_time;
 
 	unsigned int active_discharge;

commit 81bc8e386f394961b22cb0758c78cee8e0905233
Merge: 0603b37e1ea0 264b88c9e5c8 c6182ac96096 d6c1dc3f52e3 43594dd453f0 c635df496a5c
Author: Mark Brown <broonie@kernel.org>
Date:   Sun Apr 30 22:17:36 2017 +0900

    Merge remote-tracking branches 'regulator/topic/notifier', 'regulator/topic/pfuze100', 'regulator/topic/settle', 'regulator/topic/tps65132' and 'regulator/topic/twl6030' into regulator-next

commit d6c1dc3f52e3a65f35c58433ba57d14c0bad902f
Author: Laxman Dewangan <ldewangan@nvidia.com>
Date:   Tue Apr 4 18:59:50 2017 +0530

    regulator: Add settling time for non-linear voltage transition
    
    Some regulators (some PWM regulators) have the voltage transition
    non-linear i.e. exponentially. On such cases, the settling time
    for voltage transition can not be presented in the voltage-ramp-delay.
    
    Add new property for non-linear voltage transition and handle this
    in getting the voltage settling time.
    
    Signed-off-by: Laxman Dewangan <ldewangan@nvidia.com>
    Signed-off-by: Mark Brown <broonie@kernel.org>

diff --git a/include/linux/regulator/machine.h b/include/linux/regulator/machine.h
index ad3e5158e586..598a493b3927 100644
--- a/include/linux/regulator/machine.h
+++ b/include/linux/regulator/machine.h
@@ -108,6 +108,8 @@ struct regulator_state {
  * @initial_state: Suspend state to set by default.
  * @initial_mode: Mode to set at startup.
  * @ramp_delay: Time to settle down after voltage change (unit: uV/us)
+ * @settling_time: Time to settle down after voltage change when voltage
+ *		   change is non-linear (unit: microseconds).
  * @active_discharge: Enable/disable active discharge. The enum
  *		      regulator_active_discharge values are used for
  *		      initialisation.
@@ -149,6 +151,7 @@ struct regulation_constraints {
 	unsigned int initial_mode;
 
 	unsigned int ramp_delay;
+	unsigned int settling_time;
 	unsigned int enable_time;
 
 	unsigned int active_discharge;

commit 8a1115ff6b6d90cf1066ec3a0c4e51276553eebe
Author: Masahiro Yamada <yamada.masahiro@socionext.com>
Date:   Thu Mar 9 16:16:31 2017 -0800

    scripts/spelling.txt: add "disble(d)" pattern and fix typo instances
    
    Fix typos and add the following to the scripts/spelling.txt:
    
      disble||disable
      disbled||disabled
    
    I kept the TSL2563_INT_DISBLED in /drivers/iio/light/tsl2563.c
    untouched.  The macro is not referenced at all, but this commit is
    touching only comment blocks just in case.
    
    Link: http://lkml.kernel.org/r/1481573103-11329-20-git-send-email-yamada.masahiro@socionext.com
    Signed-off-by: Masahiro Yamada <yamada.masahiro@socionext.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

diff --git a/include/linux/regulator/machine.h b/include/linux/regulator/machine.h
index ad3e5158e586..c9f795e9a2ee 100644
--- a/include/linux/regulator/machine.h
+++ b/include/linux/regulator/machine.h
@@ -65,7 +65,7 @@ struct regulator_state {
 	int uV;	/* suspend voltage */
 	unsigned int mode; /* suspend regulator operating mode */
 	int enabled; /* is regulator enabled in this suspend state */
-	int disabled; /* is the regulator disbled in this suspend state */
+	int disabled; /* is the regulator disabled in this suspend state */
 };
 
 /**

commit abf2f825d115397944cab91a20c937331d77e37c
Author: Luis de Bethencourt <luisbg@osg.samsung.com>
Date:   Wed Mar 23 11:35:39 2016 +0000

    regulator: add missing description for set_over_current_protection
    
    Over current protection is missing descriptions for documentation.
    
    Signed-off-by: Luis de Bethencourt <luisbg@osg.samsung.com>
    Signed-off-by: Mark Brown <broonie@kernel.org>

diff --git a/include/linux/regulator/machine.h b/include/linux/regulator/machine.h
index 5d627c83a630..ad3e5158e586 100644
--- a/include/linux/regulator/machine.h
+++ b/include/linux/regulator/machine.h
@@ -97,6 +97,7 @@ struct regulator_state {
  * @ramp_disable: Disable ramp delay when initialising or when setting voltage.
  * @soft_start: Enable soft start so that voltage ramps slowly.
  * @pull_down: Enable pull down when regulator is disabled.
+ * @over_current_protection: Auto disable on over current event.
  *
  * @input_uV: Input voltage for regulator when supplied by another regulator.
  *

commit 670666b9e0aff40c65d8061a2f53e79eee238685
Author: Laxman Dewangan <ldewangan@nvidia.com>
Date:   Wed Mar 2 16:24:46 2016 +0530

    regulator: core: Add support for active-discharge configuration
    
    Add support to enable/disable active discharge of regulator via
    machine constraints. This configuration is done when setting
    machine constraint during regulator register and if regulator
    driver implemented the callback ops.
    
    Signed-off-by: Laxman Dewangan <ldewangan@nvidia.com>
    Signed-off-by: Mark Brown <broonie@kernel.org>

diff --git a/include/linux/regulator/machine.h b/include/linux/regulator/machine.h
index a1067d0b3991..5d627c83a630 100644
--- a/include/linux/regulator/machine.h
+++ b/include/linux/regulator/machine.h
@@ -42,6 +42,13 @@ struct regulator;
 #define REGULATOR_CHANGE_DRMS		0x10
 #define REGULATOR_CHANGE_BYPASS		0x20
 
+/* Regulator active discharge flags */
+enum regulator_active_discharge {
+	REGULATOR_ACTIVE_DISCHARGE_DEFAULT,
+	REGULATOR_ACTIVE_DISCHARGE_DISABLE,
+	REGULATOR_ACTIVE_DISCHARGE_ENABLE,
+};
+
 /**
  * struct regulator_state - regulator state during low power system states
  *
@@ -100,6 +107,9 @@ struct regulator_state {
  * @initial_state: Suspend state to set by default.
  * @initial_mode: Mode to set at startup.
  * @ramp_delay: Time to settle down after voltage change (unit: uV/us)
+ * @active_discharge: Enable/disable active discharge. The enum
+ *		      regulator_active_discharge values are used for
+ *		      initialisation.
  * @enable_time: Turn-on time of the rails (unit: microseconds)
  */
 struct regulation_constraints {
@@ -140,6 +150,8 @@ struct regulation_constraints {
 	unsigned int ramp_delay;
 	unsigned int enable_time;
 
+	unsigned int active_discharge;
+
 	/* constraint flags */
 	unsigned always_on:1;	/* regulator never off when system is on */
 	unsigned boot_on:1;	/* bootloader/firmware enabled regulator */

commit 3a003baeec246f604ed1d2e0087560d7f15edcc6
Author: Stephen Boyd <sboyd@codeaurora.org>
Date:   Fri Jul 17 14:41:54 2015 -0700

    regulator: Add over current protection (OCP) support
    
    Some regulators can automatically shut down when they detect an
    over current event. Add an op (set_over_current_protection) and a
    DT property + constraint to support this capability.
    
    Signed-off-by: Stephen Boyd <sboyd@codeaurora.org>
    Signed-off-by: Mark Brown <broonie@kernel.org>

diff --git a/include/linux/regulator/machine.h b/include/linux/regulator/machine.h
index b11be1260129..a1067d0b3991 100644
--- a/include/linux/regulator/machine.h
+++ b/include/linux/regulator/machine.h
@@ -147,6 +147,7 @@ struct regulation_constraints {
 	unsigned ramp_disable:1; /* disable ramp delay */
 	unsigned soft_start:1;	/* ramp voltage slowly */
 	unsigned pull_down:1;	/* pull down resistor when regulator off */
+	unsigned over_current_protection:1; /* auto disable on over current */
 };
 
 /**

commit 733ada000f2c9618ccbac7b9ba146113f0a6675b
Merge: 0460a368ea4c 130daa3f3570 ab101e35448b 419d06a1cf58 c751ad0dd640
Author: Mark Brown <broonie@kernel.org>
Date:   Mon Jun 22 11:19:56 2015 +0100

    Merge remote-tracking branches 'regulator/topic/of', 'regulator/topic/pwm', 'regulator/topic/qcom' and 'regulator/topic/soft-start' into regulator-next

commit c751ad0dd640f4ce9269acd7a54de5ba8092e99e
Author: Stephen Boyd <sboyd@codeaurora.org>
Date:   Fri Jun 12 15:48:06 2015 -0700

    regulator: Add docbook for soft start
    
    The docbook for these members is missing. Add them.
    
    Warning(include/linux/regulator/machine.h:147): No description
    found for parameter 'soft_start'
    Warning(include/linux/regulator/driver.h:197): No description
    found for parameter 'set_soft_start'
    
    Reported-by: kbuild test robot <fengguang.wu@intel.com>
    Signed-off-by: Stephen Boyd <sboyd@codeaurora.org>
    Signed-off-by: Mark Brown <broonie@kernel.org>

diff --git a/include/linux/regulator/machine.h b/include/linux/regulator/machine.h
index 7f7d0a3fe1e1..1258275d3751 100644
--- a/include/linux/regulator/machine.h
+++ b/include/linux/regulator/machine.h
@@ -87,6 +87,7 @@ struct regulator_state {
  *           applied.
  * @apply_uV: Apply the voltage constraint when initialising.
  * @ramp_disable: Disable ramp delay when initialising or when setting voltage.
+ * @soft_start: Enable soft start so that voltage ramps slowly.
  * @pull_down: Enable pull down when regulator is disabled.
  *
  * @input_uV: Input voltage for regulator when supplied by another regulator.

commit 36e4f839de59b6216a16cdf5c1d3263f4dbd9421
Author: Stephen Boyd <sboyd@codeaurora.org>
Date:   Thu Jun 11 17:37:06 2015 -0700

    regulator: Add input current limit support
    
    Some regulators can limit their input current (typically annotated
    as ilim). Add an op (set_input_current_limit) and a DT property +
    constraint to support this.
    
    Signed-off-by: Stephen Boyd <sboyd@codeaurora.org>
    Signed-off-by: Mark Brown <broonie@kernel.org>

diff --git a/include/linux/regulator/machine.h b/include/linux/regulator/machine.h
index 7f7d0a3fe1e1..85a3b457de51 100644
--- a/include/linux/regulator/machine.h
+++ b/include/linux/regulator/machine.h
@@ -75,6 +75,7 @@ struct regulator_state {
  *
  * @min_uA: Smallest current consumers may set.
  * @max_uA: Largest current consumers may set.
+ * @ilim_uA: Maximum input current.
  * @system_load: Load that isn't captured by any consumer requests.
  *
  * @valid_modes_mask: Mask of modes which may be configured by consumers.
@@ -113,6 +114,7 @@ struct regulation_constraints {
 	/* current output range (inclusive) - for current control */
 	int min_uA;
 	int max_uA;
+	int ilim_uA;
 
 	int system_load;
 

commit 57f66b78860968fc7eddc9ce25f8e57f7e5000bd
Author: Stephen Boyd <sboyd@codeaurora.org>
Date:   Thu Jun 11 17:37:05 2015 -0700

    regulator: Add soft start support
    
    Some regulators support a "soft start" feature where the voltage
    ramps up slowly when the regulator is enabled. Add an op
    (set_soft_start) and a DT property + constraint to support this.
    
    Signed-off-by: Stephen Boyd <sboyd@codeaurora.org>
    Signed-off-by: Mark Brown <broonie@kernel.org>

diff --git a/include/linux/regulator/machine.h b/include/linux/regulator/machine.h
index 8ffb0619a03c..7f7d0a3fe1e1 100644
--- a/include/linux/regulator/machine.h
+++ b/include/linux/regulator/machine.h
@@ -142,6 +142,7 @@ struct regulation_constraints {
 	unsigned boot_on:1;	/* bootloader/firmware enabled regulator */
 	unsigned apply_uV:1;	/* apply uV constraint if min == max */
 	unsigned ramp_disable:1; /* disable ramp delay */
+	unsigned soft_start:1;	/* ramp voltage slowly */
 	unsigned pull_down:1;	/* pull down resistor when regulator off */
 };
 

commit 23c779b9f9161d6568d3b2fca06e70ad182c480c
Author: Stephen Boyd <sboyd@codeaurora.org>
Date:   Thu Jun 11 17:37:04 2015 -0700

    regulator: Add pull down support
    
    Some regulators need to be configured to pull down a resistor
    when the regulator is disabled. Add an op (set_pull_down) and a
    DT property + constraint to support this.
    
    Signed-off-by: Stephen Boyd <sboyd@codeaurora.org>
    Signed-off-by: Mark Brown <broonie@kernel.org>

diff --git a/include/linux/regulator/machine.h b/include/linux/regulator/machine.h
index 01526559c8c3..8ffb0619a03c 100644
--- a/include/linux/regulator/machine.h
+++ b/include/linux/regulator/machine.h
@@ -87,6 +87,7 @@ struct regulator_state {
  *           applied.
  * @apply_uV: Apply the voltage constraint when initialising.
  * @ramp_disable: Disable ramp delay when initialising or when setting voltage.
+ * @pull_down: Enable pull down when regulator is disabled.
  *
  * @input_uV: Input voltage for regulator when supplied by another regulator.
  *
@@ -141,6 +142,7 @@ struct regulation_constraints {
 	unsigned boot_on:1;	/* bootloader/firmware enabled regulator */
 	unsigned apply_uV:1;	/* apply uV constraint if min == max */
 	unsigned ramp_disable:1; /* disable ramp delay */
+	unsigned pull_down:1;	/* pull down resistor when regulator off */
 };
 
 /**

commit 22a10bca280073f81e9e2d9fed6f90a3bcf00236
Author: Stephen Boyd <sboyd@codeaurora.org>
Date:   Thu Jun 11 17:37:03 2015 -0700

    regulator: Add system_load constraint
    
    Some regulators have a fixed load that isn't captured by
    consumers that the kernel knows about. Add a constraint to
    support this.
    
    Signed-off-by: Stephen Boyd <sboyd@codeaurora.org>
    Signed-off-by: Mark Brown <broonie@kernel.org>

diff --git a/include/linux/regulator/machine.h b/include/linux/regulator/machine.h
index b07562e082c4..01526559c8c3 100644
--- a/include/linux/regulator/machine.h
+++ b/include/linux/regulator/machine.h
@@ -75,6 +75,7 @@ struct regulator_state {
  *
  * @min_uA: Smallest current consumers may set.
  * @max_uA: Largest current consumers may set.
+ * @system_load: Load that isn't captured by any consumer requests.
  *
  * @valid_modes_mask: Mask of modes which may be configured by consumers.
  * @valid_ops_mask: Operations which may be performed by consumers.
@@ -112,6 +113,8 @@ struct regulation_constraints {
 	int min_uA;
 	int max_uA;
 
+	int system_load;
+
 	/* valid regulator operating modes for this machine */
 	unsigned int valid_modes_mask;
 

commit 509102760da3a21831e763560ba4715760e3fbda
Author: Krzysztof Kozlowski <k.kozlowski@samsung.com>
Date:   Wed Feb 4 11:45:28 2015 +0100

    regulator: Fix build breakage on !REGULATOR
    
    Add missing stubs for regulator_suspend_prepare() and
    regulator_suspend_finish() to fix exynos_defconfig build without
    REGULATOR:
    
    arch/arm/mach-exynos/built-in.o: In function `exynos_suspend_finish':
    arch/arm/mach-exynos/suspend.c:537: undefined reference to `regulator_suspend_finish'
    arch/arm/mach-exynos/built-in.o: In function `exynos_suspend_prepare':
    arch/arm/mach-exynos/suspend.c:520: undefined reference to `regulator_suspend_prepare'
    make: *** [vmlinux] Error 1
    
    Signed-off-by: Krzysztof Kozlowski <k.kozlowski@samsung.com>
    Reported-by: Joerg Roedel <joro@8bytes.org>
    Reported-by: Marek Szyprowski <m.szyprowski@samsung.com>
    Signed-off-by: Mark Brown <broonie@kernel.org>

diff --git a/include/linux/regulator/machine.h b/include/linux/regulator/machine.h
index 0b08d05d470b..b07562e082c4 100644
--- a/include/linux/regulator/machine.h
+++ b/include/linux/regulator/machine.h
@@ -191,15 +191,22 @@ struct regulator_init_data {
 	void *driver_data;	/* core does not touch this */
 };
 
-int regulator_suspend_prepare(suspend_state_t state);
-int regulator_suspend_finish(void);
-
 #ifdef CONFIG_REGULATOR
 void regulator_has_full_constraints(void);
+int regulator_suspend_prepare(suspend_state_t state);
+int regulator_suspend_finish(void);
 #else
 static inline void regulator_has_full_constraints(void)
 {
 }
+static inline int regulator_suspend_prepare(suspend_state_t state)
+{
+	return 0;
+}
+static inline int regulator_suspend_finish(void)
+{
+	return 0;
+}
 #endif
 
 #endif

commit a8dbfeedfe47a19a4712749eb2444b1d7ea1150e
Author: Randy Dunlap <rdunlap@infradead.org>
Date:   Wed Aug 27 14:31:24 2014 -0700

    regulator: fix kernel-doc warnings in header files
    
    Fix kernel-doc warnings in regulator header files:
    
    Warning(..//include/linux/regulator/machine.h:140): No description found for parameter 'ramp_disable'
    Warning(..//include/linux/regulator/driver.h:279): No description found for parameter 'linear_ranges'
    Warning(..//include/linux/regulator/driver.h:279): No description found for parameter 'n_linear_ranges'
    
    Signed-off-by: Randy Dunlap <rdunlap@infradead.org>
    Signed-off-by: Mark Brown <broonie@linaro.org>

diff --git a/include/linux/regulator/machine.h b/include/linux/regulator/machine.h
index 730e638c5589..0b08d05d470b 100644
--- a/include/linux/regulator/machine.h
+++ b/include/linux/regulator/machine.h
@@ -85,6 +85,7 @@ struct regulator_state {
  *           bootloader then it will be enabled when the constraints are
  *           applied.
  * @apply_uV: Apply the voltage constraint when initialising.
+ * @ramp_disable: Disable ramp delay when initialising or when setting voltage.
  *
  * @input_uV: Input voltage for regulator when supplied by another regulator.
  *

commit aef393da7501693a1b91a1cfed1a9ea408ceabe6
Merge: 88c260a18081 4040394e12cb
Author: Mark Brown <broonie@linaro.org>
Date:   Thu Oct 24 11:11:39 2013 +0100

    Merge remote-tracking branch 'regulator/topic/optional' into regulator-next

commit 00c877c69ba315d6c565a4df51c71b11e82cdeb8
Author: Laxman Dewangan <ldewangan@nvidia.com>
Date:   Wed Sep 18 18:18:02 2013 +0530

    regulator: core: add support for configuring turn-on time through constraints
    
    The turn-on time of the regulator depends on the regulator device's
    electrical characteristics. Sometimes regulator turn-on time also
    depends on the capacitive load on the given platform and it can be
    more than the datasheet value.
    
    The driver provides the enable-time as per datasheet.
    
    Add support for configure the enable ramp time through regulator
    constraints so that regulator core can take this value for enable
    time for that regulator.
    
    Signed-off-by: Laxman Dewangan <ldewangan@nvidia.com>
    Acked-by: Stephen Warren <swarren@nvidia.com>
    Signed-off-by: Mark Brown <broonie@linaro.org>

diff --git a/include/linux/regulator/machine.h b/include/linux/regulator/machine.h
index 999b20ce06cf..8108751acb86 100644
--- a/include/linux/regulator/machine.h
+++ b/include/linux/regulator/machine.h
@@ -95,6 +95,7 @@ struct regulator_state {
  * @initial_state: Suspend state to set by default.
  * @initial_mode: Mode to set at startup.
  * @ramp_delay: Time to settle down after voltage change (unit: uV/us)
+ * @enable_time: Turn-on time of the rails (unit: microseconds)
  */
 struct regulation_constraints {
 
@@ -129,6 +130,7 @@ struct regulation_constraints {
 	unsigned int initial_mode;
 
 	unsigned int ramp_delay;
+	unsigned int enable_time;
 
 	/* constraint flags */
 	unsigned always_on:1;	/* regulator never off when system is on */

commit 4f0ac6dabf867095b31f851ba0d0ceaca2f87e2e
Author: Mark Brown <broonie@linaro.org>
Date:   Fri Sep 13 19:51:47 2013 +0100

    regulator: core: Remove unused regulator_use_dummy_regulator()
    
    No boards have used this functionality and the new default of providing
    dummy regulators by default provides a better solution to the problem it
    was trying to solve.
    
    Signed-off-by: Mark Brown <broonie@linaro.org>

diff --git a/include/linux/regulator/machine.h b/include/linux/regulator/machine.h
index 999b20ce06cf..a9f7c55a4d4d 100644
--- a/include/linux/regulator/machine.h
+++ b/include/linux/regulator/machine.h
@@ -193,15 +193,10 @@ int regulator_suspend_finish(void);
 
 #ifdef CONFIG_REGULATOR
 void regulator_has_full_constraints(void);
-void regulator_use_dummy_regulator(void);
 #else
 static inline void regulator_has_full_constraints(void)
 {
 }
-
-static inline void regulator_use_dummy_regulator(void)
-{
-}
 #endif
 
 #endif

commit 1653ccf4c52df6a4abe8ec2f33f2cb2896d129ea
Author: Yadwinder Singh Brar <yadi.brar@samsung.com>
Date:   Sat Jun 29 18:21:15 2013 +0530

    regulator: core: Add support for disabling ramp delay
    
    Some hardwares support disabling ramp delay, so adding ramp_disable flag to
    constraints. It will be used to figure out whether ramp_delay in constraints
    is explicitly set to zero or its unintialized (zero by default).
    And we don't need to call set_voltage_time_sel() for regulators for whom ramp
    delay is disabled in constraints.
    
    Signed-off-by: Yadwinder Singh Brar <yadi.brar@samsung.com>
    Signed-off-by: Mark Brown <broonie@linaro.org>

diff --git a/include/linux/regulator/machine.h b/include/linux/regulator/machine.h
index 36adbc82de6a..999b20ce06cf 100644
--- a/include/linux/regulator/machine.h
+++ b/include/linux/regulator/machine.h
@@ -134,6 +134,7 @@ struct regulation_constraints {
 	unsigned always_on:1;	/* regulator never off when system is on */
 	unsigned boot_on:1;	/* bootloader/firmware enabled regulator */
 	unsigned apply_uV:1;	/* apply uV constraint if min == max */
+	unsigned ramp_disable:1; /* disable ramp delay */
 };
 
 /**

commit f59c8f9fe689790248ae7aa7426579982050638c
Author: Mark Brown <broonie@opensource.wolfsonmicro.com>
Date:   Fri Aug 31 10:36:37 2012 -0700

    regulator: core: Support bypass mode
    
    Many regulators support a bypass mode where they simply switch their
    input supply to the output. This is mainly used in low power retention
    states where power consumption is extremely low so higher voltage or
    less clean supplies can be used.
    
    Support this by providing ops for the drivers and a consumer API which
    allows the device to be put into bypass mode if all consumers enable it
    and the machine enables permission for this.
    
    This is not supported as a mode since the existing modes are rarely used
    due to fuzzy definition and mostly redundant with modern hardware which is
    able to respond promptly to load changes.
    
    Signed-off-by: Mark Brown <broonie@opensource.wolfsonmicro.com>
    Reviewed-by: Graeme Gregory <gg@slimlogic.co.uk>

diff --git a/include/linux/regulator/machine.h b/include/linux/regulator/machine.h
index 40dd0a394cfa..36adbc82de6a 100644
--- a/include/linux/regulator/machine.h
+++ b/include/linux/regulator/machine.h
@@ -32,6 +32,7 @@ struct regulator;
  *           board/machine.
  * STATUS:   Regulator can be enabled and disabled.
  * DRMS:     Dynamic Regulator Mode Switching is enabled for this regulator.
+ * BYPASS:   Regulator can be put into bypass mode
  */
 
 #define REGULATOR_CHANGE_VOLTAGE	0x1
@@ -39,6 +40,7 @@ struct regulator;
 #define REGULATOR_CHANGE_MODE		0x4
 #define REGULATOR_CHANGE_STATUS		0x8
 #define REGULATOR_CHANGE_DRMS		0x10
+#define REGULATOR_CHANGE_BYPASS		0x20
 
 /**
  * struct regulator_state - regulator state during low power system states

commit ea38d13fd1666bc030cb1c0feec5b0da2f89f9b2
Author: Axel Lin <axel.lin@gmail.com>
Date:   Mon Jun 18 14:03:16 2012 +0800

    regulator: core: Change the unit of ramp_delay from mV/uS to uV/uS
    
    This change makes it possible to set ramp_delay with 0.xxx mV/uS without
    truncation issue.
    
    Signed-off-by: Axel Lin <axel.lin@gmail.com>
    Signed-off-by: Mark Brown <broonie@opensource.wolfsonmicro.com>

diff --git a/include/linux/regulator/machine.h b/include/linux/regulator/machine.h
index 5f37ad3cc172..40dd0a394cfa 100644
--- a/include/linux/regulator/machine.h
+++ b/include/linux/regulator/machine.h
@@ -92,7 +92,7 @@ struct regulator_state {
  *                 mode.
  * @initial_state: Suspend state to set by default.
  * @initial_mode: Mode to set at startup.
- * @ramp_delay: Time to settle down after voltage change (unit: mV/us)
+ * @ramp_delay: Time to settle down after voltage change (unit: uV/us)
  */
 struct regulation_constraints {
 

commit 6f0b2c696ca340cc2da381fe693fda3f8fdb2149
Author: Yadwinder Singh Brar <yadi.brar01@gmail.com>
Date:   Mon Jun 11 17:41:08 2012 +0530

    regulator: Add ramp_delay configuration to constraints
    
    For some hardwares ramp_delay for BUCKs is a configurable parameter which can
    be configured through DT or board file.This patch adds ramp_delay to regulator
    constraints and allow user to configure it for regulators which supports this
    feature, through DT or board file. It will provide two ways of setting the
    ramp_delay for a regulator:
            First, by setting it as constraints in board file(for configurable
    regulators) and set_machine_constraints() will take care of setting it on
    hardware by calling(the provided) .set_ramp_delay() operation(callback).
            Second, by setting it as data in regulator_desc(as fixed/default
    ramp_delay rate) for a regulator in driver.
    
    regulator_set_voltage_time_sel() will give preference to
    constraints->ramp_delay while reading ramp_delay rate for regulator. Similarly
    users should also take care accordingly while refering ramp_delay rate(in case
    of implementing their private .set_voltage_time_sel() callbacks for different
    regulators).
    
    [Rewrote subject for 80 columns -- broonie]
    
    Signed-off-by: Yadwinder Singh Brar <yadi.brar@samsung.com>
    Signed-off-by: Mark Brown <broonie@opensource.wolfsonmicro.com>

diff --git a/include/linux/regulator/machine.h b/include/linux/regulator/machine.h
index b02108446be7..5f37ad3cc172 100644
--- a/include/linux/regulator/machine.h
+++ b/include/linux/regulator/machine.h
@@ -92,6 +92,7 @@ struct regulator_state {
  *                 mode.
  * @initial_state: Suspend state to set by default.
  * @initial_mode: Mode to set at startup.
+ * @ramp_delay: Time to settle down after voltage change (unit: mV/us)
  */
 struct regulation_constraints {
 
@@ -125,6 +126,8 @@ struct regulation_constraints {
 	/* mode to set on startup */
 	unsigned int initial_mode;
 
+	unsigned int ramp_delay;
+
 	/* constraint flags */
 	unsigned always_on:1;	/* regulator never off when system is on */
 	unsigned boot_on:1;	/* bootloader/firmware enabled regulator */

commit 15c08f664d8ca4f4d0e202cbd4034422a706ef80
Author: Axel Lin <axel.lin@gmail.com>
Date:   Thu Mar 29 12:21:17 2012 +0800

    regulator: Fix comments in include/linux/regulator/machine.h
    
    Signed-off-by: Axel Lin <axel.lin@gmail.com>
    Signed-off-by: Mark Brown <broonie@opensource.wolfsonmicro.com>

diff --git a/include/linux/regulator/machine.h b/include/linux/regulator/machine.h
index 7abb16093312..b02108446be7 100644
--- a/include/linux/regulator/machine.h
+++ b/include/linux/regulator/machine.h
@@ -71,7 +71,7 @@ struct regulator_state {
  * @uV_offset: Offset applied to voltages from consumer to compensate for
  *             voltage drops.
  *
- * @min_uA: Smallest consumers consumers may set.
+ * @min_uA: Smallest current consumers may set.
  * @max_uA: Largest current consumers may set.
  *
  * @valid_modes_mask: Mask of modes which may be configured by consumers.
@@ -134,10 +134,8 @@ struct regulation_constraints {
 /**
  * struct regulator_consumer_supply - supply -> device mapping
  *
- * This maps a supply name to a device.  Only one of dev or dev_name
- * can be specified.  Use of dev_name allows support for buses which
- * make struct device available late such as I2C and is the preferred
- * form.
+ * This maps a supply name to a device. Use of dev_name allows support for
+ * buses which make struct device available late such as I2C.
  *
  * @dev_name: Result of dev_name() for the consumer.
  * @supply: Name for the supply.

commit 737f360d5bef5e01c6cfa755dca0b449a154c1e0
Author: Mark Brown <broonie@opensource.wolfsonmicro.com>
Date:   Thu Feb 2 00:10:51 2012 +0000

    regulator: Remove support for supplies specified by struct device
    
    This has been deprecated for a very long time now.
    
    Signed-off-by: Mark Brown <broonie@opensource.wolfsonmicro.com>
    Reviewed-by: Linus Walleij <linus.walleij@linaro.org>
    Acked-by: Liam Girdwood <lrg@ti.com>

diff --git a/include/linux/regulator/machine.h b/include/linux/regulator/machine.h
index f3f13fd5868f..7abb16093312 100644
--- a/include/linux/regulator/machine.h
+++ b/include/linux/regulator/machine.h
@@ -139,12 +139,10 @@ struct regulation_constraints {
  * make struct device available late such as I2C and is the preferred
  * form.
  *
- * @dev: Device structure for the consumer.
  * @dev_name: Result of dev_name() for the consumer.
  * @supply: Name for the supply.
  */
 struct regulator_consumer_supply {
-	struct device *dev;	/* consumer */
 	const char *dev_name;   /* dev_name() for consumer */
 	const char *supply;	/* consumer supply - e.g. "vcc" */
 };

commit 0151546fb34e92494acd65ed84a603c2a4a90168
Author: Mark Brown <broonie@opensource.wolfsonmicro.com>
Date:   Fri Oct 14 13:36:04 2011 +0100

    regulator: Constify constraints name
    
    There's no need for the API to modify it and having it const makes it
    easier to use with random strings the board code has.
    
    Signed-off-by: Mark Brown <broonie@opensource.wolfsonmicro.com>

diff --git a/include/linux/regulator/machine.h b/include/linux/regulator/machine.h
index ce3127a75c88..f3f13fd5868f 100644
--- a/include/linux/regulator/machine.h
+++ b/include/linux/regulator/machine.h
@@ -95,7 +95,7 @@ struct regulator_state {
  */
 struct regulation_constraints {
 
-	char *name;
+	const char *name;
 
 	/* voltage output range (inclusive) - for voltage control */
 	int min_uV;

commit bf5892a8167e4aa5a9a6d72f803fde850e0c5753
Author: Mark Brown <broonie@opensource.wolfsonmicro.com>
Date:   Sun May 8 22:13:37 2011 +0100

    regulator: Support voltage offsets to compensate for drops in system
    
    Some systems, particularly physically large systems used for early
    prototyping, may experience substantial voltage drops between the regulator
    and the consumers as a result of long traces in the system. With these
    systems voltages may need to be set higher than requested in order to
    ensure reliable system operation.
    
    Allow systems to work around such hardware issues by allowing constraints
    to supply an offset to be applied to any requested and reported voltages.
    This is not ideal, especially since the voltage drop may be load dependant,
    but is sufficient for most affected systems, it is not expected to be used
    in production hardware. The offset is applied after all constraint
    processing so constraints should be specified in terms of consumer values
    not physically configured values.
    
    Signed-off-by: Mark Brown <broonie@opensource.wolfsonmicro.com>
    Signed-off-by: Liam Girdwood <lrg@slimlogic.co.uk>

diff --git a/include/linux/regulator/machine.h b/include/linux/regulator/machine.h
index 8f1a55d99494..ce3127a75c88 100644
--- a/include/linux/regulator/machine.h
+++ b/include/linux/regulator/machine.h
@@ -68,6 +68,8 @@ struct regulator_state {
  *
  * @min_uV: Smallest voltage consumers may set.
  * @max_uV: Largest voltage consumers may set.
+ * @uV_offset: Offset applied to voltages from consumer to compensate for
+ *             voltage drops.
  *
  * @min_uA: Smallest consumers consumers may set.
  * @max_uA: Largest current consumers may set.
@@ -99,6 +101,8 @@ struct regulation_constraints {
 	int min_uV;
 	int max_uV;
 
+	int uV_offset;
+
 	/* current output range (inclusive) - for current control */
 	int min_uA;
 	int max_uA;

commit 492c826b9facefa84995f4dea917e301b5ee0884
Author: Mark Brown <broonie@opensource.wolfsonmicro.com>
Date:   Sun May 8 22:30:18 2011 +0100

    regulator: Remove supply_regulator_dev from machine configuration
    
    supply_regulator_dev (using a struct pointer) has been deprecated in favour
    of supply_regulator (using a regulator name) for quite a few releases
    now with a warning generated if it is used and there are no current in tree
    users so just remove the code.
    
    Signed-off-by: Mark Brown <broonie@opensource.wolfsonmicro.com>
    Signed-off-by: Liam Girdwood <lrg@slimlogic.co.uk>

diff --git a/include/linux/regulator/machine.h b/include/linux/regulator/machine.h
index c4c4fc45f856..8f1a55d99494 100644
--- a/include/linux/regulator/machine.h
+++ b/include/linux/regulator/machine.h
@@ -160,8 +160,6 @@ struct regulator_consumer_supply {
  * @supply_regulator: Parent regulator.  Specified using the regulator name
  *                    as it appears in the name field in sysfs, which can
  *                    be explicitly set using the constraints field 'name'.
- * @supply_regulator_dev: Parent regulator (if any) - DEPRECATED in favour
- *                        of supply_regulator.
  *
  * @constraints: Constraints.  These must be specified for the regulator to
  *               be usable.
@@ -173,7 +171,6 @@ struct regulator_consumer_supply {
  */
 struct regulator_init_data {
 	const char *supply_regulator;        /* or NULL for system supply */
-	struct device *supply_regulator_dev; /* or NULL for system supply */
 
 	struct regulation_constraints constraints;
 

commit 7a32b589a9c856493bccb02db55047edc04eee7b
Author: MyungJoo Ham <myungjoo.ham@samsung.com>
Date:   Fri Mar 11 10:13:59 2011 +0900

    Regulator: add suspend-finish API for regulator core.
    
    The regulator core had suspend-prepare that turns off the regulators
    when entering a system-wide suspend. However, it did not have
    suspend-finish that pairs with suspend-prepare and the regulator core
    has assumed that the regulator devices and their drivers support
    autonomous recover at resume.
    
    This patch adds regulator_suspend_finish that pairs with the
    previously-existed regulator_suspend_prepare. The function
    regulator_suspend_finish turns on the regulators that have always_on set
    or positive use_count so that we can reset the regulator states
    appropriately at resume.
    
    In regulator_suspend_finish, if has_full_constraints, it disables
    unnecessary regulators.
    
    Signed-off-by: MyungJoo Ham <myungjoo.ham@samsung.com>
    Signed-off-by: Kyungmin Park <kyungmin.park@samsung.com>
    Acked-by: Mark Brown <broonie@opensource.wolfsonmicro.com>
    --
    Updates
    v3
            comments corrected (Thanks to Igor)
    v2
            disable unnecessary regulators (Thanks to Mark)
    Signed-off-by: Liam Girdwood <lrg@slimlogic.co.uk>

diff --git a/include/linux/regulator/machine.h b/include/linux/regulator/machine.h
index 761c745b9c24..c4c4fc45f856 100644
--- a/include/linux/regulator/machine.h
+++ b/include/linux/regulator/machine.h
@@ -186,6 +186,7 @@ struct regulator_init_data {
 };
 
 int regulator_suspend_prepare(suspend_state_t state);
+int regulator_suspend_finish(void);
 
 #ifdef CONFIG_REGULATOR
 void regulator_has_full_constraints(void);

commit 688fe99a439f7c9dfcc52fbf7cb347f140a2dc8b
Author: Mark Brown <broonie@opensource.wolfsonmicro.com>
Date:   Tue Oct 5 19:18:32 2010 -0700

    regulator: Add option for machine drivers to enable the dummy regulator
    
    Allow machine drivers to explicitly enable the use of the dummy regulator,
    enabling simpler support for systems with only a few specific supplies
    visible to software.
    
    It is strongly recommended that this is not used on systems with
    substantial software control over their PMICs, for maximum functionality
    constrints should be as fully specified as possible.
    
    Signed-off-by: Mark Brown <broonie@opensource.wolfsonmicro.com>
    Signed-off-by: Liam Girdwood <lrg@slimlogic.co.uk>

diff --git a/include/linux/regulator/machine.h b/include/linux/regulator/machine.h
index e2980287245e..761c745b9c24 100644
--- a/include/linux/regulator/machine.h
+++ b/include/linux/regulator/machine.h
@@ -189,10 +189,15 @@ int regulator_suspend_prepare(suspend_state_t state);
 
 #ifdef CONFIG_REGULATOR
 void regulator_has_full_constraints(void);
+void regulator_use_dummy_regulator(void);
 #else
 static inline void regulator_has_full_constraints(void)
 {
 }
+
+static inline void regulator_use_dummy_regulator(void)
+{
+}
 #endif
 
 #endif

commit 0178f3e28e2166664916265c5d4922b1376b9fa1
Author: Mark Brown <broonie@opensource.wolfsonmicro.com>
Date:   Mon Apr 26 15:18:14 2010 +0100

    regulator: Allow regulator-regulator supplies to be specified by name
    
    When one regulator supplies another allow the relationship to be specified
    using names rather than struct regulators, in a similar manner to that
    allowed for consumer supplies. This allows static configuration at compile
    time, reducing the need for dynamic init code.
    
    Also change the references to LINE supply to be system supply since line
    is sometimes used for actual supplies and therefore potentially confusing.
    
    Signed-off-by: Mark Brown <broonie@opensource.wolfsonmicro.com>
    Signed-off-by: Liam Girdwood <lrg@slimlogic.co.uk>

diff --git a/include/linux/regulator/machine.h b/include/linux/regulator/machine.h
index 234a8476cba8..e2980287245e 100644
--- a/include/linux/regulator/machine.h
+++ b/include/linux/regulator/machine.h
@@ -157,7 +157,11 @@ struct regulator_consumer_supply {
  *
  * Initialisation constraints, our supply and consumers supplies.
  *
- * @supply_regulator_dev: Parent regulator (if any).
+ * @supply_regulator: Parent regulator.  Specified using the regulator name
+ *                    as it appears in the name field in sysfs, which can
+ *                    be explicitly set using the constraints field 'name'.
+ * @supply_regulator_dev: Parent regulator (if any) - DEPRECATED in favour
+ *                        of supply_regulator.
  *
  * @constraints: Constraints.  These must be specified for the regulator to
  *               be usable.
@@ -168,7 +172,8 @@ struct regulator_consumer_supply {
  * @driver_data: Data passed to regulator_init.
  */
 struct regulator_init_data {
-	struct device *supply_regulator_dev; /* or NULL for LINE */
+	const char *supply_regulator;        /* or NULL for system supply */
+	struct device *supply_regulator_dev; /* or NULL for system supply */
 
 	struct regulation_constraints constraints;
 

commit 638f85c54f4fed0f8f1fbc23745a8f334112e892
Author: Mark Brown <broonie@opensource.wolfsonmicro.com>
Date:   Thu Oct 22 16:31:33 2009 +0100

    regulator: Handle regulators without suspend mode configuration
    
    Since some regulators in the system may not support suspend mode
    configuration we need to allow some regulators to have a missing
    suspend mode configuration. Do this by requiring that disabled
    regulators are explicitly flagged and then skip over regulators
    that have no state specified.
    
    Try to avoid surprises by warning the if we could set the state
    but no configuration is provided.  This also ensures that an all
    zeros configuration generates a warning rather than silently
    disabling the regulator.
    
    Reported-by: Joonyoung Shim <jy0922.shim@samsung.com>
    Signed-off-by: Mark Brown <broonie@opensource.wolfsonmicro.com>
    Signed-off-by: Liam Girdwood <lrg@slimlogic.co.uk>

diff --git a/include/linux/regulator/machine.h b/include/linux/regulator/machine.h
index 87f5f176d4ef..234a8476cba8 100644
--- a/include/linux/regulator/machine.h
+++ b/include/linux/regulator/machine.h
@@ -43,16 +43,20 @@ struct regulator;
 /**
  * struct regulator_state - regulator state during low power system states
  *
- * This describes a regulators state during a system wide low power state.
+ * This describes a regulators state during a system wide low power
+ * state.  One of enabled or disabled must be set for the
+ * configuration to be applied.
  *
  * @uV: Operating voltage during suspend.
  * @mode: Operating mode during suspend.
  * @enabled: Enabled during suspend.
+ * @disabled: Disabled during suspend.
  */
 struct regulator_state {
 	int uV;	/* suspend voltage */
 	unsigned int mode; /* suspend regulator operating mode */
 	int enabled; /* is regulator enabled in this suspend state */
+	int disabled; /* is the regulator disbled in this suspend state */
 };
 
 /**

commit 2e7e65ce55566fc81036960b00e5e15f5d9578ea
Author: Wolfram Sang <w.sang@pengutronix.de>
Date:   Fri Sep 18 22:44:43 2009 +0200

    regulator: fix typos
    
    Fix a couple of typos I found while working with this subsystem.
    
    Signed-off-by: Wolfram Sang <w.sang@pengutronix.de>
    Acked-by: Mark Brown <broonie@opensource.wolfsonmicro.com>
    Signed-off-by: Liam Girdwood <lrg@slimlogic.co.uk>

diff --git a/include/linux/regulator/machine.h b/include/linux/regulator/machine.h
index 99a4e2eb36aa..87f5f176d4ef 100644
--- a/include/linux/regulator/machine.h
+++ b/include/linux/regulator/machine.h
@@ -41,7 +41,7 @@ struct regulator;
 #define REGULATOR_CHANGE_DRMS		0x10
 
 /**
- * struct regulator_state - regulator state during low power syatem states
+ * struct regulator_state - regulator state during low power system states
  *
  * This describes a regulators state during a system wide low power state.
  *
@@ -117,10 +117,10 @@ struct regulation_constraints {
 	/* mode to set on startup */
 	unsigned int initial_mode;
 
-	/* constriant flags */
+	/* constraint flags */
 	unsigned always_on:1;	/* regulator never off when system is on */
 	unsigned boot_on:1;	/* bootloader/firmware enabled regulator */
-	unsigned apply_uV:1;	/* apply uV constraint iff min == max */
+	unsigned apply_uV:1;	/* apply uV constraint if min == max */
 };
 
 /**

commit ed6543243a1c557dbe2005a86f6d8e851c1ebb79
Author: roald <roald@sh-dt-4505.(none)>
Date:   Mon Jul 13 17:25:21 2009 +0800

    regulator: add initialization macro of regulator supply
    
    Signed-off-by: Haojian Zhuang <haojian.zhuang@marvell.com>
    Acked-by: Mark Brown <broonie@opensource.wolfsonmicro.com>
    Signed-off-by: Liam Girdwood <lrg@slimlogic.co.uk>

diff --git a/include/linux/regulator/machine.h b/include/linux/regulator/machine.h
index 73a88f6cbb1c..99a4e2eb36aa 100644
--- a/include/linux/regulator/machine.h
+++ b/include/linux/regulator/machine.h
@@ -141,6 +141,13 @@ struct regulator_consumer_supply {
 	const char *supply;	/* consumer supply - e.g. "vcc" */
 };
 
+/* Initialize struct regulator_consumer_supply */
+#define REGULATOR_SUPPLY(_name, _dev_name)			\
+{								\
+	.supply		= _name,				\
+	.dev_name	= _dev_name,				\
+}
+
 /**
  * struct regulator_init_data - regulator platform initialisation data.
  *

commit 9c19bc0444490e76197f47316c649590dc6f10a4
Author: Mark Brown <broonie@opensource.wolfsonmicro.com>
Date:   Thu Jul 9 15:44:31 2009 +0100

    regulator: Define full constraints function with REGULATOR disabled
    
    This allows machine drivers to build without ifdefs if they have
    full constraints. Suggested by machine drivers contributed by
    Haojian Zhuang <haojian.zhuang@gmail.com>.
    
    Signed-off-by: Mark Brown <broonie@opensource.wolfsonmicro.com>
    Signed-off-by: Liam Girdwood <lrg@slimlogic.co.uk>

diff --git a/include/linux/regulator/machine.h b/include/linux/regulator/machine.h
index 9328090eca20..73a88f6cbb1c 100644
--- a/include/linux/regulator/machine.h
+++ b/include/linux/regulator/machine.h
@@ -171,6 +171,12 @@ struct regulator_init_data {
 
 int regulator_suspend_prepare(suspend_state_t state);
 
+#ifdef CONFIG_REGULATOR
 void regulator_has_full_constraints(void);
+#else
+static inline void regulator_has_full_constraints(void)
+{
+}
+#endif
 
 #endif

commit 40f9244f4da8976eeb6d5ed6313c635ba238a9d3
Author: Mark Brown <broonie@opensource.wolfsonmicro.com>
Date:   Wed Jun 17 17:56:39 2009 +0100

    regulator: Allow consumer supplies to be set up with dev_name()
    
    Follow the approach suggested by Russell King and implemented by him in
    the clkdev API and allow consumer device supply mapings to be set up
    using the dev_name() for the consumer instead of the struct device.
    In order to avoid making existing machines instabuggy and creating merge
    issues the use of struct device is still supported for the time being.
    
    This resolves problems working with buses such as I2C which make the
    struct device available late providing that the final device name is
    known, which is the case for most embedded systems with fixed setups.
    
    Consumers must still use the struct device when calling regulator_get().
    
    Signed-off-by: Mark Brown <broonie@opensource.wolfsonmicro.com>
    Signed-off-by: Liam Girdwood <lrg@slimlogic.co.uk>

diff --git a/include/linux/regulator/machine.h b/include/linux/regulator/machine.h
index bac64fa390f2..9328090eca20 100644
--- a/include/linux/regulator/machine.h
+++ b/include/linux/regulator/machine.h
@@ -126,13 +126,18 @@ struct regulation_constraints {
 /**
  * struct regulator_consumer_supply - supply -> device mapping
  *
- * This maps a supply name to a device.
+ * This maps a supply name to a device.  Only one of dev or dev_name
+ * can be specified.  Use of dev_name allows support for buses which
+ * make struct device available late such as I2C and is the preferred
+ * form.
  *
  * @dev: Device structure for the consumer.
+ * @dev_name: Result of dev_name() for the consumer.
  * @supply: Name for the supply.
  */
 struct regulator_consumer_supply {
 	struct device *dev;	/* consumer */
+	const char *dev_name;   /* dev_name() for consumer */
 	const char *supply;	/* consumer supply - e.g. "vcc" */
 };
 

commit ca7255614e0861e36480103f4a402a115803d7b5
Author: Mark Brown <broonie@opensource.wolfsonmicro.com>
Date:   Mon Mar 16 19:36:34 2009 +0000

    regulator: Support disabling of unused regulators by machines
    
    At present it is not possible for machine constraints to disable
    regulators which have been left on when the system starts, for example
    as a result of fixed default configurations in hardware. This means that
    power may be wasted by these regulators if they are not in use.
    
    Provide intial support for this with a late_initcall which will disable
    any unused regulators if the machine has enabled this feature by calling
    regulator_has_full_constraints(). If this has not been called then print
    a warning to encourage users to fully specify their constraints so that
    we can change this to be the default behaviour in future.
    
    Signed-off-by: Mark Brown <broonie@opensource.wolfsonmicro.com>
    Signed-off-by: Liam Girdwood <lrg@slimlogic.co.uk>

diff --git a/include/linux/regulator/machine.h b/include/linux/regulator/machine.h
index 5de7aa3b02a6..bac64fa390f2 100644
--- a/include/linux/regulator/machine.h
+++ b/include/linux/regulator/machine.h
@@ -166,4 +166,6 @@ struct regulator_init_data {
 
 int regulator_suspend_prepare(suspend_state_t state);
 
+void regulator_has_full_constraints(void);
+
 #endif

commit cacf90f24e80cec9334f98e0377149f943fe9f16
Author: Mark Brown <broonie@opensource.wolfsonmicro.com>
Date:   Mon Mar 2 16:32:46 2009 +0000

    regulator: Allow boot_on regulators to be disabled by clients
    
    Rather than incrementing the reference count for boot_on regulators
    (which prevents them being disabled later on) simply force the
    regulator to be enabled when applying the constraints. Previously
    boot_on was essentially equivalent to always_on.
    
    Signed-off-by: Mark Brown <broonie@opensource.wolfsonmicro.com>
    Signed-off-by: Liam Girdwood <lrg@slimlogic.co.uk>

diff --git a/include/linux/regulator/machine.h b/include/linux/regulator/machine.h
index 1eb861cf4b2c..5de7aa3b02a6 100644
--- a/include/linux/regulator/machine.h
+++ b/include/linux/regulator/machine.h
@@ -73,7 +73,9 @@ struct regulator_state {
  *
  * @always_on: Set if the regulator should never be disabled.
  * @boot_on: Set if the regulator is enabled when the system is initially
- *           started.
+ *           started.  If the regulator is not enabled by the hardware or
+ *           bootloader then it will be enabled when the constraints are
+ *           applied.
  * @apply_uV: Apply the voltage constraint when initialising.
  *
  * @input_uV: Input voltage for regulator when supplied by another regulator.

commit a308466c24b4f42bab6945026e938874d22cde50
Author: Mark Brown <broonie@opensource.wolfsonmicro.com>
Date:   Thu Feb 26 19:24:19 2009 +0000

    regulator: Allow regulators to set the initial operating mode
    
    This is useful when wishing to run in a fixed operating mode that isn't
    the default.
    
    Signed-off-by: Mark Brown <broonie@opensource.wolfsonmicro.com>
    Signed-off-by: Liam Girdwood <lrg@slimlogic.co.uk>

diff --git a/include/linux/regulator/machine.h b/include/linux/regulator/machine.h
index 5aa00ee36a3d..1eb861cf4b2c 100644
--- a/include/linux/regulator/machine.h
+++ b/include/linux/regulator/machine.h
@@ -83,6 +83,7 @@ struct regulator_state {
  * @state_standby: State for regulator when system is suspended in standby
  *                 mode.
  * @initial_state: Suspend state to set by default.
+ * @initial_mode: Mode to set at startup.
  */
 struct regulation_constraints {
 
@@ -111,6 +112,9 @@ struct regulation_constraints {
 	struct regulator_state state_standby;
 	suspend_state_t initial_state; /* suspend state to set at init */
 
+	/* mode to set on startup */
+	unsigned int initial_mode;
+
 	/* constriant flags */
 	unsigned always_on:1;	/* regulator never off when system is on */
 	unsigned boot_on:1;	/* bootloader/firmware enabled regulator */

commit 1dd68f01886a2d5cabbbe90b86e82f70917de89c
Author: Liam Girdwood <lrg@slimlogic.co.uk>
Date:   Mon Feb 2 21:43:31 2009 +0000

    regulator: email - update email address and regulator webpage.
    
    Remove deceased email address and update to new address. Also update
    website details in MAINTAINERS with correct page.
    
    Signed-off-by: Liam Girdwood <lrg@slimlogic.co.uk>

diff --git a/include/linux/regulator/machine.h b/include/linux/regulator/machine.h
index 3794773b23d2..5aa00ee36a3d 100644
--- a/include/linux/regulator/machine.h
+++ b/include/linux/regulator/machine.h
@@ -3,7 +3,7 @@
  *
  * Copyright (C) 2007, 2008 Wolfson Microelectronics PLC.
  *
- * Author: Liam Girdwood <lg@opensource.wolfsonmicro.com>
+ * Author: Liam Girdwood <lrg@slimlogic.co.uk>
  *
  * This program is free software; you can redistribute it and/or modify
  * it under the terms of the GNU General Public License version 2 as

commit c8e7e4640facbe99d10a6e262523b25be129b9b9
Author: Mark Brown <broonie@opensource.wolfsonmicro.com>
Date:   Wed Dec 31 12:52:42 2008 +0000

    regulator: Add missing kerneldoc
    
    This is only the documentation that the kerneldoc system warns about.
    
    Signed-off-by: Mark Brown <broonie@opensource.wolfsonmicro.com>
    Signed-off-by: Liam Girdwood <lrg@slimlogic.co.uk>

diff --git a/include/linux/regulator/machine.h b/include/linux/regulator/machine.h
index c6d69331a81e..3794773b23d2 100644
--- a/include/linux/regulator/machine.h
+++ b/include/linux/regulator/machine.h
@@ -44,6 +44,10 @@ struct regulator;
  * struct regulator_state - regulator state during low power syatem states
  *
  * This describes a regulators state during a system wide low power state.
+ *
+ * @uV: Operating voltage during suspend.
+ * @mode: Operating mode during suspend.
+ * @enabled: Enabled during suspend.
  */
 struct regulator_state {
 	int uV;	/* suspend voltage */
@@ -55,6 +59,30 @@ struct regulator_state {
  * struct regulation_constraints - regulator operating constraints.
  *
  * This struct describes regulator and board/machine specific constraints.
+ *
+ * @name: Descriptive name for the constraints, used for display purposes.
+ *
+ * @min_uV: Smallest voltage consumers may set.
+ * @max_uV: Largest voltage consumers may set.
+ *
+ * @min_uA: Smallest consumers consumers may set.
+ * @max_uA: Largest current consumers may set.
+ *
+ * @valid_modes_mask: Mask of modes which may be configured by consumers.
+ * @valid_ops_mask: Operations which may be performed by consumers.
+ *
+ * @always_on: Set if the regulator should never be disabled.
+ * @boot_on: Set if the regulator is enabled when the system is initially
+ *           started.
+ * @apply_uV: Apply the voltage constraint when initialising.
+ *
+ * @input_uV: Input voltage for regulator when supplied by another regulator.
+ *
+ * @state_disk: State for regulator when system is suspended in disk mode.
+ * @state_mem: State for regulator when system is suspended in mem mode.
+ * @state_standby: State for regulator when system is suspended in standby
+ *                 mode.
+ * @initial_state: Suspend state to set by default.
  */
 struct regulation_constraints {
 
@@ -93,6 +121,9 @@ struct regulation_constraints {
  * struct regulator_consumer_supply - supply -> device mapping
  *
  * This maps a supply name to a device.
+ *
+ * @dev: Device structure for the consumer.
+ * @supply: Name for the supply.
  */
 struct regulator_consumer_supply {
 	struct device *dev;	/* consumer */
@@ -103,6 +134,16 @@ struct regulator_consumer_supply {
  * struct regulator_init_data - regulator platform initialisation data.
  *
  * Initialisation constraints, our supply and consumers supplies.
+ *
+ * @supply_regulator_dev: Parent regulator (if any).
+ *
+ * @constraints: Constraints.  These must be specified for the regulator to
+ *               be usable.
+ * @num_consumer_supplies: Number of consumer device supplies.
+ * @consumer_supplies: Consumer device supply configuration.
+ *
+ * @regulator_init: Callback invoked when the regulator has been registered.
+ * @driver_data: Data passed to regulator_init.
  */
 struct regulator_init_data {
 	struct device *supply_regulator_dev; /* or NULL for LINE */

commit a5766f11cfd3a0c03450d99c8fe548c2940be884
Author: Liam Girdwood <lrg@slimlogic.co.uk>
Date:   Fri Oct 10 13:22:20 2008 +0100

    regulator: core - Rework machine API to remove string based functions.
    
    This improves the machine level API in order to configure
    regulator constraints and consumers as platform data and removes the
    old string based API that required several calls to set up each regulator.
    
    The intention is to create a struct regulator_init_data, populate
    it's fields with constraints, consumers devices, etc and then register
    the regulator device from board.c in the standard Linux way.
    
    e.g. regulator LDO2 (supplying codec and sim) platform data.
    
    /* regulator LDO2 consumer devices */
    static struct regulator_consumer_supply ldo2_consumers[] = {
    {
            .dev    = &platform_audio_device.dev,
            .supply = "codec_avdd",
    },
    {
            .dev    = &platform_sim_device.dev,
            .supply = "sim_vcc",
    }
    };
    
    /* regulator LDO2 constraints  */
    static struct regulator_init_data ldo2_data = {
            .constraints = {
                    .min_uV = 3300000,
                    .max_uV = 3300000,
                    .valid_modes_mask = REGULATOR_MODE_NORMAL,
                    .apply_uV = 1,
            },
            .num_consumer_supplies = ARRAY_SIZE(ldo2_consumers),
            .consumer_supplies = ldo2_consumers,
    };
    
    /* machine regulator devices with thier consumers and constraints */
    static struct platform_device wm8350_regulator_devices[] = {
    {
            .name = "wm8350-regulator",
            .id = WM8350_LDO_2,
            .dev = {
                    .platform_data = &ldo2_data,
            },
    },
    };
    
    Changes in detail:-
    
      o Removed all const char* regulator config functions in machine API.
      o Created new struct regulator_init_data to contain regulator
        machine configuration constraints and consmuers.
      o Changed set_supply(), set_machine_constraints(),
        set_consumer_device_supply() to remove their string identifier
        parameters. Also made them static and moved functions nearer top of
        core.c.
      o Removed no longer used inline func to_rdev()
      o Added regulator_get_init_drvdata() to retrieve init data.
      o Added struct device* as parameter to regulator_register().
      o Changed my email address.
    
    Signed-off-by: Eric Miao <eric.miao@marvell.com>
    Signed-off-by: Mark Brown <broonie@opensource.wolfsonmicro.com>
    Signed-off-by: Liam Girdwood <lrg@slimlogic.co.uk>

diff --git a/include/linux/regulator/machine.h b/include/linux/regulator/machine.h
index 11e737dbfcf2..c6d69331a81e 100644
--- a/include/linux/regulator/machine.h
+++ b/include/linux/regulator/machine.h
@@ -89,15 +89,33 @@ struct regulation_constraints {
 	unsigned apply_uV:1;	/* apply uV constraint iff min == max */
 };
 
-int regulator_set_supply(const char *regulator, const char *regulator_supply);
+/**
+ * struct regulator_consumer_supply - supply -> device mapping
+ *
+ * This maps a supply name to a device.
+ */
+struct regulator_consumer_supply {
+	struct device *dev;	/* consumer */
+	const char *supply;	/* consumer supply - e.g. "vcc" */
+};
 
-const char *regulator_get_supply(const char *regulator);
+/**
+ * struct regulator_init_data - regulator platform initialisation data.
+ *
+ * Initialisation constraints, our supply and consumers supplies.
+ */
+struct regulator_init_data {
+	struct device *supply_regulator_dev; /* or NULL for LINE */
 
-int regulator_set_machine_constraints(const char *regulator,
-	struct regulation_constraints *constraints);
+	struct regulation_constraints constraints;
 
-int regulator_set_device_supply(const char *regulator, struct device *dev,
-				const char *supply);
+	int num_consumer_supplies;
+	struct regulator_consumer_supply *consumer_supplies;
+
+	/* optional regulator machine specific init */
+	int (*regulator_init)(void *driver_data);
+	void *driver_data;	/* core does not touch this */
+};
 
 int regulator_suspend_prepare(suspend_state_t state);
 

commit 4c1184e85cb381121a5273ea20ad31ca3faa0a4f
Author: Liam Girdwood <lg@opensource.wolfsonmicro.com>
Date:   Wed Apr 30 15:46:09 2008 +0100

    regulator: machine driver interface
    
    This interface is for machine specific code and allows the creation of
    voltage/current domains (with constraints) for each regulator. It can
    provide regulator constraints that will prevent device damage through
    overvoltage or over current caused by buggy client drivers. It also
    allows the creation of a regulator tree whereby some regulators are
    supplied by others (similar to a clock tree).
    
    Signed-off-by: Liam Girdwood <lg@opensource.wolfsonmicro.com>
    Signed-off-by: Philipp Zabel <philipp.zabel@gmail.com>
    Signed-off-by: Mark Brown <broonie@opensource.wolfsonmicro.com>

diff --git a/include/linux/regulator/machine.h b/include/linux/regulator/machine.h
new file mode 100644
index 000000000000..11e737dbfcf2
--- /dev/null
+++ b/include/linux/regulator/machine.h
@@ -0,0 +1,104 @@
+/*
+ * machine.h -- SoC Regulator support, machine/board driver API.
+ *
+ * Copyright (C) 2007, 2008 Wolfson Microelectronics PLC.
+ *
+ * Author: Liam Girdwood <lg@opensource.wolfsonmicro.com>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation.
+ *
+ * Regulator Machine/Board Interface.
+ */
+
+#ifndef __LINUX_REGULATOR_MACHINE_H_
+#define __LINUX_REGULATOR_MACHINE_H_
+
+#include <linux/regulator/consumer.h>
+#include <linux/suspend.h>
+
+struct regulator;
+
+/*
+ * Regulator operation constraint flags. These flags are used to enable
+ * certain regulator operations and can be OR'ed together.
+ *
+ * VOLTAGE:  Regulator output voltage can be changed by software on this
+ *           board/machine.
+ * CURRENT:  Regulator output current can be changed by software on this
+ *           board/machine.
+ * MODE:     Regulator operating mode can be changed by software on this
+ *           board/machine.
+ * STATUS:   Regulator can be enabled and disabled.
+ * DRMS:     Dynamic Regulator Mode Switching is enabled for this regulator.
+ */
+
+#define REGULATOR_CHANGE_VOLTAGE	0x1
+#define REGULATOR_CHANGE_CURRENT	0x2
+#define REGULATOR_CHANGE_MODE		0x4
+#define REGULATOR_CHANGE_STATUS		0x8
+#define REGULATOR_CHANGE_DRMS		0x10
+
+/**
+ * struct regulator_state - regulator state during low power syatem states
+ *
+ * This describes a regulators state during a system wide low power state.
+ */
+struct regulator_state {
+	int uV;	/* suspend voltage */
+	unsigned int mode; /* suspend regulator operating mode */
+	int enabled; /* is regulator enabled in this suspend state */
+};
+
+/**
+ * struct regulation_constraints - regulator operating constraints.
+ *
+ * This struct describes regulator and board/machine specific constraints.
+ */
+struct regulation_constraints {
+
+	char *name;
+
+	/* voltage output range (inclusive) - for voltage control */
+	int min_uV;
+	int max_uV;
+
+	/* current output range (inclusive) - for current control */
+	int min_uA;
+	int max_uA;
+
+	/* valid regulator operating modes for this machine */
+	unsigned int valid_modes_mask;
+
+	/* valid operations for regulator on this machine */
+	unsigned int valid_ops_mask;
+
+	/* regulator input voltage - only if supply is another regulator */
+	int input_uV;
+
+	/* regulator suspend states for global PMIC STANDBY/HIBERNATE */
+	struct regulator_state state_disk;
+	struct regulator_state state_mem;
+	struct regulator_state state_standby;
+	suspend_state_t initial_state; /* suspend state to set at init */
+
+	/* constriant flags */
+	unsigned always_on:1;	/* regulator never off when system is on */
+	unsigned boot_on:1;	/* bootloader/firmware enabled regulator */
+	unsigned apply_uV:1;	/* apply uV constraint iff min == max */
+};
+
+int regulator_set_supply(const char *regulator, const char *regulator_supply);
+
+const char *regulator_get_supply(const char *regulator);
+
+int regulator_set_machine_constraints(const char *regulator,
+	struct regulation_constraints *constraints);
+
+int regulator_set_device_supply(const char *regulator, struct device *dev,
+				const char *supply);
+
+int regulator_suspend_prepare(suspend_state_t state);
+
+#endif
