commit 0468e667a5bead9c1b7ded92861b5a98d8d78745
Author: Stephen Rothwell <sfr@canb.auug.org.au>
Date:   Wed Jan 15 12:02:58 2020 +1100

    regulator fix for "regulator: core: Add regulator_is_equal() helper"
    
    Signed-off-by: Stephen Rothwell <sfr@canb.auug.org.au>
    Link: https://lore.kernel.org/r/20200115120258.0e535fcb@canb.auug.org.au
    Acked-by: Marek Vasut <marex@denx.de>
    Signed-off-by: Mark Brown <broonie@kernel.org>

diff --git a/include/linux/regulator/consumer.h b/include/linux/regulator/consumer.h
index 2c89d886595c..6a92fd3105a3 100644
--- a/include/linux/regulator/consumer.h
+++ b/include/linux/regulator/consumer.h
@@ -596,7 +596,7 @@ regulator_bulk_set_supply_names(struct regulator_bulk_data *consumers,
 }
 
 static inline bool
-regulator_is_equal(struct regulator *reg1, struct regulator *reg2);
+regulator_is_equal(struct regulator *reg1, struct regulator *reg2)
 {
 	return false;
 }

commit b059b7e0ec3208ff1e17cff6387d75a9fbab4e02
Author: Marek Vasut <marex@denx.de>
Date:   Fri Dec 20 17:44:49 2019 +0100

    regulator: core: Add regulator_is_equal() helper
    
    Add regulator_is_equal() helper to compare whether two regulators are
    the same. This is useful for checking whether two separate regulators
    in a driver are actually the same supply.
    
    Signed-off-by: Marek Vasut <marex@denx.de>
    Cc: Fabio Estevam <festevam@gmail.com>
    Cc: Igor Opaniuk <igor.opaniuk@toradex.com>
    Cc: Liam Girdwood <lgirdwood@gmail.com>
    Cc: Marcel Ziswiler <marcel.ziswiler@toradex.com>
    Cc: Mark Brown <broonie@kernel.org>
    Cc: Oleksandr Suvorov <oleksandr.suvorov@toradex.com>
    Link: https://lore.kernel.org/r/20191220164450.1395038-1-marex@denx.de
    Signed-off-by: Mark Brown <broonie@kernel.org>

diff --git a/include/linux/regulator/consumer.h b/include/linux/regulator/consumer.h
index 337a46391527..2c89d886595c 100644
--- a/include/linux/regulator/consumer.h
+++ b/include/linux/regulator/consumer.h
@@ -287,6 +287,8 @@ void regulator_bulk_set_supply_names(struct regulator_bulk_data *consumers,
 				     const char *const *supply_names,
 				     unsigned int num_supplies);
 
+bool regulator_is_equal(struct regulator *reg1, struct regulator *reg2);
+
 #else
 
 /*
@@ -593,6 +595,11 @@ regulator_bulk_set_supply_names(struct regulator_bulk_data *consumers,
 {
 }
 
+static inline bool
+regulator_is_equal(struct regulator *reg1, struct regulator *reg2);
+{
+	return false;
+}
 #endif
 
 static inline int regulator_set_voltage_triplet(struct regulator *regulator,

commit d072cb263f9e0ce3f8f6089c17e3466885971fa8
Author: Bartosz Golaszewski <bgolaszewski@baylibre.com>
Date:   Mon Sep 2 17:13:32 2019 +0200

    regulator: add missing 'static inline' to a helper's stub
    
    The build fails when CONFIG_REGULATOR is not selected because the stub
    for regulator_bulk_set_supply_names() is missing the 'static inline'
    attribute.
    
    Signed-off-by: Bartosz Golaszewski <bgolaszewski@baylibre.com>
    Link: https://lore.kernel.org/r/20190902151332.28058-1-brgl@bgdev.pl
    Signed-off-by: Mark Brown <broonie@kernel.org>

diff --git a/include/linux/regulator/consumer.h b/include/linux/regulator/consumer.h
index 6d2181a76987..337a46391527 100644
--- a/include/linux/regulator/consumer.h
+++ b/include/linux/regulator/consumer.h
@@ -586,9 +586,10 @@ static inline int regulator_list_voltage(struct regulator *regulator, unsigned s
 	return -EINVAL;
 }
 
-void regulator_bulk_set_supply_names(struct regulator_bulk_data *consumers,
-				     const char *const *supply_names,
-				     unsigned int num_supplies)
+static inline void
+regulator_bulk_set_supply_names(struct regulator_bulk_data *consumers,
+				const char *const *supply_names,
+				unsigned int num_supplies)
 {
 }
 

commit d0087e72710ca7d1b309bf427286da58418ea89e
Author: Bartosz Golaszewski <bgolaszewski@baylibre.com>
Date:   Fri Aug 30 09:17:37 2019 +0200

    regulator: provide regulator_bulk_set_supply_names()
    
    There are many regulator consumers who - before using the regulator
    bulk functions - set the supply names in regulator_bulk_data using
    a for loop.
    
    Let's provide a simple helper in the consumer API that allows users
    to do the same with a single function call.
    
    Signed-off-by: Bartosz Golaszewski <bgolaszewski@baylibre.com>
    Link: https://lore.kernel.org/r/20190830071740.4267-2-brgl@bgdev.pl
    Signed-off-by: Mark Brown <broonie@kernel.org>

diff --git a/include/linux/regulator/consumer.h b/include/linux/regulator/consumer.h
index 815983419375..6d2181a76987 100644
--- a/include/linux/regulator/consumer.h
+++ b/include/linux/regulator/consumer.h
@@ -281,6 +281,12 @@ void devm_regulator_unregister_notifier(struct regulator *regulator,
 void *regulator_get_drvdata(struct regulator *regulator);
 void regulator_set_drvdata(struct regulator *regulator, void *data);
 
+/* misc helpers */
+
+void regulator_bulk_set_supply_names(struct regulator_bulk_data *consumers,
+				     const char *const *supply_names,
+				     unsigned int num_supplies);
+
 #else
 
 /*
@@ -580,6 +586,12 @@ static inline int regulator_list_voltage(struct regulator *regulator, unsigned s
 	return -EINVAL;
 }
 
+void regulator_bulk_set_supply_names(struct regulator_bulk_data *consumers,
+				     const char *const *supply_names,
+				     unsigned int num_supplies)
+{
+}
+
 #endif
 
 static inline int regulator_set_voltage_triplet(struct regulator *regulator,

commit d2912cb15bdda8ba4a5dd73396ad62641af2f520
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Tue Jun 4 10:11:33 2019 +0200

    treewide: Replace GPLv2 boilerplate/reference with SPDX - rule 500
    
    Based on 2 normalized pattern(s):
    
      this program is free software you can redistribute it and or modify
      it under the terms of the gnu general public license version 2 as
      published by the free software foundation
    
      this program is free software you can redistribute it and or modify
      it under the terms of the gnu general public license version 2 as
      published by the free software foundation #
    
    extracted by the scancode license scanner the SPDX license identifier
    
      GPL-2.0-only
    
    has been chosen to replace the boilerplate/reference in 4122 file(s).
    
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Reviewed-by: Enrico Weigelt <info@metux.net>
    Reviewed-by: Kate Stewart <kstewart@linuxfoundation.org>
    Reviewed-by: Allison Randal <allison@lohutok.net>
    Cc: linux-spdx@vger.kernel.org
    Link: https://lkml.kernel.org/r/20190604081206.933168790@linutronix.de
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/include/linux/regulator/consumer.h b/include/linux/regulator/consumer.h
index aaf3cee70439..815983419375 100644
--- a/include/linux/regulator/consumer.h
+++ b/include/linux/regulator/consumer.h
@@ -1,3 +1,4 @@
+/* SPDX-License-Identifier: GPL-2.0-only */
 /*
  * consumer.h -- SoC Regulator consumer support.
  *
@@ -5,10 +6,6 @@
  *
  * Author: Liam Girdwood <lrg@slimlogic.co.uk>
  *
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License version 2 as
- * published by the Free Software Foundation.
- *
  * Regulator Consumer Interface.
  *
  * A Power Management Regulator framework for SoC based devices.
@@ -29,7 +26,6 @@
  *   but this drops rapidly to 60% when below 100mA. Regulator r has > 90%
  *   efficiency in IDLE mode at loads < 10mA. Thus regulator r will operate
  *   in normal mode for loads > 10mA and in IDLE mode for load <= 10mA.
- *
  */
 
 #ifndef __LINUX_REGULATOR_CONSUMER_H_

commit 7287275b4301e230be9e4569431c7dacb67ebc13
Author: Arnd Bergmann <arnd@arndb.de>
Date:   Mon Mar 4 20:38:29 2019 +0100

    regulator: add regulator_get_linear_step() stub helper
    
    The regulator header has empty inline functions for most interfaces,
    but not regulator_get_linear_step(), which has just grown a user
    that does not depend on regulators otherwise:
    
    drivers/clk/tegra/clk-tegra124-dfll-fcpu.c: In function 'get_alignment_from_regulator':
    drivers/clk/tegra/clk-tegra124-dfll-fcpu.c:555:19: error: implicit declaration of function 'regulator_get_linear_step'; did you mean 'regulator_get_drvdata'? [-Werror=implicit-function-declaration]
      align->step_uv = regulator_get_linear_step(reg);
                       ^~~~~~~~~~~~~~~~~~~~~~~~~
                       regulator_get_drvdata
    cc1: all warnings being treated as errors
    scripts/Makefile.build:278: recipe for target 'drivers/clk/tegra/clk-tegra124-dfll-fcpu.o' failed
    
    Add the missing stub along the others.
    
    Fixes: b3cf8d069505 ("clk: tegra: dfll: CVB calculation alignment with the regulator")
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>
    Signed-off-by: Mark Brown <broonie@kernel.org>

diff --git a/include/linux/regulator/consumer.h b/include/linux/regulator/consumer.h
index f3f76051e8b0..aaf3cee70439 100644
--- a/include/linux/regulator/consumer.h
+++ b/include/linux/regulator/consumer.h
@@ -478,6 +478,11 @@ static inline int regulator_is_supported_voltage(struct regulator *regulator,
 	return 0;
 }
 
+static inline unsigned int regulator_get_linear_step(struct regulator *regulator)
+{
+	return 0;
+}
+
 static inline int regulator_set_current_limit(struct regulator *regulator,
 					     int min_uA, int max_uA)
 {

commit f1abf67217de91f5cd3c757ae857632ca565099a
Author: Mark Brown <broonie@kernel.org>
Date:   Fri Nov 16 19:19:30 2018 -0800

    regulator: Fix return value of _set_load() stub
    
    The stub implementation of _set_load() returns a mode value which is
    within the bounds of valid return codes for success (the documentation
    just says that failures are negative error codes) but not sensible or
    what the actual implementation does.  Fix it to just return 0.
    
    Reported-by: Cheng-Yi Chiang <cychiang@chromium.org>
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Reviewed-by: Douglas Anderson <dianders@chromium.org>
    Signed-off-by: Mark Brown <broonie@kernel.org>

diff --git a/include/linux/regulator/consumer.h b/include/linux/regulator/consumer.h
index 25602afd4844..f3f76051e8b0 100644
--- a/include/linux/regulator/consumer.h
+++ b/include/linux/regulator/consumer.h
@@ -508,7 +508,7 @@ static inline int regulator_get_error_flags(struct regulator *regulator,
 
 static inline int regulator_set_load(struct regulator *regulator, int load_uA)
 {
-	return REGULATOR_MODE_NORMAL;
+	return 0;
 }
 
 static inline int regulator_allow_bypass(struct regulator *regulator,

commit 02f3703934a42417021405ef336fe45add13c3d1
Author: Douglas Anderson <dianders@chromium.org>
Date:   Wed Apr 18 08:54:18 2018 -0700

    regulator: Don't return or expect -errno from of_map_mode()
    
    In of_get_regulation_constraints() we were taking the result of
    of_map_mode() (an unsigned int) and assigning it to an int.  We were
    then checking whether this value was -EINVAL.  Some implementers of
    of_map_mode() were returning -EINVAL (even though the return type of
    their function needed to be unsigned int) because they needed to
    signal an error back to of_get_regulation_constraints().
    
    In general in the regulator framework the mode is always referred to
    as an unsigned int.  While we could fix this to be a signed int (the
    highest value we store in there right now is 0x8), it's actually
    pretty clean to just define the regulator mode 0x0 (the lack of any
    bits set) as an invalid mode.  Let's do that.
    
    Fixes: 5e5e3a42c653 ("regulator: of: Add support for parsing initial and suspend modes")
    Suggested-by: Javier Martinez Canillas <javierm@redhat.com>
    Signed-off-by: Douglas Anderson <dianders@chromium.org>
    Reviewed-by: Javier Martinez Canillas <javierm@redhat.com>
    Signed-off-by: Mark Brown <broonie@kernel.org>

diff --git a/include/linux/regulator/consumer.h b/include/linux/regulator/consumer.h
index df176d7c2b87..25602afd4844 100644
--- a/include/linux/regulator/consumer.h
+++ b/include/linux/regulator/consumer.h
@@ -80,6 +80,7 @@ struct regmap;
  * These modes can be OR'ed together to make up a mask of valid register modes.
  */
 
+#define REGULATOR_MODE_INVALID			0x0
 #define REGULATOR_MODE_FAST			0x1
 #define REGULATOR_MODE_NORMAL			0x2
 #define REGULATOR_MODE_IDLE			0x4

commit 264b88c9e5c86c92ca1d67689779362760baf651
Author: Harald Geyer <harald@ccbib.org>
Date:   Thu Feb 23 17:06:52 2017 +0000

    regulator: core: Add new notification for enabling of regulator
    
    This is useful for devices, which need some time to start up, to help
    the drivers track how long the supply has been up already. Ie whether
    it can safely talk to the HW or needs to wait.
    
    Signed-off-by: Harald Geyer <harald@ccbib.org>
    Signed-off-by: Mark Brown <broonie@kernel.org>

diff --git a/include/linux/regulator/consumer.h b/include/linux/regulator/consumer.h
index ea0fffa5faeb..df176d7c2b87 100644
--- a/include/linux/regulator/consumer.h
+++ b/include/linux/regulator/consumer.h
@@ -119,6 +119,7 @@ struct regmap;
 #define REGULATOR_EVENT_ABORT_VOLTAGE_CHANGE	0x200
 #define REGULATOR_EVENT_PRE_DISABLE		0x400
 #define REGULATOR_EVENT_ABORT_DISABLE		0x800
+#define REGULATOR_EVENT_ENABLE			0x1000
 
 /*
  * Regulator errors that can be queried using regulator_get_error_flags

commit 30103b5b6432a51c3822a26dc340e35d91237f39
Author: David Lechner <david@lechnology.com>
Date:   Sun Dec 4 16:52:31 2016 -0600

    regulator: Fix regulator_get_error_flags() signature mismatch
    
    The function signature of does not match regulator_get_error_flags()
    when CONFIG_REGULATOR is not defined vs. when it is not defined.
    This makes both declarations match to prevent compiler errors.
    
    Signed-off-by: David Lechner <david@lechnology.com>
    Signed-off-by: Mark Brown <broonie@kernel.org>

diff --git a/include/linux/regulator/consumer.h b/include/linux/regulator/consumer.h
index 528eb1f5273e..ea0fffa5faeb 100644
--- a/include/linux/regulator/consumer.h
+++ b/include/linux/regulator/consumer.h
@@ -498,7 +498,8 @@ static inline unsigned int regulator_get_mode(struct regulator *regulator)
 	return REGULATOR_MODE_NORMAL;
 }
 
-static inline int regulator_get_error_flags(struct regulator *regulator)
+static inline int regulator_get_error_flags(struct regulator *regulator,
+					    unsigned int *flags)
 {
 	return -EINVAL;
 }

commit 1b5b42216469b05ef4b5916cb40b127dfab1da88
Author: Axel Haslam <ahaslam@baylibre.com>
Date:   Thu Nov 3 12:11:42 2016 +0100

    regulator: core: Add new API to poll for error conditions
    
    Regulator consumers can receive event notifications when
    errors are reported to the driver, but currently, there is
    no way for a regulator consumer to know when the error is over.
    
    To allow a regulator consumer to poll for error conditions
    add a new API: regulator_get_error_flags.
    
    Signed-off-by: Axel Haslam <ahaslam@baylibre.com>
    Signed-off-by: Mark Brown <broonie@kernel.org>

diff --git a/include/linux/regulator/consumer.h b/include/linux/regulator/consumer.h
index 692108222271..528eb1f5273e 100644
--- a/include/linux/regulator/consumer.h
+++ b/include/linux/regulator/consumer.h
@@ -120,6 +120,25 @@ struct regmap;
 #define REGULATOR_EVENT_PRE_DISABLE		0x400
 #define REGULATOR_EVENT_ABORT_DISABLE		0x800
 
+/*
+ * Regulator errors that can be queried using regulator_get_error_flags
+ *
+ * UNDER_VOLTAGE  Regulator output is under voltage.
+ * OVER_CURRENT   Regulator output current is too high.
+ * REGULATION_OUT Regulator output is out of regulation.
+ * FAIL           Regulator output has failed.
+ * OVER_TEMP      Regulator over temp.
+ *
+ * NOTE: These errors can be OR'ed together.
+ */
+
+#define REGULATOR_ERROR_UNDER_VOLTAGE		BIT(1)
+#define REGULATOR_ERROR_OVER_CURRENT		BIT(2)
+#define REGULATOR_ERROR_REGULATION_OUT		BIT(3)
+#define REGULATOR_ERROR_FAIL			BIT(4)
+#define REGULATOR_ERROR_OVER_TEMP		BIT(5)
+
+
 /**
  * struct pre_voltage_change_data - Data sent with PRE_VOLTAGE_CHANGE event
  *
@@ -237,6 +256,8 @@ int regulator_get_current_limit(struct regulator *regulator);
 
 int regulator_set_mode(struct regulator *regulator, unsigned int mode);
 unsigned int regulator_get_mode(struct regulator *regulator);
+int regulator_get_error_flags(struct regulator *regulator,
+				unsigned int *flags);
 int regulator_set_load(struct regulator *regulator, int load_uA);
 
 int regulator_allow_bypass(struct regulator *regulator, bool allow);
@@ -477,6 +498,11 @@ static inline unsigned int regulator_get_mode(struct regulator *regulator)
 	return REGULATOR_MODE_NORMAL;
 }
 
+static inline int regulator_get_error_flags(struct regulator *regulator)
+{
+	return -EINVAL;
+}
+
 static inline int regulator_set_load(struct regulator *regulator, int load_uA)
 {
 	return REGULATOR_MODE_NORMAL;

commit 565f9b073f37e5cb6f80ad0ad71ec1144f87fd9f
Author: Bjorn Andersson <bjorn.andersson@linaro.org>
Date:   Tue Aug 16 11:50:32 2016 -0700

    regulator: Remove support for optional supplies in the bulk API
    
    The patch was based on my missinterpretation of the API and only
    accidentally worked for me. Let's clean it out to not confuse others.
    
    This reverts commit 3ff3f518a135fa4592fe2817e9ac2cce1fa23dc2.
    
    Signed-off-by: Bjorn Andersson <bjorn.andersson@linaro.org>
    Signed-off-by: Mark Brown <broonie@kernel.org>

diff --git a/include/linux/regulator/consumer.h b/include/linux/regulator/consumer.h
index cae500b2c1d7..692108222271 100644
--- a/include/linux/regulator/consumer.h
+++ b/include/linux/regulator/consumer.h
@@ -140,8 +140,6 @@ struct regulator;
  *
  * @supply:   The name of the supply.  Initialised by the user before
  *            using the bulk regulator APIs.
- * @optional: The supply should be considered optional. Initialised by the user
- *            before using the bulk regulator APIs.
  * @consumer: The regulator consumer for the supply.  This will be managed
  *            by the bulk API.
  *
@@ -151,7 +149,6 @@ struct regulator;
  */
 struct regulator_bulk_data {
 	const char *supply;
-	bool optional;
 	struct regulator *consumer;
 
 	/* private: Internal use */

commit fc1e1c4a249e8bf0aff68576fad776dd5adc0562
Author: Mark Brown <broonie@kernel.org>
Date:   Thu Jun 9 10:49:02 2016 +0100

    regulator: Remove regulator_can_change_voltage()
    
    There is little obvious use case for a regualtor driver to know if it is
    possible to vary voltages at all by itself.  If a consumer needs to
    limit what voltages it tries to set based on the system configuration
    then it will need to enumerate the possible voltages, and without that
    even if it is possible to change voltages that doesn't mean that
    constraints or other consumers will allow whatever change the driver is
    trying to do at a given time.  It doesn't even indicate if _set_voltage()
    calls will work as noop _set_voltage() calls return success.
    
    There were no users of this API that weren't abusing it and now they're
    all gone so remove the API.
    
    Signed-off-by: Mark Brown <broonie@kernel.org>

diff --git a/include/linux/regulator/consumer.h b/include/linux/regulator/consumer.h
index 48603506f8de..cae500b2c1d7 100644
--- a/include/linux/regulator/consumer.h
+++ b/include/linux/regulator/consumer.h
@@ -224,7 +224,6 @@ int regulator_bulk_force_disable(int num_consumers,
 void regulator_bulk_free(int num_consumers,
 			 struct regulator_bulk_data *consumers);
 
-int regulator_can_change_voltage(struct regulator *regulator);
 int regulator_count_voltages(struct regulator *regulator);
 int regulator_list_voltage(struct regulator *regulator, unsigned selector);
 int regulator_is_supported_voltage(struct regulator *regulator,
@@ -436,11 +435,6 @@ static inline void regulator_bulk_free(int num_consumers,
 {
 }
 
-static inline int regulator_can_change_voltage(struct regulator *regulator)
-{
-	return 0;
-}
-
 static inline int regulator_set_voltage(struct regulator *regulator,
 					int min_uV, int max_uV)
 {

commit ec4c436652cfdf5dcad60f553020ee99596b937b
Author: Mark Brown <broonie@kernel.org>
Date:   Tue May 17 18:06:18 2016 +0100

    regulator: Silence build warnings from regulator_can_change_voltage()
    
    Cut down on noise for mainstream users of the API and people doing build
    testing by dropping the deprecated flag from regulator_can_change_voltage()
    as it triggers even on the EXPORT_SYMBOL_GPL() which affects all builds
    rather than just the remaining drivers with calls to it (for which fixes
    are currently pending).
    
    The function remains deprecated and is expected to be removed entirely
    in v4.8.
    
    Signed-off-by: Mark Brown <broonie@kernel.org>

diff --git a/include/linux/regulator/consumer.h b/include/linux/regulator/consumer.h
index 80dc4e51d14a..48603506f8de 100644
--- a/include/linux/regulator/consumer.h
+++ b/include/linux/regulator/consumer.h
@@ -224,7 +224,7 @@ int regulator_bulk_force_disable(int num_consumers,
 void regulator_bulk_free(int num_consumers,
 			 struct regulator_bulk_data *consumers);
 
-int __deprecated regulator_can_change_voltage(struct regulator *regulator);
+int regulator_can_change_voltage(struct regulator *regulator);
 int regulator_count_voltages(struct regulator *regulator);
 int regulator_list_voltage(struct regulator *regulator, unsigned selector);
 int regulator_is_supported_voltage(struct regulator *regulator,
@@ -436,7 +436,7 @@ static inline void regulator_bulk_free(int num_consumers,
 {
 }
 
-static inline int __deprecated regulator_can_change_voltage(struct regulator *regulator)
+static inline int regulator_can_change_voltage(struct regulator *regulator)
 {
 	return 0;
 }

commit 6a0028b3dd67b86d7265ed873c8738743adec855
Author: Mark Brown <broonie@kernel.org>
Date:   Wed Mar 30 12:04:30 2016 -0700

    regulator: Deprecate regulator_can_change_voltage()
    
    All current users of regulator_can_change_voltage() are abusing it,
    using it to wrap a call to regulator_set_voltage() on probe without any
    alternative handling for fixed voltages.  Drivers should only be using
    regulator_set_voltage() if they need to vary voltages at runtime, fixed
    voltages should normally be set via machine constraints, and calling
    regulator_set_voltage() on a regulator which can't be varied will
    succeed if the current voltage is within the range requested so users
    shouldn't worry if they have permission to vary normally.
    
    Deprecate the API to try to stop any new users appearing while we fix
    the current callers.
    
    Signed-off-by: Mark Brown <broonie@kernel.org>

diff --git a/include/linux/regulator/consumer.h b/include/linux/regulator/consumer.h
index 48603506f8de..80dc4e51d14a 100644
--- a/include/linux/regulator/consumer.h
+++ b/include/linux/regulator/consumer.h
@@ -224,7 +224,7 @@ int regulator_bulk_force_disable(int num_consumers,
 void regulator_bulk_free(int num_consumers,
 			 struct regulator_bulk_data *consumers);
 
-int regulator_can_change_voltage(struct regulator *regulator);
+int __deprecated regulator_can_change_voltage(struct regulator *regulator);
 int regulator_count_voltages(struct regulator *regulator);
 int regulator_list_voltage(struct regulator *regulator, unsigned selector);
 int regulator_is_supported_voltage(struct regulator *regulator,
@@ -436,7 +436,7 @@ static inline void regulator_bulk_free(int num_consumers,
 {
 }
 
-static inline int regulator_can_change_voltage(struct regulator *regulator)
+static inline int __deprecated regulator_can_change_voltage(struct regulator *regulator)
 {
 	return 0;
 }

commit 3ff3f518a135fa4592fe2817e9ac2cce1fa23dc2
Author: Bjorn Andersson <bjorn.andersson@sonymobile.com>
Date:   Mon Nov 9 22:20:37 2015 -0800

    regulator: Make bulk API support optional supplies
    
    Make it possible to use the bulk API with optional supplies, by allowing
    the consumer to marking supplies as optional in the regulator_bulk_data.
    
    Signed-off-by: Bjorn Andersson <bjorn.andersson@sonymobile.com>
    Signed-off-by: Mark Brown <broonie@kernel.org>

diff --git a/include/linux/regulator/consumer.h b/include/linux/regulator/consumer.h
index 9e0e76992be0..48603506f8de 100644
--- a/include/linux/regulator/consumer.h
+++ b/include/linux/regulator/consumer.h
@@ -140,6 +140,8 @@ struct regulator;
  *
  * @supply:   The name of the supply.  Initialised by the user before
  *            using the bulk regulator APIs.
+ * @optional: The supply should be considered optional. Initialised by the user
+ *            before using the bulk regulator APIs.
  * @consumer: The regulator consumer for the supply.  This will be managed
  *            by the bulk API.
  *
@@ -149,6 +151,7 @@ struct regulator;
  */
 struct regulator_bulk_data {
 	const char *supply;
+	bool optional;
 	struct regulator *consumer;
 
 	/* private: Internal use */

commit aaa9b649d0868725cd7536bc9017fe3956ad5393
Merge: 3e683126f4b4 5a286aae3d2c e2adfacde619 a13eaf02e2d6 5127e31a6ce0 30f93ca8323f
Author: Mark Brown <broonie@kernel.org>
Date:   Sun Aug 30 14:40:11 2015 +0100

    Merge remote-tracking branches 'regulator/topic/qcom-smd', 'regulator/topic/qcom-spmi', 'regulator/topic/rk808', 'regulator/topic/stub' and 'regulator/topic/tol' into regulator-next

commit 30f93ca8323f0c21b789bea0f7db8e8e3a7915c6
Author: Viresh Kumar <viresh.kumar@linaro.org>
Date:   Mon Aug 17 08:16:51 2015 +0530

    regulator: core: Define regulator_set_voltage_triplet()
    
    Voltage tolerance isn't necessarily same on both sides of the target
    voltage and regulator_set_voltage_tol() wouldn't be suitable in such
    cases.
    
    Add another routine regulator_set_voltage_triplet(), which accepts
    target, min and max voltages as arguments.
    
    This first tries to set the voltage between the target voltage and the
    upper limit, then fall back on the full range. The idea behind this is
    to set regulator's voltage as close to the target voltage, as possible.
    
    Based on regulator_set_voltage_tol().
    
    Signed-off-by: Viresh Kumar <viresh.kumar@linaro.org>
    Signed-off-by: Mark Brown <broonie@kernel.org>

diff --git a/include/linux/regulator/consumer.h b/include/linux/regulator/consumer.h
index f8a689ed62a5..e325d4606b62 100644
--- a/include/linux/regulator/consumer.h
+++ b/include/linux/regulator/consumer.h
@@ -552,6 +552,16 @@ static inline int regulator_count_voltages(struct regulator *regulator)
 }
 #endif
 
+static inline int regulator_set_voltage_triplet(struct regulator *regulator,
+						int min_uV, int target_uV,
+						int max_uV)
+{
+	if (regulator_set_voltage(regulator, target_uV, max_uV) == 0)
+		return 0;
+
+	return regulator_set_voltage(regulator, min_uV, max_uV);
+}
+
 static inline int regulator_set_voltage_tol(struct regulator *regulator,
 					    int new_uV, int tol_uV)
 {

commit 5127e31a6ce04bd41a020c0ba28a1c0915ab6da1
Author: Suzuki K. Poulose <suzuki.poulose@arm.com>
Date:   Fri Jul 10 16:26:38 2015 +0100

    regulator: Add missing dummy definition for regulator_list_voltage
    
    Fixes a build break when CONFIG_REGULATOR is not selected.
    
    e.g, on linux-next - 07102015:
    
    drivers/clk/tegra/clk-dfll.c: In function ‘find_lut_index_for_rate’:
    drivers/clk/tegra/clk-dfll.c:691:3: error: implicit declaration of function ‘regulator_list_voltage’ [-Werror=implicit-function-declaration]
        if (regulator_list_voltage(td->vdd_reg, td->i2c_lut[i]) == uv)
        ^
       CC      drivers/clocksource/mmio.o
       CC      fs/proc/softirqs.o
    cc1: some warnings being treated as errors
    make[3]: *** [drivers/clk/tegra/clk-dfll.o] Error 1
    make[2]: *** [drivers/clk/tegra] Error 2
    make[1]: *** [drivers/clk] Error 2
    make[1]: *** Waiting for unfinished jobs....
    
    This should be pushed to 4.2 as we have the issue in 4.2-rc1, just that
    nobody uses it without the REGULATOR(yet).
    
    Signed-off-by: Suzuki K. Poulose <suzuki.poulose@arm.com>
    Signed-off-by: Mark Brown <broonie@kernel.org>

diff --git a/include/linux/regulator/consumer.h b/include/linux/regulator/consumer.h
index f8a689ed62a5..2ba4a40919c8 100644
--- a/include/linux/regulator/consumer.h
+++ b/include/linux/regulator/consumer.h
@@ -550,6 +550,12 @@ static inline int regulator_count_voltages(struct regulator *regulator)
 {
 	return 0;
 }
+
+static inline int regulator_list_voltage(struct regulator *regulator, unsigned selector)
+{
+	return -EINVAL;
+}
+
 #endif
 
 static inline int regulator_set_voltage_tol(struct regulator *regulator,

commit bea3672833dac06e37651e755d24ffdb0c471907
Merge: 3984c9da458d 7e476c7dd8d3 046db763aaae e999c7289cf2 ce8ae17c5d86 14aef2919d06
Author: Mark Brown <broonie@kernel.org>
Date:   Fri Apr 10 19:16:03 2015 +0100

    Merge remote-tracking branches 'regulator/topic/mode', 'regulator/topic/notifier', 'regulator/topic/palmas', 'regulator/topic/qcom' and 'regulator/topic/stw481x' into regulator-next

commit ae6e808f15742fcbc0097ac2fb3055d553266965
Author: Bjorn Andersson <bjorn.andersson@sonymobile.com>
Date:   Wed Feb 11 19:35:31 2015 -0800

    regulator: Drop temporary regulator_set_optimum_mode wrapper
    
    Signed-off-by: Bjorn Andersson <bjorn.andersson@sonymobile.com>
    Signed-off-by: Mark Brown <broonie@kernel.org>

diff --git a/include/linux/regulator/consumer.h b/include/linux/regulator/consumer.h
index 6d4e9d2289f0..d8944f508235 100644
--- a/include/linux/regulator/consumer.h
+++ b/include/linux/regulator/consumer.h
@@ -554,11 +554,4 @@ static inline int regulator_is_supported_voltage_tol(struct regulator *regulator
 					      target_uV + tol_uV);
 }
 
-/* TEMP: Wrapper to keep bisectability */
-static inline int regulator_set_optimum_mode(struct regulator *regulator,
-					     int load_uA)
-{
-	return regulator_set_load(regulator, load_uA);
-}
-
 #endif

commit e39ce48f5362df9f87400b4909a6fb0f51b109ac
Author: Bjorn Andersson <bjorn.andersson@sonymobile.com>
Date:   Wed Feb 11 19:35:27 2015 -0800

    regulator: Rename regulator_set_optimum_mode
    
    Rename the regulator_set_optimum_mode() function regulator_set_load() to
    better represent what's going on.
    
    Signed-off-by: Bjorn Andersson <bjorn.andersson@sonymobile.com>
    Signed-off-by: Mark Brown <broonie@kernel.org>

diff --git a/include/linux/regulator/consumer.h b/include/linux/regulator/consumer.h
index d17e1ff7ad01..6d4e9d2289f0 100644
--- a/include/linux/regulator/consumer.h
+++ b/include/linux/regulator/consumer.h
@@ -238,7 +238,7 @@ int regulator_get_current_limit(struct regulator *regulator);
 
 int regulator_set_mode(struct regulator *regulator, unsigned int mode);
 unsigned int regulator_get_mode(struct regulator *regulator);
-int regulator_set_optimum_mode(struct regulator *regulator, int load_uA);
+int regulator_set_load(struct regulator *regulator, int load_uA);
 
 int regulator_allow_bypass(struct regulator *regulator, bool allow);
 
@@ -479,8 +479,7 @@ static inline unsigned int regulator_get_mode(struct regulator *regulator)
 	return REGULATOR_MODE_NORMAL;
 }
 
-static inline int regulator_set_optimum_mode(struct regulator *regulator,
-					int load_uA)
+static inline int regulator_set_load(struct regulator *regulator, int load_uA)
 {
 	return REGULATOR_MODE_NORMAL;
 }
@@ -555,4 +554,11 @@ static inline int regulator_is_supported_voltage_tol(struct regulator *regulator
 					      target_uV + tol_uV);
 }
 
+/* TEMP: Wrapper to keep bisectability */
+static inline int regulator_set_optimum_mode(struct regulator *regulator,
+					     int load_uA)
+{
+	return regulator_set_load(regulator, load_uA);
+}
+
 #endif

commit 046db763aaaeb987ea01ea8c7e6d618e0ad1e6b8
Author: Charles Keepax <ckeepax@gmail.com>
Date:   Thu Mar 5 15:39:20 2015 +0000

    regulator: core: Add devres versions of notifier registration
    
    Add devm_regulator_register_notifier, this adds the resource against the
    device for the consumer supply we are registering the notifier for. There
    seem to be few use-cases where this wouldn't be the users intention and
    this ensures the notifiers will always be removed at the correct time.
    
    Signed-off-by: Charles Keepax <ckeepax@opensource.wolfsonmicro.com>
    Signed-off-by: Mark Brown <broonie@kernel.org>

diff --git a/include/linux/regulator/consumer.h b/include/linux/regulator/consumer.h
index d17e1ff7ad01..bd631ee5f1da 100644
--- a/include/linux/regulator/consumer.h
+++ b/include/linux/regulator/consumer.h
@@ -252,8 +252,12 @@ int regulator_list_hardware_vsel(struct regulator *regulator,
 /* regulator notifier block */
 int regulator_register_notifier(struct regulator *regulator,
 			      struct notifier_block *nb);
+int devm_regulator_register_notifier(struct regulator *regulator,
+				     struct notifier_block *nb);
 int regulator_unregister_notifier(struct regulator *regulator,
 				struct notifier_block *nb);
+void devm_regulator_unregister_notifier(struct regulator *regulator,
+					struct notifier_block *nb);
 
 /* driver data - core doesn't touch */
 void *regulator_get_drvdata(struct regulator *regulator);
@@ -515,12 +519,24 @@ static inline int regulator_register_notifier(struct regulator *regulator,
 	return 0;
 }
 
+static inline int devm_regulator_register_notifier(struct regulator *regulator,
+						   struct notifier_block *nb)
+{
+	return 0;
+}
+
 static inline int regulator_unregister_notifier(struct regulator *regulator,
 				struct notifier_block *nb)
 {
 	return 0;
 }
 
+static inline int devm_regulator_unregister_notifier(struct regulator *regulator,
+						     struct notifier_block *nb)
+{
+	return 0;
+}
+
 static inline void *regulator_get_drvdata(struct regulator *regulator)
 {
 	return NULL;

commit 5c9e719691eab8c5de8b1b68fc3da9f7c4470c38
Author: Geert Uytterhoeven <geert+renesas@glider.be>
Date:   Mon Feb 23 17:10:03 2015 +0100

    regulator: core: Fix space before TAB
    
    Signed-off-by: Geert Uytterhoeven <geert+renesas@glider.be>
    Signed-off-by: Mark Brown <broonie@kernel.org>

diff --git a/include/linux/regulator/consumer.h b/include/linux/regulator/consumer.h
index d17e1ff7ad01..aeacd624a794 100644
--- a/include/linux/regulator/consumer.h
+++ b/include/linux/regulator/consumer.h
@@ -114,7 +114,7 @@ struct regmap;
 #define REGULATOR_EVENT_OVER_TEMP		0x10
 #define REGULATOR_EVENT_FORCE_DISABLE		0x20
 #define REGULATOR_EVENT_VOLTAGE_CHANGE		0x40
-#define REGULATOR_EVENT_DISABLE 		0x80
+#define REGULATOR_EVENT_DISABLE			0x80
 #define REGULATOR_EVENT_PRE_VOLTAGE_CHANGE	0x100
 #define REGULATOR_EVENT_ABORT_VOLTAGE_CHANGE	0x200
 #define REGULATOR_EVENT_PRE_DISABLE		0x400

commit 176488fbc121a4670849f2d10332b0fac333886b
Merge: 1b56ffda75ba f291c74a3250 70b946f9acf4
Author: Mark Brown <broonie@kernel.org>
Date:   Fri Dec 5 11:14:43 2014 +0000

    Merge remote-tracking branches 'regulator/topic/sky81452' and 'regulator/topic/stub' into regulator-next

commit af012d6278d87ea612f2f9b74a0ffa75d2d92f20
Merge: 15db0c8d79b3 da0607c8df5c a1c8a5512b7c e1326eff80bf 9f946099fe19
Author: Mark Brown <broonie@kernel.org>
Date:   Fri Dec 5 11:14:35 2014 +0000

    Merge remote-tracking branches 'regulator/topic/anatop', 'regulator/topic/disable', 'regulator/topic/dummy' and 'regulator/topic/gpio' into regulator-next

commit a1c8a5512b7cddc81767172f0de37b155cea039f
Author: Richard Fitzgerald <rf@opensource.wolfsonmicro.com>
Date:   Mon Nov 24 14:10:52 2014 +0000

    regulator: core: Add PRE_DISABLE notification
    
    Add a PRE_DISABLE notification so that consumers can use a
    notifier to run any steps required to prepare for the
    regulator being switched off. Since the regulator disable
    can fail an abort notification is also added.
    
    Signed-off-by: Richard Fitzgerald <rf@opensource.wolfsonmicro.com>
    Signed-off-by: Mark Brown <broonie@kernel.org>

diff --git a/include/linux/regulator/consumer.h b/include/linux/regulator/consumer.h
index d347c805f923..9efddd2a63ee 100644
--- a/include/linux/regulator/consumer.h
+++ b/include/linux/regulator/consumer.h
@@ -99,6 +99,8 @@ struct regmap;
  *                      Data passed is "struct pre_voltage_change_data"
  * ABORT_VOLTAGE_CHANGE Regulator voltage change failed for some reason.
  *                      Data passed is old voltage cast to (void *).
+ * PRE_DISABLE    Regulator is about to be disabled
+ * ABORT_DISABLE  Regulator disable failed for some reason
  *
  * NOTE: These events can be OR'ed together when passed into handler.
  */
@@ -113,6 +115,8 @@ struct regmap;
 #define REGULATOR_EVENT_DISABLE 		0x80
 #define REGULATOR_EVENT_PRE_VOLTAGE_CHANGE	0x100
 #define REGULATOR_EVENT_ABORT_VOLTAGE_CHANGE	0x200
+#define REGULATOR_EVENT_PRE_DISABLE		0x400
+#define REGULATOR_EVENT_ABORT_DISABLE		0x800
 
 /**
  * struct pre_voltage_change_data - Data sent with PRE_VOLTAGE_CHANGE event

commit 70b946f9acf4e805361bd877a7e25cc05e497c52
Author: Mark Brown <broonie@kernel.org>
Date:   Fri Oct 24 21:56:58 2014 +0100

    regulator: Return an error from stubbed regulator_get_exclusive()
    
    The user hasn't got a regulator and shouldn't be mislead into thinking
    they have one; really we should probably remove this stub entirely (and
    may well before the next merge window).
    
    Signed-off-by: Mark Brown <broonie@kernel.org>

diff --git a/include/linux/regulator/consumer.h b/include/linux/regulator/consumer.h
index d347c805f923..c0c0a437ec75 100644
--- a/include/linux/regulator/consumer.h
+++ b/include/linux/regulator/consumer.h
@@ -282,7 +282,7 @@ devm_regulator_get(struct device *dev, const char *id)
 static inline struct regulator *__must_check
 regulator_get_exclusive(struct device *dev, const char *id)
 {
-	return NULL;
+	return ERR_PTR(-ENODEV);
 }
 
 static inline struct regulator *__must_check

commit 174e964ec224c3c591b83a6b5f0984d905d3678f
Author: Guenter Roeck <linux@roeck-us.net>
Date:   Thu Oct 9 12:43:27 2014 -0700

    regulator: Include err.h from consumer.h to fix build failure
    
    sh:sh2007_defconfig fails to build with the following error:
    
    In file included from include/linux/regulator/machine.h:18:0,
                     from arch/sh/boards/board-sh2007.c:10:
    include/linux/regulator/consumer.h: In function 'regulator_get_optional':
    include/linux/regulator/consumer.h:271:2:
                    error: implicit declaration of function 'ERR_PTR'
    include/linux/err.h: At top level:
    include/linux/err.h:23:35: error: conflicting types for 'ERR_PTR'
    include/linux/regulator/consumer.h:271:9:
                    note: previous implicit declaration of 'ERR_PTR' was here
    
    Since consumer.h uses ERR_PTR, it should include err.h.
    
    Signed-off-by: Guenter Roeck <linux@roeck-us.net>
    Signed-off-by: Mark Brown <broonie@kernel.org>

diff --git a/include/linux/regulator/consumer.h b/include/linux/regulator/consumer.h
index d347c805f923..f540b1496e2f 100644
--- a/include/linux/regulator/consumer.h
+++ b/include/linux/regulator/consumer.h
@@ -35,6 +35,8 @@
 #ifndef __LINUX_REGULATOR_CONSUMER_H_
 #define __LINUX_REGULATOR_CONSUMER_H_
 
+#include <linux/err.h>
+
 struct device;
 struct notifier_block;
 struct regmap;

commit 7179569aeb52197fd2a9909ba226c4c9cc0e2e2a
Author: Heiko Stübner <heiko@sntech.de>
Date:   Thu Aug 28 12:36:04 2014 -0700

    regulator: core: Add REGULATOR_EVENT_PRE_VOLTAGE_CHANGE (and ABORT)
    
    In some cases we need to know when a regulator is about to be changed.
    Add a way for clients to be notified.  Note that for set_voltage() we
    don't necessarily know what voltage we'll end up with, so we tell the
    client what the range will be so they can prepare.
    
    Signed-off-by: Heiko Stübner <heiko@sntech.de>
    Signed-off-by: Doug Anderson <dianders@chromium.org>
    Signed-off-by: Mark Brown <broonie+linaro@kernel.org>

diff --git a/include/linux/regulator/consumer.h b/include/linux/regulator/consumer.h
index f8a8733068a7..d347c805f923 100644
--- a/include/linux/regulator/consumer.h
+++ b/include/linux/regulator/consumer.h
@@ -93,7 +93,12 @@ struct regmap;
  * OVER_TEMP      Regulator over temp.
  * FORCE_DISABLE  Regulator forcibly shut down by software.
  * VOLTAGE_CHANGE Regulator voltage changed.
+ *                Data passed is old voltage cast to (void *).
  * DISABLE        Regulator was disabled.
+ * PRE_VOLTAGE_CHANGE   Regulator is about to have voltage changed.
+ *                      Data passed is "struct pre_voltage_change_data"
+ * ABORT_VOLTAGE_CHANGE Regulator voltage change failed for some reason.
+ *                      Data passed is old voltage cast to (void *).
  *
  * NOTE: These events can be OR'ed together when passed into handler.
  */
@@ -106,6 +111,21 @@ struct regmap;
 #define REGULATOR_EVENT_FORCE_DISABLE		0x20
 #define REGULATOR_EVENT_VOLTAGE_CHANGE		0x40
 #define REGULATOR_EVENT_DISABLE 		0x80
+#define REGULATOR_EVENT_PRE_VOLTAGE_CHANGE	0x100
+#define REGULATOR_EVENT_ABORT_VOLTAGE_CHANGE	0x200
+
+/**
+ * struct pre_voltage_change_data - Data sent with PRE_VOLTAGE_CHANGE event
+ *
+ * @old_uV: Current voltage before change.
+ * @min_uV: Min voltage we'll change to.
+ * @max_uV: Max voltage we'll change to.
+ */
+struct pre_voltage_change_data {
+	unsigned long old_uV;
+	unsigned long min_uV;
+	unsigned long max_uV;
+};
 
 struct regulator;
 

commit a627506a01a787e49b3068f64172c59852c25bb3
Merge: 862f9f840d32 516c1514b089 3bc0312e67f0 778b28b4348a 404d4df260bc
Author: Mark Brown <broonie@linaro.org>
Date:   Tue Aug 5 18:29:21 2014 +0100

    Merge remote-tracking branches 'regulator/topic/da9211', 'regulator/topic/getreg', 'regulator/topic/gpio' and 'regulator/topic/lp872x' into regulator-next

commit 3bc0312e67f0be679039980291f88405f20b0a95
Author: Mark Brown <broonie@linaro.org>
Date:   Fri Jul 25 19:07:11 2014 +0100

    regulator: Add missing statics and inlines for stub functions
    
    So we don't get multiple definitions.
    
    Signed-off-by: Mark Brown <broonie@linaro.org>

diff --git a/include/linux/regulator/consumer.h b/include/linux/regulator/consumer.h
index 0b1c8d09a6b1..d9e6c20ab9bb 100644
--- a/include/linux/regulator/consumer.h
+++ b/include/linux/regulator/consumer.h
@@ -460,20 +460,20 @@ static inline int regulator_allow_bypass(struct regulator *regulator,
 	return 0;
 }
 
-struct regmap *regulator_get_regmap(struct regulator *regulator)
+static inline struct regmap *regulator_get_regmap(struct regulator *regulator)
 {
 	return ERR_PTR(-EOPNOTSUPP);
 }
 
-int regulator_get_hardware_vsel_register(struct regulator *regulator,
-					 unsigned *vsel_reg,
-					 unsigned *vsel_mask)
+static inline int regulator_get_hardware_vsel_register(struct regulator *regulator,
+						       unsigned *vsel_reg,
+						       unsigned *vsel_mask)
 {
 	return -EOPNOTSUPP;
 }
 
-int regulator_list_hardware_vsel(struct regulator *regulator,
-				 unsigned selector)
+static inline int regulator_list_hardware_vsel(struct regulator *regulator,
+					       unsigned selector)
 {
 	return -EOPNOTSUPP;
 }

commit 04eca28cde52cdf9eb91e127cc358ad79a8ec53b
Author: Tuomas Tynkkynen <ttynkkynen@nvidia.com>
Date:   Mon Jul 21 18:38:48 2014 +0300

    regulator: Add helpers for low-level register access
    
    Add helper functions that allow regulator consumers to obtain low-level
    details about the regulator hardware, like the voltage selector register
    address and such. These details can be useful when configuring hardware
    or firmware that want to do low-level access to regulators, with no
    involvement from the kernel.
    
    The use-case for Tegra is a voltage-controlled oscillator clocksource
    which has control logic to change the supply voltage via I2C to achieve
    a desired output clock rate.
    
    Signed-off-by: Tuomas Tynkkynen <ttynkkynen@nvidia.com>
    Signed-off-by: Mark Brown <broonie@linaro.org>

diff --git a/include/linux/regulator/consumer.h b/include/linux/regulator/consumer.h
index a2d9d81038d1..0b1c8d09a6b1 100644
--- a/include/linux/regulator/consumer.h
+++ b/include/linux/regulator/consumer.h
@@ -37,6 +37,7 @@
 
 struct device;
 struct notifier_block;
+struct regmap;
 
 /*
  * Regulator operating modes.
@@ -215,6 +216,13 @@ int regulator_set_optimum_mode(struct regulator *regulator, int load_uA);
 
 int regulator_allow_bypass(struct regulator *regulator, bool allow);
 
+struct regmap *regulator_get_regmap(struct regulator *regulator);
+int regulator_get_hardware_vsel_register(struct regulator *regulator,
+					 unsigned *vsel_reg,
+					 unsigned *vsel_mask);
+int regulator_list_hardware_vsel(struct regulator *regulator,
+				 unsigned selector);
+
 /* regulator notifier block */
 int regulator_register_notifier(struct regulator *regulator,
 			      struct notifier_block *nb);
@@ -452,6 +460,24 @@ static inline int regulator_allow_bypass(struct regulator *regulator,
 	return 0;
 }
 
+struct regmap *regulator_get_regmap(struct regulator *regulator)
+{
+	return ERR_PTR(-EOPNOTSUPP);
+}
+
+int regulator_get_hardware_vsel_register(struct regulator *regulator,
+					 unsigned *vsel_reg,
+					 unsigned *vsel_mask)
+{
+	return -EOPNOTSUPP;
+}
+
+int regulator_list_hardware_vsel(struct regulator *regulator,
+				 unsigned selector)
+{
+	return -EOPNOTSUPP;
+}
+
 static inline int regulator_register_notifier(struct regulator *regulator,
 			      struct notifier_block *nb)
 {

commit c3313b0ce8e70d6c5e556664090c6ab311cb892a
Merge: 7171511eaec5 b14903e10a06
Author: Mark Brown <broonie@linaro.org>
Date:   Mon Jun 16 16:05:56 2014 +0100

    Merge remote-tracking branch 'regulator/fix/core' into regulator-linus

commit b14903e10a06347234b387f7364f86aa07252d9f
Author: Arnd Bergmann <arnd@arndb.de>
Date:   Wed Jun 4 16:46:00 2014 +0200

    regulator: add regulator_can_change_voltage stub
    
    When CONFIG_REGULATOR is not set, we cannot call
    regulator_can_change_voltage() from a device driver, which results
    in a build error like
    
    video/fbdev/omap2/dss/hdmi5.c: In function 'hdmi_init_regulator':
    video/fbdev/omap2/dss/hdmi5.c:149:2: error: implicit declaration of function 'regulator_can_change_voltage' [-Werror=implicit-function-declaration]
    
    even for drivers that don't require the regulator API normally.
    Such a use was recently added in the omap2+ hdmi driver.
    
    This avoids the problem by adding a static inline function
    stub in the API header, as we have for most of the other
    regulator functions as well.
    
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>
    Cc: Mark Brown <broonie@kernel.org>
    Cc: Tomi Valkeinen <tomi.valkeinen@ti.com>
    Signed-off-by: Mark Brown <broonie@linaro.org>

diff --git a/include/linux/regulator/consumer.h b/include/linux/regulator/consumer.h
index e530681bea70..d60b92a7fc25 100644
--- a/include/linux/regulator/consumer.h
+++ b/include/linux/regulator/consumer.h
@@ -391,6 +391,11 @@ static inline void regulator_bulk_free(int num_consumers,
 {
 }
 
+static inline int regulator_can_change_voltage(struct regulator *regulator)
+{
+	return 0;
+}
+
 static inline int regulator_set_voltage(struct regulator *regulator,
 					int min_uV, int max_uV)
 {

commit b58e917bf9eadf1efbbebe49f13235c56f0c2c4f
Merge: 4c04ef25b8aa eba430c7eac1 d660e92a97aa c122c5b68273 5957ae1fdc50 5ab9be4274a1
Author: Mark Brown <broonie@linaro.org>
Date:   Mon Jun 2 17:08:12 2014 +0100

    Merge remote-tracking branches 'regulator/topic/s5m8767', 'regulator/topic/stub', 'regulator/topic/tps65090', 'regulator/topic/tps65217' and 'regulator/topic/tps65218' into regulator-next

commit 42398dbdea411eec0ec3d469df0eeb2e4089d9ab
Merge: dc49f3d5eb93 69c3f7239e29
Author: Mark Brown <broonie@linaro.org>
Date:   Mon Jun 2 17:08:02 2014 +0100

    Merge remote-tracking branch 'regulator/topic/core' into regulator-next

commit d660e92a97aac08aa33cd41e00a325066e00f1ef
Author: Viresh Kumar <viresh.kumar@linaro.org>
Date:   Tue May 27 17:37:29 2014 +0530

    regulators: Add definition of regulator_set_voltage_time() for !CONFIG_REGULATOR
    
    We already have dummy implementation for most of the regulators APIs for
    !CONFIG_REGULATOR case and were missing it for regulator_set_voltage_time().
    
    Found this issue while compiling cpufreq-cpu0 driver without regulators support
    in kernel.
    
    drivers/cpufreq/cpufreq-cpu0.c: In function ‘cpu0_cpufreq_probe’:
    drivers/cpufreq/cpufreq-cpu0.c:186:3: error: implicit declaration of function ‘regulator_set_voltage_time’ [-Werror=implicit-function-declaration]
    
    Fix this by adding dummy definition for regulator_set_voltage_time().
    
    Signed-off-by: Viresh Kumar <viresh.kumar@linaro.org>
    Signed-off-by: Mark Brown <broonie@linaro.org>

diff --git a/include/linux/regulator/consumer.h b/include/linux/regulator/consumer.h
index e530681bea70..94719e8dce04 100644
--- a/include/linux/regulator/consumer.h
+++ b/include/linux/regulator/consumer.h
@@ -397,6 +397,12 @@ static inline int regulator_set_voltage(struct regulator *regulator,
 	return 0;
 }
 
+static inline int regulator_set_voltage_time(struct regulator *regulator,
+					     int old_uV, int new_uV)
+{
+	return 0;
+}
+
 static inline int regulator_get_voltage(struct regulator *regulator)
 {
 	return -EINVAL;

commit 9f8c0fe9542141fd0008d5c0f6ae365890f6da94
Author: Lee Jones <lee.jones@linaro.org>
Date:   Fri May 23 16:44:10 2014 +0100

    regulator: Constify the pointer to alias name array
    
    Toughen-up checks for read-only regulator names.
    
    Signed-off-by: Lee Jones <lee.jones@linaro.org>
    Signed-off-by: Mark Brown <broonie@linaro.org>

diff --git a/include/linux/regulator/consumer.h b/include/linux/regulator/consumer.h
index e530681bea70..10d0a53f4cd3 100644
--- a/include/linux/regulator/consumer.h
+++ b/include/linux/regulator/consumer.h
@@ -151,11 +151,13 @@ int regulator_register_supply_alias(struct device *dev, const char *id,
 				    const char *alias_id);
 void regulator_unregister_supply_alias(struct device *dev, const char *id);
 
-int regulator_bulk_register_supply_alias(struct device *dev, const char **id,
+int regulator_bulk_register_supply_alias(struct device *dev,
+					 const char *const *id,
 					 struct device *alias_dev,
-					 const char **alias_id, int num_id);
+					 const char *const *alias_id,
+					 int num_id);
 void regulator_bulk_unregister_supply_alias(struct device *dev,
-					    const char **id, int num_id);
+					    const char * const *id, int num_id);
 
 int devm_regulator_register_supply_alias(struct device *dev, const char *id,
 					 struct device *alias_dev,
@@ -164,12 +166,12 @@ void devm_regulator_unregister_supply_alias(struct device *dev,
 					    const char *id);
 
 int devm_regulator_bulk_register_supply_alias(struct device *dev,
-					      const char **id,
+					      const char *const *id,
 					      struct device *alias_dev,
-					      const char **alias_id,
+					      const char *const *alias_id,
 					      int num_id);
 void devm_regulator_bulk_unregister_supply_alias(struct device *dev,
-						 const char **id,
+						 const char *const *id,
 						 int num_id);
 
 /* regulator output control and status */
@@ -290,17 +292,17 @@ static inline void regulator_unregister_supply_alias(struct device *dev,
 }
 
 static inline int regulator_bulk_register_supply_alias(struct device *dev,
-						       const char **id,
-						       struct device *alias_dev,
-						       const char **alias_id,
-						       int num_id)
+						const char *const *id,
+						struct device *alias_dev,
+						const char * const *alias_id,
+						int num_id)
 {
 	return 0;
 }
 
 static inline void regulator_bulk_unregister_supply_alias(struct device *dev,
-							  const char **id,
-							  int num_id)
+						const char * const *id,
+						int num_id)
 {
 }
 
@@ -317,15 +319,17 @@ static inline void devm_regulator_unregister_supply_alias(struct device *dev,
 {
 }
 
-static inline int devm_regulator_bulk_register_supply_alias(
-		struct device *dev, const char **id, struct device *alias_dev,
-		const char **alias_id, int num_id)
+static inline int devm_regulator_bulk_register_supply_alias(struct device *dev,
+						const char *const *id,
+						struct device *alias_dev,
+						const char *const *alias_id,
+						int num_id)
 {
 	return 0;
 }
 
 static inline void devm_regulator_bulk_unregister_supply_alias(
-		struct device *dev, const char **id, int num_id)
+	struct device *dev, const char *const *id, int num_id)
 {
 }
 

commit df7926fffa9a4c0bceb0189386b4c5edc012fcbb
Author: Tim Kryger <tim.kryger@linaro.org>
Date:   Thu Apr 17 11:55:24 2014 -0700

    regulator: core: Return error in get optional stub
    
    Drivers that call regulator_get_optional are tolerant to the absence of
    that regulator.  By modifying the value returned from the stub function
    to match that seen when a regulator isn't present, callers can wrap the
    regulator logic with an IS_ERR based conditional even if they happen to
    call regulator_is_supported_voltage.  This improves efficiency as well
    as eliminates the possibility for a very subtle bug.
    
    Signed-off-by: Tim Kryger <tim.kryger@linaro.org>
    Reviewed-by: Alex Elder <elder@linaro.org>
    Signed-off-by: Mark Brown <broonie@linaro.org>

diff --git a/include/linux/regulator/consumer.h b/include/linux/regulator/consumer.h
index e530681bea70..1a4a8c157b31 100644
--- a/include/linux/regulator/consumer.h
+++ b/include/linux/regulator/consumer.h
@@ -258,14 +258,14 @@ regulator_get_exclusive(struct device *dev, const char *id)
 static inline struct regulator *__must_check
 regulator_get_optional(struct device *dev, const char *id)
 {
-	return NULL;
+	return ERR_PTR(-ENODEV);
 }
 
 
 static inline struct regulator *__must_check
 devm_regulator_get_optional(struct device *dev, const char *id)
 {
-	return NULL;
+	return ERR_PTR(-ENODEV);
 }
 
 static inline void regulator_put(struct regulator *regulator)

commit a06ccd9c3785fa5550917ae036944f4e080b5749
Author: Charles Keepax <ckeepax@opensource.wolfsonmicro.com>
Date:   Tue Oct 15 20:14:20 2013 +0100

    regulator: core: Add ability to create a lookup alias for supply
    
    These patches add the ability to create an alternative device on which
    a lookup for a certain supply should be conducted.
    
    A common use-case for this would be devices that are logically
    represented as a collection of drivers within Linux but are are
    presented as a single device from device tree. It this case it is
    necessary for each sub device to locate their supply data on the main
    device.
    
    Signed-off-by: Charles Keepax <ckeepax@opensource.wolfsonmicro.com>
    Signed-off-by: Mark Brown <broonie@linaro.org>

diff --git a/include/linux/regulator/consumer.h b/include/linux/regulator/consumer.h
index 27be915caa96..e530681bea70 100644
--- a/include/linux/regulator/consumer.h
+++ b/include/linux/regulator/consumer.h
@@ -146,6 +146,32 @@ struct regulator *__must_check devm_regulator_get_optional(struct device *dev,
 void regulator_put(struct regulator *regulator);
 void devm_regulator_put(struct regulator *regulator);
 
+int regulator_register_supply_alias(struct device *dev, const char *id,
+				    struct device *alias_dev,
+				    const char *alias_id);
+void regulator_unregister_supply_alias(struct device *dev, const char *id);
+
+int regulator_bulk_register_supply_alias(struct device *dev, const char **id,
+					 struct device *alias_dev,
+					 const char **alias_id, int num_id);
+void regulator_bulk_unregister_supply_alias(struct device *dev,
+					    const char **id, int num_id);
+
+int devm_regulator_register_supply_alias(struct device *dev, const char *id,
+					 struct device *alias_dev,
+					 const char *alias_id);
+void devm_regulator_unregister_supply_alias(struct device *dev,
+					    const char *id);
+
+int devm_regulator_bulk_register_supply_alias(struct device *dev,
+					      const char **id,
+					      struct device *alias_dev,
+					      const char **alias_id,
+					      int num_id);
+void devm_regulator_bulk_unregister_supply_alias(struct device *dev,
+						 const char **id,
+						 int num_id);
+
 /* regulator output control and status */
 int __must_check regulator_enable(struct regulator *regulator);
 int regulator_disable(struct regulator *regulator);
@@ -250,6 +276,59 @@ static inline void devm_regulator_put(struct regulator *regulator)
 {
 }
 
+static inline int regulator_register_supply_alias(struct device *dev,
+						  const char *id,
+						  struct device *alias_dev,
+						  const char *alias_id)
+{
+	return 0;
+}
+
+static inline void regulator_unregister_supply_alias(struct device *dev,
+						    const char *id)
+{
+}
+
+static inline int regulator_bulk_register_supply_alias(struct device *dev,
+						       const char **id,
+						       struct device *alias_dev,
+						       const char **alias_id,
+						       int num_id)
+{
+	return 0;
+}
+
+static inline void regulator_bulk_unregister_supply_alias(struct device *dev,
+							  const char **id,
+							  int num_id)
+{
+}
+
+static inline int devm_regulator_register_supply_alias(struct device *dev,
+						       const char *id,
+						       struct device *alias_dev,
+						       const char *alias_id)
+{
+	return 0;
+}
+
+static inline void devm_regulator_unregister_supply_alias(struct device *dev,
+							  const char *id)
+{
+}
+
+static inline int devm_regulator_bulk_register_supply_alias(
+		struct device *dev, const char **id, struct device *alias_dev,
+		const char **alias_id, int num_id)
+{
+	return 0;
+}
+
+static inline void devm_regulator_bulk_unregister_supply_alias(
+		struct device *dev, const char **id, int num_id)
+{
+}
+
 static inline int regulator_enable(struct regulator *regulator)
 {
 	return 0;

commit f27a5fb424d4897edd3c7735ecf054ee57a5dbd0
Merge: 6979380d85fd 9efdd27678ef
Author: Mark Brown <broonie@linaro.org>
Date:   Sun Sep 1 13:50:17 2013 +0100

    Merge remote-tracking branch 'regulator/topic/optional' into regulator-next

commit 9efdd27678ef5e22c27c230a08a211b702768f3a
Author: Matthias Kaehlcke <matthias.list@kaehlcke.net>
Date:   Sun Aug 25 17:54:13 2013 +0200

    regulator: Add devm_regulator_get_exclusive()
    
    Add a resource managed regulator_get_exclusive()
    
    Signed-off-by: Matthias Kaehlcke <matthias@kaehlcke.net>
    Signed-off-by: Mark Brown <broonie@linaro.org>

diff --git a/include/linux/regulator/consumer.h b/include/linux/regulator/consumer.h
index e2bac6db4abc..91aca11198d8 100644
--- a/include/linux/regulator/consumer.h
+++ b/include/linux/regulator/consumer.h
@@ -137,6 +137,8 @@ struct regulator *__must_check devm_regulator_get(struct device *dev,
 					     const char *id);
 struct regulator *__must_check regulator_get_exclusive(struct device *dev,
 						       const char *id);
+struct regulator *__must_check devm_regulator_get_exclusive(struct device *dev,
+							const char *id);
 struct regulator *__must_check regulator_get_optional(struct device *dev,
 						      const char *id);
 struct regulator *__must_check devm_regulator_get_optional(struct device *dev,

commit de1dd9fd2156874b45803299b3b27e65d5defdd9
Author: Mark Brown <broonie@linaro.org>
Date:   Mon Jul 29 21:42:42 2013 +0100

    regulator: core: Provide hints to the core about optional supplies
    
    While the majority of supplies on devices are mandatory and can't be
    physically omitted for electrical reasons some devices do have optional
    supplies and need to know if they are missing, MMC being the most common
    of these.
    
    Currently the core accurately reports all errors when regulators are
    requested since it does not know if the supply is one that must be provided
    even if by a regulator software does not know about or if it is one that
    may genuinely be disconnected. In order to allow this behaviour to be
    changed and stub regulators to be provided in the former case add a new
    regulator request function regulator_get_optional() which provides a hint
    to the core that the regulator may genuinely not be connected.
    
    Currently the implementation is identical to the current behaviour, future
    patches will add support in the core for returning stub regulators in the
    case where normal regulator_get() fails and the board has requested it.
    
    Signed-off-by: Mark Brown <broonie@linaro.org>
    Acked-by: Chris Ball <cjb@laptop.org>

diff --git a/include/linux/regulator/consumer.h b/include/linux/regulator/consumer.h
index 60da4a62c402..e2bac6db4abc 100644
--- a/include/linux/regulator/consumer.h
+++ b/include/linux/regulator/consumer.h
@@ -137,6 +137,10 @@ struct regulator *__must_check devm_regulator_get(struct device *dev,
 					     const char *id);
 struct regulator *__must_check regulator_get_exclusive(struct device *dev,
 						       const char *id);
+struct regulator *__must_check regulator_get_optional(struct device *dev,
+						      const char *id);
+struct regulator *__must_check devm_regulator_get_optional(struct device *dev,
+							   const char *id);
 void regulator_put(struct regulator *regulator);
 void devm_regulator_put(struct regulator *regulator);
 
@@ -211,15 +215,27 @@ static inline struct regulator *__must_check regulator_get(struct device *dev,
 	return NULL;
 }
 
+static inline struct regulator *__must_check
+devm_regulator_get(struct device *dev, const char *id)
+{
+	return NULL;
+}
+
 static inline struct regulator *__must_check
 regulator_get_exclusive(struct device *dev, const char *id)
 {
 	return NULL;
 }
 
+static inline struct regulator *__must_check
+regulator_get_optional(struct device *dev, const char *id)
+{
+	return NULL;
+}
+
 
 static inline struct regulator *__must_check
-devm_regulator_get(struct device *dev, const char *id)
+devm_regulator_get_optional(struct device *dev, const char *id)
 {
 	return NULL;
 }

commit 4bdfb2729c3a396fe7400c9332c49aee2b971bd8
Author: Mark Brown <broonie@linaro.org>
Date:   Mon Jul 29 21:00:53 2013 +0100

    regulator: core: Add missing stub for regulator_get_exclusive()
    
    Signed-off-by: Mark Brown <broonie@linaro.org>

diff --git a/include/linux/regulator/consumer.h b/include/linux/regulator/consumer.h
index 3a76389c6aaa..60da4a62c402 100644
--- a/include/linux/regulator/consumer.h
+++ b/include/linux/regulator/consumer.h
@@ -211,6 +211,13 @@ static inline struct regulator *__must_check regulator_get(struct device *dev,
 	return NULL;
 }
 
+static inline struct regulator *__must_check
+regulator_get_exclusive(struct device *dev, const char *id)
+{
+	return NULL;
+}
+
+
 static inline struct regulator *__must_check
 devm_regulator_get(struct device *dev, const char *id)
 {

commit dc9ceed6a12aff627c81e01ada191e8a23fcbe3e
Author: Mark Brown <broonie@linaro.org>
Date:   Thu Jul 4 17:27:14 2013 +0100

    regulator: core: Make set_voltage_tol() try for mid-range first
    
    The expected semantic for something expressed as a tolerance is that it
    should deliver the specified value with some deviation allowed but this
    is not what set_voltage_tol() currently does. Instead it just passes
    the maximum possible range to set_voltage() which will typically result
    in a voltage aimed at lower than the target voltage.
    
    Instead first try to set a voltage between the target voltage and the
    upper limit, then fall back on the full range. This will be much more
    robust against physical variation in systems and makes the API behave
    more like users would expect.
    
    Signed-off-by: Mark Brown <broonie@linaro.org>

diff --git a/include/linux/regulator/consumer.h b/include/linux/regulator/consumer.h
index 3a76389c6aaa..3610df8dd229 100644
--- a/include/linux/regulator/consumer.h
+++ b/include/linux/regulator/consumer.h
@@ -369,8 +369,11 @@ static inline int regulator_count_voltages(struct regulator *regulator)
 static inline int regulator_set_voltage_tol(struct regulator *regulator,
 					    int new_uV, int tol_uV)
 {
-	return regulator_set_voltage(regulator,
-				     new_uV - tol_uV, new_uV + tol_uV);
+	if (regulator_set_voltage(regulator, new_uV, new_uV + tol_uV) == 0)
+		return 0;
+	else
+		return regulator_set_voltage(regulator,
+					     new_uV - tol_uV, new_uV + tol_uV);
 }
 
 static inline int regulator_is_supported_voltage_tol(struct regulator *regulator,

commit 2a668a8bc2cbe7a464ab1212475a3efb23a94b1e
Author: Paul Walmsley <pwalmsley@nvidia.com>
Date:   Fri Jun 7 08:06:56 2013 +0000

    regulator: core: add regulator_get_linear_step()
    
    Add regulator_get_linear_step(), which returns the voltage step size
    between VSEL values for linear regulators.  This is intended for use
    by regulator consumers which build their own voltage-to-VSEL tables.
    
    Signed-off-by: Paul Walmsley <pwalmsley@nvidia.com>
    Reviewed-by: Andrew Chew <achew@nvidia.com>
    Cc: Matthew Longnecker <mlongnecker@nvidia.com>
    Signed-off-by: Mark Brown <broonie@linaro.org>

diff --git a/include/linux/regulator/consumer.h b/include/linux/regulator/consumer.h
index 145022a83085..3a76389c6aaa 100644
--- a/include/linux/regulator/consumer.h
+++ b/include/linux/regulator/consumer.h
@@ -165,6 +165,7 @@ int regulator_count_voltages(struct regulator *regulator);
 int regulator_list_voltage(struct regulator *regulator, unsigned selector);
 int regulator_is_supported_voltage(struct regulator *regulator,
 				   int min_uV, int max_uV);
+unsigned int regulator_get_linear_step(struct regulator *regulator);
 int regulator_set_voltage(struct regulator *regulator, int min_uV, int max_uV);
 int regulator_set_voltage_time(struct regulator *regulator,
 			       int old_uV, int new_uV);

commit c8801a8e715d7793e1e7bcd2f6fe132234741753
Author: Mark Brown <broonie@opensource.wolfsonmicro.com>
Date:   Mon Mar 19 16:35:48 2012 +0000

    regulator: core: Mark all get and enable calls as __must_check
    
    It's generally important that devices have power when they expect it so
    drivers really ought to be checking for errors on the power up paths.
    
    Signed-off-by: Mark Brown <broonie@opensource.wolfsonmicro.com>

diff --git a/include/linux/regulator/consumer.h b/include/linux/regulator/consumer.h
index 7bc732ce6e50..145022a83085 100644
--- a/include/linux/regulator/consumer.h
+++ b/include/linux/regulator/consumer.h
@@ -141,18 +141,18 @@ void regulator_put(struct regulator *regulator);
 void devm_regulator_put(struct regulator *regulator);
 
 /* regulator output control and status */
-int regulator_enable(struct regulator *regulator);
+int __must_check regulator_enable(struct regulator *regulator);
 int regulator_disable(struct regulator *regulator);
 int regulator_force_disable(struct regulator *regulator);
 int regulator_is_enabled(struct regulator *regulator);
 int regulator_disable_deferred(struct regulator *regulator, int ms);
 
-int regulator_bulk_get(struct device *dev, int num_consumers,
-		       struct regulator_bulk_data *consumers);
-int devm_regulator_bulk_get(struct device *dev, int num_consumers,
-			    struct regulator_bulk_data *consumers);
-int regulator_bulk_enable(int num_consumers,
-			  struct regulator_bulk_data *consumers);
+int __must_check regulator_bulk_get(struct device *dev, int num_consumers,
+				    struct regulator_bulk_data *consumers);
+int __must_check devm_regulator_bulk_get(struct device *dev, int num_consumers,
+					 struct regulator_bulk_data *consumers);
+int __must_check regulator_bulk_enable(int num_consumers,
+				       struct regulator_bulk_data *consumers);
 int regulator_bulk_disable(int num_consumers,
 			   struct regulator_bulk_data *consumers);
 int regulator_bulk_force_disable(int num_consumers,

commit f4244c68fff39b28235c862d7533c825390e9020
Merge: 4247bfe20ab1 fe1e43f7190d
Author: Mark Brown <broonie@opensource.wolfsonmicro.com>
Date:   Mon Dec 10 12:43:22 2012 +0900

    Merge remote-tracking branch 'regulator/topic/tol' into regulator-next

commit 4247bfe20ab1cb8cf1874b811c0dc60bcd0249e8
Merge: 86caa905f333 1a8f85d402a2
Author: Mark Brown <broonie@opensource.wolfsonmicro.com>
Date:   Mon Dec 10 12:43:20 2012 +0900

    Merge remote-tracking branch 'regulator/topic/stub' into regulator-next

commit d1e7de3007c6e34c5e6d5e1b707b5aba4a1cd57f
Author: Marek Szyprowski <m.szyprowski@samsung.com>
Date:   Tue Dec 4 15:01:01 2012 +0100

    regulators: add regulator_can_change_voltage() function
    
    Introduce a regulator_can_change_voltage() function for the subsytems or
    drivers which might check if applying voltage change is possible and use
    special workaround code when the driver is used with fixed regulators or
    regulators with disabled ability to change the voltage.
    
    Signed-off-by: Marek Szyprowski <m.szyprowski@samsung.com>
    Signed-off-by: Mark Brown <broonie@opensource.wolfsonmicro.com>

diff --git a/include/linux/regulator/consumer.h b/include/linux/regulator/consumer.h
index c43cd3556b1f..5d0f7c10bef1 100644
--- a/include/linux/regulator/consumer.h
+++ b/include/linux/regulator/consumer.h
@@ -160,6 +160,7 @@ int regulator_bulk_force_disable(int num_consumers,
 void regulator_bulk_free(int num_consumers,
 			 struct regulator_bulk_data *consumers);
 
+int regulator_can_change_voltage(struct regulator *regulator);
 int regulator_count_voltages(struct regulator *regulator);
 int regulator_list_voltage(struct regulator *regulator, unsigned selector);
 int regulator_is_supported_voltage(struct regulator *regulator,

commit 1a8f85d402a2bf3b86c08c696a0adf36656f770a
Author: Philip Rakity <prakity@nvidia.com>
Date:   Tue Nov 20 18:07:41 2012 +0100

    regulator: add missing prototype for regulator_is_supported_voltage
    
    avoids needs for CONFIG_REGULATOR in sdhci.c
    
    Signed-off-by: Philip Rakity <prakity@nvidia.com>
    Reviewed-by: Eric Miao <eric.y.miao@gmail.com>
    Signed-off-by: Eric Miao <eric.y.miao@gmail.com>
    Signed-off-by: Mark Brown <broonie@opensource.wolfsonmicro.com>

diff --git a/include/linux/regulator/consumer.h b/include/linux/regulator/consumer.h
index c43cd3556b1f..4e3ec91bc639 100644
--- a/include/linux/regulator/consumer.h
+++ b/include/linux/regulator/consumer.h
@@ -358,6 +358,10 @@ static inline void regulator_set_drvdata(struct regulator *regulator,
 {
 }
 
+static inline int regulator_count_voltages(struct regulator *regulator)
+{
+	return 0;
+}
 #endif
 
 static inline int regulator_set_voltage_tol(struct regulator *regulator,

commit fe1e43f7190da98b396265639845a6cc0d748aad
Author: Mark Brown <broonie@opensource.wolfsonmicro.com>
Date:   Wed Nov 14 16:47:10 2012 +0900

    regulator: core: Add regulator_is_supported_voltage_tol()
    
    If consumers wish to set voltages based on a tolerance it stands to reason
    that they will also want to query for support in the same manner.
    
    Signed-off-by: Mark Brown <broonie@opensource.wolfsonmicro.com>
    Acked-by: Liam Girdwood <lrg@ti.com>

diff --git a/include/linux/regulator/consumer.h b/include/linux/regulator/consumer.h
index c43cd3556b1f..49415a23b2d8 100644
--- a/include/linux/regulator/consumer.h
+++ b/include/linux/regulator/consumer.h
@@ -367,4 +367,12 @@ static inline int regulator_set_voltage_tol(struct regulator *regulator,
 				     new_uV - tol_uV, new_uV + tol_uV);
 }
 
+static inline int regulator_is_supported_voltage_tol(struct regulator *regulator,
+						     int target_uV, int tol_uV)
+{
+	return regulator_is_supported_voltage(regulator,
+					      target_uV - tol_uV,
+					      target_uV + tol_uV);
+}
+
 #endif

commit 6a2027abd2048f7f7fdcc6e11ff10b3d9b0d0899
Merge: 5698bd757d55 52b84dac436a b8575a1143f6 3f1965776f6e e96961dabe44 3006b8d665c9
Author: Mark Brown <broonie@opensource.wolfsonmicro.com>
Date:   Fri Sep 28 14:45:07 2012 +0100

    Merge remote-tracking branches 'regulator/topic/core', 'regulator/topic/bypass', 'regulator/topic/tol', 'regulator/topic/drivers' and 'regulator/topic/tps6586x' into regulator-next

commit f59c8f9fe689790248ae7aa7426579982050638c
Author: Mark Brown <broonie@opensource.wolfsonmicro.com>
Date:   Fri Aug 31 10:36:37 2012 -0700

    regulator: core: Support bypass mode
    
    Many regulators support a bypass mode where they simply switch their
    input supply to the output. This is mainly used in low power retention
    states where power consumption is extremely low so higher voltage or
    less clean supplies can be used.
    
    Support this by providing ops for the drivers and a consumer API which
    allows the device to be put into bypass mode if all consumers enable it
    and the machine enables permission for this.
    
    This is not supported as a mode since the existing modes are rarely used
    due to fuzzy definition and mostly redundant with modern hardware which is
    able to respond promptly to load changes.
    
    Signed-off-by: Mark Brown <broonie@opensource.wolfsonmicro.com>
    Reviewed-by: Graeme Gregory <gg@slimlogic.co.uk>

diff --git a/include/linux/regulator/consumer.h b/include/linux/regulator/consumer.h
index da339fd8c755..ea3e35816621 100644
--- a/include/linux/regulator/consumer.h
+++ b/include/linux/regulator/consumer.h
@@ -177,6 +177,8 @@ int regulator_set_mode(struct regulator *regulator, unsigned int mode);
 unsigned int regulator_get_mode(struct regulator *regulator);
 int regulator_set_optimum_mode(struct regulator *regulator, int load_uA);
 
+int regulator_allow_bypass(struct regulator *regulator, bool allow);
+
 /* regulator notifier block */
 int regulator_register_notifier(struct regulator *regulator,
 			      struct notifier_block *nb);
@@ -328,6 +330,12 @@ static inline int regulator_set_optimum_mode(struct regulator *regulator,
 	return REGULATOR_MODE_NORMAL;
 }
 
+static inline int regulator_allow_bypass(struct regulator *regulator,
+					 bool allow)
+{
+	return 0;
+}
+
 static inline int regulator_register_notifier(struct regulator *regulator,
 			      struct notifier_block *nb)
 {

commit 3f1965776f6ec769192400810b6260fe48301bbb
Author: Shawn Guo <shawn.guo@linaro.org>
Date:   Sun Aug 5 23:05:20 2012 +0800

    regulator: add a new API regulator_set_voltage_tol()
    
    There are some use cases where a voltage range could be reasonably
    specified by a target voltage and tolerance.  Add a new API
    regulator_set_voltage_tol() wrapping regulator_set_voltage() call
    to ease the users.
    
    Signed-off-by: Shawn Guo <shawn.guo@linaro.org>
    Signed-off-by: Mark Brown <broonie@opensource.wolfsonmicro.com>

diff --git a/include/linux/regulator/consumer.h b/include/linux/regulator/consumer.h
index da339fd8c755..21603524bdb2 100644
--- a/include/linux/regulator/consumer.h
+++ b/include/linux/regulator/consumer.h
@@ -352,4 +352,11 @@ static inline void regulator_set_drvdata(struct regulator *regulator,
 
 #endif
 
+static inline int regulator_set_voltage_tol(struct regulator *regulator,
+					    int new_uV, int tol_uV)
+{
+	return regulator_set_voltage(regulator,
+				     new_uV - tol_uV, new_uV + tol_uV);
+}
+
 #endif

commit 4fe23791a4052ad4c8ba79dab9ff5febc8095714
Author: Philip Rakity <prakity@marvell.com>
Date:   Sat Jun 30 16:05:36 2012 -0700

    regulator: add missing defintion regulator_is_supported_voltage
    
    This definition is missing when CONFIG_REGULATOR is not defined.
    This causes compiler errors when compiling sdhci.c.  This can
    be worked around by adding #ifdef CONFIG_REGULATOR .. #endif
    but since other definitions are there we have defined the missing
    definition
    
    Signed-off-by: Philip Rakity <prakity@marvell.com>
    Signed-off-by: Mark Brown <broonie@opensource.wolfsonmicro.com>

diff --git a/include/linux/regulator/consumer.h b/include/linux/regulator/consumer.h
index 9ff29ef317c2..da339fd8c755 100644
--- a/include/linux/regulator/consumer.h
+++ b/include/linux/regulator/consumer.h
@@ -294,6 +294,12 @@ static inline int regulator_get_voltage(struct regulator *regulator)
 	return -EINVAL;
 }
 
+static inline int regulator_is_supported_voltage(struct regulator *regulator,
+				   int min_uV, int max_uV)
+{
+	return 0;
+}
+
 static inline int regulator_set_current_limit(struct regulator *regulator,
 					     int min_uA, int max_uA)
 {

commit 08aed2f6fb09c9f8efc9258c152072ed614db226
Author: Mark Brown <broonie@opensource.wolfsonmicro.com>
Date:   Mon Jun 11 20:14:24 2012 +0800

    regulator: stubs: Make stub regulator_get_voltage() return an error
    
    Returning 0 isn't useful, it's not even meaningful if there is a real
    regulator there.
    
    Reported-by: Guennadi Liakhovetski <g.liakhovetski@gmx.de>
    Signed-off-by: Mark Brown <broonie@opensource.wolfsonmicro.com>

diff --git a/include/linux/regulator/consumer.h b/include/linux/regulator/consumer.h
index 4ed1b30ac5fc..9ff29ef317c2 100644
--- a/include/linux/regulator/consumer.h
+++ b/include/linux/regulator/consumer.h
@@ -291,7 +291,7 @@ static inline int regulator_set_voltage(struct regulator *regulator,
 
 static inline int regulator_get_voltage(struct regulator *regulator)
 {
-	return 0;
+	return -EINVAL;
 }
 
 static inline int regulator_set_current_limit(struct regulator *regulator,

commit 250f6715a4112d6686670c5a62ceb9305da94616
Merge: 11bcb32848dd 313162d0b838
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Sat Mar 24 10:41:37 2012 -0700

    Merge tag 'device-for-3.4' of git://git.kernel.org/pub/scm/linux/kernel/git/paulg/linux
    
    Pull <linux/device.h> avoidance patches from Paul Gortmaker:
     "Nearly every subsystem has some kind of header with a proto like:
    
            void foo(struct device *dev);
    
      and yet there is no reason for most of these guys to care about the
      sub fields within the device struct.  This allows us to significantly
      reduce the scope of headers including headers.  For this instance, a
      reduction of about 40% is achieved by replacing the include with the
      simple fact that the device is some kind of a struct.
    
      Unlike the much larger module.h cleanup, this one is simply two
      commits.  One to fix the implicit <linux/device.h> users, and then one
      to delete the device.h includes from the linux/include/ dir wherever
      possible."
    
    * tag 'device-for-3.4' of git://git.kernel.org/pub/scm/linux/kernel/git/paulg/linux:
      device.h: audit and cleanup users in main include dir
      device.h: cleanup users outside of linux/include (C files)

commit 313162d0b83836e2f57e51b9b8650fb4b9c396ea
Author: Paul Gortmaker <paul.gortmaker@windriver.com>
Date:   Mon Jan 30 11:46:54 2012 -0500

    device.h: audit and cleanup users in main include dir
    
    The <linux/device.h> header includes a lot of stuff, and
    it in turn gets a lot of use just for the basic "struct device"
    which appears so often.
    
    Clean up the users as follows:
    
    1) For those headers only needing "struct device" as a pointer
    in fcn args, replace the include with exactly that.
    
    2) For headers not really using anything from device.h, simply
    delete the include altogether.
    
    3) For headers relying on getting device.h implicitly before
    being included themselves, now explicitly include device.h
    
    4) For files in which doing #1 or #2 uncovers an implicit
    dependency on some other header, fix by explicitly adding
    the required header(s).
    
    Any C files that were implicitly relying on device.h to be
    present have already been dealt with in advance.
    
    Total removals from #1 and #2: 51.  Total additions coming
    from #3: 9.  Total other implicit dependencies from #4: 7.
    
    As of 3.3-rc1, there were 110, so a net removal of 42 gives
    about a 38% reduction in device.h presence in include/*
    
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>

diff --git a/include/linux/regulator/consumer.h b/include/linux/regulator/consumer.h
index f2698a0edfc4..10e0d33e8ff7 100644
--- a/include/linux/regulator/consumer.h
+++ b/include/linux/regulator/consumer.h
@@ -35,7 +35,8 @@
 #ifndef __LINUX_REGULATOR_CONSUMER_H_
 #define __LINUX_REGULATOR_CONSUMER_H_
 
-#include <linux/device.h>
+struct device;
+struct notifier_block;
 
 /*
  * Regulator operating modes.

commit 2950c4bbf397fc7d3d778a97c32bba0e955b47fe
Author: Axel Lin <axel.lin@gmail.com>
Date:   Sun Jan 29 17:52:37 2012 +0800

    regulator: Add devm_regulator_put in consumer.h
    
    Commit d5ad34f7cb "regulator: Implement devm_regulator_free()"
    actually implements devm_regulator_put.
    Thus rename devm_regulator_free to devm_regulator_put.
    
    Also add empty devm_regulator_put for !CONFIG_REGULATOR
    
    Signed-off-by: Axel Lin <axel.lin@gmail.com>
    Signed-off-by: Mark Brown <broonie@opensource.wolfsonmicro.com>

diff --git a/include/linux/regulator/consumer.h b/include/linux/regulator/consumer.h
index cef8f04efc34..b6c8d717c7ec 100644
--- a/include/linux/regulator/consumer.h
+++ b/include/linux/regulator/consumer.h
@@ -137,7 +137,7 @@ struct regulator *__must_check devm_regulator_get(struct device *dev,
 struct regulator *__must_check regulator_get_exclusive(struct device *dev,
 						       const char *id);
 void regulator_put(struct regulator *regulator);
-void devm_regulator_free(struct regulator *regulator);
+void devm_regulator_put(struct regulator *regulator);
 
 /* regulator output control and status */
 int regulator_enable(struct regulator *regulator);
@@ -216,6 +216,10 @@ static inline void regulator_put(struct regulator *regulator)
 {
 }
 
+static inline void devm_regulator_put(struct regulator *regulator)
+{
+}
+
 static inline int regulator_enable(struct regulator *regulator)
 {
 	return 0;

commit e24abd6ec6c2dabccb825dc41d1725bc496b3a54
Author: Axel Lin <axel.lin@gmail.com>
Date:   Fri Jan 27 12:55:28 2012 +0800

    regulator: Add empty devm_regulator_bulk_get for !CONFIG_REGULATOR
    
    This fixes below build error if CONFIG_REGULATOR is disabled.
    
      CC      sound/soc/codecs/wm5100.o
    sound/soc/codecs/wm5100.c: In function ‘wm5100_i2c_probe’:
    sound/soc/codecs/wm5100.c:2462: error: implicit declaration of function ‘devm_regulator_bulk_get’
    make[3]: *** [sound/soc/codecs/wm5100.o] Error 1
    make[2]: *** [sound/soc/codecs] Error 2
    make[1]: *** [sound/soc] Error 2
    make: *** [sound] Error 2
    
    Signed-off-by: Axel Lin <axel.lin@gmail.com>
    Signed-off-by: Mark Brown <broonie@opensource.wolfsonmicro.com>

diff --git a/include/linux/regulator/consumer.h b/include/linux/regulator/consumer.h
index 35c42834ba3d..cef8f04efc34 100644
--- a/include/linux/regulator/consumer.h
+++ b/include/linux/regulator/consumer.h
@@ -249,6 +249,12 @@ static inline int regulator_bulk_get(struct device *dev,
 	return 0;
 }
 
+static inline int devm_regulator_bulk_get(struct device *dev, int num_consumers,
+					  struct regulator_bulk_data *consumers)
+{
+	return 0;
+}
+
 static inline int regulator_bulk_enable(int num_consumers,
 					struct regulator_bulk_data *consumers)
 {

commit e6e740304aa2a49ef09497e6c0bb906ed7987f6b
Author: Mark Brown <broonie@opensource.wolfsonmicro.com>
Date:   Fri Jan 20 20:10:08 2012 +0000

    regulator: Provide devm_regulator_bulk_get()
    
    Allow drivers to benefit from both the bulk APIs and managed resources
    simultaneously.
    
    Signed-off-by: Mark Brown <broonie@opensource.wolfsonmicro.com>

diff --git a/include/linux/regulator/consumer.h b/include/linux/regulator/consumer.h
index 60c2f996d895..35c42834ba3d 100644
--- a/include/linux/regulator/consumer.h
+++ b/include/linux/regulator/consumer.h
@@ -148,6 +148,8 @@ int regulator_disable_deferred(struct regulator *regulator, int ms);
 
 int regulator_bulk_get(struct device *dev, int num_consumers,
 		       struct regulator_bulk_data *consumers);
+int devm_regulator_bulk_get(struct device *dev, int num_consumers,
+			    struct regulator_bulk_data *consumers);
 int regulator_bulk_enable(int num_consumers,
 			  struct regulator_bulk_data *consumers);
 int regulator_bulk_disable(int num_consumers,

commit d5ad34f7cb8b23ab165cabef69577a2a20d53195
Author: Mark Brown <broonie@opensource.wolfsonmicro.com>
Date:   Fri Jan 20 20:09:18 2012 +0000

    regulator: Implement devm_regulator_free()
    
    Allow consumers to free regulators allocated using devm_regulator_get()
    if they need to. This will not normally be required.
    
    Signed-off-by: Mark Brown <broonie@opensource.wolfsonmicro.com>

diff --git a/include/linux/regulator/consumer.h b/include/linux/regulator/consumer.h
index bcfe10658763..60c2f996d895 100644
--- a/include/linux/regulator/consumer.h
+++ b/include/linux/regulator/consumer.h
@@ -137,6 +137,7 @@ struct regulator *__must_check devm_regulator_get(struct device *dev,
 struct regulator *__must_check regulator_get_exclusive(struct device *dev,
 						       const char *id);
 void regulator_put(struct regulator *regulator);
+void devm_regulator_free(struct regulator *regulator);
 
 /* regulator output control and status */
 int regulator_enable(struct regulator *regulator);

commit 070b9079226d4f3e3e7c9f4eb81f2e02e7d99572
Author: Stephen Boyd <sboyd@codeaurora.org>
Date:   Mon Jan 16 19:39:58 2012 -0800

    regulator: Add devm_regulator_get()
    
    Add a resource managed regulator_get() to simplify regulator
    usage in drivers. This allows driver authors to "get and forget"
    about their regulators by automatically calling regulator_put()
    when the driver is detached.
    
    [Fixed up a couple of coding style issues -- broonie]
    
    Signed-off-by: Stephen Boyd <sboyd@codeaurora.org>
    Signed-off-by: Mark Brown <broonie@opensource.wolfsonmicro.com>

diff --git a/include/linux/regulator/consumer.h b/include/linux/regulator/consumer.h
index f2698a0edfc4..bcfe10658763 100644
--- a/include/linux/regulator/consumer.h
+++ b/include/linux/regulator/consumer.h
@@ -132,6 +132,8 @@ struct regulator_bulk_data {
 /* regulator get and put */
 struct regulator *__must_check regulator_get(struct device *dev,
 					     const char *id);
+struct regulator *__must_check devm_regulator_get(struct device *dev,
+					     const char *id);
 struct regulator *__must_check regulator_get_exclusive(struct device *dev,
 						       const char *id);
 void regulator_put(struct regulator *regulator);
@@ -200,6 +202,13 @@ static inline struct regulator *__must_check regulator_get(struct device *dev,
 	 */
 	return NULL;
 }
+
+static inline struct regulator *__must_check
+devm_regulator_get(struct device *dev, const char *id)
+{
+	return NULL;
+}
+
 static inline void regulator_put(struct regulator *regulator)
 {
 }

commit e1de2f423462a5c6ba2c902dff1f5ddd8d3dbde3
Author: Donggeun Kim <dg77.kim@samsung.com>
Date:   Tue Jan 3 16:22:03 2012 +0900

    regulator: add regulator_bulk_force_disable function
    
    This patch allows consumers to forcibly disable multiple regulator
    clients in a single API call.
    
    Signed-off-by: Donggeun Kim <dg77.kim@samsung.com>
    Signed-off-by: MyungJoo Ham <myungjoo.ham@samsung.com>
    Signed-off-by: Kyungmin Park <kyungmin.park@samsung.com>
    Signed-off-by: Mark Brown <broonie@opensource.wolfsonmicro.com>

diff --git a/include/linux/regulator/consumer.h b/include/linux/regulator/consumer.h
index 889ab5aaa85b..f2698a0edfc4 100644
--- a/include/linux/regulator/consumer.h
+++ b/include/linux/regulator/consumer.h
@@ -149,6 +149,8 @@ int regulator_bulk_enable(int num_consumers,
 			  struct regulator_bulk_data *consumers);
 int regulator_bulk_disable(int num_consumers,
 			   struct regulator_bulk_data *consumers);
+int regulator_bulk_force_disable(int num_consumers,
+			   struct regulator_bulk_data *consumers);
 void regulator_bulk_free(int num_consumers,
 			 struct regulator_bulk_data *consumers);
 
@@ -247,6 +249,12 @@ static inline int regulator_bulk_disable(int num_consumers,
 	return 0;
 }
 
+static inline int regulator_bulk_force_disable(int num_consumers,
+					struct regulator_bulk_data *consumers)
+{
+	return 0;
+}
+
 static inline void regulator_bulk_free(int num_consumers,
 				       struct regulator_bulk_data *consumers)
 {

commit 935a521066113e16c15b842852ed681bbbdfbc63
Author: MyungJoo Ham <myungjoo.ham@samsung.com>
Date:   Mon Jan 2 18:49:32 2012 +0900

    regulator: add regulator_force_disable() definition for !CONFIG_REGULATOR
    
    regulator_force_disable() was omitted in consumer.h for
    !CONFIG_REGULATOR case.
    
    Signed-off-by: MyungJoo Ham <myungjoo.ham@samsung.com>
    Signed-off-by: Kyungmin Park <kyungmin.park@samsung.com>
    Signed-off-by: Mark Brown <broonie@opensource.wolfsonmicro.com>

diff --git a/include/linux/regulator/consumer.h b/include/linux/regulator/consumer.h
index f7756d146c61..889ab5aaa85b 100644
--- a/include/linux/regulator/consumer.h
+++ b/include/linux/regulator/consumer.h
@@ -212,6 +212,11 @@ static inline int regulator_disable(struct regulator *regulator)
 	return 0;
 }
 
+static inline int regulator_force_disable(struct regulator *regulator)
+{
+	return 0;
+}
+
 static inline int regulator_disable_deferred(struct regulator *regulator,
 					     int ms)
 {

commit 68d99b2c8efcb6ed3807a55569300c53b5f88be5
Merge: 0e59e7e7feb5 8128c9f21509
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Fri Oct 28 14:25:01 2011 -0700

    Merge branch 'for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tiwai/sound
    
    * 'for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tiwai/sound: (549 commits)
      ALSA: hda - Fix ADC input-amp handling for Cx20549 codec
      ALSA: hda - Keep EAPD turned on for old Conexant chips
      ALSA: hda/realtek - Fix missing volume controls with ALC260
      ASoC: wm8940: Properly set codec->dapm.bias_level
      ALSA: hda - Fix pin-config for ASUS W90V
      ALSA: hda - Fix surround/CLFE headphone and speaker pins order
      ALSA: hda - Fix typo
      ALSA: Update the sound git tree URL
      ALSA: HDA: Add new revision for ALC662
      ASoC: max98095: Convert codec->hw_write to snd_soc_write
      ASoC: keep pointer to resource so it can be freed
      ASoC: sgtl5000: Fix wrong mask in some snd_soc_update_bits calls
      ASoC: wm8996: Fix wrong mask for setting WM8996_AIF_CLOCKING_2
      ASoC: da7210: Add support for line out and DAC
      ASoC: da7210: Add support for DAPM
      ALSA: hda/realtek - Fix DAC assignments of multiple speakers
      ASoC: Use SGTL5000_LINREG_VDDD_MASK instead of hardcoded mask value
      ASoC: Set sgtl5000->ldo in ldo_regulator_register
      ASoC: wm8996: Use SND_SOC_DAPM_AIF_OUT for AIF2 Capture
      ASoC: wm8994: Use SND_SOC_DAPM_AIF_OUT for AIF3 Capture
      ...

commit da07ecd93b196819dcec488b7ebec69a71f3819e
Author: Mark Brown <broonie@opensource.wolfsonmicro.com>
Date:   Sun Sep 11 09:53:50 2011 +0100

    regulator: Implement deferred disable support
    
    It is a reasonably common pattern for hardware to require some delay after
    being quiesced before the disable has finalised, especially in mixed signal
    devices. For example, an active discharge may be required to ensure that
    the circuit starts up again in a known state. Avoid having to implement
    such delays in the regulator API by providing regulator_deferred_disable()
    which will do a regulator_disable() a specified number of milliseconds
    after it is called.
    
    Due to the reference counting done on regulators a deferred disable can
    be cancelled by doing another regulator_enable().
    
    Signed-off-by: Mark Brown <broonie@opensource.wolfsonmicro.com>
    Acked-by: Liam Girdwood <lrg@ti.com>

diff --git a/include/linux/regulator/consumer.h b/include/linux/regulator/consumer.h
index 26f6ea4444e3..6fae97a6ce7d 100644
--- a/include/linux/regulator/consumer.h
+++ b/include/linux/regulator/consumer.h
@@ -141,6 +141,7 @@ int regulator_enable(struct regulator *regulator);
 int regulator_disable(struct regulator *regulator);
 int regulator_force_disable(struct regulator *regulator);
 int regulator_is_enabled(struct regulator *regulator);
+int regulator_disable_deferred(struct regulator *regulator, int ms);
 
 int regulator_bulk_get(struct device *dev, int num_consumers,
 		       struct regulator_bulk_data *consumers);
@@ -211,6 +212,12 @@ static inline int regulator_disable(struct regulator *regulator)
 	return 0;
 }
 
+static inline int regulator_disable_deferred(struct regulator *regulator,
+					     int ms)
+{
+	return 0;
+}
+
 static inline int regulator_is_enabled(struct regulator *regulator)
 {
 	return 1;

commit bff747c58cf97bf4fc8b499ee0f419b59d6b226d
Author: Randy Dunlap <rdunlap@xenotime.net>
Date:   Thu Sep 8 10:16:47 2011 -0700

    regulator: fix kernel-doc warning in consumer.h
    
    Fix kernel-doc warning about internal/private data by marking it
    as "private:" so that kernel-doc will ignore it.
    
      Warning(include/linux/regulator/consumer.h:128): No description found for parameter 'ret'
    
    Signed-off-by: Randy Dunlap <rdunlap@xenotime.net>
    Acked-by: Mark Brown <broonie@opensource.wolfsonmicro.com>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

diff --git a/include/linux/regulator/consumer.h b/include/linux/regulator/consumer.h
index 26f6ea4444e3..b47771aa5718 100644
--- a/include/linux/regulator/consumer.h
+++ b/include/linux/regulator/consumer.h
@@ -123,7 +123,7 @@ struct regulator_bulk_data {
 	const char *supply;
 	struct regulator *consumer;
 
-	/* Internal use */
+	/* private: Internal use */
 	int ret;
 };
 

commit f21e0e81d81b649ad309cedc7226f1bed72982e0
Author: Mark Brown <broonie@opensource.wolfsonmicro.com>
Date:   Tue May 24 08:12:40 2011 +0800

    regulator: Do bulk enables of regulators in parallel
    
    In order to reduce the impact of ramp times rather than enabling the
    regulators for a device in series use async tasks to run the actual
    enables. This means that the delays which the enables implement can all
    run in parallel, though it does mean that the order in which the
    supplies come on may be unstable.
    
    For super bonus fun points if any of the regulators are shared between
    multiple supplies on the same device (as is rather likely) then this
    will test our locking.  Note that in this case we only delay once for
    each physical regulator so the threads shouldn't block each other while
    delaying.
    
    It'd be even nicer if we could coalesce writes to a shared enable registers
    in PMICs but that's definitely future work, and it may also be useful
    and is certainly more achievable to optimise out the parallelism if none
    of the regulators implement ramp delays.
    
    Signed-off-by: Mark Brown <broonie@opensource.wolfsonmicro.com>
    Signed-off-by: Liam Girdwood <lrg@slimlogic.co.uk>

diff --git a/include/linux/regulator/consumer.h b/include/linux/regulator/consumer.h
index 9e87c1cb7270..26f6ea4444e3 100644
--- a/include/linux/regulator/consumer.h
+++ b/include/linux/regulator/consumer.h
@@ -122,6 +122,9 @@ struct regulator;
 struct regulator_bulk_data {
 	const char *supply;
 	struct regulator *consumer;
+
+	/* Internal use */
+	int ret;
 };
 
 #if defined(CONFIG_REGULATOR)

commit 88cd222b259d62148ab8c82398498b1a01314476
Author: Linus Walleij <linus.walleij@linaro.org>
Date:   Thu Mar 17 13:24:52 2011 +0100

    regulator: provide consumer interface for fall/rise time
    
    This exposes the functionality for rise/fall fime when setting
    voltage to the consumers.
    
    Cc: Bengt Jonsson <bengt.g.jonsson@stericsson.com>
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>
    Acked-by: Mark Brown <broonie@opensource.wolfsonmicro.com>
    Signed-off-by: Liam Girdwood <lrg@slimlogic.co.uk>

diff --git a/include/linux/regulator/consumer.h b/include/linux/regulator/consumer.h
index 7954f6bd7edb..9e87c1cb7270 100644
--- a/include/linux/regulator/consumer.h
+++ b/include/linux/regulator/consumer.h
@@ -153,6 +153,8 @@ int regulator_list_voltage(struct regulator *regulator, unsigned selector);
 int regulator_is_supported_voltage(struct regulator *regulator,
 				   int min_uV, int max_uV);
 int regulator_set_voltage(struct regulator *regulator, int min_uV, int max_uV);
+int regulator_set_voltage_time(struct regulator *regulator,
+			       int old_uV, int new_uV);
 int regulator_get_voltage(struct regulator *regulator);
 int regulator_sync_voltage(struct regulator *regulator);
 int regulator_set_current_limit(struct regulator *regulator,

commit 606a25628187ce863b48d43ca42bc0cbe8342de9
Author: Mark Brown <broonie@opensource.wolfsonmicro.com>
Date:   Thu Dec 16 15:49:36 2010 +0000

    regulator: Add API to re-apply voltage to hardware
    
    When cooperating with an external control source the regulator setup
    may be changed underneath the API. Currently consumers can just redo
    the regulator_set_voltage() to restore a previously set configuration
    but provide an explicit API for doing this as optimsations in the
    regulator_set_voltage() implementation will shortly prevent that.
    
    Signed-off-by: Mark Brown <broonie@opensource.wolfsonmicro.com>
    Signed-off-by: Liam Girdwood <lrg@slimlogic.co.uk>

diff --git a/include/linux/regulator/consumer.h b/include/linux/regulator/consumer.h
index ebd747265294..7954f6bd7edb 100644
--- a/include/linux/regulator/consumer.h
+++ b/include/linux/regulator/consumer.h
@@ -154,6 +154,7 @@ int regulator_is_supported_voltage(struct regulator *regulator,
 				   int min_uV, int max_uV);
 int regulator_set_voltage(struct regulator *regulator, int min_uV, int max_uV);
 int regulator_get_voltage(struct regulator *regulator);
+int regulator_sync_voltage(struct regulator *regulator);
 int regulator_set_current_limit(struct regulator *regulator,
 			       int min_uA, int max_uA);
 int regulator_get_current_limit(struct regulator *regulator);

commit be1a50d4eba4cdb3ebf9d97a0a8693c153436775
Author: Jean Delvare <khali@linux-fr.org>
Date:   Sat Apr 3 17:37:45 2010 +0200

    regulator: Let drivers know when they use the stub API
    
    Have the stub variant of regulator_get() return NULL, so that drivers
    can (but still don't have to) handle this case specifically.
    
    Signed-off-by: Jean Delvare <khali@linux-fr.org>
    Cc: Mark Brown <broonie@opensource.wolfsonmicro.com>
    Cc: Jerome Oufella <jerome.oufella@savoirfairelinux.com>
    Acked-by: Mark Brown <broonie@opensource.wolfsonmicro.com>
    Signed-off-by: Liam Girdwood <lrg@slimlogic.co.uk>

diff --git a/include/linux/regulator/consumer.h b/include/linux/regulator/consumer.h
index 28c9fd020d39..ebd747265294 100644
--- a/include/linux/regulator/consumer.h
+++ b/include/linux/regulator/consumer.h
@@ -183,9 +183,13 @@ static inline struct regulator *__must_check regulator_get(struct device *dev,
 {
 	/* Nothing except the stubbed out regulator API should be
 	 * looking at the value except to check if it is an error
-	 * value so the actual return value doesn't matter.
+	 * value. Drivers are free to handle NULL specifically by
+	 * skipping all regulator API calls, but they don't have to.
+	 * Drivers which don't, should make sure they properly handle
+	 * corner cases of the API, such as regulator_get_voltage()
+	 * returning 0.
 	 */
-	return (struct regulator *)id;
+	return NULL;
 }
 static inline void regulator_put(struct regulator *regulator)
 {

commit 84b6826306119dc3c41ef9d7ed6c408112f63301
Author: Mark Brown <broonie@opensource.wolfsonmicro.com>
Date:   Tue Dec 1 21:12:27 2009 +0000

    regulator: Add notifier event on regulator disable
    
    The intended use case is for drivers which disable regulators to save
    power but need to do some work to restore the hardware state when
    restarting.  If the supplies are not actually disabled due to board
    limits or sharing with other active devices this notifier allows the
    driver to avoid unneeded reinitialisation, particularly when used with
    runtime PM.
    
    Signed-off-by: Mark Brown <broonie@opensource.wolfsonmicro.com>

diff --git a/include/linux/regulator/consumer.h b/include/linux/regulator/consumer.h
index 030d92255c7a..28c9fd020d39 100644
--- a/include/linux/regulator/consumer.h
+++ b/include/linux/regulator/consumer.h
@@ -89,8 +89,9 @@
  * REGULATION_OUT Regulator output is out of regulation.
  * FAIL           Regulator output has failed.
  * OVER_TEMP      Regulator over temp.
- * FORCE_DISABLE  Regulator shut down by software.
+ * FORCE_DISABLE  Regulator forcibly shut down by software.
  * VOLTAGE_CHANGE Regulator voltage changed.
+ * DISABLE        Regulator was disabled.
  *
  * NOTE: These events can be OR'ed together when passed into handler.
  */
@@ -102,6 +103,7 @@
 #define REGULATOR_EVENT_OVER_TEMP		0x10
 #define REGULATOR_EVENT_FORCE_DISABLE		0x20
 #define REGULATOR_EVENT_VOLTAGE_CHANGE		0x40
+#define REGULATOR_EVENT_DISABLE 		0x80
 
 struct regulator;
 

commit b56daf13eb77ee24f48f0bb34c2492f46a432ec4
Author: Liam Girdwood <lrg@slimlogic.co.uk>
Date:   Wed Nov 11 14:16:10 2009 +0000

    regulator: consumer.h - fix build when consumer.h is #included first.
    
    consumer.h requires device.h for stand alone build.
    
    Signed-off-by: Liam Girdwood <lrg@slimlogic.co.uk>

diff --git a/include/linux/regulator/consumer.h b/include/linux/regulator/consumer.h
index 490c5b37b6d7..030d92255c7a 100644
--- a/include/linux/regulator/consumer.h
+++ b/include/linux/regulator/consumer.h
@@ -35,6 +35,8 @@
 #ifndef __LINUX_REGULATOR_CONSUMER_H_
 #define __LINUX_REGULATOR_CONSUMER_H_
 
+#include <linux/device.h>
+
 /*
  * Regulator operating modes.
  *

commit a7a1ad9066e0266c8a4357ba3dbaeebfb80f531d
Author: Mark Brown <broonie@opensource.wolfsonmicro.com>
Date:   Tue Jul 21 16:00:24 2009 +0100

    regulator: Add regulator voltage range check API
    
    Simplify checking of support for voltage ranges by providing an API which
    wraps the existing count and list operations.
    
    Signed-off-by: Mark Brown <broonie@opensource.wolfsonmicro.com>
    Signed-off-by: Liam Girdwood <lrg@slimlogic.co.uk>

diff --git a/include/linux/regulator/consumer.h b/include/linux/regulator/consumer.h
index 976b57b6912c..490c5b37b6d7 100644
--- a/include/linux/regulator/consumer.h
+++ b/include/linux/regulator/consumer.h
@@ -146,6 +146,8 @@ void regulator_bulk_free(int num_consumers,
 
 int regulator_count_voltages(struct regulator *regulator);
 int regulator_list_voltage(struct regulator *regulator, unsigned selector);
+int regulator_is_supported_voltage(struct regulator *regulator,
+				   int min_uV, int max_uV);
 int regulator_set_voltage(struct regulator *regulator, int min_uV, int max_uV);
 int regulator_get_voltage(struct regulator *regulator);
 int regulator_set_current_limit(struct regulator *regulator,

commit 5ffbd136e6c51c8d1eec7a4a0c5d2180c81aea30
Author: Mark Brown <broonie@opensource.wolfsonmicro.com>
Date:   Tue Jul 21 16:00:23 2009 +0100

    regulator: Add regulator_get_exclusive() API
    
    Some consumers require complete control of the regulator and can't
    tolerate sharing it with other consumers, most commonly because they need
    to have the regulator actually disabled so can't have other consumers
    forcing it on. This new regulator_get_exclusive() API call allows these
    consumers to explicitly request this, documenting the assumptions that
    they are making.
    
    In order to simplify coding of such consumers the use count for regulators
    they request is forced to match the enabled state of the regulator when
    it is requested. This is not possible for consumers which can share
    regulators due to the need to keep track of the ownership of use counts.
    
    A new API call is used rather than an additional argument to the existing
    regulator_get() in order to avoid merge headaches with driver code in
    other trees.
    
    Signed-off-by: Mark Brown <broonie@opensource.wolfsonmicro.com>
    Signed-off-by: Liam Girdwood <lrg@slimlogic.co.uk>

diff --git a/include/linux/regulator/consumer.h b/include/linux/regulator/consumer.h
index 277f4b964df5..976b57b6912c 100644
--- a/include/linux/regulator/consumer.h
+++ b/include/linux/regulator/consumer.h
@@ -125,6 +125,8 @@ struct regulator_bulk_data {
 /* regulator get and put */
 struct regulator *__must_check regulator_get(struct device *dev,
 					     const char *id);
+struct regulator *__must_check regulator_get_exclusive(struct device *dev,
+						       const char *id);
 void regulator_put(struct regulator *regulator);
 
 /* regulator output control and status */

commit 4367cfdc7c657ad8a797f51b9ffd3c64b31910e7
Author: David Brownell <dbrownell@users.sourceforge.net>
Date:   Thu Feb 26 11:48:36 2009 -0800

    regulator: enumerate voltages (v2)
    
    Add a basic mechanism for regulators to report the discrete
    voltages they support:  list_voltage() enumerates them using
    selectors numbered from 0 to an upper bound.
    
    Use those methods to force machine-level constraints into bounds.
    (Example:  regulator supports 1.8V, 2.4V, 2.6V, 3.3V, and board
    constraints for that rail are 2.0V to 3.6V ... so the range of
    voltages is then 2.4V to 3.3V on this board.)
    
    Export those voltages to the regulator consumer interface, so for
    example regulator hooked up to an MMC/SD/SDIO slot can report the
    actual voltage options available to cards connected there.
    
    Signed-off-by: David Brownell <dbrownell@users.sourceforge.net>
    Acked-by: Mark Brown <broonie@opensource.wolfsonmicro.com>
    Signed-off-by: Liam Girdwood <lrg@slimlogic.co.uk>

diff --git a/include/linux/regulator/consumer.h b/include/linux/regulator/consumer.h
index df6c4bcf38f8..277f4b964df5 100644
--- a/include/linux/regulator/consumer.h
+++ b/include/linux/regulator/consumer.h
@@ -142,6 +142,8 @@ int regulator_bulk_disable(int num_consumers,
 void regulator_bulk_free(int num_consumers,
 			 struct regulator_bulk_data *consumers);
 
+int regulator_count_voltages(struct regulator *regulator);
+int regulator_list_voltage(struct regulator *regulator, unsigned selector);
 int regulator_set_voltage(struct regulator *regulator, int min_uV, int max_uV);
 int regulator_get_voltage(struct regulator *regulator);
 int regulator_set_current_limit(struct regulator *regulator,

commit 1dd68f01886a2d5cabbbe90b86e82f70917de89c
Author: Liam Girdwood <lrg@slimlogic.co.uk>
Date:   Mon Feb 2 21:43:31 2009 +0000

    regulator: email - update email address and regulator webpage.
    
    Remove deceased email address and update to new address. Also update
    website details in MAINTAINERS with correct page.
    
    Signed-off-by: Liam Girdwood <lrg@slimlogic.co.uk>

diff --git a/include/linux/regulator/consumer.h b/include/linux/regulator/consumer.h
index 533f4e26db96..df6c4bcf38f8 100644
--- a/include/linux/regulator/consumer.h
+++ b/include/linux/regulator/consumer.h
@@ -3,7 +3,7 @@
  *
  * Copyright (C) 2007, 2008 Wolfson Microelectronics PLC.
  *
- * Author: Liam Girdwood <lg@opensource.wolfsonmicro.com>
+ * Author: Liam Girdwood <lrg@slimlogic.co.uk>
  *
  * This program is free software; you can redistribute it and/or modify
  * it under the terms of the GNU General Public License version 2 as

commit b136fb4463d13eea129bf090a8a465bba6bf0003
Author: Jonathan Cameron <jic23@cam.ac.uk>
Date:   Mon Jan 19 18:20:58 2009 +0000

    Regulator: Push lock out of _notifier_call_chain + add voltage change event.
    
    Regulator: Push lock out of _notifier_call_chain and into caller functions
    (side effect of fixing deadlock in regulator_force_disable)
    + Add a voltage changed event.
    Signed-off-by: Jonathan Cameron <jic23@cam.ac.uk>
    Signed-off-by: Liam Girdwood <lrg@slimlogic.co.uk>

diff --git a/include/linux/regulator/consumer.h b/include/linux/regulator/consumer.h
index 801bf77ff4e2..533f4e26db96 100644
--- a/include/linux/regulator/consumer.h
+++ b/include/linux/regulator/consumer.h
@@ -88,6 +88,7 @@
  * FAIL           Regulator output has failed.
  * OVER_TEMP      Regulator over temp.
  * FORCE_DISABLE  Regulator shut down by software.
+ * VOLTAGE_CHANGE Regulator voltage changed.
  *
  * NOTE: These events can be OR'ed together when passed into handler.
  */
@@ -98,6 +99,7 @@
 #define REGULATOR_EVENT_FAIL			0x08
 #define REGULATOR_EVENT_OVER_TEMP		0x10
 #define REGULATOR_EVENT_FORCE_DISABLE		0x20
+#define REGULATOR_EVENT_VOLTAGE_CHANGE		0x40
 
 struct regulator;
 

commit 69279fb9a95051971ac03e558c4d46e7ba84ab3a
Author: Mark Brown <broonie@opensource.wolfsonmicro.com>
Date:   Wed Dec 31 12:52:41 2008 +0000

    regulator: Clean up kerneldoc warnings
    
    Remove kerneldoc warnings that don't relate to missing documentation,
    mostly by renaming parameters in the documentation to match their
    actual names.
    
    Signed-off-by: Mark Brown <broonie@opensource.wolfsonmicro.com>
    Signed-off-by: Liam Girdwood <lrg@slimlogic.co.uk>

diff --git a/include/linux/regulator/consumer.h b/include/linux/regulator/consumer.h
index afdc4558bb94..801bf77ff4e2 100644
--- a/include/linux/regulator/consumer.h
+++ b/include/linux/regulator/consumer.h
@@ -104,10 +104,10 @@ struct regulator;
 /**
  * struct regulator_bulk_data - Data used for bulk regulator operations.
  *
- * @supply   The name of the supply.  Initialised by the user before
- *           using the bulk regulator APIs.
- * @consumer The regulator consumer for the supply.  This will be managed
- *           by the bulk API.
+ * @supply:   The name of the supply.  Initialised by the user before
+ *            using the bulk regulator APIs.
+ * @consumer: The regulator consumer for the supply.  This will be managed
+ *            by the bulk API.
  *
  * The regulator APIs provide a series of regulator_bulk_() API calls as
  * a convenience to consumers which require multiple supplies.  This

commit e2ce4eaa76214f65a3f328ec5b45c30248115768
Author: Liam Girdwood <lg@opensource.wolfsonmicro.com>
Date:   Wed Apr 30 15:10:07 2008 +0100

    regulator: consumer device interface
    
    Add support to allow consumer device drivers to control their regulator
    power supply.
    
    This uses a similar API to the kernel clock interface in that consumer
    drivers can get and put a regulator (like they can with clocks atm) and
    get/set voltage, current limit, mode, enable and disable. This should
    allow consumers complete control over their supply voltage and current
    limit. This also compiles out if not in use so drivers can be reused in
    systems with no regulator based power control.
    
    Signed-off-by: Liam Girdwood <lg@opensource.wolfsonmicro.com>
    Signed-off-by: Mark Brown <broonie@opensource.wolfsonmicro.com>

diff --git a/include/linux/regulator/consumer.h b/include/linux/regulator/consumer.h
new file mode 100644
index 000000000000..afdc4558bb94
--- /dev/null
+++ b/include/linux/regulator/consumer.h
@@ -0,0 +1,284 @@
+/*
+ * consumer.h -- SoC Regulator consumer support.
+ *
+ * Copyright (C) 2007, 2008 Wolfson Microelectronics PLC.
+ *
+ * Author: Liam Girdwood <lg@opensource.wolfsonmicro.com>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation.
+ *
+ * Regulator Consumer Interface.
+ *
+ * A Power Management Regulator framework for SoC based devices.
+ * Features:-
+ *   o Voltage and current level control.
+ *   o Operating mode control.
+ *   o Regulator status.
+ *   o sysfs entries for showing client devices and status
+ *
+ * EXPERIMENTAL FEATURES:
+ *   Dynamic Regulator operating Mode Switching (DRMS) - allows regulators
+ *   to use most efficient operating mode depending upon voltage and load and
+ *   is transparent to client drivers.
+ *
+ *   e.g. Devices x,y,z share regulator r. Device x and y draw 20mA each during
+ *   IO and 1mA at idle. Device z draws 100mA when under load and 5mA when
+ *   idling. Regulator r has > 90% efficiency in NORMAL mode at loads > 100mA
+ *   but this drops rapidly to 60% when below 100mA. Regulator r has > 90%
+ *   efficiency in IDLE mode at loads < 10mA. Thus regulator r will operate
+ *   in normal mode for loads > 10mA and in IDLE mode for load <= 10mA.
+ *
+ */
+
+#ifndef __LINUX_REGULATOR_CONSUMER_H_
+#define __LINUX_REGULATOR_CONSUMER_H_
+
+/*
+ * Regulator operating modes.
+ *
+ * Regulators can run in a variety of different operating modes depending on
+ * output load. This allows further system power savings by selecting the
+ * best (and most efficient) regulator mode for a desired load.
+ *
+ * Most drivers will only care about NORMAL. The modes below are generic and
+ * will probably not match the naming convention of your regulator data sheet
+ * but should match the use cases in the datasheet.
+ *
+ * In order of power efficiency (least efficient at top).
+ *
+ *  Mode       Description
+ *  FAST       Regulator can handle fast changes in it's load.
+ *             e.g. useful in CPU voltage & frequency scaling where
+ *             load can quickly increase with CPU frequency increases.
+ *
+ *  NORMAL     Normal regulator power supply mode. Most drivers will
+ *             use this mode.
+ *
+ *  IDLE       Regulator runs in a more efficient mode for light
+ *             loads. Can be used for devices that have a low power
+ *             requirement during periods of inactivity. This mode
+ *             may be more noisy than NORMAL and may not be able
+ *             to handle fast load switching.
+ *
+ *  STANDBY    Regulator runs in the most efficient mode for very
+ *             light loads. Can be used by devices when they are
+ *             in a sleep/standby state. This mode is likely to be
+ *             the most noisy and may not be able to handle fast load
+ *             switching.
+ *
+ * NOTE: Most regulators will only support a subset of these modes. Some
+ * will only just support NORMAL.
+ *
+ * These modes can be OR'ed together to make up a mask of valid register modes.
+ */
+
+#define REGULATOR_MODE_FAST			0x1
+#define REGULATOR_MODE_NORMAL			0x2
+#define REGULATOR_MODE_IDLE			0x4
+#define REGULATOR_MODE_STANDBY			0x8
+
+/*
+ * Regulator notifier events.
+ *
+ * UNDER_VOLTAGE  Regulator output is under voltage.
+ * OVER_CURRENT   Regulator output current is too high.
+ * REGULATION_OUT Regulator output is out of regulation.
+ * FAIL           Regulator output has failed.
+ * OVER_TEMP      Regulator over temp.
+ * FORCE_DISABLE  Regulator shut down by software.
+ *
+ * NOTE: These events can be OR'ed together when passed into handler.
+ */
+
+#define REGULATOR_EVENT_UNDER_VOLTAGE		0x01
+#define REGULATOR_EVENT_OVER_CURRENT		0x02
+#define REGULATOR_EVENT_REGULATION_OUT		0x04
+#define REGULATOR_EVENT_FAIL			0x08
+#define REGULATOR_EVENT_OVER_TEMP		0x10
+#define REGULATOR_EVENT_FORCE_DISABLE		0x20
+
+struct regulator;
+
+/**
+ * struct regulator_bulk_data - Data used for bulk regulator operations.
+ *
+ * @supply   The name of the supply.  Initialised by the user before
+ *           using the bulk regulator APIs.
+ * @consumer The regulator consumer for the supply.  This will be managed
+ *           by the bulk API.
+ *
+ * The regulator APIs provide a series of regulator_bulk_() API calls as
+ * a convenience to consumers which require multiple supplies.  This
+ * structure is used to manage data for these calls.
+ */
+struct regulator_bulk_data {
+	const char *supply;
+	struct regulator *consumer;
+};
+
+#if defined(CONFIG_REGULATOR)
+
+/* regulator get and put */
+struct regulator *__must_check regulator_get(struct device *dev,
+					     const char *id);
+void regulator_put(struct regulator *regulator);
+
+/* regulator output control and status */
+int regulator_enable(struct regulator *regulator);
+int regulator_disable(struct regulator *regulator);
+int regulator_force_disable(struct regulator *regulator);
+int regulator_is_enabled(struct regulator *regulator);
+
+int regulator_bulk_get(struct device *dev, int num_consumers,
+		       struct regulator_bulk_data *consumers);
+int regulator_bulk_enable(int num_consumers,
+			  struct regulator_bulk_data *consumers);
+int regulator_bulk_disable(int num_consumers,
+			   struct regulator_bulk_data *consumers);
+void regulator_bulk_free(int num_consumers,
+			 struct regulator_bulk_data *consumers);
+
+int regulator_set_voltage(struct regulator *regulator, int min_uV, int max_uV);
+int regulator_get_voltage(struct regulator *regulator);
+int regulator_set_current_limit(struct regulator *regulator,
+			       int min_uA, int max_uA);
+int regulator_get_current_limit(struct regulator *regulator);
+
+int regulator_set_mode(struct regulator *regulator, unsigned int mode);
+unsigned int regulator_get_mode(struct regulator *regulator);
+int regulator_set_optimum_mode(struct regulator *regulator, int load_uA);
+
+/* regulator notifier block */
+int regulator_register_notifier(struct regulator *regulator,
+			      struct notifier_block *nb);
+int regulator_unregister_notifier(struct regulator *regulator,
+				struct notifier_block *nb);
+
+/* driver data - core doesn't touch */
+void *regulator_get_drvdata(struct regulator *regulator);
+void regulator_set_drvdata(struct regulator *regulator, void *data);
+
+#else
+
+/*
+ * Make sure client drivers will still build on systems with no software
+ * controllable voltage or current regulators.
+ */
+static inline struct regulator *__must_check regulator_get(struct device *dev,
+	const char *id)
+{
+	/* Nothing except the stubbed out regulator API should be
+	 * looking at the value except to check if it is an error
+	 * value so the actual return value doesn't matter.
+	 */
+	return (struct regulator *)id;
+}
+static inline void regulator_put(struct regulator *regulator)
+{
+}
+
+static inline int regulator_enable(struct regulator *regulator)
+{
+	return 0;
+}
+
+static inline int regulator_disable(struct regulator *regulator)
+{
+	return 0;
+}
+
+static inline int regulator_is_enabled(struct regulator *regulator)
+{
+	return 1;
+}
+
+static inline int regulator_bulk_get(struct device *dev,
+				     int num_consumers,
+				     struct regulator_bulk_data *consumers)
+{
+	return 0;
+}
+
+static inline int regulator_bulk_enable(int num_consumers,
+					struct regulator_bulk_data *consumers)
+{
+	return 0;
+}
+
+static inline int regulator_bulk_disable(int num_consumers,
+					 struct regulator_bulk_data *consumers)
+{
+	return 0;
+}
+
+static inline void regulator_bulk_free(int num_consumers,
+				       struct regulator_bulk_data *consumers)
+{
+}
+
+static inline int regulator_set_voltage(struct regulator *regulator,
+					int min_uV, int max_uV)
+{
+	return 0;
+}
+
+static inline int regulator_get_voltage(struct regulator *regulator)
+{
+	return 0;
+}
+
+static inline int regulator_set_current_limit(struct regulator *regulator,
+					     int min_uA, int max_uA)
+{
+	return 0;
+}
+
+static inline int regulator_get_current_limit(struct regulator *regulator)
+{
+	return 0;
+}
+
+static inline int regulator_set_mode(struct regulator *regulator,
+	unsigned int mode)
+{
+	return 0;
+}
+
+static inline unsigned int regulator_get_mode(struct regulator *regulator)
+{
+	return REGULATOR_MODE_NORMAL;
+}
+
+static inline int regulator_set_optimum_mode(struct regulator *regulator,
+					int load_uA)
+{
+	return REGULATOR_MODE_NORMAL;
+}
+
+static inline int regulator_register_notifier(struct regulator *regulator,
+			      struct notifier_block *nb)
+{
+	return 0;
+}
+
+static inline int regulator_unregister_notifier(struct regulator *regulator,
+				struct notifier_block *nb)
+{
+	return 0;
+}
+
+static inline void *regulator_get_drvdata(struct regulator *regulator)
+{
+	return NULL;
+}
+
+static inline void regulator_set_drvdata(struct regulator *regulator,
+	void *data)
+{
+}
+
+#endif
+
+#endif
