commit 60ab7f4153b6af461c90d572c31104086b44639f
Author: Matti Vaittinen <matti.vaittinen@fi.rohmeurope.com>
Date:   Fri May 8 18:43:36 2020 +0300

    regulator: use linear_ranges helper
    
    Change the regulator helpers to use common linear_ranges code.
    
    Signed-off-by: Matti Vaittinen <matti.vaittinen@fi.rohmeurope.com>
    Reviewed-by: Mark Brown <broonie@kernel.org>
    Acked-by: Charles Keepax <ckeepax@opensource.cirrus.com>
    Acked-by: Adam Thomson <Adam.Thomson.Opensource@diasemi.com>
    Link: https://lore.kernel.org/r/64f01d5e381b8631a271616b7790f9d5640974fb.1588944082.git.matti.vaittinen@fi.rohmeurope.com
    Signed-off-by: Mark Brown <broonie@kernel.org>

diff --git a/include/linux/regulator/driver.h b/include/linux/regulator/driver.h
index 29d920516e0b..7eb9fea8e482 100644
--- a/include/linux/regulator/driver.h
+++ b/include/linux/regulator/driver.h
@@ -13,6 +13,7 @@
 #define __LINUX_REGULATOR_DRIVER_H_
 
 #include <linux/device.h>
+#include <linux/linear_range.h>
 #include <linux/notifier.h>
 #include <linux/regulator/consumer.h>
 #include <linux/ww_mutex.h>
@@ -39,31 +40,13 @@ enum regulator_status {
 	REGULATOR_STATUS_UNDEFINED,
 };
 
-/**
- * struct regulator_linear_range - specify linear voltage ranges
- *
- * Specify a range of voltages for regulator_map_linear_range() and
- * regulator_list_linear_range().
- *
- * @min_uV:  Lowest voltage in range
- * @min_sel: Lowest selector for range
- * @max_sel: Highest selector for range
- * @uV_step: Step size
- */
-struct regulator_linear_range {
-	unsigned int min_uV;
-	unsigned int min_sel;
-	unsigned int max_sel;
-	unsigned int uV_step;
-};
-
-/* Initialize struct regulator_linear_range */
+/* Initialize struct linear_range for regulators */
 #define REGULATOR_LINEAR_RANGE(_min_uV, _min_sel, _max_sel, _step_uV)	\
 {									\
-	.min_uV		= _min_uV,					\
+	.min		= _min_uV,					\
 	.min_sel	= _min_sel,					\
 	.max_sel	= _max_sel,					\
-	.uV_step	= _step_uV,					\
+	.step		= _step_uV,					\
 }
 
 /**
@@ -348,7 +331,7 @@ struct regulator_desc {
 	unsigned int ramp_delay;
 	int min_dropout_uV;
 
-	const struct regulator_linear_range *linear_ranges;
+	const struct linear_range *linear_ranges;
 	const unsigned int *linear_range_selectors;
 
 	int n_linear_ranges;

commit bd3ebed9304acd2ccddde44675fedf963dbfdc71
Author: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
Date:   Tue Mar 17 15:54:26 2020 +0100

    regulator: driver.h: fix regulator_map_* function names
    
    The toolchain produces a warning on this driver when building
    the docs:
    
            ./include/linux/regulator/driver.h:284: WARNING: Unknown target name: "regulator_regmap_x_voltage".
    
    While fixing it, we notices that there's no function names
    with the above pattern. It seems that some previous patch
    renamed it to regulator_map_* instead.
    
    So, change the function name, replacing "x" by "*", with is
    a more used way to add a wildcard, and escape those with
    ``literal`` markup, in order to avoid the toolchain to think
    that this is a link to some existing document chapter.
    
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
    Link: https://lore.kernel.org/r/b9f5687bcf981a88c9d1fd04d759a540fda53a99.1584456635.git.mchehab+huawei@kernel.org
    Signed-off-by: Mark Brown <broonie@kernel.org>

diff --git a/include/linux/regulator/driver.h b/include/linux/regulator/driver.h
index 9a911bb5fb61..29d920516e0b 100644
--- a/include/linux/regulator/driver.h
+++ b/include/linux/regulator/driver.h
@@ -277,9 +277,9 @@ enum regulator_type {
  * @curr_table: Current limit mapping table (if table based mapping)
  *
  * @vsel_range_reg: Register for range selector when using pickable ranges
- *		    and regulator_regmap_X_voltage_X_pickable functions.
+ *		    and ``regulator_map_*_voltage_*_pickable`` functions.
  * @vsel_range_mask: Mask for register bitfield used for range selector
- * @vsel_reg: Register for selector when using regulator_regmap_X_voltage_
+ * @vsel_reg: Register for selector when using ``regulator_map_*_voltage_*``
  * @vsel_mask: Mask for register bitfield used for selector
  * @vsel_step: Specify the resolution of selector stepping when setting
  *	       voltage. If 0, then no stepping is done (requested selector is

commit 0ed4513c9a32a479b4dc41685be68edf1e99c139
Merge: 65244e5b1f4f d22b85a1b97d
Author: Mark Brown <broonie@kernel.org>
Date:   Thu Jul 4 17:34:34 2019 +0100

    Merge remote-tracking branch 'regulator/topic/coupled' into regulator-next

commit 65244e5b1f4fade54b490b47b871cefe1d7d07f0
Merge: f0386617dca6 3c7577d442a7
Author: Mark Brown <broonie@kernel.org>
Date:   Thu Jul 4 17:34:32 2019 +0100

    Merge branch 'regulator-5.3' into regulator-next

commit 2da8d9473e20a2f6645dcb0cea4848a2c1e83af9
Author: Bartosz Golaszewski <bgolaszewski@baylibre.com>
Date:   Wed Jul 3 18:10:34 2019 +0200

    regulator: implement selector stepping
    
    Some regulators require that the requested voltage be reached gradually
    by setting all or some of the intermediate values. Implement a new field
    in the regulator description struct that allows users to specify the
    number of selectors by which the regulator API should step when ramping
    the voltage up/down.
    
    Signed-off-by: Bartosz Golaszewski <bgolaszewski@baylibre.com>
    Link: https://lore.kernel.org/r/20190703161035.31808-2-brgl@bgdev.pl
    Signed-off-by: Mark Brown <broonie@kernel.org>

diff --git a/include/linux/regulator/driver.h b/include/linux/regulator/driver.h
index 377da2357118..f0d7b0496e54 100644
--- a/include/linux/regulator/driver.h
+++ b/include/linux/regulator/driver.h
@@ -286,6 +286,11 @@ enum regulator_type {
  * @vsel_range_mask: Mask for register bitfield used for range selector
  * @vsel_reg: Register for selector when using regulator_regmap_X_voltage_
  * @vsel_mask: Mask for register bitfield used for selector
+ * @vsel_step: Specify the resolution of selector stepping when setting
+ *	       voltage. If 0, then no stepping is done (requested selector is
+ *	       set directly), if >0 then the regulator API will ramp the
+ *	       voltage up/down gradually each time increasing/decreasing the
+ *	       selector by the specified step value.
  * @csel_reg: Register for current limit selector using regmap set_current_limit
  * @csel_mask: Mask for register bitfield used for current limit selector
  * @apply_reg: Register for initiate voltage change on the output when
@@ -360,6 +365,7 @@ struct regulator_desc {
 	unsigned int vsel_range_mask;
 	unsigned int vsel_reg;
 	unsigned int vsel_mask;
+	unsigned int vsel_step;
 	unsigned int csel_reg;
 	unsigned int csel_mask;
 	unsigned int apply_reg;

commit d8ca7d184b33af7913c244900df77c6cad6a5590
Author: Dmitry Osipenko <digetx@gmail.com>
Date:   Mon Jun 24 00:08:31 2019 +0300

    regulator: core: Introduce API for regulators coupling customization
    
    Right now regulator core supports only one type of regulators coupling,
    the "voltage max-spread" which keeps voltages of coupled regulators in a
    given range from each other. A more sophisticated coupling may be required
    in practice, one example is the NVIDIA Tegra SoCs which besides the
    max-spreading have other restrictions that must be adhered. Introduce API
    that allow platforms to provide their own customized coupling algorithms.
    
    Signed-off-by: Dmitry Osipenko <digetx@gmail.com>
    Signed-off-by: Mark Brown <broonie@kernel.org>

diff --git a/include/linux/regulator/driver.h b/include/linux/regulator/driver.h
index 377da2357118..31b38a2b6995 100644
--- a/include/linux/regulator/driver.h
+++ b/include/linux/regulator/driver.h
@@ -15,8 +15,6 @@
 #ifndef __LINUX_REGULATOR_DRIVER_H_
 #define __LINUX_REGULATOR_DRIVER_H_
 
-#define MAX_COUPLED		2
-
 #include <linux/device.h>
 #include <linux/notifier.h>
 #include <linux/regulator/consumer.h>
@@ -426,7 +424,8 @@ struct regulator_config {
  * incremented.
  */
 struct coupling_desc {
-	struct regulator_dev *coupled_rdevs[MAX_COUPLED];
+	struct regulator_dev **coupled_rdevs;
+	struct regulator_coupler *coupler;
 	int n_resolved;
 	int n_coupled;
 };
@@ -552,4 +551,5 @@ void regulator_unlock(struct regulator_dev *rdev);
  */
 int regulator_desc_list_voltage_linear_range(const struct regulator_desc *desc,
 					     unsigned int selector);
+
 #endif

commit d2912cb15bdda8ba4a5dd73396ad62641af2f520
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Tue Jun 4 10:11:33 2019 +0200

    treewide: Replace GPLv2 boilerplate/reference with SPDX - rule 500
    
    Based on 2 normalized pattern(s):
    
      this program is free software you can redistribute it and or modify
      it under the terms of the gnu general public license version 2 as
      published by the free software foundation
    
      this program is free software you can redistribute it and or modify
      it under the terms of the gnu general public license version 2 as
      published by the free software foundation #
    
    extracted by the scancode license scanner the SPDX license identifier
    
      GPL-2.0-only
    
    has been chosen to replace the boilerplate/reference in 4122 file(s).
    
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Reviewed-by: Enrico Weigelt <info@metux.net>
    Reviewed-by: Kate Stewart <kstewart@linuxfoundation.org>
    Reviewed-by: Allison Randal <allison@lohutok.net>
    Cc: linux-spdx@vger.kernel.org
    Link: https://lkml.kernel.org/r/20190604081206.933168790@linutronix.de
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/include/linux/regulator/driver.h b/include/linux/regulator/driver.h
index 377da2357118..d45ab52c91c9 100644
--- a/include/linux/regulator/driver.h
+++ b/include/linux/regulator/driver.h
@@ -1,3 +1,4 @@
+/* SPDX-License-Identifier: GPL-2.0-only */
 /*
  * driver.h -- SoC Regulator driver support.
  *
@@ -5,10 +6,6 @@
  *
  * Author: Liam Girdwood <lrg@slimlogic.co.uk>
  *
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License version 2 as
- * published by the Free Software Foundation.
- *
  * Regulator Driver Interface.
  */
 

commit a32e0c773b5f233b0589dbb621bb2b9681dbfec3
Author: Axel Lin <axel.lin@ingics.com>
Date:   Thu Feb 28 21:40:13 2019 +0800

    regulator: core: Add set/get_current_limit helpers for regmap users
    
    By setting curr_table, n_current_limits, csel_reg and csel_mask, the
    regmap users can use regulator_set_current_limit_regmap and
    regulator_get_current_limit_regmap for set/get_current_limit callbacks.
    
    Signed-off-by: Axel Lin <axel.lin@ingics.com>
    Signed-off-by: Mark Brown <broonie@kernel.org>

diff --git a/include/linux/regulator/driver.h b/include/linux/regulator/driver.h
index b9557c9623b5..377da2357118 100644
--- a/include/linux/regulator/driver.h
+++ b/include/linux/regulator/driver.h
@@ -264,6 +264,7 @@ enum regulator_type {
  * @continuous_voltage_range: Indicates if the regulator can set any
  *                            voltage within constrains range.
  * @n_voltages: Number of selectors available for ops.list_voltage().
+ * @n_current_limits: Number of selectors available for current limits
  *
  * @min_uV: Voltage given by the lowest selector (if linear mapping)
  * @uV_step: Voltage increase with each selector (if linear mapping)
@@ -278,6 +279,7 @@ enum regulator_type {
  * @n_linear_ranges: Number of entries in the @linear_ranges (and in
  *		     linear_range_selectors if used) table(s).
  * @volt_table: Voltage mapping table (if table based mapping)
+ * @curr_table: Current limit mapping table (if table based mapping)
  *
  * @vsel_range_reg: Register for range selector when using pickable ranges
  *		    and regulator_regmap_X_voltage_X_pickable functions.
@@ -333,6 +335,7 @@ struct regulator_desc {
 	int id;
 	unsigned int continuous_voltage_range:1;
 	unsigned n_voltages;
+	unsigned int n_current_limits;
 	const struct regulator_ops *ops;
 	int irq;
 	enum regulator_type type;
@@ -351,6 +354,7 @@ struct regulator_desc {
 	int n_linear_ranges;
 
 	const unsigned int *volt_table;
+	const unsigned int *curr_table;
 
 	unsigned int vsel_range_reg;
 	unsigned int vsel_range_mask;
@@ -534,6 +538,9 @@ int regulator_set_pull_down_regmap(struct regulator_dev *rdev);
 
 int regulator_set_active_discharge_regmap(struct regulator_dev *rdev,
 					  bool enable);
+int regulator_set_current_limit_regmap(struct regulator_dev *rdev,
+				       int min_uA, int max_uA);
+int regulator_get_current_limit_regmap(struct regulator_dev *rdev);
 void *regulator_get_init_drvdata(struct regulator_init_data *reg_init_data);
 
 void regulator_lock(struct regulator_dev *rdev);

commit 35d838ff98bc57c882eb610393c6b68455d3d9fe
Author: Axel Lin <axel.lin@ingics.com>
Date:   Thu Feb 28 21:40:12 2019 +0800

    regulator: Fix comment for csel_reg and csel_mask
    
    The csel_reg and csel_mask fields in struct regulator_desc needs to
    be generic for drivers. Not just for TPS65218.
    
    Signed-off-by: Axel Lin <axel.lin@ingics.com>
    Signed-off-by: Mark Brown <broonie@kernel.org>

diff --git a/include/linux/regulator/driver.h b/include/linux/regulator/driver.h
index 05efe2b057c1..b9557c9623b5 100644
--- a/include/linux/regulator/driver.h
+++ b/include/linux/regulator/driver.h
@@ -284,8 +284,8 @@ enum regulator_type {
  * @vsel_range_mask: Mask for register bitfield used for range selector
  * @vsel_reg: Register for selector when using regulator_regmap_X_voltage_
  * @vsel_mask: Mask for register bitfield used for selector
- * @csel_reg: Register for TPS65218 LS3 current regulator
- * @csel_mask: Mask for TPS65218 LS3 current regulator
+ * @csel_reg: Register for current limit selector using regmap set_current_limit
+ * @csel_mask: Mask for register bitfield used for current limit selector
  * @apply_reg: Register for initiate voltage change on the output when
  *                using regulator_set_voltage_sel_regmap
  * @apply_bit: Register bitfield used for initiate voltage change on the

commit 6a47b4da551a762217215aeeda22e46469c5868a
Author: Matti Vaittinen <matti.vaittinen@fi.rohmeurope.com>
Date:   Thu Feb 14 11:38:05 2019 +0200

    regulator: add regulator_desc_list_voltage_linear_range
    
    Add regulator_desc_list_voltage_linear_range which can be used
    by drivers for getting the voltages before regulator is registered.
    This may be useful for drivers which need to fetch the voltage
    selectors at device-tree parsing callback.
    
    Signed-off-by: Matti Vaittinen <matti.vaittinen@fi.rohmeurope.com>
    Acked-by: Mark Brown <broonie@kernel.org>
    Tested-by: Angus Ainslie <angus@akkea.ca>
    Reviewed-by: Angus Ainslie <angus@akkea.ca>
    Signed-off-by: Mark Brown <broonie@kernel.org>

diff --git a/include/linux/regulator/driver.h b/include/linux/regulator/driver.h
index 7f8345bff4e1..05efe2b057c1 100644
--- a/include/linux/regulator/driver.h
+++ b/include/linux/regulator/driver.h
@@ -539,4 +539,10 @@ void *regulator_get_init_drvdata(struct regulator_init_data *reg_init_data);
 void regulator_lock(struct regulator_dev *rdev);
 void regulator_unlock(struct regulator_dev *rdev);
 
+/*
+ * Helper functions intended to be used by regulator drivers prior registering
+ * their regulators.
+ */
+int regulator_desc_list_voltage_linear_range(const struct regulator_desc *desc,
+					     unsigned int selector);
 #endif

commit 541d052d721506549774ab780a2709e4ff8ca79b
Author: Linus Walleij <linus.walleij@linaro.org>
Date:   Tue Jan 29 11:31:56 2019 +0100

    regulator: core: Only support passing enable GPIO descriptors
    
    Now that we changed all providers to pass descriptors into the core
    for enable GPIOs instead of a global GPIO number, delete the support
    for passing GPIO numbers in, and we get a cleanup and size reduction
    in the core, and from a GPIO point of view we use the modern, cleaner
    interface.
    
    Tested-by: Marek Szyprowski <m.szyprowski@samsung.com>
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>
    Signed-off-by: Mark Brown <broonie@kernel.org>

diff --git a/include/linux/regulator/driver.h b/include/linux/regulator/driver.h
index 795b38a06b6c..7f8345bff4e1 100644
--- a/include/linux/regulator/driver.h
+++ b/include/linux/regulator/driver.h
@@ -401,13 +401,7 @@ struct regulator_desc {
  *           NULL).
  * @regmap: regmap to use for core regmap helpers if dev_get_regmap() is
  *          insufficient.
- * @ena_gpio_initialized: GPIO controlling regulator enable was properly
- *                        initialized, meaning that >= 0 is a valid gpio
- *                        identifier and < 0 is a non existent gpio.
- * @ena_gpio: GPIO controlling regulator enable.
- * @ena_gpiod: GPIO descriptor controlling regulator enable.
- * @ena_gpio_invert: Sense for GPIO enable control.
- * @ena_gpio_flags: Flags to use when calling gpio_request_one()
+ * @ena_gpiod: GPIO controlling regulator enable.
  */
 struct regulator_config {
 	struct device *dev;
@@ -416,11 +410,7 @@ struct regulator_config {
 	struct device_node *of_node;
 	struct regmap *regmap;
 
-	bool ena_gpio_initialized;
-	int ena_gpio;
 	struct gpio_desc *ena_gpiod;
-	unsigned int ena_gpio_invert:1;
-	unsigned int ena_gpio_flags;
 };
 
 /*

commit 03c87b95ac04c2a34045641b25dded6e3e889556
Author: Bartosz Golaszewski <bgolaszewski@baylibre.com>
Date:   Wed Jan 9 18:44:00 2019 +0100

    regulator: provide rdev_get_regmap()
    
    Provide a helper allowing to access regulator's regmap.
    
    Signed-off-by: Bartosz Golaszewski <bgolaszewski@baylibre.com>
    Signed-off-by: Mark Brown <broonie@kernel.org>

diff --git a/include/linux/regulator/driver.h b/include/linux/regulator/driver.h
index 389bcaf7900f..795b38a06b6c 100644
--- a/include/linux/regulator/driver.h
+++ b/include/linux/regulator/driver.h
@@ -503,6 +503,7 @@ int regulator_notifier_call_chain(struct regulator_dev *rdev,
 
 void *rdev_get_drvdata(struct regulator_dev *rdev);
 struct device *rdev_get_dev(struct regulator_dev *rdev);
+struct regmap *rdev_get_regmap(struct regulator_dev *rdev);
 int rdev_get_id(struct regulator_dev *rdev);
 
 int regulator_mode_to_status(unsigned int);

commit 5451781dadf85000665e0e2c3288e9e0f34b860a
Author: Douglas Anderson <dianders@chromium.org>
Date:   Tue Nov 20 09:52:53 2018 -0800

    regulator: core: Only count load for enabled consumers
    
    In general when the consumer of a regulator requests that the
    regulator be disabled it no longer will be drawing much load from the
    regulator--it should just be the leakage current and that should be
    very close to 0.
    
    Up to this point the regulator framework has continued to count a
    consumer's load request for disabled regulators.  This has led to code
    patterns that look like this:
    
      enable_my_thing():
        regular_set_load(reg, load_uA)
        regulator_enable(reg)
    
      disable_my_thing():
        regulator_disable(reg)
        regulator_set_load(reg, 0)
    
    Sometimes disable_my_thing() sets a nominal (<= 100 uA) load instead
    of setting a 0 uA load.  I will make the assertion that nearly all (if
    not all) places where we set a nominal load of 100 uA or less we end
    up with a result that is the same as if we had set a load of 0 uA.
    Specifically:
    - The whole point of setting the load is to help set the operating
      mode of the regulator.  Higher loads may need less efficient
      operating modes.
    - The only time this matters at all is if there is another consumer of
      the regulator that wants the regulator on.  If there are no other
      consumers of the regulator then the regulator will turn off and we
      don't care about the operating mode.
    - If there's another consumer that actually wants the regulator on
      then presumably it is requesting a load that makes our nominal
      <= 100 uA load insignificant.
    
    A quick survey of the existing callers to regulator_set_load() to see
    how everyone uses it:
    
    Signed-off-by: Douglas Anderson <dianders@chromium.org>
    Signed-off-by: Mark Brown <broonie@kernel.org>

diff --git a/include/linux/regulator/driver.h b/include/linux/regulator/driver.h
index 7065031f0846..389bcaf7900f 100644
--- a/include/linux/regulator/driver.h
+++ b/include/linux/regulator/driver.h
@@ -474,7 +474,6 @@ struct regulator_dev {
 	struct regmap *regmap;
 
 	struct delayed_work disable_work;
-	int deferred_disables;
 
 	void *reg_data;		/* regulator_dev data */
 

commit f8702f9e4aa7b45131af3df5531d6e3835269141
Author: Dmitry Osipenko <digetx@gmail.com>
Date:   Mon Nov 19 00:56:17 2018 +0300

    regulator: core: Use ww_mutex for regulators locking
    
    Wait/wound mutex shall be used in order to avoid lockups on locking of
    coupled regulators.
    
    Signed-off-by: Dmitry Osipenko <digetx@gmail.com>
    Suggested-by: Lucas Stach <l.stach@pengutronix.de>
    Signed-off-by: Mark Brown <broonie@kernel.org>

diff --git a/include/linux/regulator/driver.h b/include/linux/regulator/driver.h
index a05d37d0efa1..7065031f0846 100644
--- a/include/linux/regulator/driver.h
+++ b/include/linux/regulator/driver.h
@@ -20,6 +20,7 @@
 #include <linux/device.h>
 #include <linux/notifier.h>
 #include <linux/regulator/consumer.h>
+#include <linux/ww_mutex.h>
 
 struct gpio_desc;
 struct regmap;
@@ -462,7 +463,7 @@ struct regulator_dev {
 	struct coupling_desc coupling_desc;
 
 	struct blocking_notifier_head notifier;
-	struct mutex mutex; /* consumer lock */
+	struct ww_mutex mutex; /* consumer lock */
 	struct task_struct *mutex_owner;
 	int ref_cnt;
 	struct module *owner;
@@ -545,4 +546,7 @@ int regulator_set_active_discharge_regmap(struct regulator_dev *rdev,
 					  bool enable);
 void *regulator_get_init_drvdata(struct regulator_init_data *reg_init_data);
 
+void regulator_lock(struct regulator_dev *rdev);
+void regulator_unlock(struct regulator_dev *rdev);
+
 #endif

commit 40c223efaa17e9bc3d964ee285967ebbe09c3e12
Author: Dmitry Osipenko <digetx@gmail.com>
Date:   Fri Oct 5 18:36:33 2018 +0300

    regulator: core: Limit regulators coupling to a single couple
    
    Device tree binding was changed in a way that now max-spread values must
    be defied per regulator pair. Limit number of pairs in order to adapt to
    the new binding without changing regulators code.
    
    Signed-off-by: Dmitry Osipenko <digetx@gmail.com>
    Signed-off-by: Mark Brown <broonie@kernel.org>

diff --git a/include/linux/regulator/driver.h b/include/linux/regulator/driver.h
index a9c030192147..a05d37d0efa1 100644
--- a/include/linux/regulator/driver.h
+++ b/include/linux/regulator/driver.h
@@ -15,7 +15,7 @@
 #ifndef __LINUX_REGULATOR_DRIVER_H_
 #define __LINUX_REGULATOR_DRIVER_H_
 
-#define MAX_COUPLED		4
+#define MAX_COUPLED		2
 
 #include <linux/device.h>
 #include <linux/notifier.h>

commit 18e4b55fbd2069cee51ef9660b35c65ec13bee6d
Author: Matti Vaittinen <matti.vaittinen@fi.rohmeurope.com>
Date:   Fri Sep 14 11:31:36 2018 +0300

    regulator: Support regulators where voltage ranges are selectable
    
    For example ROHM BD71837 and ROHM BD71847 Power management ICs have
    regulators which provide multiple linear ranges. Ranges can be
    selected by individual non contagious bit in vsel register. Add
    regmap helper functions for selecting ranges.
    
    Signed-off-by: Matti Vaittinen <matti.vaittinen@fi.rohmeurope.com>
    Signed-off-by: Mark Brown <broonie@kernel.org>

diff --git a/include/linux/regulator/driver.h b/include/linux/regulator/driver.h
index 0fd8fbb74763..a9c030192147 100644
--- a/include/linux/regulator/driver.h
+++ b/include/linux/regulator/driver.h
@@ -271,9 +271,16 @@ enum regulator_type {
  * @ramp_delay: Time to settle down after voltage change (unit: uV/us)
  * @min_dropout_uV: The minimum dropout voltage this regulator can handle
  * @linear_ranges: A constant table of possible voltage ranges.
- * @n_linear_ranges: Number of entries in the @linear_ranges table.
+ * @linear_range_selectors: A constant table of voltage range selectors.
+ *			    If pickable ranges are used each range must
+ *			    have corresponding selector here.
+ * @n_linear_ranges: Number of entries in the @linear_ranges (and in
+ *		     linear_range_selectors if used) table(s).
  * @volt_table: Voltage mapping table (if table based mapping)
  *
+ * @vsel_range_reg: Register for range selector when using pickable ranges
+ *		    and regulator_regmap_X_voltage_X_pickable functions.
+ * @vsel_range_mask: Mask for register bitfield used for range selector
  * @vsel_reg: Register for selector when using regulator_regmap_X_voltage_
  * @vsel_mask: Mask for register bitfield used for selector
  * @csel_reg: Register for TPS65218 LS3 current regulator
@@ -338,10 +345,14 @@ struct regulator_desc {
 	int min_dropout_uV;
 
 	const struct regulator_linear_range *linear_ranges;
+	const unsigned int *linear_range_selectors;
+
 	int n_linear_ranges;
 
 	const unsigned int *volt_table;
 
+	unsigned int vsel_range_reg;
+	unsigned int vsel_range_mask;
 	unsigned int vsel_reg;
 	unsigned int vsel_mask;
 	unsigned int csel_reg;
@@ -498,18 +509,25 @@ int regulator_mode_to_status(unsigned int);
 
 int regulator_list_voltage_linear(struct regulator_dev *rdev,
 				  unsigned int selector);
+int regulator_list_voltage_pickable_linear_range(struct regulator_dev *rdev,
+						   unsigned int selector);
 int regulator_list_voltage_linear_range(struct regulator_dev *rdev,
 					unsigned int selector);
 int regulator_list_voltage_table(struct regulator_dev *rdev,
 				  unsigned int selector);
 int regulator_map_voltage_linear(struct regulator_dev *rdev,
 				  int min_uV, int max_uV);
+int regulator_map_voltage_pickable_linear_range(struct regulator_dev *rdev,
+						  int min_uV, int max_uV);
 int regulator_map_voltage_linear_range(struct regulator_dev *rdev,
 				       int min_uV, int max_uV);
 int regulator_map_voltage_iterate(struct regulator_dev *rdev,
 				  int min_uV, int max_uV);
 int regulator_map_voltage_ascend(struct regulator_dev *rdev,
 				  int min_uV, int max_uV);
+int regulator_get_voltage_sel_pickable_regmap(struct regulator_dev *rdev);
+int regulator_set_voltage_sel_pickable_regmap(struct regulator_dev *rdev,
+						unsigned int sel);
 int regulator_get_voltage_sel_regmap(struct regulator_dev *rdev);
 int regulator_set_voltage_sel_regmap(struct regulator_dev *rdev, unsigned sel);
 int regulator_is_enabled_regmap(struct regulator_dev *rdev);

commit 0380cf7dbaca75c524e34b30979f0806124fa8e6
Author: pascal paillet <p.paillet@st.com>
Date:   Thu Jul 5 14:25:57 2018 +0000

    regulator: core: Change suspend_late to suspend
    
    Change suspend_late ops to suspend normal ops. The goal is to avoid
    requesting all the regulator drivers to be operational in suspend late
    phase.
    
    Signed-off-by: pascal paillet <p.paillet@st.com>
    Signed-off-by: Mark Brown <broonie@kernel.org>

diff --git a/include/linux/regulator/driver.h b/include/linux/regulator/driver.h
index dea96ee39fdc..0fd8fbb74763 100644
--- a/include/linux/regulator/driver.h
+++ b/include/linux/regulator/driver.h
@@ -220,7 +220,7 @@ struct regulator_ops {
 	/* set regulator suspend operating mode (defined in consumer.h) */
 	int (*set_suspend_mode) (struct regulator_dev *, unsigned int mode);
 
-	int (*resume_early)(struct regulator_dev *rdev);
+	int (*resume)(struct regulator_dev *rdev);
 
 	int (*set_pull_down) (struct regulator_dev *);
 };

commit 7bd0c7ba62e8a9840f15fc4ff0122b29fe1b6413
Author: Matthias Kaehlcke <mka@chromium.org>
Date:   Thu Jun 7 16:51:38 2018 -0700

    regulator: Fix typo in comment of struct regulator_linear_range
    
    regulator_map_linar_range() => regulator_map_linear_range()
    
    Signed-off-by: Matthias Kaehlcke <mka@chromium.org>
    Signed-off-by: Mark Brown <broonie@kernel.org>

diff --git a/include/linux/regulator/driver.h b/include/linux/regulator/driver.h
index fc2dc8df476f..dea96ee39fdc 100644
--- a/include/linux/regulator/driver.h
+++ b/include/linux/regulator/driver.h
@@ -46,7 +46,7 @@ enum regulator_status {
 /**
  * struct regulator_linear_range - specify linear voltage ranges
  *
- * Specify a range of voltages for regulator_map_linar_range() and
+ * Specify a range of voltages for regulator_map_linear_range() and
  * regulator_list_linear_range().
  *
  * @min_uV:  Lowest voltage in range

commit a085a31af566254fb8f7721911c828c8fa797894
Author: Maciej Purski <m.purski@samsung.com>
Date:   Mon Apr 23 16:33:39 2018 +0200

    regulator: core: Parse coupled regulators properties
    
    On Odroid XU3/4 and other Exynos5422 based boards there is a case, that
    different devices on the board are supplied by different regulators
    with non-fixed voltages. If one of these devices temporarily requires
    higher voltage, there might occur a situation that the spread between
    devices' voltages is so high, that there is a risk of changing
    'high' and 'low' states on the interconnection between devices powered
    by those regulators.
    
    Add new structure "coupling_desc" to regulator_dev, which contains
    pointers to all coupled regulators including the owner of the structure,
    number of coupled regulators and counter of currently resolved
    regulators.
    
    Add of_functions to parse all data needed in regulator coupling.
    Provide method to check DTS data consistency. Check if each coupled
    regulator's max_spread is equal and if their lists of regulators match.
    
    Signed-off-by: Maciej Purski <m.purski@samsung.com>
    Signed-off-by: Mark Brown <broonie@kernel.org>

diff --git a/include/linux/regulator/driver.h b/include/linux/regulator/driver.h
index c2a181fa7287..fc2dc8df476f 100644
--- a/include/linux/regulator/driver.h
+++ b/include/linux/regulator/driver.h
@@ -15,6 +15,8 @@
 #ifndef __LINUX_REGULATOR_DRIVER_H_
 #define __LINUX_REGULATOR_DRIVER_H_
 
+#define MAX_COUPLED		4
+
 #include <linux/device.h>
 #include <linux/notifier.h>
 #include <linux/regulator/consumer.h>
@@ -409,6 +411,20 @@ struct regulator_config {
 	unsigned int ena_gpio_flags;
 };
 
+/*
+ * struct coupling_desc
+ *
+ * Describes coupling of regulators. Each regulator should have
+ * at least a pointer to itself in coupled_rdevs array.
+ * When a new coupled regulator is resolved, n_resolved is
+ * incremented.
+ */
+struct coupling_desc {
+	struct regulator_dev *coupled_rdevs[MAX_COUPLED];
+	int n_resolved;
+	int n_coupled;
+};
+
 /*
  * struct regulator_dev
  *
@@ -432,6 +448,8 @@ struct regulator_dev {
 	/* lists we own */
 	struct list_head consumer_list; /* consumers we supply */
 
+	struct coupling_desc coupling_desc;
+
 	struct blocking_notifier_head notifier;
 	struct mutex mutex; /* consumer lock */
 	struct task_struct *mutex_owner;

commit 66cf9a7e0192734c1c94751e628bd075be62cff4
Author: Maciej Purski <m.purski@samsung.com>
Date:   Mon Apr 23 16:33:37 2018 +0200

    regulator: core: Make locks re-entrant
    
    Setting voltage, enabling/disabling regulators requires operations on
    all regulators related with the regulator being changed. Therefore,
    all of them should be locked for the whole operation. With the current
    locking implementation, adding additional dependency (regulators
    coupling) causes deadlocks in some cases.
    
    Introduce a possibility to attempt to lock a mutex multiple times
    by the same task without waiting on a mutex. This should handle all
    reasonable coupling-supplying combinations, especially when two coupled
    regulators share common supplies. The only situation that should be
    forbidden is simultaneous coupling and supplying between a pair of
    regulators.
    
    The idea is based on clk core.
    
    Signed-off-by: Maciej Purski <m.purski@samsung.com>
    Signed-off-by: Mark Brown <broonie@kernel.org>

diff --git a/include/linux/regulator/driver.h b/include/linux/regulator/driver.h
index 14e512ad6d4f..c2a181fa7287 100644
--- a/include/linux/regulator/driver.h
+++ b/include/linux/regulator/driver.h
@@ -434,6 +434,8 @@ struct regulator_dev {
 
 	struct blocking_notifier_head notifier;
 	struct mutex mutex; /* consumer lock */
+	struct task_struct *mutex_owner;
+	int ref_cnt;
 	struct module *owner;
 	struct device dev;
 	struct regulation_constraints *constraints;

commit 84b3a7c9c6befe5ab4d49070fe7bcab2da22637e
Author: Douglas Anderson <dianders@chromium.org>
Date:   Tue May 15 15:07:17 2018 -0700

    regulator: core: Allow for regulators that can't be read at bootup
    
    Regulators attached via RPMh on Qualcomm sdm845 apparently are
    write-only.  Specifically you can send a request for a certain voltage
    but you can't read back to see what voltage you've requested.  What
    this means is that at bootup we have absolutely no idea what voltage
    we could be at.
    
    As discussed in the patches to try to support the RPMh regulators [1],
    the fact that regulators are write-only means that its driver's
    get_voltage_sel() should return an error code if it's called before
    any calls to set_voltage_sel().  This causes problems in
    machine_constraints_voltage() when trying to apply the constraints.
    
    A proposed fix was to come up with an error code that could be
    returned by get_voltage_sel() which would cause the regulator
    framework to simply try setting the voltage with the current
    constraints.
    
    In this patch I propose the error code -ENOTRECOVERABLE.  In errno.h
    this error is described as "State not recoverable".  Though the error
    code was originally intended "for robust mutexes", the description of
    the error code seems to apply here because we can't read the state of
    the regulator.  Also note that the only existing user of this error
    code in the regulator framework is tps65090-regulator.c which returns
    this error code from the enable() call (not get_voltage() or
    get_voltage_sel()), so there should be no existing regulators that
    might accidentally get the new behavior.  (Side note is that tps65090
    seems to interpret this error code to mean an error that you can't
    recover from rather than some data that can't be recovered).
    
    [1] https://patchwork.kernel.org/patch/10340897/
    
    Signed-off-by: Douglas Anderson <dianders@chromium.org>
    Signed-off-by: Mark Brown <broonie@kernel.org>

diff --git a/include/linux/regulator/driver.h b/include/linux/regulator/driver.h
index 4fc96cb8e5d7..14e512ad6d4f 100644
--- a/include/linux/regulator/driver.h
+++ b/include/linux/regulator/driver.h
@@ -81,9 +81,12 @@ struct regulator_linear_range {
  * @set_voltage_sel: Set the voltage for the regulator using the specified
  *                   selector.
  * @map_voltage: Convert a voltage into a selector
- * @get_voltage: Return the currently configured voltage for the regulator.
+ * @get_voltage: Return the currently configured voltage for the regulator;
+ *                   return -ENOTRECOVERABLE if regulator can't be read at
+ *                   bootup and hasn't been set yet.
  * @get_voltage_sel: Return the currently configured voltage selector for the
- *                   regulator.
+ *                   regulator; return -ENOTRECOVERABLE if regulator can't
+ *                   be read at bootup and hasn't been set yet.
  * @list_voltage: Return one of the supported voltages, in microvolts; zero
  *	if the selector indicates a voltage that is unusable on this system;
  *	or negative errno.  Selectors range from zero to one less than

commit e45e290a882e2c0dc8ebb7dd21c66a8209d8e3a5
Author: Linus Walleij <linus.walleij@linaro.org>
Date:   Mon Feb 12 14:16:57 2018 +0100

    regulator: core: Support passing an initialized GPIO enable descriptor
    
    We are currently passing a GPIO number from the global GPIO numberspace
    into the regulator core for handling enable GPIOs. This is not good
    since it ties into the global GPIO numberspace and uses gpio_to_desc()
    to overcome this.
    
    Start supporting passing an already initialized GPIO descriptor to the
    core instead: leaf drivers pick their descriptors, associated directly
    with the device node (or from ACPI or from a board descriptor table)
    and use that directly without any roundtrip over the global GPIO
    numberspace.
    
    This looks messy since it adds a bunch of extra code in the core, but
    at the end of the patch series we will delete the handling of the GPIO
    number and only deal with descriptors so things end up neat.
    
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>
    Signed-off-by: Mark Brown <broonie@kernel.org>

diff --git a/include/linux/regulator/driver.h b/include/linux/regulator/driver.h
index 4c00486b7a78..4fc96cb8e5d7 100644
--- a/include/linux/regulator/driver.h
+++ b/include/linux/regulator/driver.h
@@ -19,6 +19,7 @@
 #include <linux/notifier.h>
 #include <linux/regulator/consumer.h>
 
+struct gpio_desc;
 struct regmap;
 struct regulator_dev;
 struct regulator_config;
@@ -387,6 +388,7 @@ struct regulator_desc {
  *                        initialized, meaning that >= 0 is a valid gpio
  *                        identifier and < 0 is a non existent gpio.
  * @ena_gpio: GPIO controlling regulator enable.
+ * @ena_gpiod: GPIO descriptor controlling regulator enable.
  * @ena_gpio_invert: Sense for GPIO enable control.
  * @ena_gpio_flags: Flags to use when calling gpio_request_one()
  */
@@ -399,6 +401,7 @@ struct regulator_config {
 
 	bool ena_gpio_initialized;
 	int ena_gpio;
+	struct gpio_desc *ena_gpiod;
 	unsigned int ena_gpio_invert:1;
 	unsigned int ena_gpio_flags;
 };

commit f7efad10b5c492892b1e5decf5d3ebb29fa5c9af
Author: Chunyan Zhang <zhang.chunyan@linaro.org>
Date:   Fri Jan 26 21:08:47 2018 +0800

    regulator: add PM suspend and resume hooks
    
    In this patch, consumers are allowed to set suspend voltage, and this
    actually just set the "uV" in constraint::regulator_state, when the
    regulator_suspend_late() was called by PM core through callback when
    the system is entering into suspend, the regulator device would act
    suspend activity then.
    
    And it assumes that if any consumer set suspend voltage, the regulator
    device should be enabled in the suspend state.  And if the suspend
    voltage of a regulator device for all consumers was set zero, the
    regulator device would be off in the suspend state.
    
    This patch also provides a new function hook to regulator devices for
    resuming from suspend states.
    
    Signed-off-by: Chunyan Zhang <zhang.chunyan@linaro.org>
    Signed-off-by: Mark Brown <broonie@kernel.org>

diff --git a/include/linux/regulator/driver.h b/include/linux/regulator/driver.h
index 94417b4226bd..4c00486b7a78 100644
--- a/include/linux/regulator/driver.h
+++ b/include/linux/regulator/driver.h
@@ -214,6 +214,8 @@ struct regulator_ops {
 	/* set regulator suspend operating mode (defined in consumer.h) */
 	int (*set_suspend_mode) (struct regulator_dev *, unsigned int mode);
 
+	int (*resume_early)(struct regulator_dev *rdev);
+
 	int (*set_pull_down) (struct regulator_dev *);
 };
 

commit 0603b37e1ea097f597aa405f6a91933dbbd58bec
Merge: 59e4c636df10 f7d37bc3cb20 2f3c578fe2ed 45493684f595 45a86172452a c314341557d3
Author: Mark Brown <broonie@kernel.org>
Date:   Sun Apr 30 22:17:31 2017 +0900

    Merge remote-tracking branches 'regulator/topic/helpers', 'regulator/topic/hi655x', 'regulator/topic/lm363x', 'regulator/topic/ltc3589' and 'regulator/topic/ltc3676' into regulator-next

commit f7d37bc3cb20828ac43b22cbd40222877ee2c46a
Author: Charles Keepax <ckeepax@opensource.wolfsonmicro.com>
Date:   Tue Mar 28 15:14:41 2017 +0100

    regulator: helpers: Add regmap set_pull_down helper
    
    Add a helper function regulator_set_pull_down_regmap to allow regmap
    based regulators to easily enable pull down.
    
    Signed-off-by: Charles Keepax <ckeepax@opensource.wolfsonmicro.com>
    Signed-off-by: Mark Brown <broonie@kernel.org>

diff --git a/include/linux/regulator/driver.h b/include/linux/regulator/driver.h
index 1054c033e783..8a9078dd2a5f 100644
--- a/include/linux/regulator/driver.h
+++ b/include/linux/regulator/driver.h
@@ -296,6 +296,10 @@ enum regulator_type {
  * @soft_start_mask: Mask for control when using regmap set_soft_start
  * @soft_start_val_on: Enabling value for control when using regmap
  *                     set_soft_start
+ * @pull_down_reg: Register for control when using regmap set_pull_down
+ * @pull_down_mask: Mask for control when using regmap set_pull_down
+ * @pull_down_val_on: Enabling value for control when using regmap
+ *                     set_pull_down
  *
  * @enable_time: Time taken for initial enable of regulator (in uS).
  * @off_on_delay: guard time (in uS), before re-enabling a regulator
@@ -352,6 +356,9 @@ struct regulator_desc {
 	unsigned int soft_start_reg;
 	unsigned int soft_start_mask;
 	unsigned int soft_start_val_on;
+	unsigned int pull_down_reg;
+	unsigned int pull_down_mask;
+	unsigned int pull_down_val_on;
 
 	unsigned int enable_time;
 
@@ -484,6 +491,7 @@ int regulator_set_voltage_time_sel(struct regulator_dev *rdev,
 int regulator_set_bypass_regmap(struct regulator_dev *rdev, bool enable);
 int regulator_get_bypass_regmap(struct regulator_dev *rdev, bool *enable);
 int regulator_set_soft_start_regmap(struct regulator_dev *rdev);
+int regulator_set_pull_down_regmap(struct regulator_dev *rdev);
 
 int regulator_set_active_discharge_regmap(struct regulator_dev *rdev,
 					  bool enable);

commit a7a453f56a1a116027f84ac53b365eb045a0e279
Author: Charles Keepax <ckeepax@opensource.wolfsonmicro.com>
Date:   Tue Mar 28 15:14:40 2017 +0100

    regulator: helpers: Add regmap set_soft_start helper
    
    Add a helper function regulator_set_soft_start_regmap to allow regmap
    based regulators to easily enable soft start.
    
    Signed-off-by: Charles Keepax <ckeepax@opensource.wolfsonmicro.com>
    Signed-off-by: Mark Brown <broonie@kernel.org>

diff --git a/include/linux/regulator/driver.h b/include/linux/regulator/driver.h
index dac8e7b16bc6..1054c033e783 100644
--- a/include/linux/regulator/driver.h
+++ b/include/linux/regulator/driver.h
@@ -292,6 +292,10 @@ enum regulator_type {
  *			   set_active_discharge
  * @active_discharge_reg: Register for control when using regmap
  *			  set_active_discharge
+ * @soft_start_reg: Register for control when using regmap set_soft_start
+ * @soft_start_mask: Mask for control when using regmap set_soft_start
+ * @soft_start_val_on: Enabling value for control when using regmap
+ *                     set_soft_start
  *
  * @enable_time: Time taken for initial enable of regulator (in uS).
  * @off_on_delay: guard time (in uS), before re-enabling a regulator
@@ -345,6 +349,9 @@ struct regulator_desc {
 	unsigned int active_discharge_off;
 	unsigned int active_discharge_mask;
 	unsigned int active_discharge_reg;
+	unsigned int soft_start_reg;
+	unsigned int soft_start_mask;
+	unsigned int soft_start_val_on;
 
 	unsigned int enable_time;
 
@@ -476,6 +483,7 @@ int regulator_set_voltage_time_sel(struct regulator_dev *rdev,
 				   unsigned int new_selector);
 int regulator_set_bypass_regmap(struct regulator_dev *rdev, bool enable);
 int regulator_get_bypass_regmap(struct regulator_dev *rdev, bool *enable);
+int regulator_set_soft_start_regmap(struct regulator_dev *rdev);
 
 int regulator_set_active_discharge_regmap(struct regulator_dev *rdev,
 					  bool enable);

commit fd086045559d90cd7854818b4c60a7119eda6231
Author: Matthias Kaehlcke <mka@chromium.org>
Date:   Mon Mar 27 16:54:12 2017 -0700

    regulator: core: Limit propagation of parent voltage count and list
    
    Commit 26988efe11b1 ("regulator: core: Allow to get voltage count and
    list from parent") introduces the propagation of the parent voltage
    count and list for regulators that don't provide this information
    themselves. The goal is to support simple switch regulators, however as
    a side effect normal continuous regulators can leak details of their
    supplies and provide consumers with inconsistent information.
    
    Limit the propagation of the voltage count and list to switch
    regulators.
    
    Fixes: 26988efe11b1 ("regulator: core: Allow to get voltage count and
      list from parent")
    Signed-off-by: Matthias Kaehlcke <mka@chromium.org>
    Reviewed-by: Javier Martinez Canillas <javier@osg.samsung.com>
    Tested-by: Javier Martinez Canillas <javier@osg.samsung.com>
    Signed-off-by: Mark Brown <broonie@kernel.org>

diff --git a/include/linux/regulator/driver.h b/include/linux/regulator/driver.h
index dac8e7b16bc6..4cb1c9be6073 100644
--- a/include/linux/regulator/driver.h
+++ b/include/linux/regulator/driver.h
@@ -429,6 +429,8 @@ struct regulator_dev {
 	struct regulator_enable_gpio *ena_pin;
 	unsigned int ena_gpio_state:1;
 
+	unsigned int is_switch:1;
+
 	/* time when this regulator was disabled last time */
 	unsigned long last_off_jiffy;
 };

commit 1b5b42216469b05ef4b5916cb40b127dfab1da88
Author: Axel Haslam <ahaslam@baylibre.com>
Date:   Thu Nov 3 12:11:42 2016 +0100

    regulator: core: Add new API to poll for error conditions
    
    Regulator consumers can receive event notifications when
    errors are reported to the driver, but currently, there is
    no way for a regulator consumer to know when the error is over.
    
    To allow a regulator consumer to poll for error conditions
    add a new API: regulator_get_error_flags.
    
    Signed-off-by: Axel Haslam <ahaslam@baylibre.com>
    Signed-off-by: Mark Brown <broonie@kernel.org>

diff --git a/include/linux/regulator/driver.h b/include/linux/regulator/driver.h
index 37b532410528..dac8e7b16bc6 100644
--- a/include/linux/regulator/driver.h
+++ b/include/linux/regulator/driver.h
@@ -100,6 +100,7 @@ struct regulator_linear_range {
  *
  * @set_mode: Set the configured operating mode for the regulator.
  * @get_mode: Get the configured operating mode for the regulator.
+ * @get_error_flags: Get the current error(s) for the regulator.
  * @get_status: Return actual (not as-configured) status of regulator, as a
  *	REGULATOR_STATUS value (or negative errno)
  * @get_optimum_mode: Get the most efficient operating mode for the regulator
@@ -169,6 +170,9 @@ struct regulator_ops {
 	int (*set_mode) (struct regulator_dev *, unsigned int mode);
 	unsigned int (*get_mode) (struct regulator_dev *);
 
+	/* retrieve current error flags on the regulator */
+	int (*get_error_flags)(struct regulator_dev *, unsigned int *flags);
+
 	/* Time taken to enable or set voltage on the regulator */
 	int (*enable_time) (struct regulator_dev *);
 	int (*set_ramp_delay) (struct regulator_dev *, int ramp_delay);

commit 73e705bf81ceb84b39ef9cf6ffb8d12ca0c58a23
Author: Matthias Kaehlcke <mka@chromium.org>
Date:   Wed Sep 14 09:52:08 2016 -0700

    regulator: core: Add set_voltage_time op
    
    The new op is analogous to set_voltage_time_sel. It can be used by
    regulators which don't have a table of discrete voltages. The function
    returns the time for the regulator output voltage to stabilize after
    being set to a new value, in microseconds. If the op is not set a
    default implementation is used to calculate the delay.
    
    This change also removes the ramp_delay calculation in the PWM
    regulator, since the driver now uses the core code for the calculation
    of the delay.
    
    Signed-off-by: Matthias Kaehlcke <mka@chromium.org>
    Signed-off-by: Mark Brown <broonie@kernel.org>

diff --git a/include/linux/regulator/driver.h b/include/linux/regulator/driver.h
index fcfa40a6692c..37b532410528 100644
--- a/include/linux/regulator/driver.h
+++ b/include/linux/regulator/driver.h
@@ -113,10 +113,14 @@ struct regulator_linear_range {
  *               stabilise after being enabled, in microseconds.
  * @set_ramp_delay: Set the ramp delay for the regulator. The driver should
  *		select ramp delay equal to or less than(closest) ramp_delay.
+ * @set_voltage_time: Time taken for the regulator voltage output voltage
+ *               to stabilise after being set to a new value, in microseconds.
+ *               The function receives the from and to voltage as input, it
+ *               should return the worst case.
  * @set_voltage_time_sel: Time taken for the regulator voltage output voltage
  *               to stabilise after being set to a new value, in microseconds.
- *               The function provides the from and to voltage selector, the
- *               function should return the worst case.
+ *               The function receives the from and to voltage selector as
+ *               input, it should return the worst case.
  * @set_soft_start: Enable soft start for the regulator.
  *
  * @set_suspend_voltage: Set the voltage for the regulator when the system
@@ -168,6 +172,8 @@ struct regulator_ops {
 	/* Time taken to enable or set voltage on the regulator */
 	int (*enable_time) (struct regulator_dev *);
 	int (*set_ramp_delay) (struct regulator_dev *, int ramp_delay);
+	int (*set_voltage_time) (struct regulator_dev *, int old_uV,
+				 int new_uV);
 	int (*set_voltage_time_sel) (struct regulator_dev *,
 				     unsigned int old_selector,
 				     unsigned int new_selector);

commit 78d5501cf41d25a2a78dd571d91fee3e1e271d3f
Merge: 8595bb27cebe 6a0028b3dd67 8a34e979f684 2d80a91b2f2a abf2f825d115
Author: Mark Brown <broonie@kernel.org>
Date:   Fri May 13 14:23:27 2016 +0100

    Merge remote-tracking branches 'regulator/topic/can-change', 'regulator/topic/constrain', 'regulator/topic/debugfs' and 'regulator/topic/doc' into regulator-next

commit de4a54c4dfaed0604565c1b27488dce56997acc0
Author: Mark Brown <broonie@kernel.org>
Date:   Thu Jan 21 20:19:41 2016 +0000

    regulator: core: Use a bitfield for continuous_voltage_range
    
    Using a bitfield enables the compiler to lay out the structure more
    efficiently when we have other boolean flags since multiple values can
    be included in a single byte.
    
    Signed-off-by: Mark Brown <broonie@kernel.org>

diff --git a/include/linux/regulator/driver.h b/include/linux/regulator/driver.h
index cd271e89a7e6..9ac3f9879576 100644
--- a/include/linux/regulator/driver.h
+++ b/include/linux/regulator/driver.h
@@ -292,7 +292,7 @@ struct regulator_desc {
 			    const struct regulator_desc *,
 			    struct regulator_config *);
 	int id;
-	bool continuous_voltage_range;
+	unsigned int continuous_voltage_range:1;
 	unsigned n_voltages;
 	const struct regulator_ops *ops;
 	int irq;

commit abf2f825d115397944cab91a20c937331d77e37c
Author: Luis de Bethencourt <luisbg@osg.samsung.com>
Date:   Wed Mar 23 11:35:39 2016 +0000

    regulator: add missing description for set_over_current_protection
    
    Over current protection is missing descriptions for documentation.
    
    Signed-off-by: Luis de Bethencourt <luisbg@osg.samsung.com>
    Signed-off-by: Mark Brown <broonie@kernel.org>

diff --git a/include/linux/regulator/driver.h b/include/linux/regulator/driver.h
index 01d26244a610..1392022fe509 100644
--- a/include/linux/regulator/driver.h
+++ b/include/linux/regulator/driver.h
@@ -93,6 +93,9 @@ struct regulator_linear_range {
  * @get_current_limit: Get the configured limit for a current-limited regulator.
  * @set_input_current_limit: Configure an input limit.
  *
+ * @set_over_current_protection: Support capability of automatically shutting
+ *                               down when detecting an over current event.
+ *
  * @set_active_discharge: Set active discharge enable/disable of regulators.
  *
  * @set_mode: Set the configured operating mode for the regulator.

commit d13d3a573be5535123beacd926be38e571097bc5
Author: Luis de Bethencourt <luisbg@osg.samsung.com>
Date:   Wed Mar 23 11:24:47 2016 +0000

    regulator: add missing descriptions in regulator_desc
    
    Members csel_reg and csel_mask of the regulator_desc struct are missing
    descriptions for documentation. Adding them.
    
    Signed-off-by: Luis de Bethencourt <luisbg@osg.samsung.com>
    Signed-off-by: Mark Brown <broonie@kernel.org>

diff --git a/include/linux/regulator/driver.h b/include/linux/regulator/driver.h
index cd271e89a7e6..01d26244a610 100644
--- a/include/linux/regulator/driver.h
+++ b/include/linux/regulator/driver.h
@@ -255,6 +255,8 @@ enum regulator_type {
  *
  * @vsel_reg: Register for selector when using regulator_regmap_X_voltage_
  * @vsel_mask: Mask for register bitfield used for selector
+ * @csel_reg: Register for TPS65218 LS3 current regulator
+ * @csel_mask: Mask for TPS65218 LS3 current regulator
  * @apply_reg: Register for initiate voltage change on the output when
  *                using regulator_set_voltage_sel_regmap
  * @apply_bit: Register bitfield used for initiate voltage change on the

commit 354794dacc213da7596cefea4dbcd8c094368807
Author: Laxman Dewangan <ldewangan@nvidia.com>
Date:   Wed Mar 2 16:24:47 2016 +0530

    regulator: helper: Add helper to configure active-discharge using regmap
    
    Add helper function to set the state of active-discharge of
    regulator using regmap. The HW regulator driver can directly
    use this by providing the necessary information in the regulator
    descriptor.
    
    Signed-off-by: Laxman Dewangan <ldewangan@nvidia.com>
    Signed-off-by: Mark Brown <broonie@kernel.org>

diff --git a/include/linux/regulator/driver.h b/include/linux/regulator/driver.h
index 59dbaf78a25c..cd271e89a7e6 100644
--- a/include/linux/regulator/driver.h
+++ b/include/linux/regulator/driver.h
@@ -269,6 +269,14 @@ enum regulator_type {
  * @bypass_mask: Mask for control when using regmap set_bypass
  * @bypass_val_on: Enabling value for control when using regmap set_bypass
  * @bypass_val_off: Disabling value for control when using regmap set_bypass
+ * @active_discharge_off: Enabling value for control when using regmap
+ *			  set_active_discharge
+ * @active_discharge_on: Disabling value for control when using regmap
+ *			 set_active_discharge
+ * @active_discharge_mask: Mask for control when using regmap
+ *			   set_active_discharge
+ * @active_discharge_reg: Register for control when using regmap
+ *			  set_active_discharge
  *
  * @enable_time: Time taken for initial enable of regulator (in uS).
  * @off_on_delay: guard time (in uS), before re-enabling a regulator
@@ -318,6 +326,10 @@ struct regulator_desc {
 	unsigned int bypass_mask;
 	unsigned int bypass_val_on;
 	unsigned int bypass_val_off;
+	unsigned int active_discharge_on;
+	unsigned int active_discharge_off;
+	unsigned int active_discharge_mask;
+	unsigned int active_discharge_reg;
 
 	unsigned int enable_time;
 
@@ -450,6 +462,8 @@ int regulator_set_voltage_time_sel(struct regulator_dev *rdev,
 int regulator_set_bypass_regmap(struct regulator_dev *rdev, bool enable);
 int regulator_get_bypass_regmap(struct regulator_dev *rdev, bool *enable);
 
+int regulator_set_active_discharge_regmap(struct regulator_dev *rdev,
+					  bool enable);
 void *regulator_get_init_drvdata(struct regulator_init_data *reg_init_data);
 
 #endif

commit 670666b9e0aff40c65d8061a2f53e79eee238685
Author: Laxman Dewangan <ldewangan@nvidia.com>
Date:   Wed Mar 2 16:24:46 2016 +0530

    regulator: core: Add support for active-discharge configuration
    
    Add support to enable/disable active discharge of regulator via
    machine constraints. This configuration is done when setting
    machine constraint during regulator register and if regulator
    driver implemented the callback ops.
    
    Signed-off-by: Laxman Dewangan <ldewangan@nvidia.com>
    Signed-off-by: Mark Brown <broonie@kernel.org>

diff --git a/include/linux/regulator/driver.h b/include/linux/regulator/driver.h
index 16ac9e108806..59dbaf78a25c 100644
--- a/include/linux/regulator/driver.h
+++ b/include/linux/regulator/driver.h
@@ -93,6 +93,8 @@ struct regulator_linear_range {
  * @get_current_limit: Get the configured limit for a current-limited regulator.
  * @set_input_current_limit: Configure an input limit.
  *
+ * @set_active_discharge: Set active discharge enable/disable of regulators.
+ *
  * @set_mode: Set the configured operating mode for the regulator.
  * @get_mode: Get the configured operating mode for the regulator.
  * @get_status: Return actual (not as-configured) status of regulator, as a
@@ -149,6 +151,7 @@ struct regulator_ops {
 
 	int (*set_input_current_limit) (struct regulator_dev *, int lim_uA);
 	int (*set_over_current_protection) (struct regulator_dev *);
+	int (*set_active_discharge) (struct regulator_dev *, bool enable);
 
 	/* enable/disable regulator */
 	int (*enable) (struct regulator_dev *);

commit c0ea88b890d67cff2667188f14189d8346e89a0f
Author: Nikita Kiryanov <nikita@compulab.co.il>
Date:   Wed Nov 25 13:59:04 2015 +0200

    regulator: tps65218: add support for LS3 current regulator
    
    Add support for TPS65218 LS3 current regulator, which is capable of 4
    current input limit modes: 100, 200, 500, and 1000 uA.
    
    Signed-off-by: Nikita Kiryanov <nikita@compulab.co.il>
    Signed-off-by: Mark Brown <broonie@kernel.org>

diff --git a/include/linux/regulator/driver.h b/include/linux/regulator/driver.h
index 9c2903e58adb..16ac9e108806 100644
--- a/include/linux/regulator/driver.h
+++ b/include/linux/regulator/driver.h
@@ -302,6 +302,8 @@ struct regulator_desc {
 
 	unsigned int vsel_reg;
 	unsigned int vsel_mask;
+	unsigned int csel_reg;
+	unsigned int csel_mask;
 	unsigned int apply_reg;
 	unsigned int apply_bit;
 	unsigned int enable_reg;

commit 5abe4f223ed6b820443d3657bd48600692f61c12
Author: Sascha Hauer <s.hauer@pengutronix.de>
Date:   Tue Oct 13 12:45:26 2015 +0200

    regulator: introduce min_dropout_uV
    
    Many voltage Regulators need a input voltage that is higher than the
    output voltage. Allow to specify a minimum dropout voltage which will
    be used later to find the best input voltage for regulators.
    
    [Changed uv to uV for consistency and legibility -- broonie]
    
    Signed-off-by: Sascha Hauer <s.hauer@pengutronix.de>
    Signed-off-by: Mark Brown <broonie@kernel.org>

diff --git a/include/linux/regulator/driver.h b/include/linux/regulator/driver.h
index 45932228cbf5..9c2903e58adb 100644
--- a/include/linux/regulator/driver.h
+++ b/include/linux/regulator/driver.h
@@ -245,6 +245,7 @@ enum regulator_type {
  * @linear_min_sel: Minimal selector for starting linear mapping
  * @fixed_uV: Fixed voltage of rails.
  * @ramp_delay: Time to settle down after voltage change (unit: uV/us)
+ * @min_dropout_uV: The minimum dropout voltage this regulator can handle
  * @linear_ranges: A constant table of possible voltage ranges.
  * @n_linear_ranges: Number of entries in the @linear_ranges table.
  * @volt_table: Voltage mapping table (if table based mapping)
@@ -292,6 +293,7 @@ struct regulator_desc {
 	unsigned int linear_min_sel;
 	int fixed_uV;
 	unsigned int ramp_delay;
+	int min_dropout_uV;
 
 	const struct regulator_linear_range *linear_ranges;
 	int n_linear_ranges;

commit 3a003baeec246f604ed1d2e0087560d7f15edcc6
Author: Stephen Boyd <sboyd@codeaurora.org>
Date:   Fri Jul 17 14:41:54 2015 -0700

    regulator: Add over current protection (OCP) support
    
    Some regulators can automatically shut down when they detect an
    over current event. Add an op (set_over_current_protection) and a
    DT property + constraint to support this capability.
    
    Signed-off-by: Stephen Boyd <sboyd@codeaurora.org>
    Signed-off-by: Mark Brown <broonie@kernel.org>

diff --git a/include/linux/regulator/driver.h b/include/linux/regulator/driver.h
index 4db9fbe4889d..45932228cbf5 100644
--- a/include/linux/regulator/driver.h
+++ b/include/linux/regulator/driver.h
@@ -148,6 +148,7 @@ struct regulator_ops {
 	int (*get_current_limit) (struct regulator_dev *);
 
 	int (*set_input_current_limit) (struct regulator_dev *, int lim_uA);
+	int (*set_over_current_protection) (struct regulator_dev *);
 
 	/* enable/disable regulator */
 	int (*enable) (struct regulator_dev *);

commit 733ada000f2c9618ccbac7b9ba146113f0a6675b
Merge: 0460a368ea4c 130daa3f3570 ab101e35448b 419d06a1cf58 c751ad0dd640
Author: Mark Brown <broonie@kernel.org>
Date:   Mon Jun 22 11:19:56 2015 +0100

    Merge remote-tracking branches 'regulator/topic/of', 'regulator/topic/pwm', 'regulator/topic/qcom' and 'regulator/topic/soft-start' into regulator-next

commit c751ad0dd640f4ce9269acd7a54de5ba8092e99e
Author: Stephen Boyd <sboyd@codeaurora.org>
Date:   Fri Jun 12 15:48:06 2015 -0700

    regulator: Add docbook for soft start
    
    The docbook for these members is missing. Add them.
    
    Warning(include/linux/regulator/machine.h:147): No description
    found for parameter 'soft_start'
    Warning(include/linux/regulator/driver.h:197): No description
    found for parameter 'set_soft_start'
    
    Reported-by: kbuild test robot <fengguang.wu@intel.com>
    Signed-off-by: Stephen Boyd <sboyd@codeaurora.org>
    Signed-off-by: Mark Brown <broonie@kernel.org>

diff --git a/include/linux/regulator/driver.h b/include/linux/regulator/driver.h
index e0635d0894aa..9398d31f9531 100644
--- a/include/linux/regulator/driver.h
+++ b/include/linux/regulator/driver.h
@@ -111,6 +111,7 @@ struct regulator_linear_range {
  *               to stabilise after being set to a new value, in microseconds.
  *               The function provides the from and to voltage selector, the
  *               function should return the worst case.
+ * @set_soft_start: Enable soft start for the regulator.
  *
  * @set_suspend_voltage: Set the voltage for the regulator when the system
  *                       is suspended.

commit 36e4f839de59b6216a16cdf5c1d3263f4dbd9421
Author: Stephen Boyd <sboyd@codeaurora.org>
Date:   Thu Jun 11 17:37:06 2015 -0700

    regulator: Add input current limit support
    
    Some regulators can limit their input current (typically annotated
    as ilim). Add an op (set_input_current_limit) and a DT property +
    constraint to support this.
    
    Signed-off-by: Stephen Boyd <sboyd@codeaurora.org>
    Signed-off-by: Mark Brown <broonie@kernel.org>

diff --git a/include/linux/regulator/driver.h b/include/linux/regulator/driver.h
index e0635d0894aa..125264f8be93 100644
--- a/include/linux/regulator/driver.h
+++ b/include/linux/regulator/driver.h
@@ -91,6 +91,7 @@ struct regulator_linear_range {
  * @set_current_limit: Configure a limit for a current-limited regulator.
  *                     The driver should select the current closest to max_uA.
  * @get_current_limit: Get the configured limit for a current-limited regulator.
+ * @set_input_current_limit: Configure an input limit.
  *
  * @set_mode: Set the configured operating mode for the regulator.
  * @get_mode: Get the configured operating mode for the regulator.
@@ -145,6 +146,8 @@ struct regulator_ops {
 				 int min_uA, int max_uA);
 	int (*get_current_limit) (struct regulator_dev *);
 
+	int (*set_input_current_limit) (struct regulator_dev *, int lim_uA);
+
 	/* enable/disable regulator */
 	int (*enable) (struct regulator_dev *);
 	int (*disable) (struct regulator_dev *);

commit 57f66b78860968fc7eddc9ce25f8e57f7e5000bd
Author: Stephen Boyd <sboyd@codeaurora.org>
Date:   Thu Jun 11 17:37:05 2015 -0700

    regulator: Add soft start support
    
    Some regulators support a "soft start" feature where the voltage
    ramps up slowly when the regulator is enabled. Add an op
    (set_soft_start) and a DT property + constraint to support this.
    
    Signed-off-by: Stephen Boyd <sboyd@codeaurora.org>
    Signed-off-by: Mark Brown <broonie@kernel.org>

diff --git a/include/linux/regulator/driver.h b/include/linux/regulator/driver.h
index 76144a337ff7..e0635d0894aa 100644
--- a/include/linux/regulator/driver.h
+++ b/include/linux/regulator/driver.h
@@ -161,6 +161,8 @@ struct regulator_ops {
 				     unsigned int old_selector,
 				     unsigned int new_selector);
 
+	int (*set_soft_start) (struct regulator_dev *);
+
 	/* report regulator status ... most other accessors report
 	 * control inputs, this reports results of combining inputs
 	 * from Linux (and other sources) with the actual load.

commit 23c779b9f9161d6568d3b2fca06e70ad182c480c
Author: Stephen Boyd <sboyd@codeaurora.org>
Date:   Thu Jun 11 17:37:04 2015 -0700

    regulator: Add pull down support
    
    Some regulators need to be configured to pull down a resistor
    when the regulator is disabled. Add an op (set_pull_down) and a
    DT property + constraint to support this.
    
    Signed-off-by: Stephen Boyd <sboyd@codeaurora.org>
    Signed-off-by: Mark Brown <broonie@kernel.org>

diff --git a/include/linux/regulator/driver.h b/include/linux/regulator/driver.h
index fffa688ac3a7..76144a337ff7 100644
--- a/include/linux/regulator/driver.h
+++ b/include/linux/regulator/driver.h
@@ -121,6 +121,9 @@ struct regulator_linear_range {
  * @set_suspend_mode: Set the operating mode for the regulator when the
  *                    system is suspended.
  *
+ * @set_pull_down: Configure the regulator to pull down when the regulator
+ *		   is disabled.
+ *
  * This struct describes regulator operations which can be implemented by
  * regulator chip drivers.
  */
@@ -187,6 +190,8 @@ struct regulator_ops {
 
 	/* set regulator suspend operating mode (defined in consumer.h) */
 	int (*set_suspend_mode) (struct regulator_dev *, unsigned int mode);
+
+	int (*set_pull_down) (struct regulator_dev *);
 };
 
 /*

commit 3984c9da458dbdc352a82909a51c42cf2860a4a5
Merge: e5073849f9d7 af78114ec757 2b85c28a5a7c eb2d90c05828 c0cf5a59fb69
Author: Mark Brown <broonie@kernel.org>
Date:   Fri Apr 10 19:16:02 2015 +0100

    Merge remote-tracking branches 'regulator/topic/dbx500', 'regulator/topic/load-op', 'regulator/topic/max77693' and 'regulator/topic/max8660' into regulator-next

commit 5fc31b43d59a983c47c37b7a6d327f83395609ed
Merge: f22e6e847115 498e530e50ff
Author: Mark Brown <broonie@kernel.org>
Date:   Fri Apr 10 19:15:59 2015 +0100

    Merge remote-tracking branch 'regulator/topic/core' into regulator-next

commit 6261b06de565baafa590e58a531a1a5522cea0b6
Author: Bjorn Andersson <bjorn.andersson@sonymobile.com>
Date:   Tue Mar 24 18:56:05 2015 -0700

    regulator: Defer lookup of supply to regulator_get
    
    Instead of resolving regulator supplies during registration move this to
    the time of a consumer retrieving a handle. The benefit is that it's
    possible for one driver to register regulators with internal
    dependencies out of order.
    
    Signed-off-by: Bjorn Andersson <bjorn.andersson@sonymobile.com>
    Signed-off-by: Mark Brown <broonie@kernel.org>

diff --git a/include/linux/regulator/driver.h b/include/linux/regulator/driver.h
index d4ad5b5a02bb..6d9fcd0c33d6 100644
--- a/include/linux/regulator/driver.h
+++ b/include/linux/regulator/driver.h
@@ -367,6 +367,7 @@ struct regulator_dev {
 	struct device dev;
 	struct regulation_constraints *constraints;
 	struct regulator *supply;	/* for tree */
+	const char *supply_name;
 	struct regmap *regmap;
 
 	struct delayed_work disable_work;

commit cf39284d41f67964cf42b21bb386c012cf5b7f65
Author: Axel Lin <axel.lin@ingics.com>
Date:   Wed Mar 18 08:57:41 2015 +0800

    regulator: Fix documentation for regmap in the config
    
    dev_get_regulator() does not exist, fix the typo.
    
    Signed-off-by: Axel Lin <axel.lin@ingics.com>
    Signed-off-by: Mark Brown <broonie@kernel.org>

diff --git a/include/linux/regulator/driver.h b/include/linux/regulator/driver.h
index d4ad5b5a02bb..045f709cb89b 100644
--- a/include/linux/regulator/driver.h
+++ b/include/linux/regulator/driver.h
@@ -316,7 +316,7 @@ struct regulator_desc {
  * @driver_data: private regulator data
  * @of_node: OpenFirmware node to parse for device tree bindings (may be
  *           NULL).
- * @regmap: regmap to use for core regmap helpers if dev_get_regulator() is
+ * @regmap: regmap to use for core regmap helpers if dev_get_regmap() is
  *          insufficient.
  * @ena_gpio_initialized: GPIO controlling regulator enable was properly
  *                        initialized, meaning that >= 0 is a valid gpio

commit 8f4490e09694efaf7fe60ac6a1135530aa8c05ad
Author: Bjorn Andersson <bjorn.andersson@sonymobile.com>
Date:   Wed Feb 11 19:39:12 2015 -0800

    regulator: core: Introduce set_load op
    
    Expose the requested load directly to the regulator implementation for
    hardware that does not support the normal enum based set_mode().
    
    Signed-off-by: Bjorn Andersson <bjorn.andersson@sonymobile.com>
    Signed-off-by: Mark Brown <broonie@kernel.org>

diff --git a/include/linux/regulator/driver.h b/include/linux/regulator/driver.h
index d4ad5b5a02bb..8a0165f22f0a 100644
--- a/include/linux/regulator/driver.h
+++ b/include/linux/regulator/driver.h
@@ -98,6 +98,7 @@ struct regulator_linear_range {
  *	REGULATOR_STATUS value (or negative errno)
  * @get_optimum_mode: Get the most efficient operating mode for the regulator
  *                    when running with the specified parameters.
+ * @set_load: Set the load for the regulator.
  *
  * @set_bypass: Set the regulator in bypass mode.
  * @get_bypass: Get the regulator bypass mode state.
@@ -167,6 +168,8 @@ struct regulator_ops {
 	/* get most efficient regulator operating mode for load */
 	unsigned int (*get_optimum_mode) (struct regulator_dev *, int input_uV,
 					  int output_uV, int load_uA);
+	/* set the load on the regulator */
+	int (*set_load)(struct regulator_dev *, int load_uA);
 
 	/* control and report on bypass mode */
 	int (*set_bypass)(struct regulator_dev *dev, bool enable);

commit bfa21a0dfe6915dc85953b5d40ea9dae5fdf205f
Author: Krzysztof Kozlowski <k.kozlowski@samsung.com>
Date:   Mon Jan 5 12:48:42 2015 +0100

    regulator: Allow parsing custom properties when using simplified DT parsing
    
    When drivers use simplified DT parsing method (they provide
    'regulator_desc.of_match') they still may want to parse custom
    properties for some of the regulators. For example some of the
    regulators support GPIO enable control.
    
    Add a driver-supplied callback for such case. This way the regulator
    core parses common bindings offloading a lot of code from drivers and
    still custom properties may be used.
    
    The callback, called for each parsed regulator, may modify the
    'regulator_config' initially passed to regulator_register().
    
    Signed-off-by: Krzysztof Kozlowski <k.kozlowski@samsung.com>
    Signed-off-by: Mark Brown <broonie@kernel.org>

diff --git a/include/linux/regulator/driver.h b/include/linux/regulator/driver.h
index 5f1e9ca47417..d4ad5b5a02bb 100644
--- a/include/linux/regulator/driver.h
+++ b/include/linux/regulator/driver.h
@@ -21,6 +21,7 @@
 
 struct regmap;
 struct regulator_dev;
+struct regulator_config;
 struct regulator_init_data;
 struct regulator_enable_gpio;
 
@@ -205,6 +206,15 @@ enum regulator_type {
  * @supply_name: Identifying the regulator supply
  * @of_match: Name used to identify regulator in DT.
  * @regulators_node: Name of node containing regulator definitions in DT.
+ * @of_parse_cb: Optional callback called only if of_match is present.
+ *               Will be called for each regulator parsed from DT, during
+ *               init_data parsing.
+ *               The regulator_config passed as argument to the callback will
+ *               be a copy of config passed to regulator_register, valid only
+ *               for this particular call. Callback may freely change the
+ *               config but it cannot store it for later usage.
+ *               Callback should return 0 on success or negative ERRNO
+ *               indicating failure.
  * @id: Numerical identifier for the regulator.
  * @ops: Regulator operations table.
  * @irq: Interrupt number for the regulator.
@@ -251,6 +261,9 @@ struct regulator_desc {
 	const char *supply_name;
 	const char *of_match;
 	const char *regulators_node;
+	int (*of_parse_cb)(struct device_node *,
+			    const struct regulator_desc *,
+			    struct regulator_config *);
 	int id;
 	bool continuous_voltage_range;
 	unsigned n_voltages;

commit 92d07a8ff6e2e7844d1bce4e35c98c6a773d6f17
Merge: af012d6278d8 0480395264fa 2515b24c04ea ff633bea4775 0ce5b30763fb 251ce318df3c
Author: Mark Brown <broonie@kernel.org>
Date:   Fri Dec 5 11:14:37 2014 +0000

    Merge remote-tracking branches 'regulator/topic/max77686', 'regulator/topic/max77693', 'regulator/topic/max77802', 'regulator/topic/power-off' and 'regulator/topic/rk808' into regulator-next

commit 87e1e0f29f703e91c54e81f05d831432ec659dde
Author: Javier Martinez Canillas <javier.martinez@collabora.co.uk>
Date:   Mon Nov 10 14:43:52 2014 +0100

    regulator: Add mode mapping function to struct regulator_desc
    
    The "regulator-initial-mode" and "regulator-mode" DT properties allows
    to configure the regulator operating modes at startup or when a system
    enters into a susend state.
    
    But these properties use as valid values the operating modes supported
    by each device while the core deals with the standard operating modes.
    So a mapping function is needed to translate from the hardware specific
    modes to the standard ones.
    
    This mapping is a non-varying configuration for each regulator, so add
    a function pointer to struct regulator_desc that will allow drivers to
    define their callback to do the modes translation.
    
    Signed-off-by: Javier Martinez Canillas <javier.martinez@collabora.co.uk>
    Signed-off-by: Mark Brown <broonie@kernel.org>

diff --git a/include/linux/regulator/driver.h b/include/linux/regulator/driver.h
index fc0ee0ce8325..73dd073afef5 100644
--- a/include/linux/regulator/driver.h
+++ b/include/linux/regulator/driver.h
@@ -243,6 +243,8 @@ enum regulator_type {
  *
  * @enable_time: Time taken for initial enable of regulator (in uS).
  * @off_on_delay: guard time (in uS), before re-enabling a regulator
+ *
+ * @of_map_mode: Maps a hardware mode defined in a DeviceTree to a standard mode
  */
 struct regulator_desc {
 	const char *name;
@@ -285,6 +287,8 @@ struct regulator_desc {
 	unsigned int enable_time;
 
 	unsigned int off_on_delay;
+
+	unsigned int (*of_map_mode)(unsigned int mode);
 };
 
 /**

commit 76f439df50aba1838e06dd01e5f20dada7473f57
Author: Markus Pargmann <mpa@pengutronix.de>
Date:   Wed Oct 8 15:47:05 2014 +0200

    regulator: Add ena_gpio_initialized to regulator_config
    
    Most drivers do not set the ena_gpio field of struct regulator_config
    before passing it to the regulator core. This is fine as long as the
    gpio identifier that is passed is a positive integer. But the gpio
    identifier 0 is also valid. So we are not able to decide wether we got a
    real gpio identifier or not based on a 0 in ena_gpio.
    
    To be able to decide if it is a valid gpio that got passed, this patch
    adds a ena_gpio_initialized field that should be set if was initialized
    with a correct value, either a gpio >= 0 or a negative error number. The
    core then checks if ena_gpio or ena_gpio_initialized before handling it
    as a gpio. This way we maintain backwards compatibility and fix the
    behaviour for gpio number 0.
    
    Signed-off-by: Markus Pargmann <mpa@pengutronix.de>
    Signed-off-by: Mark Brown <broonie@kernel.org>

diff --git a/include/linux/regulator/driver.h b/include/linux/regulator/driver.h
index fc0ee0ce8325..28da08e4671f 100644
--- a/include/linux/regulator/driver.h
+++ b/include/linux/regulator/driver.h
@@ -301,6 +301,9 @@ struct regulator_desc {
  *           NULL).
  * @regmap: regmap to use for core regmap helpers if dev_get_regulator() is
  *          insufficient.
+ * @ena_gpio_initialized: GPIO controlling regulator enable was properly
+ *                        initialized, meaning that >= 0 is a valid gpio
+ *                        identifier and < 0 is a non existent gpio.
  * @ena_gpio: GPIO controlling regulator enable.
  * @ena_gpio_invert: Sense for GPIO enable control.
  * @ena_gpio_flags: Flags to use when calling gpio_request_one()
@@ -312,6 +315,7 @@ struct regulator_config {
 	struct device_node *of_node;
 	struct regmap *regmap;
 
+	bool ena_gpio_initialized;
 	int ena_gpio;
 	unsigned int ena_gpio_invert:1;
 	unsigned int ena_gpio_flags;

commit a81bf3c4fc391ec10696d448408c1ac83bfb6112
Merge: 95528a55dba0 fdaff15ae6cc df11e506d330 e13426bf249b 5c5e417bc06f ba441ec22533
Author: Mark Brown <broonie@kernel.org>
Date:   Tue Sep 30 13:50:27 2014 +0100

    Merge remote-tracking branches 'regulator/topic/drivers', 'regulator/topic/enable', 'regulator/topic/fan53555', 'regulator/topic/hi6421' and 'regulator/topic/isl9305' into regulator-next

commit 3f7c69637511a39f4400dc8312bbcecaa592ab61
Merge: dec38b5ce6a9 a0c7b164ad11
Author: Mark Brown <broonie@kernel.org>
Date:   Wed Sep 10 12:03:23 2014 +0100

    Merge branch 'topic/of' of git://git.kernel.org/pub/scm/linux/kernel/git/broonie/regulator into regulator-isl9305

commit a0c7b164ad115ec0556dc0904ee2218cbc5cedfa
Author: Mark Brown <broonie@kernel.org>
Date:   Tue Sep 9 23:13:57 2014 +0100

    regulator: of: Provide simplified DT parsing method
    
    Currently regulator drivers which support DT all repeat very similar code
    to supply a list of known regulator identifiers to be matched with DT,
    convert that to platform data which is then matched up with the regulators
    as they are registered. This is both fiddly to get right and for devices
    which can use the standard helpers to provide their operations is the main
    source of code in the driver.
    
    Since this code is essentially identical for most drivers we can factor it
    out into the core, moving the identifiers in the match table into the
    regulator descriptors and also allowing drivers to pass in the name of the
    subnode to search. When a driver provides an of_match string for the
    regulator the core will attempt to use that to obtain init_data, allowing
    the driver to remove all explicit code for DT parsing and simply provide
    data instead.
    
    The current code leaks the phandles for the child nodes, this will be
    addressed incrementally and makes no practical difference for FDT anyway
    as the DT data structures are never freed.
    
    Signed-off-by: Mark Brown <broonie@linaro.org>

diff --git a/include/linux/regulator/driver.h b/include/linux/regulator/driver.h
index bbe03a1924c0..c35f5f97a147 100644
--- a/include/linux/regulator/driver.h
+++ b/include/linux/regulator/driver.h
@@ -203,6 +203,8 @@ enum regulator_type {
  *
  * @name: Identifying name for the regulator.
  * @supply_name: Identifying the regulator supply
+ * @of_match: Name used to identify regulator in DT.
+ * @regulators_node: Name of node containing regulator definitions in DT.
  * @id: Numerical identifier for the regulator.
  * @ops: Regulator operations table.
  * @irq: Interrupt number for the regulator.
@@ -242,6 +244,8 @@ enum regulator_type {
 struct regulator_desc {
 	const char *name;
 	const char *supply_name;
+	const char *of_match;
+	const char *regulators_node;
 	int id;
 	bool continuous_voltage_range;
 	unsigned n_voltages;

commit a8dbfeedfe47a19a4712749eb2444b1d7ea1150e
Author: Randy Dunlap <rdunlap@infradead.org>
Date:   Wed Aug 27 14:31:24 2014 -0700

    regulator: fix kernel-doc warnings in header files
    
    Fix kernel-doc warnings in regulator header files:
    
    Warning(..//include/linux/regulator/machine.h:140): No description found for parameter 'ramp_disable'
    Warning(..//include/linux/regulator/driver.h:279): No description found for parameter 'linear_ranges'
    Warning(..//include/linux/regulator/driver.h:279): No description found for parameter 'n_linear_ranges'
    
    Signed-off-by: Randy Dunlap <rdunlap@infradead.org>
    Signed-off-by: Mark Brown <broonie@linaro.org>

diff --git a/include/linux/regulator/driver.h b/include/linux/regulator/driver.h
index bbe03a1924c0..4efa1ed8a2b0 100644
--- a/include/linux/regulator/driver.h
+++ b/include/linux/regulator/driver.h
@@ -218,6 +218,8 @@ enum regulator_type {
  * @linear_min_sel: Minimal selector for starting linear mapping
  * @fixed_uV: Fixed voltage of rails.
  * @ramp_delay: Time to settle down after voltage change (unit: uV/us)
+ * @linear_ranges: A constant table of possible voltage ranges.
+ * @n_linear_ranges: Number of entries in the @linear_ranges table.
  * @volt_table: Voltage mapping table (if table based mapping)
  *
  * @vsel_reg: Register for selector when using regulator_regmap_X_voltage_

commit df11e506d330d9a0e5a701cd2c5fcb7d461b6060
Author: Axel Lin <axel.lin@ingics.com>
Date:   Thu Aug 21 10:11:34 2014 +0800

    regulator: core: Add back the const qualifier for ops of struct regulator_desc
    
    Fix below build warning:
    CC [M]  drivers/regulator/hi6421-regulator.o
    drivers/regulator/hi6421-regulator.c:356:2: warning: initialization discards 'const' qualifier from pointer target type [enabled by default]
    
    This is a revert of commit 716845ebeb50 ("regulator: core: Fix build error due
    to const qualifier for ops"). The build error was fixed by commit 39f5460d7f9c
    ("regulator: core: add const to regulator_ops and fix build error in mc13892").
    
    Signed-off-by: Axel Lin <axel.lin@ingics.com>
    Signed-off-by: Mark Brown <broonie@linaro.org>

diff --git a/include/linux/regulator/driver.h b/include/linux/regulator/driver.h
index 3abda7554d82..efe058f8f746 100644
--- a/include/linux/regulator/driver.h
+++ b/include/linux/regulator/driver.h
@@ -246,7 +246,7 @@ struct regulator_desc {
 	int id;
 	bool continuous_voltage_range;
 	unsigned n_voltages;
-	struct regulator_ops *ops;
+	const struct regulator_ops *ops;
 	int irq;
 	enum regulator_type type;
 	struct module *owner;

commit 716845ebeb505353d900320b4a74e8330520410d
Author: Axel Lin <axel.lin@ingics.com>
Date:   Mon Aug 18 10:34:08 2014 +0800

    regulator: core: Fix build error due to const qualifier for ops
    
    Drop const qualifier for ops of struct regulator_desc.
    Allow regulator drivers to update ops before registering regulator.
    
    Fix below build error:
      CC [M]  drivers/regulator/mc13892-regulator.o
    drivers/regulator/mc13892-regulator.c: In function 'mc13892_regulator_probe':
    drivers/regulator/mc13892-regulator.c:586:3: error: assignment of member 'set_mode' in read-only object
    drivers/regulator/mc13892-regulator.c:588:3: error: assignment of member 'get_mode' in read-only object
    make[2]: *** [drivers/regulator/mc13892-regulator.o] Error 1
    make[1]: *** [drivers/regulator] Error 2
    make: *** [drivers] Error 2
    
    Reported-by: Stephen Rothwell <sfr@canb.auug.org.au>
    Signed-off-by: Axel Lin <axel.lin@ingics.com>
    Signed-off-by: Mark Brown <broonie@linaro.org>

diff --git a/include/linux/regulator/driver.h b/include/linux/regulator/driver.h
index efe058f8f746..3abda7554d82 100644
--- a/include/linux/regulator/driver.h
+++ b/include/linux/regulator/driver.h
@@ -246,7 +246,7 @@ struct regulator_desc {
 	int id;
 	bool continuous_voltage_range;
 	unsigned n_voltages;
-	const struct regulator_ops *ops;
+	struct regulator_ops *ops;
 	int irq;
 	enum regulator_type type;
 	struct module *owner;

commit 871f565055ed232e5751da18a331b73e8254adaf
Author: Guodong Xu <guodong.xu@linaro.org>
Date:   Wed Aug 13 19:33:40 2014 +0800

    regulator: core: add guard delay between calling regulator_disable and _enable
    
    Some regulator require a minimum delay between its disable and next enable.
    This is to avoid damages when out-of-range frequent disable/enable of a
    single regulator can bring to the regulator chip.
    
    Add @off_on_delay to struct regulator_desc. Device drivers' can use this field
    to set this guard time.
    
    Add @last_off_jiffy to struct regulator_dev. When @off_on_delay is set by
    driver, regulator core can store its last off (disable) time into this field.
    
    Signed-off-by: Guodong Xu <guodong.xu@linaro.org>
    Signed-off-by: Mark Brown <broonie@linaro.org>

diff --git a/include/linux/regulator/driver.h b/include/linux/regulator/driver.h
index 4b628139a9cb..efe058f8f746 100644
--- a/include/linux/regulator/driver.h
+++ b/include/linux/regulator/driver.h
@@ -238,6 +238,7 @@ enum regulator_type {
  * @bypass_val_off: Disabling value for control when using regmap set_bypass
  *
  * @enable_time: Time taken for initial enable of regulator (in uS).
+ * @off_on_delay: guard time (in uS), before re-enabling a regulator
  */
 struct regulator_desc {
 	const char *name;
@@ -276,6 +277,8 @@ struct regulator_desc {
 	unsigned int bypass_val_off;
 
 	unsigned int enable_time;
+
+	unsigned int off_on_delay;
 };
 
 /**
@@ -348,6 +351,9 @@ struct regulator_dev {
 
 	struct regulator_enable_gpio *ena_pin;
 	unsigned int ena_gpio_state:1;
+
+	/* time when this regulator was disabled last time */
+	unsigned long last_off_jiffy;
 };
 
 struct regulator_dev *

commit 272e2315fac3bfca0edfa3252b8a643c425602af
Author: Guodong Xu <guodong.xu@linaro.org>
Date:   Wed Aug 13 19:33:38 2014 +0800

    regulator: core: add const qualifier to ops in struct regulator_desc
    
    struct regulator_ops *ops is a member in struct regulator_desc, which gets
    its value from individual regulator driver upon regulator_register() and
    is used by regulator core APIs. It's not allowed for regulator core to
    modify any of these callbacks in *ops. Add 'const' qualifier to enforce that.
    
    Signed-off-by: Guodong Xu <guodong.xu@linaro.org>
    Signed-off-by: Mark Brown <broonie@linaro.org>

diff --git a/include/linux/regulator/driver.h b/include/linux/regulator/driver.h
index bbe03a1924c0..4b628139a9cb 100644
--- a/include/linux/regulator/driver.h
+++ b/include/linux/regulator/driver.h
@@ -245,7 +245,7 @@ struct regulator_desc {
 	int id;
 	bool continuous_voltage_range;
 	unsigned n_voltages;
-	struct regulator_ops *ops;
+	const struct regulator_ops *ops;
 	int irq;
 	enum regulator_type type;
 	struct module *owner;

commit ca5d1b3524b4d90a2e2f1f71583c1dca6b96fd92
Author: Carlo Caione <carlo@caione.org>
Date:   Wed Mar 5 22:11:29 2014 +0100

    regulator: helpers: Modify helpers enabling multi-bit control
    
    This patch extends the regulator helpers to account for device that use
    multiple bits for control when using regmap enable/disable/bypass ops.
    
    The actual regulator helpers wrongly assume that the regulator control
    is always performed using single bits, using in the regulator_desc
    struct only two parameters *_reg and *_mask defining register and mask
    for control.
    
    This patch extends this struct and introduces the helpers to take into
    account devices where control is performed using multiple bits and
    specific multi-bit values are used for enabling/disabling/bypassing the
    regulator.
    
    Signed-off-by: Carlo Caione <carlo@caione.org>
    Signed-off-by: Mark Brown <broonie@linaro.org>

diff --git a/include/linux/regulator/driver.h b/include/linux/regulator/driver.h
index 9370e65348a4..bbe03a1924c0 100644
--- a/include/linux/regulator/driver.h
+++ b/include/linux/regulator/driver.h
@@ -228,10 +228,14 @@ enum regulator_type {
  *                output when using regulator_set_voltage_sel_regmap
  * @enable_reg: Register for control when using regmap enable/disable ops
  * @enable_mask: Mask for control when using regmap enable/disable ops
+ * @enable_val: Enabling value for control when using regmap enable/disable ops
+ * @disable_val: Disabling value for control when using regmap enable/disable ops
  * @enable_is_inverted: A flag to indicate set enable_mask bits to disable
  *                      when using regulator_enable_regmap and friends APIs.
  * @bypass_reg: Register for control when using regmap set_bypass
  * @bypass_mask: Mask for control when using regmap set_bypass
+ * @bypass_val_on: Enabling value for control when using regmap set_bypass
+ * @bypass_val_off: Disabling value for control when using regmap set_bypass
  *
  * @enable_time: Time taken for initial enable of regulator (in uS).
  */
@@ -263,9 +267,13 @@ struct regulator_desc {
 	unsigned int apply_bit;
 	unsigned int enable_reg;
 	unsigned int enable_mask;
+	unsigned int enable_val;
+	unsigned int disable_val;
 	bool enable_is_inverted;
 	unsigned int bypass_reg;
 	unsigned int bypass_mask;
+	unsigned int bypass_val_on;
+	unsigned int bypass_val_off;
 
 	unsigned int enable_time;
 };

commit 4c35c8676fb224d0cb328ab83237286f8e2df224
Merge: a6117615a213 8828bae464b1
Author: Mark Brown <broonie@linaro.org>
Date:   Thu Oct 24 11:11:37 2013 +0100

    Merge remote-tracking branch 'regulator/topic/linear' into regulator-next

commit 706664c290d69f890a9e3acfc6a8196098459826
Merge: b735e47f6e94 609d5f6ddc18
Author: Mark Brown <broonie@linaro.org>
Date:   Thu Oct 24 11:11:36 2013 +0100

    Merge remote-tracking branch 'regulator/topic/fixed' into regulator-next

commit 420118d48311e0c4ef4aace5aede35079ecc2412
Merge: 2a2bec6554e9 32dadef2190e
Author: Mark Brown <broonie@linaro.org>
Date:   Thu Oct 24 11:11:32 2013 +0100

    Merge remote-tracking branch 'regulator/topic/alias' into regulator-next

commit 8828bae464b129abed95b748263f1ab53bdc5755
Author: Axel Lin <axel.lin@ingics.com>
Date:   Fri Oct 11 09:32:18 2013 +0800

    regulator: Add REGULATOR_LINEAR_RANGE macro
    
    Add REGULATOR_LINEAR_RANGE macro and convert regulator drivers to use it.
    
    Signed-off-by: Axel Lin <axel.lin@ingics.com>
    Signed-off-by: Mark Brown <broonie@linaro.org>

diff --git a/include/linux/regulator/driver.h b/include/linux/regulator/driver.h
index 997ff5c4d880..edb11b716dd3 100644
--- a/include/linux/regulator/driver.h
+++ b/include/linux/regulator/driver.h
@@ -57,6 +57,15 @@ struct regulator_linear_range {
 	unsigned int uV_step;
 };
 
+/* Initialize struct regulator_linear_range */
+#define REGULATOR_LINEAR_RANGE(_min_uV, _min_sel, _max_sel, _step_uV)	\
+{									\
+	.min_uV		= _min_uV,					\
+	.min_sel	= _min_sel,					\
+	.max_sel	= _max_sel,					\
+	.uV_step	= _step_uV,					\
+}
+
 /**
  * struct regulator_ops - regulator operations.
  *

commit e277e656804c85a0729d4fd8cdd3c8ab3e6b3b86
Author: Axel Lin <axel.lin@ingics.com>
Date:   Fri Oct 11 09:30:24 2013 +0800

    regulator: Remove max_uV from struct regulator_linear_range
    
    linear ranges means each range has linear voltage settings.
    So we can calculate max_uV for each linear range in regulator core rather than
    set the max_uV field in drivers.
    
    Signed-off-by: Axel Lin <axel.lin@ingics.com>
    Signed-off-by: Mark Brown <broonie@linaro.org>

diff --git a/include/linux/regulator/driver.h b/include/linux/regulator/driver.h
index 9bdad43ad228..997ff5c4d880 100644
--- a/include/linux/regulator/driver.h
+++ b/include/linux/regulator/driver.h
@@ -46,14 +46,12 @@ enum regulator_status {
  * regulator_list_linear_range().
  *
  * @min_uV:  Lowest voltage in range
- * @max_uV:  Highest voltage in range
  * @min_sel: Lowest selector for range
  * @max_sel: Highest selector for range
  * @uV_step: Step size
  */
 struct regulator_linear_range {
 	unsigned int min_uV;
-	unsigned int max_uV;
 	unsigned int min_sel;
 	unsigned int max_sel;
 	unsigned int uV_step;

commit 7c2330f1afe13b3a934140857bc8060d00103a89
Author: Randy Dunlap <rdunlap@infradead.org>
Date:   Mon Sep 16 18:08:02 2013 -0700

    regulator: fix fatal kernel-doc error
    
    Fix fatal kernel-doc error in <linux/regulator/driver.h>:
    
    Error(include/linux/regulator/driver.h:52): cannot understand prototype: 'struct regulator_linear_range '
    
    Signed-off-by: Randy Dunlap <rdunlap@infradead.org>
    [Rewrote first line -- broonie]
    Signed-off-by: Mark Brown <broonie@linaro.org>

diff --git a/include/linux/regulator/driver.h b/include/linux/regulator/driver.h
index 67e13aa5a478..9bdad43ad228 100644
--- a/include/linux/regulator/driver.h
+++ b/include/linux/regulator/driver.h
@@ -40,6 +40,8 @@ enum regulator_status {
 };
 
 /**
+ * struct regulator_linear_range - specify linear voltage ranges
+ *
  * Specify a range of voltages for regulator_map_linar_range() and
  * regulator_list_linear_range().
  *

commit b33e46bcdc4e598d738ed12a5a7906be4e11d786
Author: Mark Brown <broonie@linaro.org>
Date:   Sat Aug 31 11:58:26 2013 +0100

    regulator: core: Provide managed regulator registration
    
    Many regulator drivers have a remove function that consists solely of
    calling regulator_unregister() so provide a devm_regulator_register()
    in order to allow this repeated code to be removed and help eliminate
    error handling code.
    
    Signed-off-by: Mark Brown <broonie@linaro.org>

diff --git a/include/linux/regulator/driver.h b/include/linux/regulator/driver.h
index 67e13aa5a478..8474c7f88745 100644
--- a/include/linux/regulator/driver.h
+++ b/include/linux/regulator/driver.h
@@ -334,7 +334,12 @@ struct regulator_dev {
 struct regulator_dev *
 regulator_register(const struct regulator_desc *regulator_desc,
 		   const struct regulator_config *config);
+struct regulator_dev *
+devm_regulator_register(struct device *dev,
+			const struct regulator_desc *regulator_desc,
+			const struct regulator_config *config);
 void regulator_unregister(struct regulator_dev *rdev);
+void devm_regulator_unregister(struct device *dev, struct regulator_dev *rdev);
 
 int regulator_notifier_call_chain(struct regulator_dev *rdev,
 				  unsigned long event, void *data);

commit 5a523605afa7d3b54b2e7041f8c9e6bc39872a7e
Author: Laxman Dewangan <ldewangan@nvidia.com>
Date:   Tue Sep 10 15:45:05 2013 +0530

    regulator: core: provide fixed voltage in desc for single voltage rail
    
    If given rail has the single voltage (n_voltages = 1) then provide the
    rail voltage through regulator descriptor so that core can use this
    value for finding voltage.
    
    This will avoid the implementation of the callback for get_voltage() or
    list_voltage() callback on regulator driver.
    
    Signed-off-by: Laxman Dewangan <ldewangan@nvidia.com>
    Signed-off-by: Mark Brown <broonie@linaro.org>

diff --git a/include/linux/regulator/driver.h b/include/linux/regulator/driver.h
index 67e13aa5a478..9e8241a9f28f 100644
--- a/include/linux/regulator/driver.h
+++ b/include/linux/regulator/driver.h
@@ -207,6 +207,7 @@ enum regulator_type {
  * @min_uV: Voltage given by the lowest selector (if linear mapping)
  * @uV_step: Voltage increase with each selector (if linear mapping)
  * @linear_min_sel: Minimal selector for starting linear mapping
+ * @fixed_uV: Fixed voltage of rails.
  * @ramp_delay: Time to settle down after voltage change (unit: uV/us)
  * @volt_table: Voltage mapping table (if table based mapping)
  *
@@ -239,6 +240,7 @@ struct regulator_desc {
 	unsigned int min_uV;
 	unsigned int uV_step;
 	unsigned int linear_min_sel;
+	int fixed_uV;
 	unsigned int ramp_delay;
 
 	const struct regulator_linear_range *linear_ranges;

commit 94d33c02c7186b69849c292e1216a08ad1c0d99d
Author: Mark Brown <broonie@linaro.org>
Date:   Tue Jul 2 22:52:41 2013 +0100

    regulator: core: Add helpers for multiple linear ranges
    
    Many regulators have several linear ranges of selector with different
    step sizes, for example offering better resolution at lower voltages.
    Provide regulator_{map,list}_voltage_linear_range() allowing these
    regulators to use generic code. To do so a table of regulator_linear_range
    structs needs to be pointed to from the descriptor.
    
    This was inspired by similar code included in a driver submission from
    Chao Xie and Yi Zhang at Marvell.
    
    Signed-off-by: Mark Brown <broonie@linaro.org>

diff --git a/include/linux/regulator/driver.h b/include/linux/regulator/driver.h
index 6700cc94bdd1..67e13aa5a478 100644
--- a/include/linux/regulator/driver.h
+++ b/include/linux/regulator/driver.h
@@ -39,6 +39,24 @@ enum regulator_status {
 	REGULATOR_STATUS_UNDEFINED,
 };
 
+/**
+ * Specify a range of voltages for regulator_map_linar_range() and
+ * regulator_list_linear_range().
+ *
+ * @min_uV:  Lowest voltage in range
+ * @max_uV:  Highest voltage in range
+ * @min_sel: Lowest selector for range
+ * @max_sel: Highest selector for range
+ * @uV_step: Step size
+ */
+struct regulator_linear_range {
+	unsigned int min_uV;
+	unsigned int max_uV;
+	unsigned int min_sel;
+	unsigned int max_sel;
+	unsigned int uV_step;
+};
+
 /**
  * struct regulator_ops - regulator operations.
  *
@@ -223,6 +241,9 @@ struct regulator_desc {
 	unsigned int linear_min_sel;
 	unsigned int ramp_delay;
 
+	const struct regulator_linear_range *linear_ranges;
+	int n_linear_ranges;
+
 	const unsigned int *volt_table;
 
 	unsigned int vsel_reg;
@@ -326,10 +347,14 @@ int regulator_mode_to_status(unsigned int);
 
 int regulator_list_voltage_linear(struct regulator_dev *rdev,
 				  unsigned int selector);
+int regulator_list_voltage_linear_range(struct regulator_dev *rdev,
+					unsigned int selector);
 int regulator_list_voltage_table(struct regulator_dev *rdev,
 				  unsigned int selector);
 int regulator_map_voltage_linear(struct regulator_dev *rdev,
 				  int min_uV, int max_uV);
+int regulator_map_voltage_linear_range(struct regulator_dev *rdev,
+				       int min_uV, int max_uV);
 int regulator_map_voltage_iterate(struct regulator_dev *rdev,
 				  int min_uV, int max_uV);
 int regulator_map_voltage_ascend(struct regulator_dev *rdev,

commit 3dc06c1baf2b28e5365a1159755eac2e95142601
Merge: 5f19a85ba728 407945fd78c3
Author: Mark Brown <broonie@sirena.org.uk>
Date:   Sun Apr 28 02:13:40 2013 +0100

    Merge remote-tracking branch 'regulator/topic/gpio' into v3.9-rc8

commit 1d60a4cf975a196d585149e667f58cbca1a574fc
Merge: 0e340ce1ddcf ea88b132acdf
Author: Mark Brown <broonie@sirena.org.uk>
Date:   Sun Apr 28 02:13:37 2013 +0100

    Merge remote-tracking branch 'regulator/topic/enable-invert' into v3.9-rc8

commit fcf371ee5624cc87abac205cd0dad2432d7f0346
Author: Axel Lin <axel.lin@ingics.com>
Date:   Thu Apr 18 10:34:49 2013 +0800

    regulator: core: Add regulator_map_voltage_ascend() API
    
    A lot of regulator hardware has ascendant voltage list.
    This patch adds regulator_map_voltage_ascend() and export it.
    
    Drivers that have ascendant voltage list can use this as their map_voltage()
    operation, this is more efficient than default regulator_map_voltage_iterate()
    function.
    
    Signed-off-by: Axel Lin <axel.lin@ingics.com>
    Signed-off-by: Mark Brown <broonie@opensource.wolfsonmicro.com>

diff --git a/include/linux/regulator/driver.h b/include/linux/regulator/driver.h
index 7df93f52db08..2acdc66f8342 100644
--- a/include/linux/regulator/driver.h
+++ b/include/linux/regulator/driver.h
@@ -329,6 +329,8 @@ int regulator_map_voltage_linear(struct regulator_dev *rdev,
 				  int min_uV, int max_uV);
 int regulator_map_voltage_iterate(struct regulator_dev *rdev,
 				  int min_uV, int max_uV);
+int regulator_map_voltage_ascend(struct regulator_dev *rdev,
+				  int min_uV, int max_uV);
 int regulator_get_voltage_sel_regmap(struct regulator_dev *rdev);
 int regulator_set_voltage_sel_regmap(struct regulator_dev *rdev, unsigned sel);
 int regulator_is_enabled_regmap(struct regulator_dev *rdev);

commit 51dcdafcb720a9d1fd73b597d0ccf48837abc59f
Author: Axel Lin <axel.lin@ingics.com>
Date:   Tue Mar 5 14:16:00 2013 +0800

    regulator: core: Add enable_is_inverted flag to indicate set enable_mask bits to disable
    
    Add enable_is_inverted flag to indicate set enable_mask bits to disable
    when using regulator_enable_regmap and friends APIs.
    
    Signed-off-by: Axel Lin <axel.lin@ingics.com>
    Reviewed-by: Haojian Zhuang <haojian.zhuang@gmail.com>
    Signed-off-by: Mark Brown <broonie@opensource.wolfsonmicro.com>

diff --git a/include/linux/regulator/driver.h b/include/linux/regulator/driver.h
index 7df93f52db08..07ea8f1a127e 100644
--- a/include/linux/regulator/driver.h
+++ b/include/linux/regulator/driver.h
@@ -199,6 +199,8 @@ enum regulator_type {
  *                output when using regulator_set_voltage_sel_regmap
  * @enable_reg: Register for control when using regmap enable/disable ops
  * @enable_mask: Mask for control when using regmap enable/disable ops
+ * @enable_is_inverted: A flag to indicate set enable_mask bits to disable
+ *                      when using regulator_enable_regmap and friends APIs.
  * @bypass_reg: Register for control when using regmap set_bypass
  * @bypass_mask: Mask for control when using regmap set_bypass
  *
@@ -228,6 +230,7 @@ struct regulator_desc {
 	unsigned int apply_bit;
 	unsigned int enable_reg;
 	unsigned int enable_mask;
+	bool enable_is_inverted;
 	unsigned int bypass_reg;
 	unsigned int bypass_mask;
 

commit 7b74d149247c8972da1cec3e4c70b67049aaeb69
Author: Kim, Milo <Milo.Kim@ti.com>
Date:   Mon Feb 18 06:50:55 2013 +0000

    regulator: core: use regulator_ena_pin member
    
     The regulator_dev has regulator_enable_gpio structure.
     'ena_gpio' and 'ena_gpio_invert' were moved to in regulator_enable_gpio.
    
      regulator_dev   --->   regulator_enable_gpio
      .ena_gpio              .gpio
      .ena_gpio_invert       .ena_gpio_invert
    
      Pointer, 'ena_pin' is used for checking valid enable GPIO pin.
    
    Signed-off-by: Milo(Woogyom) Kim <milo.kim@ti.com>
    Reviewed-by: Axel Lin <axel.lin@ingics.com>
    Signed-off-by: Mark Brown <broonie@opensource.wolfsonmicro.com>

diff --git a/include/linux/regulator/driver.h b/include/linux/regulator/driver.h
index a467d11dd67d..7b7aeec04f86 100644
--- a/include/linux/regulator/driver.h
+++ b/include/linux/regulator/driver.h
@@ -302,8 +302,6 @@ struct regulator_dev {
 	struct dentry *debugfs;
 
 	struct regulator_enable_gpio *ena_pin;
-	int ena_gpio;
-	unsigned int ena_gpio_invert:1;
 	unsigned int ena_gpio_state:1;
 };
 

commit f19b00da8ed37db4e3891fe534fcf3a605a0e562
Author: Kim, Milo <Milo.Kim@ti.com>
Date:   Mon Feb 18 06:50:39 2013 +0000

    regulator: core: support shared enable GPIO concept
    
     A Regulator can be enabled by external GPIO pin.
     This is configurable in the regulator_config.
     At this moment, the GPIO can be owned by only one regulator device.
     In some devices, multiple regulators are enabled by shared one GPIO pin.
     This patch extends this limitation, enabling shared enable GPIO of regulators.
    
     New list for enable GPIO: 'regulator_ena_gpio_list'
       This manages enable GPIO list.
    
     New structure for supporting shared enable GPIO: 'regulator_enable_gpio'
       The enable count is used for balancing GPIO control count.
       This count is incremented when GPIO is enabled.
       On the other hand, it's decremented when GPIO is disabled.
    
     Reference count: 'request_count'
       The reference count, 'request_count' is incremented/decremented on
       requesting/freeing the GPIO. This count makes sure only free the GPIO
       when it has no users.
    
     How it works
       If the GPIO is already used, skip requesting new GPIO usage.
       The GPIO is new one, request GPIO function and add it to the list of
       enable GPIO.
       This list is used for balancing enable GPIO count and pin control.
    
     Updating a GPIO and invert code moved
       'ena_gpio' and 'ena_gpio_invert' of the regulator_config were moved to
        new function, regulator_ena_gpio_request().
        Use regulator_enable_pin structure rather than regulator_dev.
    
    Signed-off-by: Milo(Woogyom) Kim <milo.kim@ti.com>
    Reviewed-by: Axel Lin <axel.lin@ingics.com>
    Signed-off-by: Mark Brown <broonie@opensource.wolfsonmicro.com>

diff --git a/include/linux/regulator/driver.h b/include/linux/regulator/driver.h
index 23070fd83872..a467d11dd67d 100644
--- a/include/linux/regulator/driver.h
+++ b/include/linux/regulator/driver.h
@@ -22,6 +22,7 @@
 struct regmap;
 struct regulator_dev;
 struct regulator_init_data;
+struct regulator_enable_gpio;
 
 enum regulator_status {
 	REGULATOR_STATUS_OFF,
@@ -300,6 +301,7 @@ struct regulator_dev {
 
 	struct dentry *debugfs;
 
+	struct regulator_enable_gpio *ena_pin;
 	int ena_gpio;
 	unsigned int ena_gpio_invert:1;
 	unsigned int ena_gpio_state:1;

commit 5838b032fd69ae47565ddc50062decf9055e1628
Author: Nishanth Menon <nm@ti.com>
Date:   Thu Feb 28 18:12:47 2013 -0600

    regulator: core: update kernel documentation for regulator_desc
    
    commit df367931 (regulator: core: Provide regmap get/set bypass
    operations) introduced regulator_[gs]et_bypass_regmap
    
    However structure documentation for regulator_desc needs an update.
    ./scripts/kernel-doc include/linux/regulator/driver.h >/dev/null
    generates:
    Warning(include/linux/regulator/driver.h:233): No description found for parameter 'bypass_reg'
    Warning(include/linux/regulator/driver.h:233): No description found for parameter 'bypass_mask'
    
    Cc: Liam Girdwood <lgirdwood@gmail.com>
    Cc: Mark Brown <broonie@opensource.wolfsonmicro.com>
    Cc: linux-kernel@vger.kernel.org
    Signed-off-by: Nishanth Menon <nm@ti.com>
    Signed-off-by: Mark Brown <broonie@opensource.wolfsonmicro.com>

diff --git a/include/linux/regulator/driver.h b/include/linux/regulator/driver.h
index 23070fd83872..7df93f52db08 100644
--- a/include/linux/regulator/driver.h
+++ b/include/linux/regulator/driver.h
@@ -199,6 +199,8 @@ enum regulator_type {
  *                output when using regulator_set_voltage_sel_regmap
  * @enable_reg: Register for control when using regmap enable/disable ops
  * @enable_mask: Mask for control when using regmap enable/disable ops
+ * @bypass_reg: Register for control when using regmap set_bypass
+ * @bypass_mask: Mask for control when using regmap set_bypass
  *
  * @enable_time: Time taken for initial enable of regulator (in uS).
  */

commit c8520b4c5d25eb7b8b54f1ae9ba7da71375f2b2c
Author: Axel Lin <axel.lin@ingics.com>
Date:   Tue Dec 18 09:30:10 2012 +0800

    regulator: core: Allow specify apply_[reg|bit] for regmap based voltage_sel operations
    
    Some DVM regulators needs to update apply_bit after setting vsel_reg to
    initiate voltage change on the output.  This patch adds apply_reg and
    apply_bit to struct regulator_desc and update
    regulator_set_voltage_sel_regmap() to set apply_bit of apply_reg when
    apply_bit is set.
    
    Signed-off-by: Axel Lin <axel.lin@ingics.com>
    Signed-off-by: Mark Brown <broonie@opensource.wolfsonmicro.com>

diff --git a/include/linux/regulator/driver.h b/include/linux/regulator/driver.h
index d10bb0f39c5e..23070fd83872 100644
--- a/include/linux/regulator/driver.h
+++ b/include/linux/regulator/driver.h
@@ -193,6 +193,10 @@ enum regulator_type {
  *
  * @vsel_reg: Register for selector when using regulator_regmap_X_voltage_
  * @vsel_mask: Mask for register bitfield used for selector
+ * @apply_reg: Register for initiate voltage change on the output when
+ *                using regulator_set_voltage_sel_regmap
+ * @apply_bit: Register bitfield used for initiate voltage change on the
+ *                output when using regulator_set_voltage_sel_regmap
  * @enable_reg: Register for control when using regmap enable/disable ops
  * @enable_mask: Mask for control when using regmap enable/disable ops
  *
@@ -218,6 +222,8 @@ struct regulator_desc {
 
 	unsigned int vsel_reg;
 	unsigned int vsel_mask;
+	unsigned int apply_reg;
+	unsigned int apply_bit;
 	unsigned int enable_reg;
 	unsigned int enable_mask;
 	unsigned int bypass_reg;

commit adca48f7c61c53708a1f1ed567e0447ccb2b3b96
Merge: 9e218670737e e1b0144f9997
Author: Mark Brown <broonie@opensource.wolfsonmicro.com>
Date:   Mon Dec 10 12:43:00 2012 +0900

    Merge remote-tracking branch 'regulator/topic/min' into regulator-next

commit 33234e791de2ac3ea915158e042907748191cabd
Author: Axel Lin <axel.lin@ingics.com>
Date:   Tue Nov 27 10:24:33 2012 +0800

    regulator: core: Allow specific minimal selector for starting linear mapping
    
    Some drivers (at least 3 drivers) have such variant of linear mapping that
    the first few selectors are invalid and the reset are linear mapping.
    Let's support this case in core.
    
    This patch adds linear_min_sel in struct regulator_desc,
    so we can allow specific minimal selector for starting linear mapping.
    Then extends regulator_[map|list]_voltage_linear() to support this feature.
    
    Note that for selectors less than min_linear_index, we need count them to
    n_voltages so regulator_list_voltage() won't fail while checking the boundary
    for selector before calling list_voltage callback.
    
    Signed-off-by: Axel Lin <axel.lin@ingics.com>
    Signed-off-by: Mark Brown <broonie@opensource.wolfsonmicro.com>

diff --git a/include/linux/regulator/driver.h b/include/linux/regulator/driver.h
index 7932a3bf21bd..d9ce98a5028b 100644
--- a/include/linux/regulator/driver.h
+++ b/include/linux/regulator/driver.h
@@ -185,6 +185,7 @@ enum regulator_type {
  *
  * @min_uV: Voltage given by the lowest selector (if linear mapping)
  * @uV_step: Voltage increase with each selector (if linear mapping)
+ * @linear_min_sel: Minimal selector for starting linear mapping
  * @ramp_delay: Time to settle down after voltage change (unit: uV/us)
  * @volt_table: Voltage mapping table (if table based mapping)
  *
@@ -207,6 +208,7 @@ struct regulator_desc {
 
 	unsigned int min_uV;
 	unsigned int uV_step;
+	unsigned int linear_min_sel;
 	unsigned int ramp_delay;
 
 	const unsigned int *volt_table;

commit bd7a2b600ace90c8819495b639a744c8f5c68feb
Author: Pawel Moll <pawel.moll@arm.com>
Date:   Mon Sep 24 18:56:53 2012 +0100

    regulator: core: Support for continuous voltage range
    
    Some regulators can set any voltage within the constraints range,
    not being limited to specified operating points.
    
    This patch makes it possible to describe such regulator and makes
    the regulator_is_supported_voltage() function behave correctly.
    
    Signed-off-by: Pawel Moll <pawel.moll@arm.com>
    Signed-off-by: Mark Brown <broonie@opensource.wolfsonmicro.com>

diff --git a/include/linux/regulator/driver.h b/include/linux/regulator/driver.h
index 7932a3bf21bd..f2b72b230b9b 100644
--- a/include/linux/regulator/driver.h
+++ b/include/linux/regulator/driver.h
@@ -181,6 +181,8 @@ enum regulator_type {
  * @type: Indicates if the regulator is a voltage or current regulator.
  * @owner: Module providing the regulator, used for refcounting.
  *
+ * @continuous_voltage_range: Indicates if the regulator can set any
+ *                            voltage within constrains range.
  * @n_voltages: Number of selectors available for ops.list_voltage().
  *
  * @min_uV: Voltage given by the lowest selector (if linear mapping)
@@ -199,6 +201,7 @@ struct regulator_desc {
 	const char *name;
 	const char *supply_name;
 	int id;
+	bool continuous_voltage_range;
 	unsigned n_voltages;
 	struct regulator_ops *ops;
 	int irq;

commit 6a2027abd2048f7f7fdcc6e11ff10b3d9b0d0899
Merge: 5698bd757d55 52b84dac436a b8575a1143f6 3f1965776f6e e96961dabe44 3006b8d665c9
Author: Mark Brown <broonie@opensource.wolfsonmicro.com>
Date:   Fri Sep 28 14:45:07 2012 +0100

    Merge remote-tracking branches 'regulator/topic/core', 'regulator/topic/bypass', 'regulator/topic/tol', 'regulator/topic/drivers' and 'regulator/topic/tps6586x' into regulator-next

commit df36793115b4f68181877a1c89bac54feadd965d
Author: Mark Brown <broonie@opensource.wolfsonmicro.com>
Date:   Mon Aug 27 16:04:23 2012 -0700

    regulator: core: Provide regmap get/set bypass operations
    
    Signed-off-by: Mark Brown <broonie@opensource.wolfsonmicro.com>

diff --git a/include/linux/regulator/driver.h b/include/linux/regulator/driver.h
index c9869cfbf261..7274a469e8d9 100644
--- a/include/linux/regulator/driver.h
+++ b/include/linux/regulator/driver.h
@@ -214,6 +214,8 @@ struct regulator_desc {
 	unsigned int vsel_mask;
 	unsigned int enable_reg;
 	unsigned int enable_mask;
+	unsigned int bypass_reg;
+	unsigned int bypass_mask;
 
 	unsigned int enable_time;
 };
@@ -320,6 +322,8 @@ int regulator_disable_regmap(struct regulator_dev *rdev);
 int regulator_set_voltage_time_sel(struct regulator_dev *rdev,
 				   unsigned int old_selector,
 				   unsigned int new_selector);
+int regulator_set_bypass_regmap(struct regulator_dev *rdev, bool enable);
+int regulator_get_bypass_regmap(struct regulator_dev *rdev, bool *enable);
 
 void *regulator_get_init_drvdata(struct regulator_init_data *reg_init_data);
 

commit f59c8f9fe689790248ae7aa7426579982050638c
Author: Mark Brown <broonie@opensource.wolfsonmicro.com>
Date:   Fri Aug 31 10:36:37 2012 -0700

    regulator: core: Support bypass mode
    
    Many regulators support a bypass mode where they simply switch their
    input supply to the output. This is mainly used in low power retention
    states where power consumption is extremely low so higher voltage or
    less clean supplies can be used.
    
    Support this by providing ops for the drivers and a consumer API which
    allows the device to be put into bypass mode if all consumers enable it
    and the machine enables permission for this.
    
    This is not supported as a mode since the existing modes are rarely used
    due to fuzzy definition and mostly redundant with modern hardware which is
    able to respond promptly to load changes.
    
    Signed-off-by: Mark Brown <broonie@opensource.wolfsonmicro.com>
    Reviewed-by: Graeme Gregory <gg@slimlogic.co.uk>

diff --git a/include/linux/regulator/driver.h b/include/linux/regulator/driver.h
index bac4c871f3bd..c9869cfbf261 100644
--- a/include/linux/regulator/driver.h
+++ b/include/linux/regulator/driver.h
@@ -32,6 +32,8 @@ enum regulator_status {
 	REGULATOR_STATUS_NORMAL,
 	REGULATOR_STATUS_IDLE,
 	REGULATOR_STATUS_STANDBY,
+	/* The regulator is enabled but not regulating */
+	REGULATOR_STATUS_BYPASS,
 	/* in case that any other status doesn't apply */
 	REGULATOR_STATUS_UNDEFINED,
 };
@@ -67,6 +69,9 @@ enum regulator_status {
  * @get_optimum_mode: Get the most efficient operating mode for the regulator
  *                    when running with the specified parameters.
  *
+ * @set_bypass: Set the regulator in bypass mode.
+ * @get_bypass: Get the regulator bypass mode state.
+ *
  * @enable_time: Time taken for the regulator voltage output voltage to
  *               stabilise after being enabled, in microseconds.
  * @set_ramp_delay: Set the ramp delay for the regulator. The driver should
@@ -133,6 +138,10 @@ struct regulator_ops {
 	unsigned int (*get_optimum_mode) (struct regulator_dev *, int input_uV,
 					  int output_uV, int load_uA);
 
+	/* control and report on bypass mode */
+	int (*set_bypass)(struct regulator_dev *dev, bool enable);
+	int (*get_bypass)(struct regulator_dev *dev, bool *enable);
+
 	/* the operations below are for configuration of regulator state when
 	 * its parent PMIC enters a global STANDBY/HIBERNATE state */
 
@@ -253,6 +262,7 @@ struct regulator_dev {
 	int exclusive;
 	u32 use_count;
 	u32 open_count;
+	u32 bypass_count;
 
 	/* lists we belong to */
 	struct list_head list; /* list of all regulators */

commit 380a0e6f72e8d0211f48c24f293a366a53b374d7
Author: Mark Brown <broonie@opensource.wolfsonmicro.com>
Date:   Fri Aug 31 10:31:53 2012 -0700

    regulator: Clarify documentation for regmap in the config
    
    Signed-off-by: Mark Brown <broonie@opensource.wolfsonmicro.com>

diff --git a/include/linux/regulator/driver.h b/include/linux/regulator/driver.h
index bac4c871f3bd..4a9ca04a13ef 100644
--- a/include/linux/regulator/driver.h
+++ b/include/linux/regulator/driver.h
@@ -221,7 +221,8 @@ struct regulator_desc {
  * @driver_data: private regulator data
  * @of_node: OpenFirmware node to parse for device tree bindings (may be
  *           NULL).
- * @regmap: regmap to use for core regmap helpers
+ * @regmap: regmap to use for core regmap helpers if dev_get_regulator() is
+ *          insufficient.
  * @ena_gpio: GPIO controlling regulator enable.
  * @ena_gpio_invert: Sense for GPIO enable control.
  * @ena_gpio_flags: Flags to use when calling gpio_request_one()

commit 89009e1888ad9a7f4491b8644884f5339773e643
Author: Axel Lin <axel.lin@gmail.com>
Date:   Wed Aug 8 20:17:18 2012 +0800

    regulator: Update comment for set_current_limit callback of struct regulator_ops
    
    The regulators should be tending to the maximum in the available range and
    consumers should specify the widest range possible.
    
    Signed-off-by: Axel Lin <axel.lin@gmail.com>
    Signed-off-by: Mark Brown <broonie@opensource.wolfsonmicro.com>

diff --git a/include/linux/regulator/driver.h b/include/linux/regulator/driver.h
index bac4c871f3bd..c10012f0af15 100644
--- a/include/linux/regulator/driver.h
+++ b/include/linux/regulator/driver.h
@@ -58,6 +58,7 @@ enum regulator_status {
  *	regulator_desc.n_voltages.  Voltages may be reported in any order.
  *
  * @set_current_limit: Configure a limit for a current-limited regulator.
+ *                     The driver should select the current closest to max_uA.
  * @get_current_limit: Get the configured limit for a current-limited regulator.
  *
  * @set_mode: Set the configured operating mode for the regulator.

commit 3384fb98845dc014770caa224d61a2effd258ca5
Merge: 8cfc545e0e3e ade7515fefad
Author: Mark Brown <broonie@opensource.wolfsonmicro.com>
Date:   Sun Jul 22 19:32:00 2012 +0100

    Merge branch 'regulator-drivers' into regulator-next

commit 1beaf762b4ad5f53876f790bb6cfbd3bac072985
Author: Krystian Garbaciak <krystian.garbaciak@diasemi.com>
Date:   Thu Jul 12 13:53:35 2012 +0100

    regulator: Add REGULATOR_STATUS_UNDEFINED.
    
    REGULATOR_STATUS_UNDEFINED is to be returned by regulator, if any other state
    doesn't really apply.
    
    Signed-off-by: Krystian Garbaciak <krystian.garbaciak@diasemi.com>
    Signed-off-by: Mark Brown <broonie@opensource.wolfsonmicro.com>

diff --git a/include/linux/regulator/driver.h b/include/linux/regulator/driver.h
index 80226383e561..2513a54ca2e8 100644
--- a/include/linux/regulator/driver.h
+++ b/include/linux/regulator/driver.h
@@ -32,6 +32,8 @@ enum regulator_status {
 	REGULATOR_STATUS_NORMAL,
 	REGULATOR_STATUS_IDLE,
 	REGULATOR_STATUS_STANDBY,
+	/* in case that any other status doesn't apply */
+	REGULATOR_STATUS_UNDEFINED,
 };
 
 /**

commit 65f735082de35aa4d44e8d0afe862798d0e09e29
Author: Mark Brown <broonie@opensource.wolfsonmicro.com>
Date:   Wed Jun 27 14:14:38 2012 +0100

    regulator: core: Add core support for GPIO controlled enable lines
    
    It is very common for regulators to support having their enable signal
    controlled by a GPIO. Since there are a bunch of fiddly things to get
    right like handling the operations when the enable signal is tied to
    a rail and it's just replicated code add support for this to the core.
    
    Drivers should set ena_gpio in their config if they have a GPIO control,
    using ena_gpio_flags to specify any flags (including GPIOF_OUT_INIT_ for
    the initial state) and ena_gpio_invert if the GPIO is active low. The
    core will then override any enable and disable operations the driver has
    and instead control the specified GPIO.
    
    This will in the future also allow us to further extend the core by
    identifying when several enable signals have been tied together and
    handling this properly.
    
    Signed-off-by: Mark Brown <broonie@opensource.wolfsonmicro.com>

diff --git a/include/linux/regulator/driver.h b/include/linux/regulator/driver.h
index 176bd4335581..b1b7b8b43ece 100644
--- a/include/linux/regulator/driver.h
+++ b/include/linux/regulator/driver.h
@@ -220,6 +220,9 @@ struct regulator_desc {
  * @of_node: OpenFirmware node to parse for device tree bindings (may be
  *           NULL).
  * @regmap: regmap to use for core regmap helpers
+ * @ena_gpio: GPIO controlling regulator enable.
+ * @ena_gpio_invert: Sense for GPIO enable control.
+ * @ena_gpio_flags: Flags to use when calling gpio_request_one()
  */
 struct regulator_config {
 	struct device *dev;
@@ -227,6 +230,10 @@ struct regulator_config {
 	void *driver_data;
 	struct device_node *of_node;
 	struct regmap *regmap;
+
+	int ena_gpio;
+	unsigned int ena_gpio_invert:1;
+	unsigned int ena_gpio_flags;
 };
 
 /*
@@ -265,6 +272,10 @@ struct regulator_dev {
 	void *reg_data;		/* regulator_dev data */
 
 	struct dentry *debugfs;
+
+	int ena_gpio;
+	unsigned int ena_gpio_invert:1;
+	unsigned int ena_gpio_state:1;
 };
 
 struct regulator_dev *

commit 79511ed3225a64f6b7fc749f4f9c1ed82f24f729
Author: Mark Brown <broonie@opensource.wolfsonmicro.com>
Date:   Wed Jun 27 14:23:10 2012 +0100

    regulator: core: Allow fixed enable_time to be set in the regulator_desc
    
    Many regulators have a fixed specification for their enable time. Allow
    this to be set in the regulator_desc as a number to save them having to
    implement an explicit operation.
    
    Signed-off-by: Mark Brown <broonie@opensource.wolfsonmicro.com>

diff --git a/include/linux/regulator/driver.h b/include/linux/regulator/driver.h
index 84f999ed394b..176bd4335581 100644
--- a/include/linux/regulator/driver.h
+++ b/include/linux/regulator/driver.h
@@ -180,6 +180,8 @@ enum regulator_type {
  * @vsel_mask: Mask for register bitfield used for selector
  * @enable_reg: Register for control when using regmap enable/disable ops
  * @enable_mask: Mask for control when using regmap enable/disable ops
+ *
+ * @enable_time: Time taken for initial enable of regulator (in uS).
  */
 struct regulator_desc {
 	const char *name;
@@ -201,6 +203,8 @@ struct regulator_desc {
 	unsigned int vsel_mask;
 	unsigned int enable_reg;
 	unsigned int enable_mask;
+
+	unsigned int enable_time;
 };
 
 /**

commit ea38d13fd1666bc030cb1c0feec5b0da2f89f9b2
Author: Axel Lin <axel.lin@gmail.com>
Date:   Mon Jun 18 14:03:16 2012 +0800

    regulator: core: Change the unit of ramp_delay from mV/uS to uV/uS
    
    This change makes it possible to set ramp_delay with 0.xxx mV/uS without
    truncation issue.
    
    Signed-off-by: Axel Lin <axel.lin@gmail.com>
    Signed-off-by: Mark Brown <broonie@opensource.wolfsonmicro.com>

diff --git a/include/linux/regulator/driver.h b/include/linux/regulator/driver.h
index ddc155d262da..84f999ed394b 100644
--- a/include/linux/regulator/driver.h
+++ b/include/linux/regulator/driver.h
@@ -173,7 +173,7 @@ enum regulator_type {
  *
  * @min_uV: Voltage given by the lowest selector (if linear mapping)
  * @uV_step: Voltage increase with each selector (if linear mapping)
- * @ramp_delay: Time to settle down after voltage change (unit: mV/us)
+ * @ramp_delay: Time to settle down after voltage change (unit: uV/us)
  * @volt_table: Voltage mapping table (if table based mapping)
  *
  * @vsel_reg: Register for selector when using regulator_regmap_X_voltage_

commit 6f0b2c696ca340cc2da381fe693fda3f8fdb2149
Author: Yadwinder Singh Brar <yadi.brar01@gmail.com>
Date:   Mon Jun 11 17:41:08 2012 +0530

    regulator: Add ramp_delay configuration to constraints
    
    For some hardwares ramp_delay for BUCKs is a configurable parameter which can
    be configured through DT or board file.This patch adds ramp_delay to regulator
    constraints and allow user to configure it for regulators which supports this
    feature, through DT or board file. It will provide two ways of setting the
    ramp_delay for a regulator:
            First, by setting it as constraints in board file(for configurable
    regulators) and set_machine_constraints() will take care of setting it on
    hardware by calling(the provided) .set_ramp_delay() operation(callback).
            Second, by setting it as data in regulator_desc(as fixed/default
    ramp_delay rate) for a regulator in driver.
    
    regulator_set_voltage_time_sel() will give preference to
    constraints->ramp_delay while reading ramp_delay rate for regulator. Similarly
    users should also take care accordingly while refering ramp_delay rate(in case
    of implementing their private .set_voltage_time_sel() callbacks for different
    regulators).
    
    [Rewrote subject for 80 columns -- broonie]
    
    Signed-off-by: Yadwinder Singh Brar <yadi.brar@samsung.com>
    Signed-off-by: Mark Brown <broonie@opensource.wolfsonmicro.com>

diff --git a/include/linux/regulator/driver.h b/include/linux/regulator/driver.h
index ae5c25379237..ddc155d262da 100644
--- a/include/linux/regulator/driver.h
+++ b/include/linux/regulator/driver.h
@@ -67,6 +67,8 @@ enum regulator_status {
  *
  * @enable_time: Time taken for the regulator voltage output voltage to
  *               stabilise after being enabled, in microseconds.
+ * @set_ramp_delay: Set the ramp delay for the regulator. The driver should
+ *		select ramp delay equal to or less than(closest) ramp_delay.
  * @set_voltage_time_sel: Time taken for the regulator voltage output voltage
  *               to stabilise after being set to a new value, in microseconds.
  *               The function provides the from and to voltage selector, the
@@ -113,6 +115,7 @@ struct regulator_ops {
 
 	/* Time taken to enable or set voltage on the regulator */
 	int (*enable_time) (struct regulator_dev *);
+	int (*set_ramp_delay) (struct regulator_dev *, int ramp_delay);
 	int (*set_voltage_time_sel) (struct regulator_dev *,
 				     unsigned int old_selector,
 				     unsigned int new_selector);

commit 98a175b60f46a80dfa44fb0e0807f2e5a351f35f
Author: Yadwinder Singh Brar <yadi.brar01@gmail.com>
Date:   Sat Jun 9 16:40:38 2012 +0530

    regulator: core: Add regulator_set_voltage_time_sel to calculate ramp delay.
    
    This patch adds regulator_set_voltage_time_sel(), to move into core, the
    commonly used code by drivers to provide the .set_voltage_time_sel callback.
    It will also allow us to configure different ramp delay for different
    regulators easily.
    
    Signed-off-by: Yadwinder Singh Brar <yadi.brar@samsung.com>
    Signed-off-by: Mark Brown <broonie@opensource.wolfsonmicro.com>

diff --git a/include/linux/regulator/driver.h b/include/linux/regulator/driver.h
index 80226383e561..ae5c25379237 100644
--- a/include/linux/regulator/driver.h
+++ b/include/linux/regulator/driver.h
@@ -170,6 +170,7 @@ enum regulator_type {
  *
  * @min_uV: Voltage given by the lowest selector (if linear mapping)
  * @uV_step: Voltage increase with each selector (if linear mapping)
+ * @ramp_delay: Time to settle down after voltage change (unit: mV/us)
  * @volt_table: Voltage mapping table (if table based mapping)
  *
  * @vsel_reg: Register for selector when using regulator_regmap_X_voltage_
@@ -189,6 +190,7 @@ struct regulator_desc {
 
 	unsigned int min_uV;
 	unsigned int uV_step;
+	unsigned int ramp_delay;
 
 	const unsigned int *volt_table;
 
@@ -285,6 +287,9 @@ int regulator_set_voltage_sel_regmap(struct regulator_dev *rdev, unsigned sel);
 int regulator_is_enabled_regmap(struct regulator_dev *rdev);
 int regulator_enable_regmap(struct regulator_dev *rdev);
 int regulator_disable_regmap(struct regulator_dev *rdev);
+int regulator_set_voltage_time_sel(struct regulator_dev *rdev,
+				   unsigned int old_selector,
+				   unsigned int new_selector);
 
 void *regulator_get_init_drvdata(struct regulator_init_data *reg_init_data);
 

commit cffc9592fde309deafce12362e0a285108cfa3c8
Author: Axel Lin <axel.lin@gmail.com>
Date:   Sun May 20 10:30:21 2012 +0800

    regulator: core: Allow drivers to set voltage mapping table in regulator_desc
    
    Some regulator hardware use table based mapping can set volt_table in
    regulator_desc and use regulator_list_voltage_table() for their list_voltage
    callback.
    
    Signed-off-by: Axel Lin <axel.lin@gmail.com>
    Acked-by: Liam Girdwood <lrg@ti.com>
    Signed-off-by: Mark Brown <broonie@opensource.wolfsonmicro.com>

diff --git a/include/linux/regulator/driver.h b/include/linux/regulator/driver.h
index b0432cc2b169..80226383e561 100644
--- a/include/linux/regulator/driver.h
+++ b/include/linux/regulator/driver.h
@@ -170,6 +170,7 @@ enum regulator_type {
  *
  * @min_uV: Voltage given by the lowest selector (if linear mapping)
  * @uV_step: Voltage increase with each selector (if linear mapping)
+ * @volt_table: Voltage mapping table (if table based mapping)
  *
  * @vsel_reg: Register for selector when using regulator_regmap_X_voltage_
  * @vsel_mask: Mask for register bitfield used for selector
@@ -189,6 +190,8 @@ struct regulator_desc {
 	unsigned int min_uV;
 	unsigned int uV_step;
 
+	const unsigned int *volt_table;
+
 	unsigned int vsel_reg;
 	unsigned int vsel_mask;
 	unsigned int enable_reg;
@@ -271,6 +274,8 @@ int regulator_mode_to_status(unsigned int);
 
 int regulator_list_voltage_linear(struct regulator_dev *rdev,
 				  unsigned int selector);
+int regulator_list_voltage_table(struct regulator_dev *rdev,
+				  unsigned int selector);
 int regulator_map_voltage_linear(struct regulator_dev *rdev,
 				  int min_uV, int max_uV);
 int regulator_map_voltage_iterate(struct regulator_dev *rdev,

commit bca7bbfff37808d56355bbcf0ceec34f0cc6c85d
Author: Mark Brown <broonie@opensource.wolfsonmicro.com>
Date:   Wed May 9 21:38:33 2012 +0100

    regulator: core: Allow drivers to set simple linear voltage maps as data
    
    A lot of regulator hardware maps selectors on to voltages with a simple
    linear mapping function
    
        selector = base + (selector * step size)
    
    Provide off the shelf list_voltage() and map_voltage() operations which
    use new min_uV and uV_step members in the regulator_desc to implement
    this function.
    
    Signed-off-by: Mark Brown <broonie@opensource.wolfsonmicro.com>
    Acked-by: Liam Girdwood <lrg@ti.com>

diff --git a/include/linux/regulator/driver.h b/include/linux/regulator/driver.h
index 13aa852b24ad..b0432cc2b169 100644
--- a/include/linux/regulator/driver.h
+++ b/include/linux/regulator/driver.h
@@ -161,12 +161,16 @@ enum regulator_type {
  * @name: Identifying name for the regulator.
  * @supply_name: Identifying the regulator supply
  * @id: Numerical identifier for the regulator.
- * @n_voltages: Number of selectors available for ops.list_voltage().
  * @ops: Regulator operations table.
  * @irq: Interrupt number for the regulator.
  * @type: Indicates if the regulator is a voltage or current regulator.
  * @owner: Module providing the regulator, used for refcounting.
-
+ *
+ * @n_voltages: Number of selectors available for ops.list_voltage().
+ *
+ * @min_uV: Voltage given by the lowest selector (if linear mapping)
+ * @uV_step: Voltage increase with each selector (if linear mapping)
+ *
  * @vsel_reg: Register for selector when using regulator_regmap_X_voltage_
  * @vsel_mask: Mask for register bitfield used for selector
  * @enable_reg: Register for control when using regmap enable/disable ops
@@ -182,6 +186,9 @@ struct regulator_desc {
 	enum regulator_type type;
 	struct module *owner;
 
+	unsigned int min_uV;
+	unsigned int uV_step;
+
 	unsigned int vsel_reg;
 	unsigned int vsel_mask;
 	unsigned int enable_reg;
@@ -262,6 +269,10 @@ int rdev_get_id(struct regulator_dev *rdev);
 
 int regulator_mode_to_status(unsigned int);
 
+int regulator_list_voltage_linear(struct regulator_dev *rdev,
+				  unsigned int selector);
+int regulator_map_voltage_linear(struct regulator_dev *rdev,
+				  int min_uV, int max_uV);
 int regulator_map_voltage_iterate(struct regulator_dev *rdev,
 				  int min_uV, int max_uV);
 int regulator_get_voltage_sel_regmap(struct regulator_dev *rdev);

commit e843fc4616485bbd8b5a115f5bd4f73808656373
Author: Mark Brown <broonie@opensource.wolfsonmicro.com>
Date:   Wed May 9 21:16:06 2012 +0100

    regulator: core: Allow regulators to provide a voltage to selector mapping
    
    In order to allow more drivers to factor things out into data allow
    drivers to provide a mapping function to convert voltages into selectors.
    This allows any driver to use set_voltage_sel(). The existing mapping
    based on iterating over list_voltage() is provided as an operation which
    can be assigned to the new map_voltage() function though for ease of
    transition it is treated as the default.
    
    Signed-off-by: Mark Brown <broonie@opensource.wolfsonmicro.com>
    Acked-by: Liam Girdwood <lrg@ti.com>

diff --git a/include/linux/regulator/driver.h b/include/linux/regulator/driver.h
index 8160bc87be28..13aa852b24ad 100644
--- a/include/linux/regulator/driver.h
+++ b/include/linux/regulator/driver.h
@@ -46,6 +46,7 @@ enum regulator_status {
  *               The driver should select the voltage closest to min_uV.
  * @set_voltage_sel: Set the voltage for the regulator using the specified
  *                   selector.
+ * @map_voltage: Convert a voltage into a selector
  * @get_voltage: Return the currently configured voltage for the regulator.
  * @get_voltage_sel: Return the currently configured voltage selector for the
  *                   regulator.
@@ -91,6 +92,7 @@ struct regulator_ops {
 	/* get/set regulator voltage */
 	int (*set_voltage) (struct regulator_dev *, int min_uV, int max_uV,
 			    unsigned *selector);
+	int (*map_voltage)(struct regulator_dev *, int min_uV, int max_uV);
 	int (*set_voltage_sel) (struct regulator_dev *, unsigned selector);
 	int (*get_voltage) (struct regulator_dev *);
 	int (*get_voltage_sel) (struct regulator_dev *);
@@ -260,6 +262,8 @@ int rdev_get_id(struct regulator_dev *rdev);
 
 int regulator_mode_to_status(unsigned int);
 
+int regulator_map_voltage_iterate(struct regulator_dev *rdev,
+				  int min_uV, int max_uV);
 int regulator_get_voltage_sel_regmap(struct regulator_dev *rdev);
 int regulator_set_voltage_sel_regmap(struct regulator_dev *rdev, unsigned sel);
 int regulator_is_enabled_regmap(struct regulator_dev *rdev);

commit cd6dffb4c6c476f5787f4df3eda7ecb16e25780d
Author: Mark Brown <broonie@opensource.wolfsonmicro.com>
Date:   Sun Apr 15 12:37:47 2012 +0100

    regulator: core: Provide standard enable operations for regmap users
    
    Since the enable(), disable() and is_enabled() operations for most regmap
    based regulators come down to reading and updating a single register bit
    we can factor out the code and allow these drivers to just define which
    bit to update using the enable_reg and enable_mask fields in their desc
    and then use operations provided by the core.
    
    As well as the code saving this opens the door to future optimisation of
    the bulk operations - if the core can realise that we are updating a
    single register for multiple regulators then it should be able to combine
    these updates into a single physical operation.
    
    Signed-off-by: Mark Brown <broonie@opensource.wolfsonmicro.com>
    Acked-by: Liam Girdwood <lrg@ti.com>

diff --git a/include/linux/regulator/driver.h b/include/linux/regulator/driver.h
index d1c238970a6e..8160bc87be28 100644
--- a/include/linux/regulator/driver.h
+++ b/include/linux/regulator/driver.h
@@ -167,6 +167,8 @@ enum regulator_type {
 
  * @vsel_reg: Register for selector when using regulator_regmap_X_voltage_
  * @vsel_mask: Mask for register bitfield used for selector
+ * @enable_reg: Register for control when using regmap enable/disable ops
+ * @enable_mask: Mask for control when using regmap enable/disable ops
  */
 struct regulator_desc {
 	const char *name;
@@ -180,6 +182,8 @@ struct regulator_desc {
 
 	unsigned int vsel_reg;
 	unsigned int vsel_mask;
+	unsigned int enable_reg;
+	unsigned int enable_mask;
 };
 
 /**
@@ -258,6 +262,9 @@ int regulator_mode_to_status(unsigned int);
 
 int regulator_get_voltage_sel_regmap(struct regulator_dev *rdev);
 int regulator_set_voltage_sel_regmap(struct regulator_dev *rdev, unsigned sel);
+int regulator_is_enabled_regmap(struct regulator_dev *rdev);
+int regulator_enable_regmap(struct regulator_dev *rdev);
+int regulator_disable_regmap(struct regulator_dev *rdev);
 
 void *regulator_get_init_drvdata(struct regulator_init_data *reg_init_data);
 

commit 4ab5b3d92c863e55fa28cc41a7b005b7ae87afee
Author: Mark Brown <broonie@opensource.wolfsonmicro.com>
Date:   Sun Apr 15 11:23:30 2012 +0100

    regulator: core: Provide regmap based voltage_sel operations
    
    Since the voltage selector operations are intended to directly map a
    bitfield in the device register map into regulator API operations the
    code for implementing them is usually very standard we can save some
    code by providing standard implementations for devices using the regmap
    API.
    
    Drivers using regmap can pass their regmap in in the regmap_config
    struct, set vsel_reg and vsel_mask in their regulator_desc and then
    use regulator_{get,set}_voltage_sel_regmap in their ops. This saves
    a small amount of code from each driver.
    
    Signed-off-by: Mark Brown <broonie@opensource.wolfsonmicro.com>
    Acked-by: Liam Girdwood <lrg@ti.com>

diff --git a/include/linux/regulator/driver.h b/include/linux/regulator/driver.h
index 2e753731217b..d1c238970a6e 100644
--- a/include/linux/regulator/driver.h
+++ b/include/linux/regulator/driver.h
@@ -164,6 +164,9 @@ enum regulator_type {
  * @irq: Interrupt number for the regulator.
  * @type: Indicates if the regulator is a voltage or current regulator.
  * @owner: Module providing the regulator, used for refcounting.
+
+ * @vsel_reg: Register for selector when using regulator_regmap_X_voltage_
+ * @vsel_mask: Mask for register bitfield used for selector
  */
 struct regulator_desc {
 	const char *name;
@@ -174,6 +177,9 @@ struct regulator_desc {
 	int irq;
 	enum regulator_type type;
 	struct module *owner;
+
+	unsigned int vsel_reg;
+	unsigned int vsel_mask;
 };
 
 /**
@@ -250,6 +256,9 @@ int rdev_get_id(struct regulator_dev *rdev);
 
 int regulator_mode_to_status(unsigned int);
 
+int regulator_get_voltage_sel_regmap(struct regulator_dev *rdev);
+int regulator_set_voltage_sel_regmap(struct regulator_dev *rdev, unsigned sel);
+
 void *regulator_get_init_drvdata(struct regulator_init_data *reg_init_data);
 
 #endif

commit 65b19ce6c223287ac95bbc22b12ef5a2738472d1
Author: Mark Brown <broonie@opensource.wolfsonmicro.com>
Date:   Sun Apr 15 11:16:05 2012 +0100

    regulator: core: Allow drivers to pass in a regmap
    
    Since many regulators use regmap for register I/O and since there's quite
    a few very common patterns in the code allow drivers to pass in a regmap
    to the core for use in generic code.
    
    Signed-off-by: Mark Brown <broonie@opensource.wolfsonmicro.com>
    Acked-by: Liam Girdwood <lrg@ti.com>

diff --git a/include/linux/regulator/driver.h b/include/linux/regulator/driver.h
index 4f529ed48d4c..2e753731217b 100644
--- a/include/linux/regulator/driver.h
+++ b/include/linux/regulator/driver.h
@@ -19,6 +19,7 @@
 #include <linux/notifier.h>
 #include <linux/regulator/consumer.h>
 
+struct regmap;
 struct regulator_dev;
 struct regulator_init_data;
 
@@ -187,12 +188,14 @@ struct regulator_desc {
  * @driver_data: private regulator data
  * @of_node: OpenFirmware node to parse for device tree bindings (may be
  *           NULL).
+ * @regmap: regmap to use for core regmap helpers
  */
 struct regulator_config {
 	struct device *dev;
 	const struct regulator_init_data *init_data;
 	void *driver_data;
 	struct device_node *of_node;
+	struct regmap *regmap;
 };
 
 /*
@@ -223,6 +226,7 @@ struct regulator_dev {
 	struct device dev;
 	struct regulation_constraints *constraints;
 	struct regulator *supply;	/* for tree */
+	struct regmap *regmap;
 
 	struct delayed_work disable_work;
 	int deferred_disables;

commit c172708d38a401b2f3f841dfcd862b469fa0b670
Author: Mark Brown <broonie@opensource.wolfsonmicro.com>
Date:   Wed Apr 4 00:50:22 2012 +0100

    regulator: core: Use a struct to pass in regulator runtime configuration
    
    Rather than adding new arguments to regulator_register() every time we
    want to add a new bit of dynamic information at runtime change the function
    to take these via a struct. By doing this we avoid needing to do further
    changes like the recent addition of device tree support which required each
    regulator driver to be updated to take an additional parameter.
    
    The regulator_desc which should (mostly) be static data is still passed
    separately as most drivers are able to configure this statically at build
    time.
    
    Signed-off-by: Mark Brown <broonie@opensource.wolfsonmicro.com>

diff --git a/include/linux/regulator/driver.h b/include/linux/regulator/driver.h
index 1dcdf00e0db2..4f529ed48d4c 100644
--- a/include/linux/regulator/driver.h
+++ b/include/linux/regulator/driver.h
@@ -148,10 +148,12 @@ enum regulator_type {
 };
 
 /**
- * struct regulator_desc - Regulator descriptor
+ * struct regulator_desc - Static regulator descriptor
  *
- * Each regulator registered with the core is described with a structure of
- * this type.
+ * Each regulator registered with the core is described with a
+ * structure of this type and a struct regulator_config.  This
+ * structure contains the non-varying parts of the regulator
+ * description.
  *
  * @name: Identifying name for the regulator.
  * @supply_name: Identifying the regulator supply
@@ -173,6 +175,26 @@ struct regulator_desc {
 	struct module *owner;
 };
 
+/**
+ * struct regulator_config - Dynamic regulator descriptor
+ *
+ * Each regulator registered with the core is described with a
+ * structure of this type and a struct regulator_desc.  This structure
+ * contains the runtime variable parts of the regulator description.
+ *
+ * @dev: struct device for the regulator
+ * @init_data: platform provided init data, passed through by driver
+ * @driver_data: private regulator data
+ * @of_node: OpenFirmware node to parse for device tree bindings (may be
+ *           NULL).
+ */
+struct regulator_config {
+	struct device *dev;
+	const struct regulator_init_data *init_data;
+	void *driver_data;
+	struct device_node *of_node;
+};
+
 /*
  * struct regulator_dev
  *
@@ -212,8 +234,7 @@ struct regulator_dev {
 
 struct regulator_dev *
 regulator_register(const struct regulator_desc *regulator_desc,
-	struct device *dev, const struct regulator_init_data *init_data,
-	void *driver_data, struct device_node *of_node);
+		   const struct regulator_config *config);
 void regulator_unregister(struct regulator_dev *rdev);
 
 int regulator_notifier_call_chain(struct regulator_dev *rdev,

commit 65f26846b90611742f3b407cc538a1cad33abde8
Author: Mark Brown <broonie@opensource.wolfsonmicro.com>
Date:   Tue Apr 3 20:46:53 2012 +0100

    regulator: core: Constify the regulator_desc passed in when registering
    
    Drivers should be able to declare their descriptors const and the framework
    shouldn't ever be modifying the desciptor. Make the parameter and the
    pointer in regulator_dev const to enforce this.
    
    Signed-off-by: Mark Brown <broonie@opensource.wolfsonmicro.com>

diff --git a/include/linux/regulator/driver.h b/include/linux/regulator/driver.h
index fa8b55b8191c..1dcdf00e0db2 100644
--- a/include/linux/regulator/driver.h
+++ b/include/linux/regulator/driver.h
@@ -184,7 +184,7 @@ struct regulator_desc {
  * no other direct access).
  */
 struct regulator_dev {
-	struct regulator_desc *desc;
+	const struct regulator_desc *desc;
 	int exclusive;
 	u32 use_count;
 	u32 open_count;
@@ -210,7 +210,8 @@ struct regulator_dev {
 	struct dentry *debugfs;
 };
 
-struct regulator_dev *regulator_register(struct regulator_desc *regulator_desc,
+struct regulator_dev *
+regulator_register(const struct regulator_desc *regulator_desc,
 	struct device *dev, const struct regulator_init_data *init_data,
 	void *driver_data, struct device_node *of_node);
 void regulator_unregister(struct regulator_dev *rdev);

commit 247514344492a0cf602317d2089bab1301922624
Author: Stephen Boyd <sboyd@codeaurora.org>
Date:   Mon Feb 20 22:50:42 2012 -0800

    regulator: Remove ifdefs for debugfs code
    
    If CONFIG_DEBUG_FS=y debugfs functions will never return an
    ERR_PTR. Instead they'll return NULL. The intent is to remove
    ifdefs in calling code.
    
    Update the code to reflect this. We gain an extra dentry pointer
    per struct regulator and struct regulator_dev but that should be
    ok because most distros have debugfs compiled in anyway.
    
    Signed-off-by: Stephen Boyd <sboyd@codeaurora.org>
    Signed-off-by: Mark Brown <broonie@opensource.wolfsonmicro.com>

diff --git a/include/linux/regulator/driver.h b/include/linux/regulator/driver.h
index aeaf3a73da2b..fa8b55b8191c 100644
--- a/include/linux/regulator/driver.h
+++ b/include/linux/regulator/driver.h
@@ -207,9 +207,7 @@ struct regulator_dev {
 
 	void *reg_data;		/* regulator_dev data */
 
-#ifdef CONFIG_DEBUG_FS
 	struct dentry *debugfs;
-#endif
 };
 
 struct regulator_dev *regulator_register(struct regulator_desc *regulator_desc,

commit fde297bb4d8075229b8985e9d4f96d32339a8e68
Author: Kim, Milo <Milo.Kim@ti.com>
Date:   Thu Feb 16 22:41:32 2012 -0800

    regulator: fix wrong header name in description
    
    The 'mode' is defined in consumer.h.
    
    * patch base version : linux-3.2.4
    
    Signed-off-by: Milo(Woogyom) Kim <milo.kim@ti.com>
    Signed-off-by: Mark Brown <broonie@opensource.wolfsonmicro.com>

diff --git a/include/linux/regulator/driver.h b/include/linux/regulator/driver.h
index 4214b9a9d1c9..aeaf3a73da2b 100644
--- a/include/linux/regulator/driver.h
+++ b/include/linux/regulator/driver.h
@@ -104,7 +104,7 @@ struct regulator_ops {
 	int (*disable) (struct regulator_dev *);
 	int (*is_enabled) (struct regulator_dev *);
 
-	/* get/set regulator operating mode (defined in regulator.h) */
+	/* get/set regulator operating mode (defined in consumer.h) */
 	int (*set_mode) (struct regulator_dev *, unsigned int mode);
 	unsigned int (*get_mode) (struct regulator_dev *);
 
@@ -135,7 +135,7 @@ struct regulator_ops {
 	int (*set_suspend_enable) (struct regulator_dev *);
 	int (*set_suspend_disable) (struct regulator_dev *);
 
-	/* set regulator suspend operating mode (defined in regulator.h) */
+	/* set regulator suspend operating mode (defined in consumer.h) */
 	int (*set_suspend_mode) (struct regulator_dev *, unsigned int mode);
 };
 

commit 69511a452e6dc6b74fe4f3671a51b1b44b9c57e3
Author: Rajendra Nayak <rnayak@ti.com>
Date:   Fri Nov 18 16:47:20 2011 +0530

    regulator: map consumer regulator based on device tree
    
    Device nodes in DT can associate themselves with one or more
    regulators/supply by providing a list of phandles (to regulator nodes)
    and corresponding supply names.
    
    For Example:
            devicenode: node@0x0 {
                    ...
                    ...
                    vmmc-supply = <&regulator1>;
                    vpll-supply = <&regulator2>;
            };
    
    The driver would then do a regulator_get(dev, "vmmc"); to get
    regulator1 and do a regulator_get(dev, "vpll"); to get
    regulator2.
    
    of_get_regulator() extracts the regulator node for a given
    device, based on the supply name.
    
    Use it to look up the regulator for a given consumer from device tree, during
    a regulator_get(). If not found fallback and lookup through
    the regulator_map_list instead.
    
    Also, since the regulator dt nodes can use the same binding to
    associate with a parent regulator/supply, allow the drivers to
    specify a supply_name, which can then be used to lookup dt
    to find the parent phandle.
    
    Signed-off-by: Rajendra Nayak <rnayak@ti.com>
    Acked-by: Grant Likely <grant.likely@secretlab.ca>
    Signed-off-by: Mark Brown <broonie@opensource.wolfsonmicro.com>

diff --git a/include/linux/regulator/driver.h b/include/linux/regulator/driver.h
index 8fbb6964bb7e..4214b9a9d1c9 100644
--- a/include/linux/regulator/driver.h
+++ b/include/linux/regulator/driver.h
@@ -154,6 +154,7 @@ enum regulator_type {
  * this type.
  *
  * @name: Identifying name for the regulator.
+ * @supply_name: Identifying the regulator supply
  * @id: Numerical identifier for the regulator.
  * @n_voltages: Number of selectors available for ops.list_voltage().
  * @ops: Regulator operations table.
@@ -163,6 +164,7 @@ enum regulator_type {
  */
 struct regulator_desc {
 	const char *name;
+	const char *supply_name;
 	int id;
 	unsigned n_voltages;
 	struct regulator_ops *ops;

commit 2c043bcbf287dc69848054d5c02c55c20f7a7bc5
Author: Rajendra Nayak <rnayak@ti.com>
Date:   Fri Nov 18 16:47:19 2011 +0530

    regulator: pass additional of_node to regulator_register()
    
    With device tree support for regulators, its needed that the
    regulator_dev->dev device has the right of_node attached.
    To be able to do this add an additional parameter to the
    regulator_register() api, wherein the dt-adapted driver can
    then pass this additional info onto the regulator core.
    
    Signed-off-by: Rajendra Nayak <rnayak@ti.com>
    Signed-off-by: Mark Brown <broonie@opensource.wolfsonmicro.com>

diff --git a/include/linux/regulator/driver.h b/include/linux/regulator/driver.h
index 52c89ae32f64..8fbb6964bb7e 100644
--- a/include/linux/regulator/driver.h
+++ b/include/linux/regulator/driver.h
@@ -212,7 +212,7 @@ struct regulator_dev {
 
 struct regulator_dev *regulator_register(struct regulator_desc *regulator_desc,
 	struct device *dev, const struct regulator_init_data *init_data,
-	void *driver_data);
+	void *driver_data, struct device_node *of_node);
 void regulator_unregister(struct regulator_dev *rdev);
 
 int regulator_notifier_call_chain(struct regulator_dev *rdev,

commit ced55d4ef7d6988bd0608423cf1e2225777f45cc
Author: Paul Gortmaker <paul.gortmaker@windriver.com>
Date:   Sun Jul 17 16:24:35 2011 -0400

    regulator: Fix implicit use of notifier.h by driver.h
    
    This was implicitly appearing by way of module.h -- but when
    we fix that, we'll get this:
    
    In file included from drivers/regulator/dummy.c:21:
    include/linux/regulator/driver.h:197: error: field 'notifier' has incomplete type
    make[3]: *** [drivers/regulator/dummy.o] Error 1
    
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>

diff --git a/include/linux/regulator/driver.h b/include/linux/regulator/driver.h
index 12a1aa04b720..52c89ae32f64 100644
--- a/include/linux/regulator/driver.h
+++ b/include/linux/regulator/driver.h
@@ -16,6 +16,7 @@
 #define __LINUX_REGULATOR_DRIVER_H_
 
 #include <linux/device.h>
+#include <linux/notifier.h>
 #include <linux/regulator/consumer.h>
 
 struct regulator_dev;

commit da07ecd93b196819dcec488b7ebec69a71f3819e
Author: Mark Brown <broonie@opensource.wolfsonmicro.com>
Date:   Sun Sep 11 09:53:50 2011 +0100

    regulator: Implement deferred disable support
    
    It is a reasonably common pattern for hardware to require some delay after
    being quiesced before the disable has finalised, especially in mixed signal
    devices. For example, an active discharge may be required to ensure that
    the circuit starts up again in a known state. Avoid having to implement
    such delays in the regulator API by providing regulator_deferred_disable()
    which will do a regulator_disable() a specified number of milliseconds
    after it is called.
    
    Due to the reference counting done on regulators a deferred disable can
    be cancelled by doing another regulator_enable().
    
    Signed-off-by: Mark Brown <broonie@opensource.wolfsonmicro.com>
    Acked-by: Liam Girdwood <lrg@ti.com>

diff --git a/include/linux/regulator/driver.h b/include/linux/regulator/driver.h
index 1a80bc77517d..12a1aa04b720 100644
--- a/include/linux/regulator/driver.h
+++ b/include/linux/regulator/driver.h
@@ -199,6 +199,9 @@ struct regulator_dev {
 	struct regulation_constraints *constraints;
 	struct regulator *supply;	/* for tree */
 
+	struct delayed_work disable_work;
+	int deferred_disables;
+
 	void *reg_data;		/* regulator_dev data */
 
 #ifdef CONFIG_DEBUG_FS

commit 3801b86aa482d26a8ae460f67fca29e016491a86
Author: Mark Brown <broonie@opensource.wolfsonmicro.com>
Date:   Thu Jun 9 16:22:22 2011 +0100

    regulator: Refactor supply implementation to work as regular consumers
    
    Currently the regulator supply implementation is somewhat complex and
    fragile as it doesn't look like standard consumers but is instead a
    parallel implementation. This causes issues with locking and reference
    counting.
    
    Move the implementation over to using standard consumers to address this.
    Rather than only notifying the supply on the first enable/disable we do so
    every time the regulator is enabled or disabled, simplifying locking as we
    don't need to hold a lock on the consumer we are about to enable.
    
    Signed-off-by: Mark Brown <broonie@opensource.wolfsonmicro.com>
    Signed-off-by: Liam Girdwood <lrg@slimlogic.co.uk>

diff --git a/include/linux/regulator/driver.h b/include/linux/regulator/driver.h
index 6c433b89c80d..1a80bc77517d 100644
--- a/include/linux/regulator/driver.h
+++ b/include/linux/regulator/driver.h
@@ -188,18 +188,16 @@ struct regulator_dev {
 
 	/* lists we belong to */
 	struct list_head list; /* list of all regulators */
-	struct list_head slist; /* list of supplied regulators */
 
 	/* lists we own */
 	struct list_head consumer_list; /* consumers we supply */
-	struct list_head supply_list; /* regulators we supply */
 
 	struct blocking_notifier_head notifier;
 	struct mutex mutex; /* consumer lock */
 	struct module *owner;
 	struct device dev;
 	struct regulation_constraints *constraints;
-	struct regulator_dev *supply;	/* for tree */
+	struct regulator *supply;	/* for tree */
 
 	void *reg_data;		/* regulator_dev data */
 

commit 77af1b2641faf45788a0d480db94082ebee931dc
Author: Linus Walleij <linus.walleij@linaro.org>
Date:   Thu Mar 17 13:24:36 2011 +0100

    regulator: add set_voltage_time_sel infrastructure
    
    This makes it possible to set the stabilization time for voltage
    regulators in the same manner as enable_time(). The interface
    only supports regulators that implements fixed selectors.
    
    Cc: Bengt Jonsson <bengt.g.jonsson@stericsson.com>
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>
    Acked-by: Mark Brown <broonie@opensource.wolfsonmicro.com>
    Signed-off-by: Liam Girdwood <lrg@slimlogic.co.uk>

diff --git a/include/linux/regulator/driver.h b/include/linux/regulator/driver.h
index b8ed16a33c47..6c433b89c80d 100644
--- a/include/linux/regulator/driver.h
+++ b/include/linux/regulator/driver.h
@@ -63,7 +63,11 @@ enum regulator_status {
  *                    when running with the specified parameters.
  *
  * @enable_time: Time taken for the regulator voltage output voltage to
- *               stabalise after being enabled, in microseconds.
+ *               stabilise after being enabled, in microseconds.
+ * @set_voltage_time_sel: Time taken for the regulator voltage output voltage
+ *               to stabilise after being set to a new value, in microseconds.
+ *               The function provides the from and to voltage selector, the
+ *               function should return the worst case.
  *
  * @set_suspend_voltage: Set the voltage for the regulator when the system
  *                       is suspended.
@@ -103,8 +107,11 @@ struct regulator_ops {
 	int (*set_mode) (struct regulator_dev *, unsigned int mode);
 	unsigned int (*get_mode) (struct regulator_dev *);
 
-	/* Time taken to enable the regulator */
+	/* Time taken to enable or set voltage on the regulator */
 	int (*enable_time) (struct regulator_dev *);
+	int (*set_voltage_time_sel) (struct regulator_dev *,
+				     unsigned int old_selector,
+				     unsigned int new_selector);
 
 	/* report regulator status ... most other accessors report
 	 * control inputs, this reports results of combining inputs

commit 1130e5b3ff4a7f3f54a48d46e9d0d81b47765bd8
Author: Mark Brown <broonie@opensource.wolfsonmicro.com>
Date:   Tue Dec 21 23:49:31 2010 +0000

    regulator: Add initial per-regulator debugfs support
    
    We only expose the use and open counts to userspace, providing a tiny
    bit of insight into what the API is up to.
    
    Signed-off-by: Mark Brown <broonie@opensource.wolfsonmicro.com>
    Signed-off-by: Liam Girdwood <lrg@slimlogic.co.uk>

diff --git a/include/linux/regulator/driver.h b/include/linux/regulator/driver.h
index 975ae06cb634..b8ed16a33c47 100644
--- a/include/linux/regulator/driver.h
+++ b/include/linux/regulator/driver.h
@@ -175,9 +175,9 @@ struct regulator_desc {
  */
 struct regulator_dev {
 	struct regulator_desc *desc;
-	int use_count;
-	int open_count;
 	int exclusive;
+	u32 use_count;
+	u32 open_count;
 
 	/* lists we belong to */
 	struct list_head list; /* list of all regulators */
@@ -195,6 +195,10 @@ struct regulator_dev {
 	struct regulator_dev *supply;	/* for tree */
 
 	void *reg_data;		/* regulator_dev data */
+
+#ifdef CONFIG_DEBUG_FS
+	struct dentry *debugfs;
+#endif
 };
 
 struct regulator_dev *regulator_register(struct regulator_desc *regulator_desc,

commit e8eef82b2c652d031bee9dff9762325672f5a1e0
Author: Mark Brown <broonie@opensource.wolfsonmicro.com>
Date:   Sun Dec 12 14:36:17 2010 +0000

    regulator: Provide a selector based set_voltage_sel() operation
    
    Many regulator drivers implement voltage setting by looping through a
    table of possible values, normally because the set of available voltages
    can't be mapped onto selectors with simple calcuation. Factor out these
    loops by providing a variant of set_voltage() which takes a selector rather
    than a voltage range as an argument and implementing a loop through the
    available selectors in the core.
    
    This is not going to be suitable for use with all devices as when the
    regulator voltage can be mapped onto selector values with a simple
    calculation the linear scan through the available values will be more
    expensive than just doing the calculation, especially for regulators
    that provide fine grained voltage control.
    
    Signed-off-by: Mark Brown <broonie@opensource.wolfsonmicro.com>
    Signed-off-by: Liam Girdwood <lrg@slimlogic.co.uk>

diff --git a/include/linux/regulator/driver.h b/include/linux/regulator/driver.h
index bf3e653591b9..975ae06cb634 100644
--- a/include/linux/regulator/driver.h
+++ b/include/linux/regulator/driver.h
@@ -42,6 +42,8 @@ enum regulator_status {
  *
  * @set_voltage: Set the voltage for the regulator within the range specified.
  *               The driver should select the voltage closest to min_uV.
+ * @set_voltage_sel: Set the voltage for the regulator using the specified
+ *                   selector.
  * @get_voltage: Return the currently configured voltage for the regulator.
  * @get_voltage_sel: Return the currently configured voltage selector for the
  *                   regulator.
@@ -83,6 +85,7 @@ struct regulator_ops {
 	/* get/set regulator voltage */
 	int (*set_voltage) (struct regulator_dev *, int min_uV, int max_uV,
 			    unsigned *selector);
+	int (*set_voltage_sel) (struct regulator_dev *, unsigned selector);
 	int (*get_voltage) (struct regulator_dev *);
 	int (*get_voltage_sel) (struct regulator_dev *);
 

commit 476c2d83c7ffb2429b2a504fbdb4326fc8a9d0e8
Author: Mark Brown <broonie@opensource.wolfsonmicro.com>
Date:   Fri Dec 10 17:28:07 2010 +0000

    regulator: Allow drivers to report voltages as selectors
    
    Since drivers already have to provide an API for translating selectors
    into voltages they may as well just report the selector values directly
    to the core API rather than implement the lookup themselves. The old
    interface is left in place for now, but may be removed in future.
    
    Signed-off-by: Mark Brown <broonie@opensource.wolfsonmicro.com>
    Signed-off-by: Liam Girdwood <lrg@slimlogic.co.uk>

diff --git a/include/linux/regulator/driver.h b/include/linux/regulator/driver.h
index cce575359712..bf3e653591b9 100644
--- a/include/linux/regulator/driver.h
+++ b/include/linux/regulator/driver.h
@@ -43,6 +43,8 @@ enum regulator_status {
  * @set_voltage: Set the voltage for the regulator within the range specified.
  *               The driver should select the voltage closest to min_uV.
  * @get_voltage: Return the currently configured voltage for the regulator.
+ * @get_voltage_sel: Return the currently configured voltage selector for the
+ *                   regulator.
  * @list_voltage: Return one of the supported voltages, in microvolts; zero
  *	if the selector indicates a voltage that is unusable on this system;
  *	or negative errno.  Selectors range from zero to one less than
@@ -82,6 +84,7 @@ struct regulator_ops {
 	int (*set_voltage) (struct regulator_dev *, int min_uV, int max_uV,
 			    unsigned *selector);
 	int (*get_voltage) (struct regulator_dev *);
+	int (*get_voltage_sel) (struct regulator_dev *);
 
 	/* get/set regulator current  */
 	int (*set_current_limit) (struct regulator_dev *,

commit f8c12fe329c8da9f50d8b2b1183eeaa4d587e747
Author: Mark Brown <broonie@opensource.wolfsonmicro.com>
Date:   Mon Nov 29 15:55:17 2010 +0000

    regulator: Copy constraints from regulators when initialising them
    
    Currently the regulator API uses the constraints structure passed in to
    the core throughout the lifetime of the object. This means that it is not
    possible to mark the constraints as __initdata so if the kernel supports
    many boards the constraints for all of them are kept around throughout the
    lifetime of the system, consuming memory needlessly. By copying constraints
    that are actually used we allow the use of __initdata, saving memory when
    multiple boards are supported.
    
    This also means the constraints can be const.
    
    Signed-off-by: Mark Brown <broonie@opensource.wolfsonmicro.com>
    Signed-off-by: Liam Girdwood <lrg@slimlogic.co.uk>

diff --git a/include/linux/regulator/driver.h b/include/linux/regulator/driver.h
index 4275cd475eac..cce575359712 100644
--- a/include/linux/regulator/driver.h
+++ b/include/linux/regulator/driver.h
@@ -192,7 +192,7 @@ struct regulator_dev {
 };
 
 struct regulator_dev *regulator_register(struct regulator_desc *regulator_desc,
-	struct device *dev, struct regulator_init_data *init_data,
+	struct device *dev, const struct regulator_init_data *init_data,
 	void *driver_data);
 void regulator_unregister(struct regulator_dev *rdev);
 

commit 3a93f2a9f4d8f73d74c0e552feb68a10f778a219
Author: Mark Brown <broonie@opensource.wolfsonmicro.com>
Date:   Wed Nov 10 14:38:29 2010 +0000

    regulator: Report actual configured voltage to set_voltage()
    
    Change the interface used by set_voltage() to report the selected value
    to the regulator core in terms of a selector used by list_voltage().
    This allows the regulator core to know the voltage that was chosen
    without having to do an explict get_voltage(), which would be much more
    expensive as it will generally access hardware.
    
    Signed-off-by: Mark Brown <broonie@opensource.wolfsonmicro.com>
    Signed-off-by: Liam Girdwood <lrg@slimlogic.co.uk>

diff --git a/include/linux/regulator/driver.h b/include/linux/regulator/driver.h
index 592cd7c642c2..4275cd475eac 100644
--- a/include/linux/regulator/driver.h
+++ b/include/linux/regulator/driver.h
@@ -79,7 +79,8 @@ struct regulator_ops {
 	int (*list_voltage) (struct regulator_dev *, unsigned selector);
 
 	/* get/set regulator voltage */
-	int (*set_voltage) (struct regulator_dev *, int min_uV, int max_uV);
+	int (*set_voltage) (struct regulator_dev *, int min_uV, int max_uV,
+			    unsigned *selector);
 	int (*get_voltage) (struct regulator_dev *);
 
 	/* get/set regulator current  */

commit 31aae2beeb3d601d556b6a8c39085940ad1e9f42
Author: Mark Brown <broonie@opensource.wolfsonmicro.com>
Date:   Mon Dec 21 12:21:52 2009 +0000

    regulator: Allow regulators to specify the time taken to ramp on enable
    
    Regulators may sometimes take longer to enable than the control operation
    used to do so, either because the regulator has ramp rate control used to
    limit inrush current or because the control operation is very fast (GPIO
    being the most common example of this).  In order to ensure that consumers
    do not rely on the regulator before it is enabled provide an enable_time()
    operation and have the core delay for that time before returning to the
    caller.
    
    This is implemented as a function since the ramp rate may be specified in
    voltage per unit time and therefore the time depend on the configuration.
    In future it would be desirable to allow the bulk operations to run the
    delays for multiple enables in parallel but this is not currently supported.
    
    Signed-off-by: Mark Brown <broonie@opensource.wolfsonmicro.com>

diff --git a/include/linux/regulator/driver.h b/include/linux/regulator/driver.h
index 31f2055eae28..592cd7c642c2 100644
--- a/include/linux/regulator/driver.h
+++ b/include/linux/regulator/driver.h
@@ -58,6 +58,9 @@ enum regulator_status {
  * @get_optimum_mode: Get the most efficient operating mode for the regulator
  *                    when running with the specified parameters.
  *
+ * @enable_time: Time taken for the regulator voltage output voltage to
+ *               stabalise after being enabled, in microseconds.
+ *
  * @set_suspend_voltage: Set the voltage for the regulator when the system
  *                       is suspended.
  * @set_suspend_enable: Mark the regulator as enabled when the system is
@@ -93,6 +96,9 @@ struct regulator_ops {
 	int (*set_mode) (struct regulator_dev *, unsigned int mode);
 	unsigned int (*get_mode) (struct regulator_dev *);
 
+	/* Time taken to enable the regulator */
+	int (*enable_time) (struct regulator_dev *);
+
 	/* report regulator status ... most other accessors report
 	 * control inputs, this reports results of combining inputs
 	 * from Linux (and other sources) with the actual load.

commit d87b969d15a084503870da598c97278fb4877753
Author: Wolfram Sang <w.sang@pengutronix.de>
Date:   Fri Sep 18 22:44:46 2009 +0200

    regulator/driver: be more specific in nanodoc for is_enabled
    
    Document the possibility that is_enabled may also return with negative
    errorcodes.
    
    Signed-off-by: Wolfram Sang <w.sang@pengutronix.de>
    Acked-by: Mark Brown <broonie@opensource.wolfsonmicro.com>
    Signed-off-by: Liam Girdwood <lrg@slimlogic.co.uk>

diff --git a/include/linux/regulator/driver.h b/include/linux/regulator/driver.h
index 73c9cd6cda7d..31f2055eae28 100644
--- a/include/linux/regulator/driver.h
+++ b/include/linux/regulator/driver.h
@@ -37,7 +37,8 @@ enum regulator_status {
  *
  * @enable: Configure the regulator as enabled.
  * @disable: Configure the regulator as disabled.
- * @is_enabled: Return 1 if the regulator is enabled, 0 otherwise.
+ * @is_enabled: Return 1 if the regulator is enabled, 0 if not.
+ *		May also return negative errno.
  *
  * @set_voltage: Set the voltage for the regulator within the range specified.
  *               The driver should select the voltage closest to min_uV.

commit 5ffbd136e6c51c8d1eec7a4a0c5d2180c81aea30
Author: Mark Brown <broonie@opensource.wolfsonmicro.com>
Date:   Tue Jul 21 16:00:23 2009 +0100

    regulator: Add regulator_get_exclusive() API
    
    Some consumers require complete control of the regulator and can't
    tolerate sharing it with other consumers, most commonly because they need
    to have the regulator actually disabled so can't have other consumers
    forcing it on. This new regulator_get_exclusive() API call allows these
    consumers to explicitly request this, documenting the assumptions that
    they are making.
    
    In order to simplify coding of such consumers the use count for regulators
    they request is forced to match the enabled state of the regulator when
    it is requested. This is not possible for consumers which can share
    regulators due to the need to keep track of the ownership of use counts.
    
    A new API call is used rather than an additional argument to the existing
    regulator_get() in order to avoid merge headaches with driver code in
    other trees.
    
    Signed-off-by: Mark Brown <broonie@opensource.wolfsonmicro.com>
    Signed-off-by: Liam Girdwood <lrg@slimlogic.co.uk>

diff --git a/include/linux/regulator/driver.h b/include/linux/regulator/driver.h
index ce1be708ca16..73c9cd6cda7d 100644
--- a/include/linux/regulator/driver.h
+++ b/include/linux/regulator/driver.h
@@ -162,6 +162,8 @@ struct regulator_desc {
 struct regulator_dev {
 	struct regulator_desc *desc;
 	int use_count;
+	int open_count;
+	int exclusive;
 
 	/* lists we belong to */
 	struct list_head list; /* list of all regulators */

commit be721979dd6b335e4ab6f83abb5cc11c33662aa8
Author: Mark Brown <broonie@opensource.wolfsonmicro.com>
Date:   Tue Aug 4 20:09:52 2009 +0200

    regulator: Provide mode to status conversion function
    
    This is useful for implementing get_status() in terms of get_mode().
    
    Signed-off-by: Mark Brown <broonie@opensource.wolfsonmicro.com>
    Signed-off-by: Samuel Ortiz <sameo@linux.intel.com>

diff --git a/include/linux/regulator/driver.h b/include/linux/regulator/driver.h
index 225f733e7533..ce1be708ca16 100644
--- a/include/linux/regulator/driver.h
+++ b/include/linux/regulator/driver.h
@@ -193,6 +193,8 @@ void *rdev_get_drvdata(struct regulator_dev *rdev);
 struct device *rdev_get_dev(struct regulator_dev *rdev);
 int rdev_get_id(struct regulator_dev *rdev);
 
+int regulator_mode_to_status(unsigned int);
+
 void *regulator_get_init_drvdata(struct regulator_init_data *reg_init_data);
 
 #endif

commit 9f6532519feab921856f41b30a2397ee25f4de49
Author: Randy Dunlap <randy.dunlap@oracle.com>
Date:   Fri Apr 3 21:31:30 2009 -0700

    regulator: fix header file missing kernel-doc
    
    Add regulator header file missing kernel-doc:
    
    Warning(include/linux/regulator/driver.h:117): No description found for parameter 'set_mode'
    
    Signed-off-by: Randy Dunlap <randy.dunlap@oracle.com>
    cc:     Liam Girdwood <lrg@slimlogic.co.uk>
    cc:     Mark Brown <broonie@opensource.wolfsonmicro.com>
    Signed-off-by: Liam Girdwood <lrg@slimlogic.co.uk>

diff --git a/include/linux/regulator/driver.h b/include/linux/regulator/driver.h
index 4848d8dacd90..225f733e7533 100644
--- a/include/linux/regulator/driver.h
+++ b/include/linux/regulator/driver.h
@@ -50,6 +50,7 @@ enum regulator_status {
  * @set_current_limit: Configure a limit for a current-limited regulator.
  * @get_current_limit: Get the configured limit for a current-limited regulator.
  *
+ * @set_mode: Set the configured operating mode for the regulator.
  * @get_mode: Get the configured operating mode for the regulator.
  * @get_status: Return actual (not as-configured) status of regulator, as a
  *	REGULATOR_STATUS value (or negative errno)

commit 3b2a6061afe6fcc44437cd5ec641b0aeb2825ee3
Author: David Brownell <david-b@pacbell.net>
Date:   Thu Feb 26 13:28:41 2009 -0800

    regulator: get_status() grows kerneldoc
    
    Add kerneldoc for the new get_status() message.  Fix the existing
    kerneldoc for that struct in two ways:
    
     (a) Syntax, making sure parameter descriptions immediately
         follow the one-line struct description and that the first
         blank lines is before any more expansive description;
     (b) Presentation for a few points, to highlight the fact that
         the previous "get" methods exist only to report the current
         configuration, not to display actual status.
    
    Signed-off-by: David Brownell <dbrownell@users.sourceforge.net>
    Signed-off-by: Liam Girdwood <lrg@slimlogic.co.uk>

diff --git a/include/linux/regulator/driver.h b/include/linux/regulator/driver.h
index 2255468d456f..4848d8dacd90 100644
--- a/include/linux/regulator/driver.h
+++ b/include/linux/regulator/driver.h
@@ -35,11 +35,8 @@ enum regulator_status {
 /**
  * struct regulator_ops - regulator operations.
  *
- * This struct describes regulator operations which can be implemented by
- * regulator chip drivers.
- *
- * @enable: Enable the regulator.
- * @disable: Disable the regulator.
+ * @enable: Configure the regulator as enabled.
+ * @disable: Configure the regulator as disabled.
  * @is_enabled: Return 1 if the regulator is enabled, 0 otherwise.
  *
  * @set_voltage: Set the voltage for the regulator within the range specified.
@@ -51,11 +48,11 @@ enum regulator_status {
  *	regulator_desc.n_voltages.  Voltages may be reported in any order.
  *
  * @set_current_limit: Configure a limit for a current-limited regulator.
- * @get_current_limit: Get the limit for a current-limited regulator.
+ * @get_current_limit: Get the configured limit for a current-limited regulator.
  *
- * @set_mode: Set the operating mode for the regulator.
- * @get_mode: Get the current operating mode for the regulator.
- * @get_status: Report the regulator status.
+ * @get_mode: Get the configured operating mode for the regulator.
+ * @get_status: Return actual (not as-configured) status of regulator, as a
+ *	REGULATOR_STATUS value (or negative errno)
  * @get_optimum_mode: Get the most efficient operating mode for the regulator
  *                    when running with the specified parameters.
  *
@@ -67,6 +64,9 @@ enum regulator_status {
  *                       suspended.
  * @set_suspend_mode: Set the operating mode for the regulator when the
  *                    system is suspended.
+ *
+ * This struct describes regulator operations which can be implemented by
+ * regulator chip drivers.
  */
 struct regulator_ops {
 
@@ -94,6 +94,7 @@ struct regulator_ops {
 	/* report regulator status ... most other accessors report
 	 * control inputs, this reports results of combining inputs
 	 * from Linux (and other sources) with the actual load.
+	 * returns REGULATOR_STATUS_* or negative errno.
 	 */
 	int (*get_status)(struct regulator_dev *);
 

commit 4367cfdc7c657ad8a797f51b9ffd3c64b31910e7
Author: David Brownell <dbrownell@users.sourceforge.net>
Date:   Thu Feb 26 11:48:36 2009 -0800

    regulator: enumerate voltages (v2)
    
    Add a basic mechanism for regulators to report the discrete
    voltages they support:  list_voltage() enumerates them using
    selectors numbered from 0 to an upper bound.
    
    Use those methods to force machine-level constraints into bounds.
    (Example:  regulator supports 1.8V, 2.4V, 2.6V, 3.3V, and board
    constraints for that rail are 2.0V to 3.6V ... so the range of
    voltages is then 2.4V to 3.3V on this board.)
    
    Export those voltages to the regulator consumer interface, so for
    example regulator hooked up to an MMC/SD/SDIO slot can report the
    actual voltage options available to cards connected there.
    
    Signed-off-by: David Brownell <dbrownell@users.sourceforge.net>
    Acked-by: Mark Brown <broonie@opensource.wolfsonmicro.com>
    Signed-off-by: Liam Girdwood <lrg@slimlogic.co.uk>

diff --git a/include/linux/regulator/driver.h b/include/linux/regulator/driver.h
index 0cf37bc85c41..2255468d456f 100644
--- a/include/linux/regulator/driver.h
+++ b/include/linux/regulator/driver.h
@@ -45,6 +45,10 @@ enum regulator_status {
  * @set_voltage: Set the voltage for the regulator within the range specified.
  *               The driver should select the voltage closest to min_uV.
  * @get_voltage: Return the currently configured voltage for the regulator.
+ * @list_voltage: Return one of the supported voltages, in microvolts; zero
+ *	if the selector indicates a voltage that is unusable on this system;
+ *	or negative errno.  Selectors range from zero to one less than
+ *	regulator_desc.n_voltages.  Voltages may be reported in any order.
  *
  * @set_current_limit: Configure a limit for a current-limited regulator.
  * @get_current_limit: Get the limit for a current-limited regulator.
@@ -66,6 +70,9 @@ enum regulator_status {
  */
 struct regulator_ops {
 
+	/* enumerate supported voltages */
+	int (*list_voltage) (struct regulator_dev *, unsigned selector);
+
 	/* get/set regulator voltage */
 	int (*set_voltage) (struct regulator_dev *, int min_uV, int max_uV);
 	int (*get_voltage) (struct regulator_dev *);
@@ -124,6 +131,7 @@ enum regulator_type {
  *
  * @name: Identifying name for the regulator.
  * @id: Numerical identifier for the regulator.
+ * @n_voltages: Number of selectors available for ops.list_voltage().
  * @ops: Regulator operations table.
  * @irq: Interrupt number for the regulator.
  * @type: Indicates if the regulator is a voltage or current regulator.
@@ -132,6 +140,7 @@ enum regulator_type {
 struct regulator_desc {
 	const char *name;
 	int id;
+	unsigned n_voltages;
 	struct regulator_ops *ops;
 	int irq;
 	enum regulator_type type;

commit 1dd68f01886a2d5cabbbe90b86e82f70917de89c
Author: Liam Girdwood <lrg@slimlogic.co.uk>
Date:   Mon Feb 2 21:43:31 2009 +0000

    regulator: email - update email address and regulator webpage.
    
    Remove deceased email address and update to new address. Also update
    website details in MAINTAINERS with correct page.
    
    Signed-off-by: Liam Girdwood <lrg@slimlogic.co.uk>

diff --git a/include/linux/regulator/driver.h b/include/linux/regulator/driver.h
index eb8773b05ac3..0cf37bc85c41 100644
--- a/include/linux/regulator/driver.h
+++ b/include/linux/regulator/driver.h
@@ -3,7 +3,7 @@
  *
  * Copyright (C) 2007, 2008 Wolfson Microelectronics PLC.
  *
- * Author: Liam Girdwood <lg@opensource.wolfsonmicro.com>
+ * Author: Liam Girdwood <lrg@slimlogic.co.uk>
  *
  * This program is free software; you can redistribute it and/or modify
  * it under the terms of the GNU General Public License version 2 as

commit 90ca563b1030bece8a4f15a910e39a46f059ff48
Author: Randy Dunlap <randy.dunlap@oracle.com>
Date:   Tue Jan 20 16:29:05 2009 -0800

    regulator: fix header file missing kernel-doc
    
    Fix regulator/driver.h missing kernel-doc:
    
    Warning(linux-next-20090120//include/linux/regulator/driver.h:108): No description found for parameter 'get_status'
    
    Signed-off-by: Randy Dunlap <randy.dunlap@oracle.com>
    cc: Liam Girdwood <lrg@slimlogic.co.uk>
    cc: Mark Brown <broonie@opensource.wolfsonmicro.com>
    Signed-off-by: Liam Girdwood <lrg@slimlogic.co.uk>

diff --git a/include/linux/regulator/driver.h b/include/linux/regulator/driver.h
index c263e36e564e..eb8773b05ac3 100644
--- a/include/linux/regulator/driver.h
+++ b/include/linux/regulator/driver.h
@@ -51,6 +51,7 @@ enum regulator_status {
  *
  * @set_mode: Set the operating mode for the regulator.
  * @get_mode: Get the current operating mode for the regulator.
+ * @get_status: Report the regulator status.
  * @get_optimum_mode: Get the most efficient operating mode for the regulator
  *                    when running with the specified parameters.
  *

commit 1fa9ad52b07811ebf258f3f6907de8dbf020ec2d
Author: Mark Brown <broonie@opensource.wolfsonmicro.com>
Date:   Wed Jan 21 14:08:40 2009 +0000

    regulator: Hoist struct regulator_dev out of core to fix notifiers
    
    Commit 872ed3fe176833f7d43748eb88010da4bbd2f983 caused regulator drivers
    to take the struct regulator_dev lock themselves which requires that the
    struct be visible to them. Band aid this by making the struct visible.
    
    Signed-off-by: Mark Brown <broonie@opensource.wolfsonmicro.com>
    Signed-off-by: Liam Girdwood <lrg@slimlogic.co.uk>

diff --git a/include/linux/regulator/driver.h b/include/linux/regulator/driver.h
index 2254ad93b784..c263e36e564e 100644
--- a/include/linux/regulator/driver.h
+++ b/include/linux/regulator/driver.h
@@ -137,6 +137,38 @@ struct regulator_desc {
 	struct module *owner;
 };
 
+/*
+ * struct regulator_dev
+ *
+ * Voltage / Current regulator class device. One for each
+ * regulator.
+ *
+ * This should *not* be used directly by anything except the regulator
+ * core and notification injection (which should take the mutex and do
+ * no other direct access).
+ */
+struct regulator_dev {
+	struct regulator_desc *desc;
+	int use_count;
+
+	/* lists we belong to */
+	struct list_head list; /* list of all regulators */
+	struct list_head slist; /* list of supplied regulators */
+
+	/* lists we own */
+	struct list_head consumer_list; /* consumers we supply */
+	struct list_head supply_list; /* regulators we supply */
+
+	struct blocking_notifier_head notifier;
+	struct mutex mutex; /* consumer lock */
+	struct module *owner;
+	struct device dev;
+	struct regulation_constraints *constraints;
+	struct regulator_dev *supply;	/* for tree */
+
+	void *reg_data;		/* regulator_dev data */
+};
+
 struct regulator_dev *regulator_register(struct regulator_desc *regulator_desc,
 	struct device *dev, struct regulator_init_data *init_data,
 	void *driver_data);

commit 0527100fd11d9710c7e153d791da78824b7b46fa
Author: Mark Brown <broonie@opensource.wolfsonmicro.com>
Date:   Mon Jan 19 13:37:02 2009 +0000

    regulator: Pass regulator init data as explict argument when registering
    
    Rather than having the regulator init data read from the platform_data
    member of the struct device that is registered for the regulator make
    the init data an explict argument passed in when registering. This
    allows drivers to use the platform data for their own purposes if they
    wish.
    
    Signed-off-by: Mark Brown <broonie@opensource.wolfsonmicro.com>
    Signed-off-by: Liam Girdwood <lrg@slimlogic.co.uk>

diff --git a/include/linux/regulator/driver.h b/include/linux/regulator/driver.h
index 6e957aae7629..2254ad93b784 100644
--- a/include/linux/regulator/driver.h
+++ b/include/linux/regulator/driver.h
@@ -138,7 +138,8 @@ struct regulator_desc {
 };
 
 struct regulator_dev *regulator_register(struct regulator_desc *regulator_desc,
-	struct device *dev, void *driver_data);
+	struct device *dev, struct regulator_init_data *init_data,
+	void *driver_data);
 void regulator_unregister(struct regulator_dev *rdev);
 
 int regulator_notifier_call_chain(struct regulator_dev *rdev,

commit 853116a10544206b6b2cf42ebc9d78fba2668888
Author: David Brownell <dbrownell@users.sourceforge.net>
Date:   Wed Jan 14 23:03:17 2009 -0800

    regulator: add get_status()
    
    Based on previous LKML discussions:
    
     * Update docs for regulator sysfs class attributes to highlight
       the fact that all current attributes are intended to be control
       inputs, including notably "state" and "opmode" which previously
       implied otherwise.
    
     * Define a new regulator driver get_status() method, which is the
       first method reporting regulator outputs instead of inputs.
       It can report on/off and error status; or instead of simply
       "on", report the actual operating mode.
    
    For the moment, this is a sysfs-only interface, not accessible to
    regulator clients.  Such clients can use the current notification
    interfaces to detect errors, if the regulator reports them.
    
    Signed-off-by: David Brownell <dbrownell@users.sourceforge.net>
    Signed-off-by: Liam Girdwood <lrg@slimlogic.co.uk>

diff --git a/include/linux/regulator/driver.h b/include/linux/regulator/driver.h
index 2dae05705f13..6e957aae7629 100644
--- a/include/linux/regulator/driver.h
+++ b/include/linux/regulator/driver.h
@@ -21,6 +21,17 @@
 struct regulator_dev;
 struct regulator_init_data;
 
+enum regulator_status {
+	REGULATOR_STATUS_OFF,
+	REGULATOR_STATUS_ON,
+	REGULATOR_STATUS_ERROR,
+	/* fast/normal/idle/standby are flavors of "on" */
+	REGULATOR_STATUS_FAST,
+	REGULATOR_STATUS_NORMAL,
+	REGULATOR_STATUS_IDLE,
+	REGULATOR_STATUS_STANDBY,
+};
+
 /**
  * struct regulator_ops - regulator operations.
  *
@@ -72,6 +83,12 @@ struct regulator_ops {
 	int (*set_mode) (struct regulator_dev *, unsigned int mode);
 	unsigned int (*get_mode) (struct regulator_dev *);
 
+	/* report regulator status ... most other accessors report
+	 * control inputs, this reports results of combining inputs
+	 * from Linux (and other sources) with the actual load.
+	 */
+	int (*get_status)(struct regulator_dev *);
+
 	/* get most efficient regulator operating mode for load */
 	unsigned int (*get_optimum_mode) (struct regulator_dev *, int input_uV,
 					  int output_uV, int load_uA);

commit 0ba4887c6329043d6cee5b5b477cfe50c2b57674
Author: Randy Dunlap <randy.dunlap@oracle.com>
Date:   Thu Jan 8 11:50:23 2009 -0800

    regulator: fix kernel-doc warnings
    
    Fix kernel-doc warnings in regulator/driver.h:
    
    Warning(linux-next-20090108//include/linux/regulator/driver.h:95): Excess struct/union/enum/typedef member 'set_current' description in 'regulator_ops'
    Warning(linux-next-20090108//include/linux/regulator/driver.h:95): Excess struct/union/enum/typedef member 'get_current' description in 'regulator_ops'
    Warning(linux-next-20090108//include/linux/regulator/driver.h:124): No description found for parameter 'irq'
    
    Signed-off-by: Randy Dunlap <randy.dunlap@oracle.com>
    cc: Liam Girdwood <lrg@slimlogic.co.uk>
    cc: Mark Brown <broonie@opensource.wolfsonmicro.com>
    Signed-off-by: Liam Girdwood <lrg@slimlogic.co.uk>

diff --git a/include/linux/regulator/driver.h b/include/linux/regulator/driver.h
index 84c3737c2d26..2dae05705f13 100644
--- a/include/linux/regulator/driver.h
+++ b/include/linux/regulator/driver.h
@@ -29,16 +29,12 @@ struct regulator_init_data;
  *
  * @enable: Enable the regulator.
  * @disable: Disable the regulator.
- * @is_enabled: Return 1 if the reguator is enabled, 0 otherwise.
+ * @is_enabled: Return 1 if the regulator is enabled, 0 otherwise.
  *
  * @set_voltage: Set the voltage for the regulator within the range specified.
  *               The driver should select the voltage closest to min_uV.
  * @get_voltage: Return the currently configured voltage for the regulator.
  *
- * @set_current: Set the current for the regulator within the range specified.
- *               The driver should select the current closest to min_uA.
- * @get_current: Return the currently configured current for the regulator.
- *
  * @set_current_limit: Configure a limit for a current-limited regulator.
  * @get_current_limit: Get the limit for a current-limited regulator.
  *
@@ -111,6 +107,7 @@ enum regulator_type {
  * @name: Identifying name for the regulator.
  * @id: Numerical identifier for the regulator.
  * @ops: Regulator operations table.
+ * @irq: Interrupt number for the regulator.
  * @type: Indicates if the regulator is a voltage or current regulator.
  * @owner: Module providing the regulator, used for refcounting.
  */

commit c8e7e4640facbe99d10a6e262523b25be129b9b9
Author: Mark Brown <broonie@opensource.wolfsonmicro.com>
Date:   Wed Dec 31 12:52:42 2008 +0000

    regulator: Add missing kerneldoc
    
    This is only the documentation that the kerneldoc system warns about.
    
    Signed-off-by: Mark Brown <broonie@opensource.wolfsonmicro.com>
    Signed-off-by: Liam Girdwood <lrg@slimlogic.co.uk>

diff --git a/include/linux/regulator/driver.h b/include/linux/regulator/driver.h
index e37d80561985..84c3737c2d26 100644
--- a/include/linux/regulator/driver.h
+++ b/include/linux/regulator/driver.h
@@ -24,7 +24,37 @@ struct regulator_init_data;
 /**
  * struct regulator_ops - regulator operations.
  *
- * This struct describes regulator operations.
+ * This struct describes regulator operations which can be implemented by
+ * regulator chip drivers.
+ *
+ * @enable: Enable the regulator.
+ * @disable: Disable the regulator.
+ * @is_enabled: Return 1 if the reguator is enabled, 0 otherwise.
+ *
+ * @set_voltage: Set the voltage for the regulator within the range specified.
+ *               The driver should select the voltage closest to min_uV.
+ * @get_voltage: Return the currently configured voltage for the regulator.
+ *
+ * @set_current: Set the current for the regulator within the range specified.
+ *               The driver should select the current closest to min_uA.
+ * @get_current: Return the currently configured current for the regulator.
+ *
+ * @set_current_limit: Configure a limit for a current-limited regulator.
+ * @get_current_limit: Get the limit for a current-limited regulator.
+ *
+ * @set_mode: Set the operating mode for the regulator.
+ * @get_mode: Get the current operating mode for the regulator.
+ * @get_optimum_mode: Get the most efficient operating mode for the regulator
+ *                    when running with the specified parameters.
+ *
+ * @set_suspend_voltage: Set the voltage for the regulator when the system
+ *                       is suspended.
+ * @set_suspend_enable: Mark the regulator as enabled when the system is
+ *                      suspended.
+ * @set_suspend_disable: Mark the regulator as disabled when the system is
+ *                       suspended.
+ * @set_suspend_mode: Set the operating mode for the regulator when the
+ *                    system is suspended.
  */
 struct regulator_ops {
 
@@ -75,6 +105,14 @@ enum regulator_type {
 /**
  * struct regulator_desc - Regulator descriptor
  *
+ * Each regulator registered with the core is described with a structure of
+ * this type.
+ *
+ * @name: Identifying name for the regulator.
+ * @id: Numerical identifier for the regulator.
+ * @ops: Regulator operations table.
+ * @type: Indicates if the regulator is a voltage or current regulator.
+ * @owner: Module providing the regulator, used for refcounting.
  */
 struct regulator_desc {
 	const char *name;

commit 3de89609a82aa68f543cba263eb28725e0fde511
Author: Mark Brown <broonie@opensource.wolfsonmicro.com>
Date:   Tue Sep 9 16:21:17 2008 +0100

    regulator: Fix typo
    
    Signed-off-by: Mark Brown <broonie@opensource.wolfsonmicro.com>
    Signed-off-by: Liam Girdwood <lrg@slimlogic.co.uk>

diff --git a/include/linux/regulator/driver.h b/include/linux/regulator/driver.h
index bc01b42a8583..e37d80561985 100644
--- a/include/linux/regulator/driver.h
+++ b/include/linux/regulator/driver.h
@@ -51,7 +51,7 @@ struct regulator_ops {
 					  int output_uV, int load_uA);
 
 	/* the operations below are for configuration of regulator state when
-	 * it's parent PMIC enters a global STANBY/HIBERNATE state */
+	 * its parent PMIC enters a global STANDBY/HIBERNATE state */
 
 	/* set regulator suspend voltage */
 	int (*set_suspend_voltage) (struct regulator_dev *, int uV);

commit a5766f11cfd3a0c03450d99c8fe548c2940be884
Author: Liam Girdwood <lrg@slimlogic.co.uk>
Date:   Fri Oct 10 13:22:20 2008 +0100

    regulator: core - Rework machine API to remove string based functions.
    
    This improves the machine level API in order to configure
    regulator constraints and consumers as platform data and removes the
    old string based API that required several calls to set up each regulator.
    
    The intention is to create a struct regulator_init_data, populate
    it's fields with constraints, consumers devices, etc and then register
    the regulator device from board.c in the standard Linux way.
    
    e.g. regulator LDO2 (supplying codec and sim) platform data.
    
    /* regulator LDO2 consumer devices */
    static struct regulator_consumer_supply ldo2_consumers[] = {
    {
            .dev    = &platform_audio_device.dev,
            .supply = "codec_avdd",
    },
    {
            .dev    = &platform_sim_device.dev,
            .supply = "sim_vcc",
    }
    };
    
    /* regulator LDO2 constraints  */
    static struct regulator_init_data ldo2_data = {
            .constraints = {
                    .min_uV = 3300000,
                    .max_uV = 3300000,
                    .valid_modes_mask = REGULATOR_MODE_NORMAL,
                    .apply_uV = 1,
            },
            .num_consumer_supplies = ARRAY_SIZE(ldo2_consumers),
            .consumer_supplies = ldo2_consumers,
    };
    
    /* machine regulator devices with thier consumers and constraints */
    static struct platform_device wm8350_regulator_devices[] = {
    {
            .name = "wm8350-regulator",
            .id = WM8350_LDO_2,
            .dev = {
                    .platform_data = &ldo2_data,
            },
    },
    };
    
    Changes in detail:-
    
      o Removed all const char* regulator config functions in machine API.
      o Created new struct regulator_init_data to contain regulator
        machine configuration constraints and consmuers.
      o Changed set_supply(), set_machine_constraints(),
        set_consumer_device_supply() to remove their string identifier
        parameters. Also made them static and moved functions nearer top of
        core.c.
      o Removed no longer used inline func to_rdev()
      o Added regulator_get_init_drvdata() to retrieve init data.
      o Added struct device* as parameter to regulator_register().
      o Changed my email address.
    
    Signed-off-by: Eric Miao <eric.miao@marvell.com>
    Signed-off-by: Mark Brown <broonie@opensource.wolfsonmicro.com>
    Signed-off-by: Liam Girdwood <lrg@slimlogic.co.uk>

diff --git a/include/linux/regulator/driver.h b/include/linux/regulator/driver.h
index 1d712c7172a2..bc01b42a8583 100644
--- a/include/linux/regulator/driver.h
+++ b/include/linux/regulator/driver.h
@@ -18,8 +18,8 @@
 #include <linux/device.h>
 #include <linux/regulator/consumer.h>
 
-struct regulator_constraints;
 struct regulator_dev;
+struct regulator_init_data;
 
 /**
  * struct regulator_ops - regulator operations.
@@ -85,15 +85,17 @@ struct regulator_desc {
 	struct module *owner;
 };
 
-
 struct regulator_dev *regulator_register(struct regulator_desc *regulator_desc,
-					  void *reg_data);
+	struct device *dev, void *driver_data);
 void regulator_unregister(struct regulator_dev *rdev);
 
 int regulator_notifier_call_chain(struct regulator_dev *rdev,
 				  unsigned long event, void *data);
 
 void *rdev_get_drvdata(struct regulator_dev *rdev);
+struct device *rdev_get_dev(struct regulator_dev *rdev);
 int rdev_get_id(struct regulator_dev *rdev);
 
+void *regulator_get_init_drvdata(struct regulator_init_data *reg_init_data);
+
 #endif

commit 571a354b1542a274d88617e1f6703f3fe7a517f1
Author: Liam Girdwood <lg@opensource.wolfsonmicro.com>
Date:   Wed Apr 30 15:42:28 2008 +0100

    regulator: regulator driver interface
    
    This allows regulator drivers to register their regulators and provide
    operations to the core. It also has a notifier call chain for propagating
    regulator events to clients.
    
    Signed-off-by: Liam Girdwood <lg@opensource.wolfsonmicro.com>
    Signed-off-by: Mark Brown <broonie@opensource.wolfsonmicro.com>

diff --git a/include/linux/regulator/driver.h b/include/linux/regulator/driver.h
new file mode 100644
index 000000000000..1d712c7172a2
--- /dev/null
+++ b/include/linux/regulator/driver.h
@@ -0,0 +1,99 @@
+/*
+ * driver.h -- SoC Regulator driver support.
+ *
+ * Copyright (C) 2007, 2008 Wolfson Microelectronics PLC.
+ *
+ * Author: Liam Girdwood <lg@opensource.wolfsonmicro.com>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation.
+ *
+ * Regulator Driver Interface.
+ */
+
+#ifndef __LINUX_REGULATOR_DRIVER_H_
+#define __LINUX_REGULATOR_DRIVER_H_
+
+#include <linux/device.h>
+#include <linux/regulator/consumer.h>
+
+struct regulator_constraints;
+struct regulator_dev;
+
+/**
+ * struct regulator_ops - regulator operations.
+ *
+ * This struct describes regulator operations.
+ */
+struct regulator_ops {
+
+	/* get/set regulator voltage */
+	int (*set_voltage) (struct regulator_dev *, int min_uV, int max_uV);
+	int (*get_voltage) (struct regulator_dev *);
+
+	/* get/set regulator current  */
+	int (*set_current_limit) (struct regulator_dev *,
+				 int min_uA, int max_uA);
+	int (*get_current_limit) (struct regulator_dev *);
+
+	/* enable/disable regulator */
+	int (*enable) (struct regulator_dev *);
+	int (*disable) (struct regulator_dev *);
+	int (*is_enabled) (struct regulator_dev *);
+
+	/* get/set regulator operating mode (defined in regulator.h) */
+	int (*set_mode) (struct regulator_dev *, unsigned int mode);
+	unsigned int (*get_mode) (struct regulator_dev *);
+
+	/* get most efficient regulator operating mode for load */
+	unsigned int (*get_optimum_mode) (struct regulator_dev *, int input_uV,
+					  int output_uV, int load_uA);
+
+	/* the operations below are for configuration of regulator state when
+	 * it's parent PMIC enters a global STANBY/HIBERNATE state */
+
+	/* set regulator suspend voltage */
+	int (*set_suspend_voltage) (struct regulator_dev *, int uV);
+
+	/* enable/disable regulator in suspend state */
+	int (*set_suspend_enable) (struct regulator_dev *);
+	int (*set_suspend_disable) (struct regulator_dev *);
+
+	/* set regulator suspend operating mode (defined in regulator.h) */
+	int (*set_suspend_mode) (struct regulator_dev *, unsigned int mode);
+};
+
+/*
+ * Regulators can either control voltage or current.
+ */
+enum regulator_type {
+	REGULATOR_VOLTAGE,
+	REGULATOR_CURRENT,
+};
+
+/**
+ * struct regulator_desc - Regulator descriptor
+ *
+ */
+struct regulator_desc {
+	const char *name;
+	int id;
+	struct regulator_ops *ops;
+	int irq;
+	enum regulator_type type;
+	struct module *owner;
+};
+
+
+struct regulator_dev *regulator_register(struct regulator_desc *regulator_desc,
+					  void *reg_data);
+void regulator_unregister(struct regulator_dev *rdev);
+
+int regulator_notifier_call_chain(struct regulator_dev *rdev,
+				  unsigned long event, void *data);
+
+void *rdev_get_drvdata(struct regulator_dev *rdev);
+int rdev_get_id(struct regulator_dev *rdev);
+
+#endif
