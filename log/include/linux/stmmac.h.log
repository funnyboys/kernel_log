commit b9663b7ca6ff780555108394c9c1b409f63b99a7
Author: Voon Weifeng <weifeng.voon@intel.com>
Date:   Mon Apr 20 23:42:52 2020 +0800

    net: stmmac: Enable SERDES power up/down sequence
    
    This patch is to enable Intel SERDES power up/down sequence. The SERDES
    converts 8/10 bits data to SGMII signal. Below is an example of
    HW configuration for SGMII mode. The SERDES is located in the PHY IF
    in the diagram below.
    
    <-----------------GBE Controller---------->|<--External PHY chip-->
    +----------+         +----+            +---+           +----------+
    |   EQoS   | <-GMII->| DW | < ------ > |PHY| <-SGMII-> | External |
    |   MAC    |         |xPCS|            |IF |           | PHY      |
    +----------+         +----+            +---+           +----------+
           ^               ^                 ^                ^
           |               |                 |                |
           +---------------------MDIO-------------------------+
    
    PHY IF configuration and status registers are accessible through
    mdio address 0x15 which is defined as mdio_adhoc_addr. During D0,
    The driver will need to power up PHY IF by changing the power state
    to P0. Likewise, for D3, the driver sets PHY IF power state to P3.
    
    Signed-off-by: Voon Weifeng <weifeng.voon@intel.com>
    Signed-off-by: Ong Boon Leong <boon.leong.ong@intel.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

diff --git a/include/linux/stmmac.h b/include/linux/stmmac.h
index fbafb353e9be..bd964c31d333 100644
--- a/include/linux/stmmac.h
+++ b/include/linux/stmmac.h
@@ -177,6 +177,8 @@ struct plat_stmmacenet_data {
 	struct stmmac_rxq_cfg rx_queues_cfg[MTL_MAX_RX_QUEUES];
 	struct stmmac_txq_cfg tx_queues_cfg[MTL_MAX_TX_QUEUES];
 	void (*fix_mac_speed)(void *priv, unsigned int speed);
+	int (*serdes_powerup)(struct net_device *ndev, void *priv);
+	void (*serdes_powerdown)(struct net_device *ndev, void *priv);
 	int (*init)(struct platform_device *pdev, void *priv);
 	void (*exit)(struct platform_device *pdev, void *priv);
 	struct mac_device_info *(*setup)(void *priv);

commit f213bbe8a9d6ba1d0adf424787c02f361ea78c38
Author: Jose Abreu <Jose.Abreu@synopsys.com>
Date:   Mon Mar 9 09:36:27 2020 +0100

    net: stmmac: Integrate it with DesignWare XPCS
    
    Adds all the necessary logic so that stmmac can be used with Synopsys
    DesignWare XPCS.
    
    Signed-off-by: Jose Abreu <Jose.Abreu@synopsys.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

diff --git a/include/linux/stmmac.h b/include/linux/stmmac.h
index 19190c609282..fbafb353e9be 100644
--- a/include/linux/stmmac.h
+++ b/include/linux/stmmac.h
@@ -80,6 +80,7 @@
 
 struct stmmac_mdio_bus_data {
 	unsigned int phy_mask;
+	unsigned int has_xpcs;
 	int *irqs;
 	int probed_phy_irq;
 	bool needs_reset;

commit 579a25a854d482bc9d0f9ab0e07ba32fb66bd9e3
Author: Jose Abreu <Jose.Abreu@synopsys.com>
Date:   Mon Jan 13 17:24:09 2020 +0100

    net: stmmac: Initial support for TBS
    
    Adds the initial hooks for TBS support. This needs a 32 byte descriptor
    in order for it to work with current HW. Adds all the logic for Enhanced
    Descriptors in main core but no HW related logic for now.
    
    Changes from v2:
    - Use bitfield for TBS status / support (Jakub)
    - Remove unneeded cache alignment (Jakub)
    - Fix checkpatch issues
    
    Signed-off-by: Jose Abreu <Jose.Abreu@synopsys.com>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>

diff --git a/include/linux/stmmac.h b/include/linux/stmmac.h
index 0531afa9b21e..19190c609282 100644
--- a/include/linux/stmmac.h
+++ b/include/linux/stmmac.h
@@ -139,6 +139,7 @@ struct stmmac_txq_cfg {
 	u32 low_credit;
 	bool use_prio;
 	u32 prio;
+	int tbs_en;
 };
 
 struct plat_stmmacenet_data {

commit 504723af0d85434be5fb6f2dde0b62644a7f1ead
Author: Jose Abreu <joabreu@synopsys.com>
Date:   Wed Dec 18 11:33:05 2019 +0100

    net: stmmac: Add basic EST support for GMAC5+
    
    Adds the support for EST in GMAC5+ cores. This feature allows to offload
    scheduling of queues opening time to the IP.
    
    Signed-off-by: Jose Abreu <joabreu@synopsys.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

diff --git a/include/linux/stmmac.h b/include/linux/stmmac.h
index d4bcd9387136..0531afa9b21e 100644
--- a/include/linux/stmmac.h
+++ b/include/linux/stmmac.h
@@ -109,6 +109,18 @@ struct stmmac_axi {
 	bool axi_rb;
 };
 
+#define EST_GCL		1024
+struct stmmac_est {
+	int enable;
+	u32 btr_offset[2];
+	u32 btr[2];
+	u32 ctr[2];
+	u32 ter;
+	u32 gcl_unaligned[EST_GCL];
+	u32 gcl[EST_GCL];
+	u32 gcl_size;
+};
+
 struct stmmac_rxq_cfg {
 	u8 mode_to_use;
 	u32 chan;
@@ -139,6 +151,7 @@ struct plat_stmmacenet_data {
 	struct device_node *phylink_node;
 	struct device_node *mdio_node;
 	struct stmmac_dma_cfg *dma_cfg;
+	struct stmmac_est *est;
 	int clk_csr;
 	int has_gmac;
 	int enh_desc;

commit 0c65b2b90d13c1deaee6449304dd367c5d4eb8ae
Author: Andrew Lunn <andrew@lunn.ch>
Date:   Mon Nov 4 02:40:33 2019 +0100

    net: of_get_phy_mode: Change API to solve int/unit warnings
    
    Before this change of_get_phy_mode() returned an enum,
    phy_interface_t. On error, -ENODEV etc, is returned. If the result of
    the function is stored in a variable of type phy_interface_t, and the
    compiler has decided to represent this as an unsigned int, comparision
    with -ENODEV etc, is a signed vs unsigned comparision.
    
    Fix this problem by changing the API. Make the function return an
    error, or 0 on success, and pass a pointer, of type phy_interface_t,
    where the phy mode should be stored.
    
    v2:
    Return with *interface set to PHY_INTERFACE_MODE_NA on error.
    Add error checks to all users of of_get_phy_mode()
    Fixup a few reverse christmas tree errors
    Fixup a few slightly malformed reverse christmas trees
    
    v3:
    Fix 0-day reported errors.
    
    Reported-by: Dan Carpenter <dan.carpenter@oracle.com>
    Signed-off-by: Andrew Lunn <andrew@lunn.ch>
    Signed-off-by: David S. Miller <davem@davemloft.net>

diff --git a/include/linux/stmmac.h b/include/linux/stmmac.h
index 86f9464c3f5d..d4bcd9387136 100644
--- a/include/linux/stmmac.h
+++ b/include/linux/stmmac.h
@@ -13,6 +13,7 @@
 #define __STMMAC_PLATFORM_DATA
 
 #include <linux/platform_device.h>
+#include <linux/phy.h>
 
 #define MTL_MAX_RX_QUEUES	8
 #define MTL_MAX_TX_QUEUES	8
@@ -132,7 +133,7 @@ struct plat_stmmacenet_data {
 	int bus_id;
 	int phy_addr;
 	int interface;
-	int phy_interface;
+	phy_interface_t phy_interface;
 	struct stmmac_mdio_bus_data *mdio_bus_data;
 	struct device_node *phy_node;
 	struct device_node *phylink_node;

commit 968a2978cb39a754750d35a47049781660682a31
Author: Thierry Reding <treding@nvidia.com>
Date:   Wed Oct 2 16:52:57 2019 +0200

    net: stmmac: Only enable enhanced addressing mode when needed
    
    Enhanced addressing mode is only required when more than 32 bits need to
    be addressed. Add a DMA configuration parameter to enable this mode only
    when needed.
    
    Signed-off-by: Thierry Reding <treding@nvidia.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

diff --git a/include/linux/stmmac.h b/include/linux/stmmac.h
index dc60d03c4b60..86f9464c3f5d 100644
--- a/include/linux/stmmac.h
+++ b/include/linux/stmmac.h
@@ -92,6 +92,7 @@ struct stmmac_dma_cfg {
 	int fixed_burst;
 	int mixed_burst;
 	bool aal;
+	bool eame;
 };
 
 #define AXI_BLEN	7

commit 0060c8783330ab60deb96f9d6bb7abfe4664765d
Author: Alexandru Ardelean <alexandru.ardelean@analog.com>
Date:   Fri Sep 6 16:02:55 2019 +0300

    net: stmmac: implement support for passive mode converters via dt
    
    In-between the MAC & PHY there can be a mode converter, which converts one
    mode to another (e.g. GMII-to-RGMII).
    
    The converter, can be passive (i.e. no driver or OS/SW information
    required), so the MAC & PHY need to be configured differently.
    
    For the `stmmac` driver, this is implemented via a `mac-mode` property in
    the device-tree, which configures the MAC into a certain mode, and for the
    PHY a `phy_interface` field will hold the mode of the PHY. The mode of the
    PHY will be passed to the PHY and from there-on it work in a different
    mode. If unspecified, the default `phy-mode` will be used for both.
    
    Signed-off-by: Alexandru Ardelean <alexandru.ardelean@analog.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

diff --git a/include/linux/stmmac.h b/include/linux/stmmac.h
index 7ad7ae35cf88..dc60d03c4b60 100644
--- a/include/linux/stmmac.h
+++ b/include/linux/stmmac.h
@@ -131,6 +131,7 @@ struct plat_stmmacenet_data {
 	int bus_id;
 	int phy_addr;
 	int interface;
+	int phy_interface;
 	struct stmmac_mdio_bus_data *mdio_bus_data;
 	struct device_node *phy_node;
 	struct device_node *phylink_node;

commit 190f73ab4c43ecfc8e93843fe249efeff7d69a90
Author: Voon Weifeng <weifeng.voon@intel.com>
Date:   Tue Aug 27 09:38:11 2019 +0800

    net: stmmac: setup higher frequency clk support for EHL & TGL
    
    EHL DW EQOS is running on a 200MHz clock. Setting up stmmac-clk,
    ptp clock and ptp_max_adj to 200MHz.
    
    Signed-off-by: Voon Weifeng <weifeng.voon@intel.com>
    Signed-off-by: Ong Boon Leong <boon.leong.ong@intel.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

diff --git a/include/linux/stmmac.h b/include/linux/stmmac.h
index 5cc6b6faf359..7ad7ae35cf88 100644
--- a/include/linux/stmmac.h
+++ b/include/linux/stmmac.h
@@ -168,6 +168,7 @@ struct plat_stmmacenet_data {
 	struct clk *clk_ptp_ref;
 	unsigned int clk_ptp_rate;
 	unsigned int clk_ref_rate;
+	s32 ptp_max_adj;
 	struct reset_control *stmmac_rst;
 	struct stmmac_axi *axi;
 	int has_gmac4;

commit 76067459c686c4fc6352613e5a6a54e4ffef2861
Author: Jose Abreu <Jose.Abreu@synopsys.com>
Date:   Wed Aug 7 10:03:12 2019 +0200

    net: stmmac: Implement RSS and enable it in XGMAC core
    
    Implement the RSS functionality and add the corresponding callbacks in
    XGMAC core.
    
    Changes from v1:
            - Do not use magic constants (Jakub)
            - Use ethtool_rxfh_indir_default() (Jakub)
    
    Signed-off-by: Jose Abreu <joabreu@synopsys.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

diff --git a/include/linux/stmmac.h b/include/linux/stmmac.h
index 7b3e354bcd3c..5cc6b6faf359 100644
--- a/include/linux/stmmac.h
+++ b/include/linux/stmmac.h
@@ -173,6 +173,7 @@ struct plat_stmmacenet_data {
 	int has_gmac4;
 	bool has_sun8i;
 	bool tso_en;
+	int rss_en;
 	int mac_port_sel_speed;
 	bool en_tx_lpi_clockgating;
 	int has_xgmac;

commit 1a981c0586c038710227eb740350f291e77ce365
Author: Thierry Reding <treding@nvidia.com>
Date:   Fri Jul 26 12:27:40 2019 +0200

    net: stmmac: Make MDIO bus reset optional
    
    The Tegra EQOS driver already resets the MDIO bus at probe time via the
    reset GPIO specified in the phy-reset-gpios device tree property. There
    is no need to reset the bus again later on.
    
    This avoids the need to query the device tree for the snps,reset GPIO,
    which is not part of the Tegra EQOS device tree bindings. This quiesces
    an error message from the generic bus reset code if it doesn't find the
    snps,reset related delays.
    
    Signed-off-by: Thierry Reding <treding@nvidia.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

diff --git a/include/linux/stmmac.h b/include/linux/stmmac.h
index 7d06241582dd..7b3e354bcd3c 100644
--- a/include/linux/stmmac.h
+++ b/include/linux/stmmac.h
@@ -81,6 +81,7 @@ struct stmmac_mdio_bus_data {
 	unsigned int phy_mask;
 	int *irqs;
 	int probed_phy_irq;
+	bool needs_reset;
 };
 
 struct stmmac_dma_cfg {

commit 13091aa30535b719e269f20a7bc34002bf5afae5
Merge: f97252a8c33f 29f785ff76b6
Author: David S. Miller <davem@davemloft.net>
Date:   Mon Jun 17 19:48:13 2019 -0700

    Merge git://git.kernel.org/pub/scm/linux/kernel/git/davem/net
    
    Honestly all the conflicts were simple overlapping changes,
    nothing really interesting to report.
    
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit fead5b1b5838ba2f231d76e1b8ed31a4e9449382
Author: Martin Blumenstingl <martin.blumenstingl@googlemail.com>
Date:   Sat Jun 15 12:09:32 2019 +0200

    net: stmmac: drop the phy_reset hook from struct stmmac_mdio_bus_data
    
    The phy_reset hook is not set anywhere. Drop it to make
    stmmac_mdio_reset() smaller.
    
    Signed-off-by: Martin Blumenstingl <martin.blumenstingl@googlemail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

diff --git a/include/linux/stmmac.h b/include/linux/stmmac.h
index 7c8328edd501..6dfb5aa75b0c 100644
--- a/include/linux/stmmac.h
+++ b/include/linux/stmmac.h
@@ -92,7 +92,6 @@
 /* Platfrom data for platform device structure's platform_data field */
 
 struct stmmac_mdio_bus_data {
-	int (*phy_reset)(void *priv);
 	unsigned int phy_mask;
 	int *irqs;
 	int probed_phy_irq;

commit ce4ab73ab0c27c6a3853695aa8ec0f453c6329cd
Author: Martin Blumenstingl <martin.blumenstingl@googlemail.com>
Date:   Sat Jun 15 12:09:31 2019 +0200

    net: stmmac: drop the reset delays from struct stmmac_mdio_bus_data
    
    Only OF platforms use the reset delays and these delays are only read in
    stmmac_mdio_reset(). Move them from struct stmmac_mdio_bus_data to a
    stack variable inside stmmac_mdio_reset() because that's the only usage
    of these delays.
    
    Signed-off-by: Martin Blumenstingl <martin.blumenstingl@googlemail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

diff --git a/include/linux/stmmac.h b/include/linux/stmmac.h
index a0cc6fa4965b..7c8328edd501 100644
--- a/include/linux/stmmac.h
+++ b/include/linux/stmmac.h
@@ -96,9 +96,6 @@ struct stmmac_mdio_bus_data {
 	unsigned int phy_mask;
 	int *irqs;
 	int probed_phy_irq;
-#ifdef CONFIG_OF
-	u32 delays[3];
-#endif
 };
 
 struct stmmac_dma_cfg {

commit 7e770b252a62e7498cfa9411018100fd86e56d47
Author: Martin Blumenstingl <martin.blumenstingl@googlemail.com>
Date:   Sat Jun 15 12:09:30 2019 +0200

    net: stmmac: drop the reset GPIO from struct stmmac_mdio_bus_data
    
    No platform uses the "reset_gpio" field from stmmac_mdio_bus_data
    anymore. Drop it so we don't get any new consumers either.
    
    Plain GPIO numbers are being deprecated in favor of GPIO descriptors. If
    needed any new non-OF platform can add a GPIO descriptor lookup table.
    devm_gpiod_get_optional() will find the GPIO in that case.
    
    Suggested-by: Linus Walleij <linus.walleij@linaro.org>
    Signed-off-by: Martin Blumenstingl <martin.blumenstingl@googlemail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

diff --git a/include/linux/stmmac.h b/include/linux/stmmac.h
index a3c2d9945bcf..a0cc6fa4965b 100644
--- a/include/linux/stmmac.h
+++ b/include/linux/stmmac.h
@@ -97,7 +97,6 @@ struct stmmac_mdio_bus_data {
 	int *irqs;
 	int probed_phy_irq;
 #ifdef CONFIG_OF
-	int reset_gpio;
 	u32 delays[3];
 #endif
 };

commit 4838a54050284daac15dfeb1d65677e4dacf1bf5
Author: Jose Abreu <Jose.Abreu@synopsys.com>
Date:   Fri Jun 14 17:06:57 2019 +0200

    net: stmmac: Fix wrapper drivers not detecting PHY
    
    Because of PHYLINK conversion we stopped parsing the phy-handle property
    from DT. Unfortunatelly, some wrapper drivers still rely on this phy
    node to configure the PHY.
    
    Let's restore the parsing of PHY handle while these wrapper drivers are
    not fully converted to PHYLINK.
    
    Fixes: 74371272f97f ("net: stmmac: Convert to phylink and remove phylib logic")
    Reported-by: Corentin Labbe <clabbe.montjoie@gmail.com>
    Signed-off-by: Jose Abreu <joabreu@synopsys.com>
    Cc: Joao Pinto <jpinto@synopsys.com>
    Cc: David S. Miller <davem@davemloft.net>
    Cc: Giuseppe Cavallaro <peppe.cavallaro@st.com>
    Cc: Alexandre Torgue <alexandre.torgue@st.com>
    Tested-by: Corentin Labbe <clabbe.montjoie@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

diff --git a/include/linux/stmmac.h b/include/linux/stmmac.h
index 816edb545592..a3c2d9945bcf 100644
--- a/include/linux/stmmac.h
+++ b/include/linux/stmmac.h
@@ -151,6 +151,7 @@ struct plat_stmmacenet_data {
 	int interface;
 	struct stmmac_mdio_bus_data *mdio_bus_data;
 	struct device_node *phy_node;
+	struct device_node *phylink_node;
 	struct device_node *mdio_node;
 	struct stmmac_dma_cfg *dma_cfg;
 	int clk_csr;

commit 7c86f20d15b7c1132e0c24358ce240ba4cb002b7
Author: Martin Blumenstingl <martin.blumenstingl@googlemail.com>
Date:   Wed Jun 12 21:31:15 2019 +0200

    net: stmmac: use GPIO descriptors in stmmac_mdio_reset
    
    Switch stmmac_mdio_reset to use GPIO descriptors. GPIO core handles the
    "snps,reset-gpio" for GPIO descriptors so we don't need to take care of
    it inside the driver anymore.
    
    The advantage of this is that we now preserve the GPIO flags which are
    passed via devicetree. This is required on some newer Amlogic boards
    which use an Open Drain pin for the reset GPIO. This pin can only output
    a LOW signal or switch to input mode but it cannot output a HIGH signal.
    There are already devicetree bindings for these special cases and GPIO
    core already takes care of them but only if we use GPIO descriptors
    instead of GPIO numbers.
    
    Signed-off-by: Martin Blumenstingl <martin.blumenstingl@googlemail.com>
    Reviewed-by: Linus Walleij <linus.walleij@linaro.org>
    Reviewed-by: Andrew Lunn <andrew@lunn.ch>
    Signed-off-by: David S. Miller <davem@davemloft.net>

diff --git a/include/linux/stmmac.h b/include/linux/stmmac.h
index 4335bd771ce5..816edb545592 100644
--- a/include/linux/stmmac.h
+++ b/include/linux/stmmac.h
@@ -97,7 +97,7 @@ struct stmmac_mdio_bus_data {
 	int *irqs;
 	int probed_phy_irq;
 #ifdef CONFIG_OF
-	int reset_gpio, active_low;
+	int reset_gpio;
 	u32 delays[3];
 #endif
 };

commit 1237a75addc781baa3a37355e520d1db01a34210
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Wed May 29 16:57:29 2019 -0700

    treewide: Replace GPLv2 boilerplate/reference with SPDX - rule 314
    
    Based on 1 normalized pattern(s):
    
      this program is free software you can redistribute it and or modify
      it under the terms and conditions of the gnu general public license
      version 2 as published by the free software foundation this program
      is distributed in the hope it will be useful but without any
      warranty without even the implied warranty of merchantability or
      fitness for a particular purpose see the gnu general public license
      for more details you should have received a copy of the gnu general
      public license along with this program if not write to the free
      software foundation inc 51 franklin st fifth floor boston ma 02110
      1301 usa the full gnu general public license is included in this
      distribution in the file called copying
    
    extracted by the scancode license scanner the SPDX license identifier
    
      GPL-2.0-only
    
    has been chosen to replace the boilerplate/reference in 2 file(s).
    
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Reviewed-by: Allison Randal <allison@lohutok.net>
    Reviewed-by: Alexios Zavras <alexios.zavras@intel.com>
    Reviewed-by: Armijn Hemel <armijn@tjaldur.nl>
    Reviewed-by: Kate Stewart <kstewart@linuxfoundation.org>
    Cc: linux-spdx@vger.kernel.org
    Link: https://lkml.kernel.org/r/20190530000434.706787045@linutronix.de
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/include/linux/stmmac.h b/include/linux/stmmac.h
index 4335bd771ce5..1a0bb622cf10 100644
--- a/include/linux/stmmac.h
+++ b/include/linux/stmmac.h
@@ -1,24 +1,10 @@
+/* SPDX-License-Identifier: GPL-2.0-only */
 /*******************************************************************************
 
   Header file for stmmac platform data
 
   Copyright (C) 2009  STMicroelectronics Ltd
 
-  This program is free software; you can redistribute it and/or modify it
-  under the terms and conditions of the GNU General Public License,
-  version 2, as published by the Free Software Foundation.
-
-  This program is distributed in the hope it will be useful, but WITHOUT
-  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
-  FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
-  more details.
-
-  You should have received a copy of the GNU General Public License along with
-  this program; if not, write to the Free Software Foundation, Inc.,
-  51 Franklin St - Fifth Floor, Boston, MA 02110-1301 USA.
-
-  The full GNU General Public License is included in this distribution in
-  the file called "COPYING".
 
   Author: Giuseppe Cavallaro <peppe.cavallaro@st.com>
 *******************************************************************************/

commit 4ec5302fa906ec9d86597b236f62315bacdb9622
Author: Jose Abreu <jose.abreu@synopsys.com>
Date:   Wed Jan 30 15:54:19 2019 +0100

    net: stmmac: Fallback to Platform Data clock in Watchdog conversion
    
    If we don't have DT then stmmac_clk will not be available. Let's add a
    new Platform Data field so that we can specify the refclk by this mean.
    
    This way we can still use the coalesce command in PCI based setups.
    
    Signed-off-by: Jose Abreu <joabreu@synopsys.com>
    Cc: Joao Pinto <jpinto@synopsys.com>
    Cc: David S. Miller <davem@davemloft.net>
    Cc: Giuseppe Cavallaro <peppe.cavallaro@st.com>
    Cc: Alexandre Torgue <alexandre.torgue@st.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

diff --git a/include/linux/stmmac.h b/include/linux/stmmac.h
index 7ddfc65586b0..4335bd771ce5 100644
--- a/include/linux/stmmac.h
+++ b/include/linux/stmmac.h
@@ -184,6 +184,7 @@ struct plat_stmmacenet_data {
 	struct clk *pclk;
 	struct clk *clk_ptp_ref;
 	unsigned int clk_ptp_rate;
+	unsigned int clk_ref_rate;
 	struct reset_control *stmmac_rst;
 	struct stmmac_axi *axi;
 	int has_gmac4;

commit 8fce3331702316d4bcfeb0771c09ac75d2192bbc
Author: Jose Abreu <Jose.Abreu@synopsys.com>
Date:   Mon Sep 17 09:22:56 2018 +0100

    net: stmmac: Rework coalesce timer and fix multi-queue races
    
    This follows David Miller advice and tries to fix coalesce timer in
    multi-queue scenarios.
    
    We are now using per-queue coalesce values and per-queue TX timer.
    
    Coalesce timer default values was changed to 1ms and the coalesce frames
    to 25.
    
    Tested in B2B setup between XGMAC2 and GMAC5.
    
    Signed-off-by: Jose Abreu <joabreu@synopsys.com>
    Fixes:  ce736788e8a ("net: stmmac: adding multiple buffers for TX")
    Cc: Florian Fainelli <f.fainelli@gmail.com>
    Cc: Neil Armstrong <narmstrong@baylibre.com>
    Cc: Jerome Brunet <jbrunet@baylibre.com>
    Cc: Martin Blumenstingl <martin.blumenstingl@googlemail.com>
    Cc: David S. Miller <davem@davemloft.net>
    Cc: Joao Pinto <jpinto@synopsys.com>
    Cc: Giuseppe Cavallaro <peppe.cavallaro@st.com>
    Cc: Alexandre Torgue <alexandre.torgue@st.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

diff --git a/include/linux/stmmac.h b/include/linux/stmmac.h
index c43e9a01b892..7ddfc65586b0 100644
--- a/include/linux/stmmac.h
+++ b/include/linux/stmmac.h
@@ -30,6 +30,7 @@
 
 #define MTL_MAX_RX_QUEUES	8
 #define MTL_MAX_TX_QUEUES	8
+#define STMMAC_CH_MAX		8
 
 #define STMMAC_RX_COE_NONE	0
 #define STMMAC_RX_COE_TYPE1	1

commit 48ae5554a076c1bca31448d60263e4038def9f6f
Author: Jose Abreu <Jose.Abreu@synopsys.com>
Date:   Wed Aug 8 09:04:29 2018 +0100

    net: stmmac: Add XGMAC 2.10 HWIF entry
    
    Add a new entry to HWIF table for XGMAC 2.10. For now we fill it with
    empty callbacks which will be added in posterior patches.
    
    Signed-off-by: Jose Abreu <joabreu@synopsys.com>
    Cc: David S. Miller <davem@davemloft.net>
    Cc: Joao Pinto <jpinto@synopsys.com>
    Cc: Giuseppe Cavallaro <peppe.cavallaro@st.com>
    Cc: Alexandre Torgue <alexandre.torgue@st.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

diff --git a/include/linux/stmmac.h b/include/linux/stmmac.h
index 32feac5bbd75..c43e9a01b892 100644
--- a/include/linux/stmmac.h
+++ b/include/linux/stmmac.h
@@ -190,5 +190,6 @@ struct plat_stmmacenet_data {
 	bool tso_en;
 	int mac_port_sel_speed;
 	bool en_tx_lpi_clockgating;
+	int has_xgmac;
 };
 #endif

commit e73b49ebd9deeb0ff2cd9ac6fd9c72a433d1e062
Author: Bhadram Varka <vbhadram@nvidia.com>
Date:   Thu Nov 2 12:52:13 2017 +0530

    stmmac: use of_property_read_u32 instead of read_u8
    
    Numbers in DT are stored in “cells” which are 32-bits
    in size. of_property_read_u8 does not work properly
    because of endianness problem.
    
    This causes it to always return 0 with little-endian
    architectures.
    
    Fix it by using of_property_read_u32() OF API.
    
    Signed-off-by: Bhadram Varka <vbhadram@nvidia.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

diff --git a/include/linux/stmmac.h b/include/linux/stmmac.h
index 108739ff9223..32feac5bbd75 100644
--- a/include/linux/stmmac.h
+++ b/include/linux/stmmac.h
@@ -126,14 +126,14 @@ struct stmmac_axi {
 
 struct stmmac_rxq_cfg {
 	u8 mode_to_use;
-	u8 chan;
+	u32 chan;
 	u8 pkt_route;
 	bool use_prio;
 	u32 prio;
 };
 
 struct stmmac_txq_cfg {
-	u8 weight;
+	u32 weight;
 	u8 mode_to_use;
 	/* Credit Base Shaper parameters */
 	u32 send_slope;
@@ -168,8 +168,8 @@ struct plat_stmmacenet_data {
 	int unicast_filter_entries;
 	int tx_fifo_size;
 	int rx_fifo_size;
-	u8 rx_queues_to_use;
-	u8 tx_queues_to_use;
+	u32 rx_queues_to_use;
+	u32 tx_queues_to_use;
 	u8 rx_sched_algorithm;
 	u8 tx_sched_algorithm;
 	struct stmmac_rxq_cfg rx_queues_cfg[MTL_MAX_RX_QUEUES];

commit 9f93ac8d4085f718d3c7c5fedcb98dbdd2287648
Author: LABBE Corentin <clabbe.montjoie@gmail.com>
Date:   Wed May 31 09:18:36 2017 +0200

    net-next: stmmac: Add dwmac-sun8i
    
    The dwmac-sun8i is a heavy hacked version of stmmac hardware by
    allwinner.
    In fact the only common part is the descriptor management and the first
    register function.
    
    Signed-off-by: Corentin Labbe <clabbe.montjoie@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

diff --git a/include/linux/stmmac.h b/include/linux/stmmac.h
index 8bb550bca96d..108739ff9223 100644
--- a/include/linux/stmmac.h
+++ b/include/linux/stmmac.h
@@ -186,6 +186,7 @@ struct plat_stmmacenet_data {
 	struct reset_control *stmmac_rst;
 	struct stmmac_axi *axi;
 	int has_gmac4;
+	bool has_sun8i;
 	bool tso_en;
 	int mac_port_sel_speed;
 	bool en_tx_lpi_clockgating;

commit ec33d71de7309c50531c2ae0eb178244899e6e46
Author: LABBE Corentin <clabbe.montjoie@gmail.com>
Date:   Wed May 31 09:18:33 2017 +0200

    net-next: stmmac: add optional setup function
    
    Instead of adding more ifthen logic for adding a new mac_device_info
    setup function, it is easier to add a function pointer to the function
    needed.
    
    Signed-off-by: Corentin Labbe <clabbe.montjoie@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

diff --git a/include/linux/stmmac.h b/include/linux/stmmac.h
index 3921cb9dfadb..8bb550bca96d 100644
--- a/include/linux/stmmac.h
+++ b/include/linux/stmmac.h
@@ -177,6 +177,7 @@ struct plat_stmmacenet_data {
 	void (*fix_mac_speed)(void *priv, unsigned int speed);
 	int (*init)(struct platform_device *pdev, void *priv);
 	void (*exit)(struct platform_device *pdev, void *priv);
+	struct mac_device_info *(*setup)(void *priv);
 	void *bsp_priv;
 	struct clk *stmmac_clk;
 	struct clk *pclk;

commit 2d72d5016f00fc7d64b95e79405787dea73669af
Author: Thierry Reding <treding@nvidia.com>
Date:   Tue Mar 21 16:12:11 2017 +0100

    net: stmmac: Use AVB mode by default
    
    Prior to the recent multi-queue changes the driver would configure the
    queues to use the AVB mode, but the mode then got switched to DCB. The
    hardware still works fine in DCB mode, but my testing capabilities are
    limited, so it's safer to revert to the prior setting anyway.
    
    Signed-off-by: Thierry Reding <treding@nvidia.com>
    Acked-By: Joao Pinto <jpinto@synopsys.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

diff --git a/include/linux/stmmac.h b/include/linux/stmmac.h
index cd98ee232ad1..3921cb9dfadb 100644
--- a/include/linux/stmmac.h
+++ b/include/linux/stmmac.h
@@ -56,8 +56,8 @@
 #define MTL_RX_ALGORITHM_WSP	0x5
 
 /* RX/TX Queue Mode */
-#define MTL_QUEUE_DCB		0x0
-#define MTL_QUEUE_AVB		0x1
+#define MTL_QUEUE_AVB		0x0
+#define MTL_QUEUE_DCB		0x1
 
 /* The MDC clock could be set higher than the IEEE 802.3
  * specified frequency limit 0f 2.5 MHz, by programming a clock divider

commit abe80fdc6ee664b2f8515f91b45e852b65dbb1a1
Author: Joao Pinto <Joao.Pinto@synopsys.com>
Date:   Fri Mar 17 16:11:07 2017 +0000

    net: stmmac: RX queue routing configuration
    
    This patch adds the configuration of RX queues' routing.
    
    Signed-off-by: Joao Pinto <jpinto@synopsys.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

diff --git a/include/linux/stmmac.h b/include/linux/stmmac.h
index b7d5e7ae9591..cd98ee232ad1 100644
--- a/include/linux/stmmac.h
+++ b/include/linux/stmmac.h
@@ -127,6 +127,7 @@ struct stmmac_axi {
 struct stmmac_rxq_cfg {
 	u8 mode_to_use;
 	u8 chan;
+	u8 pkt_route;
 	bool use_prio;
 	u32 prio;
 };

commit a8f5102af2a7740a4b3200a27beddf27f23f921a
Author: Joao Pinto <Joao.Pinto@synopsys.com>
Date:   Fri Mar 17 16:11:06 2017 +0000

    net: stmmac: TX and RX queue priority configuration
    
    This patch adds the configuration of RX and TX queues' priority.
    
    Signed-off-by: Joao Pinto <jpinto@synopsys.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

diff --git a/include/linux/stmmac.h b/include/linux/stmmac.h
index be47b859e954..b7d5e7ae9591 100644
--- a/include/linux/stmmac.h
+++ b/include/linux/stmmac.h
@@ -127,6 +127,8 @@ struct stmmac_axi {
 struct stmmac_rxq_cfg {
 	u8 mode_to_use;
 	u8 chan;
+	bool use_prio;
+	u32 prio;
 };
 
 struct stmmac_txq_cfg {
@@ -137,6 +139,8 @@ struct stmmac_txq_cfg {
 	u32 idle_slope;
 	u32 high_credit;
 	u32 low_credit;
+	bool use_prio;
+	u32 prio;
 };
 
 struct plat_stmmacenet_data {

commit 19d9187317979cf0c25f67017d2676149abc46b2
Author: Joao Pinto <Joao.Pinto@synopsys.com>
Date:   Fri Mar 10 18:24:59 2017 +0000

    net: stmmac: configuration of CBS in case of a TX AVB queue
    
    This patch adds the configuration of the AVB Credit-Based Shaper.
    
    Signed-off-by: Joao Pinto <jpinto@synopsys.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

diff --git a/include/linux/stmmac.h b/include/linux/stmmac.h
index 266ff2af91e5..be47b859e954 100644
--- a/include/linux/stmmac.h
+++ b/include/linux/stmmac.h
@@ -55,9 +55,9 @@
 #define MTL_RX_ALGORITHM_SP	0x4
 #define MTL_RX_ALGORITHM_WSP	0x5
 
-/* RX Queue Mode */
-#define MTL_RX_DCB		0x0
-#define MTL_RX_AVB		0x1
+/* RX/TX Queue Mode */
+#define MTL_QUEUE_DCB		0x0
+#define MTL_QUEUE_AVB		0x1
 
 /* The MDC clock could be set higher than the IEEE 802.3
  * specified frequency limit 0f 2.5 MHz, by programming a clock divider
@@ -131,6 +131,12 @@ struct stmmac_rxq_cfg {
 
 struct stmmac_txq_cfg {
 	u8 weight;
+	u8 mode_to_use;
+	/* Credit Base Shaper parameters */
+	u32 send_slope;
+	u32 idle_slope;
+	u32 high_credit;
+	u32 low_credit;
 };
 
 struct plat_stmmacenet_data {

commit d976a525c371276cebd2517349d1d3568a0e48b5
Author: Joao Pinto <Joao.Pinto@synopsys.com>
Date:   Fri Mar 10 18:24:51 2017 +0000

    net: stmmac: multiple queues dt configuration
    
    This patch adds the multiple queues configuration in the Device Tree.
    It was also created a set of structures to keep the RX and TX queues
    configurations to be used in the driver.
    
    Signed-off-by: Joao Pinto <jpinto@synopsys.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

diff --git a/include/linux/stmmac.h b/include/linux/stmmac.h
index fc273e9d5f67..266ff2af91e5 100644
--- a/include/linux/stmmac.h
+++ b/include/linux/stmmac.h
@@ -28,6 +28,9 @@
 
 #include <linux/platform_device.h>
 
+#define MTL_MAX_RX_QUEUES	8
+#define MTL_MAX_TX_QUEUES	8
+
 #define STMMAC_RX_COE_NONE	0
 #define STMMAC_RX_COE_TYPE1	1
 #define STMMAC_RX_COE_TYPE2	2
@@ -44,6 +47,18 @@
 #define	STMMAC_CSR_150_250M	0x4	/* MDC = clk_scr_i/102 */
 #define	STMMAC_CSR_250_300M	0x5	/* MDC = clk_scr_i/122 */
 
+/* MTL algorithms identifiers */
+#define MTL_TX_ALGORITHM_WRR	0x0
+#define MTL_TX_ALGORITHM_WFQ	0x1
+#define MTL_TX_ALGORITHM_DWRR	0x2
+#define MTL_TX_ALGORITHM_SP	0x3
+#define MTL_RX_ALGORITHM_SP	0x4
+#define MTL_RX_ALGORITHM_WSP	0x5
+
+/* RX Queue Mode */
+#define MTL_RX_DCB		0x0
+#define MTL_RX_AVB		0x1
+
 /* The MDC clock could be set higher than the IEEE 802.3
  * specified frequency limit 0f 2.5 MHz, by programming a clock divider
  * of value different than the above defined values. The resultant MDIO
@@ -109,6 +124,15 @@ struct stmmac_axi {
 	bool axi_rb;
 };
 
+struct stmmac_rxq_cfg {
+	u8 mode_to_use;
+	u8 chan;
+};
+
+struct stmmac_txq_cfg {
+	u8 weight;
+};
+
 struct plat_stmmacenet_data {
 	int bus_id;
 	int phy_addr;
@@ -133,6 +157,12 @@ struct plat_stmmacenet_data {
 	int unicast_filter_entries;
 	int tx_fifo_size;
 	int rx_fifo_size;
+	u8 rx_queues_to_use;
+	u8 tx_queues_to_use;
+	u8 rx_sched_algorithm;
+	u8 tx_sched_algorithm;
+	struct stmmac_rxq_cfg rx_queues_cfg[MTL_MAX_RX_QUEUES];
+	struct stmmac_txq_cfg tx_queues_cfg[MTL_MAX_TX_QUEUES];
 	void (*fix_mac_speed)(void *priv, unsigned int speed);
 	int (*init)(struct platform_device *pdev, void *priv);
 	void (*exit)(struct platform_device *pdev, void *priv);

commit 6a2cac549b368960c9cd6a993f2f2cc6d720e935
Author: LABBE Corentin <clabbe.montjoie@gmail.com>
Date:   Wed Feb 8 09:31:07 2017 +0100

    net: stmmac: Remove the bus_setup function pointer
    
    The bus_setup function pointer is not used at all, this patch remove it.
    
    Signed-off-by: Corentin Labbe <clabbe.montjoie@gmail.com>
    Acked-by: Giuseppe Cavallaro <peppe.cavallaro@st.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

diff --git a/include/linux/stmmac.h b/include/linux/stmmac.h
index d76033d6726d..fc273e9d5f67 100644
--- a/include/linux/stmmac.h
+++ b/include/linux/stmmac.h
@@ -134,7 +134,6 @@ struct plat_stmmacenet_data {
 	int tx_fifo_size;
 	int rx_fifo_size;
 	void (*fix_mac_speed)(void *priv, unsigned int speed);
-	void (*bus_setup)(void __iomem *ioaddr);
 	int (*init)(struct platform_device *pdev, void *priv);
 	void (*exit)(struct platform_device *pdev, void *priv);
 	void *bsp_priv;

commit f573c0b9c4e02691cf87736bd0824fd37ec02e65
Author: jpinto <Joao.Pinto@synopsys.com>
Date:   Mon Jan 9 12:35:09 2017 +0000

    stmmac: move stmmac_clk, pclk, clk_ptp_ref and stmmac_rst to platform structure
    
    This patch moves stmmac_clk, pclk, clk_ptp_ref and stmmac_rst to the
    plat_stmmacenet_data structure. It also moves these platform variables
    initialization to stmmac_platform. This was done for two reasons:
    
    a) If PCI is used, platform related code is being executed in stmmac_main
    resulting in warnings that have no sense and conceptually was not right
    
    b) stmmac as a synopsys reference ethernet driver stack will be hosting
    more and more drivers to its structure like synopsys/dwc_eth_qos.c.
    These drivers have their own DT bindings that are not compatible with
    stmmac's. One of the most important are the clock names, and so they need
    to be parsed in the glue logic and initialized there, and that is the main
    reason why the clocks were passed to the platform structure.
    
    Signed-off-by: Joao Pinto <jpinto@synopsys.com>
    Tested-by: Niklas Cassel <niklas.cassel@axis.com>
    Reviewed-by: Lars Persson <larper@axis.com>
    Acked-by: Alexandre TORGUE <alexandre.torgue@st.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

diff --git a/include/linux/stmmac.h b/include/linux/stmmac.h
index e3cd7588623d..d76033d6726d 100644
--- a/include/linux/stmmac.h
+++ b/include/linux/stmmac.h
@@ -138,6 +138,11 @@ struct plat_stmmacenet_data {
 	int (*init)(struct platform_device *pdev, void *priv);
 	void (*exit)(struct platform_device *pdev, void *priv);
 	void *bsp_priv;
+	struct clk *stmmac_clk;
+	struct clk *pclk;
+	struct clk *clk_ptp_ref;
+	unsigned int clk_ptp_rate;
+	struct reset_control *stmmac_rst;
 	struct stmmac_axi *axi;
 	int has_gmac4;
 	bool tso_en;

commit b4b7b772e8b018286482d8d1fba7804ceac56a64
Author: jpinto <Joao.Pinto@synopsys.com>
Date:   Mon Jan 9 12:35:08 2017 +0000

    stmmac: adding DT parameter for LPI tx clock gating
    
    This patch adds a new parameter to the stmmac DT: snps,en-tx-lpi-clockgating.
    It was ported from synopsys/dwc_eth_qos.c and it is useful if lpi tx clock
    gating is needed by stmmac users also.
    
    Signed-off-by: Joao Pinto <jpinto@synopsys.com>
    Tested-by: Niklas Cassel <niklas.cassel@axis.com>
    Reviewed-by: Lars Persson <larper@axis.com>
    Acked-by: Alexandre TORGUE <alexandre.torgue@st.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

diff --git a/include/linux/stmmac.h b/include/linux/stmmac.h
index 889e0e9a3f1c..e3cd7588623d 100644
--- a/include/linux/stmmac.h
+++ b/include/linux/stmmac.h
@@ -142,5 +142,6 @@ struct plat_stmmacenet_data {
 	int has_gmac4;
 	bool tso_en;
 	int mac_port_sel_speed;
+	bool en_tx_lpi_clockgating;
 };
 #endif

commit 31b95c9bdc20663a20b3261303c2a5fc34aae133
Author: Niklas Cassel <niklas.cassel@axis.com>
Date:   Fri Dec 30 13:56:46 2016 +0100

    net: stmmac: remove unused duplicate property snps,axi_all
    
    For core revision 3.x Address-Aligned Beats is available in two registers.
    The DT property snps,aal was created for AAL in the DMA bus register,
    which is a read/write bit.
    The DT property snps,axi_all was created for AXI_AAL in the AXI bus mode
    register, which is a read only bit that reflects the value of AAL in the
    DMA bus register.
    
    Since the value of snps,axi_all is never used in the driver,
    and since the property was created for a bit that is read only,
    it should be safe to remove the property.
    
    Acked-by: Giuseppe Cavallaro <peppe.cavallaro@st.com>
    Signed-off-by: Niklas Cassel <niklas.cassel@axis.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

diff --git a/include/linux/stmmac.h b/include/linux/stmmac.h
index 266dab9ad782..889e0e9a3f1c 100644
--- a/include/linux/stmmac.h
+++ b/include/linux/stmmac.h
@@ -103,7 +103,6 @@ struct stmmac_axi {
 	u32 axi_wr_osr_lmt;
 	u32 axi_rd_osr_lmt;
 	bool axi_kbbe;
-	bool axi_axi_all;
 	u32 axi_blen[AXI_BLEN];
 	bool axi_fb;
 	bool axi_mb;

commit 4022d039a315951e59d95d22e79198d861ce4490
Author: Niklas Cassel <niklas.cassel@axis.com>
Date:   Wed Dec 7 15:20:08 2016 +0100

    net: smmac: allow configuring lower pbl values
    
    The driver currently always sets the PBLx8/PBLx4 bit, which means that
    the pbl values configured via the pbl/txpbl/rxpbl DT properties are
    always multiplied by 8/4 in the hardware.
    
    In order to allow the DT to configure lower pbl values, while at the
    same time not changing behavior of any existing device trees using the
    pbl/txpbl/rxpbl settings, add a property to disable the multiplication
    of the pbl by 8/4 in the hardware.
    
    Suggested-by: Rabin Vincent <rabinv@axis.com>
    Signed-off-by: Niklas Cassel <niklas.cassel@axis.com>
    Acked-by: Alexandre Torgue <alexandre.torgue@st.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

diff --git a/include/linux/stmmac.h b/include/linux/stmmac.h
index e6d7a5940819..266dab9ad782 100644
--- a/include/linux/stmmac.h
+++ b/include/linux/stmmac.h
@@ -90,6 +90,7 @@ struct stmmac_dma_cfg {
 	int pbl;
 	int txpbl;
 	int rxpbl;
+	bool pblx8;
 	int fixed_burst;
 	int mixed_burst;
 	bool aal;

commit 89caaa2d80b7bf9bd8632cd3137254f8c685e5db
Author: Niklas Cassel <niklas.cassel@axis.com>
Date:   Wed Dec 7 15:20:07 2016 +0100

    net: stmmac: add support for independent DMA pbl for tx/rx
    
    GMAC and newer supports independent programmable burst lengths for
    DMA tx/rx. Add new optional devicetree properties representing this.
    
    To be backwards compatible, snps,pbl will still be valid, but
    snps,txpbl/snps,rxpbl will override the value in snps,pbl if set.
    
    If the IP is synthesized to use the AXI interface, there is a register
    and a matching DT property inside the optional stmmac-axi-config DT node
    for controlling burst lengths, named snps,blen.
    However, using this register, it is not possible to control tx and rx
    independently. Also, this register is not available if the IP was
    synthesized with, e.g., the AHB interface.
    
    Signed-off-by: Niklas Cassel <niklas.cassel@axis.com>
    Acked-by: Alexandre Torgue <alexandre.torgue@st.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

diff --git a/include/linux/stmmac.h b/include/linux/stmmac.h
index 3537fb33cc90..e6d7a5940819 100644
--- a/include/linux/stmmac.h
+++ b/include/linux/stmmac.h
@@ -88,6 +88,8 @@ struct stmmac_mdio_bus_data {
 
 struct stmmac_dma_cfg {
 	int pbl;
+	int txpbl;
+	int rxpbl;
 	int fixed_burst;
 	int mixed_burst;
 	bool aal;

commit 5a3c7805c444d9d55f302a4b3930e8758be13fab
Author: Joachim Eastwood <manabian@gmail.com>
Date:   Sat Nov 5 14:04:52 2016 +0100

    Revert "net: stmmac: allow to split suspend/resume from init/exit callbacks"
    
    Instead of adding hooks inside stmmac_platform it is better to just use
    the standard PM callbacks within the specific dwmac-driver. This only
    used by the dwmac-rk driver.
    
    This reverts commit cecbc5563a02 ("stmmac: allow to split suspend/resume
    from init/exit callbacks").
    
    Signed-off-by: Joachim Eastwood <manabian@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

diff --git a/include/linux/stmmac.h b/include/linux/stmmac.h
index 705840e0438f..3537fb33cc90 100644
--- a/include/linux/stmmac.h
+++ b/include/linux/stmmac.h
@@ -135,8 +135,6 @@ struct plat_stmmacenet_data {
 	void (*bus_setup)(void __iomem *ioaddr);
 	int (*init)(struct platform_device *pdev, void *priv);
 	void (*exit)(struct platform_device *pdev, void *priv);
-	void (*suspend)(struct platform_device *pdev, void *priv);
-	void (*resume)(struct platform_device *pdev, void *priv);
 	void *bsp_priv;
 	struct stmmac_axi *axi;
 	int has_gmac4;

commit 02e57b9d7c8ce9e403f15f48fb91dd6549aaf465
Author: Giuseppe CAVALLARO <peppe.cavallaro@st.com>
Date:   Fri Jun 24 15:16:26 2016 +0200

    drivers: net: stmmac: add port selection programming
    
    In case of SGMII more, for example when a MAC2MAC connection
    is needed, the port selection bits (inside the MAC configuration
    registers) have to be programmed according to the link selected.
    So the patch adds a new DT parameter to pass the port selection
    and to programmed related PCS and CORE to use it.
    
    Signed-off-by: Giuseppe Cavallaro <peppe.cavallaro@st.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

diff --git a/include/linux/stmmac.h b/include/linux/stmmac.h
index 0507dbfbf63c..705840e0438f 100644
--- a/include/linux/stmmac.h
+++ b/include/linux/stmmac.h
@@ -141,5 +141,6 @@ struct plat_stmmacenet_data {
 	struct stmmac_axi *axi;
 	int has_gmac4;
 	bool tso_en;
+	int mac_port_sel_speed;
 };
 #endif

commit cecbc5563a02289164fa6379130243cbe08b2dd6
Author: Vincent Palatin <vpalatin@chromium.org>
Date:   Wed Jun 15 11:32:21 2016 -0700

    net: stmmac: allow to split suspend/resume from init/exit callbacks
    
    Let the stmmac platform drivers provide dedicated suspend and resume
    callbacks rather than always re-using the init and exits callbacks.
    If the driver does not provide the suspend or resume callback, we fall
    back to the old behavior trying to use exit or init.
    
    This allows a specific platform to perform only a partial power-down on
    suspend if Wake-on-Lan is enabled but always perform the full shutdown
    sequence if the module is unloaded.
    
    Signed-off-by: Vincent Palatin <vpalatin@chromium.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>

diff --git a/include/linux/stmmac.h b/include/linux/stmmac.h
index ffdaca9c01af..0507dbfbf63c 100644
--- a/include/linux/stmmac.h
+++ b/include/linux/stmmac.h
@@ -135,6 +135,8 @@ struct plat_stmmacenet_data {
 	void (*bus_setup)(void __iomem *ioaddr);
 	int (*init)(struct platform_device *pdev, void *priv);
 	void (*exit)(struct platform_device *pdev, void *priv);
+	void (*suspend)(struct platform_device *pdev, void *priv);
+	void (*resume)(struct platform_device *pdev, void *priv);
 	void *bsp_priv;
 	struct stmmac_axi *axi;
 	int has_gmac4;

commit ee2ae1ed46251dcbdcc2c59b5e30f664ddfbacb1
Author: Alexandre TORGUE <alexandre.torgue@st.com>
Date:   Fri Apr 1 11:37:33 2016 +0200

    stmmac: add new DT platform entries for GMAC4
    
    This is to support the snps,dwmac-4.00 and snps,dwmac-4.10a
    and related features on the platform driver.
    See binding doc for further details.
    
    Signed-off-by: Giuseppe Cavallaro <peppe.cavallaro@st.com>
    Signed-off-by: Alexandre TORGUE <alexandre.torgue@st.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

diff --git a/include/linux/stmmac.h b/include/linux/stmmac.h
index e6bc30a42a74..ffdaca9c01af 100644
--- a/include/linux/stmmac.h
+++ b/include/linux/stmmac.h
@@ -137,5 +137,7 @@ struct plat_stmmacenet_data {
 	void (*exit)(struct platform_device *pdev, void *priv);
 	void *bsp_priv;
 	struct stmmac_axi *axi;
+	int has_gmac4;
+	bool tso_en;
 };
 #endif

commit a7657f128c279ae5796ab2ca7d04a7819f4259f0
Author: Giuseppe CAVALLARO <peppe.cavallaro@st.com>
Date:   Fri Apr 1 09:07:16 2016 +0200

    stmmac: fix MDIO settings
    
    Initially the phy_bus_name was added to manipulate the
    driver name but it was recently just used to manage the
    fixed-link and then to take some decision at run-time.
    So the patch uses the is_pseudo_fixed_link and removes
    the phy_bus_name variable not necessary anymore.
    
    The driver can manage the mdio registration by using phy-handle,
    dwmac-mdio and own parameter e.g. snps,phy-addr.
    This patch takes care about all these possible configurations
    and fixes the mdio registration in case of there is a real
    transceiver or a switch (that needs to be managed by using
    fixed-link).
    
    Signed-off-by: Giuseppe Cavallaro <peppe.cavallaro@st.com>
    Reviewed-by: Andreas Färber <afaerber@suse.de>
    Tested-by: Frank Schäfer <fschaefer.oss@googlemail.com>
    Cc: Gabriel Fernandez <gabriel.fernandez@linaro.org>
    Cc: Dinh Nguyen <dinh.linux@gmail.com>
    Cc: David S. Miller <davem@davemloft.net>
    Cc: Phil Reid <preid@electromag.com.au>
    Signed-off-by: David S. Miller <davem@davemloft.net>

diff --git a/include/linux/stmmac.h b/include/linux/stmmac.h
index 6e53fa8942a4..e6bc30a42a74 100644
--- a/include/linux/stmmac.h
+++ b/include/linux/stmmac.h
@@ -108,12 +108,12 @@ struct stmmac_axi {
 };
 
 struct plat_stmmacenet_data {
-	char *phy_bus_name;
 	int bus_id;
 	int phy_addr;
 	int interface;
 	struct stmmac_mdio_bus_data *mdio_bus_data;
 	struct device_node *phy_node;
+	struct device_node *mdio_node;
 	struct stmmac_dma_cfg *dma_cfg;
 	int clk_csr;
 	int has_gmac;

commit d7e944c8ddc0983640a9a32868fb217485d12ca2
Author: Giuseppe CAVALLARO <peppe.cavallaro@st.com>
Date:   Fri Apr 1 09:07:15 2016 +0200

    Revert "stmmac: Fix 'eth0: No PHY found' regression"
    
    This reverts commit 88f8b1bb41c6208f81b6a480244533ded7b59493.
    due to problems on GeekBox and Banana Pi M1 board when
    connected to a real transceiver instead of a switch via
    fixed-link.
    
    Signed-off-by: Giuseppe Cavallaro <peppe.cavallaro@st.com>
    Cc: Gabriel Fernandez <gabriel.fernandez@linaro.org>
    Cc: Andreas Färber <afaerber@suse.de>
    Cc: Frank Schäfer <fschaefer.oss@googlemail.com>
    Cc: Dinh Nguyen <dinh.linux@gmail.com>
    Cc: David S. Miller <davem@davemloft.net>
    Signed-off-by: David S. Miller <davem@davemloft.net>

diff --git a/include/linux/stmmac.h b/include/linux/stmmac.h
index 4bcf5a61aada..6e53fa8942a4 100644
--- a/include/linux/stmmac.h
+++ b/include/linux/stmmac.h
@@ -114,7 +114,6 @@ struct plat_stmmacenet_data {
 	int interface;
 	struct stmmac_mdio_bus_data *mdio_bus_data;
 	struct device_node *phy_node;
-	struct device_node *mdio_node;
 	struct stmmac_dma_cfg *dma_cfg;
 	int clk_csr;
 	int has_gmac;

commit 810813c47a564416f6306ae214e2661366c987a7
Merge: d66ab5144221 e2857b8f11a2
Author: David S. Miller <davem@davemloft.net>
Date:   Tue Mar 8 12:34:12 2016 -0500

    Merge git://git.kernel.org/pub/scm/linux/kernel/git/davem/net
    
    Several cases of overlapping changes, as well as one instance
    (vxlan) of a bug fix in 'net' overlapping with code movement
    in 'net-next'.
    
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 88f8b1bb41c6208f81b6a480244533ded7b59493
Author: Gabriel Fernandez <gabriel.fernandez@linaro.org>
Date:   Mon Feb 29 17:18:22 2016 +0100

    stmmac: Fix 'eth0: No PHY found' regression
    
    This patch manages the case when you have an Ethernet MAC with
    a "fixed link", and not connected to a normal MDIO-managed PHY device.
    
    The test of phy_bus_name was not helpful because it was never affected
    and replaced by the mdio test node.
    
    Signed-off-by: Gabriel Fernandez <gabriel.fernandez@linaro.org>
    Acked-by: Giuseppe Cavallaro <peppe.cavallaro@st.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

diff --git a/include/linux/stmmac.h b/include/linux/stmmac.h
index eead8ab93c0a..881a79d52467 100644
--- a/include/linux/stmmac.h
+++ b/include/linux/stmmac.h
@@ -100,6 +100,7 @@ struct plat_stmmacenet_data {
 	int interface;
 	struct stmmac_mdio_bus_data *mdio_bus_data;
 	struct device_node *phy_node;
+	struct device_node *mdio_node;
 	struct stmmac_dma_cfg *dma_cfg;
 	int clk_csr;
 	int has_gmac;

commit afea03656add70a0e00f5b0039f87288c7af8b9f
Author: Giuseppe Cavallaro <peppe.cavallaro@st.com>
Date:   Mon Feb 29 14:27:28 2016 +0100

    stmmac: rework DMA bus setting and introduce new platform AXI structure
    
    This patch restructures the DMA bus settings and this is done
    by introducing a new platform structure used for programming
    the AXI Bus Mode Register inside the DMA module.
    This structure can be populated from device-tree as documented in the
    binding txt file.
    
    After initializing the DMA, the AXI register can be optionally tuned
    for platform drivers based.
    This patch also reworks some parameters to make coherent the DMA
    configuration now that AXI register is introduced.
    For example, the burst_len is managed by using the mentioned axi
    support above; so the snps,burst-len parameter has been removed.
    It makes sense to provide the AAL parameter from DT to Address-Aligned
    Beats inside the Register0 and review the PBL settings when initialize
    the engine.
    
    For PCI glue, rebuilding the story of this setting, it
    was added to align a configuration so not for fixing some
    known problem. No issue raised after this patch.
    It is safe to use the default burst length instead of
    tuning it to the maximum value
    
    Signed-off-by: Giuseppe Cavallaro <peppe.cavallaro@st.com>
    Signed-off-by: Alexandre TORGUE <alexandre.torgue@st.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

diff --git a/include/linux/stmmac.h b/include/linux/stmmac.h
index eead8ab93c0a..6e53fa8942a4 100644
--- a/include/linux/stmmac.h
+++ b/include/linux/stmmac.h
@@ -90,7 +90,21 @@ struct stmmac_dma_cfg {
 	int pbl;
 	int fixed_burst;
 	int mixed_burst;
-	int burst_len;
+	bool aal;
+};
+
+#define AXI_BLEN	7
+struct stmmac_axi {
+	bool axi_lpi_en;
+	bool axi_xit_frm;
+	u32 axi_wr_osr_lmt;
+	u32 axi_rd_osr_lmt;
+	bool axi_kbbe;
+	bool axi_axi_all;
+	u32 axi_blen[AXI_BLEN];
+	bool axi_fb;
+	bool axi_mb;
+	bool axi_rb;
 };
 
 struct plat_stmmacenet_data {
@@ -122,5 +136,6 @@ struct plat_stmmacenet_data {
 	int (*init)(struct platform_device *pdev, void *priv);
 	void (*exit)(struct platform_device *pdev, void *priv);
 	void *bsp_priv;
+	struct stmmac_axi *axi;
 };
 #endif

commit 75fee59550a9899fd9438ebc0a64c972829a8dd2
Author: Joachim Eastwood <manabian@gmail.com>
Date:   Wed Jul 29 00:09:03 2015 +0200

    stmmac: remove setup/free glue callbacks
    
    As all dwmac-* drivers have been converted to have a proper probe
    function the setup callback can now be removed. Also remove the
    free callback that wasn't used by any driver.
    
    New dwmac-* drivers should implement standard probe and remove
    functions to preform any needed setup and teardown.
    
    Signed-off-by: Joachim Eastwood <manabian@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

diff --git a/include/linux/stmmac.h b/include/linux/stmmac.h
index b43cd56b78e9..eead8ab93c0a 100644
--- a/include/linux/stmmac.h
+++ b/include/linux/stmmac.h
@@ -119,8 +119,6 @@ struct plat_stmmacenet_data {
 	int rx_fifo_size;
 	void (*fix_mac_speed)(void *priv, unsigned int speed);
 	void (*bus_setup)(void __iomem *ioaddr);
-	void *(*setup)(struct platform_device *pdev);
-	void (*free)(struct platform_device *pdev, void *priv);
 	int (*init)(struct platform_device *pdev, void *priv);
 	void (*exit)(struct platform_device *pdev, void *priv);
 	void *bsp_priv;

commit 0933328a1b8adb6c8b2b8c8b823dad0295659c40
Author: Joachim Eastwood <manabian@gmail.com>
Date:   Wed Jul 29 00:09:02 2015 +0200

    stmmac: remove unused stmmac_of_data struct
    
    As dwmac-* drivers that need OF match have been converted
    to use their own internal OF match data structure this can
    now be removed.
    
    Signed-off-by: Joachim Eastwood <manabian@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

diff --git a/include/linux/stmmac.h b/include/linux/stmmac.h
index c86a20047cb1..b43cd56b78e9 100644
--- a/include/linux/stmmac.h
+++ b/include/linux/stmmac.h
@@ -125,22 +125,4 @@ struct plat_stmmacenet_data {
 	void (*exit)(struct platform_device *pdev, void *priv);
 	void *bsp_priv;
 };
-
-/* of_data for SoC glue layer device tree bindings */
-
-struct stmmac_of_data {
-	int has_gmac;
-	int enh_desc;
-	int tx_coe;
-	int rx_coe;
-	int bugged_jumbo;
-	int pmt;
-	int riwt_off;
-	void (*fix_mac_speed)(void *priv, unsigned int speed);
-	void (*bus_setup)(void __iomem *ioaddr);
-	void *(*setup)(struct platform_device *pdev);
-	void (*free)(struct platform_device *pdev, void *priv);
-	int (*init)(struct platform_device *pdev, void *priv);
-	void (*exit)(struct platform_device *pdev, void *priv);
-};
 #endif

commit f4c190eb8b4f80b12dc98ce7d54a3bea0e4e7e69
Author: Joachim Eastwood <manabian@gmail.com>
Date:   Fri Jul 17 00:26:12 2015 +0200

    stmmac: drop custom_* fields from plat_stmmacenet_data
    
    Both of these fields are unused and has been unused since they
    were added 3 and 5 years ago. Drop them since they are clearly
    not very useful.
    
    Signed-off-by: Joachim Eastwood <manabian@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

diff --git a/include/linux/stmmac.h b/include/linux/stmmac.h
index c735f5c91eea..c86a20047cb1 100644
--- a/include/linux/stmmac.h
+++ b/include/linux/stmmac.h
@@ -123,8 +123,6 @@ struct plat_stmmacenet_data {
 	void (*free)(struct platform_device *pdev, void *priv);
 	int (*init)(struct platform_device *pdev, void *priv);
 	void (*exit)(struct platform_device *pdev, void *priv);
-	void *custom_cfg;
-	void *custom_data;
 	void *bsp_priv;
 };
 

commit 5790cf3c00c2f92aacba348e13f8a9a8f5dd96bd
Author: Mathieu Olivari <mathieu@codeaurora.org>
Date:   Wed May 27 11:02:47 2015 -0700

    stmmac: add phy-handle support to the platform layer
    
    On stmmac driver, PHY specification in device-tree was done using the
    non-standard property "snps,phy-addr". Specifying a PHY on a different
    MDIO bus that the one within the stmmac controller doesn't seem to be
    possible when device-tree is used.
    
    This change adds support for the phy-handle property, as specified in
    Documentation/devicetree/bindings/net/ethernet.txt.
    
    Signed-off-by: Mathieu Olivari <mathieu@codeaurora.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>

diff --git a/include/linux/stmmac.h b/include/linux/stmmac.h
index 7f484a239f53..c735f5c91eea 100644
--- a/include/linux/stmmac.h
+++ b/include/linux/stmmac.h
@@ -99,6 +99,7 @@ struct plat_stmmacenet_data {
 	int phy_addr;
 	int interface;
 	struct stmmac_mdio_bus_data *mdio_bus_data;
+	struct device_node *phy_node;
 	struct stmmac_dma_cfg *dma_cfg;
 	int clk_csr;
 	int has_gmac;

commit e7877f52fd4a8d7012f9b0faecc047a50c132a79
Author: Vince Bridgers <vbridger@opensource.altera.com>
Date:   Wed Apr 15 11:17:40 2015 -0500

    stmmac: Read tx-fifo-depth and rx-fifo-depth from the devicetree
    
    Read the tx-fifo-depth and rx-fifo-depth from the devicetree. The Synopsys
    stmmac controller fifos are configurable per product instance, and the fifo
    sizes are needed to configure certain features correctly such as flow control.
    
    Signed-off-by: Vince Bridgers <vbridger@opensource.altera.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

diff --git a/include/linux/stmmac.h b/include/linux/stmmac.h
index cd63851b57f2..7f484a239f53 100644
--- a/include/linux/stmmac.h
+++ b/include/linux/stmmac.h
@@ -114,6 +114,8 @@ struct plat_stmmacenet_data {
 	int maxmtu;
 	int multicast_filter_bins;
 	int unicast_filter_entries;
+	int tx_fifo_size;
+	int rx_fifo_size;
 	void (*fix_mac_speed)(void *priv, unsigned int speed);
 	void (*bus_setup)(void __iomem *ioaddr);
 	void *(*setup)(struct platform_device *pdev);

commit 3b57de958e2aa39abe020eb31bf19000d5899389
Author: Vince Bridgers <vbridgers2013@gmail.com>
Date:   Thu Jul 31 15:49:17 2014 -0500

    net: stmmac: Support devicetree configs for mcast and ucast filter entries
    
    This patch adds and modifies code to support multiple Multicast and Unicast
    Synopsys MAC filter configurations. The default configuration is defined to
    support legacy driver behavior, which is 64 Multicast bins. The Unicast
    filter code previously assumed all controllers support 32 or 16 Unicast
    addresses based on controller version number, but this has been corrected
    to support a default of 1 Unicast address. The filter configuration may
    be specified through the devicetree using a Synopsys specific device tree
    entry. This information was verified with Synopsys through
    Synopsys Support Case #8000684337 and shared with the maintainer.
    
    Signed-off-by: Vince Bridgers <vbridgers2013@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

diff --git a/include/linux/stmmac.h b/include/linux/stmmac.h
index 6f27d4f957bd..cd63851b57f2 100644
--- a/include/linux/stmmac.h
+++ b/include/linux/stmmac.h
@@ -112,6 +112,8 @@ struct plat_stmmacenet_data {
 	int riwt_off;
 	int max_speed;
 	int maxmtu;
+	int multicast_filter_bins;
+	int unicast_filter_entries;
 	void (*fix_mac_speed)(void *priv, unsigned int speed);
 	void (*bus_setup)(void __iomem *ioaddr);
 	void *(*setup)(struct platform_device *pdev);

commit 2618abb73c8953f0848511fc13f68da4d8337574
Author: Vince Bridgers <vbridgers2013@gmail.com>
Date:   Mon Jan 20 05:39:01 2014 -0600

    stmmac: Fix kernel crashes for jumbo frames
    
    These changes correct the following issues with jumbo frames on the
    stmmac driver:
    
    1) The Synopsys EMAC can be configured to support different FIFO
    sizes at core configuration time. There's no way to query the
    controller and know the FIFO size, so the driver needs to get this
    information from the device tree in order to know how to correctly
    handle MTU changes and setting up dma buffers. The default
    max-frame-size is as currently used, which is the size of a jumbo
    frame.
    
    2) The driver was enabling Jumbo frames by default, but was not allocating
    dma buffers of sufficient size to handle the maximum possible packet
    size that could be received. This led to memory corruption since DMAs were
    occurring beyond the extent of the allocated receive buffers for certain types
    of network traffic.
    
    kernel BUG at net/core/skbuff.c:126!
    Internal error: Oops - BUG: 0 [#1] SMP ARM
    Modules linked in:
    CPU: 0 PID: 563 Comm: sockperf Not tainted 3.13.0-rc6-01523-gf7111b9 #31
    task: ef35e580 ti: ef252000 task.ti: ef252000
    PC is at skb_panic+0x60/0x64
    LR is at skb_panic+0x60/0x64
    pc : [<c03c7c3c>]    lr : [<c03c7c3c>]    psr: 60000113
    sp : ef253c18  ip : 60000113  fp : 00000000
    r10: ef3a5400  r9 : 00000ebc  r8 : ef3a546c
    r7 : ee59f000  r6 : ee59f084  r5 : ee59ff40  r4 : ee59f140
    r3 : 000003e2  r2 : 00000007  r1 : c0b9c420  r0 : 0000007d
    Flags: nZCv  IRQs on  FIQs on  Mode SVC_32  ISA ARM  Segment user
    Control: 10c5387d  Table: 2e8ac04a  DAC: 00000015
    Process sockperf (pid: 563, stack limit = 0xef252248)
    Stack: (0xef253c18 to 0xef254000)
    3c00:                                                       00000ebc ee59f000
    3c20: ee59f084 ee59ff40 ee59f140 c04a9cd8 ee8c50c0 00000ebc ee59ff40 00000000
    3c40: ee59f140 c02d0ef0 00000056 ef1eda80 ee8c50c0 00000ebc 22bbef29 c0318f8c
    3c60: 00000056 ef3a547c ffe2c716 c02c9c90 c0ba1298 ef3a5838 ef3a5838 ef3a5400
    3c80: 000020c0 ee573840 000055cb ef3f2050 c053f0e0 c0319214 22b9b085 22d92813
    3ca0: 00001c80 004b8e00 ef3a5400 ee573840 ef3f2064 22d92813 ef3f2064 000055cb
    3cc0: ef3f2050 c031a19c ef252000 00000000 00000000 c0561bc0 00000000 ff00ffff
    3ce0: c05621c0 ef3a5400 ef3f2064 ee573840 00000020 ef3f2064 000055cb ef3f2050
    3d00: c053f0e0 c031cad0 c053e740 00000e60 00000000 00000000 ee573840 ef3a5400
    3d20: ef0a6e00 00000000 ef3f2064 c032507c 00010000 00000020 c0561bc0 c0561bc0
    3d40: ee599850 c032799c 00000000 ee573840 c055a380 ef3a5400 00000000 ef3f2064
    3d60: ef3f2050 c032799c 0101c7c0 2b6755cb c059a280 c030e4d8 000055cb ffffffff
    3d80: ee574fc0 c055a380 ee574000 ee573840 00002b67 ee573840 c03fe9c4 c053fa68
    3da0: c055a380 00001f6f 00000000 ee573840 c053f0e0 c0304fdc ef0a6e01 ef3f2050
    3dc0: ee573858 ef031000 ee573840 c03055d8 c0ba0c40 ef000f40 00100100 c053f0dc
    3de0: c053ffdc c053f0f0 00000008 00000000 ef031000 c02da948 00001140 00000000
    3e00: c0563c78 ef253e5f 00000020 ee573840 00000020 c053f0f0 ef313400 ee573840
    3e20: c053f0e0 00000000 00000000 c05380c0 ef313400 00001000 00000015 c02df280
    3e40: ee574000 ef001e00 00000000 00001080 00000042 005cd980 ef031500 ef031500
    3e60: 00000000 c02df824 ef031500 c053e390 c0541084 f00b1e00 c05925e8 c02df864
    3e80: 00001f5c ef031440 c053e390 c0278524 00000002 00000000 c0b9eb48 c02df280
    3ea0: ee8c7180 00000100 c0542ca8 00000015 00000040 ef031500 ef031500 ef031500
    3ec0: c027803c ef252000 00000040 000000ec c05380c0 c0b9eb40 c0b9eb48 c02df940
    3ee0: ef060780 ffffa4dd c0564a9c c056343c 002e80a8 00000080 ef031500 00000001
    3f00: c053808c ef252000 fffec100 00000003 00000004 002e80a8 0000000c c00258f0
    3f20: 002e80a8 c005e704 00000005 00000100 c05634d0 c0538080 c05333e0 00000000
    3f40: 0000000a c0565580 c05380c0 ffffa4dc c05434f4 00400100 00000004 c0534cd4
    3f60: 00000098 00000000 fffec100 002e80a8 00000004 002e80a8 002a20e0 c0025da8
    3f80: c0534cd4 c000f020 fffec10c c053ea60 ef253fb0 c0008530 0000ffe2 b6ef67f4
    3fa0: 40000010 ffffffff 00000124 c0012f3c 0000ffe2 002e80f0 0000ffe2 00004000
    3fc0: becb6338 becb6334 00000004 00000124 002e80a8 00000004 002e80a8 002a20e0
    3fe0: becb6300 becb62f4 002773bb b6ef67f4 40000010 ffffffff 00000000 00000000
    [<c03c7c3c>] (skb_panic+0x60/0x64) from [<c02d0ef0>] (skb_put+0x4c/0x50)
    [<c02d0ef0>] (skb_put+0x4c/0x50) from [<c0318f8c>] (tcp_collapse+0x314/0x3ec)
    [<c0318f8c>] (tcp_collapse+0x314/0x3ec) from [<c0319214>]
    (tcp_try_rmem_schedule+0x1b0/0x3c4)
    [<c0319214>] (tcp_try_rmem_schedule+0x1b0/0x3c4) from [<c031a19c>]
    (tcp_data_queue+0x480/0xe6c)
    [<c031a19c>] (tcp_data_queue+0x480/0xe6c) from [<c031cad0>]
    (tcp_rcv_established+0x180/0x62c)
    [<c031cad0>] (tcp_rcv_established+0x180/0x62c) from [<c032507c>]
    (tcp_v4_do_rcv+0x13c/0x31c)
    [<c032507c>] (tcp_v4_do_rcv+0x13c/0x31c) from [<c032799c>]
    (tcp_v4_rcv+0x718/0x73c)
    [<c032799c>] (tcp_v4_rcv+0x718/0x73c) from [<c0304fdc>]
    (ip_local_deliver+0x98/0x274)
    [<c0304fdc>] (ip_local_deliver+0x98/0x274) from [<c03055d8>]
    (ip_rcv+0x420/0x758)
    [<c03055d8>] (ip_rcv+0x420/0x758) from [<c02da948>]
    (__netif_receive_skb_core+0x44c/0x5bc)
    [<c02da948>] (__netif_receive_skb_core+0x44c/0x5bc) from [<c02df280>]
    (netif_receive_skb+0x48/0xb4)
    [<c02df280>] (netif_receive_skb+0x48/0xb4) from [<c02df824>]
    (napi_gro_flush+0x70/0x94)
    [<c02df824>] (napi_gro_flush+0x70/0x94) from [<c02df864>]
    (napi_complete+0x1c/0x34)
    [<c02df864>] (napi_complete+0x1c/0x34) from [<c0278524>]
    (stmmac_poll+0x4e8/0x5c8)
    [<c0278524>] (stmmac_poll+0x4e8/0x5c8) from [<c02df940>]
    (net_rx_action+0xc4/0x1e4)
    [<c02df940>] (net_rx_action+0xc4/0x1e4) from [<c00258f0>]
    (__do_softirq+0x12c/0x2e8)
    [<c00258f0>] (__do_softirq+0x12c/0x2e8) from [<c0025da8>] (irq_exit+0x78/0xac)
    [<c0025da8>] (irq_exit+0x78/0xac) from [<c000f020>] (handle_IRQ+0x44/0x90)
    [<c000f020>] (handle_IRQ+0x44/0x90) from [<c0008530>]
    (gic_handle_irq+0x2c/0x5c)
    [<c0008530>] (gic_handle_irq+0x2c/0x5c) from [<c0012f3c>]
    (__irq_usr+0x3c/0x60)
    
    3) The driver was setting the dma buffer size after allocating dma buffers,
    which caused a system panic when changing the MTU.
    
    BUG: Bad page state in process ifconfig  pfn:2e850
    page:c0b72a00 count:0 mapcount:0 mapping:  (null) index:0x0
    page flags: 0x200(arch_1)
    Modules linked in:
    CPU: 0 PID: 566 Comm: ifconfig Not tainted 3.13.0-rc6-01523-gf7111b9 #29
    [<c001547c>] (unwind_backtrace+0x0/0xf8) from [<c00122dc>]
    (show_stack+0x10/0x14)
    [<c00122dc>] (show_stack+0x10/0x14) from [<c03c793c>] (dump_stack+0x70/0x88)
    [<c03c793c>] (dump_stack+0x70/0x88) from [<c00b2620>] (bad_page+0xc8/0x118)
    [<c00b2620>] (bad_page+0xc8/0x118) from [<c00b302c>]
    (get_page_from_freelist+0x744/0x870)
    [<c00b302c>] (get_page_from_freelist+0x744/0x870) from [<c00b40f4>]
    (__alloc_pages_nodemask+0x118/0x86c)
    [<c00b40f4>] (__alloc_pages_nodemask+0x118/0x86c) from [<c00b4858>]
    (__get_free_pages+0x10/0x54)
    [<c00b4858>] (__get_free_pages+0x10/0x54) from [<c00cba1c>]
    (kmalloc_order_trace+0x24/0xa0)
    [<c00cba1c>] (kmalloc_order_trace+0x24/0xa0) from [<c02d199c>]
    (__kmalloc_reserve.isra.21+0x24/0x70)
    [<c02d199c>] (__kmalloc_reserve.isra.21+0x24/0x70) from [<c02d240c>]
    (__alloc_skb+0x68/0x13c)
    [<c02d240c>] (__alloc_skb+0x68/0x13c) from [<c02d3930>]
    (__netdev_alloc_skb+0x3c/0xe8)
    [<c02d3930>] (__netdev_alloc_skb+0x3c/0xe8) from [<c0279378>]
    (stmmac_open+0x63c/0x1024)
    [<c0279378>] (stmmac_open+0x63c/0x1024) from [<c02e18cc>]
    (__dev_open+0xa0/0xfc)
    [<c02e18cc>] (__dev_open+0xa0/0xfc) from [<c02e1b40>]
    (__dev_change_flags+0x94/0x158)
    [<c02e1b40>] (__dev_change_flags+0x94/0x158) from [<c02e1c24>]
    (dev_change_flags+0x18/0x48)
    [<c02e1c24>] (dev_change_flags+0x18/0x48) from [<c0337bc0>]
    (devinet_ioctl+0x638/0x700)
    [<c0337bc0>] (devinet_ioctl+0x638/0x700) from [<c02c7aec>]
    (sock_ioctl+0x64/0x290)
    [<c02c7aec>] (sock_ioctl+0x64/0x290) from [<c0100890>]
    (do_vfs_ioctl+0x78/0x5b8)
    [<c0100890>] (do_vfs_ioctl+0x78/0x5b8) from [<c0100e0c>] (SyS_ioctl+0x3c/0x5c)
    [<c0100e0c>] (SyS_ioctl+0x3c/0x5c) from [<c000e760>]
    
    The fixes have been verified using reproducible, automated testing.
    
    Signed-off-by: Vince Bridgers <vbridgers2013@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

diff --git a/include/linux/stmmac.h b/include/linux/stmmac.h
index 1367974b7e84..6f27d4f957bd 100644
--- a/include/linux/stmmac.h
+++ b/include/linux/stmmac.h
@@ -111,6 +111,7 @@ struct plat_stmmacenet_data {
 	int force_thresh_dma_mode;
 	int riwt_off;
 	int max_speed;
+	int maxmtu;
 	void (*fix_mac_speed)(void *priv, unsigned int speed);
 	void (*bus_setup)(void __iomem *ioaddr);
 	void *(*setup)(struct platform_device *pdev);

commit 022066f50f53000679d31eb407693085f37b3f14
Author: Chen-Yu Tsai <wens@csie.org>
Date:   Fri Jan 17 21:24:46 2014 +0800

    net: stmmac: Use driver data and callbacks tied with compatible strings
    
    The stmmac driver core allows passing feature flags and callbacks via
    platform data. Add a similar stmmac_of_data to pass flags and callbacks
    tied to compatible strings. This allows us to extend stmmac with glue
    layers for different SoCs.
    
    Signed-off-by: Chen-Yu Tsai <wens@csie.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>

diff --git a/include/linux/stmmac.h b/include/linux/stmmac.h
index 0a5a7aca562e..1367974b7e84 100644
--- a/include/linux/stmmac.h
+++ b/include/linux/stmmac.h
@@ -121,4 +121,22 @@ struct plat_stmmacenet_data {
 	void *custom_data;
 	void *bsp_priv;
 };
+
+/* of_data for SoC glue layer device tree bindings */
+
+struct stmmac_of_data {
+	int has_gmac;
+	int enh_desc;
+	int tx_coe;
+	int rx_coe;
+	int bugged_jumbo;
+	int pmt;
+	int riwt_off;
+	void (*fix_mac_speed)(void *priv, unsigned int speed);
+	void (*bus_setup)(void __iomem *ioaddr);
+	void *(*setup)(struct platform_device *pdev);
+	void (*free)(struct platform_device *pdev, void *priv);
+	int (*init)(struct platform_device *pdev, void *priv);
+	void (*exit)(struct platform_device *pdev, void *priv);
+};
 #endif

commit 938dfdaa3c0f92e9a490d324f3bce43bbaef7632
Author: Chen-Yu Tsai <wens@csie.org>
Date:   Fri Jan 17 21:24:42 2014 +0800

    net: stmmac: Allocate and pass soc/board specific data to callbacks
    
    The current .init and .exit callbacks requires access to driver
    private data structures. This is not a good seperation and abstraction.
    
    Instead, we add a new .setup callback for allocating private data, and
    pass the returned pointer to the other callbacks.
    
    Signed-off-by: Chen-Yu Tsai <wens@csie.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>

diff --git a/include/linux/stmmac.h b/include/linux/stmmac.h
index 33ace712e7e8..0a5a7aca562e 100644
--- a/include/linux/stmmac.h
+++ b/include/linux/stmmac.h
@@ -113,8 +113,10 @@ struct plat_stmmacenet_data {
 	int max_speed;
 	void (*fix_mac_speed)(void *priv, unsigned int speed);
 	void (*bus_setup)(void __iomem *ioaddr);
-	int (*init)(struct platform_device *pdev);
-	void (*exit)(struct platform_device *pdev);
+	void *(*setup)(struct platform_device *pdev);
+	void (*free)(struct platform_device *pdev, void *priv);
+	int (*init)(struct platform_device *pdev, void *priv);
+	void (*exit)(struct platform_device *pdev, void *priv);
 	void *custom_cfg;
 	void *custom_data;
 	void *bsp_priv;

commit 9cbadf094d9d479413dc8cfa77dff9e732184337
Author: Srinivas Kandagatla <srinivas.kandagatla@st.com>
Date:   Thu Jan 16 10:51:43 2014 +0000

    net: stmmac: support max-speed device tree property
    
    This patch adds support to "max-speed" property which is a standard
    Ethernet device tree property. max-speed specifies maximum speed
    (specified in megabits per second) supported the device.
    
    Depending on the clocking schemes some of the boards can only support
    few link speeds, so having a way to limit the link speed in the mac
    driver would allow such setups to work reliably.
    
    Without this patch there is no way to tell the driver to limit the
    link speed.
    
    Signed-off-by: Srinivas Kandagatla <srinivas.kandagatla@st.com>
    Acked-by: Giuseppe Cavallaro <peppe.cavallaro@st.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

diff --git a/include/linux/stmmac.h b/include/linux/stmmac.h
index bb5deb0feb6b..33ace712e7e8 100644
--- a/include/linux/stmmac.h
+++ b/include/linux/stmmac.h
@@ -110,6 +110,7 @@ struct plat_stmmacenet_data {
 	int force_sf_dma_mode;
 	int force_thresh_dma_mode;
 	int riwt_off;
+	int max_speed;
 	void (*fix_mac_speed)(void *priv, unsigned int speed);
 	void (*bus_setup)(void __iomem *ioaddr);
 	int (*init)(struct platform_device *pdev);

commit e2a240c7d3bcebf90936cc7c22c2729b3a4cec1f
Author: Sonic Zhang <sonic.zhang@analog.com>
Date:   Wed Aug 28 18:55:39 2013 +0800

    driver:net:stmmac: Disable DMA store and forward mode if platform data force_thresh_dma_mode is set.
    
    Some synopsys ip implementation doesn't support DMA store and forward mode,
    such as BF60x. So, set force_thresh_dma_mode to use DMA thresholds only.
    Update document and devicetree as well.
    
    Signed-off-by: Sonic Zhang <sonic.zhang@analog.com>
    Acked-by: Giuseppe Cavallaro <peppe.cavallaro@st.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

diff --git a/include/linux/stmmac.h b/include/linux/stmmac.h
index 9e495d31516e..bb5deb0feb6b 100644
--- a/include/linux/stmmac.h
+++ b/include/linux/stmmac.h
@@ -108,6 +108,7 @@ struct plat_stmmacenet_data {
 	int bugged_jumbo;
 	int pmt;
 	int force_sf_dma_mode;
+	int force_thresh_dma_mode;
 	int riwt_off;
 	void (*fix_mac_speed)(void *priv, unsigned int speed);
 	void (*bus_setup)(void __iomem *ioaddr);

commit 0e0764715d8116484d808f5b3985ca043080788e
Author: Srinivas Kandagatla <srinivas.kandagatla@st.com>
Date:   Thu Jul 4 10:35:48 2013 +0100

    dt:net:stmmac: Add dt specific phy reset callback support.
    
    This patch adds phy reset callback support for stmmac driver via device
    trees. It adds three new properties to gmac device tree bindings to
    define the reset signal via gpio.
    
    With this patch users can conveniently pass reset gpio number with pre,
    pulse and post delay in micro secs via DTs.
    
     active low:
                    _________                ____________
            <pre-delay>     |<pulse-delay>  |<post-delay>
                            |               |
                            |_______________|
    
     active high:
                             ________________
            <pre-delay>     |<pulse-delay>  |<post-delay>
                            |               |
                    ________|               |___________
    
    Signed-off-by: Srinivas Kandagatla <srinivas.kandagatla@st.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

diff --git a/include/linux/stmmac.h b/include/linux/stmmac.h
index c1b3ed3fb787..9e495d31516e 100644
--- a/include/linux/stmmac.h
+++ b/include/linux/stmmac.h
@@ -80,6 +80,10 @@ struct stmmac_mdio_bus_data {
 	unsigned int phy_mask;
 	int *irqs;
 	int probed_phy_irq;
+#ifdef CONFIG_OF
+	int reset_gpio, active_low;
+	u32 delays[3];
+#endif
 };
 
 struct stmmac_dma_cfg {

commit a2013a13e68354e0c8f3696b69701803e13fb737
Merge: dadfab487325 106f9d9337f6
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Thu Dec 13 12:00:02 2012 -0800

    Merge branch 'for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/jikos/trivial
    
    Pull trivial branch from Jiri Kosina:
     "Usual stuff -- comment/printk typo fixes, documentation updates, dead
      code elimination."
    
    * 'for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/jikos/trivial: (39 commits)
      HOWTO: fix double words typo
      x86 mtrr: fix comment typo in mtrr_bp_init
      propagate name change to comments in kernel source
      doc: Update the name of profiling based on sysfs
      treewide: Fix typos in various drivers
      treewide: Fix typos in various Kconfig
      wireless: mwifiex: Fix typo in wireless/mwifiex driver
      messages: i2o: Fix typo in messages/i2o
      scripts/kernel-doc: check that non-void fcts describe their return value
      Kernel-doc: Convention: Use a "Return" section to describe return values
      radeon: Fix typo and copy/paste error in comments
      doc: Remove unnecessary declarations from Documentation/accounting/getdelays.c
      various: Fix spelling of "asynchronous" in comments.
      Fix misspellings of "whether" in comments.
      eisa: Fix spelling of "asynchronous".
      various: Fix spelling of "registered" in comments.
      doc: fix quite a few typos within Documentation
      target: iscsi: fix comment typos in target/iscsi drivers
      treewide: fix typo of "suport" in various comments and Kconfig
      treewide: fix typo of "suppport" in various comments
      ...

commit 62a2ab935c8d0f8643d02d3696abc401b5da6206
Author: Giuseppe CAVALLARO <peppe.cavallaro@st.com>
Date:   Sun Nov 25 23:10:43 2012 +0000

    stmmac: add Rx watchdog support to mitigate the DMA irqs
    
    GMAC devices newer than databook 3.40 has an embedded timer
    that can be used for mitigating the number of interrupts.
    So this patch adds this optimizations.
    
    At any rate, the Rx watchdog can be disable (on bugged HW) by
    passing from the platform the riwt_off field.
    
    In this implementation the rx timer stored in the Reg9 is fixed
    to the max value. This will be tuned by using ethtool.
    
    V2: added a platform parameter to force to disable the rx-watchdog
    for example on new core where it is bugged.
    
    V3: do not disable NAPI when Rx watchdog is used.
    
    V4: a new extra statistic field has been added to show the early
    receive status in the interrupt handler.
    This patch also adds an extra check to avoid to call
    napi_schedule when the DMA_INTR_ENA_RIE bit is disabled in the
    Interrupt Mask register.
    
    Signed-off-by: Giuseppe Cavallaro <peppe.cavallaro@st.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

diff --git a/include/linux/stmmac.h b/include/linux/stmmac.h
index a1547ea3920d..de5b2f8176ce 100644
--- a/include/linux/stmmac.h
+++ b/include/linux/stmmac.h
@@ -104,6 +104,7 @@ struct plat_stmmacenet_data {
 	int bugged_jumbo;
 	int pmt;
 	int force_sf_dma_mode;
+	int riwt_off;
 	void (*fix_mac_speed)(void *priv, unsigned int speed);
 	void (*bus_setup)(void __iomem *ioaddr);
 	int (*init)(struct platform_device *pdev);

commit 02582e9bcc36ed503ffede46e104a885dea222fb
Author: Masanari Iida <standby24x7@gmail.com>
Date:   Wed Aug 22 19:11:26 2012 +0900

    treewide: fix typo of "suport" in various comments and Kconfig
    
    Signed-off-by: Masanari Iida <standby24x7@gmail.com>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>

diff --git a/include/linux/stmmac.h b/include/linux/stmmac.h
index a1547ea3920d..a619f7025cc9 100644
--- a/include/linux/stmmac.h
+++ b/include/linux/stmmac.h
@@ -61,7 +61,7 @@
 #define STMMAC_CSR_I_16		0xE	/* clk_csr_i/16 */
 #define STMMAC_CSR_I_18		0xF	/* clk_csr_i/18 */
 
-/* AXI DMA Burst length suported */
+/* AXI DMA Burst length supported */
 #define DMA_AXI_BLEN_4		(1 << 1)
 #define DMA_AXI_BLEN_8		(1 << 2)
 #define DMA_AXI_BLEN_16		(1 << 3)

commit d56631a66c0d0c9d662abfb38cd1f6326eeebd7c
Author: Srinivas Kandagatla <srinivas.kandagatla@st.com>
Date:   Thu Aug 30 05:50:43 2012 +0000

    net:stmmac: Remove bus_id from mdio platform data.
    
    This patch removes bus_id from mdio platform data, The reason to remove
    bus_id is, stmmac mdio bus_id is always same as stmmac bus-id, so there
    is no point in passing this in different variable.
    Also stmmac ethernet driver connects to phy with bus_id passed its
    platform data.
    So, having single bus-id is much simpler.
    
    Signed-off-by: Srinivas Kandagatla <srinivas.kandagatla@st.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

diff --git a/include/linux/stmmac.h b/include/linux/stmmac.h
index b69bdb1e08b6..a1547ea3920d 100644
--- a/include/linux/stmmac.h
+++ b/include/linux/stmmac.h
@@ -76,7 +76,6 @@
 /* Platfrom data for platform device structure's platform_data field */
 
 struct stmmac_mdio_bus_data {
-	int bus_id;
 	int (*phy_reset)(void *priv);
 	unsigned int phy_mask;
 	int *irqs;

commit b9cde0a8be876c680cc549daa6246256864473fb
Author: Giuseppe CAVALLARO <peppe.cavallaro@st.com>
Date:   Sun May 13 22:18:42 2012 +0000

    stmmac: add mixed burst for DMA
    
    In mixed burst (MB) mode, the AHB master always initiates
    the bursts with fixed-size when the DMA requests transfers
    of size less than or equal to 16 beats.
    This patch adds the MB support and the flag that can be
    passed from the platform to select it.
    MB mode can also give some benefits in terms of performances
    on some platforms.
    
    v2: fixed Coding Style
    
    Signed-off-by: Giuseppe Cavallaro <peppe.cavallaro@st.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

diff --git a/include/linux/stmmac.h b/include/linux/stmmac.h
index f85c93d6e6da..b69bdb1e08b6 100644
--- a/include/linux/stmmac.h
+++ b/include/linux/stmmac.h
@@ -86,6 +86,7 @@ struct stmmac_mdio_bus_data {
 struct stmmac_dma_cfg {
 	int pbl;
 	int fixed_burst;
+	int mixed_burst;
 	int burst_len;
 };
 

commit 3256251f9850d00c8e4a4fd82440092bb0f1fd7d
Author: Francesco Virlinzi <francesco.virlinzi@st.com>
Date:   Wed Apr 18 19:48:19 2012 +0000

    stmmac: use custom init/exit functions in pm ops
    
    Freeze and restore can call the custom init/exit functions.
    Also the patch adds a custom data field that can be used
    for storing platform data useful on restore the embedded
    setup (e.g. GPIO, SYSCFG).
    
    Signed-off-by: Francesco Virlinzi <francesco.virlinzi@st.com>
    Signed-off-by: Giuseppe Cavallaro <peppe.cavallaro@st.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

diff --git a/include/linux/stmmac.h b/include/linux/stmmac.h
index cf6403186359..f85c93d6e6da 100644
--- a/include/linux/stmmac.h
+++ b/include/linux/stmmac.h
@@ -109,6 +109,7 @@ struct plat_stmmacenet_data {
 	int (*init)(struct platform_device *pdev);
 	void (*exit)(struct platform_device *pdev);
 	void *custom_cfg;
+	void *custom_data;
 	void *bsp_priv;
 };
 #endif

commit 18f05d64ec36e27892cc0f55be707762aae053a1
Author: Giuseppe CAVALLARO <peppe.cavallaro@st.com>
Date:   Wed Apr 4 04:33:26 2012 +0000

    stmmac: extend CSR Clock Range programming
    
    The CSR Clock Range has been reworked and new macros has
    been added in the platform header to allow the CSR Clock
    Range selection in the GMII Address Register.
    The previous work didn't add the other fields
    that can be used to achieve MDC clock of frequency
    higher than the IEEE 802.3 specified frequency limit
    of 2.5 MHz and program a clock divider of lower value.
    On such platforms, these are used indeed so this patch
    adds them.
    
    Signed-off-by: Giuseppe Cavallaro <peppe.cavallaro@st.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

diff --git a/include/linux/stmmac.h b/include/linux/stmmac.h
index 4aef9baff12b..cf6403186359 100644
--- a/include/linux/stmmac.h
+++ b/include/linux/stmmac.h
@@ -37,28 +37,29 @@
  * This could also be configured at run time using CPU freq framework. */
 
 /* MDC Clock Selection define*/
-#define	STMMAC_CSR_60_100M	0	/* MDC = clk_scr_i/42 */
-#define	STMMAC_CSR_100_150M	1	/* MDC = clk_scr_i/62 */
-#define	STMMAC_CSR_20_35M	2	/* MDC = clk_scr_i/16 */
-#define	STMMAC_CSR_35_60M	3	/* MDC = clk_scr_i/26 */
-#define	STMMAC_CSR_150_250M	4	/* MDC = clk_scr_i/102 */
-#define	STMMAC_CSR_250_300M	5	/* MDC = clk_scr_i/122 */
-
-/* FIXME: The MDC clock could be set higher than the IEEE 802.3
+#define	STMMAC_CSR_60_100M	0x0	/* MDC = clk_scr_i/42 */
+#define	STMMAC_CSR_100_150M	0x1	/* MDC = clk_scr_i/62 */
+#define	STMMAC_CSR_20_35M	0x2	/* MDC = clk_scr_i/16 */
+#define	STMMAC_CSR_35_60M	0x3	/* MDC = clk_scr_i/26 */
+#define	STMMAC_CSR_150_250M	0x4	/* MDC = clk_scr_i/102 */
+#define	STMMAC_CSR_250_300M	0x5	/* MDC = clk_scr_i/122 */
+
+/* The MDC clock could be set higher than the IEEE 802.3
  * specified frequency limit 0f 2.5 MHz, by programming a clock divider
  * of value different than the above defined values. The resultant MDIO
  * clock frequency of 12.5 MHz is applicable for the interfacing chips
  * supporting higher MDC clocks.
  * The MDC clock selection macros need to be defined for MDC clock rate
  * of 12.5 MHz, corresponding to the following selection.
- * 1000 clk_csr_i/4
- * 1001 clk_csr_i/6
- * 1010 clk_csr_i/8
- * 1011 clk_csr_i/10
- * 1100 clk_csr_i/12
- * 1101 clk_csr_i/14
- * 1110 clk_csr_i/16
- * 1111 clk_csr_i/18 */
+ */
+#define STMMAC_CSR_I_4		0x8	/* clk_csr_i/4 */
+#define STMMAC_CSR_I_6		0x9	/* clk_csr_i/6 */
+#define STMMAC_CSR_I_8		0xA	/* clk_csr_i/8 */
+#define STMMAC_CSR_I_10		0xB	/* clk_csr_i/10 */
+#define STMMAC_CSR_I_12		0xC	/* clk_csr_i/12 */
+#define STMMAC_CSR_I_14		0xD	/* clk_csr_i/14 */
+#define STMMAC_CSR_I_16		0xE	/* clk_csr_i/16 */
+#define STMMAC_CSR_I_18		0xF	/* clk_csr_i/18 */
 
 /* AXI DMA Burst length suported */
 #define DMA_AXI_BLEN_4		(1 << 1)

commit 8327eb65e795ba4f922bf7e531cd312875f0dc29
Author: Deepak SIKRI <deepak.sikri@st.com>
Date:   Wed Apr 4 04:33:23 2012 +0000

    stmmac: re-work the internal GMAC DMA platf parameters
    
    This patch re-works the internal GMAC DMA parameters
    passed from the platform.
    In the past, we only passed the pbl but, with new core,
    other parameters can be passed and are mandatory on some
    platforms.
    
    New parameters are documented in stmmac.txt because this
    patch has an impact for many platforms.
    
    Signed-off-by: Shiraz Hashim <shiraz.hashim@st.com>
    Signed-off-by: Vikas Manocha <vikas.manocha@st.com>
    Signed-off-by: Deepak Sikri <deepak.sikri@st.com>
    Hacked-by: Giuseppe Cavallaro <peppe.cavallaro@st.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

diff --git a/include/linux/stmmac.h b/include/linux/stmmac.h
index e5292828b684..4aef9baff12b 100644
--- a/include/linux/stmmac.h
+++ b/include/linux/stmmac.h
@@ -60,6 +60,18 @@
  * 1110 clk_csr_i/16
  * 1111 clk_csr_i/18 */
 
+/* AXI DMA Burst length suported */
+#define DMA_AXI_BLEN_4		(1 << 1)
+#define DMA_AXI_BLEN_8		(1 << 2)
+#define DMA_AXI_BLEN_16		(1 << 3)
+#define DMA_AXI_BLEN_32		(1 << 4)
+#define DMA_AXI_BLEN_64		(1 << 5)
+#define DMA_AXI_BLEN_128	(1 << 6)
+#define DMA_AXI_BLEN_256	(1 << 7)
+#define DMA_AXI_BLEN_ALL (DMA_AXI_BLEN_4 | DMA_AXI_BLEN_8 | DMA_AXI_BLEN_16 \
+			| DMA_AXI_BLEN_32 | DMA_AXI_BLEN_64 \
+			| DMA_AXI_BLEN_128 | DMA_AXI_BLEN_256)
+
 /* Platfrom data for platform device structure's platform_data field */
 
 struct stmmac_mdio_bus_data {
@@ -70,13 +82,19 @@ struct stmmac_mdio_bus_data {
 	int probed_phy_irq;
 };
 
+struct stmmac_dma_cfg {
+	int pbl;
+	int fixed_burst;
+	int burst_len;
+};
+
 struct plat_stmmacenet_data {
 	char *phy_bus_name;
 	int bus_id;
 	int phy_addr;
 	int interface;
 	struct stmmac_mdio_bus_data *mdio_bus_data;
-	int pbl;
+	struct stmmac_dma_cfg *dma_cfg;
 	int clk_csr;
 	int has_gmac;
 	int enh_desc;

commit faeae3fa0f3a243f677cf606aa87d0d99c225165
Author: Deepak SIKRI <deepak.sikri@st.com>
Date:   Wed Apr 4 04:33:22 2012 +0000

    stmmac: Define MDC clock selection macros
    
    The patch adds the macros to be used for MDC clock selection. The MDC clock
    frequency is based on scaled system clock, and has to be confined to a range
    of 1-2.5 MHz. Based on the input CSR clock, the scaling factor has to be
    selected.
    The platform specific code will provide the default value of this scaling
    factor, based on the input CSR clock.
    There is an option to set MDC clock higher than the IEEE 802.3 specified
    frequency limit of 2.5 MHz. This applies for the interfacing chips that
    support higher MDC clocks. The resultant higher clock of 12.5 MHz requires
    additional Macros to be defined for the clock divider corresponding to the
    to the following selection.
    -----------------------------------------
            Selection       MDC Clock
    -----------------------------------------
            1000            clk_csr_i/4
            1001            clk_csr_i/6
            1010            clk_csr_i/8
            1011            clk_csr_i/10
            1100            clk_csr_i/12
            1101            clk_csr_i/14
            1110            clk_csr_i/16
            1111            clk_csr_i/18
    
    This support has to be added both in the include file, as well as driver. The
    driver need to program the registers based on the interfacing chips. This would
    be more board specific information and needs to be passed through the platform
    code to the driver. This work would be carried out in the future patch set
    release.
    
    Signed-off-by: Deepak Sikri <deepak.sikri@st.com>
    Acked-by: Giuseppe Cavallaro <peppe.cavallaro@st.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

diff --git a/include/linux/stmmac.h b/include/linux/stmmac.h
index a9b4d6cb96e9..e5292828b684 100644
--- a/include/linux/stmmac.h
+++ b/include/linux/stmmac.h
@@ -32,6 +32,34 @@
 #define STMMAC_RX_COE_TYPE1	1
 #define STMMAC_RX_COE_TYPE2	2
 
+/* Define the macros for CSR clock range parameters to be passed by
+ * platform code.
+ * This could also be configured at run time using CPU freq framework. */
+
+/* MDC Clock Selection define*/
+#define	STMMAC_CSR_60_100M	0	/* MDC = clk_scr_i/42 */
+#define	STMMAC_CSR_100_150M	1	/* MDC = clk_scr_i/62 */
+#define	STMMAC_CSR_20_35M	2	/* MDC = clk_scr_i/16 */
+#define	STMMAC_CSR_35_60M	3	/* MDC = clk_scr_i/26 */
+#define	STMMAC_CSR_150_250M	4	/* MDC = clk_scr_i/102 */
+#define	STMMAC_CSR_250_300M	5	/* MDC = clk_scr_i/122 */
+
+/* FIXME: The MDC clock could be set higher than the IEEE 802.3
+ * specified frequency limit 0f 2.5 MHz, by programming a clock divider
+ * of value different than the above defined values. The resultant MDIO
+ * clock frequency of 12.5 MHz is applicable for the interfacing chips
+ * supporting higher MDC clocks.
+ * The MDC clock selection macros need to be defined for MDC clock rate
+ * of 12.5 MHz, corresponding to the following selection.
+ * 1000 clk_csr_i/4
+ * 1001 clk_csr_i/6
+ * 1010 clk_csr_i/8
+ * 1011 clk_csr_i/10
+ * 1100 clk_csr_i/12
+ * 1101 clk_csr_i/14
+ * 1110 clk_csr_i/16
+ * 1111 clk_csr_i/18 */
+
 /* Platfrom data for platform device structure's platform_data field */
 
 struct stmmac_mdio_bus_data {

commit 55f9a4d6facb35198ddb88a8fe21ca2ee753af7a
Author: Deepak SIKRI <deepak.sikri@st.com>
Date:   Wed Apr 4 04:33:20 2012 +0000

    stmmac: Define CSUM offload engine Types
    
    This patch explicitly defines the CSUM offload engine type which need
    (not mandatory) to be passed from the platform code.
    STMMAC core supports two check sum offload engine types- Type-1 & Type-2.
    Also, there are STMMAC cores that do not have the check sum offload
    capabilities.
    
    The behaviour of Type-1 & Type-2 cores related to provision of checksum
    increases the packet length for Type-1 cores by 2, as the checksum is appended
    at the end of data packet and the same is made accountable in the DMA status.
    The STMMAC cores beyond Version-3.5 provide HW interface registers which allows
    the user to read the HW capabilities, while to support the previous cores the
    information related to HW capabilities has to be provided from the platform
    code.
    
    The Type-1 cores which do not have the HW register interface need this
    information.
    
    This patch also updates the driver's doc.
    
    Signed-off-by: Deepak Sikri <deepak.sikri@st.com>
    Hacked-by: Giuseppe Cavallaro <peppe.cavallaro@st.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

diff --git a/include/linux/stmmac.h b/include/linux/stmmac.h
index 172b5e15df2e..a9b4d6cb96e9 100644
--- a/include/linux/stmmac.h
+++ b/include/linux/stmmac.h
@@ -28,6 +28,10 @@
 
 #include <linux/platform_device.h>
 
+#define STMMAC_RX_COE_NONE	0
+#define STMMAC_RX_COE_TYPE1	1
+#define STMMAC_RX_COE_TYPE2	2
+
 /* Platfrom data for platform device structure's platform_data field */
 
 struct stmmac_mdio_bus_data {
@@ -49,6 +53,7 @@ struct plat_stmmacenet_data {
 	int has_gmac;
 	int enh_desc;
 	int tx_coe;
+	int rx_coe;
 	int bugged_jumbo;
 	int pmt;
 	int force_sf_dma_mode;

commit f142af2e2064546ac470e8690acbd189b3584e67
Author: Srinivas Kandagatla <srinivas.kandagatla@st.com>
Date:   Wed Apr 4 04:33:19 2012 +0000

    stmmac: Allow stmmac to work with other PHY buses(v3).
    
    As stmmac mdio bus name prefix is hardcoded in the driver, this allows
    only phys on stmmac mdio buses to connect, however stmmac should allow
    phys on other mdio buses too.
    
    This patch adds new variable phy_bus_name to plat_stmmacenet_data
    struct to let the BSP decide which phy bus to be used by stmmac driver.
    A typical use-case is to have generic MDIO buses like mdio-gpio on top
    of stmmac.
    
    Signed-off-by: Srinivas Kandagatla <srinivas.kandagatla@st.com>
    Acked-by: Florian Fainelli <florian@openwrt.org>
    Signed-off-by: Giuseppe Cavallaro <peppe.cavallaro@st.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

diff --git a/include/linux/stmmac.h b/include/linux/stmmac.h
index 0dddc9e42b6b..172b5e15df2e 100644
--- a/include/linux/stmmac.h
+++ b/include/linux/stmmac.h
@@ -39,6 +39,7 @@ struct stmmac_mdio_bus_data {
 };
 
 struct plat_stmmacenet_data {
+	char *phy_bus_name;
 	int bus_id;
 	int phy_addr;
 	int interface;

commit 36bcfe7d74782c07f601edc4831f6b1ef40e9e43
Author: Giuseppe CAVALLARO <peppe.cavallaro@st.com>
Date:   Wed Jul 20 00:05:23 2011 +0000

    stmmac: unify MAC and PHY configuration parameters (V2)
    
    Prior to this change, most PHY configuration parameters were passed
    into the STMMAC device as a separate PHY device. As well as being
    unusual, this made it difficult to make changes to the MAC/PHY
    relationship.
    
    This patch moves all the PHY parameters into the MAC configuration
    structure, mainly as a separate structure. This allows us to completely
    ignore the MDIO bus attached to a stmmac if desired, and not create
    the PHY bus. It also allows the stmmac driver to use a different PHY
    from the one it is connected to, for example a fixed PHY or bit banging
    PHY.
    
    Also derive the stmmac/PHY connection type (MII/RMII etc) from the
    mode can be passed into <platf>_configure_ethernet.
    STLinux kernel at git://git.stlinux.com/stm/linux-sh4-2.6.32.y.git
    provides several examples how to use this new infrastructure (that
    actually is easier to maintain and clearer).
    
    Signed-off-by: Stuart Menefy <stuart.menefy@st.com>
    Signed-off-by: Giuseppe Cavallaro <peppe.cavallaro@st.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

diff --git a/include/linux/stmmac.h b/include/linux/stmmac.h
index 05d775690b72..0dddc9e42b6b 100644
--- a/include/linux/stmmac.h
+++ b/include/linux/stmmac.h
@@ -28,11 +28,21 @@
 
 #include <linux/platform_device.h>
 
-/* platform data for platform device structure's platform_data field */
+/* Platfrom data for platform device structure's platform_data field */
+
+struct stmmac_mdio_bus_data {
+	int bus_id;
+	int (*phy_reset)(void *priv);
+	unsigned int phy_mask;
+	int *irqs;
+	int probed_phy_irq;
+};
 
-/* Private data for the STM on-board ethernet driver */
 struct plat_stmmacenet_data {
 	int bus_id;
+	int phy_addr;
+	int interface;
+	struct stmmac_mdio_bus_data *mdio_bus_data;
 	int pbl;
 	int clk_csr;
 	int has_gmac;
@@ -48,14 +58,4 @@ struct plat_stmmacenet_data {
 	void *custom_cfg;
 	void *bsp_priv;
 };
-
-struct plat_stmmacphy_data {
-	int bus_id;
-	int phy_addr;
-	unsigned int phy_mask;
-	int interface;
-	int (*phy_reset)(void *priv);
-	void *priv;
-};
 #endif
-

commit 61b8013a114cb041db2c56f747953cac69637f26
Author: Srinivas Kandagatla <srinivas.kandagatla@st.com>
Date:   Sun Jul 17 20:54:09 2011 +0000

    stmmac: Allow SOCs to use Store forward mode eventhough tx_coe is 0. (V2)
    
    This patch adds new field 'force_sf_dma_mode' to plat_stmmacenet_data
    struct to allow users to specify if they want to use force store forward
    eventhough tx_coe is not available in hw.
    without this flag stmmac driver will use cut-thru mode not use
    store-forward mode.
    
    Signed-off-by: Srinivas Kandagatla <srinivas.kandagatla@st.com>
    Signed-off-by: Giuseppe Cavallaro <peppe.cavallaro@st.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

diff --git a/include/linux/stmmac.h b/include/linux/stmmac.h
index 9529e49b0385..05d775690b72 100644
--- a/include/linux/stmmac.h
+++ b/include/linux/stmmac.h
@@ -40,6 +40,7 @@ struct plat_stmmacenet_data {
 	int tx_coe;
 	int bugged_jumbo;
 	int pmt;
+	int force_sf_dma_mode;
 	void (*fix_mac_speed)(void *priv, unsigned int speed);
 	void (*bus_setup)(void __iomem *ioaddr);
 	int (*init)(struct platform_device *pdev);

commit 57a503c61db077b923e23f36050c02166a4a1db2
Author: Viresh KUMAR <viresh.kumar@st.com>
Date:   Mon May 2 18:36:45 2011 +0000

    net/stmmac: Move "#include <linux/platform_device.h>" to linux/stmmac.h
    
    stmmac.h uses struct platform_device and doesn't include
    <linux/platform_device.h>. Whereas drivers/net/stmmac/stmmac.h includes it, but
    doesn't directly use it. And so we get following compilation warning while using
    this file:
            warning: ‘struct platform_device’ declared inside parameter list
    
    This patch includes <linux/platform_device.h> in linux/stmmac.h and removes it
    from drivers/net/stmmac/stmmac.h
    
    Signed-off-by: Viresh Kumar <viresh.kumar@st.com>
    Acked-by: Giuseppe Cavallaro <peppe.cavallaro@st.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

diff --git a/include/linux/stmmac.h b/include/linux/stmmac.h
index f29197a4b227..9529e49b0385 100644
--- a/include/linux/stmmac.h
+++ b/include/linux/stmmac.h
@@ -26,6 +26,8 @@
 #ifndef __STMMAC_PLATFORM_DATA
 #define __STMMAC_PLATFORM_DATA
 
+#include <linux/platform_device.h>
+
 /* platform data for platform device structure's platform_data field */
 
 /* Private data for the STM on-board ethernet driver */

commit 25985edcedea6396277003854657b5f3cb31a628
Author: Lucas De Marchi <lucas.demarchi@profusion.mobi>
Date:   Wed Mar 30 22:57:33 2011 -0300

    Fix common misspellings
    
    Fixes generated by 'codespell' and manually reviewed.
    
    Signed-off-by: Lucas De Marchi <lucas.demarchi@profusion.mobi>

diff --git a/include/linux/stmmac.h b/include/linux/stmmac.h
index e10352915698..f29197a4b227 100644
--- a/include/linux/stmmac.h
+++ b/include/linux/stmmac.h
@@ -26,7 +26,7 @@
 #ifndef __STMMAC_PLATFORM_DATA
 #define __STMMAC_PLATFORM_DATA
 
-/* platfrom data for platfrom device structure's platfrom_data field */
+/* platform data for platform device structure's platform_data field */
 
 /* Private data for the STM on-board ethernet driver */
 struct plat_stmmacenet_data {

commit 293bb1c41b728d4aa248fe8a0acd2b9066ff5c34
Author: Giuseppe CAVALLARO <peppe.cavallaro@st.com>
Date:   Wed Nov 24 02:38:05 2010 +0000

    stmmac: add init/exit callback in plat_stmmacenet_data struct
    
    This patch adds in the plat_stmmacenet_data
    the init and exit callbacks that can be used
    for invoking specific platform functions.
    For example, on ST targets, these call the
    PAD manager functions to set PIO lines and
    syscfg registers.
    The patch removes the stmmac_claim_resource
    only used on STM Kernels as well.
    
    Signed-off-by: Giuseppe Cavallaro <peppe.cavallaro@st.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

diff --git a/include/linux/stmmac.h b/include/linux/stmmac.h
index d66c61774d95..e10352915698 100644
--- a/include/linux/stmmac.h
+++ b/include/linux/stmmac.h
@@ -40,9 +40,9 @@ struct plat_stmmacenet_data {
 	int pmt;
 	void (*fix_mac_speed)(void *priv, unsigned int speed);
 	void (*bus_setup)(void __iomem *ioaddr);
-#ifdef CONFIG_STM_DRIVERS
-	struct stm_pad_config *pad_config;
-#endif
+	int (*init)(struct platform_device *pdev);
+	void (*exit)(struct platform_device *pdev);
+	void *custom_cfg;
 	void *bsp_priv;
 };
 

commit 543876c92837a8b208b5c99ec225c1f5a581900e
Author: Giuseppe Cavallaro <peppe.cavallaro@st.com>
Date:   Fri Sep 24 21:27:41 2010 -0700

    stmmac: review the wake-up support
    
    If the PM support is available this is passed
    through the platform instead to be hard-coded
    in the core files.
    WoL on Magic Frame can be enabled by using
    the ethtool support.
    
    Signed-off-by: Giuseppe Cavallaro <peppe.cavallaro@st.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

diff --git a/include/linux/stmmac.h b/include/linux/stmmac.h
index 1d8baf719211..d66c61774d95 100644
--- a/include/linux/stmmac.h
+++ b/include/linux/stmmac.h
@@ -37,6 +37,7 @@ struct plat_stmmacenet_data {
 	int enh_desc;
 	int tx_coe;
 	int bugged_jumbo;
+	int pmt;
 	void (*fix_mac_speed)(void *priv, unsigned int speed);
 	void (*bus_setup)(void __iomem *ioaddr);
 #ifdef CONFIG_STM_DRIVERS

commit ebbb293f8b3021ae2009fcb7cb3b8a52fb5fd06a
Author: Giuseppe CAVALLARO <peppe.cavallaro@st.com>
Date:   Fri Sep 17 03:23:40 2010 +0000

    stmmac: consolidate and tidy-up the COE support
    
    The first version of the driver had hard-coded the logic
    for handling the checksum offloading.
    This was designed according to the chips included in
    the STM platforms where:
    o MAC10/100 supports no COE at all.
    o GMAC fully supports RX/TX COE.
    
    This is not good for other chip configurations where,
    for example, the mac10/100 supports the tx csum in HW
    or when the GMAC has no IPC.
    
    Thanks to Johannes Stezenbach; he provided me a first
    draft of this patch that only reviewed the IPC for the
    GMAC devices.
    
    This patch also helps on SPEAr platforms where the
    MAC10/100 can perform the TX csum in HW.
    Thanks to Deepak SIKRI for his support on this.
    
    In the end, GMAC devices for STM platforms have
    a bugged Jumbo frame support that needs to have
    the Tx COE disabled for oversized frames (due to
    limited buffer sizes). This information is also
    passed through the driver's platform structure.
    
    Signed-off-by: Giuseppe Cavallaro <peppe.cavallaro@st.com>
    Signed-off-by: Johannes Stezenbach <js@sig21.net>
    Signed-off-by: Deepak SIKRI <deepak.sikri@st.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

diff --git a/include/linux/stmmac.h b/include/linux/stmmac.h
index c87c88ccffc0..1d8baf719211 100644
--- a/include/linux/stmmac.h
+++ b/include/linux/stmmac.h
@@ -35,6 +35,8 @@ struct plat_stmmacenet_data {
 	int clk_csr;
 	int has_gmac;
 	int enh_desc;
+	int tx_coe;
+	int bugged_jumbo;
 	void (*fix_mac_speed)(void *priv, unsigned int speed);
 	void (*bus_setup)(void __iomem *ioaddr);
 #ifdef CONFIG_STM_DRIVERS

commit dfb8fb96ae2b5126cd0c08c0ccd7c42e1f46568a
Author: Giuseppe CAVALLARO <peppe.cavallaro@st.com>
Date:   Fri Sep 17 03:23:39 2010 +0000

    stmmac: add CSR Clock range selection
    
    This patch adds the CSR Clock range selection.
    
    Original patch from Johannes Stezenbach fixed the CSR
    in the stmmac_mdio. We agreed to provide this through
    the platform instead of.
    Also thanks to Johannes for having tested it on ARM.
    
    Signed-off-by: Giuseppe Cavallaro <peppe.cavallaro@st.com>
    Signed-off-by: Johannes Stezenbach <js@sig21.net>
    Signed-off-by: David S. Miller <davem@davemloft.net>

diff --git a/include/linux/stmmac.h b/include/linux/stmmac.h
index a4adf0de6ed6..c87c88ccffc0 100644
--- a/include/linux/stmmac.h
+++ b/include/linux/stmmac.h
@@ -32,6 +32,7 @@
 struct plat_stmmacenet_data {
 	int bus_id;
 	int pbl;
+	int clk_csr;
 	int has_gmac;
 	int enh_desc;
 	void (*fix_mac_speed)(void *priv, unsigned int speed);

commit ad01b7d480a4a135f974afd5c617c417e0b0542f
Author: Giuseppe CAVALLARO <peppe.cavallaro@st.com>
Date:   Mon Aug 23 20:40:42 2010 +0000

    stmmac: make ioaddr 'void __iomem *' rather than unsigned long
    
    This avoids unnecessary casting and adds the ioaddr in the
    private structure.
    This patch also removes many warning when compile the driver.
    
    Signed-off-by: Giuseppe Cavallaro <peppe.cavallaro@st.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

diff --git a/include/linux/stmmac.h b/include/linux/stmmac.h
index 632ff7c03280..a4adf0de6ed6 100644
--- a/include/linux/stmmac.h
+++ b/include/linux/stmmac.h
@@ -35,7 +35,7 @@ struct plat_stmmacenet_data {
 	int has_gmac;
 	int enh_desc;
 	void (*fix_mac_speed)(void *priv, unsigned int speed);
-	void (*bus_setup)(unsigned long ioaddr);
+	void (*bus_setup)(void __iomem *ioaddr);
 #ifdef CONFIG_STM_DRIVERS
 	struct stm_pad_config *pad_config;
 #endif

commit e326e8503dfc73e4f79d488a78ee3d7cde10081f
Author: Giuseppe CAVALLARO <peppe.cavallaro@st.com>
Date:   Tue Apr 13 20:21:14 2010 +0000

    stmmac: new descriptor field for the driver's platform
    
    The new enh_desc is used for selecting the enhanced descriptors
    structure. There are several scenarios; some chips (mac10/100
    or gmac) want to use the enhanced descriptors; others want the normal
    ones.
    For example, on ST platforms: MAC10/100 uses the normal desc structure
    and the GMAC uses the enhanced one.
    It can be useful to get this information from the platform.
    This could also be decided at run-time looking at the chip's ID number;
    but it could happen that chips with the same ID want to use different
    descriptor structure.
    
    Signed-off-by: Giuseppe Cavallaro <peppe.cavallaro@st.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

diff --git a/include/linux/stmmac.h b/include/linux/stmmac.h
index 32bfd1a8a48d..632ff7c03280 100644
--- a/include/linux/stmmac.h
+++ b/include/linux/stmmac.h
@@ -33,6 +33,7 @@ struct plat_stmmacenet_data {
 	int bus_id;
 	int pbl;
 	int has_gmac;
+	int enh_desc;
 	void (*fix_mac_speed)(void *priv, unsigned int speed);
 	void (*bus_setup)(unsigned long ioaddr);
 #ifdef CONFIG_STM_DRIVERS

commit 3c9732c06879d85f2fdf7ec69198c1d78da42a98
Author: Giuseppe CAVALLARO <peppe.cavallaro@st.com>
Date:   Wed Jan 6 23:07:13 2010 +0000

    stmmac: add the new Header file for stmmac platform data
    
    Signed-off-by: Giuseppe Cavallaro <peppe.cavallaro@st.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

diff --git a/include/linux/stmmac.h b/include/linux/stmmac.h
new file mode 100644
index 000000000000..32bfd1a8a48d
--- /dev/null
+++ b/include/linux/stmmac.h
@@ -0,0 +1,53 @@
+/*******************************************************************************
+
+  Header file for stmmac platform data
+
+  Copyright (C) 2009  STMicroelectronics Ltd
+
+  This program is free software; you can redistribute it and/or modify it
+  under the terms and conditions of the GNU General Public License,
+  version 2, as published by the Free Software Foundation.
+
+  This program is distributed in the hope it will be useful, but WITHOUT
+  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+  FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
+  more details.
+
+  You should have received a copy of the GNU General Public License along with
+  this program; if not, write to the Free Software Foundation, Inc.,
+  51 Franklin St - Fifth Floor, Boston, MA 02110-1301 USA.
+
+  The full GNU General Public License is included in this distribution in
+  the file called "COPYING".
+
+  Author: Giuseppe Cavallaro <peppe.cavallaro@st.com>
+*******************************************************************************/
+
+#ifndef __STMMAC_PLATFORM_DATA
+#define __STMMAC_PLATFORM_DATA
+
+/* platfrom data for platfrom device structure's platfrom_data field */
+
+/* Private data for the STM on-board ethernet driver */
+struct plat_stmmacenet_data {
+	int bus_id;
+	int pbl;
+	int has_gmac;
+	void (*fix_mac_speed)(void *priv, unsigned int speed);
+	void (*bus_setup)(unsigned long ioaddr);
+#ifdef CONFIG_STM_DRIVERS
+	struct stm_pad_config *pad_config;
+#endif
+	void *bsp_priv;
+};
+
+struct plat_stmmacphy_data {
+	int bus_id;
+	int phy_addr;
+	unsigned int phy_mask;
+	int interface;
+	int (*phy_reset)(void *priv);
+	void *priv;
+};
+#endif
+
