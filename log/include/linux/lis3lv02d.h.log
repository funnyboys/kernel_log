commit b24413180f5600bcb3bb70fbed5cf186b60864bd
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Wed Nov 1 15:07:57 2017 +0100

    License cleanup: add SPDX GPL-2.0 license identifier to files with no license
    
    Many source files in the tree are missing licensing information, which
    makes it harder for compliance tools to determine the correct license.
    
    By default all files without license information are under the default
    license of the kernel, which is GPL version 2.
    
    Update the files which contain no license information with the 'GPL-2.0'
    SPDX license identifier.  The SPDX identifier is a legally binding
    shorthand, which can be used instead of the full boiler plate text.
    
    This patch is based on work done by Thomas Gleixner and Kate Stewart and
    Philippe Ombredanne.
    
    How this work was done:
    
    Patches were generated and checked against linux-4.14-rc6 for a subset of
    the use cases:
     - file had no licensing information it it.
     - file was a */uapi/* one with no licensing information in it,
     - file was a */uapi/* one with existing licensing information,
    
    Further patches will be generated in subsequent months to fix up cases
    where non-standard license headers were used, and references to license
    had to be inferred by heuristics based on keywords.
    
    The analysis to determine which SPDX License Identifier to be applied to
    a file was done in a spreadsheet of side by side results from of the
    output of two independent scanners (ScanCode & Windriver) producing SPDX
    tag:value files created by Philippe Ombredanne.  Philippe prepared the
    base worksheet, and did an initial spot review of a few 1000 files.
    
    The 4.13 kernel was the starting point of the analysis with 60,537 files
    assessed.  Kate Stewart did a file by file comparison of the scanner
    results in the spreadsheet to determine which SPDX license identifier(s)
    to be applied to the file. She confirmed any determination that was not
    immediately clear with lawyers working with the Linux Foundation.
    
    Criteria used to select files for SPDX license identifier tagging was:
     - Files considered eligible had to be source code files.
     - Make and config files were included as candidates if they contained >5
       lines of source
     - File already had some variant of a license header in it (even if <5
       lines).
    
    All documentation files were explicitly excluded.
    
    The following heuristics were used to determine which SPDX license
    identifiers to apply.
    
     - when both scanners couldn't find any license traces, file was
       considered to have no license information in it, and the top level
       COPYING file license applied.
    
       For non */uapi/* files that summary was:
    
       SPDX license identifier                            # files
       ---------------------------------------------------|-------
       GPL-2.0                                              11139
    
       and resulted in the first patch in this series.
    
       If that file was a */uapi/* path one, it was "GPL-2.0 WITH
       Linux-syscall-note" otherwise it was "GPL-2.0".  Results of that was:
    
       SPDX license identifier                            # files
       ---------------------------------------------------|-------
       GPL-2.0 WITH Linux-syscall-note                        930
    
       and resulted in the second patch in this series.
    
     - if a file had some form of licensing information in it, and was one
       of the */uapi/* ones, it was denoted with the Linux-syscall-note if
       any GPL family license was found in the file or had no licensing in
       it (per prior point).  Results summary:
    
       SPDX license identifier                            # files
       ---------------------------------------------------|------
       GPL-2.0 WITH Linux-syscall-note                       270
       GPL-2.0+ WITH Linux-syscall-note                      169
       ((GPL-2.0 WITH Linux-syscall-note) OR BSD-2-Clause)    21
       ((GPL-2.0 WITH Linux-syscall-note) OR BSD-3-Clause)    17
       LGPL-2.1+ WITH Linux-syscall-note                      15
       GPL-1.0+ WITH Linux-syscall-note                       14
       ((GPL-2.0+ WITH Linux-syscall-note) OR BSD-3-Clause)    5
       LGPL-2.0+ WITH Linux-syscall-note                       4
       LGPL-2.1 WITH Linux-syscall-note                        3
       ((GPL-2.0 WITH Linux-syscall-note) OR MIT)              3
       ((GPL-2.0 WITH Linux-syscall-note) AND MIT)             1
    
       and that resulted in the third patch in this series.
    
     - when the two scanners agreed on the detected license(s), that became
       the concluded license(s).
    
     - when there was disagreement between the two scanners (one detected a
       license but the other didn't, or they both detected different
       licenses) a manual inspection of the file occurred.
    
     - In most cases a manual inspection of the information in the file
       resulted in a clear resolution of the license that should apply (and
       which scanner probably needed to revisit its heuristics).
    
     - When it was not immediately clear, the license identifier was
       confirmed with lawyers working with the Linux Foundation.
    
     - If there was any question as to the appropriate license identifier,
       the file was flagged for further research and to be revisited later
       in time.
    
    In total, over 70 hours of logged manual review was done on the
    spreadsheet to determine the SPDX license identifiers to apply to the
    source files by Kate, Philippe, Thomas and, in some cases, confirmation
    by lawyers working with the Linux Foundation.
    
    Kate also obtained a third independent scan of the 4.13 code base from
    FOSSology, and compared selected files where the other two scanners
    disagreed against that SPDX file, to see if there was new insights.  The
    Windriver scanner is based on an older version of FOSSology in part, so
    they are related.
    
    Thomas did random spot checks in about 500 files from the spreadsheets
    for the uapi headers and agreed with SPDX license identifier in the
    files he inspected. For the non-uapi files Thomas did random spot checks
    in about 15000 files.
    
    In initial set of patches against 4.14-rc6, 3 files were found to have
    copy/paste license identifier errors, and have been fixed to reflect the
    correct identifier.
    
    Additionally Philippe spent 10 hours this week doing a detailed manual
    inspection and review of the 12,461 patched files from the initial patch
    version early this week with:
     - a full scancode scan run, collecting the matched texts, detected
       license ids and scores
     - reviewing anything where there was a license detected (about 500+
       files) to ensure that the applied SPDX license was correct
     - reviewing anything where there was no detection but the patch license
       was not GPL-2.0 WITH Linux-syscall-note to ensure that the applied
       SPDX license was correct
    
    This produced a worksheet with 20 files needing minor correction.  This
    worksheet was then exported into 3 different .csv files for the
    different types of files to be modified.
    
    These .csv files were then reviewed by Greg.  Thomas wrote a script to
    parse the csv files and add the proper SPDX tag to the file, in the
    format that the file expected.  This script was further refined by Greg
    based on the output to detect more types of files automatically and to
    distinguish between header and source .c files (which need different
    comment types.)  Finally Greg ran the script using the .csv files to
    generate the patches.
    
    Reviewed-by: Kate Stewart <kstewart@linuxfoundation.org>
    Reviewed-by: Philippe Ombredanne <pombredanne@nexb.com>
    Reviewed-by: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/include/linux/lis3lv02d.h b/include/linux/lis3lv02d.h
index f1664c636af0..b72b8cdba765 100644
--- a/include/linux/lis3lv02d.h
+++ b/include/linux/lis3lv02d.h
@@ -1,3 +1,4 @@
+/* SPDX-License-Identifier: GPL-2.0 */
 #ifndef __LIS3LV02D_H_
 #define __LIS3LV02D_H_
 

commit ec400c9fab99d16a491cea17d27d0c6a5780b97c
Author: Mark Brown <broonie@opensource.wolfsonmicro.com>
Date:   Mon Oct 31 17:11:07 2011 -0700

    lis3lv02d: make regulator API usage unconditional
    
    The regulator API contains a range of features for stubbing itself out
    when not in use and for transparently restricting the actual effect of
    regulator API calls where they can't be supported on a particular system
    so that drivers don't need to individually implement this.  Simplify the
    driver slightly by making use of this idiom.
    
    The only in tree user is ecovec24 which does not use the regulator API.
    
    Signed-off-by: Mark Brown <broonie@opensource.wolfsonmicro.com>
    Cc: Ã‰ric Piel <eric.piel@tremplin-utc.net>
    Cc: Ilkka Koskinen <ilkka.koskinen@nokia.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

diff --git a/include/linux/lis3lv02d.h b/include/linux/lis3lv02d.h
index d4292c8431e0..f1664c636af0 100644
--- a/include/linux/lis3lv02d.h
+++ b/include/linux/lis3lv02d.h
@@ -113,7 +113,6 @@ struct lis3lv02d_platform_data {
 	s8 axis_x;
 	s8 axis_y;
 	s8 axis_z;
-#define LIS3_USE_REGULATOR_CTRL 0x01
 #define LIS3_USE_BLOCK_READ	0x02
 	u16 driver_features;
 	int default_rate;

commit 83af1bd81f7b7fb31a681b0c80790866f190d23a
Author: Samu Onkalo <samu.p.onkalo@nokia.com>
Date:   Sat Oct 23 09:39:44 2010 -0400

    hwmon: lis3: Short explanations of platform data fields
    
    Short documentation at kernel doc format.
    
    Signed-off-by: Samu Onkalo <samu.p.onkalo@nokia.com>
    Acked-by: Jonathan Cameron <jic23@cam.ac.uk>
    Acked-by: Eric Piel <eric.piel@tremplin-utc.net>
    Signed-off-by: Guenter Roeck <guenter.roeck@ericsson.com>

diff --git a/include/linux/lis3lv02d.h b/include/linux/lis3lv02d.h
index c949612ac841..d4292c8431e0 100644
--- a/include/linux/lis3lv02d.h
+++ b/include/linux/lis3lv02d.h
@@ -1,6 +1,52 @@
 #ifndef __LIS3LV02D_H_
 #define __LIS3LV02D_H_
 
+/**
+ * struct lis3lv02d_platform_data - lis3 chip family platform data
+ * @click_flags:	Click detection unit configuration
+ * @click_thresh_x:	Click detection unit x axis threshold
+ * @click_thresh_y:	Click detection unit y axis threshold
+ * @click_thresh_z:	Click detection unit z axis threshold
+ * @click_time_limit:	Click detection unit time parameter
+ * @click_latency:	Click detection unit latency parameter
+ * @click_window:	Click detection unit window parameter
+ * @irq_cfg:		On chip irq source and type configuration (click /
+ *			data available / wake up, open drain, polarity)
+ * @irq_flags1:		Additional irq triggering flags for irq channel 0
+ * @irq_flags2:		Additional irq triggering flags for irq channel 1
+ * @duration1:		Wake up unit 1 duration parameter
+ * @duration2:		Wake up unit 2 duration parameter
+ * @wakeup_flags:	Wake up unit 1 flags
+ * @wakeup_thresh:	Wake up unit 1 threshold value
+ * @wakeup_flags2:	Wake up unit 2 flags
+ * @wakeup_thresh2:	Wake up unit 2 threshold value
+ * @hipass_ctrl:	High pass filter control (enable / disable, cut off
+ *			frequency)
+ * @axis_x:		Sensor orientation remapping for x-axis
+ * @axis_y:		Sensor orientation remapping for y-axis
+ * @axis_z:		Sensor orientation remapping for z-axis
+ * @driver_features:	Enable bits for different features. Disabled by default
+ * @default_rate:	Default sampling rate. 0 means reset default
+ * @setup_resources:	Interrupt line setup call back function
+ * @release_resources:	Interrupt line release call back function
+ * @st_min_limits[3]:	Selftest acceptance minimum values
+ * @st_max_limits[3]:	Selftest acceptance maximum values
+ * @irq2:		Irq line 2 number
+ *
+ * Platform data is used to setup the sensor chip. Meaning of the different
+ * chip features can be found from the data sheet. It is publicly available
+ * at www.st.com web pages. Currently the platform data is used
+ * only for the 8 bit device. The 8 bit device has two wake up / free fall
+ * detection units and click detection unit. There are plenty of ways to
+ * configure the chip which makes is quite hard to explain deeper meaning of
+ * the fields here. Behaviour of the detection blocks varies heavily depending
+ * on the configuration. For example, interrupt detection block can use high
+ * pass filtered data which makes it react to the changes in the acceleration.
+ * Irq_flags can be used to enable interrupt detection on the both edges.
+ * With proper chip configuration this produces interrupt when some trigger
+ * starts and when it goes away.
+ */
+
 struct lis3lv02d_platform_data {
 	/* please note: the 'click' feature is only supported for
 	 * LIS[32]02DL variants of the chip and will be ignored for

commit f10a5407b58603fb3b084d7fbdbd50f47d010c82
Author: Samu Onkalo <samu.p.onkalo@nokia.com>
Date:   Fri Oct 22 07:57:31 2010 -0400

    hwmon: lis3: use block read to access data registers
    
    Add optional blockread function to interface driver. If available
    the chip driver uses it for data register access. For 12 bit device
    it reads 6 bytes to get 3*16bit data. For 8 bit device it reads out
    5 bytes since every second byte is dummy.
    This optimizes bus usage and reduces number of operations and
    interrupts needed for one data update.
    
    Signed-off-by: Samu Onkalo <samu.p.onkalo@nokia.com>
    Acked-by: Jonathan Cameron <jic23@cam.ac.uk>
    Acked-by: Eric Piel <eric.piel@tremplin-utc.net>
    Signed-off-by: Guenter Roeck <guenter.roeck@ericsson.com>

diff --git a/include/linux/lis3lv02d.h b/include/linux/lis3lv02d.h
index 18d578f08120..c949612ac841 100644
--- a/include/linux/lis3lv02d.h
+++ b/include/linux/lis3lv02d.h
@@ -68,6 +68,7 @@ struct lis3lv02d_platform_data {
 	s8 axis_y;
 	s8 axis_z;
 #define LIS3_USE_REGULATOR_CTRL 0x01
+#define LIS3_USE_BLOCK_READ	0x02
 	u16 driver_features;
 	int default_rate;
 	int (*setup_resources)(void);

commit cc23aa1ce2631b2fe1e3fba82ee444460f5ee3b7
Author: Samu Onkalo <samu.p.onkalo@nokia.com>
Date:   Fri Oct 22 07:57:29 2010 -0400

    hwmon: lis3: New parameters to platform data
    
    Added default output data rate setting to platform data.
    If default rate is 0, reset default value is used.
    Added control for duration via platform data.
    Added possibility to configure interrupts to trig on
    both rising and falling edge. The lis3 WU unit can be
    configured quite many ways and with some configurations it
    is quite handy to get coordinate refresh when some
    event trigs and when it reason goes away.
    
    Signed-off-by: Samu Onkalo <samu.p.onkalo@nokia.com>
    Acked-by: Jonathan Cameron <jic23@cam.ac.uk>
    Acked-by: Eric Piel <eric.piel@tremplin-utc.net>
    Signed-off-by: Guenter Roeck <guenter.roeck@ericsson.com>

diff --git a/include/linux/lis3lv02d.h b/include/linux/lis3lv02d.h
index c4a4a52c1de7..18d578f08120 100644
--- a/include/linux/lis3lv02d.h
+++ b/include/linux/lis3lv02d.h
@@ -36,7 +36,10 @@ struct lis3lv02d_platform_data {
 #define LIS3_IRQ_OPEN_DRAIN	(1 << 6)
 #define LIS3_IRQ_ACTIVE_LOW	(1 << 7)
 	unsigned char irq_cfg;
-
+	unsigned char irq_flags1; /* Additional irq edge / level flags */
+	unsigned char irq_flags2; /* Additional irq edge / level flags */
+	unsigned char duration1;
+	unsigned char duration2;
 #define LIS3_WAKEUP_X_LO	(1 << 0)
 #define LIS3_WAKEUP_X_HI	(1 << 1)
 #define LIS3_WAKEUP_Y_LO	(1 << 2)
@@ -66,6 +69,7 @@ struct lis3lv02d_platform_data {
 	s8 axis_z;
 #define LIS3_USE_REGULATOR_CTRL 0x01
 	u16 driver_features;
+	int default_rate;
 	int (*setup_resources)(void);
 	int (*release_resources)(void);
 	/* Limits for selftest are specified in chip data sheet */

commit f9deb41f91c41d9d91a24c84a555ec7fe82620da
Author: Samu Onkalo <samu.p.onkalo@nokia.com>
Date:   Fri Oct 22 07:57:24 2010 -0400

    hwmon: lis3: regulator control
    
    Based on pm_runtime control, turn lis3 regulators on and off.
    Perform context save and restore on transitions.
    
    Feature is optional and must be enabled in platform data.
    
    Signed-off-by: Samu Onkalo <samu.p.onkalo@nokia.com>
    Acked-by: Jonathan Cameron <jic23@cam.ac.uk>
    Acked-by: Eric Piel <eric.piel@tremplin-utc.net>
    Signed-off-by: Guenter Roeck <guenter.roeck@ericsson.com>

diff --git a/include/linux/lis3lv02d.h b/include/linux/lis3lv02d.h
index 0e8a346424bb..c4a4a52c1de7 100644
--- a/include/linux/lis3lv02d.h
+++ b/include/linux/lis3lv02d.h
@@ -64,6 +64,8 @@ struct lis3lv02d_platform_data {
 	s8 axis_x;
 	s8 axis_y;
 	s8 axis_z;
+#define LIS3_USE_REGULATOR_CTRL 0x01
+	u16 driver_features;
 	int (*setup_resources)(void);
 	int (*release_resources)(void);
 	/* Limits for selftest are specified in chip data sheet */

commit 6d94d4081048756df78444a07201156f4930fe48
Author: Samu Onkalo <samu.p.onkalo@nokia.com>
Date:   Mon May 24 14:33:37 2010 -0700

    lis3: interrupt handlers for 8bit wakeup and click events
    
    Content for the 8bit device threaded interrupt handlers.  Depending on the
    interrupt line and chip configuration, either click or wakeup / freefall
    handler is called.  In case of click, BTN_ event is sent via input device.
     In case of wakeup or freefall, input device ABS_ events are updated
    immediatelly.
    
    It is still possible to configure interrupt line 1 for fast freefall
    detection and use the second line either for click or threshold based
    interrupts.  Or both lines can be used for click / threshold interrupts.
    
    Polled input device can be set to stopped state and still get coordinate
    updates via input device using interrupt based method.  Polled mode and
    interrupt mode can also be used parallel.
    
    BTN_ events are remapped based on existing axis remapping information.
    
    Signed-off-by: Samu Onkalo <samu.p.onkalo@nokia.com>
    Acked-by: Eric Piel <eric.piel@tremplin-utc.net>
    Cc: Daniel Mack <daniel@caiaq.de>
    Cc: Pavel Machek <pavel@ucw.cz>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

diff --git a/include/linux/lis3lv02d.h b/include/linux/lis3lv02d.h
index fd289b1e1ec1..0e8a346424bb 100644
--- a/include/linux/lis3lv02d.h
+++ b/include/linux/lis3lv02d.h
@@ -25,12 +25,14 @@ struct lis3lv02d_platform_data {
 #define LIS3_IRQ1_FF_WU_12	(3 << 0)
 #define LIS3_IRQ1_DATA_READY	(4 << 0)
 #define LIS3_IRQ1_CLICK		(7 << 0)
+#define LIS3_IRQ1_MASK		(7 << 0)
 #define LIS3_IRQ2_DISABLE	(0 << 3)
 #define LIS3_IRQ2_FF_WU_1	(1 << 3)
 #define LIS3_IRQ2_FF_WU_2	(2 << 3)
 #define LIS3_IRQ2_FF_WU_12	(3 << 3)
 #define LIS3_IRQ2_DATA_READY	(4 << 3)
 #define LIS3_IRQ2_CLICK		(7 << 3)
+#define LIS3_IRQ2_MASK		(7 << 3)
 #define LIS3_IRQ_OPEN_DRAIN	(1 << 6)
 #define LIS3_IRQ_ACTIVE_LOW	(1 << 7)
 	unsigned char irq_cfg;

commit 92ba4fe4b53b4fa5ac71ec4d80572348fca85796
Author: Samu Onkalo <samu.p.onkalo@nokia.com>
Date:   Mon May 24 14:33:36 2010 -0700

    lis3: add skeletons for interrupt handlers
    
    Original lis3 driver didn't provide interrupt handler(s) for click or
    threshold event handling.  This patch adds threaded handlers for one or
    two interrupt lines for 8 bit device.  Actual content for interrupt
    handling is provided in the separate patch.
    
    Signed-off-by: Samu Onkalo <samu.p.onkalo@nokia.com>
    Tested-by: Daniel Mack <daniel@caiaq.de>
    Acked-by: Eric Piel <eric.piel@tremplin-utc.net>
    Cc: Pavel Machek <pavel@ucw.cz>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

diff --git a/include/linux/lis3lv02d.h b/include/linux/lis3lv02d.h
index d6251995c042..fd289b1e1ec1 100644
--- a/include/linux/lis3lv02d.h
+++ b/include/linux/lis3lv02d.h
@@ -67,6 +67,7 @@ struct lis3lv02d_platform_data {
 	/* Limits for selftest are specified in chip data sheet */
 	s16 st_min_limits[3]; /* min pass limit x, y, z */
 	s16 st_max_limits[3]; /* max pass limit x, y, z */
+	int irq2;
 };
 
 #endif /* __LIS3LV02D_H_ */

commit 342c5f128140d54961c435d1702eadcaba97a37a
Author: Samu Onkalo <samu.p.onkalo@nokia.com>
Date:   Mon May 24 14:33:35 2010 -0700

    lis3: introduce platform data for second ff / wu unit
    
    8 bit device has two wakeup / free fall units.  It was not possible to
    configure the second unit.  This patch introduces configuration entry to
    the platform data and also corresponding changes to the 8 bit setup
    function.
    
    High pass filters were enabled by default.  Patch introduces configuration
    option for high pass filter cut off frequency and also possibility to
    disable or enable the filter via platform data.  Since the control is a
    new one and default state was filter enabled, new option is used to
    disable the filter.  This way old platform data is still compatible with
    the change.
    
    Signed-off-by: Samu Onkalo <samu.p.onkalo@nokia.com>
    Acked-by: Eric Piel <eric.piel@tremplin-utc.net>
    Tested-by: Daniel Mack <daniel@caiaq.de>
    Cc: Pavel Machek <pavel@ucw.cz>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

diff --git a/include/linux/lis3lv02d.h b/include/linux/lis3lv02d.h
index f1ca0dcc1628..d6251995c042 100644
--- a/include/linux/lis3lv02d.h
+++ b/include/linux/lis3lv02d.h
@@ -43,6 +43,15 @@ struct lis3lv02d_platform_data {
 #define LIS3_WAKEUP_Z_HI	(1 << 5)
 	unsigned char wakeup_flags;
 	unsigned char wakeup_thresh;
+	unsigned char wakeup_flags2;
+	unsigned char wakeup_thresh2;
+#define LIS3_HIPASS_CUTFF_8HZ   0
+#define LIS3_HIPASS_CUTFF_4HZ   1
+#define LIS3_HIPASS_CUTFF_2HZ   2
+#define LIS3_HIPASS_CUTFF_1HZ   3
+#define LIS3_HIPASS1_DISABLE    (1 << 2)
+#define LIS3_HIPASS2_DISABLE    (1 << 3)
+	unsigned char hipass_ctrl;
 #define LIS3_NO_MAP		0
 #define LIS3_DEV_X		1
 #define LIS3_DEV_Y		2

commit 2db4a76d5f3554e9e5632c8f91828313318579c8
Author: Samu Onkalo <samu.p.onkalo@nokia.com>
Date:   Mon Dec 14 18:01:43 2009 -0800

    lis3: selftest support
    
    Implement selftest feature as specified by chip manufacturer.  Control:
    read selftest sysfs entry
    
    Response: "OK x y z" or "FAIL x y z"
    
    where x, y, and z are difference between selftest mode and normal mode.
    Test is passed when values are within acceptance limit values.
    
    Acceptance limits are provided via platform data.  See chip spesifications
    for acceptance limits.  If limits are not properly set, OK / FAIL decision
    is meaningless.  However, userspace application can still make decision
    based on the numeric x, y, z values.
    
    Selftest is meant for HW diagnostic purposes.  It is not meant to be
    called during normal use of the chip.  It may cause false interrupt
    events.  Selftest mode delays polling of the normal results but it doesn't
    cause wrong values.  Chip must be in static state during selftest.  Any
    acceration during the test causes most probably failure.
    
    Signed-off-by: Samu Onkalo <samu.p.onkalo@nokia.com>
    Acked-by: Ã‰ric Piel <Eric.Piel@tremplin-utc.net>
    Cc: Pavel Machek <pavel@ucw.cz>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

diff --git a/include/linux/lis3lv02d.h b/include/linux/lis3lv02d.h
index 89701355c74f..f1ca0dcc1628 100644
--- a/include/linux/lis3lv02d.h
+++ b/include/linux/lis3lv02d.h
@@ -55,6 +55,9 @@ struct lis3lv02d_platform_data {
 	s8 axis_z;
 	int (*setup_resources)(void);
 	int (*release_resources)(void);
+	/* Limits for selftest are specified in chip data sheet */
+	s16 st_min_limits[3]; /* min pass limit x, y, z */
+	s16 st_max_limits[3]; /* max pass limit x, y, z */
 };
 
 #endif /* __LIS3LV02D_H_ */

commit e40d6eaa79bc9d9d347c3c51fe0c9204e9025b79
Author: Samu Onkalo <samu.p.onkalo@nokia.com>
Date:   Mon Dec 14 18:01:35 2009 -0800

    lis3lv02d: axis remap and resource setup/release
    
    Add the possibility to remap axes via platform data.  Function pointers
    for resource setup and release purposes
    
    Signed-off-by: Samu Onkalo <samu.p.onkalo@nokia.com>
    Acked-by: Ã‰ric Piel <eric.piel@tremplin-utc.net>
    Cc: Pavel Machek <pavel@ucw.cz>
    Cc: Jean Delvare <khali@linux-fr.org>
    Cc:  "Trisal, Kalhan" <kalhan.trisal@intel.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

diff --git a/include/linux/lis3lv02d.h b/include/linux/lis3lv02d.h
index 3cc2f2c53e4c..89701355c74f 100644
--- a/include/linux/lis3lv02d.h
+++ b/include/linux/lis3lv02d.h
@@ -43,6 +43,18 @@ struct lis3lv02d_platform_data {
 #define LIS3_WAKEUP_Z_HI	(1 << 5)
 	unsigned char wakeup_flags;
 	unsigned char wakeup_thresh;
+#define LIS3_NO_MAP		0
+#define LIS3_DEV_X		1
+#define LIS3_DEV_Y		2
+#define LIS3_DEV_Z		3
+#define LIS3_INV_DEV_X	       -1
+#define LIS3_INV_DEV_Y	       -2
+#define LIS3_INV_DEV_Z	       -3
+	s8 axis_x;
+	s8 axis_y;
+	s8 axis_z;
+	int (*setup_resources)(void);
+	int (*release_resources)(void);
 };
 
 #endif /* __LIS3LV02D_H_ */

commit 8873c33483e62988ed886230aab71ef4c678f710
Author: Daniel Mack <daniel@caiaq.de>
Date:   Mon Sep 21 17:04:43 2009 -0700

    lis3: add free-fall/wakeup function via platform_data
    
    This offers a way for platforms to define flags and thresholds for the
    free-fall/wakeup functions of the lis302d chips.
    
    More registers needed to be seperated as they are specific to the
    
    Signed-off-by: Daniel Mack <daniel@caiaq.de>
    Acked-by: Pavel Machek <pavel@ucw.cz>
    Cc: Eric Piel <eric.piel@tremplin-utc.net>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

diff --git a/include/linux/lis3lv02d.h b/include/linux/lis3lv02d.h
index 113778b5df36..3cc2f2c53e4c 100644
--- a/include/linux/lis3lv02d.h
+++ b/include/linux/lis3lv02d.h
@@ -34,6 +34,15 @@ struct lis3lv02d_platform_data {
 #define LIS3_IRQ_OPEN_DRAIN	(1 << 6)
 #define LIS3_IRQ_ACTIVE_LOW	(1 << 7)
 	unsigned char irq_cfg;
+
+#define LIS3_WAKEUP_X_LO	(1 << 0)
+#define LIS3_WAKEUP_X_HI	(1 << 1)
+#define LIS3_WAKEUP_Y_LO	(1 << 2)
+#define LIS3_WAKEUP_Y_HI	(1 << 3)
+#define LIS3_WAKEUP_Z_LO	(1 << 4)
+#define LIS3_WAKEUP_Z_HI	(1 << 5)
+	unsigned char wakeup_flags;
+	unsigned char wakeup_thresh;
 };
 
 #endif /* __LIS3LV02D_H_ */

commit 0ec48915e8bbb37dea3df85c41e4c3498b95664b
Author: Daniel Mack <daniel@caiaq.de>
Date:   Mon Sep 21 17:04:42 2009 -0700

    lis3: fix typo
    
    Bit 0x80 in CTRL_REG3 is an ACTIVE_LOW rather than an ACTIVE_HIGH
    function, I got that wrong during my last change.
    
    Signed-off-by: Daniel Mack <daniel@caiaq.de>
    Acked-by: Pavel Machek <pavel@ucw.cz>
    Cc: Eric Piel <eric.piel@tremplin-utc.net>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

diff --git a/include/linux/lis3lv02d.h b/include/linux/lis3lv02d.h
index ad651f4e45ac..113778b5df36 100644
--- a/include/linux/lis3lv02d.h
+++ b/include/linux/lis3lv02d.h
@@ -32,7 +32,7 @@ struct lis3lv02d_platform_data {
 #define LIS3_IRQ2_DATA_READY	(4 << 3)
 #define LIS3_IRQ2_CLICK		(7 << 3)
 #define LIS3_IRQ_OPEN_DRAIN	(1 << 6)
-#define LIS3_IRQ_ACTIVE_HIGH	(1 << 7)
+#define LIS3_IRQ_ACTIVE_LOW	(1 << 7)
 	unsigned char irq_cfg;
 };
 

commit 8f3128e714ded7cf1e8c786c204a4f253b5d8ff4
Author: Daniel Mack <daniel@caiaq.de>
Date:   Tue Jun 16 15:34:17 2009 -0700

    lis3: add click function
    
    The LIS302DL accelerometer chip has a 'click' feature which can be used to
    detect sudden motion on any of the three axis.  Configuration data is
    passed via spi platform_data and no action is taken if that's not
    specified, so it won't harm any existing platform.
    
    To make the configuration effective, the IRQ lines need to be set up
    appropriately.  This patch also adds a way to do that from board support
    code.
    
    The DD_* definitions were factored out to an own enum because they are
    specific to LIS3LV02D devices.
    
    Signed-off-by: Daniel Mack <daniel@caiaq.de>
    Acked-by: Pavel Machek <pavel@ucw.cz>
    Acked-by: Eric Piel <eric.piel@tremplin-utc.net>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

diff --git a/include/linux/lis3lv02d.h b/include/linux/lis3lv02d.h
new file mode 100644
index 000000000000..ad651f4e45ac
--- /dev/null
+++ b/include/linux/lis3lv02d.h
@@ -0,0 +1,39 @@
+#ifndef __LIS3LV02D_H_
+#define __LIS3LV02D_H_
+
+struct lis3lv02d_platform_data {
+	/* please note: the 'click' feature is only supported for
+	 * LIS[32]02DL variants of the chip and will be ignored for
+	 * others */
+#define LIS3_CLICK_SINGLE_X	(1 << 0)
+#define LIS3_CLICK_DOUBLE_X	(1 << 1)
+#define LIS3_CLICK_SINGLE_Y	(1 << 2)
+#define LIS3_CLICK_DOUBLE_Y	(1 << 3)
+#define LIS3_CLICK_SINGLE_Z	(1 << 4)
+#define LIS3_CLICK_DOUBLE_Z	(1 << 5)
+	unsigned char click_flags;
+	unsigned char click_thresh_x;
+	unsigned char click_thresh_y;
+	unsigned char click_thresh_z;
+	unsigned char click_time_limit;
+	unsigned char click_latency;
+	unsigned char click_window;
+
+#define LIS3_IRQ1_DISABLE	(0 << 0)
+#define LIS3_IRQ1_FF_WU_1	(1 << 0)
+#define LIS3_IRQ1_FF_WU_2	(2 << 0)
+#define LIS3_IRQ1_FF_WU_12	(3 << 0)
+#define LIS3_IRQ1_DATA_READY	(4 << 0)
+#define LIS3_IRQ1_CLICK		(7 << 0)
+#define LIS3_IRQ2_DISABLE	(0 << 3)
+#define LIS3_IRQ2_FF_WU_1	(1 << 3)
+#define LIS3_IRQ2_FF_WU_2	(2 << 3)
+#define LIS3_IRQ2_FF_WU_12	(3 << 3)
+#define LIS3_IRQ2_DATA_READY	(4 << 3)
+#define LIS3_IRQ2_CLICK		(7 << 3)
+#define LIS3_IRQ_OPEN_DRAIN	(1 << 6)
+#define LIS3_IRQ_ACTIVE_HIGH	(1 << 7)
+	unsigned char irq_cfg;
+};
+
+#endif /* __LIS3LV02D_H_ */
