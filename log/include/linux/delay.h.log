commit c6af13d334759c33c14b6fad4c676c6d1dbf9564
Author: Heiner Kallweit <hkallweit1@gmail.com>
Date:   Fri May 1 23:27:21 2020 +0200

    timer: add fsleep for flexible sleeping
    
    Sleeping for a certain amount of time requires use of different
    functions, depending on the time period.
    Documentation/timers/timers-howto.rst explains when to use which
    function, and also checkpatch checks for some potentially
    problematic cases.
    
    So let's create a helper that automatically chooses the appropriate
    sleep function -> fsleep(), for flexible sleeping
    
    If the delay is a constant, then the compiler should be able to ensure
    that the new helper doesn't create overhead. If the delay is not
    constant, then the new helper can save some code.
    
    Signed-off-by: Heiner Kallweit <hkallweit1@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

diff --git a/include/linux/delay.h b/include/linux/delay.h
index 8e6828094c1e..5e016a4029d9 100644
--- a/include/linux/delay.h
+++ b/include/linux/delay.h
@@ -65,4 +65,15 @@ static inline void ssleep(unsigned int seconds)
 	msleep(seconds * 1000);
 }
 
+/* see Documentation/timers/timers-howto.rst for the thresholds */
+static inline void fsleep(unsigned long usecs)
+{
+	if (usecs <= 10)
+		udelay(usecs);
+	else if (usecs <= 20000)
+		usleep_range(usecs, 2 * usecs);
+	else
+		msleep(DIV_ROUND_UP(usecs, 1000));
+}
+
 #endif /* defined(_LINUX_DELAY_H) */

commit 8496ecd0bed4c70b43f39cecf0872b84360f0d14
Author: Valdis Kletnieks <valdis.kletnieks@vt.edu>
Date:   Thu Mar 7 16:29:06 2019 -0800

    init/calibrate.c: provide proper prototype
    
    Sparse issues a warning:
    
        CHECK   init/calibrate.c
      init/calibrate.c:271:28: warning: symbol 'calibration_delay_done' was not declared. Should it be static?
    
    The actual issue is that it's a __weak symbol that archs can override
    (in fact, ARM does so), but no prototype is provided.  Let's provide one
    to prevent surprises.
    
    Link: http://lkml.kernel.org/r/18827.1548750938@turing-police.cc.vt.edu
    Signed-off-by: Valdis Kletnieks <valdis.kletnieks@vt.edu>
    Reviewed-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

diff --git a/include/linux/delay.h b/include/linux/delay.h
index b78bab4395d8..8e6828094c1e 100644
--- a/include/linux/delay.h
+++ b/include/linux/delay.h
@@ -55,6 +55,7 @@ static inline void ndelay(unsigned long x)
 
 extern unsigned long lpj_fine;
 void calibrate_delay(void);
+void __attribute__((weak)) calibration_delay_done(void);
 void msleep(unsigned int msecs);
 unsigned long msleep_interruptible(unsigned int msecs);
 void usleep_range(unsigned long min, unsigned long max);

commit b24413180f5600bcb3bb70fbed5cf186b60864bd
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Wed Nov 1 15:07:57 2017 +0100

    License cleanup: add SPDX GPL-2.0 license identifier to files with no license
    
    Many source files in the tree are missing licensing information, which
    makes it harder for compliance tools to determine the correct license.
    
    By default all files without license information are under the default
    license of the kernel, which is GPL version 2.
    
    Update the files which contain no license information with the 'GPL-2.0'
    SPDX license identifier.  The SPDX identifier is a legally binding
    shorthand, which can be used instead of the full boiler plate text.
    
    This patch is based on work done by Thomas Gleixner and Kate Stewart and
    Philippe Ombredanne.
    
    How this work was done:
    
    Patches were generated and checked against linux-4.14-rc6 for a subset of
    the use cases:
     - file had no licensing information it it.
     - file was a */uapi/* one with no licensing information in it,
     - file was a */uapi/* one with existing licensing information,
    
    Further patches will be generated in subsequent months to fix up cases
    where non-standard license headers were used, and references to license
    had to be inferred by heuristics based on keywords.
    
    The analysis to determine which SPDX License Identifier to be applied to
    a file was done in a spreadsheet of side by side results from of the
    output of two independent scanners (ScanCode & Windriver) producing SPDX
    tag:value files created by Philippe Ombredanne.  Philippe prepared the
    base worksheet, and did an initial spot review of a few 1000 files.
    
    The 4.13 kernel was the starting point of the analysis with 60,537 files
    assessed.  Kate Stewart did a file by file comparison of the scanner
    results in the spreadsheet to determine which SPDX license identifier(s)
    to be applied to the file. She confirmed any determination that was not
    immediately clear with lawyers working with the Linux Foundation.
    
    Criteria used to select files for SPDX license identifier tagging was:
     - Files considered eligible had to be source code files.
     - Make and config files were included as candidates if they contained >5
       lines of source
     - File already had some variant of a license header in it (even if <5
       lines).
    
    All documentation files were explicitly excluded.
    
    The following heuristics were used to determine which SPDX license
    identifiers to apply.
    
     - when both scanners couldn't find any license traces, file was
       considered to have no license information in it, and the top level
       COPYING file license applied.
    
       For non */uapi/* files that summary was:
    
       SPDX license identifier                            # files
       ---------------------------------------------------|-------
       GPL-2.0                                              11139
    
       and resulted in the first patch in this series.
    
       If that file was a */uapi/* path one, it was "GPL-2.0 WITH
       Linux-syscall-note" otherwise it was "GPL-2.0".  Results of that was:
    
       SPDX license identifier                            # files
       ---------------------------------------------------|-------
       GPL-2.0 WITH Linux-syscall-note                        930
    
       and resulted in the second patch in this series.
    
     - if a file had some form of licensing information in it, and was one
       of the */uapi/* ones, it was denoted with the Linux-syscall-note if
       any GPL family license was found in the file or had no licensing in
       it (per prior point).  Results summary:
    
       SPDX license identifier                            # files
       ---------------------------------------------------|------
       GPL-2.0 WITH Linux-syscall-note                       270
       GPL-2.0+ WITH Linux-syscall-note                      169
       ((GPL-2.0 WITH Linux-syscall-note) OR BSD-2-Clause)    21
       ((GPL-2.0 WITH Linux-syscall-note) OR BSD-3-Clause)    17
       LGPL-2.1+ WITH Linux-syscall-note                      15
       GPL-1.0+ WITH Linux-syscall-note                       14
       ((GPL-2.0+ WITH Linux-syscall-note) OR BSD-3-Clause)    5
       LGPL-2.0+ WITH Linux-syscall-note                       4
       LGPL-2.1 WITH Linux-syscall-note                        3
       ((GPL-2.0 WITH Linux-syscall-note) OR MIT)              3
       ((GPL-2.0 WITH Linux-syscall-note) AND MIT)             1
    
       and that resulted in the third patch in this series.
    
     - when the two scanners agreed on the detected license(s), that became
       the concluded license(s).
    
     - when there was disagreement between the two scanners (one detected a
       license but the other didn't, or they both detected different
       licenses) a manual inspection of the file occurred.
    
     - In most cases a manual inspection of the information in the file
       resulted in a clear resolution of the license that should apply (and
       which scanner probably needed to revisit its heuristics).
    
     - When it was not immediately clear, the license identifier was
       confirmed with lawyers working with the Linux Foundation.
    
     - If there was any question as to the appropriate license identifier,
       the file was flagged for further research and to be revisited later
       in time.
    
    In total, over 70 hours of logged manual review was done on the
    spreadsheet to determine the SPDX license identifiers to apply to the
    source files by Kate, Philippe, Thomas and, in some cases, confirmation
    by lawyers working with the Linux Foundation.
    
    Kate also obtained a third independent scan of the 4.13 code base from
    FOSSology, and compared selected files where the other two scanners
    disagreed against that SPDX file, to see if there was new insights.  The
    Windriver scanner is based on an older version of FOSSology in part, so
    they are related.
    
    Thomas did random spot checks in about 500 files from the spreadsheets
    for the uapi headers and agreed with SPDX license identifier in the
    files he inspected. For the non-uapi files Thomas did random spot checks
    in about 15000 files.
    
    In initial set of patches against 4.14-rc6, 3 files were found to have
    copy/paste license identifier errors, and have been fixed to reflect the
    correct identifier.
    
    Additionally Philippe spent 10 hours this week doing a detailed manual
    inspection and review of the 12,461 patched files from the initial patch
    version early this week with:
     - a full scancode scan run, collecting the matched texts, detected
       license ids and scores
     - reviewing anything where there was a license detected (about 500+
       files) to ensure that the applied SPDX license was correct
     - reviewing anything where there was no detection but the patch license
       was not GPL-2.0 WITH Linux-syscall-note to ensure that the applied
       SPDX license was correct
    
    This produced a worksheet with 20 files needing minor correction.  This
    worksheet was then exported into 3 different .csv files for the
    different types of files to be modified.
    
    These .csv files were then reviewed by Greg.  Thomas wrote a script to
    parse the csv files and add the proper SPDX tag to the file, in the
    format that the file expected.  This script was further refined by Greg
    based on the output to detect more types of files automatically and to
    distinguish between header and source .c files (which need different
    comment types.)  Finally Greg ran the script using the .csv files to
    generate the patches.
    
    Reviewed-by: Kate Stewart <kstewart@linuxfoundation.org>
    Reviewed-by: Philippe Ombredanne <pombredanne@nexb.com>
    Reviewed-by: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/include/linux/delay.h b/include/linux/delay.h
index 2ecb3c46b20a..b78bab4395d8 100644
--- a/include/linux/delay.h
+++ b/include/linux/delay.h
@@ -1,3 +1,4 @@
+/* SPDX-License-Identifier: GPL-2.0 */
 #ifndef _LINUX_DELAY_H
 #define _LINUX_DELAY_H
 

commit 9f8197980d87a28ec3d0b3b986f770e7e7878485
Author: Russell King <rmk+kernel@armlinux.org.uk>
Date:   Thu Jan 19 10:59:13 2017 +0000

    delay: Add explanation of udelay() inaccuracy
    
    There seems to be some misunderstanding that udelay() and friends will
    always guarantee the specified delay.  This is a false understanding.
    When udelay() is based on CPU cycles, it can return early for many
    reasons which are detailed by Linus' reply to me in a thread in 2011:
    
      http://lists.openwall.net/linux-kernel/2011/01/12/372
    
    However, a udelay test module was created in 2014 which allows udelay()
    to only be 0.5% fast, which is outside of the CPU-cycles udelay()
    results I measured back in 2011, which were deemed to be in the "we
    don't care" region.
    
    test_udelay() should be fixed to reflect the real allowable tolerance
    on udelay(), rather than 0.5%.
    
    Cc: David Riley <davidriley@chromium.org>
    Cc: John Stultz <john.stultz@linaro.org>
    Signed-off-by: Russell King <rmk+kernel@armlinux.org.uk>
    Signed-off-by: John Stultz <john.stultz@linaro.org>

diff --git a/include/linux/delay.h b/include/linux/delay.h
index a6ecb34cf547..2ecb3c46b20a 100644
--- a/include/linux/delay.h
+++ b/include/linux/delay.h
@@ -5,6 +5,17 @@
  * Copyright (C) 1993 Linus Torvalds
  *
  * Delay routines, using a pre-computed "loops_per_jiffy" value.
+ *
+ * Please note that ndelay(), udelay() and mdelay() may return early for
+ * several reasons:
+ *  1. computed loops_per_jiffy too low (due to the time taken to
+ *     execute the timer interrupt.)
+ *  2. cache behaviour affecting the time it takes to execute the
+ *     loop function.
+ *  3. CPU clock rate changes.
+ *
+ * Please see this thread:
+ *   http://lists.openwall.net/linux-kernel/2011/01/09/56
  */
 
 #include <linux/kernel.h>

commit 5e7f5a178bba45c5aca3448fddecabd4e28f1f6b
Author: Patrick Pannuto <ppannuto@codeaurora.org>
Date:   Mon Aug 2 15:01:04 2010 -0700

    timer: Added usleep_range timer
    
    usleep_range is a finer precision implementations of msleep
    and is designed to be a drop-in replacement for udelay where
    a precise sleep / busy-wait is unnecessary.
    
    Since an easy interface to hrtimers could lead to an undesired
    proliferation of interrupts, we provide only a "range" API,
    forcing the caller to think about an acceptable tolerance on
    both ends and hopefully avoiding introducing another interrupt.
    
    INTRO
    
    As discussed here ( http://lkml.org/lkml/2007/8/3/250 ), msleep(1) is not
    precise enough for many drivers (yes, sleep precision is an unfair notion,
    but consistently sleeping for ~an order of magnitude greater than requested
    is worth fixing). This patch adds a usleep API so that udelay does not have
    to be used. Obviously not every udelay can be replaced (those in atomic
    contexts or being used for simple bitbanging come to mind), but there are
    many, many examples of
    
    mydriver_write(...)
    /* Wait for hardware to latch */
    udelay(100)
    
    in various drivers where a busy-wait loop is neither beneficial nor
    necessary, but msleep simply does not provide enough precision and people
    are using a busy-wait loop instead.
    
    CONCERNS FROM THE RFC
    
    Why is udelay a problem / necessary? Most callers of udelay are in device/
    driver initialization code, which is serial...
    
            As I see it, there is only benefit to sleeping over a delay; the
            notion of "refactoring" areas that use udelay was presented, but
            I see usleep as the refactoring. Consider i2c, if the bus is busy,
            you need to wait a bit (say 100us) before trying again, your
            current options are:
    
                    * udelay(100)
                    * msleep(1) <-- As noted above, actually as high as ~20ms
                                    on some platforms, so not really an option
                    * Manually set up an hrtimer to try again in 100us (which
                      is what usleep does anyway...)
    
            People choose the udelay route because it is EASY; we need to
            provide a better easy route.
    
            Device / driver / boot code is *currently* serial, but every few
            months someone makes noise about parallelizing boot, and IMHO, a
            little forward-thinking now is one less thing to worry about
            if/when that ever happens
    
    udelay's could be preempted
    
            Sure, but if udelay plans on looping 1000 times, and it gets
            preempted on loop 200, whenever it's scheduled again, it is
            going to do the next 800 loops.
    
    Is the interruptible case needed?
    
            Probably not, but I see usleep as a very logical parallel to msleep,
            so it made sense to include the "full" API. Processors are getting
            faster (albeit not as quickly as they are becoming more parallel),
            so if someone wanted to be interruptible for a few usecs, why not
            let them? If this is a contentious point, I'm happy to remove it.
    
    OTHER THOUGHTS
    
    I believe there is also value in exposing the usleep_range option; it gives
    the scheduler a lot more flexibility and allows the programmer to express
    his intent much more clearly; it's something I would hope future driver
    writers will take advantage of.
    
    To get the results in the NUMBERS section below, I literally s/udelay/usleep
    the kernel tree; I had to go in and undo the changes to the USB drivers, but
    everything else booted successfully; I find that extremely telling in and
    of itself -- many people are using a delay API where a sleep will suit them
    just fine.
    
    SOME ATTEMPTS AT NUMBERS
    
    It turns out that calculating quantifiable benefit on this is challenging,
    so instead I will simply present the current state of things, and I hope
    this to be sufficient:
    
    How many udelay calls are there in 2.6.35-rc5?
    
            udealy(ARG) >=  | COUNT
            1000            | 319
            500             | 414
            100             | 1146
            20              | 1832
    
    I am working on Android, so that is my focus for this. The following table
    is a modified usleep that simply printk's the amount of time requested to
    sleep; these tests were run on a kernel with udelay >= 20 --> usleep
    
    "boot" is power-on to lock screen
    "power collapse" is when the power button is pushed and the device suspends
    "resume" is when the power button is pushed and the lock screen is displayed
             (no touchscreen events or anything, just turning on the display)
    "use device" is from the unlock swipe to clicking around a bit; there is no
            sd card in this phone, so fail loading music, video, camera
    
            ACTION          | TOTAL NUMBER OF USLEEP CALLS  | NET TIME (us)
            boot            | 22                            | 1250
            power-collapse  | 9                             | 1200
            resume          | 5                             | 500
            use device      | 59                            | 7700
    
    The most interesting category to me is the "use device" field; 7700us of
    busy-wait time that could be put towards better responsiveness, or at the
    least less power usage.
    
    Signed-off-by: Patrick Pannuto <ppannuto@codeaurora.org>
    Cc: apw@canonical.com
    Cc: corbet@lwn.net
    Cc: arjan@linux.intel.com
    Cc: Randy Dunlap <rdunlap@xenotime.net>
    Cc: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>

diff --git a/include/linux/delay.h b/include/linux/delay.h
index fd832c6d419e..a6ecb34cf547 100644
--- a/include/linux/delay.h
+++ b/include/linux/delay.h
@@ -45,6 +45,7 @@ extern unsigned long lpj_fine;
 void calibrate_delay(void);
 void msleep(unsigned int msecs);
 unsigned long msleep_interruptible(unsigned int msecs);
+void usleep_range(unsigned long min, unsigned long max);
 
 static inline void ssleep(unsigned int seconds)
 {

commit e1b004c3ef9c59db5f013528628b51c8653155ec
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Wed Aug 4 10:53:00 2010 +0200

    Revert "timer: Added usleep[_range] timer"
    
    This reverts commit 22b8f15c2f7130bb0386f548428df2ffd4e81903 to merge
    an advanced version.
    
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>

diff --git a/include/linux/delay.h b/include/linux/delay.h
index 0e303d1aacd8..fd832c6d419e 100644
--- a/include/linux/delay.h
+++ b/include/linux/delay.h
@@ -45,12 +45,6 @@ extern unsigned long lpj_fine;
 void calibrate_delay(void);
 void msleep(unsigned int msecs);
 unsigned long msleep_interruptible(unsigned int msecs);
-void usleep_range(unsigned long min, unsigned long max);
-
-static inline void usleep(unsigned long usecs)
-{
-	usleep_range(usecs, usecs);
-}
 
 static inline void ssleep(unsigned int seconds)
 {

commit 22b8f15c2f7130bb0386f548428df2ffd4e81903
Author: Patrick Pannuto <ppannuto@codeaurora.org>
Date:   Mon Jul 19 15:09:26 2010 -0700

    timer: Added usleep[_range] timer
    
    usleep[_range] are finer precision implementations of msleep
    and are designed to be drop-in replacements for udelay where
    a precise sleep / busy-wait is unnecessary. They also allow
    an easy interface to specify slack when a precise (ish)
    wakeup is unnecessary to help minimize wakeups
    
    Signed-off-by: Patrick Pannuto <ppannuto@codeaurora.org>
    Cc: akinobu.mita@gmail.com
    Cc: sboyd@codeaurora.org
    Acked-by: Arjan van de Ven <arjan@linux.intel.com>
    LKML-Reference: <4C44CDD2.1070708@codeaurora.org>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>

diff --git a/include/linux/delay.h b/include/linux/delay.h
index fd832c6d419e..0e303d1aacd8 100644
--- a/include/linux/delay.h
+++ b/include/linux/delay.h
@@ -45,6 +45,12 @@ extern unsigned long lpj_fine;
 void calibrate_delay(void);
 void msleep(unsigned int msecs);
 unsigned long msleep_interruptible(unsigned int msecs);
+void usleep_range(unsigned long min, unsigned long max);
+
+static inline void usleep(unsigned long usecs)
+{
+	usleep_range(usecs, usecs);
+}
 
 static inline void ssleep(unsigned int seconds)
 {

commit f3f3149f35b9195ef4b761b1353fc0766b5f53be
Author: Alok Kataria <akataria@vmware.com>
Date:   Mon Jun 23 18:21:56 2008 -0700

    x86: use cpu_khz for loops_per_jiffy calculation, cleanup
    
    As suggested by Ingo, remove all references to tsc from init/calibrate.c
    
    TSC is x86 specific, and using tsc in variable names in a generic file should
    be avoided. lpj_tsc is now called lpj_fine, since it is related to fine tuning
    of lpj value. Also tsc_rate_*  is called timer_rate_*
    
    Signed-off-by: Alok N Kataria <akataria@vmware.com>
    Cc: Arjan van de Ven <arjan@infradead.org>
    Cc: Daniel Hecht <dhecht@vmware.com>
    Cc: Tim Mann <mann@vmware.com>
    Cc: Zach Amsden <zach@vmware.com>
    Cc: Sahil Rihan <srihan@vmware.com>
    Signed-off-by: Ingo Molnar <mingo@elte.hu>

diff --git a/include/linux/delay.h b/include/linux/delay.h
index 01aec60590ab..fd832c6d419e 100644
--- a/include/linux/delay.h
+++ b/include/linux/delay.h
@@ -41,7 +41,7 @@ static inline void ndelay(unsigned long x)
 #define ndelay(x) ndelay(x)
 #endif
 
-extern unsigned long lpj_tsc;
+extern unsigned long lpj_fine;
 void calibrate_delay(void);
 void msleep(unsigned int msecs);
 unsigned long msleep_interruptible(unsigned int msecs);

commit 3da757daf86e498872855f0b5e101f763ba79499
Author: Alok Kataria <akataria@vmware.com>
Date:   Fri Jun 20 15:06:33 2008 -0700

    x86: use cpu_khz for loops_per_jiffy calculation
    
    On the x86 platform we can use the value of tsc_khz computed during tsc
    calibration to calculate the loops_per_jiffy value. Its very important
    to keep the error in lpj values to minimum as any error in that may
    result in kernel panic in check_timer. In virtualization environment, On
    a highly overloaded host the guest delay calibration may sometimes
    result in errors beyond the ~50% that timer_irq_works can handle,
    resulting in the guest panicking.
    
    Does some formating changes to lpj_setup code to now have a single
    printk to print the bogomips value.
    
    We do this only for the boot processor because the AP's can have
    different base frequencies or the BIOS might boot a AP at a different
    frequency.
    
    Signed-off-by: Alok N Kataria <akataria@vmware.com>
    Cc: Arjan van de Ven <arjan@infradead.org>
    Cc: Daniel Hecht <dhecht@vmware.com>
    Cc: Tim Mann <mann@vmware.com>
    Cc: Zach Amsden <zach@vmware.com>
    Cc: Sahil Rihan <srihan@vmware.com>
    Signed-off-by: Ingo Molnar <mingo@elte.hu>

diff --git a/include/linux/delay.h b/include/linux/delay.h
index 54552d21296e..01aec60590ab 100644
--- a/include/linux/delay.h
+++ b/include/linux/delay.h
@@ -41,6 +41,7 @@ static inline void ndelay(unsigned long x)
 #define ndelay(x) ndelay(x)
 #endif
 
+extern unsigned long lpj_tsc;
 void calibrate_delay(void);
 void msleep(unsigned int msecs);
 unsigned long msleep_interruptible(unsigned int msecs);

commit 5cba6d22e35a05adb28fdea191b232501518c455
Author: Andrew Morton <akpm@linux-foundation.org>
Date:   Tue Mar 4 14:28:45 2008 -0800

    ndelay(): switch to C function to avoid 64-bit division
    
    We should be able to do ndelay(some_u64), but that can cause a call to
    __divdi3() to be emitted because the ndelay() macros does a divide.
    
    Fix it by switching to static inline which will force the u64 arg to be
    treated as an unsigned long.  udelay() takes an unsigned long arg.
    
    [bunk@kernel.org: reported m68k build breakage]
    Cc: Adrian Bunk <bunk@kernel.org>
    Cc: Evgeniy Polyakov <johnpol@2ka.mipt.ru>
    Cc: Martin Michlmayr <tbm@cyrius.com>
    Cc: Herbert Xu <herbert@gondor.apana.org.au>
    Cc: Ralf Baechle <ralf@linux-mips.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: Ingo Molnar <mingo@elte.hu>
    Cc: Adrian Bunk <bunk@kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

diff --git a/include/linux/delay.h b/include/linux/delay.h
index 17ddb55430ae..54552d21296e 100644
--- a/include/linux/delay.h
+++ b/include/linux/delay.h
@@ -7,6 +7,8 @@
  * Delay routines, using a pre-computed "loops_per_jiffy" value.
  */
 
+#include <linux/kernel.h>
+
 extern unsigned long loops_per_jiffy;
 
 #include <asm/delay.h>
@@ -32,7 +34,11 @@ extern unsigned long loops_per_jiffy;
 #endif
 
 #ifndef ndelay
-#define ndelay(x)	udelay(((x)+999)/1000)
+static inline void ndelay(unsigned long x)
+{
+	udelay(DIV_ROUND_UP(x, 1000));
+}
+#define ndelay(x) ndelay(x)
 #endif
 
 void calibrate_delay(void);

commit 1e92a550e80fef01ebcc0bcd0896109cdb986c72
Author: Anton Blanchard <anton@samba.org>
Date:   Thu Jun 15 14:11:22 2006 +1000

    [POWERPC] Fix mdelay badness on shared processor partitions
    
    On partitioned PPC64 systems where a partition is given 1/10 of a
    processor, we have seen mdelay() delaying for 10 times longer than it
    should.  The reason is that the generic mdelay(n) does n delays of 1
    millisecond each.  However, with 1/10 of a processor, we only get a
    one-millisecond timeslice every 10ms.  Thus each 1 millisecond delay
    loop ends up taking 10ms elapsed time.
    
    The solution is just to use the PPC64 udelay function, which uses the
    timebase to ensure that the delay is based on elapsed time rather than
    how much processing time the partition has been given.  (Yes, the
    generic mdelay uses the PPC64 udelay, but the problem is that the
    start time gets reset every millisecond, and each time it gets reset
    we lose another 9ms.)
    
    Signed-off-by: Anton Blanchard <anton@samba.org>
    Signed-off-by: Paul Mackerras <paulus@samba.org>
    Acked-by: Andrew Morton <akpm@osdl.org>

diff --git a/include/linux/delay.h b/include/linux/delay.h
index acb74865b973..17ddb55430ae 100644
--- a/include/linux/delay.h
+++ b/include/linux/delay.h
@@ -25,10 +25,7 @@ extern unsigned long loops_per_jiffy;
 #define MAX_UDELAY_MS	5
 #endif
 
-#ifdef notdef
-#define mdelay(n) (\
-	{unsigned long __ms=(n); while (__ms--) udelay(1000);})
-#else
+#ifndef mdelay
 #define mdelay(n) (\
 	(__builtin_constant_p(n) && (n)<=MAX_UDELAY_MS) ? udelay((n)*1000) : \
 	({unsigned long __ms=(n); while (__ms--) udelay(1000);}))

commit 1da177e4c3f41524e886b7f1b8a0c1fc7321cac2
Author: Linus Torvalds <torvalds@ppc970.osdl.org>
Date:   Sat Apr 16 15:20:36 2005 -0700

    Linux-2.6.12-rc2
    
    Initial git repository build. I'm not bothering with the full history,
    even though we have it. We can create a separate "historical" git
    archive of that later if we want to, and in the meantime it's about
    3.2GB when imported into git - space that would just make the early
    git days unnecessarily complicated, when we don't have a lot of good
    infrastructure for it.
    
    Let it rip!

diff --git a/include/linux/delay.h b/include/linux/delay.h
new file mode 100644
index 000000000000..acb74865b973
--- /dev/null
+++ b/include/linux/delay.h
@@ -0,0 +1,50 @@
+#ifndef _LINUX_DELAY_H
+#define _LINUX_DELAY_H
+
+/*
+ * Copyright (C) 1993 Linus Torvalds
+ *
+ * Delay routines, using a pre-computed "loops_per_jiffy" value.
+ */
+
+extern unsigned long loops_per_jiffy;
+
+#include <asm/delay.h>
+
+/*
+ * Using udelay() for intervals greater than a few milliseconds can
+ * risk overflow for high loops_per_jiffy (high bogomips) machines. The
+ * mdelay() provides a wrapper to prevent this.  For delays greater
+ * than MAX_UDELAY_MS milliseconds, the wrapper is used.  Architecture
+ * specific values can be defined in asm-???/delay.h as an override.
+ * The 2nd mdelay() definition ensures GCC will optimize away the 
+ * while loop for the common cases where n <= MAX_UDELAY_MS  --  Paul G.
+ */
+
+#ifndef MAX_UDELAY_MS
+#define MAX_UDELAY_MS	5
+#endif
+
+#ifdef notdef
+#define mdelay(n) (\
+	{unsigned long __ms=(n); while (__ms--) udelay(1000);})
+#else
+#define mdelay(n) (\
+	(__builtin_constant_p(n) && (n)<=MAX_UDELAY_MS) ? udelay((n)*1000) : \
+	({unsigned long __ms=(n); while (__ms--) udelay(1000);}))
+#endif
+
+#ifndef ndelay
+#define ndelay(x)	udelay(((x)+999)/1000)
+#endif
+
+void calibrate_delay(void);
+void msleep(unsigned int msecs);
+unsigned long msleep_interruptible(unsigned int msecs);
+
+static inline void ssleep(unsigned int seconds)
+{
+	msleep(seconds * 1000);
+}
+
+#endif /* defined(_LINUX_DELAY_H) */
