commit c10bf3921e743dadb11a6cf59ffaf38cdbeb281b
Author: Rui Miguel Silva <rui.silva@linaro.org>
Date:   Tue Aug 27 16:53:02 2019 +0100

    staging: greybus: add missing includes
    
    Before moving greybus core out of staging and moving header files to
    include/linux some greybus header files were missing the necessary
    includes. This would trigger compilation faillures with some example
    errors logged bellow for with CONFIG_KERNEL_HEADER_TEST=y.
    
    So, add the necessary headers to compile clean before relocating the
    header files.
    
    ./include/linux/greybus/hd.h:23:50: error: unknown type name 'u16'
      int (*cport_disable)(struct gb_host_device *hd, u16 cport_id); ^~~
    ./include/linux/greybus/greybus_protocols.h:1314:2: error: unknown type name '__u8'
      __u8 data[0];
      ^~~~
    ./include/linux/greybus/hd.h:24:52: error: unknown type name 'u16'
      int (*cport_connected)(struct gb_host_device *hd, u16 cport_id); ^~~
    ./include/linux/greybus/hd.h:25:48: error: unknown type name 'u16'
      int (*cport_flush)(struct gb_host_device *hd, u16 cport_id); ^~~
    ./include/linux/greybus/hd.h:26:51: error: unknown type name 'u16'
      int (*cport_shutdown)(struct gb_host_device *hd, u16 cport_id, ^~~
    ./include/linux/greybus/hd.h:27:5: error: unknown type name 'u8'
    u8 phase, unsigned int timeout);
         ^~
    ./include/linux/greybus/hd.h:28:50: error: unknown type name 'u16'
      int (*cport_quiesce)(struct gb_host_device *hd, u16 cport_id, ^~~
    ./include/linux/greybus/hd.h:29:5: error: unknown type name 'size_t'
         size_t peer_space, unsigned int timeout);
         ^~~~~~
    ./include/linux/greybus/hd.h:29:5: note: 'size_t' is defined in header '<stddef.h>'; did you forget to '#include <stddef.h>'?
    ./include/linux/greybus/hd.h:1:1:
    +#include <stddef.h>
     /* SPDX-License-Identifier: GPL-2.0 */
    ./include/linux/greybus/hd.h:29:5:
         size_t peer_space, unsigned int timeout);
         ^~~~~~
    ./include/linux/greybus/hd.h:30:48: error: unknown type name 'u16'
      int (*cport_clear)(struct gb_host_device *hd, u16 cport_id); ^~~
    ./include/linux/greybus/hd.h:32:49: error: unknown type name 'u16'
      int (*message_send)(struct gb_host_device *hd, u16 dest_cport_id, ^~~
    ./include/linux/greybus/hd.h:33:32: error: unknown type name 'gfp_t'
    struct gb_message *message, gfp_t gfp_mask); ^~~~~
    ./include/linux/greybus/hd.h:35:55: error: unknown type name 'u16'
      int (*latency_tag_enable)(struct gb_host_device *hd, u16 cport_id);
    
    Reported-by: kbuild test robot <lkp@intel.com>
    Reported-by: Gao Xiang <hsiangkao@aol.com>
    Signed-off-by: Rui Miguel Silva <rmfrfs@gmail.com>
    Signed-off-by: Rui Miguel Silva <rui.silva@linaro.org>
    Link: https://lore.kernel.org/r/20190827155302.25704-1-rui.silva@linaro.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/include/linux/greybus/connection.h b/include/linux/greybus/connection.h
index 5ca3befc0636..d59b7fc1de3e 100644
--- a/include/linux/greybus/connection.h
+++ b/include/linux/greybus/connection.h
@@ -9,8 +9,11 @@
 #ifndef __CONNECTION_H
 #define __CONNECTION_H
 
+#include <linux/bits.h>
 #include <linux/list.h>
 #include <linux/kfifo.h>
+#include <linux/kref.h>
+#include <linux/workqueue.h>
 
 #define GB_CONNECTION_FLAG_CSD		BIT(0)
 #define GB_CONNECTION_FLAG_NO_FLOWCTRL	BIT(1)

commit ec0ad868173da8a75121f9dc116a5d5478ff614d
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Sun Aug 25 07:54:27 2019 +0200

    staging: greybus: move core include files to include/linux/greybus/
    
    With the goal of moving the core of the greybus code out of staging, the
    include files need to be moved to include/linux/greybus.h and
    include/linux/greybus/
    
    Cc: Vaibhav Hiremath <hvaibhav.linux@gmail.com>
    Cc: Johan Hovold <johan@kernel.org>
    Cc: Vaibhav Agarwal <vaibhav.sr@gmail.com>
    Cc: Rui Miguel Silva <rmfrfs@gmail.com>
    Cc: David Lin <dtwlin@gmail.com>
    Cc: "Bryan O'Donoghue" <pure.logic@nexus-software.ie>
    Cc: greybus-dev@lists.linaro.org
    Cc: devel@driverdev.osuosl.org
    Acked-by: Mark Greer <mgreer@animalcreek.com>
    Acked-by: Viresh Kumar <viresh.kumar@linaro.org>
    Acked-by: Alex Elder <elder@kernel.org>
    Link: https://lore.kernel.org/r/20190825055429.18547-8-gregkh@linuxfoundation.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/include/linux/greybus/connection.h b/include/linux/greybus/connection.h
new file mode 100644
index 000000000000..5ca3befc0636
--- /dev/null
+++ b/include/linux/greybus/connection.h
@@ -0,0 +1,128 @@
+/* SPDX-License-Identifier: GPL-2.0 */
+/*
+ * Greybus connections
+ *
+ * Copyright 2014 Google Inc.
+ * Copyright 2014 Linaro Ltd.
+ */
+
+#ifndef __CONNECTION_H
+#define __CONNECTION_H
+
+#include <linux/list.h>
+#include <linux/kfifo.h>
+
+#define GB_CONNECTION_FLAG_CSD		BIT(0)
+#define GB_CONNECTION_FLAG_NO_FLOWCTRL	BIT(1)
+#define GB_CONNECTION_FLAG_OFFLOADED	BIT(2)
+#define GB_CONNECTION_FLAG_CDSI1	BIT(3)
+#define GB_CONNECTION_FLAG_CONTROL	BIT(4)
+#define GB_CONNECTION_FLAG_HIGH_PRIO	BIT(5)
+
+#define GB_CONNECTION_FLAG_CORE_MASK	GB_CONNECTION_FLAG_CONTROL
+
+enum gb_connection_state {
+	GB_CONNECTION_STATE_DISABLED		= 0,
+	GB_CONNECTION_STATE_ENABLED_TX		= 1,
+	GB_CONNECTION_STATE_ENABLED		= 2,
+	GB_CONNECTION_STATE_DISCONNECTING	= 3,
+};
+
+struct gb_operation;
+
+typedef int (*gb_request_handler_t)(struct gb_operation *);
+
+struct gb_connection {
+	struct gb_host_device		*hd;
+	struct gb_interface		*intf;
+	struct gb_bundle		*bundle;
+	struct kref			kref;
+	u16				hd_cport_id;
+	u16				intf_cport_id;
+
+	struct list_head		hd_links;
+	struct list_head		bundle_links;
+
+	gb_request_handler_t		handler;
+	unsigned long			flags;
+
+	struct mutex			mutex;
+	spinlock_t			lock;
+	enum gb_connection_state	state;
+	struct list_head		operations;
+
+	char				name[16];
+	struct workqueue_struct		*wq;
+
+	atomic_t			op_cycle;
+
+	void				*private;
+
+	bool				mode_switch;
+};
+
+struct gb_connection *gb_connection_create_static(struct gb_host_device *hd,
+				u16 hd_cport_id, gb_request_handler_t handler);
+struct gb_connection *gb_connection_create_control(struct gb_interface *intf);
+struct gb_connection *gb_connection_create(struct gb_bundle *bundle,
+				u16 cport_id, gb_request_handler_t handler);
+struct gb_connection *gb_connection_create_flags(struct gb_bundle *bundle,
+				u16 cport_id, gb_request_handler_t handler,
+				unsigned long flags);
+struct gb_connection *gb_connection_create_offloaded(struct gb_bundle *bundle,
+				u16 cport_id, unsigned long flags);
+void gb_connection_destroy(struct gb_connection *connection);
+
+static inline bool gb_connection_is_static(struct gb_connection *connection)
+{
+	return !connection->intf;
+}
+
+int gb_connection_enable(struct gb_connection *connection);
+int gb_connection_enable_tx(struct gb_connection *connection);
+void gb_connection_disable_rx(struct gb_connection *connection);
+void gb_connection_disable(struct gb_connection *connection);
+void gb_connection_disable_forced(struct gb_connection *connection);
+
+void gb_connection_mode_switch_prepare(struct gb_connection *connection);
+void gb_connection_mode_switch_complete(struct gb_connection *connection);
+
+void greybus_data_rcvd(struct gb_host_device *hd, u16 cport_id,
+		       u8 *data, size_t length);
+
+void gb_connection_latency_tag_enable(struct gb_connection *connection);
+void gb_connection_latency_tag_disable(struct gb_connection *connection);
+
+static inline bool gb_connection_e2efc_enabled(struct gb_connection *connection)
+{
+	return !(connection->flags & GB_CONNECTION_FLAG_CSD);
+}
+
+static inline bool
+gb_connection_flow_control_disabled(struct gb_connection *connection)
+{
+	return connection->flags & GB_CONNECTION_FLAG_NO_FLOWCTRL;
+}
+
+static inline bool gb_connection_is_offloaded(struct gb_connection *connection)
+{
+	return connection->flags & GB_CONNECTION_FLAG_OFFLOADED;
+}
+
+static inline bool gb_connection_is_control(struct gb_connection *connection)
+{
+	return connection->flags & GB_CONNECTION_FLAG_CONTROL;
+}
+
+static inline void *gb_connection_get_data(struct gb_connection *connection)
+{
+	return connection->private;
+}
+
+static inline void gb_connection_set_data(struct gb_connection *connection,
+					  void *data)
+{
+	connection->private = data;
+}
+
+#endif /* __CONNECTION_H */
