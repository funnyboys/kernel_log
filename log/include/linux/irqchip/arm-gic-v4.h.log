commit d50676f5ce8481b98f9bbc1514b5d3f8747dd3c2
Author: Marc Zyngier <maz@kernel.org>
Date:   Wed Mar 4 20:33:22 2020 +0000

    irqchip/gic-v4.1: Add VSGI property setup
    
    Add the SGI configuration entry point for KVM to use.
    
    Signed-off-by: Marc Zyngier <maz@kernel.org>
    Reviewed-by: Zenghui Yu <yuzenghui@huawei.com>
    Link: https://lore.kernel.org/r/20200304203330.4967-16-maz@kernel.org

diff --git a/include/linux/irqchip/arm-gic-v4.h b/include/linux/irqchip/arm-gic-v4.h
index b120a01952fe..6976b8331b60 100644
--- a/include/linux/irqchip/arm-gic-v4.h
+++ b/include/linux/irqchip/arm-gic-v4.h
@@ -134,6 +134,7 @@ int its_map_vlpi(int irq, struct its_vlpi_map *map);
 int its_get_vlpi(int irq, struct its_vlpi_map *map);
 int its_unmap_vlpi(int irq);
 int its_prop_update_vlpi(int irq, u8 config, bool inv);
+int its_prop_update_vsgi(int irq, u8 priority, bool group);
 
 struct irq_domain_ops;
 int its_init_v4(struct irq_domain *domain,

commit 6d31b6ff985dbd144b2c4d519cf573b8f81865d9
Author: Marc Zyngier <maz@kernel.org>
Date:   Wed Mar 4 20:33:21 2020 +0000

    irqchip/gic-v4.1: Add VSGI allocation/teardown
    
    Allocate per-VPE SGIs when initializing the GIC-specific part of the
    VPE data structure.
    
    Signed-off-by: Marc Zyngier <maz@kernel.org>
    Reviewed-by: Zenghui Yu <yuzenghui@huawei.com>
    Link: https://lore.kernel.org/r/20200304203330.4967-15-maz@kernel.org

diff --git a/include/linux/irqchip/arm-gic-v4.h b/include/linux/irqchip/arm-gic-v4.h
index 34ed4b5754dd..b120a01952fe 100644
--- a/include/linux/irqchip/arm-gic-v4.h
+++ b/include/linux/irqchip/arm-gic-v4.h
@@ -49,6 +49,8 @@ struct its_vpe {
 		};
 		/* GICv4.1 implementations */
 		struct {
+			struct fwnode_handle	*fwnode;
+			struct irq_domain	*sgi_domain;
 			struct {
 				u8	priority;
 				bool	enabled;

commit ae699ad348cdcd416cbf28e8a02fc468780161f7
Author: Marc Zyngier <maz@kernel.org>
Date:   Wed Mar 4 20:33:20 2020 +0000

    irqchip/gic-v4.1: Move doorbell management to the GICv4 abstraction layer
    
    In order to hide some of the differences between v4.0 and v4.1, move
    the doorbell management out of the KVM code, and into the GICv4-specific
    layer. This allows the calling code to ask for the doorbell when blocking,
    and otherwise to leave the doorbell permanently disabled.
    
    This matches the v4.1 code perfectly, and only results in a minor
    refactoring of the v4.0 code.
    
    Signed-off-by: Marc Zyngier <maz@kernel.org>
    Reviewed-by: Zenghui Yu <yuzenghui@huawei.com>
    Link: https://lore.kernel.org/r/20200304203330.4967-14-maz@kernel.org

diff --git a/include/linux/irqchip/arm-gic-v4.h b/include/linux/irqchip/arm-gic-v4.h
index 1b34100e3536..34ed4b5754dd 100644
--- a/include/linux/irqchip/arm-gic-v4.h
+++ b/include/linux/irqchip/arm-gic-v4.h
@@ -125,7 +125,8 @@ struct its_cmd_info {
 
 int its_alloc_vcpu_irqs(struct its_vm *vm);
 void its_free_vcpu_irqs(struct its_vm *vm);
-int its_schedule_vpe(struct its_vpe *vpe, bool on);
+int its_make_vpe_resident(struct its_vpe *vpe, bool g0en, bool g1en);
+int its_make_vpe_non_resident(struct its_vpe *vpe, bool db);
 int its_invall_vpe(struct its_vpe *vpe);
 int its_map_vlpi(int irq, struct its_vlpi_map *map);
 int its_get_vlpi(int irq, struct its_vlpi_map *map);

commit 05d32df13c6b3c0850b68928048536e9a736d520
Author: Marc Zyngier <maz@kernel.org>
Date:   Wed Mar 4 20:33:19 2020 +0000

    irqchip/gic-v4.1: Plumb set_vcpu_affinity SGI callbacks
    
    Just like for vLPIs, there is some configuration information that cannot
    be directly communicated through the normal irqchip API, and we have to
    use our good old friend set_vcpu_affinity as a side-band communication
    mechanism.
    
    This is used to configure group and priority for a given vSGI.
    
    Signed-off-by: Marc Zyngier <maz@kernel.org>
    Reviewed-by: Zenghui Yu <yuzenghui@huawei.com>
    Reviewed-by: Eric Auger <eric.auger@redhat.com>
    Link: https://lore.kernel.org/r/20200304203330.4967-13-maz@kernel.org

diff --git a/include/linux/irqchip/arm-gic-v4.h b/include/linux/irqchip/arm-gic-v4.h
index 44e8c19e3d56..1b34100e3536 100644
--- a/include/linux/irqchip/arm-gic-v4.h
+++ b/include/linux/irqchip/arm-gic-v4.h
@@ -103,6 +103,7 @@ enum its_vcpu_info_cmd_type {
 	SCHEDULE_VPE,
 	DESCHEDULE_VPE,
 	INVALL_VPE,
+	PROP_UPDATE_VSGI,
 };
 
 struct its_cmd_info {
@@ -115,6 +116,10 @@ struct its_cmd_info {
 			bool		g0en;
 			bool		g1en;
 		};
+		struct {
+			u8		priority;
+			bool		group;
+		};
 	};
 };
 

commit 166cba71818cd49d7d815fdc6f97c63395e94fc5
Author: Marc Zyngier <maz@kernel.org>
Date:   Wed Mar 4 20:33:15 2020 +0000

    irqchip/gic-v4.1: Plumb skeletal VSGI irqchip
    
    Since GICv4.1 has the capability to inject 16 SGIs into each VPE,
    and that I'm keen not to invent too many specific interfaces to
    manipulate these interrupts, let's pretend that each of these SGIs
    is an actual Linux interrupt.
    
    For that matter, let's introduce a minimal irqchip and irqdomain
    setup that will get fleshed up in the following patches.
    
    Signed-off-by: Marc Zyngier <maz@kernel.org>
    Reviewed-by: Zenghui Yu <yuzenghui@huawei.com>
    Reviewed-by: Eric Auger <eric.auger@redhat.com>
    Link: https://lore.kernel.org/r/20200304203330.4967-9-maz@kernel.org

diff --git a/include/linux/irqchip/arm-gic-v4.h b/include/linux/irqchip/arm-gic-v4.h
index 439963f4c66a..44e8c19e3d56 100644
--- a/include/linux/irqchip/arm-gic-v4.h
+++ b/include/linux/irqchip/arm-gic-v4.h
@@ -49,6 +49,11 @@ struct its_vpe {
 		};
 		/* GICv4.1 implementations */
 		struct {
+			struct {
+				u8	priority;
+				bool	enabled;
+				bool	group;
+			}			sgi_config[16];
 			atomic_t vmapp_count;
 		};
 	};
@@ -123,6 +128,8 @@ int its_unmap_vlpi(int irq);
 int its_prop_update_vlpi(int irq, u8 config, bool inv);
 
 struct irq_domain_ops;
-int its_init_v4(struct irq_domain *domain, const struct irq_domain_ops *ops);
+int its_init_v4(struct irq_domain *domain,
+		const struct irq_domain_ops *vpe_ops,
+		const struct irq_domain_ops *sgi_ops);
 
 #endif

commit f3a059219bc718ccc3bf3ff894f089b7e9a93139
Author: Marc Zyngier <maz@kernel.org>
Date:   Wed Mar 4 20:33:10 2020 +0000

    irqchip/gic-v4.1: Ensure mutual exclusion between vPE affinity change and RD access
    
    Before GICv4.1, all operations would be serialized with the affinity
    changes by virtue of using the same ITS command queue. With v4.1, things
    change, as invalidations (and a number of other operations) are issued
    using the redistributor MMIO frame.
    
    We must thus make sure that these redistributor accesses cannot race
    against aginst the affinity change, or we may end-up talking to the
    wrong redistributor.
    
    To ensure this, we expand the irq_to_cpuid() helper to take a spinlock
    when the LPI is mapped to a vLPI (a new per-VPE lock) on each operation
    that requires mutual exclusion.
    
    Signed-off-by: Marc Zyngier <maz@kernel.org>
    Reviewed-by: Zenghui Yu <yuzenghui@huawei.com>
    Link: https://lore.kernel.org/r/20200304203330.4967-4-maz@kernel.org

diff --git a/include/linux/irqchip/arm-gic-v4.h b/include/linux/irqchip/arm-gic-v4.h
index d9c34968467a..439963f4c66a 100644
--- a/include/linux/irqchip/arm-gic-v4.h
+++ b/include/linux/irqchip/arm-gic-v4.h
@@ -53,6 +53,11 @@ struct its_vpe {
 		};
 	};
 
+	/*
+	 * Ensures mutual exclusion between affinity setting of the
+	 * vPE and vLPI operations using vpe->col_idx.
+	 */
+	raw_spinlock_t		vpe_lock;
 	/*
 	 * This collection ID is used to indirect the target
 	 * redistributor for this VPE. The ID itself isn't involved in

commit 91bf6395f7b8614a5a9934a0ae9c8b5312d77b29
Author: Marc Zyngier <maz@kernel.org>
Date:   Tue Dec 24 11:10:34 2019 +0000

    irqchip/gic-v4.1: Add VPE residency callback
    
    Making a VPE resident on GICv4.1 is pretty simple, as it is just a
    single write to the local redistributor. We just need extra information
    about which groups to enable, which the KVM code will have to provide.
    
    Signed-off-by: Marc Zyngier <maz@kernel.org>
    Reviewed-by: Zenghui Yu <yuzenghui@huawei.com>
    Link: https://lore.kernel.org/r/20191224111055.11836-12-maz@kernel.org

diff --git a/include/linux/irqchip/arm-gic-v4.h b/include/linux/irqchip/arm-gic-v4.h
index 498e523085a7..d9c34968467a 100644
--- a/include/linux/irqchip/arm-gic-v4.h
+++ b/include/linux/irqchip/arm-gic-v4.h
@@ -100,6 +100,11 @@ struct its_cmd_info {
 	union {
 		struct its_vlpi_map	*map;
 		u8			config;
+		bool			req_db;
+		struct {
+			bool		g0en;
+			bool		g1en;
+		};
 	};
 };
 

commit 64edfaa9a2342a3ce34f8cb982c2c2df84db4de3
Author: Marc Zyngier <maz@kernel.org>
Date:   Tue Dec 24 11:10:29 2019 +0000

    irqchip/gic-v4.1: Implement the v4.1 flavour of VMAPP
    
    The ITS VMAPP command gains some new fields with GICv4.1:
    - a default doorbell, which allows a single doorbell to be used for
      all the VLPIs routed to a given VPE
    - a pointer to the configuration table (instead of having it in a register
      that gets context switched)
    - a flag indicating whether this is the first map or the last unmap for
      this particular VPE
    - a flag indicating whether the pending table is known to be zeroed, or not
    
    Plumb in the new fields in the VMAPP builder, and add the map/unmap
    refcounting so that the ITS can do the right thing.
    
    Signed-off-by: Marc Zyngier <maz@kernel.org>
    Reviewed-by: Zenghui Yu <yuzenghui@huawei.com>
    Link: https://lore.kernel.org/r/20191224111055.11836-7-maz@kernel.org

diff --git a/include/linux/irqchip/arm-gic-v4.h b/include/linux/irqchip/arm-gic-v4.h
index 5dbcfc65f21e..498e523085a7 100644
--- a/include/linux/irqchip/arm-gic-v4.h
+++ b/include/linux/irqchip/arm-gic-v4.h
@@ -39,8 +39,20 @@ struct its_vpe {
 	irq_hw_number_t		vpe_db_lpi;
 	/* VPE resident */
 	bool			resident;
-	/* VPE proxy mapping */
-	int			vpe_proxy_event;
+	union {
+		/* GICv4.0 implementations */
+		struct {
+			/* VPE proxy mapping */
+			int	vpe_proxy_event;
+			/* Implementation Defined Area Invalid */
+			bool	idai;
+		};
+		/* GICv4.1 implementations */
+		struct {
+			atomic_t vmapp_count;
+		};
+	};
+
 	/*
 	 * This collection ID is used to indirect the target
 	 * redistributor for this VPE. The ID itself isn't involved in
@@ -49,8 +61,6 @@ struct its_vpe {
 	u16			col_idx;
 	/* Unique (system-wide) VPE identifier */
 	u16			vpe_id;
-	/* Implementation Defined Area Invalid */
-	bool			idai;
 	/* Pending VLPIs on schedule out? */
 	bool			pending_last;
 };

commit 5bd90b0989731520f2cdcfbbe467f1271f3cc803
Author: Marc Zyngier <maz@kernel.org>
Date:   Thu Nov 7 16:04:11 2019 +0000

    KVM: vgic-v4: Track the number of VLPIs per vcpu
    
    In order to find out whether a vcpu is likely to be the target of
    VLPIs (and to further optimize the way we deal with those), let's
    track the number of VLPIs a vcpu can receive.
    
    This gets implemented with an atomic variable that gets incremented
    or decremented on map, unmap and move of a VLPI.
    
    Signed-off-by: Marc Zyngier <maz@kernel.org>
    Reviewed-by: Zenghui Yu <yuzenghui@huawei.com>
    Reviewed-by: Christoffer Dall <christoffer.dall@arm.com>
    Link: https://lore.kernel.org/r/20191107160412.30301-2-maz@kernel.org

diff --git a/include/linux/irqchip/arm-gic-v4.h b/include/linux/irqchip/arm-gic-v4.h
index ab1396afe08a..5dbcfc65f21e 100644
--- a/include/linux/irqchip/arm-gic-v4.h
+++ b/include/linux/irqchip/arm-gic-v4.h
@@ -32,6 +32,8 @@ struct its_vm {
 struct its_vpe {
 	struct page 		*vpt_page;
 	struct its_vm		*its_vm;
+	/* per-vPE VLPI tracking */
+	atomic_t		vlpi_count;
 	/* Doorbell interrupt */
 	int			irq;
 	irq_hw_number_t		vpe_db_lpi;

commit 8e01d9a396e6db153d94a6004e6473d9ff251a6a
Author: Marc Zyngier <maz@kernel.org>
Date:   Sun Oct 27 14:41:59 2019 +0000

    KVM: arm64: vgic-v4: Move the GICv4 residency flow to be driven by vcpu_load/put
    
    When the VHE code was reworked, a lot of the vgic stuff was moved around,
    but the GICv4 residency code did stay untouched, meaning that we come
    in and out of residency on each flush/sync, which is obviously suboptimal.
    
    To address this, let's move things around a bit:
    
    - Residency entry (flush) moves to vcpu_load
    - Residency exit (sync) moves to vcpu_put
    - On blocking (entry to WFI), we "put"
    - On unblocking (exit from WFI), we "load"
    
    Because these can nest (load/block/put/load/unblock/put, for example),
    we now have per-VPE tracking of the residency state.
    
    Additionally, vgic_v4_put gains a "need doorbell" parameter, which only
    gets set to true when blocking because of a WFI. This allows a finer
    control of the doorbell, which now also gets disabled as soon as
    it gets signaled.
    
    Signed-off-by: Marc Zyngier <maz@kernel.org>
    Link: https://lore.kernel.org/r/20191027144234.8395-2-maz@kernel.org

diff --git a/include/linux/irqchip/arm-gic-v4.h b/include/linux/irqchip/arm-gic-v4.h
index e6b155713b47..ab1396afe08a 100644
--- a/include/linux/irqchip/arm-gic-v4.h
+++ b/include/linux/irqchip/arm-gic-v4.h
@@ -35,6 +35,8 @@ struct its_vpe {
 	/* Doorbell interrupt */
 	int			irq;
 	irq_hw_number_t		vpe_db_lpi;
+	/* VPE resident */
+	bool			resident;
 	/* VPE proxy mapping */
 	int			vpe_proxy_event;
 	/*

commit caab277b1de0a22b675c4c95fc7b285ec2eb5bf5
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Mon Jun 3 07:44:50 2019 +0200

    treewide: Replace GPLv2 boilerplate/reference with SPDX - rule 234
    
    Based on 1 normalized pattern(s):
    
      this program is free software you can redistribute it and or modify
      it under the terms of the gnu general public license version 2 as
      published by the free software foundation this program is
      distributed in the hope that it will be useful but without any
      warranty without even the implied warranty of merchantability or
      fitness for a particular purpose see the gnu general public license
      for more details you should have received a copy of the gnu general
      public license along with this program if not see http www gnu org
      licenses
    
    extracted by the scancode license scanner the SPDX license identifier
    
      GPL-2.0-only
    
    has been chosen to replace the boilerplate/reference in 503 file(s).
    
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Reviewed-by: Alexios Zavras <alexios.zavras@intel.com>
    Reviewed-by: Allison Randal <allison@lohutok.net>
    Reviewed-by: Enrico Weigelt <info@metux.net>
    Cc: linux-spdx@vger.kernel.org
    Link: https://lkml.kernel.org/r/20190602204653.811534538@linutronix.de
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/include/linux/irqchip/arm-gic-v4.h b/include/linux/irqchip/arm-gic-v4.h
index fa683ea5c769..e6b155713b47 100644
--- a/include/linux/irqchip/arm-gic-v4.h
+++ b/include/linux/irqchip/arm-gic-v4.h
@@ -1,18 +1,7 @@
+/* SPDX-License-Identifier: GPL-2.0-only */
 /*
  * Copyright (C) 2016,2017 ARM Limited, All Rights Reserved.
  * Author: Marc Zyngier <marc.zyngier@arm.com>
- *
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License version 2 as
- * published by the Free Software Foundation.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program.  If not, see <http://www.gnu.org/licenses/>.
  */
 
 #ifndef __LINUX_IRQCHIP_ARM_GIC_V4_H

commit 47f9d0bf526058b3fdc077698fcb19748d5700e4
Author: Marc Zyngier <marc.zyngier@arm.com>
Date:   Mon Nov 13 16:21:33 2017 +0000

    irqchip/gic-v4: Add forward definition of struct irq_domain_ops
    
    In some randconfig scenarios, including arm-gic-v4.h results
    in a spurious wawrning about the $SUBJECT structure not being
    defined. Adding a forward definition keeps it quiet.
    
    Reported-by: Arnd Bergmann <arnd@arndb.de>
    Signed-off-by: Marc Zyngier <marc.zyngier@arm.com>

diff --git a/include/linux/irqchip/arm-gic-v4.h b/include/linux/irqchip/arm-gic-v4.h
index 447da8ca2156..fa683ea5c769 100644
--- a/include/linux/irqchip/arm-gic-v4.h
+++ b/include/linux/irqchip/arm-gic-v4.h
@@ -109,6 +109,7 @@ int its_get_vlpi(int irq, struct its_vlpi_map *map);
 int its_unmap_vlpi(int irq);
 int its_prop_update_vlpi(int irq, u8 config, bool inv);
 
+struct irq_domain_ops;
 int its_init_v4(struct irq_domain *domain, const struct irq_domain_ops *ops);
 
 #endif

commit d4d7b4ad2f05c03fb25252aea66f9f3cd7cfbe06
Author: Marc Zyngier <marc.zyngier@arm.com>
Date:   Thu Oct 26 10:44:07 2017 +0100

    irqchip/gic-v3-its: Setup VLPI properties at map time
    
    So far, we require the hypervisor to update the VLPI properties
    once the the VLPI mapping has been established. While this
    makes it easy for the ITS driver, it creates a window where
    an incoming interrupt can be delivered with an unknown set
    of properties. Not very nice.
    
    Instead, let's add a "properties" field to the mapping structure,
    and use that to configure the VLPI before it actually gets mapped.
    
    Reviewed-by: Christoffer Dall <christoffer.dall@linaro.org>
    Signed-off-by: Marc Zyngier <marc.zyngier@arm.com>

diff --git a/include/linux/irqchip/arm-gic-v4.h b/include/linux/irqchip/arm-gic-v4.h
index 43cde15f221b..447da8ca2156 100644
--- a/include/linux/irqchip/arm-gic-v4.h
+++ b/include/linux/irqchip/arm-gic-v4.h
@@ -71,12 +71,14 @@ struct its_vpe {
  * @vm:		Pointer to the GICv4 notion of a VM
  * @vpe:	Pointer to the GICv4 notion of a virtual CPU (VPE)
  * @vintid:	Virtual LPI number
+ * @properties:	Priority and enable bits (as written in the prop table)
  * @db_enabled:	Is the VPE doorbell to be generated?
  */
 struct its_vlpi_map {
 	struct its_vm		*vm;
 	struct its_vpe		*vpe;
 	u32			vintid;
+	u8			properties;
 	bool			db_enabled;
 };
 

commit 2247e1bf70639642b1c1375aa9176ccd95736400
Author: Marc Zyngier <marc.zyngier@arm.com>
Date:   Sun Oct 8 18:50:36 2017 +0100

    irqchip/gic-v3-its: Limit scope of VPE mapping to be per ITS
    
    So far, we map all VPEs on all ITSs. While this is not wrong,
    this is quite a big hammer, as moving a VPE around requires
    all ITSs to be synchronized. Needles to say, this is an
    expensive proposition.
    
    Instead, let's switch to a mode where we issue VMAPP commands
    only on ITSs that are actually involved in reporting interrupts
    to the given VM.
    
    For that purpose, we refcount the number of interrupts are are
    mapped for this VM on each ITS, performing the map/unmap
    operations as required. It then allows us to use this refcount
    to only issue VMOVP to the ITSs that need to know about this
    VM.
    
    Signed-off-by: Marc Zyngier <marc.zyngier@arm.com>

diff --git a/include/linux/irqchip/arm-gic-v4.h b/include/linux/irqchip/arm-gic-v4.h
index e26a668826e6..43cde15f221b 100644
--- a/include/linux/irqchip/arm-gic-v4.h
+++ b/include/linux/irqchip/arm-gic-v4.h
@@ -36,6 +36,7 @@ struct its_vm {
 	irq_hw_number_t		db_lpi_base;
 	unsigned long		*db_bitmap;
 	int			nr_db_lpis;
+	u32			vlpi_count[GICv4_ITS_LIST_MAX];
 };
 
 /* Embedded in kvm_vcpu.arch */

commit ab60491ee5d346557f152c7e8d3e7238c9b96c5c
Author: Marc Zyngier <marc.zyngier@arm.com>
Date:   Sun Oct 8 18:48:06 2017 +0100

    irqchip/gic-v3-its: Make GICv4_ITS_LIST_MAX globally available
    
    As we're about to make use of the maximum number of ITSs in
    a GICv4 system, let's make this value global (and rename it to
    GICv4_ITS_LIST_MAX).
    
    Signed-off-by: Marc Zyngier <marc.zyngier@arm.com>

diff --git a/include/linux/irqchip/arm-gic-v4.h b/include/linux/irqchip/arm-gic-v4.h
index 58a4d89aa82c..e26a668826e6 100644
--- a/include/linux/irqchip/arm-gic-v4.h
+++ b/include/linux/irqchip/arm-gic-v4.h
@@ -20,6 +20,12 @@
 
 struct its_vpe;
 
+/*
+ * Maximum number of ITTs when GITS_TYPER.VMOVP == 0, using the
+ * ITSList mechanism to perform inter-ITS synchronization.
+ */
+#define GICv4_ITS_LIST_MAX		16
+
 /* Embedded in kvm.arch */
 struct its_vm {
 	struct fwnode_handle	*fwnode;

commit 3d63cb53e221d8ab347e94aeac0b5511857beb7f
Author: Marc Zyngier <marc.zyngier@arm.com>
Date:   Tue Dec 20 15:31:54 2016 +0000

    irqchip/gic-v4: Enable low-level GICv4 operations
    
    Get the show on the road...
    
    Reviewed-by: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Marc Zyngier <marc.zyngier@arm.com>

diff --git a/include/linux/irqchip/arm-gic-v4.h b/include/linux/irqchip/arm-gic-v4.h
index e22f878ad017..58a4d89aa82c 100644
--- a/include/linux/irqchip/arm-gic-v4.h
+++ b/include/linux/irqchip/arm-gic-v4.h
@@ -100,4 +100,6 @@ int its_get_vlpi(int irq, struct its_vlpi_map *map);
 int its_unmap_vlpi(int irq);
 int its_prop_update_vlpi(int irq, u8 config, bool inv);
 
+int its_init_v4(struct irq_domain *domain, const struct irq_domain_ops *ops);
+
 #endif

commit f2eac75de435871d5a497f8b557874a2a8a7b264
Author: Marc Zyngier <marc.zyngier@arm.com>
Date:   Wed Dec 21 21:50:32 2016 +0000

    irqchip/gic-v4: Add VLPI configuration interface
    
    Add the required interfaces to map, unmap and update a VLPI.
    
    Reviewed-by: Eric Auger <eric.auger@redhat.com>
    Reviewed-by: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Marc Zyngier <marc.zyngier@arm.com>

diff --git a/include/linux/irqchip/arm-gic-v4.h b/include/linux/irqchip/arm-gic-v4.h
index 6450f3ed101f..e22f878ad017 100644
--- a/include/linux/irqchip/arm-gic-v4.h
+++ b/include/linux/irqchip/arm-gic-v4.h
@@ -95,5 +95,9 @@ int its_alloc_vcpu_irqs(struct its_vm *vm);
 void its_free_vcpu_irqs(struct its_vm *vm);
 int its_schedule_vpe(struct its_vpe *vpe, bool on);
 int its_invall_vpe(struct its_vpe *vpe);
+int its_map_vlpi(int irq, struct its_vlpi_map *map);
+int its_get_vlpi(int irq, struct its_vlpi_map *map);
+int its_unmap_vlpi(int irq);
+int its_prop_update_vlpi(int irq, u8 config, bool inv);
 
 #endif

commit eab84318c2811e3f38c080efcc7f709f51bb8370
Author: Marc Zyngier <marc.zyngier@arm.com>
Date:   Tue Dec 20 15:31:02 2016 +0000

    irqchip/gic-v4: Add VPE command interface
    
    Add the required interfaces to schedule a VPE and perform a
    VINVALL command.
    
    Reviewed-by: Thomas Gleixner <tglx@linutronix.de>
    Reviewed-by: Eric Auger <eric.auger@redhat.com>
    Signed-off-by: Marc Zyngier <marc.zyngier@arm.com>

diff --git a/include/linux/irqchip/arm-gic-v4.h b/include/linux/irqchip/arm-gic-v4.h
index 3dc811dc53da..6450f3ed101f 100644
--- a/include/linux/irqchip/arm-gic-v4.h
+++ b/include/linux/irqchip/arm-gic-v4.h
@@ -93,5 +93,7 @@ struct its_cmd_info {
 
 int its_alloc_vcpu_irqs(struct its_vm *vm);
 void its_free_vcpu_irqs(struct its_vm *vm);
+int its_schedule_vpe(struct its_vpe *vpe, bool on);
+int its_invall_vpe(struct its_vpe *vpe);
 
 #endif

commit 7de5c0af9c7c717f9052e6d75b24f90050e6a56e
Author: Marc Zyngier <marc.zyngier@arm.com>
Date:   Tue Dec 20 15:27:52 2016 +0000

    irqchip/gic-v4: Add per-VM VPE domain creation
    
    When creating a VM, it is very convenient to have an irq domain
    containing all the doorbell interrupts associated with that VM
    (each interrupt representing a VPE).
    
    Reviewed-by: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Marc Zyngier <marc.zyngier@arm.com>

diff --git a/include/linux/irqchip/arm-gic-v4.h b/include/linux/irqchip/arm-gic-v4.h
index e7a93ad4fe97..3dc811dc53da 100644
--- a/include/linux/irqchip/arm-gic-v4.h
+++ b/include/linux/irqchip/arm-gic-v4.h
@@ -91,4 +91,7 @@ struct its_cmd_info {
 	};
 };
 
+int its_alloc_vcpu_irqs(struct its_vm *vm);
+void its_free_vcpu_irqs(struct its_vm *vm);
+
 #endif

commit 20b3d54ecba51c5fe476eea94ffdc463559c5c85
Author: Marc Zyngier <marc.zyngier@arm.com>
Date:   Tue Dec 20 15:23:22 2016 +0000

    irqchip/gic-v3-its: Add device proxy for VPE management if !DirectLpi
    
    When we don't have the DirectLPI feature, we must work around the
    architecture shortcomings to be able to perform the required
    maintenance (interrupt masking, clearing and injection).
    
    For this, we create a fake device whose sole purpose is to
    provide a way to issue commands as if we were dealing with LPIs
    coming from that device (while they actually originate from
    the ITS). This fake device doesn't have LPIs allocated to it,
    but instead uses the VPE LPIs.
    
    Of course, this could be a real bottleneck, and a naive
    implementation would require 6 commands to issue an invalidation.
    
    Instead, let's allocate at least one event per physical CPU
    (rounded up to the next power of 2), and opportunistically
    map the VPE doorbell to an event. This doorbell will be mapped
    until we roll over and need to reallocate this slot.
    
    This ensures that most of the time, we only need 2 commands
    to issue an INV, INT or CLEAR, making the performance a lot
    better, given that we always issue a CLEAR on entry, and
    an INV on each side of a trapped WFI.
    
    Signed-off-by: Marc Zyngier <marc.zyngier@arm.com>

diff --git a/include/linux/irqchip/arm-gic-v4.h b/include/linux/irqchip/arm-gic-v4.h
index d499538dd86f..e7a93ad4fe97 100644
--- a/include/linux/irqchip/arm-gic-v4.h
+++ b/include/linux/irqchip/arm-gic-v4.h
@@ -39,6 +39,8 @@ struct its_vpe {
 	/* Doorbell interrupt */
 	int			irq;
 	irq_hw_number_t		vpe_db_lpi;
+	/* VPE proxy mapping */
+	int			vpe_proxy_event;
 	/*
 	 * This collection ID is used to indirect the target
 	 * redistributor for this VPE. The ID itself isn't involved in

commit de29faa0d8ac925534749bc56d539bf936ce122b
Author: Marc Zyngier <marc.zyngier@arm.com>
Date:   Mon Dec 19 19:25:00 2016 +0000

    irqchip/gic-v4: Add management structure definitions
    
    Add a bunch of GICv4-specific data structures that will get used in
    subsequent patches.
    
    Reviewed-by: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Marc Zyngier <marc.zyngier@arm.com>

diff --git a/include/linux/irqchip/arm-gic-v4.h b/include/linux/irqchip/arm-gic-v4.h
new file mode 100644
index 000000000000..d499538dd86f
--- /dev/null
+++ b/include/linux/irqchip/arm-gic-v4.h
@@ -0,0 +1,92 @@
+/*
+ * Copyright (C) 2016,2017 ARM Limited, All Rights Reserved.
+ * Author: Marc Zyngier <marc.zyngier@arm.com>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+#ifndef __LINUX_IRQCHIP_ARM_GIC_V4_H
+#define __LINUX_IRQCHIP_ARM_GIC_V4_H
+
+struct its_vpe;
+
+/* Embedded in kvm.arch */
+struct its_vm {
+	struct fwnode_handle	*fwnode;
+	struct irq_domain	*domain;
+	struct page		*vprop_page;
+	struct its_vpe		**vpes;
+	int			nr_vpes;
+	irq_hw_number_t		db_lpi_base;
+	unsigned long		*db_bitmap;
+	int			nr_db_lpis;
+};
+
+/* Embedded in kvm_vcpu.arch */
+struct its_vpe {
+	struct page 		*vpt_page;
+	struct its_vm		*its_vm;
+	/* Doorbell interrupt */
+	int			irq;
+	irq_hw_number_t		vpe_db_lpi;
+	/*
+	 * This collection ID is used to indirect the target
+	 * redistributor for this VPE. The ID itself isn't involved in
+	 * programming of the ITS.
+	 */
+	u16			col_idx;
+	/* Unique (system-wide) VPE identifier */
+	u16			vpe_id;
+	/* Implementation Defined Area Invalid */
+	bool			idai;
+	/* Pending VLPIs on schedule out? */
+	bool			pending_last;
+};
+
+/*
+ * struct its_vlpi_map: structure describing the mapping of a
+ * VLPI. Only to be interpreted in the context of a physical interrupt
+ * it complements.  To be used as the vcpu_info passed to
+ * irq_set_vcpu_affinity().
+ *
+ * @vm:		Pointer to the GICv4 notion of a VM
+ * @vpe:	Pointer to the GICv4 notion of a virtual CPU (VPE)
+ * @vintid:	Virtual LPI number
+ * @db_enabled:	Is the VPE doorbell to be generated?
+ */
+struct its_vlpi_map {
+	struct its_vm		*vm;
+	struct its_vpe		*vpe;
+	u32			vintid;
+	bool			db_enabled;
+};
+
+enum its_vcpu_info_cmd_type {
+	MAP_VLPI,
+	GET_VLPI,
+	PROP_UPDATE_VLPI,
+	PROP_UPDATE_AND_INV_VLPI,
+	SCHEDULE_VPE,
+	DESCHEDULE_VPE,
+	INVALL_VPE,
+};
+
+struct its_cmd_info {
+	enum its_vcpu_info_cmd_type	cmd_type;
+	union {
+		struct its_vlpi_map	*map;
+		u8			config;
+	};
+};
+
+#endif
