commit 5b978c10665973d8ee7050b03ef6e97013066b03
Author: Linus Walleij <linus.walleij@linaro.org>
Date:   Fri Jan 25 16:41:25 2019 +0100

    irqchip: Add driver for IXP4xx
    
    The IXP4xx (arch/arm/mach-ixp4xx) is an old Intel XScale
    platform that has very wide deployment and use.
    
    As part of modernizing the platform, we need to implement a
    proper irqchip in the irqchip subsystem.
    
    The IXP4xx irqchip is tightly jotted together with the GPIO
    controller, and whereas in the past we would deal with this
    complex logic by adding necessarily different code, we can
    nowadays modernize it using a hierarchical irqchip.
    
    The actual IXP4 irqchip is a simple active low level IRQ
    controller, whereas the GPIO functionality resides in a
    different memory area and adds edge trigger support for
    the interrupts.
    
    The interrupts from GPIO lines 0..12 are 1:1 mapped to
    a fixed set of hardware IRQs on this IRQchip, so we
    expect the child GPIO interrupt controller to go in and
    allocate descriptors for these interrupts.
    
    For the other interrupts, as we do not yet have DT
    support for this platform, we create a linear irqdomain
    and then go in and allocate the IRQs that the legacy
    boards use. This code will be removed on the DT probe
    path when we add DT support to the platform.
    
    We add some translation code for supporting DT
    translations for the fwnodes, but we leave most of that
    for later.
    
    Cc: Marc Zyngier <marc.zyngier@arm.com>
    Cc: Jason Cooper <jason@lakedaemon.net>
    Acked-by: Marc Zyngier <marc.zyngier@arm.com>
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>

diff --git a/include/linux/irqchip/irq-ixp4xx.h b/include/linux/irqchip/irq-ixp4xx.h
new file mode 100644
index 000000000000..9395917d6936
--- /dev/null
+++ b/include/linux/irqchip/irq-ixp4xx.h
@@ -0,0 +1,12 @@
+/* SPDX-License-Identifier: GPL-2.0 */
+#ifndef __IRQ_IXP4XX_H
+#define __IRQ_IXP4XX_H
+
+#include <linux/ioport.h>
+struct irq_domain;
+
+void ixp4xx_irq_init(resource_size_t irqbase,
+		     bool is_356);
+struct irq_domain *ixp4xx_get_irq_domain(void);
+
+#endif /* __IRQ_IXP4XX_H */
