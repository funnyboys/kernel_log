commit d2912cb15bdda8ba4a5dd73396ad62641af2f520
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Tue Jun 4 10:11:33 2019 +0200

    treewide: Replace GPLv2 boilerplate/reference with SPDX - rule 500
    
    Based on 2 normalized pattern(s):
    
      this program is free software you can redistribute it and or modify
      it under the terms of the gnu general public license version 2 as
      published by the free software foundation
    
      this program is free software you can redistribute it and or modify
      it under the terms of the gnu general public license version 2 as
      published by the free software foundation #
    
    extracted by the scancode license scanner the SPDX license identifier
    
      GPL-2.0-only
    
    has been chosen to replace the boilerplate/reference in 4122 file(s).
    
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Reviewed-by: Enrico Weigelt <info@metux.net>
    Reviewed-by: Kate Stewart <kstewart@linuxfoundation.org>
    Reviewed-by: Allison Randal <allison@lohutok.net>
    Cc: linux-spdx@vger.kernel.org
    Link: https://lkml.kernel.org/r/20190604081206.933168790@linutronix.de
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/include/linux/iio/sw_trigger.h b/include/linux/iio/sw_trigger.h
index 0c43738a9e24..47de2443e984 100644
--- a/include/linux/iio/sw_trigger.h
+++ b/include/linux/iio/sw_trigger.h
@@ -1,11 +1,8 @@
+/* SPDX-License-Identifier: GPL-2.0-only */
 /*
  * Industrial I/O software trigger interface
  *
  * Copyright (c) 2015 Intel Corporation
- *
- * This program is free software; you can redistribute it and/or modify it
- * under the terms of the GNU General Public License version 2 as published by
- * the Free Software Foundation.
  */
 
 #ifndef __IIO_SW_TRIGGER

commit 612a462acbb9f3bfc7c8433b44118b0a156560da
Author: Bhumika Goyal <bhumirks@gmail.com>
Date:   Mon Oct 16 17:18:43 2017 +0200

    iio: make function argument and some structures const
    
    Make the argument of the functions iio_sw{d/t}_group_init_type_name const
    as they are only passed to the function config_group_init_type_name having
    the argument as const.
    
    Make the config_item_type structures const as they are either passed to
    the functions having the argument as const or they are
    stored in the const "ci_type" field of a config_item structure.
    
    Signed-off-by: Bhumika Goyal <bhumirks@gmail.com>
    Acked-by: Jonathan Cameron <Jonathan.Cameron@Huawei.com>
    Signed-off-by: Christoph Hellwig <hch@lst.de>

diff --git a/include/linux/iio/sw_trigger.h b/include/linux/iio/sw_trigger.h
index c97eab67558f..0c43738a9e24 100644
--- a/include/linux/iio/sw_trigger.h
+++ b/include/linux/iio/sw_trigger.h
@@ -60,7 +60,7 @@ void iio_sw_trigger_type_configfs_unregister(struct iio_sw_trigger_type *tt);
 static inline
 void iio_swt_group_init_type_name(struct iio_sw_trigger *t,
 				  const char *name,
-				  struct config_item_type *type)
+				  const struct config_item_type *type)
 {
 #if IS_ENABLED(CONFIG_CONFIGFS_FS)
 	config_group_init_type_name(&t->group, name, type);

commit b2f0c09664b72b2f8c581383a9337ac3092e42c8
Author: Lars-Peter Clausen <lars@metafoo.de>
Date:   Mon Jul 11 13:50:01 2016 +0200

    iio: sw-trigger: Fix config group initialization
    
    Use the IS_ENABLED() helper macro to ensure that the configfs group is
    initialized either when configfs is built-in or when configfs is built as a
    module. Otherwise software trigger creation will result in undefined
    behaviour when configfs is built as a mdoule since the configfs group for
    the trigger is not properly initialized.
    
    Fixes: b662f809d410 ("iio: core: Introduce IIO software triggers")
    Signed-off-by: Lars-Peter Clausen <lars@metafoo.de>
    Acked-by: Daniel Baluta <daniel.baluta@intel.com>
    Cc: <Stable@vger.kernel.org>
    Signed-off-by: Jonathan Cameron <jic23@kernel.org>

diff --git a/include/linux/iio/sw_trigger.h b/include/linux/iio/sw_trigger.h
index 5198f8ed08a4..c97eab67558f 100644
--- a/include/linux/iio/sw_trigger.h
+++ b/include/linux/iio/sw_trigger.h
@@ -62,7 +62,7 @@ void iio_swt_group_init_type_name(struct iio_sw_trigger *t,
 				  const char *name,
 				  struct config_item_type *type)
 {
-#ifdef CONFIG_CONFIGFS_FS
+#if IS_ENABLED(CONFIG_CONFIGFS_FS)
 	config_group_init_type_name(&t->group, name, type);
 #endif
 }

commit 8d6c16dd7213fa43702416e3dd1059e9e36bc758
Author: Jonathan Cameron <jic23@kernel.org>
Date:   Sat Dec 5 16:23:26 2015 +0000

    iio:configfs: Introduce iio/configfs.h to provide a location for the configfs_subsystem
    
    This exported element needs to be accesible to all drivers using configfs
    within IIO.  Previously it was in the sw_trig.h file which only convered one
    such usecase.  This also fixes a sparse warning as it is now in a header
    that makes sense to include from industrialio-configfs.c
    
    Signed-off-by: Jonathan Cameron < jic23@kernel.org>

diff --git a/include/linux/iio/sw_trigger.h b/include/linux/iio/sw_trigger.h
index c2f33b2b35a5..5198f8ed08a4 100644
--- a/include/linux/iio/sw_trigger.h
+++ b/include/linux/iio/sw_trigger.h
@@ -20,7 +20,6 @@
 	module_driver(__iio_sw_trigger_type, iio_register_sw_trigger_type, \
 		      iio_unregister_sw_trigger_type)
 
-extern struct configfs_subsystem iio_configfs_subsys;
 struct iio_sw_trigger_ops;
 
 struct iio_sw_trigger_type {

commit b662f809d41009749a9ee6f9a4db3d9af579e171
Author: Daniel Baluta <daniel.baluta@intel.com>
Date:   Mon Nov 9 09:14:00 2015 +0200

    iio: core: Introduce IIO software triggers
    
    A software trigger associates an IIO device trigger with a software
    interrupt source (e.g: timer, sysfs). This patch adds the generic
    infrastructure for handling software triggers.
    
    Software interrupts sources are kept in a iio_trigger_types_list and
    registered separately when the associated kernel module is loaded.
    
    Software triggers can be created directly from drivers or from user
    space via configfs interface.
    
    To sum up, this dynamically creates "triggers" group to be found under
    /config/iio/triggers and offers the possibility of dynamically
    creating trigger types groups. The first supported trigger type is
    "hrtimer" found under /config/iio/triggers/hrtimer.
    
    Signed-off-by: Daniel Baluta <daniel.baluta@intel.com>
    Signed-off-by: Jonathan Cameron <jic23@kernel.org>

diff --git a/include/linux/iio/sw_trigger.h b/include/linux/iio/sw_trigger.h
new file mode 100644
index 000000000000..c2f33b2b35a5
--- /dev/null
+++ b/include/linux/iio/sw_trigger.h
@@ -0,0 +1,71 @@
+/*
+ * Industrial I/O software trigger interface
+ *
+ * Copyright (c) 2015 Intel Corporation
+ *
+ * This program is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 2 as published by
+ * the Free Software Foundation.
+ */
+
+#ifndef __IIO_SW_TRIGGER
+#define __IIO_SW_TRIGGER
+
+#include <linux/module.h>
+#include <linux/device.h>
+#include <linux/iio/iio.h>
+#include <linux/configfs.h>
+
+#define module_iio_sw_trigger_driver(__iio_sw_trigger_type) \
+	module_driver(__iio_sw_trigger_type, iio_register_sw_trigger_type, \
+		      iio_unregister_sw_trigger_type)
+
+extern struct configfs_subsystem iio_configfs_subsys;
+struct iio_sw_trigger_ops;
+
+struct iio_sw_trigger_type {
+	const char *name;
+	struct module *owner;
+	const struct iio_sw_trigger_ops *ops;
+	struct list_head list;
+	struct config_group *group;
+};
+
+struct iio_sw_trigger {
+	struct iio_trigger *trigger;
+	struct iio_sw_trigger_type *trigger_type;
+	struct config_group group;
+};
+
+struct iio_sw_trigger_ops {
+	struct iio_sw_trigger* (*probe)(const char *);
+	int (*remove)(struct iio_sw_trigger *);
+};
+
+static inline
+struct iio_sw_trigger *to_iio_sw_trigger(struct config_item *item)
+{
+	return container_of(to_config_group(item), struct iio_sw_trigger,
+			    group);
+}
+
+int iio_register_sw_trigger_type(struct iio_sw_trigger_type *tt);
+void iio_unregister_sw_trigger_type(struct iio_sw_trigger_type *tt);
+
+struct iio_sw_trigger *iio_sw_trigger_create(const char *, const char *);
+void iio_sw_trigger_destroy(struct iio_sw_trigger *);
+
+int iio_sw_trigger_type_configfs_register(struct iio_sw_trigger_type *tt);
+void iio_sw_trigger_type_configfs_unregister(struct iio_sw_trigger_type *tt);
+
+static inline
+void iio_swt_group_init_type_name(struct iio_sw_trigger *t,
+				  const char *name,
+				  struct config_item_type *type)
+{
+#ifdef CONFIG_CONFIGFS_FS
+	config_group_init_type_name(&t->group, name, type);
+#endif
+}
+
+#endif /* __IIO_SW_TRIGGER */
