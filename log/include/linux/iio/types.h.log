commit ddfb97d8f06c98fa5d80bbb6a997155a838161e9
Author: Andrea Merello <andrea.merello@gmail.com>
Date:   Wed Nov 20 15:47:52 2019 +0100

    iio: core: add thermocouple_type standard attribute
    
    We have a couple of thermocouple IIO drivers, supporting several chips.
    Some of them support only one specific thermocouple type (e.g. "K", "J"),
    one of them can be configured to work with several different thermocouple
    types.
    
    In certain applications thermocouples could be externally connected to the
    chip by the user.
    
    This patch introduces a new IIO standard attribute to report the supported
    thermocouple type and, where applicable, to allow it to be dynamically set
    using sysfs.
    
    Cc: Hartmut Knaack <knaack.h@gmx.de>
    Cc: Lars-Peter Clausen <lars@metafoo.de>
    Cc: Peter Meerwald-Stadler <pmeerw@pmeerw.net>
    Cc: Colin Ian King <colin.king@canonical.com>
    Cc: Patrick Havelange <patrick.havelange@essensium.com>
    Cc: Matt Weber <matthew.weber@rockwellcollins.com>
    Cc: Matt Ranostay <matt.ranostay@konsulko.com>
    Cc: Chuhong Yuan <hslester96@gmail.com>
    Cc: Daniel Gomez <dagmcr@gmail.com>
    Cc: linux-iio@vger.kernel.org
    Signed-off-by: Andrea Merello <andrea.merello@gmail.com>
    Signed-off-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>

diff --git a/include/linux/iio/types.h b/include/linux/iio/types.h
index 8e0026da38c9..e6fd3645963c 100644
--- a/include/linux/iio/types.h
+++ b/include/linux/iio/types.h
@@ -58,6 +58,7 @@ enum iio_chan_info_enum {
 	IIO_CHAN_INFO_DEBOUNCE_TIME,
 	IIO_CHAN_INFO_CALIBEMISSIVITY,
 	IIO_CHAN_INFO_OVERSAMPLING_RATIO,
+	IIO_CHAN_INFO_THERMOCOUPLE_TYPE,
 };
 
 #endif /* _IIO_TYPES_H_ */

commit 8cb3403633146afe1ba81f79224679f5df2940d4
Author: Andrea Merello <andrea.merello@gmail.com>
Date:   Wed Nov 20 15:47:51 2019 +0100

    iio: core: add char type for sysfs attributes
    
    This patch introduces IIO_VAL_CHAR type for standard IIO attributes to
    allow for attributes that needs to be represented by character rather
    than a number. This is preparatory for introducing a new attribute whose
    purpose is to describe thermocouple type, that can be i.e. "J", "K", etc..
    
    The char-type value is stored in the first "value" integer that is passed
    to the .[read/write]_raw() callbacks.
    
    Note that in order to make it possible for the IIO core to correctly parse
    this type (actually, to avoid integer parsing), it became mandatory for
    any driver that wish to use IIO_VAL_CHAR on a writable attribute to
    implement .write_raw_get_fmt().
    
    Cc: Hartmut Knaack <knaack.h@gmx.de>
    Cc: Lars-Peter Clausen <lars@metafoo.de>
    Cc: Peter Meerwald-Stadler <pmeerw@pmeerw.net>
    Cc: Colin Ian King <colin.king@canonical.com>
    Cc: Patrick Havelange <patrick.havelange@essensium.com>
    Cc: Matt Weber <matthew.weber@rockwellcollins.com>
    Cc: Matt Ranostay <matt.ranostay@konsulko.com>
    Cc: Chuhong Yuan <hslester96@gmail.com>
    Cc: Daniel Gomez <dagmcr@gmail.com>
    Cc: linux-iio@vger.kernel.org
    Signed-off-by: Andrea Merello <andrea.merello@gmail.com>
    Signed-off-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>

diff --git a/include/linux/iio/types.h b/include/linux/iio/types.h
index fa824e160f35..8e0026da38c9 100644
--- a/include/linux/iio/types.h
+++ b/include/linux/iio/types.h
@@ -25,6 +25,7 @@ enum iio_event_info {
 #define IIO_VAL_INT_MULTIPLE 5
 #define IIO_VAL_FRACTIONAL 10
 #define IIO_VAL_FRACTIONAL_LOG2 11
+#define IIO_VAL_CHAR 12
 
 enum iio_available_type {
 	IIO_AVAIL_LIST,

commit d2912cb15bdda8ba4a5dd73396ad62641af2f520
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Tue Jun 4 10:11:33 2019 +0200

    treewide: Replace GPLv2 boilerplate/reference with SPDX - rule 500
    
    Based on 2 normalized pattern(s):
    
      this program is free software you can redistribute it and or modify
      it under the terms of the gnu general public license version 2 as
      published by the free software foundation
    
      this program is free software you can redistribute it and or modify
      it under the terms of the gnu general public license version 2 as
      published by the free software foundation #
    
    extracted by the scancode license scanner the SPDX license identifier
    
      GPL-2.0-only
    
    has been chosen to replace the boilerplate/reference in 4122 file(s).
    
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Reviewed-by: Enrico Weigelt <info@metux.net>
    Reviewed-by: Kate Stewart <kstewart@linuxfoundation.org>
    Reviewed-by: Allison Randal <allison@lohutok.net>
    Cc: linux-spdx@vger.kernel.org
    Link: https://lkml.kernel.org/r/20190604081206.933168790@linutronix.de
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/include/linux/iio/types.h b/include/linux/iio/types.h
index 6eb3d683ef62..fa824e160f35 100644
--- a/include/linux/iio/types.h
+++ b/include/linux/iio/types.h
@@ -1,10 +1,7 @@
+/* SPDX-License-Identifier: GPL-2.0-only */
 /* industrial I/O data types needed both in and out of kernel
  *
  * Copyright (c) 2008 Jonathan Cameron
- *
- * This program is free software; you can redistribute it and/or modify it
- * under the terms of the GNU General Public License version 2 as published by
- * the Free Software Foundation.
  */
 
 #ifndef _IIO_TYPES_H_

commit 34739a213dbb85c8d775de42d52358255059c257
Author: Arnaud Pouliquen <arnaud.pouliquen@st.com>
Date:   Wed Jan 10 11:13:06 2018 +0100

    IIO: inkern: API for manipulating channel attributes
    
    Extend the inkern API with functions for reading and writing
    attribute of iio channels.
    
    Signed-off-by: Arnaud Pouliquen <arnaud.pouliquen@st.com>
    Reviewed-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Signed-off-by: Mark Brown <broonie@kernel.org>

diff --git a/include/linux/iio/types.h b/include/linux/iio/types.h
index 2aa7b6384d64..6eb3d683ef62 100644
--- a/include/linux/iio/types.h
+++ b/include/linux/iio/types.h
@@ -34,4 +34,32 @@ enum iio_available_type {
 	IIO_AVAIL_RANGE,
 };
 
+enum iio_chan_info_enum {
+	IIO_CHAN_INFO_RAW = 0,
+	IIO_CHAN_INFO_PROCESSED,
+	IIO_CHAN_INFO_SCALE,
+	IIO_CHAN_INFO_OFFSET,
+	IIO_CHAN_INFO_CALIBSCALE,
+	IIO_CHAN_INFO_CALIBBIAS,
+	IIO_CHAN_INFO_PEAK,
+	IIO_CHAN_INFO_PEAK_SCALE,
+	IIO_CHAN_INFO_QUADRATURE_CORRECTION_RAW,
+	IIO_CHAN_INFO_AVERAGE_RAW,
+	IIO_CHAN_INFO_LOW_PASS_FILTER_3DB_FREQUENCY,
+	IIO_CHAN_INFO_HIGH_PASS_FILTER_3DB_FREQUENCY,
+	IIO_CHAN_INFO_SAMP_FREQ,
+	IIO_CHAN_INFO_FREQUENCY,
+	IIO_CHAN_INFO_PHASE,
+	IIO_CHAN_INFO_HARDWAREGAIN,
+	IIO_CHAN_INFO_HYSTERESIS,
+	IIO_CHAN_INFO_INT_TIME,
+	IIO_CHAN_INFO_ENABLE,
+	IIO_CHAN_INFO_CALIBHEIGHT,
+	IIO_CHAN_INFO_CALIBWEIGHT,
+	IIO_CHAN_INFO_DEBOUNCE_COUNT,
+	IIO_CHAN_INFO_DEBOUNCE_TIME,
+	IIO_CHAN_INFO_CALIBEMISSIVITY,
+	IIO_CHAN_INFO_OVERSAMPLING_RATIO,
+};
+
 #endif /* _IIO_TYPES_H_ */

commit 51239600074bc9979b0a0e83b72c726d7dcc3132
Author: Jonathan Cameron <jic23@kernel.org>
Date:   Tue Nov 8 12:58:51 2016 +0100

    iio:core: add a callback to allow drivers to provide _available attributes
    
    A large number of attributes can only take a limited range of values.
    Currently in IIO this is handled by directly registering additional
    *_available attributes thus providing this information to userspace.
    
    It is desirable to provide this information via the core for much the same
    reason this was done for the actual channel information attributes in the
    first place.  If it isn't there, then it can only really be accessed from
    userspace.  Other in kernel IIO consumers have no access to what valid
    parameters are.
    
    Two forms are currently supported:
    * list of values in one particular IIO_VAL_* format.
            e.g. 1.300000 1.500000 1.730000
    * range specification with a step size:
            e.g. [1.000000 0.500000 2.500000]
            equivalent to 1.000000 1.5000000 2.000000 2.500000
    
    An addition set of masks are used to allow different sharing rules for the
    *_available attributes generated.
    
    This allows for example:
    
    in_accel_x_offset
    in_accel_y_offset
    in_accel_offset_available.
    
    We could have gone with having a specification for each and every
    info_mask element but that would have meant changing the existing userspace
    ABI.  This approach does not.
    
    Signed-off-by: Jonathan Cameron <jic23@kernel.org>
    [forward ported, added some docs and fixed buffer overflows /peda]
    Acked-by: Daniel Baluta <daniel.baluta@intel.com>
    Signed-off-by: Peter Rosin <peda@axentia.se>
    Signed-off-by: Jonathan Cameron <jic23@kernel.org>

diff --git a/include/linux/iio/types.h b/include/linux/iio/types.h
index 32b579525004..2aa7b6384d64 100644
--- a/include/linux/iio/types.h
+++ b/include/linux/iio/types.h
@@ -29,4 +29,9 @@ enum iio_event_info {
 #define IIO_VAL_FRACTIONAL 10
 #define IIO_VAL_FRACTIONAL_LOG2 11
 
+enum iio_available_type {
+	IIO_AVAIL_LIST,
+	IIO_AVAIL_RANGE,
+};
+
 #endif /* _IIO_TYPES_H_ */

commit 3f7f642b9bc46453e1435e8b67f1c4f7949be7ff
Author: Martin Fuzzey <mfuzzey@parkeon.com>
Date:   Wed May 13 12:26:42 2015 +0200

    iio: core: add high pass filter attributes
    
    Add a high pass filter attribute for measurements
    (like the existing low pass)
    
    Also add both high and low pass attributes for events.
    
    Signed-off-by: Martin Fuzzey <mfuzzey@parkeon.com>
    Signed-off-by: Jonathan Cameron <jic23@kernel.org>

diff --git a/include/linux/iio/types.h b/include/linux/iio/types.h
index 942b6de68e2f..32b579525004 100644
--- a/include/linux/iio/types.h
+++ b/include/linux/iio/types.h
@@ -17,6 +17,8 @@ enum iio_event_info {
 	IIO_EV_INFO_VALUE,
 	IIO_EV_INFO_HYSTERESIS,
 	IIO_EV_INFO_PERIOD,
+	IIO_EV_INFO_HIGH_PASS_FILTER_3DB,
+	IIO_EV_INFO_LOW_PASS_FILTER_3DB,
 };
 
 #define IIO_VAL_INT 1

commit 293487c8ecc1103f4625cea5e90e1ba0cc89660f
Author: Daniel Baluta <daniel.baluta@intel.com>
Date:   Tue Feb 10 18:33:51 2015 +0200

    iio: Export userspace IIO headers
    
    After UAPI header file split [1] all user-kernel interfaces were
    placed under include/uapi/.
    
    This patch moves IIO user specific API from:
            * include/linux/iio/events.h => include/uapi/linux/iio/events.h
            * include/linux/types.h => include/uapi/linux/types.h
    
    Now there is no need for nasty tricks to compile userspace programs
    (e.g iio_event_monitor). Just installing the kernel headers with
    make headers_install command does the job.
    
    [1] http://lwn.net/Articles/507794/
    
    Signed-off-by: Daniel Baluta <daniel.baluta@intel.com>
    Signed-off-by: Jonathan Cameron <jic23@kernel.org>

diff --git a/include/linux/iio/types.h b/include/linux/iio/types.h
index 580ed5bdb3fa..942b6de68e2f 100644
--- a/include/linux/iio/types.h
+++ b/include/linux/iio/types.h
@@ -10,76 +10,7 @@
 #ifndef _IIO_TYPES_H_
 #define _IIO_TYPES_H_
 
-enum iio_chan_type {
-	IIO_VOLTAGE,
-	IIO_CURRENT,
-	IIO_POWER,
-	IIO_ACCEL,
-	IIO_ANGL_VEL,
-	IIO_MAGN,
-	IIO_LIGHT,
-	IIO_INTENSITY,
-	IIO_PROXIMITY,
-	IIO_TEMP,
-	IIO_INCLI,
-	IIO_ROT,
-	IIO_ANGL,
-	IIO_TIMESTAMP,
-	IIO_CAPACITANCE,
-	IIO_ALTVOLTAGE,
-	IIO_CCT,
-	IIO_PRESSURE,
-	IIO_HUMIDITYRELATIVE,
-	IIO_ACTIVITY,
-	IIO_STEPS,
-	IIO_ENERGY,
-	IIO_DISTANCE,
-	IIO_VELOCITY,
-};
-
-enum iio_modifier {
-	IIO_NO_MOD,
-	IIO_MOD_X,
-	IIO_MOD_Y,
-	IIO_MOD_Z,
-	IIO_MOD_X_AND_Y,
-	IIO_MOD_X_AND_Z,
-	IIO_MOD_Y_AND_Z,
-	IIO_MOD_X_AND_Y_AND_Z,
-	IIO_MOD_X_OR_Y,
-	IIO_MOD_X_OR_Z,
-	IIO_MOD_Y_OR_Z,
-	IIO_MOD_X_OR_Y_OR_Z,
-	IIO_MOD_LIGHT_BOTH,
-	IIO_MOD_LIGHT_IR,
-	IIO_MOD_ROOT_SUM_SQUARED_X_Y,
-	IIO_MOD_SUM_SQUARED_X_Y_Z,
-	IIO_MOD_LIGHT_CLEAR,
-	IIO_MOD_LIGHT_RED,
-	IIO_MOD_LIGHT_GREEN,
-	IIO_MOD_LIGHT_BLUE,
-	IIO_MOD_QUATERNION,
-	IIO_MOD_TEMP_AMBIENT,
-	IIO_MOD_TEMP_OBJECT,
-	IIO_MOD_NORTH_MAGN,
-	IIO_MOD_NORTH_TRUE,
-	IIO_MOD_NORTH_MAGN_TILT_COMP,
-	IIO_MOD_NORTH_TRUE_TILT_COMP,
-	IIO_MOD_RUNNING,
-	IIO_MOD_JOGGING,
-	IIO_MOD_WALKING,
-	IIO_MOD_STILL,
-	IIO_MOD_ROOT_SUM_SQUARED_X_Y_Z,
-};
-
-enum iio_event_type {
-	IIO_EV_TYPE_THRESH,
-	IIO_EV_TYPE_MAG,
-	IIO_EV_TYPE_ROC,
-	IIO_EV_TYPE_THRESH_ADAPTIVE,
-	IIO_EV_TYPE_MAG_ADAPTIVE,
-	IIO_EV_TYPE_CHANGE,
-};
+#include <uapi/linux/iio/types.h>
 
 enum iio_event_info {
 	IIO_EV_INFO_ENABLE,
@@ -88,13 +19,6 @@ enum iio_event_info {
 	IIO_EV_INFO_PERIOD,
 };
 
-enum iio_event_direction {
-	IIO_EV_DIR_EITHER,
-	IIO_EV_DIR_RISING,
-	IIO_EV_DIR_FALLING,
-	IIO_EV_DIR_NONE,
-};
-
 #define IIO_VAL_INT 1
 #define IIO_VAL_INT_PLUS_MICRO 2
 #define IIO_VAL_INT_PLUS_NANO 3

commit 17a2cbc27981b85a09a48425c2614ae0cb7be8cd
Author: Irina Tirdea <irina.tirdea@intel.com>
Date:   Sun Jan 11 21:10:12 2015 +0200

    iio: core: Remove IIO_EV_TYPE_INSTANCE
    
    By introducing IIO_EV_TYPE_CHANGE, IIO_EV_TYPE_INSTANCE becomes redundant.
    The effect of IIO_EV_TYPE_INSTANCE can be obtained by using IIO_EV_TYPE_CHANGE
    with IIO_EV_INFO_VALUE set to 1.
    
    Remove all instances of IIO_EV_TYPE_INSTANCE and replace them with
    IIO_EV_TYPE_CHANGE where needed.
    
    Signed-off-by: Irina Tirdea <irina.tirdea@intel.com>
    Signed-off-by: Jonathan Cameron <jic23@kernel.org>

diff --git a/include/linux/iio/types.h b/include/linux/iio/types.h
index 3ba3d6678412..580ed5bdb3fa 100644
--- a/include/linux/iio/types.h
+++ b/include/linux/iio/types.h
@@ -78,7 +78,6 @@ enum iio_event_type {
 	IIO_EV_TYPE_ROC,
 	IIO_EV_TYPE_THRESH_ADAPTIVE,
 	IIO_EV_TYPE_MAG_ADAPTIVE,
-	IIO_EV_TYPE_INSTANCE,
 	IIO_EV_TYPE_CHANGE,
 };
 

commit 27be84236d75c13a83c45d850390f40b58401d97
Author: Irina Tirdea <irina.tirdea@intel.com>
Date:   Sun Jan 11 21:10:11 2015 +0200

    iio: core: Introduce CHANGE event type
    
    A step detector will generate an interrupt each time N step are detected.
    A device that has such pedometer functionality is Freescale's MMA9553L:
    http://www.freescale.com/files/sensors/doc/ref_manual/MMA9553LSWRM.pdf.
    
    Introduce IIO_EV_TYPE_CHANGE event type for events that are generated
    when the channel passes a threshold on the absolute change in value.
    
    Signed-off-by: Irina Tirdea <irina.tirdea@intel.com>
    Signed-off-by: Jonathan Cameron <jic23@kernel.org>

diff --git a/include/linux/iio/types.h b/include/linux/iio/types.h
index c3601c2c0a9d..3ba3d6678412 100644
--- a/include/linux/iio/types.h
+++ b/include/linux/iio/types.h
@@ -79,6 +79,7 @@ enum iio_event_type {
 	IIO_EV_TYPE_THRESH_ADAPTIVE,
 	IIO_EV_TYPE_MAG_ADAPTIVE,
 	IIO_EV_TYPE_INSTANCE,
+	IIO_EV_TYPE_CHANGE,
 };
 
 enum iio_event_info {

commit 5a1a932981415661827f7edd9e99943a2a3b7b67
Author: Irina Tirdea <irina.tirdea@intel.com>
Date:   Sun Jan 11 21:10:09 2015 +0200

    iio: core: Introduce IIO_VELOCITY and IIO_MOD_ROOT_SUM_SQUARED_X_Y_Z
    
    Some devices export the current speed value of the user.
    
    One of this devices is Freescale's MMA9553L
    (http://www.freescale.com/files/sensors/doc/ref_manual/MMA9553LSWRM.pdf)
    that computes the speed of the user based on the number of steps and
    stride length.
    
    Introduce a new channel type VELOCITY and a modifier for the magniture or
    norm of the velocity vector, IIO_MOD_ROOT_SUM_SQUARED_X_Y_Z.
    
    Signed-off-by: Irina Tirdea <irina.tirdea@intel.com>
    Signed-off-by: Jonathan Cameron <jic23@kernel.org>

diff --git a/include/linux/iio/types.h b/include/linux/iio/types.h
index a7de445222f4..c3601c2c0a9d 100644
--- a/include/linux/iio/types.h
+++ b/include/linux/iio/types.h
@@ -34,6 +34,7 @@ enum iio_chan_type {
 	IIO_STEPS,
 	IIO_ENERGY,
 	IIO_DISTANCE,
+	IIO_VELOCITY,
 };
 
 enum iio_modifier {
@@ -68,6 +69,7 @@ enum iio_modifier {
 	IIO_MOD_JOGGING,
 	IIO_MOD_WALKING,
 	IIO_MOD_STILL,
+	IIO_MOD_ROOT_SUM_SQUARED_X_Y_Z,
 };
 
 enum iio_event_type {

commit cc3c9eecaed65b26ee0661e9e9491fd8d48e3907
Author: Irina Tirdea <irina.tirdea@intel.com>
Date:   Sun Jan 11 21:10:08 2015 +0200

    iio: core: Introduce DISTANCE channel type
    
    Some devices export an estimation of the distance the user has covered
    since the last reset.
    
    One of this devices is Freescale's MMA9553L
    (http://www.freescale.com/files/sensors/doc/ref_manual/MMA9553LSWRM.pdf)
    that computes the distance based on the stride length and step rate.
    
    Introduce a new channel type DISTANCE to export these values.
    
    Signed-off-by: Irina Tirdea <irina.tirdea@intel.com>
    Signed-off-by: Jonathan Cameron <jic23@kernel.org>

diff --git a/include/linux/iio/types.h b/include/linux/iio/types.h
index 26b8a1c5e2af..a7de445222f4 100644
--- a/include/linux/iio/types.h
+++ b/include/linux/iio/types.h
@@ -33,6 +33,7 @@ enum iio_chan_type {
 	IIO_ACTIVITY,
 	IIO_STEPS,
 	IIO_ENERGY,
+	IIO_DISTANCE,
 };
 
 enum iio_modifier {

commit 72c66644673a61ad85d293de7a61e54b9bdc9682
Author: Irina Tirdea <irina.tirdea@intel.com>
Date:   Sun Jan 11 21:10:07 2015 +0200

    iio: core: Introduce ENERGY channel type
    
    Human activity sensors report the energy burnt by the user.
    One of this devices is Freescale's MMA9553L
    (http://www.freescale.com/files/sensors/doc/ref_manual/MMA9553LSWRM.pdf)
    that computes the number of calories based on weight and step rate.
    
    Introduce a new channel type ENERGY to export these values.
    
    Signed-off-by: Irina Tirdea <irina.tirdea@intel.com>
    Signed-off-by: Jonathan Cameron <jic23@kernel.org>

diff --git a/include/linux/iio/types.h b/include/linux/iio/types.h
index 904dcbbf0e6f..26b8a1c5e2af 100644
--- a/include/linux/iio/types.h
+++ b/include/linux/iio/types.h
@@ -32,6 +32,7 @@ enum iio_chan_type {
 	IIO_HUMIDITYRELATIVE,
 	IIO_ACTIVITY,
 	IIO_STEPS,
+	IIO_ENERGY,
 };
 
 enum iio_modifier {

commit a88bfe78583026eb9f21d4014ba481b22b66cee3
Author: Irina Tirdea <irina.tirdea@intel.com>
Date:   Mon Nov 10 14:45:32 2014 +0200

    iio: core: Introduce STEPS channel, ENABLE mask and INSTANCE event
    
    These changes are needed to support the functionality of a pedometer.
    A pedometer has two basic functionalities: step counter and step detector.
    
    The step counter needs to be enabled and then it will count the steps
    in its hardware register. Whenever the application needs to check
    the step count, it will read the step counter register. To support the
    step counter a new channel type STEPS is added. Since the pedometer needs
    to be enabled first so that the hardware can count and store the steps,
    we need a specific ENABLE channel info mask.
    
    The step detector will generate an interrupt each time a step is detected.
    To support this functionality we add a new event type INSTANCE.
    
    For more information on the Android requirements for step counter and step
    detector see:
    http://source.android.com/devices/sensors/composite_sensors.html#counter
    and http://source.android.com/devices/sensors/composite_sensors.html#detector.
    
    A device that has the pedometer functionality this interface needs to
    support is Freescale's MMA9553L:
    http://www.freescale.com/files/sensors/doc/ref_manual/MMA9553LSWRM.pdf
    
    Signed-off-by: Irina Tirdea <irina.tirdea@intel.com>
    Signed-off-by: Daniel Baluta <daniel.baluta@intel.com>
    Signed-off-by: Jonathan Cameron <jic23@kernel.org>

diff --git a/include/linux/iio/types.h b/include/linux/iio/types.h
index 52cb5329407b..904dcbbf0e6f 100644
--- a/include/linux/iio/types.h
+++ b/include/linux/iio/types.h
@@ -31,6 +31,7 @@ enum iio_chan_type {
 	IIO_PRESSURE,
 	IIO_HUMIDITYRELATIVE,
 	IIO_ACTIVITY,
+	IIO_STEPS,
 };
 
 enum iio_modifier {
@@ -73,6 +74,7 @@ enum iio_event_type {
 	IIO_EV_TYPE_ROC,
 	IIO_EV_TYPE_THRESH_ADAPTIVE,
 	IIO_EV_TYPE_MAG_ADAPTIVE,
+	IIO_EV_TYPE_INSTANCE,
 };
 
 enum iio_event_info {

commit 1843c2f3def16740eb6d129a9790c32dd21aa5ea
Author: Irina Tirdea <irina.tirdea@intel.com>
Date:   Mon Nov 10 14:45:31 2014 +0200

    iio: core: Introduce IIO_EV_DIR_NONE
    
    For some events (e.g.: step detector) a direction does not make sense.
    
    Add IIO_EV_DIR_NONE to be used with such events and generate sysfs event
    attributes that do not contain direction.
    
    Signed-off-by: Irina Tirdea <irina.tirdea@intel.com>
    Signed-off-by: Daniel Baluta <daniel.baluta@intel.com>
    Signed-off-by: Jonathan Cameron <jic23@kernel.org>

diff --git a/include/linux/iio/types.h b/include/linux/iio/types.h
index b3a241d53b54..52cb5329407b 100644
--- a/include/linux/iio/types.h
+++ b/include/linux/iio/types.h
@@ -86,6 +86,7 @@ enum iio_event_direction {
 	IIO_EV_DIR_EITHER,
 	IIO_EV_DIR_RISING,
 	IIO_EV_DIR_FALLING,
+	IIO_EV_DIR_NONE,
 };
 
 #define IIO_VAL_INT 1

commit 55aebeb926b6f93a540328e7ac770ef536b09b77
Author: Daniel Baluta <daniel.baluta@intel.com>
Date:   Mon Nov 10 14:45:30 2014 +0200

    iio: core: Introduce IIO_ACTIVITY channel
    
    This channel will be used for exposing information about
    activity composite sensors. Activities supported so far:
            * running
            * jogging
            * walking
            * still
    
    THRESHOLD event is used to signal a change in the activity
    state.
    
    We associate a confidence interval for each activity expressed
    as a percentage from 0 to 100.
      * 0, means the sensor IS NOT reporting that activity.
      * 100, means the sensor IS reporting that activity.
    
    Users of this interface have two possible means to gather
    information about the ongoing activities.
    
    1. Event based, via event file descriptor
      * sensor may report an event when ENTERING an activity or LEAVING
        an activity based on a threshold value.
      * drivers will wake up applications waiting data on the event fd
    
    2. Polling, by reading the sysfs associated attribute files:
      * /sys/bus/iio/devices/iio:device0/in_activity_running_input
    expressed as percentage confidence value from 0 to 100.
    
    This will offer an interface for Android significant motion
    composite sensor defined here:
    http://source.android.com/devices/sensors/composite_sensors.html
    
    Activities listed above are supported by Freescale's MMA9553 sensor:
    http://freescale.com/files/sensors/doc/ref_manual/MMA9553LSWRM.pdf
    
    Signed-off-by: Irina Tirdea <irina.tirdea@intel.com>
    Signed-off-by: Daniel Baluta <daniel.baluta@intel.com>
    Signed-off-by: Jonathan Cameron <jic23@kernel.org>

diff --git a/include/linux/iio/types.h b/include/linux/iio/types.h
index 4a2af8adf874..b3a241d53b54 100644
--- a/include/linux/iio/types.h
+++ b/include/linux/iio/types.h
@@ -30,6 +30,7 @@ enum iio_chan_type {
 	IIO_CCT,
 	IIO_PRESSURE,
 	IIO_HUMIDITYRELATIVE,
+	IIO_ACTIVITY,
 };
 
 enum iio_modifier {
@@ -59,7 +60,11 @@ enum iio_modifier {
 	IIO_MOD_NORTH_MAGN,
 	IIO_MOD_NORTH_TRUE,
 	IIO_MOD_NORTH_MAGN_TILT_COMP,
-	IIO_MOD_NORTH_TRUE_TILT_COMP
+	IIO_MOD_NORTH_TRUE_TILT_COMP,
+	IIO_MOD_RUNNING,
+	IIO_MOD_JOGGING,
+	IIO_MOD_WALKING,
+	IIO_MOD_STILL,
 };
 
 enum iio_event_type {

commit 11b8ddab817eb8070a542d33caeb93cccfa4e383
Author: Reyad Attiyat <reyad.attiyat@gmail.com>
Date:   Thu Jul 17 19:18:00 2014 +0100

    iio: types: Added support for rotation from north usage attributes
    
    Added the rotation from north usage attributes to the iio modifier enum and to the iio modifier names array.
    
    Signed-off-by: Reyad Attiyat <reyad.attiyat@gmail.com>
    Acked-by: Srinivas Pandruvada <srinivas.pandruvada@linux.intel.com>
    Signed-off-by: Jonathan Cameron <jic23@kernel.org>

diff --git a/include/linux/iio/types.h b/include/linux/iio/types.h
index 4a848d6be3bf..4a2af8adf874 100644
--- a/include/linux/iio/types.h
+++ b/include/linux/iio/types.h
@@ -56,6 +56,10 @@ enum iio_modifier {
 	IIO_MOD_QUATERNION,
 	IIO_MOD_TEMP_AMBIENT,
 	IIO_MOD_TEMP_OBJECT,
+	IIO_MOD_NORTH_MAGN,
+	IIO_MOD_NORTH_TRUE,
+	IIO_MOD_NORTH_MAGN_TILT_COMP,
+	IIO_MOD_NORTH_TRUE_TILT_COMP
 };
 
 enum iio_event_type {

commit 77a533c73f032050be8b447828358a228a0a5736
Author: Srinivas Pandruvada <srinivas.pandruvada@linux.intel.com>
Date:   Thu Aug 7 23:29:00 2014 +0100

    iio: core : events ABI for specifying period
    
    The iio sysfs ABI defines a way to specify period for roc and thresholds.
    What:           /sys/.../events/in_accel_x_thresh_rising_period
    What:           /sys/.../events/in_accel_x_thresh_falling_period
    what:           /sys/.../events/in_accel_x_roc_rising_period
    What:           /sys/.../events/in_accel_x_roc_falling_period
    
    But there is no way to add period with the current event info enum.
    
    Added IIO_EV_INFO_PERIOD and corresponding string.
    
    Signed-off-by: Srinivas Pandruvada <srinivas.pandruvada@linux.intel.com>
    Signed-off-by: Jonathan Cameron <jic23@kernel.org>

diff --git a/include/linux/iio/types.h b/include/linux/iio/types.h
index d480631eabc2..4a848d6be3bf 100644
--- a/include/linux/iio/types.h
+++ b/include/linux/iio/types.h
@@ -70,6 +70,7 @@ enum iio_event_info {
 	IIO_EV_INFO_ENABLE,
 	IIO_EV_INFO_VALUE,
 	IIO_EV_INFO_HYSTERESIS,
+	IIO_EV_INFO_PERIOD,
 };
 
 enum iio_event_direction {

commit 638b43b347216bab1a989b036a92eb7d9d9ee421
Author: Peter Meerwald <pmeerw@pmeerw.net>
Date:   Wed Feb 5 16:57:00 2014 +0000

    iio: Add TEMP_AMBIENT and TEMP_OBJECT channel modifiers
    
    useful for contactless temperature sensors to distinguish
    between the ambient temperature and the temperature of the object
    
    Signed-off-by: Peter Meerwald <pmeerw@pmeerw.net>
    Signed-off-by: Jonathan Cameron <jic23@kernel.org>

diff --git a/include/linux/iio/types.h b/include/linux/iio/types.h
index 4fdab2e843b4..d480631eabc2 100644
--- a/include/linux/iio/types.h
+++ b/include/linux/iio/types.h
@@ -54,6 +54,8 @@ enum iio_modifier {
 	IIO_MOD_LIGHT_GREEN,
 	IIO_MOD_LIGHT_BLUE,
 	IIO_MOD_QUATERNION,
+	IIO_MOD_TEMP_AMBIENT,
+	IIO_MOD_TEMP_OBJECT,
 };
 
 enum iio_event_type {

commit 5082f405b74ad1b69aa9595555ce55b75b59b2ec
Author: Srinivas Pandruvada <srinivas.pandruvada@linux.intel.com>
Date:   Tue Apr 29 00:51:00 2014 +0100

    IIO: core: Add quaternion modifier
    
    Added quaternion in the list of supported modifiers.
    
    Signed-off-by: Srinivas Pandruvada <srinivas.pandruvada@linux.intel.com>
    Signed-off-by: Jonathan Cameron <jic23@kernel.org>

diff --git a/include/linux/iio/types.h b/include/linux/iio/types.h
index a13c2241abce..4fdab2e843b4 100644
--- a/include/linux/iio/types.h
+++ b/include/linux/iio/types.h
@@ -53,6 +53,7 @@ enum iio_modifier {
 	IIO_MOD_LIGHT_RED,
 	IIO_MOD_LIGHT_GREEN,
 	IIO_MOD_LIGHT_BLUE,
+	IIO_MOD_QUATERNION,
 };
 
 enum iio_event_type {

commit 9fbfb4b37ed23f71aa9484484266381c6c6964cb
Author: Srinivas Pandruvada <srinivas.pandruvada@linux.intel.com>
Date:   Tue Apr 29 00:51:00 2014 +0100

    IIO: core: Introduce read_raw_multi
    
    This callback is introduced to overcome some limitations of existing
    read_raw callback. The functionality of both existing read_raw and
    read_raw_multi is similar, both are used to request values from the
    device. The current read_raw callback allows only two return values.
    The new read_raw_multi allows returning multiple values. Instead of
    passing just address of val and val2, it passes length and pointer
    to values. Depending on the type and length of passed buffer, iio
    client drivers can return multiple values.
    
    Signed-off-by: Srinivas Pandruvada <srinivas.pandruvada@linux.intel.com>
    Signed-off-by: Jonathan Cameron <jic23@kernel.org>

diff --git a/include/linux/iio/types.h b/include/linux/iio/types.h
index 084d882fe01b..a13c2241abce 100644
--- a/include/linux/iio/types.h
+++ b/include/linux/iio/types.h
@@ -79,6 +79,7 @@ enum iio_event_direction {
 #define IIO_VAL_INT_PLUS_MICRO 2
 #define IIO_VAL_INT_PLUS_NANO 3
 #define IIO_VAL_INT_PLUS_MICRO_DB 4
+#define IIO_VAL_INT_MULTIPLE 5
 #define IIO_VAL_FRACTIONAL 10
 #define IIO_VAL_FRACTIONAL_LOG2 11
 

commit ac216aa290c48a5e9d7b9f2473abb977a175683a
Author: Harald Geyer <harald@ccbib.org>
Date:   Sun Dec 1 15:08:00 2013 +0000

    iio: Add support for humidity sensors
    
    There are already humidity sensors in the hwmon subsystem,
    so we use their unit (milli percent) here as well.
    
    Signed-off-by: Harald Geyer <harald@ccbib.org>
    Signed-off-by: Jonathan Cameron <jic23@kernel.org>

diff --git a/include/linux/iio/types.h b/include/linux/iio/types.h
index 4ac928ee31c5..084d882fe01b 100644
--- a/include/linux/iio/types.h
+++ b/include/linux/iio/types.h
@@ -29,6 +29,7 @@ enum iio_chan_type {
 	IIO_ALTVOLTAGE,
 	IIO_CCT,
 	IIO_PRESSURE,
+	IIO_HUMIDITYRELATIVE,
 };
 
 enum iio_modifier {

commit ec6670ae53c13d767bdb7b3e37755ad661395380
Author: Lars-Peter Clausen <lars@metafoo.de>
Date:   Mon Oct 7 15:11:00 2013 +0100

    iio: Add a hysteresis event info attribute
    
    For some devices it is possible to configure a hysteresis for threshold (or
    similar) events. This patch adds a new hysteresis event info type which allows
    for easy creation and read/write handling of the sysfs attribute.
    
    Signed-off-by: Lars-Peter Clausen <lars@metafoo.de>
    Signed-off-by: Jonathan Cameron <jic23@kernel.org>

diff --git a/include/linux/iio/types.h b/include/linux/iio/types.h
index 18339ef4ff5d..4ac928ee31c5 100644
--- a/include/linux/iio/types.h
+++ b/include/linux/iio/types.h
@@ -65,6 +65,7 @@ enum iio_event_type {
 enum iio_event_info {
 	IIO_EV_INFO_ENABLE,
 	IIO_EV_INFO_VALUE,
+	IIO_EV_INFO_HYSTERESIS,
 };
 
 enum iio_event_direction {

commit b4e3ac0a204ff1775c69924510f49922a56910a7
Author: Lars-Peter Clausen <lars@metafoo.de>
Date:   Mon Oct 7 15:11:00 2013 +0100

    iio: Extend the event config interface
    
    The event configuration interface of the IIO framework has not been getting the
    same attention as other parts. As a result it has not seen the same improvements
    as e.g. the channel interface has seen with the introduction of the channel spec
    struct. Currently all the event config callbacks take a u64 (the so called event
    code) to pass all the different information about for which event the callback
    is invoked. The callback function then has to extract the information it is
    interested in using some macros with rather long names. Most information encoded
    in the event code comes straight from the iio_chan_spec struct the event was
    registered for. Since we always have a handle to the channel spec when we call
    the event callbacks the first step is to add the channel spec as a parameter to
    the event callbacks. The two remaining things encoded in the event code are the
    type and direction of the event. Instead of passing them in one parameter, add
    one parameter for each of them and remove the eventcode from the event
    callbacks. The patch also adds a new iio_event_info parameter to the
    {read,write}_event_value callbacks. This makes it possible, similar to the
    iio_chan_info_enum for channels, to specify additional properties other than
    just the value for an event. Furthermore the new interface will allow to
    register shared events. This is e.g. useful if a device allows configuring a
    threshold event, but the threshold setting is the same for all channels.
    
    To implement this the patch adds a new iio_event_spec struct which is similar to
    the iio_chan_spec struct. It as two field to specify the type and the direction
    of the event. Furthermore it has a mask field for each one of the different
    iio_shared_by types. These mask fields holds which kind of attributes should be
    registered for the event. Creation of the attributes follows the same rules as
    the for the channel attributes. E.g. for the separate_mask there will be a
    attribute for each channel with this event, for the shared_by_type there will
    only be one attribute per channel type. The iio_chan_spec struct gets two new
    fields, 'event_spec' and 'num_event_specs', which is used to specify which the
    events for this channel. These two fields are going to replace the channel's
    event_mask field.
    
    For now both the old and the new event config interface coexist, but over the
    few patches all drivers will be converted from the old to the new interface.
    Once that is done all code for supporting the old interface will be removed.
    
    Signed-off-by: Lars-Peter Clausen <lars@metafoo.de>
    Signed-off-by: Jonathan Cameron <jic23@kernel.org>

diff --git a/include/linux/iio/types.h b/include/linux/iio/types.h
index 88bf0f0d27b4..18339ef4ff5d 100644
--- a/include/linux/iio/types.h
+++ b/include/linux/iio/types.h
@@ -54,6 +54,25 @@ enum iio_modifier {
 	IIO_MOD_LIGHT_BLUE,
 };
 
+enum iio_event_type {
+	IIO_EV_TYPE_THRESH,
+	IIO_EV_TYPE_MAG,
+	IIO_EV_TYPE_ROC,
+	IIO_EV_TYPE_THRESH_ADAPTIVE,
+	IIO_EV_TYPE_MAG_ADAPTIVE,
+};
+
+enum iio_event_info {
+	IIO_EV_INFO_ENABLE,
+	IIO_EV_INFO_VALUE,
+};
+
+enum iio_event_direction {
+	IIO_EV_DIR_EITHER,
+	IIO_EV_DIR_RISING,
+	IIO_EV_DIR_FALLING,
+};
+
 #define IIO_VAL_INT 1
 #define IIO_VAL_INT_PLUS_MICRO 2
 #define IIO_VAL_INT_PLUS_NANO 3

commit c4f0c6936762ecd6b453275611a785dfdee0d417
Author: Lars-Peter Clausen <lars@metafoo.de>
Date:   Tue Nov 20 13:36:00 2012 +0000

    iio: Add pressure channel type
    
    This patch adds support for a new IIO channel type for pressure measurements.
    This can for example be used for barometric pressure sensors.
    
    Signed-off-by: Lars-Peter Clausen <lars@metafoo.de>
    Signed-off-by: Jonathan Cameron <jic23@kernel.org>

diff --git a/include/linux/iio/types.h b/include/linux/iio/types.h
index 87b196a2d698..88bf0f0d27b4 100644
--- a/include/linux/iio/types.h
+++ b/include/linux/iio/types.h
@@ -28,6 +28,7 @@ enum iio_chan_type {
 	IIO_CAPACITANCE,
 	IIO_ALTVOLTAGE,
 	IIO_CCT,
+	IIO_PRESSURE,
 };
 
 enum iio_modifier {

commit 103d9fb907058e4eb052f4f7302d1b07eb6a7792
Author: Lars-Peter Clausen <lars@metafoo.de>
Date:   Tue Oct 16 17:29:00 2012 +0100

    iio: Add a logarithmic fractional value type
    
    For ADCs or DACs the denominator for fractional types often is a power of two.
    In this case we can use a shift operation instead of the rather expensive 64 bit
    division. This patch adds a new fractional type which expects the denominator to
    be specified as the log2 of the actual denominator. E.g. for ADCs and DACs this
    will usually be the number of significant bits.
    
    Signed-off-by: Lars-Peter Clausen <lars@metafoo.de>
    Signed-off-by: Jonathan Cameron <jic23@kernel.org>

diff --git a/include/linux/iio/types.h b/include/linux/iio/types.h
index 5c647ecfd5ba..87b196a2d698 100644
--- a/include/linux/iio/types.h
+++ b/include/linux/iio/types.h
@@ -58,5 +58,6 @@ enum iio_modifier {
 #define IIO_VAL_INT_PLUS_NANO 3
 #define IIO_VAL_INT_PLUS_MICRO_DB 4
 #define IIO_VAL_FRACTIONAL 10
+#define IIO_VAL_FRACTIONAL_LOG2 11
 
 #endif /* _IIO_TYPES_H_ */

commit 7985e7c1003bc5cdfa20755f8cfdada946ed8e18
Author: Lars-Peter Clausen <lars@metafoo.de>
Date:   Fri Sep 14 16:21:00 2012 +0100

    iio: Introduce a new fractional value type
    
    Currently IIO uses a decimal fixed point representations for real type numbers.
    This patch introduces a new representation for rational type numbers. The number
    will be expressed by specifying a numerator and denominator. For converting a
    raw value to a processed value multiply it by the numerator and divide it by the
    denominator.
    
    The reasoning for introducing this new type is that for a lot of devices the
    scale can be represented easily by a fractional number, but it is not possible
    to represent it as fixed point number without rounding.  E.g. for a simple DAC
    the scale is often the reference voltage divided by the number of possible
    values (Usually 2**n_bits - 1). Each driver currently implements the conversion
    of this fraction to a fixed point number on its own.
    
    Also when it comes to the in-kernel interface this allows to directly use the
    fractional factors to convert a raw value to a processed value. This should on
    one hand require less instructions and on the other hand increase the
    precision.
    
    Signed-off-by: Lars-Peter Clausen <lars@metafoo.de>
    Signed-off-by: Jonathan Cameron <jic23@kernel.org>

diff --git a/include/linux/iio/types.h b/include/linux/iio/types.h
index 44e397705d7f..5c647ecfd5ba 100644
--- a/include/linux/iio/types.h
+++ b/include/linux/iio/types.h
@@ -57,5 +57,6 @@ enum iio_modifier {
 #define IIO_VAL_INT_PLUS_MICRO 2
 #define IIO_VAL_INT_PLUS_NANO 3
 #define IIO_VAL_INT_PLUS_MICRO_DB 4
+#define IIO_VAL_FRACTIONAL 10
 
 #endif /* _IIO_TYPES_H_ */

commit 21cd1fab058671313f7c178b640999fcd0d8de21
Author: Jon Brenner <jbrenner@taosinc.com>
Date:   Wed May 16 10:46:42 2012 -0500

    IIO channel type and modifiers for CCT and RGBC data
    
    Add iio channel type and modifiers for Correlated Color Temperature (CCT)
    and RGBC (red/green/blue/clear) data.
    Add CCT and RGBC descriptions to documentation.
    
    Changes:
    Revised/condensed RGBC descriptions.
    
    Merge and trivial fix done by Jonathan Cameron.
    
    Signed-off-by: Jon Brenner <jbrenner@taosinc.com>
    Signed-off-by: Jonathan Cameron <jic23@kernel.org>

diff --git a/include/linux/iio/types.h b/include/linux/iio/types.h
index e25040173346..44e397705d7f 100644
--- a/include/linux/iio/types.h
+++ b/include/linux/iio/types.h
@@ -27,6 +27,7 @@ enum iio_chan_type {
 	IIO_TIMESTAMP,
 	IIO_CAPACITANCE,
 	IIO_ALTVOLTAGE,
+	IIO_CCT,
 };
 
 enum iio_modifier {
@@ -46,6 +47,10 @@ enum iio_modifier {
 	IIO_MOD_LIGHT_IR,
 	IIO_MOD_ROOT_SUM_SQUARED_X_Y,
 	IIO_MOD_SUM_SQUARED_X_Y_Z,
+	IIO_MOD_LIGHT_CLEAR,
+	IIO_MOD_LIGHT_RED,
+	IIO_MOD_LIGHT_GREEN,
+	IIO_MOD_LIGHT_BLUE,
 };
 
 #define IIO_VAL_INT 1

commit cf82cb8128496955a38fa62e1819ceb1d596e2eb
Author: Jonathan Cameron <jic23@kernel.org>
Date:   Sat May 5 10:56:41 2012 +0100

    IIO: Add a modifier for x^2+y^2+z^2
    
    There will probably be a number of such modifiers eventually but
    this one is used in the adis16240 accelerometer driver.
    
    Signed-off-by: Jonathan Cameron <jic23@kernel.org>

diff --git a/include/linux/iio/types.h b/include/linux/iio/types.h
index 210559ddf8a3..e25040173346 100644
--- a/include/linux/iio/types.h
+++ b/include/linux/iio/types.h
@@ -45,6 +45,7 @@ enum iio_modifier {
 	IIO_MOD_LIGHT_BOTH,
 	IIO_MOD_LIGHT_IR,
 	IIO_MOD_ROOT_SUM_SQUARED_X_Y,
+	IIO_MOD_SUM_SQUARED_X_Y_Z,
 };
 
 #define IIO_VAL_INT 1

commit 8f5879b20be7f918cdc4b3d831cfd8f3dc02c74c
Author: Jonathan Cameron <jic23@kernel.org>
Date:   Sat May 5 10:39:22 2012 +0100

    IIO: Add a modifier for sqrt(x^2+y^2)
    
    There will probably be a number of such modifiers eventually but
    this one is used in the adis16204 accelerometer driver.
    
    Signed-off-by: Jonathan Cameron <jic23@kernel.org>

diff --git a/include/linux/iio/types.h b/include/linux/iio/types.h
index d086736a9033..210559ddf8a3 100644
--- a/include/linux/iio/types.h
+++ b/include/linux/iio/types.h
@@ -44,6 +44,7 @@ enum iio_modifier {
 	IIO_MOD_X_OR_Y_OR_Z,
 	IIO_MOD_LIGHT_BOTH,
 	IIO_MOD_LIGHT_IR,
+	IIO_MOD_ROOT_SUM_SQUARED_X_Y,
 };
 
 #define IIO_VAL_INT 1

commit 988bb033d703c8b2e0e71c63f3f55616a0220ced
Author: Peter Meerwald <p.meerwald@bct-electronic.com>
Date:   Tue Jun 12 14:39:37 2012 +0200

    iio: drop comment about 'real' channels
    
    Signed-off-by: Peter Meerwald <pmeerw@pmeerw.net>
    Acked-by: Jonathan Cameron <jic23@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/include/linux/iio/types.h b/include/linux/iio/types.h
index 1b073b1cc7c2..d086736a9033 100644
--- a/include/linux/iio/types.h
+++ b/include/linux/iio/types.h
@@ -11,7 +11,6 @@
 #define _IIO_TYPES_H_
 
 enum iio_chan_type {
-	/* real channel types */
 	IIO_VOLTAGE,
 	IIO_CURRENT,
 	IIO_POWER,

commit 67eedba39ed1ac29908453647652c02fbbeeca1b
Author: Michael Hennerich <michael.hennerich@analog.com>
Date:   Fri May 11 11:36:52 2012 +0200

    iio: core: introduce dB scle: IIO_VAL_INT_PLUS_MICRO_DB
    
    Signed-off-by: Michael Hennerich <michael.hennerich@analog.com>
    Acked-by: Jonathan Cameron <jic23@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/include/linux/iio/types.h b/include/linux/iio/types.h
index a471fd5a4d95..1b073b1cc7c2 100644
--- a/include/linux/iio/types.h
+++ b/include/linux/iio/types.h
@@ -50,5 +50,6 @@ enum iio_modifier {
 #define IIO_VAL_INT 1
 #define IIO_VAL_INT_PLUS_MICRO 2
 #define IIO_VAL_INT_PLUS_NANO 3
+#define IIO_VAL_INT_PLUS_MICRO_DB 4
 
 #endif /* _IIO_TYPES_H_ */

commit a6b12855b58bff429f3961e2577b8bbbb48fe470
Author: Michael Hennerich <michael.hennerich@analog.com>
Date:   Fri Apr 27 10:58:34 2012 +0200

    iio: core: Introduce IIO_ALTVOLTAGE and appropriate channel info elements
    
    Signed-off-by: Michael Hennerich <michael.hennerich@analog.com>
    Acked-by: Jonathan Cameron <jic23@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/include/linux/iio/types.h b/include/linux/iio/types.h
index 0c3213666901..a471fd5a4d95 100644
--- a/include/linux/iio/types.h
+++ b/include/linux/iio/types.h
@@ -27,6 +27,7 @@ enum iio_chan_type {
 	IIO_ANGL,
 	IIO_TIMESTAMP,
 	IIO_CAPACITANCE,
+	IIO_ALTVOLTAGE,
 };
 
 enum iio_modifier {

commit 06458e277eac2b8761b0a04d3c808d57be281a2e
Author: Jonathan Cameron <jic23@kernel.org>
Date:   Wed Apr 25 15:54:58 2012 +0100

    IIO: Move core headers to include/linux/iio
    
    Step 1 in moving the IIO core out of staging.
    
    Signed-off-by: Jonathan Cameron <jic23@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/include/linux/iio/types.h b/include/linux/iio/types.h
new file mode 100644
index 000000000000..0c3213666901
--- /dev/null
+++ b/include/linux/iio/types.h
@@ -0,0 +1,53 @@
+/* industrial I/O data types needed both in and out of kernel
+ *
+ * Copyright (c) 2008 Jonathan Cameron
+ *
+ * This program is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 2 as published by
+ * the Free Software Foundation.
+ */
+
+#ifndef _IIO_TYPES_H_
+#define _IIO_TYPES_H_
+
+enum iio_chan_type {
+	/* real channel types */
+	IIO_VOLTAGE,
+	IIO_CURRENT,
+	IIO_POWER,
+	IIO_ACCEL,
+	IIO_ANGL_VEL,
+	IIO_MAGN,
+	IIO_LIGHT,
+	IIO_INTENSITY,
+	IIO_PROXIMITY,
+	IIO_TEMP,
+	IIO_INCLI,
+	IIO_ROT,
+	IIO_ANGL,
+	IIO_TIMESTAMP,
+	IIO_CAPACITANCE,
+};
+
+enum iio_modifier {
+	IIO_NO_MOD,
+	IIO_MOD_X,
+	IIO_MOD_Y,
+	IIO_MOD_Z,
+	IIO_MOD_X_AND_Y,
+	IIO_MOD_X_AND_Z,
+	IIO_MOD_Y_AND_Z,
+	IIO_MOD_X_AND_Y_AND_Z,
+	IIO_MOD_X_OR_Y,
+	IIO_MOD_X_OR_Z,
+	IIO_MOD_Y_OR_Z,
+	IIO_MOD_X_OR_Y_OR_Z,
+	IIO_MOD_LIGHT_BOTH,
+	IIO_MOD_LIGHT_IR,
+};
+
+#define IIO_VAL_INT 1
+#define IIO_VAL_INT_PLUS_MICRO 2
+#define IIO_VAL_INT_PLUS_NANO 3
+
+#endif /* _IIO_TYPES_H_ */
