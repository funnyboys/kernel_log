commit 7739376eb1ed68593805e5b4ed359123d0718549
Author: Johan Hovold <johan@kernel.org>
Date:   Thu Nov 9 18:07:23 2017 +0100

    USB: of: clean up device-node helper
    
    Clean up the USB device-node helper that is used to look up a device
    node given a parent hub device and a port number. Also pass in a struct
    usb_device as first argument to provide some type checking.
    
    Give the helper the more descriptive name usb_of_get_device_node(),
    which matches the new usb_of_get_interface_node() helper that is used to
    look up a second type of of child node from a USB device.
    
    Note that the terms "device node" and "interface node" are defined and
    used by the OF Recommended Practice for USB.
    
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/include/linux/usb/of.h b/include/linux/usb/of.h
index 0294ccac4f1d..dba55ccb9b53 100644
--- a/include/linux/usb/of.h
+++ b/include/linux/usb/of.h
@@ -19,8 +19,7 @@ enum usb_dr_mode of_usb_get_dr_mode_by_phy(struct device_node *np, int arg0);
 bool of_usb_host_tpl_support(struct device_node *np);
 int of_usb_update_otg_caps(struct device_node *np,
 			struct usb_otg_caps *otg_caps);
-struct device_node *usb_of_get_child_node(struct device_node *parent,
-			int portnum);
+struct device_node *usb_of_get_device_node(struct usb_device *hub, int port1);
 bool usb_of_has_combined_node(struct usb_device *udev);
 struct device_node *usb_of_get_interface_node(struct usb_device *udev,
 		u8 config, u8 ifnum);
@@ -40,8 +39,8 @@ static inline int of_usb_update_otg_caps(struct device_node *np,
 {
 	return 0;
 }
-static inline struct device_node *usb_of_get_child_node
-		(struct device_node *parent, int portnum)
+static inline struct device_node *
+usb_of_get_device_node(struct usb_device *hub, int port1)
 {
 	return NULL;
 }

commit 1a7e3948cb9f5bb9241112706267b8fbc7812c7a
Author: Johan Hovold <johan@kernel.org>
Date:   Thu Nov 9 18:07:21 2017 +0100

    USB: add device-tree support for interfaces
    
    Add OF device-tree support for USB interfaces.
    
    USB "interface nodes" are children of USB "device nodes" and are
    identified by an interface number and a configuration value:
    
            &usb1 { /* host controller */
                    dev1: device@1 { /* device at port 1 */
                            compatible = "usb1234,5678";
                            reg = <1>;
    
                            #address-cells = <2>;
                            #size-cells = <0>;
    
                            interface@0,2 { /* interface 0 of configuration 2 */
                                    compatible = "usbif1234,5678.config2.0";
                                    reg = <0 2>;
                            };
                    };
            };
    
    The configuration component is not included in the textual
    representation of an interface-node unit address for configuration 1:
    
            &dev1 {
                    interface@0 {   /* interface 0 of configuration 1 */
                            compatible = "usbif1234,5678.config1.0";
                            reg = <0 1>;
                    };
            };
    
    When a USB device of class 0 or 9 (hub) has only a single configuration
    with a single interface, a special case "combined node" is used instead
    of a device node with an interface node:
    
            &usb1 {
                    device@2 {
                            compatible = "usb1234,abcd";
                            reg = <2>;
                    };
            };
    
    Combined nodes are shared by the two device structures representing the
    USB device and its interface in the kernel's device model.
    
    Note that, as for device nodes, the compatible strings for interface
    nodes are currently not used.
    
    For more details see "Open Firmware Recommended Practice: Universal
    Serial Bus Version 1" and the binding documentation.
    
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/include/linux/usb/of.h b/include/linux/usb/of.h
index 6cbe7a5c2b57..0294ccac4f1d 100644
--- a/include/linux/usb/of.h
+++ b/include/linux/usb/of.h
@@ -12,6 +12,8 @@
 #include <linux/usb/otg.h>
 #include <linux/usb/phy.h>
 
+struct usb_device;
+
 #if IS_ENABLED(CONFIG_OF)
 enum usb_dr_mode of_usb_get_dr_mode_by_phy(struct device_node *np, int arg0);
 bool of_usb_host_tpl_support(struct device_node *np);
@@ -19,6 +21,9 @@ int of_usb_update_otg_caps(struct device_node *np,
 			struct usb_otg_caps *otg_caps);
 struct device_node *usb_of_get_child_node(struct device_node *parent,
 			int portnum);
+bool usb_of_has_combined_node(struct usb_device *udev);
+struct device_node *usb_of_get_interface_node(struct usb_device *udev,
+		u8 config, u8 ifnum);
 struct device *usb_of_get_companion_dev(struct device *dev);
 #else
 static inline enum usb_dr_mode
@@ -40,6 +45,15 @@ static inline struct device_node *usb_of_get_child_node
 {
 	return NULL;
 }
+static inline bool usb_of_has_combined_node(struct usb_device *udev)
+{
+	return false;
+}
+static inline struct device_node *
+usb_of_get_interface_node(struct usb_device *udev, u8 config, u8 ifnum)
+{
+	return NULL;
+}
 static inline struct device *usb_of_get_companion_dev(struct device *dev)
 {
 	return NULL;

commit 5fd54ace4721fc5ce2bb5aef6318fcf17f421460
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Fri Nov 3 11:28:30 2017 +0100

    USB: add SPDX identifiers to all remaining files in drivers/usb/
    
    It's good to have SPDX identifiers in all files to make it easier to
    audit the kernel tree for correct licenses.
    
    Update the drivers/usb/ and include/linux/usb* files with the correct
    SPDX license identifier based on the license text in the file itself.
    The SPDX identifier is a legally binding shorthand, which can be used
    instead of the full boiler plate text.
    
    This work is based on a script and data from Thomas Gleixner, Philippe
    Ombredanne, and Kate Stewart.
    
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: Kate Stewart <kstewart@linuxfoundation.org>
    Cc: Philippe Ombredanne <pombredanne@nexb.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Acked-by: Felipe Balbi <felipe.balbi@linux.intel.com>
    Acked-by: Johan Hovold <johan@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/include/linux/usb/of.h b/include/linux/usb/of.h
index 4031f47629ec..6cbe7a5c2b57 100644
--- a/include/linux/usb/of.h
+++ b/include/linux/usb/of.h
@@ -1,3 +1,4 @@
+// SPDX-License-Identifier: GPL-2.0
 /*
  * OF helpers for usb devices.
  *

commit 5095cb89c62acc78b4cfaeb9a4072979d010510a
Author: Yoshihiro Shimoda <yoshihiro.shimoda.uh@renesas.com>
Date:   Tue Feb 21 19:59:47 2017 +0900

    usb: of: add functions to bind a companion controller
    
    EHCI controllers will have a companion controller. However, on platform
    bus, there was difficult to bind them in previous code. So, this
    patch adds helper functions to bind them using a "companion" property.
    
    Signed-off-by: Yoshihiro Shimoda <yoshihiro.shimoda.uh@renesas.com>
    Acked-by: Rob Herring <robh@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/include/linux/usb/of.h b/include/linux/usb/of.h
index 5ff9032ee1b4..4031f47629ec 100644
--- a/include/linux/usb/of.h
+++ b/include/linux/usb/of.h
@@ -18,6 +18,7 @@ int of_usb_update_otg_caps(struct device_node *np,
 			struct usb_otg_caps *otg_caps);
 struct device_node *usb_of_get_child_node(struct device_node *parent,
 			int portnum);
+struct device *usb_of_get_companion_dev(struct device *dev);
 #else
 static inline enum usb_dr_mode
 of_usb_get_dr_mode_by_phy(struct device_node *np, int arg0)
@@ -38,6 +39,10 @@ static inline struct device_node *usb_of_get_child_node
 {
 	return NULL;
 }
+static inline struct device *usb_of_get_companion_dev(struct device *dev)
+{
+	return NULL;
+}
 #endif
 
 #if IS_ENABLED(CONFIG_OF) && IS_ENABLED(CONFIG_USB_SUPPORT)

commit ce15ed4c5dfb3f7757e6611902aed5db253af977
Author: Hans de Goede <hdegoede@redhat.com>
Date:   Fri Jun 10 11:46:25 2016 +0200

    USB: Fix of_usb_get_dr_mode_by_phy with a shared phy block
    
    Some SoCs have a single phy-hw-block with multiple phys, this is
    modelled by a single phy dts node, so we end up with multiple
    controller nodes with a phys property pointing to the phy-node
    of the otg-phy.
    
    Only one of these controllers typically is an otg controller, yet we
    were checking the first controller who uses a phy from the block and
    then end up looking for a dr_mode property in e.g. the ehci controller.
    
    This commit fixes this by adding an arg0 parameter to
    of_usb_get_dr_mode_by_phy and make of_usb_get_dr_mode_by_phy
    check that this matches the phandle args[0] value when looking for
    the otg controller.
    
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Signed-off-by: Felipe Balbi <felipe.balbi@linux.intel.com>

diff --git a/include/linux/usb/of.h b/include/linux/usb/of.h
index de3237fce6b2..5ff9032ee1b4 100644
--- a/include/linux/usb/of.h
+++ b/include/linux/usb/of.h
@@ -12,7 +12,7 @@
 #include <linux/usb/phy.h>
 
 #if IS_ENABLED(CONFIG_OF)
-enum usb_dr_mode of_usb_get_dr_mode_by_phy(struct device_node *phy_np);
+enum usb_dr_mode of_usb_get_dr_mode_by_phy(struct device_node *np, int arg0);
 bool of_usb_host_tpl_support(struct device_node *np);
 int of_usb_update_otg_caps(struct device_node *np,
 			struct usb_otg_caps *otg_caps);
@@ -20,7 +20,7 @@ struct device_node *usb_of_get_child_node(struct device_node *parent,
 			int portnum);
 #else
 static inline enum usb_dr_mode
-of_usb_get_dr_mode_by_phy(struct device_node *phy_np)
+of_usb_get_dr_mode_by_phy(struct device_node *np, int arg0)
 {
 	return USB_DR_MODE_UNKNOWN;
 }

commit 69bec725985324e79b1c47ea287815ac4ddb0521
Author: Peter Chen <peter.chen@freescale.com>
Date:   Fri Feb 19 17:26:15 2016 +0800

    USB: core: let USB device know device node
    
    Although most of USB devices are hot-plug's, there are still some devices
    are hard wired on the board, eg, for HSIC and SSIC interface USB devices.
    If these kinds of USB devices are multiple functions, and they can supply
    other interfaces like i2c, gpios for other devices, we may need to
    describe these at device tree.
    
    In this commit, it uses "reg" in dts as physical port number to match
    the phyiscal port number decided by USB core, if they are the same,
    then the device node is for the device we are creating for USB core.
    
    Signed-off-by: Peter Chen <peter.chen@freescale.com>
    Acked-by: Philipp Zabel <p.zabel@pengutronix.de>
    Acked-by: Alan Stern <stern@rowland.harvard.edu>
    Acked-by: Rob Herring <robh@kernel.org>
    Acked-by: Arnd Bergmann <arnd@arndb.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/include/linux/usb/of.h b/include/linux/usb/of.h
index 974bce93aa28..de3237fce6b2 100644
--- a/include/linux/usb/of.h
+++ b/include/linux/usb/of.h
@@ -16,6 +16,8 @@ enum usb_dr_mode of_usb_get_dr_mode_by_phy(struct device_node *phy_np);
 bool of_usb_host_tpl_support(struct device_node *np);
 int of_usb_update_otg_caps(struct device_node *np,
 			struct usb_otg_caps *otg_caps);
+struct device_node *usb_of_get_child_node(struct device_node *parent,
+			int portnum);
 #else
 static inline enum usb_dr_mode
 of_usb_get_dr_mode_by_phy(struct device_node *phy_np)
@@ -31,6 +33,11 @@ static inline int of_usb_update_otg_caps(struct device_node *np,
 {
 	return 0;
 }
+static inline struct device_node *usb_of_get_child_node
+		(struct device_node *parent, int portnum)
+{
+	return NULL;
+}
 #endif
 
 #if IS_ENABLED(CONFIG_OF) && IS_ENABLED(CONFIG_USB_SUPPORT)

commit be99c84300950e876074916b215b511f69f83d3b
Author: Felipe Balbi <balbi@ti.com>
Date:   Thu Dec 17 09:55:41 2015 -0600

    usb: of: fix build breakage on !OF
    
    If OF is disabled, we will try to define a stub for
    of_usb_get_dr_mode_by_phy(), however that missed a
    static inline annotation which made us redefine the
    stub over and over again. Fix that.
    
    Fixes: 98bfb3946695 ("usb: of: add an api to get
            dr_mode by the phy node")
    Signed-off-by: Felipe Balbi <balbi@ti.com>

diff --git a/include/linux/usb/of.h b/include/linux/usb/of.h
index 3805757dcdc2..974bce93aa28 100644
--- a/include/linux/usb/of.h
+++ b/include/linux/usb/of.h
@@ -17,7 +17,8 @@ bool of_usb_host_tpl_support(struct device_node *np);
 int of_usb_update_otg_caps(struct device_node *np,
 			struct usb_otg_caps *otg_caps);
 #else
-enum usb_dr_mode of_usb_get_dr_mode_by_phy(struct device_node *phy_np)
+static inline enum usb_dr_mode
+of_usb_get_dr_mode_by_phy(struct device_node *phy_np)
 {
 	return USB_DR_MODE_UNKNOWN;
 }

commit 98bfb39466954c69d2a448e6ddcab6d91cd48e25
Author: Bin Liu <b-liu@ti.com>
Date:   Tue Nov 3 11:51:15 2015 -0600

    usb: of: add an api to get dr_mode by the phy node
    
    Some USB phy drivers have different handling for the controller in each
    dr_mode. But the phy driver does not have visibility to the dr_mode of
    the controller.
    
    This adds an api to return the dr_mode of the controller which
    associates the given phy node.
    
    Signed-off-by: Bin Liu <b-liu@ti.com>
    Signed-off-by: Felipe Balbi <balbi@ti.com>

diff --git a/include/linux/usb/of.h b/include/linux/usb/of.h
index c3fe9e48ce27..3805757dcdc2 100644
--- a/include/linux/usb/of.h
+++ b/include/linux/usb/of.h
@@ -12,10 +12,15 @@
 #include <linux/usb/phy.h>
 
 #if IS_ENABLED(CONFIG_OF)
+enum usb_dr_mode of_usb_get_dr_mode_by_phy(struct device_node *phy_np);
 bool of_usb_host_tpl_support(struct device_node *np);
 int of_usb_update_otg_caps(struct device_node *np,
 			struct usb_otg_caps *otg_caps);
 #else
+enum usb_dr_mode of_usb_get_dr_mode_by_phy(struct device_node *phy_np)
+{
+	return USB_DR_MODE_UNKNOWN;
+}
 static inline bool of_usb_host_tpl_support(struct device_node *np)
 {
 	return false;

commit 06e7114f0d8297278eb24f4e9bee3393a94bd8ce
Author: Heikki Krogerus <heikki.krogerus@linux.intel.com>
Date:   Mon Sep 21 11:14:34 2015 +0300

    usb: common: of_usb_get_dr_mode to usb_get_dr_mode
    
    By using the unified device property interface, the function
    can be made available for all platforms and not just the
    ones using DT.
    
    Signed-off-by: Heikki Krogerus <heikki.krogerus@linux.intel.com>
    Signed-off-by: Felipe Balbi <balbi@ti.com>

diff --git a/include/linux/usb/of.h b/include/linux/usb/of.h
index ff23fea49fca..c3fe9e48ce27 100644
--- a/include/linux/usb/of.h
+++ b/include/linux/usb/of.h
@@ -12,16 +12,10 @@
 #include <linux/usb/phy.h>
 
 #if IS_ENABLED(CONFIG_OF)
-enum usb_dr_mode of_usb_get_dr_mode(struct device_node *np);
 bool of_usb_host_tpl_support(struct device_node *np);
 int of_usb_update_otg_caps(struct device_node *np,
 			struct usb_otg_caps *otg_caps);
 #else
-static inline enum usb_dr_mode of_usb_get_dr_mode(struct device_node *np)
-{
-	return USB_DR_MODE_UNKNOWN;
-}
-
 static inline bool of_usb_host_tpl_support(struct device_node *np)
 {
 	return false;

commit 63863b988eeca2823ce76b28b104e0b8366cafec
Author: Heikki Krogerus <heikki.krogerus@linux.intel.com>
Date:   Mon Sep 21 11:14:32 2015 +0300

    usb: common: of_usb_get_maximum_speed to usb_get_maximum_speed
    
    By using the unified device property interface, the function
    can be made available for all platforms and not just the
    ones using DT.
    
    Signed-off-by: Heikki Krogerus <heikki.krogerus@linux.intel.com>
    Signed-off-by: Felipe Balbi <balbi@ti.com>

diff --git a/include/linux/usb/of.h b/include/linux/usb/of.h
index 8c5a818ec244..ff23fea49fca 100644
--- a/include/linux/usb/of.h
+++ b/include/linux/usb/of.h
@@ -13,7 +13,6 @@
 
 #if IS_ENABLED(CONFIG_OF)
 enum usb_dr_mode of_usb_get_dr_mode(struct device_node *np);
-enum usb_device_speed of_usb_get_maximum_speed(struct device_node *np);
 bool of_usb_host_tpl_support(struct device_node *np);
 int of_usb_update_otg_caps(struct device_node *np,
 			struct usb_otg_caps *otg_caps);
@@ -23,11 +22,6 @@ static inline enum usb_dr_mode of_usb_get_dr_mode(struct device_node *np)
 	return USB_DR_MODE_UNKNOWN;
 }
 
-static inline enum usb_device_speed
-of_usb_get_maximum_speed(struct device_node *np)
-{
-	return USB_SPEED_UNKNOWN;
-}
 static inline bool of_usb_host_tpl_support(struct device_node *np)
 {
 	return false;

commit 929412d94f2b75fe2a662afa2977bfb6a233c1c3
Author: Li Jun <jun.li@freescale.com>
Date:   Thu Jul 9 15:18:44 2015 +0800

    usb: common: add API to update usb otg capabilities by device tree
    
    Check property of usb hardware to update otg version and disable SRP, HNP
    and ADP if its disable flag is present.
    
    Reviewed-by: Roger Quadros <rogerq@ti.com>
    Signed-off-by: Li Jun <jun.li@freescale.com>
    Signed-off-by: Felipe Balbi <balbi@ti.com>

diff --git a/include/linux/usb/of.h b/include/linux/usb/of.h
index cfe0528cdbb1..8c5a818ec244 100644
--- a/include/linux/usb/of.h
+++ b/include/linux/usb/of.h
@@ -15,6 +15,8 @@
 enum usb_dr_mode of_usb_get_dr_mode(struct device_node *np);
 enum usb_device_speed of_usb_get_maximum_speed(struct device_node *np);
 bool of_usb_host_tpl_support(struct device_node *np);
+int of_usb_update_otg_caps(struct device_node *np,
+			struct usb_otg_caps *otg_caps);
 #else
 static inline enum usb_dr_mode of_usb_get_dr_mode(struct device_node *np)
 {
@@ -30,6 +32,11 @@ static inline bool of_usb_host_tpl_support(struct device_node *np)
 {
 	return false;
 }
+static inline int of_usb_update_otg_caps(struct device_node *np,
+				struct usb_otg_caps *otg_caps)
+{
+	return 0;
+}
 #endif
 
 #if IS_ENABLED(CONFIG_OF) && IS_ENABLED(CONFIG_USB_SUPPORT)

commit 05f8b35a62efb8e70ebcd78e9c957324e9caddad
Author: Peter Chen <peter.chen@freescale.com>
Date:   Tue Aug 19 09:51:55 2014 +0800

    usb: common: add API to get if the platform supports TPL
    
    The TPL (Targeted Peripheral List) is used for targeted hosts
    (non-PC hosts), and it can be used at USB OTG & EH certification
    and some specific products which need white list.
    
    Signed-off-by: Peter Chen <peter.chen@freescale.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/include/linux/usb/of.h b/include/linux/usb/of.h
index 8c38aa26b3bb..cfe0528cdbb1 100644
--- a/include/linux/usb/of.h
+++ b/include/linux/usb/of.h
@@ -14,6 +14,7 @@
 #if IS_ENABLED(CONFIG_OF)
 enum usb_dr_mode of_usb_get_dr_mode(struct device_node *np);
 enum usb_device_speed of_usb_get_maximum_speed(struct device_node *np);
+bool of_usb_host_tpl_support(struct device_node *np);
 #else
 static inline enum usb_dr_mode of_usb_get_dr_mode(struct device_node *np)
 {
@@ -25,6 +26,10 @@ of_usb_get_maximum_speed(struct device_node *np)
 {
 	return USB_SPEED_UNKNOWN;
 }
+static inline bool of_usb_host_tpl_support(struct device_node *np)
+{
+	return false;
+}
 #endif
 
 #if IS_ENABLED(CONFIG_OF) && IS_ENABLED(CONFIG_USB_SUPPORT)

commit 9cf7b244187bba5964d4bf7438946baa2a974466
Author: Felipe Balbi <balbi@ti.com>
Date:   Tue Jul 30 09:09:15 2013 +0300

    usb: of: fix build breakage caused by recent patches
    
    commit 052a11d (usb: phy: make PHY driver selection
    possible by controller drivers) changed the rules
    on how drivers/usb/phy/of.c would be compiled and
    failed to update include/linux/usb/of.h accordingly.
    
    Because of that, we can fall into situations where
    of_usb_get_phy_mode() is redefined. In order to fix
    the error, we update the IS_ENABLED() check in
    include/linux/usb/of.h to reflect the condition
    where of.c is built.
    
    Reported-by: Stephen Rothwell <sfr@canb.auug.org.au>
    Signed-off-by: Felipe Balbi <balbi@ti.com>

diff --git a/include/linux/usb/of.h b/include/linux/usb/of.h
index 5a7cb9ebf0ef..8c38aa26b3bb 100644
--- a/include/linux/usb/of.h
+++ b/include/linux/usb/of.h
@@ -27,7 +27,7 @@ of_usb_get_maximum_speed(struct device_node *np)
 }
 #endif
 
-#if IS_ENABLED(CONFIG_OF) && IS_ENABLED(CONFIG_USB_PHY)
+#if IS_ENABLED(CONFIG_OF) && IS_ENABLED(CONFIG_USB_SUPPORT)
 enum usb_phy_interface of_usb_get_phy_mode(struct device_node *np);
 #else
 static inline enum usb_phy_interface of_usb_get_phy_mode(struct device_node *np)

commit 1494a1f62bf7cf57345e9282c8189fe2a21fab64
Author: Felipe Balbi <balbi@ti.com>
Date:   Sun Jun 30 13:56:45 2013 +0300

    usb: common: introduce of_usb_get_maximum_speed()
    
    this helper will be used for controllers which
    want to work at a lower speed even though they
    support higher USB transfer rates.
    
    One such case is Texas Instruments' AM437x
    SoC where it uses a USB3 controller without
    a USB3 PHY, rendering the controller USB2-only.
    
    Signed-off-by: Felipe Balbi <balbi@ti.com>

diff --git a/include/linux/usb/of.h b/include/linux/usb/of.h
index a0ef405368b8..5a7cb9ebf0ef 100644
--- a/include/linux/usb/of.h
+++ b/include/linux/usb/of.h
@@ -7,16 +7,24 @@
 #ifndef __LINUX_USB_OF_H
 #define __LINUX_USB_OF_H
 
+#include <linux/usb/ch9.h>
 #include <linux/usb/otg.h>
 #include <linux/usb/phy.h>
 
 #if IS_ENABLED(CONFIG_OF)
 enum usb_dr_mode of_usb_get_dr_mode(struct device_node *np);
+enum usb_device_speed of_usb_get_maximum_speed(struct device_node *np);
 #else
 static inline enum usb_dr_mode of_usb_get_dr_mode(struct device_node *np)
 {
 	return USB_DR_MODE_UNKNOWN;
 }
+
+static inline enum usb_device_speed
+of_usb_get_maximum_speed(struct device_node *np)
+{
+	return USB_SPEED_UNKNOWN;
+}
 #endif
 
 #if IS_ENABLED(CONFIG_OF) && IS_ENABLED(CONFIG_USB_PHY)

commit 848d5b9121e52f63847bf9e156f836db001f51c7
Author: Peter Chen <peter.chen@freescale.com>
Date:   Mon Jun 24 09:25:59 2013 +0800

    usb: fix build error without CONFIG_USB_PHY
    
    on i386:
    
    drivers/built-in.o: In function `ci_hdrc_probe':
    core.c:(.text+0x20446b): undefined reference to `of_usb_get_phy_mode'
    
    Signed-off-by: Peter Chen <peter.chen@freescale.com>
    Reported-by: Randy Dunlap <rdunlap@infradead.org>
    Acked-by: Randy Dunlap <rdunlap@infradead.org>
    Acked-by: Alexander Shishkin <alexander.shishkin@linux.intel.com>
    Acked-by: Felipe Balbi <balbi@ti.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/include/linux/usb/of.h b/include/linux/usb/of.h
index e460a24115ca..a0ef405368b8 100644
--- a/include/linux/usb/of.h
+++ b/include/linux/usb/of.h
@@ -10,19 +10,23 @@
 #include <linux/usb/otg.h>
 #include <linux/usb/phy.h>
 
-#ifdef CONFIG_OF
-enum usb_phy_interface of_usb_get_phy_mode(struct device_node *np);
+#if IS_ENABLED(CONFIG_OF)
 enum usb_dr_mode of_usb_get_dr_mode(struct device_node *np);
 #else
-static inline enum usb_phy_interface of_usb_get_phy_mode(struct device_node *np)
+static inline enum usb_dr_mode of_usb_get_dr_mode(struct device_node *np)
 {
-	return USBPHY_INTERFACE_MODE_UNKNOWN;
+	return USB_DR_MODE_UNKNOWN;
 }
+#endif
 
-static inline enum usb_dr_mode of_usb_get_dr_mode(struct device_node *np)
+#if IS_ENABLED(CONFIG_OF) && IS_ENABLED(CONFIG_USB_PHY)
+enum usb_phy_interface of_usb_get_phy_mode(struct device_node *np);
+#else
+static inline enum usb_phy_interface of_usb_get_phy_mode(struct device_node *np)
 {
-	return USB_DR_MODE_UNKNOWN;
+	return USBPHY_INTERFACE_MODE_UNKNOWN;
 }
+
 #endif
 
 #endif /* __LINUX_USB_OF_H */

commit 1c9af65357a309b60d78a442bd61d27cad458d00
Author: Michael Grzeschik <m.grzeschik@pengutronix.de>
Date:   Thu Jun 13 17:59:55 2013 +0300

    usb: add devicetree helpers for determining dr_mode and phy_type
    
    This adds two little devicetree helper functions for determining the
    dr_mode (host, peripheral, otg) and phy_type (utmi, ulpi,...) from
    the devicetree.
    
    Signed-off-by: Michael Grzeschik <m.grzeschik@pengutronix.de>
    Signed-off-by: Marc Kleine-Budde <mkl@pengutronix.de>
    Signed-off-by: Sascha Hauer <s.hauer@pengutronix.de>
    Acked-by: Felipe Balbi <balbi@ti.com>
    Signed-off-by: Alexander Shishkin <alexander.shishkin@linux.intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/include/linux/usb/of.h b/include/linux/usb/of.h
new file mode 100644
index 000000000000..e460a24115ca
--- /dev/null
+++ b/include/linux/usb/of.h
@@ -0,0 +1,28 @@
+/*
+ * OF helpers for usb devices.
+ *
+ * This file is released under the GPLv2
+ */
+
+#ifndef __LINUX_USB_OF_H
+#define __LINUX_USB_OF_H
+
+#include <linux/usb/otg.h>
+#include <linux/usb/phy.h>
+
+#ifdef CONFIG_OF
+enum usb_phy_interface of_usb_get_phy_mode(struct device_node *np);
+enum usb_dr_mode of_usb_get_dr_mode(struct device_node *np);
+#else
+static inline enum usb_phy_interface of_usb_get_phy_mode(struct device_node *np)
+{
+	return USBPHY_INTERFACE_MODE_UNKNOWN;
+}
+
+static inline enum usb_dr_mode of_usb_get_dr_mode(struct device_node *np)
+{
+	return USB_DR_MODE_UNKNOWN;
+}
+#endif
+
+#endif /* __LINUX_USB_OF_H */
