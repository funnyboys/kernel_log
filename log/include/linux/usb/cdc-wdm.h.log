commit 5fd54ace4721fc5ce2bb5aef6318fcf17f421460
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Fri Nov 3 11:28:30 2017 +0100

    USB: add SPDX identifiers to all remaining files in drivers/usb/
    
    It's good to have SPDX identifiers in all files to make it easier to
    audit the kernel tree for correct licenses.
    
    Update the drivers/usb/ and include/linux/usb* files with the correct
    SPDX license identifier based on the license text in the file itself.
    The SPDX identifier is a legally binding shorthand, which can be used
    instead of the full boiler plate text.
    
    This work is based on a script and data from Thomas Gleixner, Philippe
    Ombredanne, and Kate Stewart.
    
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: Kate Stewart <kstewart@linuxfoundation.org>
    Cc: Philippe Ombredanne <pombredanne@nexb.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Acked-by: Felipe Balbi <felipe.balbi@linux.intel.com>
    Acked-by: Johan Hovold <johan@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/include/linux/usb/cdc-wdm.h b/include/linux/usb/cdc-wdm.h
index 0b3f4295c025..9b895f93d8de 100644
--- a/include/linux/usb/cdc-wdm.h
+++ b/include/linux/usb/cdc-wdm.h
@@ -1,3 +1,4 @@
+// SPDX-License-Identifier: GPL-2.0
 /*
  * USB CDC Device Management subdriver
  *

commit 3edce1cf813aa6a087df7730cec0e67d57288300
Author: Bjørn Mork <bjorn@mork.no>
Date:   Sun Mar 17 21:00:06 2013 +0100

    USB: cdc-wdm: implement IOCTL_WDM_MAX_COMMAND
    
    Userspace applications need to know the maximum supported message
    size.
    
    The cdc-wdm driver translates between a character device stream
    and a message based protocol.  Each message is transported as a
    usb control message with no further encapsulation or syncronization.
    Each read or write on the character device should translate to
    exactly one usb control message to ensure that message boundaries
    are kept intact.  That means that the userspace application must
    know the maximum message size supported by the device and driver,
    making this size a vital part of the cdc-wdm character device API.
    
    CDC WDM and CDC MBIM functions export the maximum supported
    message size through CDC functional descriptors.  The cdc-wdm and
    cdc_mbim drivers will parse these descriptors and use the value
    chosen by the device.  The only current way for a userspace
    application to retrive the value is by duplicating the descriptor
    parsing. This is an unnecessary complex task, and application
    writers are likely to postpone it, using a fixed value and adding
    a "todo" item.
    
    QMI functions have no way to tell the host what message size they
    support.  The qmi_wwan driver use a fixed value based on protocol
    recommendations and observed device behaviour.  Userspace
    applications must know and hard code the same value.  This scheme
    will break if we ever encounter a QMI device needing a device
    specific message size quirk.  We are currently unable to support
    such a device because using a non default size would break the
    implicit userspace API.
    
    The message size is currently a hidden attribute of the cdc-wdm
    userspace API.  Retrieving it is unnecessarily complex, increasing
    the possibility of drivers and applications using different limits.
    The resulting errors are hard to debug, and can only be replicated
    on identical hardware.
    
    Exporting the maximum message size from the driver simplifies the
    task for the userspace application, and creates a unified
    information source independent of device and function class. It also
    serves to document that the message size is part of the cdc-wdm
    userspace API.
    
    This proposed API extension has been presented for the authors of
    userspace applications and libraries using the current API: libmbim,
    libqmi, uqmi, oFono and ModemManager.  The replies were:
    
    Aleksander Morgado:
     "We do really need max message size for MBIM; and as you say, it may be
      good to have the max message size info also for QMI, so the new ioctl
      seems a good addition. So +1 from my side, for what it's worth."
    
    Dan Williams:
     "Yeah, +1 here.  I'd prefer the sysfs file, but the fact that that
      doesn't work for fd passing pretty much kills it."
    
    No negative replies are so far received.
    
    Cc: Aleksander Morgado <aleksander@lanedo.com>
    Cc: Dan Williams <dcbw@redhat.com>
    Signed-off-by: Bjørn Mork <bjorn@mork.no>
    Acked-by: Oliver Neukum <oliver@neukum.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/include/linux/usb/cdc-wdm.h b/include/linux/usb/cdc-wdm.h
index 719c332620fa..0b3f4295c025 100644
--- a/include/linux/usb/cdc-wdm.h
+++ b/include/linux/usb/cdc-wdm.h
@@ -11,6 +11,8 @@
 #ifndef __LINUX_USB_CDC_WDM_H
 #define __LINUX_USB_CDC_WDM_H
 
+#include <uapi/linux/usb/cdc-wdm.h>
+
 extern struct usb_driver *usb_cdc_wdm_register(struct usb_interface *intf,
 					struct usb_endpoint_descriptor *ep,
 					int bufsize,

commit 3cc3615749dbd1b891512d5c9a5bf4559cfa9741
Author: Bjørn Mork <bjorn@mork.no>
Date:   Tue Mar 6 17:29:22 2012 +0100

    usb: cdc-wdm: adding usb_cdc_wdm_register subdriver support
    
    This driver can be used as a subdriver of another USB driver, allowing
    it to export a Device Managment interface consisting of a single interrupt
    endpoint with no dedicated USB interface.
    
    Some devices provide a Device Management function combined with a wwan
    function in a single USB interface having three endpoints (bulk in/out
    + interrupt).  If the interrupt endpoint is used exclusively for DM
    notifications, then this driver can support that as a subdriver
    provided that the wwan driver calls the appropriate entry points on
    probe, suspend, resume, pre_reset, post_reset and disconnect.
    
    The main driver must have full control over all interface related
    settings, including the needs_remote_wakeup flag. A manage_power
    function must be provided by the main driver.
    
    A manage_power stub doing direct flag manipulation is used in normal
    driver mode.
    
    Signed-off-by: Bjørn Mork <bjorn@mork.no>
    Acked-by: Oliver Neukum <oneukum@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/include/linux/usb/cdc-wdm.h b/include/linux/usb/cdc-wdm.h
new file mode 100644
index 000000000000..719c332620fa
--- /dev/null
+++ b/include/linux/usb/cdc-wdm.h
@@ -0,0 +1,19 @@
+/*
+ * USB CDC Device Management subdriver
+ *
+ * Copyright (c) 2012  Bjørn Mork <bjorn@mork.no>
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License
+ * version 2 as published by the Free Software Foundation.
+ */
+
+#ifndef __LINUX_USB_CDC_WDM_H
+#define __LINUX_USB_CDC_WDM_H
+
+extern struct usb_driver *usb_cdc_wdm_register(struct usb_interface *intf,
+					struct usb_endpoint_descriptor *ep,
+					int bufsize,
+					int (*manage_power)(struct usb_interface *, int));
+
+#endif /* __LINUX_USB_CDC_WDM_H */
