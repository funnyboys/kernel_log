commit 06e60e5038fa432900ffa956307459a1aabee1db
Author: Dmitry Osipenko <digetx@gmail.com>
Date:   Mon Jan 6 04:34:09 2020 +0300

    usb: phy: tegra: Use device-tree notion of reset-GPIO's active-state
    
    It is much more intuitive if reset is treated as asserted when GPIO value
    is set to 1. All NVIDIA Tegra device-trees are properly specifying active
    state of the reset-GPIO since 2013, let's clean up that part of the code.
    
    Signed-off-by: Dmitry Osipenko <digetx@gmail.com>
    Link: https://lore.kernel.org/r/20200106013416.9604-14-digetx@gmail.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/include/linux/usb/tegra_usb_phy.h b/include/linux/usb/tegra_usb_phy.h
index 3ae73bdc6245..c29d1b4c9381 100644
--- a/include/linux/usb/tegra_usb_phy.h
+++ b/include/linux/usb/tegra_usb_phy.h
@@ -17,6 +17,7 @@
 #define __TEGRA_USB_PHY_H
 
 #include <linux/clk.h>
+#include <linux/gpio.h>
 #include <linux/reset.h>
 #include <linux/usb/otg.h>
 
@@ -76,7 +77,7 @@ struct tegra_usb_phy {
 	struct usb_phy u_phy;
 	bool is_legacy_phy;
 	bool is_ulpi_phy;
-	int reset_gpio;
+	struct gpio_desc *reset_gpio;
 	struct reset_control *pad_rst;
 	bool powered_on;
 };

commit 18bd8bff69f7fbc53903dba4a1c234a30a8fcbde
Author: Dmitry Osipenko <digetx@gmail.com>
Date:   Mon Jan 6 04:34:00 2020 +0300

    usb: phy: tegra: Keep track of power on-off state
    
    The PHY driver should keep track of the enable state, otherwise enable
    refcount is screwed if USB driver tries to enable PHY when it is already
    enabled. This will be the case for ChipIdea and Tegra EHCI drivers once
    PHY driver will gain support for the init/shutdown callbacks.
    
    Signed-off-by: Dmitry Osipenko <digetx@gmail.com>
    Link: https://lore.kernel.org/r/20200106013416.9604-5-digetx@gmail.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/include/linux/usb/tegra_usb_phy.h b/include/linux/usb/tegra_usb_phy.h
index 0c5c3ea8b2d7..3ae73bdc6245 100644
--- a/include/linux/usb/tegra_usb_phy.h
+++ b/include/linux/usb/tegra_usb_phy.h
@@ -78,6 +78,7 @@ struct tegra_usb_phy {
 	bool is_ulpi_phy;
 	int reset_gpio;
 	struct reset_control *pad_rst;
+	bool powered_on;
 };
 
 void tegra_usb_phy_preresume(struct usb_phy *phy);

commit 143470368efd3f0fb4cbe81aa89f49de8048d8a9
Author: Dmitry Osipenko <digetx@gmail.com>
Date:   Tue Apr 10 01:02:58 2018 +0300

    usb: tegra: Move utmi-pads reset from ehci-tegra to tegra-phy
    
    UTMI pads are shared by USB controllers and reset of UTMI pads is shared
    with the reset of USB1 controller. Currently reset of UTMI pads is done by
    the EHCI driver and ChipIdea UDC works because EHCI driver always happen
    to be probed first. Move reset controls from ehci-tegra to tegra-phy in
    order to resolve the problem.
    
    Signed-off-by: Dmitry Osipenko <digetx@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/include/linux/usb/tegra_usb_phy.h b/include/linux/usb/tegra_usb_phy.h
index d641ea1660b7..0c5c3ea8b2d7 100644
--- a/include/linux/usb/tegra_usb_phy.h
+++ b/include/linux/usb/tegra_usb_phy.h
@@ -17,6 +17,7 @@
 #define __TEGRA_USB_PHY_H
 
 #include <linux/clk.h>
+#include <linux/reset.h>
 #include <linux/usb/otg.h>
 
 /*
@@ -76,6 +77,7 @@ struct tegra_usb_phy {
 	bool is_legacy_phy;
 	bool is_ulpi_phy;
 	int reset_gpio;
+	struct reset_control *pad_rst;
 };
 
 void tegra_usb_phy_preresume(struct usb_phy *phy);

commit 5fd54ace4721fc5ce2bb5aef6318fcf17f421460
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Fri Nov 3 11:28:30 2017 +0100

    USB: add SPDX identifiers to all remaining files in drivers/usb/
    
    It's good to have SPDX identifiers in all files to make it easier to
    audit the kernel tree for correct licenses.
    
    Update the drivers/usb/ and include/linux/usb* files with the correct
    SPDX license identifier based on the license text in the file itself.
    The SPDX identifier is a legally binding shorthand, which can be used
    instead of the full boiler plate text.
    
    This work is based on a script and data from Thomas Gleixner, Philippe
    Ombredanne, and Kate Stewart.
    
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: Kate Stewart <kstewart@linuxfoundation.org>
    Cc: Philippe Ombredanne <pombredanne@nexb.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Acked-by: Felipe Balbi <felipe.balbi@linux.intel.com>
    Acked-by: Johan Hovold <johan@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/include/linux/usb/tegra_usb_phy.h b/include/linux/usb/tegra_usb_phy.h
index 1de16c324ec8..d641ea1660b7 100644
--- a/include/linux/usb/tegra_usb_phy.h
+++ b/include/linux/usb/tegra_usb_phy.h
@@ -1,3 +1,4 @@
+// SPDX-License-Identifier: GPL-2.0
 /*
  * Copyright (C) 2010 Google, Inc.
  *

commit e497a24d8e18af510879b2ae059ee20a4a58eae8
Author: Tuomas Tynkkynen <ttynkkynen@nvidia.com>
Date:   Mon Aug 12 16:06:53 2013 +0300

    usb: phy: tegra: Program new PHY parameters
    
    The Tegra30 TRM recommends configuration of certain PHY parameters for
    optimal quality. Program the following registers based on device tree
    parameters:
    
    - UTMIP_XCVR_HSSLEW: HS slew rate control.
    - UTMIP_HSSQUELCH_LEVEL: HS squelch detector level
    - UTMIP_HSDISCON_LEVEL: HS disconnect detector level.
    
    These registers exist in Tegra20, but programming them hasn't been
    necessary, so these parameters won't be set on Tegra20 to keep the
    device trees backward compatible.
    
    Additionally, the UTMIP_XCVR_SETUP parameter can be set from fuses
    instead of a software-programmed value, as the optimal value can
    vary between invidual boards. The boolean property
    nvidia,xcvr-setup-use-fuses can be used to enable this behaviour.
    
    Signed-off-by: Tuomas Tynkkynen <ttynkkynen@nvidia.com>
    Tested-by: Stephen Warren <swarren@nvidia.com>
    Reviewed-by: Stephen Warren <swarren@nvidia.com>
    Signed-off-by: Felipe Balbi <balbi@ti.com>

diff --git a/include/linux/usb/tegra_usb_phy.h b/include/linux/usb/tegra_usb_phy.h
index d3a63c354db9..1de16c324ec8 100644
--- a/include/linux/usb/tegra_usb_phy.h
+++ b/include/linux/usb/tegra_usb_phy.h
@@ -41,9 +41,13 @@ struct tegra_utmip_config {
 	u8 elastic_limit;
 	u8 idle_wait_delay;
 	u8 term_range_adj;
+	bool xcvr_setup_use_fuses;
 	u8 xcvr_setup;
 	u8 xcvr_lsfslew;
 	u8 xcvr_lsrslew;
+	u8 xcvr_hsslew;
+	u8 hssquelch_level;
+	u8 hsdiscon_level;
 };
 
 enum tegra_usb_phy_port_speed {

commit 3e635202ce40e4d7ff3fafc18db70c5d28cc6622
Author: Tuomas Tynkkynen <ttynkkynen@nvidia.com>
Date:   Mon Aug 12 16:06:51 2013 +0300

    usb: phy: tegra: Tegra30 support
    
    The Tegra30 USB PHY is a bit different than the Tegra20 PHY:
    
    - The EHCI controller supports the HOSTPC register extension, and some
      of the fields that the PHY needs to modify (PHCD and PTS) have moved
      to the new HOSTPC register.
    - Some of the UTMI PLL configuration registers have moved from the USB
      register space to the Clock-And-Reset controller space. In Tegra30
      the clock driver is responsible for configuring the UTMI PLL.
    - The USBMODE register must be explicitly written to enter host mode.
    - Certain PHY parameters need to be programmed for optimal signal
      quality. Support for this will be added in the next patch.
    
    The new tegra_phy_soc_config structure is added to describe the
    differences between the SoCs.
    
    Signed-off-by: Tuomas Tynkkynen <ttynkkynen@nvidia.com>
    Tested-by: Stephen Warren <swarren@nvidia.com>
    Reviewed-by: Stephen Warren <swarren@nvidia.com>
    Signed-off-by: Felipe Balbi <balbi@ti.com>

diff --git a/include/linux/usb/tegra_usb_phy.h b/include/linux/usb/tegra_usb_phy.h
index d3db274610a1..d3a63c354db9 100644
--- a/include/linux/usb/tegra_usb_phy.h
+++ b/include/linux/usb/tegra_usb_phy.h
@@ -18,6 +18,24 @@
 #include <linux/clk.h>
 #include <linux/usb/otg.h>
 
+/*
+ * utmi_pll_config_in_car_module: true if the UTMI PLL configuration registers
+ *     should be set up by clk-tegra, false if by the PHY code
+ * has_hostpc: true if the USB controller has the HOSTPC extension, which
+ *     changes the location of the PHCD and PTS fields
+ * requires_usbmode_setup: true if the USBMODE register needs to be set to
+ *      enter host mode
+ * requires_extra_tuning_parameters: true if xcvr_hsslew, hssquelch_level
+ *      and hsdiscon_level should be set for adequate signal quality
+ */
+
+struct tegra_phy_soc_config {
+	bool utmi_pll_config_in_car_module;
+	bool has_hostpc;
+	bool requires_usbmode_setup;
+	bool requires_extra_tuning_parameters;
+};
+
 struct tegra_utmip_config {
 	u8 hssync_start_delay;
 	u8 elastic_limit;
@@ -47,6 +65,7 @@ struct tegra_usb_phy {
 	struct regulator *vbus;
 	enum usb_dr_mode mode;
 	void *config;
+	const struct tegra_phy_soc_config *soc_config;
 	struct usb_phy *ulpi;
 	struct usb_phy u_phy;
 	bool is_legacy_phy;

commit 6558d7edbe069df1220b525362d4aa854a65a8bc
Author: Tuomas Tynkkynen <ttynkkynen@nvidia.com>
Date:   Thu Jul 25 21:38:09 2013 +0300

    usb: phy: tegra: Use DT helpers for dr_mode
    
    Use the new of_usb_get_dr_mode helper function for parsing dr_mode
    from the device tree. Also replace the usage of the custom
    tegra_usb_phy_mode enum with the standard enum.
    
    Signed-off-by: Tuomas Tynkkynen <ttynkkynen@nvidia.com>
    Reviewed-by: Stephen Warren <swarren@nvidia.com>
    Tested-by: Stephen Warren <swarren@nvidia.com>
    Signed-off-by: Felipe Balbi <balbi@ti.com>

diff --git a/include/linux/usb/tegra_usb_phy.h b/include/linux/usb/tegra_usb_phy.h
index a095c98184d0..d3db274610a1 100644
--- a/include/linux/usb/tegra_usb_phy.h
+++ b/include/linux/usb/tegra_usb_phy.h
@@ -34,12 +34,6 @@ enum tegra_usb_phy_port_speed {
 	TEGRA_USB_PHY_PORT_SPEED_HIGH,
 };
 
-enum tegra_usb_phy_mode {
-	TEGRA_USB_PHY_MODE_DEVICE,
-	TEGRA_USB_PHY_MODE_HOST,
-	TEGRA_USB_PHY_MODE_OTG,
-};
-
 struct tegra_xtal_freq;
 
 struct tegra_usb_phy {
@@ -51,7 +45,7 @@ struct tegra_usb_phy {
 	struct clk *pll_u;
 	struct clk *pad_clk;
 	struct regulator *vbus;
-	enum tegra_usb_phy_mode mode;
+	enum usb_dr_mode mode;
 	void *config;
 	struct usb_phy *ulpi;
 	struct usb_phy u_phy;

commit 3b102e8bc0e49d417c7d376af857537080335dbf
Author: Tuomas Tynkkynen <ttynkkynen@nvidia.com>
Date:   Thu Jul 25 21:38:07 2013 +0300

    usb: phy: tegra: Remove custom PHY locating APIs
    
    The Tegra EHCI driver is no longer using these custom functions, so they
    can be removed.
    
    Signed-off-by: Tuomas Tynkkynen <ttynkkynen@nvidia.com>
    Reviewed-by: Stephen Warren <swarren@nvidia.com>
    Tested-by: Stephen Warren <swarren@nvidia.com>
    Signed-off-by: Felipe Balbi <balbi@ti.com>

diff --git a/include/linux/usb/tegra_usb_phy.h b/include/linux/usb/tegra_usb_phy.h
index 847415313ad2..a095c98184d0 100644
--- a/include/linux/usb/tegra_usb_phy.h
+++ b/include/linux/usb/tegra_usb_phy.h
@@ -60,8 +60,6 @@ struct tegra_usb_phy {
 	int reset_gpio;
 };
 
-struct usb_phy *tegra_usb_get_phy(struct device_node *dn);
-
 void tegra_usb_phy_preresume(struct usb_phy *phy);
 
 void tegra_usb_phy_postresume(struct usb_phy *phy);

commit 5fed6828318119656e243c4f0a11955cefc8eebd
Author: Tuomas Tynkkynen <ttynkkynen@nvidia.com>
Date:   Thu Jul 25 21:38:04 2013 +0300

    ARM: tegra: Remove USB platform data
    
    USB-related platform data is not used anymore in the Tegra USB drivers,
    so remove all of it.
    
    Signed-off-by: Tuomas Tynkkynen <ttynkkynen@nvidia.com>
    Reviewed-by: Stephen Warren <swarren@nvidia.com>
    Tested-by: Stephen Warren <swarren@nvidia.com>
    Acked-by: Stephen Warren <swarren@nvidia.com>
    Signed-off-by: Felipe Balbi <balbi@ti.com>

diff --git a/include/linux/usb/tegra_usb_phy.h b/include/linux/usb/tegra_usb_phy.h
index c2bc7106aaa8..847415313ad2 100644
--- a/include/linux/usb/tegra_usb_phy.h
+++ b/include/linux/usb/tegra_usb_phy.h
@@ -28,11 +28,6 @@ struct tegra_utmip_config {
 	u8 xcvr_lsrslew;
 };
 
-struct tegra_ulpi_config {
-	int reset_gpio;
-	const char *clk;
-};
-
 enum tegra_usb_phy_port_speed {
 	TEGRA_USB_PHY_PORT_SPEED_FULL = 0,
 	TEGRA_USB_PHY_PORT_SPEED_LOW,

commit 185d0fd570c121c0c3d4527842a097e50e3e7a79
Author: Tuomas Tynkkynen <ttynkkynen@nvidia.com>
Date:   Thu Jul 25 21:38:01 2013 +0300

    usb: phy: tegra: Remove unnecessary 'dev' field
    
    struct usb_phy already has a field for the device pointer, so this
    unnecessary field can be removed.
    
    Signed-off-by: Tuomas Tynkkynen <ttynkkynen@nvidia.com>
    Reviewed-by: Stephen Warren <swarren@nvidia.com>
    Tested-by: Stephen Warren <swarren@nvidia.com>
    Signed-off-by: Felipe Balbi <balbi@ti.com>

diff --git a/include/linux/usb/tegra_usb_phy.h b/include/linux/usb/tegra_usb_phy.h
index 2b5fa947980a..c2bc7106aaa8 100644
--- a/include/linux/usb/tegra_usb_phy.h
+++ b/include/linux/usb/tegra_usb_phy.h
@@ -60,7 +60,6 @@ struct tegra_usb_phy {
 	void *config;
 	struct usb_phy *ulpi;
 	struct usb_phy u_phy;
-	struct device *dev;
 	bool is_legacy_phy;
 	bool is_ulpi_phy;
 	int reset_gpio;

commit f5b8c8b6d3b4697f28b818d8784e3e4b2a290022
Author: Mikko Perttunen <mperttunen@nvidia.com>
Date:   Wed Jul 17 10:37:49 2013 +0300

    usb: tegra: Use regulators instead of GPIOs for USB PHY VBUS
    
    The tegra ehci driver has enabled USB vbus regulators directly using
    GPIOs and the device tree attribute nvidia,vbus-gpio. This is ugly
    and causes error messages on boot when both the regulator driver
    and the ehci driver want access to the same GPIO.
    
    After this patch, usb vbus regulators for tegra usb phy devices are specified
    with the device tree attribute vbus-supply = <&x> where x is a regulator defined
    in the device tree. The old nvidia,vbus-gpio property is no longer supported.
    
    Signed-off-by: Mikko Perttunen <mperttunen@nvidia.com>
    Reviewed-by: Stephen Warren <swarren@nvidia.com>
    Tested-by: Stephen Warren <swarren@nvidia.com>
    Signed-off-by: Felipe Balbi <balbi@ti.com>

diff --git a/include/linux/usb/tegra_usb_phy.h b/include/linux/usb/tegra_usb_phy.h
index d2ca919a5b73..2b5fa947980a 100644
--- a/include/linux/usb/tegra_usb_phy.h
+++ b/include/linux/usb/tegra_usb_phy.h
@@ -55,6 +55,7 @@ struct tegra_usb_phy {
 	struct clk *clk;
 	struct clk *pll_u;
 	struct clk *pad_clk;
+	struct regulator *vbus;
 	enum tegra_usb_phy_mode mode;
 	void *config;
 	struct usb_phy *ulpi;

commit 91a687d8fe39bf100286138f0ed1ef1e7b32cfb8
Author: Stephen Warren <swarren@nvidia.com>
Date:   Thu Jun 13 11:24:11 2013 -0600

    USB: EHCI: tegra: fix circular module dependencies
    
    The Tegra EHCI driver directly calls various functions in the Tegra USB
    PHY driver. The reverse is also true; the PHY driver calls into the EHCI
    driver. This is problematic when the two are built as modules.
    
    The calls from the PHY to EHCI driver were originally added in commit
    bbdabdb "usb: add APIs to access host registers from Tegra PHY", for the
    following reasons:
    
    1) The register being touched is an EHCI register, so logically only the
       EHCI driver should touch it.
    2) (1) implies that some locking may be needed to correctly implement the
       r/m/w access to this shared register.
    3) We were expecting to pass only the PHY register space to the Tegra PHY
       driver, and hence it would not have access to touch the shared
       registers.
    
    To solve this, that commit added functions in the EHCI driver to touch the
    shared register on behalf of the PHY driver.
    
    In practice, we ended up not having any locking in the implementaiton of
    those functions, and I've been led to believe this is safe. Equally, (3)
    did not happen either. Hence, it is possible for the PHY driver to touch
    the shared register directly.
    
    Given that, this patch moves the code to touch the shared register back
    into the PHY driver, to eliminate the module problems. If we actually
    need locking or co-ordination in the future, I propose we put the lock
    support into some pre-existing core module, or into a third separate
    module, in order to avoid the circular dependencies.
    
    I apologize for my contribution to code churn here.
    
    Signed-off-by: Stephen Warren <swarren@nvidia.com>
    Acked-by: Alan Stern <stern@rowland.harvard.edu>
    Acked-by: Arnd Bergmann <arnd@arndb.de>
    Tested-by: Thierry Reding <thierry.reding@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/include/linux/usb/tegra_usb_phy.h b/include/linux/usb/tegra_usb_phy.h
index 0cd15d2df53d..d2ca919a5b73 100644
--- a/include/linux/usb/tegra_usb_phy.h
+++ b/include/linux/usb/tegra_usb_phy.h
@@ -76,8 +76,4 @@ void tegra_ehci_phy_restore_start(struct usb_phy *phy,
 
 void tegra_ehci_phy_restore_end(struct usb_phy *phy);
 
-void tegra_ehci_set_pts(struct usb_phy *x, u8 pts_val);
-
-void tegra_ehci_set_phcd(struct usb_phy *x, bool enable);
-
 #endif /* __TEGRA_USB_PHY_H */

commit 2d22b42db02fdafeb7b990c2c25caabff4dd46fe
Author: Venu Byravarasu <vbyravarasu@nvidia.com>
Date:   Thu May 16 19:43:02 2013 +0530

    usb: phy: registering Tegra USB PHY as platform driver
    
    Registered Tegra USB PHY as a separate platform driver.
    
    To synchronize host controller and PHY initialization, used deferred
    probe mechanism. As PHY should be initialized before EHCI starts running,
    deferred probe of Tegra EHCI driver till PHY probe gets completed.
    
    Got rid of instance number based handling in host driver.
    
    Made use of DT params to get the PHY Pad registers.
    
    Signed-off-by: Venu Byravarasu <vbyravarasu@nvidia.com>
    Signed-off-by: Felipe Balbi <balbi@ti.com>

diff --git a/include/linux/usb/tegra_usb_phy.h b/include/linux/usb/tegra_usb_phy.h
index 97d123c4d7cc..0cd15d2df53d 100644
--- a/include/linux/usb/tegra_usb_phy.h
+++ b/include/linux/usb/tegra_usb_phy.h
@@ -63,14 +63,9 @@ struct tegra_usb_phy {
 	bool is_legacy_phy;
 	bool is_ulpi_phy;
 	int reset_gpio;
-	void (*set_pts)(struct usb_phy *x, u8 pts_val);
-	void (*set_phcd)(struct usb_phy *x, bool enable);
 };
 
-struct tegra_usb_phy *tegra_usb_phy_open(struct device *dev, int instance,
-	void __iomem *regs, void *config,
-	void (*set_pts)(struct usb_phy *x, u8 pts_val),
-	void (*set_phcd)(struct usb_phy *x, bool enable));
+struct usb_phy *tegra_usb_get_phy(struct device_node *dn);
 
 void tegra_usb_phy_preresume(struct usb_phy *phy);
 
@@ -81,4 +76,8 @@ void tegra_ehci_phy_restore_start(struct usb_phy *phy,
 
 void tegra_ehci_phy_restore_end(struct usb_phy *phy);
 
+void tegra_ehci_set_pts(struct usb_phy *x, u8 pts_val);
+
+void tegra_ehci_set_phcd(struct usb_phy *x, bool enable);
+
 #endif /* __TEGRA_USB_PHY_H */

commit 12ea18e4f0bd793b7f9d7e8bf6c76815d5621ac3
Author: Venu Byravarasu <vbyravarasu@nvidia.com>
Date:   Thu May 16 19:43:00 2013 +0530

    usb: phy: tegra: get ULPI reset GPIO info using DT.
    
    As GPIO information is avail through DT, used it to get Tegra ULPI
    reset GPIO number. Added a new member to tegra_usb_phy structure to
    store this number.
    
    Signed-off-by: Venu Byravarasu <vbyravarasu@nvidia.com>
    Signed-off-by: Felipe Balbi <balbi@ti.com>

diff --git a/include/linux/usb/tegra_usb_phy.h b/include/linux/usb/tegra_usb_phy.h
index ff2d95978b38..97d123c4d7cc 100644
--- a/include/linux/usb/tegra_usb_phy.h
+++ b/include/linux/usb/tegra_usb_phy.h
@@ -62,6 +62,7 @@ struct tegra_usb_phy {
 	struct device *dev;
 	bool is_legacy_phy;
 	bool is_ulpi_phy;
+	int reset_gpio;
 	void (*set_pts)(struct usb_phy *x, u8 pts_val);
 	void (*set_phcd)(struct usb_phy *x, bool enable);
 };

commit 9cd9384c73395f6ce78e1b9d529bc9f294fd5223
Author: Venu Byravarasu <vbyravarasu@nvidia.com>
Date:   Thu May 16 19:42:59 2013 +0530

    usb: phy: tegra: Get PHY mode using DT
    
    Added a new PHY mode to support OTG.
    Obtained Tegra USB PHY mode using DT property.
    
    Signed-off-by: Venu Byravarasu <vbyravarasu@nvidia.com>
    Signed-off-by: Felipe Balbi <balbi@ti.com>

diff --git a/include/linux/usb/tegra_usb_phy.h b/include/linux/usb/tegra_usb_phy.h
index 1b7519a8c0bf..ff2d95978b38 100644
--- a/include/linux/usb/tegra_usb_phy.h
+++ b/include/linux/usb/tegra_usb_phy.h
@@ -42,6 +42,7 @@ enum tegra_usb_phy_port_speed {
 enum tegra_usb_phy_mode {
 	TEGRA_USB_PHY_MODE_DEVICE,
 	TEGRA_USB_PHY_MODE_HOST,
+	TEGRA_USB_PHY_MODE_OTG,
 };
 
 struct tegra_xtal_freq;
@@ -66,7 +67,7 @@ struct tegra_usb_phy {
 };
 
 struct tegra_usb_phy *tegra_usb_phy_open(struct device *dev, int instance,
-	void __iomem *regs, void *config, enum tegra_usb_phy_mode phy_mode,
+	void __iomem *regs, void *config,
 	void (*set_pts)(struct usb_phy *x, u8 pts_val),
 	void (*set_phcd)(struct usb_phy *x, bool enable));
 

commit ee5d5499edb94cd03738a52a7e234b139da8fd72
Author: Arnd Bergmann <arnd@arndb.de>
Date:   Tue Apr 23 21:05:40 2013 +0200

    usb: phy: tegra: don't call into tegra-ehci directly
    
    Both phy-tegra-usb.c and ehci-tegra.c export symbols used by the other one,
    which does not work if one of them or both are loadable modules, resulting
    in an error like:
    
    drivers/built-in.o: In function `utmi_phy_clk_disable':
    drivers/usb/phy/phy-tegra-usb.c:302: undefined reference to `tegra_ehci_set_phcd'
    drivers/built-in.o: In function `utmi_phy_clk_enable':
    drivers/usb/phy/phy-tegra-usb.c:324: undefined reference to `tegra_ehci_set_phcd'
    drivers/built-in.o: In function `utmi_phy_power_on':
    drivers/usb/phy/phy-tegra-usb.c:447: undefined reference to `tegra_ehci_set_pts'
    
    This turns the interface into a one-way dependency by letting the tegra ehci
    driver pass two function pointers for callbacks that need to be called by
    the phy driver.
    
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>
    Cc: Venu Byravarasu <vbyravarasu@nvidia.com>
    Cc: Alan Stern <stern@rowland.harvard.edu>
    Cc: Felipe Balbi <balbi@ti.com>
    Cc: Stephen Warren <swarren@nvidia.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/include/linux/usb/tegra_usb_phy.h b/include/linux/usb/tegra_usb_phy.h
index 9ebebe906925..1b7519a8c0bf 100644
--- a/include/linux/usb/tegra_usb_phy.h
+++ b/include/linux/usb/tegra_usb_phy.h
@@ -61,10 +61,14 @@ struct tegra_usb_phy {
 	struct device *dev;
 	bool is_legacy_phy;
 	bool is_ulpi_phy;
+	void (*set_pts)(struct usb_phy *x, u8 pts_val);
+	void (*set_phcd)(struct usb_phy *x, bool enable);
 };
 
 struct tegra_usb_phy *tegra_usb_phy_open(struct device *dev, int instance,
-	void __iomem *regs, void *config, enum tegra_usb_phy_mode phy_mode);
+	void __iomem *regs, void *config, enum tegra_usb_phy_mode phy_mode,
+	void (*set_pts)(struct usb_phy *x, u8 pts_val),
+	void (*set_phcd)(struct usb_phy *x, bool enable));
 
 void tegra_usb_phy_preresume(struct usb_phy *phy);
 
@@ -75,8 +79,4 @@ void tegra_ehci_phy_restore_start(struct usb_phy *phy,
 
 void tegra_ehci_phy_restore_end(struct usb_phy *phy);
 
-void tegra_ehci_set_pts(struct usb_phy *x, u8 pts_val);
-
-void tegra_ehci_set_phcd(struct usb_phy *x, bool enable);
-
 #endif /* __TEGRA_USB_PHY_H */

commit ab137d04db5a4b32250ce5ef1b288ce6cf06adf6
Author: Venu Byravarasu <vbyravarasu@nvidia.com>
Date:   Thu Jan 24 15:57:03 2013 +0530

    usb: host: tegra: make use of PHY pointer of HCD
    
    As pointer to PHY structure can be stored in struct usb_hcd
    making use of it, to call Tegra PHY APIs.
    
    Call to usb_phy_shutdown() is moved up in tegra_ehci_remove(),
    so that to avoid dereferencing of hcd after its freed up.
    
    Signed-off-by: Venu Byravarasu <vbyravarasu@nvidia.com>
    Acked-by: Alan Stern <stern@rowland.harvard.edu>
    Acked-by: Felipe Balbi <balbi@ti.com>
    Acked-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Stephen Warren <swarren@nvidia.com>

diff --git a/include/linux/usb/tegra_usb_phy.h b/include/linux/usb/tegra_usb_phy.h
index 9259d4659582..9ebebe906925 100644
--- a/include/linux/usb/tegra_usb_phy.h
+++ b/include/linux/usb/tegra_usb_phy.h
@@ -66,14 +66,14 @@ struct tegra_usb_phy {
 struct tegra_usb_phy *tegra_usb_phy_open(struct device *dev, int instance,
 	void __iomem *regs, void *config, enum tegra_usb_phy_mode phy_mode);
 
-void tegra_usb_phy_preresume(struct tegra_usb_phy *phy);
+void tegra_usb_phy_preresume(struct usb_phy *phy);
 
-void tegra_usb_phy_postresume(struct tegra_usb_phy *phy);
+void tegra_usb_phy_postresume(struct usb_phy *phy);
 
-void tegra_ehci_phy_restore_start(struct tegra_usb_phy *phy,
+void tegra_ehci_phy_restore_start(struct usb_phy *phy,
 				 enum tegra_usb_phy_port_speed port_speed);
 
-void tegra_ehci_phy_restore_end(struct tegra_usb_phy *phy);
+void tegra_ehci_phy_restore_end(struct usb_phy *phy);
 
 void tegra_ehci_set_pts(struct usb_phy *x, u8 pts_val);
 

commit bbdabdb62d86090511410728644a19291bf300cf
Author: Venu Byravarasu <vbyravarasu@nvidia.com>
Date:   Thu Jan 17 20:15:37 2013 +0000

    usb: add APIs to access host registers from Tegra PHY
    
    As Tegra PHY driver needs to access one of the host registers,
    added few APIs.
    
    Signed-off-by: Venu Byravarasu <vbyravarasu@nvidia.com>
    Acked-by: Alan Stern <stern@rowland.harvard.edu>
    [swarren: moved assignment of phy->is_ulpi_phy to previous patch.]
    Signed-off-by: Stephen Warren <swarren@nvidia.com>

diff --git a/include/linux/usb/tegra_usb_phy.h b/include/linux/usb/tegra_usb_phy.h
index a6a89d4866f4..9259d4659582 100644
--- a/include/linux/usb/tegra_usb_phy.h
+++ b/include/linux/usb/tegra_usb_phy.h
@@ -75,4 +75,8 @@ void tegra_ehci_phy_restore_start(struct tegra_usb_phy *phy,
 
 void tegra_ehci_phy_restore_end(struct tegra_usb_phy *phy);
 
+void tegra_ehci_set_pts(struct usb_phy *x, u8 pts_val);
+
+void tegra_ehci_set_phcd(struct usb_phy *x, bool enable);
+
 #endif /* __TEGRA_USB_PHY_H */

commit 3f9db1a19a8a17f6000973194c6a1d63c5cebf21
Author: Venu Byravarasu <vbyravarasu@nvidia.com>
Date:   Wed Jan 16 03:30:21 2013 +0000

    USB: PHY: tegra: Get rid of instance number to differentiate PHY type
    
    Tegra20 USB has 3 PHY instances:
    Instance 1 and 3 are UTMI. Instance 2 is ULPI.
    
    As instance number was used to differentiate ULPI from UTMI,
    used DT param to get this info and processed accordingly.
    
    Signed-off-by: Venu Byravarasu <vbyravarasu@nvidia.com>
    Acked-by: Felipe Balbi <balbi@ti.com>
    [swarren: moved assignment of phy->is_ulpi_phy into this patch out
    of next patch.]
    Signed-off-by: Stephen Warren <swarren@nvidia.com>

diff --git a/include/linux/usb/tegra_usb_phy.h b/include/linux/usb/tegra_usb_phy.h
index f03e157abaa8..a6a89d4866f4 100644
--- a/include/linux/usb/tegra_usb_phy.h
+++ b/include/linux/usb/tegra_usb_phy.h
@@ -60,6 +60,7 @@ struct tegra_usb_phy {
 	struct usb_phy u_phy;
 	struct device *dev;
 	bool is_legacy_phy;
+	bool is_ulpi_phy;
 };
 
 struct tegra_usb_phy *tegra_usb_phy_open(struct device *dev, int instance,

commit 3a55c6a8b96f055783a1b9d5497f66b56a9ea0d7
Author: Venu Byravarasu <vbyravarasu@nvidia.com>
Date:   Wed Jan 16 03:30:20 2013 +0000

    USB: PHY: tegra: get rid of instance number to differentiate legacy controller
    
    Tegra20 USB has 3 PHY instances. Instance 0 is based on
    legacy PHY interface and other two are standard interfaces.
    
    As instance number was used to differentiate legacy from
    standard interfaces, used DT param to get this info and
    processed accordingly.
    
    Signed-off-by: Venu Byravarasu <vbyravarasu@nvidia.com>
    Acked-by: Felipe Balbi <balbi@ti.com>
    Signed-off-by: Stephen Warren <swarren@nvidia.com>

diff --git a/include/linux/usb/tegra_usb_phy.h b/include/linux/usb/tegra_usb_phy.h
index 34e6355a15e3..f03e157abaa8 100644
--- a/include/linux/usb/tegra_usb_phy.h
+++ b/include/linux/usb/tegra_usb_phy.h
@@ -59,6 +59,7 @@ struct tegra_usb_phy {
 	struct usb_phy *ulpi;
 	struct usb_phy u_phy;
 	struct device *dev;
+	bool is_legacy_phy;
 };
 
 struct tegra_usb_phy *tegra_usb_phy_open(struct device *dev, int instance,

commit 5e18150a7b4139e15e1ed7d7c938dd91f7f12354
Author: Venu Byravarasu <vbyravarasu@nvidia.com>
Date:   Tue Jan 15 15:49:30 2013 +0530

    usb: phy: remove unused APIs from Tegra PHY.
    
    As tegra_usb_phy_clk_disable/enable() are not being
    used, removing them.
    
    Signed-off-by: Venu Byravarasu <vbyravarasu@nvidia.com>
    Signed-off-by: Stephen Warren <swarren@nvidia.com>

diff --git a/include/linux/usb/tegra_usb_phy.h b/include/linux/usb/tegra_usb_phy.h
index 176b1ca06ae4..34e6355a15e3 100644
--- a/include/linux/usb/tegra_usb_phy.h
+++ b/include/linux/usb/tegra_usb_phy.h
@@ -64,10 +64,6 @@ struct tegra_usb_phy {
 struct tegra_usb_phy *tegra_usb_phy_open(struct device *dev, int instance,
 	void __iomem *regs, void *config, enum tegra_usb_phy_mode phy_mode);
 
-void tegra_usb_phy_clk_disable(struct tegra_usb_phy *phy);
-
-void tegra_usb_phy_clk_enable(struct tegra_usb_phy *phy);
-
 void tegra_usb_phy_preresume(struct tegra_usb_phy *phy);
 
 void tegra_usb_phy_postresume(struct tegra_usb_phy *phy);

commit 1ba8216f0bc02af6ba70d1108d60eb1b064395e4
Author: Venu Byravarasu <vbyravarasu@nvidia.com>
Date:   Wed Sep 5 18:50:23 2012 +0530

    usb: move phy driver from mach-tegra to drivers/usb
    
    As part of this patch:
            1. Moved existing tegra phy driver to drivers/USB directory.
            2. Added standard USB phy driver APIs to tegra phy driver.
    
    Signed-off-by: Venu Byravarasu <vbyravarasu@nvidia.com>
    Tested-by: Stephen Warren <swarren@nvidia.com>
    Signed-off-by: Felipe Balbi <balbi@ti.com>

diff --git a/include/linux/usb/tegra_usb_phy.h b/include/linux/usb/tegra_usb_phy.h
new file mode 100644
index 000000000000..176b1ca06ae4
--- /dev/null
+++ b/include/linux/usb/tegra_usb_phy.h
@@ -0,0 +1,80 @@
+/*
+ * Copyright (C) 2010 Google, Inc.
+ *
+ * This software is licensed under the terms of the GNU General Public
+ * License version 2, as published by the Free Software Foundation, and
+ * may be copied, distributed, and modified under those terms.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ */
+
+#ifndef __TEGRA_USB_PHY_H
+#define __TEGRA_USB_PHY_H
+
+#include <linux/clk.h>
+#include <linux/usb/otg.h>
+
+struct tegra_utmip_config {
+	u8 hssync_start_delay;
+	u8 elastic_limit;
+	u8 idle_wait_delay;
+	u8 term_range_adj;
+	u8 xcvr_setup;
+	u8 xcvr_lsfslew;
+	u8 xcvr_lsrslew;
+};
+
+struct tegra_ulpi_config {
+	int reset_gpio;
+	const char *clk;
+};
+
+enum tegra_usb_phy_port_speed {
+	TEGRA_USB_PHY_PORT_SPEED_FULL = 0,
+	TEGRA_USB_PHY_PORT_SPEED_LOW,
+	TEGRA_USB_PHY_PORT_SPEED_HIGH,
+};
+
+enum tegra_usb_phy_mode {
+	TEGRA_USB_PHY_MODE_DEVICE,
+	TEGRA_USB_PHY_MODE_HOST,
+};
+
+struct tegra_xtal_freq;
+
+struct tegra_usb_phy {
+	int instance;
+	const struct tegra_xtal_freq *freq;
+	void __iomem *regs;
+	void __iomem *pad_regs;
+	struct clk *clk;
+	struct clk *pll_u;
+	struct clk *pad_clk;
+	enum tegra_usb_phy_mode mode;
+	void *config;
+	struct usb_phy *ulpi;
+	struct usb_phy u_phy;
+	struct device *dev;
+};
+
+struct tegra_usb_phy *tegra_usb_phy_open(struct device *dev, int instance,
+	void __iomem *regs, void *config, enum tegra_usb_phy_mode phy_mode);
+
+void tegra_usb_phy_clk_disable(struct tegra_usb_phy *phy);
+
+void tegra_usb_phy_clk_enable(struct tegra_usb_phy *phy);
+
+void tegra_usb_phy_preresume(struct tegra_usb_phy *phy);
+
+void tegra_usb_phy_postresume(struct tegra_usb_phy *phy);
+
+void tegra_ehci_phy_restore_start(struct tegra_usb_phy *phy,
+				 enum tegra_usb_phy_port_speed port_speed);
+
+void tegra_ehci_phy_restore_end(struct tegra_usb_phy *phy);
+
+#endif /* __TEGRA_USB_PHY_H */
