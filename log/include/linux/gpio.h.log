commit 046e14afb3561523efd0047c35c20793ae5f8848
Author: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
Date:   Wed Feb 5 15:43:36 2020 +0200

    gpio: Avoid kernel.h inclusion where it's possible
    
    Inclusion of kernel.h increases the mess with the header dependencies.
    Avoid kernel.h inclusion where it's possible.
    
    Besides that, clean up a bit other inclusions inside GPIO subsystem headers.
    It includes:
     - removal pin control bits (forward declaration and header) from linux/gpio.h
     - removal of.h from asm-generic/gpio.h
     - use of explicit headers in gpio/consumer.h
     - add FIXME note with regard to gpio.h inclusion in of_gpio,h
    
    Signed-off-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    Link: https://lore.kernel.org/r/20200205134336.20197-1-andriy.shevchenko@linux.intel.com
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>

diff --git a/include/linux/gpio.h b/include/linux/gpio.h
index 2157717c2136..008ad3ee56b7 100644
--- a/include/linux/gpio.h
+++ b/include/linux/gpio.h
@@ -102,11 +102,9 @@ void devm_gpio_free(struct device *dev, unsigned int gpio);
 #include <linux/kernel.h>
 #include <linux/types.h>
 #include <linux/bug.h>
-#include <linux/pinctrl/pinctrl.h>
 
 struct device;
 struct gpio_chip;
-struct pinctrl_dev;
 
 static inline bool gpio_is_valid(int number)
 {

commit 151a41014bff92f353263cadc051435dc9c3258e
Merge: ae0755b56da9 089cf7f6ecb2
Author: Linus Walleij <linus.walleij@linaro.org>
Date:   Thu Sep 5 11:40:54 2019 +0200

    Merge tag 'v5.3-rc7' into devel
    
    Linux 5.3-rc7

commit c7663fa2a6631e5dddc1b7b2ba2e905ddffaff90
Author: YueHaibing <yuehaibing@huawei.com>
Date:   Thu Aug 22 11:18:17 2019 +0800

    gpio: Move gpiochip_lock/unlock_as_irq to gpio/driver.h
    
    If CONFIG_GPIOLIB is not, gpiochip_lock/unlock_as_irq will
    conflict as this:
    
    In file included from sound/soc/codecs/wm5100.c:18:0:
    ./include/linux/gpio.h:224:19: error: static declaration of gpiochip_lock_as_irq follows non-static declaration
     static inline int gpiochip_lock_as_irq(struct gpio_chip *chip,
                       ^~~~~~~~~~~~~~~~~~~~
    In file included from sound/soc/codecs/wm5100.c:17:0:
    ./include/linux/gpio/driver.h:494:5: note: previous declaration of gpiochip_lock_as_irq was here
     int gpiochip_lock_as_irq(struct gpio_chip *chip, unsigned int offset);
         ^~~~~~~~~~~~~~~~~~~~
    In file included from sound/soc/codecs/wm5100.c:18:0:
    ./include/linux/gpio.h:231:20: error: static declaration of gpiochip_unlock_as_irq follows non-static declaration
     static inline void gpiochip_unlock_as_irq(struct gpio_chip *chip,
                        ^~~~~~~~~~~~~~~~~~~~~~
    In file included from sound/soc/codecs/wm5100.c:17:0:
    ./include/linux/gpio/driver.h:495:6: note: previous declaration of gpiochip_unlock_as_irq was here
     void gpiochip_unlock_as_irq(struct gpio_chip *chip, unsigned int offset);
         ^~~~~~~~~~~~~~~~~~~~~~
    
    Move them to gpio/driver.h and use CONFIG_GPIOLIB guard this.
    
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Fixes: d74be6dfea1b ("gpio: remove gpiod_lock/unlock_as_irq()")
    Signed-off-by: YueHaibing <yuehaibing@huawei.com>
    Link: https://lore.kernel.org/r/20190822031817.32888-1-yuehaibing@huawei.com
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>

diff --git a/include/linux/gpio.h b/include/linux/gpio.h
index 40915b461f18..d20e224804e6 100644
--- a/include/linux/gpio.h
+++ b/include/linux/gpio.h
@@ -221,19 +221,6 @@ static inline int gpio_to_irq(unsigned gpio)
 	return -EINVAL;
 }
 
-static inline int gpiochip_lock_as_irq(struct gpio_chip *chip,
-				       unsigned int offset)
-{
-	WARN_ON(1);
-	return -EINVAL;
-}
-
-static inline void gpiochip_unlock_as_irq(struct gpio_chip *chip,
-					  unsigned int offset)
-{
-	WARN_ON(1);
-}
-
 static inline int irq_to_gpio(unsigned irq)
 {
 	/* irq can never have been returned from gpio_to_irq() */

commit 68e03b85474a51ec1921b4d13204782594ef7223
Author: YueHaibing <yuehaibing@huawei.com>
Date:   Wed Jul 31 20:38:14 2019 +0800

    gpio: Fix build error of function redefinition
    
    when do randbuilding, I got this error:
    
    In file included from drivers/hwmon/pmbus/ucd9000.c:19:0:
    ./include/linux/gpio/driver.h:576:1: error: redefinition of gpiochip_add_pin_range
     gpiochip_add_pin_range(struct gpio_chip *chip, const char *pinctl_name,
     ^~~~~~~~~~~~~~~~~~~~~~
    In file included from drivers/hwmon/pmbus/ucd9000.c:18:0:
    ./include/linux/gpio.h:245:1: note: previous definition of gpiochip_add_pin_range was here
     gpiochip_add_pin_range(struct gpio_chip *chip, const char *pinctl_name,
     ^~~~~~~~~~~~~~~~~~~~~~
    
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Fixes: 964cb341882f ("gpio: move pincontrol calls to <linux/gpio/driver.h>")
    Signed-off-by: YueHaibing <yuehaibing@huawei.com>
    Link: https://lore.kernel.org/r/20190731123814.46624-1-yuehaibing@huawei.com
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>

diff --git a/include/linux/gpio.h b/include/linux/gpio.h
index 40915b461f18..f757a58191a6 100644
--- a/include/linux/gpio.h
+++ b/include/linux/gpio.h
@@ -241,30 +241,6 @@ static inline int irq_to_gpio(unsigned irq)
 	return -EINVAL;
 }
 
-static inline int
-gpiochip_add_pin_range(struct gpio_chip *chip, const char *pinctl_name,
-		       unsigned int gpio_offset, unsigned int pin_offset,
-		       unsigned int npins)
-{
-	WARN_ON(1);
-	return -EINVAL;
-}
-
-static inline int
-gpiochip_add_pingroup_range(struct gpio_chip *chip,
-			struct pinctrl_dev *pctldev,
-			unsigned int gpio_offset, const char *pin_group)
-{
-	WARN_ON(1);
-	return -EINVAL;
-}
-
-static inline void
-gpiochip_remove_pin_ranges(struct gpio_chip *chip)
-{
-	WARN_ON(1);
-}
-
 static inline int devm_gpio_request(struct device *dev, unsigned gpio,
 				    const char *label)
 {

commit d664c43958e0d9e0b34e23b6f8a8f4cf8ec61a2e
Author: Enrico Weigelt <info@metux.net>
Date:   Wed Jun 12 23:59:36 2019 +0200

    gpio: Fix build warnings on undefined struct pinctrl_dev
    
    This fixes the warnings:
    
    * include/linux/gpio.h:254:11: warning: 'struct pinctrl_dev' declared
      inside parameter list will not be visible outside of this definition
      or declaration
    * include/linux/gpio/driver.h:602:11: warning: 'struct pinctrl_dev'
      declared inside parameter list will not be visible outside of this
      definition or declaration
    
    Fixes: 78b99577b393 ("pinctrl: remove unused pin_is_valid()")
    Reported-by: kbuild test robot <lkp@intel.com>
    Signed-off-by: Enrico Weigelt <info@metux.net>
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>

diff --git a/include/linux/gpio.h b/include/linux/gpio.h
index 39745b8bdd65..40915b461f18 100644
--- a/include/linux/gpio.h
+++ b/include/linux/gpio.h
@@ -106,6 +106,7 @@ void devm_gpio_free(struct device *dev, unsigned int gpio);
 
 struct device;
 struct gpio_chip;
+struct pinctrl_dev;
 
 static inline bool gpio_is_valid(int number)
 {

commit 60a866685006bae0c3db20e4bae31887eb452ff1
Author: Mauro Carvalho Chehab <mchehab+samsung@kernel.org>
Date:   Tue Jun 26 06:49:08 2018 -0300

    gpio.h: fix location of gpio legacy documentation
    
    The location of this doc file was moved. Change its reference
    accordingly.
    
    Fixes: 7ee2c13080c9 ("Documentation: gpio: Move legacy documentation to driver-api")
    Signed-off-by: Mauro Carvalho Chehab <mchehab+samsung@kernel.org>
    Signed-off-by: Jonathan Corbet <corbet@lwn.net>

diff --git a/include/linux/gpio.h b/include/linux/gpio.h
index 91ed23468530..39745b8bdd65 100644
--- a/include/linux/gpio.h
+++ b/include/linux/gpio.h
@@ -14,7 +14,7 @@
 
 #include <linux/errno.h>
 
-/* see Documentation/gpio/gpio-legacy.txt */
+/* see Documentation/driver-api/gpio/legacy.rst */
 
 /* make these flag values available regardless of GPIO kconfig options */
 #define GPIOF_DIR_OUT	(0 << 0)

commit 56a46b6144e7311e2bf605755a168409ef527fc4
Author: Linus Walleij <linus.walleij@linaro.org>
Date:   Thu Nov 30 11:03:05 2017 +0100

    gpio: Clarify that <linux/gpio.h> is legacy
    
    It should be clear to developers that they should not include
    this file in new code.
    
    Suggested-by: Arnd Bergmann <arnd@arndb.de>
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>

diff --git a/include/linux/gpio.h b/include/linux/gpio.h
index 8ef7fc0ce0f0..91ed23468530 100644
--- a/include/linux/gpio.h
+++ b/include/linux/gpio.h
@@ -1,4 +1,14 @@
 /* SPDX-License-Identifier: GPL-2.0 */
+/*
+ * <linux/gpio.h>
+ *
+ * This is the LEGACY GPIO bulk include file, including legacy APIs. It is
+ * used for GPIO drivers still referencing the global GPIO numberspace,
+ * and should not be included in new code.
+ *
+ * If you're implementing a GPIO driver, only include <linux/gpio/driver.h>
+ * If you're implementing a GPIO consumer, only include <linux/gpio/consumer.h>
+ */
 #ifndef __LINUX_GPIO_H
 #define __LINUX_GPIO_H
 

commit b24413180f5600bcb3bb70fbed5cf186b60864bd
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Wed Nov 1 15:07:57 2017 +0100

    License cleanup: add SPDX GPL-2.0 license identifier to files with no license
    
    Many source files in the tree are missing licensing information, which
    makes it harder for compliance tools to determine the correct license.
    
    By default all files without license information are under the default
    license of the kernel, which is GPL version 2.
    
    Update the files which contain no license information with the 'GPL-2.0'
    SPDX license identifier.  The SPDX identifier is a legally binding
    shorthand, which can be used instead of the full boiler plate text.
    
    This patch is based on work done by Thomas Gleixner and Kate Stewart and
    Philippe Ombredanne.
    
    How this work was done:
    
    Patches were generated and checked against linux-4.14-rc6 for a subset of
    the use cases:
     - file had no licensing information it it.
     - file was a */uapi/* one with no licensing information in it,
     - file was a */uapi/* one with existing licensing information,
    
    Further patches will be generated in subsequent months to fix up cases
    where non-standard license headers were used, and references to license
    had to be inferred by heuristics based on keywords.
    
    The analysis to determine which SPDX License Identifier to be applied to
    a file was done in a spreadsheet of side by side results from of the
    output of two independent scanners (ScanCode & Windriver) producing SPDX
    tag:value files created by Philippe Ombredanne.  Philippe prepared the
    base worksheet, and did an initial spot review of a few 1000 files.
    
    The 4.13 kernel was the starting point of the analysis with 60,537 files
    assessed.  Kate Stewart did a file by file comparison of the scanner
    results in the spreadsheet to determine which SPDX license identifier(s)
    to be applied to the file. She confirmed any determination that was not
    immediately clear with lawyers working with the Linux Foundation.
    
    Criteria used to select files for SPDX license identifier tagging was:
     - Files considered eligible had to be source code files.
     - Make and config files were included as candidates if they contained >5
       lines of source
     - File already had some variant of a license header in it (even if <5
       lines).
    
    All documentation files were explicitly excluded.
    
    The following heuristics were used to determine which SPDX license
    identifiers to apply.
    
     - when both scanners couldn't find any license traces, file was
       considered to have no license information in it, and the top level
       COPYING file license applied.
    
       For non */uapi/* files that summary was:
    
       SPDX license identifier                            # files
       ---------------------------------------------------|-------
       GPL-2.0                                              11139
    
       and resulted in the first patch in this series.
    
       If that file was a */uapi/* path one, it was "GPL-2.0 WITH
       Linux-syscall-note" otherwise it was "GPL-2.0".  Results of that was:
    
       SPDX license identifier                            # files
       ---------------------------------------------------|-------
       GPL-2.0 WITH Linux-syscall-note                        930
    
       and resulted in the second patch in this series.
    
     - if a file had some form of licensing information in it, and was one
       of the */uapi/* ones, it was denoted with the Linux-syscall-note if
       any GPL family license was found in the file or had no licensing in
       it (per prior point).  Results summary:
    
       SPDX license identifier                            # files
       ---------------------------------------------------|------
       GPL-2.0 WITH Linux-syscall-note                       270
       GPL-2.0+ WITH Linux-syscall-note                      169
       ((GPL-2.0 WITH Linux-syscall-note) OR BSD-2-Clause)    21
       ((GPL-2.0 WITH Linux-syscall-note) OR BSD-3-Clause)    17
       LGPL-2.1+ WITH Linux-syscall-note                      15
       GPL-1.0+ WITH Linux-syscall-note                       14
       ((GPL-2.0+ WITH Linux-syscall-note) OR BSD-3-Clause)    5
       LGPL-2.0+ WITH Linux-syscall-note                       4
       LGPL-2.1 WITH Linux-syscall-note                        3
       ((GPL-2.0 WITH Linux-syscall-note) OR MIT)              3
       ((GPL-2.0 WITH Linux-syscall-note) AND MIT)             1
    
       and that resulted in the third patch in this series.
    
     - when the two scanners agreed on the detected license(s), that became
       the concluded license(s).
    
     - when there was disagreement between the two scanners (one detected a
       license but the other didn't, or they both detected different
       licenses) a manual inspection of the file occurred.
    
     - In most cases a manual inspection of the information in the file
       resulted in a clear resolution of the license that should apply (and
       which scanner probably needed to revisit its heuristics).
    
     - When it was not immediately clear, the license identifier was
       confirmed with lawyers working with the Linux Foundation.
    
     - If there was any question as to the appropriate license identifier,
       the file was flagged for further research and to be revisited later
       in time.
    
    In total, over 70 hours of logged manual review was done on the
    spreadsheet to determine the SPDX license identifiers to apply to the
    source files by Kate, Philippe, Thomas and, in some cases, confirmation
    by lawyers working with the Linux Foundation.
    
    Kate also obtained a third independent scan of the 4.13 code base from
    FOSSology, and compared selected files where the other two scanners
    disagreed against that SPDX file, to see if there was new insights.  The
    Windriver scanner is based on an older version of FOSSology in part, so
    they are related.
    
    Thomas did random spot checks in about 500 files from the spreadsheets
    for the uapi headers and agreed with SPDX license identifier in the
    files he inspected. For the non-uapi files Thomas did random spot checks
    in about 15000 files.
    
    In initial set of patches against 4.14-rc6, 3 files were found to have
    copy/paste license identifier errors, and have been fixed to reflect the
    correct identifier.
    
    Additionally Philippe spent 10 hours this week doing a detailed manual
    inspection and review of the 12,461 patched files from the initial patch
    version early this week with:
     - a full scancode scan run, collecting the matched texts, detected
       license ids and scores
     - reviewing anything where there was a license detected (about 500+
       files) to ensure that the applied SPDX license was correct
     - reviewing anything where there was no detection but the patch license
       was not GPL-2.0 WITH Linux-syscall-note to ensure that the applied
       SPDX license was correct
    
    This produced a worksheet with 20 files needing minor correction.  This
    worksheet was then exported into 3 different .csv files for the
    different types of files to be modified.
    
    These .csv files were then reviewed by Greg.  Thomas wrote a script to
    parse the csv files and add the proper SPDX tag to the file, in the
    format that the file expected.  This script was further refined by Greg
    based on the output to detect more types of files automatically and to
    distinguish between header and source .c files (which need different
    comment types.)  Finally Greg ran the script using the .csv files to
    generate the patches.
    
    Reviewed-by: Kate Stewart <kstewart@linuxfoundation.org>
    Reviewed-by: Philippe Ombredanne <pombredanne@nexb.com>
    Reviewed-by: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/include/linux/gpio.h b/include/linux/gpio.h
index d12b5d566e4b..8ef7fc0ce0f0 100644
--- a/include/linux/gpio.h
+++ b/include/linux/gpio.h
@@ -1,3 +1,4 @@
+/* SPDX-License-Identifier: GPL-2.0 */
 #ifndef __LINUX_GPIO_H
 #define __LINUX_GPIO_H
 

commit 166a85e44245d771bd7042f3ad72aa0e12bb53bd
Author: Johan Hovold <johan@kernel.org>
Date:   Mon May 4 17:10:33 2015 +0200

    gpio: remove gpiod_sysfs_set_active_low
    
    Remove gpiod_sysfs_set_active_low (and gpio_sysfs_set_active_low) which
    allowed code to change the polarity of a gpio line even after it had
    been exported through sysfs.
    
    Drivers should not care, and generally does not know, about gpio-line
    polarity which is a hardware feature that needs to be described by
    firmware.
    
    It is currently possible to define gpio-line polarity in device-tree and
    acpi firmware or using platform data. Userspace can also change the
    polarity through sysfs.
    
    Note that drivers using the legacy gpio interface could still use
    GPIOF_ACTIVE_LOW to change the polarity before exporting the gpio.
    
    There are no in-kernel users of this interface.
    
    Cc: Jonathan Corbet <corbet@lwn.net>
    Cc: Harry Wei <harryxiyou@gmail.com>
    Cc: Arnd Bergmann <arnd@arndb.de>
    Cc: linux-doc@vger.kernel.org
    Cc: linux-kernel@zh-kernel.org
    Cc: linux-arch@vger.kernel.org
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Reviewed-by: Alexandre Courbot <acourbot@nvidia.com>
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>

diff --git a/include/linux/gpio.h b/include/linux/gpio.h
index ab81339a8590..d12b5d566e4b 100644
--- a/include/linux/gpio.h
+++ b/include/linux/gpio.h
@@ -196,13 +196,6 @@ static inline int gpio_export_link(struct device *dev, const char *name,
 	return -EINVAL;
 }
 
-static inline int gpio_sysfs_set_active_low(unsigned gpio, int value)
-{
-	/* GPIO can never have been requested */
-	WARN_ON(1);
-	return -EINVAL;
-}
-
 static inline void gpio_unexport(unsigned gpio)
 {
 	/* GPIO can never have been exported */

commit e3a2e87893125bcd99bd7e1ddf9bfc421e492572
Author: Alexandre Courbot <acourbot@nvidia.com>
Date:   Thu Oct 23 17:27:07 2014 +0900

    gpio: rename gpio_lock_as_irq to gpiochip_lock_as_irq
    
    This function actually operates on a gpio_chip, so its prefix should
    reflect that fact for consistency with other functions defined in
    gpio/driver.h.
    
    Signed-off-by: Alexandre Courbot <acourbot@nvidia.com>
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>

diff --git a/include/linux/gpio.h b/include/linux/gpio.h
index 85aa5d0b9357..ab81339a8590 100644
--- a/include/linux/gpio.h
+++ b/include/linux/gpio.h
@@ -216,14 +216,15 @@ static inline int gpio_to_irq(unsigned gpio)
 	return -EINVAL;
 }
 
-static inline int gpio_lock_as_irq(struct gpio_chip *chip, unsigned int offset)
+static inline int gpiochip_lock_as_irq(struct gpio_chip *chip,
+				       unsigned int offset)
 {
 	WARN_ON(1);
 	return -EINVAL;
 }
 
-static inline void gpio_unlock_as_irq(struct gpio_chip *chip,
-				      unsigned int offset)
+static inline void gpiochip_unlock_as_irq(struct gpio_chip *chip,
+					  unsigned int offset)
 {
 	WARN_ON(1);
 }

commit d4263348f796f29546f90802177865dd4379dd0a
Merge: be873ac782f5 6d0abeca3242
Author: Jiri Kosina <jkosina@suse.cz>
Date:   Thu Feb 20 14:54:28 2014 +0100

    Merge branch 'master' into for-next

commit f7b370a3404484cf1c5c0fcda77f9d7d67b53cb5
Author: Richard Genoud <richard.genoud@gmail.com>
Date:   Tue Feb 11 17:25:35 2014 +0100

    gpio: update path to documentation
    
    Signed-off-by: Richard Genoud <richard.genoud@gmail.com>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>

diff --git a/include/linux/gpio.h b/include/linux/gpio.h
index 13dfd24d01ab..c177c48f60a2 100644
--- a/include/linux/gpio.h
+++ b/include/linux/gpio.h
@@ -3,7 +3,7 @@
 
 #include <linux/errno.h>
 
-/* see Documentation/gpio.txt */
+/* see Documentation/gpio/gpio-legacy.txt */
 
 /* make these flag values available regardless of GPIO kconfig options */
 #define GPIOF_DIR_OUT	(0 << 0)

commit 2ebac4f8ba4868cea7e18eebb13a759d38b5596f
Author: Vishwanathrao Badarkhe, Manish <manishv.b@ti.com>
Date:   Tue Nov 19 18:02:42 2013 +0530

    gpio: Remove duplicate include of errno.h
    
    Currently, code include errno.h twice. Remove one inclusion
    of errno.h
    
    Signed-off-by: Vishwanathrao Badarkhe, Manish <manishv.b@ti.com>
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>

diff --git a/include/linux/gpio.h b/include/linux/gpio.h
index 13dfd24d01ab..b581b13d29d9 100644
--- a/include/linux/gpio.h
+++ b/include/linux/gpio.h
@@ -90,7 +90,6 @@ void devm_gpio_free(struct device *dev, unsigned int gpio);
 
 #include <linux/kernel.h>
 #include <linux/types.h>
-#include <linux/errno.h>
 #include <linux/bug.h>
 #include <linux/pinctrl/pinctrl.h>
 

commit c2d33069915d1f9b3b1dcc2199af11d4e072b037
Merge: 8a5dc585d500 993571273275
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Tue Nov 12 15:50:46 2013 +0900

    Merge tag 'gpio-v3.13-1' of git://git.kernel.org/pub/scm/linux/kernel/git/linusw/linux-gpio
    
    Pull GPIO changes from Linus Walleij:
     "Here is the bulk of GPIO changes for the v3.13 development cycle.
    
      I've got ACKs for the things that affect other subsystems (or it's my
      own subsystem, like pinctrl).  Most of that pertain to an attempt from
      my side to consolidate and get rid of custom GPIO implementations in
      the ARM tree.  I will continue doing this.
    
      The main change this time is the new GPIO descriptor API, background
      for this can be found in Corbet's summary from this january in LWN:
    
        http://lwn.net/Articles/533632/
    
      Summary:
    
       - Merged the GPIO descriptor API from Alexandre Courbot.  This is a
         first step toward trying to get rid of the global GPIO numberspace
         for the future.
    
       - Add an API so that driver can flag that a certain GPIO line is
         being used by a irqchip backend for generating IRQs, so that we can
         enforce checks, like not allowing users to switch that line to an
         output at runtime, since this makes no sense.  Implemented
         corresponding calls in a few select drivers.
    
       - ACPI GPIO cleanups, refactorings and switch to using the
         descriptor-based interface.
    
       - Support for the TPS80036 Palmas GPIO variant.
    
       - A new driver for the Broadcom Kona GPIO SoC IP block.
    
       - Device tree support for the PCF857x driver.
    
       - A set of ARM GPIO refactorings with the goal of getting rid of a
         bunch of custom GPIO implementations from the arch/arm/* tree:
    
         * Move the IOP GPIO driver to the GPIO subsystem and fix all users
           to use the gpiolib API for accessing GPIOs.  Delete the old
           custom GPIO implementation.
    
         * Delete the unused custom PXA GPIO implemention.
    
         * Convert all users of the IXP4 custom GPIO implementation to use
           gpiolib and delete the custom implementation.
    
         * Delete the custom Gemini GPIO implementation, also completely
           unused.
    
       - Various cleanups and renamings"
    
    * tag 'gpio-v3.13-1' of git://git.kernel.org/pub/scm/linux/kernel/git/linusw/linux-gpio: (85 commits)
      gpio: gpio-mxs: Remove unneeded dt checks
      gpio: pl061: don't depend on CONFIG_ARM
      gpio: bcm-kona: add missing .owner to struct gpio_chip
      gpiolib: provide a declaration of seq_file in gpio/driver.h
      gpiolib: include gpio/consumer.h in of_gpio.h for desc_to_gpio()
      gpio: provide stubs for devres gpio functions
      gpiolib: devres: add missing headers
      gpiolib: make GPIO_DEVRES depend on GPIOLIB
      gpiolib: devres: fix devm_gpiod_get_index()
      gpiolib / ACPI: document the GPIO descriptor based interface
      gpiolib / ACPI: allow passing GPIOF_ACTIVE_LOW for GpioInt resources
      gpiolib / ACPI: add ACPI support for gpiod_get_index()
      gpiolib / ACPI: convert to gpiod interfaces
      gpiolib: add gpiod_get() and gpiod_put() functions
      gpiolib: port of_ functions to use gpiod
      gpiolib: export descriptor-based GPIO interface
      Fixup "MAINTAINERS: GPIO-INTEL-MID: add maintainer"
      gpio: bcm281xx: Don't print addresses of GPIO area in probe()
      gpio: tegra: use new gpio_lock_as_irq() API
      gpio: rcar: Include linux/of.h header
      ...

commit 403c1d0be5ccbd750d25c59d8358843a81e52e3b
Author: Linus Walleij <linus.walleij@linaro.org>
Date:   Fri Oct 25 12:59:05 2013 +0200

    gpio: provide stubs for devres gpio functions
    
    commit 6b3d8145dcfdbbb43f13544e16f44f4574f941dd
    "gpiolib: make GPIO_DEVRES depend on GPIOLIB"
    breaks builds when device drivers are using devm_gpio*
    devres functions without enabling GPIOLIB, relying on
    the devres code to be compiled anyway.
    
    Provide stubs so that we get these if we're using the
    devres functions without GPIOLIB.
    
    Reported-by: Fengguang Wu <fengguang.wu@intel.com>
    Cc: Alexandre Courbot <acourbot@nvidia.com>
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>

diff --git a/include/linux/gpio.h b/include/linux/gpio.h
index c691df044458..0c56b9e9c209 100644
--- a/include/linux/gpio.h
+++ b/include/linux/gpio.h
@@ -77,6 +77,15 @@ static inline int irq_to_gpio(unsigned int irq)
 
 #endif /* ! CONFIG_ARCH_HAVE_CUSTOM_GPIO_H */
 
+/* CONFIG_GPIOLIB: bindings for managed devices that want to request gpios */
+
+struct device;
+
+int devm_gpio_request(struct device *dev, unsigned gpio, const char *label);
+int devm_gpio_request_one(struct device *dev, unsigned gpio,
+			  unsigned long flags, const char *label);
+void devm_gpio_free(struct device *dev, unsigned int gpio);
+
 #else /* ! CONFIG_GPIOLIB */
 
 #include <linux/kernel.h>
@@ -241,14 +250,25 @@ gpiochip_remove_pin_ranges(struct gpio_chip *chip)
 	WARN_ON(1);
 }
 
-#endif /* ! CONFIG_GPIOLIB */
+static inline int devm_gpio_request(struct device *dev, unsigned gpio,
+				    const char *label)
+{
+	WARN_ON(1);
+	return -EINVAL;
+}
 
-struct device;
+static inline int devm_gpio_request_one(struct device *dev, unsigned gpio,
+					unsigned long flags, const char *label)
+{
+	WARN_ON(1);
+	return -EINVAL;
+}
 
-/* bindings for managed devices that want to request gpios */
-int devm_gpio_request(struct device *dev, unsigned gpio, const char *label);
-int devm_gpio_request_one(struct device *dev, unsigned gpio,
-			  unsigned long flags, const char *label);
-void devm_gpio_free(struct device *dev, unsigned int gpio);
+static inline void devm_gpio_free(struct device *dev, unsigned int gpio)
+{
+	WARN_ON(1);
+}
+
+#endif /* ! CONFIG_GPIOLIB */
 
 #endif /* __LINUX_GPIO_H */

commit 79a9becda8940deb2274b5aa4577c86d52ee7ecb
Author: Alexandre Courbot <acourbot@nvidia.com>
Date:   Thu Oct 17 10:21:36 2013 -0700

    gpiolib: export descriptor-based GPIO interface
    
    This patch exports the gpiod_* family of API functions, a safer
    alternative to the legacy GPIO interface. Differences between the gpiod
    and legacy gpio APIs are:
    
    - gpio works with integers, whereas gpiod operates on opaque handlers
      which cannot be forged or used before proper acquisition
    - gpiod get/set functions are aware of the active low state of a GPIO
    - gpio consumers should now include <linux/gpio/consumer.h> to access
      the new interface, whereas chips drivers will use
      <linux/gpio/driver.h>
    
    The legacy gpio API is now built as inline functions on top of gpiod.
    
    Signed-off-by: Alexandre Courbot <acourbot@nvidia.com>
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>

diff --git a/include/linux/gpio.h b/include/linux/gpio.h
index a06ec3e85ba3..c691df044458 100644
--- a/include/linux/gpio.h
+++ b/include/linux/gpio.h
@@ -16,14 +16,17 @@
 #define GPIOF_OUT_INIT_LOW	(GPIOF_DIR_OUT | GPIOF_INIT_LOW)
 #define GPIOF_OUT_INIT_HIGH	(GPIOF_DIR_OUT | GPIOF_INIT_HIGH)
 
+/* Gpio pin is active-low */
+#define GPIOF_ACTIVE_LOW        (1 << 2)
+
 /* Gpio pin is open drain */
-#define GPIOF_OPEN_DRAIN	(1 << 2)
+#define GPIOF_OPEN_DRAIN	(1 << 3)
 
 /* Gpio pin is open source */
-#define GPIOF_OPEN_SOURCE	(1 << 3)
+#define GPIOF_OPEN_SOURCE	(1 << 4)
 
-#define GPIOF_EXPORT		(1 << 4)
-#define GPIOF_EXPORT_CHANGEABLE	(1 << 5)
+#define GPIOF_EXPORT		(1 << 5)
+#define GPIOF_EXPORT_CHANGEABLE	(1 << 6)
 #define GPIOF_EXPORT_DIR_FIXED	(GPIOF_EXPORT)
 #define GPIOF_EXPORT_DIR_CHANGEABLE (GPIOF_EXPORT | GPIOF_EXPORT_CHANGEABLE)
 

commit 586a87e6edc936d6d3c3585af504b33b9c3f0a06
Author: Christian Ruppert <christian.ruppert@abilis.com>
Date:   Tue Oct 15 15:37:54 2013 +0200

    pinctrl/gpio: non-linear GPIO ranges accesible from gpiolib
    
    This patch adds the infrastructure required to register non-linear gpio
    ranges through gpiolib and the standard GPIO device tree bindings.
    
    Signed-off-by: Christian Ruppert <christian.ruppert@abilis.com>
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>

diff --git a/include/linux/gpio.h b/include/linux/gpio.h
index 552e3f46e4a3..b8d0e53a802f 100644
--- a/include/linux/gpio.h
+++ b/include/linux/gpio.h
@@ -80,6 +80,7 @@ static inline int irq_to_gpio(unsigned int irq)
 #include <linux/types.h>
 #include <linux/errno.h>
 #include <linux/bug.h>
+#include <linux/pinctrl/pinctrl.h>
 
 struct device;
 struct gpio_chip;
@@ -220,6 +221,15 @@ gpiochip_add_pin_range(struct gpio_chip *chip, const char *pinctl_name,
 	return -EINVAL;
 }
 
+static inline int
+gpiochip_add_pingroup_range(struct gpio_chip *chip,
+			struct pinctrl_dev *pctldev,
+			unsigned int gpio_offset, const char *pin_group)
+{
+	WARN_ON(1);
+	return -EINVAL;
+}
+
 static inline void
 gpiochip_remove_pin_ranges(struct gpio_chip *chip)
 {

commit d468bf9ecaabd3bf3a6134e5a369ced82b1d1ca1
Author: Linus Walleij <linus.walleij@linaro.org>
Date:   Tue Sep 24 11:54:38 2013 +0200

    gpio: add API to be strict about GPIO IRQ usage
    
    It is currently often possible in many GPIO drivers to request
    a GPIO line to be used as IRQ after calling gpio_to_irq() and,
    as the gpiolib is not aware of this, set the same line to
    output and start driving it, with undesired side effects.
    
    As it is a bogus usage scenario to request a line flagged as
    output to used as IRQ, we introduce APIs to let gpiolib track
    the use of a line as IRQ, and also set this flag from the
    userspace ABI.
    
    The API is symmetric so that lines can also be flagged from
    .irq_enable() and unflagged from IRQ by .irq_disable().
    The debugfs file is altered so that we see if a line is
    reserved for IRQ.
    
    Cc: Enric Balletbo i Serra <eballetbo@gmail.com>
    Cc: Grant Likely <grant.likely@linaro.org>
    Cc: Jean-Christophe PLAGNIOL-VILLARD <plagnioj@jcrosoft.com>
    Cc: Santosh Shilimkar <santosh.shilimkar@ti.com>
    Acked-by: Alexandre Courbot <acourbot@nvidia.com>
    Reviewed-by: Stephen Warren <swarren@nvidia.com>
    Reviewed-by: Javier Martinez Canillas <javier.martinez@collabora.co.uk>
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>

diff --git a/include/linux/gpio.h b/include/linux/gpio.h
index 552e3f46e4a3..a06ec3e85ba3 100644
--- a/include/linux/gpio.h
+++ b/include/linux/gpio.h
@@ -204,6 +204,18 @@ static inline int gpio_to_irq(unsigned gpio)
 	return -EINVAL;
 }
 
+static inline int gpio_lock_as_irq(struct gpio_chip *chip, unsigned int offset)
+{
+	WARN_ON(1);
+	return -EINVAL;
+}
+
+static inline void gpio_unlock_as_irq(struct gpio_chip *chip,
+				      unsigned int offset)
+{
+	WARN_ON(1);
+}
+
 static inline int irq_to_gpio(unsigned irq)
 {
 	/* irq can never have been returned from gpio_to_irq() */

commit 76ec9d18b8972f1b228f819f6126c9f022b3e642
Author: Alexandre Courbot <acourbot@nvidia.com>
Date:   Thu Mar 28 04:34:56 2013 -0700

    Convert selectors of GENERIC_GPIO to GPIOLIB
    
    GENERIC_GPIO is now equivalent to GPIOLIB and features that depended on
    GENERIC_GPIO can now depend on GPIOLIB to allow removal of this option.
    
    Signed-off-by: Alexandre Courbot <acourbot@nvidia.com>
    Acked-by: Linus Walleij <linus.walleij@linaro.org>
    Acked-by: Grant Likely <grant.likely@secretlab.ca>

diff --git a/include/linux/gpio.h b/include/linux/gpio.h
index f6c7ae3e223b..552e3f46e4a3 100644
--- a/include/linux/gpio.h
+++ b/include/linux/gpio.h
@@ -39,7 +39,7 @@ struct gpio {
 	const char	*label;
 };
 
-#ifdef CONFIG_GENERIC_GPIO
+#ifdef CONFIG_GPIOLIB
 
 #ifdef CONFIG_ARCH_HAVE_CUSTOM_GPIO_H
 #include <asm/gpio.h>
@@ -74,7 +74,7 @@ static inline int irq_to_gpio(unsigned int irq)
 
 #endif /* ! CONFIG_ARCH_HAVE_CUSTOM_GPIO_H */
 
-#else /* ! CONFIG_GENERIC_GPIO */
+#else /* ! CONFIG_GPIOLIB */
 
 #include <linux/kernel.h>
 #include <linux/types.h>
@@ -226,7 +226,7 @@ gpiochip_remove_pin_ranges(struct gpio_chip *chip)
 	WARN_ON(1);
 }
 
-#endif /* ! CONFIG_GENERIC_GPIO */
+#endif /* ! CONFIG_GPIOLIB */
 
 struct device;
 

commit 6a89a314ab107a12af08c71420c19a37a30fc2d3
Author: Shawn Guo <shawn.guo@linaro.org>
Date:   Fri Jan 18 15:57:46 2013 +0800

    gpio: devm_gpio_* support should not depend on GPIOLIB
    
    Some architectures (e.g. blackfin) provide gpio API without requiring
    GPIOLIB support (ARCH_WANT_OPTIONAL_GPIOLIB).  devm_gpio_* functions
    should also work for these architectures, since they do not really
    depend on GPIOLIB.
    
    Add a new option GPIO_DEVRES (enabled by default) to control the build
    of devres.c.  It also removes the empty version of devm_gpio_*
    functions for !GENERIC_GPIO build from linux/gpio.h, and moves the
    function declarations from asm-generic/gpio.h into linux/gpio.h.
    
    Signed-off-by: Shawn Guo <shawn.guo@linaro.org>
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>

diff --git a/include/linux/gpio.h b/include/linux/gpio.h
index bfe665621536..f6c7ae3e223b 100644
--- a/include/linux/gpio.h
+++ b/include/linux/gpio.h
@@ -94,24 +94,12 @@ static inline int gpio_request(unsigned gpio, const char *label)
 	return -ENOSYS;
 }
 
-static inline int devm_gpio_request(struct device *dev, unsigned gpio,
-				    const char *label)
-{
-	return -ENOSYS;
-}
-
 static inline int gpio_request_one(unsigned gpio,
 					unsigned long flags, const char *label)
 {
 	return -ENOSYS;
 }
 
-static inline int devm_gpio_request_one(struct device *dev, unsigned gpio,
-					unsigned long flags, const char *label)
-{
-	return -ENOSYS;
-}
-
 static inline int gpio_request_array(const struct gpio *array, size_t num)
 {
 	return -ENOSYS;
@@ -125,14 +113,6 @@ static inline void gpio_free(unsigned gpio)
 	WARN_ON(1);
 }
 
-static inline void devm_gpio_free(struct device *dev, unsigned gpio)
-{
-	might_sleep();
-
-	/* GPIO can never have been requested */
-	WARN_ON(1);
-}
-
 static inline void gpio_free_array(const struct gpio *array, size_t num)
 {
 	might_sleep();
@@ -248,4 +228,12 @@ gpiochip_remove_pin_ranges(struct gpio_chip *chip)
 
 #endif /* ! CONFIG_GENERIC_GPIO */
 
+struct device;
+
+/* bindings for managed devices that want to request gpios */
+int devm_gpio_request(struct device *dev, unsigned gpio, const char *label);
+int devm_gpio_request_one(struct device *dev, unsigned gpio,
+			  unsigned long flags, const char *label);
+void devm_gpio_free(struct device *dev, unsigned int gpio);
+
 #endif /* __LINUX_GPIO_H */

commit 316511c0134acec8f4ea730bd1897c7a1124a7c1
Author: Linus Walleij <linus.walleij@linaro.org>
Date:   Wed Nov 21 08:48:09 2012 +0100

    gpiolib: rename pin range arguments
    
    To be crystal clear on what the arguments mean in this
    funtion dealing with both GPIO and PIN ranges with confusing
    naming, we now have gpio_offset and pin_offset and we are
    on the clear that these are offsets into the specific GPIO
    and pin controller respectively. The GPIO chip itself will
    of course keep track of the base offset into the global
    GPIO number space.
    
    Reviewed-by: Viresh Kumar <viresh.kumar@linaro.org>
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>

diff --git a/include/linux/gpio.h b/include/linux/gpio.h
index 99861c65dd8b..bfe665621536 100644
--- a/include/linux/gpio.h
+++ b/include/linux/gpio.h
@@ -233,7 +233,7 @@ static inline int irq_to_gpio(unsigned irq)
 
 static inline int
 gpiochip_add_pin_range(struct gpio_chip *chip, const char *pinctl_name,
-		       unsigned int offset, unsigned int pin_base,
+		       unsigned int gpio_offset, unsigned int pin_offset,
 		       unsigned int npins)
 {
 	WARN_ON(1);

commit 3f0f8670608766ef26a178d4e80cad3ce030fecc
Author: Linus Walleij <linus.walleij@linaro.org>
Date:   Tue Nov 20 12:40:15 2012 +0100

    gpiolib: let gpiochip_add_pin_range() specify offset
    
    Like with commit 3c739ad0df5eb41cd7adad879eda6aa09879eb76
    it is not always enough to specify all the pins of a gpio_chip
    from offset zero to be added to a pin map range, since the
    mapping from GPIO to pin controller may not be linear at all,
    but need to be broken into a few consecutive sub-ranges or
    1-pin entries for complicated cases. The ranges may also be
    sparse.
    
    This alters the signature of the function to accept offsets
    into both the GPIO-chip local pinspace and the pin controller
    local pinspace.
    
    Reviewed-by: Stephen Warren <swarren@nvidia.com>
    Reviewed-by: Viresh Kumar <viresh.kumar@linaro.org>
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>

diff --git a/include/linux/gpio.h b/include/linux/gpio.h
index 7ba2762abbc9..99861c65dd8b 100644
--- a/include/linux/gpio.h
+++ b/include/linux/gpio.h
@@ -233,7 +233,8 @@ static inline int irq_to_gpio(unsigned irq)
 
 static inline int
 gpiochip_add_pin_range(struct gpio_chip *chip, const char *pinctl_name,
-		       unsigned int pin_base, unsigned int npins)
+		       unsigned int offset, unsigned int pin_base,
+		       unsigned int npins)
 {
 	WARN_ON(1);
 	return -EINVAL;

commit 50309a9c2e576ac4ad29e30f5854acb87bdc2ac4
Author: Linus Walleij <linus.walleij@linaro.org>
Date:   Tue Nov 6 17:16:39 2012 +0100

    gpiolib: iron out include ladder mistakes
    
    The <*/gpio.h> includes are updated again: now we need to account
    for the problem introduced by commit:
    595679a8038584df7b9398bf34f61db3c038bfea
    "gpiolib: fix up function prototypes etc"
    
    Actually we need static inlines in include/asm-generic/gpio.h
    as well since we may have GPIOLIB but not PINCTRL.
    Make sure to move all the CONFIG_PINCTRL business
    to the end of the file so we are sure we have
    declared struct gpio_chip.
    
    And we need to keep the static inlines in <linux/gpio.h>
    but here for the !CONFIG_GENERIC_GPIO case, and then we
    may as well throw in a few warnings like the other
    prototypes there, if someone would have the bad taste
    of compiling without GENERIC_GPIO even.
    
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>

diff --git a/include/linux/gpio.h b/include/linux/gpio.h
index 81bbfe5b5de6..7ba2762abbc9 100644
--- a/include/linux/gpio.h
+++ b/include/linux/gpio.h
@@ -231,21 +231,20 @@ static inline int irq_to_gpio(unsigned irq)
 	return -EINVAL;
 }
 
-#ifdef CONFIG_PINCTRL
-
 static inline int
 gpiochip_add_pin_range(struct gpio_chip *chip, const char *pinctl_name,
 		       unsigned int pin_base, unsigned int npins)
 {
+	WARN_ON(1);
+	return -EINVAL;
 }
 
 static inline void
 gpiochip_remove_pin_ranges(struct gpio_chip *chip)
 {
+	WARN_ON(1);
 }
 
-#endif /* CONFIG_PINCTRL */
-
 #endif /* ! CONFIG_GENERIC_GPIO */
 
 #endif /* __LINUX_GPIO_H */

commit 1e63d7b9363f0c57d00991f9f2e0af374dfc591a
Author: Linus Walleij <linus.walleij@linaro.org>
Date:   Tue Nov 6 16:03:35 2012 +0100

    gpiolib: separation of pin concerns
    
    The fact that of_gpiochip_add_pin_range() and
    gpiochip_add_pin_range() share too much code is fragile and
    will invariably mean that bugs need to be fixed in two places
    instead of one.
    
    So separate the concerns of gpiolib.c and gpiolib-of.c and
    have the latter call the former as back-end. This is necessary
    also when going forward with other device descriptions such
    as ACPI.
    
    This is done by:
    
    - Adding a return code to gpiochip_add_pin_range() so we can
      reliably check whether this succeeds.
    
    - Get rid of the custom of_pinctrl_add_gpio_range() from
      pinctrl. Instead create of_pinctrl_get() to just retrive the
      pin controller per se from an OF node. This composite
      function was just begging to be deleted, it was way to
      purpose-specific.
    
    - Use pinctrl_dev_get_name() to get the name of the retrieved
      pin controller and use that to call back into the generic
      gpiochip_add_pin_range().
    
    Now the pin range is only allocated and tied to a pin
    controller from the core implementation in gpiolib.c.
    
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>

diff --git a/include/linux/gpio.h b/include/linux/gpio.h
index 21d28b930dc7..81bbfe5b5de6 100644
--- a/include/linux/gpio.h
+++ b/include/linux/gpio.h
@@ -233,7 +233,7 @@ static inline int irq_to_gpio(unsigned irq)
 
 #ifdef CONFIG_PINCTRL
 
-static inline void
+static inline int
 gpiochip_add_pin_range(struct gpio_chip *chip, const char *pinctl_name,
 		       unsigned int pin_base, unsigned int npins)
 {

commit 165adc9c1734a3f3bdbc6dc7c7a29bbefb424006
Author: Linus Walleij <linus.walleij@linaro.org>
Date:   Tue Nov 6 14:49:39 2012 +0100

    gpiolib: fix up function prototypes etc
    
    Commit 69e1601bca88809dc118abd1becb02c15a02ec71
    "gpiolib: provide provision to register pin ranges"
    
    Got most of it's function prototypes wrong, so fix this up by:
    
    - Moving the void declarations into static inlines in
      <linux/gpio.h> (previously the actual prototypes were declared
      here...)
    
    - Declare the gpiochip_add_pin_range() and
      gpiochip_remove_pin_ranges() functions in <asm-generic/gpio.h>
      together with the pin range struct declaration itself.
    
    - Actually only implement these very functions in gpiolib.c
      if CONFIG_PINCTRL is set.
    
    - Additionally export the symbols since modules will need to
      be able to do this.
    
    Reviewed-by: Stephen Warren <swarren@nvidia.com>
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>

diff --git a/include/linux/gpio.h b/include/linux/gpio.h
index a28445992b7f..21d28b930dc7 100644
--- a/include/linux/gpio.h
+++ b/include/linux/gpio.h
@@ -72,9 +72,9 @@ static inline int irq_to_gpio(unsigned int irq)
 	return -EINVAL;
 }
 
-#endif
+#endif /* ! CONFIG_ARCH_HAVE_CUSTOM_GPIO_H */
 
-#else
+#else /* ! CONFIG_GENERIC_GPIO */
 
 #include <linux/kernel.h>
 #include <linux/types.h>
@@ -231,9 +231,21 @@ static inline int irq_to_gpio(unsigned irq)
 	return -EINVAL;
 }
 
-void gpiochip_add_pin_range(struct gpio_chip *chip, const char *pinctl_name,
-		unsigned int pin_base, unsigned int npins);
-void gpiochip_remove_pin_ranges(struct gpio_chip *chip);
-#endif
+#ifdef CONFIG_PINCTRL
+
+static inline void
+gpiochip_add_pin_range(struct gpio_chip *chip, const char *pinctl_name,
+		       unsigned int pin_base, unsigned int npins)
+{
+}
+
+static inline void
+gpiochip_remove_pin_ranges(struct gpio_chip *chip)
+{
+}
+
+#endif /* CONFIG_PINCTRL */
+
+#endif /* ! CONFIG_GENERIC_GPIO */
 
 #endif /* __LINUX_GPIO_H */

commit f23f1516b6757c326cc638bed8c402c77e2a596e
Author: Shiraz Hashim <shiraz.hashim@st.com>
Date:   Sat Oct 27 15:21:36 2012 +0530

    gpiolib: provide provision to register pin ranges
    
    pinctrl subsystem needs gpio chip base to prepare set of gpio
    pin ranges, which a given pinctrl driver can handle. This is
    important to handle pinctrl gpio request calls in order to
    program a given pin properly for gpio operation.
    
    As gpio base is allocated dynamically during gpiochip
    registration, presently there exists no clean way to pass this
    information to the pinctrl subsystem.
    
    After few discussions from [1], it was concluded that may be
    gpio controller reporting the pin range it supports, is a
    better way than pinctrl subsystem directly registering it.
    
    [1] http://comments.gmane.org/gmane.linux.ports.arm.kernel/184816
    
    Cc: Grant Likely <grant.likely@secretlab.ca>
    Signed-off-by: Viresh Kumar <viresh.kumar@linaro.org>
    Signed-off-by: Shiraz Hashim <shiraz.hashim@st.com>
    [Edited documentation a bit]
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>

diff --git a/include/linux/gpio.h b/include/linux/gpio.h
index 2e31e8b3a190..a28445992b7f 100644
--- a/include/linux/gpio.h
+++ b/include/linux/gpio.h
@@ -231,6 +231,9 @@ static inline int irq_to_gpio(unsigned irq)
 	return -EINVAL;
 }
 
+void gpiochip_add_pin_range(struct gpio_chip *chip, const char *pinctl_name,
+		unsigned int pin_base, unsigned int npins);
+void gpiochip_remove_pin_ranges(struct gpio_chip *chip);
 #endif
 
 #endif /* __LINUX_GPIO_H */

commit f567fde24640cf6f2d6416196bfc8b3fefc8e433
Author: Laxman Dewangan <ldewangan@nvidia.com>
Date:   Wed Jun 20 14:14:05 2012 +0530

    gpio: fix bits conflict for gpio flags
    
    The bit 2 and 3 in GPIO flag are allocated for the
    flag OPEN_DRAIN/OPEN_SOURCE. These bits are reused
    for the flag EXPORT/EXPORT_CHANGEABLE and so creating
    conflict.
    Fix this conflict by assigning bit 4 and 5 for the
    flag EXPORT/EXPORT_CHANGEABLE.
    
    Signed-off-by: Laxman Dewangan <ldewangan@nvidia.com>
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>

diff --git a/include/linux/gpio.h b/include/linux/gpio.h
index f07fc2d08159..2e31e8b3a190 100644
--- a/include/linux/gpio.h
+++ b/include/linux/gpio.h
@@ -22,8 +22,8 @@
 /* Gpio pin is open source */
 #define GPIOF_OPEN_SOURCE	(1 << 3)
 
-#define GPIOF_EXPORT		(1 << 2)
-#define GPIOF_EXPORT_CHANGEABLE	(1 << 3)
+#define GPIOF_EXPORT		(1 << 4)
+#define GPIOF_EXPORT_CHANGEABLE	(1 << 5)
 #define GPIOF_EXPORT_DIR_FIXED	(GPIOF_EXPORT)
 #define GPIOF_EXPORT_DIR_CHANGEABLE (GPIOF_EXPORT | GPIOF_EXPORT_CHANGEABLE)
 

commit 09d71ff19404b3957fab6de942fb8026ccfd8524
Author: Mark Brown <broonie@opensource.wolfsonmicro.com>
Date:   Wed May 2 12:46:46 2012 +0100

    gpiolib: Implement devm_gpio_request_one()
    
    Allow drivers to use the modern request and configure idiom together
    with devres.
    
    As with plain gpio_request() and gpio_request_one() we can't implement
    the old school version in terms of _one() as this would force the
    explicit selection of a direction in gpio_request() which could break
    systems if we pick the wrong one.  Implementing devm_gpio_request_one()
    in terms of devm_gpio_request() would needlessly complicate things or
    lead to duplication from the unmanaged version depending on how it's
    done.
    
    Signed-off-by: Mark Brown <broonie@opensource.wolfsonmicro.com>
    Acked-by: Linus Walleij <linus.walleij@linaro.org>
    Signed-off-by: Grant Likely <grant.likely@secretlab.ca>

diff --git a/include/linux/gpio.h b/include/linux/gpio.h
index 7a8816a1a0d8..f07fc2d08159 100644
--- a/include/linux/gpio.h
+++ b/include/linux/gpio.h
@@ -106,6 +106,12 @@ static inline int gpio_request_one(unsigned gpio,
 	return -ENOSYS;
 }
 
+static inline int devm_gpio_request_one(struct device *dev, unsigned gpio,
+					unsigned long flags, const char *label)
+{
+	return -ENOSYS;
+}
+
 static inline int gpio_request_array(const struct gpio *array, size_t num)
 {
 	return -ENOSYS;

commit 7563bbf89d065a2c3f05059ecbcc805645edcc62
Author: Mark Brown <broonie@opensource.wolfsonmicro.com>
Date:   Sun Apr 15 10:52:54 2012 +0100

    gpiolib/arches: Centralise bolierplate asm/gpio.h
    
    Rather than requiring architectures that use gpiolib but don't have any
    need to define anything custom to copy an asm/gpio.h provide a Kconfig
    symbol which architectures must select in order to include gpio.h and
    for other architectures just provide the trivial implementation directly.
    
    This makes it much easier to do gpiolib updates and is also a step towards
    making gpiolib APIs available on every architecture.
    
    For architectures with existing boilerplate code leave a stub header in
    place which warns on direct inclusion of asm/gpio.h and includes
    linux/gpio.h to catch code that's doing this.  Direct inclusion of
    asm/gpio.h has long been deprecated.
    
    Signed-off-by: Mark Brown <broonie@opensource.wolfsonmicro.com>
    Acked-by: Jonas Bonn <jonas@southpole.se>
    Acked-by: Tony Luck <tony.luck@intel.com>
    Acked-by: Linus Walleij <linus.walleij@linaro.org>
    Signed-off-by: Grant Likely <grant.likely@secretlab.ca>

diff --git a/include/linux/gpio.h b/include/linux/gpio.h
index d1890d46b6ce..7a8816a1a0d8 100644
--- a/include/linux/gpio.h
+++ b/include/linux/gpio.h
@@ -1,6 +1,8 @@
 #ifndef __LINUX_GPIO_H
 #define __LINUX_GPIO_H
 
+#include <linux/errno.h>
+
 /* see Documentation/gpio.txt */
 
 /* make these flag values available regardless of GPIO kconfig options */
@@ -38,7 +40,39 @@ struct gpio {
 };
 
 #ifdef CONFIG_GENERIC_GPIO
+
+#ifdef CONFIG_ARCH_HAVE_CUSTOM_GPIO_H
 #include <asm/gpio.h>
+#else
+
+#include <asm-generic/gpio.h>
+
+static inline int gpio_get_value(unsigned int gpio)
+{
+	return __gpio_get_value(gpio);
+}
+
+static inline void gpio_set_value(unsigned int gpio, int value)
+{
+	__gpio_set_value(gpio, value);
+}
+
+static inline int gpio_cansleep(unsigned int gpio)
+{
+	return __gpio_cansleep(gpio);
+}
+
+static inline int gpio_to_irq(unsigned int gpio)
+{
+	return __gpio_to_irq(gpio);
+}
+
+static inline int irq_to_gpio(unsigned int irq)
+{
+	return -EINVAL;
+}
+
+#endif
 
 #else
 

commit 2c96922ae3f0bfb7324a7a433d96d319fe6de729
Author: Mark Brown <broonie@opensource.wolfsonmicro.com>
Date:   Wed Apr 4 16:14:48 2012 +0100

    gpiolib: Add !CONFIG_GPIOLIB definitions of devm_ functions
    
    Currently the managed gpio_request() and gpio_free() are not stubbed out
    for configurations not using gpiolib - do that to aid use in drivers.
    
    Signed-off-by: Mark Brown <broonie@opensource.wolfsonmicro.com>
    Signed-off-by: Grant Likely <grant.likely@secretlab.ca>

diff --git a/include/linux/gpio.h b/include/linux/gpio.h
index af511a682925..d1890d46b6ce 100644
--- a/include/linux/gpio.h
+++ b/include/linux/gpio.h
@@ -60,6 +60,12 @@ static inline int gpio_request(unsigned gpio, const char *label)
 	return -ENOSYS;
 }
 
+static inline int devm_gpio_request(struct device *dev, unsigned gpio,
+				    const char *label)
+{
+	return -ENOSYS;
+}
+
 static inline int gpio_request_one(unsigned gpio,
 					unsigned long flags, const char *label)
 {
@@ -79,6 +85,14 @@ static inline void gpio_free(unsigned gpio)
 	WARN_ON(1);
 }
 
+static inline void devm_gpio_free(struct device *dev, unsigned gpio)
+{
+	might_sleep();
+
+	/* GPIO can never have been requested */
+	WARN_ON(1);
+}
+
 static inline void gpio_free_array(const struct gpio *array, size_t num)
 {
 	might_sleep();

commit fc3a1f04f5040255cbc086c419e4237f29f89f88
Author: Wolfram Sang <w.sang@pengutronix.de>
Date:   Tue Dec 13 18:34:01 2011 +0100

    gpio: add flags to export GPIOs when requesting
    
    Introduce new flags to automatically export GPIOs when using the convenience
    functions gpio_request_one() or gpio_request_array(). This eases support for
    custom boards where lots of GPIOs need to be exported for customer
    applications.
    
    Signed-off-by: Wolfram Sang <w.sang@pengutronix.de>
    Signed-off-by: Grant Likely <grant.likely@secretlab.ca>

diff --git a/include/linux/gpio.h b/include/linux/gpio.h
index 6155ecf192b0..af511a682925 100644
--- a/include/linux/gpio.h
+++ b/include/linux/gpio.h
@@ -20,6 +20,11 @@
 /* Gpio pin is open source */
 #define GPIOF_OPEN_SOURCE	(1 << 3)
 
+#define GPIOF_EXPORT		(1 << 2)
+#define GPIOF_EXPORT_CHANGEABLE	(1 << 3)
+#define GPIOF_EXPORT_DIR_FIXED	(GPIOF_EXPORT)
+#define GPIOF_EXPORT_DIR_CHANGEABLE (GPIOF_EXPORT | GPIOF_EXPORT_CHANGEABLE)
+
 /**
  * struct gpio - a structure describing a GPIO with configuration
  * @gpio:	the GPIO number

commit 7bf97e1d5a94b6a71815771bb9452fc2c022c966
Merge: 30304e5a79d4 c77c8a6fd3d5
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Wed Mar 28 14:08:46 2012 -0700

    Merge tag 'gpio-for-linus' of git://git.secretlab.ca/git/linux-2.6
    
    Pull GPIO changes for v3.4 from Grant Likely:
     "Primarily gpio device driver changes with some minor side effects
      under arch/arm and arch/x86.  Also includes a few core changes such as
      explicitly supporting (electrical) open source and open drain outputs
      and some help for parsing gpio devicetree properties."
    
    Fix up context conflict due to Laxman Dewangan adding sleep control for
    the tps65910 driver separately for gpio's and regulators.
    
    * tag 'gpio-for-linus' of git://git.secretlab.ca/git/linux-2.6: (34 commits)
      gpio/ep93xx: Remove unused inline function and useless pr_err message
      gpio/sodaville: Mark broken due to core irqdomain migration
      gpio/omap: fix redundant decoding of gpio offset
      gpio/omap: fix incorrect update to context.irqenable1
      gpio/omap: fix incorrect context restore logic in omap_gpio_runtime_*
      gpio/omap: fix missing dataout context save in _set_gpio_dataout_reg
      gpio/omap: fix _set_gpio_irqenable implementation
      gpio/omap: fix trigger type to unsigned
      gpio/omap: fix wakeup_en register update in _set_gpio_wakeup()
      gpio: tegra: tegra_gpio_config shouldn't be __init
      gpio/davinci: fix enabling unbanked GPIO IRQs
      gpio/davinci: fix oops on unbanked gpio irq request
      gpio/omap: Fix section warning for omap_mpuio_alloc_gc()
      ARM: tegra: export tegra_gpio_{en,dis}able
      gpio/gpio-stmpe: Fix the value returned by _get_value routine
      Documentation/gpio.txt: Explain expected pinctrl interaction
      GPIO: LPC32xx: Add output reading to GPO P3
      GPIO: LPC32xx: Fix missing bit selection mask
      gpio/omap: fix wakeups on level-triggered GPIOs
      gpio/omap: Fix IRQ handling for SPARSE_IRQ
      ...

commit 25553ff0756c59b617af6bdd280c94e943164184
Author: Laxman Dewangan <ldewangan@nvidia.com>
Date:   Fri Feb 17 20:26:22 2012 +0530

    gpio: gpiolib: Support for open source/emitter gpios
    
    Adding support for the open source gpio on which client
    can specify the open source property through GPIO flag
    GPIOF_OPEN_SOURCE at the time of gpio request.
    The open source pins are normally pulled low and it
    cannot be driven to output with value of 0 and so
    when client request for setting the pin to LOW, the
    gpio will be set to input direction to make pin in tristate
    and hence PULL-DOWN on pins will make the state to LOW.
    The open source pin can be driven to HIGH by setting output
    with value of 1.
    
    Signed-off-by: Laxman Dewangan <ldewangan@nvidia.com>
    Reviwed-by: Mark Brown <broonie@opensource.wolfsonmicro.com>
    Acked-by: Linus Walleij <linus.walleij@linaro.org>
    Signed-off-by: Grant Likely <grant.likely@secretlab.ca>

diff --git a/include/linux/gpio.h b/include/linux/gpio.h
index 66a5b2e9d35a..67851bbd3a42 100644
--- a/include/linux/gpio.h
+++ b/include/linux/gpio.h
@@ -17,6 +17,9 @@
 /* Gpio pin is open drain */
 #define GPIOF_OPEN_DRAIN	(1 << 2)
 
+/* Gpio pin is open source */
+#define GPIOF_OPEN_SOURCE	(1 << 3)
+
 /**
  * struct gpio - a structure describing a GPIO with configuration
  * @gpio:	the GPIO number

commit aca5ce14eb773a75e5d935968b2e390dc5bd29c3
Author: Laxman Dewangan <ldewangan@nvidia.com>
Date:   Fri Feb 17 20:26:21 2012 +0530

    gpio: gpiolib: Support for open drain/collector gpios
    
    Adding support for the open drain gpio on which client
    can specify the open drain property through GPIO flag
    GPIOF_OPEN_DRAIN at the time of gpio request.
    The open drain pins are normally pulled high and it
    cannot be driven to output with value of 1 and so
    when client request for setting the pin to HIGH, the
    gpio will be set to input direction to make pin in tristate
    and hence PULL-UP on pins will make the state to HIGH.
    The open drain pin can be driven to LOW by setting output
    with value of 0.
    
    Signed-off-by: Laxman Dewangan <ldewangan@nvidia.com>
    Reviwed-by: Mark Brown <broonie@opensource.wolfsonmicro.com>
    Acked-by: Linus Walleij <linus.walleij@linaro.org>
    Signed-off-by: Grant Likely <grant.likely@secretlab.ca>

diff --git a/include/linux/gpio.h b/include/linux/gpio.h
index 38ac48b7d3a8..66a5b2e9d35a 100644
--- a/include/linux/gpio.h
+++ b/include/linux/gpio.h
@@ -14,6 +14,9 @@
 #define GPIOF_OUT_INIT_LOW	(GPIOF_DIR_OUT | GPIOF_INIT_LOW)
 #define GPIOF_OUT_INIT_HIGH	(GPIOF_DIR_OUT | GPIOF_INIT_HIGH)
 
+/* Gpio pin is open drain */
+#define GPIOF_OPEN_DRAIN	(1 << 2)
+
 /**
  * struct gpio - a structure describing a GPIO with configuration
  * @gpio:	the GPIO number

commit 187f1882b5b0748b3c4c22274663fdb372ac0452
Author: Paul Gortmaker <paul.gortmaker@windriver.com>
Date:   Wed Nov 23 20:12:59 2011 -0500

    BUG: headers with BUG/BUG_ON etc. need linux/bug.h
    
    If a header file is making use of BUG, BUG_ON, BUILD_BUG_ON, or any
    other BUG variant in a static inline (i.e. not in a #define) then
    that header really should be including <linux/bug.h> and not just
    expecting it to be implicitly present.
    
    We can make this change risk-free, since if the files using these
    headers didn't have exposure to linux/bug.h already, they would have
    been causing compile failures/warnings.
    
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>

diff --git a/include/linux/gpio.h b/include/linux/gpio.h
index 38ac48b7d3a8..ed5a46707ad0 100644
--- a/include/linux/gpio.h
+++ b/include/linux/gpio.h
@@ -34,6 +34,7 @@ struct gpio {
 #include <linux/kernel.h>
 #include <linux/types.h>
 #include <linux/errno.h>
+#include <linux/bug.h>
 
 struct device;
 struct gpio_chip;

commit feb836992437c9b8b53988da30880e0e6e93ac8b
Author: Mark Brown <broonie@opensource.wolfsonmicro.com>
Date:   Mon Oct 24 15:24:10 2011 +0200

    gpiolib: Ensure struct gpio is always defined
    
    Currently struct gpio is only defined when using gpiolib which makes the
    stub gpio_request_array() much less useful in drivers than is ideal as
    they can't work with struct gpio.  Since there are no other definitions
    in kernel instead make the define always available no matter if gpiolib
    is selectable or selected, ensuring that drivers can always use the
    type.
    
    Signed-off-by: Mark Brown <broonie@opensource.wolfsonmicro.com>
    Signed-off-by: Grant Likely <grant.likely@secretlab.ca>

diff --git a/include/linux/gpio.h b/include/linux/gpio.h
index 17b5a0d80e42..38ac48b7d3a8 100644
--- a/include/linux/gpio.h
+++ b/include/linux/gpio.h
@@ -14,6 +14,18 @@
 #define GPIOF_OUT_INIT_LOW	(GPIOF_DIR_OUT | GPIOF_INIT_LOW)
 #define GPIOF_OUT_INIT_HIGH	(GPIOF_DIR_OUT | GPIOF_INIT_HIGH)
 
+/**
+ * struct gpio - a structure describing a GPIO with configuration
+ * @gpio:	the GPIO number
+ * @flags:	GPIO configuration as specified by GPIOF_*
+ * @label:	a literal description string of this GPIO
+ */
+struct gpio {
+	unsigned	gpio;
+	unsigned long	flags;
+	const char	*label;
+};
+
 #ifdef CONFIG_GENERIC_GPIO
 #include <asm/gpio.h>
 
@@ -24,18 +36,8 @@
 #include <linux/errno.h>
 
 struct device;
-struct gpio;
 struct gpio_chip;
 
-/*
- * Some platforms don't support the GPIO programming interface.
- *
- * In case some driver uses it anyway (it should normally have
- * depended on GENERIC_GPIO), these routines help the compiler
- * optimize out much GPIO-related code ... or trigger a runtime
- * warning when something is wrongly called.
- */
-
 static inline bool gpio_is_valid(int number)
 {
 	return false;

commit c001fb72a7b705f902bdfdd05b5d2408efe6f848
Author: Randy Dunlap <randy.dunlap@oracle.com>
Date:   Tue Jun 14 17:05:11 2011 -0700

    gpio: add GPIOF_ values regardless on kconfig settings
    
    Make GPIOF_ defined values available even when GPIOLIB nor GENERIC_GPIO
    is enabled by moving them to <linux/gpio.h>.
    
    Fixes these build errors in linux-next:
    sound/soc/codecs/ak4641.c:524: error: 'GPIOF_OUT_INIT_LOW' undeclared (first use in this function)
    sound/soc/codecs/wm8915.c:2921: error: 'GPIOF_OUT_INIT_LOW' undeclared (first use in this function)
    
    Signed-off-by: Randy Dunlap <randy.dunlap@oracle.com>
    Signed-off-by: Grant Likely <grant.likely@secretlab.ca>

diff --git a/include/linux/gpio.h b/include/linux/gpio.h
index 32d47e710661..17b5a0d80e42 100644
--- a/include/linux/gpio.h
+++ b/include/linux/gpio.h
@@ -3,6 +3,17 @@
 
 /* see Documentation/gpio.txt */
 
+/* make these flag values available regardless of GPIO kconfig options */
+#define GPIOF_DIR_OUT	(0 << 0)
+#define GPIOF_DIR_IN	(1 << 0)
+
+#define GPIOF_INIT_LOW	(0 << 1)
+#define GPIOF_INIT_HIGH	(1 << 1)
+
+#define GPIOF_IN		(GPIOF_DIR_IN)
+#define GPIOF_OUT_INIT_LOW	(GPIOF_DIR_OUT | GPIOF_INIT_LOW)
+#define GPIOF_OUT_INIT_HIGH	(GPIOF_DIR_OUT | GPIOF_INIT_HIGH)
+
 #ifdef CONFIG_GENERIC_GPIO
 #include <asm/gpio.h>
 

commit 7c295975a85b049385dfe0d5ee0d4d543619fbdc
Author: Lars-Peter Clausen <lars@metafoo.de>
Date:   Wed May 25 16:20:31 2011 -0700

    gpio: make gpio_{request,free}_array gpio array parameter const
    
    gpio_{request,free}_array should not (and do not) modify the passed gpio
    array, so make the parameter const.
    
    Signed-off-by: Lars-Peter Clausen <lars@metafoo.de>
    Acked-by: Eric Miao <eric.y.miao@gmail.com>
    Acked-by: Wolfram Sang <w.sang@pengutronix.de>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Grant Likely <grant.likely@secretlab.ca>

diff --git a/include/linux/gpio.h b/include/linux/gpio.h
index 0f8265f8e8c3..32d47e710661 100644
--- a/include/linux/gpio.h
+++ b/include/linux/gpio.h
@@ -41,7 +41,7 @@ static inline int gpio_request_one(unsigned gpio,
 	return -ENOSYS;
 }
 
-static inline int gpio_request_array(struct gpio *array, size_t num)
+static inline int gpio_request_array(const struct gpio *array, size_t num)
 {
 	return -ENOSYS;
 }
@@ -54,7 +54,7 @@ static inline void gpio_free(unsigned gpio)
 	WARN_ON(1);
 }
 
-static inline void gpio_free_array(struct gpio *array, size_t num)
+static inline void gpio_free_array(const struct gpio *array, size_t num)
 {
 	might_sleep();
 

commit 3474cb3cc0140f9cf6ca56983f8180b4b4c5c36a
Author: Joe Perches <joe@perches.com>
Date:   Tue May 10 16:23:07 2011 -0700

    gpio: Convert gpio_is_valid to return bool
    
    Make the code a bit more readable.
    
    Instead of casting an int to an unsigned then comparing to
    MAX_NR_GPIOS, add a >= 0 test and let the compiler optimizer
    do the conversion to unsigned.
    
    The generated code should be the same.
    
    Signed-off-by: Joe Perches <joe@perches.com>
    Acked-by: Linus Walleij <linus.walleij@linaro.org>
    Signed-off-by: Grant Likely <grant.likely@secretlab.ca>

diff --git a/include/linux/gpio.h b/include/linux/gpio.h
index 32720baf70f1..0f8265f8e8c3 100644
--- a/include/linux/gpio.h
+++ b/include/linux/gpio.h
@@ -25,9 +25,9 @@ struct gpio_chip;
  * warning when something is wrongly called.
  */
 
-static inline int gpio_is_valid(int number)
+static inline bool gpio_is_valid(int number)
 {
-	return 0;
+	return false;
 }
 
 static inline int gpio_request(unsigned gpio, const char *label)

commit 323b7fe8f8f6d5ac6214382cf30e8b3a80b265c9
Author: Wolfram Sang <w.sang@pengutronix.de>
Date:   Fri Jan 14 09:34:29 2011 +0100

    include/gpio.h: remove remaining __must_check-annotiations
    
    Commit 5f829e405ec4e96f711165a4a7b55c271d4363e2 (gpiolib: add missing functions
    to generic fallback) also introduced two.
    
    Signed-off-by: Wolfram Sang <w.sang@pengutronix.de>
    Cc: Greg KH <gregkh@suse.de>
    Cc: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

diff --git a/include/linux/gpio.h b/include/linux/gpio.h
index 4b47ed96f131..32720baf70f1 100644
--- a/include/linux/gpio.h
+++ b/include/linux/gpio.h
@@ -35,13 +35,13 @@ static inline int gpio_request(unsigned gpio, const char *label)
 	return -ENOSYS;
 }
 
-static inline int __must_check gpio_request_one(unsigned gpio,
+static inline int gpio_request_one(unsigned gpio,
 					unsigned long flags, const char *label)
 {
 	return -ENOSYS;
 }
 
-static inline int __must_check gpio_request_array(struct gpio *array, size_t num)
+static inline int gpio_request_array(struct gpio *array, size_t num)
 {
 	return -ENOSYS;
 }

commit d8a3515e2a9523f8ed56d1f4537d16338bda2bc2
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Thu Jan 13 17:26:46 2011 -0800

    Revert "gpiolib: annotate gpio-intialization with __must_check"
    
    This reverts commit 0fdae42d361bbb431ca0ab0efed5126a94821177, which
    wasn't really supposed to go in, and causes lots of annoying warnings.
    
    Quoth Andrew:
      "Complete brainfart - I meant to drop that patch ages ago."
    
    Quoth Greg:
      "Ick, yeah, that patch isn't ok to go in as-is, all of the callers
       need to be fixed up first, which is what I thought we had agreed on..."
    
    Reported-by: Stephen Rothwell <sfr@canb.auug.org.au>
    Acked-by: Andrew Morton <akpm@linux-foundation.org>
    Acked-by: Greg KH <greg@kroah.com>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

diff --git a/include/linux/gpio.h b/include/linux/gpio.h
index f79d67f413e4..4b47ed96f131 100644
--- a/include/linux/gpio.h
+++ b/include/linux/gpio.h
@@ -30,7 +30,7 @@ static inline int gpio_is_valid(int number)
 	return 0;
 }
 
-static inline int __must_check gpio_request(unsigned gpio, const char *label)
+static inline int gpio_request(unsigned gpio, const char *label)
 {
 	return -ENOSYS;
 }
@@ -62,12 +62,12 @@ static inline void gpio_free_array(struct gpio *array, size_t num)
 	WARN_ON(1);
 }
 
-static inline int __must_check gpio_direction_input(unsigned gpio)
+static inline int gpio_direction_input(unsigned gpio)
 {
 	return -ENOSYS;
 }
 
-static inline int __must_check gpio_direction_output(unsigned gpio, int value)
+static inline int gpio_direction_output(unsigned gpio, int value)
 {
 	return -ENOSYS;
 }

commit 5f829e405ec4e96f711165a4a7b55c271d4363e2
Author: Wolfram Sang <w.sang@pengutronix.de>
Date:   Wed Jan 12 17:00:24 2011 -0800

    gpiolib: add missing functions to generic fallback
    
    Signed-off-by: Wolfram Sang <w.sang@pengutronix.de>
    Cc: David Brownell <dbrownell@users.sourceforge.net>
    Cc: Greg KH <gregkh@suse.de>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

diff --git a/include/linux/gpio.h b/include/linux/gpio.h
index 1d5214a89110..f79d67f413e4 100644
--- a/include/linux/gpio.h
+++ b/include/linux/gpio.h
@@ -13,6 +13,7 @@
 #include <linux/errno.h>
 
 struct device;
+struct gpio;
 struct gpio_chip;
 
 /*
@@ -34,6 +35,17 @@ static inline int __must_check gpio_request(unsigned gpio, const char *label)
 	return -ENOSYS;
 }
 
+static inline int __must_check gpio_request_one(unsigned gpio,
+					unsigned long flags, const char *label)
+{
+	return -ENOSYS;
+}
+
+static inline int __must_check gpio_request_array(struct gpio *array, size_t num)
+{
+	return -ENOSYS;
+}
+
 static inline void gpio_free(unsigned gpio)
 {
 	might_sleep();
@@ -42,6 +54,14 @@ static inline void gpio_free(unsigned gpio)
 	WARN_ON(1);
 }
 
+static inline void gpio_free_array(struct gpio *array, size_t num)
+{
+	might_sleep();
+
+	/* GPIO can never have been requested */
+	WARN_ON(1);
+}
+
 static inline int __must_check gpio_direction_input(unsigned gpio)
 {
 	return -ENOSYS;

commit 0fdae42d361bbb431ca0ab0efed5126a94821177
Author: Wolfram Sang <w.sang@pengutronix.de>
Date:   Wed Jan 12 17:00:23 2011 -0800

    gpiolib: annotate gpio-intialization with __must_check
    
    Because GPIOs can have crucial functions especially in embedded systems,
    we are better safe than sorry regarding their configuration.  For
    gpio_request, the documentation is simply enforced: <quote>"The return
    value of gpio_request() must be checked."</quote> For gpio_direction_* and
    gpio_request_*, we now act accordingly.
    
    Signed-off-by: Wolfram Sang <w.sang@pengutronix.de>
    Cc: David Brownell <dbrownell@users.sourceforge.net>
    Cc: Greg KH <gregkh@suse.de>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

diff --git a/include/linux/gpio.h b/include/linux/gpio.h
index e41f7dd1ae67..1d5214a89110 100644
--- a/include/linux/gpio.h
+++ b/include/linux/gpio.h
@@ -29,7 +29,7 @@ static inline int gpio_is_valid(int number)
 	return 0;
 }
 
-static inline int gpio_request(unsigned gpio, const char *label)
+static inline int __must_check gpio_request(unsigned gpio, const char *label)
 {
 	return -ENOSYS;
 }
@@ -42,12 +42,12 @@ static inline void gpio_free(unsigned gpio)
 	WARN_ON(1);
 }
 
-static inline int gpio_direction_input(unsigned gpio)
+static inline int __must_check gpio_direction_input(unsigned gpio)
 {
 	return -ENOSYS;
 }
 
-static inline int gpio_direction_output(unsigned gpio, int value)
+static inline int __must_check gpio_direction_output(unsigned gpio, int value)
 {
 	return -ENOSYS;
 }

commit 4e4438b86527e8bf1f49503a30d487e401e64f9c
Author: Anton Vorontsov <cbouatmailru@gmail.com>
Date:   Wed Sep 1 08:55:24 2010 -0600

    gpiolib: Add 'struct gpio_chip' forward declaration for !GPIOLIB case
    
    With CONFIG_GPIOLIB=n, the 'struct gpio_chip' is not declared,
    so the following pops up on PowerPC:
    
      cc1: warnings being treated as errors
      In file included from arch/powerpc/platforms/52xx/mpc52xx_common.c:19:
      include/linux/of_gpio.h:74: warning: 'struct gpio_chip' declared
                                  inside parameter list
      include/linux/of_gpio.h:74: warning: its scope is only this definition
                                  or declaration, which is probably not what
                                  you want
      include/linux/of_gpio.h:75: warning: 'struct gpio_chip' declared
                                  inside parameter list
      make[2]: *** [arch/powerpc/platforms/52xx/mpc52xx_common.o] Error 1
    
    This patch fixes the issue by providing the proper forward declaration.
    
    Signed-off-by: Anton Vorontsov <cbouatmailru@gmail.com>
    Signed-off-by: Grant Likely <grant.likely@secretlab.ca>

diff --git a/include/linux/gpio.h b/include/linux/gpio.h
index 03f616b78cfa..e41f7dd1ae67 100644
--- a/include/linux/gpio.h
+++ b/include/linux/gpio.h
@@ -13,6 +13,7 @@
 #include <linux/errno.h>
 
 struct device;
+struct gpio_chip;
 
 /*
  * Some platforms don't support the GPIO programming interface.

commit c4b5be98fe78508e7199d6919eb712feba9a4f01
Author: Felipe Balbi <felipe.balbi@nokia.com>
Date:   Wed May 26 14:42:23 2010 -0700

    gpiolib: introduce set_debounce method
    
    A few architectures, like OMAP, allow you to set a debouncing time for the
    gpio before generating the IRQ.  Teach gpiolib about that.
    
    Mark said:
    : This would be generally useful for embedded systems, especially where
    : the interrupt concerned is a wake source.  It allows drivers to avoid
    : spurious interrupts from noisy sources so if the hardware supports it
    : the driver can avoid having to explicitly wait for the signal to become
    : stable and software has to cope with fewer events.  We've lived without
    : it for quite some time, though.
    
    David said:
    : I looked at adding debounce support to the generic GPIO calls (and thus
    : gpiolib) some time back, but decided against it.  I forget why at this
    : time (check list archives) but it wasn't because of lack of utility in
    : certain contexts.
    :
    : One thing to watch out for is just how variable the hardware capabilities
    : are.  Atmel GPIOs have something like a fixed number of 32K clock cycles
    : for debounce, twl4030 had something odd, OMAPs were more like the Atmel
    : chips but with a different clock.  In some cases debouncing had to be
    : ganged, not per-GPIO.  And so forth.
    
    Signed-off-by: Felipe Balbi <felipe.balbi@nokia.com>
    Cc: Tony Lindgren <tony@atomide.com>
    Cc: David Brownell <david-b@pacbell.net>
    Reviewed-by: Mark Brown <broonie@opensource.wolfsonmicro.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

diff --git a/include/linux/gpio.h b/include/linux/gpio.h
index 4e949a5b5b85..03f616b78cfa 100644
--- a/include/linux/gpio.h
+++ b/include/linux/gpio.h
@@ -51,6 +51,11 @@ static inline int gpio_direction_output(unsigned gpio, int value)
 	return -ENOSYS;
 }
 
+static inline int gpio_set_debounce(unsigned gpio, unsigned debounce)
+{
+	return -ENOSYS;
+}
+
 static inline int gpio_get_value(unsigned gpio)
 {
 	/* GPIO can never have been requested or set as {in,out}put */

commit 0769746183caff9d4334be48c7b0e7d2ec8716c4
Author: Jani Nikula <ext-jani.1.nikula@nokia.com>
Date:   Tue Dec 15 16:46:20 2009 -0800

    gpiolib: add support for changing value polarity in sysfs
    
    Drivers may use gpiolib sysfs as part of their public user space
    interface. The GPIO number and polarity might change from board to
    board. The gpio_export_link() call can be used to hide the GPIO number
    from user space. Add support for also hiding the GPIO line polarity
    changes from user space.
    
    Signed-off-by: Jani Nikula <ext-jani.1.nikula@nokia.com>
    Cc: David Brownell <david-b@pacbell.net>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

diff --git a/include/linux/gpio.h b/include/linux/gpio.h
index 059bd189d35d..4e949a5b5b85 100644
--- a/include/linux/gpio.h
+++ b/include/linux/gpio.h
@@ -99,6 +99,12 @@ static inline int gpio_export_link(struct device *dev, const char *name,
 	return -EINVAL;
 }
 
+static inline int gpio_sysfs_set_active_low(unsigned gpio, int value)
+{
+	/* GPIO can never have been requested */
+	WARN_ON(1);
+	return -EINVAL;
+}
 
 static inline void gpio_unexport(unsigned gpio)
 {

commit a4177ee7f1a83eecb1d75e85d32664b023ef65e9
Author: Jani Nikula <ext-jani.1.nikula@nokia.com>
Date:   Tue Sep 22 16:46:33 2009 -0700

    gpiolib: allow exported GPIO nodes to be named using sysfs links
    
    Commit 926b663ce8215ba448960e1ff6e58b67a2c3b99b (gpiolib: allow GPIOs to
    be named) already provides naming on the chip level. This patch provides
    more flexibility by allowing multiple names where ever in sysfs on a per
    GPIO basis.
    
    Adapted from David Brownell's comments on a similar concept:
    http://lkml.org/lkml/2009/4/20/203.
    
    [randy.dunlap@oracle.com: fix build for CONFIG_GENERIC_GPIO=n]
    Signed-off-by: Jani Nikula <ext-jani.1.nikula@nokia.com>
    Acked-by: David Brownell <david-b@pacbell.net>
    Cc: Daniel Silverstone <dsilvers@simtec.co.uk>
    Signed-off-by: Randy Dunlap <randy.dunlap@oracle.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

diff --git a/include/linux/gpio.h b/include/linux/gpio.h
index e10c49a5b96e..059bd189d35d 100644
--- a/include/linux/gpio.h
+++ b/include/linux/gpio.h
@@ -12,6 +12,8 @@
 #include <linux/types.h>
 #include <linux/errno.h>
 
+struct device;
+
 /*
  * Some platforms don't support the GPIO programming interface.
  *
@@ -89,6 +91,15 @@ static inline int gpio_export(unsigned gpio, bool direction_may_change)
 	return -EINVAL;
 }
 
+static inline int gpio_export_link(struct device *dev, const char *name,
+				unsigned gpio)
+{
+	/* GPIO can never have been exported */
+	WARN_ON(1);
+	return -EINVAL;
+}
+
+
 static inline void gpio_unexport(unsigned gpio)
 {
 	/* GPIO can never have been exported */

commit 3d599d1ca57f443e5c4ff5af1e69d90350082f77
Author: Uwe Kleine-König <ukleinek@informatik.uni-freiburg.de>
Date:   Wed Oct 15 22:03:12 2008 -0700

    gpio_free might sleep, generic part
    
    According to the documentation gpio_free should only be called from task
    context only.  To make this more explicit add a might sleep to all
    implementations.
    
    This is the generic part which changes gpiolib and the fallback
    implementation only.
    
    Signed-off-by: Uwe Kleine-König <ukleinek@informatik.uni-freiburg.de>
    Cc: David Brownell <david-b@pacbell.net>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

diff --git a/include/linux/gpio.h b/include/linux/gpio.h
index 730a20b83576..e10c49a5b96e 100644
--- a/include/linux/gpio.h
+++ b/include/linux/gpio.h
@@ -8,6 +8,7 @@
 
 #else
 
+#include <linux/kernel.h>
 #include <linux/types.h>
 #include <linux/errno.h>
 
@@ -32,6 +33,8 @@ static inline int gpio_request(unsigned gpio, const char *label)
 
 static inline void gpio_free(unsigned gpio)
 {
+	might_sleep();
+
 	/* GPIO can never have been requested */
 	WARN_ON(1);
 }

commit d8f388d8dc8d4f36539dd37c1fff62cc404ea0fc
Author: David Brownell <dbrownell@users.sourceforge.net>
Date:   Fri Jul 25 01:46:07 2008 -0700

    gpio: sysfs interface
    
    This adds a simple sysfs interface for GPIOs.
    
        /sys/class/gpio
            /export ... asks the kernel to export a GPIO to userspace
            /unexport ... to return a GPIO to the kernel
            /gpioN ... for each exported GPIO #N
                /value ... always readable, writes fail for input GPIOs
                /direction ... r/w as: in, out (default low); write high, low
            /gpiochipN ... for each gpiochip; #N is its first GPIO
                /base ... (r/o) same as N
                /label ... (r/o) descriptive, not necessarily unique
                /ngpio ... (r/o) number of GPIOs; numbered N .. N+(ngpio - 1)
    
    GPIOs claimed by kernel code may be exported by its owner using a new
    gpio_export() call, which should be most useful for driver debugging.
    Such exports may optionally be done without a "direction" attribute.
    
    Userspace may ask to take over a GPIO by writing to a sysfs control file,
    helping to cope with incomplete board support or other "one-off"
    requirements that don't merit full kernel support:
    
      echo 23 > /sys/class/gpio/export
            ... will gpio_request(23, "sysfs") and gpio_export(23);
            use /sys/class/gpio/gpio-23/direction to (re)configure it,
            when that GPIO can be used as both input and output.
      echo 23 > /sys/class/gpio/unexport
            ... will gpio_free(23), when it was exported as above
    
    The extra D-space footprint is a few hundred bytes, except for the sysfs
    resources associated with each exported GPIO.  The additional I-space
    footprint is about two thirds of the current size of gpiolib (!).  Since
    no /dev node creation is involved, no "udev" support is needed.
    
    Related changes:
    
      * This adds a device pointer to "struct gpio_chip".  When GPIO
        providers initialize that, sysfs gpio class devices become children of
        that device instead of being "virtual" devices.
    
      * The (few) gpio_chip providers which have such a device node have
        been updated.
    
      * Some gpio_chip drivers also needed to update their module "owner"
        field ...  for which missing kerneldoc was added.
    
      * Some gpio_chips don't support input GPIOs.  Those GPIOs are now
        flagged appropriately when the chip is registered.
    
    Based on previous patches, and discussion both on and off LKML.
    
    A Documentation/ABI/testing/sysfs-gpio update is ready to submit once this
    merges to mainline.
    
    [akpm@linux-foundation.org: a few maintenance build fixes]
    Signed-off-by: David Brownell <dbrownell@users.sourceforge.net>
    Cc: Guennadi Liakhovetski <g.liakhovetski@pengutronix.de>
    Cc: Greg KH <greg@kroah.com>
    Cc: Kay Sievers <kay.sievers@vrfy.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

diff --git a/include/linux/gpio.h b/include/linux/gpio.h
index 98be6c5762b9..730a20b83576 100644
--- a/include/linux/gpio.h
+++ b/include/linux/gpio.h
@@ -79,6 +79,19 @@ static inline void gpio_set_value_cansleep(unsigned gpio, int value)
 	WARN_ON(1);
 }
 
+static inline int gpio_export(unsigned gpio, bool direction_may_change)
+{
+	/* GPIO can never have been requested or set as {in,out}put */
+	WARN_ON(1);
+	return -EINVAL;
+}
+
+static inline void gpio_unexport(unsigned gpio)
+{
+	/* GPIO can never have been exported */
+	WARN_ON(1);
+}
+
 static inline int gpio_to_irq(unsigned gpio)
 {
 	/* GPIO can never have been requested or set as input */

commit 6ea0205b56546cef782b74d9f4664ec00290a6ae
Author: David Brownell <david-b@pacbell.net>
Date:   Fri May 23 13:04:58 2008 -0700

    gpio: build fixes
    
    This fixes various gpio-related build errors (mostly potential)
    reported in part by Russell King and Uwe Kleine-König.
    
    Signed-off-by: David Brownell <dbrownell@users.sourceforge.net>
    Cc: Uwe Kleine-König <Uwe.Kleine-Koenig@digi.com>
    Cc: Russell King <rmk@arm.linux.org.uk>
    Cc: Arnaud Patard <arnaud.patard@rtp-net.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

diff --git a/include/linux/gpio.h b/include/linux/gpio.h
index 4987a84078ef..98be6c5762b9 100644
--- a/include/linux/gpio.h
+++ b/include/linux/gpio.h
@@ -8,6 +8,9 @@
 
 #else
 
+#include <linux/types.h>
+#include <linux/errno.h>
+
 /*
  * Some platforms don't support the GPIO programming interface.
  *

commit 7560fa60fcdcdb0da662f6a9fad9064b554ef46c
Author: David Brownell <david-b@pacbell.net>
Date:   Tue Mar 4 14:28:27 2008 -0800

    gpio: <linux/gpio.h> and "no GPIO support here" stubs
    
    Add a <linux/gpio.h> defining fail/warn stubs for GPIO calls on platforms that
    don't support the GPIO programming interface.  That includes the arch-specific
    implementation glue otherwise.
    
    This facilitates a new model for GPIO usage: drivers that can use GPIOs if
    they're available, but don't require them.  One example of such a driver is
    NAND driver for various FreeScale chips.  On platforms update with GPIO
    support, they can be used instead of a worst-case delay to verify that the
    BUSY signal is off.
    
    (Also includes a couple minor unrelated doc updates.)
    
    Signed-off-by: David Brownell <dbrownell@users.sourceforge.net>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

diff --git a/include/linux/gpio.h b/include/linux/gpio.h
new file mode 100644
index 000000000000..4987a84078ef
--- /dev/null
+++ b/include/linux/gpio.h
@@ -0,0 +1,95 @@
+#ifndef __LINUX_GPIO_H
+#define __LINUX_GPIO_H
+
+/* see Documentation/gpio.txt */
+
+#ifdef CONFIG_GENERIC_GPIO
+#include <asm/gpio.h>
+
+#else
+
+/*
+ * Some platforms don't support the GPIO programming interface.
+ *
+ * In case some driver uses it anyway (it should normally have
+ * depended on GENERIC_GPIO), these routines help the compiler
+ * optimize out much GPIO-related code ... or trigger a runtime
+ * warning when something is wrongly called.
+ */
+
+static inline int gpio_is_valid(int number)
+{
+	return 0;
+}
+
+static inline int gpio_request(unsigned gpio, const char *label)
+{
+	return -ENOSYS;
+}
+
+static inline void gpio_free(unsigned gpio)
+{
+	/* GPIO can never have been requested */
+	WARN_ON(1);
+}
+
+static inline int gpio_direction_input(unsigned gpio)
+{
+	return -ENOSYS;
+}
+
+static inline int gpio_direction_output(unsigned gpio, int value)
+{
+	return -ENOSYS;
+}
+
+static inline int gpio_get_value(unsigned gpio)
+{
+	/* GPIO can never have been requested or set as {in,out}put */
+	WARN_ON(1);
+	return 0;
+}
+
+static inline void gpio_set_value(unsigned gpio, int value)
+{
+	/* GPIO can never have been requested or set as output */
+	WARN_ON(1);
+}
+
+static inline int gpio_cansleep(unsigned gpio)
+{
+	/* GPIO can never have been requested or set as {in,out}put */
+	WARN_ON(1);
+	return 0;
+}
+
+static inline int gpio_get_value_cansleep(unsigned gpio)
+{
+	/* GPIO can never have been requested or set as {in,out}put */
+	WARN_ON(1);
+	return 0;
+}
+
+static inline void gpio_set_value_cansleep(unsigned gpio, int value)
+{
+	/* GPIO can never have been requested or set as output */
+	WARN_ON(1);
+}
+
+static inline int gpio_to_irq(unsigned gpio)
+{
+	/* GPIO can never have been requested or set as input */
+	WARN_ON(1);
+	return -EINVAL;
+}
+
+static inline int irq_to_gpio(unsigned irq)
+{
+	/* irq can never have been returned from gpio_to_irq() */
+	WARN_ON(1);
+	return -EINVAL;
+}
+
+#endif
+
+#endif /* __LINUX_GPIO_H */
