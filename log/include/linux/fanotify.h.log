commit f17936993af054b16725d0c54baa58115f9e052a
Author: Amir Goldstein <amir73il@gmail.com>
Date:   Wed May 27 15:54:55 2020 +0300

    fanotify: turn off support for FAN_DIR_MODIFY
    
    FAN_DIR_MODIFY has been enabled by commit 44d705b0370b ("fanotify:
    report name info for FAN_DIR_MODIFY event") in 5.7-rc1. Now we are
    planning further extensions to the fanotify API and during that we
    realized that FAN_DIR_MODIFY may behave slightly differently to be more
    consistent with extensions we plan. So until we finalize these
    extensions, let's not bind our hands with exposing FAN_DIR_MODIFY to
    userland.
    
    Signed-off-by: Amir Goldstein <amir73il@gmail.com>
    Signed-off-by: Jan Kara <jack@suse.cz>

diff --git a/include/linux/fanotify.h b/include/linux/fanotify.h
index 3049a6c06d9e..b79fa9bb7359 100644
--- a/include/linux/fanotify.h
+++ b/include/linux/fanotify.h
@@ -47,8 +47,7 @@
  * Directory entry modification events - reported only to directory
  * where entry is modified and not to a watching parent.
  */
-#define FANOTIFY_DIRENT_EVENTS	(FAN_MOVE | FAN_CREATE | FAN_DELETE | \
-				 FAN_DIR_MODIFY)
+#define FANOTIFY_DIRENT_EVENTS	(FAN_MOVE | FAN_CREATE | FAN_DELETE)
 
 /* Events that can only be reported with data type FSNOTIFY_EVENT_INODE */
 #define FANOTIFY_INODE_EVENTS	(FANOTIFY_DIRENT_EVENTS | \

commit 44d705b0370b1d581f46ff23e5d33e8b5ff8ec58
Author: Amir Goldstein <amir73il@gmail.com>
Date:   Thu Mar 19 17:10:22 2020 +0200

    fanotify: report name info for FAN_DIR_MODIFY event
    
    Report event FAN_DIR_MODIFY with name in a variable length record similar
    to how fid's are reported.  With name info reporting implemented, setting
    FAN_DIR_MODIFY in mark mask is now allowed.
    
    When events are reported with name, the reported fid identifies the
    directory and the name follows the fid. The info record type for this
    event info is FAN_EVENT_INFO_TYPE_DFID_NAME.
    
    For now, all reported events have at most one info record which is
    either FAN_EVENT_INFO_TYPE_FID or FAN_EVENT_INFO_TYPE_DFID_NAME (for
    FAN_DIR_MODIFY).  Later on, events "on child" will report both records.
    
    There are several ways that an application can use this information:
    
    1. When watching a single directory, the name is always relative to
    the watched directory, so application need to fstatat(2) the name
    relative to the watched directory.
    
    2. When watching a set of directories, the application could keep a map
    of dirfd for all watched directories and hash the map by fid obtained
    with name_to_handle_at(2).  When getting a name event, the fid in the
    event info could be used to lookup the base dirfd in the map and then
    call fstatat(2) with that dirfd.
    
    3. When watching a filesystem (FAN_MARK_FILESYSTEM) or a large set of
    directories, the application could use open_by_handle_at(2) with the fid
    in event info to obtain dirfd for the directory where event happened and
    call fstatat(2) with this dirfd.
    
    The last option scales better for a large number of watched directories.
    The first two options may be available in the future also for non
    privileged fanotify watchers, because open_by_handle_at(2) requires
    the CAP_DAC_READ_SEARCH capability.
    
    Link: https://lore.kernel.org/r/20200319151022.31456-15-amir73il@gmail.com
    Signed-off-by: Amir Goldstein <amir73il@gmail.com>
    Signed-off-by: Jan Kara <jack@suse.cz>

diff --git a/include/linux/fanotify.h b/include/linux/fanotify.h
index b79fa9bb7359..3049a6c06d9e 100644
--- a/include/linux/fanotify.h
+++ b/include/linux/fanotify.h
@@ -47,7 +47,8 @@
  * Directory entry modification events - reported only to directory
  * where entry is modified and not to a watching parent.
  */
-#define FANOTIFY_DIRENT_EVENTS	(FAN_MOVE | FAN_CREATE | FAN_DELETE)
+#define FANOTIFY_DIRENT_EVENTS	(FAN_MOVE | FAN_CREATE | FAN_DELETE | \
+				 FAN_DIR_MODIFY)
 
 /* Events that can only be reported with data type FSNOTIFY_EVENT_INODE */
 #define FANOTIFY_INODE_EVENTS	(FANOTIFY_DIRENT_EVENTS | \

commit e7fce6d94cc1f7d7ccb6e79dbf7062baec45e142
Author: Amir Goldstein <amir73il@gmail.com>
Date:   Thu Jan 10 19:04:44 2019 +0200

    fanotify: report FAN_ONDIR to listener with FAN_REPORT_FID
    
    dirent modification events (create/delete/move) do not carry the
    child entry name/inode information. Instead, we report FAN_ONDIR
    for mkdir/rmdir so user can differentiate them from creat/unlink.
    
    This is consistent with inotify reporting IN_ISDIR with dirent events
    and is useful for implementing recursive directory tree watcher.
    
    We avoid merging dirent events referring to subdirs with dirent events
    referring to non subdirs, otherwise, user won't be able to tell from a
    mask FAN_CREATE|FAN_DELETE|FAN_ONDIR if it describes mkdir+unlink pair
    or rmdir+create pair of events.
    
    For backward compatibility and consistency, do not report FAN_ONDIR
    to user in legacy fanotify mode (reporting fd) and report FAN_ONDIR
    to user in FAN_REPORT_FID mode for all event types.
    
    Cc: <linux-api@vger.kernel.org>
    Signed-off-by: Amir Goldstein <amir73il@gmail.com>
    Signed-off-by: Jan Kara <jack@suse.cz>

diff --git a/include/linux/fanotify.h b/include/linux/fanotify.h
index e9d45387089f..b79fa9bb7359 100644
--- a/include/linux/fanotify.h
+++ b/include/linux/fanotify.h
@@ -67,7 +67,7 @@
 /* Events that may be reported to user */
 #define FANOTIFY_OUTGOING_EVENTS	(FANOTIFY_EVENTS | \
 					 FANOTIFY_PERM_EVENTS | \
-					 FAN_Q_OVERFLOW)
+					 FAN_Q_OVERFLOW | FAN_ONDIR)
 
 #define ALL_FANOTIFY_EVENT_BITS		(FANOTIFY_OUTGOING_EVENTS | \
 					 FANOTIFY_EVENT_FLAGS)

commit 235328d1fa4251c6dcb32351219bb553a58838d2
Author: Amir Goldstein <amir73il@gmail.com>
Date:   Thu Jan 10 19:04:43 2019 +0200

    fanotify: add support for create/attrib/move/delete events
    
    Add support for events with data type FSNOTIFY_EVENT_INODE
    (e.g. create/attrib/move/delete) for inode and filesystem mark types.
    
    The "inode" events do not carry enough information (i.e. path) to
    report event->fd, so we do not allow setting a mask for those events
    unless group supports reporting fid.
    
    The "inode" events are not supported on a mount mark, because they do
    not carry enough information (i.e. path) to be filtered by mount point.
    
    The "dirent" events (create/move/delete) report the fid of the parent
    directory where events took place without specifying the filename of the
    child. In the future, fanotify may get support for reporting filename
    information for those events.
    
    Cc: <linux-api@vger.kernel.org>
    Signed-off-by: Amir Goldstein <amir73il@gmail.com>
    Signed-off-by: Jan Kara <jack@suse.cz>

diff --git a/include/linux/fanotify.h b/include/linux/fanotify.h
index f59be967f72b..e9d45387089f 100644
--- a/include/linux/fanotify.h
+++ b/include/linux/fanotify.h
@@ -35,10 +35,28 @@
 				 FAN_MARK_IGNORED_SURV_MODIFY | \
 				 FAN_MARK_FLUSH)
 
-/* Events that user can request to be notified on */
-#define FANOTIFY_EVENTS		(FAN_ACCESS | FAN_MODIFY | \
+/*
+ * Events that can be reported with data type FSNOTIFY_EVENT_PATH.
+ * Note that FAN_MODIFY can also be reported with data type
+ * FSNOTIFY_EVENT_INODE.
+ */
+#define FANOTIFY_PATH_EVENTS	(FAN_ACCESS | FAN_MODIFY | \
 				 FAN_CLOSE | FAN_OPEN | FAN_OPEN_EXEC)
 
+/*
+ * Directory entry modification events - reported only to directory
+ * where entry is modified and not to a watching parent.
+ */
+#define FANOTIFY_DIRENT_EVENTS	(FAN_MOVE | FAN_CREATE | FAN_DELETE)
+
+/* Events that can only be reported with data type FSNOTIFY_EVENT_INODE */
+#define FANOTIFY_INODE_EVENTS	(FANOTIFY_DIRENT_EVENTS | \
+				 FAN_ATTRIB | FAN_MOVE_SELF | FAN_DELETE_SELF)
+
+/* Events that user can request to be notified on */
+#define FANOTIFY_EVENTS		(FANOTIFY_PATH_EVENTS | \
+				 FANOTIFY_INODE_EVENTS)
+
 /* Events that require a permission response from user */
 #define FANOTIFY_PERM_EVENTS	(FAN_OPEN_PERM | FAN_ACCESS_PERM | \
 				 FAN_OPEN_EXEC_PERM)

commit a8b13aa20afb69161b5123b4f1acc7ea0a03d360
Author: Amir Goldstein <amir73il@gmail.com>
Date:   Thu Jan 10 19:04:36 2019 +0200

    fanotify: enable FAN_REPORT_FID init flag
    
    When setting up an fanotify listener, user may request to get fid
    information in event instead of an open file descriptor.
    
    The fid obtained with event on a watched object contains the file
    handle returned by name_to_handle_at(2) and fsid returned by statfs(2).
    
    Restrict FAN_REPORT_FID to class FAN_CLASS_NOTIF, because we have have
    no good reason to support reporting fid on permission events.
    
    When setting a mark, we need to make sure that the filesystem
    supports encoding file handles with name_to_handle_at(2) and that
    statfs(2) encodes a non-zero fsid.
    
    Cc: <linux-api@vger.kernel.org>
    Signed-off-by: Amir Goldstein <amir73il@gmail.com>
    Signed-off-by: Jan Kara <jack@suse.cz>

diff --git a/include/linux/fanotify.h b/include/linux/fanotify.h
index 9e2142795335..f59be967f72b 100644
--- a/include/linux/fanotify.h
+++ b/include/linux/fanotify.h
@@ -19,7 +19,7 @@
 				 FAN_CLASS_PRE_CONTENT)
 
 #define FANOTIFY_INIT_FLAGS	(FANOTIFY_CLASS_BITS | \
-				 FAN_REPORT_TID | \
+				 FAN_REPORT_TID | FAN_REPORT_FID | \
 				 FAN_CLOEXEC | FAN_NONBLOCK | \
 				 FAN_UNLIMITED_QUEUE | FAN_UNLIMITED_MARKS)
 

commit 66917a3130f218dcef9eeab4fd11a71cd00cd7c9
Author: Matthew Bobrowski <mbobrowski@mbobrowski.org>
Date:   Thu Nov 8 14:12:44 2018 +1100

    fanotify: introduce new event mask FAN_OPEN_EXEC_PERM
    
    A new event mask FAN_OPEN_EXEC_PERM has been defined. This allows users
    to receive events and grant access to files that are intending to be
    opened for execution. Events of FAN_OPEN_EXEC_PERM type will be
    generated when a file has been opened by using either execve(),
    execveat() or uselib() system calls.
    
    This acts in the same manner as previous permission event mask, meaning
    that an access response is required from the user application in order
    to permit any further operations on the file.
    
    Signed-off-by: Matthew Bobrowski <mbobrowski@mbobrowski.org>
    Reviewed-by: Amir Goldstein <amir73il@gmail.com>
    Signed-off-by: Jan Kara <jack@suse.cz>

diff --git a/include/linux/fanotify.h b/include/linux/fanotify.h
index c521e4264f2b..9e2142795335 100644
--- a/include/linux/fanotify.h
+++ b/include/linux/fanotify.h
@@ -40,7 +40,8 @@
 				 FAN_CLOSE | FAN_OPEN | FAN_OPEN_EXEC)
 
 /* Events that require a permission response from user */
-#define FANOTIFY_PERM_EVENTS	(FAN_OPEN_PERM | FAN_ACCESS_PERM)
+#define FANOTIFY_PERM_EVENTS	(FAN_OPEN_PERM | FAN_ACCESS_PERM | \
+				 FAN_OPEN_EXEC_PERM)
 
 /* Extra flags that may be reported with event or control handling of events */
 #define FANOTIFY_EVENT_FLAGS	(FAN_EVENT_ON_CHILD | FAN_ONDIR)

commit 9b076f1c0f4869b838a1b7aa0edb5664d47ec8aa
Author: Matthew Bobrowski <mbobrowski@mbobrowski.org>
Date:   Thu Nov 8 14:07:14 2018 +1100

    fanotify: introduce new event mask FAN_OPEN_EXEC
    
    A new event mask FAN_OPEN_EXEC has been defined so that users have the
    ability to receive events specifically when a file has been opened with
    the intent to be executed. Events of FAN_OPEN_EXEC type will be
    generated when a file has been opened using either execve(), execveat()
    or uselib() system calls.
    
    The feature is implemented within fsnotify_open() by generating the
    FAN_OPEN_EXEC event type if __FMODE_EXEC is set within file->f_flags.
    
    Signed-off-by: Matthew Bobrowski <mbobrowski@mbobrowski.org>
    Reviewed-by: Amir Goldstein <amir73il@gmail.com>
    Signed-off-by: Jan Kara <jack@suse.cz>

diff --git a/include/linux/fanotify.h b/include/linux/fanotify.h
index a5a60691e48b..c521e4264f2b 100644
--- a/include/linux/fanotify.h
+++ b/include/linux/fanotify.h
@@ -37,7 +37,7 @@
 
 /* Events that user can request to be notified on */
 #define FANOTIFY_EVENTS		(FAN_ACCESS | FAN_MODIFY | \
-				 FAN_CLOSE | FAN_OPEN)
+				 FAN_CLOSE | FAN_OPEN | FAN_OPEN_EXEC)
 
 /* Events that require a permission response from user */
 #define FANOTIFY_PERM_EVENTS	(FAN_OPEN_PERM | FAN_ACCESS_PERM)

commit d0a6a87e40da49cfc7954c491d3065a25a641b29
Author: Amir Goldstein <amir73il@gmail.com>
Date:   Thu Oct 4 00:25:38 2018 +0300

    fanotify: support reporting thread id instead of process id
    
    In order to identify which thread triggered the event in a
    multi-threaded program, add the FAN_REPORT_TID flag in fanotify_init to
    opt-in for reporting the event creator's thread id information.
    
    Signed-off-by: nixiaoming <nixiaoming@huawei.com>
    Signed-off-by: Amir Goldstein <amir73il@gmail.com>
    Signed-off-by: Jan Kara <jack@suse.cz>

diff --git a/include/linux/fanotify.h b/include/linux/fanotify.h
index caf55c67fc6c..a5a60691e48b 100644
--- a/include/linux/fanotify.h
+++ b/include/linux/fanotify.h
@@ -19,6 +19,7 @@
 				 FAN_CLASS_PRE_CONTENT)
 
 #define FANOTIFY_INIT_FLAGS	(FANOTIFY_CLASS_BITS | \
+				 FAN_REPORT_TID | \
 				 FAN_CLOEXEC | FAN_NONBLOCK | \
 				 FAN_UNLIMITED_QUEUE | FAN_UNLIMITED_MARKS)
 

commit bdd5a46fe30653cb4d26c7c787a22159bf79eed9
Author: Amir Goldstein <amir73il@gmail.com>
Date:   Thu Oct 4 00:25:37 2018 +0300

    fanotify: add BUILD_BUG_ON() to count the bits of fanotify constants
    
    Also define the FANOTIFY_EVENT_FLAGS consisting of the extra flags
    FAN_ONDIR and FAN_ON_CHILD.
    
    Signed-off-by: Amir Goldstein <amir73il@gmail.com>
    Signed-off-by: Jan Kara <jack@suse.cz>

diff --git a/include/linux/fanotify.h b/include/linux/fanotify.h
index 4519b0988afe..caf55c67fc6c 100644
--- a/include/linux/fanotify.h
+++ b/include/linux/fanotify.h
@@ -41,11 +41,17 @@
 /* Events that require a permission response from user */
 #define FANOTIFY_PERM_EVENTS	(FAN_OPEN_PERM | FAN_ACCESS_PERM)
 
+/* Extra flags that may be reported with event or control handling of events */
+#define FANOTIFY_EVENT_FLAGS	(FAN_EVENT_ON_CHILD | FAN_ONDIR)
+
 /* Events that may be reported to user */
 #define FANOTIFY_OUTGOING_EVENTS	(FANOTIFY_EVENTS | \
 					 FANOTIFY_PERM_EVENTS | \
 					 FAN_Q_OVERFLOW)
 
+#define ALL_FANOTIFY_EVENT_BITS		(FANOTIFY_OUTGOING_EVENTS | \
+					 FANOTIFY_EVENT_FLAGS)
+
 /* Do not use these old uapi constants internally */
 #undef FAN_ALL_CLASS_BITS
 #undef FAN_ALL_INIT_FLAGS

commit 23c9deeb3285d34fd243abb3d6b9f07db60c3cf4
Author: Amir Goldstein <amir73il@gmail.com>
Date:   Thu Oct 4 00:25:35 2018 +0300

    fanotify: deprecate uapi FAN_ALL_* constants
    
    We do not want to add new bits to the FAN_ALL_* uapi constants
    because they have been exposed to userspace.  If there are programs
    out there using these constants, those programs could break if
    re-compiled with modified FAN_ALL_* constants and run on an old kernel.
    
    We deprecate the uapi constants FAN_ALL_* and define new FANOTIFY_*
    constants for internal use to replace them. New feature bits will be
    added only to the new constants.
    
    Cc: <linux-api@vger.kernel.org>
    Signed-off-by: Amir Goldstein <amir73il@gmail.com>
    Signed-off-by: Jan Kara <jack@suse.cz>

diff --git a/include/linux/fanotify.h b/include/linux/fanotify.h
index a8c3fc54276d..4519b0988afe 100644
--- a/include/linux/fanotify.h
+++ b/include/linux/fanotify.h
@@ -7,4 +7,51 @@
 #define FAN_GROUP_FLAG(group, flag) \
 	((group)->fanotify_data.flags & (flag))
 
+/*
+ * Flags allowed to be passed from/to userspace.
+ *
+ * We intentionally do not add new bits to the old FAN_ALL_* constants, because
+ * they are uapi exposed constants. If there are programs out there using
+ * these constant, the programs may break if re-compiled with new uapi headers
+ * and then run on an old kernel.
+ */
+#define FANOTIFY_CLASS_BITS	(FAN_CLASS_NOTIF | FAN_CLASS_CONTENT | \
+				 FAN_CLASS_PRE_CONTENT)
+
+#define FANOTIFY_INIT_FLAGS	(FANOTIFY_CLASS_BITS | \
+				 FAN_CLOEXEC | FAN_NONBLOCK | \
+				 FAN_UNLIMITED_QUEUE | FAN_UNLIMITED_MARKS)
+
+#define FANOTIFY_MARK_TYPE_BITS	(FAN_MARK_INODE | FAN_MARK_MOUNT | \
+				 FAN_MARK_FILESYSTEM)
+
+#define FANOTIFY_MARK_FLAGS	(FANOTIFY_MARK_TYPE_BITS | \
+				 FAN_MARK_ADD | \
+				 FAN_MARK_REMOVE | \
+				 FAN_MARK_DONT_FOLLOW | \
+				 FAN_MARK_ONLYDIR | \
+				 FAN_MARK_IGNORED_MASK | \
+				 FAN_MARK_IGNORED_SURV_MODIFY | \
+				 FAN_MARK_FLUSH)
+
+/* Events that user can request to be notified on */
+#define FANOTIFY_EVENTS		(FAN_ACCESS | FAN_MODIFY | \
+				 FAN_CLOSE | FAN_OPEN)
+
+/* Events that require a permission response from user */
+#define FANOTIFY_PERM_EVENTS	(FAN_OPEN_PERM | FAN_ACCESS_PERM)
+
+/* Events that may be reported to user */
+#define FANOTIFY_OUTGOING_EVENTS	(FANOTIFY_EVENTS | \
+					 FANOTIFY_PERM_EVENTS | \
+					 FAN_Q_OVERFLOW)
+
+/* Do not use these old uapi constants internally */
+#undef FAN_ALL_CLASS_BITS
+#undef FAN_ALL_INIT_FLAGS
+#undef FAN_ALL_MARK_FLAGS
+#undef FAN_ALL_EVENTS
+#undef FAN_ALL_PERM_EVENTS
+#undef FAN_ALL_OUTGOING_EVENTS
+
 #endif /* _LINUX_FANOTIFY_H */

commit a72fd224e37bf6a0630bce302deebbccbc236ba2
Author: Amir Goldstein <amir73il@gmail.com>
Date:   Thu Oct 4 00:25:34 2018 +0300

    fanotify: simplify handling of FAN_ONDIR
    
    fanotify mark add/remove code jumps through hoops to avoid setting the
    FS_ISDIR in the commulative object mask.
    
    That was just papering over a bug in fsnotify() handling of the FS_ISDIR
    extra flag. This bug is now fixed, so all the hoops can be removed along
    with the unneeded internal flag FAN_MARK_ONDIR.
    
    Signed-off-by: Amir Goldstein <amir73il@gmail.com>
    Signed-off-by: Jan Kara <jack@suse.cz>

diff --git a/include/linux/fanotify.h b/include/linux/fanotify.h
index e70fccc3757e..a8c3fc54276d 100644
--- a/include/linux/fanotify.h
+++ b/include/linux/fanotify.h
@@ -4,9 +4,6 @@
 
 #include <uapi/linux/fanotify.h>
 
-/* not valid from userspace, only kernel internal */
-#define FAN_MARK_ONDIR		0x80000000
-
 #define FAN_GROUP_FLAG(group, flag) \
 	((group)->fanotify_data.flags & (flag))
 

commit b723a7911d028fb55f67a63c4c4d895f72e059d4
Author: Amir Goldstein <amir73il@gmail.com>
Date:   Thu Oct 4 00:25:32 2018 +0300

    fanotify: fix collision of internal and uapi mark flags
    
    The new mark flag FAN_MARK_FILESYSTEMS collides with existing internal
    flag FAN_MARK_ONDIR. Change internal flag value to avoid the collision.
    
    Fixes: d54f4fba889b ("fanotify: add API to attach/detach super block mark")
    Signed-off-by: Amir Goldstein <amir73il@gmail.com>
    Signed-off-by: Jan Kara <jack@suse.cz>

diff --git a/include/linux/fanotify.h b/include/linux/fanotify.h
index 9c5ea3bdfaa0..e70fccc3757e 100644
--- a/include/linux/fanotify.h
+++ b/include/linux/fanotify.h
@@ -5,7 +5,7 @@
 #include <uapi/linux/fanotify.h>
 
 /* not valid from userspace, only kernel internal */
-#define FAN_MARK_ONDIR		0x00000100
+#define FAN_MARK_ONDIR		0x80000000
 
 #define FAN_GROUP_FLAG(group, flag) \
 	((group)->fanotify_data.flags & (flag))

commit 96a71f21ef1fcc32bea07c612a332a89a213f054
Author: Amir Goldstein <amir73il@gmail.com>
Date:   Fri Sep 21 21:20:30 2018 +0300

    fanotify: store fanotify_init() flags in group's fanotify_data
    
    This averts the need to re-generate flags in fanotify_show_fdinfo()
    and sets the scene for addition of more upcoming flags without growing
    new members to the fanotify_data struct.
    
    Signed-off-by: Amir Goldstein <amir73il@gmail.com>
    Signed-off-by: Jan Kara <jack@suse.cz>

diff --git a/include/linux/fanotify.h b/include/linux/fanotify.h
index 096c96f4f16a..9c5ea3bdfaa0 100644
--- a/include/linux/fanotify.h
+++ b/include/linux/fanotify.h
@@ -6,4 +6,8 @@
 
 /* not valid from userspace, only kernel internal */
 #define FAN_MARK_ONDIR		0x00000100
+
+#define FAN_GROUP_FLAG(group, flag) \
+	((group)->fanotify_data.flags & (flag))
+
 #endif /* _LINUX_FANOTIFY_H */

commit b24413180f5600bcb3bb70fbed5cf186b60864bd
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Wed Nov 1 15:07:57 2017 +0100

    License cleanup: add SPDX GPL-2.0 license identifier to files with no license
    
    Many source files in the tree are missing licensing information, which
    makes it harder for compliance tools to determine the correct license.
    
    By default all files without license information are under the default
    license of the kernel, which is GPL version 2.
    
    Update the files which contain no license information with the 'GPL-2.0'
    SPDX license identifier.  The SPDX identifier is a legally binding
    shorthand, which can be used instead of the full boiler plate text.
    
    This patch is based on work done by Thomas Gleixner and Kate Stewart and
    Philippe Ombredanne.
    
    How this work was done:
    
    Patches were generated and checked against linux-4.14-rc6 for a subset of
    the use cases:
     - file had no licensing information it it.
     - file was a */uapi/* one with no licensing information in it,
     - file was a */uapi/* one with existing licensing information,
    
    Further patches will be generated in subsequent months to fix up cases
    where non-standard license headers were used, and references to license
    had to be inferred by heuristics based on keywords.
    
    The analysis to determine which SPDX License Identifier to be applied to
    a file was done in a spreadsheet of side by side results from of the
    output of two independent scanners (ScanCode & Windriver) producing SPDX
    tag:value files created by Philippe Ombredanne.  Philippe prepared the
    base worksheet, and did an initial spot review of a few 1000 files.
    
    The 4.13 kernel was the starting point of the analysis with 60,537 files
    assessed.  Kate Stewart did a file by file comparison of the scanner
    results in the spreadsheet to determine which SPDX license identifier(s)
    to be applied to the file. She confirmed any determination that was not
    immediately clear with lawyers working with the Linux Foundation.
    
    Criteria used to select files for SPDX license identifier tagging was:
     - Files considered eligible had to be source code files.
     - Make and config files were included as candidates if they contained >5
       lines of source
     - File already had some variant of a license header in it (even if <5
       lines).
    
    All documentation files were explicitly excluded.
    
    The following heuristics were used to determine which SPDX license
    identifiers to apply.
    
     - when both scanners couldn't find any license traces, file was
       considered to have no license information in it, and the top level
       COPYING file license applied.
    
       For non */uapi/* files that summary was:
    
       SPDX license identifier                            # files
       ---------------------------------------------------|-------
       GPL-2.0                                              11139
    
       and resulted in the first patch in this series.
    
       If that file was a */uapi/* path one, it was "GPL-2.0 WITH
       Linux-syscall-note" otherwise it was "GPL-2.0".  Results of that was:
    
       SPDX license identifier                            # files
       ---------------------------------------------------|-------
       GPL-2.0 WITH Linux-syscall-note                        930
    
       and resulted in the second patch in this series.
    
     - if a file had some form of licensing information in it, and was one
       of the */uapi/* ones, it was denoted with the Linux-syscall-note if
       any GPL family license was found in the file or had no licensing in
       it (per prior point).  Results summary:
    
       SPDX license identifier                            # files
       ---------------------------------------------------|------
       GPL-2.0 WITH Linux-syscall-note                       270
       GPL-2.0+ WITH Linux-syscall-note                      169
       ((GPL-2.0 WITH Linux-syscall-note) OR BSD-2-Clause)    21
       ((GPL-2.0 WITH Linux-syscall-note) OR BSD-3-Clause)    17
       LGPL-2.1+ WITH Linux-syscall-note                      15
       GPL-1.0+ WITH Linux-syscall-note                       14
       ((GPL-2.0+ WITH Linux-syscall-note) OR BSD-3-Clause)    5
       LGPL-2.0+ WITH Linux-syscall-note                       4
       LGPL-2.1 WITH Linux-syscall-note                        3
       ((GPL-2.0 WITH Linux-syscall-note) OR MIT)              3
       ((GPL-2.0 WITH Linux-syscall-note) AND MIT)             1
    
       and that resulted in the third patch in this series.
    
     - when the two scanners agreed on the detected license(s), that became
       the concluded license(s).
    
     - when there was disagreement between the two scanners (one detected a
       license but the other didn't, or they both detected different
       licenses) a manual inspection of the file occurred.
    
     - In most cases a manual inspection of the information in the file
       resulted in a clear resolution of the license that should apply (and
       which scanner probably needed to revisit its heuristics).
    
     - When it was not immediately clear, the license identifier was
       confirmed with lawyers working with the Linux Foundation.
    
     - If there was any question as to the appropriate license identifier,
       the file was flagged for further research and to be revisited later
       in time.
    
    In total, over 70 hours of logged manual review was done on the
    spreadsheet to determine the SPDX license identifiers to apply to the
    source files by Kate, Philippe, Thomas and, in some cases, confirmation
    by lawyers working with the Linux Foundation.
    
    Kate also obtained a third independent scan of the 4.13 code base from
    FOSSology, and compared selected files where the other two scanners
    disagreed against that SPDX file, to see if there was new insights.  The
    Windriver scanner is based on an older version of FOSSology in part, so
    they are related.
    
    Thomas did random spot checks in about 500 files from the spreadsheets
    for the uapi headers and agreed with SPDX license identifier in the
    files he inspected. For the non-uapi files Thomas did random spot checks
    in about 15000 files.
    
    In initial set of patches against 4.14-rc6, 3 files were found to have
    copy/paste license identifier errors, and have been fixed to reflect the
    correct identifier.
    
    Additionally Philippe spent 10 hours this week doing a detailed manual
    inspection and review of the 12,461 patched files from the initial patch
    version early this week with:
     - a full scancode scan run, collecting the matched texts, detected
       license ids and scores
     - reviewing anything where there was a license detected (about 500+
       files) to ensure that the applied SPDX license was correct
     - reviewing anything where there was no detection but the patch license
       was not GPL-2.0 WITH Linux-syscall-note to ensure that the applied
       SPDX license was correct
    
    This produced a worksheet with 20 files needing minor correction.  This
    worksheet was then exported into 3 different .csv files for the
    different types of files to be modified.
    
    These .csv files were then reviewed by Greg.  Thomas wrote a script to
    parse the csv files and add the proper SPDX tag to the file, in the
    format that the file expected.  This script was further refined by Greg
    based on the output to detect more types of files automatically and to
    distinguish between header and source .c files (which need different
    comment types.)  Finally Greg ran the script using the .csv files to
    generate the patches.
    
    Reviewed-by: Kate Stewart <kstewart@linuxfoundation.org>
    Reviewed-by: Philippe Ombredanne <pombredanne@nexb.com>
    Reviewed-by: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/include/linux/fanotify.h b/include/linux/fanotify.h
index cef93ddcc5a0..096c96f4f16a 100644
--- a/include/linux/fanotify.h
+++ b/include/linux/fanotify.h
@@ -1,3 +1,4 @@
+/* SPDX-License-Identifier: GPL-2.0 */
 #ifndef _LINUX_FANOTIFY_H
 #define _LINUX_FANOTIFY_H
 

commit 607ca46e97a1b6594b29647d98a32d545c24bdff
Author: David Howells <dhowells@redhat.com>
Date:   Sat Oct 13 10:46:48 2012 +0100

    UAPI: (Scripted) Disintegrate include/linux
    
    Signed-off-by: David Howells <dhowells@redhat.com>
    Acked-by: Arnd Bergmann <arnd@arndb.de>
    Acked-by: Thomas Gleixner <tglx@linutronix.de>
    Acked-by: Michael Kerrisk <mtk.manpages@gmail.com>
    Acked-by: Paul E. McKenney <paulmck@linux.vnet.ibm.com>
    Acked-by: Dave Jones <davej@redhat.com>

diff --git a/include/linux/fanotify.h b/include/linux/fanotify.h
index 6c6133f76e16..cef93ddcc5a0 100644
--- a/include/linux/fanotify.h
+++ b/include/linux/fanotify.h
@@ -1,120 +1,8 @@
 #ifndef _LINUX_FANOTIFY_H
 #define _LINUX_FANOTIFY_H
 
-#include <linux/types.h>
+#include <uapi/linux/fanotify.h>
 
-/* the following events that user-space can register for */
-#define FAN_ACCESS		0x00000001	/* File was accessed */
-#define FAN_MODIFY		0x00000002	/* File was modified */
-#define FAN_CLOSE_WRITE		0x00000008	/* Writtable file closed */
-#define FAN_CLOSE_NOWRITE	0x00000010	/* Unwrittable file closed */
-#define FAN_OPEN		0x00000020	/* File was opened */
-
-#define FAN_Q_OVERFLOW		0x00004000	/* Event queued overflowed */
-
-#define FAN_OPEN_PERM		0x00010000	/* File open in perm check */
-#define FAN_ACCESS_PERM		0x00020000	/* File accessed in perm check */
-
-#define FAN_ONDIR		0x40000000	/* event occurred against dir */
-
-#define FAN_EVENT_ON_CHILD	0x08000000	/* interested in child events */
-
-/* helper events */
-#define FAN_CLOSE		(FAN_CLOSE_WRITE | FAN_CLOSE_NOWRITE) /* close */
-
-/* flags used for fanotify_init() */
-#define FAN_CLOEXEC		0x00000001
-#define FAN_NONBLOCK		0x00000002
-
-/* These are NOT bitwise flags.  Both bits are used togther.  */
-#define FAN_CLASS_NOTIF		0x00000000
-#define FAN_CLASS_CONTENT	0x00000004
-#define FAN_CLASS_PRE_CONTENT	0x00000008
-#define FAN_ALL_CLASS_BITS	(FAN_CLASS_NOTIF | FAN_CLASS_CONTENT | \
-				 FAN_CLASS_PRE_CONTENT)
-
-#define FAN_UNLIMITED_QUEUE	0x00000010
-#define FAN_UNLIMITED_MARKS	0x00000020
-
-#define FAN_ALL_INIT_FLAGS	(FAN_CLOEXEC | FAN_NONBLOCK | \
-				 FAN_ALL_CLASS_BITS | FAN_UNLIMITED_QUEUE |\
-				 FAN_UNLIMITED_MARKS)
-
-/* flags used for fanotify_modify_mark() */
-#define FAN_MARK_ADD		0x00000001
-#define FAN_MARK_REMOVE		0x00000002
-#define FAN_MARK_DONT_FOLLOW	0x00000004
-#define FAN_MARK_ONLYDIR	0x00000008
-#define FAN_MARK_MOUNT		0x00000010
-#define FAN_MARK_IGNORED_MASK	0x00000020
-#define FAN_MARK_IGNORED_SURV_MODIFY	0x00000040
-#define FAN_MARK_FLUSH		0x00000080
-#ifdef __KERNEL__
 /* not valid from userspace, only kernel internal */
 #define FAN_MARK_ONDIR		0x00000100
-#endif
-
-#define FAN_ALL_MARK_FLAGS	(FAN_MARK_ADD |\
-				 FAN_MARK_REMOVE |\
-				 FAN_MARK_DONT_FOLLOW |\
-				 FAN_MARK_ONLYDIR |\
-				 FAN_MARK_MOUNT |\
-				 FAN_MARK_IGNORED_MASK |\
-				 FAN_MARK_IGNORED_SURV_MODIFY |\
-				 FAN_MARK_FLUSH)
-
-/*
- * All of the events - we build the list by hand so that we can add flags in
- * the future and not break backward compatibility.  Apps will get only the
- * events that they originally wanted.  Be sure to add new events here!
- */
-#define FAN_ALL_EVENTS (FAN_ACCESS |\
-			FAN_MODIFY |\
-			FAN_CLOSE |\
-			FAN_OPEN)
-
-/*
- * All events which require a permission response from userspace
- */
-#define FAN_ALL_PERM_EVENTS (FAN_OPEN_PERM |\
-			     FAN_ACCESS_PERM)
-
-#define FAN_ALL_OUTGOING_EVENTS	(FAN_ALL_EVENTS |\
-				 FAN_ALL_PERM_EVENTS |\
-				 FAN_Q_OVERFLOW)
-
-#define FANOTIFY_METADATA_VERSION	3
-
-struct fanotify_event_metadata {
-	__u32 event_len;
-	__u8 vers;
-	__u8 reserved;
-	__u16 metadata_len;
-	__aligned_u64 mask;
-	__s32 fd;
-	__s32 pid;
-};
-
-struct fanotify_response {
-	__s32 fd;
-	__u32 response;
-};
-
-/* Legit userspace responses to a _PERM event */
-#define FAN_ALLOW	0x01
-#define FAN_DENY	0x02
-/* No fd set in event */
-#define FAN_NOFD	-1
-
-/* Helper functions to deal with fanotify_event_metadata buffers */
-#define FAN_EVENT_METADATA_LEN (sizeof(struct fanotify_event_metadata))
-
-#define FAN_EVENT_NEXT(meta, len) ((len) -= (meta)->event_len, \
-				   (struct fanotify_event_metadata*)(((char *)(meta)) + \
-				   (meta)->event_len))
-
-#define FAN_EVENT_OK(meta, len)	((long)(len) >= (long)FAN_EVENT_METADATA_LEN && \
-				(long)(meta)->event_len >= (long)FAN_EVENT_METADATA_LEN && \
-				(long)(meta)->event_len <= (long)(len))
-
 #endif /* _LINUX_FANOTIFY_H */

commit 62731fa0c893515dc6cbc3e0a2879a92793c735f
Author: Alexey Zaytsev <alexey.zaytsev@gmail.com>
Date:   Mon Nov 22 00:33:03 2010 +0000

    fanotify: split version into version and metadata_len
    
    To implement per event type optional headers we are interested in
    knowing how long the metadata structure is.  This patch slits the __u32
    version field into a __u8 version and a __u16 metadata_len field (with
    __u8 left over).  This should allow for backwards compat ABI.
    
    Signed-off-by: Alexey Zaytsev <alexey.zaytsev@gmail.com>
    [rewrote descrtion and changed object sizes and ordering - eparis]
    Signed-off-by: Eric Paris <eparis@redhat.com>

diff --git a/include/linux/fanotify.h b/include/linux/fanotify.h
index c73224315aee..6c6133f76e16 100644
--- a/include/linux/fanotify.h
+++ b/include/linux/fanotify.h
@@ -83,11 +83,13 @@
 				 FAN_ALL_PERM_EVENTS |\
 				 FAN_Q_OVERFLOW)
 
-#define FANOTIFY_METADATA_VERSION	2
+#define FANOTIFY_METADATA_VERSION	3
 
 struct fanotify_event_metadata {
 	__u32 event_len;
-	__u32 vers;
+	__u8 vers;
+	__u8 reserved;
+	__u16 metadata_len;
 	__aligned_u64 mask;
 	__s32 fd;
 	__s32 pid;

commit e9a3854fd4ff3907e6c200a3980e19365ee695e9
Author: Lino Sanfilippo <LinoSanfilippo@gmx.de>
Date:   Wed Nov 24 18:22:09 2010 +0100

    fanotify: Introduce FAN_NOFD
    
    FAN_NOFD is used in fanotify events that do not provide an open file
    descriptor (like the overflow_event).
    
    Signed-off-by: Lino Sanfilippo <LinoSanfilippo@gmx.de>
    Signed-off-by: Eric Paris <eparis@redhat.com>

diff --git a/include/linux/fanotify.h b/include/linux/fanotify.h
index bdbf9bb29b54..c73224315aee 100644
--- a/include/linux/fanotify.h
+++ b/include/linux/fanotify.h
@@ -101,6 +101,8 @@ struct fanotify_response {
 /* Legit userspace responses to a _PERM event */
 #define FAN_ALLOW	0x01
 #define FAN_DENY	0x02
+/* No fd set in event */
+#define FAN_NOFD	-1
 
 /* Helper functions to deal with fanotify_event_metadata buffers */
 #define FAN_EVENT_METADATA_LEN (sizeof(struct fanotify_event_metadata))

commit 88d60c32765716289abeb362c44adf6c35c6824c
Author: Eric Paris <eparis@redhat.com>
Date:   Mon Nov 8 18:19:22 2010 -0500

    fanotify: remove packed from access response message
    
    Since fanotify has decided to be careful about alignment and packing
    rather than rely on __attribute__((packed)) for multiarch support.
    Since this attribute isn't doing anything on fanotify_response we just
    drop it.  This does not break API/ABI.
    
    Suggested-by: Tvrtko Ursulin <tvrtko.ursulin@sophos.com>
    Signed-off-by: Eric Paris <eparis@redhat.com>

diff --git a/include/linux/fanotify.h b/include/linux/fanotify.h
index 0f0121467fc4..bdbf9bb29b54 100644
--- a/include/linux/fanotify.h
+++ b/include/linux/fanotify.h
@@ -96,7 +96,7 @@ struct fanotify_event_metadata {
 struct fanotify_response {
 	__s32 fd;
 	__u32 response;
-} __attribute__ ((packed));
+};
 
 /* Legit userspace responses to a _PERM event */
 #define FAN_ALLOW	0x01

commit 50e4a98914de13c6f38f50fd1afa06e2c18b3cf7
Author: Stefan Hajnoczi <stefanha@linux.vnet.ibm.com>
Date:   Thu Oct 28 17:21:59 2010 -0400

    fanotify: Fix FAN_CLOSE comments
    
    The comments for FAN_CLOSE_WRITE and FAN_CLOSE_NOWRITE do not match
    FS_CLOSE_WRITE and FS_CLOSE_NOWRITE, respectively.  WRITE is for
    writable files while NOWRITE is for non-writable files.
    
    Signed-off-by: Stefan Hajnoczi <stefanha@linux.vnet.ibm.com>
    Signed-off-by: Eric Paris <eparis@redhat.com>

diff --git a/include/linux/fanotify.h b/include/linux/fanotify.h
index 5e0400a80c33..0f0121467fc4 100644
--- a/include/linux/fanotify.h
+++ b/include/linux/fanotify.h
@@ -6,8 +6,8 @@
 /* the following events that user-space can register for */
 #define FAN_ACCESS		0x00000001	/* File was accessed */
 #define FAN_MODIFY		0x00000002	/* File was modified */
-#define FAN_CLOSE_WRITE		0x00000008	/* Unwrittable file closed */
-#define FAN_CLOSE_NOWRITE	0x00000010	/* Writtable file closed */
+#define FAN_CLOSE_WRITE		0x00000008	/* Writtable file closed */
+#define FAN_CLOSE_NOWRITE	0x00000010	/* Unwrittable file closed */
 #define FAN_OPEN		0x00000020	/* File was opened */
 
 #define FAN_Q_OVERFLOW		0x00004000	/* Event queued overflowed */

commit 8fcd65280abc4699510f1853ede31f43e8a3783a
Author: Eric Paris <eparis@redhat.com>
Date:   Thu Oct 28 17:21:59 2010 -0400

    fanotify: ignore events on directories unless specifically requested
    
    fanotify has a very limited number of events it sends on directories.  The
    usefulness of these events is yet to be seen and still we send them.  This
    is particularly painful for mount marks where one might receive many of
    these useless events.  As such this patch will drop events on IS_DIR()
    inodes unless they were explictly requested with FAN_ON_DIR.
    
    This means that a mark on a directory without FAN_EVENT_ON_CHILD or
    FAN_ON_DIR is meaningless and will result in no events ever (although it
    will still be allowed since detecting it is hard)
    
    Signed-off-by: Eric Paris <eparis@redhat.com>

diff --git a/include/linux/fanotify.h b/include/linux/fanotify.h
index 7592a366a57b..5e0400a80c33 100644
--- a/include/linux/fanotify.h
+++ b/include/linux/fanotify.h
@@ -10,13 +10,15 @@
 #define FAN_CLOSE_NOWRITE	0x00000010	/* Writtable file closed */
 #define FAN_OPEN		0x00000020	/* File was opened */
 
-#define FAN_EVENT_ON_CHILD	0x08000000	/* interested in child events */
-
 #define FAN_Q_OVERFLOW		0x00004000	/* Event queued overflowed */
 
 #define FAN_OPEN_PERM		0x00010000	/* File open in perm check */
 #define FAN_ACCESS_PERM		0x00020000	/* File accessed in perm check */
 
+#define FAN_ONDIR		0x40000000	/* event occurred against dir */
+
+#define FAN_EVENT_ON_CHILD	0x08000000	/* interested in child events */
+
 /* helper events */
 #define FAN_CLOSE		(FAN_CLOSE_WRITE | FAN_CLOSE_NOWRITE) /* close */
 
@@ -47,6 +49,10 @@
 #define FAN_MARK_IGNORED_MASK	0x00000020
 #define FAN_MARK_IGNORED_SURV_MODIFY	0x00000040
 #define FAN_MARK_FLUSH		0x00000080
+#ifdef __KERNEL__
+/* not valid from userspace, only kernel internal */
+#define FAN_MARK_ONDIR		0x00000100
+#endif
 
 #define FAN_ALL_MARK_FLAGS	(FAN_MARK_ADD |\
 				 FAN_MARK_REMOVE |\

commit ac7e22dcfafd04c842a02057afd6541c1d613ef9
Author: Eric Paris <eparis@redhat.com>
Date:   Thu Oct 28 17:21:58 2010 -0400

    fanotify: allow userspace to override max marks
    
    Some fanotify groups, especially those like AV scanners, will need to place
    lots of marks, particularly ignore marks.  Since ignore marks do not pin
    inodes in cache and are cleared if the inode is removed from core (usually
    under memory pressure) we expose an interface for listeners, with
    CAP_SYS_ADMIN, to override the maximum number of marks and be allowed to
    set and 'unlimited' number of marks.  Programs which make use of this
    feature will be able to OOM a machine.
    
    Signed-off-by: Eric Paris <eparis@redhat.com>

diff --git a/include/linux/fanotify.h b/include/linux/fanotify.h
index e37f559c95e1..7592a366a57b 100644
--- a/include/linux/fanotify.h
+++ b/include/linux/fanotify.h
@@ -32,9 +32,11 @@
 				 FAN_CLASS_PRE_CONTENT)
 
 #define FAN_UNLIMITED_QUEUE	0x00000010
+#define FAN_UNLIMITED_MARKS	0x00000020
 
 #define FAN_ALL_INIT_FLAGS	(FAN_CLOEXEC | FAN_NONBLOCK | \
-				 FAN_ALL_CLASS_BITS | FAN_UNLIMITED_QUEUE)
+				 FAN_ALL_CLASS_BITS | FAN_UNLIMITED_QUEUE |\
+				 FAN_UNLIMITED_MARKS)
 
 /* flags used for fanotify_modify_mark() */
 #define FAN_MARK_ADD		0x00000001

commit 5dd03f55fd2f21916ce248bb2e68bbfb39d94fe5
Author: Eric Paris <eparis@redhat.com>
Date:   Thu Oct 28 17:21:57 2010 -0400

    fanotify: allow userspace to override max queue depth
    
    fanotify has a defualt max queue depth.  This patch allows processes which
    explicitly request it to have an 'unlimited' queue depth.  These processes
    need to be very careful to make sure they cannot fall far enough behind
    that they OOM the box.  Thus this flag is gated on CAP_SYS_ADMIN.
    
    Signed-off-by: Eric Paris <eparis@redhat.com>

diff --git a/include/linux/fanotify.h b/include/linux/fanotify.h
index ed479b6fef7b..e37f559c95e1 100644
--- a/include/linux/fanotify.h
+++ b/include/linux/fanotify.h
@@ -28,12 +28,13 @@
 #define FAN_CLASS_NOTIF		0x00000000
 #define FAN_CLASS_CONTENT	0x00000004
 #define FAN_CLASS_PRE_CONTENT	0x00000008
-
 #define FAN_ALL_CLASS_BITS	(FAN_CLASS_NOTIF | FAN_CLASS_CONTENT | \
 				 FAN_CLASS_PRE_CONTENT)
 
+#define FAN_UNLIMITED_QUEUE	0x00000010
+
 #define FAN_ALL_INIT_FLAGS	(FAN_CLOEXEC | FAN_NONBLOCK | \
-				 FAN_ALL_CLASS_BITS)
+				 FAN_ALL_CLASS_BITS | FAN_UNLIMITED_QUEUE)
 
 /* flags used for fanotify_modify_mark() */
 #define FAN_MARK_ADD		0x00000001

commit 2529a0df0f64dab1f60ae08e038b89c53a6b4c02
Author: Eric Paris <eparis@redhat.com>
Date:   Thu Oct 28 17:21:57 2010 -0400

    fsnotify: implement a default maximum queue depth
    
    Currently fanotify has no maximum queue depth.  Since fanotify is
    CAP_SYS_ADMIN only this does not pose a normal user DoS issue, but it
    certianly is possible that an fanotify listener which can't keep up could
    OOM the box.  This patch implements a default 16k depth.  This is the same
    default depth used by inotify, but given fanotify's better queue merging in
    many situations this queue will contain many additional useful events by
    comparison.
    
    Signed-off-by: Eric Paris <eparis@redhat.com>

diff --git a/include/linux/fanotify.h b/include/linux/fanotify.h
index a97c96d28c07..ed479b6fef7b 100644
--- a/include/linux/fanotify.h
+++ b/include/linux/fanotify.h
@@ -12,7 +12,6 @@
 
 #define FAN_EVENT_ON_CHILD	0x08000000	/* interested in child events */
 
-/* FIXME currently Q's have no limit.... */
 #define FAN_Q_OVERFLOW		0x00004000	/* Event queued overflowed */
 
 #define FAN_OPEN_PERM		0x00010000	/* File open in perm check */

commit bbf2aba50f6ed7c8dd53623fa1437b539928ac39
Author: Eric Paris <eparis@redhat.com>
Date:   Thu Oct 28 17:21:57 2010 -0400

    fanotify: allow userspace to flush all marks
    
    fanotify is supposed to be able to flush all marks.  This is mostly useful
    for the AV community to flush all cached decisions on a security policy
    change.  This functionality has existed in the kernel but wasn't correctly
    exposed to userspace.
    
    Signed-off-by: Eric Paris <eparis@redhat.com>

diff --git a/include/linux/fanotify.h b/include/linux/fanotify.h
index 8a621c1a0991..a97c96d28c07 100644
--- a/include/linux/fanotify.h
+++ b/include/linux/fanotify.h
@@ -52,7 +52,8 @@
 				 FAN_MARK_ONLYDIR |\
 				 FAN_MARK_MOUNT |\
 				 FAN_MARK_IGNORED_MASK |\
-				 FAN_MARK_IGNORED_SURV_MODIFY)
+				 FAN_MARK_IGNORED_SURV_MODIFY |\
+				 FAN_MARK_FLUSH)
 
 /*
  * All of the events - we build the list by hand so that we can add flags in

commit 2868201965419b9011f3f07fd80e765181343cb1
Author: Eric Paris <eparis@redhat.com>
Date:   Thu Oct 28 17:21:56 2010 -0400

    fanotify: use __aligned_u64 in fanotify userspace metadata
    
    Currently the userspace struct exposed by fanotify uses
    __attribute__((packed)) to make sure that alignment works on multiarch
    platforms.  Since this causes a severe performance penalty on some
    platforms we are going to switch to using explicit alignment notation on
    the 64bit values so we don't have to use 'packed'
    
    Signed-off-by: Eric Paris <eparis@redhat.com>

diff --git a/include/linux/fanotify.h b/include/linux/fanotify.h
index 2c89ce7b644e..8a621c1a0991 100644
--- a/include/linux/fanotify.h
+++ b/include/linux/fanotify.h
@@ -79,10 +79,10 @@
 struct fanotify_event_metadata {
 	__u32 event_len;
 	__u32 vers;
-	__u64 mask;
+	__aligned_u64 mask;
 	__s32 fd;
 	__s32 pid;
-} __attribute__ ((packed));
+};
 
 struct fanotify_response {
 	__s32 fd;

commit 4231a23530a30e86eb32fbe869bbef1b3e54d5aa
Author: Eric Paris <eparis@redhat.com>
Date:   Thu Oct 28 17:21:56 2010 -0400

    fanotify: implement fanotify listener ordering
    
    The fanotify listeners needs to be able to specify what types of operations
    they are going to perform so they can be ordered appropriately between other
    listeners doing other types of operations.  They need this to be able to make
    sure that things like hierarchichal storage managers will get access to inodes
    before processes which need the data.  This patch defines 3 possible uses
    which groups must indicate in the fanotify_init() flags.
    
    FAN_CLASS_PRE_CONTENT
    FAN_CLASS_CONTENT
    FAN_CLASS_NOTIF
    
    Groups will receive notification in that order.  The order between 2 groups in
    the same class is undeterministic.
    
    FAN_CLASS_PRE_CONTENT is intended to be used by listeners which need access to
    the inode before they are certain that the inode contains it's final data.  A
    hierarchical storage manager should choose to use this class.
    
    FAN_CLASS_CONTENT is intended to be used by listeners which need access to the
    inode after it contains its intended contents.  This would be the appropriate
    level for an AV solution or document control system.
    
    FAN_CLASS_NOTIF is intended for normal async notification about access, much the
    same as inotify and dnotify.  Syncronous permissions events are not permitted
    at this class.
    
    Signed-off-by: Eric Paris <eparis@redhat.com>

diff --git a/include/linux/fanotify.h b/include/linux/fanotify.h
index 63531a6b4d2a..2c89ce7b644e 100644
--- a/include/linux/fanotify.h
+++ b/include/linux/fanotify.h
@@ -25,7 +25,16 @@
 #define FAN_CLOEXEC		0x00000001
 #define FAN_NONBLOCK		0x00000002
 
-#define FAN_ALL_INIT_FLAGS	(FAN_CLOEXEC | FAN_NONBLOCK)
+/* These are NOT bitwise flags.  Both bits are used togther.  */
+#define FAN_CLASS_NOTIF		0x00000000
+#define FAN_CLASS_CONTENT	0x00000004
+#define FAN_CLASS_PRE_CONTENT	0x00000008
+
+#define FAN_ALL_CLASS_BITS	(FAN_CLASS_NOTIF | FAN_CLASS_CONTENT | \
+				 FAN_CLASS_PRE_CONTENT)
+
+#define FAN_ALL_INIT_FLAGS	(FAN_CLOEXEC | FAN_NONBLOCK | \
+				 FAN_ALL_CLASS_BITS)
 
 /* flags used for fanotify_modify_mark() */
 #define FAN_MARK_ADD		0x00000001

commit 0fb85621df4f9f7c663c6c77c302e821a832c95e
Author: Tvrtko Ursulin <tvrtko.ursulin@sophos.com>
Date:   Fri Aug 20 10:02:15 2010 +0100

    fanotify: resize pid and reorder structure
    
    resize pid and reorder the fanotify_event_metadata so it is naturally
    aligned and we can work towards dropping the packed attributed
    
    Signed-off-by: Tvrtko Ursulin <tvrtko.ursulin@sophos.com>
    Cc: Andreas Dilger <adilger@dilger.ca>
    Signed-off-by: Eric Paris <eparis@redhat.com>

diff --git a/include/linux/fanotify.h b/include/linux/fanotify.h
index 985435622ecd..63531a6b4d2a 100644
--- a/include/linux/fanotify.h
+++ b/include/linux/fanotify.h
@@ -65,14 +65,14 @@
 				 FAN_ALL_PERM_EVENTS |\
 				 FAN_Q_OVERFLOW)
 
-#define FANOTIFY_METADATA_VERSION	1
+#define FANOTIFY_METADATA_VERSION	2
 
 struct fanotify_event_metadata {
 	__u32 event_len;
 	__u32 vers;
-	__s32 fd;
 	__u64 mask;
-	__s64 pid;
+	__s32 fd;
+	__s32 pid;
 } __attribute__ ((packed));
 
 struct fanotify_response {

commit 2eebf582c9b3106abb9c33f4fc0a347fb9391037
Author: Eric Paris <eparis@redhat.com>
Date:   Wed Aug 18 12:25:50 2010 -0400

    fanotify: flush outstanding perm requests on group destroy
    
    When an fanotify listener is closing it may cause a deadlock between the
    listener and the original task doing an fs operation.  If the original task
    is waiting for a permissions response it will be holding the srcu lock.  The
    listener cannot clean up and exit until after that srcu lock is syncronized.
    Thus deadlock.  The fix introduced here is to stop accepting new permissions
    events when a listener is shutting down and to grant permission for all
    outstanding events.  Thus the original task will eventually release the srcu
    lock and the listener can complete shutdown.
    
    Reported-by: Andreas Gruenbacher <agruen@suse.de>
    Cc: Andreas Gruenbacher <agruen@suse.de>
    Signed-off-by: Eric Paris <eparis@redhat.com>

diff --git a/include/linux/fanotify.h b/include/linux/fanotify.h
index f0949a57ca9d..985435622ecd 100644
--- a/include/linux/fanotify.h
+++ b/include/linux/fanotify.h
@@ -95,11 +95,4 @@ struct fanotify_response {
 				(long)(meta)->event_len >= (long)FAN_EVENT_METADATA_LEN && \
 				(long)(meta)->event_len <= (long)(len))
 
-#ifdef __KERNEL__
-
-struct fanotify_wait {
-	struct fsnotify_event *event;
-	__s32 fd;
-};
-#endif /* __KERNEL__ */
 #endif /* _LINUX_FANOTIFY_H */

commit b2d879096ac799722e6017ee82c0586f0d101c9c
Author: Eric Paris <eparis@redhat.com>
Date:   Thu Dec 17 21:24:34 2009 -0500

    fanotify: userspace interface for permission responses
    
    fanotify groups need to respond to events which include permissions types.
    To do so groups will send a response using write() on the fanotify_fd they
    have open.
    
    Signed-off-by: Eric Paris <eparis@redhat.com>

diff --git a/include/linux/fanotify.h b/include/linux/fanotify.h
index 02f80676c238..f0949a57ca9d 100644
--- a/include/linux/fanotify.h
+++ b/include/linux/fanotify.h
@@ -75,6 +75,11 @@ struct fanotify_event_metadata {
 	__s64 pid;
 } __attribute__ ((packed));
 
+struct fanotify_response {
+	__s32 fd;
+	__u32 response;
+} __attribute__ ((packed));
+
 /* Legit userspace responses to a _PERM event */
 #define FAN_ALLOW	0x01
 #define FAN_DENY	0x02

commit 9e66e4233db9c7e31e9ee706be2c9ddd54cf99b3
Author: Eric Paris <eparis@redhat.com>
Date:   Thu Dec 17 21:24:34 2009 -0500

    fanotify: permissions and blocking
    
    This is the backend work needed for fanotify to support the new
    FS_OPEN_PERM and FS_ACCESS_PERM fsnotify events.  This is done using the
    new fsnotify secondary queue.  No userspace interface is provided actually
    respond to or request these events.
    
    Signed-off-by: Eric Paris <eparis@redhat.com>

diff --git a/include/linux/fanotify.h b/include/linux/fanotify.h
index 385896c9f828..02f80676c238 100644
--- a/include/linux/fanotify.h
+++ b/include/linux/fanotify.h
@@ -15,6 +15,9 @@
 /* FIXME currently Q's have no limit.... */
 #define FAN_Q_OVERFLOW		0x00004000	/* Event queued overflowed */
 
+#define FAN_OPEN_PERM		0x00010000	/* File open in perm check */
+#define FAN_ACCESS_PERM		0x00020000	/* File accessed in perm check */
+
 /* helper events */
 #define FAN_CLOSE		(FAN_CLOSE_WRITE | FAN_CLOSE_NOWRITE) /* close */
 
@@ -52,7 +55,14 @@
 			FAN_CLOSE |\
 			FAN_OPEN)
 
+/*
+ * All events which require a permission response from userspace
+ */
+#define FAN_ALL_PERM_EVENTS (FAN_OPEN_PERM |\
+			     FAN_ACCESS_PERM)
+
 #define FAN_ALL_OUTGOING_EVENTS	(FAN_ALL_EVENTS |\
+				 FAN_ALL_PERM_EVENTS |\
 				 FAN_Q_OVERFLOW)
 
 #define FANOTIFY_METADATA_VERSION	1
@@ -65,6 +75,10 @@ struct fanotify_event_metadata {
 	__s64 pid;
 } __attribute__ ((packed));
 
+/* Legit userspace responses to a _PERM event */
+#define FAN_ALLOW	0x01
+#define FAN_DENY	0x02
+
 /* Helper functions to deal with fanotify_event_metadata buffers */
 #define FAN_EVENT_METADATA_LEN (sizeof(struct fanotify_event_metadata))
 
@@ -78,5 +92,9 @@ struct fanotify_event_metadata {
 
 #ifdef __KERNEL__
 
+struct fanotify_wait {
+	struct fsnotify_event *event;
+	__s32 fd;
+};
 #endif /* __KERNEL__ */
 #endif /* _LINUX_FANOTIFY_H */

commit 4d92604cc90aa18bbbe0f6e23b7a9fdb612836d3
Author: Eric Paris <eparis@redhat.com>
Date:   Thu Dec 17 21:24:34 2009 -0500

    fanotify: clear all fanotify marks
    
    fanotify listeners may want to clear all marks.  They may want to do this
    to destroy all of their inode marks which have nothing but ignores.
    Realistically this is useful for av vendors who update policy and want to
    clear all of their cached allows.
    
    Signed-off-by: Eric Paris <eparis@redhat.com>

diff --git a/include/linux/fanotify.h b/include/linux/fanotify.h
index e43934d0b74c..385896c9f828 100644
--- a/include/linux/fanotify.h
+++ b/include/linux/fanotify.h
@@ -32,6 +32,7 @@
 #define FAN_MARK_MOUNT		0x00000010
 #define FAN_MARK_IGNORED_MASK	0x00000020
 #define FAN_MARK_IGNORED_SURV_MODIFY	0x00000040
+#define FAN_MARK_FLUSH		0x00000080
 
 #define FAN_ALL_MARK_FLAGS	(FAN_MARK_ADD |\
 				 FAN_MARK_REMOVE |\

commit c9778a98e7440fb73e0d27b8155a688663a0d493
Author: Eric Paris <eparis@redhat.com>
Date:   Thu Dec 17 21:24:33 2009 -0500

    fanotify: allow ignored_masks to survive modify
    
    Some users may want to truely ignore an inode even if it has been modified.
    Say you are wanting a mount which contains a log file and you really don't
    want any notification about that file.  This patch allows the listener to
    do that.
    
    Signed-off-by: Eric Paris <eparis@redhat.com>

diff --git a/include/linux/fanotify.h b/include/linux/fanotify.h
index b8daa9f9b560..e43934d0b74c 100644
--- a/include/linux/fanotify.h
+++ b/include/linux/fanotify.h
@@ -31,13 +31,15 @@
 #define FAN_MARK_ONLYDIR	0x00000008
 #define FAN_MARK_MOUNT		0x00000010
 #define FAN_MARK_IGNORED_MASK	0x00000020
+#define FAN_MARK_IGNORED_SURV_MODIFY	0x00000040
 
 #define FAN_ALL_MARK_FLAGS	(FAN_MARK_ADD |\
 				 FAN_MARK_REMOVE |\
 				 FAN_MARK_DONT_FOLLOW |\
 				 FAN_MARK_ONLYDIR |\
 				 FAN_MARK_MOUNT |\
-				 FAN_MARK_IGNORED_MASK)
+				 FAN_MARK_IGNORED_MASK |\
+				 FAN_MARK_IGNORED_SURV_MODIFY)
 
 /*
  * All of the events - we build the list by hand so that we can add flags in

commit b9e4e3bd0495fea9e8f8e712889c9cd8ffa43c94
Author: Eric Paris <eparis@redhat.com>
Date:   Thu Dec 17 21:24:33 2009 -0500

    fanotify: allow users to set an ignored_mask
    
    Change the sys_fanotify_mark() system call so users can set ignored_masks
    on inodes.  Remember, if a user new sets a real mask, and only sets ignored
    masks, the ignore will never be pinned in memory.  Thus ignored_masks can
    be lost under memory pressure and the user may again get events they
    previously thought were ignored.
    
    Signed-off-by: Eric Paris <eparis@redhat.com>

diff --git a/include/linux/fanotify.h b/include/linux/fanotify.h
index 90e59b24fd04..b8daa9f9b560 100644
--- a/include/linux/fanotify.h
+++ b/include/linux/fanotify.h
@@ -30,12 +30,14 @@
 #define FAN_MARK_DONT_FOLLOW	0x00000004
 #define FAN_MARK_ONLYDIR	0x00000008
 #define FAN_MARK_MOUNT		0x00000010
+#define FAN_MARK_IGNORED_MASK	0x00000020
 
 #define FAN_ALL_MARK_FLAGS	(FAN_MARK_ADD |\
 				 FAN_MARK_REMOVE |\
 				 FAN_MARK_DONT_FOLLOW |\
 				 FAN_MARK_ONLYDIR |\
-				 FAN_MARK_MOUNT)
+				 FAN_MARK_MOUNT |\
+				 FAN_MARK_IGNORED_MASK)
 
 /*
  * All of the events - we build the list by hand so that we can add flags in

commit 88380fe66e0ac22529f5426ab27d67da00ed2628
Author: Andreas Gruenbacher <agruen@suse.de>
Date:   Thu Dec 17 21:24:29 2009 -0500

    fanotify: remove fanotify.h declarations
    
    fanotify_mark_validate functions are all needlessly declared in headers as
    static inlines.  Instead just do the checks where they are needed for code
    readability.
    
    Signed-off-by: Andreas Gruenbacher <agruen@suse.de>
    Signed-off-by: Eric Paris <eparis@redhat.com>

diff --git a/include/linux/fanotify.h b/include/linux/fanotify.h
index 5ee22fb274e5..90e59b24fd04 100644
--- a/include/linux/fanotify.h
+++ b/include/linux/fanotify.h
@@ -47,13 +47,6 @@
 			FAN_CLOSE |\
 			FAN_OPEN)
 
-/*
- * All legal FAN bits userspace can request (although possibly not all
- * at the same time.
- */
-#define FAN_ALL_INCOMING_EVENTS	(FAN_ALL_EVENTS |\
-				 FAN_EVENT_ON_CHILD)
-
 #define FAN_ALL_OUTGOING_EVENTS	(FAN_ALL_EVENTS |\
 				 FAN_Q_OVERFLOW)
 

commit eac8e9e80ccbd30801b7b76a2ee4c6c5a681e53c
Author: Andreas Gruenbacher <agruen@suse.de>
Date:   Thu Dec 17 21:24:29 2009 -0500

    fanotify: rename FAN_MARK_ON_VFSMOUNT to FAN_MARK_MOUNT
    
    the term 'vfsmount' isn't sensicle to userspace.  instead call is 'mount.
    
    Signed-off-by: Andreas Gruenbacher <agruen@suse.de>
    Signed-off-by: Eric Paris <eparis@redhat.com>

diff --git a/include/linux/fanotify.h b/include/linux/fanotify.h
index e25d348188ca..5ee22fb274e5 100644
--- a/include/linux/fanotify.h
+++ b/include/linux/fanotify.h
@@ -29,13 +29,13 @@
 #define FAN_MARK_REMOVE		0x00000002
 #define FAN_MARK_DONT_FOLLOW	0x00000004
 #define FAN_MARK_ONLYDIR	0x00000008
-#define FAN_MARK_ON_VFSMOUNT	0x00000010
+#define FAN_MARK_MOUNT		0x00000010
 
 #define FAN_ALL_MARK_FLAGS	(FAN_MARK_ADD |\
 				 FAN_MARK_REMOVE |\
 				 FAN_MARK_DONT_FOLLOW |\
 				 FAN_MARK_ONLYDIR |\
-				 FAN_MARK_ON_VFSMOUNT)
+				 FAN_MARK_MOUNT)
 
 /*
  * All of the events - we build the list by hand so that we can add flags in

commit 0ff21db9fcc39042b814dad8a4b7508710a75235
Author: Eric Paris <eparis@redhat.com>
Date:   Thu Dec 17 21:24:29 2009 -0500

    fanotify: hooks the fanotify_mark syscall to the vfsmount code
    
    Create a new fanotify_mark flag which indicates we should attach the mark
    to the vfsmount holding the object referenced by dfd and pathname rather
    than the inode itself.
    
    Signed-off-by: Eric Paris <eparis@redhat.com>

diff --git a/include/linux/fanotify.h b/include/linux/fanotify.h
index 5f633af4d1b0..e25d348188ca 100644
--- a/include/linux/fanotify.h
+++ b/include/linux/fanotify.h
@@ -29,11 +29,13 @@
 #define FAN_MARK_REMOVE		0x00000002
 #define FAN_MARK_DONT_FOLLOW	0x00000004
 #define FAN_MARK_ONLYDIR	0x00000008
+#define FAN_MARK_ON_VFSMOUNT	0x00000010
 
 #define FAN_ALL_MARK_FLAGS	(FAN_MARK_ADD |\
 				 FAN_MARK_REMOVE |\
 				 FAN_MARK_DONT_FOLLOW |\
-				 FAN_MARK_ONLYDIR)
+				 FAN_MARK_ONLYDIR |\
+				 FAN_MARK_ON_VFSMOUNT)
 
 /*
  * All of the events - we build the list by hand so that we can add flags in

commit 32c3263221bd63316815286dccacdc7abfd7f3c4
Author: Andreas Gruenbacher <agruen@suse.de>
Date:   Thu Dec 17 21:24:27 2009 -0500

    fanotify: Add pids to events
    
    Pass the process identifiers of the triggering processes to fanotify
    listeners: this information is useful for event filtering and logging.
    
    Signed-off-by: Andreas Gruenbacher <agruen@suse.de>
    Signed-off-by: Eric Paris <eparis@redhat.com>

diff --git a/include/linux/fanotify.h b/include/linux/fanotify.h
index c1c66162a46c..5f633af4d1b0 100644
--- a/include/linux/fanotify.h
+++ b/include/linux/fanotify.h
@@ -62,6 +62,7 @@ struct fanotify_event_metadata {
 	__u32 vers;
 	__s32 fd;
 	__u64 mask;
+	__s64 pid;
 } __attribute__ ((packed));
 
 /* Helper functions to deal with fanotify_event_metadata buffers */

commit a1014f102322398e67524b68b3300acf384e6c1f
Author: Eric Paris <eparis@redhat.com>
Date:   Thu Dec 17 21:24:26 2009 -0500

    fanotify: send events using read
    
    Send events to userspace by reading the file descriptor from fanotify_init().
    One will get blocks of data which look like:
    
    struct fanotify_event_metadata {
            __u32 event_len;
            __u32 vers;
            __s32 fd;
            __u64 mask;
            __s64 pid;
            __u64 cookie;
    } __attribute__ ((packed));
    
    Simple code to retrieve and deal with events is below
    
            while ((len = read(fan_fd, buf, sizeof(buf))) > 0) {
                    struct fanotify_event_metadata *metadata;
    
                    metadata = (void *)buf;
                    while(FAN_EVENT_OK(metadata, len)) {
                            [PROCESS HERE!!]
                            if (metadata->fd >= 0 && close(metadata->fd) != 0)
                                    goto fail;
                            metadata = FAN_EVENT_NEXT(metadata, len);
                    }
            }
    
    Signed-off-by: Eric Paris <eparis@redhat.com>

diff --git a/include/linux/fanotify.h b/include/linux/fanotify.h
index 95aeea2a3ca6..c1c66162a46c 100644
--- a/include/linux/fanotify.h
+++ b/include/linux/fanotify.h
@@ -51,6 +51,30 @@
  */
 #define FAN_ALL_INCOMING_EVENTS	(FAN_ALL_EVENTS |\
 				 FAN_EVENT_ON_CHILD)
+
+#define FAN_ALL_OUTGOING_EVENTS	(FAN_ALL_EVENTS |\
+				 FAN_Q_OVERFLOW)
+
+#define FANOTIFY_METADATA_VERSION	1
+
+struct fanotify_event_metadata {
+	__u32 event_len;
+	__u32 vers;
+	__s32 fd;
+	__u64 mask;
+} __attribute__ ((packed));
+
+/* Helper functions to deal with fanotify_event_metadata buffers */
+#define FAN_EVENT_METADATA_LEN (sizeof(struct fanotify_event_metadata))
+
+#define FAN_EVENT_NEXT(meta, len) ((len) -= (meta)->event_len, \
+				   (struct fanotify_event_metadata*)(((char *)(meta)) + \
+				   (meta)->event_len))
+
+#define FAN_EVENT_OK(meta, len)	((long)(len) >= (long)FAN_EVENT_METADATA_LEN && \
+				(long)(meta)->event_len >= (long)FAN_EVENT_METADATA_LEN && \
+				(long)(meta)->event_len <= (long)(len))
+
 #ifdef __KERNEL__
 
 #endif /* __KERNEL__ */

commit 2a3edf86040a7e15684525a2aadc29f532c51325
Author: Eric Paris <eparis@redhat.com>
Date:   Thu Dec 17 21:24:26 2009 -0500

    fanotify: fanotify_mark syscall implementation
    
    NAME
            fanotify_mark - add, remove, or modify an fanotify mark on a
    filesystem object
    
    SYNOPSIS
            int fanotify_mark(int fanotify_fd, unsigned int flags, u64 mask,
                              int dfd, const char *pathname)
    
    DESCRIPTION
            fanotify_mark() is used to add remove or modify a mark on a filesystem
            object.  Marks are used to indicate that the fanotify group is
            interested in events which occur on that object.  At this point in
            time marks may only be added to files and directories.
    
            fanotify_fd must be a file descriptor returned by fanotify_init()
    
            The flags field must contain exactly one of the following:
    
            FAN_MARK_ADD - or the bits in mask and ignored mask into the mark
            FAN_MARK_REMOVE - bitwise remove the bits in mask and ignored mark
                    from the mark
    
            The following values can be OR'd into the flags field:
    
            FAN_MARK_DONT_FOLLOW - same meaning as O_NOFOLLOW as described in open(2)
            FAN_MARK_ONLYDIR - same meaning as O_DIRECTORY as described in open(2)
    
            dfd may be any of the following:
            AT_FDCWD: the object will be lookup up based on pathname similar
                    to open(2)
    
            file descriptor of a directory: if pathname is not NULL the
                    object to modify will be lookup up similar to openat(2)
    
            file descriptor of the final object: if pathname is NULL the
                    object to modify will be the object referenced by dfd
    
            The mask is the bitwise OR of the set of events of interest such as:
            FAN_ACCESS              - object was accessed (read)
            FAN_MODIFY              - object was modified (write)
            FAN_CLOSE_WRITE         - object was writable and was closed
            FAN_CLOSE_NOWRITE       - object was read only and was closed
            FAN_OPEN                - object was opened
            FAN_EVENT_ON_CHILD      - interested in objected that happen to
                                      children.  Only relavent when the object
                                      is a directory
            FAN_Q_OVERFLOW          - event queue overflowed (not implemented)
    
    RETURN VALUE
            On success, this system call returns 0. On error, -1 is
            returned, and errno is set to indicate the error.
    
    ERRORS
            EINVAL An invalid value was specified in flags.
    
            EINVAL An invalid value was specified in mask.
    
            EINVAL An invalid value was specified in ignored_mask.
    
            EINVAL fanotify_fd is not a file descriptor as returned by
            fanotify_init()
    
            EBADF fanotify_fd is not a valid file descriptor
    
            EBADF dfd is not a valid file descriptor and path is NULL.
    
            ENOTDIR dfd is not a directory and path is not NULL
    
            EACCESS no search permissions on some part of the path
    
            ENENT file not found
    
            ENOMEM Insufficient kernel memory is available.
    
    CONFORMING TO
            These system calls are Linux-specific.
    
    Signed-off-by: Eric Paris <eparis@redhat.com>

diff --git a/include/linux/fanotify.h b/include/linux/fanotify.h
index 00bc6d4fbb58..95aeea2a3ca6 100644
--- a/include/linux/fanotify.h
+++ b/include/linux/fanotify.h
@@ -18,10 +18,23 @@
 /* helper events */
 #define FAN_CLOSE		(FAN_CLOSE_WRITE | FAN_CLOSE_NOWRITE) /* close */
 
+/* flags used for fanotify_init() */
 #define FAN_CLOEXEC		0x00000001
 #define FAN_NONBLOCK		0x00000002
 
 #define FAN_ALL_INIT_FLAGS	(FAN_CLOEXEC | FAN_NONBLOCK)
+
+/* flags used for fanotify_modify_mark() */
+#define FAN_MARK_ADD		0x00000001
+#define FAN_MARK_REMOVE		0x00000002
+#define FAN_MARK_DONT_FOLLOW	0x00000004
+#define FAN_MARK_ONLYDIR	0x00000008
+
+#define FAN_ALL_MARK_FLAGS	(FAN_MARK_ADD |\
+				 FAN_MARK_REMOVE |\
+				 FAN_MARK_DONT_FOLLOW |\
+				 FAN_MARK_ONLYDIR)
+
 /*
  * All of the events - we build the list by hand so that we can add flags in
  * the future and not break backward compatibility.  Apps will get only the

commit 52c923dd079df49f58016a9e56df184b132611d6
Author: Eric Paris <eparis@redhat.com>
Date:   Thu Dec 17 21:24:26 2009 -0500

    fanotify: fanotify_init syscall implementation
    
    NAME
            fanotify_init - initialize an fanotify group
    
    SYNOPSIS
            int fanotify_init(unsigned int flags, unsigned int event_f_flags, int priority);
    
    DESCRIPTION
            fanotify_init() initializes a new fanotify instance and returns a file
            descriptor associated with the new fanotify event queue.
    
            The following values can be OR'd into the flags field:
    
            FAN_NONBLOCK Set the O_NONBLOCK file status flag on the new open file description.
                    Using this flag saves extra calls to fcntl(2) to achieve the same
                    result.
    
            FAN_CLOEXEC Set the close-on-exec (FD_CLOEXEC) flag on the new file descriptor.
                    See the description of the O_CLOEXEC flag in open(2) for reasons why
                    this may be useful.
    
            The event_f_flags argument is unused and must be set to 0
    
            The priority argument is unused and must be set to 0
    
    RETURN VALUE
            On success, this system call return a new file descriptor. On error, -1 is
            returned, and errno is set to indicate the error.
    
    ERRORS
            EINVAL An invalid value was specified in flags.
    
            EINVAL A non-zero valid was passed in event_f_flags or in priority
    
            ENFILE The system limit on the total number of file descriptors has been reached.
    
            ENOMEM Insufficient kernel memory is available.
    
    CONFORMING TO
            These system calls are Linux-specific.
    
    Signed-off-by: Eric Paris <eparis@redhat.com>

diff --git a/include/linux/fanotify.h b/include/linux/fanotify.h
index b560f86d1401..00bc6d4fbb58 100644
--- a/include/linux/fanotify.h
+++ b/include/linux/fanotify.h
@@ -18,6 +18,10 @@
 /* helper events */
 #define FAN_CLOSE		(FAN_CLOSE_WRITE | FAN_CLOSE_NOWRITE) /* close */
 
+#define FAN_CLOEXEC		0x00000001
+#define FAN_NONBLOCK		0x00000002
+
+#define FAN_ALL_INIT_FLAGS	(FAN_CLOEXEC | FAN_NONBLOCK)
 /*
  * All of the events - we build the list by hand so that we can add flags in
  * the future and not break backward compatibility.  Apps will get only the

commit ff0b16a9850e8a240ad59e10b0a1291a8fcf7cbc
Author: Eric Paris <eparis@redhat.com>
Date:   Thu Dec 17 21:24:25 2009 -0500

    fanotify: fscking all notification system
    
    fanotify is a novel file notification system which bases notification on
    giving userspace both an event type (open, close, read, write) and an open
    file descriptor to the object in question.  This should address a number of
    races and problems with other notification systems like inotify and dnotify
    and should allow the future implementation of blocking or access controlled
    notification.  These are useful for on access scanners or hierachical storage
    management schemes.
    
    This patch just implements the basics of the fsnotify functions.
    
    Signed-off-by: Eric Paris <eparis@redhat.com>

diff --git a/include/linux/fanotify.h b/include/linux/fanotify.h
new file mode 100644
index 000000000000..b560f86d1401
--- /dev/null
+++ b/include/linux/fanotify.h
@@ -0,0 +1,40 @@
+#ifndef _LINUX_FANOTIFY_H
+#define _LINUX_FANOTIFY_H
+
+#include <linux/types.h>
+
+/* the following events that user-space can register for */
+#define FAN_ACCESS		0x00000001	/* File was accessed */
+#define FAN_MODIFY		0x00000002	/* File was modified */
+#define FAN_CLOSE_WRITE		0x00000008	/* Unwrittable file closed */
+#define FAN_CLOSE_NOWRITE	0x00000010	/* Writtable file closed */
+#define FAN_OPEN		0x00000020	/* File was opened */
+
+#define FAN_EVENT_ON_CHILD	0x08000000	/* interested in child events */
+
+/* FIXME currently Q's have no limit.... */
+#define FAN_Q_OVERFLOW		0x00004000	/* Event queued overflowed */
+
+/* helper events */
+#define FAN_CLOSE		(FAN_CLOSE_WRITE | FAN_CLOSE_NOWRITE) /* close */
+
+/*
+ * All of the events - we build the list by hand so that we can add flags in
+ * the future and not break backward compatibility.  Apps will get only the
+ * events that they originally wanted.  Be sure to add new events here!
+ */
+#define FAN_ALL_EVENTS (FAN_ACCESS |\
+			FAN_MODIFY |\
+			FAN_CLOSE |\
+			FAN_OPEN)
+
+/*
+ * All legal FAN bits userspace can request (although possibly not all
+ * at the same time.
+ */
+#define FAN_ALL_INCOMING_EVENTS	(FAN_ALL_EVENTS |\
+				 FAN_EVENT_ON_CHILD)
+#ifdef __KERNEL__
+
+#endif /* __KERNEL__ */
+#endif /* _LINUX_FANOTIFY_H */
