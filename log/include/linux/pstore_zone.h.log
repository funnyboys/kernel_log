commit 7dcb7848ba110ff192efc917d1a6de66b4c9ca4f
Author: WeiXiong Liao <liaoweixiong@allwinnertech.com>
Date:   Wed Mar 25 16:55:05 2020 +0800

    pstore/blk: Support non-block storage devices
    
    Add support for non-block devices (e.g. MTD). A non-block driver calls
    pstore_blk_register_device() to register iself.
    
    In addition, pstore/zone is updated to handle non-block devices,
    where an erase must be done before a write. Without this, there is no
    way to remove records stored to an MTD.
    
    Signed-off-by: WeiXiong Liao <liaoweixiong@allwinnertech.com>
    Link: https://lore.kernel.org/lkml/20200511233229.27745-10-keescook@chromium.org/
    Co-developed-by: Kees Cook <keescook@chromium.org>
    Signed-off-by: Kees Cook <keescook@chromium.org>

diff --git a/include/linux/pstore_zone.h b/include/linux/pstore_zone.h
index e79a18e41064..1e35eaa33e5e 100644
--- a/include/linux/pstore_zone.h
+++ b/include/linux/pstore_zone.h
@@ -7,6 +7,7 @@
 
 typedef ssize_t (*pstore_zone_read_op)(char *, size_t, loff_t);
 typedef ssize_t (*pstore_zone_write_op)(const char *, size_t, loff_t);
+typedef ssize_t (*pstore_zone_erase_op)(size_t, loff_t);
 /**
  * struct pstore_zone_info - pstore/zone back-end driver structure
  *
@@ -27,6 +28,10 @@ typedef ssize_t (*pstore_zone_write_op)(const char *, size_t, loff_t);
  * @write:	The same as @read, but the following error number:
  *		-EBUSY means try to write again later.
  *		-ENOMSG means to try next zone.
+ * @erase:	The general erase operation for device with special removing
+ *		job. Both of the function parameters @size and @offset are
+ *		relative value to storage.
+ *		Return 0 on success and others on failure.
  * @panic_write:The write operation only used for panic case. It's optional
  *		if you do not care panic log. The parameters are relative
  *		value to storage.
@@ -45,6 +50,7 @@ struct pstore_zone_info {
 	unsigned long ftrace_size;
 	pstore_zone_read_op read;
 	pstore_zone_write_op write;
+	pstore_zone_erase_op erase;
 	pstore_zone_write_op panic_write;
 };
 

commit 335426c6dcdd338d6b7c939c2da15fc9c5dd4959
Author: WeiXiong Liao <liaoweixiong@allwinnertech.com>
Date:   Wed Mar 25 16:55:03 2020 +0800

    pstore/zone: Provide way to skip "broken" zone for MTD devices
    
    One requirement to support MTD devices in pstore/zone is having a
    way to declare certain regions as broken. Add this support to
    pstore/zone.
    
    The MTD driver should return -ENOMSG when encountering a bad region,
    which tells pstore/zone to skip and try the next one.
    
    Signed-off-by: WeiXiong Liao <liaoweixiong@allwinnertech.com>
    Link: https://lore.kernel.org/lkml/20200511233229.27745-8-keescook@chromium.org/
    Co-developed-by: Colin Ian King <colin.king@canonical.com>
    Signed-off-by: Colin Ian King <colin.king@canonical.com>
    Link: //lore.kernel.org/lkml/20200512173801.222666-1-colin.king@canonical.com
    Signed-off-by: Kees Cook <keescook@chromium.org>

diff --git a/include/linux/pstore_zone.h b/include/linux/pstore_zone.h
index 6f16b0dd834a..e79a18e41064 100644
--- a/include/linux/pstore_zone.h
+++ b/include/linux/pstore_zone.h
@@ -23,11 +23,15 @@ typedef ssize_t (*pstore_zone_write_op)(const char *, size_t, loff_t);
  * @read:	The general read operation. Both of the function parameters
  *		@size and @offset are relative value to storage.
  *		On success, the number of bytes should be returned, others
- *		means error.
- * @write:	The same as @read, but -EBUSY means try to write again later.
+ *		mean error.
+ * @write:	The same as @read, but the following error number:
+ *		-EBUSY means try to write again later.
+ *		-ENOMSG means to try next zone.
  * @panic_write:The write operation only used for panic case. It's optional
- *		if you do not care panic log. The parameters and return value
- *		are the same as @read.
+ *		if you do not care panic log. The parameters are relative
+ *		value to storage.
+ *		On success, the number of bytes should be returned, others
+ *		excluding -ENOMSG mean error. -ENOMSG means to try next zone.
  */
 struct pstore_zone_info {
 	struct module *owner;

commit 34327e9fd213414b35eb70aa512c4e39b2095907
Author: WeiXiong Liao <liaoweixiong@allwinnertech.com>
Date:   Wed Mar 25 16:55:01 2020 +0800

    pstore/zone,blk: Add ftrace frontend support
    
    Support backend for ftrace. To enable ftrace backend, just make
    ftrace_size be greater than 0 and a multiple of 4096.
    
    Signed-off-by: WeiXiong Liao <liaoweixiong@allwinnertech.com>
    Link: https://lore.kernel.org/lkml/20200511233229.27745-6-keescook@chromium.org/
    Co-developed-by: Colin Ian King <colin.king@canonical.com>
    Signed-off-by: Colin Ian King <colin.king@canonical.com>
    Link: https://lore.kernel.org/lkml/20200512170719.221514-1-colin.king@canonical.com
    Signed-off-by: Kees Cook <keescook@chromium.org>

diff --git a/include/linux/pstore_zone.h b/include/linux/pstore_zone.h
index 904ee67f4ba2..6f16b0dd834a 100644
--- a/include/linux/pstore_zone.h
+++ b/include/linux/pstore_zone.h
@@ -19,6 +19,7 @@ typedef ssize_t (*pstore_zone_write_op)(const char *, size_t, loff_t);
  * @max_reason: Maximum kmsg dump reason to store.
  * @pmsg_size:	The size of pmsg zone which is the same as @kmsg_size.
  * @console_size:The size of console zone which is the same as @kmsg_size.
+ * @ftrace_size:The size of ftrace zone which is the same as @kmsg_size.
  * @read:	The general read operation. Both of the function parameters
  *		@size and @offset are relative value to storage.
  *		On success, the number of bytes should be returned, others
@@ -37,6 +38,7 @@ struct pstore_zone_info {
 	int max_reason;
 	unsigned long pmsg_size;
 	unsigned long console_size;
+	unsigned long ftrace_size;
 	pstore_zone_read_op read;
 	pstore_zone_write_op write;
 	pstore_zone_write_op panic_write;

commit cc9c4d1b5597167f8e8c92f6b61e1cda6d01884d
Author: WeiXiong Liao <liaoweixiong@allwinnertech.com>
Date:   Wed Mar 25 16:55:00 2020 +0800

    pstore/zone,blk: Add console frontend support
    
    Support backend for console. To enable console backend, just make
    console_size be greater than 0 and a multiple of 4096.
    
    Signed-off-by: WeiXiong Liao <liaoweixiong@allwinnertech.com>
    Link: https://lore.kernel.org/lkml/20200511233229.27745-5-keescook@chromium.org/
    Signed-off-by: Kees Cook <keescook@chromium.org>

diff --git a/include/linux/pstore_zone.h b/include/linux/pstore_zone.h
index 29c367a3bd80..904ee67f4ba2 100644
--- a/include/linux/pstore_zone.h
+++ b/include/linux/pstore_zone.h
@@ -18,11 +18,12 @@ typedef ssize_t (*pstore_zone_write_op)(const char *, size_t, loff_t);
  *		it must be multiple of SECTOR_SIZE(512 Bytes).
  * @max_reason: Maximum kmsg dump reason to store.
  * @pmsg_size:	The size of pmsg zone which is the same as @kmsg_size.
+ * @console_size:The size of console zone which is the same as @kmsg_size.
  * @read:	The general read operation. Both of the function parameters
  *		@size and @offset are relative value to storage.
  *		On success, the number of bytes should be returned, others
  *		means error.
- * @write:	The same as @read.
+ * @write:	The same as @read, but -EBUSY means try to write again later.
  * @panic_write:The write operation only used for panic case. It's optional
  *		if you do not care panic log. The parameters and return value
  *		are the same as @read.
@@ -35,6 +36,7 @@ struct pstore_zone_info {
 	unsigned long kmsg_size;
 	int max_reason;
 	unsigned long pmsg_size;
+	unsigned long console_size;
 	pstore_zone_read_op read;
 	pstore_zone_write_op write;
 	pstore_zone_write_op panic_write;

commit 0dc068265a1c5923ffebf40388fbe93050a77ad1
Author: WeiXiong Liao <liaoweixiong@allwinnertech.com>
Date:   Wed Mar 25 16:54:59 2020 +0800

    pstore/zone,blk: Add support for pmsg frontend
    
    Add pmsg support to pstore/blk (through pstore/zone). To enable, pmsg_size
    must be greater than 0 and a multiple of 4096.
    
    Signed-off-by: WeiXiong Liao <liaoweixiong@allwinnertech.com>
    Link: https://lore.kernel.org/lkml/20200511233229.27745-4-keescook@chromium.org/
    Co-developed-by: Colin Ian King <colin.king@canonical.com>
    Signed-off-by: Colin Ian King <colin.king@canonical.com>
    Link: https://lore.kernel.org/lkml/20200512171932.222102-1-colin.king@canonical.com
    Co-developed-by: Kees Cook <keescook@chromium.org>
    Signed-off-by: Kees Cook <keescook@chromium.org>

diff --git a/include/linux/pstore_zone.h b/include/linux/pstore_zone.h
index eb005d9ae40c..29c367a3bd80 100644
--- a/include/linux/pstore_zone.h
+++ b/include/linux/pstore_zone.h
@@ -17,6 +17,7 @@ typedef ssize_t (*pstore_zone_write_op)(const char *, size_t, loff_t);
  * @kmsg_size:	The size of oops/panic zone. Zero means disabled, otherwise,
  *		it must be multiple of SECTOR_SIZE(512 Bytes).
  * @max_reason: Maximum kmsg dump reason to store.
+ * @pmsg_size:	The size of pmsg zone which is the same as @kmsg_size.
  * @read:	The general read operation. Both of the function parameters
  *		@size and @offset are relative value to storage.
  *		On success, the number of bytes should be returned, others
@@ -33,6 +34,7 @@ struct pstore_zone_info {
 	unsigned long total_size;
 	unsigned long kmsg_size;
 	int max_reason;
+	unsigned long pmsg_size;
 	pstore_zone_read_op read;
 	pstore_zone_write_op write;
 	pstore_zone_write_op panic_write;

commit d26c3321fe18dc74517dc1f518d584aa33b0a851
Author: WeiXiong Liao <liaoweixiong@allwinnertech.com>
Date:   Wed Mar 25 16:54:56 2020 +0800

    pstore/zone: Introduce common layer to manage storage zones
    
    Implement a common set of APIs needed to support pstore storage zones,
    based on how ramoops is designed. This will be used by pstore/blk with
    the intention of migrating pstore/ram in the future.
    
    Signed-off-by: WeiXiong Liao <liaoweixiong@allwinnertech.com>
    Link: https://lore.kernel.org/lkml/20200511233229.27745-2-keescook@chromium.org/
    Co-developed-by: Kees Cook <keescook@chromium.org>
    Signed-off-by: Kees Cook <keescook@chromium.org>

diff --git a/include/linux/pstore_zone.h b/include/linux/pstore_zone.h
new file mode 100644
index 000000000000..eb005d9ae40c
--- /dev/null
+++ b/include/linux/pstore_zone.h
@@ -0,0 +1,44 @@
+/* SPDX-License-Identifier: GPL-2.0 */
+
+#ifndef __PSTORE_ZONE_H_
+#define __PSTORE_ZONE_H_
+
+#include <linux/types.h>
+
+typedef ssize_t (*pstore_zone_read_op)(char *, size_t, loff_t);
+typedef ssize_t (*pstore_zone_write_op)(const char *, size_t, loff_t);
+/**
+ * struct pstore_zone_info - pstore/zone back-end driver structure
+ *
+ * @owner:	Module which is responsible for this back-end driver.
+ * @name:	Name of the back-end driver.
+ * @total_size: The total size in bytes pstore/zone can use. It must be greater
+ *		than 4096 and be multiple of 4096.
+ * @kmsg_size:	The size of oops/panic zone. Zero means disabled, otherwise,
+ *		it must be multiple of SECTOR_SIZE(512 Bytes).
+ * @max_reason: Maximum kmsg dump reason to store.
+ * @read:	The general read operation. Both of the function parameters
+ *		@size and @offset are relative value to storage.
+ *		On success, the number of bytes should be returned, others
+ *		means error.
+ * @write:	The same as @read.
+ * @panic_write:The write operation only used for panic case. It's optional
+ *		if you do not care panic log. The parameters and return value
+ *		are the same as @read.
+ */
+struct pstore_zone_info {
+	struct module *owner;
+	const char *name;
+
+	unsigned long total_size;
+	unsigned long kmsg_size;
+	int max_reason;
+	pstore_zone_read_op read;
+	pstore_zone_write_op write;
+	pstore_zone_write_op panic_write;
+};
+
+extern int register_pstore_zone(struct pstore_zone_info *info);
+extern void unregister_pstore_zone(struct pstore_zone_info *info);
+
+#endif
