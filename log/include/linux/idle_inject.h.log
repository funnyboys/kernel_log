commit 333cff6c963fbc8b9820ca2b6a8b2e22a572cd43
Author: Daniel Lezcano <daniel.lezcano@linaro.org>
Date:   Wed Apr 29 12:36:39 2020 +0200

    powercap/drivers/idle_inject: Specify idle state max latency
    
    Currently the idle injection framework uses the play_idle() function
    which puts the current CPU in an idle state. The idle state is the
    deepest one, as specified by the latency constraint when calling the
    subsequent play_idle_precise() function with the INT_MAX.
    
    The idle_injection is used by the cpuidle_cooling device which
    computes the idle / run duration to mitigate the temperature by
    injecting idle cycles. The cooling device has no control on the depth
    of the idle state.
    
    Allow finer control of the idle injection mechanism by allowing to
    specify the latency for the idle state. Thus the cooling device has
    the ability to have a guarantee on the exit latency of the idle states
    it is injecting.
    
    Acked-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Reviewed-by: Amit Kucheria <amit.kucheria@linaro.org>
    Link: https://lore.kernel.org/r/20200429103644.5492-1-daniel.lezcano@linaro.org

diff --git a/include/linux/idle_inject.h b/include/linux/idle_inject.h
index a445cd1a36c5..91a8612b8bf9 100644
--- a/include/linux/idle_inject.h
+++ b/include/linux/idle_inject.h
@@ -26,4 +26,8 @@ void idle_inject_set_duration(struct idle_inject_device *ii_dev,
 void idle_inject_get_duration(struct idle_inject_device *ii_dev,
 				 unsigned int *run_duration_us,
 				 unsigned int *idle_duration_us);
+
+void idle_inject_set_latency(struct idle_inject_device *ii_dev,
+			     unsigned int latency_ns);
+
 #endif /* __IDLE_INJECT_H__ */

commit cd4c0763064f02f42824eed61be38eafdc702281
Author: Daniel Lezcano <daniel.lezcano@linaro.org>
Date:   Fri Aug 2 19:34:24 2019 +0200

    powercap: idle_inject: Use higher resolution for idle injection
    
    The resolution of the idle injection is limited to 1ms. If there is
    a need for an injection of 1.2 ms, it is not possible.
    
    The idle injection API is not yet used, so it is safe to convert the
    existing API to the new time unit instead of adding more functions.
    
    Convert to microsecond in order to use a finer grain time unit when
    injecting idle cycles.
    
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>

diff --git a/include/linux/idle_inject.h b/include/linux/idle_inject.h
index bdc0293fb6cb..a445cd1a36c5 100644
--- a/include/linux/idle_inject.h
+++ b/include/linux/idle_inject.h
@@ -20,10 +20,10 @@ int idle_inject_start(struct idle_inject_device *ii_dev);
 void idle_inject_stop(struct idle_inject_device *ii_dev);
 
 void idle_inject_set_duration(struct idle_inject_device *ii_dev,
-				 unsigned int run_duration_ms,
-				 unsigned int idle_duration_ms);
+				 unsigned int run_duration_us,
+				 unsigned int idle_duration_us);
 
 void idle_inject_get_duration(struct idle_inject_device *ii_dev,
-				 unsigned int *run_duration_ms,
-				 unsigned int *idle_duration_ms);
+				 unsigned int *run_duration_us,
+				 unsigned int *idle_duration_us);
 #endif /* __IDLE_INJECT_H__ */

commit 88763a5cf80ca59a7c3bea32681ce8f697d9995f
Author: Daniel Lezcano <daniel.lezcano@linaro.org>
Date:   Tue Jun 26 12:53:29 2018 +0200

    powercap / idle_inject: Add an idle injection framework
    
    Initially, the cpu_cooling device for ARM was changed by adding a new
    policy inserting idle cycles. The intel_powerclamp driver does a
    similar action.
    
    Instead of implementing idle injections privately in the cpu_cooling
    device, move the idle injection code in a dedicated framework and give
    the opportunity to other frameworks to make use of it.
    
    The framework relies on the smpboot kthreads which handles via its
    main loop the common code for hotplugging and [un]parking.
    
    This code was previously tested with the cpu cooling device and went
    through several iterations. It results now in split code and API
    exported in the header file. It was tested with the cpu cooling device
    with success.
    
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Reviewed-by: Viresh Kumar <viresh.kumar@linaro.org>
    [ rjw: Rewrite of all comments ]
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>

diff --git a/include/linux/idle_inject.h b/include/linux/idle_inject.h
new file mode 100644
index 000000000000..bdc0293fb6cb
--- /dev/null
+++ b/include/linux/idle_inject.h
@@ -0,0 +1,29 @@
+/* SPDX-License-Identifier: GPL-2.0 */
+/*
+ * Copyright (C) 2018 Linaro Ltd
+ *
+ * Author: Daniel Lezcano <daniel.lezcano@linaro.org>
+ *
+ */
+#ifndef __IDLE_INJECT_H__
+#define __IDLE_INJECT_H__
+
+/* private idle injection device structure */
+struct idle_inject_device;
+
+struct idle_inject_device *idle_inject_register(struct cpumask *cpumask);
+
+void idle_inject_unregister(struct idle_inject_device *ii_dev);
+
+int idle_inject_start(struct idle_inject_device *ii_dev);
+
+void idle_inject_stop(struct idle_inject_device *ii_dev);
+
+void idle_inject_set_duration(struct idle_inject_device *ii_dev,
+				 unsigned int run_duration_ms,
+				 unsigned int idle_duration_ms);
+
+void idle_inject_get_duration(struct idle_inject_device *ii_dev,
+				 unsigned int *run_duration_ms,
+				 unsigned int *idle_duration_ms);
+#endif /* __IDLE_INJECT_H__ */
