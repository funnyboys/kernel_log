commit 0145f67866b71e8c1da3c1d9412623db7ba8a0c8
Author: Daniel Lezcano <daniel.lezcano@linaro.org>
Date:   Thu Apr 2 16:27:47 2020 +0200

    thermal: Remove thermal_zone_device_update() stub
    
    All users of the function depends on THERMAL, no stub is
    needed. Remove it.
    
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Reviewed-by: Amit Kucheria <amit.kucheria@linaro.org>
    Acked-by: Zhang Rui <rui.zhang@intel.com>
    Link: https://lore.kernel.org/r/20200402142747.8307-9-daniel.lezcano@linaro.org

diff --git a/include/linux/thermal.h b/include/linux/thermal.h
index 7b3dbfe15b59..216185bb3014 100644
--- a/include/linux/thermal.h
+++ b/include/linux/thermal.h
@@ -426,9 +426,6 @@ static inline struct thermal_zone_device *thermal_zone_device_register(
 static inline void thermal_zone_device_unregister(
 	struct thermal_zone_device *tz)
 { }
-static inline void thermal_zone_device_update(struct thermal_zone_device *tz,
-					      enum thermal_notify_event event)
-{ }
 static inline struct thermal_cooling_device *
 thermal_cooling_device_register(char *type, void *devdata,
 	const struct thermal_cooling_device_ops *ops)

commit 708418500644c248d6f266e4df0bf43ce53bf746
Author: Daniel Lezcano <daniel.lezcano@linaro.org>
Date:   Thu Apr 2 16:27:46 2020 +0200

    thermal: Remove stubs for thermal_zone_[un]bind_cooling_device
    
    All callers of the functions depends on THERMAL, it is pointless to
    define stubs. Remove them.
    
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Reviewed-by: Amit Kucheria <amit.kucheria@linaro.org>
    Acked-by: Zhang Rui <rui.zhang@intel.com>
    Link: https://lore.kernel.org/r/20200402142747.8307-8-daniel.lezcano@linaro.org

diff --git a/include/linux/thermal.h b/include/linux/thermal.h
index 12df9ff0182d..7b3dbfe15b59 100644
--- a/include/linux/thermal.h
+++ b/include/linux/thermal.h
@@ -426,16 +426,6 @@ static inline struct thermal_zone_device *thermal_zone_device_register(
 static inline void thermal_zone_device_unregister(
 	struct thermal_zone_device *tz)
 { }
-static inline int thermal_zone_bind_cooling_device(
-	struct thermal_zone_device *tz, int trip,
-	struct thermal_cooling_device *cdev,
-	unsigned long upper, unsigned long lower,
-	unsigned int weight)
-{ return -ENODEV; }
-static inline int thermal_zone_unbind_cooling_device(
-	struct thermal_zone_device *tz, int trip,
-	struct thermal_cooling_device *cdev)
-{ return -ENODEV; }
 static inline void thermal_zone_device_update(struct thermal_zone_device *tz,
 					      enum thermal_notify_event event)
 { }

commit 60518260cab21e749704baa5246ff13f7559fa91
Author: Daniel Lezcano <daniel.lezcano@linaro.org>
Date:   Thu Apr 2 16:27:45 2020 +0200

    thermal: Change IS_ENABLED to IFDEF in the header file
    
    The thermal framework can not be compiled as a module. The IS_ENABLED
    macro is useless here and can be replaced by an ifdef.
    
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Reviewed-by: Amit Kucheria <amit.kucheria@linaro.org>
    Acked-by: Zhang Rui <rui.zhang@intel.com>
    Link: https://lore.kernel.org/r/20200402142747.8307-7-daniel.lezcano@linaro.org

diff --git a/include/linux/thermal.h b/include/linux/thermal.h
index 47e745c5dfca..12df9ff0182d 100644
--- a/include/linux/thermal.h
+++ b/include/linux/thermal.h
@@ -383,7 +383,7 @@ void devm_thermal_zone_of_sensor_unregister(struct device *dev,
 
 #endif
 
-#if IS_ENABLED(CONFIG_THERMAL)
+#ifdef CONFIG_THERMAL
 struct thermal_zone_device *thermal_zone_device_register(const char *, int, int,
 		void *, struct thermal_zone_device_ops *,
 		struct thermal_zone_params *, int, int);

commit 06f1041f5023c00a54f63c269b997c61d1b3b739
Author: Daniel Lezcano <daniel.lezcano@linaro.org>
Date:   Thu Apr 2 16:27:44 2020 +0200

    thermal: Move get_thermal_instance to the internal header
    
    The function is not used any place other than the thermal
    directory. It does not make sense to export its definition in the
    global header as there is no use of it.
    
    Move the definition to the internal header and allow better
    self-encapsulation.
    
    Take the opportunity to add the parameter names to make checkpatch
    happy and remove the pointless stubs.
    
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Reviewed-by: Amit Kucheria <amit.kucheria@linaro.org>
    Acked-by: Zhang Rui <rui.zhang@intel.com>
    Link: https://lore.kernel.org/r/20200402142747.8307-6-daniel.lezcano@linaro.org

diff --git a/include/linux/thermal.h b/include/linux/thermal.h
index 8006ba5de855..47e745c5dfca 100644
--- a/include/linux/thermal.h
+++ b/include/linux/thermal.h
@@ -414,8 +414,6 @@ int thermal_zone_get_temp(struct thermal_zone_device *tz, int *temp);
 int thermal_zone_get_slope(struct thermal_zone_device *tz);
 int thermal_zone_get_offset(struct thermal_zone_device *tz);
 
-struct thermal_instance *get_thermal_instance(struct thermal_zone_device *,
-		struct thermal_cooling_device *, int);
 void thermal_cdev_update(struct thermal_cooling_device *);
 void thermal_notify_framework(struct thermal_zone_device *, int);
 #else
@@ -473,10 +471,6 @@ static inline int thermal_zone_get_offset(
 		struct thermal_zone_device *tz)
 { return -ENODEV; }
 
-static inline struct thermal_instance *
-get_thermal_instance(struct thermal_zone_device *tz,
-	struct thermal_cooling_device *cdev, int trip)
-{ return ERR_PTR(-ENODEV); }
 static inline void thermal_cdev_update(struct thermal_cooling_device *cdev)
 { }
 static inline void thermal_notify_framework(struct thermal_zone_device *tz,

commit f0129c231772a85a726b233756cdc58ea42a9d84
Author: Daniel Lezcano <daniel.lezcano@linaro.org>
Date:   Thu Apr 2 16:27:43 2020 +0200

    thermal: Move get_tz_trend to the internal header
    
    The function is not used any place other than the thermal
    directory. It does not make sense to export its definition in the
    global header as there is no use of it.
    
    Move the definition to the internal header and allow better
    self-encapsulation.
    
    Take the opportunity to add the parameter names to make checkpatch
    happy and remove the pointless stubs.
    
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Reviewed-by: Amit Kucheria <amit.kucheria@linaro.org>
    Acked-by: Zhang Rui <rui.zhang@intel.com>
    Link: https://lore.kernel.org/r/20200402142747.8307-5-daniel.lezcano@linaro.org

diff --git a/include/linux/thermal.h b/include/linux/thermal.h
index 7adbfe092281..8006ba5de855 100644
--- a/include/linux/thermal.h
+++ b/include/linux/thermal.h
@@ -414,7 +414,6 @@ int thermal_zone_get_temp(struct thermal_zone_device *tz, int *temp);
 int thermal_zone_get_slope(struct thermal_zone_device *tz);
 int thermal_zone_get_offset(struct thermal_zone_device *tz);
 
-int get_tz_trend(struct thermal_zone_device *, int);
 struct thermal_instance *get_thermal_instance(struct thermal_zone_device *,
 		struct thermal_cooling_device *, int);
 void thermal_cdev_update(struct thermal_cooling_device *);
@@ -473,8 +472,7 @@ static inline int thermal_zone_get_slope(
 static inline int thermal_zone_get_offset(
 		struct thermal_zone_device *tz)
 { return -ENODEV; }
-static inline int get_tz_trend(struct thermal_zone_device *tz, int trip)
-{ return -ENODEV; }
+
 static inline struct thermal_instance *
 get_thermal_instance(struct thermal_zone_device *tz,
 	struct thermal_cooling_device *cdev, int trip)

commit 2e7700dc336dde93cdc9394d10ccd79593fff214
Author: Daniel Lezcano <daniel.lezcano@linaro.org>
Date:   Thu Apr 2 16:27:42 2020 +0200

    thermal: Move trip point structure definition to private header
    
    The struct thermal_trip is only used by the thermal internals, it is
    pointless to export the definition in the global header.
    
    Move the structure to the thermal_core.h internal header.
    
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Reviewed-by: Amit Kucheria <amit.kucheria@linaro.org>
    Acked-by: Zhang Rui <rui.zhang@intel.com>
    Link: https://lore.kernel.org/r/20200402142747.8307-4-daniel.lezcano@linaro.org

diff --git a/include/linux/thermal.h b/include/linux/thermal.h
index e0279f7b43f4..7adbfe092281 100644
--- a/include/linux/thermal.h
+++ b/include/linux/thermal.h
@@ -332,21 +332,6 @@ struct thermal_zone_of_device_ops {
 	int (*set_trip_temp)(void *, int, int);
 };
 
-/**
- * struct thermal_trip - representation of a point in temperature domain
- * @np: pointer to struct device_node that this trip point was created from
- * @temperature: temperature value in miliCelsius
- * @hysteresis: relative hysteresis in miliCelsius
- * @type: trip point type
- */
-
-struct thermal_trip {
-	struct device_node *np;
-	int temperature;
-	int hysteresis;
-	enum thermal_trip_type type;
-};
-
 /* Function declarations */
 #ifdef CONFIG_THERMAL_OF
 int thermal_zone_of_get_sensor_id(struct device_node *tz_np,

commit 33a88af10944edc7fd390000cd6bc9bbde918bc3
Author: Daniel Lezcano <daniel.lezcano@linaro.org>
Date:   Thu Apr 2 16:27:41 2020 +0200

    thermal: Move internal IPA functions
    
    The exported IPA functions are used by the IPA. It is pointless to
    declare the functions in the thermal.h file.
    
    For better self-encapsulation and less impact for the compilation if a
    change is made on it. Move the code in the thermal core internal
    header file.
    
    As the users depends on THERMAL then it is pointless to have the stub,
    remove them.
    
    Take also the opportunity to fix checkpatch warnings/errors when
    moving the code around.
    
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Reviewed-by: Amit Kucheria <amit.kucheria@linaro.org>
    Acked-by: Zhang Rui <rui.zhang@intel.com>
    Link: https://lore.kernel.org/r/20200402142747.8307-3-daniel.lezcano@linaro.org

diff --git a/include/linux/thermal.h b/include/linux/thermal.h
index 5aa80fb2fb61..e0279f7b43f4 100644
--- a/include/linux/thermal.h
+++ b/include/linux/thermal.h
@@ -399,18 +399,6 @@ void devm_thermal_zone_of_sensor_unregister(struct device *dev,
 #endif
 
 #if IS_ENABLED(CONFIG_THERMAL)
-static inline bool cdev_is_power_actor(struct thermal_cooling_device *cdev)
-{
-	return cdev->ops->get_requested_power && cdev->ops->state2power &&
-		cdev->ops->power2state;
-}
-
-int power_actor_get_max_power(struct thermal_cooling_device *,
-			      struct thermal_zone_device *tz, u32 *max_power);
-int power_actor_get_min_power(struct thermal_cooling_device *,
-			      struct thermal_zone_device *tz, u32 *min_power);
-int power_actor_set_power(struct thermal_cooling_device *,
-			  struct thermal_instance *, u32);
 struct thermal_zone_device *thermal_zone_device_register(const char *, int, int,
 		void *, struct thermal_zone_device_ops *,
 		struct thermal_zone_params *, int, int);
@@ -447,18 +435,6 @@ struct thermal_instance *get_thermal_instance(struct thermal_zone_device *,
 void thermal_cdev_update(struct thermal_cooling_device *);
 void thermal_notify_framework(struct thermal_zone_device *, int);
 #else
-static inline bool cdev_is_power_actor(struct thermal_cooling_device *cdev)
-{ return false; }
-static inline int power_actor_get_max_power(struct thermal_cooling_device *cdev,
-			      struct thermal_zone_device *tz, u32 *max_power)
-{ return 0; }
-static inline int power_actor_get_min_power(struct thermal_cooling_device *cdev,
-					    struct thermal_zone_device *tz,
-					    u32 *min_power)
-{ return -ENODEV; }
-static inline int power_actor_set_power(struct thermal_cooling_device *cdev,
-			  struct thermal_instance *tz, u32 power)
-{ return 0; }
 static inline struct thermal_zone_device *thermal_zone_device_register(
 	const char *type, int trips, int mask, void *devdata,
 	struct thermal_zone_device_ops *ops,

commit c68df440b07f88210c5839d4507b5cbfa35e3df9
Author: Daniel Lezcano <daniel.lezcano@linaro.org>
Date:   Thu Apr 2 16:27:40 2020 +0200

    thermal: Move struct thermal_attr to the private header
    
    The structure belongs to the thermal core internals but it is exported
    in the include/linux/thermal.h
    
    For better self-encapsulation and less impact for the compilation if a
    change is made on it. Move the structure in the thermal core internal
    header file.
    
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Reviewed-by: Amit Kucheria <amit.kucheria@linaro.org>
    Acked-by: Zhang Rui <rui.zhang@intel.com>
    Link: https://lore.kernel.org/r/20200402142747.8307-2-daniel.lezcano@linaro.org

diff --git a/include/linux/thermal.h b/include/linux/thermal.h
index 71cff87dcb46..5aa80fb2fb61 100644
--- a/include/linux/thermal.h
+++ b/include/linux/thermal.h
@@ -35,6 +35,7 @@
 struct thermal_zone_device;
 struct thermal_cooling_device;
 struct thermal_instance;
+struct thermal_attr;
 
 enum thermal_device_mode {
 	THERMAL_DEVICE_DISABLED = 0,
@@ -119,11 +120,6 @@ struct thermal_cooling_device {
 	struct list_head node;
 };
 
-struct thermal_attr {
-	struct device_attribute attr;
-	char name[THERMAL_NAME_LENGTH];
-};
-
 /**
  * struct thermal_zone_device - structure for a thermal zone
  * @id:		unique id number for each thermal zone

commit 8097db407a08f33236b6fa6ba8b62d669321c720
Author: Daniel Lezcano <daniel.lezcano@linaro.org>
Date:   Thu Apr 2 16:27:39 2020 +0200

    thermal: Move default governor config option to the internal header
    
    The default governor set at compilation time is a thermal internal
    business, no need to export to the global thermal header.
    
    Move the config options to the internal header.
    
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Reviewed-by: Amit Kucheria <amit.kucheria@linaro.org>
    Acked-by: Zhang Rui <rui.zhang@intel.com>
    Link: https://lore.kernel.org/r/20200402142747.8307-1-daniel.lezcano@linaro.org

diff --git a/include/linux/thermal.h b/include/linux/thermal.h
index 448841ab0dca..71cff87dcb46 100644
--- a/include/linux/thermal.h
+++ b/include/linux/thermal.h
@@ -32,17 +32,6 @@
 /* use value, which < 0K, to indicate an invalid/uninitialized temperature */
 #define THERMAL_TEMP_INVALID	-274000
 
-/* Default Thermal Governor */
-#if defined(CONFIG_THERMAL_DEFAULT_GOV_STEP_WISE)
-#define DEFAULT_THERMAL_GOVERNOR       "step_wise"
-#elif defined(CONFIG_THERMAL_DEFAULT_GOV_FAIR_SHARE)
-#define DEFAULT_THERMAL_GOVERNOR       "fair_share"
-#elif defined(CONFIG_THERMAL_DEFAULT_GOV_USER_SPACE)
-#define DEFAULT_THERMAL_GOVERNOR       "user_space"
-#elif defined(CONFIG_THERMAL_DEFAULT_GOV_POWER_ALLOCATOR)
-#define DEFAULT_THERMAL_GOVERNOR       "power_allocator"
-#endif
-
 struct thermal_zone_device;
 struct thermal_cooling_device;
 struct thermal_instance;

commit bceb5646a15dad49ceb29ec16b8acc10075d0627
Author: Daniel Lezcano <daniel.lezcano@linaro.org>
Date:   Tue Mar 31 18:54:48 2020 +0200

    thermal: core: Make thermal_zone_set_trips private
    
    The function thermal_zone_set_trips() is used by the thermal core code
    in order to update the next trip points, there are no other users.
    
    Move the function definition in the thermal_core.h, remove the
    EXPORT_SYMBOL_GPL and document the function.
    
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Reviewed-by: Lukasz Luba <lukasz.luba@arm.com>
    Reviewed-by: Amit Kucheria <amit.kucheria@linaro.org>
    Link: https://lore.kernel.org/r/20200331165449.30355-1-daniel.lezcano@linaro.org

diff --git a/include/linux/thermal.h b/include/linux/thermal.h
index c91b1e344d56..448841ab0dca 100644
--- a/include/linux/thermal.h
+++ b/include/linux/thermal.h
@@ -439,7 +439,6 @@ int thermal_zone_unbind_cooling_device(struct thermal_zone_device *, int,
 				       struct thermal_cooling_device *);
 void thermal_zone_device_update(struct thermal_zone_device *,
 				enum thermal_notify_event);
-void thermal_zone_set_trips(struct thermal_zone_device *);
 
 struct thermal_cooling_device *thermal_cooling_device_register(const char *,
 		void *, const struct thermal_cooling_device_ops *);
@@ -497,8 +496,6 @@ static inline int thermal_zone_unbind_cooling_device(
 static inline void thermal_zone_device_update(struct thermal_zone_device *tz,
 					      enum thermal_notify_event event)
 { }
-static inline void thermal_zone_set_trips(struct thermal_zone_device *tz)
-{ }
 static inline struct thermal_cooling_device *
 thermal_cooling_device_register(char *type, void *devdata,
 	const struct thermal_cooling_device_ops *ops)

commit 15a26319c41962b7cf87603bc51d667f43d2ca67
Author: Anson Huang <Anson.Huang@nxp.com>
Date:   Tue Mar 3 16:04:43 2020 +0800

    thermal: Fix build warning of !defined(CONFIG_THERMAL_OF)
    
    Add "inline" to thermal_zone_of_get_sensor_id() function to avoid below
    build warning of !defined(CONFIG_THERMAL_OF).
    
    In file included from drivers/hwmon/hwmon.c:22:
    include/linux/thermal.h:382:12: warning: 'thermal_zone_of_get_sensor_id'
    defined but not used [-Wunused-function]
    382 | static int thermal_zone_of_get_sensor_id(struct device_node *tz_np,
    
    Signed-off-by: Anson Huang <Anson.Huang@nxp.com>
    Reported-by: Stephen Rothwell <sfr@canb.auug.org.au>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Link: https://lore.kernel.org/r/1583222684-10229-1-git-send-email-Anson.Huang@nxp.com

diff --git a/include/linux/thermal.h b/include/linux/thermal.h
index 53e6f677761f..c91b1e344d56 100644
--- a/include/linux/thermal.h
+++ b/include/linux/thermal.h
@@ -379,7 +379,7 @@ void devm_thermal_zone_of_sensor_unregister(struct device *dev,
 					    struct thermal_zone_device *tz);
 #else
 
-static int thermal_zone_of_get_sensor_id(struct device_node *tz_np,
+static inline int thermal_zone_of_get_sensor_id(struct device_node *tz_np,
 					 struct device_node *sensor_np,
 					 u32 *id)
 {

commit 34471abfc8fedcebf7c45a5e37ef383b8bb16de3
Author: Anson Huang <Anson.Huang@nxp.com>
Date:   Sat Feb 22 08:08:49 2020 +0800

    thermal: of-thermal: add API for getting sensor ID from DT
    
    This patch adds new API thermal_zone_of_get_sensor_id() to
    provide the feature of getting sensor ID from DT thermal
    zone's node. It's useful for thermal driver to register the
    specific thermal zone devices from DT in a common way.
    
    Signed-off-by: Anson Huang <Anson.Huang@nxp.com>
    Reviewed-by: Dong Aisheng <aisheng.dong@nxp.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Link: https://lore.kernel.org/r/1582330132-13461-2-git-send-email-Anson.Huang@nxp.com

diff --git a/include/linux/thermal.h b/include/linux/thermal.h
index 126913c6a53b..53e6f677761f 100644
--- a/include/linux/thermal.h
+++ b/include/linux/thermal.h
@@ -364,6 +364,9 @@ struct thermal_trip {
 
 /* Function declarations */
 #ifdef CONFIG_THERMAL_OF
+int thermal_zone_of_get_sensor_id(struct device_node *tz_np,
+				  struct device_node *sensor_np,
+				  u32 *id);
 struct thermal_zone_device *
 thermal_zone_of_sensor_register(struct device *dev, int id, void *data,
 				const struct thermal_zone_of_device_ops *ops);
@@ -375,6 +378,13 @@ struct thermal_zone_device *devm_thermal_zone_of_sensor_register(
 void devm_thermal_zone_of_sensor_unregister(struct device *dev,
 					    struct thermal_zone_device *tz);
 #else
+
+static int thermal_zone_of_get_sensor_id(struct device_node *tz_np,
+					 struct device_node *sensor_np,
+					 u32 *id)
+{
+	return -ENOENT;
+}
 static inline struct thermal_zone_device *
 thermal_zone_of_sensor_register(struct device *dev, int id, void *data,
 				const struct thermal_zone_of_device_ops *ops)

commit cdf309fb38ad419aadb8f5856a088864688fad90
Author: Akinobu Mita <akinobu.mita@gmail.com>
Date:   Thu Jan 30 22:15:57 2020 -0800

    thermal: remove kelvin to/from Celsius conversion helpers from <linux/thermal.h>
    
    This removes the kelvin to/from Celsius conversion helper macros in
    <linux/thermal.h> which were switched to the inline helper functions in
    <linux/units.h>.
    
    Link: http://lkml.kernel.org/r/1576386975-7941-9-git-send-email-akinobu.mita@gmail.com
    Signed-off-by: Akinobu Mita <akinobu.mita@gmail.com>
    Reviewed-by: Andy Shevchenko <andy.shevchenko@gmail.com>
    Cc: Sujith Thomas <sujith.thomas@intel.com>
    Cc: Darren Hart <dvhart@infradead.org>
    Cc: Andy Shevchenko <andy@infradead.org>
    Cc: Zhang Rui <rui.zhang@intel.com>
    Cc: Daniel Lezcano <daniel.lezcano@linaro.org>
    Cc: Amit Kucheria <amit.kucheria@verdurent.com>
    Cc: Jean Delvare <jdelvare@suse.com>
    Cc: Guenter Roeck <linux@roeck-us.net>
    Cc: Keith Busch <kbusch@kernel.org>
    Cc: Jens Axboe <axboe@fb.com>
    Cc: Christoph Hellwig <hch@lst.de>
    Cc: Sagi Grimberg <sagi@grimberg.me>
    Cc: Emmanuel Grumbach <emmanuel.grumbach@intel.com>
    Cc: Hartmut Knaack <knaack.h@gmx.de>
    Cc: Johannes Berg <johannes.berg@intel.com>
    Cc: Jonathan Cameron <jic23@kernel.org>
    Cc: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Cc: Kalle Valo <kvalo@codeaurora.org>
    Cc: Lars-Peter Clausen <lars@metafoo.de>
    Cc: Luca Coelho <luciano.coelho@intel.com>
    Cc: Peter Meerwald-Stadler <pmeerw@pmeerw.net>
    Cc: Stanislaw Gruszka <sgruszka@redhat.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

diff --git a/include/linux/thermal.h b/include/linux/thermal.h
index d9111aebb97d..126913c6a53b 100644
--- a/include/linux/thermal.h
+++ b/include/linux/thermal.h
@@ -32,17 +32,6 @@
 /* use value, which < 0K, to indicate an invalid/uninitialized temperature */
 #define THERMAL_TEMP_INVALID	-274000
 
-/* Unit conversion macros */
-#define DECI_KELVIN_TO_CELSIUS(t)	({			\
-	long _t = (t);						\
-	((_t-2732 >= 0) ? (_t-2732+5)/10 : (_t-2732-5)/10);	\
-})
-#define CELSIUS_TO_DECI_KELVIN(t)	((t)*10+2732)
-#define DECI_KELVIN_TO_MILLICELSIUS_WITH_OFFSET(t, off) (((t) - (off)) * 100)
-#define DECI_KELVIN_TO_MILLICELSIUS(t) DECI_KELVIN_TO_MILLICELSIUS_WITH_OFFSET(t, 2732)
-#define MILLICELSIUS_TO_DECI_KELVIN_WITH_OFFSET(t, off) (((t) / 100) + (off))
-#define MILLICELSIUS_TO_DECI_KELVIN(t) MILLICELSIUS_TO_DECI_KELVIN_WITH_OFFSET(t, 2732)
-
 /* Default Thermal Governor */
 #if defined(CONFIG_THERMAL_DEFAULT_GOV_STEP_WISE)
 #define DEFAULT_THERMAL_GOVERNOR       "step_wise"

commit f96c8e50152814d05a4002b8c03a80366a27afa3
Author: Amit Kucheria <amit.kucheria@linaro.org>
Date:   Mon Oct 21 17:45:10 2019 +0530

    thermal: Remove netlink support
    
    There are no users of netlink messages for thermal inside the kernel.
    Remove the code and adjust the documentation.
    
    Signed-off-by: Amit Kucheria <amit.kucheria@linaro.org>
    Acked-by: Viresh Kumar <viresh.kumar@linaro.org>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Link: https://lore.kernel.org/r/8ff02cf62186c7a54fff325fad40a2e9ca3affa6.1571656014.git.amit.kucheria@linaro.org

diff --git a/include/linux/thermal.h b/include/linux/thermal.h
index e45659c75920..d9111aebb97d 100644
--- a/include/linux/thermal.h
+++ b/include/linux/thermal.h
@@ -544,15 +544,4 @@ static inline void thermal_notify_framework(struct thermal_zone_device *tz,
 { }
 #endif /* CONFIG_THERMAL */
 
-#if defined(CONFIG_NET) && IS_ENABLED(CONFIG_THERMAL)
-extern int thermal_generate_netlink_event(struct thermal_zone_device *tz,
-						enum events event);
-#else
-static inline int thermal_generate_netlink_event(struct thermal_zone_device *tz,
-						enum events event)
-{
-	return 0;
-}
-#endif
-
 #endif /* __THERMAL_H__ */

commit eaf7b46083a7e341a23ab3d6042e0ccc115b0914
Author: Mauro Carvalho Chehab <mchehab+samsung@kernel.org>
Date:   Fri Jul 26 09:51:12 2019 -0300

    docs: thermal: add it to the driver API
    
    The file contents mostly describes driver internals.
    
    Signed-off-by: Mauro Carvalho Chehab <mchehab+samsung@kernel.org>
    Signed-off-by: Jonathan Corbet <corbet@lwn.net>

diff --git a/include/linux/thermal.h b/include/linux/thermal.h
index 681047f8cc05..e45659c75920 100644
--- a/include/linux/thermal.h
+++ b/include/linux/thermal.h
@@ -251,7 +251,7 @@ struct thermal_bind_params {
 	 * platform characterization. This value is relative to the
 	 * rest of the weights so a cooling device whose weight is
 	 * double that of another cooling device is twice as
-	 * effective. See Documentation/thermal/sysfs-api.rst for more
+	 * effective. See Documentation/driver-api/thermal/sysfs-api.rst for more
 	 * information.
 	 */
 	int weight;
@@ -259,7 +259,7 @@ struct thermal_bind_params {
 	/*
 	 * This is a bit mask that gives the binding relation between this
 	 * thermal zone and cdev, for a particular trip point.
-	 * See Documentation/thermal/sysfs-api.rst for more information.
+	 * See Documentation/driver-api/thermal/sysfs-api.rst for more information.
 	 */
 	int trip_mask;
 

commit 6bbe6f5732faeabb4bb583726ec2d7f9739532bd
Author: Mauro Carvalho Chehab <mchehab+samsung@kernel.org>
Date:   Tue Jun 18 18:05:28 2019 -0300

    docs: thermal: convert to ReST
    
    Rename the thermal documentation files to ReST, add an
    index for them and adjust in order to produce a nice html
    output via the Sphinx build system.
    
    At its new index.rst, let's add a :orphan: while this is not linked to
    the main index.rst file, in order to avoid build warnings.
    
    Signed-off-by: Mauro Carvalho Chehab <mchehab+samsung@kernel.org>
    Acked-by: Zhang Rui <rui.zhang@intel.com>
    Signed-off-by: Zhang Rui <rui.zhang@intel.com>

diff --git a/include/linux/thermal.h b/include/linux/thermal.h
index 15a4ca5d7099..681047f8cc05 100644
--- a/include/linux/thermal.h
+++ b/include/linux/thermal.h
@@ -251,7 +251,7 @@ struct thermal_bind_params {
 	 * platform characterization. This value is relative to the
 	 * rest of the weights so a cooling device whose weight is
 	 * double that of another cooling device is twice as
-	 * effective. See Documentation/thermal/sysfs-api.txt for more
+	 * effective. See Documentation/thermal/sysfs-api.rst for more
 	 * information.
 	 */
 	int weight;
@@ -259,7 +259,7 @@ struct thermal_bind_params {
 	/*
 	 * This is a bit mask that gives the binding relation between this
 	 * thermal zone and cdev, for a particular trip point.
-	 * See Documentation/thermal/sysfs-api.txt for more information.
+	 * See Documentation/thermal/sysfs-api.rst for more information.
 	 */
 	int trip_mask;
 

commit 2c45e7fbc962be1b03f2c2af817a76f5ba810af2
Merge: 311f71281ff4 6df24c3e81b9
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Thu May 16 16:16:18 2019 -0700

    Merge branch 'next' of git://git.kernel.org/pub/scm/linux/kernel/git/rzhang/linux
    
    Pull thermal management updates from Zhang Rui:
    
     - Remove the 'module' Kconfig option for thermal subsystem framework
       because the thermal framework are required to be ready as early as
       possible to avoid overheat at boot time (Daniel Lezcano)
    
     - Fix a bug that thermal framework pokes disabled thermal zones upon
       resume (Wei Wang)
    
      - A couple of cleanups and trivial fixes on int340x thermal drivers
        (Srinivas Pandruvada, Zhang Rui, Sumeet Pawnikar)
    
    * 'next' of git://git.kernel.org/pub/scm/linux/kernel/git/rzhang/linux:
      drivers: thermal: processor_thermal: Downgrade error message
      mlxsw: Remove obsolete dependency on THERMAL=m
      hwmon/drivers/core: Simplify complex dependency
      thermal/drivers/core: Fix typo in the option name
      thermal/drivers/core: Remove depends on THERMAL in Kconfig
      thermal/drivers/core: Remove module unload code
      thermal/drivers/core: Remove the module Kconfig's option
      thermal: core: skip update disabled thermal zones after suspend
      thermal: make device_register's type argument const
      thermal: intel: int340x: processor_thermal_device: simplify to get driver data
      thermal/int3403_thermal: favor _TMP instead of PTYP

commit b4ab114cc6a1bbf8ca1d9a2339f2b5b43374029b
Author: Guenter Roeck <linux@roeck-us.net>
Date:   Thu Apr 18 12:58:15 2019 -0700

    thermal: Introduce devm_thermal_of_cooling_device_register
    
    thermal_of_cooling_device_register() and thermal_cooling_device_register()
    are typically called from driver probe functions, and
    thermal_cooling_device_unregister() is called from remove functions. This
    makes both a perfect candidate for device managed functions.
    
    Introduce devm_thermal_of_cooling_device_register(). This function can
    also be used to replace thermal_cooling_device_register() by passing a NULL
    pointer as device node. The new function requires both struct device *
    and struct device_node * as parameters since the struct device_node *
    parameter is not always identical to dev->of_node.
    
    Don't introduce a device managed remove function since it is not needed
    at this point.
    
    Signed-off-by: Guenter Roeck <linux@roeck-us.net>
    Signed-off-by: Eduardo Valentin <edubezval@gmail.com>

diff --git a/include/linux/thermal.h b/include/linux/thermal.h
index 5f4705f46c2f..4a22099ed8c0 100644
--- a/include/linux/thermal.h
+++ b/include/linux/thermal.h
@@ -447,6 +447,11 @@ struct thermal_cooling_device *thermal_cooling_device_register(char *, void *,
 struct thermal_cooling_device *
 thermal_of_cooling_device_register(struct device_node *np, char *, void *,
 				   const struct thermal_cooling_device_ops *);
+struct thermal_cooling_device *
+devm_thermal_of_cooling_device_register(struct device *dev,
+				struct device_node *np,
+				char *type, void *devdata,
+				const struct thermal_cooling_device_ops *ops);
 void thermal_cooling_device_unregister(struct thermal_cooling_device *);
 struct thermal_zone_device *thermal_zone_get_zone_by_name(const char *name);
 int thermal_zone_get_temp(struct thermal_zone_device *tz, int *temp);
@@ -503,6 +508,14 @@ static inline struct thermal_cooling_device *
 thermal_of_cooling_device_register(struct device_node *np,
 	char *type, void *devdata, const struct thermal_cooling_device_ops *ops)
 { return ERR_PTR(-ENODEV); }
+static inline struct thermal_cooling_device *
+devm_thermal_of_cooling_device_register(struct device *dev,
+				struct device_node *np,
+				char *type, void *devdata,
+				const struct thermal_cooling_device_ops *ops)
+{
+	return ERR_PTR(-ENODEV);
+}
 static inline void thermal_cooling_device_unregister(
 	struct thermal_cooling_device *cdev)
 { }

commit f991de53a8abef21fae3e31967cb4f6a75c070b5
Author: Jean-Francois Dagenais <jeff.dagenais@gmail.com>
Date:   Thu Apr 18 12:36:39 2019 -0400

    thermal: make device_register's type argument const
    
    ...because it can be, the buffer is strlcpy'd into a local buffer in a
    thermal struct member.
    
    Signed-off-by: Jean-Francois Dagenais <jeff.dagenais@gmail.com>
    Signed-off-by: Zhang Rui <rui.zhang@intel.com>

diff --git a/include/linux/thermal.h b/include/linux/thermal.h
index 5f4705f46c2f..42ddaafe7705 100644
--- a/include/linux/thermal.h
+++ b/include/linux/thermal.h
@@ -442,10 +442,10 @@ void thermal_zone_device_update(struct thermal_zone_device *,
 				enum thermal_notify_event);
 void thermal_zone_set_trips(struct thermal_zone_device *);
 
-struct thermal_cooling_device *thermal_cooling_device_register(char *, void *,
-		const struct thermal_cooling_device_ops *);
+struct thermal_cooling_device *thermal_cooling_device_register(const char *,
+		void *, const struct thermal_cooling_device_ops *);
 struct thermal_cooling_device *
-thermal_of_cooling_device_register(struct device_node *np, char *, void *,
+thermal_of_cooling_device_register(struct device_node *np, const char *, void *,
 				   const struct thermal_cooling_device_ops *);
 void thermal_cooling_device_unregister(struct thermal_cooling_device *);
 struct thermal_zone_device *thermal_zone_get_zone_by_name(const char *name);

commit 7e3c03817feccdf2b26722993825dc09377908b4
Author: Lina Iyer <ilina@codeaurora.org>
Date:   Mon May 7 11:52:29 2018 -0600

    drivers: thermal: Update license to SPDX format
    
    Update licences format for core thermal files.
    
    Signed-off-by: Lina Iyer <ilina@codeaurora.org>
    Acked-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Signed-off-by: Zhang Rui <rui.zhang@intel.com>

diff --git a/include/linux/thermal.h b/include/linux/thermal.h
index 7834be668d80..5f4705f46c2f 100644
--- a/include/linux/thermal.h
+++ b/include/linux/thermal.h
@@ -1,25 +1,10 @@
+/* SPDX-License-Identifier: GPL-2.0 */
 /*
  *  thermal.h  ($Revision: 0 $)
  *
  *  Copyright (C) 2008  Intel Corp
  *  Copyright (C) 2008  Zhang Rui <rui.zhang@intel.com>
  *  Copyright (C) 2008  Sujith Thomas <sujith.thomas@intel.com>
- *
- * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
- *  This program is free software; you can redistribute it and/or modify
- *  it under the terms of the GNU General Public License as published by
- *  the Free Software Foundation; version 2 of the License.
- *
- *  This program is distributed in the hope that it will be useful, but
- *  WITHOUT ANY WARRANTY; without even the implied warranty of
- *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
- *  General Public License for more details.
- *
- *  You should have received a copy of the GNU General Public License along
- *  with this program; if not, write to the Free Software Foundation, Inc.,
- *  59 Temple Place, Suite 330, Boston, MA 02111-1307 USA.
- *
- * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  */
 
 #ifndef __THERMAL_H__

commit 8ea229511e06f9635ecc338dcbe0db41a73623f0
Author: Viresh Kumar <viresh.kumar@linaro.org>
Date:   Mon Apr 2 16:26:25 2018 +0530

    thermal: Add cooling device's statistics in sysfs
    
    This extends the sysfs interface for thermal cooling devices and exposes
    some pretty useful statistics. These statistics have proven to be quite
    useful specially while doing benchmarks related to the task scheduler,
    where we want to make sure that nothing has disrupted the test,
    specially the cooling device which may have put constraints on the CPUs.
    The information exposed here tells us to what extent the CPUs were
    constrained by the thermal framework.
    
    The write-only "reset" file is used to reset the statistics.
    
    The read-only "time_in_state_ms" file shows the time (in msec) spent by the
    device in the respective cooling states, and it prints one line per
    cooling state.
    
    The read-only "total_trans" file shows single positive integer value
    showing the total number of cooling state transitions the device has
    gone through since the time the cooling device is registered or the time
    when statistics were reset last.
    
    The read-only "trans_table" file shows a two dimensional matrix, where
    an entry <i,j> (row i, column j) represents the number of transitions
    from State_i to State_j.
    
    This is how the directory structure looks like for a single cooling
    device:
    
    $ ls -R /sys/class/thermal/cooling_device0/
    /sys/class/thermal/cooling_device0/:
    cur_state  max_state  power  stats  subsystem  type  uevent
    
    /sys/class/thermal/cooling_device0/power:
    autosuspend_delay_ms  runtime_active_time  runtime_suspended_time
    control               runtime_status
    
    /sys/class/thermal/cooling_device0/stats:
    reset  time_in_state_ms  total_trans  trans_table
    
    This is tested on ARM 64-bit Hisilicon hikey620 board running Ubuntu and
    ARM 64-bit Hisilicon hikey960 board running Android.
    
    Signed-off-by: Viresh Kumar <viresh.kumar@linaro.org>
    Signed-off-by: Zhang Rui <rui.zhang@intel.com>

diff --git a/include/linux/thermal.h b/include/linux/thermal.h
index 8c5302374eaa..7834be668d80 100644
--- a/include/linux/thermal.h
+++ b/include/linux/thermal.h
@@ -148,6 +148,7 @@ struct thermal_cooling_device {
 	struct device device;
 	struct device_node *np;
 	void *devdata;
+	void *stats;
 	const struct thermal_cooling_device_ops *ops;
 	bool updated; /* true if the cooling device does not need update */
 	struct mutex lock; /* protect thermal_instances list */

commit 023b7b07ccb57317bee4d971be546cc4469f4e7e
Author: Arvind Yadav <arvind.yadav.cs@gmail.com>
Date:   Thu Aug 31 11:30:45 2017 +0530

    thermal : Remove const to make same prototype
    
    Here, prototype of thermal_zone_device_register is not matching
    with static inline thermal_zone_device_register. One is using
    const thermal_zone_params. Other is using non-const.
    
    Signed-off-by: Arvind Yadav <arvind.yadav.cs@gmail.com>
    Signed-off-by: Zhang Rui <rui.zhang@intel.com>

diff --git a/include/linux/thermal.h b/include/linux/thermal.h
index fd5b959c753c..8c5302374eaa 100644
--- a/include/linux/thermal.h
+++ b/include/linux/thermal.h
@@ -488,7 +488,7 @@ static inline int power_actor_set_power(struct thermal_cooling_device *cdev,
 static inline struct thermal_zone_device *thermal_zone_device_register(
 	const char *type, int trips, int mask, void *devdata,
 	struct thermal_zone_device_ops *ops,
-	const struct thermal_zone_params *tzp,
+	struct thermal_zone_params *tzp,
 	int passive_delay, int polling_delay)
 { return ERR_PTR(-ENODEV); }
 static inline void thermal_zone_device_unregister(

commit 38e44da591303d08b0d965a033e11ade284999d0
Author: Brian Bian <brian.bian@linux.intel.com>
Date:   Wed Aug 9 11:45:40 2017 -0700

    thermal: int3400_thermal: process "thermal table changed" event
    
    Some BIOS implement ACPI notification code 0x83 to indicate active
    relationship table(ART) and/or thermal relationship table(TRT) changes
    to INT3400 device. This event needs to be propagated to user space so
    that it can be handled by the user space thermal daemon.
    
    Signed-off-by: Brian Bian <brian.bian@linux.intel.com>
    Signed-off-by: Zhang Rui <rui.zhang@intel.com>

diff --git a/include/linux/thermal.h b/include/linux/thermal.h
index dab11f97e1c6..fd5b959c753c 100644
--- a/include/linux/thermal.h
+++ b/include/linux/thermal.h
@@ -102,6 +102,7 @@ enum thermal_notify_event {
 	THERMAL_DEVICE_DOWN, /* Thermal device is down */
 	THERMAL_DEVICE_UP, /* Thermal device is up after a down event */
 	THERMAL_DEVICE_POWER_CAPABILITY_CHANGED, /* power capability changed */
+	THERMAL_TABLE_CHANGED, /* Thermal table(s) changed */
 };
 
 struct thermal_zone_device_ops {

commit b31ef8285b19ec5563274c574fcfe7a5993125ce
Author: Matthew Wilcox <mawilcox@microsoft.com>
Date:   Wed Dec 21 09:47:03 2016 -0800

    thermal core: convert ID allocation to IDA
    
    The thermal core does not use the ability to look up pointers by ID, so
    convert it from using an IDR to the more space-efficient IDA.
    
    Signed-off-by: Matthew Wilcox <mawilcox@microsoft.com>
    Signed-off-by: Zhang Rui <rui.zhang@intel.com>

diff --git a/include/linux/thermal.h b/include/linux/thermal.h
index e275e98bdceb..dab11f97e1c6 100644
--- a/include/linux/thermal.h
+++ b/include/linux/thermal.h
@@ -194,7 +194,7 @@ struct thermal_attr {
  * @governor:	pointer to the governor for this thermal zone
  * @governor_data:	private pointer for governor data
  * @thermal_instances:	list of &struct thermal_instance of this thermal zone
- * @idr:	&struct idr to generate unique id for this zone's cooling
+ * @ida:	&struct ida to generate unique id for this zone's cooling
  *		devices
  * @lock:	lock to protect thermal_instances list
  * @node:	node in thermal_tz_list (in thermal_core.c)
@@ -227,7 +227,7 @@ struct thermal_zone_device {
 	struct thermal_governor *governor;
 	void *governor_data;
 	struct list_head thermal_instances;
-	struct idr idr;
+	struct ida ida;
 	struct mutex lock;
 	struct list_head node;
 	struct delayed_work poll_queue;

commit 4d0fe7490d7f4d61b582acbae718328284f151b9
Author: Eduardo Valentin <edubezval@gmail.com>
Date:   Mon Nov 7 21:08:52 2016 -0800

    thermal: core: move trips attributes to tz->device.groups
    
    Finally, move the last thermal zone sysfs attributes to
    tz->device.groups: trips attributes. This requires adding a
    attribute_group to thermal_zone_device, creating it dynamically, and
    then setting all trips attributes in it. The trips attribute is then
    added to the tz->device.groups.
    
    As the removal of all attributes are handled by device core, the device
    remove calls are not needed anymore.
    
    Cc: Zhang Rui <rui.zhang@intel.com>
    Cc: linux-pm@vger.kernel.org
    Cc: linux-kernel@vger.kernel.org
    Signed-off-by: Eduardo Valentin <edubezval@gmail.com>
    Signed-off-by: Zhang Rui <rui.zhang@intel.com>

diff --git a/include/linux/thermal.h b/include/linux/thermal.h
index 511182a88e76..e275e98bdceb 100644
--- a/include/linux/thermal.h
+++ b/include/linux/thermal.h
@@ -28,6 +28,7 @@
 #include <linux/of.h>
 #include <linux/idr.h>
 #include <linux/device.h>
+#include <linux/sysfs.h>
 #include <linux/workqueue.h>
 #include <uapi/linux/thermal.h>
 
@@ -204,6 +205,7 @@ struct thermal_zone_device {
 	int id;
 	char type[THERMAL_NAME_LENGTH];
 	struct device device;
+	struct attribute_group trips_attribute_group;
 	struct thermal_attr *trip_temp_attrs;
 	struct thermal_attr *trip_type_attrs;
 	struct thermal_attr *trip_hyst_attrs;

commit 0e70f466fb910ae54c4c71243b99385129e93feb
Author: Srinivas Pandruvada <srinivas.pandruvada@linux.intel.com>
Date:   Fri Aug 26 16:21:16 2016 -0700

    thermal: Enhance thermal_zone_device_update for events
    
    Added one additional parameter to thermal_zone_device_update() to provide
    caller with an optional capability to specify reason.
    Currently this event is used by user space governor to trigger different
    processing based on event code. Also it saves an additional call to read
    temperature when the event is received.
    The following events are cuurently defined:
    - Unspecified event
    - New temperature sample
    - Trip point violated
    - Trip point changed
    - thermal device up and down
    - thermal device power capability changed
    
    Signed-off-by: Srinivas Pandruvada <srinivas.pandruvada@linux.intel.com>
    Signed-off-by: Zhang Rui <rui.zhang@intel.com>

diff --git a/include/linux/thermal.h b/include/linux/thermal.h
index b3c16f06fdc4..511182a88e76 100644
--- a/include/linux/thermal.h
+++ b/include/linux/thermal.h
@@ -92,6 +92,17 @@ enum thermal_trend {
 	THERMAL_TREND_DROP_FULL, /* apply lowest cooling action */
 };
 
+/* Thermal notification reason */
+enum thermal_notify_event {
+	THERMAL_EVENT_UNSPECIFIED, /* Unspecified event */
+	THERMAL_EVENT_TEMP_SAMPLE, /* New Temperature sample */
+	THERMAL_TRIP_VIOLATED, /* TRIP Point violation */
+	THERMAL_TRIP_CHANGED, /* TRIP Point temperature changed */
+	THERMAL_DEVICE_DOWN, /* Thermal device is down */
+	THERMAL_DEVICE_UP, /* Thermal device is up after a down event */
+	THERMAL_DEVICE_POWER_CAPABILITY_CHANGED, /* power capability changed */
+};
+
 struct thermal_zone_device_ops {
 	int (*bind) (struct thermal_zone_device *,
 		     struct thermal_cooling_device *);
@@ -187,6 +198,7 @@ struct thermal_attr {
  * @lock:	lock to protect thermal_instances list
  * @node:	node in thermal_tz_list (in thermal_core.c)
  * @poll_queue:	delayed work for polling
+ * @notify_event: Last notification event
  */
 struct thermal_zone_device {
 	int id;
@@ -217,6 +229,7 @@ struct thermal_zone_device {
 	struct mutex lock;
 	struct list_head node;
 	struct delayed_work poll_queue;
+	enum thermal_notify_event notify_event;
 };
 
 /**
@@ -436,7 +449,8 @@ int thermal_zone_bind_cooling_device(struct thermal_zone_device *, int,
 				     unsigned int);
 int thermal_zone_unbind_cooling_device(struct thermal_zone_device *, int,
 				       struct thermal_cooling_device *);
-void thermal_zone_device_update(struct thermal_zone_device *);
+void thermal_zone_device_update(struct thermal_zone_device *,
+				enum thermal_notify_event);
 void thermal_zone_set_trips(struct thermal_zone_device *);
 
 struct thermal_cooling_device *thermal_cooling_device_register(char *, void *,
@@ -487,7 +501,8 @@ static inline int thermal_zone_unbind_cooling_device(
 	struct thermal_zone_device *tz, int trip,
 	struct thermal_cooling_device *cdev)
 { return -ENODEV; }
-static inline void thermal_zone_device_update(struct thermal_zone_device *tz)
+static inline void thermal_zone_device_update(struct thermal_zone_device *tz,
+					      enum thermal_notify_event event)
 { }
 static inline void thermal_zone_set_trips(struct thermal_zone_device *tz)
 { }

commit e78eaf45993a51e5d7120de48aa01f059ffe8d37
Author: Sascha Hauer <s.hauer@pengutronix.de>
Date:   Wed Jun 22 16:42:03 2016 +0800

    thermal: streamline get_trend callbacks
    
    The .get_trend callback in struct thermal_zone_device_ops has
    the prototype:
            int (*get_trend) (struct thermal_zone_device *, int,
                              enum thermal_trend *);
    whereas the .get_trend callback in struct thermal_zone_of_device_ops
    has:
            int (*get_trend)(void *, long *);
    
    Streamline both prototypes and add the trip argument to the OF callback
    aswell and use enum thermal_trend * instead of an integer pointer.
    
    While the OF prototype may be the better one, this should be decided at
    framework level and not on OF level.
    
    Signed-off-by: Sascha Hauer <s.hauer@pengutronix.de>
    Signed-off-by: Caesar Wang <wxt@rock-chips.com>
    Cc: Zhang Rui <rui.zhang@intel.com>
    Cc: Eduardo Valentin <edubezval@gmail.com>
    Cc: linux-pm@vger.kernel.org
    Reviewed-by: Keerthy <j-keerthy@ti.com>
    Signed-off-by: Eduardo Valentin <edubezval@gmail.com>
    Signed-off-by: Zhang Rui <rui.zhang@intel.com>

diff --git a/include/linux/thermal.h b/include/linux/thermal.h
index 20118b9ebeb7..b3c16f06fdc4 100644
--- a/include/linux/thermal.h
+++ b/include/linux/thermal.h
@@ -350,7 +350,7 @@ struct thermal_genl_event {
  */
 struct thermal_zone_of_device_ops {
 	int (*get_temp)(void *, int *);
-	int (*get_trend)(void *, long *);
+	int (*get_trend)(void *, int, enum thermal_trend *);
 	int (*set_trips)(void *, int, int);
 	int (*set_emul_temp)(void *, int);
 	int (*set_trip_temp)(void *, int, int);

commit 826386e73193e0b58c6d797fbbab409bc98b1d9c
Author: Sascha Hauer <s.hauer@pengutronix.de>
Date:   Wed Jun 22 16:42:02 2016 +0800

    thermal: of: implement .set_trips for device tree thermal zones
    
    This patch implements .set_trips for device tree thermal zones.
    As the hardware-tracked trip points is supported by thermal core patch[0].
    
    patch[0]
    "thermal: Add support for hardware-tracked trip points".
    
    Signed-off-by: Sascha Hauer <s.hauer@pengutronix.de>
    Signed-off-by: Caesar Wang <wxt@rock-chips.com>
    Cc: Zhang Rui <rui.zhang@intel.com>
    Cc: Eduardo Valentin <edubezval@gmail.com>
    Reviewed-by: Javi Merino <javi.merino@arm.com>
    Signed-off-by: Eduardo Valentin <edubezval@gmail.com>
    Signed-off-by: Zhang Rui <rui.zhang@intel.com>

diff --git a/include/linux/thermal.h b/include/linux/thermal.h
index 54cdfeaaedd4..20118b9ebeb7 100644
--- a/include/linux/thermal.h
+++ b/include/linux/thermal.h
@@ -340,6 +340,9 @@ struct thermal_genl_event {
  *
  * Optional:
  * @get_trend: a pointer to a function that reads the sensor temperature trend.
+ * @set_trips: a pointer to a function that sets a temperature window. When
+ *	       this window is left the driver must inform the thermal core via
+ *	       thermal_zone_device_update.
  * @set_emul_temp: a pointer to a function that sets sensor emulated
  *		   temperature.
  * @set_trip_temp: a pointer to a function that sets the trip temperature on
@@ -348,6 +351,7 @@ struct thermal_genl_event {
 struct thermal_zone_of_device_ops {
 	int (*get_temp)(void *, int *);
 	int (*get_trend)(void *, long *);
+	int (*set_trips)(void *, int, int);
 	int (*set_emul_temp)(void *, int);
 	int (*set_trip_temp)(void *, int, int);
 };

commit 060c034a974187e930b790957cafc5047cc30a40
Author: Sascha Hauer <s.hauer@pengutronix.de>
Date:   Wed Jun 22 16:42:01 2016 +0800

    thermal: Add support for hardware-tracked trip points
    
    This adds support for hardware-tracked trip points to the device tree
    thermal sensor framework.
    
    The framework supports an arbitrary number of trip points. Whenever
    the current temperature is updated, the trip points immediately
    below and above the current temperature are found. A .set_trips
    callback is then called with the temperatures. If there is no trip
    point above or below the current temperature, the passed trip
    temperature will be -INT_MAX or INT_MAX respectively. In this callback,
    the driver should program the hardware such that it is notified
    when either of these trip points are triggered. When a trip point
    is triggered, the driver should call `thermal_zone_device_update'
    for the respective thermal zone. This will cause the trip points
    to be updated again.
    
    If .set_trips is not implemented, the framework behaves as before.
    
    This patch is based on an earlier version from Mikko Perttunen
    <mikko.perttunen@kapsi.fi>
    
    Signed-off-by: Sascha Hauer <s.hauer@pengutronix.de>
    Signed-off-by: Caesar Wang <wxt@rock-chips.com>
    Cc: Zhang Rui <rui.zhang@intel.com>
    Cc: Eduardo Valentin <edubezval@gmail.com>
    Cc: linux-pm@vger.kernel.org
    Reviewed-by: Javi Merino <javi.merino@arm.com>
    Signed-off-by: Eduardo Valentin <edubezval@gmail.com>
    Signed-off-by: Zhang Rui <rui.zhang@intel.com>

diff --git a/include/linux/thermal.h b/include/linux/thermal.h
index 707d7353c28b..54cdfeaaedd4 100644
--- a/include/linux/thermal.h
+++ b/include/linux/thermal.h
@@ -98,6 +98,7 @@ struct thermal_zone_device_ops {
 	int (*unbind) (struct thermal_zone_device *,
 		       struct thermal_cooling_device *);
 	int (*get_temp) (struct thermal_zone_device *, int *);
+	int (*set_trips) (struct thermal_zone_device *, int, int);
 	int (*get_mode) (struct thermal_zone_device *,
 			 enum thermal_device_mode *);
 	int (*set_mode) (struct thermal_zone_device *,
@@ -168,6 +169,10 @@ struct thermal_attr {
  * @last_temperature:	previous temperature read
  * @emul_temperature:	emulated temperature when using CONFIG_THERMAL_EMULATION
  * @passive:		1 if you've crossed a passive trip point, 0 otherwise.
+ * @prev_low_trip:	the low current temperature if you've crossed a passive
+			trip point.
+ * @prev_high_trip:	the above current temperature if you've crossed a
+			passive trip point.
  * @forced_passive:	If > 0, temperature at which to switch on all ACPI
  *			processor cooling devices.  Currently only used by the
  *			step-wise governor.
@@ -199,6 +204,8 @@ struct thermal_zone_device {
 	int last_temperature;
 	int emul_temperature;
 	int passive;
+	int prev_low_trip;
+	int prev_high_trip;
 	unsigned int forced_passive;
 	atomic_t need_update;
 	struct thermal_zone_device_ops *ops;
@@ -426,6 +433,7 @@ int thermal_zone_bind_cooling_device(struct thermal_zone_device *, int,
 int thermal_zone_unbind_cooling_device(struct thermal_zone_device *, int,
 				       struct thermal_cooling_device *);
 void thermal_zone_device_update(struct thermal_zone_device *);
+void thermal_zone_set_trips(struct thermal_zone_device *);
 
 struct thermal_cooling_device *thermal_cooling_device_register(char *, void *,
 		const struct thermal_cooling_device_ops *);
@@ -477,6 +485,8 @@ static inline int thermal_zone_unbind_cooling_device(
 { return -ENODEV; }
 static inline void thermal_zone_device_update(struct thermal_zone_device *tz)
 { }
+static inline void thermal_zone_set_trips(struct thermal_zone_device *tz)
+{ }
 static inline struct thermal_cooling_device *
 thermal_cooling_device_register(char *type, void *devdata,
 	const struct thermal_cooling_device_ops *ops)

commit 4a7069a32c99a81950de035535b0a064dcceaeba
Author: Rajendra Nayak <rnayak@codeaurora.org>
Date:   Thu May 5 14:21:42 2016 +0530

    thermal: core: export apis to get slope and offset
    
    Add apis for platform thermal drivers to query for slope and offset
    attributes, which might be needed for temperature calculations.
    
    Signed-off-by: Rajendra Nayak <rnayak@codeaurora.org>
    Signed-off-by: Eduardo Valentin <edubezval@gmail.com>
    Signed-off-by: Zhang Rui <rui.zhang@intel.com>

diff --git a/include/linux/thermal.h b/include/linux/thermal.h
index ee517bef0db0..707d7353c28b 100644
--- a/include/linux/thermal.h
+++ b/include/linux/thermal.h
@@ -435,6 +435,8 @@ thermal_of_cooling_device_register(struct device_node *np, char *, void *,
 void thermal_cooling_device_unregister(struct thermal_cooling_device *);
 struct thermal_zone_device *thermal_zone_get_zone_by_name(const char *name);
 int thermal_zone_get_temp(struct thermal_zone_device *tz, int *temp);
+int thermal_zone_get_slope(struct thermal_zone_device *tz);
+int thermal_zone_get_offset(struct thermal_zone_device *tz);
 
 int get_tz_trend(struct thermal_zone_device *, int);
 struct thermal_instance *get_thermal_instance(struct thermal_zone_device *,
@@ -492,6 +494,12 @@ static inline struct thermal_zone_device *thermal_zone_get_zone_by_name(
 static inline int thermal_zone_get_temp(
 		struct thermal_zone_device *tz, int *temp)
 { return -ENODEV; }
+static inline int thermal_zone_get_slope(
+		struct thermal_zone_device *tz)
+{ return -ENODEV; }
+static inline int thermal_zone_get_offset(
+		struct thermal_zone_device *tz)
+{ return -ENODEV; }
 static inline int get_tz_trend(struct thermal_zone_device *tz, int trip)
 { return -ENODEV; }
 static inline struct thermal_instance *

commit 5a5e78cd706ce0577ed6356634a34552c866cc10
Author: Caesar Wang <wxt@rock-chips.com>
Date:   Wed May 18 23:01:39 2016 +0800

    thermal: add the note for set_trip_temp
    
    Fixes commit 60f9ce3ada53
    ("thermal: of-thermal: allow setting trip_temp on hardware")
    
    Signed-off-by: Caesar Wang <wxt@rock-chips.com>
    Cc: Zhang Rui <rui.zhang@intel.com>
    Cc: Eduardo Valentin <edubezval@gmail.com>
    Cc: linux-pm@vger.kernel.org
    Signed-off-by: Zhang Rui <rui.zhang@intel.com>

diff --git a/include/linux/thermal.h b/include/linux/thermal.h
index e45abe7db9a6..ee517bef0db0 100644
--- a/include/linux/thermal.h
+++ b/include/linux/thermal.h
@@ -335,6 +335,8 @@ struct thermal_genl_event {
  * @get_trend: a pointer to a function that reads the sensor temperature trend.
  * @set_emul_temp: a pointer to a function that sets sensor emulated
  *		   temperature.
+ * @set_trip_temp: a pointer to a function that sets the trip temperature on
+ *		   hardware.
  */
 struct thermal_zone_of_device_ops {
 	int (*get_temp)(void *, int *);

commit c35095215a80b13af2f521e1ab1c727a5224e53b
Author: Wei Ni <wni@nvidia.com>
Date:   Tue Mar 29 18:29:17 2016 +0800

    thermal: of-thermal: allow setting trip_temp on hardware
    
    In current of-thermal, the .set_trip_temp only support to
    set trip_temp for SW. But some sensors support to set
    trip_temp on hardware, so that can trigger interrupt,
    shutdown or any other events.
    This patch adds .set_trip_temp() callback in
    thermal_zone_of_device_ops{}, so that the sensor device can
    use it to set trip_temp on hardware.
    
    Signed-off-by: Wei Ni <wni@nvidia.com>
    Signed-off-by: Eduardo Valentin <edubezval@gmail.com>

diff --git a/include/linux/thermal.h b/include/linux/thermal.h
index 1b8a5a7876ce..e45abe7db9a6 100644
--- a/include/linux/thermal.h
+++ b/include/linux/thermal.h
@@ -340,6 +340,7 @@ struct thermal_zone_of_device_ops {
 	int (*get_temp)(void *, int *);
 	int (*get_trend)(void *, long *);
 	int (*set_emul_temp)(void *, int);
+	int (*set_trip_temp)(void *, int, int);
 };
 
 /**

commit 1d0fd42fa31d18ba0a3e0dd008c9e93e1cebe451
Author: Wei Ni <wni@nvidia.com>
Date:   Thu Mar 3 17:33:46 2016 +0800

    thermal: consistently use int for trip temp
    
    The commit 17e8351a7739 consistently use int for temperature,
    however it missed a few in trip temperature and thermal_core.
    
    In current codes, the trip->temperature used "unsigned long"
    and zone->temperature used"int", if the temperature is negative
    value, it will get wrong result when compare temperature with
    trip temperature.
    
    This patch can fix it.
    
    Signed-off-by: Wei Ni <wni@nvidia.com>
    Signed-off-by: Eduardo Valentin <edubezval@gmail.com>

diff --git a/include/linux/thermal.h b/include/linux/thermal.h
index a55d0523f75d..1b8a5a7876ce 100644
--- a/include/linux/thermal.h
+++ b/include/linux/thermal.h
@@ -352,8 +352,8 @@ struct thermal_zone_of_device_ops {
 
 struct thermal_trip {
 	struct device_node *np;
-	unsigned long int temperature;
-	unsigned long int hysteresis;
+	int temperature;
+	int hysteresis;
 	enum thermal_trip_type type;
 };
 

commit 81ad4276b505e987dd8ebbdf63605f92cd172b52
Author: Zhang Rui <rui.zhang@intel.com>
Date:   Fri Mar 18 10:03:24 2016 +0800

    Thermal: Ignore invalid trip points
    
    In some cases, platform thermal driver may report invalid trip points,
    thermal core should not take any action for these trip points.
    
    This fixed a regression that bogus trip point starts to screw up thermal
    control on some Lenovo laptops, after
    commit bb431ba26c5cd0a17c941ca6c3a195a3a6d5d461
    Author: Zhang Rui <rui.zhang@intel.com>
    Date:   Fri Oct 30 16:31:47 2015 +0800
    
        Thermal: initialize thermal zone device correctly
    
        After thermal zone device registered, as we have not read any
        temperature before, thus tz->temperature should not be 0,
        which actually means 0C, and thermal trend is not available.
        In this case, we need specially handling for the first
        thermal_zone_device_update().
    
        Both thermal core framework and step_wise governor is
        enhanced to handle this. And since the step_wise governor
        is the only one that uses trends, so it's the only thermal
        governor that needs to be updated.
    
        Tested-by: Manuel Krause <manuelkrause@netscape.net>
        Tested-by: szegad <szegadlo@poczta.onet.pl>
        Tested-by: prash <prash.n.rao@gmail.com>
        Tested-by: amish <ammdispose-arch@yahoo.com>
        Tested-by: Matthias <morpheusxyz123@yahoo.de>
        Reviewed-by: Javi Merino <javi.merino@arm.com>
        Signed-off-by: Zhang Rui <rui.zhang@intel.com>
        Signed-off-by: Chen Yu <yu.c.chen@intel.com>
    
    CC: <stable@vger.kernel.org> #3.18+
    Link: https://bugzilla.redhat.com/show_bug.cgi?id=1317190
    Link: https://bugzilla.kernel.org/show_bug.cgi?id=114551
    Signed-off-by: Zhang Rui <rui.zhang@intel.com>

diff --git a/include/linux/thermal.h b/include/linux/thermal.h
index 9c481991fdc7..a55d0523f75d 100644
--- a/include/linux/thermal.h
+++ b/include/linux/thermal.h
@@ -156,6 +156,7 @@ struct thermal_attr {
  * @trip_hyst_attrs:	attributes for trip points for sysfs: trip hysteresis
  * @devdata:	private pointer for device private data
  * @trips:	number of trip points the thermal zone supports
+ * @trips_disabled;	bitmap for disabled trips
  * @passive_delay:	number of milliseconds to wait between polls when
  *			performing passive cooling.
  * @polling_delay:	number of milliseconds to wait between polls when
@@ -191,6 +192,7 @@ struct thermal_zone_device {
 	struct thermal_attr *trip_hyst_attrs;
 	void *devdata;
 	int trips;
+	unsigned long trips_disabled;	/* bitmap for disabled trips */
 	int passive_delay;
 	int polling_delay;
 	int temperature;

commit e498b4984db82b4ba3ceea7dba813222a31e9c2e
Author: Laxman Dewangan <ldewangan@nvidia.com>
Date:   Wed Mar 9 18:40:06 2016 +0530

    thermal: of-thermal: Add devm version of thermal_zone_of_sensor_register
    
    Add resource managed version of thermal_zone_of_sensor_register() and
    thermal_zone_of_sensor_unregister().
    
    This helps in reducing the code size in error path, remove of
    driver remove callbacks and making proper sequence for deallocations.
    
    Signed-off-by: Laxman Dewangan <ldewangan@nvidia.com>
    Signed-off-by: Eduardo Valentin <edubezval@gmail.com>

diff --git a/include/linux/thermal.h b/include/linux/thermal.h
index e13a1ace50e9..9c481991fdc7 100644
--- a/include/linux/thermal.h
+++ b/include/linux/thermal.h
@@ -362,6 +362,11 @@ thermal_zone_of_sensor_register(struct device *dev, int id, void *data,
 				const struct thermal_zone_of_device_ops *ops);
 void thermal_zone_of_sensor_unregister(struct device *dev,
 				       struct thermal_zone_device *tz);
+struct thermal_zone_device *devm_thermal_zone_of_sensor_register(
+		struct device *dev, int id, void *data,
+		const struct thermal_zone_of_device_ops *ops);
+void devm_thermal_zone_of_sensor_unregister(struct device *dev,
+					    struct thermal_zone_device *tz);
 #else
 static inline struct thermal_zone_device *
 thermal_zone_of_sensor_register(struct device *dev, int id, void *data,
@@ -376,6 +381,19 @@ void thermal_zone_of_sensor_unregister(struct device *dev,
 {
 }
 
+static inline struct thermal_zone_device *devm_thermal_zone_of_sensor_register(
+		struct device *dev, int id, void *data,
+		const struct thermal_zone_of_device_ops *ops)
+{
+	return ERR_PTR(-ENODEV);
+}
+
+static inline
+void devm_thermal_zone_of_sensor_unregister(struct device *dev,
+					    struct thermal_zone_device *tz)
+{
+}
+
 #endif
 
 #if IS_ENABLED(CONFIG_THERMAL)

commit 4511f7166a2deb5f7a578cf87fd2fe1ae83527e3
Author: Chen Yu <yu.c.chen@intel.com>
Date:   Fri Oct 30 16:32:10 2015 +0800

    Thermal: do thermal zone update after a cooling device registered
    
    When a new cooling device is registered, we need to update the
    thermal zone to set the new registered cooling device to a proper
    state.
    
    This fixes a problem that the system is cool, while the fan devices
    are left running on full speed after boot, if fan device is registered
    after thermal zone device.
    
    Here is the history of why current patch looks like this:
    https://patchwork.kernel.org/patch/7273041/
    
    CC: <stable@vger.kernel.org> #3.18+
    Reference:https://bugzilla.kernel.org/show_bug.cgi?id=92431
    Tested-by: Manuel Krause <manuelkrause@netscape.net>
    Tested-by: szegad <szegadlo@poczta.onet.pl>
    Tested-by: prash <prash.n.rao@gmail.com>
    Tested-by: amish <ammdispose-arch@yahoo.com>
    Reviewed-by: Javi Merino <javi.merino@arm.com>
    Signed-off-by: Zhang Rui <rui.zhang@intel.com>
    Signed-off-by: Chen Yu <yu.c.chen@intel.com>

diff --git a/include/linux/thermal.h b/include/linux/thermal.h
index 103fcbe6bdaf..e13a1ace50e9 100644
--- a/include/linux/thermal.h
+++ b/include/linux/thermal.h
@@ -170,6 +170,7 @@ struct thermal_attr {
  * @forced_passive:	If > 0, temperature at which to switch on all ACPI
  *			processor cooling devices.  Currently only used by the
  *			step-wise governor.
+ * @need_update:	if equals 1, thermal_zone_device_update needs to be invoked.
  * @ops:	operations this &thermal_zone_device supports
  * @tzp:	thermal zone parameters
  * @governor:	pointer to the governor for this thermal zone
@@ -197,6 +198,7 @@ struct thermal_zone_device {
 	int emul_temperature;
 	int passive;
 	unsigned int forced_passive;
+	atomic_t need_update;
 	struct thermal_zone_device_ops *ops;
 	struct thermal_zone_params *tzp;
 	struct thermal_governor *governor;

commit bb431ba26c5cd0a17c941ca6c3a195a3a6d5d461
Author: Zhang Rui <rui.zhang@intel.com>
Date:   Fri Oct 30 16:31:47 2015 +0800

    Thermal: initialize thermal zone device correctly
    
    After thermal zone device registered, as we have not read any
    temperature before, thus tz->temperature should not be 0,
    which actually means 0C, and thermal trend is not available.
    In this case, we need specially handling for the first
    thermal_zone_device_update().
    
    Both thermal core framework and step_wise governor is
    enhanced to handle this. And since the step_wise governor
    is the only one that uses trends, so it's the only thermal
    governor that needs to be updated.
    
    CC: <stable@vger.kernel.org> #3.18+
    Tested-by: Manuel Krause <manuelkrause@netscape.net>
    Tested-by: szegad <szegadlo@poczta.onet.pl>
    Tested-by: prash <prash.n.rao@gmail.com>
    Tested-by: amish <ammdispose-arch@yahoo.com>
    Tested-by: Matthias <morpheusxyz123@yahoo.de>
    Reviewed-by: Javi Merino <javi.merino@arm.com>
    Signed-off-by: Zhang Rui <rui.zhang@intel.com>
    Signed-off-by: Chen Yu <yu.c.chen@intel.com>

diff --git a/include/linux/thermal.h b/include/linux/thermal.h
index 613c29bd6baf..103fcbe6bdaf 100644
--- a/include/linux/thermal.h
+++ b/include/linux/thermal.h
@@ -43,6 +43,9 @@
 /* Default weight of a bound cooling device */
 #define THERMAL_WEIGHT_DEFAULT 0
 
+/* use value, which < 0K, to indicate an invalid/uninitialized temperature */
+#define THERMAL_TEMP_INVALID	-274000
+
 /* Unit conversion macros */
 #define DECI_KELVIN_TO_CELSIUS(t)	({			\
 	long _t = (t);						\

commit c86b3de8c8b02d7e474fdc002c8df533b844524c
Author: Arnd Bergmann <arnd@arndb.de>
Date:   Tue Nov 17 17:48:52 2015 +0100

    thermal: fix thermal_zone_bind_cooling_device prototype
    
    When the prototype for thermal_zone_bind_cooling_device
    changed, the static inline wrapper function was left alone,
    which in theory can cause build warnings:
    
    I have seen this error in the past:
    drivers/thermal/db8500_thermal.c: In function 'db8500_cdev_bind':
    drivers/thermal/db8500_thermal.c:78:9: error: too many arguments to function 'thermal_zone_bind_cooling_device'
       ret = thermal_zone_bind_cooling_device(thermal, i, cdev,
    
    while this one no longer shows up, there is no doubt that
    the prototype is still wrong, so let's just fix it anyway.
    
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>
    Fixes: 6cd9e9f629f1 ("thermal: of: fix cooling device weights in device tree")
    Signed-off-by: Eduardo Valentin <edubezval@gmail.com>

diff --git a/include/linux/thermal.h b/include/linux/thermal.h
index 4014a59828fc..613c29bd6baf 100644
--- a/include/linux/thermal.h
+++ b/include/linux/thermal.h
@@ -438,7 +438,8 @@ static inline void thermal_zone_device_unregister(
 static inline int thermal_zone_bind_cooling_device(
 	struct thermal_zone_device *tz, int trip,
 	struct thermal_cooling_device *cdev,
-	unsigned long upper, unsigned long lower)
+	unsigned long upper, unsigned long lower,
+	unsigned int weight)
 { return -ENODEV; }
 static inline int thermal_zone_unbind_cooling_device(
 	struct thermal_zone_device *tz, int trip,

commit e866a2e3950fe2f708d5cc67d641b1725ef7a708
Author: Rasmus Villemoes <linux@rasmusvillemoes.dk>
Date:   Thu Oct 1 23:45:31 2015 +0200

    linux/thermal.h: rename KELVIN_TO_CELSIUS to DECI_KELVIN_TO_CELSIUS
    
    The macros KELVIN_TO_CELSIUS and CELSIUS_TO_KELVIN actually convert
    between deciKelvins and Celsius, so rename them to reflect that. While
    at it, use a statement expression in DECI_KELVIN_TO_CELSIUS to prevent
    expanding the argument multiple times and get rid of a few casts.
    
    Signed-off-by: Rasmus Villemoes <linux@rasmusvillemoes.dk>
    Acked-by: Darren Hart <dvhart@linux.intel.com>
    Signed-off-by: Zhang Rui <rui.zhang@intel.com>

diff --git a/include/linux/thermal.h b/include/linux/thermal.h
index 157d366e761b..4014a59828fc 100644
--- a/include/linux/thermal.h
+++ b/include/linux/thermal.h
@@ -44,9 +44,11 @@
 #define THERMAL_WEIGHT_DEFAULT 0
 
 /* Unit conversion macros */
-#define KELVIN_TO_CELSIUS(t)	(long)(((long)t-2732 >= 0) ?	\
-				((long)t-2732+5)/10 : ((long)t-2732-5)/10)
-#define CELSIUS_TO_KELVIN(t)	((t)*10+2732)
+#define DECI_KELVIN_TO_CELSIUS(t)	({			\
+	long _t = (t);						\
+	((_t-2732 >= 0) ? (_t-2732+5)/10 : (_t-2732-5)/10);	\
+})
+#define CELSIUS_TO_DECI_KELVIN(t)	((t)*10+2732)
 #define DECI_KELVIN_TO_MILLICELSIUS_WITH_OFFSET(t, off) (((t) - (off)) * 100)
 #define DECI_KELVIN_TO_MILLICELSIUS(t) DECI_KELVIN_TO_MILLICELSIUS_WITH_OFFSET(t, 2732)
 #define MILLICELSIUS_TO_DECI_KELVIN_WITH_OFFSET(t, off) (((t) / 100) + (off))

commit c973c3bcec3752455c4d7545edd42935cd7942d9
Author: Javi Merino <javi.merino@arm.com>
Date:   Mon Sep 14 14:23:50 2015 +0100

    thermal: Add a function to get the minimum power
    
    The thermal core already has a function to get the maximum power of a
    cooling device: power_actor_get_max_power().  Add a function to get the
    minimum power of a cooling device.
    
    Cc: Zhang Rui <rui.zhang@intel.com>
    Cc: Eduardo Valentin <edubezval@gmail.com>
    Reviewed-by: Daniel Kurtz <djkurtz@chromium.org>
    Signed-off-by: Javi Merino <javi.merino@arm.com>
    Signed-off-by: Eduardo Valentin <edubezval@gmail.com>

diff --git a/include/linux/thermal.h b/include/linux/thermal.h
index 0c5518e13584..157d366e761b 100644
--- a/include/linux/thermal.h
+++ b/include/linux/thermal.h
@@ -380,6 +380,8 @@ static inline bool cdev_is_power_actor(struct thermal_cooling_device *cdev)
 
 int power_actor_get_max_power(struct thermal_cooling_device *,
 			      struct thermal_zone_device *tz, u32 *max_power);
+int power_actor_get_min_power(struct thermal_cooling_device *,
+			      struct thermal_zone_device *tz, u32 *min_power);
 int power_actor_set_power(struct thermal_cooling_device *,
 			  struct thermal_instance *, u32);
 struct thermal_zone_device *thermal_zone_device_register(const char *, int, int,
@@ -415,6 +417,10 @@ static inline bool cdev_is_power_actor(struct thermal_cooling_device *cdev)
 static inline int power_actor_get_max_power(struct thermal_cooling_device *cdev,
 			      struct thermal_zone_device *tz, u32 *max_power)
 { return 0; }
+static inline int power_actor_get_min_power(struct thermal_cooling_device *cdev,
+					    struct thermal_zone_device *tz,
+					    u32 *min_power)
+{ return -ENODEV; }
 static inline int power_actor_set_power(struct thermal_cooling_device *cdev,
 			  struct thermal_instance *tz, u32 power)
 { return 0; }

commit cd33dc9ac2977ebe30cecbf39d2992190fbac5b4
Author: Punit Agrawal <punit.agrawal@arm.com>
Date:   Tue Sep 8 14:51:12 2015 +0100

    thermal: Fix thermal_zone_of_sensor_register to match documentation
    
    thermal_zone_of_sensor_register is documented as returning a pointer
    to either a valid thermal_zone_device on success, or a corresponding
    ERR_PTR() value.
    
    In contrast, the function returns NULL when THERMAL_OF is configured
    off. Fix this.
    
    Signed-off-by: Punit Agrawal <punit.agrawal@arm.com>
    Acked-by: Guenter Roeck <linux@roeck-us.net>
    Cc: Eduardo Valentin <edubezval@gmail.com>
    Cc: Zhang Rui <rui.zhang@intel.com>
    Signed-off-by: Eduardo Valentin <edubezval@gmail.com>

diff --git a/include/linux/thermal.h b/include/linux/thermal.h
index 17292fee8686..0c5518e13584 100644
--- a/include/linux/thermal.h
+++ b/include/linux/thermal.h
@@ -360,7 +360,7 @@ static inline struct thermal_zone_device *
 thermal_zone_of_sensor_register(struct device *dev, int id, void *data,
 				const struct thermal_zone_of_device_ops *ops)
 {
-	return NULL;
+	return ERR_PTR(-ENODEV);
 }
 
 static inline

commit 17e8351a77397e8a83727eb17e3a3e9b8ab5257a
Author: Sascha Hauer <s.hauer@pengutronix.de>
Date:   Fri Jul 24 08:12:54 2015 +0200

    thermal: consistently use int for temperatures
    
    The thermal code uses int, long and unsigned long for temperatures
    in different places.
    
    Using an unsigned type limits the thermal framework to positive
    temperatures without need. Also several drivers currently will report
    temperatures near UINT_MAX for temperatures below 0°C. This will probably
    immediately shut the machine down due to overtemperature if started below
    0°C.
    
    'long' is 64bit on several architectures. This is not needed since INT_MAX °mC
    is above the melting point of all known materials.
    
    Consistently use a plain 'int' for temperatures throughout the thermal code and
    the drivers. This only changes the places in the drivers where the temperature
    is passed around as pointer, when drivers internally use another type this is
    not changed.
    
    Signed-off-by: Sascha Hauer <s.hauer@pengutronix.de>
    Acked-by: Geert Uytterhoeven <geert+renesas@glider.be>
    Reviewed-by: Jean Delvare <jdelvare@suse.de>
    Reviewed-by: Lukasz Majewski <l.majewski@samsung.com>
    Reviewed-by: Darren Hart <dvhart@linux.intel.com>
    Reviewed-by: Heiko Stuebner <heiko@sntech.de>
    Reviewed-by: Peter Feuerer <peter@piie.net>
    Cc: Punit Agrawal <punit.agrawal@arm.com>
    Cc: Zhang Rui <rui.zhang@intel.com>
    Cc: Eduardo Valentin <edubezval@gmail.com>
    Cc: linux-pm@vger.kernel.org
    Cc: linux-kernel@vger.kernel.org
    Cc: Jean Delvare <jdelvare@suse.de>
    Cc: Peter Feuerer <peter@piie.net>
    Cc: Heiko Stuebner <heiko@sntech.de>
    Cc: Lukasz Majewski <l.majewski@samsung.com>
    Cc: Stephen Warren <swarren@wwwdotorg.org>
    Cc: Thierry Reding <thierry.reding@gmail.com>
    Cc: linux-acpi@vger.kernel.org
    Cc: platform-driver-x86@vger.kernel.org
    Cc: linux-arm-kernel@lists.infradead.org
    Cc: linux-omap@vger.kernel.org
    Cc: linux-samsung-soc@vger.kernel.org
    Cc: Guenter Roeck <linux@roeck-us.net>
    Cc: Rafael J. Wysocki <rjw@rjwysocki.net>
    Cc: Maxime Ripard <maxime.ripard@free-electrons.com>
    Cc: Darren Hart <dvhart@infradead.org>
    Cc: lm-sensors@lm-sensors.org
    Signed-off-by: Zhang Rui <rui.zhang@intel.com>

diff --git a/include/linux/thermal.h b/include/linux/thermal.h
index 037e9df2f610..17292fee8686 100644
--- a/include/linux/thermal.h
+++ b/include/linux/thermal.h
@@ -92,23 +92,19 @@ struct thermal_zone_device_ops {
 		     struct thermal_cooling_device *);
 	int (*unbind) (struct thermal_zone_device *,
 		       struct thermal_cooling_device *);
-	int (*get_temp) (struct thermal_zone_device *, unsigned long *);
+	int (*get_temp) (struct thermal_zone_device *, int *);
 	int (*get_mode) (struct thermal_zone_device *,
 			 enum thermal_device_mode *);
 	int (*set_mode) (struct thermal_zone_device *,
 		enum thermal_device_mode);
 	int (*get_trip_type) (struct thermal_zone_device *, int,
 		enum thermal_trip_type *);
-	int (*get_trip_temp) (struct thermal_zone_device *, int,
-			      unsigned long *);
-	int (*set_trip_temp) (struct thermal_zone_device *, int,
-			      unsigned long);
-	int (*get_trip_hyst) (struct thermal_zone_device *, int,
-			      unsigned long *);
-	int (*set_trip_hyst) (struct thermal_zone_device *, int,
-			      unsigned long);
-	int (*get_crit_temp) (struct thermal_zone_device *, unsigned long *);
-	int (*set_emul_temp) (struct thermal_zone_device *, unsigned long);
+	int (*get_trip_temp) (struct thermal_zone_device *, int, int *);
+	int (*set_trip_temp) (struct thermal_zone_device *, int, int);
+	int (*get_trip_hyst) (struct thermal_zone_device *, int, int *);
+	int (*set_trip_hyst) (struct thermal_zone_device *, int, int);
+	int (*get_crit_temp) (struct thermal_zone_device *, int *);
+	int (*set_emul_temp) (struct thermal_zone_device *, int);
 	int (*get_trend) (struct thermal_zone_device *, int,
 			  enum thermal_trend *);
 	int (*notify) (struct thermal_zone_device *, int,
@@ -332,9 +328,9 @@ struct thermal_genl_event {
  *		   temperature.
  */
 struct thermal_zone_of_device_ops {
-	int (*get_temp)(void *, long *);
+	int (*get_temp)(void *, int *);
 	int (*get_trend)(void *, long *);
-	int (*set_emul_temp)(void *, unsigned long);
+	int (*set_emul_temp)(void *, int);
 };
 
 /**
@@ -406,7 +402,7 @@ thermal_of_cooling_device_register(struct device_node *np, char *, void *,
 				   const struct thermal_cooling_device_ops *);
 void thermal_cooling_device_unregister(struct thermal_cooling_device *);
 struct thermal_zone_device *thermal_zone_get_zone_by_name(const char *name);
-int thermal_zone_get_temp(struct thermal_zone_device *tz, unsigned long *temp);
+int thermal_zone_get_temp(struct thermal_zone_device *tz, int *temp);
 
 int get_tz_trend(struct thermal_zone_device *, int);
 struct thermal_instance *get_thermal_instance(struct thermal_zone_device *,
@@ -457,7 +453,7 @@ static inline struct thermal_zone_device *thermal_zone_get_zone_by_name(
 		const char *name)
 { return ERR_PTR(-ENODEV); }
 static inline int thermal_zone_get_temp(
-		struct thermal_zone_device *tz, unsigned long *temp)
+		struct thermal_zone_device *tz, int *temp)
 { return -ENODEV; }
 static inline int get_tz_trend(struct thermal_zone_device *tz, int trip)
 { return -ENODEV; }

commit 9d0be7f4810257a9b0fc78fff641f14409f14ab3
Author: Eduardo Valentin <edubezval@gmail.com>
Date:   Mon May 11 19:34:23 2015 -0700

    thermal: support slope and offset coefficients
    
    It is common to have a linear extrapolation from
    the current sensor readings and the actual temperature
    value. This is specially the case when the sensor
    is in use to extrapolate hotspots.
    
    This patch adds slope and offset constants for
    single sensor linear extrapolation equation. Because
    the same sensor can be use in different locations,
    from board to board, these constants are added
    as part of thermal_zone_params.
    
    The constants are available through sysfs.
    
    It is up to the device driver to determine
    the usage of these values.
    
    Signed-off-by: Eduardo Valentin <edubezval@gmail.com>

diff --git a/include/linux/thermal.h b/include/linux/thermal.h
index 6bbe11c97cea..037e9df2f610 100644
--- a/include/linux/thermal.h
+++ b/include/linux/thermal.h
@@ -302,6 +302,17 @@ struct thermal_zone_params {
 
 	/* threshold below which the error is no longer accumulated */
 	s32 integral_cutoff;
+
+	/*
+	 * @slope:	slope of a linear temperature adjustment curve.
+	 * 		Used by thermal zone drivers.
+	 */
+	int slope;
+	/*
+	 * @offset:	offset of a linear temperature adjustment curve.
+	 * 		Used by thermal zone drivers (default 0).
+	 */
+	int offset;
 };
 
 struct thermal_genl_event {

commit 6b775e870c56c59c3e16531ea2307b797395f9f7
Author: Javi Merino <javi.merino@arm.com>
Date:   Mon Mar 2 17:17:19 2015 +0000

    thermal: introduce the Power Allocator governor
    
    The power allocator governor is a thermal governor that controls system
    and device power allocation to control temperature.  Conceptually, the
    implementation divides the sustainable power of a thermal zone among
    all the heat sources in that zone.
    
    This governor relies on "power actors", entities that represent heat
    sources.  They can report current and maximum power consumption and
    can set a given maximum power consumption, usually via a cooling
    device.
    
    The governor uses a Proportional Integral Derivative (PID) controller
    driven by the temperature of the thermal zone.  The output of the
    controller is a power budget that is then allocated to each power
    actor that can have bearing on the temperature we are trying to
    control.  It decides how much power to give each cooling device based
    on the performance they are requesting.  The PID controller ensures
    that the total power budget does not exceed the control temperature.
    
    Cc: Zhang Rui <rui.zhang@intel.com>
    Cc: Eduardo Valentin <edubezval@gmail.com>
    Signed-off-by: Punit Agrawal <punit.agrawal@arm.com>
    Signed-off-by: Javi Merino <javi.merino@arm.com>
    Signed-off-by: Eduardo Valentin <edubezval@gmail.com>

diff --git a/include/linux/thermal.h b/include/linux/thermal.h
index bf3c55f405c2..6bbe11c97cea 100644
--- a/include/linux/thermal.h
+++ b/include/linux/thermal.h
@@ -59,6 +59,8 @@
 #define DEFAULT_THERMAL_GOVERNOR       "fair_share"
 #elif defined(CONFIG_THERMAL_DEFAULT_GOV_USER_SPACE)
 #define DEFAULT_THERMAL_GOVERNOR       "user_space"
+#elif defined(CONFIG_THERMAL_DEFAULT_GOV_POWER_ALLOCATOR)
+#define DEFAULT_THERMAL_GOVERNOR       "power_allocator"
 #endif
 
 struct thermal_zone_device;
@@ -154,8 +156,7 @@ struct thermal_attr {
  * @devdata:	private pointer for device private data
  * @trips:	number of trip points the thermal zone supports
  * @passive_delay:	number of milliseconds to wait between polls when
- *			performing passive cooling.  Currenty only used by the
- *			step-wise governor
+ *			performing passive cooling.
  * @polling_delay:	number of milliseconds to wait between polls when
  *			checking whether trip points have been crossed (0 for
  *			interrupt driven systems)
@@ -165,7 +166,6 @@ struct thermal_attr {
  * @last_temperature:	previous temperature read
  * @emul_temperature:	emulated temperature when using CONFIG_THERMAL_EMULATION
  * @passive:		1 if you've crossed a passive trip point, 0 otherwise.
- *			Currenty only used by the step-wise governor.
  * @forced_passive:	If > 0, temperature at which to switch on all ACPI
  *			processor cooling devices.  Currently only used by the
  *			step-wise governor.
@@ -197,7 +197,7 @@ struct thermal_zone_device {
 	int passive;
 	unsigned int forced_passive;
 	struct thermal_zone_device_ops *ops;
-	const struct thermal_zone_params *tzp;
+	struct thermal_zone_params *tzp;
 	struct thermal_governor *governor;
 	void *governor_data;
 	struct list_head thermal_instances;
@@ -275,6 +275,33 @@ struct thermal_zone_params {
 
 	int num_tbps;	/* Number of tbp entries */
 	struct thermal_bind_params *tbp;
+
+	/*
+	 * Sustainable power (heat) that this thermal zone can dissipate in
+	 * mW
+	 */
+	u32 sustainable_power;
+
+	/*
+	 * Proportional parameter of the PID controller when
+	 * overshooting (i.e., when temperature is below the target)
+	 */
+	s32 k_po;
+
+	/*
+	 * Proportional parameter of the PID controller when
+	 * undershooting
+	 */
+	s32 k_pu;
+
+	/* Integral parameter of the PID controller */
+	s32 k_i;
+
+	/* Derivative parameter of the PID controller */
+	s32 k_d;
+
+	/* threshold below which the error is no longer accumulated */
+	s32 integral_cutoff;
 };
 
 struct thermal_genl_event {
@@ -350,7 +377,7 @@ int power_actor_set_power(struct thermal_cooling_device *,
 			  struct thermal_instance *, u32);
 struct thermal_zone_device *thermal_zone_device_register(const char *, int, int,
 		void *, struct thermal_zone_device_ops *,
-		const struct thermal_zone_params *, int, int);
+		struct thermal_zone_params *, int, int);
 void thermal_zone_device_unregister(struct thermal_zone_device *);
 
 int thermal_zone_bind_cooling_device(struct thermal_zone_device *, int,

commit 35b11d2e3a66279a477e36cefb2603806295b8ce
Author: Javi Merino <javi.merino@arm.com>
Date:   Thu Feb 26 19:00:28 2015 +0000

    thermal: extend the cooling device API to include power information
    
    Add three optional callbacks to the cooling device interface to allow
    them to express power.  In addition to the callbacks, add helpers to
    identify cooling devices that implement the power cooling device API.
    
    Cc: Zhang Rui <rui.zhang@intel.com>
    Cc: Eduardo Valentin <edubezval@gmail.com>
    Signed-off-by: Javi Merino <javi.merino@arm.com>
    Signed-off-by: Eduardo Valentin <edubezval@gmail.com>

diff --git a/include/linux/thermal.h b/include/linux/thermal.h
index edf9d53c67e6..bf3c55f405c2 100644
--- a/include/linux/thermal.h
+++ b/include/linux/thermal.h
@@ -63,6 +63,7 @@
 
 struct thermal_zone_device;
 struct thermal_cooling_device;
+struct thermal_instance;
 
 enum thermal_device_mode {
 	THERMAL_DEVICE_DISABLED = 0,
@@ -116,6 +117,12 @@ struct thermal_cooling_device_ops {
 	int (*get_max_state) (struct thermal_cooling_device *, unsigned long *);
 	int (*get_cur_state) (struct thermal_cooling_device *, unsigned long *);
 	int (*set_cur_state) (struct thermal_cooling_device *, unsigned long);
+	int (*get_requested_power)(struct thermal_cooling_device *,
+				   struct thermal_zone_device *, u32 *);
+	int (*state2power)(struct thermal_cooling_device *,
+			   struct thermal_zone_device *, unsigned long, u32 *);
+	int (*power2state)(struct thermal_cooling_device *,
+			   struct thermal_zone_device *, u32, unsigned long *);
 };
 
 struct thermal_cooling_device {
@@ -331,6 +338,16 @@ void thermal_zone_of_sensor_unregister(struct device *dev,
 #endif
 
 #if IS_ENABLED(CONFIG_THERMAL)
+static inline bool cdev_is_power_actor(struct thermal_cooling_device *cdev)
+{
+	return cdev->ops->get_requested_power && cdev->ops->state2power &&
+		cdev->ops->power2state;
+}
+
+int power_actor_get_max_power(struct thermal_cooling_device *,
+			      struct thermal_zone_device *tz, u32 *max_power);
+int power_actor_set_power(struct thermal_cooling_device *,
+			  struct thermal_instance *, u32);
 struct thermal_zone_device *thermal_zone_device_register(const char *, int, int,
 		void *, struct thermal_zone_device_ops *,
 		const struct thermal_zone_params *, int, int);
@@ -359,6 +376,14 @@ struct thermal_instance *get_thermal_instance(struct thermal_zone_device *,
 void thermal_cdev_update(struct thermal_cooling_device *);
 void thermal_notify_framework(struct thermal_zone_device *, int);
 #else
+static inline bool cdev_is_power_actor(struct thermal_cooling_device *cdev)
+{ return false; }
+static inline int power_actor_get_max_power(struct thermal_cooling_device *cdev,
+			      struct thermal_zone_device *tz, u32 *max_power)
+{ return 0; }
+static inline int power_actor_set_power(struct thermal_cooling_device *cdev,
+			  struct thermal_instance *tz, u32 power)
+{ return 0; }
 static inline struct thermal_zone_device *thermal_zone_device_register(
 	const char *type, int trips, int mask, void *devdata,
 	struct thermal_zone_device_ops *ops,

commit e33df1d2f3a0141cd79e770f31999ba0dd7ebfa8
Author: Javi Merino <javi.merino@arm.com>
Date:   Thu Feb 26 19:00:27 2015 +0000

    thermal: let governors have private data for each thermal zone
    
    A governor may need to store its current state between calls to
    throttle().  That state depends on the thermal zone, so store it as
    private data in struct thermal_zone_device.
    
    The governors may have two new ops: bind_to_tz() and unbind_from_tz().
    When provided, these functions let governors do some initialization
    and teardown when they are bound/unbound to a tz and possibly store that
    information in the governor_data field of the struct
    thermal_zone_device.
    
    Cc: Zhang Rui <rui.zhang@intel.com>
    Cc: Eduardo Valentin <edubezval@gmail.com>
    Signed-off-by: Javi Merino <javi.merino@arm.com>
    Signed-off-by: Eduardo Valentin <edubezval@gmail.com>

diff --git a/include/linux/thermal.h b/include/linux/thermal.h
index bac0f52c7a1e..edf9d53c67e6 100644
--- a/include/linux/thermal.h
+++ b/include/linux/thermal.h
@@ -165,6 +165,7 @@ struct thermal_attr {
  * @ops:	operations this &thermal_zone_device supports
  * @tzp:	thermal zone parameters
  * @governor:	pointer to the governor for this thermal zone
+ * @governor_data:	private pointer for governor data
  * @thermal_instances:	list of &struct thermal_instance of this thermal zone
  * @idr:	&struct idr to generate unique id for this zone's cooling
  *		devices
@@ -191,6 +192,7 @@ struct thermal_zone_device {
 	struct thermal_zone_device_ops *ops;
 	const struct thermal_zone_params *tzp;
 	struct thermal_governor *governor;
+	void *governor_data;
 	struct list_head thermal_instances;
 	struct idr idr;
 	struct mutex lock;
@@ -201,12 +203,19 @@ struct thermal_zone_device {
 /**
  * struct thermal_governor - structure that holds thermal governor information
  * @name:	name of the governor
+ * @bind_to_tz: callback called when binding to a thermal zone.  If it
+ *		returns 0, the governor is bound to the thermal zone,
+ *		otherwise it fails.
+ * @unbind_from_tz:	callback called when a governor is unbound from a
+ *			thermal zone.
  * @throttle:	callback called for every trip point even if temperature is
  *		below the trip point temperature
  * @governor_list:	node in thermal_governor_list (in thermal_core.c)
  */
 struct thermal_governor {
 	char name[THERMAL_NAME_LENGTH];
+	int (*bind_to_tz)(struct thermal_zone_device *tz);
+	void (*unbind_from_tz)(struct thermal_zone_device *tz);
 	int (*throttle)(struct thermal_zone_device *tz, int trip);
 	struct list_head	governor_list;
 };

commit bcdcbbc71125c37195f97314f453ca9a3a4eb758
Author: Javi Merino <javi.merino@arm.com>
Date:   Wed Feb 18 16:04:25 2015 +0000

    thermal: fair_share: generalize the weight concept
    
    The fair share governor has the concept of weights, which is the
    influence of each cooling device in a thermal zone.  The current
    implementation forces the weights of all cooling devices in a thermal
    zone to add up to a 100.  This complicates setups, as you need to know
    in advance how many cooling devices you are going to have.  If you bind a
    new cooling device, you have to modify all the other cooling devices
    weights, which is error prone.  Furthermore, you can't specify a
    "default" weight for platforms since that default value depends on the
    number of cooling devices in the platform.
    
    This patch generalizes the concept of weight by allowing any number to
    be a "weight".  Weights are now relative to each other.  Platforms that
    don't specify weights get the same default value for all their cooling
    devices, so all their cdevs are considered to be equally influential.
    
    It's important to note that previous users of the weights don't need to
    alter the code: percentages continue to work as they used to.  This
    patch just removes the constraint of all the weights in a thermal zone
    having to add up to a 100.  If they do, you get the same behavior as
    before.  If they don't, fair share now works for that platform.
    
    Cc: Zhang Rui <rui.zhang@intel.com>
    Cc: Eduardo Valentin <edubezval@gmail.com>
    Cc: Durgadoss R <durgadoss.r@intel.com>
    Acked-by: Durgadoss R <durgadoss.r@intel.com>
    Signed-off-by: Javi Merino <javi.merino@arm.com>
    Signed-off-by: Eduardo Valentin <edubezval@gmail.com>

diff --git a/include/linux/thermal.h b/include/linux/thermal.h
index 00dacd4dfdce..bac0f52c7a1e 100644
--- a/include/linux/thermal.h
+++ b/include/linux/thermal.h
@@ -217,9 +217,12 @@ struct thermal_bind_params {
 
 	/*
 	 * This is a measure of 'how effectively these devices can
-	 * cool 'this' thermal zone. The shall be determined by platform
-	 * characterization. This is on a 'percentage' scale.
-	 * See Documentation/thermal/sysfs-api.txt for more information.
+	 * cool 'this' thermal zone. It shall be determined by
+	 * platform characterization. This value is relative to the
+	 * rest of the weights so a cooling device whose weight is
+	 * double that of another cooling device is twice as
+	 * effective. See Documentation/thermal/sysfs-api.txt for more
+	 * information.
 	 */
 	int weight;
 

commit 6cd9e9f629f11b9412d4e9aa294c029dbb36b3cf
Author: Kapileshwar Singh <kapileshwar.singh@arm.com>
Date:   Wed Feb 18 16:04:21 2015 +0000

    thermal: of: fix cooling device weights in device tree
    
    Currently you can specify the weight of the cooling device in the device
    tree but that information is not populated to the
    thermal_bind_params where the fair share governor expects it to
    be.  The of thermal zone device doesn't have a thermal_bind_params
    structure and arguably it's better to pass the weight inside the
    thermal_instance as it is specific to the bind of a cooling device to a
    thermal zone parameter.
    
    Core thermal code is fixed to populate the weight in the instance from
    the thermal_bind_params, so platform code that was passing the weight
    inside the thermal_bind_params continue to work seamlessly.
    
    While we are at it, create a default value for the weight parameter for
    those thermal zones that currently don't define it and remove the
    hardcoded default in of-thermal.
    
    Cc: Zhang Rui <rui.zhang@intel.com>
    Cc: "Rafael J. Wysocki" <rjw@rjwysocki.net>
    Cc: Len Brown <lenb@kernel.org>
    Cc: Peter Feuerer <peter@piie.net>
    Cc: Darren Hart <dvhart@infradead.org>
    Cc: Eduardo Valentin <edubezval@gmail.com>
    Cc: Kukjin Kim <kgene@kernel.org>
    Cc: Durgadoss R <durgadoss.r@intel.com>
    Signed-off-by: Kapileshwar Singh <kapileshwar.singh@arm.com>
    Signed-off-by: Eduardo Valentin <edubezval@gmail.com>

diff --git a/include/linux/thermal.h b/include/linux/thermal.h
index 5eac316490ea..00dacd4dfdce 100644
--- a/include/linux/thermal.h
+++ b/include/linux/thermal.h
@@ -40,6 +40,9 @@
 /* No upper/lower limit requirement */
 #define THERMAL_NO_LIMIT	((u32)~0)
 
+/* Default weight of a bound cooling device */
+#define THERMAL_WEIGHT_DEFAULT 0
+
 /* Unit conversion macros */
 #define KELVIN_TO_CELSIUS(t)	(long)(((long)t-2732 >= 0) ?	\
 				((long)t-2732+5)/10 : ((long)t-2732-5)/10)
@@ -323,7 +326,8 @@ void thermal_zone_device_unregister(struct thermal_zone_device *);
 
 int thermal_zone_bind_cooling_device(struct thermal_zone_device *, int,
 				     struct thermal_cooling_device *,
-				     unsigned long, unsigned long);
+				     unsigned long, unsigned long,
+				     unsigned int);
 int thermal_zone_unbind_cooling_device(struct thermal_zone_device *, int,
 				       struct thermal_cooling_device *);
 void thermal_zone_device_update(struct thermal_zone_device *);

commit 12ca7188468ee29c4e717f73db4bf43c90954fc7
Author: Nishanth Menon <nm@ti.com>
Date:   Fri Feb 13 19:28:02 2015 -0600

    thermal: Introduce dummy functions when thermal is not defined
    
    When CONFIG_THERMAL is not enabled, it is better to introduce
    equivalent dummy functions in the exported header than to
    introduce #ifdeffery in drivers using the function.
    
    This will prevent issues such as that reported in:
    http://www.spinics.net/lists/linux-next/msg31573.html
    
    While at it switch over to IS_ENABLED for thermal macros
    to allow for thermal framework to be built as framework
    and relevant APIs be usable by relevant drivers as a result.
    
    Reported-by: Guenter Roeck <linux@roeck-us.net>
    Signed-off-by: Nishanth Menon <nm@ti.com>
    Signed-off-by: Eduardo Valentin <edubezval@gmail.com>

diff --git a/include/linux/thermal.h b/include/linux/thermal.h
index fc52e307efab..5eac316490ea 100644
--- a/include/linux/thermal.h
+++ b/include/linux/thermal.h
@@ -314,6 +314,8 @@ void thermal_zone_of_sensor_unregister(struct device *dev,
 }
 
 #endif
+
+#if IS_ENABLED(CONFIG_THERMAL)
 struct thermal_zone_device *thermal_zone_device_register(const char *, int, int,
 		void *, struct thermal_zone_device_ops *,
 		const struct thermal_zone_params *, int, int);
@@ -340,8 +342,58 @@ struct thermal_instance *get_thermal_instance(struct thermal_zone_device *,
 		struct thermal_cooling_device *, int);
 void thermal_cdev_update(struct thermal_cooling_device *);
 void thermal_notify_framework(struct thermal_zone_device *, int);
-
-#ifdef CONFIG_NET
+#else
+static inline struct thermal_zone_device *thermal_zone_device_register(
+	const char *type, int trips, int mask, void *devdata,
+	struct thermal_zone_device_ops *ops,
+	const struct thermal_zone_params *tzp,
+	int passive_delay, int polling_delay)
+{ return ERR_PTR(-ENODEV); }
+static inline void thermal_zone_device_unregister(
+	struct thermal_zone_device *tz)
+{ }
+static inline int thermal_zone_bind_cooling_device(
+	struct thermal_zone_device *tz, int trip,
+	struct thermal_cooling_device *cdev,
+	unsigned long upper, unsigned long lower)
+{ return -ENODEV; }
+static inline int thermal_zone_unbind_cooling_device(
+	struct thermal_zone_device *tz, int trip,
+	struct thermal_cooling_device *cdev)
+{ return -ENODEV; }
+static inline void thermal_zone_device_update(struct thermal_zone_device *tz)
+{ }
+static inline struct thermal_cooling_device *
+thermal_cooling_device_register(char *type, void *devdata,
+	const struct thermal_cooling_device_ops *ops)
+{ return ERR_PTR(-ENODEV); }
+static inline struct thermal_cooling_device *
+thermal_of_cooling_device_register(struct device_node *np,
+	char *type, void *devdata, const struct thermal_cooling_device_ops *ops)
+{ return ERR_PTR(-ENODEV); }
+static inline void thermal_cooling_device_unregister(
+	struct thermal_cooling_device *cdev)
+{ }
+static inline struct thermal_zone_device *thermal_zone_get_zone_by_name(
+		const char *name)
+{ return ERR_PTR(-ENODEV); }
+static inline int thermal_zone_get_temp(
+		struct thermal_zone_device *tz, unsigned long *temp)
+{ return -ENODEV; }
+static inline int get_tz_trend(struct thermal_zone_device *tz, int trip)
+{ return -ENODEV; }
+static inline struct thermal_instance *
+get_thermal_instance(struct thermal_zone_device *tz,
+	struct thermal_cooling_device *cdev, int trip)
+{ return ERR_PTR(-ENODEV); }
+static inline void thermal_cdev_update(struct thermal_cooling_device *cdev)
+{ }
+static inline void thermal_notify_framework(struct thermal_zone_device *tz,
+	int trip)
+{ }
+#endif /* CONFIG_THERMAL */
+
+#if defined(CONFIG_NET) && IS_ENABLED(CONFIG_THERMAL)
 extern int thermal_generate_netlink_event(struct thermal_zone_device *tz,
 						enum events event);
 #else

commit 32c9edc4e356063e0218362d452a269cfa6798ee
Merge: 59c56eb6db0c 503ccc3fec4a
Author: Zhang Rui <rui.zhang@intel.com>
Date:   Sun Dec 21 22:49:12 2014 +0800

    Merge branch 'fixes' of git://git.kernel.org/pub/scm/linux/kernel/git/evalenti/linux-soc-thermal into thermal-soc

commit 2707dbd09a859b7205917f9baf9d0192944ac46c
Merge: af6c9f1657ca c89d99546dc5 e413ad7cca9f
Author: Zhang Rui <rui.zhang@intel.com>
Date:   Sat Dec 13 12:25:19 2014 +0800

    Merge branches 'thermal-core-fix', 'thermal-soc' and 'thermal-int340x' into next

commit a940cb34fed73b2d4809a4575f2981d5927e2c21
Author: Punit Agrawal <punit.agrawal@arm.com>
Date:   Tue Dec 9 12:22:01 2014 +0000

    thermal: Fix cdev registration with THERMAL_NO_LIMIT on 64bit
    
    The size of unsigned long varies between 32 and 64 bit systems while
    the size of phandle arguments is always 32 bits per parameter.
    
    On 64-bit systems, cooling devices registered via of-thermal apis fail
    to bind when the min/max cooling state is specified as
    THERMAL_NO_LIMIT (-1UL) as there is a mis-match between the value read
    from the device tree (32bit) and the pre-processor define (64bit).
    
    As we're unlikely to need cooling states larger than 32 bits, and for
    consistency with the size of phandle arguments, explicitly limit
    THERMAL_NO_LIMIT to 32 bits.
    
    Reported-by: Hyungwoo Yang <hwoo.yang@gmail.com>
    Acked-by: Zhang Rui <rui.zhang@intel.com>
    Signed-off-by: Punit Agrawal <punit.agrawal@arm.com>
    Signed-off-by: Eduardo Valentin <edubezval@gmail.com>

diff --git a/include/linux/thermal.h b/include/linux/thermal.h
index ef90838b36a0..005586fdf82d 100644
--- a/include/linux/thermal.h
+++ b/include/linux/thermal.h
@@ -38,7 +38,7 @@
 #define THERMAL_CSTATE_INVALID -1UL
 
 /* No upper/lower limit requirement */
-#define THERMAL_NO_LIMIT	THERMAL_CSTATE_INVALID
+#define THERMAL_NO_LIMIT	((u32)~0)
 
 /* Unit conversion macros */
 #define KELVIN_TO_CELSIUS(t)	(long)(((long)t-2732 >= 0) ?	\

commit af6c9f1657ca6d2ef2b2c0e31ad17c6fbf773baf
Author: Florian Fainelli <f.fainelli@gmail.com>
Date:   Wed Nov 19 18:11:00 2014 -0800

    thermal: provide an UAPI header file
    
    include/linux/thermal.h contains definitions for the Thermal generic
    netlink family, but none of the valuable information relevant to
    user-space such as the Genl family name, multicast group, version or
    command set and data types is exported to user-space.
    
    Export all the relevant generic netlink information to user-space to
    make this genl family usable by user-space, and while at it, export
    THERMAL_NAME_LENGTH since it limits name length for thermal_hwmon
    devices.
    
    Kbuild and MAINTAINERS are also updated accordingly to reflect this new
    file: include/uapi/linux/thermal.h.
    
    Signed-off-by: Florian Fainelli <f.fainelli@gmail.com>
    Signed-off-by: Zhang Rui <rui.zhang@intel.com>

diff --git a/include/linux/thermal.h b/include/linux/thermal.h
index ef90838b36a0..70f87406bed9 100644
--- a/include/linux/thermal.h
+++ b/include/linux/thermal.h
@@ -29,10 +29,10 @@
 #include <linux/idr.h>
 #include <linux/device.h>
 #include <linux/workqueue.h>
+#include <uapi/linux/thermal.h>
 
 #define THERMAL_TRIPS_NONE	-1
 #define THERMAL_MAX_TRIPS	12
-#define THERMAL_NAME_LENGTH	20
 
 /* invalid cooling state */
 #define THERMAL_CSTATE_INVALID -1UL
@@ -49,11 +49,6 @@
 #define MILLICELSIUS_TO_DECI_KELVIN_WITH_OFFSET(t, off) (((t) / 100) + (off))
 #define MILLICELSIUS_TO_DECI_KELVIN(t) MILLICELSIUS_TO_DECI_KELVIN_WITH_OFFSET(t, 2732)
 
-/* Adding event notification support elements */
-#define THERMAL_GENL_FAMILY_NAME                "thermal_event"
-#define THERMAL_GENL_VERSION                    0x01
-#define THERMAL_GENL_MCAST_GROUP_NAME           "thermal_mc_grp"
-
 /* Default Thermal Governor */
 #if defined(CONFIG_THERMAL_DEFAULT_GOV_STEP_WISE)
 #define DEFAULT_THERMAL_GOVERNOR       "step_wise"
@@ -86,30 +81,6 @@ enum thermal_trend {
 	THERMAL_TREND_DROP_FULL, /* apply lowest cooling action */
 };
 
-/* Events supported by Thermal Netlink */
-enum events {
-	THERMAL_AUX0,
-	THERMAL_AUX1,
-	THERMAL_CRITICAL,
-	THERMAL_DEV_FAULT,
-};
-
-/* attributes of thermal_genl_family */
-enum {
-	THERMAL_GENL_ATTR_UNSPEC,
-	THERMAL_GENL_ATTR_EVENT,
-	__THERMAL_GENL_ATTR_MAX,
-};
-#define THERMAL_GENL_ATTR_MAX (__THERMAL_GENL_ATTR_MAX - 1)
-
-/* commands supported by the thermal_genl_family */
-enum {
-	THERMAL_GENL_CMD_UNSPEC,
-	THERMAL_GENL_CMD_EVENT,
-	__THERMAL_GENL_CMD_MAX,
-};
-#define THERMAL_GENL_CMD_MAX (__THERMAL_GENL_CMD_MAX - 1)
-
 struct thermal_zone_device_ops {
 	int (*bind) (struct thermal_zone_device *,
 		     struct thermal_cooling_device *);

commit 184a4bf623fa587067851d25435fcb2f41de445b
Author: Lukasz Majewski <l.majewski@samsung.com>
Date:   Mon Dec 8 18:04:21 2014 +0100

    thermal: of: Extend current of-thermal.c code to allow setting emulated temp
    
    Before this change it was only possible to set get_temp() and get_trend()
    methods to be used in the common code handling passing parameters via
    device tree to "cpu-thermal" CPU thermal zone device.
    
    Now it is possible to also set emulated value of temperature for debug
    purposes.
    
    Signed-off-by: Lukasz Majewski <l.majewski@samsung.com>
    Acked-by: Eduardo Valentin <edubezval@gmail.com>
    Signed-off-by: Eduardo Valentin <edubezval@gmail.com>

diff --git a/include/linux/thermal.h b/include/linux/thermal.h
index b8d91efa854e..99be7fc79c3b 100644
--- a/include/linux/thermal.h
+++ b/include/linux/thermal.h
@@ -297,10 +297,13 @@ struct thermal_genl_event {
  *
  * Optional:
  * @get_trend: a pointer to a function that reads the sensor temperature trend.
+ * @set_emul_temp: a pointer to a function that sets sensor emulated
+ *		   temperature.
  */
 struct thermal_zone_of_device_ops {
 	int (*get_temp)(void *, long *);
 	int (*get_trend)(void *, long *);
+	int (*set_emul_temp)(void *, unsigned long);
 };
 
 /**

commit ad9914ac3b1f5c12ef2cf1c58a6ddda306fb79d4
Author: Lukasz Majewski <l.majewski@samsung.com>
Date:   Mon Dec 8 18:04:19 2014 +0100

    thermal: of: Rename struct __thermal_trip to struct thermal_trip
    
    This patch changes name of struct __thermal_trip to thermal_trip and moves
    declaration of the latter to ./include/linux/thermal.h for better visibility.
    
    Signed-off-by: Lukasz Majewski <l.majewski@samsung.com>
    Signed-off-by: Eduardo Valentin <edubezval@gmail.com>

diff --git a/include/linux/thermal.h b/include/linux/thermal.h
index 5bc28a70014e..b8d91efa854e 100644
--- a/include/linux/thermal.h
+++ b/include/linux/thermal.h
@@ -303,6 +303,21 @@ struct thermal_zone_of_device_ops {
 	int (*get_trend)(void *, long *);
 };
 
+/**
+ * struct thermal_trip - representation of a point in temperature domain
+ * @np: pointer to struct device_node that this trip point was created from
+ * @temperature: temperature value in miliCelsius
+ * @hysteresis: relative hysteresis in miliCelsius
+ * @type: trip point type
+ */
+
+struct thermal_trip {
+	struct device_node *np;
+	unsigned long int temperature;
+	unsigned long int hysteresis;
+	enum thermal_trip_type type;
+};
+
 /* Function declarations */
 #ifdef CONFIG_THERMAL_OF
 struct thermal_zone_device *

commit 2251aef64a38db60f4ae7a4a83f9203c6791f196
Author: Eduardo Valentin <edubezval@gmail.com>
Date:   Fri Nov 7 21:24:39 2014 -0400

    thermal: of: improve of-thermal sensor registration API
    
    Different drivers request API extensions in of-thermal. For this reason,
    additional callbacks are required to fit the new drivers needs.
    
    The current API implementation expects the registering sensor driver
    to provide a get_temp and get_trend callbacks as function parameters.
    As the amount of callbacks is growing, this patch changes the existing
    implementation to use a .ops field to hold all the of thermal callbacks
    to sensor drivers.
    
    This patch also changes the existing of-thermal users to fit the new
    API design. No functional change is introduced in this patch.
    
    Cc: Alexandre Courbot <gnurou@gmail.com>
    Cc: devicetree@vger.kernel.org
    Cc: Grant Likely <grant.likely@linaro.org>
    Cc: Guenter Roeck <linux@roeck-us.net>
    Cc: Jean Delvare <jdelvare@suse.de>
    Cc: linux-kernel@vger.kernel.org
    Cc: linux-pm@vger.kernel.org
    Cc: linux-tegra@vger.kernel.org
    Cc: lm-sensors@lm-sensors.org
    Cc: Rob Herring <robh+dt@kernel.org>
    Cc: Stephen Warren <swarren@wwwdotorg.org>
    Cc: Thierry Reding <thierry.reding@gmail.com>
    Cc: Zhang Rui <rui.zhang@intel.com>
    Acked-by: Guenter Roeck <linux@roeck-us.net>
    Tested-by: Mikko Perttunen <mikko.perttunen@kapsi.fi>
    Reviewed-by: Mikko Perttunen <mikko.perttunen@kapsi.fi>
    Reviewed-by: Alexandre Courbot <acourbot@nvidia.com>
    Reviewed-by: Lukasz Majewski <l.majewski@samsung.com>
    Signed-off-by: Eduardo Valentin <edubezval@gmail.com>

diff --git a/include/linux/thermal.h b/include/linux/thermal.h
index ef90838b36a0..5bc28a70014e 100644
--- a/include/linux/thermal.h
+++ b/include/linux/thermal.h
@@ -289,19 +289,31 @@ struct thermal_genl_event {
 	enum events event;
 };
 
+/**
+ * struct thermal_zone_of_device_ops - scallbacks for handling DT based zones
+ *
+ * Mandatory:
+ * @get_temp: a pointer to a function that reads the sensor temperature.
+ *
+ * Optional:
+ * @get_trend: a pointer to a function that reads the sensor temperature trend.
+ */
+struct thermal_zone_of_device_ops {
+	int (*get_temp)(void *, long *);
+	int (*get_trend)(void *, long *);
+};
+
 /* Function declarations */
 #ifdef CONFIG_THERMAL_OF
 struct thermal_zone_device *
-thermal_zone_of_sensor_register(struct device *dev, int id,
-				void *data, int (*get_temp)(void *, long *),
-				int (*get_trend)(void *, long *));
+thermal_zone_of_sensor_register(struct device *dev, int id, void *data,
+				const struct thermal_zone_of_device_ops *ops);
 void thermal_zone_of_sensor_unregister(struct device *dev,
 				       struct thermal_zone_device *tz);
 #else
 static inline struct thermal_zone_device *
-thermal_zone_of_sensor_register(struct device *dev, int id,
-				void *data, int (*get_temp)(void *, long *),
-				int (*get_trend)(void *, long *))
+thermal_zone_of_sensor_register(struct device *dev, int id, void *data,
+				const struct thermal_zone_of_device_ops *ops)
 {
 	return NULL;
 }

commit 77e337c6e23e3b9d22e09ffec202a80f755a54c2
Author: Aaron Lu <aaron.lu@intel.com>
Date:   Wed Sep 3 15:13:02 2014 +0800

    Thermal: introduce INT3402 thermal driver
    
    ACPI INT3402 device object could report temperature for the memory module.
    To expose such information to user space, a thermal zone device is registered
    for it so that the thermal sysfs interface can expose such information for
    userspace to use.
    
    Signed-off-by: Aaron Lu <aaron.lu@intel.com>
    Signed-off-by: Zhang Rui <rui.zhang@intel.com>

diff --git a/include/linux/thermal.h b/include/linux/thermal.h
index 79ce6b94884a..ef90838b36a0 100644
--- a/include/linux/thermal.h
+++ b/include/linux/thermal.h
@@ -46,6 +46,8 @@
 #define CELSIUS_TO_KELVIN(t)	((t)*10+2732)
 #define DECI_KELVIN_TO_MILLICELSIUS_WITH_OFFSET(t, off) (((t) - (off)) * 100)
 #define DECI_KELVIN_TO_MILLICELSIUS(t) DECI_KELVIN_TO_MILLICELSIUS_WITH_OFFSET(t, 2732)
+#define MILLICELSIUS_TO_DECI_KELVIN_WITH_OFFSET(t, off) (((t) / 100) + (off))
+#define MILLICELSIUS_TO_DECI_KELVIN(t) MILLICELSIUS_TO_DECI_KELVIN_WITH_OFFSET(t, 2732)
 
 /* Adding event notification support elements */
 #define THERMAL_GENL_FAMILY_NAME                "thermal_event"

commit 7b83fd9d91a411158f72d36958103c708c3b5a86
Author: Aaron Lu <aaron.lu@intel.com>
Date:   Tue Mar 25 10:40:09 2014 +0800

    Thermal: move the KELVIN_TO_MILLICELSIUS macro to thermal.h
    
    This macro can be used by other component so move it to a common header,
    but in a slightly different way: define two macros, one macro with an
    offset and the other doesn't.
    
    Signed-off-by: Aaron Lu <aaron.lu@intel.com>
    Signed-off-by: Zhang Rui <rui.zhang@intel.com>

diff --git a/include/linux/thermal.h b/include/linux/thermal.h
index 0305cde21a74..79ce6b94884a 100644
--- a/include/linux/thermal.h
+++ b/include/linux/thermal.h
@@ -44,6 +44,8 @@
 #define KELVIN_TO_CELSIUS(t)	(long)(((long)t-2732 >= 0) ?	\
 				((long)t-2732+5)/10 : ((long)t-2732-5)/10)
 #define CELSIUS_TO_KELVIN(t)	((t)*10+2732)
+#define DECI_KELVIN_TO_MILLICELSIUS_WITH_OFFSET(t, off) (((t) - (off)) * 100)
+#define DECI_KELVIN_TO_MILLICELSIUS(t) DECI_KELVIN_TO_MILLICELSIUS_WITH_OFFSET(t, 2732)
 
 /* Adding event notification support elements */
 #define THERMAL_GENL_FAMILY_NAME                "thermal_event"

commit c708a98f01068fe07f77448031f9f5317423e777
Author: Javi Merino <javi.merino@arm.com>
Date:   Wed Jun 25 11:00:12 2014 +0100

    thermal: document struct thermal_zone_device and thermal_governor
    
    Document struct thermal_zone_device and struct thermal_governor fields
    and their use by the thermal framework code.
    
    Cc: Zhang Rui <rui.zhang@intel.com>
    Cc: Eduardo Valentin <edubezval@gmail.com>
    Signed-off-by: Javi Merino <javi.merino@arm.com>
    Signed-off-by: Zhang Rui <rui.zhang@intel.com>

diff --git a/include/linux/thermal.h b/include/linux/thermal.h
index f7e11c7ea7d9..0305cde21a74 100644
--- a/include/linux/thermal.h
+++ b/include/linux/thermal.h
@@ -158,6 +158,42 @@ struct thermal_attr {
 	char name[THERMAL_NAME_LENGTH];
 };
 
+/**
+ * struct thermal_zone_device - structure for a thermal zone
+ * @id:		unique id number for each thermal zone
+ * @type:	the thermal zone device type
+ * @device:	&struct device for this thermal zone
+ * @trip_temp_attrs:	attributes for trip points for sysfs: trip temperature
+ * @trip_type_attrs:	attributes for trip points for sysfs: trip type
+ * @trip_hyst_attrs:	attributes for trip points for sysfs: trip hysteresis
+ * @devdata:	private pointer for device private data
+ * @trips:	number of trip points the thermal zone supports
+ * @passive_delay:	number of milliseconds to wait between polls when
+ *			performing passive cooling.  Currenty only used by the
+ *			step-wise governor
+ * @polling_delay:	number of milliseconds to wait between polls when
+ *			checking whether trip points have been crossed (0 for
+ *			interrupt driven systems)
+ * @temperature:	current temperature.  This is only for core code,
+ *			drivers should use thermal_zone_get_temp() to get the
+ *			current temperature
+ * @last_temperature:	previous temperature read
+ * @emul_temperature:	emulated temperature when using CONFIG_THERMAL_EMULATION
+ * @passive:		1 if you've crossed a passive trip point, 0 otherwise.
+ *			Currenty only used by the step-wise governor.
+ * @forced_passive:	If > 0, temperature at which to switch on all ACPI
+ *			processor cooling devices.  Currently only used by the
+ *			step-wise governor.
+ * @ops:	operations this &thermal_zone_device supports
+ * @tzp:	thermal zone parameters
+ * @governor:	pointer to the governor for this thermal zone
+ * @thermal_instances:	list of &struct thermal_instance of this thermal zone
+ * @idr:	&struct idr to generate unique id for this zone's cooling
+ *		devices
+ * @lock:	lock to protect thermal_instances list
+ * @node:	node in thermal_tz_list (in thermal_core.c)
+ * @poll_queue:	delayed work for polling
+ */
 struct thermal_zone_device {
 	int id;
 	char type[THERMAL_NAME_LENGTH];
@@ -179,12 +215,18 @@ struct thermal_zone_device {
 	struct thermal_governor *governor;
 	struct list_head thermal_instances;
 	struct idr idr;
-	struct mutex lock; /* protect thermal_instances list */
+	struct mutex lock;
 	struct list_head node;
 	struct delayed_work poll_queue;
 };
 
-/* Structure that holds thermal governor information */
+/**
+ * struct thermal_governor - structure that holds thermal governor information
+ * @name:	name of the governor
+ * @throttle:	callback called for every trip point even if temperature is
+ *		below the trip point temperature
+ * @governor_list:	node in thermal_governor_list (in thermal_core.c)
+ */
 struct thermal_governor {
 	char name[THERMAL_NAME_LENGTH];
 	int (*throttle)(struct thermal_zone_device *tz, int trip);

commit a116b5d44f144586ef03a93f14ddc63f4a85e906
Author: Eduardo Valentin <eduardo.valentin@ti.com>
Date:   Thu Sep 26 15:55:01 2013 -0400

    thermal: core: introduce thermal_of_cooling_device_register
    
    This patch adds a new API to allow registering cooling devices
    in the thermal framework derived from device tree nodes.
    
    This API links the cooling device with the device tree node
    so that binding with thermal zones is possible, given
    that thermal zones are pointing to cooling device
    device tree nodes.
    
    Cc: Zhang Rui <rui.zhang@intel.com>
    Cc: linux-pm@vger.kernel.org
    Cc: linux-kernel@vger.kernel.org
    Signed-off-by: Eduardo Valentin <eduardo.valentin@ti.com>

diff --git a/include/linux/thermal.h b/include/linux/thermal.h
index b780c5b27122..f7e11c7ea7d9 100644
--- a/include/linux/thermal.h
+++ b/include/linux/thermal.h
@@ -25,6 +25,7 @@
 #ifndef __THERMAL_H__
 #define __THERMAL_H__
 
+#include <linux/of.h>
 #include <linux/idr.h>
 #include <linux/device.h>
 #include <linux/workqueue.h>
@@ -280,6 +281,9 @@ void thermal_zone_device_update(struct thermal_zone_device *);
 
 struct thermal_cooling_device *thermal_cooling_device_register(char *, void *,
 		const struct thermal_cooling_device_ops *);
+struct thermal_cooling_device *
+thermal_of_cooling_device_register(struct device_node *np, char *, void *,
+				   const struct thermal_cooling_device_ops *);
 void thermal_cooling_device_unregister(struct thermal_cooling_device *);
 struct thermal_zone_device *thermal_zone_get_zone_by_name(const char *name);
 int thermal_zone_get_temp(struct thermal_zone_device *tz, unsigned long *temp);

commit 4e5e4705bf69ea450f58fc709ac5888f321a9299
Author: Eduardo Valentin <eduardo.valentin@ti.com>
Date:   Wed Jul 3 15:35:39 2013 -0400

    thermal: introduce device tree parser
    
    This patch introduces a device tree bindings for
    describing the hardware thermal behavior and limits.
    Also a parser to read and interpret the data and feed
    it in the thermal framework is presented.
    
    This patch introduces a thermal data parser for device
    tree. The parsed data is used to build thermal zones
    and thermal binding parameters. The output data
    can then be used to deploy thermal policies.
    
    This patch adds also documentation regarding this
    API and how to define tree nodes to use
    this infrastructure.
    
    Note that, in order to be able to have control
    on the sensor registration on the DT thermal zone,
    it was required to allow changing the thermal zone
    .get_temp callback. For this reason, this patch
    also removes the 'const' modifier from the .ops
    field of thermal zone devices.
    
    Cc: Zhang Rui <rui.zhang@intel.com>
    Cc: linux-pm@vger.kernel.org
    Cc: linux-kernel@vger.kernel.org
    Acked-by: Mark Rutland <mark.rutland@arm.com>
    Signed-off-by: Eduardo Valentin <eduardo.valentin@ti.com>

diff --git a/include/linux/thermal.h b/include/linux/thermal.h
index b268d3cf7ae3..b780c5b27122 100644
--- a/include/linux/thermal.h
+++ b/include/linux/thermal.h
@@ -143,6 +143,7 @@ struct thermal_cooling_device {
 	int id;
 	char type[THERMAL_NAME_LENGTH];
 	struct device device;
+	struct device_node *np;
 	void *devdata;
 	const struct thermal_cooling_device_ops *ops;
 	bool updated; /* true if the cooling device does not need update */
@@ -172,7 +173,7 @@ struct thermal_zone_device {
 	int emul_temperature;
 	int passive;
 	unsigned int forced_passive;
-	const struct thermal_zone_device_ops *ops;
+	struct thermal_zone_device_ops *ops;
 	const struct thermal_zone_params *tzp;
 	struct thermal_governor *governor;
 	struct list_head thermal_instances;
@@ -242,8 +243,31 @@ struct thermal_genl_event {
 };
 
 /* Function declarations */
+#ifdef CONFIG_THERMAL_OF
+struct thermal_zone_device *
+thermal_zone_of_sensor_register(struct device *dev, int id,
+				void *data, int (*get_temp)(void *, long *),
+				int (*get_trend)(void *, long *));
+void thermal_zone_of_sensor_unregister(struct device *dev,
+				       struct thermal_zone_device *tz);
+#else
+static inline struct thermal_zone_device *
+thermal_zone_of_sensor_register(struct device *dev, int id,
+				void *data, int (*get_temp)(void *, long *),
+				int (*get_trend)(void *, long *))
+{
+	return NULL;
+}
+
+static inline
+void thermal_zone_of_sensor_unregister(struct device *dev,
+				       struct thermal_zone_device *tz)
+{
+}
+
+#endif
 struct thermal_zone_device *thermal_zone_device_register(const char *, int, int,
-		void *, const struct thermal_zone_device_ops *,
+		void *, struct thermal_zone_device_ops *,
 		const struct thermal_zone_params *, int, int);
 void thermal_zone_device_unregister(struct thermal_zone_device *);
 

commit a8892d83894bcbd2717846cfa85955152b73453f
Author: Eduardo Valentin <eduardo.valentin@ti.com>
Date:   Tue Jul 16 15:26:28 2013 -0400

    thermal: thermal_core: allow binding with limits on bind_params
    
    When registering a thermal zone device using platform information
    via bind_params, the thermal framework will always perform the
    cdev binding using the lowest and highest limits (THERMAL_NO_LIMIT).
    
    This patch changes the data structures so that it is possible
    to inform what are the desired limits for each trip point
    inside a bind_param. The way the binding is performed is also
    changed so that it uses the new data structure.
    
    Cc: Zhang Rui <rui.zhang@intel.com>
    Cc: linux-pm@vger.kernel.org
    Cc: linux-kernel@vger.kernel.org
    Signed-off-by: Eduardo Valentin <eduardo.valentin@ti.com>

diff --git a/include/linux/thermal.h b/include/linux/thermal.h
index b4a975f25be0..b268d3cf7ae3 100644
--- a/include/linux/thermal.h
+++ b/include/linux/thermal.h
@@ -207,6 +207,16 @@ struct thermal_bind_params {
 	 * See Documentation/thermal/sysfs-api.txt for more information.
 	 */
 	int trip_mask;
+
+	/*
+	 * This is an array of cooling state limits. Must have exactly
+	 * 2 * thermal_zone.number_of_trip_points. It is an array consisting
+	 * of tuples <lower-state upper-state> of state limits. Each trip
+	 * will be associated with one state limit tuple when binding.
+	 * A NULL pointer means <THERMAL_NO_LIMITS THERMAL_NO_LIMITS>
+	 * on all trips.
+	 */
+	unsigned long *binding_limits;
 	int (*match) (struct thermal_zone_device *tz,
 			struct thermal_cooling_device *cdev);
 };

commit ccba4ffd9eff6120a20cc7656458ac554aec4b0c
Author: Eduardo Valentin <eduardo.valentin@ti.com>
Date:   Thu Aug 15 11:34:17 2013 -0400

    drivers: thermal: make usage of CONFIG_THERMAL_HWMON optional
    
    When registering a new thermal_device, the thermal framework
    will always add a hwmon sysfs interface.
    
    This patch adds a flag to make this behavior optional. Now
    when registering a new thermal device, the caller can
    optionally inform if hwmon interface is desirable. This can
    be done by means of passing a thermal_zone_params.no_hwmon == true.
    
    In order to keep same behavior as of today, all current
    calls will by default create the hwmon interface.
    
    Cc: David Woodhouse <dwmw2@infradead.org>
    Cc: linux-acpi@vger.kernel.org
    Cc: linux-arm-kernel@lists.infradead.org
    Cc: linux-kernel@vger.kernel.org
    Cc: linux-pm@vger.kernel.org
    Cc: Zhang Rui <rui.zhang@intel.com>
    Suggested-by: Wei Ni <wni@nvidia.com>
    Signed-off-by: Eduardo Valentin <eduardo.valentin@ti.com>

diff --git a/include/linux/thermal.h b/include/linux/thermal.h
index a386a1cbb6e1..b4a975f25be0 100644
--- a/include/linux/thermal.h
+++ b/include/linux/thermal.h
@@ -214,6 +214,14 @@ struct thermal_bind_params {
 /* Structure to define Thermal Zone parameters */
 struct thermal_zone_params {
 	char governor_name[THERMAL_NAME_LENGTH];
+
+	/*
+	 * a boolean to indicate if the thermal to hwmon sysfs interface
+	 * is required. when no_hwmon == false, a hwmon sysfs interface
+	 * will be created. when no_hwmon == true, nothing will be done
+	 */
+	bool no_hwmon;
+
 	int num_tbps;	/* Number of tbp entries */
 	struct thermal_bind_params *tbp;
 };

commit b29bdba51924f6fd5971352ba111784dee3a5853
Merge: e0fd9affeb64 de6558dc964f
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Thu May 9 09:40:49 2013 -0700

    Merge branch 'next' of git://git.kernel.org/pub/scm/linux/kernel/git/rzhang/linux
    
    Pull thermal management update from Zhang Rui:
     "The most important one is to build thermal core and governor and cpu
      cooling code into one module.  This fixes a regression that thermal
      core does not work if it is built as module, since 3.7.  I'll backport
      them to stable kernel once those changes are in upstream.
    
      The largest batch is the thermal kernel-doc & coding style
      updates/cleanups from Eduardo.
    
      Highlights:
    
       - build all thermal framework code into one module to fix a
         regression that thermal does not work if it is built as module.
    
       - Marvell Armada 370/XP thermal sensor driver
    
       - thermal core/cpu cooling kernel-doc & coding style updates and
         cleanups.
    
       - Add Eduardo Valentin as thermal sub-maintainer, both in mailing
         list and patchwork.  He will help me on arm thermal drivers."
    
    * 'next' of git://git.kernel.org/pub/scm/linux/kernel/git/rzhang/linux: (68 commits)
      thermal: db8500_cpufreq_cooling: remove usage of IS_ERR_OR_NULL()
      thermal: thermal_core: remove usage of IS_ERR_OR_NULL
      thermal: cpu_cooling: improve line breaking
      thermal: cpu_cooling: alignment improvements
      thermal: cpu_cooling: remove checkpatch.pl warning
      thermal: cpu_cooling: remove trailing blank line
      thermal: cpu_cooling: align on open parenthesis
      thermal: cpu_cooling: standardize comment style
      thermal: cpu_cooling: standardize end of function
      thermal: cpu_cooling: remove trailing white spaces
      Thermal: update documentation for thermal_zone_device_register
      thermal: update kernel-doc for thermal_zone_device_register
      thermal: update kernel-doc for create_trip_attrs
      thermal: update kernel-doc for thermal_cooling_device_register
      thermal: update kernel-doc for thermal_zone_unbind_cooling_device
      thermal: update kernel-doc for thermal_zone_bind_cooling_device
      thermal: use EXPORT_SYMBOL_GPL
      thermal: rename notify_thermal_framework to thermal_notify_framework
      thermal: update driver license
      thermal: use strlcpy instead of strcpy
      ...

commit 7b73c993776b9f7d833dde7d09fd861508c54777
Author: Eduardo Valentin <eduardo.valentin@ti.com>
Date:   Tue Apr 23 21:48:14 2013 +0000

    thermal: rename notify_thermal_framework to thermal_notify_framework
    
    To follow the prefix names used by the thermal functions,
    this patch renames notify_thermal_framework to thermal_notify_framework.
    
    Signed-off-by: Eduardo Valentin <eduardo.valentin@ti.com>
    Signed-off-by: Zhang Rui <rui.zhang@intel.com>

diff --git a/include/linux/thermal.h b/include/linux/thermal.h
index ec2b886f9d96..d7272ab20ebc 100644
--- a/include/linux/thermal.h
+++ b/include/linux/thermal.h
@@ -246,7 +246,7 @@ int get_tz_trend(struct thermal_zone_device *, int);
 struct thermal_instance *get_thermal_instance(struct thermal_zone_device *,
 		struct thermal_cooling_device *, int);
 void thermal_cdev_update(struct thermal_cooling_device *);
-void notify_thermal_framework(struct thermal_zone_device *, int);
+void thermal_notify_framework(struct thermal_zone_device *, int);
 
 #ifdef CONFIG_NET
 extern int thermal_generate_netlink_event(struct thermal_zone_device *tz,

commit 837b26bb2e4a83d224e725f07a1d9ca824bf905c
Author: Eduardo Valentin <eduardo.valentin@ti.com>
Date:   Fri Apr 5 12:32:29 2013 +0000

    thermal: expose thermal_zone_get_temp API
    
    This patch exports the thermal_zone_get_temp API so that driver
    writers can fetch temperature of thermal zones managed by other
    drivers.
    
    Acked-by: Durgadoss R <durgadoss.r@intel.com>
    Signed-off-by: Eduardo Valentin <eduardo.valentin@ti.com>
    Signed-off-by: Zhang Rui <rui.zhang@intel.com>

diff --git a/include/linux/thermal.h b/include/linux/thermal.h
index 9af2f3a99658..ec2b886f9d96 100644
--- a/include/linux/thermal.h
+++ b/include/linux/thermal.h
@@ -240,6 +240,7 @@ struct thermal_cooling_device *thermal_cooling_device_register(char *, void *,
 		const struct thermal_cooling_device_ops *);
 void thermal_cooling_device_unregister(struct thermal_cooling_device *);
 struct thermal_zone_device *thermal_zone_get_zone_by_name(const char *name);
+int thermal_zone_get_temp(struct thermal_zone_device *tz, unsigned long *temp);
 
 int get_tz_trend(struct thermal_zone_device *, int);
 struct thermal_instance *get_thermal_instance(struct thermal_zone_device *,

commit 63c4d919cf66b1b3ffa7861bddb50a697914af5b
Author: Eduardo Valentin <eduardo.valentin@ti.com>
Date:   Fri Apr 5 12:32:28 2013 +0000

    thermal: introduce thermal_zone_get_zone_by_name helper function
    
    This patch adds a helper function to get a reference of
    a thermal zone, based on the zone type name.
    
    It will perform a zone name lookup and return a reference
    to a thermal zone device that matches the name requested.
    In case the zone is not found or when several zones match
    same name or if the required parameters are invalid, it will return
    the corresponding error code (ERR_PTR).
    
    Cc: Durgadoss R <durgadoss.r@intel.com>
    Signed-off-by: Eduardo Valentin <eduardo.valentin@ti.com>
    Acked-by: Durgadoss R <durgadoss.r@intel.com>
    Signed-off-by: Zhang Rui <rui.zhang@intel.com>

diff --git a/include/linux/thermal.h b/include/linux/thermal.h
index 3bda306f7a50..9af2f3a99658 100644
--- a/include/linux/thermal.h
+++ b/include/linux/thermal.h
@@ -239,6 +239,7 @@ void thermal_zone_device_update(struct thermal_zone_device *);
 struct thermal_cooling_device *thermal_cooling_device_register(char *, void *,
 		const struct thermal_cooling_device_ops *);
 void thermal_cooling_device_unregister(struct thermal_cooling_device *);
+struct thermal_zone_device *thermal_zone_get_zone_by_name(const char *name);
 
 int get_tz_trend(struct thermal_zone_device *, int);
 struct thermal_instance *get_thermal_instance(struct thermal_zone_device *,

commit d13cb03aef0c062dcdd16b411bd4c02c1574ff08
Merge: 2fd1db8819fb bbf7fc88c78f
Author: Zhang Rui <rui.zhang@intel.com>
Date:   Mon Apr 15 09:26:58 2013 +0800

    Merge branch 'thermal' of git://git.kernel.org/pub/scm/linux/kernel/git/rzhang/linux into next
    
    Conflicts:
            drivers/thermal/cpu_cooling.c

commit 80a26a5c22b90a82b8696cb72c1d09d525ada53e
Author: Zhang Rui <rui.zhang@intel.com>
Date:   Tue Mar 26 16:38:29 2013 +0800

    Thermal: build thermal governors into thermal_sys module
    
    The thermal governors are part of the thermal framework,
    rather than a seperate feature/module.
    Because the generic thermal layer can not work without
    thermal governors, and it must load the thermal governors
    during its initialization.
    
    Build them into one module in this patch.
    
    This also fix a problem that the generic thermal layer does not
    work when CONFIG_THERMAL=m and CONFIG_THERMAL_GOV_XXX=y.
    
    Signed-off-by: Zhang Rui <rui.zhang@intel.com>
    Acked-by: Eduardo Valentin <eduardo.valentin@ti.com>
    Acked-by: Durgadoss R <durgadoss.r@intel.com>

diff --git a/include/linux/thermal.h b/include/linux/thermal.h
index 5a3b428daaab..4445b951b57e 100644
--- a/include/linux/thermal.h
+++ b/include/linux/thermal.h
@@ -187,7 +187,6 @@ struct thermal_governor {
 	char name[THERMAL_NAME_LENGTH];
 	int (*throttle)(struct thermal_zone_device *tz, int trip);
 	struct list_head	governor_list;
-	struct module		*owner;
 };
 
 /* Structure that holds binding parameters for a zone */
@@ -247,9 +246,6 @@ struct thermal_instance *get_thermal_instance(struct thermal_zone_device *,
 void thermal_cdev_update(struct thermal_cooling_device *);
 void notify_thermal_framework(struct thermal_zone_device *, int);
 
-int thermal_register_governor(struct thermal_governor *);
-void thermal_unregister_governor(struct thermal_governor *);
-
 #ifdef CONFIG_NET
 extern int thermal_generate_netlink_event(struct thermal_zone_device *tz,
 						enum events event);

commit f8b587055a793c7719f0d4f41b7b4aeeef43aa2d
Author: Ezequiel Garcia <ezequiel.garcia@free-electrons.com>
Date:   Wed Mar 20 21:38:07 2013 +0000

    thermal: Fix compiler warning
    
    The following warning is obtained when CONFIG_NET is not defined:
    
    In file included from drivers/thermal/mvebu_thermal.c:27:0:
    include/linux/thermal.h:254:12: warning: 'thermal_generate_netlink_event'
    defined but not used [-Wunused-function]
    
    This patch fixes the warning by properly inlining
    thermal_generate_netlink_event().
    
    Signed-off-by: Ezequiel Garcia <ezequiel.garcia@free-electrons.com>
    Signed-off-by: Zhang Rui <rui.zhang@intel.com>

diff --git a/include/linux/thermal.h b/include/linux/thermal.h
index f0bd7f90a90d..fd7b8f3e6f42 100644
--- a/include/linux/thermal.h
+++ b/include/linux/thermal.h
@@ -251,7 +251,7 @@ void thermal_unregister_governor(struct thermal_governor *);
 extern int thermal_generate_netlink_event(struct thermal_zone_device *tz,
 						enum events event);
 #else
-static int thermal_generate_netlink_event(struct thermal_zone_device *tz,
+static inline int thermal_generate_netlink_event(struct thermal_zone_device *tz,
 						enum events event)
 {
 	return 0;

commit 57df8106932b57427df1eaaa13871857f75b1194
Author: Zhang Rui <rui.zhang@intel.com>
Date:   Fri Feb 8 14:52:06 2013 +0800

    Thermal: exynos: fix cooling state translation
    
    Signed-off-by: Zhang Rui <rui.zhang@intel.com>
    Tested-by: Amit Daniel kachhap <amit.daniel@samsung.com>

diff --git a/include/linux/thermal.h b/include/linux/thermal.h
index f0bd7f90a90d..5a3b428daaab 100644
--- a/include/linux/thermal.h
+++ b/include/linux/thermal.h
@@ -33,8 +33,11 @@
 #define THERMAL_MAX_TRIPS	12
 #define THERMAL_NAME_LENGTH	20
 
+/* invalid cooling state */
+#define THERMAL_CSTATE_INVALID -1UL
+
 /* No upper/lower limit requirement */
-#define THERMAL_NO_LIMIT	-1UL
+#define THERMAL_NO_LIMIT	THERMAL_CSTATE_INVALID
 
 /* Unit conversion macros */
 #define KELVIN_TO_CELSIUS(t)	(long)(((long)t-2732 >= 0) ?	\

commit 73214f5d9f33b79918b1f7babddd5c8af28dd23d
Author: Masatake YAMATO <yamato@redhat.com>
Date:   Tue Mar 19 01:47:28 2013 +0000

    thermal: shorten too long mcast group name
    
    The original name is too long.
    
    Signed-off-by: Masatake YAMATO <yamato@redhat.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

diff --git a/include/linux/thermal.h b/include/linux/thermal.h
index f0bd7f90a90d..e3c0ae9bb1fa 100644
--- a/include/linux/thermal.h
+++ b/include/linux/thermal.h
@@ -44,7 +44,7 @@
 /* Adding event notification support elements */
 #define THERMAL_GENL_FAMILY_NAME                "thermal_event"
 #define THERMAL_GENL_VERSION                    0x01
-#define THERMAL_GENL_MCAST_GROUP_NAME           "thermal_mc_group"
+#define THERMAL_GENL_MCAST_GROUP_NAME           "thermal_mc_grp"
 
 /* Default Thermal Governor */
 #if defined(CONFIG_THERMAL_DEFAULT_GOV_STEP_WISE)

commit e6e238c38bd4d42d5e2cddb2165e1a46e0fb1200
Author: Amit Daniel Kachhap <amit.daniel@samsung.com>
Date:   Mon Feb 4 00:30:15 2013 +0000

    thermal: sysfs: Add a new sysfs node emul_temp for thermal emulation
    
    This patch adds support to set the emulated temperature method in
    thermal zone (sensor). After setting this feature thermal zone may
    report this temperature and not the actual temperature. The emulation
    implementation may be based on sensor capability through platform
    specific handler or pure software emulation if no platform handler defined.
    
    This is useful in debugging different temperature threshold and its
    associated cooling action. Critical threshold's cannot be emulated.
    Writing 0 on this node should disable emulation.
    
    Signed-off-by: Amit Daniel Kachhap <amit.daniel@samsung.com>
    Acked-by: Kukjin Kim <kgene.kim@samsung.com>
    Signed-off-by: Zhang Rui <rui.zhang@intel.com>

diff --git a/include/linux/thermal.h b/include/linux/thermal.h
index 9b78f8c6f773..f0bd7f90a90d 100644
--- a/include/linux/thermal.h
+++ b/include/linux/thermal.h
@@ -123,6 +123,7 @@ struct thermal_zone_device_ops {
 	int (*set_trip_hyst) (struct thermal_zone_device *, int,
 			      unsigned long);
 	int (*get_crit_temp) (struct thermal_zone_device *, unsigned long *);
+	int (*set_emul_temp) (struct thermal_zone_device *, unsigned long);
 	int (*get_trend) (struct thermal_zone_device *, int,
 			  enum thermal_trend *);
 	int (*notify) (struct thermal_zone_device *, int,
@@ -165,6 +166,7 @@ struct thermal_zone_device {
 	int polling_delay;
 	int temperature;
 	int last_temperature;
+	int emul_temperature;
 	int passive;
 	unsigned int forced_passive;
 	const struct thermal_zone_device_ops *ops;

commit 8ab3e6a08a98f7ff18c6814065eb30ba2e000233
Author: Eduardo Valentin <eduardo.valentin@ti.com>
Date:   Wed Jan 2 15:29:39 2013 +0000

    thermal: Use thermal zone device id in netlink messages
    
    This patch changes the function thermal_generate_netlink_event
    to receive a thermal zone device instead of a originator id.
    
    This way, the messages will always be bound to a thermal zone.
    
    Signed-off-by: Eduardo Valentin <eduardo.valentin@ti.com>
    Reviewed-by: Durgadoss R <durgadoss.r@intel.com>
    Signed-off-by: Zhang Rui <rui.zhang@intel.com>

diff --git a/include/linux/thermal.h b/include/linux/thermal.h
index 883bcda7e1e4..9b78f8c6f773 100644
--- a/include/linux/thermal.h
+++ b/include/linux/thermal.h
@@ -246,9 +246,11 @@ int thermal_register_governor(struct thermal_governor *);
 void thermal_unregister_governor(struct thermal_governor *);
 
 #ifdef CONFIG_NET
-extern int thermal_generate_netlink_event(u32 orig, enum events event);
+extern int thermal_generate_netlink_event(struct thermal_zone_device *tz,
+						enum events event);
 #else
-static inline int thermal_generate_netlink_event(u32 orig, enum events event)
+static int thermal_generate_netlink_event(struct thermal_zone_device *tz,
+						enum events event)
 {
 	return 0;
 }

commit d069015e268bcac6c8bd8997b3235f5f977d3ab6
Author: Zhang Rui <rui.zhang@intel.com>
Date:   Mon Nov 19 15:33:51 2012 +0800

    Introduce THERMAL_TREND_RAISE_FULL and THERMAL_TREND_DROP_FULL
    
    These two new thermal_trend types are used to tell the governor
    that the temeprature is raising/dropping quickly.
    
    Thermal cooling governors should handle this situation and make
    proper decisions, e.g. set cooling state to upper/lower limit directly
    instead of one step each time.
    
    Signed-off-by: Zhang Rui <rui.zhang@intel.com>

diff --git a/include/linux/thermal.h b/include/linux/thermal.h
index fe82022478e7..883bcda7e1e4 100644
--- a/include/linux/thermal.h
+++ b/include/linux/thermal.h
@@ -74,6 +74,8 @@ enum thermal_trend {
 	THERMAL_TREND_STABLE, /* temperature is stable */
 	THERMAL_TREND_RAISING, /* temperature is raising */
 	THERMAL_TREND_DROPPING, /* temperature is dropping */
+	THERMAL_TREND_RAISE_FULL, /* apply highest cooling action */
+	THERMAL_TREND_DROP_FULL, /* apply lowest cooling action */
 };
 
 /* Events supported by Thermal Netlink */

commit 1f53ef17d3ed6c34868cc8e7aa7c1d351c2fdc95
Author: Zhang Rui <rui.zhang@intel.com>
Date:   Wed Dec 12 15:31:37 2012 +0800

    Thermal: Fix DEFAULT_THERMAL_GOVERNOR
    
    Fix DEFAULT_THERMAL_GOVERNOR to be consistant with the
    default governor selected in kernel config file.
    
    Signed-off-by: Zhang Rui <rui.zhang@intel.com>

diff --git a/include/linux/thermal.h b/include/linux/thermal.h
index 807f2146fe35..fe82022478e7 100644
--- a/include/linux/thermal.h
+++ b/include/linux/thermal.h
@@ -46,8 +46,14 @@
 #define THERMAL_GENL_VERSION                    0x01
 #define THERMAL_GENL_MCAST_GROUP_NAME           "thermal_mc_group"
 
-/* Default Thermal Governor: Does Linear Throttling */
-#define DEFAULT_THERMAL_GOVERNOR	"step_wise"
+/* Default Thermal Governor */
+#if defined(CONFIG_THERMAL_DEFAULT_GOV_STEP_WISE)
+#define DEFAULT_THERMAL_GOVERNOR       "step_wise"
+#elif defined(CONFIG_THERMAL_DEFAULT_GOV_FAIR_SHARE)
+#define DEFAULT_THERMAL_GOVERNOR       "fair_share"
+#elif defined(CONFIG_THERMAL_DEFAULT_GOV_USER_SPACE)
+#define DEFAULT_THERMAL_GOVERNOR       "user_space"
+#endif
 
 struct thermal_zone_device;
 struct thermal_cooling_device;

commit f2b4caafd4aa64c9438b0a94af78b127228e6905
Author: Durgadoss R <durgadoss.r@intel.com>
Date:   Tue Sep 18 11:05:05 2012 +0530

    Thermal: Add a notification API
    
    This patch adds a notification API which the sensor drivers'
    can use to notify the framework. The framework then takes
    care of the throttling according to the configured policy.
    
    Signed-off-by: Durgadoss R <durgadoss.r@intel.com>
    Signed-off-by: Zhang Rui <rui.zhang@intel.com>

diff --git a/include/linux/thermal.h b/include/linux/thermal.h
index 2bd915841818..807f2146fe35 100644
--- a/include/linux/thermal.h
+++ b/include/linux/thermal.h
@@ -232,6 +232,7 @@ int get_tz_trend(struct thermal_zone_device *, int);
 struct thermal_instance *get_thermal_instance(struct thermal_zone_device *,
 		struct thermal_cooling_device *, int);
 void thermal_cdev_update(struct thermal_cooling_device *);
+void notify_thermal_framework(struct thermal_zone_device *, int);
 
 int thermal_register_governor(struct thermal_governor *);
 void thermal_unregister_governor(struct thermal_governor *);

commit dc76548269ca2c44e5ddc29db5c36188bc4f2234
Author: Durgadoss R <durgadoss.r@intel.com>
Date:   Tue Sep 18 11:05:00 2012 +0530

    Thermal: Make thermal_cdev_update as a global function
    
    This patch makes the thermal_cdev_update function as a
    global one, so that other files can use it. This function
    serves as a single arbitrator to set the state of a cooling
    device.
    
    Signed-off-by: Durgadoss R <durgadoss.r@intel.com>
    Signed-off-by: Zhang Rui <rui.zhang@intel.com>

diff --git a/include/linux/thermal.h b/include/linux/thermal.h
index 6182bd5f7504..2bd915841818 100644
--- a/include/linux/thermal.h
+++ b/include/linux/thermal.h
@@ -231,6 +231,7 @@ void thermal_cooling_device_unregister(struct thermal_cooling_device *);
 int get_tz_trend(struct thermal_zone_device *, int);
 struct thermal_instance *get_thermal_instance(struct thermal_zone_device *,
 		struct thermal_cooling_device *, int);
+void thermal_cdev_update(struct thermal_cooling_device *);
 
 int thermal_register_governor(struct thermal_governor *);
 void thermal_unregister_governor(struct thermal_governor *);

commit a4a15485fbba44d162d626141b9a7404e790f570
Author: Durgadoss R <durgadoss.r@intel.com>
Date:   Tue Sep 18 11:04:57 2012 +0530

    Thermal: Add thermal governor registration APIs
    
    This patch creates a structure to hold platform
    thermal governor information, and provides APIs
    for individual thermal governors to register/unregister
    with the Thermal framework.
    
    Signed-off-by: Durgadoss R <durgadoss.r@intel.com>
    Signed-off-by: Zhang Rui <rui.zhang@intel.com>

diff --git a/include/linux/thermal.h b/include/linux/thermal.h
index 58cb1c036a0e..6182bd5f7504 100644
--- a/include/linux/thermal.h
+++ b/include/linux/thermal.h
@@ -46,6 +46,9 @@
 #define THERMAL_GENL_VERSION                    0x01
 #define THERMAL_GENL_MCAST_GROUP_NAME           "thermal_mc_group"
 
+/* Default Thermal Governor: Does Linear Throttling */
+#define DEFAULT_THERMAL_GOVERNOR	"step_wise"
+
 struct thermal_zone_device;
 struct thermal_cooling_device;
 
@@ -158,6 +161,7 @@ struct thermal_zone_device {
 	unsigned int forced_passive;
 	const struct thermal_zone_device_ops *ops;
 	const struct thermal_zone_params *tzp;
+	struct thermal_governor *governor;
 	struct list_head thermal_instances;
 	struct idr idr;
 	struct mutex lock; /* protect thermal_instances list */
@@ -165,6 +169,14 @@ struct thermal_zone_device {
 	struct delayed_work poll_queue;
 };
 
+/* Structure that holds thermal governor information */
+struct thermal_governor {
+	char name[THERMAL_NAME_LENGTH];
+	int (*throttle)(struct thermal_zone_device *tz, int trip);
+	struct list_head	governor_list;
+	struct module		*owner;
+};
+
 /* Structure that holds binding parameters for a zone */
 struct thermal_bind_params {
 	struct thermal_cooling_device *cdev;
@@ -189,6 +201,7 @@ struct thermal_bind_params {
 
 /* Structure to define Thermal Zone parameters */
 struct thermal_zone_params {
+	char governor_name[THERMAL_NAME_LENGTH];
 	int num_tbps;	/* Number of tbp entries */
 	struct thermal_bind_params *tbp;
 };
@@ -219,6 +232,9 @@ int get_tz_trend(struct thermal_zone_device *, int);
 struct thermal_instance *get_thermal_instance(struct thermal_zone_device *,
 		struct thermal_cooling_device *, int);
 
+int thermal_register_governor(struct thermal_governor *);
+void thermal_unregister_governor(struct thermal_governor *);
+
 #ifdef CONFIG_NET
 extern int thermal_generate_netlink_event(u32 orig, enum events event);
 #else

commit 50125a9b27dd09e9afdc1b8712ba0b3859886c68
Author: Durgadoss R <durgadoss.r@intel.com>
Date:   Tue Sep 18 11:04:56 2012 +0530

    Thermal: Pass zone parameters as argument to tzd_register
    
    This patch adds the thermal zone parameter as an argument to
    the tzd_register() function call; and updates other drivers
    using this function.
    
    Signed-off-by: Durgadoss R <durgadoss.r@intel.com>
    Signed-off-by: Zhang Rui <rui.zhang@intel.com>

diff --git a/include/linux/thermal.h b/include/linux/thermal.h
index 4caa32e400b4..58cb1c036a0e 100644
--- a/include/linux/thermal.h
+++ b/include/linux/thermal.h
@@ -200,7 +200,8 @@ struct thermal_genl_event {
 
 /* Function declarations */
 struct thermal_zone_device *thermal_zone_device_register(const char *, int, int,
-		void *, const struct thermal_zone_device_ops *, int, int);
+		void *, const struct thermal_zone_device_ops *,
+		const struct thermal_zone_params *, int, int);
 void thermal_zone_device_unregister(struct thermal_zone_device *);
 
 int thermal_zone_bind_cooling_device(struct thermal_zone_device *, int,

commit ef87394791206019e4e4e04cb746865f2dc115ed
Author: Durgadoss R <durgadoss.r@intel.com>
Date:   Tue Sep 18 11:04:55 2012 +0530

    Thermal: Add platform level information to thermal.h
    
    This patch adds platform level information to thermal.h
    by introducing two structures to hold:
     * bind parameters for a thermal zone,
     * zone level platform parameters
    
    Signed-off-by: Durgadoss R <durgadoss.r@intel.com>
    Signed-off-by: Zhang Rui <rui.zhang@intel.com>

diff --git a/include/linux/thermal.h b/include/linux/thermal.h
index 32af124d23cd..4caa32e400b4 100644
--- a/include/linux/thermal.h
+++ b/include/linux/thermal.h
@@ -157,6 +157,7 @@ struct thermal_zone_device {
 	int passive;
 	unsigned int forced_passive;
 	const struct thermal_zone_device_ops *ops;
+	const struct thermal_zone_params *tzp;
 	struct list_head thermal_instances;
 	struct idr idr;
 	struct mutex lock; /* protect thermal_instances list */
@@ -164,6 +165,34 @@ struct thermal_zone_device {
 	struct delayed_work poll_queue;
 };
 
+/* Structure that holds binding parameters for a zone */
+struct thermal_bind_params {
+	struct thermal_cooling_device *cdev;
+
+	/*
+	 * This is a measure of 'how effectively these devices can
+	 * cool 'this' thermal zone. The shall be determined by platform
+	 * characterization. This is on a 'percentage' scale.
+	 * See Documentation/thermal/sysfs-api.txt for more information.
+	 */
+	int weight;
+
+	/*
+	 * This is a bit mask that gives the binding relation between this
+	 * thermal zone and cdev, for a particular trip point.
+	 * See Documentation/thermal/sysfs-api.txt for more information.
+	 */
+	int trip_mask;
+	int (*match) (struct thermal_zone_device *tz,
+			struct thermal_cooling_device *cdev);
+};
+
+/* Structure to define Thermal Zone parameters */
+struct thermal_zone_params {
+	int num_tbps;	/* Number of tbp entries */
+	struct thermal_bind_params *tbp;
+};
+
 struct thermal_genl_event {
 	u32 orig;
 	enum events event;

commit 9b4298a088907811a4fe5a5d7cd2454da60708c5
Author: Durgadoss R <durgadoss.r@intel.com>
Date:   Tue Sep 18 11:04:54 2012 +0530

    Thermal: Add get trend, get instance API's to thermal_sys
    
    This patch adds the following API's to thermal_sys.c, that
    can be used by other Thermal drivers.
     * get_tz_trend: obtain the trend of the given thermal zone
     * get_thermal_instance: obtain the instance corresponding
       to the given tz, cdev and the trip point.
    
    Signed-off-by: Durgadoss R <durgadoss.r@intel.com>
    Signed-off-by: Zhang Rui <rui.zhang@intel.com>

diff --git a/include/linux/thermal.h b/include/linux/thermal.h
index 8611e3eba60c..32af124d23cd 100644
--- a/include/linux/thermal.h
+++ b/include/linux/thermal.h
@@ -185,6 +185,10 @@ struct thermal_cooling_device *thermal_cooling_device_register(char *, void *,
 		const struct thermal_cooling_device_ops *);
 void thermal_cooling_device_unregister(struct thermal_cooling_device *);
 
+int get_tz_trend(struct thermal_zone_device *, int);
+struct thermal_instance *get_thermal_instance(struct thermal_zone_device *,
+		struct thermal_cooling_device *, int);
+
 #ifdef CONFIG_NET
 extern int thermal_generate_netlink_event(u32 orig, enum events event);
 #else

commit 23064088d6aea049746755e9851760620921a80b
Author: Durgadoss R <durgadoss.r@intel.com>
Date:   Tue Sep 18 11:04:52 2012 +0530

    Thermal: Refactor thermal.h file
    
    This patch rearranges the code in thermal.h file,
    in the following order, so that it is easy to
    read/maintain.
    1. All #defines
    2. All enums
    3. All fops structures
    4. All device structures
    5. All function declarations
    
    Signed-off-by: Durgadoss R <durgadoss.r@intel.com>
    Signed-off-by: Zhang Rui <rui.zhang@intel.com>

diff --git a/include/linux/thermal.h b/include/linux/thermal.h
index 91b34812cd84..8611e3eba60c 100644
--- a/include/linux/thermal.h
+++ b/include/linux/thermal.h
@@ -29,6 +29,23 @@
 #include <linux/device.h>
 #include <linux/workqueue.h>
 
+#define THERMAL_TRIPS_NONE	-1
+#define THERMAL_MAX_TRIPS	12
+#define THERMAL_NAME_LENGTH	20
+
+/* No upper/lower limit requirement */
+#define THERMAL_NO_LIMIT	-1UL
+
+/* Unit conversion macros */
+#define KELVIN_TO_CELSIUS(t)	(long)(((long)t-2732 >= 0) ?	\
+				((long)t-2732+5)/10 : ((long)t-2732-5)/10)
+#define CELSIUS_TO_KELVIN(t)	((t)*10+2732)
+
+/* Adding event notification support elements */
+#define THERMAL_GENL_FAMILY_NAME                "thermal_event"
+#define THERMAL_GENL_VERSION                    0x01
+#define THERMAL_GENL_MCAST_GROUP_NAME           "thermal_mc_group"
+
 struct thermal_zone_device;
 struct thermal_cooling_device;
 
@@ -50,6 +67,30 @@ enum thermal_trend {
 	THERMAL_TREND_DROPPING, /* temperature is dropping */
 };
 
+/* Events supported by Thermal Netlink */
+enum events {
+	THERMAL_AUX0,
+	THERMAL_AUX1,
+	THERMAL_CRITICAL,
+	THERMAL_DEV_FAULT,
+};
+
+/* attributes of thermal_genl_family */
+enum {
+	THERMAL_GENL_ATTR_UNSPEC,
+	THERMAL_GENL_ATTR_EVENT,
+	__THERMAL_GENL_ATTR_MAX,
+};
+#define THERMAL_GENL_ATTR_MAX (__THERMAL_GENL_ATTR_MAX - 1)
+
+/* commands supported by the thermal_genl_family */
+enum {
+	THERMAL_GENL_CMD_UNSPEC,
+	THERMAL_GENL_CMD_EVENT,
+	__THERMAL_GENL_CMD_MAX,
+};
+#define THERMAL_GENL_CMD_MAX (__THERMAL_GENL_CMD_MAX - 1)
+
 struct thermal_zone_device_ops {
 	int (*bind) (struct thermal_zone_device *,
 		     struct thermal_cooling_device *);
@@ -83,11 +124,6 @@ struct thermal_cooling_device_ops {
 	int (*set_cur_state) (struct thermal_cooling_device *, unsigned long);
 };
 
-#define THERMAL_NO_LIMIT -1UL /* no upper/lower limit requirement */
-
-#define THERMAL_TRIPS_NONE -1
-#define THERMAL_MAX_TRIPS 12
-#define THERMAL_NAME_LENGTH 20
 struct thermal_cooling_device {
 	int id;
 	char type[THERMAL_NAME_LENGTH];
@@ -100,10 +136,6 @@ struct thermal_cooling_device {
 	struct list_head node;
 };
 
-#define KELVIN_TO_CELSIUS(t)	(long)(((long)t-2732 >= 0) ?	\
-				((long)t-2732+5)/10 : ((long)t-2732-5)/10)
-#define CELSIUS_TO_KELVIN(t)	((t)*10+2732)
-
 struct thermal_attr {
 	struct device_attribute attr;
 	char name[THERMAL_NAME_LENGTH];
@@ -131,38 +163,13 @@ struct thermal_zone_device {
 	struct list_head node;
 	struct delayed_work poll_queue;
 };
-/* Adding event notification support elements */
-#define THERMAL_GENL_FAMILY_NAME                "thermal_event"
-#define THERMAL_GENL_VERSION                    0x01
-#define THERMAL_GENL_MCAST_GROUP_NAME           "thermal_mc_group"
-
-enum events {
-	THERMAL_AUX0,
-	THERMAL_AUX1,
-	THERMAL_CRITICAL,
-	THERMAL_DEV_FAULT,
-};
 
 struct thermal_genl_event {
 	u32 orig;
 	enum events event;
 };
-/* attributes of thermal_genl_family */
-enum {
-	THERMAL_GENL_ATTR_UNSPEC,
-	THERMAL_GENL_ATTR_EVENT,
-	__THERMAL_GENL_ATTR_MAX,
-};
-#define THERMAL_GENL_ATTR_MAX (__THERMAL_GENL_ATTR_MAX - 1)
-
-/* commands supported by the thermal_genl_family */
-enum {
-	THERMAL_GENL_CMD_UNSPEC,
-	THERMAL_GENL_CMD_EVENT,
-	__THERMAL_GENL_CMD_MAX,
-};
-#define THERMAL_GENL_CMD_MAX (__THERMAL_GENL_CMD_MAX - 1)
 
+/* Function declarations */
 struct thermal_zone_device *thermal_zone_device_register(const char *, int, int,
 		void *, const struct thermal_zone_device_ops *, int, int);
 void thermal_zone_device_unregister(struct thermal_zone_device *);
@@ -173,6 +180,7 @@ int thermal_zone_bind_cooling_device(struct thermal_zone_device *, int,
 int thermal_zone_unbind_cooling_device(struct thermal_zone_device *, int,
 				       struct thermal_cooling_device *);
 void thermal_zone_device_update(struct thermal_zone_device *);
+
 struct thermal_cooling_device *thermal_cooling_device_register(char *, void *,
 		const struct thermal_cooling_device_ops *);
 void thermal_cooling_device_unregister(struct thermal_cooling_device *);

commit f4a821ce6ed41970d0155f55067fb07009974fbe
Author: Zhang Rui <rui.zhang@intel.com>
Date:   Tue Jul 24 16:56:21 2012 +0800

    Thermal: Introduce locking for cdev.thermal_instances list.
    
    we need to go over all the thermal_instance list of a cooling device
    to decide which cooling state to put the cooling device to.
    
    But at this time, as a cooling device may be referenced in multiple
    thermal zones, we need to lock the list first in case
    another thermal zone is updating this cooling device.
    
    Signed-off-by: Zhang Rui <rui.zhang@intel.com>
    Reviewed-by: Rafael J. Wysocki <rjw@sisk.pl>
    Reviewed-by: Eduardo Valentin <eduardo.valentin@ti.com>

diff --git a/include/linux/thermal.h b/include/linux/thermal.h
index 76d0fe88eb1c..91b34812cd84 100644
--- a/include/linux/thermal.h
+++ b/include/linux/thermal.h
@@ -95,6 +95,7 @@ struct thermal_cooling_device {
 	void *devdata;
 	const struct thermal_cooling_device_ops *ops;
 	bool updated; /* true if the cooling device does not need update */
+	struct mutex lock; /* protect thermal_instances list */
 	struct list_head thermal_instances;
 	struct list_head node;
 };

commit 908b9fb792b77663a007af240e7ee89460de2025
Author: Zhang Rui <rui.zhang@intel.com>
Date:   Wed Jun 27 14:14:05 2012 +0800

    Thermal: Unify the code for both active and passive cooling
    
    Remove thermal_zone_device_passive(). And use
    thermal_zone_trip_update() and thermal_zone_do_update()
    for both active and passive cooling.
    
    Signed-off-by: Zhang Rui <rui.zhang@intel.com>
    Reviewed-by: Rafael J. Wysocki <rjw@sisk.pl>
    Reviewed-by: Eduardo Valentin <eduardo.valentin@ti.com>

diff --git a/include/linux/thermal.h b/include/linux/thermal.h
index de0515a96f9f..76d0fe88eb1c 100644
--- a/include/linux/thermal.h
+++ b/include/linux/thermal.h
@@ -121,7 +121,7 @@ struct thermal_zone_device {
 	int polling_delay;
 	int temperature;
 	int last_temperature;
-	bool passive;
+	int passive;
 	unsigned int forced_passive;
 	const struct thermal_zone_device_ops *ops;
 	struct list_head thermal_instances;

commit ce119f83257aae29b84a5bfad0669e8348437b18
Author: Zhang Rui <rui.zhang@intel.com>
Date:   Wed Jun 27 14:13:04 2012 +0800

    Thermal: Introduce simple arbitrator for setting device cooling state
    
    This fixes the problem that a cooling device may be referenced by
    by multiple trip points in multiple thermal zones.
    
    With this patch, we have two stages for updating a thermal zone,
    1. check if a thermal_instance needs to be updated or not
    2. update the cooling device, based on the target cooling state
       of all its instances.
    
    Note that, currently, the cooling device is set to the deepest
    cooling state required.
    
    Signed-off-by: Zhang Rui <rui.zhang@intel.com>
    Reviewed-by: Rafael J. Wysocki <rjw@sisk.pl>
    Reviewed-by: Eduardo Valentin <eduardo.valentin@ti.com>

diff --git a/include/linux/thermal.h b/include/linux/thermal.h
index 9ae378a4a555..de0515a96f9f 100644
--- a/include/linux/thermal.h
+++ b/include/linux/thermal.h
@@ -94,6 +94,7 @@ struct thermal_cooling_device {
 	struct device device;
 	void *devdata;
 	const struct thermal_cooling_device_ops *ops;
+	bool updated; /* true if the cooling device does not need update */
 	struct list_head thermal_instances;
 	struct list_head node;
 };

commit b5e4ae620b06274981781aeadc2aea50b507f7fb
Author: Zhang Rui <rui.zhang@intel.com>
Date:   Wed Jun 27 14:11:52 2012 +0800

    Thermal: List thermal_instance in thermal_cooling_device.
    
    List thermal_instance in thermal_cooling_device so that
    cooling device can know the cooling state requirement
    of all the thermal instances.
    
    Signed-off-by: Zhang Rui <rui.zhang@intel.com>
    Reviewed-by: Rafael J. Wysocki <rjw@sisk.pl>
    Reviewed-by: Eduardo Valentin <eduardo.valentin@ti.com>

diff --git a/include/linux/thermal.h b/include/linux/thermal.h
index cb0b0e3ffd97..9ae378a4a555 100644
--- a/include/linux/thermal.h
+++ b/include/linux/thermal.h
@@ -94,6 +94,7 @@ struct thermal_cooling_device {
 	struct device device;
 	void *devdata;
 	const struct thermal_cooling_device_ops *ops;
+	struct list_head thermal_instances;
 	struct list_head node;
 };
 

commit 2d374139d5b0b596cfbd892bf3ec7dacb3049904
Author: Zhang Rui <rui.zhang@intel.com>
Date:   Wed Jun 27 10:09:00 2012 +0800

    Thermal: Rename thermal_zone_device.cooling_devices
    
    Rename thermal_zone_device.cooling_devices
    to thermal_zone_device.thermal_instances
    
    thermal_zone_device.cooling_devices is not accurate
    as this is a list for thermal instances, rather than cooling devices.
    
    Signed-off-by: Zhang Rui <rui.zhang@intel.com>
    Reviewed-by: Rafael J. Wysocki <rjw@sisk.pl>
    Reviewed-by: Eduardo Valentin <eduardo.valentin@ti.com>

diff --git a/include/linux/thermal.h b/include/linux/thermal.h
index 38267a595d69..cb0b0e3ffd97 100644
--- a/include/linux/thermal.h
+++ b/include/linux/thermal.h
@@ -122,9 +122,9 @@ struct thermal_zone_device {
 	bool passive;
 	unsigned int forced_passive;
 	const struct thermal_zone_device_ops *ops;
-	struct list_head cooling_devices;
+	struct list_head thermal_instances;
 	struct idr idr;
-	struct mutex lock;	/* protect cooling devices list */
+	struct mutex lock; /* protect thermal_instances list */
 	struct list_head node;
 	struct delayed_work poll_queue;
 };

commit 1b7ddb840c3908464b19d4aa4f6dc4c463302442
Author: Zhang Rui <rui.zhang@intel.com>
Date:   Wed Jun 27 09:51:12 2012 +0800

    Thermal: Remove tc1/tc2 in generic thermal layer.
    
    Remove tc1/tc2 in generic thermal layer.
    .get_trend() callback starts to take effect from this patch.
    
    Signed-off-by: Zhang Rui <rui.zhang@intel.com>
    Reviewed-by: Rafael J. Wysocki <rjw@sisk.pl>
    Reviewed-by: Valentin, Eduardo <eduardo.valentin@ti.com>

diff --git a/include/linux/thermal.h b/include/linux/thermal.h
index 6a1d43d2ec92..38267a595d69 100644
--- a/include/linux/thermal.h
+++ b/include/linux/thermal.h
@@ -115,8 +115,6 @@ struct thermal_zone_device {
 	struct thermal_attr *trip_hyst_attrs;
 	void *devdata;
 	int trips;
-	int tc1;
-	int tc2;
 	int passive_delay;
 	int polling_delay;
 	int temperature;
@@ -163,8 +161,7 @@ enum {
 #define THERMAL_GENL_CMD_MAX (__THERMAL_GENL_CMD_MAX - 1)
 
 struct thermal_zone_device *thermal_zone_device_register(const char *, int, int,
-		void *, const struct thermal_zone_device_ops *, int tc1,
-		int tc2, int passive_freq, int polling_freq);
+		void *, const struct thermal_zone_device_ops *, int, int);
 void thermal_zone_device_unregister(struct thermal_zone_device *);
 
 int thermal_zone_bind_cooling_device(struct thermal_zone_device *, int,

commit 601f3d4242be6ed6f72a2aadabc91e8255dad811
Author: Zhang Rui <rui.zhang@intel.com>
Date:   Wed Jun 27 09:54:33 2012 +0800

    Thermal: Introduce .get_trend() callback.
    
    According to ACPI spec, tc1 and tc2 are used by OSPM
    to anticipate the temperature trends.
    We introduced the same concept to the generic thermal layer
    for passive cooling, but now it seems that these values
    are hard to be used on other platforms.
    
    So We introduce .get_trend() as a more general solution.
    
    For the platform thermal drivers that have their own way to
    anticipate the temperature trends, they should provide
    their own .get_trend() callback.
    Or else, we will calculate the temperature trends by simply
    comparing the current temperature and the cached previous
    temperature reading.
    
    Signed-off-by: Zhang Rui <rui.zhang@intel.com>
    Reviewed-by: Rafael J. Wysocki <rjw@sisk.pl>
    Reviewed-by: Valentin, Eduardo <eduardo.valentin@ti.com>

diff --git a/include/linux/thermal.h b/include/linux/thermal.h
index 5946a3b90bb2..6a1d43d2ec92 100644
--- a/include/linux/thermal.h
+++ b/include/linux/thermal.h
@@ -44,6 +44,12 @@ enum thermal_trip_type {
 	THERMAL_TRIP_CRITICAL,
 };
 
+enum thermal_trend {
+	THERMAL_TREND_STABLE, /* temperature is stable */
+	THERMAL_TREND_RAISING, /* temperature is raising */
+	THERMAL_TREND_DROPPING, /* temperature is dropping */
+};
+
 struct thermal_zone_device_ops {
 	int (*bind) (struct thermal_zone_device *,
 		     struct thermal_cooling_device *);
@@ -65,6 +71,8 @@ struct thermal_zone_device_ops {
 	int (*set_trip_hyst) (struct thermal_zone_device *, int,
 			      unsigned long);
 	int (*get_crit_temp) (struct thermal_zone_device *, unsigned long *);
+	int (*get_trend) (struct thermal_zone_device *, int,
+			  enum thermal_trend *);
 	int (*notify) (struct thermal_zone_device *, int,
 		       enum thermal_trip_type);
 };
@@ -111,6 +119,7 @@ struct thermal_zone_device {
 	int tc2;
 	int passive_delay;
 	int polling_delay;
+	int temperature;
 	int last_temperature;
 	bool passive;
 	unsigned int forced_passive;

commit 9d99842f99d847191ebd0c28469d2c70fcc5bf9e
Author: Zhang Rui <rui.zhang@intel.com>
Date:   Tue Jun 26 16:35:57 2012 +0800

    Thermal: set upper and lower limits
    
    set upper and lower limits when binding
    a thermal cooling device to a thermal zone device.
    
    Signed-off-by: Zhang Rui <rui.zhang@intel.com>
    Reviewed-by: Rafael J. Wysocki <rjw@sisk.pl>
    Reviewed-by: Eduardo Valentin <eduardo.valentin@ti.com>

diff --git a/include/linux/thermal.h b/include/linux/thermal.h
index 4b94a61955df..5946a3b90bb2 100644
--- a/include/linux/thermal.h
+++ b/include/linux/thermal.h
@@ -75,6 +75,8 @@ struct thermal_cooling_device_ops {
 	int (*set_cur_state) (struct thermal_cooling_device *, unsigned long);
 };
 
+#define THERMAL_NO_LIMIT -1UL /* no upper/lower limit requirement */
+
 #define THERMAL_TRIPS_NONE -1
 #define THERMAL_MAX_TRIPS 12
 #define THERMAL_NAME_LENGTH 20
@@ -157,7 +159,8 @@ struct thermal_zone_device *thermal_zone_device_register(const char *, int, int,
 void thermal_zone_device_unregister(struct thermal_zone_device *);
 
 int thermal_zone_bind_cooling_device(struct thermal_zone_device *, int,
-				     struct thermal_cooling_device *);
+				     struct thermal_cooling_device *,
+				     unsigned long, unsigned long);
 int thermal_zone_unbind_cooling_device(struct thermal_zone_device *, int,
 				       struct thermal_cooling_device *);
 void thermal_zone_device_update(struct thermal_zone_device *);

commit 4b24ff71108164e047cf2c95990b77651163e315
Merge: bca1a5c0eabe 4b1bf5871f7d
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Tue Jul 31 18:08:25 2012 -0700

    Merge tag 'for-v3.6' of git://git.infradead.org/battery-2.6
    
    Pull battery updates from Anton Vorontsov:
     "The tag contains just a few battery-related changes for v3.6.  It's is
      all pretty straightforward, except one thing.
    
      One of our patches added thermal support for power supply class, but
      thermal/ subsystem changed under our feet.  We (well, Stephen, that
      is) caught the issue and it was decided[1] that I'd just delay the
      battery pull request, and then will fix it up by merging upstream back
      into battery tree at the specific commit.
    
      That's not all though: another[2] small fixup for thermal subsystem
      was needed to get rid of a warning in power supply subsystem (the
      warning was not drivers/power's "fault", the thermal registration
      function just needed a proper const annotation, which is also done by
      a small commit on top of the merge.
    
      So, to sum this up:
       - The 'master' branch of the battery tree was in the -next tree for
         weeks, was never rebased, altered etc.  It should be all OK;
       - Although, for-v3.6 tag contains the 'master' branch + merge + the
         warning fix.
    
      [1] http://lkml.org/lkml/2012/6/19/23
      [2] http://lkml.org/lkml/2012/6/18/28"
    
    * tag 'for-v3.6' of git://git.infradead.org/battery-2.6: (23 commits)
      thermal: Constify 'type' argument for the registration routine
      olpc-battery: update CHARGE_FULL_DESIGN property for BYD LiFe batteries
      olpc-battery: Add VOLTAGE_MAX_DESIGN property
      charger-manager: Fix build break related to EXTCON
      lp8727_charger: Move header file into platform_data directory
      power_supply: Add min/max alert properties for CAPACITY, TEMP, TEMP_AMBIENT
      bq27x00_battery: Add support for BQ27425 chip
      charger-manager: Set current limit of regulator for over current protection
      charger-manager: Use EXTCON Subsystem to detect charger cables for charging
      test_power: Add VOLTAGE_NOW and BATTERY_TEMP properties
      test_power: Add support for USB AC source
      gpio-charger: Use cansleep version of gpio_set_value
      bq27x00_battery: Add support for power average and health properties
      sbs-battery: Don't trigger false supply_changed event
      twl4030_charger: Allow charger to control the regulator that feeds it
      twl4030_charger: Add backup-battery charging
      twl4030_charger: Fix some typos
      max17042_battery: Support CHARGE_COUNTER power supply attribute
      smb347-charger: Add constant charge and current properties
      power_supply: Add constant charge_current and charge_voltage properties
      ...

commit 4b1bf5871f7d59de6484cc887e205d6d2f1e6fbd
Author: Anton Vorontsov <anton.vorontsov@linaro.org>
Date:   Tue Jul 31 04:39:30 2012 -0700

    thermal: Constify 'type' argument for the registration routine
    
    thermal_zone_device_register() does not modify 'type' argument, so it is
    safe to declare it as const. Otherwise, if we pass a const string, we are
    getting the ugly warning:
    
    CC drivers/power/power_supply_core.o
    drivers/power/power_supply_core.c: In function 'psy_register_thermal':
    drivers/power/power_supply_core.c:204:6: warning: passing argument 1 of 'thermal_zone_device_register' discards 'const' qualifier from pointer target type [enabled by default]
    include/linux/thermal.h:140:29: note: expected 'char *' but argument is of type 'const char *'
    
    Signed-off-by: Anton Vorontsov <anton.vorontsov@linaro.org>
    Acked-by: Jean Delvare <khali@linux-fr.org>

diff --git a/include/linux/thermal.h b/include/linux/thermal.h
index 6eaf9146c847..4821735f3e77 100644
--- a/include/linux/thermal.h
+++ b/include/linux/thermal.h
@@ -146,7 +146,7 @@ enum {
 };
 #define THERMAL_GENL_CMD_MAX (__THERMAL_GENL_CMD_MAX - 1)
 
-struct thermal_zone_device *thermal_zone_device_register(char *, int, int,
+struct thermal_zone_device *thermal_zone_device_register(const char *, int, int,
 		void *, const struct thermal_zone_device_ops *, int tc1,
 		int tc2, int passive_freq, int polling_freq);
 void thermal_zone_device_unregister(struct thermal_zone_device *);

commit 27365a6c7d64a3bba22ee62109e4a071bbd7f933
Author: Durgadoss R <dugardoss.r@intel.com>
Date:   Wed Jul 25 10:10:59 2012 +0800

    Thermal: Add Hysteresis attributes
    
    The Linux Thermal Framework does not support hysteresis
    attributes. Most thermal sensors, today, have a
    hysteresis value associated with trip points.
    
    This patch adds hysteresis attributes on a per-trip-point
    basis, to the Thermal Framework. These attributes are
    optionally writable.
    
    Signed-off-by: Durgadoss R <durgadoss.r@intel.com>
    Signed-off-by: Zhang Rui <rui.zhang@intel.com>
    Signed-off-by: Len Brown <len.brown@intel.com>

diff --git a/include/linux/thermal.h b/include/linux/thermal.h
index 6eaf9146c847..cfc8d908892e 100644
--- a/include/linux/thermal.h
+++ b/include/linux/thermal.h
@@ -60,6 +60,10 @@ struct thermal_zone_device_ops {
 			      unsigned long *);
 	int (*set_trip_temp) (struct thermal_zone_device *, int,
 			      unsigned long);
+	int (*get_trip_hyst) (struct thermal_zone_device *, int,
+			      unsigned long *);
+	int (*set_trip_hyst) (struct thermal_zone_device *, int,
+			      unsigned long);
 	int (*get_crit_temp) (struct thermal_zone_device *, unsigned long *);
 	int (*notify) (struct thermal_zone_device *, int,
 		       enum thermal_trip_type);
@@ -98,6 +102,7 @@ struct thermal_zone_device {
 	struct device device;
 	struct thermal_attr *trip_temp_attrs;
 	struct thermal_attr *trip_type_attrs;
+	struct thermal_attr *trip_hyst_attrs;
 	void *devdata;
 	int trips;
 	int tc1;

commit c56f5c0342dfee11a1a13d2f5bb7618de5b17590
Author: Durgadoss R <dugardoss.r@intel.com>
Date:   Wed Jul 25 10:10:58 2012 +0800

    Thermal: Make Thermal trip points writeable
    
    Some of the thermal drivers using the Generic Thermal Framework
    require (all/some) trip points to be writeable. This patch makes
    the trip point temperatures writeable on a per-trip point basis,
    and modifies the required function call in thermal.c. This patch
    also updates the Documentation to reflect the new change.
    
    Signed-off-by: Durgadoss R <durgadoss.r@intel.com>
    Signed-off-by: Zhang Rui <rui.zhang@intel.com>
    Signed-off-by: Len Brown <len.brown@intel.com>

diff --git a/include/linux/thermal.h b/include/linux/thermal.h
index 796f1ff0388c..6eaf9146c847 100644
--- a/include/linux/thermal.h
+++ b/include/linux/thermal.h
@@ -58,6 +58,8 @@ struct thermal_zone_device_ops {
 		enum thermal_trip_type *);
 	int (*get_trip_temp) (struct thermal_zone_device *, int,
 			      unsigned long *);
+	int (*set_trip_temp) (struct thermal_zone_device *, int,
+			      unsigned long);
 	int (*get_crit_temp) (struct thermal_zone_device *, unsigned long *);
 	int (*notify) (struct thermal_zone_device *, int,
 		       enum thermal_trip_type);
@@ -85,10 +87,17 @@ struct thermal_cooling_device {
 				((long)t-2732+5)/10 : ((long)t-2732-5)/10)
 #define CELSIUS_TO_KELVIN(t)	((t)*10+2732)
 
+struct thermal_attr {
+	struct device_attribute attr;
+	char name[THERMAL_NAME_LENGTH];
+};
+
 struct thermal_zone_device {
 	int id;
 	char type[THERMAL_NAME_LENGTH];
 	struct device device;
+	struct thermal_attr *trip_temp_attrs;
+	struct thermal_attr *trip_type_attrs;
 	void *devdata;
 	int trips;
 	int tc1;
@@ -137,9 +146,9 @@ enum {
 };
 #define THERMAL_GENL_CMD_MAX (__THERMAL_GENL_CMD_MAX - 1)
 
-struct thermal_zone_device *thermal_zone_device_register(char *, int, void *,
-		const struct thermal_zone_device_ops *, int tc1, int tc2,
-		int passive_freq, int polling_freq);
+struct thermal_zone_device *thermal_zone_device_register(char *, int, int,
+		void *, const struct thermal_zone_device_ops *, int tc1,
+		int tc2, int passive_freq, int polling_freq);
 void thermal_zone_device_unregister(struct thermal_zone_device *);
 
 int thermal_zone_bind_cooling_device(struct thermal_zone_device *, int,

commit 2d58d7ea9164da59d0ea82fdf80e3ababe52d58c
Author: Jean Delvare <khali@linux-fr.org>
Date:   Fri Nov 4 10:31:04 2011 +0100

    thermal: Rename generate_netlink_event
    
    It doesn't seem right for the thermal subsystem to export a symbol
    named generate_netlink_event. This function is thermal-specific and
    its name should reflect that fact. Rename it to
    thermal_generate_netlink_event.
    
    Signed-off-by: Jean Delvare <khali@linux-fr.org>
    Acked-by: Rafael J. Wysocki <rjw@sisk.pl>
    Acked-by: R.Durgadoss <durgadoss.r@intel.com>
    Signed-off-by: Len Brown <len.brown@intel.com>

diff --git a/include/linux/thermal.h b/include/linux/thermal.h
index 47b4a27e6e97..796f1ff0388c 100644
--- a/include/linux/thermal.h
+++ b/include/linux/thermal.h
@@ -152,9 +152,9 @@ struct thermal_cooling_device *thermal_cooling_device_register(char *, void *,
 void thermal_cooling_device_unregister(struct thermal_cooling_device *);
 
 #ifdef CONFIG_NET
-extern int generate_netlink_event(u32 orig, enum events event);
+extern int thermal_generate_netlink_event(u32 orig, enum events event);
 #else
-static inline int generate_netlink_event(u32 orig, enum events event)
+static inline int thermal_generate_netlink_event(u32 orig, enum events event)
 {
 	return 0;
 }

commit 31f5396ad3bde23c8416e8d23ba425e27f413314
Author: Jean Delvare <khali@linux-fr.org>
Date:   Thu Jul 28 13:48:42 2011 -0700

    thermal: make THERMAL_HWMON implementation fully internal
    
    THERMAL_HWMON is implemented inside the thermal_sys driver and has no
    effect on drivers implementing thermal zones, so they shouldn't see
    anything related to it in <linux/thermal.h>.  Making the THERMAL_HWMON
    implementation fully internal has two advantages beyond the cleaner
    design:
    
    * This avoids rebuilding all thermal drivers if the THERMAL_HWMON
      implementation changes, or if CONFIG_THERMAL_HWMON gets enabled or
      disabled.
    
    * This avoids breaking the thermal kABI in these cases too, which should
      make distributions happy.
    
    The only drawback I can see is slightly higher memory fragmentation, as
    the number of kzalloc() calls will increase by one per thermal zone.  But
    I doubt it will be a problem in practice, as I've never seen a system with
    more than two thermal zones.
    
    Signed-off-by: Jean Delvare <khali@linux-fr.org>
    Cc: Rene Herman <rene.herman@gmail.com>
    Acked-by: Guenter Roeck <guenter.roeck@ericsson.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Len Brown <len.brown@intel.com>

diff --git a/include/linux/thermal.h b/include/linux/thermal.h
index d3ec89fb4122..47b4a27e6e97 100644
--- a/include/linux/thermal.h
+++ b/include/linux/thermal.h
@@ -85,22 +85,6 @@ struct thermal_cooling_device {
 				((long)t-2732+5)/10 : ((long)t-2732-5)/10)
 #define CELSIUS_TO_KELVIN(t)	((t)*10+2732)
 
-#if defined(CONFIG_THERMAL_HWMON)
-/* thermal zone devices with the same type share one hwmon device */
-struct thermal_hwmon_device {
-	char type[THERMAL_NAME_LENGTH];
-	struct device *device;
-	int count;
-	struct list_head tz_list;
-	struct list_head node;
-};
-
-struct thermal_hwmon_attr {
-	struct device_attribute attr;
-	char name[16];
-};
-#endif
-
 struct thermal_zone_device {
 	int id;
 	char type[THERMAL_NAME_LENGTH];
@@ -120,12 +104,6 @@ struct thermal_zone_device {
 	struct mutex lock;	/* protect cooling devices list */
 	struct list_head node;
 	struct delayed_work poll_queue;
-#if defined(CONFIG_THERMAL_HWMON)
-	struct list_head hwmon_node;
-	struct thermal_hwmon_device *hwmon;
-	struct thermal_hwmon_attr temp_input;	/* hwmon sys attr */
-	struct thermal_hwmon_attr temp_crit;	/* hwmon sys attr */
-#endif
 };
 /* Adding event notification support elements */
 #define THERMAL_GENL_FAMILY_NAME                "thermal_event"

commit af06216a8ef1c430cc6ad22b562f3a11a512c5dd
Author: Rafael J. Wysocki <rjw@sisk.pl>
Date:   Tue Mar 1 01:12:19 2011 +0100

    ACPI: Fix build for CONFIG_NET unset
    
    Several ACPI drivers fail to build if CONFIG_NET is unset, because
    they refer to things depending on CONFIG_THERMAL that in turn depends
    on CONFIG_NET.  However, CONFIG_THERMAL doesn't really need to depend
    on CONFIG_NET, because the only part of it requiring CONFIG_NET is
    the netlink interface in thermal_sys.c.
    
    Put the netlink interface in thermal_sys.c under #ifdef CONFIG_NET
    and remove the dependency of CONFIG_THERMAL on CONFIG_NET from
    drivers/thermal/Kconfig.
    
    Signed-off-by: Rafael J. Wysocki <rjw@sisk.pl>
    Acked-by: Randy Dunlap <randy.dunlap@oracle.com>
    Cc: Ingo Molnar <mingo@elte.hu>
    Cc: Len Brown <lenb@kernel.org>
    Cc: Stephen Rothwell <sfr@canb.auug.org.au>
    Cc: Luming Yu <luming.yu@intel.com>
    Cc: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

diff --git a/include/linux/thermal.h b/include/linux/thermal.h
index 8651556dbd52..d3ec89fb4122 100644
--- a/include/linux/thermal.h
+++ b/include/linux/thermal.h
@@ -172,6 +172,14 @@ void thermal_zone_device_update(struct thermal_zone_device *);
 struct thermal_cooling_device *thermal_cooling_device_register(char *, void *,
 		const struct thermal_cooling_device_ops *);
 void thermal_cooling_device_unregister(struct thermal_cooling_device *);
+
+#ifdef CONFIG_NET
 extern int generate_netlink_event(u32 orig, enum events event);
+#else
+static inline int generate_netlink_event(u32 orig, enum events event)
+{
+	return 0;
+}
+#endif
 
 #endif /* __THERMAL_H__ */

commit 156d821270e131dee7d89fc4aa385f0f9b1900ea
Merge: 3e0989840737 5b275ce27077
Author: Len Brown <len.brown@intel.com>
Date:   Wed Jan 12 05:14:15 2011 -0500

    Merge branch 'misc' into release

commit 4cb18728709683c91a5f6f8d5f337bfb498b089a
Author: R.Durgadoss <durgadoss.r@intel.com>
Date:   Wed Oct 27 03:33:29 2010 +0530

    thermal: Add event notification to thermal framework
    
    This patch adds event notification support to the generic
    thermal sysfs framework in the kernel. The notification is in the
    form of a netlink event.
    
    Signed-off-by: R.Durgadoss <durgadoss.r@intel.com>
    Signed-off-by: Len Brown <len.brown@intel.com>

diff --git a/include/linux/thermal.h b/include/linux/thermal.h
index 1de8b9eb841b..784644961279 100644
--- a/include/linux/thermal.h
+++ b/include/linux/thermal.h
@@ -127,6 +127,37 @@ struct thermal_zone_device {
 	struct thermal_hwmon_attr temp_crit;	/* hwmon sys attr */
 #endif
 };
+/* Adding event notification support elements */
+#define THERMAL_GENL_FAMILY_NAME                "thermal_event"
+#define THERMAL_GENL_VERSION                    0x01
+#define THERMAL_GENL_MCAST_GROUP_NAME           "thermal_mc_group"
+
+enum events {
+	THERMAL_AUX0,
+	THERMAL_AUX1,
+	THERMAL_CRITICAL,
+	THERMAL_DEV_FAULT,
+};
+
+struct thermal_genl_event {
+	u32 orig;
+	enum events event;
+};
+/* attributes of thermal_genl_family */
+enum {
+	THERMAL_GENL_ATTR_UNSPEC,
+	THERMAL_GENL_ATTR_EVENT,
+	__THERMAL_GENL_ATTR_MAX,
+};
+#define THERMAL_GENL_ATTR_MAX (__THERMAL_GENL_ATTR_MAX - 1)
+
+/* commands supported by the thermal_genl_family */
+enum {
+	THERMAL_GENL_CMD_UNSPEC,
+	THERMAL_GENL_CMD_EVENT,
+	__THERMAL_GENL_CMD_MAX,
+};
+#define THERMAL_GENL_CMD_MAX (__THERMAL_GENL_CMD_MAX - 1)
 
 struct thermal_zone_device *thermal_zone_device_register(char *, int, void *,
 							 struct
@@ -146,5 +177,6 @@ struct thermal_cooling_device *thermal_cooling_device_register(char *, void *,
 							       thermal_cooling_device_ops
 							       *);
 void thermal_cooling_device_unregister(struct thermal_cooling_device *);
+extern int generate_netlink_event(u32 orig, enum events event);
 
 #endif /* __THERMAL_H__ */

commit 5b275ce27077d6463ca28c9671dce7c2c1f622e2
Author: Alan Cox <alan@linux.intel.com>
Date:   Thu Nov 11 15:27:29 2010 +0000

    thermal: make ops constant
    
    And while touching that function definition do something about the disaster
    of formatting there.
    
    Signed-off-by: Alan Cox <alan@linux.intel.com>
    Acked-by: Zhang Rui <rui.zhang@intel.com>
    Signed-off-by: Len Brown <len.brown@intel.com>

diff --git a/include/linux/thermal.h b/include/linux/thermal.h
index 1de8b9eb841b..06626904daa0 100644
--- a/include/linux/thermal.h
+++ b/include/linux/thermal.h
@@ -77,7 +77,7 @@ struct thermal_cooling_device {
 	char type[THERMAL_NAME_LENGTH];
 	struct device device;
 	void *devdata;
-	struct thermal_cooling_device_ops *ops;
+	const struct thermal_cooling_device_ops *ops;
 	struct list_head node;
 };
 
@@ -114,7 +114,7 @@ struct thermal_zone_device {
 	int last_temperature;
 	bool passive;
 	unsigned int forced_passive;
-	struct thermal_zone_device_ops *ops;
+	const struct thermal_zone_device_ops *ops;
 	struct list_head cooling_devices;
 	struct idr idr;
 	struct mutex lock;	/* protect cooling devices list */
@@ -129,11 +129,8 @@ struct thermal_zone_device {
 };
 
 struct thermal_zone_device *thermal_zone_device_register(char *, int, void *,
-							 struct
-							 thermal_zone_device_ops
-							 *, int tc1, int tc2,
-							 int passive_freq,
-							 int polling_freq);
+		const struct thermal_zone_device_ops *, int tc1, int tc2,
+		int passive_freq, int polling_freq);
 void thermal_zone_device_unregister(struct thermal_zone_device *);
 
 int thermal_zone_bind_cooling_device(struct thermal_zone_device *, int,
@@ -142,9 +139,7 @@ int thermal_zone_unbind_cooling_device(struct thermal_zone_device *, int,
 				       struct thermal_cooling_device *);
 void thermal_zone_device_update(struct thermal_zone_device *);
 struct thermal_cooling_device *thermal_cooling_device_register(char *, void *,
-							       struct
-							       thermal_cooling_device_ops
-							       *);
+		const struct thermal_cooling_device_ops *);
 void thermal_cooling_device_unregister(struct thermal_cooling_device *);
 
 #endif /* __THERMAL_H__ */

commit 03a971a2899886006f19f3495973bbd646d8bdae
Author: Matthew Garrett <mjg59@srcf.ucam.org>
Date:   Wed Dec 3 18:00:38 2008 +0000

    thermal: support forcing support for passive cooling
    
    Due to poor thermal design or Linux driving hardware outside its thermal
    envelope, some systems will reach critical temperature and shut down
    under high load. This patch adds support for forcing a polling-based
    passive trip point if the firmware doesn't provide one. The assumption
    is made that the processor is the most practical means to reduce the
    dynamic heat generation, so hitting the passive thermal limit will cause
    the CPU to be throttled until the temperature stabalises around the
    defined value.
    
    UI is provided via a "passive" sysfs entry in the thermal zone
    directory. It accepts a decimal value in millidegrees celsius, or "0" to
    disable the functionality. Default behaviour is for this functionality
    to be disabled.
    
    Signed-off-by: Matthew Garrett <mjg@redhat.com>
    Signed-off-by: Len Brown <len.brown@intel.com>

diff --git a/include/linux/thermal.h b/include/linux/thermal.h
index a81c61521ba4..1de8b9eb841b 100644
--- a/include/linux/thermal.h
+++ b/include/linux/thermal.h
@@ -113,6 +113,7 @@ struct thermal_zone_device {
 	int polling_delay;
 	int last_temperature;
 	bool passive;
+	unsigned int forced_passive;
 	struct thermal_zone_device_ops *ops;
 	struct list_head cooling_devices;
 	struct idr idr;

commit b1569e99c795bf83b4ddf41c4f1c42761ab7f75e
Author: Matthew Garrett <mjg59@srcf.ucam.org>
Date:   Wed Dec 3 17:55:32 2008 +0000

    ACPI: move thermal trip handling to generic thermal layer
    
    The ACPI code currently carries its own thermal trip handling, meaning that
    any other thermal implementation will need to reimplement it. Move the code
    to the generic thermal layer.
    
    Signed-off-by: Matthew Garrett <mjg@redhat.com>
    Signed-off-by: Len Brown <len.brown@intel.com>

diff --git a/include/linux/thermal.h b/include/linux/thermal.h
index 4cb3292fb6e4..a81c61521ba4 100644
--- a/include/linux/thermal.h
+++ b/include/linux/thermal.h
@@ -27,6 +27,7 @@
 
 #include <linux/idr.h>
 #include <linux/device.h>
+#include <linux/workqueue.h>
 
 struct thermal_zone_device;
 struct thermal_cooling_device;
@@ -58,6 +59,8 @@ struct thermal_zone_device_ops {
 	int (*get_trip_temp) (struct thermal_zone_device *, int,
 			      unsigned long *);
 	int (*get_crit_temp) (struct thermal_zone_device *, unsigned long *);
+	int (*notify) (struct thermal_zone_device *, int,
+		       enum thermal_trip_type);
 };
 
 struct thermal_cooling_device_ops {
@@ -104,11 +107,18 @@ struct thermal_zone_device {
 	struct device device;
 	void *devdata;
 	int trips;
+	int tc1;
+	int tc2;
+	int passive_delay;
+	int polling_delay;
+	int last_temperature;
+	bool passive;
 	struct thermal_zone_device_ops *ops;
 	struct list_head cooling_devices;
 	struct idr idr;
 	struct mutex lock;	/* protect cooling devices list */
 	struct list_head node;
+	struct delayed_work poll_queue;
 #if defined(CONFIG_THERMAL_HWMON)
 	struct list_head hwmon_node;
 	struct thermal_hwmon_device *hwmon;
@@ -120,13 +130,16 @@ struct thermal_zone_device {
 struct thermal_zone_device *thermal_zone_device_register(char *, int, void *,
 							 struct
 							 thermal_zone_device_ops
-							 *);
+							 *, int tc1, int tc2,
+							 int passive_freq,
+							 int polling_freq);
 void thermal_zone_device_unregister(struct thermal_zone_device *);
 
 int thermal_zone_bind_cooling_device(struct thermal_zone_device *, int,
 				     struct thermal_cooling_device *);
 int thermal_zone_unbind_cooling_device(struct thermal_zone_device *, int,
 				       struct thermal_cooling_device *);
+void thermal_zone_device_update(struct thermal_zone_device *);
 struct thermal_cooling_device *thermal_cooling_device_register(char *, void *,
 							       struct
 							       thermal_cooling_device_ops

commit 6503e5df08008b9a47022b5e9ebba658c8fa69af
Author: Matthew Garrett <mjg59@srcf.ucam.org>
Date:   Thu Nov 27 17:48:13 2008 +0000

    thermal: use integers rather than strings for thermal values
    
    The thermal API currently uses strings to pass values to userspace. This
    makes it difficult to use from within the kernel. Change the interface
    to use integers and fix up the consumers.
    
    Signed-off-by: Matthew Garrett <mjg@redhat.com>
    Acked-by: Zhang Rui <rui.zhang@intel.com>
    Acked-by: Thomas Renninger <trenn@suse.de>
    Signed-off-by: Len Brown <len.brown@intel.com>

diff --git a/include/linux/thermal.h b/include/linux/thermal.h
index 917707e6151d..4cb3292fb6e4 100644
--- a/include/linux/thermal.h
+++ b/include/linux/thermal.h
@@ -31,23 +31,39 @@
 struct thermal_zone_device;
 struct thermal_cooling_device;
 
+enum thermal_device_mode {
+	THERMAL_DEVICE_DISABLED = 0,
+	THERMAL_DEVICE_ENABLED,
+};
+
+enum thermal_trip_type {
+	THERMAL_TRIP_ACTIVE = 0,
+	THERMAL_TRIP_PASSIVE,
+	THERMAL_TRIP_HOT,
+	THERMAL_TRIP_CRITICAL,
+};
+
 struct thermal_zone_device_ops {
 	int (*bind) (struct thermal_zone_device *,
 		     struct thermal_cooling_device *);
 	int (*unbind) (struct thermal_zone_device *,
 		       struct thermal_cooling_device *);
-	int (*get_temp) (struct thermal_zone_device *, char *);
-	int (*get_mode) (struct thermal_zone_device *, char *);
-	int (*set_mode) (struct thermal_zone_device *, const char *);
-	int (*get_trip_type) (struct thermal_zone_device *, int, char *);
-	int (*get_trip_temp) (struct thermal_zone_device *, int, char *);
+	int (*get_temp) (struct thermal_zone_device *, unsigned long *);
+	int (*get_mode) (struct thermal_zone_device *,
+			 enum thermal_device_mode *);
+	int (*set_mode) (struct thermal_zone_device *,
+		enum thermal_device_mode);
+	int (*get_trip_type) (struct thermal_zone_device *, int,
+		enum thermal_trip_type *);
+	int (*get_trip_temp) (struct thermal_zone_device *, int,
+			      unsigned long *);
 	int (*get_crit_temp) (struct thermal_zone_device *, unsigned long *);
 };
 
 struct thermal_cooling_device_ops {
-	int (*get_max_state) (struct thermal_cooling_device *, char *);
-	int (*get_cur_state) (struct thermal_cooling_device *, char *);
-	int (*set_cur_state) (struct thermal_cooling_device *, unsigned int);
+	int (*get_max_state) (struct thermal_cooling_device *, unsigned long *);
+	int (*get_cur_state) (struct thermal_cooling_device *, unsigned long *);
+	int (*set_cur_state) (struct thermal_cooling_device *, unsigned long);
 };
 
 #define THERMAL_TRIPS_NONE -1

commit 16d752397301b95abaa95cbaf9e785d221872311
Author: Rene Herman <rene.herman@keyaccess.nl>
Date:   Tue Jun 24 19:38:56 2008 +0200

    thermal: Create CONFIG_THERMAL_HWMON=n
    
    A bug in libsensors <= 2.10.6 is exposed
    when this new hwmon I/F is enabled.
    Create CONFIG_THERMAL_HWMON=n
    until some time after libsensors 2.10.7 ships
    so those users can run the latest kernel.
    
    libsensors 3.x is already fixed -- those users
    can use CONFIG_THERMAL_HWMON=y now.
    
    Signed-off-by: Rene Herman <rene.herman@gmail.com>
    Acked-by: Mark M. Hoffman <mhoffman@lightlink.com>
    Signed-off-by: Len Brown <len.brown@intel.com>

diff --git a/include/linux/thermal.h b/include/linux/thermal.h
index 06d3e6eb9ca8..917707e6151d 100644
--- a/include/linux/thermal.h
+++ b/include/linux/thermal.h
@@ -66,8 +66,7 @@ struct thermal_cooling_device {
 				((long)t-2732+5)/10 : ((long)t-2732-5)/10)
 #define CELSIUS_TO_KELVIN(t)	((t)*10+2732)
 
-#if defined(CONFIG_HWMON) ||	\
-	(defined(CONFIG_HWMON_MODULE) && defined(CONFIG_THERMAL_MODULE))
+#if defined(CONFIG_THERMAL_HWMON)
 /* thermal zone devices with the same type share one hwmon device */
 struct thermal_hwmon_device {
 	char type[THERMAL_NAME_LENGTH];
@@ -94,8 +93,7 @@ struct thermal_zone_device {
 	struct idr idr;
 	struct mutex lock;	/* protect cooling devices list */
 	struct list_head node;
-#if defined(CONFIG_HWMON) ||	\
-	(defined(CONFIG_HWMON_MODULE) && defined(CONFIG_THERMAL_MODULE))
+#if defined(CONFIG_THERMAL_HWMON)
 	struct list_head hwmon_node;
 	struct thermal_hwmon_device *hwmon;
 	struct thermal_hwmon_attr temp_input;	/* hwmon sys attr */

commit e68b16abd91dca91e35ea47537ef8a1b7ad72841
Author: Zhang Rui <rui.zhang@intel.com>
Date:   Mon Apr 21 16:07:52 2008 +0800

    thermal: add hwmon sysfs I/F
    
    Add hwmon sys I/F for generic thermal driver.
    
    Note: we have one hwmon class device for EACH TYPE of the thermal zone device.
    
    Signed-off-by: Zhang Rui <rui.zhang@intel.com>
    Acked-by: Jean Delvare <khali@linux-fr.org>
    Signed-off-by: Len Brown <len.brown@intel.com>

diff --git a/include/linux/thermal.h b/include/linux/thermal.h
index 16e6a8bdeb3c..06d3e6eb9ca8 100644
--- a/include/linux/thermal.h
+++ b/include/linux/thermal.h
@@ -66,6 +66,23 @@ struct thermal_cooling_device {
 				((long)t-2732+5)/10 : ((long)t-2732-5)/10)
 #define CELSIUS_TO_KELVIN(t)	((t)*10+2732)
 
+#if defined(CONFIG_HWMON) ||	\
+	(defined(CONFIG_HWMON_MODULE) && defined(CONFIG_THERMAL_MODULE))
+/* thermal zone devices with the same type share one hwmon device */
+struct thermal_hwmon_device {
+	char type[THERMAL_NAME_LENGTH];
+	struct device *device;
+	int count;
+	struct list_head tz_list;
+	struct list_head node;
+};
+
+struct thermal_hwmon_attr {
+	struct device_attribute attr;
+	char name[16];
+};
+#endif
+
 struct thermal_zone_device {
 	int id;
 	char type[THERMAL_NAME_LENGTH];
@@ -77,6 +94,13 @@ struct thermal_zone_device {
 	struct idr idr;
 	struct mutex lock;	/* protect cooling devices list */
 	struct list_head node;
+#if defined(CONFIG_HWMON) ||	\
+	(defined(CONFIG_HWMON_MODULE) && defined(CONFIG_THERMAL_MODULE))
+	struct list_head hwmon_node;
+	struct thermal_hwmon_device *hwmon;
+	struct thermal_hwmon_attr temp_input;	/* hwmon sys attr */
+	struct thermal_hwmon_attr temp_crit;	/* hwmon sys attr */
+#endif
 };
 
 struct thermal_zone_device *thermal_zone_device_register(char *, int, void *,

commit 9ec732ff80b7e8a9096666f78ae584d3b393bc84
Author: Zhang, Rui <rui.zhang@intel.com>
Date:   Thu Apr 10 16:13:10 2008 +0800

    thermal: add new get_crit_temp callback
    
    Add a new callback so that the generic thermal can get
    the critical trip point info of a thermal zone,
    which is needed for building the tempX_crit hwmon sysfs attribute.
    
    Signed-off-by: Zhang Rui <rui.zhang@intel.com>
    Acked-by: Jean Delvare <khali@linux-fr.org>
    Signed-off-by: Len Brown <len.brown@intel.com>

diff --git a/include/linux/thermal.h b/include/linux/thermal.h
index 3ff680b44e81..16e6a8bdeb3c 100644
--- a/include/linux/thermal.h
+++ b/include/linux/thermal.h
@@ -41,6 +41,7 @@ struct thermal_zone_device_ops {
 	int (*set_mode) (struct thermal_zone_device *, const char *);
 	int (*get_trip_type) (struct thermal_zone_device *, int, char *);
 	int (*get_trip_temp) (struct thermal_zone_device *, int, char *);
+	int (*get_crit_temp) (struct thermal_zone_device *, unsigned long *);
 };
 
 struct thermal_cooling_device_ops {

commit 63c4ec905d63834a97ec7dbbf0a2ec89ef5872be
Author: Zhang Rui <rui.zhang@intel.com>
Date:   Mon Apr 21 16:07:13 2008 +0800

    thermal: add the support for building the generic thermal as a module
    
    Build the generic thermal driver as module "thermal_sys".
    
    Make ACPI thermal, video, processor and fan SELECT the generic
    thermal driver, as these drivers rely on it to build the sysfs I/F.
    
    Signed-off-by: Zhang Rui <rui.zhang@intel.com>
    Acked-by: Jean Delvare <khali@linux-fr.org>
    Signed-off-by: Len Brown <len.brown@intel.com>

diff --git a/include/linux/thermal.h b/include/linux/thermal.h
index 90c1c191ea69..3ff680b44e81 100644
--- a/include/linux/thermal.h
+++ b/include/linux/thermal.h
@@ -88,24 +88,10 @@ int thermal_zone_bind_cooling_device(struct thermal_zone_device *, int,
 				     struct thermal_cooling_device *);
 int thermal_zone_unbind_cooling_device(struct thermal_zone_device *, int,
 				       struct thermal_cooling_device *);
-
-#ifdef	CONFIG_THERMAL
 struct thermal_cooling_device *thermal_cooling_device_register(char *, void *,
 							       struct
 							       thermal_cooling_device_ops
 							       *);
 void thermal_cooling_device_unregister(struct thermal_cooling_device *);
-#else
-static inline struct thermal_cooling_device
-*thermal_cooling_device_register(char *c, void *v,
-				 struct thermal_cooling_device_ops *t)
-{
-	return NULL;
-}
-static inline
-    void thermal_cooling_device_unregister(struct thermal_cooling_device *t)
-{
-};
-#endif
 
 #endif /* __THERMAL_H__ */

commit 5f1a3f2ac4ddf966cd0555dc445c6df65709c580
Author: Krzysztof Helt <krzysztof.h1@wp.pl>
Date:   Tue Apr 15 14:34:47 2008 -0700

    acpi thermal trip points increased to 12
    
    The THERMAL_MAX_TRIPS value is set to 10.  It is too few for the Compaq AP550
    machine which has 12 trip points.
    
    Signed-off-by: Krzysztof Helt <krzysztof.h1@wp.pl>
    Cc: Len Brown <lenb@kernel.org>
    Cc: Zhang Rui <rui.zhang@intel.com>
    Cc: "Rafael J. Wysocki" <rjw@sisk.pl>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

diff --git a/include/linux/thermal.h b/include/linux/thermal.h
index 818ca1cf0b6d..90c1c191ea69 100644
--- a/include/linux/thermal.h
+++ b/include/linux/thermal.h
@@ -50,7 +50,7 @@ struct thermal_cooling_device_ops {
 };
 
 #define THERMAL_TRIPS_NONE -1
-#define THERMAL_MAX_TRIPS 10
+#define THERMAL_MAX_TRIPS 12
 #define THERMAL_NAME_LENGTH 20
 struct thermal_cooling_device {
 	int id;

commit a0dd25b2c83de4623487ca4de9c1d962b552ca0f
Author: Len Brown <len.brown@intel.com>
Date:   Sat Feb 9 04:01:48 2008 -0500

    ACPI: thermal: buildfix for CONFIG_THERMAL=n
    
    This fixes the build, but acpi_fan_add() still needs
    to be updated to handle thermal_cooling_device_register()
    returning NULL as a non-fatal condition.
    
    Signed-off-by: Len Brown <len.brown@intel.com>

diff --git a/include/linux/thermal.h b/include/linux/thermal.h
index bba7712cadc7..818ca1cf0b6d 100644
--- a/include/linux/thermal.h
+++ b/include/linux/thermal.h
@@ -79,7 +79,9 @@ struct thermal_zone_device {
 };
 
 struct thermal_zone_device *thermal_zone_device_register(char *, int, void *,
-					struct thermal_zone_device_ops *);
+							 struct
+							 thermal_zone_device_ops
+							 *);
 void thermal_zone_device_unregister(struct thermal_zone_device *);
 
 int thermal_zone_bind_cooling_device(struct thermal_zone_device *, int,
@@ -87,8 +89,23 @@ int thermal_zone_bind_cooling_device(struct thermal_zone_device *, int,
 int thermal_zone_unbind_cooling_device(struct thermal_zone_device *, int,
 				       struct thermal_cooling_device *);
 
+#ifdef	CONFIG_THERMAL
 struct thermal_cooling_device *thermal_cooling_device_register(char *, void *,
-					struct thermal_cooling_device_ops *);
+							       struct
+							       thermal_cooling_device_ops
+							       *);
 void thermal_cooling_device_unregister(struct thermal_cooling_device *);
+#else
+static inline struct thermal_cooling_device
+*thermal_cooling_device_register(char *c, void *v,
+				 struct thermal_cooling_device_ops *t)
+{
+	return NULL;
+}
+static inline
+    void thermal_cooling_device_unregister(struct thermal_cooling_device *t)
+{
+};
+#endif
 
-#endif				/* __THERMAL_H__ */
+#endif /* __THERMAL_H__ */

commit 041d4bbf128f645fe53bb22309efb9db14dbf5b5
Author: Zhang Rui <rui.zhang@intel.com>
Date:   Thu Jan 17 15:51:19 2008 +0800

    ACPI: CELSIUS_TO_KELVIN fixup
    
    Fix an imprecision in CELSIUS_TO_KELVIN and move these
    two macroes to a proper place.
    
    Signed-off-by: Zhang Rui <rui.zhang@intel.com>
    Signed-off-by: Thomas Sujith <sujith.thomas@intel.com>
    Signed-off-by: Len Brown <len.brown@intel.com>

diff --git a/include/linux/thermal.h b/include/linux/thermal.h
index e4b76c7afb51..bba7712cadc7 100644
--- a/include/linux/thermal.h
+++ b/include/linux/thermal.h
@@ -61,6 +61,10 @@ struct thermal_cooling_device {
 	struct list_head node;
 };
 
+#define KELVIN_TO_CELSIUS(t)	(long)(((long)t-2732 >= 0) ?	\
+				((long)t-2732+5)/10 : ((long)t-2732-5)/10)
+#define CELSIUS_TO_KELVIN(t)	((t)*10+2732)
+
 struct thermal_zone_device {
 	int id;
 	char type[THERMAL_NAME_LENGTH];

commit 203d3d4aa482339b4816f131f713e1b8ee37f6dd
Author: Zhang Rui <rui.zhang@intel.com>
Date:   Thu Jan 17 15:51:08 2008 +0800

    the generic thermal sysfs driver
    
    The Generic Thermal sysfs driver for thermal management.
    
    Signed-off-by: Zhang Rui <rui.zhang@intel.com>
    Signed-off-by: Thomas Sujith <sujith.thomas@intel.com>
    Signed-off-by: Len Brown <len.brown@intel.com>

diff --git a/include/linux/thermal.h b/include/linux/thermal.h
new file mode 100644
index 000000000000..e4b76c7afb51
--- /dev/null
+++ b/include/linux/thermal.h
@@ -0,0 +1,90 @@
+/*
+ *  thermal.h  ($Revision: 0 $)
+ *
+ *  Copyright (C) 2008  Intel Corp
+ *  Copyright (C) 2008  Zhang Rui <rui.zhang@intel.com>
+ *  Copyright (C) 2008  Sujith Thomas <sujith.thomas@intel.com>
+ *
+ * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+ *  This program is free software; you can redistribute it and/or modify
+ *  it under the terms of the GNU General Public License as published by
+ *  the Free Software Foundation; version 2 of the License.
+ *
+ *  This program is distributed in the hope that it will be useful, but
+ *  WITHOUT ANY WARRANTY; without even the implied warranty of
+ *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ *  General Public License for more details.
+ *
+ *  You should have received a copy of the GNU General Public License along
+ *  with this program; if not, write to the Free Software Foundation, Inc.,
+ *  59 Temple Place, Suite 330, Boston, MA 02111-1307 USA.
+ *
+ * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+ */
+
+#ifndef __THERMAL_H__
+#define __THERMAL_H__
+
+#include <linux/idr.h>
+#include <linux/device.h>
+
+struct thermal_zone_device;
+struct thermal_cooling_device;
+
+struct thermal_zone_device_ops {
+	int (*bind) (struct thermal_zone_device *,
+		     struct thermal_cooling_device *);
+	int (*unbind) (struct thermal_zone_device *,
+		       struct thermal_cooling_device *);
+	int (*get_temp) (struct thermal_zone_device *, char *);
+	int (*get_mode) (struct thermal_zone_device *, char *);
+	int (*set_mode) (struct thermal_zone_device *, const char *);
+	int (*get_trip_type) (struct thermal_zone_device *, int, char *);
+	int (*get_trip_temp) (struct thermal_zone_device *, int, char *);
+};
+
+struct thermal_cooling_device_ops {
+	int (*get_max_state) (struct thermal_cooling_device *, char *);
+	int (*get_cur_state) (struct thermal_cooling_device *, char *);
+	int (*set_cur_state) (struct thermal_cooling_device *, unsigned int);
+};
+
+#define THERMAL_TRIPS_NONE -1
+#define THERMAL_MAX_TRIPS 10
+#define THERMAL_NAME_LENGTH 20
+struct thermal_cooling_device {
+	int id;
+	char type[THERMAL_NAME_LENGTH];
+	struct device device;
+	void *devdata;
+	struct thermal_cooling_device_ops *ops;
+	struct list_head node;
+};
+
+struct thermal_zone_device {
+	int id;
+	char type[THERMAL_NAME_LENGTH];
+	struct device device;
+	void *devdata;
+	int trips;
+	struct thermal_zone_device_ops *ops;
+	struct list_head cooling_devices;
+	struct idr idr;
+	struct mutex lock;	/* protect cooling devices list */
+	struct list_head node;
+};
+
+struct thermal_zone_device *thermal_zone_device_register(char *, int, void *,
+					struct thermal_zone_device_ops *);
+void thermal_zone_device_unregister(struct thermal_zone_device *);
+
+int thermal_zone_bind_cooling_device(struct thermal_zone_device *, int,
+				     struct thermal_cooling_device *);
+int thermal_zone_unbind_cooling_device(struct thermal_zone_device *, int,
+				       struct thermal_cooling_device *);
+
+struct thermal_cooling_device *thermal_cooling_device_register(char *, void *,
+					struct thermal_cooling_device_ops *);
+void thermal_cooling_device_unregister(struct thermal_cooling_device *);
+
+#endif				/* __THERMAL_H__ */
