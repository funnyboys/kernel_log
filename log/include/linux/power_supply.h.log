commit 601c2a543f02da484362b3ff9074b2cfe08750de
Author: Sebastian Reichel <sebastian.reichel@collabora.com>
Date:   Wed May 13 20:56:00 2020 +0200

    power: supply: core: add POWER_SUPPLY_HEALTH_CALIBRATION_REQUIRED
    
    Some battery fuel gauges know when the battery needs to
    be recalibrated before providing usable values. This
    should be reported via the health property.
    
    Signed-off-by: Sebastian Reichel <sebastian.reichel@collabora.com>

diff --git a/include/linux/power_supply.h b/include/linux/power_supply.h
index 63ffe2a0a87b..ac1345a48ad0 100644
--- a/include/linux/power_supply.h
+++ b/include/linux/power_supply.h
@@ -61,6 +61,7 @@ enum {
 	POWER_SUPPLY_HEALTH_WATCHDOG_TIMER_EXPIRE,
 	POWER_SUPPLY_HEALTH_SAFETY_TIMER_EXPIRE,
 	POWER_SUPPLY_HEALTH_OVERCURRENT,
+	POWER_SUPPLY_HEALTH_CALIBRATION_REQUIRED,
 };
 
 enum {

commit feabe49e46bb556b8d43e28d4a0d459940f7a5cb
Author: Sebastian Reichel <sebastian.reichel@collabora.com>
Date:   Wed May 13 20:55:59 2020 +0200

    power: supply: core: add manufacture date properties
    
    Some smart batteries store their manufacture date, which is
    useful to identify the battery and/or to know about the cell
    quality.
    
    Signed-off-by: Sebastian Reichel <sebastian.reichel@collabora.com>

diff --git a/include/linux/power_supply.h b/include/linux/power_supply.h
index 453a85f25635..63ffe2a0a87b 100644
--- a/include/linux/power_supply.h
+++ b/include/linux/power_supply.h
@@ -159,6 +159,9 @@ enum power_supply_property {
 	POWER_SUPPLY_PROP_PRECHARGE_CURRENT,
 	POWER_SUPPLY_PROP_CHARGE_TERM_CURRENT,
 	POWER_SUPPLY_PROP_CALIBRATE,
+	POWER_SUPPLY_PROP_MANUFACTURE_YEAR,
+	POWER_SUPPLY_PROP_MANUFACTURE_MONTH,
+	POWER_SUPPLY_PROP_MANUFACTURE_DAY,
 	/* Properties of type `const char *' */
 	POWER_SUPPLY_PROP_MODEL_NAME,
 	POWER_SUPPLY_PROP_MANUFACTURER,

commit bac705abcf345c28e419157cfcd1c44032cc9db2
Author: Sebastian Reichel <sebastian.reichel@collabora.com>
Date:   Wed May 13 20:55:58 2020 +0200

    power: supply: core: add capacity error margin property
    
    Add a property for reporting the error margin expected
    by fuel gauge chips.
    
    Signed-off-by: Sebastian Reichel <sebastian.reichel@collabora.com>

diff --git a/include/linux/power_supply.h b/include/linux/power_supply.h
index 1f60731ec7fe..453a85f25635 100644
--- a/include/linux/power_supply.h
+++ b/include/linux/power_supply.h
@@ -139,6 +139,7 @@ enum power_supply_property {
 	POWER_SUPPLY_PROP_CAPACITY, /* in percents! */
 	POWER_SUPPLY_PROP_CAPACITY_ALERT_MIN, /* in percents! */
 	POWER_SUPPLY_PROP_CAPACITY_ALERT_MAX, /* in percents! */
+	POWER_SUPPLY_PROP_CAPACITY_ERROR_MARGIN, /* in percents! */
 	POWER_SUPPLY_PROP_CAPACITY_LEVEL,
 	POWER_SUPPLY_PROP_TEMP,
 	POWER_SUPPLY_PROP_TEMP_MAX,

commit 5a63b7ba50fd6b7a897bf9353dbf31d579cfe116
Author: Matti Vaittinen <matti.vaittinen@fi.rohmeurope.com>
Date:   Fri May 8 18:47:20 2020 +0300

    power: supply: add battery parameters
    
    Add parsing of new device-tree battery bindings.
    
         - trickle-charge-current-microamp
         - precharge-upper-limit-microvolt
         - re-charge-voltage-microvolt
         - over-voltage-threshold-microvolt
    
    Signed-off-by: Matti Vaittinen <matti.vaittinen@fi.rohmeurope.com>
    Signed-off-by: Sebastian Reichel <sebastian.reichel@collabora.com>

diff --git a/include/linux/power_supply.h b/include/linux/power_supply.h
index 6a34df65d4d1..1f60731ec7fe 100644
--- a/include/linux/power_supply.h
+++ b/include/linux/power_supply.h
@@ -346,8 +346,12 @@ struct power_supply_battery_info {
 	int charge_full_design_uah;	    /* microAmp-hours */
 	int voltage_min_design_uv;	    /* microVolts */
 	int voltage_max_design_uv;	    /* microVolts */
+	int tricklecharge_current_ua;	    /* microAmps */
 	int precharge_current_ua;	    /* microAmps */
+	int precharge_voltage_max_uv;	    /* microVolts */
 	int charge_term_current_ua;	    /* microAmps */
+	int charge_restart_voltage_uv;	    /* microVolts */
+	int overvoltage_limit_uv;	    /* microVolts */
 	int constant_charge_current_max_ua; /* microAmps */
 	int constant_charge_voltage_max_uv; /* microVolts */
 	int factory_internal_resistance_uohm;   /* microOhms */

commit 9ba2353b2cc58ba13f7a7369208107f133f6a27b
Author: Michał Mirosław <mirq-linux@rere.qmqm.pl>
Date:   Fri Apr 3 22:20:32 2020 +0200

    power: supply: core: allow to constify property lists
    
    Since tables pointed to by power_supply_desc->properties and
    ->usb_types are not expected to change after registration, mark
    the pointers accordingly
    
    Signed-off-by: Michał Mirosław <mirq-linux@rere.qmqm.pl>
    Signed-off-by: Sebastian Reichel <sebastian.reichel@collabora.com>

diff --git a/include/linux/power_supply.h b/include/linux/power_supply.h
index dcd5a71e6c67..6a34df65d4d1 100644
--- a/include/linux/power_supply.h
+++ b/include/linux/power_supply.h
@@ -223,9 +223,9 @@ struct power_supply_config {
 struct power_supply_desc {
 	const char *name;
 	enum power_supply_type type;
-	enum power_supply_usb_type *usb_types;
+	const enum power_supply_usb_type *usb_types;
 	size_t num_usb_types;
-	enum power_supply_property *properties;
+	const enum power_supply_property *properties;
 	size_t num_properties;
 
 	/*

commit 65dbad713d5d6a8581921804ae3f5eb4a9bf032e
Author: Baolin Wang <baolin.wang@linaro.org>
Date:   Mon Dec 9 11:56:22 2019 +0800

    power: supply: core: Add battery internal resistance temperature table support
    
    Since the battery internal resistance can be changed with the temperature
    changes, thus add a resistance temperature table support to look up
    the accurate battery internal resistance in a certain temperature.
    
    Signed-off-by: Baolin Wang <baolin.wang@linaro.org>
    Signed-off-by: Baolin Wang <baolin.wang7@gmail.com>
    Signed-off-by: Sebastian Reichel <sebastian.reichel@collabora.com>

diff --git a/include/linux/power_supply.h b/include/linux/power_supply.h
index 28413f737e7d..dcd5a71e6c67 100644
--- a/include/linux/power_supply.h
+++ b/include/linux/power_supply.h
@@ -325,6 +325,11 @@ struct power_supply_battery_ocv_table {
 	int capacity;	/* percent */
 };
 
+struct power_supply_resistance_temp_table {
+	int temp;	/* celsius */
+	int resistance;	/* internal resistance percent */
+};
+
 #define POWER_SUPPLY_OCV_TEMP_MAX 20
 
 /*
@@ -349,6 +354,8 @@ struct power_supply_battery_info {
 	int ocv_temp[POWER_SUPPLY_OCV_TEMP_MAX];/* celsius */
 	struct power_supply_battery_ocv_table *ocv_table[POWER_SUPPLY_OCV_TEMP_MAX];
 	int ocv_table_size[POWER_SUPPLY_OCV_TEMP_MAX];
+	struct power_supply_resistance_temp_table *resist_table;
+	int resist_table_size;
 };
 
 extern struct atomic_notifier_head power_supply_notifier;
@@ -381,6 +388,9 @@ power_supply_find_ocv2cap_table(struct power_supply_battery_info *info,
 				int temp, int *table_len);
 extern int power_supply_batinfo_ocv2cap(struct power_supply_battery_info *info,
 					int ocv, int temp);
+extern int
+power_supply_temp2resist_simple(struct power_supply_resistance_temp_table *table,
+				int table_len, int temp);
 extern void power_supply_changed(struct power_supply *psy);
 extern int power_supply_am_i_supplied(struct power_supply *psy);
 extern int power_supply_set_input_current_limit_from_supplier(

commit 5fe7b600a116187e10317d83fb56922c4ef6b76d
Merge: fb4da215ed92 caa2b557841c
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Mon Jul 15 21:06:15 2019 -0700

    Merge tag 'for-v5.3' of git://git.kernel.org/pub/scm/linux/kernel/git/sre/linux-power-supply
    
    Pull power supply and reset updates from Sebastian Reichel:
     "Core:
       - add HWMON compat layer
       - new properties:
           - input power limit
           - input voltage limit
    
      Drivers:
       - qcom-pon: add gen2 support
       - new driver for storing reboot move in NVMEM
       - new driver for Wilco EC charger configuration
       - simplify getting the adapter of a client"
    
    * tag 'for-v5.3' of git://git.kernel.org/pub/scm/linux/kernel/git/sre/linux-power-supply:
      power: reset: nvmem-reboot-mode: add CONFIG_OF dependency
      power_supply: wilco_ec: Add charging config driver
      power: supply: cros: allow to set input voltage and current limit
      power: supply: add input power and voltage limit properties
      power: supply: fix semicolon.cocci warnings
      power: reset: nvmem-reboot-mode: use NVMEM as reboot mode write interface
      dt-bindings: power: reset: add document for NVMEM based reboot-mode
      reset: qcom-pon: Add support for gen2 pon
      dt-bindings: power: reset: qcom: Add qcom,pm8998-pon compatibility line
      power: supply: Add HWMON compatibility layer
      power: supply: sbs-manager: simplify getting the adapter of a client
      power: supply: rt9455_charger: simplify getting the adapter of a client
      power: supply: rt5033_battery: simplify getting the adapter of a client
      power: supply: max17042_battery: simplify getting the adapter of a client
      power: supply: max17040_battery: simplify getting the adapter of a client
      power: supply: max14656_charger_detector: simplify getting the adapter of a client
      power: supply: bq25890_charger: simplify getting the adapter of a client
      power: supply: bq24257_charger: simplify getting the adapter of a client
      power: supply: bq24190_charger: simplify getting the adapter of a client

commit a4496d52b3430cb3c4c16d03cdd5f4ee97ad1241
Author: Enric Balletbo i Serra <enric.balletbo@collabora.com>
Date:   Tue May 7 11:52:47 2019 +0200

    power: supply: add input power and voltage limit properties
    
    For thermal management strategy you might be interested on limit the
    input power for a power supply. We already have current limit but
    basically what we probably want is to limit power. So, introduce the
    input_power_limit property.
    
    Although the common use case is limit the input power, in some
    specific cases it is the voltage that is problematic (i.e some regulators
    have different efficiencies at higher voltage resulting in more heat).
    So introduce also the input_voltage_limit property.
    
    This happens in one Chromebook and is used on the Pixel C's thermal
    management strategy to effectively limit the input power to 5V 3A when
    the screen is on. When the screen is on, the display, the CPU, and the GPU
    all contribute more heat to the system than while the screen is off, and
    we made a tradeoff to throttle the charger in order to give more of the
    thermal budget to those other components.
    
    So there's nothing fundamentally broken about the hardware that would
    cause the Pixel C to malfunction if we were charging at 9V or 12V instead
    of 5V when the screen is on, i.e. if userspace doesn't change this.
    
    What would happen is that you wouldn't meet Google's skin temperature
    targets on the system if the charger was allowed to run at 9V or 12V with
    the screen on.
    
    For folks hacking on Pixel Cs (which is now outside of Google's official
    support window for Android) and customizing their own kernel and userspace
    this would be acceptable, but we wanted to expose this feature in the
    power supply properties because the feature does exist in the Emedded
    Controller firmware of the Pixel C and all of Google's Chromebooks with
    USB-C made since 2015 in case someone running an up to date kernel wanted
    to limit the charging power for thermal or other reasons.
    
    This patch exposes a new property, similar to input current limit, to
    re-configure the maximum voltage from the external supply at runtime
    based on system-level knowledge or user input.
    
    Signed-off-by: Enric Balletbo i Serra <enric.balletbo@collabora.com>
    Reviewed-by: Guenter Roeck <groeck@chromium.org>
    Acked-by: Adam Thomson <Adam.Thomson.Opensource@diasemi.com>
    Reviewed-by: Benson Leung <bleung@chromium.org>
    Signed-off-by: Sebastian Reichel <sebastian.reichel@collabora.com>

diff --git a/include/linux/power_supply.h b/include/linux/power_supply.h
index d5b15e039f4f..cbb708b57b11 100644
--- a/include/linux/power_supply.h
+++ b/include/linux/power_supply.h
@@ -129,6 +129,8 @@ enum power_supply_property {
 	POWER_SUPPLY_PROP_CHARGE_CONTROL_START_THRESHOLD, /* in percents! */
 	POWER_SUPPLY_PROP_CHARGE_CONTROL_END_THRESHOLD, /* in percents! */
 	POWER_SUPPLY_PROP_INPUT_CURRENT_LIMIT,
+	POWER_SUPPLY_PROP_INPUT_VOLTAGE_LIMIT,
+	POWER_SUPPLY_PROP_INPUT_POWER_LIMIT,
 	POWER_SUPPLY_PROP_ENERGY_FULL_DESIGN,
 	POWER_SUPPLY_PROP_ENERGY_EMPTY_DESIGN,
 	POWER_SUPPLY_PROP_ENERGY_FULL,

commit e67d4dfc9ff19dbe74b29617cf2592ccc50c3920
Author: Andrey Smirnov <andrew.smirnov@gmail.com>
Date:   Wed Jun 12 01:44:04 2019 -0700

    power: supply: Add HWMON compatibility layer
    
    Add code implementing HWMON adapter/compatibility layer to allow
    expositing various sensors present on power supply devices via HWMON
    subsystem. This is done in order to allow userspace to use single
    ABI/library(libsensors) to access/manipulate all of the sensors of the
    system.
    
    Signed-off-by: Andrey Smirnov <andrew.smirnov@gmail.com>
    Reviewed-by: Guenter Roeck <linux@roeck-us.net>
    Tested-by: Chris Healy <cphealy@gmail.com>
    Cc: Chris Healy <cphealy@gmail.com>
    Cc: Cory Tusar <cory.tusar@zii.aero>
    Cc: Lucas Stach <l.stach@pengutronix.de>
    Cc: Fabio Estevam <fabio.estevam@nxp.com>
    Cc: Guenter Roeck <linux@roeck-us.net>
    Cc: Sebastian Reichel <sre@kernel.org>
    Cc: linux-kernel@vger.kernel.org
    Cc: linux-pm@vger.kernel.org
    Signed-off-by: Sebastian Reichel <sebastian.reichel@collabora.com>

diff --git a/include/linux/power_supply.h b/include/linux/power_supply.h
index d9c0c094f8a0..d5b15e039f4f 100644
--- a/include/linux/power_supply.h
+++ b/include/linux/power_supply.h
@@ -481,4 +481,17 @@ static inline bool power_supply_is_watt_property(enum power_supply_property psp)
 	return 0;
 }
 
+#ifdef CONFIG_POWER_SUPPLY_HWMON
+int power_supply_add_hwmon_sysfs(struct power_supply *psy);
+void power_supply_remove_hwmon_sysfs(struct power_supply *psy);
+#else
+static inline int power_supply_add_hwmon_sysfs(struct power_supply *psy)
+{
+	return 0;
+}
+
+static inline
+void power_supply_remove_hwmon_sysfs(struct power_supply *psy) {}
+#endif
+
 #endif /* __LINUX_POWER_SUPPLY_H__ */

commit a63a5fa97e86909c3b1c96d1ed09d91aacd76c8c
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Tue May 28 10:10:21 2019 -0700

    treewide: Replace GPLv2 boilerplate/reference with SPDX - rule 218
    
    Based on 1 normalized pattern(s):
    
      you may use this code as per gpl version 2
    
    extracted by the scancode license scanner the SPDX license identifier
    
      GPL-2.0-only
    
    has been chosen to replace the boilerplate/reference in 5 file(s).
    
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Reviewed-by: Steve Winslow <swinslow@gmail.com>
    Reviewed-by: Alexios Zavras <alexios.zavras@intel.com>
    Reviewed-by: Allison Randal <allison@lohutok.net>
    Cc: linux-spdx@vger.kernel.org
    Link: https://lkml.kernel.org/r/20190528171439.762454146@linutronix.de
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/include/linux/power_supply.h b/include/linux/power_supply.h
index d9c0c094f8a0..6f348b3ee2e0 100644
--- a/include/linux/power_supply.h
+++ b/include/linux/power_supply.h
@@ -1,3 +1,4 @@
+/* SPDX-License-Identifier: GPL-2.0-only */
 /*
  *  Universal power supply monitor class
  *
@@ -6,8 +7,6 @@
  *  Copyright © 2003  Ian Molton <spyro@f2s.com>
  *
  *  Modified: 2004, Oct     Szabolcs Gyurko
- *
- *  You may use this code as per GPL version 2
  */
 
 #ifndef __LINUX_POWER_SUPPLY_H__

commit e3e83cc601e57aeeea212e1cc37ff9a7ad584aae
Author: Andrey Smirnov <andrew.smirnov@gmail.com>
Date:   Fri May 3 10:00:40 2019 -0700

    power: supply: core: Add POWER_SUPPLY_HEALTH_OVERCURRENT constant
    
    Add POWER_SUPPLY_HEALTH_OVERCURRENT constant in order to allow
    singalling overcurrent condition via power supply health information.
    
    Signed-off-by: Andrey Smirnov <andrew.smirnov@gmail.com>
    Reviewed-by: Guenter Roeck <linux@roeck-us.net>
    Cc: Enric Balletbo Serra <enric.balletbo@collabora.com>
    Cc: Chris Healy <cphealy@gmail.com>
    Cc: Lucas Stach <l.stach@pengutronix.de>
    Cc: Fabio Estevam <festevam@gmail.com>
    Cc: Guenter Roeck <linux@roeck-us.net>
    Cc: linux-kernel@vger.kernel.org
    Cc: linux-pm@vger.kernel.org
    Signed-off-by: Sebastian Reichel <sebastian.reichel@collabora.com>

diff --git a/include/linux/power_supply.h b/include/linux/power_supply.h
index d59205170232..d9c0c094f8a0 100644
--- a/include/linux/power_supply.h
+++ b/include/linux/power_supply.h
@@ -61,6 +61,7 @@ enum {
 	POWER_SUPPLY_HEALTH_COLD,
 	POWER_SUPPLY_HEALTH_WATCHDOG_TIMER_EXPIRE,
 	POWER_SUPPLY_HEALTH_SAFETY_TIMER_EXPIRE,
+	POWER_SUPPLY_HEALTH_OVERCURRENT,
 };
 
 enum {

commit 813cab8f3994250e136819ae48fbd1c95d980466
Author: Nick Crews <ncrews@chromium.org>
Date:   Thu Apr 18 10:43:13 2019 -0600

    power: supply: core: Add CHARGE_CONTROL_{START_THRESHOLD,END_THRESHOLD} properties
    
    Add POWER_SUPPLY_PROP_CHARGE_CONTROL_START_THRESHOLD
    and POWER_SUPPLY_PROP_CHARGE_CONTROL_END_THRESHOLD properties, to expand
    the existing CHARGE_CONTROL_* properties. I am adding them in order
    to support a new Chrome OS device, but these properties should be
    general enough that they can be used on other devices.
    
    When the charge_type is "Custom", the charge controller uses the
    POWER_SUPPLY_PROP_CHARGE_CONTROL_* properties as configuration for some
    other algorithm. For example, in the use case that I am supporting,
    this means the battery begins charging when the percentage
    level drops below POWER_SUPPLY_PROP_CHARGE_CONTROL_START_THRESHOLD and
    charging ceases when the percentage level goes above
    POWER_SUPPLY_PROP_CHARGE_CONTROL_END_THRESHOLD.
    
    v5 changes:
    - Add the other missing CHARGE_CONTROL_* properties documentation in
      a separate commit
    - Split up adding the charge types and adding the
      POWER_SUPPLY_PROP_CHARGE_CONTROL_START_THRESHOLD and
      POWER_SUPPLY_PROP_CHARGE_CONTROL_END_THRESHOLD properties into
      two different commits.
    v4 changes:
    - Add documentation for the new properties, and add documentation for
      the the previously missing charge_control_limit and
      charge_control_limit_max properties.
    
    Signed-off-by: Nick Crews <ncrews@chromium.org>
    Reviewed-by: Enric Balletbo i Serra <enric.balletbo@collabora.com>
    Signed-off-by: Sebastian Reichel <sebastian.reichel@collabora.com>

diff --git a/include/linux/power_supply.h b/include/linux/power_supply.h
index e86e05d8134d..d59205170232 100644
--- a/include/linux/power_supply.h
+++ b/include/linux/power_supply.h
@@ -125,6 +125,8 @@ enum power_supply_property {
 	POWER_SUPPLY_PROP_CONSTANT_CHARGE_VOLTAGE_MAX,
 	POWER_SUPPLY_PROP_CHARGE_CONTROL_LIMIT,
 	POWER_SUPPLY_PROP_CHARGE_CONTROL_LIMIT_MAX,
+	POWER_SUPPLY_PROP_CHARGE_CONTROL_START_THRESHOLD, /* in percents! */
+	POWER_SUPPLY_PROP_CHARGE_CONTROL_END_THRESHOLD, /* in percents! */
 	POWER_SUPPLY_PROP_INPUT_CURRENT_LIMIT,
 	POWER_SUPPLY_PROP_ENERGY_FULL_DESIGN,
 	POWER_SUPPLY_PROP_ENERGY_EMPTY_DESIGN,

commit ba6cc85084178e5bce50f6a00411e457c21c47df
Author: Nick Crews <ncrews@chromium.org>
Date:   Thu Apr 18 10:43:12 2019 -0600

    power: supply: core: Add Standard, Adaptive, and Custom charge types
    
    Add "Standard", "Adaptive", and "Custom" modes to the charge_type
    property, to expand the existing "Trickle" and "Fast" modes.
    I am adding them in order to support a new Chrome OS device,
    but these properties should be general enough that they can be
    used on other devices.
    
    The meaning of "Standard" is obvious, but "Adaptive" and "Custom" are
    more tricky: "Adaptive" means that the charge controller uses some
    custom algorithm to change the charge type automatically, with no
    configuration needed. "Custom" means that the charge controller uses the
    POWER_SUPPLY_PROP_CHARGE_CONTROL_* properties as configuration for some
    other algorithm.
    
    v5 changes:
    - Split up adding the charge types and adding the
      POWER_SUPPLY_PROP_CHARGE_CONTROL_START_THRESHOLD and
      POWER_SUPPLY_PROP_CHARGE_CONTROL_END_THRESHOLD properties into
      two different commits.
    v4 changes:
    - Add documentation for the new properties, and add documentation for
      the the previously missing charge_control_limit and
      charge_control_limit_max properties.
    
    Signed-off-by: Nick Crews <ncrews@chromium.org>
    Reviewed-by: Enric Balletbo i Serra <enric.balletbo@collabora.com>
    Signed-off-by: Sebastian Reichel <sebastian.reichel@collabora.com>

diff --git a/include/linux/power_supply.h b/include/linux/power_supply.h
index 2f9c201a54d1..e86e05d8134d 100644
--- a/include/linux/power_supply.h
+++ b/include/linux/power_supply.h
@@ -40,11 +40,15 @@ enum {
 	POWER_SUPPLY_STATUS_FULL,
 };
 
+/* What algorithm is the charger using? */
 enum {
 	POWER_SUPPLY_CHARGE_TYPE_UNKNOWN = 0,
 	POWER_SUPPLY_CHARGE_TYPE_NONE,
-	POWER_SUPPLY_CHARGE_TYPE_TRICKLE,
-	POWER_SUPPLY_CHARGE_TYPE_FAST,
+	POWER_SUPPLY_CHARGE_TYPE_TRICKLE,	/* slow speed */
+	POWER_SUPPLY_CHARGE_TYPE_FAST,		/* fast speed */
+	POWER_SUPPLY_CHARGE_TYPE_STANDARD,	/* normal speed */
+	POWER_SUPPLY_CHARGE_TYPE_ADAPTIVE,	/* dynamically adjusted speed */
+	POWER_SUPPLY_CHARGE_TYPE_CUSTOM,	/* use CHARGE_CONTROL_* props */
 };
 
 enum {

commit 04fb53101edef67517f2d5dc00c1a5eb707fe101
Author: Artur Rojek <contact@artur-rojek.eu>
Date:   Sun Feb 17 15:29:11 2019 +0100

    power: supply: core: Add a field to support battery max voltage
    
    Add a field for "voltage_max_design_uv" to present fully charged
    battery voltage.
    
    Signed-off-by: Artur Rojek <contact@artur-rojek.eu>
    Signed-off-by: Sebastian Reichel <sebastian.reichel@collabora.com>

diff --git a/include/linux/power_supply.h b/include/linux/power_supply.h
index 57b2ab82b951..2f9c201a54d1 100644
--- a/include/linux/power_supply.h
+++ b/include/linux/power_supply.h
@@ -332,6 +332,7 @@ struct power_supply_battery_info {
 	int energy_full_design_uwh;	    /* microWatt-hours */
 	int charge_full_design_uah;	    /* microAmp-hours */
 	int voltage_min_design_uv;	    /* microVolts */
+	int voltage_max_design_uv;	    /* microVolts */
 	int precharge_current_ua;	    /* microAmps */
 	int charge_term_current_ua;	    /* microAmps */
 	int constant_charge_current_max_ua; /* microAmps */

commit cef8fe6a382cb556b590269e9d1dfc0241014903
Author: Sebastian Reichel <sebastian.reichel@collabora.com>
Date:   Thu Sep 27 15:46:03 2018 +0200

    power: supply: core: add support for custom sysfs attributes
    
    Add functionality to setup device specific sysfs attributes
    in a race condition free manner
    
    Signed-off-by: Sebastian Reichel <sebastian.reichel@collabora.com>

diff --git a/include/linux/power_supply.h b/include/linux/power_supply.h
index 84fe93f674a0..57b2ab82b951 100644
--- a/include/linux/power_supply.h
+++ b/include/linux/power_supply.h
@@ -204,6 +204,9 @@ struct power_supply_config {
 	/* Driver private data */
 	void *drv_data;
 
+	/* Device specific sysfs attributes */
+	const struct attribute_group **attr_grp;
+
 	char **supplied_to;
 	size_t num_supplicants;
 };

commit 3afb50d7125bcdbf71df843134e96ceffc78c8b8
Author: Baolin Wang <baolin.wang@linaro.org>
Date:   Mon Nov 5 15:39:09 2018 +0800

    power: supply: core: Add some helpers to use the battery OCV capacity table
    
    We have introduced some battery properties to present the OCV table
    temperatures and OCV capacity table values. Thus this patch add OCV
    temperature and OCV table for battery information, as well as providing
    some helper functions to use the OCV capacity table for users.
    
    Signed-off-by: Baolin Wang <baolin.wang@linaro.org>
    Reviewed-by: Linus Walleij <linus.walleij@linaro.org>
    Signed-off-by: Sebastian Reichel <sebastian.reichel@collabora.com>

diff --git a/include/linux/power_supply.h b/include/linux/power_supply.h
index d089566828be..84fe93f674a0 100644
--- a/include/linux/power_supply.h
+++ b/include/linux/power_supply.h
@@ -309,6 +309,13 @@ struct power_supply_info {
 	int use_for_apm;
 };
 
+struct power_supply_battery_ocv_table {
+	int ocv;	/* microVolts */
+	int capacity;	/* percent */
+};
+
+#define POWER_SUPPLY_OCV_TEMP_MAX 20
+
 /*
  * This is the recommended struct to manage static battery parameters,
  * populated by power_supply_get_battery_info(). Most platform drivers should
@@ -327,6 +334,9 @@ struct power_supply_battery_info {
 	int constant_charge_current_max_ua; /* microAmps */
 	int constant_charge_voltage_max_uv; /* microVolts */
 	int factory_internal_resistance_uohm;   /* microOhms */
+	int ocv_temp[POWER_SUPPLY_OCV_TEMP_MAX];/* celsius */
+	struct power_supply_battery_ocv_table *ocv_table[POWER_SUPPLY_OCV_TEMP_MAX];
+	int ocv_table_size[POWER_SUPPLY_OCV_TEMP_MAX];
 };
 
 extern struct atomic_notifier_head power_supply_notifier;
@@ -350,6 +360,15 @@ devm_power_supply_get_by_phandle(struct device *dev, const char *property)
 
 extern int power_supply_get_battery_info(struct power_supply *psy,
 					 struct power_supply_battery_info *info);
+extern void power_supply_put_battery_info(struct power_supply *psy,
+					  struct power_supply_battery_info *info);
+extern int power_supply_ocv2cap_simple(struct power_supply_battery_ocv_table *table,
+				       int table_len, int ocv);
+extern struct power_supply_battery_ocv_table *
+power_supply_find_ocv2cap_table(struct power_supply_battery_info *info,
+				int temp, int *table_len);
+extern int power_supply_batinfo_ocv2cap(struct power_supply_battery_info *info,
+					int ocv, int temp);
 extern void power_supply_changed(struct power_supply *psy);
 extern int power_supply_am_i_supplied(struct power_supply *psy);
 extern int power_supply_set_input_current_limit_from_supplier(

commit 86131d933f9a9502d877fb37b90a856e6a8a7ed8
Author: Baolin Wang <baolin.wang@linaro.org>
Date:   Mon Nov 5 15:39:07 2018 +0800

    power: supply: core: Add one field to present the battery internal resistance
    
    Add one field for 'struct power_supply_battery_info' to present the battery
    factory internal resistance.
    
    Signed-off-by: Baolin Wang <baolin.wang@linaro.org>
    Reviewed-by: Linus Walleij <linus.walleij@linaro.org>
    Signed-off-by: Sebastian Reichel <sebastian.reichel@collabora.com>

diff --git a/include/linux/power_supply.h b/include/linux/power_supply.h
index f80769175c56..d089566828be 100644
--- a/include/linux/power_supply.h
+++ b/include/linux/power_supply.h
@@ -326,6 +326,7 @@ struct power_supply_battery_info {
 	int charge_term_current_ua;	    /* microAmps */
 	int constant_charge_current_max_ua; /* microAmps */
 	int constant_charge_voltage_max_uv; /* microVolts */
+	int factory_internal_resistance_uohm;   /* microOhms */
 };
 
 extern struct atomic_notifier_head power_supply_notifier;

commit 3ffa6583e24e1ad1abab836d24bfc9d2308074e5
Author: Benjamin Tissoires <benjamin.tissoires@redhat.com>
Date:   Mon Jun 25 09:51:48 2018 +0200

    power: remove possible deadlock when unregistering power_supply
    
    If a device gets removed right after having registered a power_supply node,
    we might enter in a deadlock between the remove call (that has a lock on
    the parent device) and the deferred register work.
    
    Allow the deferred register work to exit without taking the lock when
    we are in the remove state.
    
    Stack trace on a Ubuntu 16.04:
    
    [16072.109121] INFO: task kworker/u16:2:1180 blocked for more than 120 seconds.
    [16072.109127]       Not tainted 4.13.0-41-generic #46~16.04.1-Ubuntu
    [16072.109129] "echo 0 > /proc/sys/kernel/hung_task_timeout_secs" disables this message.
    [16072.109132] kworker/u16:2   D    0  1180      2 0x80000000
    [16072.109142] Workqueue: events_power_efficient power_supply_deferred_register_work
    [16072.109144] Call Trace:
    [16072.109152]  __schedule+0x3d6/0x8b0
    [16072.109155]  schedule+0x36/0x80
    [16072.109158]  schedule_preempt_disabled+0xe/0x10
    [16072.109161]  __mutex_lock.isra.2+0x2ab/0x4e0
    [16072.109166]  __mutex_lock_slowpath+0x13/0x20
    [16072.109168]  ? __mutex_lock_slowpath+0x13/0x20
    [16072.109171]  mutex_lock+0x2f/0x40
    [16072.109174]  power_supply_deferred_register_work+0x2b/0x50
    [16072.109179]  process_one_work+0x15b/0x410
    [16072.109182]  worker_thread+0x4b/0x460
    [16072.109186]  kthread+0x10c/0x140
    [16072.109189]  ? process_one_work+0x410/0x410
    [16072.109191]  ? kthread_create_on_node+0x70/0x70
    [16072.109194]  ret_from_fork+0x35/0x40
    [16072.109199] INFO: task test:2257 blocked for more than 120 seconds.
    [16072.109202]       Not tainted 4.13.0-41-generic #46~16.04.1-Ubuntu
    [16072.109204] "echo 0 > /proc/sys/kernel/hung_task_timeout_secs" disables this message.
    [16072.109206] test            D    0  2257   2256 0x00000004
    [16072.109208] Call Trace:
    [16072.109211]  __schedule+0x3d6/0x8b0
    [16072.109215]  schedule+0x36/0x80
    [16072.109218]  schedule_timeout+0x1f3/0x360
    [16072.109221]  ? check_preempt_curr+0x5a/0xa0
    [16072.109224]  ? ttwu_do_wakeup+0x1e/0x150
    [16072.109227]  wait_for_completion+0xb4/0x140
    [16072.109230]  ? wait_for_completion+0xb4/0x140
    [16072.109233]  ? wake_up_q+0x70/0x70
    [16072.109236]  flush_work+0x129/0x1e0
    [16072.109240]  ? worker_detach_from_pool+0xb0/0xb0
    [16072.109243]  __cancel_work_timer+0x10f/0x190
    [16072.109247]  ? device_del+0x264/0x310
    [16072.109250]  ? __wake_up+0x44/0x50
    [16072.109253]  cancel_delayed_work_sync+0x13/0x20
    [16072.109257]  power_supply_unregister+0x37/0xb0
    [16072.109260]  devm_power_supply_release+0x11/0x20
    [16072.109263]  release_nodes+0x110/0x200
    [16072.109266]  devres_release_group+0x7c/0xb0
    [16072.109274]  wacom_remove+0xc2/0x110 [wacom]
    [16072.109279]  hid_device_remove+0x6e/0xd0 [hid]
    [16072.109284]  device_release_driver_internal+0x158/0x210
    [16072.109288]  device_release_driver+0x12/0x20
    [16072.109291]  bus_remove_device+0xec/0x160
    [16072.109293]  device_del+0x1de/0x310
    [16072.109298]  hid_destroy_device+0x27/0x60 [hid]
    [16072.109303]  usbhid_disconnect+0x51/0x70 [usbhid]
    [16072.109308]  usb_unbind_interface+0x77/0x270
    [16072.109311]  device_release_driver_internal+0x158/0x210
    [16072.109315]  device_release_driver+0x12/0x20
    [16072.109318]  usb_driver_release_interface+0x77/0x80
    [16072.109321]  proc_ioctl+0x20f/0x250
    [16072.109325]  usbdev_do_ioctl+0x57f/0x1140
    [16072.109327]  ? __wake_up+0x44/0x50
    [16072.109331]  usbdev_ioctl+0xe/0x20
    [16072.109336]  do_vfs_ioctl+0xa4/0x600
    [16072.109339]  ? vfs_write+0x15a/0x1b0
    [16072.109343]  SyS_ioctl+0x79/0x90
    [16072.109347]  entry_SYSCALL_64_fastpath+0x24/0xab
    [16072.109349] RIP: 0033:0x7f20da807f47
    [16072.109351] RSP: 002b:00007ffc422ae398 EFLAGS: 00000246 ORIG_RAX: 0000000000000010
    [16072.109353] RAX: ffffffffffffffda RBX: 00000000010b8560 RCX: 00007f20da807f47
    [16072.109355] RDX: 00007ffc422ae3a0 RSI: 00000000c0105512 RDI: 0000000000000009
    [16072.109356] RBP: 0000000000000000 R08: 00007ffc422ae3e0 R09: 0000000000000010
    [16072.109357] R10: 00000000000000a6 R11: 0000000000000246 R12: 0000000000000000
    [16072.109359] R13: 00000000010b8560 R14: 00007ffc422ae2e0 R15: 0000000000000000
    
    Reported-and-tested-by: Richard Hughes <rhughes@redhat.com>
    Tested-by: Aaron Skomra <Aaron.Skomra@wacom.com>
    Signed-off-by: Benjamin Tissoires <benjamin.tissoires@redhat.com>
    Fixes: 7f1a57fdd6cb ("power_supply: Fix possible NULL pointer dereference on early uevent")
    Signed-off-by: Sebastian Reichel <sebastian.reichel@collabora.co.uk>

diff --git a/include/linux/power_supply.h b/include/linux/power_supply.h
index b21c4bd96b84..f80769175c56 100644
--- a/include/linux/power_supply.h
+++ b/include/linux/power_supply.h
@@ -269,6 +269,7 @@ struct power_supply {
 	spinlock_t changed_lock;
 	bool changed;
 	bool initialized;
+	bool removing;
 	atomic_t use_cnt;
 #ifdef CONFIG_THERMAL
 	struct thermal_zone_device *tzd;

commit ece711b5a42ce9b99a2a3706c56bf70a5425a7bf
Author: Adam Thomson <Adam.Thomson.Opensource@diasemi.com>
Date:   Tue May 22 16:16:23 2018 +0100

    power: supply: Add fwnode pointer to power_supply_config struct
    
    To allow users of the power supply framework to be hw description
    agnostic, this commit adds the ability to pass a fwnode pointer,
    via the power_supply_config structure, to the initialisation code
    of the core, instead of explicitly specifying of_ndoe. If that
    fwnode pointer is provided then it will automatically resolve down
    to of_node on platforms which support it, otherwise it will be NULL.
    
    In the future, when ACPI support is added, this can be modified to
    accommodate ACPI without the need to change calling code which
    already provides the fwnode handle in this manner.
    
    Signed-off-by: Adam Thomson <Adam.Thomson.Opensource@diasemi.com>
    Suggested-by: Heikki Krogerus <heikki.krogerus@linux.intel.com>
    Reviewed-by: Sebastian Reichel <sebastian.reichel@collabora.co.uk>
    Reviewed-by: Heikki Krogerus <heikki.krogerus@linux.intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/include/linux/power_supply.h b/include/linux/power_supply.h
index 0c9a572a1eb8..b21c4bd96b84 100644
--- a/include/linux/power_supply.h
+++ b/include/linux/power_supply.h
@@ -199,6 +199,8 @@ struct power_supply;
 /* Run-time specific power supply configuration */
 struct power_supply_config {
 	struct device_node *of_node;
+	struct fwnode_handle *fwnode;
+
 	/* Driver private data */
 	void *drv_data;
 

commit cf45004195efea6b479a1d710d6fc21c2b19353e
Author: Adam Thomson <Adam.Thomson.Opensource@diasemi.com>
Date:   Mon Apr 23 15:10:59 2018 +0100

    power: supply: Add 'usb_type' property and supporting code
    
    This commit adds the 'usb_type' property to represent USB supplies
    which can report a number of different types based on a connection
    event.
    
    Examples of this already exist in drivers whereby the existing 'type'
    property is updated, based on an event, to represent what was
    connected (e.g. USB, USB_DCP, USB_ACA, ...). Current implementations
    however don't show all supported connectable types, so this knowledge
    has to be exlicitly known for each driver that supports this.
    
    The 'usb_type' property is intended to fill this void and show users
    all possible USB types supported by a driver. The property, when read,
    shows all available types for the driver, and the one currently chosen
    is highlighted/bracketed. It is expected that the 'type' property
    would then just show the top-level type 'USB', and this would be
    static.
    
    Currently the 'usb_type' enum contains all of the USB variant types
    that exist for the 'type' enum at this time, and in addition has
    SDP and PPS types. The mirroring is intentional so as to not impact
    existing usage of the 'type' property.
    
    Signed-off-by: Adam Thomson <Adam.Thomson.Opensource@diasemi.com>
    Reviewed-by: Heikki Krogerus <heikki.krogerus@linux.intel.com>
    Reviewed-by: Sebastian Reichel <sebastian.reichel@collabora.co.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/include/linux/power_supply.h b/include/linux/power_supply.h
index f0139b460a72..0c9a572a1eb8 100644
--- a/include/linux/power_supply.h
+++ b/include/linux/power_supply.h
@@ -145,6 +145,7 @@ enum power_supply_property {
 	POWER_SUPPLY_PROP_TIME_TO_FULL_NOW,
 	POWER_SUPPLY_PROP_TIME_TO_FULL_AVG,
 	POWER_SUPPLY_PROP_TYPE, /* use power_supply.type instead */
+	POWER_SUPPLY_PROP_USB_TYPE,
 	POWER_SUPPLY_PROP_SCOPE,
 	POWER_SUPPLY_PROP_PRECHARGE_CURRENT,
 	POWER_SUPPLY_PROP_CHARGE_TERM_CURRENT,
@@ -170,6 +171,19 @@ enum power_supply_type {
 	POWER_SUPPLY_TYPE_APPLE_BRICK_ID,	/* Apple Charging Method */
 };
 
+enum power_supply_usb_type {
+	POWER_SUPPLY_USB_TYPE_UNKNOWN = 0,
+	POWER_SUPPLY_USB_TYPE_SDP,		/* Standard Downstream Port */
+	POWER_SUPPLY_USB_TYPE_DCP,		/* Dedicated Charging Port */
+	POWER_SUPPLY_USB_TYPE_CDP,		/* Charging Downstream Port */
+	POWER_SUPPLY_USB_TYPE_ACA,		/* Accessory Charger Adapters */
+	POWER_SUPPLY_USB_TYPE_C,		/* Type C Port */
+	POWER_SUPPLY_USB_TYPE_PD,		/* Power Delivery Port */
+	POWER_SUPPLY_USB_TYPE_PD_DRP,		/* PD Dual Role Port */
+	POWER_SUPPLY_USB_TYPE_PD_PPS,		/* PD Programmable Power Supply */
+	POWER_SUPPLY_USB_TYPE_APPLE_BRICK_ID,	/* Apple Charging Method */
+};
+
 enum power_supply_notifier_events {
 	PSY_EVENT_PROP_CHANGED,
 };
@@ -196,6 +210,8 @@ struct power_supply_config {
 struct power_supply_desc {
 	const char *name;
 	enum power_supply_type type;
+	enum power_supply_usb_type *usb_types;
+	size_t num_usb_types;
 	enum power_supply_property *properties;
 	size_t num_properties;
 

commit 285995d15d3b1725d021a8a274e55f2ce30ccfa0
Author: Ognjen Galic <smclt30p@gmail.com>
Date:   Wed Feb 7 15:58:27 2018 +0100

    power: add to_power_supply macro to the API
    
    This patch adds the to_power_supply macro to upcast
    a device to a power_supply struct.
    
    This is needed because the same piece of code using
    container_of is used in various other places, so we
    abstract away such low-level operations via a macro.
    
    Suggested-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    Reviewed-by: Andy Shevchenko <andy.shevchenko@gmail.com>
    Signed-off-by: Ognjen Galic <smclt30p@gmail.com>
    Reviewed-by: Sebastian Reichel <sebastian.reichel@collabora.co.uk>
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>

diff --git a/include/linux/power_supply.h b/include/linux/power_supply.h
index 79e90b3d3288..f0139b460a72 100644
--- a/include/linux/power_supply.h
+++ b/include/linux/power_supply.h
@@ -371,6 +371,8 @@ devm_power_supply_register_no_ws(struct device *parent,
 extern void power_supply_unregister(struct power_supply *psy);
 extern int power_supply_powers(struct power_supply *psy, struct device *dev);
 
+#define to_power_supply(device) container_of(device, struct power_supply, dev)
+
 extern void *power_supply_get_drvdata(struct power_supply *psy);
 /* For APM emulation, think legacy userspace. */
 extern struct class *power_supply_class;

commit c3142dd8bedb8b78ee13c885dd92093fc8a50277
Author: Hans de Goede <hdegoede@redhat.com>
Date:   Tue Aug 15 22:04:56 2017 +0200

    power: supply: Add power_supply_set_input_current_limit_from_supplier helper
    
    On some devices the USB Type-C port power (USB PD 2.0) negotiation is
    done by a separate port-controller IC, while the current limit is
    controlled through another (charger) IC.
    
    It has been decided to model this by modelling the external Type-C
    power brick (adapter/charger) as a power-supply class device which
    supplies the charger-IC, with its voltage-now and current-max representing
    the negotiated voltage and max current draw.
    
    This commit adds a power_supply_set_input_current_limit_from_supplier
    helper function which charger power-supply drivers can call to get
    the max-current from their supplier and have this applied
    through their set_property call-back to their input-current-limit.
    
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Signed-off-by: Sebastian Reichel <sebastian.reichel@collabora.co.uk>

diff --git a/include/linux/power_supply.h b/include/linux/power_supply.h
index de89066b72b1..79e90b3d3288 100644
--- a/include/linux/power_supply.h
+++ b/include/linux/power_supply.h
@@ -332,6 +332,8 @@ extern int power_supply_get_battery_info(struct power_supply *psy,
 					 struct power_supply_battery_info *info);
 extern void power_supply_changed(struct power_supply *psy);
 extern int power_supply_am_i_supplied(struct power_supply *psy);
+extern int power_supply_set_input_current_limit_from_supplier(
+					 struct power_supply *psy);
 extern int power_supply_set_battery_charged(struct power_supply *psy);
 
 #ifdef CONFIG_POWER_SUPPLY

commit 413de34ab93edc80ef710c54ceb0987b8496aef3
Author: Liam Breck <kernel@networkimprov.net>
Date:   Wed Jun 7 11:37:52 2017 -0700

    power: supply: core: Add power_supply_prop_precharge
    
    Battery chargers use POWER_SUPPLY_PROP_PRECHARGE_CURRENT
    Clarify related item POWER_SUPPLY_PROP_CHARGE_TERM_CURRENT
    
    Signed-off-by: Liam Breck <kernel@networkimprov.net>
    Signed-off-by: Sebastian Reichel <sebastian.reichel@collabora.co.uk>

diff --git a/include/linux/power_supply.h b/include/linux/power_supply.h
index 34345d716286..de89066b72b1 100644
--- a/include/linux/power_supply.h
+++ b/include/linux/power_supply.h
@@ -146,6 +146,7 @@ enum power_supply_property {
 	POWER_SUPPLY_PROP_TIME_TO_FULL_AVG,
 	POWER_SUPPLY_PROP_TYPE, /* use power_supply.type instead */
 	POWER_SUPPLY_PROP_SCOPE,
+	POWER_SUPPLY_PROP_PRECHARGE_CURRENT,
 	POWER_SUPPLY_PROP_CHARGE_TERM_CURRENT,
 	POWER_SUPPLY_PROP_CALIBRATE,
 	/* Properties of type `const char *' */
@@ -382,6 +383,8 @@ static inline bool power_supply_is_amp_property(enum power_supply_property psp)
 	case POWER_SUPPLY_PROP_CHARGE_NOW:
 	case POWER_SUPPLY_PROP_CHARGE_AVG:
 	case POWER_SUPPLY_PROP_CHARGE_COUNTER:
+	case POWER_SUPPLY_PROP_PRECHARGE_CURRENT:
+	case POWER_SUPPLY_PROP_CHARGE_TERM_CURRENT:
 	case POWER_SUPPLY_PROP_CONSTANT_CHARGE_CURRENT:
 	case POWER_SUPPLY_PROP_CONSTANT_CHARGE_CURRENT_MAX:
 	case POWER_SUPPLY_PROP_CURRENT_MAX:

commit c08b1f45d7d193b3e6dcbbf30d403cb49b667b8c
Author: Liam Breck <kernel@networkimprov.net>
Date:   Wed Jun 7 11:37:51 2017 -0700

    power: supply: core: Add power_supply_battery_info and API
    
    power_supply_get_battery_info() reads battery data from devicetree.
    struct power_supply_battery_info provides battery data to drivers.
    Its fields correspond to elements in enum power_supply_property.
    Drivers may surface battery data in sysfs via corresponding
    POWER_SUPPLY_PROP_* fields.
    
    Signed-off-by: Matt Ranostay <matt@ranostay.consulting>
    Signed-off-by: Liam Breck <kernel@networkimprov.net>
    Signed-off-by: Sebastian Reichel <sebastian.reichel@collabora.co.uk>

diff --git a/include/linux/power_supply.h b/include/linux/power_supply.h
index 4bd34051995e..34345d716286 100644
--- a/include/linux/power_supply.h
+++ b/include/linux/power_supply.h
@@ -289,6 +289,25 @@ struct power_supply_info {
 	int use_for_apm;
 };
 
+/*
+ * This is the recommended struct to manage static battery parameters,
+ * populated by power_supply_get_battery_info(). Most platform drivers should
+ * use these for consistency.
+ * Its field names must correspond to elements in enum power_supply_property.
+ * The default field value is -EINVAL.
+ * Power supply class itself doesn't use this.
+ */
+
+struct power_supply_battery_info {
+	int energy_full_design_uwh;	    /* microWatt-hours */
+	int charge_full_design_uah;	    /* microAmp-hours */
+	int voltage_min_design_uv;	    /* microVolts */
+	int precharge_current_ua;	    /* microAmps */
+	int charge_term_current_ua;	    /* microAmps */
+	int constant_charge_current_max_ua; /* microAmps */
+	int constant_charge_voltage_max_uv; /* microVolts */
+};
+
 extern struct atomic_notifier_head power_supply_notifier;
 extern int power_supply_reg_notifier(struct notifier_block *nb);
 extern void power_supply_unreg_notifier(struct notifier_block *nb);
@@ -307,6 +326,9 @@ static inline struct power_supply *
 devm_power_supply_get_by_phandle(struct device *dev, const char *property)
 { return NULL; }
 #endif /* CONFIG_OF */
+
+extern int power_supply_get_battery_info(struct power_supply *psy,
+					 struct power_supply_battery_info *info);
 extern void power_supply_changed(struct power_supply *psy);
 extern int power_supply_am_i_supplied(struct power_supply *psy);
 extern int power_supply_set_battery_charged(struct power_supply *psy);

commit 71399aa5d68bb3ed8c4caf8bfd71faae39555876
Author: Benson Leung <bleung@chromium.org>
Date:   Mon May 8 15:02:48 2017 -0700

    power: supply: Add Apple Brick ID power supply type
    
    Apple currently supports three very common USB chargers:
    https://www.apple.com/power-adapters/
    
    These chargers implement a proprietary Apple method for advertising
    1A, 2.1A, and 2.4A at 5V called "Brick ID".
    In addition, 3rd parties implement the same charging method in many
    charging accessories that work with iOS devices.
    
    Devices that have charger detection chips such as the Pericom PI3USB9281,
    eg. Google Chromebook Pixel 2015, are capable of detecting
    these chargers, so let's add a type to facilicate passing that info
    up to userspace.
    
    This adds a separate power supply type for Apple's proprietary
    "Brick ID" charging method.
    
    Signed-off-by: Benson Leung <bleung@chromium.org>
    Signed-off-by: Sebastian Reichel <sebastian.reichel@collabora.co.uk>

diff --git a/include/linux/power_supply.h b/include/linux/power_supply.h
index 3965503315ef..4bd34051995e 100644
--- a/include/linux/power_supply.h
+++ b/include/linux/power_supply.h
@@ -159,13 +159,14 @@ enum power_supply_type {
 	POWER_SUPPLY_TYPE_BATTERY,
 	POWER_SUPPLY_TYPE_UPS,
 	POWER_SUPPLY_TYPE_MAINS,
-	POWER_SUPPLY_TYPE_USB,		/* Standard Downstream Port */
-	POWER_SUPPLY_TYPE_USB_DCP,	/* Dedicated Charging Port */
-	POWER_SUPPLY_TYPE_USB_CDP,	/* Charging Downstream Port */
-	POWER_SUPPLY_TYPE_USB_ACA,	/* Accessory Charger Adapters */
-	POWER_SUPPLY_TYPE_USB_TYPE_C,	/* Type C Port */
-	POWER_SUPPLY_TYPE_USB_PD,	/* Power Delivery Port */
-	POWER_SUPPLY_TYPE_USB_PD_DRP,	/* PD Dual Role Port */
+	POWER_SUPPLY_TYPE_USB,			/* Standard Downstream Port */
+	POWER_SUPPLY_TYPE_USB_DCP,		/* Dedicated Charging Port */
+	POWER_SUPPLY_TYPE_USB_CDP,		/* Charging Downstream Port */
+	POWER_SUPPLY_TYPE_USB_ACA,		/* Accessory Charger Adapters */
+	POWER_SUPPLY_TYPE_USB_TYPE_C,		/* Type C Port */
+	POWER_SUPPLY_TYPE_USB_PD,		/* Power Delivery Port */
+	POWER_SUPPLY_TYPE_USB_PD_DRP,		/* PD Dual Role Port */
+	POWER_SUPPLY_TYPE_APPLE_BRICK_ID,	/* Apple Charging Method */
 };
 
 enum power_supply_notifier_events {

commit e380538529e83c5d3fd27e8cbfcc1f9799cb6bbb
Author: Rhyland Klein <rklein@nvidia.com>
Date:   Wed Jun 22 11:45:52 2016 -0400

    power_supply: fix return value of get_property
    
    power_supply_get_property() should ideally return -EAGAIN if it is
    called while the power_supply is being registered. There was no way
    previously to determine if use_cnt == 0 meant that the power_supply
    wasn't fully registered yet, or if it had already been unregistered.
    
    Add a new boolean to the power_supply struct to simply show if
    registration is completed. Lastly, modify the check in
    power_supply_show_property() to also ignore -EAGAIN when so it
    doesn't complain about not returning the property.
    
    Signed-off-by: Rhyland Klein <rklein@nvidia.com>
    Signed-off-by: Sebastian Reichel <sre@kernel.org>

diff --git a/include/linux/power_supply.h b/include/linux/power_supply.h
index 751061790626..3965503315ef 100644
--- a/include/linux/power_supply.h
+++ b/include/linux/power_supply.h
@@ -248,6 +248,7 @@ struct power_supply {
 	struct delayed_work deferred_register_work;
 	spinlock_t changed_lock;
 	bool changed;
+	bool initialized;
 	atomic_t use_cnt;
 #ifdef CONFIG_THERMAL
 	struct thermal_zone_device *tzd;

commit 6659b55dae09b2042d8cdd0f4576502c3e81957c
Author: Benson Leung <bleung@chromium.org>
Date:   Fri Feb 12 13:56:59 2016 +0100

    power_supply: Add types for USB Type C and PD chargers
    
    This adds power supply types for USB chargers defined in
    the USB Type-C Specification 1.1 and in the
    USB Power Delivery Specification Revision 2.0 V1.1.
    
    The following are added :
    POWER_SUPPLY_TYPE_USB_TYPE_C,   /* Type C Port */
    POWER_SUPPLY_TYPE_USB_PD,       /* Power Delivery Port */
    POWER_SUPPLY_TYPE_USB_PD_DRP,   /* PD Dual Role Port */
    
    Signed-off-by: Benson Leung <bleung@chromium.org>
    [tomeu: remove the mention to Type C from the comments]
    Signed-off-by: Tomeu Vizoso <tomeu.vizoso@collabora.com>
    Reviewed-by: Alec Berg <alecaberg@chromium.org>
    Reviewed-by: Vincent Palatin <vpalatin@chromium.org>
    Reviewed-by: Todd Broch <tbroch@chromium.org>
    Signed-off-by: Sebastian Reichel <sre@kernel.org>

diff --git a/include/linux/power_supply.h b/include/linux/power_supply.h
index ef9f1592185d..751061790626 100644
--- a/include/linux/power_supply.h
+++ b/include/linux/power_supply.h
@@ -163,6 +163,9 @@ enum power_supply_type {
 	POWER_SUPPLY_TYPE_USB_DCP,	/* Dedicated Charging Port */
 	POWER_SUPPLY_TYPE_USB_CDP,	/* Charging Downstream Port */
 	POWER_SUPPLY_TYPE_USB_ACA,	/* Accessory Charger Adapters */
+	POWER_SUPPLY_TYPE_USB_TYPE_C,	/* Type C Port */
+	POWER_SUPPLY_TYPE_USB_PD,	/* Power Delivery Port */
+	POWER_SUPPLY_TYPE_USB_PD_DRP,	/* PD Dual Role Port */
 };
 
 enum power_supply_notifier_events {

commit fe27e1dfe9962b07215ee01445926306ddbb7c25
Author: Hans de Goede <hdegoede@redhat.com>
Date:   Tue Jun 9 23:37:56 2015 +0200

    power: Add devm_power_supply_get_by_phandle() helper function
    
    This commit adds a resource-managed version of the
    power_supply_get_by_phandle() function.
    
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Signed-off-by: Sebastian Reichel <sre@kernel.org>

diff --git a/include/linux/power_supply.h b/include/linux/power_supply.h
index 0395bcb18ddb..ef9f1592185d 100644
--- a/include/linux/power_supply.h
+++ b/include/linux/power_supply.h
@@ -292,10 +292,15 @@ extern void power_supply_put(struct power_supply *psy);
 #ifdef CONFIG_OF
 extern struct power_supply *power_supply_get_by_phandle(struct device_node *np,
 							const char *property);
+extern struct power_supply *devm_power_supply_get_by_phandle(
+				    struct device *dev, const char *property);
 #else /* !CONFIG_OF */
 static inline struct power_supply *
 power_supply_get_by_phandle(struct device_node *np, const char *property)
 { return NULL; }
+static inline struct power_supply *
+devm_power_supply_get_by_phandle(struct device *dev, const char *property)
+{ return NULL; }
 #endif /* CONFIG_OF */
 extern void power_supply_changed(struct power_supply *psy);
 extern int power_supply_am_i_supplied(struct power_supply *psy);

commit 5c6e3a97e969e978368df83239583771c936efea
Author: Krzysztof Kozlowski <k.kozlowski@samsung.com>
Date:   Mon Jun 8 10:09:48 2015 +0900

    power_supply: sysfs: Bring back write to writeable properties
    
    The fix for NULL pointer exception related to calling uevent for not
    finished probe caused to set all writeable properties as non-writeable.
    This was caused by checking if property is writeable before the initial
    increase of power supply usage counter and in the same time using
    wrapper over property_is_writeable(). The wrapper returns ENODEV if the
    usage counter is still 0.
    
    The call trace looked like:
      device probe:
        power_supply_register()
          use_cnt = 0;
          device_add()
            create sysfs entries
              power_supply_attr_is_visible()
                power_supply_property_is_writeable()
                  if (use_cnt == 0) return -ENODEV;
          use_cnt++;
    
    Replace the usage of wrapper with direct call to property_is_writeable()
    from driver. This should be safe call during device probe because
    implementations of this callback just return 0/1 for different
    properties and they do not access any of the driver's internal data.
    
    Fixes: 8e59c7f23410 ("power_supply: Fix NULL pointer dereference during bq27x00_battery probe")
    Signed-off-by: Krzysztof Kozlowski <k.kozlowski@samsung.com>
    Signed-off-by: Sebastian Reichel <sre@kernel.org>

diff --git a/include/linux/power_supply.h b/include/linux/power_supply.h
index a80f1fd01ddb..0395bcb18ddb 100644
--- a/include/linux/power_supply.h
+++ b/include/linux/power_supply.h
@@ -206,6 +206,11 @@ struct power_supply_desc {
 	int (*set_property)(struct power_supply *psy,
 			    enum power_supply_property psp,
 			    const union power_supply_propval *val);
+	/*
+	 * property_is_writeable() will be called during registration
+	 * of power supply. If this happens during device probe then it must
+	 * not access internal data of device (because probe did not end).
+	 */
 	int (*property_is_writeable)(struct power_supply *psy,
 				     enum power_supply_property psp);
 	void (*external_power_changed)(struct power_supply *psy);

commit 7f1a57fdd6cb6e7be2ed31878a34655df38e1861
Author: Krzysztof Kozlowski <k.kozlowski@samsung.com>
Date:   Tue May 19 16:13:02 2015 +0900

    power_supply: Fix possible NULL pointer dereference on early uevent
    
    Don't call the power_supply_changed() from power_supply_register() when
    parent is still probing because it may lead to accessing parent too
    early.
    
    In bq27x00_battery this caused NULL pointer exception because uevent of
    power_supply_changed called back the the get_property() method provided
    by the driver. The get_property() method accessed pointer which should
    be returned by power_supply_register().
    
    Starting from bq27x00_battery_probe():
      di->bat = power_supply_register()
        power_supply_changed()
          kobject_uevent()
            power_supply_uevent()
              power_supply_show_property()
                power_supply_get_property()
                  bq27x00_battery_get_property()
                    dereference of di->bat which is NULL here
    
    The dereference of di->bat (value returned by power_supply_register())
    is the currently visible problem. However calling back the methods
    provided by driver before ending the probe may lead to accessing other
    driver-related data which is not yet initialized.
    
    The call to power_supply_changed() is postponed till probing ends -
    mutex of parent device is released.
    
    Reported-by: H. Nikolaus Schaller <hns@goldelico.com>
    Signed-off-by: Krzysztof Kozlowski <k.kozlowski@samsung.com>
    Fixes: 297d716f6260 ("power_supply: Change ownership from driver to core")
    Tested-By: Dr. H. Nikolaus Schaller <hns@goldelico.com>
    Signed-off-by: Sebastian Reichel <sre@kernel.org>

diff --git a/include/linux/power_supply.h b/include/linux/power_supply.h
index 75a1dd8dc56e..a80f1fd01ddb 100644
--- a/include/linux/power_supply.h
+++ b/include/linux/power_supply.h
@@ -237,6 +237,7 @@ struct power_supply {
 	/* private */
 	struct device dev;
 	struct work_struct changed_work;
+	struct delayed_work deferred_register_work;
 	spinlock_t changed_lock;
 	bool changed;
 	atomic_t use_cnt;

commit 1a352462b5377ac68f5955d674b3460c7bac52a3
Author: Krzysztof Kozlowski <k.kozlowski@samsung.com>
Date:   Thu Mar 12 08:44:12 2015 +0100

    power_supply: Add power_supply_put for decrementing device reference counter
    
    The power_supply_get_by_phandle() and power_supply_get_by_name() use
    function class_find_device() for obtaining the reference to power
    supply. Each use of class_find_device() increases the power supply's
    device reference counter.
    
    However the reference counter was not decreased by users of this API.
    Thus final device_unregister() call from power_supply_unregister() could
    not release the device and clean up its resources. This lead to memory
    leak if at least once power_supply_get_by_*() was called between
    registering and unregistering the power supply.
    
    Add and document new API power_supply_put() for decrementing the
    reference counter.
    
    Signed-off-by: Krzysztof Kozlowski <k.kozlowski@samsung.com>
    Acked-by: Pavel Machek <pavel@ucw.cz>
    Reviewed-by: Bartlomiej Zolnierkiewicz <b.zolnierkie@samsung.com>
    Reviewed-by: Sebastian Reichel <sre@kernel.org>
    Signed-off-by: Sebastian Reichel <sre@kernel.org>

diff --git a/include/linux/power_supply.h b/include/linux/power_supply.h
index ea15eb68f609..75a1dd8dc56e 100644
--- a/include/linux/power_supply.h
+++ b/include/linux/power_supply.h
@@ -282,6 +282,7 @@ extern struct atomic_notifier_head power_supply_notifier;
 extern int power_supply_reg_notifier(struct notifier_block *nb);
 extern void power_supply_unreg_notifier(struct notifier_block *nb);
 extern struct power_supply *power_supply_get_by_name(const char *name);
+extern void power_supply_put(struct power_supply *psy);
 #ifdef CONFIG_OF
 extern struct power_supply *power_supply_get_by_phandle(struct device_node *np,
 							const char *property);

commit 297d716f6260cc9421d971b124ca196b957ee458
Author: Krzysztof Kozlowski <k.kozlowski@samsung.com>
Date:   Thu Mar 12 08:44:11 2015 +0100

    power_supply: Change ownership from driver to core
    
    Change the ownership of power_supply structure from each driver
    implementing the class to the power supply core.
    
    The patch changes power_supply_register() function thus all drivers
    implementing power supply class are adjusted.
    
    Each driver provides the implementation of power supply. However it
    should not be the owner of power supply class instance because it is
    exposed by core to other subsystems with power_supply_get_by_name().
    These other subsystems have no knowledge when the driver will unregister
    the power supply. This leads to several issues when driver is unbound -
    mostly because user of power supply accesses freed memory.
    
    Instead let the core own the instance of struct 'power_supply'.  Other
    users of this power supply will still access valid memory because it
    will be freed when device reference count reaches 0. Currently this
    means "it will leak" but power_supply_put() call in next patches will
    solve it.
    
    This solves invalid memory references in following race condition
    scenario:
    
    Thread 1: charger manager
    Thread 2: power supply driver, used by charger manager
    
    THREAD 1 (charger manager)         THREAD 2 (power supply driver)
    ==========================         ==============================
    psy = power_supply_get_by_name()
                                       Driver unbind, .remove
                                         power_supply_unregister()
                                         Device fully removed
    psy->get_property()
    
    The 'get_property' call is executed in invalid context because the driver was
    unbound and struct 'power_supply' memory was freed.
    
    This could be observed easily with charger manager driver (here compiled
    with max17040 fuel gauge):
    
    $ cat /sys/devices/virtual/power_supply/cm-battery/capacity &
    $ echo "1-0036" > /sys/bus/i2c/drivers/max17040/unbind
    [   55.725123] Unable to handle kernel NULL pointer dereference at virtual address 00000000
    [   55.732584] pgd = d98d4000
    [   55.734060] [00000000] *pgd=5afa2831, *pte=00000000, *ppte=00000000
    [   55.740318] Internal error: Oops: 80000007 [#1] PREEMPT SMP ARM
    [   55.746210] Modules linked in:
    [   55.749259] CPU: 1 PID: 2936 Comm: cat Tainted: G        W       3.19.0-rc1-next-20141226-00048-gf79f475f3c44-dirty #1496
    [   55.760190] Hardware name: SAMSUNG EXYNOS (Flattened Device Tree)
    [   55.766270] task: d9b76f00 ti: daf54000 task.ti: daf54000
    [   55.771647] PC is at 0x0
    [   55.774182] LR is at charger_get_property+0x2f4/0x36c
    [   55.779201] pc : [<00000000>]    lr : [<c034b0b4>]    psr: 60000013
    [   55.779201] sp : daf55e90  ip : 00000003  fp : 00000000
    [   55.790657] r10: 00000000  r9 : c06e2878  r8 : d9b26c68
    [   55.795865] r7 : dad81610  r6 : daec7410  r5 : daf55ebc  r4 : 00000000
    [   55.802367] r3 : 00000000  r2 : daf55ebc  r1 : 0000002a  r0 : d9b26c68
    [   55.808879] Flags: nZCv  IRQs on  FIQs on  Mode SVC_32  ISA ARM  Segment user
    [   55.815994] Control: 10c5387d  Table: 598d406a  DAC: 00000015
    [   55.821723] Process cat (pid: 2936, stack limit = 0xdaf54210)
    [   55.827451] Stack: (0xdaf55e90 to 0xdaf56000)
    [   55.831795] 5e80:                                     60000013 c01459c4 0000002a c06f8ef8
    [   55.839956] 5ea0: db651000 c06f8ef8 daebac00 c04cb668 daebac08 c0346864 00000000 c01459c4
    [   55.848115] 5ec0: d99eaa80 c06f8ef8 00000fff 00001000 db651000 c027f25c c027f240 d99eaa80
    [   55.856274] 5ee0: d9a06c00 c0146218 daf55f18 00001000 d99eaa80 db4c18c0 00000001 00000001
    [   55.864468] 5f00: daf55f80 c0144c78 c0144c54 c0107f90 00015000 d99eaab0 00000000 00000000
    [   55.872603] 5f20: 000051c7 00000000 db4c18c0 c04a9370 00015000 00001000 daf55f80 00001000
    [   55.880763] 5f40: daf54000 00015000 00000000 c00e53dc db4c18c0 c00e548c 0000000d 00008124
    [   55.888937] 5f60: 00000001 00000000 00000000 db4c18c0 db4c18c0 00001000 00015000 c00e5550
    [   55.897099] 5f80: 00000000 00000000 00001000 00001000 00015000 00000003 00000003 c000f364
    [   55.905239] 5fa0: 00000000 c000f1a0 00001000 00015000 00000003 00015000 00001000 0001333c
    [   55.913399] 5fc0: 00001000 00015000 00000003 00000003 00000002 00000000 00000000 00000000
    [   55.921560] 5fe0: 7fffe000 be999850 0000a225 b6f3c19c 60000010 00000003 00000000 00000000
    [   55.929744] [<c034b0b4>] (charger_get_property) from [<c0346864>] (power_supply_show_property+0x48/0x20c)
    [   55.939286] [<c0346864>] (power_supply_show_property) from [<c027f25c>] (dev_attr_show+0x1c/0x48)
    [   55.948130] [<c027f25c>] (dev_attr_show) from [<c0146218>] (sysfs_kf_seq_show+0x84/0x104)
    [   55.956298] [<c0146218>] (sysfs_kf_seq_show) from [<c0144c78>] (kernfs_seq_show+0x24/0x28)
    [   55.964536] [<c0144c78>] (kernfs_seq_show) from [<c0107f90>] (seq_read+0x1b0/0x484)
    [   55.972172] [<c0107f90>] (seq_read) from [<c00e53dc>] (__vfs_read+0x18/0x4c)
    [   55.979188] [<c00e53dc>] (__vfs_read) from [<c00e548c>] (vfs_read+0x7c/0x100)
    [   55.986304] [<c00e548c>] (vfs_read) from [<c00e5550>] (SyS_read+0x40/0x8c)
    [   55.993164] [<c00e5550>] (SyS_read) from [<c000f1a0>] (ret_fast_syscall+0x0/0x48)
    [   56.000626] Code: bad PC value
    [   56.011652] ---[ end trace 7b64343fbdae8ef1 ]---
    
    Signed-off-by: Krzysztof Kozlowski <k.kozlowski@samsung.com>
    Reviewed-by: Bartlomiej Zolnierkiewicz <b.zolnierkie@samsung.com>
    
    [for the nvec part]
    Reviewed-by: Marc Dietrich <marvin24@gmx.de>
    
    [for compal-laptop.c]
    Acked-by: Darren Hart <dvhart@linux.intel.com>
    
    [for the mfd part]
    Acked-by: Lee Jones <lee.jones@linaro.org>
    
    [for the hid part]
    Acked-by: Jiri Kosina <jkosina@suse.cz>
    
    [for the acpi part]
    Acked-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    
    Signed-off-by: Sebastian Reichel <sre@kernel.org>

diff --git a/include/linux/power_supply.h b/include/linux/power_supply.h
index 7ae60346465f..ea15eb68f609 100644
--- a/include/linux/power_supply.h
+++ b/include/linux/power_supply.h
@@ -13,6 +13,7 @@
 #ifndef __LINUX_POWER_SUPPLY_H__
 #define __LINUX_POWER_SUPPLY_H__
 
+#include <linux/device.h>
 #include <linux/workqueue.h>
 #include <linux/leds.h>
 #include <linux/spinlock.h>
@@ -173,10 +174,10 @@ union power_supply_propval {
 	const char *strval;
 };
 
-struct device;
 struct device_node;
+struct power_supply;
 
-/* Power supply instance specific configuration */
+/* Run-time specific power supply configuration */
 struct power_supply_config {
 	struct device_node *of_node;
 	/* Driver private data */
@@ -186,19 +187,13 @@ struct power_supply_config {
 	size_t num_supplicants;
 };
 
-struct power_supply {
+/* Description of power supply */
+struct power_supply_desc {
 	const char *name;
 	enum power_supply_type type;
 	enum power_supply_property *properties;
 	size_t num_properties;
 
-	char **supplied_to;
-	size_t num_supplicants;
-
-	char **supplied_from;
-	size_t num_supplies;
-	struct device_node *of_node;
-
 	/*
 	 * Functions for drivers implementing power supply class.
 	 * These shouldn't be called directly by other drivers for accessing
@@ -224,12 +219,23 @@ struct power_supply {
 	bool no_thermal;
 	/* For APM emulation, think legacy userspace. */
 	int use_for_apm;
+};
+
+struct power_supply {
+	const struct power_supply_desc *desc;
+
+	char **supplied_to;
+	size_t num_supplicants;
+
+	char **supplied_from;
+	size_t num_supplies;
+	struct device_node *of_node;
 
 	/* Driver private data */
 	void *drv_data;
 
 	/* private */
-	struct device *dev;
+	struct device dev;
 	struct work_struct changed_work;
 	spinlock_t changed_lock;
 	bool changed;
@@ -303,17 +309,22 @@ extern int power_supply_set_property(struct power_supply *psy,
 extern int power_supply_property_is_writeable(struct power_supply *psy,
 					enum power_supply_property psp);
 extern void power_supply_external_power_changed(struct power_supply *psy);
-extern int power_supply_register(struct device *parent,
-				 struct power_supply *psy,
+
+extern struct power_supply *__must_check
+power_supply_register(struct device *parent,
+				 const struct power_supply_desc *desc,
 				 const struct power_supply_config *cfg);
-extern int power_supply_register_no_ws(struct device *parent,
-				 struct power_supply *psy,
+extern struct power_supply *__must_check
+power_supply_register_no_ws(struct device *parent,
+				 const struct power_supply_desc *desc,
 				 const struct power_supply_config *cfg);
-extern int devm_power_supply_register(struct device *parent,
-				 struct power_supply *psy,
+extern struct power_supply *__must_check
+devm_power_supply_register(struct device *parent,
+				 const struct power_supply_desc *desc,
 				 const struct power_supply_config *cfg);
-extern int devm_power_supply_register_no_ws(struct device *parent,
-				 struct power_supply *psy,
+extern struct power_supply *__must_check
+devm_power_supply_register_no_ws(struct device *parent,
+				 const struct power_supply_desc *desc,
 				 const struct power_supply_config *cfg);
 extern void power_supply_unregister(struct power_supply *psy);
 extern int power_supply_powers(struct power_supply *psy, struct device *dev);

commit bc1540561c9ede1efb6d7bf44804676d3d02a3cc
Author: Krzysztof Kozlowski <k.kozlowski@samsung.com>
Date:   Thu Mar 12 08:44:03 2015 +0100

    power_supply: Add API for safe access of power supply function attrs
    
    Add simple wrappers for accessing power supply's function attributes:
     - get_property -> power_supply_get_property
     - set_property -> power_supply_set_property
     - property_is_writeable -> power_supply_property_is_writeable
     - external_power_changed -> power_supply_external_power_changed
    
    This API along with atomic usage counter adds a safe way of accessing a
    power supply from another driver. If power supply is unregistered after
    obtaining reference to it by some driver, then the API wrappers won't be
    executed in invalid (freed) context.
    
    Next patch changing the ownership of power supply class is still needed
    to fully fix race conditions in accessing freed power supply.
    
    Signed-off-by: Krzysztof Kozlowski <k.kozlowski@samsung.com>
    Reviewed-by: Bartlomiej Zolnierkiewicz <b.zolnierkie@samsung.com>
    Reviewed-by: Sebastian Reichel <sre@kernel.org>
    Acked-by: Pavel Machek <pavel@ucw.cz>
    Signed-off-by: Sebastian Reichel <sre@kernel.org>

diff --git a/include/linux/power_supply.h b/include/linux/power_supply.h
index 0d7c95f634a5..7ae60346465f 100644
--- a/include/linux/power_supply.h
+++ b/include/linux/power_supply.h
@@ -199,6 +199,12 @@ struct power_supply {
 	size_t num_supplies;
 	struct device_node *of_node;
 
+	/*
+	 * Functions for drivers implementing power supply class.
+	 * These shouldn't be called directly by other drivers for accessing
+	 * this power supply. Instead use power_supply_*() functions (for
+	 * example power_supply_get_property()).
+	 */
 	int (*get_property)(struct power_supply *psy,
 			    enum power_supply_property psp,
 			    union power_supply_propval *val);
@@ -227,6 +233,7 @@ struct power_supply {
 	struct work_struct changed_work;
 	spinlock_t changed_lock;
 	bool changed;
+	atomic_t use_cnt;
 #ifdef CONFIG_THERMAL
 	struct thermal_zone_device *tzd;
 	struct thermal_cooling_device *tcd;
@@ -287,6 +294,15 @@ extern int power_supply_is_system_supplied(void);
 static inline int power_supply_is_system_supplied(void) { return -ENOSYS; }
 #endif
 
+extern int power_supply_get_property(struct power_supply *psy,
+			    enum power_supply_property psp,
+			    union power_supply_propval *val);
+extern int power_supply_set_property(struct power_supply *psy,
+			    enum power_supply_property psp,
+			    const union power_supply_propval *val);
+extern int power_supply_property_is_writeable(struct power_supply *psy,
+					enum power_supply_property psp);
+extern void power_supply_external_power_changed(struct power_supply *psy);
 extern int power_supply_register(struct device *parent,
 				 struct power_supply *psy,
 				 const struct power_supply_config *cfg);

commit 2dc9215d7c94f7f9f34ccf8b1710ad73d82f6216
Author: Krzysztof Kozlowski <k.kozlowski@samsung.com>
Date:   Thu Mar 12 08:44:02 2015 +0100

    power_supply: Move run-time configuration to separate structure
    
    Add new structure 'power_supply_config' for holding run-time
    initialization data like of_node, supplies and private driver data.
    
    The power_supply_register() function is changed so all power supply
    drivers need updating.
    
    When registering the power supply this new 'power_supply_config' should be
    used instead of directly initializing 'struct power_supply'. This allows
    changing the ownership of power_supply structure from driver to the
    power supply core in next patches.
    
    When a driver does not use of_node or supplies then it should use NULL
    as config. If driver uses of_node or supplies then it should allocate
    config on stack and initialize it with proper values.
    
    Signed-off-by: Krzysztof Kozlowski <k.kozlowski@samsung.com>
    Reviewed-by: Bartlomiej Zolnierkiewicz <b.zolnierkie@samsung.com>
    Acked-by: Pavel Machek <pavel@ucw.cz>
    
    [for the nvec part]
    Reviewed-by: Marc Dietrich <marvin24@gmx.de>
    
    [for drivers/platform/x86/compal-laptop.c]
    Reviewed-by: Darren Hart <dvhart@linux.intel.com>
    
    [for drivers/hid/*]
    Reviewed-by: Jiri Kosina <jkosina@suse.cz>
    
    Signed-off-by: Sebastian Reichel <sre@kernel.org>

diff --git a/include/linux/power_supply.h b/include/linux/power_supply.h
index e30d85c0158d..0d7c95f634a5 100644
--- a/include/linux/power_supply.h
+++ b/include/linux/power_supply.h
@@ -176,6 +176,16 @@ union power_supply_propval {
 struct device;
 struct device_node;
 
+/* Power supply instance specific configuration */
+struct power_supply_config {
+	struct device_node *of_node;
+	/* Driver private data */
+	void *drv_data;
+
+	char **supplied_to;
+	size_t num_supplicants;
+};
+
 struct power_supply {
 	const char *name;
 	enum power_supply_type type;
@@ -278,13 +288,17 @@ static inline int power_supply_is_system_supplied(void) { return -ENOSYS; }
 #endif
 
 extern int power_supply_register(struct device *parent,
-				 struct power_supply *psy);
+				 struct power_supply *psy,
+				 const struct power_supply_config *cfg);
 extern int power_supply_register_no_ws(struct device *parent,
-				 struct power_supply *psy);
+				 struct power_supply *psy,
+				 const struct power_supply_config *cfg);
 extern int devm_power_supply_register(struct device *parent,
-				 struct power_supply *psy);
+				 struct power_supply *psy,
+				 const struct power_supply_config *cfg);
 extern int devm_power_supply_register_no_ws(struct device *parent,
-				 struct power_supply *psy);
+				 struct power_supply *psy,
+				 const struct power_supply_config *cfg);
 extern void power_supply_unregister(struct power_supply *psy);
 extern int power_supply_powers(struct power_supply *psy, struct device *dev);
 

commit e44ea364394499d38a26ed4c9668fb378ae8797f
Author: Krzysztof Kozlowski <k.kozlowski@samsung.com>
Date:   Thu Mar 12 08:44:01 2015 +0100

    power_supply: Add driver private data
    
    Allow drivers to store private data inside power_supply structure for
    later usage in power supply operations.
    
    Usage of driver private data is necessary to access driver's state
    container object from power supply calls (like get_property()) if struct
    'power_supply' is a stored there as a pointer, for example:
    
    struct some_driver_info {
            struct i2c_client       *client;
            struct power_supply     *power_supply;
            ...
    }
    
    In such case one cannot use container_of() and must store pointer to
    state container as private data.
    
    Signed-off-by: Krzysztof Kozlowski <k.kozlowski@samsung.com>
    Reviewed-by: Bartlomiej Zolnierkiewicz <b.zolnierkie@samsung.com>
    Reviewed-by: Sebastian Reichel <sre@kernel.org>
    Acked-by: Pavel Machek <pavel@ucw.cz>
    Signed-off-by: Sebastian Reichel <sre@kernel.org>

diff --git a/include/linux/power_supply.h b/include/linux/power_supply.h
index f606d6b4bd56..e30d85c0158d 100644
--- a/include/linux/power_supply.h
+++ b/include/linux/power_supply.h
@@ -209,6 +209,9 @@ struct power_supply {
 	/* For APM emulation, think legacy userspace. */
 	int use_for_apm;
 
+	/* Driver private data */
+	void *drv_data;
+
 	/* private */
 	struct device *dev;
 	struct work_struct changed_work;
@@ -285,6 +288,7 @@ extern int devm_power_supply_register_no_ws(struct device *parent,
 extern void power_supply_unregister(struct power_supply *psy);
 extern int power_supply_powers(struct power_supply *psy, struct device *dev);
 
+extern void *power_supply_get_drvdata(struct power_supply *psy);
 /* For APM emulation, think legacy userspace. */
 extern struct class *power_supply_class;
 

commit 5d8a4219a0795a321606c51582898223db80e874
Author: NeilBrown <neilb@suse.de>
Date:   Tue Feb 24 15:33:50 2015 +1100

    power_supply core: support use of devres to register/unregister a power supply.
    
    Using devm_power_supply_register allows the unregister to happen
    automatically on error or final put.
    
    Signed-off-by: NeilBrown <neilb@suse.de>
    Signed-off-by: Sebastian Reichel <sre@kernel.org>

diff --git a/include/linux/power_supply.h b/include/linux/power_supply.h
index 096dbced02ac..f606d6b4bd56 100644
--- a/include/linux/power_supply.h
+++ b/include/linux/power_supply.h
@@ -278,6 +278,10 @@ extern int power_supply_register(struct device *parent,
 				 struct power_supply *psy);
 extern int power_supply_register_no_ws(struct device *parent,
 				 struct power_supply *psy);
+extern int devm_power_supply_register(struct device *parent,
+				 struct power_supply *psy);
+extern int devm_power_supply_register_no_ws(struct device *parent,
+				 struct power_supply *psy);
 extern void power_supply_unregister(struct power_supply *psy);
 extern int power_supply_powers(struct power_supply *psy, struct device *dev);
 

commit a69d82b9bdf1e53e94423048e8bda8c5f5a3dd4e
Author: Krzysztof Kozlowski <k.kozlowski@samsung.com>
Date:   Tue Oct 7 17:47:36 2014 +0200

    power_supply: Add no_thermal property to prevent recursive get_temp calls
    
    Add a 'no_thermal' property to the power supply class. If true then
    thermal zone won't be created for this power supply in
    power_supply_register().
    
    Power supply drivers may want to set it if they support
    POWER_SUPPLY_PROP_TEMP and they are forwarding this get property call to
    other thermal zone.
    
    If they won't set it lockdep may report false positive deadlock for
    thermal zone's mutex because of nested calls to thermal_zone_get_temp().
    First is the call to thermal_zone_get_temp() of the driver's thermal
    zone. Thermal core gets POWER_SUPPLY_PROP_TEMP property from this
    driver. The driver then calls other thermal zone thermal_zone_get_temp()
    and returns result.
    
    Example of such driver is charger manager.
    
    Signed-off-by: Krzysztof Kozlowski <k.kozlowski@samsung.com>
    Signed-off-by: Sebastian Reichel <sre@kernel.org>

diff --git a/include/linux/power_supply.h b/include/linux/power_supply.h
index 3ed049673022..096dbced02ac 100644
--- a/include/linux/power_supply.h
+++ b/include/linux/power_supply.h
@@ -200,6 +200,12 @@ struct power_supply {
 	void (*external_power_changed)(struct power_supply *psy);
 	void (*set_charged)(struct power_supply *psy);
 
+	/*
+	 * Set if thermal zone should not be created for this power supply.
+	 * For example for virtual supplies forwarding calls to actual
+	 * sensors or other supplies.
+	 */
+	bool no_thermal;
 	/* For APM emulation, think legacy userspace. */
 	int use_for_apm;
 

commit 3c5f8853469d3e549799808b9bf639b5d32751f0
Author: Viresh Kumar <viresh.kumar@linaro.org>
Date:   Thu Sep 4 17:31:25 2014 +0530

    power-supply: Forward declare structs together
    
    power_supply.h requires to forward declare few structures. One of them is done
    at the top of the file and other one just before it is used. Declare them
    together for better readability.
    
    Signed-off-by: Viresh Kumar <viresh.kumar@linaro.org>
    Signed-off-by: Sebastian Reichel <sre@kernel.org>

diff --git a/include/linux/power_supply.h b/include/linux/power_supply.h
index de59a28b1b5b..3ed049673022 100644
--- a/include/linux/power_supply.h
+++ b/include/linux/power_supply.h
@@ -18,8 +18,6 @@
 #include <linux/spinlock.h>
 #include <linux/notifier.h>
 
-struct device;
-
 /*
  * All voltages, currents, charges, energies, time and temperatures in uV,
  * µA, µAh, µWh, seconds and tenths of degree Celsius unless otherwise
@@ -175,6 +173,7 @@ union power_supply_propval {
 	const char *strval;
 };
 
+struct device;
 struct device_node;
 
 struct power_supply {

commit a8adcc9012d8502e06ba7b3f966bad8f2c58edc3
Author: Ramakrishna Pallala <ramakrishna.pallala@intel.com>
Date:   Wed Aug 27 23:44:08 2014 +0530

    power_supply: Add boot and calibration attributes
    
    Usually PMIC's come with coulomb counting mechanism which can be
    used to implement a Fuel Gauginig solution in Software itself.
    One of key input to these SW Fuel Gauge solutioons is the boot up
    parameters like boot voltage and boot current.
    
    This patch adds the VOLTAGE_BOOT and CURRENT_BOOT power supply attributes
    to report bootup voltage and current.
    
    This patch also adds CALIBRATE power supply attribute which useful is
    for calibrating the battery/coulomb counter.
    
    Signed-off-by: Ramakrishna Pallala <ramakrishna.pallala@intel.com>
    Signed-off-by: Sebastian Reichel <sre@kernel.org>

diff --git a/include/linux/power_supply.h b/include/linux/power_supply.h
index f3dea41dbcd2..de59a28b1b5b 100644
--- a/include/linux/power_supply.h
+++ b/include/linux/power_supply.h
@@ -102,9 +102,11 @@ enum power_supply_property {
 	POWER_SUPPLY_PROP_VOLTAGE_NOW,
 	POWER_SUPPLY_PROP_VOLTAGE_AVG,
 	POWER_SUPPLY_PROP_VOLTAGE_OCV,
+	POWER_SUPPLY_PROP_VOLTAGE_BOOT,
 	POWER_SUPPLY_PROP_CURRENT_MAX,
 	POWER_SUPPLY_PROP_CURRENT_NOW,
 	POWER_SUPPLY_PROP_CURRENT_AVG,
+	POWER_SUPPLY_PROP_CURRENT_BOOT,
 	POWER_SUPPLY_PROP_POWER_NOW,
 	POWER_SUPPLY_PROP_POWER_AVG,
 	POWER_SUPPLY_PROP_CHARGE_FULL_DESIGN,
@@ -146,6 +148,7 @@ enum power_supply_property {
 	POWER_SUPPLY_PROP_TYPE, /* use power_supply.type instead */
 	POWER_SUPPLY_PROP_SCOPE,
 	POWER_SUPPLY_PROP_CHARGE_TERM_CURRENT,
+	POWER_SUPPLY_PROP_CALIBRATE,
 	/* Properties of type `const char *' */
 	POWER_SUPPLY_PROP_MODEL_NAME,
 	POWER_SUPPLY_PROP_MANUFACTURER,
@@ -291,6 +294,7 @@ static inline bool power_supply_is_amp_property(enum power_supply_property psp)
 	case POWER_SUPPLY_PROP_CURRENT_MAX:
 	case POWER_SUPPLY_PROP_CURRENT_NOW:
 	case POWER_SUPPLY_PROP_CURRENT_AVG:
+	case POWER_SUPPLY_PROP_CURRENT_BOOT:
 		return 1;
 	default:
 		break;
@@ -315,6 +319,7 @@ static inline bool power_supply_is_watt_property(enum power_supply_property psp)
 	case POWER_SUPPLY_PROP_VOLTAGE_NOW:
 	case POWER_SUPPLY_PROP_VOLTAGE_AVG:
 	case POWER_SUPPLY_PROP_VOLTAGE_OCV:
+	case POWER_SUPPLY_PROP_VOLTAGE_BOOT:
 	case POWER_SUPPLY_PROP_CONSTANT_CHARGE_VOLTAGE:
 	case POWER_SUPPLY_PROP_CONSTANT_CHARGE_VOLTAGE_MAX:
 	case POWER_SUPPLY_PROP_POWER_NOW:

commit 6bb1d272d7c9f5dcfbb790d6aef47d8f82dccbf5
Author: Jenny TC <jenny.tc@intel.com>
Date:   Tue Jul 8 11:34:18 2014 +0530

    power_supply: Add inlmt,iterm, min/max temp props
    
    Add new power supply properties for input current, charge termination
    current, min and max temperature
    
    POWER_SUPPLY_PROP_TEMP_MIN - minimum operatable temperature
    POWER_SUPPLY_PROP_TEMP_MAX - maximum operatable temperature
    
    POWER_SUPPLY_PROP_INPUT_CURRENT_LIMIT - input current limit programmed
    by charger. Indicates the input current for a charging source.
    
    POWER_SUPPLY_PROP_CHARGE_TERM_CURRENT - Charge termination current used
    to detect the end of charge condition
    
    Signed-off-by: Jenny TC <jenny.tc@intel.com>
    Acked-by: Pavel Machek <pavel@ucw.cz>
    Signed-off-by: Sebastian Reichel <sre@kernel.org>

diff --git a/include/linux/power_supply.h b/include/linux/power_supply.h
index f2b76aeaf4e4..f3dea41dbcd2 100644
--- a/include/linux/power_supply.h
+++ b/include/linux/power_supply.h
@@ -120,6 +120,7 @@ enum power_supply_property {
 	POWER_SUPPLY_PROP_CONSTANT_CHARGE_VOLTAGE_MAX,
 	POWER_SUPPLY_PROP_CHARGE_CONTROL_LIMIT,
 	POWER_SUPPLY_PROP_CHARGE_CONTROL_LIMIT_MAX,
+	POWER_SUPPLY_PROP_INPUT_CURRENT_LIMIT,
 	POWER_SUPPLY_PROP_ENERGY_FULL_DESIGN,
 	POWER_SUPPLY_PROP_ENERGY_EMPTY_DESIGN,
 	POWER_SUPPLY_PROP_ENERGY_FULL,
@@ -131,6 +132,8 @@ enum power_supply_property {
 	POWER_SUPPLY_PROP_CAPACITY_ALERT_MAX, /* in percents! */
 	POWER_SUPPLY_PROP_CAPACITY_LEVEL,
 	POWER_SUPPLY_PROP_TEMP,
+	POWER_SUPPLY_PROP_TEMP_MAX,
+	POWER_SUPPLY_PROP_TEMP_MIN,
 	POWER_SUPPLY_PROP_TEMP_ALERT_MIN,
 	POWER_SUPPLY_PROP_TEMP_ALERT_MAX,
 	POWER_SUPPLY_PROP_TEMP_AMBIENT,
@@ -142,6 +145,7 @@ enum power_supply_property {
 	POWER_SUPPLY_PROP_TIME_TO_FULL_AVG,
 	POWER_SUPPLY_PROP_TYPE, /* use power_supply.type instead */
 	POWER_SUPPLY_PROP_SCOPE,
+	POWER_SUPPLY_PROP_CHARGE_TERM_CURRENT,
 	/* Properties of type `const char *' */
 	POWER_SUPPLY_PROP_MODEL_NAME,
 	POWER_SUPPLY_PROP_MANUFACTURER,

commit 9113e260767b1cb44f8da0e5922e1a9a5417c4b8
Author: Zhang Rui <rui.zhang@intel.com>
Date:   Wed May 28 15:23:37 2014 +0800

    power_supply: allow power supply devices registered w/o wakeup source
    
    Currently, all the power supply devices are registered with wakeup source,
    this results in that every power_supply_changed() invocation brings
    the system out of suspend-to-freeze state.
    
    This is overkill as some device drivers, e.g. ACPI battery driver,
    have the ability to check the device status and wake up the system
    from sleeping only when necessary.
    
    Thus introduce a new API which allows device to be registered
    w/o wakeup source.
    
    Signed-off-by: Zhang Rui <rui.zhang@intel.com>
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>

diff --git a/include/linux/power_supply.h b/include/linux/power_supply.h
index c9dc4e09854c..f2b76aeaf4e4 100644
--- a/include/linux/power_supply.h
+++ b/include/linux/power_supply.h
@@ -264,6 +264,8 @@ static inline int power_supply_is_system_supplied(void) { return -ENOSYS; }
 
 extern int power_supply_register(struct device *parent,
 				 struct power_supply *psy);
+extern int power_supply_register_no_ws(struct device *parent,
+				 struct power_supply *psy);
 extern void power_supply_unregister(struct power_supply *psy);
 extern int power_supply_powers(struct power_supply *psy, struct device *dev);
 

commit abce97708a9b5ba897ad94fa289804d8af8d3ea9
Author: Sebastian Reichel <sre@debian.org>
Date:   Sun Nov 24 17:49:29 2013 +0100

    power_supply: Add power_supply_get_by_phandle
    
    Add method to get power supply by device tree phandle.
    
    Signed-off-by: Sebastian Reichel <sre@debian.org>
    Reviewed-by: Pavel Machek <pavel@ucw.cz>
    Signed-off-by: Anton Vorontsov <anton@enomsg.org>

diff --git a/include/linux/power_supply.h b/include/linux/power_supply.h
index 3e28fe188d17..c9dc4e09854c 100644
--- a/include/linux/power_supply.h
+++ b/include/linux/power_supply.h
@@ -244,6 +244,14 @@ extern struct atomic_notifier_head power_supply_notifier;
 extern int power_supply_reg_notifier(struct notifier_block *nb);
 extern void power_supply_unreg_notifier(struct notifier_block *nb);
 extern struct power_supply *power_supply_get_by_name(const char *name);
+#ifdef CONFIG_OF
+extern struct power_supply *power_supply_get_by_phandle(struct device_node *np,
+							const char *property);
+#else /* !CONFIG_OF */
+static inline struct power_supply *
+power_supply_get_by_phandle(struct device_node *np, const char *property)
+{ return NULL; }
+#endif /* CONFIG_OF */
 extern void power_supply_changed(struct power_supply *psy);
 extern int power_supply_am_i_supplied(struct power_supply *psy);
 extern int power_supply_set_battery_charged(struct power_supply *psy);

commit d36240d26025bec95f3499e2401a56db98d9f01c
Author: Pali Rohár <pali.rohar@gmail.com>
Date:   Tue Nov 19 11:18:03 2013 +0100

    power_supply: Add power_supply notifier
    
    This patch adds a notifier chain to the power_supply, this helps drivers
    in other subsystem to listen to changes in power supply subsystem.
    
    This would help to take some actions in those drivers on changing the
    power supply properties. One such scenario is to increase/decrease system
    performance based on the battery capacity/voltage. Another scenario is to
    adjust the h/w peak current detection voltage/current thresholds based on
    battery voltage/capacity. The notifier helps drivers to listen to changes
    in power_suppy susbystem without polling the power_supply properties
    
    Signed-off-by: Jenny TC <jenny.tc@intel.com>
    Signed-off-by: Pali Rohár <pali.rohar@gmail.com>
    Acked-by: Jenny TC <jenny.tc@intel.com>
    Signed-off-by: Anton Vorontsov <anton@enomsg.org>

diff --git a/include/linux/power_supply.h b/include/linux/power_supply.h
index 5c2600630dc9..3e28fe188d17 100644
--- a/include/linux/power_supply.h
+++ b/include/linux/power_supply.h
@@ -16,6 +16,7 @@
 #include <linux/workqueue.h>
 #include <linux/leds.h>
 #include <linux/spinlock.h>
+#include <linux/notifier.h>
 
 struct device;
 
@@ -158,6 +159,10 @@ enum power_supply_type {
 	POWER_SUPPLY_TYPE_USB_ACA,	/* Accessory Charger Adapters */
 };
 
+enum power_supply_notifier_events {
+	PSY_EVENT_PROP_CHANGED,
+};
+
 union power_supply_propval {
 	int intval;
 	const char *strval;
@@ -235,6 +240,9 @@ struct power_supply_info {
 	int use_for_apm;
 };
 
+extern struct atomic_notifier_head power_supply_notifier;
+extern int power_supply_reg_notifier(struct notifier_block *nb);
+extern void power_supply_unreg_notifier(struct notifier_block *nb);
 extern struct power_supply *power_supply_get_by_name(const char *name);
 extern void power_supply_changed(struct power_supply *psy);
 extern int power_supply_am_i_supplied(struct power_supply *psy);

commit 948dcf96622814d2a850a12851d27824530a9747
Author: Zoran Markovic <zoran.markovic@linaro.org>
Date:   Fri Aug 2 13:38:02 2013 -0700

    power_supply: Prevent suspend until power supply events are processed
    
    This patch, originally authored by Arve Hjonnevag and Todd Poynor,
    prevents the system from entering suspend mode until the power supply
    plug, unplug, or any other change of state event is fully processed. This
    guarantees that the screen lights up and displays the battery charging
    state. The implementation uses the power supply wakeup_source object.
    
    Cc: David Woodhouse <dwmw2@infradead.org>
    Cc: Arve Hjonnevag <arve@android.com>
    Cc: Todd Poynor <toddpoynor@google.com>
    Cc: John Stultz <john.stultz@linaro.org>
    Signed-off-by: Zoran Markovic <zoran.markovic@linaro.org>
    Signed-off-by: Anton Vorontsov <anton@enomsg.org>

diff --git a/include/linux/power_supply.h b/include/linux/power_supply.h
index 804b90643a85..5c2600630dc9 100644
--- a/include/linux/power_supply.h
+++ b/include/linux/power_supply.h
@@ -15,6 +15,7 @@
 
 #include <linux/workqueue.h>
 #include <linux/leds.h>
+#include <linux/spinlock.h>
 
 struct device;
 
@@ -194,6 +195,8 @@ struct power_supply {
 	/* private */
 	struct device *dev;
 	struct work_struct changed_work;
+	spinlock_t changed_lock;
+	bool changed;
 #ifdef CONFIG_THERMAL
 	struct thermal_zone_device *tzd;
 	struct thermal_cooling_device *tcd;

commit b50df95c8f0703c95625181d2eaf53855c5ebee5
Author: Anton Vorontsov <anton@enomsg.org>
Date:   Fri Jun 28 18:17:22 2013 -0700

    power_supply: Move of_node out of the #ifdef CONFIG_OF
    
    Similar to linux/device.h, move of_node struct member out of the #ifdef
    CONFIG_OF so that the drivers won't have to mess with #ifdefs in .c files.
    
    Signed-off-by: Anton Vorontsov <anton@enomsg.org>

diff --git a/include/linux/power_supply.h b/include/linux/power_supply.h
index 3828cefb4f65..804b90643a85 100644
--- a/include/linux/power_supply.h
+++ b/include/linux/power_supply.h
@@ -162,6 +162,8 @@ union power_supply_propval {
 	const char *strval;
 };
 
+struct device_node;
+
 struct power_supply {
 	const char *name;
 	enum power_supply_type type;
@@ -173,9 +175,7 @@ struct power_supply {
 
 	char **supplied_from;
 	size_t num_supplies;
-#ifdef CONFIG_OF
 	struct device_node *of_node;
-#endif
 
 	int (*get_property)(struct power_supply *psy,
 			    enum power_supply_property psp,

commit f6e0b081fb300a4601b064346963cf6bb163f437
Author: Rhyland Klein <rklein@nvidia.com>
Date:   Mon Apr 1 17:45:55 2013 -0400

    power_supply: Populate supplied_from hierarchy from the device tree
    
    With this patch the power_supply_core will try to populate supplied_from
    hierarchy from the device tree.
    
    Signed-off-by: Rhyland Klein <rklein@nvidia.com>
    Signed-off-by: Anton Vorontsov <anton@enomsg.org>

diff --git a/include/linux/power_supply.h b/include/linux/power_supply.h
index c1cbd5e4e484..3828cefb4f65 100644
--- a/include/linux/power_supply.h
+++ b/include/linux/power_supply.h
@@ -173,6 +173,9 @@ struct power_supply {
 
 	char **supplied_from;
 	size_t num_supplies;
+#ifdef CONFIG_OF
+	struct device_node *of_node;
+#endif
 
 	int (*get_property)(struct power_supply *psy,
 			    enum power_supply_property psp,

commit 5e0848c6026ab98f47e0e179f5c76875cd509d58
Author: Rhyland Klein <rklein@nvidia.com>
Date:   Mon Apr 1 17:45:54 2013 -0400

    power_supply: Add core support for supplied_from
    
    This patch adds support for supplies to register a list of char *'s which
    represent the list of supplies which supply them. This is the opposite as
    the supplied_to list.
    
    This change maintains support for supplied_to until all drivers which make
    use of it already are converted.
    
    Signed-off-by: Rhyland Klein <rklein@nvidia.com>
    Reviewed-by: Stephen Warren <swarren@nvidia.com>
    Signed-off-by: Anton Vorontsov <anton@enomsg.org>

diff --git a/include/linux/power_supply.h b/include/linux/power_supply.h
index 002a99f96331..c1cbd5e4e484 100644
--- a/include/linux/power_supply.h
+++ b/include/linux/power_supply.h
@@ -171,6 +171,9 @@ struct power_supply {
 	char **supplied_to;
 	size_t num_supplicants;
 
+	char **supplied_from;
+	size_t num_supplies;
+
 	int (*get_property)(struct power_supply *psy,
 			    enum power_supply_property psp,
 			    union power_supply_propval *val);

commit 06991c28f37ad68e5c03777f5c3b679b56e3dac1
Merge: 460dc1eecf37 74fef7a8fd1d
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Thu Feb 21 12:05:51 2013 -0800

    Merge tag 'driver-core-3.9-rc1' of git://git.kernel.org/pub/scm/linux/kernel/git/gregkh/driver-core
    
    Pull driver core patches from Greg Kroah-Hartman:
     "Here is the big driver core merge for 3.9-rc1
    
      There are two major series here, both of which touch lots of drivers
      all over the kernel, and will cause you some merge conflicts:
    
       - add a new function called devm_ioremap_resource() to properly be
         able to check return values.
    
       - remove CONFIG_EXPERIMENTAL
    
      Other than those patches, there's not much here, some minor fixes and
      updates"
    
    Fix up trivial conflicts
    
    * tag 'driver-core-3.9-rc1' of git://git.kernel.org/pub/scm/linux/kernel/git/gregkh/driver-core: (221 commits)
      base: memory: fix soft/hard_offline_page permissions
      drivercore: Fix ordering between deferred_probe and exiting initcalls
      backlight: fix class_find_device() arguments
      TTY: mark tty_get_device call with the proper const values
      driver-core: constify data for class_find_device()
      firmware: Ignore abort check when no user-helper is used
      firmware: Reduce ifdef CONFIG_FW_LOADER_USER_HELPER
      firmware: Make user-mode helper optional
      firmware: Refactoring for splitting user-mode helper code
      Driver core: treat unregistered bus_types as having no devices
      watchdog: Convert to devm_ioremap_resource()
      thermal: Convert to devm_ioremap_resource()
      spi: Convert to devm_ioremap_resource()
      power: Convert to devm_ioremap_resource()
      mtd: Convert to devm_ioremap_resource()
      mmc: Convert to devm_ioremap_resource()
      mfd: Convert to devm_ioremap_resource()
      media: Convert to devm_ioremap_resource()
      iommu: Convert to devm_ioremap_resource()
      drm: Convert to devm_ioremap_resource()
      ...

commit 9f3b795a626ee79574595e06d1437fe0c7d51d29
Author: Michał Mirosław <mirq-linux@rere.qmqm.pl>
Date:   Fri Feb 1 20:40:17 2013 +0100

    driver-core: constify data for class_find_device()
    
    All in-kernel users of class_find_device() don't really need mutable
    data for match callback.
    
    In two places (kernel/power/suspend_test.c, drivers/scsi/osd/osd_uld.c)
    this patch changes match callbacks to use const search data.
    
    The const is propagated to rtc_class_open() and power_supply_get_by_name()
    parameters.
    
    Note that there's a dev reference leak in suspend_test.c that's not
    touched in this patch.
    
    Signed-off-by: Michał Mirosław <mirq-linux@rere.qmqm.pl>
    Acked-by: Grant Likely <grant.likely@secretlab.ca>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/include/linux/power_supply.h b/include/linux/power_supply.h
index 1f0ab90aff00..86ecaa679ded 100644
--- a/include/linux/power_supply.h
+++ b/include/linux/power_supply.h
@@ -224,7 +224,7 @@ struct power_supply_info {
 	int use_for_apm;
 };
 
-extern struct power_supply *power_supply_get_by_name(char *name);
+extern struct power_supply *power_supply_get_by_name(const char *name);
 extern void power_supply_changed(struct power_supply *psy);
 extern int power_supply_am_i_supplied(struct power_supply *psy);
 extern int power_supply_set_battery_charged(struct power_supply *psy);

commit a05be99174edc9f258ee68140b71b9645ad977ee
Author: Ramakrishna Pallala <ramakrishna.pallala@intel.com>
Date:   Fri Nov 30 13:57:46 2012 +0530

    power_supply: Add watchdog and safety timer expiries under PROP_HEALTH_*
    
    As most of the charger chips come with two kinds of safety features
    related to timing:
    
    1. Watchdog Timer (interms of seconds/mins)
    2. Safety Timer (interms of hours)
    
    This patch adds these to fault causes in POWER_SUPPLY_PROP_HEALTH_* enums
    so that whenever there is either watchdog timeout or safety timer timeout
    driver could notify the user space accurately about the fault and will
    also be helpful for debug.
    
    Signed-off-by: Ramakrishna Pallala <ramakrishna.pallala@intel.com>
    Signed-off-by: Anton Vorontsov <anton@enomsg.org>

diff --git a/include/linux/power_supply.h b/include/linux/power_supply.h
index 1f0ab90aff00..25c0982eb9b1 100644
--- a/include/linux/power_supply.h
+++ b/include/linux/power_supply.h
@@ -54,6 +54,8 @@ enum {
 	POWER_SUPPLY_HEALTH_OVERVOLTAGE,
 	POWER_SUPPLY_HEALTH_UNSPEC_FAILURE,
 	POWER_SUPPLY_HEALTH_COLD,
+	POWER_SUPPLY_HEALTH_WATCHDOG_TIMER_EXPIRE,
+	POWER_SUPPLY_HEALTH_SAFETY_TIMER_EXPIRE,
 };
 
 enum {

commit 952aeeb3ee28bc12a70744e40636de40688eb60d
Author: Ramakrishna Pallala <ramakrishna.pallala@intel.com>
Date:   Tue Oct 9 22:25:59 2012 +0530

    power_supply: Register power supply for thermal cooling device
    
    This patch registers the power supply as a cooling device if the power
    supply has support for charge throttling.
    
    Now with this change low level drivers need not register with thermal
    framework as it is automatically done by power supply framework.
    
    Signed-off-by: Ramakrishna Pallala <ramakrishna.pallala@intel.com>
    Signed-off-by: Anton Vorontsov <anton.vorontsov@linaro.org>

diff --git a/include/linux/power_supply.h b/include/linux/power_supply.h
index 445b4b249af5..1f0ab90aff00 100644
--- a/include/linux/power_supply.h
+++ b/include/linux/power_supply.h
@@ -188,6 +188,7 @@ struct power_supply {
 	struct work_struct changed_work;
 #ifdef CONFIG_THERMAL
 	struct thermal_zone_device *tzd;
+	struct thermal_cooling_device *tcd;
 #endif
 
 #ifdef CONFIG_LEDS_TRIGGERS

commit ea2ce92e44dc83b7a69c2aedd9c52bfe7fee1a62
Author: Ramakrishna Pallala <ramakrishna.pallala@intel.com>
Date:   Tue Oct 9 22:25:29 2012 +0530

    power_supply: Add support for CHARGE_CONTROL_* attributes
    
    Add support for power supply attributes CHARGE_CONTROL_LIMIT
    and CHARGE_CONTROL_LIMIT_MAX.
    
    These new attributes will enable the user space to implement
    custom charging algorithms based on platform state.
    
    Signed-off-by: Ramakrishna Pallala <ramakrishna.pallala@intel.com>
    Signed-off-by: Anton Vorontsov <anton.vorontsov@linaro.org>

diff --git a/include/linux/power_supply.h b/include/linux/power_supply.h
index e5ef45834c3c..445b4b249af5 100644
--- a/include/linux/power_supply.h
+++ b/include/linux/power_supply.h
@@ -114,6 +114,8 @@ enum power_supply_property {
 	POWER_SUPPLY_PROP_CONSTANT_CHARGE_CURRENT_MAX,
 	POWER_SUPPLY_PROP_CONSTANT_CHARGE_VOLTAGE,
 	POWER_SUPPLY_PROP_CONSTANT_CHARGE_VOLTAGE_MAX,
+	POWER_SUPPLY_PROP_CHARGE_CONTROL_LIMIT,
+	POWER_SUPPLY_PROP_CHARGE_CONTROL_LIMIT_MAX,
 	POWER_SUPPLY_PROP_ENERGY_FULL_DESIGN,
 	POWER_SUPPLY_PROP_ENERGY_EMPTY_DESIGN,
 	POWER_SUPPLY_PROP_ENERGY_FULL,

commit 2815b786c3bb86fff97f1f6e2f0874903ff2339b
Author: Ramakrishna Pallala <ramakrishna.pallala@intel.com>
Date:   Mon Jul 30 12:49:21 2012 +0530

    power_supply: Add new power supply properties CHARGE_CURRENT/VOLTAGE_MAX
    
    There are different types of chargers avalibale like AC, Solar, USB,
    etc..  Even in USB we have different types SDP/DCP/CDP/ACA and all these
    chargers have different o/p ratings. For example SDP supports only 500mA
    of charge current whereas AC charger can support upto 8A or more.
    
    Similarly batteries also come with charge current and voltage ratings
    and these ratings vary depending on its capacity and the technology
    used.
    
    This patch adds two new power supply properties
    CONSTANT_CHARGE_CURRENT_MAX and CONSTANT_CHARGE_CURRENT_MAX.
    
    Signed-off-by: Ramakrishna Pallala <ramakrishna.pallala@intel.com>
    Signed-off-by: Anton Vorontsov <anton.vorontsov@linaro.org>

diff --git a/include/linux/power_supply.h b/include/linux/power_supply.h
index 204d43dc6ddc..e5ef45834c3c 100644
--- a/include/linux/power_supply.h
+++ b/include/linux/power_supply.h
@@ -111,7 +111,9 @@ enum power_supply_property {
 	POWER_SUPPLY_PROP_CHARGE_AVG,
 	POWER_SUPPLY_PROP_CHARGE_COUNTER,
 	POWER_SUPPLY_PROP_CONSTANT_CHARGE_CURRENT,
+	POWER_SUPPLY_PROP_CONSTANT_CHARGE_CURRENT_MAX,
 	POWER_SUPPLY_PROP_CONSTANT_CHARGE_VOLTAGE,
+	POWER_SUPPLY_PROP_CONSTANT_CHARGE_VOLTAGE_MAX,
 	POWER_SUPPLY_PROP_ENERGY_FULL_DESIGN,
 	POWER_SUPPLY_PROP_ENERGY_EMPTY_DESIGN,
 	POWER_SUPPLY_PROP_ENERGY_FULL,
@@ -249,6 +251,7 @@ static inline bool power_supply_is_amp_property(enum power_supply_property psp)
 	case POWER_SUPPLY_PROP_CHARGE_AVG:
 	case POWER_SUPPLY_PROP_CHARGE_COUNTER:
 	case POWER_SUPPLY_PROP_CONSTANT_CHARGE_CURRENT:
+	case POWER_SUPPLY_PROP_CONSTANT_CHARGE_CURRENT_MAX:
 	case POWER_SUPPLY_PROP_CURRENT_MAX:
 	case POWER_SUPPLY_PROP_CURRENT_NOW:
 	case POWER_SUPPLY_PROP_CURRENT_AVG:
@@ -277,6 +280,7 @@ static inline bool power_supply_is_watt_property(enum power_supply_property psp)
 	case POWER_SUPPLY_PROP_VOLTAGE_AVG:
 	case POWER_SUPPLY_PROP_VOLTAGE_OCV:
 	case POWER_SUPPLY_PROP_CONSTANT_CHARGE_VOLTAGE:
+	case POWER_SUPPLY_PROP_CONSTANT_CHARGE_VOLTAGE_MAX:
 	case POWER_SUPPLY_PROP_POWER_NOW:
 		return 1;
 	default:

commit b1b56872be3b36af19313bf0953b1361c36b4a98
Author: Ramakrishna Pallala <ramakrishna.pallala@intel.com>
Date:   Thu Aug 23 06:50:21 2012 +0530

    power_supply: Add new power supply AUTHENTIC property
    
    It is possible that users can use non-standard chargers or use invalid
    batteries especially with mobile devices.
    
    This patch adds a new power supply property called 'AUTHENTIC' to
    indicate this to the user(user space).
    
    Signed-off-by: Ramakrishna Pallala <ramakrishna.pallala@intel.com>
    Signed-off-by: Anton Vorontsov <anton.vorontsov@linaro.org>

diff --git a/include/linux/power_supply.h b/include/linux/power_supply.h
index 0bafbb15f29c..204d43dc6ddc 100644
--- a/include/linux/power_supply.h
+++ b/include/linux/power_supply.h
@@ -88,6 +88,7 @@ enum power_supply_property {
 	POWER_SUPPLY_PROP_HEALTH,
 	POWER_SUPPLY_PROP_PRESENT,
 	POWER_SUPPLY_PROP_ONLINE,
+	POWER_SUPPLY_PROP_AUTHENTIC,
 	POWER_SUPPLY_PROP_TECHNOLOGY,
 	POWER_SUPPLY_PROP_CYCLE_COUNT,
 	POWER_SUPPLY_PROP_VOLTAGE_MAX,

commit e908c41806bdb9151c8f875c4f9d73c6f66e3bc8
Author: Ramakrishna Pallala <ramakrishna.pallala@intel.com>
Date:   Thu Jul 5 16:59:12 2012 +0530

    power_supply: Add min/max alert properties for CAPACITY, TEMP, TEMP_AMBIENT
    
    Minimum and maximum alerts on power supply properties will help or allow
    the user space to "proactively" create policies like connect/disconnect
    charger or stop/start the user apps based on capacity or temperature
    parameters.
    
    These parameters can be used to avoid unnecessary polling from user space
    and even from kernel space if the underlying HW can support INT triggers
    (ex: max17042/47).
    
    This patch adds the following power supply alert type properties:
    
     CAPACITY_ALERT_MIN
     CAPACITY_ALERT_MAX
     TEMP_ALERT_MIN
     TEMP_ALERT_MAX
     TEMP_AMBIENT_ALERT_MIN
     TEMP_AMBIENT_ALERT_MAX
    
    Signed-off-by: Ramakrishna Pallala <ramakrishna.pallala@intel.com>
    Signed-off-by: Anton Vorontsov <anton.vorontsov@linaro.org>

diff --git a/include/linux/power_supply.h b/include/linux/power_supply.h
index 53f177db6ac9..0bafbb15f29c 100644
--- a/include/linux/power_supply.h
+++ b/include/linux/power_supply.h
@@ -118,9 +118,15 @@ enum power_supply_property {
 	POWER_SUPPLY_PROP_ENERGY_NOW,
 	POWER_SUPPLY_PROP_ENERGY_AVG,
 	POWER_SUPPLY_PROP_CAPACITY, /* in percents! */
+	POWER_SUPPLY_PROP_CAPACITY_ALERT_MIN, /* in percents! */
+	POWER_SUPPLY_PROP_CAPACITY_ALERT_MAX, /* in percents! */
 	POWER_SUPPLY_PROP_CAPACITY_LEVEL,
 	POWER_SUPPLY_PROP_TEMP,
+	POWER_SUPPLY_PROP_TEMP_ALERT_MIN,
+	POWER_SUPPLY_PROP_TEMP_ALERT_MAX,
 	POWER_SUPPLY_PROP_TEMP_AMBIENT,
+	POWER_SUPPLY_PROP_TEMP_AMBIENT_ALERT_MIN,
+	POWER_SUPPLY_PROP_TEMP_AMBIENT_ALERT_MAX,
 	POWER_SUPPLY_PROP_TIME_TO_EMPTY_NOW,
 	POWER_SUPPLY_PROP_TIME_TO_EMPTY_AVG,
 	POWER_SUPPLY_PROP_TIME_TO_FULL_NOW,

commit 3824c47714f28091f74ca2505146514b4da1f390
Author: Ramakrishna Pallala <ramakrishna.pallala@intel.com>
Date:   Sun May 6 18:16:44 2012 +0530

    power_supply: Add constant charge_current and charge_voltage properties
    
    Constant Charge Current(CC) is charging parameter which limit the
    maximum current which can be pumped into the battery during charge cycle.
    
    Constant Charge Voltage(CV) is also charging parameter which limit the
    maximum voltage that battery can reach during charge cycle.
    
    It is very common practice that at low or high temperatures we
    do not charge the batteries upto it's fullest charge voltage
    to avoid battery and user safety issues.
    
    These sysfs properties will be useful for debug and to implement
    certain user space policies like "Charging limited due to OverTemp".
    
    Signed-off-by: Ramakrishna Pallala <ramakrishna.pallala@intel.com>
    Signed-off-by: Anton Vorontsov <cbouatmailru@gmail.com>

diff --git a/include/linux/power_supply.h b/include/linux/power_supply.h
index 59ed2dd9dba9..53f177db6ac9 100644
--- a/include/linux/power_supply.h
+++ b/include/linux/power_supply.h
@@ -109,6 +109,8 @@ enum power_supply_property {
 	POWER_SUPPLY_PROP_CHARGE_NOW,
 	POWER_SUPPLY_PROP_CHARGE_AVG,
 	POWER_SUPPLY_PROP_CHARGE_COUNTER,
+	POWER_SUPPLY_PROP_CONSTANT_CHARGE_CURRENT,
+	POWER_SUPPLY_PROP_CONSTANT_CHARGE_VOLTAGE,
 	POWER_SUPPLY_PROP_ENERGY_FULL_DESIGN,
 	POWER_SUPPLY_PROP_ENERGY_EMPTY_DESIGN,
 	POWER_SUPPLY_PROP_ENERGY_FULL,
@@ -239,6 +241,7 @@ static inline bool power_supply_is_amp_property(enum power_supply_property psp)
 	case POWER_SUPPLY_PROP_CHARGE_NOW:
 	case POWER_SUPPLY_PROP_CHARGE_AVG:
 	case POWER_SUPPLY_PROP_CHARGE_COUNTER:
+	case POWER_SUPPLY_PROP_CONSTANT_CHARGE_CURRENT:
 	case POWER_SUPPLY_PROP_CURRENT_MAX:
 	case POWER_SUPPLY_PROP_CURRENT_NOW:
 	case POWER_SUPPLY_PROP_CURRENT_AVG:
@@ -266,6 +269,7 @@ static inline bool power_supply_is_watt_property(enum power_supply_property psp)
 	case POWER_SUPPLY_PROP_VOLTAGE_NOW:
 	case POWER_SUPPLY_PROP_VOLTAGE_AVG:
 	case POWER_SUPPLY_PROP_VOLTAGE_OCV:
+	case POWER_SUPPLY_PROP_CONSTANT_CHARGE_VOLTAGE:
 	case POWER_SUPPLY_PROP_POWER_NOW:
 		return 1;
 	default:

commit 3be330bf8860dc6079da5acc81295787a04cf4c9
Author: Jenny TC <jenny.tc@intel.com>
Date:   Wed May 9 20:36:47 2012 +0530

    power_supply: Register battery as a thermal zone
    
    Battery and charger contribute to Thermals in most of the embedded
    devices. So, it makes sense to identify them as Thermal zones in a
    particular platform.
    
    This patch registers a thermal zone if the power supply is reporting
    a temperature property. The thermal zone will be used by platform's
    thermal management solution.
    
    Signed-off-by: Jenny TC <jenny.tc@intel.com>
    Signed-off-by: Anton Vorontsov <cbouatmailru@gmail.com>

diff --git a/include/linux/power_supply.h b/include/linux/power_supply.h
index 3b912bee28d1..59ed2dd9dba9 100644
--- a/include/linux/power_supply.h
+++ b/include/linux/power_supply.h
@@ -173,6 +173,9 @@ struct power_supply {
 	/* private */
 	struct device *dev;
 	struct work_struct changed_work;
+#ifdef CONFIG_THERMAL
+	struct thermal_zone_device *tzd;
+#endif
 
 #ifdef CONFIG_LEDS_TRIGGERS
 	struct led_trigger *charging_full_trig;

commit 0d4ed4e27a4cb180af395fa3d7aa98d79f3d3015
Author: Anton Vorontsov <cbouatmailru@gmail.com>
Date:   Fri May 4 21:06:19 2012 -0700

    power_supply: Make the core a boolean instead of a tristate
    
    On Mon, Apr 02, 2012 at 01:53:23PM +1000, Benjamin Herrenschmidt wrote:
    > > drivers/built-in.o: In function `.nouveau_pm_trigger':
    > > (.text+0xa56e8): undefined reference to `.power_supply_is_system_supplied'
    > >
    > > nouveau probably needs to depends on CONFIG_POWER_SUPPLY to force a module
    > > build with the latter is =m
    >
    > Ok, not that trivial...
    >
    > The problem is more like POWER_SUPPLY should be a bool, not a tristate.
    >
    > If you think about it: you don't want things like nouveau to depend on a
    > random subsystem like that, people will never get it. In fact,
    > POWER_SUPPLY provides empty inline stubs when not enabled, so that's
    > really designed to not have depends...
    >
    > However that -cannot- work if POWER_SUPPLY is modular and the drivers
    > who use it are not.
    >
    > The only fixes here that make sense I can think of
    > that don't also involve Kconfig horrors are:
    >
    >  - Ugly: in power_supply.h, use the extern variant if
    >
    >       defined(CONFIG_POWER_SUPPLY) ||
    >        (defined(CONFIG_POWER_SUPPLY_MODULE) && defined(MODULE))
    >
    > IE. use the stub if power supply is a module and what is being built is
    > built-in. Of course that's not only ugly, it somewhat sucks from a user
    > perspective as the subsystem now exists but can't be used by some
    > drivers...
    >
    >  - Better: Just make the bloody thing a bool :-) The power supply
    > framework itself is small enough, just make it a boolean option and
    > avoid the problem entirely. The actual power supply sub drivers can
    > remain modular of course.
    
    Suggested-by: Benjamin Herrenschmidt <benh@kernel.crashing.org>
    Signed-off-by: Anton Vorontsov <cbouatmailru@gmail.com>

diff --git a/include/linux/power_supply.h b/include/linux/power_supply.h
index fd17ae0f9c20..3b912bee28d1 100644
--- a/include/linux/power_supply.h
+++ b/include/linux/power_supply.h
@@ -212,7 +212,7 @@ extern void power_supply_changed(struct power_supply *psy);
 extern int power_supply_am_i_supplied(struct power_supply *psy);
 extern int power_supply_set_battery_charged(struct power_supply *psy);
 
-#if defined(CONFIG_POWER_SUPPLY) || defined(CONFIG_POWER_SUPPLY_MODULE)
+#ifdef CONFIG_POWER_SUPPLY
 extern int power_supply_is_system_supplied(void);
 #else
 static inline int power_supply_is_system_supplied(void) { return -ENOSYS; }

commit a2ebfe2fc6e088a70d06cd15a5bc9bcb621cc195
Author: Ramakrishna Pallala <ramakrishna.pallala@intel.com>
Date:   Tue Apr 10 16:21:20 2012 +0530

    power_supply: Add voltage_ocv property and use it for max17042 driver
    
    This adds a new sysfs file called 'voltage_ocv' which gives the
    Open Circuit Voltage of the battery.
    
    This property can be used for platform shutdown policies and
    can be useful for initial capacity estimations.
    
    Note: This patch is generated against linux-next branch.
    
    Signed-off-by: Ramakrishna Pallala <ramakrishna.pallala@intel.com>
    Signed-off-by: Anton Vorontsov <anton.vorontsov@linaro.org>

diff --git a/include/linux/power_supply.h b/include/linux/power_supply.h
index c38c13db8832..fd17ae0f9c20 100644
--- a/include/linux/power_supply.h
+++ b/include/linux/power_supply.h
@@ -96,6 +96,7 @@ enum power_supply_property {
 	POWER_SUPPLY_PROP_VOLTAGE_MIN_DESIGN,
 	POWER_SUPPLY_PROP_VOLTAGE_NOW,
 	POWER_SUPPLY_PROP_VOLTAGE_AVG,
+	POWER_SUPPLY_PROP_VOLTAGE_OCV,
 	POWER_SUPPLY_PROP_CURRENT_MAX,
 	POWER_SUPPLY_PROP_CURRENT_NOW,
 	POWER_SUPPLY_PROP_CURRENT_AVG,
@@ -261,6 +262,7 @@ static inline bool power_supply_is_watt_property(enum power_supply_property psp)
 	case POWER_SUPPLY_PROP_VOLTAGE_MIN_DESIGN:
 	case POWER_SUPPLY_PROP_VOLTAGE_NOW:
 	case POWER_SUPPLY_PROP_VOLTAGE_AVG:
+	case POWER_SUPPLY_PROP_VOLTAGE_OCV:
 	case POWER_SUPPLY_PROP_POWER_NOW:
 		return 1;
 	default:

commit 313162d0b83836e2f57e51b9b8650fb4b9c396ea
Author: Paul Gortmaker <paul.gortmaker@windriver.com>
Date:   Mon Jan 30 11:46:54 2012 -0500

    device.h: audit and cleanup users in main include dir
    
    The <linux/device.h> header includes a lot of stuff, and
    it in turn gets a lot of use just for the basic "struct device"
    which appears so often.
    
    Clean up the users as follows:
    
    1) For those headers only needing "struct device" as a pointer
    in fcn args, replace the include with exactly that.
    
    2) For headers not really using anything from device.h, simply
    delete the include altogether.
    
    3) For headers relying on getting device.h implicitly before
    being included themselves, now explicitly include device.h
    
    4) For files in which doing #1 or #2 uncovers an implicit
    dependency on some other header, fix by explicitly adding
    the required header(s).
    
    Any C files that were implicitly relying on device.h to be
    present have already been dealt with in advance.
    
    Total removals from #1 and #2: 51.  Total additions coming
    from #3: 9.  Total other implicit dependencies from #4: 7.
    
    As of 3.3-rc1, there were 110, so a net removal of 42 gives
    about a 38% reduction in device.h presence in include/*
    
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>

diff --git a/include/linux/power_supply.h b/include/linux/power_supply.h
index fa9b962aec12..c38c13db8832 100644
--- a/include/linux/power_supply.h
+++ b/include/linux/power_supply.h
@@ -13,10 +13,11 @@
 #ifndef __LINUX_POWER_SUPPLY_H__
 #define __LINUX_POWER_SUPPLY_H__
 
-#include <linux/device.h>
 #include <linux/workqueue.h>
 #include <linux/leds.h>
 
+struct device;
+
 /*
  * All voltages, currents, charges, energies, time and temperatures in uV,
  * µA, µAh, µWh, seconds and tenths of degree Celsius unless otherwise

commit 251f39fe42dae863bd24e30864e6b66076ba076d
Merge: 9b8872273af6 35b4c01e29bd
Author: Anton Vorontsov <cbouatmailru@gmail.com>
Date:   Wed Jan 4 09:09:35 2012 +0400

    Merge branch 'power-supply-scope' of git://git.kernel.org/pub/scm/linux/kernel/git/jeremy/xen

commit 9b8872273af6983b246252a6508fa7cf34c69d6e
Author: Kim, Milo <Milo.Kim@ti.com>
Date:   Wed Nov 30 23:08:33 2011 -0800

    power_supply: Add "unknown" in power supply type
    
    For the default value of power supply type, "unknown" is added.
    With default prop value, supply type property can be displayed
    as default - "Unknown".
    
    Signed-off-by: Milo(Woogyom) Kim <milo.kim@ti.com>
    Signed-off-by: Anton Vorontsov <cbouatmailru@gmail.com>

diff --git a/include/linux/power_supply.h b/include/linux/power_supply.h
index 204c18dfdc9e..9c83e04f6a43 100644
--- a/include/linux/power_supply.h
+++ b/include/linux/power_supply.h
@@ -123,7 +123,8 @@ enum power_supply_property {
 };
 
 enum power_supply_type {
-	POWER_SUPPLY_TYPE_BATTERY = 0,
+	POWER_SUPPLY_TYPE_UNKNOWN = 0,
+	POWER_SUPPLY_TYPE_BATTERY,
 	POWER_SUPPLY_TYPE_UPS,
 	POWER_SUPPLY_TYPE_MAINS,
 	POWER_SUPPLY_TYPE_USB,		/* Standard Downstream Port */

commit 8351665195cec6d2b73cce8b66f02d6dde246a8e
Author: Jeremy Fitzhardinge <jeremy@goop.org>
Date:   Wed Dec 7 09:15:45 2011 -0800

    power_supply: allow a power supply to explicitly point to powered device
    
    If a power supply has a scope of "Device", then allow the power supply
    to indicate what device it actually powers. This is represented in the
    power supply's sysfs directory as a symlink named "powers", which points to
    the sysfs directory of the powered device.
    
    If the device has children, then the sub-devices are also powered by
    the same power supply.
    
    Signed-off-by: Jeremy Fitzhardinge <jeremy@goop.org>
    Cc: Richard Hughes <richard@hughsie.com>

diff --git a/include/linux/power_supply.h b/include/linux/power_supply.h
index 040a7b08e7c7..2e3c8279b3b0 100644
--- a/include/linux/power_supply.h
+++ b/include/linux/power_supply.h
@@ -218,6 +218,7 @@ static inline int power_supply_is_system_supplied(void) { return -ENOSYS; }
 extern int power_supply_register(struct device *parent,
 				 struct power_supply *psy);
 extern void power_supply_unregister(struct power_supply *psy);
+extern int power_supply_powers(struct power_supply *psy, struct device *dev);
 
 /* For APM emulation, think legacy userspace. */
 extern struct class *power_supply_class;

commit 25a0bc2dfc2ea732f40af2dae52426ead66ae76e
Author: Jeremy Fitzhardinge <jeremy@goop.org>
Date:   Wed Dec 7 11:24:20 2011 -0800

    power_supply: add SCOPE attribute to power supplies
    
    This adds a "scope" attribute to a power_supply, which indicates how
    much of the system it powers.  It appears in sysfs as "scope" or in
    the uevent file as POWER_SUPPLY_SCOPE=.  There are presently three
    possible values:
            Unknown - unknown power topology
            System - the power supply powers the whole system
            Device - it powers a specific device, or tree of devices
    
    A power supply which doesn't have a "scope" attribute should be assumed to
    have "System" scope.
    
    In general, usermode should assume that loss of all System-scoped power
    supplies will power off the whole system, but any single one is sufficient
    to power the system.
    
    Signed-off-by: Jeremy Fitzhardinge <jeremy@goop.org>
    Cc: Richard Hughes <richard@hughsie.com>

diff --git a/include/linux/power_supply.h b/include/linux/power_supply.h
index 204c18dfdc9e..040a7b08e7c7 100644
--- a/include/linux/power_supply.h
+++ b/include/linux/power_supply.h
@@ -74,6 +74,12 @@ enum {
 	POWER_SUPPLY_CAPACITY_LEVEL_FULL,
 };
 
+enum {
+	POWER_SUPPLY_SCOPE_UNKNOWN = 0,
+	POWER_SUPPLY_SCOPE_SYSTEM,
+	POWER_SUPPLY_SCOPE_DEVICE,
+};
+
 enum power_supply_property {
 	/* Properties of type `int' */
 	POWER_SUPPLY_PROP_STATUS = 0,
@@ -116,6 +122,7 @@ enum power_supply_property {
 	POWER_SUPPLY_PROP_TIME_TO_FULL_NOW,
 	POWER_SUPPLY_PROP_TIME_TO_FULL_AVG,
 	POWER_SUPPLY_PROP_TYPE, /* use power_supply.type instead */
+	POWER_SUPPLY_PROP_SCOPE,
 	/* Properties of type `const char *' */
 	POWER_SUPPLY_PROP_MODEL_NAME,
 	POWER_SUPPLY_PROP_MANUFACTURER,

commit 35c9d267665230cf44445be616d491d3763a5cd3
Author: Rhyland Klein <rklein@nvidia.com>
Date:   Mon Feb 28 16:55:31 2011 -0800

    power_supply: Update power_supply_is_watt_property
    
    Update the power_supply_is_watt_property function to include POWER_NOW.
    
    Signed-off-by: Rhyland Klein <rklein@nvidia.com>
    Signed-off-by: Anton Vorontsov <cbouatmailru@gmail.com>

diff --git a/include/linux/power_supply.h b/include/linux/power_supply.h
index 20f23fef63cc..204c18dfdc9e 100644
--- a/include/linux/power_supply.h
+++ b/include/linux/power_supply.h
@@ -251,6 +251,7 @@ static inline bool power_supply_is_watt_property(enum power_supply_property psp)
 	case POWER_SUPPLY_PROP_VOLTAGE_MIN_DESIGN:
 	case POWER_SUPPLY_PROP_VOLTAGE_NOW:
 	case POWER_SUPPLY_PROP_VOLTAGE_AVG:
+	case POWER_SUPPLY_PROP_POWER_NOW:
 		return 1;
 	default:
 		break;

commit 6501f728c56f831626d52b236023e556bca37f51
Author: Vasily Khoruzhick <anarsoul@gmail.com>
Date:   Fri Jan 7 18:28:17 2011 +0200

    power_supply: Add new LED trigger charging-blink-solid-full
    
    Add new trigger to power_supply LEDs. It will blink when battery is
    charging, and stay solid when battery is charged. It's usefull to
    indicate battery state when there's only one LED available.
    
    Signed-off-by: Vasily Khoruzhick <anarsoul@gmail.com>
    Signed-off-by: Anton Vorontsov <cbouatmailru@gmail.com>

diff --git a/include/linux/power_supply.h b/include/linux/power_supply.h
index e3419fc5541e..20f23fef63cc 100644
--- a/include/linux/power_supply.h
+++ b/include/linux/power_supply.h
@@ -173,6 +173,8 @@ struct power_supply {
 	char *full_trig_name;
 	struct led_trigger *online_trig;
 	char *online_trig_name;
+	struct led_trigger *charging_blink_full_solid_trig;
+	char *charging_blink_full_solid_trig_name;
 #endif
 };
 

commit 51d07566045787b99219d809639c8724506fc78a
Author: Rhyland Klein <rklein@nvidia.com>
Date:   Tue Jan 25 11:10:06 2011 -0800

    bq20z75: Add support for charge properties
    
    Adding support for charge properties for gas gauge.
    
    Also ensuring that battery mode is correct now for energy as well as
    charge properties by setting it on the fly.
    
    I also added 2 functions to power_supply.h to help identify the units for
    specific properties more easily by power supplies.
    
    Signed-off-by: Rhyland Klein <rklein@nvidia.com>
    Signed-off-by: Anton Vorontsov <cbouatmailru@gmail.com>

diff --git a/include/linux/power_supply.h b/include/linux/power_supply.h
index 7d7325685c42..e3419fc5541e 100644
--- a/include/linux/power_supply.h
+++ b/include/linux/power_supply.h
@@ -213,4 +213,48 @@ extern void power_supply_unregister(struct power_supply *psy);
 /* For APM emulation, think legacy userspace. */
 extern struct class *power_supply_class;
 
+static inline bool power_supply_is_amp_property(enum power_supply_property psp)
+{
+	switch (psp) {
+	case POWER_SUPPLY_PROP_CHARGE_FULL_DESIGN:
+	case POWER_SUPPLY_PROP_CHARGE_EMPTY_DESIGN:
+	case POWER_SUPPLY_PROP_CHARGE_FULL:
+	case POWER_SUPPLY_PROP_CHARGE_EMPTY:
+	case POWER_SUPPLY_PROP_CHARGE_NOW:
+	case POWER_SUPPLY_PROP_CHARGE_AVG:
+	case POWER_SUPPLY_PROP_CHARGE_COUNTER:
+	case POWER_SUPPLY_PROP_CURRENT_MAX:
+	case POWER_SUPPLY_PROP_CURRENT_NOW:
+	case POWER_SUPPLY_PROP_CURRENT_AVG:
+		return 1;
+	default:
+		break;
+	}
+
+	return 0;
+}
+
+static inline bool power_supply_is_watt_property(enum power_supply_property psp)
+{
+	switch (psp) {
+	case POWER_SUPPLY_PROP_ENERGY_FULL_DESIGN:
+	case POWER_SUPPLY_PROP_ENERGY_EMPTY_DESIGN:
+	case POWER_SUPPLY_PROP_ENERGY_FULL:
+	case POWER_SUPPLY_PROP_ENERGY_EMPTY:
+	case POWER_SUPPLY_PROP_ENERGY_NOW:
+	case POWER_SUPPLY_PROP_ENERGY_AVG:
+	case POWER_SUPPLY_PROP_VOLTAGE_MAX:
+	case POWER_SUPPLY_PROP_VOLTAGE_MIN:
+	case POWER_SUPPLY_PROP_VOLTAGE_MAX_DESIGN:
+	case POWER_SUPPLY_PROP_VOLTAGE_MIN_DESIGN:
+	case POWER_SUPPLY_PROP_VOLTAGE_NOW:
+	case POWER_SUPPLY_PROP_VOLTAGE_AVG:
+		return 1;
+	default:
+		break;
+	}
+
+	return 0;
+}
+
 #endif /* __LINUX_POWER_SUPPLY_H__ */

commit fe3f6d097a042cff54bc1dc06f21ef528affe8ca
Author: Heikki Krogerus <ext-heikki.krogerus@nokia.com>
Date:   Mon Oct 4 10:51:38 2010 +0300

    power_supply: Introduce maximum current property
    
    USB only gives the maximum current allowed to draw.
    
    Signed-off-by: Heikki Krogerus <ext-heikki.krogerus@nokia.com>
    Signed-off-by: Anton Vorontsov <cbouatmailru@gmail.com>

diff --git a/include/linux/power_supply.h b/include/linux/power_supply.h
index d37fef67ece2..7d7325685c42 100644
--- a/include/linux/power_supply.h
+++ b/include/linux/power_supply.h
@@ -89,6 +89,7 @@ enum power_supply_property {
 	POWER_SUPPLY_PROP_VOLTAGE_MIN_DESIGN,
 	POWER_SUPPLY_PROP_VOLTAGE_NOW,
 	POWER_SUPPLY_PROP_VOLTAGE_AVG,
+	POWER_SUPPLY_PROP_CURRENT_MAX,
 	POWER_SUPPLY_PROP_CURRENT_NOW,
 	POWER_SUPPLY_PROP_CURRENT_AVG,
 	POWER_SUPPLY_PROP_POWER_NOW,

commit 85efc8a18cedf70e55acd0c825e2d9d2f3b19999
Author: Heikki Krogerus <ext-heikki.krogerus@nokia.com>
Date:   Mon Oct 4 10:51:37 2010 +0300

    power_supply: Add types for USB chargers
    
    This adds power supply types for USB chargers defined in
    Battery Charging Specification 1.1.
    
    Signed-off-by: Heikki Krogerus <ext-heikki.krogerus@nokia.com>
    Signed-off-by: Anton Vorontsov <cbouatmailru@gmail.com>

diff --git a/include/linux/power_supply.h b/include/linux/power_supply.h
index 30083a896f36..d37fef67ece2 100644
--- a/include/linux/power_supply.h
+++ b/include/linux/power_supply.h
@@ -125,7 +125,10 @@ enum power_supply_type {
 	POWER_SUPPLY_TYPE_BATTERY = 0,
 	POWER_SUPPLY_TYPE_UPS,
 	POWER_SUPPLY_TYPE_MAINS,
-	POWER_SUPPLY_TYPE_USB,
+	POWER_SUPPLY_TYPE_USB,		/* Standard Downstream Port */
+	POWER_SUPPLY_TYPE_USB_DCP,	/* Dedicated Charging Port */
+	POWER_SUPPLY_TYPE_USB_CDP,	/* Charging Downstream Port */
+	POWER_SUPPLY_TYPE_USB_ACA,	/* Accessory Charger Adapters */
 };
 
 union power_supply_propval {

commit 0011d2d4a5f7bb5666dcfb9f9b3dbdb084ab98f1
Author: Daniel Mack <daniel@caiaq.de>
Date:   Tue May 18 21:49:52 2010 +0200

    power_supply: Add support for writeable properties
    
    This patch adds support for writeable power supply properties and
    exposes them as writeable to sysfs.
    
    A power supply implementation must implement two new function calls in
    order to use that feature:
    
      int set_property(struct power_supply *psy,
                       enum power_supply_property psp,
                       const union power_supply_propval *val);
    
      int property_is_writeable(struct power_supply *psy,
                                enum power_supply_property psp);
    
    Signed-off-by: Daniel Mack <daniel@caiaq.de>
    Cc: David Woodhouse <dwmw2@infradead.org>
    Cc: Alexey Starikovskiy <astarikovskiy@suse.de>
    Cc: Len Brown <len.brown@intel.com>
    Cc: Mark Brown <broonie@opensource.wolfsonmicro.com>
    Cc: Matt Reimer <mreimer@vpop.net>
    Cc: Evgeniy Polyakov <zbr@ioremap.net>
    Cc: Tejun Heo <tj@kernel.org>
    Signed-off-by: Anton Vorontsov <cbouatmailru@gmail.com>

diff --git a/include/linux/power_supply.h b/include/linux/power_supply.h
index c5f73a3ab3ab..30083a896f36 100644
--- a/include/linux/power_supply.h
+++ b/include/linux/power_supply.h
@@ -145,6 +145,11 @@ struct power_supply {
 	int (*get_property)(struct power_supply *psy,
 			    enum power_supply_property psp,
 			    union power_supply_propval *val);
+	int (*set_property)(struct power_supply *psy,
+			    enum power_supply_property psp,
+			    const union power_supply_propval *val);
+	int (*property_is_writeable)(struct power_supply *psy,
+				     enum power_supply_property psp);
 	void (*external_power_changed)(struct power_supply *psy);
 	void (*set_charged)(struct power_supply *psy);
 

commit 5f487cd34f4337f9bc27ca19da72a39d1b0a0ab4
Author: Anton Vorontsov <cbouatmailru@gmail.com>
Date:   Tue May 18 21:49:51 2010 +0200

    power_supply: Use attribute groups
    
    This fixes a race between power supply device and initial
    attributes creation, plus makes it possible to implement
    writable properties.
    
    [Daniel Mack - removed superflous return statement
     and dropped .mode attribute from POWER_SUPPLY_ATTR]
    
    Suggested-by: Greg KH <gregkh@suse.de>
    Suggested-by: Kay Sievers <kay.sievers@vrfy.org>
    Signed-off-by: Anton Vorontsov <cbouatmailru@gmail.com>
    Tested-by: Daniel Mack <daniel@caiaq.de>

diff --git a/include/linux/power_supply.h b/include/linux/power_supply.h
index ebd2b8fb00d0..c5f73a3ab3ab 100644
--- a/include/linux/power_supply.h
+++ b/include/linux/power_supply.h
@@ -114,6 +114,7 @@ enum power_supply_property {
 	POWER_SUPPLY_PROP_TIME_TO_EMPTY_AVG,
 	POWER_SUPPLY_PROP_TIME_TO_FULL_NOW,
 	POWER_SUPPLY_PROP_TIME_TO_FULL_AVG,
+	POWER_SUPPLY_PROP_TYPE, /* use power_supply.type instead */
 	/* Properties of type `const char *' */
 	POWER_SUPPLY_PROP_MODEL_NAME,
 	POWER_SUPPLY_PROP_MANUFACTURER,

commit c955fe8e0bdd7be7a6bc2d49245d570a816f7cc5
Author: Alexey Starikovskiy <astarikovskiy@suse.de>
Date:   Thu Oct 15 14:31:30 2009 +0400

    POWER: Add support for cycle_count
    
    Signed-off-by: Alexey Starikovskiy <astarikovskiy@suse.de>
    Signed-off-by: Len Brown <len.brown@intel.com>

diff --git a/include/linux/power_supply.h b/include/linux/power_supply.h
index b5d096d3a9be..ebd2b8fb00d0 100644
--- a/include/linux/power_supply.h
+++ b/include/linux/power_supply.h
@@ -82,6 +82,7 @@ enum power_supply_property {
 	POWER_SUPPLY_PROP_PRESENT,
 	POWER_SUPPLY_PROP_ONLINE,
 	POWER_SUPPLY_PROP_TECHNOLOGY,
+	POWER_SUPPLY_PROP_CYCLE_COUNT,
 	POWER_SUPPLY_PROP_VOLTAGE_MAX,
 	POWER_SUPPLY_PROP_VOLTAGE_MIN,
 	POWER_SUPPLY_PROP_VOLTAGE_MAX_DESIGN,

commit e5f5ccb646bc6009572b5c23201b5e81638ff150
Author: Daniel Mack <daniel@caiaq.de>
Date:   Thu Jul 23 20:35:53 2009 +0200

    power_supply: get_by_name and set_charged functionality
    
    This adds a function that indicates that a battery is fully charged.
    It also includes functions to get a power_supply device from the class
    of registered devices by name reference. These can be used to find a
    specific battery to call power_supply_set_battery_charged() on.
    
    Some battery drivers might need this information to calibrate
    themselves.
    
    Signed-off-by: Daniel Mack <daniel@caiaq.de>
    Cc: Ian Molton <spyro@f2s.com>
    Cc: Anton Vorontsov <cbou@mail.ru>
    Cc: Matt Reimer <mreimer@vpop.net>
    Signed-off-by: Anton Vorontsov <cbouatmailru@gmail.com>

diff --git a/include/linux/power_supply.h b/include/linux/power_supply.h
index 4c7c6fc35487..b5d096d3a9be 100644
--- a/include/linux/power_supply.h
+++ b/include/linux/power_supply.h
@@ -144,6 +144,7 @@ struct power_supply {
 			    enum power_supply_property psp,
 			    union power_supply_propval *val);
 	void (*external_power_changed)(struct power_supply *psy);
+	void (*set_charged)(struct power_supply *psy);
 
 	/* For APM emulation, think legacy userspace. */
 	int use_for_apm;
@@ -183,8 +184,10 @@ struct power_supply_info {
 	int use_for_apm;
 };
 
+extern struct power_supply *power_supply_get_by_name(char *name);
 extern void power_supply_changed(struct power_supply *psy);
 extern int power_supply_am_i_supplied(struct power_supply *psy);
+extern int power_supply_set_battery_charged(struct power_supply *psy);
 
 #if defined(CONFIG_POWER_SUPPLY) || defined(CONFIG_POWER_SUPPLY_MODULE)
 extern int power_supply_is_system_supplied(void);

commit ee8076ed3e1cdd0cd1e61318386932669c90b92f
Author: Andres Salomon <dilinger@collabora.co.uk>
Date:   Thu Jul 2 09:45:18 2009 -0400

    power_supply: Add a charge_type property, and use it for olpc driver
    
    This adds a new sysfs file called 'charge_type' which displays the
    type of charging (unknown, n/a, trickle charge, or fast charging).
    
    This allows things like battery diagnostics to determine what the
    battery/EC is doing without resorting to changing the 'status' sysfs
    output.
    
    Signed-off-by: Andres Salomon <dilinger@collabora.co.uk>
    Acked-by: Mark Brown <broonie@opensource.wolfsonmicro.com>
    Signed-off-by: Anton Vorontsov <cbouatmailru@gmail.com>

diff --git a/include/linux/power_supply.h b/include/linux/power_supply.h
index 0ab6aa171241..4c7c6fc35487 100644
--- a/include/linux/power_supply.h
+++ b/include/linux/power_supply.h
@@ -38,6 +38,13 @@ enum {
 	POWER_SUPPLY_STATUS_FULL,
 };
 
+enum {
+	POWER_SUPPLY_CHARGE_TYPE_UNKNOWN = 0,
+	POWER_SUPPLY_CHARGE_TYPE_NONE,
+	POWER_SUPPLY_CHARGE_TYPE_TRICKLE,
+	POWER_SUPPLY_CHARGE_TYPE_FAST,
+};
+
 enum {
 	POWER_SUPPLY_HEALTH_UNKNOWN = 0,
 	POWER_SUPPLY_HEALTH_GOOD,
@@ -70,6 +77,7 @@ enum {
 enum power_supply_property {
 	/* Properties of type `int' */
 	POWER_SUPPLY_PROP_STATUS = 0,
+	POWER_SUPPLY_PROP_CHARGE_TYPE,
 	POWER_SUPPLY_PROP_HEALTH,
 	POWER_SUPPLY_PROP_PRESENT,
 	POWER_SUPPLY_PROP_ONLINE,

commit b294a290d24d1196d68399cc3a9b8c50bfb55abd
Author: Andres Salomon <dilinger@collabora.co.uk>
Date:   Tue Jun 30 02:13:01 2009 -0400

    Revert "power: remove POWER_SUPPLY_PROP_CAPACITY_LEVEL"
    
    This reverts commit 8efe444038a205e79b38b7ad03878824901849a8 and
    4cbc76eadf56399cd11fb736b33c53aec9caab8c.
    
    Richard@laptop.org was apparently using CAPACITY_LEVEL for debugging
    battery/EC problems, and was upset that it was removed.  This readds it.
    
    Conflicts:
    
            Documentation/power_supply_class.txt
    
    Signed-off-by: Andres Salomon <dilinger@collabora.co.uk>
    Signed-off-by: Anton Vorontsov <cbouatmailru@gmail.com>

diff --git a/include/linux/power_supply.h b/include/linux/power_supply.h
index 594c494ac3f0..0ab6aa171241 100644
--- a/include/linux/power_supply.h
+++ b/include/linux/power_supply.h
@@ -58,6 +58,15 @@ enum {
 	POWER_SUPPLY_TECHNOLOGY_LiMn,
 };
 
+enum {
+	POWER_SUPPLY_CAPACITY_LEVEL_UNKNOWN = 0,
+	POWER_SUPPLY_CAPACITY_LEVEL_CRITICAL,
+	POWER_SUPPLY_CAPACITY_LEVEL_LOW,
+	POWER_SUPPLY_CAPACITY_LEVEL_NORMAL,
+	POWER_SUPPLY_CAPACITY_LEVEL_HIGH,
+	POWER_SUPPLY_CAPACITY_LEVEL_FULL,
+};
+
 enum power_supply_property {
 	/* Properties of type `int' */
 	POWER_SUPPLY_PROP_STATUS = 0,
@@ -89,6 +98,7 @@ enum power_supply_property {
 	POWER_SUPPLY_PROP_ENERGY_NOW,
 	POWER_SUPPLY_PROP_ENERGY_AVG,
 	POWER_SUPPLY_PROP_CAPACITY, /* in percents! */
+	POWER_SUPPLY_PROP_CAPACITY_LEVEL,
 	POWER_SUPPLY_PROP_TEMP,
 	POWER_SUPPLY_PROP_TEMP_AMBIENT,
 	POWER_SUPPLY_PROP_TIME_TO_EMPTY_NOW,

commit 7faa144a518c456e2057918f030f50100144ccc6
Author: Alexey Starikovskiy <astarikovskiy@suse.de>
Date:   Fri Mar 27 22:23:52 2009 -0400

    ACPI: battery: add power_{now,avg} properties to power_class
    
    ACPI has smart batteries, which work in units of energy and measure
    rate of (dis)charge as power, thus it is not appropriate to export it
    as a current_now. Current_now will still be exported to allow
    for userland applications to match.
    
    Signed-off-by: Alexey Starikovskiy <astarikovskiy@suse.de>
    Signed-off-by: Len Brown <len.brown@intel.com>

diff --git a/include/linux/power_supply.h b/include/linux/power_supply.h
index 8ff25e0e7f7a..594c494ac3f0 100644
--- a/include/linux/power_supply.h
+++ b/include/linux/power_supply.h
@@ -73,6 +73,8 @@ enum power_supply_property {
 	POWER_SUPPLY_PROP_VOLTAGE_AVG,
 	POWER_SUPPLY_PROP_CURRENT_NOW,
 	POWER_SUPPLY_PROP_CURRENT_AVG,
+	POWER_SUPPLY_PROP_POWER_NOW,
+	POWER_SUPPLY_PROP_POWER_AVG,
 	POWER_SUPPLY_PROP_CHARGE_FULL_DESIGN,
 	POWER_SUPPLY_PROP_CHARGE_EMPTY_DESIGN,
 	POWER_SUPPLY_PROP_CHARGE_FULL,

commit 7e386e6e0e4f34f0545e8923e22fe4dd61ef9d48
Author: Mark Brown <broonie@opensource.wolfsonmicro.com>
Date:   Sun Nov 30 22:43:21 2008 +0100

    power_supply: Add cold to the POWER_SUPPLY_HEALTH report values
    
    Some systems are able to report problems with batteries being under
    temperature.
    
    Signed-off-by: Mark Brown <broonie@opensource.wolfsonmicro.com>
    Acked-by: Anton Vorontsov <cbouatmailru@gmail.com>
    Signed-off-by: Samuel Ortiz <sameo@openedhand.com>

diff --git a/include/linux/power_supply.h b/include/linux/power_supply.h
index f9348cba6dc1..8ff25e0e7f7a 100644
--- a/include/linux/power_supply.h
+++ b/include/linux/power_supply.h
@@ -45,6 +45,7 @@ enum {
 	POWER_SUPPLY_HEALTH_DEAD,
 	POWER_SUPPLY_HEALTH_OVERVOLTAGE,
 	POWER_SUPPLY_HEALTH_UNSPEC_FAILURE,
+	POWER_SUPPLY_HEALTH_COLD,
 };
 
 enum {

commit 942ed161944b3476639916cf544e6975b29c985a
Author: Matthew Garrett <mjg59@srcf.ucam.org>
Date:   Tue Aug 26 21:09:59 2008 +0100

    power_supply: Add function to return system-wide power state
    
    Certain drivers benefit from knowing whether the system is on ac or
    battery, for instance when determining which backlight registers to
    read. This adds a simple call to determine whether there's an online
    power supply other than any batteries.
    
    Signed-off-by: Matthew Garrett <mjg@redhat.com>
    Signed-off-by: Anton Vorontsov <cbouatmailru@gmail.com>

diff --git a/include/linux/power_supply.h b/include/linux/power_supply.h
index ea96ead1d39d..f9348cba6dc1 100644
--- a/include/linux/power_supply.h
+++ b/include/linux/power_supply.h
@@ -165,6 +165,12 @@ struct power_supply_info {
 extern void power_supply_changed(struct power_supply *psy);
 extern int power_supply_am_i_supplied(struct power_supply *psy);
 
+#if defined(CONFIG_POWER_SUPPLY) || defined(CONFIG_POWER_SUPPLY_MODULE)
+extern int power_supply_is_system_supplied(void);
+#else
+static inline int power_supply_is_system_supplied(void) { return -ENOSYS; }
+#endif
+
 extern int power_supply_register(struct device *parent,
 				 struct power_supply *psy);
 extern void power_supply_unregister(struct power_supply *psy);

commit 8e552c36d90c03d2cabf5373788998966751b609
Author: Andres Salomon <dilinger@debian.org>
Date:   Mon May 12 21:46:29 2008 -0400

    power_supply: add CHARGE_COUNTER property and olpc_battery support for it
    
    This adds PROP_CHARGE_COUNTER to the power supply class (documenting it
    as well).  The OLPC battery driver uses this for spitting out its ACR
    values (in uAh).  We have some rounding errors (the data sheet claims
    416.7, the math actually works out to 416.666667, so we're forced to
    choose between overflows or precision loss.  I chose precision loss,
    and stuck w/ data sheet values), but I don't think anyone will care
    that much.
    
    Signed-off-by: Andres Salomon <dilinger@debian.org>
    Signed-off-by: Anton Vorontsov <cbouatmailru@gmail.com>

diff --git a/include/linux/power_supply.h b/include/linux/power_supply.h
index 68ed19ccf1f7..ea96ead1d39d 100644
--- a/include/linux/power_supply.h
+++ b/include/linux/power_supply.h
@@ -78,6 +78,7 @@ enum power_supply_property {
 	POWER_SUPPLY_PROP_CHARGE_EMPTY,
 	POWER_SUPPLY_PROP_CHARGE_NOW,
 	POWER_SUPPLY_PROP_CHARGE_AVG,
+	POWER_SUPPLY_PROP_CHARGE_COUNTER,
 	POWER_SUPPLY_PROP_ENERGY_FULL_DESIGN,
 	POWER_SUPPLY_PROP_ENERGY_EMPTY_DESIGN,
 	POWER_SUPPLY_PROP_ENERGY_FULL,

commit 7c2670bbb53820d0a4fab8d74593eeccd1eef225
Author: maximilian attems <max@stro.at>
Date:   Tue Jan 22 18:46:50 2008 +0100

    ACPI: battery: add sysfs serial number
    
    egrep serial /proc/acpi/battery/BAT0/info
    serial number:           32090
    
    serial number can tell you from the imminent danger
    of beeing set on fire.
    
    Signed-off-by: maximilian attems <max@stro.at>
    Acked-by: Alexey Starikovskiy <astarikovskiy@suse.de>
    Signed-off-by: Len Brown <len.brown@intel.com>

diff --git a/include/linux/power_supply.h b/include/linux/power_supply.h
index 5cbf3e371012..68ed19ccf1f7 100644
--- a/include/linux/power_supply.h
+++ b/include/linux/power_supply.h
@@ -94,6 +94,7 @@ enum power_supply_property {
 	/* Properties of type `const char *' */
 	POWER_SUPPLY_PROP_MODEL_NAME,
 	POWER_SUPPLY_PROP_MANUFACTURER,
+	POWER_SUPPLY_PROP_SERIAL_NUMBER,
 };
 
 enum power_supply_type {

commit c7cc930f9a5c26385a08cd7dc28cb5e3ed186d72
Author: Dmitry Baryshkov <dbaryshkov@gmail.com>
Date:   Mon Jan 7 04:12:41 2008 +0300

    power_supply: add few more values and props
    
    Add LiMn (one of the most common for small non-rechargable batteries)
    battery technology and voltage_min/_max properties support.
    
    Signed-off-by: Dmitry Baryshkov <dbaryshkov@gmail.com>
    Signed-off-by: Anton Vorontsov <cbou@mail.ru>

diff --git a/include/linux/power_supply.h b/include/linux/power_supply.h
index 358b38d09fe0..5cbf3e371012 100644
--- a/include/linux/power_supply.h
+++ b/include/linux/power_supply.h
@@ -54,6 +54,7 @@ enum {
 	POWER_SUPPLY_TECHNOLOGY_LIPO,
 	POWER_SUPPLY_TECHNOLOGY_LiFe,
 	POWER_SUPPLY_TECHNOLOGY_NiCd,
+	POWER_SUPPLY_TECHNOLOGY_LiMn,
 };
 
 enum power_supply_property {
@@ -63,6 +64,8 @@ enum power_supply_property {
 	POWER_SUPPLY_PROP_PRESENT,
 	POWER_SUPPLY_PROP_ONLINE,
 	POWER_SUPPLY_PROP_TECHNOLOGY,
+	POWER_SUPPLY_PROP_VOLTAGE_MAX,
+	POWER_SUPPLY_PROP_VOLTAGE_MIN,
 	POWER_SUPPLY_PROP_VOLTAGE_MAX_DESIGN,
 	POWER_SUPPLY_PROP_VOLTAGE_MIN_DESIGN,
 	POWER_SUPPLY_PROP_VOLTAGE_NOW,

commit 8efe444038a205e79b38b7ad03878824901849a8
Author: Andres Salomon <dilinger@queued.net>
Date:   Wed Dec 12 14:12:56 2007 -0500

    power: remove POWER_SUPPLY_PROP_CAPACITY_LEVEL
    
    The CAPACITY_LEVEL stuff defines various levels of charge; however, what
    is the difference between them?  What differentiates between HIGH and NORMAL,
    LOW and CRITICAL, etc?
    
    As it appears that these are fairly arbitrary, we end up making such policy
    decisions in the kernel (or in hardware).  This is the sort of decision that
    should be made in userspace, not in the kernel.
    
    If the hardware does not support _CAPACITY and it cannot be easily calculated,
    then perhaps the driver should register a custom CAPACITY_LEVEL attribute;
    however, userspace should not become accustomed to looking for such a thing,
    and we should certainly not encourage drivers to provide CAPACITY_LEVEL
    stubs.
    
    The following removes support for POWER_SUPPLY_PROP_CAPACITY_LEVEL.  The
    OLPC battery driver is the only driver making use of this, so it's
    removed from there as well.
    
    Signed-off-by: Andres Salomon <dilinger@debian.org>
    Signed-off-by: David Woodhouse <dwmw2@infradead.org>

diff --git a/include/linux/power_supply.h b/include/linux/power_supply.h
index 606c0957997f..358b38d09fe0 100644
--- a/include/linux/power_supply.h
+++ b/include/linux/power_supply.h
@@ -56,15 +56,6 @@ enum {
 	POWER_SUPPLY_TECHNOLOGY_NiCd,
 };
 
-enum {
-	POWER_SUPPLY_CAPACITY_LEVEL_UNKNOWN = 0,
-	POWER_SUPPLY_CAPACITY_LEVEL_CRITICAL,
-	POWER_SUPPLY_CAPACITY_LEVEL_LOW,
-	POWER_SUPPLY_CAPACITY_LEVEL_NORMAL,
-	POWER_SUPPLY_CAPACITY_LEVEL_HIGH,
-	POWER_SUPPLY_CAPACITY_LEVEL_FULL,
-};
-
 enum power_supply_property {
 	/* Properties of type `int' */
 	POWER_SUPPLY_PROP_STATUS = 0,
@@ -91,7 +82,6 @@ enum power_supply_property {
 	POWER_SUPPLY_PROP_ENERGY_NOW,
 	POWER_SUPPLY_PROP_ENERGY_AVG,
 	POWER_SUPPLY_PROP_CAPACITY, /* in percents! */
-	POWER_SUPPLY_PROP_CAPACITY_LEVEL,
 	POWER_SUPPLY_PROP_TEMP,
 	POWER_SUPPLY_PROP_TEMP_AMBIENT,
 	POWER_SUPPLY_PROP_TIME_TO_EMPTY_NOW,

commit 4a11b59d8283662193a9c6a9c14c58d1b9bf0617
Author: Anton Vorontsov <cbou@mail.ru>
Date:   Fri May 4 00:27:45 2007 +0400

    [BATTERY] Universal power supply class (was: battery class)
    
    This class is result of "external power" and "battery" classes merge,
    as suggested by David Woodhouse. He also implemented uevent support.
    
    Here how userspace seeing it now:
    
            # ls /sys/class/power\ supply/
            ac  main-battery  usb
    
            # cat /sys/class/power\ supply/ac/type
            AC
    
            # cat /sys/class/power\ supply/usb/type
            USB
    
            # cat /sys/class/power\ supply/main-battery/type
            Battery
    
            # cat /sys/class/power\ supply/ac/online
            1
    
            # cat /sys/class/power\ supply/usb/online
            0
    
            # cat /sys/class/power\ supply/main-battery/status
            Charging
    
            # cat /sys/class/leds/h5400\:red-left/trigger
            none h5400-radio timer hwtimer ac-online usb-online
            main-battery-charging-or-full [main-battery-charging]
            main-battery-full
    
    Signed-off-by: Anton Vorontsov <cbou@mail.ru>
    Signed-off-by: David Woodhouse <dwmw2@infradead.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>

diff --git a/include/linux/power_supply.h b/include/linux/power_supply.h
new file mode 100644
index 000000000000..606c0957997f
--- /dev/null
+++ b/include/linux/power_supply.h
@@ -0,0 +1,180 @@
+/*
+ *  Universal power supply monitor class
+ *
+ *  Copyright © 2007  Anton Vorontsov <cbou@mail.ru>
+ *  Copyright © 2004  Szabolcs Gyurko
+ *  Copyright © 2003  Ian Molton <spyro@f2s.com>
+ *
+ *  Modified: 2004, Oct     Szabolcs Gyurko
+ *
+ *  You may use this code as per GPL version 2
+ */
+
+#ifndef __LINUX_POWER_SUPPLY_H__
+#define __LINUX_POWER_SUPPLY_H__
+
+#include <linux/device.h>
+#include <linux/workqueue.h>
+#include <linux/leds.h>
+
+/*
+ * All voltages, currents, charges, energies, time and temperatures in uV,
+ * µA, µAh, µWh, seconds and tenths of degree Celsius unless otherwise
+ * stated. It's driver's job to convert its raw values to units in which
+ * this class operates.
+ */
+
+/*
+ * For systems where the charger determines the maximum battery capacity
+ * the min and max fields should be used to present these values to user
+ * space. Unused/unknown fields will not appear in sysfs.
+ */
+
+enum {
+	POWER_SUPPLY_STATUS_UNKNOWN = 0,
+	POWER_SUPPLY_STATUS_CHARGING,
+	POWER_SUPPLY_STATUS_DISCHARGING,
+	POWER_SUPPLY_STATUS_NOT_CHARGING,
+	POWER_SUPPLY_STATUS_FULL,
+};
+
+enum {
+	POWER_SUPPLY_HEALTH_UNKNOWN = 0,
+	POWER_SUPPLY_HEALTH_GOOD,
+	POWER_SUPPLY_HEALTH_OVERHEAT,
+	POWER_SUPPLY_HEALTH_DEAD,
+	POWER_SUPPLY_HEALTH_OVERVOLTAGE,
+	POWER_SUPPLY_HEALTH_UNSPEC_FAILURE,
+};
+
+enum {
+	POWER_SUPPLY_TECHNOLOGY_UNKNOWN = 0,
+	POWER_SUPPLY_TECHNOLOGY_NiMH,
+	POWER_SUPPLY_TECHNOLOGY_LION,
+	POWER_SUPPLY_TECHNOLOGY_LIPO,
+	POWER_SUPPLY_TECHNOLOGY_LiFe,
+	POWER_SUPPLY_TECHNOLOGY_NiCd,
+};
+
+enum {
+	POWER_SUPPLY_CAPACITY_LEVEL_UNKNOWN = 0,
+	POWER_SUPPLY_CAPACITY_LEVEL_CRITICAL,
+	POWER_SUPPLY_CAPACITY_LEVEL_LOW,
+	POWER_SUPPLY_CAPACITY_LEVEL_NORMAL,
+	POWER_SUPPLY_CAPACITY_LEVEL_HIGH,
+	POWER_SUPPLY_CAPACITY_LEVEL_FULL,
+};
+
+enum power_supply_property {
+	/* Properties of type `int' */
+	POWER_SUPPLY_PROP_STATUS = 0,
+	POWER_SUPPLY_PROP_HEALTH,
+	POWER_SUPPLY_PROP_PRESENT,
+	POWER_SUPPLY_PROP_ONLINE,
+	POWER_SUPPLY_PROP_TECHNOLOGY,
+	POWER_SUPPLY_PROP_VOLTAGE_MAX_DESIGN,
+	POWER_SUPPLY_PROP_VOLTAGE_MIN_DESIGN,
+	POWER_SUPPLY_PROP_VOLTAGE_NOW,
+	POWER_SUPPLY_PROP_VOLTAGE_AVG,
+	POWER_SUPPLY_PROP_CURRENT_NOW,
+	POWER_SUPPLY_PROP_CURRENT_AVG,
+	POWER_SUPPLY_PROP_CHARGE_FULL_DESIGN,
+	POWER_SUPPLY_PROP_CHARGE_EMPTY_DESIGN,
+	POWER_SUPPLY_PROP_CHARGE_FULL,
+	POWER_SUPPLY_PROP_CHARGE_EMPTY,
+	POWER_SUPPLY_PROP_CHARGE_NOW,
+	POWER_SUPPLY_PROP_CHARGE_AVG,
+	POWER_SUPPLY_PROP_ENERGY_FULL_DESIGN,
+	POWER_SUPPLY_PROP_ENERGY_EMPTY_DESIGN,
+	POWER_SUPPLY_PROP_ENERGY_FULL,
+	POWER_SUPPLY_PROP_ENERGY_EMPTY,
+	POWER_SUPPLY_PROP_ENERGY_NOW,
+	POWER_SUPPLY_PROP_ENERGY_AVG,
+	POWER_SUPPLY_PROP_CAPACITY, /* in percents! */
+	POWER_SUPPLY_PROP_CAPACITY_LEVEL,
+	POWER_SUPPLY_PROP_TEMP,
+	POWER_SUPPLY_PROP_TEMP_AMBIENT,
+	POWER_SUPPLY_PROP_TIME_TO_EMPTY_NOW,
+	POWER_SUPPLY_PROP_TIME_TO_EMPTY_AVG,
+	POWER_SUPPLY_PROP_TIME_TO_FULL_NOW,
+	POWER_SUPPLY_PROP_TIME_TO_FULL_AVG,
+	/* Properties of type `const char *' */
+	POWER_SUPPLY_PROP_MODEL_NAME,
+	POWER_SUPPLY_PROP_MANUFACTURER,
+};
+
+enum power_supply_type {
+	POWER_SUPPLY_TYPE_BATTERY = 0,
+	POWER_SUPPLY_TYPE_UPS,
+	POWER_SUPPLY_TYPE_MAINS,
+	POWER_SUPPLY_TYPE_USB,
+};
+
+union power_supply_propval {
+	int intval;
+	const char *strval;
+};
+
+struct power_supply {
+	const char *name;
+	enum power_supply_type type;
+	enum power_supply_property *properties;
+	size_t num_properties;
+
+	char **supplied_to;
+	size_t num_supplicants;
+
+	int (*get_property)(struct power_supply *psy,
+			    enum power_supply_property psp,
+			    union power_supply_propval *val);
+	void (*external_power_changed)(struct power_supply *psy);
+
+	/* For APM emulation, think legacy userspace. */
+	int use_for_apm;
+
+	/* private */
+	struct device *dev;
+	struct work_struct changed_work;
+
+#ifdef CONFIG_LEDS_TRIGGERS
+	struct led_trigger *charging_full_trig;
+	char *charging_full_trig_name;
+	struct led_trigger *charging_trig;
+	char *charging_trig_name;
+	struct led_trigger *full_trig;
+	char *full_trig_name;
+	struct led_trigger *online_trig;
+	char *online_trig_name;
+#endif
+};
+
+/*
+ * This is recommended structure to specify static power supply parameters.
+ * Generic one, parametrizable for different power supplies. Power supply
+ * class itself does not use it, but that's what implementing most platform
+ * drivers, should try reuse for consistency.
+ */
+
+struct power_supply_info {
+	const char *name;
+	int technology;
+	int voltage_max_design;
+	int voltage_min_design;
+	int charge_full_design;
+	int charge_empty_design;
+	int energy_full_design;
+	int energy_empty_design;
+	int use_for_apm;
+};
+
+extern void power_supply_changed(struct power_supply *psy);
+extern int power_supply_am_i_supplied(struct power_supply *psy);
+
+extern int power_supply_register(struct device *parent,
+				 struct power_supply *psy);
+extern void power_supply_unregister(struct power_supply *psy);
+
+/* For APM emulation, think legacy userspace. */
+extern struct class *power_supply_class;
+
+#endif /* __LINUX_POWER_SUPPLY_H__ */
