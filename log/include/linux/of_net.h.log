commit 0c65b2b90d13c1deaee6449304dd367c5d4eb8ae
Author: Andrew Lunn <andrew@lunn.ch>
Date:   Mon Nov 4 02:40:33 2019 +0100

    net: of_get_phy_mode: Change API to solve int/unit warnings
    
    Before this change of_get_phy_mode() returned an enum,
    phy_interface_t. On error, -ENODEV etc, is returned. If the result of
    the function is stored in a variable of type phy_interface_t, and the
    compiler has decided to represent this as an unsigned int, comparision
    with -ENODEV etc, is a signed vs unsigned comparision.
    
    Fix this problem by changing the API. Make the function return an
    error, or 0 on success, and pass a pointer, of type phy_interface_t,
    where the phy mode should be stored.
    
    v2:
    Return with *interface set to PHY_INTERFACE_MODE_NA on error.
    Add error checks to all users of of_get_phy_mode()
    Fixup a few reverse christmas tree errors
    Fixup a few slightly malformed reverse christmas trees
    
    v3:
    Fix 0-day reported errors.
    
    Reported-by: Dan Carpenter <dan.carpenter@oracle.com>
    Signed-off-by: Andrew Lunn <andrew@lunn.ch>
    Signed-off-by: David S. Miller <davem@davemloft.net>

diff --git a/include/linux/of_net.h b/include/linux/of_net.h
index 6aeaea1775e6..71bbfcf3adcd 100644
--- a/include/linux/of_net.h
+++ b/include/linux/of_net.h
@@ -6,15 +6,18 @@
 #ifndef __LINUX_OF_NET_H
 #define __LINUX_OF_NET_H
 
+#include <linux/phy.h>
+
 #ifdef CONFIG_OF_NET
 #include <linux/of.h>
 
 struct net_device;
-extern int of_get_phy_mode(struct device_node *np);
+extern int of_get_phy_mode(struct device_node *np, phy_interface_t *interface);
 extern const void *of_get_mac_address(struct device_node *np);
 extern struct net_device *of_find_net_device_by_node(struct device_node *np);
 #else
-static inline int of_get_phy_mode(struct device_node *np)
+static inline int of_get_phy_mode(struct device_node *np,
+				  phy_interface_t *interface)
 {
 	return -ENODEV;
 }

commit 55716d26439f5c4008b0bcb7f17d1f7c0d8fbcfc
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Sat Jun 1 10:08:42 2019 +0200

    treewide: Replace GPLv2 boilerplate/reference with SPDX - rule 428
    
    Based on 1 normalized pattern(s):
    
      this file is released under the gplv2
    
    extracted by the scancode license scanner the SPDX license identifier
    
      GPL-2.0-only
    
    has been chosen to replace the boilerplate/reference in 68 file(s).
    
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Reviewed-by: Armijn Hemel <armijn@tjaldur.nl>
    Reviewed-by: Allison Randal <allison@lohutok.net>
    Cc: linux-spdx@vger.kernel.org
    Link: https://lkml.kernel.org/r/20190531190114.292346262@linutronix.de
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/include/linux/of_net.h b/include/linux/of_net.h
index 0f0346e6829c..6aeaea1775e6 100644
--- a/include/linux/of_net.h
+++ b/include/linux/of_net.h
@@ -1,7 +1,6 @@
+/* SPDX-License-Identifier: GPL-2.0-only */
 /*
  * OF helpers for network devices.
- *
- * This file is released under the GPLv2
  */
 
 #ifndef __LINUX_OF_NET_H

commit 6a0a923dfa1480df41fb486323b8375e387d516f
Author: Petr Štetiar <ynezz@true.cz>
Date:   Sun May 19 14:18:44 2019 +0200

    of_net: fix of_get_mac_address retval if compiled without CONFIG_OF
    
    of_get_mac_address prior to commit d01f449c008a ("of_net: add NVMEM
    support to of_get_mac_address") could return only valid pointer or NULL,
    after this change it could return only valid pointer or ERR_PTR encoded
    error value, but I've forget to change the return value of
    of_get_mac_address in case where the kernel is compiled without
    CONFIG_OF, so I'm doing so now.
    
    Cc: Mirko Lindner <mlindner@marvell.com>
    Cc: Stephen Hemminger <stephen@networkplumber.org>
    Fixes: d01f449c008a ("of_net: add NVMEM support to of_get_mac_address")
    Reported-by: Octavio Alvarez <octallk1@alvarezp.org>
    Signed-off-by: Petr Štetiar <ynezz@true.cz>
    Signed-off-by: David S. Miller <davem@davemloft.net>

diff --git a/include/linux/of_net.h b/include/linux/of_net.h
index 9cd72aab76fe..0f0346e6829c 100644
--- a/include/linux/of_net.h
+++ b/include/linux/of_net.h
@@ -22,7 +22,7 @@ static inline int of_get_phy_mode(struct device_node *np)
 
 static inline const void *of_get_mac_address(struct device_node *np)
 {
-	return NULL;
+	return ERR_PTR(-ENODEV);
 }
 
 static inline struct net_device *of_find_net_device_by_node(struct device_node *np)

commit afa64a72b862a7a9d04f8d07fba632eaf06b23f8
Author: Bartosz Golaszewski <bgolaszewski@baylibre.com>
Date:   Fri Nov 30 09:20:59 2018 +0100

    of: net: kill of_get_nvmem_mac_address()
    
    We've switched all users to nvmem_get_mac_address(). Remove the now
    dead code.
    
    Signed-off-by: Bartosz Golaszewski <bgolaszewski@baylibre.com>
    Reviewed-by: Rob Herring <robh@kernel.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>

diff --git a/include/linux/of_net.h b/include/linux/of_net.h
index 90d81ee9e6a0..9cd72aab76fe 100644
--- a/include/linux/of_net.h
+++ b/include/linux/of_net.h
@@ -13,7 +13,6 @@
 struct net_device;
 extern int of_get_phy_mode(struct device_node *np);
 extern const void *of_get_mac_address(struct device_node *np);
-extern int of_get_nvmem_mac_address(struct device_node *np, void *addr);
 extern struct net_device *of_find_net_device_by_node(struct device_node *np);
 #else
 static inline int of_get_phy_mode(struct device_node *np)
@@ -26,11 +25,6 @@ static inline const void *of_get_mac_address(struct device_node *np)
 	return NULL;
 }
 
-static inline int of_get_nvmem_mac_address(struct device_node *np, void *addr)
-{
-	return -ENODEV;
-}
-
 static inline struct net_device *of_find_net_device_by_node(struct device_node *np)
 {
 	return NULL;

commit 9217e566bdee4583d0a9ea4879c8f5e004886eac
Author: Mike Looijmans <mike.looijmans@topic.nl>
Date:   Thu Mar 29 07:29:48 2018 +0200

    of_net: Implement of_get_nvmem_mac_address helper
    
    It's common practice to store MAC addresses for network interfaces into
    nvmem devices. However the code to actually do this in the kernel lacks,
    so this patch adds of_get_nvmem_mac_address() for drivers to obtain the
    address from an nvmem cell provider.
    
    This is particulary useful on devices where the ethernet interface cannot
    be configured by the bootloader, for example because it's in an FPGA.
    
    Signed-off-by: Mike Looijmans <mike.looijmans@topic.nl>
    Reviewed-by: Florian Fainelli <f.fainelli@gmail.com>
    Reviewed-by: Andrew Lunn <andrew@lunn.ch>
    Signed-off-by: David S. Miller <davem@davemloft.net>

diff --git a/include/linux/of_net.h b/include/linux/of_net.h
index 9cd72aab76fe..90d81ee9e6a0 100644
--- a/include/linux/of_net.h
+++ b/include/linux/of_net.h
@@ -13,6 +13,7 @@
 struct net_device;
 extern int of_get_phy_mode(struct device_node *np);
 extern const void *of_get_mac_address(struct device_node *np);
+extern int of_get_nvmem_mac_address(struct device_node *np, void *addr);
 extern struct net_device *of_find_net_device_by_node(struct device_node *np);
 #else
 static inline int of_get_phy_mode(struct device_node *np)
@@ -25,6 +26,11 @@ static inline const void *of_get_mac_address(struct device_node *np)
 	return NULL;
 }
 
+static inline int of_get_nvmem_mac_address(struct device_node *np, void *addr)
+{
+	return -ENODEV;
+}
+
 static inline struct net_device *of_find_net_device_by_node(struct device_node *np)
 {
 	return NULL;

commit aa836df958886e57ff0d43fb3d79d1af4aec0cc8
Author: Florian Fainelli <f.fainelli@gmail.com>
Date:   Mon Mar 9 14:31:20 2015 -0700

    net: core: add of_find_net_device_by_node()
    
    Add a helper function which allows getting the struct net_device pointer
    associated with a given struct device_node pointer. This is useful for
    instance for DSA Ethernet devices not backed by a platform_device, but a PCI
    device.
    
    Since we need to access net_class which is not accessible outside of
    net/core/net-sysfs.c, this helper function is also added here and gated
    with CONFIG_OF_NET.
    
    Network devices initialized with SET_NETDEV_DEV() are also taken into
    account by checking for dev->parent first and then falling back to
    checking the device pointer within struct net_device.
    
    Signed-off-by: Florian Fainelli <f.fainelli@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

diff --git a/include/linux/of_net.h b/include/linux/of_net.h
index 34597c8c1a4c..9cd72aab76fe 100644
--- a/include/linux/of_net.h
+++ b/include/linux/of_net.h
@@ -9,8 +9,11 @@
 
 #ifdef CONFIG_OF_NET
 #include <linux/of.h>
+
+struct net_device;
 extern int of_get_phy_mode(struct device_node *np);
 extern const void *of_get_mac_address(struct device_node *np);
+extern struct net_device *of_find_net_device_by_node(struct device_node *np);
 #else
 static inline int of_get_phy_mode(struct device_node *np)
 {
@@ -21,6 +24,11 @@ static inline const void *of_get_mac_address(struct device_node *np)
 {
 	return NULL;
 }
+
+static inline struct net_device *of_find_net_device_by_node(struct device_node *np)
+{
+	return NULL;
+}
 #endif
 
 #endif /* __LINUX_OF_NET_H */

commit 7e0bdf15cee7d2c809558b8169dc5b08792d0c82
Author: Geert Uytterhoeven <geert@linux-m68k.org>
Date:   Sun Aug 18 13:01:30 2013 +0200

    of: Make of_get_phy_mode() return int i.s.o. const int
    
    include/linux/of_net.h:16: warning: type qualifiers ignored on function return type
    
    Signed-off-by: Geert Uytterhoeven <geert@linux-m68k.org>
    Signed-off-by: Grant Likely <grant.likely@linaro.org>

diff --git a/include/linux/of_net.h b/include/linux/of_net.h
index 61bf53b02779..34597c8c1a4c 100644
--- a/include/linux/of_net.h
+++ b/include/linux/of_net.h
@@ -9,10 +9,10 @@
 
 #ifdef CONFIG_OF_NET
 #include <linux/of.h>
-extern const int of_get_phy_mode(struct device_node *np);
+extern int of_get_phy_mode(struct device_node *np);
 extern const void *of_get_mac_address(struct device_node *np);
 #else
-static inline const int of_get_phy_mode(struct device_node *np)
+static inline int of_get_phy_mode(struct device_node *np)
 {
 	return -ENODEV;
 }

commit 65b3841b9cb5fe1b239f12dbf033f9827d73d032
Author: Guenter Roeck <linux@roeck-us.net>
Date:   Tue Apr 2 09:35:07 2013 +0000

    of_net.h: Provide empty functions if OF_NET is not configured
    
    of_get_mac_address() and of_get_phy_mode() are only provided if OF_NET
    is configured. While most callers check for the define, not all do, and those
    who do require #ifdef around the code. For those who don't, the missing check
    can result in errors such as
    
    arch/powerpc/sysdev/tsi108_dev.c:107:3: error: implicit declaration of
            function 'of_get_mac_address' [-Werror=implicit-function-declaration]
    arch/powerpc/sysdev/mv64x60_dev.c:253:2: error: implicit declaration of
            function 'of_get_mac_address' [-Werror=implicit-function-declaration]
    
    Provide empty functions if OF_NET is not configured.
    This is safe because all callers do check the return values.
    
    Cc: David Daney <david.daney@cavium.com>
    Signed-off-by: Guenter Roeck <linux@roeck-us.net>
    Acked-by: Rob Herring <rob.herring@calxeda.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

diff --git a/include/linux/of_net.h b/include/linux/of_net.h
index f47464188710..61bf53b02779 100644
--- a/include/linux/of_net.h
+++ b/include/linux/of_net.h
@@ -11,6 +11,16 @@
 #include <linux/of.h>
 extern const int of_get_phy_mode(struct device_node *np);
 extern const void *of_get_mac_address(struct device_node *np);
+#else
+static inline const int of_get_phy_mode(struct device_node *np)
+{
+	return -ENODEV;
+}
+
+static inline const void *of_get_mac_address(struct device_node *np)
+{
+	return NULL;
+}
 #endif
 
 #endif /* __LINUX_OF_NET_H */

commit 6ca1a113791eb09dac8c48b2b264c4d72aab410f
Author: Shawn Guo <shawn.guo@linaro.org>
Date:   Mon Jul 4 14:03:17 2011 +0800

    dt/net: add helper function of_get_phy_mode
    
    It adds the helper function of_get_phy_mode getting phy interface
    from device tree.
    
    Signed-off-by: Shawn Guo <shawn.guo@linaro.org>
    Cc: Grant Likely <grant.likely@secretlab.ca>
    Acked-by: Grant Likely <grant.likely@secretlab.ca>
    Acked-by: David Miller <davem@davemloft.net>

diff --git a/include/linux/of_net.h b/include/linux/of_net.h
index e913081fb52a..f47464188710 100644
--- a/include/linux/of_net.h
+++ b/include/linux/of_net.h
@@ -9,6 +9,7 @@
 
 #ifdef CONFIG_OF_NET
 #include <linux/of.h>
+extern const int of_get_phy_mode(struct device_node *np);
 extern const void *of_get_mac_address(struct device_node *np);
 #endif
 

commit 4b6ba8aacbb3185703b797286547d0f8f3859b02
Author: David Daney <ddaney@caviumnetworks.com>
Date:   Tue Oct 26 15:07:13 2010 -0700

    of/net: Move of_get_mac_address() to a common source file.
    
    There are two identical implementations of of_get_mac_address(), one
    each in arch/powerpc/kernel/prom_parse.c and
    arch/microblaze/kernel/prom_parse.c.  Move this function to a new
    common file of_net.{c,h} and adjust all the callers to include the new
    header.
    
    Signed-off-by: David Daney <ddaney@caviumnetworks.com>
    [grant.likely@secretlab.ca: protect header with #ifdef]
    Signed-off-by: Grant Likely <grant.likely@secretlab.ca>

diff --git a/include/linux/of_net.h b/include/linux/of_net.h
new file mode 100644
index 000000000000..e913081fb52a
--- /dev/null
+++ b/include/linux/of_net.h
@@ -0,0 +1,15 @@
+/*
+ * OF helpers for network devices.
+ *
+ * This file is released under the GPLv2
+ */
+
+#ifndef __LINUX_OF_NET_H
+#define __LINUX_OF_NET_H
+
+#ifdef CONFIG_OF_NET
+#include <linux/of.h>
+extern const void *of_get_mac_address(struct device_node *np);
+#endif
+
+#endif /* __LINUX_OF_NET_H */
