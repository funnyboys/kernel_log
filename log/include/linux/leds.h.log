commit c7e4ea68c1626cceb966323a4b572e2f8d805138
Author: Pavel Machek <pavel@ucw.cz>
Date:   Sat Mar 21 17:01:53 2020 +0100

    leds: old enums are not really applicable to new code
    
    Warn about old defines that probably should not be used.
    
    Signed-off-by: Pavel Machek <pavel@ucw.cz>

diff --git a/include/linux/leds.h b/include/linux/leds.h
index 75353e5f9d13..2451962d1ec5 100644
--- a/include/linux/leds.h
+++ b/include/linux/leds.h
@@ -25,6 +25,7 @@ struct device_node;
  * LED Core
  */
 
+/* This is obsolete/useless. We now support variable maximum brightness. */
 enum led_brightness {
 	LED_OFF		= 0,
 	LED_ON		= 1,

commit e389240ad99292d52a4f8ff30f16830dc9c63779
Author: Jean-Jacques Hiblot <jjhiblot@ti.com>
Date:   Thu Oct 3 10:28:10 2019 +0200

    leds: Add managed API to get a LED from a device driver
    
    If the LED is acquired by a consumer device with devm_led_get(), it is
    automatically released when the device is detached.
    
    Signed-off-by: Jean-Jacques Hiblot <jjhiblot@ti.com>
    Acked-by: Pavel Machek <pavel@ucw.cz>
    Signed-off-by: Pavel Machek <pavel@ucw.cz>

diff --git a/include/linux/leds.h b/include/linux/leds.h
index dcfb6a325866..75353e5f9d13 100644
--- a/include/linux/leds.h
+++ b/include/linux/leds.h
@@ -199,6 +199,8 @@ void led_classdev_resume(struct led_classdev *led_cdev);
 
 extern struct led_classdev *of_led_get(struct device_node *np, int index);
 extern void led_put(struct led_classdev *led_cdev);
+struct led_classdev *__must_check devm_of_led_get(struct device *dev,
+						  int index);
 
 /**
  * led_blink_set - set blinking with software fallback

commit 699a8c7c4bd376aee4808e6272188319e900c8af
Author: Tomi Valkeinen <tomi.valkeinen@ti.com>
Date:   Thu Oct 3 10:28:09 2019 +0200

    leds: Add of_led_get() and led_put()
    
    This patch adds basic support for a kernel driver to get a LED device.
    This will be used by the led-backlight driver.
    
    Only OF version is implemented for now, and the behavior is similar to
    PWM's of_pwm_get() and pwm_put().
    
    Signed-off-by: Tomi Valkeinen <tomi.valkeinen@ti.com>
    Signed-off-by: Jean-Jacques Hiblot <jjhiblot@ti.com>
    Acked-by: Pavel Machek <pavel@ucw.cz>
    Signed-off-by: Pavel Machek <pavel@ucw.cz>

diff --git a/include/linux/leds.h b/include/linux/leds.h
index 242258f7d837..dcfb6a325866 100644
--- a/include/linux/leds.h
+++ b/include/linux/leds.h
@@ -20,6 +20,7 @@
 
 struct device;
 struct led_pattern;
+struct device_node;
 /*
  * LED Core
  */
@@ -196,6 +197,9 @@ void devm_led_classdev_unregister(struct device *parent,
 void led_classdev_suspend(struct led_classdev *led_cdev);
 void led_classdev_resume(struct led_classdev *led_cdev);
 
+extern struct led_classdev *of_led_get(struct device_node *np, int index);
+extern void led_put(struct led_classdev *led_cdev);
+
 /**
  * led_blink_set - set blinking with software fallback
  * @led_cdev: the LED to start blinking

commit 9cc93be7b0c91a87ef452457c706af62741249d7
Author: Dan Murphy <dmurphy@ti.com>
Date:   Wed Oct 2 07:40:42 2019 -0500

    leds: core: Fix leds.h structure documentation
    
    Update the leds.h structure documentation to define the
    correct arguments.
    
    Signed-off-by: Dan Murphy <dmurphy@ti.com>
    Signed-off-by: Pavel Machek <pavel@ucw.cz>

diff --git a/include/linux/leds.h b/include/linux/leds.h
index 52e50183b963..242258f7d837 100644
--- a/include/linux/leds.h
+++ b/include/linux/leds.h
@@ -245,7 +245,7 @@ void led_set_brightness(struct led_classdev *led_cdev,
 /**
  * led_set_brightness_sync - set LED brightness synchronously
  * @led_cdev: the LED to set
- * @brightness: the brightness to set it to
+ * @value: the brightness to set it to
  *
  * Set an LED's brightness immediately. This function will block
  * the caller for the time required for accessing device registers,
@@ -298,8 +298,7 @@ void led_sysfs_enable(struct led_classdev *led_cdev);
 /**
  * led_compose_name - compose LED class device name
  * @dev: LED controller device object
- * @child: child fwnode_handle describing a LED or a group of synchronized LEDs;
- *	   it must be provided only for fwnode based LEDs
+ * @init_data: the LED class device initialization data
  * @led_classdev_name: composed LED class device name
  *
  * Create LED class device name basing on the provided init_data argument.

commit ec28a8cfdce6306afcbf528e231a733010c82251
Author: Dan Murphy <dmurphy@ti.com>
Date:   Wed Oct 2 07:40:40 2019 -0500

    leds: core: Remove extern from header
    
    extern is implied and is not needed in the header file.
    Remove the extern keyword and re-align the code.
    
    Signed-off-by: Dan Murphy <dmurphy@ti.com>
    Signed-off-by: Pavel Machek <pavel@ucw.cz>

diff --git a/include/linux/leds.h b/include/linux/leds.h
index 0b6b6166e9ea..52e50183b963 100644
--- a/include/linux/leds.h
+++ b/include/linux/leds.h
@@ -161,7 +161,7 @@ struct led_classdev {
  *
  * Returns: 0 on success or negative error value on failure
  */
-extern int led_classdev_register_ext(struct device *parent,
+int led_classdev_register_ext(struct device *parent,
 				     struct led_classdev *led_cdev,
 				     struct led_init_data *init_data);
 
@@ -181,7 +181,7 @@ static inline int led_classdev_register(struct device *parent,
 	return led_classdev_register_ext(parent, led_cdev, NULL);
 }
 
-extern int devm_led_classdev_register_ext(struct device *parent,
+int devm_led_classdev_register_ext(struct device *parent,
 					  struct led_classdev *led_cdev,
 					  struct led_init_data *init_data);
 
@@ -190,11 +190,11 @@ static inline int devm_led_classdev_register(struct device *parent,
 {
 	return devm_led_classdev_register_ext(parent, led_cdev, NULL);
 }
-extern void led_classdev_unregister(struct led_classdev *led_cdev);
-extern void devm_led_classdev_unregister(struct device *parent,
-					 struct led_classdev *led_cdev);
-extern void led_classdev_suspend(struct led_classdev *led_cdev);
-extern void led_classdev_resume(struct led_classdev *led_cdev);
+void led_classdev_unregister(struct led_classdev *led_cdev);
+void devm_led_classdev_unregister(struct device *parent,
+				  struct led_classdev *led_cdev);
+void led_classdev_suspend(struct led_classdev *led_cdev);
+void led_classdev_resume(struct led_classdev *led_cdev);
 
 /**
  * led_blink_set - set blinking with software fallback
@@ -211,9 +211,8 @@ extern void led_classdev_resume(struct led_classdev *led_cdev);
  * led_cdev->brightness_set() will not stop the blinking,
  * use led_classdev_brightness_set() instead.
  */
-extern void led_blink_set(struct led_classdev *led_cdev,
-			  unsigned long *delay_on,
-			  unsigned long *delay_off);
+void led_blink_set(struct led_classdev *led_cdev, unsigned long *delay_on,
+		   unsigned long *delay_off);
 /**
  * led_blink_set_oneshot - do a oneshot software blink
  * @led_cdev: the LED to start blinking
@@ -228,10 +227,9 @@ extern void led_blink_set(struct led_classdev *led_cdev,
  * If invert is set, led blinks for delay_off first, then for
  * delay_on and leave the led on after the on-off cycle.
  */
-extern void led_blink_set_oneshot(struct led_classdev *led_cdev,
-				  unsigned long *delay_on,
-				  unsigned long *delay_off,
-				  int invert);
+void led_blink_set_oneshot(struct led_classdev *led_cdev,
+			   unsigned long *delay_on, unsigned long *delay_off,
+			   int invert);
 /**
  * led_set_brightness - set LED brightness
  * @led_cdev: the LED to set
@@ -241,8 +239,8 @@ extern void led_blink_set_oneshot(struct led_classdev *led_cdev,
  * software blink timer that implements blinking when the
  * hardware doesn't. This function is guaranteed not to sleep.
  */
-extern void led_set_brightness(struct led_classdev *led_cdev,
-			       enum led_brightness brightness);
+void led_set_brightness(struct led_classdev *led_cdev,
+			enum led_brightness brightness);
 
 /**
  * led_set_brightness_sync - set LED brightness synchronously
@@ -255,8 +253,8 @@ extern void led_set_brightness(struct led_classdev *led_cdev,
  *
  * Returns: 0 on success or negative error value on failure
  */
-extern int led_set_brightness_sync(struct led_classdev *led_cdev,
-				   enum led_brightness value);
+int led_set_brightness_sync(struct led_classdev *led_cdev,
+			    enum led_brightness value);
 
 /**
  * led_update_brightness - update LED brightness
@@ -267,7 +265,7 @@ extern int led_set_brightness_sync(struct led_classdev *led_cdev,
  *
  * Returns: 0 on success or negative error value on failure
  */
-extern int led_update_brightness(struct led_classdev *led_cdev);
+int led_update_brightness(struct led_classdev *led_cdev);
 
 /**
  * led_get_default_pattern - return default pattern
@@ -279,8 +277,7 @@ extern int led_update_brightness(struct led_classdev *led_cdev);
  * Return:    Allocated array of integers with default pattern from device tree
  *            or NULL.  Caller is responsible for kfree().
  */
-extern u32 *led_get_default_pattern(struct led_classdev *led_cdev,
-				    unsigned int *size);
+u32 *led_get_default_pattern(struct led_classdev *led_cdev, unsigned int *size);
 
 /**
  * led_sysfs_disable - disable LED sysfs interface
@@ -288,7 +285,7 @@ extern u32 *led_get_default_pattern(struct led_classdev *led_cdev,
  *
  * Disable the led_cdev's sysfs interface.
  */
-extern void led_sysfs_disable(struct led_classdev *led_cdev);
+void led_sysfs_disable(struct led_classdev *led_cdev);
 
 /**
  * led_sysfs_enable - enable LED sysfs interface
@@ -296,7 +293,7 @@ extern void led_sysfs_disable(struct led_classdev *led_cdev);
  *
  * Enable the led_cdev's sysfs interface.
  */
-extern void led_sysfs_enable(struct led_classdev *led_cdev);
+void led_sysfs_enable(struct led_classdev *led_cdev);
 
 /**
  * led_compose_name - compose LED class device name
@@ -311,8 +308,8 @@ extern void led_sysfs_enable(struct led_classdev *led_cdev);
  *
  * Returns: 0 on success or negative error value on failure
  */
-extern int led_compose_name(struct device *dev, struct led_init_data *init_data,
-			    char *led_classdev_name);
+int led_compose_name(struct device *dev, struct led_init_data *init_data,
+		     char *led_classdev_name);
 
 /**
  * led_sysfs_is_disabled - check if LED sysfs interface is disabled
@@ -362,27 +359,24 @@ struct led_trigger {
 #define led_trigger_get_drvdata(dev)	(led_get_trigger_data(led_trigger_get_led(dev)))
 
 /* Registration functions for complex triggers */
-extern int led_trigger_register(struct led_trigger *trigger);
-extern void led_trigger_unregister(struct led_trigger *trigger);
-extern int devm_led_trigger_register(struct device *dev,
+int led_trigger_register(struct led_trigger *trigger);
+void led_trigger_unregister(struct led_trigger *trigger);
+int devm_led_trigger_register(struct device *dev,
 				     struct led_trigger *trigger);
 
-extern void led_trigger_register_simple(const char *name,
+void led_trigger_register_simple(const char *name,
 				struct led_trigger **trigger);
-extern void led_trigger_unregister_simple(struct led_trigger *trigger);
-extern void led_trigger_event(struct led_trigger *trigger,
-				enum led_brightness event);
-extern void led_trigger_blink(struct led_trigger *trigger,
-			      unsigned long *delay_on,
-			      unsigned long *delay_off);
-extern void led_trigger_blink_oneshot(struct led_trigger *trigger,
-				      unsigned long *delay_on,
-				      unsigned long *delay_off,
-				      int invert);
-extern void led_trigger_set_default(struct led_classdev *led_cdev);
-extern int led_trigger_set(struct led_classdev *led_cdev,
-			   struct led_trigger *trigger);
-extern void led_trigger_remove(struct led_classdev *led_cdev);
+void led_trigger_unregister_simple(struct led_trigger *trigger);
+void led_trigger_event(struct led_trigger *trigger,  enum led_brightness event);
+void led_trigger_blink(struct led_trigger *trigger, unsigned long *delay_on,
+		       unsigned long *delay_off);
+void led_trigger_blink_oneshot(struct led_trigger *trigger,
+			       unsigned long *delay_on,
+			       unsigned long *delay_off,
+			       int invert);
+void led_trigger_set_default(struct led_classdev *led_cdev);
+int led_trigger_set(struct led_classdev *led_cdev, struct led_trigger *trigger);
+void led_trigger_remove(struct led_classdev *led_cdev);
 
 static inline void led_set_trigger_data(struct led_classdev *led_cdev,
 					void *trigger_data)
@@ -410,8 +404,7 @@ static inline void *led_get_trigger_data(struct led_classdev *led_cdev)
  * This is meant to be used on triggers with statically
  * allocated name.
  */
-extern void led_trigger_rename_static(const char *name,
-				      struct led_trigger *trig);
+void led_trigger_rename_static(const char *name, struct led_trigger *trig);
 
 #define module_led_trigger(__led_trigger) \
 	module_driver(__led_trigger, led_trigger_register, \
@@ -453,20 +446,20 @@ static inline void *led_get_trigger_data(struct led_classdev *led_cdev)
 
 /* Trigger specific functions */
 #ifdef CONFIG_LEDS_TRIGGER_DISK
-extern void ledtrig_disk_activity(bool write);
+void ledtrig_disk_activity(bool write);
 #else
 static inline void ledtrig_disk_activity(bool write) {}
 #endif
 
 #ifdef CONFIG_LEDS_TRIGGER_MTD
-extern void ledtrig_mtd_activity(void);
+void ledtrig_mtd_activity(void);
 #else
 static inline void ledtrig_mtd_activity(void) {}
 #endif
 
 #if defined(CONFIG_LEDS_TRIGGER_CAMERA) || defined(CONFIG_LEDS_TRIGGER_CAMERA_MODULE)
-extern void ledtrig_flash_ctrl(bool on);
-extern void ledtrig_torch_ctrl(bool on);
+void ledtrig_flash_ctrl(bool on);
+void ledtrig_torch_ctrl(bool on);
 #else
 static inline void ledtrig_flash_ctrl(bool on) {}
 static inline void ledtrig_torch_ctrl(bool on) {}
@@ -546,7 +539,7 @@ enum cpu_led_event {
 	CPU_LED_HALTED,		/* Machine shutdown */
 };
 #ifdef CONFIG_LEDS_TRIGGER_CPU
-extern void ledtrig_cpu(enum cpu_led_event evt);
+void ledtrig_cpu(enum cpu_led_event evt);
 #else
 static inline void ledtrig_cpu(enum cpu_led_event evt)
 {
@@ -555,7 +548,7 @@ static inline void ledtrig_cpu(enum cpu_led_event evt)
 #endif
 
 #ifdef CONFIG_LEDS_BRIGHTNESS_HW_CHANGED
-extern void led_classdev_notify_brightness_hw_changed(
+void led_classdev_notify_brightness_hw_changed(
 	struct led_classdev *led_cdev, enum led_brightness brightness);
 #else
 static inline void led_classdev_notify_brightness_hw_changed(

commit 11f70002213774ed233950f71ea8803fa3700aa3
Author: Akinobu Mita <akinobu.mita@gmail.com>
Date:   Sun Sep 29 23:18:49 2019 +0900

    leds: remove PAGE_SIZE limit of /sys/class/leds/<led>/trigger
    
    Reading /sys/class/leds/<led>/trigger returns all available LED triggers.
    However, the size of this file is limited to PAGE_SIZE because of the
    limitation for sysfs attribute.
    
    Enabling LED CPU trigger on systems with thousands of CPUs easily hits
    PAGE_SIZE limit, and makes it impossible to see all available LED triggers
    and which trigger is currently activated.
    
    We work around it here by converting /sys/class/leds/<led>/trigger to
    binary attribute, which is not limited by length. This is _not_ good
    design, do not copy it.
    
    Signed-off-by: Akinobu Mita <akinobu.mita@gmail.com>
    Cc: "Rafael J. Wysocki" <rafael@kernel.org>
    Cc: Pavel Machek <pavel@ucw.cz>
    Cc: Dan Murphy <dmurphy@ti.com>A
    Reviewed-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Pavel Machek <pavel@ucw.cz>

diff --git a/include/linux/leds.h b/include/linux/leds.h
index b8df71193329..0b6b6166e9ea 100644
--- a/include/linux/leds.h
+++ b/include/linux/leds.h
@@ -361,11 +361,6 @@ struct led_trigger {
 #define led_trigger_get_led(dev)	((struct led_classdev *)dev_get_drvdata((dev)))
 #define led_trigger_get_drvdata(dev)	(led_get_trigger_data(led_trigger_get_led(dev)))
 
-ssize_t led_trigger_store(struct device *dev, struct device_attribute *attr,
-			const char *buf, size_t count);
-ssize_t led_trigger_show(struct device *dev, struct device_attribute *attr,
-			char *buf);
-
 /* Registration functions for complex triggers */
 extern int led_trigger_register(struct led_trigger *trigger);
 extern void led_trigger_unregister(struct led_trigger *trigger);

commit 7c322056e3564da1b5bdc3f3cb79229582955eb2
Author: Jacek Anaszewski <jacek.anaszewski@gmail.com>
Date:   Mon Aug 26 22:34:42 2019 +0200

    leds: Replace {devm_}led_classdev_register() macros with inlines
    
    Replace preprocessor macro aliases for legacy LED registration helpers
    with inline functions. It will allow to avoid misleading compiler error
    messages about missing symbol that actually wasn't explicitly used
    in the code. It used to occur when CONFIG_LEDS_CLASS was undefined
    and legacy (non-ext) function had been used in the code.
    
    Signed-off-by: Jacek Anaszewski <jacek.anaszewski@gmail.com>
    Acked-by: Pavel Machek <pavel@ucw.cz>

diff --git a/include/linux/leds.h b/include/linux/leds.h
index d101fd13e18e..b8df71193329 100644
--- a/include/linux/leds.h
+++ b/include/linux/leds.h
@@ -157,18 +157,39 @@ struct led_classdev {
  * @led_cdev: the led_classdev structure for this device
  * @init_data: the LED class device initialization data
  *
+ * Register a new object of LED class, with name derived from init_data.
+ *
  * Returns: 0 on success or negative error value on failure
  */
 extern int led_classdev_register_ext(struct device *parent,
 				     struct led_classdev *led_cdev,
 				     struct led_init_data *init_data);
-#define led_classdev_register(parent, led_cdev)			\
-	led_classdev_register_ext(parent, led_cdev, NULL)
+
+/**
+ * led_classdev_register - register a new object of LED class
+ * @parent: LED controller device this LED is driven by
+ * @led_cdev: the led_classdev structure for this device
+ *
+ * Register a new object of LED class, with name derived from the name property
+ * of passed led_cdev argument.
+ *
+ * Returns: 0 on success or negative error value on failure
+ */
+static inline int led_classdev_register(struct device *parent,
+					struct led_classdev *led_cdev)
+{
+	return led_classdev_register_ext(parent, led_cdev, NULL);
+}
+
 extern int devm_led_classdev_register_ext(struct device *parent,
 					  struct led_classdev *led_cdev,
 					  struct led_init_data *init_data);
-#define devm_led_classdev_register(parent, led_cdev)		\
-	devm_led_classdev_register_ext(parent, led_cdev, NULL)
+
+static inline int devm_led_classdev_register(struct device *parent,
+					     struct led_classdev *led_cdev)
+{
+	return devm_led_classdev_register_ext(parent, led_cdev, NULL);
+}
 extern void led_classdev_unregister(struct led_classdev *led_cdev);
 extern void devm_led_classdev_unregister(struct device *parent,
 					 struct led_classdev *led_cdev);

commit bb4e9af0348dfeafd66c7e7f82e8a0983fe5390c
Author: Jacek Anaszewski <jacek.anaszewski@gmail.com>
Date:   Sun Jun 9 20:19:04 2019 +0200

    leds: core: Add support for composing LED class device names
    
    Add generic support for composing LED class device name. The newly
    introduced led_compose_name() function composes device name according
    to either <color:function> or <devicename:color:function> pattern,
    depending on the configuration of initialization data.
    
    Backward compatibility with in-driver hard-coded LED class device
    names is assured thanks to the default_label and devicename properties
    of newly introduced struct led_init_data.
    
    In case none of the aforementioned properties was found, then, for OF
    nodes, the node name is adopted for LED class device name.
    
    At the occassion of amending the Documentation/leds/leds-class.txt
    unify spelling: colour -> color.
    
    Alongside these changes added is a new tool - tools/leds/get_led_device_info.sh.
    The tool allows retrieving details of a LED class device's parent device,
    which proves that using vendor or product name for devicename part
    of LED name doesn't convey any added value since that information had been
    already available in sysfs. The script performs also basic validation
    of a LED class device name.
    
    Signed-off-by: Jacek Anaszewski <jacek.anaszewski@gmail.com>
    Cc: Baolin Wang <baolin.wang@linaro.org>
    Cc: Dan Murphy <dmurphy@ti.com>
    Cc: Daniel Mack <daniel@zonque.org>
    Cc: Linus Walleij <linus.walleij@linaro.org>
    Cc: Oleh Kravchenko <oleg@kaa.org.ua>
    Cc: Sakari Ailus <sakari.ailus@linux.intel.com>
    Cc: Simon Shields <simon@lineageos.org>
    Reviewed-by: Linus Walleij <linus.walleij@linaro.org>
    Acked-by: Pavel Machek <pavel@ucw.cz>

diff --git a/include/linux/leds.h b/include/linux/leds.h
index 2bbe8a38fe39..d101fd13e18e 100644
--- a/include/linux/leds.h
+++ b/include/linux/leds.h
@@ -8,6 +8,7 @@
 #ifndef __LINUX_LEDS_H_INCLUDED
 #define __LINUX_LEDS_H_INCLUDED
 
+#include <dt-bindings/leds/common.h>
 #include <linux/device.h>
 #include <linux/kernfs.h>
 #include <linux/list.h>
@@ -33,6 +34,25 @@ enum led_brightness {
 struct led_init_data {
 	/* device fwnode handle */
 	struct fwnode_handle *fwnode;
+	/*
+	 * default <color:function> tuple, for backward compatibility
+	 * with in-driver hard-coded LED names used as a fallback when
+	 * DT "label" property is absent; it should be set to NULL
+	 * in new LED class drivers.
+	 */
+	const char *default_label;
+	/*
+	 * string to be used for devicename section of LED class device
+	 * either for label based LED name composition path or for fwnode
+	 * based when devname_mandatory is true
+	 */
+	const char *devicename;
+	/*
+	 * indicates if LED name should always comprise devicename section;
+	 * only LEDs exposed by drivers of hot-pluggable devices should
+	 * set it to true
+	 */
+	bool devname_mandatory;
 };
 
 struct led_classdev {
@@ -257,6 +277,22 @@ extern void led_sysfs_disable(struct led_classdev *led_cdev);
  */
 extern void led_sysfs_enable(struct led_classdev *led_cdev);
 
+/**
+ * led_compose_name - compose LED class device name
+ * @dev: LED controller device object
+ * @child: child fwnode_handle describing a LED or a group of synchronized LEDs;
+ *	   it must be provided only for fwnode based LEDs
+ * @led_classdev_name: composed LED class device name
+ *
+ * Create LED class device name basing on the provided init_data argument.
+ * The name can have <devicename:color:function> or <color:function>.
+ * form, depending on the init_data configuration.
+ *
+ * Returns: 0 on success or negative error value on failure
+ */
+extern int led_compose_name(struct device *dev, struct led_init_data *init_data,
+			    char *led_classdev_name);
+
 /**
  * led_sysfs_is_disabled - check if LED sysfs interface is disabled
  * @led_cdev: the LED to query
@@ -434,6 +470,15 @@ struct led_platform_data {
 	struct led_info	*leds;
 };
 
+struct led_properties {
+	u32		color;
+	bool		color_present;
+	const char	*function;
+	u32		func_enum;
+	bool		func_enum_present;
+	const char	*label;
+};
+
 struct gpio_desc;
 typedef int (*gpio_blink_set_t)(struct gpio_desc *desc, int state,
 				unsigned long *delay_on,

commit b2b998c0f944993c9ef435569651e407d607af41
Author: Jacek Anaszewski <jacek.anaszewski@gmail.com>
Date:   Sun Jun 9 20:19:03 2019 +0200

    leds: class: Improve LED and LED flash class registration API
    
    Replace of_led_classdev_register() with led_classdev_register_ext(), which
    accepts easily extendable struct led_init_data, instead of the fixed
    struct device_node argument. The latter can be now passed in an fwnode
    property of the struct led_init_data.
    
    The modification is driven by the need for passing additional arguments
    required for the forthcoming generic mechanism for composing LED names.
    Currently the LED name is conveyed in the "name" char pointer property of
    the struct led_classdev. This is redundant since LED class device name
    is accessible throughout the whole LED class device life time via
    associated struct device's kobj->name property.
    
    The change will not break any existing clients since the patch alters
    also existing led_classdev{_flash}_register() macro wrappers, that pass
    NULL in place of init_data, which leads to using legacy name
    initialization path basing on the struct led_classdev's "name" property.
    
    Three existing users of devm_of_led_classdev_registers() are modified
    to use devm_led_classdev_register(), which will not impact their
    operation since they in fact didn't need to pass struct device_node on
    registration from the beginning.
    
    Signed-off-by: Jacek Anaszewski <jacek.anaszewski@gmail.com>
    Cc: Baolin Wang <baolin.wang@linaro.org>
    Cc: Dan Murphy <dmurphy@ti.com>
    Cc: Daniel Mack <daniel@zonque.org>
    Cc: Linus Walleij <linus.walleij@linaro.org>
    Cc: Oleh Kravchenko <oleg@kaa.org.ua>
    Cc: Sakari Ailus <sakari.ailus@linux.intel.com>
    Cc: Simon Shields <simon@lineageos.org>
    Acked-by: Pavel Machek <pavel@ucw.cz>

diff --git a/include/linux/leds.h b/include/linux/leds.h
index 9b2bf574a17a..2bbe8a38fe39 100644
--- a/include/linux/leds.h
+++ b/include/linux/leds.h
@@ -30,6 +30,11 @@ enum led_brightness {
 	LED_FULL	= 255,
 };
 
+struct led_init_data {
+	/* device fwnode handle */
+	struct fwnode_handle *fwnode;
+};
+
 struct led_classdev {
 	const char		*name;
 	enum led_brightness	 brightness;
@@ -125,16 +130,25 @@ struct led_classdev {
 	struct mutex		led_access;
 };
 
-extern int of_led_classdev_register(struct device *parent,
-				    struct device_node *np,
-				    struct led_classdev *led_cdev);
-#define led_classdev_register(parent, led_cdev)				\
-	of_led_classdev_register(parent, NULL, led_cdev)
-extern int devm_of_led_classdev_register(struct device *parent,
-					 struct device_node *np,
-					 struct led_classdev *led_cdev);
-#define devm_led_classdev_register(parent, led_cdev)			\
-	devm_of_led_classdev_register(parent, NULL, led_cdev)
+/**
+ * led_classdev_register_ext - register a new object of LED class with
+ *			       init data
+ * @parent: LED controller device this LED is driven by
+ * @led_cdev: the led_classdev structure for this device
+ * @init_data: the LED class device initialization data
+ *
+ * Returns: 0 on success or negative error value on failure
+ */
+extern int led_classdev_register_ext(struct device *parent,
+				     struct led_classdev *led_cdev,
+				     struct led_init_data *init_data);
+#define led_classdev_register(parent, led_cdev)			\
+	led_classdev_register_ext(parent, led_cdev, NULL)
+extern int devm_led_classdev_register_ext(struct device *parent,
+					  struct led_classdev *led_cdev,
+					  struct led_init_data *init_data);
+#define devm_led_classdev_register(parent, led_cdev)		\
+	devm_led_classdev_register_ext(parent, led_cdev, NULL)
 extern void led_classdev_unregister(struct led_classdev *led_cdev);
 extern void devm_led_classdev_unregister(struct device *parent,
 					 struct led_classdev *led_cdev);

commit d2912cb15bdda8ba4a5dd73396ad62641af2f520
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Tue Jun 4 10:11:33 2019 +0200

    treewide: Replace GPLv2 boilerplate/reference with SPDX - rule 500
    
    Based on 2 normalized pattern(s):
    
      this program is free software you can redistribute it and or modify
      it under the terms of the gnu general public license version 2 as
      published by the free software foundation
    
      this program is free software you can redistribute it and or modify
      it under the terms of the gnu general public license version 2 as
      published by the free software foundation #
    
    extracted by the scancode license scanner the SPDX license identifier
    
      GPL-2.0-only
    
    has been chosen to replace the boilerplate/reference in 4122 file(s).
    
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Reviewed-by: Enrico Weigelt <info@metux.net>
    Reviewed-by: Kate Stewart <kstewart@linuxfoundation.org>
    Reviewed-by: Allison Randal <allison@lohutok.net>
    Cc: linux-spdx@vger.kernel.org
    Link: https://lkml.kernel.org/r/20190604081206.933168790@linutronix.de
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/include/linux/leds.h b/include/linux/leds.h
index 78204650fe2a..9b2bf574a17a 100644
--- a/include/linux/leds.h
+++ b/include/linux/leds.h
@@ -1,13 +1,9 @@
+/* SPDX-License-Identifier: GPL-2.0-only */
 /*
  * Driver model for leds and led triggers
  *
  * Copyright (C) 2005 John Lenz <lenz@cs.wisc.edu>
  * Copyright (C) 2005 Richard Purdie <rpurdie@openedhand.com>
- *
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License version 2 as
- * published by the Free Software Foundation.
- *
  */
 #ifndef __LINUX_LEDS_H_INCLUDED
 #define __LINUX_LEDS_H_INCLUDED

commit 8e1f456129e61371fb190c71ea182a9f6e21282e
Author: Krzysztof Kozlowski <krzk@kernel.org>
Date:   Wed Jan 9 15:44:46 2019 +0100

    leds: Add helper for getting default pattern from Device Tree
    
    Multiple LED triggers might need to access default pattern so add a
    helper for that.
    
    Signed-off-by: Krzysztof Kozlowski <krzk@kernel.org>
    Acked-by: Pavel Machek <pavel@ucw.cz>
    Signed-off-by: Jacek Anaszewski <jacek.anaszewski@gmail.com>

diff --git a/include/linux/leds.h b/include/linux/leds.h
index 5263f87e1d2c..78204650fe2a 100644
--- a/include/linux/leds.h
+++ b/include/linux/leds.h
@@ -218,6 +218,19 @@ extern int led_set_brightness_sync(struct led_classdev *led_cdev,
  */
 extern int led_update_brightness(struct led_classdev *led_cdev);
 
+/**
+ * led_get_default_pattern - return default pattern
+ *
+ * @led_cdev: the LED to get default pattern for
+ * @size:     pointer for storing the number of elements in returned array,
+ *            modified only if return != NULL
+ *
+ * Return:    Allocated array of integers with default pattern from device tree
+ *            or NULL.  Caller is responsible for kfree().
+ */
+extern u32 *led_get_default_pattern(struct led_classdev *led_cdev,
+				    unsigned int *size);
+
 /**
  * led_sysfs_disable - disable LED sysfs interface
  * @led_cdev: the LED to set

commit 4e4390ad067a61ce4e7607bd0df31f19a4caa36a
Merge: b1669432b355 8146aace60c7
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Tue Dec 25 14:52:50 2018 -0800

    Merge tag 'leds-for-4.21-rc1' of git://git.kernel.org/pub/scm/linux/kernel/git/j.anaszewski/linux-leds
    
    Pull LED updates from Jacek Anaszewski:
     "There are several few-liners, where most of them are fixes and
      improvments. One thing standing out is ground preparation for
      inititializing trigger parameters via Device Tree.
    
      We introduce LED_INIT_DEFAULT_TRIGGER flag for that purpose and set it
      when default trigger is matched. It indicates that trigger should
      parse DT properties to retrieve the initialization data when set as
      default one"
    
    * tag 'leds-for-4.21-rc1' of git://git.kernel.org/pub/scm/linux/kernel/git/j.anaszewski/linux-leds:
      led: triggers: Initialize LED_INIT_DEFAULT_TRIGGER if trigger is brought after class
      led: triggers: Add LED_INIT_DEFAULT_TRIGGER flag
      led: triggers: Break the for loop after default trigger is found
      leds: pwm: Use OF variant of LED registering function
      leds: pwm: Simplify with resource-managed devm_led_classdev_register()
      leds: gpio: Drop unneeded manual of_node assignment
      leds: 88pm860x: Use of_node_name_eq for node name comparisons
      leds: powernv: add of_node_put()

commit 02d31765bb35101d711b862fc619a49857bb9070
Author: Jacek Anaszewski <jacek.anaszewski@gmail.com>
Date:   Mon Dec 10 10:29:58 2018 +0100

    led: triggers: Add LED_INIT_DEFAULT_TRIGGER flag
    
    Add the flag LED_INIT_DEFAULT_TRIGGER for indicating that trigger
    being set is a default trigger for the LED class device, and
    thus it should be initialized with settings provided in the fwnode.
    
    Set the flag in the led_trigger_set_default(). It is expected to be
    cleared in the activate() op of a trigger after trigger fwnode
    initialization data is parsed and applied. This should happen only
    once after LED class device registration, to allow leaving triggers
    in the idle state on re-apply and let the users apply their own
    settings without interference from the default ones.
    
    Signed-off-by: Jacek Anaszewski <jacek.anaszewski@gmail.com>
    Acked-by: Pavel Machek <pavel@ucw.cz>
    Signed-off-by: Krzysztof Kozlowski <krzk@kernel.org>

diff --git a/include/linux/leds.h b/include/linux/leds.h
index 7393a316d9fa..6f05a5816371 100644
--- a/include/linux/leds.h
+++ b/include/linux/leds.h
@@ -51,6 +51,7 @@ struct led_classdev {
 #define LED_PANIC_INDICATOR	BIT(20)
 #define LED_BRIGHT_HW_CHANGED	BIT(21)
 #define LED_RETAIN_AT_SHUTDOWN	BIT(22)
+#define LED_INIT_DEFAULT_TRIGGER BIT(23)
 
 	/* set_brightness_work / blink_timer flags, atomic, private. */
 	unsigned long		work_flags;

commit faa2541f5b1afa8b6d777a73bc2f27d5c8c98695
Author: Takashi Iwai <tiwai@suse.de>
Date:   Mon Nov 26 17:47:44 2018 +0100

    leds: trigger: Introduce audio mute LED trigger
    
    This patch adds a new LED trigger for coupling the audio mixer change
    with the LED on laptops or other devices.  Currently there are two
    trigger types, "audio-mute" and "audio-micmute".
    
    The audio driver triggers the LED brightness change via
    ledtrig_audio_set() call with the proper type (either mute or
    mic-mute).  OTOH, the consumers may call ledtrig_audio_get() for the
    initial brightness value that may have been set by the audio driver
    beforehand.
    
    This new stuff will be used by HD-audio codec driver and some platform
    drivers (thinkpad_acpi and dell-laptop, also upcoming huawei-wmi).
    
    Acked-by: Jacek Anaszewski <jacek.anaszewski@gmail.com>
    Acked-by: Pavel Machek <pavel@ucw.cz>
    Acked-by: Pali Rohár <pali.rohar@gmail.com>
    Signed-off-by: Takashi Iwai <tiwai@suse.de>

diff --git a/include/linux/leds.h b/include/linux/leds.h
index 7393a316d9fa..580cbaef789a 100644
--- a/include/linux/leds.h
+++ b/include/linux/leds.h
@@ -487,4 +487,24 @@ struct led_pattern {
 	int brightness;
 };
 
+enum led_audio {
+	LED_AUDIO_MUTE,		/* master mute LED */
+	LED_AUDIO_MICMUTE,	/* mic mute LED */
+	NUM_AUDIO_LEDS
+};
+
+#if IS_ENABLED(CONFIG_LEDS_TRIGGER_AUDIO)
+enum led_brightness ledtrig_audio_get(enum led_audio type);
+void ledtrig_audio_set(enum led_audio type, enum led_brightness state);
+#else
+static inline enum led_brightness ledtrig_audio_get(enum led_audio type)
+{
+	return LED_OFF;
+}
+static inline void ledtrig_audio_set(enum led_audio type,
+				     enum led_brightness state)
+{
+}
+#endif
+
 #endif		/* __LINUX_LEDS_H_INCLUDED */

commit 5fd752b6b3a2233972ce1726df8bdb40886113a9
Author: Baolin Wang <baolin.wang@linaro.org>
Date:   Thu Oct 11 12:07:14 2018 +0800

    leds: core: Introduce LED pattern trigger
    
    This patch adds a new LED trigger that LED device can configure
    to employ software or hardware pattern engine.
    
    Consumers can write 'pattern' file to enable the software pattern
    which alters the brightness for the specified duration with one
    software timer.
    
    Moreover consumers can write 'hw_pattern' file to enable the hardware
    pattern for some LED controllers which can autonomously control
    brightness over time, according to some preprogrammed hardware
    patterns.
    
    Signed-off-by: Raphael Teysseyre <rteysseyre@gmail.com>
    Signed-off-by: Baolin Wang <baolin.wang@linaro.org>
    Signed-off-by: Jacek Anaszewski <jacek.anaszewski@gmail.com>

diff --git a/include/linux/leds.h b/include/linux/leds.h
index 834683d603f9..7393a316d9fa 100644
--- a/include/linux/leds.h
+++ b/include/linux/leds.h
@@ -22,6 +22,7 @@
 #include <linux/workqueue.h>
 
 struct device;
+struct led_pattern;
 /*
  * LED Core
  */
@@ -88,6 +89,10 @@ struct led_classdev {
 				     unsigned long *delay_on,
 				     unsigned long *delay_off);
 
+	int (*pattern_set)(struct led_classdev *led_cdev,
+			   struct led_pattern *pattern, u32 len, int repeat);
+	int (*pattern_clear)(struct led_classdev *led_cdev);
+
 	struct device		*dev;
 	const struct attribute_group	**groups;
 
@@ -472,4 +477,14 @@ static inline void led_classdev_notify_brightness_hw_changed(
 	struct led_classdev *led_cdev, enum led_brightness brightness) { }
 #endif
 
+/**
+ * struct led_pattern - pattern interval settings
+ * @delta_t: pattern interval delay, in milliseconds
+ * @brightness: pattern interval brightness
+ */
+struct led_pattern {
+	u32 delta_t;
+	int brightness;
+};
+
 #endif		/* __LINUX_LEDS_H_INCLUDED */

commit 9acc560de2aac73ef99c54f0fdfb86b4684296b5
Author: Uwe Kleine-König <u.kleine-koenig@pengutronix.de>
Date:   Mon Jul 2 22:05:25 2018 +0200

    leds: triggers: new function led_set_trigger_data()
    
    This is the natural counter part to the already existing
    led_get_trigger_data().
    
    Signed-off-by: Uwe Kleine-König <u.kleine-koenig@pengutronix.de>
    Acked-by: Pavel Machek <pavel@ucw.cz>
    Signed-off-by: Jacek Anaszewski <jacek.anaszewski@gmail.com>

diff --git a/include/linux/leds.h b/include/linux/leds.h
index a3ee10846a4b..834683d603f9 100644
--- a/include/linux/leds.h
+++ b/include/linux/leds.h
@@ -303,6 +303,12 @@ extern int led_trigger_set(struct led_classdev *led_cdev,
 			   struct led_trigger *trigger);
 extern void led_trigger_remove(struct led_classdev *led_cdev);
 
+static inline void led_set_trigger_data(struct led_classdev *led_cdev,
+					void *trigger_data)
+{
+	led_cdev->trigger_data = trigger_data;
+}
+
 static inline void *led_get_trigger_data(struct led_classdev *led_cdev)
 {
 	return led_cdev->trigger_data;
@@ -356,6 +362,7 @@ static inline int led_trigger_set(struct led_classdev *led_cdev,
 }
 
 static inline void led_trigger_remove(struct led_classdev *led_cdev) {}
+static inline void led_set_trigger_data(struct led_classdev *led_cdev) {}
 static inline void *led_get_trigger_data(struct led_classdev *led_cdev)
 {
 	return NULL;

commit a0b750768371e410d77b60bcf49c18bd45078d55
Author: Uwe Kleine-König <u.kleine-koenig@pengutronix.de>
Date:   Mon Jul 2 22:05:24 2018 +0200

    leds: triggers: define module_led_trigger helper
    
    This helps to simplify modules that provide a simple led_trigger. It's
    inspired by module_platform_driver, module_i2c_driver et al.
    
    Signed-off-by: Uwe Kleine-König <u.kleine-koenig@pengutronix.de>
    Acked-by: Pavel Machek <pavel@ucw.cz>
    Signed-off-by: Jacek Anaszewski <jacek.anaszewski@gmail.com>

diff --git a/include/linux/leds.h b/include/linux/leds.h
index 33484a5c7478..a3ee10846a4b 100644
--- a/include/linux/leds.h
+++ b/include/linux/leds.h
@@ -326,6 +326,10 @@ static inline void *led_get_trigger_data(struct led_classdev *led_cdev)
 extern void led_trigger_rename_static(const char *name,
 				      struct led_trigger *trig);
 
+#define module_led_trigger(__led_trigger) \
+	module_driver(__led_trigger, led_trigger_register, \
+		      led_trigger_unregister)
+
 #else
 
 /* Trigger has no members */

commit a7e7a3156300a7e1982b03cc9cb8fb0c86434c49
Author: Uwe Kleine-König <u.kleine-koenig@pengutronix.de>
Date:   Mon Jul 2 22:05:22 2018 +0200

    leds: triggers: add device attribute support
    
    As many triggers use device attributes, add support for these in
    led_trigger_set which allows simplifying the drivers accordingly.
    
    Signed-off-by: Uwe Kleine-König <u.kleine-koenig@pengutronix.de>
    Acked-by: Pavel Machek <pavel@ucw.cz>
    Signed-off-by: Jacek Anaszewski <jacek.anaszewski@gmail.com>

diff --git a/include/linux/leds.h b/include/linux/leds.h
index ba5baaaa43bf..33484a5c7478 100644
--- a/include/linux/leds.h
+++ b/include/linux/leds.h
@@ -262,8 +262,19 @@ struct led_trigger {
 
 	/* Link to next registered trigger */
 	struct list_head  next_trig;
+
+	const struct attribute_group **groups;
 };
 
+/*
+ * Currently the attributes in struct led_trigger::groups are added directly to
+ * the LED device. As this might change in the future, the following
+ * macros abstract getting the LED device and its trigger_data from the dev
+ * parameter passed to the attribute accessor functions.
+ */
+#define led_trigger_get_led(dev)	((struct led_classdev *)dev_get_drvdata((dev)))
+#define led_trigger_get_drvdata(dev)	(led_get_trigger_data(led_trigger_get_led(dev)))
+
 ssize_t led_trigger_store(struct device *dev, struct device_attribute *attr,
 			const char *buf, size_t count);
 ssize_t led_trigger_show(struct device *dev, struct device_attribute *attr,

commit 2282e125a406e09331c5a785e3df29035c99a607
Author: Uwe Kleine-König <u.kleine-koenig@pengutronix.de>
Date:   Mon Jul 2 22:05:21 2018 +0200

    leds: triggers: let struct led_trigger::activate() return an error code
    
    Given that activating a trigger can fail, let the callback return an
    indication. This prevents to have a trigger active according to the
    "trigger" sysfs attribute but not functional.
    
    All users are changed accordingly to return 0 for now. There is no intended
    change in behaviour.
    
    Signed-off-by: Uwe Kleine-König <u.kleine-koenig@pengutronix.de>
    Acked-by: Pavel Machek <pavel@ucw.cz>
    Signed-off-by: Jacek Anaszewski <jacek.anaszewski@gmail.com>

diff --git a/include/linux/leds.h b/include/linux/leds.h
index b7e82550e655..ba5baaaa43bf 100644
--- a/include/linux/leds.h
+++ b/include/linux/leds.h
@@ -253,7 +253,7 @@ static inline bool led_sysfs_is_disabled(struct led_classdev *led_cdev)
 struct led_trigger {
 	/* Trigger Properties */
 	const char	 *name;
-	void		(*activate)(struct led_classdev *led_cdev);
+	int		(*activate)(struct led_classdev *led_cdev);
 	void		(*deactivate)(struct led_classdev *led_cdev);
 
 	/* LEDs under control by this trigger (for simple triggers) */
@@ -288,8 +288,8 @@ extern void led_trigger_blink_oneshot(struct led_trigger *trigger,
 				      unsigned long *delay_off,
 				      int invert);
 extern void led_trigger_set_default(struct led_classdev *led_cdev);
-extern void led_trigger_set(struct led_classdev *led_cdev,
-			struct led_trigger *trigger);
+extern int led_trigger_set(struct led_classdev *led_cdev,
+			   struct led_trigger *trigger);
 extern void led_trigger_remove(struct led_classdev *led_cdev);
 
 static inline void *led_get_trigger_data(struct led_classdev *led_cdev)
@@ -334,8 +334,12 @@ static inline void led_trigger_blink_oneshot(struct led_trigger *trigger,
 				      unsigned long *delay_off,
 				      int invert) {}
 static inline void led_trigger_set_default(struct led_classdev *led_cdev) {}
-static inline void led_trigger_set(struct led_classdev *led_cdev,
-				struct led_trigger *trigger) {}
+static inline int led_trigger_set(struct led_classdev *led_cdev,
+				  struct led_trigger *trigger)
+{
+	return 0;
+}
+
 static inline void led_trigger_remove(struct led_classdev *led_cdev) {}
 static inline void *led_get_trigger_data(struct led_classdev *led_cdev)
 {

commit d1ed7c558612630ce4c48e440a6fdd8d4785f6a3
Author: Linus Walleij <linus.walleij@linaro.org>
Date:   Sat Feb 24 23:45:56 2018 +0100

    leds: Extends disk trigger for reads and writes
    
    This adds two new disk triggers for triggering on reads
    and writes respectively, named "disk-read" and "disk-write".
    
    The use case comes from working on the D-Link DNS-313 NAS
    box. This features an RGB LED for disk activity. with
    these two triggers I can couple the green LED to read
    activity and the red LED to write activity, which gives
    the appropriate user feedback about what is happening
    on the disk. When tested it gave exactly the feedback
    desired.
    
    The in-kernel interface is simply changed to pass a bool
    indicating if the activity is write activity and update
    each trigger (and the composite "disk-activity" trigger)
    depending on what is passed in.
    
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>
    Reviewed-by: Bartlomiej Zolnierkiewicz <b.zolnierkie@samsung.com>
    Acked-by: Pavel Machek <pavel@ucw.cz>
    Acked-by: Tejun Heo <tj@kernel.org>
    Acked-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Jacek Anaszewski <jacek.anaszewski@gmail.com>

diff --git a/include/linux/leds.h b/include/linux/leds.h
index 5579c64c8fd6..b7e82550e655 100644
--- a/include/linux/leds.h
+++ b/include/linux/leds.h
@@ -346,9 +346,9 @@ static inline void *led_get_trigger_data(struct led_classdev *led_cdev)
 
 /* Trigger specific functions */
 #ifdef CONFIG_LEDS_TRIGGER_DISK
-extern void ledtrig_disk_activity(void);
+extern void ledtrig_disk_activity(bool write);
 #else
-static inline void ledtrig_disk_activity(void) {}
+static inline void ledtrig_disk_activity(bool write) {}
 #endif
 
 #ifdef CONFIG_LEDS_TRIGGER_MTD

commit 55edd1dad96b760c87f5b9e2c461ba551a625f44
Author: David Lin <dtwlin@google.com>
Date:   Wed Sep 13 10:53:58 2017 -0700

    leds: Replace flags bit shift with BIT() macros
    
    This is for readability as well as to avoid checkpatch warnings when
    adding new bit flag information in the future.
    
    Signed-off-by: David Lin <dtwlin@google.com>
    Signed-off-by: Jacek Anaszewski <jacek.anaszewski@gmail.com>

diff --git a/include/linux/leds.h b/include/linux/leds.h
index bf6db4fe895b..5579c64c8fd6 100644
--- a/include/linux/leds.h
+++ b/include/linux/leds.h
@@ -40,16 +40,16 @@ struct led_classdev {
 	int			 flags;
 
 	/* Lower 16 bits reflect status */
-#define LED_SUSPENDED		(1 << 0)
-#define LED_UNREGISTERING	(1 << 1)
+#define LED_SUSPENDED		BIT(0)
+#define LED_UNREGISTERING	BIT(1)
 	/* Upper 16 bits reflect control information */
-#define LED_CORE_SUSPENDRESUME	(1 << 16)
-#define LED_SYSFS_DISABLE	(1 << 17)
-#define LED_DEV_CAP_FLASH	(1 << 18)
-#define LED_HW_PLUGGABLE	(1 << 19)
-#define LED_PANIC_INDICATOR	(1 << 20)
-#define LED_BRIGHT_HW_CHANGED	(1 << 21)
-#define LED_RETAIN_AT_SHUTDOWN	(1 << 22)
+#define LED_CORE_SUSPENDRESUME	BIT(16)
+#define LED_SYSFS_DISABLE	BIT(17)
+#define LED_DEV_CAP_FLASH	BIT(18)
+#define LED_HW_PLUGGABLE	BIT(19)
+#define LED_PANIC_INDICATOR	BIT(20)
+#define LED_BRIGHT_HW_CHANGED	BIT(21)
+#define LED_RETAIN_AT_SHUTDOWN	BIT(22)
 
 	/* set_brightness_work / blink_timer flags, atomic, private. */
 	unsigned long		work_flags;

commit f5808ac158f2b16b686a3d3c0879c5d6048aba14
Author: Andrew Jeffery <andrew@aj.id.au>
Date:   Mon Aug 28 09:47:11 2017 +0930

    leds: gpio: Allow LED to retain state at shutdown
    
    In some systems, such as Baseboard Management Controllers (BMCs), we
    want to retain the state of LEDs across a reboot of the BMC (whilst the
    host remains up). Implement support for the retain-state-shutdown
    devicetree property in leds-gpio.
    
    Signed-off-by: Andrew Jeffery <andrew@aj.id.au>
    Acked-by: Pavel Machek <pavel@ucw.cz>
    Tested-by: Brandon Wyman <bjwyman@gmail.com>
    Signed-off-by: Jacek Anaszewski <jacek.anaszewski@gmail.com>

diff --git a/include/linux/leds.h b/include/linux/leds.h
index 64c56d454f7d..bf6db4fe895b 100644
--- a/include/linux/leds.h
+++ b/include/linux/leds.h
@@ -49,6 +49,7 @@ struct led_classdev {
 #define LED_HW_PLUGGABLE	(1 << 19)
 #define LED_PANIC_INDICATOR	(1 << 20)
 #define LED_BRIGHT_HW_CHANGED	(1 << 21)
+#define LED_RETAIN_AT_SHUTDOWN	(1 << 22)
 
 	/* set_brightness_work / blink_timer flags, atomic, private. */
 	unsigned long		work_flags;
@@ -392,6 +393,7 @@ struct gpio_led {
 	unsigned	retain_state_suspended : 1;
 	unsigned	panic_indicator : 1;
 	unsigned	default_state : 2;
+	unsigned	retain_state_shutdown : 1;
 	/* default_state should be one of LEDS_GPIO_DEFSTATE_(ON|OFF|KEEP) */
 	struct gpio_desc *gpiod;
 };

commit 442c609830e98919faa78b797e9b89c53bab9cbf
Author: Rafał Miłecki <rafal@milecki.pl>
Date:   Mon Mar 6 06:19:44 2017 +0100

    leds: core: add OF variants of LED registering functions
    
    These new functions allow passing an additional device_node argument
    that will be internally set for created LED device. Thanks to this LED
    core code and triggers will be able to access DT node for reading extra
    info.
    
    The easiest solution for achieving this was reworking old functions to
    more generic ones & adding simple defines for API compatibility.
    
    Signed-off-by: Rafał Miłecki <rafal@milecki.pl>
    Acked-by: Pavel Machek <pavel@ucw.cz>
    Signed-off-by: Jacek Anaszewski <jacek.anaszewski@gmail.com>

diff --git a/include/linux/leds.h b/include/linux/leds.h
index 38c0bd7ca107..64c56d454f7d 100644
--- a/include/linux/leds.h
+++ b/include/linux/leds.h
@@ -122,10 +122,16 @@ struct led_classdev {
 	struct mutex		led_access;
 };
 
-extern int led_classdev_register(struct device *parent,
-				 struct led_classdev *led_cdev);
-extern int devm_led_classdev_register(struct device *parent,
-				      struct led_classdev *led_cdev);
+extern int of_led_classdev_register(struct device *parent,
+				    struct device_node *np,
+				    struct led_classdev *led_cdev);
+#define led_classdev_register(parent, led_cdev)				\
+	of_led_classdev_register(parent, NULL, led_cdev)
+extern int devm_of_led_classdev_register(struct device *parent,
+					 struct device_node *np,
+					 struct led_classdev *led_cdev);
+#define devm_led_classdev_register(parent, led_cdev)			\
+	devm_of_led_classdev_register(parent, NULL, led_cdev)
 extern void led_classdev_unregister(struct led_classdev *led_cdev);
 extern void devm_led_classdev_unregister(struct device *parent,
 					 struct led_classdev *led_cdev);

commit 0cb8eb30d425d2d2ae28ab630596c44a158784c4
Author: Hans de Goede <hdegoede@redhat.com>
Date:   Sun Jan 29 14:42:52 2017 +0100

    leds: class: Add new optional brightness_hw_changed attribute
    
    Some LEDs may have their brightness level changed autonomously
    (outside of kernel control) by hardware / firmware. This commit
    adds support for an optional brightness_hw_changed attribute to
    signal such changes to userspace (if a driver can detect them):
    
    What:           /sys/class/leds/<led>/brightness_hw_changed
    Date:           January 2017
    KernelVersion:  4.11
    Description:
                    Last hardware set brightness level for this LED. Some LEDs
                    may be changed autonomously by hardware/firmware. Only LEDs
                    where this happens and the driver can detect this, will
                    have this file.
    
                    This file supports poll() to detect when the hardware
                    changes the brightness.
    
                    Reading this file will return the last brightness level set
                    by the hardware, this may be different from the current
                    brightness.
    
    Drivers which want to support this, simply add LED_BRIGHT_HW_CHANGED to
    their flags field and call led_classdev_notify_brightness_hw_changed()
    with the hardware set brightness when they detect a hardware / firmware
    triggered brightness change.
    
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Acked-by: Pavel Machek <pavel@ucw.cz>
    Signed-off-by: Jacek Anaszewski <jacek.anaszewski@gmail.com>

diff --git a/include/linux/leds.h b/include/linux/leds.h
index bb50d0151e75..38c0bd7ca107 100644
--- a/include/linux/leds.h
+++ b/include/linux/leds.h
@@ -13,6 +13,7 @@
 #define __LINUX_LEDS_H_INCLUDED
 
 #include <linux/device.h>
+#include <linux/kernfs.h>
 #include <linux/list.h>
 #include <linux/mutex.h>
 #include <linux/rwsem.h>
@@ -47,6 +48,7 @@ struct led_classdev {
 #define LED_DEV_CAP_FLASH	(1 << 18)
 #define LED_HW_PLUGGABLE	(1 << 19)
 #define LED_PANIC_INDICATOR	(1 << 20)
+#define LED_BRIGHT_HW_CHANGED	(1 << 21)
 
 	/* set_brightness_work / blink_timer flags, atomic, private. */
 	unsigned long		work_flags;
@@ -111,6 +113,11 @@ struct led_classdev {
 	bool			activated;
 #endif
 
+#ifdef CONFIG_LEDS_BRIGHTNESS_HW_CHANGED
+	int			 brightness_hw_changed;
+	struct kernfs_node	*brightness_hw_changed_kn;
+#endif
+
 	/* Ensures consistent access to the LED Flash Class device */
 	struct mutex		led_access;
 };
@@ -423,4 +430,12 @@ static inline void ledtrig_cpu(enum cpu_led_event evt)
 }
 #endif
 
+#ifdef CONFIG_LEDS_BRIGHTNESS_HW_CHANGED
+extern void led_classdev_notify_brightness_hw_changed(
+	struct led_classdev *led_cdev, enum led_brightness brightness);
+#else
+static inline void led_classdev_notify_brightness_hw_changed(
+	struct led_classdev *led_cdev, enum led_brightness brightness) { }
+#endif
+
 #endif		/* __LINUX_LEDS_H_INCLUDED */

commit 4e552c8cb5bc9137e67e035bab8df6dddbca7384
Author: Andi Shyti <andi.shyti@samsung.com>
Date:   Thu Jan 5 11:34:12 2017 +0900

    leds: add LED_ON brightness as boolean value
    
    Some devices do not handle the led brightness or simply don't
    care about it. Conceptually said devices want to just switch on
    or off the led. It is useless in this case to have a 255 range
    of brightness, while just having an LED_ON and LED_OFF improves
    the boolean meaning of the led status.
    
    Signed-off-by: Andi Shyti <andi.shyti@samsung.com>
    Acked-by: Pavel Machek <pavel@ucw.cz>
    Signed-off-by: Jacek Anaszewski <jacek.anaszewski@gmail.com>

diff --git a/include/linux/leds.h b/include/linux/leds.h
index 569cb531094c..bb50d0151e75 100644
--- a/include/linux/leds.h
+++ b/include/linux/leds.h
@@ -27,6 +27,7 @@ struct device;
 
 enum led_brightness {
 	LED_OFF		= 0,
+	LED_ON		= 1,
 	LED_HALF	= 127,
 	LED_FULL	= 255,
 };

commit eb1610b4c273370f491c5e194e5a56e3470d81e8
Author: Hans de Goede <hdegoede@redhat.com>
Date:   Sun Oct 23 21:47:26 2016 +0200

    led: core: Fix blink_brightness setting race
    
    All 3 of led_timer_func, led_set_brightness and led_set_software_blink
    set blink_brightness. If led_timer_func or led_set_software_blink race
    with led_set_brightness they may end up overwriting the new
    blink_brightness. The new atomic work_flags does not protect against
    this as it just protects the flags and not blink_brightness.
    
    This commit introduces a new new_blink_brightness value which gets
    set by led_set_brightness and read by led_timer_func on LED on, fixing
    this.
    
    Dealing with the new brightness at LED on time, makes the new
    brightness apply sooner, which also fixes a led_set_brightness which
    happens while a oneshot blink which ends in LED on is running not
    getting applied.
    
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Signed-off-by: Jacek Anaszewski <j.anaszewski@samsung.com>

diff --git a/include/linux/leds.h b/include/linux/leds.h
index 21c598b366f8..569cb531094c 100644
--- a/include/linux/leds.h
+++ b/include/linux/leds.h
@@ -93,6 +93,7 @@ struct led_classdev {
 	unsigned long		 blink_delay_on, blink_delay_off;
 	struct timer_list	 blink_timer;
 	int			 blink_brightness;
+	int			 new_blink_brightness;
 	void			(*flash_resume)(struct led_classdev *led_cdev);
 
 	struct work_struct	set_brightness_work;

commit a9c6ce57ec2f136d08141e8220a0ffaca216f7b0
Author: Hans de Goede <hdegoede@redhat.com>
Date:   Tue Nov 8 14:38:46 2016 +0100

    led: core: Use atomic bit-field for the blink-flags
    
    All the LED_BLINK* flags are accessed read-modify-write from e.g.
    led_set_brightness and led_blink_set_oneshot while both
    set_brightness_work and the blink_timer may be running.
    
    If these race then the modify step done by one of them may be lost,
    switch the LED_BLINK* flags to a new atomic work_flags bit-field
    to avoid this race.
    
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Signed-off-by: Jacek Anaszewski <j.anaszewski@samsung.com>

diff --git a/include/linux/leds.h b/include/linux/leds.h
index ddfcb2df3656..21c598b366f8 100644
--- a/include/linux/leds.h
+++ b/include/linux/leds.h
@@ -42,16 +42,20 @@ struct led_classdev {
 #define LED_UNREGISTERING	(1 << 1)
 	/* Upper 16 bits reflect control information */
 #define LED_CORE_SUSPENDRESUME	(1 << 16)
-#define LED_BLINK_SW		(1 << 17)
-#define LED_BLINK_ONESHOT	(1 << 18)
-#define LED_BLINK_ONESHOT_STOP	(1 << 19)
-#define LED_BLINK_INVERT	(1 << 20)
-#define LED_BLINK_BRIGHTNESS_CHANGE (1 << 21)
-#define LED_BLINK_DISABLE	(1 << 22)
-#define LED_SYSFS_DISABLE	(1 << 23)
-#define LED_DEV_CAP_FLASH	(1 << 24)
-#define LED_HW_PLUGGABLE	(1 << 25)
-#define LED_PANIC_INDICATOR	(1 << 26)
+#define LED_SYSFS_DISABLE	(1 << 17)
+#define LED_DEV_CAP_FLASH	(1 << 18)
+#define LED_HW_PLUGGABLE	(1 << 19)
+#define LED_PANIC_INDICATOR	(1 << 20)
+
+	/* set_brightness_work / blink_timer flags, atomic, private. */
+	unsigned long		work_flags;
+
+#define LED_BLINK_SW			0
+#define LED_BLINK_ONESHOT		1
+#define LED_BLINK_ONESHOT_STOP		2
+#define LED_BLINK_INVERT		3
+#define LED_BLINK_BRIGHTNESS_CHANGE 	4
+#define LED_BLINK_DISABLE		5
 
 	/* Set LED brightness level
 	 * Must not sleep. Use brightness_set_blocking for drivers

commit 68620e594c250ba8c43a78e77f5296cb9952582e
Author: Heiner Kallweit <hkallweit1@gmail.com>
Date:   Wed Sep 14 20:54:12 2016 +0200

    leds: gpio: introduce gpio_blink_set_t
    
    Introduce a typedef gpio_blink_set_t to improve readability of the code.
    
    Signed-off-by: Heiner Kallweit <hkallweit1@gmail.com>
    Signed-off-by: Jacek Anaszewski <j.anaszewski@samsung.com>

diff --git a/include/linux/leds.h b/include/linux/leds.h
index 8a3b5d29602f..ddfcb2df3656 100644
--- a/include/linux/leds.h
+++ b/include/linux/leds.h
@@ -359,6 +359,11 @@ struct led_platform_data {
 	struct led_info	*leds;
 };
 
+struct gpio_desc;
+typedef int (*gpio_blink_set_t)(struct gpio_desc *desc, int state,
+				unsigned long *delay_on,
+				unsigned long *delay_off);
+
 /* For the leds-gpio driver */
 struct gpio_led {
 	const char *name;
@@ -382,9 +387,7 @@ struct gpio_led_platform_data {
 #define GPIO_LED_NO_BLINK_LOW	0	/* No blink GPIO state low */
 #define GPIO_LED_NO_BLINK_HIGH	1	/* No blink GPIO state high */
 #define GPIO_LED_BLINK		2	/* Please, blink */
-	int		(*gpio_blink_set)(struct gpio_desc *desc, int state,
-					unsigned long *delay_on,
-					unsigned long *delay_off);
+	gpio_blink_set_t	gpio_blink_set;
 };
 
 #ifdef CONFIG_NEW_LEDS

commit fca23e47dfdbcdacaae523f8b87d2240ce056ac1
Author: Andrew F. Davis <afd@ti.com>
Date:   Tue Jun 21 14:40:11 2016 +0200

    leds: Add no-op gpio_led_register_device when LED subsystem is disabled
    
    Some systems use 'gpio_led_register_device' to make an in-memory copy of
    their LED device table so the original can be removed as .init.rodata.
    When the LED subsystem is not enabled source in the led directory is not
    built and so this function may be undefined. Fix this here.
    
    Signed-off-by: Andrew F. Davis <afd@ti.com>
    Signed-off-by: Jacek Anaszewski <j.anaszewski@samsung.com>

diff --git a/include/linux/leds.h b/include/linux/leds.h
index 0aa3701f2bf4..8a3b5d29602f 100644
--- a/include/linux/leds.h
+++ b/include/linux/leds.h
@@ -387,8 +387,16 @@ struct gpio_led_platform_data {
 					unsigned long *delay_off);
 };
 
+#ifdef CONFIG_NEW_LEDS
 struct platform_device *gpio_led_register_device(
 		int id, const struct gpio_led_platform_data *pdata);
+#else
+static inline struct platform_device *gpio_led_register_device(
+		int id, const struct gpio_led_platform_data *pdata)
+{
+	return 0;
+}
+#endif
 
 enum cpu_led_event {
 	CPU_LED_IDLE_START,	/* CPU enters idle */

commit eb25cb9956cc9384b7fa0d75dec908c9fac8c444
Author: Stephan Linz <linz@li-pro.net>
Date:   Fri Jun 10 07:59:56 2016 +0200

    leds: convert IDE trigger to common disk trigger
    
    This patch converts the IDE specific LED trigger to a generic disk
    activity LED trigger. The libata core is now a trigger source just
    like before the IDE disk driver. It's merely a replacement of the
    string ide by disk.
    
    The patch is taken from http://dev.gentoo.org/~josejx/ata.patch and is
    widely used by any ibook/powerbook owners with great satisfaction.
    Likewise, it is very often used successfully on different ARM platforms.
    
    Unlike the original patch, the existing 'ide-disk' trigger is still
    available for backward compatibility. That reduce the amount of patches
    in affected device trees out of the mainline kernel. For further
    development, the new name 'disk-activity' should be used.
    
    Cc: Joseph Jezak <josejx@gentoo.org>
    Cc: Jörg Sommer <joerg@alea.gnuu.de>
    Cc: Richard Purdie <rpurdie@rpsys.net>
    Signed-off-by: Stephan Linz <linz@li-pro.net>
    Signed-off-by: Jacek Anaszewski <j.anaszewski@samsung.com>

diff --git a/include/linux/leds.h b/include/linux/leds.h
index e5e7f2e80a54..0aa3701f2bf4 100644
--- a/include/linux/leds.h
+++ b/include/linux/leds.h
@@ -325,10 +325,10 @@ static inline void *led_get_trigger_data(struct led_classdev *led_cdev)
 #endif /* CONFIG_LEDS_TRIGGERS */
 
 /* Trigger specific functions */
-#ifdef CONFIG_LEDS_TRIGGER_IDE_DISK
-extern void ledtrig_ide_activity(void);
+#ifdef CONFIG_LEDS_TRIGGER_DISK
+extern void ledtrig_disk_activity(void);
 #else
-static inline void ledtrig_ide_activity(void) {}
+static inline void ledtrig_disk_activity(void) {}
 #endif
 
 #ifdef CONFIG_LEDS_TRIGGER_MTD

commit 7cfe749fad5158247282f2fee30773fd454029ab
Author: Tony Makkiel <tony.makkiel@daqri.com>
Date:   Wed May 18 17:22:45 2016 +0100

    leds: core: Fix brightness setting upon hardware blinking enabled
    
    Commit 76931edd54f8 ("leds: fix brightness changing when software blinking
    is active") changed the semantics of led_set_brightness() which according
    to the documentation should disable blinking upon any brightness setting.
    Moreover it made it different for soft blink case, where it was possible
    to change blink brightness, and for hardware blink case, where setting
    any brightness greater than 0 was ignored.
    
    While the change itself is against the documentation claims, it was driven
    also by the fact that timer trigger remained active after turning blinking
    off. Fixing that would have required major refactoring in the led-core,
    led-class, and led-triggers because of cyclic dependencies.
    
    Finally, it has been decided that allowing for brightness change during
    blinking is beneficial as it can be accomplished without disturbing
    blink rhythm.
    
    The change in brightness setting semantics will not affect existing
    LED class drivers that implement blink_set op thanks to the LED_BLINK_SW
    flag introduced by this patch. The flag state will be from now on checked
    in led_set_brightness() which will allow to distinguish between software
    and hardware blink mode. In the latter case the control will be passed
    directly to the drivers which apply their semantics on brightness set,
    which is disable the blinking in case of most such drivers. New drivers
    will apply new semantics and just change the brightness while hardware
    blinking is on, if possible.
    
    The issue was smuggled by subsequent LED core improvements, which modified
    the code that originally introduced the problem.
    
    Fixes: f1e80c07416a ("leds: core: Add two new LED_BLINK_ flags")
    Signed-off-by: Tony Makkiel <tony.makkiel@daqri.com>
    Signed-off-by: Jacek Anaszewski <j.anaszewski@samsung.com>

diff --git a/include/linux/leds.h b/include/linux/leds.h
index d2b13066e781..e5e7f2e80a54 100644
--- a/include/linux/leds.h
+++ b/include/linux/leds.h
@@ -42,15 +42,16 @@ struct led_classdev {
 #define LED_UNREGISTERING	(1 << 1)
 	/* Upper 16 bits reflect control information */
 #define LED_CORE_SUSPENDRESUME	(1 << 16)
-#define LED_BLINK_ONESHOT	(1 << 17)
-#define LED_BLINK_ONESHOT_STOP	(1 << 18)
-#define LED_BLINK_INVERT	(1 << 19)
-#define LED_BLINK_BRIGHTNESS_CHANGE (1 << 20)
-#define LED_BLINK_DISABLE	(1 << 21)
-#define LED_SYSFS_DISABLE	(1 << 22)
-#define LED_DEV_CAP_FLASH	(1 << 23)
-#define LED_HW_PLUGGABLE	(1 << 24)
-#define LED_PANIC_INDICATOR	(1 << 25)
+#define LED_BLINK_SW		(1 << 17)
+#define LED_BLINK_ONESHOT	(1 << 18)
+#define LED_BLINK_ONESHOT_STOP	(1 << 19)
+#define LED_BLINK_INVERT	(1 << 20)
+#define LED_BLINK_BRIGHTNESS_CHANGE (1 << 21)
+#define LED_BLINK_DISABLE	(1 << 22)
+#define LED_SYSFS_DISABLE	(1 << 23)
+#define LED_DEV_CAP_FLASH	(1 << 24)
+#define LED_HW_PLUGGABLE	(1 << 25)
+#define LED_PANIC_INDICATOR	(1 << 26)
 
 	/* Set LED brightness level
 	 * Must not sleep. Use brightness_set_blocking for drivers
@@ -72,8 +73,8 @@ struct led_classdev {
 	 * and if both are zero then a sensible default should be chosen.
 	 * The call should adjust the timings in that case and if it can't
 	 * match the values specified exactly.
-	 * Deactivate blinking again when the brightness is set to a fixed
-	 * value via the brightness_set() callback.
+	 * Deactivate blinking again when the brightness is set to LED_OFF
+	 * via the brightness_set() callback.
 	 */
 	int		(*blink_set)(struct led_classdev *led_cdev,
 				     unsigned long *delay_on,

commit 80d6737b27bbdf645a815c136606836b435f0268
Author: Ezequiel Garcia <ezequiel@vanguardiasur.com.ar>
Date:   Thu Apr 28 19:03:40 2016 -0300

    leds: gpio: Support the "panic-indicator" firmware property
    
    Calling a GPIO LEDs is quite likely to work even if the kernel
    has paniced, so they are ideal to blink in this situation.
    This commit adds support for the new "panic-indicator"
    firmware property, allowing to mark a given LED to blink on
    a kernel panic.
    
    Signed-off-by: Ezequiel Garcia <ezequiel@vanguardiasur.com.ar>
    Reviewed-by: Matthias Brugger <mbrugger@suse.com>
    Acked-by: Pavel Machek <pavel@ucw.cz>
    Signed-off-by: Jacek Anaszewski <j.anaszewski@samsung.com>

diff --git a/include/linux/leds.h b/include/linux/leds.h
index 7e9fb00e15e8..d2b13066e781 100644
--- a/include/linux/leds.h
+++ b/include/linux/leds.h
@@ -365,6 +365,7 @@ struct gpio_led {
 	unsigned 	gpio;
 	unsigned	active_low : 1;
 	unsigned	retain_state_suspended : 1;
+	unsigned	panic_indicator : 1;
 	unsigned	default_state : 2;
 	/* default_state should be one of LEDS_GPIO_DEFSTATE_(ON|OFF|KEEP) */
 	struct gpio_desc *gpiod;

commit ba93cdce5bbe6929fd7486f87c985598ded8f451
Author: Ezequiel Garcia <ezequiel@vanguardiasur.com.ar>
Date:   Thu Apr 28 19:03:38 2016 -0300

    leds: triggers: Allow to switch the trigger to "panic" on a kernel panic
    
    This commit adds a new led_cdev flag LED_PANIC_INDICATOR, which
    allows to mark a specific LED to be switched to the "panic"
    trigger, on a kernel panic.
    
    This is useful to allow the user to assign a regular trigger
    to a given LED, and still blink that LED on a kernel panic.
    
    Signed-off-by: Ezequiel Garcia <ezequiel@vanguardiasur.com.ar>
    Reviewed-by: Matthias Brugger <mbrugger@suse.com>
    Acked-by: Pavel Machek <pavel@ucw.cz>
    Signed-off-by: Jacek Anaszewski <j.anaszewski@samsung.com>

diff --git a/include/linux/leds.h b/include/linux/leds.h
index 19eb10278bea..7e9fb00e15e8 100644
--- a/include/linux/leds.h
+++ b/include/linux/leds.h
@@ -50,6 +50,7 @@ struct led_classdev {
 #define LED_SYSFS_DISABLE	(1 << 22)
 #define LED_DEV_CAP_FLASH	(1 << 23)
 #define LED_HW_PLUGGABLE	(1 << 24)
+#define LED_PANIC_INDICATOR	(1 << 25)
 
 	/* Set LED brightness level
 	 * Must not sleep. Use brightness_set_blocking for drivers

commit 4b721174c7976f26300e39aa42714fb5a54bebb5
Author: Ezequiel Garcia <ezequiel@vanguardiasur.com.ar>
Date:   Tue Apr 12 17:46:40 2016 -0300

    leds: trigger: Introduce a MTD (NAND/NOR) trigger
    
    This commit introduces a MTD trigger for flash (NAND/NOR) device
    activity. The implementation is copied from IDE disk.
    
    This trigger deprecates the "nand-disk" LED trigger, but for backwards
    compatibility, we still keep the "nand-disk" trigger around.
    
    The motivation for deprecating the "nand-disk" LED trigger is that
    it only works for NAND drivers, whereas the "mtd" LED trigger
    is more generic (in fact, "nand-disk" currently only works for
    certain NAND drivers).
    
    Signed-off-by: Ezequiel Garcia <ezequiel@vanguardiasur.com.ar>
    Acked-by: Boris Brezillon <boris.brezillon@free-electrons.com>
    Signed-off-by: Jacek Anaszewski <j.anaszewski@samsung.com>

diff --git a/include/linux/leds.h b/include/linux/leds.h
index f203a8f89d30..19eb10278bea 100644
--- a/include/linux/leds.h
+++ b/include/linux/leds.h
@@ -329,6 +329,12 @@ extern void ledtrig_ide_activity(void);
 static inline void ledtrig_ide_activity(void) {}
 #endif
 
+#ifdef CONFIG_LEDS_TRIGGER_MTD
+extern void ledtrig_mtd_activity(void);
+#else
+static inline void ledtrig_mtd_activity(void) {}
+#endif
+
 #if defined(CONFIG_LEDS_TRIGGER_CAMERA) || defined(CONFIG_LEDS_TRIGGER_CAMERA_MODULE)
 extern void ledtrig_flash_ctrl(bool on);
 extern void ledtrig_torch_ctrl(bool on);

commit d84d80f38f0ff4eb4becf1a3569c8e7b2c463b61
Author: Heiner Kallweit <hkallweit1@gmail.com>
Date:   Fri Jan 22 21:43:48 2016 +0100

    leds: core: avoid error message when a USB LED device is unplugged
    
    When a USB LED device is unplugged the remove call chain calls
    led_classdev_unregister which tries to switch the LED off.
    As the device has been removed already this results in a ENODEV
    error message in dmesg.
    Avoid this error message by ignoring ENODEV in calls from
    led_classdev_unregister if the LED device is flagged as pluggable.
    
    Therefore a new flag LED_HW_PLUGGABLE was introduced which should be set by
    all LED drivers handling pluggable LED devices (mainly USB LED devices).
    
    Signed-off-by: Heiner Kallweit <hkallweit1@gmail.com>
    Signed-off-by: Jacek Anaszewski <j.anaszewski@samsung.com>

diff --git a/include/linux/leds.h b/include/linux/leds.h
index e3470e732ede..f203a8f89d30 100644
--- a/include/linux/leds.h
+++ b/include/linux/leds.h
@@ -39,6 +39,7 @@ struct led_classdev {
 
 	/* Lower 16 bits reflect status */
 #define LED_SUSPENDED		(1 << 0)
+#define LED_UNREGISTERING	(1 << 1)
 	/* Upper 16 bits reflect control information */
 #define LED_CORE_SUSPENDRESUME	(1 << 16)
 #define LED_BLINK_ONESHOT	(1 << 17)
@@ -48,6 +49,7 @@ struct led_classdev {
 #define LED_BLINK_DISABLE	(1 << 21)
 #define LED_SYSFS_DISABLE	(1 << 22)
 #define LED_DEV_CAP_FLASH	(1 << 23)
+#define LED_HW_PLUGGABLE	(1 << 24)
 
 	/* Set LED brightness level
 	 * Must not sleep. Use brightness_set_blocking for drivers

commit 70b2563b35b3edcf67819b99e560f3f0f6ce4a9f
Author: Heiner Kallweit <hkallweit1@gmail.com>
Date:   Thu Jan 21 23:11:25 2016 +0100

    leds: core: fix misleading comment after workqueue removal from drivers
    
    Now that workqueues have been removed from individual drivers and
    were replaced with a core-internal workqueue we shouldn't
    encourage people to add new workqueues to drivers.
    
    Signed-off-by: Heiner Kallweit <hkallweit1@gmail.com>
    Signed-off-by: Jacek Anaszewski <j.anaszewski@samsung.com>

diff --git a/include/linux/leds.h b/include/linux/leds.h
index bc1476fda96e..e3470e732ede 100644
--- a/include/linux/leds.h
+++ b/include/linux/leds.h
@@ -49,8 +49,10 @@ struct led_classdev {
 #define LED_SYSFS_DISABLE	(1 << 22)
 #define LED_DEV_CAP_FLASH	(1 << 23)
 
-	/* Set LED brightness level */
-	/* Must not sleep, use a workqueue if needed */
+	/* Set LED brightness level
+	 * Must not sleep. Use brightness_set_blocking for drivers
+	 * that can sleep while setting brightness.
+	 */
 	void		(*brightness_set)(struct led_classdev *led_cdev,
 					  enum led_brightness brightness);
 	/*

commit 9534cc31dda2bb129480ce2db92bf7bc1ef470ed
Author: Heiner Kallweit <hkallweit1@gmail.com>
Date:   Sat Jan 2 01:36:41 2016 +0100

    leds: core: add managed version of led_trigger_register
    
    Complementing devm_led_classdev_register add a managed version of
    led_trigger_register.
    
    I omit a managed version of led_classdev_unregister as the equivalent
    devm_led_classdev_unregister isn't used in the kernel as of today.
    
    Signed-off-by: Heiner Kallweit <hkallweit1@gmail.com>
    Signed-off-by: Jacek Anaszewski <j.anaszewski@samsung.com>

diff --git a/include/linux/leds.h b/include/linux/leds.h
index 088f1da02bed..bc1476fda96e 100644
--- a/include/linux/leds.h
+++ b/include/linux/leds.h
@@ -246,6 +246,8 @@ ssize_t led_trigger_show(struct device *dev, struct device_attribute *attr,
 /* Registration functions for complex triggers */
 extern int led_trigger_register(struct led_trigger *trigger);
 extern void led_trigger_unregister(struct led_trigger *trigger);
+extern int devm_led_trigger_register(struct device *dev,
+				     struct led_trigger *trigger);
 
 extern void led_trigger_register_simple(const char *name,
 				struct led_trigger **trigger);

commit 13ae79bbe4c214047f51623304d83b46eb02897d
Author: Jacek Anaszewski <j.anaszewski@samsung.com>
Date:   Wed Oct 7 11:10:43 2015 +0200

    leds: core: Drivers shouldn't enforce SYNC/ASYNC brightness setting
    
    This patch removes SET_BRIGHTNESS_ASYNC and SET_BRIGHTNESS_SYNC flags.
    led_set_brightness() now calls led_set_brightness_nosleep() instead of
    choosing between sync and async op basing on the flags defined by the
    driver.
    
    From now on, if a user wants to make sure that brightness will be set
    synchronously, they have to use led_set_brightness_sync() API. It is now
    being made publicly available since it has become apparent that it is
    a caller who should decide whether brightness is to be set in
    a synchronous or an asynchronous way.
    
    Signed-off-by: Jacek Anaszewski <j.anaszewski@samsung.com>
    Acked-by: Sakari Ailus <sakari.ailus@linux.intel.com>

diff --git a/include/linux/leds.h b/include/linux/leds.h
index b35e0f5b8d6c..088f1da02bed 100644
--- a/include/linux/leds.h
+++ b/include/linux/leds.h
@@ -47,9 +47,7 @@ struct led_classdev {
 #define LED_BLINK_BRIGHTNESS_CHANGE (1 << 20)
 #define LED_BLINK_DISABLE	(1 << 21)
 #define LED_SYSFS_DISABLE	(1 << 22)
-#define SET_BRIGHTNESS_ASYNC	(1 << 23)
-#define SET_BRIGHTNESS_SYNC	(1 << 24)
-#define LED_DEV_CAP_FLASH	(1 << 25)
+#define LED_DEV_CAP_FLASH	(1 << 23)
 
 	/* Set LED brightness level */
 	/* Must not sleep, use a workqueue if needed */
@@ -162,6 +160,21 @@ extern void led_blink_set_oneshot(struct led_classdev *led_cdev,
  */
 extern void led_set_brightness(struct led_classdev *led_cdev,
 			       enum led_brightness brightness);
+
+/**
+ * led_set_brightness_sync - set LED brightness synchronously
+ * @led_cdev: the LED to set
+ * @brightness: the brightness to set it to
+ *
+ * Set an LED's brightness immediately. This function will block
+ * the caller for the time required for accessing device registers,
+ * and it can sleep.
+ *
+ * Returns: 0 on success or negative error value on failure
+ */
+extern int led_set_brightness_sync(struct led_classdev *led_cdev,
+				   enum led_brightness value);
+
 /**
  * led_update_brightness - update LED brightness
  * @led_cdev: the LED to query

commit 1afcadfcd184c3b52e38bae15c247a5fa4a0e054
Author: Jacek Anaszewski <j.anaszewski@samsung.com>
Date:   Mon Oct 19 09:04:01 2015 +0200

    leds: core: Use set_brightness_work for the blocking op
    
    This patch makes LED core capable of setting brightness for drivers
    that implement brightness_set_blocking op. It removes from LED class
    drivers responsibility for using work queues on their own.
    
    In order to achieve this set_brightness_delayed callback is being
    modified to directly call one of available ops for brightness setting.
    
    led_set_brightness_async() function didn't set brightness in an
    asynchronous way in all cases. It was mistakenly assuming that all
    LED subsystem drivers used work queue in their brightness_set op,
    whereas only half of them did that. Since it has no users now,
    it is being removed.
    
    Signed-off-by: Jacek Anaszewski <j.anaszewski@samsung.com>
    Acked-by: Sakari Ailus <sakari.ailus@linux.intel.com>

diff --git a/include/linux/leds.h b/include/linux/leds.h
index 403fa8690295..b35e0f5b8d6c 100644
--- a/include/linux/leds.h
+++ b/include/linux/leds.h
@@ -158,7 +158,7 @@ extern void led_blink_set_oneshot(struct led_classdev *led_cdev,
  *
  * Set an LED's brightness, and, if necessary, cancel the
  * software blink timer that implements blinking when the
- * hardware doesn't.
+ * hardware doesn't. This function is guaranteed not to sleep.
  */
 extern void led_set_brightness(struct led_classdev *led_cdev,
 			       enum led_brightness brightness);

commit 437a4240f26461610cc0d90950b1c88348d9babe
Author: Jacek Anaszewski <j.anaszewski@samsung.com>
Date:   Wed Oct 7 11:10:40 2015 +0200

    leds: Rename brightness_set_sync op to brightness_set_blocking
    
    The initial purpose of brightness_set_sync op, introduced along with
    the LED flash class extension, was to add a means for setting torch LED
    brightness as soon as possible, which couldn't have been guaranteed by
    brightness_set op. This patch renames the op to brightness_set_blocking,
    which describes its purpose in a more generic way. It is beneficial
    in view of the prospective changes in the LED core, aiming at removing
    the need for using work queues in LED class drivers that can sleep
    or use delays while setting brightness.
    
    Signed-off-by: Jacek Anaszewski <j.anaszewski@samsung.com>
    Acked-by: Andrew Lunn <andrew@lunn.ch>
    Acked-by: Pavel Machek <pavel@ucw.cz>
    Acked-by: Sakari Ailus <sakari.ailus@linux.intel.com>

diff --git a/include/linux/leds.h b/include/linux/leds.h
index 7b67450234a9..403fa8690295 100644
--- a/include/linux/leds.h
+++ b/include/linux/leds.h
@@ -59,8 +59,8 @@ struct led_classdev {
 	 * Set LED brightness level immediately - it can block the caller for
 	 * the time required for accessing a LED device register.
 	 */
-	int		(*brightness_set_sync)(struct led_classdev *led_cdev,
-					enum led_brightness brightness);
+	int (*brightness_set_blocking)(struct led_classdev *led_cdev,
+				       enum led_brightness brightness);
 	/* Get LED brightness level */
 	enum led_brightness (*brightness_get)(struct led_classdev *led_cdev);
 

commit f1e80c07416adacc9ba1d9c5a4635c27b571f0df
Author: Jacek Anaszewski <j.anaszewski@samsung.com>
Date:   Wed Oct 7 11:10:39 2015 +0200

    leds: core: Add two new LED_BLINK_ flags
    
    This patch adds LED_BLINK_BRIGHTNESS_CHANGE flag to indicate that blink
    brightness has changed, and LED_BLINK_DISABLE flag to indicate that
    blinking deactivation has been requested. In order to use the flags
    led_timer_function and set_brightness_delayed callbacks as well as
    led_set_brightness() function are being modified. The main goal of these
    modifications is to prepare set_brightness_work for extension of the
    scope of its responsibilities.
    
    Signed-off-by: Jacek Anaszewski <j.anaszewski@samsung.com>
    Acked-by: Pavel Machek <pavel@ucw.cz>
    Acked-by: Sakari Ailus <sakari.ailus@linux.intel.com>

diff --git a/include/linux/leds.h b/include/linux/leds.h
index fa359c79c825..7b67450234a9 100644
--- a/include/linux/leds.h
+++ b/include/linux/leds.h
@@ -44,10 +44,12 @@ struct led_classdev {
 #define LED_BLINK_ONESHOT	(1 << 17)
 #define LED_BLINK_ONESHOT_STOP	(1 << 18)
 #define LED_BLINK_INVERT	(1 << 19)
-#define LED_SYSFS_DISABLE	(1 << 20)
-#define SET_BRIGHTNESS_ASYNC	(1 << 21)
-#define SET_BRIGHTNESS_SYNC	(1 << 22)
-#define LED_DEV_CAP_FLASH	(1 << 23)
+#define LED_BLINK_BRIGHTNESS_CHANGE (1 << 20)
+#define LED_BLINK_DISABLE	(1 << 21)
+#define LED_SYSFS_DISABLE	(1 << 22)
+#define SET_BRIGHTNESS_ASYNC	(1 << 23)
+#define SET_BRIGHTNESS_SYNC	(1 << 24)
+#define LED_DEV_CAP_FLASH	(1 << 25)
 
 	/* Set LED brightness level */
 	/* Must not sleep, use a workqueue if needed */

commit 8890624a4e8c2c7046d63bfd15d7331af9f55f10
Author: Michael Grzeschik <m.grzeschik@pengutronix.de>
Date:   Thu Sep 18 00:12:50 2014 +0200

    arcnet: com20020-pci: add led trigger support
    
    The EAE PLX-PCI card has special leds on the the main io pci resource
    bar. This patch adds support to trigger the conflict and data leds with
    the packages.
    
    Signed-off-by: Michael Grzeschik <m.grzeschik@pengutronix.de>

diff --git a/include/linux/leds.h b/include/linux/leds.h
index b122eeafb5dc..fa359c79c825 100644
--- a/include/linux/leds.h
+++ b/include/linux/leds.h
@@ -283,6 +283,13 @@ static inline void led_trigger_register_simple(const char *name,
 static inline void led_trigger_unregister_simple(struct led_trigger *trigger) {}
 static inline void led_trigger_event(struct led_trigger *trigger,
 				enum led_brightness event) {}
+static inline void led_trigger_blink(struct led_trigger *trigger,
+				      unsigned long *delay_on,
+				      unsigned long *delay_off) {}
+static inline void led_trigger_blink_oneshot(struct led_trigger *trigger,
+				      unsigned long *delay_on,
+				      unsigned long *delay_off,
+				      int invert) {}
 static inline void led_trigger_set_default(struct led_classdev *led_cdev) {}
 static inline void led_trigger_set(struct led_classdev *led_cdev,
 				struct led_trigger *trigger) {}

commit 20f56758b04364c3c139edbffde8cfaf0307edee
Author: Jacek Anaszewski <j.anaszewski@samsung.com>
Date:   Tue Apr 28 00:18:41 2015 -0700

    leds: unify the location of led-trigger API
    
    Part of led-trigger API was in the private drivers/leds/leds.h header.
    Move it to the include/linux/leds.h header to unify the API location
    and announce it as public. It has been already exported from
    led-triggers.c with EXPORT_SYMBOL_GPL macro. The no-op definitions are
    changed from macros to inline to match the style of the surrounding code.
    
    Signed-off-by: Jacek Anaszewski <j.anaszewski@samsung.com>
    Cc: Richard Purdie <rpurdie@rpsys.net>
    Acked-by: Sakari Ailus <sakari.ailus@linux.intel.com>
    Signed-off-by: Bryan Wu <cooloney@gmail.com>

diff --git a/include/linux/leds.h b/include/linux/leds.h
index 9a2b000094cf..b122eeafb5dc 100644
--- a/include/linux/leds.h
+++ b/include/linux/leds.h
@@ -12,6 +12,7 @@
 #ifndef __LINUX_LEDS_H_INCLUDED
 #define __LINUX_LEDS_H_INCLUDED
 
+#include <linux/device.h>
 #include <linux/list.h>
 #include <linux/mutex.h>
 #include <linux/rwsem.h>
@@ -222,6 +223,11 @@ struct led_trigger {
 	struct list_head  next_trig;
 };
 
+ssize_t led_trigger_store(struct device *dev, struct device_attribute *attr,
+			const char *buf, size_t count);
+ssize_t led_trigger_show(struct device *dev, struct device_attribute *attr,
+			char *buf);
+
 /* Registration functions for complex triggers */
 extern int led_trigger_register(struct led_trigger *trigger);
 extern void led_trigger_unregister(struct led_trigger *trigger);
@@ -238,6 +244,16 @@ extern void led_trigger_blink_oneshot(struct led_trigger *trigger,
 				      unsigned long *delay_on,
 				      unsigned long *delay_off,
 				      int invert);
+extern void led_trigger_set_default(struct led_classdev *led_cdev);
+extern void led_trigger_set(struct led_classdev *led_cdev,
+			struct led_trigger *trigger);
+extern void led_trigger_remove(struct led_classdev *led_cdev);
+
+static inline void *led_get_trigger_data(struct led_classdev *led_cdev)
+{
+	return led_cdev->trigger_data;
+}
+
 /**
  * led_trigger_rename_static - rename a trigger
  * @name: the new trigger name
@@ -267,6 +283,15 @@ static inline void led_trigger_register_simple(const char *name,
 static inline void led_trigger_unregister_simple(struct led_trigger *trigger) {}
 static inline void led_trigger_event(struct led_trigger *trigger,
 				enum led_brightness event) {}
+static inline void led_trigger_set_default(struct led_classdev *led_cdev) {}
+static inline void led_trigger_set(struct led_classdev *led_cdev,
+				struct led_trigger *trigger) {}
+static inline void led_trigger_remove(struct led_classdev *led_cdev) {}
+static inline void *led_get_trigger_data(struct led_classdev *led_cdev)
+{
+	return NULL;
+}
+
 #endif /* CONFIG_LEDS_TRIGGERS */
 
 /* Trigger specific functions */

commit 94fdec768dc72a6993479f59a17daa413f30029e
Author: Jacek Anaszewski <j.anaszewski@samsung.com>
Date:   Wed Mar 4 08:14:22 2015 -0800

    leds: flash: Remove synchronized flash strobe feature
    
    Synchronized flash strobe feature has been considered not fitting
    for LED subsystem sysfs interface and thus is being removed.
    
    Signed-off-by: Jacek Anaszewski <j.anaszewski@samsung.com>
    Acked-by: Kyungmin Park <kyungmin.park@samsung.com>
    Cc: Richard Purdie <rpurdie@rpsys.net>
    Signed-off-by: Bryan Wu <cooloney@gmail.com>

diff --git a/include/linux/leds.h b/include/linux/leds.h
index ed634279062e..9a2b000094cf 100644
--- a/include/linux/leds.h
+++ b/include/linux/leds.h
@@ -47,7 +47,6 @@ struct led_classdev {
 #define SET_BRIGHTNESS_ASYNC	(1 << 21)
 #define SET_BRIGHTNESS_SYNC	(1 << 22)
 #define LED_DEV_CAP_FLASH	(1 << 23)
-#define LED_DEV_CAP_SYNC_STROBE	(1 << 24)
 
 	/* Set LED brightness level */
 	/* Must not sleep, use a workqueue if needed */

commit ca1bb4ee4c3a017bb66840d11d5efdf4e8f3f66d
Author: Bjorn Andersson <bjorn.andersson@sonymobile.com>
Date:   Mon Feb 23 16:11:41 2015 -0800

    leds: Introduce devres helper for led_classdev_register
    
    (cooloney@gmail.com: add _unregister function into the document)
    
    Suggested-by: Stephen Boyd <sboyd@codeaurora.org>
    Signed-off-by: Bjorn Andersson <bjorn.andersson@sonymobile.com>
    Signed-off-by: Bryan Wu <cooloney@gmail.com>

diff --git a/include/linux/leds.h b/include/linux/leds.h
index f70f84f35674..ed634279062e 100644
--- a/include/linux/leds.h
+++ b/include/linux/leds.h
@@ -105,7 +105,11 @@ struct led_classdev {
 
 extern int led_classdev_register(struct device *parent,
 				 struct led_classdev *led_cdev);
+extern int devm_led_classdev_register(struct device *parent,
+				      struct led_classdev *led_cdev);
 extern void led_classdev_unregister(struct led_classdev *led_cdev);
+extern void devm_led_classdev_unregister(struct device *parent,
+					 struct led_classdev *led_cdev);
 extern void led_classdev_suspend(struct led_classdev *led_cdev);
 extern void led_classdev_resume(struct led_classdev *led_cdev);
 

commit 7aea8389a77abf9fde254aca2434a605c7704f58
Author: Jacek Anaszewski <j.anaszewski@samsung.com>
Date:   Fri Jan 9 07:22:51 2015 -0800

    leds: Add LED Flash class extension to the LED subsystem
    
    Some LED devices support two operation modes - torch and flash.
    This patch provides support for flash LED devices in the LED subsystem
    by introducing new sysfs attributes and kernel internal interface.
    The attributes being introduced are: flash_brightness, flash_strobe,
    flash_timeout, max_flash_timeout, max_flash_brightness, flash_fault,
    flash_sync_strobe and available_sync_leds. All the flash related
    features are placed in a separate module.
    
    The modifications aim to be compatible with V4L2 framework requirements
    related to the flash devices management. The design assumes that V4L2
    sub-device can take of the LED class device control and communicate
    with it through the kernel internal interface. When V4L2 Flash sub-device
    file is opened, the LED class device sysfs interface is made
    unavailable.
    
    Signed-off-by: Jacek Anaszewski <j.anaszewski@samsung.com>
    Acked-by: Kyungmin Park <kyungmin.park@samsung.com>
    Cc: Richard Purdie <rpurdie@rpsys.net>
    Acked-by: Pavel Machek <pavel@ucw.cz>
    Signed-off-by: Bryan Wu <cooloney@gmail.com>

diff --git a/include/linux/leds.h b/include/linux/leds.h
index cfceef32c9b3..f70f84f35674 100644
--- a/include/linux/leds.h
+++ b/include/linux/leds.h
@@ -46,6 +46,8 @@ struct led_classdev {
 #define LED_SYSFS_DISABLE	(1 << 20)
 #define SET_BRIGHTNESS_ASYNC	(1 << 21)
 #define SET_BRIGHTNESS_SYNC	(1 << 22)
+#define LED_DEV_CAP_FLASH	(1 << 23)
+#define LED_DEV_CAP_SYNC_STROBE	(1 << 24)
 
 	/* Set LED brightness level */
 	/* Must not sleep, use a workqueue if needed */
@@ -81,6 +83,7 @@ struct led_classdev {
 	unsigned long		 blink_delay_on, blink_delay_off;
 	struct timer_list	 blink_timer;
 	int			 blink_brightness;
+	void			(*flash_resume)(struct led_classdev *led_cdev);
 
 	struct work_struct	set_brightness_work;
 	int			delayed_set_value;

commit 2dbfca5a181973558277b28b1f4c36362291f5e0
Merge: dab363f938a5 2969bb18f889
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Mon Dec 15 18:28:25 2014 -0800

    Merge branch 'for-next' of git://git.kernel.org/pub/scm/linux/kernel/git/cooloney/linux-leds
    
    Pull LED subsystem update from Bryan Wu:
     "We got some cleanup and driver for LP8860 as well as some patches for
      LED Flash Class"
    
    * 'for-next' of git://git.kernel.org/pub/scm/linux/kernel/git/cooloney/linux-leds:
      leds: lp8860: Fix module dependency
      leds: lp8860: Introduce TI lp8860 4 channel LED driver
      leds: Add support for setting brightness in a synchronous way
      leds: implement sysfs interface locking mechanism
      leds: syscon: handle multiple syscon instances
      leds: delete copy/paste mistake
      leds: regulator: Convert to devm_regulator_get_exclusive

commit 4d71a4a12b130ad033219e6f58c74a64059415eb
Author: Jacek Anaszewski <j.anaszewski@samsung.com>
Date:   Fri Nov 14 02:50:18 2014 -0800

    leds: Add support for setting brightness in a synchronous way
    
    There are use cases when setting a LED brightness has to
    have immediate effect (e.g. setting a torch LED brightness).
    This patch extends LED subsystem to support such operations.
    The LED subsystem internal API __led_set_brightness is changed
    to led_set_brightness_async and new led_set_brightness_sync API
    is added.
    
    Signed-off-by: Jacek Anaszewski <j.anaszewski@samsung.com>
    Acked-by: Kyungmin Park <kyungmin.park@samsung.com>
    Cc: Richard Purdie <rpurdie@rpsys.net>
    Signed-off-by: Bryan Wu <cooloney@gmail.com>

diff --git a/include/linux/leds.h b/include/linux/leds.h
index 737f9b1051f2..dfe70e928eae 100644
--- a/include/linux/leds.h
+++ b/include/linux/leds.h
@@ -44,11 +44,19 @@ struct led_classdev {
 #define LED_BLINK_ONESHOT_STOP	(1 << 18)
 #define LED_BLINK_INVERT	(1 << 19)
 #define LED_SYSFS_DISABLE	(1 << 20)
+#define SET_BRIGHTNESS_ASYNC	(1 << 21)
+#define SET_BRIGHTNESS_SYNC	(1 << 22)
 
 	/* Set LED brightness level */
 	/* Must not sleep, use a workqueue if needed */
 	void		(*brightness_set)(struct led_classdev *led_cdev,
 					  enum led_brightness brightness);
+	/*
+	 * Set LED brightness level immediately - it can block the caller for
+	 * the time required for accessing a LED device register.
+	 */
+	int		(*brightness_set_sync)(struct led_classdev *led_cdev,
+					enum led_brightness brightness);
 	/* Get LED brightness level */
 	enum led_brightness (*brightness_get)(struct led_classdev *led_cdev);
 

commit acd899e4f3066b6662f6047da5b795cc762093cb
Author: Jacek Anaszewski <j.anaszewski@samsung.com>
Date:   Mon Sep 22 08:21:04 2014 -0700

    leds: implement sysfs interface locking mechanism
    
    Add a mechanism for locking LED subsystem sysfs interface.
    This patch prepares ground for addition of LED Flash Class
    extension, whose API will be integrated with V4L2 Flash API.
    Such a fusion enforces introducing a locking scheme, which
    will secure consistent access to the LED Flash Class device.
    
    The mechanism being introduced allows for disabling LED
    subsystem sysfs interface by calling led_sysfs_disable function
    and enabling it by calling led_sysfs_enable. The functions
    alter the LED_SYSFS_DISABLE flag state and must be called
    under mutex lock. The state of the lock is checked with use
    of led_sysfs_is_disabled function. Such a design allows for
    providing immediate feedback to the user space on whether
    the LED Flash Class device is available or is under V4L2 Flash
    sub-device control.
    
    Signed-off-by: Jacek Anaszewski <j.anaszewski@samsung.com>
    Acked-by: Kyungmin Park <kyungmin.park@samsung.com>
    Cc: Richard Purdie <rpurdie@rpsys.net>
    Signed-off-by: Bryan Wu <cooloney@gmail.com>

diff --git a/include/linux/leds.h b/include/linux/leds.h
index a57611d0c94e..737f9b1051f2 100644
--- a/include/linux/leds.h
+++ b/include/linux/leds.h
@@ -13,6 +13,7 @@
 #define __LINUX_LEDS_H_INCLUDED
 
 #include <linux/list.h>
+#include <linux/mutex.h>
 #include <linux/rwsem.h>
 #include <linux/spinlock.h>
 #include <linux/timer.h>
@@ -42,6 +43,7 @@ struct led_classdev {
 #define LED_BLINK_ONESHOT	(1 << 17)
 #define LED_BLINK_ONESHOT_STOP	(1 << 18)
 #define LED_BLINK_INVERT	(1 << 19)
+#define LED_SYSFS_DISABLE	(1 << 20)
 
 	/* Set LED brightness level */
 	/* Must not sleep, use a workqueue if needed */
@@ -85,6 +87,9 @@ struct led_classdev {
 	/* true if activated - deactivate routine uses it to do cleanup */
 	bool			activated;
 #endif
+
+	/* Ensures consistent access to the LED Flash Class device */
+	struct mutex		led_access;
 };
 
 extern int led_classdev_register(struct device *parent,
@@ -151,6 +156,33 @@ extern void led_set_brightness(struct led_classdev *led_cdev,
  */
 extern int led_update_brightness(struct led_classdev *led_cdev);
 
+/**
+ * led_sysfs_disable - disable LED sysfs interface
+ * @led_cdev: the LED to set
+ *
+ * Disable the led_cdev's sysfs interface.
+ */
+extern void led_sysfs_disable(struct led_classdev *led_cdev);
+
+/**
+ * led_sysfs_enable - enable LED sysfs interface
+ * @led_cdev: the LED to set
+ *
+ * Enable the led_cdev's sysfs interface.
+ */
+extern void led_sysfs_enable(struct led_classdev *led_cdev);
+
+/**
+ * led_sysfs_is_disabled - check if LED sysfs interface is disabled
+ * @led_cdev: the LED to query
+ *
+ * Returns: true if the led_cdev's sysfs interface is disabled.
+ */
+static inline bool led_sysfs_is_disabled(struct led_classdev *led_cdev)
+{
+	return led_cdev->flags & LED_SYSFS_DISABLE;
+}
+
 /*
  * LED Triggers
  */

commit c673a2b4008103525a3cf21bedf15ffac37bfef0
Author: Mika Westerberg <mika.westerberg@linux.intel.com>
Date:   Fri Oct 31 13:40:58 2014 +0200

    leds: leds-gpio: Convert gpio_blink_set() to use GPIO descriptors
    
    Commit 21f2aae91e902aad ("leds: leds-gpio: Add support for GPIO
    descriptors") already converted most of the driver to use GPIO descriptors.
    What is still missing is the platform specific hook gpio_blink_set() and
    board files which pass legacy GPIO numbers to this driver in platform data.
    
    In this patch we handle the former and convert gpio_blink_set() to take
    GPIO descriptor instead. In order to do this we convert the existing four
    users to accept GPIO descriptor and translate it to legacy GPIO number in
    the platform code. This effectively "pushes" legacy GPIO number usage from
    the driver to platforms.
    
    Also add comment to the remaining block describing that it is legacy code
    path and we are getting rid of it eventually.
    
    Suggested-by: Linus Walleij <linus.walleij@linaro.org>
    Signed-off-by: Mika Westerberg <mika.westerberg@linux.intel.com>
    Acked-by: Andrew Lunn <andrew@lunn.ch>
    Reviewed-by: Linus Walleij <linus.walleij@linaro.org>
    Acked-by: Alexandre Courbot <acourbot@nvidia.com>
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>

diff --git a/include/linux/leds.h b/include/linux/leds.h
index f3af5c4d9084..361101fef270 100644
--- a/include/linux/leds.h
+++ b/include/linux/leds.h
@@ -274,7 +274,7 @@ struct gpio_led_platform_data {
 #define GPIO_LED_NO_BLINK_LOW	0	/* No blink GPIO state low */
 #define GPIO_LED_NO_BLINK_HIGH	1	/* No blink GPIO state high */
 #define GPIO_LED_BLINK		2	/* Please, blink */
-	int		(*gpio_blink_set)(unsigned gpio, int state,
+	int		(*gpio_blink_set)(struct gpio_desc *desc, int state,
 					unsigned long *delay_on,
 					unsigned long *delay_off);
 };

commit 5c51277a9ababfa44a7f944100bdc9fbda139905
Author: Mika Westerberg <mika.westerberg@linux.intel.com>
Date:   Mon Oct 27 23:29:32 2014 +0100

    leds: leds-gpio: Add support for GPIO descriptors
    
    GPIO descriptors are the preferred way over legacy GPIO numbers
    nowadays. Convert the driver to use GPIO descriptors internally but
    still allow passing legacy GPIO numbers from platform data to support
    existing platforms.
    
    Signed-off-by: Mika Westerberg <mika.westerberg@linux.intel.com>
    Acked-by: Alexandre Courbot <acourbot@nvidia.com>
    Acked-by: Bryan Wu <cooloney@gmail.com>
    Acked-by: Arnd Bergmann <arnd@arndb.de>
    Acked-by: Grant Likely <grant.likely@linaro.org>
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>

diff --git a/include/linux/leds.h b/include/linux/leds.h
index a57611d0c94e..f3af5c4d9084 100644
--- a/include/linux/leds.h
+++ b/include/linux/leds.h
@@ -261,6 +261,7 @@ struct gpio_led {
 	unsigned	retain_state_suspended : 1;
 	unsigned	default_state : 2;
 	/* default_state should be one of LEDS_GPIO_DEFSTATE_(ON|OFF|KEEP) */
+	struct gpio_desc *gpiod;
 };
 #define LEDS_GPIO_DEFSTATE_OFF		0
 #define LEDS_GPIO_DEFSTATE_ON		1

commit 3ef7de5304edf60d0b8674dd7cdacc104e15a93c
Author: Jacek Anaszewski <j.anaszewski@samsung.com>
Date:   Wed Aug 20 06:41:55 2014 -0700

    leds: Improve and export led_update_brightness
    
    led_update_brightness helper function used to be exploited only locally
    in the led-class.c module, where its result was being passed to the
    brightness_show sysfs callback. With the introduction of v4l2-flash
    subdevice the same functionality becomes required for reading current
    brightness from a LED device. This patch adds checking of return value
    of the brightness_get callback and moves the led_update_brightness()
    function to the LED subsystem public API.
    
    Signed-off-by: Jacek Anaszewski <j.anaszewski@samsung.com>
    Acked-by: Kyungmin Park <kyungmin.park@samsung.com>
    Cc: Richard Purdie <rpurdie@rpsys.net>
    Signed-off-by: Bryan Wu <cooloney@gmail.com>

diff --git a/include/linux/leds.h b/include/linux/leds.h
index f2e1cbc25705..a57611d0c94e 100644
--- a/include/linux/leds.h
+++ b/include/linux/leds.h
@@ -140,6 +140,16 @@ extern void led_blink_set_oneshot(struct led_classdev *led_cdev,
  */
 extern void led_set_brightness(struct led_classdev *led_cdev,
 			       enum led_brightness brightness);
+/**
+ * led_update_brightness - update LED brightness
+ * @led_cdev: the LED to query
+ *
+ * Get an LED's current brightness and update led_cdev->brightness
+ * member with the obtained value.
+ *
+ * Returns: 0 on success or negative error value on failure
+ */
+extern int led_update_brightness(struct led_classdev *led_cdev);
 
 /*
  * LED Triggers

commit d8082827d8a214343b761f2c4554d2a7d1573d63
Author: Jacek Anaszewski <j.anaszewski@samsung.com>
Date:   Thu Aug 7 05:10:23 2014 -0700

    leds: make brightness type consistent across whole subsystem
    
    Documentations states that brightness units type is enum led_brightness
    and this is the type used by the led API functions. Adjust the type
    of brightness variables in the struct led_classdev accordingly.
    
    Signed-off-by: Jacek Anaszewski <j.anaszewski@samsung.com>
    Acked-by: Kyungmin Park <kyungmin.park@samsung.com>
    Cc: Richard Purdie <rpurdie@rpsys.net>
    Signed-off-by: Bryan Wu <cooloney@gmail.com>

diff --git a/include/linux/leds.h b/include/linux/leds.h
index 4be2d7623d9e..f2e1cbc25705 100644
--- a/include/linux/leds.h
+++ b/include/linux/leds.h
@@ -31,8 +31,8 @@ enum led_brightness {
 
 struct led_classdev {
 	const char		*name;
-	int			 brightness;
-	int			 max_brightness;
+	enum led_brightness	 brightness;
+	enum led_brightness	 max_brightness;
 	int			 flags;
 
 	/* Lower 16 bits reflect status */

commit 047133066e6c2549403fe5a2d619f47ba4212ef5
Author: Jacek Anaszewski <j.anaszewski@samsung.com>
Date:   Thu Aug 7 05:10:22 2014 -0700

    leds: Reorder include directives
    
    Reorder include directives so that they are arranged
    in alphabetical order.
    
    Signed-off-by: Jacek Anaszewski <j.anaszewski@samsung.com>
    Acked-by: Kyungmin Park <kyungmin.park@samsung.com>
    Cc: Richard Purdie <rpurdie@rpsys.net>
    Signed-off-by: Bryan Wu <cooloney@gmail.com>

diff --git a/include/linux/leds.h b/include/linux/leds.h
index e43686472197..4be2d7623d9e 100644
--- a/include/linux/leds.h
+++ b/include/linux/leds.h
@@ -13,8 +13,8 @@
 #define __LINUX_LEDS_H_INCLUDED
 
 #include <linux/list.h>
-#include <linux/spinlock.h>
 #include <linux/rwsem.h>
+#include <linux/spinlock.h>
 #include <linux/timer.h>
 #include <linux/workqueue.h>
 

commit 9067359faf890b3a18ab38c792d458fba77b32b4
Author: Jiri Kosina <jkosina@suse.cz>
Date:   Tue Sep 2 02:03:12 2014 -0700

    Revert "leds: convert blink timer to workqueue"
    
    This reverts commit 8b37e1bef5a6b60e949e28a4db3006e4b00bd758.
    
    It's broken as it changes led_blink_set() in a way that it can now sleep
    (while synchronously waiting for workqueue to be cancelled). That's a
    problem, because it's possible that this function gets called from atomic
    context (tpt_trig_timer() takes a readlock and thus disables preemption).
    
    This has been brought up 3 weeks ago already [1] but no proper fix has
    materialized, and I keep seeing the problem since 3.17-rc1.
    
    [1] https://lkml.org/lkml/2014/8/16/128
    
     BUG: sleeping function called from invalid context at kernel/workqueue.c:2650
     in_atomic(): 1, irqs_disabled(): 0, pid: 2335, name: wpa_supplicant
     5 locks held by wpa_supplicant/2335:
      #0:  (rtnl_mutex){+.+.+.}, at: [<ffffffff814c7c92>] rtnl_lock+0x12/0x20
      #1:  (&wdev->mtx){+.+.+.}, at: [<ffffffffc06e649c>] cfg80211_mgd_wext_siwessid+0x5c/0x180 [cfg80211]
      #2:  (&local->mtx){+.+.+.}, at: [<ffffffffc0817dea>] ieee80211_prep_connection+0x17a/0x9a0 [mac80211]
      #3:  (&local->chanctx_mtx){+.+.+.}, at: [<ffffffffc08081ed>] ieee80211_vif_use_channel+0x5d/0x2a0 [mac80211]
      #4:  (&trig->leddev_list_lock){.+.+..}, at: [<ffffffffc081e68c>] tpt_trig_timer+0xec/0x170 [mac80211]
     CPU: 0 PID: 2335 Comm: wpa_supplicant Not tainted 3.17.0-rc3 #1
     Hardware name: LENOVO 7470BN2/7470BN2, BIOS 6DET38WW (2.02 ) 12/19/2008
      ffff8800360b5a50 ffff8800751f76d8 ffffffff8159e97f ffff8800360b5a30
      ffff8800751f76e8 ffffffff810739a5 ffff8800751f77b0 ffffffff8106862f
      ffffffff810685d0 0aa2209200000000 ffff880000000004 ffff8800361c59d0
     Call Trace:
      [<ffffffff8159e97f>] dump_stack+0x4d/0x66
      [<ffffffff810739a5>] __might_sleep+0xe5/0x120
      [<ffffffff8106862f>] flush_work+0x5f/0x270
      [<ffffffff810685d0>] ? mod_delayed_work_on+0x80/0x80
      [<ffffffff810945ca>] ? mark_held_locks+0x6a/0x90
      [<ffffffff81068a5f>] ? __cancel_work_timer+0x6f/0x100
      [<ffffffff810946ed>] ? trace_hardirqs_on_caller+0xfd/0x1c0
      [<ffffffff81068a6b>] __cancel_work_timer+0x7b/0x100
      [<ffffffff81068b0e>] cancel_delayed_work_sync+0xe/0x10
      [<ffffffff8147cf3b>] led_blink_set+0x1b/0x40
      [<ffffffffc081e6b0>] tpt_trig_timer+0x110/0x170 [mac80211]
      [<ffffffffc081ecdd>] ieee80211_mod_tpt_led_trig+0x9d/0x160 [mac80211]
      [<ffffffffc07e4278>] __ieee80211_recalc_idle+0x98/0x140 [mac80211]
      [<ffffffffc07e59ce>] ieee80211_idle_off+0xe/0x10 [mac80211]
      [<ffffffffc0804e5b>] ieee80211_add_chanctx+0x3b/0x220 [mac80211]
      [<ffffffffc08062e4>] ieee80211_new_chanctx+0x44/0xf0 [mac80211]
      [<ffffffffc080838a>] ieee80211_vif_use_channel+0x1fa/0x2a0 [mac80211]
      [<ffffffffc0817df8>] ieee80211_prep_connection+0x188/0x9a0 [mac80211]
      [<ffffffffc081c246>] ieee80211_mgd_auth+0x256/0x2e0 [mac80211]
      [<ffffffffc07eab33>] ieee80211_auth+0x13/0x20 [mac80211]
      [<ffffffffc06cb006>] cfg80211_mlme_auth+0x106/0x270 [cfg80211]
      [<ffffffffc06ce085>] cfg80211_conn_do_work+0x155/0x3b0 [cfg80211]
      [<ffffffffc06cf670>] cfg80211_connect+0x3f0/0x540 [cfg80211]
      [<ffffffffc06e6148>] cfg80211_mgd_wext_connect+0x158/0x1f0 [cfg80211]
      [<ffffffffc06e651e>] cfg80211_mgd_wext_siwessid+0xde/0x180 [cfg80211]
      [<ffffffffc06e36c0>] ? cfg80211_wext_giwessid+0x50/0x50 [cfg80211]
      [<ffffffffc06e36dd>] cfg80211_wext_siwessid+0x1d/0x40 [cfg80211]
      [<ffffffff81584d0c>] ioctl_standard_iw_point+0x14c/0x3e0
      [<ffffffff810946ed>] ? trace_hardirqs_on_caller+0xfd/0x1c0
      [<ffffffff8158502a>] ioctl_standard_call+0x8a/0xd0
      [<ffffffff81584fa0>] ? ioctl_standard_iw_point+0x3e0/0x3e0
      [<ffffffff81584b76>] wireless_process_ioctl.constprop.10+0xb6/0x100
      [<ffffffff8158521d>] wext_handle_ioctl+0x5d/0xb0
      [<ffffffff814cfb29>] dev_ioctl+0x329/0x620
      [<ffffffff810946ed>] ? trace_hardirqs_on_caller+0xfd/0x1c0
      [<ffffffff8149c7f2>] sock_ioctl+0x142/0x2e0
      [<ffffffff811b0140>] do_vfs_ioctl+0x300/0x520
      [<ffffffff815a67fb>] ? sysret_check+0x1b/0x56
      [<ffffffff810946ed>] ? trace_hardirqs_on_caller+0xfd/0x1c0
      [<ffffffff811b03e1>] SyS_ioctl+0x81/0xa0
      [<ffffffff815a67d6>] system_call_fastpath+0x1a/0x1f
     wlan0: send auth to 00:0b:6b:3c:8c:e4 (try 1/3)
     wlan0: authenticated
     wlan0: associate with 00:0b:6b:3c:8c:e4 (try 1/3)
     wlan0: RX AssocResp from 00:0b:6b:3c:8c:e4 (capab=0x431 status=0 aid=2)
     wlan0: associated
     IPv6: ADDRCONF(NETDEV_CHANGE): wlan0: link becomes ready
     cfg80211: Calling CRDA for country: NA
     wlan0: Limiting TX power to 27 (27 - 0) dBm as advertised by 00:0b:6b:3c:8c:e4
    
     =================================
     [ INFO: inconsistent lock state ]
     3.17.0-rc3 #1 Not tainted
     ---------------------------------
     inconsistent {SOFTIRQ-ON-W} -> {IN-SOFTIRQ-W} usage.
     swapper/0/0 [HC0[0]:SC1[1]:HE1:SE0] takes:
      ((&(&led_cdev->blink_work)->work)){+.?...}, at: [<ffffffff810685d0>] flush_work+0x0/0x270
     {SOFTIRQ-ON-W} state was registered at:
       [<ffffffff81094dbe>] __lock_acquire+0x30e/0x1a30
       [<ffffffff81096c81>] lock_acquire+0x91/0x110
       [<ffffffff81068608>] flush_work+0x38/0x270
       [<ffffffff81068a6b>] __cancel_work_timer+0x7b/0x100
       [<ffffffff81068b0e>] cancel_delayed_work_sync+0xe/0x10
       [<ffffffff8147cf3b>] led_blink_set+0x1b/0x40
       [<ffffffffc081e6b0>] tpt_trig_timer+0x110/0x170 [mac80211]
       [<ffffffffc081ecdd>] ieee80211_mod_tpt_led_trig+0x9d/0x160 [mac80211]
       [<ffffffffc07e4278>] __ieee80211_recalc_idle+0x98/0x140 [mac80211]
       [<ffffffffc07e59ce>] ieee80211_idle_off+0xe/0x10 [mac80211]
       [<ffffffffc0804e5b>] ieee80211_add_chanctx+0x3b/0x220 [mac80211]
       [<ffffffffc08062e4>] ieee80211_new_chanctx+0x44/0xf0 [mac80211]
       [<ffffffffc080838a>] ieee80211_vif_use_channel+0x1fa/0x2a0 [mac80211]
       [<ffffffffc0817df8>] ieee80211_prep_connection+0x188/0x9a0 [mac80211]
       [<ffffffffc081c246>] ieee80211_mgd_auth+0x256/0x2e0 [mac80211]
       [<ffffffffc07eab33>] ieee80211_auth+0x13/0x20 [mac80211]
       [<ffffffffc06cb006>] cfg80211_mlme_auth+0x106/0x270 [cfg80211]
       [<ffffffffc06ce085>] cfg80211_conn_do_work+0x155/0x3b0 [cfg80211]
       [<ffffffffc06cf670>] cfg80211_connect+0x3f0/0x540 [cfg80211]
       [<ffffffffc06e6148>] cfg80211_mgd_wext_connect+0x158/0x1f0 [cfg80211]
       [<ffffffffc06e651e>] cfg80211_mgd_wext_siwessid+0xde/0x180 [cfg80211]
       [<ffffffffc06e36dd>] cfg80211_wext_siwessid+0x1d/0x40 [cfg80211]
       [<ffffffff81584d0c>] ioctl_standard_iw_point+0x14c/0x3e0
       [<ffffffff8158502a>] ioctl_standard_call+0x8a/0xd0
       [<ffffffff81584b76>] wireless_process_ioctl.constprop.10+0xb6/0x100
       [<ffffffff8158521d>] wext_handle_ioctl+0x5d/0xb0
       [<ffffffff814cfb29>] dev_ioctl+0x329/0x620
       [<ffffffff8149c7f2>] sock_ioctl+0x142/0x2e0
       [<ffffffff811b0140>] do_vfs_ioctl+0x300/0x520
       [<ffffffff811b03e1>] SyS_ioctl+0x81/0xa0
       [<ffffffff815a67d6>] system_call_fastpath+0x1a/0x1f
     irq event stamp: 493416
     hardirqs last  enabled at (493416): [<ffffffff81068a5f>] __cancel_work_timer+0x6f/0x100
     hardirqs last disabled at (493415): [<ffffffff81067e9f>] try_to_grab_pending+0x1f/0x160
     softirqs last  enabled at (493408): [<ffffffff81053ced>] _local_bh_enable+0x1d/0x50
     softirqs last disabled at (493409): [<ffffffff81054c75>] irq_exit+0xa5/0xb0
    
     other info that might help us debug this:
      Possible unsafe locking scenario:
    
            CPU0
            ----
       lock((&(&led_cdev->blink_work)->work));
       <Interrupt>
         lock((&(&led_cdev->blink_work)->work));
    
      *** DEADLOCK ***
    
     2 locks held by swapper/0/0:
      #0:  (((&tpt_trig->timer))){+.-...}, at: [<ffffffff810b4c50>] call_timer_fn+0x0/0x180
      #1:  (&trig->leddev_list_lock){.+.?..}, at: [<ffffffffc081e68c>] tpt_trig_timer+0xec/0x170 [mac80211]
    
     stack backtrace:
     CPU: 0 PID: 0 Comm: swapper/0 Not tainted 3.17.0-rc3 #1
     Hardware name: LENOVO 7470BN2/7470BN2, BIOS 6DET38WW (2.02 ) 12/19/2008
      ffffffff8246eb30 ffff88007c203b00 ffffffff8159e97f ffffffff81a194c0
      ffff88007c203b50 ffffffff81599c29 0000000000000001 ffffffff00000001
      ffff880000000000 0000000000000006 ffffffff81a194c0 ffffffff81093ad0
     Call Trace:
      <IRQ>  [<ffffffff8159e97f>] dump_stack+0x4d/0x66
      [<ffffffff81599c29>] print_usage_bug+0x1f4/0x205
      [<ffffffff81093ad0>] ? check_usage_backwards+0x140/0x140
      [<ffffffff810944d3>] mark_lock+0x223/0x2b0
      [<ffffffff81094d60>] __lock_acquire+0x2b0/0x1a30
      [<ffffffff81096c81>] lock_acquire+0x91/0x110
      [<ffffffff810685d0>] ? mod_delayed_work_on+0x80/0x80
      [<ffffffffc081e5a0>] ? __ieee80211_get_rx_led_name+0x10/0x10 [mac80211]
      [<ffffffff81068608>] flush_work+0x38/0x270
      [<ffffffff810685d0>] ? mod_delayed_work_on+0x80/0x80
      [<ffffffff810945ca>] ? mark_held_locks+0x6a/0x90
      [<ffffffff81068a5f>] ? __cancel_work_timer+0x6f/0x100
      [<ffffffffc081e5a0>] ? __ieee80211_get_rx_led_name+0x10/0x10 [mac80211]
      [<ffffffff8109469d>] ? trace_hardirqs_on_caller+0xad/0x1c0
      [<ffffffffc081e5a0>] ? __ieee80211_get_rx_led_name+0x10/0x10 [mac80211]
      [<ffffffff81068a6b>] __cancel_work_timer+0x7b/0x100
      [<ffffffff81068b0e>] cancel_delayed_work_sync+0xe/0x10
      [<ffffffff8147cf3b>] led_blink_set+0x1b/0x40
      [<ffffffffc081e6b0>] tpt_trig_timer+0x110/0x170 [mac80211]
      [<ffffffff810b4cc5>] call_timer_fn+0x75/0x180
      [<ffffffff810b4c50>] ? process_timeout+0x10/0x10
      [<ffffffffc081e5a0>] ? __ieee80211_get_rx_led_name+0x10/0x10 [mac80211]
      [<ffffffff810b50ac>] run_timer_softirq+0x1fc/0x2f0
      [<ffffffff81054805>] __do_softirq+0x115/0x2e0
      [<ffffffff81054c75>] irq_exit+0xa5/0xb0
      [<ffffffff810049b3>] do_IRQ+0x53/0xf0
      [<ffffffff815a74af>] common_interrupt+0x6f/0x6f
      <EOI>  [<ffffffff8147b56e>] ? cpuidle_enter_state+0x6e/0x180
      [<ffffffff8147b732>] cpuidle_enter+0x12/0x20
      [<ffffffff8108bba0>] cpu_startup_entry+0x330/0x360
      [<ffffffff8158fb51>] rest_init+0xc1/0xd0
      [<ffffffff8158fa90>] ? csum_partial_copy_generic+0x170/0x170
      [<ffffffff81af3ff2>] start_kernel+0x44f/0x45a
      [<ffffffff81af399c>] ? set_init_arg+0x53/0x53
      [<ffffffff81af35ad>] x86_64_start_reservations+0x2a/0x2c
      [<ffffffff81af36a0>] x86_64_start_kernel+0xf1/0xf4
    
    Cc: Vincent Donnefort <vdonnefort@gmail.com>
    Cc: Hugh Dickins <hughd@google.com>
    Cc: Tejun Heo <tj@kernel.org>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>
    Signed-off-by: Bryan Wu <cooloney@gmail.com>

diff --git a/include/linux/leds.h b/include/linux/leds.h
index 6a599dce7f9d..e43686472197 100644
--- a/include/linux/leds.h
+++ b/include/linux/leds.h
@@ -15,6 +15,7 @@
 #include <linux/list.h>
 #include <linux/spinlock.h>
 #include <linux/rwsem.h>
+#include <linux/timer.h>
 #include <linux/workqueue.h>
 
 struct device;
@@ -68,7 +69,7 @@ struct led_classdev {
 	const char		*default_trigger;	/* Trigger to use */
 
 	unsigned long		 blink_delay_on, blink_delay_off;
-	struct delayed_work	 blink_work;
+	struct timer_list	 blink_timer;
 	int			 blink_brightness;
 
 	struct work_struct	set_brightness_work;

commit 8b37e1bef5a6b60e949e28a4db3006e4b00bd758
Author: Vincent Donnefort <vdonnefort@gmail.com>
Date:   Sat Jun 14 02:21:40 2014 -0700

    leds: convert blink timer to workqueue
    
    This patch converts the blink timer from led-core to workqueue which is more
    suitable for this kind of non-priority operations. Moreover, timer may lead to
    errors when a LED setting function use a scheduling function such as pinctrl
    which is using mutex.
    
    Signed-off-by: Vincent Donnefort <vdonnefort@gmail.com>
    Signed-off-by: Bryan Wu <cooloney@gmail.com>

diff --git a/include/linux/leds.h b/include/linux/leds.h
index e43686472197..6a599dce7f9d 100644
--- a/include/linux/leds.h
+++ b/include/linux/leds.h
@@ -15,7 +15,6 @@
 #include <linux/list.h>
 #include <linux/spinlock.h>
 #include <linux/rwsem.h>
-#include <linux/timer.h>
 #include <linux/workqueue.h>
 
 struct device;
@@ -69,7 +68,7 @@ struct led_classdev {
 	const char		*default_trigger;	/* Trigger to use */
 
 	unsigned long		 blink_delay_on, blink_delay_off;
-	struct timer_list	 blink_timer;
+	struct delayed_work	 blink_work;
 	int			 blink_brightness;
 
 	struct work_struct	set_brightness_work;

commit d0d480cce8f522b37c2c1de38230fc9ad15fa506
Author: Johan Hovold <johan@kernel.org>
Date:   Wed Jun 25 10:08:44 2014 -0700

    leds: add led-class attribute-group support
    
    Allow led-class devices to be created with optional attribute groups.
    
    This is needed in order to allow led drivers to create custom device
    attributes in a race-free manner.
    
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Signed-off-by: Bryan Wu <cooloney@gmail.com>

diff --git a/include/linux/leds.h b/include/linux/leds.h
index 0287ab296689..e43686472197 100644
--- a/include/linux/leds.h
+++ b/include/linux/leds.h
@@ -63,6 +63,8 @@ struct led_classdev {
 				     unsigned long *delay_off);
 
 	struct device		*dev;
+	const struct attribute_group	**groups;
+
 	struct list_head	 node;			/* LED Device list */
 	const char		*default_trigger;	/* Trigger to use */
 

commit 48a1d032c954b9b06c3adbf35ef4735dd70ab757
Author: Kim, Milo <Milo.Kim@ti.com>
Date:   Thu Mar 14 04:29:24 2013 -0700

    leds: add camera LED triggers
    
    Some LED devices support flash/torch functionality through the LED subsystem.
    This patch enables direct LED trigger controls by the driver.
    Flash on/off and torch on/off can be done simply by other driver space.
    Two trigger APIs are added, ledtrig_flash_ctrl() and ledtrig_torch_ctrl().
    
    Signed-off-by: Milo(Woogyom) Kim <milo.kim@ti.com>
    Signed-off-by: Bryan Wu <cooloney@gmail.com>

diff --git a/include/linux/leds.h b/include/linux/leds.h
index 2d8c0b4f2f76..0287ab296689 100644
--- a/include/linux/leds.h
+++ b/include/linux/leds.h
@@ -218,6 +218,14 @@ extern void ledtrig_ide_activity(void);
 static inline void ledtrig_ide_activity(void) {}
 #endif
 
+#if defined(CONFIG_LEDS_TRIGGER_CAMERA) || defined(CONFIG_LEDS_TRIGGER_CAMERA_MODULE)
+extern void ledtrig_flash_ctrl(bool on);
+extern void ledtrig_torch_ctrl(bool on);
+#else
+static inline void ledtrig_flash_ctrl(bool on) {}
+static inline void ledtrig_torch_ctrl(bool on) {}
+#endif
+
 /*
  * Generic LED platform data for describing LED names and default triggers.
  */

commit 39f7e08af3fd9ca1cb94a8270354afb2ea5cfcd3
Author: Kim, Milo <Milo.Kim@ti.com>
Date:   Thu Mar 14 04:29:19 2013 -0700

    leds: trigger: use inline functions instead of macros
    
    Macros are used in case that an inline function doesn't work.
    Otherwise, use an empty inline function.
    
    (a) Case of !CONFIG_LEDS_TRIGGERS
    Following macros are replaced with inline functions.
      led_trigger_register_simple()
      led_trigger_unregister_simple()
      led_trigger_event()
    To make inline types, the structure, 'led_trigger' should be defined.
    This structure has no member at all.
    
    (b) Case of !CONFIG_LEDS_TRIGGER_IDE_DISK
    ledtrig_ide_activity() macro is replaced with an inline function as well.
    
    (c) DEFINE_LED_TRIGGER() and DEFINE_LED_TRIGGER_GLOBAL()
    Struct 'led_trigger' is defined both cases, with CONFIG_LEDS_TRIGGERS and
    without CONFIG_LEDS_TRIGGERS.
    Those macros are moved out of CONFIG_LED_TRIGGERS because of no-dependency
    on CONFIG_LEDS_TRIGGERS.
    
    (d) Fix build errors in mmc-core driver
    After replacing macros with inline functions, following build errors occur.
    (condition: CONFIG_LEDS_TRIGGERS is not set)
    
      drivers/mmc/core/core.c: In function 'mmc_request_done':
      drivers/mmc/core/core.c:164:25: error: 'struct mmc_host' has no member named 'led'
      drivers/mmc/core/core.c: In function 'mmc_start_request':
      drivers/mmc/core/core.c:254:24: error: 'struct mmc_host' has no member named 'led'
      make[3]: *** [drivers/mmc/core/core.o] Error 1
    
    The reason of these errors is non-existent member variable, 'led'.
    It is only valid when CONFIG_LEDS_TRIGGERS is set.
    But now, it can be used without this dependency.
    To fix build errors, member 'led' is always used without its config option in
    'include/linux/mmc/host.h'.
    
    Signed-off-by: Milo(Woogyom) Kim <milo.kim@ti.com>
    Signed-off-by: Bryan Wu <cooloney@gmail.com>

diff --git a/include/linux/leds.h b/include/linux/leds.h
index 0d9b5eed714e..2d8c0b4f2f76 100644
--- a/include/linux/leds.h
+++ b/include/linux/leds.h
@@ -142,6 +142,10 @@ extern void led_set_brightness(struct led_classdev *led_cdev,
 /*
  * LED Triggers
  */
+/* Registration functions for simple triggers */
+#define DEFINE_LED_TRIGGER(x)		static struct led_trigger *x;
+#define DEFINE_LED_TRIGGER_GLOBAL(x)	struct led_trigger *x;
+
 #ifdef CONFIG_LEDS_TRIGGERS
 
 #define TRIG_NAME_MAX 50
@@ -164,9 +168,6 @@ struct led_trigger {
 extern int led_trigger_register(struct led_trigger *trigger);
 extern void led_trigger_unregister(struct led_trigger *trigger);
 
-/* Registration functions for simple triggers */
-#define DEFINE_LED_TRIGGER(x)		static struct led_trigger *x;
-#define DEFINE_LED_TRIGGER_GLOBAL(x)	struct led_trigger *x;
 extern void led_trigger_register_simple(const char *name,
 				struct led_trigger **trigger);
 extern void led_trigger_unregister_simple(struct led_trigger *trigger);
@@ -199,20 +200,22 @@ extern void led_trigger_rename_static(const char *name,
 
 #else
 
-/* Triggers aren't active - null macros */
-#define DEFINE_LED_TRIGGER(x)
-#define DEFINE_LED_TRIGGER_GLOBAL(x)
-#define led_trigger_register_simple(x, y) do {} while(0)
-#define led_trigger_unregister_simple(x) do {} while(0)
-#define led_trigger_event(x, y) do {} while(0)
+/* Trigger has no members */
+struct led_trigger {};
 
-#endif
+/* Trigger inline empty functions */
+static inline void led_trigger_register_simple(const char *name,
+					struct led_trigger **trigger) {}
+static inline void led_trigger_unregister_simple(struct led_trigger *trigger) {}
+static inline void led_trigger_event(struct led_trigger *trigger,
+				enum led_brightness event) {}
+#endif /* CONFIG_LEDS_TRIGGERS */
 
 /* Trigger specific functions */
 #ifdef CONFIG_LEDS_TRIGGER_IDE_DISK
 extern void ledtrig_ide_activity(void);
 #else
-#define ledtrig_ide_activity() do {} while(0)
+static inline void ledtrig_ide_activity(void) {}
 #endif
 
 /*

commit 057407c732b7761cf417a1e6633a02d9d473340d
Author: Jingoo Han <jg1.han@samsung.com>
Date:   Sun Nov 18 21:35:55 2012 -0800

    led: Add dependency on CONFIG_LEDS_TRIGGERS to led_trigger_rename_static()
    
    This patch fixes build warnings when CONFIG_LEDS_TRIGGERS is
    disabled as below:
    include/linux/leds.h:158:18: warning: 'struct led_trigger' declared inside parameter list [enabled by default]
    include/linux/leds.h:158:18: warning: its scope is only this definition or declaration, which is probably not what you want [enabled
    by default]
    
    Signed-off-by: Jingoo Han <jg1.han@samsung.com>
    Acked-by: Fabio Baltieri <fabio.baltieri@gmail.com>
    Signed-off-by: Bryan Wu <cooloney@gmail.com>

diff --git a/include/linux/leds.h b/include/linux/leds.h
index 8107592cfc41..0d9b5eed714e 100644
--- a/include/linux/leds.h
+++ b/include/linux/leds.h
@@ -139,24 +139,6 @@ extern void led_blink_set_oneshot(struct led_classdev *led_cdev,
 extern void led_set_brightness(struct led_classdev *led_cdev,
 			       enum led_brightness brightness);
 
-/**
- * led_trigger_rename_static - rename a trigger
- * @name: the new trigger name
- * @trig: the LED trigger to rename
- *
- * Change a LED trigger name by copying the string passed in
- * name into current trigger name, which MUST be large
- * enough for the new string.
- *
- * Note that name must NOT point to the same string used
- * during LED registration, as that could lead to races.
- *
- * This is meant to be used on triggers with statically
- * allocated name.
- */
-extern void led_trigger_rename_static(const char *name,
-				      struct led_trigger *trig);
-
 /*
  * LED Triggers
  */
@@ -197,6 +179,23 @@ extern void led_trigger_blink_oneshot(struct led_trigger *trigger,
 				      unsigned long *delay_on,
 				      unsigned long *delay_off,
 				      int invert);
+/**
+ * led_trigger_rename_static - rename a trigger
+ * @name: the new trigger name
+ * @trig: the LED trigger to rename
+ *
+ * Change a LED trigger name by copying the string passed in
+ * name into current trigger name, which MUST be large
+ * enough for the new string.
+ *
+ * Note that name must NOT point to the same string used
+ * during LED registration, as that could lead to races.
+ *
+ * This is meant to be used on triggers with statically
+ * allocated name.
+ */
+extern void led_trigger_rename_static(const char *name,
+				      struct led_trigger *trig);
 
 #else
 

commit a8df7b1ab70bfd6f261fa5e96985fca638299acc
Author: Fabio Baltieri <fabio.baltieri@gmail.com>
Date:   Sun Nov 4 01:54:34 2012 -0800

    leds: add led_trigger_rename function
    
    Implements a "led_trigger_rename" function to rename a trigger with
    proper locking.
    
    This assumes that led name was originally allocated in non-constant
    storage.
    
    Signed-off-by: Fabio Baltieri <fabio.baltieri@gmail.com>
    Cc: Kurt Van Dijck <kurt.van.dijck@eia.be>
    Signed-off-by: Bryan Wu <cooloney@gmail.com>

diff --git a/include/linux/leds.h b/include/linux/leds.h
index 6e53bb31c220..8107592cfc41 100644
--- a/include/linux/leds.h
+++ b/include/linux/leds.h
@@ -139,6 +139,24 @@ extern void led_blink_set_oneshot(struct led_classdev *led_cdev,
 extern void led_set_brightness(struct led_classdev *led_cdev,
 			       enum led_brightness brightness);
 
+/**
+ * led_trigger_rename_static - rename a trigger
+ * @name: the new trigger name
+ * @trig: the LED trigger to rename
+ *
+ * Change a LED trigger name by copying the string passed in
+ * name into current trigger name, which MUST be large
+ * enough for the new string.
+ *
+ * Note that name must NOT point to the same string used
+ * during LED registration, as that could lead to races.
+ *
+ * This is meant to be used on triggers with statically
+ * allocated name.
+ */
+extern void led_trigger_rename_static(const char *name,
+				      struct led_trigger *trig);
+
 /*
  * LED Triggers
  */

commit c7a6ced9d8e8411bdafe83998474d185a79badc3
Merge: a188e7e93a36 2f73c3927318
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Wed Oct 10 20:14:07 2012 +0900

    Merge branch 'for-next' of git://git.kernel.org/pub/scm/linux/kernel/git/cooloney/linux-leds
    
    Pull LED subsystem update from Bryan Wu.
    
    * 'for-next' of git://git.kernel.org/pub/scm/linux/kernel/git/cooloney/linux-leds: (24 commits)
      leds: add output driver configuration for pca9633 led driver
      leds: lm3642: Use regmap_update_bits() in lm3642_chip_init()
      leds: Add new LED driver for lm3642 chips
      leds-lp5523: Fix riskiness of the page fault
      leds-lp5523: turn off the LED engines on unloading the driver
      leds-lm3530: Fix smatch warnings
      leds-lm3530: Use devm_regulator_get function
      leds: leds-gpio: adopt pinctrl support
      leds: Add new LED driver for lm355x chips
      leds-lp5523: use the i2c device id rather than fixed name
      leds-lp5523: add new device id for LP55231
      leds-lp5523: support new LP55231 device
      leds: triggers: send uevent when changing triggers
      leds-lp5523: minor code style fixes
      leds-lp5523: change the return type of lp5523_set_mode()
      leds-lp5523: set the brightness to 0 forcely on removing the driver
      leds-lp5523: add channel name in the platform data
      leds: leds-gpio: Use of_get_child_count() helper
      leds: leds-gpio: Use platform_{get,set}_drvdata
      leds: leds-gpio: use of_match_ptr()
      ...

commit d23a22a74fded23a12434c9463fe66cec2b0afcd
Author: Fabio Baltieri <fabio.baltieri@gmail.com>
Date:   Wed Aug 15 21:44:34 2012 +0800

    leds: delay led_set_brightness if stopping soft-blink
    
    Delay execution of led_set_brightness() if need to stop soft-blink
    timer.
    
    This allows led_set_brightness to be called in hard-irq context even if
    soft-blink was activated on that LED.
    
    Signed-off-by: Fabio Baltieri <fabio.baltieri@gmail.com>
    Cc: Pawel Moll <pawel.moll@arm.com>
    Signed-off-by: Bryan Wu <bryan.wu@canonical.com>

diff --git a/include/linux/leds.h b/include/linux/leds.h
index 3aade1d8f410..56761974f282 100644
--- a/include/linux/leds.h
+++ b/include/linux/leds.h
@@ -16,6 +16,7 @@
 #include <linux/spinlock.h>
 #include <linux/rwsem.h>
 #include <linux/timer.h>
+#include <linux/workqueue.h>
 
 struct device;
 /*
@@ -69,6 +70,9 @@ struct led_classdev {
 	struct timer_list	 blink_timer;
 	int			 blink_brightness;
 
+	struct work_struct	set_brightness_work;
+	int			delayed_set_value;
+
 #ifdef CONFIG_LEDS_TRIGGERS
 	/* Protects the trigger data below */
 	struct rw_semaphore	 trigger_lock;

commit 19e4ab54e7f5fe46a3c931afa7e786f11d57b558
Merge: 0d7614f09c1e fa8bbb13ab49
Author: Arnd Bergmann <arnd@arndb.de>
Date:   Mon Aug 13 16:45:48 2012 +0200

    Merge branch 'for-arm-soc' of git://git.kernel.org/pub/scm/linux/kernel/git/cooloney/linux-leds into next/drivers
    
    From Bryan Wu <bryan.wu@canonical.com>:
    
    Based on Linus Walleij's ARM LED consolidation work, this patchset introduce a
    new generic led trigger for CPU not only for ARM but also for others.
    
    For enabling CPU idle event, CPU arch code should call ledtrig_cpu() stub to
    trigger idle start or idle end event.
    
    These patches convert old style LED driver in arch/arm to gpio_led or new led
    driver interface. Against 3.5 release and build successfully for all the machines.
    
    Test ledtrig-cpu driver on OMAP4 Panda board.
    
    v9 --> v10
     * fix compiling issue on versatile_defconfig reported by Russell King
     * rebase to 3.5 kernel and move patches to new git tree
    
    v8 --> v9:
     * use mutex to replace rw_sema pointed out by Tim Gardner
     * add a new struct led_trigger_cpu
     * add lock_is_inited to record mutex lock initialization
    
    v6 --> v7:
     * add a patch to unify the led-trigger name
     * fix some typo pointed
     * use BUG_ON to detect CPU numbers during building stage
    
    v5 --> v6:
     * replace  __get_cpu_var() to per_cpu()
     * remove smp_processor_id() which is wrong with for_each_possible_cpu()
     * test on real OMAP4 Panda board
     * add comments about CPU hotplug in the CPU LED trigger driver
    
    v4 --> v5:
     * rebase all the patches on top of latest linux-next
     * replace on_each_cpu() with for_each_possible_cpu()
     * add some description of ledtrig_cpu() API
     * remove old leds code from driver nwflash.c, which should use a new led trigger then
     * this trigger driver can be built as module now
    
    v3 --> v4:
     * fix a typo pointed by Jochen Friedrich
     * fix some building errors
     * add Reviewed-by and Tested-by into patch log
    
    v2 --> v3:
     * almost rewrote the whole ledtrig-cpu driver, which is more simple
     * every CPU will have a per-CPU trigger
     * cpu trigger can be assigned to any leds
     * fix a lockdep issue in led-trigger common code
     * other fix according to review
    
    v1 --> v2:
     * remove select operations in Kconfig of every machines
     * add back supporting of led in core module of mach-integrator
     * solidate name scheme in ledtrig-cpu.c
     * add comments of CPU_LED_* cpu led events
     * fold patches of RealView and Versatile together
     * add machine_is_ check during assabet led driver init
     * add some Acked-by in patch logs
     * remove code for simpad machine in machine-sa11000, since Jochen Friedrich
       introduced gpiolib and gpio-led driver for simpad
     * on Assabet and Netwinder machine, LED operations is reversed like:
       setting bit means turn off leds
       clearing bit means turn on leds
     * add a new function to read CM_CTRL register for led driver
    
    * 'for-arm-soc' of git://git.kernel.org/pub/scm/linux/kernel/git/cooloney/linux-leds:
      ARM: use new LEDS CPU trigger stub to replace old one
      ARM: mach-sa1100: retire custom LED code
      ARM: mach-omap1: retire custom LED code
      ARM: mach-pnx4008: remove including old leds event API header file
      ARM: plat-samsung: remove including old leds event API header file
      ARM: mach-pxa: retire custom LED code
      char: nwflash: remove old led event code
      ARM: mach-footbridge: retire custom LED code
      ARM: mach-ebsa110: retire custom LED code
      ARM: mach-clps711x: retire custom LED code of P720T machine
      ARM: mach-integrator: retire custom LED code
      ARM: mach-integrator: move CM_CTRL to header file for accessing by other functions
      ARM: mach-orion5x: convert custom LED code to gpio_led and LED CPU trigger
      ARM: mach-shark: retire custom LED code
      ARM: mach-ks8695: remove leds driver, since nobody use it
      ARM: mach-realview and mach-versatile: retire custom LED code
      ARM: at91: convert old leds drivers to gpio_led and led_trigger drivers
      led-triggers: create a trigger for CPU activity
    
    Conflicts:
            arch/arm/mach-clps711x/p720t.c
            arch/arm/mach-sa1100/leds-cerf.c
            arch/arm/mach-sa1100/leds-lart.c
    
    Let's hope this is the last time we pull this and it doesn't cause
    more trouble. I have verified that version 10 causes no build
    warnings or errors any more, and the patches still look good.
    
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>

commit 8f88731d052d2b14f332249a9332690ac1b365ac
Author: Bryan Wu <bryan.wu@canonical.com>
Date:   Sat Jun 25 18:33:50 2011 +0800

    led-triggers: create a trigger for CPU activity
    
    Attempting to consolidate the ARM LED code, this removes the
    custom RealView LED trigger code to turn LEDs on and off in
    response to CPU activity and replace it with a standard trigger.
    
    (bryan.wu@canonical.com:
    It introduces several syscore stubs into this trigger.
    It also provides ledtrig_cpu trigger event stub in <linux/leds.h>.
    Although it was inspired by ARM work, it can be used in other arch.)
    
    Cc: Richard Purdie <rpurdie@rpsys.net>
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>
    Signed-off-by: Bryan Wu <bryan.wu@canonical.com>
    Reviewed-by: Jamie Iles <jamie@jamieiles.com>
    Tested-by: Jochen Friedrich <jochen@scram.de>

diff --git a/include/linux/leds.h b/include/linux/leds.h
index 39eee41d8c6f..cd545580e069 100644
--- a/include/linux/leds.h
+++ b/include/linux/leds.h
@@ -212,4 +212,20 @@ struct gpio_led_platform_data {
 struct platform_device *gpio_led_register_device(
 		int id, const struct gpio_led_platform_data *pdata);
 
+enum cpu_led_event {
+	CPU_LED_IDLE_START,	/* CPU enters idle */
+	CPU_LED_IDLE_END,	/* CPU idle ends */
+	CPU_LED_START,		/* Machine starts, especially resume */
+	CPU_LED_STOP,		/* Machine stops, especially suspend */
+	CPU_LED_HALTED,		/* Machine shutdown */
+};
+#ifdef CONFIG_LEDS_TRIGGER_CPU
+extern void ledtrig_cpu(enum cpu_led_event evt);
+#else
+static inline void ledtrig_cpu(enum cpu_led_event evt)
+{
+	return;
+}
+#endif
+
 #endif		/* __LINUX_LEDS_H_INCLUDED */

commit 19cd67e2d51225b164560b54b85f943e07deee8a
Author: Shuah Khan <shuahkhan@gmail.com>
Date:   Thu Jun 14 04:34:30 2012 +0800

    leds: Rename led_brightness_set() to led_set_brightness()
    
    Rename leds external interface led_brightness_set() to led_set_brightness().
    This is the second phase of the change to reduce confusion between the
    leds internal and external interfaces that set brightness. With this change,
    now the external interface is led_set_brightness(). The first phase renamed
    the internal interface led_set_brightness() to __led_set_brightness().
    There are no changes to the interface implementations.
    
    Signed-off-by: Shuah Khan <shuahkhan@gmail.com>
    Signed-off-by: Bryan Wu <bryan.wu@canonical.com>

diff --git a/include/linux/leds.h b/include/linux/leds.h
index dd93a22044bb..3aade1d8f410 100644
--- a/include/linux/leds.h
+++ b/include/linux/leds.h
@@ -124,7 +124,7 @@ extern void led_blink_set_oneshot(struct led_classdev *led_cdev,
 				  unsigned long *delay_off,
 				  int invert);
 /**
- * led_brightness_set - set LED brightness
+ * led_set_brightness - set LED brightness
  * @led_cdev: the LED to set
  * @brightness: the brightness to set it to
  *
@@ -132,7 +132,7 @@ extern void led_blink_set_oneshot(struct led_classdev *led_cdev,
  * software blink timer that implements blinking when the
  * hardware doesn't.
  */
-extern void led_brightness_set(struct led_classdev *led_cdev,
+extern void led_set_brightness(struct led_classdev *led_cdev,
 			       enum led_brightness brightness);
 
 /*

commit 5bb629c504394f4d42c53a25d75ccb02a393f92f
Author: Fabio Baltieri <fabio.baltieri@gmail.com>
Date:   Sun May 27 07:19:22 2012 +0800

    leds: add oneshot blink functions
    
    Add two new functions, led_blink_set_oneshot and
    led_trigger_blink_oneshot, to be used by triggers for one-shot blink of
    led devices.
    
    This is implemented extending the existing software-blink code, and uses
    the same timer and handler function.
    
    The behavior of the code is to do a blink-on, blink-off sequence when
    the function is called, ignoring other calls until the sequence is
    completed so that the leds keep blinking at constant rate if the
    functions are called repeatedly.
    
    This is meant to be used by drivers which needs to trigger on sporadic
    event, but doesn't have clear busy/idle trigger points.
    
    After the blink sequence the led remains off. This behavior can be
    inverted setting the "invert" argument, which blink the led off, than on
    and leave the led on after the sequence.
    
    (bryan.wu@canonical.com: rebase to commit 'leds: don't disable blinking
    when writing the same value to delay_on or delay_off')
    
    Signed-off-by: Fabio Baltieri <fabio.baltieri@gmail.com>
    Acked-by: Shuah Khan <shuahkhan@gmail.com>
    Signed-off-by: Bryan Wu <bryan.wu@canonical.com>

diff --git a/include/linux/leds.h b/include/linux/leds.h
index 39eee41d8c6f..dd93a22044bb 100644
--- a/include/linux/leds.h
+++ b/include/linux/leds.h
@@ -38,6 +38,9 @@ struct led_classdev {
 #define LED_SUSPENDED		(1 << 0)
 	/* Upper 16 bits reflect control information */
 #define LED_CORE_SUSPENDRESUME	(1 << 16)
+#define LED_BLINK_ONESHOT	(1 << 17)
+#define LED_BLINK_ONESHOT_STOP	(1 << 18)
+#define LED_BLINK_INVERT	(1 << 19)
 
 	/* Set LED brightness level */
 	/* Must not sleep, use a workqueue if needed */
@@ -102,6 +105,24 @@ extern void led_classdev_resume(struct led_classdev *led_cdev);
 extern void led_blink_set(struct led_classdev *led_cdev,
 			  unsigned long *delay_on,
 			  unsigned long *delay_off);
+/**
+ * led_blink_set_oneshot - do a oneshot software blink
+ * @led_cdev: the LED to start blinking
+ * @delay_on: the time it should be on (in ms)
+ * @delay_off: the time it should ble off (in ms)
+ * @invert: blink off, then on, leaving the led on
+ *
+ * This function makes the LED blink one time for delay_on +
+ * delay_off time, ignoring the request if another one-shot
+ * blink is already in progress.
+ *
+ * If invert is set, led blinks for delay_off first, then for
+ * delay_on and leave the led on after the on-off cycle.
+ */
+extern void led_blink_set_oneshot(struct led_classdev *led_cdev,
+				  unsigned long *delay_on,
+				  unsigned long *delay_off,
+				  int invert);
 /**
  * led_brightness_set - set LED brightness
  * @led_cdev: the LED to set
@@ -150,6 +171,10 @@ extern void led_trigger_event(struct led_trigger *trigger,
 extern void led_trigger_blink(struct led_trigger *trigger,
 			      unsigned long *delay_on,
 			      unsigned long *delay_off);
+extern void led_trigger_blink_oneshot(struct led_trigger *trigger,
+				      unsigned long *delay_on,
+				      unsigned long *delay_off,
+				      int invert);
 
 #else
 

commit b00961824a33aadec4a825eaeccfbe3db8ec7032
Author: Shuah Khan <shuahkhan@gmail.com>
Date:   Tue May 29 15:07:27 2012 -0700

    leds: add new field to led_classdev struct to save activation state
    
    Add a new field to led_classdev to save activattion state after activate
    routine is successful.  This saved state is used in deactivate routine to
    do cleanup such as removing device files, and free memory allocated during
    activation.  Currently trigger_data not being null is used for this
    purpose.
    
    Existing triggers will need changes to use this new field.
    
    Signed-off-by: Shuah Khan <shuahkhan@gmail.com>
    Cc: Richard Purdie <rpurdie@rpsys.net>
    Cc: Bryan Wu <bryan.wu@canonical.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

diff --git a/include/linux/leds.h b/include/linux/leds.h
index 5884def15a24..39eee41d8c6f 100644
--- a/include/linux/leds.h
+++ b/include/linux/leds.h
@@ -73,6 +73,8 @@ struct led_classdev {
 	struct led_trigger	*trigger;
 	struct list_head	 trig_list;
 	void			*trigger_data;
+	/* true if activated - deactivate routine uses it to do cleanup */
+	bool			activated;
 #endif
 };
 

commit 4440673a95e63ad888a41db596edaa0c55d3a332
Author: Uwe Kleine-König <u.kleine-koenig@pengutronix.de>
Date:   Tue May 24 17:13:29 2011 -0700

    leds: provide helper to register "leds-gpio" devices
    
    This function makes a deep copy of the platform data to allow it to live
    in init memory.  For a kernel that supports several machines and so
    includes the definition for several leds-gpio devices this saves quite
    some memory because all but one definition can be free'd after boot.
    
    As the function is used by arch code it must be builtin and so cannot go
    into leds-gpio.c.
    
    [akpm@linux-foundation.org: s/CONFIG_LED_REGISTER_GPIO/CONFIG_LEDS_REGISTER_GPIO/]
    Signed-off-by: Uwe Kleine-König  <u.kleine-koenig@pengutronix.de>
    Cc: Russell King <rmk@arm.linux.org.uk>
    Acked-by: Richard Purdie <richard.purdie@linuxfoundation.org>
    Cc: Fabio Estevam <fabio.estevam@freescale.com>
    Cc: Sascha Hauer <s.hauer@pengutronix.de>
    Tested-by: H Hartley Sweeten <hartleys@visionengravers.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

diff --git a/include/linux/leds.h b/include/linux/leds.h
index 61e0340a4b77..5884def15a24 100644
--- a/include/linux/leds.h
+++ b/include/linux/leds.h
@@ -207,5 +207,7 @@ struct gpio_led_platform_data {
 					unsigned long *delay_off);
 };
 
+struct platform_device *gpio_led_register_device(
+		int id, const struct gpio_led_platform_data *pdata);
 
 #endif		/* __LINUX_LEDS_H_INCLUDED */

commit 56a9ccb7ba5ffd5f285e3a9628cb446192c8639c
Merge: 44bbd7ac2658 909a78b320b3
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Fri Mar 25 21:00:29 2011 -0700

    Merge git://git.infradead.org/battery-2.6
    
    * git://git.infradead.org/battery-2.6: (30 commits)
      bq20z75: Fix time and temp units
      bq20z75: Fix issues with present and suspend
      z2_battery: Fix count of properties
      s3c_adc_battery: Fix method names when PM not set
      z2_battery: Add MODULE_DEVICE_TABLE
      ds2782_battery: Add MODULE_DEVICE_TABLE
      bq20z75: Add MODULE_DEVICE_TABLE
      power_supply: Update power_supply_is_watt_property
      bq20z75: Add i2c retry mechanism
      bq20z75: Add optional battery detect gpio
      twl4030_charger: Make the driver atomic notifier safe
      bq27x00: Use single i2c_transfer call for property read
      bq27x00: Cleanup bq27x00_i2c_read
      bq27x00: Minor cleanups
      bq27x00: Give more specific reports on battery status
      bq27x00: Add MODULE_DEVICE_TABLE
      bq27x00: Add new properties
      bq27x00: Poll battery state
      bq27x00: Cache battery registers
      bq27x00: Add bq27000 support
      ...

commit 9517f925f2eb9ffca78b3f0f9389fc675bcb572c
Author: Uwe Kleine-König <u.kleine-koenig@pengutronix.de>
Date:   Tue Mar 22 16:30:17 2011 -0700

    leds: make *struct gpio_led_platform_data.leds const
    
    And fix a typo.
    
    Signed-off-by: Uwe Kleine-König <u.kleine-koenig@pengutronix.de>
    Cc: Lars-Peter Clausen <lars@metafoo.de>
    Cc: Richard Purdie <rpurdie@rpsys.net>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

diff --git a/include/linux/leds.h b/include/linux/leds.h
index 0f19df9e37b0..383811d9af83 100644
--- a/include/linux/leds.h
+++ b/include/linux/leds.h
@@ -194,11 +194,11 @@ struct gpio_led {
 
 struct gpio_led_platform_data {
 	int 		num_leds;
-	struct gpio_led *leds;
+	const struct gpio_led *leds;
 
 #define GPIO_LED_NO_BLINK_LOW	0	/* No blink GPIO state low */
 #define GPIO_LED_NO_BLINK_HIGH	1	/* No blink GPIO state high */
-#define GPIO_LED_BLINK		2	/* Plase, blink */
+#define GPIO_LED_BLINK		2	/* Please, blink */
 	int		(*gpio_blink_set)(unsigned gpio, int state,
 					unsigned long *delay_on,
 					unsigned long *delay_off);

commit 0b9536c957095eb1497828aa51b34ac695f67eae
Author: Vasily Khoruzhick <anarsoul@gmail.com>
Date:   Fri Jan 7 16:28:16 2011 +0000

    leds: Add ability to blink via simple trigger
    
    As blink API is now available, it's possible to add ability to blink via
    simple trigger.
    
    Signed-off-by: Vasily Khoruzhick <anarsoul@gmail.com>
    Signed-off-by: Anton Vorontsov <cbouatmailru@gmail.com>

diff --git a/include/linux/leds.h b/include/linux/leds.h
index 0f19df9e37b0..ffd5c3d91193 100644
--- a/include/linux/leds.h
+++ b/include/linux/leds.h
@@ -145,6 +145,9 @@ extern void led_trigger_register_simple(const char *name,
 extern void led_trigger_unregister_simple(struct led_trigger *trigger);
 extern void led_trigger_event(struct led_trigger *trigger,
 				enum led_brightness event);
+extern void led_trigger_blink(struct led_trigger *trigger,
+			      unsigned long *delay_on,
+			      unsigned long *delay_off);
 
 #else
 

commit 5ada28bf76752e33dce3d807bf0dfbe6d1b943ad
Author: Johannes Berg <johannes.berg@intel.com>
Date:   Thu Nov 11 14:05:21 2010 -0800

    led-class: always implement blinking
    
    Currently, blinking LEDs can be awkward because it is not guaranteed that
    all LEDs implement blinking.  The trigger that wants it to blink then
    needs to implement its own timer solution.
    
    Rather than require that, add led_blink_set() API that triggers can use.
    This function will attempt to use hw blinking, but if that fails
    implements a timer for it.  To stop blinking again, brightness_set() also
    needs to be wrapped into API that will stop the software blink.
    
    As a result of this, the timer trigger becomes a very trivial one, and
    hopefully we can finally see triggers using blinking as well because it's
    always easy to use.
    
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>
    Acked-by: Richard Purdie <rpurdie@linux.intel.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

diff --git a/include/linux/leds.h b/include/linux/leds.h
index ba6986a11663..0f19df9e37b0 100644
--- a/include/linux/leds.h
+++ b/include/linux/leds.h
@@ -15,6 +15,7 @@
 #include <linux/list.h>
 #include <linux/spinlock.h>
 #include <linux/rwsem.h>
+#include <linux/timer.h>
 
 struct device;
 /*
@@ -45,10 +46,14 @@ struct led_classdev {
 	/* Get LED brightness level */
 	enum led_brightness (*brightness_get)(struct led_classdev *led_cdev);
 
-	/* Activate hardware accelerated blink, delays are in
-	 * miliseconds and if none is provided then a sensible default
-	 * should be chosen. The call can adjust the timings if it can't
-	 * match the values specified exactly. */
+	/*
+	 * Activate hardware accelerated blink, delays are in milliseconds
+	 * and if both are zero then a sensible default should be chosen.
+	 * The call should adjust the timings in that case and if it can't
+	 * match the values specified exactly.
+	 * Deactivate blinking again when the brightness is set to a fixed
+	 * value via the brightness_set() callback.
+	 */
 	int		(*blink_set)(struct led_classdev *led_cdev,
 				     unsigned long *delay_on,
 				     unsigned long *delay_off);
@@ -57,6 +62,10 @@ struct led_classdev {
 	struct list_head	 node;			/* LED Device list */
 	const char		*default_trigger;	/* Trigger to use */
 
+	unsigned long		 blink_delay_on, blink_delay_off;
+	struct timer_list	 blink_timer;
+	int			 blink_brightness;
+
 #ifdef CONFIG_LEDS_TRIGGERS
 	/* Protects the trigger data below */
 	struct rw_semaphore	 trigger_lock;
@@ -73,6 +82,36 @@ extern void led_classdev_unregister(struct led_classdev *led_cdev);
 extern void led_classdev_suspend(struct led_classdev *led_cdev);
 extern void led_classdev_resume(struct led_classdev *led_cdev);
 
+/**
+ * led_blink_set - set blinking with software fallback
+ * @led_cdev: the LED to start blinking
+ * @delay_on: the time it should be on (in ms)
+ * @delay_off: the time it should ble off (in ms)
+ *
+ * This function makes the LED blink, attempting to use the
+ * hardware acceleration if possible, but falling back to
+ * software blinking if there is no hardware blinking or if
+ * the LED refuses the passed values.
+ *
+ * Note that if software blinking is active, simply calling
+ * led_cdev->brightness_set() will not stop the blinking,
+ * use led_classdev_brightness_set() instead.
+ */
+extern void led_blink_set(struct led_classdev *led_cdev,
+			  unsigned long *delay_on,
+			  unsigned long *delay_off);
+/**
+ * led_brightness_set - set LED brightness
+ * @led_cdev: the LED to set
+ * @brightness: the brightness to set it to
+ *
+ * Set an LED's brightness, and, if necessary, cancel the
+ * software blink timer that implements blinking when the
+ * hardware doesn't.
+ */
+extern void led_brightness_set(struct led_classdev *led_cdev,
+			       enum led_brightness brightness);
+
 /*
  * LED Triggers
  */

commit 2146325df2c2640059a9e064890c30c6e259b458
Author: Benjamin Herrenschmidt <benh@kernel.crashing.org>
Date:   Sat May 22 20:54:55 2010 +1000

    leds: leds-gpio: Change blink_set callback to be able to turn off blinking
    
    The leds-gpio blink_set() callback follows the same prototype as the
    main leds subsystem blink_set() one.
    
    The problem is that to stop blink, normally, a leds driver does it
    in the brightness_set() callback when asked to set a new fixed value.
    
    However, with leds-gpio, the platform has no hook to do so, as this
    later callback results in a standard GPIO manipulation.
    
    This changes the leds-gpio specific callback to take a new argument
    that indicates whether the LED should be blinking or not and in what
    state it should be set if not. We also update the dns323 platform
    which seems to be the only user of this so far.
    
    Signed-off-by: Benjamin Herrenschmidt <benh@kernel.crashing.org>
    Signed-off-by: Richard Purdie <rpurdie@linux.intel.com>

diff --git a/include/linux/leds.h b/include/linux/leds.h
index d8bf9665e70c..ba6986a11663 100644
--- a/include/linux/leds.h
+++ b/include/linux/leds.h
@@ -149,14 +149,18 @@ struct gpio_led {
 	unsigned	default_state : 2;
 	/* default_state should be one of LEDS_GPIO_DEFSTATE_(ON|OFF|KEEP) */
 };
-#define LEDS_GPIO_DEFSTATE_OFF	0
-#define LEDS_GPIO_DEFSTATE_ON	1
-#define LEDS_GPIO_DEFSTATE_KEEP	2
+#define LEDS_GPIO_DEFSTATE_OFF		0
+#define LEDS_GPIO_DEFSTATE_ON		1
+#define LEDS_GPIO_DEFSTATE_KEEP		2
 
 struct gpio_led_platform_data {
 	int 		num_leds;
 	struct gpio_led *leds;
-	int		(*gpio_blink_set)(unsigned gpio,
+
+#define GPIO_LED_NO_BLINK_LOW	0	/* No blink GPIO state low */
+#define GPIO_LED_NO_BLINK_HIGH	1	/* No blink GPIO state high */
+#define GPIO_LED_BLINK		2	/* Plase, blink */
+	int		(*gpio_blink_set)(unsigned gpio, int state,
 					unsigned long *delay_on,
 					unsigned long *delay_off);
 };

commit a1dd8c617217322614f0465ae347895c4b58e1ab
Author: Richard Purdie <rpurdie@linux.intel.com>
Date:   Mon Jun 22 14:54:13 2009 +0100

    leds: Futher document blink_set
    
    Futher document blink_set function pointer
    
    Signed-off-by: Richard Purdie <rpurdie@linux.intel.com>

diff --git a/include/linux/leds.h b/include/linux/leds.h
index 62af62915cf7..d8bf9665e70c 100644
--- a/include/linux/leds.h
+++ b/include/linux/leds.h
@@ -47,7 +47,8 @@ struct led_classdev {
 
 	/* Activate hardware accelerated blink, delays are in
 	 * miliseconds and if none is provided then a sensible default
-	 * should be chosen. */
+	 * should be chosen. The call can adjust the timings if it can't
+	 * match the values specified exactly. */
 	int		(*blink_set)(struct led_classdev *led_cdev,
 				     unsigned long *delay_on,
 				     unsigned long *delay_off);

commit ed88bae6918fa990cbfe47316bd0f790121aaf00
Author: Trent Piepho <xyzzy@speakeasy.org>
Date:   Tue May 12 15:33:12 2009 -0700

    leds: Add options to have GPIO LEDs start on or keep their state
    
    There already is a "default-on" trigger but there are problems with it.
    
    For one, it's a inefficient way to do it and requires led trigger support
    to be compiled in.
    
    But the real reason is that is produces a glitch on the LED.  The GPIO is
    allocate with the LED *off*, then *later* when the trigger runs it is
    turned back on.  If the LED was already on via the GPIO's reset default or
    action of the firmware, this produces a glitch where the LED goes from on
    to off to on.  While normally this is fast enough that it wouldn't be
    noticeable to a human observer, there are still serious problems.
    
    One is that there may be something else on the GPIO line, like a hardware
    alarm or watchdog, that is fast enough to notice the glitch.
    
    Another is that the kernel may panic before the LED is turned back on, thus
    hanging with the LED in the wrong state.  This is not just speculation, but
    actually happened to me with an embedded system that has an LED which
    should turn off when the kernel finishes booting, which was left in the
    incorrect state due to a bug in the OF LED binding code.
    
    We also let GPIO LEDs get their initial value from whatever the current
    state of the GPIO line is.  On some systems the LEDs are put into some
    state by the firmware or hardware before Linux boots, and it is desired to
    have them keep this state which is otherwise unknown to Linux.
    
    This requires that the underlying GPIO driver support reading the value of
    output GPIOs.  Some drivers support this and some do not.
    
    The platform device binding gains a field in the platform data
    "default_state" that controls this.  There are three constants defined to
    select from on, off, or keeping the current state.  The OpenFirmware
    binding uses a property named "default-state" that can be set to "on",
    "off", or "keep".  The default if the property isn't present is off.
    
    Signed-off-by: Trent Piepho <xyzzy@speakeasy.org>
    Acked-by: Grant Likely <grant.likely@secretlab.ca>
    Acked-by: Wolfram Sang <w.sang@pengutronix.de>
    Acked-by: Sean MacLennan <smaclennan@pikatech.com>
    Signed-off-by: Richard Purdie <rpurdie@linux.intel.com>

diff --git a/include/linux/leds.h b/include/linux/leds.h
index c7f0b148df06..62af62915cf7 100644
--- a/include/linux/leds.h
+++ b/include/linux/leds.h
@@ -143,9 +143,14 @@ struct gpio_led {
 	const char *name;
 	const char *default_trigger;
 	unsigned 	gpio;
-	u8 		active_low : 1;
-	u8		retain_state_suspended : 1;
+	unsigned	active_low : 1;
+	unsigned	retain_state_suspended : 1;
+	unsigned	default_state : 2;
+	/* default_state should be one of LEDS_GPIO_DEFSTATE_(ON|OFF|KEEP) */
 };
+#define LEDS_GPIO_DEFSTATE_OFF	0
+#define LEDS_GPIO_DEFSTATE_ON	1
+#define LEDS_GPIO_DEFSTATE_KEEP	2
 
 struct gpio_led_platform_data {
 	int 		num_leds;

commit 92722b1bb1ebcba767f9c6ee499992ee33367268
Author: Mark Brown <broonie@opensource.wolfsonmicro.com>
Date:   Thu Jun 11 14:17:48 2009 +0100

    leds: Further document parameters for blink_set()
    
    The documentation for the parameters of blink_set() was a bit hard
    to find so put some where I'd expected to find it.
    
    Signed-off-by: Mark Brown <broonie@opensource.wolfsonmicro.com>
    Signed-off-by: Richard Purdie <rpurdie@linux.intel.com>

diff --git a/include/linux/leds.h b/include/linux/leds.h
index 376fe07732ea..c7f0b148df06 100644
--- a/include/linux/leds.h
+++ b/include/linux/leds.h
@@ -45,7 +45,9 @@ struct led_classdev {
 	/* Get LED brightness level */
 	enum led_brightness (*brightness_get)(struct led_classdev *led_cdev);
 
-	/* Activate hardware accelerated blink */
+	/* Activate hardware accelerated blink, delays are in
+	 * miliseconds and if none is provided then a sensible default
+	 * should be chosen. */
 	int		(*blink_set)(struct led_classdev *led_cdev,
 				     unsigned long *delay_on,
 				     unsigned long *delay_off);

commit defb512d2576992c63ba1c18c24eea31cfeaa26e
Author: Richard Purdie <rpurdie@linux.intel.com>
Date:   Tue Feb 17 15:04:07 2009 +0000

    leds: Add suspend/resume state flags to leds-gpio
    
    Add an option to preserve LED state when suspending/resuming to the LED
    gpio driver. Based on a suggestion from Robert Jarzmik.
    
    Tested-by: Robert Jarzmik <robert.jarzmik@free.fr>
    Signed-off-by: Richard Purdie <rpurdie@linux.intel.com>

diff --git a/include/linux/leds.h b/include/linux/leds.h
index 17d277e0c4a6..376fe07732ea 100644
--- a/include/linux/leds.h
+++ b/include/linux/leds.h
@@ -141,7 +141,8 @@ struct gpio_led {
 	const char *name;
 	const char *default_trigger;
 	unsigned 	gpio;
-	u8 		active_low;
+	u8 		active_low : 1;
+	u8		retain_state_suspended : 1;
 };
 
 struct gpio_led_platform_data {

commit 1bd465e6b0e2b559db47420fea686507a01cfab0
Author: Guennadi Liakhovetski <lg@denx.de>
Date:   Sat Jan 10 18:54:39 2009 +0000

    leds: allow led-drivers to use a variable range of brightness values
    
    This patch allows drivers to override the default maximum brightness value
    of 255.  We take care to preserve backwards-compatibility as much as
    possible, so that user-space ABI doesn't change for existing drivers.
    LED trigger code has also been updated to use the per-LED maximum.
    
    Signed-off-by: Guennadi Liakhovetski <lg@denx.de>
    Signed-off-by: Richard Purdie <rpurdie@linux.intel.com>

diff --git a/include/linux/leds.h b/include/linux/leds.h
index 24489da701e3..17d277e0c4a6 100644
--- a/include/linux/leds.h
+++ b/include/linux/leds.h
@@ -30,6 +30,7 @@ enum led_brightness {
 struct led_classdev {
 	const char		*name;
 	int			 brightness;
+	int			 max_brightness;
 	int			 flags;
 
 	/* Lower 16 bits reflect status */

commit 859cb7f2a4244ea6da206d3fe9cc8a6810947a68
Author: Richard Purdie <rpurdie@linux.intel.com>
Date:   Thu Jan 8 17:55:03 2009 +0000

    leds: Add suspend/resume to the core class
    
    Add suspend/resume to the core class and remove all the now unneeded
    code from various drivers. Originally the class code couldn't support
    suspend/resume but since class_device can there is no reason for
    each driver doing its own suspend/resume anymore.

diff --git a/include/linux/leds.h b/include/linux/leds.h
index 3c1a8ce6a5ea..24489da701e3 100644
--- a/include/linux/leds.h
+++ b/include/linux/leds.h
@@ -32,7 +32,10 @@ struct led_classdev {
 	int			 brightness;
 	int			 flags;
 
+	/* Lower 16 bits reflect status */
 #define LED_SUSPENDED		(1 << 0)
+	/* Upper 16 bits reflect control information */
+#define LED_CORE_SUSPENDRESUME	(1 << 16)
 
 	/* Set LED brightness level */
 	/* Must not sleep, use a workqueue if needed */

commit e2387d6c20752ccdb2895ba5de664fa39652f4cc
Author: Wolfram Sang <w.sang@pengutronix.de>
Date:   Mon Nov 17 14:35:44 2008 +0000

    leds: Make header variable naming consistent
    
    There is one place where the struct led_classdev as the function
    argument is named differently. Fix it.
    
    Signed-off-by: Wolfram Sang <w.sang@pengutronix.de>
    Signed-off-by: Richard Purdie <rpurdie@linux.intel.com>

diff --git a/include/linux/leds.h b/include/linux/leds.h
index d3a73f5a48c3..3c1a8ce6a5ea 100644
--- a/include/linux/leds.h
+++ b/include/linux/leds.h
@@ -62,7 +62,7 @@ struct led_classdev {
 
 extern int led_classdev_register(struct device *parent,
 				 struct led_classdev *led_cdev);
-extern void led_classdev_unregister(struct led_classdev *lcd);
+extern void led_classdev_unregister(struct led_classdev *led_cdev);
 extern void led_classdev_suspend(struct led_classdev *led_cdev);
 extern void led_classdev_resume(struct led_classdev *led_cdev);
 

commit 326bb8a5a12c6298a6bf6c74af490b1858b2f12c
Author: Trent Piepho <tpiepho@freescale.com>
Date:   Mon Oct 13 10:13:01 2008 +0100

    leds: Make default trigger fields const
    
    The default_trigger fields of struct gpio_led and thus struct
    led_classdev are pretty much always assigned from a string literal,
    which means the string can't be modified.  Which is fine, since there is
    no reason to modify the string and in fact it never is.
    
    But they should be marked const to prevent such code from being added,
    to prevent warnings if -Wwrite-strings is used, when assigned from a
    constant string other than a string literal (which produces a warning
    under current kernel compiler flags), and for general good coding
    practices.
    
    Signed-off-by: Trent Piepho <tpiepho@freescale.com>
    Signed-off-by: Richard Purdie <rpurdie@linux.intel.com>

diff --git a/include/linux/leds.h b/include/linux/leds.h
index d41ccb56146a..d3a73f5a48c3 100644
--- a/include/linux/leds.h
+++ b/include/linux/leds.h
@@ -123,7 +123,7 @@ extern void ledtrig_ide_activity(void);
  */
 struct led_info {
 	const char	*name;
-	char		*default_trigger;
+	const char	*default_trigger;
 	int		flags;
 };
 
@@ -135,7 +135,7 @@ struct led_platform_data {
 /* For the leds-gpio driver */
 struct gpio_led {
 	const char *name;
-	char *default_trigger;
+	const char *default_trigger;
 	unsigned 	gpio;
 	u8 		active_low;
 };

commit f46e9203d9a100bae216cc06e17f2e77351aa8d8
Author: Nate Case <ncase@xes-inc.com>
Date:   Wed Jul 16 22:49:55 2008 +0100

    leds: Add support for Philips PCA955x I2C LED drivers
    
    This driver supports the PCA9550, PCA9551, PCA9552, and PCA9553
    LED driver chips.
    
    Signed-off-by: Nate Case <ncase@xes-inc.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Richard Purdie <rpurdie@rpsys.net>

diff --git a/include/linux/leds.h b/include/linux/leds.h
index e7a5e89932fe..d41ccb56146a 100644
--- a/include/linux/leds.h
+++ b/include/linux/leds.h
@@ -118,6 +118,20 @@ extern void ledtrig_ide_activity(void);
 #define ledtrig_ide_activity() do {} while(0)
 #endif
 
+/*
+ * Generic LED platform data for describing LED names and default triggers.
+ */
+struct led_info {
+	const char	*name;
+	char		*default_trigger;
+	int		flags;
+};
+
+struct led_platform_data {
+	int		num_leds;
+	struct led_info	*leds;
+};
+
 /* For the leds-gpio driver */
 struct gpio_led {
 	const char *name;

commit 781a54e7664cc0089287a90d27086e9656ac68a1
Author: Anton Vorontsov <avorontsov@ru.mvista.com>
Date:   Sat May 31 15:23:19 2008 +0100

    leds: mark led_classdev.default_trigger as const
    
    LED classdev core doesn't modify memory pointed by the default_trigger,
    so mark it as const and we'll able to pass const char *s without getting
    compiler warnings.
    
    Signed-off-by: Anton Vorontsov <avorontsov@ru.mvista.com>
    Signed-off-by: Richard Purdie <rpurdie@rpsys.net>

diff --git a/include/linux/leds.h b/include/linux/leds.h
index 519df72e939d..e7a5e89932fe 100644
--- a/include/linux/leds.h
+++ b/include/linux/leds.h
@@ -48,7 +48,7 @@ struct led_classdev {
 
 	struct device		*dev;
 	struct list_head	 node;			/* LED Device list */
-	char			*default_trigger;	/* Trigger to use */
+	const char		*default_trigger;	/* Trigger to use */
 
 #ifdef CONFIG_LEDS_TRIGGERS
 	/* Protects the trigger data below */

commit 2e214e0fa21465cf2749ca7d5a072cf8591f3213
Author: Richard Purdie <rpurdie@rpsys.net>
Date:   Thu Apr 24 23:49:30 2008 +0100

    leds: Document the context brightness_set needs
    
    Make sure there is no confusion about the contexts brightness_set
    can be called under by documenting it.
    
    Signed-off-by: Richard Purdie <rpurdie@rpsys.net>

diff --git a/include/linux/leds.h b/include/linux/leds.h
index ff1570f97045..519df72e939d 100644
--- a/include/linux/leds.h
+++ b/include/linux/leds.h
@@ -35,6 +35,7 @@ struct led_classdev {
 #define LED_SUSPENDED		(1 << 0)
 
 	/* Set LED brightness level */
+	/* Must not sleep, use a workqueue if needed */
 	void		(*brightness_set)(struct led_classdev *led_cdev,
 					  enum led_brightness brightness);
 	/* Get LED brightness level */

commit 29d76dfa29fe22583aefddccda0bc56aa81035dc
Author: Henrique de Moraes Holschuh <hmh@hmh.eng.br>
Date:   Tue Mar 18 09:47:48 2008 +0000

    leds: Add support to leds with readable status
    
    Some led hardware allows drivers to query the led state, and this patch
    adds a hook to let the led class take advantage of that information when
    available.
    
    Without this functionality, when access to the led hardware is not
    exclusive (i.e. firmware or hardware might change its state behind the
    kernel's back), reality goes out of sync with the led class' idea of what
    the led is doing, which is annoying at best.
    
    Behaviour for drivers that do not or cannot read the led status is
    unchanged.
    
    Signed-off-by: Henrique de Moraes Holschuh <hmh@hmh.eng.br>
    Signed-off-by: Richard Purdie <rpurdie@rpsys.net>

diff --git a/include/linux/leds.h b/include/linux/leds.h
index c195a674b6ca..ff1570f97045 100644
--- a/include/linux/leds.h
+++ b/include/linux/leds.h
@@ -37,6 +37,8 @@ struct led_classdev {
 	/* Set LED brightness level */
 	void		(*brightness_set)(struct led_classdev *led_cdev,
 					  enum led_brightness brightness);
+	/* Get LED brightness level */
+	enum led_brightness (*brightness_get)(struct led_classdev *led_cdev);
 
 	/* Activate hardware accelerated blink */
 	int		(*blink_set)(struct led_classdev *led_cdev,

commit ca3259b3603539e72faacc6821050ee889a52103
Author: Herbert Valerio Riedel <hvr@gnu.org>
Date:   Sun Mar 9 23:48:25 2008 +0000

    leds: enable support for blink_set() platform hook in leds-gpio
    
    Enhance leds-gpio to provide hardware-based led flashing by passing
    through the blink_set() call to a optionally set platform-specific
    function pointer.
    
    Signed-off-by: Herbert Valerio Riedel <hvr@gnu.org>
    Signed-off-by: Richard Purdie <rpurdie@rpsys.net>

diff --git a/include/linux/leds.h b/include/linux/leds.h
index b07e3d400bd6..c195a674b6ca 100644
--- a/include/linux/leds.h
+++ b/include/linux/leds.h
@@ -126,6 +126,9 @@ struct gpio_led {
 struct gpio_led_platform_data {
 	int 		num_leds;
 	struct gpio_led *leds;
+	int		(*gpio_blink_set)(unsigned gpio,
+					unsigned long *delay_on,
+					unsigned long *delay_off);
 };
 
 

commit b844eba292b477cda14582bfc6f535deed57a82d
Author: Rafael J. Wysocki <rjw@sisk.pl>
Date:   Sun Mar 23 20:28:24 2008 +0100

    PM: Remove destroy_suspended_device()
    
    After 2.6.24 there was a plan to make the PM core acquire all device
    semaphores during a suspend/hibernation to protect itself from
    concurrent operations involving device objects.  That proved to be
    too heavy-handed and we found a better way to achieve the goal, but
    before it happened, we had introduced the functions
    device_pm_schedule_removal() and destroy_suspended_device() to allow
    drivers to "safely" destroy a suspended device and we had adapted some
    drivers to use them.  Now that these functions are no longer necessary,
    it seems reasonable to remove them and modify their users to use the
    normal device unregistration instead.
    
    Signed-off-by: Rafael J. Wysocki <rjw@sisk.pl>
    Acked-by: Pavel Machek <pavel@ucw.cz>
    Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>

diff --git a/include/linux/leds.h b/include/linux/leds.h
index 0201f6f51cea..b07e3d400bd6 100644
--- a/include/linux/leds.h
+++ b/include/linux/leds.h
@@ -59,15 +59,7 @@ struct led_classdev {
 
 extern int led_classdev_register(struct device *parent,
 				 struct led_classdev *led_cdev);
-extern void __led_classdev_unregister(struct led_classdev *led_cdev, bool sus);
-static inline void led_classdev_unregister(struct led_classdev *lcd)
-{
-	__led_classdev_unregister(lcd, false);
-}
-static inline void led_classdev_unregister_suspended(struct led_classdev *lcd)
-{
-	__led_classdev_unregister(lcd, true);
-}
+extern void led_classdev_unregister(struct led_classdev *lcd);
 extern void led_classdev_suspend(struct led_classdev *led_cdev);
 extern void led_classdev_resume(struct led_classdev *led_cdev);
 

commit 4c79141d28bc290ae307e3f81f5bc909c26faf6e
Author: Márton Németh <nm127@freemail.hu>
Date:   Wed Oct 31 15:07:12 2007 +0100

    leds: Add support for hardware accelerated LED flashing
    
    Extends the leds subsystem with a blink_set() callback function which can
    be optionally implemented by a LED driver. If implemented, the driver can use
    the hardware acceleration for blinking a LED.
    
    Signed-off-by: Márton Németh <nm127@freemail.hu>
    Signed-off-by: Richard Purdie <rpurdie@rpsys.net>

diff --git a/include/linux/leds.h b/include/linux/leds.h
index 00f89fd6c52a..0201f6f51cea 100644
--- a/include/linux/leds.h
+++ b/include/linux/leds.h
@@ -38,6 +38,11 @@ struct led_classdev {
 	void		(*brightness_set)(struct led_classdev *led_cdev,
 					  enum led_brightness brightness);
 
+	/* Activate hardware accelerated blink */
+	int		(*blink_set)(struct led_classdev *led_cdev,
+				     unsigned long *delay_on,
+				     unsigned long *delay_off);
+
 	struct device		*dev;
 	struct list_head	 node;			/* LED Device list */
 	char			*default_trigger;	/* Trigger to use */

commit fa23f5cce8cda2095013afc837ccf74b352f9f7b
Author: Rafael J. Wysocki <rjw@sisk.pl>
Date:   Mon Feb 4 22:30:14 2008 -0800

    leds: add possibility to remove leds classdevs during suspend/resume
    
    Make it possible to unregister a led classdev object in a safe way during a
    suspend/resume cycle.
    
    Signed-off-by: Rafael J. Wysocki <rjw@sisk.pl>
    Cc: Michael Buesch <mb@bu3sch.de>
    Cc: Pavel Machek <pavel@ucw.cz>
    Cc: "John W. Linville" <linville@tuxdriver.com>
    Cc: Alan Stern <stern@rowland.harvard.edu>
    Cc: Len Brown <lenb@kernel.org>
    Cc: Greg KH <greg@kroah.com>
    Cc: Kay Sievers <kay.sievers@vrfy.org>
    Cc: Richard Purdie <rpurdie@rpsys.net>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

diff --git a/include/linux/leds.h b/include/linux/leds.h
index b4130ff58d0c..00f89fd6c52a 100644
--- a/include/linux/leds.h
+++ b/include/linux/leds.h
@@ -54,7 +54,15 @@ struct led_classdev {
 
 extern int led_classdev_register(struct device *parent,
 				 struct led_classdev *led_cdev);
-extern void led_classdev_unregister(struct led_classdev *led_cdev);
+extern void __led_classdev_unregister(struct led_classdev *led_cdev, bool sus);
+static inline void led_classdev_unregister(struct led_classdev *lcd)
+{
+	__led_classdev_unregister(lcd, false);
+}
+static inline void led_classdev_unregister_suspended(struct led_classdev *lcd)
+{
+	__led_classdev_unregister(lcd, true);
+}
 extern void led_classdev_suspend(struct led_classdev *led_cdev);
 extern void led_classdev_resume(struct led_classdev *led_cdev);
 

commit dc47206e552c0850ad11f7e9a1fca0a3c92f5d65
Author: Richard Purdie <rpurdie@rpsys.net>
Date:   Sat Nov 10 13:29:04 2007 +0000

    leds: Fix led trigger locking bugs
    
    Convert part of the led trigger core from rw spinlocks to rw
    semaphores. We're calling functions which can sleep from invalid
    contexts otherwise. Fixes bug #9264.
    
    Signed-off-by: Richard Purdie <rpurdie@rpsys.net>

diff --git a/include/linux/leds.h b/include/linux/leds.h
index dc1178f6184b..b4130ff58d0c 100644
--- a/include/linux/leds.h
+++ b/include/linux/leds.h
@@ -14,6 +14,7 @@
 
 #include <linux/list.h>
 #include <linux/spinlock.h>
+#include <linux/rwsem.h>
 
 struct device;
 /*
@@ -43,7 +44,7 @@ struct led_classdev {
 
 #ifdef CONFIG_LEDS_TRIGGERS
 	/* Protects the trigger data below */
-	rwlock_t		 trigger_lock;
+	struct rw_semaphore	 trigger_lock;
 
 	struct led_trigger	*trigger;
 	struct list_head	 trig_list;

commit df96efd73b81b8bc2d23b3d8b6025cce3d43db6c
Author: Yoichi Yuasa <yoichi_yuasa@tripeaks.co.jp>
Date:   Tue Sep 11 22:24:45 2007 +0100

    leds: Add missing include for leds.h
    
    This patch has added #include <linux/spinlock.h> to include/linux/leds.h
    for rwlock_t.
    
    Signed-off-by: Yoichi Yuasa <yoichi_yuasa@tripeaks.co.jp>
    Signed-off-by: Richard Purdie <rpurdie@rpsys.net>

diff --git a/include/linux/leds.h b/include/linux/leds.h
index 421175092ee2..dc1178f6184b 100644
--- a/include/linux/leds.h
+++ b/include/linux/leds.h
@@ -13,6 +13,7 @@
 #define __LINUX_LEDS_H_INCLUDED
 
 #include <linux/list.h>
+#include <linux/spinlock.h>
 
 struct device;
 /*

commit d7f5e3df3574c6e38b99f5fe22f15540b2b9811d
Merge: 2fe83b3ad12d f8a7c6fe14f5
Author: Linus Torvalds <torvalds@woody.linux-foundation.org>
Date:   Sun Jul 22 11:22:01 2007 -0700

    Merge branch 'for-linus' of git://git.o-hand.com/linux-rpurdie-leds
    
    * 'for-linus' of git://git.o-hand.com/linux-rpurdie-leds:
      leds: Convert from struct class_device to struct device
      leds: leds-gpio for ngw100
      leds: Add warning printks in error paths
      leds: Fix trigger unregister_simple if register_simple fails
      leds: Use menuconfig objects II - LED
      leds: Teach leds-gpio to handle timer-unsafe GPIOs
      leds: Add generic GPIO LED driver

commit 0a3021f4e249fbdb5f30d614707b5e02022e4c9b
Author: Robert P. J. Day <rpjday@mindspring.com>
Date:   Sun Jul 15 23:39:57 2007 -0700

    Remove unnecessary includes of spinlock.h under include/linux
    
    Remove the obviously unnecessary includes of <linux/spinlock.h> under the
    include/linux/ directory, and fix the couple errors that are introduced as
    a result of that.
    
    Signed-off-by: Robert P. J. Day <rpjday@mindspring.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

diff --git a/include/linux/leds.h b/include/linux/leds.h
index 88afceffb7cb..494bed7c2fc1 100644
--- a/include/linux/leds.h
+++ b/include/linux/leds.h
@@ -13,7 +13,6 @@
 #define __LINUX_LEDS_H_INCLUDED
 
 #include <linux/list.h>
-#include <linux/spinlock.h>
 
 struct device;
 struct class_device;

commit f8a7c6fe14f556ca8eeddce258cb21392d0c3a2f
Author: Richard Purdie <rpurdie@rpsys.net>
Date:   Sun Jul 8 23:19:31 2007 +0100

    leds: Convert from struct class_device to struct device
    
    Convert the LEDs class from struct class_device to struct device
    since class_device is scheduled for removal.
    
    Signed-off-by: Richard Purdie <rpurdie@rpsys.net>
    Acked-by: Greg Kroah-Hartman <gregkh@suse.de>

diff --git a/include/linux/leds.h b/include/linux/leds.h
index 059abfe219dc..dc1178f6184b 100644
--- a/include/linux/leds.h
+++ b/include/linux/leds.h
@@ -16,7 +16,6 @@
 #include <linux/spinlock.h>
 
 struct device;
-struct class_device;
 /*
  * LED Core
  */
@@ -38,7 +37,7 @@ struct led_classdev {
 	void		(*brightness_set)(struct led_classdev *led_cdev,
 					  enum led_brightness brightness);
 
-	struct class_device	*class_dev;
+	struct device		*dev;
 	struct list_head	 node;			/* LED Device list */
 	char			*default_trigger;	/* Trigger to use */
 

commit 22e03f3b58dfcca30f0c8de185022132459638d1
Author: Raphael Assenat <raph@8d.com>
Date:   Tue Feb 27 19:49:53 2007 +0000

    leds: Add generic GPIO LED driver
    
    This patch adds support for GPIO connected leds via the new GPIO framework.
    
    Information about leds (gpio, polarity, name, default trigger) is passed
    to the driver via platform_data.
    
    Signed-off-by: Raphael Assenat <raph@8d.com>
    Signed-off-by: Richard Purdie <rpurdie@rpsys.net>

diff --git a/include/linux/leds.h b/include/linux/leds.h
index 88afceffb7cb..059abfe219dc 100644
--- a/include/linux/leds.h
+++ b/include/linux/leds.h
@@ -110,4 +110,18 @@ extern void ledtrig_ide_activity(void);
 #define ledtrig_ide_activity() do {} while(0)
 #endif
 
+/* For the leds-gpio driver */
+struct gpio_led {
+	const char *name;
+	char *default_trigger;
+	unsigned 	gpio;
+	u8 		active_low;
+};
+
+struct gpio_led_platform_data {
+	int 		num_leds;
+	struct gpio_led *leds;
+};
+
+
 #endif		/* __LINUX_LEDS_H_INCLUDED */

commit af410fc13d95f079910fc3dca7496590c3275967
Author: Johannes Berg <johannes@sipsolutions.net>
Date:   Fri Sep 29 02:00:14 2006 -0700

    [PATCH] make leds.h include relevant headers
    
    Make it possible to include linux/leds.h without first including list.h and
    spinlock.h.
    
    Signed-off-by: Johannes Berg <johannes@sipsolutions.net>
    Acked-by: Richard Purdie <rpurdie@rpsys.net>
    Signed-off-by: Andrew Morton <akpm@osdl.org>
    Signed-off-by: Linus Torvalds <torvalds@osdl.org>

diff --git a/include/linux/leds.h b/include/linux/leds.h
index dc23c7c639f3..88afceffb7cb 100644
--- a/include/linux/leds.h
+++ b/include/linux/leds.h
@@ -12,6 +12,9 @@
 #ifndef __LINUX_LEDS_H_INCLUDED
 #define __LINUX_LEDS_H_INCLUDED
 
+#include <linux/list.h>
+#include <linux/spinlock.h>
+
 struct device;
 struct class_device;
 /*

commit fb5035dbbea8826cdbeb5c43d7605255eb6f0baa
Author: Ben Dooks <ben-linux@fluff.org>
Date:   Mon Apr 10 22:54:02 2006 -0700

    [PATCH] leds: re-layout include/linux/leds.h
    
    Lay out the structure definitions in include/linux/leds.h to be aligned as
    much as possible.  Also minor updates to the comments to make them more
    concise.
    
    Signed-off-by: Ben Dooks <ben-linux@fluff.org>
    Acked-by: Richard Purdie <rpurdie@rpsys.net>
    Signed-off-by: Andrew Morton <akpm@osdl.org>
    Signed-off-by: Linus Torvalds <torvalds@osdl.org>

diff --git a/include/linux/leds.h b/include/linux/leds.h
index 4617e75903b0..dc23c7c639f3 100644
--- a/include/linux/leds.h
+++ b/include/linux/leds.h
@@ -19,39 +19,38 @@ struct class_device;
  */
 
 enum led_brightness {
-	LED_OFF = 0,
-	LED_HALF = 127,
-	LED_FULL = 255,
+	LED_OFF		= 0,
+	LED_HALF	= 127,
+	LED_FULL	= 255,
 };
 
 struct led_classdev {
-	const char *name;
-	int brightness;
-	int flags;
-#define LED_SUSPENDED       (1 << 0)
+	const char		*name;
+	int			 brightness;
+	int			 flags;
 
-	/* A function to set the brightness of the led */
-	void (*brightness_set)(struct led_classdev *led_cdev,
-				enum led_brightness brightness);
+#define LED_SUSPENDED		(1 << 0)
 
-	struct class_device *class_dev;
-	/* LED Device linked list */
-	struct list_head node;
+	/* Set LED brightness level */
+	void		(*brightness_set)(struct led_classdev *led_cdev,
+					  enum led_brightness brightness);
+
+	struct class_device	*class_dev;
+	struct list_head	 node;			/* LED Device list */
+	char			*default_trigger;	/* Trigger to use */
 
-	/* Trigger data */
-	char *default_trigger;
 #ifdef CONFIG_LEDS_TRIGGERS
-	rwlock_t trigger_lock;
 	/* Protects the trigger data below */
+	rwlock_t		 trigger_lock;
 
-	struct led_trigger *trigger;
-	struct list_head trig_list;
-	void *trigger_data;
+	struct led_trigger	*trigger;
+	struct list_head	 trig_list;
+	void			*trigger_data;
 #endif
 };
 
 extern int led_classdev_register(struct device *parent,
-				struct led_classdev *led_cdev);
+				 struct led_classdev *led_cdev);
 extern void led_classdev_unregister(struct led_classdev *led_cdev);
 extern void led_classdev_suspend(struct led_classdev *led_cdev);
 extern void led_classdev_resume(struct led_classdev *led_cdev);
@@ -65,16 +64,16 @@ extern void led_classdev_resume(struct led_classdev *led_cdev);
 
 struct led_trigger {
 	/* Trigger Properties */
-	const char *name;
-	void (*activate)(struct led_classdev *led_cdev);
-	void (*deactivate)(struct led_classdev *led_cdev);
+	const char	 *name;
+	void		(*activate)(struct led_classdev *led_cdev);
+	void		(*deactivate)(struct led_classdev *led_cdev);
 
 	/* LEDs under control by this trigger (for simple triggers) */
-	rwlock_t leddev_list_lock;
-	struct list_head led_cdevs;
+	rwlock_t	  leddev_list_lock;
+	struct list_head  led_cdevs;
 
 	/* Link to next registered trigger */
-	struct list_head next_trig;
+	struct list_head  next_trig;
 };
 
 /* Registration functions for complex triggers */

commit 2bfb646cdf348cb77c572f06d5b9d17ea205c7e2
Author: Richard Purdie <rpurdie@rpsys.net>
Date:   Fri Mar 31 02:31:16 2006 -0800

    [PATCH] LED: Add IDE disk activity LED trigger
    
    Add an LED trigger for IDE disk activity to the ide-disk driver.
    
    Signed-off-by: Richard Purdie <rpurdie@rpsys.net>
    Acked-by: Bartlomiej Zolnierkiewicz <B.Zolnierkiewicz@elka.pw.edu.pl>
    Cc: Alan Cox <alan@lxorguk.ukuu.org.uk>
    Signed-off-by: Andrew Morton <akpm@osdl.org>
    Signed-off-by: Linus Torvalds <torvalds@osdl.org>

diff --git a/include/linux/leds.h b/include/linux/leds.h
index 404575c3dd5a..4617e75903b0 100644
--- a/include/linux/leds.h
+++ b/include/linux/leds.h
@@ -100,4 +100,12 @@ extern void led_trigger_event(struct led_trigger *trigger,
 #define led_trigger_event(x, y) do {} while(0)
 
 #endif
+
+/* Trigger specific functions */
+#ifdef CONFIG_LEDS_TRIGGER_IDE_DISK
+extern void ledtrig_ide_activity(void);
+#else
+#define ledtrig_ide_activity() do {} while(0)
+#endif
+
 #endif		/* __LINUX_LEDS_H_INCLUDED */

commit c3bc9956ec52fb2c70f29aa894d8eec766116584
Author: Richard Purdie <rpurdie@rpsys.net>
Date:   Fri Mar 31 02:31:05 2006 -0800

    [PATCH] LED: add LED trigger tupport
    
    Add support for LED triggers to the LED subsystem.  "Triggers" are events
    which change the state of an LED.  Two kinds of trigger are available, simple
    ones which can be added to exising code with minimum disruption and complex
    ones for implementing new or more complex functionality.
    
    Signed-off-by: Richard Purdie <rpurdie@rpsys.net>
    Cc: Russell King <rmk@arm.linux.org.uk>
    Signed-off-by: Andrew Morton <akpm@osdl.org>
    Signed-off-by: Linus Torvalds <torvalds@osdl.org>

diff --git a/include/linux/leds.h b/include/linux/leds.h
index 6812640b39cc..404575c3dd5a 100644
--- a/include/linux/leds.h
+++ b/include/linux/leds.h
@@ -40,6 +40,14 @@ struct led_classdev {
 
 	/* Trigger data */
 	char *default_trigger;
+#ifdef CONFIG_LEDS_TRIGGERS
+	rwlock_t trigger_lock;
+	/* Protects the trigger data below */
+
+	struct led_trigger *trigger;
+	struct list_head trig_list;
+	void *trigger_data;
+#endif
 };
 
 extern int led_classdev_register(struct device *parent,
@@ -48,4 +56,48 @@ extern void led_classdev_unregister(struct led_classdev *led_cdev);
 extern void led_classdev_suspend(struct led_classdev *led_cdev);
 extern void led_classdev_resume(struct led_classdev *led_cdev);
 
+/*
+ * LED Triggers
+ */
+#ifdef CONFIG_LEDS_TRIGGERS
+
+#define TRIG_NAME_MAX 50
+
+struct led_trigger {
+	/* Trigger Properties */
+	const char *name;
+	void (*activate)(struct led_classdev *led_cdev);
+	void (*deactivate)(struct led_classdev *led_cdev);
+
+	/* LEDs under control by this trigger (for simple triggers) */
+	rwlock_t leddev_list_lock;
+	struct list_head led_cdevs;
+
+	/* Link to next registered trigger */
+	struct list_head next_trig;
+};
+
+/* Registration functions for complex triggers */
+extern int led_trigger_register(struct led_trigger *trigger);
+extern void led_trigger_unregister(struct led_trigger *trigger);
+
+/* Registration functions for simple triggers */
+#define DEFINE_LED_TRIGGER(x)		static struct led_trigger *x;
+#define DEFINE_LED_TRIGGER_GLOBAL(x)	struct led_trigger *x;
+extern void led_trigger_register_simple(const char *name,
+				struct led_trigger **trigger);
+extern void led_trigger_unregister_simple(struct led_trigger *trigger);
+extern void led_trigger_event(struct led_trigger *trigger,
+				enum led_brightness event);
+
+#else
+
+/* Triggers aren't active - null macros */
+#define DEFINE_LED_TRIGGER(x)
+#define DEFINE_LED_TRIGGER_GLOBAL(x)
+#define led_trigger_register_simple(x, y) do {} while(0)
+#define led_trigger_unregister_simple(x) do {} while(0)
+#define led_trigger_event(x, y) do {} while(0)
+
+#endif
 #endif		/* __LINUX_LEDS_H_INCLUDED */

commit c72a1d608dd0eb3d553a08bfdf1c0041bebaa8a0
Author: Richard Purdie <rpurdie@rpsys.net>
Date:   Fri Mar 31 02:31:04 2006 -0800

    [PATCH] LED: add LED class
    
    Add the foundations of a new LEDs subsystem.  This patch adds a class which
    presents LED devices within sysfs and allows their brightness to be
    controlled.
    
    Signed-off-by: Richard Purdie <rpurdie@rpsys.net>
    Cc: Russell King <rmk@arm.linux.org.uk>
    Cc: Greg KH <greg@kroah.com>
    Signed-off-by: Andrew Morton <akpm@osdl.org>
    Signed-off-by: Linus Torvalds <torvalds@osdl.org>

diff --git a/include/linux/leds.h b/include/linux/leds.h
new file mode 100644
index 000000000000..6812640b39cc
--- /dev/null
+++ b/include/linux/leds.h
@@ -0,0 +1,51 @@
+/*
+ * Driver model for leds and led triggers
+ *
+ * Copyright (C) 2005 John Lenz <lenz@cs.wisc.edu>
+ * Copyright (C) 2005 Richard Purdie <rpurdie@openedhand.com>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation.
+ *
+ */
+#ifndef __LINUX_LEDS_H_INCLUDED
+#define __LINUX_LEDS_H_INCLUDED
+
+struct device;
+struct class_device;
+/*
+ * LED Core
+ */
+
+enum led_brightness {
+	LED_OFF = 0,
+	LED_HALF = 127,
+	LED_FULL = 255,
+};
+
+struct led_classdev {
+	const char *name;
+	int brightness;
+	int flags;
+#define LED_SUSPENDED       (1 << 0)
+
+	/* A function to set the brightness of the led */
+	void (*brightness_set)(struct led_classdev *led_cdev,
+				enum led_brightness brightness);
+
+	struct class_device *class_dev;
+	/* LED Device linked list */
+	struct list_head node;
+
+	/* Trigger data */
+	char *default_trigger;
+};
+
+extern int led_classdev_register(struct device *parent,
+				struct led_classdev *led_cdev);
+extern void led_classdev_unregister(struct led_classdev *led_cdev);
+extern void led_classdev_suspend(struct led_classdev *led_cdev);
+extern void led_classdev_resume(struct led_classdev *led_cdev);
+
+#endif		/* __LINUX_LEDS_H_INCLUDED */
