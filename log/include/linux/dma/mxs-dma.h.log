commit ef347c0cfd619a9251e5a2f9ff72e33650a9bccb
Author: Sascha Hauer <s.hauer@pengutronix.de>
Date:   Tue May 21 09:06:43 2019 +0200

    mtd: rawnand: gpmi: Implement exec_op
    
    The gpmi driver performance suffers from NAND operations being split
    in multiple small DMA transfers. This has been forced by the NAND layer
    in the former days, but now with exec_op we can use the controller as
    intended.
    
    With this patch gpmi_nfc_exec_op becomes the main entry point to NAND
    operations. Here all instructions are collected and chained as separate
    DMA transfers. In the end whole chain is fired and waited to be
    finished. gpmi_nfc_exec_op only does the hardware operations, bad block
    marker swapping and buffer scrambling is done by the callers. It's worth
    noting that the nand_*_op functions always take the buffer lengths for
    the data that the NAND chip actually transfers. When doing BCH we have
    to calculate the net data size from the raw data size in some places.
    
    This patch has been tested with 2048/64 and 2048/128 byte NAND on
    i.MX6q. mtd_oobtest, mtd_subpagetest and mtd_speedtest run without
    errors. nandbiterrs, nandpagetest and nandsubpagetest userspace tests
    from mtdutils run without errors and UBIFS can successfully be mounted.
    
    Signed-off-by: Sascha Hauer <s.hauer@pengutronix.de>
    Signed-off-by: Miquel Raynal <miquel.raynal@bootlin.com>

diff --git a/include/linux/dma/mxs-dma.h b/include/linux/dma/mxs-dma.h
index 4a33f2c8a682..069d9f5a609e 100644
--- a/include/linux/dma/mxs-dma.h
+++ b/include/linux/dma/mxs-dma.h
@@ -5,6 +5,7 @@
 #include <linux/dmaengine.h>
 
 #define MXS_DMA_CTRL_WAIT4END	BIT(31)
+#define MXS_DMA_CTRL_WAIT4RDY	BIT(30)
 
 /*
  * The mxs dmaengine can do PIO transfers. We pass a pointer to the PIO words

commit ceeeb99cd821a2f7493e1e0e1eca5afc7a205213
Author: Sascha Hauer <s.hauer@pengutronix.de>
Date:   Tue May 21 09:06:42 2019 +0200

    dmaengine: mxs: rename custom flag
    
    The mxs dma driver uses the flags parameter in dmaengine_prep_slave_sg() for
    custom flags, but still uses the dmaengine specific names of the flags.
    Do a little bit better and at least give the flag a custom name.
    
    Signed-off-by: Sascha Hauer <s.hauer@pengutronix.de>
    Acked-by: Vinod Koul <vkoul@kernel.org>
    Signed-off-by: Miquel Raynal <miquel.raynal@bootlin.com>

diff --git a/include/linux/dma/mxs-dma.h b/include/linux/dma/mxs-dma.h
index 092b2a7b92ac..4a33f2c8a682 100644
--- a/include/linux/dma/mxs-dma.h
+++ b/include/linux/dma/mxs-dma.h
@@ -4,6 +4,8 @@
 
 #include <linux/dmaengine.h>
 
+#define MXS_DMA_CTRL_WAIT4END	BIT(31)
+
 /*
  * The mxs dmaengine can do PIO transfers. We pass a pointer to the PIO words
  * in the second argument to dmaengine_prep_slave_sg when the direction is

commit e0ddaab76802d3179013f4864535043e2aea6c69
Author: Sascha Hauer <s.hauer@pengutronix.de>
Date:   Tue May 21 09:06:41 2019 +0200

    dmaengine: mxs: Add header file to be shared with gpmi nand driver
    
    The mxs dma driver can do PIO transfers. A pointer to the PIO words
    to transfer is passed in the struct scatterlist * argument of
    dmaengine_prep_slave_sg(). It's quite ugly and non obvious to cast
    u32 * to struct scatterlist * each time when calling
    dmaengine_prep_slave_sg(), so add a static inline wrapper function
    to be called by the user along with a description what is going on.
    
    Signed-off-by: Sascha Hauer <s.hauer@pengutronix.de>
    Acked-by: Vinod Koul <vkoul@kernel.org>
    Signed-off-by: Miquel Raynal <miquel.raynal@bootlin.com>

diff --git a/include/linux/dma/mxs-dma.h b/include/linux/dma/mxs-dma.h
new file mode 100644
index 000000000000..092b2a7b92ac
--- /dev/null
+++ b/include/linux/dma/mxs-dma.h
@@ -0,0 +1,21 @@
+/* SPDX-License-Identifier: GPL-2.0 */
+#ifndef _MXS_DMA_H_
+#define _MXS_DMA_H_
+
+#include <linux/dmaengine.h>
+
+/*
+ * The mxs dmaengine can do PIO transfers. We pass a pointer to the PIO words
+ * in the second argument to dmaengine_prep_slave_sg when the direction is
+ * set to DMA_TRANS_NONE. To make this clear and to prevent users from doing
+ * the error prone casting we have this wrapper function
+ */
+static inline struct dma_async_tx_descriptor *mxs_dmaengine_prep_pio(
+        struct dma_chan *chan, u32 *pio, unsigned int npio,
+        enum dma_transfer_direction dir, unsigned long flags)
+{
+	return dmaengine_prep_slave_sg(chan, (struct scatterlist *)pio, npio,
+				       dir, flags);
+}
+
+#endif /* _MXS_DMA_H_ */
