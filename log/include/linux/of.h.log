commit b9f8c26afc405a4a616e765e949bdd551151e41d
Author: Ulf Hansson <ulf.hansson@linaro.org>
Date:   Thu Oct 10 12:01:48 2019 +0200

    of: base: Add of_get_cpu_state_node() to get idle states for a CPU node
    
    The CPU's idle state nodes are currently parsed at the common cpuidle DT
    library, but also when initializing data for specific CPU idle operations,
    as in the PSCI cpuidle driver case and qcom-spm cpuidle case.
    
    To avoid open-coding, let's introduce of_get_cpu_state_node(), which takes
    the device node for the CPU and the index to the requested idle state node,
    as in-parameters. In case a corresponding idle state node is found, it
    returns the node with the refcount incremented for it, else it returns
    NULL.
    
    Moreover, for PSCI there are two options to describe the CPU's idle states
    [1], either via a flattened description or a hierarchical layout. Hence,
    let's take both options into account.
    
    [1] Documentation/devicetree/bindings/arm/psci.yaml
    
    Suggested-by: Sudeep Holla <sudeep.holla@arm.com>
    Co-developed-by: Lina Iyer <lina.iyer@linaro.org>
    Signed-off-by: Lina Iyer <lina.iyer@linaro.org>
    Reviewed-by: Rob Herring <robh@kernel.org>
    Reviewed-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>
    Reviewed-by: Sudeep Holla <sudeep.holla@arm.com>

diff --git a/include/linux/of.h b/include/linux/of.h
index 844f89e1b039..c669c0a4732f 100644
--- a/include/linux/of.h
+++ b/include/linux/of.h
@@ -351,6 +351,8 @@ extern const void *of_get_property(const struct device_node *node,
 				int *lenp);
 extern struct device_node *of_get_cpu_node(int cpu, unsigned int *thread);
 extern struct device_node *of_get_next_cpu_node(struct device_node *prev);
+extern struct device_node *of_get_cpu_state_node(struct device_node *cpu_node,
+						 int index);
 
 #define for_each_property_of_node(dn, pp) \
 	for (pp = dn->properties; pp != NULL; pp = pp->next)
@@ -765,6 +767,12 @@ static inline struct device_node *of_get_next_cpu_node(struct device_node *prev)
 	return NULL;
 }
 
+static inline struct device_node *of_get_cpu_state_node(struct device_node *cpu_node,
+					int index)
+{
+	return NULL;
+}
+
 static inline int of_n_addr_cells(struct device_node *np)
 {
 	return 0;

commit f1765a1819ff3489db9500c6d464e682e6844a14
Author: Thierry Reding <treding@nvidia.com>
Date:   Fri Jul 26 12:17:44 2019 +0200

    of: Fix typo in kerneldoc
    
    "Findfrom" is not a word. Replace the function synopsis by something
    that makes sense.
    
    Signed-off-by: Thierry Reding <treding@nvidia.com>
    Signed-off-by: Rob Herring <robh@kernel.org>

diff --git a/include/linux/of.h b/include/linux/of.h
index 0cf857012f11..844f89e1b039 100644
--- a/include/linux/of.h
+++ b/include/linux/of.h
@@ -1164,7 +1164,7 @@ static inline int of_property_read_string_index(const struct device_node *np,
 }
 
 /**
- * of_property_read_bool - Findfrom a property
+ * of_property_read_bool - Find a property
  * @np:		device node from which the property value is to be read.
  * @propname:	name of the property to be searched.
  *

commit 440868661f36071886ed360d91de83bd67c73b4f
Author: Phong Tran <tranmanphong@gmail.com>
Date:   Tue Apr 30 21:56:24 2019 +0700

    of: fix clang -Wunsequenced for be32_to_cpu()
    
    Now, make the loop explicit to avoid clang warning.
    
    ./include/linux/of.h:238:37: warning: multiple unsequenced modifications
    to 'cell' [-Wunsequenced]
                    r = (r << 32) | be32_to_cpu(*(cell++));
                                                      ^~
    ./include/linux/byteorder/generic.h:95:21: note: expanded from macro
    'be32_to_cpu'
                        ^
    ./include/uapi/linux/byteorder/little_endian.h:40:59: note: expanded
    from macro '__be32_to_cpu'
                                                              ^
    ./include/uapi/linux/swab.h:118:21: note: expanded from macro '__swab32'
            ___constant_swab32(x) :                 \
                               ^
    ./include/uapi/linux/swab.h:18:12: note: expanded from macro
    '___constant_swab32'
            (((__u32)(x) & (__u32)0x000000ffUL) << 24) |            \
                      ^
    
    Signed-off-by: Phong Tran <tranmanphong@gmail.com>
    Reported-by: Nick Desaulniers <ndesaulniers@google.com>
    Link: https://github.com/ClangBuiltLinux/linux/issues/460
    Suggested-by: David Laight <David.Laight@ACULAB.COM>
    Reviewed-by: Nick Desaulniers <ndesaulniers@google.com>
    Cc: stable@vger.kernel.org
    [robh: fix up whitespace]
    Signed-off-by: Rob Herring <robh@kernel.org>

diff --git a/include/linux/of.h b/include/linux/of.h
index 28797e1a9982..0cf857012f11 100644
--- a/include/linux/of.h
+++ b/include/linux/of.h
@@ -234,8 +234,8 @@ extern struct device_node *of_find_all_nodes(struct device_node *prev);
 static inline u64 of_read_number(const __be32 *cell, int size)
 {
 	u64 r = 0;
-	while (size--)
-		r = (r << 32) | be32_to_cpu(*(cell++));
+	for (; size--; cell++)
+		r = (r << 32) | be32_to_cpu(*cell);
 	return r;
 }
 

commit ecb0abc1d8528015957fbd034be8bfe760363b3b
Author: Chris Packham <chris.packham@alliedtelesis.co.nz>
Date:   Fri Mar 22 13:23:41 2019 +1300

    of: use correct function prototype for of_overlay_fdt_apply()
    
    When CONFIG_OF_OVERLAY is not enabled the fallback stub for
    of_overlay_fdt_apply() does not match the prototype for the case when
    CONFIG_OF_OVERLAY is enabled. Update the stub to use the correct
    function prototype.
    
    Fixes: 39a751a4cb7e ("of: change overlay apply input data from unflattened to FDT")
    Signed-off-by: Chris Packham <chris.packham@alliedtelesis.co.nz>
    Reviewed-by: Frank Rowand <frank.rowand@sony.com>
    Signed-off-by: Rob Herring <robh@kernel.org>

diff --git a/include/linux/of.h b/include/linux/of.h
index e240992e5cb6..28797e1a9982 100644
--- a/include/linux/of.h
+++ b/include/linux/of.h
@@ -1449,7 +1449,8 @@ int of_overlay_notifier_unregister(struct notifier_block *nb);
 
 #else
 
-static inline int of_overlay_fdt_apply(void *overlay_fdt, int *ovcs_id)
+static inline int of_overlay_fdt_apply(void *overlay_fdt, u32 overlay_fdt_size,
+				       int *ovcs_id)
 {
 	return -ENOTSUPP;
 }

commit 8ce5f84157530ffa64b3e0acf00b9261f41c8da8
Author: Rob Herring <robh@kernel.org>
Date:   Tue Dec 11 14:31:05 2018 -0600

    of: Remove struct device_node.type pointer
    
    Now that all users of device_node.type pointer have been removed in
    favor of accessor functions, we can remove it.
    
    Cc: Frank Rowand <frowand.list@gmail.com>
    Cc: devicetree@vger.kernel.org
    Signed-off-by: Rob Herring <robh@kernel.org>

diff --git a/include/linux/of.h b/include/linux/of.h
index fe472e5195a9..e240992e5cb6 100644
--- a/include/linux/of.h
+++ b/include/linux/of.h
@@ -50,7 +50,6 @@ struct of_irq_controller;
 
 struct device_node {
 	const char *name;
-	const char *type;
 	phandle phandle;
 	const char *full_name;
 	struct fwnode_handle fwnode;

commit 030672aea826adf3dee9100ee8ac303b62c8fe7f
Merge: 24dc83635ffe 5801169a2ed2
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Fri Dec 28 20:08:34 2018 -0800

    Merge tag 'devicetree-for-4.21' of git://git.kernel.org/pub/scm/linux/kernel/git/robh/linux
    
    Pull Devicetree updates from Rob Herring:
     "The biggest highlight here is the start of using json-schema for DT
      bindings. Being able to validate bindings has been discussed for years
      with little progress.
    
       - Initial support for DT bindings using json-schema language. This is
         the start of converting DT bindings from free-form text to a
         structured format.
    
       - Reworking of initrd address initialization. This moves to using the
         phys address instead of virt addr in the DT parsing code. This
         rework was motivated by CONFIG_DEV_BLK_INITRD causing unnecessary
         rebuilding of lots of files.
    
       - Fix stale phandle entries in phandle cache
    
       - DT overlay validation improvements. This exposed several memory
         leak bugs which have been fixed.
    
       - Use node name and device_type helper functions in DT code
    
       - Last remaining conversions to using %pOFn printk specifier instead
         of device_node.name directly
    
       - Create new common RTC binding doc and move all trivial RTC devices
         out of trivial-devices.txt.
    
       - New bindings for Freescale MAG3110 magnetometer, Cadence Sierra
         PHY, and Xen shared memory
    
       - Update dtc to upstream version v1.4.7-57-gf267e674d145"
    
    * tag 'devicetree-for-4.21' of git://git.kernel.org/pub/scm/linux/kernel/git/robh/linux: (68 commits)
      of: __of_detach_node() - remove node from phandle cache
      of: of_node_get()/of_node_put() nodes held in phandle cache
      gpio-omap.txt: add reg and interrupts properties
      dt-bindings: mrvl,intc: fix a trivial typo
      dt-bindings: iio: magnetometer: add dt-bindings for freescale mag3110
      dt-bindings: Convert trivial-devices.txt to json-schema
      dt-bindings: arm: mrvl: amend Browstone compatible string
      dt-bindings: arm: Convert Tegra board/soc bindings to json-schema
      dt-bindings: arm: Convert ZTE board/soc bindings to json-schema
      dt-bindings: arm: Add missing Xilinx boards
      dt-bindings: arm: Convert Xilinx board/soc bindings to json-schema
      dt-bindings: arm: Convert VIA board/soc bindings to json-schema
      dt-bindings: arm: Convert ST STi board/soc bindings to json-schema
      dt-bindings: arm: Convert SPEAr board/soc bindings to json-schema
      dt-bindings: arm: Convert CSR SiRF board/soc bindings to json-schema
      dt-bindings: arm: Convert QCom board/soc bindings to json-schema
      dt-bindings: arm: Convert TI nspire board/soc bindings to json-schema
      dt-bindings: arm: Convert TI davinci board/soc bindings to json-schema
      dt-bindings: arm: Convert Calxeda board/soc bindings to json-schema
      dt-bindings: arm: Convert Altera board/soc bindings to json-schema
      ...

commit 0c5eaa7749726b2e4667a5e3668c3eb8516e7440
Author: Rob Herring <robh@kernel.org>
Date:   Fri Nov 16 15:06:55 2018 -0600

    of: Drop full path from full_name for PDT systems
    
    Now that there are no more users of path_component_name for Sparc
    outside of the PDT code and all users of device_node.full_name are
    converted to use "%pOF" printf specifier, we can align Sparc with FDT
    and store just the base node name and unit address in full_name. This
    makes path_component_name redundant, so it can be removed.
    
    As full_name is used by printf specifiers, set it as early as possible.
    
    Cc: Frank Rowand <frowand.list@gmail.com>
    Signed-off-by: Rob Herring <robh@kernel.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>

diff --git a/include/linux/of.h b/include/linux/of.h
index a5aee3c438ad..0fe5bef81a7e 100644
--- a/include/linux/of.h
+++ b/include/linux/of.h
@@ -66,7 +66,6 @@ struct device_node {
 	unsigned long _flags;
 	void	*data;
 #if defined(CONFIG_SPARC)
-	const char *path_component_name;
 	unsigned int unique_id;
 	struct of_irq_controller *irq_trans;
 #endif

commit 6f75118800acf77f8ad6afec61ca1b2349ade371
Author: Frank Rowand <frank.rowand@sony.com>
Date:   Thu Oct 4 20:32:04 2018 -0700

    of: overlay: validate overlay properties #address-cells and #size-cells
    
    If overlay properties #address-cells or #size-cells are already in
    the live devicetree for any given node, then the values in the
    overlay must match the values in the live tree.
    
    If the properties are already in the live tree then there is no
    need to create a changeset entry to add them since they must
    have the same value.  This reduces the memory used by the
    changeset and eliminates a possible memory leak.
    
    Tested-by: Alan Tull <atull@kernel.org>
    Signed-off-by: Frank Rowand <frank.rowand@sony.com>

diff --git a/include/linux/of.h b/include/linux/of.h
index 664cd5573ae2..18ac8921e90c 100644
--- a/include/linux/of.h
+++ b/include/linux/of.h
@@ -990,6 +990,12 @@ static inline int of_map_rid(struct device_node *np, u32 rid,
 #define of_node_cmp(s1, s2)		strcasecmp((s1), (s2))
 #endif
 
+static inline int of_prop_val_eq(struct property *p1, struct property *p2)
+{
+	return p1->length == p2->length &&
+	       !memcmp(p1->value, p2->value, (size_t)p1->length);
+}
+
 #if defined(CONFIG_OF) && defined(CONFIG_NUMA)
 extern int of_node_to_nid(struct device_node *np);
 #else

commit 144552c786925314c1e7cb8f91a71dae1aca8798
Author: Frank Rowand <frank.rowand@sony.com>
Date:   Thu Oct 4 20:24:17 2018 -0700

    of: overlay: add tests to validate kfrees from overlay removal
    
    Add checks:
      - attempted kfree due to refcount reaching zero before overlay
        is removed
      - properties linked to an overlay node when the node is removed
      - node refcount > one during node removal in a changeset destroy,
        if the node was created by the changeset
    
    After applying this patch, several validation warnings will be
    reported from the devicetree unittest during boot due to
    pre-existing devicetree bugs. The warnings will be similar to:
    
      OF: ERROR: of_node_release(), unexpected properties in /testcase-data/overlay-node/test-bus/test-unittest11
      OF: ERROR: memory leak, expected refcount 1 instead of 2, of_node_get()/of_node_put() unbalanced - destroy cset entry: attach overlay node /testcase-data-2/substation@100/
      hvac-medium-2
    
    Tested-by: Alan Tull <atull@kernel.org>
    Signed-off-by: Frank Rowand <frank.rowand@sony.com>

diff --git a/include/linux/of.h b/include/linux/of.h
index a5aee3c438ad..664cd5573ae2 100644
--- a/include/linux/of.h
+++ b/include/linux/of.h
@@ -138,11 +138,16 @@ extern struct device_node *of_aliases;
 extern struct device_node *of_stdout;
 extern raw_spinlock_t devtree_lock;
 
-/* flag descriptions (need to be visible even when !CONFIG_OF) */
-#define OF_DYNAMIC	1 /* node and properties were allocated via kmalloc */
-#define OF_DETACHED	2 /* node has been detached from the device tree */
-#define OF_POPULATED	3 /* device already created for the node */
-#define OF_POPULATED_BUS	4 /* of_platform_populate recursed to children of this node */
+/*
+ * struct device_node flag descriptions
+ * (need to be visible even when !CONFIG_OF)
+ */
+#define OF_DYNAMIC		1 /* (and properties) allocated via kmalloc */
+#define OF_DETACHED		2 /* detached from the device tree */
+#define OF_POPULATED		3 /* device already created */
+#define OF_POPULATED_BUS	4 /* platform bus created for children */
+#define OF_OVERLAY		5 /* allocated for an overlay */
+#define OF_OVERLAY_FREE_CSET	6 /* in overlay cset being freed */
 
 #define OF_BAD_ADDR	((u64)-1)
 

commit 5bd4af34a09a381a0f8b1552684650698937e6b0
Merge: 738b04fba18d 59eaeba63a17
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Mon Oct 29 10:42:20 2018 -0700

    Merge tag 'tty-4.20-rc1' of git://git.kernel.org/pub/scm/linux/kernel/git/gregkh/tty
    
    Pull tty/serial updates from Greg KH:
     "Here is the big tty and serial pull request for 4.20-rc1
    
      Lots of little things here, including a merge from the SPI tree in
      order to keep things simpler for everyone to sync around for one
      platform.
    
      Major stuff is:
    
       - tty buffer clearing after use
    
       - atmel_serial fixes and additions
    
       - xilinx uart driver updates
    
      and of course, lots of tiny fixes and additions to individual serial
      drivers.
    
      All of these have been in linux-next with no reported issues for a
      while"
    
    * tag 'tty-4.20-rc1' of git://git.kernel.org/pub/scm/linux/kernel/git/gregkh/tty: (66 commits)
      of: base: Change logic in of_alias_get_alias_list()
      of: base: Fix english spelling in of_alias_get_alias_list()
      serial: sh-sci: do not warn if DMA transfers are not supported
      serial: uartps: Do not allow use aliases >= MAX_UART_INSTANCES
      tty: check name length in tty_find_polling_driver()
      serial: sh-sci: Add r8a77990 support
      tty: wipe buffer if not echoing data
      tty: wipe buffer.
      serial: fsl_lpuart: Remove the alias node dependence
      TTY: sn_console: Replace spin_is_locked() with spin_trylock()
      Revert "serial:serial_core: Allow use of CTS for PPS line discipline"
      serial: 8250_uniphier: add auto-flow-control support
      serial: 8250_uniphier: flatten probe function
      serial: 8250_uniphier: remove unused "fifo-size" property
      dt-bindings: serial: sh-sci: Document r8a7744 bindings
      serial: uartps: Fix missing unlock on error in cdns_get_id()
      tty/serial: atmel: add ISO7816 support
      tty/serial_core: add ISO7816 infrastructure
      serial:serial_core: Allow use of CTS for PPS line discipline
      serial: docs: Fix filename for serial reference implementation
      ...

commit b27186abb37b7bd19e0ca434f4f425c807dbd708
Merge: 0ef7791e2bfb d061864b89c3
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Fri Oct 26 12:09:58 2018 -0700

    Merge tag 'devicetree-for-4.20' of git://git.kernel.org/pub/scm/linux/kernel/git/robh/linux
    
    Pull Devicetree updates from Rob Herring:
     "A bit bigger than normal as I've been busy this cycle.
    
      There's a few things with dependencies and a few things subsystem
      maintainers didn't pick up, so I'm taking them thru my tree.
    
      The fixes from Johan didn't get into linux-next, but they've been
      waiting for some time now and they are what's left of what subsystem
      maintainers didn't pick up.
    
      Summary:
    
       - Sync dtc with upstream version v1.4.7-14-gc86da84d30e4
    
       - Work to get rid of direct accesses to struct device_node name and
         type pointers in preparation for removing them. New helpers for
         parsing DT cpu nodes and conversions to use the helpers. printk
         conversions to %pOFn for printing DT node names. Most went thru
         subystem trees, so this is the remainder.
    
       - Fixes to DT child node lookups to actually be restricted to child
         nodes instead of treewide.
    
       - Refactoring of dtb targets out of arch code. This makes the support
         more uniform and enables building all dtbs on c6x, microblaze, and
         powerpc.
    
       - Various DT binding updates for Renesas r8a7744 SoC
    
       - Vendor prefixes for Facebook, OLPC
    
       - Restructuring of some ARM binding docs moving some peripheral
         bindings out of board/SoC binding files
    
       - New "secure-chosen" binding for secure world settings on ARM
    
       - Dual licensing of 2 DT IRQ binding headers"
    
    * tag 'devicetree-for-4.20' of git://git.kernel.org/pub/scm/linux/kernel/git/robh/linux: (78 commits)
      ARM: dt: relicense two DT binding IRQ headers
      power: supply: twl4030-charger: fix OF sibling-node lookup
      NFC: nfcmrvl_uart: fix OF child-node lookup
      net: stmmac: dwmac-sun8i: fix OF child-node lookup
      net: bcmgenet: fix OF child-node lookup
      drm/msm: fix OF child-node lookup
      drm/mediatek: fix OF sibling-node lookup
      of: Add missing exports of node name compare functions
      dt-bindings: Add OLPC vendor prefix
      dt-bindings: misc: bk4: Add device tree binding for Liebherr's BK4 SPI bus
      dt-bindings: thermal: samsung: Add SPDX license identifier
      dt-bindings: clock: samsung: Add SPDX license identifiers
      dt-bindings: timer: ostm: Add R7S9210 support
      dt-bindings: phy: rcar-gen2: Add r8a7744 support
      dt-bindings: can: rcar_can: Add r8a7744 support
      dt-bindings: timer: renesas, cmt: Document r8a7744 CMT support
      dt-bindings: watchdog: renesas-wdt: Document r8a7744 support
      dt-bindings: thermal: rcar: Add device tree support for r8a7744
      Documentation: dt: Add binding for /secure-chosen/stdout-path
      dt-bindings: arm: zte: Move sysctrl bindings to their own doc
      ...

commit 5d5a0ab1a7918fce5ca5c0fb1871a3e2000f85de
Author: Rob Herring <robh@kernel.org>
Date:   Mon Oct 1 10:54:51 2018 -0500

    of: Fix property name in of_node_get_device_type
    
    Commit 0413bedabc88 ("of: Add device_type access helper functions")
    added a new helper not yet used in preparation for some treewide clean
    up of accesses to 'device_type' properties. Unfortunately, there's an
    error and 'type' was used for the property name. Fix this.
    
    Fixes: 0413bedabc88 ("of: Add device_type access helper functions")
    Cc: Frank Rowand <frowand.list@gmail.com>
    Signed-off-by: Rob Herring <robh@kernel.org>

diff --git a/include/linux/of.h b/include/linux/of.h
index f581531d797e..04cef4490efc 100644
--- a/include/linux/of.h
+++ b/include/linux/of.h
@@ -991,7 +991,7 @@ static inline struct device_node *of_find_matching_node(
 
 static inline const char *of_node_get_device_type(const struct device_node *np)
 {
-	return of_get_property(np, "type", NULL);
+	return of_get_property(np, "device_type", NULL);
 }
 
 static inline bool of_node_is_type(const struct device_node *np, const char *type)

commit 389d0a8a7af8ff8bb6301382333c7e8f748d7cd6
Merge: da08d8cb8cfc 4c29e5934f6c
Author: Rob Herring <robh@kernel.org>
Date:   Fri Sep 28 15:48:39 2018 -0500

    Merge branch 'dt/cpu-type-rework' into dt/next

commit f1f207e43b8a49ac2ee3c36a64de1f84651c6079
Author: Rob Herring <robh@kernel.org>
Date:   Wed Aug 22 15:04:40 2018 -0500

    of: Add cpu node iterator for_each_of_cpu_node()
    
    Iterating thru cpu nodes is a common pattern. Create a common iterator
    which can find child nodes either by node name or device_type == cpu.
    Using the former will allow for eventually dropping device_type
    properties which are deprecated for FDT.
    
    Cc: Frank Rowand <frowand.list@gmail.com>
    Reviewed-by: Geert Uytterhoeven <geert+renesas@glider.be>
    Signed-off-by: Rob Herring <robh@kernel.org>

diff --git a/include/linux/of.h b/include/linux/of.h
index 99b0ebf49632..1aca0dbd35df 100644
--- a/include/linux/of.h
+++ b/include/linux/of.h
@@ -353,6 +353,8 @@ extern const void *of_get_property(const struct device_node *node,
 				const char *name,
 				int *lenp);
 extern struct device_node *of_get_cpu_node(int cpu, unsigned int *thread);
+extern struct device_node *of_get_next_cpu_node(struct device_node *prev);
+
 #define for_each_property_of_node(dn, pp) \
 	for (pp = dn->properties; pp != NULL; pp = pp->next)
 
@@ -754,6 +756,11 @@ static inline struct device_node *of_get_cpu_node(int cpu,
 	return NULL;
 }
 
+static inline struct device_node *of_get_next_cpu_node(struct device_node *prev)
+{
+	return NULL;
+}
+
 static inline int of_n_addr_cells(struct device_node *np)
 {
 	return 0;
@@ -1217,6 +1224,10 @@ static inline int of_property_read_s32(const struct device_node *np,
 	for (child = of_get_next_available_child(parent, NULL); child != NULL; \
 	     child = of_get_next_available_child(parent, child))
 
+#define for_each_of_cpu_node(cpu) \
+	for (cpu = of_get_next_cpu_node(NULL); cpu != NULL; \
+	     cpu = of_get_next_cpu_node(cpu))
+
 #define for_each_node_with_property(dn, prop_name) \
 	for (dn = of_find_node_with_property(NULL, prop_name); dn; \
 	     dn = of_find_node_with_property(dn, prop_name))

commit 2a6db719c92dbfe43c9eea7e4358ea2e51b5004e
Author: Nipun Gupta <nipun.gupta@nxp.com>
Date:   Mon Sep 10 19:19:16 2018 +0530

    iommu/of: make of_pci_map_rid() available for other devices too
    
    iommu-map property is also used by devices with fsl-mc. This
    patch moves the of_pci_map_rid to generic location, so that it
    can be used by other busses too.
    
    'of_pci_map_rid' is renamed here to 'of_map_rid' and there is no
    functional change done in the API.
    
    Signed-off-by: Nipun Gupta <nipun.gupta@nxp.com>
    Reviewed-by: Rob Herring <robh@kernel.org>
    Reviewed-by: Robin Murphy <robin.murphy@arm.com>
    Acked-by: Bjorn Helgaas <bhelgaas@google.com>
    Signed-off-by: Joerg Roedel <jroedel@suse.de>

diff --git a/include/linux/of.h b/include/linux/of.h
index 99b0ebf49632..bf577ca3c8e7 100644
--- a/include/linux/of.h
+++ b/include/linux/of.h
@@ -550,6 +550,10 @@ bool of_console_check(struct device_node *dn, char *name, int index);
 
 extern int of_cpu_node_to_id(struct device_node *np);
 
+int of_map_rid(struct device_node *np, u32 rid,
+	       const char *map_name, const char *map_mask_name,
+	       struct device_node **target, u32 *id_out);
+
 #else /* CONFIG_OF */
 
 static inline void of_core_init(void)
@@ -952,6 +956,13 @@ static inline int of_cpu_node_to_id(struct device_node *np)
 	return -ENODEV;
 }
 
+static inline int of_map_rid(struct device_node *np, u32 rid,
+			     const char *map_name, const char *map_mask_name,
+			     struct device_node **target, u32 *id_out)
+{
+	return -EINVAL;
+}
+
 #define of_match_ptr(_ptr)	NULL
 #define of_match_node(_matches, _node)	NULL
 #endif /* CONFIG_OF */

commit b1078c355d76769b5ddefc67d143fbd9b6e52c05
Author: Michal Simek <michal.simek@xilinx.com>
Date:   Thu Sep 20 13:41:52 2018 +0200

    of: base: Introduce of_alias_get_alias_list() to check alias IDs
    
    The function travels the lookup table to record alias ids for the given
    device match structures and alias stem.
    This function will be used by serial drivers to check if requested alias
    is allocated or free to use.
    
    Signed-off-by: Michal Simek <michal.simek@xilinx.com>
    Reviewed-by: Rob Herring <robh@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/include/linux/of.h b/include/linux/of.h
index 99b0ebf49632..d51457b40725 100644
--- a/include/linux/of.h
+++ b/include/linux/of.h
@@ -392,6 +392,9 @@ extern int of_phandle_iterator_args(struct of_phandle_iterator *it,
 extern void of_alias_scan(void * (*dt_alloc)(u64 size, u64 align));
 extern int of_alias_get_id(struct device_node *np, const char *stem);
 extern int of_alias_get_highest_id(const char *stem);
+extern int of_alias_get_alias_list(const struct of_device_id *matches,
+				   const char *stem, unsigned long *bitmap,
+				   unsigned int nbits);
 
 extern int of_machine_is_compatible(const char *compat);
 
@@ -893,6 +896,13 @@ static inline int of_alias_get_highest_id(const char *stem)
 	return -ENOSYS;
 }
 
+static inline int of_alias_get_alias_list(const struct of_device_id *matches,
+					  const char *stem, unsigned long *bitmap,
+					  unsigned int nbits)
+{
+	return -ENOSYS;
+}
+
 static inline int of_machine_is_compatible(const char *compat)
 {
 	return 0;

commit 00b7d1cf46676ad5e6338e80dc6230e1b6e71b86
Author: Rob Herring <robh@kernel.org>
Date:   Wed Aug 29 17:21:45 2018 -0500

    of: make default address and size cells sizes private
    
    Only some old OpenFirmware implementations rely on default sizes. Any
    FDT and modern implementation should have explicit properties. Make the
    OF_ROOT_NODE_*_CELLS_DEFAULT defines private so we don't get any outside
    users.
    
    This also gets us one step closer to removing the asm/prom.h dependency on
    Sparc.
    
    Cc: "David S. Miller" <davem@davemloft.net>
    Cc: Frank Rowand <frowand.list@gmail.com>
    Cc: sparclinux@vger.kernel.org
    Signed-off-by: Rob Herring <robh@kernel.org>

diff --git a/include/linux/of.h b/include/linux/of.h
index 99b0ebf49632..2141490b368f 100644
--- a/include/linux/of.h
+++ b/include/linux/of.h
@@ -247,12 +247,6 @@ static inline unsigned long of_read_ulong(const __be32 *cell, int size)
 #include <asm/prom.h>
 #endif
 
-/* Default #address and #size cells.  Allow arch asm/prom.h to override */
-#if !defined(OF_ROOT_NODE_ADDR_CELLS_DEFAULT)
-#define OF_ROOT_NODE_ADDR_CELLS_DEFAULT 1
-#define OF_ROOT_NODE_SIZE_CELLS_DEFAULT 1
-#endif
-
 #define OF_IS_DYNAMIC(x) test_bit(OF_DYNAMIC, &x->_flags)
 #define OF_MARK_DYNAMIC(x) set_bit(OF_DYNAMIC, &x->_flags)
 

commit 0413bedabc886c3a56804d1c80a58e99077b1d91
Author: Rob Herring <robh@kernel.org>
Date:   Tue Aug 28 15:10:48 2018 -0500

    of: Add device_type access helper functions
    
    In preparation to remove direct access to device_node.type, add
    of_node_is_type() and of_node_get_device_type() helpers to check and
    retrieve the device type.
    
    Cc: Frank Rowand <frowand.list@gmail.com>
    Signed-off-by: Rob Herring <robh@kernel.org>

diff --git a/include/linux/of.h b/include/linux/of.h
index 688c52dd7b3e..99b0ebf49632 100644
--- a/include/linux/of.h
+++ b/include/linux/of.h
@@ -988,6 +988,18 @@ static inline struct device_node *of_find_matching_node(
 	return of_find_matching_node_and_match(from, matches, NULL);
 }
 
+static inline const char *of_node_get_device_type(const struct device_node *np)
+{
+	return of_get_property(np, "type", NULL);
+}
+
+static inline bool of_node_is_type(const struct device_node *np, const char *type)
+{
+	const char *match = of_node_get_device_type(np);
+
+	return np && match && type && !strcmp(match, type);
+}
+
 /**
  * of_property_count_u8_elems - Count the number of u8 elements in a property
  *

commit f42b0e18f2e5cf34f73ef1b6327b49040b307a33
Author: Rob Herring <robh@kernel.org>
Date:   Mon Aug 27 07:50:47 2018 -0500

    of: add node name compare helper functions
    
    In preparation to remove device_node.name pointer, add helper functions
    for node name comparisons which are a common pattern throughout the kernel.
    
    Cc: Frank Rowand <frowand.list@gmail.com>
    Signed-off-by: Rob Herring <robh@kernel.org>

diff --git a/include/linux/of.h b/include/linux/of.h
index b99a1a8c2952..688c52dd7b3e 100644
--- a/include/linux/of.h
+++ b/include/linux/of.h
@@ -256,6 +256,9 @@ static inline unsigned long of_read_ulong(const __be32 *cell, int size)
 #define OF_IS_DYNAMIC(x) test_bit(OF_DYNAMIC, &x->_flags)
 #define OF_MARK_DYNAMIC(x) set_bit(OF_DYNAMIC, &x->_flags)
 
+extern bool of_node_name_eq(const struct device_node *np, const char *name);
+extern bool of_node_name_prefix(const struct device_node *np, const char *prefix);
+
 static inline const char *of_node_full_name(const struct device_node *np)
 {
 	return np ? np->full_name : "<no-node>";
@@ -563,6 +566,16 @@ static inline struct device_node *to_of_node(const struct fwnode_handle *fwnode)
 	return NULL;
 }
 
+static inline bool of_node_name_eq(const struct device_node *np, const char *name)
+{
+	return false;
+}
+
+static inline bool of_node_name_prefix(const struct device_node *np, const char *prefix)
+{
+	return false;
+}
+
 static inline const char* of_node_full_name(const struct device_node *np)
 {
 	return "<no-node>";

commit 36156f9241cb0f9e37d998052873ca7501ad4b36
Author: Johan Hovold <johan@kernel.org>
Date:   Mon Aug 27 10:21:45 2018 +0200

    of: add helper to lookup compatible child node
    
    Add of_get_compatible_child() helper that can be used to lookup
    compatible child nodes.
    
    Several drivers currently use of_find_compatible_node() to lookup child
    nodes while failing to notice that the of_find_ functions search the
    entire tree depth-first (from a given start node) and therefore can
    match unrelated nodes. The fact that these functions also drop a
    reference to the node they start searching from (e.g. the parent node)
    is typically also overlooked, something which can lead to use-after-free
    bugs.
    
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Signed-off-by: Rob Herring <robh@kernel.org>

diff --git a/include/linux/of.h b/include/linux/of.h
index 4d25e4f952d9..b99a1a8c2952 100644
--- a/include/linux/of.h
+++ b/include/linux/of.h
@@ -290,6 +290,8 @@ extern struct device_node *of_get_next_child(const struct device_node *node,
 extern struct device_node *of_get_next_available_child(
 	const struct device_node *node, struct device_node *prev);
 
+extern struct device_node *of_get_compatible_child(const struct device_node *parent,
+					const char *compatible);
 extern struct device_node *of_get_child_by_name(const struct device_node *node,
 					const char *name);
 
@@ -632,6 +634,12 @@ static inline bool of_have_populated_dt(void)
 	return false;
 }
 
+static inline struct device_node *of_get_compatible_child(const struct device_node *parent,
+					const char *compatible)
+{
+	return NULL;
+}
+
 static inline struct device_node *of_get_child_by_name(
 					const struct device_node *node,
 					const char *name)

commit b46c78661c42cb8b07eb213104c79cbab8ea7e0d
Merge: c11e6f0f04db e547c0031697
Author: Rob Herring <robh@kernel.org>
Date:   Mon Mar 5 13:29:46 2018 -0600

    Merge tag 'overlay_apply_fdt_v7-for-4.17' of git://git.kernel.org/pub/scm/linux/kernel/git/frowand/linux into dt/next
    
    DT overlay applying rework from Frank Rowand:
    "Move duplicating and unflattening of an overlay flattened devicetree
    (FDT) into the overlay application code.  To accomplish this,
    of_overlay_apply() is replaced by of_overlay_fdt_apply()."

commit 39a751a4cb7e4798f0ce1169ec92de4a1aae39e3
Author: Frank Rowand <frank.rowand@sony.com>
Date:   Mon Feb 12 00:19:42 2018 -0800

    of: change overlay apply input data from unflattened to FDT
    
    Move duplicating and unflattening of an overlay flattened devicetree
    (FDT) into the overlay application code.  To accomplish this,
    of_overlay_apply() is replaced by of_overlay_fdt_apply().
    
    The copy of the FDT (aka "duplicate FDT") now belongs to devicetree
    code, which is thus responsible for freeing the duplicate FDT.  The
    caller of of_overlay_fdt_apply() remains responsible for freeing the
    original FDT.
    
    The unflattened devicetree now belongs to devicetree code, which is
    thus responsible for freeing the unflattened devicetree.
    
    These ownership changes prevent early freeing of the duplicated FDT
    or the unflattened devicetree, which could result in use after free
    errors.
    
    of_overlay_fdt_apply() is a private function for the anticipated
    overlay loader.
    
    Update unittest.c to use of_overlay_fdt_apply() instead of
    of_overlay_apply().
    
    Move overlay fragments from artificial locations in
    drivers/of/unittest-data/tests-overlay.dtsi into one devicetree
    source file per overlay.  This led to changes in
    drivers/of/unitest-data/Makefile and drivers/of/unitest.c.
    
      - Add overlay directives to the overlay devicetree source files so
        that dtc will compile them as true overlays into one FDT data
        chunk per overlay.
    
      - Set CFLAGS for drivers/of/unittest-data/testcases.dts so that
        symbols will be generated for overlay resolution of overlays
        that are no longer artificially contained in testcases.dts
    
      - Unflatten and apply each unittest overlay FDT using
        of_overlay_fdt_apply().
    
      - Enable the of_resolve_phandles() check for whether the unflattened
        overlay is detached.  This check was previously disabled because the
        overlays from tests-overlay.dtsi were not unflattened into detached
        trees.
    
      - Other changes to unittest.c infrastructure to manage multiple test
        FDTs built into the kernel image (access by name instead of
        arbitrary number).
    
      - of_unittest_overlay_high_level(): previously unused code to add
        properties from the overlay_base devicetree to the live tree
        was triggered by the restructuring of tests-overlay.dtsi and thus
        testcases.dts.  This exposed two bugs: (1) the need to dup a
        property before adding it, and (2) property 'name' is
        auto-generated in the unflatten code and thus will be a duplicate
        in the __symbols__ node - do not treat this duplicate as an error.
    
    Signed-off-by: Frank Rowand <frank.rowand@sony.com>

diff --git a/include/linux/of.h b/include/linux/of.h
index da1ee95241c1..ebf22dd0860c 100644
--- a/include/linux/of.h
+++ b/include/linux/of.h
@@ -1359,8 +1359,8 @@ struct of_overlay_notify_data {
 
 #ifdef CONFIG_OF_OVERLAY
 
-/* ID based overlays; the API for external users */
-int of_overlay_apply(struct device_node *tree, int *ovcs_id);
+int of_overlay_fdt_apply(const void *overlay_fdt, u32 overlay_fdt_size,
+			 int *ovcs_id);
 int of_overlay_remove(int *ovcs_id);
 int of_overlay_remove_all(void);
 
@@ -1369,7 +1369,7 @@ int of_overlay_notifier_unregister(struct notifier_block *nb);
 
 #else
 
-static inline int of_overlay_apply(struct device_node *tree, int *ovcs_id)
+static inline int of_overlay_fdt_apply(void *overlay_fdt, int *ovcs_id)
 {
 	return -ENOTSUPP;
 }

commit bd6f2fd5a1d52198468c5cdc3c2472362dff5aaa
Author: Stephen Boyd <stephen.boyd@linaro.org>
Date:   Tue Jan 30 18:36:16 2018 -0800

    of: Support parsing phandle argument lists through a nexus node
    
    Platforms like 96boards have a standardized connector/expansion
    slot that exposes signals like GPIOs to expansion boards in an
    SoC agnostic way. We'd like the DT overlays for the expansion
    boards to be written once without knowledge of the SoC on the
    other side of the connector. This avoids the unscalable
    combinatorial explosion of a different DT overlay for each
    expansion board and SoC pair.
    
    We need a way to describe the GPIOs routed through the connector
    in an SoC agnostic way. Let's introduce nexus property parsing
    into the OF core to do this. This is largely based on the
    interrupt nexus support we already have. This allows us to remap
    a phandle list in a consumer node (e.g. reset-gpios) through a
    connector in a generic way (e.g. via gpio-map). Do this in a
    generic routine so that we can remap any sort of variable length
    phandle list.
    
    Taking GPIOs as an example, the connector would be a GPIO nexus,
    supporting the remapping of a GPIO specifier space to multiple
    GPIO providers on the SoC. DT would look as shown below, where
    'soc_gpio1' and 'soc_gpio2' are inside the SoC, 'connector' is an
    expansion port where boards can be plugged in, and
    'expansion_device' is a device on the expansion board.
    
            soc {
                    soc_gpio1: gpio-controller1 {
                            #gpio-cells = <2>;
                    };
    
                    soc_gpio2: gpio-controller2 {
                            #gpio-cells = <2>;
                    };
            };
    
            connector: connector {
                    #gpio-cells = <2>;
                    gpio-map = <0 0 &soc_gpio1 1 0>,
                               <1 0 &soc_gpio2 4 0>,
                               <2 0 &soc_gpio1 3 0>,
                               <3 0 &soc_gpio2 2 0>;
                    gpio-map-mask = <0xf 0x0>;
                    gpio-map-pass-thru = <0x0 0x1>
            };
    
            expansion_device {
                    reset-gpios = <&connector 2 GPIO_ACTIVE_LOW>;
            };
    
    The GPIO core would use of_parse_phandle_with_args_map() instead
    of of_parse_phandle_with_args() and arrive at the same type of
    result, a phandle and argument list. The difference is that the
    phandle and arguments will be remapped through the nexus node to
    the underlying SoC GPIO controller node. In the example above,
    we would remap 'reset-gpios' from <&connector 2 GPIO_ACTIVE_LOW>
    to <&soc_gpio1 3 GPIO_ACTIVE_LOW>.
    
    Cc: Pantelis Antoniou <pantelis.antoniou@konsulko.com>
    Cc: Linus Walleij <linus.walleij@linaro.org>
    Cc: Mark Brown <broonie@kernel.org>
    Signed-off-by: Stephen Boyd <stephen.boyd@linaro.org>
    Signed-off-by: Rob Herring <robh@kernel.org>

diff --git a/include/linux/of.h b/include/linux/of.h
index da1ee95241c1..7258bbc85e4e 100644
--- a/include/linux/of.h
+++ b/include/linux/of.h
@@ -363,6 +363,9 @@ extern struct device_node *of_parse_phandle(const struct device_node *np,
 extern int of_parse_phandle_with_args(const struct device_node *np,
 	const char *list_name, const char *cells_name, int index,
 	struct of_phandle_args *out_args);
+extern int of_parse_phandle_with_args_map(const struct device_node *np,
+	const char *list_name, const char *stem_name, int index,
+	struct of_phandle_args *out_args);
 extern int of_parse_phandle_with_fixed_args(const struct device_node *np,
 	const char *list_name, int cells_count, int index,
 	struct of_phandle_args *out_args);
@@ -815,6 +818,15 @@ static inline int of_parse_phandle_with_args(const struct device_node *np,
 	return -ENOSYS;
 }
 
+static inline int of_parse_phandle_with_args_map(const struct device_node *np,
+						 const char *list_name,
+						 const char *stem_name,
+						 int index,
+						 struct of_phandle_args *out_args)
+{
+	return -ENOSYS;
+}
+
 static inline int of_parse_phandle_with_fixed_args(const struct device_node *np,
 	const char *list_name, int cells_count, int index,
 	struct of_phandle_args *out_args)

commit 2bed26606b61a7b20fc1cc54df53c48c06cd9aa8
Merge: eea43ed86f38 3a6fbcb2e2e4
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Thu Feb 1 10:57:45 2018 -0800

    Merge tag 'devicetree-for-4.16' of git://git.kernel.org/pub/scm/linux/kernel/git/robh/linux
    
    Pull DeviceTree updates from Rob Herring:
    
     - Convert to use memblock_virt_alloc in DT code which supports
       bootmem arches. With this we can remove the arch specific
       early_init_dt_alloc_memory_arch() functions.
    
     - Enable running the DT unittests on UML
    
     - Use SPDX license tags on DT files
    
     - Fix early FDT kconfig ifdef logic
    
     - Clean-up unittest Makefile
    
     - Fix function comment for of_irq_parse_raw
    
     - Add missing documentation for linux,initrd-{start,end} properties
    
     - Clean-up of binding examples using uppercase hex
    
     - Add trivial devices W83773G and Infineon TLV493D-A1B6
    
     - Add missing STM32 SoC bindings
    
     - Various small binding doc fixes
    
    * tag 'devicetree-for-4.16' of git://git.kernel.org/pub/scm/linux/kernel/git/robh/linux: (23 commits)
      xtensa: remove arch specific early DT functions
      x86: remove arch specific early_init_dt_alloc_memory_arch
      nios2: remove arch specific early_init_dt_alloc_memory_arch
      mips: remove arch specific early_init_dt_alloc_memory_arch
      metag: remove arch specific early DT functions
      cris: remove arch specific early DT functions
      libfdt: remove unnecessary include directive from <linux/libfdt.h>
      of: unittest: refactor Makefile
      of/fdt: use memblock_virt_alloc for early alloc
      of: Use SPDX license tag for DT files
      of/fdt: Fix #ifdef dependency of early flattree declarations
      dt-bindings: h8300 clocksource: correct spelling of pulse
      dt-bindings: imx6q-pcie: Add required property for i.MX6SX
      mmc: Don't reference Linux-specific OF_GPIO_ACTIVE_LOW flag in DT binding
      dt-bindings: Use lower case hex in unit-addresses
      dt-bindings: display: panel: Fix compatible string for Toshiba LT089AC29000
      dt-bindings: Add Infineon TLV493D-A1B6
      dt-bindings: mailbox: ti,message-manager: Fix interrupt name error
      dt-bindings: chosen: Document linux,initrd-{start,end}
      dt-bindings: arm: document supported STM32 SoC family
      ...

commit af6074fc9aa4b29517375634189ada1869eea598
Author: Rob Herring <robh@kernel.org>
Date:   Wed Dec 27 12:55:14 2017 -0600

    of: Use SPDX license tag for DT files
    
    Convert remaining DT files to use SPDX-License-Identifier tags.
    
    Cc: Benjamin Herrenschmidt <benh@kernel.crashing.org>
    Cc: Guennadi Liakhovetski <g.liakhovetski@gmx.de>
    Cc: Paul Mackerras <paulus@samba.org>
    Cc: Pantelis Antoniou <pantelis.antoniou@konsulko.com>
    Reviewed-by: Frank Rowand <frank.rowand@sony.com>
    Reviewed-by: Philippe Ombredanne <pombredanne@nexb.com>
    Signed-off-by: Rob Herring <robh@kernel.org>

diff --git a/include/linux/of.h b/include/linux/of.h
index d3dea1d1e3a9..d4abee0e8fc4 100644
--- a/include/linux/of.h
+++ b/include/linux/of.h
@@ -1,3 +1,4 @@
+/* SPDX-License-Identifier: GPL-2.0+ */
 #ifndef _LINUX_OF_H
 #define _LINUX_OF_H
 /*
@@ -9,11 +10,6 @@
  * Updates for PPC64 by Peter Bergner & David Engebretsen, IBM Corp.
  * Updates for SPARC64 by David S. Miller
  * Derived from PowerPC and Sparc prom.h files by Stephen Rothwell, IBM Corp.
- *
- * This program is free software; you can redistribute it and/or
- * modify it under the terms of the GNU General Public License
- * as published by the Free Software Foundation; either version
- * 2 of the License, or (at your option) any later version.
  */
 #include <linux/types.h>
 #include <linux/bitops.h>

commit a0e71cd9b1a0195f96500b2268759873ff8ff819
Author: Suzuki K Poulose <suzuki.poulose@arm.com>
Date:   Tue Jan 2 11:25:27 2018 +0000

    of: Add helper for mapping device node to logical CPU number
    
    Add a helper to map a device node to a logical CPU number to avoid
    duplication. Currently this is open coded in different places (e.g
    gic-v3, coresight). The helper tries to map device node to a "possible"
    logical CPU id, which may not be online yet. It is the responsibility
    of the user to make sure that the CPU is online. The helper uses
    of_cpu_device_node_get() to retrieve the device node for a given CPU
    (which uses per_cpu data if available else falls back to slower
    of_get_cpu_node()).
    
    Cc: devicetree@vger.kernel.org
    Cc: Frank Rowand <frowand.list@gmail.com>
    Cc: Mark Rutland <mark.rutland@arm.com>
    Cc: Sudeep Holla <sudeep.holla@arm.com>
    Reviewed-by: Marc Zyngier <marc.zyngier@arm.com>
    Reviewed-by: Rob Herring <robh@kernel.org>
    Signed-off-by: Suzuki K Poulose <suzuki.poulose@arm.com>
    Signed-off-by: Will Deacon <will.deacon@arm.com>

diff --git a/include/linux/of.h b/include/linux/of.h
index d3dea1d1e3a9..173102dafb07 100644
--- a/include/linux/of.h
+++ b/include/linux/of.h
@@ -544,6 +544,8 @@ const char *of_prop_next_string(struct property *prop, const char *cur);
 
 bool of_console_check(struct device_node *dn, char *name, int index);
 
+extern int of_cpu_node_to_id(struct device_node *np);
+
 #else /* CONFIG_OF */
 
 static inline void of_core_init(void)
@@ -916,6 +918,11 @@ static inline void of_property_clear_flag(struct property *p, unsigned long flag
 {
 }
 
+static inline int of_cpu_node_to_id(struct device_node *np)
+{
+	return -ENODEV;
+}
+
 #define of_match_ptr(_ptr)	NULL
 #define of_match_node(_matches, _node)	NULL
 #endif /* CONFIG_OF */

commit 5bbcc0f595fadb4cac0eddc4401035ec0bd95b09
Merge: 892204e06cb9 50895b9de1d3
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Wed Nov 15 11:56:19 2017 -0800

    Merge git://git.kernel.org/pub/scm/linux/kernel/git/davem/net-next
    
    Pull networking updates from David Miller:
     "Highlights:
    
       1) Maintain the TCP retransmit queue using an rbtree, with 1GB
          windows at 100Gb this really has become necessary. From Eric
          Dumazet.
    
       2) Multi-program support for cgroup+bpf, from Alexei Starovoitov.
    
       3) Perform broadcast flooding in hardware in mv88e6xxx, from Andrew
          Lunn.
    
       4) Add meter action support to openvswitch, from Andy Zhou.
    
       5) Add a data meta pointer for BPF accessible packets, from Daniel
          Borkmann.
    
       6) Namespace-ify almost all TCP sysctl knobs, from Eric Dumazet.
    
       7) Turn on Broadcom Tags in b53 driver, from Florian Fainelli.
    
       8) More work to move the RTNL mutex down, from Florian Westphal.
    
       9) Add 'bpftool' utility, to help with bpf program introspection.
          From Jakub Kicinski.
    
      10) Add new 'cpumap' type for XDP_REDIRECT action, from Jesper
          Dangaard Brouer.
    
      11) Support 'blocks' of transformations in the packet scheduler which
          can span multiple network devices, from Jiri Pirko.
    
      12) TC flower offload support in cxgb4, from Kumar Sanghvi.
    
      13) Priority based stream scheduler for SCTP, from Marcelo Ricardo
          Leitner.
    
      14) Thunderbolt networking driver, from Amir Levy and Mika Westerberg.
    
      15) Add RED qdisc offloadability, and use it in mlxsw driver. From
          Nogah Frankel.
    
      16) eBPF based device controller for cgroup v2, from Roman Gushchin.
    
      17) Add some fundamental tracepoints for TCP, from Song Liu.
    
      18) Remove garbage collection from ipv6 route layer, this is a
          significant accomplishment. From Wei Wang.
    
      19) Add multicast route offload support to mlxsw, from Yotam Gigi"
    
    * git://git.kernel.org/pub/scm/linux/kernel/git/davem/net-next: (2177 commits)
      tcp: highest_sack fix
      geneve: fix fill_info when link down
      bpf: fix lockdep splat
      net: cdc_ncm: GetNtbFormat endian fix
      openvswitch: meter: fix NULL pointer dereference in ovs_meter_cmd_reply_start
      netem: remove unnecessary 64 bit modulus
      netem: use 64 bit divide by rate
      tcp: Namespace-ify sysctl_tcp_default_congestion_control
      net: Protect iterations over net::fib_notifier_ops in fib_seq_sum()
      ipv6: set all.accept_dad to 0 by default
      uapi: fix linux/tls.h userspace compilation error
      usbnet: ipheth: prevent TX queue timeouts when device not ready
      vhost_net: conditionally enable tx polling
      uapi: fix linux/rxrpc.h userspace compilation errors
      net: stmmac: fix LPI transitioning for dwmac4
      atm: horizon: Fix irq release error
      net-sysfs: trigger netlink notification on ifalias change via sysfs
      openvswitch: Using kfree_rcu() to simplify the code
      openvswitch: Make local function ovs_nsh_key_attr_size() static
      openvswitch: Fix return value check in ovs_meter_cmd_features()
      ...

commit 37cb8e1f8e10c6e9bd2a1b95cdda0620a21b0551
Merge: 6a77d86655a1 aa25e446ce76
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Tue Nov 14 18:25:40 2017 -0800

    Merge tag 'devicetree-for-4.15' of git://git.kernel.org/pub/scm/linux/kernel/git/robh/linux
    
    Pull DeviceTree updates from Rob Herring:
     "A bigger diffstat than usual with the kbuild changes and a tree wide
      fix in the binding documentation.
    
      Summary:
    
       - kbuild cleanups and improvements for dtbs
    
       - Code clean-up of overlay code and fixing for some long standing
         memory leak and race condition in applying overlays
    
       - Improvements to DT memory usage making sysfs/kobjects optional and
         skipping unflattening of disabled nodes. This is part of kernel
         tinification efforts.
    
       - Final piece of removing storing the full path for every DT node.
         The prerequisite conversion of printk's to use device_node format
         specifier happened in 4.14.
    
       - Sync with current upstream dtc. This brings additional checks to
         dtb compiling.
    
       - Binding doc tree wide removal of leading 0s from examples
    
       - RTC binding documentation adding missing devices and some
         consolidation of duplicated bindings
    
       - Vendor prefix documentation for nutsboard, Silicon Storage
         Technology, shimafuji, Tecon Microprocessor Technologies, DH
         electronics GmbH, Opal Kelly, and Next Thing"
    
    * tag 'devicetree-for-4.15' of git://git.kernel.org/pub/scm/linux/kernel/git/robh/linux: (55 commits)
      dt-bindings: usb: add #phy-cells to usb-nop-xceiv
      dt-bindings: Remove leading zeros from bindings notation
      kbuild: handle dtb-y and CONFIG_OF_ALL_DTBS natively in Makefile.lib
      MIPS: dts: remove bogus bcm96358nb4ser.dtb from dtb-y entry
      kbuild: clean up *.dtb and *.dtb.S patterns from top-level Makefile
      .gitignore: move *.dtb and *.dtb.S patterns to the top-level .gitignore
      .gitignore: sort normal pattern rules alphabetically
      dt-bindings: add vendor prefix for Next Thing Co.
      scripts/dtc: Update to upstream version v1.4.5-6-gc1e55a5513e9
      of: dynamic: fix memory leak related to properties of __of_node_dup
      of: overlay: make pr_err() string unique
      of: overlay: pr_err from return NOTIFY_OK to overlay apply/remove
      of: overlay: remove unneeded check for NULL kbasename()
      of: overlay: remove a dependency on device node full_name
      of: overlay: simplify applying symbols from an overlay
      of: overlay: avoid race condition between applying multiple overlays
      of: overlay: loosen overly strict phandle clash check
      of: overlay: expand check of whether overlay changeset can be removed
      of: overlay: detect cases where device tree may become corrupt
      of: overlay: minor restructuring
      ...

commit 96c623e51f1c40bf524decc48c6fac7ce5dd41f7
Author: Arnd Bergmann <arnd@arndb.de>
Date:   Mon Nov 6 14:26:10 2017 +0100

    of: add of_property_read_variable_* dummy helpers
    
    Commit a67e9472da42 ("of: Add array read functions with min/max size
    limits") added a new interface for reading variable-length arrays from
    DT properties. One user was added in dsa recently and this causes a
    build error because that code can be built with CONFIG_OF disabled:
    
    net/dsa/dsa2.c: In function 'dsa_switch_parse_member_of':
    net/dsa/dsa2.c:678:7: error: implicit declaration of function 'of_property_read_variable_u32_array'; did you mean 'of_property_read_u32_array'? [-Werror=implicit-function-declaration]
    
    This adds a dummy functions for of_property_read_variable_u32_array()
    and a few others that had been missing here. I decided to move
    of_property_read_string() and of_property_read_string_helper() in the
    process to make it easier to compare the two sets of function prototypes
    to make sure they match.
    
    Fixes: 975e6e32215e ("net: dsa: rework switch parsing")
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>
    Acked-by: Rob Herring <robh@kernel.org>
    Reviewed-by: Vivien Didelot <vivien.didelot@savoirfairelinux.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

diff --git a/include/linux/of.h b/include/linux/of.h
index b240ed69dc96..b32d418d011a 100644
--- a/include/linux/of.h
+++ b/include/linux/of.h
@@ -675,12 +675,6 @@ static inline int of_property_count_elems_of_size(const struct device_node *np,
 	return -ENOSYS;
 }
 
-static inline int of_property_read_u32_index(const struct device_node *np,
-			const char *propname, u32 index, u32 *out_value)
-{
-	return -ENOSYS;
-}
-
 static inline int of_property_read_u8_array(const struct device_node *np,
 			const char *propname, u8 *out_values, size_t sz)
 {
@@ -707,16 +701,14 @@ static inline int of_property_read_u64_array(const struct device_node *np,
 	return -ENOSYS;
 }
 
-static inline int of_property_read_string(const struct device_node *np,
-					  const char *propname,
-					  const char **out_string)
+static inline int of_property_read_u32_index(const struct device_node *np,
+			const char *propname, u32 index, u32 *out_value)
 {
 	return -ENOSYS;
 }
 
-static inline int of_property_read_string_helper(const struct device_node *np,
-						 const char *propname,
-						 const char **out_strs, size_t sz, int index)
+static inline int of_property_read_u64_index(const struct device_node *np,
+			const char *propname, u32 index, u64 *out_value)
 {
 	return -ENOSYS;
 }
@@ -744,12 +736,51 @@ static inline int of_n_size_cells(struct device_node *np)
 	return 0;
 }
 
+static inline int of_property_read_variable_u8_array(const struct device_node *np,
+					const char *propname, u8 *out_values,
+					size_t sz_min, size_t sz_max)
+{
+	return -ENOSYS;
+}
+
+static inline int of_property_read_variable_u16_array(const struct device_node *np,
+					const char *propname, u16 *out_values,
+					size_t sz_min, size_t sz_max)
+{
+	return -ENOSYS;
+}
+
+static inline int of_property_read_variable_u32_array(const struct device_node *np,
+					const char *propname,
+					u32 *out_values,
+					size_t sz_min,
+					size_t sz_max)
+{
+	return -ENOSYS;
+}
+
 static inline int of_property_read_u64(const struct device_node *np,
 				       const char *propname, u64 *out_value)
 {
 	return -ENOSYS;
 }
 
+static inline int of_property_read_variable_u64_array(const struct device_node *np,
+					const char *propname,
+					u64 *out_values,
+					size_t sz_min,
+					size_t sz_max)
+{
+	return -ENOSYS;
+}
+
+static inline int of_property_read_string(const struct device_node *np,
+					  const char *propname,
+					  const char **out_string)
+{
+	return -ENOSYS;
+}
+
 static inline int of_property_match_string(const struct device_node *np,
 					   const char *propname,
 					   const char *string)
@@ -757,6 +788,13 @@ static inline int of_property_match_string(const struct device_node *np,
 	return -ENOSYS;
 }
 
+static inline int of_property_read_string_helper(const struct device_node *np,
+						 const char *propname,
+						 const char **out_strs, size_t sz, int index)
+{
+	return -ENOSYS;
+}
+
 static inline struct device_node *of_parse_phandle(const struct device_node *np,
 						   const char *phandle_name,
 						   int index)

commit f948d6d8b792bb90041edc12eac35faf83030994
Author: Frank Rowand <frank.rowand@sony.com>
Date:   Tue Oct 17 16:36:29 2017 -0700

    of: overlay: avoid race condition between applying multiple overlays
    
    The process of applying an overlay consists of:
      - unflatten an overlay FDT (flattened device tree) into an
        EDT (expanded device tree)
      - fixup the phandle values in the overlay EDT to fit in a
        range above the phandle values in the live device tree
      - create the overlay changeset to reflect the contents of
        the overlay EDT
      - apply the overlay changeset, to modify the live device tree,
        potentially changing the maximum phandle value in the live
        device tree
    
    There is currently no protection against two overlay applies
    concurrently determining what range of phandle values are in use
    in the live device tree, and subsequently changing that range.
    Add a mutex to prevent multiple overlay applies from occurring
    simultaneously.
    
    Move of_resolve_phandles() into of_overlay_apply() so that it does not
    have to be duplicated by each caller of of_overlay_apply().
    
    The test in of_resolve_phandles() that the overlay tree is detached is
    temporarily disabled so that old style overlay unittests do not fail.
    
    Signed-off-by: Frank Rowand <frank.rowand@sony.com>
    Signed-off-by: Rob Herring <robh@kernel.org>

diff --git a/include/linux/of.h b/include/linux/of.h
index 96edda95c6b0..ef4c9ff5955a 100644
--- a/include/linux/of.h
+++ b/include/linux/of.h
@@ -1279,9 +1279,6 @@ static inline int of_reconfig_get_state_change(unsigned long action,
 }
 #endif /* CONFIG_OF_DYNAMIC */
 
-/* CONFIG_OF_RESOLVE api */
-extern int of_resolve_phandles(struct device_node *tree);
-
 /**
  * of_device_is_system_power_controller - Tells if system-power-controller is found for device_node
  * @np: Pointer to the given device_node

commit 24789c5ce5a373dd55640f9cd79117fcc3ccc46d
Author: Frank Rowand <frank.rowand@sony.com>
Date:   Tue Oct 17 16:36:26 2017 -0700

    of: overlay: detect cases where device tree may become corrupt
    
    When an attempt to apply an overlay changeset fails, an effort
    is made to revert any partial application of the changeset.
    When an attempt to remove an overlay changeset fails, an effort
    is made to re-apply any partial reversion of the changeset.
    
    The existing code does not check for failure to recover a failed
    overlay changeset application or overlay changeset revert.
    
    Add the missing checks and flag the devicetree as corrupt if the
    state of the devicetree can not be determined.
    
    Improve and expand the returned errors to more fully reflect the
    result of the effort to undo the partial effects of a failed attempt
    to apply or remove an overlay changeset.
    
    If the device tree might be corrupt, do not allow further attempts
    to apply or remove an overlay changeset.
    
    When creating an overlay changeset from an overlay device tree,
    add some additional warnings if the state of the overlay device
    tree is not as expected.
    
    Signed-off-by: Frank Rowand <frank.rowand@sony.com>
    Signed-off-by: Rob Herring <robh@kernel.org>

diff --git a/include/linux/of.h b/include/linux/of.h
index 7569e9cc45de..96edda95c6b0 100644
--- a/include/linux/of.h
+++ b/include/linux/of.h
@@ -1298,7 +1298,7 @@ static inline bool of_device_is_system_power_controller(const struct device_node
  */
 
 enum of_overlay_notify_action {
-	OF_OVERLAY_PRE_APPLY,
+	OF_OVERLAY_PRE_APPLY = 0,
 	OF_OVERLAY_POST_APPLY,
 	OF_OVERLAY_PRE_REMOVE,
 	OF_OVERLAY_POST_REMOVE,
@@ -1312,8 +1312,8 @@ struct of_overlay_notify_data {
 #ifdef CONFIG_OF_OVERLAY
 
 /* ID based overlays; the API for external users */
-int of_overlay_apply(struct device_node *tree);
-int of_overlay_remove(int id);
+int of_overlay_apply(struct device_node *tree, int *ovcs_id);
+int of_overlay_remove(int *ovcs_id);
 int of_overlay_remove_all(void);
 
 int of_overlay_notifier_register(struct notifier_block *nb);
@@ -1321,12 +1321,12 @@ int of_overlay_notifier_unregister(struct notifier_block *nb);
 
 #else
 
-static inline int of_overlay_apply(struct device_node *tree)
+static inline int of_overlay_apply(struct device_node *tree, int *ovcs_id)
 {
 	return -ENOTSUPP;
 }
 
-static inline int of_overlay_remove(int id)
+static inline int of_overlay_remove(int *ovcs_id)
 {
 	return -ENOTSUPP;
 }

commit 0290c4ca2536a35e55c53cfb9058465b1f987b17
Author: Frank Rowand <frank.rowand@sony.com>
Date:   Tue Oct 17 16:36:23 2017 -0700

    of: overlay: rename identifiers to more reflect what they do
    
    This patch is aimed primarily at drivers/of/overlay.c, but those
    changes also have a small impact in a few other files.
    
    overlay.c is difficult to read and maintain.  Improve readability:
      - Rename functions, types and variables to better reflect what
        they do and to be consistent with names in other places,
        such as the device tree overlay FDT (flattened device tree),
        and make the algorithms more clear
      - Use the same names consistently throughout the file
      - Update comments for name changes
      - Fix incorrect comments
    
    This patch is intended to not introduce any functional change.
    
    Signed-off-by: Frank Rowand <frank.rowand@sony.com>
    Signed-off-by: Rob Herring <robh@kernel.org>

diff --git a/include/linux/of.h b/include/linux/of.h
index 7b0f17be7830..7569e9cc45de 100644
--- a/include/linux/of.h
+++ b/include/linux/of.h
@@ -1312,26 +1312,26 @@ struct of_overlay_notify_data {
 #ifdef CONFIG_OF_OVERLAY
 
 /* ID based overlays; the API for external users */
-int of_overlay_create(struct device_node *tree);
-int of_overlay_destroy(int id);
-int of_overlay_destroy_all(void);
+int of_overlay_apply(struct device_node *tree);
+int of_overlay_remove(int id);
+int of_overlay_remove_all(void);
 
 int of_overlay_notifier_register(struct notifier_block *nb);
 int of_overlay_notifier_unregister(struct notifier_block *nb);
 
 #else
 
-static inline int of_overlay_create(struct device_node *tree)
+static inline int of_overlay_apply(struct device_node *tree)
 {
 	return -ENOTSUPP;
 }
 
-static inline int of_overlay_destroy(int id)
+static inline int of_overlay_remove(int id)
 {
 	return -ENOTSUPP;
 }
 
-static inline int of_overlay_destroy_all(void)
+static inline int of_overlay_remove_all(void)
 {
 	return -ENOTSUPP;
 }

commit b56b5528f5b3c3d47e7c0ca67318c45e980d93f0
Author: Rob Herring <robh@kernel.org>
Date:   Wed Oct 4 14:09:40 2017 -0500

    of: make kobject and bin_attribute support configurable
    
    Having device_nodes be kobjects is only needed if sysfs or OF_DYNAMIC is
    enabled. Otherwise, having a kobject in struct device_node is
    unnecessary bloat in minimal kernel configurations.
    
    Likewise, bin_attribute is only needed in struct property when sysfs is
    enabled, so we can make it configurable too.
    
    Tested-by: Nicolas Pitre <nico@linaro.org>
    Reviewed-by: Frank Rowand <frowand.list@gmail.com>
    Acked-by: Grant Likely <grant.likely@secretlab.ca>
    Signed-off-by: Rob Herring <robh@kernel.org>

diff --git a/include/linux/of.h b/include/linux/of.h
index 2d685e769409..7b0f17be7830 100644
--- a/include/linux/of.h
+++ b/include/linux/of.h
@@ -43,7 +43,9 @@ struct property {
 #if defined(CONFIG_OF_PROMTREE)
 	unsigned int unique_id;
 #endif
+#if defined(CONFIG_OF_KOBJ)
 	struct bin_attribute attr;
+#endif
 };
 
 #if defined(CONFIG_SPARC)
@@ -62,7 +64,9 @@ struct device_node {
 	struct	device_node *parent;
 	struct	device_node *child;
 	struct	device_node *sibling;
+#if defined(CONFIG_OF_KOBJ)
 	struct	kobject kobj;
+#endif
 	unsigned long _flags;
 	void	*data;
 #if defined(CONFIG_SPARC)
@@ -107,23 +111,17 @@ extern struct kobj_type of_node_ktype;
 extern const struct fwnode_operations of_fwnode_ops;
 static inline void of_node_init(struct device_node *node)
 {
+#if defined(CONFIG_OF_KOBJ)
 	kobject_init(&node->kobj, &of_node_ktype);
+#endif
 	node->fwnode.ops = &of_fwnode_ops;
 }
 
+#if defined(CONFIG_OF_KOBJ)
 #define of_node_kobj(n) (&(n)->kobj)
-
-/* true when node is initialized */
-static inline int of_node_is_initialized(struct device_node *node)
-{
-	return node && node->kobj.state_initialized;
-}
-
-/* true when node is attached (i.e. present on sysfs) */
-static inline int of_node_is_attached(struct device_node *node)
-{
-	return node && node->kobj.state_in_sysfs;
-}
+#else
+#define of_node_kobj(n) NULL
+#endif
 
 #ifdef CONFIG_OF_DYNAMIC
 extern struct device_node *of_node_get(struct device_node *node);

commit 0c3c234b95fa7f1dfa19e1456a47ebafc300dd6b
Author: Rob Herring <robh@kernel.org>
Date:   Wed Oct 4 14:04:01 2017 -0500

    of: wrap accesses to device_node kobject
    
    In preparation to make kobject element in struct device_node optional,
    provide and use a macro to return the kobject pointer. The only user
    outside the DT core is the driver core.
    
    Acked-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Tested-by: Nicolas Pitre <nico@linaro.org>
    Reviewed-by: Frank Rowand <frowand.list@gmail.com>
    Acked-by: Grant Likely <grant.likely@secretlab.ca>
    Signed-off-by: Rob Herring <robh@kernel.org>

diff --git a/include/linux/of.h b/include/linux/of.h
index 7eb94b7fbcf3..2d685e769409 100644
--- a/include/linux/of.h
+++ b/include/linux/of.h
@@ -111,6 +111,8 @@ static inline void of_node_init(struct device_node *node)
 	node->fwnode.ops = &of_fwnode_ops;
 }
 
+#define of_node_kobj(n) (&(n)->kobj)
+
 /* true when node is initialized */
 static inline int of_node_is_initialized(struct device_node *node)
 {

commit 16bba30eab137aaa37538349c0a7496720e90c66
Author: Rob Herring <robh@kernel.org>
Date:   Wed Oct 4 14:30:02 2017 -0500

    of: make struct property _flags field configurable
    
    Only Sparc and CONFIG_OF_DYNAMIC use the struct property._flags field,
    so make it conditional shrinking struct property a bit.
    
    Tested-by: Nicolas Pitre <nico@linaro.org>
    Reviewed-by: Frank Rowand <frowand.list@gmail.com>
    Acked-by: Grant Likely <grant.likely@secretlab.ca>
    Signed-off-by: Rob Herring <robh@kernel.org>

diff --git a/include/linux/of.h b/include/linux/of.h
index 8f9e96752837..7eb94b7fbcf3 100644
--- a/include/linux/of.h
+++ b/include/linux/of.h
@@ -37,7 +37,9 @@ struct property {
 	int	length;
 	void	*value;
 	struct property *next;
+#if defined(CONFIG_OF_DYNAMIC) || defined(CONFIG_SPARC)
 	unsigned long _flags;
+#endif
 #if defined(CONFIG_OF_PROMTREE)
 	unsigned int unique_id;
 #endif
@@ -205,6 +207,7 @@ static inline void of_node_clear_flag(struct device_node *n, unsigned long flag)
 	clear_bit(flag, &n->_flags);
 }
 
+#if defined(CONFIG_OF_DYNAMIC) || defined(CONFIG_SPARC)
 static inline int of_property_check_flag(struct property *p, unsigned long flag)
 {
 	return test_bit(flag, &p->_flags);
@@ -219,6 +222,7 @@ static inline void of_property_clear_flag(struct property *p, unsigned long flag
 {
 	clear_bit(flag, &p->_flags);
 }
+#endif
 
 extern struct device_node *__of_find_all_nodes(struct device_node *prev);
 extern struct device_node *of_find_all_nodes(struct device_node *prev);

commit 36689ecd2c065a8879035e5bf1b4a0f4d5b65160
Author: Rob Herring <robh@kernel.org>
Date:   Fri Sep 29 20:08:28 2017 -0500

    of: remove struct property.unique_id for FDT
    
    Only Sparc uses unique_id, so remove it for FDT builds and shrink struct
    property a bit making the unflattened DT less of a memory hog.
    
    Tested-by: Nicolas Pitre <nico@linaro.org>
    Reviewed-by: Frank Rowand <frowand.list@gmail.com>
    Acked-by: Grant Likely <grant.likely@secretlab.ca>
    Signed-off-by: Rob Herring <robh@kernel.org>

diff --git a/include/linux/of.h b/include/linux/of.h
index cfc34117fc92..8f9e96752837 100644
--- a/include/linux/of.h
+++ b/include/linux/of.h
@@ -38,7 +38,9 @@ struct property {
 	void	*value;
 	struct property *next;
 	unsigned long _flags;
+#if defined(CONFIG_OF_PROMTREE)
 	unsigned int unique_id;
+#endif
 	struct bin_attribute attr;
 };
 

commit 8a1ac5dc7be09883051b1bf89a5e57d7ad850fa5
Author: Arnd Bergmann <arnd@arndb.de>
Date:   Fri Oct 13 15:57:40 2017 -0700

    include/linux/of.h: provide of_n_{addr,size}_cells wrappers for !CONFIG_OF
    
    The pci-rcar driver is enabled for compile tests, and this has shown that
    the driver cannot build without CONFIG_OF, following the inclusion of
    commit f8f2fe7355fb ("PCI: rcar: Use new OF interrupt mapping when possible"):
    
      drivers/pci/host/pcie-rcar.c: In function 'pci_dma_range_parser_init':
      drivers/pci/host/pcie-rcar.c:1039:2: error: implicit declaration of function 'of_n_addr_cells' [-Werror=implicit-function-declaration]
        parser->pna = of_n_addr_cells(node);
        ^
    
    As pointed out by Ben Dooks and Geert Uytterhoeven, this is actually
    supposed to build fine, which we can achieve if we make the declaration
    of of_irq_parse_and_map_pci conditional on CONFIG_OF and provide an
    empty inline function otherwise, as we do for a lot of other of
    interfaces.
    
    This lets us build the rcar_pci driver again without CONFIG_OF for build
    testing.  All platforms using this driver select OF, so this doesn't
    change anything for the users.
    
    [akpm@linux-foundation.org: be consistent with surrounding code]
    Link: http://lkml.kernel.org/r/20170911200805.3363318-1-arnd@arndb.de
    Fixes: c25da4778803 ("PCI: rcar: Add Renesas R-Car PCIe driver")
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>
    Reviewed-by: Frank Rowand <frank.rowand@sony.com>
    Acked-by: Geert Uytterhoeven <geert+renesas@glider.be>
    Cc: Bjorn Helgaas <bhelgaas@google.com>
    Cc: Magnus Damm <damm@opensource.se>
    Cc: Ben Dooks <ben.dooks@codethink.co.uk>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

diff --git a/include/linux/of.h b/include/linux/of.h
index cfc34117fc92..b240ed69dc96 100644
--- a/include/linux/of.h
+++ b/include/linux/of.h
@@ -734,6 +734,16 @@ static inline struct device_node *of_get_cpu_node(int cpu,
 	return NULL;
 }
 
+static inline int of_n_addr_cells(struct device_node *np)
+{
+	return 0;
+
+}
+static inline int of_n_size_cells(struct device_node *np)
+{
+	return 0;
+}
+
 static inline int of_property_read_u64(const struct device_node *np,
 				       const char *propname, u64 *out_value)
 {

commit db3e50f3234ba1a477413f56a9e5800a73dca786
Author: Sakari Ailus <sakari.ailus@linux.intel.com>
Date:   Fri Jul 21 14:39:31 2017 +0300

    device property: Get rid of struct fwnode_handle type field
    
    Instead of relying on the struct fwnode_handle type field, define
    fwnode_operations structs for all separate types of fwnodes. To find out
    the type, compare to the ops field to relevant ops structs.
    
    This change has two benefits:
    
    1. it avoids adding the type field to each and every instance of struct
    fwnode_handle, thus saving memory and
    
    2. makes the ops field the single factor that defines both the types of
    the fwnode as well as defines the implementation of its operations,
    decreasing the possibility of bugs when developing code dealing with
    fwnode internals.
    
    Suggested-by: Rob Herring <robh@kernel.org>
    Signed-off-by: Sakari Ailus <sakari.ailus@linux.intel.com>
    Reviewed-by: Mika Westerberg <mika.westerberg@linux.intel.com>
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>

diff --git a/include/linux/of.h b/include/linux/of.h
index 4a8a70916237..cfc34117fc92 100644
--- a/include/linux/of.h
+++ b/include/linux/of.h
@@ -104,7 +104,6 @@ extern const struct fwnode_operations of_fwnode_ops;
 static inline void of_node_init(struct device_node *node)
 {
 	kobject_init(&node->kobj, &of_node_ktype);
-	node->fwnode.type = FWNODE_OF;
 	node->fwnode.ops = &of_fwnode_ops;
 }
 
@@ -152,7 +151,7 @@ void of_core_init(void);
 
 static inline bool is_of_node(const struct fwnode_handle *fwnode)
 {
-	return !IS_ERR_OR_NULL(fwnode) && fwnode->type == FWNODE_OF;
+	return !IS_ERR_OR_NULL(fwnode) && fwnode->ops == &of_fwnode_ops;
 }
 
 #define to_of_node(__fwnode)						\

commit 548aa0e3c516d906dae5edb1fc9a1ad2e490120a
Merge: 322618684353 6a71d8d77795
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Mon Jul 10 15:23:45 2017 -0700

    Merge tag 'devprop-4.13-rc1' of git://git.kernel.org/pub/scm/linux/kernel/git/rafael/linux-pm
    
    Pull device properties framework updates from Rafael Wysocki:
     "These mostly rearrange the device properties core code and add a few
      helper functions to it as a foundation for future work.
    
      Specifics:
    
       - Rearrange the core device properties code by moving the code
         specific to each supported platform configuration framework (ACPI,
         DT and build-in) into a separate file (Sakari Ailus).
    
       - Add helper functions for accessing device properties in a
         firmware-agnostic way (Sakari Ailus, Kieran Bingham)"
    
    * tag 'devprop-4.13-rc1' of git://git.kernel.org/pub/scm/linux/kernel/git/rafael/linux-pm:
      device property: Add fwnode_graph_get_port_parent
      device property: Add FW type agnostic fwnode_graph_get_remote_node
      device property: Introduce fwnode_device_is_available()
      device property: Move fwnode graph ops to firmware specific locations
      device property: Move FW type specific functionality to FW specific files
      ACPI: Constify argument to acpi_device_is_present()

commit a4485b545e2fad4d65732cb7c60089bf4246de5c
Merge: 5e1743c0af9d b8ba92b101e8
Author: Rob Herring <robh@kernel.org>
Date:   Wed Jul 5 08:31:52 2017 -0500

    Merge branch 'dt/property-move' into dt/next

commit 3708184afc77bb67709a67a35d9f367ebd32cbc4
Author: Sakari Ailus <sakari.ailus@linux.intel.com>
Date:   Tue Jun 6 12:37:37 2017 +0300

    device property: Move FW type specific functionality to FW specific files
    
    The device and fwnode property API supports Devicetree, ACPI and pset
    properties. The implementation of this functionality for each firmware
    type was embedded in the fwnode property core. Move it out to firmware
    type specific locations, making it easier to maintain.
    
    Depends-on: ("of: Move OF property and graph API from base.c to property.c")
    Signed-off-by: Sakari Ailus <sakari.ailus@linux.intel.com>
    Reviewed-by: Mika Westerberg <mika.westerberg@linux.intel.com>
    Acked-by: Rob Herring <robh@kernel.org>
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>

diff --git a/include/linux/of.h b/include/linux/of.h
index 29b7b738b509..cdbfa88c32cf 100644
--- a/include/linux/of.h
+++ b/include/linux/of.h
@@ -100,10 +100,12 @@ struct of_reconfig_data {
 
 /* initialize a node */
 extern struct kobj_type of_node_ktype;
+extern const struct fwnode_operations of_fwnode_ops;
 static inline void of_node_init(struct device_node *node)
 {
 	kobject_init(&node->kobj, &of_node_ktype);
 	node->fwnode.type = FWNODE_OF;
+	node->fwnode.ops = &of_fwnode_ops;
 }
 
 /* true when node is initialized */

commit 3bc1630774bc9f202308ae04608a32c366b41caf
Author: Geert Uytterhoeven <geert+renesas@glider.be>
Date:   Tue Apr 25 19:38:48 2017 +0200

    of: Provide dummy of_device_compatible_match() for compile-testing
    
    Most of_device_*() functions have dummy versions for CONFIG_OF=n,
    but of_device_compatible_match() hasn't.  Fix that to improve the
    ability to do compile-testing.
    
    Fixes: b9c13fe32faaa71c ("dt: Add of_device_compatible_match()")
    Signed-off-by: Geert Uytterhoeven <geert+renesas@glider.be>
    Signed-off-by: Rob Herring <robh@kernel.org>

diff --git a/include/linux/of.h b/include/linux/of.h
index 50fcdb54087f..c72ba9437a43 100644
--- a/include/linux/of.h
+++ b/include/linux/of.h
@@ -627,6 +627,12 @@ static inline int of_device_is_compatible(const struct device_node *device,
 	return 0;
 }
 
+static inline  int of_device_compatible_match(struct device_node *device,
+					      const char *const *compat)
+{
+	return 0;
+}
+
 static inline bool of_device_is_available(const struct device_node *device)
 {
 	return false;

commit d20dc1493db438fbbfb7733adc82f472dd8a0789
Author: Sakari Ailus <sakari.ailus@linux.intel.com>
Date:   Wed May 24 17:53:55 2017 +0300

    of: Support const and non-const use for to_of_node()
    
    Turn to_of_node() into a macro in order to support both const and
    non-const use. Additionally make the fwnode argument to is_of_node() const
    as well.
    
    Signed-off-by: Sakari Ailus <sakari.ailus@linux.intel.com>
    Reviewed-by: Kieran Bingham <kieran.bingham+renesas@ideasonboard.com>
    Signed-off-by: Rob Herring <robh@kernel.org>

diff --git a/include/linux/of.h b/include/linux/of.h
index f05c87f0c495..29b7b738b509 100644
--- a/include/linux/of.h
+++ b/include/linux/of.h
@@ -148,16 +148,20 @@ extern raw_spinlock_t devtree_lock;
 #ifdef CONFIG_OF
 void of_core_init(void);
 
-static inline bool is_of_node(struct fwnode_handle *fwnode)
+static inline bool is_of_node(const struct fwnode_handle *fwnode)
 {
 	return !IS_ERR_OR_NULL(fwnode) && fwnode->type == FWNODE_OF;
 }
 
-static inline struct device_node *to_of_node(struct fwnode_handle *fwnode)
-{
-	return is_of_node(fwnode) ?
-		container_of(fwnode, struct device_node, fwnode) : NULL;
-}
+#define to_of_node(__fwnode)						\
+	({								\
+		typeof(__fwnode) __to_of_node_fwnode = (__fwnode);	\
+									\
+		is_of_node(__to_of_node_fwnode) ?			\
+			container_of(__to_of_node_fwnode,		\
+				     struct device_node, fwnode) :	\
+			NULL;						\
+	})
 
 #define of_fwnode_handle(node)						\
 	({								\
@@ -539,12 +543,12 @@ static inline void of_core_init(void)
 {
 }
 
-static inline bool is_of_node(struct fwnode_handle *fwnode)
+static inline bool is_of_node(const struct fwnode_handle *fwnode)
 {
 	return false;
 }
 
-static inline struct device_node *to_of_node(struct fwnode_handle *fwnode)
+static inline struct device_node *to_of_node(const struct fwnode_handle *fwnode)
 {
 	return NULL;
 }

commit debd3a3b27c76c65a7d032b6f01710e6a6d555ab
Author: Sakari Ailus <sakari.ailus@linux.intel.com>
Date:   Wed May 24 17:53:54 2017 +0300

    of: Make of_fwnode_handle() safer
    
    On the expense of a little bit more complexity in the of_fwnode_handle()
    macro, make the macro result in NULL in case its argument is NULL while
    still referencing it only once.
    
    Signed-off-by: Sakari Ailus <sakari.ailus@linux.intel.com>
    Reviewed-by: Kieran Bingham <kieran.bingham+renesas@ideasonboard.com>
    Signed-off-by: Rob Herring <robh@kernel.org>

diff --git a/include/linux/of.h b/include/linux/of.h
index 50fcdb54087f..f05c87f0c495 100644
--- a/include/linux/of.h
+++ b/include/linux/of.h
@@ -159,7 +159,13 @@ static inline struct device_node *to_of_node(struct fwnode_handle *fwnode)
 		container_of(fwnode, struct device_node, fwnode) : NULL;
 }
 
-#define of_fwnode_handle(node) (&(node)->fwnode)
+#define of_fwnode_handle(node)						\
+	({								\
+		typeof(node) __of_fwnode_handle_node = (node);		\
+									\
+		__of_fwnode_handle_node ?				\
+			&__of_fwnode_handle_node->fwnode : NULL;	\
+	})
 
 static inline bool of_have_populated_dt(void)
 {

commit 7246f60068840847bdcf595be5f0b5ca632736e0
Merge: e579dde654fc 700b7eadd562
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Fri May 5 11:36:44 2017 -0700

    Merge tag 'powerpc-4.12-1' of git://git.kernel.org/pub/scm/linux/kernel/git/powerpc/linux
    
    Pull powerpc updates from Michael Ellerman:
     "Highlights include:
    
       - Larger virtual address space on 64-bit server CPUs. By default we
         use a 128TB virtual address space, but a process can request access
         to the full 512TB by passing a hint to mmap().
    
       - Support for the new Power9 "XIVE" interrupt controller.
    
       - TLB flushing optimisations for the radix MMU on Power9.
    
       - Support for CAPI cards on Power9, using the "Coherent Accelerator
         Interface Architecture 2.0".
    
       - The ability to configure the mmap randomisation limits at build and
         runtime.
    
       - Several small fixes and cleanups to the kprobes code, as well as
         support for KPROBES_ON_FTRACE.
    
       - Major improvements to handling of system reset interrupts,
         correctly treating them as NMIs, giving them a dedicated stack and
         using a new hypervisor call to trigger them, all of which should
         aid debugging and robustness.
    
       - Many fixes and other minor enhancements.
    
      Thanks to: Alastair D'Silva, Alexey Kardashevskiy, Alistair Popple,
      Andrew Donnellan, Aneesh Kumar K.V, Anshuman Khandual, Anton
      Blanchard, Balbir Singh, Ben Hutchings, Benjamin Herrenschmidt,
      Bhupesh Sharma, Chris Packham, Christian Zigotzky, Christophe Leroy,
      Christophe Lombard, Daniel Axtens, David Gibson, Gautham R. Shenoy,
      Gavin Shan, Geert Uytterhoeven, Guilherme G. Piccoli, Hamish Martin,
      Hari Bathini, Kees Cook, Laurent Dufour, Madhavan Srinivasan, Mahesh J
      Salgaonkar, Mahesh Salgaonkar, Masami Hiramatsu, Matt Brown, Matthew
      R. Ochs, Michael Neuling, Naveen N. Rao, Nicholas Piggin, Oliver
      O'Halloran, Pan Xinhui, Paul Mackerras, Rashmica Gupta, Russell
      Currey, Sukadev Bhattiprolu, Thadeu Lima de Souza Cascardo, Tobin C.
      Harding, Tyrel Datwyler, Uma Krishnan, Vaibhav Jain, Vipin K Parashar,
      Yang Shi"
    
    * tag 'powerpc-4.12-1' of git://git.kernel.org/pub/scm/linux/kernel/git/powerpc/linux: (214 commits)
      powerpc/64s: Power9 has no LPCR[VRMASD] field so don't set it
      powerpc/powernv: Fix TCE kill on NVLink2
      powerpc/mm/radix: Drop support for CPUs without lockless tlbie
      powerpc/book3s/mce: Move add_taint() later in virtual mode
      powerpc/sysfs: Move #ifdef CONFIG_HOTPLUG_CPU out of the function body
      powerpc/smp: Document irq enable/disable after migrating IRQs
      powerpc/mpc52xx: Don't select user-visible RTAS_PROC
      powerpc/powernv: Document cxl dependency on special case in pnv_eeh_reset()
      powerpc/eeh: Clean up and document event handling functions
      powerpc/eeh: Avoid use after free in eeh_handle_special_event()
      cxl: Mask slice error interrupts after first occurrence
      cxl: Route eeh events to all drivers in cxl_pci_error_detected()
      cxl: Force context lock during EEH flow
      powerpc/64: Allow CONFIG_RELOCATABLE if COMPILE_TEST
      powerpc/xmon: Teach xmon oops about radix vectors
      powerpc/mm/hash: Fix off-by-one in comment about kernel contexts ids
      powerpc/pseries: Enable VFIO
      powerpc/powernv: Fix iommu table size calculation hook for small tables
      powerpc/powernv: Check kzalloc() return value in pnv_pci_table_alloc
      powerpc: Add arch/powerpc/tools directory
      ...

commit 2475a2b6c877a0c8d1ca42c3f2b30f8ce518ac0b
Author: Alistair Popple <alistair@popple.id.au>
Date:   Mon Apr 3 19:51:42 2017 +1000

    drivers/of/base.c: Add of_property_read_u64_index
    
    There is of_property_read_u32_index but no u64 variant. This patch
    adds one similar to the u32 version for u64.
    
    Signed-off-by: Alistair Popple <alistair@popple.id.au>
    Acked-by: Rob Herring <robh@kernel.org>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>

diff --git a/include/linux/of.h b/include/linux/of.h
index 21e6323de0f3..d08788daae5c 100644
--- a/include/linux/of.h
+++ b/include/linux/of.h
@@ -292,6 +292,9 @@ extern int of_property_count_elems_of_size(const struct device_node *np,
 extern int of_property_read_u32_index(const struct device_node *np,
 				       const char *propname,
 				       u32 index, u32 *out_value);
+extern int of_property_read_u64_index(const struct device_node *np,
+				       const char *propname,
+				       u32 index, u64 *out_value);
 extern int of_property_read_variable_u8_array(const struct device_node *np,
 					const char *propname, u8 *out_values,
 					size_t sz_min, size_t sz_max);

commit 67831837e0b192fe0b8ee8b5e502d95ad2c497c0
Author: Sakari Ailus <sakari.ailus@linux.intel.com>
Date:   Tue Mar 28 10:52:23 2017 +0300

    of: Add of_fwnode_handle() to convert device nodes to fwnode_handle
    
    of_fwnode_handle() returns a struct fwnode_handle of the struct
    device_node. This may be used on the fwnode property API.
    
    Use a macro instead of a function in order to support const and non-const
    arguments.
    
    Signed-off-by: Sakari Ailus <sakari.ailus@linux.intel.com>
    Reviewed-by: Mika Westerberg <mika.westerberg@linux.intel.com>
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>

diff --git a/include/linux/of.h b/include/linux/of.h
index 21e6323de0f3..e5d4225fda35 100644
--- a/include/linux/of.h
+++ b/include/linux/of.h
@@ -159,6 +159,8 @@ static inline struct device_node *to_of_node(struct fwnode_handle *fwnode)
 		container_of(fwnode, struct device_node, fwnode) : NULL;
 }
 
+#define of_fwnode_handle(node) (&(node)->fwnode)
+
 static inline bool of_have_populated_dt(void)
 {
 	return of_root != NULL;
@@ -602,6 +604,8 @@ static inline struct device_node *of_find_node_with_property(
 	return NULL;
 }
 
+#define of_fwnode_handle(node) NULL
+
 static inline bool of_have_populated_dt(void)
 {
 	return false;

commit 5fa23530d4fcc7e84be9a557c58d0e670a15c042
Author: Sudeep Holla <sudeep.holla@arm.com>
Date:   Mon Jan 16 10:40:43 2017 +0000

    of: base: add support to find the level of the last cache
    
    It is useful to have helper function just to get the number of cache
    levels for a given logical cpu. We can obtain the same by just checking
    the level at which the last cache is present. This patch adds support
    to find the level of the last cache for a given cpu.
    
    It will be used on ARM64 platform where the device tree provides the
    information for the additional non-architected/transparent/external
    last level caches that are not integrated with the processors.
    
    Cc: Mark Rutland <mark.rutland@arm.com>
    Suggested-by: Rob Herring <robh+dt@kernel.org>
    Acked-by: Rob Herring <robh+dt@kernel.org>
    Tested-by: Tan Xiaojun <tanxiaojun@huawei.com>
    Signed-off-by: Sudeep Holla <sudeep.holla@arm.com>
    [will: use u32 instead of int for cache_level]
    Signed-off-by: Will Deacon <will.deacon@arm.com>

diff --git a/include/linux/of.h b/include/linux/of.h
index d72f01009297..21e6323de0f3 100644
--- a/include/linux/of.h
+++ b/include/linux/of.h
@@ -280,6 +280,7 @@ extern struct device_node *of_get_child_by_name(const struct device_node *node,
 
 /* cache lookup */
 extern struct device_node *of_find_next_cache_node(const struct device_node *);
+extern int of_find_last_cache_level(unsigned int cpu);
 extern struct device_node *of_find_node_with_property(
 	struct device_node *from, const char *prop_name);
 

commit 39a842e22c1bf3ec3dce36e01fe8ba8ee66c80c8
Author: Alan Tull <atull@opensource.altera.com>
Date:   Tue Nov 1 14:14:22 2016 -0500

    of/overlay: add of overlay notifications
    
    This patch add of overlay notifications.
    
    When DT overlays are being added, some drivers/subsystems
    need to see device tree overlays before the changes go into
    the live tree.
    
    This is distinct from reconfig notifiers that are
    post-apply or post-remove and which issue very granular
    notifications without providing access to the context
    of a whole overlay.
    
    The following 4 notificatons are issued:
      OF_OVERLAY_PRE_APPLY
      OF_OVERLAY_POST_APPLY
      OF_OVERLAY_PRE_REMOVE
      OF_OVERLAY_POST_REMOVE
    
    In the case of pre-apply notification, if the notifier
    returns error, the overlay will be rejected.
    
    This patch exports two functions for registering/unregistering
    notifications:
      of_overlay_notifier_register(struct notifier_block *nb)
      of_overlay_notifier_unregister(struct notifier_block *nb)
    
    The of_mutex is held during these notifications. The
    notification data includes pointers to the overlay target
    and the overlay:
    
    struct of_overlay_notify_data {
           struct device_node *overlay;
           struct device_node *target;
    };
    
    Signed-off-by: Alan Tull <atull@opensource.altera.com>
    Acked-by: Rob Herring <robh@kernel.org>
    Acked-by: Moritz Fischer <moritz.fischer@ettus.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/include/linux/of.h b/include/linux/of.h
index 299aeb192727..d72f01009297 100644
--- a/include/linux/of.h
+++ b/include/linux/of.h
@@ -1266,6 +1266,18 @@ static inline bool of_device_is_system_power_controller(const struct device_node
  * Overlay support
  */
 
+enum of_overlay_notify_action {
+	OF_OVERLAY_PRE_APPLY,
+	OF_OVERLAY_POST_APPLY,
+	OF_OVERLAY_PRE_REMOVE,
+	OF_OVERLAY_POST_REMOVE,
+};
+
+struct of_overlay_notify_data {
+	struct device_node *overlay;
+	struct device_node *target;
+};
+
 #ifdef CONFIG_OF_OVERLAY
 
 /* ID based overlays; the API for external users */
@@ -1273,6 +1285,9 @@ int of_overlay_create(struct device_node *tree);
 int of_overlay_destroy(int id);
 int of_overlay_destroy_all(void);
 
+int of_overlay_notifier_register(struct notifier_block *nb);
+int of_overlay_notifier_unregister(struct notifier_block *nb);
+
 #else
 
 static inline int of_overlay_create(struct device_node *tree)
@@ -1290,6 +1305,16 @@ static inline int of_overlay_destroy_all(void)
 	return -ENOTSUPP;
 }
 
+static inline int of_overlay_notifier_register(struct notifier_block *nb)
+{
+	return 0;
+}
+
+static inline int of_overlay_notifier_unregister(struct notifier_block *nb)
+{
+	return 0;
+}
+
 #endif
 
 #endif /* _LINUX_OF_H */

commit a67e9472da423ec47a3586920b526ebaedf25fc3
Author: Richard Fitzgerald <rf@opensource.wolfsonmicro.com>
Date:   Mon Sep 12 14:01:29 2016 +0100

    of: Add array read functions with min/max size limits
    
    Add a new set of array reading functions that take a minimum and
    maximum size limit and will fail if the property size is not within
    the size limits. This makes it more convenient for drivers that
    use variable-size DT arrays which must be bounded at both ends -
    data must be at least N entries but must not overflow the array
    it is being copied into. It is also more efficient than making this
    functionality out of existing public functions and avoids duplication.
    
    The existing array functions have been left in the API, since there
    are a very large number of clients of those functions and their
    existing functionality is still useful. This avoids turning a small
    API improvement into a major kernel rework.
    
    The old functions have been turned into mininmal static inlines calling
    the new functions. The old functions had no upper limit on the actual
    size of the dts entry, to preserve this functionality rather than keeping
    two near-identical implementations, if the new function is called with
    max=0 there is no limit on the size of the dts entry but only the min
    number of elements are read.
    
    Signed-off-by: Richard Fitzgerald <rf@opensource.wolfsonmicro.com>
    Signed-off-by: Rob Herring <robh@kernel.org>

diff --git a/include/linux/of.h b/include/linux/of.h
index 3d9ff8e9d803..299aeb192727 100644
--- a/include/linux/of.h
+++ b/include/linux/of.h
@@ -291,20 +291,24 @@ extern int of_property_count_elems_of_size(const struct device_node *np,
 extern int of_property_read_u32_index(const struct device_node *np,
 				       const char *propname,
 				       u32 index, u32 *out_value);
-extern int of_property_read_u8_array(const struct device_node *np,
-			const char *propname, u8 *out_values, size_t sz);
-extern int of_property_read_u16_array(const struct device_node *np,
-			const char *propname, u16 *out_values, size_t sz);
-extern int of_property_read_u32_array(const struct device_node *np,
-				      const char *propname,
-				      u32 *out_values,
-				      size_t sz);
+extern int of_property_read_variable_u8_array(const struct device_node *np,
+					const char *propname, u8 *out_values,
+					size_t sz_min, size_t sz_max);
+extern int of_property_read_variable_u16_array(const struct device_node *np,
+					const char *propname, u16 *out_values,
+					size_t sz_min, size_t sz_max);
+extern int of_property_read_variable_u32_array(const struct device_node *np,
+					const char *propname,
+					u32 *out_values,
+					size_t sz_min,
+					size_t sz_max);
 extern int of_property_read_u64(const struct device_node *np,
 				const char *propname, u64 *out_value);
-extern int of_property_read_u64_array(const struct device_node *np,
-				      const char *propname,
-				      u64 *out_values,
-				      size_t sz);
+extern int of_property_read_variable_u64_array(const struct device_node *np,
+					const char *propname,
+					u64 *out_values,
+					size_t sz_min,
+					size_t sz_max);
 
 extern int of_property_read_string(const struct device_node *np,
 				   const char *propname,
@@ -380,6 +384,122 @@ extern int of_detach_node(struct device_node *);
 
 #define of_match_ptr(_ptr)	(_ptr)
 
+/**
+ * of_property_read_u8_array - Find and read an array of u8 from a property.
+ *
+ * @np:		device node from which the property value is to be read.
+ * @propname:	name of the property to be searched.
+ * @out_values:	pointer to return value, modified only if return value is 0.
+ * @sz:		number of array elements to read
+ *
+ * Search for a property in a device node and read 8-bit value(s) from
+ * it. Returns 0 on success, -EINVAL if the property does not exist,
+ * -ENODATA if property does not have a value, and -EOVERFLOW if the
+ * property data isn't large enough.
+ *
+ * dts entry of array should be like:
+ *	property = /bits/ 8 <0x50 0x60 0x70>;
+ *
+ * The out_values is modified only if a valid u8 value can be decoded.
+ */
+static inline int of_property_read_u8_array(const struct device_node *np,
+					    const char *propname,
+					    u8 *out_values, size_t sz)
+{
+	int ret = of_property_read_variable_u8_array(np, propname, out_values,
+						     sz, 0);
+	if (ret >= 0)
+		return 0;
+	else
+		return ret;
+}
+
+/**
+ * of_property_read_u16_array - Find and read an array of u16 from a property.
+ *
+ * @np:		device node from which the property value is to be read.
+ * @propname:	name of the property to be searched.
+ * @out_values:	pointer to return value, modified only if return value is 0.
+ * @sz:		number of array elements to read
+ *
+ * Search for a property in a device node and read 16-bit value(s) from
+ * it. Returns 0 on success, -EINVAL if the property does not exist,
+ * -ENODATA if property does not have a value, and -EOVERFLOW if the
+ * property data isn't large enough.
+ *
+ * dts entry of array should be like:
+ *	property = /bits/ 16 <0x5000 0x6000 0x7000>;
+ *
+ * The out_values is modified only if a valid u16 value can be decoded.
+ */
+static inline int of_property_read_u16_array(const struct device_node *np,
+					     const char *propname,
+					     u16 *out_values, size_t sz)
+{
+	int ret = of_property_read_variable_u16_array(np, propname, out_values,
+						      sz, 0);
+	if (ret >= 0)
+		return 0;
+	else
+		return ret;
+}
+
+/**
+ * of_property_read_u32_array - Find and read an array of 32 bit integers
+ * from a property.
+ *
+ * @np:		device node from which the property value is to be read.
+ * @propname:	name of the property to be searched.
+ * @out_values:	pointer to return value, modified only if return value is 0.
+ * @sz:		number of array elements to read
+ *
+ * Search for a property in a device node and read 32-bit value(s) from
+ * it. Returns 0 on success, -EINVAL if the property does not exist,
+ * -ENODATA if property does not have a value, and -EOVERFLOW if the
+ * property data isn't large enough.
+ *
+ * The out_values is modified only if a valid u32 value can be decoded.
+ */
+static inline int of_property_read_u32_array(const struct device_node *np,
+					     const char *propname,
+					     u32 *out_values, size_t sz)
+{
+	int ret = of_property_read_variable_u32_array(np, propname, out_values,
+						      sz, 0);
+	if (ret >= 0)
+		return 0;
+	else
+		return ret;
+}
+
+/**
+ * of_property_read_u64_array - Find and read an array of 64 bit integers
+ * from a property.
+ *
+ * @np:		device node from which the property value is to be read.
+ * @propname:	name of the property to be searched.
+ * @out_values:	pointer to return value, modified only if return value is 0.
+ * @sz:		number of array elements to read
+ *
+ * Search for a property in a device node and read 64-bit value(s) from
+ * it. Returns 0 on success, -EINVAL if the property does not exist,
+ * -ENODATA if property does not have a value, and -EOVERFLOW if the
+ * property data isn't large enough.
+ *
+ * The out_values is modified only if a valid u64 value can be decoded.
+ */
+static inline int of_property_read_u64_array(const struct device_node *np,
+					     const char *propname,
+					     u64 *out_values, size_t sz)
+{
+	int ret = of_property_read_variable_u64_array(np, propname, out_values,
+						      sz, 0);
+	if (ret >= 0)
+		return 0;
+	else
+		return ret;
+}
+
 /*
  * struct property *prop;
  * const __be32 *p;

commit c9b95e5961c0294e0efffeaa847c1a1e6369204c
Merge: bad60e6f259a 0984d159c8ad
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Sun Jul 31 02:25:02 2016 -0700

    Merge tag 'sound-4.8-rc1' of git://git.kernel.org/pub/scm/linux/kernel/git/tiwai/sound
    
    Pull sound updates from Takashi Iwai:
     "The majority of this update is about ASoC, including a few new
      drivers, and the rest are mostly minor changes.  The only substantial
      change in ALSA core is about the additional error handling in the
      compress-offload API.  Below are highlights:
    
       - Add the error propagating support in compress-offload API
    
       - HD-audio: a usual Dell headset fixup, an Intel HDMI/DP fix, and the
         default mixer setup change ot turn off the loopback
    
       - Lots of updates for ASoC Intel drivers, mostly board support and
         bug fixing, and to the NAU8825 driver
    
       - Work on generalizing bits of simple-card to allow more code sharing
         with the Renesas rsrc-card (which can't use simple-card due to DPCM)
    
       - Removal of the Odroid X2 driver due to replacement with simple-card
    
       - Support for several new Mediatek platforms and associated boards
    
       - New ASoC drivers for Allwinner A10, Analog Devices ADAU7002,
         Broadcom Cygnus, Cirrus Logic CS35L33 and CS53L30, Maxim MAX8960
         and MAX98504, Realtek RT5514 and Wolfson WM8758"
    
    * tag 'sound-4.8-rc1' of git://git.kernel.org/pub/scm/linux/kernel/git/tiwai/sound: (278 commits)
      sound: oss: Use kernel_read_file_from_path() for mod_firmware_load()
      ASoC: Intel: Skylake: Delete an unnecessary check before the function call "release_firmware"
      ASoC: Intel: Skylake: Fix NULL Pointer exception in dynamic_debug.
      ASoC: samsung: Specify DMA channels through struct snd_dmaengine_pcm_config
      ASoC: samsung: Fix error paths in the I2S driver's probe()
      ASoC: cs53l30: Fix bit shift issue of TDM mode
      ASoC: cs53l30: Fix a bug for TDM slot location validation
      ASoC: rockchip: correct the spdif clk
      ALSA: echoaudio: purge contradictions between dimension matrix members and total number of members
      ASoC: rsrc-card: use asoc_simple_card_parse_card_name()
      ASoC: rsrc-card: use asoc_simple_dai instead of rsrc_card_dai
      ASoC: rsrc-card: use asoc_simple_card_parse_dailink_name()
      ASoC: simple-card: use asoc_simple_card_parse_card_name()
      ASoC: simple-card-utils: add asoc_simple_card_parse_card_name()
      ASoC: simple-card: use asoc_simple_card_parse_dailink_name()
      ASoC: simple-card-utils: add asoc_simple_card_set_dailink_name()
      ASoC: nau8825: drop redundant idiom when converting integer to boolean
      ASoC: nau8825: jack connection decision with different insertion logic
      ASoC: mediatek: Add HDMI dai-links to the mt8173-rt5650 machine driver
      ASoC: mediatek: mt2701: fix non static symbol warning
      ...

commit bad60e6f259a01cf9f29a1ef8d435ab6c60b2de9
Merge: dd0f0cf58af7 719dbb2df78f
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Sat Jul 30 21:01:36 2016 -0700

    Merge tag 'powerpc-4.8-1' of git://git.kernel.org/pub/scm/linux/kernel/git/powerpc/linux
    
    Pull powerpc updates from Michael Ellerman:
     "Highlights:
       - PowerNV PCI hotplug support.
       - Lots more Power9 support.
       - eBPF JIT support on ppc64le.
       - Lots of cxl updates.
       - Boot code consolidation.
    
      Bug fixes:
       - Fix spin_unlock_wait() from Boqun Feng
       - Fix stack pointer corruption in __tm_recheckpoint() from Michael
         Neuling
       - Fix multiple bugs in memory_hotplug_max() from Bharata B Rao
       - mm: Ensure "special" zones are empty from Oliver O'Halloran
       - ftrace: Separate the heuristics for checking call sites from
         Michael Ellerman
       - modules: Never restore r2 for a mprofile-kernel style mcount() call
         from Michael Ellerman
       - Fix endianness when reading TCEs from Alexey Kardashevskiy
       - start rtasd before PCI probing from Greg Kurz
       - PCI: rpaphp: Fix slot registration for multiple slots under a PHB
         from Tyrel Datwyler
       - powerpc/mm: Add memory barrier in __hugepte_alloc() from Sukadev
         Bhattiprolu
    
      Cleanups & fixes:
       - Drop support for MPIC in pseries from Rashmica Gupta
       - Define and use PPC64_ELF_ABI_v2/v1 from Michael Ellerman
       - Remove unused symbols in asm-offsets.c from Rashmica Gupta
       - Fix SRIOV not building without EEH enabled from Russell Currey
       - Remove kretprobe_trampoline_holder from Thiago Jung Bauermann
       - Reduce log level of PCI I/O space warning from Benjamin
         Herrenschmidt
       - Add array bounds checking to crash_shutdown_handlers from Suraj
         Jitindar Singh
       - Avoid -maltivec when using clang integrated assembler from Anton
         Blanchard
       - Fix array overrun in ppc_rtas() syscall from Andrew Donnellan
       - Fix error return value in cmm_mem_going_offline() from Rasmus
         Villemoes
       - export cpu_to_core_id() from Mauricio Faria de Oliveira
       - Remove old symbols from defconfigs from Andrew Donnellan
       - Update obsolete comments in setup_32.c about entry conditions from
         Benjamin Herrenschmidt
       - Add comment explaining the purpose of setup_kdump_trampoline() from
         Benjamin Herrenschmidt
       - Merge the RELOCATABLE config entries for ppc32 and ppc64 from Kevin
         Hao
       - Remove RELOCATABLE_PPC32 from Kevin Hao
       - Fix .long's in tlb-radix.c to more meaningful from Balbir Singh
    
      Minor cleanups & fixes:
       - Andrew Donnellan, Anna-Maria Gleixner, Anton Blanchard, Benjamin
         Herrenschmidt, Bharata B Rao, Christophe Leroy, Colin Ian King,
         Geliang Tang, Greg Kurz, Madhavan Srinivasan, Michael Ellerman,
         Michael Ellerman, Stephen Rothwell, Stewart Smith.
    
      Freescale updates from Scott:
       - "Highlights include more 8xx optimizations, device tree updates,
         and MVME7100 support."
    
      PowerNV PCI hotplug from Gavin Shan:
       - PCI: Add pcibios_setup_bridge()
       - Override pcibios_setup_bridge()
       - Remove PCI_RESET_DELAY_US
       - Move pnv_pci_ioda_setup_opal_tce_kill() around
       - Increase PE# capacity
       - Allocate PE# in reverse order
       - Create PEs in pcibios_setup_bridge()
       - Setup PE for root bus
       - Extend PCI bridge resources
       - Make pnv_ioda_deconfigure_pe() visible
       - Dynamically release PE
       - Update bridge windows on PCI plug
       - Delay populating pdn
       - Support PCI slot ID
       - Use PCI slot reset infrastructure
       - Introduce pnv_pci_get_slot_id()
       - Functions to get/set PCI slot state
       - PCI/hotplug: PowerPC PowerNV PCI hotplug driver
       - Print correct PHB type names
    
      Power9 idle support from Shreyas B. Prabhu:
       - set power_save func after the idle states are initialized
       - Use PNV_THREAD_WINKLE macro while requesting for winkle
       - make hypervisor state restore a function
       - Rename idle_power7.S to idle_book3s.S
       - Rename reusable idle functions to hardware agnostic names
       - Make pnv_powersave_common more generic
       - abstraction for saving SPRs before entering deep idle states
       - Add platform support for stop instruction
       - cpuidle/powernv: Use CPUIDLE_STATE_MAX instead of MAX_POWERNV_IDLE_STATES
       - cpuidle/powernv: cleanup cpuidle-powernv.c
       - cpuidle/powernv: Add support for POWER ISA v3 idle states
       - Use deepest stop state when cpu is offlined
    
      Power9 PMU from Madhavan Srinivasan:
       - factor out power8 pmu macros and defines
       - factor out power8 pmu functions
       - factor out power8 __init_pmu code
       - Add power9 event list macros for generic and cache events
       - Power9 PMU support
       - Export Power9 generic and cache events to sysfs
    
      Power9 preliminary interrupt & PCI support from Benjamin Herrenschmidt:
       - Add XICS emulation APIs
       - Move a few exception common handlers to make room
       - Add support for HV virtualization interrupts
       - Add mechanism to force a replay of interrupts
       - Add ICP OPAL backend
       - Discover IODA3 PHBs
       - pci: Remove obsolete SW invalidate
       - opal: Add real mode call wrappers
       - Rename TCE invalidation calls
       - Remove SWINV constants and obsolete TCE code
       - Rework accessing the TCE invalidate register
       - Fallback to OPAL for TCE invalidations
       - Use the device-tree to get available range of M64's
       - Check status of a PHB before using it
       - pci: Don't try to allocate resources that will be reassigned
    
      Other Power9:
       - Send SIGBUS on unaligned copy and paste from Chris Smart
       - Large Decrementer support from Oliver O'Halloran
       - Load Monitor Register Support from Jack Miller
    
      Performance improvements from Anton Blanchard:
       - Avoid load hit store in __giveup_fpu() and __giveup_altivec()
       - Avoid load hit store in setup_sigcontext()
       - Remove assembly versions of strcpy, strcat, strlen and strcmp
       - Align hot loops of some string functions
    
      eBPF JIT from Naveen N. Rao:
       - Fix/enhance 32-bit Load Immediate implementation
       - Optimize 64-bit Immediate loads
       - Introduce rotate immediate instructions
       - A few cleanups
       - Isolate classic BPF JIT specifics into a separate header
       - Implement JIT compiler for extended BPF
    
      Operator Panel driver from Suraj Jitindar Singh:
       - devicetree/bindings: Add binding for operator panel on FSP machines
       - Add inline function to get rc from an ASYNC_COMP opal_msg
       - Add driver for operator panel on FSP machines
    
      Sparse fixes from Daniel Axtens:
       - make some things static
       - Introduce asm-prototypes.h
       - Include headers containing prototypes
       - Use #ifdef __BIG_ENDIAN__ #else for REG_BYTE
       - kvm: Clarify __user annotations
       - Pass endianness to sparse
       - Make ppc_md.{halt, restart} __noreturn
    
      MM fixes & cleanups from Aneesh Kumar K.V:
       - radix: Update LPCR HR bit as per ISA
       - use _raw variant of page table accessors
       - Compile out radix related functions if RADIX_MMU is disabled
       - Clear top 16 bits of va only on older cpus
       - Print formation regarding the the MMU mode
       - hash: Update SDR1 size encoding as documented in ISA 3.0
       - radix: Update PID switch sequence
       - radix: Update machine call back to support new HCALL.
       - radix: Add LPID based tlb flush helpers
       - radix: Add a kernel command line to disable radix
       - Cleanup LPCR defines
    
      Boot code consolidation from Benjamin Herrenschmidt:
       - Move epapr_paravirt_early_init() to early_init_devtree()
       - cell: Don't use flat device-tree after boot
       - ge_imp3a: Don't use the flat device-tree after boot
       - mpc85xx_ds: Don't use the flat device-tree after boot
       - mpc85xx_rdb: Don't use the flat device-tree after boot
       - Don't test for machine type in rtas_initialize()
       - Don't test for machine type in smp_setup_cpu_maps()
       - dt: Add of_device_compatible_match()
       - Factor do_feature_fixup calls
       - Move 64-bit feature fixup earlier
       - Move 64-bit memory reserves to setup_arch()
       - Use a cachable DART
       - Move FW feature probing out of pseries probe()
       - Put exception configuration in a common place
       - Remove early allocation of the SMU command buffer
       - Move MMU backend selection out of platform code
       - pasemi: Remove IOBMAP allocation from platform probe()
       - mm/hash: Don't use machine_is() early during boot
       - Don't test for machine type to detect HEA special case
       - pmac: Remove spurrious machine type test
       - Move hash table ops to a separate structure
       - Ensure that ppc_md is empty before probing for machine type
       - Move 64-bit probe_machine() to later in the boot process
       - Move 32-bit probe() machine to later in the boot process
       - Get rid of ppc_md.init_early()
       - Move the boot time info banner to a separate function
       - Move setting of {i,d}cache_bsize to initialize_cache_info()
       - Move the content of setup_system() to setup_arch()
       - Move cache info inits to a separate function
       - Re-order the call to smp_setup_cpu_maps()
       - Re-order setup_panic()
       - Make a few boot functions __init
       - Merge 32-bit and 64-bit setup_arch()
    
      Other new features:
       - tty/hvc: Use IRQF_SHARED for OPAL hvc consoles from Sam Mendoza-Jonas
       - tty/hvc: Use opal irqchip interface if available from Sam Mendoza-Jonas
       - powerpc: Add module autoloading based on CPU features from Alastair D'Silva
       - crypto: vmx - Convert to CPU feature based module autoloading from Alastair D'Silva
       - Wake up kopald polling thread before waiting for events from Benjamin Herrenschmidt
       - xmon: Dump ISA 2.06 SPRs from Michael Ellerman
       - xmon: Dump ISA 2.07 SPRs from Michael Ellerman
       - Add a parameter to disable 1TB segs from Oliver O'Halloran
       - powerpc/boot: Add OPAL console to epapr wrappers from Oliver O'Halloran
       - Assign fixed PHB number based on device-tree properties from Guilherme G. Piccoli
       - pseries: Add pseries hotplug workqueue from John Allen
       - pseries: Add support for hotplug interrupt source from John Allen
       - pseries: Use kernel hotplug queue for PowerVM hotplug events from John Allen
       - pseries: Move property cloning into its own routine from Nathan Fontenot
       - pseries: Dynamic add entires to associativity lookup array from Nathan Fontenot
       - pseries: Auto-online hotplugged memory from Nathan Fontenot
       - pseries: Remove call to memblock_add() from Nathan Fontenot
    
      cxl:
       - Add set and get private data to context struct from Michael Neuling
       - make base more explicitly non-modular from Paul Gortmaker
       - Use for_each_compatible_node() macro from Wei Yongjun
       - Frederic Barrat
       - Abstract the differences between the PSL and XSL
       - Make vPHB device node match adapter's
       - Philippe Bergheaud
       - Add mechanism for delivering AFU driver specific events
       - Ignore CAPI adapters misplaced in switched slots
       - Refine slice error debug messages
       - Andrew Donnellan
       - static-ify variables to fix sparse warnings
       - PCI/hotplug: pnv_php: export symbols and move struct types needed by cxl
       - PCI/hotplug: pnv_php: handle OPAL_PCI_SLOT_OFFLINE power state
       - Add cxl_check_and_switch_mode() API to switch bi-modal cards
       - remove dead Kconfig options
       - fix potential NULL dereference in free_adapter()
       - Ian Munsie
       - Update process element after allocating interrupts
       - Add support for CAPP DMA mode
       - Fix allowing bogus AFU descriptors with 0 maximum processes
       - Fix allocating a minimum of 2 pages for the SPA
       - Fix bug where AFU disable operation had no effect
       - Workaround XSL bug that does not clear the RA bit after a reset
       - Fix NULL pointer dereference on kernel contexts with no AFU interrupts
       - powerpc/powernv: Split cxl code out into a separate file
       - Add cxl_slot_is_supported API
       - Enable bus mastering for devices using CAPP DMA mode
       - Move cxl_afu_get / cxl_afu_put to base
       - Allow a default context to be associated with an external pci_dev
       - Do not create vPHB if there are no AFU configuration records
       - powerpc/powernv: Add support for the cxl kernel api on the real phb
       - Add support for using the kernel API with a real PHB
       - Add kernel APIs to get & set the max irqs per context
       - Add preliminary workaround for CX4 interrupt limitation
       - Add support for interrupts on the Mellanox CX4
       - Workaround PE=0 hardware limitation in Mellanox CX4
       - powerpc/powernv: Fix pci-cxl.c build when CONFIG_MODULES=n
    
      selftests:
       - Test unaligned copy and paste from Chris Smart
       - Load Monitor Register Tests from Jack Miller
       - Cyril Bur
       - exec() with suspended transaction
       - Use signed long to read perf_event_paranoid
       - Fix usage message in context_switch
       - Fix generation of vector instructions/types in context_switch
       - Michael Ellerman
       - Use "Delta" rather than "Error" in normal output
       - Import Anton's mmap & futex micro benchmarks
       - Add a test for PROT_SAO"
    
    * tag 'powerpc-4.8-1' of git://git.kernel.org/pub/scm/linux/kernel/git/powerpc/linux: (263 commits)
      powerpc/mm: Parenthesise IS_ENABLED() in if condition
      tty/hvc: Use opal irqchip interface if available
      tty/hvc: Use IRQF_SHARED for OPAL hvc consoles
      selftests/powerpc: exec() with suspended transaction
      powerpc: Improve comment explaining why we modify VRSAVE
      powerpc/mm: Drop unused externs for hpte_init_beat[_v3]()
      powerpc/mm: Rename hpte_init_lpar() and move the fallback to a header
      powerpc/mm: Fix build break when PPC_NATIVE=n
      crypto: vmx - Convert to CPU feature based module autoloading
      powerpc: Add module autoloading based on CPU features
      powerpc/powernv/ioda: Fix endianness when reading TCEs
      powerpc/mm: Add memory barrier in __hugepte_alloc()
      powerpc/modules: Never restore r2 for a mprofile-kernel style mcount() call
      powerpc/ftrace: Separate the heuristics for checking call sites
      powerpc: Merge 32-bit and 64-bit setup_arch()
      powerpc/64: Make a few boot functions __init
      powerpc: Re-order setup_panic()
      powerpc: Re-order the call to smp_setup_cpu_maps()
      powerpc/32: Move cache info inits to a separate function
      powerpc/64: Move the content of setup_system() to setup_arch()
      ...

commit 3ceeda1cbee9f93bb5537c9b840d1f7e767d7c01
Merge: 5600eab2dfe6 1708796fc105 1200a7d9b2c6 a01b89336f7a 272ee030ebc9
Author: Mark Brown <broonie@kernel.org>
Date:   Sun Jul 24 22:07:31 2016 +0100

    Merge remote-tracking branches 'asoc/topic/cs53l30', 'asoc/topic/cygnus', 'asoc/topic/da7219' and 'asoc/topic/davinci' into asoc-next

commit b9c13fe32faaa71c4e4f8a426d79f8c93495e9f9
Author: Benjamin Herrenschmidt <benh@kernel.crashing.org>
Date:   Fri Jul 8 08:35:59 2016 +1000

    dt: Add of_device_compatible_match()
    
    This provides an equivalent of of_fdt_match() for non-flat trees.
    
    This is more practical than matching an array of of_device_id structs
    when converting a bunch of existing users of of_fdt_match().
    
    Signed-off-by: Benjamin Herrenschmidt <benh@kernel.crashing.org>
    Acked-by: Rob Herring <robh@kernel.org>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>

diff --git a/include/linux/of.h b/include/linux/of.h
index 74eb28cadbef..33c184d3dcd8 100644
--- a/include/linux/of.h
+++ b/include/linux/of.h
@@ -324,6 +324,8 @@ extern int of_property_read_string_helper(const struct device_node *np,
 					      const char **out_strs, size_t sz, int index);
 extern int of_device_is_compatible(const struct device_node *device,
 				   const char *);
+extern int of_device_compatible_match(struct device_node *device,
+				      const char *const *compat);
 extern bool of_device_is_available(const struct device_node *device);
 extern bool of_device_is_big_endian(const struct device_node *device);
 extern const void *of_get_property(const struct device_node *node,

commit 3d93f42d449ace8e2dd8e2ec9790fdce31a14c9c
Merge: 4b4b20852d10 34c720a91585
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Thu Jul 7 15:41:13 2016 +0200

    Merge branch 'clockevents/4.8' of http://git.linaro.org/people/daniel.lezcano/linux into timers/core
    
    Pull the clockevents/clocksource tree from Daniel Lezcano:
    
      - Convert the clocksource-probe init functions to return a value in order to
        prepare the consolidation of the drivers using the DT. It is a big patchset
        but went through 01.org (kbuild bot), linux next and kernel-ci (continuous
        integration) (Daniel Lezcano)
    
      - Fix a bad error handling by returning the right value for cadence_ttc
        (Christophe Jaillet)
    
      - Fix typo in the Kconfig for the Samsung pwm (Alexandre Belloni)
    
      - Change functions to static for armada-370-xp and digicolor (Ben Dooks)
    
      - Add support for the rk3399 SoC timer by adding bindings and a slight
        change in the base address. Take the opportunity to add the DYNIRQ flag
        (Huang Tao)
    
      - Fix endian accessors for the Samsung pwm timer (Matthew Leach)
    
      - Add Oxford Semiconductor RPS Dual Timer driver (Neil Armstrong)
    
      - Add a kernel parameter to swich on/off the event stream feature of the arch
        arm timer (Will Deacon)

commit c35d9292fee0474a1a037f75b0b85af32200c76f
Author: Daniel Lezcano <daniel.lezcano@linaro.org>
Date:   Mon Apr 18 23:06:48 2016 +0200

    of: Add a new macro to declare_of for one parameter function returning a value
    
    The macro OF_DECLARE_1 expect a void (*func)(struct device_node *) while the
    OF_DECLARE_2 expect a int (*func)(struct device_node *, struct device_node *).
    
    The second one allows to pass an init function returning a value, which make
    possible to call the functions in the table and check the return value in order
    to catch at a higher level the errors and handle them from there instead of
    doing a panic in each driver (well at least this is the case for the clkevt).
    
    Unfortunately the OF_DECLARE_1 does not allow that and that lead to some code
    duplication and crappyness in the drivers.
    
    The OF_DECLARE_1 is used by all the clk drivers and the clocksource/clockevent
    drivers. It is not possible to do the change in one shot as we have to change
    all the init functions.
    
    The OF_DECLARE_2 specifies an init function prototype with two parameters with
    the node and its parent. The latter won't be used, ever, in the timer drivers.
    
    Introduce a OF_DECLARE_1_RET macro to be used, and hopefully we can smoothly
    and iteratively change the users of OF_DECLARE_1 to use the new macro instead.
    
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Acked-by: Rob Herring <robh@kernel.org>

diff --git a/include/linux/of.h b/include/linux/of.h
index c7292e8ea080..552943d37f40 100644
--- a/include/linux/of.h
+++ b/include/linux/of.h
@@ -1009,10 +1009,13 @@ static inline int of_get_available_child_count(const struct device_node *np)
 #endif
 
 typedef int (*of_init_fn_2)(struct device_node *, struct device_node *);
+typedef int (*of_init_fn_1_ret)(struct device_node *);
 typedef void (*of_init_fn_1)(struct device_node *);
 
 #define OF_DECLARE_1(table, name, compat, fn) \
 		_OF_DECLARE(table, name, compat, fn, of_init_fn_1)
+#define OF_DECLARE_1_RET(table, name, compat, fn) \
+		_OF_DECLARE(table, name, compat, fn, of_init_fn_1_ret)
 #define OF_DECLARE_2(table, name, compat, fn) \
 		_OF_DECLARE(table, name, compat, fn, of_init_fn_2)
 

commit 613e97218ccbd7f33895cad4525d861810a9d5d5
Author: Adam Thomson <Adam.Thomson.Opensource@diasemi.com>
Date:   Tue Jun 21 18:50:20 2016 +0100

    device property: Add function to search for named child of device
    
    For device nodes in both DT and ACPI, it possible to have named
    child nodes which contain properties (an existing example being
    gpio-leds). This adds a function to find a named child node for
    a device which can be used by drivers for property retrieval.
    
    For DT data node name matching, of_node_cmp() and similar functions
    are made available outside of CONFIG_OF block so the new function
    can reference these for DT and non-DT builds.
    
    For ACPI data node name matching, a helper function is also added
    which returns false if CONFIG_ACPI is not set, otherwise it
    performs a string comparison on the data node name. This avoids
    using the acpi_data_node struct for non CONFIG_ACPI builds,
    which would otherwise cause a build failure.
    
    Signed-off-by: Adam Thomson <Adam.Thomson.Opensource@diasemi.com>
    Acked-by: Sathyanarayana Nujella <sathyanarayana.nujella@intel.com>
    Acked-by: Rob Herring <robh@kernel.org>
    Acked-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Signed-off-by: Mark Brown <broonie@kernel.org>

diff --git a/include/linux/of.h b/include/linux/of.h
index c7292e8ea080..8455741e313e 100644
--- a/include/linux/of.h
+++ b/include/linux/of.h
@@ -238,13 +238,6 @@ static inline unsigned long of_read_ulong(const __be32 *cell, int size)
 #define OF_ROOT_NODE_SIZE_CELLS_DEFAULT 1
 #endif
 
-/* Default string compare functions, Allow arch asm/prom.h to override */
-#if !defined(of_compat_cmp)
-#define of_compat_cmp(s1, s2, l)	strcasecmp((s1), (s2))
-#define of_prop_cmp(s1, s2)		strcmp((s1), (s2))
-#define of_node_cmp(s1, s2)		strcasecmp((s1), (s2))
-#endif
-
 #define OF_IS_DYNAMIC(x) test_bit(OF_DYNAMIC, &x->_flags)
 #define OF_MARK_DYNAMIC(x) set_bit(OF_DYNAMIC, &x->_flags)
 
@@ -726,6 +719,13 @@ static inline void of_property_clear_flag(struct property *p, unsigned long flag
 #define of_match_node(_matches, _node)	NULL
 #endif /* CONFIG_OF */
 
+/* Default string compare functions, Allow arch asm/prom.h to override */
+#if !defined(of_compat_cmp)
+#define of_compat_cmp(s1, s2, l)	strcasecmp((s1), (s2))
+#define of_prop_cmp(s1, s2)		strcmp((s1), (s2))
+#define of_node_cmp(s1, s2)		strcasecmp((s1), (s2))
+#endif
+
 #if defined(CONFIG_OF) && defined(CONFIG_NUMA)
 extern int of_node_to_nid(struct device_node *np);
 #else

commit e93aeeae0bf8cba43e05484ae4ad17213ac6c3a7
Author: Kuninori Morimoto <kuninori.morimoto.gx@renesas.com>
Date:   Wed May 25 01:15:04 2016 +0000

    of: add missing const for of_parse_phandle_with_args() in !CONFIG_OF
    
    commit 93c667ca2598bd84f1bd3f2fa176af69707699fe
    ("of: *node argument to of_parse_phandle_with_args should be const")
    changed to const for struct device node *np,
    but it cares CONFIG_OF case only, !CONFIG_OF case need it too.
    
    Signed-off-by: Kuninori Morimoto <kuninori.morimoto.gx@renesas.com>
    Signed-off-by: Rob Herring <robh@kernel.org>

diff --git a/include/linux/of.h b/include/linux/of.h
index c7292e8ea080..74eb28cadbef 100644
--- a/include/linux/of.h
+++ b/include/linux/of.h
@@ -614,7 +614,7 @@ static inline struct device_node *of_parse_phandle(const struct device_node *np,
 	return NULL;
 }
 
-static inline int of_parse_phandle_with_args(struct device_node *np,
+static inline int of_parse_phandle_with_args(const struct device_node *np,
 					     const char *list_name,
 					     const char *cells_name,
 					     int index,

commit e7f44b65b532040ac90b73b60ea0b629742ced33
Merge: 76b584d3125a f2c27767af0a
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Fri May 20 14:51:34 2016 -0700

    Merge tag 'devicetree-for-4.7' of git://git.kernel.org/pub/scm/linux/kernel/git/robh/linux
    
    Pull devicetree updates from Rob Herring:
    
     - Rewrite of the unflattening code to avoid recursion and lessen the
       stack usage.
    
     - Rewrite of the phandle args parsing code to get rid of the fixed args
       size.  This is needed for IOMMU code.
    
     - Sync to latest dtc which adds more dts style checking.  These
       warnings are enabled with "W=1" compiles.
    
     - Tegra documentation updates related to the above warnings.
    
     - A bunch of spelling and other doc fixes.
    
     - Various vendor prefix additions.
    
    * tag 'devicetree-for-4.7' of git://git.kernel.org/pub/scm/linux/kernel/git/robh/linux: (52 commits)
      devicetree: Add Creative Technology vendor id
      gpio: dt-bindings: add ibm,ppc4xx-gpio binding
      of/unittest: Remove unnecessary module.h header inclusion
      drivers/of: Fix build warning in populate_node()
      drivers/of: Fix depth when unflattening devicetree
      of: dynamic: changeset prop-update revert fix
      drivers/of: Export of_detach_node()
      drivers/of: Return allocated memory from of_fdt_unflatten_tree()
      drivers/of: Specify parent node in of_fdt_unflatten_tree()
      drivers/of: Rename unflatten_dt_node()
      drivers/of: Avoid recursively calling unflatten_dt_node()
      drivers/of: Split unflatten_dt_node()
      of: include errno.h in of_graph.h
      of: document refcount incrementation of of_get_cpu_node()
      Documentation: dt: soc: fix spelling mistakes
      Documentation: dt: power: fix spelling mistake
      Documentation: dt: pinctrl: fix spelling mistake
      Documentation: dt: opp: fix spelling mistake
      Documentation: dt: net: fix spelling mistakes
      Documentation: dt: mtd: fix spelling mistake
      ...

commit be092017b6ffbd013f481f915632db6aa9fc3ca3
Merge: fb6363e9f4ee e6d9a5254333
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Mon May 16 17:17:24 2016 -0700

    Merge tag 'arm64-upstream' of git://git.kernel.org/pub/scm/linux/kernel/git/arm64/linux
    
    Pull arm64 updates from Will Deacon:
    
     - virt_to_page/page_address optimisations
    
     - support for NUMA systems described using device-tree
    
     - support for hibernate/suspend-to-disk
    
     - proper support for maxcpus= command line parameter
    
     - detection and graceful handling of AArch64-only CPUs
    
     - miscellaneous cleanups and non-critical fixes
    
    * tag 'arm64-upstream' of git://git.kernel.org/pub/scm/linux/kernel/git/arm64/linux: (92 commits)
      arm64: do not enforce strict 16 byte alignment to stack pointer
      arm64: kernel: Fix incorrect brk randomization
      arm64: cpuinfo: Missing NULL terminator in compat_hwcap_str
      arm64: secondary_start_kernel: Remove unnecessary barrier
      arm64: Ensure pmd_present() returns false after pmd_mknotpresent()
      arm64: Replace hard-coded values in the pmd/pud_bad() macros
      arm64: Implement pmdp_set_access_flags() for hardware AF/DBM
      arm64: Fix typo in the pmdp_huge_get_and_clear() definition
      arm64: mm: remove unnecessary EXPORT_SYMBOL_GPL
      arm64: always use STRICT_MM_TYPECHECKS
      arm64: kvm: Fix kvm teardown for systems using the extended idmap
      arm64: kaslr: increase randomization granularity
      arm64: kconfig: drop CONFIG_RTC_LIB dependency
      arm64: make ARCH_SUPPORTS_DEBUG_PAGEALLOC depend on !HIBERNATION
      arm64: hibernate: Refuse to hibernate if the boot cpu is offline
      arm64: kernel: Add support for hibernate/suspend-to-disk
      PM / Hibernate: Call flush_icache_range() on pages restored in-place
      arm64: Add new asm macro copy_page
      arm64: Promote KERNEL_START/KERNEL_END definitions to a header file
      arm64: kernel: Include _AC definition in page.h
      ...

commit 0224a4a30b57385a60065aa598181868881d8fc6
Author: Heikki Krogerus <heikki.krogerus@linux.intel.com>
Date:   Wed Apr 27 14:04:20 2016 +0300

    device property: Avoid potential dereferences of invalid pointers
    
    Since fwnode may hold ERR_PTR(-ENODEV) or it may be NULL,
    the fwnode type checks is_of_node(), is_acpi_node() and is
    is_pset_node() need to consider it. Using IS_ERR_OR_NULL()
    to check it.
    
    Fixes: 0d67e0fa1664 (device property: fix for a case of use-after-free)
    Reported-by: Dan Carpenter <dan.carpenter@oracle.com>
    Signed-off-by: Heikki Krogerus <heikki.krogerus@linux.intel.com>
    [ rjw: Subject & changelog ]
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>

diff --git a/include/linux/of.h b/include/linux/of.h
index 7fcb681baadf..31758036787c 100644
--- a/include/linux/of.h
+++ b/include/linux/of.h
@@ -133,7 +133,7 @@ void of_core_init(void);
 
 static inline bool is_of_node(struct fwnode_handle *fwnode)
 {
-	return fwnode && fwnode->type == FWNODE_OF;
+	return !IS_ERR_OR_NULL(fwnode) && fwnode->type == FWNODE_OF;
 }
 
 static inline struct device_node *to_of_node(struct fwnode_handle *fwnode)

commit abdaa77b18480361f3565d958a2acffad268c39c
Author: Joerg Roedel <jroedel@suse.de>
Date:   Mon Apr 4 17:49:21 2016 +0200

    of: Introduce of_phandle_iterator_args()
    
    This helper function can be used to copy the arguments of a
    phandle to an array.
    
    Signed-off-by: Joerg Roedel <jroedel@suse.de>
    Signed-off-by: Rob Herring <robh@kernel.org>

diff --git a/include/linux/of.h b/include/linux/of.h
index b0b80716fbfb..71e1c35a5960 100644
--- a/include/linux/of.h
+++ b/include/linux/of.h
@@ -359,6 +359,9 @@ extern int of_phandle_iterator_init(struct of_phandle_iterator *it,
 				    int cell_count);
 
 extern int of_phandle_iterator_next(struct of_phandle_iterator *it);
+extern int of_phandle_iterator_args(struct of_phandle_iterator *it,
+				    uint32_t *args,
+				    int size);
 
 extern void of_alias_scan(void * (*dt_alloc)(u64 size, u64 align));
 extern int of_alias_get_id(struct device_node *np, const char *stem);
@@ -648,6 +651,13 @@ static inline int of_phandle_iterator_next(struct of_phandle_iterator *it)
 	return -ENOSYS;
 }
 
+static inline int of_phandle_iterator_args(struct of_phandle_iterator *it,
+					   uint32_t *args,
+					   int size)
+{
+	return 0;
+}
+
 static inline int of_alias_get_id(struct device_node *np, const char *stem)
 {
 	return -ENOSYS;

commit f623ce95a51baee6a6638f0b025efc0229a9ac0d
Author: Joerg Roedel <jroedel@suse.de>
Date:   Mon Apr 4 17:49:20 2016 +0200

    of: Introduce of_for_each_phandle() helper macro
    
    With this macro any user can easily iterate over a list of
    phandles. The patch also converts __of_parse_phandle_with_args()
    to make use of the macro.
    
    The of_count_phandle_with_args() function is not converted,
    because the macro hides the return value of of_phandle_iterator_init(),
    which is needed in there.
    
    Signed-off-by: Joerg Roedel <jroedel@suse.de>
    Signed-off-by: Rob Herring <robh@kernel.org>

diff --git a/include/linux/of.h b/include/linux/of.h
index 1f5e108f6716..b0b80716fbfb 100644
--- a/include/linux/of.h
+++ b/include/linux/of.h
@@ -908,6 +908,12 @@ static inline int of_property_read_s32(const struct device_node *np,
 	return of_property_read_u32(np, propname, (u32*) out_value);
 }
 
+#define of_for_each_phandle(it, err, np, ln, cn, cc)			\
+	for (of_phandle_iterator_init((it), (np), (ln), (cn), (cc)),	\
+	     err = of_phandle_iterator_next(it);			\
+	     err == 0;							\
+	     err = of_phandle_iterator_next(it))
+
 #define of_property_for_each_u32(np, propname, prop, p, u)	\
 	for (prop = of_find_property(np, propname, NULL),	\
 		p = of_prop_next_u32(prop, NULL, &u);		\

commit cd209b412c8a5d632b51af1e45576f0d00b8105f
Author: Joerg Roedel <jroedel@suse.de>
Date:   Mon Apr 4 17:49:18 2016 +0200

    of: Move phandle walking to of_phandle_iterator_next()
    
    Move the code to walk over the phandles out of the loop in
    __of_parse_phandle_with_args() to a separate function that
    just works with the iterator handle: of_phandle_iterator_next().
    
    Signed-off-by: Joerg Roedel <jroedel@suse.de>
    Signed-off-by: Rob Herring <robh@kernel.org>

diff --git a/include/linux/of.h b/include/linux/of.h
index 0f187dbb890b..1f5e108f6716 100644
--- a/include/linux/of.h
+++ b/include/linux/of.h
@@ -358,6 +358,8 @@ extern int of_phandle_iterator_init(struct of_phandle_iterator *it,
 				    const char *cells_name,
 				    int cell_count);
 
+extern int of_phandle_iterator_next(struct of_phandle_iterator *it);
+
 extern void of_alias_scan(void * (*dt_alloc)(u64 size, u64 align));
 extern int of_alias_get_id(struct device_node *np, const char *stem);
 extern int of_alias_get_highest_id(const char *stem);
@@ -641,6 +643,11 @@ static inline int of_phandle_iterator_init(struct of_phandle_iterator *it,
 	return -ENOSYS;
 }
 
+static inline int of_phandle_iterator_next(struct of_phandle_iterator *it)
+{
+	return -ENOSYS;
+}
+
 static inline int of_alias_get_id(struct device_node *np, const char *stem)
 {
 	return -ENOSYS;

commit 74e1fbb1375a3ede3e17da22911761ce9bc8f53f
Author: Joerg Roedel <jroedel@suse.de>
Date:   Mon Apr 4 17:49:17 2016 +0200

    of: Introduce struct of_phandle_iterator
    
    This struct carrys all necessary information to iterate over
    a list of phandles and extract the arguments. Add an
    init-function for the iterator and make use of it in
    __of_parse_phandle_with_args().
    
    Signed-off-by: Joerg Roedel <jroedel@suse.de>
    Signed-off-by: Rob Herring <robh@kernel.org>

diff --git a/include/linux/of.h b/include/linux/of.h
index 7fcb681baadf..0f187dbb890b 100644
--- a/include/linux/of.h
+++ b/include/linux/of.h
@@ -75,6 +75,23 @@ struct of_phandle_args {
 	uint32_t args[MAX_PHANDLE_ARGS];
 };
 
+struct of_phandle_iterator {
+	/* Common iterator information */
+	const char *cells_name;
+	int cell_count;
+	const struct device_node *parent;
+
+	/* List size information */
+	const __be32 *list_end;
+	const __be32 *phandle_end;
+
+	/* Current position state */
+	const __be32 *cur;
+	uint32_t cur_count;
+	phandle phandle;
+	struct device_node *node;
+};
+
 struct of_reconfig_data {
 	struct device_node	*dn;
 	struct property		*prop;
@@ -334,6 +351,13 @@ extern int of_parse_phandle_with_fixed_args(const struct device_node *np,
 extern int of_count_phandle_with_args(const struct device_node *np,
 	const char *list_name, const char *cells_name);
 
+/* phandle iterator functions */
+extern int of_phandle_iterator_init(struct of_phandle_iterator *it,
+				    const struct device_node *np,
+				    const char *list_name,
+				    const char *cells_name,
+				    int cell_count);
+
 extern void of_alias_scan(void * (*dt_alloc)(u64 size, u64 align));
 extern int of_alias_get_id(struct device_node *np, const char *stem);
 extern int of_alias_get_highest_id(const char *stem);
@@ -608,6 +632,15 @@ static inline int of_count_phandle_with_args(struct device_node *np,
 	return -ENOSYS;
 }
 
+static inline int of_phandle_iterator_init(struct of_phandle_iterator *it,
+					   const struct device_node *np,
+					   const char *list_name,
+					   const char *cells_name,
+					   int cell_count)
+{
+	return -ENOSYS;
+}
+
 static inline int of_alias_get_id(struct device_node *np, const char *stem)
 {
 	return -ENOSYS;

commit 298535c00a2cbcd59e38f8f1c0c9ae7b9911e946
Author: David Daney <david.daney@cavium.com>
Date:   Fri Apr 8 15:50:25 2016 -0700

    of, numa: Add NUMA of binding implementation.
    
    Add device tree parsing for NUMA topology using device
    "numa-node-id" property in distance-map and cpu nodes.
    
    This is a complete rewrite of a previous patch by:
       Ganapatrao Kulkarni<gkulkarni@caviumnetworks.com>
    
    Signed-off-by: David Daney <david.daney@cavium.com>
    Acked-by: Rob Herring <robh@kernel.org>
    Signed-off-by: Will Deacon <will.deacon@arm.com>

diff --git a/include/linux/of.h b/include/linux/of.h
index 7fcb681baadf..76f07c84040f 100644
--- a/include/linux/of.h
+++ b/include/linux/of.h
@@ -685,6 +685,15 @@ static inline int of_node_to_nid(struct device_node *device)
 }
 #endif
 
+#ifdef CONFIG_OF_NUMA
+extern int of_numa_init(void);
+#else
+static inline int of_numa_init(void)
+{
+	return -ENOSYS;
+}
+#endif
+
 static inline struct device_node *of_find_matching_node(
 	struct device_node *from,
 	const struct of_device_id *matches)

commit 31e182363b39d84031eadf0caf6d99fd9eb056f0
Merge: 1200b6809dfd 5027e19db8ce
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Sat Mar 19 15:15:07 2016 -0700

    Merge tag 'devicetree-for-4.6' of git://git.kernel.org/pub/scm/linux/kernel/git/robh/linux
    
    Pull DeviceTree updates from Rob Herring:
    
     - new tool 'dtx_diff' to diff DT files
    
     - sync kernel's dtc/libfdt to current dtc repo master
    
     - fix for reserved memory regions located in highmem
    
     - document standard unit suffixes for DT properties
    
     - various DT binding doc updates
    
    * tag 'devicetree-for-4.6' of git://git.kernel.org/pub/scm/linux/kernel/git/robh/linux:
      of: Add vendor prefix for eGalax_eMPIA Technology Inc
      Input: ads7846: Add description how to use internal reference (ADS7846)
      ARM: realview: add EB syscon variants to bindings
      devicetree: bindings: ARM: Use "uV" for micro-volt
      serial: fsl-imx-uart: Fix typo in fsl,dte-mode description
      of: add 'const' for of_property_*_string*() parameter '*np'
      of/unittest: fix infinite loop in of_unittest_destroy_tracked_overlays()
      of: alloc anywhere from memblock if range not specified
      kbuild: Allow using host dtc instead of kernel's copy
      of: resolver: Add missing of_node_get and of_node_put
      of: Add United Radiant Technology Corporation vendor prefix
      dt/bindings: add documentation on standard property unit suffixes
      scripts/dtc: Update to upstream commit b06e55c88b9b
      ARM: boot: Add an implementation of strnlen for libfdt
      scripts/dtc: dtx_diff - add info to error message
      dtc: create tool to diff device trees

commit fe99c707fc7bb0baba75b26ed585ee3464612dbe
Author: David Rivshin <drivshin@allworx.com>
Date:   Wed Mar 2 16:35:51 2016 -0500

    of: add 'const' for of_property_*_string*() parameter '*np'
    
    The of_property_{read,count,match}_string* family of functions never
    modify the struct device_node pointer that is passed in, so there is no
    reason for it to be non-const. Equivalent functions for all other types
    already take a 'const struct device_node *np'.
    
    Signed-off-by: David Rivshin <drivshin@allworx.com>
    Signed-off-by: Rob Herring <robh@kernel.org>

diff --git a/include/linux/of.h b/include/linux/of.h
index dd10626a615f..588fdd5d21ad 100644
--- a/include/linux/of.h
+++ b/include/linux/of.h
@@ -296,13 +296,13 @@ extern int of_property_read_u64_array(const struct device_node *np,
 				      u64 *out_values,
 				      size_t sz);
 
-extern int of_property_read_string(struct device_node *np,
+extern int of_property_read_string(const struct device_node *np,
 				   const char *propname,
 				   const char **out_string);
-extern int of_property_match_string(struct device_node *np,
+extern int of_property_match_string(const struct device_node *np,
 				    const char *propname,
 				    const char *string);
-extern int of_property_read_string_helper(struct device_node *np,
+extern int of_property_read_string_helper(const struct device_node *np,
 					      const char *propname,
 					      const char **out_strs, size_t sz, int index);
 extern int of_device_is_compatible(const struct device_node *device,
@@ -538,14 +538,14 @@ static inline int of_property_read_u64_array(const struct device_node *np,
 	return -ENOSYS;
 }
 
-static inline int of_property_read_string(struct device_node *np,
+static inline int of_property_read_string(const struct device_node *np,
 					  const char *propname,
 					  const char **out_string)
 {
 	return -ENOSYS;
 }
 
-static inline int of_property_read_string_helper(struct device_node *np,
+static inline int of_property_read_string_helper(const struct device_node *np,
 						 const char *propname,
 						 const char **out_strs, size_t sz, int index)
 {
@@ -571,7 +571,7 @@ static inline int of_property_read_u64(const struct device_node *np,
 	return -ENOSYS;
 }
 
-static inline int of_property_match_string(struct device_node *np,
+static inline int of_property_match_string(const struct device_node *np,
 					   const char *propname,
 					   const char *string)
 {
@@ -773,7 +773,7 @@ static inline int of_property_count_u64_elems(const struct device_node *np,
  *
  * If @out_strs is NULL, the number of strings in the property is returned.
  */
-static inline int of_property_read_string_array(struct device_node *np,
+static inline int of_property_read_string_array(const struct device_node *np,
 						const char *propname, const char **out_strs,
 						size_t sz)
 {
@@ -792,7 +792,7 @@ static inline int of_property_read_string_array(struct device_node *np,
  * does not have a value, and -EILSEQ if the string is not null-terminated
  * within the length of the property data.
  */
-static inline int of_property_count_strings(struct device_node *np,
+static inline int of_property_count_strings(const struct device_node *np,
 					    const char *propname)
 {
 	return of_property_read_string_helper(np, propname, NULL, 0, 0);
@@ -816,7 +816,7 @@ static inline int of_property_count_strings(struct device_node *np,
  *
  * The out_string pointer is modified only if a valid string can be decoded.
  */
-static inline int of_property_read_string_index(struct device_node *np,
+static inline int of_property_read_string_index(const struct device_node *np,
 						const char *propname,
 						int index, const char **output)
 {

commit 71f50c6d9a2276f3ec85384bffe2aee1962f4669
Author: Masahiro Yamada <yamada.masahiro@socionext.com>
Date:   Fri Jan 22 01:33:51 2016 +0900

    of: drop symbols declared by _OF_DECLARE() from modules
    
    The users of this macro (OF_EARLYCON_DECLARE, CLK_OF_DECLARE,
    IRQCHIP_DECLARE, etc.) are only parsed in the early boot stage.
    Such symbols contained in modules are never used.
    
    This commit fixes the link error introduced by commit b8d20e06eaad
    ("serial: 8250_uniphier: add earlycon support"); the combination
    of CONFIG_SERIAL_8250_UNIPHIER=m and CONFIG_SERIAL_8250_CONSOLE=y
    fails to link:
    
    ERROR: "early_serial8250_setup" [drivers/tty/serial/8250/8250_uniphier.ko] undefined!
    
    Fixes: b8d20e06eaad ("serial: 8250_uniphier: add earlycon support")
    Signed-off-by: Masahiro Yamada <yamada.masahiro@socionext.com>
    Acked-by: Arnd Bergmann <arnd@arndb.de>
    Signed-off-by: Rob Herring <robh@kernel.org>

diff --git a/include/linux/of.h b/include/linux/of.h
index dd10626a615f..dc6e39696b64 100644
--- a/include/linux/of.h
+++ b/include/linux/of.h
@@ -929,7 +929,7 @@ static inline int of_get_available_child_count(const struct device_node *np)
 	return num;
 }
 
-#ifdef CONFIG_OF
+#if defined(CONFIG_OF) && !defined(MODULE)
 #define _OF_DECLARE(table, name, compat, fn, fn_type)			\
 	static const struct of_device_id __of_table_##name		\
 		__used __section(__##table##_of_table)			\

commit b1d06b60e90cd5016798b9984f8e420e753f4846
Author: Guenter Roeck <linux@roeck-us.net>
Date:   Fri Nov 6 19:28:22 2015 -0800

    of: Provide static inline function for of_translate_address if needed
    
    If OF_ADDRESS is not configured, builds can fail with errors such as
    
    drivers/net/ethernet/hisilicon/hns_mdio.c:
            In function 'hns_mdio_bus_name':
    drivers/net/ethernet/hisilicon/hns_mdio.c:411:3:
            error: implicit declaration of function 'of_translate_address'
    
    as currently seen when building sparc:allmodconfig.
    
    Introduce a static inline function if OF_ADDRESS is not configured to fix
    the build failure. Return OF_BAD_ADDR in this case. For this to work, the
    definition of OF_BAD_ADDR has to be moved outside CONFIG_OF conditional
    code.
    
    Fixes: 876133d3161d ("net: hisilicon: add OF dependency")
    Cc: Arnd Bergmann <arnd@arndb.de>
    Signed-off-by: Guenter Roeck <linux@roeck-us.net>
    Reviewed-by: Arnd Bergmann <arnd@arndb.de>
    Reviewed-by: Frank Rowand <frank.rowand@sonymobile.com>
    Signed-off-by: Rob Herring <robh@kernel.org>

diff --git a/include/linux/of.h b/include/linux/of.h
index 2194b8ca41f9..dd10626a615f 100644
--- a/include/linux/of.h
+++ b/include/linux/of.h
@@ -126,6 +126,8 @@ extern raw_spinlock_t devtree_lock;
 #define OF_POPULATED	3 /* device already created for the node */
 #define OF_POPULATED_BUS	4 /* of_platform_populate recursed to children of this node */
 
+#define OF_BAD_ADDR	((u64)-1)
+
 #ifdef CONFIG_OF
 void of_core_init(void);
 
@@ -229,8 +231,6 @@ static inline unsigned long of_read_ulong(const __be32 *cell, int size)
 #define OF_IS_DYNAMIC(x) test_bit(OF_DYNAMIC, &x->_flags)
 #define OF_MARK_DYNAMIC(x) set_bit(OF_DYNAMIC, &x->_flags)
 
-#define OF_BAD_ADDR	((u64)-1)
-
 static inline const char *of_node_full_name(const struct device_node *np)
 {
 	return np ? np->full_name : "<no-node>";

commit 4bf011815f2e093c7f60004f4f5683cf40b905b9
Author: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
Date:   Mon Aug 10 19:56:46 2015 +0300

    device property: check fwnode type in to_of_node()
    
    Potentially one of platform can support both ACPI and OF. In that case when we
    call to_of_node() for non-OF fwnode types we will get non-NULL result, which is
    wrong. Check for the type and return a correspondent result.
    
    Signed-off-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    Reviewed-by: Mika Westerberg <mika.westerberg@linux.intel.com>
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>

diff --git a/include/linux/of.h b/include/linux/of.h
index edc068d19c79..2194b8ca41f9 100644
--- a/include/linux/of.h
+++ b/include/linux/of.h
@@ -136,7 +136,8 @@ static inline bool is_of_node(struct fwnode_handle *fwnode)
 
 static inline struct device_node *to_of_node(struct fwnode_handle *fwnode)
 {
-	return fwnode ? container_of(fwnode, struct device_node, fwnode) : NULL;
+	return is_of_node(fwnode) ?
+		container_of(fwnode, struct device_node, fwnode) : NULL;
 }
 
 static inline bool of_have_populated_dt(void)

commit 4da3064d1775810f10f7ddc1c34c3f1ff502a654
Merge: 93899e39e86b 48a9b733e644
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Wed Jul 1 19:40:18 2015 -0700

    Merge tag 'devicetree-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/glikely/linux
    
    Pull devicetree updates from Grant Likely:
     "A whole lot of bug fixes.
    
      Nothing stands out here except the ability to enable CONFIG_OF on
      every architecture, and an import of a newer version of dtc"
    
    * tag 'devicetree-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/glikely/linux: (22 commits)
      of/irq: Rename "intc_desc" to "of_intc_desc" to fix OF on sh
      of/irq: Fix pSeries boot failure
      Documentation: DT: Fix a typo in the filename "lantiq,<chip>-pinumx.txt"
      of: define of_find_node_by_phandle for !CONFIG_OF
      of/address: use atomic allocation in pci_register_io_range()
      of: Add vendor prefix for Zodiac Inflight Innovations
      dt/fdt: add empty versions of early_init_dt_*_memory_arch
      of: clean-up unnecessary libfdt include paths
      of: make unittest select OF_EARLY_FLATTREE instead of depend on it
      of: make CONFIG_OF user selectable
      MIPS: prepare for user enabling of CONFIG_OF
      of/fdt: fix argument name and add comments of unflatten_dt_node()
      of: return NUMA_NO_NODE from fallback of_node_to_nid()
      tps6507x.txt: Remove executable permission
      of/overlay: Grammar s/an negative/a negative/
      of/fdt: Make fdt blob input parameters of unflatten functions const
      of: add helper function to retrive match data
      of: Grammar s/property exist/property exists/
      of: Move OF flags to be visible even when !CONFIG_OF
      scripts/dtc: Update to upstream version 9d3649bd3be245c9
      ...

commit becfc3c86df963491ff1d5ffc6131a06af6bb851
Merge: ce32f859646b 0b34c1a489f6
Author: Grant Likely <grant.likely@linaro.org>
Date:   Tue Jun 30 14:28:52 2015 +0100

    Merge remote-tracking branch 'robh/for-next' into devicetree/next

commit c181fb3e723351e2f7a1f76b6c0627a4b8ad1723
Author: Alexander Sverdlin <alexander.sverdlin@gmail.com>
Date:   Mon Jun 22 22:38:53 2015 +0200

    ACPI / OF: Rename of_node() and acpi_node() to to_of_node() and to_acpi_node()
    
    Commit 8a0662d9 introduced of_node and acpi_node symbols in global namespace
    but there were already ~63 of_node local variables or function parameters
    (no single acpi_node though, but anyway).
    
    After debugging undefined but used of_node local varible (which turned out
    to reference static function of_node() instead) it became clear that the names
    for the functions are too short and too generic for global scope.
    
    Signed-off-by: Alexander Sverdlin <alexander.sverdlin@gmail.com>
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>

diff --git a/include/linux/of.h b/include/linux/of.h
index b871ff9d81d7..f05fdcea4e66 100644
--- a/include/linux/of.h
+++ b/include/linux/of.h
@@ -128,7 +128,7 @@ static inline bool is_of_node(struct fwnode_handle *fwnode)
 	return fwnode && fwnode->type == FWNODE_OF;
 }
 
-static inline struct device_node *of_node(struct fwnode_handle *fwnode)
+static inline struct device_node *to_of_node(struct fwnode_handle *fwnode)
 {
 	return fwnode ? container_of(fwnode, struct device_node, fwnode) : NULL;
 }
@@ -387,7 +387,7 @@ static inline bool is_of_node(struct fwnode_handle *fwnode)
 	return false;
 }
 
-static inline struct device_node *of_node(struct fwnode_handle *fwnode)
+static inline struct device_node *to_of_node(struct fwnode_handle *fwnode)
 {
 	return NULL;
 }

commit ce16b9d2356125eb791bd920c710b8512eecce54
Author: Suman Anna <s-anna@ti.com>
Date:   Wed Jun 17 11:53:53 2015 -0500

    of: define of_find_node_by_phandle for !CONFIG_OF
    
    Define stub implementation for of_find_node_by_phandle() API
    so that users of this API can build properly even when CONFIG_OF
    is not defined.
    
    Fixes x86 randconfig build failure of remoteproc.
    
    Signed-off-by: Suman Anna <s-anna@ti.com>
    [robh: add details on fixing remoteproc compile]
    Signed-off-by: Rob Herring <robh@kernel.org>

diff --git a/include/linux/of.h b/include/linux/of.h
index a3eb9d1e5800..54f858798e8c 100644
--- a/include/linux/of.h
+++ b/include/linux/of.h
@@ -422,6 +422,11 @@ static inline struct device_node *of_find_node_opts_by_path(const char *path,
 	return NULL;
 }
 
+static inline struct device_node *of_find_node_by_phandle(phandle handle)
+{
+	return NULL;
+}
+
 static inline struct device_node *of_get_parent(const struct device_node *node)
 {
 	return NULL;

commit c8fff7bc5bba6bd59cad40441c189c4efe7190f6
Author: Konstantin Khlebnikov <khlebnikov@yandex-team.ru>
Date:   Wed Apr 8 19:59:20 2015 +0300

    of: return NUMA_NO_NODE from fallback of_node_to_nid()
    
    Node 0 might be offline as well as any other numa node,
    in this case kernel cannot handle memory allocation and crashes.
    
    Signed-off-by: Konstantin Khlebnikov <khlebnikov@yandex-team.ru>
    Fixes: 0c3f061c195c ("of: implement of_node_to_nid as a weak function")
    Signed-off-by: Grant Likely <grant.likely@linaro.org>

diff --git a/include/linux/of.h b/include/linux/of.h
index ddeaae6d2083..ab071742c0c4 100644
--- a/include/linux/of.h
+++ b/include/linux/of.h
@@ -667,7 +667,10 @@ static inline void of_property_clear_flag(struct property *p, unsigned long flag
 #if defined(CONFIG_OF) && defined(CONFIG_NUMA)
 extern int of_node_to_nid(struct device_node *np);
 #else
-static inline int of_node_to_nid(struct device_node *device) { return 0; }
+static inline int of_node_to_nid(struct device_node *device)
+{
+	return NUMA_NO_NODE;
+}
 #endif
 
 static inline struct device_node *of_find_matching_node(

commit 31712c98f8180c7bd3f33eefa461f0e1142e18f5
Author: Geert Uytterhoeven <geert+renesas@glider.be>
Date:   Mon May 4 19:42:19 2015 +0200

    of: Grammar s/property exist/property exists/
    
    Signed-off-by: Geert Uytterhoeven <geert+renesas@glider.be>
    Signed-off-by: Rob Herring <robh@kernel.org>

diff --git a/include/linux/of.h b/include/linux/of.h
index 9b32cbdf0230..a3eb9d1e5800 100644
--- a/include/linux/of.h
+++ b/include/linux/of.h
@@ -815,7 +815,7 @@ static inline int of_property_read_string_index(struct device_node *np,
  * @propname:	name of the property to be searched.
  *
  * Search for a property in a device node.
- * Returns true if the property exist false otherwise.
+ * Returns true if the property exists false otherwise.
  */
 static inline bool of_property_read_bool(const struct device_node *np,
 					 const char *propname)

commit 391b459d7623b26153c7d8c200e8d213440a7d48
Author: Pantelis Antoniou <pantelis.antoniou@konsulko.com>
Date:   Fri Apr 24 12:41:56 2015 +0300

    of: Move OF flags to be visible even when !CONFIG_OF
    
    We need those to be visible even when compiling with CONFIG_OF
    disabled, since even the empty of_node_*_flag() method use the
    flag.
    
    Signed-off-by: Pantelis Antoniou <pantelis.antoniou@konsulko.com>
    Acked-by: Wolfram Sang <wsa+renesas@sang-engineering.com>
    Signed-off-by: Rob Herring <robh@kernel.org>

diff --git a/include/linux/of.h b/include/linux/of.h
index ddeaae6d2083..9b32cbdf0230 100644
--- a/include/linux/of.h
+++ b/include/linux/of.h
@@ -120,6 +120,12 @@ extern struct device_node *of_aliases;
 extern struct device_node *of_stdout;
 extern raw_spinlock_t devtree_lock;
 
+/* flag descriptions (need to be visible even when !CONFIG_OF) */
+#define OF_DYNAMIC	1 /* node and properties were allocated via kmalloc */
+#define OF_DETACHED	2 /* node has been detached from the device tree */
+#define OF_POPULATED	3 /* device already created for the node */
+#define OF_POPULATED_BUS	4 /* of_platform_populate recursed to children of this node */
+
 #ifdef CONFIG_OF
 static inline bool is_of_node(struct fwnode_handle *fwnode)
 {
@@ -217,12 +223,6 @@ static inline unsigned long of_read_ulong(const __be32 *cell, int size)
 #define of_node_cmp(s1, s2)		strcasecmp((s1), (s2))
 #endif
 
-/* flag descriptions */
-#define OF_DYNAMIC	1 /* node and properties were allocated via kmalloc */
-#define OF_DETACHED	2 /* node has been detached from the device tree */
-#define OF_POPULATED	3 /* device already created for the node */
-#define OF_POPULATED_BUS	4 /* of_platform_populate recursed to children of this node */
-
 #define OF_IS_DYNAMIC(x) test_bit(OF_DYNAMIC, &x->_flags)
 #define OF_MARK_DYNAMIC(x) set_bit(OF_DYNAMIC, &x->_flags)
 

commit 194ec9368c0dbc421acdb2620d4dfb3cc3d022ff
Author: Sudeep Holla <sudeep.holla@arm.com>
Date:   Thu May 14 15:28:24 2015 +0100

    drivers: of/base: move of_init to driver_init
    
    Commit 5590f3196b29 ("drivers/core/of: Add symlink to device-tree from
    devices with an OF node") adds the symlink `of_node` for each device
    pointing to it's device tree node while creating/initialising it.
    
    However the devicetree sysfs is created and setup in of_init which is
    executed at core_initcall level. For all the devices created before
    of_init, the following error is thrown:
            "Error -2(-ENOENT) creating of_node link"
    
    Like many other components in driver model, initialize the sysfs support
    for OF/devicetree from driver_init so that it's ready before any devices
    are created.
    
    Fixes: 5590f3196b29 ("drivers/core/of: Add symlink to device-tree from
            devices with an OF node")
    Suggested-by: Rob Herring <robh+dt@kernel.org>
    Cc: Grant Likely <grant.likely@linaro.org>
    Cc: Pawel Moll <pawel.moll@arm.com>
    Cc: Benjamin Herrenschmidt <benh@kernel.crashing.org>
    Signed-off-by: Sudeep Holla <sudeep.holla@arm.com>
    Tested-by: Robert Schwebel <r.schwebel@pengutronix.de>
    Acked-by: Rob Herring <robh@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/include/linux/of.h b/include/linux/of.h
index ddeaae6d2083..b871ff9d81d7 100644
--- a/include/linux/of.h
+++ b/include/linux/of.h
@@ -121,6 +121,8 @@ extern struct device_node *of_stdout;
 extern raw_spinlock_t devtree_lock;
 
 #ifdef CONFIG_OF
+void of_core_init(void);
+
 static inline bool is_of_node(struct fwnode_handle *fwnode)
 {
 	return fwnode && fwnode->type == FWNODE_OF;
@@ -376,6 +378,10 @@ bool of_console_check(struct device_node *dn, char *name, int index);
 
 #else /* CONFIG_OF */
 
+static inline void of_core_init(void)
+{
+}
+
 static inline bool is_of_node(struct fwnode_handle *fwnode)
 {
 	return false;

commit d56a669ca59c37ed0a7282a251b2f2f22533343a
Merge: 836ee4874e20 04fca0e390e8
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Fri Apr 24 08:46:18 2015 -0700

    Merge tag 'devicetree-for-4.1' of git://git.kernel.org/pub/scm/linux/kernel/git/robh/linux
    
    Pull second batch of devicetree updates from Rob Herring:
     "As Grant mentioned in the first devicetree pull request, here is the
      2nd batch of DT changes for 4.1.  The main remaining item here is the
      endianness bindings and related 8250 driver support.
    
       - DT endianness specification bindings
    
       - big-endian 8250 serial support
    
       - DT overlay unittest updates
    
       - various DT doc updates
    
       - compile fixes for OF_IRQ=n"
    
    * tag 'devicetree-for-4.1' of git://git.kernel.org/pub/scm/linux/kernel/git/robh/linux:
      frv: add io{read,write}{16,32}be functions
      mn10300: add io{read,write}{16,32}be functions
      Documentation: DT bindings: add doc for Altera's SoCFPGA platform
      of: base: improve of_get_next_child() kernel-doc
      Doc: dt: arch_timer: discourage clock-frequency use
      of: unittest: overlay: Keep track of created overlays
      of/fdt: fix allocation size for device node path
      serial: of_serial: Support big-endian register accesses
      serial: 8250: Add support for big-endian MMIO accesses
      of: Document {little,big,native}-endian bindings
      of/fdt: Add endianness helper function for early init code
      of: Add helper function to check MMIO register endianness
      of/fdt: Remove "reg" data prints from early_init_dt_scan_memory
      of: add vendor prefix for Artesyn
      of: Add dummy of_irq_to_resource_table() for IRQ_OF=n
      of: OF_IRQ should depend on IRQ_DOMAIN

commit 7505256626b0b3d11ea5a3ec1a89046d07c3c366
Merge: 510965dd4a0a a2166ca5f320
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Sat Apr 18 08:30:10 2015 -0400

    Merge tag 'devicetree-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/glikely/linux
    
    Pull devicetree changes from Grant Likely:
     "Here are the devicetree changes queued up for v4.1.  Nothing really
      exciting here.  Rob has another few commits for big-endian attached
      UARTs, but those will be sent in a separate merge request since they
      haven't been as thoroughly tested as this batch.
    
      Here are the highlights:
    
       - lots of unittest cleanup from Frank Rowand
    
       - bugfixes and updates to the of_graph code
    
       - tighten up of_get_mac_address() code
    
       - documentation updates"
    
    * tag 'devicetree-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/glikely/linux:
      of/unittest: Fix of_platform_depopulate test case
      of/unittest: early return from test skips tests
      of/unittest: breadcrumbs to reduce pain of future maintainers
      of/unittest: reduce checkpatch noise - line after declarations
      of/unittest: typo in error string
      of/unittest: add const where needed
      of_net: factor out repetitive code from of_get_mac_address()
      drivers/of: Add empty ranges quirk for PA-Semi
      of: Allow selection of OF_DYNAMIC and OF_OVERLAY if OF_UNITTEST
      of: Empty node & property flag accessors when !OF
      of: Explicitly include linux/types.h in of_graph.h
      dt-bindings: brcm: rationalize Broadcom documentation naming
      of/unittest: replace 'selftest' with 'unittest'
      Documentation: rename of_selftest.txt to of_unittest.txt
      Documentation: update the of_selftest.txt
      dt: OF_UNITTEST make dependency broken
      MAINTAINERS: Pantelis Antoniou device tree overlay maintainer
      of: Add of_graph_get_port_by_id function
      of: Add for_each_endpoint_of_node helper macro
      of: Decrement refcount of previous endpoint in of_graph_get_next_endpoint

commit 37786c7fee40771d13901de129af7e084ed48b55
Author: Kevin Cernekee <cernekee@gmail.com>
Date:   Thu Apr 9 13:05:14 2015 -0700

    of: Add helper function to check MMIO register endianness
    
    SoC peripherals can come in several different flavors:
    
     - little-endian: registers always need to be accessed in LE mode (so the
       kernel should perform a swap if the CPU is running BE)
    
     - big-endian: registers always need to be accessed in BE mode (so the
       kernel should perform a swap if the CPU is running LE)
    
     - native-endian: the bus will automatically swap accesses, so the kernel
       should never swap
    
    Introduce a function that checks an OF device node to see whether it
    contains a "big-endian" or "native-endian" property.  For the former case,
    always return true.  For the latter case, return true iff the kernel was
    built for BE (implying that the BE MMIO accessors do not perform a swap).
    Otherwise return false, assuming LE registers.
    
    LE registers are assumed by default because most existing drivers (libahci,
    serial8250, usb) always use readl/writel in the absence of instructions
    to the contrary, so that will be our fallback.
    
    Signed-off-by: Kevin Cernekee <cernekee@gmail.com>
    Reviewed-by: Peter Hurley <peter@hurleysoftware.com>
    Acked-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Rob Herring <robh@kernel.org>

diff --git a/include/linux/of.h b/include/linux/of.h
index dfde07e77a63..a0cd62ef22db 100644
--- a/include/linux/of.h
+++ b/include/linux/of.h
@@ -305,6 +305,7 @@ extern int of_property_read_string_helper(struct device_node *np,
 extern int of_device_is_compatible(const struct device_node *device,
 				   const char *);
 extern bool of_device_is_available(const struct device_node *device);
+extern bool of_device_is_big_endian(const struct device_node *device);
 extern const void *of_get_property(const struct device_node *node,
 				const char *name,
 				int *lenp);
@@ -466,6 +467,11 @@ static inline bool of_device_is_available(const struct device_node *device)
 	return false;
 }
 
+static inline bool of_device_is_big_endian(const struct device_node *device)
+{
+	return false;
+}
+
 static inline struct property *of_find_property(const struct device_node *np,
 						const char *name,
 						int *lenp)

commit 0384e8c6c6fa49dae44ffad31958e9b897da0160
Author: Pantelis Antoniou <pantelis.antoniou@konsulko.com>
Date:   Wed Jan 21 19:05:57 2015 +0200

    of: Empty node & property flag accessors when !OF
    
    Introduce empty node and property flag accessors when CONFIG_OF is not
    defined.  This allows us to use them without ifdef'ing them in places
    where it makes sense to do so.
    
    Signed-off-by: Pantelis Antoniou <pantelis.antoniou@konsulko.com>
    Acked-by: Rob Herring <robh@kernel.org>
    Signed-off-by: Grant Likely <grant.likely@linaro.org>

diff --git a/include/linux/of.h b/include/linux/of.h
index dfde07e77a63..7ede4496bad6 100644
--- a/include/linux/of.h
+++ b/include/linux/of.h
@@ -616,6 +616,38 @@ static inline const char *of_prop_next_string(struct property *prop,
 	return NULL;
 }
 
+static inline int of_node_check_flag(struct device_node *n, unsigned long flag)
+{
+	return 0;
+}
+
+static inline int of_node_test_and_set_flag(struct device_node *n,
+					    unsigned long flag)
+{
+	return 0;
+}
+
+static inline void of_node_set_flag(struct device_node *n, unsigned long flag)
+{
+}
+
+static inline void of_node_clear_flag(struct device_node *n, unsigned long flag)
+{
+}
+
+static inline int of_property_check_flag(struct property *p, unsigned long flag)
+{
+	return 0;
+}
+
+static inline void of_property_set_flag(struct property *p, unsigned long flag)
+{
+}
+
+static inline void of_property_clear_flag(struct property *p, unsigned long flag)
+{
+}
+
 #define of_match_ptr(_ptr)	NULL
 #define of_match_node(_matches, _node)	NULL
 #endif /* CONFIG_OF */

commit 351d224f64afc1b3b359a1738b7d4600c7e64061
Author: Wolfram Sang <wsa+renesas@sang-engineering.com>
Date:   Thu Mar 12 17:17:58 2015 +0100

    of: base: add function to get highest id of an alias stem
    
    I2C supports adding adapters using either a dynamic or fixed id. The
    latter is provided by aliases in the DT case. To prevent id collisions
    of those two types, install this function which gives us the highest
    fixed id, so we can then let the dynamically created ones come after
    this highest number.
    
    Signed-off-by: Wolfram Sang <wsa+renesas@sang-engineering.com>
    Acked-by: Rob Herring <robh@kernel.org>
    Signed-off-by: Wolfram Sang <wsa@the-dreams.de>

diff --git a/include/linux/of.h b/include/linux/of.h
index dfde07e77a63..9bfcc18ceab3 100644
--- a/include/linux/of.h
+++ b/include/linux/of.h
@@ -332,6 +332,7 @@ extern int of_count_phandle_with_args(const struct device_node *np,
 
 extern void of_alias_scan(void * (*dt_alloc)(u64 size, u64 align));
 extern int of_alias_get_id(struct device_node *np, const char *stem);
+extern int of_alias_get_highest_id(const char *stem);
 
 extern int of_machine_is_compatible(const char *compat);
 
@@ -594,6 +595,11 @@ static inline int of_alias_get_id(struct device_node *np, const char *stem)
 	return -ENOSYS;
 }
 
+static inline int of_alias_get_highest_id(const char *stem)
+{
+	return -ENOSYS;
+}
+
 static inline int of_machine_is_compatible(const char *compat)
 {
 	return 0;

commit 7ef58b32f571bffb7763c6252ad7527562081f34
Merge: 413fd0e3fbf5 c46ca3c8310b
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Thu Dec 11 13:06:58 2014 -0800

    Merge tag 'devicetree-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/glikely/linux
    
    Pull devicetree changes from Grant Likely:
     "Lots of activity in the devicetree code for v3.18.  Most of it is
      related to getting all of the overlay support code in place, but there
      are other important things in there.
    
      Highlights:
    
       - OF_RECONFIG notifiers for SPI, I2C and Platform devices.  Those
         subsystems can now respond to live changes to the device tree.
    
       - CONFIG_OF_OVERLAY method for applying live changes to the device
         tree
    
       - Removal of the of_allnodes list.  This used to be used to iterate
         over all the nodes in the device tree, but it is unnecessary
         because the same thing can be done by iterating over the list of
         child pointers.  Getting rid of of_allnodes saves some memory and
         avoids the possibility of of_allnodes being sorted differently from
         the child lists.
    
       - Support for retrieving original DTB blob via sysfs.  Needed by
         kexec.
    
       - More unittests
    
       - Documentation and minor bug fixes"
    
    * tag 'devicetree-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/glikely/linux: (42 commits)
      of: Delete unnecessary check before calling "of_node_put()"
      of: Drop ->next pointer from struct device_node
      spi: Check for spi_of_notifier when CONFIG_OF_DYNAMIC=y
      of: support passing console options with stdout-path
      of: add optional options parameter to of_find_node_by_path()
      of: Add bindings for chosen node, stdout-path
      of: Remove unneeded and incorrect MODULE_DEVICE_TABLE
      ARM: dt: fix up PL011 device tree bindings
      of: base, fix of_property_read_string_helper kernel-doc
      of: remove select of non-existant OF_DEVICE config symbol
      spi/of: Add OF notifier handler
      spi/of: Create new device registration method and accessors
      i2c/of: Add OF_RECONFIG notifier handler
      i2c/of: Factor out Devicetree registration code
      of/overlay: Add overlay unittests
      of/overlay: Introduce DT overlay support
      of/reconfig: Add OF_DYNAMIC notifier for platform_bus_type
      of/reconfig: Always use the same structure for notifiers
      of/reconfig: Add debug output for OF_RECONFIG notifiers
      of/reconfig: Add empty stubs for the of_reconfig methods
      ...

commit 413fd0e3fbf52873f2310eb75bfa6c7b72847277
Merge: 6b9e2cea428c 3315764efcea
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Thu Dec 11 12:46:32 2014 -0800

    Merge tag 'fbdev-3.19' of git://git.kernel.org/pub/scm/linux/kernel/git/tomba/linux
    
    Pull fbdev updates from Tomi Valkeinen:
     - support for mx6sl and mx6sx
     - OMAP HDMI audio rewrite to make it finally work
     - OMAP video PLL work to prepare for new DRA7xx SoCs
     - simplefb DT related improvements
    
    * tag 'fbdev-3.19' of git://git.kernel.org/pub/scm/linux/kernel/git/tomba/linux: (81 commits)
      video: uvesafb: Deletion of an unnecessary check before the function call "platform_device_put"
      video: fbdev-VIA: Deletion of an unnecessary check before the function call "framebuffer_release"
      video: fbdev-MMP: Deletion of an unnecessary check before the function call "mmp_unregister_path"
      video: mx3fb: Deletion of an unnecessary check before the function call "backlight_device_unregister"
      video: fbdev-OMAP2: Deletion of unnecessary checks before the function call "i2c_put_adapter"
      video: fbdev-SIS: Deletion of unnecessary checks before the function call "pci_dev_put"
      video: smscufx: Deletion of unnecessary checks before the function call "vfree"
      video: udlfb: Deletion of unnecessary checks before the function call "vfree"
      video: uvesafb: Deletion of an unnecessary check before the function call "uvesafb_free"
      video: fbdev-LCDC: Deletion of an unnecessary check before the function call "vfree"
      video: fbdev: arkfb: suppress build warning
      video: fbdev: s3fb: suppress build warning
      video: fbdev: vt8623fb: suppress build warning
      OMAPDSS: hdmi5: Fix bit field for IEC958_AES2_CON_SOURCE
      OMAPDSS: hdmi: Remove __exit qualifier from hdmi_uninit_output()
      OMAPDSS: hdmi5: Change hdmi_wp idlemode to to no_idle for audio playback
      OMAPDSS: Remove all references to obsolete HDMI audio callbacks
      ASoC: omap: Remove obsolete HDMI audio code and Kconfig options
      OMAPDSS: hdmi5: Register ASoC platform device for omap hdmi audio
      OMAPDSS: hdmi5: Remove callbacks for the old ASoC DAI driver
      ...

commit 92a578b064d0227a3a7fbbdb9e29dbab7f8d400e
Merge: c75059c46293 e3d857e1ae78
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Wed Dec 10 21:17:00 2014 -0800

    Merge tag 'pm+acpi-3.19-rc1' of git://git.kernel.org/pub/scm/linux/kernel/git/rafael/linux-pm
    
    Pull ACPI and power management updates from Rafael Wysocki:
     "This time we have some more new material than we used to have during
      the last couple of development cycles.
    
      The most important part of it to me is the introduction of a unified
      interface for accessing device properties provided by platform
      firmware.  It works with Device Trees and ACPI in a uniform way and
      drivers using it need not worry about where the properties come from
      as long as the platform firmware (either DT or ACPI) makes them
      available.  It covers both devices and "bare" device node objects
      without struct device representation as that turns out to be necessary
      in some cases.  This has been in the works for quite a few months (and
      development cycles) and has been approved by all of the relevant
      maintainers.
    
      On top of that, some drivers are switched over to the new interface
      (at25, leds-gpio, gpio_keys_polled) and some additional changes are
      made to the core GPIO subsystem to allow device drivers to manipulate
      GPIOs in the "canonical" way on platforms that provide GPIO
      information in their ACPI tables, but don't assign names to GPIO lines
      (in which case the driver needs to do that on the basis of what it
      knows about the device in question).  That also has been approved by
      the GPIO core maintainers and the rfkill driver is now going to use
      it.
    
      Second is support for hardware P-states in the intel_pstate driver.
      It uses CPUID to detect whether or not the feature is supported by the
      processor in which case it will be enabled by default.  However, it
      can be disabled entirely from the kernel command line if necessary.
    
      Next is support for a platform firmware interface based on ACPI
      operation regions used by the PMIC (Power Management Integrated
      Circuit) chips on the Intel Baytrail-T and Baytrail-T-CR platforms.
      That interface is used for manipulating power resources and for
      thermal management: sensor temperature reporting, trip point setting
      and so on.
    
      Also the ACPI core is now going to support the _DEP configuration
      information in a limited way.  Basically, _DEP it supposed to reflect
      off-the-hierarchy dependencies between devices which may be very
      indirect, like when AML for one device accesses locations in an
      operation region handled by another device's driver (usually, the
      device depended on this way is a serial bus or GPIO controller).  The
      support added this time is sufficient to make the ACPI battery driver
      work on Asus T100A, but it is general enough to be able to cover some
      other use cases in the future.
    
      Finally, we have a new cpufreq driver for the Loongson1B processor.
    
      In addition to the above, there are fixes and cleanups all over the
      place as usual and a traditional ACPICA update to a recent upstream
      release.
    
      As far as the fixes go, the ACPI LPSS (Low-power Subsystem) driver for
      Intel platforms should be able to handle power management of the DMA
      engine correctly, the cpufreq-dt driver should interact with the
      thermal subsystem in a better way and the ACPI backlight driver should
      handle some more corner cases, among other things.
    
      On top of the ACPICA update there are fixes for race conditions in the
      ACPICA's interrupt handling code which might lead to some random and
      strange looking failures on some systems.
    
      In the cleanups department the most visible part is the series of
      commits targeted at getting rid of the CONFIG_PM_RUNTIME configuration
      option.  That was triggered by a discussion regarding the generic
      power domains code during which we realized that trying to support
      certain combinations of PM config options was painful and not really
      worth it, because nobody would use them in production anyway.  For
      this reason, we decided to make CONFIG_PM_SLEEP select
      CONFIG_PM_RUNTIME and that lead to the conclusion that the latter
      became redundant and CONFIG_PM could be used instead of it.  The
      material here makes that replacement in a major part of the tree, but
      there will be at least one more batch of that in the second part of
      the merge window.
    
      Specifics:
    
       - Support for retrieving device properties information from ACPI _DSD
         device configuration objects and a unified device properties
         interface for device drivers (and subsystems) on top of that.  As
         stated above, this works with Device Trees and ACPI and allows
         device drivers to be written in a platform firmware (DT or ACPI)
         agnostic way.  The at25, leds-gpio and gpio_keys_polled drivers are
         now going to use this new interface and the GPIO subsystem is
         additionally modified to allow device drivers to assign names to
         GPIO resources returned by ACPI _CRS objects (in case _DSD is not
         present or does not provide the expected data).  The changes in
         this set are mostly from Mika Westerberg, Rafael J Wysocki, Aaron
         Lu, and Darren Hart with some fixes from others (Fabio Estevam,
         Geert Uytterhoeven).
    
       - Support for Hardware Managed Performance States (HWP) as described
         in Volume 3, section 14.4, of the Intel SDM in the intel_pstate
         driver.  CPUID is used to detect whether or not the feature is
         supported by the processor.  If supported, it will be enabled
         automatically unless the intel_pstate=no_hwp switch is present in
         the kernel command line.  From Dirk Brandewie.
    
       - New Intel Broadwell-H ID for intel_pstate (Dirk Brandewie).
    
       - Support for firmware interface based on ACPI operation regions used
         by the PMIC chips on the Intel Baytrail-T and Baytrail-T-CR
         platforms for power resource control and thermal management (Aaron
         Lu).
    
       - Limited support for retrieving off-the-hierarchy dependencies
         between devices from ACPI _DEP device configuration objects and
         deferred probing support for the ACPI battery driver based on the
         _DEP information to make that driver work on Asus T100A (Lan
         Tianyu).
    
       - New cpufreq driver for the Loongson1B processor (Kelvin Cheung).
    
       - ACPICA update to upstream revision 20141107 which only affects
         tools (Bob Moore).
    
       - Fixes for race conditions in the ACPICA's interrupt handling code
         and in the ACPI code related to system suspend and resume (Lv Zheng
         and Rafael J Wysocki).
    
       - ACPI core fix for an RCU-related issue in the ioremap() regions
         management code that slowed down significantly after CPUs had been
         allowed to enter idle states even if they'd had RCU callbakcs
         queued and triggered some problems in certain proprietary graphics
         driver (and elsewhere).  The fix replaces synchronize_rcu() in that
         code with synchronize_rcu_expedited() which makes the issue go
         away.  From Konstantin Khlebnikov.
    
       - ACPI LPSS (Low-Power Subsystem) driver fix to handle power
         management of the DMA engine included into the LPSS correctly.  The
         problem is that the DMA engine doesn't have ACPI PM support of its
         own and it simply is turned off when the last LPSS device having
         ACPI PM support goes into D3cold.  To work around that, the PM
         domain used by the ACPI LPSS driver is redesigned so at least one
         device with ACPI PM support will be on as long as the DMA engine is
         in use.  From Andy Shevchenko.
    
       - ACPI backlight driver fix to avoid using it on "Win8-compatible"
         systems where it doesn't work and where it was used by default by
         mistake (Aaron Lu).
    
       - Assorted minor ACPI core fixes and cleanups from Tomasz Nowicki,
         Sudeep Holla, Huang Rui, Hanjun Guo, Fabian Frederick, and Ashwin
         Chaugule (mostly related to the upcoming ARM64 support).
    
       - Intel RAPL (Running Average Power Limit) power capping driver fixes
         and improvements including new processor IDs (Jacob Pan).
    
       - Generic power domains modification to power up domains after
         attaching devices to them to meet the expectations of device
         drivers and bus types assuming devices to be accessible at probe
         time (Ulf Hansson).
    
       - Preliminary support for controlling device clocks from the generic
         power domains core code and modifications of the ARM/shmobile
         platform to use that feature (Ulf Hansson).
    
       - Assorted minor fixes and cleanups of the generic power domains core
         code (Ulf Hansson, Geert Uytterhoeven).
    
       - Assorted minor fixes and cleanups of the device clocks control code
         in the PM core (Geert Uytterhoeven, Grygorii Strashko).
    
       - Consolidation of device power management Kconfig options by making
         CONFIG_PM_SLEEP select CONFIG_PM_RUNTIME and removing the latter
         which is now redundant (Rafael J Wysocki and Kevin Hilman).  That
         is the first batch of the changes needed for this purpose.
    
       - Core device runtime power management support code cleanup related
         to the execution of callbacks (Andrzej Hajda).
    
       - cpuidle ARM support improvements (Lorenzo Pieralisi).
    
       - cpuidle cleanup related to the CPUIDLE_FLAG_TIME_VALID flag and a
         new MAINTAINERS entry for ARM Exynos cpuidle (Daniel Lezcano and
         Bartlomiej Zolnierkiewicz).
    
       - New cpufreq driver callback (->ready) to be executed when the
         cpufreq core is ready to use a given policy object and cpufreq-dt
         driver modification to use that callback for cooling device
         registration (Viresh Kumar).
    
       - cpufreq core fixes and cleanups (Viresh Kumar, Vince Hsu, James
         Geboski, Tomeu Vizoso).
    
       - Assorted fixes and cleanups in the cpufreq-pcc, intel_pstate,
         cpufreq-dt, pxa2xx cpufreq drivers (Lenny Szubowicz, Ethan Zhao,
         Stefan Wahren, Petr Cvek).
    
       - OPP (Operating Performance Points) framework modification to allow
         OPPs to be removed too and update of a few cpufreq drivers
         (cpufreq-dt, exynos5440, imx6q, cpufreq) to remove OPPs (added
         during initialization) on driver removal (Viresh Kumar).
    
       - Hibernation core fixes and cleanups (Tina Ruchandani and Markus
         Elfring).
    
       - PM Kconfig fix related to CPU power management (Pankaj Dubey).
    
       - cpupower tool fix (Prarit Bhargava)"
    
    * tag 'pm+acpi-3.19-rc1' of git://git.kernel.org/pub/scm/linux/kernel/git/rafael/linux-pm: (120 commits)
      i2c-omap / PM: Drop CONFIG_PM_RUNTIME from i2c-omap.c
      dmaengine / PM: Replace CONFIG_PM_RUNTIME with CONFIG_PM
      tools: cpupower: fix return checks for sysfs_get_idlestate_count()
      drivers: sh / PM: Replace CONFIG_PM_RUNTIME with CONFIG_PM
      e1000e / igb / PM: Eliminate CONFIG_PM_RUNTIME
      MMC / PM: Replace CONFIG_PM_RUNTIME with CONFIG_PM
      MFD / PM: Replace CONFIG_PM_RUNTIME with CONFIG_PM
      misc / PM: Replace CONFIG_PM_RUNTIME with CONFIG_PM
      media / PM: Replace CONFIG_PM_RUNTIME with CONFIG_PM
      input / PM: Replace CONFIG_PM_RUNTIME with CONFIG_PM
      leds: leds-gpio: Fix multiple instances registration without 'label' property
      iio / PM: Replace CONFIG_PM_RUNTIME with CONFIG_PM
      hsi / OMAP / PM: Replace CONFIG_PM_RUNTIME with CONFIG_PM
      i2c-hid / PM: Replace CONFIG_PM_RUNTIME with CONFIG_PM
      drm / exynos / PM: Replace CONFIG_PM_RUNTIME with CONFIG_PM
      gpio / PM: Replace CONFIG_PM_RUNTIME with CONFIG_PM
      hwrandom / exynos / PM: Use CONFIG_PM in #ifdef
      block / PM: Replace CONFIG_PM_RUNTIME with CONFIG_PM
      USB / PM: Drop CONFIG_PM_RUNTIME from the USB core
      PM: Merge the SET*_RUNTIME_PM_OPS() macros
      ...

commit 92d07a8ff6e2e7844d1bce4e35c98c6a773d6f17
Merge: af012d6278d8 0480395264fa 2515b24c04ea ff633bea4775 0ce5b30763fb 251ce318df3c
Author: Mark Brown <broonie@kernel.org>
Date:   Fri Dec 5 11:14:37 2014 +0000

    Merge remote-tracking branches 'regulator/topic/max77686', 'regulator/topic/max77693', 'regulator/topic/max77802', 'regulator/topic/power-off' and 'regulator/topic/rk808' into regulator-next

commit 70161ff336674ecfd20614a9c0c61cb17a6e9e83
Author: Grant Likely <grant.likely@linaro.org>
Date:   Fri Nov 28 16:03:33 2014 +0000

    of: Drop ->next pointer from struct device_node
    
    The ->next pointer in struct device_node is a hanger-on from when it was
    used to iterate over the whole tree by a particular device_type property
    value. Those days are long over, but the fdt unflattening code still
    uses it to put nodes in the unflattened tree into the same order as node
    in the flat tree. By reworking the unflattening code to reverse the list
    after unflattening all the children of a node, the pointer can be
    dropped which gives a small amount of memory savings.
    
    Signed-off-by: Grant Likely <grant.likely@linaro.org>
    Acked-by: Frank Rowand <frank.rowand@sonymobile.com>
    Cc: Gaurav Minocha <gaurav.minocha.os@gmail.com>

diff --git a/include/linux/of.h b/include/linux/of.h
index 8b021db3e16e..3f0f0ffbd5e5 100644
--- a/include/linux/of.h
+++ b/include/linux/of.h
@@ -56,7 +56,6 @@ struct device_node {
 	struct	device_node *parent;
 	struct	device_node *child;
 	struct	device_node *sibling;
-	struct	device_node *next;	/* next device of same type */
 	struct	kobject kobj;
 	unsigned long _flags;
 	void	*data;

commit 75c28c09af99a0db0ccd8b4395469761aa736543
Author: Leif Lindholm <leif.lindholm@linaro.org>
Date:   Fri Nov 28 11:34:28 2014 +0000

    of: add optional options parameter to of_find_node_by_path()
    
    Update of_find_node_by_path():
    1) Rename function to of_find_node_opts_by_path(), adding an optional
       pointer argument. Provide a static inline wrapper version of
       of_find_node_by_path() which calls the new function with NULL as
       the optional argument.
    2) Ignore any part of the path beyond and including the ':' separator.
    3) Set the new provided pointer argument to the beginning of the string
       following the ':' separator.
    4: Add tests.
    
    Signed-off-by: Leif Lindholm <leif.lindholm@linaro.org>
    Signed-off-by: Grant Likely <grant.likely@linaro.org>

diff --git a/include/linux/of.h b/include/linux/of.h
index aa01cf5852f8..8b021db3e16e 100644
--- a/include/linux/of.h
+++ b/include/linux/of.h
@@ -236,7 +236,13 @@ extern struct device_node *of_find_matching_node_and_match(
 	const struct of_device_id *matches,
 	const struct of_device_id **match);
 
-extern struct device_node *of_find_node_by_path(const char *path);
+extern struct device_node *of_find_node_opts_by_path(const char *path,
+	const char **opts);
+static inline struct device_node *of_find_node_by_path(const char *path)
+{
+	return of_find_node_opts_by_path(path, NULL);
+}
+
 extern struct device_node *of_find_node_by_phandle(phandle handle);
 extern struct device_node *of_get_parent(const struct device_node *node);
 extern struct device_node *of_get_next_parent(struct device_node *node);
@@ -383,6 +389,12 @@ static inline struct device_node *of_find_node_by_path(const char *path)
 	return NULL;
 }
 
+static inline struct device_node *of_find_node_opts_by_path(const char *path,
+	const char **opts)
+{
+	return NULL;
+}
+
 static inline struct device_node *of_get_parent(const struct device_node *node)
 {
 	return NULL;

commit 8f73110f6bac043026bc923b0a66abe24dd48058
Author: Romain Perier <romain.perier@gmail.com>
Date:   Tue Nov 25 12:28:25 2014 +0000

    of: Rename "poweroff-source" property to "system-power-controller"
    
    It reverts commit a4b4e0461ec5 ("of: Add standard property for poweroff capability").
    As discussed on the mailing list, it makes more sense to rename back to the
    old established property name, without the vendor prefix. Problem being that
    the word "source" usually tends to be used for inputs and that is out of control
    of the OS. The poweroff capability is an output which simply turns the
    system-power off. Also, this property might be used by drivers which power-off
    the system and power back on subsequent RTC alarms. This seems to suggest to
    remove "poweroff" from the property name and to choose "system-power-controller"
    as the more generic name. This patchs adds the required renaming changes and
    defines an helper function which checks if this property is set.
    
    Signed-off-by: Romain Perier <romain.perier@gmail.com>
    Acked-by: Grant Likely <grant.likely@linaro.org>
    Acked-by: Johan Hovold <johan@kernel.org>
    Signed-off-by: Mark Brown <broonie@kernel.org>

diff --git a/include/linux/of.h b/include/linux/of.h
index 27b3ba1e9e59..257677256612 100644
--- a/include/linux/of.h
+++ b/include/linux/of.h
@@ -867,14 +867,14 @@ static inline int of_changeset_update_property(struct of_changeset *ocs,
 extern int of_resolve_phandles(struct device_node *tree);
 
 /**
- * of_system_has_poweroff_source - Tells if poweroff-source is found for device_node
+ * of_device_is_system_power_controller - Tells if system-power-controller is found for device_node
  * @np: Pointer to the given device_node
  *
  * return true if present false otherwise
  */
-static inline bool of_system_has_poweroff_source(const struct device_node *np)
+static inline bool of_device_is_system_power_controller(const struct device_node *np)
 {
-	return of_property_read_bool(np, "poweroff-source");
+	return of_property_read_bool(np, "system-power-controller");
 }
 
 #endif /* _LINUX_OF_H */

commit 7518b5890d8ac366faa2326ce2356ef6392ce63d
Author: Pantelis Antoniou <pantelis.antoniou@konsulko.com>
Date:   Tue Oct 28 22:35:58 2014 +0200

    of/overlay: Introduce DT overlay support
    
    Overlays are a method to dynamically modify part of the kernel's
    device tree with dynamically loaded data. Add the core functionality to
    parse, apply and remove an overlay changeset. The core functionality
    takes care of managing the overlay data format and performing the add
    and remove. Drivers are expected to use the overlay functionality to
    support custom expansion busses commonly found on consumer development
    boards like the BeagleBone or Raspberry Pi.
    
    The overlay code uses CONFIG_OF_DYNAMIC changesets to perform the low
    level work of modifying the devicetree.
    
    Documentation about internal and APIs is provided in
            Documentation/devicetree/overlay-notes.txt
    
    v2:
    - Switch from __of_node_alloc() to __of_node_dup()
    - Documentation fixups
    - Remove 2-pass processing of properties
    - Remove separate ov_lock; just use the DT mutex.
    v1:
    - Drop delete capability using '-' prefix. The '-' prefixed names
    are valid properties and nodes and there is no need for it just yet.
    - Do not update special properties - name & phandle ones.
    - Change order of node attachment, so that the special property update
    works.
    
    Signed-off-by: Pantelis Antoniou <pantelis.antoniou@konsulko.com>
    Signed-off-by: Grant Likely <grant.likely@linaro.org>

diff --git a/include/linux/of.h b/include/linux/of.h
index fe1dec87fd68..aa01cf5852f8 100644
--- a/include/linux/of.h
+++ b/include/linux/of.h
@@ -23,6 +23,7 @@
 #include <linux/spinlock.h>
 #include <linux/topology.h>
 #include <linux/notifier.h>
+#include <linux/list.h>
 
 #include <asm/byteorder.h>
 #include <asm/errno.h>
@@ -957,4 +958,34 @@ static inline int of_reconfig_get_state_change(unsigned long action,
 /* CONFIG_OF_RESOLVE api */
 extern int of_resolve_phandles(struct device_node *tree);
 
+/**
+ * Overlay support
+ */
+
+#ifdef CONFIG_OF_OVERLAY
+
+/* ID based overlays; the API for external users */
+int of_overlay_create(struct device_node *tree);
+int of_overlay_destroy(int id);
+int of_overlay_destroy_all(void);
+
+#else
+
+static inline int of_overlay_create(struct device_node *tree)
+{
+	return -ENOTSUPP;
+}
+
+static inline int of_overlay_destroy(int id)
+{
+	return -ENOTSUPP;
+}
+
+static inline int of_overlay_destroy_all(void)
+{
+	return -ENOTSUPP;
+}
+
+#endif
+
 #endif /* _LINUX_OF_H */

commit f5242e5a883bf1c1aba6bfd87b85e7dda0e62191
Author: Grant Likely <grant.likely@linaro.org>
Date:   Mon Nov 24 17:58:01 2014 +0000

    of/reconfig: Always use the same structure for notifiers
    
    The OF_RECONFIG notifier callback uses a different structure depending
    on whether it is a node change or a property change. This is silly, and
    not very safe. Rework the code to use the same data structure regardless
    of the type of notifier.
    
    Signed-off-by: Grant Likely <grant.likely@linaro.org>
    Cc: Benjamin Herrenschmidt <benh@kernel.crashing.org>
    Cc: Rob Herring <robh+dt@kernel.org>
    Cc: Pantelis Antoniou <pantelis.antoniou@konsulko.com>
    Cc: <linuxppc-dev@lists.ozlabs.org>

diff --git a/include/linux/of.h b/include/linux/of.h
index b59ee21933a4..fe1dec87fd68 100644
--- a/include/linux/of.h
+++ b/include/linux/of.h
@@ -73,6 +73,12 @@ struct of_phandle_args {
 	uint32_t args[MAX_PHANDLE_ARGS];
 };
 
+struct of_reconfig_data {
+	struct device_node	*dn;
+	struct property		*prop;
+	struct property		*old_prop;
+};
+
 /* initialize a node */
 extern struct kobj_type of_node_ktype;
 static inline void of_node_init(struct device_node *node)
@@ -318,12 +324,6 @@ extern int of_update_property(struct device_node *np, struct property *newprop);
 #define OF_RECONFIG_REMOVE_PROPERTY	0x0004
 #define OF_RECONFIG_UPDATE_PROPERTY	0x0005
 
-struct of_prop_reconfig {
-	struct device_node	*dn;
-	struct property		*prop;
-	struct property		*old_prop;
-};
-
 extern int of_attach_node(struct device_node *);
 extern int of_detach_node(struct device_node *);
 
@@ -892,8 +892,9 @@ enum of_reconfig_change {
 #ifdef CONFIG_OF_DYNAMIC
 extern int of_reconfig_notifier_register(struct notifier_block *);
 extern int of_reconfig_notifier_unregister(struct notifier_block *);
-extern int of_reconfig_notify(unsigned long, void *);
-extern int of_reconfig_get_state_change(unsigned long action, void *arg);
+extern int of_reconfig_notify(unsigned long, struct of_reconfig_data *rd);
+extern int of_reconfig_get_state_change(unsigned long action,
+					struct of_reconfig_data *arg);
 
 extern void of_changeset_init(struct of_changeset *ocs);
 extern void of_changeset_destroy(struct of_changeset *ocs);
@@ -941,11 +942,13 @@ static inline int of_reconfig_notifier_unregister(struct notifier_block *nb)
 {
 	return -EINVAL;
 }
-static inline int of_reconfig_notify(unsigned long action, void *arg)
+static inline int of_reconfig_notify(unsigned long action,
+				     struct of_reconfig_data *arg)
 {
 	return -EINVAL;
 }
-static inline int of_reconfig_get_state_change(unsigned long action, void *arg)
+static inline int of_reconfig_get_state_change(unsigned long action,
+						struct of_reconfig_data *arg)
 {
 	return -EINVAL;
 }

commit f6892d193fb9d694a1b50550649ba6e82f8abec1
Author: Grant Likely <grant.likely@linaro.org>
Date:   Fri Nov 21 15:14:58 2014 +0000

    of/reconfig: Add empty stubs for the of_reconfig methods
    
    To simplify subsystem setup code, make empty stubs for the
    of_reconfig_*() methods. This is particularly useful for registering and
    unregistering the notifiers so that it doesn't impact the flow of the
    subsystem setup code.
    
    Signed-off-by: Grant Likely <grant.likely@linaro.org>

diff --git a/include/linux/of.h b/include/linux/of.h
index 8e3a264c869c..b59ee21933a4 100644
--- a/include/linux/of.h
+++ b/include/linux/of.h
@@ -324,11 +324,6 @@ struct of_prop_reconfig {
 	struct property		*old_prop;
 };
 
-extern int of_reconfig_notifier_register(struct notifier_block *);
-extern int of_reconfig_notifier_unregister(struct notifier_block *);
-extern int of_reconfig_notify(unsigned long, void *);
-extern int of_reconfig_get_state_change(unsigned long action, void *arg);
-
 extern int of_attach_node(struct device_node *);
 extern int of_detach_node(struct device_node *);
 
@@ -895,6 +890,11 @@ enum of_reconfig_change {
 };
 
 #ifdef CONFIG_OF_DYNAMIC
+extern int of_reconfig_notifier_register(struct notifier_block *);
+extern int of_reconfig_notifier_unregister(struct notifier_block *);
+extern int of_reconfig_notify(unsigned long, void *);
+extern int of_reconfig_get_state_change(unsigned long action, void *arg);
+
 extern void of_changeset_init(struct of_changeset *ocs);
 extern void of_changeset_destroy(struct of_changeset *ocs);
 extern int of_changeset_apply(struct of_changeset *ocs);
@@ -932,7 +932,24 @@ static inline int of_changeset_update_property(struct of_changeset *ocs,
 {
 	return of_changeset_action(ocs, OF_RECONFIG_UPDATE_PROPERTY, np, prop);
 }
-#endif
+#else /* CONFIG_OF_DYNAMIC */
+static inline int of_reconfig_notifier_register(struct notifier_block *nb)
+{
+	return -EINVAL;
+}
+static inline int of_reconfig_notifier_unregister(struct notifier_block *nb)
+{
+	return -EINVAL;
+}
+static inline int of_reconfig_notify(unsigned long action, void *arg)
+{
+	return -EINVAL;
+}
+static inline int of_reconfig_get_state_change(unsigned long action, void *arg)
+{
+	return -EINVAL;
+}
+#endif /* CONFIG_OF_DYNAMIC */
 
 /* CONFIG_OF_RESOLVE api */
 extern int of_resolve_phandles(struct device_node *tree);

commit b53a2340d0d30468b7315992ba77fe188c3bc5c8
Author: Pantelis Antoniou <pantelis.antoniou@konsulko.com>
Date:   Tue Oct 28 22:33:53 2014 +0200

    of/reconfig: Add of_reconfig_get_state_change() of notifier helper.
    
    Introduce of_reconfig_get_state_change() which allows an of notifier
    to query about device state changes.
    
    Signed-off-by: Pantelis Antoniou <pantelis.antoniou@konsulko.com>
    Signed-off-by: Grant Likely <grant.likely@linaro.org>

diff --git a/include/linux/of.h b/include/linux/of.h
index 27635c89d8c2..8e3a264c869c 100644
--- a/include/linux/of.h
+++ b/include/linux/of.h
@@ -327,6 +327,7 @@ struct of_prop_reconfig {
 extern int of_reconfig_notifier_register(struct notifier_block *);
 extern int of_reconfig_notifier_unregister(struct notifier_block *);
 extern int of_reconfig_notify(unsigned long, void *);
+extern int of_reconfig_get_state_change(unsigned long action, void *arg);
 
 extern int of_attach_node(struct device_node *);
 extern int of_detach_node(struct device_node *);
@@ -887,6 +888,12 @@ struct of_changeset {
 	struct list_head entries;
 };
 
+enum of_reconfig_change {
+	OF_RECONFIG_NO_CHANGE = 0,
+	OF_RECONFIG_CHANGE_ADD,
+	OF_RECONFIG_CHANGE_REMOVE,
+};
+
 #ifdef CONFIG_OF_DYNAMIC
 extern void of_changeset_init(struct of_changeset *ocs);
 extern void of_changeset_destroy(struct of_changeset *ocs);

commit 53a4ab96c61a34d62717b1481f6043e0b4338d74
Author: Kevin Cernekee <cernekee@gmail.com>
Date:   Wed Nov 12 12:54:01 2014 -0800

    of: Change of_device_is_available() to return bool
    
    This function can only return true or false; using a bool makes it more
    obvious to the reader.
    
    Signed-off-by: Kevin Cernekee <cernekee@gmail.com>
    Signed-off-by: Grant Likely <grant.likely@linaro.org>

diff --git a/include/linux/of.h b/include/linux/of.h
index 3c851a8f23eb..27635c89d8c2 100644
--- a/include/linux/of.h
+++ b/include/linux/of.h
@@ -276,7 +276,7 @@ extern int of_property_read_string_helper(struct device_node *np,
 					      const char **out_strs, size_t sz, int index);
 extern int of_device_is_compatible(const struct device_node *device,
 				   const char *);
-extern int of_device_is_available(const struct device_node *device);
+extern bool of_device_is_available(const struct device_node *device);
 extern const void *of_get_property(const struct device_node *node,
 				const char *name,
 				int *lenp);
@@ -427,9 +427,9 @@ static inline int of_device_is_compatible(const struct device_node *device,
 	return 0;
 }
 
-static inline int of_device_is_available(const struct device_node *device)
+static inline bool of_device_is_available(const struct device_node *device)
 {
-	return 0;
+	return false;
 }
 
 static inline struct property *of_find_property(const struct device_node *np,

commit 6d09dc6b74caaca83e32e67f2454406041d58fb0
Author: Hans de Goede <hdegoede@redhat.com>
Date:   Fri Nov 14 13:26:52 2014 +0100

    of.h: Keep extern declaration of of_* variables when !CONFIG_OF
    
    Keep the extern declaration of of_allnodes and friends, when building without
    of support, this way code using them can be written like this:
    
            if (IS_ENABLED(CONFIG_OF_PLATFORM) && of_chosen) {
                    for_each_child_of_node(of_chosen, np)
                            ...
            }
    
    And rely on the compiler optimizing it away, avoiding the need for #ifdef-ery.
    
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Signed-off-by: Tomi Valkeinen <tomi.valkeinen@ti.com>

diff --git a/include/linux/of.h b/include/linux/of.h
index 6545e7aec7bb..f83ca9dddcba 100644
--- a/include/linux/of.h
+++ b/include/linux/of.h
@@ -105,8 +105,6 @@ static inline struct device_node *of_node_get(struct device_node *node)
 static inline void of_node_put(struct device_node *node) { }
 #endif /* !CONFIG_OF_DYNAMIC */
 
-#ifdef CONFIG_OF
-
 /* Pointer for first entry in chain of all nodes. */
 extern struct device_node *of_allnodes;
 extern struct device_node *of_chosen;
@@ -114,6 +112,7 @@ extern struct device_node *of_aliases;
 extern struct device_node *of_stdout;
 extern raw_spinlock_t devtree_lock;
 
+#ifdef CONFIG_OF
 static inline bool of_have_populated_dt(void)
 {
 	return of_allnodes != NULL;

commit 8a0662d9ed2968e1186208336a8e1fab3fdfea63
Author: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
Date:   Tue Nov 4 14:03:59 2014 +0100

    Driver core: Unified interface for firmware node properties
    
    Add new generic routines are provided for retrieving properties from
    device description objects in the platform firmware in case there are
    no struct device objects for them (either those objects have not been
    created yet or they do not exist at all).
    
    The following functions are provided:
    
    fwnode_property_present()
    fwnode_property_read_u8()
    fwnode_property_read_u16()
    fwnode_property_read_u32()
    fwnode_property_read_u64()
    fwnode_property_read_string()
    fwnode_property_read_u8_array()
    fwnode_property_read_u16_array()
    fwnode_property_read_u32_array()
    fwnode_property_read_u64_array()
    fwnode_property_read_string_array()
    
    in analogy with the corresponding functions for struct device added
    previously.  For all of them, the first argument is a pointer to struct
    fwnode_handle (new type) that allows a device description object
    (depending on what platform firmware interface is in use) to be
    obtained.
    
    Add a new macro device_for_each_child_node() for iterating over the
    children of the device description object associated with a given
    device and a new function device_get_child_node_count() returning the
    number of a given device's child nodes.
    
    The interface covers both ACPI and Device Trees.
    
    Suggested-by: Grant Likely <grant.likely@linaro.org>
    Acked-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Acked-by: Grant Likely <grant.likely@linaro.org>
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>

diff --git a/include/linux/of.h b/include/linux/of.h
index ce9f6a2b3532..cf79be1441d2 100644
--- a/include/linux/of.h
+++ b/include/linux/of.h
@@ -50,6 +50,7 @@ struct device_node {
 	const char *type;
 	phandle phandle;
 	const char *full_name;
+	struct fwnode_handle fwnode;
 
 	struct	property *properties;
 	struct	property *deadprops;	/* removed properties */
@@ -80,6 +81,7 @@ extern struct kobj_type of_node_ktype;
 static inline void of_node_init(struct device_node *node)
 {
 	kobject_init(&node->kobj, &of_node_ktype);
+	node->fwnode.type = FWNODE_OF;
 }
 
 /* true when node is initialized */
@@ -115,6 +117,16 @@ extern struct device_node *of_aliases;
 extern struct device_node *of_stdout;
 extern raw_spinlock_t devtree_lock;
 
+static inline bool is_of_node(struct fwnode_handle *fwnode)
+{
+	return fwnode && fwnode->type == FWNODE_OF;
+}
+
+static inline struct device_node *of_node(struct fwnode_handle *fwnode)
+{
+	return fwnode ? container_of(fwnode, struct device_node, fwnode) : NULL;
+}
+
 static inline bool of_have_populated_dt(void)
 {
 	return of_allnodes != NULL;
@@ -360,6 +372,16 @@ bool of_console_check(struct device_node *dn, char *name, int index);
 
 #else /* CONFIG_OF */
 
+static inline bool is_of_node(struct fwnode_handle *fwnode)
+{
+	return false;
+}
+
+static inline struct device_node *of_node(struct fwnode_handle *fwnode)
+{
+	return NULL;
+}
+
 static inline const char* of_node_full_name(const struct device_node *np)
 {
 	return "<no-node>";

commit b31384fa5de37a100507751dfb5c0a49d06cee67
Author: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
Date:   Tue Nov 4 01:28:56 2014 +0100

    Driver core: Unified device properties interface for platform firmware
    
    Add a uniform interface by which device drivers can request device
    properties from the platform firmware by providing a property name
    and the corresponding data type.  The purpose of it is to help to
    write portable code that won't depend on any particular platform
    firmware interface.
    
    The following general helper functions are added:
    
    device_property_present()
    device_property_read_u8()
    device_property_read_u16()
    device_property_read_u32()
    device_property_read_u64()
    device_property_read_string()
    device_property_read_u8_array()
    device_property_read_u16_array()
    device_property_read_u32_array()
    device_property_read_u64_array()
    device_property_read_string_array()
    
    The first one allows the caller to check if the given property is
    present.  The next 5 of them allow single-valued properties of
    various types to be retrieved in a uniform way.  The remaining 5 are
    for reading properties with multiple values (arrays of either numbers
    or strings).
    
    The interface covers both ACPI and Device Trees.
    
    This change set includes material from Mika Westerberg and Aaron Lu.
    
    Signed-off-by: Aaron Lu <aaron.lu@intel.com>
    Signed-off-by: Mika Westerberg <mika.westerberg@linux.intel.com>
    Acked-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Acked-by: Grant Likely <grant.likely@linaro.org>
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>

diff --git a/include/linux/of.h b/include/linux/of.h
index 29f0adc5f3e4..ce9f6a2b3532 100644
--- a/include/linux/of.h
+++ b/include/linux/of.h
@@ -23,6 +23,7 @@
 #include <linux/spinlock.h>
 #include <linux/topology.h>
 #include <linux/notifier.h>
+#include <linux/property.h>
 
 #include <asm/byteorder.h>
 #include <asm/errno.h>
@@ -263,6 +264,10 @@ extern int of_property_read_u32_array(const struct device_node *np,
 				      size_t sz);
 extern int of_property_read_u64(const struct device_node *np,
 				const char *propname, u64 *out_value);
+extern int of_property_read_u64_array(const struct device_node *np,
+				      const char *propname,
+				      u64 *out_values,
+				      size_t sz);
 
 extern int of_property_read_string(struct device_node *np,
 				   const char *propname,
@@ -477,6 +482,13 @@ static inline int of_property_read_u32_array(const struct device_node *np,
 	return -ENOSYS;
 }
 
+static inline int of_property_read_u64_array(const struct device_node *np,
+					     const char *propname,
+					     u64 *out_values, size_t sz)
+{
+	return -ENOSYS;
+}
+
 static inline int of_property_read_string(struct device_node *np,
 					  const char *propname,
 					  const char **out_string)

commit 5f563585ab0afa8c35b3627d65c07966f7a5080e
Author: Thierry Reding <treding@nvidia.com>
Date:   Thu Oct 2 16:01:10 2014 +0200

    of: Fix padding in _OF_DECLARE macro definition
    
    Signed-off-by: Thierry Reding <treding@nvidia.com>
    Signed-off-by: Grant Likely <grant.likely@linaro.org>

diff --git a/include/linux/of.h b/include/linux/of.h
index f54da3b699a8..3c851a8f23eb 100644
--- a/include/linux/of.h
+++ b/include/linux/of.h
@@ -836,7 +836,7 @@ static inline int of_get_available_child_count(const struct device_node *np)
 		 = { .compatible = compat,				\
 		     .data = (fn == (fn_type)NULL) ? fn : fn  }
 #else
-#define _OF_DECLARE(table, name, compat, fn, fn_type)					\
+#define _OF_DECLARE(table, name, compat, fn, fn_type)			\
 	static const struct of_device_id __of_table_##name		\
 		__attribute__((unused))					\
 		 = { .compatible = compat,				\

commit 5063e25a302e6a83f6590d9a06bd5f6400b17430
Author: Grant Likely <grant.likely@linaro.org>
Date:   Fri Oct 3 16:28:27 2014 +0100

    of: Eliminate of_allnodes list
    
    The device tree structure is composed of two lists; the 'allnodes' list
    which is a singly linked list containing every node in the tree, and the
    child->parent structure where each parent node has a singly linked list
    of children. All of the data in the allnodes list can be easily
    reproduced with the parent-child lists, so of_allnodes is actually
    unnecessary. Remove it entirely which saves a bit of memory and
    simplifies the data structure quite a lot.
    
    Signed-off-by: Grant Likely <grant.likely@linaro.org>
    Cc: Rob Herring <robh@kernel.org>
    Cc: Gaurav Minocha <gaurav.minocha.os@gmail.com>
    Cc: Pantelis Antoniou <pantelis@pantelis.antoniou@konsulko.com>

diff --git a/include/linux/of.h b/include/linux/of.h
index 30912939a610..f54da3b699a8 100644
--- a/include/linux/of.h
+++ b/include/linux/of.h
@@ -56,7 +56,6 @@ struct device_node {
 	struct	device_node *child;
 	struct	device_node *sibling;
 	struct	device_node *next;	/* next device of same type */
-	struct	device_node *allnext;	/* next in list of all nodes */
 	struct	kobject kobj;
 	unsigned long _flags;
 	void	*data;
@@ -108,7 +107,7 @@ static inline void of_node_put(struct device_node *node) { }
 #ifdef CONFIG_OF
 
 /* Pointer for first entry in chain of all nodes. */
-extern struct device_node *of_allnodes;
+extern struct device_node *of_root;
 extern struct device_node *of_chosen;
 extern struct device_node *of_aliases;
 extern struct device_node *of_stdout;
@@ -116,7 +115,7 @@ extern raw_spinlock_t devtree_lock;
 
 static inline bool of_have_populated_dt(void)
 {
-	return of_allnodes != NULL;
+	return of_root != NULL;
 }
 
 static inline bool of_node_is_root(const struct device_node *node)
@@ -160,6 +159,7 @@ static inline void of_property_clear_flag(struct property *p, unsigned long flag
 	clear_bit(flag, &p->_flags);
 }
 
+extern struct device_node *__of_find_all_nodes(struct device_node *prev);
 extern struct device_node *of_find_all_nodes(struct device_node *prev);
 
 /*
@@ -215,8 +215,9 @@ static inline const char *of_node_full_name(const struct device_node *np)
 	return np ? np->full_name : "<no-node>";
 }
 
-#define for_each_of_allnodes(dn) \
-	for (dn = of_allnodes; dn; dn = dn->allnext)
+#define for_each_of_allnodes_from(from, dn) \
+	for (dn = __of_find_all_nodes(from); dn; dn = __of_find_all_nodes(dn))
+#define for_each_of_allnodes(dn) for_each_of_allnodes_from(NULL, dn)
 extern struct device_node *of_find_node_by_name(struct device_node *from,
 	const char *name);
 extern struct device_node *of_find_node_by_type(struct device_node *from,

commit e7a00e4210e4cc980e3ba67ec7301af54061d14b
Author: Sebastian Reichel <sre@kernel.org>
Date:   Sun Apr 6 12:52:11 2014 +0200

    of: introduce of_property_read_s32
    
    Introduce signed 32bit integer of_property_read method.
    
    Signed-off-by: Sebastian Reichel <sre@kernel.org>
    Signed-off-by: Grant Likely <grant.likely@linaro.org>

diff --git a/include/linux/of.h b/include/linux/of.h
index 29f0adc5f3e4..30912939a610 100644
--- a/include/linux/of.h
+++ b/include/linux/of.h
@@ -760,6 +760,13 @@ static inline int of_property_read_u32(const struct device_node *np,
 	return of_property_read_u32_array(np, propname, out_value, 1);
 }
 
+static inline int of_property_read_s32(const struct device_node *np,
+				       const char *propname,
+				       s32 *out_value)
+{
+	return of_property_read_u32(np, propname, (u32*) out_value);
+}
+
 #define of_property_for_each_u32(np, propname, prop, p, u)	\
 	for (prop = of_find_property(np, propname, NULL),	\
 		p = of_prop_next_u32(prop, NULL, &u);		\

commit a87fa1d81a9fb5e9adca9820e16008c40ad09f33
Author: Grant Likely <grant.likely@linaro.org>
Date:   Mon Nov 3 15:15:35 2014 +0000

    of: Fix overflow bug in string property parsing functions
    
    The string property read helpers will run off the end of the buffer if
    it is handed a malformed string property. Rework the parsers to make
    sure that doesn't happen. At the same time add new test cases to make
    sure the functions behave themselves.
    
    The original implementations of of_property_read_string_index() and
    of_property_count_strings() both open-coded the same block of parsing
    code, each with it's own subtly different bugs. The fix here merges
    functions into a single helper and makes the original functions static
    inline wrappers around the helper.
    
    One non-bugfix aspect of this patch is the addition of a new wrapper,
    of_property_read_string_array(). The new wrapper is needed by the
    device_properties feature that Rafael is working on and planning to
    merge for v3.19. The implementation is identical both with and without
    the new static inline wrapper, so it just got left in to reduce the
    churn on the header file.
    
    Signed-off-by: Grant Likely <grant.likely@linaro.org>
    Cc: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Cc: Mika Westerberg <mika.westerberg@linux.intel.com>
    Cc: Rob Herring <robh+dt@kernel.org>
    Cc: Arnd Bergmann <arnd@arndb.de>
    Cc: Darren Hart <darren.hart@intel.com>
    Cc: <stable@vger.kernel.org>  # v3.3+: Drop selftest hunks that don't apply

diff --git a/include/linux/of.h b/include/linux/of.h
index 6545e7aec7bb..29f0adc5f3e4 100644
--- a/include/linux/of.h
+++ b/include/linux/of.h
@@ -267,14 +267,12 @@ extern int of_property_read_u64(const struct device_node *np,
 extern int of_property_read_string(struct device_node *np,
 				   const char *propname,
 				   const char **out_string);
-extern int of_property_read_string_index(struct device_node *np,
-					 const char *propname,
-					 int index, const char **output);
 extern int of_property_match_string(struct device_node *np,
 				    const char *propname,
 				    const char *string);
-extern int of_property_count_strings(struct device_node *np,
-				     const char *propname);
+extern int of_property_read_string_helper(struct device_node *np,
+					      const char *propname,
+					      const char **out_strs, size_t sz, int index);
 extern int of_device_is_compatible(const struct device_node *device,
 				   const char *);
 extern int of_device_is_available(const struct device_node *device);
@@ -486,15 +484,9 @@ static inline int of_property_read_string(struct device_node *np,
 	return -ENOSYS;
 }
 
-static inline int of_property_read_string_index(struct device_node *np,
-						const char *propname, int index,
-						const char **out_string)
-{
-	return -ENOSYS;
-}
-
-static inline int of_property_count_strings(struct device_node *np,
-					    const char *propname)
+static inline int of_property_read_string_helper(struct device_node *np,
+						 const char *propname,
+						 const char **out_strs, size_t sz, int index)
 {
 	return -ENOSYS;
 }
@@ -667,6 +659,70 @@ static inline int of_property_count_u64_elems(const struct device_node *np,
 	return of_property_count_elems_of_size(np, propname, sizeof(u64));
 }
 
+/**
+ * of_property_read_string_array() - Read an array of strings from a multiple
+ * strings property.
+ * @np:		device node from which the property value is to be read.
+ * @propname:	name of the property to be searched.
+ * @out_strs:	output array of string pointers.
+ * @sz:		number of array elements to read.
+ *
+ * Search for a property in a device tree node and retrieve a list of
+ * terminated string values (pointer to data, not a copy) in that property.
+ *
+ * If @out_strs is NULL, the number of strings in the property is returned.
+ */
+static inline int of_property_read_string_array(struct device_node *np,
+						const char *propname, const char **out_strs,
+						size_t sz)
+{
+	return of_property_read_string_helper(np, propname, out_strs, sz, 0);
+}
+
+/**
+ * of_property_count_strings() - Find and return the number of strings from a
+ * multiple strings property.
+ * @np:		device node from which the property value is to be read.
+ * @propname:	name of the property to be searched.
+ *
+ * Search for a property in a device tree node and retrieve the number of null
+ * terminated string contain in it. Returns the number of strings on
+ * success, -EINVAL if the property does not exist, -ENODATA if property
+ * does not have a value, and -EILSEQ if the string is not null-terminated
+ * within the length of the property data.
+ */
+static inline int of_property_count_strings(struct device_node *np,
+					    const char *propname)
+{
+	return of_property_read_string_helper(np, propname, NULL, 0, 0);
+}
+
+/**
+ * of_property_read_string_index() - Find and read a string from a multiple
+ * strings property.
+ * @np:		device node from which the property value is to be read.
+ * @propname:	name of the property to be searched.
+ * @index:	index of the string in the list of strings
+ * @out_string:	pointer to null terminated return string, modified only if
+ *		return value is 0.
+ *
+ * Search for a property in a device tree node and retrieve a null
+ * terminated string value (pointer to data, not a copy) in the list of strings
+ * contained in that property.
+ * Returns 0 on success, -EINVAL if the property does not exist, -ENODATA if
+ * property does not have a value, and -EILSEQ if the string is not
+ * null-terminated within the length of the property data.
+ *
+ * The out_string pointer is modified only if a valid string can be decoded.
+ */
+static inline int of_property_read_string_index(struct device_node *np,
+						const char *propname,
+						int index, const char **output)
+{
+	int rc = of_property_read_string_helper(np, propname, output, 1, index);
+	return rc < 0 ? rc : 0;
+}
+
 /**
  * of_property_read_bool - Findfrom a property
  * @np:		device node from which the property value is to be read.

commit a4b4e0461ec5532ad498f0dd0e68993ad79bec2b
Author: Romain Perier <romain.perier@gmail.com>
Date:   Tue Oct 14 06:31:09 2014 +0000

    of: Add standard property for poweroff capability
    
    Several drivers create their own devicetree property when they register
    poweroff capabilities. This is for example the case for mfd, regulator
    or power drivers which define "vendor,system-power-controller" property.
    This patch adds support for a standard property "poweroff-source"
    which marks the device as able to shutdown the system.
    
    Signed-off-by: Romain Perier <romain.perier@gmail.com>
    Acked-by: Grant Likely <grant.likely@linaro.org>
    Signed-off-by: Mark Brown <broonie@kernel.org>

diff --git a/include/linux/of.h b/include/linux/of.h
index 6545e7aec7bb..27b3ba1e9e59 100644
--- a/include/linux/of.h
+++ b/include/linux/of.h
@@ -866,4 +866,15 @@ static inline int of_changeset_update_property(struct of_changeset *ocs,
 /* CONFIG_OF_RESOLVE api */
 extern int of_resolve_phandles(struct device_node *tree);
 
+/**
+ * of_system_has_poweroff_source - Tells if poweroff-source is found for device_node
+ * @np: Pointer to the given device_node
+ *
+ * return true if present false otherwise
+ */
+static inline bool of_system_has_poweroff_source(const struct device_node *np)
+{
+	return of_property_read_bool(np, "poweroff-source");
+}
+
 #endif /* _LINUX_OF_H */

commit 7941b27b16e3282f6ec8817e36492f1deec753a7
Author: Pantelis Antoniou <pantelis.antoniou@konsulko.com>
Date:   Fri Jul 4 19:59:20 2014 +0300

    of: Introduce Device Tree resolve support.
    
    Introduce support for dynamic device tree resolution.
    Using it, it is possible to prepare a device tree that's
    been loaded on runtime to be modified and inserted at the kernel
    live tree.
    
    Export of of_resolve and bug fix of double free by
            Guenter Roeck <groeck@juniper.net>
    
    Signed-off-by: Pantelis Antoniou <pantelis.antoniou@konsulko.com>
    [grant.likely: Don't need to select CONFIG_OF_DYNAMIC and CONFIG_OF_DEVICE]
    [grant.likely: Don't need to depend on OF or !SPARC]
    [grant.likely: Factor out duplicate code blocks into single function]
    Signed-off-by: Grant Likely <grant.likely@linaro.org>

diff --git a/include/linux/of.h b/include/linux/of.h
index 6c4363b8ddc3..6545e7aec7bb 100644
--- a/include/linux/of.h
+++ b/include/linux/of.h
@@ -863,4 +863,7 @@ static inline int of_changeset_update_property(struct of_changeset *ocs,
 }
 #endif
 
+/* CONFIG_OF_RESOLVE api */
+extern int of_resolve_phandles(struct device_node *tree);
+
 #endif /* _LINUX_OF_H */

commit 663d3f7c2e5e1b018a4c53277ccfde40329d98ca
Merge: b775e642bf95 b6ae5dc54b0a
Author: Grant Likely <grant.likely@linaro.org>
Date:   Mon Aug 11 14:06:23 2014 +0100

    Merge branch 'devicetree/next-overlay' into devicetree/next
    
    Conflicts:
            drivers/of/testcase-data/testcases.dts

commit 201c910bd6898d81d4ac6685d0f421b7e10f3c5d
Author: Pantelis Antoniou <pantelis.antoniou@konsulko.com>
Date:   Fri Jul 4 19:58:49 2014 +0300

    of: Transactional DT support.
    
    Introducing DT transactional support.
    
    A DT transaction is a method which allows one to apply changes
    in the live tree, in such a way that either the full set of changes
    take effect, or the state of the tree can be rolled-back to the
    state it was before it was attempted. An applied transaction
    can be rolled-back at any time.
    
    Documentation is in
            Documentation/devicetree/changesets.txt
    
    Signed-off-by: Pantelis Antoniou <pantelis.antoniou@konsulko.com>
    [glikely: Removed device notifiers and reworked to be more consistent]
    Signed-off-by: Grant Likely <grant.likely@linaro.org>

diff --git a/include/linux/of.h b/include/linux/of.h
index 400f18cb4fff..bc91fbb13ce8 100644
--- a/include/linux/of.h
+++ b/include/linux/of.h
@@ -786,4 +786,80 @@ typedef void (*of_init_fn_1)(struct device_node *);
 #define OF_DECLARE_2(table, name, compat, fn) \
 		_OF_DECLARE(table, name, compat, fn, of_init_fn_2)
 
+/**
+ * struct of_changeset_entry	- Holds a changeset entry
+ *
+ * @node:	list_head for the log list
+ * @action:	notifier action
+ * @np:		pointer to the device node affected
+ * @prop:	pointer to the property affected
+ * @old_prop:	hold a pointer to the original property
+ *
+ * Every modification of the device tree during a changeset
+ * is held in a list of of_changeset_entry structures.
+ * That way we can recover from a partial application, or we can
+ * revert the changeset
+ */
+struct of_changeset_entry {
+	struct list_head node;
+	unsigned long action;
+	struct device_node *np;
+	struct property *prop;
+	struct property *old_prop;
+};
+
+/**
+ * struct of_changeset - changeset tracker structure
+ *
+ * @entries:	list_head for the changeset entries
+ *
+ * changesets are a convenient way to apply bulk changes to the
+ * live tree. In case of an error, changes are rolled-back.
+ * changesets live on after initial application, and if not
+ * destroyed after use, they can be reverted in one single call.
+ */
+struct of_changeset {
+	struct list_head entries;
+};
+
+#ifdef CONFIG_OF_DYNAMIC
+extern void of_changeset_init(struct of_changeset *ocs);
+extern void of_changeset_destroy(struct of_changeset *ocs);
+extern int of_changeset_apply(struct of_changeset *ocs);
+extern int of_changeset_revert(struct of_changeset *ocs);
+extern int of_changeset_action(struct of_changeset *ocs,
+		unsigned long action, struct device_node *np,
+		struct property *prop);
+
+static inline int of_changeset_attach_node(struct of_changeset *ocs,
+		struct device_node *np)
+{
+	return of_changeset_action(ocs, OF_RECONFIG_ATTACH_NODE, np, NULL);
+}
+
+static inline int of_changeset_detach_node(struct of_changeset *ocs,
+		struct device_node *np)
+{
+	return of_changeset_action(ocs, OF_RECONFIG_DETACH_NODE, np, NULL);
+}
+
+static inline int of_changeset_add_property(struct of_changeset *ocs,
+		struct device_node *np, struct property *prop)
+{
+	return of_changeset_action(ocs, OF_RECONFIG_ADD_PROPERTY, np, prop);
+}
+
+static inline int of_changeset_remove_property(struct of_changeset *ocs,
+		struct device_node *np, struct property *prop)
+{
+	return of_changeset_action(ocs, OF_RECONFIG_REMOVE_PROPERTY, np, prop);
+}
+
+static inline int of_changeset_update_property(struct of_changeset *ocs,
+		struct device_node *np, struct property *prop)
+{
+	return of_changeset_action(ocs, OF_RECONFIG_UPDATE_PROPERTY, np, prop);
+}
+#endif
+
 #endif /* _LINUX_OF_H */

commit 259092a35c7e11f1d4616b0f5b3ba7b851fe4fa6
Author: Grant Likely <grant.likely@linaro.org>
Date:   Wed Jul 16 12:48:23 2014 -0600

    of: Reorder device tree changes and notifiers
    
    Currently, devicetree reconfig notifiers get emitted before the change
    is applied to the tree, but that behaviour is problematic if the
    receiver wants the determine the new state of the tree. The current
    users don't care, but the changeset code to follow will be making
    multiple changes at once. Reorder notifiers to get emitted after the
    change has been applied to the tree so that callbacks see the new tree
    state.
    
    At the same time, fixup the existing callbacks to expect the new order.
    There are a few callbacks that compare the old and new values of a
    changed property. Put both property pointers into the of_prop_reconfig
    structure.
    
    The current notifiers also allow the notifier callback to fail and
    cancel the change to the tree, but that feature isn't actually used.
    It really isn't valid to ignore a tree modification provided by firmware
    anyway, so remove the ability to cancel a change to the tree.
    
    Signed-off-by: Grant Likely <grant.likely@linaro.org>
    Cc: Nathan Fontenot <nfont@austin.ibm.com>

diff --git a/include/linux/of.h b/include/linux/of.h
index 705fa12fca7f..400f18cb4fff 100644
--- a/include/linux/of.h
+++ b/include/linux/of.h
@@ -321,6 +321,7 @@ extern int of_update_property(struct device_node *np, struct property *newprop);
 struct of_prop_reconfig {
 	struct device_node	*dn;
 	struct property		*prop;
+	struct property		*old_prop;
 };
 
 extern int of_reconfig_notifier_register(struct notifier_block *);

commit 8a2b22a2595bf89d4396530edf8388159fad9d83
Author: Grant Likely <grant.likely@linaro.org>
Date:   Wed Jul 23 17:05:06 2014 -0600

    of: Make devicetree sysfs update functions consistent.
    
    All of the DT modification functions are split into two parts, the first
    part manipulates the DT data structure, and the second part updates
    sysfs, but the code isn't very consistent about how the second half is
    called. They don't all enforce the same rules about when it is valid to
    update sysfs, and there isn't any clarity on locking.
    
    The transactional DT modification feature that is coming also needs
    access to these functions so that it can perform all the structure
    changes together, and then all the sysfs updates as a second stage
    instead of doing each one at a time.
    
    Fix up the second have by creating a separate __of_*_sysfs() function
    for each of the helpers. The new functions have consistent naming (ie.
    of_node_add() becomes __of_attach_node_sysfs()) and all of them now
    defer if of_init hasn't been called yet.
    
    Callers of the new functions must hold the of_mutex to ensure there are
    no race conditions with of_init(). The mutex ensures that there will
    only ever be one writer to the tree at any given time. There can still
    be any number of readers and the raw_spin_lock is still used to make
    sure access to the data structure is still consistent.
    
    Finally, put the function prototypes into of_private.h so they are
    accessible to the transaction code.
    
    Signed-off-by: Pantelis Antoniou <pantelis.antoniou@konsulko.com>
    [grant.likely: Changed suffix from _post to _sysfs to match existing code]
    [grant.likely: Reorganized to eliminate trivial wrappers]
    Signed-off-by: Grant Likely <grant.likely@linaro.org>

diff --git a/include/linux/of.h b/include/linux/of.h
index abf829a1f150..705fa12fca7f 100644
--- a/include/linux/of.h
+++ b/include/linux/of.h
@@ -74,8 +74,6 @@ struct of_phandle_args {
 	uint32_t args[MAX_PHANDLE_ARGS];
 };
 
-extern int of_node_add(struct device_node *node);
-
 /* initialize a node */
 extern struct kobj_type of_node_ktype;
 static inline void of_node_init(struct device_node *node)

commit 75f353b61342b5847c7f6d8499fd6301dce09845
Author: Grant Likely <grant.likely@linaro.org>
Date:   Tue Jun 24 16:13:47 2014 +0100

    of/platform: Fix of_platform_device_destroy iteration of devices
    
    of_platform_destroy does not work properly, since the tree
    population test was iterating on all devices having as its parent
    the given platform device.
    
    The check was intended to check whether any other platform or amba
    devices created by of_platform_populate were still populated, but
    instead checked for every kind of device. This is wrong, since platform
    devices typically create a subsystem regular device and set themselves
    as parents.
    
    Instead, go ahead and call the unregister functions for any devices
    created with of_platform_populate. The driver core will take care of
    unbinding drivers, and drivers are responsible for getting rid of any
    child devices that weren't created by of_platform_populate.
    
    Signed-off-by: Grant Likely <grant.likely@linaro.org>
    Signed-off-by: Pantelis Antoniou <pantelis.antoniou@konsulko.com>

diff --git a/include/linux/of.h b/include/linux/of.h
index 196b34c1ef4e..abf829a1f150 100644
--- a/include/linux/of.h
+++ b/include/linux/of.h
@@ -204,6 +204,7 @@ static inline unsigned long of_read_ulong(const __be32 *cell, int size)
 #define OF_DYNAMIC	1 /* node and properties were allocated via kmalloc */
 #define OF_DETACHED	2 /* node has been detached from the device tree */
 #define OF_POPULATED	3 /* device already created for the node */
+#define OF_POPULATED_BUS	4 /* of_platform_populate recursed to children of this node */
 
 #define OF_IS_DYNAMIC(x) test_bit(OF_DYNAMIC, &x->_flags)
 #define OF_MARK_DYNAMIC(x) set_bit(OF_DYNAMIC, &x->_flags)

commit a752ee56ad84bf9a35b8323af1ad22b03c1df2c4
Author: Grant Likely <grant.likely@linaro.org>
Date:   Fri Mar 28 08:12:18 2014 -0700

    tty: Update hypervisor tty drivers to use core stdout parsing code.
    
    The evh_bytechan, hvc_opal and hvc_vio drivers all open code the parsing
    of the stdout node in the device tree. This patch simplifies the driver
    by removing the duplicated functionality.
    
    Signed-off-by: Grant Likely <grant.likely@linaro.org>

diff --git a/include/linux/of.h b/include/linux/of.h
index 9d9734056e39..f0d256273c83 100644
--- a/include/linux/of.h
+++ b/include/linux/of.h
@@ -113,6 +113,7 @@ static inline void of_node_put(struct device_node *node) { }
 extern struct device_node *of_allnodes;
 extern struct device_node *of_chosen;
 extern struct device_node *of_aliases;
+extern struct device_node *of_stdout;
 extern raw_spinlock_t devtree_lock;
 
 static inline bool of_have_populated_dt(void)

commit 3482f2c52b77bf6596e24aae82e204a0603eba66
Author: Grant Likely <grant.likely@linaro.org>
Date:   Thu Mar 27 17:18:55 2014 -0700

    of: Create of_console_check() for selecting a console specified in /chosen
    
    The devicetree has a binding for specifying the console device in the
    /chosen node, but the kernel doesn't use it consistently. This change
    adds an API for testing if a device node is a console, and adds a
    preferred console entry if it is.
    
    At the same time this patch removes the of_device_is_stdout_path() API
    since it is unused.
    
    Signed-off-by: Grant Likely <grant.likely@linaro.org>
    Tested-by: Sascha Hauer <s.hauer@pengutronix.de>

diff --git a/include/linux/of.h b/include/linux/of.h
index 196b34c1ef4e..9d9734056e39 100644
--- a/include/linux/of.h
+++ b/include/linux/of.h
@@ -352,7 +352,7 @@ const __be32 *of_prop_next_u32(struct property *prop, const __be32 *cur,
  */
 const char *of_prop_next_string(struct property *prop, const char *cur);
 
-int of_device_is_stdout_path(struct device_node *dn);
+bool of_console_check(struct device_node *dn, char *name, int index);
 
 #else /* CONFIG_OF */
 
@@ -564,9 +564,9 @@ static inline int of_machine_is_compatible(const char *compat)
 	return 0;
 }
 
-static inline int of_device_is_stdout_path(struct device_node *dn)
+static inline bool of_console_check(const struct device_node *dn, const char *name, int index)
 {
-	return 0;
+	return false;
 }
 
 static inline const __be32 *of_prop_next_u32(struct property *prop,

commit d27050641e9bc056446deb0814e7ba1aa7911f5a
Merge: b77279bc2e81 43cb43678705
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Wed Jun 4 10:02:38 2014 -0700

    Merge tag 'devicetree-for-3.16' of git://git.kernel.org/pub/scm/linux/kernel/git/robh/linux into next
    
    Pull DeviceTree updates from Rob Herring:
     - Another round of clean-up of FDT related code in architecture code.
       This removes knowledge of internal FDT details from most
       architectures except powerpc.
     - Conversion of kernel's custom FDT parsing code to use libfdt.
     - DT based initialization for generic serial earlycon.  The
       introduction of generic serial earlycon support went in through the
       tty tree.
     - Improve the platform device naming for DT probed devices to ensure
       unique naming and use parent names instead of a global index.
     - Fix a race condition in of_update_property.
     - Unify the various linker section OF match tables and fix several
       function prototype errors.
     - Update platform_get_irq_byname to work in deferred probe cases.
     - 2 binding doc updates
    
    * tag 'devicetree-for-3.16' of git://git.kernel.org/pub/scm/linux/kernel/git/robh/linux: (58 commits)
      of: handle NULL node in next_child iterators
      of/irq: provide more wrappers for !CONFIG_OF
      devicetree: bindings: Document micrel vendor prefix
      dt: bindings: dwc2: fix required value for the phy-names property
      of_pci_irq: kill useless variable in of_irq_parse_pci()
      of/irq: do irq resolution in platform_get_irq_byname()
      of: Add a testcase for of_find_node_by_path()
      of: Make of_find_node_by_path() handle /aliases
      of: Create unlocked version of for_each_child_of_node()
      lib: add glibc style strchrnul() variant
      of: Handle memory@0 node on PPC32 only
      pci/of: Remove dead code
      of: fix race between search and remove in of_update_property()
      of: Use NULL for pointers
      of: Stop naming platform_device using dcr address
      of: Ensure unique names without sacrificing determinism
      tty/serial: pl011: add DT based earlycon support
      of/fdt: add FDT serial scanning for earlycon
      of/fdt: add FDT address translation support
      serial: earlycon: add DT support
      ...

commit 0a58471541cc823ef8056d23945c39fec154481c
Merge: ff933a0817f9 08d38bebb4dc
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Mon Jun 2 16:14:07 2014 -0700

    Merge tag 'cleanup-for-3.16' of git://git.kernel.org/pub/scm/linux/kernel/git/arm/arm-soc into next
    
    Pull ARM SoC cleanups from Olof Johansson:
     "Cleanups for 3.16.  Among these are:
    
       - a bunch of misc cleanups for Broadcom platforms, mostly
         housekeeping
       - enabling Common Clock Framework on the older s3c24xx Samsung
         chipsets
       - cleanup of the Versatile Express system controller code, moving it
         to syscon
       - power management cleanups for OMAP platforms
    
      plus a handful of other cleanups across the place"
    
    * tag 'cleanup-for-3.16' of git://git.kernel.org/pub/scm/linux/kernel/git/arm/arm-soc: (87 commits)
      ARM: kconfig: allow PCI support to be selected with ARCH_MULTIPLATFORM
      clk: samsung: fix build error
      ARM: vexpress: refine dependencies for new code
      clk: samsung: clk-s3c2410-dlck: do not use PNAME macro as it declares __initdata
      cpufreq: exynos: Fix the compile error
      ARM: S3C24XX: move debug-macro.S into the common space
      ARM: S3C24XX: use generic DEBUG_UART_PHY/_VIRT in debug macro
      ARM: S3C24XX: trim down debug uart handling
      ARM: compressed/head.S: remove s3c24xx special case
      ARM: EXYNOS: Remove unnecessary inclusion of cpu.h
      ARM: EXYNOS: Migrate Exynos specific macros from plat to mach
      ARM: EXYNOS: Remove exynos_subsys registration
      ARM: EXYNOS: Remove duplicate lines in Makefile
      ARM: EXYNOS: use v7_exit_coherency_flush macro for cache disabling
      ARM: OMAP4: PRCM: remove references to cm-regbits-44xx.h from PRCM core files
      ARM: OMAP3/4: PRM: add support of late_init call to prm_ll_ops
      ARM: OMAP3/OMAP4: PRM: add prm_features flags and add IO wakeup under it
      ARM: OMAP3/4: PRM: provide io chain reconfig function through irq setup
      ARM: OMAP2+: PRM: remove unnecessary cpu_is_XXX calls from prm_init / exit
      ARM: OMAP2+: PRCM: cleanup some header includes
      ...

commit 54196ccbe0ba1f268a646059473313589db35b01
Author: Rob Herring <robh@kernel.org>
Date:   Thu May 8 16:09:24 2014 -0500

    of: consolidate linker section OF match table declarations
    
    We now have several OF match tables using linker sections that are
    nearly the same definition. The only variation is the callback function
    prototype. Create a common define for creating linker section OF match
    table entries which each table declaration can use.
    
    Acked-by: Grant Likely <grant.likely@linaro.org>
    Signed-off-by: Rob Herring <robh@kernel.org>

diff --git a/include/linux/of.h b/include/linux/of.h
index 3bad8d106e0e..bf65335b4d05 100644
--- a/include/linux/of.h
+++ b/include/linux/of.h
@@ -757,4 +757,26 @@ static inline int of_get_available_child_count(const struct device_node *np)
 	return num;
 }
 
+#ifdef CONFIG_OF
+#define _OF_DECLARE(table, name, compat, fn, fn_type)			\
+	static const struct of_device_id __of_table_##name		\
+		__used __section(__##table##_of_table)			\
+		 = { .compatible = compat,				\
+		     .data = (fn == (fn_type)NULL) ? fn : fn  }
+#else
+#define _OF_DECLARE(table, name, compat, fn, fn_type)					\
+	static const struct of_device_id __of_table_##name		\
+		__attribute__((unused))					\
+		 = { .compatible = compat,				\
+		     .data = (fn == (fn_type)NULL) ? fn : fn }
+#endif
+
+typedef int (*of_init_fn_2)(struct device_node *, struct device_node *);
+typedef void (*of_init_fn_1)(struct device_node *);
+
+#define OF_DECLARE_1(table, name, compat, fn) \
+		_OF_DECLARE(table, name, compat, fn, of_init_fn_1)
+#define OF_DECLARE_2(table, name, compat, fn) \
+		_OF_DECLARE(table, name, compat, fn, of_init_fn_2)
+
 #endif /* _LINUX_OF_H */

commit c6e126de43e7d4abfd6cf796b40589db3a046167
Author: Pawel Moll <pawel.moll@arm.com>
Date:   Thu May 15 16:55:24 2014 +0100

    of: Keep track of populated platform devices
    
    In "Device Tree powered" systems, platform devices are usually massively
    populated with of_platform_populate() call, executed at some level of
    initcalls, either by generic architecture or by platform-specific code.
    
    There are situations though where certain devices must be created (and
    bound with drivers) before all the others. This presents a challenge,
    as devices created explicitly would be created again by
    of_platform_populate().
    
    This patch tries to solve that issue in a generic way, adding a
    "populated" flag for a DT node description. Subsequent
    of_platform_populate() will skip such nodes (and its children) in
    a similar way to the non-available ones.
    
    This patch also adds of_platform_depopulate() as an operation
    complementary to the _populate() one. It removes a platform or an amba
    device populated from the Device Tree, together with its all children
    (leaving, however, devices without associated of_node untouched)
    clearing the "populated" flag on the way.
    
    Signed-off-by: Pawel Moll <pawel.moll@arm.com>
    Reviewed-by: Rob Herring <robh@kernel.org>
    Acked-by: Grant Likely <grant.likely@linaro.org>

diff --git a/include/linux/of.h b/include/linux/of.h
index 3bad8d106e0e..4c50d0b78b89 100644
--- a/include/linux/of.h
+++ b/include/linux/of.h
@@ -130,6 +130,12 @@ static inline int of_node_check_flag(struct device_node *n, unsigned long flag)
 	return test_bit(flag, &n->_flags);
 }
 
+static inline int of_node_test_and_set_flag(struct device_node *n,
+					    unsigned long flag)
+{
+	return test_and_set_bit(flag, &n->_flags);
+}
+
 static inline void of_node_set_flag(struct device_node *n, unsigned long flag)
 {
 	set_bit(flag, &n->_flags);
@@ -197,6 +203,7 @@ static inline unsigned long of_read_ulong(const __be32 *cell, int size)
 /* flag descriptions */
 #define OF_DYNAMIC	1 /* node and properties were allocated via kmalloc */
 #define OF_DETACHED	2 /* node has been detached from the device tree */
+#define OF_POPULATED	3 /* device already created for the node */
 
 #define OF_IS_DYNAMIC(x) test_bit(OF_DYNAMIC, &x->_flags)
 #define OF_MARK_DYNAMIC(x) set_bit(OF_DYNAMIC, &x->_flags)

commit 4c358e15553ed88bf2ddae422624624e1dd663d1
Author: Stephen Rothwell <sfr@canb.auug.org.au>
Date:   Thu May 15 14:44:30 2014 +1000

    of: fix CONFIG_OF=n prototype of of_node_full_name()
    
    Make the CONFIG_OF=n prototpe of of_node_full_name() mateh the CONFIG_OF=y
    version.
    
    Fixes compile warnings like this:
    
    sound/soc/soc-core.c: In function 'soc_check_aux_dev':
    sound/soc/soc-core.c:1667:3: warning: passing argument 1 of 'of_node_full_name' discards 'const' qualifier from pointer target type [enabled by default]
       codecname = of_node_full_name(aux_dev->codec_of_node);
    
    when CONFIG_OF is not defined.
    
    Signed-off-by: Stephen Rothwell <sfr@canb.auug.org.au>
    Signed-off-by: Grant Likely <grant.likely@linaro.org>

diff --git a/include/linux/of.h b/include/linux/of.h
index 3bad8d106e0e..e6f0988c1c68 100644
--- a/include/linux/of.h
+++ b/include/linux/of.h
@@ -349,7 +349,7 @@ int of_device_is_stdout_path(struct device_node *dn);
 
 #else /* CONFIG_OF */
 
-static inline const char* of_node_full_name(struct device_node *np)
+static inline const char* of_node_full_name(const struct device_node *np)
 {
 	return "<no-node>";
 }

commit 20cd477c398decd6a8461ac48609b6c0ab4c7567
Author: Alexander Shiyan <shc_work@mail.ru>
Date:   Wed Apr 16 10:49:20 2014 +0400

    of: add empty of_find_node_by_path() for !OF
    
    Add an empty version of of_find_node_by_path().
    This fixes following build error for asoc tree:
    sound/soc/fsl/fsl_ssi.c: In function 'fsl_ssi_probe':
    sound/soc/fsl/fsl_ssi.c:1471:2: error: implicit declaration of function 'of_find_node_by_path' [-Werror=implicit-function-declaration]
      sprop = of_get_property(of_find_node_by_path("/"), "compatible", NULL);
    
    Reported-by: Stephen Rothwell <sfr@canb.auug.org.au>
    Signed-off-by: Alexander Shiyan <shc_work@mail.ru>
    Signed-off-by: Rob Herring <robh@kernel.org>

diff --git a/include/linux/of.h b/include/linux/of.h
index 919bf211877d..3bad8d106e0e 100644
--- a/include/linux/of.h
+++ b/include/linux/of.h
@@ -374,6 +374,11 @@ static inline struct device_node *of_find_matching_node_and_match(
 	return NULL;
 }
 
+static inline struct device_node *of_find_node_by_path(const char *path)
+{
+	return NULL;
+}
+
 static inline struct device_node *of_get_parent(const struct device_node *node)
 {
 	return NULL;

commit b9f2b21a32906a47c220b5167b88869f2c90f1c4
Merge: 70f6c087573e a0e7398357f2
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Wed Apr 2 14:27:15 2014 -0700

    Merge tag 'dt-for-linus' of git://git.secretlab.ca/git/linux
    
    Pull devicetree changes from Grant Likely:
     "Updates to devicetree core code.  This branch contains the following
      notable changes:
    
       - add reserved memory binding
       - make struct device_node a kobject and remove legacy
         /proc/device-tree
       - ePAPR conformance fixes
       - update in-kernel DTC copy to version v1.4.0
       - preparatory changes for dynamic device tree overlays
       - minor bug fixes and documentation changes
    
      The most significant change in this branch is the conversion of struct
      device_node to be a kobject that is exposed via sysfs and removal of
      the old /proc/device-tree code.  This simplifies the device tree
      handling code and tightens up the lifecycle on device tree nodes.
    
      [updated: added fix for dangling select PROC_DEVICETREE]"
    
    * tag 'dt-for-linus' of git://git.secretlab.ca/git/linux: (29 commits)
      dt: Remove dangling "select PROC_DEVICETREE"
      of: Add support for ePAPR "stdout-path" property
      of: device_node kobject lifecycle fixes
      of: only scan for reserved mem when fdt present
      powerpc: add support for reserved memory defined by device tree
      arm64: add support for reserved memory defined by device tree
      of: add missing major vendors
      of: add vendor prefix for SMSC
      of: remove /proc/device-tree
      of/selftest: Add self tests for manipulation of properties
      of: Make device nodes kobjects so they show up in sysfs
      arm: add support for reserved memory defined by device tree
      drivers: of: add support for custom reserved memory drivers
      drivers: of: add initialization code for dynamic reserved memory
      drivers: of: add initialization code for static reserved memory
      of: document bindings for reserved-memory nodes
      Revert "of: fix of_update_property()"
      kbuild: dtbs_install: new make target
      ARM: mvebu: Allows to get the SoC ID even without PCI enabled
      of: Allows to use the PCI translator without the PCI core
      ...

commit 794016f9dcb5930205becb040860190662c5847c
Merge: c9cbbd4fc066 7f196ec93896 ca5d1b3524b4 df948bbf4868 f1b3f9031d25 1f5a9623eb43 a1985d469d5c ad5ec6cdb2c4 4d047d6c1fbe
Author: Mark Brown <broonie@linaro.org>
Date:   Wed Mar 26 16:57:57 2014 +0000

    Merge remote-tracking branches 'regulator/topic/doc', 'regulator/topic/enable', 'regulator/topic/fan53555', 'regulator/topic/fixed', 'regulator/topic/gpio', 'regulator/topic/lp3971', 'regulator/topic/lp872x' and 'regulator/topic/max14577' into regulator-next

commit 0829f6d1f69e4f2fae4062987ae6531a9af1a2e3
Author: Pantelis Antoniou <panto@antoniou-consulting.com>
Date:   Fri Dec 13 20:08:59 2013 +0200

    of: device_node kobject lifecycle fixes
    
    After the move to having device nodes be proper kobjects the lifecycle
    of the node needs to be controlled better.
    
    At first convert of_add_node() in the unflattened functions to
    of_init_node() which initializes the kobject so that of_node_get/put
    work correctly even before of_init is called.
    
    Afterwards introduce of_node_is_initialized & of_node_is_attached that
    query the underlying kobject about the state (attached means kobj
    is visible in sysfs)
    
    Using that make sure the lifecycle of the tree is correct at all
    times.
    
    Signed-off-by: Pantelis Antoniou <panto@antoniou-consulting.com>
    [grant.likely: moved of_node_init() calls, fixed up locking, and
                   dropped __of_populate() hunks]
    Signed-off-by: Grant Likely <grant.likely@linaro.org>

diff --git a/include/linux/of.h b/include/linux/of.h
index 257994a420f3..a8b9dad90c64 100644
--- a/include/linux/of.h
+++ b/include/linux/of.h
@@ -76,6 +76,25 @@ struct of_phandle_args {
 
 extern int of_node_add(struct device_node *node);
 
+/* initialize a node */
+extern struct kobj_type of_node_ktype;
+static inline void of_node_init(struct device_node *node)
+{
+	kobject_init(&node->kobj, &of_node_ktype);
+}
+
+/* true when node is initialized */
+static inline int of_node_is_initialized(struct device_node *node)
+{
+	return node && node->kobj.state_initialized;
+}
+
+/* true when node is attached (i.e. present on sysfs) */
+static inline int of_node_is_attached(struct device_node *node)
+{
+	return node && node->kobj.state_in_sysfs;
+}
+
 #ifdef CONFIG_OF_DYNAMIC
 extern struct device_node *of_node_get(struct device_node *node);
 extern void of_node_put(struct device_node *node);

commit 8357041a69b368991d1b04d9f1d297f8d71e1314
Author: Grant Likely <grant.likely@secretlab.ca>
Date:   Tue Nov 6 21:03:27 2012 +0000

    of: remove /proc/device-tree
    
    The same data is now available in sysfs, so we can remove the code
    that exports it in /proc and replace it with a symlink to the sysfs
    version.
    
    Tested on versatile qemu model and mpc5200 eval board. More testing
    would be appreciated.
    
    v5: Fixed up conflicts with mainline changes
    
    Signed-off-by: Grant Likely <grant.likely@secretlab.ca>
    Cc: Rob Herring <rob.herring@calxeda.com>
    Cc: Benjamin Herrenschmidt <benh@kernel.crashing.org>
    Cc: David S. Miller <davem@davemloft.net>
    Cc: Nathan Fontenot <nfont@linux.vnet.ibm.com>
    Cc: Pantelis Antoniou <panto@antoniou-consulting.com>

diff --git a/include/linux/of.h b/include/linux/of.h
index bd45be5bd565..257994a420f3 100644
--- a/include/linux/of.h
+++ b/include/linux/of.h
@@ -57,7 +57,6 @@ struct device_node {
 	struct	device_node *sibling;
 	struct	device_node *next;	/* next device of same type */
 	struct	device_node *allnext;	/* next in list of all nodes */
-	struct	proc_dir_entry *pde;	/* this node's proc directory */
 	struct	kobject kobj;
 	unsigned long _flags;
 	void	*data;
@@ -658,14 +657,4 @@ static inline int of_get_available_child_count(const struct device_node *np)
 	return num;
 }
 
-#if defined(CONFIG_PROC_FS) && defined(CONFIG_PROC_DEVICETREE)
-extern void proc_device_tree_add_node(struct device_node *, struct proc_dir_entry *);
-extern void proc_device_tree_add_prop(struct proc_dir_entry *pde, struct property *prop);
-extern void proc_device_tree_remove_prop(struct proc_dir_entry *pde,
-					 struct property *prop);
-extern void proc_device_tree_update_prop(struct proc_dir_entry *pde,
-					 struct property *newprop,
-					 struct property *oldprop);
-#endif
-
 #endif /* _LINUX_OF_H */

commit 75b57ecf9d1d1e17d099ab13b8f48e6e038676be
Author: Grant Likely <grant.likely@linaro.org>
Date:   Thu Feb 20 18:02:11 2014 +0000

    of: Make device nodes kobjects so they show up in sysfs
    
    Device tree nodes are already treated as objects, and we already want to
    expose them to userspace which is done using the /proc filesystem today.
    Right now the kernel has to do a lot of work to keep the /proc view in
    sync with the in-kernel representation. If device_nodes are switched to
    be kobjects then the device tree code can be a whole lot simpler. It
    also turns out that switching to using /sysfs from /proc results in
    smaller code and data size, and the userspace ABI won't change if
    /proc/device-tree symlinks to /sys/firmware/devicetree/base.
    
    v7: Add missing sysfs_bin_attr_init()
    v6: Add __of_add_property() early init fixes from Pantelis
    v5: Rename firmware/ofw to firmware/devicetree
        Fix updating property values in sysfs
    v4: Fixed build error on Powerpc
        Fixed handling of dynamic nodes on powerpc
    v3: Fixed handling of duplicate attribute and child node names
    v2: switch to using sysfs bin_attributes which solve the problem of
        reporting incorrect property size.
    
    Signed-off-by: Grant Likely <grant.likely@secretlab.ca>
    Tested-by: Sascha Hauer <s.hauer@pengutronix.de>
    Cc: Rob Herring <rob.herring@calxeda.com>
    Cc: Benjamin Herrenschmidt <benh@kernel.crashing.org>
    Cc: David S. Miller <davem@davemloft.net>
    Cc: Nathan Fontenot <nfont@linux.vnet.ibm.com>
    Cc: Pantelis Antoniou <panto@antoniou-consulting.com>

diff --git a/include/linux/of.h b/include/linux/of.h
index b3d0f6d86e3b..bd45be5bd565 100644
--- a/include/linux/of.h
+++ b/include/linux/of.h
@@ -18,7 +18,7 @@
 #include <linux/types.h>
 #include <linux/bitops.h>
 #include <linux/errno.h>
-#include <linux/kref.h>
+#include <linux/kobject.h>
 #include <linux/mod_devicetable.h>
 #include <linux/spinlock.h>
 #include <linux/topology.h>
@@ -37,6 +37,7 @@ struct property {
 	struct property *next;
 	unsigned long _flags;
 	unsigned int unique_id;
+	struct bin_attribute attr;
 };
 
 #if defined(CONFIG_SPARC)
@@ -57,7 +58,7 @@ struct device_node {
 	struct	device_node *next;	/* next device of same type */
 	struct	device_node *allnext;	/* next in list of all nodes */
 	struct	proc_dir_entry *pde;	/* this node's proc directory */
-	struct	kref kref;
+	struct	kobject kobj;
 	unsigned long _flags;
 	void	*data;
 #if defined(CONFIG_SPARC)
@@ -74,6 +75,8 @@ struct of_phandle_args {
 	uint32_t args[MAX_PHANDLE_ARGS];
 };
 
+extern int of_node_add(struct device_node *node);
+
 #ifdef CONFIG_OF_DYNAMIC
 extern struct device_node *of_node_get(struct device_node *node);
 extern void of_node_put(struct device_node *node);
@@ -187,6 +190,8 @@ static inline const char *of_node_full_name(const struct device_node *np)
 	return np ? np->full_name : "<no-node>";
 }
 
+#define for_each_of_allnodes(dn) \
+	for (dn = of_allnodes; dn; dn = dn->allnext)
 extern struct device_node *of_find_node_by_name(struct device_node *from,
 	const char *name);
 extern struct device_node *of_find_node_by_type(struct device_node *from,

commit dab2310d9d90eded48625c5382c6a60389bf8ca9
Merge: a3dbeb5b45af 0414855fdc4a
Author: Grant Likely <grant.likely@linaro.org>
Date:   Tue Mar 4 16:44:10 2014 +0800

    Merge tag 'v3.14-rc5' into HEAD
    
    Linux 3.14-rc5

commit ad54a0cfbeb4bd4033d09017557ccbc423f9d5ff
Author: Heiko Stuebner <heiko.stuebner@bqreaders.com>
Date:   Wed Feb 12 01:00:34 2014 +0100

    of: add functions to count number of elements in a property
    
    The need to know the number of array elements in a property is
    a common pattern. To prevent duplication of open-coded implementations
    add a helper static function that also centralises strict sanity
    checking and DTB format details, as well as a set of wrapper functions
    for u8, u16, u32 and u64.
    
    Suggested-by: Mark Rutland <mark.rutland@arm.com>
    Signed-off-by: Heiko Stuebner <heiko.stuebner@bqreaders.com>
    Acked-by: Rob Herring <robh@kernel.org>
    Acked-by: Grant Likely <grant.likely@linaro.org>
    Acked-by: Mark Rutland <mark.rutland@arm.com>
    Signed-off-by: Mark Brown <broonie@linaro.org>

diff --git a/include/linux/of.h b/include/linux/of.h
index 70c64ba17fa5..b59f2e41c7ce 100644
--- a/include/linux/of.h
+++ b/include/linux/of.h
@@ -250,6 +250,8 @@ extern struct device_node *of_find_node_with_property(
 extern struct property *of_find_property(const struct device_node *np,
 					 const char *name,
 					 int *lenp);
+extern int of_property_count_elems_of_size(const struct device_node *np,
+				const char *propname, int elem_size);
 extern int of_property_read_u32_index(const struct device_node *np,
 				       const char *propname,
 				       u32 index, u32 *out_value);
@@ -431,6 +433,12 @@ static inline struct device_node *of_find_compatible_node(
 	return NULL;
 }
 
+static inline int of_property_count_elems_of_size(const struct device_node *np,
+			const char *propname, int elem_size)
+{
+	return -ENOSYS;
+}
+
 static inline int of_property_read_u32_index(const struct device_node *np,
 			const char *propname, u32 index, u32 *out_value)
 {
@@ -569,6 +577,74 @@ extern int of_node_to_nid(struct device_node *np);
 static inline int of_node_to_nid(struct device_node *device) { return 0; }
 #endif
 
+/**
+ * of_property_count_u8_elems - Count the number of u8 elements in a property
+ *
+ * @np:		device node from which the property value is to be read.
+ * @propname:	name of the property to be searched.
+ *
+ * Search for a property in a device node and count the number of u8 elements
+ * in it. Returns number of elements on sucess, -EINVAL if the property does
+ * not exist or its length does not match a multiple of u8 and -ENODATA if the
+ * property does not have a value.
+ */
+static inline int of_property_count_u8_elems(const struct device_node *np,
+				const char *propname)
+{
+	return of_property_count_elems_of_size(np, propname, sizeof(u8));
+}
+
+/**
+ * of_property_count_u16_elems - Count the number of u16 elements in a property
+ *
+ * @np:		device node from which the property value is to be read.
+ * @propname:	name of the property to be searched.
+ *
+ * Search for a property in a device node and count the number of u16 elements
+ * in it. Returns number of elements on sucess, -EINVAL if the property does
+ * not exist or its length does not match a multiple of u16 and -ENODATA if the
+ * property does not have a value.
+ */
+static inline int of_property_count_u16_elems(const struct device_node *np,
+				const char *propname)
+{
+	return of_property_count_elems_of_size(np, propname, sizeof(u16));
+}
+
+/**
+ * of_property_count_u32_elems - Count the number of u32 elements in a property
+ *
+ * @np:		device node from which the property value is to be read.
+ * @propname:	name of the property to be searched.
+ *
+ * Search for a property in a device node and count the number of u32 elements
+ * in it. Returns number of elements on sucess, -EINVAL if the property does
+ * not exist or its length does not match a multiple of u32 and -ENODATA if the
+ * property does not have a value.
+ */
+static inline int of_property_count_u32_elems(const struct device_node *np,
+				const char *propname)
+{
+	return of_property_count_elems_of_size(np, propname, sizeof(u32));
+}
+
+/**
+ * of_property_count_u64_elems - Count the number of u64 elements in a property
+ *
+ * @np:		device node from which the property value is to be read.
+ * @propname:	name of the property to be searched.
+ *
+ * Search for a property in a device node and count the number of u64 elements
+ * in it. Returns number of elements on sucess, -EINVAL if the property does
+ * not exist or its length does not match a multiple of u64 and -ENODATA if the
+ * property does not have a value.
+ */
+static inline int of_property_count_u64_elems(const struct device_node *np,
+				const char *propname)
+{
+	return of_property_count_elems_of_size(np, propname, sizeof(u64));
+}
+
 /**
  * of_property_read_bool - Findfrom a property
  * @np:		device node from which the property value is to be read.

commit 662372e42e46d9bbfcb83e1cce81f6b33cebaddd
Author: Rob Herring <robh@kernel.org>
Date:   Mon Feb 3 08:53:44 2014 -0600

    of: restructure for_each macros to fix compile warnings
    
    Commit 00b2c76a6a "include/linux/of.h: make for_each_child_of_node()
    reference its args when CONFIG_OF=n" fixed warnings for unused
    variables, but introduced variable "used uninitialized" warnings.
    Simply initializing the variables would result in "set but not used"
    warnings with W=1.
    
    Fix both types of warnings by making all the for_each macros
    unconditional and rely on the dummy static inline functions to
    initialize and reference any variables.
    
    Reported-by: Geert Uytterhoeven <geert@linux-m68k.org>
    Cc: David Howells <dhowells@redhat.com>
    Signed-off-by: Rob Herring <robh@kernel.org>
    Acked-by: Grant Likely <grant.likely@linaro.org>

diff --git a/include/linux/of.h b/include/linux/of.h
index 70c64ba17fa5..435cb995904d 100644
--- a/include/linux/of.h
+++ b/include/linux/of.h
@@ -169,35 +169,15 @@ static inline const char *of_node_full_name(const struct device_node *np)
 
 extern struct device_node *of_find_node_by_name(struct device_node *from,
 	const char *name);
-#define for_each_node_by_name(dn, name) \
-	for (dn = of_find_node_by_name(NULL, name); dn; \
-	     dn = of_find_node_by_name(dn, name))
 extern struct device_node *of_find_node_by_type(struct device_node *from,
 	const char *type);
-#define for_each_node_by_type(dn, type) \
-	for (dn = of_find_node_by_type(NULL, type); dn; \
-	     dn = of_find_node_by_type(dn, type))
 extern struct device_node *of_find_compatible_node(struct device_node *from,
 	const char *type, const char *compat);
-#define for_each_compatible_node(dn, type, compatible) \
-	for (dn = of_find_compatible_node(NULL, type, compatible); dn; \
-	     dn = of_find_compatible_node(dn, type, compatible))
 extern struct device_node *of_find_matching_node_and_match(
 	struct device_node *from,
 	const struct of_device_id *matches,
 	const struct of_device_id **match);
-static inline struct device_node *of_find_matching_node(
-	struct device_node *from,
-	const struct of_device_id *matches)
-{
-	return of_find_matching_node_and_match(from, matches, NULL);
-}
-#define for_each_matching_node(dn, matches) \
-	for (dn = of_find_matching_node(NULL, matches); dn; \
-	     dn = of_find_matching_node(dn, matches))
-#define for_each_matching_node_and_match(dn, matches, match) \
-	for (dn = of_find_matching_node_and_match(NULL, matches, match); \
-	     dn; dn = of_find_matching_node_and_match(dn, matches, match))
+
 extern struct device_node *of_find_node_by_path(const char *path);
 extern struct device_node *of_find_node_by_phandle(phandle handle);
 extern struct device_node *of_get_parent(const struct device_node *node);
@@ -209,43 +189,11 @@ extern struct device_node *of_get_next_available_child(
 
 extern struct device_node *of_get_child_by_name(const struct device_node *node,
 					const char *name);
-#define for_each_child_of_node(parent, child) \
-	for (child = of_get_next_child(parent, NULL); child != NULL; \
-	     child = of_get_next_child(parent, child))
-
-#define for_each_available_child_of_node(parent, child) \
-	for (child = of_get_next_available_child(parent, NULL); child != NULL; \
-	     child = of_get_next_available_child(parent, child))
-
-static inline int of_get_child_count(const struct device_node *np)
-{
-	struct device_node *child;
-	int num = 0;
-
-	for_each_child_of_node(np, child)
-		num++;
-
-	return num;
-}
-
-static inline int of_get_available_child_count(const struct device_node *np)
-{
-	struct device_node *child;
-	int num = 0;
-
-	for_each_available_child_of_node(np, child)
-		num++;
-
-	return num;
-}
 
 /* cache lookup */
 extern struct device_node *of_find_next_cache_node(const struct device_node *);
 extern struct device_node *of_find_node_with_property(
 	struct device_node *from, const char *prop_name);
-#define for_each_node_with_property(dn, prop_name) \
-	for (dn = of_find_node_with_property(NULL, prop_name); dn; \
-	     dn = of_find_node_with_property(dn, prop_name))
 
 extern struct property *of_find_property(const struct device_node *np,
 					 const char *name,
@@ -367,42 +315,53 @@ static inline struct device_node *of_find_node_by_name(struct device_node *from,
 	return NULL;
 }
 
-static inline struct device_node *of_get_parent(const struct device_node *node)
+static inline struct device_node *of_find_node_by_type(struct device_node *from,
+	const char *type)
 {
 	return NULL;
 }
 
-static inline bool of_have_populated_dt(void)
+static inline struct device_node *of_find_matching_node_and_match(
+	struct device_node *from,
+	const struct of_device_id *matches,
+	const struct of_device_id **match)
 {
-	return false;
+	return NULL;
 }
 
-/* Kill an unused variable warning on a device_node pointer */
-static inline void __of_use_dn(const struct device_node *np)
+static inline struct device_node *of_get_parent(const struct device_node *node)
 {
+	return NULL;
 }
 
-#define for_each_child_of_node(parent, child) \
-	while (__of_use_dn(parent), __of_use_dn(child), 0)
+static inline struct device_node *of_get_next_child(
+	const struct device_node *node, struct device_node *prev)
+{
+	return NULL;
+}
 
-#define for_each_available_child_of_node(parent, child) \
-	while (0)
+static inline struct device_node *of_get_next_available_child(
+	const struct device_node *node, struct device_node *prev)
+{
+	return NULL;
+}
 
-static inline struct device_node *of_get_child_by_name(
-					const struct device_node *node,
-					const char *name)
+static inline struct device_node *of_find_node_with_property(
+	struct device_node *from, const char *prop_name)
 {
 	return NULL;
 }
 
-static inline int of_get_child_count(const struct device_node *np)
+static inline bool of_have_populated_dt(void)
 {
-	return 0;
+	return false;
 }
 
-static inline int of_get_available_child_count(const struct device_node *np)
+static inline struct device_node *of_get_child_by_name(
+					const struct device_node *node,
+					const char *name)
 {
-	return 0;
+	return NULL;
 }
 
 static inline int of_device_is_compatible(const struct device_node *device,
@@ -569,6 +528,13 @@ extern int of_node_to_nid(struct device_node *np);
 static inline int of_node_to_nid(struct device_node *device) { return 0; }
 #endif
 
+static inline struct device_node *of_find_matching_node(
+	struct device_node *from,
+	const struct of_device_id *matches)
+{
+	return of_find_matching_node_and_match(from, matches, NULL);
+}
+
 /**
  * of_property_read_bool - Findfrom a property
  * @np:		device node from which the property value is to be read.
@@ -618,6 +584,55 @@ static inline int of_property_read_u32(const struct device_node *np,
 		s;						\
 		s = of_prop_next_string(prop, s))
 
+#define for_each_node_by_name(dn, name) \
+	for (dn = of_find_node_by_name(NULL, name); dn; \
+	     dn = of_find_node_by_name(dn, name))
+#define for_each_node_by_type(dn, type) \
+	for (dn = of_find_node_by_type(NULL, type); dn; \
+	     dn = of_find_node_by_type(dn, type))
+#define for_each_compatible_node(dn, type, compatible) \
+	for (dn = of_find_compatible_node(NULL, type, compatible); dn; \
+	     dn = of_find_compatible_node(dn, type, compatible))
+#define for_each_matching_node(dn, matches) \
+	for (dn = of_find_matching_node(NULL, matches); dn; \
+	     dn = of_find_matching_node(dn, matches))
+#define for_each_matching_node_and_match(dn, matches, match) \
+	for (dn = of_find_matching_node_and_match(NULL, matches, match); \
+	     dn; dn = of_find_matching_node_and_match(dn, matches, match))
+
+#define for_each_child_of_node(parent, child) \
+	for (child = of_get_next_child(parent, NULL); child != NULL; \
+	     child = of_get_next_child(parent, child))
+#define for_each_available_child_of_node(parent, child) \
+	for (child = of_get_next_available_child(parent, NULL); child != NULL; \
+	     child = of_get_next_available_child(parent, child))
+
+#define for_each_node_with_property(dn, prop_name) \
+	for (dn = of_find_node_with_property(NULL, prop_name); dn; \
+	     dn = of_find_node_with_property(dn, prop_name))
+
+static inline int of_get_child_count(const struct device_node *np)
+{
+	struct device_node *child;
+	int num = 0;
+
+	for_each_child_of_node(np, child)
+		num++;
+
+	return num;
+}
+
+static inline int of_get_available_child_count(const struct device_node *np)
+{
+	struct device_node *child;
+	int num = 0;
+
+	for_each_available_child_of_node(np, child)
+		num++;
+
+	return num;
+}
+
 #if defined(CONFIG_PROC_FS) && defined(CONFIG_PROC_DEVICETREE)
 extern void proc_device_tree_add_node(struct device_node *, struct proc_dir_entry *);
 extern void proc_device_tree_add_prop(struct proc_dir_entry *pde, struct property *prop);

commit b66548e2a9baf65ccebeb3750f0ab9ddbef500f6
Author: Andreas Herrmann <andreas.herrmann@calxeda.com>
Date:   Fri Jan 17 12:08:30 2014 +0100

    of: Increase MAX_PHANDLE_ARGS
    
    arm-smmu driver uses of_parse_phandle_with_args when parsing DT
    information to determine stream IDs for a master device.
    Thus the number of stream IDs per master device is bound by
    MAX_PHANDLE_ARGS.
    
    To support Calxeda ECX-2000 hardware arm-smmu driver requires a
    slightly higher value for MAX_PHANDLE_ARGS as this hardware has 10
    stream IDs for one master device.
    
    Increasing it to 16 seems a reasonable choice.
    
    Cc: Grant Likely <grant.likely@linaro.org>
    Cc: Rob Herring <robh+dt@kernel.org>
    Cc: devicetree@vger.kernel.org
    Cc: Andreas Herrmann <herrmann.der.user@googlemail.com>
    Acked-by: Rob Herring <robh@kernel.org>
    Signed-off-by: Andreas Herrmann <andreas.herrmann@calxeda.com>
    Signed-off-by: Grant Likely <grant.likely@linaro.org>

diff --git a/include/linux/of.h b/include/linux/of.h
index 3d0593943f47..0ea516ed22c0 100644
--- a/include/linux/of.h
+++ b/include/linux/of.h
@@ -67,7 +67,7 @@ struct device_node {
 #endif
 };
 
-#define MAX_PHANDLE_ARGS 8
+#define MAX_PHANDLE_ARGS 16
 struct of_phandle_args {
 	struct device_node *np;
 	int args_count;

commit 588453c69dace39351129a038dd2796608f74bb3
Author: Pantelis Antoniou <panto@antoniou-consulting.com>
Date:   Fri Nov 8 17:03:56 2013 +0200

    of: Introduce device tree node flag helpers.
    
    Helper functions for working with device node flags.
    
    Signed-off-by: Pantelis Antoniou <panto@antoniou-consulting.com>
    Signed-off-by: Grant Likely <grant.likely@linaro.org>

diff --git a/include/linux/of.h b/include/linux/of.h
index 70c64ba17fa5..3d0593943f47 100644
--- a/include/linux/of.h
+++ b/include/linux/of.h
@@ -114,6 +114,26 @@ static inline void of_node_set_flag(struct device_node *n, unsigned long flag)
 	set_bit(flag, &n->_flags);
 }
 
+static inline void of_node_clear_flag(struct device_node *n, unsigned long flag)
+{
+	clear_bit(flag, &n->_flags);
+}
+
+static inline int of_property_check_flag(struct property *p, unsigned long flag)
+{
+	return test_bit(flag, &p->_flags);
+}
+
+static inline void of_property_set_flag(struct property *p, unsigned long flag)
+{
+	set_bit(flag, &p->_flags);
+}
+
+static inline void of_property_clear_flag(struct property *p, unsigned long flag)
+{
+	clear_bit(flag, &p->_flags);
+}
+
 extern struct device_node *of_find_all_nodes(struct device_node *prev);
 
 /*

commit 00b2c76a6abbe082bb5afb89ee49ec325e9cd4d2
Author: David Howells <dhowells@redhat.com>
Date:   Thu Jan 23 15:54:02 2014 -0800

    include/linux/of.h: make for_each_child_of_node() reference its args when CONFIG_OF=n
    
    Make for_each_child_of_node() reference its args when CONFIG_OF=n to
    avoid warnings like:
    
            drivers/leds/leds-pwm.c:88:22: warning: unused variable 'node' [-Wunused-variable]
              struct device_node *node = pdev->dev.of_node;
                                  ^
    
    Signed-off-by: David Howells <dhowells@redhat.com>
    Cc: Grant Likely <grant.likely@linaro.org>
    Cc: Rob Herring <robh+dt@kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

diff --git a/include/linux/of.h b/include/linux/of.h
index 276c546980d8..70c64ba17fa5 100644
--- a/include/linux/of.h
+++ b/include/linux/of.h
@@ -377,8 +377,13 @@ static inline bool of_have_populated_dt(void)
 	return false;
 }
 
+/* Kill an unused variable warning on a device_node pointer */
+static inline void __of_use_dn(const struct device_node *np)
+{
+}
+
 #define for_each_child_of_node(parent, child) \
-	while (0)
+	while (__of_use_dn(parent), __of_use_dn(child), 0)
 
 #define for_each_available_child_of_node(parent, child) \
 	while (0)

commit 10d0c9705e80bbd3d587c5fad24599aabaca6688
Merge: 85b656cf1560 c11eede69b6a
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Tue Nov 12 16:52:17 2013 +0900

    Merge tag 'devicetree-for-3.13' of git://git.kernel.org/pub/scm/linux/kernel/git/robh/linux
    
    Pull devicetree updates from Rob Herring:
     "DeviceTree updates for 3.13.  This is a bit larger pull request than
      usual for this cycle with lots of clean-up.
    
       - Cross arch clean-up and consolidation of early DT scanning code.
       - Clean-up and removal of arch prom.h headers.  Makes arch specific
         prom.h optional on all but Sparc.
       - Addition of interrupts-extended property for devices connected to
         multiple interrupt controllers.
       - Refactoring of DT interrupt parsing code in preparation for
         deferred probe of interrupts.
       - ARM cpu and cpu topology bindings documentation.
       - Various DT vendor binding documentation updates"
    
    * tag 'devicetree-for-3.13' of git://git.kernel.org/pub/scm/linux/kernel/git/robh/linux: (82 commits)
      powerpc: add missing explicit OF includes for ppc
      dt/irq: add empty of_irq_count for !OF_IRQ
      dt: disable self-tests for !OF_IRQ
      of: irq: Fix interrupt-map entry matching
      MIPS: Netlogic: replace early_init_devtree() call
      of: Add Panasonic Corporation vendor prefix
      of: Add Chunghwa Picture Tubes Ltd. vendor prefix
      of: Add AU Optronics Corporation vendor prefix
      of/irq: Fix potential buffer overflow
      of/irq: Fix bug in interrupt parsing refactor.
      of: set dma_mask to point to coherent_dma_mask
      of: add vendor prefix for PHYTEC Messtechnik GmbH
      DT: sort vendor-prefixes.txt
      of: Add vendor prefix for Cadence
      of: Add empty for_each_available_child_of_node() macro definition
      arm/versatile: Fix versatile irq specifications.
      of/irq: create interrupts-extended property
      microblaze/pci: Drop PowerPC-ism from irq parsing
      of/irq: Create of_irq_parse_and_map_pci() to consolidate arch code.
      of/irq: Use irq_of_parse_and_map()
      ...

commit 85b656cf1560e27a89354a23f2c10ba229d2f173
Merge: 2b684c073f32 30dae2f98612
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Tue Nov 12 16:27:42 2013 +0900

    Merge branch 'for-next' of git://git.kernel.org/pub/scm/linux/kernel/git/cooloney/linux-leds
    
    Pull LED subsystem changes from Bryan Wu:
     "LED subsystem updates for 3.13 are basically cleanup and also add a
      new driver for PCA9685"
    
    * 'for-next' of git://git.kernel.org/pub/scm/linux/kernel/git/cooloney/linux-leds:
      leds: lp55xx: handle enable pin in driver
      leds-gpio: of: led should not be created if its status is disabled
      of: introduce of_get_available_child_count
      leds: Added driver for the NXP PCA9685 I2C chip
      leds: pwm: Remove redundant of_match_ptr
      leds: Include linux/of.h header
      leds: dac124s085: Remove redundant spi_set_drvdata
      leds: lp55xx: enable setting default trigger
      leds: blinkm: Remove redundant break

commit b5480950c6cbb7b07ab1c1a5af0dc661a1cb6f24
Merge: e363bbac316f 355e62f5ad12
Author: Rob Herring <rob.herring@calxeda.com>
Date:   Thu Nov 7 10:34:46 2013 -0600

    Merge remote-tracking branch 'grant/devicetree/next' into for-next

commit f6f0747e5bc69401d7f90313aa1b46709d27840a
Author: Sylwester Nawrocki <s.nawrocki@samsung.com>
Date:   Mon Oct 28 13:12:35 2013 -0500

    of: Add empty for_each_available_child_of_node() macro definition
    
    Add this empty macro definition so users can be compiled without
    excluding this macro call with preprocessor directives when CONFIG_OF
    is disabled.
    
    Signed-off-by: Sylwester Nawrocki <s.nawrocki@samsung.com>
    Signed-off-by: Kyungmin Park <kyungmin.park@samsung.com>
    Signed-off-by: Rob Herring <rob.herring@calxeda.com>

diff --git a/include/linux/of.h b/include/linux/of.h
index 54017b83650b..b97f685c941f 100644
--- a/include/linux/of.h
+++ b/include/linux/of.h
@@ -366,6 +366,9 @@ static inline bool of_have_populated_dt(void)
 #define for_each_child_of_node(parent, child) \
 	while (0)
 
+#define for_each_available_child_of_node(parent, child) \
+	while (0)
+
 static inline struct device_node *of_get_child_by_name(
 					const struct device_node *node,
 					const char *name)

commit a3e31b4588443f37d82195096c6b30dff1c152c2
Author: Sudeep KarkadaNagesha <sudeep.karkadanagesha@arm.com>
Date:   Wed Sep 18 11:53:05 2013 +0100

    of: Move definition of of_find_next_cache_node into common code.
    
    Since the definition of_find_next_cache_node is architecture independent,
    the existing definition in powerpc can be moved to driver/of/base.c
    
    Cc: Benjamin Herrenschmidt <benh@kernel.crashing.org>
    Cc: Grant Likely <grant.likely@linaro.org>
    Cc: Rob Herring <rob.herring@calxeda.com>
    Signed-off-by: Sudeep KarkadaNagesha <sudeep.karkadanagesha@arm.com>
    Signed-off-by: Benjamin Herrenschmidt <benh@kernel.crashing.org>

diff --git a/include/linux/of.h b/include/linux/of.h
index f95aee391e30..c08c07e249b3 100644
--- a/include/linux/of.h
+++ b/include/linux/of.h
@@ -226,6 +226,8 @@ static inline int of_get_child_count(const struct device_node *np)
 	return num;
 }
 
+/* cache lookup */
+extern struct device_node *of_find_next_cache_node(const struct device_node *);
 extern struct device_node *of_find_node_with_property(
 	struct device_node *from, const char *prop_name);
 #define for_each_node_with_property(dn, prop_name) \

commit 954e04b9491adea99e4590bc73937fdd8774ab3c
Author: Bryan Wu <cooloney@gmail.com>
Date:   Tue Sep 24 10:38:26 2013 -0700

    of: introduce of_get_available_child_count
    
    Some drivers keep counting available child by themselves. So
    introduce a new simple API like of_get_child_count() but for
    available childs.
    
    Cc: Josh Wu <josh.wu@atmel.com>
    Signed-off-by: Bryan Wu <cooloney@gmail.com>
    Acked-by: Rob Herring <rob.herring@calxeda.com>

diff --git a/include/linux/of.h b/include/linux/of.h
index f95aee391e30..54c25606a997 100644
--- a/include/linux/of.h
+++ b/include/linux/of.h
@@ -226,6 +226,17 @@ static inline int of_get_child_count(const struct device_node *np)
 	return num;
 }
 
+static inline int of_get_available_child_count(const struct device_node *np)
+{
+	struct device_node *child;
+	int num = 0;
+
+	for_each_available_child_of_node(np, child)
+		num++;
+
+	return num;
+}
+
 extern struct device_node *of_find_node_with_property(
 	struct device_node *from, const char *prop_name);
 #define for_each_node_with_property(dn, prop_name) \
@@ -376,6 +387,11 @@ static inline int of_get_child_count(const struct device_node *np)
 	return 0;
 }
 
+static inline int of_get_available_child_count(const struct device_node *np)
+{
+	return 0;
+}
+
 static inline int of_device_is_compatible(const struct device_node *device,
 					  const char *name)
 {

commit 624cfca534f9b1ffb1326617b4e973a3d5ecff4a
Author: Grant Likely <grant.likely@linaro.org>
Date:   Fri Oct 11 22:05:10 2013 +0100

    of: Add helper for printing an of_phandle_args structure
    
    It is sometimes useful for debug to get the contents of an
    of_phandle_args structure out into the kernel log.
    
    Signed-off-by: Grant Likely <grant.likely@linaro.org>

diff --git a/include/linux/of.h b/include/linux/of.h
index f95aee391e30..374e03536135 100644
--- a/include/linux/of.h
+++ b/include/linux/of.h
@@ -275,6 +275,7 @@ extern int of_n_size_cells(struct device_node *np);
 extern const struct of_device_id *of_match_node(
 	const struct of_device_id *matches, const struct device_node *node);
 extern int of_modalias_node(struct device_node *node, char *modalias, int len);
+extern void of_print_phandle_args(const char *msg, const struct of_phandle_args *args);
 extern struct device_node *of_parse_phandle(const struct device_node *np,
 					    const char *phandle_name,
 					    int index);

commit b5b4bb3f6a11f9c37b6d53138244f2ffe5bacd12
Author: Rob Herring <rob.herring@calxeda.com>
Date:   Sat Sep 7 14:08:20 2013 -0500

    of: only include prom.h on sparc
    
    The dependency on prom.h by the core DT code is now removed and only
    sparc needs to include prom.h for the core code.
    
    Signed-off-by: Rob Herring <rob.herring@calxeda.com>
    Acked-by: Grant Likely <grant.likely@linaro.org>

diff --git a/include/linux/of.h b/include/linux/of.h
index 4d294a0b8a57..54017b83650b 100644
--- a/include/linux/of.h
+++ b/include/linux/of.h
@@ -136,7 +136,9 @@ static inline unsigned long of_read_ulong(const __be32 *cell, int size)
 	return of_read_number(cell, size);
 }
 
+#if defined(CONFIG_SPARC)
 #include <asm/prom.h>
+#endif
 
 /* Default #address and #size cells.  Allow arch asm/prom.h to override */
 #if !defined(OF_ROOT_NODE_ADDR_CELLS_DEFAULT)

commit 0c3f061c195ceb891067b6de9e4ecc347c4dea31
Author: Rob Herring <rob.herring@calxeda.com>
Date:   Tue Sep 17 10:42:50 2013 -0500

    of: implement of_node_to_nid as a weak function
    
    Implement of_node_to_nid as weak function to remove the dependency on
    asm/prom.h. This is in preparation to make prom.h optional.
    
    Signed-off-by: Rob Herring <rob.herring@calxeda.com>
    Acked-by: Grant Likely <grant.likely@linaro.org>

diff --git a/include/linux/of.h b/include/linux/of.h
index f95aee391e30..4d294a0b8a57 100644
--- a/include/linux/of.h
+++ b/include/linux/of.h
@@ -534,13 +534,10 @@ static inline const char *of_prop_next_string(struct property *prop,
 #define of_match_node(_matches, _node)	NULL
 #endif /* CONFIG_OF */
 
-#ifndef of_node_to_nid
-static inline int of_node_to_nid(struct device_node *np)
-{
-	return numa_node_id();
-}
-
-#define of_node_to_nid of_node_to_nid
+#if defined(CONFIG_OF) && defined(CONFIG_NUMA)
+extern int of_node_to_nid(struct device_node *np);
+#else
+static inline int of_node_to_nid(struct device_node *device) { return 0; }
 #endif
 
 /**

commit 31f7c3a688f75bceaf2fd009efc489659ad6aa61
Merge: ec5b103ecfde 2bc552df76d8
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Tue Sep 10 13:53:52 2013 -0700

    Merge tag 'devicetree-for-linus' of git://git.secretlab.ca/git/linux
    
    Pull device tree core updates from Grant Likely:
     "Generally minor changes.  A bunch of bug fixes, particularly for
      initialization and some refactoring.  Most notable change if feeding
      the entire flattened tree into the random pool at boot.  May not be
      significant, but shouldn't hurt either"
    
    Tim Bird questions whether the boot time cost of the random feeding may
    be noticeable.  And "add_device_randomness()" is definitely not some
    speed deamon of a function.
    
    * tag 'devicetree-for-linus' of git://git.secretlab.ca/git/linux:
      of/platform: add error reporting to of_amba_device_create()
      irq/of: Fix comment typo for irq_of_parse_and_map
      of: Feed entire flattened device tree into the random pool
      of/fdt: Clean up casting in unflattening path
      of/fdt: Remove duplicate memory clearing on FDT unflattening
      gpio: implement gpio-ranges binding document fix
      of: call __of_parse_phandle_with_args from of_parse_phandle
      of: introduce of_parse_phandle_with_fixed_args
      of: move of_parse_phandle()
      of: move documentation of of_parse_phandle_with_args
      of: Fix missing memory initialization on FDT unflattening
      of: consolidate definition of early_init_dt_alloc_memory_arch()
      of: Make of_get_phy_mode() return int i.s.o. const int
      include: dt-binding: input: create a DT header defining key codes.
      of/platform: Staticize of_platform_device_create_pdata()
      of: Specify initrd location using 64-bit
      dt: Typo fix
      OF: make of_property_for_each_{u32|string}() use parameters if OF is not enabled

commit 40031da445fb4d269af9c7c445b2adf674f171e7
Merge: dcaaaeac871f f41b83126cba
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Tue Sep 3 15:59:39 2013 -0700

    Merge tag 'pm+acpi-3.12-rc1' of git://git.kernel.org/pub/scm/linux/kernel/git/rafael/linux-pm
    
    Pull ACPI and power management updates from Rafael Wysocki:
    
     1) ACPI-based PCI hotplug (ACPIPHP) subsystem rework and introduction
        of Intel Thunderbolt support on systems that use ACPI for signalling
        Thunderbolt hotplug events.  This also should make ACPIPHP work in
        some cases in which it was known to have problems.  From
        Rafael J Wysocki, Mika Westerberg and Kirill A Shutemov.
    
     2) ACPI core code cleanups and dock station support cleanups from
        Jiang Liu and Rafael J Wysocki.
    
     3) Fixes for locking problems related to ACPI device hotplug from
        Rafael J Wysocki.
    
     4) ACPICA update to version 20130725 includig fixes, cleanups, support
        for more than 256 GPEs per GPE block and a change to make the ACPI
        PM Timer optional (we've seen systems without the PM Timer in the
        field already).  One of the fixes, related to the DeRefOf operator,
        is necessary to prevent some Windows 8 oriented AML from causing
        problems to happen.  From Bob Moore, Lv Zheng, and Jung-uk Kim.
    
     5) Removal of the old and long deprecated /proc/acpi/event interface
        and related driver changes from Thomas Renninger.
    
     6) ACPI and Xen changes to make the reduced hardware sleep work with
        the latter from Ben Guthro.
    
     7) ACPI video driver cleanups and a blacklist of systems that should
        not tell the BIOS that they are compatible with Windows 8 (or ACPI
        backlight and possibly other things will not work on them).  From
        Felipe Contreras.
    
     8) Assorted ACPI fixes and cleanups from Aaron Lu, Hanjun Guo,
        Kuppuswamy Sathyanarayanan, Lan Tianyu, Sachin Kamat, Tang Chen,
        Toshi Kani, and Wei Yongjun.
    
     9) cpufreq ondemand governor target frequency selection change to
        reduce oscillations between min and max frequencies (essentially,
        it causes the governor to choose target frequencies proportional
        to load) from Stratos Karafotis.
    
    10) cpufreq fixes allowing sysfs attributes file permissions to be
        preserved over suspend/resume cycles Srivatsa S Bhat.
    
    11) Removal of Device Tree parsing for CPU device nodes from multiple
        cpufreq drivers that required some changes related to
        of_get_cpu_node() to be made in a few architectures and in the
        driver core.  From Sudeep KarkadaNagesha.
    
    12) cpufreq core fixes and cleanups related to mutual exclusion and
        driver module references from Viresh Kumar, Lukasz Majewski and
        Rafael J Wysocki.
    
    13) Assorted cpufreq fixes and cleanups from Amit Daniel Kachhap,
        Bartlomiej Zolnierkiewicz, Hanjun Guo, Jingoo Han, Joseph Lo,
        Julia Lawall, Li Zhong, Mark Brown, Sascha Hauer, Stephen Boyd,
        Stratos Karafotis, and Viresh Kumar.
    
    14) Fixes to prevent race conditions in coupled cpuidle from happening
        from Colin Cross.
    
    15) cpuidle core fixes and cleanups from Daniel Lezcano and
        Tuukka Tikkanen.
    
    16) Assorted cpuidle fixes and cleanups from Daniel Lezcano,
        Geert Uytterhoeven, Jingoo Han, Julia Lawall, Linus Walleij,
        and Sahara.
    
    17) System sleep tracing changes from Todd E Brandt and Shuah Khan.
    
    18) PNP subsystem conversion to using struct dev_pm_ops for power
        management from Shuah Khan.
    
    * tag 'pm+acpi-3.12-rc1' of git://git.kernel.org/pub/scm/linux/kernel/git/rafael/linux-pm: (217 commits)
      cpufreq: Don't use smp_processor_id() in preemptible context
      cpuidle: coupled: fix race condition between pokes and safe state
      cpuidle: coupled: abort idle if pokes are pending
      cpuidle: coupled: disable interrupts after entering safe state
      ACPI / hotplug: Remove containers synchronously
      driver core / ACPI: Avoid device hot remove locking issues
      cpufreq: governor: Fix typos in comments
      cpufreq: governors: Remove duplicate check of target freq in supported range
      cpufreq: Fix timer/workqueue corruption due to double queueing
      ACPI / EC: Add ASUSTEK L4R to quirk list in order to validate ECDT
      ACPI / thermal: Add check of "_TZD" availability and evaluating result
      cpufreq: imx6q: Fix clock enable balance
      ACPI: blacklist win8 OSI for buggy laptops
      cpufreq: tegra: fix the wrong clock name
      cpuidle: Change struct menu_device field types
      cpuidle: Add a comment warning about possible overflow
      cpuidle: Fix variable domains in get_typical_interval()
      cpuidle: Fix menu_device->intervals type
      cpuidle: CodingStyle: Break up multiple assignments on single line
      cpuidle: Check called function parameter in get_typical_interval()
      ...

commit 035fd9482274bf43858b00e0ff95179af66df8e8
Author: Stephen Warren <swarren@nvidia.com>
Date:   Wed Aug 14 15:27:10 2013 -0600

    of: introduce of_parse_phandle_with_fixed_args
    
    This is identical to of_parse_phandle_with_args(), except that the
    number of argument cells is fixed, rather than being parsed out of the
    node referenced by each phandle.
    
    Signed-off-by: Stephen Warren <swarren@nvidia.com>
    Acked-by: Mark Rutland <mark.rutland@arm.com>
    Signed-off-by: Grant Likely <grant.likely@linaro.org>

diff --git a/include/linux/of.h b/include/linux/of.h
index 90a8811e9e48..87d08306fef4 100644
--- a/include/linux/of.h
+++ b/include/linux/of.h
@@ -280,6 +280,9 @@ extern struct device_node *of_parse_phandle(const struct device_node *np,
 extern int of_parse_phandle_with_args(const struct device_node *np,
 	const char *list_name, const char *cells_name, int index,
 	struct of_phandle_args *out_args);
+extern int of_parse_phandle_with_fixed_args(const struct device_node *np,
+	const char *list_name, int cells_count, int index,
+	struct of_phandle_args *out_args);
 extern int of_count_phandle_with_args(const struct device_node *np,
 	const char *list_name, const char *cells_name);
 
@@ -477,6 +480,13 @@ static inline int of_parse_phandle_with_args(struct device_node *np,
 	return -ENOSYS;
 }
 
+static inline int of_parse_phandle_with_fixed_args(const struct device_node *np,
+	const char *list_name, int cells_count, int index,
+	struct of_phandle_args *out_args)
+{
+	return -ENOSYS;
+}
+
 static inline int of_count_phandle_with_args(struct device_node *np,
 					     const char *list_name,
 					     const char *cells_name)

commit 183912d352a242a276a7877852f107459a13aff9
Author: Sudeep KarkadaNagesha <sudeep.karkadanagesha@arm.com>
Date:   Thu Aug 15 14:01:40 2013 +0100

    of: move of_get_cpu_node implementation to DT core library
    
    This patch moves the generalized implementation of of_get_cpu_node from
    PowerPC to DT core library, thereby adding support for retrieving cpu
    node for a given logical cpu index on any architecture.
    
    The CPU subsystem can now use this function to assign of_node in the
    cpu device while registering CPUs.
    
    It is recommended to use these helper function only in pre-SMP/early
    initialisation stages to retrieve CPU device node pointers in logical
    ordering. Once the cpu devices are registered, it can be retrieved easily
    from cpu device of_node which avoids unnecessary parsing and matching.
    
    Cc: Benjamin Herrenschmidt <benh@kernel.crashing.org>
    Cc: Grant Likely <grant.likely@linaro.org>
    Acked-by: Rob Herring <rob.herring@calxeda.com>
    Signed-off-by: Sudeep KarkadaNagesha <sudeep.karkadanagesha@arm.com>

diff --git a/include/linux/of.h b/include/linux/of.h
index 1fd08ca23106..c0bb2f188048 100644
--- a/include/linux/of.h
+++ b/include/linux/of.h
@@ -266,6 +266,7 @@ extern int of_device_is_available(const struct device_node *device);
 extern const void *of_get_property(const struct device_node *node,
 				const char *name,
 				int *lenp);
+extern struct device_node *of_get_cpu_node(int cpu, unsigned int *thread);
 #define for_each_property_of_node(dn, pp) \
 	for (pp = dn->properties; pp != NULL; pp = pp->next)
 
@@ -459,6 +460,12 @@ static inline const void *of_get_property(const struct device_node *node,
 	return NULL;
 }
 
+static inline struct device_node *of_get_cpu_node(int cpu,
+					unsigned int *thread)
+{
+	return NULL;
+}
+
 static inline int of_property_read_u64(const struct device_node *np,
 				       const char *propname, u64 *out_value)
 {

commit 5c19e95216b93b0d29c6a4887e69a980edc6fc81
Author: Sascha Hauer <s.hauer@pengutronix.de>
Date:   Mon Aug 5 14:40:44 2013 +0200

    OF: Add helper for matching against linux,stdout-path
    
    devicetrees may have a linux,stdout-path property in the chosen
    node describing the console device. This adds a helper function
    to match a device against this property so a driver can call
    add_preferred_console for a matching device.
    
    Signed-off-by: Sascha Hauer <s.hauer@pengutronix.de>
    Acked-by: Rob Herring <rob.herring@calxeda.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/include/linux/of.h b/include/linux/of.h
index 1fd08ca23106..429e16801858 100644
--- a/include/linux/of.h
+++ b/include/linux/of.h
@@ -343,6 +343,8 @@ const char *of_prop_next_string(struct property *prop, const char *cur);
 		s;						\
 		s = of_prop_next_string(prop, s))
 
+int of_device_is_stdout_path(struct device_node *dn);
+
 #else /* CONFIG_OF */
 
 static inline const char* of_node_full_name(struct device_node *np)
@@ -505,6 +507,11 @@ static inline int of_machine_is_compatible(const char *compat)
 	return 0;
 }
 
+static inline int of_device_is_stdout_path(struct device_node *dn)
+{
+	return 0;
+}
+
 #define of_match_ptr(_ptr)	NULL
 #define of_match_node(_matches, _node)	NULL
 #define of_property_for_each_u32(np, propname, prop, p, u) \

commit 2adfffa223500b739b17dcf3d710cec344f7608f
Author: Sebastian Andrzej Siewior <bigeasy@linutronix.de>
Date:   Mon Jun 17 16:48:13 2013 +0200

    OF: make of_property_for_each_{u32|string}() use parameters if OF is not enabled
    
    I am getting a few
    |warning: unused variable ‘p’ [-Wunused-variable]
    |warning: unused variable ‘prop’ [-Wunused-variable]
    
    in the case where CONFIG_OF is not defined and the parameters are only
    used in the loop macro.
    
    Signed-off-by: Sebastian Andrzej Siewior <bigeasy@linutronix.de>
    Signed-off-by: Grant Likely <grant.likely@linaro.org>

diff --git a/include/linux/of.h b/include/linux/of.h
index 1fd08ca23106..90a8811e9e48 100644
--- a/include/linux/of.h
+++ b/include/linux/of.h
@@ -323,12 +323,6 @@ extern int of_detach_node(struct device_node *);
  */
 const __be32 *of_prop_next_u32(struct property *prop, const __be32 *cur,
 			       u32 *pu);
-#define of_property_for_each_u32(np, propname, prop, p, u)	\
-	for (prop = of_find_property(np, propname, NULL),	\
-		p = of_prop_next_u32(prop, NULL, &u);		\
-		p;						\
-		p = of_prop_next_u32(prop, p, &u))
-
 /*
  * struct property *prop;
  * const char *s;
@@ -337,11 +331,6 @@ const __be32 *of_prop_next_u32(struct property *prop, const __be32 *cur,
  *         printk("String value: %s\n", s);
  */
 const char *of_prop_next_string(struct property *prop, const char *cur);
-#define of_property_for_each_string(np, propname, prop, s)	\
-	for (prop = of_find_property(np, propname, NULL),	\
-		s = of_prop_next_string(prop, NULL);		\
-		s;						\
-		s = of_prop_next_string(prop, s))
 
 #else /* CONFIG_OF */
 
@@ -505,12 +494,20 @@ static inline int of_machine_is_compatible(const char *compat)
 	return 0;
 }
 
+static inline const __be32 *of_prop_next_u32(struct property *prop,
+		const __be32 *cur, u32 *pu)
+{
+	return NULL;
+}
+
+static inline const char *of_prop_next_string(struct property *prop,
+		const char *cur)
+{
+	return NULL;
+}
+
 #define of_match_ptr(_ptr)	NULL
 #define of_match_node(_matches, _node)	NULL
-#define of_property_for_each_u32(np, propname, prop, p, u) \
-	while (0)
-#define of_property_for_each_string(np, propname, prop, s) \
-	while (0)
 #endif /* CONFIG_OF */
 
 #ifndef of_node_to_nid
@@ -559,6 +556,18 @@ static inline int of_property_read_u32(const struct device_node *np,
 	return of_property_read_u32_array(np, propname, out_value, 1);
 }
 
+#define of_property_for_each_u32(np, propname, prop, p, u)	\
+	for (prop = of_find_property(np, propname, NULL),	\
+		p = of_prop_next_u32(prop, NULL, &u);		\
+		p;						\
+		p = of_prop_next_u32(prop, p, &u))
+
+#define of_property_for_each_string(np, propname, prop, s)	\
+	for (prop = of_find_property(np, propname, NULL),	\
+		s = of_prop_next_string(prop, NULL);		\
+		s;						\
+		s = of_prop_next_string(prop, s))
+
 #if defined(CONFIG_PROC_FS) && defined(CONFIG_PROC_DEVICETREE)
 extern void proc_device_tree_add_node(struct device_node *, struct proc_dir_entry *);
 extern void proc_device_tree_add_prop(struct proc_dir_entry *pde, struct property *prop);

commit 1bf25e78af317e6d5d9b5594dfeb0036e0d589d6
Merge: 38f56f33ca38 0592c2189ece
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Tue May 7 11:22:14 2013 -0700

    Merge tag 'cleanup-for-linus-2' of git://git.kernel.org/pub/scm/linux/kernel/git/arm/arm-soc
    
    Pull ARM SoC late cleanups from Arnd Bergmann:
     "These are cleanups and smaller changes that either depend on earlier
      feature branches or came in late during the development cycle.  We
      normally try to get all cleanups early, so these are the exceptions:
    
       - A follow-up on the clocksource reworks, hopefully the last time we
         need to merge clocksource subsystem changes through arm-soc.
    
         A first set of patches was part of the original 3.10 arm-soc
         cleanup series because of interdependencies with timer drivers now
         moved out of arch/arm.
    
       - Migrating the SPEAr13xx platform away from using auxdata for DMA
         channel descriptions towards using information in device tree,
         based on the earlier SPEAr multiplatform series
    
       - A few follow-ups on the Atmel SAMA5 support and other changes for
         Atmel at91 based on the larger at91 reworks.
    
       - Moving the armada irqchip implementation to drivers/irqchip
    
       - Several OMAP cleanups following up on the larger series already
         merged in 3.10."
    
    * tag 'cleanup-for-linus-2' of git://git.kernel.org/pub/scm/linux/kernel/git/arm/arm-soc: (50 commits)
      ARM: OMAP4: change the device names in usb_bind_phy
      ARM: OMAP2+: Fix mismerge for timer.c between ff931c82 and da4a686a
      ARM: SPEAr: conditionalize SMP code
      ARM: arch_timer: Silence debug preempt warnings
      ARM: OMAP: remove unused variable
      serial: amba-pl011: fix !CONFIG_DMA_ENGINE case
      ata: arasan: remove the need for platform_data
      ARM: at91/sama5d34ek.dts: remove not needed compatibility string
      ARM: at91: dts: add MCI DMA support
      ARM: at91: dts: add i2c dma support
      ARM: at91: dts: set #dma-cells to the correct value
      ARM: at91: suspend both memory controllers on at91sam9263
      irqchip: armada-370-xp: slightly cleanup irq controller driver
      irqchip: armada-370-xp: move IRQ handler to avoid forward declaration
      irqchip: move IRQ driver for Armada 370/XP
      ARM: mvebu: move L2 cache initialization in init_early()
      devtree: add binding documentation for sp804
      ARM: integrator-cp: convert use CLKSRC_OF for timer init
      ARM: versatile: use OF init for sp804 timer
      ARM: versatile: add versatile dtbs to dtbs target
      ...

commit d7ab7302f970a254997687a1cdede421a5635c68
Merge: 01227a889ed5 99f4c6b66a9a
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Sun May 5 17:36:20 2013 -0700

    Merge tag 'mfd-3.10-1' of git://git.kernel.org/pub/scm/linux/kernel/git/sameo/mfd-next
    
    Pull MFD update from Samuel Ortiz:
     "For 3.10 we have a few new MFD drivers for:
    
       - The ChromeOS embedded controller which provides keyboard, battery
         and power management services.  This controller is accessible
         through i2c or SPI.
    
       - Silicon Laboratories 476x controller, providing access to their FM
         chipset and their audio codec.
    
       - Realtek's RTS5249, a memory stick, MMC and SD/SDIO PCI based
         reader.
    
       - Nokia's Tahvo power button and watchdog device.  This device is
         very similar to Retu and is thus supported by the same code base.
    
       - STMicroelectronics STMPE1801, a keyboard and GPIO controller
         supported by the stmpe driver.
    
       - ST-Ericsson AB8540 and AB8505 power management and voltage
         converter controllers through the existing ab8500 code.
    
      Some other drivers got cleaned up or improved.  In particular:
    
       - The Linaro/STE guys got the ab8500 driver in sync with their
         internal code through a series of optimizations, fixes and
         improvements.
    
       - The AS3711 and OMAP USB drivers now have DT support.
    
       - The arizona clock and interrupt handling code got improved.
    
       - The wm5102 register patch and boot mechanism also got improved."
    
    * tag 'mfd-3.10-1' of git://git.kernel.org/pub/scm/linux/kernel/git/sameo/mfd-next: (104 commits)
      mfd: si476x: Don't use 0bNNN
      mfd: vexpress: Handle pending config transactions
      mfd: ab8500: Export ab8500_gpadc_sw_hw_convert properly
      mfd: si476x: Fix i2c warning
      mfd: si476x: Add header files and Kbuild plumbing
      mfd: si476x: Add chip properties handling code
      mfd: si476x: Add the bulk of the core driver
      mfd: si476x: Add commands abstraction layer
      mfd: rtsx: Support RTS5249
      mfd: retu: Add Tahvo support
      mfd: ucb1400: Pass ucb1400-gpio data through ac97 bus
      mfd: wm8994: Add some OF properties
      mfd: wm8994: Add device ID data to WM8994 OF device IDs
      input: Export matrix_keypad_parse_of_params()
      mfd: tps65090: Add compatible string for charger subnode
      mfd: db8500-prcmu: Support platform dependant device selection
      mfd: syscon: Fix warnings when printing resource_size_t
      of: Add stub of_get_parent for non-OF builds
      mfd: omap-usb-tll: Convert to devm_ioremap_resource()
      mfd: omap-usb-host: Convert to devm_ioremap_resource()
      ...

commit 6fa52ed33bea997374a88dbacbba5bf8c7ac4fef
Merge: 1db772216f48 bc8fd900c4d4
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Sat May 4 12:31:18 2013 -0700

    Merge tag 'drivers-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/arm/arm-soc
    
    Pull ARM SoC driver changes from Olof Johansson:
     "This is a rather large set of patches for device drivers that for one
      reason or another the subsystem maintainer preferred to get merged
      through the arm-soc tree.  There are both new drivers as well as
      existing drivers that are getting converted from platform-specific
      code into standalone drivers using the appropriate subsystem specific
      interfaces.
    
      In particular, we can now have pinctrl, clk, clksource and irqchip
      drivers in one file per driver, without the need to call into platform
      specific interface, or to get called from platform specific code, as
      long as all information about the hardware is provided through a
      device tree.
    
      Most of the drivers we touch this time are for clocksource.  Since now
      most of them are part of drivers/clocksource, I expect that we won't
      have to touch these again from arm-soc and can let the clocksource
      maintainers take care of these in the future.
    
      Another larger part of this series is specific to the exynos platform,
      which is seeing some significant effort in upstreaming and
      modernization of its device drivers this time around, which
      unfortunately is also the cause for the churn and a lot of the merge
      conflicts.
    
      There is one new subsystem that gets merged as part of this series:
      the reset controller interface, which is a very simple interface for
      taking devices on the SoC out of reset or back into reset.  Patches to
      use this interface on i.MX follow later in this merge window, and we
      are going to have other platforms (at least tegra and sirf) get
      converted in 3.11.  This will let us get rid of platform specific
      callbacks in a number of platform independent device drivers."
    
    * tag 'drivers-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/arm/arm-soc: (256 commits)
      irqchip: s3c24xx: add missing __init annotations
      ARM: dts: Disable the RTC by default on exynos5
      clk: exynos5250: Fix parent clock for sclk_mmc{0,1,2,3}
      ARM: exynos: restore mach/regs-clock.h for exynos5
      clocksource: exynos_mct: fix build error on non-DT
      pinctrl: vt8500: wmt: Fix checking return value of pinctrl_register()
      irqchip: vt8500: Convert arch-vt8500 to new irqchip infrastructure
      reset: NULL deref on allocation failure
      reset: Add reset controller API
      dt: describe base reset signal binding
      ARM: EXYNOS: Add arm-pmu DT binding for exynos421x
      ARM: EXYNOS: Add arm-pmu DT binding for exynos5250
      ARM: EXYNOS: Enable PMUs for exynos4
      irqchip: exynos-combiner: Correct combined IRQs for exynos4
      irqchip: exynos-combiner: Add set_irq_affinity function for combiner_irq
      ARM: EXYNOS: fix compilation error introduced due to common clock migration
      clk: exynos5250: Fix divider values for sclk_mmc{0,1,2,3}
      clk: exynos4: export clocks required for fimc-is
      clk: samsung: Fix compilation error
      clk: tegra: fix enum tegra114_clk to match binding
      ...

commit 34db8aaf0f95ffac407d39da22972b38da631db4
Author: David Howells <dhowells@redhat.com>
Date:   Fri Apr 12 02:29:19 2013 +0100

    proc: Move some bits from linux/proc_fs.h to linux/{of.h,signal.h,tty.h}
    
    Move some bits from linux/proc_fs.h to linux/of.h, signal.h and tty.h.
    
    Also move proc_tty_init() and proc_device_tree_init() to fs/proc/internal.h as
    they're internal to procfs.
    
    Signed-off-by: David Howells <dhowells@redhat.com>
    Acked-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Acked-by: Grant Likely <grant.likely@secretlab.ca>
    cc: devicetree-discuss@lists.ozlabs.org
    cc: linux-arch@vger.kernel.org
    cc: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    cc: Jri Slaby <jslaby@suse.cz>
    Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>

diff --git a/include/linux/of.h b/include/linux/of.h
index a0f129284948..2d25ff8fe39a 100644
--- a/include/linux/of.h
+++ b/include/linux/of.h
@@ -540,4 +540,14 @@ static inline int of_property_read_u32(const struct device_node *np,
 	return of_property_read_u32_array(np, propname, out_value, 1);
 }
 
+#if defined(CONFIG_PROC_FS) && defined(CONFIG_PROC_DEVICETREE)
+extern void proc_device_tree_add_node(struct device_node *, struct proc_dir_entry *);
+extern void proc_device_tree_add_prop(struct proc_dir_entry *pde, struct property *prop);
+extern void proc_device_tree_remove_prop(struct proc_dir_entry *pde,
+					 struct property *prop);
+extern void proc_device_tree_update_prop(struct proc_dir_entry *pde,
+					 struct property *newprop,
+					 struct property *oldprop);
+#endif
+
 #endif /* _LINUX_OF_H */

commit c3e0c873d0653e6e7628b5a8a9fcb3745444ca9e
Merge: 228e3023eb04 69a517b2471b
Author: Olof Johansson <olof@lixom.net>
Date:   Wed Apr 17 10:10:01 2013 -0700

    Merge tag 'clksrc-cleanup-for-3.10-part2' of git://sources.calxeda.com/kernel/linux into late/clksrc
    
    This is the 2nd part of ARM timer clean-ups for 3.10. This series has
    the following changes:
    
    - Add sched_clock selection logic to select the highest frequency clock
    - Use full 64-bit arch timer counter for sched_clock
    - Convert arch timer, sp804 and integrator-cp timers to CLKSRC_OF and
    adapt all users to use clocksource_of_init
    
    * tag 'clksrc-cleanup-for-3.10-part2' of git://sources.calxeda.com/kernel/linux:
      devtree: add binding documentation for sp804
      ARM: integrator-cp: convert use CLKSRC_OF for timer init
      ARM: versatile: use OF init for sp804 timer
      ARM: versatile: add versatile dtbs to dtbs target
      ARM: vexpress: remove extra timer-sp control register clearing
      ARM: dts: vexpress: disable CA9 core tile sp804 timer
      ARM: vexpress: remove sp804 OF init
      ARM: highbank: use OF init for sp804 timer
      ARM: timer-sp: convert to use CLKSRC_OF init
      OF: add empty of_device_is_available for !OF
      ARM: convert arm/arm64 arch timer to use CLKSRC_OF init
      ARM: make machine_desc->init_time default to clocksource_of_init
      ARM: arch_timer: use full 64-bit counter for sched_clock
      ARM: make sched_clock just call a function pointer
      ARM: sched_clock: allow changing to higher frequency counter
    
    Signed-off-by: Olof Johansson <olof@lixom.net>
    
    This has a nasty set of conflicts with the exynos MCT code, which was
    moved in a separate branch, and then fixed up when merged in, but still
    conflicts a bit here. It should have been sorted out by this merge though.

commit d71956960c9dafaafeb19ea010c234abe9d25f10
Author: Rob Herring <rob.herring@calxeda.com>
Date:   Wed Mar 20 16:56:18 2013 -0500

    OF: add empty of_device_is_available for !OF
    
    Add an empty version of of_device_is_available.
    
    Signed-off-by: Rob Herring <rob.herring@calxeda.com>

diff --git a/include/linux/of.h b/include/linux/of.h
index a0f129284948..95c8583688bd 100644
--- a/include/linux/of.h
+++ b/include/linux/of.h
@@ -379,6 +379,11 @@ static inline int of_device_is_compatible(const struct device_node *device,
 	return 0;
 }
 
+static inline int of_device_is_available(const struct device_node *device)
+{
+	return 0;
+}
+
 static inline struct property *of_find_property(const struct device_node *np,
 						const char *name,
 						int *lenp)

commit 066ec1dd44e84a911fe04556e4a9b89f1c83b0cb
Author: Alexander Shiyan <shc_work@mail.ru>
Date:   Tue Apr 9 19:47:40 2013 +0400

    of: Add stub of_get_parent for non-OF builds
    
    Fixes build error on x86_64 allmodconfig, introduced by commit
    5ab3a89a741f ("mfd: syscon: Add non-DT support").
    
    drivers/regulator/anatop-regulator.c: In function 'anatop_regulator_probe':
    drivers/regulator/anatop-regulator.c:134:2: error: implicit declaration of function 'of_get_parent' [-Werror=implicit-function-declaration]
    
    Signed-off-by: Alexander Shiyan <shc_work@mail.ru>
    Acked-by: Rob Herring <rob.herring@calxeda.com>
    Signed-off-by: Samuel Ortiz <sameo@linux.intel.com>

diff --git a/include/linux/of.h b/include/linux/of.h
index a0f129284948..9f5923fc0775 100644
--- a/include/linux/of.h
+++ b/include/linux/of.h
@@ -353,6 +353,11 @@ static inline struct device_node *of_find_node_by_name(struct device_node *from,
 	return NULL;
 }
 
+static inline struct device_node *of_get_parent(const struct device_node *node)
+{
+	return NULL;
+}
+
 static inline bool of_have_populated_dt(void)
 {
 	return false;

commit 3daf37260e965aa4bb060db99c2ed10b28109e04
Author: Tony Prisk <linux@prisktech.co.nz>
Date:   Sat Mar 23 17:02:15 2013 +1300

    of: Add support for reading a u32 from a multi-value property.
    
    This patch adds an of_property_read_u32_index() function to allow
    reading a single indexed u32 value from a property containing multiple
    u32 values.
    
    Signed-off-by: Tony Prisk <linux@prisktech.co.nz>
    Reviewed-by: Stephen Warren <swarren@nvidia.com>
    Acked-by: Linus Walleij <linus.walleij@linaro.org>
    Acked-by: Rob Herring <robherring2@gmail.com>

diff --git a/include/linux/of.h b/include/linux/of.h
index a0f129284948..c0747a44eaff 100644
--- a/include/linux/of.h
+++ b/include/linux/of.h
@@ -235,6 +235,9 @@ extern struct device_node *of_find_node_with_property(
 extern struct property *of_find_property(const struct device_node *np,
 					 const char *name,
 					 int *lenp);
+extern int of_property_read_u32_index(const struct device_node *np,
+				       const char *propname,
+				       u32 index, u32 *out_value);
 extern int of_property_read_u8_array(const struct device_node *np,
 			const char *propname, u8 *out_values, size_t sz);
 extern int of_property_read_u16_array(const struct device_node *np,
@@ -394,6 +397,12 @@ static inline struct device_node *of_find_compatible_node(
 	return NULL;
 }
 
+static inline int of_property_read_u32_index(const struct device_node *np,
+			const char *propname, u32 index, u32 *out_value)
+{
+	return -ENOSYS;
+}
+
 static inline int of_property_read_u8_array(const struct device_node *np,
 			const char *propname, u8 *out_values, size_t sz)
 {

commit bd69f73f2c81eed9a398708b8c4bb3409ba1b0f9
Author: Grant Likely <grant.likely@secretlab.ca>
Date:   Sun Feb 10 22:57:21 2013 +0000

    of: Create function for counting number of phandles in a property
    
    This patch creates of_count_phandle_with_args(), a new function for
    counting the number of phandle+argument tuples in a given property. This
    is better than the existing method of parsing each phandle individually
    until parsing fails which is a horribly slow way to do the count.
    
    Tested on ARM using the selftest code.
    
    v3: - Rebased on top of selftest code cleanup patch
    v2: - fix bug where of_parse_phandle_with_args() could behave like _count_.
        - made of_gpio_named_count() into a static inline regardless of CONFIG_OF_GPIO
    
    Tested-by: Andreas Larsson <andreas@gaisler.com>
    Signed-off-by: Grant Likely <grant.likely@secretlab.ca>
    Cc: Linus Walleij <linus.walleij@linaro.org>
    Cc: Rob Herring <rob.herring@calxeda.com>

diff --git a/include/linux/of.h b/include/linux/of.h
index b9e1b911f0eb..a0f129284948 100644
--- a/include/linux/of.h
+++ b/include/linux/of.h
@@ -277,6 +277,8 @@ extern struct device_node *of_parse_phandle(const struct device_node *np,
 extern int of_parse_phandle_with_args(const struct device_node *np,
 	const char *list_name, const char *cells_name, int index,
 	struct of_phandle_args *out_args);
+extern int of_count_phandle_with_args(const struct device_node *np,
+	const char *list_name, const char *cells_name);
 
 extern void of_alias_scan(void * (*dt_alloc)(u64 size, u64 align));
 extern int of_alias_get_id(struct device_node *np, const char *stem);
@@ -467,6 +469,13 @@ static inline int of_parse_phandle_with_args(struct device_node *np,
 	return -ENOSYS;
 }
 
+static inline int of_count_phandle_with_args(struct device_node *np,
+					     const char *list_name,
+					     const char *cells_name)
+{
+	return -ENOSYS;
+}
+
 static inline int of_alias_get_id(struct device_node *np, const char *stem)
 {
 	return -ENOSYS;

commit bfc4a58986ba3934bb256ef3567aeeab262aa959
Merge: 09495dda6a62 1421954bf9b9
Author: Grant Likely <grant.likely@secretlab.ca>
Date:   Wed Feb 13 09:59:13 2013 +0000

    Merge branch 'for-next' from git://sources.calxeda.com/kernel/linux.git
    
    Signed-off-by: Grant Likely <grant.likely@secretlab.ca>

commit d6d3c4e656513dcea61ce900f0ecb9ca820ee7cd
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Wed Feb 6 15:30:56 2013 -0500

    OF: convert devtree lock from rw_lock to raw spinlock
    
    With the locking cleanup in place (from "OF: Fixup resursive
    locking code paths"), we can now do the conversion from the
    rw_lock to a raw spinlock as required for preempt-rt.
    
    The previous cleanup and this conversion were originally
    separate since they predated when mainline got raw spinlock (in
    commit c2f21ce2e31286a "locking: Implement new raw_spinlock").
    
    So, at that point in time, the cleanup was considered plausible
    for mainline, but not this conversion.  In any case, we've kept
    them separate as it makes for easier review and better bisection.
    
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    [PG: taken from preempt-rt, update subject & add a commit log]
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>
    Signed-off-by: Rob Herring <rob.herring@calxeda.com>

diff --git a/include/linux/of.h b/include/linux/of.h
index 5ebcc5c8e423..bb35c423b1f9 100644
--- a/include/linux/of.h
+++ b/include/linux/of.h
@@ -92,7 +92,7 @@ static inline void of_node_put(struct device_node *node) { }
 extern struct device_node *of_allnodes;
 extern struct device_node *of_chosen;
 extern struct device_node *of_aliases;
-extern rwlock_t devtree_lock;
+extern raw_spinlock_t devtree_lock;
 
 static inline bool of_have_populated_dt(void)
 {

commit c0a05bf0182efdf7cd1fd8aa327e7a602360b67e
Author: Steffen Trumtrar <s.trumtrar@pengutronix.de>
Date:   Tue Dec 18 11:32:03 2012 +0100

    of: add 'const' to of_node_full_name parameter
    
    As the function just returns the np->full_name or the string "<no-node>", the
    passed device_node pointer is not changed in any way.
    
    The passed parameter can therefore be a const pointer.
    
    Also, fix the following error from checkpatch.pl:
    
    ERROR: "foo* bar" should be "foo *bar"
    +static inline const char* of_node_full_name(const struct device_node *np)
    
    Signed-off-by: Steffen Trumtrar <s.trumtrar@pengutronix.de>
    Signed-off-by: Grant Likely <grant.likely@secretlab.ca>

diff --git a/include/linux/of.h b/include/linux/of.h
index 5ebcc5c8e423..1e0d0c1bfb5e 100644
--- a/include/linux/of.h
+++ b/include/linux/of.h
@@ -160,7 +160,7 @@ static inline unsigned long of_read_ulong(const __be32 *cell, int size)
 
 #define OF_BAD_ADDR	((u64)-1)
 
-static inline const char* of_node_full_name(struct device_node *np)
+static inline const char *of_node_full_name(const struct device_node *np)
 {
 	return np ? np->full_name : "<no-node>";
 }

commit 16e024f30ce96ef5fa651e2914e19d175a924cab
Merge: c36e0501ee91 376bddd34433
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Tue Dec 18 09:58:09 2012 -0800

    Merge branch 'next' of git://git.kernel.org/pub/scm/linux/kernel/git/benh/powerpc
    
    Pull powerpc update from Benjamin Herrenschmidt:
     "The main highlight is probably some base POWER8 support.  There's more
      to come such as transactional memory support but that will wait for
      the next one.
    
      Overall it's pretty quiet, or rather I've been pretty poor at picking
      things up from patchwork and reviewing them this time around and Kumar
      no better on the FSL side it seems..."
    
    * 'next' of git://git.kernel.org/pub/scm/linux/kernel/git/benh/powerpc: (73 commits)
      powerpc+of: Rename and fix OF reconfig notifier error inject module
      powerpc: mpc5200: Add a3m071 board support
      powerpc/512x: don't compile any platform DIU code if the DIU is not enabled
      powerpc/mpc52xx: use module_platform_driver macro
      powerpc+of: Export of_reconfig_notifier_[register,unregister]
      powerpc/dma/raidengine: add raidengine device
      powerpc/iommu/fsl: Add PAMU bypass enable register to ccsr_guts struct
      powerpc/mpc85xx: Change spin table to cached memory
      powerpc/fsl-pci: Add PCI controller ATMU PM support
      powerpc/86xx: fsl_pcibios_fixup_bus requires CONFIG_PCI
      drivers/virt: the Freescale hypervisor driver doesn't need to check MSR[GS]
      powerpc/85xx: p1022ds: Use NULL instead of 0 for pointers
      powerpc: Disable relocation on exceptions when kexecing
      powerpc: Enable relocation on during exceptions at boot
      powerpc: Move get_longbusy_msecs into hvcall.h and remove duplicate function
      powerpc: Add wrappers to enable/disable relocation on exceptions
      powerpc: Add set_mode hcall
      powerpc: Setup relocation on exceptions for bare metal systems
      powerpc: Move initial mfspr LPCR out of __init_LPCR
      powerpc: Add relocation on exception vector handlers
      ...

commit 93c667ca2598bd84f1bd3f2fa176af69707699fe
Author: Guennadi Liakhovetski <g.liakhovetski@gmx.de>
Date:   Mon Dec 10 20:41:30 2012 +0100

    of: *node argument to of_parse_phandle_with_args should be const
    
    The "struct device_node *" argument of of_parse_phandle_with_args() can
    be const. Making this change makes it explicit that the function will
    not modify a node.
    
    Signed-off-by: Guennadi Liakhovetski <g.liakhovetski@gmx.de>
    [grant.likely: Resolved conflict with previous patch modifying of_parse_phandle()]
    Signed-off-by: Grant Likely <grant.likely@secretlab.ca>

diff --git a/include/linux/of.h b/include/linux/of.h
index 60053bd7e79a..6cfea9aa401f 100644
--- a/include/linux/of.h
+++ b/include/linux/of.h
@@ -273,7 +273,7 @@ extern int of_modalias_node(struct device_node *node, char *modalias, int len);
 extern struct device_node *of_parse_phandle(const struct device_node *np,
 					    const char *phandle_name,
 					    int index);
-extern int of_parse_phandle_with_args(struct device_node *np,
+extern int of_parse_phandle_with_args(const struct device_node *np,
 	const char *list_name, const char *cells_name, int index,
 	struct of_phandle_args *out_args);
 

commit 465aac6d496aa3e99caaa6868865fb3830f73d80
Author: Randy Dunlap <rdunlap@infradead.org>
Date:   Fri Nov 30 10:01:51 2012 +0000

    Fix build when CONFIG_W1_MASTER_GPIO=m b exporting "allnodes"
    
    ERROR: "allnodes" [drivers/w1/masters/w1-gpio.ko] undefined!
    
    Signed-off-by: Randy Dunlap <rdunlap@infradead.org>
    [grant.likely: allnodes is too generic; rename to of_allnodes]
    Signed-off-by: Grant Likely <grant.likely@secretlab.ca>
    Cc: Ville Syrjala <syrjala@sci.fi>

diff --git a/include/linux/of.h b/include/linux/of.h
index 7337dc109c89..60053bd7e79a 100644
--- a/include/linux/of.h
+++ b/include/linux/of.h
@@ -88,14 +88,14 @@ static inline void of_node_put(struct device_node *node) { }
 #ifdef CONFIG_OF
 
 /* Pointer for first entry in chain of all nodes. */
-extern struct device_node *allnodes;
+extern struct device_node *of_allnodes;
 extern struct device_node *of_chosen;
 extern struct device_node *of_aliases;
 extern rwlock_t devtree_lock;
 
 static inline bool of_have_populated_dt(void)
 {
-	return allnodes != NULL;
+	return of_allnodes != NULL;
 }
 
 static inline bool of_node_is_root(const struct device_node *node)

commit b8fbdc42c5c5df8ab1f358fe90e3a8a1bdc9ae48
Author: Steffen Trumtrar <s.trumtrar@pengutronix.de>
Date:   Thu Nov 22 12:16:43 2012 +0100

    of: add 'const' for of_parse_phandle parameter *np
    
    The existing function does not change the passed device_node pointer. It is
    only handed to of_get_property which itself takes a const struct device_node.
    
    of_parse_phandle() can therefore take a const pointer as well.
    
    Signed-off-by: Steffen Trumtrar <s.trumtrar@pengutronix.de>
    [grant.likely: drop extraneous whitespace change]
    Signed-off-by: Grant Likely <grant.likely@secretlab.ca>

diff --git a/include/linux/of.h b/include/linux/of.h
index 13e0aacb4d9f..7337dc109c89 100644
--- a/include/linux/of.h
+++ b/include/linux/of.h
@@ -270,7 +270,7 @@ extern int of_n_size_cells(struct device_node *np);
 extern const struct of_device_id *of_match_node(
 	const struct of_device_id *matches, const struct device_node *node);
 extern int of_modalias_node(struct device_node *node, char *modalias, int len);
-extern struct device_node *of_parse_phandle(struct device_node *np,
+extern struct device_node *of_parse_phandle(const struct device_node *np,
 					    const char *phandle_name,
 					    int index);
 extern int of_parse_phandle_with_args(struct device_node *np,
@@ -438,7 +438,7 @@ static inline int of_property_match_string(struct device_node *np,
 	return -ENOSYS;
 }
 
-static inline struct device_node *of_parse_phandle(struct device_node *np,
+static inline struct device_node *of_parse_phandle(const struct device_node *np,
 						   const char *phandle_name,
 						   int index)
 {

commit 2a859ab07b6ab66f4134c4fffc341398bd3d328c
Merge: cedddd812a79 e716e0143846
Author: Benjamin Herrenschmidt <benh@kernel.crashing.org>
Date:   Mon Nov 26 09:23:57 2012 +1100

    Merge branch 'merge' into next
    
    Merge my own merge branch to get various fixes from there
    and upstream, especially the hvc console tty refcouting fixes
    which which testing is quite a bit harder...

commit 50c8af4cf98fd97d6779f244215154e4c89699c7
Author: Stephen Warren <swarren@nvidia.com>
Date:   Tue Nov 20 16:12:20 2012 -0700

    of: introduce for_each_matching_node_and_match()
    
    The following pattern of code is tempting:
    
        for_each_matching_node(np, table) {
            match = of_match_node(table, np);
    
    However, this results in iterating over table twice; the second time
    inside of_match_node(). The implementation of for_each_matching_node()
    already found the match, so this is redundant. Invent new function
    of_find_matching_node_and_match() and macro
    for_each_matching_node_and_match() to remove the double iteration,
    thus transforming the above code to:
    
        for_each_matching_node_and_match(np, table, &match)
    
    Signed-off-by: Stephen Warren <swarren@nvidia.com>
    Signed-off-by: Rob Herring <rob.herring@calxeda.com>

diff --git a/include/linux/of.h b/include/linux/of.h
index ab1af0e14659..13e0aacb4d9f 100644
--- a/include/linux/of.h
+++ b/include/linux/of.h
@@ -179,11 +179,22 @@ extern struct device_node *of_find_compatible_node(struct device_node *from,
 #define for_each_compatible_node(dn, type, compatible) \
 	for (dn = of_find_compatible_node(NULL, type, compatible); dn; \
 	     dn = of_find_compatible_node(dn, type, compatible))
-extern struct device_node *of_find_matching_node(struct device_node *from,
-	const struct of_device_id *matches);
+extern struct device_node *of_find_matching_node_and_match(
+	struct device_node *from,
+	const struct of_device_id *matches,
+	const struct of_device_id **match);
+static inline struct device_node *of_find_matching_node(
+	struct device_node *from,
+	const struct of_device_id *matches)
+{
+	return of_find_matching_node_and_match(from, matches, NULL);
+}
 #define for_each_matching_node(dn, matches) \
 	for (dn = of_find_matching_node(NULL, matches); dn; \
 	     dn = of_find_matching_node(dn, matches))
+#define for_each_matching_node_and_match(dn, matches, match) \
+	for (dn = of_find_matching_node_and_match(NULL, matches, match); \
+	     dn; dn = of_find_matching_node_and_match(dn, matches, match))
 extern struct device_node *of_find_node_by_path(const char *path);
 extern struct device_node *of_find_node_by_phandle(phandle handle);
 extern struct device_node *of_get_parent(const struct device_node *node);

commit be193249b4178158c0f697cb452b2bbf0cb16361
Author: Viresh Kumar <viresh.kumar@linaro.org>
Date:   Tue Nov 20 10:15:19 2012 +0530

    dt: add helper function to read u8 & u16 variables & arrays
    
    This adds following helper routines:
    - of_property_read_u8_array()
    - of_property_read_u16_array()
    - of_property_read_u8()
    - of_property_read_u16()
    
    This expects arrays from DT to be passed as:
    - u8 array:
            property = /bits/ 8 <0x50 0x60 0x70>;
    - u16 array:
            property = /bits/ 16 <0x5000 0x6000 0x7000>;
    
    Signed-off-by: Viresh Kumar <viresh.kumar@linaro.org>
    Reviewed-by: Stephen Warren <swarren@nvidia.com>
    Signed-off-by: Rob Herring <rob.herring@calxeda.com>

diff --git a/include/linux/of.h b/include/linux/of.h
index 857dde984a6e..ab1af0e14659 100644
--- a/include/linux/of.h
+++ b/include/linux/of.h
@@ -223,6 +223,10 @@ extern struct device_node *of_find_node_with_property(
 extern struct property *of_find_property(const struct device_node *np,
 					 const char *name,
 					 int *lenp);
+extern int of_property_read_u8_array(const struct device_node *np,
+			const char *propname, u8 *out_values, size_t sz);
+extern int of_property_read_u16_array(const struct device_node *np,
+			const char *propname, u16 *out_values, size_t sz);
 extern int of_property_read_u32_array(const struct device_node *np,
 				      const char *propname,
 				      u32 *out_values,
@@ -364,6 +368,18 @@ static inline struct device_node *of_find_compatible_node(
 	return NULL;
 }
 
+static inline int of_property_read_u8_array(const struct device_node *np,
+			const char *propname, u8 *out_values, size_t sz)
+{
+	return -ENOSYS;
+}
+
+static inline int of_property_read_u16_array(const struct device_node *np,
+			const char *propname, u16 *out_values, size_t sz)
+{
+	return -ENOSYS;
+}
+
 static inline int of_property_read_u32_array(const struct device_node *np,
 					     const char *propname,
 					     u32 *out_values, size_t sz)
@@ -470,6 +486,20 @@ static inline bool of_property_read_bool(const struct device_node *np,
 	return prop ? true : false;
 }
 
+static inline int of_property_read_u8(const struct device_node *np,
+				       const char *propname,
+				       u8 *out_value)
+{
+	return of_property_read_u8_array(np, propname, out_value, 1);
+}
+
+static inline int of_property_read_u16(const struct device_node *np,
+				       const char *propname,
+				       u16 *out_value)
+{
+	return of_property_read_u16_array(np, propname, out_value, 1);
+}
+
 static inline int of_property_read_u32(const struct device_node *np,
 				       const char *propname,
 				       u32 *out_value)

commit c22618a11d1ba2966bd2cfd5e4918ed4f2dad13e
Author: Grant Likely <grant.likely@secretlab.ca>
Date:   Wed Nov 14 22:37:12 2012 +0000

    drivers/of: Constify device_node->name and ->path_component_name
    
    Neither of these should ever be changed once set. Make them const and
    fix up the users that try to modify it in-place. In one case
    kmalloc+memcpy is replaced with kstrdup() to avoid modifying the string.
    
    Build tested with defconfigs on ARM, PowerPC, Sparc, MIPS, x86 among
    others.
    
    Signed-off-by: Grant Likely <grant.likely@secretlab.ca>
    Acked-by: David S. Miller <davem@davemloft.net>
    Cc: Benjamin Herrenschmidt <benh@kernel.crashing.org>
    Cc: Julian Calaby <julian.calaby@gmail.com>

diff --git a/include/linux/of.h b/include/linux/of.h
index b4e50d56fc74..857dde984a6e 100644
--- a/include/linux/of.h
+++ b/include/linux/of.h
@@ -46,7 +46,7 @@ struct device_node {
 	const char *name;
 	const char *type;
 	phandle phandle;
-	char	*full_name;
+	const char *full_name;
 
 	struct	property *properties;
 	struct	property *deadprops;	/* removed properties */
@@ -60,7 +60,7 @@ struct device_node {
 	unsigned long _flags;
 	void	*data;
 #if defined(CONFIG_SPARC)
-	char	*path_component_name;
+	const char *path_component_name;
 	unsigned int unique_id;
 	struct of_irq_controller *irq_trans;
 #endif

commit 79d1c712958f94372482ad74578b00f44e744c12
Author: Nathan Fontenot <nfont@linux.vnet.ibm.com>
Date:   Tue Oct 2 16:58:46 2012 +0000

    powerpc+of: Rename the drivers/of prom_* functions to of_*
    
    Rename the prom_*_property routines of the generic OF code to of_*_property.
    This brings them in line with the naming used by the rest of the OF code.
    
    Signed-off-by: Nathan Fontenot <nfont@linux.vnet.ibm.com>
    Acked-by: Geoff Levand <geoff@infradead.org>
    Acked-by: Rob Herring <rob.herring@calxeda.com>
    Acked-by: Grant Likely <grant.likely@secretlab.ca>
    Signed-off-by: Benjamin Herrenschmidt <benh@kernel.crashing.org>

diff --git a/include/linux/of.h b/include/linux/of.h
index fb5d87b66e3e..a093b2fe5dfb 100644
--- a/include/linux/of.h
+++ b/include/linux/of.h
@@ -268,10 +268,9 @@ extern int of_alias_get_id(struct device_node *np, const char *stem);
 
 extern int of_machine_is_compatible(const char *compat);
 
-extern int prom_add_property(struct device_node* np, struct property* prop);
-extern int prom_remove_property(struct device_node *np, struct property *prop);
-extern int prom_update_property(struct device_node *np,
-				struct property *newprop);
+extern int of_add_property(struct device_node *np, struct property *prop);
+extern int of_remove_property(struct device_node *np, struct property *prop);
+extern int of_update_property(struct device_node *np, struct property *newprop);
 
 /* For updating the device tree at runtime */
 #define OF_RECONFIG_ATTACH_NODE		0x0001

commit 1cf3d8b3d24cd383ddfd5442c83ec5c355ffc2f7
Author: Nathan Fontenot <nfont@linux.vnet.ibm.com>
Date:   Tue Oct 2 16:57:57 2012 +0000

    powerpc+of: Add of node/property notification chain for adds and removes
    
    This patch moves the notification chain for updates to the device tree
    from the powerpc/pseries code to the base OF code. This makes this
    functionality available to all architectures.
    
    Additionally the notification chain is updated to allow notifications
    for property add/remove/update. To make this work a pointer to a new
    struct (of_prop_reconfig) is passed to the routines in the notification chain.
    The of_prop_reconfig property contains a pointer to the node containing the
    property and a pointer to the property itself. In the case of property
    updates, the property pointer refers to the new property.
    
    Signed-off-by: Nathan Fontenot <nfont@linux.vnet.ibm.com>
    Acked-by: Rob Herring <rob.herring@calxeda.com>
    Acked-by: Grant Likely <grant.likely@secretlab.ca>
    Signed-off-by: Benjamin Herrenschmidt <benh@kernel.crashing.org>

diff --git a/include/linux/of.h b/include/linux/of.h
index 72843b72a2b2..fb5d87b66e3e 100644
--- a/include/linux/of.h
+++ b/include/linux/of.h
@@ -22,6 +22,7 @@
 #include <linux/mod_devicetable.h>
 #include <linux/spinlock.h>
 #include <linux/topology.h>
+#include <linux/notifier.h>
 
 #include <asm/byteorder.h>
 #include <asm/errno.h>
@@ -272,11 +273,24 @@ extern int prom_remove_property(struct device_node *np, struct property *prop);
 extern int prom_update_property(struct device_node *np,
 				struct property *newprop);
 
-#if defined(CONFIG_OF_DYNAMIC)
 /* For updating the device tree at runtime */
-extern void of_attach_node(struct device_node *);
-extern void of_detach_node(struct device_node *);
-#endif
+#define OF_RECONFIG_ATTACH_NODE		0x0001
+#define OF_RECONFIG_DETACH_NODE		0x0002
+#define OF_RECONFIG_ADD_PROPERTY	0x0003
+#define OF_RECONFIG_REMOVE_PROPERTY	0x0004
+#define OF_RECONFIG_UPDATE_PROPERTY	0x0005
+
+struct of_prop_reconfig {
+	struct device_node	*dn;
+	struct property		*prop;
+};
+
+extern int of_reconfig_notifier_register(struct notifier_block *);
+extern int of_reconfig_notifier_unregister(struct notifier_block *);
+extern int of_reconfig_notify(unsigned long, void *);
+
+extern int of_attach_node(struct device_node *);
+extern int of_detach_node(struct device_node *);
 
 #define of_match_ptr(_ptr)	(_ptr)
 

commit 25c040c99b1e3f6d97ca3d993878549aac5fd2c8
Author: Olof Johansson <olof@lixom.net>
Date:   Sun Oct 7 10:40:54 2012 -0700

    of: add stub of_get_child_by_name for non-OF builds
    
    Fixes build error on s3c6400_defconfig, introduced by commit
    06455bbcab76e5f5225de5f38ab948d37a1c3587, "dt/s3c64xx/spi: Use
    of_get_child_by_name to get a named child".
    
    drivers/spi/spi-s3c64xx.c: In function 's3c64xx_get_slave_ctrldata':
    drivers/spi/spi-s3c64xx.c:838:2: error: implicit declaration of function
        'of_get_child_by_name' [-Werror=implicit-function-declaration]
    
    Signed-off-by: Olof Johansson <olof@lixom.net>
    Signed-off-by: Rob Herring <rob.herring@calxeda.com>

diff --git a/include/linux/of.h b/include/linux/of.h
index 72843b72a2b2..b4e50d56fc74 100644
--- a/include/linux/of.h
+++ b/include/linux/of.h
@@ -331,6 +331,13 @@ static inline bool of_have_populated_dt(void)
 #define for_each_child_of_node(parent, child) \
 	while (0)
 
+static inline struct device_node *of_get_child_by_name(
+					const struct device_node *node,
+					const char *name)
+{
+	return NULL;
+}
+
 static inline int of_get_child_count(const struct device_node *np)
 {
 	return 0;

commit 578f1ef91aa92beb571bfb9af8f4d18f405f3b9e
Merge: ecefbd94b834 74d8378159de
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Fri Oct 5 12:01:30 2012 +0900

    Merge tag 'mfd-3.7-1' of git://git.kernel.org/pub/scm/linux/kernel/git/sameo/mfd-2.6
    
    Pull MFD changes from Samuel Ortiz:
     "MFD bits for the 3.7 merge window.
    
      As usual we have a few new drivers:
    
       - TI LP8788
       - TI OMAP USB TLL
       - Maxim MAX8907
       - SMSC ECE1099
       - Dialog Semiconductor DA9055
       - A simpler syscon driver that allow us to get rid of the anatop one.
    
      Drivers are also gradually getting Device Tree and IRQ domain support.
    
      The following drivers got DT support:
       - palmas, 88pm860x, tc3589x and twl4030-audio
    
      And those ones now use the IRQ domain APIs:
       - 88pm860x, tc3589x, db8500_prcmu
    
      Also some other interesting changes:
       - Intel's ICH LPC now supports Lynx Point
       - TI's twl4030-audio added a GPO child
       - tps6527 enabled its backlight subdevice
       - The twl6030 pwm driver moved to the new PWM subsystem
    
      And finally a bunch of cleanup and casual fixes for mc13xxx, 88pm860x,
      palmas, ab8500, wm8994, wm5110, max8907 and the tps65xxx family."
    
    Fix up various annoying conflicts: the DT and IRQ domain support came in
    twice and was already in 3.6. And then it was apparently rebased.
    
    Guys, DON'T REBASE!
    
    * tag 'mfd-3.7-1' of git://git.kernel.org/pub/scm/linux/kernel/git/sameo/mfd-2.6: (89 commits)
      ARM: dts: Enable 88pm860x pmic
      mfd: 88pm860x: Move gpadc init into touch
      mfd: 88pm860x: Device tree support
      mfd: 88pm860x: Use irqdomain
      mfd: smsc: Add support for smsc gpio io/keypad driver
      backlight: tps65217_bl: Add missing platform_set_drvdata in tps65217_bl_probe
      mfd: DA9055 core driver
      mfd: tps65910: Add alarm interrupt of TPS65910 RTC to mfd device list
      mfd: wm5110: Add register patches for revision B
      mfd: wm5110: Disable control interface error report for WM5110 rev B
      mfd: max8907: Remove regulator-compatible from DT docs
      backlight: Add TPS65217 WLED driver
      mfd: Add backlight as subdevice to the tps65217
      mfd: Provide the PRCMU with its own IRQ domain
      mfd: Fix max8907 sparse warning
      mfd: Add lp8788 mfd driver
      mfd: dbx500: Provide a more accurate smp_twd clock
      mfd: rc5t583: Fix warning messages
      regulator: palmas: Add DT support
      mfd: palmas: Change regulator defns to better suite DT
      ...

commit a54dfb1a845c38a97686268d8c4086a63d9493aa
Merge: eb0ad9c06d51 36165f550557
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Wed Oct 3 09:44:08 2012 -0700

    Merge tag 'dt-for-3.7' of git://sources.calxeda.com/kernel/linux
    
    Pull devicetree updates from Rob Herring:
     - Import of latest upstream device tree compiler (dtc)
     - New function of_get_child_by_name
     - Support for #size-cells of 0 and #addr-cells of >2
     - Couple of DT binding documentation updates
    
    Fix up trivial conflicts due to of_get_child_by_name() having been added
    next to the new of_get_next_available_child().
    
    * tag 'dt-for-3.7' of git://sources.calxeda.com/kernel/linux:
      MAINTAINERS: add scripts/dtc under Devicetree maintainers
      dtc: import latest upstream dtc
      dt: Document general interrupt controller bindings
      dt/s3c64xx/spi: Use of_get_child_by_name to get a named child
      dt: introduce of_get_child_by_name to get child node by name
      of: i2c: add support for wakeup-source property
      of/address: Handle #address-cells > 2 specially
      DT: export of_irq_to_resource_table()
      devicetree: serial: Add documentation for imx serial
      devicetree: pwm: mxs-pwm.txt: Fix reg field annotation
      of: Allow busses with #size-cells=0

commit 9c19761a7ecdc86abb2fba0feb81e8952eccc1f1
Author: Srinivas Kandagatla <srinivas.kandagatla@st.com>
Date:   Tue Sep 18 08:10:28 2012 +0100

    dt: introduce of_get_child_by_name to get child node by name
    
    This patch introduces of_get_child_by_name function to get a child node
    by its name in a given parent node.
    
    Without this patch each driver code has to iterate the parent and do
    a string compare, However having of_get_child_by_name libary function would
    avoid code duplication, errors and is more convenient.
    
    Signed-off-by: Srinivas Kandagatla <srinivas.kandagatla@st.com>
    Signed-off-by: Rob Herring <rob.herring@calxeda.com>

diff --git a/include/linux/of.h b/include/linux/of.h
index 5919ee33f2b7..fabb524d3d75 100644
--- a/include/linux/of.h
+++ b/include/linux/of.h
@@ -190,6 +190,8 @@ extern struct device_node *of_get_parent(const struct device_node *node);
 extern struct device_node *of_get_next_parent(struct device_node *node);
 extern struct device_node *of_get_next_child(const struct device_node *node,
 					     struct device_node *prev);
+extern struct device_node *of_get_child_by_name(const struct device_node *node,
+					const char *name);
 #define for_each_child_of_node(parent, child) \
 	for (child = of_get_next_child(parent, NULL); child != NULL; \
 	     child = of_get_next_child(parent, child))

commit 1cc44f4354c03d1ebcfa670875478ee1c9368086
Author: Peter Ujfalusi <peter.ujfalusi@ti.com>
Date:   Mon Sep 10 13:46:24 2012 +0300

    dt: Add empty of_find_node_by_name() function
    
    This commit adds an empty of_find_node_by_name() function for !CONFIG_OF
    builds.
    
    Signed-off-by: Peter Ujfalusi <peter.ujfalusi@ti.com>
    Signed-off-by: Samuel Ortiz <sameo@linux.intel.com>

diff --git a/include/linux/of.h b/include/linux/of.h
index 5919ee33f2b7..3ffb6f7fb4d8 100644
--- a/include/linux/of.h
+++ b/include/linux/of.h
@@ -308,6 +308,12 @@ static inline const char* of_node_full_name(struct device_node *np)
 	return "<no-node>";
 }
 
+static inline struct device_node *of_find_node_by_name(struct device_node *from,
+	const char *name)
+{
+	return NULL;
+}
+
 static inline bool of_have_populated_dt(void)
 {
 	return false;

commit 3296193d1421c2d6f9e49e181cecfd917f0f5764
Author: Timur Tabi <timur@freescale.com>
Date:   Tue Aug 14 13:20:23 2012 +0000

    dt: introduce for_each_available_child_of_node, of_get_next_available_child
    
    Macro for_each_child_of_node() makes it easy to iterate over all of the
    children for a given device tree node, including those nodes that are
    marked as unavailable (i.e. status = "disabled").
    
    Introduce for_each_available_child_of_node(), which is like
    for_each_child_of_node(), but it automatically skips unavailable nodes.
    This also requires the introduction of helper function
    of_get_next_available_child(), which returns the next available child
    node.
    
    Signed-off-by: Timur Tabi <timur@freescale.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

diff --git a/include/linux/of.h b/include/linux/of.h
index 5919ee33f2b7..1b1163225f3b 100644
--- a/include/linux/of.h
+++ b/include/linux/of.h
@@ -190,10 +190,17 @@ extern struct device_node *of_get_parent(const struct device_node *node);
 extern struct device_node *of_get_next_parent(struct device_node *node);
 extern struct device_node *of_get_next_child(const struct device_node *node,
 					     struct device_node *prev);
+extern struct device_node *of_get_next_available_child(
+	const struct device_node *node, struct device_node *prev);
+
 #define for_each_child_of_node(parent, child) \
 	for (child = of_get_next_child(parent, NULL); child != NULL; \
 	     child = of_get_next_child(parent, child))
 
+#define for_each_available_child_of_node(parent, child) \
+	for (child = of_get_next_available_child(parent, NULL); child != NULL; \
+	     child = of_get_next_available_child(parent, child))
+
 static inline int of_get_child_count(const struct device_node *np)
 {
 	struct device_node *child;

commit 2d534926205db9ffce4bbbde67cb9b2cee4b835c
Merge: ac694dbdbc40 f5a1ad057e6d
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Tue Jul 31 20:44:03 2012 -0700

    Merge tag 'irqdomain-for-linus' of git://git.secretlab.ca/git/linux-2.6
    
    Pull irqdomain changes from Grant Likely:
     "Round of refactoring and enhancements to irq_domain infrastructure.
      This series starts the process of simplifying irqdomain.  The ultimate
      goal is to merge LEGACY, LINEAR and TREE mappings into a single
      system, but had to back off from that after some last minute bugs.
      Instead it mainly reorganizes the code and ensures that the reverse
      map gets populated when the irq is mapped instead of the first time it
      is looked up.
    
      Merging of the irq_domain types is deferred to v3.7
    
      In other news, this series adds helpers for creating static mappings
      on a linear or tree mapping."
    
    * tag 'irqdomain-for-linus' of git://git.secretlab.ca/git/linux-2.6:
      irqdomain: Improve diagnostics when a domain mapping fails
      irqdomain: eliminate slow-path revmap lookups
      irqdomain: Fix irq_create_direct_mapping() to test irq_domain type.
      irqdomain: Eliminate dedicated radix lookup functions
      irqdomain: Support for static IRQ mapping and association.
      irqdomain: Always update revmap when setting up a virq
      irqdomain: Split disassociating code into separate function
      irq_domain: correct a minor wrong comment for linear revmap
      irq_domain: Standardise legacy/linear domain selection
      irqdomain: Make ops->map hook optional
      irqdomain: Remove unnecessary test for IRQ_DOMAIN_MAP_LEGACY
      irqdomain: Simple NUMA awareness.
      devicetree: add helper inline for retrieving a node's full name

commit 9ec97169e7d6afe2f8206d694d1411fb3bb49853
Merge: a410963ba4c0 19891b20e7c2
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Mon Jul 30 09:22:37 2012 -0700

    Merge branch 'for-3.6' of git://gitorious.org/linux-pwm/linux-pwm
    
    Pull PWM subsystem from Thierry Reding:
     "The new PWM subsystem aims at collecting all implementations of the
      legacy PWM API and to eventually replace it completely.
    
      The subsystem has been in development for over half a year now and
      many drivers have already been converted.  It has been in linux-next
      for a couple of weeks and there have been no major issues so I think
      it is ready for inclusion in your tree."
    
    Arnd Bergmann <arnd@arndb.de>:
     "Very much Ack on the new subsystem.  It uses the interface
      declarations as the previously separate pwm drivers, so nothing
      changes for now in the drivers using it, although it enables us to
      change those more easily in the future if we want to.
    
      This work is also one of the missing pieces that are required to
      eventually build ARM kernels for multiple platforms, which is
      currently prohibited (amongs other things) by the fact that you cannot
      have more than one driver exporting the pwm functions."
    
    Tested-and-acked-by: Alexandre Courbot <acourbot@nvidia.com>
    Acked-by: Mark Brown <broonie@opensource.wolfsonmicro.com>
    Acked-by: Philip, Avinash <avinashphilip@ti.com> # TI's AM33xx platforms
    Acked-By: Alexandre Pereira da Silva <aletes.xgr@gmail.com> # LPC32XX
    Acked-by: Arnd Bergmann <arnd@arndb.de>
    Acked-by: Sachin Kamat <sachin.kamat@linaro.org>
    
    Fix up trivial conflicts with other cleanups and DT updates.
    
    * 'for-3.6' of git://gitorious.org/linux-pwm/linux-pwm: (36 commits)
      pwm: pwm-tiehrpwm: PWM driver support for EHRPWM
      pwm: pwm-tiecap: PWM driver support for ECAP APWM
      pwm: fix used-uninitialized warning in pwm_get()
      pwm: add lpc32xx PWM support
      pwm_backlight: pass correct brightness to callback
      pwm: Use pr_* functions in pwm-samsung.c file
      pwm: Convert pwm-samsung to use devm_* APIs
      pwm: Convert pwm-tegra to use devm_clk_get()
      pwm: pwm-mxs: Return proper error if pwmchip_remove() fails
      pwm: pwm-bfin: Return proper error if pwmchip_remove() fails
      pwm: pxa: Propagate pwmchip_remove() error
      pwm: Convert pwm-pxa to use devm_* APIs
      pwm: Convert pwm-vt8500 to use devm_* APIs
      pwm: Convert pwm-imx to use devm_* APIs
      pwm: Conflict with legacy PWM API
      pwm: pwm-mxs: add pinctrl support
      pwm: pwm-mxs: use devm_* managed functions
      pwm: pwm-mxs: use global reset function stmp_reset_block
      pwm: pwm-mxs: encode soc name in compatible string
      pwm: Take over maintainership of the PWM subsystem
      ...

commit 6aeea3ecc33b1f36dbc3b80461d15a7052ae424f
Merge: 9844a5524ec5 bdc0077af574
Author: Grant Likely <grant.likely@secretlab.ca>
Date:   Tue Jul 24 22:31:09 2012 -0600

    Merge remote-tracking branch 'origin' into irqdomain/next

commit f14121ab35912e3d2e57ac9a4ce1f9d4b7baeffb
Merge: 914311c9fb9b e95d8aafa5d9
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Tue Jul 24 14:07:22 2012 -0700

    Merge tag 'dt-for-3.6' of git://sources.calxeda.com/kernel/linux
    
    Pull devicetree updates from Rob Herring:
     "A small set of changes for devicetree:
       - Couple of Documentation fixes
       - Addition of new helper function of_node_full_name
       - Improve of_parse_phandle_with_args return values
       - Some NULL related sparse fixes"
    
    Grant's busy packing.
    
    * tag 'dt-for-3.6' of git://sources.calxeda.com/kernel/linux:
      of: mtd: nuke useless const qualifier
      devicetree: add helper inline for retrieving a node's full name
      of: return -ENOENT when no property
      usage-model.txt: fix typo machine_init->init_machine
      of: Fix null pointer related warnings in base.c file
      LED: Fix missing semicolon in OF documentation
      of: fix a few typos in the binding documentation

commit 475d0094293b51353e342d1198377967dbc48169
Author: Dong Aisheng <dong.aisheng@linaro.org>
Date:   Wed Jul 11 15:16:37 2012 +1000

    of: Improve prom_update_property() function
    
    prom_update_property() currently fails if the property doesn't
    actually exist yet which isn't what we want. Change to add-or-update
    instead of update-only, then we can remove a lot duplicated lines.
    
    Suggested-by: Grant Likely <grant.likely@secretlab.ca>
    Signed-off-by: Dong Aisheng <dong.aisheng@linaro.org>
    Acked-by: Rob Herring <rob.herring@calxeda.com>
    Signed-off-by: Benjamin Herrenschmidt <benh@kernel.crashing.org>

diff --git a/include/linux/of.h b/include/linux/of.h
index 2ec1083af7ff..b27c87191df2 100644
--- a/include/linux/of.h
+++ b/include/linux/of.h
@@ -260,8 +260,7 @@ extern int of_machine_is_compatible(const char *compat);
 extern int prom_add_property(struct device_node* np, struct property* prop);
 extern int prom_remove_property(struct device_node *np, struct property *prop);
 extern int prom_update_property(struct device_node *np,
-				struct property *newprop,
-				struct property *oldprop);
+				struct property *newprop);
 
 #if defined(CONFIG_OF_DYNAMIC)
 /* For updating the device tree at runtime */

commit 74a7f08448adea6cb47cd9b260c98ff168117e92
Author: Grant Likely <grant.likely@secretlab.ca>
Date:   Fri Jun 15 11:50:25 2012 -0600

    devicetree: add helper inline for retrieving a node's full name
    
    The pattern (np ? np->full_name : "<none>") is rather common in the
    kernel, but can also make for quite long lines.  This patch adds a new
    inline function, of_node_full_name() so that the test for a valid node
    pointer doesn't need to be open coded at all call sites.
    
    Signed-off-by: Grant Likely <grant.likely@secretlab.ca>
    Cc: Paul Mundt <lethal@linux-sh.org>
    Cc: Benjamin Herrenschmidt <benh@kernel.crashing.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Rob Herring <rob.herring@calxeda.com>

diff --git a/include/linux/of.h b/include/linux/of.h
index 2ec1083af7ff..1012377cae92 100644
--- a/include/linux/of.h
+++ b/include/linux/of.h
@@ -163,6 +163,11 @@ static inline int of_node_to_nid(struct device_node *np) { return -1; }
 #define of_node_to_nid of_node_to_nid
 #endif
 
+static inline const char* of_node_full_name(struct device_node *np)
+{
+	return np ? np->full_name : "<no-node>";
+}
+
 extern struct device_node *of_find_node_by_name(struct device_node *from,
 	const char *name);
 #define for_each_node_by_name(dn, name) \
@@ -303,6 +308,11 @@ const char *of_prop_next_string(struct property *prop, const char *cur);
 
 #else /* CONFIG_OF */
 
+static inline const char* of_node_full_name(struct device_node *np)
+{
+	return "<no-node>";
+}
+
 static inline bool of_have_populated_dt(void)
 {
 	return false;

commit 5ca4db61e859526b2dbee3bcea3626d3de49a0b2
Author: Paul Mundt <lethal@linux-sh.org>
Date:   Sun Jun 3 22:04:34 2012 -0700

    irqdomain: Simple NUMA awareness.
    
    While common irqdesc allocation is node aware, the irqdomain code is not.
    
    Presently we observe a number of regressions/inconsistencies on
    NUMA-capable platforms:
    
    - Platforms using irqdomains with legacy mappings, where the
      irq_descs are allocated node-local and the irqdomain data
      structure is not.
    
    - Drivers implementing irqdomains will lose node locality
      regardless of the underlying struct device's node id.
    
    This plugs in NUMA node id proliferation across the various allocation
    callsites by way of_node_to_nid() node lookup. While of_node_to_nid()
    does the right thing for OF-capable platforms it doesn't presently handle
    the non-DT case. This is trivially dealt with by simply wraping in to
    numa_node_id() unconditionally.
    
    Signed-off-by: Paul Mundt <lethal@linux-sh.org>
    Cc: Benjamin Herrenschmidt <benh@kernel.crashing.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: Rob Herring <rob.herring@calxeda.com>
    Signed-off-by: Grant Likely <grant.likely@secretlab.ca>

diff --git a/include/linux/of.h b/include/linux/of.h
index 1012377cae92..76930ee78db5 100644
--- a/include/linux/of.h
+++ b/include/linux/of.h
@@ -21,6 +21,7 @@
 #include <linux/kref.h>
 #include <linux/mod_devicetable.h>
 #include <linux/spinlock.h>
+#include <linux/topology.h>
 
 #include <asm/byteorder.h>
 #include <asm/errno.h>
@@ -158,11 +159,6 @@ static inline unsigned long of_read_ulong(const __be32 *cell, int size)
 
 #define OF_BAD_ADDR	((u64)-1)
 
-#ifndef of_node_to_nid
-static inline int of_node_to_nid(struct device_node *np) { return -1; }
-#define of_node_to_nid of_node_to_nid
-#endif
-
 static inline const char* of_node_full_name(struct device_node *np)
 {
 	return np ? np->full_name : "<no-node>";
@@ -412,6 +408,15 @@ static inline int of_machine_is_compatible(const char *compat)
 	while (0)
 #endif /* CONFIG_OF */
 
+#ifndef of_node_to_nid
+static inline int of_node_to_nid(struct device_node *np)
+{
+	return numa_node_id();
+}
+
+#define of_node_to_nid of_node_to_nid
+#endif
+
 /**
  * of_property_read_bool - Findfrom a property
  * @np:		device node from which the property value is to be read.

commit efd68e7254503f3207805f674a1ea1d743f5dfe2
Author: Grant Likely <grant.likely@secretlab.ca>
Date:   Sun Jun 3 22:04:33 2012 -0700

    devicetree: add helper inline for retrieving a node's full name
    
    The pattern (np ? np->full_name : "<none>") is rather common in the
    kernel, but can also make for quite long lines.  This patch adds a new
    inline function, of_node_full_name() so that the test for a valid node
    pointer doesn't need to be open coded at all call sites.
    
    Signed-off-by: Grant Likely <grant.likely@secretlab.ca>
    Cc: Paul Mundt <lethal@linux-sh.org>
    Cc: Benjamin Herrenschmidt <benh@kernel.crashing.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>

diff --git a/include/linux/of.h b/include/linux/of.h
index 2ec1083af7ff..1012377cae92 100644
--- a/include/linux/of.h
+++ b/include/linux/of.h
@@ -163,6 +163,11 @@ static inline int of_node_to_nid(struct device_node *np) { return -1; }
 #define of_node_to_nid of_node_to_nid
 #endif
 
+static inline const char* of_node_full_name(struct device_node *np)
+{
+	return np ? np->full_name : "<no-node>";
+}
+
 extern struct device_node *of_find_node_by_name(struct device_node *from,
 	const char *name);
 #define for_each_node_by_name(dn, name) \
@@ -303,6 +308,11 @@ const char *of_prop_next_string(struct property *prop, const char *cur);
 
 #else /* CONFIG_OF */
 
+static inline const char* of_node_full_name(struct device_node *np)
+{
+	return "<no-node>";
+}
+
 static inline bool of_have_populated_dt(void)
 {
 	return false;

commit e05e5070f0ec2557d2d2ff3655ba03f29e297151
Author: Thierry Reding <thierry.reding@avionic-design.de>
Date:   Fri Apr 13 16:19:21 2012 +0200

    dt: Add empty of_parse_phandle_with_args() function
    
    This commit adds an empty of_parse_phandle_with_args() function for
    !CONFIG_OF builds.
    
    Acked-by: Rob Herring <rob.herring@calxeda.com>
    Signed-off-by: Thierry Reding <thierry.reding@avionic-design.de>

diff --git a/include/linux/of.h b/include/linux/of.h
index 597e571110a2..d5dd5c06efd3 100644
--- a/include/linux/of.h
+++ b/include/linux/of.h
@@ -391,6 +391,15 @@ static inline struct device_node *of_parse_phandle(struct device_node *np,
 	return NULL;
 }
 
+static inline int of_parse_phandle_with_args(struct device_node *np,
+					     const char *list_name,
+					     const char *cells_name,
+					     int index,
+					     struct of_phandle_args *out_args)
+{
+	return -ENOSYS;
+}
+
 static inline int of_alias_get_id(struct device_node *np, const char *stem)
 {
 	return -ENOSYS;

commit bd3d5500f0c41a30149cb184362716096a17bc75
Author: Thierry Reding <thierry.reding@avionic-design.de>
Date:   Fri Apr 13 16:18:34 2012 +0200

    dt: Add empty of_property_match_string() function
    
    This commit adds an empty of_property_match_string() function for
    !CONFIG_OF builds.
    
    Acked-by: Rob Herring <rob.herring@calxeda.com>
    Signed-off-by: Thierry Reding <thierry.reding@avionic-design.de>

diff --git a/include/linux/of.h b/include/linux/of.h
index 2ec1083af7ff..597e571110a2 100644
--- a/include/linux/of.h
+++ b/include/linux/of.h
@@ -377,6 +377,13 @@ static inline int of_property_read_u64(const struct device_node *np,
 	return -ENOSYS;
 }
 
+static inline int of_property_match_string(struct device_node *np,
+					   const char *propname,
+					   const char *string)
+{
+	return -ENOSYS;
+}
+
 static inline struct device_node *of_parse_phandle(struct device_node *np,
 						   const char *phandle_name,
 						   int index)

commit 183f1d0c6450ee032d97a2d01ed5eb00e0dbaa49
Author: Dong Aisheng <dong.aisheng@linaro.org>
Date:   Fri Apr 27 11:36:20 2012 +0800

    dt: add of_get_child_count helper function
    
    Currently most code to get child count in kernel are almost same,
    add a helper to implement this function for dt to use.
    
    Cc: Grant Likely <grant.likely@secretlab.ca>
    Acked-by: Rob Herring <rob.herring@calxeda.com>
    Acked-by: Stephen Warren <swarren@wwwdotorg.org>
    Signed-off-by: Dong Aisheng <dong.aisheng@linaro.org>
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>

diff --git a/include/linux/of.h b/include/linux/of.h
index e3f942d9da89..2ec1083af7ff 100644
--- a/include/linux/of.h
+++ b/include/linux/of.h
@@ -193,6 +193,17 @@ extern struct device_node *of_get_next_child(const struct device_node *node,
 	for (child = of_get_next_child(parent, NULL); child != NULL; \
 	     child = of_get_next_child(parent, child))
 
+static inline int of_get_child_count(const struct device_node *np)
+{
+	struct device_node *child;
+	int num = 0;
+
+	for_each_child_of_node(np, child)
+		num++;
+
+	return num;
+}
+
 extern struct device_node *of_find_node_with_property(
 	struct device_node *from, const char *prop_name);
 #define for_each_node_with_property(dn, prop_name) \
@@ -300,6 +311,11 @@ static inline bool of_have_populated_dt(void)
 #define for_each_child_of_node(parent, child) \
 	while (0)
 
+static inline int of_get_child_count(const struct device_node *np)
+{
+	return 0;
+}
+
 static inline int of_device_is_compatible(const struct device_node *device,
 					  const char *name)
 {

commit c541adc637066407d4cda9db14dcb0e618966a4c
Author: Stephen Warren <swarren@nvidia.com>
Date:   Wed Apr 4 09:27:46 2012 -0600

    dt: add property iteration helpers
    
    This patch adds macros of_property_for_each_u32() and
    of_property_for_each_string(), which iterate over an array of values
    within a device-tree property. Usage is for example:
    
    struct property *prop;
    const __be32 *p;
    u32 u;
    of_property_for_each_u32(np, "propname", prop, p, u)
            printk("U32 value: %x\n", u);
    
    struct property *prop;
    const char *s;
    of_property_for_each_string(np, "propname", prop, s)
            printk("String value: %s\n", s);
    
    Based on work by Rob Herring <robherring2@gmail.com>
    
    Cc: Grant Likely <grant.likely@secretlab.ca>
    Signed-off-by: Stephen Warren <swarren@nvidia.com>
    Acked-by: Rob Herring <rob.herring@calxeda.com>
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>

diff --git a/include/linux/of.h b/include/linux/of.h
index fa7fb1d97458..e3f942d9da89 100644
--- a/include/linux/of.h
+++ b/include/linux/of.h
@@ -259,6 +259,37 @@ extern void of_detach_node(struct device_node *);
 #endif
 
 #define of_match_ptr(_ptr)	(_ptr)
+
+/*
+ * struct property *prop;
+ * const __be32 *p;
+ * u32 u;
+ *
+ * of_property_for_each_u32(np, "propname", prop, p, u)
+ *         printk("U32 value: %x\n", u);
+ */
+const __be32 *of_prop_next_u32(struct property *prop, const __be32 *cur,
+			       u32 *pu);
+#define of_property_for_each_u32(np, propname, prop, p, u)	\
+	for (prop = of_find_property(np, propname, NULL),	\
+		p = of_prop_next_u32(prop, NULL, &u);		\
+		p;						\
+		p = of_prop_next_u32(prop, p, &u))
+
+/*
+ * struct property *prop;
+ * const char *s;
+ *
+ * of_property_for_each_string(np, "propname", prop, s)
+ *         printk("String value: %s\n", s);
+ */
+const char *of_prop_next_string(struct property *prop, const char *cur);
+#define of_property_for_each_string(np, propname, prop, s)	\
+	for (prop = of_find_property(np, propname, NULL),	\
+		s = of_prop_next_string(prop, NULL);		\
+		s;						\
+		s = of_prop_next_string(prop, s))
+
 #else /* CONFIG_OF */
 
 static inline bool of_have_populated_dt(void)
@@ -349,6 +380,10 @@ static inline int of_machine_is_compatible(const char *compat)
 
 #define of_match_ptr(_ptr)	NULL
 #define of_match_node(_matches, _node)	NULL
+#define of_property_for_each_u32(np, propname, prop, p, u) \
+	while (0)
+#define of_property_for_each_string(np, propname, prop, s) \
+	while (0)
 #endif /* CONFIG_OF */
 
 /**

commit 47b816ff7d520509176154748713e7d66b3ad6ac
Merge: 2e7580b0e75d 1ce447b90f3e
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Wed Mar 28 14:41:36 2012 -0700

    Merge branch 'next' of git://git.kernel.org/pub/scm/linux/kernel/git/benh/powerpc
    
    Pull a few more things for powerpc by Benjamin Herrenschmidt:
     - Anton's did some recent improvements to EPOW event reporting on
       pSeries (power supply failures and such).  The patches are self
       contained enough and replace really nasty code so I felt it should
       still go in
     - I did the vio driver registration change Greg requested, I don't see
       the point of leaving that til the next merge window
     - The remaining EEH changes I said were still pending to get rid of the
       EEH references from the generic struct device_node
     - A few more iSeries removal bits
     - A perf bug fix on 970
    
    * 'next' of git://git.kernel.org/pub/scm/linux/kernel/git/benh/powerpc:
      powerpc/perf: Fix instruction address sampling on 970 and Power4
      powerpc+sparc/vio: Modernize driver registration
      powerpc: Random little legacy iSeries removal tidy ups
      powerpc: Remove NO_IRQ_IGNORE
      powerpc/pseries: Cut down on enthusiastic use of defines in RAS code
      powerpc/pseries: Clean up ras_error_interrupt code
      powerpc/pseries: Remove RTAS_POWERMGM_EVENTS
      powerpc/pseries: Use rtas_get_sensor in RAS code
      powerpc/pseries: Parse and handle EPOW interrupts
      powerpc: Make function that parses RTAS error logs global
      powerpc/eeh: Retrieve PHB from global list
      powerpc/eeh: Remove eeh information from pci_dn
      powerpc/eeh: Remove eeh device from OF node

commit 09893ee84591b0417a9186a7e7cf1503ccf99ac2
Merge: 4bb2d1009f67 7d1206bc2859
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Wed Mar 28 12:34:33 2012 -0700

    Merge tag 'dt2' of git://git.kernel.org/pub/scm/linux/kernel/git/arm/arm-soc
    
    Pull "ARM: More device tree support updates" from Olof Johansson:
     "This branch contains a number of updates for device tree support on
      several ARM platforms, in particular:
    
       * AT91 continues the device tree conversion adding support for a
         number of on-chip drivers and other functionality
       * ux500 adds probing of some of the core SoC blocks through device
         tree
       * Initial device tree support for ST SPEAr600 platforms
       * kirkwood continues the conversion to device-tree probing"
    
    Manually merge arch/arm/mach-ux500/Kconfig due to MACH_U8500 rename, and
    drivers/usb/gadget/at91_udc.c due to header file include cleanups.
    
    Also do an "evil merge" for the MACH_U8500 config option rename that the
    affected RMI4 touchscreen driver in staging.  It's called MACH_MOP500
    now, and it was missed during previous merges.
    
    * tag 'dt2' of git://git.kernel.org/pub/scm/linux/kernel/git/arm/arm-soc: (48 commits)
      ARM: SPEAr600: Add device-tree support to SPEAr600 boards
      ARM: ux500: Provide local timer support for Device Tree
      ARM: ux500: Enable PL022 SSP Controller in Device Tree
      ARM: ux500: Enable PL310 Level 2 Cache Controller in Device Tree
      ARM: ux500: Enable PL011 AMBA UART Controller for Device Tree
      ARM: ux500: Enable Cortex-A9 GIC (Generic Interrupt Controller) in Device Tree
      ARM: ux500: db8500: list most devices in the snowball device tree
      ARM: ux500: split dts file for snowball into generic part
      ARM: ux500: combine the board init functions for DT boot
      ARM: ux500: Initial Device Tree support for Snowball
      ARM: ux500: CONFIG: Enable Device Tree support for future endeavours
      ARM: kirkwood: use devicetree for rtc-mv
      ARM: kirkwood: rtc-mv devicetree bindings
      ARM: kirkwood: fdt: define uart[01] as disabled, enable uart0
      ARM: kirkwood: fdt: facilitate new boards during fdt migration
      ARM: kirkwood: fdt: absorb kirkwood_init()
      ARM: kirkwood: fdt: use mrvl ticker symbol
      ARM: orion: wdt: use resource vice direct access
      ARM: Kirkwood: Remove tclk from kirkwood_asoc_platform_data.
      ARM: orion: spi: remove enable_clock_fix which is not used
      ...

commit 2a0352fa4a78081c76be1e450b51a6aa27c92616
Author: Gavin Shan <shangw@linux.vnet.ibm.com>
Date:   Tue Mar 20 21:30:27 2012 +0000

    powerpc/eeh: Remove eeh device from OF node
    
    Originally, the PCI sensitive OF node is tracing the eeh device
    through struct device_node->edev. However, it was regarded as
    bad idea.
    
    The patch removes struct device_node->edev and uses PCI_DN to
    trace the corresponding eeh device according to BenH's comments.
    
    Signed-off-by: Gavin Shan <shangw@linux.vnet.ibm.com>
    Signed-off-by: Benjamin Herrenschmidt <benh@kernel.crashing.org>

diff --git a/include/linux/of.h b/include/linux/of.h
index d46a18ffbebb..f02d8b2f799d 100644
--- a/include/linux/of.h
+++ b/include/linux/of.h
@@ -58,9 +58,6 @@ struct device_node {
 	struct	kref kref;
 	unsigned long _flags;
 	void	*data;
-#if defined(CONFIG_EEH)
-	struct eeh_dev *edev;
-#endif
 #if defined(CONFIG_SPARC)
 	char	*path_component_name;
 	unsigned int unique_id;
@@ -75,13 +72,6 @@ struct of_phandle_args {
 	uint32_t args[MAX_PHANDLE_ARGS];
 };
 
-#if defined(CONFIG_EEH)
-static inline struct eeh_dev *of_node_to_eeh_dev(struct device_node *dn)
-{
-	return dn->edev;
-}
-#endif
-
 #ifdef CONFIG_OF_DYNAMIC
 extern struct device_node *of_node_get(struct device_node *node);
 extern void of_node_put(struct device_node *node);

commit 5375871d432ae9fc581014ac117b96aaee3cd0c7
Merge: b57cb7231b2c dfbc2d75c1bd
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Wed Mar 21 18:55:10 2012 -0700

    Merge branch 'next' of git://git.kernel.org/pub/scm/linux/kernel/git/benh/powerpc
    
    Pull powerpc merge from Benjamin Herrenschmidt:
     "Here's the powerpc batch for this merge window.  It is going to be a
      bit more nasty than usual as in touching things outside of
      arch/powerpc mostly due to the big iSeriesectomy :-) We finally got
      rid of the bugger (legacy iSeries support) which was a PITA to
      maintain and that nobody really used anymore.
    
      Here are some of the highlights:
    
       - Legacy iSeries is gone.  Thanks Stephen ! There's still some bits
         and pieces remaining if you do a grep -ir series arch/powerpc but
         they are harmless and will be removed in the next few weeks
         hopefully.
    
       - The 'fadump' functionality (Firmware Assisted Dump) replaces the
         previous (equivalent) "pHyp assisted dump"...  it's a rewrite of a
         mechanism to get the hypervisor to do crash dumps on pSeries, the
         new implementation hopefully being much more reliable.  Thanks
         Mahesh Salgaonkar.
    
       - The "EEH" code (pSeries PCI error handling & recovery) got a big
         spring cleaning, motivated by the need to be able to implement a
         new backend for it on top of some new different type of firwmare.
    
         The work isn't complete yet, but a good chunk of the cleanups is
         there.  Note that this adds a field to struct device_node which is
         not very nice and which Grant objects to.  I will have a patch soon
         that moves that to a powerpc private data structure (hopefully
         before rc1) and we'll improve things further later on (hopefully
         getting rid of the need for that pointer completely).  Thanks Gavin
         Shan.
    
       - I dug into our exception & interrupt handling code to improve the
         way we do lazy interrupt handling (and make it work properly with
         "edge" triggered interrupt sources), and while at it found & fixed
         a wagon of issues in those areas, including adding support for page
         fault retry & fatal signals on page faults.
    
       - Your usual random batch of small fixes & updates, including a bunch
         of new embedded boards, both Freescale and APM based ones, etc..."
    
    I fixed up some conflicts with the generalized irq-domain changes from
    Grant Likely, hopefully correctly.
    
    * 'next' of git://git.kernel.org/pub/scm/linux/kernel/git/benh/powerpc: (141 commits)
      powerpc/ps3: Do not adjust the wrapper load address
      powerpc: Remove the rest of the legacy iSeries include files
      powerpc: Remove the remaining CONFIG_PPC_ISERIES pieces
      init: Remove CONFIG_PPC_ISERIES
      powerpc: Remove FW_FEATURE ISERIES from arch code
      tty/hvc_vio: FW_FEATURE_ISERIES is no longer selectable
      powerpc/spufs: Fix double unlocks
      powerpc/5200: convert mpc5200 to use of_platform_populate()
      powerpc/mpc5200: add options to mpc5200_defconfig
      powerpc/mpc52xx: add a4m072 board support
      powerpc/mpc5200: update mpc5200_defconfig to fit for charon board
      Documentation/powerpc/mpc52xx.txt: Checkpatch cleanup
      powerpc/44x: Add additional device support for APM821xx SoC and Bluestone board
      powerpc/44x: Add support PCI-E for APM821xx SoC and Bluestone board
      MAINTAINERS: Update PowerPC 4xx tree
      powerpc/44x: The bug fixed support for APM821xx SoC and Bluestone board
      powerpc: document the FSL MPIC message register binding
      powerpc: add support for MPIC message register API
      powerpc/fsl: Added aliased MSIIR register address to MSI node in dts
      powerpc/85xx: mpc8548cds - add 36-bit dts
      ...

commit f8974cb71310a05632aada76be6a27576d61e609
Merge: c207f3a43194 0f22dd395fc4
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Wed Mar 21 10:30:03 2012 -0700

    Merge tag 'dt-for-linus' of git://git.secretlab.ca/git/linux-2.6
    
    Pull core device tree changes for Linux v3.4 from Grant Likely:
     "This branch contains a minor documentation addition, a utility
      function for parsing string properties needed by some of the new ARM
      platforms, disables dynamic DT code that isn't used anywhere but on a
      few PPC machines, and exports DT node compatible data to userspace via
      UEVENT properties.  Nothing earth shattering here."
    
    * tag 'dt-for-linus' of git://git.secretlab.ca/git/linux-2.6:
      of: Only compile OF_DYNAMIC on PowerPC pseries and iseries
      arm/dts: OMAP3: Add omap3evm and am335xevm support
      drivercore: Output common devicetree information in uevent
      of: Add of_property_match_string() to find index into a string list

commit a94c7b0a8f31a8bcf3b136d469f7eb6b6b57bb78
Merge: d4ef467aea0f 9652e8bd16e7
Author: Arnd Bergmann <arnd@arndb.de>
Date:   Fri Mar 16 20:25:17 2012 +0000

    Merge branch 'spear/dt' into next/dt2
    
    * spear/dt:
      ARM: SPEAr600: Add device-tree support to SPEAr600 boards
    
    (update to v3.3-rc7)
    
    Conflicts:
            arch/arm/mach-spear6xx/spear6xx.c
            arch/arm/mach-vexpress/Kconfig
    
    The conflicts are between the previous contents of the next/dt2
    branch and upstream changes from v3.3-rc7.
    
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>

commit fa4d34ccd0914ac87336ea2c17e9370dfecef286
Author: Jean-Christophe PLAGNIOL-VILLARD <plagnioj@jcrosoft.com>
Date:   Tue Feb 7 12:12:51 2012 +0800

    of: introduce helper to manage boolean
    
    of_property_read_bool
    
    Search for a property in a device node.
    Returns true if the property exist false otherwise.
    
    Signed-off-by: Jean-Christophe PLAGNIOL-VILLARD <plagnioj@jcrosoft.com>
    Acked-by: Rob Herring <rob.herring@calxeda.com>
    Acked-by: Arnd Bergmann <arnd@arndb.de>
    Acked-by: Grant Likely <grant.likely@secretlab.ca>

diff --git a/include/linux/of.h b/include/linux/of.h
index a75a831e2057..50059cf63135 100644
--- a/include/linux/of.h
+++ b/include/linux/of.h
@@ -342,6 +342,22 @@ static inline int of_machine_is_compatible(const char *compat)
 #define of_match_node(_matches, _node)	NULL
 #endif /* CONFIG_OF */
 
+/**
+ * of_property_read_bool - Findfrom a property
+ * @np:		device node from which the property value is to be read.
+ * @propname:	name of the property to be searched.
+ *
+ * Search for a property in a device node.
+ * Returns true if the property exist false otherwise.
+ */
+static inline bool of_property_read_bool(const struct device_node *np,
+					 const char *propname)
+{
+	struct property *prop = of_find_property(np, propname, NULL);
+
+	return prop ? true : false;
+}
+
 static inline int of_property_read_u32(const struct device_node *np,
 				       const char *propname,
 				       u32 *out_value)

commit eb740b5f3e6559a8f1c22e2505914d07f9632881
Author: Gavin Shan <shangw@linux.vnet.ibm.com>
Date:   Mon Feb 27 20:04:04 2012 +0000

    powerpc/eeh: Introduce EEH device
    
    Original EEH implementation depends on struct pci_dn heavily. However,
    EEH shouldn't depend on that actually because EEH needn't share much
    information with other PCI components. That's to say, EEH should have
    worked independently.
    
    The patch introduces struct eeh_dev so that EEH core components needn't
    be working based on struct pci_dn in future. Also, struct pci_dn, struct
    eeh_dev instances are created in dynamic fasion and the binding with EEH
    device, OF node, PCI device is implemented as well.
    
    The EEH devices are created after PHBs are detected and initialized, but
    PCI emunation hasn't started yet. Apart from that, PHB might be created
    dynamically through DLPAR component and the EEH devices should be creatd
    as well. Another case might be OF node is created dynamically by DR
    (Dynamic Reconfiguration), which has been defined by PAPR. For those OF
    nodes created by DR, EEH devices should be also created accordingly. The
    binding between EEH device and OF node is done while the EEH device is
    initially created.
    
    The binding between EEH device and PCI device should be done after PCI
    emunation is done. Besides, PCI hotplug also needs the binding so that
    the EEH devices could be traced from the newly coming PCI buses or PCI
    devices.
    
    Signed-off-by: Gavin Shan <shangw@linux.vnet.ibm.com>
    Signed-off-by: Benjamin Herrenschmidt <benh@kernel.crashing.org>

diff --git a/include/linux/of.h b/include/linux/of.h
index a75a831e2057..3e710d878085 100644
--- a/include/linux/of.h
+++ b/include/linux/of.h
@@ -58,6 +58,9 @@ struct device_node {
 	struct	kref kref;
 	unsigned long _flags;
 	void	*data;
+#if defined(CONFIG_EEH)
+	struct eeh_dev *edev;
+#endif
 #if defined(CONFIG_SPARC)
 	char	*path_component_name;
 	unsigned int unique_id;
@@ -72,6 +75,13 @@ struct of_phandle_args {
 	uint32_t args[MAX_PHANDLE_ARGS];
 };
 
+#if defined(CONFIG_EEH)
+static inline struct eeh_dev *of_node_to_eeh_dev(struct device_node *dn)
+{
+	return dn->edev;
+}
+#endif
+
 #if defined(CONFIG_SPARC) || !defined(CONFIG_OF)
 /* Dummy ref counting routines - to be implemented later */
 static inline struct device_node *of_node_get(struct device_node *node)

commit 0f22dd395fc473cee252b9af50249b8e0f32fde7
Author: Grant Likely <grant.likely@secretlab.ca>
Date:   Wed Feb 15 20:38:40 2012 -0700

    of: Only compile OF_DYNAMIC on PowerPC pseries and iseries
    
    Only two architectures use the OF node reference counting and reclaim bits.
    There is no need to compile it for the rest of the PowerPC platforms or for
    any of the other architectures.  This patch makes iseries and pseries
    select CONFIG_OF_DYNAMIC, and makes it default to off for everything else.
    
    It is still safe to turn on CONFIG_OF_DYNAMIC on all architectures, it just
    isn't necessary.
    
    v2: Also select OF_DYNAMIC for PPC_CHROMA and MPC885ADS as reported by Michael
        Meuling
    
    Signed-off-by: Grant Likely <grant.likely@secretlab.ca>
    Acked-by: David S. Miller <davem@davemloft.net>
    Acked-by: Benjamin Herrenschmidt <benh@kernel.crashing.org>
    Acked-by: Jimi Xenidis <jimix@pobox.com> (for PPC_CHROMA bug fix)
    Cc: Rob Herring <rob.herring@calxeda.com>

diff --git a/include/linux/of.h b/include/linux/of.h
index 5a4a3adb17e5..533603e26b9b 100644
--- a/include/linux/of.h
+++ b/include/linux/of.h
@@ -72,19 +72,17 @@ struct of_phandle_args {
 	uint32_t args[MAX_PHANDLE_ARGS];
 };
 
-#if defined(CONFIG_SPARC) || !defined(CONFIG_OF)
+#ifdef CONFIG_OF_DYNAMIC
+extern struct device_node *of_node_get(struct device_node *node);
+extern void of_node_put(struct device_node *node);
+#else /* CONFIG_OF_DYNAMIC */
 /* Dummy ref counting routines - to be implemented later */
 static inline struct device_node *of_node_get(struct device_node *node)
 {
 	return node;
 }
-static inline void of_node_put(struct device_node *node)
-{
-}
-#else
-extern struct device_node *of_node_get(struct device_node *node);
-extern void of_node_put(struct device_node *node);
-#endif
+static inline void of_node_put(struct device_node *node) { }
+#endif /* !CONFIG_OF_DYNAMIC */
 
 #ifdef CONFIG_OF
 

commit 2261cc627f5453004042b4f694612edae27e492e
Author: Shawn Guo <shawn.guo@linaro.org>
Date:   Wed Feb 15 10:47:42 2012 -0800

    dt: add empty of_find_compatible_node function
    
    Add empty of_find_compatible_node function for !CONFIG_OF build.
    
    Signed-off-by: Shawn Guo <shawn.guo@linaro.org>
    Signed-off-by: Grant Likely <grant.likely@secretlab.ca>

diff --git a/include/linux/of.h b/include/linux/of.h
index a75a831e2057..92cf6ad35e0e 100644
--- a/include/linux/of.h
+++ b/include/linux/of.h
@@ -281,6 +281,14 @@ static inline struct property *of_find_property(const struct device_node *np,
 	return NULL;
 }
 
+static inline struct device_node *of_find_compatible_node(
+						struct device_node *from,
+						const char *type,
+						const char *compat)
+{
+	return NULL;
+}
+
 static inline int of_property_read_u32_array(const struct device_node *np,
 					     const char *propname,
 					     u32 *out_values, size_t sz)

commit 7aff0fe33033fc75b61446ba29d38b1b1354af9f
Author: Grant Likely <grant.likely@secretlab.ca>
Date:   Mon Dec 12 09:25:58 2011 -0700

    of: Add of_property_match_string() to find index into a string list
    
    Add a helper function for finding the index of a string in a string
    list property.  This helper is useful for bindings that use a separate
    *-name property for attaching names to tuples in another property such
    as 'reg' or 'gpios'.
    
    Signed-off-by: Grant Likely <grant.likely@secretlab.ca>

diff --git a/include/linux/of.h b/include/linux/of.h
index a75a831e2057..5a4a3adb17e5 100644
--- a/include/linux/of.h
+++ b/include/linux/of.h
@@ -217,6 +217,9 @@ extern int of_property_read_string(struct device_node *np,
 extern int of_property_read_string_index(struct device_node *np,
 					 const char *propname,
 					 int index, const char **output);
+extern int of_property_match_string(struct device_node *np,
+				    const char *propname,
+				    const char *string);
 extern int of_property_count_strings(struct device_node *np,
 				     const char *propname);
 extern int of_device_is_compatible(const struct device_node *device,

commit 02550d61f49266930e674286379d3601006b2893
Merge: 2d51daaa615e c89810acbcf4
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Sat Jan 7 12:18:52 2012 -0800

    Merge tag 'devicetree-for-linus' of git://git.secretlab.ca/git/linux-2.6
    
    devicetree/next changes queued for v3.3 merge window
    
    * tag 'devicetree-for-linus-20120104' of git://git.secretlab.ca/git/linux-2.6:
      ARM: prom.h: Fix build error by removing unneeded header file
      irq: check domain hwirq range for DT translate
      dt: add empty of_get_node/of_put_node functions
      of/pdt: fix section mismatch warning
      i2c-designware: add OF binding support
      dt/i2c: Enumerate some of the known trivial i2c devices
      dt: reform for_each_property to for_each_property_of_node
      ARM/of: allow *machine_desc.dt_compat to be const
      of/base: Take NULL string into account for property with multiple strings
      OF/device-tree: Add some entries to vendor-prefixes.txt
    
    Fix up trivial add-add conflicts in include/linux/of.h

commit 3ecdd0515287afbcde352077d59e4028dcfbb685
Author: Rob Herring <rob.herring@calxeda.com>
Date:   Tue Dec 13 09:13:54 2011 -0600

    dt: add empty of_get_node/of_put_node functions
    
    Add empty of_get_node/of_put_node functions for !CONFIG_OF builds.
    
    Signed-off-by: Rob Herring <rob.herring@calxeda.com>
    Acked-by: Grant Likely <grant.likely@secretlab.ca>

diff --git a/include/linux/of.h b/include/linux/of.h
index f1a490c37e06..9abd3ec3c2ac 100644
--- a/include/linux/of.h
+++ b/include/linux/of.h
@@ -65,6 +65,20 @@ struct device_node {
 #endif
 };
 
+#if defined(CONFIG_SPARC) || !defined(CONFIG_OF)
+/* Dummy ref counting routines - to be implemented later */
+static inline struct device_node *of_node_get(struct device_node *node)
+{
+	return node;
+}
+static inline void of_node_put(struct device_node *node)
+{
+}
+#else
+extern struct device_node *of_node_get(struct device_node *node);
+extern void of_node_put(struct device_node *node);
+#endif
+
 #ifdef CONFIG_OF
 
 /* Pointer for first entry in chain of all nodes. */
@@ -95,21 +109,6 @@ static inline void of_node_set_flag(struct device_node *n, unsigned long flag)
 
 extern struct device_node *of_find_all_nodes(struct device_node *prev);
 
-#if defined(CONFIG_SPARC)
-/* Dummy ref counting routines - to be implemented later */
-static inline struct device_node *of_node_get(struct device_node *node)
-{
-	return node;
-}
-static inline void of_node_put(struct device_node *node)
-{
-}
-
-#else
-extern struct device_node *of_node_get(struct device_node *node);
-extern void of_node_put(struct device_node *node);
-#endif
-
 /*
  * OF address retrieval & translation
  */

commit 8af0da93da7c40526959ab5291964581c678d3e7
Author: Dong Aisheng <dong.aisheng@linaro.org>
Date:   Thu Dec 22 20:19:24 2011 +0800

    dt: reform for_each_property to for_each_property_of_node
    
    Make this macro easier to use(do not need to pass properties, a node is
    enough), also change to a more sensible name as for_each_child_of_node.
    
    Signed-off-by: Dong Aisheng <dong.aisheng@linaro.org>
    Cc: Grant Likely <grant.likely@secretlab.ca>
    Signed-off-by: Rob Herring <rob.herring@calxeda.com>

diff --git a/include/linux/of.h b/include/linux/of.h
index 4948552d60f5..f1a490c37e06 100644
--- a/include/linux/of.h
+++ b/include/linux/of.h
@@ -219,8 +219,8 @@ extern int of_device_is_available(const struct device_node *device);
 extern const void *of_get_property(const struct device_node *node,
 				const char *name,
 				int *lenp);
-#define for_each_property(pp, properties) \
-	for (pp = properties; pp != NULL; pp = pp->next)
+#define for_each_property_of_node(dn, pp) \
+	for (pp = dn->properties; pp != NULL; pp = pp->next)
 
 extern int of_n_addr_cells(struct device_node *np);
 extern int of_n_size_cells(struct device_node *np);

commit 15c9a0acc3f7873db4b7d35d016729b2dc229b49
Author: Grant Likely <grant.likely@secretlab.ca>
Date:   Mon Dec 12 09:25:57 2011 -0700

    of: create of_phandle_args to simplify return of phandle parsing data
    
    of_parse_phandle_with_args() needs to return quite a bit of data.  Rather
    than making each datum a separate **out_ argument, this patch creates
    struct of_phandle_args to contain all the returned data and reworks the
    user of the function.  This patch also enables of_parse_phandle_with_args()
    to return the device node pointer for the phandle node.
    
    This patch also ends up being fairly major surgery to
    of_parse_handle_with_args().  The existing structure didn't work well
    when extending to use of_phandle_args, and I discovered bugs during testing.
    I also took the opportunity to rename the function to be like the
    existing of_parse_phandle().
    
    v2: - moved declaration of of_phandle_args to fix compile on non-DT builds
        - fixed incorrect index in example usage
        - fixed incorrect return code handling for empty entries
    
    Reviewed-by: Shawn Guo <shawn.guo@freescale.com>
    Signed-off-by: Grant Likely <grant.likely@secretlab.ca>

diff --git a/include/linux/of.h b/include/linux/of.h
index 4948552d60f5..ea44fd72af5f 100644
--- a/include/linux/of.h
+++ b/include/linux/of.h
@@ -65,6 +65,13 @@ struct device_node {
 #endif
 };
 
+#define MAX_PHANDLE_ARGS 8
+struct of_phandle_args {
+	struct device_node *np;
+	int args_count;
+	uint32_t args[MAX_PHANDLE_ARGS];
+};
+
 #ifdef CONFIG_OF
 
 /* Pointer for first entry in chain of all nodes. */
@@ -230,9 +237,9 @@ extern int of_modalias_node(struct device_node *node, char *modalias, int len);
 extern struct device_node *of_parse_phandle(struct device_node *np,
 					    const char *phandle_name,
 					    int index);
-extern int of_parse_phandles_with_args(struct device_node *np,
+extern int of_parse_phandle_with_args(struct device_node *np,
 	const char *list_name, const char *cells_name, int index,
-	struct device_node **out_node, const void **out_args);
+	struct of_phandle_args *out_args);
 
 extern void of_alias_scan(void * (*dt_alloc)(u64 size, u64 align));
 extern int of_alias_get_id(struct device_node *np, const char *stem);

commit 32aaeffbd4a7457bf2f7448b33b5946ff2a960eb
Merge: 208bca086040 67b84999b1a8
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Sun Nov 6 19:44:47 2011 -0800

    Merge branch 'modsplit-Oct31_2011' of git://git.kernel.org/pub/scm/linux/kernel/git/paulg/linux
    
    * 'modsplit-Oct31_2011' of git://git.kernel.org/pub/scm/linux/kernel/git/paulg/linux: (230 commits)
      Revert "tracing: Include module.h in define_trace.h"
      irq: don't put module.h into irq.h for tracking irqgen modules.
      bluetooth: macroize two small inlines to avoid module.h
      ip_vs.h: fix implicit use of module_get/module_put from module.h
      nf_conntrack.h: fix up fallout from implicit moduleparam.h presence
      include: replace linux/module.h with "struct module" wherever possible
      include: convert various register fcns to macros to avoid include chaining
      crypto.h: remove unused crypto_tfm_alg_modname() inline
      uwb.h: fix implicit use of asm/page.h for PAGE_SIZE
      pm_runtime.h: explicitly requires notifier.h
      linux/dmaengine.h: fix implicit use of bitmap.h and asm/page.h
      miscdevice.h: fix up implicit use of lists and types
      stop_machine.h: fix implicit use of smp.h for smp_processor_id
      of: fix implicit use of errno.h in include/linux/of.h
      of_platform.h: delete needless include <linux/module.h>
      acpi: remove module.h include from platform/aclinux.h
      miscdevice.h: delete unnecessary inclusion of module.h
      device_cgroup.h: delete needless include <linux/module.h>
      net: sch_generic remove redundant use of <linux/module.h>
      net: inet_timewait_sock doesnt need <linux/module.h>
      ...
    
    Fix up trivial conflicts (other header files, and  removal of the ab3550 mfd driver) in
     - drivers/media/dvb/frontends/dibx000_common.c
     - drivers/media/video/{mt9m111.c,ov6650.c}
     - drivers/mfd/ab3550-core.c
     - include/linux/dmaengine.h

commit 50e07f888cb24b55e0d8283f631907794dd757c2
Author: Stephen Warren <swarren@nvidia.com>
Date:   Tue Oct 25 14:01:26 2011 +0200

    dt: add empty of_machine_is_compatible
    
    The patch adds an empty function for non-dt build, so that
    drivers migrating to dt can save some '#ifdef CONFIG_OF'.
    
    v3: New patch
    
    Signed-off-by: Stephen Warren <swarren@nvidia.com>
    Signed-off-by: Grant Likely <grant.likely@secretlab.ca>

diff --git a/include/linux/of.h b/include/linux/of.h
index 4386c5fee57c..0e89aa0bf07a 100644
--- a/include/linux/of.h
+++ b/include/linux/of.h
@@ -326,6 +326,11 @@ static inline int of_alias_get_id(struct device_node *np, const char *stem)
 	return -ENOSYS;
 }
 
+static inline int of_machine_is_compatible(const char *compat)
+{
+	return 0;
+}
+
 #define of_match_ptr(_ptr)	NULL
 #define of_match_node(_matches, _node)	NULL
 #endif /* CONFIG_OF */

commit 3983138c017b6aeab6ce3dbb1e9afbe80bdac496
Merge: ed5f886d1636 02aac316abf4
Author: Grant Likely <grant.likely@secretlab.ca>
Date:   Thu Nov 3 23:32:20 2011 -0400

    Merge branch 'for-grant' of git://sources.calxeda.com/kernel/linux into devicetree/merge

commit 81a3c10ce8a7fd5bf9a06bfc38bd417512911831
Merge: 6585dea1f99c df80442d1ee2
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Tue Nov 1 20:58:25 2011 -0700

    Merge branch 'next/cleanup2' of git://git.linaro.org/people/arnd/arm-soc
    
    * 'next/cleanup2' of git://git.linaro.org/people/arnd/arm-soc: (31 commits)
      ARM: OMAP: Warn if omap_ioremap is called before SoC detection
      ARM: OMAP: Move set_globals initialization to happen in init_early
      ARM: OMAP: Map SRAM later on with ioremap_exec()
      ARM: OMAP: Remove calls to SRAM allocations for framebuffer
      ARM: OMAP: Avoid cpu_is_omapxxxx usage until map_io is done
      ARM: OMAP1: Use generic map_io, init_early and init_irq
      arm/dts: OMAP3+: Add mpu, dsp and iva nodes
      arm/dts: OMAP4: Add a main ocp entry bound to l3-noc driver
      ARM: OMAP2+: l3-noc: Add support for device-tree
      ARM: OMAP2+: board-generic: Add i2c static init
      ARM: OMAP2+: board-generic: Add DT support to generic board
      arm/dts: Add support for OMAP3 Beagle board
      arm/dts: Add initial device tree support for OMAP3 SoC
      arm/dts: Add support for OMAP4 SDP board
      arm/dts: Add support for OMAP4 PandaBoard
      arm/dts: Add initial device tree support for OMAP4 SoC
      ARM: OMAP: omap_device: Add a method to build an omap_device from a DT node
      ARM: OMAP: omap_device: Add omap_device_[alloc|delete] for DT integration
      of: Add helpers to get one string in multiple strings property
      ARM: OMAP2+: devices: Remove all omap_device_pm_latency structures
      ...
    
    Fix up trivial header file conflicts in arch/arm/mach-omap2/board-generic.c

commit d0a9940289a74378c19078fac5b9858fd114dff7
Author: Paul Gortmaker <paul.gortmaker@windriver.com>
Date:   Sat Oct 29 10:17:06 2011 -0400

    of: fix implicit use of errno.h in include/linux/of.h
    
    It shows up as a build failure on MIPS, as it is used in
    three of_property function stubs.
    
    include/linux/of.h:275: error: 'ENOSYS' undeclared (first use in this function)
    include/linux/of.h:282: error: 'ENOSYS' undeclared (first use in this function)
    include/linux/of.h:295: error: 'ENOSYS' undeclared (first use in this function)
    
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>

diff --git a/include/linux/of.h b/include/linux/of.h
index 5dbe263462a9..c1f5118c59b4 100644
--- a/include/linux/of.h
+++ b/include/linux/of.h
@@ -23,6 +23,7 @@
 #include <linux/spinlock.h>
 
 #include <asm/byteorder.h>
+#include <asm/errno.h>
 
 typedef u32 phandle;
 typedef u32 ihandle;

commit ed5f886d16369fed5a69d96b8e85777c47206de1
Author: Nicolas Ferre <nicolas.ferre@atmel.com>
Date:   Thu Oct 27 11:07:28 2011 +0200

    dt: add empty of_alias_get_id() for non-dt builds
    
    Add function of_alias_get_id() reporting -ENOSYS
    for non-dt builds, so that drivers migrating to dt
    can save some '#ifdef CONFIG_OF'.
    
    Signed-off-by: Nicolas Ferre <nicolas.ferre@atmel.com>
    Acked-by: Rob Herring <rob.herring@calxeda.com>
    Signed-off-by: Grant Likely <grant.likely@secretlab.ca>

diff --git a/include/linux/of.h b/include/linux/of.h
index 5dbe263462a9..758899d4902b 100644
--- a/include/linux/of.h
+++ b/include/linux/of.h
@@ -303,6 +303,11 @@ static inline struct device_node *of_parse_phandle(struct device_node *np,
 	return NULL;
 }
 
+static inline int of_alias_get_id(struct device_node *np, const char *stem)
+{
+	return -ENOSYS;
+}
+
 #define of_match_ptr(_ptr)	NULL
 #define of_match_node(_matches, _node)	NULL
 #endif /* CONFIG_OF */

commit e51130c0f5e5ca2f5b669ca6759e0ae1aa197b63
Author: Kalle Valo <kvalo@qca.qualcomm.com>
Date:   Thu Oct 6 15:40:44 2011 +0300

    of: include errno.h
    
    When compiling ath6kl for beagleboard (omap2plus_defconfig plus
    CONFIG_ATH6KL, CONFIG_OF disable) with current linux-next compilation
    fails:
    
    include/linux/of.h:269: error: 'ENOSYS' undeclared (first use in this function)
    include/linux/of.h:276: error: 'ENOSYS' undeclared (first use in this function)
    include/linux/of.h:289: error: 'ENOSYS' undeclared (first use in this function)
    
    Fix this by including errno.h from of.h.
    
    Signed-off-by: Kalle Valo <kvalo@qca.qualcomm.com>
    Acked-by: Geert Uytterhoeven <geert@linux-m68k.org>
    Signed-off-by: Grant Likely <grant.likely@secretlab.ca>

diff --git a/include/linux/of.h b/include/linux/of.h
index 92c40a142243..5dbe263462a9 100644
--- a/include/linux/of.h
+++ b/include/linux/of.h
@@ -17,6 +17,7 @@
  */
 #include <linux/types.h>
 #include <linux/bitops.h>
+#include <linux/errno.h>
 #include <linux/kref.h>
 #include <linux/mod_devicetable.h>
 #include <linux/spinlock.h>

commit 5762c20593b6b959f1470dc6f1ff4ca4d9570f8d
Author: Nicolas Ferre <nicolas.ferre@atmel.com>
Date:   Mon Oct 24 11:53:32 2011 +0200

    dt: Add empty of_match_node() macro
    
    Add an empty macro for of_match_node() that will save
    some '#ifdef CONFIG_OF' for non-dt builds.
    
    I have chosen to use a macro instead of a function to
    be able to avoid defining the first parameter.
    In fact, this "struct of_device_id *" first parameter
    is usualy not defined as well on non-dt builds.
    
    Signed-off-by: Nicolas Ferre <nicolas.ferre@atmel.com>
    Acked-by: Grant Likely <grant.likely@secretlab.ca>

diff --git a/include/linux/of.h b/include/linux/of.h
index 736b7477beb2..92c40a142243 100644
--- a/include/linux/of.h
+++ b/include/linux/of.h
@@ -303,6 +303,7 @@ static inline struct device_node *of_parse_phandle(struct device_node *np,
 }
 
 #define of_match_ptr(_ptr)	NULL
+#define of_match_node(_matches, _node)	NULL
 #endif /* CONFIG_OF */
 
 static inline int of_property_read_u32(const struct device_node *np,

commit 36a0904ea0a657567122edebb95eab5f1620a5eb
Author: Rajendra Nayak <rnayak@ti.com>
Date:   Mon Oct 10 21:49:35 2011 +0530

    dt: add empty dt helpers for non-dt build
    
    Add empty of_device_is_compatible() and of_parse_phandle() for non-dt
    builds to work.
    
    Signed-off-by: Rajendra Nayak <rnayak@ti.com>
    Signed-off-by: Grant Likely <grant.likely@secretlab.ca>

diff --git a/include/linux/of.h b/include/linux/of.h
index 1cc9930ba06a..736b7477beb2 100644
--- a/include/linux/of.h
+++ b/include/linux/of.h
@@ -255,6 +255,12 @@ static inline bool of_have_populated_dt(void)
 #define for_each_child_of_node(parent, child) \
 	while (0)
 
+static inline int of_device_is_compatible(const struct device_node *device,
+					  const char *name)
+{
+	return 0;
+}
+
 static inline struct property *of_find_property(const struct device_node *np,
 						const char *name,
 						int *lenp)
@@ -289,6 +295,13 @@ static inline int of_property_read_u64(const struct device_node *np,
 	return -ENOSYS;
 }
 
+static inline struct device_node *of_parse_phandle(struct device_node *np,
+						   const char *phandle_name,
+						   int index)
+{
+	return NULL;
+}
+
 #define of_match_ptr(_ptr)	NULL
 #endif /* CONFIG_OF */
 

commit 4cd7f7a31178ff8a15ad2bc1258b9b2bf2cf51a4
Author: Jamie Iles <jamie@jamieiles.com>
Date:   Wed Sep 14 20:49:59 2011 +0100

    dt: add helper to read 64-bit integers
    
    Add a helper similar to of_property_read_u32() that handles 64-bit
    integers.
    
    v2/v3: constify device node and property name parameters.
    
    Cc: Grant Likely <grant.likely@secretlab.ca>
    Reviewed-by: Rob Herring <rob.herring@calxeda.com>
    Signed-off-by: Jamie Iles <jamie@jamieiles.com>
    Signed-off-by: Grant Likely <grant.likely@secretlab.ca>

diff --git a/include/linux/of.h b/include/linux/of.h
index 53107b09cbdf..1cc9930ba06a 100644
--- a/include/linux/of.h
+++ b/include/linux/of.h
@@ -200,6 +200,8 @@ extern int of_property_read_u32_array(const struct device_node *np,
 				      const char *propname,
 				      u32 *out_values,
 				      size_t sz);
+extern int of_property_read_u64(const struct device_node *np,
+				const char *propname, u64 *out_value);
 
 extern int of_property_read_string(struct device_node *np,
 				   const char *propname,
@@ -281,6 +283,12 @@ static inline const void *of_get_property(const struct device_node *node,
 	return NULL;
 }
 
+static inline int of_property_read_u64(const struct device_node *np,
+				       const char *propname, u64 *out_value)
+{
+	return -ENOSYS;
+}
+
 #define of_match_ptr(_ptr)	NULL
 #endif /* CONFIG_OF */
 

commit 4fcd15a032cec4b2684a32c86e895b50cdbee50c
Author: Benoit Cousson <b-cousson@ti.com>
Date:   Tue Sep 27 17:45:43 2011 +0200

    of: Add helpers to get one string in multiple strings property
    
    Add of_property_read_string_index and of_property_count_strings
    to retrieve one string inside a property that will contains
    severals strings.
    
    Signed-off-by: Benoit Cousson <b-cousson@ti.com>
    Acked-by: Grant Likely <grant.likely@secretlab.ca>
    Signed-off-by: Kevin Hilman <khilman@ti.com>

diff --git a/include/linux/of.h b/include/linux/of.h
index 9180dc5cb00b..5dfe2d5a8b5d 100644
--- a/include/linux/of.h
+++ b/include/linux/of.h
@@ -203,6 +203,11 @@ extern int of_property_read_u32_array(const struct device_node *np,
 extern int of_property_read_string(struct device_node *np,
 				   const char *propname,
 				   const char **out_string);
+extern int of_property_read_string_index(struct device_node *np,
+					 const char *propname,
+					 int index, const char **output);
+extern int of_property_count_strings(struct device_node *np,
+				     const char *propname);
 extern int of_device_is_compatible(const struct device_node *device,
 				   const char *);
 extern int of_device_is_available(const struct device_node *device);
@@ -256,6 +261,19 @@ static inline int of_property_read_string(struct device_node *np,
 	return -ENOSYS;
 }
 
+static inline int of_property_read_string_index(struct device_node *np,
+						const char *propname, int index,
+						const char **out_string)
+{
+	return -ENOSYS;
+}
+
+static inline int of_property_count_strings(struct device_node *np,
+					    const char *propname)
+{
+	return -ENOSYS;
+}
+
 static inline const void *of_get_property(const struct device_node *node,
 				const char *name,
 				int *lenp)

commit 3a1e362e3f3cd571b3974b8d44b8e358ec7a098c
Author: Ben Dooks <ben-linux@fluff.org>
Date:   Wed Aug 3 10:11:42 2011 +0100

    OF: Add of_match_ptr() macro
    
    Add a macro of_match_ptr() that allows the .of_match_table
    entry in the driver structures to be assigned without having
    an #ifdef xxx NULL for the case that OF is not enabled
    
    Signed-off-by: Ben Dooks <ben-linux@fluff.org>
    Signed-off-by: Grant Likely <grant.likely@secretlab.ca>

diff --git a/include/linux/of.h b/include/linux/of.h
index 83a61f3b443c..53107b09cbdf 100644
--- a/include/linux/of.h
+++ b/include/linux/of.h
@@ -242,6 +242,7 @@ extern void of_attach_node(struct device_node *);
 extern void of_detach_node(struct device_node *);
 #endif
 
+#define of_match_ptr(_ptr)	(_ptr)
 #else /* CONFIG_OF */
 
 static inline bool of_have_populated_dt(void)
@@ -280,6 +281,7 @@ static inline const void *of_get_property(const struct device_node *node,
 	return NULL;
 }
 
+#define of_match_ptr(_ptr)	NULL
 #endif /* CONFIG_OF */
 
 static inline int of_property_read_u32(const struct device_node *np,

commit aba3dfff9a75eb272c4f47994f16eb5d548a5af1
Author: Stephen Warren <swarren@nvidia.com>
Date:   Wed Sep 21 13:23:10 2011 -0600

    dt: add empty for_each_child_of_node, of_find_property
    
    The patch adds a couple empty functions for non-dt build, so that
    drivers migrating to dt can save some '#ifdef CONFIG_OF'.
    
    Signed-off-by: Stephen Warren <swarren@nvidia.com>
    Signed-off-by: Grant Likely <grant.likely@secretlab.ca>

diff --git a/include/linux/of.h b/include/linux/of.h
index 8b6383d876ca..83a61f3b443c 100644
--- a/include/linux/of.h
+++ b/include/linux/of.h
@@ -249,6 +249,16 @@ static inline bool of_have_populated_dt(void)
 	return false;
 }
 
+#define for_each_child_of_node(parent, child) \
+	while (0)
+
+static inline struct property *of_find_property(const struct device_node *np,
+						const char *name,
+						int *lenp)
+{
+	return NULL;
+}
+
 static inline int of_property_read_u32_array(const struct device_node *np,
 					     const char *propname,
 					     u32 *out_values, size_t sz)

commit 611cad720148c899db5a383c1c676fd820df7023
Author: Shawn Guo <shawn.guo@linaro.org>
Date:   Mon Aug 15 15:28:14 2011 +0800

    dt: add of_alias_scan and of_alias_get_id
    
    The patch adds function of_alias_scan to populate a global lookup
    table with the properties of 'aliases' node and function
    of_alias_get_id for drivers to find alias id from the lookup table.
    
    v3: Split out automatic addition of aliases on id lookup so that it can be
        debated separately from the core functionality.
    v2: - Add of_chosen/of_aliases populating and of_alias_scan() invocation
        for OF_PROMTREE.
        - Add locking
        - rework parse loop
    
    Signed-off-by: Shawn Guo <shawn.guo@linaro.org>
    Acked-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Grant Likely <grant.likely@secretlab.ca>

diff --git a/include/linux/of.h b/include/linux/of.h
index 9180dc5cb00b..8b6383d876ca 100644
--- a/include/linux/of.h
+++ b/include/linux/of.h
@@ -68,6 +68,7 @@ struct device_node {
 /* Pointer for first entry in chain of all nodes. */
 extern struct device_node *allnodes;
 extern struct device_node *of_chosen;
+extern struct device_node *of_aliases;
 extern rwlock_t devtree_lock;
 
 static inline bool of_have_populated_dt(void)
@@ -209,6 +210,9 @@ extern int of_device_is_available(const struct device_node *device);
 extern const void *of_get_property(const struct device_node *node,
 				const char *name,
 				int *lenp);
+#define for_each_property(pp, properties) \
+	for (pp = properties; pp != NULL; pp = pp->next)
+
 extern int of_n_addr_cells(struct device_node *np);
 extern int of_n_size_cells(struct device_node *np);
 extern const struct of_device_id *of_match_node(
@@ -221,6 +225,9 @@ extern int of_parse_phandles_with_args(struct device_node *np,
 	const char *list_name, const char *cells_name, int index,
 	struct device_node **out_node, const void **out_args);
 
+extern void of_alias_scan(void * (*dt_alloc)(u64 size, u64 align));
+extern int of_alias_get_id(struct device_node *np, const char *stem);
+
 extern int of_machine_is_compatible(const char *compat);
 
 extern int prom_add_property(struct device_node* np, struct property* prop);

commit 89272b8c0d427021bed70b1b83e1a16be375ccf5
Author: Stephen Warren <swarren@nvidia.com>
Date:   Fri Aug 5 16:50:30 2011 -0600

    dt: add empty of_get_property for non-dt
    
    The patch adds empty function of_get_property for non-dt build, so that
    drivers migrating to dt can save some '#ifdef CONFIG_OF'.
    
    This also fixes the current Tegra compile problem in linux-next.
    
    Signed-off-by: Stephen Warren <swarren@nvidia.com>
    Signed-off-by: Grant Likely <grant.likely@secretlab.ca>

diff --git a/include/linux/of.h b/include/linux/of.h
index 0085bb01c041..9180dc5cb00b 100644
--- a/include/linux/of.h
+++ b/include/linux/of.h
@@ -256,6 +256,13 @@ static inline int of_property_read_string(struct device_node *np,
 	return -ENOSYS;
 }
 
+static inline const void *of_get_property(const struct device_node *node,
+				const char *name,
+				int *lenp)
+{
+	return NULL;
+}
+
 #endif /* CONFIG_OF */
 
 static inline int of_property_read_u32(const struct device_node *np,

commit fe55c1844a1c106e9d9d3dd27cbfcf8caeb9e77e
Author: Grant Likely <grant.likely@secretlab.ca>
Date:   Thu Aug 4 10:27:32 2011 +0100

    Revert "dt: add of_alias_scan and of_alias_get_id"
    
    This reverts commit 750f463a749e28464151ad26938d11b07b1c43cb.
    
    of_alias_* still needs work to be generalized for 'promtree' dt
    platforms, and to no implicitly create entries for available ids.
    
    Signed-off-by: Grant Likely <grant.likely@secretlab.ca>

diff --git a/include/linux/of.h b/include/linux/of.h
index bc3dc6399547..0085bb01c041 100644
--- a/include/linux/of.h
+++ b/include/linux/of.h
@@ -68,7 +68,6 @@ struct device_node {
 /* Pointer for first entry in chain of all nodes. */
 extern struct device_node *allnodes;
 extern struct device_node *of_chosen;
-extern struct device_node *of_aliases;
 extern rwlock_t devtree_lock;
 
 static inline bool of_have_populated_dt(void)
@@ -210,9 +209,6 @@ extern int of_device_is_available(const struct device_node *device);
 extern const void *of_get_property(const struct device_node *node,
 				const char *name,
 				int *lenp);
-#define for_each_property(pp, properties) \
-	for (pp = properties; pp != NULL; pp = pp->next)
-
 extern int of_n_addr_cells(struct device_node *np);
 extern int of_n_size_cells(struct device_node *np);
 extern const struct of_device_id *of_match_node(
@@ -225,10 +221,6 @@ extern int of_parse_phandles_with_args(struct device_node *np,
 	const char *list_name, const char *cells_name, int index,
 	struct device_node **out_node, const void **out_args);
 
-extern void *early_init_dt_alloc_memory_arch(u64 size, u64 align);
-extern void of_alias_scan(void);
-extern int of_alias_get_id(struct device_node *np, const char *stem);
-
 extern int of_machine_is_compatible(const char *compat);
 
 extern int prom_add_property(struct device_node* np, struct property* prop);

commit 750f463a749e28464151ad26938d11b07b1c43cb
Author: Shawn Guo <shawn.guo@linaro.org>
Date:   Wed Aug 3 11:28:14 2011 +0100

    dt: add of_alias_scan and of_alias_get_id
    
    The patch adds function of_alias_scan to populate a global lookup
    table with the properties of 'aliases' node and function
    of_alias_get_id for drivers to find alias id from the lookup table.
    
    Signed-off-by: Shawn Guo <shawn.guo@linaro.org>
    [grant.likely: add locking and rework parse loop]
    Signed-off-by: Grant Likely <grant.likely@secretlab.ca>

diff --git a/include/linux/of.h b/include/linux/of.h
index 0085bb01c041..bc3dc6399547 100644
--- a/include/linux/of.h
+++ b/include/linux/of.h
@@ -68,6 +68,7 @@ struct device_node {
 /* Pointer for first entry in chain of all nodes. */
 extern struct device_node *allnodes;
 extern struct device_node *of_chosen;
+extern struct device_node *of_aliases;
 extern rwlock_t devtree_lock;
 
 static inline bool of_have_populated_dt(void)
@@ -209,6 +210,9 @@ extern int of_device_is_available(const struct device_node *device);
 extern const void *of_get_property(const struct device_node *node,
 				const char *name,
 				int *lenp);
+#define for_each_property(pp, properties) \
+	for (pp = properties; pp != NULL; pp = pp->next)
+
 extern int of_n_addr_cells(struct device_node *np);
 extern int of_n_size_cells(struct device_node *np);
 extern const struct of_device_id *of_match_node(
@@ -221,6 +225,10 @@ extern int of_parse_phandles_with_args(struct device_node *np,
 	const char *list_name, const char *cells_name, int index,
 	struct device_node **out_node, const void **out_args);
 
+extern void *early_init_dt_alloc_memory_arch(u64 size, u64 align);
+extern void of_alias_scan(void);
+extern int of_alias_get_id(struct device_node *np, const char *stem);
+
 extern int of_machine_is_compatible(const char *compat);
 
 extern int prom_add_property(struct device_node* np, struct property* prop);

commit aac285c6cb9622f1cc05ed162604bf5ad2da9a8d
Author: Jamie Iles <jamie@jamieiles.com>
Date:   Tue Aug 2 15:45:07 2011 +0100

    of: constify property name parameters for helper functions
    
    The helper functions for reading u32 integers, u32 arrays and strings
    should have the property name as a const pointer.
    
    Cc: Grant Likely <grant.likely@secretlab.ca>
    Signed-off-by: Jamie Iles <jamie@jamieiles.com>
    Signed-off-by: Grant Likely <grant.likely@secretlab.ca>

diff --git a/include/linux/of.h b/include/linux/of.h
index bd716f8908de..0085bb01c041 100644
--- a/include/linux/of.h
+++ b/include/linux/of.h
@@ -196,12 +196,13 @@ extern struct property *of_find_property(const struct device_node *np,
 					 const char *name,
 					 int *lenp);
 extern int of_property_read_u32_array(const struct device_node *np,
-				      char *propname,
+				      const char *propname,
 				      u32 *out_values,
 				      size_t sz);
 
-extern int of_property_read_string(struct device_node *np, char *propname,
-					const char **out_string);
+extern int of_property_read_string(struct device_node *np,
+				   const char *propname,
+				   const char **out_string);
 extern int of_device_is_compatible(const struct device_node *device,
 				   const char *);
 extern int of_device_is_available(const struct device_node *device);
@@ -242,13 +243,15 @@ static inline bool of_have_populated_dt(void)
 }
 
 static inline int of_property_read_u32_array(const struct device_node *np,
-				char *propname, u32 *out_values, size_t sz)
+					     const char *propname,
+					     u32 *out_values, size_t sz)
 {
 	return -ENOSYS;
 }
 
 static inline int of_property_read_string(struct device_node *np,
-				char *propname, const char **out_string)
+					  const char *propname,
+					  const char **out_string)
 {
 	return -ENOSYS;
 }
@@ -256,7 +259,7 @@ static inline int of_property_read_string(struct device_node *np,
 #endif /* CONFIG_OF */
 
 static inline int of_property_read_u32(const struct device_node *np,
-				       char *propname,
+				       const char *propname,
 				       u32 *out_value)
 {
 	return of_property_read_u32_array(np, propname, out_value, 1);

commit b98c0239204d6603b3a33bcc2b3916adaa8d4160
Author: Shawn Guo <shawn.guo@linaro.org>
Date:   Fri Jul 8 16:27:33 2011 +0800

    dt: add empty of_property_read_u32[_array] for non-dt
    
    The patch adds empty functions of_property_read_u32 and
    of_property_read_u32_array for non-dt build, so that drivers
    migrating to dt can save some '#ifdef CONFIG_OF'.
    
    Signed-off-by: Shawn Guo <shawn.guo@linaro.org>
    [grant.likely: Moved things around so only one new static inline is needed]
    [grant.likely: Added _string variant]
    Signed-off-by: Grant Likely <grant.likely@secretlab.ca>

diff --git a/include/linux/of.h b/include/linux/of.h
index b5f1c88e40a7..bd716f8908de 100644
--- a/include/linux/of.h
+++ b/include/linux/of.h
@@ -200,13 +200,6 @@ extern int of_property_read_u32_array(const struct device_node *np,
 				      u32 *out_values,
 				      size_t sz);
 
-static inline int of_property_read_u32(const struct device_node *np,
-				       char *propname,
-				       u32 *out_value)
-{
-	return of_property_read_u32_array(np, propname, out_value, 1);
-}
-
 extern int of_property_read_string(struct device_node *np, char *propname,
 					const char **out_string);
 extern int of_device_is_compatible(const struct device_node *device,
@@ -241,12 +234,32 @@ extern void of_attach_node(struct device_node *);
 extern void of_detach_node(struct device_node *);
 #endif
 
-#else
+#else /* CONFIG_OF */
 
 static inline bool of_have_populated_dt(void)
 {
 	return false;
 }
 
+static inline int of_property_read_u32_array(const struct device_node *np,
+				char *propname, u32 *out_values, size_t sz)
+{
+	return -ENOSYS;
+}
+
+static inline int of_property_read_string(struct device_node *np,
+				char *propname, const char **out_string)
+{
+	return -ENOSYS;
+}
+
 #endif /* CONFIG_OF */
+
+static inline int of_property_read_u32(const struct device_node *np,
+				       char *propname,
+				       u32 *out_value)
+{
+	return of_property_read_u32_array(np, propname, out_value, 1);
+}
+
 #endif /* _LINUX_OF_H */

commit 0e373639ad7c7ef2b0c9cf907574b266791b9778
Author: Rob Herring <rob.herring@calxeda.com>
Date:   Wed Jul 6 15:42:58 2011 -0500

    dt: add helper function to read u32 arrays
    
    Rework of_property_read_u32 to read an array of values. Then
    of_property_read_u32 becomes an inline with array size of 1.
    
    Also make struct device_node ptr const.
    
    Signed-off-by: Rob Herring <rob.herring@calxeda.com>
    Signed-off-by: Grant Likely <grant.likely@secretlab.ca>

diff --git a/include/linux/of.h b/include/linux/of.h
index b23852002b30..b5f1c88e40a7 100644
--- a/include/linux/of.h
+++ b/include/linux/of.h
@@ -195,8 +195,18 @@ extern struct device_node *of_find_node_with_property(
 extern struct property *of_find_property(const struct device_node *np,
 					 const char *name,
 					 int *lenp);
-extern int of_property_read_u32(struct device_node *np, char *propname,
-					u32 *out_value);
+extern int of_property_read_u32_array(const struct device_node *np,
+				      char *propname,
+				      u32 *out_values,
+				      size_t sz);
+
+static inline int of_property_read_u32(const struct device_node *np,
+				       char *propname,
+				       u32 *out_value)
+{
+	return of_property_read_u32_array(np, propname, out_value, 1);
+}
+
 extern int of_property_read_string(struct device_node *np, char *propname,
 					const char **out_string);
 extern int of_device_is_compatible(const struct device_node *device,

commit f09bc831b7693f93ecb95dea7180d55b45b88e76
Author: Shawn Guo <shawn.guo@linaro.org>
Date:   Mon Jul 4 09:01:18 2011 +0800

    dt: add 'const' for of_property_read_string parameter **out_string
    
    The existing dt codes usually call of_get_property to get a string
    property and save it as a 'const char *'.  The patch adds'const' for
    of_property_read_string parameter **out_string to make the converting
    of existing code a little easier.
    
    Signed-off-by: Shawn Guo <shawn.guo@linaro.org>
    Signed-off-by: Grant Likely <grant.likely@secretlab.ca>

diff --git a/include/linux/of.h b/include/linux/of.h
index 4fc4c1b8d5d5..b23852002b30 100644
--- a/include/linux/of.h
+++ b/include/linux/of.h
@@ -198,7 +198,7 @@ extern struct property *of_find_property(const struct device_node *np,
 extern int of_property_read_u32(struct device_node *np, char *propname,
 					u32 *out_value);
 extern int of_property_read_string(struct device_node *np, char *propname,
-					char **out_string);
+					const char **out_string);
 extern int of_device_is_compatible(const struct device_node *device,
 				   const char *);
 extern int of_device_is_available(const struct device_node *device);

commit a3b853633d78c3930b513ee219df48637ac82eed
Author: Thomas Abraham <thomas.abraham@linaro.org>
Date:   Thu Jun 30 21:26:10 2011 +0530

    dt: add helper functions to read u32 and string property values
    
    Add helper functions to retrieve unsigned integer and string property
    values from properties of a device node. These helper functions can be
    used to lookup a property in a device node, perform error checking and
    read the property value.
    
    [grant.likely@secretlab.ca: Proposal and initial implementation]
    Signed-off-by: Thomas Abraham <thomas.abraham@linaro.org>
    [grant.likely: some word smithing and be more defensive validating the string]
    Signed-off-by: Grant Likely <grant.likely@secretlab.ca>

diff --git a/include/linux/of.h b/include/linux/of.h
index bfc0ed1b0ced..4fc4c1b8d5d5 100644
--- a/include/linux/of.h
+++ b/include/linux/of.h
@@ -195,6 +195,10 @@ extern struct device_node *of_find_node_with_property(
 extern struct property *of_find_property(const struct device_node *np,
 					 const char *name,
 					 int *lenp);
+extern int of_property_read_u32(struct device_node *np, char *propname,
+					u32 *out_value);
+extern int of_property_read_string(struct device_node *np, char *propname,
+					char **out_string);
 extern int of_device_is_compatible(const struct device_node *device,
 				   const char *);
 extern int of_device_is_available(const struct device_node *device);

commit 4c5811bf463b0ef82fabbd1708f8bb2d753aeb18
Merge: f74b9444192c 9f15444fefdb
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Wed Mar 16 17:28:10 2011 -0700

    Merge branch 'devicetree/next' of git://git.secretlab.ca/git/linux-2.6
    
    * 'devicetree/next' of git://git.secretlab.ca/git/linux-2.6: (21 commits)
      tty: serial: altera_jtaguart: Add device tree support
      tty: serial: altera_uart: Add devicetree support
      dt: eliminate of_platform_driver shim code
      dt: Eliminate of_platform_{,un}register_driver
      dt/serial: Eliminate users of of_platform_{,un}register_driver
      dt/usb: Eliminate users of of_platform_{,un}register_driver
      dt/video: Eliminate users of of_platform_{,un}register_driver
      dt/net: Eliminate users of of_platform_{,un}register_driver
      dt/sound: Eliminate users of of_platform_{,un}register_driver
      dt/spi: Eliminate users of of_platform_{,un}register_driver
      dt: uartlite: merge platform and of_platform driver bindings
      dt: xilinx_hwicap: merge platform and of_platform driver bindings
      ipmi: convert OF driver to platform driver
      leds/leds-gpio: merge platform_driver with of_platform_driver
      dt/sparc: Eliminate users of of_platform_{,un}register_driver
      dt/powerpc: Eliminate users of of_platform_{,un}register_driver
      dt/powerpc: move of_bus_type infrastructure to ibmebus
      drivercore/dt: add a match table pointer to struct device
      dt: Typo fix.
      altera_ps2: Add devicetree support
      ...

commit 3d6b88282751a3329d7b041a8d18db87641db9e8
Author: Lennert Buytenhek <buytenh@wantstofly.org>
Date:   Tue Feb 22 18:18:51 2011 +0100

    dt: Typo fix.
    
    Signed-off-by: Lennert Buytenhek <buytenh@secretlab.ca>
    Signed-off-by: Grant Likely <grant.likely@secretlab.ca>

diff --git a/include/linux/of.h b/include/linux/of.h
index d9dd664a6a9c..c004753d4c1b 100644
--- a/include/linux/of.h
+++ b/include/linux/of.h
@@ -103,7 +103,7 @@ extern void of_node_put(struct device_node *node);
 #endif
 
 /*
- * OF address retreival & translation
+ * OF address retrieval & translation
  */
 
 /* Helper to read a big number; size is in cells (not bytes) */

commit 3bcbaf6e08d8d82cde781997bd2c56dda87049b5
Author: Sebastian Andrzej Siewior <bigeasy@linutronix.de>
Date:   Tue Feb 22 21:07:46 2011 +0100

    rtc: cmos: Add OF bindings
    
    This allows to load the OF driver based informations from the device
    tree. Systems without BIOS may need to perform some initialization.
    PowerPC creates a PNP device from the OF information and performs this
    kind of initialization in their private PCI quirk. This looks more
    generic.
    
    This patch also avoids registering the platform RTC driver on X86 if
    we have a device tree blob. Otherwise we would setup the device based
    on the hardcoded information in arch/x86 rather than the device tree
    based one.
    
    [ tglx: Changed "int of_have_populated_dt()" to bool as recommended by
            Grant ]
    
    Signed-off-by: Sebastian Andrzej Siewior <bigeasy@linutronix.de>
    Signed-off-by: Dirk Brandewie <dirk.brandewie@gmail.com>
    Acked-by: Grant Likely <grant.likely@secretlab.ca>
    Cc: sodaville@linutronix.de
    Cc: devicetree-discuss@lists.ozlabs.org
    Cc: rtc-linux@googlegroups.com
    Cc: Alessandro Zummo <a.zummo@towertech.it>
    LKML-Reference: <1298405266-1624-12-git-send-email-bigeasy@linutronix.de>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>

diff --git a/include/linux/of.h b/include/linux/of.h
index d9dd664a6a9c..266db1d0baa9 100644
--- a/include/linux/of.h
+++ b/include/linux/of.h
@@ -70,6 +70,11 @@ extern struct device_node *allnodes;
 extern struct device_node *of_chosen;
 extern rwlock_t devtree_lock;
 
+static inline bool of_have_populated_dt(void)
+{
+	return allnodes != NULL;
+}
+
 static inline bool of_node_is_root(const struct device_node *node)
 {
 	return node && (node->parent == NULL);
@@ -222,5 +227,12 @@ extern void of_attach_node(struct device_node *);
 extern void of_detach_node(struct device_node *);
 #endif
 
+#else
+
+static inline bool of_have_populated_dt(void)
+{
+	return false;
+}
+
 #endif /* CONFIG_OF */
 #endif /* _LINUX_OF_H */

commit c9e358dfc4a8cb2227172ef77908c2e0ee17bcb9
Author: Grant Likely <grant.likely@secretlab.ca>
Date:   Fri Jan 21 09:24:48 2011 -0700

    driver-core: remove conditionals around devicetree pointers
    
    Having conditional around the of_match_table and the of_node pointers
    turns out to make driver code use ugly #ifdef blocks.  Drop the
    conditionals and remove the #ifdef blocks from the affected drivers.
    
    Also tidy up minor whitespace issues within the same hunks.
    
    Signed-off-by: Grant Likely <grant.likely@secretlab.ca>
    Acked-by: Greg Kroah-Hartman <gregkh@suse.de>

diff --git a/include/linux/of.h b/include/linux/of.h
index cad7cf0ab278..d9dd664a6a9c 100644
--- a/include/linux/of.h
+++ b/include/linux/of.h
@@ -23,8 +23,6 @@
 
 #include <asm/byteorder.h>
 
-#ifdef CONFIG_OF
-
 typedef u32 phandle;
 typedef u32 ihandle;
 
@@ -65,6 +63,8 @@ struct device_node {
 #endif
 };
 
+#ifdef CONFIG_OF
+
 /* Pointer for first entry in chain of all nodes. */
 extern struct device_node *allnodes;
 extern struct device_node *of_chosen;

commit 559e2b7ee7a1c7753d534abcb2742a4775339293
Author: Grant Likely <grant.likely@secretlab.ca>
Date:   Fri Jul 23 20:11:18 2010 -0600

    of: Provide default of_node_to_nid() implementation.
    
    of_node_to_nid() is only relevant in a few architectures.  Don't force
    everyone to implement it anyway.
    
    Signed-off-by: Grant Likely <grant.likely@secretlab.ca>

diff --git a/include/linux/of.h b/include/linux/of.h
index b0756f33249e..cad7cf0ab278 100644
--- a/include/linux/of.h
+++ b/include/linux/of.h
@@ -146,6 +146,11 @@ static inline unsigned long of_read_ulong(const __be32 *cell, int size)
 
 #define OF_BAD_ADDR	((u64)-1)
 
+#ifndef of_node_to_nid
+static inline int of_node_to_nid(struct device_node *np) { return -1; }
+#define of_node_to_nid of_node_to_nid
+#endif
+
 extern struct device_node *of_find_node_by_name(struct device_node *from,
 	const char *name);
 #define for_each_node_by_name(dn, name) \

commit 035ebefc737cce56d3938e9b7eaa5ac0e9c28715
Author: Andres Salomon <dilinger@queued.net>
Date:   Tue Jul 13 09:42:26 2010 +0000

    of/sparc: move is_root_node() to of.h
    
    Rename is_root_node() to of_node_is_root() and make it available for
    all archs to use, as it's not PROM-specific.
    
    Signed-off-by: Andres Salomon <dilinger@queued.net>
    Acked-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Grant Likely <grant.likely@secretlab.ca>

diff --git a/include/linux/of.h b/include/linux/of.h
index a367e19bb3af..b0756f33249e 100644
--- a/include/linux/of.h
+++ b/include/linux/of.h
@@ -70,6 +70,11 @@ extern struct device_node *allnodes;
 extern struct device_node *of_chosen;
 extern rwlock_t devtree_lock;
 
+static inline bool of_node_is_root(const struct device_node *node)
+{
+	return node && (node->parent == NULL);
+}
+
 static inline int of_node_check_flag(struct device_node *n, unsigned long flag)
 {
 	return test_bit(flag, &n->_flags);

commit 1976152fd8e706135deed6cf333e347c08416056
Author: Grant Likely <grant.likely@secretlab.ca>
Date:   Thu Mar 18 07:30:31 2010 -0600

    of: Fix comparison of "compatible" properties
    
    Commit 7c7b60cb87547b1664a4385c187f029bf514a737
    "of: put default string compare and #a/s-cell values into common header"
    
    Breaks various things on powerpc due to using strncasecmp instead of
    strcasecmp for comparing against "compatible" strings.
    
    This causes things like the 4xx PCI code to fail miserably due to the
    partial matches in code like this:
    
           for_each_compatible_node(np, NULL, "ibm,plb-pcix")
                   ppc4xx_probe_pcix_bridge(np);
           for_each_compatible_node(np, NULL, "ibm,plb-pci")
                   ppc4xx_probe_pci_bridge(np);
    
    It's not quite right to do partial name match. Entries in a compatible
    list are meant to be matched whole. If a device is compatible with both
    "foo" and "foo1", then the device should have both strings in its
    "compatible" property.
    
    This patch reverts powerpc and microblaze us to use strcasecmp.
    
    Signed-off-by: Benjamin Herrenschmidt <benh@kernel.crashing.org>
          (for patch description)
    Signed-off-by: Grant Likely <grant.likely@secretlab.ca>
    Acked-by: David S. Miller <davem@davemloft.net>
    Acked-by: Michal Simek <michal.simek@petalogix.com>

diff --git a/include/linux/of.h b/include/linux/of.h
index f6d9cbc39c9c..a367e19bb3af 100644
--- a/include/linux/of.h
+++ b/include/linux/of.h
@@ -127,7 +127,7 @@ static inline unsigned long of_read_ulong(const __be32 *cell, int size)
 
 /* Default string compare functions, Allow arch asm/prom.h to override */
 #if !defined(of_compat_cmp)
-#define of_compat_cmp(s1, s2, l)	strncasecmp((s1), (s2), (l))
+#define of_compat_cmp(s1, s2, l)	strcasecmp((s1), (s2))
 #define of_prop_cmp(s1, s2)		strcmp((s1), (s2))
 #define of_node_cmp(s1, s2)		strcasecmp((s1), (s2))
 #endif

commit 0d351c3e932c2e155ef5e4c3f5b87223abd4eea6
Author: Grant Likely <grant.likely@secretlab.ca>
Date:   Sun Feb 14 14:13:57 2010 -0700

    of/sparc: Remove sparc-local declaration of allnodes and devtree_lock
    
    Both allnodes and devtree_lock are defined in common code.  The
    extern declaration should be in the common header too so that the
    compiler can type check.  allnodes is already in of.h, but
    devtree_lock should be declared there too.
    
    This patch removes the SPARC declarations and uses decls in of.h instead.
    
    Signed-off-by: Grant Likely <grant.likely@secretlab.ca>
    Acked-by: Benjamin Herrenschmidt <benh@kernel.crashing.org>
    Acked-by: Michal Simek <monstr@monstr.eu>
    Acked-by: David S. Miller <davem@davemloft.net>

diff --git a/include/linux/of.h b/include/linux/of.h
index d34cc5d9d81e..f6d9cbc39c9c 100644
--- a/include/linux/of.h
+++ b/include/linux/of.h
@@ -19,6 +19,7 @@
 #include <linux/bitops.h>
 #include <linux/kref.h>
 #include <linux/mod_devicetable.h>
+#include <linux/spinlock.h>
 
 #include <asm/byteorder.h>
 
@@ -67,6 +68,7 @@ struct device_node {
 /* Pointer for first entry in chain of all nodes. */
 extern struct device_node *allnodes;
 extern struct device_node *of_chosen;
+extern rwlock_t devtree_lock;
 
 static inline int of_node_check_flag(struct device_node *n, unsigned long flag)
 {

commit fc0bdae49d810e4cb32d7b547bc6d4dfb08f9e2e
Author: Grant Likely <grant.likely@secretlab.ca>
Date:   Sun Feb 14 07:13:55 2010 -0700

    of: move definition of of_chosen into common code.
    
    Rather than defining of_chosen in each arch, it can be defined for all
    in driver/of/base.c
    
    Signed-off-by: Grant Likely <grant.likely@secretlab.ca>
    Acked-by: Benjamin Herrenschmidt <benh@kernel.crashing.org>
    Acked-by: Michal Simek <monstr@monstr.eu>

diff --git a/include/linux/of.h b/include/linux/of.h
index 5cd284002bf1..d34cc5d9d81e 100644
--- a/include/linux/of.h
+++ b/include/linux/of.h
@@ -66,6 +66,7 @@ struct device_node {
 
 /* Pointer for first entry in chain of all nodes. */
 extern struct device_node *allnodes;
+extern struct device_node *of_chosen;
 
 static inline int of_node_check_flag(struct device_node *n, unsigned long flag)
 {

commit 7c7b60cb87547b1664a4385c187f029bf514a737
Author: Grant Likely <grant.likely@secretlab.ca>
Date:   Sun Feb 14 07:13:50 2010 -0700

    of: put default string compare and #a/s-cell values into common header
    
    Most architectures don't need to change these.  Put them into common
    code to eliminate some duplication
    
    Signed-off-by: Grant Likely <grant.likely@secretlab.ca>
    Acked-by: Benjamin Herrenschmidt <benh@kernel.crashing.org>
    Acked-by: Michal Simek <monstr@monstr.eu>

diff --git a/include/linux/of.h b/include/linux/of.h
index 48b0ee6d0f76..5cd284002bf1 100644
--- a/include/linux/of.h
+++ b/include/linux/of.h
@@ -116,6 +116,19 @@ static inline unsigned long of_read_ulong(const __be32 *cell, int size)
 
 #include <asm/prom.h>
 
+/* Default #address and #size cells.  Allow arch asm/prom.h to override */
+#if !defined(OF_ROOT_NODE_ADDR_CELLS_DEFAULT)
+#define OF_ROOT_NODE_ADDR_CELLS_DEFAULT 1
+#define OF_ROOT_NODE_SIZE_CELLS_DEFAULT 1
+#endif
+
+/* Default string compare functions, Allow arch asm/prom.h to override */
+#if !defined(of_compat_cmp)
+#define of_compat_cmp(s1, s2, l)	strncasecmp((s1), (s2), (l))
+#define of_prop_cmp(s1, s2)		strcmp((s1), (s2))
+#define of_node_cmp(s1, s2)		strcasecmp((s1), (s2))
+#endif
+
 /* flag descriptions */
 #define OF_DYNAMIC	1 /* node and properties were allocated via kmalloc */
 #define OF_DETACHED	2 /* node has been detached from the device tree */

commit 9dfbf207802c7e8cda9d081a8d750b50633c82d2
Author: Jeremy Kerr <jeremy.kerr@canonical.com>
Date:   Sun Feb 14 07:13:43 2010 -0700

    of: protect linux/of.h with CONFIG_OF
    
    For platforms that have CONFIG_OF optional, we need to make the contents
    of linux/of.h conditional on CONFIG_OF.
    
    Signed-off-by: Jeremy Kerr <jeremy.kerr@canonical.com>
    Signed-off-by: Grant Likely <grant.likely@secretlab.ca>
    Acked-by: Benjamin Herrenschmidt <benh@kernel.crashing.org>
    Acked-by: Michal Simek <monstr@monstr.eu>

diff --git a/include/linux/of.h b/include/linux/of.h
index 5c7b6a64acd9..48b0ee6d0f76 100644
--- a/include/linux/of.h
+++ b/include/linux/of.h
@@ -22,6 +22,8 @@
 
 #include <asm/byteorder.h>
 
+#ifdef CONFIG_OF
+
 typedef u32 phandle;
 typedef u32 ihandle;
 
@@ -194,4 +196,5 @@ extern void of_attach_node(struct device_node *);
 extern void of_detach_node(struct device_node *);
 #endif
 
+#endif /* CONFIG_OF */
 #endif /* _LINUX_OF_H */

commit 21b082ecdd7e6b8a5eba2cc013cae41b24de7f51
Author: Grant Likely <grant.likely@secretlab.ca>
Date:   Sun Feb 14 07:13:38 2010 -0700

    of: Remove old and misplaced function declarations
    
    The following functions don't exist:
      finish_device_tree()
      print_properties()
      prom_n_intr_cells()
      prom_get_irq_senses()
    
    The following functions are in drivers/of/base.c, so the declaration
    belongs in of.h instead of of_fdt.h
      of_machine_is_compatible()
      prom_add_property()
      prom_remove_property()
      prom_update_property()
    
    Signed-off-by: Grant Likely <grant.likely@secretlab.ca>
    Acked-by: Benjamin Herrenschmidt <benh@kernel.crashing.org>
    Acked-by: Michal Simek <monstr@monstr.eu>

diff --git a/include/linux/of.h b/include/linux/of.h
index fa5571b6e219..5c7b6a64acd9 100644
--- a/include/linux/of.h
+++ b/include/linux/of.h
@@ -180,6 +180,14 @@ extern int of_parse_phandles_with_args(struct device_node *np,
 	const char *list_name, const char *cells_name, int index,
 	struct device_node **out_node, const void **out_args);
 
+extern int of_machine_is_compatible(const char *compat);
+
+extern int prom_add_property(struct device_node* np, struct property* prop);
+extern int prom_remove_property(struct device_node *np, struct property *prop);
+extern int prom_update_property(struct device_node *np,
+				struct property *newprop,
+				struct property *oldprop);
+
 #if defined(CONFIG_OF_DYNAMIC)
 /* For updating the device tree at runtime */
 extern void of_attach_node(struct device_node *);

commit 2e89e685a8fd0e8334de967739d11e2e28c1a4dd
Author: Jeremy Kerr <jeremy.kerr@canonical.com>
Date:   Sat Jan 30 01:41:49 2010 -0700

    of: use __be32 for cell value accessors
    
    Currently, we're using u32 for cell values, and hence assuming
    host-endian device trees.
    
    As we'd like to support little-endian platforms, use a __be32 for cell
    values, and convert in the cell accessors.
    
    Signed-off-by: Jeremy Kerr <jeremy.kerr@canonical.com>
    Signed-off-by: Grant Likely <grant.likely@secretlab.ca>

diff --git a/include/linux/of.h b/include/linux/of.h
index fd47c81d7a25..fa5571b6e219 100644
--- a/include/linux/of.h
+++ b/include/linux/of.h
@@ -20,6 +20,8 @@
 #include <linux/kref.h>
 #include <linux/mod_devicetable.h>
 
+#include <asm/byteorder.h>
+
 typedef u32 phandle;
 typedef u32 ihandle;
 
@@ -95,16 +97,16 @@ extern void of_node_put(struct device_node *node);
  */
 
 /* Helper to read a big number; size is in cells (not bytes) */
-static inline u64 of_read_number(const u32 *cell, int size)
+static inline u64 of_read_number(const __be32 *cell, int size)
 {
 	u64 r = 0;
 	while (size--)
-		r = (r << 32) | *(cell++);
+		r = (r << 32) | be32_to_cpu(*(cell++));
 	return r;
 }
 
 /* Like of_read_number, but we want an unsigned long result */
-static inline unsigned long of_read_ulong(const u32 *cell, int size)
+static inline unsigned long of_read_ulong(const __be32 *cell, int size)
 {
 	/* toss away upper bits if unsigned long is smaller than u64 */
 	return of_read_number(cell, size);

commit 8cfb3343f70bcf9403218df120ecf345f06dd585
Author: Jeremy Kerr <jeremy.kerr@canonical.com>
Date:   Mon Feb 1 21:34:14 2010 -0700

    of: make set_node_proc_entry private to proc_devtree.c
    
    We only need set_node_proc_entry in proc_devtree.c, so move it there.
    
    This fixes the !HAVE_ARCH_DEVTREE_FIXUPS build, as we can't make make
    the definition in linux/of.h conditional on this #define (definitions in
    asm/prom.h can't be exposed to linux/of.h, due to the enforced #include
    ordering).
    
    Signed-off-by: Jeremy Kerr <jeremy.kerr@canonical.com>
    Signed-off-by: Grant Likely <grant.likely@secretlab.ca>

diff --git a/include/linux/of.h b/include/linux/of.h
index 3cc0d7ae290e..fd47c81d7a25 100644
--- a/include/linux/of.h
+++ b/include/linux/of.h
@@ -73,12 +73,6 @@ static inline void of_node_set_flag(struct device_node *n, unsigned long flag)
 	set_bit(flag, &n->_flags);
 }
 
-static inline void
-set_node_proc_entry(struct device_node *dn, struct proc_dir_entry *de)
-{
-	dn->pde = de;
-}
-
 extern struct device_node *of_find_all_nodes(struct device_node *prev);
 
 #if defined(CONFIG_SPARC)

commit fcdeb7fedf89f4bbc2e11959794968080cd8426e
Author: Grant Likely <grant.likely@secretlab.ca>
Date:   Fri Jan 29 05:04:33 2010 -0700

    of: merge of_attach_node() & of_detach_node()
    
    Merge common code between PowerPC and Microblaze
    
    Signed-off-by: Grant Likely <grant.likely@secretlab.ca>
    Tested-by: Wolfram Sang <w.sang@pengutronix.de>
    Acked-by: Benjamin Herrenschmidt <benh@kernel.crashing.org>

diff --git a/include/linux/of.h b/include/linux/of.h
index dbabf86e0b7a..3cc0d7ae290e 100644
--- a/include/linux/of.h
+++ b/include/linux/of.h
@@ -184,4 +184,10 @@ extern int of_parse_phandles_with_args(struct device_node *np,
 	const char *list_name, const char *cells_name, int index,
 	struct device_node **out_node, const void **out_args);
 
+#if defined(CONFIG_OF_DYNAMIC)
+/* For updating the device tree at runtime */
+extern void of_attach_node(struct device_node *);
+extern void of_detach_node(struct device_node *);
+#endif
+
 #endif /* _LINUX_OF_H */

commit 6016a363f6b56b46b24655bcfc0499b715851cf3
Author: Grant Likely <grant.likely@secretlab.ca>
Date:   Thu Jan 28 14:06:53 2010 -0700

    of: unify phandle name in struct device_node
    
    In struct device_node, the phandle is named 'linux_phandle' for PowerPC
    and MicroBlaze, and 'node' for SPARC.  There is no good reason for the
    difference, it is just an artifact of the code diverging over a couple
    of years.  This patch renames both to simply .phandle.
    
    Note: the .node also existed in PowerPC/MicroBlaze, but the only user
    seems to be arch/powerpc/platforms/powermac/pfunc_core.c.  It doesn't
    look like the assignment between .linux_phandle and .node is
    significantly different enough to warrant the separate code paths
    unless ibm,phandle properties actually appear in Apple device trees.
    
    I think it is safe to eliminate the old .node property and use
    phandle everywhere.
    
    Signed-off-by: Grant Likely <grant.likely@secretlab.ca>
    Acked-by: David S. Miller <davem@davemloft.net>
    Tested-by: Wolfram Sang <w.sang@pengutronix.de>
    Acked-by: Benjamin Herrenschmidt <benh@kernel.crashing.org>

diff --git a/include/linux/of.h b/include/linux/of.h
index d4c014a35ea5..dbabf86e0b7a 100644
--- a/include/linux/of.h
+++ b/include/linux/of.h
@@ -39,10 +39,7 @@ struct of_irq_controller;
 struct device_node {
 	const char *name;
 	const char *type;
-	phandle	node;
-#if !defined(CONFIG_SPARC)
-	phandle linux_phandle;
-#endif
+	phandle phandle;
 	char	*full_name;
 
 	struct	property *properties;

commit 2be09cb993826b52c9fc1d44747c20dd43a50038
Author: Grant Likely <grant.likely@secretlab.ca>
Date:   Mon Nov 23 20:16:46 2009 -0700

    of: remove special case definition of of_read_ulong()
    
    Special case of of_read_ulong() was defined for PPC32 to toss away
    all but the last 32 bits when a large number value was read, and the
    'normal' version for ppc64 just #defined of_read_ulong to of_read_number
    which causes compiler warnings on MicroBlaze and other 32 bit
    architectures because it returns a u64 instead of a ulong.
    
    This patch fixes the problem by defining a common implementation of
    of_read_ulong() that works everywhere.
    
    Signed-off-by: Grant Likely <grant.likely@secretlab.ca>
    Reviewed-by: Wolfram Sang <w.sang@pengutronix.de>
    Tested-by: Michal Simek <monstr@monstr.eu>

diff --git a/include/linux/of.h b/include/linux/of.h
index bec215792c4f..d4c014a35ea5 100644
--- a/include/linux/of.h
+++ b/include/linux/of.h
@@ -113,14 +113,11 @@ static inline u64 of_read_number(const u32 *cell, int size)
 }
 
 /* Like of_read_number, but we want an unsigned long result */
-#ifdef CONFIG_PPC32
 static inline unsigned long of_read_ulong(const u32 *cell, int size)
 {
-	return cell[size-1];
+	/* toss away upper bits if unsigned long is smaller than u64 */
+	return of_read_number(cell, size);
 }
-#else
-#define of_read_ulong(cell, size)	of_read_number(cell, size)
-#endif
 
 #include <asm/prom.h>
 

commit 41f880091c15b039ffcc8b3d831656b81517a6d3
Author: Grant Likely <grant.likely@secretlab.ca>
Date:   Mon Nov 23 20:07:01 2009 -0700

    of/flattree: Merge unflatten_device_tree
    
    Merge common code between PowerPC and MicroBlaze
    
    Signed-off-by: Grant Likely <grant.likely@secretlab.ca>
    Reviewed-by: Wolfram Sang <w.sang@pengutronix.de>
    Tested-by: Michal Simek <monstr@monstr.eu>

diff --git a/include/linux/of.h b/include/linux/of.h
index e7facd8fbce8..bec215792c4f 100644
--- a/include/linux/of.h
+++ b/include/linux/of.h
@@ -63,6 +63,9 @@ struct device_node {
 #endif
 };
 
+/* Pointer for first entry in chain of all nodes. */
+extern struct device_node *allnodes;
+
 static inline int of_node_check_flag(struct device_node *n, unsigned long flag)
 {
 	return test_bit(flag, &n->_flags);

commit e91edcf5a2940bb7f1f316c871dfe9e2aaf9d6d9
Author: Grant Likely <grant.likely@secretlab.ca>
Date:   Thu Oct 15 10:58:09 2009 -0600

    of: merge of_find_all_nodes() implementations
    
    Merge common code between Microblaze and PowerPC, and make it available
    to Sparc
    
    Signed-off-by: Grant Likely <grant.likely@secretlab.ca>
    Acked-by: David S. Miller <davem@davemloft.net>
    Acked-by: Wolfram Sang <w.sang@pengutronix.de>
    Acked-by: Michal Simek <monstr@monstr.eu>
    Acked-by: Stephen Neuendorffer <stephen.neuendorffer@xilinx.com>
    Acked-by: Stephen Rothwell <sfr@canb.auug.org.au>

diff --git a/include/linux/of.h b/include/linux/of.h
index 4636bba93afa..e7facd8fbce8 100644
--- a/include/linux/of.h
+++ b/include/linux/of.h
@@ -79,6 +79,8 @@ set_node_proc_entry(struct device_node *dn, struct proc_dir_entry *de)
 	dn->pde = de;
 }
 
+extern struct device_node *of_find_all_nodes(struct device_node *prev);
+
 #if defined(CONFIG_SPARC)
 /* Dummy ref counting routines - to be implemented later */
 static inline struct device_node *of_node_get(struct device_node *node)
@@ -90,7 +92,6 @@ static inline void of_node_put(struct device_node *node)
 }
 
 #else
-extern struct device_node *of_find_all_nodes(struct device_node *prev);
 extern struct device_node *of_node_get(struct device_node *node);
 extern void of_node_put(struct device_node *node);
 #endif

commit 526b5b3ed97bac22ed0c9feed97adcdc3a25244c
Author: Grant Likely <grant.likely@secretlab.ca>
Date:   Thu Oct 15 10:58:02 2009 -0600

    of: merge of_node_get(), of_node_put() and of_find_all_nodes()
    
    Merge common code between Sparc, PowerPC and Microblaze.
    
    Sparc differs in the implementation at this point, so this patch uses
    a #ifdef to handle sparc differently for now.  The merging of
    implementations will occur in a later patch
    
    Signed-off-by: Grant Likely <grant.likely@secretlab.ca>
    Acked-by: David S. Miller <davem@davemloft.net>
    Acked-by: Wolfram Sang <w.sang@pengutronix.de>
    Acked-by: Michal Simek <monstr@monstr.eu>
    Acked-by: Stephen Neuendorffer <stephen.neuendorffer@xilinx.com>
    Acked-by: Stephen Rothwell <sfr@canb.auug.org.au>

diff --git a/include/linux/of.h b/include/linux/of.h
index 18e4379b8b7f..4636bba93afa 100644
--- a/include/linux/of.h
+++ b/include/linux/of.h
@@ -79,6 +79,22 @@ set_node_proc_entry(struct device_node *dn, struct proc_dir_entry *de)
 	dn->pde = de;
 }
 
+#if defined(CONFIG_SPARC)
+/* Dummy ref counting routines - to be implemented later */
+static inline struct device_node *of_node_get(struct device_node *node)
+{
+	return node;
+}
+static inline void of_node_put(struct device_node *node)
+{
+}
+
+#else
+extern struct device_node *of_find_all_nodes(struct device_node *prev);
+extern struct device_node *of_node_get(struct device_node *node);
+extern void of_node_put(struct device_node *node);
+#endif
+
 /*
  * OF address retreival & translation
  */

commit b6caf2ad7ce30648b89c1cf40d8f7cf6f4b58033
Author: Grant Likely <grant.likely@secretlab.ca>
Date:   Thu Oct 15 10:58:00 2009 -0600

    of: merge of_read_number() an of_read_ulong()
    
    Merge common code between Microblaze and PowerPC
    
    Signed-off-by: Grant Likely <grant.likely@secretlab.ca>
    Acked-by: David S. Miller <davem@davemloft.net>
    Acked-by: Wolfram Sang <w.sang@pengutronix.de>
    Acked-by: Michal Simek <monstr@monstr.eu>
    Acked-by: Stephen Neuendorffer <stephen.neuendorffer@xilinx.com>
    Acked-by: Stephen Rothwell <sfr@canb.auug.org.au>

diff --git a/include/linux/of.h b/include/linux/of.h
index d5f666290f6b..18e4379b8b7f 100644
--- a/include/linux/of.h
+++ b/include/linux/of.h
@@ -79,6 +79,29 @@ set_node_proc_entry(struct device_node *dn, struct proc_dir_entry *de)
 	dn->pde = de;
 }
 
+/*
+ * OF address retreival & translation
+ */
+
+/* Helper to read a big number; size is in cells (not bytes) */
+static inline u64 of_read_number(const u32 *cell, int size)
+{
+	u64 r = 0;
+	while (size--)
+		r = (r << 32) | *(cell++);
+	return r;
+}
+
+/* Like of_read_number, but we want an unsigned long result */
+#ifdef CONFIG_PPC32
+static inline unsigned long of_read_ulong(const u32 *cell, int size)
+{
+	return cell[size-1];
+}
+#else
+#define of_read_ulong(cell, size)	of_read_number(cell, size)
+#endif
+
 #include <asm/prom.h>
 
 /* flag descriptions */

commit 50436312f47f1fd2bf82c983638fe27ca7e03238
Author: Grant Likely <grant.likely@secretlab.ca>
Date:   Thu Oct 15 10:57:58 2009 -0600

    of: merge of_node_*_flag() and set_node_proc_entry()
    
    Merge common code between PowerPC and Microblaze
    
    Signed-off-by: Grant Likely <grant.likely@secretlab.ca>
    Acked-by: David S. Miller <davem@davemloft.net>
    Acked-by: Wolfram Sang <w.sang@pengutronix.de>
    Acked-by: Michal Simek <monstr@monstr.eu>
    Acked-by: Stephen Neuendorffer <stephen.neuendorffer@xilinx.com>
    Acked-by: Stephen Rothwell <sfr@canb.auug.org.au>

diff --git a/include/linux/of.h b/include/linux/of.h
index a66c1eb31693..d5f666290f6b 100644
--- a/include/linux/of.h
+++ b/include/linux/of.h
@@ -63,6 +63,22 @@ struct device_node {
 #endif
 };
 
+static inline int of_node_check_flag(struct device_node *n, unsigned long flag)
+{
+	return test_bit(flag, &n->_flags);
+}
+
+static inline void of_node_set_flag(struct device_node *n, unsigned long flag)
+{
+	set_bit(flag, &n->_flags);
+}
+
+static inline void
+set_node_proc_entry(struct device_node *dn, struct proc_dir_entry *de)
+{
+	dn->pde = de;
+}
+
 #include <asm/prom.h>
 
 /* flag descriptions */

commit 61e955db539e748cff2b8ea3bf7705259ebe9fb6
Author: Grant Likely <grant.likely@secretlab.ca>
Date:   Thu Oct 15 10:57:51 2009 -0600

    of: Move OF_IS_DYNAMIC and OF_MARK_DYNAMIC macros to of.h
    
    Merge of common code duplicated between Sparc, PowerPC and Microblaze
    
    Signed-off-by: Grant Likely <grant.likely@secretlab.ca>
    Acked-by: David S. Miller <davem@davemloft.net>
    Acked-by: Wolfram Sang <w.sang@pengutronix.de>
    Acked-by: Michal Simek <monstr@monstr.eu>
    Acked-by: Stephen Neuendorffer <stephen.neuendorffer@xilinx.com>
    Acked-by: Stephen Rothwell <sfr@canb.auug.org.au>

diff --git a/include/linux/of.h b/include/linux/of.h
index 65a158dc7257..a66c1eb31693 100644
--- a/include/linux/of.h
+++ b/include/linux/of.h
@@ -69,6 +69,9 @@ struct device_node {
 #define OF_DYNAMIC	1 /* node and properties were allocated via kmalloc */
 #define OF_DETACHED	2 /* node has been detached from the device tree */
 
+#define OF_IS_DYNAMIC(x) test_bit(OF_DYNAMIC, &x->_flags)
+#define OF_MARK_DYNAMIC(x) set_bit(OF_DYNAMIC, &x->_flags)
+
 #define OF_BAD_ADDR	((u64)-1)
 
 extern struct device_node *of_find_node_by_name(struct device_node *from,

commit 6f1924928377bd035a9f64466f91a487c69271d2
Author: Grant Likely <grant.likely@secretlab.ca>
Date:   Thu Oct 15 10:57:49 2009 -0600

    of: merge struct device_node
    
    Merge of common code duplicated between Sparc, PowerPC and Microblaze
    
    Signed-off-by: Grant Likely <grant.likely@secretlab.ca>
    Acked-by: David S. Miller <davem@davemloft.net>
    Acked-by: Wolfram Sang <w.sang@pengutronix.de>
    Acked-by: Michal Simek <monstr@monstr.eu>
    Acked-by: Stephen Neuendorffer <stephen.neuendorffer@xilinx.com>
    Acked-by: Stephen Rothwell <sfr@canb.auug.org.au>

diff --git a/include/linux/of.h b/include/linux/of.h
index 4668b298479a..65a158dc7257 100644
--- a/include/linux/of.h
+++ b/include/linux/of.h
@@ -17,6 +17,7 @@
  */
 #include <linux/types.h>
 #include <linux/bitops.h>
+#include <linux/kref.h>
 #include <linux/mod_devicetable.h>
 
 typedef u32 phandle;
@@ -31,6 +32,37 @@ struct property {
 	unsigned int unique_id;
 };
 
+#if defined(CONFIG_SPARC)
+struct of_irq_controller;
+#endif
+
+struct device_node {
+	const char *name;
+	const char *type;
+	phandle	node;
+#if !defined(CONFIG_SPARC)
+	phandle linux_phandle;
+#endif
+	char	*full_name;
+
+	struct	property *properties;
+	struct	property *deadprops;	/* removed properties */
+	struct	device_node *parent;
+	struct	device_node *child;
+	struct	device_node *sibling;
+	struct	device_node *next;	/* next device of same type */
+	struct	device_node *allnext;	/* next in list of all nodes */
+	struct	proc_dir_entry *pde;	/* this node's proc directory */
+	struct	kref kref;
+	unsigned long _flags;
+	void	*data;
+#if defined(CONFIG_SPARC)
+	char	*path_component_name;
+	unsigned int unique_id;
+	struct of_irq_controller *irq_trans;
+#endif
+};
+
 #include <asm/prom.h>
 
 /* flag descriptions */

commit 731581e6a653f6a68a4d7ba9df6b886a85c7d080
Author: Grant Likely <grant.likely@secretlab.ca>
Date:   Thu Oct 15 10:57:46 2009 -0600

    of: merge phandle, ihandle and struct property
    
    Merge of common code duplicated between Sparc, PowerPC and Microblaze
    
    Signed-off-by: Grant Likely <grant.likely@secretlab.ca>
    Acked-by: David S. Miller <davem@davemloft.net>
    Acked-by: Wolfram Sang <w.sang@pengutronix.de>
    Acked-by: Michal Simek <monstr@monstr.eu>
    Acked-by: Stephen Neuendorffer <stephen.neuendorffer@xilinx.com>
    Acked-by: Stephen Rothwell <sfr@canb.auug.org.au>

diff --git a/include/linux/of.h b/include/linux/of.h
index 7be2d1043c16..4668b298479a 100644
--- a/include/linux/of.h
+++ b/include/linux/of.h
@@ -19,6 +19,18 @@
 #include <linux/bitops.h>
 #include <linux/mod_devicetable.h>
 
+typedef u32 phandle;
+typedef u32 ihandle;
+
+struct property {
+	char	*name;
+	int	length;
+	void	*value;
+	struct property *next;
+	unsigned long _flags;
+	unsigned int unique_id;
+};
+
 #include <asm/prom.h>
 
 /* flag descriptions */

commit 739649c53d7f78f5bf41bdfd1a858ee90c7a687a
Author: Grant Likely <grant.likely@secretlab.ca>
Date:   Sat Apr 25 12:52:40 2009 +0000

    of: add of_parse_phandle() helper for parsing phandle properties
    
    of_parse_phandle() is a helper function to read and parse a phandle
    property and return a pointer to the resulting device_node.
    
    Signed-off-by: Grant Likely <grant.likely@secretlab.ca>
    Acked-by: Andy Fleming <afleming@freescale.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

diff --git a/include/linux/of.h b/include/linux/of.h
index 6a7efa242f5e..7be2d1043c16 100644
--- a/include/linux/of.h
+++ b/include/linux/of.h
@@ -77,6 +77,9 @@ extern int of_n_size_cells(struct device_node *np);
 extern const struct of_device_id *of_match_node(
 	const struct of_device_id *matches, const struct device_node *node);
 extern int of_modalias_node(struct device_node *node, char *modalias, int len);
+extern struct device_node *of_parse_phandle(struct device_node *np,
+					    const char *phandle_name,
+					    int index);
 extern int of_parse_phandles_with_args(struct device_node *np,
 	const char *list_name, const char *cells_name, int index,
 	struct device_node **out_node, const void **out_args);

commit 1e291b14c8f1101b9093434489bd4dc0e03f3d0f
Author: Michael Ellerman <michael@ellerman.id.au>
Date:   Wed Nov 12 18:54:42 2008 +0000

    of: Add helpers for finding device nodes which have a given property
    
    This commit adds a routine for finding a device node which has a
    certain property.  The contents of the property are not taken into
    account, merely the presence or absence of the property.
    
    Based on that routine, we add a for_each_ macro for iterating over all
    nodes that have a certain property.
    
    Signed-off-by: Michael Ellerman <michael@ellerman.id.au>
    Signed-off-by: Paul Mackerras <paulus@samba.org>

diff --git a/include/linux/of.h b/include/linux/of.h
index e2488f5e7cb2..6a7efa242f5e 100644
--- a/include/linux/of.h
+++ b/include/linux/of.h
@@ -57,6 +57,12 @@ extern struct device_node *of_get_next_child(const struct device_node *node,
 	for (child = of_get_next_child(parent, NULL); child != NULL; \
 	     child = of_get_next_child(parent, child))
 
+extern struct device_node *of_find_node_with_property(
+	struct device_node *from, const char *prop_name);
+#define for_each_node_with_property(dn, prop_name) \
+	for (dn = of_find_node_with_property(NULL, prop_name); dn; \
+	     dn = of_find_node_with_property(dn, prop_name))
+
 extern struct property *of_find_property(const struct device_node *np,
 					 const char *name,
 					 int *lenp);

commit 64b60e096fa391c56f93e6216115e6757bf86b7e
Author: Anton Vorontsov <avorontsov@ru.mvista.com>
Date:   Fri Oct 10 04:43:17 2008 +0000

    of: Add new helper of_parse_phandles_with_args()
    
    The helper is factored out of of_get_gpio(). Will be used by the QE
    pin multiplexing functions (they need to parse the gpios = <> too).
    
    Signed-off-by: Anton Vorontsov <avorontsov@ru.mvista.com>
    Signed-off-by: Benjamin Herrenschmidt <benh@kernel.crashing.org>

diff --git a/include/linux/of.h b/include/linux/of.h
index 79886ade070f..e2488f5e7cb2 100644
--- a/include/linux/of.h
+++ b/include/linux/of.h
@@ -71,5 +71,8 @@ extern int of_n_size_cells(struct device_node *np);
 extern const struct of_device_id *of_match_node(
 	const struct of_device_id *matches, const struct device_node *node);
 extern int of_modalias_node(struct device_node *node, char *modalias, int len);
+extern int of_parse_phandles_with_args(struct device_node *np,
+	const char *list_name, const char *cells_name, int index,
+	struct device_node **out_node, const void **out_args);
 
 #endif /* _LINUX_OF_H */

commit 3f07af494dfa6de43137dae430431c9fbf929c0c
Author: Grant Likely <grant.likely@secretlab.ca>
Date:   Fri Jul 25 22:25:13 2008 -0400

    of: adapt of_find_i2c_driver() to be usable by SPI also
    
    SPI has a similar problem as I2C in that it needs to determine an
    appropriate modalias value for each device node.  This patch adapts
    the of_i2c of_find_i2c_driver() function to be usable by of_spi also.
    
    Signed-off-by: Grant Likely <grant.likely@secretlab.ca>

diff --git a/include/linux/of.h b/include/linux/of.h
index 59a61bdc98b6..79886ade070f 100644
--- a/include/linux/of.h
+++ b/include/linux/of.h
@@ -70,5 +70,6 @@ extern int of_n_addr_cells(struct device_node *np);
 extern int of_n_size_cells(struct device_node *np);
 extern const struct of_device_id *of_match_node(
 	const struct of_device_id *matches, const struct device_node *node);
+extern int of_modalias_node(struct device_node *node, char *modalias, int len);
 
 #endif /* _LINUX_OF_H */

commit 834d97d452208279edf11c57eca150360d2dd1d6
Author: Josh Boyer <jwboyer@linux.vnet.ibm.com>
Date:   Thu Mar 27 00:33:14 2008 +1100

    [POWERPC] Add of_device_is_available function
    
    IEEE 1275 defined a standard "status" property to indicate the operational
    status of a device.  The property has four possible values: okay, disabled,
    fail, fail-xxx.  The absence of this property means the operational status
    of the device is unknown or okay.
    
    This adds a function called of_device_is_available that checks the state
    of the status property of a device.  If the property is absent or set to
    either "okay" or "ok", it returns 1.  Otherwise it returns 0.
    
    Signed-off-by: Josh Boyer <jwboyer@linux.vnet.ibm.com>
    Signed-off-by: Paul Mackerras <paulus@samba.org>

diff --git a/include/linux/of.h b/include/linux/of.h
index 6981016dcc25..59a61bdc98b6 100644
--- a/include/linux/of.h
+++ b/include/linux/of.h
@@ -62,6 +62,7 @@ extern struct property *of_find_property(const struct device_node *np,
 					 int *lenp);
 extern int of_device_is_compatible(const struct device_node *device,
 				   const char *);
+extern int of_device_is_available(const struct device_node *device);
 extern const void *of_get_property(const struct device_node *node,
 				const char *name,
 				int *lenp);

commit f4eb010706b6c96c136c7aaa9079159743f33fa8
Author: Michael Ellerman <michael@ellerman.id.au>
Date:   Fri Oct 26 16:54:31 2007 +1000

    [POWERPC] Add of_get_next_parent()
    
    Iterating through a device node's parents is simple enough, but dealing
    with the refcounts properly is a little ugly, and replicating that logic
    is asking for someone to get it wrong or forget it all together, eg:
    
    while (dn != NULL) {
            /* loop body */
            tmp = of_get_parent(dn);
            of_node_put(dn);
            dn = tmp;
    }
    
    So add of_get_next_parent(), inspired by of_get_next_child().  The
    contract is that it returns the parent and drops the reference on the
    current node, this makes the loop look like:
    
    while (dn != NULL) {
            /* loop body */
            dn = of_get_next_parent(dn);
    }
    
    Signed-off-by: Michael Ellerman <michael@ellerman.id.au>
    Acked-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Paul Mackerras <paulus@samba.org>

diff --git a/include/linux/of.h b/include/linux/of.h
index b5f33efcb8e2..6981016dcc25 100644
--- a/include/linux/of.h
+++ b/include/linux/of.h
@@ -50,6 +50,7 @@ extern struct device_node *of_find_matching_node(struct device_node *from,
 extern struct device_node *of_find_node_by_path(const char *path);
 extern struct device_node *of_find_node_by_phandle(phandle handle);
 extern struct device_node *of_get_parent(const struct device_node *node);
+extern struct device_node *of_get_next_parent(struct device_node *node);
 extern struct device_node *of_get_next_child(const struct device_node *node,
 					     struct device_node *prev);
 #define for_each_child_of_node(parent, child) \

commit 283029d16a882539ab0027afd94ac52858d050b2
Author: Grant Likely <grant.likely@secretlab.ca>
Date:   Wed Jan 9 06:20:40 2008 +1100

    [POWERPC] Add of_find_matching_node() helper function
    
    Similar to of_find_compatible_node(), of_find_matching_node() and
    for_each_matching_node() allow you to iterate over the device tree
    looking for specific nodes, except that they take of_device_id
    tables instead of strings.
    
    This also moves of_match_node() from driver/of/device.c to
    driver/of/base.c to colocate it with the of_find_matching_node which
    depends on it.
    
    Signed-off-by: Grant Likely <grant.likely@secretlab.ca>
    Signed-off-by: Paul Mackerras <paulus@samba.org>

diff --git a/include/linux/of.h b/include/linux/of.h
index c65af7bd1e9c..b5f33efcb8e2 100644
--- a/include/linux/of.h
+++ b/include/linux/of.h
@@ -17,6 +17,7 @@
  */
 #include <linux/types.h>
 #include <linux/bitops.h>
+#include <linux/mod_devicetable.h>
 
 #include <asm/prom.h>
 
@@ -41,6 +42,11 @@ extern struct device_node *of_find_compatible_node(struct device_node *from,
 #define for_each_compatible_node(dn, type, compatible) \
 	for (dn = of_find_compatible_node(NULL, type, compatible); dn; \
 	     dn = of_find_compatible_node(dn, type, compatible))
+extern struct device_node *of_find_matching_node(struct device_node *from,
+	const struct of_device_id *matches);
+#define for_each_matching_node(dn, matches) \
+	for (dn = of_find_matching_node(NULL, matches); dn; \
+	     dn = of_find_matching_node(dn, matches))
 extern struct device_node *of_find_node_by_path(const char *path);
 extern struct device_node *of_find_node_by_phandle(phandle handle);
 extern struct device_node *of_get_parent(const struct device_node *node);
@@ -60,5 +66,7 @@ extern const void *of_get_property(const struct device_node *node,
 				int *lenp);
 extern int of_n_addr_cells(struct device_node *np);
 extern int of_n_size_cells(struct device_node *np);
+extern const struct of_device_id *of_match_node(
+	const struct of_device_id *matches, const struct device_node *node);
 
 #endif /* _LINUX_OF_H */

commit aabc08dc662b7acb17ca5706533253ce10c050b1
Author: Michael Ellerman <michael@ellerman.id.au>
Date:   Mon Nov 26 19:03:45 2007 +1100

    [POWERPC] Add for_each_child_of_node() helper for iterating over child nodes
    
    Add for_each_child_of_node() to encapsulate the common idiom of
    iterating over the children of a device_node.
    
    Signed-off-by: Michael Ellerman <michael@ellerman.id.au>
    Acked-by: Stephen Rothwell <sfr@canb.auug.org.au>
    Signed-off-by: Paul Mackerras <paulus@samba.org>

diff --git a/include/linux/of.h b/include/linux/of.h
index 5c39b9270ff7..c65af7bd1e9c 100644
--- a/include/linux/of.h
+++ b/include/linux/of.h
@@ -46,6 +46,10 @@ extern struct device_node *of_find_node_by_phandle(phandle handle);
 extern struct device_node *of_get_parent(const struct device_node *node);
 extern struct device_node *of_get_next_child(const struct device_node *node,
 					     struct device_node *prev);
+#define for_each_child_of_node(parent, child) \
+	for (child = of_get_next_child(parent, NULL); child != NULL; \
+	     child = of_get_next_child(parent, child))
+
 extern struct property *of_find_property(const struct device_node *np,
 					 const char *name,
 					 int *lenp);

commit 1977f032722c27ee3730284582fd3991ad9ac81b
Author: Jiri Slaby <jirislaby@gmail.com>
Date:   Thu Oct 18 23:40:25 2007 -0700

    remove asm/bitops.h includes
    
    remove asm/bitops.h includes
    
    including asm/bitops directly may cause compile errors. don't include it
    and include linux/bitops instead. next patch will deny including asm header
    directly.
    
    Cc: Adrian Bunk <bunk@kernel.org>
    Signed-off-by: Jiri Slaby <jirislaby@gmail.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

diff --git a/include/linux/of.h b/include/linux/of.h
index 6df80e985914..5c39b9270ff7 100644
--- a/include/linux/of.h
+++ b/include/linux/of.h
@@ -16,8 +16,8 @@
  * 2 of the License, or (at your option) any later version.
  */
 #include <linux/types.h>
+#include <linux/bitops.h>
 
-#include <asm/bitops.h>
 #include <asm/prom.h>
 
 /* flag descriptions */

commit 0b8188a44def37f4f8ef01653da199ca3a3e0a2a
Author: Stephen Rothwell <sfr@canb.auug.org.au>
Date:   Wed Aug 15 16:45:15 2007 +1000

    [POWERPC] Remove get_property and device_is_compatible
    
    They were only needed for backwards compatibility and all in tree uses
    have now been changed.
    
    Signed-off-by: Stephen Rothwell <sfr@canb.auug.org.au>
    Acked-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Paul Mackerras <paulus@samba.org>

diff --git a/include/linux/of.h b/include/linux/of.h
index 47734ffd9745..6df80e985914 100644
--- a/include/linux/of.h
+++ b/include/linux/of.h
@@ -54,7 +54,6 @@ extern int of_device_is_compatible(const struct device_node *device,
 extern const void *of_get_property(const struct device_node *node,
 				const char *name,
 				int *lenp);
-#define get_property(a, b, c)	of_get_property((a), (b), (c))
 extern int of_n_addr_cells(struct device_node *np);
 extern int of_n_size_cells(struct device_node *np);
 

commit 76c1ce7870fd9b05431da1bbd47fdafcc029a25b
Author: Stephen Rothwell <sfr@canb.auug.org.au>
Date:   Tue May 1 16:19:07 2007 +1000

    Split out common parts of prom.h
    
    This creates linux/of.h and includes asm/prom.h from it.
    
    We also include linux/of.h from asm/prom.h while we transition.
    
    Signed-off-by: Stephen Rothwell <sfr@canb.auug.org.au>
    Acked-by: Paul Mackerras <paulus@samba.org>
    Acked-by: David S. Miller <davem@davemloft.net>

diff --git a/include/linux/of.h b/include/linux/of.h
new file mode 100644
index 000000000000..47734ffd9745
--- /dev/null
+++ b/include/linux/of.h
@@ -0,0 +1,61 @@
+#ifndef _LINUX_OF_H
+#define _LINUX_OF_H
+/*
+ * Definitions for talking to the Open Firmware PROM on
+ * Power Macintosh and other computers.
+ *
+ * Copyright (C) 1996-2005 Paul Mackerras.
+ *
+ * Updates for PPC64 by Peter Bergner & David Engebretsen, IBM Corp.
+ * Updates for SPARC64 by David S. Miller
+ * Derived from PowerPC and Sparc prom.h files by Stephen Rothwell, IBM Corp.
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License
+ * as published by the Free Software Foundation; either version
+ * 2 of the License, or (at your option) any later version.
+ */
+#include <linux/types.h>
+
+#include <asm/bitops.h>
+#include <asm/prom.h>
+
+/* flag descriptions */
+#define OF_DYNAMIC	1 /* node and properties were allocated via kmalloc */
+#define OF_DETACHED	2 /* node has been detached from the device tree */
+
+#define OF_BAD_ADDR	((u64)-1)
+
+extern struct device_node *of_find_node_by_name(struct device_node *from,
+	const char *name);
+#define for_each_node_by_name(dn, name) \
+	for (dn = of_find_node_by_name(NULL, name); dn; \
+	     dn = of_find_node_by_name(dn, name))
+extern struct device_node *of_find_node_by_type(struct device_node *from,
+	const char *type);
+#define for_each_node_by_type(dn, type) \
+	for (dn = of_find_node_by_type(NULL, type); dn; \
+	     dn = of_find_node_by_type(dn, type))
+extern struct device_node *of_find_compatible_node(struct device_node *from,
+	const char *type, const char *compat);
+#define for_each_compatible_node(dn, type, compatible) \
+	for (dn = of_find_compatible_node(NULL, type, compatible); dn; \
+	     dn = of_find_compatible_node(dn, type, compatible))
+extern struct device_node *of_find_node_by_path(const char *path);
+extern struct device_node *of_find_node_by_phandle(phandle handle);
+extern struct device_node *of_get_parent(const struct device_node *node);
+extern struct device_node *of_get_next_child(const struct device_node *node,
+					     struct device_node *prev);
+extern struct property *of_find_property(const struct device_node *np,
+					 const char *name,
+					 int *lenp);
+extern int of_device_is_compatible(const struct device_node *device,
+				   const char *);
+extern const void *of_get_property(const struct device_node *node,
+				const char *name,
+				int *lenp);
+#define get_property(a, b, c)	of_get_property((a), (b), (c))
+extern int of_n_addr_cells(struct device_node *np);
+extern int of_n_size_cells(struct device_node *np);
+
+#endif /* _LINUX_OF_H */
