commit b24413180f5600bcb3bb70fbed5cf186b60864bd
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Wed Nov 1 15:07:57 2017 +0100

    License cleanup: add SPDX GPL-2.0 license identifier to files with no license
    
    Many source files in the tree are missing licensing information, which
    makes it harder for compliance tools to determine the correct license.
    
    By default all files without license information are under the default
    license of the kernel, which is GPL version 2.
    
    Update the files which contain no license information with the 'GPL-2.0'
    SPDX license identifier.  The SPDX identifier is a legally binding
    shorthand, which can be used instead of the full boiler plate text.
    
    This patch is based on work done by Thomas Gleixner and Kate Stewart and
    Philippe Ombredanne.
    
    How this work was done:
    
    Patches were generated and checked against linux-4.14-rc6 for a subset of
    the use cases:
     - file had no licensing information it it.
     - file was a */uapi/* one with no licensing information in it,
     - file was a */uapi/* one with existing licensing information,
    
    Further patches will be generated in subsequent months to fix up cases
    where non-standard license headers were used, and references to license
    had to be inferred by heuristics based on keywords.
    
    The analysis to determine which SPDX License Identifier to be applied to
    a file was done in a spreadsheet of side by side results from of the
    output of two independent scanners (ScanCode & Windriver) producing SPDX
    tag:value files created by Philippe Ombredanne.  Philippe prepared the
    base worksheet, and did an initial spot review of a few 1000 files.
    
    The 4.13 kernel was the starting point of the analysis with 60,537 files
    assessed.  Kate Stewart did a file by file comparison of the scanner
    results in the spreadsheet to determine which SPDX license identifier(s)
    to be applied to the file. She confirmed any determination that was not
    immediately clear with lawyers working with the Linux Foundation.
    
    Criteria used to select files for SPDX license identifier tagging was:
     - Files considered eligible had to be source code files.
     - Make and config files were included as candidates if they contained >5
       lines of source
     - File already had some variant of a license header in it (even if <5
       lines).
    
    All documentation files were explicitly excluded.
    
    The following heuristics were used to determine which SPDX license
    identifiers to apply.
    
     - when both scanners couldn't find any license traces, file was
       considered to have no license information in it, and the top level
       COPYING file license applied.
    
       For non */uapi/* files that summary was:
    
       SPDX license identifier                            # files
       ---------------------------------------------------|-------
       GPL-2.0                                              11139
    
       and resulted in the first patch in this series.
    
       If that file was a */uapi/* path one, it was "GPL-2.0 WITH
       Linux-syscall-note" otherwise it was "GPL-2.0".  Results of that was:
    
       SPDX license identifier                            # files
       ---------------------------------------------------|-------
       GPL-2.0 WITH Linux-syscall-note                        930
    
       and resulted in the second patch in this series.
    
     - if a file had some form of licensing information in it, and was one
       of the */uapi/* ones, it was denoted with the Linux-syscall-note if
       any GPL family license was found in the file or had no licensing in
       it (per prior point).  Results summary:
    
       SPDX license identifier                            # files
       ---------------------------------------------------|------
       GPL-2.0 WITH Linux-syscall-note                       270
       GPL-2.0+ WITH Linux-syscall-note                      169
       ((GPL-2.0 WITH Linux-syscall-note) OR BSD-2-Clause)    21
       ((GPL-2.0 WITH Linux-syscall-note) OR BSD-3-Clause)    17
       LGPL-2.1+ WITH Linux-syscall-note                      15
       GPL-1.0+ WITH Linux-syscall-note                       14
       ((GPL-2.0+ WITH Linux-syscall-note) OR BSD-3-Clause)    5
       LGPL-2.0+ WITH Linux-syscall-note                       4
       LGPL-2.1 WITH Linux-syscall-note                        3
       ((GPL-2.0 WITH Linux-syscall-note) OR MIT)              3
       ((GPL-2.0 WITH Linux-syscall-note) AND MIT)             1
    
       and that resulted in the third patch in this series.
    
     - when the two scanners agreed on the detected license(s), that became
       the concluded license(s).
    
     - when there was disagreement between the two scanners (one detected a
       license but the other didn't, or they both detected different
       licenses) a manual inspection of the file occurred.
    
     - In most cases a manual inspection of the information in the file
       resulted in a clear resolution of the license that should apply (and
       which scanner probably needed to revisit its heuristics).
    
     - When it was not immediately clear, the license identifier was
       confirmed with lawyers working with the Linux Foundation.
    
     - If there was any question as to the appropriate license identifier,
       the file was flagged for further research and to be revisited later
       in time.
    
    In total, over 70 hours of logged manual review was done on the
    spreadsheet to determine the SPDX license identifiers to apply to the
    source files by Kate, Philippe, Thomas and, in some cases, confirmation
    by lawyers working with the Linux Foundation.
    
    Kate also obtained a third independent scan of the 4.13 code base from
    FOSSology, and compared selected files where the other two scanners
    disagreed against that SPDX file, to see if there was new insights.  The
    Windriver scanner is based on an older version of FOSSology in part, so
    they are related.
    
    Thomas did random spot checks in about 500 files from the spreadsheets
    for the uapi headers and agreed with SPDX license identifier in the
    files he inspected. For the non-uapi files Thomas did random spot checks
    in about 15000 files.
    
    In initial set of patches against 4.14-rc6, 3 files were found to have
    copy/paste license identifier errors, and have been fixed to reflect the
    correct identifier.
    
    Additionally Philippe spent 10 hours this week doing a detailed manual
    inspection and review of the 12,461 patched files from the initial patch
    version early this week with:
     - a full scancode scan run, collecting the matched texts, detected
       license ids and scores
     - reviewing anything where there was a license detected (about 500+
       files) to ensure that the applied SPDX license was correct
     - reviewing anything where there was no detection but the patch license
       was not GPL-2.0 WITH Linux-syscall-note to ensure that the applied
       SPDX license was correct
    
    This produced a worksheet with 20 files needing minor correction.  This
    worksheet was then exported into 3 different .csv files for the
    different types of files to be modified.
    
    These .csv files were then reviewed by Greg.  Thomas wrote a script to
    parse the csv files and add the proper SPDX tag to the file, in the
    format that the file expected.  This script was further refined by Greg
    based on the output to detect more types of files automatically and to
    distinguish between header and source .c files (which need different
    comment types.)  Finally Greg ran the script using the .csv files to
    generate the patches.
    
    Reviewed-by: Kate Stewart <kstewart@linuxfoundation.org>
    Reviewed-by: Philippe Ombredanne <pombredanne@nexb.com>
    Reviewed-by: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/include/xen/features.h b/include/xen/features.h
index 27292d4d2a6a..e4cb464386a9 100644
--- a/include/xen/features.h
+++ b/include/xen/features.h
@@ -1,3 +1,4 @@
+/* SPDX-License-Identifier: GPL-2.0 */
 /******************************************************************************
  * features.h
  *

commit 5ead97c84fa7d63a6a7a2f4e9f18f452bd109045
Author: Jeremy Fitzhardinge <jeremy@xensource.com>
Date:   Tue Jul 17 18:37:04 2007 -0700

    xen: Core Xen implementation
    
    This patch is a rollup of all the core pieces of the Xen
    implementation, including:
     - booting and setup
     - pagetable setup
     - privileged instructions
     - segmentation
     - interrupt flags
     - upcalls
     - multicall batching
    
    BOOTING AND SETUP
    
    The vmlinux image is decorated with ELF notes which tell the Xen
    domain builder what the kernel's requirements are; the domain builder
    then constructs the address space accordingly and starts the kernel.
    
    Xen has its own entrypoint for the kernel (contained in an ELF note).
    The ELF notes are set up by xen-head.S, which is included into head.S.
    In principle it could be linked separately, but it seems to provoke
    lots of binutils bugs.
    
    Because the domain builder starts the kernel in a fairly sane state
    (32-bit protected mode, paging enabled, flat segments set up), there's
    not a lot of setup needed before starting the kernel proper.  The main
    steps are:
      1. Install the Xen paravirt_ops, which is simply a matter of a
         structure assignment.
      2. Set init_mm to use the Xen-supplied pagetables (analogous to the
         head.S generated pagetables in a native boot).
      3. Reserve address space for Xen, since it takes a chunk at the top
         of the address space for its own use.
      4. Call start_kernel()
    
    PAGETABLE SETUP
    
    Once we hit the main kernel boot sequence, it will end up calling back
    via paravirt_ops to set up various pieces of Xen specific state.  One
    of the critical things which requires a bit of extra care is the
    construction of the initial init_mm pagetable.  Because Xen places
    tight constraints on pagetables (an active pagetable must always be
    valid, and must always be mapped read-only to the guest domain), we
    need to be careful when constructing the new pagetable to keep these
    constraints in mind.  It turns out that the easiest way to do this is
    use the initial Xen-provided pagetable as a template, and then just
    insert new mappings for memory where a mapping doesn't already exist.
    
    This means that during pagetable setup, it uses a special version of
    xen_set_pte which ignores any attempt to remap a read-only page as
    read-write (since Xen will map its own initial pagetable as RO), but
    lets other changes to the ptes happen, so that things like NX are set
    properly.
    
    PRIVILEGED INSTRUCTIONS AND SEGMENTATION
    
    When the kernel runs under Xen, it runs in ring 1 rather than ring 0.
    This means that it is more privileged than user-mode in ring 3, but it
    still can't run privileged instructions directly.  Non-performance
    critical instructions are dealt with by taking a privilege exception
    and trapping into the hypervisor and emulating the instruction, but
    more performance-critical instructions have their own specific
    paravirt_ops.  In many cases we can avoid having to do any hypercalls
    for these instructions, or the Xen implementation is quite different
    from the normal native version.
    
    The privileged instructions fall into the broad classes of:
      Segmentation: setting up the GDT and the GDT entries, LDT,
         TLS and so on.  Xen doesn't allow the GDT to be directly
         modified; all GDT updates are done via hypercalls where the new
         entries can be validated.  This is important because Xen uses
         segment limits to prevent the guest kernel from damaging the
         hypervisor itself.
      Traps and exceptions: Xen uses a special format for trap entrypoints,
         so when the kernel wants to set an IDT entry, it needs to be
         converted to the form Xen expects.  Xen sets int 0x80 up specially
         so that the trap goes straight from userspace into the guest kernel
         without going via the hypervisor.  sysenter isn't supported.
      Kernel stack: The esp0 entry is extracted from the tss and provided to
         Xen.
      TLB operations: the various TLB calls are mapped into corresponding
         Xen hypercalls.
      Control registers: all the control registers are privileged.  The most
         important is cr3, which points to the base of the current pagetable,
         and we handle it specially.
    
    Another instruction we treat specially is CPUID, even though its not
    privileged.  We want to control what CPU features are visible to the
    rest of the kernel, and so CPUID ends up going into a paravirt_op.
    Xen implements this mainly to disable the ACPI and APIC subsystems.
    
    INTERRUPT FLAGS
    
    Xen maintains its own separate flag for masking events, which is
    contained within the per-cpu vcpu_info structure.  Because the guest
    kernel runs in ring 1 and not 0, the IF flag in EFLAGS is completely
    ignored (and must be, because even if a guest domain disables
    interrupts for itself, it can't disable them overall).
    
    (A note on terminology: "events" and interrupts are effectively
    synonymous.  However, rather than using an "enable flag", Xen uses a
    "mask flag", which blocks event delivery when it is non-zero.)
    
    There are paravirt_ops for each of cli/sti/save_fl/restore_fl, which
    are implemented to manage the Xen event mask state.  The only thing
    worth noting is that when events are unmasked, we need to explicitly
    see if there's a pending event and call into the hypervisor to make
    sure it gets delivered.
    
    UPCALLS
    
    Xen needs a couple of upcall (or callback) functions to be implemented
    by each guest.  One is the event upcalls, which is how events
    (interrupts, effectively) are delivered to the guests.  The other is
    the failsafe callback, which is used to report errors in either
    reloading a segment register, or caused by iret.  These are
    implemented in i386/kernel/entry.S so they can jump into the normal
    iret_exc path when necessary.
    
    MULTICALL BATCHING
    
    Xen provides a multicall mechanism, which allows multiple hypercalls
    to be issued at once in order to mitigate the cost of trapping into
    the hypervisor.  This is particularly useful for context switches,
    since the 4-5 hypercalls they would normally need (reload cr3, update
    TLS, maybe update LDT) can be reduced to one.  This patch implements a
    generic batching mechanism for hypercalls, which gets used in many
    places in the Xen code.
    
    Signed-off-by: Jeremy Fitzhardinge <jeremy@xensource.com>
    Signed-off-by: Chris Wright <chrisw@sous-sol.org>
    Cc: Ian Pratt <ian.pratt@xensource.com>
    Cc: Christian Limpach <Christian.Limpach@cl.cam.ac.uk>
    Cc: Adrian Bunk <bunk@stusta.de>

diff --git a/include/xen/features.h b/include/xen/features.h
new file mode 100644
index 000000000000..27292d4d2a6a
--- /dev/null
+++ b/include/xen/features.h
@@ -0,0 +1,23 @@
+/******************************************************************************
+ * features.h
+ *
+ * Query the features reported by Xen.
+ *
+ * Copyright (c) 2006, Ian Campbell
+ */
+
+#ifndef __XEN_FEATURES_H__
+#define __XEN_FEATURES_H__
+
+#include <xen/interface/features.h>
+
+void xen_setup_features(void);
+
+extern u8 xen_features[XENFEAT_NR_SUBMAPS * 32];
+
+static inline int xen_feature(int flag)
+{
+	return xen_features[flag];
+}
+
+#endif /* __ASM_XEN_FEATURES_H__ */
