commit 386c82a70319d42dba4f1b30e5e7076f2b4d8c2f
Author: Yiwei Zhang <zzyiwei@google.com>
Date:   Tue Apr 28 15:08:25 2020 -0700

    gpu/trace: Minor comment updates for gpu_mem_total tracepoint
    
    This change updates the improper comment for the 'size' attribute in the
    tracepoint definition. Most gfx drivers pre-fault in physical pages
    instead of making virtual allocations. So we drop the 'Virtual' keyword
    here and leave this to the implementations.
    
    Link: http://lkml.kernel.org/r/20200428220825.169606-1-zzyiwei@google.com
    
    Signed-off-by: Yiwei Zhang <zzyiwei@google.com>
    Signed-off-by: Steven Rostedt (VMware) <rostedt@goodmis.org>

diff --git a/include/trace/events/gpu_mem.h b/include/trace/events/gpu_mem.h
index 1897822a9150..26d871f96e94 100644
--- a/include/trace/events/gpu_mem.h
+++ b/include/trace/events/gpu_mem.h
@@ -24,7 +24,7 @@
  *
  * @pid: Put 0 for global total, while positive pid for process total.
  *
- * @size: Virtual size of the allocation in bytes.
+ * @size: Size of the allocation in bytes.
  *
  */
 TRACE_EVENT(gpu_mem_total,

commit bbd9d05618a6d608c72640b1d3d651a75913456a
Author: Yiwei Zhang <zzyiwei@google.com>
Date:   Mon Mar 2 15:50:44 2020 -0800

    gpu/trace: add a gpu total memory usage tracepoint
    
    This change adds the below gpu memory tracepoint:
    gpu_mem/gpu_mem_total: track global or proc gpu memory total usages
    
    Per process tracking of total gpu memory usage in the gem layer is not
    appropriate and hard to implement with trivial overhead. So for the gfx
    device driver layer to track total gpu memory usage both globally and
    per process in an easy and uniform way is to integrate the tracepoint in
    this patch to the underlying varied implementations of gpu memory
    tracking system from vendors.
    
    Putting this tracepoint in the common trace events can not only help
    wean the gfx drivers off of debugfs but also greatly help the downstream
    Android gpu vendors because debugfs is to be deprecated in the upcoming
    Android release. Then the gpu memory tracking of both Android kernel and
    the upstream linux kernel can stay closely, which can benefit the whole
    kernel eco-system in the long term.
    
    Link: http://lkml.kernel.org/r/20200302235044.59163-1-zzyiwei@google.com
    
    Acked-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Yiwei Zhang <zzyiwei@google.com>
    Signed-off-by: Steven Rostedt (VMware) <rostedt@goodmis.org>

diff --git a/include/trace/events/gpu_mem.h b/include/trace/events/gpu_mem.h
new file mode 100644
index 000000000000..1897822a9150
--- /dev/null
+++ b/include/trace/events/gpu_mem.h
@@ -0,0 +1,57 @@
+/* SPDX-License-Identifier: GPL-2.0 */
+/*
+ * GPU memory trace points
+ *
+ * Copyright (C) 2020 Google, Inc.
+ */
+
+#undef TRACE_SYSTEM
+#define TRACE_SYSTEM gpu_mem
+
+#if !defined(_TRACE_GPU_MEM_H) || defined(TRACE_HEADER_MULTI_READ)
+#define _TRACE_GPU_MEM_H
+
+#include <linux/tracepoint.h>
+
+/*
+ * The gpu_memory_total event indicates that there's an update to either the
+ * global or process total gpu memory counters.
+ *
+ * This event should be emitted whenever the kernel device driver allocates,
+ * frees, imports, unimports memory in the GPU addressable space.
+ *
+ * @gpu_id: This is the gpu id.
+ *
+ * @pid: Put 0 for global total, while positive pid for process total.
+ *
+ * @size: Virtual size of the allocation in bytes.
+ *
+ */
+TRACE_EVENT(gpu_mem_total,
+
+	TP_PROTO(uint32_t gpu_id, uint32_t pid, uint64_t size),
+
+	TP_ARGS(gpu_id, pid, size),
+
+	TP_STRUCT__entry(
+		__field(uint32_t, gpu_id)
+		__field(uint32_t, pid)
+		__field(uint64_t, size)
+	),
+
+	TP_fast_assign(
+		__entry->gpu_id = gpu_id;
+		__entry->pid = pid;
+		__entry->size = size;
+	),
+
+	TP_printk("gpu_id=%u pid=%u size=%llu",
+		__entry->gpu_id,
+		__entry->pid,
+		__entry->size)
+);
+
+#endif /* _TRACE_GPU_MEM_H */
+
+/* This part must be outside protection */
+#include <trace/define_trace.h>
