commit bfcb7e1555ecc157cea23e35057002e3055e90a6
Author: Brian Masney <masneyb@onstation.org>
Date:   Sun Sep 1 17:30:37 2019 -0400

    soc: qcom: ocmem: add missing includes
    
    The kbuild bot reported the following compiler errors when compiling on
    MIPS with CONFIG_QCOM_OCMEM disabled:
    
      In file included from <command-line>:0:0:
      >> include/soc/qcom/ocmem.h:43:49: warning: 'struct device' declared
         inside parameter list will not be visible outside of this
         definition or declaration
          static inline struct ocmem *of_get_ocmem(struct device *dev)
                                                          ^~~~~~
         include/soc/qcom/ocmem.h: In function 'of_get_ocmem':
      >> include/soc/qcom/ocmem.h:45:9: error: implicit declaration of
         function 'ERR_PTR' [-Werror=implicit-function-declaration]
           return ERR_PTR(-ENODEV);
                  ^~~~~~~
      >> include/soc/qcom/ocmem.h:45:18: error: 'ENODEV' undeclared (first
         use in this function)
           return ERR_PTR(-ENODEV);
    
    Add the proper includes to fix the compiler errors.
    
    Signed-off-by: Brian Masney <masneyb@onstation.org>
    Reported-by: kbuild test robot <lkp@intel.com>
    Tested-by: Gabriel Francisco <frc.gabriel@gmail.com>
    Signed-off-by: Rob Clark <robdclark@chromium.org>

diff --git a/include/soc/qcom/ocmem.h b/include/soc/qcom/ocmem.h
index a0ae336ba78b..02a8bc2677b1 100644
--- a/include/soc/qcom/ocmem.h
+++ b/include/soc/qcom/ocmem.h
@@ -9,6 +9,9 @@
  * Copyright (C) 2015 Red Hat. Author: Rob Clark <robdclark@gmail.com>
  */
 
+#include <linux/device.h>
+#include <linux/err.h>
+
 #ifndef __OCMEM_H__
 #define __OCMEM_H__
 

commit 88c1e9404f1deee02e52d13aae3d9ee2cabd66f5
Author: Brian Masney <masneyb@onstation.org>
Date:   Fri Aug 23 05:16:35 2019 -0700

    soc: qcom: add OCMEM driver
    
    The OCMEM driver handles allocation and configuration of the On Chip
    MEMory that is present on some Snapdragon SoCs. Devices which have
    OCMEM do not have GMEM inside the GPU core, so the GPU must instead
    use OCMEM to be functional. Since the GPU is currently the only OCMEM
    user with an upstream driver, this is just a minimal implementation
    sufficient for statically allocating to the GPU it's chunk of OCMEM.
    
    This driver currently does not read the gmu-sram node that is described
    in the device tree bindings. The starting memory address of the GPU's
    reserved memory region is hardcoded to zero to match what the hardware
    expects. The driver can be updated to read the reserved memory regions
    from device tree once other users of OCMEM are added upstream.
    
    Signed-off-by: Brian Masney <masneyb@onstation.org>
    Co-developed-by: Rob Clark <robdclark@gmail.com>
    Signed-off-by: Rob Clark <robdclark@gmail.com>
    Reviewed-by: Bjorn Andersson <bjorn.andersson@linaro.org>
    Tested-by: Gabriel Francisco <frc.gabrielgmail.com>
    Signed-off-by: Rob Clark <robdclark@chromium.org>

diff --git a/include/soc/qcom/ocmem.h b/include/soc/qcom/ocmem.h
new file mode 100644
index 000000000000..a0ae336ba78b
--- /dev/null
+++ b/include/soc/qcom/ocmem.h
@@ -0,0 +1,62 @@
+/* SPDX-License-Identifier: GPL-2.0-only */
+/*
+ * The On Chip Memory (OCMEM) allocator allows various clients to allocate
+ * memory from OCMEM based on performance, latency and power requirements.
+ * This is typically used by the GPU, camera/video, and audio components on
+ * some Snapdragon SoCs.
+ *
+ * Copyright (C) 2019 Brian Masney <masneyb@onstation.org>
+ * Copyright (C) 2015 Red Hat. Author: Rob Clark <robdclark@gmail.com>
+ */
+
+#ifndef __OCMEM_H__
+#define __OCMEM_H__
+
+enum ocmem_client {
+	/* GMEM clients */
+	OCMEM_GRAPHICS = 0x0,
+	/*
+	 * TODO add more once ocmem_allocate() is clever enough to
+	 * deal with multiple clients.
+	 */
+	OCMEM_CLIENT_MAX,
+};
+
+struct ocmem;
+
+struct ocmem_buf {
+	unsigned long offset;
+	unsigned long addr;
+	unsigned long len;
+};
+
+#if IS_ENABLED(CONFIG_QCOM_OCMEM)
+
+struct ocmem *of_get_ocmem(struct device *dev);
+struct ocmem_buf *ocmem_allocate(struct ocmem *ocmem, enum ocmem_client client,
+				 unsigned long size);
+void ocmem_free(struct ocmem *ocmem, enum ocmem_client client,
+		struct ocmem_buf *buf);
+
+#else /* IS_ENABLED(CONFIG_QCOM_OCMEM) */
+
+static inline struct ocmem *of_get_ocmem(struct device *dev)
+{
+	return ERR_PTR(-ENODEV);
+}
+
+static inline struct ocmem_buf *ocmem_allocate(struct ocmem *ocmem,
+					       enum ocmem_client client,
+					       unsigned long size)
+{
+	return ERR_PTR(-ENODEV);
+}
+
+static inline void ocmem_free(struct ocmem *ocmem, enum ocmem_client client,
+			      struct ocmem_buf *buf)
+{
+}
+
+#endif /* IS_ENABLED(CONFIG_QCOM_OCMEM) */
+
+#endif /* __OCMEM_H__ */
