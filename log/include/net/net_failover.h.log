commit cfc80d9a11635404a40199a1c9471c96890f3f74
Author: Sridhar Samudrala <sridhar.samudrala@intel.com>
Date:   Thu May 24 09:55:15 2018 -0700

    net: Introduce net_failover driver
    
    The net_failover driver provides an automated failover mechanism via APIs
    to create and destroy a failover master netdev and manages a primary and
    standby slave netdevs that get registered via the generic failover
    infrastructure.
    
    The failover netdev acts a master device and controls 2 slave devices. The
    original paravirtual interface gets registered as 'standby' slave netdev and
    a passthru/vf device with the same MAC gets registered as 'primary' slave
    netdev. Both 'standby' and 'failover' netdevs are associated with the same
    'pci' device. The user accesses the network interface via 'failover' netdev.
    The 'failover' netdev chooses 'primary' netdev as default for transmits when
    it is available with link up and running.
    
    This can be used by paravirtual drivers to enable an alternate low latency
    datapath. It also enables hypervisor controlled live migration of a VM with
    direct attached VF by failing over to the paravirtual datapath when the VF
    is unplugged.
    
    Signed-off-by: Sridhar Samudrala <sridhar.samudrala@intel.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

diff --git a/include/net/net_failover.h b/include/net/net_failover.h
new file mode 100644
index 000000000000..b12a1c469d1c
--- /dev/null
+++ b/include/net/net_failover.h
@@ -0,0 +1,40 @@
+/* SPDX-License-Identifier: GPL-2.0 */
+/* Copyright (c) 2018, Intel Corporation. */
+
+#ifndef _NET_FAILOVER_H
+#define _NET_FAILOVER_H
+
+#include <net/failover.h>
+
+/* failover state */
+struct net_failover_info {
+	/* primary netdev with same MAC */
+	struct net_device __rcu *primary_dev;
+
+	/* standby netdev */
+	struct net_device __rcu *standby_dev;
+
+	/* primary netdev stats */
+	struct rtnl_link_stats64 primary_stats;
+
+	/* standby netdev stats */
+	struct rtnl_link_stats64 standby_stats;
+
+	/* aggregated stats */
+	struct rtnl_link_stats64 failover_stats;
+
+	/* spinlock while updating stats */
+	spinlock_t stats_lock;
+};
+
+struct failover *net_failover_create(struct net_device *standby_dev);
+void net_failover_destroy(struct failover *failover);
+
+#define FAILOVER_VLAN_FEATURES	(NETIF_F_HW_CSUM | NETIF_F_SG | \
+				 NETIF_F_FRAGLIST | NETIF_F_ALL_TSO | \
+				 NETIF_F_HIGHDMA | NETIF_F_LRO)
+
+#define FAILOVER_ENC_FEATURES	(NETIF_F_HW_CSUM | NETIF_F_SG | \
+				 NETIF_F_RXCSUM | NETIF_F_ALL_TSO)
+
+#endif /* _NET_FAILOVER_H */
