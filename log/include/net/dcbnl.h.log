commit 9952f6918daa4ab5fc81307a9f90e31a4df3b200
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Tue May 28 10:10:04 2019 -0700

    treewide: Replace GPLv2 boilerplate/reference with SPDX - rule 201
    
    Based on 1 normalized pattern(s):
    
      this program is free software you can redistribute it and or modify
      it under the terms and conditions of the gnu general public license
      version 2 as published by the free software foundation this program
      is distributed in the hope it will be useful but without any
      warranty without even the implied warranty of merchantability or
      fitness for a particular purpose see the gnu general public license
      for more details you should have received a copy of the gnu general
      public license along with this program if not see http www gnu org
      licenses
    
    extracted by the scancode license scanner the SPDX license identifier
    
      GPL-2.0-only
    
    has been chosen to replace the boilerplate/reference in 228 file(s).
    
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Reviewed-by: Allison Randal <allison@lohutok.net>
    Reviewed-by: Steve Winslow <swinslow@gmail.com>
    Reviewed-by: Richard Fontana <rfontana@redhat.com>
    Reviewed-by: Alexios Zavras <alexios.zavras@intel.com>
    Cc: linux-spdx@vger.kernel.org
    Link: https://lkml.kernel.org/r/20190528171438.107155473@linutronix.de
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/include/net/dcbnl.h b/include/net/dcbnl.h
index e22a8a3c089b..e4ad58c4062c 100644
--- a/include/net/dcbnl.h
+++ b/include/net/dcbnl.h
@@ -1,18 +1,7 @@
+/* SPDX-License-Identifier: GPL-2.0-only */
 /*
  * Copyright (c) 2008, Intel Corporation.
  *
- * This program is free software; you can redistribute it and/or modify it
- * under the terms and conditions of the GNU General Public License,
- * version 2, as published by the Free Software Foundation.
- *
- * This program is distributed in the hope it will be useful, but WITHOUT
- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
- * more details.
- *
- * You should have received a copy of the GNU General Public License along with
- * this program; if not, see <http://www.gnu.org/licenses/>.
- *
  * Author: Lucy Liu <lucy.liu@intel.com>
  */
 

commit b67c540b8a987e365dc548e5b2ddf023946e3d63
Author: Petr Machata <petrm@mellanox.com>
Date:   Fri Jul 27 15:26:56 2018 +0300

    net: dcb: Add priority-to-DSCP map getters
    
    On ingress, a network device such as a switch assigns to packets
    priority based on various criteria. Common options include interpreting
    PCP and DSCP fields according to user configuration. When a packet
    egresses the switch, a reverse process may rewrite PCP and/or DSCP
    values according to packet priority.
    
    The following three functions support a) obtaining a DSCP-to-priority
    map or vice versa, and b) finding default-priority entries in APP
    database.
    
    The DCB subsystem supports for APP entries a very generous M:N mapping
    between priorities and protocol identifiers. Understandably,
    several (say) DSCP values can map to the same priority. But this
    asymmetry holds the other way around as well--one priority can map to
    several DSCP values. For this reason, the following functions operate in
    terms of bitmaps, with ones in positions that match some APP entry.
    
    - dcb_ieee_getapp_dscp_prio_mask_map() to compute for a given netdevice
      a map of DSCP-to-priority-mask, which gives for each DSCP value a
      bitmap of priorities related to that DSCP value by APP, along the
      lines of dcb_ieee_getapp_mask().
    
    - dcb_ieee_getapp_prio_dscp_mask_map() similarly to compute for a given
      netdevice a map from priorities to a bitmap of DSCPs.
    
    - dcb_ieee_getapp_default_prio_mask() which finds all default-priority
      rules for a given port in APP database, and returns a mask of
      priorities allowed by these default-priority rules.
    
    Signed-off-by: Petr Machata <petrm@mellanox.com>
    Signed-off-by: Ido Schimmel <idosch@mellanox.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

diff --git a/include/net/dcbnl.h b/include/net/dcbnl.h
index 0e5e91be2d30..e22a8a3c089b 100644
--- a/include/net/dcbnl.h
+++ b/include/net/dcbnl.h
@@ -34,6 +34,19 @@ int dcb_ieee_setapp(struct net_device *, struct dcb_app *);
 int dcb_ieee_delapp(struct net_device *, struct dcb_app *);
 u8 dcb_ieee_getapp_mask(struct net_device *, struct dcb_app *);
 
+struct dcb_ieee_app_prio_map {
+	u64 map[IEEE_8021QAZ_MAX_TCS];
+};
+void dcb_ieee_getapp_prio_dscp_mask_map(const struct net_device *dev,
+					struct dcb_ieee_app_prio_map *p_map);
+
+struct dcb_ieee_app_dscp_map {
+	u8 map[64];
+};
+void dcb_ieee_getapp_dscp_prio_mask_map(const struct net_device *dev,
+					struct dcb_ieee_app_dscp_map *p_map);
+u8 dcb_ieee_getapp_default_prio_mask(const struct net_device *dev);
+
 int dcbnl_ieee_notify(struct net_device *dev, int event, int cmd,
 		      u32 seq, u32 pid);
 int dcbnl_cee_notify(struct net_device *dev, int event, int cmd,

commit e549f6f9c098067a99e9de8ac84f5cc2c07ae5c6
Author: Huy Nguyen <huyn@mellanox.com>
Date:   Thu Feb 22 11:57:10 2018 -0600

    net/dcb: Add dcbnl buffer attribute
    
    In this patch, we add dcbnl buffer attribute to allow user
    change the NIC's buffer configuration such as priority
    to buffer mapping and buffer size of individual buffer.
    
    This attribute combined with pfc attribute allows advanced user to
    fine tune the qos setting for specific priority queue. For example,
    user can give dedicated buffer for one or more priorities or user
    can give large buffer to certain priorities.
    
    The dcb buffer configuration will be controlled by lldptool.
    lldptool -T -i eth2 -V BUFFER prio 0,2,5,7,1,2,3,6
      maps priorities 0,1,2,3,4,5,6,7 to receive buffer 0,2,5,7,1,2,3,6
    lldptool -T -i eth2 -V BUFFER size 87296,87296,0,87296,0,0,0,0
      sets receive buffer size for buffer 0,1,2,3,4,5,6,7 respectively
    
    After discussion on mailing list with Jakub, Jiri, Ido and John, we agreed to
    choose dcbnl over devlink interface since this feature is intended to set
    port attributes which are governed by the netdev instance of that port, where
    devlink API is more suitable for global ASIC configurations.
    
    We present an use case scenario where dcbnl buffer attribute configured
    by advance user helps reduce the latency of messages of different sizes.
    
    Scenarios description:
    On ConnectX-5, we run latency sensitive traffic with
    small/medium message sizes ranging from 64B to 256KB and bandwidth sensitive
    traffic with large messages sizes 512KB and 1MB. We group small, medium,
    and large message sizes to their own pfc enables priorities as follow.
      Priorities 1 & 2 (64B, 256B and 1KB)
      Priorities 3 & 4 (4KB, 8KB, 16KB, 64KB, 128KB and 256KB)
      Priorities 5 & 6 (512KB and 1MB)
    
    By default, ConnectX-5 maps all pfc enabled priorities to a single
    lossless fixed buffer size of 50% of total available buffer space. The
    other 50% is assigned to lossy buffer. Using dcbnl buffer attribute,
    we create three equal size lossless buffers. Each buffer has 25% of total
    available buffer space. Thus, the lossy buffer size reduces to 25%. Priority
    to lossless  buffer mappings are set as follow.
      Priorities 1 & 2 on lossless buffer #1
      Priorities 3 & 4 on lossless buffer #2
      Priorities 5 & 6 on lossless buffer #3
    
    We observe improvements in latency for small and medium message sizes
    as follows. Please note that the large message sizes bandwidth performance is
    reduced but the total bandwidth remains the same.
      256B message size (42 % latency reduction)
      4K message size (21% latency reduction)
      64K message size (16% latency reduction)
    
    CC: Ido Schimmel <idosch@idosch.org>
    CC: Jakub Kicinski <jakub.kicinski@netronome.com>
    CC: Jiri Pirko <jiri@resnulli.us>
    CC: Or Gerlitz <gerlitz.or@gmail.com>
    CC: Parav Pandit <parav@mellanox.com>
    CC: Aron Silverton <aron.silverton@oracle.com>
    Signed-off-by: Huy Nguyen <huyn@mellanox.com>
    Reviewed-by: Parav Pandit <parav@mellanox.com>
    Signed-off-by: Saeed Mahameed <saeedm@mellanox.com>

diff --git a/include/net/dcbnl.h b/include/net/dcbnl.h
index 207d9ba1f92c..0e5e91be2d30 100644
--- a/include/net/dcbnl.h
+++ b/include/net/dcbnl.h
@@ -101,6 +101,10 @@ struct dcbnl_rtnl_ops {
 	/* CEE peer */
 	int (*cee_peer_getpg) (struct net_device *, struct cee_pg *);
 	int (*cee_peer_getpfc) (struct net_device *, struct cee_pfc *);
+
+	/* buffer settings */
+	int (*dcbnl_getbuffer)(struct net_device *, struct dcbnl_buffer *);
+	int (*dcbnl_setbuffer)(struct net_device *, struct dcbnl_buffer *);
 };
 
 #endif /* __NET_DCBNL_H__ */

commit c93682477bd861744589215515a63b81fdbd8948
Author: Shani Michaeli <shanim@mellanox.com>
Date:   Thu Mar 5 20:16:11 2015 +0200

    net/dcb: Add IEEE QCN attribute
    
    As specified in 802.1Qau spec. Add this optional attribute to the
    DCB netlink layer. To allow for application to use the new attribute,
    NIC drivers should implement and register the  callbacks ieee_getqcn,
    ieee_setqcn and ieee_getqcnstats.
    
    The QCN attribute holds a set of parameters for management, and
    a set of statistics to provide informative data on Congestion-Control
    defined by this spec.
    
    Signed-off-by: Shani Michaeli <shanim@mellanox.com>
    Signed-off-by: Shachar Raindel <raindel@mellanox.com>
    Signed-off-by: Or Gerlitz <ogerlitz@mellanox.com>
    Acked-by: John Fastabend <john.r.fastabend@intel.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

diff --git a/include/net/dcbnl.h b/include/net/dcbnl.h
index 597b88a94332..207d9ba1f92c 100644
--- a/include/net/dcbnl.h
+++ b/include/net/dcbnl.h
@@ -49,6 +49,9 @@ struct dcbnl_rtnl_ops {
 	int (*ieee_setets) (struct net_device *, struct ieee_ets *);
 	int (*ieee_getmaxrate) (struct net_device *, struct ieee_maxrate *);
 	int (*ieee_setmaxrate) (struct net_device *, struct ieee_maxrate *);
+	int (*ieee_getqcn) (struct net_device *, struct ieee_qcn *);
+	int (*ieee_setqcn) (struct net_device *, struct ieee_qcn *);
+	int (*ieee_getqcnstats) (struct net_device *, struct ieee_qcn_stats *);
 	int (*ieee_getpfc) (struct net_device *, struct ieee_pfc *);
 	int (*ieee_setpfc) (struct net_device *, struct ieee_pfc *);
 	int (*ieee_getapp) (struct net_device *, struct dcb_app *);

commit c2659479f7865fb538493089bce3dd3d2abf90b0
Author: Anish Bhatt <anish@chelsio.com>
Date:   Wed Jul 16 22:32:39 2014 -0700

    Update setapp/getapp prototypes in dcbnl_rtnl_ops to return int instead of u8
    
    v2: fixed issue with checking return of dcbnl_rtnl_ops->getapp()
    
    Signed-off-by: Anish Bhatt <anish@chelsio.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

diff --git a/include/net/dcbnl.h b/include/net/dcbnl.h
index a975edf21b22..597b88a94332 100644
--- a/include/net/dcbnl.h
+++ b/include/net/dcbnl.h
@@ -81,8 +81,8 @@ struct dcbnl_rtnl_ops {
 	void (*setbcncfg)(struct net_device *, int, u32);
 	void (*getbcnrp)(struct net_device *, int, u8 *);
 	void (*setbcnrp)(struct net_device *, int, u8);
-	u8   (*setapp)(struct net_device *, u8, u16, u8);
-	u8   (*getapp)(struct net_device *, u8, u16);
+	int  (*setapp)(struct net_device *, u8, u16, u8);
+	int  (*getapp)(struct net_device *, u8, u16);
 	u8   (*getfeatcfg)(struct net_device *, int, u8 *);
 	u8   (*setfeatcfg)(struct net_device *, int, u8);
 

commit a6227e26d946bc56df47ca5fe418660a07ef8288
Author: Jeff Kirsher <jeffrey.t.kirsher@intel.com>
Date:   Fri Dec 6 09:13:40 2013 -0800

    include/net/: Fix FSF address in file headers
    
    Several files refer to an old address for the Free Software Foundation
    in the file header comment.  Resolve by replacing the address with
    the URL <http://www.gnu.org/licenses/> so that we do not have to keep
    updating the header comments anytime the address changes.
    
    Signed-off-by: Jeff Kirsher <jeffrey.t.kirsher@intel.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

diff --git a/include/net/dcbnl.h b/include/net/dcbnl.h
index fc5d5dcebb00..a975edf21b22 100644
--- a/include/net/dcbnl.h
+++ b/include/net/dcbnl.h
@@ -11,8 +11,7 @@
  * more details.
  *
  * You should have received a copy of the GNU General Public License along with
- * this program; if not, write to the Free Software Foundation, Inc., 59 Temple
- * Place - Suite 330, Boston, MA 02111-1307 USA.
+ * this program; if not, see <http://www.gnu.org/licenses/>.
  *
  * Author: Lucy Liu <lucy.liu@intel.com>
  */

commit 08f10affe45051e18e0d8291c0a53aecef1b8a14
Author: Amir Vadai <amirv@mellanox.com>
Date:   Wed Apr 4 21:33:30 2012 +0000

    net/dcb: Add an optional max rate attribute
    
    Although not specified in 8021Qaz spec, it could be useful to enable drivers
    whose HW supports setting a rate limit for an ETS TC. This patch adds this
    optional attribute to DCB netlink. To use it, drivers should implement and
    register the callbacks ieee_setmaxrate and ieee_getmaxrate. The units are 64
    bits long and specified in Kbps to enable usage over both slow and very fast
    networks.
    
    Signed-off-by: Amir Vadai <amirv@mellanox.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

diff --git a/include/net/dcbnl.h b/include/net/dcbnl.h
index f55c980d8e23..fc5d5dcebb00 100644
--- a/include/net/dcbnl.h
+++ b/include/net/dcbnl.h
@@ -48,6 +48,8 @@ struct dcbnl_rtnl_ops {
 	/* IEEE 802.1Qaz std */
 	int (*ieee_getets) (struct net_device *, struct ieee_ets *);
 	int (*ieee_setets) (struct net_device *, struct ieee_ets *);
+	int (*ieee_getmaxrate) (struct net_device *, struct ieee_maxrate *);
+	int (*ieee_setmaxrate) (struct net_device *, struct ieee_maxrate *);
 	int (*ieee_getpfc) (struct net_device *, struct ieee_pfc *);
 	int (*ieee_setpfc) (struct net_device *, struct ieee_pfc *);
 	int (*ieee_getapp) (struct net_device *, struct dcb_app *);

commit 2b88f2de30510c0f4e623d3cd5fcd85cdb70b51f
Author: John Fastabend <john.r.fastabend@intel.com>
Date:   Fri Feb 10 03:19:41 2012 +0000

    net: dcb: getnumtcs()/setnumtcs() should return an int
    
    {g|s}etnumtcs() today returns a u8 that is only used by the DCB code
    to verify no error occurred. Today the driver implementations return
    negative error codes which end up being non-zero so the logic works
    out but triggers some sparse warnings.
    
    To fix the sparse warnings convert the return value to an int.
    
    CC: Eilon Greenstein <eilong@broadcom.com>
    Reported-by: Dan Carpenter <dan.carpenter@oracle.com>
    Signed-off-by: John Fastabend <john.r.fastabend@intel.com>
    Tested-by: Ross Brattain <ross.b.brattain@intel.com>
    Signed-off-by: Jeff Kirsher <jeffrey.t.kirsher@intel.com>

diff --git a/include/net/dcbnl.h b/include/net/dcbnl.h
index 2cd66d0be348..f55c980d8e23 100644
--- a/include/net/dcbnl.h
+++ b/include/net/dcbnl.h
@@ -72,8 +72,8 @@ struct dcbnl_rtnl_ops {
 	void (*getpfccfg)(struct net_device *, int, u8 *);
 	u8   (*setall)(struct net_device *);
 	u8   (*getcap)(struct net_device *, int, u8 *);
-	u8   (*getnumtcs)(struct net_device *, int, u8 *);
-	u8   (*setnumtcs)(struct net_device *, int, u8);
+	int  (*getnumtcs)(struct net_device *, int, u8 *);
+	int  (*setnumtcs)(struct net_device *, int, u8);
 	u8   (*getpfcstate)(struct net_device *);
 	void (*setpfcstate)(struct net_device *, u8);
 	void (*getbcncfg)(struct net_device *, int, u32 *);

commit 6bd0e1cb10b6d14dda4a8806d0a2f4f0bbf01931
Author: John Fastabend <john.r.fastabend@intel.com>
Date:   Thu Oct 6 08:52:38 2011 +0000

    dcb: add DCBX mode to event notifier attributes
    
    Add DCBX mode to event notifiers so listeners can learn
    currently enabled mode.
    
    Signed-off-by: John Fastabend <john.r.fastabend@intel.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

diff --git a/include/net/dcbnl.h b/include/net/dcbnl.h
index 263aa3ae76f5..2cd66d0be348 100644
--- a/include/net/dcbnl.h
+++ b/include/net/dcbnl.h
@@ -26,6 +26,7 @@ struct dcb_app_type {
 	int	ifindex;
 	struct dcb_app	  app;
 	struct list_head  list;
+	u8	dcbx;
 };
 
 int dcb_setapp(struct net_device *, struct dcb_app *);

commit e290ed81307ca7d92675f0d9c683add693c2f377
Author: Mark Rustad <mark.d.rustad@intel.com>
Date:   Thu Oct 6 08:52:33 2011 +0000

    dcb: Use ifindex instead of ifname
    
    Use ifindex instead of ifname in the DCB app ring. This makes for a smaller
    data structure and faster comparisons. It also avoids possible issues when
    a net device is renamed.
    
    Signed-off-by: Mark Rustad <mark.d.rustad@intel.com>
    Signed-off-by: John Fastabend <john.r.fastabend@intel.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

diff --git a/include/net/dcbnl.h b/include/net/dcbnl.h
index f5aa39997f0b..263aa3ae76f5 100644
--- a/include/net/dcbnl.h
+++ b/include/net/dcbnl.h
@@ -23,7 +23,7 @@
 #include <linux/dcbnl.h>
 
 struct dcb_app_type {
-	char		  name[IFNAMSIZ];
+	int	ifindex;
 	struct dcb_app	  app;
 	struct list_head  list;
 };

commit 5b7f7626743e0912958981343b47ac0ab2206b1c
Author: Shmulik Ravid <shmulikr@broadcom.com>
Date:   Tue Jul 5 06:16:25 2011 +0000

    dcbnl: Add CEE notification
    
    This patch add an unsolicited notification of the DCBX negotiated
    parameters for the CEE flavor of the DCBX protocol. The notification
    message is identical to the aggregated CEE get operation and holds all
    the pertinent local and peer information. The notification routine is
    exported so it can be invoked by drivers supporting an embedded DCBX
    stack.
    
    Signed-off-by: Shmulik Ravid <shmulikr@broadcom.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

diff --git a/include/net/dcbnl.h b/include/net/dcbnl.h
index d5bbb7977577..f5aa39997f0b 100644
--- a/include/net/dcbnl.h
+++ b/include/net/dcbnl.h
@@ -34,7 +34,10 @@ int dcb_ieee_setapp(struct net_device *, struct dcb_app *);
 int dcb_ieee_delapp(struct net_device *, struct dcb_app *);
 u8 dcb_ieee_getapp_mask(struct net_device *, struct dcb_app *);
 
-int dcbnl_notify(struct net_device *dev, int event, int cmd, u32 seq, u32 pid);
+int dcbnl_ieee_notify(struct net_device *dev, int event, int cmd,
+		      u32 seq, u32 pid);
+int dcbnl_cee_notify(struct net_device *dev, int event, int cmd,
+		     u32 seq, u32 pid);
 
 /*
  * Ops struct for the netlink callbacks.  Used by DCB-enabled drivers through

commit ab6baf980b095c70a56c5eb2f58166aef8a0edc8
Author: John Fastabend <john.r.fastabend@intel.com>
Date:   Tue Jun 21 07:34:58 2011 +0000

    dcb: fix return type on dcb_setapp()
    
    Incorrect return type on dcb_setapp() this routine
    returns negative error codes. All call sites of
    dcb_setapp() assign the return value to an int already
    so no need to update drivers.
    
    Signed-off-by: John Fastabend <john.r.fastabend@intel.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

diff --git a/include/net/dcbnl.h b/include/net/dcbnl.h
index c14fd9483e46..d5bbb7977577 100644
--- a/include/net/dcbnl.h
+++ b/include/net/dcbnl.h
@@ -28,7 +28,7 @@ struct dcb_app_type {
 	struct list_head  list;
 };
 
-u8 dcb_setapp(struct net_device *, struct dcb_app *);
+int dcb_setapp(struct net_device *, struct dcb_app *);
 u8 dcb_getapp(struct net_device *, struct dcb_app *);
 int dcb_ieee_setapp(struct net_device *, struct dcb_app *);
 int dcb_ieee_delapp(struct net_device *, struct dcb_app *);

commit a364c8cf80251849bab207be8c9e66253c8ca8f8
Author: John Fastabend <john.r.fastabend@intel.com>
Date:   Tue Jun 21 07:34:53 2011 +0000

    dcb: Add dcb_ieee_getapp_mask() for drivers to query APP settings
    
    With multiple APP entries per selector and protocol drivers
    or stacks may want to pick a specific value or stripe traffic
    across many priorities. Also if an APP entry in use is
    deleted the stack/driver may want to choose from the existing
    APP entries.
    
    To facilitate this and avoid having duplicate code to walk
    the APP ring provide a routine dcb_ieee_getapp_mask() to
    return a u8 bitmask of all priorities set for the specified
    selector and protocol. This routine and bitmask is a helper
    for DCB kernel users.
    
    Signed-off-by: John Fastabend <john.r.fastabend@intel.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

diff --git a/include/net/dcbnl.h b/include/net/dcbnl.h
index 62a268531d4a..c14fd9483e46 100644
--- a/include/net/dcbnl.h
+++ b/include/net/dcbnl.h
@@ -32,6 +32,7 @@ u8 dcb_setapp(struct net_device *, struct dcb_app *);
 u8 dcb_getapp(struct net_device *, struct dcb_app *);
 int dcb_ieee_setapp(struct net_device *, struct dcb_app *);
 int dcb_ieee_delapp(struct net_device *, struct dcb_app *);
+u8 dcb_ieee_getapp_mask(struct net_device *, struct dcb_app *);
 
 int dcbnl_notify(struct net_device *dev, int event, int cmd, u32 seq, u32 pid);
 

commit f9ae7e4b515c4d56baf6e0e84ebee2e03ae57a25
Author: John Fastabend <john.r.fastabend@intel.com>
Date:   Tue Jun 21 07:34:48 2011 +0000

    dcb: Add ieee_dcb_delapp() and dcb op to delete app entry
    
    Now that we allow multiple IEEE App entries we need a way
    to remove specific entries. To do this add the ieee_dcb_delapp()
    routine.
    
    Additionaly drivers may need to remove the APP entry from
    their firmware tables. Add dcb ops routine to handle this.
    
    Signed-off-by: John Fastabend <john.r.fastabend@intel.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

diff --git a/include/net/dcbnl.h b/include/net/dcbnl.h
index c53a4e06a16a..62a268531d4a 100644
--- a/include/net/dcbnl.h
+++ b/include/net/dcbnl.h
@@ -31,6 +31,7 @@ struct dcb_app_type {
 u8 dcb_setapp(struct net_device *, struct dcb_app *);
 u8 dcb_getapp(struct net_device *, struct dcb_app *);
 int dcb_ieee_setapp(struct net_device *, struct dcb_app *);
+int dcb_ieee_delapp(struct net_device *, struct dcb_app *);
 
 int dcbnl_notify(struct net_device *dev, int event, int cmd, u32 seq, u32 pid);
 
@@ -46,6 +47,7 @@ struct dcbnl_rtnl_ops {
 	int (*ieee_setpfc) (struct net_device *, struct ieee_pfc *);
 	int (*ieee_getapp) (struct net_device *, struct dcb_app *);
 	int (*ieee_setapp) (struct net_device *, struct dcb_app *);
+	int (*ieee_delapp) (struct net_device *, struct dcb_app *);
 	int (*ieee_peer_getets) (struct net_device *, struct ieee_ets *);
 	int (*ieee_peer_getpfc) (struct net_device *, struct ieee_pfc *);
 

commit b6db2174c59ef1e72f7bd63e0f105b1a2d7f18d3
Author: John Fastabend <john.r.fastabend@intel.com>
Date:   Tue Jun 21 07:34:42 2011 +0000

    dcb: Add ieee_dcb_setapp() to be used for IEEE 802.1Qaz APP data
    
    This adds a setapp routine for IEEE802.1Qaz encoded APP data types.
    The IEEE 802.1Qaz spec encodes the priority bits differently and
    allows for multiple APP data entries of the same selector and
    protocol. Trying to force these to use the same set routines was
    becoming tedious. Furthermore, userspace could probably enforce
    the correct semantics, but expecting drivers to do this seems
    error prone in the firmware case.
    
    For these reasons add ieee_dcb_setapp() that understands the
    IEEE 802.1Qaz encoded form.
    
    Signed-off-by: John Fastabend <john.r.fastabend@intel.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

diff --git a/include/net/dcbnl.h b/include/net/dcbnl.h
index b3cf10d9b828..c53a4e06a16a 100644
--- a/include/net/dcbnl.h
+++ b/include/net/dcbnl.h
@@ -30,6 +30,7 @@ struct dcb_app_type {
 
 u8 dcb_setapp(struct net_device *, struct dcb_app *);
 u8 dcb_getapp(struct net_device *, struct dcb_app *);
+int dcb_ieee_setapp(struct net_device *, struct dcb_app *);
 
 int dcbnl_notify(struct net_device *dev, int event, int cmd, u32 seq, u32 pid);
 

commit 314b4778ed579f29b6d46ba90dbf31314c13805f
Author: John Fastabend <john.r.fastabend@intel.com>
Date:   Tue Jun 21 07:34:37 2011 +0000

    net: dcbnl, add multicast group for DCB
    
    Now that dcbnl is being used in many cases by more
    than a single agent it is beneficial to be notified
    when some entity either driver or user space has
    changed the DCB attributes.
    
    Today applications either end up polling the interface
    or relying on a user space database to maintain the DCB
    state and post events. Polling is a poor solution for
    obvious reasons. And relying on a user space database
    has its own downside. Namely it has created strange
    boot dependencies requiring the database be populated
    before any applications dependent on DCB attributes
    starts or the application goes into a polling loop.
    Populating the database requires negotiating link
    setting with the peer and can take anywhere from less
    than a second up to a few seconds depending on the switch
    implementation.
    
    Perhaps more importantly if another application or an
    embedded agent sets a DCB link attribute the database
    has no way of knowing other than polling the kernel.
    This prevents applications from responding quickly to
    changes in link events which at least in the FCoE case
    and probably any other protocols expecting a lossless
    link may result in IO errors.
    
    By adding a multicast group for DCB we have clean way
    to disseminate kernel DCB link attributes up to user
    space. Avoiding the need for user space to maintain
    a coherant database and disperse events that potentially
    do not reflect the current link state.
    
    Signed-off-by: John Fastabend <john.r.fastabend@intel.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

diff --git a/include/net/dcbnl.h b/include/net/dcbnl.h
index e5983c9053dc..b3cf10d9b828 100644
--- a/include/net/dcbnl.h
+++ b/include/net/dcbnl.h
@@ -31,6 +31,8 @@ struct dcb_app_type {
 u8 dcb_setapp(struct net_device *, struct dcb_app *);
 u8 dcb_getapp(struct net_device *, struct dcb_app *);
 
+int dcbnl_notify(struct net_device *dev, int event, int cmd, u32 seq, u32 pid);
+
 /*
  * Ops struct for the netlink callbacks.  Used by DCB-enabled drivers through
  * the netdevice struct.

commit dc6ed1df5a5f84e45e77e2acb6fd99b995414956
Author: Shmulik Ravid <shmulikr@broadcom.com>
Date:   Sun Feb 27 05:04:38 2011 +0000

    dcbnl: add support for retrieving peer configuration - cee
    
    This patch adds the support for retrieving the remote or peer DCBX
    configuration via dcbnl for embedded DCBX stacks supporting the CEE DCBX
    standard.
    
    Signed-off-by: Shmulik Ravid <shmulikr@broadcom.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

diff --git a/include/net/dcbnl.h b/include/net/dcbnl.h
index 7b7180e692ef..e5983c9053dc 100644
--- a/include/net/dcbnl.h
+++ b/include/net/dcbnl.h
@@ -84,6 +84,9 @@ struct dcbnl_rtnl_ops {
 			       u16 *);
 	int (*peer_getapptable)(struct net_device *, struct dcb_app *);
 
+	/* CEE peer */
+	int (*cee_peer_getpg) (struct net_device *, struct cee_pg *);
+	int (*cee_peer_getpfc) (struct net_device *, struct cee_pfc *);
 };
 
 #endif /* __NET_DCBNL_H__ */

commit eed84713bc47ce2f7d675914f297ad9b6227a587
Author: Shmulik Ravid <shmulikr@broadcom.com>
Date:   Sun Feb 27 05:04:31 2011 +0000

    dcbnl: add support for retrieving peer configuration - ieee
    
    These 2 patches add the support for retrieving the remote or peer DCBX
    configuration via dcbnl for embedded DCBX stacks. The peer configuration
    is part of the DCBX MIB and is useful for debugging and diagnostics of
    the overall DCB configuration. The first patch add this support for IEEE
    802.1Qaz standard the second patch add the same support for the older
    CEE standard. Diff for v2 - the peer-app-info is CEE specific.
    
    Signed-off-by: Shmulik Ravid <shmulikr@broadcom.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

diff --git a/include/net/dcbnl.h b/include/net/dcbnl.h
index a8e7852b10ab..7b7180e692ef 100644
--- a/include/net/dcbnl.h
+++ b/include/net/dcbnl.h
@@ -43,6 +43,8 @@ struct dcbnl_rtnl_ops {
 	int (*ieee_setpfc) (struct net_device *, struct ieee_pfc *);
 	int (*ieee_getapp) (struct net_device *, struct dcb_app *);
 	int (*ieee_setapp) (struct net_device *, struct dcb_app *);
+	int (*ieee_peer_getets) (struct net_device *, struct ieee_ets *);
+	int (*ieee_peer_getpfc) (struct net_device *, struct ieee_pfc *);
 
 	/* CEE std */
 	u8   (*getstate)(struct net_device *);
@@ -77,6 +79,10 @@ struct dcbnl_rtnl_ops {
 	u8   (*getdcbx)(struct net_device *);
 	u8   (*setdcbx)(struct net_device *, u8);
 
+	/* peer apps */
+	int (*peer_getappinfo)(struct net_device *, struct dcb_peer_app_info *,
+			       u16 *);
+	int (*peer_getapptable)(struct net_device *, struct dcb_app *);
 
 };
 

commit ea45fe4e176a42d2396878f530cfdc8265bef37b
Author: Shmulik Ravid <shmulikr@broadcom.com>
Date:   Thu Dec 30 06:26:55 2010 +0000

    dcbnl: adding DCBX feature flags get-set
    
    Adding a pair of set-get routines to dcbnl for setting the negotiation
    flags of the various DCB features. Conforms to the CEE flavor of DCBX
    The user sets these flags (enable, advertise, willing) for each feature
    to be used by the DCBX engine. The 'get' routine returns which of the
    features is enabled after the negotiation.
    
    This patch is dependent on the following patches:
    [net-next-2.6 PATCH 1/3] dcbnl: add support for ieee8021Qaz attributes
    [net-next-2.6 PATCH 2/3] dcbnl: add appliction tlv handlers
    [net-next-2.6 PATCH 3/3] net_dcb: add application notifiers
    
    Signed-off-by: Shmulik Ravid <shmulikr@broadcom.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

diff --git a/include/net/dcbnl.h b/include/net/dcbnl.h
index c65347b3cbbf..a8e7852b10ab 100644
--- a/include/net/dcbnl.h
+++ b/include/net/dcbnl.h
@@ -70,11 +70,14 @@ struct dcbnl_rtnl_ops {
 	void (*setbcnrp)(struct net_device *, int, u8);
 	u8   (*setapp)(struct net_device *, u8, u16, u8);
 	u8   (*getapp)(struct net_device *, u8, u16);
+	u8   (*getfeatcfg)(struct net_device *, int, u8 *);
+	u8   (*setfeatcfg)(struct net_device *, int, u8);
 
 	/* DCBX configuration */
 	u8   (*getdcbx)(struct net_device *);
 	u8   (*setdcbx)(struct net_device *, u8);
 
+
 };
 
 #endif /* __NET_DCBNL_H__ */

commit 6241b6259b16aa390ff4bf50f520685b3801200b
Author: Shmulik Ravid <shmulikr@broadcom.com>
Date:   Thu Dec 30 06:26:48 2010 +0000

    dcbnl: adding DCBX engine capability
    
    Adding an optional DCBX capability and a pair for get-set routines for
    setting the device DCBX mode. The DCBX capability is a bit field of
    supported attributes. The user is expected to set the DCBX mode with a
    subset of the advertised attributes.
    
    This patch is dependent on the following patches:
    [net-next-2.6 PATCH 1/3] dcbnl: add support for ieee8021Qaz attributes
    [net-next-2.6 PATCH 2/3] dcbnl: add appliction tlv handlers
    [net-next-2.6 PATCH 3/3] net_dcb: add application notifiers
    
    Signed-off-by: Shmulik Ravid <shmulikr@broadcom.com>
    Acked-by: John Fastabend <john.r.fastabend@intel.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

diff --git a/include/net/dcbnl.h b/include/net/dcbnl.h
index ab7d623a2793..c65347b3cbbf 100644
--- a/include/net/dcbnl.h
+++ b/include/net/dcbnl.h
@@ -70,6 +70,11 @@ struct dcbnl_rtnl_ops {
 	void (*setbcnrp)(struct net_device *, int, u8);
 	u8   (*setapp)(struct net_device *, u8, u16, u8);
 	u8   (*getapp)(struct net_device *, u8, u16);
+
+	/* DCBX configuration */
+	u8   (*getdcbx)(struct net_device *);
+	u8   (*setdcbx)(struct net_device *, u8);
+
 };
 
 #endif /* __NET_DCBNL_H__ */

commit 9ab933ab2cc80f04690d6aa385b1110075c5e507
Author: John Fastabend <john.r.fastabend@intel.com>
Date:   Thu Dec 30 09:26:31 2010 +0000

    dcbnl: add appliction tlv handlers
    
    This patch adds application tlv handlers. Networking stacks
    may use the application priority to set the skb priority of
    their stack using the negoatiated dcbx priority.
    
    This patch provides the dcb_{get|set}app() routines for the
    stack to query these parameters. Notice lower layer drivers
    can use the dcbnl_ops routines if additional handling is
    needed. Perhaps in the firmware case for example
    
    Signed-off-by: John Fastabend <john.r.fastabend@intel.com>
    Signed-off-by: Shmulik Ravid <shmulikr@broadcom.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

diff --git a/include/net/dcbnl.h b/include/net/dcbnl.h
index e2d841e963b3..ab7d623a2793 100644
--- a/include/net/dcbnl.h
+++ b/include/net/dcbnl.h
@@ -22,6 +22,15 @@
 
 #include <linux/dcbnl.h>
 
+struct dcb_app_type {
+	char		  name[IFNAMSIZ];
+	struct dcb_app	  app;
+	struct list_head  list;
+};
+
+u8 dcb_setapp(struct net_device *, struct dcb_app *);
+u8 dcb_getapp(struct net_device *, struct dcb_app *);
+
 /*
  * Ops struct for the netlink callbacks.  Used by DCB-enabled drivers through
  * the netdevice struct.

commit 3e29027af43728c2a91fe3f735ab2822edaf54a8
Author: John Fastabend <john.r.fastabend@intel.com>
Date:   Thu Dec 30 09:25:46 2010 +0000

    dcbnl: add support for ieee8021Qaz attributes
    
    The IEEE8021Qaz is the IEEE standard version of CEE. The
    standard has had enough significant changes from the CEE
    version that many of the CEE attributes have no meaning
    in the new spec or do not easily map to IEEE standards.
    
    Rather then attempt to create a complicated mapping
    between CEE and IEEE standards this patch adds a nested
    IEEE attribute to the list of DCB attributes. The policy
    is,
    
            [DCB_ATTR_IFNAME]
            [DCB_ATTR_STATE]
            ...
            [DCB_ATTR_IEEE]
                    [DCB_ATTR_IEEE_ETS]
                    [DCB_ATTR_IEEE_PFC]
                    [DCB_ATTR_IEEE_APP_TABLE]
                            [DCB_ATTR_IEEE_APP]
                            ...
    
    The following dcbnl_rtnl_ops routines were added to handle
    the IEEE standard,
    
            int (*ieee_getets) (struct net_device *, struct ieee_ets *);
            int (*ieee_setets) (struct net_device *, struct ieee_ets *);
            int (*ieee_getpfc) (struct net_device *, struct ieee_pfc *);
            int (*ieee_setpfc) (struct net_device *, struct ieee_pfc *);
            int (*ieee_getapp) (struct net_device *, struct dcb_app *);
            int (*ieee_setapp) (struct net_device *, struct dcb_app *);
    
    Signed-off-by: John Fastabend <john.r.fastabend@intel.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

diff --git a/include/net/dcbnl.h b/include/net/dcbnl.h
index b36ac7e0914d..e2d841e963b3 100644
--- a/include/net/dcbnl.h
+++ b/include/net/dcbnl.h
@@ -20,11 +20,22 @@
 #ifndef __NET_DCBNL_H__
 #define __NET_DCBNL_H__
 
+#include <linux/dcbnl.h>
+
 /*
  * Ops struct for the netlink callbacks.  Used by DCB-enabled drivers through
  * the netdevice struct.
  */
 struct dcbnl_rtnl_ops {
+	/* IEEE 802.1Qaz std */
+	int (*ieee_getets) (struct net_device *, struct ieee_ets *);
+	int (*ieee_setets) (struct net_device *, struct ieee_ets *);
+	int (*ieee_getpfc) (struct net_device *, struct ieee_pfc *);
+	int (*ieee_setpfc) (struct net_device *, struct ieee_pfc *);
+	int (*ieee_getapp) (struct net_device *, struct dcb_app *);
+	int (*ieee_setapp) (struct net_device *, struct dcb_app *);
+
+	/* CEE std */
 	u8   (*getstate)(struct net_device *);
 	u8   (*setstate)(struct net_device *, u8);
 	void (*getpermhwaddr)(struct net_device *, u8 *);

commit 7114323b1761bdf787ed79323a4a13f787878295
Author: Yi Zou <yi.zou@intel.com>
Date:   Mon Aug 31 12:32:55 2009 +0000

    dcbnl: Add support for setapp/getapp to netdev dcbnl_rtnl_ops
    
    Adds support of dcbnl setapp/getapp to dcbnl_rtnl_ops in netdev to allow
    LLDs to implement their corresponding dcbnl setapp/getapp ops to support
    the IEEE 802.1Q DCBX setapp/getapp commands.
    
    Signed-off-by: Yi Zou <yi.zou@intel.com>
    Acked-by: Peter P Waskiewicz Jr <peter.p.waskiewicz.jr@intel.com>
    Signed-off-by: Jeff Kirsher <jeffrey.t.kirsher@intel.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

diff --git a/include/net/dcbnl.h b/include/net/dcbnl.h
index 775cfc8055be..b36ac7e0914d 100644
--- a/include/net/dcbnl.h
+++ b/include/net/dcbnl.h
@@ -48,6 +48,8 @@ struct dcbnl_rtnl_ops {
 	void (*setbcncfg)(struct net_device *, int, u32);
 	void (*getbcnrp)(struct net_device *, int, u8 *);
 	void (*setbcnrp)(struct net_device *, int, u8);
+	u8   (*setapp)(struct net_device *, u8, u16, u8);
+	u8   (*getapp)(struct net_device *, u8, u16);
 };
 
 #endif /* __NET_DCBNL_H__ */

commit 1486a61ebcd2711532f8163d30babc40e11e7b40
Author: Don Skidmore <donald.c.skidmore@intel.com>
Date:   Sun Dec 21 20:09:50 2008 -0800

    net: fix DCB setstate to return success/failure
    
    Data Center Bridging (DCB) had no way to know if setstate had failed in the
    driver.  This patch enables dcb netlink code to handle the status for the DCB
    setstate interface.  Likewise it allows the driver to return a failed status
    if MSI-X isn't enabled.
    
    Signed-off-by: Don Skidmore <donald.c.skidmore@intel.com>
    Signed-off-by: Eric W Multanen <eric.w.multanen@intel.com>
    Signed-off-by: Jeff Kirsher <jeffrey.t.kirsher@intel.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

diff --git a/include/net/dcbnl.h b/include/net/dcbnl.h
index 91e0a3d7faf2..775cfc8055be 100644
--- a/include/net/dcbnl.h
+++ b/include/net/dcbnl.h
@@ -26,7 +26,7 @@
  */
 struct dcbnl_rtnl_ops {
 	u8   (*getstate)(struct net_device *);
-	void (*setstate)(struct net_device *, u8);
+	u8   (*setstate)(struct net_device *, u8);
 	void (*getpermhwaddr)(struct net_device *, u8 *);
 	void (*setpgtccfgtx)(struct net_device *, int, u8, u8, u8, u8);
 	void (*setpgbwgcfgtx)(struct net_device *, int, u8);

commit 859ee3c43812051e21816c6d6d4cc04fb7ce9b2e
Author: Alexander Duyck <alexander.h.duyck@intel.com>
Date:   Thu Nov 20 21:10:23 2008 -0800

    DCB: Add support for DCB BCN
    
    Adds an interface to configure the Backward Congestion Notification
    (BCN) feature.  In a BCN capabale network, congestion notifications
    from congested points out in the network can cause the end station
    limit the rate of a given traffic flow.
    
    Signed-off-by: Alexander Duyck <alexander.h.duyck@intel.com>
    Signed-off-by: Jeff Kirsher <jeffrey.t.kirsher@intel.com>
    Signed-off-by: Peter P Waskiewicz Jr <peter.p.waskiewicz.jr@intel.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

diff --git a/include/net/dcbnl.h b/include/net/dcbnl.h
index c7d87caf3f99..91e0a3d7faf2 100644
--- a/include/net/dcbnl.h
+++ b/include/net/dcbnl.h
@@ -44,6 +44,10 @@ struct dcbnl_rtnl_ops {
 	u8   (*setnumtcs)(struct net_device *, int, u8);
 	u8   (*getpfcstate)(struct net_device *);
 	void (*setpfcstate)(struct net_device *, u8);
+	void (*getbcncfg)(struct net_device *, int, u32 *);
+	void (*setbcncfg)(struct net_device *, int, u32);
+	void (*getbcnrp)(struct net_device *, int, u8 *);
+	void (*setbcnrp)(struct net_device *, int, u8);
 };
 
 #endif /* __NET_DCBNL_H__ */

commit 0eb3aa9bab20217fb42244ccdcb5bf8a002f504c
Author: Alexander Duyck <alexander.h.duyck@intel.com>
Date:   Thu Nov 20 21:09:23 2008 -0800

    DCB: Add interface to query the state of PFC feature.
    
    Adds a netlink interface for Data Center Bridging (DCB) to get and set
    the enable state of the Priority Flow Control (PFC) feature.
    Primarily, this is a way to turn off PFC in the driver while DCB
    remains enabled.
    
    Signed-off-by: Alexander Duyck <alexander.h.duyck@intel.com>
    Signed-off-by: Jeff Kirsher <jeffrey.t.kirsher@intel.com>
    Signed-off-by: Peter P Waskiewicz Jr <peter.p.waskiewicz.jr@intel.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

diff --git a/include/net/dcbnl.h b/include/net/dcbnl.h
index f0a65281ea73..c7d87caf3f99 100644
--- a/include/net/dcbnl.h
+++ b/include/net/dcbnl.h
@@ -42,6 +42,8 @@ struct dcbnl_rtnl_ops {
 	u8   (*getcap)(struct net_device *, int, u8 *);
 	u8   (*getnumtcs)(struct net_device *, int, u8 *);
 	u8   (*setnumtcs)(struct net_device *, int, u8);
+	u8   (*getpfcstate)(struct net_device *);
+	void (*setpfcstate)(struct net_device *, u8);
 };
 
 #endif /* __NET_DCBNL_H__ */

commit 33dbabc4a7f7bd72313c73a3c199f31f3900336f
Author: Alexander Duyck <alexander.h.duyck@intel.com>
Date:   Thu Nov 20 21:08:19 2008 -0800

    DCB: Add interface to query # of TCs supported by device
    
    Adds interface for Data Center Bridging (DCB) to query (and set if
    supported) the number of traffic classes currently supported by the
    device for the two (DCB) features: priority groups (PG) and priority
    flow control (PFC).
    
    Signed-off-by: Alexander Duyck <alexander.h.duyck@intel.com>
    Signed-off-by: Jeff Kirsher <jeffrey.t.kirsher@intel.com>
    Signed-off-by: Peter P Waskiewicz Jr <peter.p.waskiewicz.jr@intel.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

diff --git a/include/net/dcbnl.h b/include/net/dcbnl.h
index 183ed040cf4c..f0a65281ea73 100644
--- a/include/net/dcbnl.h
+++ b/include/net/dcbnl.h
@@ -40,6 +40,8 @@ struct dcbnl_rtnl_ops {
 	void (*getpfccfg)(struct net_device *, int, u8 *);
 	u8   (*setall)(struct net_device *);
 	u8   (*getcap)(struct net_device *, int, u8 *);
+	u8   (*getnumtcs)(struct net_device *, int, u8 *);
+	u8   (*setnumtcs)(struct net_device *, int, u8);
 };
 
 #endif /* __NET_DCBNL_H__ */

commit 46132188bf72e22ef097f16ed5c969ee8cea1e8b
Author: Alexander Duyck <alexander.h.duyck@intel.com>
Date:   Thu Nov 20 21:05:08 2008 -0800

    DCB: Add interface to query for the DCB capabilities of an device.
    
    Adds to the netlink interface for Data Center Bridging (DCB), allowing
    the DCB capabilities supported by a device to be queried.
    
    Signed-off-by: Alexander Duyck <alexander.h.duyck@intel.com>
    Signed-off-by: Jeff Kirsher <jeffrey.t.kirsher@intel.com>
    Signed-off-by: Peter P Waskiewicz Jr <peter.p.waskiewicz.jr@intel.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

diff --git a/include/net/dcbnl.h b/include/net/dcbnl.h
index 0ef0c5a46d8b..183ed040cf4c 100644
--- a/include/net/dcbnl.h
+++ b/include/net/dcbnl.h
@@ -39,6 +39,7 @@ struct dcbnl_rtnl_ops {
 	void (*setpfccfg)(struct net_device *, int, u8);
 	void (*getpfccfg)(struct net_device *, int, u8 *);
 	u8   (*setall)(struct net_device *);
+	u8   (*getcap)(struct net_device *, int, u8 *);
 };
 
 #endif /* __NET_DCBNL_H__ */

commit 2f90b8657ec942d1880f720e0177ee71df7c8e3c
Author: Alexander Duyck <alexander.h.duyck@intel.com>
Date:   Thu Nov 20 20:52:10 2008 -0800

    ixgbe: this patch adds support for DCB to the kernel and ixgbe driver
    
    This adds support for Data Center Bridging (DCB) features in the ixgbe
    driver and adds an rtnetlink interface for configuring DCB to the
    kernel.  The DCB feature support included are Priority Grouping (PG) -
    which allows bandwidth guarantees to be allocated to groups to traffic
    based on the 802.1q priority, and Priority Based Flow Control (PFC) -
    which introduces a new MAC control PAUSE frame which works at
    granularity of the 802.1p priority instead of the link (IEEE 802.3x).
    
    Signed-off-by: Alexander Duyck <alexander.h.duyck@intel.com>
    Signed-off-by: Jeff Kirsher <jeffrey.t.kirsher@intel.com>
    Signed-off-by: Peter P Waskiewicz Jr <peter.p.waskiewicz.jr@intel.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

diff --git a/include/net/dcbnl.h b/include/net/dcbnl.h
new file mode 100644
index 000000000000..0ef0c5a46d8b
--- /dev/null
+++ b/include/net/dcbnl.h
@@ -0,0 +1,44 @@
+/*
+ * Copyright (c) 2008, Intel Corporation.
+ *
+ * This program is free software; you can redistribute it and/or modify it
+ * under the terms and conditions of the GNU General Public License,
+ * version 2, as published by the Free Software Foundation.
+ *
+ * This program is distributed in the hope it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
+ * more details.
+ *
+ * You should have received a copy of the GNU General Public License along with
+ * this program; if not, write to the Free Software Foundation, Inc., 59 Temple
+ * Place - Suite 330, Boston, MA 02111-1307 USA.
+ *
+ * Author: Lucy Liu <lucy.liu@intel.com>
+ */
+
+#ifndef __NET_DCBNL_H__
+#define __NET_DCBNL_H__
+
+/*
+ * Ops struct for the netlink callbacks.  Used by DCB-enabled drivers through
+ * the netdevice struct.
+ */
+struct dcbnl_rtnl_ops {
+	u8   (*getstate)(struct net_device *);
+	void (*setstate)(struct net_device *, u8);
+	void (*getpermhwaddr)(struct net_device *, u8 *);
+	void (*setpgtccfgtx)(struct net_device *, int, u8, u8, u8, u8);
+	void (*setpgbwgcfgtx)(struct net_device *, int, u8);
+	void (*setpgtccfgrx)(struct net_device *, int, u8, u8, u8, u8);
+	void (*setpgbwgcfgrx)(struct net_device *, int, u8);
+	void (*getpgtccfgtx)(struct net_device *, int, u8 *, u8 *, u8 *, u8 *);
+	void (*getpgbwgcfgtx)(struct net_device *, int, u8 *);
+	void (*getpgtccfgrx)(struct net_device *, int, u8 *, u8 *, u8 *, u8 *);
+	void (*getpgbwgcfgrx)(struct net_device *, int, u8 *);
+	void (*setpfccfg)(struct net_device *, int, u8);
+	void (*getpfccfg)(struct net_device *, int, u8 *);
+	u8   (*setall)(struct net_device *);
+};
+
+#endif /* __NET_DCBNL_H__ */
