commit 1cad629257e76025bcbf490c58de550fb67d4d0e
Author: Gerd Hoffmann <kraxel@redhat.com>
Date:   Wed Feb 26 16:47:50 2020 +0100

    drm/shmem: add support for per object caching flags.
    
    Add map_cached bool to drm_gem_shmem_object, to request cached mappings
    on a per-object base.  Check the flag before adding writecombine to
    pgprot bits.
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Gerd Hoffmann <kraxel@redhat.com>
    Reviewed-by: Gurchetan Singh <gurchetansingh@chromium.org>
    Tested-by: Guillaume Gardet <Guillaume.Gardet@arm.com>
    Link: http://patchwork.freedesktop.org/patch/msgid/20200226154752.24328-2-kraxel@redhat.com

diff --git a/include/drm/drm_gem_shmem_helper.h b/include/drm/drm_gem_shmem_helper.h
index e34a7b7f848a..294b2931c4cc 100644
--- a/include/drm/drm_gem_shmem_helper.h
+++ b/include/drm/drm_gem_shmem_helper.h
@@ -96,6 +96,11 @@ struct drm_gem_shmem_object {
 	 * The address are un-mapped when the count reaches zero.
 	 */
 	unsigned int vmap_use_count;
+
+	/**
+	 * @map_cached: map object cached (instead of using writecombine).
+	 */
+	bool map_cached;
 };
 
 #define to_drm_gem_shmem_obj(obj) \

commit 77e0723bd27f830d0903225372aa778fe2975648
Merge: 3ca3a9eab708 31f4f5b495a6
Author: Dave Airlie <airlied@redhat.com>
Date:   Thu Nov 14 05:53:10 2019 +1000

    Merge v5.4-rc7 into drm-next
    
    We have the i915 security fixes to backmerge, but first
    let's clear the decks for other drivers to avoid a bigger
    mess.
    
    Signed-off-by: Dave Airlie <airlied@redhat.com>

commit 105401b659b7eb9cb42d6b5b75d5c049ad4b3dca
Author: Rob Herring <robh@kernel.org>
Date:   Fri Nov 1 10:37:54 2019 -0500

    drm/shmem: Add docbook comments for drm_gem_shmem_object madvise fields
    
    Add missing docbook comments to madvise fields in struct
    drm_gem_shmem_object which fixes these warnings:
    
    include/drm/drm_gem_shmem_helper.h:87: warning: Function parameter or member 'madv' not described in 'drm_gem_shmem_object'
    include/drm/drm_gem_shmem_helper.h:87: warning: Function parameter or member 'madv_list' not described in 'drm_gem_shmem_object'
    
    Fixes: 17acb9f35ed7 ("drm/shmem: Add madvise state and purge helpers")
    Reported-by: Sean Paul <sean@poorly.run>
    Cc: Maarten Lankhorst <maarten.lankhorst@linux.intel.com>
    Cc: Maxime Ripard <mripard@kernel.org>
    Cc: David Airlie <airlied@linux.ie>
    Cc: Daniel Vetter <daniel@ffwll.ch>
    Signed-off-by: Rob Herring <robh@kernel.org>
    Reviewed-by: Sean Paul <sean@poorly.run>
    Link: https://patchwork.freedesktop.org/patch/msgid/20191101153754.22803-1-robh@kernel.org

diff --git a/include/drm/drm_gem_shmem_helper.h b/include/drm/drm_gem_shmem_helper.h
index 01f514521687..7865e6b5d36c 100644
--- a/include/drm/drm_gem_shmem_helper.h
+++ b/include/drm/drm_gem_shmem_helper.h
@@ -44,7 +44,20 @@ struct drm_gem_shmem_object {
 	 */
 	unsigned int pages_use_count;
 
+	/**
+	 * @madv: State for madvise
+	 *
+	 * 0 is active/inuse.
+	 * A negative value is the object is purged.
+	 * Positive values are driver specific and not used by the helpers.
+	 */
 	int madv;
+
+	/**
+	 * @madv_list: List entry for madvise tracking
+	 *
+	 * Typically used by drivers to track purgeable objects
+	 */
 	struct list_head madv_list;
 
 	/**

commit eee9a2e0ad7c4c1fe5fa286dddf822116370f0c7
Author: Gerd Hoffmann <kraxel@redhat.com>
Date:   Wed Oct 16 13:51:57 2019 +0200

    drm/shmem: drop DEFINE_DRM_GEM_SHMEM_FOPS
    
    DEFINE_DRM_GEM_SHMEM_FOPS is identical
    to DEFINE_DRM_GEM_FOPS now, drop it.
    
    Signed-off-by: Gerd Hoffmann <kraxel@redhat.com>
    Acked-by: Rob Herring <robh@kernel.org>
    Acked-by: Daniel Vetter <daniel.vetter@ffwll.ch>
    Link: http://patchwork.freedesktop.org/patch/msgid/20191016115203.20095-6-kraxel@redhat.com

diff --git a/include/drm/drm_gem_shmem_helper.h b/include/drm/drm_gem_shmem_helper.h
index d89f2116c8ab..6748379a0b44 100644
--- a/include/drm/drm_gem_shmem_helper.h
+++ b/include/drm/drm_gem_shmem_helper.h
@@ -88,32 +88,6 @@ struct drm_gem_shmem_object {
 #define to_drm_gem_shmem_obj(obj) \
 	container_of(obj, struct drm_gem_shmem_object, base)
 
-/**
- * DEFINE_DRM_GEM_SHMEM_FOPS() - Macro to generate file operations for shmem drivers
- * @name: name for the generated structure
- *
- * This macro autogenerates a suitable &struct file_operations for shmem based
- * drivers, which can be assigned to &drm_driver.fops. Note that this structure
- * cannot be shared between drivers, because it contains a reference to the
- * current module using THIS_MODULE.
- *
- * Note that the declaration is already marked as static - if you need a
- * non-static version of this you're probably doing it wrong and will break the
- * THIS_MODULE reference by accident.
- */
-#define DEFINE_DRM_GEM_SHMEM_FOPS(name) \
-	static const struct file_operations name = {\
-		.owner		= THIS_MODULE,\
-		.open		= drm_open,\
-		.release	= drm_release,\
-		.unlocked_ioctl	= drm_ioctl,\
-		.compat_ioctl	= drm_compat_ioctl,\
-		.poll		= drm_poll,\
-		.read		= drm_read,\
-		.llseek		= noop_llseek,\
-		.mmap		= drm_gem_mmap, \
-	}
-
 struct drm_gem_shmem_object *drm_gem_shmem_create(struct drm_device *dev, size_t size);
 void drm_gem_shmem_free_object(struct drm_gem_object *obj);
 

commit 0be895893607fb3447478d6e33dfb60644195a09
Author: Gerd Hoffmann <kraxel@redhat.com>
Date:   Wed Oct 16 13:51:54 2019 +0200

    drm/shmem: switch shmem helper to &drm_gem_object_funcs.mmap
    
    Switch gem shmem helper to the new mmap() workflow,
    from &gem_driver.fops.mmap to &drm_gem_object_funcs.mmap.
    
    v2: Fix vm_flags and vm_page_prot handling.
    
    Signed-off-by: Gerd Hoffmann <kraxel@redhat.com>
    Reviewed-by: Steven Price <steven.price@arm.com>
    Acked-by: Daniel Vetter <daniel.vetter@ffwll.ch>
    Link: http://patchwork.freedesktop.org/patch/msgid/20191016115203.20095-3-kraxel@redhat.com

diff --git a/include/drm/drm_gem_shmem_helper.h b/include/drm/drm_gem_shmem_helper.h
index 01f514521687..d89f2116c8ab 100644
--- a/include/drm/drm_gem_shmem_helper.h
+++ b/include/drm/drm_gem_shmem_helper.h
@@ -111,7 +111,7 @@ struct drm_gem_shmem_object {
 		.poll		= drm_poll,\
 		.read		= drm_read,\
 		.llseek		= noop_llseek,\
-		.mmap		= drm_gem_shmem_mmap, \
+		.mmap		= drm_gem_mmap, \
 	}
 
 struct drm_gem_shmem_object *drm_gem_shmem_create(struct drm_device *dev, size_t size);
@@ -143,9 +143,7 @@ drm_gem_shmem_create_with_handle(struct drm_file *file_priv,
 int drm_gem_shmem_dumb_create(struct drm_file *file, struct drm_device *dev,
 			      struct drm_mode_create_dumb *args);
 
-int drm_gem_shmem_mmap(struct file *filp, struct vm_area_struct *vma);
-
-extern const struct vm_operations_struct drm_gem_shmem_vm_ops;
+int drm_gem_shmem_mmap(struct drm_gem_object *obj, struct vm_area_struct *vma);
 
 void drm_gem_shmem_print_info(struct drm_printer *p, unsigned int indent,
 			      const struct drm_gem_object *obj);

commit edbd7f318cd66cec4588a28ba6985b014456dbca
Author: Rob Herring <robh@kernel.org>
Date:   Thu Aug 22 21:12:13 2019 -0500

    drm/shmem: Use mutex_trylock in drm_gem_shmem_purge
    
    Lockdep reports a circular locking dependency with pages_lock taken in
    the shrinker callback. The deadlock can't actually happen with current
    users at least as a BO will never be purgeable when pages_lock is held.
    To be safe, let's use mutex_trylock() instead and bail if a BO is locked
    already.
    
    WARNING: possible circular locking dependency detected
    5.3.0-rc1+ #100 Tainted: G             L
    ------------------------------------------------------
    kswapd0/171 is trying to acquire lock:
    000000009b9823fd (&shmem->pages_lock){+.+.}, at: drm_gem_shmem_purge+0x20/0x40
    
    but task is already holding lock:
    00000000f82369b6 (fs_reclaim){+.+.}, at: __fs_reclaim_acquire+0x0/0x40
    
    which lock already depends on the new lock.
    
    the existing dependency chain (in reverse order) is:
    
    -> #1 (fs_reclaim){+.+.}:
           fs_reclaim_acquire.part.18+0x34/0x40
           fs_reclaim_acquire+0x20/0x28
           __kmalloc_node+0x6c/0x4c0
           kvmalloc_node+0x38/0xa8
           drm_gem_get_pages+0x80/0x1d0
           drm_gem_shmem_get_pages+0x58/0xa0
           drm_gem_shmem_get_pages_sgt+0x48/0xd0
           panfrost_mmu_map+0x38/0xf8 [panfrost]
           panfrost_gem_open+0xc0/0xe8 [panfrost]
           drm_gem_handle_create_tail+0xe8/0x198
           drm_gem_handle_create+0x3c/0x50
           panfrost_gem_create_with_handle+0x70/0xa0 [panfrost]
           panfrost_ioctl_create_bo+0x48/0x80 [panfrost]
           drm_ioctl_kernel+0xb8/0x110
           drm_ioctl+0x244/0x3f0
           do_vfs_ioctl+0xbc/0x910
           ksys_ioctl+0x78/0xa8
           __arm64_sys_ioctl+0x1c/0x28
           el0_svc_common.constprop.0+0x90/0x168
           el0_svc_handler+0x28/0x78
           el0_svc+0x8/0xc
    
    -> #0 (&shmem->pages_lock){+.+.}:
           __lock_acquire+0xa2c/0x1d70
           lock_acquire+0xdc/0x228
           __mutex_lock+0x8c/0x800
           mutex_lock_nested+0x1c/0x28
           drm_gem_shmem_purge+0x20/0x40
           panfrost_gem_shrinker_scan+0xc0/0x180 [panfrost]
           do_shrink_slab+0x208/0x500
           shrink_slab+0x10c/0x2c0
           shrink_node+0x28c/0x4d8
           balance_pgdat+0x2c8/0x570
           kswapd+0x22c/0x638
           kthread+0x128/0x130
           ret_from_fork+0x10/0x18
    
    other info that might help us debug this:
    
     Possible unsafe locking scenario:
    
           CPU0                    CPU1
           ----                    ----
      lock(fs_reclaim);
                                   lock(&shmem->pages_lock);
                                   lock(fs_reclaim);
      lock(&shmem->pages_lock);
    
     *** DEADLOCK ***
    
    3 locks held by kswapd0/171:
     #0: 00000000f82369b6 (fs_reclaim){+.+.}, at: __fs_reclaim_acquire+0x0/0x40
     #1: 00000000ceb37808 (shrinker_rwsem){++++}, at: shrink_slab+0xbc/0x2c0
     #2: 00000000f31efa81 (&pfdev->shrinker_lock){+.+.}, at: panfrost_gem_shrinker_scan+0x34/0x180 [panfrost]
    
    Fixes: 17acb9f35ed7 ("drm/shmem: Add madvise state and purge helpers")
    Cc: Maarten Lankhorst <maarten.lankhorst@linux.intel.com>
    Cc: Maxime Ripard <maxime.ripard@bootlin.com>
    Cc: Sean Paul <sean@poorly.run>
    Cc: David Airlie <airlied@linux.ie>
    Cc: Daniel Vetter <daniel@ffwll.ch>
    Signed-off-by: Rob Herring <robh@kernel.org>
    Reviewed-by: Steven Price <steven.price@arm.com>
    Acked-by: Alyssa Rosenzweig <alyssa.rosenzweig@collabora.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20190823021216.5862-6-robh@kernel.org

diff --git a/include/drm/drm_gem_shmem_helper.h b/include/drm/drm_gem_shmem_helper.h
index ce1600fdfc3e..01f514521687 100644
--- a/include/drm/drm_gem_shmem_helper.h
+++ b/include/drm/drm_gem_shmem_helper.h
@@ -134,7 +134,7 @@ static inline bool drm_gem_shmem_is_purgeable(struct drm_gem_shmem_object *shmem
 }
 
 void drm_gem_shmem_purge_locked(struct drm_gem_object *obj);
-void drm_gem_shmem_purge(struct drm_gem_object *obj);
+bool drm_gem_shmem_purge(struct drm_gem_object *obj);
 
 struct drm_gem_shmem_object *
 drm_gem_shmem_create_with_handle(struct drm_file *file_priv,

commit dfbc7a46b940b5d5ef8c3db3b7c3b51e6ec8fec4
Author: Rob Herring <robh@kernel.org>
Date:   Thu Aug 22 21:12:13 2019 -0500

    drm/shmem: Use mutex_trylock in drm_gem_shmem_purge
    
    Lockdep reports a circular locking dependency with pages_lock taken in
    the shrinker callback. The deadlock can't actually happen with current
    users at least as a BO will never be purgeable when pages_lock is held.
    To be safe, let's use mutex_trylock() instead and bail if a BO is locked
    already.
    
    WARNING: possible circular locking dependency detected
    5.3.0-rc1+ #100 Tainted: G             L
    ------------------------------------------------------
    kswapd0/171 is trying to acquire lock:
    000000009b9823fd (&shmem->pages_lock){+.+.}, at: drm_gem_shmem_purge+0x20/0x40
    
    but task is already holding lock:
    00000000f82369b6 (fs_reclaim){+.+.}, at: __fs_reclaim_acquire+0x0/0x40
    
    which lock already depends on the new lock.
    
    the existing dependency chain (in reverse order) is:
    
    -> #1 (fs_reclaim){+.+.}:
           fs_reclaim_acquire.part.18+0x34/0x40
           fs_reclaim_acquire+0x20/0x28
           __kmalloc_node+0x6c/0x4c0
           kvmalloc_node+0x38/0xa8
           drm_gem_get_pages+0x80/0x1d0
           drm_gem_shmem_get_pages+0x58/0xa0
           drm_gem_shmem_get_pages_sgt+0x48/0xd0
           panfrost_mmu_map+0x38/0xf8 [panfrost]
           panfrost_gem_open+0xc0/0xe8 [panfrost]
           drm_gem_handle_create_tail+0xe8/0x198
           drm_gem_handle_create+0x3c/0x50
           panfrost_gem_create_with_handle+0x70/0xa0 [panfrost]
           panfrost_ioctl_create_bo+0x48/0x80 [panfrost]
           drm_ioctl_kernel+0xb8/0x110
           drm_ioctl+0x244/0x3f0
           do_vfs_ioctl+0xbc/0x910
           ksys_ioctl+0x78/0xa8
           __arm64_sys_ioctl+0x1c/0x28
           el0_svc_common.constprop.0+0x90/0x168
           el0_svc_handler+0x28/0x78
           el0_svc+0x8/0xc
    
    -> #0 (&shmem->pages_lock){+.+.}:
           __lock_acquire+0xa2c/0x1d70
           lock_acquire+0xdc/0x228
           __mutex_lock+0x8c/0x800
           mutex_lock_nested+0x1c/0x28
           drm_gem_shmem_purge+0x20/0x40
           panfrost_gem_shrinker_scan+0xc0/0x180 [panfrost]
           do_shrink_slab+0x208/0x500
           shrink_slab+0x10c/0x2c0
           shrink_node+0x28c/0x4d8
           balance_pgdat+0x2c8/0x570
           kswapd+0x22c/0x638
           kthread+0x128/0x130
           ret_from_fork+0x10/0x18
    
    other info that might help us debug this:
    
     Possible unsafe locking scenario:
    
           CPU0                    CPU1
           ----                    ----
      lock(fs_reclaim);
                                   lock(&shmem->pages_lock);
                                   lock(fs_reclaim);
      lock(&shmem->pages_lock);
    
     *** DEADLOCK ***
    
    3 locks held by kswapd0/171:
     #0: 00000000f82369b6 (fs_reclaim){+.+.}, at: __fs_reclaim_acquire+0x0/0x40
     #1: 00000000ceb37808 (shrinker_rwsem){++++}, at: shrink_slab+0xbc/0x2c0
     #2: 00000000f31efa81 (&pfdev->shrinker_lock){+.+.}, at: panfrost_gem_shrinker_scan+0x34/0x180 [panfrost]
    
    Fixes: 17acb9f35ed7 ("drm/shmem: Add madvise state and purge helpers")
    Cc: Maarten Lankhorst <maarten.lankhorst@linux.intel.com>
    Cc: Maxime Ripard <maxime.ripard@bootlin.com>
    Cc: Sean Paul <sean@poorly.run>
    Cc: David Airlie <airlied@linux.ie>
    Cc: Daniel Vetter <daniel@ffwll.ch>
    Signed-off-by: Rob Herring <robh@kernel.org>
    Reviewed-by: Steven Price <steven.price@arm.com>
    Acked-by: Alyssa Rosenzweig <alyssa.rosenzweig@collabora.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20190823021216.5862-6-robh@kernel.org

diff --git a/include/drm/drm_gem_shmem_helper.h b/include/drm/drm_gem_shmem_helper.h
index ce1600fdfc3e..01f514521687 100644
--- a/include/drm/drm_gem_shmem_helper.h
+++ b/include/drm/drm_gem_shmem_helper.h
@@ -134,7 +134,7 @@ static inline bool drm_gem_shmem_is_purgeable(struct drm_gem_shmem_object *shmem
 }
 
 void drm_gem_shmem_purge_locked(struct drm_gem_object *obj);
-void drm_gem_shmem_purge(struct drm_gem_object *obj);
+bool drm_gem_shmem_purge(struct drm_gem_object *obj);
 
 struct drm_gem_shmem_object *
 drm_gem_shmem_create_with_handle(struct drm_file *file_priv,

commit 17acb9f35ed736c177f85b8ee711f278e7aff421
Author: Rob Herring <robh@kernel.org>
Date:   Mon Aug 5 08:33:57 2019 -0600

    drm/shmem: Add madvise state and purge helpers
    
    Add support to the shmem GEM helpers for tracking madvise state and
    purging pages. This is based on the msm implementation.
    
    The BO provides a list_head, but the list management is handled outside
    of the shmem helpers as there are different locking requirements.
    
    Cc: Tomeu Vizoso <tomeu.vizoso@collabora.com>
    Cc: Maarten Lankhorst <maarten.lankhorst@linux.intel.com>
    Cc: Maxime Ripard <maxime.ripard@bootlin.com>
    Cc: Sean Paul <sean@poorly.run>
    Cc: David Airlie <airlied@linux.ie>
    Cc: Daniel Vetter <daniel@ffwll.ch>
    Cc: Eric Anholt <eric@anholt.net>
    Acked-by: Acked-by: Alyssa Rosenzweig <alyssa.rosenzweig@collabora.com>
    Signed-off-by: Rob Herring <robh@kernel.org>
    Link: https://patchwork.freedesktop.org/patch/msgid/20190805143358.21245-1-robh@kernel.org

diff --git a/include/drm/drm_gem_shmem_helper.h b/include/drm/drm_gem_shmem_helper.h
index 038b6d313447..ce1600fdfc3e 100644
--- a/include/drm/drm_gem_shmem_helper.h
+++ b/include/drm/drm_gem_shmem_helper.h
@@ -44,6 +44,9 @@ struct drm_gem_shmem_object {
 	 */
 	unsigned int pages_use_count;
 
+	int madv;
+	struct list_head madv_list;
+
 	/**
 	 * @pages_mark_dirty_on_put:
 	 *
@@ -121,6 +124,18 @@ void drm_gem_shmem_unpin(struct drm_gem_object *obj);
 void *drm_gem_shmem_vmap(struct drm_gem_object *obj);
 void drm_gem_shmem_vunmap(struct drm_gem_object *obj, void *vaddr);
 
+int drm_gem_shmem_madvise(struct drm_gem_object *obj, int madv);
+
+static inline bool drm_gem_shmem_is_purgeable(struct drm_gem_shmem_object *shmem)
+{
+	return (shmem->madv > 0) &&
+		!shmem->vmap_use_count && shmem->sgt &&
+		!shmem->base.dma_buf && !shmem->base.import_attach;
+}
+
+void drm_gem_shmem_purge_locked(struct drm_gem_object *obj);
+void drm_gem_shmem_purge(struct drm_gem_object *obj);
+
 struct drm_gem_shmem_object *
 drm_gem_shmem_create_with_handle(struct drm_file *file_priv,
 				 struct drm_device *dev, size_t size,

commit 2194a63a818db71065ebe09c8104f5f021ca4e7b
Author: Noralf Trønnes <noralf@tronnes.org>
Date:   Tue Mar 12 19:43:44 2019 -0500

    drm: Add library for shmem backed GEM objects
    
    This adds a library for shmem backed GEM objects.
    
    v8:
    - export drm_gem_shmem_create_with_handle
    - call mapping_set_gfp_mask to set default zone to GFP_HIGHUSER
    - Add helper drm_gem_shmem_get_pages_sgt()
    
    v7:
    - Use write-combine for mmap instead. This is the more common
      case. (robher)
    
    v6:
    - Fix uninitialized variable issue in an error path (anholt).
    - Add a drm_gem_shmem_vm_open() to the fops to get proper refcounting
      of the pages (anholt).
    
    v5:
    - Drop drm_gem_shmem_prime_mmap() (Daniel Vetter)
    - drm_gem_shmem_mmap(): Subtract drm_vma_node_start() to get the real
      vma->vm_pgoff
    - drm_gem_shmem_fault(): Use vmf->pgoff now that vma->vm_pgoff is correct
    
    v4:
    - Drop cache modes (Thomas Hellstrom)
    - Add a GEM attached vtable
    
    v3:
    - Grammar (Sam Ravnborg)
    - s/drm_gem_shmem_put_pages_unlocked/drm_gem_shmem_put_pages_locked/
      (Sam Ravnborg)
    - Add debug output in error path (Sam Ravnborg)
    
    Signed-off-by: Noralf Trønnes <noralf@tronnes.org>
    Signed-off-by: Eric Anholt <eric@anholt.net>
    Signed-off-by: Rob Herring <robh@kernel.org>
    Signed-off-by: Eric Anholt <eric@anholt.net>
    Reviewed-by: Eric Anholt <eric@anholt.net>
    Link: https://patchwork.freedesktop.org/patch/msgid/20190313004344.24169-1-robh@kernel.org

diff --git a/include/drm/drm_gem_shmem_helper.h b/include/drm/drm_gem_shmem_helper.h
new file mode 100644
index 000000000000..038b6d313447
--- /dev/null
+++ b/include/drm/drm_gem_shmem_helper.h
@@ -0,0 +1,159 @@
+/* SPDX-License-Identifier: GPL-2.0 */
+
+#ifndef __DRM_GEM_SHMEM_HELPER_H__
+#define __DRM_GEM_SHMEM_HELPER_H__
+
+#include <linux/fs.h>
+#include <linux/mm.h>
+#include <linux/mutex.h>
+
+#include <drm/drm_file.h>
+#include <drm/drm_gem.h>
+#include <drm/drm_ioctl.h>
+#include <drm/drm_prime.h>
+
+struct dma_buf_attachment;
+struct drm_mode_create_dumb;
+struct drm_printer;
+struct sg_table;
+
+/**
+ * struct drm_gem_shmem_object - GEM object backed by shmem
+ */
+struct drm_gem_shmem_object {
+	/**
+	 * @base: Base GEM object
+	 */
+	struct drm_gem_object base;
+
+	/**
+	 * @pages_lock: Protects the page table and use count
+	 */
+	struct mutex pages_lock;
+
+	/**
+	 * @pages: Page table
+	 */
+	struct page **pages;
+
+	/**
+	 * @pages_use_count:
+	 *
+	 * Reference count on the pages table.
+	 * The pages are put when the count reaches zero.
+	 */
+	unsigned int pages_use_count;
+
+	/**
+	 * @pages_mark_dirty_on_put:
+	 *
+	 * Mark pages as dirty when they are put.
+	 */
+	unsigned int pages_mark_dirty_on_put    : 1;
+
+	/**
+	 * @pages_mark_accessed_on_put:
+	 *
+	 * Mark pages as accessed when they are put.
+	 */
+	unsigned int pages_mark_accessed_on_put : 1;
+
+	/**
+	 * @sgt: Scatter/gather table for imported PRIME buffers
+	 */
+	struct sg_table *sgt;
+
+	/**
+	 * @vmap_lock: Protects the vmap address and use count
+	 */
+	struct mutex vmap_lock;
+
+	/**
+	 * @vaddr: Kernel virtual address of the backing memory
+	 */
+	void *vaddr;
+
+	/**
+	 * @vmap_use_count:
+	 *
+	 * Reference count on the virtual address.
+	 * The address are un-mapped when the count reaches zero.
+	 */
+	unsigned int vmap_use_count;
+};
+
+#define to_drm_gem_shmem_obj(obj) \
+	container_of(obj, struct drm_gem_shmem_object, base)
+
+/**
+ * DEFINE_DRM_GEM_SHMEM_FOPS() - Macro to generate file operations for shmem drivers
+ * @name: name for the generated structure
+ *
+ * This macro autogenerates a suitable &struct file_operations for shmem based
+ * drivers, which can be assigned to &drm_driver.fops. Note that this structure
+ * cannot be shared between drivers, because it contains a reference to the
+ * current module using THIS_MODULE.
+ *
+ * Note that the declaration is already marked as static - if you need a
+ * non-static version of this you're probably doing it wrong and will break the
+ * THIS_MODULE reference by accident.
+ */
+#define DEFINE_DRM_GEM_SHMEM_FOPS(name) \
+	static const struct file_operations name = {\
+		.owner		= THIS_MODULE,\
+		.open		= drm_open,\
+		.release	= drm_release,\
+		.unlocked_ioctl	= drm_ioctl,\
+		.compat_ioctl	= drm_compat_ioctl,\
+		.poll		= drm_poll,\
+		.read		= drm_read,\
+		.llseek		= noop_llseek,\
+		.mmap		= drm_gem_shmem_mmap, \
+	}
+
+struct drm_gem_shmem_object *drm_gem_shmem_create(struct drm_device *dev, size_t size);
+void drm_gem_shmem_free_object(struct drm_gem_object *obj);
+
+int drm_gem_shmem_get_pages(struct drm_gem_shmem_object *shmem);
+void drm_gem_shmem_put_pages(struct drm_gem_shmem_object *shmem);
+int drm_gem_shmem_pin(struct drm_gem_object *obj);
+void drm_gem_shmem_unpin(struct drm_gem_object *obj);
+void *drm_gem_shmem_vmap(struct drm_gem_object *obj);
+void drm_gem_shmem_vunmap(struct drm_gem_object *obj, void *vaddr);
+
+struct drm_gem_shmem_object *
+drm_gem_shmem_create_with_handle(struct drm_file *file_priv,
+				 struct drm_device *dev, size_t size,
+				 uint32_t *handle);
+int drm_gem_shmem_dumb_create(struct drm_file *file, struct drm_device *dev,
+			      struct drm_mode_create_dumb *args);
+
+int drm_gem_shmem_mmap(struct file *filp, struct vm_area_struct *vma);
+
+extern const struct vm_operations_struct drm_gem_shmem_vm_ops;
+
+void drm_gem_shmem_print_info(struct drm_printer *p, unsigned int indent,
+			      const struct drm_gem_object *obj);
+
+struct sg_table *drm_gem_shmem_get_sg_table(struct drm_gem_object *obj);
+struct drm_gem_object *
+drm_gem_shmem_prime_import_sg_table(struct drm_device *dev,
+				    struct dma_buf_attachment *attach,
+				    struct sg_table *sgt);
+
+struct sg_table *drm_gem_shmem_get_pages_sgt(struct drm_gem_object *obj);
+
+/**
+ * DRM_GEM_SHMEM_DRIVER_OPS - Default shmem GEM operations
+ *
+ * This macro provides a shortcut for setting the shmem GEM operations in
+ * the &drm_driver structure.
+ */
+#define DRM_GEM_SHMEM_DRIVER_OPS \
+	.prime_handle_to_fd	= drm_gem_prime_handle_to_fd, \
+	.prime_fd_to_handle	= drm_gem_prime_fd_to_handle, \
+	.gem_prime_import_sg_table = drm_gem_shmem_prime_import_sg_table, \
+	.gem_prime_mmap		= drm_gem_prime_mmap, \
+	.dumb_create		= drm_gem_shmem_dumb_create
+
+#endif /* __DRM_GEM_SHMEM_HELPER_H__ */
