commit 6c8337dafaa9a328216c62a79c9a03176af3ce70
Author: Vandita Kulkarni <vandita.kulkarni@intel.com>
Date:   Thu Jul 11 10:31:06 2019 -0700

    drm/i915/tgl: Add additional ports for Tiger Lake
    
    There are 2 new additional typeC ports in Tiger Lake and PORT-C is now a
    combophy port. This results in 6 typeC ports and 3 combophy ports.
    These 6 TC ports can be DP alternate mode, DP over thunderbolt, native
    DP on legacy DP connector or native HDMI on legacy connector.
    
    v2: Rebase on new modular FIA code (Lucas)
    v3: Also add new port in port_identifier(), even though it can't
        possibly be used there (requested by JosÃ©)
    v4: Add conversion port->tc_port in helper function after introction of
        phy namespace (Lucas)
    
    Cc: Anusha Srivatsa <anusha.srivatsa@intel.com>
    Signed-off-by: Vandita Kulkarni <vandita.kulkarni@intel.com>
    Signed-off-by: Lucas De Marchi <lucas.demarchi@intel.com>
    Reviewed-by: Matt Roper <matthew.d.roper@intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20190711173115.28296-13-lucas.demarchi@intel.com

diff --git a/include/drm/i915_component.h b/include/drm/i915_component.h
index dcb95bd9dee6..55c3b123581b 100644
--- a/include/drm/i915_component.h
+++ b/include/drm/i915_component.h
@@ -34,7 +34,7 @@ enum i915_component_type {
 /* MAX_PORT is the number of port
  * It must be sync with I915_MAX_PORTS defined i915_drv.h
  */
-#define MAX_PORTS 6
+#define MAX_PORTS 9
 
 /**
  * struct i915_audio_component - Used for direct communication between i915 and hda drivers

commit 1bf7cb4d8f3d1f7388b230903cae35dfb43901d3
Author: Ramalingam C <ramalingam.c@intel.com>
Date:   Fri Feb 15 14:05:00 2019 +0530

    drm/i915: MEI interface definition
    
    Defining the mei-i915 interface functions and initialization of
    the interface.
    
    v2:
      Adjust to the new interface changes. [Tomas]
      Added further debug logs for the failures at MEI i/f.
      port in hdcp_port data is equipped to handle -ve values.
    v3:
      mei comp is matched for global i915 comp master. [Daniel]
      In hdcp_shim hdcp_protocol() is replaced with const variable. [Daniel]
      mei wrappers are adjusted as per the i/f change [Daniel]
    v4:
      port initialization is done only at hdcp2_init only [Danvet]
    v5:
      I915 registers a subcomponent to be matched with mei_hdcp [Daniel]
    v6:
      HDCP_disable for all connectors incase of comp_unbind.
      Tear down HDCP comp interface at i915_unload [Daniel]
    v7:
      Component init and fini are moved out of connector ops [Daniel]
      hdcp_disable is not called from unbind. [Daniel]
    
    Signed-off-by: Ramalingam C <ramalingam.c@intel.com>
    Reviewed-by: Daniel Vetter <daniel.vetter@ffwll.ch> [v11]
    [danvet: For the topic/mei-hdcp shared branch drop everything but the
    header change needed by both drm/i915 and mei-hdcp. Also drop the no
    longer needed device.h include.]
    Signed-off-by: Daniel Vetter <daniel.vetter@ffwll.ch>
    Link: https://patchwork.freedesktop.org/patch/msgid/1550219730-17734-6-git-send-email-ramalingam.c@intel.com

diff --git a/include/drm/i915_component.h b/include/drm/i915_component.h
index 72fbb037f9b3..dcb95bd9dee6 100644
--- a/include/drm/i915_component.h
+++ b/include/drm/i915_component.h
@@ -28,6 +28,7 @@
 
 enum i915_component_type {
 	I915_COMPONENT_AUDIO = 1,
+	I915_COMPONENT_HDCP,
 };
 
 /* MAX_PORT is the number of port

commit 8857c7d065e900a0b3829c97634c99501b606541
Author: Daniel Vetter <daniel.vetter@ffwll.ch>
Date:   Fri Feb 8 00:27:59 2019 +0100

    i915/snd_hdac: I915 subcomponent for the snd_hdac
    
    Since we need multiple components for I915 for different purposes
    (Audio & Mei_hdcp), we adopt the subcomponents methodology introduced
    by the previous patch (mentioned below).
    
            Author: Daniel Vetter <daniel.vetter@ffwll.ch>
            Date:   Mon Jan 28 17:08:20 2019 +0530
    
                components: multiple components for a device
    
    Reviewed-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by-by: Ramalingam C <ramalinagm.c@intel.com> (commit message)
    Signed-off-by: Daniel Vetter <daniel.vetter@ffwll.ch> (code)
    cc: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    cc: Russell King <rmk+kernel@arm.linux.org.uk>
    cc: Rafael J. Wysocki <rafael@kernel.org>
    cc: Jaroslav Kysela <perex@perex.cz>
    cc: Takashi Iwai <tiwai@suse.com>
    cc: Rodrigo Vivi <rodrigo.vivi@intel.com>
    cc: Jani Nikula <jani.nikula@linux.intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20190207232759.14553-4-daniel.vetter@ffwll.ch

diff --git a/include/drm/i915_component.h b/include/drm/i915_component.h
index fca22d463e1b..72fbb037f9b3 100644
--- a/include/drm/i915_component.h
+++ b/include/drm/i915_component.h
@@ -26,6 +26,10 @@
 
 #include "drm_audio_component.h"
 
+enum i915_component_type {
+	I915_COMPONENT_AUDIO = 1,
+};
+
 /* MAX_PORT is the number of port
  * It must be sync with I915_MAX_PORTS defined i915_drv.h
  */

commit ae891abe7c2ccf75b69ca8330225e37ecc06924e
Author: Takashi Iwai <tiwai@suse.de>
Date:   Wed Jul 11 15:17:22 2018 +0200

    drm/i915: Split audio component to a generic type
    
    For allowing other drivers to use the DRM audio component, rename the
    i915_audio_component_* with drm_audio_component_*, and split the
    generic part into drm_audio_component.h.  The i915 specific stuff
    remains in struct i915_audio_component, which contains
    drm_audio_component as the base.
    
    The license of drm_audio_component.h is kept to MIT as same as the the
    original i915_component.h.
    
    This is a preliminary change for further development, and no
    functional changes by this patch itself, merely code-split and
    renames.
    
    v1->v2: Use SPDX for drm_audio_component.h, fix remaining i915
            argument in drm_audio_component.h
    
    Reviewed-by: Rodrigo Vivi <rodrigo.vivi@intel.com>
    Signed-off-by: Takashi Iwai <tiwai@suse.de>

diff --git a/include/drm/i915_component.h b/include/drm/i915_component.h
index 346b1f5cb180..fca22d463e1b 100644
--- a/include/drm/i915_component.h
+++ b/include/drm/i915_component.h
@@ -24,101 +24,26 @@
 #ifndef _I915_COMPONENT_H_
 #define _I915_COMPONENT_H_
 
+#include "drm_audio_component.h"
+
 /* MAX_PORT is the number of port
  * It must be sync with I915_MAX_PORTS defined i915_drv.h
  */
 #define MAX_PORTS 6
 
-/**
- * struct i915_audio_component_ops - Ops implemented by i915 driver, called by hda driver
- */
-struct i915_audio_component_ops {
-	/**
-	 * @owner: i915 module
-	 */
-	struct module *owner;
-	/**
-	 * @get_power: get the POWER_DOMAIN_AUDIO power well
-	 *
-	 * Request the power well to be turned on.
-	 */
-	void (*get_power)(struct device *);
-	/**
-	 * @put_power: put the POWER_DOMAIN_AUDIO power well
-	 *
-	 * Allow the power well to be turned off.
-	 */
-	void (*put_power)(struct device *);
-	/**
-	 * @codec_wake_override: Enable/disable codec wake signal
-	 */
-	void (*codec_wake_override)(struct device *, bool enable);
-	/**
-	 * @get_cdclk_freq: Get the Core Display Clock in kHz
-	 */
-	int (*get_cdclk_freq)(struct device *);
-	/**
-	 * @sync_audio_rate: set n/cts based on the sample rate
-	 *
-	 * Called from audio driver. After audio driver sets the
-	 * sample rate, it will call this function to set n/cts
-	 */
-	int (*sync_audio_rate)(struct device *, int port, int pipe, int rate);
-	/**
-	 * @get_eld: fill the audio state and ELD bytes for the given port
-	 *
-	 * Called from audio driver to get the HDMI/DP audio state of the given
-	 * digital port, and also fetch ELD bytes to the given pointer.
-	 *
-	 * It returns the byte size of the original ELD (not the actually
-	 * copied size), zero for an invalid ELD, or a negative error code.
-	 *
-	 * Note that the returned size may be over @max_bytes.  Then it
-	 * implies that only a part of ELD has been copied to the buffer.
-	 */
-	int (*get_eld)(struct device *, int port, int pipe, bool *enabled,
-		       unsigned char *buf, int max_bytes);
-};
-
-/**
- * struct i915_audio_component_audio_ops - Ops implemented by hda driver, called by i915 driver
- */
-struct i915_audio_component_audio_ops {
-	/**
-	 * @audio_ptr: Pointer to be used in call to pin_eld_notify
-	 */
-	void *audio_ptr;
-	/**
-	 * @pin_eld_notify: Notify the HDA driver that pin sense and/or ELD information has changed
-	 *
-	 * Called when the i915 driver has set up audio pipeline or has just
-	 * begun to tear it down. This allows the HDA driver to update its
-	 * status accordingly (even when the HDA controller is in power save
-	 * mode).
-	 */
-	void (*pin_eld_notify)(void *audio_ptr, int port, int pipe);
-};
-
 /**
  * struct i915_audio_component - Used for direct communication between i915 and hda drivers
  */
 struct i915_audio_component {
 	/**
-	 * @dev: i915 device, used as parameter for ops
+	 * @base: the drm_audio_component base class
 	 */
-	struct device *dev;
+	struct drm_audio_component	base;
+
 	/**
 	 * @aud_sample_rate: the array of audio sample rate per port
 	 */
 	int aud_sample_rate[MAX_PORTS];
-	/**
-	 * @ops: Ops implemented by i915 driver, called by hda driver
-	 */
-	const struct i915_audio_component_ops *ops;
-	/**
-	 * @audio_ops: Ops implemented by hda driver, called by i915 driver
-	 */
-	const struct i915_audio_component_audio_ops *audio_ops;
 };
 
 #endif /* _I915_COMPONENT_H_ */

commit 841b5ed7aaec4578cd7303fb7f456f01b90dd313
Author: Rodrigo Vivi <rodrigo.vivi@intel.com>
Date:   Thu Jan 11 16:00:03 2018 -0200

    drm/i915/cnl: Add Port F definition.
    
    Some Cannonlake SKUs will come with a full split between
    port A and port E. This will be called port F although it
    is not a 6th port, but only a split.
    
    Note this patch alone is not sufficient for port F enabling,
    it's just the first step.
    
    v2: Fix size of dvo_ports found by Ander.
    v3: Adding missing cases from intel_bios.c for Port_F
    v4: Adding other missing cases and fix the commit message.
    v5: Rebase on top of display headers rework.
    v6 (from Paulo): improve commit message, bikeshed bit definitions.
    
    Cc: Lucas De Marchi <lucas.demarchi@intel.com>
    Cc: Manasi Navare <manasi.d.navare@intel.com>
    Acked-by: Rodrigo Vivi <rodrigo.vivi@intel.com>
    Reviewed-by: Paulo Zanoni <paulo.r.zanoni@intel.com>
    Signed-off-by: Rodrigo Vivi <rodrigo.vivi@intel.com>
    Signed-off-by: Paulo Zanoni <paulo.r.zanoni@intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20180111180010.24357-2-paulo.r.zanoni@intel.com

diff --git a/include/drm/i915_component.h b/include/drm/i915_component.h
index 545c6e0fea7d..346b1f5cb180 100644
--- a/include/drm/i915_component.h
+++ b/include/drm/i915_component.h
@@ -26,9 +26,8 @@
 
 /* MAX_PORT is the number of port
  * It must be sync with I915_MAX_PORTS defined i915_drv.h
- * 5 should be enough as only HSW, BDW, SKL need such fix.
  */
-#define MAX_PORTS 5
+#define MAX_PORTS 6
 
 /**
  * struct i915_audio_component_ops - Ops implemented by i915 driver, called by hda driver

commit f931894194b9395313d1c34f95ceb8d91f49790d
Author: Pandiyan, Dhinakaran <dhinakaran.pandiyan@intel.com>
Date:   Wed Sep 21 13:02:48 2016 -0700

    drm/i915/dp: DP audio API changes for MST
    
    DP MST provides the capability to send multiple video and audio streams
    through a single port. This requires the API's between i915 and audio
    drivers to distinguish between multiple audio capable displays that can be
    connected to a port. Currently only the port identity is shared in the
    APIs. This patch adds support for MST with an additional parameter
    'int pipe'. The existing parameter 'port' does not change it's meaning.
    
    pipe =
            MST     : display pipe that the stream originates from
            Non-MST : -1
    
    Affected APIs:
    struct i915_audio_component_ops
    -       int (*sync_audio_rate)(struct device *, int port, int rate);
    +       int (*sync_audio_rate)(struct device *, int port, int pipe,
    +            int rate);
    
    -       int (*get_eld)(struct device *, int port, bool *enabled,
    -                       unsigned char *buf, int max_bytes);
    +       int (*get_eld)(struct device *, int port, int pipe,
    +                      bool *enabled, unsigned char *buf, int max_bytes);
    
    struct i915_audio_component_audio_ops
    -       void (*pin_eld_notify)(void *audio_ptr, int port);
    +       void (*pin_eld_notify)(void *audio_ptr, int port, int pipe);
    
    This patch makes dummy changes in the audio drivers (thanks Libin) for
    build to succeed. The audio side drivers will send the right 'pipe' values
    for MST in patches that will follow.
    
    v2:
    Renamed the new API parameter from 'dev_id' to 'pipe'. (Jim, Ville)
    Included Asoc driver API compatibility changes from Jeeja.
    Added WARN_ON() for invalid pipe in get_saved_encoder(). (Takashi)
    Added comment for av_enc_map[] definition. (Takashi)
    
    v3:
    Fixed logic error introduced while renaming 'dev_id' as 'pipe' (Ville)
    Renamed get_saved_encoder() to get_saved_enc() to reduce line length
    
    v4:
    Rebased.
    Parameter check for pipe < -1 values in get_saved_enc() (Ville)
    Switched to for_each_pipe() in get_saved_enc() (Ville)
    Renamed 'pipe' to 'dev_id' in audio side code (Takashi)
    
    v5:
    Included a comment for the dev_id arg. (Libin)
    
    Signed-off-by: Dhinakaran Pandiyan <dhinakaran.pandiyan@intel.com>
    Reviewed-by: Takashi Iwai <tiwai@suse.de>
    Reviewed-by: Ville SyrjÃ¤lÃ¤ <ville.syrjala@linux.intel.com>
    Signed-off-by: Rodrigo Vivi <rodrigo.vivi@intel.com>
    Link: http://patchwork.freedesktop.org/patch/msgid/1474488168-2343-1-git-send-email-dhinakaran.pandiyan@intel.com

diff --git a/include/drm/i915_component.h b/include/drm/i915_component.h
index b46fa0ef3005..545c6e0fea7d 100644
--- a/include/drm/i915_component.h
+++ b/include/drm/i915_component.h
@@ -64,7 +64,7 @@ struct i915_audio_component_ops {
 	 * Called from audio driver. After audio driver sets the
 	 * sample rate, it will call this function to set n/cts
 	 */
-	int (*sync_audio_rate)(struct device *, int port, int rate);
+	int (*sync_audio_rate)(struct device *, int port, int pipe, int rate);
 	/**
 	 * @get_eld: fill the audio state and ELD bytes for the given port
 	 *
@@ -77,7 +77,7 @@ struct i915_audio_component_ops {
 	 * Note that the returned size may be over @max_bytes.  Then it
 	 * implies that only a part of ELD has been copied to the buffer.
 	 */
-	int (*get_eld)(struct device *, int port, bool *enabled,
+	int (*get_eld)(struct device *, int port, int pipe, bool *enabled,
 		       unsigned char *buf, int max_bytes);
 };
 
@@ -97,7 +97,7 @@ struct i915_audio_component_audio_ops {
 	 * status accordingly (even when the HDA controller is in power save
 	 * mode).
 	 */
-	void (*pin_eld_notify)(void *audio_ptr, int port);
+	void (*pin_eld_notify)(void *audio_ptr, int port, int pipe);
 };
 
 /**

commit cae666ceb8c3f154351f7df29c522f7a7016bdc0
Author: Takashi Iwai <tiwai@suse.de>
Date:   Thu Nov 12 15:23:41 2015 +0100

    drm/i915: Add get_eld audio component
    
    Implement a new i915_audio_component_ops, get_eld().  It's called by
    the audio driver to fetch the current audio status and ELD of the
    given HDMI/DP port.  It returns the size of expected ELD bytes if it's
    valid, zero if no valid ELD is found, or a negative error code.  The
    current state of audio on/off is stored in the given pointer, too.
    
    Note that the returned size isn't limited to the given max bytes.  If
    the size is greater than the max bytes, it means that only a part of
    ELD has been copied back.
    
    For achieving this implementation, a new field audio_connector is
    added to struct intel_digital_port.  It points to the connector
    assigned to the given digital port.  It's set/reset at each audio
    enable/disable call in intel_audio.c, and protected with av_mutex.
    
    Reviewed-by: Daniel Vetter <daniel.vetter@ffwll.ch>
    Signed-off-by: Takashi Iwai <tiwai@suse.de>

diff --git a/include/drm/i915_component.h b/include/drm/i915_component.h
index fab13851f95a..b46fa0ef3005 100644
--- a/include/drm/i915_component.h
+++ b/include/drm/i915_component.h
@@ -65,6 +65,20 @@ struct i915_audio_component_ops {
 	 * sample rate, it will call this function to set n/cts
 	 */
 	int (*sync_audio_rate)(struct device *, int port, int rate);
+	/**
+	 * @get_eld: fill the audio state and ELD bytes for the given port
+	 *
+	 * Called from audio driver to get the HDMI/DP audio state of the given
+	 * digital port, and also fetch ELD bytes to the given pointer.
+	 *
+	 * It returns the byte size of the original ELD (not the actually
+	 * copied size), zero for an invalid ELD, or a negative error code.
+	 *
+	 * Note that the returned size may be over @max_bytes.  Then it
+	 * implies that only a part of ELD has been copied to the buffer.
+	 */
+	int (*get_eld)(struct device *, int port, bool *enabled,
+		       unsigned char *buf, int max_bytes);
 };
 
 /**

commit be15aad6e8ec09d9be1a3a563b7b17ba592df942
Author: David Henningsson <david.henningsson@canonical.com>
Date:   Fri Oct 16 11:24:24 2015 +0200

    drm/i915: Improve kernel-doc for i915_audio_component struct
    
    Signed-off-by: David Henningsson <david.henningsson@canonical.com>
    Link: http://patchwork.freedesktop.org/patch/msgid/1444987464-8657-1-git-send-email-david.henningsson@canonical.com
    Signed-off-by: Daniel Vetter <daniel.vetter@ffwll.ch>

diff --git a/include/drm/i915_component.h b/include/drm/i915_component.h
index 30d89e0da2c6..fab13851f95a 100644
--- a/include/drm/i915_component.h
+++ b/include/drm/i915_component.h
@@ -31,47 +31,80 @@
 #define MAX_PORTS 5
 
 /**
- * struct i915_audio_component_ops - callbacks defined in gfx driver
- * @owner: the module owner
- * @get_power: get the POWER_DOMAIN_AUDIO power well
- * @put_power: put the POWER_DOMAIN_AUDIO power well
- * @codec_wake_override: Enable/Disable generating the codec wake signal
- * @get_cdclk_freq: get the Core Display Clock in KHz
- * @sync_audio_rate: set n/cts based on the sample rate
+ * struct i915_audio_component_ops - Ops implemented by i915 driver, called by hda driver
  */
 struct i915_audio_component_ops {
+	/**
+	 * @owner: i915 module
+	 */
 	struct module *owner;
+	/**
+	 * @get_power: get the POWER_DOMAIN_AUDIO power well
+	 *
+	 * Request the power well to be turned on.
+	 */
 	void (*get_power)(struct device *);
+	/**
+	 * @put_power: put the POWER_DOMAIN_AUDIO power well
+	 *
+	 * Allow the power well to be turned off.
+	 */
 	void (*put_power)(struct device *);
+	/**
+	 * @codec_wake_override: Enable/disable codec wake signal
+	 */
 	void (*codec_wake_override)(struct device *, bool enable);
+	/**
+	 * @get_cdclk_freq: Get the Core Display Clock in kHz
+	 */
 	int (*get_cdclk_freq)(struct device *);
+	/**
+	 * @sync_audio_rate: set n/cts based on the sample rate
+	 *
+	 * Called from audio driver. After audio driver sets the
+	 * sample rate, it will call this function to set n/cts
+	 */
 	int (*sync_audio_rate)(struct device *, int port, int rate);
 };
 
+/**
+ * struct i915_audio_component_audio_ops - Ops implemented by hda driver, called by i915 driver
+ */
 struct i915_audio_component_audio_ops {
+	/**
+	 * @audio_ptr: Pointer to be used in call to pin_eld_notify
+	 */
 	void *audio_ptr;
 	/**
-	 * Call from i915 driver, notifying the HDA driver that
-	 * pin sense and/or ELD information has changed.
-	 * @audio_ptr:		HDA driver object
-	 * @port:	Which port has changed (PORTA / PORTB / PORTC etc)
+	 * @pin_eld_notify: Notify the HDA driver that pin sense and/or ELD information has changed
+	 *
+	 * Called when the i915 driver has set up audio pipeline or has just
+	 * begun to tear it down. This allows the HDA driver to update its
+	 * status accordingly (even when the HDA controller is in power save
+	 * mode).
 	 */
 	void (*pin_eld_notify)(void *audio_ptr, int port);
 };
 
 /**
- * struct i915_audio_component - used for audio video interaction
- * @dev: the device from gfx driver
- * @aud_sample_rate: the array of audio sample rate per port
- * @ops: callback for audio driver calling
- * @audio_ops: Call from i915 driver
+ * struct i915_audio_component - Used for direct communication between i915 and hda drivers
  */
 struct i915_audio_component {
+	/**
+	 * @dev: i915 device, used as parameter for ops
+	 */
 	struct device *dev;
+	/**
+	 * @aud_sample_rate: the array of audio sample rate per port
+	 */
 	int aud_sample_rate[MAX_PORTS];
-
+	/**
+	 * @ops: Ops implemented by i915 driver, called by hda driver
+	 */
 	const struct i915_audio_component_ops *ops;
-
+	/**
+	 * @audio_ops: Ops implemented by hda driver, called by i915 driver
+	 */
 	const struct i915_audio_component_audio_ops *audio_ops;
 };
 

commit 3f4c90bd203125c807a96f18d3195cf3a1988279
Author: Libin Yang <libin.yang@intel.com>
Date:   Thu Oct 1 17:01:08 2015 +0800

    drm/i915: add kerneldoc for i915_audio_component
    
    Add the kerneldoc for i915_audio_component in i915_component.h
    
    Signed-off-by: Libin Yang <libin.yang@intel.com>
    Signed-off-by: Daniel Vetter <daniel.vetter@ffwll.ch>

diff --git a/include/drm/i915_component.h b/include/drm/i915_component.h
index 89dc7d6bc1cc..30d89e0da2c6 100644
--- a/include/drm/i915_component.h
+++ b/include/drm/i915_component.h
@@ -30,38 +30,49 @@
  */
 #define MAX_PORTS 5
 
-struct i915_audio_component {
-	struct device *dev;
+/**
+ * struct i915_audio_component_ops - callbacks defined in gfx driver
+ * @owner: the module owner
+ * @get_power: get the POWER_DOMAIN_AUDIO power well
+ * @put_power: put the POWER_DOMAIN_AUDIO power well
+ * @codec_wake_override: Enable/Disable generating the codec wake signal
+ * @get_cdclk_freq: get the Core Display Clock in KHz
+ * @sync_audio_rate: set n/cts based on the sample rate
+ */
+struct i915_audio_component_ops {
+	struct module *owner;
+	void (*get_power)(struct device *);
+	void (*put_power)(struct device *);
+	void (*codec_wake_override)(struct device *, bool enable);
+	int (*get_cdclk_freq)(struct device *);
+	int (*sync_audio_rate)(struct device *, int port, int rate);
+};
+
+struct i915_audio_component_audio_ops {
+	void *audio_ptr;
 	/**
-	 * @aud_sample_rate: the array of audio sample rate per port
+	 * Call from i915 driver, notifying the HDA driver that
+	 * pin sense and/or ELD information has changed.
+	 * @audio_ptr:		HDA driver object
+	 * @port:	Which port has changed (PORTA / PORTB / PORTC etc)
 	 */
+	void (*pin_eld_notify)(void *audio_ptr, int port);
+};
+
+/**
+ * struct i915_audio_component - used for audio video interaction
+ * @dev: the device from gfx driver
+ * @aud_sample_rate: the array of audio sample rate per port
+ * @ops: callback for audio driver calling
+ * @audio_ops: Call from i915 driver
+ */
+struct i915_audio_component {
+	struct device *dev;
 	int aud_sample_rate[MAX_PORTS];
 
-	const struct i915_audio_component_ops {
-		struct module *owner;
-		void (*get_power)(struct device *);
-		void (*put_power)(struct device *);
-		void (*codec_wake_override)(struct device *, bool enable);
-		int (*get_cdclk_freq)(struct device *);
-		/**
-		 * @sync_audio_rate: set n/cts based on the sample rate
-		 *
-		 * Called from audio driver. After audio driver sets the
-		 * sample rate, it will call this function to set n/cts
-		 */
-		int (*sync_audio_rate)(struct device *, int port, int rate);
-	} *ops;
+	const struct i915_audio_component_ops *ops;
 
-	const struct i915_audio_component_audio_ops {
-		void *audio_ptr;
-		/**
-		 * Call from i915 driver, notifying the HDA driver that
-		 * pin sense and/or ELD information has changed.
-		 * @audio_ptr:		HDA driver object
-		 * @port:		Which port has changed (PORTA / PORTB / PORTC etc)
-		 */
-		void (*pin_eld_notify)(void *audio_ptr, int port);
-	} *audio_ops;
+	const struct i915_audio_component_audio_ops *audio_ops;
 };
 
 #endif /* _I915_COMPONENT_H_ */

commit 7e8275c2f2bbb384e18af37066b8b2f32b7d092f
Author: Libin Yang <libin.yang@intel.com>
Date:   Fri Sep 25 09:36:12 2015 +0800

    drm/i915: set proper N/CTS in modeset
    
    When modeset occurs and the TMDS frequency is set to some
    speical values, the N/CTS need to be set manually if audio
    is playing.
    
    Signed-off-by: Libin Yang <libin.yang@intel.com>
    Reviewed-by: Jani Nikula <jani.nikula@intel.com>
    Signed-off-by: Takashi Iwai <tiwai@suse.de>

diff --git a/include/drm/i915_component.h b/include/drm/i915_component.h
index e6d35d7239c0..89dc7d6bc1cc 100644
--- a/include/drm/i915_component.h
+++ b/include/drm/i915_component.h
@@ -24,8 +24,18 @@
 #ifndef _I915_COMPONENT_H_
 #define _I915_COMPONENT_H_
 
+/* MAX_PORT is the number of port
+ * It must be sync with I915_MAX_PORTS defined i915_drv.h
+ * 5 should be enough as only HSW, BDW, SKL need such fix.
+ */
+#define MAX_PORTS 5
+
 struct i915_audio_component {
 	struct device *dev;
+	/**
+	 * @aud_sample_rate: the array of audio sample rate per port
+	 */
+	int aud_sample_rate[MAX_PORTS];
 
 	const struct i915_audio_component_ops {
 		struct module *owner;

commit 5334240c30cb0058fa8c373bf0d653337833230d
Author: Libin Yang <libin.yang@intel.com>
Date:   Wed Sep 2 14:11:38 2015 +0800

    drm/i915: Add audio sync_audio_rate callback
    
    Add the sync_audio_rate callback.
    
    With the callback, audio driver can trigger
    i915 driver to set the proper N/CTS or N/M
    based on different sample rates.
    
    Signed-off-by: Libin Yang <libin.yang@intel.com>
    Reviewed-by: Jani Nikula <jani.nikula@intel.com>
    Signed-off-by: Takashi Iwai <tiwai@suse.de>

diff --git a/include/drm/i915_component.h b/include/drm/i915_component.h
index b2d56dd483d9..e6d35d7239c0 100644
--- a/include/drm/i915_component.h
+++ b/include/drm/i915_component.h
@@ -33,6 +33,13 @@ struct i915_audio_component {
 		void (*put_power)(struct device *);
 		void (*codec_wake_override)(struct device *, bool enable);
 		int (*get_cdclk_freq)(struct device *);
+		/**
+		 * @sync_audio_rate: set n/cts based on the sample rate
+		 *
+		 * Called from audio driver. After audio driver sets the
+		 * sample rate, it will call this function to set n/cts
+		 */
+		int (*sync_audio_rate)(struct device *, int port, int rate);
 	} *ops;
 
 	const struct i915_audio_component_audio_ops {

commit f0675d4a8ed9d3e863ff611561ee0944969a2784
Author: David Henningsson <david.henningsson@canonical.com>
Date:   Thu Sep 3 11:51:34 2015 +0200

    drm/i915: Drop port_mst_index parameter from pin/eld callback
    
    The port_mst_index parameter was reserved for future use, but
    maintainers prefer to add it later when it is actually used.
    
    [Note: this is an update patch to commit [51e1d83cab99: drm/i915: Call
     audio pin/ELD notify function] where I mistakenly applied the older
     version.  Jani and Daniel's review tags were to the latest version,
     so I add them below, too -- tiwai]
    
    Signed-off-by: David Henningsson <david.henningsson@canonical.com>
    Reviewed-by: Jani Nikula <jani.nikula@intel.com>
    Acked-by: Daniel Vetter <daniel@ffwll.ch>
    Signed-off-by: Takashi Iwai <tiwai@suse.de>

diff --git a/include/drm/i915_component.h b/include/drm/i915_component.h
index ab5bde3736b4..b2d56dd483d9 100644
--- a/include/drm/i915_component.h
+++ b/include/drm/i915_component.h
@@ -42,9 +42,8 @@ struct i915_audio_component {
 		 * pin sense and/or ELD information has changed.
 		 * @audio_ptr:		HDA driver object
 		 * @port:		Which port has changed (PORTA / PORTB / PORTC etc)
-		 * @port_mst_index:	Index within that port, for DisplayPort multistreaming
 		 */
-		void (*pin_eld_notify)(void *audio_ptr, int port, int port_mst_index);
+		void (*pin_eld_notify)(void *audio_ptr, int port);
 	} *audio_ops;
 };
 

commit 2a8ceedf787167e6b1670b89d44e8dffca14d19c
Author: David Henningsson <david.henningsson@canonical.com>
Date:   Wed Aug 19 10:48:55 2015 +0200

    drm/i915: Add audio pin sense / ELD callback
    
    This callback will be called by the i915 driver to notify the hda
    driver that its HDMI information needs to be refreshed, i e,
    that audio output is now available (or unavailable) - usually as a
    result of a monitor being plugged in (or unplugged).
    
    Signed-off-by: David Henningsson <david.henningsson@canonical.com>
    Reviewed-by: Jani Nikula <jani.nikula@intel.com>
    Acked-by: Daniel Vetter <daniel@ffwll.ch>
    Signed-off-by: Takashi Iwai <tiwai@suse.de>

diff --git a/include/drm/i915_component.h b/include/drm/i915_component.h
index c9a8b64aa33b..ab5bde3736b4 100644
--- a/include/drm/i915_component.h
+++ b/include/drm/i915_component.h
@@ -34,6 +34,18 @@ struct i915_audio_component {
 		void (*codec_wake_override)(struct device *, bool enable);
 		int (*get_cdclk_freq)(struct device *);
 	} *ops;
+
+	const struct i915_audio_component_audio_ops {
+		void *audio_ptr;
+		/**
+		 * Call from i915 driver, notifying the HDA driver that
+		 * pin sense and/or ELD information has changed.
+		 * @audio_ptr:		HDA driver object
+		 * @port:		Which port has changed (PORTA / PORTB / PORTC etc)
+		 * @port_mst_index:	Index within that port, for DisplayPort multistreaming
+		 */
+		void (*pin_eld_notify)(void *audio_ptr, int port, int port_mst_index);
+	} *audio_ops;
 };
 
 #endif /* _I915_COMPONENT_H_ */

commit 632f3ab95fe2ffebf09969a57ab21be409ed7dcc
Author: Lu, Han <han.lu@intel.com>
Date:   Tue May 5 09:05:47 2015 +0800

    drm/i915/audio: add codec wakeup override enabled/disable callback
    
    Add support for enabling codec wakeup override signal to allow
    re-enumeration of the controller on SKL after resume from low power state.
    
    In SKL, HDMI/DP codec and PCH HD Audio Controller are in different power
    wells, so it's necessary to reset display audio codecs when power well on,
    otherwise display audio codecs will disappear when resume from low power
    state.
    Reset steps when power on:
        enable codec wakeup -> azx_init_chip() -> disable codec wakeup
    
    v3 by Jani: Simplify to only support toggling the appropriate chicken bit.
    
    v4 by Han: add explanation and specify the hw swquence.
    
    Signed-off-by: Lu, Han <han.lu@intel.com>
    Signed-off-by: Jani Nikula <jani.nikula@intel.com>
    Acked-by: Daniel Vetter <daniel.vetter@ffwll.ch>
    Signed-off-by: Takashi Iwai <tiwai@suse.de>

diff --git a/include/drm/i915_component.h b/include/drm/i915_component.h
index 3e2f22e5bf3c..c9a8b64aa33b 100644
--- a/include/drm/i915_component.h
+++ b/include/drm/i915_component.h
@@ -31,6 +31,7 @@ struct i915_audio_component {
 		struct module *owner;
 		void (*get_power)(struct device *);
 		void (*put_power)(struct device *);
+		void (*codec_wake_override)(struct device *, bool enable);
 		int (*get_cdclk_freq)(struct device *);
 	} *ops;
 };

commit 58fddc288b5cec192ad9eb9221da7ed14d974a27
Author: Imre Deak <imre.deak@intel.com>
Date:   Thu Jan 8 17:54:14 2015 +0200

    drm/i915: add component support
    
    Register a component to be used to interface with the snd_hda_intel
    driver. This is meant to replace the same interface that is currently
    based on module symbol lookup.
    
    v2:
    - change roles between the hda and i915 components (Daniel)
    - add the implementation to a new file (Jani)
    - use better namespacing (Jani)
    v3:
    - move the implementation to intel_audio.c (Daniel)
    - rename display_component to audio_component (Daniel)
    - add kerneldoc (Daniel)
    v4:
    - run forgotten git rm i915_component.c (Jani)
    
    Signed-off-by: Imre Deak <imre.deak@intel.com>
    Reviewed-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Daniel Vetter <daniel.vetter@ffwll.ch>

diff --git a/include/drm/i915_component.h b/include/drm/i915_component.h
new file mode 100644
index 000000000000..3e2f22e5bf3c
--- /dev/null
+++ b/include/drm/i915_component.h
@@ -0,0 +1,38 @@
+/*
+ * Copyright Â© 2014 Intel Corporation
+ *
+ * Permission is hereby granted, free of charge, to any person obtaining a
+ * copy of this software and associated documentation files (the "Software"),
+ * to deal in the Software without restriction, including without limitation
+ * the rights to use, copy, modify, merge, publish, distribute, sublicense,
+ * and/or sell copies of the Software, and to permit persons to whom the
+ * Software is furnished to do so, subject to the following conditions:
+ *
+ * The above copyright notice and this permission notice (including the next
+ * paragraph) shall be included in all copies or substantial portions of the
+ * Software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
+ * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
+ * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
+ * IN THE SOFTWARE.
+ */
+
+#ifndef _I915_COMPONENT_H_
+#define _I915_COMPONENT_H_
+
+struct i915_audio_component {
+	struct device *dev;
+
+	const struct i915_audio_component_ops {
+		struct module *owner;
+		void (*get_power)(struct device *);
+		void (*put_power)(struct device *);
+		int (*get_cdclk_freq)(struct device *);
+	} *ops;
+};
+
+#endif /* _I915_COMPONENT_H_ */
