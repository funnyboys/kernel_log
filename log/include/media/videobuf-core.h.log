commit 77512baaea9ae397ec36767b9cd3e3a3920bb6d3
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Mon Jun 3 07:44:53 2019 +0200

    treewide: Replace GPLv2 boilerplate/reference with SPDX - rule 237
    
    Based on 1 normalized pattern(s):
    
      this program is free software you can redistribute it and or modify
      it under the terms of the gnu general public license as published by
      the free software foundation either version 2
    
    extracted by the scancode license scanner the SPDX license identifier
    
      GPL-2.0-only
    
    has been chosen to replace the boilerplate/reference in 8 file(s).
    
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Reviewed-by: Enrico Weigelt <info@metux.net>
    Reviewed-by: Alexios Zavras <alexios.zavras@intel.com>
    Reviewed-by: Allison Randal <allison@lohutok.net>
    Cc: linux-spdx@vger.kernel.org
    Link: https://lkml.kernel.org/r/20190602204654.096873163@linutronix.de
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/include/media/videobuf-core.h b/include/media/videobuf-core.h
index 2c4db97cd96f..2e01b2e9a1c0 100644
--- a/include/media/videobuf-core.h
+++ b/include/media/videobuf-core.h
@@ -1,3 +1,4 @@
+/* SPDX-License-Identifier: GPL-2.0-only */
 /*
  * generic helper functions for handling video4linux capture buffers
  *
@@ -7,10 +8,6 @@
  * (c) 2001,02 Gerd Knorr <kraxel@bytesex.org>
  * (c) 2006 Mauro Carvalho Chehab, <mchehab@kernel.org>
  * (c) 2006 Ted Walther and John Sokol
- *
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation; either version 2
  */
 
 #ifndef _VIDEOBUF_CORE_H

commit e907bf3c9820c8480b1d83aca42a5668c5364be9
Author: Mauro Carvalho Chehab <mchehab+samsung@kernel.org>
Date:   Mon Feb 18 14:29:06 2019 -0500

    media: include: fix several typos
    
    Use codespell to fix lots of typos over frontends.
    
    Manually verified to avoid false-positives.
    
    Signed-off-by: Mauro Carvalho Chehab <mchehab+samsung@kernel.org>
    Reviewed-by: Lad, Prabhakar <prabhakar.csengg@gmail.com>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+samsung@kernel.org>

diff --git a/include/media/videobuf-core.h b/include/media/videobuf-core.h
index 5684dc6f0d0d..2c4db97cd96f 100644
--- a/include/media/videobuf-core.h
+++ b/include/media/videobuf-core.h
@@ -43,7 +43,7 @@ struct videobuf_queue;
  * (which v4l2 uses).
  *
  * If there is a valid mapping for a buffer, buffer->baddr/bsize holds
- * userspace address + size which can be feeded into the
+ * userspace address + size which can be fed into the
  * videobuf_dma_init_user function listed above.
  *
  */

commit 15a40b27beb0a85d7f11d747bfc587dbeb69a96c
Author: Hans Verkuil <hverkuil-cisco@xs4all.nl>
Date:   Mon Jan 21 08:32:23 2019 -0500

    media: videobuf: use u64 for the timestamp internally
    
    Just like vb2 does, use u64 internally to store the timestamps
    of the buffers. Only convert to timeval when interfacing with
    userspace.
    
    Signed-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Acked-by: Sakari Ailus <sakari.ailus@linux.intel.com>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+samsung@kernel.org>

diff --git a/include/media/videobuf-core.h b/include/media/videobuf-core.h
index 60a664febba0..5684dc6f0d0d 100644
--- a/include/media/videobuf-core.h
+++ b/include/media/videobuf-core.h
@@ -80,7 +80,7 @@ struct videobuf_buffer {
 	struct list_head        queue;
 	wait_queue_head_t       done;
 	unsigned int            field_count;
-	struct timeval          ts;
+	u64			ts;
 
 	/* Memory type */
 	enum v4l2_memory        memory;

commit 3259081991a9398434f6f49468b960f136ac0158
Author: Mauro Carvalho Chehab <mchehab+samsung@kernel.org>
Date:   Wed Apr 25 05:34:48 2018 -0400

    MAINTAINERS & files: Canonize the e-mails I use at files
    
    From now on, I'll start using my @kernel.org as my development e-mail.
    
    As such, let's remove the entries that point to the old
    mchehab@s-opensource.com at MAINTAINERS file.
    
    For the files written with a copyright with mchehab@s-opensource,
    let's keep Samsung on their names, using mchehab+samsung@kernel.org,
    in order to keep pointing to my employer, with sponsors the work.
    
    For the files written before I join Samsung (on July, 4 2013),
    let's just use mchehab@kernel.org.
    
    For bug reports, we can simply point to just kernel.org, as
    this will reach my mchehab+samsung inbox anyway.
    
    Signed-off-by: Mauro Carvalho Chehab <mchehab@s-opensource.com>
    Signed-off-by: Brian Warner <brian.warner@samsung.com>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+samsung@kernel.org>

diff --git a/include/media/videobuf-core.h b/include/media/videobuf-core.h
index 0bda0adc744f..60a664febba0 100644
--- a/include/media/videobuf-core.h
+++ b/include/media/videobuf-core.h
@@ -1,11 +1,11 @@
 /*
  * generic helper functions for handling video4linux capture buffers
  *
- * (c) 2007 Mauro Carvalho Chehab, <mchehab@infradead.org>
+ * (c) 2007 Mauro Carvalho Chehab, <mchehab@kernel.org>
  *
  * Highly based on video-buf written originally by:
  * (c) 2001,02 Gerd Knorr <kraxel@bytesex.org>
- * (c) 2006 Mauro Carvalho Chehab, <mchehab@infradead.org>
+ * (c) 2006 Mauro Carvalho Chehab, <mchehab@kernel.org>
  * (c) 2006 Ted Walther and John Sokol
  *
  * This program is free software; you can redistribute it and/or modify

commit c23e0cb81e4021b9712b1093d54713991fd9b7c2
Author: Al Viro <viro@zeniv.linux.org.uk>
Date:   Mon Jul 3 03:02:56 2017 -0400

    media: annotate ->poll() instances
    
    Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>

diff --git a/include/media/videobuf-core.h b/include/media/videobuf-core.h
index d760aa73ebbb..0bda0adc744f 100644
--- a/include/media/videobuf-core.h
+++ b/include/media/videobuf-core.h
@@ -219,7 +219,7 @@ ssize_t videobuf_read_stream(struct videobuf_queue *q,
 ssize_t videobuf_read_one(struct videobuf_queue *q,
 			  char __user *data, size_t count, loff_t *ppos,
 			  int nonblocking);
-unsigned int videobuf_poll_stream(struct file *file,
+__poll_t videobuf_poll_stream(struct file *file,
 				  struct videobuf_queue *q,
 				  poll_table *wait);
 

commit e1c05067c323fb92d27418fb3586171bd7ce2e12
Author: Masahiro Yamada <yamada.masahiro@socionext.com>
Date:   Tue Jul 7 10:14:59 2015 +0900

    treewide: fix typos in comment blocks
    
    Looks like the word "contiguous" is often mistyped.
    
    Signed-off-by: Masahiro Yamada <yamada.masahiro@socionext.com>
    Signed-off-by: Jiri Kosina <jkosina@suse.com>

diff --git a/include/media/videobuf-core.h b/include/media/videobuf-core.h
index 8c6e825940e5..d760aa73ebbb 100644
--- a/include/media/videobuf-core.h
+++ b/include/media/videobuf-core.h
@@ -37,7 +37,7 @@ struct videobuf_queue;
  *
  * about the mmap helpers (videobuf_mmap_*):
  *
- * The mmaper function allows to map any subset of contingous buffers.
+ * The mmaper function allows to map any subset of contiguous buffers.
  * This includes one mmap() call for all buffers (which the original
  * video4linux API uses) as well as one mmap() for every single buffer
  * (which v4l2 uses).

commit 31361fc4632f20e3a108f56b1a1a9c9bf2dfc07c
Author: Mauro Carvalho Chehab <mchehab@redhat.com>
Date:   Thu Jul 5 18:01:55 2012 -0300

    [media] videobuf-core.h: remove input fields
    
    Now that the input fields got removed from the userspace API,
    there's no sense to keep there at the VB struct. Remove it.
    
    Cc: Sakari Ailus <sakari.ailus@iki.fi>
    Signed-off-by: Mauro Carvalho Chehab <mchehab@redhat.com>

diff --git a/include/media/videobuf-core.h b/include/media/videobuf-core.h
index 90ed895e217d..8c6e825940e5 100644
--- a/include/media/videobuf-core.h
+++ b/include/media/videobuf-core.h
@@ -72,7 +72,6 @@ struct videobuf_buffer {
 	unsigned int            height;
 	unsigned int            bytesperline; /* use only if != 0 */
 	unsigned long           size;
-	unsigned int            input;
 	enum v4l2_field         field;
 	enum videobuf_state     state;
 	struct list_head        stream;  /* QBUF/DQBUF list */
@@ -142,7 +141,6 @@ struct videobuf_queue {
 	wait_queue_head_t	   wait; /* wait if queue is empty */
 
 	enum v4l2_buf_type         type;
-	unsigned int               inputs; /* for V4L2_BUF_FLAG_INPUT */
 	unsigned int               msize;
 	enum v4l2_field            field;
 	enum v4l2_field            last;   /* for field=V4L2_FIELD_ALTERNATE */

commit 08af245de0cf6ab5f4ed008ee2bb99273774fce0
Author: Hans Verkuil <hverkuil@xs4all.nl>
Date:   Fri Dec 24 10:33:19 2010 -0300

    [media] V4L: remove V4L1 compatibility mode
    
    Signed-off-by: Hans Verkuil <hverkuil@xs4all.nl>
    Signed-off-by: Mauro Carvalho Chehab <mchehab@redhat.com>

diff --git a/include/media/videobuf-core.h b/include/media/videobuf-core.h
index 1d3835fc26be..90ed895e217d 100644
--- a/include/media/videobuf-core.h
+++ b/include/media/videobuf-core.h
@@ -17,10 +17,6 @@
 #define _VIDEOBUF_CORE_H
 
 #include <linux/poll.h>
-#ifdef CONFIG_VIDEO_V4L1_COMPAT
-#define __MIN_V4L1
-#include <linux/videodev.h>
-#endif
 #include <linux/videodev2.h>
 
 #define UNSET (-1U)
@@ -212,10 +208,6 @@ int videobuf_qbuf(struct videobuf_queue *q,
 		  struct v4l2_buffer *b);
 int videobuf_dqbuf(struct videobuf_queue *q,
 		   struct v4l2_buffer *b, int nonblocking);
-#ifdef CONFIG_VIDEO_V4L1_COMPAT
-int videobuf_cgmbuf(struct videobuf_queue *q,
-		    struct video_mbuf *mbuf, int count);
-#endif
 int videobuf_streamon(struct videobuf_queue *q);
 int videobuf_streamoff(struct videobuf_queue *q);
 

commit 0e0809a58869e3e422985f868ad5e0da1fc0ba85
Author: Hans Verkuil <hverkuil@xs4all.nl>
Date:   Sun Sep 26 09:01:26 2010 -0300

    V4L/DVB: videobuf: add queue argument to videobuf_waiton()
    
    videobuf_waiton() must unlock and relock ext_lock if it has to wait.
    For that to happen it needs the videobuf_queue pointer.
    
    Don't attempt to unlock/relock q->ext_lock unless it was locked in the
    first place.
    
    vb->state has to be protected by a spinlock to be safe.
    
    This patch is based on code from Mauro Carvalho Chehab <mchehab@redhat.com>.
    
    [mchehab@redhat.com: add extra argument to a few missing places]
    Signed-off-by: Hans Verkuil <hverkuil@xs4all.nl>
    Signed-off-by: Mauro Carvalho Chehab <mchehab@redhat.com>

diff --git a/include/media/videobuf-core.h b/include/media/videobuf-core.h
index 9a4194557e4a..1d3835fc26be 100644
--- a/include/media/videobuf-core.h
+++ b/include/media/videobuf-core.h
@@ -180,7 +180,8 @@ static inline void videobuf_queue_unlock(struct videobuf_queue *q)
 		mutex_unlock(&q->vb_lock);
 }
 
-int videobuf_waiton(struct videobuf_buffer *vb, int non_blocking, int intr);
+int videobuf_waiton(struct videobuf_queue *q, struct videobuf_buffer *vb,
+		int non_blocking, int intr);
 int videobuf_iolock(struct videobuf_queue *q, struct videobuf_buffer *vb,
 		struct v4l2_framebuffer *fbuf);
 

commit 08bff03ed697a583612b62a6ac566bd5bce98012
Author: Hans Verkuil <hverkuil@xs4all.nl>
Date:   Mon Sep 20 17:39:46 2010 -0300

    V4L/DVB: videobuf: add ext_lock argument to the queue init functions
    
    Add an ext_lock argument to the videobuf init functions. This allows
    drivers to pass the vdev->lock pointer (or any other externally held lock)
    to videobuf. For now all drivers just pass NULL.
    
    Signed-off-by: Hans Verkuil <hverkuil@xs4all.nl>
    Signed-off-by: Mauro Carvalho Chehab <mchehab@redhat.com>

diff --git a/include/media/videobuf-core.h b/include/media/videobuf-core.h
index f5eb2cbf3002..9a4194557e4a 100644
--- a/include/media/videobuf-core.h
+++ b/include/media/videobuf-core.h
@@ -198,7 +198,8 @@ void videobuf_queue_core_init(struct videobuf_queue *q,
 			 enum v4l2_field field,
 			 unsigned int msize,
 			 void *priv,
-			 struct videobuf_qtype_ops *int_ops);
+			 struct videobuf_qtype_ops *int_ops,
+			 struct mutex *ext_lock);
 int  videobuf_queue_is_busy(struct videobuf_queue *q);
 void videobuf_queue_cancel(struct videobuf_queue *q);
 

commit 97397687886aa8ecd4ec603fab9e70e970c11597
Author: Hans Verkuil <hverkuil@xs4all.nl>
Date:   Mon Sep 20 17:24:30 2010 -0300

    V4L/DVB: videobuf: prepare to make locking optional in videobuf
    
    Currently videobuf uses the vb_lock mutex to lock its data structures.
    But this locking will (optionally) move into the v4l2 core, which means
    that in that case vb_lock shouldn't be used since the external lock is already
    held.
    
    Prepare for this by adding a pointer to such an external mutex and
    don't lock if that pointer is set.
    
    Signed-off-by: Hans Verkuil <hverkuil@xs4all.nl>
    Signed-off-by: Mauro Carvalho Chehab <mchehab@redhat.com>

diff --git a/include/media/videobuf-core.h b/include/media/videobuf-core.h
index f2c41cebf453..f5eb2cbf3002 100644
--- a/include/media/videobuf-core.h
+++ b/include/media/videobuf-core.h
@@ -139,6 +139,7 @@ struct videobuf_qtype_ops {
 
 struct videobuf_queue {
 	struct mutex               vb_lock;
+	struct mutex               *ext_lock;
 	spinlock_t                 *irqlock;
 	struct device		   *dev;
 
@@ -167,6 +168,18 @@ struct videobuf_queue {
 	void                       *priv_data;
 };
 
+static inline void videobuf_queue_lock(struct videobuf_queue *q)
+{
+	if (!q->ext_lock)
+		mutex_lock(&q->vb_lock);
+}
+
+static inline void videobuf_queue_unlock(struct videobuf_queue *q)
+{
+	if (!q->ext_lock)
+		mutex_unlock(&q->vb_lock);
+}
+
 int videobuf_waiton(struct videobuf_buffer *vb, int non_blocking, int intr);
 int videobuf_iolock(struct videobuf_queue *q, struct videobuf_buffer *vb,
 		struct v4l2_framebuffer *fbuf);

commit 959794ddc05ab6fbcd458bc093e7f0b92633d052
Author: Laurent Pinchart <laurent.pinchart@ideasonboard.com>
Date:   Tue May 11 10:36:33 2010 -0300

    V4L/DVB: videobuf: Remove videobuf_mapping start and end fields
    
    The fields are assigned but never used, remove them.
    
    Signed-off-by: Laurent Pinchart <laurent.pinchart@ideasonboard.com>
    Signed-off-by: Mauro Carvalho Chehab <mchehab@redhat.com>

diff --git a/include/media/videobuf-core.h b/include/media/videobuf-core.h
index a157cd166e6e..f2c41cebf453 100644
--- a/include/media/videobuf-core.h
+++ b/include/media/videobuf-core.h
@@ -54,8 +54,6 @@ struct videobuf_queue;
 
 struct videobuf_mapping {
 	unsigned int count;
-	unsigned long start;
-	unsigned long end;
 	struct videobuf_queue *q;
 };
 

commit 33c38283f03d8ea0358229fc03c1beebe67aed0e
Author: Pawel Osciak <p.osciak@samsung.com>
Date:   Tue May 11 10:36:28 2010 -0300

    V4L/DVB: videobuf: rename videobuf_alloc to videobuf_alloc_vb
    
    These functions allocate videobuf_buffer structures only. Renaming in order
    to prevent confusion with functions allocating actual video buffer memory.
    
    Rename the functions in videobuf-core.h videobuf-dma-sg.c as well.
    
    Signed-off-by: Pawel Osciak <p.osciak@samsung.com>
    Signed-off-by: Laurent Pinchart <laurent.pinchart@ideasonboard.com>
    Signed-off-by: Kyungmin Park <kyungmin.park@samsung.com>
    Signed-off-by: Mauro Carvalho Chehab <mchehab@redhat.com>

diff --git a/include/media/videobuf-core.h b/include/media/videobuf-core.h
index f91a736c133d..a157cd166e6e 100644
--- a/include/media/videobuf-core.h
+++ b/include/media/videobuf-core.h
@@ -127,7 +127,7 @@ struct videobuf_queue_ops {
 struct videobuf_qtype_ops {
 	u32                     magic;
 
-	struct videobuf_buffer *(*alloc)(size_t size);
+	struct videobuf_buffer *(*alloc_vb)(size_t size);
 	void *(*vaddr)		(struct videobuf_buffer *buf);
 	int (*iolock)		(struct videobuf_queue *q,
 				 struct videobuf_buffer *vb,
@@ -173,7 +173,7 @@ int videobuf_waiton(struct videobuf_buffer *vb, int non_blocking, int intr);
 int videobuf_iolock(struct videobuf_queue *q, struct videobuf_buffer *vb,
 		struct v4l2_framebuffer *fbuf);
 
-struct videobuf_buffer *videobuf_alloc(struct videobuf_queue *q);
+struct videobuf_buffer *videobuf_alloc_vb(struct videobuf_queue *q);
 
 /* Used on videobuf-dvb */
 void *videobuf_queue_to_vaddr(struct videobuf_queue *q,

commit 0b62b73778554cd47480ea465f0b255cc63b4336
Author: Hans Verkuil <hverkuil@xs4all.nl>
Date:   Sun Mar 28 09:09:05 2010 -0300

    V4L/DVB: v4l videobuf: add videobuf_buffer *buf as argument to mmap_mapper
    
    mmap_mapper should operate on a buffer, not on a complete queue. So let
    the videobuf-core find the correct buffer instead of duplicating that
    code in each mmap_mapper implementation.
    
    The dma-sg implementation has backwards compatibility code for handling
    the V4L1_COMPAT layer. This code is now under the v4L1_COMPAT config option.
    
    Signed-off-by: Hans Verkuil <hverkuil@xs4all.nl>
    Signed-off-by: Mauro Carvalho Chehab <mchehab@redhat.com>

diff --git a/include/media/videobuf-core.h b/include/media/videobuf-core.h
index 821a530f4957..f91a736c133d 100644
--- a/include/media/videobuf-core.h
+++ b/include/media/videobuf-core.h
@@ -135,7 +135,8 @@ struct videobuf_qtype_ops {
 	int (*sync)		(struct videobuf_queue *q,
 				 struct videobuf_buffer *buf);
 	int (*mmap_mapper)	(struct videobuf_queue *q,
-				struct vm_area_struct *vma);
+				 struct videobuf_buffer *buf,
+				 struct vm_area_struct *vma);
 };
 
 struct videobuf_queue {

commit 37111039c9521c751ce0597c129fe6d45ba72818
Author: Hans Verkuil <hverkuil@xs4all.nl>
Date:   Sun Mar 28 09:22:53 2010 -0300

    V4L/DVB: v4l videobuf: move video_copy_to_user and copy_stream to core
    
    The video_copy_to_user and copy_stream ops are almost identical for all
    videobuf memtype variants. All that is needed is to use the new vaddr
    op and these functions can be moved into the core, ensuring we have just
    one single implementation instead of three.
    
    Signed-off-by: Hans Verkuil <hverkuil@xs4all.nl>
    Signed-off-by: Mauro Carvalho Chehab <mchehab@redhat.com>

diff --git a/include/media/videobuf-core.h b/include/media/videobuf-core.h
index f73e297e3735..821a530f4957 100644
--- a/include/media/videobuf-core.h
+++ b/include/media/videobuf-core.h
@@ -134,16 +134,6 @@ struct videobuf_qtype_ops {
 				 struct v4l2_framebuffer *fbuf);
 	int (*sync)		(struct videobuf_queue *q,
 				 struct videobuf_buffer *buf);
-	int (*video_copy_to_user)(struct videobuf_queue *q,
-				 char __user *data,
-				 size_t count,
-				 int nonblocking);
-	int (*copy_stream)	(struct videobuf_queue *q,
-				 char __user *data,
-				 size_t count,
-				 size_t pos,
-				 int vbihack,
-				 int nonblocking);
 	int (*mmap_mapper)	(struct videobuf_queue *q,
 				struct vm_area_struct *vma);
 };

commit f4fce60e8b1559306fa1112287bc8765f6977de3
Author: Hans Verkuil <hverkuil@xs4all.nl>
Date:   Sun Mar 28 08:33:23 2010 -0300

    V4L/DVB: v4l videobuf: rename videobuf_queue_to_vmalloc to videobuf_queue_to_vaddr
    
    Ths function returns the virtual kernel address of the buffer and has
    nothing to do with allocation.
    
    Signed-off-by: Hans Verkuil <hverkuil@xs4all.nl>
    Signed-off-by: Mauro Carvalho Chehab <mchehab@redhat.com>

diff --git a/include/media/videobuf-core.h b/include/media/videobuf-core.h
index 8fe3254ed952..f73e297e3735 100644
--- a/include/media/videobuf-core.h
+++ b/include/media/videobuf-core.h
@@ -185,8 +185,8 @@ int videobuf_iolock(struct videobuf_queue *q, struct videobuf_buffer *vb,
 struct videobuf_buffer *videobuf_alloc(struct videobuf_queue *q);
 
 /* Used on videobuf-dvb */
-void *videobuf_queue_to_vmalloc(struct videobuf_queue *q,
-				struct videobuf_buffer *buf);
+void *videobuf_queue_to_vaddr(struct videobuf_queue *q,
+			      struct videobuf_buffer *buf);
 
 void videobuf_queue_core_init(struct videobuf_queue *q,
 			 const struct videobuf_queue_ops *ops,

commit 037c75eb14cd6adb837f81f0c2b2a52c31c91e69
Author: Hans Verkuil <hverkuil@xs4all.nl>
Date:   Sun Mar 28 08:18:37 2010 -0300

    V4L/DVB: v4l videobuf: rename .vmalloc to .vaddr
    
    Rename the .vmalloc op in struct videobuf_qtype_ops to .vaddr. This op returns
    the virtual kernel address of a buffer. vaddr is a lot less confusing than
    vmalloc since this callback does do any allocations.
    
    Signed-off-by: Hans Verkuil <hverkuil@xs4all.nl>
    Signed-off-by: Mauro Carvalho Chehab <mchehab@redhat.com>

diff --git a/include/media/videobuf-core.h b/include/media/videobuf-core.h
index 4497e23c9d29..8fe3254ed952 100644
--- a/include/media/videobuf-core.h
+++ b/include/media/videobuf-core.h
@@ -128,7 +128,7 @@ struct videobuf_qtype_ops {
 	u32                     magic;
 
 	struct videobuf_buffer *(*alloc)(size_t size);
-	void *(*vmalloc)	(struct videobuf_buffer *buf);
+	void *(*vaddr)		(struct videobuf_buffer *buf);
 	int (*iolock)		(struct videobuf_queue *q,
 				 struct videobuf_buffer *vb,
 				 struct v4l2_framebuffer *fbuf);

commit a4cf4cac2979a828e7cd0a3cd02d7a5308a44a7f
Author: Hans Verkuil <hverkuil@xs4all.nl>
Date:   Sun Mar 28 08:09:44 2010 -0300

    V4L/DVB: v4l videobuf: use struct videobuf_buffer * instead of void * for videobuf_alloc
    
    videobuf_alloc() returned a void *. Change to struct videobuf_buffer *
    to get better type checking.
    
    Signed-off-by: Hans Verkuil <hverkuil@xs4all.nl>
    Signed-off-by: Mauro Carvalho Chehab <mchehab@redhat.com>

diff --git a/include/media/videobuf-core.h b/include/media/videobuf-core.h
index 22d5a02884ad..4497e23c9d29 100644
--- a/include/media/videobuf-core.h
+++ b/include/media/videobuf-core.h
@@ -127,7 +127,7 @@ struct videobuf_queue_ops {
 struct videobuf_qtype_ops {
 	u32                     magic;
 
-	void *(*alloc)		(size_t size);
+	struct videobuf_buffer *(*alloc)(size_t size);
 	void *(*vmalloc)	(struct videobuf_buffer *buf);
 	int (*iolock)		(struct videobuf_queue *q,
 				 struct videobuf_buffer *vb,
@@ -182,7 +182,7 @@ int videobuf_waiton(struct videobuf_buffer *vb, int non_blocking, int intr);
 int videobuf_iolock(struct videobuf_queue *q, struct videobuf_buffer *vb,
 		struct v4l2_framebuffer *fbuf);
 
-void *videobuf_alloc(struct videobuf_queue* q);
+struct videobuf_buffer *videobuf_alloc(struct videobuf_queue *q);
 
 /* Used on videobuf-dvb */
 void *videobuf_queue_to_vmalloc(struct videobuf_queue *q,

commit 63e424856b4ab0652c58f75a2d2ecb9c1f95db27
Author: Hans Verkuil <hverkuil@xs4all.nl>
Date:   Sun Mar 28 07:59:11 2010 -0300

    V4L/DVB: v4l videobuf: remove unused is_mmapped field
    
    Thanks to Pawel Osciak for noticing this.
    
    Signed-off-by: Hans Verkuil <hverkuil@xs4all.nl>
    Signed-off-by: Mauro Carvalho Chehab <mchehab@redhat.com>

diff --git a/include/media/videobuf-core.h b/include/media/videobuf-core.h
index 345ec5a45c55..22d5a02884ad 100644
--- a/include/media/videobuf-core.h
+++ b/include/media/videobuf-core.h
@@ -166,7 +166,6 @@ struct videobuf_queue {
 
 	unsigned int               streaming:1;
 	unsigned int               reading:1;
-	unsigned int		   is_mmapped:1;
 
 	/* capture via mmap() + ioctl(QBUF/DQBUF) */
 	struct list_head           stream;

commit 53aaf07637baae8f53c33b803bbc96047d8da1c4
Author: Hans Verkuil <hverkuil@xs4all.nl>
Date:   Sun Mar 28 07:54:29 2010 -0300

    V4L/DVB: v4l videobuf: remove mmap_free callback
    
    Remove the mmap_free callback from struct videobuf_qtype_ops.
    
    All implementations of this callback do the same trivial check: return
    -EBUSY if any buffer is mmapped. That can also be tested in the
    videobuf core.
    
    Signed-off-by: Hans Verkuil <hverkuil@xs4all.nl>
    Signed-off-by: Mauro Carvalho Chehab <mchehab@redhat.com>

diff --git a/include/media/videobuf-core.h b/include/media/videobuf-core.h
index 3896e29a652d..345ec5a45c55 100644
--- a/include/media/videobuf-core.h
+++ b/include/media/videobuf-core.h
@@ -144,7 +144,6 @@ struct videobuf_qtype_ops {
 				 size_t pos,
 				 int vbihack,
 				 int nonblocking);
-	int (*mmap_free)	(struct videobuf_queue *q);
 	int (*mmap_mapper)	(struct videobuf_queue *q,
 				struct vm_area_struct *vma);
 };

commit 33435167e6dc9e23a97a494cec6b8ca47f8ded75
Author: Hans Verkuil <hverkuil@xs4all.nl>
Date:   Sun Mar 28 07:34:18 2010 -0300

    V4L/DVB: v4l videobuf: remove unused mmap callback
    
    The mmap callback in struct videobuf_qtype_ops is never used.
    Remove.
    
    Signed-off-by: Hans Verkuil <hverkuil@xs4all.nl>
    Signed-off-by: Mauro Carvalho Chehab <mchehab@redhat.com>

diff --git a/include/media/videobuf-core.h b/include/media/videobuf-core.h
index b1f7bf423fd3..3896e29a652d 100644
--- a/include/media/videobuf-core.h
+++ b/include/media/videobuf-core.h
@@ -132,10 +132,6 @@ struct videobuf_qtype_ops {
 	int (*iolock)		(struct videobuf_queue *q,
 				 struct videobuf_buffer *vb,
 				 struct v4l2_framebuffer *fbuf);
-	int (*mmap)		(struct videobuf_queue *q,
-				 unsigned int *count,
-				 unsigned int *size,
-				 enum v4l2_memory memory);
 	int (*sync)		(struct videobuf_queue *q,
 				 struct videobuf_buffer *buf);
 	int (*video_copy_to_user)(struct videobuf_queue *q,

commit 7a02264ca9ec5409e22b9d41f32b431d08eadbce
Author: Pawel Osciak <p.osciak@samsung.com>
Date:   Wed Mar 17 04:01:04 2010 -0300

    V4L/DVB: v4l: videobuf: code cleanup
    
    Make videobuf pass checkpatch; minor code cleanups.
    
    Signed-off-by: Pawel Osciak <p.osciak@samsung.com>
    Reviewed-by: Kyungmin Park <kyungmin.park@samsung.com>
    Signed-off-by: Mauro Carvalho Chehab <mchehab@redhat.com>

diff --git a/include/media/videobuf-core.h b/include/media/videobuf-core.h
index 316fdccdcaa0..b1f7bf423fd3 100644
--- a/include/media/videobuf-core.h
+++ b/include/media/videobuf-core.h
@@ -129,14 +129,14 @@ struct videobuf_qtype_ops {
 
 	void *(*alloc)		(size_t size);
 	void *(*vmalloc)	(struct videobuf_buffer *buf);
-	int (*iolock)		(struct videobuf_queue* q,
+	int (*iolock)		(struct videobuf_queue *q,
 				 struct videobuf_buffer *vb,
 				 struct v4l2_framebuffer *fbuf);
 	int (*mmap)		(struct videobuf_queue *q,
 				 unsigned int *count,
 				 unsigned int *size,
 				 enum v4l2_memory memory);
-	int (*sync)		(struct videobuf_queue* q,
+	int (*sync)		(struct videobuf_queue *q,
 				 struct videobuf_buffer *buf);
 	int (*video_copy_to_user)(struct videobuf_queue *q,
 				 char __user *data,
@@ -185,14 +185,14 @@ struct videobuf_queue {
 };
 
 int videobuf_waiton(struct videobuf_buffer *vb, int non_blocking, int intr);
-int videobuf_iolock(struct videobuf_queue* q, struct videobuf_buffer *vb,
+int videobuf_iolock(struct videobuf_queue *q, struct videobuf_buffer *vb,
 		struct v4l2_framebuffer *fbuf);
 
 void *videobuf_alloc(struct videobuf_queue* q);
 
 /* Used on videobuf-dvb */
-void *videobuf_queue_to_vmalloc (struct videobuf_queue* q,
-				 struct videobuf_buffer *buf);
+void *videobuf_queue_to_vmalloc(struct videobuf_queue *q,
+				struct videobuf_buffer *buf);
 
 void videobuf_queue_core_init(struct videobuf_queue *q,
 			 const struct videobuf_queue_ops *ops,

commit 38a54f35a0a90c0b62b111dd4de24248b22616b9
Author: Jonathan Corbet <corbet@lwn.net>
Date:   Tue Nov 17 19:43:41 2009 -0300

    V4L/DVB (13377): make struct videobuf_queue_ops constant
    
    The videobuf_queue_ops function vector is not declared constant, but
    there's no need for the videobuf layer to ever change it.  Make it const
    so that videobuf users can make their operations const without warnings.
    
    Signed-off-by: Jonathan Corbet <corbet@lwn.net>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Mauro Carvalho Chehab <mchehab@redhat.com>

diff --git a/include/media/videobuf-core.h b/include/media/videobuf-core.h
index 1c5946c44758..316fdccdcaa0 100644
--- a/include/media/videobuf-core.h
+++ b/include/media/videobuf-core.h
@@ -166,7 +166,7 @@ struct videobuf_queue {
 	enum v4l2_field            field;
 	enum v4l2_field            last;   /* for field=V4L2_FIELD_ALTERNATE */
 	struct videobuf_buffer     *bufs[VIDEO_MAX_FRAME];
-	struct videobuf_queue_ops  *ops;
+	const struct videobuf_queue_ops  *ops;
 	struct videobuf_qtype_ops  *int_ops;
 
 	unsigned int               streaming:1;
@@ -195,7 +195,7 @@ void *videobuf_queue_to_vmalloc (struct videobuf_queue* q,
 				 struct videobuf_buffer *buf);
 
 void videobuf_queue_core_init(struct videobuf_queue *q,
-			 struct videobuf_queue_ops *ops,
+			 const struct videobuf_queue_ops *ops,
 			 struct device *dev,
 			 spinlock_t *irqlock,
 			 enum v4l2_buf_type type,

commit 5e585ef15b3633e1b0c022aa14bc88587827acd3
Author: Mauro Carvalho Chehab <mchehab@redhat.com>
Date:   Tue Mar 10 18:30:27 2009 -0300

    V4L/DVB (10908): videobuf-core: also needs a minimal subset of V4L1 header
    
    Signed-off-by: Mauro Carvalho Chehab <mchehab@redhat.com>

diff --git a/include/media/videobuf-core.h b/include/media/videobuf-core.h
index 874f1340d049..1c5946c44758 100644
--- a/include/media/videobuf-core.h
+++ b/include/media/videobuf-core.h
@@ -18,6 +18,7 @@
 
 #include <linux/poll.h>
 #ifdef CONFIG_VIDEO_V4L1_COMPAT
+#define __MIN_V4L1
 #include <linux/videodev.h>
 #endif
 #include <linux/videodev2.h>

commit 81b2dbcad86732ffc02bad87aa25c4651199fc77
Author: Arjan van de Ven <arjan@linux.intel.com>
Date:   Tue May 20 09:53:52 2008 -0700

    Fix a deadlock in the bttv driver
    
    vidiocgmbuf() does this:
            mutex_lock(&fh->cap.vb_lock);
            retval = videobuf_mmap_setup(&fh->cap, gbuffers, gbufsize,
                                         V4L2_MEMORY_MMAP);
    
    and videobuf_mmap_setup() then just does
            mutex_lock(&q->vb_lock);
            ret = __videobuf_mmap_setup(q, bcount, bsize, memory);
            mutex_unlock(&q->vb_lock);
    
    which is an obvious double-take deadlock.
    
    This patch fixes this by having vidiocgmbuf() just call the
    __videobuf_mmap_setup function instead.
    
    Acked-by: Mauro Carvalho Chehab <mchehab@infradead.org>
    Reported-by: Koos Vriezen <koos.vriezen@gmail.com>
    Signed-off-by: Arjan van de Ven <arjan@linux.intel.com>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

diff --git a/include/media/videobuf-core.h b/include/media/videobuf-core.h
index 5b39a22533fe..874f1340d049 100644
--- a/include/media/videobuf-core.h
+++ b/include/media/videobuf-core.h
@@ -237,6 +237,9 @@ unsigned int videobuf_poll_stream(struct file *file,
 int videobuf_mmap_setup(struct videobuf_queue *q,
 			unsigned int bcount, unsigned int bsize,
 			enum v4l2_memory memory);
+int __videobuf_mmap_setup(struct videobuf_queue *q,
+			unsigned int bcount, unsigned int bsize,
+			enum v4l2_memory memory);
 int videobuf_mmap_free(struct videobuf_queue *q);
 int videobuf_mmap_mapper(struct videobuf_queue *q,
 			 struct vm_area_struct *vma);

commit 59d3448995a4c0ca98cbe82f6dac9460323377c1
Author: Mauro Carvalho Chehab <mchehab@infradead.org>
Date:   Sun Apr 13 15:10:00 2008 -0300

    V4L/DVB (7566): videobuf-dvb: allow its usage with videobuf-vmalloc
    
    videobuf-dvb were still using a function that were videobuf-dma-sg
    dependent. This patch creates a generic handler for this function. This
    way, videobuf-dvb can now work with all videobuf implementations.
    
    Signed-off-by: Mauro Carvalho Chehab <mchehab@infradead.org>

diff --git a/include/media/videobuf-core.h b/include/media/videobuf-core.h
index 377a6c6e931b..5b39a22533fe 100644
--- a/include/media/videobuf-core.h
+++ b/include/media/videobuf-core.h
@@ -13,6 +13,9 @@
  * the Free Software Foundation; either version 2
  */
 
+#ifndef _VIDEOBUF_CORE_H
+#define _VIDEOBUF_CORE_H
+
 #include <linux/poll.h>
 #ifdef CONFIG_VIDEO_V4L1_COMPAT
 #include <linux/videodev.h>
@@ -123,7 +126,8 @@ struct videobuf_queue_ops {
 struct videobuf_qtype_ops {
 	u32                     magic;
 
-	void* (*alloc)		(size_t size);
+	void *(*alloc)		(size_t size);
+	void *(*vmalloc)	(struct videobuf_buffer *buf);
 	int (*iolock)		(struct videobuf_queue* q,
 				 struct videobuf_buffer *vb,
 				 struct v4l2_framebuffer *fbuf);
@@ -185,6 +189,10 @@ int videobuf_iolock(struct videobuf_queue* q, struct videobuf_buffer *vb,
 
 void *videobuf_alloc(struct videobuf_queue* q);
 
+/* Used on videobuf-dvb */
+void *videobuf_queue_to_vmalloc (struct videobuf_queue* q,
+				 struct videobuf_buffer *buf);
+
 void videobuf_queue_core_init(struct videobuf_queue *q,
 			 struct videobuf_queue_ops *ops,
 			 struct device *dev,
@@ -233,10 +241,4 @@ int videobuf_mmap_free(struct videobuf_queue *q);
 int videobuf_mmap_mapper(struct videobuf_queue *q,
 			 struct vm_area_struct *vma);
 
-/* --------------------------------------------------------------------- */
-
-/*
- * Local variables:
- * c-basic-offset: 8
- * End:
- */
+#endif

commit 137d1cb19d9da163ce6cb57a6fa1e6a3468af6a4
Author: Brandon Philips <brandon@ifup.org>
Date:   Wed Apr 2 18:10:59 2008 -0300

    V4L/DVB (7493): videobuf: Avoid deadlock with QBUF and bring up to spec for empty queue
    
    Add a waitqueue to wait on when there are no buffers in the buffer queue.
    DQBUF waits on this queue without holding vb_lock to allow a QBUF to happen.
    Once a buffer has been queued we recheck that the queue is still streaming and
    wait on the new buffer's waitqueue while holding the vb_lock.  The driver
    should come along in a timely manner and put the buffer into its next state
    finishing the DQBUF.
    
    By implementing this waitqueue it also brings the videobuf DQBUF up to spec and
    it now blocks on O_NONBLOCK even when no buffers have been queued via QBUF:
    
    "By default VIDIOC_DQBUF blocks when no buffer is in the outgoing queue."
     - V4L2 spec
    
    Signed-off-by: Brandon Philips <bphilips@suse.de>
    CC: Trent Piepho <xyzzy@speakeasy.org>
    CC: Carl Karsten <carl@personnelware.com>
    CC: Jonathan Corbet <corbet@lwn.net>
    Signed-off-by: Mauro Carvalho Chehab <mchehab@infradead.org>

diff --git a/include/media/videobuf-core.h b/include/media/videobuf-core.h
index fcdffdd63304..377a6c6e931b 100644
--- a/include/media/videobuf-core.h
+++ b/include/media/videobuf-core.h
@@ -153,6 +153,8 @@ struct videobuf_queue {
 	spinlock_t                 *irqlock;
 	struct device		   *dev;
 
+	wait_queue_head_t	   wait; /* wait if queue is empty */
+
 	enum v4l2_buf_type         type;
 	unsigned int               inputs; /* for V4L2_BUF_FLAG_INPUT */
 	unsigned int               msize;

commit e9bcf6675d6da1a1e9925b2bdfc21f8d2330a1c5
Author: Guennadi Liakhovetski <g.liakhovetski@pengutronix.de>
Date:   Tue Apr 22 14:46:02 2008 -0300

    V4L/DVB (7376): Improve compile-time type-checking in videobuf
    
    Make the dev member of the struct videobuf_queue of type "struct device *"
    to avoid future problems. Also change the prototype of the
    videobuf_queue_core_init() function.
    
    Signed-off-by: Guennadi Liakhovetski <g.liakhovetski@pengutronix.de>
    Signed-off-by: Mauro Carvalho Chehab <mchehab@infradead.org>

diff --git a/include/media/videobuf-core.h b/include/media/videobuf-core.h
index 99033945cdee..fcdffdd63304 100644
--- a/include/media/videobuf-core.h
+++ b/include/media/videobuf-core.h
@@ -151,7 +151,7 @@ struct videobuf_qtype_ops {
 struct videobuf_queue {
 	struct mutex               vb_lock;
 	spinlock_t                 *irqlock;
-	void			   *dev; /* on pci, points to struct pci_dev */
+	struct device		   *dev;
 
 	enum v4l2_buf_type         type;
 	unsigned int               inputs; /* for V4L2_BUF_FLAG_INPUT */
@@ -185,7 +185,7 @@ void *videobuf_alloc(struct videobuf_queue* q);
 
 void videobuf_queue_core_init(struct videobuf_queue *q,
 			 struct videobuf_queue_ops *ops,
-			 void *dev,
+			 struct device *dev,
 			 spinlock_t *irqlock,
 			 enum v4l2_buf_type type,
 			 enum v4l2_field field,

commit 64f9477f95bf5d4ba49dc3988d47a15bc06bb5da
Author: Mauro Carvalho Chehab <mchehab@infradead.org>
Date:   Thu Jan 31 13:57:53 2008 -0300

    V4L/DVB (7121): Renames videobuf lock to vb_lock
    
    This helps to identify where vb_lock is being used, and find missusages of the
    locks.
    
    Signed-off-by: Mauro Carvalho Chehab <mchehab@infradead.org>

diff --git a/include/media/videobuf-core.h b/include/media/videobuf-core.h
index 97f14d469595..99033945cdee 100644
--- a/include/media/videobuf-core.h
+++ b/include/media/videobuf-core.h
@@ -149,7 +149,7 @@ struct videobuf_qtype_ops {
 };
 
 struct videobuf_queue {
-	struct mutex               lock;
+	struct mutex               vb_lock;
 	spinlock_t                 *irqlock;
 	void			   *dev; /* on pci, points to struct pci_dev */
 

commit d05051c82e0e8ff748e9c9a06a061bda3ad656e5
Author: Mauro Carvalho Chehab <mchehab@infradead.org>
Date:   Thu Jan 10 07:33:03 2008 -0300

    V4L/DVB (6997): Replace a very dirty hack on videobuf for a clean wait_event
    
    In order to videobuf_iolock to work, mmap_mapper should be called first.
    Otherwise, an OOPS is generated.
    
    On some cases, .mmap file handler used to took some time to be called. On those
    situations, mmap_mmapper() were called after iolock.
    
    This patch properly waits for mmap_mapper to be called, otherwise generating an
    error.
    
    Signed-off-by: Mauro Carvalho Chehab <mchehab@infradead.org>

diff --git a/include/media/videobuf-core.h b/include/media/videobuf-core.h
index 7aa7a7b64c1b..97f14d469595 100644
--- a/include/media/videobuf-core.h
+++ b/include/media/videobuf-core.h
@@ -164,6 +164,8 @@ struct videobuf_queue {
 
 	unsigned int               streaming:1;
 	unsigned int               reading:1;
+	unsigned int		   is_mmapped:1;
+
 	/* capture via mmap() + ioctl(QBUF/DQBUF) */
 	struct list_head           stream;
 

commit d6964aa8d4a418d69da1652121940fabc6b5d591
Author: Brandon Philips <brandon@ifup.org>
Date:   Tue Nov 6 20:23:08 2007 -0300

    V4L/DVB (6603): V4L: videobuf: convert streaming and reading to bitfields
    
    Signed-off-by: Brandon Philips <bphilips@suse.de>
    Signed-off-by: Mauro Carvalho Chehab <mchehab@infradead.org>

diff --git a/include/media/videobuf-core.h b/include/media/videobuf-core.h
index 567dfe22c07f..7aa7a7b64c1b 100644
--- a/include/media/videobuf-core.h
+++ b/include/media/videobuf-core.h
@@ -162,12 +162,12 @@ struct videobuf_queue {
 	struct videobuf_queue_ops  *ops;
 	struct videobuf_qtype_ops  *int_ops;
 
+	unsigned int               streaming:1;
+	unsigned int               reading:1;
 	/* capture via mmap() + ioctl(QBUF/DQBUF) */
-	unsigned int               streaming;
 	struct list_head           stream;
 
 	/* capture via read() */
-	unsigned int               reading;
 	unsigned int               read_off;
 	struct videobuf_buffer     *read_buf;
 

commit 0fc0686e64d21a6abded96af2b1a895dfa8b2530
Author: Brandon Philips <brandon@ifup.org>
Date:   Tue Nov 6 20:02:36 2007 -0300

    V4L/DVB (6600): V4L: videobuf: don't chew up namespace STATE_.*, convert to VIDEOBUF_
    
    s/STATE_NEEDS_INIT/VIDEOBUF_NEEDS_INIT/g
    s/STATE_PREPARED/VIDEOBUF_PREPARED/g
    s/STATE_QUEUED/VIDEOBUF_QUEUED/g
    s/STATE_ACTIVE/VIDEOBUF_ACTIVE/g
    s/STATE_DONE/VIDEOBUF_DONE/g
    s/STATE_ERROR/VIDEOBUF_ERROR/g
    s/STATE_IDLE/VIDEOBUF_IDLE/g
    
    Signed-off-by: Brandon Philips <bphilips@suse.de>
    Signed-off-by: Mauro Carvalho Chehab <mchehab@infradead.org>

diff --git a/include/media/videobuf-core.h b/include/media/videobuf-core.h
index 4fd5d0eaa935..567dfe22c07f 100644
--- a/include/media/videobuf-core.h
+++ b/include/media/videobuf-core.h
@@ -56,13 +56,13 @@ struct videobuf_mapping {
 };
 
 enum videobuf_state {
-	STATE_NEEDS_INIT = 0,
-	STATE_PREPARED   = 1,
-	STATE_QUEUED     = 2,
-	STATE_ACTIVE     = 3,
-	STATE_DONE       = 4,
-	STATE_ERROR      = 5,
-	STATE_IDLE       = 6,
+	VIDEOBUF_NEEDS_INIT = 0,
+	VIDEOBUF_PREPARED   = 1,
+	VIDEOBUF_QUEUED     = 2,
+	VIDEOBUF_ACTIVE     = 3,
+	VIDEOBUF_DONE       = 4,
+	VIDEOBUF_ERROR      = 5,
+	VIDEOBUF_IDLE       = 6,
 };
 
 struct videobuf_buffer {

commit 19bc5133dae9562e8824ef101464061f9854c1d8
Author: Brandon Philips <brandon@ifup.org>
Date:   Tue Nov 13 20:05:38 2007 -0300

    V4L/DVB (6601): V4L: videobuf-core locking fixes and comments
    
    - Add comments to functions that require that caller hold q->lock
    - Add __videobuf_mmap_free that doesn't hold q->lock for use within videobuf
    - Add locking to videobuf_mmap_free
    - Fix linux/drivers/media/common/saa7146_video.c which was holding lock around
      videobuf_read_stop
    - Add locking to functions that operate on a queue
    - Add videobuf_stop to take care of stopping in both the read and stream case
    
    TODO: bttv still has an unsafe call to videobuf_queue_is_busy
    
    Signed-off-by: Brandon Philips <bphilips@suse.de>
    Signed-off-by: Mauro Carvalho Chehab <mchehab@infradead.org>

diff --git a/include/media/videobuf-core.h b/include/media/videobuf-core.h
index 0fa5d5912555..4fd5d0eaa935 100644
--- a/include/media/videobuf-core.h
+++ b/include/media/videobuf-core.h
@@ -208,6 +208,8 @@ int videobuf_cgmbuf(struct videobuf_queue *q,
 int videobuf_streamon(struct videobuf_queue *q);
 int videobuf_streamoff(struct videobuf_queue *q);
 
+void videobuf_stop(struct videobuf_queue *q);
+
 int videobuf_read_start(struct videobuf_queue *q);
 void videobuf_read_stop(struct videobuf_queue *q);
 ssize_t videobuf_read_stream(struct videobuf_queue *q,

commit 13bcd5d0e21e3ca726965371ada8ff6c64af288f
Author: Al Viro <viro@ftp.linux.org.uk>
Date:   Sat Oct 13 08:25:24 2007 +0100

    v4l: copy_to_user() is not a good method name
    
    Breaks on any target that has copy_to_user() defined as a non-trivial
    macro.
    
    Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

diff --git a/include/media/videobuf-core.h b/include/media/videobuf-core.h
index 9fa09fb800a1..0fa5d5912555 100644
--- a/include/media/videobuf-core.h
+++ b/include/media/videobuf-core.h
@@ -133,7 +133,7 @@ struct videobuf_qtype_ops {
 				 enum v4l2_memory memory);
 	int (*sync)		(struct videobuf_queue* q,
 				 struct videobuf_buffer *buf);
-	int (*copy_to_user)	(struct videobuf_queue *q,
+	int (*video_copy_to_user)(struct videobuf_queue *q,
 				 char __user *data,
 				 size_t count,
 				 int nonblocking);

commit d4cae5a50021271b9ef4e5e39e71e177d12fa8cb
Author: Mauro Carvalho Chehab <mchehab@infradead.org>
Date:   Mon Oct 8 12:20:02 2007 -0300

    V4L/DVB (6292): videobuf_core init always require callback implementation
    
    In the past, videobuf_queue_init were used to initialize PCI DMA videobuffers.
    This patch renames it, to avoid confusion with the previous kernel API, doing:
            s/videobuf_queue_init/void videobuf_queue_core_init/
    
    Also, the operations is now part of the function parameter. The function will
    also add a test if this is defined, otherwise producing BUG.
    
    Signed-off-by: Mauro Carvalho Chehab <mchehab@infradead.org>

diff --git a/include/media/videobuf-core.h b/include/media/videobuf-core.h
index 9bae5a2eda66..9fa09fb800a1 100644
--- a/include/media/videobuf-core.h
+++ b/include/media/videobuf-core.h
@@ -181,14 +181,15 @@ int videobuf_iolock(struct videobuf_queue* q, struct videobuf_buffer *vb,
 
 void *videobuf_alloc(struct videobuf_queue* q);
 
-void videobuf_queue_init(struct videobuf_queue *q,
+void videobuf_queue_core_init(struct videobuf_queue *q,
 			 struct videobuf_queue_ops *ops,
 			 void *dev,
 			 spinlock_t *irqlock,
 			 enum v4l2_buf_type type,
 			 enum v4l2_field field,
 			 unsigned int msize,
-			 void *priv);
+			 void *priv,
+			 struct videobuf_qtype_ops *int_ops);
 int  videobuf_queue_is_busy(struct videobuf_queue *q);
 void videobuf_queue_cancel(struct videobuf_queue *q);
 

commit 5ddff43435394c1c2540fcdeed00cb54862c31bf
Author: Mauro Carvalho Chehab <mchehab@infradead.org>
Date:   Mon Oct 8 11:43:49 2007 -0300

    V4L/DVB (6290): remove videobuf_set_pci_ops
    
    Before the videobuf redesign, a procedure for re-using videobuf without PCI
    scatter/gather where provided by changing the pci-dependent operations by
    other operations.
    
    With the newer approach, those methods are obsolete and can safelly be removed.
    
    Signed-off-by: Mauro Carvalho Chehab <mchehab@infradead.org>

diff --git a/include/media/videobuf-core.h b/include/media/videobuf-core.h
index 96949e31eaf8..9bae5a2eda66 100644
--- a/include/media/videobuf-core.h
+++ b/include/media/videobuf-core.h
@@ -173,9 +173,6 @@ struct videobuf_queue {
 
 	/* driver private data */
 	void                       *priv_data;
-
-	/*FIXME: should be removed after completing the vb conversion */
-	void                       *priv_ops;
 };
 
 int videobuf_waiton(struct videobuf_buffer *vb, int non_blocking, int intr);

commit 851c0c96b2212f48fe51afc1589541b5eae3a544
Author: Mauro Carvalho Chehab <mchehab@infradead.org>
Date:   Thu Sep 27 18:25:44 2007 -0300

    V4L/DVB (6266): videobuf cleanup: mmap check is common to all videobuf. Make it at core
    
    Signed-off-by: Mauro Carvalho Chehab <mchehab@infradead.org>
    http://thread.gmane.org/gmane.comp.video.video4linux/34978/focus=34981
    Reviewed-by: Ricardo Cerqueira <v4l@cerqueira.org>

diff --git a/include/media/videobuf-core.h b/include/media/videobuf-core.h
index 0ac21ae44f69..96949e31eaf8 100644
--- a/include/media/videobuf-core.h
+++ b/include/media/videobuf-core.h
@@ -97,6 +97,9 @@ struct videobuf_buffer {
 	/* buffer addr (userland ptr!) */
 	unsigned long           baddr;
 
+	/* for mmap'ed buffers */
+	struct videobuf_mapping *map;
+
 	/* Private pointer to allow specific methods to store their data */
 	int			privsize;
 	void                    *priv;
@@ -143,7 +146,6 @@ struct videobuf_qtype_ops {
 	int (*mmap_free)	(struct videobuf_queue *q);
 	int (*mmap_mapper)	(struct videobuf_queue *q,
 				struct vm_area_struct *vma);
-	int (*is_mmapped)	(struct videobuf_buffer *buf);
 };
 
 struct videobuf_queue {

commit 7a7d9a89d0307b1743d782197e2c5fc5ddf183f3
Author: Mauro Carvalho Chehab <mchehab@infradead.org>
Date:   Thu Aug 23 16:26:14 2007 -0300

    V4L/DVB (6251): Replace video-buf to a more generic approach
    
    video-buf currently does two different tasks:
    
    - Manages video buffers with a common code that allows
      implementing all the V4L2 different modes of buffering;
    
    - Controls memory allocations
    
    While the first task is generic, the second were written to support PCI DMA
    Scatter/Gather needs. The original approach can't even work for those
    video capture hardware that don't support scatter/gather.
    
    I did one approach to make it more generic. While the approach worked
    fine for vivi driver, it were not generic enough to handle USB needs.
    
    This patch creates two different modules, one containing the generic
    video buffer handling (videobuf-core) and another with PCI DMA S/G.
    After this patch, it would be simpler to write an USB video-buf and a
    non-SG DMA module.
    
    Signed-off-by: Mauro Carvalho Chehab <mchehab@infradead.org>
    http://thread.gmane.org/gmane.comp.video.video4linux/34978/focus=34981
    Reviewed-by: Ricardo Cerqueira <v4l@cerqueira.org>

diff --git a/include/media/videobuf-core.h b/include/media/videobuf-core.h
new file mode 100644
index 000000000000..0ac21ae44f69
--- /dev/null
+++ b/include/media/videobuf-core.h
@@ -0,0 +1,236 @@
+/*
+ * generic helper functions for handling video4linux capture buffers
+ *
+ * (c) 2007 Mauro Carvalho Chehab, <mchehab@infradead.org>
+ *
+ * Highly based on video-buf written originally by:
+ * (c) 2001,02 Gerd Knorr <kraxel@bytesex.org>
+ * (c) 2006 Mauro Carvalho Chehab, <mchehab@infradead.org>
+ * (c) 2006 Ted Walther and John Sokol
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2
+ */
+
+#include <linux/poll.h>
+#ifdef CONFIG_VIDEO_V4L1_COMPAT
+#include <linux/videodev.h>
+#endif
+#include <linux/videodev2.h>
+
+#define UNSET (-1U)
+
+
+struct videobuf_buffer;
+struct videobuf_queue;
+
+/* --------------------------------------------------------------------- */
+
+/*
+ * A small set of helper functions to manage video4linux buffers.
+ *
+ * struct videobuf_buffer holds the data structures used by the helper
+ * functions, additionally some commonly used fields for v4l buffers
+ * (width, height, lists, waitqueue) are in there.  That struct should
+ * be used as first element in the drivers buffer struct.
+ *
+ * about the mmap helpers (videobuf_mmap_*):
+ *
+ * The mmaper function allows to map any subset of contingous buffers.
+ * This includes one mmap() call for all buffers (which the original
+ * video4linux API uses) as well as one mmap() for every single buffer
+ * (which v4l2 uses).
+ *
+ * If there is a valid mapping for a buffer, buffer->baddr/bsize holds
+ * userspace address + size which can be feeded into the
+ * videobuf_dma_init_user function listed above.
+ *
+ */
+
+struct videobuf_mapping {
+	unsigned int count;
+	unsigned long start;
+	unsigned long end;
+	struct videobuf_queue *q;
+};
+
+enum videobuf_state {
+	STATE_NEEDS_INIT = 0,
+	STATE_PREPARED   = 1,
+	STATE_QUEUED     = 2,
+	STATE_ACTIVE     = 3,
+	STATE_DONE       = 4,
+	STATE_ERROR      = 5,
+	STATE_IDLE       = 6,
+};
+
+struct videobuf_buffer {
+	unsigned int            i;
+	u32                     magic;
+
+	/* info about the buffer */
+	unsigned int            width;
+	unsigned int            height;
+	unsigned int            bytesperline; /* use only if != 0 */
+	unsigned long           size;
+	unsigned int            input;
+	enum v4l2_field         field;
+	enum videobuf_state     state;
+	struct list_head        stream;  /* QBUF/DQBUF list */
+
+	/* touched by irq handler */
+	struct list_head        queue;
+	wait_queue_head_t       done;
+	unsigned int            field_count;
+	struct timeval          ts;
+
+	/* Memory type */
+	enum v4l2_memory        memory;
+
+	/* buffer size */
+	size_t                  bsize;
+
+	/* buffer offset (mmap + overlay) */
+	size_t                  boff;
+
+	/* buffer addr (userland ptr!) */
+	unsigned long           baddr;
+
+	/* Private pointer to allow specific methods to store their data */
+	int			privsize;
+	void                    *priv;
+};
+
+struct videobuf_queue_ops {
+	int (*buf_setup)(struct videobuf_queue *q,
+			 unsigned int *count, unsigned int *size);
+	int (*buf_prepare)(struct videobuf_queue *q,
+			   struct videobuf_buffer *vb,
+			   enum v4l2_field field);
+	void (*buf_queue)(struct videobuf_queue *q,
+			  struct videobuf_buffer *vb);
+	void (*buf_release)(struct videobuf_queue *q,
+			    struct videobuf_buffer *vb);
+};
+
+#define MAGIC_QTYPE_OPS	0x12261003
+
+/* Helper operations - device type dependent */
+struct videobuf_qtype_ops {
+	u32                     magic;
+
+	void* (*alloc)		(size_t size);
+	int (*iolock)		(struct videobuf_queue* q,
+				 struct videobuf_buffer *vb,
+				 struct v4l2_framebuffer *fbuf);
+	int (*mmap)		(struct videobuf_queue *q,
+				 unsigned int *count,
+				 unsigned int *size,
+				 enum v4l2_memory memory);
+	int (*sync)		(struct videobuf_queue* q,
+				 struct videobuf_buffer *buf);
+	int (*copy_to_user)	(struct videobuf_queue *q,
+				 char __user *data,
+				 size_t count,
+				 int nonblocking);
+	int (*copy_stream)	(struct videobuf_queue *q,
+				 char __user *data,
+				 size_t count,
+				 size_t pos,
+				 int vbihack,
+				 int nonblocking);
+	int (*mmap_free)	(struct videobuf_queue *q);
+	int (*mmap_mapper)	(struct videobuf_queue *q,
+				struct vm_area_struct *vma);
+	int (*is_mmapped)	(struct videobuf_buffer *buf);
+};
+
+struct videobuf_queue {
+	struct mutex               lock;
+	spinlock_t                 *irqlock;
+	void			   *dev; /* on pci, points to struct pci_dev */
+
+	enum v4l2_buf_type         type;
+	unsigned int               inputs; /* for V4L2_BUF_FLAG_INPUT */
+	unsigned int               msize;
+	enum v4l2_field            field;
+	enum v4l2_field            last;   /* for field=V4L2_FIELD_ALTERNATE */
+	struct videobuf_buffer     *bufs[VIDEO_MAX_FRAME];
+	struct videobuf_queue_ops  *ops;
+	struct videobuf_qtype_ops  *int_ops;
+
+	/* capture via mmap() + ioctl(QBUF/DQBUF) */
+	unsigned int               streaming;
+	struct list_head           stream;
+
+	/* capture via read() */
+	unsigned int               reading;
+	unsigned int               read_off;
+	struct videobuf_buffer     *read_buf;
+
+	/* driver private data */
+	void                       *priv_data;
+
+	/*FIXME: should be removed after completing the vb conversion */
+	void                       *priv_ops;
+};
+
+int videobuf_waiton(struct videobuf_buffer *vb, int non_blocking, int intr);
+int videobuf_iolock(struct videobuf_queue* q, struct videobuf_buffer *vb,
+		struct v4l2_framebuffer *fbuf);
+
+void *videobuf_alloc(struct videobuf_queue* q);
+
+void videobuf_queue_init(struct videobuf_queue *q,
+			 struct videobuf_queue_ops *ops,
+			 void *dev,
+			 spinlock_t *irqlock,
+			 enum v4l2_buf_type type,
+			 enum v4l2_field field,
+			 unsigned int msize,
+			 void *priv);
+int  videobuf_queue_is_busy(struct videobuf_queue *q);
+void videobuf_queue_cancel(struct videobuf_queue *q);
+
+enum v4l2_field videobuf_next_field(struct videobuf_queue *q);
+int videobuf_reqbufs(struct videobuf_queue *q,
+		     struct v4l2_requestbuffers *req);
+int videobuf_querybuf(struct videobuf_queue *q, struct v4l2_buffer *b);
+int videobuf_qbuf(struct videobuf_queue *q,
+		  struct v4l2_buffer *b);
+int videobuf_dqbuf(struct videobuf_queue *q,
+		   struct v4l2_buffer *b, int nonblocking);
+#ifdef CONFIG_VIDEO_V4L1_COMPAT
+int videobuf_cgmbuf(struct videobuf_queue *q,
+		    struct video_mbuf *mbuf, int count);
+#endif
+int videobuf_streamon(struct videobuf_queue *q);
+int videobuf_streamoff(struct videobuf_queue *q);
+
+int videobuf_read_start(struct videobuf_queue *q);
+void videobuf_read_stop(struct videobuf_queue *q);
+ssize_t videobuf_read_stream(struct videobuf_queue *q,
+			     char __user *data, size_t count, loff_t *ppos,
+			     int vbihack, int nonblocking);
+ssize_t videobuf_read_one(struct videobuf_queue *q,
+			  char __user *data, size_t count, loff_t *ppos,
+			  int nonblocking);
+unsigned int videobuf_poll_stream(struct file *file,
+				  struct videobuf_queue *q,
+				  poll_table *wait);
+
+int videobuf_mmap_setup(struct videobuf_queue *q,
+			unsigned int bcount, unsigned int bsize,
+			enum v4l2_memory memory);
+int videobuf_mmap_free(struct videobuf_queue *q);
+int videobuf_mmap_mapper(struct videobuf_queue *q,
+			 struct vm_area_struct *vma);
+
+/* --------------------------------------------------------------------- */
+
+/*
+ * Local variables:
+ * c-basic-offset: 8
+ * End:
+ */
