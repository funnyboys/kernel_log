commit e6111647934562849ba052052ffbc673b935a9fe
Author: Hans Verkuil <hverkuil-cisco@xs4all.nl>
Date:   Mon Jan 6 12:04:17 2020 +0100

    media: cec: remove unused functions
    
    Remove several functions that are no longer used now that the
    conversion of cec drivers to cec_notifier_conn_(un)register() and
    cec_notifier_cec_adap_(un)register() is complete.
    
    Signed-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>

diff --git a/include/media/cec.h b/include/media/cec.h
index 0a4f69cc9dd4..972bc8cd4384 100644
--- a/include/media/cec.h
+++ b/include/media/cec.h
@@ -386,52 +386,6 @@ cec_fill_conn_info_from_drm(struct cec_connector_info *conn_info,
 
 #endif
 
-#if IS_REACHABLE(CONFIG_CEC_CORE) && IS_ENABLED(CONFIG_CEC_NOTIFIER)
-
-/**
- * cec_notifier_register - register a callback with the notifier
- * @n: the CEC notifier
- * @adap: the CEC adapter, passed as argument to the callback function
- * @callback: the callback function
- */
-void cec_notifier_register(struct cec_notifier *n,
-			   struct cec_adapter *adap,
-			   void (*callback)(struct cec_adapter *adap, u16 pa));
-
-/**
- * cec_notifier_unregister - unregister the callback from the notifier.
- * @n: the CEC notifier
- */
-void cec_notifier_unregister(struct cec_notifier *n);
-
-/**
- * cec_register_cec_notifier - register the notifier with the cec adapter.
- * @adap: the CEC adapter
- * @notifier: the CEC notifier
- */
-void cec_register_cec_notifier(struct cec_adapter *adap,
-			       struct cec_notifier *notifier);
-
-#else
-
-static inline void
-cec_notifier_register(struct cec_notifier *n,
-		      struct cec_adapter *adap,
-		      void (*callback)(struct cec_adapter *adap, u16 pa))
-{
-}
-
-static inline void cec_notifier_unregister(struct cec_notifier *n)
-{
-}
-
-static inline void cec_register_cec_notifier(struct cec_adapter *adap,
-					     struct cec_notifier *notifier)
-{
-}
-
-#endif
-
 /**
  * cec_phys_addr_invalidate() - set the physical address to INVALID
  *

commit 9098c1c251ff0e6a4cea3a60486d9f40e7fdcea2
Author: Dariusz Marcinkiewicz <darekm@google.com>
Date:   Fri Aug 23 09:20:58 2019 -0300

    media: cec: expose the new connector info API
    
    Until now the connector info API was a kernel-internal API only.
    This moves it to the public API and adds the new ioctl to retrieve
    this information.
    
    Signed-off-by: Dariusz Marcinkiewicz <darekm@google.com>
    Signed-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+samsung@kernel.org>

diff --git a/include/media/cec.h b/include/media/cec.h
index 4d59387bc61b..0a4f69cc9dd4 100644
--- a/include/media/cec.h
+++ b/include/media/cec.h
@@ -18,9 +18,6 @@
 #include <linux/cec-funcs.h>
 #include <media/rc-core.h>
 
-/* CEC_ADAP_G_CONNECTOR_INFO is available */
-#define CEC_CAP_CONNECTOR_INFO	(1 << 8)
-
 #define CEC_CAP_DEFAULTS (CEC_CAP_LOG_ADDRS | CEC_CAP_TRANSMIT | \
 			  CEC_CAP_PASSTHROUGH | CEC_CAP_RC)
 
@@ -147,34 +144,6 @@ struct cec_adap_ops {
  */
 #define CEC_MAX_MSG_TX_QUEUE_SZ		(18 * 1)
 
-/**
- * struct cec_drm_connector_info - tells which drm connector is
- * associated with the CEC adapter.
- * @card_no: drm card number
- * @connector_id: drm connector ID
- */
-struct cec_drm_connector_info {
-	__u32 card_no;
-	__u32 connector_id;
-};
-
-#define CEC_CONNECTOR_TYPE_NO_CONNECTOR	0
-#define CEC_CONNECTOR_TYPE_DRM		1
-
-/**
- * struct cec_connector_info - tells if and which connector is
- * associated with the CEC adapter.
- * @type: connector type (if any)
- * @drm: drm connector info
- */
-struct cec_connector_info {
-	__u32 type;
-	union {
-		struct cec_drm_connector_info drm;
-		__u32 raw[16];
-	};
-};
-
 struct cec_adapter {
 	struct module *owner;
 	char name[32];

commit 32a847f9fa40ec1b03ead2c514862764983ff9ca
Author: Dariusz Marcinkiewicz <darekm@google.com>
Date:   Thu Jun 20 05:17:18 2019 -0400

    media: cec: add struct cec_connector_info support
    
    Define struct cec_connector_info in media/cec.h and define
    CEC_CAP_CONNECTOR_INFO. In a later patch this will be moved to
    uapi/linux/cec.h.
    
    The CEC_CAP_CONNECTOR_INFO capability can be set by drivers, but
    cec_allocate_adapter() will remove it again until the public API
    for this can be enabled once all drm drivers wire this up correctly.
    
    Also add the cec_fill_conn_info_from_drm and cec_s_conn_info functions,
    which are needed by drm drivers to fill in the cec_connector info
    based on a drm_connector.
    
    The cec_notifier_(un)register and cec_register_cec_notifier
    prototypes were moved from cec-notifier.h to cec.h since cec.h no longer
    includes cec-notifier.h. These headers included each other before,
    which caused various problems.
    
    Due to these changes the seco-cec driver was changed as well: it
    should include cec-notifier.h, not cec.h.
    
    Signed-off-by: Dariusz Marcinkiewicz <darekm@google.com>
    Signed-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+samsung@kernel.org>

diff --git a/include/media/cec.h b/include/media/cec.h
index 707411ef8ba2..4d59387bc61b 100644
--- a/include/media/cec.h
+++ b/include/media/cec.h
@@ -17,7 +17,9 @@
 #include <linux/timer.h>
 #include <linux/cec-funcs.h>
 #include <media/rc-core.h>
-#include <media/cec-notifier.h>
+
+/* CEC_ADAP_G_CONNECTOR_INFO is available */
+#define CEC_CAP_CONNECTOR_INFO	(1 << 8)
 
 #define CEC_CAP_DEFAULTS (CEC_CAP_LOG_ADDRS | CEC_CAP_TRANSMIT | \
 			  CEC_CAP_PASSTHROUGH | CEC_CAP_RC)
@@ -53,6 +55,7 @@ struct cec_devnode {
 struct cec_adapter;
 struct cec_data;
 struct cec_pin;
+struct cec_notifier;
 
 struct cec_data {
 	struct list_head list;
@@ -144,6 +147,34 @@ struct cec_adap_ops {
  */
 #define CEC_MAX_MSG_TX_QUEUE_SZ		(18 * 1)
 
+/**
+ * struct cec_drm_connector_info - tells which drm connector is
+ * associated with the CEC adapter.
+ * @card_no: drm card number
+ * @connector_id: drm connector ID
+ */
+struct cec_drm_connector_info {
+	__u32 card_no;
+	__u32 connector_id;
+};
+
+#define CEC_CONNECTOR_TYPE_NO_CONNECTOR	0
+#define CEC_CONNECTOR_TYPE_DRM		1
+
+/**
+ * struct cec_connector_info - tells if and which connector is
+ * associated with the CEC adapter.
+ * @type: connector type (if any)
+ * @drm: drm connector info
+ */
+struct cec_connector_info {
+	__u32 type;
+	union {
+		struct cec_drm_connector_info drm;
+		__u32 raw[16];
+	};
+};
+
 struct cec_adapter {
 	struct module *owner;
 	char name[32];
@@ -182,6 +213,7 @@ struct cec_adapter {
 	struct cec_fh *cec_initiator;
 	bool passthrough;
 	struct cec_log_addrs log_addrs;
+	struct cec_connector_info conn_info;
 
 	u32 tx_timeouts;
 
@@ -233,6 +265,7 @@ static inline bool cec_is_registered(const struct cec_adapter *adap)
 	((pa) >> 12), ((pa) >> 8) & 0xf, ((pa) >> 4) & 0xf, (pa) & 0xf
 
 struct edid;
+struct drm_connector;
 
 #if IS_REACHABLE(CONFIG_CEC_CORE)
 struct cec_adapter *cec_allocate_adapter(const struct cec_adap_ops *ops,
@@ -247,6 +280,8 @@ void cec_s_phys_addr(struct cec_adapter *adap, u16 phys_addr,
 		     bool block);
 void cec_s_phys_addr_from_edid(struct cec_adapter *adap,
 			       const struct edid *edid);
+void cec_s_conn_info(struct cec_adapter *adap,
+		     const struct cec_connector_info *conn_info);
 int cec_transmit_msg(struct cec_adapter *adap, struct cec_msg *msg,
 		     bool block);
 
@@ -331,6 +366,9 @@ void cec_queue_pin_5v_event(struct cec_adapter *adap, bool is_high, ktime_t ts);
 u16 cec_get_edid_phys_addr(const u8 *edid, unsigned int size,
 			   unsigned int *offset);
 
+void cec_fill_conn_info_from_drm(struct cec_connector_info *conn_info,
+				 const struct drm_connector *connector);
+
 #else
 
 static inline int cec_register_adapter(struct cec_adapter *adap,
@@ -365,6 +403,64 @@ static inline u16 cec_get_edid_phys_addr(const u8 *edid, unsigned int size,
 	return CEC_PHYS_ADDR_INVALID;
 }
 
+static inline void cec_s_conn_info(struct cec_adapter *adap,
+				   const struct cec_connector_info *conn_info)
+{
+}
+
+static inline void
+cec_fill_conn_info_from_drm(struct cec_connector_info *conn_info,
+			    const struct drm_connector *connector)
+{
+	memset(conn_info, 0, sizeof(*conn_info));
+}
+
+#endif
+
+#if IS_REACHABLE(CONFIG_CEC_CORE) && IS_ENABLED(CONFIG_CEC_NOTIFIER)
+
+/**
+ * cec_notifier_register - register a callback with the notifier
+ * @n: the CEC notifier
+ * @adap: the CEC adapter, passed as argument to the callback function
+ * @callback: the callback function
+ */
+void cec_notifier_register(struct cec_notifier *n,
+			   struct cec_adapter *adap,
+			   void (*callback)(struct cec_adapter *adap, u16 pa));
+
+/**
+ * cec_notifier_unregister - unregister the callback from the notifier.
+ * @n: the CEC notifier
+ */
+void cec_notifier_unregister(struct cec_notifier *n);
+
+/**
+ * cec_register_cec_notifier - register the notifier with the cec adapter.
+ * @adap: the CEC adapter
+ * @notifier: the CEC notifier
+ */
+void cec_register_cec_notifier(struct cec_adapter *adap,
+			       struct cec_notifier *notifier);
+
+#else
+
+static inline void
+cec_notifier_register(struct cec_notifier *n,
+		      struct cec_adapter *adap,
+		      void (*callback)(struct cec_adapter *adap, u16 pa))
+{
+}
+
+static inline void cec_notifier_unregister(struct cec_notifier *n)
+{
+}
+
+static inline void cec_register_cec_notifier(struct cec_adapter *adap,
+					     struct cec_notifier *notifier)
+{
+}
+
 #endif
 
 /**

commit 32804fcb612bf867034a093f459415e485cf044b
Author: Hans Verkuil <hverkuil-cisco@xs4all.nl>
Date:   Fri Oct 19 03:55:34 2018 -0400

    media: cec: keep track of outstanding transmits
    
    I noticed that repeatedly running 'cec-ctl --playback' would occasionally
    select 'Playback Device 2' instead of 'Playback Device 1', even though there
    were no other Playback devices in the HDMI topology. This happened both with
    'real' hardware and with the vivid CEC emulation, suggesting that this was an
    issue in the core code that claims a logical address.
    
    What 'cec-ctl --playback' does is to first clear all existing logical addresses,
    and immediately after that configure the new desired device type.
    
    The core code will poll the logical addresses trying to find a free address.
    When found it will issue a few standard messages as per the CEC spec and return.
    Those messages are queued up and will be transmitted asynchronously.
    
    What happens is that if you run two 'cec-ctl --playback' commands in quick
    succession, there is still a message of the first cec-ctl command being transmitted
    when you reconfigure the adapter again in the second cec-ctl command.
    
    When the logical addresses are cleared, then all information about outstanding
    transmits inside the CEC core is also cleared, and the core is no longer aware
    that there is still a transmit in flight.
    
    When the hardware finishes the transmit it calls transmit_done and the CEC core
    thinks it is actually in response of a POLL messages that is trying to find a
    free logical address. The result of all this is that the core thinks that the
    logical address for Playback Device 1 is in use, when it is really an earlier
    transmit that ended.
    
    The main transmit thread looks at adap->transmitting to check if a transmit
    is in progress, but that is set to NULL when the adapter is unconfigured.
    adap->transmitting represents the view of userspace, not that of the hardware.
    So when unconfiguring the adapter the message is marked aborted from the point
    of view of userspace, but seen from the PoV of the hardware it is still ongoing.
    
    So introduce a new bool transmit_in_progress that represents the hardware state
    and use that instead of adap->transmitting. Now the CEC core waits until the
    hardware finishes the transmit before starting a new transmit.
    
    Signed-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Cc: <stable@vger.kernel.org>      # for v4.18 and up
    Signed-off-by: Mauro Carvalho Chehab <mchehab+samsung@kernel.org>

diff --git a/include/media/cec.h b/include/media/cec.h
index 3fe5e5d2bb7e..707411ef8ba2 100644
--- a/include/media/cec.h
+++ b/include/media/cec.h
@@ -155,6 +155,7 @@ struct cec_adapter {
 	unsigned int transmit_queue_sz;
 	struct list_head wait_queue;
 	struct cec_data *transmitting;
+	bool transmit_in_progress;
 
 	struct task_struct *kthread_config;
 	struct completion config_completion;

commit 557c97b5133669297be561e6091da9ab6e488e65
Author: Sean Young <sean@mess.org>
Date:   Thu Oct 4 18:21:13 2018 -0400

    media: cec: name for RC passthrough device does not need 'RC for'
    
    An RC device is does not need to be called 'RC for'. Simply the name
    will suffice.
    
    Signed-off-by: Sean Young <sean@mess.org>
    Signed-off-by: Hans Verkuil <hans.verkuil@cisco.com>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+samsung@kernel.org>

diff --git a/include/media/cec.h b/include/media/cec.h
index 254a610b9aa5..3fe5e5d2bb7e 100644
--- a/include/media/cec.h
+++ b/include/media/cec.h
@@ -198,9 +198,7 @@ struct cec_adapter {
 	u16 phys_addrs[15];
 	u32 sequence;
 
-	char device_name[32];
 	char input_phys[32];
-	char input_drv[32];
 };
 
 static inline void *cec_get_drvdata(const struct cec_adapter *adap)

commit 7d867a1b765e2b70815fec4964d7822a976ed349
Author: Hans Verkuil <hans.verkuil@cisco.com>
Date:   Fri Oct 5 08:00:21 2018 -0400

    media: cec: fix the Signal Free Time calculation
    
    The calculation of the Signal Free Time in the framework was not
    correct. If a message was received, then the next transmit should be
    considered a New Initiator and use a shorter SFT value.
    
    This was not done with the result that if both sides where continually
    sending messages, they both could use the same SFT value and one side
    could deny the other side access to the bus.
    
    Note that this fix does not take the corner case into account where
    a receive is in progress when you call adap_transmit.
    
    Signed-off-by: Hans Verkuil <hans.verkuil@cisco.com>
    Cc: <stable@vger.kernel.org>      # for v4.18 and up
    Signed-off-by: Mauro Carvalho Chehab <mchehab+samsung@kernel.org>

diff --git a/include/media/cec.h b/include/media/cec.h
index 9f382f0c2970..254a610b9aa5 100644
--- a/include/media/cec.h
+++ b/include/media/cec.h
@@ -63,7 +63,6 @@ struct cec_data {
 	struct delayed_work work;
 	struct completion c;
 	u8 attempts;
-	bool new_initiator;
 	bool blocking;
 	bool completed;
 };
@@ -174,6 +173,7 @@ struct cec_adapter {
 	bool is_configuring;
 	bool is_configured;
 	bool cec_pin_is_high;
+	u8 last_initiator;
 	u32 monitor_all_cnt;
 	u32 monitor_pin_cnt;
 	u32 follower_cnt;

commit 9cfd2753f8f3923f89cbb15f940f3aa0e7202d3e
Author: Hans Verkuil <hans.verkuil@cisco.com>
Date:   Thu Sep 13 03:40:56 2018 -0400

    media: cec/v4l2: move V4L2 specific CEC functions to V4L2
    
    Several CEC functions are actually specific for use with receivers,
    i.e. they should be part of the V4L2 subsystem, not CEC.
    
    These functions deal with validating and modifying EDIDs for (HDMI)
    receivers, and they do not actually have anything to do with the CEC
    subsystem and whether or not CEC is enabled. The problem was that if
    the CEC_CORE config option was not set, then these functions would
    become stubs, but that's not right: they should always be valid.
    
    So replace the cec_ prefix by v4l2_ and move them to v4l2-dv-timings.c.
    Update all drivers that call these accordingly.
    
    Signed-off-by: Hans Verkuil <hans.verkuil@cisco.com>
    Reported-by: Lars-Peter Clausen <lars@metafoo.de>
    Cc: <stable@vger.kernel.org>      # for v4.17 and up
    Signed-off-by: Mauro Carvalho Chehab <mchehab+samsung@kernel.org>

diff --git a/include/media/cec.h b/include/media/cec.h
index 603f2fa08f62..9f382f0c2970 100644
--- a/include/media/cec.h
+++ b/include/media/cec.h
@@ -332,67 +332,6 @@ void cec_queue_pin_5v_event(struct cec_adapter *adap, bool is_high, ktime_t ts);
 u16 cec_get_edid_phys_addr(const u8 *edid, unsigned int size,
 			   unsigned int *offset);
 
-/**
- * cec_set_edid_phys_addr() - find and set the physical address
- *
- * @edid:	pointer to the EDID data
- * @size:	size in bytes of the EDID data
- * @phys_addr:	the new physical address
- *
- * This function finds the location of the physical address in the EDID
- * and fills in the given physical address and updates the checksum
- * at the end of the EDID block. It does nothing if the EDID doesn't
- * contain a physical address.
- */
-void cec_set_edid_phys_addr(u8 *edid, unsigned int size, u16 phys_addr);
-
-/**
- * cec_phys_addr_for_input() - calculate the PA for an input
- *
- * @phys_addr:	the physical address of the parent
- * @input:	the number of the input port, must be between 1 and 15
- *
- * This function calculates a new physical address based on the input
- * port number. For example:
- *
- * PA = 0.0.0.0 and input = 2 becomes 2.0.0.0
- *
- * PA = 3.0.0.0 and input = 1 becomes 3.1.0.0
- *
- * PA = 3.2.1.0 and input = 5 becomes 3.2.1.5
- *
- * PA = 3.2.1.3 and input = 5 becomes f.f.f.f since it maxed out the depth.
- *
- * Return: the new physical address or CEC_PHYS_ADDR_INVALID.
- */
-u16 cec_phys_addr_for_input(u16 phys_addr, u8 input);
-
-/**
- * cec_phys_addr_validate() - validate a physical address from an EDID
- *
- * @phys_addr:	the physical address to validate
- * @parent:	if not %NULL, then this is filled with the parents PA.
- * @port:	if not %NULL, then this is filled with the input port.
- *
- * This validates a physical address as read from an EDID. If the
- * PA is invalid (such as 1.0.1.0 since '0' is only allowed at the end),
- * then it will return -EINVAL.
- *
- * The parent PA is passed into %parent and the input port is passed into
- * %port. For example:
- *
- * PA = 0.0.0.0: has parent 0.0.0.0 and input port 0.
- *
- * PA = 1.0.0.0: has parent 0.0.0.0 and input port 1.
- *
- * PA = 3.2.0.0: has parent 3.0.0.0 and input port 2.
- *
- * PA = f.f.f.f: has parent f.f.f.f and input port 0.
- *
- * Return: 0 if the PA is valid, -EINVAL if not.
- */
-int cec_phys_addr_validate(u16 phys_addr, u16 *parent, u16 *port);
-
 #else
 
 static inline int cec_register_adapter(struct cec_adapter *adap,
@@ -427,25 +366,6 @@ static inline u16 cec_get_edid_phys_addr(const u8 *edid, unsigned int size,
 	return CEC_PHYS_ADDR_INVALID;
 }
 
-static inline void cec_set_edid_phys_addr(u8 *edid, unsigned int size,
-					  u16 phys_addr)
-{
-}
-
-static inline u16 cec_phys_addr_for_input(u16 phys_addr, u8 input)
-{
-	return CEC_PHYS_ADDR_INVALID;
-}
-
-static inline int cec_phys_addr_validate(u16 phys_addr, u16 *parent, u16 *port)
-{
-	if (parent)
-		*parent = phys_addr;
-	if (port)
-		*port = 0;
-	return 0;
-}
-
 #endif
 
 /**

commit b915bf575d5b7774d0f22d57d6c143e07dcaade2
Author: Hans Verkuil <hans.verkuil@cisco.com>
Date:   Thu Sep 13 03:25:59 2018 -0400

    media: cec: make cec_get_edid_spa_location() an inline function
    
    This function is needed by both V4L2 and CEC, so move this to
    cec.h as a static inline since there are no obvious shared
    modules between the two subsystems.
    
    This patch, together with the following ones, fixes a
    dependency bug: if CEC_CORE is disabled, then building adv7604
    (and other HDMI receivers) will fail because an essential
    function is now stubbed out.
    
    Signed-off-by: Hans Verkuil <hans.verkuil@cisco.com>
    Cc: <stable@vger.kernel.org>      # for v4.17 and up
    Signed-off-by: Mauro Carvalho Chehab <mchehab+samsung@kernel.org>

diff --git a/include/media/cec.h b/include/media/cec.h
index ff9847f7f99d..603f2fa08f62 100644
--- a/include/media/cec.h
+++ b/include/media/cec.h
@@ -461,4 +461,74 @@ static inline void cec_phys_addr_invalidate(struct cec_adapter *adap)
 	cec_s_phys_addr(adap, CEC_PHYS_ADDR_INVALID, false);
 }
 
+/**
+ * cec_get_edid_spa_location() - find location of the Source Physical Address
+ *
+ * @edid: the EDID
+ * @size: the size of the EDID
+ *
+ * This EDID is expected to be a CEA-861 compliant, which means that there are
+ * at least two blocks and one or more of the extensions blocks are CEA-861
+ * blocks.
+ *
+ * The returned location is guaranteed to be <= size-2.
+ *
+ * This is an inline function since it is used by both CEC and V4L2.
+ * Ideally this would go in a module shared by both, but it is overkill to do
+ * that for just a single function.
+ */
+static inline unsigned int cec_get_edid_spa_location(const u8 *edid,
+						     unsigned int size)
+{
+	unsigned int blocks = size / 128;
+	unsigned int block;
+	u8 d;
+
+	/* Sanity check: at least 2 blocks and a multiple of the block size */
+	if (blocks < 2 || size % 128)
+		return 0;
+
+	/*
+	 * If there are fewer extension blocks than the size, then update
+	 * 'blocks'. It is allowed to have more extension blocks than the size,
+	 * since some hardware can only read e.g. 256 bytes of the EDID, even
+	 * though more blocks are present. The first CEA-861 extension block
+	 * should normally be in block 1 anyway.
+	 */
+	if (edid[0x7e] + 1 < blocks)
+		blocks = edid[0x7e] + 1;
+
+	for (block = 1; block < blocks; block++) {
+		unsigned int offset = block * 128;
+
+		/* Skip any non-CEA-861 extension blocks */
+		if (edid[offset] != 0x02 || edid[offset + 1] != 0x03)
+			continue;
+
+		/* search Vendor Specific Data Block (tag 3) */
+		d = edid[offset + 2] & 0x7f;
+		/* Check if there are Data Blocks */
+		if (d <= 4)
+			continue;
+		if (d > 4) {
+			unsigned int i = offset + 4;
+			unsigned int end = offset + d;
+
+			/* Note: 'end' is always < 'size' */
+			do {
+				u8 tag = edid[i] >> 5;
+				u8 len = edid[i] & 0x1f;
+
+				if (tag == 3 && len >= 5 && i + len <= end &&
+				    edid[i + 1] == 0x03 &&
+				    edid[i + 2] == 0x0c &&
+				    edid[i + 3] == 0x00)
+					return i + 4;
+				i += len + 1;
+			} while (i < end);
+		}
+	}
+	return 0;
+}
+
 #endif /* _MEDIA_CEC_H */

commit 4786b0d6f3ca6da8db02b0a58cd2b785cb0b80ab
Author: Hans Verkuil <hans.verkuil@cisco.com>
Date:   Thu Jun 28 07:43:46 2018 -0400

    media: cec: add support for 5V signal testing
    
    Add support for the new 5V CEC events
    
    Signed-off-by: Hans Verkuil <hans.verkuil@cisco.com>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+samsung@kernel.org>

diff --git a/include/media/cec.h b/include/media/cec.h
index 580ab1042898..ff9847f7f99d 100644
--- a/include/media/cec.h
+++ b/include/media/cec.h
@@ -79,7 +79,7 @@ struct cec_event_entry {
 };
 
 #define CEC_NUM_CORE_EVENTS 2
-#define CEC_NUM_EVENTS CEC_EVENT_PIN_HPD_HIGH
+#define CEC_NUM_EVENTS CEC_EVENT_PIN_5V_HIGH
 
 struct cec_fh {
 	struct list_head	list;
@@ -308,6 +308,16 @@ void cec_queue_pin_cec_event(struct cec_adapter *adap, bool is_high,
  */
 void cec_queue_pin_hpd_event(struct cec_adapter *adap, bool is_high, ktime_t ts);
 
+/**
+ * cec_queue_pin_5v_event() - queue a pin event with a given timestamp.
+ *
+ * @adap:	pointer to the cec adapter
+ * @is_high:	when true the 5V pin is high, otherwise it is low
+ * @ts:		the timestamp for this event
+ *
+ */
+void cec_queue_pin_5v_event(struct cec_adapter *adap, bool is_high, ktime_t ts);
+
 /**
  * cec_get_edid_phys_addr() - find and return the physical address
  *

commit 6ec1cbf6b12531a794bbc007fbf6e74edf7fc93c
Author: Hans Verkuil <hans.verkuil@cisco.com>
Date:   Tue Mar 6 16:20:00 2018 -0500

    media: cec: improve CEC pin event handling
    
    It turns out that the struct cec_fh event buffer size of 64 events
    (64 for CEC_EVENT_PIN_CEC_LOW and 64 for _HIGH) is too small. It's
    about 160 ms worth of events and if the Raspberry Pi is busy, then it
    might take too long for the application to be scheduled so that it can
    drain the pending events. Increase these buffers to 800 events which
    is at least 2 seconds worth of events.
    
    There is also a FIFO in between the interrupt and the cec-pin thread.
    The thread passes the events on to the CEC core. It is important that
    should this FIFO fill up the cec core will be informed that events
    have been lost so this can be communicated to the user by setting
    CEC_EVENT_FL_DROPPED_EVENTS.
    
    It is very hard to debug CEC problems if events were lost without
    informing the user of that fact.
    
    If events were dropped due to the FIFO filling up, then the debugfs
    status file will let you know how many events were dropped.
    
    Signed-off-by: Hans Verkuil <hans.verkuil@cisco.com>
    Signed-off-by: Mauro Carvalho Chehab <mchehab@s-opensource.com>

diff --git a/include/media/cec.h b/include/media/cec.h
index 41df048efc55..580ab1042898 100644
--- a/include/media/cec.h
+++ b/include/media/cec.h
@@ -92,7 +92,7 @@ struct cec_fh {
 	wait_queue_head_t	wait;
 	struct mutex		lock;
 	struct list_head	events[CEC_NUM_EVENTS]; /* queued events */
-	u8			queued_events[CEC_NUM_EVENTS];
+	u16			queued_events[CEC_NUM_EVENTS];
 	unsigned int		total_queued_events;
 	struct cec_event_entry	core_events[CEC_NUM_CORE_EVENTS];
 	struct list_head	msgs; /* queued messages */
@@ -291,11 +291,12 @@ static inline void cec_received_msg(struct cec_adapter *adap,
  *
  * @adap:	pointer to the cec adapter
  * @is_high:	when true the CEC pin is high, otherwise it is low
+ * @dropped_events: when true some events were dropped
  * @ts:		the timestamp for this event
  *
  */
-void cec_queue_pin_cec_event(struct cec_adapter *adap,
-			     bool is_high, ktime_t ts);
+void cec_queue_pin_cec_event(struct cec_adapter *adap, bool is_high,
+			     bool dropped_events, ktime_t ts);
 
 /**
  * cec_queue_pin_hpd_event() - queue a pin event with a given timestamp.

commit 9ca400c18ff1100a52411952d24bc4c4a15facc3
Author: Hans Verkuil <hans.verkuil@cisco.com>
Date:   Tue Oct 31 09:55:09 2017 -0400

    media: cec: add core error injection support
    
    Add two new ops (error_inj_show and error_inj_parse_line) to support
    error injection functionality for CEC adapters. If both are present,
    then the core will add a new error-inj debugfs file that can be used
    to see the current error injection commands and to set error injection
    commands.
    
    Signed-off-by: Hans Verkuil <hans.verkuil@cisco.com>
    Signed-off-by: Mauro Carvalho Chehab <mchehab@s-opensource.com>

diff --git a/include/media/cec.h b/include/media/cec.h
index 9afba9b558df..41df048efc55 100644
--- a/include/media/cec.h
+++ b/include/media/cec.h
@@ -117,6 +117,10 @@ struct cec_adap_ops {
 	void (*adap_status)(struct cec_adapter *adap, struct seq_file *file);
 	void (*adap_free)(struct cec_adapter *adap);
 
+	/* Error injection callbacks */
+	int (*error_inj_show)(struct cec_adapter *adap, struct seq_file *sf);
+	bool (*error_inj_parse_line)(struct cec_adapter *adap, char *line);
+
 	/* High-level CEC message callback */
 	int (*received)(struct cec_adapter *adap, struct cec_msg *msg);
 };
@@ -189,6 +193,7 @@ struct cec_adapter {
 
 	struct dentry *cec_dir;
 	struct dentry *status_file;
+	struct dentry *error_inj_file;
 
 	u16 phys_addrs[15];
 	u32 sequence;

commit ab15d248cc96d12c928a69d3485a98d223c607ae
Author: Hans Verkuil <hansverk@cisco.com>
Date:   Wed Feb 7 09:05:46 2018 -0500

    media: include/(uapi/)media: add SPDX license info
    
    Replace the old license information with the corresponding SPDX
    license for those headers that I authored.
    
    Signed-off-by: Hans Verkuil <hans.verkuil@cisco.com>
    Signed-off-by: Mauro Carvalho Chehab <mchehab@s-opensource.com>

diff --git a/include/media/cec.h b/include/media/cec.h
index 7cdf71d7125a..9afba9b558df 100644
--- a/include/media/cec.h
+++ b/include/media/cec.h
@@ -1,20 +1,8 @@
+/* SPDX-License-Identifier: GPL-2.0-only */
 /*
  * cec - HDMI Consumer Electronics Control support header
  *
  * Copyright 2016 Cisco Systems, Inc. and/or its affiliates. All rights reserved.
- *
- * This program is free software; you may redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation; version 2 of the License.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
- * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
- * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
- * SOFTWARE.
  */
 
 #ifndef _MEDIA_CEC_H

commit 57c642cb45d6f7d0d950c3bc67439989062ac743
Author: Sean Young <sean@mess.org>
Date:   Thu Nov 23 17:37:10 2017 -0500

    media: cec: move cec autorepeat handling to rc-core
    
    CEC autorepeat is different than other protocols. Autorepeat is triggered
    by the first repeated user control pressed CEC message, rather than a
    fixed REP_DELAY.
    
    This change also does away with the KEY_UP event directly after the first
    KEY_DOWN event, which was used to stop autorepeat from starting.
    
    See commit a9a249a2c997 ("media: cec: fix remote control passthrough")
    for the original change.
    
    Acked-by: Hans Verkuil <hans.verkuil@cisco.com>
    Signed-off-by: Sean Young <sean@mess.org>
    Signed-off-by: Mauro Carvalho Chehab <mchehab@s-opensource.com>

diff --git a/include/media/cec.h b/include/media/cec.h
index 1c6a797cb6d4..7cdf71d7125a 100644
--- a/include/media/cec.h
+++ b/include/media/cec.h
@@ -192,11 +192,6 @@ struct cec_adapter {
 
 	u32 tx_timeouts;
 
-#ifdef CONFIG_MEDIA_CEC_RC
-	bool rc_repeating;
-	int rc_last_scancode;
-	u64 rc_last_keypress;
-#endif
 #ifdef CONFIG_CEC_NOTIFIER
 	struct cec_notifier *notifier;
 #endif

commit c8959a39fd47189a1474a4e92ffa34763589d6b0
Author: Hans Verkuil <hverkuil@xs4all.nl>
Date:   Wed Nov 22 04:12:39 2017 -0500

    media: cec: disable the hardware when unregistered
    
    When the device is being unregistered disable the hardware, don't wait
    until cec_delete_adapter is called as the hardware may have disappeared by
    then. This would be the case for hotplugable devices.
    
    Signed-off-by: Hans Verkuil <hans.verkuil@cisco.com>
    Reported-by: Bård Eirik Winther <bwinther@cisco.com>
    Tested-by: Bård Eirik Winther <bwinther@cisco.com>
    Signed-off-by: Mauro Carvalho Chehab <mchehab@s-opensource.com>

diff --git a/include/media/cec.h b/include/media/cec.h
index dd781e928b72..1c6a797cb6d4 100644
--- a/include/media/cec.h
+++ b/include/media/cec.h
@@ -230,6 +230,18 @@ static inline bool cec_is_sink(const struct cec_adapter *adap)
 	return adap->phys_addr == 0;
 }
 
+/**
+ * cec_is_registered() - is the CEC adapter registered?
+ *
+ * @adap:	the CEC adapter, may be NULL.
+ *
+ * Return: true if the adapter is registered, false otherwise.
+ */
+static inline bool cec_is_registered(const struct cec_adapter *adap)
+{
+	return adap && adap->devnode.registered;
+}
+
 #define cec_phys_addr_exp(pa) \
 	((pa) >> 12), ((pa) >> 8) & 0xf, ((pa) >> 4) & 0xf, (pa) & 0xf
 

commit 48ea2e926b5ad29c0747fbd90e605cc56fb78298
Author: Hans Verkuil <hverkuil@xs4all.nl>
Date:   Sun Nov 5 07:36:36 2017 -0500

    media: cec: add the adap_monitor_pin_enable op
    
    Some devices can monitor the CEC pin using an interrupt, but you
    only want to enable the interrupt if you actually switch to pin
    monitoring mode.
    
    So add a new op that is called when pin monitoring needs to be
    switched on or off.
    
    Also fix a small bug where the initial CEC pin event was sent
    again when calling S_MODE twice with the same CEC_MODE_MONITOR_PIN
    mode.
    
    Signed-off-by: Hans Verkuil <hans.verkuil@cisco.com>
    Signed-off-by: Mauro Carvalho Chehab <mchehab@s-opensource.com>

diff --git a/include/media/cec.h b/include/media/cec.h
index 16341210d3ba..dd781e928b72 100644
--- a/include/media/cec.h
+++ b/include/media/cec.h
@@ -122,6 +122,7 @@ struct cec_adap_ops {
 	/* Low-level callbacks */
 	int (*adap_enable)(struct cec_adapter *adap, bool enable);
 	int (*adap_monitor_all_enable)(struct cec_adapter *adap, bool enable);
+	int (*adap_monitor_pin_enable)(struct cec_adapter *adap, bool enable);
 	int (*adap_log_addr)(struct cec_adapter *adap, u8 logical_addr);
 	int (*adap_transmit)(struct cec_adapter *adap, u8 attempts,
 			     u32 signal_free_time, struct cec_msg *msg);

commit 9267d90c564fc4ac7e51b922fa03107bb8c78739
Author: Hans Verkuil <hans.verkuil@cisco.com>
Date:   Thu Aug 31 04:12:53 2017 -0400

    media: cec.h: initialize *parent and *port in cec_phys_addr_validate
    
    Make sure these values are set to avoid 'uninitialized variable'
    warnings. Hasn't happened yet, but better safe than sorry.
    
    Signed-off-by: Hans Verkuil <hans.verkuil@cisco.com>
    Signed-off-by: Mauro Carvalho Chehab <mchehab@s-opensource.com>

diff --git a/include/media/cec.h b/include/media/cec.h
index 9d0f983faea9..16341210d3ba 100644
--- a/include/media/cec.h
+++ b/include/media/cec.h
@@ -427,6 +427,10 @@ static inline u16 cec_phys_addr_for_input(u16 phys_addr, u8 input)
 
 static inline int cec_phys_addr_validate(u16 phys_addr, u16 *parent, u16 *port)
 {
+	if (parent)
+		*parent = phys_addr;
+	if (port)
+		*port = 0;
 	return 0;
 }
 

commit 333ef6bd10c3ffdaf6da94e34dc6cae675ed27fc
Author: Hans Verkuil <hans.verkuil@cisco.com>
Date:   Tue Aug 15 10:07:25 2017 -0400

    media: cec: add CEC_EVENT_PIN_HPD_LOW/HIGH events
    
    Add support for two new low-level events: PIN_HPD_LOW and PIN_HPD_HIGH.
    
    This is specifically meant for use with the upcoming cec-gpio driver
    and makes it possible to trace when the HPD pin changes. Some HDMI
    sinks do strange things with the HPD and this makes it easy to debug
    this.
    
    Note that this also moves the initialization of a devnode mutex and
    list to the allocate_adapter function: if the HPD is high, then as
    soon as the HPD interrupt is created an interrupt occurs and
    cec_queue_pin_hpd_event() is called which requires that the devnode
    mutex and list are initialized.
    
    Signed-off-by: Hans Verkuil <hans.verkuil@cisco.com>
    Signed-off-by: Mauro Carvalho Chehab <mchehab@s-opensource.com>

diff --git a/include/media/cec.h b/include/media/cec.h
index df6b3bd31284..9d0f983faea9 100644
--- a/include/media/cec.h
+++ b/include/media/cec.h
@@ -91,7 +91,7 @@ struct cec_event_entry {
 };
 
 #define CEC_NUM_CORE_EVENTS 2
-#define CEC_NUM_EVENTS CEC_EVENT_PIN_CEC_HIGH
+#define CEC_NUM_EVENTS CEC_EVENT_PIN_HPD_HIGH
 
 struct cec_fh {
 	struct list_head	list;
@@ -296,6 +296,16 @@ static inline void cec_received_msg(struct cec_adapter *adap,
 void cec_queue_pin_cec_event(struct cec_adapter *adap,
 			     bool is_high, ktime_t ts);
 
+/**
+ * cec_queue_pin_hpd_event() - queue a pin event with a given timestamp.
+ *
+ * @adap:	pointer to the cec adapter
+ * @is_high:	when true the HPD pin is high, otherwise it is low
+ * @ts:		the timestamp for this event
+ *
+ */
+void cec_queue_pin_hpd_event(struct cec_adapter *adap, bool is_high, ktime_t ts);
+
 /**
  * cec_get_edid_phys_addr() - find and return the physical address
  *

commit 28e11b15b6606c3308f87f7c9c4c9e404eddde6d
Author: Hans Verkuil <hans.verkuil@cisco.com>
Date:   Sun Aug 20 06:53:10 2017 -0400

    media: cec: replace pin->cur_value by adap->cec_pin_is_high
    
    The current CEC pin value (0 or 1) was part of the cec_pin struct,
    but that assumes that CEC pin monitoring can only be used with
    a driver that uses the low-level CEC pin framework.
    
    But hardware that has both a high-level API and can monitor the
    CEC pin at low-level at the same time does not need to depend on
    the cec pin framework.
    
    To support such devices remove the cur_value field from struct cec_pin
    and add a cec_pin_is_high field to cec_adapter. This also makes it
    possible to drop the '#ifdef CONFIG_CEC_PIN' in cec-api.c.
    
    Signed-off-by: Hans Verkuil <hans.verkuil@cisco.com>
    Signed-off-by: Mauro Carvalho Chehab <mchehab@s-opensource.com>

diff --git a/include/media/cec.h b/include/media/cec.h
index 60b26fc18464..df6b3bd31284 100644
--- a/include/media/cec.h
+++ b/include/media/cec.h
@@ -180,6 +180,7 @@ struct cec_adapter {
 	bool needs_hpd;
 	bool is_configuring;
 	bool is_configured;
+	bool cec_pin_is_high;
 	u32 monitor_all_cnt;
 	u32 monitor_pin_cnt;
 	u32 follower_cnt;

commit a9a249a2c997506a64eaee22f1458fda893f62a8
Author: Hans Verkuil <hans.verkuil@cisco.com>
Date:   Mon Aug 7 09:31:24 2017 -0400

    media: cec: fix remote control passthrough
    
    The 'Press and Hold' operation was not correctly implemented, in
    particular the requirement that the repeat doesn't start until
    the second identical keypress arrives. The REP_DELAY value also
    had to be adjusted (see the comment in the code) to achieve the
    desired behavior.
    
    The 'enabled_protocols' field was also never set, fix that too. Since
    CEC is a fixed protocol the driver has to set this field.
    
    Signed-off-by: Hans Verkuil <hans.verkuil@cisco.com>
    Acked-by: Sean Young <sean@mess.org>
    Signed-off-by: Mauro Carvalho Chehab <mchehab@s-opensource.com>

diff --git a/include/media/cec.h b/include/media/cec.h
index d97aa6c32abd..60b26fc18464 100644
--- a/include/media/cec.h
+++ b/include/media/cec.h
@@ -190,6 +190,11 @@ struct cec_adapter {
 
 	u32 tx_timeouts;
 
+#ifdef CONFIG_MEDIA_CEC_RC
+	bool rc_repeating;
+	int rc_last_scancode;
+	u64 rc_last_keypress;
+#endif
 #ifdef CONFIG_CEC_NOTIFIER
 	struct cec_notifier *notifier;
 #endif

commit 518f4b26be1ebf6ce220c4e37b5c7e5410c4d064
Author: Sean Young <sean@mess.org>
Date:   Sat Jul 1 12:13:19 2017 -0400

    media: rc-core: rename input_name to device_name
    
    When an ir-spi is registered, you get this message.
    
    rc rc0: Unspecified device as /devices/platform/soc/3f215080.spi/spi_master/spi32766/spi32766.128/rc/rc0
    
    "Unspecified device" refers to input_name, which makes no sense for IR
    TX only devices. So, rename to device_name.
    
    Also make driver_name const char* so that no casts are needed anywhere.
    
    Now ir-spi reports:
    
    rc rc0: IR SPI as /devices/platform/soc/3f215080.spi/spi_master/spi32766/spi32766.128/rc/rc0
    
    Signed-off-by: Sean Young <sean@mess.org>
    Signed-off-by: Mauro Carvalho Chehab <mchehab@s-opensource.com>

diff --git a/include/media/cec.h b/include/media/cec.h
index 224359c9941a..d97aa6c32abd 100644
--- a/include/media/cec.h
+++ b/include/media/cec.h
@@ -203,7 +203,7 @@ struct cec_adapter {
 	u16 phys_addrs[15];
 	u32 sequence;
 
-	char input_name[32];
+	char device_name[32];
 	char input_phys[32];
 	char input_drv[32];
 };

commit 9a6b2a87405a5022660022722d4a830b768e8033
Author: Hans Verkuil <hverkuil@xs4all.nl>
Date:   Tue Aug 15 15:26:25 2017 -0400

    media: cec: rename pin events/function
    
    The CEC_EVENT_PIN_LOW/HIGH defines and the cec_queue_pin_event() function
    did not specify that these were about CEC pin events.
    
    Since in the future there will also be HPD pin events it is wise to rename
    the event defines and function to CEC_EVENT_PIN_CEC_LOW/HIGH and
    cec_queue_pin_cec_event() now before these become part of the ABI.
    
    Signed-off-by: Hans Verkuil <hans.verkuil@cisco.com>
    Signed-off-by: Mauro Carvalho Chehab <mchehab@s-opensource.com>

diff --git a/include/media/cec.h b/include/media/cec.h
index 1bec7bde4792..224359c9941a 100644
--- a/include/media/cec.h
+++ b/include/media/cec.h
@@ -91,7 +91,7 @@ struct cec_event_entry {
 };
 
 #define CEC_NUM_CORE_EVENTS 2
-#define CEC_NUM_EVENTS CEC_EVENT_PIN_HIGH
+#define CEC_NUM_EVENTS CEC_EVENT_PIN_CEC_HIGH
 
 struct cec_fh {
 	struct list_head	list;
@@ -280,14 +280,15 @@ static inline void cec_received_msg(struct cec_adapter *adap,
 }
 
 /**
- * cec_queue_pin_event() - queue a pin event with a given timestamp.
+ * cec_queue_pin_cec_event() - queue a CEC pin event with a given timestamp.
  *
  * @adap:	pointer to the cec adapter
- * @is_high:	when true the pin is high, otherwise it is low
+ * @is_high:	when true the CEC pin is high, otherwise it is low
  * @ts:		the timestamp for this event
  *
  */
-void cec_queue_pin_event(struct cec_adapter *adap, bool is_high, ktime_t ts);
+void cec_queue_pin_cec_event(struct cec_adapter *adap,
+			     bool is_high, ktime_t ts);
 
 /**
  * cec_get_edid_phys_addr() - find and return the physical address

commit ee0c503eacfb97e1d443baf5a03939201d0244f5
Author: Hans Verkuil <hans.verkuil@cisco.com>
Date:   Fri Aug 4 06:41:51 2017 -0400

    media: media/cec.h: add CEC_CAP_DEFAULTS
    
    The CEC_CAP_LOG_ADDRS, CEC_CAP_TRANSMIT, CEC_CAP_PASSTHROUGH and
    CEC_CAP_RC capabilities are normally always present.
    
    Add a CEC_CAP_DEFAULTS define that ORs these four caps to simplify
    drivers.
    
    Signed-off-by: Hans Verkuil <hans.verkuil@cisco.com>
    Signed-off-by: Mauro Carvalho Chehab <mchehab@s-opensource.com>

diff --git a/include/media/cec.h b/include/media/cec.h
index 224a6e225c52..1bec7bde4792 100644
--- a/include/media/cec.h
+++ b/include/media/cec.h
@@ -31,6 +31,9 @@
 #include <media/rc-core.h>
 #include <media/cec-notifier.h>
 
+#define CEC_CAP_DEFAULTS (CEC_CAP_LOG_ADDRS | CEC_CAP_TRANSMIT | \
+			  CEC_CAP_PASSTHROUGH | CEC_CAP_RC)
+
 /**
  * struct cec_devnode - cec device node
  * @dev:	cec device

commit 5150418593015d280dab321da1fe3cea4ed3b693
Author: Hans Verkuil <hverkuil@xs4all.nl>
Date:   Thu Jul 13 04:07:23 2017 -0300

    media: cec: move cec_register_cec_notifier to cec-notifier.h
    
    The cec_register_cec_notifier function was in media/cec.h, but it
    has to be in cec-notifier.h.
    
    While we are at it, also document it and add a stub function for when
    the notifier is disabled or the CEC core code is unreachable.
    
    Based on an earlier patch from Jose Abreu <Jose.Abreu@synopsys.com>.
    
    Signed-off-by: Hans Verkuil <hans.verkuil@cisco.com>
    Signed-off-by: Mauro Carvalho Chehab <mchehab@s-opensource.com>

diff --git a/include/media/cec.h b/include/media/cec.h
index f9cab1a9f912..224a6e225c52 100644
--- a/include/media/cec.h
+++ b/include/media/cec.h
@@ -361,11 +361,6 @@ u16 cec_phys_addr_for_input(u16 phys_addr, u8 input);
  */
 int cec_phys_addr_validate(u16 phys_addr, u16 *parent, u16 *port);
 
-#ifdef CONFIG_CEC_NOTIFIER
-void cec_register_cec_notifier(struct cec_adapter *adap,
-			       struct cec_notifier *notifier);
-#endif
-
 #else
 
 static inline int cec_register_adapter(struct cec_adapter *adap,

commit ea5c8ef296681b53480ebeeffd06083bb60e693d
Author: Hans Verkuil <hans.verkuil@cisco.com>
Date:   Tue Jul 11 03:30:42 2017 -0300

    media: cec-pin: add low-level pin hardware support
    
    Add support for CEC hardware that relies on low-level pin polling or
    GPIO interrupts.
    
    One example is the Allwinner SoC. But any GPIO-based CEC implementation can
    use this as well.
    
    A GPIO implementation is very suitable as well for debugging: it can use
    interrupts to detect state changes and report it. Userspace can then verify
    if the bus traffic is correct. This also makes error injection possible.
    
    The disadvantage is that it is hard to get the timings right since linux
    isn't a hard realtime system.
    
    In general on an idle system it works quite well, but under load the timer
    will miss its mark every so often.
    
    The debugfs file /sys/kernel/debug/cec/cecX/status gives some statistics
    with respect to the timer overruns.
    
    When the adapter is unconfigured and the low-level driver supports
    interrupts, then the interrupt will be used to detect changes. This should
    be quite accurate. But when the adapter is configured a hrtimer has to be
    used.
    
    The hrtimer implements a state machine where for each state the code will
    read the bus or drive the bus and go on to the next state. It will re-arm
    the timer with a delay based on the next state.
    
    Signed-off-by: Hans Verkuil <hans.verkuil@cisco.com>
    Reviewed-by: Maxime Ripard <maxime.ripard@free-electrons.com>
    Signed-off-by: Mauro Carvalho Chehab <mchehab@s-opensource.com>

diff --git a/include/media/cec.h b/include/media/cec.h
index d983960b37ad..f9cab1a9f912 100644
--- a/include/media/cec.h
+++ b/include/media/cec.h
@@ -61,6 +61,7 @@ struct cec_devnode {
 
 struct cec_adapter;
 struct cec_data;
+struct cec_pin;
 
 struct cec_data {
 	struct list_head list;
@@ -189,6 +190,9 @@ struct cec_adapter {
 #ifdef CONFIG_CEC_NOTIFIER
 	struct cec_notifier *notifier;
 #endif
+#ifdef CONFIG_CEC_PIN
+	struct cec_pin *pin;
+#endif
 
 	struct dentry *cec_dir;
 	struct dentry *status_file;

commit b8d62f50b1df2571afcf47107bbbe9cd60f8aafd
Author: Hans Verkuil <hans.verkuil@cisco.com>
Date:   Tue Jul 11 03:30:41 2017 -0300

    media: cec: add core support for low-level CEC pin monitoring
    
    Add support for the new MONITOR_PIN mode.
    
    Add the cec_pin_event function that the CEC pin code will call to queue pin
    change events.
    
    Signed-off-by: Hans Verkuil <hans.verkuil@cisco.com>
    Reviewed-by: Maxime Ripard <maxime.ripard@free-electrons.com>
    Signed-off-by: Mauro Carvalho Chehab <mchehab@s-opensource.com>

diff --git a/include/media/cec.h b/include/media/cec.h
index 6cc862af74e5..d983960b37ad 100644
--- a/include/media/cec.h
+++ b/include/media/cec.h
@@ -177,6 +177,7 @@ struct cec_adapter {
 	bool is_configuring;
 	bool is_configured;
 	u32 monitor_all_cnt;
+	u32 monitor_pin_cnt;
 	u32 follower_cnt;
 	struct cec_fh *cec_follower;
 	struct cec_fh *cec_initiator;
@@ -271,6 +272,16 @@ static inline void cec_received_msg(struct cec_adapter *adap,
 	cec_received_msg_ts(adap, msg, ktime_get());
 }
 
+/**
+ * cec_queue_pin_event() - queue a pin event with a given timestamp.
+ *
+ * @adap:	pointer to the cec adapter
+ * @is_high:	when true the pin is high, otherwise it is low
+ * @ts:		the timestamp for this event
+ *
+ */
+void cec_queue_pin_event(struct cec_adapter *adap, bool is_high, ktime_t ts);
+
 /**
  * cec_get_edid_phys_addr() - find and return the physical address
  *

commit 6b2bbb08747a56dcf4ee33606a06025eca571260
Author: Hans Verkuil <hans.verkuil@cisco.com>
Date:   Tue Jul 11 03:30:39 2017 -0300

    media: cec: rework the cec event handling
    
    Event handling was always fairly simplistic since there were only
    two events. With the addition of pin events this needed to be redesigned.
    
    The state_change and lost_msgs events are now core events with the
    guarantee that the last state is always available. The new pin events
    are a queue of events (up to 64 for each event) and the oldest event
    will be dropped if the application cannot keep up. Lost events are
    marked with a new event flag.
    
    Signed-off-by: Hans Verkuil <hans.verkuil@cisco.com>
    Reviewed-by: Maxime Ripard <maxime.ripard@free-electrons.com>
    Signed-off-by: Mauro Carvalho Chehab <mchehab@s-opensource.com>

diff --git a/include/media/cec.h b/include/media/cec.h
index 37768203572d..6cc862af74e5 100644
--- a/include/media/cec.h
+++ b/include/media/cec.h
@@ -81,7 +81,13 @@ struct cec_msg_entry {
 	struct cec_msg		msg;
 };
 
-#define CEC_NUM_EVENTS		CEC_EVENT_LOST_MSGS
+struct cec_event_entry {
+	struct list_head	list;
+	struct cec_event	ev;
+};
+
+#define CEC_NUM_CORE_EVENTS 2
+#define CEC_NUM_EVENTS CEC_EVENT_PIN_HIGH
 
 struct cec_fh {
 	struct list_head	list;
@@ -92,9 +98,11 @@ struct cec_fh {
 
 	/* Events */
 	wait_queue_head_t	wait;
-	unsigned int		pending_events;
-	struct cec_event	events[CEC_NUM_EVENTS];
 	struct mutex		lock;
+	struct list_head	events[CEC_NUM_EVENTS]; /* queued events */
+	u8			queued_events[CEC_NUM_EVENTS];
+	unsigned int		total_queued_events;
+	struct cec_event_entry	core_events[CEC_NUM_CORE_EVENTS];
 	struct list_head	msgs; /* queued messages */
 	unsigned int		queued_msgs;
 };

commit e6259b5f7ab74e399f838cb1abdc12f3e28668f4
Author: Hans Verkuil <hans.verkuil@cisco.com>
Date:   Tue Jul 11 03:30:36 2017 -0300

    media: cec: add adap_free op
    
    This is needed for CEC adapters that allocate resources that have
    to be freed before the cec_adapter is deleted.
    
    Signed-off-by: Hans Verkuil <hans.verkuil@cisco.com>
    Reviewed-by: Maxime Ripard <maxime.ripard@free-electrons.com>
    Signed-off-by: Mauro Carvalho Chehab <mchehab@s-opensource.com>

diff --git a/include/media/cec.h b/include/media/cec.h
index e1e60dbb66c3..37768203572d 100644
--- a/include/media/cec.h
+++ b/include/media/cec.h
@@ -114,6 +114,7 @@ struct cec_adap_ops {
 	int (*adap_transmit)(struct cec_adapter *adap, u8 attempts,
 			     u32 signal_free_time, struct cec_msg *msg);
 	void (*adap_status)(struct cec_adapter *adap, struct seq_file *file);
+	void (*adap_free)(struct cec_adapter *adap);
 
 	/* High-level CEC message callback */
 	int (*received)(struct cec_adapter *adap, struct cec_msg *msg);

commit 0861ad14c6cfc9dc8bcde44bc23a7a355167eb9f
Author: Hans Verkuil <hans.verkuil@cisco.com>
Date:   Tue Jul 11 03:30:35 2017 -0300

    media: cec: add *_ts variants for transmit_done/received_msg
    
    Currently the transmit_(attempt_)done and received_msg functions set
    the timestamp themselves. For the upcoming low-level pin API we need
    to pass this as an argument instead. So make _ts variants that allow
    the caller to specify the timestamp.
    
    Signed-off-by: Hans Verkuil <hans.verkuil@cisco.com>
    Reviewed-by: Maxime Ripard <maxime.ripard@free-electrons.com>
    Signed-off-by: Mauro Carvalho Chehab <mchehab@s-opensource.com>

diff --git a/include/media/cec.h b/include/media/cec.h
index e32b0e1a81a4..e1e60dbb66c3 100644
--- a/include/media/cec.h
+++ b/include/media/cec.h
@@ -228,15 +228,39 @@ int cec_transmit_msg(struct cec_adapter *adap, struct cec_msg *msg,
 		     bool block);
 
 /* Called by the adapter */
-void cec_transmit_done(struct cec_adapter *adap, u8 status, u8 arb_lost_cnt,
-		       u8 nack_cnt, u8 low_drive_cnt, u8 error_cnt);
+void cec_transmit_done_ts(struct cec_adapter *adap, u8 status,
+			  u8 arb_lost_cnt, u8 nack_cnt, u8 low_drive_cnt,
+			  u8 error_cnt, ktime_t ts);
+
+static inline void cec_transmit_done(struct cec_adapter *adap, u8 status,
+				     u8 arb_lost_cnt, u8 nack_cnt,
+				     u8 low_drive_cnt, u8 error_cnt)
+{
+	cec_transmit_done_ts(adap, status, arb_lost_cnt, nack_cnt,
+			     low_drive_cnt, error_cnt, ktime_get());
+}
 /*
  * Simplified version of cec_transmit_done for hardware that doesn't retry
  * failed transmits. So this is always just one attempt in which case
  * the status is sufficient.
  */
-void cec_transmit_attempt_done(struct cec_adapter *adap, u8 status);
-void cec_received_msg(struct cec_adapter *adap, struct cec_msg *msg);
+void cec_transmit_attempt_done_ts(struct cec_adapter *adap,
+				  u8 status, ktime_t ts);
+
+static inline void cec_transmit_attempt_done(struct cec_adapter *adap,
+					     u8 status)
+{
+	cec_transmit_attempt_done_ts(adap, status, ktime_get());
+}
+
+void cec_received_msg_ts(struct cec_adapter *adap,
+			 struct cec_msg *msg, ktime_t ts);
+
+static inline void cec_received_msg(struct cec_adapter *adap,
+				    struct cec_msg *msg)
+{
+	cec_received_msg_ts(adap, msg, ktime_get());
+}
 
 /**
  * cec_get_edid_phys_addr() - find and return the physical address

commit bb789e03f2a140a80ddc7d18b7ef4d626c2a71d8
Author: Hans Verkuil <hans.verkuil@cisco.com>
Date:   Tue Jul 11 03:30:34 2017 -0300

    media: cec: improve transmit timeout logging
    
    Kernel logging messes up the upcoming low-level CEC monitoring support
    which is very time-sensitive. So change the debug level of this message
    but keep a counter that is shown in the debugfs status log.
    
    Signed-off-by: Hans Verkuil <hans.verkuil@cisco.com>
    Reviewed-by: Maxime Ripard <maxime.ripard@free-electrons.com>
    Signed-off-by: Mauro Carvalho Chehab <mchehab@s-opensource.com>

diff --git a/include/media/cec.h b/include/media/cec.h
index 56643b27e4b8..e32b0e1a81a4 100644
--- a/include/media/cec.h
+++ b/include/media/cec.h
@@ -174,6 +174,8 @@ struct cec_adapter {
 	bool passthrough;
 	struct cec_log_addrs log_addrs;
 
+	u32 tx_timeouts;
+
 #ifdef CONFIG_CEC_NOTIFIER
 	struct cec_notifier *notifier;
 #endif

commit ff6ccad361df4dfda42b60897cb7e55b3ba13439
Merge: 3bd30b24efa6 41f1830f5a7a
Author: Mauro Carvalho Chehab <mchehab@s-opensource.com>
Date:   Tue Jun 20 08:51:56 2017 -0300

    Merge tag 'v4.12-rc6' into patchwork
    
    Linux 4.12-rc6
    
    * tag 'v4.12-rc6': (813 commits)
      Linux 4.12-rc6
      mm: larger stack guard gap, between vmas
      virtio_balloon: disable VIOMMU support
      mm: correct the comment when reclaimed pages exceed the scanned pages
      userfaultfd: shmem: handle coredumping in handle_userfault()
      mm: numa: avoid waiting on freed migrated pages
      swap: cond_resched in swap_cgroup_prepare()
      mm/memory-failure.c: use compound_head() flags for huge pages
      perf unwind: Report module before querying isactivation in dwfl unwind
      fs: pass on flags in compat_writev
      objtool: Add fortify_panic as __noreturn function
      powerpc/debug: Add missing warn flag to WARN_ON's non-builtin path
      USB: gadgetfs, dummy-hcd, net2280: fix locking for callbacks
      drm: mxsfb_crtc: Reset the eLCDIF controller
      drm/mgag200: Fix to always set HiPri for G200e4 V2
      i2c: ismt: fix wrong device address when unmap the data buffer
      i2c: rcar: use correct length when unmapping DMA
      powerpc/xive: Fix offset for store EOI MMIOs
      drm/tegra: Correct idr_alloc() minimum id
      drm/tegra: Fix lockup on a use of staging API
      ...
    
    Signed-off-by: Mauro Carvalho Chehab <mchehab@s-opensource.com>

commit f902c1e95d5dfe5102f8467d69dc51d505f832ee
Author: Hans Verkuil <hans.verkuil@cisco.com>
Date:   Wed Jun 7 11:46:12 2017 -0300

    [media] cec: add CEC_CAP_NEEDS_HPD
    
    Add a new capability CEC_CAP_NEEDS_HPD. If this capability is set
    then the hardware can only use CEC if the HDMI Hotplug Detect pin
    is high. Such hardware cannot handle the corner case in the CEC specification
    where it is possible to transmit messages even if no hotplug signal is
    present (needed for some displays that turn off the HPD when in standby,
    but still have CEC enabled).
    
    Typically hardware that needs this capability have the HPD wired to the CEC
    block, often to a 'power' or 'active' pin.
    
    Signed-off-by: Hans Verkuil <hans.verkuil@cisco.com>
    Signed-off-by: Mauro Carvalho Chehab <mchehab@s-opensource.com>

diff --git a/include/media/cec.h b/include/media/cec.h
index a2e184d1df00..7e32e80b243e 100644
--- a/include/media/cec.h
+++ b/include/media/cec.h
@@ -164,6 +164,7 @@ struct cec_adapter {
 	u8 available_log_addrs;
 
 	u16 phys_addr;
+	bool needs_hpd;
 	bool is_configuring;
 	bool is_configured;
 	u32 monitor_all_cnt;

commit c94cdc1e0c3589856de9d4ecafeeffdb349a8e0b
Author: Hans Verkuil <hverkuil@xs4all.nl>
Date:   Wed Jun 7 11:46:10 2017 -0300

    [media] cec: add cec_transmit_attempt_done helper function
    
    A simpler variant of cec_transmit_done to be used where the HW does
    just a single attempt at a transmit. So if the status indicates an
    error, then the corresponding error count will always be 1 and this
    function figures that out based on the status argument.
    
    Signed-off-by: Hans Verkuil <hans.verkuil@cisco.com>
    Signed-off-by: Mauro Carvalho Chehab <mchehab@s-opensource.com>

diff --git a/include/media/cec.h b/include/media/cec.h
index 3ce73951591e..a2e184d1df00 100644
--- a/include/media/cec.h
+++ b/include/media/cec.h
@@ -227,6 +227,12 @@ int cec_transmit_msg(struct cec_adapter *adap, struct cec_msg *msg,
 /* Called by the adapter */
 void cec_transmit_done(struct cec_adapter *adap, u8 status, u8 arb_lost_cnt,
 		       u8 nack_cnt, u8 low_drive_cnt, u8 error_cnt);
+/*
+ * Simplified version of cec_transmit_done for hardware that doesn't retry
+ * failed transmits. So this is always just one attempt in which case
+ * the status is sufficient.
+ */
+void cec_transmit_attempt_done(struct cec_adapter *adap, u8 status);
 void cec_received_msg(struct cec_adapter *adap, struct cec_msg *msg);
 
 /**

commit 135327899d2874f2b65b3a3626b37d87df9e6a05
Author: Hans Verkuil <hans.verkuil@cisco.com>
Date:   Wed Jun 7 11:46:09 2017 -0300

    [media] cec: add cec_phys_addr_invalidate() helper function
    
    Simplifies setting the physical address to CEC_PHYS_ADDR_INVALID.
    
    Signed-off-by: Hans Verkuil <hans.verkuil@cisco.com>
    Signed-off-by: Hans Verkuil <hansverk@cisco.com>
    Signed-off-by: Mauro Carvalho Chehab <mchehab@s-opensource.com>

diff --git a/include/media/cec.h b/include/media/cec.h
index a548b292eeb1..3ce73951591e 100644
--- a/include/media/cec.h
+++ b/include/media/cec.h
@@ -360,4 +360,17 @@ static inline int cec_phys_addr_validate(u16 phys_addr, u16 *parent, u16 *port)
 
 #endif
 
+/**
+ * cec_phys_addr_invalidate() - set the physical address to INVALID
+ *
+ * @adap:	the CEC adapter
+ *
+ * This is a simple helper function to invalidate the physical
+ * address.
+ */
+static inline void cec_phys_addr_invalidate(struct cec_adapter *adap)
+{
+	cec_s_phys_addr(adap, CEC_PHYS_ADDR_INVALID, false);
+}
+
 #endif /* _MEDIA_CEC_H */

commit 23111ec304166750479e17318b7175ff7db0d6ac
Author: Hans Verkuil <hans.verkuil@cisco.com>
Date:   Wed Jun 7 11:46:08 2017 -0300

    [media] cec: add cec_s_phys_addr_from_edid helper function
    
    This function simplifies the integration of CEC in DRM drivers.
    
    Signed-off-by: Hans Verkuil <hans.verkuil@cisco.com>
    Signed-off-by: Mauro Carvalho Chehab <mchehab@s-opensource.com>

diff --git a/include/media/cec.h b/include/media/cec.h
index bfa88d4d67e1..a548b292eeb1 100644
--- a/include/media/cec.h
+++ b/include/media/cec.h
@@ -206,6 +206,8 @@ static inline bool cec_is_sink(const struct cec_adapter *adap)
 #define cec_phys_addr_exp(pa) \
 	((pa) >> 12), ((pa) >> 8) & 0xf, ((pa) >> 4) & 0xf, (pa) & 0xf
 
+struct edid;
+
 #if IS_ENABLED(CONFIG_CEC_CORE)
 struct cec_adapter *cec_allocate_adapter(const struct cec_adap_ops *ops,
 		void *priv, const char *name, u32 caps, u8 available_las);
@@ -217,6 +219,8 @@ int cec_s_log_addrs(struct cec_adapter *adap, struct cec_log_addrs *log_addrs,
 		    bool block);
 void cec_s_phys_addr(struct cec_adapter *adap, u16 phys_addr,
 		     bool block);
+void cec_s_phys_addr_from_edid(struct cec_adapter *adap,
+			       const struct edid *edid);
 int cec_transmit_msg(struct cec_adapter *adap, struct cec_msg *msg,
 		     bool block);
 
@@ -326,6 +330,11 @@ static inline void cec_s_phys_addr(struct cec_adapter *adap, u16 phys_addr,
 {
 }
 
+static inline void cec_s_phys_addr_from_edid(struct cec_adapter *adap,
+					     const struct edid *edid)
+{
+}
+
 static inline u16 cec_get_edid_phys_addr(const u8 *edid, unsigned int size,
 					 unsigned int *offset)
 {

commit f9f314f323951a33d8b4a4f63f7d04b7f3bc0603
Author: Hans Verkuil <hverkuil@xs4all.nl>
Date:   Thu Jun 8 15:37:44 2017 -0300

    [media] media/cec.h: use IS_REACHABLE instead of IS_ENABLED
    
    Fix messages like this:
    
    adv7842.c:(.text+0x2edadd): undefined reference to `cec_unregister_adapter'
    
    when CEC_CORE=m but the driver including media/cec.h is built-in. In that case
    the static inlines provided in media/cec.h should be used by that driver.
    
    Reported-by: Randy Dunlap <rdunlap@infradead.org>
    Reported-by: kbuild test robot <fengguang.wu@intel.com>
    Signed-off-by: Hans Verkuil <hans.verkuil@cisco.com>
    Signed-off-by: Mauro Carvalho Chehab <mchehab@s-opensource.com>

diff --git a/include/media/cec.h b/include/media/cec.h
index bfa88d4d67e1..201f060978da 100644
--- a/include/media/cec.h
+++ b/include/media/cec.h
@@ -206,7 +206,7 @@ static inline bool cec_is_sink(const struct cec_adapter *adap)
 #define cec_phys_addr_exp(pa) \
 	((pa) >> 12), ((pa) >> 8) & 0xf, ((pa) >> 4) & 0xf, (pa) & 0xf
 
-#if IS_ENABLED(CONFIG_CEC_CORE)
+#if IS_REACHABLE(CONFIG_CEC_CORE)
 struct cec_adapter *cec_allocate_adapter(const struct cec_adap_ops *ops,
 		void *priv, const char *name, u32 caps, u8 available_las);
 int cec_register_adapter(struct cec_adapter *adap, struct device *parent);

commit e94c32818d865b620c9bbd2656ab3199259ef9ec
Author: Hans Verkuil <hans.verkuil@cisco.com>
Date:   Sun May 28 05:58:04 2017 -0300

    [media] cec: rename MEDIA_CEC_NOTIFIER to CEC_NOTIFIER
    
    This config option is strictly speaking independent of the
    media subsystem since it can be used by drm as well.
    
    Besides, it looks odd when drivers select CEC_CORE and
    MEDIA_CEC_NOTIFIER, that's inconsistent naming.
    
    Signed-off-by: Hans Verkuil <hans.verkuil@cisco.com>
    Signed-off-by: Mauro Carvalho Chehab <mchehab@s-opensource.com>

diff --git a/include/media/cec.h b/include/media/cec.h
index b8eb895731d5..bfa88d4d67e1 100644
--- a/include/media/cec.h
+++ b/include/media/cec.h
@@ -173,7 +173,7 @@ struct cec_adapter {
 	bool passthrough;
 	struct cec_log_addrs log_addrs;
 
-#ifdef CONFIG_MEDIA_CEC_NOTIFIER
+#ifdef CONFIG_CEC_NOTIFIER
 	struct cec_notifier *notifier;
 #endif
 
@@ -300,7 +300,7 @@ u16 cec_phys_addr_for_input(u16 phys_addr, u8 input);
  */
 int cec_phys_addr_validate(u16 phys_addr, u16 *parent, u16 *port);
 
-#ifdef CONFIG_MEDIA_CEC_NOTIFIER
+#ifdef CONFIG_CEC_NOTIFIER
 void cec_register_cec_notifier(struct cec_adapter *adap,
 			       struct cec_notifier *notifier);
 #endif

commit ee7e987133c381dceea3acab27f1350936f5ec1f
Author: Hans Verkuil <hans.verkuil@cisco.com>
Date:   Mon Apr 17 07:54:37 2017 -0300

    [media] cec.h: merge cec-edid.h into cec.h
    
    Drop the separate cec-edid.h header and merge it into cec.h.
    
    There was really no need to have a separate header for this.
    
    Signed-off-by: Hans Verkuil <hans.verkuil@cisco.com>
    Signed-off-by: Mauro Carvalho Chehab <mchehab@s-opensource.com>

diff --git a/include/media/cec.h b/include/media/cec.h
index bae8d0153de7..b8eb895731d5 100644
--- a/include/media/cec.h
+++ b/include/media/cec.h
@@ -29,7 +29,6 @@
 #include <linux/timer.h>
 #include <linux/cec-funcs.h>
 #include <media/rc-core.h>
-#include <media/cec-edid.h>
 #include <media/cec-notifier.h>
 
 /**
@@ -204,6 +203,9 @@ static inline bool cec_is_sink(const struct cec_adapter *adap)
 	return adap->phys_addr == 0;
 }
 
+#define cec_phys_addr_exp(pa) \
+	((pa) >> 12), ((pa) >> 8) & 0xf, ((pa) >> 4) & 0xf, (pa) & 0xf
+
 #if IS_ENABLED(CONFIG_CEC_CORE)
 struct cec_adapter *cec_allocate_adapter(const struct cec_adap_ops *ops,
 		void *priv, const char *name, u32 caps, u8 available_las);
@@ -223,6 +225,81 @@ void cec_transmit_done(struct cec_adapter *adap, u8 status, u8 arb_lost_cnt,
 		       u8 nack_cnt, u8 low_drive_cnt, u8 error_cnt);
 void cec_received_msg(struct cec_adapter *adap, struct cec_msg *msg);
 
+/**
+ * cec_get_edid_phys_addr() - find and return the physical address
+ *
+ * @edid:	pointer to the EDID data
+ * @size:	size in bytes of the EDID data
+ * @offset:	If not %NULL then the location of the physical address
+ *		bytes in the EDID will be returned here. This is set to 0
+ *		if there is no physical address found.
+ *
+ * Return: the physical address or CEC_PHYS_ADDR_INVALID if there is none.
+ */
+u16 cec_get_edid_phys_addr(const u8 *edid, unsigned int size,
+			   unsigned int *offset);
+
+/**
+ * cec_set_edid_phys_addr() - find and set the physical address
+ *
+ * @edid:	pointer to the EDID data
+ * @size:	size in bytes of the EDID data
+ * @phys_addr:	the new physical address
+ *
+ * This function finds the location of the physical address in the EDID
+ * and fills in the given physical address and updates the checksum
+ * at the end of the EDID block. It does nothing if the EDID doesn't
+ * contain a physical address.
+ */
+void cec_set_edid_phys_addr(u8 *edid, unsigned int size, u16 phys_addr);
+
+/**
+ * cec_phys_addr_for_input() - calculate the PA for an input
+ *
+ * @phys_addr:	the physical address of the parent
+ * @input:	the number of the input port, must be between 1 and 15
+ *
+ * This function calculates a new physical address based on the input
+ * port number. For example:
+ *
+ * PA = 0.0.0.0 and input = 2 becomes 2.0.0.0
+ *
+ * PA = 3.0.0.0 and input = 1 becomes 3.1.0.0
+ *
+ * PA = 3.2.1.0 and input = 5 becomes 3.2.1.5
+ *
+ * PA = 3.2.1.3 and input = 5 becomes f.f.f.f since it maxed out the depth.
+ *
+ * Return: the new physical address or CEC_PHYS_ADDR_INVALID.
+ */
+u16 cec_phys_addr_for_input(u16 phys_addr, u8 input);
+
+/**
+ * cec_phys_addr_validate() - validate a physical address from an EDID
+ *
+ * @phys_addr:	the physical address to validate
+ * @parent:	if not %NULL, then this is filled with the parents PA.
+ * @port:	if not %NULL, then this is filled with the input port.
+ *
+ * This validates a physical address as read from an EDID. If the
+ * PA is invalid (such as 1.0.1.0 since '0' is only allowed at the end),
+ * then it will return -EINVAL.
+ *
+ * The parent PA is passed into %parent and the input port is passed into
+ * %port. For example:
+ *
+ * PA = 0.0.0.0: has parent 0.0.0.0 and input port 0.
+ *
+ * PA = 1.0.0.0: has parent 0.0.0.0 and input port 1.
+ *
+ * PA = 3.2.0.0: has parent 3.0.0.0 and input port 2.
+ *
+ * PA = f.f.f.f: has parent f.f.f.f and input port 0.
+ *
+ * Return: 0 if the PA is valid, -EINVAL if not.
+ */
+int cec_phys_addr_validate(u16 phys_addr, u16 *parent, u16 *port);
+
 #ifdef CONFIG_MEDIA_CEC_NOTIFIER
 void cec_register_cec_notifier(struct cec_adapter *adap,
 			       struct cec_notifier *notifier);
@@ -249,6 +326,29 @@ static inline void cec_s_phys_addr(struct cec_adapter *adap, u16 phys_addr,
 {
 }
 
+static inline u16 cec_get_edid_phys_addr(const u8 *edid, unsigned int size,
+					 unsigned int *offset)
+{
+	if (offset)
+		*offset = 0;
+	return CEC_PHYS_ADDR_INVALID;
+}
+
+static inline void cec_set_edid_phys_addr(u8 *edid, unsigned int size,
+					  u16 phys_addr)
+{
+}
+
+static inline u16 cec_phys_addr_for_input(u16 phys_addr, u8 input)
+{
+	return CEC_PHYS_ADDR_INVALID;
+}
+
+static inline int cec_phys_addr_validate(u16 phys_addr, u16 *parent, u16 *port)
+{
+	return 0;
+}
+
 #endif
 
 #endif /* _MEDIA_CEC_H */

commit 56a263aaa0a5f58d70517fae2bdd63fc1e17efec
Author: Hans Verkuil <hans.verkuil@cisco.com>
Date:   Mon Apr 17 07:44:35 2017 -0300

    [media] cec: Kconfig cleanup
    
    The Kconfig options for the CEC subsystem were a bit messy. In
    addition there were two cec sources (cec-edid.c and cec-notifier.c)
    that were outside of the media/cec directory, which was weird.
    
    Move those sources to media/cec as well.
    
    The cec-edid and cec-notifier functionality is now part of the cec
    module and these are no longer separate modules.
    
    Also remove the MEDIA_CEC_EDID config option and include it with the
    main CEC config option (which defined CEC_EDID anyway).
    
    Added static inlines to cec-edid.h for dummy functions when CEC_CORE
    isn't defined.
    
    CEC drivers should now depend on CEC_CORE.
    
    CEC drivers that need the cec-notifier functionality must explicitly
    select CEC_NOTIFIER.
    
    The s5p-cec and stih-cec drivers depended on VIDEO_DEV instead of
    CEC_CORE, fix that as well.
    
    Signed-off-by: Hans Verkuil <hans.verkuil@cisco.com>
    Acked-by: Benjamin Gaignard <benjamin.gaignard@linaro.org>
    Signed-off-by: Mauro Carvalho Chehab <mchehab@s-opensource.com>

diff --git a/include/media/cec.h b/include/media/cec.h
index b313e3ecab70..bae8d0153de7 100644
--- a/include/media/cec.h
+++ b/include/media/cec.h
@@ -204,7 +204,7 @@ static inline bool cec_is_sink(const struct cec_adapter *adap)
 	return adap->phys_addr == 0;
 }
 
-#if IS_ENABLED(CONFIG_MEDIA_CEC_SUPPORT)
+#if IS_ENABLED(CONFIG_CEC_CORE)
 struct cec_adapter *cec_allocate_adapter(const struct cec_adap_ops *ops,
 		void *priv, const char *name, u32 caps, u8 available_las);
 int cec_register_adapter(struct cec_adapter *adap, struct device *parent);

commit e3a93adcc4f6c3b538f3d617fc48a87979d4548b
Author: Hans Verkuil <hans.verkuil@cisco.com>
Date:   Tue Dec 13 12:15:57 2016 -0200

    [media] cec: integrate CEC notifier support
    
    Support the CEC notifier framework, simplifying drivers that
    depend on this.
    
    Signed-off-by: Hans Verkuil <hans.verkuil@cisco.com>
    Tested-by: Marek Szyprowski <m.szyprowski@samsung.com>
    Tested-by: Benjamin Gaignard <benjamin.gaignard@linaro.org>
    Acked-by: Daniel Vetter <daniel.vetter@ffwll.ch>
    Signed-off-by: Mauro Carvalho Chehab <mchehab@s-opensource.com>

diff --git a/include/media/cec.h b/include/media/cec.h
index 0daff8c04f2e..b313e3ecab70 100644
--- a/include/media/cec.h
+++ b/include/media/cec.h
@@ -30,6 +30,7 @@
 #include <linux/cec-funcs.h>
 #include <media/rc-core.h>
 #include <media/cec-edid.h>
+#include <media/cec-notifier.h>
 
 /**
  * struct cec_devnode - cec device node
@@ -173,6 +174,10 @@ struct cec_adapter {
 	bool passthrough;
 	struct cec_log_addrs log_addrs;
 
+#ifdef CONFIG_MEDIA_CEC_NOTIFIER
+	struct cec_notifier *notifier;
+#endif
+
 	struct dentry *cec_dir;
 	struct dentry *status_file;
 
@@ -218,6 +223,11 @@ void cec_transmit_done(struct cec_adapter *adap, u8 status, u8 arb_lost_cnt,
 		       u8 nack_cnt, u8 low_drive_cnt, u8 error_cnt);
 void cec_received_msg(struct cec_adapter *adap, struct cec_msg *msg);
 
+#ifdef CONFIG_MEDIA_CEC_NOTIFIER
+void cec_register_cec_notifier(struct cec_adapter *adap,
+			       struct cec_notifier *notifier);
+#endif
+
 #else
 
 static inline int cec_register_adapter(struct cec_adapter *adap,

commit 0b0b97dcc79fe2b34d320805c4389d87980a0e51
Author: Jose Abreu <Jose.Abreu@synopsys.com>
Date:   Fri Mar 24 13:47:52 2017 -0300

    [media] cec: Add cec_get_drvdata()
    
    Add a helper function to get driver private data from CEC
    adapter. This helps the readability a little bit and allows
    to change the 'priv' field name to something else without
    needing to touch all drivers.
    
    Signed-off-by: Jose Abreu <joabreu@synopsys.com>
    Signed-off-by: Hans Verkuil <hans.verkuil@cisco.com>
    Signed-off-by: Mauro Carvalho Chehab <mchehab@s-opensource.com>

diff --git a/include/media/cec.h b/include/media/cec.h
index 96a0aa770d61..0daff8c04f2e 100644
--- a/include/media/cec.h
+++ b/include/media/cec.h
@@ -184,6 +184,11 @@ struct cec_adapter {
 	char input_drv[32];
 };
 
+static inline void *cec_get_drvdata(const struct cec_adapter *adap)
+{
+	return adap->priv;
+}
+
 static inline bool cec_has_log_addr(const struct cec_adapter *adap, u8 log_addr)
 {
 	return adap->log_addrs.log_addr_mask & (1 << log_addr);

commit f51e80804f084de269954d875c0892b081b7df3c
Author: Hans Verkuil <hans.verkuil@cisco.com>
Date:   Fri Nov 25 06:23:34 2016 -0200

    [media] cec: pass parent device in register(), not allocate()
    
    The cec_allocate_adapter function doesn't need the parent device, only the
    cec_register_adapter function needs it.
    
    Drop the cec_devnode parent field, since devnode.dev.parent can be used
    instead.
    
    This change makes the framework consistent with other frameworks where the
    parent device is not used until the device is registered.
    
    Signed-off-by: Hans Verkuil <hans.verkuil@cisco.com>
    Signed-off-by: Mauro Carvalho Chehab <mchehab@s-opensource.com>

diff --git a/include/media/cec.h b/include/media/cec.h
index 717eaf552f3d..96a0aa770d61 100644
--- a/include/media/cec.h
+++ b/include/media/cec.h
@@ -35,7 +35,6 @@
  * struct cec_devnode - cec device node
  * @dev:	cec device
  * @cdev:	cec character device
- * @parent:	parent device
  * @minor:	device node minor number
  * @registered:	the device was correctly registered
  * @unregistered: the device was unregistered
@@ -51,7 +50,6 @@ struct cec_devnode {
 	/* sysfs */
 	struct device dev;
 	struct cdev cdev;
-	struct device *parent;
 
 	/* device info */
 	int minor;
@@ -198,9 +196,8 @@ static inline bool cec_is_sink(const struct cec_adapter *adap)
 
 #if IS_ENABLED(CONFIG_MEDIA_CEC_SUPPORT)
 struct cec_adapter *cec_allocate_adapter(const struct cec_adap_ops *ops,
-		void *priv, const char *name, u32 caps, u8 available_las,
-		struct device *parent);
-int cec_register_adapter(struct cec_adapter *adap);
+		void *priv, const char *name, u32 caps, u8 available_las);
+int cec_register_adapter(struct cec_adapter *adap, struct device *parent);
 void cec_unregister_adapter(struct cec_adapter *adap);
 void cec_delete_adapter(struct cec_adapter *adap);
 
@@ -218,7 +215,8 @@ void cec_received_msg(struct cec_adapter *adap, struct cec_msg *msg);
 
 #else
 
-static inline int cec_register_adapter(struct cec_adapter *adap)
+static inline int cec_register_adapter(struct cec_adapter *adap,
+				       struct device *parent)
 {
 	return 0;
 }

commit 0dbacebede1e4e44bf500f94d692fad05eb2c293
Author: Hans Verkuil <hans.verkuil@cisco.com>
Date:   Wed Nov 2 08:25:28 2016 -0200

    [media] cec: move the CEC framework out of staging and to media
    
    The last open issues have been addressed, so it is time to move
    this out of staging and into the mainline and to move the public
    cec headers to include/uapi/linux.
    
    Signed-off-by: Hans Verkuil <hans.verkuil@cisco.com>
    Signed-off-by: Mauro Carvalho Chehab <mchehab@s-opensource.com>

diff --git a/include/media/cec.h b/include/media/cec.h
index fdb5d600e4bb..717eaf552f3d 100644
--- a/include/media/cec.h
+++ b/include/media/cec.h
@@ -196,7 +196,7 @@ static inline bool cec_is_sink(const struct cec_adapter *adap)
 	return adap->phys_addr == 0;
 }
 
-#if IS_ENABLED(CONFIG_MEDIA_CEC)
+#if IS_ENABLED(CONFIG_MEDIA_CEC_SUPPORT)
 struct cec_adapter *cec_allocate_adapter(const struct cec_adap_ops *ops,
 		void *priv, const char *name, u32 caps, u8 available_las,
 		struct device *parent);

commit 62148f0930a8e9bd5c5614f8387222f0220d7d47
Author: Hans Verkuil <hans.verkuil@cisco.com>
Date:   Tue Aug 2 08:11:00 2016 -0300

    [media] cec: rename cec_devnode fhs_lock to just lock
    
    This lock will be used to protect more than just the fhs list.
    So rename it to just 'lock'.
    
    Signed-off-by: Hans Verkuil <hans.verkuil@cisco.com>
    Signed-off-by: Mauro Carvalho Chehab <mchehab@s-opensource.com>

diff --git a/include/media/cec.h b/include/media/cec.h
index dc7854b855f3..fdb5d600e4bb 100644
--- a/include/media/cec.h
+++ b/include/media/cec.h
@@ -57,8 +57,8 @@ struct cec_devnode {
 	int minor;
 	bool registered;
 	bool unregistered;
-	struct mutex fhs_lock;
 	struct list_head fhs;
+	struct mutex lock;
 };
 
 struct cec_adapter;

commit 11065f8531ed33d5e847a36ad64231ee599d4996
Author: Hans Verkuil <hans.verkuil@cisco.com>
Date:   Sun Jul 17 11:40:05 2016 -0300

    [media] cec: limit the size of the transmit queue
    
    The size of the transmit queue was unlimited, which meant that
    in non-blocking mode you could flood the CEC adapter with messages
    to be transmitted.
    
    Limit this to 18 messages.
    
    Also print the number of pending transmits and the timeout value
    in the status debugfs file.
    
    Signed-off-by: Hans Verkuil <hans.verkuil@cisco.com>
    Signed-off-by: Mauro Carvalho Chehab <mchehab@s-opensource.com>

diff --git a/include/media/cec.h b/include/media/cec.h
index 9a791c08a789..dc7854b855f3 100644
--- a/include/media/cec.h
+++ b/include/media/cec.h
@@ -126,12 +126,20 @@ struct cec_adap_ops {
  * With a transfer rate of at most 36 bytes per second this makes 18 messages
  * per second worst case.
  *
- * We queue at most 3 seconds worth of messages. The CEC specification requires
- * that messages are replied to within a second, so 3 seconds should give more
- * than enough margin. Since most messages are actually more than 2 bytes, this
- * is in practice a lot more than 3 seconds.
+ * We queue at most 3 seconds worth of received messages. The CEC specification
+ * requires that messages are replied to within a second, so 3 seconds should
+ * give more than enough margin. Since most messages are actually more than 2
+ * bytes, this is in practice a lot more than 3 seconds.
  */
-#define CEC_MAX_MSG_QUEUE_SZ		(18 * 3)
+#define CEC_MAX_MSG_RX_QUEUE_SZ		(18 * 3)
+
+/*
+ * The transmit queue is limited to 1 second worth of messages (worst case).
+ * Messages can be transmitted by userspace and kernel space. But for both it
+ * makes no sense to have a lot of messages queued up. One second seems
+ * reasonable.
+ */
+#define CEC_MAX_MSG_TX_QUEUE_SZ		(18 * 1)
 
 struct cec_adapter {
 	struct module *owner;
@@ -141,6 +149,7 @@ struct cec_adapter {
 	struct rc_dev *rc;
 
 	struct list_head transmit_queue;
+	unsigned int transmit_queue_sz;
 	struct list_head wait_queue;
 	struct cec_data *transmitting;
 

commit a56960e8b406d36b612776c79134b954adc2ca18
Author: Hans Verkuil <hans.verkuil@cisco.com>
Date:   Sat Jun 25 09:43:58 2016 -0300

    [media] cec: add HDMI CEC framework (core)
    
    The added HDMI CEC framework provides a generic kernel interface for
    HDMI CEC devices.
    
    Note that the CEC framework is added to staging/media and that the
    cec.h and cec-funcs.h headers are not exported yet. While the kABI
    is mature, I would prefer to allow the uABI some more time before
    it is mainlined in case it needs more tweaks.
    
    This adds the cec-core.c, media/cec.h and cec-priv.h sources.
    
    Signed-off-by: Hans Verkuil <hans.verkuil@cisco.com>
    [k.debski@samsung.com: Merged CEC Updates commit by Hans Verkuil]
    [k.debski@samsung.com: Merged Update author commit by Hans Verkuil]
    [k.debski@samsung.com: code cleanup and fixes]
    [k.debski@samsung.com: add missing CEC commands to match spec]
    [k.debski@samsung.com: add RC framework support]
    [k.debski@samsung.com: move and edit documentation]
    [k.debski@samsung.com: add vendor id reporting]
    [k.debski@samsung.com: reorder of API structs and add reserved fields]
    [k.debski@samsung.com: fix handling of events and fix 32/64bit timespec problem]
    [k.debski@samsung.com: add sequence number handling]
    [k.debski@samsung.com: add passthrough mode]
    [k.debski@samsung.com: fix CEC defines, add missing CEC 2.0 commands]
    Signed-off-by: Kamil Debski <kamil@wypas.org>
    
    Signed-off-by: Mauro Carvalho Chehab <mchehab@s-opensource.com>

diff --git a/include/media/cec.h b/include/media/cec.h
new file mode 100644
index 000000000000..9a791c08a789
--- /dev/null
+++ b/include/media/cec.h
@@ -0,0 +1,232 @@
+/*
+ * cec - HDMI Consumer Electronics Control support header
+ *
+ * Copyright 2016 Cisco Systems, Inc. and/or its affiliates. All rights reserved.
+ *
+ * This program is free software; you may redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; version 2 of the License.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
+ * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
+ * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
+ * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
+ * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
+ * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
+ * SOFTWARE.
+ */
+
+#ifndef _MEDIA_CEC_H
+#define _MEDIA_CEC_H
+
+#include <linux/poll.h>
+#include <linux/fs.h>
+#include <linux/debugfs.h>
+#include <linux/device.h>
+#include <linux/cdev.h>
+#include <linux/kthread.h>
+#include <linux/timer.h>
+#include <linux/cec-funcs.h>
+#include <media/rc-core.h>
+#include <media/cec-edid.h>
+
+/**
+ * struct cec_devnode - cec device node
+ * @dev:	cec device
+ * @cdev:	cec character device
+ * @parent:	parent device
+ * @minor:	device node minor number
+ * @registered:	the device was correctly registered
+ * @unregistered: the device was unregistered
+ * @fhs_lock:	lock to control access to the filehandle list
+ * @fhs:	the list of open filehandles (cec_fh)
+ *
+ * This structure represents a cec-related device node.
+ *
+ * The @parent is a physical device. It must be set by core or device drivers
+ * before registering the node.
+ */
+struct cec_devnode {
+	/* sysfs */
+	struct device dev;
+	struct cdev cdev;
+	struct device *parent;
+
+	/* device info */
+	int minor;
+	bool registered;
+	bool unregistered;
+	struct mutex fhs_lock;
+	struct list_head fhs;
+};
+
+struct cec_adapter;
+struct cec_data;
+
+struct cec_data {
+	struct list_head list;
+	struct list_head xfer_list;
+	struct cec_adapter *adap;
+	struct cec_msg msg;
+	struct cec_fh *fh;
+	struct delayed_work work;
+	struct completion c;
+	u8 attempts;
+	bool new_initiator;
+	bool blocking;
+	bool completed;
+};
+
+struct cec_msg_entry {
+	struct list_head	list;
+	struct cec_msg		msg;
+};
+
+#define CEC_NUM_EVENTS		CEC_EVENT_LOST_MSGS
+
+struct cec_fh {
+	struct list_head	list;
+	struct list_head	xfer_list;
+	struct cec_adapter	*adap;
+	u8			mode_initiator;
+	u8			mode_follower;
+
+	/* Events */
+	wait_queue_head_t	wait;
+	unsigned int		pending_events;
+	struct cec_event	events[CEC_NUM_EVENTS];
+	struct mutex		lock;
+	struct list_head	msgs; /* queued messages */
+	unsigned int		queued_msgs;
+};
+
+#define CEC_SIGNAL_FREE_TIME_RETRY		3
+#define CEC_SIGNAL_FREE_TIME_NEW_INITIATOR	5
+#define CEC_SIGNAL_FREE_TIME_NEXT_XFER		7
+
+/* The nominal data bit period is 2.4 ms */
+#define CEC_FREE_TIME_TO_USEC(ft)		((ft) * 2400)
+
+struct cec_adap_ops {
+	/* Low-level callbacks */
+	int (*adap_enable)(struct cec_adapter *adap, bool enable);
+	int (*adap_monitor_all_enable)(struct cec_adapter *adap, bool enable);
+	int (*adap_log_addr)(struct cec_adapter *adap, u8 logical_addr);
+	int (*adap_transmit)(struct cec_adapter *adap, u8 attempts,
+			     u32 signal_free_time, struct cec_msg *msg);
+	void (*adap_status)(struct cec_adapter *adap, struct seq_file *file);
+
+	/* High-level CEC message callback */
+	int (*received)(struct cec_adapter *adap, struct cec_msg *msg);
+};
+
+/*
+ * The minimum message length you can receive (excepting poll messages) is 2.
+ * With a transfer rate of at most 36 bytes per second this makes 18 messages
+ * per second worst case.
+ *
+ * We queue at most 3 seconds worth of messages. The CEC specification requires
+ * that messages are replied to within a second, so 3 seconds should give more
+ * than enough margin. Since most messages are actually more than 2 bytes, this
+ * is in practice a lot more than 3 seconds.
+ */
+#define CEC_MAX_MSG_QUEUE_SZ		(18 * 3)
+
+struct cec_adapter {
+	struct module *owner;
+	char name[32];
+	struct cec_devnode devnode;
+	struct mutex lock;
+	struct rc_dev *rc;
+
+	struct list_head transmit_queue;
+	struct list_head wait_queue;
+	struct cec_data *transmitting;
+
+	struct task_struct *kthread_config;
+	struct completion config_completion;
+
+	struct task_struct *kthread;
+	wait_queue_head_t kthread_waitq;
+	wait_queue_head_t waitq;
+
+	const struct cec_adap_ops *ops;
+	void *priv;
+	u32 capabilities;
+	u8 available_log_addrs;
+
+	u16 phys_addr;
+	bool is_configuring;
+	bool is_configured;
+	u32 monitor_all_cnt;
+	u32 follower_cnt;
+	struct cec_fh *cec_follower;
+	struct cec_fh *cec_initiator;
+	bool passthrough;
+	struct cec_log_addrs log_addrs;
+
+	struct dentry *cec_dir;
+	struct dentry *status_file;
+
+	u16 phys_addrs[15];
+	u32 sequence;
+
+	char input_name[32];
+	char input_phys[32];
+	char input_drv[32];
+};
+
+static inline bool cec_has_log_addr(const struct cec_adapter *adap, u8 log_addr)
+{
+	return adap->log_addrs.log_addr_mask & (1 << log_addr);
+}
+
+static inline bool cec_is_sink(const struct cec_adapter *adap)
+{
+	return adap->phys_addr == 0;
+}
+
+#if IS_ENABLED(CONFIG_MEDIA_CEC)
+struct cec_adapter *cec_allocate_adapter(const struct cec_adap_ops *ops,
+		void *priv, const char *name, u32 caps, u8 available_las,
+		struct device *parent);
+int cec_register_adapter(struct cec_adapter *adap);
+void cec_unregister_adapter(struct cec_adapter *adap);
+void cec_delete_adapter(struct cec_adapter *adap);
+
+int cec_s_log_addrs(struct cec_adapter *adap, struct cec_log_addrs *log_addrs,
+		    bool block);
+void cec_s_phys_addr(struct cec_adapter *adap, u16 phys_addr,
+		     bool block);
+int cec_transmit_msg(struct cec_adapter *adap, struct cec_msg *msg,
+		     bool block);
+
+/* Called by the adapter */
+void cec_transmit_done(struct cec_adapter *adap, u8 status, u8 arb_lost_cnt,
+		       u8 nack_cnt, u8 low_drive_cnt, u8 error_cnt);
+void cec_received_msg(struct cec_adapter *adap, struct cec_msg *msg);
+
+#else
+
+static inline int cec_register_adapter(struct cec_adapter *adap)
+{
+	return 0;
+}
+
+static inline void cec_unregister_adapter(struct cec_adapter *adap)
+{
+}
+
+static inline void cec_delete_adapter(struct cec_adapter *adap)
+{
+}
+
+static inline void cec_s_phys_addr(struct cec_adapter *adap, u16 phys_addr,
+				   bool block)
+{
+}
+
+#endif
+
+#endif /* _MEDIA_CEC_H */
