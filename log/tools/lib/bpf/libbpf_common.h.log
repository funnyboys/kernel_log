commit fb9a98e160f10555936e1c7041d4efda4954d1df
Author: Toke Høiland-Jørgensen <toke@redhat.com>
Date:   Tue Dec 17 12:28:10 2019 +0100

    libbpf: Fix libbpf_common.h when installing libbpf through 'make install'
    
    This fixes two issues with the newly introduced libbpf_common.h file:
    
    - The header failed to include <string.h> for the definition of memset()
    - The new file was not included in the install_headers rule in the Makefile
    
    Both of these issues cause breakage when installing libbpf with 'make
    install' and trying to use it in applications.
    
    Fixes: 544402d4b493 ("libbpf: Extract common user-facing helpers")
    Signed-off-by: Toke Høiland-Jørgensen <toke@redhat.com>
    Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
    Acked-by: Yonghong Song <yhs@fb.com>
    Link: https://lore.kernel.org/bpf/20191217112810.768078-1-toke@redhat.com

diff --git a/tools/lib/bpf/libbpf_common.h b/tools/lib/bpf/libbpf_common.h
index 4fb833840961..a23ae1ac27eb 100644
--- a/tools/lib/bpf/libbpf_common.h
+++ b/tools/lib/bpf/libbpf_common.h
@@ -9,6 +9,8 @@
 #ifndef __LIBBPF_LIBBPF_COMMON_H
 #define __LIBBPF_LIBBPF_COMMON_H
 
+#include <string.h>
+
 #ifndef LIBBPF_API
 #define LIBBPF_API __attribute__((visibility("default")))
 #endif

commit 544402d4b49332a4a9b2b8fff20f9d9f5ef86559
Author: Andrii Nakryiko <andriin@fb.com>
Date:   Fri Dec 13 17:43:29 2019 -0800

    libbpf: Extract common user-facing helpers
    
    LIBBPF_API and DECLARE_LIBBPF_OPTS are needed in many public libbpf API
    headers. Extract them into libbpf_common.h to avoid unnecessary
    interdependency between btf.h, libbpf.h, and bpf.h or code duplication.
    
    Signed-off-by: Andrii Nakryiko <andriin@fb.com>
    Signed-off-by: Alexei Starovoitov <ast@kernel.org>
    Link: https://lore.kernel.org/bpf/20191214014341.3442258-6-andriin@fb.com

diff --git a/tools/lib/bpf/libbpf_common.h b/tools/lib/bpf/libbpf_common.h
new file mode 100644
index 000000000000..4fb833840961
--- /dev/null
+++ b/tools/lib/bpf/libbpf_common.h
@@ -0,0 +1,38 @@
+/* SPDX-License-Identifier: (LGPL-2.1 OR BSD-2-Clause) */
+
+/*
+ * Common user-facing libbpf helpers.
+ *
+ * Copyright (c) 2019 Facebook
+ */
+
+#ifndef __LIBBPF_LIBBPF_COMMON_H
+#define __LIBBPF_LIBBPF_COMMON_H
+
+#ifndef LIBBPF_API
+#define LIBBPF_API __attribute__((visibility("default")))
+#endif
+
+/* Helper macro to declare and initialize libbpf options struct
+ *
+ * This dance with uninitialized declaration, followed by memset to zero,
+ * followed by assignment using compound literal syntax is done to preserve
+ * ability to use a nice struct field initialization syntax and **hopefully**
+ * have all the padding bytes initialized to zero. It's not guaranteed though,
+ * when copying literal, that compiler won't copy garbage in literal's padding
+ * bytes, but that's the best way I've found and it seems to work in practice.
+ *
+ * Macro declares opts struct of given type and name, zero-initializes,
+ * including any extra padding, it with memset() and then assigns initial
+ * values provided by users in struct initializer-syntax as varargs.
+ */
+#define DECLARE_LIBBPF_OPTS(TYPE, NAME, ...)				    \
+	struct TYPE NAME = ({ 						    \
+		memset(&NAME, 0, sizeof(struct TYPE));			    \
+		(struct TYPE) {						    \
+			.sz = sizeof(struct TYPE),			    \
+			__VA_ARGS__					    \
+		};							    \
+	})
+
+#endif /* __LIBBPF_LIBBPF_COMMON_H */
