commit fb2426ad00b136c88d57457504d1e843159a367a
Author: Martin KaFai Lau <kafai@fb.com>
Date:   Wed Jan 15 15:00:31 2020 -0800

    libbpf: Expose bpf_find_kernel_btf as a LIBBPF_API
    
    This patch exposes bpf_find_kernel_btf() as a LIBBPF_API.
    It will be used in 'bpftool map dump' in a following patch
    to dump a map with btf_vmlinux_value_type_id set.
    
    bpf_find_kernel_btf() is renamed to libbpf_find_kernel_btf()
    and moved to btf.c.  As <linux/kernel.h> is included,
    some of the max/min type casting needs to be fixed.
    
    Signed-off-by: Martin KaFai Lau <kafai@fb.com>
    Signed-off-by: Alexei Starovoitov <ast@kernel.org>
    Acked-by: Andrii Nakryiko <andriin@fb.com>
    Link: https://lore.kernel.org/bpf/20200115230031.1102305-1-kafai@fb.com

diff --git a/tools/lib/bpf/btf.h b/tools/lib/bpf/btf.h
index 8d73f7f5551f..70c1b7ec2bd0 100644
--- a/tools/lib/bpf/btf.h
+++ b/tools/lib/bpf/btf.h
@@ -102,6 +102,8 @@ LIBBPF_API int btf_ext__reloc_line_info(const struct btf *btf,
 LIBBPF_API __u32 btf_ext__func_info_rec_size(const struct btf_ext *btf_ext);
 LIBBPF_API __u32 btf_ext__line_info_rec_size(const struct btf_ext *btf_ext);
 
+LIBBPF_API struct btf *libbpf_find_kernel_btf(void);
+
 struct btf_dedup_opts {
 	unsigned int dedup_table_size;
 	bool dont_resolve_fwds;

commit 9f81654eebe8de7e0db15534816d8f6c84b2e1e5
Author: Andrii Nakryiko <andriin@fb.com>
Date:   Fri Dec 13 17:43:31 2019 -0800

    libbpf: Expose BTF-to-C type declaration emitting API
    
    Expose API that allows to emit type declaration and field/variable definition
    (if optional field name is specified) in valid C syntax for any provided BTF
    type. This is going to be used by bpftool when emitting data section layout as
    a struct. As part of making this API useful in a stand-alone fashion, move
    initialization of some of the internal btf_dump state to earlier phase.
    
    Signed-off-by: Andrii Nakryiko <andriin@fb.com>
    Signed-off-by: Alexei Starovoitov <ast@kernel.org>
    Acked-by: Martin KaFai Lau <kafai@fb.com>
    Link: https://lore.kernel.org/bpf/20191214014341.3442258-8-andriin@fb.com

diff --git a/tools/lib/bpf/btf.h b/tools/lib/bpf/btf.h
index a114c8ef4f08..8d73f7f5551f 100644
--- a/tools/lib/bpf/btf.h
+++ b/tools/lib/bpf/btf.h
@@ -126,6 +126,28 @@ LIBBPF_API void btf_dump__free(struct btf_dump *d);
 
 LIBBPF_API int btf_dump__dump_type(struct btf_dump *d, __u32 id);
 
+struct btf_dump_emit_type_decl_opts {
+	/* size of this struct, for forward/backward compatiblity */
+	size_t sz;
+	/* optional field name for type declaration, e.g.:
+	 * - struct my_struct <FNAME>
+	 * - void (*<FNAME>)(int)
+	 * - char (*<FNAME>)[123]
+	 */
+	const char *field_name;
+	/* extra indentation level (in number of tabs) to emit for multi-line
+	 * type declarations (e.g., anonymous struct); applies for lines
+	 * starting from the second one (first line is assumed to have
+	 * necessary indentation already
+	 */
+	int indent_level;
+};
+#define btf_dump_emit_type_decl_opts__last_field indent_level
+
+LIBBPF_API int
+btf_dump__emit_type_decl(struct btf_dump *d, __u32 id,
+			 const struct btf_dump_emit_type_decl_opts *opts);
+
 /*
  * A set of helpers for easier BTF types handling
  */

commit 3d208f4ca111a614903f49d5a77b93ddc6de294e
Author: Andrii Nakryiko <andriin@fb.com>
Date:   Fri Dec 13 17:43:30 2019 -0800

    libbpf: Expose btf__align_of() API
    
    Expose BTF API that calculates type alignment requirements.
    
    Signed-off-by: Andrii Nakryiko <andriin@fb.com>
    Signed-off-by: Alexei Starovoitov <ast@kernel.org>
    Link: https://lore.kernel.org/bpf/20191214014341.3442258-7-andriin@fb.com

diff --git a/tools/lib/bpf/btf.h b/tools/lib/bpf/btf.h
index 5fc23b988deb..a114c8ef4f08 100644
--- a/tools/lib/bpf/btf.h
+++ b/tools/lib/bpf/btf.h
@@ -77,6 +77,7 @@ LIBBPF_API const struct btf_type *btf__type_by_id(const struct btf *btf,
 						  __u32 id);
 LIBBPF_API __s64 btf__resolve_size(const struct btf *btf, __u32 type_id);
 LIBBPF_API int btf__resolve_type(const struct btf *btf, __u32 type_id);
+LIBBPF_API int btf__align_of(const struct btf *btf, __u32 id);
 LIBBPF_API int btf__fd(const struct btf *btf);
 LIBBPF_API const void *btf__get_raw_data(const struct btf *btf, __u32 *size);
 LIBBPF_API const char *btf__name_by_offset(const struct btf *btf, __u32 offset);

commit 544402d4b49332a4a9b2b8fff20f9d9f5ef86559
Author: Andrii Nakryiko <andriin@fb.com>
Date:   Fri Dec 13 17:43:29 2019 -0800

    libbpf: Extract common user-facing helpers
    
    LIBBPF_API and DECLARE_LIBBPF_OPTS are needed in many public libbpf API
    headers. Extract them into libbpf_common.h to avoid unnecessary
    interdependency between btf.h, libbpf.h, and bpf.h or code duplication.
    
    Signed-off-by: Andrii Nakryiko <andriin@fb.com>
    Signed-off-by: Alexei Starovoitov <ast@kernel.org>
    Link: https://lore.kernel.org/bpf/20191214014341.3442258-6-andriin@fb.com

diff --git a/tools/lib/bpf/btf.h b/tools/lib/bpf/btf.h
index d9ac73a02cde..5fc23b988deb 100644
--- a/tools/lib/bpf/btf.h
+++ b/tools/lib/bpf/btf.h
@@ -8,14 +8,12 @@
 #include <linux/btf.h>
 #include <linux/types.h>
 
+#include "libbpf_common.h"
+
 #ifdef __cplusplus
 extern "C" {
 #endif
 
-#ifndef LIBBPF_API
-#define LIBBPF_API __attribute__((visibility("default")))
-#endif
-
 #define BTF_ELF_SEC ".BTF"
 #define BTF_EXT_ELF_SEC ".BTF.ext"
 #define MAPS_ELF_SEC ".maps"

commit 1442e2871b7679271fc9fcbf043ba1be511a7428
Author: Alexei Starovoitov <ast@kernel.org>
Date:   Thu Nov 14 10:57:05 2019 -0800

    libbpf: Introduce btf__find_by_name_kind()
    
    Introduce btf__find_by_name_kind() helper to search BTF by name and kind, since
    name alone can be ambiguous.
    
    Signed-off-by: Alexei Starovoitov <ast@kernel.org>
    Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
    Acked-by: Song Liu <songliubraving@fb.com>
    Acked-by: Andrii Nakryiko <andriin@fb.com>
    Link: https://lore.kernel.org/bpf/20191114185720.1641606-6-ast@kernel.org

diff --git a/tools/lib/bpf/btf.h b/tools/lib/bpf/btf.h
index b18994116a44..d9ac73a02cde 100644
--- a/tools/lib/bpf/btf.h
+++ b/tools/lib/bpf/btf.h
@@ -72,6 +72,8 @@ LIBBPF_API int btf__finalize_data(struct bpf_object *obj, struct btf *btf);
 LIBBPF_API int btf__load(struct btf *btf);
 LIBBPF_API __s32 btf__find_by_name(const struct btf *btf,
 				   const char *type_name);
+LIBBPF_API __s32 btf__find_by_name_kind(const struct btf *btf,
+					const char *type_name, __u32 kind);
 LIBBPF_API __u32 btf__get_nr_types(const struct btf *btf);
 LIBBPF_API const struct btf_type *btf__type_by_id(const struct btf *btf,
 						  __u32 id);

commit 511bb0085c6fe48353c35cd3d25f4f8720579a6d
Author: Andrii Nakryiko <andriin@fb.com>
Date:   Tue Oct 15 11:28:45 2019 -0700

    libbpf: Update BTF reloc support to latest Clang format
    
    BTF offset reloc was generalized in recent Clang into field relocation,
    capturing extra u32 field, specifying what aspect of captured field
    needs to be relocated. This changes .BTF.ext's record size for this
    relocation from 12 bytes to 16 bytes. Given these format changes
    happened in Clang before official released version, it's ok to not
    support outdated 12-byte record size w/o breaking ABI.
    
    Signed-off-by: Andrii Nakryiko <andriin@fb.com>
    Signed-off-by: Alexei Starovoitov <ast@kernel.org>
    Link: https://lore.kernel.org/bpf/20191015182849.3922287-2-andriin@fb.com

diff --git a/tools/lib/bpf/btf.h b/tools/lib/bpf/btf.h
index 9cb44b4fbf60..b18994116a44 100644
--- a/tools/lib/bpf/btf.h
+++ b/tools/lib/bpf/btf.h
@@ -60,8 +60,8 @@ struct btf_ext_header {
 	__u32	line_info_len;
 
 	/* optional part of .BTF.ext header */
-	__u32	offset_reloc_off;
-	__u32	offset_reloc_len;
+	__u32	field_reloc_off;
+	__u32	field_reloc_len;
 };
 
 LIBBPF_API void btf__free(struct btf *btf);

commit 4cedc0dad9b5bf55c4180c833be35e27e5d6cdbb
Author: Andrii Nakryiko <andriin@fb.com>
Date:   Wed Aug 7 14:39:50 2019 -0700

    libbpf: add .BTF.ext offset relocation section loading
    
    Add support for BPF CO-RE offset relocations. Add section/record
    iteration macros for .BTF.ext. These macro are useful for iterating over
    each .BTF.ext record, either for dumping out contents or later for BPF
    CO-RE relocation handling.
    
    To enable other parts of libbpf to work with .BTF.ext contents, moved
    a bunch of type definitions into libbpf_internal.h.
    
    Signed-off-by: Andrii Nakryiko <andriin@fb.com>
    Acked-by: Song Liu <songliubraving@fb.com>
    Signed-off-by: Alexei Starovoitov <ast@kernel.org>

diff --git a/tools/lib/bpf/btf.h b/tools/lib/bpf/btf.h
index 2604dc099855..9cb44b4fbf60 100644
--- a/tools/lib/bpf/btf.h
+++ b/tools/lib/bpf/btf.h
@@ -58,6 +58,10 @@ struct btf_ext_header {
 	__u32	func_info_len;
 	__u32	line_info_off;
 	__u32	line_info_len;
+
+	/* optional part of .BTF.ext header */
+	__u32	offset_reloc_off;
+	__u32	offset_reloc_len;
 };
 
 LIBBPF_API void btf__free(struct btf *btf);

commit ef20a9b27c66278ac2f85006db8ea11d5f61a781
Author: Andrii Nakryiko <andriin@fb.com>
Date:   Wed Aug 7 14:39:48 2019 -0700

    libbpf: add helpers for working with BTF types
    
    Add lots of frequently used helpers that simplify working with BTF
    types.
    
    Signed-off-by: Andrii Nakryiko <andriin@fb.com>
    Signed-off-by: Alexei Starovoitov <ast@kernel.org>

diff --git a/tools/lib/bpf/btf.h b/tools/lib/bpf/btf.h
index 88a52ae56fc6..2604dc099855 100644
--- a/tools/lib/bpf/btf.h
+++ b/tools/lib/bpf/btf.h
@@ -5,6 +5,7 @@
 #define __LIBBPF_BTF_H
 
 #include <stdarg.h>
+#include <linux/btf.h>
 #include <linux/types.h>
 
 #ifdef __cplusplus
@@ -120,6 +121,183 @@ LIBBPF_API void btf_dump__free(struct btf_dump *d);
 
 LIBBPF_API int btf_dump__dump_type(struct btf_dump *d, __u32 id);
 
+/*
+ * A set of helpers for easier BTF types handling
+ */
+static inline __u16 btf_kind(const struct btf_type *t)
+{
+	return BTF_INFO_KIND(t->info);
+}
+
+static inline __u16 btf_vlen(const struct btf_type *t)
+{
+	return BTF_INFO_VLEN(t->info);
+}
+
+static inline bool btf_kflag(const struct btf_type *t)
+{
+	return BTF_INFO_KFLAG(t->info);
+}
+
+static inline bool btf_is_int(const struct btf_type *t)
+{
+	return btf_kind(t) == BTF_KIND_INT;
+}
+
+static inline bool btf_is_ptr(const struct btf_type *t)
+{
+	return btf_kind(t) == BTF_KIND_PTR;
+}
+
+static inline bool btf_is_array(const struct btf_type *t)
+{
+	return btf_kind(t) == BTF_KIND_ARRAY;
+}
+
+static inline bool btf_is_struct(const struct btf_type *t)
+{
+	return btf_kind(t) == BTF_KIND_STRUCT;
+}
+
+static inline bool btf_is_union(const struct btf_type *t)
+{
+	return btf_kind(t) == BTF_KIND_UNION;
+}
+
+static inline bool btf_is_composite(const struct btf_type *t)
+{
+	__u16 kind = btf_kind(t);
+
+	return kind == BTF_KIND_STRUCT || kind == BTF_KIND_UNION;
+}
+
+static inline bool btf_is_enum(const struct btf_type *t)
+{
+	return btf_kind(t) == BTF_KIND_ENUM;
+}
+
+static inline bool btf_is_fwd(const struct btf_type *t)
+{
+	return btf_kind(t) == BTF_KIND_FWD;
+}
+
+static inline bool btf_is_typedef(const struct btf_type *t)
+{
+	return btf_kind(t) == BTF_KIND_TYPEDEF;
+}
+
+static inline bool btf_is_volatile(const struct btf_type *t)
+{
+	return btf_kind(t) == BTF_KIND_VOLATILE;
+}
+
+static inline bool btf_is_const(const struct btf_type *t)
+{
+	return btf_kind(t) == BTF_KIND_CONST;
+}
+
+static inline bool btf_is_restrict(const struct btf_type *t)
+{
+	return btf_kind(t) == BTF_KIND_RESTRICT;
+}
+
+static inline bool btf_is_mod(const struct btf_type *t)
+{
+	__u16 kind = btf_kind(t);
+
+	return kind == BTF_KIND_VOLATILE ||
+	       kind == BTF_KIND_CONST ||
+	       kind == BTF_KIND_RESTRICT;
+}
+
+static inline bool btf_is_func(const struct btf_type *t)
+{
+	return btf_kind(t) == BTF_KIND_FUNC;
+}
+
+static inline bool btf_is_func_proto(const struct btf_type *t)
+{
+	return btf_kind(t) == BTF_KIND_FUNC_PROTO;
+}
+
+static inline bool btf_is_var(const struct btf_type *t)
+{
+	return btf_kind(t) == BTF_KIND_VAR;
+}
+
+static inline bool btf_is_datasec(const struct btf_type *t)
+{
+	return btf_kind(t) == BTF_KIND_DATASEC;
+}
+
+static inline __u8 btf_int_encoding(const struct btf_type *t)
+{
+	return BTF_INT_ENCODING(*(__u32 *)(t + 1));
+}
+
+static inline __u8 btf_int_offset(const struct btf_type *t)
+{
+	return BTF_INT_OFFSET(*(__u32 *)(t + 1));
+}
+
+static inline __u8 btf_int_bits(const struct btf_type *t)
+{
+	return BTF_INT_BITS(*(__u32 *)(t + 1));
+}
+
+static inline struct btf_array *btf_array(const struct btf_type *t)
+{
+	return (struct btf_array *)(t + 1);
+}
+
+static inline struct btf_enum *btf_enum(const struct btf_type *t)
+{
+	return (struct btf_enum *)(t + 1);
+}
+
+static inline struct btf_member *btf_members(const struct btf_type *t)
+{
+	return (struct btf_member *)(t + 1);
+}
+
+/* Get bit offset of a member with specified index. */
+static inline __u32 btf_member_bit_offset(const struct btf_type *t,
+					  __u32 member_idx)
+{
+	const struct btf_member *m = btf_members(t) + member_idx;
+	bool kflag = btf_kflag(t);
+
+	return kflag ? BTF_MEMBER_BIT_OFFSET(m->offset) : m->offset;
+}
+/*
+ * Get bitfield size of a member, assuming t is BTF_KIND_STRUCT or
+ * BTF_KIND_UNION. If member is not a bitfield, zero is returned.
+ */
+static inline __u32 btf_member_bitfield_size(const struct btf_type *t,
+					     __u32 member_idx)
+{
+	const struct btf_member *m = btf_members(t) + member_idx;
+	bool kflag = btf_kflag(t);
+
+	return kflag ? BTF_MEMBER_BITFIELD_SIZE(m->offset) : 0;
+}
+
+static inline struct btf_param *btf_params(const struct btf_type *t)
+{
+	return (struct btf_param *)(t + 1);
+}
+
+static inline struct btf_var *btf_var(const struct btf_type *t)
+{
+	return (struct btf_var *)(t + 1);
+}
+
+static inline struct btf_var_secinfo *
+btf_var_secinfos(const struct btf_type *t)
+{
+	return (struct btf_var_secinfo *)(t + 1);
+}
+
 #ifdef __cplusplus
 } /* extern "C" */
 #endif

commit abd29c9314595b1ee5ec6c61d7c49a497ffb30a3
Author: Andrii Nakryiko <andriin@fb.com>
Date:   Mon Jun 17 12:26:56 2019 -0700

    libbpf: allow specifying map definitions using BTF
    
    This patch adds support for a new way to define BPF maps. It relies on
    BTF to describe mandatory and optional attributes of a map, as well as
    captures type information of key and value naturally. This eliminates
    the need for BPF_ANNOTATE_KV_PAIR hack and ensures key/value sizes are
    always in sync with the key/value type.
    
    Relying on BTF, this approach allows for both forward and backward
    compatibility w.r.t. extending supported map definition features. By
    default, any unrecognized attributes are treated as an error, but it's
    possible relax this using MAPS_RELAX_COMPAT flag. New attributes, added
    in the future will need to be optional.
    
    The outline of the new map definition (short, BTF-defined maps) is as follows:
    1. All the maps should be defined in .maps ELF section. It's possible to
       have both "legacy" map definitions in `maps` sections and BTF-defined
       maps in .maps sections. Everything will still work transparently.
    2. The map declaration and initialization is done through
       a global/static variable of a struct type with few mandatory and
       extra optional fields:
       - type field is mandatory and specified type of BPF map;
       - key/value fields are mandatory and capture key/value type/size information;
       - max_entries attribute is optional; if max_entries is not specified or
         initialized, it has to be provided in runtime through libbpf API
         before loading bpf_object;
       - map_flags is optional and if not defined, will be assumed to be 0.
    3. Key/value fields should be **a pointer** to a type describing
       key/value. The pointee type is assumed (and will be recorded as such
       and used for size determination) to be a type describing key/value of
       the map. This is done to save excessive amounts of space allocated in
       corresponding ELF sections for key/value of big size.
    4. As some maps disallow having BTF type ID associated with key/value,
       it's possible to specify key/value size explicitly without
       associating BTF type ID with it. Use key_size and value_size fields
       to do that (see example below).
    
    Here's an example of simple ARRAY map defintion:
    
    struct my_value { int x, y, z; };
    
    struct {
            int type;
            int max_entries;
            int *key;
            struct my_value *value;
    } btf_map SEC(".maps") = {
            .type = BPF_MAP_TYPE_ARRAY,
            .max_entries = 16,
    };
    
    This will define BPF ARRAY map 'btf_map' with 16 elements. The key will
    be of type int and thus key size will be 4 bytes. The value is struct
    my_value of size 12 bytes. This map can be used from C code exactly the
    same as with existing maps defined through struct bpf_map_def.
    
    Here's an example of STACKMAP definition (which currently disallows BTF type
    IDs for key/value):
    
    struct {
            __u32 type;
            __u32 max_entries;
            __u32 map_flags;
            __u32 key_size;
            __u32 value_size;
    } stackmap SEC(".maps") = {
            .type = BPF_MAP_TYPE_STACK_TRACE,
            .max_entries = 128,
            .map_flags = BPF_F_STACK_BUILD_ID,
            .key_size = sizeof(__u32),
            .value_size = PERF_MAX_STACK_DEPTH * sizeof(struct bpf_stack_build_id),
    };
    
    This approach is naturally extended to support map-in-map, by making a value
    field to be another struct that describes inner map. This feature is not
    implemented yet. It's also possible to incrementally add features like pinning
    with full backwards and forward compatibility. Support for static
    initialization of BPF_MAP_TYPE_PROG_ARRAY using pointers to BPF programs
    is also on the roadmap.
    
    Signed-off-by: Andrii Nakryiko <andriin@fb.com>
    Acked-by: Song Liu <songliubraving@fb.com>
    Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>

diff --git a/tools/lib/bpf/btf.h b/tools/lib/bpf/btf.h
index ba4ffa831aa4..88a52ae56fc6 100644
--- a/tools/lib/bpf/btf.h
+++ b/tools/lib/bpf/btf.h
@@ -17,6 +17,7 @@ extern "C" {
 
 #define BTF_ELF_SEC ".BTF"
 #define BTF_EXT_ELF_SEC ".BTF.ext"
+#define MAPS_ELF_SEC ".maps"
 
 struct btf;
 struct btf_ext;

commit 351131b51c7a27daf0fbdce80b619b8d130374c6
Author: Andrii Nakryiko <andriin@fb.com>
Date:   Fri May 24 11:59:03 2019 -0700

    libbpf: add btf_dump API for BTF-to-C conversion
    
    BTF contains enough type information to allow generating valid
    compilable C header w/ correct layout of structs/unions and all the
    typedef/enum definitions. This patch adds a new "object" - btf_dump to
    facilitate dumping BTF as valid C. btf_dump__dump_type() is the main API
    which takes care of dumping out (through user-provided printf-like
    callback function) C definitions for given type ID and it's required
    dependencies. This allows for not just dumping out entirety of BTF types,
    but also selective filtering based on user-provided criterias w/ minimal
    set of dependent types.
    
    Signed-off-by: Andrii Nakryiko <andriin@fb.com>
    Signed-off-by: Alexei Starovoitov <ast@kernel.org>

diff --git a/tools/lib/bpf/btf.h b/tools/lib/bpf/btf.h
index bded210df9e8..ba4ffa831aa4 100644
--- a/tools/lib/bpf/btf.h
+++ b/tools/lib/bpf/btf.h
@@ -4,6 +4,7 @@
 #ifndef __LIBBPF_BTF_H
 #define __LIBBPF_BTF_H
 
+#include <stdarg.h>
 #include <linux/types.h>
 
 #ifdef __cplusplus
@@ -102,6 +103,22 @@ struct btf_dedup_opts {
 LIBBPF_API int btf__dedup(struct btf *btf, struct btf_ext *btf_ext,
 			  const struct btf_dedup_opts *opts);
 
+struct btf_dump;
+
+struct btf_dump_opts {
+	void *ctx;
+};
+
+typedef void (*btf_dump_printf_fn_t)(void *ctx, const char *fmt, va_list args);
+
+LIBBPF_API struct btf_dump *btf_dump__new(const struct btf *btf,
+					  const struct btf_ext *btf_ext,
+					  const struct btf_dump_opts *opts,
+					  btf_dump_printf_fn_t printf_fn);
+LIBBPF_API void btf_dump__free(struct btf_dump *d);
+
+LIBBPF_API int btf_dump__dump_type(struct btf_dump *d, __u32 id);
+
 #ifdef __cplusplus
 } /* extern "C" */
 #endif

commit e6c64855fd7ad565d87b2bd617f4a50d3bdad82f
Author: Andrii Nakryiko <andriin@fb.com>
Date:   Fri May 24 11:58:57 2019 -0700

    libbpf: add btf__parse_elf API to load .BTF and .BTF.ext
    
    Loading BTF and BTF.ext from ELF file is a common need. Instead of
    requiring every user to re-implement it, let's provide this API from
    libbpf itself. It's mostly copy/paste from `bpftool btf dump`
    implementation, which will be switched to libbpf's version in next
    patch. btf__parse_elf allows to load BTF and optionally BTF.ext.
    This is also useful for tests that need to load/work with BTF, loaded
    from test ELF files.
    
    Signed-off-by: Andrii Nakryiko <andriin@fb.com>
    Signed-off-by: Alexei Starovoitov <ast@kernel.org>

diff --git a/tools/lib/bpf/btf.h b/tools/lib/bpf/btf.h
index c7b399e81fce..bded210df9e8 100644
--- a/tools/lib/bpf/btf.h
+++ b/tools/lib/bpf/btf.h
@@ -59,6 +59,8 @@ struct btf_ext_header {
 
 LIBBPF_API void btf__free(struct btf *btf);
 LIBBPF_API struct btf *btf__new(__u8 *data, __u32 size);
+LIBBPF_API struct btf *btf__parse_elf(const char *path,
+				      struct btf_ext **btf_ext);
 LIBBPF_API int btf__finalize_data(struct bpf_object *obj, struct btf *btf);
 LIBBPF_API int btf__load(struct btf *btf);
 LIBBPF_API __s32 btf__find_by_name(const struct btf *btf,

commit 1713d68b3bf039d029afd74653c9325f5003ccbe
Author: Daniel Borkmann <daniel@iogearbox.net>
Date:   Tue Apr 9 23:20:14 2019 +0200

    bpf, libbpf: add support for BTF Var and DataSec
    
    This adds libbpf support for BTF Var and DataSec kinds. Main point
    here is that libbpf needs to do some preparatory work before the
    whole BTF object can be loaded into the kernel, that is, fixing up
    of DataSec size taken from the ELF section size and non-static
    variable offset which needs to be taken from the ELF's string section.
    
    Upstream LLVM doesn't fix these up since at time of BTF emission
    it is too early in the compilation process thus this information
    isn't available yet, hence loader needs to take care of it.
    
    Note, deduplication handling has not been in the scope of this work
    and needs to be addressed in a future commit.
    
    Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
    Link: https://reviews.llvm.org/D59441
    Acked-by: Martin KaFai Lau <kafai@fb.com>
    Signed-off-by: Alexei Starovoitov <ast@kernel.org>

diff --git a/tools/lib/bpf/btf.h b/tools/lib/bpf/btf.h
index 28a1e1e59861..c7b399e81fce 100644
--- a/tools/lib/bpf/btf.h
+++ b/tools/lib/bpf/btf.h
@@ -21,6 +21,8 @@ struct btf;
 struct btf_ext;
 struct btf_type;
 
+struct bpf_object;
+
 /*
  * The .BTF.ext ELF section layout defined as
  *   struct btf_ext_header
@@ -57,6 +59,7 @@ struct btf_ext_header {
 
 LIBBPF_API void btf__free(struct btf *btf);
 LIBBPF_API struct btf *btf__new(__u8 *data, __u32 size);
+LIBBPF_API int btf__finalize_data(struct bpf_object *obj, struct btf *btf);
 LIBBPF_API int btf__load(struct btf *btf);
 LIBBPF_API __s32 btf__find_by_name(const struct btf *btf,
 				   const char *type_name);

commit 51edf5f6e015c48b62e24ab2fbcad8885ca1c74e
Author: Andrii Nakryiko <andriin@fb.com>
Date:   Thu Feb 28 15:31:23 2019 -0800

    btf: allow to customize dedup hash table size
    
    Default size of dedup table (16k) is good enough for most binaries, even
    typical vmlinux images. But there are cases of binaries with huge amount
    of BTF types (e.g., allyesconfig variants of kernel), which benefit from
    having bigger dedup table size to lower amount of unnecessary hash
    collisions. Tools like pahole, thus, can tune this parameter to reach
    optimal performance.
    
    This change also serves double purpose of allowing tests to force hash
    collisions to test some corner cases, used in follow up patch.
    
    Signed-off-by: Andrii Nakryiko <andriin@fb.com>
    Acked-by: Yonghong Song <yhs@fb.com>
    Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>

diff --git a/tools/lib/bpf/btf.h b/tools/lib/bpf/btf.h
index b60bb7cf5fff..28a1e1e59861 100644
--- a/tools/lib/bpf/btf.h
+++ b/tools/lib/bpf/btf.h
@@ -90,6 +90,7 @@ LIBBPF_API __u32 btf_ext__func_info_rec_size(const struct btf_ext *btf_ext);
 LIBBPF_API __u32 btf_ext__line_info_rec_size(const struct btf_ext *btf_ext);
 
 struct btf_dedup_opts {
+	unsigned int dedup_table_size;
 	bool dont_resolve_fwds;
 };
 

commit 1baabdc1089eb807cdcabebad50b36c8b9895a48
Author: Andrii Nakryiko <andriin@fb.com>
Date:   Thu Feb 28 15:31:22 2019 -0800

    libbpf: fix formatting for btf_ext__get_raw_data
    
    Fix invalid formatting of pointer arg.
    
    Signed-off-by: Andrii Nakryiko <andriin@fb.com>
    Acked-by: Song Liu <songliubraving@fb.com>
    Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>

diff --git a/tools/lib/bpf/btf.h b/tools/lib/bpf/btf.h
index 94bbc249b0f1..b60bb7cf5fff 100644
--- a/tools/lib/bpf/btf.h
+++ b/tools/lib/bpf/btf.h
@@ -76,7 +76,7 @@ LIBBPF_API int btf__get_map_kv_tids(const struct btf *btf, const char *map_name,
 
 LIBBPF_API struct btf_ext *btf_ext__new(__u8 *data, __u32 size);
 LIBBPF_API void btf_ext__free(struct btf_ext *btf_ext);
-LIBBPF_API const void *btf_ext__get_raw_data(const struct btf_ext* btf_ext,
+LIBBPF_API const void *btf_ext__get_raw_data(const struct btf_ext *btf_ext,
 					     __u32 *size);
 LIBBPF_API int btf_ext__reloc_func_info(const struct btf *btf,
 					const struct btf_ext *btf_ext,

commit 49b57e0d01db73c99f86d68480fb9b4014bb1060
Author: Andrii Nakryiko <andriin@fb.com>
Date:   Fri Feb 8 11:19:39 2019 -0800

    tools/bpf: remove btf__get_strings() superseded by raw data API
    
    Now that we have btf__get_raw_data() it's trivial for tests to iterate
    over all strings for testing purposes, which eliminates the need for
    btf__get_strings() API.
    
    Signed-off-by: Andrii Nakryiko <andriin@fb.com>
    Acked-by: Yonghong Song <yhs@fb.com>
    Signed-off-by: Alexei Starovoitov <ast@kernel.org>

diff --git a/tools/lib/bpf/btf.h b/tools/lib/bpf/btf.h
index 0306b54d54eb..94bbc249b0f1 100644
--- a/tools/lib/bpf/btf.h
+++ b/tools/lib/bpf/btf.h
@@ -67,8 +67,6 @@ LIBBPF_API __s64 btf__resolve_size(const struct btf *btf, __u32 type_id);
 LIBBPF_API int btf__resolve_type(const struct btf *btf, __u32 type_id);
 LIBBPF_API int btf__fd(const struct btf *btf);
 LIBBPF_API const void *btf__get_raw_data(const struct btf *btf, __u32 *size);
-LIBBPF_API void btf__get_strings(const struct btf *btf, const char **strings,
-				 __u32 *str_len);
 LIBBPF_API const char *btf__name_by_offset(const struct btf *btf, __u32 offset);
 LIBBPF_API int btf__get_from_id(__u32 id, struct btf **btf);
 LIBBPF_API int btf__get_map_kv_tids(const struct btf *btf, const char *map_name,

commit ae4ab4b4117d23da49f04a7e1fe82a41e6074eeb
Author: Andrii Nakryiko <andriin@fb.com>
Date:   Fri Feb 8 11:19:38 2019 -0800

    btf: expose API to work with raw btf_ext data
    
    This patch changes struct btf_ext to retain original data in sequential
    block of memory, which makes it possible to expose
    btf_ext__get_raw_data() interface similar to btf__get_raw_data(), allowing
    users of libbpf to get access to raw representation of .BTF.ext section.
    
    Signed-off-by: Andrii Nakryiko <andriin@fb.com>
    Acked-by: Yonghong Song <yhs@fb.com>
    Signed-off-by: Alexei Starovoitov <ast@kernel.org>

diff --git a/tools/lib/bpf/btf.h b/tools/lib/bpf/btf.h
index 10fe412461fe..0306b54d54eb 100644
--- a/tools/lib/bpf/btf.h
+++ b/tools/lib/bpf/btf.h
@@ -78,6 +78,8 @@ LIBBPF_API int btf__get_map_kv_tids(const struct btf *btf, const char *map_name,
 
 LIBBPF_API struct btf_ext *btf_ext__new(__u8 *data, __u32 size);
 LIBBPF_API void btf_ext__free(struct btf_ext *btf_ext);
+LIBBPF_API const void *btf_ext__get_raw_data(const struct btf_ext* btf_ext,
+					     __u32 *size);
 LIBBPF_API int btf_ext__reloc_func_info(const struct btf *btf,
 					const struct btf_ext *btf_ext,
 					const char *sec_name, __u32 insns_cnt,

commit 02c874460f3d9213096323ac8a937fb486a4e70d
Author: Andrii Nakryiko <andriin@fb.com>
Date:   Fri Feb 8 11:19:37 2019 -0800

    btf: expose API to work with raw btf data
    
    This patch exposes new API btf__get_raw_data() that allows to get a copy
    of raw BTF data out of struct btf. This is useful for external programs
    that need to manipulate raw data, e.g., pahole using btf__dedup() to
    deduplicate BTF type info and then writing it back to file.
    
    Signed-off-by: Andrii Nakryiko <andriin@fb.com>
    Acked-by: Song Liu <songliubraving@fb.com>
    Signed-off-by: Alexei Starovoitov <ast@kernel.org>

diff --git a/tools/lib/bpf/btf.h b/tools/lib/bpf/btf.h
index f55b7bc98d9e..10fe412461fe 100644
--- a/tools/lib/bpf/btf.h
+++ b/tools/lib/bpf/btf.h
@@ -66,6 +66,7 @@ LIBBPF_API const struct btf_type *btf__type_by_id(const struct btf *btf,
 LIBBPF_API __s64 btf__resolve_size(const struct btf *btf, __u32 type_id);
 LIBBPF_API int btf__resolve_type(const struct btf *btf, __u32 type_id);
 LIBBPF_API int btf__fd(const struct btf *btf);
+LIBBPF_API const void *btf__get_raw_data(const struct btf *btf, __u32 *size);
 LIBBPF_API void btf__get_strings(const struct btf *btf, const char **strings,
 				 __u32 *str_len);
 LIBBPF_API const char *btf__name_by_offset(const struct btf *btf, __u32 offset);

commit d29d87f7e61226c339d1212beff6b82f653acd67
Author: Andrii Nakryiko <andriin@fb.com>
Date:   Fri Feb 8 11:19:36 2019 -0800

    btf: separate btf creation and loading
    
    This change splits out previous btf__new functionality of constructing
    struct btf and loading it into kernel into two:
    - btf__new() just creates and initializes struct btf
    - btf__load() attempts to load existing struct btf into kernel
    
    btf__free will still close BTF fd, if it was ever loaded successfully
    into kernel.
    
    This change allows users of libbpf to manipulate BTF using its API,
    without the need to unnecessarily load it into kernel.
    
    One of the intended use cases is pahole, which will do DWARF to BTF
    conversion and then use libbpf to do type deduplication, while then
    handling ELF sections overwriting and other concerns on its own.
    
    Fixes: 2d3feca8c44f ("bpf: btf: print map dump and lookup with btf info")
    Signed-off-by: Andrii Nakryiko <andriin@fb.com>
    Acked-by: Song Liu <songliubraving@fb.com>
    Signed-off-by: Alexei Starovoitov <ast@kernel.org>

diff --git a/tools/lib/bpf/btf.h b/tools/lib/bpf/btf.h
index b393da90cc85..f55b7bc98d9e 100644
--- a/tools/lib/bpf/btf.h
+++ b/tools/lib/bpf/btf.h
@@ -57,6 +57,7 @@ struct btf_ext_header {
 
 LIBBPF_API void btf__free(struct btf *btf);
 LIBBPF_API struct btf *btf__new(__u8 *data, __u32 size);
+LIBBPF_API int btf__load(struct btf *btf);
 LIBBPF_API __s32 btf__find_by_name(const struct btf *btf,
 				   const char *type_name);
 LIBBPF_API __u32 btf__get_nr_types(const struct btf *btf);

commit a6c109a6b746509f5030d20d57b35e566cf3a04f
Author: Yonghong Song <yhs@fb.com>
Date:   Tue Feb 5 11:48:22 2019 -0800

    tools/bpf: add const qualifier to btf__get_map_kv_tids() map_name parameter
    
    Commit 96408c43447a ("tools/bpf: implement libbpf btf__get_map_kv_tids() API function")
    added the API function btf__get_map_kv_tids():
      btf__get_map_kv_tids(const struct btf *btf, char *map_name, ...)
    
    The parameter map_name has type "char *". This is okay inside libbpf library since
    the map_name is from bpf_map->name which also has type "char *".
    
    This will be problematic if the caller for map_name already has attribute "const",
    e.g., from C++ string.c_str(). It will result in either a warning or an error.
    
      /home/yhs/work/bcc/src/cc/btf.cc:166:51:
        error: invalid conversion from ‘const char*’ to ‘char*’ [-fpermissive]
          return btf__get_map_kv_tids(btf_, map_name.c_str()
    
    This patch added "const" attributes to map_name parameter.
    
    Fixes: 96408c43447a ("tools/bpf: implement libbpf btf__get_map_kv_tids() API function")
    Signed-off-by: Yonghong Song <yhs@fb.com>
    Acked-by: Alexei Starovoitov <ast@kernel.org>
    Signed-off-by: Alexei Starovoitov <ast@kernel.org>

diff --git a/tools/lib/bpf/btf.h b/tools/lib/bpf/btf.h
index 25a9d2db035d..b393da90cc85 100644
--- a/tools/lib/bpf/btf.h
+++ b/tools/lib/bpf/btf.h
@@ -69,7 +69,7 @@ LIBBPF_API void btf__get_strings(const struct btf *btf, const char **strings,
 				 __u32 *str_len);
 LIBBPF_API const char *btf__name_by_offset(const struct btf *btf, __u32 offset);
 LIBBPF_API int btf__get_from_id(__u32 id, struct btf **btf);
-LIBBPF_API int btf__get_map_kv_tids(const struct btf *btf, char *map_name,
+LIBBPF_API int btf__get_map_kv_tids(const struct btf *btf, const char *map_name,
 				    __u32 expected_key_size,
 				    __u32 expected_value_size,
 				    __u32 *key_type_id, __u32 *value_type_id);

commit 9c651127445c2fb3dca7b000bce6de97290288ff
Author: Andrii Nakryiko <andriin@fb.com>
Date:   Mon Feb 4 17:29:46 2019 -0800

    selftests/btf: add initial BTF dedup tests
    
    This patch sets up a new kind of tests (BTF dedup tests) and tests few aspects of
    BTF dedup algorithm. More complete set of tests will come in follow up patches.
    
    Signed-off-by: Andrii Nakryiko <andriin@fb.com>
    Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>

diff --git a/tools/lib/bpf/btf.h b/tools/lib/bpf/btf.h
index c739de7ed993..25a9d2db035d 100644
--- a/tools/lib/bpf/btf.h
+++ b/tools/lib/bpf/btf.h
@@ -59,11 +59,14 @@ LIBBPF_API void btf__free(struct btf *btf);
 LIBBPF_API struct btf *btf__new(__u8 *data, __u32 size);
 LIBBPF_API __s32 btf__find_by_name(const struct btf *btf,
 				   const char *type_name);
+LIBBPF_API __u32 btf__get_nr_types(const struct btf *btf);
 LIBBPF_API const struct btf_type *btf__type_by_id(const struct btf *btf,
 						  __u32 id);
 LIBBPF_API __s64 btf__resolve_size(const struct btf *btf, __u32 type_id);
 LIBBPF_API int btf__resolve_type(const struct btf *btf, __u32 type_id);
 LIBBPF_API int btf__fd(const struct btf *btf);
+LIBBPF_API void btf__get_strings(const struct btf *btf, const char **strings,
+				 __u32 *str_len);
 LIBBPF_API const char *btf__name_by_offset(const struct btf *btf, __u32 offset);
 LIBBPF_API int btf__get_from_id(__u32 id, struct btf **btf);
 LIBBPF_API int btf__get_map_kv_tids(const struct btf *btf, char *map_name,

commit d5caef5b56555bfa2ac0cf730f075864a023437e
Author: Andrii Nakryiko <andriin@fb.com>
Date:   Mon Feb 4 17:29:45 2019 -0800

    btf: add BTF types deduplication algorithm
    
    This patch implements BTF types deduplication algorithm. It allows to
    greatly compress typical output of pahole's DWARF-to-BTF conversion or
    LLVM's compilation output by detecting and collapsing identical types emitted in
    isolation per compilation unit. Algorithm also resolves struct/union forward
    declarations into concrete BTF types representing referenced struct/union. If
    undesired, this resolution can be disabled through specifying corresponding options.
    
    Algorithm itself and its application to Linux kernel's BTF types is
    described in details at:
    https://facebookmicrosites.github.io/bpf/blog/2018/11/14/btf-enhancement.html
    
    Signed-off-by: Andrii Nakryiko <andriin@fb.com>
    Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>

diff --git a/tools/lib/bpf/btf.h b/tools/lib/bpf/btf.h
index 258c87e9f55d..c739de7ed993 100644
--- a/tools/lib/bpf/btf.h
+++ b/tools/lib/bpf/btf.h
@@ -84,6 +84,13 @@ LIBBPF_API int btf_ext__reloc_line_info(const struct btf *btf,
 LIBBPF_API __u32 btf_ext__func_info_rec_size(const struct btf_ext *btf_ext);
 LIBBPF_API __u32 btf_ext__line_info_rec_size(const struct btf_ext *btf_ext);
 
+struct btf_dedup_opts {
+	bool dont_resolve_fwds;
+};
+
+LIBBPF_API int btf__dedup(struct btf *btf, struct btf_ext *btf_ext,
+			  const struct btf_dedup_opts *opts);
+
 #ifdef __cplusplus
 } /* extern "C" */
 #endif

commit 96408c43447aff5091a6938f29d8b6f2d0aa2064
Author: Yonghong Song <yhs@fb.com>
Date:   Mon Feb 4 11:00:58 2019 -0800

    tools/bpf: implement libbpf btf__get_map_kv_tids() API function
    
    Currently, to get map key/value type id's, the macro
      BPF_ANNOTATE_KV_PAIR(<map_name>, <key_type>, <value_type>)
    needs to be defined in the bpf program for the
    corresponding map.
    
    During program/map loading time,
    the local static function bpf_map_find_btf_info()
    in libbpf.c is implemented to retrieve the key/value
    type ids given the map name.
    
    The patch refactored function bpf_map_find_btf_info()
    to create an API btf__get_map_kv_tids() which includes
    the bulk of implementation for the original function.
    The API btf__get_map_kv_tids() can be used by bcc,
    a JIT based bpf compilation system, which uses the
    same BPF_ANNOTATE_KV_PAIR to record map key/value types.
    
    Acked-by: Martin KaFai Lau <kafai@fb.com>
    Signed-off-by: Yonghong Song <yhs@fb.com>
    Signed-off-by: Alexei Starovoitov <ast@kernel.org>

diff --git a/tools/lib/bpf/btf.h b/tools/lib/bpf/btf.h
index 418389e2a662..258c87e9f55d 100644
--- a/tools/lib/bpf/btf.h
+++ b/tools/lib/bpf/btf.h
@@ -66,6 +66,10 @@ LIBBPF_API int btf__resolve_type(const struct btf *btf, __u32 type_id);
 LIBBPF_API int btf__fd(const struct btf *btf);
 LIBBPF_API const char *btf__name_by_offset(const struct btf *btf, __u32 offset);
 LIBBPF_API int btf__get_from_id(__u32 id, struct btf **btf);
+LIBBPF_API int btf__get_map_kv_tids(const struct btf *btf, char *map_name,
+				    __u32 expected_key_size,
+				    __u32 expected_value_size,
+				    __u32 *key_type_id, __u32 *value_type_id);
 
 LIBBPF_API struct btf_ext *btf_ext__new(__u8 *data, __u32 size);
 LIBBPF_API void btf_ext__free(struct btf_ext *btf_ext);

commit b8dcf8d149db5999d3db937822d3e374eca68b9f
Author: Yonghong Song <yhs@fb.com>
Date:   Mon Feb 4 11:00:57 2019 -0800

    tools/bpf: expose functions btf_ext__* as API functions
    
    The following set of functions, which manipulates .BTF.ext
    section, are exposed as API functions:
      . btf_ext__new
      . btf_ext__free
      . btf_ext__reloc_func_info
      . btf_ext__reloc_line_info
      . btf_ext__func_info_rec_size
      . btf_ext__line_info_rec_size
    
    These functions are useful for JIT based bpf codegen, e.g.,
    bcc, to manipulate in-memory .BTF.ext sections.
    
    The signature of function btf_ext__reloc_func_info()
    is also changed to be the same as its definition in btf.c.
    
    Acked-by: Martin KaFai Lau <kafai@fb.com>
    Signed-off-by: Yonghong Song <yhs@fb.com>
    Signed-off-by: Alexei Starovoitov <ast@kernel.org>

diff --git a/tools/lib/bpf/btf.h b/tools/lib/bpf/btf.h
index b1e8e54cc21d..418389e2a662 100644
--- a/tools/lib/bpf/btf.h
+++ b/tools/lib/bpf/btf.h
@@ -67,18 +67,18 @@ LIBBPF_API int btf__fd(const struct btf *btf);
 LIBBPF_API const char *btf__name_by_offset(const struct btf *btf, __u32 offset);
 LIBBPF_API int btf__get_from_id(__u32 id, struct btf **btf);
 
-struct btf_ext *btf_ext__new(__u8 *data, __u32 size);
-void btf_ext__free(struct btf_ext *btf_ext);
-int btf_ext__reloc_func_info(const struct btf *btf,
-			     const struct btf_ext *btf_ext,
-			     const char *sec_name, __u32 insns_cnt,
-			     void **func_info, __u32 *func_info_len);
-int btf_ext__reloc_line_info(const struct btf *btf,
-			     const struct btf_ext *btf_ext,
-			     const char *sec_name, __u32 insns_cnt,
-			     void **line_info, __u32 *cnt);
-__u32 btf_ext__func_info_rec_size(const struct btf_ext *btf_ext);
-__u32 btf_ext__line_info_rec_size(const struct btf_ext *btf_ext);
+LIBBPF_API struct btf_ext *btf_ext__new(__u8 *data, __u32 size);
+LIBBPF_API void btf_ext__free(struct btf_ext *btf_ext);
+LIBBPF_API int btf_ext__reloc_func_info(const struct btf *btf,
+					const struct btf_ext *btf_ext,
+					const char *sec_name, __u32 insns_cnt,
+					void **func_info, __u32 *cnt);
+LIBBPF_API int btf_ext__reloc_line_info(const struct btf *btf,
+					const struct btf_ext *btf_ext,
+					const char *sec_name, __u32 insns_cnt,
+					void **line_info, __u32 *cnt);
+LIBBPF_API __u32 btf_ext__func_info_rec_size(const struct btf_ext *btf_ext);
+LIBBPF_API __u32 btf_ext__line_info_rec_size(const struct btf_ext *btf_ext);
 
 #ifdef __cplusplus
 } /* extern "C" */

commit 8461ef8b7ef286212ca954d8b82dac3ceecb219d
Author: Yonghong Song <yhs@fb.com>
Date:   Fri Feb 1 16:14:14 2019 -0800

    tools/bpf: move libbpf pr_* debug print functions to headers
    
    A global function libbpf_print, which is invisible
    outside the shared library, is defined to print based
    on levels. The pr_warning, pr_info and pr_debug
    macros are moved into the newly created header
    common.h. So any .c file including common.h can
    use these macros directly.
    
    Currently btf__new and btf_ext__new API has an argument getting
    __pr_debug function pointer into btf.c so the debugging information
    can be printed there. This patch removed this parameter
    from btf__new and btf_ext__new and directly using pr_debug in btf.c.
    
    Another global function libbpf_print_level_available, also
    invisible outside the shared library, can test
    whether a particular level debug printing is
    available or not. It is used in btf.c to
    test whether DEBUG level debug printing is availabl or not,
    based on which the log buffer will be allocated when loading
    btf to the kernel.
    
    Signed-off-by: Yonghong Song <yhs@fb.com>
    Signed-off-by: Alexei Starovoitov <ast@kernel.org>

diff --git a/tools/lib/bpf/btf.h b/tools/lib/bpf/btf.h
index b0610dcdae6b..b1e8e54cc21d 100644
--- a/tools/lib/bpf/btf.h
+++ b/tools/lib/bpf/btf.h
@@ -55,11 +55,8 @@ struct btf_ext_header {
 	__u32	line_info_len;
 };
 
-typedef int (*btf_print_fn_t)(const char *, ...)
-	__attribute__((format(printf, 1, 2)));
-
 LIBBPF_API void btf__free(struct btf *btf);
-LIBBPF_API struct btf *btf__new(__u8 *data, __u32 size, btf_print_fn_t err_log);
+LIBBPF_API struct btf *btf__new(__u8 *data, __u32 size);
 LIBBPF_API __s32 btf__find_by_name(const struct btf *btf,
 				   const char *type_name);
 LIBBPF_API const struct btf_type *btf__type_by_id(const struct btf *btf,
@@ -70,7 +67,7 @@ LIBBPF_API int btf__fd(const struct btf *btf);
 LIBBPF_API const char *btf__name_by_offset(const struct btf *btf, __u32 offset);
 LIBBPF_API int btf__get_from_id(__u32 id, struct btf **btf);
 
-struct btf_ext *btf_ext__new(__u8 *data, __u32 size, btf_print_fn_t err_log);
+struct btf_ext *btf_ext__new(__u8 *data, __u32 size);
 void btf_ext__free(struct btf_ext *btf_ext);
 int btf_ext__reloc_func_info(const struct btf *btf,
 			     const struct btf_ext *btf_ext,

commit 3d65014146c69bbc4d2947f60dbd722d352cdc46
Author: Martin KaFai Lau <kafai@fb.com>
Date:   Fri Dec 7 16:42:31 2018 -0800

    bpf: libbpf: Add btf_line_info support to libbpf
    
    This patch adds bpf_line_info support to libbpf:
    1) Parsing the line_info sec from ".BTF.ext"
    2) Relocating the line_info.  If the main prog *_info relocation
       fails, it will ignore the remaining subprog line_info and continue.
       If the subprog *_info relocation fails, it will bail out.
    3) BPF_PROG_LOAD a prog with line_info
    
    Signed-off-by: Martin KaFai Lau <kafai@fb.com>
    Acked-by: Yonghong Song <yhs@fb.com>
    Signed-off-by: Alexei Starovoitov <ast@kernel.org>

diff --git a/tools/lib/bpf/btf.h b/tools/lib/bpf/btf.h
index 936177a538cd..b0610dcdae6b 100644
--- a/tools/lib/bpf/btf.h
+++ b/tools/lib/bpf/btf.h
@@ -51,6 +51,8 @@ struct btf_ext_header {
 	/* All offsets are in bytes relative to the end of this header */
 	__u32	func_info_off;
 	__u32	func_info_len;
+	__u32	line_info_off;
+	__u32	line_info_len;
 };
 
 typedef int (*btf_print_fn_t)(const char *, ...)
@@ -70,10 +72,16 @@ LIBBPF_API int btf__get_from_id(__u32 id, struct btf **btf);
 
 struct btf_ext *btf_ext__new(__u8 *data, __u32 size, btf_print_fn_t err_log);
 void btf_ext__free(struct btf_ext *btf_ext);
-int btf_ext__reloc_func_info(struct btf *btf, struct btf_ext *btf_ext,
+int btf_ext__reloc_func_info(const struct btf *btf,
+			     const struct btf_ext *btf_ext,
 			     const char *sec_name, __u32 insns_cnt,
 			     void **func_info, __u32 *func_info_len);
+int btf_ext__reloc_line_info(const struct btf *btf,
+			     const struct btf_ext *btf_ext,
+			     const char *sec_name, __u32 insns_cnt,
+			     void **line_info, __u32 *cnt);
 __u32 btf_ext__func_info_rec_size(const struct btf_ext *btf_ext);
+__u32 btf_ext__line_info_rec_size(const struct btf_ext *btf_ext);
 
 #ifdef __cplusplus
 } /* extern "C" */

commit f0187f0b17fad7439f510eff4d65606c9ea1190f
Author: Martin KaFai Lau <kafai@fb.com>
Date:   Fri Dec 7 16:42:29 2018 -0800

    bpf: libbpf: Refactor and bug fix on the bpf_func_info loading logic
    
    This patch refactor and fix a bug in the libbpf's bpf_func_info loading
    logic.  The bug fix and refactoring are targeting the same
    commit 2993e0515bb4 ("tools/bpf: add support to read .BTF.ext sections")
    which is in the bpf-next branch.
    
    1) In bpf_load_program_xattr(), it should retry when errno == E2BIG
       regardless of log_buf and log_buf_sz.  This patch fixes it.
    
    2) btf_ext__reloc_init() and btf_ext__reloc() are essentially
       the same except btf_ext__reloc_init() always has insns_cnt == 0.
       Hence, btf_ext__reloc_init() is removed.
    
       btf_ext__reloc() is also renamed to btf_ext__reloc_func_info()
       to get ready for the line_info support in the next patch.
    
    3) Consolidate func_info section logic from "btf_ext_parse_hdr()",
       "btf_ext_validate_func_info()" and "btf_ext__new()" to
       a new function "btf_ext_copy_func_info()" such that similar
       logic can be reused by the later libbpf's line_info patch.
    
    4) The next line_info patch will store line_info_cnt instead of
       line_info_len in the bpf_program because the kernel is taking
       line_info_cnt also.  It will save a few "len" to "cnt" conversions
       and will also save some function args.
    
       Hence, this patch also makes bpf_program to store func_info_cnt
       instead of func_info_len.
    
    5) btf_ext depends on btf.  e.g. the func_info's type_id
       in ".BTF.ext" is not useful when ".BTF" is absent.
       This patch only init the obj->btf_ext pointer after
       it has successfully init the obj->btf pointer.
    
       This can avoid always checking "obj->btf && obj->btf_ext"
       together for accessing ".BTF.ext".  Checking "obj->btf_ext"
       alone will do.
    
    6) Move "struct btf_sec_func_info" from btf.h to btf.c.
       There is no external usage outside btf.c.
    
    Fixes: 2993e0515bb4 ("tools/bpf: add support to read .BTF.ext sections")
    Signed-off-by: Martin KaFai Lau <kafai@fb.com>
    Acked-by: Yonghong Song <yhs@fb.com>
    Signed-off-by: Alexei Starovoitov <ast@kernel.org>

diff --git a/tools/lib/bpf/btf.h b/tools/lib/bpf/btf.h
index 5336b2f37293..936177a538cd 100644
--- a/tools/lib/bpf/btf.h
+++ b/tools/lib/bpf/btf.h
@@ -53,13 +53,6 @@ struct btf_ext_header {
 	__u32	func_info_len;
 };
 
-struct btf_sec_func_info {
-	__u32	sec_name_off;
-	__u32	num_func_info;
-	/* Followed by num_func_info number of bpf func_info records */
-	__u8	data[0];
-};
-
 typedef int (*btf_print_fn_t)(const char *, ...)
 	__attribute__((format(printf, 1, 2)));
 
@@ -77,12 +70,10 @@ LIBBPF_API int btf__get_from_id(__u32 id, struct btf **btf);
 
 struct btf_ext *btf_ext__new(__u8 *data, __u32 size, btf_print_fn_t err_log);
 void btf_ext__free(struct btf_ext *btf_ext);
-int btf_ext__reloc_init(struct btf *btf, struct btf_ext *btf_ext,
-			const char *sec_name, void **func_info,
-			__u32 *func_info_rec_size, __u32 *func_info_len);
-int btf_ext__reloc(struct btf *btf, struct btf_ext *btf_ext,
-		   const char *sec_name, __u32 insns_cnt, void **func_info,
-		   __u32 *func_info_len);
+int btf_ext__reloc_func_info(struct btf *btf, struct btf_ext *btf_ext,
+			     const char *sec_name, __u32 insns_cnt,
+			     void **func_info, __u32 *func_info_len);
+__u32 btf_ext__func_info_rec_size(const struct btf_ext *btf_ext);
 
 #ifdef __cplusplus
 } /* extern "C" */

commit 1d2f44ca342445f7da56555ca7a43d19aac8996a
Author: Martin KaFai Lau <kafai@fb.com>
Date:   Fri Nov 23 16:44:32 2018 -0800

    libbpf: Name changing for btf_get_from_id
    
    s/btf_get_from_id/btf__get_from_id/ to restore the API naming convention.
    
    Signed-off-by: Martin KaFai Lau <kafai@fb.com>
    Signed-off-by: Andrey Ignatov <rdna@fb.com>
    Signed-off-by: Alexei Starovoitov <ast@kernel.org>

diff --git a/tools/lib/bpf/btf.h b/tools/lib/bpf/btf.h
index 701ad2b6c41f..5336b2f37293 100644
--- a/tools/lib/bpf/btf.h
+++ b/tools/lib/bpf/btf.h
@@ -73,7 +73,7 @@ LIBBPF_API __s64 btf__resolve_size(const struct btf *btf, __u32 type_id);
 LIBBPF_API int btf__resolve_type(const struct btf *btf, __u32 type_id);
 LIBBPF_API int btf__fd(const struct btf *btf);
 LIBBPF_API const char *btf__name_by_offset(const struct btf *btf, __u32 offset);
-LIBBPF_API int btf_get_from_id(__u32 id, struct btf **btf);
+LIBBPF_API int btf__get_from_id(__u32 id, struct btf **btf);
 
 struct btf_ext *btf_ext__new(__u8 *data, __u32 size, btf_print_fn_t err_log);
 void btf_ext__free(struct btf_ext *btf_ext);

commit 8c4905b995c649ac71e21611abc2fcefc904b56a
Author: Stanislav Fomichev <sdf@google.com>
Date:   Wed Nov 21 09:29:44 2018 -0800

    libbpf: make sure bpf headers are c++ include-able
    
    Wrap headers in extern "C", to turn off C++ mangling.
    This simplifies including libbpf in c++ and linking against it.
    
    v2 changes:
    * do the same for btf.h
    
    v3 changes:
    * test_libbpf.cpp to test for possible future c++ breakages
    
    Signed-off-by: Stanislav Fomichev <sdf@google.com>
    Acked-by: Alexei Starovoitov <ast@kernel.org>
    Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>

diff --git a/tools/lib/bpf/btf.h b/tools/lib/bpf/btf.h
index 386b2ffc32a3..701ad2b6c41f 100644
--- a/tools/lib/bpf/btf.h
+++ b/tools/lib/bpf/btf.h
@@ -6,6 +6,10 @@
 
 #include <linux/types.h>
 
+#ifdef __cplusplus
+extern "C" {
+#endif
+
 #ifndef LIBBPF_API
 #define LIBBPF_API __attribute__((visibility("default")))
 #endif
@@ -80,4 +84,8 @@ int btf_ext__reloc(struct btf *btf, struct btf_ext *btf_ext,
 		   const char *sec_name, __u32 insns_cnt, void **func_info,
 		   __u32 *func_info_len);
 
+#ifdef __cplusplus
+} /* extern "C" */
+#endif
+
 #endif /* __LIBBPF_BTF_H */

commit d7f5b5e051554c91bab995b67101af4625af591a
Author: Yonghong Song <yhs@fb.com>
Date:   Mon Nov 19 15:29:18 2018 -0800

    tools/bpf: refactor to implement btf_get_from_id() in lib/bpf
    
    The function get_btf() is implemented in tools/bpf/bpftool/map.c
    to get a btf structure given a map_info. This patch
    refactored this function to be function btf_get_from_id()
    in tools/lib/bpf so that it can be used later.
    
    Signed-off-by: Yonghong Song <yhs@fb.com>
    Signed-off-by: Martin KaFai Lau <kafai@fb.com>
    Signed-off-by: Alexei Starovoitov <ast@kernel.org>

diff --git a/tools/lib/bpf/btf.h b/tools/lib/bpf/btf.h
index 578171e8cb26..386b2ffc32a3 100644
--- a/tools/lib/bpf/btf.h
+++ b/tools/lib/bpf/btf.h
@@ -69,6 +69,7 @@ LIBBPF_API __s64 btf__resolve_size(const struct btf *btf, __u32 type_id);
 LIBBPF_API int btf__resolve_type(const struct btf *btf, __u32 type_id);
 LIBBPF_API int btf__fd(const struct btf *btf);
 LIBBPF_API const char *btf__name_by_offset(const struct btf *btf, __u32 offset);
+LIBBPF_API int btf_get_from_id(__u32 id, struct btf **btf);
 
 struct btf_ext *btf_ext__new(__u8 *data, __u32 size, btf_print_fn_t err_log);
 void btf_ext__free(struct btf_ext *btf_ext);

commit 2993e0515bb44e157c17c9ba7309ba46366b6add
Author: Yonghong Song <yhs@fb.com>
Date:   Mon Nov 19 15:29:16 2018 -0800

    tools/bpf: add support to read .BTF.ext sections
    
    The .BTF section is already available to encode types.
    These types can be used for map
    pretty print. The whole .BTF will be passed to the
    kernel as well for which kernel can verify and return
    to the user space for pretty print etc.
    
    The llvm patch at https://reviews.llvm.org/D53736
    will generate .BTF section and one more section .BTF.ext.
    The .BTF.ext section encodes function type
    information and line information. Note that
    this patch set only supports function type info.
    The functionality is implemented in libbpf.
    
    The .BTF section can be directly loaded into the
    kernel, and the .BTF.ext section cannot. The loader
    may need to do some relocation and merging,
    similar to merging multiple code sections, before
    loading into the kernel.
    
    Signed-off-by: Yonghong Song <yhs@fb.com>
    Signed-off-by: Martin KaFai Lau <kafai@fb.com>
    Signed-off-by: Alexei Starovoitov <ast@kernel.org>

diff --git a/tools/lib/bpf/btf.h b/tools/lib/bpf/btf.h
index b77e7080f7e7..578171e8cb26 100644
--- a/tools/lib/bpf/btf.h
+++ b/tools/lib/bpf/btf.h
@@ -11,10 +11,51 @@
 #endif
 
 #define BTF_ELF_SEC ".BTF"
+#define BTF_EXT_ELF_SEC ".BTF.ext"
 
 struct btf;
+struct btf_ext;
 struct btf_type;
 
+/*
+ * The .BTF.ext ELF section layout defined as
+ *   struct btf_ext_header
+ *   func_info subsection
+ *
+ * The func_info subsection layout:
+ *   record size for struct bpf_func_info in the func_info subsection
+ *   struct btf_sec_func_info for section #1
+ *   a list of bpf_func_info records for section #1
+ *     where struct bpf_func_info mimics one in include/uapi/linux/bpf.h
+ *     but may not be identical
+ *   struct btf_sec_func_info for section #2
+ *   a list of bpf_func_info records for section #2
+ *   ......
+ *
+ * Note that the bpf_func_info record size in .BTF.ext may not
+ * be the same as the one defined in include/uapi/linux/bpf.h.
+ * The loader should ensure that record_size meets minimum
+ * requirement and pass the record as is to the kernel. The
+ * kernel will handle the func_info properly based on its contents.
+ */
+struct btf_ext_header {
+	__u16	magic;
+	__u8	version;
+	__u8	flags;
+	__u32	hdr_len;
+
+	/* All offsets are in bytes relative to the end of this header */
+	__u32	func_info_off;
+	__u32	func_info_len;
+};
+
+struct btf_sec_func_info {
+	__u32	sec_name_off;
+	__u32	num_func_info;
+	/* Followed by num_func_info number of bpf func_info records */
+	__u8	data[0];
+};
+
 typedef int (*btf_print_fn_t)(const char *, ...)
 	__attribute__((format(printf, 1, 2)));
 
@@ -29,4 +70,13 @@ LIBBPF_API int btf__resolve_type(const struct btf *btf, __u32 type_id);
 LIBBPF_API int btf__fd(const struct btf *btf);
 LIBBPF_API const char *btf__name_by_offset(const struct btf *btf, __u32 offset);
 
+struct btf_ext *btf_ext__new(__u8 *data, __u32 size, btf_print_fn_t err_log);
+void btf_ext__free(struct btf_ext *btf_ext);
+int btf_ext__reloc_init(struct btf *btf, struct btf_ext *btf_ext,
+			const char *sec_name, void **func_info,
+			__u32 *func_info_rec_size, __u32 *func_info_len);
+int btf_ext__reloc(struct btf *btf, struct btf_ext *btf_ext,
+		   const char *sec_name, __u32 insns_cnt, void **func_info,
+		   __u32 *func_info_len);
+
 #endif /* __LIBBPF_BTF_H */

commit ab9e084821221b2eda57a512535fe35b49e672d8
Author: Andrey Ignatov <rdna@fb.com>
Date:   Mon Oct 15 22:50:34 2018 -0700

    libbpf: Per-symbol visibility for DSO
    
    Make global symbols in libbpf DSO hidden by default with
    -fvisibility=hidden and export symbols that are part of ABI explicitly
    with __attribute__((visibility("default"))).
    
    This is common practice that should prevent from accidentally exporting
    a symbol, that is not supposed to be a part of ABI what, in turn,
    improves both libbpf developer- and user-experiences. See [1] for more
    details.
    
    Export control becomes more important since more and more projects use
    libbpf.
    
    The patch doesn't export a bunch of netlink related functions since as
    agreed in [2] they'll be reworked. That doesn't break bpftool since
    bpftool links libbpf statically.
    
    [1] https://www.akkadia.org/drepper/dsohowto.pdf (2.2 Export Control)
    [2] https://www.mail-archive.com/netdev@vger.kernel.org/msg251434.html
    
    Signed-off-by: Andrey Ignatov <rdna@fb.com>
    Signed-off-by: Alexei Starovoitov <ast@kernel.org>

diff --git a/tools/lib/bpf/btf.h b/tools/lib/bpf/btf.h
index 6db5462bb2ef..b77e7080f7e7 100644
--- a/tools/lib/bpf/btf.h
+++ b/tools/lib/bpf/btf.h
@@ -6,6 +6,10 @@
 
 #include <linux/types.h>
 
+#ifndef LIBBPF_API
+#define LIBBPF_API __attribute__((visibility("default")))
+#endif
+
 #define BTF_ELF_SEC ".BTF"
 
 struct btf;
@@ -14,13 +18,15 @@ struct btf_type;
 typedef int (*btf_print_fn_t)(const char *, ...)
 	__attribute__((format(printf, 1, 2)));
 
-void btf__free(struct btf *btf);
-struct btf *btf__new(__u8 *data, __u32 size, btf_print_fn_t err_log);
-__s32 btf__find_by_name(const struct btf *btf, const char *type_name);
-const struct btf_type *btf__type_by_id(const struct btf *btf, __u32 id);
-__s64 btf__resolve_size(const struct btf *btf, __u32 type_id);
-int btf__resolve_type(const struct btf *btf, __u32 type_id);
-int btf__fd(const struct btf *btf);
-const char *btf__name_by_offset(const struct btf *btf, __u32 offset);
+LIBBPF_API void btf__free(struct btf *btf);
+LIBBPF_API struct btf *btf__new(__u8 *data, __u32 size, btf_print_fn_t err_log);
+LIBBPF_API __s32 btf__find_by_name(const struct btf *btf,
+				   const char *type_name);
+LIBBPF_API const struct btf_type *btf__type_by_id(const struct btf *btf,
+						  __u32 id);
+LIBBPF_API __s64 btf__resolve_size(const struct btf *btf, __u32 type_id);
+LIBBPF_API int btf__resolve_type(const struct btf *btf, __u32 type_id);
+LIBBPF_API int btf__fd(const struct btf *btf);
+LIBBPF_API const char *btf__name_by_offset(const struct btf *btf, __u32 offset);
 
 #endif /* __LIBBPF_BTF_H */

commit 1bc38b8ff6cc54b1cd925525c0a9ffa7eef4d23b
Author: Alexei Starovoitov <ast@kernel.org>
Date:   Fri Oct 5 16:40:00 2018 -0700

    libbpf: relicense libbpf as LGPL-2.1 OR BSD-2-Clause
    
    libbpf is maturing as a library and gaining features that no other bpf libraries support
    (BPF Type Format, bpf to bpf calls, etc)
    Many Apache2 licensed projects (like bcc, bpftrace, gobpf, cilium, etc)
    would like to use libbpf, but cannot do this yet, since Apache Foundation explicitly
    states that LGPL is incompatible with Apache2.
    Hence let's relicense libbpf as dual license LGPL-2.1 or BSD-2-Clause,
    since BSD-2 is compatible with Apache2.
    Dual LGPL or Apache2 is invalid combination.
    Fix license mistake in Makefile as well.
    
    Signed-off-by: Alexei Starovoitov <ast@kernel.org>
    Acked-by: Andrey Ignatov <rdna@fb.com>
    Acked-by: Arnaldo Carvalho de Melo <acme@kernel.org>
    Acked-by: Björn Töpel <bjorn.topel@intel.com>
    Acked-by: Daniel Borkmann <daniel@iogearbox.net>
    Acked-by: David Beckett <david.beckett@netronome.com>
    Acked-by: Jakub Kicinski <jakub.kicinski@netronome.com>
    Acked-by: Joe Stringer <joe@ovn.org>
    Acked-by: John Fastabend <john.fastabend@gmail.com>
    Acked-by: Martin KaFai Lau <kafai@fb.com>
    Acked-by: Quentin Monnet <quentin.monnet@netronome.com>
    Acked-by: Thomas Graf <tgraf@suug.ch>
    Acked-by: Roman Gushchin <guro@fb.com>
    Acked-by: Wang Nan <wangnan0@huawei.com>
    Acked-by: Yonghong Song <yhs@fb.com>
    Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>

diff --git a/tools/lib/bpf/btf.h b/tools/lib/bpf/btf.h
index d5d20682eeb6..6db5462bb2ef 100644
--- a/tools/lib/bpf/btf.h
+++ b/tools/lib/bpf/btf.h
@@ -1,4 +1,4 @@
-/* SPDX-License-Identifier: LGPL-2.1 */
+/* SPDX-License-Identifier: (LGPL-2.1 OR BSD-2-Clause) */
 /* Copyright (c) 2018 Facebook */
 
 #ifndef __LIBBPF_BTF_H

commit eff8190880c005e754d7d1bd315fc53a3ae9f876
Author: Andrey Ignatov <rdna@fb.com>
Date:   Wed Oct 3 15:26:42 2018 -0700

    libbpf: Make include guards consistent
    
    Rename include guards to have consistent names "__LIBBPF_<header_name>".
    
    Signed-off-by: Andrey Ignatov <rdna@fb.com>
    Acked-by: Alexei Starovoitov <ast@kernel.org>
    Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>

diff --git a/tools/lib/bpf/btf.h b/tools/lib/bpf/btf.h
index 4897e0724d4e..d5d20682eeb6 100644
--- a/tools/lib/bpf/btf.h
+++ b/tools/lib/bpf/btf.h
@@ -1,8 +1,8 @@
 /* SPDX-License-Identifier: LGPL-2.1 */
 /* Copyright (c) 2018 Facebook */
 
-#ifndef __BPF_BTF_H
-#define __BPF_BTF_H
+#ifndef __LIBBPF_BTF_H
+#define __LIBBPF_BTF_H
 
 #include <linux/types.h>
 
@@ -23,4 +23,4 @@ int btf__resolve_type(const struct btf *btf, __u32 type_id);
 int btf__fd(const struct btf *btf);
 const char *btf__name_by_offset(const struct btf *btf, __u32 offset);
 
-#endif
+#endif /* __LIBBPF_BTF_H */

commit 6a92ef08a1351e4977d6acde2196fa94e9c3a660
Merge: 9a95d9c6429b ec0c96714e7d
Author: David S. Miller <davem@davemloft.net>
Date:   Sat Aug 11 17:52:00 2018 -0700

    Merge ra.kernel.org:/pub/scm/linux/kernel/git/davem/net

commit 74682128c6e456b529b25b95ba807484ce58a753
Author: Martin KaFai Lau <kafai@fb.com>
Date:   Sun Aug 5 17:19:13 2018 -0700

    bpf: btf: Change tools/lib/bpf/btf to LGPL
    
    This patch changes the tools/lib/bpf/btf.[ch] to LGPL which
    is inline with libbpf also.
    
    Signed-off-by: Martin KaFai Lau <kafai@fb.com>
    Acked-by: Alexei Starovoitov <ast@kernel.org>
    Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>

diff --git a/tools/lib/bpf/btf.h b/tools/lib/bpf/btf.h
index e2a09a155f84..caac3a404dc5 100644
--- a/tools/lib/bpf/btf.h
+++ b/tools/lib/bpf/btf.h
@@ -1,4 +1,4 @@
-/* SPDX-License-Identifier: GPL-2.0 */
+/* SPDX-License-Identifier: LGPL-2.1 */
 /* Copyright (c) 2018 Facebook */
 
 #ifndef __BPF_BTF_H

commit 6534770d6f176093b50896961107b2d545ef38f0
Author: Jakub Kicinski <jakub.kicinski@netronome.com>
Date:   Thu Aug 2 19:30:27 2018 -0700

    tools: bpf: fix BTF code added twice to different trees
    
    commit 38d5d3b3d5db ("bpf: Introduce BPF_ANNOTATE_KV_PAIR")
    
    added to the bpf and net trees what
    
    commit 92b57121ca79 ("bpf: btf: export btf types and name by offset from lib")
    
    has already added to bpf-next/net-next, but in slightly different
    location.  Remove the duplicates (to fix build of libbpf).
    
    Signed-off-by: Jakub Kicinski <jakub.kicinski@netronome.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

diff --git a/tools/lib/bpf/btf.h b/tools/lib/bpf/btf.h
index dd8a86eab8ca..43c658ccfc2b 100644
--- a/tools/lib/bpf/btf.h
+++ b/tools/lib/bpf/btf.h
@@ -22,6 +22,5 @@ __s64 btf__resolve_size(const struct btf *btf, __u32 type_id);
 int btf__resolve_type(const struct btf *btf, __u32 type_id);
 int btf__fd(const struct btf *btf);
 const char *btf__name_by_offset(const struct btf *btf, __u32 offset);
-const struct btf_type *btf__type_by_id(const struct btf *btf, __u32 type_id);
 
 #endif

commit 89b1698c93a9dee043154f33d96bca9964e705f1
Merge: ffd7ce3cd9c2 e30cb13c5a09
Author: David S. Miller <davem@davemloft.net>
Date:   Thu Aug 2 10:55:32 2018 -0700

    Merge ra.kernel.org:/pub/scm/linux/kernel/git/davem/net
    
    The BTF conflicts were simple overlapping changes.
    
    The virtio_net conflict was an overlap of a fix of statistics counter,
    happening alongisde a move over to a bonafide statistics structure
    rather than counting value on the stack.
    
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 38d5d3b3d5dbc0e0bb51fa6f7559d0d5a27916f6
Author: Martin KaFai Lau <kafai@fb.com>
Date:   Tue Jul 24 08:40:22 2018 -0700

    bpf: Introduce BPF_ANNOTATE_KV_PAIR
    
    This patch introduces BPF_ANNOTATE_KV_PAIR to signal the
    bpf loader about the btf key_type and value_type of a bpf map.
    Please refer to the changes in test_btf_haskv.c for its usage.
    Both iproute2 and libbpf loader will then have the same
    convention to find out the map's btf_key_type_id and
    btf_value_type_id from a map's name.
    
    Fixes: 8a138aed4a80 ("bpf: btf: Add BTF support to libbpf")
    Suggested-by: Daniel Borkmann <daniel@iogearbox.net>
    Signed-off-by: Martin KaFai Lau <kafai@fb.com>
    Acked-by: Yonghong Song <yhs@fb.com>
    Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>

diff --git a/tools/lib/bpf/btf.h b/tools/lib/bpf/btf.h
index ed3a84370ccc..e2a09a155f84 100644
--- a/tools/lib/bpf/btf.h
+++ b/tools/lib/bpf/btf.h
@@ -9,6 +9,7 @@
 #define BTF_ELF_SEC ".BTF"
 
 struct btf;
+struct btf_type;
 
 typedef int (*btf_print_fn_t)(const char *, ...)
 	__attribute__((format(printf, 1, 2)));
@@ -16,6 +17,7 @@ typedef int (*btf_print_fn_t)(const char *, ...)
 void btf__free(struct btf *btf);
 struct btf *btf__new(__u8 *data, __u32 size, btf_print_fn_t err_log);
 __s32 btf__find_by_name(const struct btf *btf, const char *type_name);
+const struct btf_type *btf__type_by_id(const struct btf *btf, __u32 id);
 __s64 btf__resolve_size(const struct btf *btf, __u32 type_id);
 int btf__fd(const struct btf *btf);
 

commit 5b891af7fca14526b2a87c6f38b004e2df655ef4
Author: Martin KaFai Lau <kafai@fb.com>
Date:   Tue Jul 24 08:40:21 2018 -0700

    bpf: Replace [u]int32_t and [u]int64_t in libbpf
    
    This patch replaces [u]int32_t and [u]int64_t usage with
    __[su]32 and __[su]64.  The same change goes for [u]int16_t
    and [u]int8_t.
    
    Fixes: 8a138aed4a80 ("bpf: btf: Add BTF support to libbpf")
    Signed-off-by: Martin KaFai Lau <kafai@fb.com>
    Acked-by: Yonghong Song <yhs@fb.com>
    Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>

diff --git a/tools/lib/bpf/btf.h b/tools/lib/bpf/btf.h
index 74bb344035bb..ed3a84370ccc 100644
--- a/tools/lib/bpf/btf.h
+++ b/tools/lib/bpf/btf.h
@@ -4,7 +4,7 @@
 #ifndef __BPF_BTF_H
 #define __BPF_BTF_H
 
-#include <stdint.h>
+#include <linux/types.h>
 
 #define BTF_ELF_SEC ".BTF"
 
@@ -14,9 +14,9 @@ typedef int (*btf_print_fn_t)(const char *, ...)
 	__attribute__((format(printf, 1, 2)));
 
 void btf__free(struct btf *btf);
-struct btf *btf__new(uint8_t *data, uint32_t size, btf_print_fn_t err_log);
-int32_t btf__find_by_name(const struct btf *btf, const char *type_name);
-int64_t btf__resolve_size(const struct btf *btf, uint32_t type_id);
+struct btf *btf__new(__u8 *data, __u32 size, btf_print_fn_t err_log);
+__s32 btf__find_by_name(const struct btf *btf, const char *type_name);
+__s64 btf__resolve_size(const struct btf *btf, __u32 type_id);
 int btf__fd(const struct btf *btf);
 
 #endif

commit 92b57121ca79b286bef4f304e887272f3f2d86bb
Author: Okash Khawaja <osk@fb.com>
Date:   Fri Jul 13 21:57:02 2018 -0700

    bpf: btf: export btf types and name by offset from lib
    
    This patch introduces btf__resolve_type() function and exports two
    existing functions from libbpf. btf__resolve_type follows modifier
    types like const and typedef until it hits a type which actually takes
    up memory, and then returns it. This function follows similar pattern
    to btf__resolve_size but instead of computing size, it just returns
    the type.
    
    These  functions will be used in the followig patch which parses
    information inside array of `struct btf_type *`. btf_name_by_offset is
    used for printing variable names.
    
    Signed-off-by: Okash Khawaja <osk@fb.com>
    Acked-by: Martin KaFai Lau <kafai@fb.com>
    Acked-by: Song Liu <songliubraving@fb.com>
    Reviewed-by: Jakub Kicinski <jakub.kicinski@netronome.com>
    Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>

diff --git a/tools/lib/bpf/btf.h b/tools/lib/bpf/btf.h
index 74bb344035bb..24f361d99a5e 100644
--- a/tools/lib/bpf/btf.h
+++ b/tools/lib/bpf/btf.h
@@ -17,6 +17,9 @@ void btf__free(struct btf *btf);
 struct btf *btf__new(uint8_t *data, uint32_t size, btf_print_fn_t err_log);
 int32_t btf__find_by_name(const struct btf *btf, const char *type_name);
 int64_t btf__resolve_size(const struct btf *btf, uint32_t type_id);
+int btf__resolve_type(const struct btf *btf, __u32 type_id);
 int btf__fd(const struct btf *btf);
+const char *btf__name_by_offset(const struct btf *btf, __u32 offset);
+const struct btf_type *btf__type_by_id(const struct btf *btf, __u32 type_id);
 
 #endif

commit 8a138aed4a807ceb143882fb23a423d524dcdb35
Author: Martin KaFai Lau <kafai@fb.com>
Date:   Wed Apr 18 15:56:05 2018 -0700

    bpf: btf: Add BTF support to libbpf
    
    If the ".BTF" elf section exists, libbpf will try to create
    a btf_fd (through BPF_BTF_LOAD).  If that fails, it will still
    continue loading the bpf prog/map without the BTF.
    
    If the bpf_object has a BTF loaded, it will create a map with the btf_fd.
    libbpf will try to figure out the btf_key_id and btf_value_id of a map by
    finding the BTF type with name "<map_name>_key" and "<map_name>_value".
    If they cannot be found, it will continue without using the BTF.
    
    Signed-off-by: Martin KaFai Lau <kafai@fb.com>
    Acked-by: Alexei Starovoitov <ast@fb.com>
    Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>

diff --git a/tools/lib/bpf/btf.h b/tools/lib/bpf/btf.h
new file mode 100644
index 000000000000..74bb344035bb
--- /dev/null
+++ b/tools/lib/bpf/btf.h
@@ -0,0 +1,22 @@
+/* SPDX-License-Identifier: GPL-2.0 */
+/* Copyright (c) 2018 Facebook */
+
+#ifndef __BPF_BTF_H
+#define __BPF_BTF_H
+
+#include <stdint.h>
+
+#define BTF_ELF_SEC ".BTF"
+
+struct btf;
+
+typedef int (*btf_print_fn_t)(const char *, ...)
+	__attribute__((format(printf, 1, 2)));
+
+void btf__free(struct btf *btf);
+struct btf *btf__new(uint8_t *data, uint32_t size, btf_print_fn_t err_log);
+int32_t btf__find_by_name(const struct btf *btf, const char *type_name);
+int64_t btf__resolve_size(const struct btf *btf, uint32_t type_id);
+int btf__fd(const struct btf *btf);
+
+#endif
