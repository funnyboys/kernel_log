commit d72386fe7a8472f859333b078fd8bb9d254d51f2
Author: Andrii Nakryiko <andriin@fb.com>
Date:   Wed May 15 20:39:27 2019 -0700

    libbpf: move logging helpers into libbpf_internal.h
    
    libbpf_util.h header was recently exposed as public as a dependency of
    xsk.h. In addition to memory barriers, it contained logging helpers,
    which are not supposed to be exposed. This patch moves those into
    libbpf_internal.h, which is kept as an internal header.
    
    Cc: Stanislav Fomichev <sdf@google.com>
    Cc: Daniel Borkmann <daniel@iogearbox.net>
    Fixes: 7080da890984 ("libbpf: add libbpf_util.h to header install.")
    Signed-off-by: Andrii Nakryiko <andriin@fb.com>
    Signed-off-by: Alexei Starovoitov <ast@kernel.org>

diff --git a/tools/lib/bpf/libbpf_util.h b/tools/lib/bpf/libbpf_util.h
index da94c4cb2e4d..59c779c5790c 100644
--- a/tools/lib/bpf/libbpf_util.h
+++ b/tools/lib/bpf/libbpf_util.h
@@ -10,19 +10,6 @@
 extern "C" {
 #endif
 
-extern void libbpf_print(enum libbpf_print_level level,
-			 const char *format, ...)
-	__attribute__((format(printf, 2, 3)));
-
-#define __pr(level, fmt, ...)	\
-do {				\
-	libbpf_print(level, "libbpf: " fmt, ##__VA_ARGS__);	\
-} while (0)
-
-#define pr_warning(fmt, ...)	__pr(LIBBPF_WARN, fmt, ##__VA_ARGS__)
-#define pr_info(fmt, ...)	__pr(LIBBPF_INFO, fmt, ##__VA_ARGS__)
-#define pr_debug(fmt, ...)	__pr(LIBBPF_DEBUG, fmt, ##__VA_ARGS__)
-
 /* Use these barrier functions instead of smp_[rw]mb() when they are
  * used in a libbpf header file. That way they can be built into the
  * application that uses libbpf.

commit 79b1b30e4c209c2ff1ddd6559b41dba1dfc8bcd8
Author: Magnus Karlsson <magnus.karlsson@intel.com>
Date:   Thu Apr 18 09:21:10 2019 +0200

    libbpf: remove compile time warning from libbpf_util.h
    
    Having a helpful compile time warning in libbpf_util.h is not a good
    idea since all warnings are treated as errors. Change this into a
    comment in the code instead.
    
    Fixes: b7e3a28019c9 ("libbpf: remove dependency on barrier.h in xsk.h")
    Signed-off-by: Magnus Karlsson <magnus.karlsson@intel.com>
    Acked-by: Yonghong Song <yhs@fb.com>
    Signed-off-by: Alexei Starovoitov <ast@kernel.org>

diff --git a/tools/lib/bpf/libbpf_util.h b/tools/lib/bpf/libbpf_util.h
index 172b707e007b..da94c4cb2e4d 100644
--- a/tools/lib/bpf/libbpf_util.h
+++ b/tools/lib/bpf/libbpf_util.h
@@ -46,7 +46,7 @@ do {				\
 # define libbpf_smp_mb() asm volatile("dmb ish" : : : "memory")
 # define libbpf_smp_rwmb() libbpf_smp_mb()
 #else
-# warning Architecture missing native barrier functions in libbpf_util.h.
+/* Architecture missing native barrier functions. */
 # define libbpf_smp_rmb() __sync_synchronize()
 # define libbpf_smp_wmb() __sync_synchronize()
 # define libbpf_smp_mb() __sync_synchronize()

commit 2c5935f1b2b642cee8e1562396ec8a7781fc4c6d
Author: Magnus Karlsson <magnus.karlsson@intel.com>
Date:   Tue Apr 16 14:58:12 2019 +0200

    libbpf: optimize barrier for XDP socket rings
    
    The full memory barrier in the XDP socket rings on the consumer side
    between the load of the data and the store of the consumer ring is
    there to protect the store from being executed before the load of the
    data. If this was allowed to happen, the producer might overwrite the
    data field with a new entry before the consumer got the chance to read
    it.
    
    On x86, stores are guaranteed not to be reordered with older loads, so
    it does not need a full memory barrier here. A compile time barrier
    would be enough. This patch introdcues a new primitive in
    libbpf_util.h that implements a new barrier type (libbpf_smp_rwmb)
    hindering stores to be reordered with older loads. It is then used in
    the XDP socket ring access code in libbpf to improve performance.
    
    Signed-off-by: Magnus Karlsson <magnus.karlsson@intel.com>
    Signed-off-by: Alexei Starovoitov <ast@kernel.org>

diff --git a/tools/lib/bpf/libbpf_util.h b/tools/lib/bpf/libbpf_util.h
index 71fbb2898b87..172b707e007b 100644
--- a/tools/lib/bpf/libbpf_util.h
+++ b/tools/lib/bpf/libbpf_util.h
@@ -32,20 +32,25 @@ do {				\
 # define libbpf_smp_wmb() asm volatile("" : : : "memory")
 # define libbpf_smp_mb() \
 	asm volatile("lock; addl $0,-4(%%rsp)" : : : "memory", "cc")
+/* Hinders stores to be observed before older loads. */
+# define libbpf_smp_rwmb() asm volatile("" : : : "memory")
 #elif defined(__aarch64__)
 # define libbpf_smp_rmb() asm volatile("dmb ishld" : : : "memory")
 # define libbpf_smp_wmb() asm volatile("dmb ishst" : : : "memory")
 # define libbpf_smp_mb() asm volatile("dmb ish" : : : "memory")
+# define libbpf_smp_rwmb() libbpf_smp_mb()
 #elif defined(__arm__)
 /* These are only valid for armv7 and above */
 # define libbpf_smp_rmb() asm volatile("dmb ish" : : : "memory")
 # define libbpf_smp_wmb() asm volatile("dmb ishst" : : : "memory")
 # define libbpf_smp_mb() asm volatile("dmb ish" : : : "memory")
+# define libbpf_smp_rwmb() libbpf_smp_mb()
 #else
 # warning Architecture missing native barrier functions in libbpf_util.h.
 # define libbpf_smp_rmb() __sync_synchronize()
 # define libbpf_smp_wmb() __sync_synchronize()
 # define libbpf_smp_mb() __sync_synchronize()
+# define libbpf_smp_rwmb() __sync_synchronize()
 #endif
 
 #ifdef __cplusplus

commit b7e3a28019c92ffe1f55de278c5641de33b6259a
Author: Magnus Karlsson <magnus.karlsson@intel.com>
Date:   Tue Apr 16 14:58:11 2019 +0200

    libbpf: remove dependency on barrier.h in xsk.h
    
    The use of smp_rmb() and smp_wmb() creates a Linux header dependency
    on barrier.h that is unnecessary in most parts. This patch implements
    the two small defines that are needed from barrier.h. As a bonus, the
    new implementations are faster than the default ones as they default
    to sfence and lfence for x86, while we only need a compiler barrier in
    our case. Just as it is when the same ring access code is compiled in
    the kernel.
    
    Fixes: 1cad07884239 ("libbpf: add support for using AF_XDP sockets")
    Signed-off-by: Magnus Karlsson <magnus.karlsson@intel.com>
    Signed-off-by: Alexei Starovoitov <ast@kernel.org>

diff --git a/tools/lib/bpf/libbpf_util.h b/tools/lib/bpf/libbpf_util.h
index 81ecda0cb9c9..71fbb2898b87 100644
--- a/tools/lib/bpf/libbpf_util.h
+++ b/tools/lib/bpf/libbpf_util.h
@@ -23,6 +23,31 @@ do {				\
 #define pr_info(fmt, ...)	__pr(LIBBPF_INFO, fmt, ##__VA_ARGS__)
 #define pr_debug(fmt, ...)	__pr(LIBBPF_DEBUG, fmt, ##__VA_ARGS__)
 
+/* Use these barrier functions instead of smp_[rw]mb() when they are
+ * used in a libbpf header file. That way they can be built into the
+ * application that uses libbpf.
+ */
+#if defined(__i386__) || defined(__x86_64__)
+# define libbpf_smp_rmb() asm volatile("" : : : "memory")
+# define libbpf_smp_wmb() asm volatile("" : : : "memory")
+# define libbpf_smp_mb() \
+	asm volatile("lock; addl $0,-4(%%rsp)" : : : "memory", "cc")
+#elif defined(__aarch64__)
+# define libbpf_smp_rmb() asm volatile("dmb ishld" : : : "memory")
+# define libbpf_smp_wmb() asm volatile("dmb ishst" : : : "memory")
+# define libbpf_smp_mb() asm volatile("dmb ish" : : : "memory")
+#elif defined(__arm__)
+/* These are only valid for armv7 and above */
+# define libbpf_smp_rmb() asm volatile("dmb ish" : : : "memory")
+# define libbpf_smp_wmb() asm volatile("dmb ishst" : : : "memory")
+# define libbpf_smp_mb() asm volatile("dmb ish" : : : "memory")
+#else
+# warning Architecture missing native barrier functions in libbpf_util.h.
+# define libbpf_smp_rmb() __sync_synchronize()
+# define libbpf_smp_wmb() __sync_synchronize()
+# define libbpf_smp_mb() __sync_synchronize()
+#endif
+
 #ifdef __cplusplus
 } /* extern "C" */
 #endif

commit 9d100a19ffa519b17a0e998918337da5386e47fb
Author: Yonghong Song <yhs@fb.com>
Date:   Fri Feb 1 16:14:15 2019 -0800

    tools/bpf: print out btf log at LIBBPF_WARN level
    
    Currently, the btf log is allocated and printed out in case
    of error at LIBBPF_DEBUG level.
    Such logs from kernel are very important for debugging.
    For example, bpf syscall BPF_PROG_LOAD command can get
    verifier logs back to user space. In function load_program()
    of libbpf.c, the log buffer is allocated unconditionally
    and printed out at pr_warning() level.
    
    Let us do the similar thing here for btf. Allocate buffer
    unconditionally and print out error logs at pr_warning() level.
    This can reduce one global function and
    optimize for common situations where pr_warning()
    is activated either by default or by user supplied
    debug output function.
    
    Signed-off-by: Yonghong Song <yhs@fb.com>
    Signed-off-by: Alexei Starovoitov <ast@kernel.org>

diff --git a/tools/lib/bpf/libbpf_util.h b/tools/lib/bpf/libbpf_util.h
index 0fdc3b1d0e33..81ecda0cb9c9 100644
--- a/tools/lib/bpf/libbpf_util.h
+++ b/tools/lib/bpf/libbpf_util.h
@@ -14,8 +14,6 @@ extern void libbpf_print(enum libbpf_print_level level,
 			 const char *format, ...)
 	__attribute__((format(printf, 2, 3)));
 
-extern bool libbpf_print_level_available(enum libbpf_print_level level);
-
 #define __pr(level, fmt, ...)	\
 do {				\
 	libbpf_print(level, "libbpf: " fmt, ##__VA_ARGS__);	\

commit 8461ef8b7ef286212ca954d8b82dac3ceecb219d
Author: Yonghong Song <yhs@fb.com>
Date:   Fri Feb 1 16:14:14 2019 -0800

    tools/bpf: move libbpf pr_* debug print functions to headers
    
    A global function libbpf_print, which is invisible
    outside the shared library, is defined to print based
    on levels. The pr_warning, pr_info and pr_debug
    macros are moved into the newly created header
    common.h. So any .c file including common.h can
    use these macros directly.
    
    Currently btf__new and btf_ext__new API has an argument getting
    __pr_debug function pointer into btf.c so the debugging information
    can be printed there. This patch removed this parameter
    from btf__new and btf_ext__new and directly using pr_debug in btf.c.
    
    Another global function libbpf_print_level_available, also
    invisible outside the shared library, can test
    whether a particular level debug printing is
    available or not. It is used in btf.c to
    test whether DEBUG level debug printing is availabl or not,
    based on which the log buffer will be allocated when loading
    btf to the kernel.
    
    Signed-off-by: Yonghong Song <yhs@fb.com>
    Signed-off-by: Alexei Starovoitov <ast@kernel.org>

diff --git a/tools/lib/bpf/libbpf_util.h b/tools/lib/bpf/libbpf_util.h
new file mode 100644
index 000000000000..0fdc3b1d0e33
--- /dev/null
+++ b/tools/lib/bpf/libbpf_util.h
@@ -0,0 +1,32 @@
+/* SPDX-License-Identifier: (LGPL-2.1 OR BSD-2-Clause) */
+/* Copyright (c) 2019 Facebook */
+
+#ifndef __LIBBPF_LIBBPF_UTIL_H
+#define __LIBBPF_LIBBPF_UTIL_H
+
+#include <stdbool.h>
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+
+extern void libbpf_print(enum libbpf_print_level level,
+			 const char *format, ...)
+	__attribute__((format(printf, 2, 3)));
+
+extern bool libbpf_print_level_available(enum libbpf_print_level level);
+
+#define __pr(level, fmt, ...)	\
+do {				\
+	libbpf_print(level, "libbpf: " fmt, ##__VA_ARGS__);	\
+} while (0)
+
+#define pr_warning(fmt, ...)	__pr(LIBBPF_WARN, fmt, ##__VA_ARGS__)
+#define pr_info(fmt, ...)	__pr(LIBBPF_INFO, fmt, ##__VA_ARGS__)
+#define pr_debug(fmt, ...)	__pr(LIBBPF_DEBUG, fmt, ##__VA_ARGS__)
+
+#ifdef __cplusplus
+} /* extern "C" */
+#endif
+
+#endif
