commit c452833387624d1990c9bbb0ee1e98c10c147478
Author: Arnaldo Carvalho de Melo <acme@redhat.com>
Date:   Tue Feb 11 11:58:56 2020 -0300

    tools include UAPI: Sync x86's syscalls_64.tbl, generic unistd.h and fcntl.h to pick up openat2 and pidfd_getfd
    
      fddb5d430ad9 ("open: introduce openat2(2) syscall")
      9a2cef09c801 ("arch: wire up pidfd_getfd syscall")
    
    We also need to grab a copy of uapi/linux/openat2.h since it is now
    needed by fcntl.h, add it to tools/perf/check_headers.h.
    
      $ diff -u tools/perf/arch/x86/entry/syscalls/syscall_64.tbl arch/x86/entry/syscalls/syscall_64.tbl
      --- tools/perf/arch/x86/entry/syscalls/syscall_64.tbl 2019-12-20 16:43:57.662429958 -0300
      +++ arch/x86/entry/syscalls/syscall_64.tbl    2020-02-10 16:36:22.070012468 -0300
      @@ -357,6 +357,8 @@
       433  common  fspick                  __x64_sys_fspick
       434  common  pidfd_open              __x64_sys_pidfd_open
       435  common  clone3                  __x64_sys_clone3/ptregs
      +437  common  openat2                 __x64_sys_openat2
      +438  common  pidfd_getfd             __x64_sys_pidfd_getfd
    
       #
       # x32-specific system call numbers start at 512 to avoid cache impact
      $
    
    Update tools/'s copy of that file:
    
      $ cp arch/x86/entry/syscalls/syscall_64.tbl tools/perf/arch/x86/entry/syscalls/syscall_64.tbl
    
    See the result:
    
      $ diff -u /tmp/build/perf/arch/x86/include/generated/asm/syscalls_64.c.before /tmp/build/perf/arch/x86/include/generated/asm/syscalls_64.c
      --- /tmp/build/perf/arch/x86/include/generated/asm/syscalls_64.c.before       2020-02-10 16:42:59.010636041 -0300
      +++ /tmp/build/perf/arch/x86/include/generated/asm/syscalls_64.c      2020-02-10 16:43:24.149958337 -0300
      @@ -346,5 +346,7 @@
            [433] = "fspick",
            [434] = "pidfd_open",
            [435] = "clone3",
      +     [437] = "openat2",
      +     [438] = "pidfd_getfd",
       };
      -#define SYSCALLTBL_x86_64_MAX_ID 435
      +#define SYSCALLTBL_x86_64_MAX_ID 438
      $
    
    Now one can use:
    
      perf trace -e openat2,pidfd_getfd
    
    To get just those syscalls or use in things like:
    
      perf trace -e open*
    
    To get all the open variant (open, openat, openat2, etc) or:
    
      perf trace pidfd*
    
    To get the pidfd syscalls.
    
    Cc: Adrian Hunter <adrian.hunter@intel.com>
    Cc: Aleksa Sarai <cyphar@cyphar.com>
    Cc: Al Viro <viro@zeniv.linux.org.uk>
    Cc: Christian Brauner <christian.brauner@ubuntu.com>
    Cc: Jiri Olsa <jolsa@kernel.org>
    Cc: Namhyung Kim <namhyung@kernel.org>
    Cc: Sargun Dhillon <sargun@sargun.me>
    Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>

diff --git a/tools/include/uapi/linux/openat2.h b/tools/include/uapi/linux/openat2.h
new file mode 100644
index 000000000000..58b1eb711360
--- /dev/null
+++ b/tools/include/uapi/linux/openat2.h
@@ -0,0 +1,39 @@
+/* SPDX-License-Identifier: GPL-2.0 WITH Linux-syscall-note */
+#ifndef _UAPI_LINUX_OPENAT2_H
+#define _UAPI_LINUX_OPENAT2_H
+
+#include <linux/types.h>
+
+/*
+ * Arguments for how openat2(2) should open the target path. If only @flags and
+ * @mode are non-zero, then openat2(2) operates very similarly to openat(2).
+ *
+ * However, unlike openat(2), unknown or invalid bits in @flags result in
+ * -EINVAL rather than being silently ignored. @mode must be zero unless one of
+ * {O_CREAT, O_TMPFILE} are set.
+ *
+ * @flags: O_* flags.
+ * @mode: O_CREAT/O_TMPFILE file mode.
+ * @resolve: RESOLVE_* flags.
+ */
+struct open_how {
+	__u64 flags;
+	__u64 mode;
+	__u64 resolve;
+};
+
+/* how->resolve flags for openat2(2). */
+#define RESOLVE_NO_XDEV		0x01 /* Block mount-point crossings
+					(includes bind-mounts). */
+#define RESOLVE_NO_MAGICLINKS	0x02 /* Block traversal through procfs-style
+					"magic-links". */
+#define RESOLVE_NO_SYMLINKS	0x04 /* Block traversal through all symlinks
+					(implies OEXT_NO_MAGICLINKS) */
+#define RESOLVE_BENEATH		0x08 /* Block "lexical" trickery like
+					"..", symlinks, and absolute
+					paths which escape the dirfd. */
+#define RESOLVE_IN_ROOT		0x10 /* Make all jumps to "/" and ".."
+					be scoped inside the dirfd
+					(similar to chroot(2)). */
+
+#endif /* _UAPI_LINUX_OPENAT2_H */
