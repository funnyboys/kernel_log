commit b24413180f5600bcb3bb70fbed5cf186b60864bd
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Wed Nov 1 15:07:57 2017 +0100

    License cleanup: add SPDX GPL-2.0 license identifier to files with no license
    
    Many source files in the tree are missing licensing information, which
    makes it harder for compliance tools to determine the correct license.
    
    By default all files without license information are under the default
    license of the kernel, which is GPL version 2.
    
    Update the files which contain no license information with the 'GPL-2.0'
    SPDX license identifier.  The SPDX identifier is a legally binding
    shorthand, which can be used instead of the full boiler plate text.
    
    This patch is based on work done by Thomas Gleixner and Kate Stewart and
    Philippe Ombredanne.
    
    How this work was done:
    
    Patches were generated and checked against linux-4.14-rc6 for a subset of
    the use cases:
     - file had no licensing information it it.
     - file was a */uapi/* one with no licensing information in it,
     - file was a */uapi/* one with existing licensing information,
    
    Further patches will be generated in subsequent months to fix up cases
    where non-standard license headers were used, and references to license
    had to be inferred by heuristics based on keywords.
    
    The analysis to determine which SPDX License Identifier to be applied to
    a file was done in a spreadsheet of side by side results from of the
    output of two independent scanners (ScanCode & Windriver) producing SPDX
    tag:value files created by Philippe Ombredanne.  Philippe prepared the
    base worksheet, and did an initial spot review of a few 1000 files.
    
    The 4.13 kernel was the starting point of the analysis with 60,537 files
    assessed.  Kate Stewart did a file by file comparison of the scanner
    results in the spreadsheet to determine which SPDX license identifier(s)
    to be applied to the file. She confirmed any determination that was not
    immediately clear with lawyers working with the Linux Foundation.
    
    Criteria used to select files for SPDX license identifier tagging was:
     - Files considered eligible had to be source code files.
     - Make and config files were included as candidates if they contained >5
       lines of source
     - File already had some variant of a license header in it (even if <5
       lines).
    
    All documentation files were explicitly excluded.
    
    The following heuristics were used to determine which SPDX license
    identifiers to apply.
    
     - when both scanners couldn't find any license traces, file was
       considered to have no license information in it, and the top level
       COPYING file license applied.
    
       For non */uapi/* files that summary was:
    
       SPDX license identifier                            # files
       ---------------------------------------------------|-------
       GPL-2.0                                              11139
    
       and resulted in the first patch in this series.
    
       If that file was a */uapi/* path one, it was "GPL-2.0 WITH
       Linux-syscall-note" otherwise it was "GPL-2.0".  Results of that was:
    
       SPDX license identifier                            # files
       ---------------------------------------------------|-------
       GPL-2.0 WITH Linux-syscall-note                        930
    
       and resulted in the second patch in this series.
    
     - if a file had some form of licensing information in it, and was one
       of the */uapi/* ones, it was denoted with the Linux-syscall-note if
       any GPL family license was found in the file or had no licensing in
       it (per prior point).  Results summary:
    
       SPDX license identifier                            # files
       ---------------------------------------------------|------
       GPL-2.0 WITH Linux-syscall-note                       270
       GPL-2.0+ WITH Linux-syscall-note                      169
       ((GPL-2.0 WITH Linux-syscall-note) OR BSD-2-Clause)    21
       ((GPL-2.0 WITH Linux-syscall-note) OR BSD-3-Clause)    17
       LGPL-2.1+ WITH Linux-syscall-note                      15
       GPL-1.0+ WITH Linux-syscall-note                       14
       ((GPL-2.0+ WITH Linux-syscall-note) OR BSD-3-Clause)    5
       LGPL-2.0+ WITH Linux-syscall-note                       4
       LGPL-2.1 WITH Linux-syscall-note                        3
       ((GPL-2.0 WITH Linux-syscall-note) OR MIT)              3
       ((GPL-2.0 WITH Linux-syscall-note) AND MIT)             1
    
       and that resulted in the third patch in this series.
    
     - when the two scanners agreed on the detected license(s), that became
       the concluded license(s).
    
     - when there was disagreement between the two scanners (one detected a
       license but the other didn't, or they both detected different
       licenses) a manual inspection of the file occurred.
    
     - In most cases a manual inspection of the information in the file
       resulted in a clear resolution of the license that should apply (and
       which scanner probably needed to revisit its heuristics).
    
     - When it was not immediately clear, the license identifier was
       confirmed with lawyers working with the Linux Foundation.
    
     - If there was any question as to the appropriate license identifier,
       the file was flagged for further research and to be revisited later
       in time.
    
    In total, over 70 hours of logged manual review was done on the
    spreadsheet to determine the SPDX license identifiers to apply to the
    source files by Kate, Philippe, Thomas and, in some cases, confirmation
    by lawyers working with the Linux Foundation.
    
    Kate also obtained a third independent scan of the 4.13 code base from
    FOSSology, and compared selected files where the other two scanners
    disagreed against that SPDX file, to see if there was new insights.  The
    Windriver scanner is based on an older version of FOSSology in part, so
    they are related.
    
    Thomas did random spot checks in about 500 files from the spreadsheets
    for the uapi headers and agreed with SPDX license identifier in the
    files he inspected. For the non-uapi files Thomas did random spot checks
    in about 15000 files.
    
    In initial set of patches against 4.14-rc6, 3 files were found to have
    copy/paste license identifier errors, and have been fixed to reflect the
    correct identifier.
    
    Additionally Philippe spent 10 hours this week doing a detailed manual
    inspection and review of the 12,461 patched files from the initial patch
    version early this week with:
     - a full scancode scan run, collecting the matched texts, detected
       license ids and scores
     - reviewing anything where there was a license detected (about 500+
       files) to ensure that the applied SPDX license was correct
     - reviewing anything where there was no detection but the patch license
       was not GPL-2.0 WITH Linux-syscall-note to ensure that the applied
       SPDX license was correct
    
    This produced a worksheet with 20 files needing minor correction.  This
    worksheet was then exported into 3 different .csv files for the
    different types of files to be modified.
    
    These .csv files were then reviewed by Greg.  Thomas wrote a script to
    parse the csv files and add the proper SPDX tag to the file, in the
    format that the file expected.  This script was further refined by Greg
    based on the output to detect more types of files automatically and to
    distinguish between header and source .c files (which need different
    comment types.)  Finally Greg ran the script using the .csv files to
    generate the patches.
    
    Reviewed-by: Kate Stewart <kstewart@linuxfoundation.org>
    Reviewed-by: Philippe Ombredanne <pombredanne@nexb.com>
    Reviewed-by: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/tools/perf/pmu-events/json.h b/tools/perf/pmu-events/json.h
index 278ebd32cfb6..fbcd5a0590ad 100644
--- a/tools/perf/pmu-events/json.h
+++ b/tools/perf/pmu-events/json.h
@@ -1,3 +1,4 @@
+/* SPDX-License-Identifier: GPL-2.0 */
 #ifndef JSON_H
 #define JSON_H 1
 

commit 80eeb67fe577aa76b2d1bb5b029bca097f0f25bc
Author: Andi Kleen <ak@linux.intel.com>
Date:   Mon Sep 19 17:39:33 2016 -0300

    perf jevents: Program to convert JSON file
    
    This is a modified version of an earlier patch by Andi Kleen.
    
    We expect architectures to create JSON files describing the performance
    monitoring (PMU) events that each CPU model/family of the architecture
    supports.
    
    Following is an example of the JSON file entry for an x86 event:
    
            [
            ...
            {
            "EventCode": "0x00",
            "UMask": "0x01",
            "EventName": "INST_RETIRED.ANY",
            "BriefDescription": "Instructions retired from execution.",
            "PublicDescription": "Instructions retired from execution.",
            "Counter": "Fixed counter 1",
            "CounterHTOff": "Fixed counter 1",
            "SampleAfterValue": "2000003",
            "SampleAfterValue": "2000003",
            "MSRIndex": "0",
            "MSRValue": "0",
            "TakenAlone": "0",
            "CounterMask": "0",
            "Invert": "0",
            "AnyThread": "0",
            "EdgeDetect": "0",
            "PEBS": "0",
            "PRECISE_STORE": "0",
            "Errata": "null",
            "Offcore": "0"
            },
            ...
    
            ]
    
    All the PMU events supported by a CPU model/family must be grouped into
    "topics" such as "Pipelining", "Floating-point", "Virtual-memory" etc.
    
    All events belonging to a topic must be placed in a separate JSON file
    (eg: "Pipelining.json") and all the topic JSON files for a CPU model must
    be in a separate directory.
    
            Eg: for the CPU model "Silvermont_core":
    
            $ ls tools/perf/pmu-events/arch/x86/Silvermont_core
            Floating-point.json
            Memory.json
            Other.json
            Pipelining.json
            Virtualmemory.json
    
    Finally, to allow multiple CPU models to share a single set of JSON files,
    architectures must provide a mapping between a model and its set of events:
    
            $ grep Silvermont tools/perf/pmu-events/arch/x86/mapfile.csv
            GenuineIntel-6-4D,V13,Silvermont_core,core
            GenuineIntel-6-4C,V13,Silvermont_core,core
    
    which maps each CPU, identified by [vendor, family, model, version, type]
    to a directory of JSON files. Thus two (or more) CPU models support the
    set of PMU events listed in the directory.
    
            tools/perf/pmu-events/arch/x86/Silvermont_core/
    
    Given this organization of files, the program, jevents:
    
            - locates all JSON files for each CPU-model of the architecture,
    
            - parses all JSON files for the CPU-model and generates a C-style
              "PMU-events table" (pmu-events.c) for the model
    
            - locates a mapfile for the architecture
    
            - builds a global table, mapping each model of CPU to the corresponding
              PMU-events table.
    
    The 'pmu-events.c' is generated when building perf and added to libperf.a.
    The global table pmu_events_map[] table in this pmu-events.c will be used
    in perf in a follow-on patch.
    
    If the architecture does not have any JSON files or there is an error in
    processing them, an empty mapping file is created. This would allow the
    build of perf to proceed even if we are not able to provide aliases for
    events.
    
    The parser for JSON files allows parsing Intel style JSON event files. This
    allows to use an Intel event list directly with perf. The Intel event lists
    can be quite large and are too big to store in unswappable kernel memory.
    
    The conversion from JSON to C-style is straight forward.  The parser knows
    (very little) Intel specific information, and can be easily extended to
    handle fields for other CPUs.
    
    The parser code is partially shared with an independent parsing library,
    which is 2-clause BSD licensed. To avoid any conflicts I marked those
    files as BSD licensed too. As part of perf they become GPLv2.
    
    Committer notes:
    
    Fixes:
    
    1) Limit maxfds to 512 to avoid nftd() segfaulting on alloca() with a
       big rlim_max, as in docker containers - acme
    
    2) Make jevents a hostprog, supporting cross compilation - jolsa
    
    3) Use HOSTCC for jevents final step - acme
    
    4) Define _GNU_SOURCE for asprintf, as we can't use CC's EXTRA_CFLAGS,
      that has to have --sysroot on the Android NDK 24 - acme
    
    5) Removed $(srctree)/tools/perf/pmu-events/pmu-events.c from the
       'clean' target, it is generated on $(OUTPUT)pmu-events/pmu-events.c,
       which is already taken care of in the original patch - acme
    
    Signed-off-by: Andi Kleen <ak@linux.intel.com>
    Signed-off-by: Jiri Olsa <jolsa@redhat.com>
    Signed-off-by: Sukadev Bhattiprolu <sukadev@linux.vnet.ibm.com>
    Tested-by: Arnaldo Carvalho de Melo <acme@redhat.com>
    Acked-by: Ingo Molnar <mingo@kernel.org>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Madhavan Srinivasan <maddy@linux.vnet.ibm.com>
    Cc: linuxppc-dev@lists.ozlabs.org
    Link: http://lkml.kernel.org/r/1473978296-20712-3-git-send-email-sukadev@linux.vnet.ibm.com
    Link: http://lkml.kernel.org/r/20160927141846.GA6589@krava
    Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>

diff --git a/tools/perf/pmu-events/json.h b/tools/perf/pmu-events/json.h
index f2745c7a87bc..278ebd32cfb6 100644
--- a/tools/perf/pmu-events/json.h
+++ b/tools/perf/pmu-events/json.h
@@ -20,6 +20,12 @@ extern int eprintf(int level, int var, const char *fmt, ...);
 #define pr_err(fmt, ...) \
 	eprintf(0, verbose, pr_fmt(fmt), ##__VA_ARGS__)
 
+#define pr_info(fmt, ...) \
+	eprintf(1, verbose, pr_fmt(fmt), ##__VA_ARGS__)
+
+#define pr_debug(fmt, ...) \
+	eprintf(2, verbose, pr_fmt(fmt), ##__VA_ARGS__)
+
 #ifndef roundup
 #define roundup(x, y) (                                \
 {                                                      \

commit 867a979a83d38fb82c4e7534a0281a02ef1700a3
Author: Andi Kleen <ak@linux.intel.com>
Date:   Thu Sep 15 15:24:38 2016 -0700

    perf tools: Add jsmn `jasmine' JSON parser
    
    I need a JSON parser. This adds the simplest JSON parser I could find --
    Serge Zaitsev's jsmn `jasmine' -- to the perf library. I merely
    converted it to (mostly) Linux style and added support for non 0
    terminated input.
    
    The parser is quite straight forward and does not copy any data, just
    returns tokens with offsets into the input buffer. So it's relatively
    efficient and simple to use.
    
    The code is not fully checkpatch clean, but I didn't want to completely
    fork the upstream code.
    
    Original source: http://zserge.bitbucket.org/jsmn.html
    
    In addition I added a simple wrapper that mmaps a json file and provides
    some straight forward access functions.
    
    Used in follow-on patches to parse event files.
    
    Signed-off-by: Andi Kleen <ak@linux.intel.com>
    Acked-by: Ingo Molnar <mingo@kernel.org>
    Acked-by: Jiri Olsa <jolsa@redhat.com>
    Acked-by: Namhyung Kim <namhyung@kernel.org>
    Cc: Madhavan Srinivasan <maddy@linux.vnet.ibm.com>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: linuxppc-dev@lists.ozlabs.org
    Link: http://lkml.kernel.org/r/1473978296-20712-2-git-send-email-sukadev@linux.vnet.ibm.com
    Signed-off-by: Sukadev Bhattiprolu <sukadev@linux.vnet.ibm.com>
    [ Use fcntl.h instead of sys/fcntl.h to fix the build on Alpine Linux 3.4/musl libc,
      use stdbool.h to avoid clashing with 'bool' typedef there ]
    Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>

diff --git a/tools/perf/pmu-events/json.h b/tools/perf/pmu-events/json.h
new file mode 100644
index 000000000000..f2745c7a87bc
--- /dev/null
+++ b/tools/perf/pmu-events/json.h
@@ -0,0 +1,32 @@
+#ifndef JSON_H
+#define JSON_H 1
+
+#include "jsmn.h"
+
+jsmntok_t *parse_json(const char *fn, char **map, size_t *size, int *len);
+void free_json(char *map, size_t size, jsmntok_t *tokens);
+int json_line(char *map, jsmntok_t *t);
+const char *json_name(jsmntok_t *t);
+int json_streq(char *map, jsmntok_t *t, const char *s);
+int json_len(jsmntok_t *t);
+
+extern int verbose;
+
+#include <stdbool.h>
+
+extern int eprintf(int level, int var, const char *fmt, ...);
+#define pr_fmt(fmt)	fmt
+
+#define pr_err(fmt, ...) \
+	eprintf(0, verbose, pr_fmt(fmt), ##__VA_ARGS__)
+
+#ifndef roundup
+#define roundup(x, y) (                                \
+{                                                      \
+        const typeof(y) __y = y;                       \
+        (((x) + (__y - 1)) / __y) * __y;               \
+}                                                      \
+)
+#endif
+
+#endif
