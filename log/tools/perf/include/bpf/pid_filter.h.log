commit 3b573bf318d894b4290e194c4d7dbcba8c1f6ead
Author: Arnaldo Carvalho de Melo <acme@redhat.com>
Date:   Fri Feb 14 16:21:40 2020 -0300

    perf bpf: Remove bpf/ subdir from bpf.h headers used to build bpf events
    
    The bpf.h file needed gets installed in /usr/lib/include/perf/bpf/bpf.h,
    and /usr/lib/include/perf/ is added to the include path passed to clang
    to build the eBPF bytecode, so just remove "bpf/", its directly in the
    path passed already. This was working by accident, fix it.
    
    I.e. now this is back working:
    
      # cat /home/acme/git/perf/tools/perf/examples/bpf/hello.c
      #include <stdio.h>
    
      int syscall_enter(openat)(void *args)
      {
            puts("Hello, world\n");
            return 0;
      }
    
      license(GPL);
      # perf trace -e /home/acme/git/perf/tools/perf/examples/bpf/hello.c
           0.000 pickup/21493 __bpf_stdout__(Hello, world)
          56.462 sh/13539 __bpf_stdout__(Hello, world)
          56.536 sh/13539 __bpf_stdout__(Hello, world)
          56.673 sh/13539 __bpf_stdout__(Hello, world)
          56.781 sh/13539 __bpf_stdout__(Hello, world)
          56.707 perf/13182 __bpf_stdout__(Hello, world)
          56.849 perf/13182 __bpf_stdout__(Hello, world)
      ^C
      #
    
    Cc: Adrian Hunter <adrian.hunter@intel.com>
    Cc: Jiri Olsa <jolsa@kernel.org>
    Cc: Namhyung Kim <namhyung@kernel.org>
    Link: https://lkml.kernel.org/n/tip-d9myswhgo8gfi3vmehdqpxa7@git.kernel.org
    Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>

diff --git a/tools/perf/include/bpf/pid_filter.h b/tools/perf/include/bpf/pid_filter.h
index 607189a315b2..6e61c4bdf548 100644
--- a/tools/perf/include/bpf/pid_filter.h
+++ b/tools/perf/include/bpf/pid_filter.h
@@ -3,7 +3,7 @@
 #ifndef _PERF_BPF_PID_FILTER_
 #define _PERF_BPF_PID_FILTER_
 
-#include <bpf/bpf.h>
+#include <bpf.h>
 
 #define pid_filter(name) pid_map(name, bool)
 

commit 521fe8bb5874963d5f6fd58d5c5ad80fbc9c6b1c
Author: Toke Høiland-Jørgensen <toke@redhat.com>
Date:   Mon Jan 20 14:06:48 2020 +0100

    perf: Use consistent include paths for libbpf
    
    Fix perf to include libbpf header files with the bpf/ prefix, to
    be consistent with external users of the library.
    
    Signed-off-by: Toke Høiland-Jørgensen <toke@redhat.com>
    Signed-off-by: Alexei Starovoitov <ast@kernel.org>
    Acked-by: Andrii Nakryiko <andriin@fb.com>
    Link: https://lore.kernel.org/bpf/157952560797.1683545.7685921032671386301.stgit@toke.dk

diff --git a/tools/perf/include/bpf/pid_filter.h b/tools/perf/include/bpf/pid_filter.h
index 6e61c4bdf548..607189a315b2 100644
--- a/tools/perf/include/bpf/pid_filter.h
+++ b/tools/perf/include/bpf/pid_filter.h
@@ -3,7 +3,7 @@
 #ifndef _PERF_BPF_PID_FILTER_
 #define _PERF_BPF_PID_FILTER_
 
-#include <bpf.h>
+#include <bpf/bpf.h>
 
 #define pid_filter(name) pid_map(name, bool)
 

commit 8008aab0962ea68cc00d15e8d7b0637b48837a40
Author: Arnaldo Carvalho de Melo <acme@redhat.com>
Date:   Tue Nov 6 15:50:36 2018 -0300

    perf bpf: Add simple pid_filter class accessible to BPF proggies
    
    Will be used in the augmented_raw_syscalls.c to implement 'perf trace
    --filter-pids'.
    
    Cc: Adrian Hunter <adrian.hunter@intel.com>
    Cc: David Ahern <dsahern@gmail.com>
    Cc: Jiri Olsa <jolsa@kernel.org>
    Cc: Namhyung Kim <namhyung@kernel.org>
    Cc: Wang Nan <wangnan0@huawei.com>
    Link: https://lkml.kernel.org/n/tip-9sybmz4vchlbpqwx2am13h9e@git.kernel.org
    Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>

diff --git a/tools/perf/include/bpf/pid_filter.h b/tools/perf/include/bpf/pid_filter.h
new file mode 100644
index 000000000000..6e61c4bdf548
--- /dev/null
+++ b/tools/perf/include/bpf/pid_filter.h
@@ -0,0 +1,21 @@
+// SPDX-License-Identifier: LGPL-2.1
+
+#ifndef _PERF_BPF_PID_FILTER_
+#define _PERF_BPF_PID_FILTER_
+
+#include <bpf.h>
+
+#define pid_filter(name) pid_map(name, bool)
+
+static int pid_filter__add(struct bpf_map *pids, pid_t pid)
+{
+	bool value = true;
+	return bpf_map_update_elem(pids, &pid, &value, BPF_NOEXIST);
+}
+
+static bool pid_filter__has(struct bpf_map *pids, pid_t pid)
+{
+	return bpf_map_lookup_elem(pids, &pid) != NULL;
+}
+
+#endif // _PERF_BPF_PID_FILTER_
