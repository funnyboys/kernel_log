commit fb7068e73d2c24ba381938004ed0f285341ef1ba
Author: Arnaldo Carvalho de Melo <acme@redhat.com>
Date:   Tue Dec 18 11:05:56 2018 -0300

    perf trace beauty: Beautify arch_prctl()'s arguments
    
    This actually so far, AFAIK is available only in x86, so the code was
    put in place with x86 prefixes, in arches where it is not available it
    will just not be called, so no further mechanisms are needed at this
    time.
    
    Later, when other arches wire this up, we'll just look at the uname
    (live sessions) or perf_env data in the perf.data header to auto-wire
    the right beautifier.
    
    With this the output is the same as produced by 'strace' when used with
    the following ~/.perfconfig:
    
      # cat ~/.perfconfig
      [llvm]
            dump-obj = true
      [trace]
              add_events = /home/acme/git/perf/tools/perf/examples/bpf/augmented_raw_syscalls.o
              show_zeros = yes
              show_duration = no
              no_inherit = yes
              show_timestamp = no
              show_arg_names = no
              args_alignment = -40
              show_prefix = yes
      #
    
    And, on fedora 29, since the string tables are generated from the kernel
    sources, we don't know about 0x3001, just like strace:
    
      --- /tmp/strace 2018-12-17 11:22:08.707586721 -0300
      +++ /tmp/trace  2018-12-18 11:11:32.037512729 -0300
      @@ -1,49 +1,49 @@
      -arch_prctl(0x3001 /* ARCH_??? */, 0x7ffc8a92dc80) = -1 EINVAL (Invalid argument)
      +arch_prctl(0x3001 /* ARCH_??? */, 0x7ffe4eb93ae0) = -1 EINVAL (Invalid argument)
      -arch_prctl(ARCH_SET_FS, 0x7faf6700f540) = 0
      +arch_prctl(ARCH_SET_FS, 0x7fb507364540) = 0
    
    And that seems to be related to the CET/Shadow Stack feature, that
    userland in Fedora 29 (glibc 2.28) are querying the kernel about, that
    0x3001 seems to be ARCH_CET_STATUS, I'll check the situation and test
    with a fedora 29 kernel to see if the other codes are used.
    
    A diff that ignores the different pointers for different runs needs to
    be put in place in the upcoming regression tests comparing 'perf trace's
    output to strace's.
    
    Cc: Adrian Hunter <adrian.hunter@intel.com>
    Cc: Jiri Olsa <jolsa@kernel.org>
    Cc: Luis Cláudio Gonçalves <lclaudio@redhat.com>
    Cc: Namhyung Kim <namhyung@kernel.org>
    Cc: Wang Nan <wangnan0@huawei.com>
    Link: https://lkml.kernel.org/n/tip-73a9prs8ktkrt97trtdmdjs8@git.kernel.org
    Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>

diff --git a/tools/perf/trace/beauty/arch_prctl.c b/tools/perf/trace/beauty/arch_prctl.c
new file mode 100644
index 000000000000..fe022ca67e60
--- /dev/null
+++ b/tools/perf/trace/beauty/arch_prctl.c
@@ -0,0 +1,33 @@
+// SPDX-License-Identifier: LGPL-2.1
+/*
+ * trace/beauty/arch_prctl.c
+ *
+ *  Copyright (C) 2018, Red Hat Inc, Arnaldo Carvalho de Melo <acme@redhat.com>
+ */
+
+#include "trace/beauty/beauty.h"
+#include <linux/kernel.h>
+
+#include "trace/beauty/generated/x86_arch_prctl_code_array.c"
+
+static DEFINE_STRARRAY_OFFSET(x86_arch_prctl_codes_1, "ARCH_", x86_arch_prctl_codes_1_offset);
+static DEFINE_STRARRAY_OFFSET(x86_arch_prctl_codes_2, "ARCH_", x86_arch_prctl_codes_2_offset);
+
+static struct strarray *x86_arch_prctl_codes[] = {
+	&strarray__x86_arch_prctl_codes_1,
+	&strarray__x86_arch_prctl_codes_2,
+};
+
+static DEFINE_STRARRAYS(x86_arch_prctl_codes);
+
+static size_t x86_arch_prctl__scnprintf_code(int option, char *bf, size_t size, bool show_prefix)
+{
+	return strarrays__scnprintf(&strarrays__x86_arch_prctl_codes, bf, size, "%#x", show_prefix, option);
+}
+
+size_t syscall_arg__scnprintf_x86_arch_prctl_code(char *bf, size_t size, struct syscall_arg *arg)
+{
+	unsigned long code = arg->val;
+
+	return x86_arch_prctl__scnprintf_code(code, bf, size, arg->show_string_prefix);
+}
