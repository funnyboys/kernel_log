commit c65c83ffe904590162bd762be185ac4d53ce5a85
Author: Arnaldo Carvalho de Melo <acme@redhat.com>
Date:   Fri Dec 14 17:06:47 2018 -0300

    perf trace: Allow asking for not suppressing common string prefixes
    
    So far we've been suppressing common stuff such as "MAP_" in the mmap
    flags, showing "SHARED" instead of "MAP_SHARED", allow for those
    prefixes (and a few suffixes) to be shown:
    
      # trace -e *map,open*,*seek sleep 1
      openat("/etc/ld.so.cache", CLOEXEC) = 3
      mmap(0, 109093, READ, PRIVATE, 3, 0) = 0x7ff61c695000
      openat("/lib64/libc.so.6", CLOEXEC) = 3
      lseek(3, 792, SET) = 792
      mmap(0, 8192, READ|WRITE, PRIVATE|ANONYMOUS) = 0x7ff61c693000
      lseek(3, 792, SET) = 792
      lseek(3, 864, SET) = 864
      mmap(0, 1857568, READ, PRIVATE|DENYWRITE, 3, 0) = 0x7ff61c4cd000
      mmap(0x7ff61c4ef000, 1363968, EXEC|READ, PRIVATE|FIXED|DENYWRITE, 3, 139264) = 0x7ff61c4ef000
      mmap(0x7ff61c63c000, 311296, READ, PRIVATE|FIXED|DENYWRITE, 3, 1503232) = 0x7ff61c63c000
      mmap(0x7ff61c689000, 24576, READ|WRITE, PRIVATE|FIXED|DENYWRITE, 3, 1814528) = 0x7ff61c689000
      mmap(0x7ff61c68f000, 14368, READ|WRITE, PRIVATE|FIXED|ANONYMOUS) = 0x7ff61c68f000
      munmap(0x7ff61c695000, 109093) = 0
      openat("/usr/lib/locale/locale-archive", CLOEXEC) = 3
      mmap(0, 217749968, READ, PRIVATE, 3, 0) = 0x7ff60f523000
      #
      # vim ~/.perfconfig
      #
      # perf config
      llvm.dump-obj=true
      trace.add_events=/home/acme/git/perf/tools/perf/examples/bpf/augmented_raw_syscalls.o
      trace.show_zeros=yes
      trace.show_duration=no
      trace.no_inherit=yes
      trace.show_timestamp=no
      trace.show_arg_names=no
      trace.args_alignment=0
      trace.string_quote="
      trace.show_prefix=yes
      #
      #
      # trace -e *map,open*,*seek sleep 1
      openat(AT_FDCWD, "/etc/ld.so.cache", O_CLOEXEC) = 3
      mmap(0, 109093, PROT_READ, MAP_PRIVATE, 3, 0) = 0x7f7ebbe59000
      openat(AT_FDCWD, "/lib64/libc.so.6", O_CLOEXEC) = 3
      lseek(3, 792, SEEK_SET) = 792
      mmap(0, 8192, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS) = 0x7f7ebbe57000
      lseek(3, 792, SEEK_SET) = 792
      lseek(3, 864, SEEK_SET) = 864
      mmap(0, 1857568, PROT_READ, MAP_PRIVATE|MAP_DENYWRITE, 3, 0) = 0x7f7ebbc91000
      mmap(0x7f7ebbcb3000, 1363968, PROT_EXEC|PROT_READ, MAP_PRIVATE|MAP_FIXED|MAP_DENYWRITE, 3, 139264) = 0x7f7ebbcb3000
      mmap(0x7f7ebbe00000, 311296, PROT_READ, MAP_PRIVATE|MAP_FIXED|MAP_DENYWRITE, 3, 1503232) = 0x7f7ebbe00000
      mmap(0x7f7ebbe4d000, 24576, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_FIXED|MAP_DENYWRITE, 3, 1814528) = 0x7f7ebbe4d000
      mmap(0x7f7ebbe53000, 14368, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_FIXED|MAP_ANONYMOUS) = 0x7f7ebbe53000
      munmap(0x7f7ebbe59000, 109093) = 0
      openat(AT_FDCWD, "/usr/lib/locale/locale-archive", O_CLOEXEC) = 3
      mmap(0, 217749968, PROT_READ, MAP_PRIVATE, 3, 0) = 0x7f7eaece7000
      #
    
    Cc: Adrian Hunter <adrian.hunter@intel.com>
    Cc: Jiri Olsa <jolsa@kernel.org>
    Cc: Luis Cláudio Gonçalves <lclaudio@redhat.com>
    Cc: Namhyung Kim <namhyung@kernel.org>
    Cc: Wang Nan <wangnan0@huawei.com>
    Link: https://lkml.kernel.org/n/tip-mtn1i4rjowjl72trtnbmvjd4@git.kernel.org
    Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>

diff --git a/tools/perf/trace/beauty/kcmp.c b/tools/perf/trace/beauty/kcmp.c
index 56f1e50a6012..9351f84390a1 100644
--- a/tools/perf/trace/beauty/kcmp.c
+++ b/tools/perf/trace/beauty/kcmp.c
@@ -26,10 +26,10 @@ size_t syscall_arg__scnprintf_kcmp_idx(char *bf, size_t size, struct syscall_arg
 	return pid__scnprintf_fd(arg->trace, pid, fd, bf, size);
 }
 
-static size_t kcmp__scnprintf_type(int type, char *bf, size_t size)
+static size_t kcmp__scnprintf_type(int type, char *bf, size_t size, bool show_prefix)
 {
 	static DEFINE_STRARRAY(kcmp_types, "KCMP_");
-	return strarray__scnprintf(&strarray__kcmp_types, bf, size, "%d", type);
+	return strarray__scnprintf(&strarray__kcmp_types, bf, size, "%d", show_prefix, type);
 }
 
 size_t syscall_arg__scnprintf_kcmp_type(char *bf, size_t size, struct syscall_arg *arg)
@@ -39,5 +39,5 @@ size_t syscall_arg__scnprintf_kcmp_type(char *bf, size_t size, struct syscall_ar
 	if (type != KCMP_FILE)
 		arg->mask |= (1 << 3) | (1 << 4); /* Ignore idx1 and idx2 */
 
-	return kcmp__scnprintf_type(type, bf, size);
+	return kcmp__scnprintf_type(type, bf, size, arg->show_string_prefix);
 }

commit 2e3d7fac9db5e80d1cc26bb1453b85245c26d657
Author: Arnaldo Carvalho de Melo <acme@redhat.com>
Date:   Fri Dec 14 15:08:40 2018 -0300

    perf trace: Add a prefix member to the strarray class
    
    So that the user, in an upcoming patch, can select printing it to get
    the full string as used in the source code, not one with a common prefix
    chopped off so as to make the output more compact.
    
    Cc: Adrian Hunter <adrian.hunter@intel.com>
    Cc: Jiri Olsa <jolsa@kernel.org>
    Cc: Luis Cláudio Gonçalves <lclaudio@redhat.com>
    Cc: Namhyung Kim <namhyung@kernel.org>
    Cc: Wang Nan <wangnan0@huawei.com>
    Link: https://lkml.kernel.org/n/tip-zypczc88gzbmeqx7b372s138@git.kernel.org
    Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>

diff --git a/tools/perf/trace/beauty/kcmp.c b/tools/perf/trace/beauty/kcmp.c
index b276a274f203..56f1e50a6012 100644
--- a/tools/perf/trace/beauty/kcmp.c
+++ b/tools/perf/trace/beauty/kcmp.c
@@ -28,7 +28,7 @@ size_t syscall_arg__scnprintf_kcmp_idx(char *bf, size_t size, struct syscall_arg
 
 static size_t kcmp__scnprintf_type(int type, char *bf, size_t size)
 {
-	static DEFINE_STRARRAY(kcmp_types);
+	static DEFINE_STRARRAY(kcmp_types, "KCMP_");
 	return strarray__scnprintf(&strarray__kcmp_types, bf, size, "%d", type);
 }
 

commit 794f594e0c3be6199e0b3e2324280e8785806fb6
Author: Arnaldo Carvalho de Melo <acme@redhat.com>
Date:   Wed Oct 24 15:54:23 2018 -0300

    perf beauty: Switch from GPL v2.0 to LGPL v2.1
    
    The intention is to have this as a library, since it is not perf
    specific at all.
    
    I did the switch for the files where I'm the only contributor, with the
    exception of a few lines changed by Jiri Olsa.
    
    Acked-by: Jiri Olsa <jolsa@kernel.org>
    Cc: Adrian Hunter <adrian.hunter@intel.com>
    Cc: David Ahern <dsahern@gmail.com>
    Cc: Namhyung Kim <namhyung@kernel.org>
    Cc: Wang Nan <wangnan0@huawei.com>
    Link: https://lkml.kernel.org/n/tip-a04q6chdyjknm1hr305ulx8h@git.kernel.org
    Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>

diff --git a/tools/perf/trace/beauty/kcmp.c b/tools/perf/trace/beauty/kcmp.c
index f62040eb9d5c..b276a274f203 100644
--- a/tools/perf/trace/beauty/kcmp.c
+++ b/tools/perf/trace/beauty/kcmp.c
@@ -1,9 +1,8 @@
+// SPDX-License-Identifier: LGPL-2.1
 /*
  * trace/beauty/kcmp.c
  *
  *  Copyright (C) 2017, Red Hat Inc, Arnaldo Carvalho de Melo <acme@redhat.com>
- *
- * Released under the GPL v2. (and only v2, not any later version)
  */
 
 #include "trace/beauty/beauty.h"

commit 1de3038d0082a1c2edd7a7b1b3381e38f42af0e7
Author: Arnaldo Carvalho de Melo <acme@redhat.com>
Date:   Tue Oct 31 11:32:23 2017 -0300

    perf trace beauty kcmp: Beautify arguments
    
    For some unknown reason there is no entry in tracefs's syscalls for
    kcmp, i.e. no tracefs/events/syscalls/sys_{enter,exit}_kcmp, so we need
    to provide a data dictionary for the fields.
    
    To beautify the 'type' argument we automatically generate a strarray
    from tools/include/uapi/kcmp.h, the idx1 and idx2 args, nowadays used
    only if type == KCMP_FILE, are masked for all the other types and a
    lookup is made for the thread and fd to show the path, if possible,
    getting it from the probe:vfs_getname if in place or from procfs, races
    allowing.
    
    A system wide strace like tracing session, with callchains shows just
    one user so far in this fedora 25 machine:
    
      # perf trace --max-stack 5 -e kcmp
      <SNIP>
      1502914.400 ( 0.001 ms): systemd/1 kcmp(pid1: 1 (systemd), pid2: 1 (systemd), type: FILE, idx1: 271<socket:[4723475]>, idx2: 25<socket:[4788686]>) = -1 ENOSYS Function not implemented
                                             syscall (/usr/lib64/libc-2.25.so)
                                             same_fd (/usr/lib/systemd/libsystemd-shared-233.so)
                                             service_add_fd_store (/usr/lib/systemd/systemd)
                                             service_notify_message.lto_priv.127 (/usr/lib/systemd/systemd)
      1502914.407 ( 0.001 ms): systemd/1 kcmp(pid1: 1 (systemd), pid2: 1 (systemd), type: FILE, idx1: 270<socket:[4726396]>, idx2: 25<socket:[4788686]>) = -1 ENOSYS Function not implemented
                                             syscall (/usr/lib64/libc-2.25.so)
                                             same_fd (/usr/lib/systemd/libsystemd-shared-233.so)
                                             service_add_fd_store (/usr/lib/systemd/systemd)
                                             service_notify_message.lto_priv.127 (/usr/lib/systemd/systemd)
      <SNIP>
    
    The backtraces seem to agree this is really kcmp(), but this system
    doesn't have the sys_kcmp(), bummer:
    
      # uname -a
      Linux jouet 4.14.0-rc3+ #1 SMP Fri Oct 13 12:21:12 -03 2017 x86_64 x86_64 x86_64 GNU/Linux
      # grep kcmp /proc/kallsyms
      ffffffffb60b8890 W sys_kcmp
      $ grep CONFIG_CHECKPOINT_RESTORE ../build/v4.14.0-rc3+/.config
      # CONFIG_CHECKPOINT_RESTORE is not set
      $
    
    So systemd uses it, good fedora kernel config has it:
    
      $ grep CONFIG_CHECKPOINT_RESTORE /boot/config-4.13.4-200.fc26.x86_64
      CONFIG_CHECKPOINT_RESTORE=y
      [acme@jouet linux]$
    
    /me goes to rebuild a kernel...
    
    Cc: Adrian Hunter <adrian.hunter@intel.com>
    Cc: Andrey Vagin <avagin@openvz.org>
    Cc: Cyrill Gorcunov <gorcunov@openvz.org>
    Cc: David Ahern <dsahern@gmail.com>
    Cc: Jiri Olsa <jolsa@kernel.org>
    Cc: Namhyung Kim <namhyung@kernel.org>
    Cc: Wang Nan <wangnan0@huawei.com>
    Link: http://lkml.kernel.org/n/tip-gz5fca968viw8m7hryjqvrln@git.kernel.org
    Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>

diff --git a/tools/perf/trace/beauty/kcmp.c b/tools/perf/trace/beauty/kcmp.c
new file mode 100644
index 000000000000..f62040eb9d5c
--- /dev/null
+++ b/tools/perf/trace/beauty/kcmp.c
@@ -0,0 +1,44 @@
+/*
+ * trace/beauty/kcmp.c
+ *
+ *  Copyright (C) 2017, Red Hat Inc, Arnaldo Carvalho de Melo <acme@redhat.com>
+ *
+ * Released under the GPL v2. (and only v2, not any later version)
+ */
+
+#include "trace/beauty/beauty.h"
+#include <linux/kernel.h>
+#include <sys/types.h>
+#include <machine.h>
+#include <uapi/linux/kcmp.h>
+
+#include "trace/beauty/generated/kcmp_type_array.c"
+
+size_t syscall_arg__scnprintf_kcmp_idx(char *bf, size_t size, struct syscall_arg *arg)
+{
+	unsigned long fd = arg->val;
+	int type = syscall_arg__val(arg, 2);
+	pid_t pid;
+
+	if (type != KCMP_FILE)
+		return syscall_arg__scnprintf_long(bf, size, arg);
+
+	pid = syscall_arg__val(arg, arg->idx == 3 ? 0 : 1); /* idx1 -> pid1, idx2 -> pid2 */
+	return pid__scnprintf_fd(arg->trace, pid, fd, bf, size);
+}
+
+static size_t kcmp__scnprintf_type(int type, char *bf, size_t size)
+{
+	static DEFINE_STRARRAY(kcmp_types);
+	return strarray__scnprintf(&strarray__kcmp_types, bf, size, "%d", type);
+}
+
+size_t syscall_arg__scnprintf_kcmp_type(char *bf, size_t size, struct syscall_arg *arg)
+{
+	unsigned long type = arg->val;
+
+	if (type != KCMP_FILE)
+		arg->mask |= (1 << 3) | (1 << 4); /* Ignore idx1 and idx2 */
+
+	return kcmp__scnprintf_type(type, bf, size);
+}
