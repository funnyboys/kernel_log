commit 693bd3949be6c73218e3666d85e37841d678ea7b
Author: Arnaldo Carvalho de Melo <acme@redhat.com>
Date:   Mon May 20 16:24:15 2019 -0300

    perf trace: Beautify 'fspick' arguments
    
    Use existing beautifiers for the first 2 args (dfd, path) and wire up
    the recently introduced fspick flags table generator.
    
    Now it should be possible to just use:
    
       perf trace -e fspick
    
    As root and see all move_mount syscalls with its args beautified, either
    using the vfs_getname perf probe method or using the
    augmented_raw_syscalls.c eBPF helper to get the pathnames, the other
    args should work in all cases, i.e. all that is needed can be obtained
    directly from the raw_syscalls:sys_enter tracepoint args.
    
      # cat sys_fspick.c
      #define _GNU_SOURCE        /* See feature_test_macros(7) */
      #include <unistd.h>
      #include <sys/syscall.h>   /* For SYS_xxx definitions */
      #include <fcntl.h>
    
      #define __NR_fspick 433
    
      #define FSPICK_CLOEXEC          0x00000001
      #define FSPICK_SYMLINK_NOFOLLOW 0x00000002
      #define FSPICK_NO_AUTOMOUNT     0x00000004
      #define FSPICK_EMPTY_PATH       0x00000008
    
      static inline int sys_fspick(int fd, const char *path, int flags)
      {
            syscall(__NR_fspick, fd, path, flags);
      }
    
      int main(int argc, char *argv[])
      {
            int flags = 0, fd = 0;
    
            open("/foo", 0);
            sys_fspick(fd++, "/foo1", flags);
            flags |= FSPICK_CLOEXEC;
            sys_fspick(fd++, "/foo2", flags);
            flags |= FSPICK_SYMLINK_NOFOLLOW;
            sys_fspick(fd++, "/foo3", flags);
            flags |= FSPICK_NO_AUTOMOUNT;
            sys_fspick(fd++, "/foo4", flags);
            flags |= FSPICK_EMPTY_PATH;
            return sys_fspick(fd++, "/foo5", flags);
      }
      # perf trace -e fspick ./sys_fspick
      LLVM: dumping /home/acme/git/perf/tools/perf/examples/bpf/augmented_raw_syscalls.o
      fspick(0, "/foo1", 0)                   = -1 ENOENT (No such file or directory)
      fspick(1, "/foo2", FSPICK_CLOEXEC)      = -1 ENOENT (No such file or directory)
      fspick(2, "/foo3", FSPICK_CLOEXEC|FSPICK_SYMLINK_NOFOLLOW) = -1 ENOENT (No such file or directory)
      fspick(3, "/foo4", FSPICK_CLOEXEC|FSPICK_SYMLINK_NOFOLLOW|FSPICK_NO_AUTOMOUNT) = -1 ENOENT (No such file or directory)
      fspick(4, "/foo5", FSPICK_CLOEXEC|FSPICK_SYMLINK_NOFOLLOW|FSPICK_NO_AUTOMOUNT|FSPICK_EMPTY_PATH) = -1 ENOENT (No such file or directory)
      #
    
    Cc: Adrian Hunter <adrian.hunter@intel.com>
    Cc: Al Viro <viro@zeniv.linux.org.uk>
    Cc: Brendan Gregg <brendan.d.gregg@gmail.com>
    Cc: Jiri Olsa <jolsa@kernel.org>
    Cc: Luis Cláudio Gonçalves <lclaudio@redhat.com>
    Cc: Namhyung Kim <namhyung@kernel.org>
    Link: https://lkml.kernel.org/n/tip-erau5xjtt8wvgnhvdbchstuk@git.kernel.org
    Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>

diff --git a/tools/perf/trace/beauty/fspick.c b/tools/perf/trace/beauty/fspick.c
new file mode 100644
index 000000000000..c402479c96f0
--- /dev/null
+++ b/tools/perf/trace/beauty/fspick.c
@@ -0,0 +1,24 @@
+// SPDX-License-Identifier: LGPL-2.1
+/*
+ * trace/beauty/fspick.c
+ *
+ *  Copyright (C) 2019, Red Hat Inc, Arnaldo Carvalho de Melo <acme@redhat.com>
+ */
+
+#include "trace/beauty/beauty.h"
+#include <linux/log2.h>
+
+static size_t fspick__scnprintf_flags(unsigned long flags, char *bf, size_t size, bool show_prefix)
+{
+#include "trace/beauty/generated/fspick_arrays.c"
+       static DEFINE_STRARRAY(fspick_flags, "FSPICK_");
+
+       return strarray__scnprintf_flags(&strarray__fspick_flags, bf, size, show_prefix, flags);
+}
+
+size_t syscall_arg__scnprintf_fspick_flags(char *bf, size_t size, struct syscall_arg *arg)
+{
+	unsigned long flags = arg->val;
+
+	return fspick__scnprintf_flags(flags, bf, size, arg->show_string_prefix);
+}
