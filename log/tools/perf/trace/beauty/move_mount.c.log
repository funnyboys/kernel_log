commit 566e30229e1f4be67c4771afc057152d62016c9c
Author: Arnaldo Carvalho de Melo <acme@redhat.com>
Date:   Mon May 20 14:58:03 2019 -0300

    perf trace: Beautify 'move_mount' arguments
    
    Use existing beautifiers for the first 4 args (to/from fds, pathnames)
    and wire up the recently introduced move_mount flags table generator.
    
    Now it should be possible to just use:
    
          perf trace -e move_mount
    
    As root and see all move_mount syscalls with its args beautified, except
    for the filenames, that need work in the augmented_raw_syscalls.c eBPF
    helper to pass more than one, see comment in the
    augmented_raw_syscalls.c source code, the other args should work in all
    cases, i.e. all that is needed can be obtained directly from the
    raw_syscalls:sys_enter tracepoint args.
    
    Running without the strace "skin" (.perfconfig setting output formatting
    switches to look like strace output + BPF to collect strings, as we
    still need to support collecting multiple string args for the same
    syscall, like with move_mount):
    
      # cat sys_move_mount.c
      #define _GNU_SOURCE         /* See feature_test_macros(7) */
      #include <unistd.h>
      #include <sys/syscall.h>   /* For SYS_xxx definitions */
    
      #define __NR_move_mount 429
    
      #define MOVE_MOUNT_F_SYMLINKS         0x00000001 /* Follow symlinks on from path */
      #define MOVE_MOUNT_F_AUTOMOUNTS               0x00000002 /* Follow automounts on from path */
      #define MOVE_MOUNT_F_EMPTY_PATH               0x00000004 /* Empty from path permitted */
      #define MOVE_MOUNT_T_SYMLINKS         0x00000010 /* Follow symlinks on to path */
      #define MOVE_MOUNT_T_AUTOMOUNTS               0x00000020 /* Follow automounts on to path */
      #define MOVE_MOUNT_T_EMPTY_PATH               0x00000040 /* Empty to path permitted */
    
      static inline int sys_move_mount(int from_fd, const char *from_pathname,
                                     int to_fd, const char *to_pathname,
                                     int flags)
      {
              syscall(__NR_move_mount, from_fd, from_pathname, to_fd, to_pathname, flags);
      }
    
      int main(int argc, char *argv[])
      {
              int flags = 0, from_fd = 0, to_fd = 100;
    
              sys_move_mount(from_fd++, "/foo", to_fd++, "bar", flags);
              flags |= MOVE_MOUNT_F_SYMLINKS;
              sys_move_mount(from_fd++, "/foo1", to_fd++, "bar1", flags);
              flags |= MOVE_MOUNT_F_AUTOMOUNTS;
              sys_move_mount(from_fd++, "/foo2", to_fd++, "bar2", flags);
              flags |= MOVE_MOUNT_F_EMPTY_PATH;
              sys_move_mount(from_fd++, "/foo3", to_fd++, "bar3", flags);
              flags |= MOVE_MOUNT_T_SYMLINKS;
              sys_move_mount(from_fd++, "/foo4", to_fd++, "bar4", flags);
              flags |= MOVE_MOUNT_T_AUTOMOUNTS;
              sys_move_mount(from_fd++, "/foo5", to_fd++, "bar5", flags);
              flags |= MOVE_MOUNT_T_EMPTY_PATH;
              return sys_move_mount(from_fd++, "/foo6", to_fd++, "bar6", flags);
      }
      # mv ~/.perfconfig  ~/.perfconfig.OFF
      # perf trace -e move_mount ./sys_move_mount
           0.000 ( 0.009 ms): sys_move_mount/28971 move_mount(from_pathname: 0x402010, to_dfd: 100, to_pathname: 0x402015) = -1 ENOENT (No such file or directory)
           0.011 ( 0.003 ms): sys_move_mount/28971 move_mount(from_dfd: 1, from_pathname: 0x40201e, to_dfd: 101, to_pathname: 0x402019, flags: F_SYMLINKS) = -1 ENOENT (No such file or directory)
           0.016 ( 0.002 ms): sys_move_mount/28971 move_mount(from_dfd: 2, from_pathname: 0x402029, to_dfd: 102, to_pathname: 0x402024, flags: F_SYMLINKS|F_AUTOMOUNTS) = -1 ENOENT (No such file or directory)
           0.020 ( 0.002 ms): sys_move_mount/28971 move_mount(from_dfd: 3, from_pathname: 0x402034, to_dfd: 103, to_pathname: 0x40202f, flags: F_SYMLINKS|F_AUTOMOUNTS|F_EMPTY_PATH) = -1 ENOENT (No such file or directory)
           0.023 ( 0.002 ms): sys_move_mount/28971 move_mount(from_dfd: 4, from_pathname: 0x40203f, to_dfd: 104, to_pathname: 0x40203a, flags: F_SYMLINKS|F_AUTOMOUNTS|F_EMPTY_PATH|T_SYMLINKS) = -1 ENOENT (No such file or directory)
           0.027 ( 0.002 ms): sys_move_mount/28971 move_mount(from_dfd: 5, from_pathname: 0x40204a, to_dfd: 105, to_pathname: 0x402045, flags: F_SYMLINKS|F_AUTOMOUNTS|F_EMPTY_PATH|T_SYMLINKS|T_AUTOMOUNTS) = -1 ENOENT (No such file or directory)
           0.031 ( 0.017 ms): sys_move_mount/28971 move_mount(from_dfd: 6, from_pathname: 0x402055, to_dfd: 106, to_pathname: 0x402050, flags: F_SYMLINKS|F_AUTOMOUNTS|F_EMPTY_PATH|T_SYMLINKS|T_AUTOMOUNTS|T_EMPTY_PATH) = -1 ENOENT (No such file or directory)
      #
    
    Cc: Adrian Hunter <adrian.hunter@intel.com>
    Cc: Al Viro <viro@zeniv.linux.org.uk>
    Cc: Brendan Gregg <brendan.d.gregg@gmail.com>
    Cc: David Howells <dhowells@redhat.com>
    Cc: Jiri Olsa <jolsa@kernel.org>
    Cc: Namhyung Kim <namhyung@kernel.org>
    Link: https://lkml.kernel.org/n/tip-83rim8g4k0s4gieieh5nnlck@git.kernel.org
    Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>

diff --git a/tools/perf/trace/beauty/move_mount.c b/tools/perf/trace/beauty/move_mount.c
new file mode 100644
index 000000000000..78ed80395406
--- /dev/null
+++ b/tools/perf/trace/beauty/move_mount.c
@@ -0,0 +1,24 @@
+// SPDX-License-Identifier: LGPL-2.1
+/*
+ * trace/beauty/move_mount.c
+ *
+ *  Copyright (C) 2019, Red Hat Inc, Arnaldo Carvalho de Melo <acme@redhat.com>
+ */
+
+#include "trace/beauty/beauty.h"
+#include <linux/log2.h>
+
+static size_t move_mount__scnprintf_flags(unsigned long flags, char *bf, size_t size, bool show_prefix)
+{
+#include "trace/beauty/generated/move_mount_flags_array.c"
+       static DEFINE_STRARRAY(move_mount_flags, "MOVE_MOUNT_");
+
+       return strarray__scnprintf_flags(&strarray__move_mount_flags, bf, size, show_prefix, flags);
+}
+
+size_t syscall_arg__scnprintf_move_mount_flags(char *bf, size_t size, struct syscall_arg *arg)
+{
+	unsigned long flags = arg->val;
+
+	return move_mount__scnprintf_flags(flags, bf, size, arg->show_string_prefix);
+}
