commit 441b62acd9c809e87bab45ad1d82b1b3b77cb4f0
Author: Ian Rogers <irogers@google.com>
Date:   Thu Mar 5 23:11:08 2020 -0800

    tools: Fix off-by 1 relative directory includes
    
    This is currently working due to extra include paths in the build.
    
    Committer testing:
    
      $ cd tools/include/uapi/asm/
    
    Before this patch:
    
      $ ls -la ../../arch/x86/include/uapi/asm/errno.h
      ls: cannot access '../../arch/x86/include/uapi/asm/errno.h': No such file or directory
      $
    
    After this patch;
    
      $ ls -la ../../../arch/x86/include/uapi/asm/errno.h
      -rw-rw-r--. 1 acme acme 31 Feb 20 12:42 ../../../arch/x86/include/uapi/asm/errno.h
      $
    
    Check that that is still under tools/, i.e. hasn't escaped into the main
    kernel sources:
    
      $ cd ../../../arch/x86/include/uapi/asm/
      $ pwd
      /home/acme/git/perf/tools/arch/x86/include/uapi/asm
      $
    
    Signed-off-by: Ian Rogers <irogers@google.com>
    Tested-by: Arnaldo Carvalho de Melo <acme@redhat.com>
    Acked-by: Jiri Olsa <jolsa@kernel.org>
    Cc: Adrian Hunter <adrian.hunter@intel.com>
    Cc: Alexander Shishkin <alexander.shishkin@linux.intel.com>
    Cc: Alexios Zavras <alexios.zavras@intel.com>
    Cc: Andi Kleen <ak@linux.intel.com>
    Cc: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Cc: Igor Lubashev <ilubashe@akamai.com>
    Cc: Kan Liang <kan.liang@linux.intel.com>
    Cc: Mark Rutland <mark.rutland@arm.com>
    Cc: Mathieu Poirier <mathieu.poirier@linaro.org>
    Cc: Namhyung Kim <namhyung@kernel.org>
    Cc: Nick Desaulniers <ndesaulniers@google.com>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Stephane Eranian <eranian@google.com>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: Wei Li <liwei391@huawei.com>
    Link: http://lore.kernel.org/lkml/20200306071110.130202-2-irogers@google.com
    Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>

diff --git a/tools/perf/arch/arm64/util/perf_regs.c b/tools/perf/arch/arm64/util/perf_regs.c
index 2864e2e3776d..2833e101a7c6 100644
--- a/tools/perf/arch/arm64/util/perf_regs.c
+++ b/tools/perf/arch/arm64/util/perf_regs.c
@@ -1,5 +1,5 @@
 // SPDX-License-Identifier: GPL-2.0
-#include "../../util/perf_regs.h"
+#include "../../../util/perf_regs.h"
 
 const struct sample_reg sample_reg_masks[] = {
 	SMPL_REG_END

commit 42466b9f29b415c254dc4c2f4618e2a96951a406
Author: Ian Rogers <irogers@google.com>
Date:   Mon Sep 30 17:36:23 2019 -0700

    perf tools: Avoid 'sample_reg_masks' being const + weak
    
    Being const + weak breaks with some compilers that constant-propagate
    from the weak symbol. This behavior is outside of the specification, but
    in LLVM is chosen to match GCC's behavior.
    
    LLVM's implementation was set in this patch:
    
      https://github.com/llvm/llvm-project/commit/f49573d1eedcf1e44893d5a062ac1b72c8419646
    
    A const + weak symbol is set to be weak_odr:
    
      https://llvm.org/docs/LangRef.html
    
    ODR is one definition rule, and given there is one constant definition
    constant-propagation is possible. It is possible to get this code to
    miscompile with LLVM when applying link time optimization. As compilers
    become more aggressive, this is likely to break in more instances.
    
    Move the definition of sample_reg_masks to the conditional part of
    perf_regs.h and guard usage with HAVE_PERF_REGS_SUPPORT. This avoids the
    weak symbol.
    
    Fix an issue when HAVE_PERF_REGS_SUPPORT isn't defined from patch v1.
    In v3, add perf_regs.c for architectures that HAVE_PERF_REGS_SUPPORT but
    don't declare sample_regs_masks.
    
    Further notes:
    
    Jiri asked:
    
      "Is this just a precaution or you actualy saw some breakage?"
    
    Ian answered:
    
      "We saw a breakage with clang with thinlto enabled for linking. Our
       compiler team had recently seen, and were surprised by, a similar issue
       and were able to dig out the weak ODR issue."
    
    Signed-off-by: Ian Rogers <irogers@google.com>
    Reviewed-by: Nick Desaulniers <ndesaulniers@google.com>
    Acked-by: Jiri Olsa <jolsa@kernel.org>
    Cc: Albert Ou <aou@eecs.berkeley.edu>
    Cc: Alexander Shishkin <alexander.shishkin@linux.intel.com>
    Cc: Alexey Budankov <alexey.budankov@linux.intel.com>
    Cc: Andi Kleen <ak@linux.intel.com>
    Cc: clang-built-linux@googlegroups.com
    Cc: Guo Ren <guoren@kernel.org>
    Cc: Kan Liang <kan.liang@linux.intel.com>
    Cc: linux-riscv@lists.infradead.org
    Cc: Mao Han <han_mao@c-sky.com>
    Cc: Mark Rutland <mark.rutland@arm.com>
    Cc: Namhyung Kim <namhyung@kernel.org>
    Cc: Palmer Dabbelt <palmer@sifive.com>
    Cc: Paul Walmsley <paul.walmsley@sifive.com>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Stephane Eranian <eranian@google.com>
    Link: http://lore.kernel.org/lkml/20191001003623.255186-1-irogers@google.com
    Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>

diff --git a/tools/perf/arch/arm64/util/perf_regs.c b/tools/perf/arch/arm64/util/perf_regs.c
new file mode 100644
index 000000000000..2864e2e3776d
--- /dev/null
+++ b/tools/perf/arch/arm64/util/perf_regs.c
@@ -0,0 +1,6 @@
+// SPDX-License-Identifier: GPL-2.0
+#include "../../util/perf_regs.h"
+
+const struct sample_reg sample_reg_masks[] = {
+	SMPL_REG_END
+};
