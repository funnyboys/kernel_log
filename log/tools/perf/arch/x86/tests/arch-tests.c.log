commit a0db77bf880b8badd2f9ce4da708c69b0b865853
Author: Adrian Hunter <adrian.hunter@intel.com>
Date:   Mon Jun 10 10:27:54 2019 +0300

    perf intel-pt: Add Intel PT packet decoder test
    
    Add Intel PT packet decoder test. This test feeds byte sequences to the
    Intel PT packet decoder and checks the results. Changes to the packet
    context are also checked.
    
    Committer testing:
    
      # perf test "Intel PT"
      65: Intel PT packet decoder                               : Ok
      # perf test -v "Intel PT"
      65: Intel PT packet decoder                               :
      --- start ---
      test child forked, pid 6360
      Decoded ok: 00                                                PAD
      Decoded ok: 04                                                TNT N (1)
      Decoded ok: 06                                                TNT T (1)
      Decoded ok: 80                                                TNT NNNNNN (6)
      Decoded ok: fe                                                TNT TTTTTT (6)
      Decoded ok: 02 a3 02 00 00 00 00 00                           TNT N (1)
      Decoded ok: 02 a3 03 00 00 00 00 00                           TNT T (1)
      Decoded ok: 02 a3 00 00 00 00 00 80                           TNT NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN (47)
      Decoded ok: 02 a3 ff ff ff ff ff ff                           TNT TTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTT (47)
      Decoded ok: 0d                                                TIP no ip
      Decoded ok: 2d 01 02                                          TIP 0x201
      Decoded ok: 4d 01 02 03 04                                    TIP 0x4030201
      Decoded ok: 6d 01 02 03 04 05 06                              TIP 0x60504030201
      Decoded ok: 8d 01 02 03 04 05 06                              TIP 0x60504030201
      Decoded ok: cd 01 02 03 04 05 06 07 08                        TIP 0x807060504030201
      Decoded ok: 11                                                TIP.PGE no ip
      Decoded ok: 31 01 02                                          TIP.PGE 0x201
      Decoded ok: 51 01 02 03 04                                    TIP.PGE 0x4030201
      Decoded ok: 71 01 02 03 04 05 06                              TIP.PGE 0x60504030201
      Decoded ok: 91 01 02 03 04 05 06                              TIP.PGE 0x60504030201
      Decoded ok: d1 01 02 03 04 05 06 07 08                        TIP.PGE 0x807060504030201
      Decoded ok: 01                                                TIP.PGD no ip
      Decoded ok: 21 01 02                                          TIP.PGD 0x201
      Decoded ok: 41 01 02 03 04                                    TIP.PGD 0x4030201
      Decoded ok: 61 01 02 03 04 05 06                              TIP.PGD 0x60504030201
      Decoded ok: 81 01 02 03 04 05 06                              TIP.PGD 0x60504030201
      Decoded ok: c1 01 02 03 04 05 06 07 08                        TIP.PGD 0x807060504030201
      Decoded ok: 1d                                                FUP no ip
      Decoded ok: 3d 01 02                                          FUP 0x201
      Decoded ok: 5d 01 02 03 04                                    FUP 0x4030201
      Decoded ok: 7d 01 02 03 04 05 06                              FUP 0x60504030201
      Decoded ok: 9d 01 02 03 04 05 06                              FUP 0x60504030201
      Decoded ok: dd 01 02 03 04 05 06 07 08                        FUP 0x807060504030201
      Decoded ok: 02 43 02 04 06 08 0a 0c                           PIP 0x60504030201 (NR=0)
      Decoded ok: 02 43 03 04 06 08 0a 0c                           PIP 0x60504030201 (NR=1)
      Decoded ok: 99 00                                             MODE.Exec 16
      Decoded ok: 99 01                                             MODE.Exec 64
      Decoded ok: 99 02                                             MODE.Exec 32
      Decoded ok: 99 20                                             MODE.TSX TXAbort:0 InTX:0
      Decoded ok: 99 21                                             MODE.TSX TXAbort:0 InTX:1
      Decoded ok: 99 22                                             MODE.TSX TXAbort:1 InTX:0
      Decoded ok: 02 83                                             TraceSTOP
      Decoded ok: 02 03 12 00                                       CBR 0x12
      Decoded ok: 19 01 02 03 04 05 06 07                           TSC 0x7060504030201
      Decoded ok: 59 12                                             MTC 0x12
      Decoded ok: 02 73 00 00 00 00 00                              TMA CTC 0x0 FC 0x0
      Decoded ok: 02 73 01 02 00 00 00                              TMA CTC 0x201 FC 0x0
      Decoded ok: 02 73 00 00 00 ff 01                              TMA CTC 0x0 FC 0x1ff
      Decoded ok: 02 73 80 c0 00 ff 01                              TMA CTC 0xc080 FC 0x1ff
      Decoded ok: 03                                                CYC 0x0
      Decoded ok: 0b                                                CYC 0x1
      Decoded ok: fb                                                CYC 0x1f
      Decoded ok: 07 02                                             CYC 0x20
      Decoded ok: ff fe                                             CYC 0xfff
      Decoded ok: 07 01 02                                          CYC 0x1000
      Decoded ok: ff ff fe                                          CYC 0x7ffff
      Decoded ok: 07 01 01 02                                       CYC 0x80000
      Decoded ok: ff ff ff fe                                       CYC 0x3ffffff
      Decoded ok: 07 01 01 01 02                                    CYC 0x4000000
      Decoded ok: ff ff ff ff fe                                    CYC 0x1ffffffff
      Decoded ok: 07 01 01 01 01 02                                 CYC 0x200000000
      Decoded ok: ff ff ff ff ff fe                                 CYC 0xffffffffff
      Decoded ok: 07 01 01 01 01 01 02                              CYC 0x10000000000
      Decoded ok: ff ff ff ff ff ff fe                              CYC 0x7fffffffffff
      Decoded ok: 07 01 01 01 01 01 01 02                           CYC 0x800000000000
      Decoded ok: ff ff ff ff ff ff ff fe                           CYC 0x3fffffffffffff
      Decoded ok: 07 01 01 01 01 01 01 01 02                        CYC 0x40000000000000
      Decoded ok: ff ff ff ff ff ff ff ff fe                        CYC 0x1fffffffffffffff
      Decoded ok: 07 01 01 01 01 01 01 01 01 02                     CYC 0x2000000000000000
      Decoded ok: ff ff ff ff ff ff ff ff ff 0e                     CYC 0xffffffffffffffff
      Decoded ok: 02 c8 01 02 03 04 05                              VMCS 0x504030201
      Decoded ok: 02 f3                                             OVF
      Decoded ok: 02 f3                                             OVF
      Decoded ok: 02 f3                                             OVF
      Decoded ok: 02 82 02 82 02 82 02 82 02 82 02 82 02 82 02 82   PSB
      Decoded ok: 02 82 02 82 02 82 02 82 02 82 02 82 02 82 02 82   PSB
      Decoded ok: 02 82 02 82 02 82 02 82 02 82 02 82 02 82 02 82   PSB
      Decoded ok: 02 23                                             PSBEND
      Decoded ok: 02 c3 88 01 02 03 04 05 06 07 00                  MNT 0x7060504030201
      Decoded ok: 02 12 01 02 03 04                                 PTWRITE 0x4030201 IP:0
      Decoded ok: 02 32 01 02 03 04 05 06 07 08                     PTWRITE 0x807060504030201 IP:0
      Decoded ok: 02 92 01 02 03 04                                 PTWRITE 0x4030201 IP:1
      Decoded ok: 02 b2 01 02 03 04 05 06 07 08                     PTWRITE 0x807060504030201 IP:1
      Decoded ok: 02 62                                             EXSTOP IP:0
      Decoded ok: 02 e2                                             EXSTOP IP:1
      Decoded ok: 02 c2 00 00 00 00 00 00 00 00                     MWAIT 0x0 Hints 0x0 Extensions 0x0
      Decoded ok: 02 c2 01 02 03 04 05 06 07 08                     MWAIT 0x807060504030201 Hints 0x1 Extensions 0x1
      Decoded ok: 02 c2 ff 02 03 04 07 06 07 08                     MWAIT 0x8070607040302ff Hints 0xff Extensions 0x3
      Decoded ok: 02 22 00 00                                       PWRE 0x0 HW:0 CState:0 Sub-CState:0
      Decoded ok: 02 22 01 02                                       PWRE 0x201 HW:0 CState:0 Sub-CState:2
      Decoded ok: 02 22 80 34                                       PWRE 0x3480 HW:1 CState:3 Sub-CState:4
      Decoded ok: 02 22 00 56                                       PWRE 0x5600 HW:0 CState:5 Sub-CState:6
      Decoded ok: 02 a2 00 00 00 00 00                              PWRX 0x0 Last CState:0 Deepest CState:0 Wake Reason 0x0
      Decoded ok: 02 a2 01 02 03 04 05                              PWRX 0x504030201 Last CState:0 Deepest CState:1 Wake Reason 0x2
      Decoded ok: 02 a2 ff ff ff ff ff                              PWRX 0xffffffffff Last CState:15 Deepest CState:15 Wake Reason 0xf
      Decoded ok: 02 63 00                                          BBP SZ 8-byte Type 0x0
      Decoded ok: 02 63 80                                          BBP SZ 4-byte Type 0x0
      Decoded ok: 02 63 1f                                          BBP SZ 8-byte Type 0x1f
      Decoded ok: 02 63 9f                                          BBP SZ 4-byte Type 0x1f
      Decoded ok: 04 00 00 00 00                                    BIP ID 0x00 Value 0x0
      Decoded ok: fc 00 00 00 00                                    BIP ID 0x1f Value 0x0
      Decoded ok: 04 01 02 03 04                                    BIP ID 0x00 Value 0x4030201
      Decoded ok: fc 01 02 03 04                                    BIP ID 0x1f Value 0x4030201
      Decoded ok: 04 00 00 00 00 00 00 00 00                        BIP ID 0x00 Value 0x0
      Decoded ok: fc 00 00 00 00 00 00 00 00                        BIP ID 0x1f Value 0x0
      Decoded ok: 04 01 02 03 04 05 06 07 08                        BIP ID 0x00 Value 0x807060504030201
      Decoded ok: fc 01 02 03 04 05 06 07 08                        BIP ID 0x1f Value 0x807060504030201
      Decoded ok: 02 33                                             BEP IP:0
      Decoded ok: 02 b3                                             BEP IP:1
      Decoded ok: 02 33                                             BEP IP:0
      Decoded ok: 02 b3                                             BEP IP:1
      test child finished with 0
      ---- end ----
      Intel PT packet decoder: Ok
      #
    
    Signed-off-by: Adrian Hunter <adrian.hunter@intel.com>
    Tested-by: Arnaldo Carvalho de Melo <acme@redhat.com>
    Cc: Jiri Olsa <jolsa@redhat.com>
    Link: http://lkml.kernel.org/r/20190610072803.10456-3-adrian.hunter@intel.com
    Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>

diff --git a/tools/perf/arch/x86/tests/arch-tests.c b/tools/perf/arch/x86/tests/arch-tests.c
index d47d3f8e3c8e..6763135aec17 100644
--- a/tools/perf/arch/x86/tests/arch-tests.c
+++ b/tools/perf/arch/x86/tests/arch-tests.c
@@ -23,6 +23,10 @@ struct test arch_tests[] = {
 		.desc = "x86 instruction decoder - new instructions",
 		.func = test__insn_x86,
 	},
+	{
+		.desc = "Intel PT packet decoder",
+		.func = test__intel_pt_pkt_decoder,
+	},
 #endif
 #if defined(__x86_64__)
 	{

commit 9b3579fc6c6ac45502de1fa9a1fdf873805c2157
Author: Jiri Olsa <jolsa@kernel.org>
Date:   Mon Aug 27 11:12:24 2018 +0200

    perf tests: Add breakpoint modify tests
    
    Adding to tests that aims on kernel breakpoint modification bugs.
    
    First test creates HW breakpoint, tries to change it and checks it was
    properly changed. It aims on kernel issue that prevents HW breakpoint to
    be changed via ptrace interface.
    
    The first test forks, the child sets itself as ptrace tracee and waits
    in signal for parent to trace it, then it calls bp_1 and quits.
    
    The parent does following steps:
    
     - creates a new breakpoint (id 0) for bp_2 function
     - changes that breakpoint to bp_1 function
     - waits for the breakpoint to hit and checks
       it has proper rip of bp_1 function
    
    This test aims on an issue in kernel preventing to change disabled
    breakpoints
    
    Second test mimics the first one except for few steps
    in the parent:
     - creates a new breakpoint (id 0) for bp_1 function
     - changes that breakpoint to bogus (-1) address
     - waits for the breakpoint to hit and checks
       it has proper rip of bp_1 function
    
    This test aims on an issue in kernel disabling enabled
    breakpoint after unsuccesful change.
    
    Committer testing:
    
      # uname -a
      Linux jouet 4.18.0-rc8-00002-g1236568ee3cb #12 SMP Tue Aug 7 14:08:26 -03 2018 x86_64 x86_64 x86_64 GNU/Linux
      # perf test -v "bp modify"
      62: x86 bp modify                                         :
      --- start ---
      test child forked, pid 25671
      in bp_1
      tracee exited prematurely 2
      FAILED arch/x86/tests/bp-modify.c:209 modify test 1 failed
    
      test child finished with -1
      ---- end ----
      x86 bp modify: FAILED!
      #
    
    Signed-off-by: Jiri Olsa <jolsa@kernel.org>
    Tested-by: Arnaldo Carvalho de Melo <acme@redhat.com>
    Cc: Alexander Shishkin <alexander.shishkin@linux.intel.com>
    Cc: David Ahern <dsahern@gmail.com>
    Cc: Milind Chabbi <chabbi.milind@gmail.com>
    Cc: Namhyung Kim <namhyung@kernel.org>
    Cc: Oleg Nesterov <oleg@redhat.com>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Link: http://lkml.kernel.org/r/20180827091228.2878-2-jolsa@kernel.org
    Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>

diff --git a/tools/perf/arch/x86/tests/arch-tests.c b/tools/perf/arch/x86/tests/arch-tests.c
index cc1802ff5410..d47d3f8e3c8e 100644
--- a/tools/perf/arch/x86/tests/arch-tests.c
+++ b/tools/perf/arch/x86/tests/arch-tests.c
@@ -23,6 +23,12 @@ struct test arch_tests[] = {
 		.desc = "x86 instruction decoder - new instructions",
 		.func = test__insn_x86,
 	},
+#endif
+#if defined(__x86_64__)
+	{
+		.desc = "x86 bp modify",
+		.func = test__bp_modify,
+	},
 #endif
 	{
 		.func = NULL,

commit 15bcdc9477b03eb035052412c3a087e11e855e76
Merge: 340b5319c98e e4880bc5dfb1
Author: Ingo Molnar <mingo@kernel.org>
Date:   Tue Nov 7 10:30:18 2017 +0100

    Merge branch 'linus' into perf/core, to fix conflicts
    
    Conflicts:
            tools/perf/arch/arm/annotate/instructions.c
            tools/perf/arch/arm64/annotate/instructions.c
            tools/perf/arch/powerpc/annotate/instructions.c
            tools/perf/arch/s390/annotate/instructions.c
            tools/perf/arch/x86/tests/intel-cqm.c
            tools/perf/ui/tui/progress.c
            tools/perf/util/zlib.c
    
    Signed-off-by: Ingo Molnar <mingo@kernel.org>

commit b24413180f5600bcb3bb70fbed5cf186b60864bd
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Wed Nov 1 15:07:57 2017 +0100

    License cleanup: add SPDX GPL-2.0 license identifier to files with no license
    
    Many source files in the tree are missing licensing information, which
    makes it harder for compliance tools to determine the correct license.
    
    By default all files without license information are under the default
    license of the kernel, which is GPL version 2.
    
    Update the files which contain no license information with the 'GPL-2.0'
    SPDX license identifier.  The SPDX identifier is a legally binding
    shorthand, which can be used instead of the full boiler plate text.
    
    This patch is based on work done by Thomas Gleixner and Kate Stewart and
    Philippe Ombredanne.
    
    How this work was done:
    
    Patches were generated and checked against linux-4.14-rc6 for a subset of
    the use cases:
     - file had no licensing information it it.
     - file was a */uapi/* one with no licensing information in it,
     - file was a */uapi/* one with existing licensing information,
    
    Further patches will be generated in subsequent months to fix up cases
    where non-standard license headers were used, and references to license
    had to be inferred by heuristics based on keywords.
    
    The analysis to determine which SPDX License Identifier to be applied to
    a file was done in a spreadsheet of side by side results from of the
    output of two independent scanners (ScanCode & Windriver) producing SPDX
    tag:value files created by Philippe Ombredanne.  Philippe prepared the
    base worksheet, and did an initial spot review of a few 1000 files.
    
    The 4.13 kernel was the starting point of the analysis with 60,537 files
    assessed.  Kate Stewart did a file by file comparison of the scanner
    results in the spreadsheet to determine which SPDX license identifier(s)
    to be applied to the file. She confirmed any determination that was not
    immediately clear with lawyers working with the Linux Foundation.
    
    Criteria used to select files for SPDX license identifier tagging was:
     - Files considered eligible had to be source code files.
     - Make and config files were included as candidates if they contained >5
       lines of source
     - File already had some variant of a license header in it (even if <5
       lines).
    
    All documentation files were explicitly excluded.
    
    The following heuristics were used to determine which SPDX license
    identifiers to apply.
    
     - when both scanners couldn't find any license traces, file was
       considered to have no license information in it, and the top level
       COPYING file license applied.
    
       For non */uapi/* files that summary was:
    
       SPDX license identifier                            # files
       ---------------------------------------------------|-------
       GPL-2.0                                              11139
    
       and resulted in the first patch in this series.
    
       If that file was a */uapi/* path one, it was "GPL-2.0 WITH
       Linux-syscall-note" otherwise it was "GPL-2.0".  Results of that was:
    
       SPDX license identifier                            # files
       ---------------------------------------------------|-------
       GPL-2.0 WITH Linux-syscall-note                        930
    
       and resulted in the second patch in this series.
    
     - if a file had some form of licensing information in it, and was one
       of the */uapi/* ones, it was denoted with the Linux-syscall-note if
       any GPL family license was found in the file or had no licensing in
       it (per prior point).  Results summary:
    
       SPDX license identifier                            # files
       ---------------------------------------------------|------
       GPL-2.0 WITH Linux-syscall-note                       270
       GPL-2.0+ WITH Linux-syscall-note                      169
       ((GPL-2.0 WITH Linux-syscall-note) OR BSD-2-Clause)    21
       ((GPL-2.0 WITH Linux-syscall-note) OR BSD-3-Clause)    17
       LGPL-2.1+ WITH Linux-syscall-note                      15
       GPL-1.0+ WITH Linux-syscall-note                       14
       ((GPL-2.0+ WITH Linux-syscall-note) OR BSD-3-Clause)    5
       LGPL-2.0+ WITH Linux-syscall-note                       4
       LGPL-2.1 WITH Linux-syscall-note                        3
       ((GPL-2.0 WITH Linux-syscall-note) OR MIT)              3
       ((GPL-2.0 WITH Linux-syscall-note) AND MIT)             1
    
       and that resulted in the third patch in this series.
    
     - when the two scanners agreed on the detected license(s), that became
       the concluded license(s).
    
     - when there was disagreement between the two scanners (one detected a
       license but the other didn't, or they both detected different
       licenses) a manual inspection of the file occurred.
    
     - In most cases a manual inspection of the information in the file
       resulted in a clear resolution of the license that should apply (and
       which scanner probably needed to revisit its heuristics).
    
     - When it was not immediately clear, the license identifier was
       confirmed with lawyers working with the Linux Foundation.
    
     - If there was any question as to the appropriate license identifier,
       the file was flagged for further research and to be revisited later
       in time.
    
    In total, over 70 hours of logged manual review was done on the
    spreadsheet to determine the SPDX license identifiers to apply to the
    source files by Kate, Philippe, Thomas and, in some cases, confirmation
    by lawyers working with the Linux Foundation.
    
    Kate also obtained a third independent scan of the 4.13 code base from
    FOSSology, and compared selected files where the other two scanners
    disagreed against that SPDX file, to see if there was new insights.  The
    Windriver scanner is based on an older version of FOSSology in part, so
    they are related.
    
    Thomas did random spot checks in about 500 files from the spreadsheets
    for the uapi headers and agreed with SPDX license identifier in the
    files he inspected. For the non-uapi files Thomas did random spot checks
    in about 15000 files.
    
    In initial set of patches against 4.14-rc6, 3 files were found to have
    copy/paste license identifier errors, and have been fixed to reflect the
    correct identifier.
    
    Additionally Philippe spent 10 hours this week doing a detailed manual
    inspection and review of the 12,461 patched files from the initial patch
    version early this week with:
     - a full scancode scan run, collecting the matched texts, detected
       license ids and scores
     - reviewing anything where there was a license detected (about 500+
       files) to ensure that the applied SPDX license was correct
     - reviewing anything where there was no detection but the patch license
       was not GPL-2.0 WITH Linux-syscall-note to ensure that the applied
       SPDX license was correct
    
    This produced a worksheet with 20 files needing minor correction.  This
    worksheet was then exported into 3 different .csv files for the
    different types of files to be modified.
    
    These .csv files were then reviewed by Greg.  Thomas wrote a script to
    parse the csv files and add the proper SPDX tag to the file, in the
    format that the file expected.  This script was further refined by Greg
    based on the output to detect more types of files automatically and to
    distinguish between header and source .c files (which need different
    comment types.)  Finally Greg ran the script using the .csv files to
    generate the patches.
    
    Reviewed-by: Kate Stewart <kstewart@linuxfoundation.org>
    Reviewed-by: Philippe Ombredanne <pombredanne@nexb.com>
    Reviewed-by: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/tools/perf/arch/x86/tests/arch-tests.c b/tools/perf/arch/x86/tests/arch-tests.c
index 99d66191e56c..34a078136a47 100644
--- a/tools/perf/arch/x86/tests/arch-tests.c
+++ b/tools/perf/arch/x86/tests/arch-tests.c
@@ -1,3 +1,4 @@
+// SPDX-License-Identifier: GPL-2.0
 #include <string.h>
 #include "tests/tests.h"
 #include "arch-tests.h"

commit 5c9295bfe6f5f59f3f2eee78f58b0523d117897e
Author: Xiaochen Shen <xiaochen.shen@intel.com>
Date:   Tue Sep 19 12:57:37 2017 +0800

    perf tests: Remove Intel CQM perf test
    
    Intel CQM perf test is obsolete for perf PMU code has been removed in
    commit c39a0e2c8850 ("x86/perf/cqm: Wipe out perf based cqm").
    
    Signed-off-by: Xiaochen Shen <xiaochen.shen@intel.com>
    Cc: Alexander Shishkin <alexander.shishkin@linux.intel.com>
    Cc: Fenghua Yu <fenghua.yu@intel.com>
    Cc: Matt Fleming <matt@codeblueprint.co.uk>
    Cc: Pei P Jia <pei.p.jia@intel.com>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Tony Luck <tony.luck@intel.com>
    Cc: Vikas Shivappa <vikas.shivappa@linux.intel.com>
    Link: http://lkml.kernel.org/r/1505797057-16300-1-git-send-email-xiaochen.shen@intel.com
    Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>

diff --git a/tools/perf/arch/x86/tests/arch-tests.c b/tools/perf/arch/x86/tests/arch-tests.c
index 99d66191e56c..271c0a0f95d7 100644
--- a/tools/perf/arch/x86/tests/arch-tests.c
+++ b/tools/perf/arch/x86/tests/arch-tests.c
@@ -23,10 +23,6 @@ struct test arch_tests[] = {
 		.func = test__insn_x86,
 	},
 #endif
-	{
-		.desc = "Intel cqm nmi context read",
-		.func = test__intel_cqm_count_nmi_context,
-	},
 	{
 		.func = NULL,
 	},

commit 030910c085467c7f08f49735c19c66c1baa53f76
Author: Arnaldo Carvalho de Melo <acme@redhat.com>
Date:   Tue Nov 29 12:38:14 2016 -0300

    perf test: Remove "test" and similar strings from test descriptions
    
    Having "test" in almost all test descriptions is redundant, simplify it
    removing and rewriting tests with such descriptions.
    
    End result:
    
      # perf test
       1: vmlinux symtab matches kallsyms            : Ok
       2: Detect openat syscall event                : Ok
       3: Detect openat syscall event on all cpus    : Ok
       4: Read samples using the mmap interface      : Ok
       5: Parse event definition strings             : Ok
       6: PERF_RECORD_* events & perf_sample fields  : Ok
       7: Parse perf pmu format                      : Ok
       8: DSO data read                              : Ok
       9: DSO data cache                             : Ok
      10: DSO data reopen                            : Ok
      11: Roundtrip evsel->name                      : Ok
      12: Parse sched tracepoints fields             : Ok
      13: syscalls:sys_enter_openat event fields     : Ok
      14: Setup struct perf_event_attr               : Ok
      15: Match and link multiple hists              : Ok
      16: 'import perf' in python                    : Ok
      17: Breakpoint overflow signal handler         : Ok
      18: Breakpoint overflow sampling               : Ok
      19: Number of exit events of a simple workload : Ok
      20: Software clock events period values        : Ok
      21: Object code reading                        : Ok
      22: Sample parsing                             : Ok
      23: Use a dummy software event to keep tracking: Ok
      24: Parse with no sample_id_all bit set        : Ok
      25: Filter hist entries                        : Ok
      26: Lookup mmap thread                         : Ok
      27: Share thread mg                            : Ok
      28: Sort output of hist entries                : Ok
      29: Cumulate child hist entries                : Ok
      30: Track with sched_switch                    : Ok
      31: Filter fds with revents mask in a fdarray  : Ok
      32: Add fd to a fdarray, making it autogrow    : Ok
      33: kmod_path__parse                           : Ok
      34: Thread map                                 : Ok
      35: LLVM search and compile                    :
      35.1: Basic BPF llvm compile                    : Ok
      35.2: kbuild searching                          : Ok
      35.3: Compile source for BPF prologue generation: Ok
      35.4: Compile source for BPF relocation         : Ok
      36: Session topology                           : Ok
      37: BPF filter                                 :
      37.1: Basic BPF filtering                      : Ok
      37.2: BPF prologue generation                  : Ok
      37.3: BPF relocation checker                   : Ok
      38: Synthesize thread map                      : Ok
      39: Synthesize cpu map                         : Ok
      40: Synthesize stat config                     : Ok
      41: Synthesize stat                            : Ok
      42: Synthesize stat round                      : Ok
      43: Synthesize attr update                     : Ok
      44: Event times                                : Ok
      45: Read backward ring buffer                  : Ok
      46: Print cpu map                              : Ok
      47: Probe SDT events                           : Ok
      48: is_printable_array                         : Ok
      49: Print bitmap                               : Ok
      50: perf hooks                                 : Ok
      51: x86 rdpmc                                  : Ok
      52: Convert perf time to TSC                   : Ok
      53: DWARF unwind                               : Ok
      54: x86 instruction decoder - new instructions : Ok
      55: Intel cqm nmi context read                 : Skip
      #
    
    Cc: Adrian Hunter <adrian.hunter@intel.com>
    Cc: David Ahern <dsahern@gmail.com>
    Cc: Jiri Olsa <jolsa@kernel.org>
    Cc: Namhyung Kim <namhyung@kernel.org>
    Cc: Wang Nan <wangnan0@huawei.com>
    Link: http://lkml.kernel.org/n/tip-rx2lbfcrrio2yx1fxcljqy0e@git.kernel.org
    Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>

diff --git a/tools/perf/arch/x86/tests/arch-tests.c b/tools/perf/arch/x86/tests/arch-tests.c
index 2218cb64f840..99d66191e56c 100644
--- a/tools/perf/arch/x86/tests/arch-tests.c
+++ b/tools/perf/arch/x86/tests/arch-tests.c
@@ -4,27 +4,27 @@
 
 struct test arch_tests[] = {
 	{
-		.desc = "x86 rdpmc test",
+		.desc = "x86 rdpmc",
 		.func = test__rdpmc,
 	},
 	{
-		.desc = "Test converting perf time to TSC",
+		.desc = "Convert perf time to TSC",
 		.func = test__perf_time_to_tsc,
 	},
 #ifdef HAVE_DWARF_UNWIND_SUPPORT
 	{
-		.desc = "Test dwarf unwind",
+		.desc = "DWARF unwind",
 		.func = test__dwarf_unwind,
 	},
 #endif
 #ifdef HAVE_AUXTRACE_SUPPORT
 	{
-		.desc = "Test x86 instruction decoder - new instructions",
+		.desc = "x86 instruction decoder - new instructions",
 		.func = test__insn_x86,
 	},
 #endif
 	{
-		.desc = "Test intel cqm nmi context read",
+		.desc = "Intel cqm nmi context read",
 		.func = test__intel_cqm_count_nmi_context,
 	},
 	{

commit 035827e9f2bd71a280f4eb58c65811d377ab2217
Author: Matt Fleming <matt.fleming@intel.com>
Date:   Mon Oct 5 15:40:21 2015 +0100

    perf tests: Add Intel CQM test
    
    Peter reports that it's possible to trigger a WARN_ON_ONCE() in the
    Intel CQM code by combining a hardware event and an Intel CQM
    (software) event into a group. Unfortunately, the perf tools are not
    able to create this bundle and we need to manually construct a test
    case.
    
    For posterity, record Peter's proof of concept test case in tools/perf
    so that it presents a model for how we can perform architecture
    specific tests, or "arch tests", in perf in the future.
    
    The particular issue triggered in the test case is that when the
    counter for the hardware event overflows and triggers a PMI we'll read
    both the hardware event and the software event counters.
    Unfortunately, for CQM that involves performing an IPI to read the CQM
    event counters on all sockets, which in NMI context triggers the
    WARN_ON_ONCE().
    
    Reported-by: Peter Zijlstra <peterz@infradead.org>
    Signed-off-by: Matt Fleming <matt.fleming@intel.com>
    Cc: Adrian Hunter <adrian.hunter@intel.com>
    Cc: Andi Kleen <ak@linux.intel.com>
    Cc: Fenghua Yu <fenghua.yu@intel.com>
    Cc: Jiri Olsa <jolsa@redhat.com>
    Cc: Kanaka Juvva <kanaka.d.juvva@intel.com>
    Cc: Vikas Shivappa <vikas.shivappa@intel.com>
    Cc: Vince Weaver <vince@deater.net>
    Link: http://lkml.kernel.org/r/1437490509-15373-1-git-send-email-matt@codeblueprint.co.uk
    Link: http://lkml.kernel.org/n/tip-3p4ra0u8vzm7m289a1m799kf@git.kernel.org
    Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>

diff --git a/tools/perf/arch/x86/tests/arch-tests.c b/tools/perf/arch/x86/tests/arch-tests.c
index d116c217af99..2218cb64f840 100644
--- a/tools/perf/arch/x86/tests/arch-tests.c
+++ b/tools/perf/arch/x86/tests/arch-tests.c
@@ -23,6 +23,10 @@ struct test arch_tests[] = {
 		.func = test__insn_x86,
 	},
 #endif
+	{
+		.desc = "Test intel cqm nmi context read",
+		.func = test__intel_cqm_count_nmi_context,
+	},
 	{
 		.func = NULL,
 	},

commit d8b167f9d8af817073ee35cf904e2e527465dbc1
Author: Matt Fleming <matt.fleming@intel.com>
Date:   Mon Oct 5 15:40:20 2015 +0100

    perf tests: Move x86 tests into arch directory
    
    Move out the x86-specific tests into tools/perf/arch/x86/tests and
    define an 'arch_tests' array, which is the list of tests that only apply
    to the build architecture.
    
    We can also now begin to get rid of some of the #ifdef code that is
    present in the generic perf tests.
    
    Signed-off-by: Matt Fleming <matt.fleming@intel.com>
    Cc: Adrian Hunter <adrian.hunter@intel.com>
    Cc: Andi Kleen <ak@linux.intel.com>
    Cc: Fenghua Yu <fenghua.yu@intel.com>
    Cc: Jiri Olsa <jolsa@redhat.com>
    Cc: Kanaka Juvva <kanaka.d.juvva@intel.com>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Vikas Shivappa <vikas.shivappa@intel.com>
    Cc: Vince Weaver <vince@deater.net>
    Link: http://lkml.kernel.org/n/tip-9s68h4ptg06ah0lgnjz55mqn@git.kernel.org
    Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>

diff --git a/tools/perf/arch/x86/tests/arch-tests.c b/tools/perf/arch/x86/tests/arch-tests.c
index fca9eb9d39a2..d116c217af99 100644
--- a/tools/perf/arch/x86/tests/arch-tests.c
+++ b/tools/perf/arch/x86/tests/arch-tests.c
@@ -3,6 +3,26 @@
 #include "arch-tests.h"
 
 struct test arch_tests[] = {
+	{
+		.desc = "x86 rdpmc test",
+		.func = test__rdpmc,
+	},
+	{
+		.desc = "Test converting perf time to TSC",
+		.func = test__perf_time_to_tsc,
+	},
+#ifdef HAVE_DWARF_UNWIND_SUPPORT
+	{
+		.desc = "Test dwarf unwind",
+		.func = test__dwarf_unwind,
+	},
+#endif
+#ifdef HAVE_AUXTRACE_SUPPORT
+	{
+		.desc = "Test x86 instruction decoder - new instructions",
+		.func = test__insn_x86,
+	},
+#endif
 	{
 		.func = NULL,
 	},

commit 31b6753f95320260b160935d0e9c0b29f096ab57
Author: Matt Fleming <matt.fleming@intel.com>
Date:   Mon Oct 5 15:40:19 2015 +0100

    perf tests: Add arch tests
    
    Tests that only make sense for some architectures currently live in
    the same place as the generic tests. Move out the x86-specific tests
    into tools/perf/arch/x86/tests and define an 'arch_tests' array, which
    is the list of tests that only apply to the build architecture.
    
    The main idea is to encourage developers to add arch tests to build
    out perf's test coverage, without dumping everything in
    tools/perf/tests.
    
    Signed-off-by: Matt Fleming <matt.fleming@intel.com>
    Cc: Adrian Hunter <adrian.hunter@intel.com>
    Cc: Andi Kleen <ak@linux.intel.com>
    Cc: Fenghua Yu <fenghua.yu@intel.com>
    Cc: Jiri Olsa <jolsa@redhat.com>
    Cc: Kanaka Juvva <kanaka.d.juvva@intel.com>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Vikas Shivappa <vikas.shivappa@intel.com>
    Cc: Vince Weaver <vince@deater.net>
    Link: http://lkml.kernel.org/n/tip-p4uc1c15ssbj8xj7ku5slpa6@git.kernel.org
    Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>

diff --git a/tools/perf/arch/x86/tests/arch-tests.c b/tools/perf/arch/x86/tests/arch-tests.c
new file mode 100644
index 000000000000..fca9eb9d39a2
--- /dev/null
+++ b/tools/perf/arch/x86/tests/arch-tests.c
@@ -0,0 +1,10 @@
+#include <string.h>
+#include "tests/tests.h"
+#include "arch-tests.h"
+
+struct test arch_tests[] = {
+	{
+		.func = NULL,
+	},
+
+};
