commit 8918dc42dc85ba6981028f65a989c478eb80bc02
Author: Quentin Monnet <quentin.monnet@netronome.com>
Date:   Thu Aug 15 15:32:20 2019 +0100

    tools: bpftool: move "__printf()" attributes to header file
    
    Some functions in bpftool have a "__printf()" format attributes to tell
    the compiler they should expect printf()-like arguments. But because
    these attributes are not used for the function prototypes in the header
    files, the compiler does not run the checks everywhere the functions are
    used, and some mistakes on format string and corresponding arguments
    slipped in over time.
    
    Let's move the __printf() attributes to the correct places.
    
    Note: We add guards around the definition of GCC_VERSION in
    tools/include/linux/compiler-gcc.h to prevent a conflict in jit_disasm.c
    on GCC_VERSION from headers pulled via libbfd.
    
    Fixes: c101189bc968 ("tools: bpftool: fix -Wmissing declaration warnings")
    Reported-by: Jakub Kicinski <jakub.kicinski@netronome.com>
    Signed-off-by: Quentin Monnet <quentin.monnet@netronome.com>
    Reviewed-by: Jakub Kicinski <jakub.kicinski@netronome.com>
    Signed-off-by: Alexei Starovoitov <ast@kernel.org>

diff --git a/tools/bpf/bpftool/json_writer.h b/tools/bpf/bpftool/json_writer.h
index cb9a1993681c..35cf1f00f96c 100644
--- a/tools/bpf/bpftool/json_writer.h
+++ b/tools/bpf/bpftool/json_writer.h
@@ -14,6 +14,7 @@
 #include <stdbool.h>
 #include <stdint.h>
 #include <stdarg.h>
+#include <linux/compiler.h>
 
 /* Opaque class structure */
 typedef struct json_writer json_writer_t;
@@ -30,8 +31,9 @@ void jsonw_pretty(json_writer_t *self, bool on);
 void jsonw_name(json_writer_t *self, const char *name);
 
 /* Add value  */
-void jsonw_vprintf_enquote(json_writer_t *self, const char *fmt, va_list ap);
-void jsonw_printf(json_writer_t *self, const char *fmt, ...);
+void __printf(2, 0) jsonw_vprintf_enquote(json_writer_t *self, const char *fmt,
+					  va_list ap);
+void __printf(2, 3) jsonw_printf(json_writer_t *self, const char *fmt, ...);
 void jsonw_string(json_writer_t *self, const char *value);
 void jsonw_bool(json_writer_t *self, bool value);
 void jsonw_float(json_writer_t *self, double number);

commit 64cf5481262b9664ae3cdcb333f4a06af3e8fb58
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Fri Jan 18 00:14:24 2019 +0100

    tools: bpftool: Cleanup license mess
    
    Precise and non-ambiguous license information is important. The recent
    relicensing of the bpftools introduced a license conflict.
    
    The files have now:
    
         SPDX-License-Identifier: (GPL-2.0-only OR BSD-2-Clause
    
    and
    
         * This program is free software; you can redistribute it and/or
         * modify it under the terms of the GNU General Public License
         * as published by the Free Software Foundation; either version
         * 2 of the License, or (at your option) any later version
    
    Amazingly about 20 people acked that change and neither they nor the
    committer noticed. Oh well.
    
    Digging deeper: The files were imported from the iproute2 repository with
    the GPL V2 or later boiler plate text in commit b66e907cfee2 ("tools:
    bpftool: copy JSON writer from iproute2 repository")
    
    Looking at the iproute2 repository at
    
      git://git.kernel.org/pub/scm/network/iproute2/iproute2.git
    
    the following commit is the equivivalent:
    
      commit d9d8c839 ("json_writer: add SPDX Identifier (GPL-2/BSD-2)")
    
    That commit explicitly removes the boiler plate and relicenses the code
    uner GPL-2.0-only and BSD-2-Clause. As Steven wrote the original code and
    also the relicensing commit, it's assumed that the relicensing was intended
    to do exaclty that. Just the kernel side update failed to remove the boiler
    plate. Do so now.
    
    Fixes: 907b22365115 ("tools: bpftool: dual license all files")
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Cc: Jakub Kicinski <jakub.kicinski@netronome.com>
    Cc: Roman Gushchin <guro@fb.com>
    Cc: YueHaibing <yuehaibing@huawei.com>
    Cc: Yonghong Song <yhs@fb.com>
    Cc: Stanislav Fomichev <sdf@google.com>
    Cc: Sean Young <sean@mess.org>
    Cc: Jiri Benc <jbenc@redhat.com>
    Cc: David Calavera <david.calavera@gmail.com>
    Cc: Andrey Ignatov <rdna@fb.com>
    Cc: Joe Stringer <joe@wand.net.nz>
    Cc: David Ahern <dsahern@gmail.com>
    Cc: Alexei Starovoitov <alexei.starovoitov@gmail.com>
    Cc: Petar Penkov <ppenkov@stanford.edu>
    Cc: Sandipan Das <sandipan@linux.ibm.com>
    Cc: Prashant Bhole <bhole_prashant_q7@lab.ntt.co.jp>
    Cc: Stephen Hemminger <stephen@networkplumber.org>
    Cc: John Fastabend <john.fastabend@gmail.com>
    Cc: Taeung Song <treeze.taeung@gmail.com>
    Cc: Jiri Olsa <jolsa@kernel.org>
    Cc: Alexei Starovoitov <ast@kernel.org>
    Cc: Daniel Borkmann <daniel@iogearbox.net>
    Cc: Quentin Monnet <quentin.monnet@netronome.com>
    CC: okash.khawaja@gmail.com
    Cc: netdev@vger.kernel.org
    Acked-by: Jakub Kicinski <jakub.kicinski@netronome.com>
    Signed-off-by: Alexei Starovoitov <ast@kernel.org>

diff --git a/tools/bpf/bpftool/json_writer.h b/tools/bpf/bpftool/json_writer.h
index c1ab51aed99c..cb9a1993681c 100644
--- a/tools/bpf/bpftool/json_writer.h
+++ b/tools/bpf/bpftool/json_writer.h
@@ -5,11 +5,6 @@
  * This takes care of the annoying bits of JSON syntax like the commas
  * after elements
  *
- * This program is free software; you can redistribute it and/or
- * modify it under the terms of the GNU General Public License
- * as published by the Free Software Foundation; either version
- * 2 of the License, or (at your option) any later version.
- *
  * Authors:	Stephen Hemminger <stephen@networkplumber.org>
  */
 

commit 907b22365115fb86196152909915108d7c8243d1
Author: Jakub Kicinski <jakub.kicinski@netronome.com>
Date:   Wed Dec 12 19:59:26 2018 -0800

    tools: bpftool: dual license all files
    
    Currently bpftool contains a mix of GPL-only and GPL or BSD2
    licensed files.  Make sure all files are dual licensed under
    GPLv2 and BSD-2-Clause.
    
    Signed-off-by: Jakub Kicinski <jakub.kicinski@netronome.com>
    Acked-by: Roman Gushchin <guro@fb.com>
    Acked-by: YueHaibing <yuehaibing@huawei.com>
    Acked-by: Yonghong Song <yhs@fb.com>
    Acked-by: Stanislav Fomichev <sdf@google.com>
    Acked-by: Sean Young <sean@mess.org>
    Acked-by: Jiri Benc <jbenc@redhat.com>
    Acked-by: David Calavera <david.calavera@gmail.com>
    Acked-by: Andrey Ignatov <rdna@fb.com>
    Acked-by: Joe Stringer <joe@wand.net.nz>
    Acked-by: David Ahern <dsahern@gmail.com>
    Acked-by: Alexei Starovoitov <alexei.starovoitov@gmail.com>
    Acked-by: Petar Penkov <ppenkov@stanford.edu>
    Acked-by: Sandipan Das <sandipan@linux.ibm.com>
    Acked-by: Prashant Bhole <bhole_prashant_q7@lab.ntt.co.jp>
    Acked-by: Stephen Hemminger <stephen@networkplumber.org>
    Acked-by: John Fastabend <john.fastabend@gmail.com>
    Acked-by: Taeung Song <treeze.taeung@gmail.com>
    Acked-by: Jiri Olsa <jolsa@kernel.org>
    Acked-by: Daniel Borkmann <daniel@iogearbox.net>
    CC: okash.khawaja@gmail.com
    Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>

diff --git a/tools/bpf/bpftool/json_writer.h b/tools/bpf/bpftool/json_writer.h
index 0fa2fb1b6351..c1ab51aed99c 100644
--- a/tools/bpf/bpftool/json_writer.h
+++ b/tools/bpf/bpftool/json_writer.h
@@ -1,3 +1,4 @@
+/* SPDX-License-Identifier: (GPL-2.0-only OR BSD-2-Clause) */
 /*
  * Simple streaming JSON writer
  *

commit f05e2c32f715985f54265b1e237b5cce1b576c71
Author: Quentin Monnet <quentin.monnet@netronome.com>
Date:   Mon Oct 23 09:24:10 2017 -0700

    tools: bpftool: add JSON output for `bpftool prog dump xlated *` command
    
    Add a new printing function to dump translated eBPF instructions as
    JSON. As for plain output, opcodes are printed only on request (when
    `opcodes` is provided on the command line).
    
    The disassembled output is generated by the same code that is used by
    the kernel verifier.
    
    Example output:
    
        $ bpftool --json --pretty prog dump xlated id 1
        [{
                "disasm": "(bf) r6 = r1"
            },{
                "disasm": "(61) r7 = *(u32 *)(r6 +16)"
            },{
                "disasm": "(95) exit"
            }
        ]
    
        $ bpftool --json --pretty prog dump xlated id 1 opcodes
        [{
                "disasm": "(bf) r6 = r1",
                "opcodes": {
                    "code": "0xbf",
                    "src_reg": "0x1",
                    "dst_reg": "0x6",
                    "off": ["0x00","0x00"
                    ],
                    "imm": ["0x00","0x00","0x00","0x00"
                    ]
                }
            },{
                "disasm": "(61) r7 = *(u32 *)(r6 +16)",
                "opcodes": {
                    "code": "0x61",
                    "src_reg": "0x6",
                    "dst_reg": "0x7",
                    "off": ["0x10","0x00"
                    ],
                    "imm": ["0x00","0x00","0x00","0x00"
                    ]
                }
            },{
                "disasm": "(95) exit",
                "opcodes": {
                    "code": "0x95",
                    "src_reg": "0x0",
                    "dst_reg": "0x0",
                    "off": ["0x00","0x00"
                    ],
                    "imm": ["0x00","0x00","0x00","0x00"
                    ]
                }
            }
        ]
    
    Signed-off-by: Quentin Monnet <quentin.monnet@netronome.com>
    Acked-by: Daniel Borkmann <daniel@iogearbox.net>
    Signed-off-by: David S. Miller <davem@davemloft.net>

diff --git a/tools/bpf/bpftool/json_writer.h b/tools/bpf/bpftool/json_writer.h
index 1516aafba59d..0fa2fb1b6351 100644
--- a/tools/bpf/bpftool/json_writer.h
+++ b/tools/bpf/bpftool/json_writer.h
@@ -17,6 +17,7 @@
 
 #include <stdbool.h>
 #include <stdint.h>
+#include <stdarg.h>
 
 /* Opaque class structure */
 typedef struct json_writer json_writer_t;
@@ -33,6 +34,7 @@ void jsonw_pretty(json_writer_t *self, bool on);
 void jsonw_name(json_writer_t *self, const char *name);
 
 /* Add value  */
+void jsonw_vprintf_enquote(json_writer_t *self, const char *fmt, va_list ap);
 void jsonw_printf(json_writer_t *self, const char *fmt, ...);
 void jsonw_string(json_writer_t *self, const char *value);
 void jsonw_bool(json_writer_t *self, bool value);

commit b66e907cfee240a09a4b5aabf950a0d4c8da8d32
Author: Quentin Monnet <quentin.monnet@netronome.com>
Date:   Mon Oct 23 09:24:05 2017 -0700

    tools: bpftool: copy JSON writer from iproute2 repository
    
    In prevision of following commits, supposed to add JSON output to the
    tool, two files are copied from the iproute2 repository (taken at commit
    268a9eee985f): lib/json_writer.c and include/json_writer.h.
    
    Signed-off-by: Quentin Monnet <quentin.monnet@netronome.com>
    Acked-by: Daniel Borkmann <daniel@iogearbox.net>
    Signed-off-by: David S. Miller <davem@davemloft.net>

diff --git a/tools/bpf/bpftool/json_writer.h b/tools/bpf/bpftool/json_writer.h
new file mode 100644
index 000000000000..1516aafba59d
--- /dev/null
+++ b/tools/bpf/bpftool/json_writer.h
@@ -0,0 +1,70 @@
+/*
+ * Simple streaming JSON writer
+ *
+ * This takes care of the annoying bits of JSON syntax like the commas
+ * after elements
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License
+ * as published by the Free Software Foundation; either version
+ * 2 of the License, or (at your option) any later version.
+ *
+ * Authors:	Stephen Hemminger <stephen@networkplumber.org>
+ */
+
+#ifndef _JSON_WRITER_H_
+#define _JSON_WRITER_H_
+
+#include <stdbool.h>
+#include <stdint.h>
+
+/* Opaque class structure */
+typedef struct json_writer json_writer_t;
+
+/* Create a new JSON stream */
+json_writer_t *jsonw_new(FILE *f);
+/* End output to JSON stream */
+void jsonw_destroy(json_writer_t **self_p);
+
+/* Cause output to have pretty whitespace */
+void jsonw_pretty(json_writer_t *self, bool on);
+
+/* Add property name */
+void jsonw_name(json_writer_t *self, const char *name);
+
+/* Add value  */
+void jsonw_printf(json_writer_t *self, const char *fmt, ...);
+void jsonw_string(json_writer_t *self, const char *value);
+void jsonw_bool(json_writer_t *self, bool value);
+void jsonw_float(json_writer_t *self, double number);
+void jsonw_float_fmt(json_writer_t *self, const char *fmt, double num);
+void jsonw_uint(json_writer_t *self, uint64_t number);
+void jsonw_hu(json_writer_t *self, unsigned short number);
+void jsonw_int(json_writer_t *self, int64_t number);
+void jsonw_null(json_writer_t *self);
+void jsonw_lluint(json_writer_t *self, unsigned long long int num);
+
+/* Useful Combinations of name and value */
+void jsonw_string_field(json_writer_t *self, const char *prop, const char *val);
+void jsonw_bool_field(json_writer_t *self, const char *prop, bool value);
+void jsonw_float_field(json_writer_t *self, const char *prop, double num);
+void jsonw_uint_field(json_writer_t *self, const char *prop, uint64_t num);
+void jsonw_hu_field(json_writer_t *self, const char *prop, unsigned short num);
+void jsonw_int_field(json_writer_t *self, const char *prop, int64_t num);
+void jsonw_null_field(json_writer_t *self, const char *prop);
+void jsonw_lluint_field(json_writer_t *self, const char *prop,
+			unsigned long long int num);
+void jsonw_float_field_fmt(json_writer_t *self, const char *prop,
+			   const char *fmt, double val);
+
+/* Collections */
+void jsonw_start_object(json_writer_t *self);
+void jsonw_end_object(json_writer_t *self);
+
+void jsonw_start_array(json_writer_t *self);
+void jsonw_end_array(json_writer_t *self);
+
+/* Override default exception handling */
+typedef void (jsonw_err_handler_fn)(const char *);
+
+#endif /* _JSON_WRITER_H_ */
