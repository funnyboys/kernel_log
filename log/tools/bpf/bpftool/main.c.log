commit 9406b485dea5e25bed7c81cd822747d494cc8bde
Author: Yonghong Song <yhs@fb.com>
Date:   Sat May 9 10:59:20 2020 -0700

    tools/bpftool: Add bpf_iter support for bptool
    
    Currently, only one command is supported
      bpftool iter pin <bpf_prog.o> <path>
    
    It will pin the trace/iter bpf program in
    the object file <bpf_prog.o> to the <path>
    where <path> should be on a bpffs mount.
    
    For example,
      $ bpftool iter pin ./bpf_iter_ipv6_route.o \
        /sys/fs/bpf/my_route
    User can then do a `cat` to print out the results:
      $ cat /sys/fs/bpf/my_route
        fe800000000000000000000000000000 40 00000000000000000000000000000000 ...
        00000000000000000000000000000000 00 00000000000000000000000000000000 ...
        00000000000000000000000000000001 80 00000000000000000000000000000000 ...
        fe800000000000008c0162fffebdfd57 80 00000000000000000000000000000000 ...
        ff000000000000000000000000000000 08 00000000000000000000000000000000 ...
        00000000000000000000000000000000 00 00000000000000000000000000000000 ...
    
    The implementation for ipv6_route iterator is in one of subsequent
    patches.
    
    This patch also added BPF_LINK_TYPE_ITER to link query.
    
    In the future, we may add additional parameters to pin command
    by parameterizing the bpf iterator. For example, a map_id or pid
    may be added to let bpf program only traverses a single map or task,
    similar to kernel seq_file single_open().
    
    We may also add introspection command for targets/iterators by
    leveraging the bpf_iter itself.
    
    Signed-off-by: Yonghong Song <yhs@fb.com>
    Signed-off-by: Alexei Starovoitov <ast@kernel.org>
    Link: https://lore.kernel.org/bpf/20200509175920.2477247-1-yhs@fb.com

diff --git a/tools/bpf/bpftool/main.c b/tools/bpf/bpftool/main.c
index 1413a154806e..46bd716a9d86 100644
--- a/tools/bpf/bpftool/main.c
+++ b/tools/bpf/bpftool/main.c
@@ -59,7 +59,7 @@ static int do_help(int argc, char **argv)
 		"       %s batch file FILE\n"
 		"       %s version\n"
 		"\n"
-		"       OBJECT := { prog | map | link | cgroup | perf | net | feature | btf | gen | struct_ops }\n"
+		"       OBJECT := { prog | map | link | cgroup | perf | net | feature | btf | gen | struct_ops | iter }\n"
 		"       " HELP_SPEC_OPTIONS "\n"
 		"",
 		bin_name, bin_name, bin_name);
@@ -224,6 +224,7 @@ static const struct cmd cmds[] = {
 	{ "btf",	do_btf },
 	{ "gen",	do_gen },
 	{ "struct_ops",	do_struct_ops },
+	{ "iter",	do_iter },
 	{ "version",	do_version },
 	{ 0 }
 };

commit c5481f9a954f27b8730c1dfeebbc9b3b5b2b2481
Author: Andrii Nakryiko <andriin@fb.com>
Date:   Tue Apr 28 17:16:12 2020 -0700

    bpftool: Add bpf_link show and pin support
    
    Add `bpftool link show` and `bpftool link pin` commands.
    
    Example plain output for `link show` (with showing pinned paths):
    
    [vmuser@archvm bpf]$ sudo ~/local/linux/tools/bpf/bpftool/bpftool -f link
    1: tracing  prog 12
            prog_type tracing  attach_type fentry
            pinned /sys/fs/bpf/my_test_link
            pinned /sys/fs/bpf/my_test_link2
    2: tracing  prog 13
            prog_type tracing  attach_type fentry
    3: tracing  prog 14
            prog_type tracing  attach_type fentry
    4: tracing  prog 15
            prog_type tracing  attach_type fentry
    5: tracing  prog 16
            prog_type tracing  attach_type fentry
    6: tracing  prog 17
            prog_type tracing  attach_type fentry
    7: raw_tracepoint  prog 21
            tp 'sys_enter'
    8: cgroup  prog 25
            cgroup_id 584  attach_type egress
    9: cgroup  prog 25
            cgroup_id 599  attach_type egress
    10: cgroup  prog 25
            cgroup_id 614  attach_type egress
    11: cgroup  prog 25
            cgroup_id 629  attach_type egress
    
    Signed-off-by: Andrii Nakryiko <andriin@fb.com>
    Signed-off-by: Alexei Starovoitov <ast@kernel.org>
    Reviewed-by: Quentin Monnet <quentin@isovalent.com>
    Link: https://lore.kernel.org/bpf/20200429001614.1544-9-andriin@fb.com

diff --git a/tools/bpf/bpftool/main.c b/tools/bpf/bpftool/main.c
index 466c269eabdd..1413a154806e 100644
--- a/tools/bpf/bpftool/main.c
+++ b/tools/bpf/bpftool/main.c
@@ -30,6 +30,7 @@ bool verifier_logs;
 bool relaxed_maps;
 struct pinned_obj_table prog_table;
 struct pinned_obj_table map_table;
+struct pinned_obj_table link_table;
 
 static void __noreturn clean_and_exit(int i)
 {
@@ -58,7 +59,7 @@ static int do_help(int argc, char **argv)
 		"       %s batch file FILE\n"
 		"       %s version\n"
 		"\n"
-		"       OBJECT := { prog | map | cgroup | perf | net | feature | btf | gen | struct_ops }\n"
+		"       OBJECT := { prog | map | link | cgroup | perf | net | feature | btf | gen | struct_ops }\n"
 		"       " HELP_SPEC_OPTIONS "\n"
 		"",
 		bin_name, bin_name, bin_name);
@@ -215,6 +216,7 @@ static const struct cmd cmds[] = {
 	{ "batch",	do_batch },
 	{ "prog",	do_prog },
 	{ "map",	do_map },
+	{ "link",	do_link },
 	{ "cgroup",	do_cgroup },
 	{ "perf",	do_perf },
 	{ "net",	do_net },
@@ -364,6 +366,7 @@ int main(int argc, char **argv)
 
 	hash_init(prog_table.table);
 	hash_init(map_table.table);
+	hash_init(link_table.table);
 
 	opterr = 0;
 	while ((opt = getopt_long(argc, argv, "Vhpjfmnd",
@@ -422,6 +425,7 @@ int main(int argc, char **argv)
 	if (show_pinned) {
 		delete_pinned_obj_table(&prog_table);
 		delete_pinned_obj_table(&map_table);
+		delete_pinned_obj_table(&link_table);
 	}
 
 	return ret;

commit 65c93628599dff4cd7cfb70130d1f6a2203731ea
Author: Martin KaFai Lau <kafai@fb.com>
Date:   Wed Mar 18 10:16:56 2020 -0700

    bpftool: Add struct_ops support
    
    This patch adds struct_ops support to the bpftool.
    
    To recap a bit on the recent bpf_struct_ops feature on the kernel side:
    It currently supports "struct tcp_congestion_ops" to be implemented
    in bpf.  At a high level, bpf_struct_ops is struct_ops map populated
    with a number of bpf progs.  bpf_struct_ops currently supports the
    "struct tcp_congestion_ops".  However, the bpf_struct_ops design is
    generic enough that other kernel struct ops can be supported in
    the future.
    
    Although struct_ops is map+progs at a high lever, there are differences
    in details.  For example,
    1) After registering a struct_ops, the struct_ops is held by the kernel
       subsystem (e.g. tcp-cc).  Thus, there is no need to pin a
       struct_ops map or its progs in order to keep them around.
    2) To iterate all struct_ops in a system, it iterates all maps
       in type BPF_MAP_TYPE_STRUCT_OPS.  BPF_MAP_TYPE_STRUCT_OPS is
       the current usual filter.  In the future, it may need to
       filter by other struct_ops specific properties.  e.g. filter by
       tcp_congestion_ops or other kernel subsystem ops in the future.
    3) struct_ops requires the running kernel having BTF info.  That allows
       more flexibility in handling other kernel structs.  e.g. it can
       always dump the latest bpf_map_info.
    4) Also, "struct_ops" command is not intended to repeat all features
       already provided by "map" or "prog".  For example, if there really
       is a need to pin the struct_ops map, the user can use the "map" cmd
       to do that.
    
    While the first attempt was to reuse parts from map/prog.c,  it ended up
    not a lot to share.  The only obvious item is the map_parse_fds() but
    that still requires modifications to accommodate struct_ops map specific
    filtering (for the immediate and the future needs).  Together with the
    earlier mentioned differences, it is better to part away from map/prog.c.
    
    The initial set of subcmds are, register, unregister, show, and dump.
    
    For register, it registers all struct_ops maps that can be found in an
    obj file.  Option can be added in the future to specify a particular
    struct_ops map.  Also, the common bpf_tcp_cc is stateless (e.g.
    bpf_cubic.c and bpf_dctcp.c).  The "reuse map" feature is not
    implemented in this patch and it can be considered later also.
    
    For other subcmds, please see the man doc for details.
    
    A sample output of dump:
    [root@arch-fb-vm1 bpf]# bpftool struct_ops dump name cubic
    [{
            "bpf_map_info": {
                "type": 26,
                "id": 64,
                "key_size": 4,
                "value_size": 256,
                "max_entries": 1,
                "map_flags": 0,
                "name": "cubic",
                "ifindex": 0,
                "btf_vmlinux_value_type_id": 18452,
                "netns_dev": 0,
                "netns_ino": 0,
                "btf_id": 52,
                "btf_key_type_id": 0,
                "btf_value_type_id": 0
            }
        },{
            "bpf_struct_ops_tcp_congestion_ops": {
                "refcnt": {
                    "refs": {
                        "counter": 1
                    }
                },
                "state": "BPF_STRUCT_OPS_STATE_INUSE",
                "data": {
                    "list": {
                        "next": 0,
                        "prev": 0
                    },
                    "key": 0,
                    "flags": 0,
                    "init": "void (struct sock *) bictcp_init/prog_id:138",
                    "release": "void (struct sock *) 0",
                    "ssthresh": "u32 (struct sock *) bictcp_recalc_ssthresh/prog_id:141",
                    "cong_avoid": "void (struct sock *, u32, u32) bictcp_cong_avoid/prog_id:140",
                    "set_state": "void (struct sock *, u8) bictcp_state/prog_id:142",
                    "cwnd_event": "void (struct sock *, enum tcp_ca_event) bictcp_cwnd_event/prog_id:139",
                    "in_ack_event": "void (struct sock *, u32) 0",
                    "undo_cwnd": "u32 (struct sock *) tcp_reno_undo_cwnd/prog_id:144",
                    "pkts_acked": "void (struct sock *, const struct ack_sample *) bictcp_acked/prog_id:143",
                    "min_tso_segs": "u32 (struct sock *) 0",
                    "sndbuf_expand": "u32 (struct sock *) 0",
                    "cong_control": "void (struct sock *, const struct rate_sample *) 0",
                    "get_info": "size_t (struct sock *, u32, int *, union tcp_cc_info *) 0",
                    "name": "bpf_cubic",
                    "owner": 0
                }
            }
        }
    ]
    
    Signed-off-by: Martin KaFai Lau <kafai@fb.com>
    Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
    Acked-by: Quentin Monnet <quentin@isovalent.com>
    Link: https://lore.kernel.org/bpf/20200318171656.129650-1-kafai@fb.com

diff --git a/tools/bpf/bpftool/main.c b/tools/bpf/bpftool/main.c
index 06449e846e4b..466c269eabdd 100644
--- a/tools/bpf/bpftool/main.c
+++ b/tools/bpf/bpftool/main.c
@@ -58,7 +58,7 @@ static int do_help(int argc, char **argv)
 		"       %s batch file FILE\n"
 		"       %s version\n"
 		"\n"
-		"       OBJECT := { prog | map | cgroup | perf | net | feature | btf | gen }\n"
+		"       OBJECT := { prog | map | cgroup | perf | net | feature | btf | gen | struct_ops }\n"
 		"       " HELP_SPEC_OPTIONS "\n"
 		"",
 		bin_name, bin_name, bin_name);
@@ -221,6 +221,7 @@ static const struct cmd cmds[] = {
 	{ "feature",	do_feature },
 	{ "btf",	do_btf },
 	{ "gen",	do_gen },
+	{ "struct_ops",	do_struct_ops },
 	{ "version",	do_version },
 	{ 0 }
 };

commit 6ae32b29c09ba9b99c4c7317eed029587bd2706d
Author: Quentin Monnet <quentin@isovalent.com>
Date:   Wed Mar 11 02:12:05 2020 +0000

    tools: bpftool: Restore message on failure to guess program type
    
    In commit 4a3d6c6a6e4d ("libbpf: Reduce log level for custom section
    names"), log level for messages for libbpf_attach_type_by_name() and
    libbpf_prog_type_by_name() was downgraded from "info" to "debug". The
    latter function, in particular, is used by bpftool when attempting to
    load programs, and this change caused bpftool to exit with no hint or
    error message when it fails to detect the type of the program to load
    (unless "-d" option was provided).
    
    To help users understand why bpftool fails to load the program, let's do
    a second run of the function with log level in "debug" mode in case of
    failure.
    
    Before:
    
        # bpftool prog load sample_ret0.o /sys/fs/bpf/sample_ret0
        # echo $?
        255
    
    Or really verbose with -d flag:
    
        # bpftool -d prog load sample_ret0.o /sys/fs/bpf/sample_ret0
        libbpf: loading sample_ret0.o
        libbpf: section(1) .strtab, size 134, link 0, flags 0, type=3
        libbpf: skip section(1) .strtab
        libbpf: section(2) .text, size 16, link 0, flags 6, type=1
        libbpf: found program .text
        libbpf: section(3) .debug_abbrev, size 55, link 0, flags 0, type=1
        libbpf: skip section(3) .debug_abbrev
        libbpf: section(4) .debug_info, size 75, link 0, flags 0, type=1
        libbpf: skip section(4) .debug_info
        libbpf: section(5) .rel.debug_info, size 32, link 14, flags 0, type=9
        libbpf: skip relo .rel.debug_info(5) for section(4)
        libbpf: section(6) .debug_str, size 150, link 0, flags 30, type=1
        libbpf: skip section(6) .debug_str
        libbpf: section(7) .BTF, size 155, link 0, flags 0, type=1
        libbpf: section(8) .BTF.ext, size 80, link 0, flags 0, type=1
        libbpf: section(9) .rel.BTF.ext, size 32, link 14, flags 0, type=9
        libbpf: skip relo .rel.BTF.ext(9) for section(8)
        libbpf: section(10) .debug_frame, size 40, link 0, flags 0, type=1
        libbpf: skip section(10) .debug_frame
        libbpf: section(11) .rel.debug_frame, size 16, link 14, flags 0, type=9
        libbpf: skip relo .rel.debug_frame(11) for section(10)
        libbpf: section(12) .debug_line, size 74, link 0, flags 0, type=1
        libbpf: skip section(12) .debug_line
        libbpf: section(13) .rel.debug_line, size 16, link 14, flags 0, type=9
        libbpf: skip relo .rel.debug_line(13) for section(12)
        libbpf: section(14) .symtab, size 96, link 1, flags 0, type=2
        libbpf: looking for externs among 4 symbols...
        libbpf: collected 0 externs total
        libbpf: failed to guess program type from ELF section '.text'
        libbpf: supported section(type) names are: socket sk_reuseport kprobe/ [...]
    
    After:
    
        # bpftool prog load sample_ret0.o /sys/fs/bpf/sample_ret0
        libbpf: failed to guess program type from ELF section '.text'
        libbpf: supported section(type) names are: socket sk_reuseport kprobe/ [...]
    
    Signed-off-by: Quentin Monnet <quentin@isovalent.com>
    Signed-off-by: Alexei Starovoitov <ast@kernel.org>
    Acked-by: John Fastabend <john.fastabend@gmail.com>
    Link: https://lore.kernel.org/bpf/20200311021205.9755-1-quentin@isovalent.com
    Signed-off-by: Alexei Starovoitov <ast@kernel.org>

diff --git a/tools/bpf/bpftool/main.c b/tools/bpf/bpftool/main.c
index 6d41bbfc6459..06449e846e4b 100644
--- a/tools/bpf/bpftool/main.c
+++ b/tools/bpf/bpftool/main.c
@@ -79,13 +79,6 @@ static int do_version(int argc, char **argv)
 	return 0;
 }
 
-static int __printf(2, 0)
-print_all_levels(__maybe_unused enum libbpf_print_level level,
-		 const char *format, va_list args)
-{
-	return vfprintf(stderr, format, args);
-}
-
 int cmd_select(const struct cmd *cmds, int argc, char **argv,
 	       int (*help)(int argc, char **argv))
 {

commit 229c3b47b794e7257744224b21a95d3d9938d00a
Author: Toke Høiland-Jørgensen <toke@redhat.com>
Date:   Mon Jan 20 14:06:46 2020 +0100

    bpftool: Use consistent include paths for libbpf
    
    Fix bpftool to include libbpf header files with the bpf/ prefix, to be
    consistent with external users of the library. Also ensure that all
    includes of exported libbpf header files (those that are exported on 'make
    install' of the library) use bracketed includes instead of quoted.
    
    To make sure no new files are introduced that doesn't include the bpf/
    prefix in its include, remove tools/lib/bpf from the include path entirely,
    and use tools/lib instead.
    
    Fixes: 6910d7d3867a ("selftests/bpf: Ensure bpf_helper_defs.h are taken from selftests dir")
    Signed-off-by: Toke Høiland-Jørgensen <toke@redhat.com>
    Signed-off-by: Alexei Starovoitov <ast@kernel.org>
    Acked-by: Andrii Nakryiko <andriin@fb.com>
    Link: https://lore.kernel.org/bpf/157952560684.1683545.4765181397974997027.stgit@toke.dk

diff --git a/tools/bpf/bpftool/main.c b/tools/bpf/bpftool/main.c
index 1fe91c558508..6d41bbfc6459 100644
--- a/tools/bpf/bpftool/main.c
+++ b/tools/bpf/bpftool/main.c
@@ -9,8 +9,8 @@
 #include <stdlib.h>
 #include <string.h>
 
-#include <bpf.h>
-#include <libbpf.h>
+#include <bpf/bpf.h>
+#include <bpf/libbpf.h>
 
 #include "main.h"
 

commit 985ead416df39d6fe8e89580cc1db6aa273e0175
Author: Andrii Nakryiko <andriin@fb.com>
Date:   Fri Dec 13 17:43:37 2019 -0800

    bpftool: Add skeleton codegen command
    
    Add `bpftool gen skeleton` command, which takes in compiled BPF .o object file
    and dumps a BPF skeleton struct and related code to work with that skeleton.
    Skeleton itself is tailored to a specific structure of provided BPF object
    file, containing accessors (just plain struct fields) for every map and
    program, as well as dedicated space for bpf_links. If BPF program is using
    global variables, corresponding structure definitions of compatible memory
    layout are emitted as well, making it possible to initialize and subsequently
    read/update global variables values using simple and clear C syntax for
    accessing fields. This skeleton majorly improves usability of
    opening/loading/attaching of BPF object, as well as interacting with it
    throughout the lifetime of loaded BPF object.
    
    Generated skeleton struct has the following structure:
    
    struct <object-name> {
            /* used by libbpf's skeleton API */
            struct bpf_object_skeleton *skeleton;
            /* bpf_object for libbpf APIs */
            struct bpf_object *obj;
            struct {
                    /* for every defined map in BPF object: */
                    struct bpf_map *<map-name>;
            } maps;
            struct {
                    /* for every program in BPF object: */
                    struct bpf_program *<program-name>;
            } progs;
            struct {
                    /* for every program in BPF object: */
                    struct bpf_link *<program-name>;
            } links;
            /* for every present global data section: */
            struct <object-name>__<one of bss, data, or rodata> {
                    /* memory layout of corresponding data section,
                     * with every defined variable represented as a struct field
                     * with exactly the same type, but without const/volatile
                     * modifiers, e.g.:
                     */
                     int *my_var_1;
                     ...
            } *<one of bss, data, or rodata>;
    };
    
    This provides great usability improvements:
    - no need to look up maps and programs by name, instead just
      my_obj->maps.my_map or my_obj->progs.my_prog would give necessary
      bpf_map/bpf_program pointers, which user can pass to existing libbpf APIs;
    - pre-defined places for bpf_links, which will be automatically populated for
      program types that libbpf knows how to attach automatically (currently
      tracepoints, kprobe/kretprobe, raw tracepoint and tracing programs). On
      tearing down skeleton, all active bpf_links will be destroyed (meaning BPF
      programs will be detached, if they are attached). For cases in which libbpf
      doesn't know how to auto-attach BPF program, user can manually create link
      after loading skeleton and they will be auto-detached on skeleton
      destruction:
    
            my_obj->links.my_fancy_prog = bpf_program__attach_cgroup_whatever(
                    my_obj->progs.my_fancy_prog, <whatever extra param);
    
    - it's extremely easy and convenient to work with global data from userspace
      now. Both for read-only and read/write variables, it's possible to
      pre-initialize them before skeleton is loaded:
    
            skel = my_obj__open(raw_embed_data);
            my_obj->rodata->my_var = 123;
            my_obj__load(skel); /* 123 will be initialization value for my_var */
    
      After load, if kernel supports mmap() for BPF arrays, user can still read
      (and write for .bss and .data) variables values, but at that point it will
      be directly mmap()-ed to BPF array, backing global variables. This allows to
      seamlessly exchange data with BPF side. From userspace program's POV, all
      the pointers and memory contents stay the same, but mapped kernel memory
      changes to point to created map.
      If kernel doesn't yet support mmap() for BPF arrays, it's still possible to
      use those data section structs to pre-initialize .bss, .data, and .rodata,
      but after load their pointers will be reset to NULL, allowing user code to
      gracefully handle this condition, if necessary.
    
    Signed-off-by: Andrii Nakryiko <andriin@fb.com>
    Signed-off-by: Alexei Starovoitov <ast@kernel.org>
    Acked-by: Martin KaFai Lau <kafai@fb.com>
    Link: https://lore.kernel.org/bpf/20191214014341.3442258-14-andriin@fb.com

diff --git a/tools/bpf/bpftool/main.c b/tools/bpf/bpftool/main.c
index 4764581ff9ea..1fe91c558508 100644
--- a/tools/bpf/bpftool/main.c
+++ b/tools/bpf/bpftool/main.c
@@ -58,7 +58,7 @@ static int do_help(int argc, char **argv)
 		"       %s batch file FILE\n"
 		"       %s version\n"
 		"\n"
-		"       OBJECT := { prog | map | cgroup | perf | net | feature | btf }\n"
+		"       OBJECT := { prog | map | cgroup | perf | net | feature | btf | gen }\n"
 		"       " HELP_SPEC_OPTIONS "\n"
 		"",
 		bin_name, bin_name, bin_name);
@@ -227,6 +227,7 @@ static const struct cmd cmds[] = {
 	{ "net",	do_net },
 	{ "feature",	do_feature },
 	{ "btf",	do_btf },
+	{ "gen",	do_gen },
 	{ "version",	do_version },
 	{ 0 }
 };

commit 32e3e58e4c5910bb0d6024d151c2f559bb7e973c
Author: Andrii Nakryiko <andriin@fb.com>
Date:   Mon Oct 7 15:56:04 2019 -0700

    bpftool: Fix bpftool build by switching to bpf_object__open_file()
    
    As part of libbpf in 5e61f2707029 ("libbpf: stop enforcing kern_version,
    populate it for users") non-LIBBPF_API __bpf_object__open_xattr() API
    was removed from libbpf.h header. This broke bpftool, which relied on
    that function. This patch fixes the build by switching to newly added
    bpf_object__open_file() which provides the same capabilities, but is
    official and future-proof API.
    
    v1->v2:
    - fix prog_type shadowing (Stanislav).
    
    Fixes: 5e61f2707029 ("libbpf: stop enforcing kern_version, populate it for users")
    Reported-by: Stanislav Fomichev <sdf@google.com>
    Signed-off-by: Andrii Nakryiko <andriin@fb.com>
    Signed-off-by: Alexei Starovoitov <ast@kernel.org>
    Reviewed-by: Stanislav Fomichev <sdf@google.com>
    Link: https://lore.kernel.org/bpf/20191007225604.2006146-1-andriin@fb.com

diff --git a/tools/bpf/bpftool/main.c b/tools/bpf/bpftool/main.c
index 93d008687020..4764581ff9ea 100644
--- a/tools/bpf/bpftool/main.c
+++ b/tools/bpf/bpftool/main.c
@@ -27,7 +27,7 @@ bool json_output;
 bool show_pinned;
 bool block_mount;
 bool verifier_logs;
-int bpf_flags;
+bool relaxed_maps;
 struct pinned_obj_table prog_table;
 struct pinned_obj_table map_table;
 
@@ -396,7 +396,7 @@ int main(int argc, char **argv)
 			show_pinned = true;
 			break;
 		case 'm':
-			bpf_flags = MAPS_RELAX_COMPAT;
+			relaxed_maps = true;
 			break;
 		case 'n':
 			block_mount = true;

commit b0ead6d75a5b335287337e602e6b815e1115481c
Author: Quentin Monnet <quentin.monnet@netronome.com>
Date:   Thu Aug 15 15:32:19 2019 +0100

    tools: bpftool: fix format string for p_err() in detect_common_prefix()
    
    There is one call to the p_err() function in detect_common_prefix()
    where the message to print is passed directly as the first argument,
    without using a format string. This is harmless, but may trigger
    warnings if the "__printf()" attribute is used correctly for the p_err()
    function. Let's fix it by using a "%s" format string.
    
    Fixes: ba95c7452439 ("tools: bpftool: add "prog run" subcommand to test-run programs")
    Signed-off-by: Quentin Monnet <quentin.monnet@netronome.com>
    Reviewed-by: Jakub Kicinski <jakub.kicinski@netronome.com>
    Signed-off-by: Alexei Starovoitov <ast@kernel.org>

diff --git a/tools/bpf/bpftool/main.c b/tools/bpf/bpftool/main.c
index e916ff25697f..93d008687020 100644
--- a/tools/bpf/bpftool/main.c
+++ b/tools/bpf/bpftool/main.c
@@ -139,7 +139,7 @@ int detect_common_prefix(const char *arg, ...)
 	strncat(msg, "'", sizeof(msg) - strlen(msg) - 1);
 
 	if (count >= 2) {
-		p_err(msg);
+		p_err("%s", msg);
 		return -1;
 	}
 

commit ba95c7452439756d4f6dceb5a188b7c31dbbe5b6
Author: Quentin Monnet <quentin.monnet@netronome.com>
Date:   Fri Jul 5 18:54:33 2019 +0100

    tools: bpftool: add "prog run" subcommand to test-run programs
    
    Add a new "bpftool prog run" subcommand to run a loaded program on input
    data (and possibly with input context) passed by the user.
    
    Print output data (and output context if relevant) into a file or into
    the console. Print return value and duration for the test run into the
    console.
    
    A "repeat" argument can be passed to run the program several times in a
    row.
    
    The command does not perform any kind of verification based on program
    type (Is this program type allowed to use an input context?) or on data
    consistency (Can I work with empty input data?), this is left to the
    kernel.
    
    Example invocation:
    
        # perl -e 'print "\x0" x 14' | ./bpftool prog run \
                pinned /sys/fs/bpf/sample_ret0 \
                data_in - data_out - repeat 5
        0000000 0000 0000 0000 0000 0000 0000 0000      | ........ ......
        Return value: 0, duration (average): 260ns
    
    When one of data_in or ctx_in is "-", bpftool reads from standard input,
    in binary format. Other formats (JSON, hexdump) might be supported (via
    an optional command line keyword like "data_fmt_in") in the future if
    relevant, but this would require doing more parsing in bpftool.
    
    v2:
    - Fix argument names for function check_single_stdin(). (Yonghong)
    
    Signed-off-by: Quentin Monnet <quentin.monnet@netronome.com>
    Reviewed-by: Jakub Kicinski <jakub.kicinski@netronome.com>
    Acked-by: Yonghong Song <yhs@fb.com>
    Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>

diff --git a/tools/bpf/bpftool/main.c b/tools/bpf/bpftool/main.c
index 4879f6395c7e..e916ff25697f 100644
--- a/tools/bpf/bpftool/main.c
+++ b/tools/bpf/bpftool/main.c
@@ -117,6 +117,35 @@ bool is_prefix(const char *pfx, const char *str)
 	return !memcmp(str, pfx, strlen(pfx));
 }
 
+/* Last argument MUST be NULL pointer */
+int detect_common_prefix(const char *arg, ...)
+{
+	unsigned int count = 0;
+	const char *ref;
+	char msg[256];
+	va_list ap;
+
+	snprintf(msg, sizeof(msg), "ambiguous prefix: '%s' could be '", arg);
+	va_start(ap, arg);
+	while ((ref = va_arg(ap, const char *))) {
+		if (!is_prefix(arg, ref))
+			continue;
+		count++;
+		if (count > 1)
+			strncat(msg, "' or '", sizeof(msg) - strlen(msg) - 1);
+		strncat(msg, ref, sizeof(msg) - strlen(msg) - 1);
+	}
+	va_end(ap);
+	strncat(msg, "'", sizeof(msg) - strlen(msg) - 1);
+
+	if (count >= 2) {
+		p_err(msg);
+		return -1;
+	}
+
+	return 0;
+}
+
 void fprint_hex(FILE *f, void *arg, unsigned int n, const char *sep)
 {
 	unsigned char *data = arg;

commit 55d778076b0354b088a9a16d9ff584c887e17f42
Author: Quentin Monnet <quentin.monnet@netronome.com>
Date:   Fri May 24 11:36:48 2019 +0100

    tools: bpftool: make -d option print debug output from verifier
    
    The "-d" option is used to require all logs available for bpftool. So
    far it meant telling libbpf to print even debug-level information. But
    there is another source of info that can be made more verbose: when we
    attemt to load programs with bpftool, we can pass a log_level parameter
    to the verifier in order to control the amount of information that is
    printed to the console.
    
    Reuse the "-d" option to print all information the verifier can tell. At
    this time, this means logs related to BPF_LOG_LEVEL1, BPF_LOG_LEVEL2 and
    BPF_LOG_STATS. As mentioned in the discussion on the first version of
    this set, these macros are internal to the kernel
    (include/linux/bpf_verifier.h) and are not meant to be part of the
    stable user API, therefore we simply use the related constants to print
    whatever we can at this time, without trying to tell users what is
    log_level1 or what is statistics.
    
    Verifier logs are only used when loading programs for now (In the
    future: for loading BTF objects with bpftool? Although libbpf does not
    currently offer to print verifier info at debug level if no error
    occurred when loading BTF objects), so bpftool.rst and bpftool-prog.rst
    are the only man pages to get the update.
    
    v3:
    - Add details on log level and BTF loading at the end of commit log.
    
    v2:
    - Remove the possibility to select the log levels to use (v1 offered a
      combination of "log_level1", "log_level2" and "stats").
    - The macros from kernel header bpf_verifier.h are not used (and
      therefore not moved to UAPI header).
    - In v1 this was a distinct option, but is now merged in the only "-d"
      switch to activate libbpf and verifier debug-level logs all at the
      same time.
    
    Signed-off-by: Quentin Monnet <quentin.monnet@netronome.com>
    Reviewed-by: Jakub Kicinski <jakub.kicinski@netronome.com>
    Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>

diff --git a/tools/bpf/bpftool/main.c b/tools/bpf/bpftool/main.c
index d74293938a05..4879f6395c7e 100644
--- a/tools/bpf/bpftool/main.c
+++ b/tools/bpf/bpftool/main.c
@@ -26,6 +26,7 @@ bool pretty_output;
 bool json_output;
 bool show_pinned;
 bool block_mount;
+bool verifier_logs;
 int bpf_flags;
 struct pinned_obj_table prog_table;
 struct pinned_obj_table map_table;
@@ -373,6 +374,7 @@ int main(int argc, char **argv)
 			break;
 		case 'd':
 			libbpf_set_print(print_all_levels);
+			verifier_logs = true;
 			break;
 		default:
 			p_err("unrecognized option '%s'", argv[optind - 1]);

commit 775bc8ada89b376b4bbbce31aba47f4117fe1d9c
Author: Quentin Monnet <quentin.monnet@netronome.com>
Date:   Fri May 24 11:36:46 2019 +0100

    tools: bpftool: add -d option to get debug output from libbpf
    
    libbpf has three levels of priority for output messages: warn, info,
    debug. By default, debug output is not printed to the console.
    
    Add a new "--debug" (short name: "-d") option to bpftool to print libbpf
    logs for all three levels.
    
    Internally, we simply use the function provided by libbpf to replace the
    default printing function by one that prints logs regardless of their
    level.
    
    v2:
    - Remove the possibility to select the log-levels to use (v1 offered a
      combination of "warn", "info" and "debug").
    - Rename option and offer a short name: -d|--debug.
    - Add option description to all bpftool manual pages (instead of
      bpftool-prog.rst only), as all commands use libbpf.
    
    Signed-off-by: Quentin Monnet <quentin.monnet@netronome.com>
    Reviewed-by: Jakub Kicinski <jakub.kicinski@netronome.com>
    Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>

diff --git a/tools/bpf/bpftool/main.c b/tools/bpf/bpftool/main.c
index 1ac1fc520e6a..d74293938a05 100644
--- a/tools/bpf/bpftool/main.c
+++ b/tools/bpf/bpftool/main.c
@@ -10,6 +10,7 @@
 #include <string.h>
 
 #include <bpf.h>
+#include <libbpf.h>
 
 #include "main.h"
 
@@ -77,6 +78,13 @@ static int do_version(int argc, char **argv)
 	return 0;
 }
 
+static int __printf(2, 0)
+print_all_levels(__maybe_unused enum libbpf_print_level level,
+		 const char *format, va_list args)
+{
+	return vfprintf(stderr, format, args);
+}
+
 int cmd_select(const struct cmd *cmds, int argc, char **argv,
 	       int (*help)(int argc, char **argv))
 {
@@ -317,6 +325,7 @@ int main(int argc, char **argv)
 		{ "bpffs",	no_argument,	NULL,	'f' },
 		{ "mapcompat",	no_argument,	NULL,	'm' },
 		{ "nomount",	no_argument,	NULL,	'n' },
+		{ "debug",	no_argument,	NULL,	'd' },
 		{ 0 }
 	};
 	int opt, ret;
@@ -332,7 +341,7 @@ int main(int argc, char **argv)
 	hash_init(map_table.table);
 
 	opterr = 0;
-	while ((opt = getopt_long(argc, argv, "Vhpjfmn",
+	while ((opt = getopt_long(argc, argv, "Vhpjfmnd",
 				  options, NULL)) >= 0) {
 		switch (opt) {
 		case 'V':
@@ -362,6 +371,9 @@ int main(int argc, char **argv)
 		case 'n':
 			block_mount = true;
 			break;
+		case 'd':
+			libbpf_set_print(print_all_levels);
+			break;
 		default:
 			p_err("unrecognized option '%s'", argv[optind - 1]);
 			if (json_output)

commit c93cc69004df340d71a9ab3433b8e5c9fd1fca7a
Author: Andrii Nakryiko <andriin@fb.com>
Date:   Thu Apr 25 15:30:08 2019 -0700

    bpftool: add ability to dump BTF types
    
    Add new `btf dump` sub-command to bpftool. It allows to dump
    human-readable low-level BTF types representation of BTF types. BTF can
    be retrieved from few different sources:
      - from BTF object by ID;
      - from PROG, if it has associated BTF;
      - from MAP, if it has associated BTF data; it's possible to narrow
        down types to either key type, value type, both, or all BTF types;
      - from ELF file (.BTF section).
    
    Output format mostly follows BPF verifier log format with few notable
    exceptions:
      - all the type/field/param/etc names are enclosed in single quotes to
        allow easier grepping and to stand out a little bit more;
      - FUNC_PROTO output follows STRUCT/UNION/ENUM format of having one
        line per each argument; this is more uniform and allows easy
        grepping, as opposed to succinct, but inconvenient format that BPF
        verifier log is using.
    
    Cc: Daniel Borkmann <daniel@iogearbox.net>
    Cc: Alexei Starovoitov <ast@fb.com>
    Cc: Yonghong Song <yhs@fb.com>
    Cc: Martin KaFai Lau <kafai@fb.com>
    Cc: Song Liu <songliubraving@fb.com>
    Cc: Arnaldo Carvalho de Melo <acme@redhat.com>
    Acked-by: Yonghong Song <yhs@fb.com>
    Signed-off-by: Andrii Nakryiko <andriin@fb.com>
    Signed-off-by: Alexei Starovoitov <ast@kernel.org>

diff --git a/tools/bpf/bpftool/main.c b/tools/bpf/bpftool/main.c
index a9d5e9e6a732..1ac1fc520e6a 100644
--- a/tools/bpf/bpftool/main.c
+++ b/tools/bpf/bpftool/main.c
@@ -56,7 +56,7 @@ static int do_help(int argc, char **argv)
 		"       %s batch file FILE\n"
 		"       %s version\n"
 		"\n"
-		"       OBJECT := { prog | map | cgroup | perf | net | feature }\n"
+		"       OBJECT := { prog | map | cgroup | perf | net | feature | btf }\n"
 		"       " HELP_SPEC_OPTIONS "\n"
 		"",
 		bin_name, bin_name, bin_name);
@@ -188,6 +188,7 @@ static const struct cmd cmds[] = {
 	{ "perf",	do_perf },
 	{ "net",	do_net },
 	{ "feature",	do_feature },
+	{ "btf",	do_btf },
 	{ "version",	do_version },
 	{ 0 }
 };

commit 49eb7ab3b2b5a106307494d2a46248ecb1530578
Author: Quentin Monnet <quentin.monnet@netronome.com>
Date:   Thu Jan 17 15:27:50 2019 +0000

    tools: bpftool: add basic probe capability, probe syscall availability
    
    Add a new component and command for bpftool, in order to probe the
    system to dump a set of eBPF-related parameters so that users can know
    what features are available on the system.
    
    Parameters are dumped in plain or JSON output (with -j/-p options).
    
    The current patch introduces probing of one simple parameter:
    availability of the bpf() system call. Later commits
    will add other probes.
    
    Sample output:
    
        # bpftool feature probe kernel
        Scanning system call availability...
        bpf() syscall is available
    
        # bpftool --json --pretty feature probe kernel
        {
            "syscall_config": {
                "have_bpf_syscall": true
            }
        }
    
    The optional "kernel" keyword enforces probing of the current system,
    which is the only possible behaviour at this stage. It can be safely
    omitted.
    
    The feature comes with the relevant man page, but bash completion will
    come in a dedicated commit.
    
    v3:
    - Do not probe kernel version. Contrarily to what is written below for
      v2, we can have the kernel version retrieved in libbpf instead of
      bpftool (in the patch adding probing for program types).
    
    v2:
    - Remove C-style macros output from this patch.
    - Even though kernel version is no longer needed for testing kprobes
      availability, note that we still collect it in this patch so that
      bpftool gets able to probe (in next patches) older kernels as well.
    
    Signed-off-by: Quentin Monnet <quentin.monnet@netronome.com>
    Reviewed-by: Jakub Kicinski <jakub.kicinski@netronome.com>
    Reviewed-by: Stanislav Fomichev <sdf@google.com>
    Signed-off-by: Alexei Starovoitov <ast@kernel.org>

diff --git a/tools/bpf/bpftool/main.c b/tools/bpf/bpftool/main.c
index f44a1c2c4ea0..a9d5e9e6a732 100644
--- a/tools/bpf/bpftool/main.c
+++ b/tools/bpf/bpftool/main.c
@@ -56,7 +56,7 @@ static int do_help(int argc, char **argv)
 		"       %s batch file FILE\n"
 		"       %s version\n"
 		"\n"
-		"       OBJECT := { prog | map | cgroup | perf | net }\n"
+		"       OBJECT := { prog | map | cgroup | perf | net | feature }\n"
 		"       " HELP_SPEC_OPTIONS "\n"
 		"",
 		bin_name, bin_name, bin_name);
@@ -187,6 +187,7 @@ static const struct cmd cmds[] = {
 	{ "cgroup",	do_cgroup },
 	{ "perf",	do_perf },
 	{ "net",	do_net },
+	{ "feature",	do_feature },
 	{ "version",	do_version },
 	{ 0 }
 };

commit 33221307c3f993500a9cfc6900811058c6bfc152
Author: Quentin Monnet <quentin.monnet@netronome.com>
Date:   Tue Dec 18 10:13:19 2018 +0000

    tools: bpftool: add an option to prevent auto-mount of bpffs, tracefs
    
    In order to make life easier for users, bpftool automatically attempts
    to mount the BPF virtual file system, if it is not mounted already,
    before trying to pin objects in it. Similarly, it attempts to mount
    tracefs if necessary before trying to dump the trace pipe to the
    console.
    
    While mounting file systems on-the-fly can improve user experience, some
    administrators might prefer to avoid that. Let's add an option to block
    these mount attempts. Note that it does not prevent automatic mounting
    of tracefs by debugfs for the "bpftool prog tracelog" command.
    
    Signed-off-by: Quentin Monnet <quentin.monnet@netronome.com>
    Reviewed-by: Jakub Kicinski <jakub.kicinski@netronome.com>
    Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>

diff --git a/tools/bpf/bpftool/main.c b/tools/bpf/bpftool/main.c
index 9e657e7d5172..f44a1c2c4ea0 100644
--- a/tools/bpf/bpftool/main.c
+++ b/tools/bpf/bpftool/main.c
@@ -24,6 +24,7 @@ json_writer_t *json_wtr;
 bool pretty_output;
 bool json_output;
 bool show_pinned;
+bool block_mount;
 int bpf_flags;
 struct pinned_obj_table prog_table;
 struct pinned_obj_table map_table;
@@ -313,6 +314,7 @@ int main(int argc, char **argv)
 		{ "version",	no_argument,	NULL,	'V' },
 		{ "bpffs",	no_argument,	NULL,	'f' },
 		{ "mapcompat",	no_argument,	NULL,	'm' },
+		{ "nomount",	no_argument,	NULL,	'n' },
 		{ 0 }
 	};
 	int opt, ret;
@@ -321,13 +323,14 @@ int main(int argc, char **argv)
 	pretty_output = false;
 	json_output = false;
 	show_pinned = false;
+	block_mount = false;
 	bin_name = argv[0];
 
 	hash_init(prog_table.table);
 	hash_init(map_table.table);
 
 	opterr = 0;
-	while ((opt = getopt_long(argc, argv, "Vhpjfm",
+	while ((opt = getopt_long(argc, argv, "Vhpjfmn",
 				  options, NULL)) >= 0) {
 		switch (opt) {
 		case 'V':
@@ -354,6 +357,9 @@ int main(int argc, char **argv)
 		case 'm':
 			bpf_flags = MAPS_RELAX_COMPAT;
 			break;
+		case 'n':
+			block_mount = true;
+			break;
 		default:
 			p_err("unrecognized option '%s'", argv[optind - 1]);
 			if (json_output)

commit 02ff58dcf70ad7d11b01523dc404166ed11021da
Author: Jakub Kicinski <jakub.kicinski@netronome.com>
Date:   Wed Dec 12 19:59:25 2018 -0800

    tools: bpftool: replace Netronome boilerplate with SPDX license headers
    
    Replace the repeated license text with SDPX identifiers.
    
    Signed-off-by: Jakub Kicinski <jakub.kicinski@netronome.com>
    Acked-by: Roman Gushchin <guro@fb.com>
    Acked-by: YueHaibing <yuehaibing@huawei.com>
    Acked-by: Yonghong Song <yhs@fb.com>
    Acked-by: Stanislav Fomichev <sdf@google.com>
    Acked-by: Sean Young <sean@mess.org>
    Acked-by: Jiri Benc <jbenc@redhat.com>
    Acked-by: David Calavera <david.calavera@gmail.com>
    Acked-by: Andrey Ignatov <rdna@fb.com>
    Acked-by: Joe Stringer <joe@wand.net.nz>
    Acked-by: David Ahern <dsahern@gmail.com>
    Acked-by: Alexei Starovoitov <alexei.starovoitov@gmail.com>
    Acked-by: Petar Penkov <ppenkov@stanford.edu>
    Acked-by: Sandipan Das <sandipan@linux.ibm.com>
    Acked-by: Prashant Bhole <bhole_prashant_q7@lab.ntt.co.jp>
    Acked-by: Stephen Hemminger <stephen@networkplumber.org>
    Acked-by: John Fastabend <john.fastabend@gmail.com>
    Acked-by: Taeung Song <treeze.taeung@gmail.com>
    Acked-by: Jiri Olsa <jolsa@kernel.org>
    Acked-by: Daniel Borkmann <daniel@iogearbox.net>
    CC: okash.khawaja@gmail.com
    Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>

diff --git a/tools/bpf/bpftool/main.c b/tools/bpf/bpftool/main.c
index 5c4c1cd5a7ba..9e657e7d5172 100644
--- a/tools/bpf/bpftool/main.c
+++ b/tools/bpf/bpftool/main.c
@@ -1,35 +1,5 @@
-/*
- * Copyright (C) 2017-2018 Netronome Systems, Inc.
- *
- * This software is dual licensed under the GNU General License Version 2,
- * June 1991 as shown in the file COPYING in the top-level directory of this
- * source tree or the BSD 2-Clause License provided below.  You have the
- * option to license this software under the complete terms of either license.
- *
- * The BSD 2-Clause License:
- *
- *     Redistribution and use in source and binary forms, with or
- *     without modification, are permitted provided that the following
- *     conditions are met:
- *
- *      1. Redistributions of source code must retain the above
- *         copyright notice, this list of conditions and the following
- *         disclaimer.
- *
- *      2. Redistributions in binary form must reproduce the above
- *         copyright notice, this list of conditions and the following
- *         disclaimer in the documentation and/or other materials
- *         provided with the distribution.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
- * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
- * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
- * SOFTWARE.
- */
+// SPDX-License-Identifier: (GPL-2.0-only OR BSD-2-Clause)
+/* Copyright (C) 2017-2018 Netronome Systems, Inc. */
 
 #include <ctype.h>
 #include <errno.h>

commit 29a9c10e4110e368443f0b606d71557edee7f2cc
Author: Stanislav Fomichev <sdf@google.com>
Date:   Mon Nov 12 13:44:10 2018 -0800

    bpftool: make libbfd optional
    
    Make it possible to build bpftool without libbfd. libbfd and libopcodes are
    typically provided in dev/dbg packages (binutils-dev in debian) which we
    usually don't have installed on the fleet machines and we'd like a way to have
    bpftool version that works without installing any additional packages.
    This excludes support for disassembling jit-ted code and prints an error if
    the user tries to use these features.
    
    Tested by:
    cat > FEATURES_DUMP.bpftool <<EOF
    feature-libbfd=0
    feature-disassembler-four-args=1
    feature-reallocarray=0
    feature-libelf=1
    feature-libelf-mmap=1
    feature-bpf=1
    EOF
    FEATURES_DUMP=$PWD/FEATURES_DUMP.bpftool make
    ldd bpftool | grep libbfd
    
    Signed-off-by: Stanislav Fomichev <sdf@google.com>
    Acked-by: Jakub Kicinski <jakub.kicinski@netronome.com>
    Signed-off-by: Alexei Starovoitov <ast@kernel.org>

diff --git a/tools/bpf/bpftool/main.c b/tools/bpf/bpftool/main.c
index 75a3296dc0bc..5c4c1cd5a7ba 100644
--- a/tools/bpf/bpftool/main.c
+++ b/tools/bpf/bpftool/main.c
@@ -31,7 +31,6 @@
  * SOFTWARE.
  */
 
-#include <bfd.h>
 #include <ctype.h>
 #include <errno.h>
 #include <getopt.h>
@@ -399,8 +398,6 @@ int main(int argc, char **argv)
 	if (argc < 0)
 		usage();
 
-	bfd_init();
-
 	ret = cmd_select(cmds, argc, argv, do_help);
 
 	if (json_output)

commit 06ee9da6a8b49e0e12b7a825dbe6ad243d5463e2
Author: Quentin Monnet <quentin.monnet@netronome.com>
Date:   Sat Oct 20 23:01:49 2018 +0100

    tools: bpftool: print nb of cmds to stdout (not stderr) for batch mode
    
    When batch mode is used and all commands succeeds, bpftool prints the
    number of commands processed to stderr. There is no particular reason to
    use stderr for this, we could as well use stdout. It would avoid getting
    unnecessary output on stderr if the standard ouptut is redirected, for
    example.
    
    Reported-by: David Beckett <david.beckett@netronome.com>
    Signed-off-by: Quentin Monnet <quentin.monnet@netronome.com>
    Reviewed-by: Jakub Kicinski <jakub.kicinski@netronome.com>
    Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>

diff --git a/tools/bpf/bpftool/main.c b/tools/bpf/bpftool/main.c
index 828dde30e9ec..75a3296dc0bc 100644
--- a/tools/bpf/bpftool/main.c
+++ b/tools/bpf/bpftool/main.c
@@ -321,7 +321,8 @@ static int do_batch(int argc, char **argv)
 		p_err("reading batch file failed: %s", strerror(errno));
 		err = -1;
 	} else {
-		p_info("processed %d commands", lines);
+		if (!json_output)
+			printf("processed %d commands\n", lines);
 		err = 0;
 	}
 err_close:

commit c034a177d3c898f370f52877e7252da8c4f8235c
Author: John Fastabend <john.fastabend@gmail.com>
Date:   Mon Oct 15 11:19:55 2018 -0700

    bpf: bpftool, add flag to allow non-compat map definitions
    
    Multiple map definition structures exist and user may have non-zero
    fields in their definition that are not recognized by bpftool and
    libbpf. The normal behavior is to then fail loading the map. Although
    this is a good default behavior users may still want to load the map
    for debugging or other reasons. This patch adds a --mapcompat flag
    that can be used to override the default behavior and allow loading
    the map even when it has additional non-zero fields.
    
    For now the only user is 'bpftool prog' we can switch over other
    subcommands as needed. The library exposes an API that consumes
    a flags field now but I kept the original API around also in case
    users of the API don't want to expose this. The flags field is an
    int in case we need more control over how the API call handles
    errors/features/etc in the future.
    
    Signed-off-by: John Fastabend <john.fastabend@gmail.com>
    Acked-by: Jakub Kicinski <jakub.kicinski@netronome.com>
    Signed-off-by: Alexei Starovoitov <ast@kernel.org>

diff --git a/tools/bpf/bpftool/main.c b/tools/bpf/bpftool/main.c
index 79dc3f193547..828dde30e9ec 100644
--- a/tools/bpf/bpftool/main.c
+++ b/tools/bpf/bpftool/main.c
@@ -55,6 +55,7 @@ json_writer_t *json_wtr;
 bool pretty_output;
 bool json_output;
 bool show_pinned;
+int bpf_flags;
 struct pinned_obj_table prog_table;
 struct pinned_obj_table map_table;
 
@@ -341,6 +342,7 @@ int main(int argc, char **argv)
 		{ "pretty",	no_argument,	NULL,	'p' },
 		{ "version",	no_argument,	NULL,	'V' },
 		{ "bpffs",	no_argument,	NULL,	'f' },
+		{ "mapcompat",	no_argument,	NULL,	'm' },
 		{ 0 }
 	};
 	int opt, ret;
@@ -355,7 +357,7 @@ int main(int argc, char **argv)
 	hash_init(map_table.table);
 
 	opterr = 0;
-	while ((opt = getopt_long(argc, argv, "Vhpjf",
+	while ((opt = getopt_long(argc, argv, "Vhpjfm",
 				  options, NULL)) >= 0) {
 		switch (opt) {
 		case 'V':
@@ -379,6 +381,9 @@ int main(int argc, char **argv)
 		case 'f':
 			show_pinned = true;
 			break;
+		case 'm':
+			bpf_flags = MAPS_RELAX_COMPAT;
+			break;
 		default:
 			p_err("unrecognized option '%s'", argv[optind - 1]);
 			if (json_output)

commit f6f3bac08ff9855d803081a353a1fafaa8845739
Author: Yonghong Song <yhs@fb.com>
Date:   Wed Sep 5 16:58:06 2018 -0700

    tools/bpf: bpftool: add net support
    
    Add "bpftool net" support. Networking devices are enumerated
    to dump device index/name associated with xdp progs.
    
    For each networking device, tc classes and qdiscs are enumerated
    in order to check their bpf filters.
    In addition, root handle and clsact ingress/egress are also checked for
    bpf filters.  Not all filter information is printed out. Only ifindex,
    kind, filter name, prog_id and tag are printed out, which are good
    enough to show attachment information. If the filter action
    is a bpf action, its bpf program id, bpf name and tag will be
    printed out as well.
    
    For example,
      $ ./bpftool net
      xdp [
      ifindex 2 devname eth0 prog_id 198
      ]
      tc_filters [
      ifindex 2 kind qdisc_htb name prefix_matcher.o:[cls_prefix_matcher_htb]
                prog_id 111727 tag d08fe3b4319bc2fd act []
      ifindex 2 kind qdisc_clsact_ingress name fbflow_icmp
                prog_id 130246 tag 3f265c7f26db62c9 act []
      ifindex 2 kind qdisc_clsact_egress name prefix_matcher.o:[cls_prefix_matcher_clsact]
                prog_id 111726 tag 99a197826974c876
      ifindex 2 kind qdisc_clsact_egress name cls_fg_dscp
                prog_id 108619 tag dc4630674fd72dcc act []
      ifindex 2 kind qdisc_clsact_egress name fbflow_egress
                prog_id 130245 tag 72d2d830d6888d2c
      ]
      $ ./bpftool -jp net
      [{
            "xdp": [{
                    "ifindex": 2,
                    "devname": "eth0",
                    "prog_id": 198
                }
            ],
            "tc_filters": [{
                    "ifindex": 2,
                    "kind": "qdisc_htb",
                    "name": "prefix_matcher.o:[cls_prefix_matcher_htb]",
                    "prog_id": 111727,
                    "tag": "d08fe3b4319bc2fd",
                    "act": []
                },{
                    "ifindex": 2,
                    "kind": "qdisc_clsact_ingress",
                    "name": "fbflow_icmp",
                    "prog_id": 130246,
                    "tag": "3f265c7f26db62c9",
                    "act": []
                },{
                    "ifindex": 2,
                    "kind": "qdisc_clsact_egress",
                    "name": "prefix_matcher.o:[cls_prefix_matcher_clsact]",
                    "prog_id": 111726,
                    "tag": "99a197826974c876"
                },{
                    "ifindex": 2,
                    "kind": "qdisc_clsact_egress",
                    "name": "cls_fg_dscp",
                    "prog_id": 108619,
                    "tag": "dc4630674fd72dcc",
                    "act": []
                },{
                    "ifindex": 2,
                    "kind": "qdisc_clsact_egress",
                    "name": "fbflow_egress",
                    "prog_id": 130245,
                    "tag": "72d2d830d6888d2c"
                }
            ]
        }
      ]
    
    Signed-off-by: Yonghong Song <yhs@fb.com>
    Signed-off-by: Alexei Starovoitov <ast@kernel.org>

diff --git a/tools/bpf/bpftool/main.c b/tools/bpf/bpftool/main.c
index d15a62be6cf0..79dc3f193547 100644
--- a/tools/bpf/bpftool/main.c
+++ b/tools/bpf/bpftool/main.c
@@ -85,7 +85,7 @@ static int do_help(int argc, char **argv)
 		"       %s batch file FILE\n"
 		"       %s version\n"
 		"\n"
-		"       OBJECT := { prog | map | cgroup | perf }\n"
+		"       OBJECT := { prog | map | cgroup | perf | net }\n"
 		"       " HELP_SPEC_OPTIONS "\n"
 		"",
 		bin_name, bin_name, bin_name);
@@ -215,6 +215,7 @@ static const struct cmd cmds[] = {
 	{ "map",	do_map },
 	{ "cgroup",	do_cgroup },
 	{ "perf",	do_perf },
+	{ "net",	do_net },
 	{ "version",	do_version },
 	{ 0 }
 };

commit 71e07ddcdc03000e37acfc6e757f70c81a963d58
Author: Jakub Kicinski <jakub.kicinski@netronome.com>
Date:   Thu Jun 28 14:41:40 2018 -0700

    tools: bpftool: drop unnecessary Author comments
    
    Drop my author comments, those are from the early days of
    bpftool and make little sense in tree, where we have quite
    a few people contributing and git to attribute the work.
    
    While at it bump some copyrights.
    
    Signed-off-by: Jakub Kicinski <jakub.kicinski@netronome.com>
    Reviewed-by: Quentin Monnet <quentin.monnet@netronome.com>
    Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>

diff --git a/tools/bpf/bpftool/main.c b/tools/bpf/bpftool/main.c
index eea7f14355f3..d15a62be6cf0 100644
--- a/tools/bpf/bpftool/main.c
+++ b/tools/bpf/bpftool/main.c
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2017 Netronome Systems, Inc.
+ * Copyright (C) 2017-2018 Netronome Systems, Inc.
  *
  * This software is dual licensed under the GNU General License Version 2,
  * June 1991 as shown in the file COPYING in the top-level directory of this
@@ -31,8 +31,6 @@
  * SOFTWARE.
  */
 
-/* Author: Jakub Kicinski <kubakici@wp.pl> */
-
 #include <bfd.h>
 #include <ctype.h>
 #include <errno.h>

commit b04df400c30235fa347313c9e2a0695549bd2c8e
Author: Yonghong Song <yhs@fb.com>
Date:   Thu May 24 11:21:58 2018 -0700

    tools/bpftool: add perf subcommand
    
    The new command "bpftool perf [show | list]" will traverse
    all processes under /proc, and if any fd is associated
    with a perf event, it will print out related perf event
    information. Documentation is also added.
    
    Below is an example to show the results using bcc commands.
    Running the following 4 bcc commands:
      kprobe:     trace.py '__x64_sys_nanosleep'
      kretprobe:  trace.py 'r::__x64_sys_nanosleep'
      tracepoint: trace.py 't:syscalls:sys_enter_nanosleep'
      uprobe:     trace.py 'p:/home/yhs/a.out:main'
    
    The bpftool command line and result:
    
      $ bpftool perf
      pid 21711  fd 5: prog_id 5  kprobe  func __x64_sys_write  offset 0
      pid 21765  fd 5: prog_id 7  kretprobe  func __x64_sys_nanosleep  offset 0
      pid 21767  fd 5: prog_id 8  tracepoint  sys_enter_nanosleep
      pid 21800  fd 5: prog_id 9  uprobe  filename /home/yhs/a.out  offset 1159
    
      $ bpftool -j perf
      [{"pid":21711,"fd":5,"prog_id":5,"fd_type":"kprobe","func":"__x64_sys_write","offset":0}, \
       {"pid":21765,"fd":5,"prog_id":7,"fd_type":"kretprobe","func":"__x64_sys_nanosleep","offset":0}, \
       {"pid":21767,"fd":5,"prog_id":8,"fd_type":"tracepoint","tracepoint":"sys_enter_nanosleep"}, \
       {"pid":21800,"fd":5,"prog_id":9,"fd_type":"uprobe","filename":"/home/yhs/a.out","offset":1159}]
    
      $ bpftool prog
      5: kprobe  name probe___x64_sys  tag e495a0c82f2c7a8d  gpl
              loaded_at 2018-05-15T04:46:37-0700  uid 0
              xlated 200B  not jited  memlock 4096B  map_ids 4
      7: kprobe  name probe___x64_sys  tag f2fdee479a503abf  gpl
              loaded_at 2018-05-15T04:48:32-0700  uid 0
              xlated 200B  not jited  memlock 4096B  map_ids 7
      8: tracepoint  name tracepoint__sys  tag 5390badef2395fcf  gpl
              loaded_at 2018-05-15T04:48:48-0700  uid 0
              xlated 200B  not jited  memlock 4096B  map_ids 8
      9: kprobe  name probe_main_1  tag 0a87bdc2e2953b6d  gpl
              loaded_at 2018-05-15T04:49:52-0700  uid 0
              xlated 200B  not jited  memlock 4096B  map_ids 9
    
      $ ps ax | grep "python ./trace.py"
      21711 pts/0    T      0:03 python ./trace.py __x64_sys_write
      21765 pts/0    S+     0:00 python ./trace.py r::__x64_sys_nanosleep
      21767 pts/2    S+     0:00 python ./trace.py t:syscalls:sys_enter_nanosleep
      21800 pts/3    S+     0:00 python ./trace.py p:/home/yhs/a.out:main
      22374 pts/1    S+     0:00 grep --color=auto python ./trace.py
    
    Reviewed-by: Jakub Kicinski <jakub.kicinski@netronome.com>
    Signed-off-by: Yonghong Song <yhs@fb.com>
    Signed-off-by: Alexei Starovoitov <ast@kernel.org>

diff --git a/tools/bpf/bpftool/main.c b/tools/bpf/bpftool/main.c
index 1ec852d21d44..eea7f14355f3 100644
--- a/tools/bpf/bpftool/main.c
+++ b/tools/bpf/bpftool/main.c
@@ -87,7 +87,7 @@ static int do_help(int argc, char **argv)
 		"       %s batch file FILE\n"
 		"       %s version\n"
 		"\n"
-		"       OBJECT := { prog | map | cgroup }\n"
+		"       OBJECT := { prog | map | cgroup | perf }\n"
 		"       " HELP_SPEC_OPTIONS "\n"
 		"",
 		bin_name, bin_name, bin_name);
@@ -216,6 +216,7 @@ static const struct cmd cmds[] = {
 	{ "prog",	do_prog },
 	{ "map",	do_map },
 	{ "cgroup",	do_cgroup },
+	{ "perf",	do_perf },
 	{ "version",	do_version },
 	{ 0 }
 };

commit 668da745af3c29d5742238ef278a1b2055c97e51
Author: Quentin Monnet <quentin.monnet@netronome.com>
Date:   Thu Mar 1 20:20:11 2018 -0800

    tools: bpftool: add support for quotations in batch files
    
    Improve argument parsing from batch input files in order to support
    arguments enclosed between single (') or double quotes ("). For example,
    this command can now be parsed in batch mode:
    
        bpftool prog dump xlated id 1337 file "/tmp/my file with spaces"
    
    The function responsible for parsing command arguments is copied from
    its counterpart in lib/utils.c in iproute2 package.
    
    Signed-off-by: Quentin Monnet <quentin.monnet@netronome.com>
    Acked-by: Jakub Kicinski <jakub.kicinski@netronome.com>
    Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>

diff --git a/tools/bpf/bpftool/main.c b/tools/bpf/bpftool/main.c
index 1da54a9b5ea3..1ec852d21d44 100644
--- a/tools/bpf/bpftool/main.c
+++ b/tools/bpf/bpftool/main.c
@@ -160,6 +160,54 @@ void fprint_hex(FILE *f, void *arg, unsigned int n, const char *sep)
 	}
 }
 
+/* Split command line into argument vector. */
+static int make_args(char *line, char *n_argv[], int maxargs, int cmd_nb)
+{
+	static const char ws[] = " \t\r\n";
+	char *cp = line;
+	int n_argc = 0;
+
+	while (*cp) {
+		/* Skip leading whitespace. */
+		cp += strspn(cp, ws);
+
+		if (*cp == '\0')
+			break;
+
+		if (n_argc >= (maxargs - 1)) {
+			p_err("too many arguments to command %d", cmd_nb);
+			return -1;
+		}
+
+		/* Word begins with quote. */
+		if (*cp == '\'' || *cp == '"') {
+			char quote = *cp++;
+
+			n_argv[n_argc++] = cp;
+			/* Find ending quote. */
+			cp = strchr(cp, quote);
+			if (!cp) {
+				p_err("unterminated quoted string in command %d",
+				      cmd_nb);
+				return -1;
+			}
+		} else {
+			n_argv[n_argc++] = cp;
+
+			/* Find end of word. */
+			cp += strcspn(cp, ws);
+			if (*cp == '\0')
+				break;
+		}
+
+		/* Separate words. */
+		*cp++ = 0;
+	}
+	n_argv[n_argc] = NULL;
+
+	return n_argc;
+}
+
 static int do_batch(int argc, char **argv);
 
 static const struct cmd cmds[] = {
@@ -241,22 +289,11 @@ static int do_batch(int argc, char **argv)
 			strcat(buf, contline);
 		}
 
-		n_argc = 0;
-		n_argv[n_argc] = strtok(buf, " \t\n");
-
-		while (n_argv[n_argc]) {
-			n_argc++;
-			if (n_argc == ARRAY_SIZE(n_argv)) {
-				p_err("command %d has too many arguments, skip",
-				      lines);
-				n_argc = 0;
-				break;
-			}
-			n_argv[n_argc] = strtok(NULL, " \t\n");
-		}
-
+		n_argc = make_args(buf, n_argv, BATCH_ARG_NB_MAX, lines);
 		if (!n_argc)
 			continue;
+		if (n_argc < 0)
+			goto err_close;
 
 		if (json_output) {
 			jsonw_start_object(json_wtr);

commit 416656bbaa57a5be75514498491b7e24c58537c1
Author: Quentin Monnet <quentin.monnet@netronome.com>
Date:   Thu Mar 1 20:20:10 2018 -0800

    tools: bpftool: read from stdin when batch file name is "-"
    
    Make bpftool read its command list from standard input when the name if
    the input file is a single dash.
    
    Signed-off-by: Quentin Monnet <quentin.monnet@netronome.com>
    Acked-by: Jakub Kicinski <jakub.kicinski@netronome.com>
    Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>

diff --git a/tools/bpf/bpftool/main.c b/tools/bpf/bpftool/main.c
index cdee4c3d30c3..1da54a9b5ea3 100644
--- a/tools/bpf/bpftool/main.c
+++ b/tools/bpf/bpftool/main.c
@@ -195,7 +195,10 @@ static int do_batch(int argc, char **argv)
 	}
 	NEXT_ARG();
 
-	fp = fopen(*argv, "r");
+	if (!strcmp(*argv, "-"))
+		fp = stdin;
+	else
+		fp = fopen(*argv, "r");
 	if (!fp) {
 		p_err("Can't open file (%s): %s", *argv, strerror(errno));
 		return -1;
@@ -284,7 +287,8 @@ static int do_batch(int argc, char **argv)
 		err = 0;
 	}
 err_close:
-	fclose(fp);
+	if (fp != stdin)
+		fclose(fp);
 
 	if (json_output)
 		jsonw_end_array(json_wtr);

commit 65d538dde625d93359ca4e33d2311f8598f423a6
Author: Quentin Monnet <quentin.monnet@netronome.com>
Date:   Thu Mar 1 20:20:09 2018 -0800

    tools: bpftool: support continuation lines in batch files
    
    Add support for continuation lines, such as in the following example:
    
        prog show
        prog dump xlated \
            id 1337 opcodes
    
    This patch is based after the code for support for continuation lines
    from file lib/utils.c from package iproute2.
    
    "Lines" in error messages are renamed as "commands", as we count the
    number of commands (but we ignore empty lines, comments, and do not add
    continuation lines to the count).
    
    Signed-off-by: Quentin Monnet <quentin.monnet@netronome.com>
    Acked-by: Jakub Kicinski <jakub.kicinski@netronome.com>
    Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>

diff --git a/tools/bpf/bpftool/main.c b/tools/bpf/bpftool/main.c
index 79587e6decae..cdee4c3d30c3 100644
--- a/tools/bpf/bpftool/main.c
+++ b/tools/bpf/bpftool/main.c
@@ -46,6 +46,9 @@
 
 #include "main.h"
 
+#define BATCH_LINE_LEN_MAX 65536
+#define BATCH_ARG_NB_MAX 4096
+
 const char *bin_name;
 static int last_argc;
 static char **last_argv;
@@ -171,9 +174,9 @@ static const struct cmd cmds[] = {
 
 static int do_batch(int argc, char **argv)
 {
+	char buf[BATCH_LINE_LEN_MAX], contline[BATCH_LINE_LEN_MAX];
+	char *n_argv[BATCH_ARG_NB_MAX];
 	unsigned int lines = 0;
-	char *n_argv[4096];
-	char buf[65536];
 	int n_argc;
 	FILE *fp;
 	char *cp;
@@ -210,13 +213,38 @@ static int do_batch(int argc, char **argv)
 			break;
 		}
 
+		/* Append continuation lines if any (coming after a line ending
+		 * with '\' in the batch file).
+		 */
+		while ((cp = strstr(buf, "\\\n")) != NULL) {
+			if (!fgets(contline, sizeof(contline), fp) ||
+			    strlen(contline) == 0) {
+				p_err("missing continuation line on command %d",
+				      lines);
+				err = -1;
+				goto err_close;
+			}
+
+			cp = strchr(contline, '#');
+			if (cp)
+				*cp = '\0';
+
+			if (strlen(buf) + strlen(contline) + 1 > sizeof(buf)) {
+				p_err("command %d is too long", lines);
+				err = -1;
+				goto err_close;
+			}
+			buf[strlen(buf) - 2] = '\0';
+			strcat(buf, contline);
+		}
+
 		n_argc = 0;
 		n_argv[n_argc] = strtok(buf, " \t\n");
 
 		while (n_argv[n_argc]) {
 			n_argc++;
 			if (n_argc == ARRAY_SIZE(n_argv)) {
-				p_err("line %d has too many arguments, skip",
+				p_err("command %d has too many arguments, skip",
 				      lines);
 				n_argc = 0;
 				break;
@@ -252,7 +280,7 @@ static int do_batch(int argc, char **argv)
 		p_err("reading batch file failed: %s", strerror(errno));
 		err = -1;
 	} else {
-		p_info("processed %d lines", lines);
+		p_info("processed %d commands", lines);
 		err = 0;
 	}
 err_close:

commit 06cc7fe7c2951e64cd5e73ea447791c7e6bc3852
Author: Quentin Monnet <quentin.monnet@netronome.com>
Date:   Thu Mar 1 20:20:08 2018 -0800

    tools: bpftool: support comments in batch files
    
    Replace '#' by '\0' in commands read from batch files in order to avoid
    processing the remaining part of the line, thus allowing users to use
    comments in the files.
    
    Signed-off-by: Quentin Monnet <quentin.monnet@netronome.com>
    Acked-by: Jakub Kicinski <jakub.kicinski@netronome.com>
    Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>

diff --git a/tools/bpf/bpftool/main.c b/tools/bpf/bpftool/main.c
index 185acfa229b5..79587e6decae 100644
--- a/tools/bpf/bpftool/main.c
+++ b/tools/bpf/bpftool/main.c
@@ -176,6 +176,7 @@ static int do_batch(int argc, char **argv)
 	char buf[65536];
 	int n_argc;
 	FILE *fp;
+	char *cp;
 	int err;
 	int i;
 
@@ -200,6 +201,10 @@ static int do_batch(int argc, char **argv)
 	if (json_output)
 		jsonw_start_array(json_wtr);
 	while (fgets(buf, sizeof(buf), fp)) {
+		cp = strchr(buf, '#');
+		if (cp)
+			*cp = '\0';
+
 		if (strlen(buf) == sizeof(buf) - 1) {
 			errno = E2BIG;
 			break;

commit 9be6d411b0c473d31f756993b8b41bb16b0679c1
Author: Quentin Monnet <quentin.monnet@netronome.com>
Date:   Wed Feb 14 22:42:55 2018 -0800

    tools: bpftool: preserve JSON output on errors on batch file parsing
    
    Before this patch, perror() function is used in some cases when bpftool
    fails to parse its input file in batch mode. This function does not
    integrate well with the rest of the output when JSON is used, so we
    replace it by something that is compliant.
    
    Most calls to perror() had already been replaced in a previous patch,
    this one is a leftover.
    
    Fixes: d319c8e101c5 ("tools: bpftool: preserve JSON output on errors on batch file parsing")
    Signed-off-by: Quentin Monnet <quentin.monnet@netronome.com>
    Acked-by: Jakub Kicinski <jakub.kicinski@netronome.com>
    Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>

diff --git a/tools/bpf/bpftool/main.c b/tools/bpf/bpftool/main.c
index 3a0396d87c42..185acfa229b5 100644
--- a/tools/bpf/bpftool/main.c
+++ b/tools/bpf/bpftool/main.c
@@ -244,7 +244,7 @@ static int do_batch(int argc, char **argv)
 	}
 
 	if (errno && errno != ENOENT) {
-		perror("reading batch file failed");
+		p_err("reading batch file failed: %s", strerror(errno));
 		err = -1;
 	} else {
 		p_info("processed %d lines", lines);

commit 4bfe3bd3cc351efd1d51b3258b060e9445533888
Author: Roman Gushchin <guro@fb.com>
Date:   Wed Dec 27 19:16:28 2017 +0000

    tools/bpftool: use version from the kernel source tree
    
    Bpftool determines it's own version based on the kernel
    version, which is picked from the linux/version.h header.
    
    It's strange to use the version of the installed kernel
    headers, and makes much more sense to use the version
    of the actual source tree, where bpftool sources are.
    
    Fix this by building kernelversion target and use
    the resulting string as bpftool version.
    
    Example:
    before:
    
    $ bpftool version
    bpftool v4.14.6
    
    after:
    $ bpftool version
    bpftool v4.15.0-rc3
    
    $bpftool version --json
    {"version":"4.15.0-rc3"}
    
    Signed-off-by: Roman Gushchin <guro@fb.com>
    Reviewed-by: Jakub Kicinski <jakub.kicinski@netronome.com>
    Cc: Alexei Starovoitov <ast@kernel.org>
    Cc: Daniel Borkmann <daniel@iogearbox.net>
    Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>

diff --git a/tools/bpf/bpftool/main.c b/tools/bpf/bpftool/main.c
index ecd53ccf1239..3a0396d87c42 100644
--- a/tools/bpf/bpftool/main.c
+++ b/tools/bpf/bpftool/main.c
@@ -38,7 +38,6 @@
 #include <errno.h>
 #include <getopt.h>
 #include <linux/bpf.h>
-#include <linux/version.h>
 #include <stdio.h>
 #include <stdlib.h>
 #include <string.h>
@@ -95,21 +94,13 @@ static int do_help(int argc, char **argv)
 
 static int do_version(int argc, char **argv)
 {
-	unsigned int version[3];
-
-	version[0] = LINUX_VERSION_CODE >> 16;
-	version[1] = LINUX_VERSION_CODE >> 8 & 0xf;
-	version[2] = LINUX_VERSION_CODE & 0xf;
-
 	if (json_output) {
 		jsonw_start_object(json_wtr);
 		jsonw_name(json_wtr, "version");
-		jsonw_printf(json_wtr, "\"%u.%u.%u\"",
-			     version[0], version[1], version[2]);
+		jsonw_printf(json_wtr, "\"%s\"", BPFTOOL_VERSION);
 		jsonw_end_object(json_wtr);
 	} else {
-		printf("%s v%u.%u.%u\n", bin_name,
-		       version[0], version[1], version[2]);
+		printf("%s v%s\n", bin_name, BPFTOOL_VERSION);
 	}
 	return 0;
 }

commit 5ccda64d38cc2800e3c7fab42a2fea46d44693e9
Author: Roman Gushchin <guro@fb.com>
Date:   Wed Dec 13 15:18:54 2017 +0000

    bpftool: implement cgroup bpf operations
    
    This patch adds basic cgroup bpf operations to bpftool:
    cgroup list, attach and detach commands.
    
    Usage is described in the corresponding man pages,
    and examples are provided.
    
    Syntax:
    $ bpftool cgroup list CGROUP
    $ bpftool cgroup attach CGROUP ATTACH_TYPE PROG [ATTACH_FLAGS]
    $ bpftool cgroup detach CGROUP ATTACH_TYPE PROG
    
    Signed-off-by: Roman Gushchin <guro@fb.com>
    Cc: Alexei Starovoitov <ast@kernel.org>
    Cc: Daniel Borkmann <daniel@iogearbox.net>
    Cc: Jakub Kicinski <jakub.kicinski@netronome.com>
    Cc: Martin KaFai Lau <kafai@fb.com>
    Cc: Quentin Monnet <quentin.monnet@netronome.com>
    Reviewed-by: David Ahern <dsahern@gmail.com>
    Reviewed-by: Jakub Kicinski <jakub.kicinski@netronome.com>
    Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>

diff --git a/tools/bpf/bpftool/main.c b/tools/bpf/bpftool/main.c
index d294bc8168be..ecd53ccf1239 100644
--- a/tools/bpf/bpftool/main.c
+++ b/tools/bpf/bpftool/main.c
@@ -85,7 +85,7 @@ static int do_help(int argc, char **argv)
 		"       %s batch file FILE\n"
 		"       %s version\n"
 		"\n"
-		"       OBJECT := { prog | map }\n"
+		"       OBJECT := { prog | map | cgroup }\n"
 		"       " HELP_SPEC_OPTIONS "\n"
 		"",
 		bin_name, bin_name, bin_name);
@@ -173,6 +173,7 @@ static const struct cmd cmds[] = {
 	{ "batch",	do_batch },
 	{ "prog",	do_prog },
 	{ "map",	do_map },
+	{ "cgroup",	do_cgroup },
 	{ "version",	do_version },
 	{ 0 }
 };

commit 146882a37da7aa566c7ec088b42c6495d769f2ba
Author: Quentin Monnet <quentin.monnet@netronome.com>
Date:   Tue Nov 28 17:44:30 2017 -0800

    tools: bpftool: make error message from getopt_long() JSON-friendly
    
    If `getopt_long()` meets an unknown option, it prints its own error
    message to standard error output. While this does not strictly break
    JSON output, it is the only case bpftool prints something to standard
    error output if JSON output is required. All other errors are printed on
    standard output as JSON objects, so that an external program does not
    have to parse stderr.
    
    This is changed by setting the global variable `opterr` to 0.
    Furthermore, p_err() is used to reproduce the error message in a more
    JSON-friendly way, so that users still get to know what the erroneous
    option is.
    
    Signed-off-by: Quentin Monnet <quentin.monnet@netronome.com>
    Acked-by: Jakub Kicinski <jakub.kicinski@netronome.com>
    Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>

diff --git a/tools/bpf/bpftool/main.c b/tools/bpf/bpftool/main.c
index d72dd73a4016..d294bc8168be 100644
--- a/tools/bpf/bpftool/main.c
+++ b/tools/bpf/bpftool/main.c
@@ -288,6 +288,7 @@ int main(int argc, char **argv)
 	hash_init(prog_table.table);
 	hash_init(map_table.table);
 
+	opterr = 0;
 	while ((opt = getopt_long(argc, argv, "Vhpjf",
 				  options, NULL)) >= 0) {
 		switch (opt) {
@@ -313,7 +314,11 @@ int main(int argc, char **argv)
 			show_pinned = true;
 			break;
 		default:
-			usage();
+			p_err("unrecognized option '%s'", argv[optind - 1]);
+			if (json_output)
+				clean_and_exit(-1);
+			else
+				usage();
 		}
 	}
 

commit 7868620a3c15dbc661fb5d849de403ac04624c50
Author: Quentin Monnet <quentin.monnet@netronome.com>
Date:   Tue Nov 28 17:44:29 2017 -0800

    tools: bpftool: clean up the JSON writer before exiting in usage()
    
    The writer is cleaned at the end of the main function, but not if the
    program exits sooner in usage(). Let's keep it clean and destroy the
    writer before exiting.
    
    Destruction and actual call to exit() are moved to another function so
    that clean exit can also be performed without printing usage() hints.
    
    Fixes: d35efba99d92 ("tools: bpftool: introduce --json and --pretty options")
    Signed-off-by: Quentin Monnet <quentin.monnet@netronome.com>
    Acked-by: Jakub Kicinski <jakub.kicinski@netronome.com>
    Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>

diff --git a/tools/bpf/bpftool/main.c b/tools/bpf/bpftool/main.c
index 14ad54a1c404..d72dd73a4016 100644
--- a/tools/bpf/bpftool/main.c
+++ b/tools/bpf/bpftool/main.c
@@ -58,11 +58,19 @@ bool show_pinned;
 struct pinned_obj_table prog_table;
 struct pinned_obj_table map_table;
 
+static void __noreturn clean_and_exit(int i)
+{
+	if (json_output)
+		jsonw_destroy(&json_wtr);
+
+	exit(i);
+}
+
 void usage(void)
 {
 	last_do_help(last_argc - 1, last_argv + 1);
 
-	exit(-1);
+	clean_and_exit(-1);
 }
 
 static int do_help(int argc, char **argv)

commit 9b85c2d4508563f4bb1de0d971ed02fea0d0d757
Author: Quentin Monnet <quentin.monnet@netronome.com>
Date:   Tue Nov 28 17:44:28 2017 -0800

    tools: bpftool: fix crash on bad parameters with JSON
    
    If bad or unrecognised parameters are specified after JSON output is
    requested, `usage()` will try to output null JSON object before the
    writer is created.
    
    To prevent this, create the writer as soon as the `--json` option is
    parsed.
    
    Fixes: 004b45c0e51a ("tools: bpftool: provide JSON output for all possible commands")
    Reported-by: Jakub Kicinski <jakub.kicinski@netronome.com>
    Signed-off-by: Quentin Monnet <quentin.monnet@netronome.com>
    Acked-by: Jakub Kicinski <jakub.kicinski@netronome.com>
    Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>

diff --git a/tools/bpf/bpftool/main.c b/tools/bpf/bpftool/main.c
index d6e4762170a4..14ad54a1c404 100644
--- a/tools/bpf/bpftool/main.c
+++ b/tools/bpf/bpftool/main.c
@@ -291,7 +291,15 @@ int main(int argc, char **argv)
 			pretty_output = true;
 			/* fall through */
 		case 'j':
-			json_output = true;
+			if (!json_output) {
+				json_wtr = jsonw_new(stdout);
+				if (!json_wtr) {
+					p_err("failed to create JSON writer");
+					return -1;
+				}
+				json_output = true;
+			}
+			jsonw_pretty(json_wtr, pretty_output);
 			break;
 		case 'f':
 			show_pinned = true;
@@ -306,15 +314,6 @@ int main(int argc, char **argv)
 	if (argc < 0)
 		usage();
 
-	if (json_output) {
-		json_wtr = jsonw_new(stdout);
-		if (!json_wtr) {
-			p_err("failed to create JSON writer");
-			return -1;
-		}
-		jsonw_pretty(json_wtr, pretty_output);
-	}
-
 	bfd_init();
 
 	ret = cmd_select(cmds, argc, argv, do_help);

commit c541b73466549c4aa4ee20ccd04ba52e4c95d6eb
Author: Prashant Bhole <bhole_prashant_q7@lab.ntt.co.jp>
Date:   Wed Nov 8 13:55:49 2017 +0900

    tools: bpftool: optionally show filenames of pinned objects
    
    Making it optional to show file names of pinned objects because
    it scans complete bpf-fs filesystem which is costly.
    Added option -f|--bpffs. Documentation updated.
    
    Signed-off-by: Prashant Bhole <bhole_prashant_q7@lab.ntt.co.jp>
    Signed-off-by: David S. Miller <davem@davemloft.net>

diff --git a/tools/bpf/bpftool/main.c b/tools/bpf/bpftool/main.c
index 6ad53f1797fa..d6e4762170a4 100644
--- a/tools/bpf/bpftool/main.c
+++ b/tools/bpf/bpftool/main.c
@@ -54,6 +54,7 @@ static int (*last_do_help)(int argc, char **argv);
 json_writer_t *json_wtr;
 bool pretty_output;
 bool json_output;
+bool show_pinned;
 struct pinned_obj_table prog_table;
 struct pinned_obj_table map_table;
 
@@ -265,6 +266,7 @@ int main(int argc, char **argv)
 		{ "help",	no_argument,	NULL,	'h' },
 		{ "pretty",	no_argument,	NULL,	'p' },
 		{ "version",	no_argument,	NULL,	'V' },
+		{ "bpffs",	no_argument,	NULL,	'f' },
 		{ 0 }
 	};
 	int opt, ret;
@@ -272,12 +274,13 @@ int main(int argc, char **argv)
 	last_do_help = do_help;
 	pretty_output = false;
 	json_output = false;
+	show_pinned = false;
 	bin_name = argv[0];
 
 	hash_init(prog_table.table);
 	hash_init(map_table.table);
 
-	while ((opt = getopt_long(argc, argv, "Vhpj",
+	while ((opt = getopt_long(argc, argv, "Vhpjf",
 				  options, NULL)) >= 0) {
 		switch (opt) {
 		case 'V':
@@ -290,6 +293,9 @@ int main(int argc, char **argv)
 		case 'j':
 			json_output = true;
 			break;
+		case 'f':
+			show_pinned = true;
+			break;
 		default:
 			usage();
 		}
@@ -316,8 +322,10 @@ int main(int argc, char **argv)
 	if (json_output)
 		jsonw_destroy(&json_wtr);
 
-	delete_pinned_obj_table(&prog_table);
-	delete_pinned_obj_table(&map_table);
+	if (show_pinned) {
+		delete_pinned_obj_table(&prog_table);
+		delete_pinned_obj_table(&map_table);
+	}
 
 	return ret;
 }

commit 4990f1f4610b483a60397ed2768d268df228a551
Author: Prashant Bhole <bhole_prashant_q7@lab.ntt.co.jp>
Date:   Wed Nov 8 13:55:48 2017 +0900

    tools: bpftool: show filenames of pinned objects
    
    Added support to show filenames of pinned objects.
    
    For example:
    
    root@test# ./bpftool prog
    3: tracepoint  name tracepoint__irq  tag f677a7dd722299a3
        loaded_at Oct 26/11:39  uid 0
        xlated 160B  not jited  memlock 4096B  map_ids 4
        pinned /sys/fs/bpf/softirq_prog
    
    4: tracepoint  name tracepoint__irq  tag ea5dc530d00b92b6
        loaded_at Oct 26/11:39  uid 0
        xlated 392B  not jited  memlock 4096B  map_ids 4,6
    
    root@test# ./bpftool --json --pretty prog
    [{
            "id": 3,
            "type": "tracepoint",
            "name": "tracepoint__irq",
            "tag": "f677a7dd722299a3",
            "loaded_at": "Oct 26/11:39",
            "uid": 0,
            "bytes_xlated": 160,
            "jited": false,
            "bytes_memlock": 4096,
            "map_ids": [4
            ],
            "pinned": ["/sys/fs/bpf/softirq_prog"
            ]
        },{
            "id": 4,
            "type": "tracepoint",
            "name": "tracepoint__irq",
            "tag": "ea5dc530d00b92b6",
            "loaded_at": "Oct 26/11:39",
            "uid": 0,
            "bytes_xlated": 392,
            "jited": false,
            "bytes_memlock": 4096,
            "map_ids": [4,6
            ],
            "pinned": []
        }
    ]
    
    root@test# ./bpftool map
    4: hash  name start  flags 0x0
        key 4B  value 16B  max_entries 10240  memlock 1003520B
        pinned /sys/fs/bpf/softirq_map1
    5: hash  name iptr  flags 0x0
        key 4B  value 8B  max_entries 10240  memlock 921600B
    
    root@test# ./bpftool --json --pretty map
    [{
            "id": 4,
            "type": "hash",
            "name": "start",
            "flags": 0,
            "bytes_key": 4,
            "bytes_value": 16,
            "max_entries": 10240,
            "bytes_memlock": 1003520,
            "pinned": ["/sys/fs/bpf/softirq_map1"
            ]
        },{
            "id": 5,
            "type": "hash",
            "name": "iptr",
            "flags": 0,
            "bytes_key": 4,
            "bytes_value": 8,
            "max_entries": 10240,
            "bytes_memlock": 921600,
            "pinned": []
        }
    ]
    
    Signed-off-by: Prashant Bhole <bhole_prashant_q7@lab.ntt.co.jp>
    Signed-off-by: David S. Miller <davem@davemloft.net>

diff --git a/tools/bpf/bpftool/main.c b/tools/bpf/bpftool/main.c
index 78d9afb74ef4..6ad53f1797fa 100644
--- a/tools/bpf/bpftool/main.c
+++ b/tools/bpf/bpftool/main.c
@@ -54,6 +54,8 @@ static int (*last_do_help)(int argc, char **argv);
 json_writer_t *json_wtr;
 bool pretty_output;
 bool json_output;
+struct pinned_obj_table prog_table;
+struct pinned_obj_table map_table;
 
 void usage(void)
 {
@@ -272,6 +274,9 @@ int main(int argc, char **argv)
 	json_output = false;
 	bin_name = argv[0];
 
+	hash_init(prog_table.table);
+	hash_init(map_table.table);
+
 	while ((opt = getopt_long(argc, argv, "Vhpj",
 				  options, NULL)) >= 0) {
 		switch (opt) {
@@ -311,5 +316,8 @@ int main(int argc, char **argv)
 	if (json_output)
 		jsonw_destroy(&json_wtr);
 
+	delete_pinned_obj_table(&prog_table);
+	delete_pinned_obj_table(&map_table);
+
 	return ret;
 }

commit 0641c3c890d480abeb237b92a5ee4b99a22319c6
Author: Quentin Monnet <quentin.monnet@netronome.com>
Date:   Mon Oct 23 09:24:16 2017 -0700

    tools: bpftool: update documentation for --json and --pretty usage
    
    Update the documentation to provide help about JSON output generation,
    and add an example in bpftool-prog manual page.
    
    Also reintroduce an example that was left aside when the tool was moved
    from GitHub to the kernel sources, in order to show how to mount the
    bpffs file system (to pin programs) inside the bpftool-prog manual page.
    
    Signed-off-by: Quentin Monnet <quentin.monnet@netronome.com>
    Acked-by: Daniel Borkmann <daniel@iogearbox.net>
    Signed-off-by: David S. Miller <davem@davemloft.net>

diff --git a/tools/bpf/bpftool/main.c b/tools/bpf/bpftool/main.c
index 55ba0a04c102..78d9afb74ef4 100644
--- a/tools/bpf/bpftool/main.c
+++ b/tools/bpf/bpftool/main.c
@@ -70,11 +70,13 @@ static int do_help(int argc, char **argv)
 	}
 
 	fprintf(stderr,
-		"Usage: %s OBJECT { COMMAND | help }\n"
+		"Usage: %s [OPTIONS] OBJECT { COMMAND | help }\n"
 		"       %s batch file FILE\n"
 		"       %s version\n"
 		"\n"
-		"       OBJECT := { prog | map }\n",
+		"       OBJECT := { prog | map }\n"
+		"       " HELP_SPEC_OPTIONS "\n"
+		"",
 		bin_name, bin_name, bin_name);
 
 	return 0;

commit 004b45c0e51a8b6f20320181a946ba2d1bd3548b
Author: Quentin Monnet <quentin.monnet@netronome.com>
Date:   Mon Oct 23 09:24:14 2017 -0700

    tools: bpftool: provide JSON output for all possible commands
    
    As all commands can now return JSON output (possibly just a "null"
    value), output of `bpftool --json batch file FILE` should also be fully
    JSON compliant.
    
    Signed-off-by: Quentin Monnet <quentin.monnet@netronome.com>
    Acked-by: Daniel Borkmann <daniel@iogearbox.net>
    Signed-off-by: David S. Miller <davem@davemloft.net>

diff --git a/tools/bpf/bpftool/main.c b/tools/bpf/bpftool/main.c
index 9989a77fdc4a..55ba0a04c102 100644
--- a/tools/bpf/bpftool/main.c
+++ b/tools/bpf/bpftool/main.c
@@ -64,6 +64,11 @@ void usage(void)
 
 static int do_help(int argc, char **argv)
 {
+	if (json_output) {
+		jsonw_null(json_wtr);
+		return 0;
+	}
+
 	fprintf(stderr,
 		"Usage: %s OBJECT { COMMAND | help }\n"
 		"       %s batch file FILE\n"
@@ -77,10 +82,22 @@ static int do_help(int argc, char **argv)
 
 static int do_version(int argc, char **argv)
 {
-	printf("%s v%d.%d.%d\n", bin_name,
-	       LINUX_VERSION_CODE >> 16,
-	       LINUX_VERSION_CODE >> 8 & 0xf,
-	       LINUX_VERSION_CODE & 0xf);
+	unsigned int version[3];
+
+	version[0] = LINUX_VERSION_CODE >> 16;
+	version[1] = LINUX_VERSION_CODE >> 8 & 0xf;
+	version[2] = LINUX_VERSION_CODE & 0xf;
+
+	if (json_output) {
+		jsonw_start_object(json_wtr);
+		jsonw_name(json_wtr, "version");
+		jsonw_printf(json_wtr, "\"%u.%u.%u\"",
+			     version[0], version[1], version[2]);
+		jsonw_end_object(json_wtr);
+	} else {
+		printf("%s v%u.%u.%u\n", bin_name,
+		       version[0], version[1], version[2]);
+	}
 	return 0;
 }
 

commit 9a5ab8bf1d6d16ef47fdf55dba1683ec00d751ad
Author: Quentin Monnet <quentin.monnet@netronome.com>
Date:   Mon Oct 23 09:24:13 2017 -0700

    tools: bpftool: turn err() and info() macros into functions
    
    Turn err() and info() macros into functions.
    
    In order to avoid naming conflicts with variables in the code, rename
    them as p_err() and p_info() respectively.
    
    The behavior of these functions is similar to the one of the macros for
    plain output. However, when JSON output is requested, these macros
    return a JSON-formatted "error" object instead of printing a message to
    stderr.
    
    To handle error messages correctly with JSON, a modification was brought
    to their behavior nonetheless: the functions now append a end-of-line
    character at the end of the message. This way, we can remove end-of-line
    characters at the end of the argument strings, and not have them in the
    JSON output.
    
    All error messages are formatted to hold in a single call to p_err(), in
    order to produce a single JSON field.
    
    Signed-off-by: Quentin Monnet <quentin.monnet@netronome.com>
    Acked-by: Jakub Kicinski <jakub.kicinski@netronome.com>
    Acked-by: Daniel Borkmann <daniel@iogearbox.net>
    Signed-off-by: David S. Miller <davem@davemloft.net>

diff --git a/tools/bpf/bpftool/main.c b/tools/bpf/bpftool/main.c
index 71b01bf73912..9989a77fdc4a 100644
--- a/tools/bpf/bpftool/main.c
+++ b/tools/bpf/bpftool/main.c
@@ -158,20 +158,20 @@ static int do_batch(int argc, char **argv)
 	int i;
 
 	if (argc < 2) {
-		err("too few parameters for batch\n");
+		p_err("too few parameters for batch");
 		return -1;
 	} else if (!is_prefix(*argv, "file")) {
-		err("expected 'file', got: %s\n", *argv);
+		p_err("expected 'file', got: %s", *argv);
 		return -1;
 	} else if (argc > 2) {
-		err("too many parameters for batch\n");
+		p_err("too many parameters for batch");
 		return -1;
 	}
 	NEXT_ARG();
 
 	fp = fopen(*argv, "r");
 	if (!fp) {
-		err("Can't open file (%s): %s\n", *argv, strerror(errno));
+		p_err("Can't open file (%s): %s", *argv, strerror(errno));
 		return -1;
 	}
 
@@ -189,8 +189,8 @@ static int do_batch(int argc, char **argv)
 		while (n_argv[n_argc]) {
 			n_argc++;
 			if (n_argc == ARRAY_SIZE(n_argv)) {
-				err("line %d has too many arguments, skip\n",
-				    lines);
+				p_err("line %d has too many arguments, skip",
+				      lines);
 				n_argc = 0;
 				break;
 			}
@@ -225,7 +225,7 @@ static int do_batch(int argc, char **argv)
 		perror("reading batch file failed");
 		err = -1;
 	} else {
-		info("processed %d lines\n", lines);
+		p_info("processed %d lines", lines);
 		err = 0;
 	}
 err_close:
@@ -279,7 +279,7 @@ int main(int argc, char **argv)
 	if (json_output) {
 		json_wtr = jsonw_new(stdout);
 		if (!json_wtr) {
-			err("failed to create JSON writer\n");
+			p_err("failed to create JSON writer");
 			return -1;
 		}
 		jsonw_pretty(json_wtr, pretty_output);

commit 3aaca6bf7a09150e4c87f2932dc8ebe82a586252
Author: Quentin Monnet <quentin.monnet@netronome.com>
Date:   Mon Oct 23 09:24:12 2017 -0700

    tools: bpftool: add JSON output for `bpftool batch file FILE` command
    
    `bpftool batch file FILE` takes FILE as an argument and executes all the
    bpftool commands it finds inside (or stops if an error occurs).
    
    To obtain a consistent JSON output, create a root JSON array, then for
    each command create a new object containing two fields: one with the
    command arguments, the other with the output (which is the JSON object
    that the command would have produced, if called on its own).
    
    Signed-off-by: Quentin Monnet <quentin.monnet@netronome.com>
    Acked-by: Daniel Borkmann <daniel@iogearbox.net>
    Signed-off-by: David S. Miller <davem@davemloft.net>

diff --git a/tools/bpf/bpftool/main.c b/tools/bpf/bpftool/main.c
index 14bfc17cd4de..71b01bf73912 100644
--- a/tools/bpf/bpftool/main.c
+++ b/tools/bpf/bpftool/main.c
@@ -155,6 +155,7 @@ static int do_batch(int argc, char **argv)
 	int n_argc;
 	FILE *fp;
 	int err;
+	int i;
 
 	if (argc < 2) {
 		err("too few parameters for batch\n");
@@ -174,6 +175,8 @@ static int do_batch(int argc, char **argv)
 		return -1;
 	}
 
+	if (json_output)
+		jsonw_start_array(json_wtr);
 	while (fgets(buf, sizeof(buf), fp)) {
 		if (strlen(buf) == sizeof(buf) - 1) {
 			errno = E2BIG;
@@ -197,7 +200,21 @@ static int do_batch(int argc, char **argv)
 		if (!n_argc)
 			continue;
 
+		if (json_output) {
+			jsonw_start_object(json_wtr);
+			jsonw_name(json_wtr, "command");
+			jsonw_start_array(json_wtr);
+			for (i = 0; i < n_argc; i++)
+				jsonw_string(json_wtr, n_argv[i]);
+			jsonw_end_array(json_wtr);
+			jsonw_name(json_wtr, "output");
+		}
+
 		err = cmd_select(cmds, n_argc, n_argv, do_help);
+
+		if (json_output)
+			jsonw_end_object(json_wtr);
+
 		if (err)
 			goto err_close;
 
@@ -214,6 +231,9 @@ static int do_batch(int argc, char **argv)
 err_close:
 	fclose(fp);
 
+	if (json_output)
+		jsonw_end_array(json_wtr);
+
 	return err;
 }
 

commit d35efba99d9221d9fe1715a23247ad9b703544ec
Author: Quentin Monnet <quentin.monnet@netronome.com>
Date:   Mon Oct 23 09:24:07 2017 -0700

    tools: bpftool: introduce --json and --pretty options
    
    These two options can be used to ask for a JSON output (--j or -json),
    and to make this JSON human-readable (-p or --pretty).
    
    A json_writer object is created when JSON is required, and will be used
    in follow-up commits to produce JSON output.
    
    Note that --pretty implies --json.
    
    Update for the manual pages and interactive help messages comes in a
    later patch of the series.
    
    Signed-off-by: Quentin Monnet <quentin.monnet@netronome.com>
    Acked-by: Daniel Borkmann <daniel@iogearbox.net>
    Signed-off-by: David S. Miller <davem@davemloft.net>

diff --git a/tools/bpf/bpftool/main.c b/tools/bpf/bpftool/main.c
index 613e3c75f78a..14bfc17cd4de 100644
--- a/tools/bpf/bpftool/main.c
+++ b/tools/bpf/bpftool/main.c
@@ -51,6 +51,9 @@ const char *bin_name;
 static int last_argc;
 static char **last_argv;
 static int (*last_do_help)(int argc, char **argv);
+json_writer_t *json_wtr;
+bool pretty_output;
+bool json_output;
 
 void usage(void)
 {
@@ -217,22 +220,32 @@ static int do_batch(int argc, char **argv)
 int main(int argc, char **argv)
 {
 	static const struct option options[] = {
+		{ "json",	no_argument,	NULL,	'j' },
 		{ "help",	no_argument,	NULL,	'h' },
+		{ "pretty",	no_argument,	NULL,	'p' },
 		{ "version",	no_argument,	NULL,	'V' },
 		{ 0 }
 	};
-	int opt;
+	int opt, ret;
 
 	last_do_help = do_help;
+	pretty_output = false;
+	json_output = false;
 	bin_name = argv[0];
 
-	while ((opt = getopt_long(argc, argv, "Vh",
+	while ((opt = getopt_long(argc, argv, "Vhpj",
 				  options, NULL)) >= 0) {
 		switch (opt) {
 		case 'V':
 			return do_version(argc, argv);
 		case 'h':
 			return do_help(argc, argv);
+		case 'p':
+			pretty_output = true;
+			/* fall through */
+		case 'j':
+			json_output = true;
+			break;
 		default:
 			usage();
 		}
@@ -243,7 +256,21 @@ int main(int argc, char **argv)
 	if (argc < 0)
 		usage();
 
+	if (json_output) {
+		json_wtr = jsonw_new(stdout);
+		if (!json_wtr) {
+			err("failed to create JSON writer\n");
+			return -1;
+		}
+		jsonw_pretty(json_wtr, pretty_output);
+	}
+
 	bfd_init();
 
-	return cmd_select(cmds, argc, argv, do_help);
+	ret = cmd_select(cmds, argc, argv, do_help);
+
+	if (json_output)
+		jsonw_destroy(&json_wtr);
+
+	return ret;
 }

commit a2bc2e5c2c0604bf5366b5e56ef46335adaf7491
Author: Quentin Monnet <quentin.monnet@netronome.com>
Date:   Mon Oct 23 09:24:06 2017 -0700

    tools: bpftool: add option parsing to bpftool, --help and --version
    
    Add an option parsing facility to bpftool, in prevision of future
    options for demanding JSON output. Currently, two options are added:
    --help and --version, that act the same as the respective commands
    `help` and `version`.
    
    Signed-off-by: Quentin Monnet <quentin.monnet@netronome.com>
    Acked-by: Daniel Borkmann <daniel@iogearbox.net>
    Signed-off-by: David S. Miller <davem@davemloft.net>

diff --git a/tools/bpf/bpftool/main.c b/tools/bpf/bpftool/main.c
index 814d19e1b53f..613e3c75f78a 100644
--- a/tools/bpf/bpftool/main.c
+++ b/tools/bpf/bpftool/main.c
@@ -36,6 +36,7 @@
 #include <bfd.h>
 #include <ctype.h>
 #include <errno.h>
+#include <getopt.h>
 #include <linux/bpf.h>
 #include <linux/version.h>
 #include <stdio.h>
@@ -215,8 +216,32 @@ static int do_batch(int argc, char **argv)
 
 int main(int argc, char **argv)
 {
+	static const struct option options[] = {
+		{ "help",	no_argument,	NULL,	'h' },
+		{ "version",	no_argument,	NULL,	'V' },
+		{ 0 }
+	};
+	int opt;
+
+	last_do_help = do_help;
 	bin_name = argv[0];
-	NEXT_ARG();
+
+	while ((opt = getopt_long(argc, argv, "Vh",
+				  options, NULL)) >= 0) {
+		switch (opt) {
+		case 'V':
+			return do_version(argc, argv);
+		case 'h':
+			return do_help(argc, argv);
+		default:
+			usage();
+		}
+	}
+
+	argc -= optind;
+	argv += optind;
+	if (argc < 0)
+		usage();
 
 	bfd_init();
 

commit 821cfbb0dcfbb24506dc6958361ca2b80b928049
Author: Quentin Monnet <quentin.monnet@netronome.com>
Date:   Thu Oct 19 15:46:26 2017 -0700

    tools: bpftool: add a command to display bpftool version
    
    This command can be used to print the version of the tool, which is in
    fact the version from Linux taken from usr/include/linux/version.h.
    
    Example usage:
    
        $ bpftool version
        bpftool v4.14.0
    
    Signed-off-by: Quentin Monnet <quentin.monnet@netronome.com>
    Signed-off-by: Jakub Kicinski <jakub.kicinski@netronome.com>
    Acked-by: Daniel Borkmann <daniel@iogearbox.net>
    Signed-off-by: David S. Miller <davem@davemloft.net>

diff --git a/tools/bpf/bpftool/main.c b/tools/bpf/bpftool/main.c
index 8662199ee050..814d19e1b53f 100644
--- a/tools/bpf/bpftool/main.c
+++ b/tools/bpf/bpftool/main.c
@@ -37,6 +37,7 @@
 #include <ctype.h>
 #include <errno.h>
 #include <linux/bpf.h>
+#include <linux/version.h>
 #include <stdio.h>
 #include <stdlib.h>
 #include <string.h>
@@ -62,13 +63,23 @@ static int do_help(int argc, char **argv)
 	fprintf(stderr,
 		"Usage: %s OBJECT { COMMAND | help }\n"
 		"       %s batch file FILE\n"
+		"       %s version\n"
 		"\n"
 		"       OBJECT := { prog | map }\n",
-		bin_name, bin_name);
+		bin_name, bin_name, bin_name);
 
 	return 0;
 }
 
+static int do_version(int argc, char **argv)
+{
+	printf("%s v%d.%d.%d\n", bin_name,
+	       LINUX_VERSION_CODE >> 16,
+	       LINUX_VERSION_CODE >> 8 & 0xf,
+	       LINUX_VERSION_CODE & 0xf);
+	return 0;
+}
+
 int cmd_select(const struct cmd *cmds, int argc, char **argv,
 	       int (*help)(int argc, char **argv))
 {
@@ -128,6 +139,7 @@ static const struct cmd cmds[] = {
 	{ "batch",	do_batch },
 	{ "prog",	do_prog },
 	{ "map",	do_map },
+	{ "version",	do_version },
 	{ 0 }
 };
 

commit 9cbe1f581d17baff7e93936feb041c90b29eb6a8
Author: Quentin Monnet <quentin.monnet@netronome.com>
Date:   Thu Oct 19 15:46:19 2017 -0700

    tools: bpftool: add pointer to file argument to print_hex()
    
    Make print_hex() able to print to any file instead of standard output
    only, and rename it to fprint_hex(). The function can now be called with
    the info() macro, for example, without splitting the output between
    standard and error outputs.
    
    Signed-off-by: Quentin Monnet <quentin.monnet@netronome.com>
    Signed-off-by: Jakub Kicinski <jakub.kicinski@netronome.com>
    Acked-by: Daniel Borkmann <daniel@iogearbox.net>
    Signed-off-by: David S. Miller <davem@davemloft.net>

diff --git a/tools/bpf/bpftool/main.c b/tools/bpf/bpftool/main.c
index e02d00d6e00b..8662199ee050 100644
--- a/tools/bpf/bpftool/main.c
+++ b/tools/bpf/bpftool/main.c
@@ -100,7 +100,7 @@ bool is_prefix(const char *pfx, const char *str)
 	return !memcmp(str, pfx, strlen(pfx));
 }
 
-void print_hex(void *arg, unsigned int n, const char *sep)
+void fprint_hex(FILE *f, void *arg, unsigned int n, const char *sep)
 {
 	unsigned char *data = arg;
 	unsigned int i;
@@ -111,13 +111,13 @@ void print_hex(void *arg, unsigned int n, const char *sep)
 		if (!i)
 			/* nothing */;
 		else if (!(i % 16))
-			printf("\n");
+			fprintf(f, "\n");
 		else if (!(i % 8))
-			printf("  ");
+			fprintf(f, "  ");
 		else
 			pfx = sep;
 
-		printf("%s%02hhx", i ? pfx : "", data[i]);
+		fprintf(f, "%s%02hhx", i ? pfx : "", data[i]);
 	}
 }
 

commit 71bb428fe2c19512ac671d5ee16ef3e73e1b49a8
Author: Jakub Kicinski <jakub.kicinski@netronome.com>
Date:   Wed Oct 4 20:10:04 2017 -0700

    tools: bpf: add bpftool
    
    Add a simple tool for querying and updating BPF objects on the system.
    
    Signed-off-by: Jakub Kicinski <jakub.kicinski@netronome.com>
    Reviewed-by: Simon Horman <simon.horman@netronome.com>
    Acked-by: Daniel Borkmann <daniel@iogearbox.net>
    Acked-by: Alexei Starovoitov <ast@kernel.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>

diff --git a/tools/bpf/bpftool/main.c b/tools/bpf/bpftool/main.c
new file mode 100644
index 000000000000..e02d00d6e00b
--- /dev/null
+++ b/tools/bpf/bpftool/main.c
@@ -0,0 +1,212 @@
+/*
+ * Copyright (C) 2017 Netronome Systems, Inc.
+ *
+ * This software is dual licensed under the GNU General License Version 2,
+ * June 1991 as shown in the file COPYING in the top-level directory of this
+ * source tree or the BSD 2-Clause License provided below.  You have the
+ * option to license this software under the complete terms of either license.
+ *
+ * The BSD 2-Clause License:
+ *
+ *     Redistribution and use in source and binary forms, with or
+ *     without modification, are permitted provided that the following
+ *     conditions are met:
+ *
+ *      1. Redistributions of source code must retain the above
+ *         copyright notice, this list of conditions and the following
+ *         disclaimer.
+ *
+ *      2. Redistributions in binary form must reproduce the above
+ *         copyright notice, this list of conditions and the following
+ *         disclaimer in the documentation and/or other materials
+ *         provided with the distribution.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
+ * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
+ * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
+ * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
+ * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
+ * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
+ * SOFTWARE.
+ */
+
+/* Author: Jakub Kicinski <kubakici@wp.pl> */
+
+#include <bfd.h>
+#include <ctype.h>
+#include <errno.h>
+#include <linux/bpf.h>
+#include <stdio.h>
+#include <stdlib.h>
+#include <string.h>
+
+#include <bpf.h>
+
+#include "main.h"
+
+const char *bin_name;
+static int last_argc;
+static char **last_argv;
+static int (*last_do_help)(int argc, char **argv);
+
+void usage(void)
+{
+	last_do_help(last_argc - 1, last_argv + 1);
+
+	exit(-1);
+}
+
+static int do_help(int argc, char **argv)
+{
+	fprintf(stderr,
+		"Usage: %s OBJECT { COMMAND | help }\n"
+		"       %s batch file FILE\n"
+		"\n"
+		"       OBJECT := { prog | map }\n",
+		bin_name, bin_name);
+
+	return 0;
+}
+
+int cmd_select(const struct cmd *cmds, int argc, char **argv,
+	       int (*help)(int argc, char **argv))
+{
+	unsigned int i;
+
+	last_argc = argc;
+	last_argv = argv;
+	last_do_help = help;
+
+	if (argc < 1 && cmds[0].func)
+		return cmds[0].func(argc, argv);
+
+	for (i = 0; cmds[i].func; i++)
+		if (is_prefix(*argv, cmds[i].cmd))
+			return cmds[i].func(argc - 1, argv + 1);
+
+	help(argc - 1, argv + 1);
+
+	return -1;
+}
+
+bool is_prefix(const char *pfx, const char *str)
+{
+	if (!pfx)
+		return false;
+	if (strlen(str) < strlen(pfx))
+		return false;
+
+	return !memcmp(str, pfx, strlen(pfx));
+}
+
+void print_hex(void *arg, unsigned int n, const char *sep)
+{
+	unsigned char *data = arg;
+	unsigned int i;
+
+	for (i = 0; i < n; i++) {
+		const char *pfx = "";
+
+		if (!i)
+			/* nothing */;
+		else if (!(i % 16))
+			printf("\n");
+		else if (!(i % 8))
+			printf("  ");
+		else
+			pfx = sep;
+
+		printf("%s%02hhx", i ? pfx : "", data[i]);
+	}
+}
+
+static int do_batch(int argc, char **argv);
+
+static const struct cmd cmds[] = {
+	{ "help",	do_help },
+	{ "batch",	do_batch },
+	{ "prog",	do_prog },
+	{ "map",	do_map },
+	{ 0 }
+};
+
+static int do_batch(int argc, char **argv)
+{
+	unsigned int lines = 0;
+	char *n_argv[4096];
+	char buf[65536];
+	int n_argc;
+	FILE *fp;
+	int err;
+
+	if (argc < 2) {
+		err("too few parameters for batch\n");
+		return -1;
+	} else if (!is_prefix(*argv, "file")) {
+		err("expected 'file', got: %s\n", *argv);
+		return -1;
+	} else if (argc > 2) {
+		err("too many parameters for batch\n");
+		return -1;
+	}
+	NEXT_ARG();
+
+	fp = fopen(*argv, "r");
+	if (!fp) {
+		err("Can't open file (%s): %s\n", *argv, strerror(errno));
+		return -1;
+	}
+
+	while (fgets(buf, sizeof(buf), fp)) {
+		if (strlen(buf) == sizeof(buf) - 1) {
+			errno = E2BIG;
+			break;
+		}
+
+		n_argc = 0;
+		n_argv[n_argc] = strtok(buf, " \t\n");
+
+		while (n_argv[n_argc]) {
+			n_argc++;
+			if (n_argc == ARRAY_SIZE(n_argv)) {
+				err("line %d has too many arguments, skip\n",
+				    lines);
+				n_argc = 0;
+				break;
+			}
+			n_argv[n_argc] = strtok(NULL, " \t\n");
+		}
+
+		if (!n_argc)
+			continue;
+
+		err = cmd_select(cmds, n_argc, n_argv, do_help);
+		if (err)
+			goto err_close;
+
+		lines++;
+	}
+
+	if (errno && errno != ENOENT) {
+		perror("reading batch file failed");
+		err = -1;
+	} else {
+		info("processed %d lines\n", lines);
+		err = 0;
+	}
+err_close:
+	fclose(fp);
+
+	return err;
+}
+
+int main(int argc, char **argv)
+{
+	bin_name = argv[0];
+	NEXT_ARG();
+
+	bfd_init();
+
+	return cmd_select(cmds, argc, argv, do_help);
+}
