commit 05ee19c18c2bb3dea69e29219017367c4a77e65a
Author: Daniel Borkmann <daniel@iogearbox.net>
Date:   Tue May 19 00:45:47 2020 +0200

    bpf, bpftool: Enable get{peer, sock}name attach types
    
    Make bpftool aware and add the new get{peer,sock}name attach types to its
    cli, documentation and bash completion to allow attachment/detachment of
    sock_addr programs there.
    
    Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
    Signed-off-by: Alexei Starovoitov <ast@kernel.org>
    Acked-by: Andrii Nakryiko <andriin@fb.com>
    Acked-by: Andrey Ignatov <rdna@fb.com>
    Link: https://lore.kernel.org/bpf/9765b3d03e4c29210c4df56a9cc7e52f5f7bb5ef.1589841594.git.daniel@iogearbox.net

diff --git a/tools/bpf/bpftool/main.h b/tools/bpf/bpftool/main.h
index f89ac70ef973..5cdf0bc049bd 100644
--- a/tools/bpf/bpftool/main.h
+++ b/tools/bpf/bpftool/main.h
@@ -100,6 +100,10 @@ static const char * const attach_type_name[__MAX_BPF_ATTACH_TYPE] = {
 	[BPF_CGROUP_INET6_CONNECT] = "connect6",
 	[BPF_CGROUP_INET4_POST_BIND] = "post_bind4",
 	[BPF_CGROUP_INET6_POST_BIND] = "post_bind6",
+	[BPF_CGROUP_INET4_GETPEERNAME] = "getpeername4",
+	[BPF_CGROUP_INET6_GETPEERNAME] = "getpeername6",
+	[BPF_CGROUP_INET4_GETSOCKNAME] = "getsockname4",
+	[BPF_CGROUP_INET6_GETSOCKNAME] = "getsockname6",
 	[BPF_CGROUP_UDP4_SENDMSG] = "sendmsg4",
 	[BPF_CGROUP_UDP6_SENDMSG] = "sendmsg6",
 	[BPF_CGROUP_SYSCTL] = "sysctl",

commit 6e7e034e88e8e22cb14765c86da92416017e45b8
Author: Quentin Monnet <quentin@isovalent.com>
Date:   Mon May 11 17:15:33 2020 +0100

    tools, bpftool: Poison and replace kernel integer typedefs
    
    Replace the use of kernel-only integer typedefs (u8, u32, etc.) by their
    user space counterpart (__u8, __u32, etc.).
    
    Similarly to what libbpf does, poison the typedefs to avoid introducing
    them again in the future.
    
    Signed-off-by: Quentin Monnet <quentin@isovalent.com>
    Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
    Link: https://lore.kernel.org/bpf/20200511161536.29853-2-quentin@isovalent.com

diff --git a/tools/bpf/bpftool/main.h b/tools/bpf/bpftool/main.h
index a41cefabccaf..f89ac70ef973 100644
--- a/tools/bpf/bpftool/main.h
+++ b/tools/bpf/bpftool/main.h
@@ -18,6 +18,9 @@
 
 #include "json_writer.h"
 
+/* Make sure we do not use kernel-only integer typedefs */
+#pragma GCC poison u8 u16 u32 u64 s8 s16 s32 s64
+
 #define ptr_to_u64(ptr)	((__u64)(unsigned long)(ptr))
 
 #define NEXT_ARG()	({ argc--; argv++; if (argc < 0) usage(); })

commit 9406b485dea5e25bed7c81cd822747d494cc8bde
Author: Yonghong Song <yhs@fb.com>
Date:   Sat May 9 10:59:20 2020 -0700

    tools/bpftool: Add bpf_iter support for bptool
    
    Currently, only one command is supported
      bpftool iter pin <bpf_prog.o> <path>
    
    It will pin the trace/iter bpf program in
    the object file <bpf_prog.o> to the <path>
    where <path> should be on a bpffs mount.
    
    For example,
      $ bpftool iter pin ./bpf_iter_ipv6_route.o \
        /sys/fs/bpf/my_route
    User can then do a `cat` to print out the results:
      $ cat /sys/fs/bpf/my_route
        fe800000000000000000000000000000 40 00000000000000000000000000000000 ...
        00000000000000000000000000000000 00 00000000000000000000000000000000 ...
        00000000000000000000000000000001 80 00000000000000000000000000000000 ...
        fe800000000000008c0162fffebdfd57 80 00000000000000000000000000000000 ...
        ff000000000000000000000000000000 08 00000000000000000000000000000000 ...
        00000000000000000000000000000000 00 00000000000000000000000000000000 ...
    
    The implementation for ipv6_route iterator is in one of subsequent
    patches.
    
    This patch also added BPF_LINK_TYPE_ITER to link query.
    
    In the future, we may add additional parameters to pin command
    by parameterizing the bpf iterator. For example, a map_id or pid
    may be added to let bpf program only traverses a single map or task,
    similar to kernel seq_file single_open().
    
    We may also add introspection command for targets/iterators by
    leveraging the bpf_iter itself.
    
    Signed-off-by: Yonghong Song <yhs@fb.com>
    Signed-off-by: Alexei Starovoitov <ast@kernel.org>
    Link: https://lore.kernel.org/bpf/20200509175920.2477247-1-yhs@fb.com

diff --git a/tools/bpf/bpftool/main.h b/tools/bpf/bpftool/main.h
index 9b1fb81a8331..a41cefabccaf 100644
--- a/tools/bpf/bpftool/main.h
+++ b/tools/bpf/bpftool/main.h
@@ -199,6 +199,7 @@ int do_feature(int argc, char **argv);
 int do_btf(int argc, char **argv);
 int do_gen(int argc, char **argv);
 int do_struct_ops(int argc, char **argv);
+int do_iter(int argc, char **argv);
 
 int parse_u32_arg(int *argc, char ***argv, __u32 *val, const char *what);
 int prog_parse_fd(int *argc, char ***argv);

commit c5481f9a954f27b8730c1dfeebbc9b3b5b2b2481
Author: Andrii Nakryiko <andriin@fb.com>
Date:   Tue Apr 28 17:16:12 2020 -0700

    bpftool: Add bpf_link show and pin support
    
    Add `bpftool link show` and `bpftool link pin` commands.
    
    Example plain output for `link show` (with showing pinned paths):
    
    [vmuser@archvm bpf]$ sudo ~/local/linux/tools/bpf/bpftool/bpftool -f link
    1: tracing  prog 12
            prog_type tracing  attach_type fentry
            pinned /sys/fs/bpf/my_test_link
            pinned /sys/fs/bpf/my_test_link2
    2: tracing  prog 13
            prog_type tracing  attach_type fentry
    3: tracing  prog 14
            prog_type tracing  attach_type fentry
    4: tracing  prog 15
            prog_type tracing  attach_type fentry
    5: tracing  prog 16
            prog_type tracing  attach_type fentry
    6: tracing  prog 17
            prog_type tracing  attach_type fentry
    7: raw_tracepoint  prog 21
            tp 'sys_enter'
    8: cgroup  prog 25
            cgroup_id 584  attach_type egress
    9: cgroup  prog 25
            cgroup_id 599  attach_type egress
    10: cgroup  prog 25
            cgroup_id 614  attach_type egress
    11: cgroup  prog 25
            cgroup_id 629  attach_type egress
    
    Signed-off-by: Andrii Nakryiko <andriin@fb.com>
    Signed-off-by: Alexei Starovoitov <ast@kernel.org>
    Reviewed-by: Quentin Monnet <quentin@isovalent.com>
    Link: https://lore.kernel.org/bpf/20200429001614.1544-9-andriin@fb.com

diff --git a/tools/bpf/bpftool/main.h b/tools/bpf/bpftool/main.h
index 99d84bd1d5b2..9b1fb81a8331 100644
--- a/tools/bpf/bpftool/main.h
+++ b/tools/bpf/bpftool/main.h
@@ -50,6 +50,8 @@
 	"\t            {-m|--mapcompat} | {-n|--nomount} }"
 #define HELP_SPEC_MAP							\
 	"MAP := { id MAP_ID | pinned FILE | name MAP_NAME }"
+#define HELP_SPEC_LINK							\
+	"LINK := { id LINK_ID | pinned FILE }"
 
 static const char * const prog_type_name[] = {
 	[BPF_PROG_TYPE_UNSPEC]			= "unspec",
@@ -122,6 +124,7 @@ enum bpf_obj_type {
 	BPF_OBJ_UNKNOWN,
 	BPF_OBJ_PROG,
 	BPF_OBJ_MAP,
+	BPF_OBJ_LINK,
 };
 
 extern const char *bin_name;
@@ -134,6 +137,7 @@ extern bool verifier_logs;
 extern bool relaxed_maps;
 extern struct pinned_obj_table prog_table;
 extern struct pinned_obj_table map_table;
+extern struct pinned_obj_table link_table;
 
 void __printf(1, 2) p_err(const char *fmt, ...);
 void __printf(1, 2) p_info(const char *fmt, ...);
@@ -185,6 +189,7 @@ int do_pin_fd(int fd, const char *name);
 
 int do_prog(int argc, char **arg);
 int do_map(int argc, char **arg);
+int do_link(int argc, char **arg);
 int do_event_pipe(int argc, char **argv);
 int do_cgroup(int argc, char **arg);
 int do_perf(int argc, char **arg);

commit 50325b1761e31ad17d252e795af72a9af8c5a7d7
Author: Andrii Nakryiko <andriin@fb.com>
Date:   Tue Apr 28 17:16:11 2020 -0700

    bpftool: Expose attach_type-to-string array to non-cgroup code
    
    Move attach_type_strings into main.h for access in non-cgroup code.
    bpf_attach_type is used for non-cgroup attach types quite widely now. So also
    complete missing string translations for non-cgroup attach types.
    
    Signed-off-by: Andrii Nakryiko <andriin@fb.com>
    Signed-off-by: Alexei Starovoitov <ast@kernel.org>
    Reviewed-by: Quentin Monnet <quentin@isovalent.com>
    Link: https://lore.kernel.org/bpf/20200429001614.1544-8-andriin@fb.com

diff --git a/tools/bpf/bpftool/main.h b/tools/bpf/bpftool/main.h
index 86f14ce26fd7..99d84bd1d5b2 100644
--- a/tools/bpf/bpftool/main.h
+++ b/tools/bpf/bpftool/main.h
@@ -83,6 +83,38 @@ static const char * const prog_type_name[] = {
 	[BPF_PROG_TYPE_EXT]			= "ext",
 };
 
+static const char * const attach_type_name[__MAX_BPF_ATTACH_TYPE] = {
+	[BPF_CGROUP_INET_INGRESS] = "ingress",
+	[BPF_CGROUP_INET_EGRESS] = "egress",
+	[BPF_CGROUP_INET_SOCK_CREATE] = "sock_create",
+	[BPF_CGROUP_SOCK_OPS] = "sock_ops",
+	[BPF_CGROUP_DEVICE] = "device",
+	[BPF_CGROUP_INET4_BIND] = "bind4",
+	[BPF_CGROUP_INET6_BIND] = "bind6",
+	[BPF_CGROUP_INET4_CONNECT] = "connect4",
+	[BPF_CGROUP_INET6_CONNECT] = "connect6",
+	[BPF_CGROUP_INET4_POST_BIND] = "post_bind4",
+	[BPF_CGROUP_INET6_POST_BIND] = "post_bind6",
+	[BPF_CGROUP_UDP4_SENDMSG] = "sendmsg4",
+	[BPF_CGROUP_UDP6_SENDMSG] = "sendmsg6",
+	[BPF_CGROUP_SYSCTL] = "sysctl",
+	[BPF_CGROUP_UDP4_RECVMSG] = "recvmsg4",
+	[BPF_CGROUP_UDP6_RECVMSG] = "recvmsg6",
+	[BPF_CGROUP_GETSOCKOPT] = "getsockopt",
+	[BPF_CGROUP_SETSOCKOPT] = "setsockopt",
+
+	[BPF_SK_SKB_STREAM_PARSER] = "sk_skb_stream_parser",
+	[BPF_SK_SKB_STREAM_VERDICT] = "sk_skb_stream_verdict",
+	[BPF_SK_MSG_VERDICT] = "sk_msg_verdict",
+	[BPF_LIRC_MODE2] = "lirc_mode2",
+	[BPF_FLOW_DISSECTOR] = "flow_dissector",
+	[BPF_TRACE_RAW_TP] = "raw_tp",
+	[BPF_TRACE_FENTRY] = "fentry",
+	[BPF_TRACE_FEXIT] = "fexit",
+	[BPF_MODIFY_RETURN] = "mod_ret",
+	[BPF_LSM_MAC] = "lsm_mac",
+};
+
 extern const char * const map_type_name[];
 extern const size_t map_type_name_size;
 

commit 65c93628599dff4cd7cfb70130d1f6a2203731ea
Author: Martin KaFai Lau <kafai@fb.com>
Date:   Wed Mar 18 10:16:56 2020 -0700

    bpftool: Add struct_ops support
    
    This patch adds struct_ops support to the bpftool.
    
    To recap a bit on the recent bpf_struct_ops feature on the kernel side:
    It currently supports "struct tcp_congestion_ops" to be implemented
    in bpf.  At a high level, bpf_struct_ops is struct_ops map populated
    with a number of bpf progs.  bpf_struct_ops currently supports the
    "struct tcp_congestion_ops".  However, the bpf_struct_ops design is
    generic enough that other kernel struct ops can be supported in
    the future.
    
    Although struct_ops is map+progs at a high lever, there are differences
    in details.  For example,
    1) After registering a struct_ops, the struct_ops is held by the kernel
       subsystem (e.g. tcp-cc).  Thus, there is no need to pin a
       struct_ops map or its progs in order to keep them around.
    2) To iterate all struct_ops in a system, it iterates all maps
       in type BPF_MAP_TYPE_STRUCT_OPS.  BPF_MAP_TYPE_STRUCT_OPS is
       the current usual filter.  In the future, it may need to
       filter by other struct_ops specific properties.  e.g. filter by
       tcp_congestion_ops or other kernel subsystem ops in the future.
    3) struct_ops requires the running kernel having BTF info.  That allows
       more flexibility in handling other kernel structs.  e.g. it can
       always dump the latest bpf_map_info.
    4) Also, "struct_ops" command is not intended to repeat all features
       already provided by "map" or "prog".  For example, if there really
       is a need to pin the struct_ops map, the user can use the "map" cmd
       to do that.
    
    While the first attempt was to reuse parts from map/prog.c,  it ended up
    not a lot to share.  The only obvious item is the map_parse_fds() but
    that still requires modifications to accommodate struct_ops map specific
    filtering (for the immediate and the future needs).  Together with the
    earlier mentioned differences, it is better to part away from map/prog.c.
    
    The initial set of subcmds are, register, unregister, show, and dump.
    
    For register, it registers all struct_ops maps that can be found in an
    obj file.  Option can be added in the future to specify a particular
    struct_ops map.  Also, the common bpf_tcp_cc is stateless (e.g.
    bpf_cubic.c and bpf_dctcp.c).  The "reuse map" feature is not
    implemented in this patch and it can be considered later also.
    
    For other subcmds, please see the man doc for details.
    
    A sample output of dump:
    [root@arch-fb-vm1 bpf]# bpftool struct_ops dump name cubic
    [{
            "bpf_map_info": {
                "type": 26,
                "id": 64,
                "key_size": 4,
                "value_size": 256,
                "max_entries": 1,
                "map_flags": 0,
                "name": "cubic",
                "ifindex": 0,
                "btf_vmlinux_value_type_id": 18452,
                "netns_dev": 0,
                "netns_ino": 0,
                "btf_id": 52,
                "btf_key_type_id": 0,
                "btf_value_type_id": 0
            }
        },{
            "bpf_struct_ops_tcp_congestion_ops": {
                "refcnt": {
                    "refs": {
                        "counter": 1
                    }
                },
                "state": "BPF_STRUCT_OPS_STATE_INUSE",
                "data": {
                    "list": {
                        "next": 0,
                        "prev": 0
                    },
                    "key": 0,
                    "flags": 0,
                    "init": "void (struct sock *) bictcp_init/prog_id:138",
                    "release": "void (struct sock *) 0",
                    "ssthresh": "u32 (struct sock *) bictcp_recalc_ssthresh/prog_id:141",
                    "cong_avoid": "void (struct sock *, u32, u32) bictcp_cong_avoid/prog_id:140",
                    "set_state": "void (struct sock *, u8) bictcp_state/prog_id:142",
                    "cwnd_event": "void (struct sock *, enum tcp_ca_event) bictcp_cwnd_event/prog_id:139",
                    "in_ack_event": "void (struct sock *, u32) 0",
                    "undo_cwnd": "u32 (struct sock *) tcp_reno_undo_cwnd/prog_id:144",
                    "pkts_acked": "void (struct sock *, const struct ack_sample *) bictcp_acked/prog_id:143",
                    "min_tso_segs": "u32 (struct sock *) 0",
                    "sndbuf_expand": "u32 (struct sock *) 0",
                    "cong_control": "void (struct sock *, const struct rate_sample *) 0",
                    "get_info": "size_t (struct sock *, u32, int *, union tcp_cc_info *) 0",
                    "name": "bpf_cubic",
                    "owner": 0
                }
            }
        }
    ]
    
    Signed-off-by: Martin KaFai Lau <kafai@fb.com>
    Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
    Acked-by: Quentin Monnet <quentin@isovalent.com>
    Link: https://lore.kernel.org/bpf/20200318171656.129650-1-kafai@fb.com

diff --git a/tools/bpf/bpftool/main.h b/tools/bpf/bpftool/main.h
index 6db2398ae7e9..86f14ce26fd7 100644
--- a/tools/bpf/bpftool/main.h
+++ b/tools/bpf/bpftool/main.h
@@ -161,6 +161,7 @@ int do_tracelog(int argc, char **arg);
 int do_feature(int argc, char **argv);
 int do_btf(int argc, char **argv);
 int do_gen(int argc, char **argv);
+int do_struct_ops(int argc, char **argv);
 
 int parse_u32_arg(int *argc, char ***argv, __u32 *val, const char *what);
 int prog_parse_fd(int *argc, char ***argv);

commit d5ae04da34a213cc518558ecd25af0f609428560
Author: Martin KaFai Lau <kafai@fb.com>
Date:   Wed Mar 18 10:16:50 2020 -0700

    bpftool: Translate prog_id to its bpf prog_name
    
    The kernel struct_ops obj has kernel's func ptrs implemented by bpf_progs.
    The bpf prog_id is stored as the value of the func ptr for introspection
    purpose.  In the latter patch, a struct_ops dump subcmd will be added
    to introspect these func ptrs.  It is desired to print the actual bpf
    prog_name instead of only printing the prog_id.
    
    Since struct_ops is the only usecase storing prog_id in the func ptr,
    this patch adds a prog_id_as_func_ptr bool (default is false) to
    "struct btf_dumper" in order not to mis-interpret the ptr value
    for the other existing use-cases.
    
    While printing a func_ptr as a bpf prog_name,
    this patch also prefix the bpf prog_name with the ptr's func_proto.
    [ Note that it is the ptr's func_proto instead of the bpf prog's
      func_proto ]
    It reuses the current btf_dump_func() to obtain the ptr's func_proto
    string.
    
    Here is an example from the bpf_cubic.c:
    "void (struct sock *, u32, u32) bictcp_cong_avoid/prog_id:140"
    
    Signed-off-by: Martin KaFai Lau <kafai@fb.com>
    Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
    Acked-by: Quentin Monnet <quentin@isovalent.com>
    Link: https://lore.kernel.org/bpf/20200318171650.129252-1-kafai@fb.com

diff --git a/tools/bpf/bpftool/main.h b/tools/bpf/bpftool/main.h
index 5f6dccd43622..6db2398ae7e9 100644
--- a/tools/bpf/bpftool/main.h
+++ b/tools/bpf/bpftool/main.h
@@ -205,6 +205,7 @@ struct btf_dumper {
 	const struct btf *btf;
 	json_writer_t *jw;
 	bool is_plain_text;
+	bool prog_id_as_func_ptr;
 };
 
 /* btf_dumper_type - print data along with type information

commit 6ae32b29c09ba9b99c4c7317eed029587bd2706d
Author: Quentin Monnet <quentin@isovalent.com>
Date:   Wed Mar 11 02:12:05 2020 +0000

    tools: bpftool: Restore message on failure to guess program type
    
    In commit 4a3d6c6a6e4d ("libbpf: Reduce log level for custom section
    names"), log level for messages for libbpf_attach_type_by_name() and
    libbpf_prog_type_by_name() was downgraded from "info" to "debug". The
    latter function, in particular, is used by bpftool when attempting to
    load programs, and this change caused bpftool to exit with no hint or
    error message when it fails to detect the type of the program to load
    (unless "-d" option was provided).
    
    To help users understand why bpftool fails to load the program, let's do
    a second run of the function with log level in "debug" mode in case of
    failure.
    
    Before:
    
        # bpftool prog load sample_ret0.o /sys/fs/bpf/sample_ret0
        # echo $?
        255
    
    Or really verbose with -d flag:
    
        # bpftool -d prog load sample_ret0.o /sys/fs/bpf/sample_ret0
        libbpf: loading sample_ret0.o
        libbpf: section(1) .strtab, size 134, link 0, flags 0, type=3
        libbpf: skip section(1) .strtab
        libbpf: section(2) .text, size 16, link 0, flags 6, type=1
        libbpf: found program .text
        libbpf: section(3) .debug_abbrev, size 55, link 0, flags 0, type=1
        libbpf: skip section(3) .debug_abbrev
        libbpf: section(4) .debug_info, size 75, link 0, flags 0, type=1
        libbpf: skip section(4) .debug_info
        libbpf: section(5) .rel.debug_info, size 32, link 14, flags 0, type=9
        libbpf: skip relo .rel.debug_info(5) for section(4)
        libbpf: section(6) .debug_str, size 150, link 0, flags 30, type=1
        libbpf: skip section(6) .debug_str
        libbpf: section(7) .BTF, size 155, link 0, flags 0, type=1
        libbpf: section(8) .BTF.ext, size 80, link 0, flags 0, type=1
        libbpf: section(9) .rel.BTF.ext, size 32, link 14, flags 0, type=9
        libbpf: skip relo .rel.BTF.ext(9) for section(8)
        libbpf: section(10) .debug_frame, size 40, link 0, flags 0, type=1
        libbpf: skip section(10) .debug_frame
        libbpf: section(11) .rel.debug_frame, size 16, link 14, flags 0, type=9
        libbpf: skip relo .rel.debug_frame(11) for section(10)
        libbpf: section(12) .debug_line, size 74, link 0, flags 0, type=1
        libbpf: skip section(12) .debug_line
        libbpf: section(13) .rel.debug_line, size 16, link 14, flags 0, type=9
        libbpf: skip relo .rel.debug_line(13) for section(12)
        libbpf: section(14) .symtab, size 96, link 1, flags 0, type=2
        libbpf: looking for externs among 4 symbols...
        libbpf: collected 0 externs total
        libbpf: failed to guess program type from ELF section '.text'
        libbpf: supported section(type) names are: socket sk_reuseport kprobe/ [...]
    
    After:
    
        # bpftool prog load sample_ret0.o /sys/fs/bpf/sample_ret0
        libbpf: failed to guess program type from ELF section '.text'
        libbpf: supported section(type) names are: socket sk_reuseport kprobe/ [...]
    
    Signed-off-by: Quentin Monnet <quentin@isovalent.com>
    Signed-off-by: Alexei Starovoitov <ast@kernel.org>
    Acked-by: John Fastabend <john.fastabend@gmail.com>
    Link: https://lore.kernel.org/bpf/20200311021205.9755-1-quentin@isovalent.com
    Signed-off-by: Alexei Starovoitov <ast@kernel.org>

diff --git a/tools/bpf/bpftool/main.h b/tools/bpf/bpftool/main.h
index d57972dd0f2b..5f6dccd43622 100644
--- a/tools/bpf/bpftool/main.h
+++ b/tools/bpf/bpftool/main.h
@@ -14,6 +14,8 @@
 #include <linux/hashtable.h>
 #include <tools/libc_compat.h>
 
+#include <bpf/libbpf.h>
+
 #include "json_writer.h"
 
 #define ptr_to_u64(ptr)	((__u64)(unsigned long)(ptr))
@@ -229,4 +231,7 @@ struct tcmsg;
 int do_xdp_dump(struct ifinfomsg *ifinfo, struct nlattr **tb);
 int do_filter_dump(struct tcmsg *ifinfo, struct nlattr **tb, const char *kind,
 		   const char *devname, int ifindex);
+
+int print_all_levels(__maybe_unused enum libbpf_print_level level,
+		     const char *format, va_list args);
 #endif

commit 75a1e792c335b5c6d7fdb1014da47aeb64c5944f
Author: Quentin Monnet <quentin@isovalent.com>
Date:   Thu Mar 12 18:46:07 2020 +0000

    tools: bpftool: Allow all prog/map handles for pinning objects
    
    Documentation and interactive help for bpftool have always explained
    that the regular handles for programs (id|name|tag|pinned) and maps
    (id|name|pinned) can be passed to the utility when attempting to pin
    objects (bpftool prog pin PROG / bpftool map pin MAP).
    
    THIS IS A LIE!! The tool actually accepts only ids, as the parsing is
    done in do_pin_any() in common.c instead of reusing the parsing
    functions that have long been generic for program and map handles.
    
    Instead of fixing the doc, fix the code. It is trivial to reuse the
    generic parsing, and to simplify do_pin_any() in the process.
    
    Do not accept to pin multiple objects at the same time with
    prog_parse_fds() or map_parse_fds() (this would require a more complex
    syntax for passing multiple sysfs paths and validating that they
    correspond to the number of e.g. programs we find for a given name or
    tag).
    
    Signed-off-by: Quentin Monnet <quentin@isovalent.com>
    Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
    Acked-by: Martin KaFai Lau <kafai@fb.com>
    Link: https://lore.kernel.org/bpf/20200312184608.12050-2-quentin@isovalent.com

diff --git a/tools/bpf/bpftool/main.h b/tools/bpf/bpftool/main.h
index 724ef9d941d3..d57972dd0f2b 100644
--- a/tools/bpf/bpftool/main.h
+++ b/tools/bpf/bpftool/main.h
@@ -146,7 +146,7 @@ char *get_fdinfo(int fd, const char *key);
 int open_obj_pinned(char *path, bool quiet);
 int open_obj_pinned_any(char *path, enum bpf_obj_type exp_type);
 int mount_bpffs_for_pin(const char *name);
-int do_pin_any(int argc, char **argv, int (*get_fd_by_id)(__u32));
+int do_pin_any(int argc, char **argv, int (*get_fd_by_id)(int *, char ***));
 int do_pin_fd(int fd, const char *name);
 
 int do_prog(int argc, char **arg);

commit 3494bec0f6ac8ac06e0ad7c35933db345b2c5a83
Author: Andrey Ignatov <rdna@fb.com>
Date:   Tue Feb 25 14:34:41 2020 -0800

    bpftool: Support struct_ops, tracing, ext prog types
    
    Add support for prog types that were added to kernel but not present in
    bpftool yet: struct_ops, tracing, ext prog types and corresponding
    section names.
    
    Before:
      # bpftool p l
      ...
      184: type 26  name test_subprog3  tag dda135a7dc0daf54  gpl
              loaded_at 2020-02-25T13:28:33-0800  uid 0
              xlated 112B  jited 103B  memlock 4096B  map_ids 136
              btf_id 85
      185: type 28  name new_get_skb_len  tag d2de5b87d8e5dc49  gpl
              loaded_at 2020-02-25T13:28:33-0800  uid 0
              xlated 72B  jited 69B  memlock 4096B  map_ids 136
              btf_id 85
    
    After:
      # bpftool p l
      ...
      184: tracing  name test_subprog3  tag dda135a7dc0daf54  gpl
              loaded_at 2020-02-25T13:28:33-0800  uid 0
              xlated 112B  jited 103B  memlock 4096B  map_ids 136
              btf_id 85
      185: ext  name new_get_skb_len  tag d2de5b87d8e5dc49  gpl
              loaded_at 2020-02-25T13:28:33-0800  uid 0
              xlated 72B  jited 69B  memlock 4096B  map_ids 136
              btf_id 85
    
    Signed-off-by: Andrey Ignatov <rdna@fb.com>
    Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
    Reviewed-by: Quentin Monnet <quentin@isovalent.com>
    Acked-by: Song Liu <songliubraving@fb.com>
    Link: https://lore.kernel.org/bpf/20200225223441.689109-1-rdna@fb.com

diff --git a/tools/bpf/bpftool/main.h b/tools/bpf/bpftool/main.h
index 4e75b58d3989..724ef9d941d3 100644
--- a/tools/bpf/bpftool/main.h
+++ b/tools/bpf/bpftool/main.h
@@ -76,6 +76,9 @@ static const char * const prog_type_name[] = {
 	[BPF_PROG_TYPE_CGROUP_SYSCTL]		= "cgroup_sysctl",
 	[BPF_PROG_TYPE_RAW_TRACEPOINT_WRITABLE]	= "raw_tracepoint_writable",
 	[BPF_PROG_TYPE_CGROUP_SOCKOPT]		= "cgroup_sockopt",
+	[BPF_PROG_TYPE_TRACING]			= "tracing",
+	[BPF_PROG_TYPE_STRUCT_OPS]		= "struct_ops",
+	[BPF_PROG_TYPE_EXT]			= "ext",
 };
 
 extern const char * const map_type_name[];

commit 985ead416df39d6fe8e89580cc1db6aa273e0175
Author: Andrii Nakryiko <andriin@fb.com>
Date:   Fri Dec 13 17:43:37 2019 -0800

    bpftool: Add skeleton codegen command
    
    Add `bpftool gen skeleton` command, which takes in compiled BPF .o object file
    and dumps a BPF skeleton struct and related code to work with that skeleton.
    Skeleton itself is tailored to a specific structure of provided BPF object
    file, containing accessors (just plain struct fields) for every map and
    program, as well as dedicated space for bpf_links. If BPF program is using
    global variables, corresponding structure definitions of compatible memory
    layout are emitted as well, making it possible to initialize and subsequently
    read/update global variables values using simple and clear C syntax for
    accessing fields. This skeleton majorly improves usability of
    opening/loading/attaching of BPF object, as well as interacting with it
    throughout the lifetime of loaded BPF object.
    
    Generated skeleton struct has the following structure:
    
    struct <object-name> {
            /* used by libbpf's skeleton API */
            struct bpf_object_skeleton *skeleton;
            /* bpf_object for libbpf APIs */
            struct bpf_object *obj;
            struct {
                    /* for every defined map in BPF object: */
                    struct bpf_map *<map-name>;
            } maps;
            struct {
                    /* for every program in BPF object: */
                    struct bpf_program *<program-name>;
            } progs;
            struct {
                    /* for every program in BPF object: */
                    struct bpf_link *<program-name>;
            } links;
            /* for every present global data section: */
            struct <object-name>__<one of bss, data, or rodata> {
                    /* memory layout of corresponding data section,
                     * with every defined variable represented as a struct field
                     * with exactly the same type, but without const/volatile
                     * modifiers, e.g.:
                     */
                     int *my_var_1;
                     ...
            } *<one of bss, data, or rodata>;
    };
    
    This provides great usability improvements:
    - no need to look up maps and programs by name, instead just
      my_obj->maps.my_map or my_obj->progs.my_prog would give necessary
      bpf_map/bpf_program pointers, which user can pass to existing libbpf APIs;
    - pre-defined places for bpf_links, which will be automatically populated for
      program types that libbpf knows how to attach automatically (currently
      tracepoints, kprobe/kretprobe, raw tracepoint and tracing programs). On
      tearing down skeleton, all active bpf_links will be destroyed (meaning BPF
      programs will be detached, if they are attached). For cases in which libbpf
      doesn't know how to auto-attach BPF program, user can manually create link
      after loading skeleton and they will be auto-detached on skeleton
      destruction:
    
            my_obj->links.my_fancy_prog = bpf_program__attach_cgroup_whatever(
                    my_obj->progs.my_fancy_prog, <whatever extra param);
    
    - it's extremely easy and convenient to work with global data from userspace
      now. Both for read-only and read/write variables, it's possible to
      pre-initialize them before skeleton is loaded:
    
            skel = my_obj__open(raw_embed_data);
            my_obj->rodata->my_var = 123;
            my_obj__load(skel); /* 123 will be initialization value for my_var */
    
      After load, if kernel supports mmap() for BPF arrays, user can still read
      (and write for .bss and .data) variables values, but at that point it will
      be directly mmap()-ed to BPF array, backing global variables. This allows to
      seamlessly exchange data with BPF side. From userspace program's POV, all
      the pointers and memory contents stay the same, but mapped kernel memory
      changes to point to created map.
      If kernel doesn't yet support mmap() for BPF arrays, it's still possible to
      use those data section structs to pre-initialize .bss, .data, and .rodata,
      but after load their pointers will be reset to NULL, allowing user code to
      gracefully handle this condition, if necessary.
    
    Signed-off-by: Andrii Nakryiko <andriin@fb.com>
    Signed-off-by: Alexei Starovoitov <ast@kernel.org>
    Acked-by: Martin KaFai Lau <kafai@fb.com>
    Link: https://lore.kernel.org/bpf/20191214014341.3442258-14-andriin@fb.com

diff --git a/tools/bpf/bpftool/main.h b/tools/bpf/bpftool/main.h
index 81890f4c8cca..4e75b58d3989 100644
--- a/tools/bpf/bpftool/main.h
+++ b/tools/bpf/bpftool/main.h
@@ -155,6 +155,7 @@ int do_net(int argc, char **arg);
 int do_tracelog(int argc, char **arg);
 int do_feature(int argc, char **argv);
 int do_btf(int argc, char **argv);
+int do_gen(int argc, char **argv);
 
 int parse_u32_arg(int *argc, char ***argv, __u32 *val, const char *what);
 int prog_parse_fd(int *argc, char ***argv);

commit 99f9863a0c45f4e87cb99593015090fdc9f44398
Author: Paul Chaignon <paul.chaignon@orange.com>
Date:   Fri Dec 13 20:10:37 2019 +0100

    bpftool: Match maps by name
    
    This patch implements lookup by name for maps and changes the behavior of
    lookups by tag to be consistent with prog subcommands.  Similarly to
    program subcommands, the show and dump commands will return all maps with
    the given name (or tag), whereas other commands will error out if several
    maps have the same name (resp. tag).
    
    When a map has BTF info, it is dumped in JSON with available BTF info.
    This patch requires that all matched maps have BTF info before switching
    the output format to JSON.
    
    Signed-off-by: Paul Chaignon <paul.chaignon@orange.com>
    Signed-off-by: Alexei Starovoitov <ast@kernel.org>
    Link: https://lore.kernel.org/bpf/8de1c9f273860b3ea1680502928f4da2336b853e.1576263640.git.paul.chaignon@gmail.com

diff --git a/tools/bpf/bpftool/main.h b/tools/bpf/bpftool/main.h
index a7ead7bb9447..81890f4c8cca 100644
--- a/tools/bpf/bpftool/main.h
+++ b/tools/bpf/bpftool/main.h
@@ -47,7 +47,7 @@
 	"OPTIONS := { {-j|--json} [{-p|--pretty}] | {-f|--bpffs} |\n"	\
 	"\t            {-m|--mapcompat} | {-n|--nomount} }"
 #define HELP_SPEC_MAP							\
-	"MAP := { id MAP_ID | pinned FILE }"
+	"MAP := { id MAP_ID | pinned FILE | name MAP_NAME }"
 
 static const char * const prog_type_name[] = {
 	[BPF_PROG_TYPE_UNSPEC]			= "unspec",

commit a7d22ca2a483d6c69c0791954447464297315ffa
Author: Paul Chaignon <paul.chaignon@orange.com>
Date:   Fri Dec 13 20:10:17 2019 +0100

    bpftool: Match programs by name
    
    When working with frequently modified BPF programs, both the ID and the
    tag may change.  bpftool currently doesn't provide a "stable" way to match
    such programs.
    
    This patch implements lookup by name for programs.  The show and dump
    commands will return all programs with the given name, whereas other
    commands will error out if several programs have the same name.
    
    Signed-off-by: Paul Chaignon <paul.chaignon@orange.com>
    Signed-off-by: Alexei Starovoitov <ast@kernel.org>
    Reviewed-by: Quentin Monnet <quentin.monnet@netronome.com>
    Link: https://lore.kernel.org/bpf/b5fc1a5dcfaeb5f16fc80295cdaa606dd2d91534.1576263640.git.paul.chaignon@gmail.com

diff --git a/tools/bpf/bpftool/main.h b/tools/bpf/bpftool/main.h
index 2899095f8254..a7ead7bb9447 100644
--- a/tools/bpf/bpftool/main.h
+++ b/tools/bpf/bpftool/main.h
@@ -42,7 +42,7 @@
 #define BPF_TAG_FMT	"%02hhx%02hhx%02hhx%02hhx%02hhx%02hhx%02hhx%02hhx"
 
 #define HELP_SPEC_PROGRAM						\
-	"PROG := { id PROG_ID | pinned FILE | tag PROG_TAG }"
+	"PROG := { id PROG_ID | pinned FILE | tag PROG_TAG | name PROG_NAME }"
 #define HELP_SPEC_OPTIONS						\
 	"OPTIONS := { {-j|--json} [{-p|--pretty}] | {-f|--bpffs} |\n"	\
 	"\t            {-m|--mapcompat} | {-n|--nomount} }"

commit 32e3e58e4c5910bb0d6024d151c2f559bb7e973c
Author: Andrii Nakryiko <andriin@fb.com>
Date:   Mon Oct 7 15:56:04 2019 -0700

    bpftool: Fix bpftool build by switching to bpf_object__open_file()
    
    As part of libbpf in 5e61f2707029 ("libbpf: stop enforcing kern_version,
    populate it for users") non-LIBBPF_API __bpf_object__open_xattr() API
    was removed from libbpf.h header. This broke bpftool, which relied on
    that function. This patch fixes the build by switching to newly added
    bpf_object__open_file() which provides the same capabilities, but is
    official and future-proof API.
    
    v1->v2:
    - fix prog_type shadowing (Stanislav).
    
    Fixes: 5e61f2707029 ("libbpf: stop enforcing kern_version, populate it for users")
    Reported-by: Stanislav Fomichev <sdf@google.com>
    Signed-off-by: Andrii Nakryiko <andriin@fb.com>
    Signed-off-by: Alexei Starovoitov <ast@kernel.org>
    Reviewed-by: Stanislav Fomichev <sdf@google.com>
    Link: https://lore.kernel.org/bpf/20191007225604.2006146-1-andriin@fb.com

diff --git a/tools/bpf/bpftool/main.h b/tools/bpf/bpftool/main.h
index af9ad56c303a..2899095f8254 100644
--- a/tools/bpf/bpftool/main.h
+++ b/tools/bpf/bpftool/main.h
@@ -94,7 +94,7 @@ extern bool json_output;
 extern bool show_pinned;
 extern bool block_mount;
 extern bool verifier_logs;
-extern int bpf_flags;
+extern bool relaxed_maps;
 extern struct pinned_obj_table prog_table;
 extern struct pinned_obj_table map_table;
 

commit 8918dc42dc85ba6981028f65a989c478eb80bc02
Author: Quentin Monnet <quentin.monnet@netronome.com>
Date:   Thu Aug 15 15:32:20 2019 +0100

    tools: bpftool: move "__printf()" attributes to header file
    
    Some functions in bpftool have a "__printf()" format attributes to tell
    the compiler they should expect printf()-like arguments. But because
    these attributes are not used for the function prototypes in the header
    files, the compiler does not run the checks everywhere the functions are
    used, and some mistakes on format string and corresponding arguments
    slipped in over time.
    
    Let's move the __printf() attributes to the correct places.
    
    Note: We add guards around the definition of GCC_VERSION in
    tools/include/linux/compiler-gcc.h to prevent a conflict in jit_disasm.c
    on GCC_VERSION from headers pulled via libbfd.
    
    Fixes: c101189bc968 ("tools: bpftool: fix -Wmissing declaration warnings")
    Reported-by: Jakub Kicinski <jakub.kicinski@netronome.com>
    Signed-off-by: Quentin Monnet <quentin.monnet@netronome.com>
    Reviewed-by: Jakub Kicinski <jakub.kicinski@netronome.com>
    Signed-off-by: Alexei Starovoitov <ast@kernel.org>

diff --git a/tools/bpf/bpftool/main.h b/tools/bpf/bpftool/main.h
index 7031a4bf87a0..af9ad56c303a 100644
--- a/tools/bpf/bpftool/main.h
+++ b/tools/bpf/bpftool/main.h
@@ -98,8 +98,8 @@ extern int bpf_flags;
 extern struct pinned_obj_table prog_table;
 extern struct pinned_obj_table map_table;
 
-void p_err(const char *fmt, ...);
-void p_info(const char *fmt, ...);
+void __printf(1, 2) p_err(const char *fmt, ...);
+void __printf(1, 2) p_info(const char *fmt, ...);
 
 bool is_prefix(const char *pfx, const char *str);
 int detect_common_prefix(const char *arg, ...);

commit 216b65fb706e34128a5317d71b300daac9c428c4
Author: Daniel T. Lee <danieltimlee@gmail.com>
Date:   Fri Jul 12 10:35:39 2019 +0900

    tools: bpftool: add raw_tracepoint_writable prog type to header
    
    From commit 9df1c28bb752 ("bpf: add writable context for raw tracepoints"),
    a new type of BPF_PROG, RAW_TRACEPOINT_WRITABLE has been added.
    
    Since this BPF_PROG_TYPE_RAW_TRACEPOINT_WRITABLE is not listed at
    bpftool's header, it causes a segfault when executing 'bpftool feature'.
    
    This commit adds BPF_PROG_TYPE_RAW_TRACEPOINT_WRITABLE entry to
    prog_type_name enum, and will eventually fixes the segfault issue.
    
    Fixes: 9df1c28bb752 ("bpf: add writable context for raw tracepoints")
    Signed-off-by: Daniel T. Lee <danieltimlee@gmail.com>
    Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>

diff --git a/tools/bpf/bpftool/main.h b/tools/bpf/bpftool/main.h
index 3ef0d9051e10..7031a4bf87a0 100644
--- a/tools/bpf/bpftool/main.h
+++ b/tools/bpf/bpftool/main.h
@@ -74,6 +74,7 @@ static const char * const prog_type_name[] = {
 	[BPF_PROG_TYPE_SK_REUSEPORT]		= "sk_reuseport",
 	[BPF_PROG_TYPE_FLOW_DISSECTOR]		= "flow_dissector",
 	[BPF_PROG_TYPE_CGROUP_SYSCTL]		= "cgroup_sysctl",
+	[BPF_PROG_TYPE_RAW_TRACEPOINT_WRITABLE]	= "raw_tracepoint_writable",
 	[BPF_PROG_TYPE_CGROUP_SOCKOPT]		= "cgroup_sockopt",
 };
 

commit ba95c7452439756d4f6dceb5a188b7c31dbbe5b6
Author: Quentin Monnet <quentin.monnet@netronome.com>
Date:   Fri Jul 5 18:54:33 2019 +0100

    tools: bpftool: add "prog run" subcommand to test-run programs
    
    Add a new "bpftool prog run" subcommand to run a loaded program on input
    data (and possibly with input context) passed by the user.
    
    Print output data (and output context if relevant) into a file or into
    the console. Print return value and duration for the test run into the
    console.
    
    A "repeat" argument can be passed to run the program several times in a
    row.
    
    The command does not perform any kind of verification based on program
    type (Is this program type allowed to use an input context?) or on data
    consistency (Can I work with empty input data?), this is left to the
    kernel.
    
    Example invocation:
    
        # perl -e 'print "\x0" x 14' | ./bpftool prog run \
                pinned /sys/fs/bpf/sample_ret0 \
                data_in - data_out - repeat 5
        0000000 0000 0000 0000 0000 0000 0000 0000      | ........ ......
        Return value: 0, duration (average): 260ns
    
    When one of data_in or ctx_in is "-", bpftool reads from standard input,
    in binary format. Other formats (JSON, hexdump) might be supported (via
    an optional command line keyword like "data_fmt_in") in the future if
    relevant, but this would require doing more parsing in bpftool.
    
    v2:
    - Fix argument names for function check_single_stdin(). (Yonghong)
    
    Signed-off-by: Quentin Monnet <quentin.monnet@netronome.com>
    Reviewed-by: Jakub Kicinski <jakub.kicinski@netronome.com>
    Acked-by: Yonghong Song <yhs@fb.com>
    Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>

diff --git a/tools/bpf/bpftool/main.h b/tools/bpf/bpftool/main.h
index 9c5d9c80f71e..3ef0d9051e10 100644
--- a/tools/bpf/bpftool/main.h
+++ b/tools/bpf/bpftool/main.h
@@ -101,6 +101,7 @@ void p_err(const char *fmt, ...);
 void p_info(const char *fmt, ...);
 
 bool is_prefix(const char *pfx, const char *str);
+int detect_common_prefix(const char *arg, ...);
 void fprint_hex(FILE *f, void *arg, unsigned int n, const char *sep);
 void usage(void) __noreturn;
 

commit f6d08d9d8543c8ee494b307804b28e2750ffedb9
Author: Stanislav Fomichev <sdf@google.com>
Date:   Thu Jun 27 13:38:55 2019 -0700

    bpftool: support cgroup sockopt
    
    Support sockopt prog type and cgroup hooks in the bpftool.
    
    Cc: Andrii Nakryiko <andriin@fb.com>
    Cc: Martin Lau <kafai@fb.com>
    Acked-by: Jakub Kicinski <jakub.kicinski@netronome.com>
    Signed-off-by: Stanislav Fomichev <sdf@google.com>
    Signed-off-by: Alexei Starovoitov <ast@kernel.org>

diff --git a/tools/bpf/bpftool/main.h b/tools/bpf/bpftool/main.h
index 28a2a5857e14..9c5d9c80f71e 100644
--- a/tools/bpf/bpftool/main.h
+++ b/tools/bpf/bpftool/main.h
@@ -74,6 +74,7 @@ static const char * const prog_type_name[] = {
 	[BPF_PROG_TYPE_SK_REUSEPORT]		= "sk_reuseport",
 	[BPF_PROG_TYPE_FLOW_DISSECTOR]		= "flow_dissector",
 	[BPF_PROG_TYPE_CGROUP_SYSCTL]		= "cgroup_sysctl",
+	[BPF_PROG_TYPE_CGROUP_SOCKOPT]		= "cgroup_sockopt",
 };
 
 extern const char * const map_type_name[];

commit 55d778076b0354b088a9a16d9ff584c887e17f42
Author: Quentin Monnet <quentin.monnet@netronome.com>
Date:   Fri May 24 11:36:48 2019 +0100

    tools: bpftool: make -d option print debug output from verifier
    
    The "-d" option is used to require all logs available for bpftool. So
    far it meant telling libbpf to print even debug-level information. But
    there is another source of info that can be made more verbose: when we
    attemt to load programs with bpftool, we can pass a log_level parameter
    to the verifier in order to control the amount of information that is
    printed to the console.
    
    Reuse the "-d" option to print all information the verifier can tell. At
    this time, this means logs related to BPF_LOG_LEVEL1, BPF_LOG_LEVEL2 and
    BPF_LOG_STATS. As mentioned in the discussion on the first version of
    this set, these macros are internal to the kernel
    (include/linux/bpf_verifier.h) and are not meant to be part of the
    stable user API, therefore we simply use the related constants to print
    whatever we can at this time, without trying to tell users what is
    log_level1 or what is statistics.
    
    Verifier logs are only used when loading programs for now (In the
    future: for loading BTF objects with bpftool? Although libbpf does not
    currently offer to print verifier info at debug level if no error
    occurred when loading BTF objects), so bpftool.rst and bpftool-prog.rst
    are the only man pages to get the update.
    
    v3:
    - Add details on log level and BTF loading at the end of commit log.
    
    v2:
    - Remove the possibility to select the log levels to use (v1 offered a
      combination of "log_level1", "log_level2" and "stats").
    - The macros from kernel header bpf_verifier.h are not used (and
      therefore not moved to UAPI header).
    - In v1 this was a distinct option, but is now merged in the only "-d"
      switch to activate libbpf and verifier debug-level logs all at the
      same time.
    
    Signed-off-by: Quentin Monnet <quentin.monnet@netronome.com>
    Reviewed-by: Jakub Kicinski <jakub.kicinski@netronome.com>
    Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>

diff --git a/tools/bpf/bpftool/main.h b/tools/bpf/bpftool/main.h
index 3d63feb7f852..28a2a5857e14 100644
--- a/tools/bpf/bpftool/main.h
+++ b/tools/bpf/bpftool/main.h
@@ -91,6 +91,7 @@ extern json_writer_t *json_wtr;
 extern bool json_output;
 extern bool show_pinned;
 extern bool block_mount;
+extern bool verifier_logs;
 extern int bpf_flags;
 extern struct pinned_obj_table prog_table;
 extern struct pinned_obj_table map_table;

commit c93cc69004df340d71a9ab3433b8e5c9fd1fca7a
Author: Andrii Nakryiko <andriin@fb.com>
Date:   Thu Apr 25 15:30:08 2019 -0700

    bpftool: add ability to dump BTF types
    
    Add new `btf dump` sub-command to bpftool. It allows to dump
    human-readable low-level BTF types representation of BTF types. BTF can
    be retrieved from few different sources:
      - from BTF object by ID;
      - from PROG, if it has associated BTF;
      - from MAP, if it has associated BTF data; it's possible to narrow
        down types to either key type, value type, both, or all BTF types;
      - from ELF file (.BTF section).
    
    Output format mostly follows BPF verifier log format with few notable
    exceptions:
      - all the type/field/param/etc names are enclosed in single quotes to
        allow easier grepping and to stand out a little bit more;
      - FUNC_PROTO output follows STRUCT/UNION/ENUM format of having one
        line per each argument; this is more uniform and allows easy
        grepping, as opposed to succinct, but inconvenient format that BPF
        verifier log is using.
    
    Cc: Daniel Borkmann <daniel@iogearbox.net>
    Cc: Alexei Starovoitov <ast@fb.com>
    Cc: Yonghong Song <yhs@fb.com>
    Cc: Martin KaFai Lau <kafai@fb.com>
    Cc: Song Liu <songliubraving@fb.com>
    Cc: Arnaldo Carvalho de Melo <acme@redhat.com>
    Acked-by: Yonghong Song <yhs@fb.com>
    Signed-off-by: Andrii Nakryiko <andriin@fb.com>
    Signed-off-by: Alexei Starovoitov <ast@kernel.org>

diff --git a/tools/bpf/bpftool/main.h b/tools/bpf/bpftool/main.h
index 1ccc46169a19..3d63feb7f852 100644
--- a/tools/bpf/bpftool/main.h
+++ b/tools/bpf/bpftool/main.h
@@ -150,6 +150,7 @@ int do_perf(int argc, char **arg);
 int do_net(int argc, char **arg);
 int do_tracelog(int argc, char **arg);
 int do_feature(int argc, char **argv);
+int do_btf(int argc, char **argv);
 
 int parse_u32_arg(int *argc, char ***argv, __u32 *val, const char *what);
 int prog_parse_fd(int *argc, char ***argv);

commit f25377ee4fb1118650a08b403234aa6f57ce25a9
Author: Andrey Ignatov <rdna@fb.com>
Date:   Tue Apr 16 13:13:47 2019 -0700

    bpftool: Support sysctl hook
    
    Add support for recently added BPF_PROG_TYPE_CGROUP_SYSCTL program type
    and BPF_CGROUP_SYSCTL attach type.
    
    Example of bpftool output with sysctl program from selftests:
    
      # bpftool p load ./test_sysctl_prog.o /mnt/bpf/sysctl_prog type cgroup/sysctl
      # bpftool p l
      9: cgroup_sysctl  name sysctl_tcp_mem  tag 0dd05f81a8d0d52e  gpl
              loaded_at 2019-04-16T12:57:27-0700  uid 0
              xlated 1008B  jited 623B  memlock 4096B
      # bpftool c a /mnt/cgroup2/bla sysctl id 9
      # bpftool c t
      CgroupPath
      ID       AttachType      AttachFlags     Name
      /mnt/cgroup2/bla
          9        sysctl                          sysctl_tcp_mem
      # bpftool c d /mnt/cgroup2/bla sysctl id 9
      # bpftool c t
      CgroupPath
      ID       AttachType      AttachFlags     Name
    
    Signed-off-by: Andrey Ignatov <rdna@fb.com>
    Acked-by: Song Liu <songliubraving@fb.com>
    Acked-by: Jakub Kicinski <jakub.kicinski@netronome.com>
    Signed-off-by: Alexei Starovoitov <ast@kernel.org>

diff --git a/tools/bpf/bpftool/main.h b/tools/bpf/bpftool/main.h
index d7dd84d3c660..1ccc46169a19 100644
--- a/tools/bpf/bpftool/main.h
+++ b/tools/bpf/bpftool/main.h
@@ -73,6 +73,7 @@ static const char * const prog_type_name[] = {
 	[BPF_PROG_TYPE_LIRC_MODE2]		= "lirc_mode2",
 	[BPF_PROG_TYPE_SK_REUSEPORT]		= "sk_reuseport",
 	[BPF_PROG_TYPE_FLOW_DISSECTOR]		= "flow_dissector",
+	[BPF_PROG_TYPE_CGROUP_SYSCTL]		= "cgroup_sysctl",
 };
 
 extern const char * const map_type_name[];

commit f99e166397f0298fe78bce24c55c6d074f9bf196
Author: Quentin Monnet <quentin.monnet@netronome.com>
Date:   Thu Jan 17 15:27:54 2019 +0000

    tools: bpftool: add probes for eBPF map types
    
    Add new probes for eBPF map types, to detect what are the ones available
    on the system. Try creating one map of each type, and see if the kernel
    complains.
    
    Sample output:
    
        # bpftool feature probe kernel
        ...
        Scanning eBPF map types...
        eBPF map_type hash is available
        eBPF map_type array is available
        eBPF map_type prog_array is available
        ...
    
        # bpftool --json --pretty feature probe kernel
        {
            ...
            "map_types": {
                "have_hash_map_type": true,
                "have_array_map_type": true,
                "have_prog_array_map_type": true,
                ...
            }
        }
    
    v5:
    - In libbpf.map, move global symbol to the new LIBBPF_0.0.2 section.
    
    v3:
    - Use a switch with all enum values for setting specific map parameters,
      so that gcc complains at compile time (-Wswitch-enum) if new map types
      were added to the kernel but libbpf was not updated.
    
    v2:
    - Move probes from bpftool to libbpf.
    - Remove C-style macros output from this patch.
    
    Signed-off-by: Quentin Monnet <quentin.monnet@netronome.com>
    Reviewed-by: Jakub Kicinski <jakub.kicinski@netronome.com>
    Reviewed-by: Stanislav Fomichev <sdf@google.com>
    Signed-off-by: Alexei Starovoitov <ast@kernel.org>

diff --git a/tools/bpf/bpftool/main.h b/tools/bpf/bpftool/main.h
index 5cfc6601de9b..d7dd84d3c660 100644
--- a/tools/bpf/bpftool/main.h
+++ b/tools/bpf/bpftool/main.h
@@ -75,6 +75,9 @@ static const char * const prog_type_name[] = {
 	[BPF_PROG_TYPE_FLOW_DISSECTOR]		= "flow_dissector",
 };
 
+extern const char * const map_type_name[];
+extern const size_t map_type_name_size;
+
 enum bpf_obj_type {
 	BPF_OBJ_UNKNOWN,
 	BPF_OBJ_PROG,

commit 49eb7ab3b2b5a106307494d2a46248ecb1530578
Author: Quentin Monnet <quentin.monnet@netronome.com>
Date:   Thu Jan 17 15:27:50 2019 +0000

    tools: bpftool: add basic probe capability, probe syscall availability
    
    Add a new component and command for bpftool, in order to probe the
    system to dump a set of eBPF-related parameters so that users can know
    what features are available on the system.
    
    Parameters are dumped in plain or JSON output (with -j/-p options).
    
    The current patch introduces probing of one simple parameter:
    availability of the bpf() system call. Later commits
    will add other probes.
    
    Sample output:
    
        # bpftool feature probe kernel
        Scanning system call availability...
        bpf() syscall is available
    
        # bpftool --json --pretty feature probe kernel
        {
            "syscall_config": {
                "have_bpf_syscall": true
            }
        }
    
    The optional "kernel" keyword enforces probing of the current system,
    which is the only possible behaviour at this stage. It can be safely
    omitted.
    
    The feature comes with the relevant man page, but bash completion will
    come in a dedicated commit.
    
    v3:
    - Do not probe kernel version. Contrarily to what is written below for
      v2, we can have the kernel version retrieved in libbpf instead of
      bpftool (in the patch adding probing for program types).
    
    v2:
    - Remove C-style macros output from this patch.
    - Even though kernel version is no longer needed for testing kprobes
      availability, note that we still collect it in this patch so that
      bpftool gets able to probe (in next patches) older kernels as well.
    
    Signed-off-by: Quentin Monnet <quentin.monnet@netronome.com>
    Reviewed-by: Jakub Kicinski <jakub.kicinski@netronome.com>
    Reviewed-by: Stanislav Fomichev <sdf@google.com>
    Signed-off-by: Alexei Starovoitov <ast@kernel.org>

diff --git a/tools/bpf/bpftool/main.h b/tools/bpf/bpftool/main.h
index 052c91d4dc55..5cfc6601de9b 100644
--- a/tools/bpf/bpftool/main.h
+++ b/tools/bpf/bpftool/main.h
@@ -145,6 +145,7 @@ int do_cgroup(int argc, char **arg);
 int do_perf(int argc, char **arg);
 int do_net(int argc, char **arg);
 int do_tracelog(int argc, char **arg);
+int do_feature(int argc, char **argv);
 
 int parse_u32_arg(int *argc, char ***argv, __u32 *val, const char *what);
 int prog_parse_fd(int *argc, char ***argv);

commit 33221307c3f993500a9cfc6900811058c6bfc152
Author: Quentin Monnet <quentin.monnet@netronome.com>
Date:   Tue Dec 18 10:13:19 2018 +0000

    tools: bpftool: add an option to prevent auto-mount of bpffs, tracefs
    
    In order to make life easier for users, bpftool automatically attempts
    to mount the BPF virtual file system, if it is not mounted already,
    before trying to pin objects in it. Similarly, it attempts to mount
    tracefs if necessary before trying to dump the trace pipe to the
    console.
    
    While mounting file systems on-the-fly can improve user experience, some
    administrators might prefer to avoid that. Let's add an option to block
    these mount attempts. Note that it does not prevent automatic mounting
    of tracefs by debugfs for the "bpftool prog tracelog" command.
    
    Signed-off-by: Quentin Monnet <quentin.monnet@netronome.com>
    Reviewed-by: Jakub Kicinski <jakub.kicinski@netronome.com>
    Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>

diff --git a/tools/bpf/bpftool/main.h b/tools/bpf/bpftool/main.h
index 9e4499c926fa..052c91d4dc55 100644
--- a/tools/bpf/bpftool/main.h
+++ b/tools/bpf/bpftool/main.h
@@ -44,7 +44,8 @@
 #define HELP_SPEC_PROGRAM						\
 	"PROG := { id PROG_ID | pinned FILE | tag PROG_TAG }"
 #define HELP_SPEC_OPTIONS						\
-	"OPTIONS := { {-j|--json} [{-p|--pretty}] | {-f|--bpffs} | {-m|--mapcompat}"
+	"OPTIONS := { {-j|--json} [{-p|--pretty}] | {-f|--bpffs} |\n"	\
+	"\t            {-m|--mapcompat} | {-n|--nomount} }"
 #define HELP_SPEC_MAP							\
 	"MAP := { id MAP_ID | pinned FILE }"
 
@@ -85,6 +86,7 @@ extern const char *bin_name;
 extern json_writer_t *json_wtr;
 extern bool json_output;
 extern bool show_pinned;
+extern bool block_mount;
 extern int bpf_flags;
 extern struct pinned_obj_table prog_table;
 extern struct pinned_obj_table map_table;

commit be3245e22d227ad68ab97785d506561374daa028
Author: Quentin Monnet <quentin.monnet@netronome.com>
Date:   Tue Dec 18 10:13:18 2018 +0000

    tools: bpftool: attempt to mount tracefs if required for tracelog cmd
    
    As a follow-up to commit 30da46b5dc3a ("tools: bpftool: add a command to
    dump the trace pipe"), attempt to mount the tracefs virtual file system
    if it is not detected on the system before trying to dump content of the
    tracing pipe on an invocation of "bpftool prog tracelog".
    
    Usually, tracefs in automatically mounted by debugfs when the user tries
    to access it (e.g. "ls /sys/kernel/debug/tracing" mounts the tracefs).
    So if we failed to find it, it is probably that debugfs is not here
    either. Therefore, we just attempt a single mount, at a location that
    does not involve debugfs: /sys/kernel/tracing.
    
    Suggested-by: Daniel Borkmann <daniel@iogearbox.net>
    Signed-off-by: Quentin Monnet <quentin.monnet@netronome.com>
    Reviewed-by: Jakub Kicinski <jakub.kicinski@netronome.com>
    Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>

diff --git a/tools/bpf/bpftool/main.h b/tools/bpf/bpftool/main.h
index 9487345b04a7..9e4499c926fa 100644
--- a/tools/bpf/bpftool/main.h
+++ b/tools/bpf/bpftool/main.h
@@ -98,6 +98,8 @@ void usage(void) __noreturn;
 
 void set_max_rlimit(void);
 
+int mount_tracefs(const char *target);
+
 struct pinned_obj_table {
 	DECLARE_HASHTABLE(table, 16);
 };

commit 8c03ecf712f5bbbb9d353ed69715aef3cc2b4029
Author: Quentin Monnet <quentin.monnet@netronome.com>
Date:   Fri Dec 14 13:56:00 2018 +0000

    tools: bpftool: fix warning on struct bpf_prog_linfo definition
    
    The following warning appears when compiling bpftool without BFD
    support:
    
    main.h:198:23: warning: 'struct bpf_prog_linfo' declared inside
        parameter list will not be visible outside of this definition or
        declaration
              const struct bpf_prog_linfo *prog_linfo,
    
    Fix it by declaring struct bpf_prog_linfo even in the case BFD is not
    supported.
    
    Fixes: b053b439b72a ("bpf: libbpf: bpftool: Print bpf_line_info during prog dump")
    Signed-off-by: Quentin Monnet <quentin.monnet@netronome.com>
    Reviewed-by: Jakub Kicinski <jakub.kicinski@netronome.com>
    Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>

diff --git a/tools/bpf/bpftool/main.h b/tools/bpf/bpftool/main.h
index d2beb88f0e2e..9487345b04a7 100644
--- a/tools/bpf/bpftool/main.h
+++ b/tools/bpf/bpftool/main.h
@@ -147,8 +147,8 @@ int prog_parse_fd(int *argc, char ***argv);
 int map_parse_fd(int *argc, char ***argv);
 int map_parse_fd_and_info(int *argc, char ***argv, void *info, __u32 *info_len);
 
-#ifdef HAVE_LIBBFD_SUPPORT
 struct bpf_prog_linfo;
+#ifdef HAVE_LIBBFD_SUPPORT
 void disasm_print_insn(unsigned char *image, ssize_t len, int opcodes,
 		       const char *arch, const char *disassembler_options,
 		       const struct btf *btf,

commit 02ff58dcf70ad7d11b01523dc404166ed11021da
Author: Jakub Kicinski <jakub.kicinski@netronome.com>
Date:   Wed Dec 12 19:59:25 2018 -0800

    tools: bpftool: replace Netronome boilerplate with SPDX license headers
    
    Replace the repeated license text with SDPX identifiers.
    
    Signed-off-by: Jakub Kicinski <jakub.kicinski@netronome.com>
    Acked-by: Roman Gushchin <guro@fb.com>
    Acked-by: YueHaibing <yuehaibing@huawei.com>
    Acked-by: Yonghong Song <yhs@fb.com>
    Acked-by: Stanislav Fomichev <sdf@google.com>
    Acked-by: Sean Young <sean@mess.org>
    Acked-by: Jiri Benc <jbenc@redhat.com>
    Acked-by: David Calavera <david.calavera@gmail.com>
    Acked-by: Andrey Ignatov <rdna@fb.com>
    Acked-by: Joe Stringer <joe@wand.net.nz>
    Acked-by: David Ahern <dsahern@gmail.com>
    Acked-by: Alexei Starovoitov <alexei.starovoitov@gmail.com>
    Acked-by: Petar Penkov <ppenkov@stanford.edu>
    Acked-by: Sandipan Das <sandipan@linux.ibm.com>
    Acked-by: Prashant Bhole <bhole_prashant_q7@lab.ntt.co.jp>
    Acked-by: Stephen Hemminger <stephen@networkplumber.org>
    Acked-by: John Fastabend <john.fastabend@gmail.com>
    Acked-by: Taeung Song <treeze.taeung@gmail.com>
    Acked-by: Jiri Olsa <jolsa@kernel.org>
    Acked-by: Daniel Borkmann <daniel@iogearbox.net>
    CC: okash.khawaja@gmail.com
    Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>

diff --git a/tools/bpf/bpftool/main.h b/tools/bpf/bpftool/main.h
index 0b37599f8cda..d2beb88f0e2e 100644
--- a/tools/bpf/bpftool/main.h
+++ b/tools/bpf/bpftool/main.h
@@ -1,35 +1,5 @@
-/*
- * Copyright (C) 2017-2018 Netronome Systems, Inc.
- *
- * This software is dual licensed under the GNU General License Version 2,
- * June 1991 as shown in the file COPYING in the top-level directory of this
- * source tree or the BSD 2-Clause License provided below.  You have the
- * option to license this software under the complete terms of either license.
- *
- * The BSD 2-Clause License:
- *
- *     Redistribution and use in source and binary forms, with or
- *     without modification, are permitted provided that the following
- *     conditions are met:
- *
- *      1. Redistributions of source code must retain the above
- *         copyright notice, this list of conditions and the following
- *         disclaimer.
- *
- *      2. Redistributions in binary form must reproduce the above
- *         copyright notice, this list of conditions and the following
- *         disclaimer in the documentation and/or other materials
- *         provided with the distribution.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
- * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
- * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
- * SOFTWARE.
- */
+/* SPDX-License-Identifier: (GPL-2.0-only OR BSD-2-Clause) */
+/* Copyright (C) 2017-2018 Netronome Systems, Inc. */
 
 #ifndef __BPF_TOOL_H
 #define __BPF_TOOL_H

commit 10a5ce98539948affbdc28dc0f39a1b6b2307f9d
Author: Martin KaFai Lau <kafai@fb.com>
Date:   Mon Dec 10 10:53:24 2018 -0800

    bpf: bpftool: Fix newline and p_err issue
    
    This patch fixes a few newline issues and also
    replaces p_err with p_info in prog.c
    
    Fixes: b053b439b72a ("bpf: libbpf: bpftool: Print bpf_line_info during prog dump")
    Cc: Jakub Kicinski <jakub.kicinski@netronome.com>
    Signed-off-by: Martin KaFai Lau <kafai@fb.com>
    Acked-by: Jakub Kicinski <jakub.kicinski@netronome.com>
    Signed-off-by: Alexei Starovoitov <ast@kernel.org>

diff --git a/tools/bpf/bpftool/main.h b/tools/bpf/bpftool/main.h
index d9393abdba78..0b37599f8cda 100644
--- a/tools/bpf/bpftool/main.h
+++ b/tools/bpf/bpftool/main.h
@@ -194,7 +194,6 @@ void disasm_print_insn(unsigned char *image, ssize_t len, int opcodes,
 		       const struct bpf_prog_linfo *prog_linfo,
 		       __u64 func_ksym, unsigned int func_idx,
 		       bool linum)
-
 {
 }
 static inline int disasm_init(void)

commit b053b439b72ad152257ecc3f71cfb4c619b0137e
Author: Martin KaFai Lau <kafai@fb.com>
Date:   Fri Dec 7 16:42:32 2018 -0800

    bpf: libbpf: bpftool: Print bpf_line_info during prog dump
    
    This patch adds print bpf_line_info function in 'prog dump jitted'
    and 'prog dump xlated':
    
    [root@arch-fb-vm1 bpf]# ~/devshare/fb-kernel/linux/tools/bpf/bpftool/bpftool prog dump jited pinned /sys/fs/bpf/test_btf_haskv
    [...]
    int test_long_fname_2(struct dummy_tracepoint_args * arg):
    bpf_prog_44a040bf25481309_test_long_fname_2:
    ; static int test_long_fname_2(struct dummy_tracepoint_args *arg)
       0:   push   %rbp
       1:   mov    %rsp,%rbp
       4:   sub    $0x30,%rsp
       b:   sub    $0x28,%rbp
       f:   mov    %rbx,0x0(%rbp)
      13:   mov    %r13,0x8(%rbp)
      17:   mov    %r14,0x10(%rbp)
      1b:   mov    %r15,0x18(%rbp)
      1f:   xor    %eax,%eax
      21:   mov    %rax,0x20(%rbp)
      25:   xor    %esi,%esi
    ; int key = 0;
      27:   mov    %esi,-0x4(%rbp)
    ; if (!arg->sock)
      2a:   mov    0x8(%rdi),%rdi
    ; if (!arg->sock)
      2e:   cmp    $0x0,%rdi
      32:   je     0x0000000000000070
      34:   mov    %rbp,%rsi
    ; counts = bpf_map_lookup_elem(&btf_map, &key);
      37:   add    $0xfffffffffffffffc,%rsi
      3b:   movabs $0xffff8881139d7480,%rdi
      45:   add    $0x110,%rdi
      4c:   mov    0x0(%rsi),%eax
      4f:   cmp    $0x4,%rax
      53:   jae    0x000000000000005e
      55:   shl    $0x3,%rax
      59:   add    %rdi,%rax
      5c:   jmp    0x0000000000000060
      5e:   xor    %eax,%eax
    ; if (!counts)
      60:   cmp    $0x0,%rax
      64:   je     0x0000000000000070
    ; counts->v6++;
      66:   mov    0x4(%rax),%edi
      69:   add    $0x1,%rdi
      6d:   mov    %edi,0x4(%rax)
      70:   mov    0x0(%rbp),%rbx
      74:   mov    0x8(%rbp),%r13
      78:   mov    0x10(%rbp),%r14
      7c:   mov    0x18(%rbp),%r15
      80:   add    $0x28,%rbp
      84:   leaveq
      85:   retq
    [...]
    
    With linum:
    [root@arch-fb-vm1 bpf]# ~/devshare/fb-kernel/linux/tools/bpf/bpftool/bpftool prog dump jited pinned /sys/fs/bpf/test_btf_haskv linum
    int _dummy_tracepoint(struct dummy_tracepoint_args * arg):
    bpf_prog_b07ccb89267cf242__dummy_tracepoint:
    ; return test_long_fname_1(arg); [file:/data/users/kafai/fb-kernel/linux/tools/testing/selftests/bpf/test_btf_haskv.c line_num:54 line_col:9]
       0:   push   %rbp
       1:   mov    %rsp,%rbp
       4:   sub    $0x28,%rsp
       b:   sub    $0x28,%rbp
       f:   mov    %rbx,0x0(%rbp)
      13:   mov    %r13,0x8(%rbp)
      17:   mov    %r14,0x10(%rbp)
      1b:   mov    %r15,0x18(%rbp)
      1f:   xor    %eax,%eax
      21:   mov    %rax,0x20(%rbp)
      25:   callq  0x000000000000851e
    ; return test_long_fname_1(arg); [file:/data/users/kafai/fb-kernel/linux/tools/testing/selftests/bpf/test_btf_haskv.c line_num:54 line_col:2]
      2a:   xor    %eax,%eax
      2c:   mov    0x0(%rbp),%rbx
      30:   mov    0x8(%rbp),%r13
      34:   mov    0x10(%rbp),%r14
      38:   mov    0x18(%rbp),%r15
      3c:   add    $0x28,%rbp
      40:   leaveq
      41:   retq
    [...]
    
    Signed-off-by: Martin KaFai Lau <kafai@fb.com>
    Acked-by: Yonghong Song <yhs@fb.com>
    Signed-off-by: Alexei Starovoitov <ast@kernel.org>

diff --git a/tools/bpf/bpftool/main.h b/tools/bpf/bpftool/main.h
index 0be0dd8f467f..d9393abdba78 100644
--- a/tools/bpf/bpftool/main.h
+++ b/tools/bpf/bpftool/main.h
@@ -138,6 +138,9 @@ struct pinned_obj {
 	struct hlist_node hash;
 };
 
+struct btf;
+struct bpf_line_info;
+
 int build_pinned_obj_table(struct pinned_obj_table *table,
 			   enum bpf_obj_type type);
 void delete_pinned_obj_table(struct pinned_obj_table *tab);
@@ -175,13 +178,23 @@ int map_parse_fd(int *argc, char ***argv);
 int map_parse_fd_and_info(int *argc, char ***argv, void *info, __u32 *info_len);
 
 #ifdef HAVE_LIBBFD_SUPPORT
+struct bpf_prog_linfo;
 void disasm_print_insn(unsigned char *image, ssize_t len, int opcodes,
-		       const char *arch, const char *disassembler_options);
+		       const char *arch, const char *disassembler_options,
+		       const struct btf *btf,
+		       const struct bpf_prog_linfo *prog_linfo,
+		       __u64 func_ksym, unsigned int func_idx,
+		       bool linum);
 int disasm_init(void);
 #else
 static inline
 void disasm_print_insn(unsigned char *image, ssize_t len, int opcodes,
-		       const char *arch, const char *disassembler_options)
+		       const char *arch, const char *disassembler_options,
+		       const struct btf *btf,
+		       const struct bpf_prog_linfo *prog_linfo,
+		       __u64 func_ksym, unsigned int func_idx,
+		       bool linum)
+
 {
 }
 static inline int disasm_init(void)
@@ -217,6 +230,12 @@ int btf_dumper_type(const struct btf_dumper *d, __u32 type_id,
 void btf_dumper_type_only(const struct btf *btf, __u32 func_type_id,
 			  char *func_only, int size);
 
+void btf_dump_linfo_plain(const struct btf *btf,
+			  const struct bpf_line_info *linfo,
+			  const char *prefix, bool linum);
+void btf_dump_linfo_json(const struct btf *btf,
+			 const struct bpf_line_info *linfo, bool linum);
+
 struct nlattr;
 struct ifinfomsg;
 struct tcmsg;

commit 30da46b5dc3a9a14db11706d841440e28b12bb53
Author: Quentin Monnet <quentin.monnet@netronome.com>
Date:   Wed Dec 5 10:28:24 2018 +0000

    tools: bpftool: add a command to dump the trace pipe
    
    BPF programs can use the bpf_trace_printk() helper to print debug
    information into the trace pipe. Add a subcommand
    "bpftool prog tracelog" to simply dump this pipe to the console.
    
    This is for a good part copied from iproute2, where the feature is
    available with "tc exec bpf dbg". Changes include dumping pipe content
    to stdout instead of stderr and adding JSON support (content is dumped
    as an array of strings, one per line read from the pipe). This version
    is dual-licensed, with Daniel's permission.
    
    Cc: Daniel Borkmann <daniel@iogearbox.net>
    Suggested-by: Daniel Borkmann <daniel@iogearbox.net>
    Signed-off-by: Quentin Monnet <quentin.monnet@netronome.com>
    Reviewed-by: Jakub Kicinski <jakub.kicinski@netronome.com>
    Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>

diff --git a/tools/bpf/bpftool/main.h b/tools/bpf/bpftool/main.h
index 2761981669c8..0be0dd8f467f 100644
--- a/tools/bpf/bpftool/main.h
+++ b/tools/bpf/bpftool/main.h
@@ -167,6 +167,7 @@ int do_event_pipe(int argc, char **argv);
 int do_cgroup(int argc, char **arg);
 int do_perf(int argc, char **arg);
 int do_net(int argc, char **arg);
+int do_tracelog(int argc, char **arg);
 
 int parse_u32_arg(int *argc, char ***argv, __u32 *val, const char *what);
 int prog_parse_fd(int *argc, char ***argv);

commit 99a44bef587082fbbaddf6aaa1e823ebbb629339
Author: Quentin Monnet <quentin.monnet@netronome.com>
Date:   Fri Nov 30 16:25:48 2018 +0000

    tools: bpftool: add owner_prog_type and owner_jited to bpftool output
    
    For prog array maps, the type of the owner program, and the JIT-ed state
    of that program, are available from the file descriptor information
    under /proc. Add them to "bpftool map show" output. Example output:
    
        # bpftool map show
        158225: prog_array  name jmp_table  flags 0x0
            key 4B  value 4B  max_entries 8  memlock 4096B
            owner_prog_type flow_dissector  owner jited
        # bpftool --json --pretty map show
        [{
                "id": 1337,
                "type": "prog_array",
                "name": "jmp_table",
                "flags": 0,
                "bytes_key": 4,
                "bytes_value": 4,
                "max_entries": 8,
                "bytes_memlock": 4096,
                "owner_prog_type": "flow_dissector",
                "owner_jited": true
            }
        ]
    
    As we move the table used for associating names to program types,
    complete it with the missing types (lwt_seg6local and sk_reuseport).
    Also add missing types to the help message for "bpftool prog"
    (sk_reuseport and flow_dissector).
    
    Suggested-by: Daniel Borkmann <daniel@iogearbox.net>
    Signed-off-by: Quentin Monnet <quentin.monnet@netronome.com>
    Acked-by: Jakub Kicinski <jakub.kicinski@netronome.com>
    Signed-off-by: Alexei Starovoitov <ast@kernel.org>

diff --git a/tools/bpf/bpftool/main.h b/tools/bpf/bpftool/main.h
index 7431669fae0a..2761981669c8 100644
--- a/tools/bpf/bpftool/main.h
+++ b/tools/bpf/bpftool/main.h
@@ -78,6 +78,32 @@
 #define HELP_SPEC_MAP							\
 	"MAP := { id MAP_ID | pinned FILE }"
 
+static const char * const prog_type_name[] = {
+	[BPF_PROG_TYPE_UNSPEC]			= "unspec",
+	[BPF_PROG_TYPE_SOCKET_FILTER]		= "socket_filter",
+	[BPF_PROG_TYPE_KPROBE]			= "kprobe",
+	[BPF_PROG_TYPE_SCHED_CLS]		= "sched_cls",
+	[BPF_PROG_TYPE_SCHED_ACT]		= "sched_act",
+	[BPF_PROG_TYPE_TRACEPOINT]		= "tracepoint",
+	[BPF_PROG_TYPE_XDP]			= "xdp",
+	[BPF_PROG_TYPE_PERF_EVENT]		= "perf_event",
+	[BPF_PROG_TYPE_CGROUP_SKB]		= "cgroup_skb",
+	[BPF_PROG_TYPE_CGROUP_SOCK]		= "cgroup_sock",
+	[BPF_PROG_TYPE_LWT_IN]			= "lwt_in",
+	[BPF_PROG_TYPE_LWT_OUT]			= "lwt_out",
+	[BPF_PROG_TYPE_LWT_XMIT]		= "lwt_xmit",
+	[BPF_PROG_TYPE_SOCK_OPS]		= "sock_ops",
+	[BPF_PROG_TYPE_SK_SKB]			= "sk_skb",
+	[BPF_PROG_TYPE_CGROUP_DEVICE]		= "cgroup_device",
+	[BPF_PROG_TYPE_SK_MSG]			= "sk_msg",
+	[BPF_PROG_TYPE_RAW_TRACEPOINT]		= "raw_tracepoint",
+	[BPF_PROG_TYPE_CGROUP_SOCK_ADDR]	= "cgroup_sock_addr",
+	[BPF_PROG_TYPE_LWT_SEG6LOCAL]		= "lwt_seg6local",
+	[BPF_PROG_TYPE_LIRC_MODE2]		= "lirc_mode2",
+	[BPF_PROG_TYPE_SK_REUSEPORT]		= "sk_reuseport",
+	[BPF_PROG_TYPE_FLOW_DISSECTOR]		= "flow_dissector",
+};
+
 enum bpf_obj_type {
 	BPF_OBJ_UNKNOWN,
 	BPF_OBJ_PROG,

commit e561bb29b650d2817d10a4858f1817836ed08399
Merge: 62e3a9317882 60b548237fed
Author: David S. Miller <davem@davemloft.net>
Date:   Wed Nov 28 22:10:54 2018 -0800

    Merge git://git.kernel.org/pub/scm/linux/kernel/git/davem/net
    
    Trivial conflict in net/core/filter.c, a locally computed
    'sdif' is now an argument to the function.
    
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 254471e57a86b8dc1a2cc19848e99f5d7c0558f4
Author: Yonghong Song <yhs@fb.com>
Date:   Mon Nov 19 15:29:21 2018 -0800

    tools/bpf: bpftool: add support for func types
    
    This patch added support to print function signature
    if btf func_info is available. Note that ksym
    now uses function name instead of prog_name as
    prog_name has a limit of 16 bytes including
    ending '\0'.
    
    The following is a sample output for selftests
    test_btf with file test_btf_haskv.o for translated insns
    and jited insns respectively.
    
      $ bpftool prog dump xlated id 1
      int _dummy_tracepoint(struct dummy_tracepoint_args * arg):
         0: (85) call pc+2#bpf_prog_2dcecc18072623fc_test_long_fname_1
         1: (b7) r0 = 0
         2: (95) exit
      int test_long_fname_1(struct dummy_tracepoint_args * arg):
         3: (85) call pc+1#bpf_prog_89d64e4abf0f0126_test_long_fname_2
         4: (95) exit
      int test_long_fname_2(struct dummy_tracepoint_args * arg):
         5: (b7) r2 = 0
         6: (63) *(u32 *)(r10 -4) = r2
         7: (79) r1 = *(u64 *)(r1 +8)
         ...
         22: (07) r1 += 1
         23: (63) *(u32 *)(r0 +4) = r1
         24: (95) exit
    
      $ bpftool prog dump jited id 1
      int _dummy_tracepoint(struct dummy_tracepoint_args * arg):
      bpf_prog_b07ccb89267cf242__dummy_tracepoint:
         0:   push   %rbp
         1:   mov    %rsp,%rbp
        ......
        3c:   add    $0x28,%rbp
        40:   leaveq
        41:   retq
    
      int test_long_fname_1(struct dummy_tracepoint_args * arg):
      bpf_prog_2dcecc18072623fc_test_long_fname_1:
         0:   push   %rbp
         1:   mov    %rsp,%rbp
        ......
        3a:   add    $0x28,%rbp
        3e:   leaveq
        3f:   retq
    
      int test_long_fname_2(struct dummy_tracepoint_args * arg):
      bpf_prog_89d64e4abf0f0126_test_long_fname_2:
         0:   push   %rbp
         1:   mov    %rsp,%rbp
        ......
        80:   add    $0x28,%rbp
        84:   leaveq
        85:   retq
    
    Signed-off-by: Yonghong Song <yhs@fb.com>
    Signed-off-by: Martin KaFai Lau <kafai@fb.com>
    Signed-off-by: Alexei Starovoitov <ast@kernel.org>

diff --git a/tools/bpf/bpftool/main.h b/tools/bpf/bpftool/main.h
index 10c6c16fae29..3e8979567cf1 100644
--- a/tools/bpf/bpftool/main.h
+++ b/tools/bpf/bpftool/main.h
@@ -187,6 +187,8 @@ struct btf_dumper {
  */
 int btf_dumper_type(const struct btf_dumper *d, __u32 type_id,
 		    const void *data);
+void btf_dumper_type_only(const struct btf *btf, __u32 func_type_id,
+			  char *func_only, int size);
 
 struct nlattr;
 struct ifinfomsg;

commit 29a9c10e4110e368443f0b606d71557edee7f2cc
Author: Stanislav Fomichev <sdf@google.com>
Date:   Mon Nov 12 13:44:10 2018 -0800

    bpftool: make libbfd optional
    
    Make it possible to build bpftool without libbfd. libbfd and libopcodes are
    typically provided in dev/dbg packages (binutils-dev in debian) which we
    usually don't have installed on the fleet machines and we'd like a way to have
    bpftool version that works without installing any additional packages.
    This excludes support for disassembling jit-ted code and prints an error if
    the user tries to use these features.
    
    Tested by:
    cat > FEATURES_DUMP.bpftool <<EOF
    feature-libbfd=0
    feature-disassembler-four-args=1
    feature-reallocarray=0
    feature-libelf=1
    feature-libelf-mmap=1
    feature-bpf=1
    EOF
    FEATURES_DUMP=$PWD/FEATURES_DUMP.bpftool make
    ldd bpftool | grep libbfd
    
    Signed-off-by: Stanislav Fomichev <sdf@google.com>
    Acked-by: Jakub Kicinski <jakub.kicinski@netronome.com>
    Signed-off-by: Alexei Starovoitov <ast@kernel.org>

diff --git a/tools/bpf/bpftool/main.h b/tools/bpf/bpftool/main.h
index 61d82020af58..10c6c16fae29 100644
--- a/tools/bpf/bpftool/main.h
+++ b/tools/bpf/bpftool/main.h
@@ -147,8 +147,22 @@ int prog_parse_fd(int *argc, char ***argv);
 int map_parse_fd(int *argc, char ***argv);
 int map_parse_fd_and_info(int *argc, char ***argv, void *info, __u32 *info_len);
 
+#ifdef HAVE_LIBBFD_SUPPORT
 void disasm_print_insn(unsigned char *image, ssize_t len, int opcodes,
 		       const char *arch, const char *disassembler_options);
+int disasm_init(void);
+#else
+static inline
+void disasm_print_insn(unsigned char *image, ssize_t len, int opcodes,
+		       const char *arch, const char *disassembler_options)
+{
+}
+static inline int disasm_init(void)
+{
+	p_err("No libbfd support");
+	return -1;
+}
+#endif
 void print_data_json(uint8_t *data, size_t len);
 void print_hex_data_json(uint8_t *data, size_t len);
 

commit 77380998d91dee8aafdbe42634776ba1ef692f1e
Author: Stanislav Fomichev <sdf@google.com>
Date:   Fri Nov 9 08:21:44 2018 -0800

    bpftool: add loadall command
    
    This patch adds new *loadall* command which slightly differs from the
    existing *load*. *load* command loads all programs from the obj file,
    but pins only the first programs. *loadall* pins all programs from the
    obj file under specified directory.
    
    The intended usecase is flow_dissector, where we want to load a bunch
    of progs, pin them all and after that construct a jump table.
    
    Signed-off-by: Stanislav Fomichev <sdf@google.com>
    Acked-by: Jakub Kicinski <jakub.kicinski@netronome.com>
    Signed-off-by: Alexei Starovoitov <ast@kernel.org>

diff --git a/tools/bpf/bpftool/main.h b/tools/bpf/bpftool/main.h
index 14857c273bf6..61d82020af58 100644
--- a/tools/bpf/bpftool/main.h
+++ b/tools/bpf/bpftool/main.h
@@ -131,6 +131,7 @@ const char *get_fd_type_name(enum bpf_obj_type type);
 char *get_fdinfo(int fd, const char *key);
 int open_obj_pinned(char *path);
 int open_obj_pinned_any(char *path, enum bpf_obj_type exp_type);
+int mount_bpffs_for_pin(const char *name);
 int do_pin_any(int argc, char **argv, int (*get_fd_by_id)(__u32));
 int do_pin_fd(int fd, const char *name);
 

commit f120919f9905a2cad9dea792a28a11fb623f72c1
Author: Quentin Monnet <quentin.monnet@netronome.com>
Date:   Thu Nov 8 11:52:27 2018 +0000

    tools: bpftool: pass an argument to silence open_obj_pinned()
    
    Function open_obj_pinned() prints error messages when it fails to open a
    link in the BPF virtual file system. However, in some occasions it is
    not desirable to print an error, for example when we parse all links
    under the bpffs root, and the error is due to some paths actually being
    symbolic links.
    
    Example output:
    
        # ls -l /sys/fs/bpf/
        lrwxrwxrwx 1 root root 0 Oct 18 19:00 ip -> /sys/fs/bpf/tc/
        drwx------ 3 root root 0 Oct 18 19:00 tc
        lrwxrwxrwx 1 root root 0 Oct 18 19:00 xdp -> /sys/fs/bpf/tc/
    
        # bpftool --bpffs prog show
        Error: bpf obj get (/sys/fs/bpf): Permission denied
        Error: bpf obj get (/sys/fs/bpf): Permission denied
    
        # strace -e bpf bpftool --bpffs prog show
        bpf(BPF_OBJ_GET, {pathname="/sys/fs/bpf/ip", bpf_fd=0}, 72) = -1 EACCES (Permission denied)
        Error: bpf obj get (/sys/fs/bpf): Permission denied
        bpf(BPF_OBJ_GET, {pathname="/sys/fs/bpf/xdp", bpf_fd=0}, 72) = -1 EACCES (Permission denied)
        Error: bpf obj get (/sys/fs/bpf): Permission denied
        ...
    
    To fix it, pass a bool as a second argument to the function, and prevent
    it from printing an error when the argument is set to true.
    
    Signed-off-by: Quentin Monnet <quentin.monnet@netronome.com>
    Reviewed-by: Jakub Kicinski <jakub.kicinski@netronome.com>
    Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>

diff --git a/tools/bpf/bpftool/main.h b/tools/bpf/bpftool/main.h
index 28322ace2856..a8bf1e2d9818 100644
--- a/tools/bpf/bpftool/main.h
+++ b/tools/bpf/bpftool/main.h
@@ -127,7 +127,7 @@ int cmd_select(const struct cmd *cmds, int argc, char **argv,
 int get_fd_type(int fd);
 const char *get_fd_type_name(enum bpf_obj_type type);
 char *get_fdinfo(int fd, const char *key);
-int open_obj_pinned(char *path);
+int open_obj_pinned(char *path, bool quiet);
 int open_obj_pinned_any(char *path, enum bpf_obj_type exp_type);
 int do_pin_any(int argc, char **argv, int (*get_fd_by_id)(__u32));
 int do_pin_fd(int fd, const char *name);

commit 8302b9bd31d29f29dd24dd6b1e1e5682c302c11c
Author: Quentin Monnet <quentin.monnet@netronome.com>
Date:   Wed Nov 7 12:29:30 2018 +0000

    tools: bpftool: adjust rlimit RLIMIT_MEMLOCK when loading programs, maps
    
    The limit for memory locked in the kernel by a process is usually set to
    64 kbytes by default. This can be an issue when creating large BPF maps
    and/or loading many programs. A workaround is to raise this limit for
    the current process before trying to create a new BPF map. Changing the
    hard limit requires the CAP_SYS_RESOURCE and can usually only be done by
    root user (for non-root users, a call to setrlimit fails (and sets
    errno) and the program simply goes on with its rlimit unchanged).
    
    There is no API to get the current amount of memory locked for a user,
    therefore we cannot raise the limit only when required. One solution,
    used by bcc, is to try to create the map, and on getting a EPERM error,
    raising the limit to infinity before giving another try. Another
    approach, used in iproute2, is to raise the limit in all cases, before
    trying to create the map.
    
    Here we do the same as in iproute2: the rlimit is raised to infinity
    before trying to load programs or to create maps with bpftool.
    
    Signed-off-by: Quentin Monnet <quentin.monnet@netronome.com>
    Reviewed-by: Jakub Kicinski <jakub.kicinski@netronome.com>
    Acked-by: Martin KaFai Lau <kafai@fb.com>
    Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>

diff --git a/tools/bpf/bpftool/main.h b/tools/bpf/bpftool/main.h
index 28322ace2856..14857c273bf6 100644
--- a/tools/bpf/bpftool/main.h
+++ b/tools/bpf/bpftool/main.h
@@ -100,6 +100,8 @@ bool is_prefix(const char *pfx, const char *str);
 void fprint_hex(FILE *f, void *arg, unsigned int n, const char *sep);
 void usage(void) __noreturn;
 
+void set_max_rlimit(void);
+
 struct pinned_obj_table {
 	DECLARE_HASHTABLE(table, 16);
 };

commit 3ddeac6705aba31b7528c7d7a528eabb74475622
Author: Jakub Kicinski <jakub.kicinski@netronome.com>
Date:   Thu Oct 18 11:34:55 2018 -0700

    tools: bpftool: use 4 context mode for the NFP disasm
    
    The nfp driver is currently always JITing the BPF for 4 context/thread
    mode of the NFP flow processors.  Tell this to the disassembler,
    otherwise some registers may be incorrectly decoded.
    
    Signed-off-by: Jakub Kicinski <jakub.kicinski@netronome.com>
    Reviewed-by: Jiong Wang <jiong.wang@netronome.com>
    Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>

diff --git a/tools/bpf/bpftool/main.h b/tools/bpf/bpftool/main.h
index 28ee769bd11b..28322ace2856 100644
--- a/tools/bpf/bpftool/main.h
+++ b/tools/bpf/bpftool/main.h
@@ -145,13 +145,15 @@ int map_parse_fd(int *argc, char ***argv);
 int map_parse_fd_and_info(int *argc, char ***argv, void *info, __u32 *info_len);
 
 void disasm_print_insn(unsigned char *image, ssize_t len, int opcodes,
-		       const char *arch);
+		       const char *arch, const char *disassembler_options);
 void print_data_json(uint8_t *data, size_t len);
 void print_hex_data_json(uint8_t *data, size_t len);
 
 unsigned int get_page_size(void);
 unsigned int get_possible_cpus(void);
-const char *ifindex_to_bfd_name_ns(__u32 ifindex, __u64 ns_dev, __u64 ns_ino);
+const char *
+ifindex_to_bfd_params(__u32 ifindex, __u64 ns_dev, __u64 ns_ino,
+		      const char **opt);
 
 struct btf_dumper {
 	const struct btf *btf;

commit 0b592b5a01bef5416472ec610d3191e019c144a5
Author: Jakub Kicinski <jakub.kicinski@netronome.com>
Date:   Mon Oct 15 16:30:36 2018 -0700

    tools: bpftool: add map create command
    
    Add a way of creating maps from user space.  The command takes
    as parameters most of the attributes of the map creation system
    call command.  After map is created its pinned to bpffs.  This makes
    it possible to easily and dynamically (without rebuilding programs)
    test various corner cases related to map creation.
    
    Map type names are taken from bpftool's array used for printing.
    In general these days we try to make use of libbpf type names, but
    there are no map type names in libbpf as of today.
    
    As with most features I add the motivation is testing (offloads) :)
    
    Signed-off-by: Jakub Kicinski <jakub.kicinski@netronome.com>
    Reviewed-by: Quentin Monnet <quentin.monnet@netronome.com>
    Signed-off-by: Alexei Starovoitov <ast@kernel.org>

diff --git a/tools/bpf/bpftool/main.h b/tools/bpf/bpftool/main.h
index 91fd697303cb..28ee769bd11b 100644
--- a/tools/bpf/bpftool/main.h
+++ b/tools/bpf/bpftool/main.h
@@ -139,6 +139,7 @@ int do_cgroup(int argc, char **arg);
 int do_perf(int argc, char **arg);
 int do_net(int argc, char **arg);
 
+int parse_u32_arg(int *argc, char ***argv, __u32 *val, const char *what);
 int prog_parse_fd(int *argc, char ***argv);
 int map_parse_fd(int *argc, char ***argv);
 int map_parse_fd_and_info(int *argc, char ***argv, void *info, __u32 *info_len);

commit c034a177d3c898f370f52877e7252da8c4f8235c
Author: John Fastabend <john.fastabend@gmail.com>
Date:   Mon Oct 15 11:19:55 2018 -0700

    bpf: bpftool, add flag to allow non-compat map definitions
    
    Multiple map definition structures exist and user may have non-zero
    fields in their definition that are not recognized by bpftool and
    libbpf. The normal behavior is to then fail loading the map. Although
    this is a good default behavior users may still want to load the map
    for debugging or other reasons. This patch adds a --mapcompat flag
    that can be used to override the default behavior and allow loading
    the map even when it has additional non-zero fields.
    
    For now the only user is 'bpftool prog' we can switch over other
    subcommands as needed. The library exposes an API that consumes
    a flags field now but I kept the original API around also in case
    users of the API don't want to expose this. The flags field is an
    int in case we need more control over how the API call handles
    errors/features/etc in the future.
    
    Signed-off-by: John Fastabend <john.fastabend@gmail.com>
    Acked-by: Jakub Kicinski <jakub.kicinski@netronome.com>
    Signed-off-by: Alexei Starovoitov <ast@kernel.org>

diff --git a/tools/bpf/bpftool/main.h b/tools/bpf/bpftool/main.h
index 40492cdc4e53..91fd697303cb 100644
--- a/tools/bpf/bpftool/main.h
+++ b/tools/bpf/bpftool/main.h
@@ -74,7 +74,7 @@
 #define HELP_SPEC_PROGRAM						\
 	"PROG := { id PROG_ID | pinned FILE | tag PROG_TAG }"
 #define HELP_SPEC_OPTIONS						\
-	"OPTIONS := { {-j|--json} [{-p|--pretty}] | {-f|--bpffs} }"
+	"OPTIONS := { {-j|--json} [{-p|--pretty}] | {-f|--bpffs} | {-m|--mapcompat}"
 #define HELP_SPEC_MAP							\
 	"MAP := { id MAP_ID | pinned FILE }"
 
@@ -89,6 +89,7 @@ extern const char *bin_name;
 extern json_writer_t *json_wtr;
 extern bool json_output;
 extern bool show_pinned;
+extern int bpf_flags;
 extern struct pinned_obj_table prog_table;
 extern struct pinned_obj_table map_table;
 

commit 7900efc19214e326913dc0f0e8ded24adc0018f2
Author: Yonghong Song <yhs@fb.com>
Date:   Mon Sep 17 16:13:00 2018 -0700

    tools/bpf: bpftool: improve output format for bpftool net
    
    This is a followup patch for Commit f6f3bac08ff9
    ("tools/bpf: bpftool: add net support").
    Some improvements are made for the bpftool net output.
    Specially, plain output is more concise such that
    per attachment should nicely fit in one line.
    Compared to previous output, the prog tag is removed
    since it can be easily obtained with program id.
    Similar to xdp attachments, the device name is added
    to tc attachments.
    
    The bpf program attached through shared block
    mechanism is supported as well.
      $ ip link add dev v1 type veth peer name v2
      $ tc qdisc add dev v1 ingress_block 10 egress_block 20 clsact
      $ tc qdisc add dev v2 ingress_block 10 egress_block 20 clsact
      $ tc filter add block 10 protocol ip prio 25 bpf obj bpf_shared.o sec ingress flowid 1:1
      $ tc filter add block 20 protocol ip prio 30 bpf obj bpf_cyclic.o sec classifier flowid 1:1
      $ bpftool net
      xdp:
    
      tc:
      v2(7) clsact/ingress bpf_shared.o:[ingress] id 23
      v2(7) clsact/egress bpf_cyclic.o:[classifier] id 24
      v1(8) clsact/ingress bpf_shared.o:[ingress] id 23
      v1(8) clsact/egress bpf_cyclic.o:[classifier] id 24
    
    The documentation and "bpftool net help" are updated
    to make it clear that current implementation only
    supports xdp and tc attachments. For programs
    attached to cgroups, "bpftool cgroup" can be used
    to dump attachments. For other programs e.g.
    sk_{filter,skb,msg,reuseport} and lwt/seg6,
    iproute2 tools should be used.
    
    The new output:
      $ bpftool net
      xdp:
      eth0(2) driver id 198
    
      tc:
      eth0(2) clsact/ingress fbflow_icmp id 335 act [{icmp_action id 336}]
      eth0(2) clsact/egress fbflow_egress id 334
      $ bpftool -jp net
      [{
            "xdp": [{
                    "devname": "eth0",
                    "ifindex": 2,
                    "mode": "driver",
                    "id": 198
                }
            ],
            "tc": [{
                    "devname": "eth0",
                    "ifindex": 2,
                    "kind": "clsact/ingress",
                    "name": "fbflow_icmp",
                    "id": 335,
                    "act": [{
                            "name": "icmp_action",
                            "id": 336
                        }
                    ]
                },{
                    "devname": "eth0",
                    "ifindex": 2,
                    "kind": "clsact/egress",
                    "name": "fbflow_egress",
                    "id": 334
                }
            ]
        }
      ]
    
    Signed-off-by: Yonghong Song <yhs@fb.com>
    Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>

diff --git a/tools/bpf/bpftool/main.h b/tools/bpf/bpftool/main.h
index 02dfbcb92a23..40492cdc4e53 100644
--- a/tools/bpf/bpftool/main.h
+++ b/tools/bpf/bpftool/main.h
@@ -171,5 +171,6 @@ struct nlattr;
 struct ifinfomsg;
 struct tcmsg;
 int do_xdp_dump(struct ifinfomsg *ifinfo, struct nlattr **tb);
-int do_filter_dump(struct tcmsg *ifinfo, struct nlattr **tb, const char *kind);
+int do_filter_dump(struct tcmsg *ifinfo, struct nlattr **tb, const char *kind,
+		   const char *devname, int ifindex);
 #endif

commit f6f3bac08ff9855d803081a353a1fafaa8845739
Author: Yonghong Song <yhs@fb.com>
Date:   Wed Sep 5 16:58:06 2018 -0700

    tools/bpf: bpftool: add net support
    
    Add "bpftool net" support. Networking devices are enumerated
    to dump device index/name associated with xdp progs.
    
    For each networking device, tc classes and qdiscs are enumerated
    in order to check their bpf filters.
    In addition, root handle and clsact ingress/egress are also checked for
    bpf filters.  Not all filter information is printed out. Only ifindex,
    kind, filter name, prog_id and tag are printed out, which are good
    enough to show attachment information. If the filter action
    is a bpf action, its bpf program id, bpf name and tag will be
    printed out as well.
    
    For example,
      $ ./bpftool net
      xdp [
      ifindex 2 devname eth0 prog_id 198
      ]
      tc_filters [
      ifindex 2 kind qdisc_htb name prefix_matcher.o:[cls_prefix_matcher_htb]
                prog_id 111727 tag d08fe3b4319bc2fd act []
      ifindex 2 kind qdisc_clsact_ingress name fbflow_icmp
                prog_id 130246 tag 3f265c7f26db62c9 act []
      ifindex 2 kind qdisc_clsact_egress name prefix_matcher.o:[cls_prefix_matcher_clsact]
                prog_id 111726 tag 99a197826974c876
      ifindex 2 kind qdisc_clsact_egress name cls_fg_dscp
                prog_id 108619 tag dc4630674fd72dcc act []
      ifindex 2 kind qdisc_clsact_egress name fbflow_egress
                prog_id 130245 tag 72d2d830d6888d2c
      ]
      $ ./bpftool -jp net
      [{
            "xdp": [{
                    "ifindex": 2,
                    "devname": "eth0",
                    "prog_id": 198
                }
            ],
            "tc_filters": [{
                    "ifindex": 2,
                    "kind": "qdisc_htb",
                    "name": "prefix_matcher.o:[cls_prefix_matcher_htb]",
                    "prog_id": 111727,
                    "tag": "d08fe3b4319bc2fd",
                    "act": []
                },{
                    "ifindex": 2,
                    "kind": "qdisc_clsact_ingress",
                    "name": "fbflow_icmp",
                    "prog_id": 130246,
                    "tag": "3f265c7f26db62c9",
                    "act": []
                },{
                    "ifindex": 2,
                    "kind": "qdisc_clsact_egress",
                    "name": "prefix_matcher.o:[cls_prefix_matcher_clsact]",
                    "prog_id": 111726,
                    "tag": "99a197826974c876"
                },{
                    "ifindex": 2,
                    "kind": "qdisc_clsact_egress",
                    "name": "cls_fg_dscp",
                    "prog_id": 108619,
                    "tag": "dc4630674fd72dcc",
                    "act": []
                },{
                    "ifindex": 2,
                    "kind": "qdisc_clsact_egress",
                    "name": "fbflow_egress",
                    "prog_id": 130245,
                    "tag": "72d2d830d6888d2c"
                }
            ]
        }
      ]
    
    Signed-off-by: Yonghong Song <yhs@fb.com>
    Signed-off-by: Alexei Starovoitov <ast@kernel.org>

diff --git a/tools/bpf/bpftool/main.h b/tools/bpf/bpftool/main.h
index 238e734d75b3..02dfbcb92a23 100644
--- a/tools/bpf/bpftool/main.h
+++ b/tools/bpf/bpftool/main.h
@@ -136,6 +136,7 @@ int do_map(int argc, char **arg);
 int do_event_pipe(int argc, char **argv);
 int do_cgroup(int argc, char **arg);
 int do_perf(int argc, char **arg);
+int do_net(int argc, char **arg);
 
 int prog_parse_fd(int *argc, char ***argv);
 int map_parse_fd(int *argc, char ***argv);
@@ -165,4 +166,10 @@ struct btf_dumper {
  */
 int btf_dumper_type(const struct btf_dumper *d, __u32 type_id,
 		    const void *data);
+
+struct nlattr;
+struct ifinfomsg;
+struct tcmsg;
+int do_xdp_dump(struct ifinfomsg *ifinfo, struct nlattr **tb);
+int do_filter_dump(struct tcmsg *ifinfo, struct nlattr **tb, const char *kind);
 #endif

commit b12d6ec09730b2646e85c348e599b592348dd0e3
Author: Okash Khawaja <osk@fb.com>
Date:   Fri Jul 13 21:57:03 2018 -0700

    bpf: btf: add btf print functionality
    
    This consumes functionality exported in the previous patch. It does the
    main job of printing with BTF data. This is used in the following patch
    to provide a more readable output of a map's dump. It relies on
    json_writer to do json printing. Below is sample output where map keys
    are ints and values are of type struct A:
    
    typedef int int_type;
    enum E {
            E0,
            E1,
    };
    
    struct B {
            int x;
            int y;
    };
    
    struct A {
            int m;
            unsigned long long n;
            char o;
            int p[8];
            int q[4][8];
            enum E r;
            void *s;
            struct B t;
            const int u;
            int_type v;
            unsigned int w1: 3;
            unsigned int w2: 3;
    };
    
    $ sudo bpftool map dump id 14
    [{
            "key": 0,
            "value": {
                "m": 1,
                "n": 2,
                "o": "c",
                "p": [15,16,17,18,15,16,17,18
                ],
                "q": [[25,26,27,28,25,26,27,28
                    ],[35,36,37,38,35,36,37,38
                    ],[45,46,47,48,45,46,47,48
                    ],[55,56,57,58,55,56,57,58
                    ]
                ],
                "r": 1,
                "s": 0x7ffd80531cf8,
                "t": {
                    "x": 5,
                    "y": 10
                },
                "u": 100,
                "v": 20,
                "w1": 0x7,
                "w2": 0x3
            }
        }
    ]
    
    This patch uses json's {} and [] to imply struct/union and array. More
    explicit information can be added later. For example, a command line
    option can be introduced to print whether a key or value is struct
    or union, name of a struct etc. This will however come at the expense
    of duplicating info when, for example, printing an array of structs.
    enums are printed as ints without their names.
    
    Signed-off-by: Okash Khawaja <osk@fb.com>
    Acked-by: Martin KaFai Lau <kafai@fb.com>
    Reviewed-by: Jakub Kicinski <jakub.kicinski@netronome.com>
    Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>

diff --git a/tools/bpf/bpftool/main.h b/tools/bpf/bpftool/main.h
index 41004bb2644a..238e734d75b3 100644
--- a/tools/bpf/bpftool/main.h
+++ b/tools/bpf/bpftool/main.h
@@ -150,4 +150,19 @@ unsigned int get_page_size(void);
 unsigned int get_possible_cpus(void);
 const char *ifindex_to_bfd_name_ns(__u32 ifindex, __u64 ns_dev, __u64 ns_ino);
 
+struct btf_dumper {
+	const struct btf *btf;
+	json_writer_t *jw;
+	bool is_plain_text;
+};
+
+/* btf_dumper_type - print data along with type information
+ * @d: an instance containing context for dumping types
+ * @type_id: index in btf->types array. this points to the type to be dumped
+ * @data: pointer the actual data, i.e. the values to be printed
+ *
+ * Returns zero on success and negative error code otherwise
+ */
+int btf_dumper_type(const struct btf_dumper *d, __u32 type_id,
+		    const void *data);
 #endif

commit 3ff5a4dc5d890963e669fc99cc62ee07d1da24e8
Author: Jakub Kicinski <jakub.kicinski@netronome.com>
Date:   Tue Jul 10 14:43:07 2018 -0700

    tools: bpftool: allow reuse of maps with bpftool prog load
    
    Add map parameter to prog load which will allow reuse of existing
    maps instead of creating new ones.
    
    We need feature detection and compat code for reallocarray, since
    it's not available in many libc versions.
    
    Signed-off-by: Jakub Kicinski <jakub.kicinski@netronome.com>
    Reviewed-by: Quentin Monnet <quentin.monnet@netronome.com>
    Acked-by: Alexei Starovoitov <ast@kernel.org>
    Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>

diff --git a/tools/bpf/bpftool/main.h b/tools/bpf/bpftool/main.h
index 1e02e4031693..41004bb2644a 100644
--- a/tools/bpf/bpftool/main.h
+++ b/tools/bpf/bpftool/main.h
@@ -75,6 +75,8 @@
 	"PROG := { id PROG_ID | pinned FILE | tag PROG_TAG }"
 #define HELP_SPEC_OPTIONS						\
 	"OPTIONS := { {-j|--json} [{-p|--pretty}] | {-f|--bpffs} }"
+#define HELP_SPEC_MAP							\
+	"MAP := { id MAP_ID | pinned FILE }"
 
 enum bpf_obj_type {
 	BPF_OBJ_UNKNOWN,
@@ -136,6 +138,7 @@ int do_cgroup(int argc, char **arg);
 int do_perf(int argc, char **arg);
 
 int prog_parse_fd(int *argc, char ***argv);
+int map_parse_fd(int *argc, char ***argv);
 int map_parse_fd_and_info(int *argc, char ***argv, void *info, __u32 *info_len);
 
 void disasm_print_insn(unsigned char *image, ssize_t len, int opcodes,

commit 531b014e7a2fedaeff0b19b2934d830cd4b35dc0
Author: Jakub Kicinski <jakub.kicinski@netronome.com>
Date:   Tue Jul 10 14:43:05 2018 -0700

    tools: bpf: make use of reallocarray
    
    reallocarray() is a safer variant of realloc which checks for
    multiplication overflow in case of array allocation.  Since it's
    not available in Glibc < 2.26 import kernel's overflow.h and
    add a static inline implementation when needed.  Use feature
    detection to probe for existence of reallocarray.
    
    Signed-off-by: Jakub Kicinski <jakub.kicinski@netronome.com>
    Reviewed-by: Quentin Monnet <quentin.monnet@netronome.com>
    Reviewed-by: Jiong Wang <jiong.wang@netronome.com>
    Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>

diff --git a/tools/bpf/bpftool/main.h b/tools/bpf/bpftool/main.h
index 15b6c49ae533..1e02e4031693 100644
--- a/tools/bpf/bpftool/main.h
+++ b/tools/bpf/bpftool/main.h
@@ -42,6 +42,7 @@
 #include <linux/compiler.h>
 #include <linux/kernel.h>
 #include <linux/hashtable.h>
+#include <tools/libc_compat.h>
 
 #include "json_writer.h"
 

commit 8d1fc3de3d9f9bda0d8ec719d8686e9c5b432573
Author: Jakub Kicinski <jakub.kicinski@netronome.com>
Date:   Tue Jul 10 14:42:57 2018 -0700

    tools: bpftool: refactor argument parsing for prog load
    
    Add a new macro for printing more informative message than straight
    usage() when parameters are missing, and use it for prog do_load().
    Save the object and pin path argument to variables for clarity.
    
    Signed-off-by: Jakub Kicinski <jakub.kicinski@netronome.com>
    Reviewed-by: Quentin Monnet <quentin.monnet@netronome.com>
    Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>

diff --git a/tools/bpf/bpftool/main.h b/tools/bpf/bpftool/main.h
index d39f7ef01d23..15b6c49ae533 100644
--- a/tools/bpf/bpftool/main.h
+++ b/tools/bpf/bpftool/main.h
@@ -50,6 +50,21 @@
 #define NEXT_ARG()	({ argc--; argv++; if (argc < 0) usage(); })
 #define NEXT_ARGP()	({ (*argc)--; (*argv)++; if (*argc < 0) usage(); })
 #define BAD_ARG()	({ p_err("what is '%s'?", *argv); -1; })
+#define GET_ARG()	({ argc--; *argv++; })
+#define REQ_ARGS(cnt)							\
+	({								\
+		int _cnt = (cnt);					\
+		bool _res;						\
+									\
+		if (argc < _cnt) {					\
+			p_err("'%s' needs at least %d arguments, %d found", \
+			      argv[-1], _cnt, argc);			\
+			_res = false;					\
+		} else {						\
+			_res = true;					\
+		}							\
+		_res;							\
+	})
 
 #define ERR_MAX_LEN	1024
 

commit 71e07ddcdc03000e37acfc6e757f70c81a963d58
Author: Jakub Kicinski <jakub.kicinski@netronome.com>
Date:   Thu Jun 28 14:41:40 2018 -0700

    tools: bpftool: drop unnecessary Author comments
    
    Drop my author comments, those are from the early days of
    bpftool and make little sense in tree, where we have quite
    a few people contributing and git to attribute the work.
    
    While at it bump some copyrights.
    
    Signed-off-by: Jakub Kicinski <jakub.kicinski@netronome.com>
    Reviewed-by: Quentin Monnet <quentin.monnet@netronome.com>
    Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>

diff --git a/tools/bpf/bpftool/main.h b/tools/bpf/bpftool/main.h
index 63fdb310b9a4..d39f7ef01d23 100644
--- a/tools/bpf/bpftool/main.h
+++ b/tools/bpf/bpftool/main.h
@@ -31,8 +31,6 @@
  * SOFTWARE.
  */
 
-/* Author: Jakub Kicinski <kubakici@wp.pl> */
-
 #ifndef __BPF_TOOL_H
 #define __BPF_TOOL_H
 

commit b04df400c30235fa347313c9e2a0695549bd2c8e
Author: Yonghong Song <yhs@fb.com>
Date:   Thu May 24 11:21:58 2018 -0700

    tools/bpftool: add perf subcommand
    
    The new command "bpftool perf [show | list]" will traverse
    all processes under /proc, and if any fd is associated
    with a perf event, it will print out related perf event
    information. Documentation is also added.
    
    Below is an example to show the results using bcc commands.
    Running the following 4 bcc commands:
      kprobe:     trace.py '__x64_sys_nanosleep'
      kretprobe:  trace.py 'r::__x64_sys_nanosleep'
      tracepoint: trace.py 't:syscalls:sys_enter_nanosleep'
      uprobe:     trace.py 'p:/home/yhs/a.out:main'
    
    The bpftool command line and result:
    
      $ bpftool perf
      pid 21711  fd 5: prog_id 5  kprobe  func __x64_sys_write  offset 0
      pid 21765  fd 5: prog_id 7  kretprobe  func __x64_sys_nanosleep  offset 0
      pid 21767  fd 5: prog_id 8  tracepoint  sys_enter_nanosleep
      pid 21800  fd 5: prog_id 9  uprobe  filename /home/yhs/a.out  offset 1159
    
      $ bpftool -j perf
      [{"pid":21711,"fd":5,"prog_id":5,"fd_type":"kprobe","func":"__x64_sys_write","offset":0}, \
       {"pid":21765,"fd":5,"prog_id":7,"fd_type":"kretprobe","func":"__x64_sys_nanosleep","offset":0}, \
       {"pid":21767,"fd":5,"prog_id":8,"fd_type":"tracepoint","tracepoint":"sys_enter_nanosleep"}, \
       {"pid":21800,"fd":5,"prog_id":9,"fd_type":"uprobe","filename":"/home/yhs/a.out","offset":1159}]
    
      $ bpftool prog
      5: kprobe  name probe___x64_sys  tag e495a0c82f2c7a8d  gpl
              loaded_at 2018-05-15T04:46:37-0700  uid 0
              xlated 200B  not jited  memlock 4096B  map_ids 4
      7: kprobe  name probe___x64_sys  tag f2fdee479a503abf  gpl
              loaded_at 2018-05-15T04:48:32-0700  uid 0
              xlated 200B  not jited  memlock 4096B  map_ids 7
      8: tracepoint  name tracepoint__sys  tag 5390badef2395fcf  gpl
              loaded_at 2018-05-15T04:48:48-0700  uid 0
              xlated 200B  not jited  memlock 4096B  map_ids 8
      9: kprobe  name probe_main_1  tag 0a87bdc2e2953b6d  gpl
              loaded_at 2018-05-15T04:49:52-0700  uid 0
              xlated 200B  not jited  memlock 4096B  map_ids 9
    
      $ ps ax | grep "python ./trace.py"
      21711 pts/0    T      0:03 python ./trace.py __x64_sys_write
      21765 pts/0    S+     0:00 python ./trace.py r::__x64_sys_nanosleep
      21767 pts/2    S+     0:00 python ./trace.py t:syscalls:sys_enter_nanosleep
      21800 pts/3    S+     0:00 python ./trace.py p:/home/yhs/a.out:main
      22374 pts/1    S+     0:00 grep --color=auto python ./trace.py
    
    Reviewed-by: Jakub Kicinski <jakub.kicinski@netronome.com>
    Signed-off-by: Yonghong Song <yhs@fb.com>
    Signed-off-by: Alexei Starovoitov <ast@kernel.org>

diff --git a/tools/bpf/bpftool/main.h b/tools/bpf/bpftool/main.h
index 6173cd997e7a..63fdb310b9a4 100644
--- a/tools/bpf/bpftool/main.h
+++ b/tools/bpf/bpftool/main.h
@@ -119,6 +119,7 @@ int do_prog(int argc, char **arg);
 int do_map(int argc, char **arg);
 int do_event_pipe(int argc, char **argv);
 int do_cgroup(int argc, char **arg);
+int do_perf(int argc, char **arg);
 
 int prog_parse_fd(int *argc, char ***argv);
 int map_parse_fd_and_info(int *argc, char ***argv, void *info, __u32 *info_len);

commit f412eed9dfdeeb6becd7de2ffe8b5d0a8b3f81ca
Author: Jakub Kicinski <jakub.kicinski@netronome.com>
Date:   Thu May 3 18:37:16 2018 -0700

    tools: bpftool: add simple perf event output reader
    
    Users of BPF sooner or later discover perf_event_output() helpers
    and BPF_MAP_TYPE_PERF_EVENT_ARRAY.  Dumping this array type is
    not possible, however, we can add simple reading of perf events.
    Create a new event_pipe subcommand for maps, this sub command
    will only work with BPF_MAP_TYPE_PERF_EVENT_ARRAY maps.
    
    Parts of the code from samples/bpf/trace_output_user.c.
    
    Signed-off-by: Jakub Kicinski <jakub.kicinski@netronome.com>
    Reviewed-by: Quentin Monnet <quentin.monnet@netronome.com>
    Acked-by: Alexei Starovoitov <ast@kernel.org>
    Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>

diff --git a/tools/bpf/bpftool/main.h b/tools/bpf/bpftool/main.h
index cbf8985da362..6173cd997e7a 100644
--- a/tools/bpf/bpftool/main.h
+++ b/tools/bpf/bpftool/main.h
@@ -117,14 +117,18 @@ int do_pin_fd(int fd, const char *name);
 
 int do_prog(int argc, char **arg);
 int do_map(int argc, char **arg);
+int do_event_pipe(int argc, char **argv);
 int do_cgroup(int argc, char **arg);
 
 int prog_parse_fd(int *argc, char ***argv);
+int map_parse_fd_and_info(int *argc, char ***argv, void *info, __u32 *info_len);
 
 void disasm_print_insn(unsigned char *image, ssize_t len, int opcodes,
 		       const char *arch);
+void print_data_json(uint8_t *data, size_t len);
 void print_hex_data_json(uint8_t *data, size_t len);
 
+unsigned int get_page_size(void);
 unsigned int get_possible_cpus(void);
 const char *ifindex_to_bfd_name_ns(__u32 ifindex, __u64 ns_dev, __u64 ns_ino);
 

commit e64d52569f6e847495091db40ab58d2d379748ef
Author: Jakub Kicinski <jakub.kicinski@netronome.com>
Date:   Thu May 3 18:37:15 2018 -0700

    tools: bpftool: move get_possible_cpus() to common code
    
    Move the get_possible_cpus() function to shared code.  No functional
    changes.
    
    Signed-off-by: Jakub Kicinski <jakub.kicinski@netronome.com>
    Reviewed-by: Quentin Monnet <quentin.monnet@netronome.com>
    Reviewed-by: Jiong Wang <jiong.wang@netronome.com>
    Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>

diff --git a/tools/bpf/bpftool/main.h b/tools/bpf/bpftool/main.h
index b8e9584d6246..cbf8985da362 100644
--- a/tools/bpf/bpftool/main.h
+++ b/tools/bpf/bpftool/main.h
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2017 Netronome Systems, Inc.
+ * Copyright (C) 2017-2018 Netronome Systems, Inc.
  *
  * This software is dual licensed under the GNU General License Version 2,
  * June 1991 as shown in the file COPYING in the top-level directory of this
@@ -125,6 +125,7 @@ void disasm_print_insn(unsigned char *image, ssize_t len, int opcodes,
 		       const char *arch);
 void print_hex_data_json(uint8_t *data, size_t len);
 
+unsigned int get_possible_cpus(void);
 const char *ifindex_to_bfd_name_ns(__u32 ifindex, __u64 ns_dev, __u64 ns_ino);
 
 #endif

commit e65935969d0fac9df28d9c49bdbab5d8d8286a20
Author: Jiong Wang <jiong.wang@netronome.com>
Date:   Tue Jan 16 16:05:21 2018 -0800

    tools: bpftool: improve architecture detection by using ifindex
    
    The current architecture detection method in bpftool is designed for host
    case.
    
    For offload case, we can't use the architecture of "bpftool" itself.
    Instead, we could call the existing "ifindex_to_name_ns" to get DEVNAME,
    then read pci id from /sys/class/dev/DEVNAME/device/vendor, finally we map
    vendor id to bfd arch name which will finally be used to select bfd backend
    for the disassembler.
    
    Reviewed-by: Jakub Kicinski <jakub.kicinski@netronome.com>
    Signed-off-by: Jiong Wang <jiong.wang@netronome.com>
    Acked-by: Alexei Starovoitov <ast@kernel.org>
    Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>

diff --git a/tools/bpf/bpftool/main.h b/tools/bpf/bpftool/main.h
index 65b526fe6e7e..b8e9584d6246 100644
--- a/tools/bpf/bpftool/main.h
+++ b/tools/bpf/bpftool/main.h
@@ -121,7 +121,10 @@ int do_cgroup(int argc, char **arg);
 
 int prog_parse_fd(int *argc, char ***argv);
 
-void disasm_print_insn(unsigned char *image, ssize_t len, int opcodes);
+void disasm_print_insn(unsigned char *image, ssize_t len, int opcodes,
+		       const char *arch);
 void print_hex_data_json(uint8_t *data, size_t len);
 
+const char *ifindex_to_bfd_name_ns(__u32 ifindex, __u64 ns_dev, __u64 ns_ino);
+
 #endif

commit 522622104ebabbc3372d2fad706b4d30cee13319
Author: Jakub Kicinski <jakub.kicinski@netronome.com>
Date:   Wed Dec 27 18:39:10 2017 -0800

    tools: bpftool: report device information for offloaded programs
    
    Print the just-exposed device information about device to which
    program is bound.
    
    Signed-off-by: Jakub Kicinski <jakub.kicinski@netronome.com>
    Reviewed-by: Quentin Monnet <quentin.monnet@netronome.com>
    Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>

diff --git a/tools/bpf/bpftool/main.h b/tools/bpf/bpftool/main.h
index 8f6d3cac0347..65b526fe6e7e 100644
--- a/tools/bpf/bpftool/main.h
+++ b/tools/bpf/bpftool/main.h
@@ -96,6 +96,8 @@ struct pinned_obj {
 int build_pinned_obj_table(struct pinned_obj_table *table,
 			   enum bpf_obj_type type);
 void delete_pinned_obj_table(struct pinned_obj_table *tab);
+void print_dev_plain(__u32 ifindex, __u64 ns_dev, __u64 ns_inode);
+void print_dev_json(__u32 ifindex, __u64 ns_dev, __u64 ns_inode);
 
 struct cmd {
 	const char *cmd;

commit 5ccda64d38cc2800e3c7fab42a2fea46d44693e9
Author: Roman Gushchin <guro@fb.com>
Date:   Wed Dec 13 15:18:54 2017 +0000

    bpftool: implement cgroup bpf operations
    
    This patch adds basic cgroup bpf operations to bpftool:
    cgroup list, attach and detach commands.
    
    Usage is described in the corresponding man pages,
    and examples are provided.
    
    Syntax:
    $ bpftool cgroup list CGROUP
    $ bpftool cgroup attach CGROUP ATTACH_TYPE PROG [ATTACH_FLAGS]
    $ bpftool cgroup detach CGROUP ATTACH_TYPE PROG
    
    Signed-off-by: Roman Gushchin <guro@fb.com>
    Cc: Alexei Starovoitov <ast@kernel.org>
    Cc: Daniel Borkmann <daniel@iogearbox.net>
    Cc: Jakub Kicinski <jakub.kicinski@netronome.com>
    Cc: Martin KaFai Lau <kafai@fb.com>
    Cc: Quentin Monnet <quentin.monnet@netronome.com>
    Reviewed-by: David Ahern <dsahern@gmail.com>
    Reviewed-by: Jakub Kicinski <jakub.kicinski@netronome.com>
    Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>

diff --git a/tools/bpf/bpftool/main.h b/tools/bpf/bpftool/main.h
index bec1ccbb49c7..8f6d3cac0347 100644
--- a/tools/bpf/bpftool/main.h
+++ b/tools/bpf/bpftool/main.h
@@ -115,6 +115,7 @@ int do_pin_fd(int fd, const char *name);
 
 int do_prog(int argc, char **arg);
 int do_map(int argc, char **arg);
+int do_cgroup(int argc, char **arg);
 
 int prog_parse_fd(int *argc, char ***argv);
 

commit 49a086c201a9356287471aa5846a427bdcecc4f7
Author: Roman Gushchin <guro@fb.com>
Date:   Wed Dec 13 15:18:53 2017 +0000

    bpftool: implement prog load command
    
    Add the prog load command to load a bpf program from a specified
    binary file and pin it to bpffs.
    
    Usage description and examples are given in the corresponding man
    page.
    
    Syntax:
    $ bpftool prog load OBJ FILE
    
    FILE is a non-existing file on bpffs.
    
    Signed-off-by: Roman Gushchin <guro@fb.com>
    Cc: Alexei Starovoitov <ast@kernel.org>
    Cc: Daniel Borkmann <daniel@iogearbox.net>
    Reviewed-by: Jakub Kicinski <jakub.kicinski@netronome.com>
    Cc: Martin KaFai Lau <kafai@fb.com>
    Cc: Quentin Monnet <quentin.monnet@netronome.com>
    Cc: David Ahern <dsahern@gmail.com>
    Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>

diff --git a/tools/bpf/bpftool/main.h b/tools/bpf/bpftool/main.h
index bff330b49791..bec1ccbb49c7 100644
--- a/tools/bpf/bpftool/main.h
+++ b/tools/bpf/bpftool/main.h
@@ -111,6 +111,7 @@ char *get_fdinfo(int fd, const char *key);
 int open_obj_pinned(char *path);
 int open_obj_pinned_any(char *path, enum bpf_obj_type exp_type);
 int do_pin_any(int argc, char **argv, int (*get_fd_by_id)(__u32));
+int do_pin_fd(int fd, const char *name);
 
 int do_prog(int argc, char **arg);
 int do_map(int argc, char **arg);

commit 0d954eeb99eee63964a07a68fcac61e1df8488e7
Author: Quentin Monnet <quentin.monnet@netronome.com>
Date:   Tue Nov 28 17:44:31 2017 -0800

    tools: bpftool: remove spurious line break from error message
    
    The end-of-line character inside the string would break JSON compliance.
    Remove it, `p_err()` already adds a '\n' character for plain output
    anyway.
    
    Fixes: 9a5ab8bf1d6d ("tools: bpftool: turn err() and info() macros into functions")
    Reported-by: Jakub Kicinski <jakub.kicinski@netronome.com>
    Signed-off-by: Quentin Monnet <quentin.monnet@netronome.com>
    Acked-by: Jakub Kicinski <jakub.kicinski@netronome.com>
    Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>

diff --git a/tools/bpf/bpftool/main.h b/tools/bpf/bpftool/main.h
index 0b60ddfb2b93..bff330b49791 100644
--- a/tools/bpf/bpftool/main.h
+++ b/tools/bpf/bpftool/main.h
@@ -51,7 +51,7 @@
 
 #define NEXT_ARG()	({ argc--; argv++; if (argc < 0) usage(); })
 #define NEXT_ARGP()	({ (*argc)--; (*argv)++; if (*argc < 0) usage(); })
-#define BAD_ARG()	({ p_err("what is '%s'?\n", *argv); -1; })
+#define BAD_ARG()	({ p_err("what is '%s'?", *argv); -1; })
 
 #define ERR_MAX_LEN	1024
 

commit 7868620a3c15dbc661fb5d849de403ac04624c50
Author: Quentin Monnet <quentin.monnet@netronome.com>
Date:   Tue Nov 28 17:44:29 2017 -0800

    tools: bpftool: clean up the JSON writer before exiting in usage()
    
    The writer is cleaned at the end of the main function, but not if the
    program exits sooner in usage(). Let's keep it clean and destroy the
    writer before exiting.
    
    Destruction and actual call to exit() are moved to another function so
    that clean exit can also be performed without printing usage() hints.
    
    Fixes: d35efba99d92 ("tools: bpftool: introduce --json and --pretty options")
    Signed-off-by: Quentin Monnet <quentin.monnet@netronome.com>
    Acked-by: Jakub Kicinski <jakub.kicinski@netronome.com>
    Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>

diff --git a/tools/bpf/bpftool/main.h b/tools/bpf/bpftool/main.h
index 9c191e222d6f..0b60ddfb2b93 100644
--- a/tools/bpf/bpftool/main.h
+++ b/tools/bpf/bpftool/main.h
@@ -41,6 +41,7 @@
 #include <stdbool.h>
 #include <stdio.h>
 #include <linux/bpf.h>
+#include <linux/compiler.h>
 #include <linux/kernel.h>
 #include <linux/hashtable.h>
 
@@ -80,7 +81,7 @@ void p_info(const char *fmt, ...);
 
 bool is_prefix(const char *pfx, const char *str);
 void fprint_hex(FILE *f, void *arg, unsigned int n, const char *sep);
-void usage(void) __attribute__((noreturn));
+void usage(void) __noreturn;
 
 struct pinned_obj_table {
 	DECLARE_HASHTABLE(table, 16);

commit c541b73466549c4aa4ee20ccd04ba52e4c95d6eb
Author: Prashant Bhole <bhole_prashant_q7@lab.ntt.co.jp>
Date:   Wed Nov 8 13:55:49 2017 +0900

    tools: bpftool: optionally show filenames of pinned objects
    
    Making it optional to show file names of pinned objects because
    it scans complete bpf-fs filesystem which is costly.
    Added option -f|--bpffs. Documentation updated.
    
    Signed-off-by: Prashant Bhole <bhole_prashant_q7@lab.ntt.co.jp>
    Signed-off-by: David S. Miller <davem@davemloft.net>

diff --git a/tools/bpf/bpftool/main.h b/tools/bpf/bpftool/main.h
index 13453de2e570..9c191e222d6f 100644
--- a/tools/bpf/bpftool/main.h
+++ b/tools/bpf/bpftool/main.h
@@ -59,7 +59,7 @@
 #define HELP_SPEC_PROGRAM						\
 	"PROG := { id PROG_ID | pinned FILE | tag PROG_TAG }"
 #define HELP_SPEC_OPTIONS						\
-	"OPTIONS := { {-j|--json} [{-p|--pretty}] }"
+	"OPTIONS := { {-j|--json} [{-p|--pretty}] | {-f|--bpffs} }"
 
 enum bpf_obj_type {
 	BPF_OBJ_UNKNOWN,
@@ -71,6 +71,7 @@ extern const char *bin_name;
 
 extern json_writer_t *json_wtr;
 extern bool json_output;
+extern bool show_pinned;
 extern struct pinned_obj_table prog_table;
 extern struct pinned_obj_table map_table;
 

commit 4990f1f4610b483a60397ed2768d268df228a551
Author: Prashant Bhole <bhole_prashant_q7@lab.ntt.co.jp>
Date:   Wed Nov 8 13:55:48 2017 +0900

    tools: bpftool: show filenames of pinned objects
    
    Added support to show filenames of pinned objects.
    
    For example:
    
    root@test# ./bpftool prog
    3: tracepoint  name tracepoint__irq  tag f677a7dd722299a3
        loaded_at Oct 26/11:39  uid 0
        xlated 160B  not jited  memlock 4096B  map_ids 4
        pinned /sys/fs/bpf/softirq_prog
    
    4: tracepoint  name tracepoint__irq  tag ea5dc530d00b92b6
        loaded_at Oct 26/11:39  uid 0
        xlated 392B  not jited  memlock 4096B  map_ids 4,6
    
    root@test# ./bpftool --json --pretty prog
    [{
            "id": 3,
            "type": "tracepoint",
            "name": "tracepoint__irq",
            "tag": "f677a7dd722299a3",
            "loaded_at": "Oct 26/11:39",
            "uid": 0,
            "bytes_xlated": 160,
            "jited": false,
            "bytes_memlock": 4096,
            "map_ids": [4
            ],
            "pinned": ["/sys/fs/bpf/softirq_prog"
            ]
        },{
            "id": 4,
            "type": "tracepoint",
            "name": "tracepoint__irq",
            "tag": "ea5dc530d00b92b6",
            "loaded_at": "Oct 26/11:39",
            "uid": 0,
            "bytes_xlated": 392,
            "jited": false,
            "bytes_memlock": 4096,
            "map_ids": [4,6
            ],
            "pinned": []
        }
    ]
    
    root@test# ./bpftool map
    4: hash  name start  flags 0x0
        key 4B  value 16B  max_entries 10240  memlock 1003520B
        pinned /sys/fs/bpf/softirq_map1
    5: hash  name iptr  flags 0x0
        key 4B  value 8B  max_entries 10240  memlock 921600B
    
    root@test# ./bpftool --json --pretty map
    [{
            "id": 4,
            "type": "hash",
            "name": "start",
            "flags": 0,
            "bytes_key": 4,
            "bytes_value": 16,
            "max_entries": 10240,
            "bytes_memlock": 1003520,
            "pinned": ["/sys/fs/bpf/softirq_map1"
            ]
        },{
            "id": 5,
            "type": "hash",
            "name": "iptr",
            "flags": 0,
            "bytes_key": 4,
            "bytes_value": 8,
            "max_entries": 10240,
            "bytes_memlock": 921600,
            "pinned": []
        }
    ]
    
    Signed-off-by: Prashant Bhole <bhole_prashant_q7@lab.ntt.co.jp>
    Signed-off-by: David S. Miller <davem@davemloft.net>

diff --git a/tools/bpf/bpftool/main.h b/tools/bpf/bpftool/main.h
index 2ff2a361af0d..13453de2e570 100644
--- a/tools/bpf/bpftool/main.h
+++ b/tools/bpf/bpftool/main.h
@@ -42,6 +42,7 @@
 #include <stdio.h>
 #include <linux/bpf.h>
 #include <linux/kernel.h>
+#include <linux/hashtable.h>
 
 #include "json_writer.h"
 
@@ -70,6 +71,8 @@ extern const char *bin_name;
 
 extern json_writer_t *json_wtr;
 extern bool json_output;
+extern struct pinned_obj_table prog_table;
+extern struct pinned_obj_table map_table;
 
 void p_err(const char *fmt, ...);
 void p_info(const char *fmt, ...);
@@ -78,6 +81,20 @@ bool is_prefix(const char *pfx, const char *str);
 void fprint_hex(FILE *f, void *arg, unsigned int n, const char *sep);
 void usage(void) __attribute__((noreturn));
 
+struct pinned_obj_table {
+	DECLARE_HASHTABLE(table, 16);
+};
+
+struct pinned_obj {
+	__u32 id;
+	char *path;
+	struct hlist_node hash;
+};
+
+int build_pinned_obj_table(struct pinned_obj_table *table,
+			   enum bpf_obj_type type);
+void delete_pinned_obj_table(struct pinned_obj_table *tab);
+
 struct cmd {
 	const char *cmd;
 	int (*func)(int argc, char **argv);

commit 1852719658c0f853b5481c9eaed862f1a9355edc
Author: Prashant Bhole <bhole_prashant_q7@lab.ntt.co.jp>
Date:   Wed Nov 8 13:55:47 2017 +0900

    tools: bpftool: open pinned object without type check
    
    This was needed for opening any file in bpf-fs without knowing
    its object type
    
    Signed-off-by: Prashant Bhole <bhole_prashant_q7@lab.ntt.co.jp>
    Signed-off-by: David S. Miller <davem@davemloft.net>

diff --git a/tools/bpf/bpftool/main.h b/tools/bpf/bpftool/main.h
index ff5ad05b137b..2ff2a361af0d 100644
--- a/tools/bpf/bpftool/main.h
+++ b/tools/bpf/bpftool/main.h
@@ -89,6 +89,7 @@ int cmd_select(const struct cmd *cmds, int argc, char **argv,
 int get_fd_type(int fd);
 const char *get_fd_type_name(enum bpf_obj_type type);
 char *get_fdinfo(int fd, const char *key);
+int open_obj_pinned(char *path);
 int open_obj_pinned_any(char *path, enum bpf_obj_type exp_type);
 int do_pin_any(int argc, char **argv, int (*get_fd_by_id)(__u32));
 

commit 0b1c27db12fd338ed912fec18f5cc02d7bd4e54e
Author: Quentin Monnet <quentin.monnet@netronome.com>
Date:   Fri Nov 3 13:59:07 2017 -0700

    tools: bpftool: move p_err() and p_info() from main.h to common.c
    
    The two functions were declared as static inline in a header file. There
    is no particular reason why they should be inlined, they just happened to
    remain in the same header file when they were turned from macros to
    functions in a precious commit.
    
    Make them non-inlined functions and move them to common.c file instead.
    
    Suggested-by: Joe Perches <joe@perches.com>
    Signed-off-by: Quentin Monnet <quentin.monnet@netronome.com>
    Signed-off-by: Jakub Kicinski <jakub.kicinski@netronome.com>
    Acked-by: Alexei Starovoitov <ast@kernel.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>

diff --git a/tools/bpf/bpftool/main.h b/tools/bpf/bpftool/main.h
index d315d01be645..ff5ad05b137b 100644
--- a/tools/bpf/bpftool/main.h
+++ b/tools/bpf/bpftool/main.h
@@ -71,6 +71,9 @@ extern const char *bin_name;
 extern json_writer_t *json_wtr;
 extern bool json_output;
 
+void p_err(const char *fmt, ...);
+void p_info(const char *fmt, ...);
+
 bool is_prefix(const char *pfx, const char *str);
 void fprint_hex(FILE *f, void *arg, unsigned int n, const char *sep);
 void usage(void) __attribute__((noreturn));
@@ -97,35 +100,4 @@ int prog_parse_fd(int *argc, char ***argv);
 void disasm_print_insn(unsigned char *image, ssize_t len, int opcodes);
 void print_hex_data_json(uint8_t *data, size_t len);
 
-static inline void p_err(const char *fmt, ...)
-{
-	va_list ap;
-
-	va_start(ap, fmt);
-	if (json_output) {
-		jsonw_start_object(json_wtr);
-		jsonw_name(json_wtr, "error");
-		jsonw_vprintf_enquote(json_wtr, fmt, ap);
-		jsonw_end_object(json_wtr);
-	} else {
-		fprintf(stderr, "Error: ");
-		vfprintf(stderr, fmt, ap);
-		fprintf(stderr, "\n");
-	}
-	va_end(ap);
-}
-
-static inline void p_info(const char *fmt, ...)
-{
-	va_list ap;
-
-	if (json_output)
-		return;
-
-	va_start(ap, fmt);
-	vfprintf(stderr, fmt, ap);
-	fprintf(stderr, "\n");
-	va_end(ap);
-}
-
 #endif

commit 3fc27b71b894f5e2ad611297d5817b6092c96626
Author: Quentin Monnet <quentin.monnet@netronome.com>
Date:   Tue Oct 24 20:11:28 2017 -0700

    tools: bpftool: try to mount bpffs if required for pinning objects
    
    One possible cause of failure for `bpftool {prog|map} pin * file FILE`
    is the FILE not being in an eBPF virtual file system (bpffs). In this
    case, make bpftool attempt to mount bpffs on the parent directory of the
    FILE. Then, if this operation is successful, try again to pin the
    object.
    
    The code for mnt_bpffs() is a copy of function bpf_mnt_fs() from
    iproute2 package (under lib/bpf.c, taken at commit 4b73d52f8a81), with
    modifications regarding handling of error messages.
    
    Signed-off-by: Quentin Monnet <quentin.monnet@netronome.com>
    Signed-off-by: Jakub Kicinski <jakub.kicinski@netronome.com>
    Acked-by: Alexei Starovoitov <ast@kernel.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>

diff --git a/tools/bpf/bpftool/main.h b/tools/bpf/bpftool/main.h
index 2f94bed03a8d..d315d01be645 100644
--- a/tools/bpf/bpftool/main.h
+++ b/tools/bpf/bpftool/main.h
@@ -51,6 +51,8 @@
 #define NEXT_ARGP()	({ (*argc)--; (*argv)++; if (*argc < 0) usage(); })
 #define BAD_ARG()	({ p_err("what is '%s'?\n", *argv); -1; })
 
+#define ERR_MAX_LEN	1024
+
 #define BPF_TAG_FMT	"%02hhx%02hhx%02hhx%02hhx%02hhx%02hhx%02hhx%02hhx"
 
 #define HELP_SPEC_PROGRAM						\

commit 0641c3c890d480abeb237b92a5ee4b99a22319c6
Author: Quentin Monnet <quentin.monnet@netronome.com>
Date:   Mon Oct 23 09:24:16 2017 -0700

    tools: bpftool: update documentation for --json and --pretty usage
    
    Update the documentation to provide help about JSON output generation,
    and add an example in bpftool-prog manual page.
    
    Also reintroduce an example that was left aside when the tool was moved
    from GitHub to the kernel sources, in order to show how to mount the
    bpffs file system (to pin programs) inside the bpftool-prog manual page.
    
    Signed-off-by: Quentin Monnet <quentin.monnet@netronome.com>
    Acked-by: Daniel Borkmann <daniel@iogearbox.net>
    Signed-off-by: David S. Miller <davem@davemloft.net>

diff --git a/tools/bpf/bpftool/main.h b/tools/bpf/bpftool/main.h
index 04c88b55d8c7..2f94bed03a8d 100644
--- a/tools/bpf/bpftool/main.h
+++ b/tools/bpf/bpftool/main.h
@@ -55,6 +55,8 @@
 
 #define HELP_SPEC_PROGRAM						\
 	"PROG := { id PROG_ID | pinned FILE | tag PROG_TAG }"
+#define HELP_SPEC_OPTIONS						\
+	"OPTIONS := { {-j|--json} [{-p|--pretty}] }"
 
 enum bpf_obj_type {
 	BPF_OBJ_UNKNOWN,

commit 9a5ab8bf1d6d16ef47fdf55dba1683ec00d751ad
Author: Quentin Monnet <quentin.monnet@netronome.com>
Date:   Mon Oct 23 09:24:13 2017 -0700

    tools: bpftool: turn err() and info() macros into functions
    
    Turn err() and info() macros into functions.
    
    In order to avoid naming conflicts with variables in the code, rename
    them as p_err() and p_info() respectively.
    
    The behavior of these functions is similar to the one of the macros for
    plain output. However, when JSON output is requested, these macros
    return a JSON-formatted "error" object instead of printing a message to
    stderr.
    
    To handle error messages correctly with JSON, a modification was brought
    to their behavior nonetheless: the functions now append a end-of-line
    character at the end of the message. This way, we can remove end-of-line
    characters at the end of the argument strings, and not have them in the
    JSON output.
    
    All error messages are formatted to hold in a single call to p_err(), in
    order to produce a single JSON field.
    
    Signed-off-by: Quentin Monnet <quentin.monnet@netronome.com>
    Acked-by: Jakub Kicinski <jakub.kicinski@netronome.com>
    Acked-by: Daniel Borkmann <daniel@iogearbox.net>
    Signed-off-by: David S. Miller <davem@davemloft.net>

diff --git a/tools/bpf/bpftool/main.h b/tools/bpf/bpftool/main.h
index 693fc9710be1..04c88b55d8c7 100644
--- a/tools/bpf/bpftool/main.h
+++ b/tools/bpf/bpftool/main.h
@@ -45,15 +45,11 @@
 
 #include "json_writer.h"
 
-#define err(msg...)	fprintf(stderr, "Error: " msg)
-#define warn(msg...)	fprintf(stderr, "Warning: " msg)
-#define info(msg...)	fprintf(stderr, msg)
-
 #define ptr_to_u64(ptr)	((__u64)(unsigned long)(ptr))
 
 #define NEXT_ARG()	({ argc--; argv++; if (argc < 0) usage(); })
 #define NEXT_ARGP()	({ (*argc)--; (*argv)++; if (*argc < 0) usage(); })
-#define BAD_ARG()	({ err("what is '%s'?\n", *argv); -1; })
+#define BAD_ARG()	({ p_err("what is '%s'?\n", *argv); -1; })
 
 #define BPF_TAG_FMT	"%02hhx%02hhx%02hhx%02hhx%02hhx%02hhx%02hhx%02hhx"
 
@@ -97,4 +93,35 @@ int prog_parse_fd(int *argc, char ***argv);
 void disasm_print_insn(unsigned char *image, ssize_t len, int opcodes);
 void print_hex_data_json(uint8_t *data, size_t len);
 
+static inline void p_err(const char *fmt, ...)
+{
+	va_list ap;
+
+	va_start(ap, fmt);
+	if (json_output) {
+		jsonw_start_object(json_wtr);
+		jsonw_name(json_wtr, "error");
+		jsonw_vprintf_enquote(json_wtr, fmt, ap);
+		jsonw_end_object(json_wtr);
+	} else {
+		fprintf(stderr, "Error: ");
+		vfprintf(stderr, fmt, ap);
+		fprintf(stderr, "\n");
+	}
+	va_end(ap);
+}
+
+static inline void p_info(const char *fmt, ...)
+{
+	va_list ap;
+
+	if (json_output)
+		return;
+
+	va_start(ap, fmt);
+	vfprintf(stderr, fmt, ap);
+	fprintf(stderr, "\n");
+	va_end(ap);
+}
+
 #endif

commit f05e2c32f715985f54265b1e237b5cce1b576c71
Author: Quentin Monnet <quentin.monnet@netronome.com>
Date:   Mon Oct 23 09:24:10 2017 -0700

    tools: bpftool: add JSON output for `bpftool prog dump xlated *` command
    
    Add a new printing function to dump translated eBPF instructions as
    JSON. As for plain output, opcodes are printed only on request (when
    `opcodes` is provided on the command line).
    
    The disassembled output is generated by the same code that is used by
    the kernel verifier.
    
    Example output:
    
        $ bpftool --json --pretty prog dump xlated id 1
        [{
                "disasm": "(bf) r6 = r1"
            },{
                "disasm": "(61) r7 = *(u32 *)(r6 +16)"
            },{
                "disasm": "(95) exit"
            }
        ]
    
        $ bpftool --json --pretty prog dump xlated id 1 opcodes
        [{
                "disasm": "(bf) r6 = r1",
                "opcodes": {
                    "code": "0xbf",
                    "src_reg": "0x1",
                    "dst_reg": "0x6",
                    "off": ["0x00","0x00"
                    ],
                    "imm": ["0x00","0x00","0x00","0x00"
                    ]
                }
            },{
                "disasm": "(61) r7 = *(u32 *)(r6 +16)",
                "opcodes": {
                    "code": "0x61",
                    "src_reg": "0x6",
                    "dst_reg": "0x7",
                    "off": ["0x10","0x00"
                    ],
                    "imm": ["0x00","0x00","0x00","0x00"
                    ]
                }
            },{
                "disasm": "(95) exit",
                "opcodes": {
                    "code": "0x95",
                    "src_reg": "0x0",
                    "dst_reg": "0x0",
                    "off": ["0x00","0x00"
                    ],
                    "imm": ["0x00","0x00","0x00","0x00"
                    ]
                }
            }
        ]
    
    Signed-off-by: Quentin Monnet <quentin.monnet@netronome.com>
    Acked-by: Daniel Borkmann <daniel@iogearbox.net>
    Signed-off-by: David S. Miller <davem@davemloft.net>

diff --git a/tools/bpf/bpftool/main.h b/tools/bpf/bpftool/main.h
index 15927fc9fb31..693fc9710be1 100644
--- a/tools/bpf/bpftool/main.h
+++ b/tools/bpf/bpftool/main.h
@@ -95,5 +95,6 @@ int do_map(int argc, char **arg);
 int prog_parse_fd(int *argc, char ***argv);
 
 void disasm_print_insn(unsigned char *image, ssize_t len, int opcodes);
+void print_hex_data_json(uint8_t *data, size_t len);
 
 #endif

commit d35efba99d9221d9fe1715a23247ad9b703544ec
Author: Quentin Monnet <quentin.monnet@netronome.com>
Date:   Mon Oct 23 09:24:07 2017 -0700

    tools: bpftool: introduce --json and --pretty options
    
    These two options can be used to ask for a JSON output (--j or -json),
    and to make this JSON human-readable (-p or --pretty).
    
    A json_writer object is created when JSON is required, and will be used
    in follow-up commits to produce JSON output.
    
    Note that --pretty implies --json.
    
    Update for the manual pages and interactive help messages comes in a
    later patch of the series.
    
    Signed-off-by: Quentin Monnet <quentin.monnet@netronome.com>
    Acked-by: Daniel Borkmann <daniel@iogearbox.net>
    Signed-off-by: David S. Miller <davem@davemloft.net>

diff --git a/tools/bpf/bpftool/main.h b/tools/bpf/bpftool/main.h
index 41e6c7d3fcad..15927fc9fb31 100644
--- a/tools/bpf/bpftool/main.h
+++ b/tools/bpf/bpftool/main.h
@@ -43,6 +43,8 @@
 #include <linux/bpf.h>
 #include <linux/kernel.h>
 
+#include "json_writer.h"
+
 #define err(msg...)	fprintf(stderr, "Error: " msg)
 #define warn(msg...)	fprintf(stderr, "Warning: " msg)
 #define info(msg...)	fprintf(stderr, msg)
@@ -66,6 +68,9 @@ enum bpf_obj_type {
 
 extern const char *bin_name;
 
+extern json_writer_t *json_wtr;
+extern bool json_output;
+
 bool is_prefix(const char *pfx, const char *str);
 void fprint_hex(FILE *f, void *arg, unsigned int n, const char *sep);
 void usage(void) __attribute__((noreturn));

commit 9cbe1f581d17baff7e93936feb041c90b29eb6a8
Author: Quentin Monnet <quentin.monnet@netronome.com>
Date:   Thu Oct 19 15:46:19 2017 -0700

    tools: bpftool: add pointer to file argument to print_hex()
    
    Make print_hex() able to print to any file instead of standard output
    only, and rename it to fprint_hex(). The function can now be called with
    the info() macro, for example, without splitting the output between
    standard and error outputs.
    
    Signed-off-by: Quentin Monnet <quentin.monnet@netronome.com>
    Signed-off-by: Jakub Kicinski <jakub.kicinski@netronome.com>
    Acked-by: Daniel Borkmann <daniel@iogearbox.net>
    Signed-off-by: David S. Miller <davem@davemloft.net>

diff --git a/tools/bpf/bpftool/main.h b/tools/bpf/bpftool/main.h
index 844e4ef6db56..41e6c7d3fcad 100644
--- a/tools/bpf/bpftool/main.h
+++ b/tools/bpf/bpftool/main.h
@@ -67,7 +67,7 @@ enum bpf_obj_type {
 extern const char *bin_name;
 
 bool is_prefix(const char *pfx, const char *str);
-void print_hex(void *arg, unsigned int n, const char *sep);
+void fprint_hex(FILE *f, void *arg, unsigned int n, const char *sep);
 void usage(void) __attribute__((noreturn));
 
 struct cmd {

commit 2dc7c1fef9565c73c5054fd3c134afada09476c1
Author: Jakub Kicinski <jakub.kicinski@netronome.com>
Date:   Mon Oct 16 10:12:54 2017 -0700

    tools: bpftool: use more common tag format
    
    Program tag is usually displayed as string of bytes without
    any separators (e.g. as "aa5520b1090cfeb6" vs MAC addr-like
    format bpftool uses currently: "aa:55:20:b1:09:0c:fe:b6").
    Make bptfool use the more common format both for displaying
    the tag and selecting the program by tag.
    
    This was pointed out in review but I misunderstood the comment.
    
    Signed-off-by: Jakub Kicinski <jakub.kicinski@netronome.com>
    Reviewed-by: Simon Horman <simon.horman@netronome.com>
    Acked-by: Daniel Borkmann <daniel@iogearbox.net>
    Acked-by: Alexei Starovoitov <ast@kernel.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>

diff --git a/tools/bpf/bpftool/main.h b/tools/bpf/bpftool/main.h
index 8e809b2bb311..844e4ef6db56 100644
--- a/tools/bpf/bpftool/main.h
+++ b/tools/bpf/bpftool/main.h
@@ -53,8 +53,7 @@
 #define NEXT_ARGP()	({ (*argc)--; (*argv)++; if (*argc < 0) usage(); })
 #define BAD_ARG()	({ err("what is '%s'?\n", *argv); -1; })
 
-#define BPF_TAG_FMT	"%02hhx:%02hhx:%02hhx:%02hhx:"	\
-			"%02hhx:%02hhx:%02hhx:%02hhx"
+#define BPF_TAG_FMT	"%02hhx%02hhx%02hhx%02hhx%02hhx%02hhx%02hhx%02hhx"
 
 #define HELP_SPEC_PROGRAM						\
 	"PROG := { id PROG_ID | pinned FILE | tag PROG_TAG }"

commit c9c35995bcf812ee8136f634c25bc6ccc3021d4c
Author: Jakub Kicinski <jakub.kicinski@netronome.com>
Date:   Mon Oct 9 10:30:13 2017 -0700

    tools: bpftool: use the kernel's instruction printer
    
    Compile the instruction printer from kernel/bpf and use it
    for disassembling "translated" eBPF code.
    
    Signed-off-by: Jakub Kicinski <jakub.kicinski@netronome.com>
    Reviewed-by: Simon Horman <simon.horman@netronome.com>
    Acked-by: Alexei Starovoitov <ast@kernel.org>
    Acked-by: Daniel Borkmann <daniel@iogearbox.net>
    Signed-off-by: David S. Miller <davem@davemloft.net>

diff --git a/tools/bpf/bpftool/main.h b/tools/bpf/bpftool/main.h
index 85d2d7870a58..8e809b2bb311 100644
--- a/tools/bpf/bpftool/main.h
+++ b/tools/bpf/bpftool/main.h
@@ -36,11 +36,12 @@
 #ifndef __BPF_TOOL_H
 #define __BPF_TOOL_H
 
+/* BFD and kernel.h both define GCC_VERSION, differently */
+#undef GCC_VERSION
 #include <stdbool.h>
 #include <stdio.h>
 #include <linux/bpf.h>
-
-#define ARRAY_SIZE(a)	(sizeof(a) / sizeof(a[0]))
+#include <linux/kernel.h>
 
 #define err(msg...)	fprintf(stderr, "Error: " msg)
 #define warn(msg...)	fprintf(stderr, "Warning: " msg)
@@ -48,11 +49,6 @@
 
 #define ptr_to_u64(ptr)	((__u64)(unsigned long)(ptr))
 
-#define min(a, b)							\
-	({ typeof(a) _a = (a); typeof(b) _b = (b); _a > _b ? _b : _a; })
-#define max(a, b)							\
-	({ typeof(a) _a = (a); typeof(b) _b = (b); _a < _b ? _b : _a; })
-
 #define NEXT_ARG()	({ argc--; argv++; if (argc < 0) usage(); })
 #define NEXT_ARGP()	({ (*argc)--; (*argv)++; if (*argc < 0) usage(); })
 #define BAD_ARG()	({ err("what is '%s'?\n", *argv); -1; })

commit 71bb428fe2c19512ac671d5ee16ef3e73e1b49a8
Author: Jakub Kicinski <jakub.kicinski@netronome.com>
Date:   Wed Oct 4 20:10:04 2017 -0700

    tools: bpf: add bpftool
    
    Add a simple tool for querying and updating BPF objects on the system.
    
    Signed-off-by: Jakub Kicinski <jakub.kicinski@netronome.com>
    Reviewed-by: Simon Horman <simon.horman@netronome.com>
    Acked-by: Daniel Borkmann <daniel@iogearbox.net>
    Acked-by: Alexei Starovoitov <ast@kernel.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>

diff --git a/tools/bpf/bpftool/main.h b/tools/bpf/bpftool/main.h
new file mode 100644
index 000000000000..85d2d7870a58
--- /dev/null
+++ b/tools/bpf/bpftool/main.h
@@ -0,0 +1,99 @@
+/*
+ * Copyright (C) 2017 Netronome Systems, Inc.
+ *
+ * This software is dual licensed under the GNU General License Version 2,
+ * June 1991 as shown in the file COPYING in the top-level directory of this
+ * source tree or the BSD 2-Clause License provided below.  You have the
+ * option to license this software under the complete terms of either license.
+ *
+ * The BSD 2-Clause License:
+ *
+ *     Redistribution and use in source and binary forms, with or
+ *     without modification, are permitted provided that the following
+ *     conditions are met:
+ *
+ *      1. Redistributions of source code must retain the above
+ *         copyright notice, this list of conditions and the following
+ *         disclaimer.
+ *
+ *      2. Redistributions in binary form must reproduce the above
+ *         copyright notice, this list of conditions and the following
+ *         disclaimer in the documentation and/or other materials
+ *         provided with the distribution.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
+ * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
+ * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
+ * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
+ * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
+ * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
+ * SOFTWARE.
+ */
+
+/* Author: Jakub Kicinski <kubakici@wp.pl> */
+
+#ifndef __BPF_TOOL_H
+#define __BPF_TOOL_H
+
+#include <stdbool.h>
+#include <stdio.h>
+#include <linux/bpf.h>
+
+#define ARRAY_SIZE(a)	(sizeof(a) / sizeof(a[0]))
+
+#define err(msg...)	fprintf(stderr, "Error: " msg)
+#define warn(msg...)	fprintf(stderr, "Warning: " msg)
+#define info(msg...)	fprintf(stderr, msg)
+
+#define ptr_to_u64(ptr)	((__u64)(unsigned long)(ptr))
+
+#define min(a, b)							\
+	({ typeof(a) _a = (a); typeof(b) _b = (b); _a > _b ? _b : _a; })
+#define max(a, b)							\
+	({ typeof(a) _a = (a); typeof(b) _b = (b); _a < _b ? _b : _a; })
+
+#define NEXT_ARG()	({ argc--; argv++; if (argc < 0) usage(); })
+#define NEXT_ARGP()	({ (*argc)--; (*argv)++; if (*argc < 0) usage(); })
+#define BAD_ARG()	({ err("what is '%s'?\n", *argv); -1; })
+
+#define BPF_TAG_FMT	"%02hhx:%02hhx:%02hhx:%02hhx:"	\
+			"%02hhx:%02hhx:%02hhx:%02hhx"
+
+#define HELP_SPEC_PROGRAM						\
+	"PROG := { id PROG_ID | pinned FILE | tag PROG_TAG }"
+
+enum bpf_obj_type {
+	BPF_OBJ_UNKNOWN,
+	BPF_OBJ_PROG,
+	BPF_OBJ_MAP,
+};
+
+extern const char *bin_name;
+
+bool is_prefix(const char *pfx, const char *str);
+void print_hex(void *arg, unsigned int n, const char *sep);
+void usage(void) __attribute__((noreturn));
+
+struct cmd {
+	const char *cmd;
+	int (*func)(int argc, char **argv);
+};
+
+int cmd_select(const struct cmd *cmds, int argc, char **argv,
+	       int (*help)(int argc, char **argv));
+
+int get_fd_type(int fd);
+const char *get_fd_type_name(enum bpf_obj_type type);
+char *get_fdinfo(int fd, const char *key);
+int open_obj_pinned_any(char *path, enum bpf_obj_type exp_type);
+int do_pin_any(int argc, char **argv, int (*get_fd_by_id)(__u32));
+
+int do_prog(int argc, char **arg);
+int do_map(int argc, char **arg);
+
+int prog_parse_fd(int *argc, char ***argv);
+
+void disasm_print_insn(unsigned char *image, ssize_t len, int opcodes);
+
+#endif
