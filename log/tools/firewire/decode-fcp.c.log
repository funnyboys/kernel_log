commit b24413180f5600bcb3bb70fbed5cf186b60864bd
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Wed Nov 1 15:07:57 2017 +0100

    License cleanup: add SPDX GPL-2.0 license identifier to files with no license
    
    Many source files in the tree are missing licensing information, which
    makes it harder for compliance tools to determine the correct license.
    
    By default all files without license information are under the default
    license of the kernel, which is GPL version 2.
    
    Update the files which contain no license information with the 'GPL-2.0'
    SPDX license identifier.  The SPDX identifier is a legally binding
    shorthand, which can be used instead of the full boiler plate text.
    
    This patch is based on work done by Thomas Gleixner and Kate Stewart and
    Philippe Ombredanne.
    
    How this work was done:
    
    Patches were generated and checked against linux-4.14-rc6 for a subset of
    the use cases:
     - file had no licensing information it it.
     - file was a */uapi/* one with no licensing information in it,
     - file was a */uapi/* one with existing licensing information,
    
    Further patches will be generated in subsequent months to fix up cases
    where non-standard license headers were used, and references to license
    had to be inferred by heuristics based on keywords.
    
    The analysis to determine which SPDX License Identifier to be applied to
    a file was done in a spreadsheet of side by side results from of the
    output of two independent scanners (ScanCode & Windriver) producing SPDX
    tag:value files created by Philippe Ombredanne.  Philippe prepared the
    base worksheet, and did an initial spot review of a few 1000 files.
    
    The 4.13 kernel was the starting point of the analysis with 60,537 files
    assessed.  Kate Stewart did a file by file comparison of the scanner
    results in the spreadsheet to determine which SPDX license identifier(s)
    to be applied to the file. She confirmed any determination that was not
    immediately clear with lawyers working with the Linux Foundation.
    
    Criteria used to select files for SPDX license identifier tagging was:
     - Files considered eligible had to be source code files.
     - Make and config files were included as candidates if they contained >5
       lines of source
     - File already had some variant of a license header in it (even if <5
       lines).
    
    All documentation files were explicitly excluded.
    
    The following heuristics were used to determine which SPDX license
    identifiers to apply.
    
     - when both scanners couldn't find any license traces, file was
       considered to have no license information in it, and the top level
       COPYING file license applied.
    
       For non */uapi/* files that summary was:
    
       SPDX license identifier                            # files
       ---------------------------------------------------|-------
       GPL-2.0                                              11139
    
       and resulted in the first patch in this series.
    
       If that file was a */uapi/* path one, it was "GPL-2.0 WITH
       Linux-syscall-note" otherwise it was "GPL-2.0".  Results of that was:
    
       SPDX license identifier                            # files
       ---------------------------------------------------|-------
       GPL-2.0 WITH Linux-syscall-note                        930
    
       and resulted in the second patch in this series.
    
     - if a file had some form of licensing information in it, and was one
       of the */uapi/* ones, it was denoted with the Linux-syscall-note if
       any GPL family license was found in the file or had no licensing in
       it (per prior point).  Results summary:
    
       SPDX license identifier                            # files
       ---------------------------------------------------|------
       GPL-2.0 WITH Linux-syscall-note                       270
       GPL-2.0+ WITH Linux-syscall-note                      169
       ((GPL-2.0 WITH Linux-syscall-note) OR BSD-2-Clause)    21
       ((GPL-2.0 WITH Linux-syscall-note) OR BSD-3-Clause)    17
       LGPL-2.1+ WITH Linux-syscall-note                      15
       GPL-1.0+ WITH Linux-syscall-note                       14
       ((GPL-2.0+ WITH Linux-syscall-note) OR BSD-3-Clause)    5
       LGPL-2.0+ WITH Linux-syscall-note                       4
       LGPL-2.1 WITH Linux-syscall-note                        3
       ((GPL-2.0 WITH Linux-syscall-note) OR MIT)              3
       ((GPL-2.0 WITH Linux-syscall-note) AND MIT)             1
    
       and that resulted in the third patch in this series.
    
     - when the two scanners agreed on the detected license(s), that became
       the concluded license(s).
    
     - when there was disagreement between the two scanners (one detected a
       license but the other didn't, or they both detected different
       licenses) a manual inspection of the file occurred.
    
     - In most cases a manual inspection of the information in the file
       resulted in a clear resolution of the license that should apply (and
       which scanner probably needed to revisit its heuristics).
    
     - When it was not immediately clear, the license identifier was
       confirmed with lawyers working with the Linux Foundation.
    
     - If there was any question as to the appropriate license identifier,
       the file was flagged for further research and to be revisited later
       in time.
    
    In total, over 70 hours of logged manual review was done on the
    spreadsheet to determine the SPDX license identifiers to apply to the
    source files by Kate, Philippe, Thomas and, in some cases, confirmation
    by lawyers working with the Linux Foundation.
    
    Kate also obtained a third independent scan of the 4.13 code base from
    FOSSology, and compared selected files where the other two scanners
    disagreed against that SPDX file, to see if there was new insights.  The
    Windriver scanner is based on an older version of FOSSology in part, so
    they are related.
    
    Thomas did random spot checks in about 500 files from the spreadsheets
    for the uapi headers and agreed with SPDX license identifier in the
    files he inspected. For the non-uapi files Thomas did random spot checks
    in about 15000 files.
    
    In initial set of patches against 4.14-rc6, 3 files were found to have
    copy/paste license identifier errors, and have been fixed to reflect the
    correct identifier.
    
    Additionally Philippe spent 10 hours this week doing a detailed manual
    inspection and review of the 12,461 patched files from the initial patch
    version early this week with:
     - a full scancode scan run, collecting the matched texts, detected
       license ids and scores
     - reviewing anything where there was a license detected (about 500+
       files) to ensure that the applied SPDX license was correct
     - reviewing anything where there was no detection but the patch license
       was not GPL-2.0 WITH Linux-syscall-note to ensure that the applied
       SPDX license was correct
    
    This produced a worksheet with 20 files needing minor correction.  This
    worksheet was then exported into 3 different .csv files for the
    different types of files to be modified.
    
    These .csv files were then reviewed by Greg.  Thomas wrote a script to
    parse the csv files and add the proper SPDX tag to the file, in the
    format that the file expected.  This script was further refined by Greg
    based on the output to detect more types of files automatically and to
    distinguish between header and source .c files (which need different
    comment types.)  Finally Greg ran the script using the .csv files to
    generate the patches.
    
    Reviewed-by: Kate Stewart <kstewart@linuxfoundation.org>
    Reviewed-by: Philippe Ombredanne <pombredanne@nexb.com>
    Reviewed-by: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/tools/firewire/decode-fcp.c b/tools/firewire/decode-fcp.c
index e41223b6a4c8..b67ebc88434d 100644
--- a/tools/firewire/decode-fcp.c
+++ b/tools/firewire/decode-fcp.c
@@ -1,3 +1,4 @@
+// SPDX-License-Identifier: GPL-2.0
 #include <linux/firewire-constants.h>
 #include <stdio.h>
 #include <stdlib.h>

commit 83ef7c75939f45f8da46976cdca4db0727276a2d
Author: Stefan Richter <stefanr@s5r6.in-berlin.de>
Date:   Thu Jul 22 11:58:05 2010 +0200

    tools/firewire: nosy-dump: use linux/firewire-constants.h
    
    Signed-off-by: Stefan Richter <stefanr@s5r6.in-berlin.de>

diff --git a/tools/firewire/decode-fcp.c b/tools/firewire/decode-fcp.c
index 9cd1550db24a..e41223b6a4c8 100644
--- a/tools/firewire/decode-fcp.c
+++ b/tools/firewire/decode-fcp.c
@@ -1,5 +1,7 @@
-#include <stdlib.h>
+#include <linux/firewire-constants.h>
 #include <stdio.h>
+#include <stdlib.h>
+
 #include "list.h"
 #include "nosy-dump.h"
 
@@ -176,7 +178,7 @@ decode_fcp(struct link_transaction *t)
 	    ((unsigned long long) t->request->packet.common.offset_high << 32) |
 	    t->request->packet.common.offset_low;
 
-	if (t->request->packet.common.tcode != TCODE_WRITE_BLOCK)
+	if (t->request->packet.common.tcode != TCODE_WRITE_BLOCK_REQUEST)
 		return 0;
 
 	if (offset == CSR_FCP_COMMAND || offset == CSR_FCP_RESPONSE) {

commit 92c16f7e9c65f9a271c6bd5020279b3e37989672
Author: Stefan Richter <stefanr@s5r6.in-berlin.de>
Date:   Thu Jul 22 11:58:05 2010 +0200

    tools/firewire: nosy-dump: change to kernel coding style
    
    This changes only
      - whitespace
      - C99 initializers
      - comment style
      - order of #includes
      - if { } else { } bracing
    
    Signed-off-by: Stefan Richter <stefanr@s5r6.in-berlin.de>

diff --git a/tools/firewire/decode-fcp.c b/tools/firewire/decode-fcp.c
index b6b372537618..9cd1550db24a 100644
--- a/tools/firewire/decode-fcp.c
+++ b/tools/firewire/decode-fcp.c
@@ -6,234 +6,206 @@
 #define CSR_FCP_COMMAND			0xfffff0000b00ull
 #define CSR_FCP_RESPONSE		0xfffff0000d00ull
 
-static const char * const ctype_names[16] = {
-    "control",
-    "status",
-    "specific inquiry",
-    "notify",
-    "general inquiry",
-    "(reserved 0x05)",
-    "(reserved 0x06)",
-    "(reserved 0x07)",
-    "not implemented",
-    "accepted",
-    "rejected",
-    "in transition",
-    "stable",
-    "changed",
-    "(reserved 0x0e)",
-    "interim"
+static const char * const ctype_names[] = {
+	[0x0] = "control",		[0x8] = "not implemented",
+	[0x1] = "status",		[0x9] = "accepted",
+	[0x2] = "specific inquiry",	[0xa] = "rejected",
+	[0x3] = "notify",		[0xb] = "in transition",
+	[0x4] = "general inquiry",	[0xc] = "stable",
+	[0x5] = "(reserved 0x05)",	[0xd] = "changed",
+	[0x6] = "(reserved 0x06)",	[0xe] = "(reserved 0x0e)",
+	[0x7] = "(reserved 0x07)",	[0xf] = "interim",
 };
 
-static const char * const subunit_type_names[32] = {
-    "monitor",
-    "audio",
-    "printer",
-    "disc",
-    "tape recorder/player",
-    "tuner",
-    "ca",
-    "camera",
-    "(reserved 0x08)",
-    "panel",
-    "bulletin board",
-    "camera storage",
-    "(reserved 0x0c)",
-    "(reserved 0x0d)",
-    "(reserved 0x0e)",
-    "(reserved 0x0f)",
-    "(reserved 0x10)",
-    "(reserved 0x11)",
-    "(reserved 0x12)",
-    "(reserved 0x13)",
-    "(reserved 0x14)",
-    "(reserved 0x15)",
-    "(reserved 0x16)",
-    "(reserved 0x17)",
-    "(reserved 0x18)",
-    "(reserved 0x19)",
-    "(reserved 0x1a)",
-    "(reserved 0x1b)",
-    "vendor unique",
-    "all subunit types",
-    "subunit_type extended to next byte",
-    "unit"
+static const char * const subunit_type_names[] = {
+	[0x00] = "monitor",		[0x10] = "(reserved 0x10)",
+	[0x01] = "audio",		[0x11] = "(reserved 0x11)",
+	[0x02] = "printer",		[0x12] = "(reserved 0x12)",
+	[0x03] = "disc",		[0x13] = "(reserved 0x13)",
+	[0x04] = "tape recorder/player",[0x14] = "(reserved 0x14)",
+	[0x05] = "tuner",		[0x15] = "(reserved 0x15)",
+	[0x06] = "ca",			[0x16] = "(reserved 0x16)",
+	[0x07] = "camera",		[0x17] = "(reserved 0x17)",
+	[0x08] = "(reserved 0x08)",	[0x18] = "(reserved 0x18)",
+	[0x09] = "panel",		[0x19] = "(reserved 0x19)",
+	[0x0a] = "bulletin board",	[0x1a] = "(reserved 0x1a)",
+	[0x0b] = "camera storage",	[0x1b] = "(reserved 0x1b)",
+	[0x0c] = "(reserved 0x0c)",	[0x1c] = "vendor unique",
+	[0x0d] = "(reserved 0x0d)",	[0x1d] = "all subunit types",
+	[0x0e] = "(reserved 0x0e)",	[0x1e] = "subunit_type extended to next byte",
+	[0x0f] = "(reserved 0x0f)",	[0x1f] = "unit",
 };
 
 struct avc_enum {
-    int value;
-    const char *name;
+	int value;
+	const char *name;
 };
 
 struct avc_field {
-  const char *name;	/* Short name for field. */
-  int offset;		/* Location of field, specified in bits.
-			 * Negative means from end of packet */
-  int width;		/* Width of field, 0 means use data_length. */
-  struct avc_enum *names;
+	const char *name;	/* Short name for field. */
+	int offset;		/* Location of field, specified in bits; */
+				/* negative means from end of packet.    */
+	int width;		/* Width of field, 0 means use data_length. */
+	struct avc_enum *names;
 };
 
 struct avc_opcode_info {
-    const char *name;
-    struct avc_field fields[8];
+	const char *name;
+	struct avc_field fields[8];
 };
 
 struct avc_enum power_field_names[] = {
-    { 0x70, "on" },
-    { 0x60, "off" },
-    { }
+	{ 0x70, "on" },
+	{ 0x60, "off" },
+	{ }
 };
 
 static const struct avc_opcode_info opcode_info[256] = {
 
-    /* TA Document 1999026
-     * AV/C Digital Interface Command Set General Specification
-     * Version 4.0 */
-    [0xb2] =
-    { "power", {
-	    { "state", 0, 8, power_field_names }
-	}
-    },
-    [0x30] =
-    { "unit info", {
-	    { "foo", 0, 8 },
-	    { "unit_type", 8, 5 },
-	    { "unit", 13, 3 },
-	    { "company id", 16, 24 },
-	}
-    },
-    [0x31] = { "subunit info" },
-    [0x01] = { "reserve" },
-    [0xb0] = { "version" },
-    [0x00] = { "vendor dependent" },
-
-    [0x02] = { "plug info" },
-    [0x12] = { "channel usage" },
-    [0x24] = { "connect" },
-    [0x20] = { "connect av" },
-    [0x22] = { "connections" },
-    [0x11] = { "digital input" },
-    [0x10] = { "digital output" },
-    [0x25] = { "disconnect" },
-    [0x21] = { "disconnect av" },
-    [0x19] = { "input plug signal format" },
-    [0x18] = { "output plug signal format" },
-    [0x1f] = { "general bus setup" },
-
-    /* TA Document 1999025
-     * AV/C Descriptor Mechanism Specification Version 1.0 */
-    [0x0c] = { "create descriptor" },
-    [0x08] = { "open descriptor" },
-    [0x09] = { "read descriptor" },
-    [0x0a] = { "write descriptor" },
-    [0x05] = { "open info block" },
-    [0x06] = { "read info block" },
-    [0x07] = { "write info block" },
-    [0x0b] = { "search descriptor" },
-    [0x0d] = { "object number select" },
-
-    /* TA Document 1999015
-     * AV/C Command Set for Rate Control of Isochronous Data Flow 1.0 */
-    [0xb3] = { "rate", {
-	    { "subfunction", 0, 8 },
-	    { "result", 8, 8 },
-	    { "plug_type", 16, 8 },
-	    { "plug_id", 16, 8 },
-	}
-    },
-
-    /* TA Document 1999008
-     * AV/C Audio Subunit Specification 1.0 */
-    [0xb8] = { "function block" },
-
-    /* TA Document 2001001
-     * AV/C Panel Subunit Specification 1.1 */
-    [0x7d] = { "gui update" },
-    [0x7e] = { "push gui data" },
-    [0x7f] = { "user action" },
-    [0x7c] = { "pass through" },
-
-    /* */
-    [0x26] = { "asynchronous connection" },
+	/* TA Document 1999026 */
+	/* AV/C Digital Interface Command Set General Specification 4.0 */
+	[0xb2] = { "power", {
+			{ "state", 0, 8, power_field_names }
+		}
+	},
+	[0x30] = { "unit info", {
+			{ "foo", 0, 8 },
+			{ "unit_type", 8, 5 },
+			{ "unit", 13, 3 },
+			{ "company id", 16, 24 },
+		}
+	},
+	[0x31] = { "subunit info" },
+	[0x01] = { "reserve" },
+	[0xb0] = { "version" },
+	[0x00] = { "vendor dependent" },
+	[0x02] = { "plug info" },
+	[0x12] = { "channel usage" },
+	[0x24] = { "connect" },
+	[0x20] = { "connect av" },
+	[0x22] = { "connections" },
+	[0x11] = { "digital input" },
+	[0x10] = { "digital output" },
+	[0x25] = { "disconnect" },
+	[0x21] = { "disconnect av" },
+	[0x19] = { "input plug signal format" },
+	[0x18] = { "output plug signal format" },
+	[0x1f] = { "general bus setup" },
+
+	/* TA Document 1999025 */
+	/* AV/C Descriptor Mechanism Specification Version 1.0 */
+	[0x0c] = { "create descriptor" },
+	[0x08] = { "open descriptor" },
+	[0x09] = { "read descriptor" },
+	[0x0a] = { "write descriptor" },
+	[0x05] = { "open info block" },
+	[0x06] = { "read info block" },
+	[0x07] = { "write info block" },
+	[0x0b] = { "search descriptor" },
+	[0x0d] = { "object number select" },
+
+	/* TA Document 1999015 */
+	/* AV/C Command Set for Rate Control of Isochronous Data Flow 1.0 */
+	[0xb3] = { "rate", {
+			{ "subfunction", 0, 8 },
+			{ "result", 8, 8 },
+			{ "plug_type", 16, 8 },
+			{ "plug_id", 16, 8 },
+		}
+	},
+
+	/* TA Document 1999008 */
+	/* AV/C Audio Subunit Specification 1.0 */
+	[0xb8] = { "function block" },
+
+	/* TA Document 2001001 */
+	/* AV/C Panel Subunit Specification 1.1 */
+	[0x7d] = { "gui update" },
+	[0x7e] = { "push gui data" },
+	[0x7f] = { "user action" },
+	[0x7c] = { "pass through" },
+
+	/* */
+	[0x26] = { "asynchronous connection" },
 };
 
 struct avc_frame {
-    uint32_t operand0:8;
-    uint32_t opcode:8;
-    uint32_t subunit_id:3;
-    uint32_t subunit_type:5;
-    uint32_t ctype:4;
-    uint32_t cts:4;
+	uint32_t operand0:8;
+	uint32_t opcode:8;
+	uint32_t subunit_id:3;
+	uint32_t subunit_type:5;
+	uint32_t ctype:4;
+	uint32_t cts:4;
 };
 
 static void
 decode_avc(struct link_transaction *t)
 {
-    struct avc_frame *frame = (struct avc_frame *) t->request->packet.write_block.data;
-    const struct avc_opcode_info *info;
-    const char *name;
-    char buffer[32];
-    int i;
-
-    info = &opcode_info[frame->opcode];
-    if (info->name == NULL) {
-	snprintf(buffer, sizeof buffer, "(unknown opcode 0x%02x)", frame->opcode);
-	name = buffer;
-    } else {
-	name = info->name;
-    }
-
-    printf("av/c %s, subunit_type=%s, subunit_id=%d, opcode=%s",
-	   ctype_names[frame->ctype], subunit_type_names[frame->subunit_type],
-	   frame->subunit_id, name);
-
-    for (i = 0; info->fields[i].name != NULL; i++) {
-	printf(", %s", info->fields[i].name);
-    }
-
-    printf("\n");
-}
+	struct avc_frame *frame =
+	    (struct avc_frame *) t->request->packet.write_block.data;
+	const struct avc_opcode_info *info;
+	const char *name;
+	char buffer[32];
+	int i;
+
+	info = &opcode_info[frame->opcode];
+	if (info->name == NULL) {
+		snprintf(buffer, sizeof(buffer),
+			 "(unknown opcode 0x%02x)", frame->opcode);
+		name = buffer;
+	} else {
+		name = info->name;
+	}
 
+	printf("av/c %s, subunit_type=%s, subunit_id=%d, opcode=%s",
+	    ctype_names[frame->ctype], subunit_type_names[frame->subunit_type],
+	    frame->subunit_id, name);
+
+	for (i = 0; info->fields[i].name != NULL; i++)
+		printf(", %s", info->fields[i].name);
+
+	printf("\n");
+}
 
 int
 decode_fcp(struct link_transaction *t)
 {
-    struct avc_frame *frame = (struct avc_frame *) t->request->packet.write_block.data;
-    unsigned long long offset;
-
-    offset = ((unsigned long long) t->request->packet.common.offset_high << 32) |
-	t->request->packet.common.offset_low;
-
-    if (t->request->packet.common.tcode != TCODE_WRITE_BLOCK)
-	return 0;
-
-    if (offset == CSR_FCP_COMMAND || offset == CSR_FCP_RESPONSE) {
-	switch (frame->cts) {
-	case 0x00:
-	    decode_avc(t);
-	    break;
-	case 0x01:
-	    printf("cal fcp frame (cts=0x01)\n");
-	    break;
-	case 0x02:
-	    printf("ehs fcp frame (cts=0x02)\n");
-	    break;
-	case 0x03:
-	    printf("havi fcp frame (cts=0x03)\n");
-	    break;
-	case 0x0e:
-	    printf("vendor specific fcp frame (cts=0x0e)\n");
-	    break;
-	case 0x0f:
-	    printf("extended cts\n");
-	    break;
-	default:
-	    printf("reserved fcp frame (ctx=0x%02x)\n", frame->cts);
-	    break;
+	struct avc_frame *frame =
+	    (struct avc_frame *) t->request->packet.write_block.data;
+	unsigned long long offset =
+	    ((unsigned long long) t->request->packet.common.offset_high << 32) |
+	    t->request->packet.common.offset_low;
+
+	if (t->request->packet.common.tcode != TCODE_WRITE_BLOCK)
+		return 0;
+
+	if (offset == CSR_FCP_COMMAND || offset == CSR_FCP_RESPONSE) {
+		switch (frame->cts) {
+		case 0x00:
+			decode_avc(t);
+			break;
+		case 0x01:
+			printf("cal fcp frame (cts=0x01)\n");
+			break;
+		case 0x02:
+			printf("ehs fcp frame (cts=0x02)\n");
+			break;
+		case 0x03:
+			printf("havi fcp frame (cts=0x03)\n");
+			break;
+		case 0x0e:
+			printf("vendor specific fcp frame (cts=0x0e)\n");
+			break;
+		case 0x0f:
+			printf("extended cts\n");
+			break;
+		default:
+			printf("reserved fcp frame (ctx=0x%02x)\n", frame->cts);
+			break;
+		}
+		return 1;
 	}
-	return 1;
-    }
 
-    return 0;
+	return 0;
 }
 

commit 1bcc69fb6a48edb3ddf2e8c42f1d1c242196bf74
Author: Stefan Richter <stefanr@s5r6.in-berlin.de>
Date:   Thu Jul 22 11:58:05 2010 +0200

    tools/firewire: nosy-dump: fix it on x86-64
    
    Replace 'unsigned long' and the (unaffected) 'unsigned int' by uint32_t
    if they represent quadlets.
    
    Signed-off-by: Stefan Richter <stefanr@s5r6.in-berlin.de>

diff --git a/tools/firewire/decode-fcp.c b/tools/firewire/decode-fcp.c
index cb9a31b37530..b6b372537618 100644
--- a/tools/firewire/decode-fcp.c
+++ b/tools/firewire/decode-fcp.c
@@ -158,12 +158,12 @@ static const struct avc_opcode_info opcode_info[256] = {
 };
 
 struct avc_frame {
-    unsigned int operand0 : 8;
-    unsigned int opcode : 8;
-    unsigned int subunit_id : 3;
-    unsigned int subunit_type : 5;
-    unsigned int ctype : 4;
-    unsigned int cts : 4;
+    uint32_t operand0:8;
+    uint32_t opcode:8;
+    uint32_t subunit_id:3;
+    uint32_t subunit_type:5;
+    uint32_t ctype:4;
+    uint32_t cts:4;
 };
 
 static void

commit 9f6d3c4b76314c40c866a935d78c80fd284768bd
Author: Stefan Richter <stefanr@s5r6.in-berlin.de>
Date:   Thu Jul 22 11:58:05 2010 +0200

    tools/firewire: add userspace front-end of nosy
    
    This adds nosy-dump, the userspace part of nosy, the IEEE 1394 traffic
    sniffer for Texas Instruments PCILynx/ PCILynx2 based cards.  Author is
    Kristian Høgsberg.
    
    The files added here are taken from
    git://anongit.freedesktop.org/~krh/nosy commit ee29be97 (2009-11-10)
    with the following changes by Stefan Richter:
      - Parts pertaining to the kernel module removed from Makefile.
      - dist target removed from the Makefile.
      - Mentioned nosy-dump in the Kconfig help to nosy's kernel component.
      - Add copyright notice to nosy-dump.c.  This is a duplicate of the
        respective notice in the kernel component nosy.c except for a time
        span of 2002 - 2006, according to Kristian's git log.
    
    "git shortlog decode-fcp.c list.h nosy-dump.[ch]" from nosy's git
    repository:
    
    Jonathan Woithe (1):
          Save logs on Ctrl-C
    
    Kristian Høgsberg (11):
          Pull over nosy from mercurial repo.
          Remove some fields from default view, add logging feature.
          Use infinite time out for poll(), mark more detail fields.
          Fix byte ordering macro.
          Add decoding of iso data and lock packets.
          Add flag to indicate data length field.
          Add cycle start packet decoding, add --iso and --cycle-start flags.
          Distinguish between phy-packets and 0-length iso data.
          Fix transaction and stats view.
          Add simple AV/C decoder.
          Don't break down on big payloads.
    
    Signed-off-by: Stefan Richter <stefanr@s5r6.in-berlin.de>
    Acked-by: Kristian Høgsberg <krh@bitplanet.net>

diff --git a/tools/firewire/decode-fcp.c b/tools/firewire/decode-fcp.c
new file mode 100644
index 000000000000..cb9a31b37530
--- /dev/null
+++ b/tools/firewire/decode-fcp.c
@@ -0,0 +1,239 @@
+#include <stdlib.h>
+#include <stdio.h>
+#include "list.h"
+#include "nosy-dump.h"
+
+#define CSR_FCP_COMMAND			0xfffff0000b00ull
+#define CSR_FCP_RESPONSE		0xfffff0000d00ull
+
+static const char * const ctype_names[16] = {
+    "control",
+    "status",
+    "specific inquiry",
+    "notify",
+    "general inquiry",
+    "(reserved 0x05)",
+    "(reserved 0x06)",
+    "(reserved 0x07)",
+    "not implemented",
+    "accepted",
+    "rejected",
+    "in transition",
+    "stable",
+    "changed",
+    "(reserved 0x0e)",
+    "interim"
+};
+
+static const char * const subunit_type_names[32] = {
+    "monitor",
+    "audio",
+    "printer",
+    "disc",
+    "tape recorder/player",
+    "tuner",
+    "ca",
+    "camera",
+    "(reserved 0x08)",
+    "panel",
+    "bulletin board",
+    "camera storage",
+    "(reserved 0x0c)",
+    "(reserved 0x0d)",
+    "(reserved 0x0e)",
+    "(reserved 0x0f)",
+    "(reserved 0x10)",
+    "(reserved 0x11)",
+    "(reserved 0x12)",
+    "(reserved 0x13)",
+    "(reserved 0x14)",
+    "(reserved 0x15)",
+    "(reserved 0x16)",
+    "(reserved 0x17)",
+    "(reserved 0x18)",
+    "(reserved 0x19)",
+    "(reserved 0x1a)",
+    "(reserved 0x1b)",
+    "vendor unique",
+    "all subunit types",
+    "subunit_type extended to next byte",
+    "unit"
+};
+
+struct avc_enum {
+    int value;
+    const char *name;
+};
+
+struct avc_field {
+  const char *name;	/* Short name for field. */
+  int offset;		/* Location of field, specified in bits.
+			 * Negative means from end of packet */
+  int width;		/* Width of field, 0 means use data_length. */
+  struct avc_enum *names;
+};
+
+struct avc_opcode_info {
+    const char *name;
+    struct avc_field fields[8];
+};
+
+struct avc_enum power_field_names[] = {
+    { 0x70, "on" },
+    { 0x60, "off" },
+    { }
+};
+
+static const struct avc_opcode_info opcode_info[256] = {
+
+    /* TA Document 1999026
+     * AV/C Digital Interface Command Set General Specification
+     * Version 4.0 */
+    [0xb2] =
+    { "power", {
+	    { "state", 0, 8, power_field_names }
+	}
+    },
+    [0x30] =
+    { "unit info", {
+	    { "foo", 0, 8 },
+	    { "unit_type", 8, 5 },
+	    { "unit", 13, 3 },
+	    { "company id", 16, 24 },
+	}
+    },
+    [0x31] = { "subunit info" },
+    [0x01] = { "reserve" },
+    [0xb0] = { "version" },
+    [0x00] = { "vendor dependent" },
+
+    [0x02] = { "plug info" },
+    [0x12] = { "channel usage" },
+    [0x24] = { "connect" },
+    [0x20] = { "connect av" },
+    [0x22] = { "connections" },
+    [0x11] = { "digital input" },
+    [0x10] = { "digital output" },
+    [0x25] = { "disconnect" },
+    [0x21] = { "disconnect av" },
+    [0x19] = { "input plug signal format" },
+    [0x18] = { "output plug signal format" },
+    [0x1f] = { "general bus setup" },
+
+    /* TA Document 1999025
+     * AV/C Descriptor Mechanism Specification Version 1.0 */
+    [0x0c] = { "create descriptor" },
+    [0x08] = { "open descriptor" },
+    [0x09] = { "read descriptor" },
+    [0x0a] = { "write descriptor" },
+    [0x05] = { "open info block" },
+    [0x06] = { "read info block" },
+    [0x07] = { "write info block" },
+    [0x0b] = { "search descriptor" },
+    [0x0d] = { "object number select" },
+
+    /* TA Document 1999015
+     * AV/C Command Set for Rate Control of Isochronous Data Flow 1.0 */
+    [0xb3] = { "rate", {
+	    { "subfunction", 0, 8 },
+	    { "result", 8, 8 },
+	    { "plug_type", 16, 8 },
+	    { "plug_id", 16, 8 },
+	}
+    },
+
+    /* TA Document 1999008
+     * AV/C Audio Subunit Specification 1.0 */
+    [0xb8] = { "function block" },
+
+    /* TA Document 2001001
+     * AV/C Panel Subunit Specification 1.1 */
+    [0x7d] = { "gui update" },
+    [0x7e] = { "push gui data" },
+    [0x7f] = { "user action" },
+    [0x7c] = { "pass through" },
+
+    /* */
+    [0x26] = { "asynchronous connection" },
+};
+
+struct avc_frame {
+    unsigned int operand0 : 8;
+    unsigned int opcode : 8;
+    unsigned int subunit_id : 3;
+    unsigned int subunit_type : 5;
+    unsigned int ctype : 4;
+    unsigned int cts : 4;
+};
+
+static void
+decode_avc(struct link_transaction *t)
+{
+    struct avc_frame *frame = (struct avc_frame *) t->request->packet.write_block.data;
+    const struct avc_opcode_info *info;
+    const char *name;
+    char buffer[32];
+    int i;
+
+    info = &opcode_info[frame->opcode];
+    if (info->name == NULL) {
+	snprintf(buffer, sizeof buffer, "(unknown opcode 0x%02x)", frame->opcode);
+	name = buffer;
+    } else {
+	name = info->name;
+    }
+
+    printf("av/c %s, subunit_type=%s, subunit_id=%d, opcode=%s",
+	   ctype_names[frame->ctype], subunit_type_names[frame->subunit_type],
+	   frame->subunit_id, name);
+
+    for (i = 0; info->fields[i].name != NULL; i++) {
+	printf(", %s", info->fields[i].name);
+    }
+
+    printf("\n");
+}
+
+
+int
+decode_fcp(struct link_transaction *t)
+{
+    struct avc_frame *frame = (struct avc_frame *) t->request->packet.write_block.data;
+    unsigned long long offset;
+
+    offset = ((unsigned long long) t->request->packet.common.offset_high << 32) |
+	t->request->packet.common.offset_low;
+
+    if (t->request->packet.common.tcode != TCODE_WRITE_BLOCK)
+	return 0;
+
+    if (offset == CSR_FCP_COMMAND || offset == CSR_FCP_RESPONSE) {
+	switch (frame->cts) {
+	case 0x00:
+	    decode_avc(t);
+	    break;
+	case 0x01:
+	    printf("cal fcp frame (cts=0x01)\n");
+	    break;
+	case 0x02:
+	    printf("ehs fcp frame (cts=0x02)\n");
+	    break;
+	case 0x03:
+	    printf("havi fcp frame (cts=0x03)\n");
+	    break;
+	case 0x0e:
+	    printf("vendor specific fcp frame (cts=0x0e)\n");
+	    break;
+	case 0x0f:
+	    printf("extended cts\n");
+	    break;
+	default:
+	    printf("reserved fcp frame (ctx=0x%02x)\n", frame->cts);
+	    break;
+	}
+	return 1;
+    }
+
+    return 0;
+}
+
