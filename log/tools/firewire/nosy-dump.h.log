commit b24413180f5600bcb3bb70fbed5cf186b60864bd
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Wed Nov 1 15:07:57 2017 +0100

    License cleanup: add SPDX GPL-2.0 license identifier to files with no license
    
    Many source files in the tree are missing licensing information, which
    makes it harder for compliance tools to determine the correct license.
    
    By default all files without license information are under the default
    license of the kernel, which is GPL version 2.
    
    Update the files which contain no license information with the 'GPL-2.0'
    SPDX license identifier.  The SPDX identifier is a legally binding
    shorthand, which can be used instead of the full boiler plate text.
    
    This patch is based on work done by Thomas Gleixner and Kate Stewart and
    Philippe Ombredanne.
    
    How this work was done:
    
    Patches were generated and checked against linux-4.14-rc6 for a subset of
    the use cases:
     - file had no licensing information it it.
     - file was a */uapi/* one with no licensing information in it,
     - file was a */uapi/* one with existing licensing information,
    
    Further patches will be generated in subsequent months to fix up cases
    where non-standard license headers were used, and references to license
    had to be inferred by heuristics based on keywords.
    
    The analysis to determine which SPDX License Identifier to be applied to
    a file was done in a spreadsheet of side by side results from of the
    output of two independent scanners (ScanCode & Windriver) producing SPDX
    tag:value files created by Philippe Ombredanne.  Philippe prepared the
    base worksheet, and did an initial spot review of a few 1000 files.
    
    The 4.13 kernel was the starting point of the analysis with 60,537 files
    assessed.  Kate Stewart did a file by file comparison of the scanner
    results in the spreadsheet to determine which SPDX license identifier(s)
    to be applied to the file. She confirmed any determination that was not
    immediately clear with lawyers working with the Linux Foundation.
    
    Criteria used to select files for SPDX license identifier tagging was:
     - Files considered eligible had to be source code files.
     - Make and config files were included as candidates if they contained >5
       lines of source
     - File already had some variant of a license header in it (even if <5
       lines).
    
    All documentation files were explicitly excluded.
    
    The following heuristics were used to determine which SPDX license
    identifiers to apply.
    
     - when both scanners couldn't find any license traces, file was
       considered to have no license information in it, and the top level
       COPYING file license applied.
    
       For non */uapi/* files that summary was:
    
       SPDX license identifier                            # files
       ---------------------------------------------------|-------
       GPL-2.0                                              11139
    
       and resulted in the first patch in this series.
    
       If that file was a */uapi/* path one, it was "GPL-2.0 WITH
       Linux-syscall-note" otherwise it was "GPL-2.0".  Results of that was:
    
       SPDX license identifier                            # files
       ---------------------------------------------------|-------
       GPL-2.0 WITH Linux-syscall-note                        930
    
       and resulted in the second patch in this series.
    
     - if a file had some form of licensing information in it, and was one
       of the */uapi/* ones, it was denoted with the Linux-syscall-note if
       any GPL family license was found in the file or had no licensing in
       it (per prior point).  Results summary:
    
       SPDX license identifier                            # files
       ---------------------------------------------------|------
       GPL-2.0 WITH Linux-syscall-note                       270
       GPL-2.0+ WITH Linux-syscall-note                      169
       ((GPL-2.0 WITH Linux-syscall-note) OR BSD-2-Clause)    21
       ((GPL-2.0 WITH Linux-syscall-note) OR BSD-3-Clause)    17
       LGPL-2.1+ WITH Linux-syscall-note                      15
       GPL-1.0+ WITH Linux-syscall-note                       14
       ((GPL-2.0+ WITH Linux-syscall-note) OR BSD-3-Clause)    5
       LGPL-2.0+ WITH Linux-syscall-note                       4
       LGPL-2.1 WITH Linux-syscall-note                        3
       ((GPL-2.0 WITH Linux-syscall-note) OR MIT)              3
       ((GPL-2.0 WITH Linux-syscall-note) AND MIT)             1
    
       and that resulted in the third patch in this series.
    
     - when the two scanners agreed on the detected license(s), that became
       the concluded license(s).
    
     - when there was disagreement between the two scanners (one detected a
       license but the other didn't, or they both detected different
       licenses) a manual inspection of the file occurred.
    
     - In most cases a manual inspection of the information in the file
       resulted in a clear resolution of the license that should apply (and
       which scanner probably needed to revisit its heuristics).
    
     - When it was not immediately clear, the license identifier was
       confirmed with lawyers working with the Linux Foundation.
    
     - If there was any question as to the appropriate license identifier,
       the file was flagged for further research and to be revisited later
       in time.
    
    In total, over 70 hours of logged manual review was done on the
    spreadsheet to determine the SPDX license identifiers to apply to the
    source files by Kate, Philippe, Thomas and, in some cases, confirmation
    by lawyers working with the Linux Foundation.
    
    Kate also obtained a third independent scan of the 4.13 code base from
    FOSSology, and compared selected files where the other two scanners
    disagreed against that SPDX file, to see if there was new insights.  The
    Windriver scanner is based on an older version of FOSSology in part, so
    they are related.
    
    Thomas did random spot checks in about 500 files from the spreadsheets
    for the uapi headers and agreed with SPDX license identifier in the
    files he inspected. For the non-uapi files Thomas did random spot checks
    in about 15000 files.
    
    In initial set of patches against 4.14-rc6, 3 files were found to have
    copy/paste license identifier errors, and have been fixed to reflect the
    correct identifier.
    
    Additionally Philippe spent 10 hours this week doing a detailed manual
    inspection and review of the 12,461 patched files from the initial patch
    version early this week with:
     - a full scancode scan run, collecting the matched texts, detected
       license ids and scores
     - reviewing anything where there was a license detected (about 500+
       files) to ensure that the applied SPDX license was correct
     - reviewing anything where there was no detection but the patch license
       was not GPL-2.0 WITH Linux-syscall-note to ensure that the applied
       SPDX license was correct
    
    This produced a worksheet with 20 files needing minor correction.  This
    worksheet was then exported into 3 different .csv files for the
    different types of files to be modified.
    
    These .csv files were then reviewed by Greg.  Thomas wrote a script to
    parse the csv files and add the proper SPDX tag to the file, in the
    format that the file expected.  This script was further refined by Greg
    based on the output to detect more types of files automatically and to
    distinguish between header and source .c files (which need different
    comment types.)  Finally Greg ran the script using the .csv files to
    generate the patches.
    
    Reviewed-by: Kate Stewart <kstewart@linuxfoundation.org>
    Reviewed-by: Philippe Ombredanne <pombredanne@nexb.com>
    Reviewed-by: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/tools/firewire/nosy-dump.h b/tools/firewire/nosy-dump.h
index 3a4b5b33ba5d..69e5e594f284 100644
--- a/tools/firewire/nosy-dump.h
+++ b/tools/firewire/nosy-dump.h
@@ -1,3 +1,4 @@
+/* SPDX-License-Identifier: GPL-2.0 */
 #ifndef __nosy_dump_h__
 #define __nosy_dump_h__
 

commit 83ef7c75939f45f8da46976cdca4db0727276a2d
Author: Stefan Richter <stefanr@s5r6.in-berlin.de>
Date:   Thu Jul 22 11:58:05 2010 +0200

    tools/firewire: nosy-dump: use linux/firewire-constants.h
    
    Signed-off-by: Stefan Richter <stefanr@s5r6.in-berlin.de>

diff --git a/tools/firewire/nosy-dump.h b/tools/firewire/nosy-dump.h
index fe8be630efaa..3a4b5b33ba5d 100644
--- a/tools/firewire/nosy-dump.h
+++ b/tools/firewire/nosy-dump.h
@@ -3,36 +3,11 @@
 
 #define array_length(array) (sizeof(array) / sizeof(array[0]))
 
-#define TCODE_WRITE_QUADLET         0x0
-#define TCODE_WRITE_BLOCK           0x1
-#define TCODE_WRITE_RESPONSE        0x2
-#define TCODE_READ_QUADLET          0x4
-#define TCODE_READ_BLOCK            0x5
-#define TCODE_READ_QUADLET_RESPONSE 0x6
-#define TCODE_READ_BLOCK_RESPONSE   0x7
-#define TCODE_CYCLE_START           0x8
-#define TCODE_LOCK_REQUEST          0x9
-#define TCODE_ISO_DATA              0xa
-#define TCODE_LOCK_RESPONSE         0xb
-#define TCODE_PHY_PACKET            0x10
-
-#define ACK_NO_ACK               0x0
-#define ACK_COMPLETE             0x1
-#define ACK_PENDING              0x2
-#define ACK_BUSY_X               0x4
-#define ACK_BUSY_A               0x5
-#define ACK_BUSY_B               0x6
-#define ACK_DATA_ERROR           0xd
-#define ACK_TYPE_ERROR           0xe 
-
+#define ACK_NO_ACK   0x0
 #define ACK_DONE(a)  ((a >> 2) == 0)
 #define ACK_BUSY(a)  ((a >> 2) == 1)
 #define ACK_ERROR(a) ((a >> 2) == 3)
 
-#define SPEED_100                0x0
-#define SPEED_200                0x1
-#define SPEED_400                0x2
-
 #include <stdint.h>
 
 struct phy_packet {
@@ -92,6 +67,8 @@ struct phy_packet {
 	uint32_t ack;
 };
 
+#define TCODE_PHY_PACKET 0x10
+
 #define PHY_PACKET_CONFIGURATION 0x00
 #define PHY_PACKET_LINK_ON 0x01
 #define PHY_PACKET_SELF_ID 0x02

commit 92c16f7e9c65f9a271c6bd5020279b3e37989672
Author: Stefan Richter <stefanr@s5r6.in-berlin.de>
Date:   Thu Jul 22 11:58:05 2010 +0200

    tools/firewire: nosy-dump: change to kernel coding style
    
    This changes only
      - whitespace
      - C99 initializers
      - comment style
      - order of #includes
      - if { } else { } bracing
    
    Signed-off-by: Stefan Richter <stefanr@s5r6.in-berlin.de>

diff --git a/tools/firewire/nosy-dump.h b/tools/firewire/nosy-dump.h
index 60cf556e228e..fe8be630efaa 100644
--- a/tools/firewire/nosy-dump.h
+++ b/tools/firewire/nosy-dump.h
@@ -36,60 +36,60 @@
 #include <stdint.h>
 
 struct phy_packet {
-  uint32_t timestamp;
-  union {
-    struct {
-      uint32_t zero:24;
-      uint32_t phy_id:6;
-      uint32_t identifier:2;
-    } common, link_on;
-
-    struct {
-      uint32_t zero:16;
-      uint32_t gap_count:6;
-      uint32_t set_gap_count:1;
-      uint32_t set_root:1;
-      uint32_t root_id:6;
-      uint32_t identifier:2;
-    } phy_config;
-
-    struct {
-      uint32_t more_packets:1;
-      uint32_t initiated_reset:1;
-      uint32_t port2:2;
-      uint32_t port1:2;
-      uint32_t port0:2;
-      uint32_t power_class:3;
-      uint32_t contender:1;
-      uint32_t phy_delay:2;
-      uint32_t phy_speed:2;
-      uint32_t gap_count:6;
-      uint32_t link_active:1;
-      uint32_t extended:1;
-      uint32_t phy_id:6;
-      uint32_t identifier:2;
-    } self_id;
-
-    struct {
-      uint32_t more_packets:1;
-      uint32_t reserved1:1;
-      uint32_t porth:2;
-      uint32_t portg:2;
-      uint32_t portf:2;
-      uint32_t porte:2;
-      uint32_t portd:2;
-      uint32_t portc:2;
-      uint32_t portb:2;
-      uint32_t porta:2;
-      uint32_t reserved0:2;
-      uint32_t sequence:3;
-      uint32_t extended:1;
-      uint32_t phy_id:6;
-      uint32_t identifier:2;
-    } ext_self_id;
-  };
-  uint32_t inverted;
-  uint32_t ack;
+	uint32_t timestamp;
+	union {
+		struct {
+			uint32_t zero:24;
+			uint32_t phy_id:6;
+			uint32_t identifier:2;
+		} common, link_on;
+
+		struct {
+			uint32_t zero:16;
+			uint32_t gap_count:6;
+			uint32_t set_gap_count:1;
+			uint32_t set_root:1;
+			uint32_t root_id:6;
+			uint32_t identifier:2;
+		} phy_config;
+
+		struct {
+			uint32_t more_packets:1;
+			uint32_t initiated_reset:1;
+			uint32_t port2:2;
+			uint32_t port1:2;
+			uint32_t port0:2;
+			uint32_t power_class:3;
+			uint32_t contender:1;
+			uint32_t phy_delay:2;
+			uint32_t phy_speed:2;
+			uint32_t gap_count:6;
+			uint32_t link_active:1;
+			uint32_t extended:1;
+			uint32_t phy_id:6;
+			uint32_t identifier:2;
+		} self_id;
+
+		struct {
+			uint32_t more_packets:1;
+			uint32_t reserved1:1;
+			uint32_t porth:2;
+			uint32_t portg:2;
+			uint32_t portf:2;
+			uint32_t porte:2;
+			uint32_t portd:2;
+			uint32_t portc:2;
+			uint32_t portb:2;
+			uint32_t porta:2;
+			uint32_t reserved0:2;
+			uint32_t sequence:3;
+			uint32_t extended:1;
+			uint32_t phy_id:6;
+			uint32_t identifier:2;
+		} ext_self_id;
+	};
+	uint32_t inverted;
+	uint32_t ack;
 };
 
 #define PHY_PACKET_CONFIGURATION 0x00
@@ -97,98 +97,98 @@ struct phy_packet {
 #define PHY_PACKET_SELF_ID 0x02
 
 struct link_packet {
-  uint32_t timestamp;
-  union {
-    struct {
-      uint32_t priority:4;
-      uint32_t tcode:4;
-      uint32_t rt:2;
-      uint32_t tlabel:6;
-      uint32_t destination:16;
-
-      uint32_t offset_high:16;
-      uint32_t source:16;
-
-      uint32_t offset_low;
-    } common;
-
-    struct {
-      uint32_t common[3];
-      uint32_t crc;
-    } read_quadlet;
-
-    struct {
-      uint32_t common[3];
-      uint32_t data;
-      uint32_t crc;
-    } read_quadlet_response;
-
-    struct {
-      uint32_t common[3];
-      uint32_t extended_tcode:16;
-      uint32_t data_length:16;
-      uint32_t crc;
-    } read_block;
-
-    struct {
-      uint32_t common[3];
-      uint32_t extended_tcode:16;
-      uint32_t data_length:16;
-      uint32_t crc;
-      uint32_t data[0];
-      /* crc and ack follows. */
-    } read_block_response;
-
-    struct {
-      uint32_t common[3];
-      uint32_t data;
-      uint32_t crc;
-    } write_quadlet;
-
-    struct {
-      uint32_t common[3];
-      uint32_t extended_tcode:16;
-      uint32_t data_length:16;
-      uint32_t crc;
-      uint32_t data[0];
-      /* crc and ack follows. */
-    } write_block;
-
-    struct {
-      uint32_t common[3];
-      uint32_t crc;
-    } write_response;
-
-    struct {
-      uint32_t common[3];
-      uint32_t data;
-      uint32_t crc;
-    } cycle_start;
-
-    struct {
-      uint32_t sy:4;
-      uint32_t tcode:4;
-      uint32_t channel:6;
-      uint32_t tag:2;
-      uint32_t data_length:16;
-
-      uint32_t crc;
-    } iso_data;
-  };
+	uint32_t timestamp;
+	union {
+		struct {
+			uint32_t priority:4;
+			uint32_t tcode:4;
+			uint32_t rt:2;
+			uint32_t tlabel:6;
+			uint32_t destination:16;
+
+			uint32_t offset_high:16;
+			uint32_t source:16;
+
+			uint32_t offset_low;
+		} common;
+
+		struct {
+			uint32_t common[3];
+			uint32_t crc;
+		} read_quadlet;
+
+		struct {
+			uint32_t common[3];
+			uint32_t data;
+			uint32_t crc;
+		} read_quadlet_response;
+
+		struct {
+			uint32_t common[3];
+			uint32_t extended_tcode:16;
+			uint32_t data_length:16;
+			uint32_t crc;
+		} read_block;
+
+		struct {
+			uint32_t common[3];
+			uint32_t extended_tcode:16;
+			uint32_t data_length:16;
+			uint32_t crc;
+			uint32_t data[0];
+			/* crc and ack follows. */
+		} read_block_response;
+
+		struct {
+			uint32_t common[3];
+			uint32_t data;
+			uint32_t crc;
+		} write_quadlet;
+
+		struct {
+			uint32_t common[3];
+			uint32_t extended_tcode:16;
+			uint32_t data_length:16;
+			uint32_t crc;
+			uint32_t data[0];
+			/* crc and ack follows. */
+		} write_block;
+
+		struct {
+			uint32_t common[3];
+			uint32_t crc;
+		} write_response;
+
+		struct {
+			uint32_t common[3];
+			uint32_t data;
+			uint32_t crc;
+		} cycle_start;
+
+		struct {
+			uint32_t sy:4;
+			uint32_t tcode:4;
+			uint32_t channel:6;
+			uint32_t tag:2;
+			uint32_t data_length:16;
+
+			uint32_t crc;
+		} iso_data;
+	};
 };
 
 struct subaction {
-  uint32_t ack;
-  size_t length;
-  struct list link;
-  struct link_packet packet;
+	uint32_t ack;
+	size_t length;
+	struct list link;
+	struct link_packet packet;
 };
 
 struct link_transaction {
-  int request_node, response_node, tlabel;
-  struct subaction *request, *response;
-  struct list request_list, response_list;
-  struct list link;
+	int request_node, response_node, tlabel;
+	struct subaction *request, *response;
+	struct list request_list, response_list;
+	struct list link;
 };
 
 int decode_fcp(struct link_transaction *t);

commit 1bcc69fb6a48edb3ddf2e8c42f1d1c242196bf74
Author: Stefan Richter <stefanr@s5r6.in-berlin.de>
Date:   Thu Jul 22 11:58:05 2010 +0200

    tools/firewire: nosy-dump: fix it on x86-64
    
    Replace 'unsigned long' and the (unaffected) 'unsigned int' by uint32_t
    if they represent quadlets.
    
    Signed-off-by: Stefan Richter <stefanr@s5r6.in-berlin.de>

diff --git a/tools/firewire/nosy-dump.h b/tools/firewire/nosy-dump.h
index d8bcb61ab954..60cf556e228e 100644
--- a/tools/firewire/nosy-dump.h
+++ b/tools/firewire/nosy-dump.h
@@ -33,61 +33,63 @@
 #define SPEED_200                0x1
 #define SPEED_400                0x2
 
-struct phy_packet {
-  unsigned long timestamp;
+#include <stdint.h>
 
+struct phy_packet {
+  uint32_t timestamp;
   union {
     struct {
-      unsigned int zero : 24;
-      unsigned int phy_id : 6;
-      unsigned int identifier : 2;
+      uint32_t zero:24;
+      uint32_t phy_id:6;
+      uint32_t identifier:2;
     } common, link_on;
+
     struct {
-      unsigned int zero : 16;
-      unsigned int gap_count : 6;
-      unsigned int set_gap_count : 1;
-      unsigned int set_root : 1;
-      unsigned int root_id : 6;
-      unsigned int identifier : 2;
+      uint32_t zero:16;
+      uint32_t gap_count:6;
+      uint32_t set_gap_count:1;
+      uint32_t set_root:1;
+      uint32_t root_id:6;
+      uint32_t identifier:2;
     } phy_config;
+
     struct {
-      unsigned int more_packets : 1;
-      unsigned int initiated_reset : 1;
-      unsigned int port2 : 2;
-      unsigned int port1 : 2;
-      unsigned int port0 : 2;
-      unsigned int power_class : 3;
-      unsigned int contender : 1;
-      unsigned int phy_delay : 2;
-      unsigned int phy_speed : 2;
-      unsigned int gap_count : 6;
-      unsigned int link_active : 1;
-      unsigned int extended : 1;
-      unsigned int phy_id : 6;
-      unsigned int identifier : 2;
+      uint32_t more_packets:1;
+      uint32_t initiated_reset:1;
+      uint32_t port2:2;
+      uint32_t port1:2;
+      uint32_t port0:2;
+      uint32_t power_class:3;
+      uint32_t contender:1;
+      uint32_t phy_delay:2;
+      uint32_t phy_speed:2;
+      uint32_t gap_count:6;
+      uint32_t link_active:1;
+      uint32_t extended:1;
+      uint32_t phy_id:6;
+      uint32_t identifier:2;
     } self_id;
 
     struct {
-      unsigned int more_packets : 1;
-      unsigned int reserved1 : 1;
-      unsigned int porth : 2;
-      unsigned int portg : 2;
-      unsigned int portf : 2;
-      unsigned int porte : 2;
-      unsigned int portd : 2;
-      unsigned int portc : 2;
-      unsigned int portb : 2;
-      unsigned int porta : 2;
-      unsigned int reserved0 : 2;
-      unsigned int sequence : 3;
-      unsigned int extended : 1;
-      unsigned int phy_id : 6;
-      unsigned int identifier : 2;
+      uint32_t more_packets:1;
+      uint32_t reserved1:1;
+      uint32_t porth:2;
+      uint32_t portg:2;
+      uint32_t portf:2;
+      uint32_t porte:2;
+      uint32_t portd:2;
+      uint32_t portc:2;
+      uint32_t portb:2;
+      uint32_t porta:2;
+      uint32_t reserved0:2;
+      uint32_t sequence:3;
+      uint32_t extended:1;
+      uint32_t phy_id:6;
+      uint32_t identifier:2;
     } ext_self_id;
   };
-
-  unsigned long inverted;
-  unsigned long ack;
+  uint32_t inverted;
+  uint32_t ack;
 };
 
 #define PHY_PACKET_CONFIGURATION 0x00
@@ -95,186 +97,88 @@ struct phy_packet {
 #define PHY_PACKET_SELF_ID 0x02
 
 struct link_packet {
-  unsigned long timestamp;
-
+  uint32_t timestamp;
   union {
     struct {
-      unsigned int priority : 4;
-      unsigned int tcode : 4;
-      unsigned int rt : 2;
-      unsigned int tlabel : 6;
-      unsigned int destination : 16;
+      uint32_t priority:4;
+      uint32_t tcode:4;
+      uint32_t rt:2;
+      uint32_t tlabel:6;
+      uint32_t destination:16;
 
-      unsigned int offset_high : 16;
-      unsigned int source : 16;
+      uint32_t offset_high:16;
+      uint32_t source:16;
 
-      unsigned long offset_low;
+      uint32_t offset_low;
     } common;
 
     struct {
-      unsigned int priority : 4;
-      unsigned int tcode : 4;
-      unsigned int rt : 2;
-      unsigned int tlabel : 6;
-      unsigned int destination : 16;
-
-      unsigned int offset_high : 16;
-      unsigned int source : 16;
-
-      unsigned long offset_low;
-
-      unsigned long crc;
+      uint32_t common[3];
+      uint32_t crc;
     } read_quadlet;
 
     struct {
-      unsigned int priority : 4;
-      unsigned int tcode : 4;
-      unsigned int rt : 2;
-      unsigned int tlabel : 6;
-      unsigned int destination : 16;
-
-      unsigned int reserved0 : 12;
-      unsigned int rcode : 4;
-      unsigned int source : 16;
-
-      unsigned long reserved1;
-
-      unsigned long data;
- 
-      unsigned long crc; 
+      uint32_t common[3];
+      uint32_t data;
+      uint32_t crc;
     } read_quadlet_response;
 
     struct {
-      unsigned int priority : 4;
-      unsigned int tcode : 4;
-      unsigned int rt : 2;
-      unsigned int tlabel : 6;
-      unsigned int destination : 16;
-
-      unsigned int offset_high : 16;
-      unsigned int source : 16;
-
-      unsigned long offset_low;
-
-      unsigned int extended_tcode : 16;
-      unsigned int data_length : 16;
-
-      unsigned long crc;
+      uint32_t common[3];
+      uint32_t extended_tcode:16;
+      uint32_t data_length:16;
+      uint32_t crc;
     } read_block;
 
     struct {
-      unsigned int priority : 4;
-      unsigned int tcode : 4;
-      unsigned int rt : 2;
-      unsigned int tlabel : 6;
-      unsigned int destination : 16;
-
-      unsigned int reserved0 : 12;
-      unsigned int rcode : 4;
-      unsigned int source : 16;
-
-      unsigned long reserved1;
-
-      unsigned int extended_tcode : 16;
-      unsigned int data_length : 16;
-
-      unsigned long crc; 
-
-      unsigned long data[0];
-
+      uint32_t common[3];
+      uint32_t extended_tcode:16;
+      uint32_t data_length:16;
+      uint32_t crc;
+      uint32_t data[0];
       /* crc and ack follows. */
-
     } read_block_response;
 
     struct {
-      unsigned int priority : 4;
-      unsigned int tcode : 4;
-      unsigned int rt : 2;
-      unsigned int tlabel : 6;
-      unsigned int destination : 16;
-
-      unsigned int offset_high : 16;
-      unsigned int source : 16;
-
-      unsigned long offset_low;
-
-      unsigned long data;
- 
-      unsigned long crc; 
-
+      uint32_t common[3];
+      uint32_t data;
+      uint32_t crc;
     } write_quadlet;
 
     struct {
-      unsigned int priority : 4;
-      unsigned int tcode : 4;
-      unsigned int rt : 2;
-      unsigned int tlabel : 6;
-      unsigned int destination : 16;
-
-      unsigned int offset_high : 16;
-      unsigned int source : 16;
-
-      unsigned int offset_low : 32;
-
-      unsigned int extended_tcode : 16;
-      unsigned int data_length : 16;
- 
-      unsigned long crc; 
-      unsigned long data[0];
-
+      uint32_t common[3];
+      uint32_t extended_tcode:16;
+      uint32_t data_length:16;
+      uint32_t crc;
+      uint32_t data[0];
       /* crc and ack follows. */
-
     } write_block;
 
     struct {
-      unsigned int priority : 4;
-      unsigned int tcode : 4;
-      unsigned int rt : 2;
-      unsigned int tlabel : 6;
-      unsigned int destination : 16;
-
-      unsigned int reserved0 : 12;
-      unsigned int rcode : 4;
-      unsigned int source : 16;
-
-      unsigned long reserved1;
-
-      unsigned long crc; 
+      uint32_t common[3];
+      uint32_t crc;
     } write_response;
 
     struct {
-      unsigned int priority : 4;
-      unsigned int tcode : 4;
-      unsigned int rt : 2;
-      unsigned int tlabel : 6;
-      unsigned int destination : 16;
-
-      unsigned int offset_high : 16;
-      unsigned int source : 16;
-
-      unsigned long offset_low;
-
-      unsigned long data;
-
-      unsigned long crc; 
+      uint32_t common[3];
+      uint32_t data;
+      uint32_t crc;
     } cycle_start;
 
     struct {
-      unsigned int sy : 4;
-      unsigned int tcode : 4;
-      unsigned int channel : 6;
-      unsigned int tag : 2;
-      unsigned int data_length : 16;
+      uint32_t sy:4;
+      uint32_t tcode:4;
+      uint32_t channel:6;
+      uint32_t tag:2;
+      uint32_t data_length:16;
 
-      unsigned long crc;
+      uint32_t crc;
     } iso_data;
-
   };
-
 };
 
 struct subaction {
-  unsigned long ack;
+  uint32_t ack;
   size_t length;
   struct list link;
   struct link_packet packet;

commit 9f6d3c4b76314c40c866a935d78c80fd284768bd
Author: Stefan Richter <stefanr@s5r6.in-berlin.de>
Date:   Thu Jul 22 11:58:05 2010 +0200

    tools/firewire: add userspace front-end of nosy
    
    This adds nosy-dump, the userspace part of nosy, the IEEE 1394 traffic
    sniffer for Texas Instruments PCILynx/ PCILynx2 based cards.  Author is
    Kristian Høgsberg.
    
    The files added here are taken from
    git://anongit.freedesktop.org/~krh/nosy commit ee29be97 (2009-11-10)
    with the following changes by Stefan Richter:
      - Parts pertaining to the kernel module removed from Makefile.
      - dist target removed from the Makefile.
      - Mentioned nosy-dump in the Kconfig help to nosy's kernel component.
      - Add copyright notice to nosy-dump.c.  This is a duplicate of the
        respective notice in the kernel component nosy.c except for a time
        span of 2002 - 2006, according to Kristian's git log.
    
    "git shortlog decode-fcp.c list.h nosy-dump.[ch]" from nosy's git
    repository:
    
    Jonathan Woithe (1):
          Save logs on Ctrl-C
    
    Kristian Høgsberg (11):
          Pull over nosy from mercurial repo.
          Remove some fields from default view, add logging feature.
          Use infinite time out for poll(), mark more detail fields.
          Fix byte ordering macro.
          Add decoding of iso data and lock packets.
          Add flag to indicate data length field.
          Add cycle start packet decoding, add --iso and --cycle-start flags.
          Distinguish between phy-packets and 0-length iso data.
          Fix transaction and stats view.
          Add simple AV/C decoder.
          Don't break down on big payloads.
    
    Signed-off-by: Stefan Richter <stefanr@s5r6.in-berlin.de>
    Acked-by: Kristian Høgsberg <krh@bitplanet.net>

diff --git a/tools/firewire/nosy-dump.h b/tools/firewire/nosy-dump.h
new file mode 100644
index 000000000000..d8bcb61ab954
--- /dev/null
+++ b/tools/firewire/nosy-dump.h
@@ -0,0 +1,292 @@
+#ifndef __nosy_dump_h__
+#define __nosy_dump_h__
+
+#define array_length(array) (sizeof(array) / sizeof(array[0]))
+
+#define TCODE_WRITE_QUADLET         0x0
+#define TCODE_WRITE_BLOCK           0x1
+#define TCODE_WRITE_RESPONSE        0x2
+#define TCODE_READ_QUADLET          0x4
+#define TCODE_READ_BLOCK            0x5
+#define TCODE_READ_QUADLET_RESPONSE 0x6
+#define TCODE_READ_BLOCK_RESPONSE   0x7
+#define TCODE_CYCLE_START           0x8
+#define TCODE_LOCK_REQUEST          0x9
+#define TCODE_ISO_DATA              0xa
+#define TCODE_LOCK_RESPONSE         0xb
+#define TCODE_PHY_PACKET            0x10
+
+#define ACK_NO_ACK               0x0
+#define ACK_COMPLETE             0x1
+#define ACK_PENDING              0x2
+#define ACK_BUSY_X               0x4
+#define ACK_BUSY_A               0x5
+#define ACK_BUSY_B               0x6
+#define ACK_DATA_ERROR           0xd
+#define ACK_TYPE_ERROR           0xe 
+
+#define ACK_DONE(a)  ((a >> 2) == 0)
+#define ACK_BUSY(a)  ((a >> 2) == 1)
+#define ACK_ERROR(a) ((a >> 2) == 3)
+
+#define SPEED_100                0x0
+#define SPEED_200                0x1
+#define SPEED_400                0x2
+
+struct phy_packet {
+  unsigned long timestamp;
+
+  union {
+    struct {
+      unsigned int zero : 24;
+      unsigned int phy_id : 6;
+      unsigned int identifier : 2;
+    } common, link_on;
+    struct {
+      unsigned int zero : 16;
+      unsigned int gap_count : 6;
+      unsigned int set_gap_count : 1;
+      unsigned int set_root : 1;
+      unsigned int root_id : 6;
+      unsigned int identifier : 2;
+    } phy_config;
+    struct {
+      unsigned int more_packets : 1;
+      unsigned int initiated_reset : 1;
+      unsigned int port2 : 2;
+      unsigned int port1 : 2;
+      unsigned int port0 : 2;
+      unsigned int power_class : 3;
+      unsigned int contender : 1;
+      unsigned int phy_delay : 2;
+      unsigned int phy_speed : 2;
+      unsigned int gap_count : 6;
+      unsigned int link_active : 1;
+      unsigned int extended : 1;
+      unsigned int phy_id : 6;
+      unsigned int identifier : 2;
+    } self_id;
+
+    struct {
+      unsigned int more_packets : 1;
+      unsigned int reserved1 : 1;
+      unsigned int porth : 2;
+      unsigned int portg : 2;
+      unsigned int portf : 2;
+      unsigned int porte : 2;
+      unsigned int portd : 2;
+      unsigned int portc : 2;
+      unsigned int portb : 2;
+      unsigned int porta : 2;
+      unsigned int reserved0 : 2;
+      unsigned int sequence : 3;
+      unsigned int extended : 1;
+      unsigned int phy_id : 6;
+      unsigned int identifier : 2;
+    } ext_self_id;
+  };
+
+  unsigned long inverted;
+  unsigned long ack;
+};
+
+#define PHY_PACKET_CONFIGURATION 0x00
+#define PHY_PACKET_LINK_ON 0x01
+#define PHY_PACKET_SELF_ID 0x02
+
+struct link_packet {
+  unsigned long timestamp;
+
+  union {
+    struct {
+      unsigned int priority : 4;
+      unsigned int tcode : 4;
+      unsigned int rt : 2;
+      unsigned int tlabel : 6;
+      unsigned int destination : 16;
+
+      unsigned int offset_high : 16;
+      unsigned int source : 16;
+
+      unsigned long offset_low;
+    } common;
+
+    struct {
+      unsigned int priority : 4;
+      unsigned int tcode : 4;
+      unsigned int rt : 2;
+      unsigned int tlabel : 6;
+      unsigned int destination : 16;
+
+      unsigned int offset_high : 16;
+      unsigned int source : 16;
+
+      unsigned long offset_low;
+
+      unsigned long crc;
+    } read_quadlet;
+
+    struct {
+      unsigned int priority : 4;
+      unsigned int tcode : 4;
+      unsigned int rt : 2;
+      unsigned int tlabel : 6;
+      unsigned int destination : 16;
+
+      unsigned int reserved0 : 12;
+      unsigned int rcode : 4;
+      unsigned int source : 16;
+
+      unsigned long reserved1;
+
+      unsigned long data;
+ 
+      unsigned long crc; 
+    } read_quadlet_response;
+
+    struct {
+      unsigned int priority : 4;
+      unsigned int tcode : 4;
+      unsigned int rt : 2;
+      unsigned int tlabel : 6;
+      unsigned int destination : 16;
+
+      unsigned int offset_high : 16;
+      unsigned int source : 16;
+
+      unsigned long offset_low;
+
+      unsigned int extended_tcode : 16;
+      unsigned int data_length : 16;
+
+      unsigned long crc;
+    } read_block;
+
+    struct {
+      unsigned int priority : 4;
+      unsigned int tcode : 4;
+      unsigned int rt : 2;
+      unsigned int tlabel : 6;
+      unsigned int destination : 16;
+
+      unsigned int reserved0 : 12;
+      unsigned int rcode : 4;
+      unsigned int source : 16;
+
+      unsigned long reserved1;
+
+      unsigned int extended_tcode : 16;
+      unsigned int data_length : 16;
+
+      unsigned long crc; 
+
+      unsigned long data[0];
+
+      /* crc and ack follows. */
+
+    } read_block_response;
+
+    struct {
+      unsigned int priority : 4;
+      unsigned int tcode : 4;
+      unsigned int rt : 2;
+      unsigned int tlabel : 6;
+      unsigned int destination : 16;
+
+      unsigned int offset_high : 16;
+      unsigned int source : 16;
+
+      unsigned long offset_low;
+
+      unsigned long data;
+ 
+      unsigned long crc; 
+
+    } write_quadlet;
+
+    struct {
+      unsigned int priority : 4;
+      unsigned int tcode : 4;
+      unsigned int rt : 2;
+      unsigned int tlabel : 6;
+      unsigned int destination : 16;
+
+      unsigned int offset_high : 16;
+      unsigned int source : 16;
+
+      unsigned int offset_low : 32;
+
+      unsigned int extended_tcode : 16;
+      unsigned int data_length : 16;
+ 
+      unsigned long crc; 
+      unsigned long data[0];
+
+      /* crc and ack follows. */
+
+    } write_block;
+
+    struct {
+      unsigned int priority : 4;
+      unsigned int tcode : 4;
+      unsigned int rt : 2;
+      unsigned int tlabel : 6;
+      unsigned int destination : 16;
+
+      unsigned int reserved0 : 12;
+      unsigned int rcode : 4;
+      unsigned int source : 16;
+
+      unsigned long reserved1;
+
+      unsigned long crc; 
+    } write_response;
+
+    struct {
+      unsigned int priority : 4;
+      unsigned int tcode : 4;
+      unsigned int rt : 2;
+      unsigned int tlabel : 6;
+      unsigned int destination : 16;
+
+      unsigned int offset_high : 16;
+      unsigned int source : 16;
+
+      unsigned long offset_low;
+
+      unsigned long data;
+
+      unsigned long crc; 
+    } cycle_start;
+
+    struct {
+      unsigned int sy : 4;
+      unsigned int tcode : 4;
+      unsigned int channel : 6;
+      unsigned int tag : 2;
+      unsigned int data_length : 16;
+
+      unsigned long crc;
+    } iso_data;
+
+  };
+
+};
+
+struct subaction {
+  unsigned long ack;
+  size_t length;
+  struct list link;
+  struct link_packet packet;
+};
+
+struct link_transaction {
+  int request_node, response_node, tlabel;
+  struct subaction *request, *response;
+  struct list request_list, response_list;
+  struct list link;
+};
+
+int decode_fcp(struct link_transaction *t);
+
+#endif /* __nosy_dump_h__ */
