commit 9bd5910d7f3db2f65be139d2679dd9daa4a3419a
Author: Christian Brauner <christian.brauner@ubuntu.com>
Date:   Wed Feb 5 14:26:23 2020 +0100

    selftests/cgroup: add tests for cloning into cgroups
    
    Expand the cgroup test-suite to include tests for CLONE_INTO_CGROUP.
    This adds the following tests:
    - CLONE_INTO_CGROUP manages to clone a process directly into a correctly
      delegated cgroup
    - CLONE_INTO_CGROUP fails to clone a process into a cgroup that has been
      removed after we've opened an fd to it
    - CLONE_INTO_CGROUP fails to clone a process into an invalid domain
      cgroup
    - CLONE_INTO_CGROUP adheres to the no internal process constraint
    - CLONE_INTO_CGROUP works with the freezer feature
    
    Cc: Tejun Heo <tj@kernel.org>
    Cc: Shuah Khan <shuah@kernel.org>
    Cc: cgroups@vger.kernel.org
    Cc: linux-kselftest@vger.kernel.org
    Acked-by: Roman Gushchin <guro@fb.com>
    Signed-off-by: Christian Brauner <christian.brauner@ubuntu.com>
    Signed-off-by: Tejun Heo <tj@kernel.org>

diff --git a/tools/testing/selftests/clone3/clone3_selftests.h b/tools/testing/selftests/clone3/clone3_selftests.h
index a3f2c8ad8bcc..91c1a78ddb39 100644
--- a/tools/testing/selftests/clone3/clone3_selftests.h
+++ b/tools/testing/selftests/clone3/clone3_selftests.h
@@ -5,12 +5,24 @@
 
 #define _GNU_SOURCE
 #include <sched.h>
+#include <linux/sched.h>
+#include <linux/types.h>
 #include <stdint.h>
 #include <syscall.h>
-#include <linux/types.h>
+#include <sys/wait.h>
+
+#include "../kselftest.h"
 
 #define ptr_to_u64(ptr) ((__u64)((uintptr_t)(ptr)))
 
+#ifndef CLONE_INTO_CGROUP
+#define CLONE_INTO_CGROUP 0x200000000ULL /* Clone into a specific cgroup given the right permissions. */
+#endif
+
+#ifndef CLONE_ARGS_SIZE_VER0
+#define CLONE_ARGS_SIZE_VER0 64
+#endif
+
 #ifndef __NR_clone3
 #define __NR_clone3 -1
 struct clone_args {
@@ -22,10 +34,13 @@ struct clone_args {
 	__aligned_u64 stack;
 	__aligned_u64 stack_size;
 	__aligned_u64 tls;
+#define CLONE_ARGS_SIZE_VER1 80
 	__aligned_u64 set_tid;
 	__aligned_u64 set_tid_size;
+#define CLONE_ARGS_SIZE_VER2 88
+	__aligned_u64 cgroup;
 };
-#endif
+#endif /* __NR_clone3 */
 
 static pid_t sys_clone3(struct clone_args *args, size_t size)
 {

commit 11fde161ab37f2938504bf896b48afbd18ea71cd
Author: Christian Brauner <christian.brauner@ubuntu.com>
Date:   Mon Nov 18 08:49:44 2019 +0100

    selftests/clone3: skip if clone3() is ENOSYS
    
    If the clone3() syscall is not implemented we should skip the tests.
    
    Fixes: 41585bbeeef9 ("selftests: add tests for clone3() with *set_tid")
    Fixes: 17a810699c18 ("selftests: add tests for clone3()")
    Signed-off-by: Christian Brauner <christian.brauner@ubuntu.com>

diff --git a/tools/testing/selftests/clone3/clone3_selftests.h b/tools/testing/selftests/clone3/clone3_selftests.h
index 0e3dea58855f..a3f2c8ad8bcc 100644
--- a/tools/testing/selftests/clone3/clone3_selftests.h
+++ b/tools/testing/selftests/clone3/clone3_selftests.h
@@ -34,4 +34,30 @@ static pid_t sys_clone3(struct clone_args *args, size_t size)
 	return syscall(__NR_clone3, args, size);
 }
 
+static inline void test_clone3_supported(void)
+{
+	pid_t pid;
+	struct clone_args args = {};
+
+	if (__NR_clone3 < 0)
+		ksft_exit_skip("clone3() syscall is not supported\n");
+
+	/* Set to something that will always cause EINVAL. */
+	args.exit_signal = -1;
+	pid = sys_clone3(&args, sizeof(args));
+	if (!pid)
+		exit(EXIT_SUCCESS);
+
+	if (pid > 0) {
+		wait(NULL);
+		ksft_exit_fail_msg(
+			"Managed to create child process with invalid exit_signal\n");
+	}
+
+	if (errno == ENOSYS)
+		ksft_exit_skip("clone3() syscall is not supported\n");
+
+	ksft_print_msg("clone3() syscall supported\n");
+}
+
 #endif /* _CLONE3_SELFTESTS_H */

commit 4f5c289ea66a33457d51b305d4d77e1ca4c8ff17
Author: Andrei Vagin <avagin@gmail.com>
Date:   Sun Nov 17 22:47:48 2019 -0800

    selftests/clone3: flush stdout and stderr before clone3() and _exit()
    
    Buffers have to be flushed before clone3() to avoid double messages in
    the log.
    
    Fixes: 41585bbeeef9 ("selftests: add tests for clone3() with *set_tid")
    Signed-off-by: Andrei Vagin <avagin@gmail.com>
    Link: https://lore.kernel.org/r/20191118064750.408003-1-avagin@gmail.com
    Signed-off-by: Christian Brauner <christian.brauner@ubuntu.com>

diff --git a/tools/testing/selftests/clone3/clone3_selftests.h b/tools/testing/selftests/clone3/clone3_selftests.h
index 1a270390766a..0e3dea58855f 100644
--- a/tools/testing/selftests/clone3/clone3_selftests.h
+++ b/tools/testing/selftests/clone3/clone3_selftests.h
@@ -29,6 +29,8 @@ struct clone_args {
 
 static pid_t sys_clone3(struct clone_args *args, size_t size)
 {
+	fflush(stdout);
+	fflush(stderr);
 	return syscall(__NR_clone3, args, size);
 }
 

commit 41585bbeeef9402d5d65687747e04246ef4a3a41
Author: Adrian Reber <areber@redhat.com>
Date:   Fri Nov 15 13:36:21 2019 +0100

    selftests: add tests for clone3() with *set_tid
    
    This tests clone3() with *set_tid to see if all desired PIDs are working
    as expected. The tests are trying multiple invalid input parameters as
    well as creating processes while specifying a certain PID in multiple
    PID namespaces at the same time.
    
    Additionally this moves common clone3() test code into clone3_selftests.h.
    
    Signed-off-by: Adrian Reber <areber@redhat.com>
    Acked-by: Christian Brauner <christian.brauner@ubuntu.com>
    Link: https://lore.kernel.org/r/20191115123621.142252-2-areber@redhat.com
    Signed-off-by: Christian Brauner <christian.brauner@ubuntu.com>

diff --git a/tools/testing/selftests/clone3/clone3_selftests.h b/tools/testing/selftests/clone3/clone3_selftests.h
new file mode 100644
index 000000000000..1a270390766a
--- /dev/null
+++ b/tools/testing/selftests/clone3/clone3_selftests.h
@@ -0,0 +1,35 @@
+/* SPDX-License-Identifier: GPL-2.0 */
+
+#ifndef _CLONE3_SELFTESTS_H
+#define _CLONE3_SELFTESTS_H
+
+#define _GNU_SOURCE
+#include <sched.h>
+#include <stdint.h>
+#include <syscall.h>
+#include <linux/types.h>
+
+#define ptr_to_u64(ptr) ((__u64)((uintptr_t)(ptr)))
+
+#ifndef __NR_clone3
+#define __NR_clone3 -1
+struct clone_args {
+	__aligned_u64 flags;
+	__aligned_u64 pidfd;
+	__aligned_u64 child_tid;
+	__aligned_u64 parent_tid;
+	__aligned_u64 exit_signal;
+	__aligned_u64 stack;
+	__aligned_u64 stack_size;
+	__aligned_u64 tls;
+	__aligned_u64 set_tid;
+	__aligned_u64 set_tid_size;
+};
+#endif
+
+static pid_t sys_clone3(struct clone_args *args, size_t size)
+{
+	return syscall(__NR_clone3, args, size);
+}
+
+#endif /* _CLONE3_SELFTESTS_H */
