commit 2a1f40adfb54ca65dc4c93bad444dd23b800a76e
Author: Mathieu Desnoyers <mathieu.desnoyers@efficios.com>
Date:   Fri Dec 20 15:33:18 2019 -0500

    rseq/selftests: Clarify rseq_prepare_unload() helper requirements
    
    The rseq.h UAPI now documents that the rseq_cs field must be cleared
    before reclaiming memory that contains the targeted struct rseq_cs, but
    also that the rseq_cs field must be cleared before reclaiming memory of
    the code pointed to by the rseq_cs start_ip and post_commit_offset
    fields.
    
    While we can expect that use of dlclose(3) will typically unmap
    both struct rseq_cs and its associated code at once, nothing would
    theoretically prevent a JIT from reclaiming the code without
    reclaiming the struct rseq_cs, which would erroneously allow the
    kernel to consider new code which is not a rseq critical section
    as a rseq critical section following a code reclaim.
    
    Suggested-by: Florian Weimer <fw@deneb.enyo.de>
    Signed-off-by: Mathieu Desnoyers <mathieu.desnoyers@efficios.com>
    Cc: Shuah Khan <skhan@linuxfoundation.org>
    Cc: Florian Weimer <fw@deneb.enyo.de>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: Peter Zijlstra (Intel) <peterz@infradead.org>
    Cc: "Paul E. McKenney" <paulmck@linux.ibm.com>
    Cc: Boqun Feng <boqun.feng@gmail.com>
    Cc: "H . Peter Anvin" <hpa@zytor.com>
    Cc: Paul Turner <pjt@google.com>
    Cc: Dmitry Vyukov <dvyukov@google.com>
    Signed-off-by: Shuah Khan <skhan@linuxfoundation.org>

diff --git a/tools/testing/selftests/rseq/rseq.h b/tools/testing/selftests/rseq/rseq.h
index d40d60e7499e..3f63eb362b92 100644
--- a/tools/testing/selftests/rseq/rseq.h
+++ b/tools/testing/selftests/rseq/rseq.h
@@ -149,11 +149,13 @@ static inline void rseq_clear_rseq_cs(void)
 /*
  * rseq_prepare_unload() should be invoked by each thread executing a rseq
  * critical section at least once between their last critical section and
- * library unload of the library defining the rseq critical section
- * (struct rseq_cs). This also applies to use of rseq in code generated by
- * JIT: rseq_prepare_unload() should be invoked at least once by each
- * thread executing a rseq critical section before reclaim of the memory
- * holding the struct rseq_cs.
+ * library unload of the library defining the rseq critical section (struct
+ * rseq_cs) or the code referred to by the struct rseq_cs start_ip and
+ * post_commit_offset fields. This also applies to use of rseq in code
+ * generated by JIT: rseq_prepare_unload() should be invoked at least once by
+ * each thread executing a rseq critical section before reclaim of the memory
+ * holding the struct rseq_cs or reclaim of the code pointed to by struct
+ * rseq_cs start_ip and post_commit_offset fields.
  */
 static inline void rseq_prepare_unload(void)
 {

commit 5b0c308a0565a94d2e1070cbf287197b676faaaf
Author: Mathieu Desnoyers <mathieu.desnoyers@efficios.com>
Date:   Mon Apr 29 11:27:55 2019 -0400

    rseq/selftests: Use __rseq_handled symbol to coexist with glibc
    
    In order to integrate rseq into user-space applications, expose a
    __rseq_handled symbol so many rseq users can be linked into the same
    application (e.g. librseq and glibc).
    
    The __rseq_refcount TLS variable is static to the librseq library. It
    ensures that rseq syscall registration/unregistration happens only for
    the most early/late caller to rseq_{,un}register_current_thread for each
    thread, thus ensuring that rseq is registered across the lifetime of all
    rseq users for a given thread.
    
    Signed-off-by: Mathieu Desnoyers <mathieu.desnoyers@efficios.com>
    CC: Shuah Khan <shuah@kernel.org>
    CC: Carlos O'Donell <carlos@redhat.com>
    CC: Florian Weimer <fweimer@redhat.com>
    CC: Joseph Myers <joseph@codesourcery.com>
    CC: Szabolcs Nagy <szabolcs.nagy@arm.com>
    CC: Thomas Gleixner <tglx@linutronix.de>
    CC: Ben Maurer <bmaurer@fb.com>
    CC: Peter Zijlstra <peterz@infradead.org>
    CC: "Paul E. McKenney" <paulmck@linux.vnet.ibm.com>
    CC: Boqun Feng <boqun.feng@gmail.com>
    CC: Will Deacon <will.deacon@arm.com>
    CC: Dave Watson <davejwatson@fb.com>
    CC: Paul Turner <pjt@google.com>
    CC: linux-api@vger.kernel.org
    Signed-off-by: Shuah Khan <skhan@linuxfoundation.org>

diff --git a/tools/testing/selftests/rseq/rseq.h b/tools/testing/selftests/rseq/rseq.h
index 6c1126e7f685..d40d60e7499e 100644
--- a/tools/testing/selftests/rseq/rseq.h
+++ b/tools/testing/selftests/rseq/rseq.h
@@ -44,6 +44,7 @@
 #endif
 
 extern __thread volatile struct rseq __rseq_abi;
+extern int __rseq_handled;
 
 #define rseq_likely(x)		__builtin_expect(!!(x), 1)
 #define rseq_unlikely(x)	__builtin_expect(!!(x), 0)

commit cde53520e2877f7f3a493e3a55d636baaf46903c
Author: Sabyasachi Gupta <sabyasachi.linux@gmail.com>
Date:   Wed Mar 6 21:46:51 2019 +0530

    selftest/rseq: Remove duplicate header
    
    Remove duplicate header which is included twice
    
    Signed-off-by: Sabyasachi Gupta <sabyasachi.linux@gmail.com>
    Signed-off-by: Souptick Joarder <jrdr.linux@gmail.com>
    Acked-by: Mathieu Desnoyers <mathieu.desnoyers@efficios.com>
    Signed-off-by: Shuah Khan <shuah@kernel.org>

diff --git a/tools/testing/selftests/rseq/rseq.h b/tools/testing/selftests/rseq/rseq.h
index c72eb70f9b52..6c1126e7f685 100644
--- a/tools/testing/selftests/rseq/rseq.h
+++ b/tools/testing/selftests/rseq/rseq.h
@@ -16,7 +16,6 @@
 #include <errno.h>
 #include <stdio.h>
 #include <stdlib.h>
-#include <sched.h>
 #include <linux/rseq.h>
 
 /*

commit 1202f4fdbcb6deeffd3eb39c94b8dc0cc8202b16
Merge: d0055f351e64 3c4d9137eefe
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Tue Aug 14 16:39:13 2018 -0700

    Merge tag 'arm64-upstream' of git://git.kernel.org/pub/scm/linux/kernel/git/arm64/linux
    
    Pull arm64 updates from Will Deacon:
     "A bunch of good stuff in here. Worth noting is that we've pulled in
      the x86/mm branch from -tip so that we can make use of the core
      ioremap changes which allow us to put down huge mappings in the
      vmalloc area without screwing up the TLB. Much of the positive
      diffstat is because of the rseq selftest for arm64.
    
      Summary:
    
       - Wire up support for qspinlock, replacing our trusty ticket lock
         code
    
       - Add an IPI to flush_icache_range() to ensure that stale
         instructions fetched into the pipeline are discarded along with the
         I-cache lines
    
       - Support for the GCC "stackleak" plugin
    
       - Support for restartable sequences, plus an arm64 port for the
         selftest
    
       - Kexec/kdump support on systems booting with ACPI
    
       - Rewrite of our syscall entry code in C, which allows us to zero the
         GPRs on entry from userspace
    
       - Support for chained PMU counters, allowing 64-bit event counters to
         be constructed on current CPUs
    
       - Ensure scheduler topology information is kept up-to-date with CPU
         hotplug events
    
       - Re-enable support for huge vmalloc/IO mappings now that the core
         code has the correct hooks to use break-before-make sequences
    
       - Miscellaneous, non-critical fixes and cleanups"
    
    * tag 'arm64-upstream' of git://git.kernel.org/pub/scm/linux/kernel/git/arm64/linux: (90 commits)
      arm64: alternative: Use true and false for boolean values
      arm64: kexec: Add comment to explain use of __flush_icache_range()
      arm64: sdei: Mark sdei stack helper functions as static
      arm64, kaslr: export offset in VMCOREINFO ELF notes
      arm64: perf: Add cap_user_time aarch64
      efi/libstub: Only disable stackleak plugin for arm64
      arm64: drop unused kernel_neon_begin_partial() macro
      arm64: kexec: machine_kexec should call __flush_icache_range
      arm64: svc: Ensure hardirq tracing is updated before return
      arm64: mm: Export __sync_icache_dcache() for xen-privcmd
      drivers/perf: arm-ccn: Use devm_ioremap_resource() to map memory
      arm64: Add support for STACKLEAK gcc plugin
      arm64: Add stack information to on_accessible_stack
      drivers/perf: hisi: update the sccl_id/ccl_id when MT is supported
      arm64: fix ACPI dependencies
      rseq/selftests: Add support for arm64
      arm64: acpi: fix alignment fault in accessing ACPI
      efi/arm: map UEFI memory map even w/o runtime services enabled
      efi/arm: preserve early mapping of UEFI memory map longer for BGRT
      drivers: acpi: add dependency of EFI for arm64
      ...

commit 85a0b791bc17f7a49280b33e2905d109c062a47b
Merge: 13e091b6dd0e 669f3765b755
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Mon Aug 13 19:07:17 2018 -0700

    Merge branch 'for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/s390/linux
    
    Pull s390 updates from Heiko Carstens:
     "Since Martin is on vacation you get the s390 pull request from me:
    
       - Host large page support for KVM guests. As the patches have large
         impact on arch/s390/mm/ this series goes out via both the KVM and
         the s390 tree.
    
       - Add an option for no compression to the "Kernel compression mode"
         menu, this will come in handy with the rework of the early boot
         code.
    
       - A large rework of the early boot code that will make life easier
         for KASAN and KASLR. With the rework the bootable uncompressed
         image is not generated anymore, only the bzImage is available. For
         debuggung purposes the new "no compression" option is used.
    
       - Re-enable the gcc plugins as the issue with the latent entropy
         plugin is solved with the early boot code rework.
    
       - More spectre relates changes:
          + Detect the etoken facility and remove expolines automatically.
          + Add expolines to a few more indirect branches.
    
       - A rewrite of the common I/O layer trace points to make them
         consumable by 'perf stat'.
    
       - Add support for format-3 PCI function measurement blocks.
    
       - Changes for the zcrypt driver:
          + Add attributes to indicate the load of cards and queues.
          + Restructure some code for the upcoming AP device support in KVM.
    
       - Build flags improvements in various Makefiles.
    
       - A few fixes for the kdump support.
    
       - A couple of patches for gcc 8 compile warning cleanup.
    
       - Cleanup s390 specific proc handlers.
    
       - Add s390 support to the restartable sequence self tests.
    
       - Some PTR_RET vs PTR_ERR_OR_ZERO cleanup.
    
       - Lots of bug fixes"
    
    * 'for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/s390/linux: (107 commits)
      s390/dasd: fix hanging offline processing due to canceled worker
      s390/dasd: fix panic for failed online processing
      s390/mm: fix addressing exception after suspend/resume
      rseq/selftests: add s390 support
      s390: fix br_r1_trampoline for machines without exrl
      s390/lib: use expoline for all bcr instructions
      s390/numa: move initial setup of node_to_cpumask_map
      s390/kdump: Fix elfcorehdr size calculation
      s390/cpum_sf: save TOD clock base in SDBs for time conversion
      KVM: s390: Add huge page enablement control
      s390/mm: Add huge page gmap linking support
      s390/mm: hugetlb pages within a gmap can not be freed
      KVM: s390: Add skey emulation fault handling
      s390/mm: Add huge pmd storage key handling
      s390/mm: Clear skeys for newly mapped huge guest pmds
      s390/mm: Clear huge page storage keys on enable_skey
      s390/mm: Add huge page dirty sync support
      s390/mm: Add gmap pmd invalidation and clearing
      s390/mm: Add gmap pmd notification bit setting
      s390/mm: Add gmap pmd linking
      ...

commit 4c14d1ce17bcc4c0c0f291ee162f9de73c4ee2eb
Author: Vasily Gorbik <gor@linux.ibm.com>
Date:   Mon Jul 9 17:07:48 2018 +0200

    rseq/selftests: add s390 support
    
    Implement support for s390 in the rseq selftests, in order to sanity
    check the recently enabled rseq syscall. The Implementation covers both
    64-bit and 31-bit mode.
    
    Acked-by: Heiko Carstens <heiko.carstens@de.ibm.com>
    Signed-off-by: Vasily Gorbik <gor@linux.ibm.com>
    Signed-off-by: Martin Schwidefsky <schwidefsky@de.ibm.com>

diff --git a/tools/testing/selftests/rseq/rseq.h b/tools/testing/selftests/rseq/rseq.h
index a4684112676c..5d1ee38a64a3 100644
--- a/tools/testing/selftests/rseq/rseq.h
+++ b/tools/testing/selftests/rseq/rseq.h
@@ -75,6 +75,8 @@ extern __thread volatile struct rseq __rseq_abi;
 #include <rseq-ppc.h>
 #elif defined(__mips__)
 #include <rseq-mips.h>
+#elif defined(__s390__)
+#include <rseq-s390.h>
 #else
 #error unsupported target
 #endif

commit b965746306bcb058a6876d3a61b502d3dbb9fe91
Author: Will Deacon <will.deacon@arm.com>
Date:   Wed Jun 20 17:17:47 2018 +0100

    rseq/selftests: Add support for arm64
    
    Hook up arm64 support to the rseq selftests.
    
    Acked-by: Mathieu Desnoyers <mathieu.desnoyers@efficios.com>
    Signed-off-by: Will Deacon <will.deacon@arm.com>

diff --git a/tools/testing/selftests/rseq/rseq.h b/tools/testing/selftests/rseq/rseq.h
index a4684112676c..b5d94087fe31 100644
--- a/tools/testing/selftests/rseq/rseq.h
+++ b/tools/testing/selftests/rseq/rseq.h
@@ -71,6 +71,8 @@ extern __thread volatile struct rseq __rseq_abi;
 #include <rseq-x86.h>
 #elif defined(__ARMEL__)
 #include <rseq-arm.h>
+#elif defined (__AARCH64EL__)
+#include <rseq-arm64.h>
 #elif defined(__PPC__)
 #include <rseq-ppc.h>
 #elif defined(__mips__)

commit 8a46580128a02bdc18d7dcc0cba19d3cea4fb9c4
Author: Mathieu Desnoyers <mathieu.desnoyers@efficios.com>
Date:   Mon Jul 9 15:51:55 2018 -0400

    rseq/selftests: cleanup: Update comment above rseq_prepare_unload
    
    rseq as it was merged does not have rseq_finish_*() in the user-space
    selftests anymore. Update the rseq_prepare_unload() helper comment to
    adapt to this reality.
    
    Signed-off-by: Mathieu Desnoyers <mathieu.desnoyers@efficios.com>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Cc: linux-api@vger.kernel.org
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: "Paul E . McKenney" <paulmck@linux.vnet.ibm.com>
    Cc: Boqun Feng <boqun.feng@gmail.com>
    Cc: Andy Lutomirski <luto@amacapital.net>
    Cc: Dave Watson <davejwatson@fb.com>
    Cc: Paul Turner <pjt@google.com>
    Cc: Andrew Morton <akpm@linux-foundation.org>
    Cc: Russell King <linux@arm.linux.org.uk>
    Cc: "H . Peter Anvin" <hpa@zytor.com>
    Cc: Andi Kleen <andi@firstfloor.org>
    Cc: Chris Lameter <cl@linux.com>
    Cc: Ben Maurer <bmaurer@fb.com>
    Cc: Steven Rostedt <rostedt@goodmis.org>
    Cc: Josh Triplett <josh@joshtriplett.org>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Catalin Marinas <catalin.marinas@arm.com>
    Cc: Will Deacon <will.deacon@arm.com>
    Cc: Michael Kerrisk <mtk.manpages@gmail.com>
    Cc: Joel Fernandes <joelaf@google.com>
    Cc: "Paul E. McKenney" <paulmck@linux.vnet.ibm.com>
    Cc: "H. Peter Anvin" <hpa@zytor.com>
    Link: https://lkml.kernel.org/r/20180709195155.7654-7-mathieu.desnoyers@efficios.com

diff --git a/tools/testing/selftests/rseq/rseq.h b/tools/testing/selftests/rseq/rseq.h
index f2073cfa4448..86ce22417e0d 100644
--- a/tools/testing/selftests/rseq/rseq.h
+++ b/tools/testing/selftests/rseq/rseq.h
@@ -143,12 +143,13 @@ static inline void rseq_clear_rseq_cs(void)
 }
 
 /*
- * rseq_prepare_unload() should be invoked by each thread using rseq_finish*()
- * at least once between their last rseq_finish*() and library unload of the
- * library defining the rseq critical section (struct rseq_cs). This also
- * applies to use of rseq in code generated by JIT: rseq_prepare_unload()
- * should be invoked at least once by each thread using rseq_finish*() before
- * reclaim of the memory holding the struct rseq_cs.
+ * rseq_prepare_unload() should be invoked by each thread executing a rseq
+ * critical section at least once between their last critical section and
+ * library unload of the library defining the rseq critical section
+ * (struct rseq_cs). This also applies to use of rseq in code generated by
+ * JIT: rseq_prepare_unload() should be invoked at least once by each
+ * thread executing a rseq critical section before reclaim of the memory
+ * holding the struct rseq_cs.
  */
 static inline void rseq_prepare_unload(void)
 {

commit ec9c82e03a744e5698bd95eab872855861a821fa
Author: Mathieu Desnoyers <mathieu.desnoyers@efficios.com>
Date:   Mon Jul 9 15:51:53 2018 -0400

    rseq: uapi: Declare rseq_cs field as union, update includes
    
    Declaring the rseq_cs field as a union between __u64 and two __u32
    allows both 32-bit and 64-bit kernels to read the full __u64, and
    therefore validate that a 32-bit user-space cleared the upper 32
    bits, thus ensuring a consistent behavior between native 32-bit
    kernels and 32-bit compat tasks on 64-bit kernels.
    
    Check that the rseq_cs value read is < TASK_SIZE.
    
    The asm/byteorder.h header needs to be included by rseq.h, now
    that it is not using linux/types_32_64.h anymore.
    
    Considering that only __32 and __u64 types are declared in linux/rseq.h,
    the linux/types.h header should always be included for both kernel and
    user-space code: including stdint.h is just for u64 and u32, which are
    not used in this header at all.
    
    Use copy_from_user()/clear_user() to interact with a 64-bit field,
    because arm32 does not implement 64-bit __get_user, and ppc32 does not
    64-bit get_user. Considering that the rseq_cs pointer does not need to
    be loaded/stored with single-copy atomicity from the kernel anymore, we
    can simply use copy_from_user()/clear_user().
    
    Signed-off-by: Mathieu Desnoyers <mathieu.desnoyers@efficios.com>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Cc: linux-api@vger.kernel.org
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: "Paul E . McKenney" <paulmck@linux.vnet.ibm.com>
    Cc: Boqun Feng <boqun.feng@gmail.com>
    Cc: Andy Lutomirski <luto@amacapital.net>
    Cc: Dave Watson <davejwatson@fb.com>
    Cc: Paul Turner <pjt@google.com>
    Cc: Andrew Morton <akpm@linux-foundation.org>
    Cc: Russell King <linux@arm.linux.org.uk>
    Cc: "H . Peter Anvin" <hpa@zytor.com>
    Cc: Andi Kleen <andi@firstfloor.org>
    Cc: Chris Lameter <cl@linux.com>
    Cc: Ben Maurer <bmaurer@fb.com>
    Cc: Steven Rostedt <rostedt@goodmis.org>
    Cc: Josh Triplett <josh@joshtriplett.org>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Catalin Marinas <catalin.marinas@arm.com>
    Cc: Will Deacon <will.deacon@arm.com>
    Cc: Michael Kerrisk <mtk.manpages@gmail.com>
    Cc: Joel Fernandes <joelaf@google.com>
    Cc: "Paul E. McKenney" <paulmck@linux.vnet.ibm.com>
    Cc: "H. Peter Anvin" <hpa@zytor.com>
    Link: https://lkml.kernel.org/r/20180709195155.7654-5-mathieu.desnoyers@efficios.com

diff --git a/tools/testing/selftests/rseq/rseq.h b/tools/testing/selftests/rseq/rseq.h
index a4684112676c..f2073cfa4448 100644
--- a/tools/testing/selftests/rseq/rseq.h
+++ b/tools/testing/selftests/rseq/rseq.h
@@ -133,6 +133,15 @@ static inline uint32_t rseq_current_cpu(void)
 	return cpu;
 }
 
+static inline void rseq_clear_rseq_cs(void)
+{
+#ifdef __LP64__
+	__rseq_abi.rseq_cs.ptr = 0;
+#else
+	__rseq_abi.rseq_cs.ptr.ptr32 = 0;
+#endif
+}
+
 /*
  * rseq_prepare_unload() should be invoked by each thread using rseq_finish*()
  * at least once between their last rseq_finish*() and library unload of the
@@ -143,7 +152,7 @@ static inline uint32_t rseq_current_cpu(void)
  */
 static inline void rseq_prepare_unload(void)
 {
-	__rseq_abi.rseq_cs = 0;
+	rseq_clear_rseq_cs();
 }
 
 #endif  /* RSEQ_H_ */

commit 744f4be542d705a39dac9810350e96f37474eda3
Author: Paul Burton <paul.burton@mips.com>
Date:   Thu Jun 14 11:06:22 2018 -0700

    rseq/selftests: Implement MIPS support
    
    Implement support for both MIPS32 & MIPS64 in the rseq selftests, in
    order to sanity check the recently enabled rseq syscall.
    
    The tests all pass on a MIPS Boston development board running either a
    MIPS32r2 interAptiv CPU & a MIPS64r6 I6500 CPU, both of which were
    configured with 2 cores each of which have 2 hardware threads (VP(E)s) -
    ie. 4 CPUs.
    
    Signed-off-by: Paul Burton <paul.burton@mips.com>
    Reviewed-by: James Hogan <jhogan@kernel.org>
    Patchwork: https://patchwork.linux-mips.org/patch/19524/
    Cc: Ralf Baechle <ralf@linux-mips.org>
    Cc: Mathieu Desnoyers <mathieu.desnoyers@efficios.com>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Paul E. McKenney <paulmck@linux.vnet.ibm.com>
    Cc: Boqun Feng <boqun.feng@gmail.com>
    Cc: linux-mips@linux-mips.org
    Cc: linux-kernel@vger.kernel.org

diff --git a/tools/testing/selftests/rseq/rseq.h b/tools/testing/selftests/rseq/rseq.h
index 0a808575cbc4..a4684112676c 100644
--- a/tools/testing/selftests/rseq/rseq.h
+++ b/tools/testing/selftests/rseq/rseq.h
@@ -73,6 +73,8 @@ extern __thread volatile struct rseq __rseq_abi;
 #include <rseq-arm.h>
 #elif defined(__PPC__)
 #include <rseq-ppc.h>
+#elif defined(__mips__)
+#include <rseq-mips.h>
 #else
 #error unsupported target
 #endif

commit 2e155fb7d605d37c423ad0076f82feca572efdce
Author: Mathieu Desnoyers <mathieu.desnoyers@efficios.com>
Date:   Sat Jun 2 08:44:04 2018 -0400

    rseq/selftests: Provide rseq library
    
    This rseq helper library provides a user-space API to the rseq()
    system call.
    
    The rseq fast-path exposes the instruction pointer addresses where the
    rseq assembly blocks begin and end, as well as the associated abort
    instruction pointer, in the __rseq_table section. This section allows
    debuggers may know where to place breakpoints when single-stepping
    through assembly blocks which may be aborted at any point by the kernel.
    
    Signed-off-by: Mathieu Desnoyers <mathieu.desnoyers@efficios.com>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Cc: Joel Fernandes <joelaf@google.com>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Catalin Marinas <catalin.marinas@arm.com>
    Cc: Dave Watson <davejwatson@fb.com>
    Cc: Will Deacon <will.deacon@arm.com>
    Cc: Shuah Khan <shuahkh@osg.samsung.com>
    Cc: Andi Kleen <andi@firstfloor.org>
    Cc: linux-kselftest@vger.kernel.org
    Cc: "H . Peter Anvin" <hpa@zytor.com>
    Cc: Chris Lameter <cl@linux.com>
    Cc: Russell King <linux@arm.linux.org.uk>
    Cc: Andrew Hunter <ahh@google.com>
    Cc: Michael Kerrisk <mtk.manpages@gmail.com>
    Cc: "Paul E . McKenney" <paulmck@linux.vnet.ibm.com>
    Cc: Paul Turner <pjt@google.com>
    Cc: Boqun Feng <boqun.feng@gmail.com>
    Cc: Josh Triplett <josh@joshtriplett.org>
    Cc: Steven Rostedt <rostedt@goodmis.org>
    Cc: Ben Maurer <bmaurer@fb.com>
    Cc: linux-api@vger.kernel.org
    Cc: Andy Lutomirski <luto@amacapital.net>
    Cc: Andrew Morton <akpm@linux-foundation.org>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Link: https://lkml.kernel.org/r/20180602124408.8430-13-mathieu.desnoyers@efficios.com

diff --git a/tools/testing/selftests/rseq/rseq.h b/tools/testing/selftests/rseq/rseq.h
new file mode 100644
index 000000000000..0a808575cbc4
--- /dev/null
+++ b/tools/testing/selftests/rseq/rseq.h
@@ -0,0 +1,147 @@
+/* SPDX-License-Identifier: LGPL-2.1 OR MIT */
+/*
+ * rseq.h
+ *
+ * (C) Copyright 2016-2018 - Mathieu Desnoyers <mathieu.desnoyers@efficios.com>
+ */
+
+#ifndef RSEQ_H
+#define RSEQ_H
+
+#include <stdint.h>
+#include <stdbool.h>
+#include <pthread.h>
+#include <signal.h>
+#include <sched.h>
+#include <errno.h>
+#include <stdio.h>
+#include <stdlib.h>
+#include <sched.h>
+#include <linux/rseq.h>
+
+/*
+ * Empty code injection macros, override when testing.
+ * It is important to consider that the ASM injection macros need to be
+ * fully reentrant (e.g. do not modify the stack).
+ */
+#ifndef RSEQ_INJECT_ASM
+#define RSEQ_INJECT_ASM(n)
+#endif
+
+#ifndef RSEQ_INJECT_C
+#define RSEQ_INJECT_C(n)
+#endif
+
+#ifndef RSEQ_INJECT_INPUT
+#define RSEQ_INJECT_INPUT
+#endif
+
+#ifndef RSEQ_INJECT_CLOBBER
+#define RSEQ_INJECT_CLOBBER
+#endif
+
+#ifndef RSEQ_INJECT_FAILED
+#define RSEQ_INJECT_FAILED
+#endif
+
+extern __thread volatile struct rseq __rseq_abi;
+
+#define rseq_likely(x)		__builtin_expect(!!(x), 1)
+#define rseq_unlikely(x)	__builtin_expect(!!(x), 0)
+#define rseq_barrier()		__asm__ __volatile__("" : : : "memory")
+
+#define RSEQ_ACCESS_ONCE(x)	(*(__volatile__  __typeof__(x) *)&(x))
+#define RSEQ_WRITE_ONCE(x, v)	__extension__ ({ RSEQ_ACCESS_ONCE(x) = (v); })
+#define RSEQ_READ_ONCE(x)	RSEQ_ACCESS_ONCE(x)
+
+#define __rseq_str_1(x)	#x
+#define __rseq_str(x)		__rseq_str_1(x)
+
+#define rseq_log(fmt, args...)						       \
+	fprintf(stderr, fmt "(in %s() at " __FILE__ ":" __rseq_str(__LINE__)"\n", \
+		## args, __func__)
+
+#define rseq_bug(fmt, args...)		\
+	do {				\
+		rseq_log(fmt, ##args);	\
+		abort();		\
+	} while (0)
+
+#if defined(__x86_64__) || defined(__i386__)
+#include <rseq-x86.h>
+#elif defined(__ARMEL__)
+#include <rseq-arm.h>
+#elif defined(__PPC__)
+#include <rseq-ppc.h>
+#else
+#error unsupported target
+#endif
+
+/*
+ * Register rseq for the current thread. This needs to be called once
+ * by any thread which uses restartable sequences, before they start
+ * using restartable sequences, to ensure restartable sequences
+ * succeed. A restartable sequence executed from a non-registered
+ * thread will always fail.
+ */
+int rseq_register_current_thread(void);
+
+/*
+ * Unregister rseq for current thread.
+ */
+int rseq_unregister_current_thread(void);
+
+/*
+ * Restartable sequence fallback for reading the current CPU number.
+ */
+int32_t rseq_fallback_current_cpu(void);
+
+/*
+ * Values returned can be either the current CPU number, -1 (rseq is
+ * uninitialized), or -2 (rseq initialization has failed).
+ */
+static inline int32_t rseq_current_cpu_raw(void)
+{
+	return RSEQ_ACCESS_ONCE(__rseq_abi.cpu_id);
+}
+
+/*
+ * Returns a possible CPU number, which is typically the current CPU.
+ * The returned CPU number can be used to prepare for an rseq critical
+ * section, which will confirm whether the cpu number is indeed the
+ * current one, and whether rseq is initialized.
+ *
+ * The CPU number returned by rseq_cpu_start should always be validated
+ * by passing it to a rseq asm sequence, or by comparing it to the
+ * return value of rseq_current_cpu_raw() if the rseq asm sequence
+ * does not need to be invoked.
+ */
+static inline uint32_t rseq_cpu_start(void)
+{
+	return RSEQ_ACCESS_ONCE(__rseq_abi.cpu_id_start);
+}
+
+static inline uint32_t rseq_current_cpu(void)
+{
+	int32_t cpu;
+
+	cpu = rseq_current_cpu_raw();
+	if (rseq_unlikely(cpu < 0))
+		cpu = rseq_fallback_current_cpu();
+	return cpu;
+}
+
+/*
+ * rseq_prepare_unload() should be invoked by each thread using rseq_finish*()
+ * at least once between their last rseq_finish*() and library unload of the
+ * library defining the rseq critical section (struct rseq_cs). This also
+ * applies to use of rseq in code generated by JIT: rseq_prepare_unload()
+ * should be invoked at least once by each thread using rseq_finish*() before
+ * reclaim of the memory holding the struct rseq_cs.
+ */
+static inline void rseq_prepare_unload(void)
+{
+	__rseq_abi.rseq_cs = 0;
+}
+
+#endif  /* RSEQ_H_ */
