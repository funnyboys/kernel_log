commit ef8c84effce3c7a0b8196fcda8f430c815ab511c
Author: Stanislav Fomichev <sdf@google.com>
Date:   Wed Dec 4 11:09:55 2019 -0800

    selftests/bpf: De-flake test_tcpbpf
    
    It looks like BPF program that handles BPF_SOCK_OPS_STATE_CB state
    can race with the bpf_map_lookup_elem("global_map"); I sometimes
    see the failures in this test and re-running helps.
    
    Since we know that we expect the callback to be called 3 times (one
    time for listener socket, two times for both ends of the connection),
    let's export this number and add simple retry logic around that.
    
    Also, let's make EXPECT_EQ() not return on failure, but continue
    evaluating all conditions; that should make potential debugging
    easier.
    
    With this fix in place I don't observe the flakiness anymore.
    
    Signed-off-by: Stanislav Fomichev <sdf@google.com>
    Signed-off-by: Alexei Starovoitov <ast@kernel.org>
    Cc: Lawrence Brakmo <brakmo@fb.com>
    Link: https://lore.kernel.org/bpf/20191204190955.170934-1-sdf@google.com

diff --git a/tools/testing/selftests/bpf/test_tcpbpf.h b/tools/testing/selftests/bpf/test_tcpbpf.h
index 7bcfa6207005..6220b95cbd02 100644
--- a/tools/testing/selftests/bpf/test_tcpbpf.h
+++ b/tools/testing/selftests/bpf/test_tcpbpf.h
@@ -13,5 +13,6 @@ struct tcpbpf_globals {
 	__u64 bytes_received;
 	__u64 bytes_acked;
 	__u32 num_listen;
+	__u32 num_close_events;
 };
 #endif

commit 78d8e26d46bc2ed73ab6a0e369a342478fda4ce0
Author: Andrey Ignatov <rdna@fb.com>
Date:   Wed Jul 11 17:33:37 2018 -0700

    selftests/bpf: Test case for BPF_SOCK_OPS_TCP_LISTEN_CB
    
    Cover new TCP-BPF callback in test_tcpbpf: when listen() is called on
    socket, set BPF_SOCK_OPS_STATE_CB_FLAG so that BPF_SOCK_OPS_STATE_CB
    callback can be called on future state transition, and when such a
    transition happens (TCP_LISTEN -> TCP_CLOSE), track it in the map and
    verify it in user space later.
    
    Signed-off-by: Andrey Ignatov <rdna@fb.com>
    Acked-by: Alexei Starovoitov <ast@kernel.org>
    Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>

diff --git a/tools/testing/selftests/bpf/test_tcpbpf.h b/tools/testing/selftests/bpf/test_tcpbpf.h
index 2fe43289943c..7bcfa6207005 100644
--- a/tools/testing/selftests/bpf/test_tcpbpf.h
+++ b/tools/testing/selftests/bpf/test_tcpbpf.h
@@ -12,5 +12,6 @@ struct tcpbpf_globals {
 	__u32 good_cb_test_rv;
 	__u64 bytes_received;
 	__u64 bytes_acked;
+	__u32 num_listen;
 };
 #endif

commit d6d4f60c3a0933852dcc40a2142d93027ea1da76
Author: Lawrence Brakmo <brakmo@fb.com>
Date:   Thu Jan 25 16:14:16 2018 -0800

    bpf: add selftest for tcpbpf
    
    Added a selftest for tcpbpf (sock_ops) that checks that the appropriate
    callbacks occured and that it can access tcp_sock fields and that their
    values are correct.
    
    Run with command: ./test_tcpbpf_user
    Adding the flag "-d" will show why it did not pass.
    
    Signed-off-by: Lawrence Brakmo <brakmo@fb.com>
    Acked-by: Alexei Starovoitov <ast@kernel.org>
    Signed-off-by: Alexei Starovoitov <ast@kernel.org>

diff --git a/tools/testing/selftests/bpf/test_tcpbpf.h b/tools/testing/selftests/bpf/test_tcpbpf.h
new file mode 100644
index 000000000000..2fe43289943c
--- /dev/null
+++ b/tools/testing/selftests/bpf/test_tcpbpf.h
@@ -0,0 +1,16 @@
+// SPDX-License-Identifier: GPL-2.0
+
+#ifndef _TEST_TCPBPF_H
+#define _TEST_TCPBPF_H
+
+struct tcpbpf_globals {
+	__u32 event_map;
+	__u32 total_retrans;
+	__u32 data_segs_in;
+	__u32 data_segs_out;
+	__u32 bad_cb_test_rv;
+	__u32 good_cb_test_rv;
+	__u64 bytes_received;
+	__u64 bytes_acked;
+};
+#endif
