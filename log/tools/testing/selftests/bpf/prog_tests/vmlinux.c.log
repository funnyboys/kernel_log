commit 41078907eef0dd508d0999996d10683ae114c21a
Author: Andrii Nakryiko <andriin@fb.com>
Date:   Fri Mar 13 17:27:43 2020 -0700

    selftests/bpf: Fix nanosleep for real this time
    
    Amazingly, some libc implementations don't call __NR_nanosleep syscall from
    their nanosleep() APIs. Hammer it down with explicit syscall() call and never
    get back to it again. Also simplify code for timespec initialization.
    
    I verified that nanosleep is called w/ printk and in exactly same Linux image
    that is used in Travis CI. So it should both sleep and call correct syscall.
    
    v1->v2:
      - math is too hard, fix usec -> nsec convertion (Martin);
      - test_vmlinux has explicit nanosleep() call, convert that one as well.
    
    Fixes: 4e1fd25d19e8 ("selftests/bpf: Fix usleep() implementation")
    Signed-off-by: Andrii Nakryiko <andriin@fb.com>
    Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
    Acked-by: Martin KaFai Lau <kafai@fb.com>
    Link: https://lore.kernel.org/bpf/20200314002743.3782677-1-andriin@fb.com

diff --git a/tools/testing/selftests/bpf/prog_tests/vmlinux.c b/tools/testing/selftests/bpf/prog_tests/vmlinux.c
index 04939eda1325..72310cfc6474 100644
--- a/tools/testing/selftests/bpf/prog_tests/vmlinux.c
+++ b/tools/testing/selftests/bpf/prog_tests/vmlinux.c
@@ -11,7 +11,7 @@ static void nsleep()
 {
 	struct timespec ts = { .tv_nsec = MY_TV_NSEC };
 
-	(void)nanosleep(&ts, NULL);
+	(void)syscall(__NR_nanosleep, &ts, NULL);
 }
 
 void test_vmlinux(void)

commit acbd06206bbbe59ffd2415c0b902dd244910e42e
Author: Andrii Nakryiko <andriin@fb.com>
Date:   Fri Mar 13 10:23:36 2020 -0700

    selftests/bpf: Add vmlinux.h selftest exercising tracing of syscalls
    
    Add vmlinux.h generation to selftest/bpf's Makefile. Use it from newly added
    test_vmlinux to trace nanosleep syscall using 5 different types of programs:
      - tracepoint;
      - raw tracepoint;
      - raw tracepoint w/ direct memory reads (tp_btf);
      - kprobe;
      - fentry.
    
    These programs are realistic variants of real-life tracing programs,
    excercising vmlinux.h's usage with tracing applications.
    
    Signed-off-by: Andrii Nakryiko <andriin@fb.com>
    Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
    Acked-by: Martin KaFai Lau <kafai@fb.com>
    Link: https://lore.kernel.org/bpf/20200313172336.1879637-5-andriin@fb.com

diff --git a/tools/testing/selftests/bpf/prog_tests/vmlinux.c b/tools/testing/selftests/bpf/prog_tests/vmlinux.c
new file mode 100644
index 000000000000..04939eda1325
--- /dev/null
+++ b/tools/testing/selftests/bpf/prog_tests/vmlinux.c
@@ -0,0 +1,43 @@
+// SPDX-License-Identifier: GPL-2.0
+/* Copyright (c) 2020 Facebook */
+
+#include <test_progs.h>
+#include <time.h>
+#include "test_vmlinux.skel.h"
+
+#define MY_TV_NSEC 1337
+
+static void nsleep()
+{
+	struct timespec ts = { .tv_nsec = MY_TV_NSEC };
+
+	(void)nanosleep(&ts, NULL);
+}
+
+void test_vmlinux(void)
+{
+	int duration = 0, err;
+	struct test_vmlinux* skel;
+	struct test_vmlinux__bss *bss;
+
+	skel = test_vmlinux__open_and_load();
+	if (CHECK(!skel, "skel_open", "failed to open skeleton\n"))
+		return;
+	bss = skel->bss;
+
+	err = test_vmlinux__attach(skel);
+	if (CHECK(err, "skel_attach", "skeleton attach failed: %d\n", err))
+		goto cleanup;
+
+	/* trigger everything */
+	nsleep();
+
+	CHECK(!bss->tp_called, "tp", "not called\n");
+	CHECK(!bss->raw_tp_called, "raw_tp", "not called\n");
+	CHECK(!bss->tp_btf_called, "tp_btf", "not called\n");
+	CHECK(!bss->kprobe_called, "kprobe", "not called\n");
+	CHECK(!bss->fentry_called, "fentry", "not called\n");
+
+cleanup:
+	test_vmlinux__destroy(skel);
+}
