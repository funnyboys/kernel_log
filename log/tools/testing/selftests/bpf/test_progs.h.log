commit cd49291ce18aeef3f2ec950bc99bd72d5a05fa86
Author: Andrii Nakryiko <andriin@fb.com>
Date:   Tue May 12 12:24:42 2020 -0700

    selftests/bpf: Extract parse_num_list into generic testing_helpers.c
    
    Add testing_helpers.c, which will contain generic helpers for test runners and
    tests needing some common generic functionality, like parsing a set of
    numbers.
    
    Signed-off-by: Andrii Nakryiko <andriin@fb.com>
    Signed-off-by: Alexei Starovoitov <ast@kernel.org>
    Acked-by: Yonghong Song <yhs@fb.com>
    Link: https://lore.kernel.org/bpf/20200512192445.2351848-2-andriin@fb.com

diff --git a/tools/testing/selftests/bpf/test_progs.h b/tools/testing/selftests/bpf/test_progs.h
index 83287c76332b..f4503c926aca 100644
--- a/tools/testing/selftests/bpf/test_progs.h
+++ b/tools/testing/selftests/bpf/test_progs.h
@@ -37,6 +37,7 @@ typedef __u16 __sum16;
 #include "bpf_util.h"
 #include <bpf/bpf_endian.h>
 #include "trace_helpers.h"
+#include "testing_helpers.h"
 #include "flow_dissector_load.h"
 
 enum verbosity {

commit 488a23b89d175cc78f352417114f4f5a10470722
Author: Stanislav Fomichev <sdf@google.com>
Date:   Fri May 8 10:46:09 2020 -0700

    selftests/bpf: Move existing common networking parts into network_helpers
    
    1. Move pkt_v4 and pkt_v6 into network_helpers and adjust the users.
    2. Copy-paste spin_lock_thread into two tests that use it.
    
    Signed-off-by: Stanislav Fomichev <sdf@google.com>
    Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
    Acked-by: Martin KaFai Lau <kafai@fb.com>
    Acked-by: Andrey Ignatov <rdna@fb.com>
    Link: https://lore.kernel.org/bpf/20200508174611.228805-3-sdf@google.com

diff --git a/tools/testing/selftests/bpf/test_progs.h b/tools/testing/selftests/bpf/test_progs.h
index 10188cc8e9e0..83287c76332b 100644
--- a/tools/testing/selftests/bpf/test_progs.h
+++ b/tools/testing/selftests/bpf/test_progs.h
@@ -87,24 +87,6 @@ extern void test__skip(void);
 extern void test__fail(void);
 extern int test__join_cgroup(const char *path);
 
-#define MAGIC_BYTES 123
-
-/* ipv4 test vector */
-struct ipv4_packet {
-	struct ethhdr eth;
-	struct iphdr iph;
-	struct tcphdr tcp;
-} __packed;
-extern struct ipv4_packet pkt_v4;
-
-/* ipv6 test vector */
-struct ipv6_packet {
-	struct ethhdr eth;
-	struct ipv6hdr iph;
-	struct tcphdr tcp;
-} __packed;
-extern struct ipv6_packet pkt_v6;
-
 #define PRINT_FAIL(format...)                                                  \
 	({                                                                     \
 		test__fail();                                                  \
@@ -143,10 +125,6 @@ extern struct ipv6_packet pkt_v6;
 #define CHECK_ATTR(condition, tag, format...) \
 	_CHECK(condition, tag, tattr.duration, format)
 
-#define MAGIC_VAL 0x1234
-#define NUM_ITER 100000
-#define VIP_NUM 5
-
 static inline __u64 ptr_to_u64(const void *ptr)
 {
 	return (__u64) (unsigned long) ptr;
@@ -156,7 +134,6 @@ int bpf_find_map(const char *test, struct bpf_object *obj, const char *name);
 int compare_map_keys(int map1_fd, int map2_fd);
 int compare_stack_ips(int smap_fd, int amap_fd, int stack_trace_len);
 int extract_build_id(char *build_id, size_t size);
-void *spin_lock_thread(void *arg);
 
 #ifdef __x86_64__
 #define SYS_NANOSLEEP_KPROBE_NAME "__x64_sys_nanosleep"

commit 234589012ba0e5bf448e3fdbbac0f4c265dbdd7b
Author: Lorenz Bauer <lmb@cloudflare.com>
Date:   Fri Apr 24 19:55:55 2020 +0100

    selftests/bpf: Add cls_redirect classifier
    
    cls_redirect is a TC clsact based replacement for the glb-redirect iptables
    module available at [1]. It enables what GitHub calls "second chance"
    flows [2], similarly proposed by the Beamer paper [3]. In contrast to
    glb-redirect, it also supports migrating UDP flows as long as connected
    sockets are used. cls_redirect is in production at Cloudflare, as part of
    our own L4 load balancer.
    
    We have modified the encapsulation format slightly from glb-redirect:
    glbgue_chained_routing.private_data_type has been repurposed to form a
    version field and several flags. Both have been arranged in a way that
    a private_data_type value of zero matches the current glb-redirect
    behaviour. This means that cls_redirect will understand packets in
    glb-redirect format, but not vice versa.
    
    The test suite only covers basic features. For example, cls_redirect will
    correctly forward path MTU discovery packets, but this is not exercised.
    It is also possible to switch the encapsulation format to GRE on the last
    hop, which is also not tested.
    
    There are two major distinctions from glb-redirect: first, cls_redirect
    relies on receiving encapsulated packets directly from a router. This is
    because we don't have access to the neighbour tables from BPF, yet. See
    forward_to_next_hop for details. Second, cls_redirect performs decapsulation
    instead of using separate ipip and sit tunnel devices. This
    avoids issues with the sit tunnel [4] and makes deploying the classifier
    easier: decapsulated packets appear on the same interface, so existing
    firewall rules continue to work as expected.
    
    The code base started it's life on v4.19, so there are most likely still
    hold overs from old workarounds. In no particular order:
    
    - The function buf_off is required to defeat a clang optimization
      that leads to the verifier rejecting the program due to pointer
      arithmetic in the wrong order.
    
    - The function pkt_parse_ipv6 is force inlined, because it would
      otherwise be rejected due to returning a pointer to stack memory.
    
    - The functions fill_tuple and classify_tcp contain kludges, because
      we've run out of function arguments.
    
    - The logic in general is rather nested, due to verifier restrictions.
      I think this is either because the verifier loses track of constants
      on the stack, or because it can't track enum like variables.
    
    1: https://github.com/github/glb-director/tree/master/src/glb-redirect
    2: https://github.com/github/glb-director/blob/master/docs/development/second-chance-design.md
    3: https://www.usenix.org/conference/nsdi18/presentation/olteanu
    4: https://github.com/github/glb-director/issues/64
    
    Signed-off-by: Lorenz Bauer <lmb@cloudflare.com>
    Signed-off-by: Alexei Starovoitov <ast@kernel.org>
    Link: https://lore.kernel.org/bpf/20200424185556.7358-2-lmb@cloudflare.com

diff --git a/tools/testing/selftests/bpf/test_progs.h b/tools/testing/selftests/bpf/test_progs.h
index f4aff6b8284b..10188cc8e9e0 100644
--- a/tools/testing/selftests/bpf/test_progs.h
+++ b/tools/testing/selftests/bpf/test_progs.h
@@ -105,6 +105,13 @@ struct ipv6_packet {
 } __packed;
 extern struct ipv6_packet pkt_v6;
 
+#define PRINT_FAIL(format...)                                                  \
+	({                                                                     \
+		test__fail();                                                  \
+		fprintf(stdout, "%s:FAIL:%d ", __func__, __LINE__);            \
+		fprintf(stdout, ##format);                                     \
+	})
+
 #define _CHECK(condition, tag, duration, format...) ({			\
 	int __ret = !!(condition);					\
 	int __save_errno = errno;					\

commit fd27b1835e7079d26809cd4d33ba98f84e593766
Author: Andrii Nakryiko <andriin@fb.com>
Date:   Fri Mar 13 18:39:32 2020 -0700

    selftests/bpf: Reset process and thread affinity after each test/sub-test
    
    Some tests and sub-tests are setting "custom" thread/process affinity and
    don't reset it back. Instead of requiring each test to undo all this, ensure
    that thread affinity is restored by test_progs test runner itself.
    
    Signed-off-by: Andrii Nakryiko <andriin@fb.com>
    Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
    Link: https://lore.kernel.org/bpf/20200314013932.4035712-3-andriin@fb.com

diff --git a/tools/testing/selftests/bpf/test_progs.h b/tools/testing/selftests/bpf/test_progs.h
index fd85fa61dbf7..f4aff6b8284b 100644
--- a/tools/testing/selftests/bpf/test_progs.h
+++ b/tools/testing/selftests/bpf/test_progs.h
@@ -71,6 +71,7 @@ struct test_env {
 	FILE *stderr;
 	char *log_buf;
 	size_t log_cnt;
+	int nr_cpus;
 
 	int succ_cnt; /* successful tests */
 	int sub_succ_cnt; /* successful sub-tests */

commit 3e2671fb9a95d2b46990832466383ec8384d88a3
Author: Andrii Nakryiko <andriin@fb.com>
Date:   Fri Mar 13 10:23:33 2020 -0700

    selftests/bpf: Ensure consistent test failure output
    
    printf() doesn't seem to honor using overwritten stdout/stderr (as part of
    stdio hijacking), so ensure all "standard" invocations of printf() do
    fprintf(stdout, ...) instead.
    
    Signed-off-by: Andrii Nakryiko <andriin@fb.com>
    Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
    Acked-by: Martin KaFai Lau <kafai@fb.com>
    Link: https://lore.kernel.org/bpf/20200313172336.1879637-2-andriin@fb.com

diff --git a/tools/testing/selftests/bpf/test_progs.h b/tools/testing/selftests/bpf/test_progs.h
index bcfa9ef23fda..fd85fa61dbf7 100644
--- a/tools/testing/selftests/bpf/test_progs.h
+++ b/tools/testing/selftests/bpf/test_progs.h
@@ -109,10 +109,10 @@ extern struct ipv6_packet pkt_v6;
 	int __save_errno = errno;					\
 	if (__ret) {							\
 		test__fail();						\
-		printf("%s:FAIL:%s ", __func__, tag);			\
-		printf(format);						\
+		fprintf(stdout, "%s:FAIL:%s ", __func__, tag);		\
+		fprintf(stdout, ##format);				\
 	} else {							\
-		printf("%s:PASS:%s %d nsec\n",				\
+		fprintf(stdout, "%s:PASS:%s %d nsec\n",			\
 		       __func__, tag, duration);			\
 	}								\
 	errno = __save_errno;						\
@@ -124,7 +124,7 @@ extern struct ipv6_packet pkt_v6;
 	int __save_errno = errno;					\
 	if (__ret) {							\
 		test__fail();						\
-		printf("%s:FAIL:%d\n", __func__, __LINE__);		\
+		fprintf(stdout, "%s:FAIL:%d\n", __func__, __LINE__);	\
 	}								\
 	errno = __save_errno;						\
 	__ret;								\

commit 3e689141e64df91b009a289c0559adedfe62f511
Author: Toke Høiland-Jørgensen <toke@redhat.com>
Date:   Mon Jan 20 14:06:45 2020 +0100

    selftests: Use consistent include paths for libbpf
    
    Fix all selftests to include libbpf header files with the bpf/ prefix, to
    be consistent with external users of the library. Also ensure that all
    includes of exported libbpf header files (those that are exported on 'make
    install' of the library) use bracketed includes instead of quoted.
    
    To not break the build, keep the old include path until everything has been
    changed to the new one; a subsequent patch will remove that.
    
    Fixes: 6910d7d3867a ("selftests/bpf: Ensure bpf_helper_defs.h are taken from selftests dir")
    Signed-off-by: Toke Høiland-Jørgensen <toke@redhat.com>
    Signed-off-by: Alexei Starovoitov <ast@kernel.org>
    Acked-by: Andrii Nakryiko <andriin@fb.com>
    Link: https://lore.kernel.org/bpf/157952560568.1683545.9649335788846513446.stgit@toke.dk

diff --git a/tools/testing/selftests/bpf/test_progs.h b/tools/testing/selftests/bpf/test_progs.h
index 99933a1857ca..bcfa9ef23fda 100644
--- a/tools/testing/selftests/bpf/test_progs.h
+++ b/tools/testing/selftests/bpf/test_progs.h
@@ -35,7 +35,7 @@ typedef __u16 __sum16;
 
 #include "test_iptunnel_common.h"
 #include "bpf_util.h"
-#include "bpf_endian.h"
+#include <bpf/bpf_endian.h>
 #include "trace_helpers.h"
 #include "flow_dissector_load.h"
 

commit b65053cd94f46619b4aae746b98f2d8d9274540e
Author: Andrii Nakryiko <andriin@fb.com>
Date:   Wed Jan 15 16:55:49 2020 -0800

    selftests/bpf: Add whitelist/blacklist of test names to test_progs
    
    Add ability to specify a list of test name substrings for selecting which
    tests to run. So now -t is accepting a comma-separated list of strings,
    similarly to how -n accepts a comma-separated list of test numbers.
    
    Additionally, add ability to blacklist tests by name. Blacklist takes
    precedence over whitelist. Blacklisting is important for cases where it's
    known that some tests can't pass (e.g., due to perf hardware events that are
    not available within VM). This is going to be used for libbpf testing in
    Travis CI in its Github repo.
    
    Example runs with just whitelist and whitelist + blacklist:
    
      $ sudo ./test_progs -tattach,core/existence
      #1 attach_probe:OK
      #6 cgroup_attach_autodetach:OK
      #7 cgroup_attach_multi:OK
      #8 cgroup_attach_override:OK
      #9 core_extern:OK
      #10/44 existence:OK
      #10/45 existence___minimal:OK
      #10/46 existence__err_int_sz:OK
      #10/47 existence__err_int_type:OK
      #10/48 existence__err_int_kind:OK
      #10/49 existence__err_arr_kind:OK
      #10/50 existence__err_arr_value_type:OK
      #10/51 existence__err_struct_type:OK
      #10 core_reloc:OK
      #19 flow_dissector_reattach:OK
      #60 tp_attach_query:OK
      Summary: 8/8 PASSED, 0 SKIPPED, 0 FAILED
    
      $ sudo ./test_progs -tattach,core/existence -bcgroup,flow/arr
      #1 attach_probe:OK
      #9 core_extern:OK
      #10/44 existence:OK
      #10/45 existence___minimal:OK
      #10/46 existence__err_int_sz:OK
      #10/47 existence__err_int_type:OK
      #10/48 existence__err_int_kind:OK
      #10/51 existence__err_struct_type:OK
      #10 core_reloc:OK
      #60 tp_attach_query:OK
      Summary: 4/6 PASSED, 0 SKIPPED, 0 FAILED
    
    Signed-off-by: Andrii Nakryiko <andriin@fb.com>
    Signed-off-by: Alexei Starovoitov <ast@kernel.org>
    Cc: Julia Kartseva <hex@fb.com>
    Link: https://lore.kernel.org/bpf/20200116005549.3644118-1-andriin@fb.com

diff --git a/tools/testing/selftests/bpf/test_progs.h b/tools/testing/selftests/bpf/test_progs.h
index de1fdaa4e7b4..99933a1857ca 100644
--- a/tools/testing/selftests/bpf/test_progs.h
+++ b/tools/testing/selftests/bpf/test_progs.h
@@ -46,8 +46,14 @@ enum verbosity {
 	VERBOSE_SUPER,
 };
 
+struct str_set {
+	const char **strs;
+	int cnt;
+};
+
 struct test_selector {
-	const char *name;
+	struct str_set whitelist;
+	struct str_set blacklist;
 	bool *num_set;
 	int num_set_len;
 };

commit 478bee0df0ec9067c12e7d058d78721a7e7a1b29
Author: Andrey Ignatov <rdna@fb.com>
Date:   Thu Dec 19 16:05:11 2019 -0800

    selftests/bpf: Preserve errno in test_progs CHECK macros
    
    It's follow-up for discussion [1]
    
    CHECK and CHECK_FAIL macros in test_progs.h can affect errno in some
    circumstances, e.g. if some code accidentally closes stdout. It makes
    checking errno in patterns like this unreliable:
    
            if (CHECK(!bpf_prog_attach_xattr(...), "tag", "msg"))
                    goto err;
            CHECK_FAIL(errno != ENOENT);
    
    , since by CHECK_FAIL time errno could be affected not only by
    bpf_prog_attach_xattr but by CHECK as well.
    
    Fix it by saving and restoring errno in the macros. There is no "Fixes"
    tag since no problems were discovered yet and it's rather precaution.
    
    test_progs was run with this change and no difference was identified.
    
    [1] https://lore.kernel.org/bpf/20191219210907.GD16266@rdna-mbp.dhcp.thefacebook.com/
    
    Signed-off-by: Andrey Ignatov <rdna@fb.com>
    Signed-off-by: Alexei Starovoitov <ast@kernel.org>
    Acked-by: Andrii Nakryiko <andriin@fb.com>
    Link: https://lore.kernel.org/bpf/20191220000511.1684853-1-rdna@fb.com

diff --git a/tools/testing/selftests/bpf/test_progs.h b/tools/testing/selftests/bpf/test_progs.h
index 8477df835979..de1fdaa4e7b4 100644
--- a/tools/testing/selftests/bpf/test_progs.h
+++ b/tools/testing/selftests/bpf/test_progs.h
@@ -100,6 +100,7 @@ extern struct ipv6_packet pkt_v6;
 
 #define _CHECK(condition, tag, duration, format...) ({			\
 	int __ret = !!(condition);					\
+	int __save_errno = errno;					\
 	if (__ret) {							\
 		test__fail();						\
 		printf("%s:FAIL:%s ", __func__, tag);			\
@@ -108,15 +109,18 @@ extern struct ipv6_packet pkt_v6;
 		printf("%s:PASS:%s %d nsec\n",				\
 		       __func__, tag, duration);			\
 	}								\
+	errno = __save_errno;						\
 	__ret;								\
 })
 
 #define CHECK_FAIL(condition) ({					\
 	int __ret = !!(condition);					\
+	int __save_errno = errno;					\
 	if (__ret) {							\
 		test__fail();						\
 		printf("%s:FAIL:%d\n", __func__, __LINE__);		\
 	}								\
+	errno = __save_errno;						\
 	__ret;								\
 })
 

commit a8fdaad5cfd250b9effcec942b3bf7bc5a6c8b17
Author: Andrii Nakryiko <andriin@fb.com>
Date:   Tue Nov 19 16:35:48 2019 -0800

    selftests/bpf: Integrate verbose verifier log into test_progs
    
    Add exra level of verboseness, activated by -vvv argument. When -vv is
    specified, verbose libbpf and verifier log (level 1) is output, even for
    successful tests. With -vvv, verifier log goes to level 2.
    
    This is extremely useful to debug verifier failures, as well as just see the
    state and flow of verification. Before this, you'd have to go and modify
    load_program()'s source code inside libbpf to specify extra log_level flags,
    which is suboptimal to say the least.
    
    Currently -vv and -vvv triggering verifier output is integrated into
    test_stub's bpf_prog_load as well as bpf_verif_scale.c tests.
    
    Signed-off-by: Andrii Nakryiko <andriin@fb.com>
    Signed-off-by: Alexei Starovoitov <ast@kernel.org>
    Link: https://lore.kernel.org/bpf/20191120003548.4159797-1-andriin@fb.com

diff --git a/tools/testing/selftests/bpf/test_progs.h b/tools/testing/selftests/bpf/test_progs.h
index 0c48f64f732b..8477df835979 100644
--- a/tools/testing/selftests/bpf/test_progs.h
+++ b/tools/testing/selftests/bpf/test_progs.h
@@ -39,6 +39,13 @@ typedef __u16 __sum16;
 #include "trace_helpers.h"
 #include "flow_dissector_load.h"
 
+enum verbosity {
+	VERBOSE_NONE,
+	VERBOSE_NORMAL,
+	VERBOSE_VERY,
+	VERBOSE_SUPER,
+};
+
 struct test_selector {
 	const char *name;
 	bool *num_set;
@@ -49,8 +56,7 @@ struct test_env {
 	struct test_selector test_selector;
 	struct test_selector subtest_selector;
 	bool verifier_stats;
-	bool verbose;
-	bool very_verbose;
+	enum verbosity verbosity;
 
 	bool jit_enabled;
 

commit 9a365e67d8bbcfff47063a4eeaa98fd3668e223a
Author: Stanislav Fomichev <sdf@google.com>
Date:   Wed Sep 4 09:25:06 2019 -0700

    selftests/bpf: test_progs: convert test_sockopt_sk
    
    Move the files, adjust includes, remove entry from Makefile & .gitignore
    
    Signed-off-by: Stanislav Fomichev <sdf@google.com>
    Signed-off-by: Alexei Starovoitov <ast@kernel.org>

diff --git a/tools/testing/selftests/bpf/test_progs.h b/tools/testing/selftests/bpf/test_progs.h
index e518bd5da3e2..0c48f64f732b 100644
--- a/tools/testing/selftests/bpf/test_progs.h
+++ b/tools/testing/selftests/bpf/test_progs.h
@@ -16,9 +16,10 @@ typedef __u16 __sum16;
 #include <linux/if_packet.h>
 #include <linux/ip.h>
 #include <linux/ipv6.h>
-#include <linux/tcp.h>
+#include <netinet/tcp.h>
 #include <linux/filter.h>
 #include <linux/perf_event.h>
+#include <linux/socket.h>
 #include <linux/unistd.h>
 
 #include <sys/ioctl.h>

commit 88dadc632763bdccddf99d8454aa3a7932605f00
Author: Stanislav Fomichev <sdf@google.com>
Date:   Wed Sep 4 09:25:04 2019 -0700

    selftests/bpf: test_progs: add test__join_cgroup helper
    
    test__join_cgroup() combines the following operations that usually
    go hand in hand and returns cgroup fd:
    
      * setup cgroup environment (make sure cgroupfs is mounted)
      * mkdir cgroup
      * join cgroup
    
    It also marks a test as a "cgroup cleanup needed" and removes cgroup
    state after the test is done.
    
    Signed-off-by: Stanislav Fomichev <sdf@google.com>
    Signed-off-by: Alexei Starovoitov <ast@kernel.org>

diff --git a/tools/testing/selftests/bpf/test_progs.h b/tools/testing/selftests/bpf/test_progs.h
index c8edb9464ba6..e518bd5da3e2 100644
--- a/tools/testing/selftests/bpf/test_progs.h
+++ b/tools/testing/selftests/bpf/test_progs.h
@@ -71,6 +71,7 @@ extern void test__force_log();
 extern bool test__start_subtest(const char *name);
 extern void test__skip(void);
 extern void test__fail(void);
+extern int test__join_cgroup(const char *path);
 
 #define MAGIC_BYTES 123
 

commit ac915762ea3977af49383bd914d506da0905c72e
Author: Stanislav Fomichev <sdf@google.com>
Date:   Fri Aug 30 19:34:27 2019 -0700

    selftests/bpf: test_progs: add missing \n to CHECK_FAIL
    
    Copy-paste error from CHECK.
    
    Fixes: d38835b75f67 ("selftests/bpf: test_progs: remove global fail/success counts")
    Signed-off-by: Stanislav Fomichev <sdf@google.com>
    Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>

diff --git a/tools/testing/selftests/bpf/test_progs.h b/tools/testing/selftests/bpf/test_progs.h
index 33da849cb765..c8edb9464ba6 100644
--- a/tools/testing/selftests/bpf/test_progs.h
+++ b/tools/testing/selftests/bpf/test_progs.h
@@ -107,7 +107,7 @@ extern struct ipv6_packet pkt_v6;
 	int __ret = !!(condition);					\
 	if (__ret) {							\
 		test__fail();						\
-		printf("%s:FAIL:%d ", __func__, __LINE__);		\
+		printf("%s:FAIL:%d\n", __func__, __LINE__);		\
 	}								\
 	__ret;								\
 })

commit d38835b75f67df16cef65c14aa64796a1832e6b4
Author: Stanislav Fomichev <sdf@google.com>
Date:   Wed Aug 21 16:44:25 2019 -0700

    selftests/bpf: test_progs: remove global fail/success counts
    
    Now that we have a global per-test/per-environment state, there
    is no longer need to have global fail/success counters (and there
    is no need to save/get the diff before/after the test).
    
    Introduce CHECK_FAIL macro (suggested by Andrii) and covert existing tests
    to it. CHECK_FAIL uses new test__fail() to record the failure.
    
    Cc: Andrii Nakryiko <andriin@fb.com>
    Signed-off-by: Stanislav Fomichev <sdf@google.com>
    Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>

diff --git a/tools/testing/selftests/bpf/test_progs.h b/tools/testing/selftests/bpf/test_progs.h
index 9defd35cb6c0..33da849cb765 100644
--- a/tools/testing/selftests/bpf/test_progs.h
+++ b/tools/testing/selftests/bpf/test_progs.h
@@ -38,8 +38,6 @@ typedef __u16 __sum16;
 #include "trace_helpers.h"
 #include "flow_dissector_load.h"
 
-struct prog_test_def;
-
 struct test_selector {
 	const char *name;
 	bool *num_set;
@@ -67,13 +65,12 @@ struct test_env {
 	int skip_cnt; /* skipped tests */
 };
 
-extern int error_cnt;
-extern int pass_cnt;
 extern struct test_env env;
 
 extern void test__force_log();
 extern bool test__start_subtest(const char *name);
 extern void test__skip(void);
+extern void test__fail(void);
 
 #define MAGIC_BYTES 123
 
@@ -96,17 +93,25 @@ extern struct ipv6_packet pkt_v6;
 #define _CHECK(condition, tag, duration, format...) ({			\
 	int __ret = !!(condition);					\
 	if (__ret) {							\
-		error_cnt++;						\
+		test__fail();						\
 		printf("%s:FAIL:%s ", __func__, tag);			\
 		printf(format);						\
 	} else {							\
-		pass_cnt++;						\
 		printf("%s:PASS:%s %d nsec\n",				\
 		       __func__, tag, duration);			\
 	}								\
 	__ret;								\
 })
 
+#define CHECK_FAIL(condition) ({					\
+	int __ret = !!(condition);					\
+	if (__ret) {							\
+		test__fail();						\
+		printf("%s:FAIL:%d ", __func__, __LINE__);		\
+	}								\
+	__ret;								\
+})
+
 #define CHECK(condition, tag, format...) \
 	_CHECK(condition, tag, duration, format)
 #define CHECK_ATTR(condition, tag, format...) \

commit cd9c21d76879a06216597052d3b45c51be977aaa
Author: Stanislav Fomichev <sdf@google.com>
Date:   Wed Aug 21 16:44:24 2019 -0700

    selftests/bpf: test_progs: test__skip
    
    Export test__skip() to indicate skipped tests and use it in
    test_send_signal_nmi().
    
    Cc: Andrii Nakryiko <andriin@fb.com>
    Signed-off-by: Stanislav Fomichev <sdf@google.com>
    Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>

diff --git a/tools/testing/selftests/bpf/test_progs.h b/tools/testing/selftests/bpf/test_progs.h
index 37d427f5a1e5..9defd35cb6c0 100644
--- a/tools/testing/selftests/bpf/test_progs.h
+++ b/tools/testing/selftests/bpf/test_progs.h
@@ -64,6 +64,7 @@ struct test_env {
 	int succ_cnt; /* successful tests */
 	int sub_succ_cnt; /* successful sub-tests */
 	int fail_cnt; /* total failed tests + sub-tests */
+	int skip_cnt; /* skipped tests */
 };
 
 extern int error_cnt;
@@ -72,6 +73,7 @@ extern struct test_env env;
 
 extern void test__force_log();
 extern bool test__start_subtest(const char *name);
+extern void test__skip(void);
 
 #define MAGIC_BYTES 123
 

commit 66bd2ec1e0d9781133eb1a14eddb68facc69d54b
Author: Stanislav Fomichev <sdf@google.com>
Date:   Tue Aug 6 10:45:28 2019 -0700

    selftests/bpf: test_progs: test__printf -> printf
    
    Now that test__printf is a simple wraper around printf, let's drop it
    (and test__vprintf as well).
    
    Cc: Andrii Nakryiko <andriin@fb.com>
    Acked-by: Andrii Nakryiko <andriin@fb.com>
    Signed-off-by: Stanislav Fomichev <sdf@google.com>
    Signed-off-by: Alexei Starovoitov <ast@kernel.org>

diff --git a/tools/testing/selftests/bpf/test_progs.h b/tools/testing/selftests/bpf/test_progs.h
index 541f9eab5eed..37d427f5a1e5 100644
--- a/tools/testing/selftests/bpf/test_progs.h
+++ b/tools/testing/selftests/bpf/test_progs.h
@@ -70,8 +70,6 @@ extern int error_cnt;
 extern int pass_cnt;
 extern struct test_env env;
 
-extern void test__printf(const char *fmt, ...);
-extern void test__vprintf(const char *fmt, va_list args);
 extern void test__force_log();
 extern bool test__start_subtest(const char *name);
 
@@ -97,12 +95,12 @@ extern struct ipv6_packet pkt_v6;
 	int __ret = !!(condition);					\
 	if (__ret) {							\
 		error_cnt++;						\
-		test__printf("%s:FAIL:%s ", __func__, tag);		\
-		test__printf(format);					\
+		printf("%s:FAIL:%s ", __func__, tag);			\
+		printf(format);						\
 	} else {							\
 		pass_cnt++;						\
-		test__printf("%s:PASS:%s %d nsec\n",			\
-			      __func__, tag, duration);			\
+		printf("%s:PASS:%s %d nsec\n",				\
+		       __func__, tag, duration);			\
 	}								\
 	__ret;								\
 })

commit 946152b3c5d6bab128db8eee226ec2665429b79c
Author: Stanislav Fomichev <sdf@google.com>
Date:   Tue Aug 6 10:45:27 2019 -0700

    selftests/bpf: test_progs: switch to open_memstream
    
    Use open_memstream to override stdout during test execution.
    The copy of the original stdout is held in env.stdout and used
    to print subtest info and dump failed log.
    
    test_{v,}printf are now simple wrappers around stdout and will be
    removed in the next patch.
    
    v5:
    * fix -v crash by always setting env.std{in,err} (Alexei Starovoitov)
    * drop force_log check from stdio_hijack (Andrii Nakryiko)
    
    v4:
    * one field per line for stdout/stderr (Andrii Nakryiko)
    
    v3:
    * don't do strlen over log_buf, log_cnt has it already (Andrii Nakryiko)
    
    v2:
    * add ifdef __GLIBC__ around open_memstream (maybe pointless since
      we already depend on glibc for argp_parse)
    * hijack stderr as well (Andrii Nakryiko)
    * don't hijack for every test, do it once (Andrii Nakryiko)
    * log_cap -> log_size (Andrii Nakryiko)
    * do fseeko in a proper place (Andrii Nakryiko)
    * check open_memstream returned value (Andrii Nakryiko)
    
    Cc: Andrii Nakryiko <andriin@fb.com>
    Acked-by: Andrii Nakryiko <andriin@fb.com>
    Signed-off-by: Stanislav Fomichev <sdf@google.com>
    Signed-off-by: Alexei Starovoitov <ast@kernel.org>

diff --git a/tools/testing/selftests/bpf/test_progs.h b/tools/testing/selftests/bpf/test_progs.h
index afd14962456f..541f9eab5eed 100644
--- a/tools/testing/selftests/bpf/test_progs.h
+++ b/tools/testing/selftests/bpf/test_progs.h
@@ -56,9 +56,10 @@ struct test_env {
 	bool jit_enabled;
 
 	struct prog_test_def *test;
+	FILE *stdout;
+	FILE *stderr;
 	char *log_buf;
 	size_t log_cnt;
-	size_t log_cap;
 
 	int succ_cnt; /* successful tests */
 	int sub_succ_cnt; /* successful sub-tests */

commit 3a516a0a3a7b21ec038db83ffb0d3cddc42514c9
Author: Andrii Nakryiko <andriin@fb.com>
Date:   Sat Jul 27 20:25:29 2019 -0700

    selftests/bpf: add sub-tests support for test_progs
    
    Allow tests to have their own set of sub-tests. Also add ability to do
    test/subtest selection using `-t <test-name>/<subtest-name>` and `-n
    <test-nums-set>/<subtest-nums-set>`, as an extension of existing -t/-n
    selector options. For the <test-num-set> format: it's a comma-separated
    list of either individual test numbers (1-based), or range of test
    numbers. E.g., all of the following are valid sets of test numbers:
      - 10
      - 1,2,3
      - 1-3
      - 5-10,1,3-4
    
    '/<subtest' part is optional, but has the same format. E.g., to select
    test #3 and its sub-tests #10 through #15, use: -t 3/10-15.
    
    Similarly, to select tests by name, use `-t verif/strobe`:
    
      $ sudo ./test_progs -t verif/strobe
      #3/12 strobemeta.o:OK
      #3/13 strobemeta_nounroll1.o:OK
      #3/14 strobemeta_nounroll2.o:OK
      #3 bpf_verif_scale:OK
      Summary: 1/3 PASSED, 0 FAILED
    
    Example of using subtest API is in the next patch, converting
    bpf_verif_scale.c tests to use sub-tests.
    
    Signed-off-by: Andrii Nakryiko <andriin@fb.com>
    Signed-off-by: Alexei Starovoitov <ast@kernel.org>

diff --git a/tools/testing/selftests/bpf/test_progs.h b/tools/testing/selftests/bpf/test_progs.h
index 62f55a4231e9..afd14962456f 100644
--- a/tools/testing/selftests/bpf/test_progs.h
+++ b/tools/testing/selftests/bpf/test_progs.h
@@ -40,9 +40,15 @@ typedef __u16 __sum16;
 
 struct prog_test_def;
 
+struct test_selector {
+	const char *name;
+	bool *num_set;
+	int num_set_len;
+};
+
 struct test_env {
-	int test_num_selector;
-	const char *test_name_selector;
+	struct test_selector test_selector;
+	struct test_selector subtest_selector;
 	bool verifier_stats;
 	bool verbose;
 	bool very_verbose;
@@ -54,8 +60,9 @@ struct test_env {
 	size_t log_cnt;
 	size_t log_cap;
 
-	int succ_cnt;
-	int fail_cnt;
+	int succ_cnt; /* successful tests */
+	int sub_succ_cnt; /* successful sub-tests */
+	int fail_cnt; /* total failed tests + sub-tests */
 };
 
 extern int error_cnt;
@@ -65,6 +72,7 @@ extern struct test_env env;
 extern void test__printf(const char *fmt, ...);
 extern void test__vprintf(const char *fmt, va_list args);
 extern void test__force_log();
+extern bool test__start_subtest(const char *name);
 
 #define MAGIC_BYTES 123
 

commit 0ff97e56c0986ea6633083c3487d9231bbbd881b
Author: Andrii Nakryiko <andriin@fb.com>
Date:   Sat Jul 27 20:25:28 2019 -0700

    selftests/bpf: abstract away test log output
    
    This patch changes how test output is printed out. By default, if test
    had no errors, the only output will be a single line with test number,
    name, and verdict at the end, e.g.:
    
      #31 xdp:OK
    
    If test had any errors, all log output captured during test execution
    will be output after test completes.
    
    It's possible to force output of log with `-v` (`--verbose`) option, in
    which case output won't be buffered and will be output immediately.
    
    To support this, individual tests are required to use helper methods for
    logging: `test__printf()` and `test__vprintf()`.
    
    Signed-off-by: Andrii Nakryiko <andriin@fb.com>
    Signed-off-by: Alexei Starovoitov <ast@kernel.org>

diff --git a/tools/testing/selftests/bpf/test_progs.h b/tools/testing/selftests/bpf/test_progs.h
index 49e0f7d85643..62f55a4231e9 100644
--- a/tools/testing/selftests/bpf/test_progs.h
+++ b/tools/testing/selftests/bpf/test_progs.h
@@ -38,9 +38,33 @@ typedef __u16 __sum16;
 #include "trace_helpers.h"
 #include "flow_dissector_load.h"
 
-extern int error_cnt, pass_cnt;
-extern bool jit_enabled;
-extern bool verifier_stats;
+struct prog_test_def;
+
+struct test_env {
+	int test_num_selector;
+	const char *test_name_selector;
+	bool verifier_stats;
+	bool verbose;
+	bool very_verbose;
+
+	bool jit_enabled;
+
+	struct prog_test_def *test;
+	char *log_buf;
+	size_t log_cnt;
+	size_t log_cap;
+
+	int succ_cnt;
+	int fail_cnt;
+};
+
+extern int error_cnt;
+extern int pass_cnt;
+extern struct test_env env;
+
+extern void test__printf(const char *fmt, ...);
+extern void test__vprintf(const char *fmt, va_list args);
+extern void test__force_log();
 
 #define MAGIC_BYTES 123
 
@@ -64,11 +88,12 @@ extern struct ipv6_packet pkt_v6;
 	int __ret = !!(condition);					\
 	if (__ret) {							\
 		error_cnt++;						\
-		printf("%s:FAIL:%s ", __func__, tag);			\
-		printf(format);						\
+		test__printf("%s:FAIL:%s ", __func__, tag);		\
+		test__printf(format);					\
 	} else {							\
 		pass_cnt++;						\
-		printf("%s:PASS:%s %d nsec\n", __func__, tag, duration);\
+		test__printf("%s:PASS:%s %d nsec\n",			\
+			      __func__, tag, duration);			\
 	}								\
 	__ret;								\
 })

commit 1cb59a6074e23c6f6513642f752a6d8d38327354
Author: Ilya Leoshkevich <iii@linux.ibm.com>
Date:   Tue Jul 16 14:58:27 2019 +0200

    selftests/bpf: fix perf_buffer on s390
    
    perf_buffer test fails for exactly the same reason test_attach_probe
    used to fail: different nanosleep syscall kprobe name.
    
    Reuse the test_attach_probe fix.
    
    Fixes: ee5cf82ce04a ("selftests/bpf: test perf buffer API")
    Signed-off-by: Ilya Leoshkevich <iii@linux.ibm.com>
    Acked-by: Andrii Nakryiko <andriin@fb.com>
    Signed-off-by: Alexei Starovoitov <ast@kernel.org>

diff --git a/tools/testing/selftests/bpf/test_progs.h b/tools/testing/selftests/bpf/test_progs.h
index f095e1d4c657..49e0f7d85643 100644
--- a/tools/testing/selftests/bpf/test_progs.h
+++ b/tools/testing/selftests/bpf/test_progs.h
@@ -92,3 +92,11 @@ int compare_map_keys(int map1_fd, int map2_fd);
 int compare_stack_ips(int smap_fd, int amap_fd, int stack_trace_len);
 int extract_build_id(char *build_id, size_t size);
 void *spin_lock_thread(void *arg);
+
+#ifdef __x86_64__
+#define SYS_NANOSLEEP_KPROBE_NAME "__x64_sys_nanosleep"
+#elif defined(__s390x__)
+#define SYS_NANOSLEEP_KPROBE_NAME "__s390x_sys_nanosleep"
+#else
+#define SYS_NANOSLEEP_KPROBE_NAME "sys_nanosleep"
+#endif

commit e5e7a8f2d858a91b79c4afc51a3f15edcbf9cb60
Author: Alexei Starovoitov <ast@kernel.org>
Date:   Mon Apr 1 21:27:48 2019 -0700

    selftests/bpf: add few verifier scale tests
    
    Add 3 basic tests that stress verifier scalability.
    
    test_verif_scale1.c calls non-inlined jhash() function 90 times on
    different position in the packet.
    This test simulates network packet parsing.
    jhash function is ~140 instructions and main program is ~1200 insns.
    
    test_verif_scale2.c force inlines jhash() function 90 times.
    This program is ~15k instructions long.
    
    test_verif_scale3.c calls non-inlined jhash() function 90 times on
    But this time jhash has to process 32-bytes from the packet
    instead of 14-bytes in tests 1 and 2.
    jhash function is ~230 insns and main program is ~1200 insns.
    
    $ test_progs -s
    can be used to see verifier stats.
    
    Signed-off-by: Alexei Starovoitov <ast@kernel.org>
    Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>

diff --git a/tools/testing/selftests/bpf/test_progs.h b/tools/testing/selftests/bpf/test_progs.h
index 51a07367cd43..f095e1d4c657 100644
--- a/tools/testing/selftests/bpf/test_progs.h
+++ b/tools/testing/selftests/bpf/test_progs.h
@@ -40,6 +40,7 @@ typedef __u16 __sum16;
 
 extern int error_cnt, pass_cnt;
 extern bool jit_enabled;
+extern bool verifier_stats;
 
 #define MAGIC_BYTES 123
 

commit 886225bb0868fcf763bea62d18e57e4b5ef08a42
Author: Stanislav Fomichev <sdf@google.com>
Date:   Fri Mar 1 19:42:19 2019 -0800

    selftests: bpf: break up test_progs - misc
    
    Move the rest of prog tests into separate files.
    
    Signed-off-by: Stanislav Fomichev <sdf@google.com>
    Signed-off-by: Alexei Starovoitov <ast@kernel.org>

diff --git a/tools/testing/selftests/bpf/test_progs.h b/tools/testing/selftests/bpf/test_progs.h
index 66309327b4f8..51a07367cd43 100644
--- a/tools/testing/selftests/bpf/test_progs.h
+++ b/tools/testing/selftests/bpf/test_progs.h
@@ -81,6 +81,11 @@ extern struct ipv6_packet pkt_v6;
 #define NUM_ITER 100000
 #define VIP_NUM 5
 
+static inline __u64 ptr_to_u64(const void *ptr)
+{
+	return (__u64) (unsigned long) ptr;
+}
+
 int bpf_find_map(const char *test, struct bpf_object *obj, const char *name);
 int compare_map_keys(int map1_fd, int map2_fd);
 int compare_stack_ips(int smap_fd, int amap_fd, int stack_trace_len);

commit 271a6337cbaedfa9b93006326d0ecc28fd3dc71c
Author: Stanislav Fomichev <sdf@google.com>
Date:   Fri Mar 1 19:42:18 2019 -0800

    selftests: bpf: break up test_progs - spinlock
    
    Move spinlock prog tests into separate files.
    
    Signed-off-by: Stanislav Fomichev <sdf@google.com>
    Signed-off-by: Alexei Starovoitov <ast@kernel.org>

diff --git a/tools/testing/selftests/bpf/test_progs.h b/tools/testing/selftests/bpf/test_progs.h
index 148b5494ed08..66309327b4f8 100644
--- a/tools/testing/selftests/bpf/test_progs.h
+++ b/tools/testing/selftests/bpf/test_progs.h
@@ -85,3 +85,4 @@ int bpf_find_map(const char *test, struct bpf_object *obj, const char *name);
 int compare_map_keys(int map1_fd, int map2_fd);
 int compare_stack_ips(int smap_fd, int amap_fd, int stack_trace_len);
 int extract_build_id(char *build_id, size_t size);
+void *spin_lock_thread(void *arg);

commit 615741d81de6c16aa466c4eb37805caa868a9bb8
Author: Stanislav Fomichev <sdf@google.com>
Date:   Fri Mar 1 19:42:16 2019 -0800

    selftests: bpf: break up test_progs - stackmap
    
    Move stackmap prog tests into separate files.
    
    Signed-off-by: Stanislav Fomichev <sdf@google.com>
    Signed-off-by: Alexei Starovoitov <ast@kernel.org>

diff --git a/tools/testing/selftests/bpf/test_progs.h b/tools/testing/selftests/bpf/test_progs.h
index 040132877680..148b5494ed08 100644
--- a/tools/testing/selftests/bpf/test_progs.h
+++ b/tools/testing/selftests/bpf/test_progs.h
@@ -82,3 +82,6 @@ extern struct ipv6_packet pkt_v6;
 #define VIP_NUM 5
 
 int bpf_find_map(const char *test, struct bpf_object *obj, const char *name);
+int compare_map_keys(int map1_fd, int map2_fd);
+int compare_stack_ips(int smap_fd, int amap_fd, int stack_trace_len);
+int extract_build_id(char *build_id, size_t size);

commit eaf90740f5ad054b1962f32a50e5b7476c0f16bd
Author: Stanislav Fomichev <sdf@google.com>
Date:   Fri Mar 1 19:42:15 2019 -0800

    selftests: bpf: break up test_progs - xdp
    
    Move xdp prog tests into separate files.
    
    Signed-off-by: Stanislav Fomichev <sdf@google.com>
    Signed-off-by: Alexei Starovoitov <ast@kernel.org>

diff --git a/tools/testing/selftests/bpf/test_progs.h b/tools/testing/selftests/bpf/test_progs.h
index 658efa080fc0..040132877680 100644
--- a/tools/testing/selftests/bpf/test_progs.h
+++ b/tools/testing/selftests/bpf/test_progs.h
@@ -77,4 +77,8 @@ extern struct ipv6_packet pkt_v6;
 #define CHECK_ATTR(condition, tag, format...) \
 	_CHECK(condition, tag, tattr.duration, format)
 
+#define MAGIC_VAL 0x1234
+#define NUM_ITER 100000
+#define VIP_NUM 5
+
 int bpf_find_map(const char *test, struct bpf_object *obj, const char *name);

commit 3f30658830f3a133ba2136237ea9c8e589344a3b
Author: Stanislav Fomichev <sdf@google.com>
Date:   Fri Mar 1 19:42:13 2019 -0800

    selftests: bpf: break up test_progs - preparations
    
    Add new prog_tests directory where tests are supposed to land.
    Each prog_tests/<filename>.c is expected to have a global function
    with signature 'void test_<filename>(void)'. Makefile automatically
    generates prog_tests/tests.h file with entry for each prog_tests file:
    
            #ifdef DECLARE
            extern void test_<filename>(void);
            ...
            #endif
    
            #ifdef CALL
            test_<filename>();
            ...
            #endif
    
    prog_tests/tests.h is included in test_progs.c in two places with
    appropriate defines. This scheme allows us to move each function with
    a separate patch without breaking anything.
    
    Compared to the recent verifier split, each separate file here is
    a compilation unit and test_progs.[ch] is now used as a place to put
    some common routines that might be used by multiple tests.
    
    Signed-off-by: Stanislav Fomichev <sdf@google.com>
    Signed-off-by: Alexei Starovoitov <ast@kernel.org>

diff --git a/tools/testing/selftests/bpf/test_progs.h b/tools/testing/selftests/bpf/test_progs.h
new file mode 100644
index 000000000000..658efa080fc0
--- /dev/null
+++ b/tools/testing/selftests/bpf/test_progs.h
@@ -0,0 +1,80 @@
+/* SPDX-License-Identifier: GPL-2.0 */
+#include <stdio.h>
+#include <unistd.h>
+#include <errno.h>
+#include <string.h>
+#include <assert.h>
+#include <stdlib.h>
+#include <stdarg.h>
+#include <time.h>
+#include <signal.h>
+
+#include <linux/types.h>
+typedef __u16 __sum16;
+#include <arpa/inet.h>
+#include <linux/if_ether.h>
+#include <linux/if_packet.h>
+#include <linux/ip.h>
+#include <linux/ipv6.h>
+#include <linux/tcp.h>
+#include <linux/filter.h>
+#include <linux/perf_event.h>
+#include <linux/unistd.h>
+
+#include <sys/ioctl.h>
+#include <sys/wait.h>
+#include <sys/types.h>
+#include <sys/time.h>
+#include <fcntl.h>
+#include <pthread.h>
+#include <linux/bpf.h>
+#include <linux/err.h>
+#include <bpf/bpf.h>
+#include <bpf/libbpf.h>
+
+#include "test_iptunnel_common.h"
+#include "bpf_util.h"
+#include "bpf_endian.h"
+#include "trace_helpers.h"
+#include "flow_dissector_load.h"
+
+extern int error_cnt, pass_cnt;
+extern bool jit_enabled;
+
+#define MAGIC_BYTES 123
+
+/* ipv4 test vector */
+struct ipv4_packet {
+	struct ethhdr eth;
+	struct iphdr iph;
+	struct tcphdr tcp;
+} __packed;
+extern struct ipv4_packet pkt_v4;
+
+/* ipv6 test vector */
+struct ipv6_packet {
+	struct ethhdr eth;
+	struct ipv6hdr iph;
+	struct tcphdr tcp;
+} __packed;
+extern struct ipv6_packet pkt_v6;
+
+#define _CHECK(condition, tag, duration, format...) ({			\
+	int __ret = !!(condition);					\
+	if (__ret) {							\
+		error_cnt++;						\
+		printf("%s:FAIL:%s ", __func__, tag);			\
+		printf(format);						\
+	} else {							\
+		pass_cnt++;						\
+		printf("%s:PASS:%s %d nsec\n", __func__, tag, duration);\
+	}								\
+	__ret;								\
+})
+
+#define CHECK(condition, tag, format...) \
+	_CHECK(condition, tag, duration, format)
+#define CHECK_ATTR(condition, tag, format...) \
+	_CHECK(condition, tag, tattr.duration, format)
+
+int bpf_find_map(const char *test, struct bpf_object *obj, const char *name);
