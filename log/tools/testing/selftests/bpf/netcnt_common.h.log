commit 371e4fcc9d96ab1c8d72d59ca4ee3537402d1584
Author: Roman Gushchin <guro@fb.com>
Date:   Fri Sep 28 14:46:00 2018 +0000

    selftests/bpf: cgroup local storage-based network counters
    
    This commit adds a bpf kselftest, which demonstrates how percpu
    and shared cgroup local storage can be used for efficient lookup-free
    network accounting.
    
    Cgroup local storage provides generic memory area with a very efficient
    lookup free access. To avoid expensive atomic operations for each
    packet, per-cpu cgroup local storage is used. Each packet is initially
    charged to a per-cpu counter, and only if the counter reaches certain
    value (32 in this case), the charge is moved into the global atomic
    counter. This allows to amortize atomic operations, keeping reasonable
    accuracy.
    
    The test also implements a naive network traffic throttling, mostly to
    demonstrate the possibility of bpf cgroup--based network bandwidth
    control.
    
    Expected output:
      ./test_netcnt
      test_netcnt:PASS
    
    Signed-off-by: Roman Gushchin <guro@fb.com>
    Acked-by: Song Liu <songliubraving@fb.com>
    Cc: Daniel Borkmann <daniel@iogearbox.net>
    Cc: Alexei Starovoitov <ast@kernel.org>
    Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>

diff --git a/tools/testing/selftests/bpf/netcnt_common.h b/tools/testing/selftests/bpf/netcnt_common.h
new file mode 100644
index 000000000000..81084c1c2c23
--- /dev/null
+++ b/tools/testing/selftests/bpf/netcnt_common.h
@@ -0,0 +1,24 @@
+// SPDX-License-Identifier: GPL-2.0
+#ifndef __NETCNT_COMMON_H
+#define __NETCNT_COMMON_H
+
+#include <linux/types.h>
+
+#define MAX_PERCPU_PACKETS 32
+
+struct percpu_net_cnt {
+	__u64 packets;
+	__u64 bytes;
+
+	__u64 prev_ts;
+
+	__u64 prev_packets;
+	__u64 prev_bytes;
+};
+
+struct net_cnt {
+	__u64 packets;
+	__u64 bytes;
+};
+
+#endif
