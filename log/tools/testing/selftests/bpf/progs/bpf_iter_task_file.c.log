commit b9f4c01f3e0b06579a8074dcc8638fae89a1ca67
Author: Andrii Nakryiko <andriin@fb.com>
Date:   Mon May 18 16:45:16 2020 -0700

    selftest/bpf: Make bpf_iter selftest compilable against old vmlinux.h
    
    It's good to be able to compile bpf_iter selftest even on systems that don't
    have the very latest vmlinux.h, e.g., for libbpf tests against older kernels in
    Travis CI. To that extent, re-define bpf_iter_meta and corresponding bpf_iter
    context structs in each selftest. To avoid type clashes with vmlinux.h, rename
    vmlinux.h's definitions to get them out of the way.
    
    Signed-off-by: Andrii Nakryiko <andriin@fb.com>
    Signed-off-by: Alexei Starovoitov <ast@kernel.org>
    Acked-by: Yonghong Song <yhs@fb.com>
    Acked-by: Jesper Dangaard Brouer <brouer@redhat.com>
    Link: https://lore.kernel.org/bpf/20200518234516.3915052-1-andriin@fb.com

diff --git a/tools/testing/selftests/bpf/progs/bpf_iter_task_file.c b/tools/testing/selftests/bpf/progs/bpf_iter_task_file.c
index c6ced38f0880..0f0ec3db20ba 100644
--- a/tools/testing/selftests/bpf/progs/bpf_iter_task_file.c
+++ b/tools/testing/selftests/bpf/progs/bpf_iter_task_file.c
@@ -1,11 +1,29 @@
 // SPDX-License-Identifier: GPL-2.0
 /* Copyright (c) 2020 Facebook */
+/* "undefine" structs in vmlinux.h, because we "override" them below */
+#define bpf_iter_meta bpf_iter_meta___not_used
+#define bpf_iter__task_file bpf_iter__task_file___not_used
 #include "vmlinux.h"
+#undef bpf_iter_meta
+#undef bpf_iter__task_file
 #include <bpf/bpf_helpers.h>
 #include <bpf/bpf_tracing.h>
 
 char _license[] SEC("license") = "GPL";
 
+struct bpf_iter_meta {
+	struct seq_file *seq;
+	__u64 session_id;
+	__u64 seq_num;
+} __attribute__((preserve_access_index));
+
+struct bpf_iter__task_file {
+	struct bpf_iter_meta *meta;
+	struct task_struct *task;
+	__u32 fd;
+	struct file *file;
+} __attribute__((preserve_access_index));
+
 SEC("iter/task_file")
 int dump_task_file(struct bpf_iter__task_file *ctx)
 {

commit acf61631746c01850a9df0cd5617c5c29214776c
Author: Yonghong Song <yhs@fb.com>
Date:   Sat May 9 10:59:22 2020 -0700

    tools/bpf: selftests: Add iter progs for bpf_map/task/task_file
    
    The implementation is arbitrary, just to show how the bpf programs
    can be written for bpf_map/task/task_file. They can be costomized
    for specific needs.
    
    For example, for bpf_map, the iterator prints out:
      $ cat /sys/fs/bpf/my_bpf_map
          id   refcnt  usercnt  locked_vm
           3        2        0         20
           6        2        0         20
           9        2        0         20
          12        2        0         20
          13        2        0         20
          16        2        0         20
          19        2        0         20
          %%% END %%%
    
    For task, the iterator prints out:
      $ cat /sys/fs/bpf/my_task
        tgid      gid
           1        1
           2        2
        ....
        1944     1944
        1948     1948
        1949     1949
        1953     1953
        === END ===
    
    For task/file, the iterator prints out:
      $ cat /sys/fs/bpf/my_task_file
        tgid      gid       fd      file
           1        1        0 ffffffff95c97600
           1        1        1 ffffffff95c97600
           1        1        2 ffffffff95c97600
        ....
        1895     1895      255 ffffffff95c8fe00
        1932     1932        0 ffffffff95c8fe00
        1932     1932        1 ffffffff95c8fe00
        1932     1932        2 ffffffff95c8fe00
        1932     1932        3 ffffffff95c185c0
    
    This is able to print out all open files (fd and file->f_op), so user can compare
    f_op against a particular kernel file operations to find what it is.
    For example, from /proc/kallsyms, we can find
      ffffffff95c185c0 r eventfd_fops
    so we will know tgid 1932 fd 3 is an eventfd file descriptor.
    
    Signed-off-by: Yonghong Song <yhs@fb.com>
    Signed-off-by: Alexei Starovoitov <ast@kernel.org>
    Acked-by: Andrii Nakryiko <andriin@fb.com>
    Link: https://lore.kernel.org/bpf/20200509175922.2477576-1-yhs@fb.com

diff --git a/tools/testing/selftests/bpf/progs/bpf_iter_task_file.c b/tools/testing/selftests/bpf/progs/bpf_iter_task_file.c
new file mode 100644
index 000000000000..c6ced38f0880
--- /dev/null
+++ b/tools/testing/selftests/bpf/progs/bpf_iter_task_file.c
@@ -0,0 +1,26 @@
+// SPDX-License-Identifier: GPL-2.0
+/* Copyright (c) 2020 Facebook */
+#include "vmlinux.h"
+#include <bpf/bpf_helpers.h>
+#include <bpf/bpf_tracing.h>
+
+char _license[] SEC("license") = "GPL";
+
+SEC("iter/task_file")
+int dump_task_file(struct bpf_iter__task_file *ctx)
+{
+	struct seq_file *seq = ctx->meta->seq;
+	struct task_struct *task = ctx->task;
+	__u32 fd = ctx->fd;
+	struct file *file = ctx->file;
+
+	if (task == (void *)0 || file == (void *)0)
+		return 0;
+
+	if (ctx->meta->seq_num == 0)
+		BPF_SEQ_PRINTF(seq, "    tgid      gid       fd      file\n");
+
+	BPF_SEQ_PRINTF(seq, "%8d %8d %8d %lx\n", task->tgid, task->pid, fd,
+		       (long)file->f_op);
+	return 0;
+}
