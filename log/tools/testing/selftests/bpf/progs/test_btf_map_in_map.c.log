commit 646f02ffdd49c466cb81642c2b013beb80092d01
Author: Andrii Nakryiko <andriin@fb.com>
Date:   Tue Apr 28 17:27:39 2020 -0700

    libbpf: Add BTF-defined map-in-map support
    
    As discussed at LPC 2019 ([0]), this patch brings (a quite belated) support
    for declarative BTF-defined map-in-map support in libbpf. It allows to define
    ARRAY_OF_MAPS and HASH_OF_MAPS BPF maps without any user-space initialization
    code involved.
    
    Additionally, it allows to initialize outer map's slots with references to
    respective inner maps at load time, also completely declaratively.
    
    Despite a weak type system of C, the way BTF-defined map-in-map definition
    works, it's actually quite hard to accidentally initialize outer map with
    incompatible inner maps. This being C, of course, it's still possible, but
    even that would be caught at load time and error returned with helpful debug
    log pointing exactly to the slot that failed to be initialized.
    
    As an example, here's a rather advanced HASH_OF_MAPS declaration and
    initialization example, filling slots #0 and #4 with two inner maps:
    
      #include <bpf/bpf_helpers.h>
    
      struct inner_map {
              __uint(type, BPF_MAP_TYPE_ARRAY);
              __uint(max_entries, 1);
              __type(key, int);
              __type(value, int);
      } inner_map1 SEC(".maps"),
        inner_map2 SEC(".maps");
    
      struct outer_hash {
              __uint(type, BPF_MAP_TYPE_HASH_OF_MAPS);
              __uint(max_entries, 5);
              __uint(key_size, sizeof(int));
              __array(values, struct inner_map);
      } outer_hash SEC(".maps") = {
              .values = {
                      [0] = &inner_map2,
                      [4] = &inner_map1,
              },
      };
    
    Here's the relevant part of libbpf debug log showing pretty clearly of what's
    going on with map-in-map initialization:
    
      libbpf: .maps relo #0: for 6 value 0 rel.r_offset 96 name 260 ('inner_map1')
      libbpf: .maps relo #0: map 'outer_arr' slot [0] points to map 'inner_map1'
      libbpf: .maps relo #1: for 7 value 32 rel.r_offset 112 name 249 ('inner_map2')
      libbpf: .maps relo #1: map 'outer_arr' slot [2] points to map 'inner_map2'
      libbpf: .maps relo #2: for 7 value 32 rel.r_offset 144 name 249 ('inner_map2')
      libbpf: .maps relo #2: map 'outer_hash' slot [0] points to map 'inner_map2'
      libbpf: .maps relo #3: for 6 value 0 rel.r_offset 176 name 260 ('inner_map1')
      libbpf: .maps relo #3: map 'outer_hash' slot [4] points to map 'inner_map1'
      libbpf: map 'inner_map1': created successfully, fd=4
      libbpf: map 'inner_map2': created successfully, fd=5
      libbpf: map 'outer_hash': created successfully, fd=7
      libbpf: map 'outer_hash': slot [0] set to map 'inner_map2' fd=5
      libbpf: map 'outer_hash': slot [4] set to map 'inner_map1' fd=4
    
    Notice from the log above that fd=6 (not logged explicitly) is used for inner
    "prototype" map, necessary for creation of outer map. It is destroyed
    immediately after outer map is created.
    
    See also included selftest with some extra comments explaining extra details
    of usage. Additionally, similar initialization syntax and libbpf functionality
    can be used to do initialization of BPF_PROG_ARRAY with references to BPF
    sub-programs. This can be done in follow up patches, if there will be a demand
    for this.
    
      [0] https://linuxplumbersconf.org/event/4/contributions/448/
    
    Signed-off-by: Andrii Nakryiko <andriin@fb.com>
    Signed-off-by: Alexei Starovoitov <ast@kernel.org>
    Acked-by: Toke Høiland-Jørgensen <toke@redhat.com>
    Link: https://lore.kernel.org/bpf/20200429002739.48006-4-andriin@fb.com

diff --git a/tools/testing/selftests/bpf/progs/test_btf_map_in_map.c b/tools/testing/selftests/bpf/progs/test_btf_map_in_map.c
new file mode 100644
index 000000000000..e5093796be97
--- /dev/null
+++ b/tools/testing/selftests/bpf/progs/test_btf_map_in_map.c
@@ -0,0 +1,76 @@
+/* SPDX-License-Identifier: GPL-2.0 */
+/* Copyright (c) 2020 Facebook */
+#include <linux/bpf.h>
+#include <bpf/bpf_helpers.h>
+
+struct inner_map {
+	__uint(type, BPF_MAP_TYPE_ARRAY);
+	__uint(max_entries, 1);
+	__type(key, int);
+	__type(value, int);
+} inner_map1 SEC(".maps"),
+  inner_map2 SEC(".maps");
+
+struct outer_arr {
+	__uint(type, BPF_MAP_TYPE_ARRAY_OF_MAPS);
+	__uint(max_entries, 3);
+	__uint(key_size, sizeof(int));
+	__uint(value_size, sizeof(int));
+	/* it's possible to use anonymous struct as inner map definition here */
+	__array(values, struct {
+		__uint(type, BPF_MAP_TYPE_ARRAY);
+		/* changing max_entries to 2 will fail during load
+		 * due to incompatibility with inner_map definition */
+		__uint(max_entries, 1);
+		__type(key, int);
+		__type(value, int);
+	});
+} outer_arr SEC(".maps") = {
+	/* (void *) cast is necessary because we didn't use `struct inner_map`
+	 * in __inner(values, ...)
+	 * Actually, a conscious effort is required to screw up initialization
+	 * of inner map slots, which is a great thing!
+	 */
+	.values = { (void *)&inner_map1, 0, (void *)&inner_map2 },
+};
+
+struct outer_hash {
+	__uint(type, BPF_MAP_TYPE_HASH_OF_MAPS);
+	__uint(max_entries, 5);
+	__uint(key_size, sizeof(int));
+	/* Here everything works flawlessly due to reuse of struct inner_map
+	 * and compiler will complain at the attempt to use non-inner_map
+	 * references below. This is great experience.
+	 */
+	__array(values, struct inner_map);
+} outer_hash SEC(".maps") = {
+	.values = {
+		[0] = &inner_map2,
+		[4] = &inner_map1,
+	},
+};
+
+int input = 0;
+
+SEC("raw_tp/sys_enter")
+int handle__sys_enter(void *ctx)
+{
+	struct inner_map *inner_map;
+	int key = 0, val;
+
+	inner_map = bpf_map_lookup_elem(&outer_arr, &key);
+	if (!inner_map)
+		return 1;
+	val = input;
+	bpf_map_update_elem(inner_map, &key, &val, 0);
+
+	inner_map = bpf_map_lookup_elem(&outer_hash, &key);
+	if (!inner_map)
+		return 1;
+	val = input + 1;
+	bpf_map_update_elem(inner_map, &key, &val, 0);
+
+	return 0;
+}
+
+char _license[] SEC("license") = "GPL";
