commit b9f4c01f3e0b06579a8074dcc8638fae89a1ca67
Author: Andrii Nakryiko <andriin@fb.com>
Date:   Mon May 18 16:45:16 2020 -0700

    selftest/bpf: Make bpf_iter selftest compilable against old vmlinux.h
    
    It's good to be able to compile bpf_iter selftest even on systems that don't
    have the very latest vmlinux.h, e.g., for libbpf tests against older kernels in
    Travis CI. To that extent, re-define bpf_iter_meta and corresponding bpf_iter
    context structs in each selftest. To avoid type clashes with vmlinux.h, rename
    vmlinux.h's definitions to get them out of the way.
    
    Signed-off-by: Andrii Nakryiko <andriin@fb.com>
    Signed-off-by: Alexei Starovoitov <ast@kernel.org>
    Acked-by: Yonghong Song <yhs@fb.com>
    Acked-by: Jesper Dangaard Brouer <brouer@redhat.com>
    Link: https://lore.kernel.org/bpf/20200518234516.3915052-1-andriin@fb.com

diff --git a/tools/testing/selftests/bpf/progs/bpf_iter_test_kern_common.h b/tools/testing/selftests/bpf/progs/bpf_iter_test_kern_common.h
index bdd51cf14b54..dee1339e6905 100644
--- a/tools/testing/selftests/bpf/progs/bpf_iter_test_kern_common.h
+++ b/tools/testing/selftests/bpf/progs/bpf_iter_test_kern_common.h
@@ -1,11 +1,27 @@
 /* SPDX-License-Identifier: GPL-2.0 */
 /* Copyright (c) 2020 Facebook */
+/* "undefine" structs in vmlinux.h, because we "override" them below */
+#define bpf_iter_meta bpf_iter_meta___not_used
+#define bpf_iter__task bpf_iter__task___not_used
 #include "vmlinux.h"
+#undef bpf_iter_meta
+#undef bpf_iter__task
 #include <bpf/bpf_helpers.h>
 
 char _license[] SEC("license") = "GPL";
 int count = 0;
 
+struct bpf_iter_meta {
+	struct seq_file *seq;
+	__u64 session_id;
+	__u64 seq_num;
+} __attribute__((preserve_access_index));
+
+struct bpf_iter__task {
+	struct bpf_iter_meta *meta;
+	struct task_struct *task;
+} __attribute__((preserve_access_index));
+
 SEC("iter/task")
 int dump_task(struct bpf_iter__task *ctx)
 {

commit 6879c042e10584ea9d5e2204939cafadcd500465
Author: Yonghong Song <yhs@fb.com>
Date:   Sat May 9 10:59:23 2020 -0700

    tools/bpf: selftests: Add bpf_iter selftests
    
    The added test includes the following subtests:
      - test verifier change for btf_id_or_null
      - test load/create_iter/read for
        ipv6_route/netlink/bpf_map/task/task_file
      - test anon bpf iterator
      - test anon bpf iterator reading one char at a time
      - test file bpf iterator
      - test overflow (single bpf program output not overflow)
      - test overflow (single bpf program output overflows)
      - test bpf prog returning 1
    
    The ipv6_route tests the following verifier change
      - access fields in the variable length array of the structure.
    
    The netlink load tests the following verifier change
      - put a btf_id ptr value in a stack and accessible to
        tracing/iter programs.
    
    The anon bpf iterator also tests link auto attach through skeleton.
    
      $ test_progs -n 2
      #2/1 btf_id_or_null:OK
      #2/2 ipv6_route:OK
      #2/3 netlink:OK
      #2/4 bpf_map:OK
      #2/5 task:OK
      #2/6 task_file:OK
      #2/7 anon:OK
      #2/8 anon-read-one-char:OK
      #2/9 file:OK
      #2/10 overflow:OK
      #2/11 overflow-e2big:OK
      #2/12 prog-ret-1:OK
      #2 bpf_iter:OK
      Summary: 1/12 PASSED, 0 SKIPPED, 0 FAILED
    
    Signed-off-by: Yonghong Song <yhs@fb.com>
    Signed-off-by: Alexei Starovoitov <ast@kernel.org>
    Acked-by: Andrii Nakryiko <andriin@fb.com>
    Link: https://lore.kernel.org/bpf/20200509175923.2477637-1-yhs@fb.com

diff --git a/tools/testing/selftests/bpf/progs/bpf_iter_test_kern_common.h b/tools/testing/selftests/bpf/progs/bpf_iter_test_kern_common.h
new file mode 100644
index 000000000000..bdd51cf14b54
--- /dev/null
+++ b/tools/testing/selftests/bpf/progs/bpf_iter_test_kern_common.h
@@ -0,0 +1,22 @@
+/* SPDX-License-Identifier: GPL-2.0 */
+/* Copyright (c) 2020 Facebook */
+#include "vmlinux.h"
+#include <bpf/bpf_helpers.h>
+
+char _license[] SEC("license") = "GPL";
+int count = 0;
+
+SEC("iter/task")
+int dump_task(struct bpf_iter__task *ctx)
+{
+	struct seq_file *seq = ctx->meta->seq;
+	char c;
+
+	if (count < 4) {
+		c = START_CHAR + count;
+		bpf_seq_write(seq, &c, sizeof(c));
+		count++;
+	}
+
+	return 0;
+}
