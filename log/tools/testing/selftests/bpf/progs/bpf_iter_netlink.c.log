commit 9c82a63cf3701b78cd092c69c3e75ff806837194
Author: Andrii Nakryiko <andriin@fb.com>
Date:   Fri Jun 19 16:04:22 2020 -0700

    libbpf: Fix CO-RE relocs against .text section
    
    bpf_object__find_program_by_title(), used by CO-RE relocation code, doesn't
    return .text "BPF program", if it is a function storage for sub-programs.
    Because of that, any CO-RE relocation in helper non-inlined functions will
    fail. Fix this by searching for .text-corresponding BPF program manually.
    
    Adjust one of bpf_iter selftest to exhibit this pattern.
    
    Fixes: ddc7c3042614 ("libbpf: implement BPF CO-RE offset relocation algorithm")
    Reported-by: Yonghong Song <yhs@fb.com>
    Signed-off-by: Andrii Nakryiko <andriin@fb.com>
    Signed-off-by: Yonghong Song <yhs@fb.com>
    Signed-off-by: Alexei Starovoitov <ast@kernel.org>
    Acked-by: Yonghong Song <yhs@fb.com>
    Link: https://lore.kernel.org/bpf/20200619230423.691274-1-andriin@fb.com

diff --git a/tools/testing/selftests/bpf/progs/bpf_iter_netlink.c b/tools/testing/selftests/bpf/progs/bpf_iter_netlink.c
index e7b8753eac0b..75ecf956a2df 100644
--- a/tools/testing/selftests/bpf/progs/bpf_iter_netlink.c
+++ b/tools/testing/selftests/bpf/progs/bpf_iter_netlink.c
@@ -25,7 +25,7 @@ struct bpf_iter__netlink {
 	struct netlink_sock *sk;
 } __attribute__((preserve_access_index));
 
-static inline struct inode *SOCK_INODE(struct socket *socket)
+static __attribute__((noinline)) struct inode *SOCK_INODE(struct socket *socket)
 {
 	return &container_of(socket, struct socket_alloc, socket)->vfs_inode;
 }

commit b9f4c01f3e0b06579a8074dcc8638fae89a1ca67
Author: Andrii Nakryiko <andriin@fb.com>
Date:   Mon May 18 16:45:16 2020 -0700

    selftest/bpf: Make bpf_iter selftest compilable against old vmlinux.h
    
    It's good to be able to compile bpf_iter selftest even on systems that don't
    have the very latest vmlinux.h, e.g., for libbpf tests against older kernels in
    Travis CI. To that extent, re-define bpf_iter_meta and corresponding bpf_iter
    context structs in each selftest. To avoid type clashes with vmlinux.h, rename
    vmlinux.h's definitions to get them out of the way.
    
    Signed-off-by: Andrii Nakryiko <andriin@fb.com>
    Signed-off-by: Alexei Starovoitov <ast@kernel.org>
    Acked-by: Yonghong Song <yhs@fb.com>
    Acked-by: Jesper Dangaard Brouer <brouer@redhat.com>
    Link: https://lore.kernel.org/bpf/20200518234516.3915052-1-andriin@fb.com

diff --git a/tools/testing/selftests/bpf/progs/bpf_iter_netlink.c b/tools/testing/selftests/bpf/progs/bpf_iter_netlink.c
index 6b40a233d4e0..e7b8753eac0b 100644
--- a/tools/testing/selftests/bpf/progs/bpf_iter_netlink.c
+++ b/tools/testing/selftests/bpf/progs/bpf_iter_netlink.c
@@ -1,6 +1,11 @@
 // SPDX-License-Identifier: GPL-2.0
 /* Copyright (c) 2020 Facebook */
+/* "undefine" structs in vmlinux.h, because we "override" them below */
+#define bpf_iter_meta bpf_iter_meta___not_used
+#define bpf_iter__netlink bpf_iter__netlink___not_used
 #include "vmlinux.h"
+#undef bpf_iter_meta
+#undef bpf_iter__netlink
 #include <bpf/bpf_helpers.h>
 #include <bpf/bpf_tracing.h>
 
@@ -9,6 +14,17 @@ char _license[] SEC("license") = "GPL";
 #define sk_rmem_alloc	sk_backlog.rmem_alloc
 #define sk_refcnt	__sk_common.skc_refcnt
 
+struct bpf_iter_meta {
+	struct seq_file *seq;
+	__u64 session_id;
+	__u64 seq_num;
+} __attribute__((preserve_access_index));
+
+struct bpf_iter__netlink {
+	struct bpf_iter_meta *meta;
+	struct netlink_sock *sk;
+} __attribute__((preserve_access_index));
+
 static inline struct inode *SOCK_INODE(struct socket *socket)
 {
 	return &container_of(socket, struct socket_alloc, socket)->vfs_inode;

commit 7c128a6bbd4f5b6780a90f3ce9aff192b7dd9d6a
Author: Yonghong Song <yhs@fb.com>
Date:   Sat May 9 10:59:21 2020 -0700

    tools/bpf: selftests: Add iterator programs for ipv6_route and netlink
    
    Two bpf programs are added in this patch for netlink and ipv6_route
    target. On my VM, I am able to achieve identical
    results compared to /proc/net/netlink and /proc/net/ipv6_route.
    
      $ cat /proc/net/netlink
      sk               Eth Pid        Groups   Rmem     Wmem     Dump  Locks    Drops    Inode
      000000002c42d58b 0   0          00000000 0        0        0     2        0        7
      00000000a4e8b5e1 0   1          00000551 0        0        0     2        0        18719
      00000000e1b1c195 4   0          00000000 0        0        0     2        0        16422
      000000007e6b29f9 6   0          00000000 0        0        0     2        0        16424
      ....
      00000000159a170d 15  1862       00000002 0        0        0     2        0        1886
      000000009aca4bc9 15  3918224839 00000002 0        0        0     2        0        19076
      00000000d0ab31d2 15  1          00000002 0        0        0     2        0        18683
      000000008398fb08 16  0          00000000 0        0        0     2        0        27
      $ cat /sys/fs/bpf/my_netlink
      sk               Eth Pid        Groups   Rmem     Wmem     Dump  Locks    Drops    Inode
      000000002c42d58b 0   0          00000000 0        0        0     2        0        7
      00000000a4e8b5e1 0   1          00000551 0        0        0     2        0        18719
      00000000e1b1c195 4   0          00000000 0        0        0     2        0        16422
      000000007e6b29f9 6   0          00000000 0        0        0     2        0        16424
      ....
      00000000159a170d 15  1862       00000002 0        0        0     2        0        1886
      000000009aca4bc9 15  3918224839 00000002 0        0        0     2        0        19076
      00000000d0ab31d2 15  1          00000002 0        0        0     2        0        18683
      000000008398fb08 16  0          00000000 0        0        0     2        0        27
    
      $ cat /proc/net/ipv6_route
      fe800000000000000000000000000000 40 00000000000000000000000000000000 00 00000000000000000000000000000000 00000100 00000001 00000000 00000001     eth0
      00000000000000000000000000000000 00 00000000000000000000000000000000 00 00000000000000000000000000000000 ffffffff 00000001 00000000 00200200       lo
      00000000000000000000000000000001 80 00000000000000000000000000000000 00 00000000000000000000000000000000 00000000 00000003 00000000 80200001       lo
      fe80000000000000c04b03fffe7827ce 80 00000000000000000000000000000000 00 00000000000000000000000000000000 00000000 00000002 00000000 80200001     eth0
      ff000000000000000000000000000000 08 00000000000000000000000000000000 00 00000000000000000000000000000000 00000100 00000003 00000000 00000001     eth0
      00000000000000000000000000000000 00 00000000000000000000000000000000 00 00000000000000000000000000000000 ffffffff 00000001 00000000 00200200       lo
      $ cat /sys/fs/bpf/my_ipv6_route
      fe800000000000000000000000000000 40 00000000000000000000000000000000 00 00000000000000000000000000000000 00000100 00000001 00000000 00000001     eth0
      00000000000000000000000000000000 00 00000000000000000000000000000000 00 00000000000000000000000000000000 ffffffff 00000001 00000000 00200200       lo
      00000000000000000000000000000001 80 00000000000000000000000000000000 00 00000000000000000000000000000000 00000000 00000003 00000000 80200001       lo
      fe80000000000000c04b03fffe7827ce 80 00000000000000000000000000000000 00 00000000000000000000000000000000 00000000 00000002 00000000 80200001     eth0
      ff000000000000000000000000000000 08 00000000000000000000000000000000 00 00000000000000000000000000000000 00000100 00000003 00000000 00000001     eth0
      00000000000000000000000000000000 00 00000000000000000000000000000000 00 00000000000000000000000000000000 ffffffff 00000001 00000000 00200200       lo
    
    Signed-off-by: Yonghong Song <yhs@fb.com>
    Signed-off-by: Alexei Starovoitov <ast@kernel.org>
    Acked-by: Andrii Nakryiko <andriin@fb.com>
    Link: https://lore.kernel.org/bpf/20200509175921.2477493-1-yhs@fb.com

diff --git a/tools/testing/selftests/bpf/progs/bpf_iter_netlink.c b/tools/testing/selftests/bpf/progs/bpf_iter_netlink.c
new file mode 100644
index 000000000000..6b40a233d4e0
--- /dev/null
+++ b/tools/testing/selftests/bpf/progs/bpf_iter_netlink.c
@@ -0,0 +1,66 @@
+// SPDX-License-Identifier: GPL-2.0
+/* Copyright (c) 2020 Facebook */
+#include "vmlinux.h"
+#include <bpf/bpf_helpers.h>
+#include <bpf/bpf_tracing.h>
+
+char _license[] SEC("license") = "GPL";
+
+#define sk_rmem_alloc	sk_backlog.rmem_alloc
+#define sk_refcnt	__sk_common.skc_refcnt
+
+static inline struct inode *SOCK_INODE(struct socket *socket)
+{
+	return &container_of(socket, struct socket_alloc, socket)->vfs_inode;
+}
+
+SEC("iter/netlink")
+int dump_netlink(struct bpf_iter__netlink *ctx)
+{
+	struct seq_file *seq = ctx->meta->seq;
+	struct netlink_sock *nlk = ctx->sk;
+	unsigned long group, ino;
+	struct inode *inode;
+	struct socket *sk;
+	struct sock *s;
+
+	if (nlk == (void *)0)
+		return 0;
+
+	if (ctx->meta->seq_num == 0)
+		BPF_SEQ_PRINTF(seq, "sk               Eth Pid        Groups   "
+				    "Rmem     Wmem     Dump  Locks    Drops    "
+				    "Inode\n");
+
+	s = &nlk->sk;
+	BPF_SEQ_PRINTF(seq, "%pK %-3d ", s, s->sk_protocol);
+
+	if (!nlk->groups)  {
+		group = 0;
+	} else {
+		/* FIXME: temporary use bpf_probe_read here, needs
+		 * verifier support to do direct access.
+		 */
+		bpf_probe_read(&group, sizeof(group), &nlk->groups[0]);
+	}
+	BPF_SEQ_PRINTF(seq, "%-10u %08x %-8d %-8d %-5d %-8d ",
+		       nlk->portid, (u32)group,
+		       s->sk_rmem_alloc.counter,
+		       s->sk_wmem_alloc.refs.counter - 1,
+		       nlk->cb_running, s->sk_refcnt.refs.counter);
+
+	sk = s->sk_socket;
+	if (!sk) {
+		ino = 0;
+	} else {
+		/* FIXME: container_of inside SOCK_INODE has a forced
+		 * type conversion, and direct access cannot be used
+		 * with current verifier.
+		 */
+		inode = SOCK_INODE(sk);
+		bpf_probe_read(&ino, sizeof(ino), &inode->i_ino);
+	}
+	BPF_SEQ_PRINTF(seq, "%-8u %-8lu\n", s->sk_drops.counter, ino);
+
+	return 0;
+}
