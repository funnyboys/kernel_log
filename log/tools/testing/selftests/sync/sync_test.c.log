commit 5821ba969511daf27fa917515904f7b823259cf7
Author: Kees Cook <keescook@chromium.org>
Date:   Wed Apr 24 16:12:37 2019 -0700

    selftests: Add test plan API to kselftest.h and adjust callers
    
    The test plan for TAP needs to be declared immediately after the header.
    This adds the test plan API to kselftest.h and updates all callers to
    declare their expected test counts.
    
    Signed-off-by: Kees Cook <keescook@chromium.org>
    Signed-off-by: Shuah Khan <skhan@linuxfoundation.org>

diff --git a/tools/testing/selftests/sync/sync_test.c b/tools/testing/selftests/sync/sync_test.c
index 7f7938263c5c..3824b66f41a0 100644
--- a/tools/testing/selftests/sync/sync_test.c
+++ b/tools/testing/selftests/sync/sync_test.c
@@ -86,6 +86,7 @@ int main(void)
 	int err;
 
 	ksft_print_header();
+	ksft_set_plan(3 + 7);
 
 	sync_api_supported();
 

commit f471e1fd82df5061e3502056ab7aeb3cd399e83e
Author: Shuah Khan <shuahkh@osg.samsung.com>
Date:   Mon Jul 24 14:19:13 2017 -0600

    selftests: sync: convert to use TAP13 ksft framework
    
    Convert test to use TAP13 ksft framework. Output after conversion:
    
    TAP version 13
    # [RUN] Testing sync framework
    ok 1 [RUN]      test_alloc_timeline
    ok 2 [RUN]      test_alloc_fence
    ok 3 [RUN]      test_alloc_fence_negative
    ok 4 [RUN]      test_fence_one_timeline_wait
    ok 5 [RUN]      test_fence_one_timeline_merge
    ok 6 [RUN]      test_fence_merge_same_fence
    ok 7 [RUN]      test_fence_multi_timeline_wait
    ok 8 [RUN]      test_stress_two_threads_shared_timeline
    ok 9 [RUN]      test_consumer_stress_multi_producer_single_consumer
    ok 10 [RUN]     test_merge_stress_random_merge
    Pass 10 Fail 0 Xfail 0 Xpass 0 Skip 0
    1..10
    
    Signed-off-by: Shuah Khan <shuahkh@osg.samsung.com>
    Reviewed-by: Gustavo Padovan <gustavo.padovan@collabora.com>

diff --git a/tools/testing/selftests/sync/sync_test.c b/tools/testing/selftests/sync/sync_test.c
index 86ae45ad0347..7f7938263c5c 100644
--- a/tools/testing/selftests/sync/sync_test.c
+++ b/tools/testing/selftests/sync/sync_test.c
@@ -32,76 +32,82 @@
 #include <sys/stat.h>
 #include <sys/wait.h>
 #include <errno.h>
+#include <string.h>
 
+#include "../kselftest.h"
 #include "synctest.h"
 
 static int run_test(int (*test)(void), char *name)
 {
 	int result;
 	pid_t childpid;
+	int ret;
 
 	fflush(stdout);
 	childpid = fork();
 
 	if (childpid) {
 		waitpid(childpid, &result, 0);
-		if (WIFEXITED(result))
-			return WEXITSTATUS(result);
+		if (WIFEXITED(result)) {
+			ret = WEXITSTATUS(result);
+			if (!ret)
+				ksft_test_result_pass("[RUN]\t%s\n", name);
+			else
+				ksft_test_result_fail("[RUN]\t%s\n", name);
+			return ret;
+		}
 		return 1;
 	}
 
-	printf("[RUN]\tExecuting %s\n", name);
 	exit(test());
 }
 
-static int sync_api_supported(void)
+static void sync_api_supported(void)
 {
 	struct stat sbuf;
 	int ret;
 
 	ret = stat("/sys/kernel/debug/sync/sw_sync", &sbuf);
 	if (!ret)
-		return 0;
+		return;
 
-	if (errno == ENOENT) {
-		printf("SKIP: Sync framework not supported by kernel\n");
-		exit(0);
-	}
-	if (errno == EACCES) {
-		printf("SKIP: Run Sync test as root.\n");
-		exit(0);
-	}
+	if (errno == ENOENT)
+		ksft_exit_skip("Sync framework not supported by kernel\n");
 
-	perror("stat");
-	exit(ret);
+	if (errno == EACCES)
+		ksft_exit_skip("Run Sync test as root.\n");
 
+	ksft_exit_fail_msg("stat failed on /sys/kernel/debug/sync/sw_sync: %s",
+				strerror(errno));
 }
 
 int main(void)
 {
-	int err = 0;
+	int err;
+
+	ksft_print_header();
 
-	if (!sync_api_supported())
-		return 0;
+	sync_api_supported();
 
-	printf("[RUN]\tTesting sync framework\n");
+	ksft_print_msg("[RUN]\tTesting sync framework\n");
 
-	err += RUN_TEST(test_alloc_timeline);
-	err += RUN_TEST(test_alloc_fence);
-	err += RUN_TEST(test_alloc_fence_negative);
+	RUN_TEST(test_alloc_timeline);
+	RUN_TEST(test_alloc_fence);
+	RUN_TEST(test_alloc_fence_negative);
 
-	err += RUN_TEST(test_fence_one_timeline_wait);
-	err += RUN_TEST(test_fence_one_timeline_merge);
-	err += RUN_TEST(test_fence_merge_same_fence);
-	err += RUN_TEST(test_fence_multi_timeline_wait);
-	err += RUN_TEST(test_stress_two_threads_shared_timeline);
-	err += RUN_TEST(test_consumer_stress_multi_producer_single_consumer);
-	err += RUN_TEST(test_merge_stress_random_merge);
+	RUN_TEST(test_fence_one_timeline_wait);
+	RUN_TEST(test_fence_one_timeline_merge);
+	RUN_TEST(test_fence_merge_same_fence);
+	RUN_TEST(test_fence_multi_timeline_wait);
+	RUN_TEST(test_stress_two_threads_shared_timeline);
+	RUN_TEST(test_consumer_stress_multi_producer_single_consumer);
+	RUN_TEST(test_merge_stress_random_merge);
 
+	err = ksft_get_fail_cnt();
 	if (err)
-		printf("[FAIL]\tsync errors: %d\n", err);
-	else
-		printf("[OK]\tsync\n");
+		ksft_exit_fail_msg("%d out of %d sync tests failed\n",
+					err, ksft_test_num());
 
-	return !!err;
+	/* need this return to keep gcc happy */
+	return ksft_exit_pass();
 }

commit f6c44bbb79aa875d60dbd29ed1fa63923fb1fe81
Author: Shuah Khan <shuahkh@osg.samsung.com>
Date:   Fri Jul 21 20:23:11 2017 -0600

    selftests: sync: differentiate between sync unsupported and access errors
    
    Sync test doesn't differentiate between sync unsupported and test run
    by non-root user and treats both as unsupported cases.
    
    Fix it to add handling for these two different scenarios.
    
    Signed-off-by: Shuah Khan <shuahkh@osg.samsung.com>
    Reviewed-by: Gustavo Padovan <gustavo.padovan@collabora.com>

diff --git a/tools/testing/selftests/sync/sync_test.c b/tools/testing/selftests/sync/sync_test.c
index 62fa666e501a..86ae45ad0347 100644
--- a/tools/testing/selftests/sync/sync_test.c
+++ b/tools/testing/selftests/sync/sync_test.c
@@ -31,6 +31,7 @@
 #include <sys/types.h>
 #include <sys/stat.h>
 #include <sys/wait.h>
+#include <errno.h>
 
 #include "synctest.h"
 
@@ -56,18 +57,32 @@ static int run_test(int (*test)(void), char *name)
 static int sync_api_supported(void)
 {
 	struct stat sbuf;
+	int ret;
+
+	ret = stat("/sys/kernel/debug/sync/sw_sync", &sbuf);
+	if (!ret)
+		return 0;
+
+	if (errno == ENOENT) {
+		printf("SKIP: Sync framework not supported by kernel\n");
+		exit(0);
+	}
+	if (errno == EACCES) {
+		printf("SKIP: Run Sync test as root.\n");
+		exit(0);
+	}
+
+	perror("stat");
+	exit(ret);
 
-	return 0 == stat("/sys/kernel/debug/sync/sw_sync", &sbuf);
 }
 
 int main(void)
 {
 	int err = 0;
 
-	if (!sync_api_supported()) {
-		printf("SKIP: Sync framework not supported by kernel\n");
+	if (!sync_api_supported())
 		return 0;
-	}
 
 	printf("[RUN]\tTesting sync framework\n");
 

commit 4996976fcde4bb738ce68ca01a8b358d71aab7bb
Author: Michael Ellerman <mpe@ellerman.id.au>
Date:   Wed May 31 20:40:15 2017 +1000

    selftests: sync: Skip the test if kernel support is not found
    
    The "Sync framework" test doesn't work if the kernel has no support,
    obviously. Rather than reporting a failure, check for the kernel support
    by looking for /sys/kernel/debug/sync/sw_sync, and if not found skip the
    test.
    
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Reviewed-by: Gustavo Padovan <gustavo.padovan@collabora.com>
    Signed-off-by: Shuah Khan <shuahkh@osg.samsung.com>

diff --git a/tools/testing/selftests/sync/sync_test.c b/tools/testing/selftests/sync/sync_test.c
index 9ea08d9f0b13..62fa666e501a 100644
--- a/tools/testing/selftests/sync/sync_test.c
+++ b/tools/testing/selftests/sync/sync_test.c
@@ -29,6 +29,7 @@
 #include <unistd.h>
 #include <stdlib.h>
 #include <sys/types.h>
+#include <sys/stat.h>
 #include <sys/wait.h>
 
 #include "synctest.h"
@@ -52,10 +53,22 @@ static int run_test(int (*test)(void), char *name)
 	exit(test());
 }
 
+static int sync_api_supported(void)
+{
+	struct stat sbuf;
+
+	return 0 == stat("/sys/kernel/debug/sync/sw_sync", &sbuf);
+}
+
 int main(void)
 {
 	int err = 0;
 
+	if (!sync_api_supported()) {
+		printf("SKIP: Sync framework not supported by kernel\n");
+		return 0;
+	}
+
 	printf("[RUN]\tTesting sync framework\n");
 
 	err += RUN_TEST(test_alloc_timeline);

commit 499a1d11f2653483f87c3339c8c799bc259536e7
Author: Emilio L贸pez <emilio.lopez@collabora.co.uk>
Date:   Wed Oct 19 09:49:54 2016 -0300

    selftest: sync: stress test for merges
    
    This test is based on the libsync test suite from Android.
    This commit includes a test to stress merge operations.
    
    Signed-off-by: Emilio L贸pez <emilio.lopez@collabora.co.uk>
    Signed-off-by: Shuah Khan <shuahkh@osg.samsung.com>

diff --git a/tools/testing/selftests/sync/sync_test.c b/tools/testing/selftests/sync/sync_test.c
index 32f253499efd..9ea08d9f0b13 100644
--- a/tools/testing/selftests/sync/sync_test.c
+++ b/tools/testing/selftests/sync/sync_test.c
@@ -68,6 +68,7 @@ int main(void)
 	err += RUN_TEST(test_fence_multi_timeline_wait);
 	err += RUN_TEST(test_stress_two_threads_shared_timeline);
 	err += RUN_TEST(test_consumer_stress_multi_producer_single_consumer);
+	err += RUN_TEST(test_merge_stress_random_merge);
 
 	if (err)
 		printf("[FAIL]\tsync errors: %d\n", err);

commit c52dee5025d904896198b7090cf7df80a4028363
Author: Emilio L贸pez <emilio.lopez@collabora.co.uk>
Date:   Wed Oct 19 09:49:53 2016 -0300

    selftest: sync: stress consumer/producer test
    
    This test is based on the libsync test suite from Android.
    This commit includes a stress test that replicates a
    consumer/producer pattern.
    
    Signed-off-by: Emilio L贸pez <emilio.lopez@collabora.co.uk>
    Signed-off-by: Shuah Khan <shuahkh@osg.samsung.com>

diff --git a/tools/testing/selftests/sync/sync_test.c b/tools/testing/selftests/sync/sync_test.c
index 3bb1024315e6..32f253499efd 100644
--- a/tools/testing/selftests/sync/sync_test.c
+++ b/tools/testing/selftests/sync/sync_test.c
@@ -67,6 +67,7 @@ int main(void)
 	err += RUN_TEST(test_fence_merge_same_fence);
 	err += RUN_TEST(test_fence_multi_timeline_wait);
 	err += RUN_TEST(test_stress_two_threads_shared_timeline);
+	err += RUN_TEST(test_consumer_stress_multi_producer_single_consumer);
 
 	if (err)
 		printf("[FAIL]\tsync errors: %d\n", err);

commit 54b519f32ccd663ca8ee48d43c448271230d3670
Author: Emilio L贸pez <emilio.lopez@collabora.co.uk>
Date:   Wed Oct 19 09:49:52 2016 -0300

    selftest: sync: stress test for parallelism
    
    This test is based on the libsync test suite from Android.
    This commit includes a stress test that invokes operations
    in parallel.
    
    Signed-off-by: Emilio L贸pez <emilio.lopez@collabora.co.uk>
    Signed-off-by: Shuah Khan <shuahkh@osg.samsung.com>

diff --git a/tools/testing/selftests/sync/sync_test.c b/tools/testing/selftests/sync/sync_test.c
index eab5ceb7b571..3bb1024315e6 100644
--- a/tools/testing/selftests/sync/sync_test.c
+++ b/tools/testing/selftests/sync/sync_test.c
@@ -66,6 +66,7 @@ int main(void)
 	err += RUN_TEST(test_fence_one_timeline_merge);
 	err += RUN_TEST(test_fence_merge_same_fence);
 	err += RUN_TEST(test_fence_multi_timeline_wait);
+	err += RUN_TEST(test_stress_two_threads_shared_timeline);
 
 	if (err)
 		printf("[FAIL]\tsync errors: %d\n", err);

commit fdba7cffc32b22afb8070a433c091448b519923f
Author: Emilio L贸pez <emilio.lopez@collabora.co.uk>
Date:   Wed Oct 19 09:49:51 2016 -0300

    selftest: sync: wait tests for sw_sync framework
    
    These tests are based on the libsync test suite from Android.
    This commit includes tests for waiting on fences.
    
    Signed-off-by: Emilio L贸pez <emilio.lopez@collabora.co.uk>
    Signed-off-by: Shuah Khan <shuahkh@osg.samsung.com>

diff --git a/tools/testing/selftests/sync/sync_test.c b/tools/testing/selftests/sync/sync_test.c
index ab37eee8749a..eab5ceb7b571 100644
--- a/tools/testing/selftests/sync/sync_test.c
+++ b/tools/testing/selftests/sync/sync_test.c
@@ -65,6 +65,7 @@ int main(void)
 	err += RUN_TEST(test_fence_one_timeline_wait);
 	err += RUN_TEST(test_fence_one_timeline_merge);
 	err += RUN_TEST(test_fence_merge_same_fence);
+	err += RUN_TEST(test_fence_multi_timeline_wait);
 
 	if (err)
 		printf("[FAIL]\tsync errors: %d\n", err);

commit 1c5839c6eefbb938052c57bc32f66b6f276431f3
Author: Emilio L贸pez <emilio.lopez@collabora.co.uk>
Date:   Wed Oct 19 09:49:50 2016 -0300

    selftest: sync: merge tests for sw_sync framework
    
    These tests are based on the libsync test suite from Android.
    This commit includes tests for basic merge operations.
    
    Signed-off-by: Emilio L贸pez <emilio.lopez@collabora.co.uk>
    Signed-off-by: Shuah Khan <shuahkh@osg.samsung.com>

diff --git a/tools/testing/selftests/sync/sync_test.c b/tools/testing/selftests/sync/sync_test.c
index b442292bdfc9..ab37eee8749a 100644
--- a/tools/testing/selftests/sync/sync_test.c
+++ b/tools/testing/selftests/sync/sync_test.c
@@ -64,6 +64,7 @@ int main(void)
 
 	err += RUN_TEST(test_fence_one_timeline_wait);
 	err += RUN_TEST(test_fence_one_timeline_merge);
+	err += RUN_TEST(test_fence_merge_same_fence);
 
 	if (err)
 		printf("[FAIL]\tsync errors: %d\n", err);

commit 6a5b7d2c55ca8eca3dc5cc6355885e286ef6df7f
Author: Emilio L贸pez <emilio.lopez@collabora.co.uk>
Date:   Wed Oct 19 09:49:49 2016 -0300

    selftest: sync: fence tests for sw_sync framework
    
    These tests are based on the libsync test suite from Android.
    This commit includes tests for basic fence creation.
    
    Signed-off-by: Emilio L贸pez <emilio.lopez@collabora.co.uk>
    Signed-off-by: Shuah Khan <shuahkh@osg.samsung.com>

diff --git a/tools/testing/selftests/sync/sync_test.c b/tools/testing/selftests/sync/sync_test.c
index e471ba9390ca..b442292bdfc9 100644
--- a/tools/testing/selftests/sync/sync_test.c
+++ b/tools/testing/selftests/sync/sync_test.c
@@ -62,6 +62,9 @@ int main(void)
 	err += RUN_TEST(test_alloc_fence);
 	err += RUN_TEST(test_alloc_fence_negative);
 
+	err += RUN_TEST(test_fence_one_timeline_wait);
+	err += RUN_TEST(test_fence_one_timeline_merge);
+
 	if (err)
 		printf("[FAIL]\tsync errors: %d\n", err);
 	else

commit 82208160ae35ca00b5494c5c90c1a8721b15bdb1
Author: Emilio L贸pez <emilio.lopez@collabora.co.uk>
Date:   Wed Oct 19 09:49:48 2016 -0300

    selftest: sync: basic tests for sw_sync framework
    
    These tests are based on the libsync test suite from Android.
    This commit lays the ground for future tests, as well as includes
    tests for a variety of basic allocation commands.
    
    Signed-off-by: Emilio L贸pez <emilio.lopez@collabora.co.uk>
    Signed-off-by: Shuah Khan <shuahkh@osg.samsung.com>

diff --git a/tools/testing/selftests/sync/sync_test.c b/tools/testing/selftests/sync/sync_test.c
new file mode 100644
index 000000000000..e471ba9390ca
--- /dev/null
+++ b/tools/testing/selftests/sync/sync_test.c
@@ -0,0 +1,71 @@
+/*
+ *  sync test runner
+ *  Copyright 2015-2016 Collabora Ltd.
+ *
+ *  Based on the implementation from the Android Open Source Project,
+ *
+ *  Copyright 2012 Google, Inc
+ *
+ *  Permission is hereby granted, free of charge, to any person obtaining a
+ *  copy of this software and associated documentation files (the "Software"),
+ *  to deal in the Software without restriction, including without limitation
+ *  the rights to use, copy, modify, merge, publish, distribute, sublicense,
+ *  and/or sell copies of the Software, and to permit persons to whom the
+ *  Software is furnished to do so, subject to the following conditions:
+ *
+ *  The above copyright notice and this permission notice shall be included in
+ *  all copies or substantial portions of the Software.
+ *
+ *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+ *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
+ *  THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
+ *  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
+ *  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
+ *  OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+#include <stdio.h>
+#include <unistd.h>
+#include <stdlib.h>
+#include <sys/types.h>
+#include <sys/wait.h>
+
+#include "synctest.h"
+
+static int run_test(int (*test)(void), char *name)
+{
+	int result;
+	pid_t childpid;
+
+	fflush(stdout);
+	childpid = fork();
+
+	if (childpid) {
+		waitpid(childpid, &result, 0);
+		if (WIFEXITED(result))
+			return WEXITSTATUS(result);
+		return 1;
+	}
+
+	printf("[RUN]\tExecuting %s\n", name);
+	exit(test());
+}
+
+int main(void)
+{
+	int err = 0;
+
+	printf("[RUN]\tTesting sync framework\n");
+
+	err += RUN_TEST(test_alloc_timeline);
+	err += RUN_TEST(test_alloc_fence);
+	err += RUN_TEST(test_alloc_fence_negative);
+
+	if (err)
+		printf("[FAIL]\tsync errors: %d\n", err);
+	else
+		printf("[OK]\tsync\n");
+
+	return !!err;
+}
