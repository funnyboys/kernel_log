commit 86f56395feb2b106b125c47e72192e37da5dd088
Author: Christian Brauner <christian.brauner@ubuntu.com>
Date:   Wed Jun 17 00:48:54 2020 +0200

    tests: test for setns() EINVAL regression
    
    Verify that setns() reports EINVAL when an fd is passed that refers to an
    open file but the file is not a file descriptor useable to interact with
    namespaces.
    
    Cc: Jan Stancek <jstancek@redhat.com>
    Cc: Cyril Hrubis <chrubis@suse.cz>
    Link: https://lore.kernel.org/lkml/20200615085836.GR12456@shao2-debian
    Signed-off-by: Christian Brauner <christian.brauner@ubuntu.com>

diff --git a/tools/testing/selftests/pidfd/pidfd.h b/tools/testing/selftests/pidfd/pidfd.h
index c1921a53dbed..8d728eda783d 100644
--- a/tools/testing/selftests/pidfd/pidfd.h
+++ b/tools/testing/selftests/pidfd/pidfd.h
@@ -95,4 +95,9 @@ static inline int sys_pidfd_getfd(int pidfd, int fd, int flags)
 	return syscall(__NR_pidfd_getfd, pidfd, fd, flags);
 }
 
+static inline int sys_memfd_create(const char *name, unsigned int flags)
+{
+	return syscall(__NR_memfd_create, name, flags);
+}
+
 #endif /* __PIDFD_H */

commit 6952a4f646446fde9e190b62c5e45f84c6cf91aa
Author: Christian Brauner <christian.brauner@ubuntu.com>
Date:   Sun Mar 8 17:26:32 2020 +0100

    selftests: add pid namespace ENOMEM regression test
    
    We recently regressed (cf. [1] and its corresponding fix in [2]) returning
    ENOMEM when trying to create a process in a pid namespace whose init
    process/child subreaper has already died. This has caused confusion at
    least once before that (cf. [3]). Let's add a simple regression test to
    catch this in the future.
    
    [1]: 49cb2fc42ce4 ("fork: extend clone3() to support setting a PID")
    [2]: b26ebfe12f34 ("pid: Fix error return value in some cases")
    [3]: 35f71bc0a09a ("fork: report pid reservation failure properly")
    Cc: Corey Minyard <cminyard@mvista.com>
    Cc: Oleg Nesterov <oleg@redhat.com>
    Cc: Adrian Reber <areber@redhat.com>
    Cc: Dmitry Safonov <0x7f454c46@gmail.com>
    Cc: Andrei Vagin <avagin@gmail.com>
    Signed-off-by: Christian Brauner <christian.brauner@ubuntu.com>

diff --git a/tools/testing/selftests/pidfd/pidfd.h b/tools/testing/selftests/pidfd/pidfd.h
index d482515604db..c1921a53dbed 100644
--- a/tools/testing/selftests/pidfd/pidfd.h
+++ b/tools/testing/selftests/pidfd/pidfd.h
@@ -13,6 +13,8 @@
 #include <string.h>
 #include <syscall.h>
 #include <sys/mount.h>
+#include <sys/types.h>
+#include <sys/wait.h>
 
 #include "../kselftest.h"
 

commit 873dfd7881d1d8840bf69c8c164f5323db7417fa
Author: Sargun Dhillon <sargun@sargun.me>
Date:   Tue Jan 7 09:59:27 2020 -0800

    test: Add test for pidfd getfd
    
    The following tests:
      * Fetch FD, and then compare via kcmp
      * Make sure getfd can be blocked by blocking ptrace_may_access
      * Making sure fetching bad FDs fails
      * Make sure trying to set flags to non-zero results in an EINVAL
    
    Signed-off-by: Sargun Dhillon <sargun@sargun.me>
    Acked-by: Christian Brauner <christian.brauner@ubuntu.com>
    Link: https://lore.kernel.org/r/20200107175927.4558-5-sargun@sargun.me
    Signed-off-by: Christian Brauner <christian.brauner@ubuntu.com>

diff --git a/tools/testing/selftests/pidfd/pidfd.h b/tools/testing/selftests/pidfd/pidfd.h
index c6bc68329f4b..d482515604db 100644
--- a/tools/testing/selftests/pidfd/pidfd.h
+++ b/tools/testing/selftests/pidfd/pidfd.h
@@ -36,6 +36,10 @@
 #define __NR_clone3 -1
 #endif
 
+#ifndef __NR_pidfd_getfd
+#define __NR_pidfd_getfd -1
+#endif
+
 /*
  * The kernel reserves 300 pids via RESERVED_PIDS in kernel/pid.c
  * That means, when it wraps around any pid < 300 will be skipped.
@@ -84,4 +88,9 @@ static inline int sys_pidfd_send_signal(int pidfd, int sig, siginfo_t *info,
 	return syscall(__NR_pidfd_send_signal, pidfd, sig, info, flags);
 }
 
+static inline int sys_pidfd_getfd(int pidfd, int fd, int flags)
+{
+	return syscall(__NR_pidfd_getfd, pidfd, fd, flags);
+}
+
 #endif /* __PIDFD_H */

commit 2ec2f99abd2c75b507410c5def731fe1b483271b
Author: Suren Baghdasaryan <surenb@google.com>
Date:   Fri Jul 26 09:22:25 2019 -0700

    tests: move common definitions and functions into pidfd.h
    
    Move definitions and functions used across different pidfd tests into
    pidfd.h header.
    
    Signed-off-by: Suren Baghdasaryan <surenb@google.com>
    Reviewed-by: Christian Brauner <christian@brauner.io>
    Link: https://lore.kernel.org/r/20190726162226.252750-1-surenb@google.com
    Signed-off-by: Christian Brauner <christian.brauner@ubuntu.com>

diff --git a/tools/testing/selftests/pidfd/pidfd.h b/tools/testing/selftests/pidfd/pidfd.h
index 7d7d0ca05e0b..c6bc68329f4b 100644
--- a/tools/testing/selftests/pidfd/pidfd.h
+++ b/tools/testing/selftests/pidfd/pidfd.h
@@ -73,6 +73,11 @@ int wait_for_pid(pid_t pid)
 	return WEXITSTATUS(status);
 }
 
+static inline int sys_pidfd_open(pid_t pid, unsigned int flags)
+{
+	return syscall(__NR_pidfd_open, pid, flags);
+}
+
 static inline int sys_pidfd_send_signal(int pidfd, int sig, siginfo_t *info,
 					unsigned int flags)
 {

commit e63f3085709e92bd876e2977a07099d56bbda1c2
Author: Christian Brauner <christian.brauner@ubuntu.com>
Date:   Sun Jul 28 00:22:30 2019 +0200

    pidfd: add pidfd_wait tests
    
    Add tests for pidfd_wait() and CLONE_WAIT_PID:
    - test that waitid(P_PIDFD) fails on /proc/<pid>
    - test that waitid(P_PIDFD) fails on /dev/null
    - test that waitid(P_PIDFD) can wait on a pidfd
    - test that waitid(P_PIDFD) can wait on a pidfd and return siginfo_t
    - test that waitid(P_PIDFD) works with WEXITED
    - test that waitid(P_PIDFD) works with WSTOPPED
    - test that waitid(P_PIDFD) works with WUNTRACED
    - test that waitid(P_PIDFD) works with WCONTINUED
    - test that waitid(P_PIDFD) works with WNOWAIT
    - test that waitid(P_PIDFD)works with WNOHANG
    
    Signed-off-by: Christian Brauner <christian.brauner@ubuntu.com>
    Reviewed-by: Kees Cook <keescook@chromium.org>
    Cc: Arnd Bergmann <arnd@arndb.de>
    Cc: "Eric W. Biederman" <ebiederm@xmission.com>
    Cc: Joel Fernandes (Google) <joel@joelfernandes.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: David Howells <dhowells@redhat.com>
    Cc: Jann Horn <jannh@google.com>
    Cc: Andy Lutomirsky <luto@kernel.org>
    Cc: Andrew Morton <akpm@linux-foundation.org>
    Cc: Oleg Nesterov <oleg@redhat.com>
    Cc: Aleksa Sarai <cyphar@cyphar.com>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Al Viro <viro@zeniv.linux.org.uk>
    Link: https://lore.kernel.org/r/20190727222229.6516-3-christian@brauner.io

diff --git a/tools/testing/selftests/pidfd/pidfd.h b/tools/testing/selftests/pidfd/pidfd.h
index 8452e910463f..7d7d0ca05e0b 100644
--- a/tools/testing/selftests/pidfd/pidfd.h
+++ b/tools/testing/selftests/pidfd/pidfd.h
@@ -16,6 +16,26 @@
 
 #include "../kselftest.h"
 
+#ifndef P_PIDFD
+#define P_PIDFD 3
+#endif
+
+#ifndef CLONE_PIDFD
+#define CLONE_PIDFD 0x00001000
+#endif
+
+#ifndef __NR_pidfd_open
+#define __NR_pidfd_open -1
+#endif
+
+#ifndef __NR_pidfd_send_signal
+#define __NR_pidfd_send_signal -1
+#endif
+
+#ifndef __NR_clone3
+#define __NR_clone3 -1
+#endif
+
 /*
  * The kernel reserves 300 pids via RESERVED_PIDS in kernel/pid.c
  * That means, when it wraps around any pid < 300 will be skipped.
@@ -53,5 +73,10 @@ int wait_for_pid(pid_t pid)
 	return WEXITSTATUS(status);
 }
 
+static inline int sys_pidfd_send_signal(int pidfd, int sig, siginfo_t *info,
+					unsigned int flags)
+{
+	return syscall(__NR_pidfd_send_signal, pidfd, sig, info, flags);
+}
 
 #endif /* __PIDFD_H */

commit 172bb24a4f480c180bee646f6616f714ac4bcab2
Author: Christian Brauner <christian@brauner.io>
Date:   Sat Mar 23 12:24:21 2019 +0100

    tests: add pidfd_open() tests
    
    This adds testing for the new pidfd_open() syscalls. Specifically, we test:
    - that no invalid flags can be passed to pidfd_open()
    - that no invalid pid can be passed to pidfd_open()
    - that a pidfd can be retrieved with pidfd_open()
    - that the retrieved pidfd references the correct pid
    
    Signed-off-by: Christian Brauner <christian@brauner.io>
    Cc: Arnd Bergmann <arnd@arndb.de>
    Cc: "Eric W. Biederman" <ebiederm@xmission.com>
    Cc: Kees Cook <keescook@chromium.org>
    Cc: Joel Fernandes (Google) <joel@joelfernandes.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: Jann Horn <jannh@google.com>
    Cc: David Howells <dhowells@redhat.com>
    Cc: "Michael Kerrisk (man-pages)" <mtk.manpages@gmail.com>
    Cc: Andy Lutomirsky <luto@kernel.org>
    Cc: Andrew Morton <akpm@linux-foundation.org>
    Cc: Oleg Nesterov <oleg@redhat.com>
    Cc: Aleksa Sarai <cyphar@cyphar.com>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Al Viro <viro@zeniv.linux.org.uk>
    Cc: linux-api@vger.kernel.org

diff --git a/tools/testing/selftests/pidfd/pidfd.h b/tools/testing/selftests/pidfd/pidfd.h
new file mode 100644
index 000000000000..8452e910463f
--- /dev/null
+++ b/tools/testing/selftests/pidfd/pidfd.h
@@ -0,0 +1,57 @@
+/* SPDX-License-Identifier: GPL-2.0 */
+
+#ifndef __PIDFD_H
+#define __PIDFD_H
+
+#define _GNU_SOURCE
+#include <errno.h>
+#include <fcntl.h>
+#include <sched.h>
+#include <signal.h>
+#include <stdio.h>
+#include <stdlib.h>
+#include <string.h>
+#include <syscall.h>
+#include <sys/mount.h>
+
+#include "../kselftest.h"
+
+/*
+ * The kernel reserves 300 pids via RESERVED_PIDS in kernel/pid.c
+ * That means, when it wraps around any pid < 300 will be skipped.
+ * So we need to use a pid > 300 in order to test recycling.
+ */
+#define PID_RECYCLE 1000
+
+/*
+ * Define a few custom error codes for the child process to clearly indicate
+ * what is happening. This way we can tell the difference between a system
+ * error, a test error, etc.
+ */
+#define PIDFD_PASS 0
+#define PIDFD_FAIL 1
+#define PIDFD_ERROR 2
+#define PIDFD_SKIP 3
+#define PIDFD_XFAIL 4
+
+int wait_for_pid(pid_t pid)
+{
+	int status, ret;
+
+again:
+	ret = waitpid(pid, &status, 0);
+	if (ret == -1) {
+		if (errno == EINTR)
+			goto again;
+
+		return -1;
+	}
+
+	if (!WIFEXITED(status))
+		return -1;
+
+	return WEXITSTATUS(status);
+}
+
+
+#endif /* __PIDFD_H */
