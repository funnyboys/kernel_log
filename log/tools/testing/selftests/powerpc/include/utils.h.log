commit c790c3d2b0ec5979d83451d0688d1cd07e23d8ba
Author: Michael Ellerman <mpe@ellerman.id.au>
Date:   Mon May 20 20:55:20 2019 +1000

    selftests/powerpc: Add a test of spectre_v2 mitigations
    
    This test uses the PMU to count branch prediction hits/misses for a
    known loop, and compare the result to the reported spectre v2
    mitigation.
    
    This gives us a way of sanity checking that the reported mitigation is
    actually in effect.
    
    Sample output for some cases, eg:
    
      Power9:
        sysfs reports: 'Vulnerable'
         PM_BR_PRED_CCACHE: result        368 running/enabled 5792777124
        PM_BR_MPRED_CCACHE: result        319 running/enabled 5792775546
         PM_BR_PRED_PCACHE: result 2147483281 running/enabled 5792773128
        PM_BR_MPRED_PCACHE: result  213604201 running/enabled 5792771640
        Miss percent 9 %
        OK - Measured branch prediction rates match reported spectre v2 mitigation.
    
        sysfs reports: 'Mitigation: Indirect branch serialisation (kernel only)'
         PM_BR_PRED_CCACHE: result        895 running/enabled 5780320920
        PM_BR_MPRED_CCACHE: result        822 running/enabled 5780312414
         PM_BR_PRED_PCACHE: result 2147482754 running/enabled 5780308836
        PM_BR_MPRED_PCACHE: result  213639731 running/enabled 5780307912
        Miss percent 9 %
        OK - Measured branch prediction rates match reported spectre v2 mitigation.
    
        sysfs reports: 'Mitigation: Indirect branch cache disabled'
         PM_BR_PRED_CCACHE: result 2147483649 running/enabled 20540186160
        PM_BR_MPRED_CCACHE: result 2147483649 running/enabled 20540180056
         PM_BR_PRED_PCACHE: result          0 running/enabled 20540176090
        PM_BR_MPRED_PCACHE: result          0 running/enabled 20540174182
        Miss percent 100 %
        OK - Measured branch prediction rates match reported spectre v2 mitigation.
    
      Power8:
        sysfs reports: 'Vulnerable'
         PM_BR_PRED_CCACHE: result 2147483649 running/enabled 3505888142
        PM_BR_MPRED_CCACHE: result          9 running/enabled 3505882788
        Miss percent 0 %
        OK - Measured branch prediction rates match reported spectre v2 mitigation.
    
        sysfs reports: 'Mitigation: Indirect branch cache disabled'
         PM_BR_PRED_CCACHE: result 2147483649 running/enabled 16931421988
        PM_BR_MPRED_CCACHE: result 2147483649 running/enabled 16931416478
        Miss percent 100 %
        OK - Measured branch prediction rates match reported spectre v2 mitigation.
        success: spectre_v2
    
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Link: https://lore.kernel.org/r/20190520105520.22274-1-mpe@ellerman.id.au

diff --git a/tools/testing/selftests/powerpc/include/utils.h b/tools/testing/selftests/powerpc/include/utils.h
index 0e2b2e6284ac..e089a0c30d9a 100644
--- a/tools/testing/selftests/powerpc/include/utils.h
+++ b/tools/testing/selftests/powerpc/include/utils.h
@@ -34,6 +34,7 @@ int pick_online_cpu(void);
 
 int read_debugfs_file(char *debugfs_file, int *result);
 int write_debugfs_file(char *debugfs_file, int result);
+int read_sysfs_file(char *debugfs_file, char *result, size_t result_size);
 void set_dscr(unsigned long val);
 int perf_event_open_counter(unsigned int type,
 			    unsigned long config, int group_fd);

commit f50a7f3d9225dd374455f28138f79ae3074a7a3d
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Tue May 28 09:57:18 2019 -0700

    treewide: Replace GPLv2 boilerplate/reference with SPDX - rule 191
    
    Based on 1 normalized pattern(s):
    
      licensed under gplv2
    
    extracted by the scancode license scanner the SPDX license identifier
    
      GPL-2.0-only
    
    has been chosen to replace the boilerplate/reference in 99 file(s).
    
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Reviewed-by: Alexios Zavras <alexios.zavras@intel.com>
    Reviewed-by: Richard Fontana <rfontana@redhat.com>
    Reviewed-by: Allison Randal <allison@lohutok.net>
    Reviewed-by: Steve Winslow <swinslow@gmail.com>
    Cc: linux-spdx@vger.kernel.org
    Link: https://lkml.kernel.org/r/20190528170027.163048684@linutronix.de
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/tools/testing/selftests/powerpc/include/utils.h b/tools/testing/selftests/powerpc/include/utils.h
index 7636bf45d5d5..0e2b2e6284ac 100644
--- a/tools/testing/selftests/powerpc/include/utils.h
+++ b/tools/testing/selftests/powerpc/include/utils.h
@@ -1,6 +1,6 @@
+/* SPDX-License-Identifier: GPL-2.0-only */
 /*
  * Copyright 2013, Michael Ellerman, IBM Corp.
- * Licensed under GPLv2.
  */
 
 #ifndef _SELFTESTS_POWERPC_UTILS_H

commit a65329aa7d613288626275546074f1aae5a04965
Author: Breno Leitao <leitao@debian.org>
Date:   Tue Jan 8 09:31:21 2019 -0200

    selftests/powerpc: New TM signal self test
    
    A new self test that forces MSR[TS] to be set without calling any TM
    instruction. This test also tries to cause a page fault at a signal
    handler, exactly between MSR[TS] set and tm_recheckpoint(), forcing
    thread->texasr to be rewritten with TEXASR[FS] = 0, which will cause a BUG
    when tm_recheckpoint() is called.
    
    This test is not deterministic, since it is hard to guarantee that the page
    access will cause a page fault. In order to force more page faults at
    signal context, the signal handler and the ucontext are being mapped into a
    MADV_DONTNEED memory chunks.
    
    Tests have shown that the bug could be exposed with few interactions in a
    buggy kernel. This test is configured to loop 5000x, having a good chance
    to hit the kernel issue in just one run.  This self test takes less than
    two seconds to run.
    
    This test uses set/getcontext because the kernel will recheckpoint
    zeroed structures, causing the test to segfault, which is undesired because
    the test needs to rerun, so, there is a signal handler for SIGSEGV which
    will restart the test.
    
    v2: Uses the MADV_DONTNEED memory advice
    v3: Fix memcpy and 32-bits compilation
    v4: Does not define unused macros
    
    Signed-off-by: Breno Leitao <leitao@debian.org>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>

diff --git a/tools/testing/selftests/powerpc/include/utils.h b/tools/testing/selftests/powerpc/include/utils.h
index ae43a614835d..7636bf45d5d5 100644
--- a/tools/testing/selftests/powerpc/include/utils.h
+++ b/tools/testing/selftests/powerpc/include/utils.h
@@ -102,8 +102,10 @@ do {								\
 
 #if defined(__powerpc64__)
 #define UCONTEXT_NIA(UC)	(UC)->uc_mcontext.gp_regs[PT_NIP]
+#define UCONTEXT_MSR(UC)	(UC)->uc_mcontext.gp_regs[PT_MSR]
 #elif defined(__powerpc__)
 #define UCONTEXT_NIA(UC)	(UC)->uc_mcontext.uc_regs->gregs[PT_NIP]
+#define UCONTEXT_MSR(UC)	(UC)->uc_mcontext.uc_regs->gregs[PT_MSR]
 #else
 #error implement UCONTEXT_NIA
 #endif

commit e653b6567e9c1854f51fb649c676499498560977
Author: Breno Leitao <leitao@debian.org>
Date:   Wed Oct 31 11:38:21 2018 -0300

    selftests/powerpc: Create a new SKIP_IF macro
    
    This patch creates a new macro that skips a test and prints a message to
    stderr. This is useful to give an idea why the tests is being skipped,
    other than just skipping the test blindly.
    
    Signed-off-by: Breno Leitao <leitao@debian.org>
    Reviewed-by: Thiago Jung Bauermann <bauerman@linux.ibm.com>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>

diff --git a/tools/testing/selftests/powerpc/include/utils.h b/tools/testing/selftests/powerpc/include/utils.h
index 49621822d7c3..ae43a614835d 100644
--- a/tools/testing/selftests/powerpc/include/utils.h
+++ b/tools/testing/selftests/powerpc/include/utils.h
@@ -82,6 +82,16 @@ do {								\
 	}							\
 } while (0)
 
+#define SKIP_IF_MSG(x, msg)					\
+do {								\
+	if ((x)) {						\
+		fprintf(stderr,					\
+		"[SKIP] Test skipped on line %d: %s\n",		\
+		 __LINE__, msg);				\
+		return MAGIC_SKIP_RETURN_VALUE;			\
+	}							\
+} while (0)
+
 #define _str(s) #s
 #define str(s) _str(s)
 

commit d2bf793237b3aa9c4275a466eef3893eef593691
Author: Naveen N. Rao <naveen.n.rao@linux.vnet.ibm.com>
Date:   Mon May 21 20:43:57 2018 +0530

    selftests/powerpc: Add test to verify rfi flush across a system call
    
    This adds a test to verify proper functioning of the rfi flush
    capability implemented to mitigate meltdown. The test works by
    measuring the number of L1d cache misses encountered while loading
    data from memory. Across a system call, since the L1d cache is flushed
    when rfi_flush is enabled, the number of cache misses is expected to
    be relative to the number of cachelines corresponding to the data
    being loaded.
    
    The current system setting is reflected via powerpc/rfi_flush under
    debugfs (assumed to be /sys/kernel/debug/). This test verifies the
    expected result with rfi_flush enabled as well as when it is disabled.
    
    Signed-off-by: Anton Blanchard <anton@samba.org>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Signed-off-by: Naveen N. Rao <naveen.n.rao@linux.vnet.ibm.com>
    [mpe: Add SPDX tags, clang format, skip if the debugfs is missing, use
     __u64 and SANE_USERSPACE_TYPES to avoid printf() build errors.]
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>

diff --git a/tools/testing/selftests/powerpc/include/utils.h b/tools/testing/selftests/powerpc/include/utils.h
index da1b963cdb32..49621822d7c3 100644
--- a/tools/testing/selftests/powerpc/include/utils.h
+++ b/tools/testing/selftests/powerpc/include/utils.h
@@ -11,6 +11,7 @@
 #include <stdint.h>
 #include <stdbool.h>
 #include <linux/auxvec.h>
+#include <linux/perf_event.h>
 #include "reg.h"
 
 /* Avoid headaches with PRI?64 - just use %ll? always */
@@ -31,6 +32,15 @@ void *get_auxv_entry(int type);
 
 int pick_online_cpu(void);
 
+int read_debugfs_file(char *debugfs_file, int *result);
+int write_debugfs_file(char *debugfs_file, int result);
+void set_dscr(unsigned long val);
+int perf_event_open_counter(unsigned int type,
+			    unsigned long config, int group_fd);
+int perf_event_enable(int fd);
+int perf_event_disable(int fd);
+int perf_event_reset(int fd);
+
 static inline bool have_hwcap(unsigned long ftr)
 {
 	return ((unsigned long)get_auxv_entry(AT_HWCAP) & ftr) == ftr;

commit db3848515aff369404c31ef5a63699799913518f
Author: Naveen N. Rao <naveen.n.rao@linux.vnet.ibm.com>
Date:   Mon May 21 20:43:56 2018 +0530

    selftests/powerpc: Move UCONTEXT_NIA() into utils.h
    
    ... so that it can be used by others.
    
    Signed-off-by: Naveen N. Rao <naveen.n.rao@linux.vnet.ibm.com>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>

diff --git a/tools/testing/selftests/powerpc/include/utils.h b/tools/testing/selftests/powerpc/include/utils.h
index c58c370828b4..da1b963cdb32 100644
--- a/tools/testing/selftests/powerpc/include/utils.h
+++ b/tools/testing/selftests/powerpc/include/utils.h
@@ -80,4 +80,12 @@ do {								\
 #define PPC_FEATURE2_ARCH_3_00 0x00800000
 #endif
 
+#if defined(__powerpc64__)
+#define UCONTEXT_NIA(UC)	(UC)->uc_mcontext.gp_regs[PT_NIP]
+#elif defined(__powerpc__)
+#define UCONTEXT_NIA(UC)	(UC)->uc_mcontext.uc_regs->gregs[PT_NIP]
+#else
+#error implement UCONTEXT_NIA
+#endif
+
 #endif /* _SELFTESTS_POWERPC_UTILS_H */

commit 95f9b3af401f5b4daeb908a2c658e820e969f4e3
Author: Michael Ellerman <mpe@ellerman.id.au>
Date:   Thu Jul 26 22:24:57 2018 +1000

    selftests/powerpc: Add a helper for checking if we're on ppc64le
    
    Some of our selftests have only been tested on ppc64le and crash or
    behave weirdly on ppc64/ppc32. So add a helper for checking the UTS
    machine.
    
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>

diff --git a/tools/testing/selftests/powerpc/include/utils.h b/tools/testing/selftests/powerpc/include/utils.h
index 735815b3ad7f..c58c370828b4 100644
--- a/tools/testing/selftests/powerpc/include/utils.h
+++ b/tools/testing/selftests/powerpc/include/utils.h
@@ -48,6 +48,8 @@ static inline bool have_hwcap2(unsigned long ftr2)
 }
 #endif
 
+bool is_ppc64le(void);
+
 /* Yes, this is evil */
 #define FAIL_IF(x)						\
 do {								\

commit e3028437cb45c04a9caae4d6372bfe08e70293cd
Author: Michael Ellerman <mpe@ellerman.id.au>
Date:   Mon Feb 6 21:13:27 2017 +1100

    selftests/powerpc: Refactor the AUXV routines
    
    Refactor the AUXV routines so they are more composable. In a future test
    we want to look for many AUXV entries and we don't want to have to read
    /proc/self/auxv each time.
    
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>

diff --git a/tools/testing/selftests/powerpc/include/utils.h b/tools/testing/selftests/powerpc/include/utils.h
index 53405e8a52ab..735815b3ad7f 100644
--- a/tools/testing/selftests/powerpc/include/utils.h
+++ b/tools/testing/selftests/powerpc/include/utils.h
@@ -24,7 +24,11 @@ typedef uint8_t u8;
 
 void test_harness_set_timeout(uint64_t time);
 int test_harness(int (test_function)(void), char *name);
-extern void *get_auxv_entry(int type);
+
+int read_auxv(char *buf, ssize_t buf_size);
+void *find_auxv_entry(int type, char *auxv);
+void *get_auxv_entry(int type);
+
 int pick_online_cpu(void);
 
 static inline bool have_hwcap(unsigned long ftr)

commit 15ec3997aa3bffc461f7b47ca9365d4b0323c671
Author: Simon Guo <wei.guo.simon@gmail.com>
Date:   Fri Sep 30 10:32:51 2016 +0800

    selftests/powerpc: Move shared headers into new include dir
    
    There are some functions, especially register related, which can
    be shared across multiple selftests/powerpc test directories.
    
    This patch creates a new include directory to store those shared
    files, so that the file layout becomes more neat.
    
    Signed-off-by: Simon Guo <wei.guo.simon@gmail.com>
    [mpe: Reworked to move the headers only]
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>

diff --git a/tools/testing/selftests/powerpc/include/utils.h b/tools/testing/selftests/powerpc/include/utils.h
new file mode 100644
index 000000000000..53405e8a52ab
--- /dev/null
+++ b/tools/testing/selftests/powerpc/include/utils.h
@@ -0,0 +1,77 @@
+/*
+ * Copyright 2013, Michael Ellerman, IBM Corp.
+ * Licensed under GPLv2.
+ */
+
+#ifndef _SELFTESTS_POWERPC_UTILS_H
+#define _SELFTESTS_POWERPC_UTILS_H
+
+#define __cacheline_aligned __attribute__((aligned(128)))
+
+#include <stdint.h>
+#include <stdbool.h>
+#include <linux/auxvec.h>
+#include "reg.h"
+
+/* Avoid headaches with PRI?64 - just use %ll? always */
+typedef unsigned long long u64;
+typedef   signed long long s64;
+
+/* Just for familiarity */
+typedef uint32_t u32;
+typedef uint16_t u16;
+typedef uint8_t u8;
+
+void test_harness_set_timeout(uint64_t time);
+int test_harness(int (test_function)(void), char *name);
+extern void *get_auxv_entry(int type);
+int pick_online_cpu(void);
+
+static inline bool have_hwcap(unsigned long ftr)
+{
+	return ((unsigned long)get_auxv_entry(AT_HWCAP) & ftr) == ftr;
+}
+
+#ifdef AT_HWCAP2
+static inline bool have_hwcap2(unsigned long ftr2)
+{
+	return ((unsigned long)get_auxv_entry(AT_HWCAP2) & ftr2) == ftr2;
+}
+#else
+static inline bool have_hwcap2(unsigned long ftr2)
+{
+	return false;
+}
+#endif
+
+/* Yes, this is evil */
+#define FAIL_IF(x)						\
+do {								\
+	if ((x)) {						\
+		fprintf(stderr,					\
+		"[FAIL] Test FAILED on line %d\n", __LINE__);	\
+		return 1;					\
+	}							\
+} while (0)
+
+/* The test harness uses this, yes it's gross */
+#define MAGIC_SKIP_RETURN_VALUE	99
+
+#define SKIP_IF(x)						\
+do {								\
+	if ((x)) {						\
+		fprintf(stderr,					\
+		"[SKIP] Test skipped on line %d\n", __LINE__);	\
+		return MAGIC_SKIP_RETURN_VALUE;			\
+	}							\
+} while (0)
+
+#define _str(s) #s
+#define str(s) _str(s)
+
+/* POWER9 feature */
+#ifndef PPC_FEATURE2_ARCH_3_00
+#define PPC_FEATURE2_ARCH_3_00 0x00800000
+#endif
+
+#endif /* _SELFTESTS_POWERPC_UTILS_H */
