commit 3c01655ac82eb6d1cc2cfe9507031f1b5e0a6df1
Author: Paolo Bonzini <pbonzini@redhat.com>
Date:   Mon Jun 22 20:07:37 2020 -0400

    kselftest: ksft_test_num return type should be unsigned
    
    Fixes a compiler warning:
    
    In file included from sync_test.c:37:
    ../kselftest.h: In function ‘ksft_print_cnts’:
    ../kselftest.h:78:16: warning: comparison of integer expressions of different signedness: ‘unsigned int’ and ‘int’ [-Wsign-compare]
      if (ksft_plan != ksft_test_num())
                    ^~
    
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Shuah Khan <skhan@linuxfoundation.org>

diff --git a/tools/testing/selftests/kselftest.h b/tools/testing/selftests/kselftest.h
index 0ac49d91a260..862eee734553 100644
--- a/tools/testing/selftests/kselftest.h
+++ b/tools/testing/selftests/kselftest.h
@@ -36,7 +36,7 @@ struct ksft_count {
 static struct ksft_count ksft_cnt;
 static unsigned int ksft_plan;
 
-static inline int ksft_test_num(void)
+static inline unsigned int ksft_test_num(void)
 {
 	return ksft_cnt.ksft_pass + ksft_cnt.ksft_fail +
 		ksft_cnt.ksft_xfail + ksft_cnt.ksft_xpass +

commit fc2e634e997d84f2610a482b500865ef2c04fcde
Author: Aleksa Sarai <cyphar@cyphar.com>
Date:   Sat Jul 20 10:03:32 2019 +1000

    kselftest: save-and-restore errno to allow for %m formatting
    
    Previously, using "%m" in a ksft_* format string can result in strange
    output because the errno value wasn't saved before calling other libc
    functions. The solution is to simply save and restore the errno before
    we format the user-supplied format string.
    
    Signed-off-by: Aleksa Sarai <cyphar@cyphar.com>
    Signed-off-by: Shuah Khan <skhan@linuxfoundation.org>

diff --git a/tools/testing/selftests/kselftest.h b/tools/testing/selftests/kselftest.h
index ec15c4f6af55..0ac49d91a260 100644
--- a/tools/testing/selftests/kselftest.h
+++ b/tools/testing/selftests/kselftest.h
@@ -10,6 +10,7 @@
 #ifndef __KSELFTEST_H
 #define __KSELFTEST_H
 
+#include <errno.h>
 #include <stdlib.h>
 #include <unistd.h>
 #include <stdarg.h>
@@ -81,58 +82,68 @@ static inline void ksft_print_cnts(void)
 
 static inline void ksft_print_msg(const char *msg, ...)
 {
+	int saved_errno = errno;
 	va_list args;
 
 	va_start(args, msg);
 	printf("# ");
+	errno = saved_errno;
 	vprintf(msg, args);
 	va_end(args);
 }
 
 static inline void ksft_test_result_pass(const char *msg, ...)
 {
+	int saved_errno = errno;
 	va_list args;
 
 	ksft_cnt.ksft_pass++;
 
 	va_start(args, msg);
 	printf("ok %d ", ksft_test_num());
+	errno = saved_errno;
 	vprintf(msg, args);
 	va_end(args);
 }
 
 static inline void ksft_test_result_fail(const char *msg, ...)
 {
+	int saved_errno = errno;
 	va_list args;
 
 	ksft_cnt.ksft_fail++;
 
 	va_start(args, msg);
 	printf("not ok %d ", ksft_test_num());
+	errno = saved_errno;
 	vprintf(msg, args);
 	va_end(args);
 }
 
 static inline void ksft_test_result_skip(const char *msg, ...)
 {
+	int saved_errno = errno;
 	va_list args;
 
 	ksft_cnt.ksft_xskip++;
 
 	va_start(args, msg);
 	printf("not ok %d # SKIP ", ksft_test_num());
+	errno = saved_errno;
 	vprintf(msg, args);
 	va_end(args);
 }
 
 static inline void ksft_test_result_error(const char *msg, ...)
 {
+	int saved_errno = errno;
 	va_list args;
 
 	ksft_cnt.ksft_error++;
 
 	va_start(args, msg);
 	printf("not ok %d # error ", ksft_test_num());
+	errno = saved_errno;
 	vprintf(msg, args);
 	va_end(args);
 }
@@ -152,10 +163,12 @@ static inline int ksft_exit_fail(void)
 
 static inline int ksft_exit_fail_msg(const char *msg, ...)
 {
+	int saved_errno = errno;
 	va_list args;
 
 	va_start(args, msg);
 	printf("Bail out! ");
+	errno = saved_errno;
 	vprintf(msg, args);
 	va_end(args);
 
@@ -178,10 +191,12 @@ static inline int ksft_exit_xpass(void)
 static inline int ksft_exit_skip(const char *msg, ...)
 {
 	if (msg) {
+		int saved_errno = errno;
 		va_list args;
 
 		va_start(args, msg);
 		printf("not ok %d # SKIP ", 1 + ksft_test_num());
+		errno = saved_errno;
 		vprintf(msg, args);
 		va_end(args);
 	} else {

commit 5821ba969511daf27fa917515904f7b823259cf7
Author: Kees Cook <keescook@chromium.org>
Date:   Wed Apr 24 16:12:37 2019 -0700

    selftests: Add test plan API to kselftest.h and adjust callers
    
    The test plan for TAP needs to be declared immediately after the header.
    This adds the test plan API to kselftest.h and updates all callers to
    declare their expected test counts.
    
    Signed-off-by: Kees Cook <keescook@chromium.org>
    Signed-off-by: Shuah Khan <skhan@linuxfoundation.org>

diff --git a/tools/testing/selftests/kselftest.h b/tools/testing/selftests/kselftest.h
index 7f078e79a9fa..ec15c4f6af55 100644
--- a/tools/testing/selftests/kselftest.h
+++ b/tools/testing/selftests/kselftest.h
@@ -33,6 +33,7 @@ struct ksft_count {
 };
 
 static struct ksft_count ksft_cnt;
+static unsigned int ksft_plan;
 
 static inline int ksft_test_num(void)
 {
@@ -61,13 +62,21 @@ static inline void ksft_print_header(void)
 		printf("TAP version 13\n");
 }
 
+static inline void ksft_set_plan(unsigned int plan)
+{
+	ksft_plan = plan;
+	printf("1..%d\n", ksft_plan);
+}
+
 static inline void ksft_print_cnts(void)
 {
+	if (ksft_plan != ksft_test_num())
+		printf("# Planned tests != run tests (%u != %u)\n",
+			ksft_plan, ksft_test_num());
 	printf("# Pass %d Fail %d Xfail %d Xpass %d Skip %d Error %d\n",
 		ksft_cnt.ksft_pass, ksft_cnt.ksft_fail,
 		ksft_cnt.ksft_xfail, ksft_cnt.ksft_xpass,
 		ksft_cnt.ksft_xskip, ksft_cnt.ksft_error);
-	printf("1..%d\n", ksft_test_num());
 }
 
 static inline void ksft_print_msg(const char *msg, ...)
@@ -172,7 +181,7 @@ static inline int ksft_exit_skip(const char *msg, ...)
 		va_list args;
 
 		va_start(args, msg);
-		printf("not ok %d # SKIP ", ksft_test_num());
+		printf("not ok %d # SKIP ", 1 + ksft_test_num());
 		vprintf(msg, args);
 		va_end(args);
 	} else {

commit 5c069b6dedef1fab5420ca8658ed7f9ee4d26007
Author: Kees Cook <keescook@chromium.org>
Date:   Wed Apr 24 16:12:35 2019 -0700

    selftests: Move test output to diagnostic lines
    
    This changes the selftest output so that each test's output is prefixed
    with "# " as a TAP "diagnostic line".
    
    This creates a bit of a kernel-specific TAP dialect where the diagnostics
    precede the results. The TAP spec isn't entirely clear about this, though,
    so I think it's the correct solution so as to keep interactive runs making
    sense. If the output _followed_ the result line in the spec-suggested
    YAML form, each test would dump all of its output at once instead of as
    it went, making debugging harder.
    
    This does, however, solve the recursive TAP output problem, as sub-tests
    will simply be prefixed by "# ". Parsing sub-tests becomes a simple
    problem of just removing the first two characters of a given top-level
    test's diagnostic output, and parsing the results.
    
    Note that the shell construct needed to both get an exit code from
    the first command in a pipe and still filter the pipe (to add the "# "
    prefix) uses a POSIX solution rather than the bash "pipefail" option
    which is not supported by dash.
    
    Since some test environments may have a very minimal set of utilities
    available, the new prefixing code will fall back to doing line-at-a-time
    prefixing if perl and/or stdbuf are not available.
    
    Signed-off-by: Kees Cook <keescook@chromium.org>
    Signed-off-by: Shuah Khan <skhan@linuxfoundation.org>

diff --git a/tools/testing/selftests/kselftest.h b/tools/testing/selftests/kselftest.h
index 9f4147a6fdbc..7f078e79a9fa 100644
--- a/tools/testing/selftests/kselftest.h
+++ b/tools/testing/selftests/kselftest.h
@@ -63,7 +63,7 @@ static inline void ksft_print_header(void)
 
 static inline void ksft_print_cnts(void)
 {
-	printf("Pass %d Fail %d Xfail %d Xpass %d Skip %d Error %d\n",
+	printf("# Pass %d Fail %d Xfail %d Xpass %d Skip %d Error %d\n",
 		ksft_cnt.ksft_pass, ksft_cnt.ksft_fail,
 		ksft_cnt.ksft_xfail, ksft_cnt.ksft_xpass,
 		ksft_cnt.ksft_xskip, ksft_cnt.ksft_error);

commit b0df366bbd701c45e93af0dcb87ce22398589d1d
Author: Kees Cook <keescook@chromium.org>
Date:   Wed Apr 24 16:12:33 2019 -0700

    selftests: Add plan line and fix result line syntax
    
    The TAP version 13 spec requires a "plan" line, which has been missing.
    Since we always know how many tests we're going to run, emit the count on
    the plan line. This also fixes the result lines to remove the "1.." prefix
    which is against spec, and to mark skips with the correct "# SKIP" suffix.
    
    Signed-off-by: Kees Cook <keescook@chromium.org>
    Signed-off-by: Shuah Khan <skhan@linuxfoundation.org>

diff --git a/tools/testing/selftests/kselftest.h b/tools/testing/selftests/kselftest.h
index 47e1d995c182..9f4147a6fdbc 100644
--- a/tools/testing/selftests/kselftest.h
+++ b/tools/testing/selftests/kselftest.h
@@ -111,7 +111,7 @@ static inline void ksft_test_result_skip(const char *msg, ...)
 	ksft_cnt.ksft_xskip++;
 
 	va_start(args, msg);
-	printf("ok %d # skip ", ksft_test_num());
+	printf("not ok %d # SKIP ", ksft_test_num());
 	vprintf(msg, args);
 	va_end(args);
 }
@@ -172,7 +172,7 @@ static inline int ksft_exit_skip(const char *msg, ...)
 		va_list args;
 
 		va_start(args, msg);
-		printf("1..%d # Skipped: ", ksft_test_num());
+		printf("not ok %d # SKIP ", ksft_test_num());
 		vprintf(msg, args);
 		va_end(args);
 	} else {

commit a18261d71bbc625bc32abbcded71acc408cca393
Author: Tycho Andersen <tycho@tycho.ws>
Date:   Fri Jan 18 17:12:14 2019 -0700

    selftest: include stdio.h in kselftest.h
    
    While playing around with a way to skip the seccomp get_metadata test, I
    noticed that this header uses printf() without defining it, leading to,
    
    ../kselftest.h: In function ‘ksft_print_header’:
    ../kselftest.h:61:3: warning: implicit declaration of function ‘printf’ [-Wimplicit-function-declaration]
       printf("TAP version 13\n");
       ^~~~~~
    ../kselftest.h:61:3: warning: incompatible implicit declaration of built-in function ‘printf’
    ../kselftest.h:61:3: note: include ‘<stdio.h>’ or provide a declaration of ‘printf’
    
    if user code doesn't also use printf.
    
    Signed-off-by: Tycho Andersen <tycho@tycho.ws>
    Acked-by: Kees Cook <keescook@chromium.org>
    Signed-off-by: Shuah Khan <shuah@kernel.org>

diff --git a/tools/testing/selftests/kselftest.h b/tools/testing/selftests/kselftest.h
index a3edb2c8e43d..47e1d995c182 100644
--- a/tools/testing/selftests/kselftest.h
+++ b/tools/testing/selftests/kselftest.h
@@ -13,6 +13,7 @@
 #include <stdlib.h>
 #include <unistd.h>
 #include <stdarg.h>
+#include <stdio.h>
 
 /* define kselftest exit codes */
 #define KSFT_PASS  0

commit c31d02d1290e1e82a08015199e408228e152991f
Author: Thiago Jung Bauermann <bauerman@linux.ibm.com>
Date:   Tue Jul 24 23:57:25 2018 -0300

    selftests: kselftest: Remove outdated comment
    
    Commit 3c07aaef6598 ("selftests: kselftest: change KSFT_SKIP=4 instead of
    KSFT_PASS") reverted commit 11867a77eb85 ("selftests: kselftest framework:
    change skip exit code to 0") but missed removing the comment which that
    commit added, so do that now.
    
    Signed-off-by: Thiago Jung Bauermann <bauerman@linux.ibm.com>
    Signed-off-by: Shuah Khan (Samsung OSG) <shuah@kernel.org>

diff --git a/tools/testing/selftests/kselftest.h b/tools/testing/selftests/kselftest.h
index 15e6b75fc3a5..a3edb2c8e43d 100644
--- a/tools/testing/selftests/kselftest.h
+++ b/tools/testing/selftests/kselftest.h
@@ -19,7 +19,6 @@
 #define KSFT_FAIL  1
 #define KSFT_XFAIL 2
 #define KSFT_XPASS 3
-/* Treat skip as pass */
 #define KSFT_SKIP  4
 
 /* counters */

commit 3c07aaef65988473c6cea5bd194125f905953fcc
Author: Shuah Khan (Samsung OSG) <shuah@kernel.org>
Date:   Tue May 1 16:03:28 2018 -0600

    selftests: kselftest: change KSFT_SKIP=4 instead of KSFT_PASS
    
    KSFT_SKIP points to KSFT_PASS resulting in reporting skipped tests as
    Passed, when test programs exit with KSFT_SKIP or call ksft_exit_skip().
    If tests are skipped because of unmet dependencies and/or unsupported
    configuration, reporting them as passed leads to too many false positives.
    
    Fix it to return a skip code of 4 to clearly differentiate the skipped
    tests.
    
    Signed-off-by: Shuah Khan (Samsung OSG) <shuah@kernel.org>

diff --git a/tools/testing/selftests/kselftest.h b/tools/testing/selftests/kselftest.h
index 1b9d8ecdebce..15e6b75fc3a5 100644
--- a/tools/testing/selftests/kselftest.h
+++ b/tools/testing/selftests/kselftest.h
@@ -20,7 +20,7 @@
 #define KSFT_XFAIL 2
 #define KSFT_XPASS 3
 /* Treat skip as pass */
-#define KSFT_SKIP  KSFT_PASS
+#define KSFT_SKIP  4
 
 /* counters */
 struct ksft_count {

commit 10f531f6748228583b8c4244216e9e3f34d47379
Author: Shuah Khan <shuahkh@osg.samsung.com>
Date:   Wed Feb 21 17:11:54 2018 -0700

    selftests: kselftest framework: add handling for TAP header level
    
    Introduce environment variable KSFT_TAP_LEVEL to avoid printing
    nested TAP headers for each test. lib.mk run_tests target prints
    TAP header before invoking the test program or test script. Tests
    need a way to suppress TAP headers if it is already printed out.
    
    This new environment variable adds a way for ksft_print_header()
    print TAP header only when KSFT_TAP_LEVEL isn't set.
    
    lib.mk run_tests and test program should print TAP header and set
    KSFT_TAP_LEVEL to avoid a second TAP header to be printed.
    
    selftests Makefile should export KSFT_TAP_LEVEL and add TAP Header
    echo to the run_kselftest.sh script from emit_tests target handling.
    
    Signed-off-by: Shuah Khan <shuahkh@osg.samsung.com>

diff --git a/tools/testing/selftests/kselftest.h b/tools/testing/selftests/kselftest.h
index 1a52b03962a3..1b9d8ecdebce 100644
--- a/tools/testing/selftests/kselftest.h
+++ b/tools/testing/selftests/kselftest.h
@@ -57,7 +57,8 @@ static inline int ksft_get_error_cnt(void) { return ksft_cnt.ksft_error; }
 
 static inline void ksft_print_header(void)
 {
-	printf("TAP version 13\n");
+	if (!(getenv("KSFT_TAP_LEVEL")))
+		printf("TAP version 13\n");
 }
 
 static inline void ksft_print_cnts(void)

commit 7c466b97ccc6935c0a668cfefcda874c7560c3dc
Author: Shuah Khan <shuahkh@osg.samsung.com>
Date:   Tue Jan 9 19:22:31 2018 -0700

    selftests: kselftest.h: Add SPDX license identifier
    
    Replace GPL license statement with SPDX GPL-2.0 license identifier.
    
    Signed-off-by: Shuah Khan <shuahkh@osg.samsung.com>

diff --git a/tools/testing/selftests/kselftest.h b/tools/testing/selftests/kselftest.h
index 1ae565ed9bf0..1a52b03962a3 100644
--- a/tools/testing/selftests/kselftest.h
+++ b/tools/testing/selftests/kselftest.h
@@ -1,3 +1,4 @@
+/* SPDX-License-Identifier: GPL-2.0 */
 /*
  * kselftest.h:	kselftest framework return codes to include from
  *		selftests.
@@ -5,7 +6,6 @@
  * Copyright (c) 2014 Shuah Khan <shuahkh@osg.samsung.com>
  * Copyright (c) 2014 Samsung Electronics Co., Ltd.
  *
- * This file is released under the GPLv2.
  */
 #ifndef __KSELFTEST_H
 #define __KSELFTEST_H

commit 11867a77eb854248a1e7a1b4e8ba58aadadd7701
Author: Shuah Khan <shuahkh@osg.samsung.com>
Date:   Fri Aug 18 20:51:05 2017 -0600

    selftests: kselftest framework: change skip exit code to 0
    
    When a test is skipped, instead of using a special exit code of 4, treat
    it as pass condition and use exit code of 0. It makes sense to treat skip
    as pass since the test couldn't be run as opposed to a failed test.
    
    Signed-off-by: Shuah Khan <shuahkh@osg.samsung.com>

diff --git a/tools/testing/selftests/kselftest.h b/tools/testing/selftests/kselftest.h
index e2714d0a1452..1ae565ed9bf0 100644
--- a/tools/testing/selftests/kselftest.h
+++ b/tools/testing/selftests/kselftest.h
@@ -19,7 +19,8 @@
 #define KSFT_FAIL  1
 #define KSFT_XFAIL 2
 #define KSFT_XPASS 3
-#define KSFT_SKIP  4
+/* Treat skip as pass */
+#define KSFT_SKIP  KSFT_PASS
 
 /* counters */
 struct ksft_count {

commit c0bb2cf40e42b2fe5c8aa1c4f6f4d09c98839d91
Author: Shuah Khan <shuahkh@osg.samsung.com>
Date:   Fri Aug 4 15:07:19 2017 -0600

    selftests: kselftest framework: add error counter
    
    Some tests track errors in addition to test failures. Add ksft_error
    counter, ksft_get_error_cnt(), and ksft_test_result_error() API to
    get the counter value and print error message.
    
    Update ksft_print_cnts(), and ksft_test_num() to include error counter.
    
    Signed-off-by: Shuah Khan <shuahkh@osg.samsung.com>

diff --git a/tools/testing/selftests/kselftest.h b/tools/testing/selftests/kselftest.h
index 45bf25905279..e2714d0a1452 100644
--- a/tools/testing/selftests/kselftest.h
+++ b/tools/testing/selftests/kselftest.h
@@ -28,6 +28,7 @@ struct ksft_count {
 	unsigned int ksft_xfail;
 	unsigned int ksft_xpass;
 	unsigned int ksft_xskip;
+	unsigned int ksft_error;
 };
 
 static struct ksft_count ksft_cnt;
@@ -36,7 +37,7 @@ static inline int ksft_test_num(void)
 {
 	return ksft_cnt.ksft_pass + ksft_cnt.ksft_fail +
 		ksft_cnt.ksft_xfail + ksft_cnt.ksft_xpass +
-		ksft_cnt.ksft_xskip;
+		ksft_cnt.ksft_xskip + ksft_cnt.ksft_error;
 }
 
 static inline void ksft_inc_pass_cnt(void) { ksft_cnt.ksft_pass++; }
@@ -44,12 +45,14 @@ static inline void ksft_inc_fail_cnt(void) { ksft_cnt.ksft_fail++; }
 static inline void ksft_inc_xfail_cnt(void) { ksft_cnt.ksft_xfail++; }
 static inline void ksft_inc_xpass_cnt(void) { ksft_cnt.ksft_xpass++; }
 static inline void ksft_inc_xskip_cnt(void) { ksft_cnt.ksft_xskip++; }
+static inline void ksft_inc_error_cnt(void) { ksft_cnt.ksft_error++; }
 
 static inline int ksft_get_pass_cnt(void) { return ksft_cnt.ksft_pass; }
 static inline int ksft_get_fail_cnt(void) { return ksft_cnt.ksft_fail; }
 static inline int ksft_get_xfail_cnt(void) { return ksft_cnt.ksft_xfail; }
 static inline int ksft_get_xpass_cnt(void) { return ksft_cnt.ksft_xpass; }
 static inline int ksft_get_xskip_cnt(void) { return ksft_cnt.ksft_xskip; }
+static inline int ksft_get_error_cnt(void) { return ksft_cnt.ksft_error; }
 
 static inline void ksft_print_header(void)
 {
@@ -58,10 +61,10 @@ static inline void ksft_print_header(void)
 
 static inline void ksft_print_cnts(void)
 {
-	printf("Pass %d Fail %d Xfail %d Xpass %d Skip %d\n",
+	printf("Pass %d Fail %d Xfail %d Xpass %d Skip %d Error %d\n",
 		ksft_cnt.ksft_pass, ksft_cnt.ksft_fail,
 		ksft_cnt.ksft_xfail, ksft_cnt.ksft_xpass,
-		ksft_cnt.ksft_xskip);
+		ksft_cnt.ksft_xskip, ksft_cnt.ksft_error);
 	printf("1..%d\n", ksft_test_num());
 }
 
@@ -111,6 +114,18 @@ static inline void ksft_test_result_skip(const char *msg, ...)
 	va_end(args);
 }
 
+static inline void ksft_test_result_error(const char *msg, ...)
+{
+	va_list args;
+
+	ksft_cnt.ksft_error++;
+
+	va_start(args, msg);
+	printf("not ok %d # error ", ksft_test_num());
+	vprintf(msg, args);
+	va_end(args);
+}
+
 static inline int ksft_exit_pass(void)
 {
 	ksft_print_cnts();

commit 1d3ee8bef9549ec8c16223de452f2e08b81f83d9
Author: Shuah Khan <shuahkh@osg.samsung.com>
Date:   Mon Jul 24 13:55:18 2017 -0600

    selftests: kselftest framework: add API to return pass/fail/* counts
    
    Some tests print final pass/fail message based on fail count. Add
    ksft_get_*_cnt() API to kselftest framework to return counts.
    
    Update ksft_print_cnts() to print the test results summary message with
    individual pass, fail, ... counters.
    
    Signed-off-by: Shuah Khan <shuahkh@osg.samsung.com>
    Reviewed-by: Gustavo Padovan <gustavo.padovan@collabora.com>

diff --git a/tools/testing/selftests/kselftest.h b/tools/testing/selftests/kselftest.h
index 08e90c2cc5cb..45bf25905279 100644
--- a/tools/testing/selftests/kselftest.h
+++ b/tools/testing/selftests/kselftest.h
@@ -45,6 +45,12 @@ static inline void ksft_inc_xfail_cnt(void) { ksft_cnt.ksft_xfail++; }
 static inline void ksft_inc_xpass_cnt(void) { ksft_cnt.ksft_xpass++; }
 static inline void ksft_inc_xskip_cnt(void) { ksft_cnt.ksft_xskip++; }
 
+static inline int ksft_get_pass_cnt(void) { return ksft_cnt.ksft_pass; }
+static inline int ksft_get_fail_cnt(void) { return ksft_cnt.ksft_fail; }
+static inline int ksft_get_xfail_cnt(void) { return ksft_cnt.ksft_xfail; }
+static inline int ksft_get_xpass_cnt(void) { return ksft_cnt.ksft_xpass; }
+static inline int ksft_get_xskip_cnt(void) { return ksft_cnt.ksft_xskip; }
+
 static inline void ksft_print_header(void)
 {
 	printf("TAP version 13\n");
@@ -52,6 +58,10 @@ static inline void ksft_print_header(void)
 
 static inline void ksft_print_cnts(void)
 {
+	printf("Pass %d Fail %d Xfail %d Xpass %d Skip %d\n",
+		ksft_cnt.ksft_pass, ksft_cnt.ksft_fail,
+		ksft_cnt.ksft_xfail, ksft_cnt.ksft_xpass,
+		ksft_cnt.ksft_xskip);
 	printf("1..%d\n", ksft_test_num());
 }
 

commit ab52a484455007b3c9c11e18f6d0eed6d8f2de4e
Author: Paul Elder <paul.elder@pitt.edu>
Date:   Wed Jun 28 23:40:21 2017 +0900

    kselftest: add ksft_print_msg() function to output general information
    
    Add a generic information output function: ksft_print_msg()
    
    Signed-off-by: Paul Elder <paul.elder@pitt.edu>
    Signed-off-by: Shuah Khan <shuahkh@osg.samsung.com>

diff --git a/tools/testing/selftests/kselftest.h b/tools/testing/selftests/kselftest.h
index a00844e4c915..08e90c2cc5cb 100644
--- a/tools/testing/selftests/kselftest.h
+++ b/tools/testing/selftests/kselftest.h
@@ -55,6 +55,16 @@ static inline void ksft_print_cnts(void)
 	printf("1..%d\n", ksft_test_num());
 }
 
+static inline void ksft_print_msg(const char *msg, ...)
+{
+	va_list args;
+
+	va_start(args, msg);
+	printf("# ");
+	vprintf(msg, args);
+	va_end(args);
+}
+
 static inline void ksft_test_result_pass(const char *msg, ...)
 {
 	va_list args;

commit 151b2732111f0743e764a7bc62d4f580341a62f3
Author: Paul Elder <paul.elder@pitt.edu>
Date:   Wed Jun 28 23:40:20 2017 +0900

    kselftest: make ksft_* output functions variadic
    
    Make the ksft_* output functions variadic to allow string formatting
    directly in these functions.
    
    Signed-off-by: Paul Elder <paul.elder@pitt.edu>
    Signed-off-by: Shuah Khan <shuahkh@osg.samsung.com>

diff --git a/tools/testing/selftests/kselftest.h b/tools/testing/selftests/kselftest.h
index be01f2d15472..a00844e4c915 100644
--- a/tools/testing/selftests/kselftest.h
+++ b/tools/testing/selftests/kselftest.h
@@ -12,6 +12,7 @@
 
 #include <stdlib.h>
 #include <unistd.h>
+#include <stdarg.h>
 
 /* define kselftest exit codes */
 #define KSFT_PASS  0
@@ -54,22 +55,40 @@ static inline void ksft_print_cnts(void)
 	printf("1..%d\n", ksft_test_num());
 }
 
-static inline void ksft_test_result_pass(const char *msg)
+static inline void ksft_test_result_pass(const char *msg, ...)
 {
+	va_list args;
+
 	ksft_cnt.ksft_pass++;
-	printf("ok %d %s\n", ksft_test_num(), msg);
+
+	va_start(args, msg);
+	printf("ok %d ", ksft_test_num());
+	vprintf(msg, args);
+	va_end(args);
 }
 
-static inline void ksft_test_result_fail(const char *msg)
+static inline void ksft_test_result_fail(const char *msg, ...)
 {
+	va_list args;
+
 	ksft_cnt.ksft_fail++;
-	printf("not ok %d %s\n", ksft_test_num(), msg);
+
+	va_start(args, msg);
+	printf("not ok %d ", ksft_test_num());
+	vprintf(msg, args);
+	va_end(args);
 }
 
-static inline void ksft_test_result_skip(const char *msg)
+static inline void ksft_test_result_skip(const char *msg, ...)
 {
+	va_list args;
+
 	ksft_cnt.ksft_xskip++;
-	printf("ok %d # skip %s\n", ksft_test_num(), msg);
+
+	va_start(args, msg);
+	printf("ok %d # skip ", ksft_test_num());
+	vprintf(msg, args);
+	va_end(args);
 }
 
 static inline int ksft_exit_pass(void)
@@ -85,9 +104,15 @@ static inline int ksft_exit_fail(void)
 	exit(KSFT_FAIL);
 }
 
-static inline int ksft_exit_fail_msg(const char *msg)
+static inline int ksft_exit_fail_msg(const char *msg, ...)
 {
-	printf("Bail out! %s\n", msg);
+	va_list args;
+
+	va_start(args, msg);
+	printf("Bail out! ");
+	vprintf(msg, args);
+	va_end(args);
+
 	ksft_print_cnts();
 	exit(KSFT_FAIL);
 }
@@ -104,12 +129,18 @@ static inline int ksft_exit_xpass(void)
 	exit(KSFT_XPASS);
 }
 
-static inline int ksft_exit_skip(const char *msg)
+static inline int ksft_exit_skip(const char *msg, ...)
 {
-	if (msg)
-		printf("1..%d # Skipped: %s\n", ksft_test_num(), msg);
-	else
+	if (msg) {
+		va_list args;
+
+		va_start(args, msg);
+		printf("1..%d # Skipped: ", ksft_test_num());
+		vprintf(msg, args);
+		va_end(args);
+	} else {
 		ksft_print_cnts();
+	}
 	exit(KSFT_SKIP);
 }
 

commit 54f57baab644e99b6da34d9538b2a9c0a05b690d
Author: Paul Elder <paul.elder@pitt.edu>
Date:   Fri Jun 16 00:54:20 2017 +0900

    kselftest: make ksft_exit_skip() output a reason for skipping
    
    Make ksft_exit_skip() input an optional message string as the reason
    for skipping all the tests and outputs it prior to exiting.
    
    Signed-off-by: Paul Elder <paul.elder@pitt.edu>
    Signed-off-by: Shuah Khan <shuahkh@osg.samsung.com>

diff --git a/tools/testing/selftests/kselftest.h b/tools/testing/selftests/kselftest.h
index 1d874a50d957..be01f2d15472 100644
--- a/tools/testing/selftests/kselftest.h
+++ b/tools/testing/selftests/kselftest.h
@@ -104,9 +104,12 @@ static inline int ksft_exit_xpass(void)
 	exit(KSFT_XPASS);
 }
 
-static inline int ksft_exit_skip(void)
+static inline int ksft_exit_skip(const char *msg)
 {
-	ksft_print_cnts();
+	if (msg)
+		printf("1..%d # Skipped: %s\n", ksft_test_num(), msg);
+	else
+		ksft_print_cnts();
 	exit(KSFT_SKIP);
 }
 

commit b6a4b66d845ae4c7f4eece419269c65ca332ba7b
Author: Paul Elder <paul.elder@pitt.edu>
Date:   Mon Jun 12 08:56:47 2017 +0200

    kselftest: add TAP13 conformant versions of ksft_* functions
    
    Add TAP13 conformat output functions to kselftest.h.
    
    Also add exit functions that output TAP13 exiting text, as well as
    functions to keep track of testing progress.
    
    Signed-off-by: Paul Elder <paul.elder@pitt.edu>
    Signed-off-by: Alice Ferrazzi <alice.ferrazzi@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Shuah Khan <shuahkh@osg.samsung.com>

diff --git a/tools/testing/selftests/kselftest.h b/tools/testing/selftests/kselftest.h
index ef1c80d67ac7..1d874a50d957 100644
--- a/tools/testing/selftests/kselftest.h
+++ b/tools/testing/selftests/kselftest.h
@@ -31,38 +31,82 @@ struct ksft_count {
 
 static struct ksft_count ksft_cnt;
 
+static inline int ksft_test_num(void)
+{
+	return ksft_cnt.ksft_pass + ksft_cnt.ksft_fail +
+		ksft_cnt.ksft_xfail + ksft_cnt.ksft_xpass +
+		ksft_cnt.ksft_xskip;
+}
+
 static inline void ksft_inc_pass_cnt(void) { ksft_cnt.ksft_pass++; }
 static inline void ksft_inc_fail_cnt(void) { ksft_cnt.ksft_fail++; }
 static inline void ksft_inc_xfail_cnt(void) { ksft_cnt.ksft_xfail++; }
 static inline void ksft_inc_xpass_cnt(void) { ksft_cnt.ksft_xpass++; }
 static inline void ksft_inc_xskip_cnt(void) { ksft_cnt.ksft_xskip++; }
 
+static inline void ksft_print_header(void)
+{
+	printf("TAP version 13\n");
+}
+
 static inline void ksft_print_cnts(void)
 {
-	printf("Pass: %d Fail: %d Xfail: %d Xpass: %d, Xskip: %d\n",
-		ksft_cnt.ksft_pass, ksft_cnt.ksft_fail,
-		ksft_cnt.ksft_xfail, ksft_cnt.ksft_xpass,
-		ksft_cnt.ksft_xskip);
+	printf("1..%d\n", ksft_test_num());
+}
+
+static inline void ksft_test_result_pass(const char *msg)
+{
+	ksft_cnt.ksft_pass++;
+	printf("ok %d %s\n", ksft_test_num(), msg);
+}
+
+static inline void ksft_test_result_fail(const char *msg)
+{
+	ksft_cnt.ksft_fail++;
+	printf("not ok %d %s\n", ksft_test_num(), msg);
+}
+
+static inline void ksft_test_result_skip(const char *msg)
+{
+	ksft_cnt.ksft_xskip++;
+	printf("ok %d # skip %s\n", ksft_test_num(), msg);
 }
 
 static inline int ksft_exit_pass(void)
 {
+	ksft_print_cnts();
 	exit(KSFT_PASS);
 }
+
 static inline int ksft_exit_fail(void)
 {
+	printf("Bail out!\n");
+	ksft_print_cnts();
 	exit(KSFT_FAIL);
 }
+
+static inline int ksft_exit_fail_msg(const char *msg)
+{
+	printf("Bail out! %s\n", msg);
+	ksft_print_cnts();
+	exit(KSFT_FAIL);
+}
+
 static inline int ksft_exit_xfail(void)
 {
+	ksft_print_cnts();
 	exit(KSFT_XFAIL);
 }
+
 static inline int ksft_exit_xpass(void)
 {
+	ksft_print_cnts();
 	exit(KSFT_XPASS);
 }
+
 static inline int ksft_exit_skip(void)
 {
+	ksft_print_cnts();
 	exit(KSFT_SKIP);
 }
 

commit 4100e675a9be8974e00b5dd26be529136a31d519
Author: Darren Hart <dvhart@linux.intel.com>
Date:   Tue May 12 21:07:56 2015 -0700

    kselftest: Add exit code defines
    
    Define the exit codes with KSFT_PASS and similar so tests can use these
    directly if they choose. Also enable harnesses and other tooling to use
    the defines instead of hardcoding the return codes.
    
    Cc: Shuah Khan <shuahkh@osg.samsung.com>
    Cc: linux-api@vger.kernel.org
    Cc: Ingo Molnar <mingo@elte.hu>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: Davidlohr Bueso <dave@stgolabs.net>
    Cc: KOSAKI Motohiro <kosaki.motohiro@jp.fujitsu.com>
    Signed-off-by: Darren Hart <dvhart@linux.intel.com>
    Signed-off-by: Shuah Khan <shuahkh@osg.samsung.com>

diff --git a/tools/testing/selftests/kselftest.h b/tools/testing/selftests/kselftest.h
index 572c8888167a..ef1c80d67ac7 100644
--- a/tools/testing/selftests/kselftest.h
+++ b/tools/testing/selftests/kselftest.h
@@ -13,6 +13,13 @@
 #include <stdlib.h>
 #include <unistd.h>
 
+/* define kselftest exit codes */
+#define KSFT_PASS  0
+#define KSFT_FAIL  1
+#define KSFT_XFAIL 2
+#define KSFT_XPASS 3
+#define KSFT_SKIP  4
+
 /* counters */
 struct ksft_count {
 	unsigned int ksft_pass;
@@ -40,23 +47,23 @@ static inline void ksft_print_cnts(void)
 
 static inline int ksft_exit_pass(void)
 {
-	exit(0);
+	exit(KSFT_PASS);
 }
 static inline int ksft_exit_fail(void)
 {
-	exit(1);
+	exit(KSFT_FAIL);
 }
 static inline int ksft_exit_xfail(void)
 {
-	exit(2);
+	exit(KSFT_XFAIL);
 }
 static inline int ksft_exit_xpass(void)
 {
-	exit(3);
+	exit(KSFT_XPASS);
 }
 static inline int ksft_exit_skip(void)
 {
-	exit(4);
+	exit(KSFT_SKIP);
 }
 
 #endif /* __KSELFTEST_H */

commit 7fb2c3ea28bf7b748923a7cd58b6f49bce491bb7
Author: Shuah Khan <shuahkh@osg.samsung.com>
Date:   Fri Oct 3 09:04:23 2014 -0600

    selftests: add kselftest framework for uniform test reporting
    
    Add kselftest framework for tests to use. This is a light
    weight framework provides a set of interfaces to report test
    results. Tests can use these interfaces to report pass, and
    fail cases as well as when failure is due to configuration
    problems such as missing modules, or when a test that is should
    fail, fails as expected, and a test that should fail, passes.
    The framework uses POSIX standard return codes for reporting
    results to address the needs of users that want to run the kernel
    selftests from their user-space test suites and want to know why a
    test failed. In addition, the framework includes interfaces to use
    to report test statistics on number of tests passed and failed.
    
    Signed-off-by: Shuah Khan <shuahkh@osg.samsung.com>

diff --git a/tools/testing/selftests/kselftest.h b/tools/testing/selftests/kselftest.h
new file mode 100644
index 000000000000..572c8888167a
--- /dev/null
+++ b/tools/testing/selftests/kselftest.h
@@ -0,0 +1,62 @@
+/*
+ * kselftest.h:	kselftest framework return codes to include from
+ *		selftests.
+ *
+ * Copyright (c) 2014 Shuah Khan <shuahkh@osg.samsung.com>
+ * Copyright (c) 2014 Samsung Electronics Co., Ltd.
+ *
+ * This file is released under the GPLv2.
+ */
+#ifndef __KSELFTEST_H
+#define __KSELFTEST_H
+
+#include <stdlib.h>
+#include <unistd.h>
+
+/* counters */
+struct ksft_count {
+	unsigned int ksft_pass;
+	unsigned int ksft_fail;
+	unsigned int ksft_xfail;
+	unsigned int ksft_xpass;
+	unsigned int ksft_xskip;
+};
+
+static struct ksft_count ksft_cnt;
+
+static inline void ksft_inc_pass_cnt(void) { ksft_cnt.ksft_pass++; }
+static inline void ksft_inc_fail_cnt(void) { ksft_cnt.ksft_fail++; }
+static inline void ksft_inc_xfail_cnt(void) { ksft_cnt.ksft_xfail++; }
+static inline void ksft_inc_xpass_cnt(void) { ksft_cnt.ksft_xpass++; }
+static inline void ksft_inc_xskip_cnt(void) { ksft_cnt.ksft_xskip++; }
+
+static inline void ksft_print_cnts(void)
+{
+	printf("Pass: %d Fail: %d Xfail: %d Xpass: %d, Xskip: %d\n",
+		ksft_cnt.ksft_pass, ksft_cnt.ksft_fail,
+		ksft_cnt.ksft_xfail, ksft_cnt.ksft_xpass,
+		ksft_cnt.ksft_xskip);
+}
+
+static inline int ksft_exit_pass(void)
+{
+	exit(0);
+}
+static inline int ksft_exit_fail(void)
+{
+	exit(1);
+}
+static inline int ksft_exit_xfail(void)
+{
+	exit(2);
+}
+static inline int ksft_exit_xpass(void)
+{
+	exit(3);
+}
+static inline int ksft_exit_skip(void)
+{
+	exit(4);
+}
+
+#endif /* __KSELFTEST_H */
