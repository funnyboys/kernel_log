commit 6952a4f646446fde9e190b62c5e45f84c6cf91aa
Author: Christian Brauner <christian.brauner@ubuntu.com>
Date:   Sun Mar 8 17:26:32 2020 +0100

    selftests: add pid namespace ENOMEM regression test
    
    We recently regressed (cf. [1] and its corresponding fix in [2]) returning
    ENOMEM when trying to create a process in a pid namespace whose init
    process/child subreaper has already died. This has caused confusion at
    least once before that (cf. [3]). Let's add a simple regression test to
    catch this in the future.
    
    [1]: 49cb2fc42ce4 ("fork: extend clone3() to support setting a PID")
    [2]: b26ebfe12f34 ("pid: Fix error return value in some cases")
    [3]: 35f71bc0a09a ("fork: report pid reservation failure properly")
    Cc: Corey Minyard <cminyard@mvista.com>
    Cc: Oleg Nesterov <oleg@redhat.com>
    Cc: Adrian Reber <areber@redhat.com>
    Cc: Dmitry Safonov <0x7f454c46@gmail.com>
    Cc: Andrei Vagin <avagin@gmail.com>
    Signed-off-by: Christian Brauner <christian.brauner@ubuntu.com>

diff --git a/tools/testing/selftests/pid_namespace/regression_enomem.c b/tools/testing/selftests/pid_namespace/regression_enomem.c
new file mode 100644
index 000000000000..73d532556d17
--- /dev/null
+++ b/tools/testing/selftests/pid_namespace/regression_enomem.c
@@ -0,0 +1,45 @@
+#define _GNU_SOURCE
+#include <assert.h>
+#include <errno.h>
+#include <fcntl.h>
+#include <linux/types.h>
+#include <sched.h>
+#include <signal.h>
+#include <stdio.h>
+#include <stdlib.h>
+#include <string.h>
+#include <syscall.h>
+#include <sys/wait.h>
+
+#include "../kselftest.h"
+#include "../kselftest_harness.h"
+#include "../pidfd/pidfd.h"
+
+/*
+ * Regression test for:
+ * 35f71bc0a09a ("fork: report pid reservation failure properly")
+ * b26ebfe12f34 ("pid: Fix error return value in some cases")
+ */
+TEST(regression_enomem)
+{
+	pid_t pid;
+
+	if (geteuid())
+		EXPECT_EQ(0, unshare(CLONE_NEWUSER));
+
+	EXPECT_EQ(0, unshare(CLONE_NEWPID));
+
+	pid = fork();
+	ASSERT_GE(pid, 0);
+
+	if (pid == 0)
+		exit(EXIT_SUCCESS);
+
+	EXPECT_EQ(0, wait_for_pid(pid));
+
+	pid = fork();
+	ASSERT_LT(pid, 0);
+	ASSERT_EQ(errno, ENOMEM);
+}
+
+TEST_HARNESS_MAIN
