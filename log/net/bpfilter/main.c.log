commit 41c55ea6c2a7ca4c663eeec05bdf54f4e2419699
Author: Bruno Meneguele <bmeneg@redhat.com>
Date:   Tue Mar 31 10:06:30 2020 -0300

    net/bpfilter: remove superfluous testing message
    
    A testing message was brought by 13d0f7b814d9 ("net/bpfilter: fix dprintf
    usage for /dev/kmsg") but should've been deleted before patch submission.
    Although it doesn't cause any harm to the code or functionality itself, it's
    totally unpleasant to have it displayed on every loop iteration with no real
    use case. Thus remove it unconditionally.
    
    Fixes: 13d0f7b814d9 ("net/bpfilter: fix dprintf usage for /dev/kmsg")
    Signed-off-by: Bruno Meneguele <bmeneg@redhat.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

diff --git a/net/bpfilter/main.c b/net/bpfilter/main.c
index efea4874743e..05e1cfc1e5cd 100644
--- a/net/bpfilter/main.c
+++ b/net/bpfilter/main.c
@@ -35,7 +35,6 @@ static void loop(void)
 		struct mbox_reply reply;
 		int n;
 
-		fprintf(debug_f, "testing the buffer\n");
 		n = read(0, &req, sizeof(req));
 		if (n != sizeof(req)) {
 			fprintf(debug_f, "invalid request %d\n", n);

commit 13d0f7b814d9b4c67e60d8c2820c86ea181e7d99
Author: Bruno Meneguele <bmeneg@redhat.com>
Date:   Thu Mar 12 20:08:20 2020 -0300

    net/bpfilter: fix dprintf usage for /dev/kmsg
    
    The bpfilter UMH code was recently changed to log its informative messages to
    /dev/kmsg, however this interface doesn't support SEEK_CUR yet, used by
    dprintf(). As result dprintf() returns -EINVAL and doesn't log anything.
    
    However there already had some discussions about supporting SEEK_CUR into
    /dev/kmsg interface in the past it wasn't concluded. Since the only user of
    that from userspace perspective inside the kernel is the bpfilter UMH
    (userspace) module it's better to correct it here instead waiting a conclusion
    on the interface.
    
    Fixes: 36c4357c63f3 ("net: bpfilter: print umh messages to /dev/kmsg")
    Signed-off-by: Bruno Meneguele <bmeneg@redhat.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

diff --git a/net/bpfilter/main.c b/net/bpfilter/main.c
index 77396a098fbe..efea4874743e 100644
--- a/net/bpfilter/main.c
+++ b/net/bpfilter/main.c
@@ -10,7 +10,7 @@
 #include <asm/unistd.h>
 #include "msgfmt.h"
 
-int debug_fd;
+FILE *debug_f;
 
 static int handle_get_cmd(struct mbox_request *cmd)
 {
@@ -35,9 +35,10 @@ static void loop(void)
 		struct mbox_reply reply;
 		int n;
 
+		fprintf(debug_f, "testing the buffer\n");
 		n = read(0, &req, sizeof(req));
 		if (n != sizeof(req)) {
-			dprintf(debug_fd, "invalid request %d\n", n);
+			fprintf(debug_f, "invalid request %d\n", n);
 			return;
 		}
 
@@ -47,7 +48,7 @@ static void loop(void)
 
 		n = write(1, &reply, sizeof(reply));
 		if (n != sizeof(reply)) {
-			dprintf(debug_fd, "reply failed %d\n", n);
+			fprintf(debug_f, "reply failed %d\n", n);
 			return;
 		}
 	}
@@ -55,9 +56,10 @@ static void loop(void)
 
 int main(void)
 {
-	debug_fd = open("/dev/kmsg", 00000002);
-	dprintf(debug_fd, "Started bpfilter\n");
+	debug_f = fopen("/dev/kmsg", "w");
+	setvbuf(debug_f, 0, _IOLBF, 0);
+	fprintf(debug_f, "Started bpfilter\n");
 	loop();
-	close(debug_fd);
+	fclose(debug_f);
 	return 0;
 }

commit 36c4357c63f382becfe1d9775ea0872135c8a8ab
Author: Gary Lin <GLin@suse.com>
Date:   Fri Jul 5 03:54:58 2019 +0000

    net: bpfilter: print umh messages to /dev/kmsg
    
    bpfilter_umh currently printed all messages to /dev/console and this
    might interfere the user activity(*).
    
    This commit changes the output device to /dev/kmsg so that the messages
    from bpfilter_umh won't show on the console directly.
    
    (*) https://bugzilla.suse.com/show_bug.cgi?id=1140221
    
    Signed-off-by: Gary Lin <glin@suse.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

diff --git a/net/bpfilter/main.c b/net/bpfilter/main.c
index 61ce8454a88e..77396a098fbe 100644
--- a/net/bpfilter/main.c
+++ b/net/bpfilter/main.c
@@ -55,7 +55,7 @@ static void loop(void)
 
 int main(void)
 {
-	debug_fd = open("/dev/console", 00000002);
+	debug_fd = open("/dev/kmsg", 00000002);
 	dprintf(debug_fd, "Started bpfilter\n");
 	loop();
 	close(debug_fd);

commit 303a339f30a9441c4695d3d2cc78f1b33cd959ff
Author: Masahiro Yamada <yamada.masahiro@socionext.com>
Date:   Thu Jan 31 12:15:35 2019 +0900

    bpfilter: remove extra header search paths for bpfilter_umh
    
    Currently, the header search paths -Itools/include and
    -Itools/include/uapi are not used. Let's drop the unused code.
    
    We can remove -I. too by fixing up one C file.
    
    Signed-off-by: Masahiro Yamada <yamada.masahiro@socionext.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

diff --git a/net/bpfilter/main.c b/net/bpfilter/main.c
index 1317f108df8a..61ce8454a88e 100644
--- a/net/bpfilter/main.c
+++ b/net/bpfilter/main.c
@@ -6,7 +6,7 @@
 #include <sys/socket.h>
 #include <fcntl.h>
 #include <unistd.h>
-#include "include/uapi/linux/bpf.h"
+#include "../../include/uapi/linux/bpf.h"
 #include <asm/unistd.h>
 #include "msgfmt.h"
 

commit 13405468f49d4b6e014fdf376f46393f9590769d
Author: Jakub Kicinski <jakub.kicinski@netronome.com>
Date:   Thu May 24 00:41:19 2018 -0700

    bpfilter: don't pass O_CREAT when opening console for debug
    
    Passing O_CREAT (00000100) to open means we should also pass file
    mode as the third parameter.  Creating /dev/console as a regular
    file may not be helpful anyway, so simply drop the flag when
    opening debug_fd.
    
    Fixes: d2ba09c17a06 ("net: add skeleton of bpfilter kernel module")
    Signed-off-by: Jakub Kicinski <jakub.kicinski@netronome.com>
    Acked-by: Daniel Borkmann <daniel@iogearbox.net>
    Signed-off-by: David S. Miller <davem@davemloft.net>

diff --git a/net/bpfilter/main.c b/net/bpfilter/main.c
index 81bbc1684896..1317f108df8a 100644
--- a/net/bpfilter/main.c
+++ b/net/bpfilter/main.c
@@ -55,7 +55,7 @@ static void loop(void)
 
 int main(void)
 {
-	debug_fd = open("/dev/console", 00000002 | 00000100);
+	debug_fd = open("/dev/console", 00000002);
 	dprintf(debug_fd, "Started bpfilter\n");
 	loop();
 	close(debug_fd);

commit d2ba09c17a0647f899d6c20a11bab9e6d3382f07
Author: Alexei Starovoitov <ast@kernel.org>
Date:   Mon May 21 19:22:30 2018 -0700

    net: add skeleton of bpfilter kernel module
    
    bpfilter.ko consists of bpfilter_kern.c (normal kernel module code)
    and user mode helper code that is embedded into bpfilter.ko
    
    The steps to build bpfilter.ko are the following:
    - main.c is compiled by HOSTCC into the bpfilter_umh elf executable file
    - with quite a bit of objcopy and Makefile magic the bpfilter_umh elf file
      is converted into bpfilter_umh.o object file
      with _binary_net_bpfilter_bpfilter_umh_start and _end symbols
      Example:
      $ nm ./bld_x64/net/bpfilter/bpfilter_umh.o
      0000000000004cf8 T _binary_net_bpfilter_bpfilter_umh_end
      0000000000004cf8 A _binary_net_bpfilter_bpfilter_umh_size
      0000000000000000 T _binary_net_bpfilter_bpfilter_umh_start
    - bpfilter_umh.o and bpfilter_kern.o are linked together into bpfilter.ko
    
    bpfilter_kern.c is a normal kernel module code that calls
    the fork_usermode_blob() helper to execute part of its own data
    as a user mode process.
    
    Notice that _binary_net_bpfilter_bpfilter_umh_start - end
    is placed into .init.rodata section, so it's freed as soon as __init
    function of bpfilter.ko is finished.
    As part of __init the bpfilter.ko does first request/reply action
    via two unix pipe provided by fork_usermode_blob() helper to
    make sure that umh is healthy. If not it will kill it via pid.
    
    Later bpfilter_process_sockopt() will be called from bpfilter hooks
    in get/setsockopt() to pass iptable commands into umh via bpfilter.ko
    
    If admin does 'rmmod bpfilter' the __exit code bpfilter.ko will
    kill umh as well.
    
    Signed-off-by: Alexei Starovoitov <ast@kernel.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>

diff --git a/net/bpfilter/main.c b/net/bpfilter/main.c
new file mode 100644
index 000000000000..81bbc1684896
--- /dev/null
+++ b/net/bpfilter/main.c
@@ -0,0 +1,63 @@
+// SPDX-License-Identifier: GPL-2.0
+#define _GNU_SOURCE
+#include <sys/uio.h>
+#include <errno.h>
+#include <stdio.h>
+#include <sys/socket.h>
+#include <fcntl.h>
+#include <unistd.h>
+#include "include/uapi/linux/bpf.h"
+#include <asm/unistd.h>
+#include "msgfmt.h"
+
+int debug_fd;
+
+static int handle_get_cmd(struct mbox_request *cmd)
+{
+	switch (cmd->cmd) {
+	case 0:
+		return 0;
+	default:
+		break;
+	}
+	return -ENOPROTOOPT;
+}
+
+static int handle_set_cmd(struct mbox_request *cmd)
+{
+	return -ENOPROTOOPT;
+}
+
+static void loop(void)
+{
+	while (1) {
+		struct mbox_request req;
+		struct mbox_reply reply;
+		int n;
+
+		n = read(0, &req, sizeof(req));
+		if (n != sizeof(req)) {
+			dprintf(debug_fd, "invalid request %d\n", n);
+			return;
+		}
+
+		reply.status = req.is_set ?
+			handle_set_cmd(&req) :
+			handle_get_cmd(&req);
+
+		n = write(1, &reply, sizeof(reply));
+		if (n != sizeof(reply)) {
+			dprintf(debug_fd, "reply failed %d\n", n);
+			return;
+		}
+	}
+}
+
+int main(void)
+{
+	debug_fd = open("/dev/console", 00000002 | 00000100);
+	dprintf(debug_fd, "Started bpfilter\n");
+	loop();
+	close(debug_fd);
+	return 0;
+}
