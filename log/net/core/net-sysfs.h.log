commit e6dee9f3893c823dff9c7f33fe0a598ee25c78f7
Author: Christian Brauner <christian.brauner@ubuntu.com>
Date:   Thu Feb 27 04:37:17 2020 +0100

    net-sysfs: add netdev_change_owner()
    
    Add a function to change the owner of a network device when it is moved
    between network namespaces.
    
    Currently, when moving network devices between network namespaces the
    ownership of the corresponding sysfs entries is not changed. This leads
    to problems when tools try to operate on the corresponding sysfs files.
    This leads to a bug whereby a network device that is created in a
    network namespaces owned by a user namespace will have its corresponding
    sysfs entry owned by the root user of the corresponding user namespace.
    If such a network device has to be moved back to the host network
    namespace the permissions will still be set to the user namespaces. This
    means unprivileged users can e.g. trigger uevents for such incorrectly
    owned devices. They can also modify the settings of the device itself.
    Both of these things are unwanted.
    
    For example, workloads will create network devices in the host network
    namespace. Other tools will then proceed to move such devices between
    network namespaces owner by other user namespaces. While the ownership
    of the device itself is updated in
    net/core/net-sysfs.c:dev_change_net_namespace() the corresponding sysfs
    entry for the device is not:
    
    drwxr-xr-x 5 nobody nobody    0 Jan 25 18:08 .
    drwxr-xr-x 9 nobody nobody    0 Jan 25 18:08 ..
    -r--r--r-- 1 nobody nobody 4096 Jan 25 18:09 addr_assign_type
    -r--r--r-- 1 nobody nobody 4096 Jan 25 18:09 addr_len
    -r--r--r-- 1 nobody nobody 4096 Jan 25 18:09 address
    -r--r--r-- 1 nobody nobody 4096 Jan 25 18:09 broadcast
    -rw-r--r-- 1 nobody nobody 4096 Jan 25 18:09 carrier
    -r--r--r-- 1 nobody nobody 4096 Jan 25 18:09 carrier_changes
    -r--r--r-- 1 nobody nobody 4096 Jan 25 18:09 carrier_down_count
    -r--r--r-- 1 nobody nobody 4096 Jan 25 18:09 carrier_up_count
    -r--r--r-- 1 nobody nobody 4096 Jan 25 18:09 dev_id
    -r--r--r-- 1 nobody nobody 4096 Jan 25 18:09 dev_port
    -r--r--r-- 1 nobody nobody 4096 Jan 25 18:09 dormant
    -r--r--r-- 1 nobody nobody 4096 Jan 25 18:09 duplex
    -rw-r--r-- 1 nobody nobody 4096 Jan 25 18:09 flags
    -rw-r--r-- 1 nobody nobody 4096 Jan 25 18:09 gro_flush_timeout
    -rw-r--r-- 1 nobody nobody 4096 Jan 25 18:09 ifalias
    -r--r--r-- 1 nobody nobody 4096 Jan 25 18:09 ifindex
    -r--r--r-- 1 nobody nobody 4096 Jan 25 18:09 iflink
    -r--r--r-- 1 nobody nobody 4096 Jan 25 18:09 link_mode
    -rw-r--r-- 1 nobody nobody 4096 Jan 25 18:09 mtu
    -r--r--r-- 1 nobody nobody 4096 Jan 25 18:09 name_assign_type
    -rw-r--r-- 1 nobody nobody 4096 Jan 25 18:09 netdev_group
    -r--r--r-- 1 nobody nobody 4096 Jan 25 18:09 operstate
    -r--r--r-- 1 nobody nobody 4096 Jan 25 18:09 phys_port_id
    -r--r--r-- 1 nobody nobody 4096 Jan 25 18:09 phys_port_name
    -r--r--r-- 1 nobody nobody 4096 Jan 25 18:09 phys_switch_id
    drwxr-xr-x 2 nobody nobody    0 Jan 25 18:09 power
    -rw-r--r-- 1 nobody nobody 4096 Jan 25 18:09 proto_down
    drwxr-xr-x 4 nobody nobody    0 Jan 25 18:09 queues
    -r--r--r-- 1 nobody nobody 4096 Jan 25 18:09 speed
    drwxr-xr-x 2 nobody nobody    0 Jan 25 18:09 statistics
    lrwxrwxrwx 1 nobody nobody    0 Jan 25 18:08 subsystem -> ../../../../class/net
    -rw-r--r-- 1 nobody nobody 4096 Jan 25 18:09 tx_queue_len
    -r--r--r-- 1 nobody nobody 4096 Jan 25 18:09 type
    -rw-r--r-- 1 nobody nobody 4096 Jan 25 18:08 uevent
    
    However, if a device is created directly in the network namespace then
    the device's sysfs permissions will be correctly updated:
    
    drwxr-xr-x 5 root   root      0 Jan 25 18:12 .
    drwxr-xr-x 9 nobody nobody    0 Jan 25 18:08 ..
    -r--r--r-- 1 root   root   4096 Jan 25 18:12 addr_assign_type
    -r--r--r-- 1 root   root   4096 Jan 25 18:12 addr_len
    -r--r--r-- 1 root   root   4096 Jan 25 18:12 address
    -r--r--r-- 1 root   root   4096 Jan 25 18:12 broadcast
    -rw-r--r-- 1 root   root   4096 Jan 25 18:12 carrier
    -r--r--r-- 1 root   root   4096 Jan 25 18:12 carrier_changes
    -r--r--r-- 1 root   root   4096 Jan 25 18:12 carrier_down_count
    -r--r--r-- 1 root   root   4096 Jan 25 18:12 carrier_up_count
    -r--r--r-- 1 root   root   4096 Jan 25 18:12 dev_id
    -r--r--r-- 1 root   root   4096 Jan 25 18:12 dev_port
    -r--r--r-- 1 root   root   4096 Jan 25 18:12 dormant
    -r--r--r-- 1 root   root   4096 Jan 25 18:12 duplex
    -rw-r--r-- 1 root   root   4096 Jan 25 18:12 flags
    -rw-r--r-- 1 root   root   4096 Jan 25 18:12 gro_flush_timeout
    -rw-r--r-- 1 root   root   4096 Jan 25 18:12 ifalias
    -r--r--r-- 1 root   root   4096 Jan 25 18:12 ifindex
    -r--r--r-- 1 root   root   4096 Jan 25 18:12 iflink
    -r--r--r-- 1 root   root   4096 Jan 25 18:12 link_mode
    -rw-r--r-- 1 root   root   4096 Jan 25 18:12 mtu
    -r--r--r-- 1 root   root   4096 Jan 25 18:12 name_assign_type
    -rw-r--r-- 1 root   root   4096 Jan 25 18:12 netdev_group
    -r--r--r-- 1 root   root   4096 Jan 25 18:12 operstate
    -r--r--r-- 1 root   root   4096 Jan 25 18:12 phys_port_id
    -r--r--r-- 1 root   root   4096 Jan 25 18:12 phys_port_name
    -r--r--r-- 1 root   root   4096 Jan 25 18:12 phys_switch_id
    drwxr-xr-x 2 root   root      0 Jan 25 18:12 power
    -rw-r--r-- 1 root   root   4096 Jan 25 18:12 proto_down
    drwxr-xr-x 4 root   root      0 Jan 25 18:12 queues
    -r--r--r-- 1 root   root   4096 Jan 25 18:12 speed
    drwxr-xr-x 2 root   root      0 Jan 25 18:12 statistics
    lrwxrwxrwx 1 nobody nobody    0 Jan 25 18:12 subsystem -> ../../../../class/net
    -rw-r--r-- 1 root   root   4096 Jan 25 18:12 tx_queue_len
    -r--r--r-- 1 root   root   4096 Jan 25 18:12 type
    -rw-r--r-- 1 root   root   4096 Jan 25 18:12 uevent
    
    Now, when creating a network device in a network namespace owned by a
    user namespace and moving it to the host the permissions will be set to
    the id that the user namespace root user has been mapped to on the host
    leading to all sorts of permission issues:
    
    458752
    drwxr-xr-x 5 458752 458752      0 Jan 25 18:12 .
    drwxr-xr-x 9 root   root        0 Jan 25 18:08 ..
    -r--r--r-- 1 458752 458752   4096 Jan 25 18:12 addr_assign_type
    -r--r--r-- 1 458752 458752   4096 Jan 25 18:12 addr_len
    -r--r--r-- 1 458752 458752   4096 Jan 25 18:12 address
    -r--r--r-- 1 458752 458752   4096 Jan 25 18:12 broadcast
    -rw-r--r-- 1 458752 458752   4096 Jan 25 18:12 carrier
    -r--r--r-- 1 458752 458752   4096 Jan 25 18:12 carrier_changes
    -r--r--r-- 1 458752 458752   4096 Jan 25 18:12 carrier_down_count
    -r--r--r-- 1 458752 458752   4096 Jan 25 18:12 carrier_up_count
    -r--r--r-- 1 458752 458752   4096 Jan 25 18:12 dev_id
    -r--r--r-- 1 458752 458752   4096 Jan 25 18:12 dev_port
    -r--r--r-- 1 458752 458752   4096 Jan 25 18:12 dormant
    -r--r--r-- 1 458752 458752   4096 Jan 25 18:12 duplex
    -rw-r--r-- 1 458752 458752   4096 Jan 25 18:12 flags
    -rw-r--r-- 1 458752 458752   4096 Jan 25 18:12 gro_flush_timeout
    -rw-r--r-- 1 458752 458752   4096 Jan 25 18:12 ifalias
    -r--r--r-- 1 458752 458752   4096 Jan 25 18:12 ifindex
    -r--r--r-- 1 458752 458752   4096 Jan 25 18:12 iflink
    -r--r--r-- 1 458752 458752   4096 Jan 25 18:12 link_mode
    -rw-r--r-- 1 458752 458752   4096 Jan 25 18:12 mtu
    -r--r--r-- 1 458752 458752   4096 Jan 25 18:12 name_assign_type
    -rw-r--r-- 1 458752 458752   4096 Jan 25 18:12 netdev_group
    -r--r--r-- 1 458752 458752   4096 Jan 25 18:12 operstate
    -r--r--r-- 1 458752 458752   4096 Jan 25 18:12 phys_port_id
    -r--r--r-- 1 458752 458752   4096 Jan 25 18:12 phys_port_name
    -r--r--r-- 1 458752 458752   4096 Jan 25 18:12 phys_switch_id
    drwxr-xr-x 2 458752 458752      0 Jan 25 18:12 power
    -rw-r--r-- 1 458752 458752   4096 Jan 25 18:12 proto_down
    drwxr-xr-x 4 458752 458752      0 Jan 25 18:12 queues
    -r--r--r-- 1 458752 458752   4096 Jan 25 18:12 speed
    drwxr-xr-x 2 458752 458752      0 Jan 25 18:12 statistics
    lrwxrwxrwx 1 root   root        0 Jan 25 18:12 subsystem -> ../../../../class/net
    -rw-r--r-- 1 458752 458752   4096 Jan 25 18:12 tx_queue_len
    -r--r--r-- 1 458752 458752   4096 Jan 25 18:12 type
    -rw-r--r-- 1 458752 458752   4096 Jan 25 18:12 uevent
    
    Signed-off-by: Christian Brauner <christian.brauner@ubuntu.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

diff --git a/net/core/net-sysfs.h b/net/core/net-sysfs.h
index 006876c7b78d..8a5b04c2699a 100644
--- a/net/core/net-sysfs.h
+++ b/net/core/net-sysfs.h
@@ -8,5 +8,7 @@ void netdev_unregister_kobject(struct net_device *);
 int net_rx_queue_update_kobjects(struct net_device *, int old_num, int new_num);
 int netdev_queue_update_kobjects(struct net_device *net,
 				 int old_num, int new_num);
+int netdev_change_owner(struct net_device *, const struct net *net_old,
+			const struct net *net_new);
 
 #endif

commit b24413180f5600bcb3bb70fbed5cf186b60864bd
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Wed Nov 1 15:07:57 2017 +0100

    License cleanup: add SPDX GPL-2.0 license identifier to files with no license
    
    Many source files in the tree are missing licensing information, which
    makes it harder for compliance tools to determine the correct license.
    
    By default all files without license information are under the default
    license of the kernel, which is GPL version 2.
    
    Update the files which contain no license information with the 'GPL-2.0'
    SPDX license identifier.  The SPDX identifier is a legally binding
    shorthand, which can be used instead of the full boiler plate text.
    
    This patch is based on work done by Thomas Gleixner and Kate Stewart and
    Philippe Ombredanne.
    
    How this work was done:
    
    Patches were generated and checked against linux-4.14-rc6 for a subset of
    the use cases:
     - file had no licensing information it it.
     - file was a */uapi/* one with no licensing information in it,
     - file was a */uapi/* one with existing licensing information,
    
    Further patches will be generated in subsequent months to fix up cases
    where non-standard license headers were used, and references to license
    had to be inferred by heuristics based on keywords.
    
    The analysis to determine which SPDX License Identifier to be applied to
    a file was done in a spreadsheet of side by side results from of the
    output of two independent scanners (ScanCode & Windriver) producing SPDX
    tag:value files created by Philippe Ombredanne.  Philippe prepared the
    base worksheet, and did an initial spot review of a few 1000 files.
    
    The 4.13 kernel was the starting point of the analysis with 60,537 files
    assessed.  Kate Stewart did a file by file comparison of the scanner
    results in the spreadsheet to determine which SPDX license identifier(s)
    to be applied to the file. She confirmed any determination that was not
    immediately clear with lawyers working with the Linux Foundation.
    
    Criteria used to select files for SPDX license identifier tagging was:
     - Files considered eligible had to be source code files.
     - Make and config files were included as candidates if they contained >5
       lines of source
     - File already had some variant of a license header in it (even if <5
       lines).
    
    All documentation files were explicitly excluded.
    
    The following heuristics were used to determine which SPDX license
    identifiers to apply.
    
     - when both scanners couldn't find any license traces, file was
       considered to have no license information in it, and the top level
       COPYING file license applied.
    
       For non */uapi/* files that summary was:
    
       SPDX license identifier                            # files
       ---------------------------------------------------|-------
       GPL-2.0                                              11139
    
       and resulted in the first patch in this series.
    
       If that file was a */uapi/* path one, it was "GPL-2.0 WITH
       Linux-syscall-note" otherwise it was "GPL-2.0".  Results of that was:
    
       SPDX license identifier                            # files
       ---------------------------------------------------|-------
       GPL-2.0 WITH Linux-syscall-note                        930
    
       and resulted in the second patch in this series.
    
     - if a file had some form of licensing information in it, and was one
       of the */uapi/* ones, it was denoted with the Linux-syscall-note if
       any GPL family license was found in the file or had no licensing in
       it (per prior point).  Results summary:
    
       SPDX license identifier                            # files
       ---------------------------------------------------|------
       GPL-2.0 WITH Linux-syscall-note                       270
       GPL-2.0+ WITH Linux-syscall-note                      169
       ((GPL-2.0 WITH Linux-syscall-note) OR BSD-2-Clause)    21
       ((GPL-2.0 WITH Linux-syscall-note) OR BSD-3-Clause)    17
       LGPL-2.1+ WITH Linux-syscall-note                      15
       GPL-1.0+ WITH Linux-syscall-note                       14
       ((GPL-2.0+ WITH Linux-syscall-note) OR BSD-3-Clause)    5
       LGPL-2.0+ WITH Linux-syscall-note                       4
       LGPL-2.1 WITH Linux-syscall-note                        3
       ((GPL-2.0 WITH Linux-syscall-note) OR MIT)              3
       ((GPL-2.0 WITH Linux-syscall-note) AND MIT)             1
    
       and that resulted in the third patch in this series.
    
     - when the two scanners agreed on the detected license(s), that became
       the concluded license(s).
    
     - when there was disagreement between the two scanners (one detected a
       license but the other didn't, or they both detected different
       licenses) a manual inspection of the file occurred.
    
     - In most cases a manual inspection of the information in the file
       resulted in a clear resolution of the license that should apply (and
       which scanner probably needed to revisit its heuristics).
    
     - When it was not immediately clear, the license identifier was
       confirmed with lawyers working with the Linux Foundation.
    
     - If there was any question as to the appropriate license identifier,
       the file was flagged for further research and to be revisited later
       in time.
    
    In total, over 70 hours of logged manual review was done on the
    spreadsheet to determine the SPDX license identifiers to apply to the
    source files by Kate, Philippe, Thomas and, in some cases, confirmation
    by lawyers working with the Linux Foundation.
    
    Kate also obtained a third independent scan of the 4.13 code base from
    FOSSology, and compared selected files where the other two scanners
    disagreed against that SPDX file, to see if there was new insights.  The
    Windriver scanner is based on an older version of FOSSology in part, so
    they are related.
    
    Thomas did random spot checks in about 500 files from the spreadsheets
    for the uapi headers and agreed with SPDX license identifier in the
    files he inspected. For the non-uapi files Thomas did random spot checks
    in about 15000 files.
    
    In initial set of patches against 4.14-rc6, 3 files were found to have
    copy/paste license identifier errors, and have been fixed to reflect the
    correct identifier.
    
    Additionally Philippe spent 10 hours this week doing a detailed manual
    inspection and review of the 12,461 patched files from the initial patch
    version early this week with:
     - a full scancode scan run, collecting the matched texts, detected
       license ids and scores
     - reviewing anything where there was a license detected (about 500+
       files) to ensure that the applied SPDX license was correct
     - reviewing anything where there was no detection but the patch license
       was not GPL-2.0 WITH Linux-syscall-note to ensure that the applied
       SPDX license was correct
    
    This produced a worksheet with 20 files needing minor correction.  This
    worksheet was then exported into 3 different .csv files for the
    different types of files to be modified.
    
    These .csv files were then reviewed by Greg.  Thomas wrote a script to
    parse the csv files and add the proper SPDX tag to the file, in the
    format that the file expected.  This script was further refined by Greg
    based on the output to detect more types of files automatically and to
    distinguish between header and source .c files (which need different
    comment types.)  Finally Greg ran the script using the .csv files to
    generate the patches.
    
    Reviewed-by: Kate Stewart <kstewart@linuxfoundation.org>
    Reviewed-by: Philippe Ombredanne <pombredanne@nexb.com>
    Reviewed-by: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/net/core/net-sysfs.h b/net/core/net-sysfs.h
index 2745a1b51e03..006876c7b78d 100644
--- a/net/core/net-sysfs.h
+++ b/net/core/net-sysfs.h
@@ -1,3 +1,4 @@
+/* SPDX-License-Identifier: GPL-2.0 */
 #ifndef __NET_SYSFS_H__
 #define __NET_SYSFS_H__
 

commit a48d4bb0b08fa621439bfcc32ad2f4c4e98decfc
Author: Daniel Borkmann <dborkman@redhat.com>
Date:   Mon Jan 6 01:20:11 2014 +0100

    net: netdev_kobject_init: annotate with __init
    
    netdev_kobject_init() is only being called from __init context,
    that is, net_dev_init(), so annotate it with __init as well, thus
    the kernel can take this as a hint that the function is used only
    during the initialization phase and free up used memory resources
    after its invocation.
    
    Signed-off-by: Daniel Borkmann <dborkman@redhat.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

diff --git a/net/core/net-sysfs.h b/net/core/net-sysfs.h
index bd7751ec1c4d..2745a1b51e03 100644
--- a/net/core/net-sysfs.h
+++ b/net/core/net-sysfs.h
@@ -1,7 +1,7 @@
 #ifndef __NET_SYSFS_H__
 #define __NET_SYSFS_H__
 
-int netdev_kobject_init(void);
+int __init netdev_kobject_init(void);
 int netdev_register_kobject(struct net_device *);
 void netdev_unregister_kobject(struct net_device *);
 int net_rx_queue_update_kobjects(struct net_device *, int old_num, int new_num);

commit bf26414510103448ad3dc069c7422462f03ea3d7
Author: Tom Herbert <therbert@google.com>
Date:   Fri Nov 26 08:36:09 2010 +0000

    xps: Add CONFIG_XPS
    
    This patch adds XPS_CONFIG option to enable and disable XPS.  This is
    done in the same manner as RPS_CONFIG.  This is also fixes build
    failure in XPS code when SMP is not enabled.
    
    Signed-off-by: Tom Herbert <therbert@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

diff --git a/net/core/net-sysfs.h b/net/core/net-sysfs.h
index 25ec2ee57df7..bd7751ec1c4d 100644
--- a/net/core/net-sysfs.h
+++ b/net/core/net-sysfs.h
@@ -4,11 +4,8 @@
 int netdev_kobject_init(void);
 int netdev_register_kobject(struct net_device *);
 void netdev_unregister_kobject(struct net_device *);
-#ifdef CONFIG_RPS
 int net_rx_queue_update_kobjects(struct net_device *, int old_num, int new_num);
 int netdev_queue_update_kobjects(struct net_device *net,
 				 int old_num, int new_num);
 
 #endif
-
-#endif

commit 1d24eb4815d1e0e8b451ecc546645f8ef1176d4f
Author: Tom Herbert <therbert@google.com>
Date:   Sun Nov 21 13:17:27 2010 +0000

    xps: Transmit Packet Steering
    
    This patch implements transmit packet steering (XPS) for multiqueue
    devices.  XPS selects a transmit queue during packet transmission based
    on configuration.  This is done by mapping the CPU transmitting the
    packet to a queue.  This is the transmit side analogue to RPS-- where
    RPS is selecting a CPU based on receive queue, XPS selects a queue
    based on the CPU (previously there was an XPS patch from Eric
    Dumazet, but that might more appropriately be called transmit completion
    steering).
    
    Each transmit queue can be associated with a number of CPUs which will
    use the queue to send packets.  This is configured as a CPU mask on a
    per queue basis in:
    
    /sys/class/net/eth<n>/queues/tx-<n>/xps_cpus
    
    The mappings are stored per device in an inverted data structure that
    maps CPUs to queues.  In the netdevice structure this is an array of
    num_possible_cpu structures where each structure holds and array of
    queue_indexes for queues which that CPU can use.
    
    The benefits of XPS are improved locality in the per queue data
    structures.  Also, transmit completions are more likely to be done
    nearer to the sending thread, so this should promote locality back
    to the socket on free (e.g. UDP).  The benefits of XPS are dependent on
    cache hierarchy, application load, and other factors.  XPS would
    nominally be configured so that a queue would only be shared by CPUs
    which are sharing a cache, the degenerative configuration woud be that
    each CPU has it's own queue.
    
    Below are some benchmark results which show the potential benfit of
    this patch.  The netperf test has 500 instances of netperf TCP_RR test
    with 1 byte req. and resp.
    
    bnx2x on 16 core AMD
       XPS (16 queues, 1 TX queue per CPU)  1234K at 100% CPU
       No XPS (16 queues)                   996K at 100% CPU
    
    Signed-off-by: Tom Herbert <therbert@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

diff --git a/net/core/net-sysfs.h b/net/core/net-sysfs.h
index 778e1571548d..25ec2ee57df7 100644
--- a/net/core/net-sysfs.h
+++ b/net/core/net-sysfs.h
@@ -6,6 +6,9 @@ int netdev_register_kobject(struct net_device *);
 void netdev_unregister_kobject(struct net_device *);
 #ifdef CONFIG_RPS
 int net_rx_queue_update_kobjects(struct net_device *, int old_num, int new_num);
+int netdev_queue_update_kobjects(struct net_device *net,
+				 int old_num, int new_num);
+
 #endif
 
 #endif

commit 62fe0b40abb3484413800edaef9b087a20059acf
Author: Ben Hutchings <bhutchings@solarflare.com>
Date:   Mon Sep 27 08:24:33 2010 +0000

    net: Allow changing number of RX queues after device allocation
    
    For RPS, we create a kobject for each RX queue based on the number of
    queues passed to alloc_netdev_mq().  However, drivers generally do not
    determine the numbers of hardware queues to use until much later, so
    this usually represents the maximum number the driver may use and not
    the actual number in use.
    
    For TX queues, drivers can update the actual number using
    netif_set_real_num_tx_queues().  Add a corresponding function for RX
    queues, netif_set_real_num_rx_queues().
    
    Signed-off-by: Ben Hutchings <bhutchings@solarflare.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

diff --git a/net/core/net-sysfs.h b/net/core/net-sysfs.h
index 805555e8b187..778e1571548d 100644
--- a/net/core/net-sysfs.h
+++ b/net/core/net-sysfs.h
@@ -4,4 +4,8 @@
 int netdev_kobject_init(void);
 int netdev_register_kobject(struct net_device *);
 void netdev_unregister_kobject(struct net_device *);
+#ifdef CONFIG_RPS
+int net_rx_queue_update_kobjects(struct net_device *, int old_num, int new_num);
+#endif
+
 #endif

commit a1b3f594dc5faab91d3a218c7019e9b5edd9fe1a
Author: Eric W. Biederman <ebiederm@xmission.com>
Date:   Tue May 4 17:36:49 2010 -0700

    net: Expose all network devices in a namespaces in sysfs
    
    This reverts commit aaf8cdc34ddba08122f02217d9d684e2f9f5d575.
    
    Drivers like the ipw2100 call device_create_group when they
    are initialized and device_remove_group when they are shutdown.
    Moving them between namespaces deletes their sysfs groups early.
    
    In particular the following call chain results.
    netdev_unregister_kobject -> device_del -> kobject_del -> sysfs_remove_dir
    With sysfs_remove_dir recursively deleting all of it's subdirectories,
    and nothing adding them back.
    
    Ouch!
    
    Therefore we need to call something that ultimate calls sysfs_mv_dir
    as that sysfs function can move sysfs directories between namespaces
    without deleting their subdirectories or their contents.   Allowing
    us to avoid placing extra boiler plate into every driver that does
    something interesting with sysfs.
    
    Currently the function that provides that capability is device_rename.
    That is the code works without nasty side effects as originally written.
    
    So remove the misguided fix for moving devices between namespaces.  The
    bug in the kobject layer that inspired it has now been recognized and
    fixed.
    
    Signed-off-by: Eric W. Biederman <ebiederm@xmission.com>
    Acked-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>

diff --git a/net/core/net-sysfs.h b/net/core/net-sysfs.h
index 14e7524260b3..805555e8b187 100644
--- a/net/core/net-sysfs.h
+++ b/net/core/net-sysfs.h
@@ -4,5 +4,4 @@
 int netdev_kobject_init(void);
 int netdev_register_kobject(struct net_device *);
 void netdev_unregister_kobject(struct net_device *);
-void netdev_initialize_kobject(struct net_device *);
 #endif

commit aaf8cdc34ddba08122f02217d9d684e2f9f5d575
Author: Daniel Lezcano <dlezcano@fr.ibm.com>
Date:   Fri May 2 17:00:58 2008 -0700

    netns: Fix device renaming for sysfs
    
    When a netdev is moved across namespaces with the
    'dev_change_net_namespace' function, the 'device_rename' function is
    used to fixup kobject and refresh the sysfs tree. The device_rename
    function will call kobject_rename and this one will check if there is
    an object with the same name and this is the case because we are
    renaming the object with the same name.
    
    The use of 'device_rename' seems for me wrong because we usually don't
    rename it but just move it across namespaces. As we just want to do a
    mini "netdev_[un]register", IMO the functions
    'netdev_[un]register_kobject' should be used instead, like an usual
    network device [un]registering.
    
    This patch replace device_rename by netdev_unregister_kobject,
    followed by netdev_register_kobject.
    
    The netdev_register_kobject will call device_initialize and will raise
    a warning indicating the device was already initialized. In order to
    fix that, I split the device initialization into a separate function
    and use it together with 'netdev_register_kobject' into
    register_netdevice. So we can safely call 'netdev_register_kobject' in
    'dev_change_net_namespace'.
    
    This fix will allow to properly use the sysfs per namespace which is
    coming from -mm tree.
    
    Signed-off-by: Daniel Lezcano <dlezcano@fr.ibm.com>
    Acked-by: Benjamin Thery <benjamin.thery@bull.net>
    Signed-off-by: David S. Miller <davem@davemloft.net>

diff --git a/net/core/net-sysfs.h b/net/core/net-sysfs.h
index f5f108db3924..14e7524260b3 100644
--- a/net/core/net-sysfs.h
+++ b/net/core/net-sysfs.h
@@ -4,5 +4,5 @@
 int netdev_kobject_init(void);
 int netdev_register_kobject(struct net_device *);
 void netdev_unregister_kobject(struct net_device *);
-
+void netdev_initialize_kobject(struct net_device *);
 #endif

commit 342709efc7a4ba91eac6d2d2d931ec316a587dfa
Author: Pavel Emelyanov <xemul@openvz.org>
Date:   Tue Oct 23 21:14:45 2007 -0700

    [NET]: Remove in-code externs for some functions from net/core/dev.c
    
    Inconsistent prototype and real type for functions may have worse
    consequences, than those for variables, so move them into a header.
    
    Since they are used privately in net/core, make this file reside in
    the same place.
    
    Signed-off-by: Pavel Emelyanov <xemul@openvz.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>

diff --git a/net/core/net-sysfs.h b/net/core/net-sysfs.h
new file mode 100644
index 000000000000..f5f108db3924
--- /dev/null
+++ b/net/core/net-sysfs.h
@@ -0,0 +1,8 @@
+#ifndef __NET_SYSFS_H__
+#define __NET_SYSFS_H__
+
+int netdev_kobject_init(void);
+int netdev_register_kobject(struct net_device *);
+void netdev_unregister_kobject(struct net_device *);
+
+#endif
