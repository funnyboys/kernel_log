commit 209469d978ae91e460b37b32f2c2834d93e1ff13
Author: Martin Brandenburg <martin@omnibond.com>
Date:   Tue Apr 3 16:27:14 2018 +0000

    orangefs: remove unused code
    
    Signed-off-by: Martin Brandenburg <martin@omnibond.com>
    Signed-off-by: Mike Marshall <hubcap@omnibond.com>

diff --git a/fs/orangefs/orangefs-debug.h b/fs/orangefs/orangefs-debug.h
index c7db56a31b92..6e079d4230d0 100644
--- a/fs/orangefs/orangefs-debug.h
+++ b/fs/orangefs/orangefs-debug.h
@@ -43,12 +43,6 @@
 #define GOSSIP_MAX_NR                 16
 #define GOSSIP_MAX_DEBUG              (((__u64)1 << GOSSIP_MAX_NR) - 1)
 
-/*function prototypes*/
-__u64 ORANGEFS_kmod_eventlog_to_mask(const char *event_logging);
-__u64 ORANGEFS_debug_eventlog_to_mask(const char *event_logging);
-char *ORANGEFS_debug_mask_to_eventlog(__u64 mask);
-char *ORANGEFS_kmod_mask_to_eventlog(__u64 mask);
-
 /* a private internal type */
 struct __keyword_mask_s {
 	const char *keyword;

commit 296200d3bb649f9646f60abe6e8ebb9fd8d20f4b
Author: Jérémy Lefaure <jeremy.lefaure@lse.epita.fr>
Date:   Sun Oct 1 15:30:48 2017 -0400

    orangefs: use ARRAY_SIZE
    
    Using the ARRAY_SIZE macro improves the readability of the code.
    
    Found with Coccinelle with the following semantic patch:
    @r depends on (org || report)@
    type T;
    T[] E;
    position p;
    @@
    (
     (sizeof(E)@p /sizeof(*E))
    |
     (sizeof(E)@p /sizeof(E[...]))
    |
     (sizeof(E)@p /sizeof(T))
    )
    
    Signed-off-by: Jérémy Lefaure <jeremy.lefaure@lse.epita.fr>
    Signed-off-by: Mike Marshall <hubcap@omnibond.com>

diff --git a/fs/orangefs/orangefs-debug.h b/fs/orangefs/orangefs-debug.h
index b6001bb28f5a..c7db56a31b92 100644
--- a/fs/orangefs/orangefs-debug.h
+++ b/fs/orangefs/orangefs-debug.h
@@ -15,8 +15,10 @@
 
 #ifdef __KERNEL__
 #include <linux/types.h>
+#include <linux/kernel.h>
 #else
 #include <stdint.h>
+#define ARRAY_SIZE(arr) (sizeof(arr) / sizeof((arr)[0]))
 #endif
 
 #define	GOSSIP_NO_DEBUG			(__u64)0
@@ -88,6 +90,6 @@ static struct __keyword_mask_s s_kmod_keyword_mask_map[] = {
 };
 
 static const int num_kmod_keyword_mask_map = (int)
-	(sizeof(s_kmod_keyword_mask_map) / sizeof(struct __keyword_mask_s));
+	(ARRAY_SIZE(s_kmod_keyword_mask_map));
 
 #endif /* __ORANGEFS_DEBUG_H */

commit b24413180f5600bcb3bb70fbed5cf186b60864bd
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Wed Nov 1 15:07:57 2017 +0100

    License cleanup: add SPDX GPL-2.0 license identifier to files with no license
    
    Many source files in the tree are missing licensing information, which
    makes it harder for compliance tools to determine the correct license.
    
    By default all files without license information are under the default
    license of the kernel, which is GPL version 2.
    
    Update the files which contain no license information with the 'GPL-2.0'
    SPDX license identifier.  The SPDX identifier is a legally binding
    shorthand, which can be used instead of the full boiler plate text.
    
    This patch is based on work done by Thomas Gleixner and Kate Stewart and
    Philippe Ombredanne.
    
    How this work was done:
    
    Patches were generated and checked against linux-4.14-rc6 for a subset of
    the use cases:
     - file had no licensing information it it.
     - file was a */uapi/* one with no licensing information in it,
     - file was a */uapi/* one with existing licensing information,
    
    Further patches will be generated in subsequent months to fix up cases
    where non-standard license headers were used, and references to license
    had to be inferred by heuristics based on keywords.
    
    The analysis to determine which SPDX License Identifier to be applied to
    a file was done in a spreadsheet of side by side results from of the
    output of two independent scanners (ScanCode & Windriver) producing SPDX
    tag:value files created by Philippe Ombredanne.  Philippe prepared the
    base worksheet, and did an initial spot review of a few 1000 files.
    
    The 4.13 kernel was the starting point of the analysis with 60,537 files
    assessed.  Kate Stewart did a file by file comparison of the scanner
    results in the spreadsheet to determine which SPDX license identifier(s)
    to be applied to the file. She confirmed any determination that was not
    immediately clear with lawyers working with the Linux Foundation.
    
    Criteria used to select files for SPDX license identifier tagging was:
     - Files considered eligible had to be source code files.
     - Make and config files were included as candidates if they contained >5
       lines of source
     - File already had some variant of a license header in it (even if <5
       lines).
    
    All documentation files were explicitly excluded.
    
    The following heuristics were used to determine which SPDX license
    identifiers to apply.
    
     - when both scanners couldn't find any license traces, file was
       considered to have no license information in it, and the top level
       COPYING file license applied.
    
       For non */uapi/* files that summary was:
    
       SPDX license identifier                            # files
       ---------------------------------------------------|-------
       GPL-2.0                                              11139
    
       and resulted in the first patch in this series.
    
       If that file was a */uapi/* path one, it was "GPL-2.0 WITH
       Linux-syscall-note" otherwise it was "GPL-2.0".  Results of that was:
    
       SPDX license identifier                            # files
       ---------------------------------------------------|-------
       GPL-2.0 WITH Linux-syscall-note                        930
    
       and resulted in the second patch in this series.
    
     - if a file had some form of licensing information in it, and was one
       of the */uapi/* ones, it was denoted with the Linux-syscall-note if
       any GPL family license was found in the file or had no licensing in
       it (per prior point).  Results summary:
    
       SPDX license identifier                            # files
       ---------------------------------------------------|------
       GPL-2.0 WITH Linux-syscall-note                       270
       GPL-2.0+ WITH Linux-syscall-note                      169
       ((GPL-2.0 WITH Linux-syscall-note) OR BSD-2-Clause)    21
       ((GPL-2.0 WITH Linux-syscall-note) OR BSD-3-Clause)    17
       LGPL-2.1+ WITH Linux-syscall-note                      15
       GPL-1.0+ WITH Linux-syscall-note                       14
       ((GPL-2.0+ WITH Linux-syscall-note) OR BSD-3-Clause)    5
       LGPL-2.0+ WITH Linux-syscall-note                       4
       LGPL-2.1 WITH Linux-syscall-note                        3
       ((GPL-2.0 WITH Linux-syscall-note) OR MIT)              3
       ((GPL-2.0 WITH Linux-syscall-note) AND MIT)             1
    
       and that resulted in the third patch in this series.
    
     - when the two scanners agreed on the detected license(s), that became
       the concluded license(s).
    
     - when there was disagreement between the two scanners (one detected a
       license but the other didn't, or they both detected different
       licenses) a manual inspection of the file occurred.
    
     - In most cases a manual inspection of the information in the file
       resulted in a clear resolution of the license that should apply (and
       which scanner probably needed to revisit its heuristics).
    
     - When it was not immediately clear, the license identifier was
       confirmed with lawyers working with the Linux Foundation.
    
     - If there was any question as to the appropriate license identifier,
       the file was flagged for further research and to be revisited later
       in time.
    
    In total, over 70 hours of logged manual review was done on the
    spreadsheet to determine the SPDX license identifiers to apply to the
    source files by Kate, Philippe, Thomas and, in some cases, confirmation
    by lawyers working with the Linux Foundation.
    
    Kate also obtained a third independent scan of the 4.13 code base from
    FOSSology, and compared selected files where the other two scanners
    disagreed against that SPDX file, to see if there was new insights.  The
    Windriver scanner is based on an older version of FOSSology in part, so
    they are related.
    
    Thomas did random spot checks in about 500 files from the spreadsheets
    for the uapi headers and agreed with SPDX license identifier in the
    files he inspected. For the non-uapi files Thomas did random spot checks
    in about 15000 files.
    
    In initial set of patches against 4.14-rc6, 3 files were found to have
    copy/paste license identifier errors, and have been fixed to reflect the
    correct identifier.
    
    Additionally Philippe spent 10 hours this week doing a detailed manual
    inspection and review of the 12,461 patched files from the initial patch
    version early this week with:
     - a full scancode scan run, collecting the matched texts, detected
       license ids and scores
     - reviewing anything where there was a license detected (about 500+
       files) to ensure that the applied SPDX license was correct
     - reviewing anything where there was no detection but the patch license
       was not GPL-2.0 WITH Linux-syscall-note to ensure that the applied
       SPDX license was correct
    
    This produced a worksheet with 20 files needing minor correction.  This
    worksheet was then exported into 3 different .csv files for the
    different types of files to be modified.
    
    These .csv files were then reviewed by Greg.  Thomas wrote a script to
    parse the csv files and add the proper SPDX tag to the file, in the
    format that the file expected.  This script was further refined by Greg
    based on the output to detect more types of files automatically and to
    distinguish between header and source .c files (which need different
    comment types.)  Finally Greg ran the script using the .csv files to
    generate the patches.
    
    Reviewed-by: Kate Stewart <kstewart@linuxfoundation.org>
    Reviewed-by: Philippe Ombredanne <pombredanne@nexb.com>
    Reviewed-by: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/fs/orangefs/orangefs-debug.h b/fs/orangefs/orangefs-debug.h
index 387db17cde2b..b6001bb28f5a 100644
--- a/fs/orangefs/orangefs-debug.h
+++ b/fs/orangefs/orangefs-debug.h
@@ -1,3 +1,4 @@
+/* SPDX-License-Identifier: GPL-2.0 */
 /*
  * (C) 2001 Clemson University and The University of Chicago
  *

commit b4cf67a2ba1a58dbd2a967c3d877b807fef83b25
Author: Mike Marshall <hubcap@omnibond.com>
Date:   Fri Dec 11 11:00:12 2015 -0500

    Orangef: remove overlooked old-style userspace debug parts
    
    Signed-off-by: Mike Marshall <hubcap@omnibond.com>

diff --git a/fs/orangefs/orangefs-debug.h b/fs/orangefs/orangefs-debug.h
index e6b4baa5e8fb..387db17cde2b 100644
--- a/fs/orangefs/orangefs-debug.h
+++ b/fs/orangefs/orangefs-debug.h
@@ -18,79 +18,7 @@
 #include <stdint.h>
 #endif
 
-#define GOSSIP_NO_DEBUG                (__u64)0
-#define GOSSIP_BMI_DEBUG_TCP           ((__u64)1 << 0)
-#define GOSSIP_BMI_DEBUG_CONTROL       ((__u64)1 << 1)
-#define GOSSIP_BMI_DEBUG_OFFSETS       ((__u64)1 << 2)
-#define GOSSIP_BMI_DEBUG_GM            ((__u64)1 << 3)
-#define GOSSIP_JOB_DEBUG               ((__u64)1 << 4)
-#define GOSSIP_SERVER_DEBUG            ((__u64)1 << 5)
-#define GOSSIP_STO_DEBUG_CTRL          ((__u64)1 << 6)
-#define GOSSIP_STO_DEBUG_DEFAULT       ((__u64)1 << 7)
-#define GOSSIP_FLOW_DEBUG              ((__u64)1 << 8)
-#define GOSSIP_BMI_DEBUG_GM_MEM        ((__u64)1 << 9)
-#define GOSSIP_REQUEST_DEBUG           ((__u64)1 << 10)
-#define GOSSIP_FLOW_PROTO_DEBUG        ((__u64)1 << 11)
-#define GOSSIP_NCACHE_DEBUG            ((__u64)1 << 12)
-#define GOSSIP_CLIENT_DEBUG            ((__u64)1 << 13)
-#define GOSSIP_REQ_SCHED_DEBUG         ((__u64)1 << 14)
-#define GOSSIP_ACACHE_DEBUG            ((__u64)1 << 15)
-#define GOSSIP_TROVE_DEBUG             ((__u64)1 << 16)
-#define GOSSIP_TROVE_OP_DEBUG          ((__u64)1 << 17)
-#define GOSSIP_DIST_DEBUG              ((__u64)1 << 18)
-#define GOSSIP_BMI_DEBUG_IB            ((__u64)1 << 19)
-#define GOSSIP_DBPF_ATTRCACHE_DEBUG    ((__u64)1 << 20)
-#define GOSSIP_MMAP_RCACHE_DEBUG       ((__u64)1 << 21)
-#define GOSSIP_LOOKUP_DEBUG            ((__u64)1 << 22)
-#define GOSSIP_REMOVE_DEBUG            ((__u64)1 << 23)
-#define GOSSIP_GETATTR_DEBUG           ((__u64)1 << 24)
-#define GOSSIP_READDIR_DEBUG           ((__u64)1 << 25)
-#define GOSSIP_IO_DEBUG                ((__u64)1 << 26)
-#define GOSSIP_DBPF_OPEN_CACHE_DEBUG   ((__u64)1 << 27)
-#define GOSSIP_PERMISSIONS_DEBUG       ((__u64)1 << 28)
-#define GOSSIP_CANCEL_DEBUG            ((__u64)1 << 29)
-#define GOSSIP_MSGPAIR_DEBUG           ((__u64)1 << 30)
-#define GOSSIP_CLIENTCORE_DEBUG        ((__u64)1 << 31)
-#define GOSSIP_CLIENTCORE_TIMING_DEBUG ((__u64)1 << 32)
-#define GOSSIP_SETATTR_DEBUG           ((__u64)1 << 33)
-#define GOSSIP_MKDIR_DEBUG             ((__u64)1 << 34)
-#define GOSSIP_VARSTRIP_DEBUG          ((__u64)1 << 35)
-#define GOSSIP_GETEATTR_DEBUG          ((__u64)1 << 36)
-#define GOSSIP_SETEATTR_DEBUG          ((__u64)1 << 37)
-#define GOSSIP_ENDECODE_DEBUG          ((__u64)1 << 38)
-#define GOSSIP_DELEATTR_DEBUG          ((__u64)1 << 39)
-#define GOSSIP_ACCESS_DEBUG            ((__u64)1 << 40)
-#define GOSSIP_ACCESS_DETAIL_DEBUG     ((__u64)1 << 41)
-#define GOSSIP_LISTEATTR_DEBUG         ((__u64)1 << 42)
-#define GOSSIP_PERFCOUNTER_DEBUG       ((__u64)1 << 43)
-#define GOSSIP_STATE_MACHINE_DEBUG     ((__u64)1 << 44)
-#define GOSSIP_DBPF_KEYVAL_DEBUG       ((__u64)1 << 45)
-#define GOSSIP_LISTATTR_DEBUG          ((__u64)1 << 46)
-#define GOSSIP_DBPF_COALESCE_DEBUG     ((__u64)1 << 47)
-#define GOSSIP_ACCESS_HOSTNAMES        ((__u64)1 << 48)
-#define GOSSIP_FSCK_DEBUG              ((__u64)1 << 49)
-#define GOSSIP_BMI_DEBUG_MX            ((__u64)1 << 50)
-#define GOSSIP_BSTREAM_DEBUG           ((__u64)1 << 51)
-#define GOSSIP_BMI_DEBUG_PORTALS       ((__u64)1 << 52)
-#define GOSSIP_USER_DEV_DEBUG          ((__u64)1 << 53)
-#define GOSSIP_DIRECTIO_DEBUG          ((__u64)1 << 54)
-#define GOSSIP_MGMT_DEBUG              ((__u64)1 << 55)
-#define GOSSIP_MIRROR_DEBUG            ((__u64)1 << 56)
-#define GOSSIP_WIN_CLIENT_DEBUG        ((__u64)1 << 57)
-#define GOSSIP_SECURITY_DEBUG          ((__u64)1 << 58)
-#define GOSSIP_USRINT_DEBUG            ((__u64)1 << 59)
-#define GOSSIP_RCACHE_DEBUG            ((__u64)1 << 60)
-#define GOSSIP_SECCACHE_DEBUG          ((__u64)1 << 61)
-
-#define GOSSIP_BMI_DEBUG_ALL ((__u64) (GOSSIP_BMI_DEBUG_TCP +	\
-					 GOSSIP_BMI_DEBUG_CONTROL +	\
-					 GOSSIP_BMI_DEBUG_GM +		\
-					 GOSSIP_BMI_DEBUG_OFFSETS +	\
-					 GOSSIP_BMI_DEBUG_IB +		\
-					 GOSSIP_BMI_DEBUG_MX +		\
-					 GOSSIP_BMI_DEBUG_PORTALS))
-
-const char *ORANGEFS_debug_get_next_debug_keyword(int position);
+#define	GOSSIP_NO_DEBUG			(__u64)0
 
 #define GOSSIP_SUPER_DEBUG		((__u64)1 << 0)
 #define GOSSIP_INODE_DEBUG		((__u64)1 << 1)
@@ -124,131 +52,6 @@ struct __keyword_mask_s {
 	__u64 mask_val;
 };
 
-#define __DEBUG_ALL ((__u64) -1)
-
-/* map all config keywords to pvfs2 debug masks here */
-static struct __keyword_mask_s s_keyword_mask_map[] = {
-	/* Log trove debugging info.  Same as 'trove'. */
-	{"storage", GOSSIP_TROVE_DEBUG},
-	/* Log trove debugging info.  Same as 'storage'. */
-	{"trove", GOSSIP_TROVE_DEBUG},
-	/* Log trove operations. */
-	{"trove_op", GOSSIP_TROVE_OP_DEBUG},
-	/* Log network debug info. */
-	{"network", GOSSIP_BMI_DEBUG_ALL},
-	/* Log server info, including new operations. */
-	{"server", GOSSIP_SERVER_DEBUG},
-	/* Log client sysint info.  This is only useful for the client. */
-	{"client", GOSSIP_CLIENT_DEBUG},
-	/* Debug the varstrip distribution */
-	{"varstrip", GOSSIP_VARSTRIP_DEBUG},
-	/* Log job info */
-	{"job", GOSSIP_JOB_DEBUG},
-	/* Debug PINT_process_request calls.  EXTREMELY verbose! */
-	{"request", GOSSIP_REQUEST_DEBUG},
-	/* Log request scheduler events */
-	{"reqsched", GOSSIP_REQ_SCHED_DEBUG},
-	/* Log the flow protocol events, including flowproto_multiqueue */
-	{"flowproto", GOSSIP_FLOW_PROTO_DEBUG},
-	/* Log flow calls */
-	{"flow", GOSSIP_FLOW_DEBUG},
-	/* Debug the client name cache.  Only useful on the client. */
-	{"ncache", GOSSIP_NCACHE_DEBUG},
-	/* Debug read-ahead cache events.  Only useful on the client. */
-	{"mmaprcache", GOSSIP_MMAP_RCACHE_DEBUG},
-	/* Debug the attribute cache.  Only useful on the client. */
-	{"acache", GOSSIP_ACACHE_DEBUG},
-	/* Log/Debug distribution calls */
-	{"distribution", GOSSIP_DIST_DEBUG},
-	/* Debug the server-side dbpf attribute cache */
-	{"dbpfattrcache", GOSSIP_DBPF_ATTRCACHE_DEBUG},
-	/* Debug the client lookup state machine. */
-	{"lookup", GOSSIP_LOOKUP_DEBUG},
-	/* Debug the client remove state macine. */
-	{"remove", GOSSIP_REMOVE_DEBUG},
-	/* Debug the server getattr state machine. */
-	{"getattr", GOSSIP_GETATTR_DEBUG},
-	/* Debug the server setattr state machine. */
-	{"setattr", GOSSIP_SETATTR_DEBUG},
-	/* vectored getattr server state machine */
-	{"listattr", GOSSIP_LISTATTR_DEBUG},
-	/* Debug the client and server get ext attributes SM. */
-	{"geteattr", GOSSIP_GETEATTR_DEBUG},
-	/* Debug the client and server set ext attributes SM. */
-	{"seteattr", GOSSIP_SETEATTR_DEBUG},
-	/* Debug the readdir operation (client and server) */
-	{"readdir", GOSSIP_READDIR_DEBUG},
-	/* Debug the mkdir operation (server only) */
-	{"mkdir", GOSSIP_MKDIR_DEBUG},
-	/*
-	 * Debug the io operation (reads and writes)
-	 * for both the client and server.
-	 */
-	{"io", GOSSIP_IO_DEBUG},
-	/* Debug the server's open file descriptor cache */
-	{"open_cache", GOSSIP_DBPF_OPEN_CACHE_DEBUG},
-	/* Debug permissions checking on the server */
-	{"permissions", GOSSIP_PERMISSIONS_DEBUG},
-	/* Debug the cancel operation */
-	{"cancel", GOSSIP_CANCEL_DEBUG},
-	/* Debug the msgpair state machine */
-	{"msgpair", GOSSIP_MSGPAIR_DEBUG},
-	/* Debug the client core app */
-	{"clientcore", GOSSIP_CLIENTCORE_DEBUG},
-	/* Debug the client timing state machines (job timeout, etc.) */
-	{"clientcore_timing", GOSSIP_CLIENTCORE_TIMING_DEBUG},
-	/* network encoding */
-	{"endecode", GOSSIP_ENDECODE_DEBUG},
-	/* Show server file (metadata) accesses (both modify and read-only). */
-	{"access", GOSSIP_ACCESS_DEBUG},
-	/* Show more detailed server file accesses */
-	{"access_detail", GOSSIP_ACCESS_DETAIL_DEBUG},
-	/* Debug the listeattr operation */
-	{"listeattr", GOSSIP_LISTEATTR_DEBUG},
-	/* Debug the state machine management code */
-	{"sm", GOSSIP_STATE_MACHINE_DEBUG},
-	/* Debug the metadata dbpf keyval functions */
-	{"keyval", GOSSIP_DBPF_KEYVAL_DEBUG},
-	/* Debug the metadata sync coalescing code */
-	{"coalesce", GOSSIP_DBPF_COALESCE_DEBUG},
-	/* Display the hostnames instead of IP addrs in debug output */
-	{"access_hostnames", GOSSIP_ACCESS_HOSTNAMES},
-	/* Show the client device events */
-	{"user_dev", GOSSIP_USER_DEV_DEBUG},
-	/* Debug the fsck tool */
-	{"fsck", GOSSIP_FSCK_DEBUG},
-	/* Debug the bstream code */
-	{"bstream", GOSSIP_BSTREAM_DEBUG},
-	/* Debug trove in direct io mode */
-	{"directio", GOSSIP_DIRECTIO_DEBUG},
-	/* Debug direct io thread management */
-	{"mgmt", GOSSIP_MGMT_DEBUG},
-	/* Debug mirroring process */
-	{"mirror", GOSSIP_MIRROR_DEBUG},
-	/* Windows client */
-	{"win_client", GOSSIP_WIN_CLIENT_DEBUG},
-	/* Debug robust security code */
-	{"security", GOSSIP_SECURITY_DEBUG},
-	/* Capability Cache */
-	{"seccache", GOSSIP_SECCACHE_DEBUG},
-	/* Client User Interface */
-	{"usrint", GOSSIP_USRINT_DEBUG},
-	/* rcache */
-	{"rcache", GOSSIP_RCACHE_DEBUG},
-	/* Everything except the periodic events.  Useful for debugging */
-	{"verbose",
-	 (__DEBUG_ALL &
-	  ~(GOSSIP_PERFCOUNTER_DEBUG | GOSSIP_STATE_MACHINE_DEBUG |
-	    GOSSIP_ENDECODE_DEBUG | GOSSIP_USER_DEV_DEBUG))
-	 },
-	/* No debug output */
-	{"none", GOSSIP_NO_DEBUG},
-	/* Everything */
-	{"all", __DEBUG_ALL}
-};
-
-#undef __DEBUG_ALL
-
 /*
  * Map all kmod keywords to kmod debug masks here. Keep this
  * structure "packed":
@@ -286,7 +89,4 @@ static struct __keyword_mask_s s_kmod_keyword_mask_map[] = {
 static const int num_kmod_keyword_mask_map = (int)
 	(sizeof(s_kmod_keyword_mask_map) / sizeof(struct __keyword_mask_s));
 
-static const int num_keyword_mask_map = (int)
-	(sizeof(s_keyword_mask_map) / sizeof(struct __keyword_mask_s));
-
 #endif /* __ORANGEFS_DEBUG_H */

commit 575e946125f70c41c2042f10172842c5cab9a09a
Author: Mike Marshall <hubcap@omnibond.com>
Date:   Fri Dec 4 12:56:14 2015 -0500

    Orangefs: change pvfs2 filenames to orangefs
    
    Also changed references within source files that referred to
    header files whose names had changed.
    
    Signed-off-by: Mike Marshall <hubcap@omnibond.com>

diff --git a/fs/orangefs/orangefs-debug.h b/fs/orangefs/orangefs-debug.h
new file mode 100644
index 000000000000..e6b4baa5e8fb
--- /dev/null
+++ b/fs/orangefs/orangefs-debug.h
@@ -0,0 +1,292 @@
+/*
+ * (C) 2001 Clemson University and The University of Chicago
+ *
+ * See COPYING in top-level directory.
+ */
+
+/* This file just defines debugging masks to be used with the gossip
+ * logging utility.  All debugging masks for ORANGEFS are kept here to make
+ * sure we don't have collisions.
+ */
+
+#ifndef __ORANGEFS_DEBUG_H
+#define __ORANGEFS_DEBUG_H
+
+#ifdef __KERNEL__
+#include <linux/types.h>
+#else
+#include <stdint.h>
+#endif
+
+#define GOSSIP_NO_DEBUG                (__u64)0
+#define GOSSIP_BMI_DEBUG_TCP           ((__u64)1 << 0)
+#define GOSSIP_BMI_DEBUG_CONTROL       ((__u64)1 << 1)
+#define GOSSIP_BMI_DEBUG_OFFSETS       ((__u64)1 << 2)
+#define GOSSIP_BMI_DEBUG_GM            ((__u64)1 << 3)
+#define GOSSIP_JOB_DEBUG               ((__u64)1 << 4)
+#define GOSSIP_SERVER_DEBUG            ((__u64)1 << 5)
+#define GOSSIP_STO_DEBUG_CTRL          ((__u64)1 << 6)
+#define GOSSIP_STO_DEBUG_DEFAULT       ((__u64)1 << 7)
+#define GOSSIP_FLOW_DEBUG              ((__u64)1 << 8)
+#define GOSSIP_BMI_DEBUG_GM_MEM        ((__u64)1 << 9)
+#define GOSSIP_REQUEST_DEBUG           ((__u64)1 << 10)
+#define GOSSIP_FLOW_PROTO_DEBUG        ((__u64)1 << 11)
+#define GOSSIP_NCACHE_DEBUG            ((__u64)1 << 12)
+#define GOSSIP_CLIENT_DEBUG            ((__u64)1 << 13)
+#define GOSSIP_REQ_SCHED_DEBUG         ((__u64)1 << 14)
+#define GOSSIP_ACACHE_DEBUG            ((__u64)1 << 15)
+#define GOSSIP_TROVE_DEBUG             ((__u64)1 << 16)
+#define GOSSIP_TROVE_OP_DEBUG          ((__u64)1 << 17)
+#define GOSSIP_DIST_DEBUG              ((__u64)1 << 18)
+#define GOSSIP_BMI_DEBUG_IB            ((__u64)1 << 19)
+#define GOSSIP_DBPF_ATTRCACHE_DEBUG    ((__u64)1 << 20)
+#define GOSSIP_MMAP_RCACHE_DEBUG       ((__u64)1 << 21)
+#define GOSSIP_LOOKUP_DEBUG            ((__u64)1 << 22)
+#define GOSSIP_REMOVE_DEBUG            ((__u64)1 << 23)
+#define GOSSIP_GETATTR_DEBUG           ((__u64)1 << 24)
+#define GOSSIP_READDIR_DEBUG           ((__u64)1 << 25)
+#define GOSSIP_IO_DEBUG                ((__u64)1 << 26)
+#define GOSSIP_DBPF_OPEN_CACHE_DEBUG   ((__u64)1 << 27)
+#define GOSSIP_PERMISSIONS_DEBUG       ((__u64)1 << 28)
+#define GOSSIP_CANCEL_DEBUG            ((__u64)1 << 29)
+#define GOSSIP_MSGPAIR_DEBUG           ((__u64)1 << 30)
+#define GOSSIP_CLIENTCORE_DEBUG        ((__u64)1 << 31)
+#define GOSSIP_CLIENTCORE_TIMING_DEBUG ((__u64)1 << 32)
+#define GOSSIP_SETATTR_DEBUG           ((__u64)1 << 33)
+#define GOSSIP_MKDIR_DEBUG             ((__u64)1 << 34)
+#define GOSSIP_VARSTRIP_DEBUG          ((__u64)1 << 35)
+#define GOSSIP_GETEATTR_DEBUG          ((__u64)1 << 36)
+#define GOSSIP_SETEATTR_DEBUG          ((__u64)1 << 37)
+#define GOSSIP_ENDECODE_DEBUG          ((__u64)1 << 38)
+#define GOSSIP_DELEATTR_DEBUG          ((__u64)1 << 39)
+#define GOSSIP_ACCESS_DEBUG            ((__u64)1 << 40)
+#define GOSSIP_ACCESS_DETAIL_DEBUG     ((__u64)1 << 41)
+#define GOSSIP_LISTEATTR_DEBUG         ((__u64)1 << 42)
+#define GOSSIP_PERFCOUNTER_DEBUG       ((__u64)1 << 43)
+#define GOSSIP_STATE_MACHINE_DEBUG     ((__u64)1 << 44)
+#define GOSSIP_DBPF_KEYVAL_DEBUG       ((__u64)1 << 45)
+#define GOSSIP_LISTATTR_DEBUG          ((__u64)1 << 46)
+#define GOSSIP_DBPF_COALESCE_DEBUG     ((__u64)1 << 47)
+#define GOSSIP_ACCESS_HOSTNAMES        ((__u64)1 << 48)
+#define GOSSIP_FSCK_DEBUG              ((__u64)1 << 49)
+#define GOSSIP_BMI_DEBUG_MX            ((__u64)1 << 50)
+#define GOSSIP_BSTREAM_DEBUG           ((__u64)1 << 51)
+#define GOSSIP_BMI_DEBUG_PORTALS       ((__u64)1 << 52)
+#define GOSSIP_USER_DEV_DEBUG          ((__u64)1 << 53)
+#define GOSSIP_DIRECTIO_DEBUG          ((__u64)1 << 54)
+#define GOSSIP_MGMT_DEBUG              ((__u64)1 << 55)
+#define GOSSIP_MIRROR_DEBUG            ((__u64)1 << 56)
+#define GOSSIP_WIN_CLIENT_DEBUG        ((__u64)1 << 57)
+#define GOSSIP_SECURITY_DEBUG          ((__u64)1 << 58)
+#define GOSSIP_USRINT_DEBUG            ((__u64)1 << 59)
+#define GOSSIP_RCACHE_DEBUG            ((__u64)1 << 60)
+#define GOSSIP_SECCACHE_DEBUG          ((__u64)1 << 61)
+
+#define GOSSIP_BMI_DEBUG_ALL ((__u64) (GOSSIP_BMI_DEBUG_TCP +	\
+					 GOSSIP_BMI_DEBUG_CONTROL +	\
+					 GOSSIP_BMI_DEBUG_GM +		\
+					 GOSSIP_BMI_DEBUG_OFFSETS +	\
+					 GOSSIP_BMI_DEBUG_IB +		\
+					 GOSSIP_BMI_DEBUG_MX +		\
+					 GOSSIP_BMI_DEBUG_PORTALS))
+
+const char *ORANGEFS_debug_get_next_debug_keyword(int position);
+
+#define GOSSIP_SUPER_DEBUG		((__u64)1 << 0)
+#define GOSSIP_INODE_DEBUG		((__u64)1 << 1)
+#define GOSSIP_FILE_DEBUG		((__u64)1 << 2)
+#define GOSSIP_DIR_DEBUG		((__u64)1 << 3)
+#define GOSSIP_UTILS_DEBUG		((__u64)1 << 4)
+#define GOSSIP_WAIT_DEBUG		((__u64)1 << 5)
+#define GOSSIP_ACL_DEBUG		((__u64)1 << 6)
+#define GOSSIP_DCACHE_DEBUG		((__u64)1 << 7)
+#define GOSSIP_DEV_DEBUG		((__u64)1 << 8)
+#define GOSSIP_NAME_DEBUG		((__u64)1 << 9)
+#define GOSSIP_BUFMAP_DEBUG		((__u64)1 << 10)
+#define GOSSIP_CACHE_DEBUG		((__u64)1 << 11)
+#define GOSSIP_DEBUGFS_DEBUG		((__u64)1 << 12)
+#define GOSSIP_XATTR_DEBUG		((__u64)1 << 13)
+#define GOSSIP_INIT_DEBUG		((__u64)1 << 14)
+#define GOSSIP_SYSFS_DEBUG		((__u64)1 << 15)
+
+#define GOSSIP_MAX_NR                 16
+#define GOSSIP_MAX_DEBUG              (((__u64)1 << GOSSIP_MAX_NR) - 1)
+
+/*function prototypes*/
+__u64 ORANGEFS_kmod_eventlog_to_mask(const char *event_logging);
+__u64 ORANGEFS_debug_eventlog_to_mask(const char *event_logging);
+char *ORANGEFS_debug_mask_to_eventlog(__u64 mask);
+char *ORANGEFS_kmod_mask_to_eventlog(__u64 mask);
+
+/* a private internal type */
+struct __keyword_mask_s {
+	const char *keyword;
+	__u64 mask_val;
+};
+
+#define __DEBUG_ALL ((__u64) -1)
+
+/* map all config keywords to pvfs2 debug masks here */
+static struct __keyword_mask_s s_keyword_mask_map[] = {
+	/* Log trove debugging info.  Same as 'trove'. */
+	{"storage", GOSSIP_TROVE_DEBUG},
+	/* Log trove debugging info.  Same as 'storage'. */
+	{"trove", GOSSIP_TROVE_DEBUG},
+	/* Log trove operations. */
+	{"trove_op", GOSSIP_TROVE_OP_DEBUG},
+	/* Log network debug info. */
+	{"network", GOSSIP_BMI_DEBUG_ALL},
+	/* Log server info, including new operations. */
+	{"server", GOSSIP_SERVER_DEBUG},
+	/* Log client sysint info.  This is only useful for the client. */
+	{"client", GOSSIP_CLIENT_DEBUG},
+	/* Debug the varstrip distribution */
+	{"varstrip", GOSSIP_VARSTRIP_DEBUG},
+	/* Log job info */
+	{"job", GOSSIP_JOB_DEBUG},
+	/* Debug PINT_process_request calls.  EXTREMELY verbose! */
+	{"request", GOSSIP_REQUEST_DEBUG},
+	/* Log request scheduler events */
+	{"reqsched", GOSSIP_REQ_SCHED_DEBUG},
+	/* Log the flow protocol events, including flowproto_multiqueue */
+	{"flowproto", GOSSIP_FLOW_PROTO_DEBUG},
+	/* Log flow calls */
+	{"flow", GOSSIP_FLOW_DEBUG},
+	/* Debug the client name cache.  Only useful on the client. */
+	{"ncache", GOSSIP_NCACHE_DEBUG},
+	/* Debug read-ahead cache events.  Only useful on the client. */
+	{"mmaprcache", GOSSIP_MMAP_RCACHE_DEBUG},
+	/* Debug the attribute cache.  Only useful on the client. */
+	{"acache", GOSSIP_ACACHE_DEBUG},
+	/* Log/Debug distribution calls */
+	{"distribution", GOSSIP_DIST_DEBUG},
+	/* Debug the server-side dbpf attribute cache */
+	{"dbpfattrcache", GOSSIP_DBPF_ATTRCACHE_DEBUG},
+	/* Debug the client lookup state machine. */
+	{"lookup", GOSSIP_LOOKUP_DEBUG},
+	/* Debug the client remove state macine. */
+	{"remove", GOSSIP_REMOVE_DEBUG},
+	/* Debug the server getattr state machine. */
+	{"getattr", GOSSIP_GETATTR_DEBUG},
+	/* Debug the server setattr state machine. */
+	{"setattr", GOSSIP_SETATTR_DEBUG},
+	/* vectored getattr server state machine */
+	{"listattr", GOSSIP_LISTATTR_DEBUG},
+	/* Debug the client and server get ext attributes SM. */
+	{"geteattr", GOSSIP_GETEATTR_DEBUG},
+	/* Debug the client and server set ext attributes SM. */
+	{"seteattr", GOSSIP_SETEATTR_DEBUG},
+	/* Debug the readdir operation (client and server) */
+	{"readdir", GOSSIP_READDIR_DEBUG},
+	/* Debug the mkdir operation (server only) */
+	{"mkdir", GOSSIP_MKDIR_DEBUG},
+	/*
+	 * Debug the io operation (reads and writes)
+	 * for both the client and server.
+	 */
+	{"io", GOSSIP_IO_DEBUG},
+	/* Debug the server's open file descriptor cache */
+	{"open_cache", GOSSIP_DBPF_OPEN_CACHE_DEBUG},
+	/* Debug permissions checking on the server */
+	{"permissions", GOSSIP_PERMISSIONS_DEBUG},
+	/* Debug the cancel operation */
+	{"cancel", GOSSIP_CANCEL_DEBUG},
+	/* Debug the msgpair state machine */
+	{"msgpair", GOSSIP_MSGPAIR_DEBUG},
+	/* Debug the client core app */
+	{"clientcore", GOSSIP_CLIENTCORE_DEBUG},
+	/* Debug the client timing state machines (job timeout, etc.) */
+	{"clientcore_timing", GOSSIP_CLIENTCORE_TIMING_DEBUG},
+	/* network encoding */
+	{"endecode", GOSSIP_ENDECODE_DEBUG},
+	/* Show server file (metadata) accesses (both modify and read-only). */
+	{"access", GOSSIP_ACCESS_DEBUG},
+	/* Show more detailed server file accesses */
+	{"access_detail", GOSSIP_ACCESS_DETAIL_DEBUG},
+	/* Debug the listeattr operation */
+	{"listeattr", GOSSIP_LISTEATTR_DEBUG},
+	/* Debug the state machine management code */
+	{"sm", GOSSIP_STATE_MACHINE_DEBUG},
+	/* Debug the metadata dbpf keyval functions */
+	{"keyval", GOSSIP_DBPF_KEYVAL_DEBUG},
+	/* Debug the metadata sync coalescing code */
+	{"coalesce", GOSSIP_DBPF_COALESCE_DEBUG},
+	/* Display the hostnames instead of IP addrs in debug output */
+	{"access_hostnames", GOSSIP_ACCESS_HOSTNAMES},
+	/* Show the client device events */
+	{"user_dev", GOSSIP_USER_DEV_DEBUG},
+	/* Debug the fsck tool */
+	{"fsck", GOSSIP_FSCK_DEBUG},
+	/* Debug the bstream code */
+	{"bstream", GOSSIP_BSTREAM_DEBUG},
+	/* Debug trove in direct io mode */
+	{"directio", GOSSIP_DIRECTIO_DEBUG},
+	/* Debug direct io thread management */
+	{"mgmt", GOSSIP_MGMT_DEBUG},
+	/* Debug mirroring process */
+	{"mirror", GOSSIP_MIRROR_DEBUG},
+	/* Windows client */
+	{"win_client", GOSSIP_WIN_CLIENT_DEBUG},
+	/* Debug robust security code */
+	{"security", GOSSIP_SECURITY_DEBUG},
+	/* Capability Cache */
+	{"seccache", GOSSIP_SECCACHE_DEBUG},
+	/* Client User Interface */
+	{"usrint", GOSSIP_USRINT_DEBUG},
+	/* rcache */
+	{"rcache", GOSSIP_RCACHE_DEBUG},
+	/* Everything except the periodic events.  Useful for debugging */
+	{"verbose",
+	 (__DEBUG_ALL &
+	  ~(GOSSIP_PERFCOUNTER_DEBUG | GOSSIP_STATE_MACHINE_DEBUG |
+	    GOSSIP_ENDECODE_DEBUG | GOSSIP_USER_DEV_DEBUG))
+	 },
+	/* No debug output */
+	{"none", GOSSIP_NO_DEBUG},
+	/* Everything */
+	{"all", __DEBUG_ALL}
+};
+
+#undef __DEBUG_ALL
+
+/*
+ * Map all kmod keywords to kmod debug masks here. Keep this
+ * structure "packed":
+ *
+ *   "all" is always last...
+ *
+ *   keyword     mask_val     index
+ *     foo          1           0
+ *     bar          2           1
+ *     baz          4           2
+ *     qux          8           3
+ *      .           .           .
+ */
+static struct __keyword_mask_s s_kmod_keyword_mask_map[] = {
+	{"super", GOSSIP_SUPER_DEBUG},
+	{"inode", GOSSIP_INODE_DEBUG},
+	{"file", GOSSIP_FILE_DEBUG},
+	{"dir", GOSSIP_DIR_DEBUG},
+	{"utils", GOSSIP_UTILS_DEBUG},
+	{"wait", GOSSIP_WAIT_DEBUG},
+	{"acl", GOSSIP_ACL_DEBUG},
+	{"dcache", GOSSIP_DCACHE_DEBUG},
+	{"dev", GOSSIP_DEV_DEBUG},
+	{"name", GOSSIP_NAME_DEBUG},
+	{"bufmap", GOSSIP_BUFMAP_DEBUG},
+	{"cache", GOSSIP_CACHE_DEBUG},
+	{"debugfs", GOSSIP_DEBUGFS_DEBUG},
+	{"xattr", GOSSIP_XATTR_DEBUG},
+	{"init", GOSSIP_INIT_DEBUG},
+	{"sysfs", GOSSIP_SYSFS_DEBUG},
+	{"none", GOSSIP_NO_DEBUG},
+	{"all", GOSSIP_MAX_DEBUG}
+};
+
+static const int num_kmod_keyword_mask_map = (int)
+	(sizeof(s_kmod_keyword_mask_map) / sizeof(struct __keyword_mask_s));
+
+static const int num_keyword_mask_map = (int)
+	(sizeof(s_keyword_mask_map) / sizeof(struct __keyword_mask_s));
+
+#endif /* __ORANGEFS_DEBUG_H */
