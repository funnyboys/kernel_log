commit 378b6cbfb82f2a8bb47ae3b1dac0419b57d84a36
Author: Christoph Hellwig <hch@lst.de>
Date:   Mon Jul 1 23:54:35 2019 +0200

    gfs2: mark stuffed_readpage static
    
    Signed-off-by: Christoph Hellwig <hch@lst.de>
    Signed-off-by: Andreas Gruenbacher <agruenba@redhat.com>

diff --git a/fs/gfs2/aops.h b/fs/gfs2/aops.h
index 3a6d8a90d99e..ff9877a68780 100644
--- a/fs/gfs2/aops.h
+++ b/fs/gfs2/aops.h
@@ -8,7 +8,6 @@
 
 #include "incore.h"
 
-extern int stuffed_readpage(struct gfs2_inode *ip, struct page *page);
 extern void adjust_fs_space(struct inode *inode);
 extern void gfs2_page_add_databufs(struct gfs2_inode *ip, struct page *page,
 				   unsigned int from, unsigned int len);

commit e0ec0a6ba6574594f444383efbc09e621d1d8dee
Author: Christoph Hellwig <hch@lst.de>
Date:   Mon Jul 1 23:54:32 2019 +0200

    gfs2: remove the unused gfs2_stuffed_write_end function
    
    This function was overlooked when the write_begin and write_end address space
    operations were removed as part of gfs2's iomap conversion.
    
    Signed-off-by: Christoph Hellwig <hch@lst.de>
    Signed-off-by: Andreas Gruenbacher <agruenba@redhat.com>

diff --git a/fs/gfs2/aops.h b/fs/gfs2/aops.h
index fa8e5d0144dd..3a6d8a90d99e 100644
--- a/fs/gfs2/aops.h
+++ b/fs/gfs2/aops.h
@@ -9,9 +9,6 @@
 #include "incore.h"
 
 extern int stuffed_readpage(struct gfs2_inode *ip, struct page *page);
-extern int gfs2_stuffed_write_end(struct inode *inode, struct buffer_head *dibh,
-				  loff_t pos, unsigned copied,
-				  struct page *page);
 extern void adjust_fs_space(struct inode *inode);
 extern void gfs2_page_add_databufs(struct gfs2_inode *ip, struct page *page,
 				   unsigned int from, unsigned int len);

commit 64bc06bb32ee9cf458f432097113c8b495d75757
Author: Andreas Gruenbacher <agruenba@redhat.com>
Date:   Sun Jun 24 15:04:04 2018 +0100

    gfs2: iomap buffered write support
    
    With the traditional page-based writes, blocks are allocated separately
    for each page written to.  With iomap writes, we can allocate a lot more
    blocks at once, with a fraction of the allocation overhead for each
    page.
    
    Split calculating the number of blocks that can be allocated at a given
    position (gfs2_alloc_size) off from gfs2_iomap_alloc: that size
    determines the number of blocks to allocate and reserve in the journal.
    
    Signed-off-by: Andreas Gruenbacher <agruenba@redhat.com>
    Reviewed-by: Bob Peterson <rpeterso@redhat.com>

diff --git a/fs/gfs2/aops.h b/fs/gfs2/aops.h
new file mode 100644
index 000000000000..fa8e5d0144dd
--- /dev/null
+++ b/fs/gfs2/aops.h
@@ -0,0 +1,19 @@
+/* SPDX-License-Identifier: GPL-2.0 */
+/*
+ * Copyright (C) 2018 Red Hat, Inc.  All rights reserved.
+ */
+
+#ifndef __AOPS_DOT_H__
+#define __AOPS_DOT_H__
+
+#include "incore.h"
+
+extern int stuffed_readpage(struct gfs2_inode *ip, struct page *page);
+extern int gfs2_stuffed_write_end(struct inode *inode, struct buffer_head *dibh,
+				  loff_t pos, unsigned copied,
+				  struct page *page);
+extern void adjust_fs_space(struct inode *inode);
+extern void gfs2_page_add_databufs(struct gfs2_inode *ip, struct page *page,
+				   unsigned int from, unsigned int len);
+
+#endif /* __AOPS_DOT_H__ */
