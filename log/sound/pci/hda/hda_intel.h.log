commit 2393e7555b531a534152ffe7bfd1862cacedaacb
Author: Takashi Iwai <tiwai@suse.de>
Date:   Mon Apr 13 10:20:31 2020 +0200

    ALSA: hda: Release resources at error in delayed probe
    
    snd-hda-intel driver handles the most of its probe task in the delayed
    work (either via workqueue or via firmware loader).  When an error
    happens in the later delayed probe, we can't deregister the device
    itself because the probe callback already returned success and the
    device was bound.  So, for now, we set hda->init_failed flag and make
    the rest untouched until the device gets really unbound.
    However, this leaves the device up running, keeping the resources
    without any use that prevents other operations.
    
    In this patch, we release the resources at first when a probe error
    happens in the delayed probe stage, but keeps the top-level object, so
    that the PM and other ops can still refer to the object itself.
    
    Also for simplicity, snd_hda_intel object is allocated via devm, so
    that we can get rid of the explicit kfree calls.
    
    BugLink: https://bugzilla.kernel.org/show_bug.cgi?id=207043
    Link: https://lore.kernel.org/r/20200413082034.25166-4-tiwai@suse.de
    Signed-off-by: Takashi Iwai <tiwai@suse.de>

diff --git a/sound/pci/hda/hda_intel.h b/sound/pci/hda/hda_intel.h
index 2acfff3da1a0..3fb119f09040 100644
--- a/sound/pci/hda/hda_intel.h
+++ b/sound/pci/hda/hda_intel.h
@@ -27,6 +27,7 @@ struct hda_intel {
 	unsigned int use_vga_switcheroo:1;
 	unsigned int vga_switcheroo_registered:1;
 	unsigned int init_failed:1; /* delayed init failed */
+	unsigned int freed:1; /* resources already released */
 
 	bool need_i915_power:1; /* the hda controller needs i915 power */
 };

commit dd23e1d566d0f74aa3b68ab3237927bb15f0e644
Author: Takashi Iwai <tiwai@suse.de>
Date:   Tue Aug 27 16:37:50 2019 +0200

    ALSA: hda - Allow runtime PM for controller if component notifier is used
    
    Currently we disallow the runtime PM of the HD-audio controller if
    it's bound with HDMI/DP on Nvidia / AMD unless it's for dGPU.  This is
    for keeping the link up to get the proper notification for ELD
    hotplug.
    
    As explained in the commit 37a3a98ef601 ("ALSA: hda - Enable runtime
    PM only for discrete GPU"), this keep-power-up behavior is rather a
    stop-gap solution until the ELD notification via audio component.
    And now we finally got the audio component for these graphics drivers
    via commit ade49db337a9 ("ALSA: hda/hdmi - Allow audio component for
    AMD/ATI and Nvidia HDMI"), so it's time to change.
    
    This patch makes HD-audio controller again runtime-suspendable when
    the device gets bound with audio component in HDMI codec driver.  For
    making it easier to access from the codec driver, move the flag into
    the common hda_bus object instead of hda_intel flag.  Also rename it
    to keep_power, to indicate the actual meaning.
    
    Signed-off-by: Takashi Iwai <tiwai@suse.de>

diff --git a/sound/pci/hda/hda_intel.h b/sound/pci/hda/hda_intel.h
index 1468865e0342..2acfff3da1a0 100644
--- a/sound/pci/hda/hda_intel.h
+++ b/sound/pci/hda/hda_intel.h
@@ -25,7 +25,6 @@ struct hda_intel {
 
 	/* vga_switcheroo setup */
 	unsigned int use_vga_switcheroo:1;
-	unsigned int need_eld_notify_link:1;
 	unsigned int vga_switcheroo_registered:1;
 	unsigned int init_failed:1; /* delayed init failed */
 

commit 1a59d1b8e05ea6ab45f7e18897de1ef0e6bc3da6
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Mon May 27 08:55:05 2019 +0200

    treewide: Replace GPLv2 boilerplate/reference with SPDX - rule 156
    
    Based on 1 normalized pattern(s):
    
      this program is free software you can redistribute it and or modify
      it under the terms of the gnu general public license as published by
      the free software foundation either version 2 of the license or at
      your option any later version this program is distributed in the
      hope that it will be useful but without any warranty without even
      the implied warranty of merchantability or fitness for a particular
      purpose see the gnu general public license for more details you
      should have received a copy of the gnu general public license along
      with this program if not write to the free software foundation inc
      59 temple place suite 330 boston ma 02111 1307 usa
    
    extracted by the scancode license scanner the SPDX license identifier
    
      GPL-2.0-or-later
    
    has been chosen to replace the boilerplate/reference in 1334 file(s).
    
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Reviewed-by: Allison Randal <allison@lohutok.net>
    Reviewed-by: Richard Fontana <rfontana@redhat.com>
    Cc: linux-spdx@vger.kernel.org
    Link: https://lkml.kernel.org/r/20190527070033.113240726@linutronix.de
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/sound/pci/hda/hda_intel.h b/sound/pci/hda/hda_intel.h
index f59719e06b91..1468865e0342 100644
--- a/sound/pci/hda/hda_intel.h
+++ b/sound/pci/hda/hda_intel.h
@@ -1,17 +1,5 @@
+/* SPDX-License-Identifier: GPL-2.0-or-later */
 /*
- *  This program is free software; you can redistribute it and/or modify it
- *  under the terms of the GNU General Public License as published by the Free
- *  Software Foundation; either version 2 of the License, or (at your option)
- *  any later version.
- *
- *  This program is distributed in the hope that it will be useful, but WITHOUT
- *  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
- *  FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
- *  more details.
- *
- *  You should have received a copy of the GNU General Public License along with
- *  this program; if not, write to the Free Software Foundation, Inc., 59
- *  Temple Place - Suite 330, Boston, MA  02111-1307, USA.
  */
 #ifndef __SOUND_HDA_INTEL_H
 #define __SOUND_HDA_INTEL_H

commit 37a3a98ef601f89100e3bb657fb0e190b857028c
Author: Takashi Iwai <tiwai@suse.de>
Date:   Mon Sep 10 16:20:25 2018 +0200

    ALSA: hda - Enable runtime PM only for discrete GPU
    
    The recent change of vga_switcheroo allowed the runtime PM for
    HD-audio on AMD GPUs, but this also resulted in a regression.  When
    the HD-audio controller driver gets runtime-suspended, HD-audio link
    is turned off, and the hotplug notification is ignored.  This leads to
    the inconsistent audio state (the connection isn't notified and ELD is
    ignored).
    
    The best fix would be to implement the proper ELD notification via the
    audio component, but it's still not ready.  As a quick workaround,
    this patch adds the check of runtime_idle and allows the runtime
    suspend only when the vga_switcheroo is bound with discrete GPU.
    That is, a system with a single GPU and APU would be again without
    runtime PM to keep the HD-audio link for the hotplug notification and
    ELD read out.
    
    Also, the codec->auto_runtime_pm flag is set only for the discrete GPU
    at the time GPU gets bound via vga_switcheroo (i.e. only dGPU is
    forcibly runtime-PM enabled), so that APU can still get the ELD
    notification.
    
    For identifying which GPU is bound, a new vga_switcheroo client
    callback, gpu_bound, is implemented.  The vga_switcheroo simply calls
    this when GPU is bound, and tells whether it's dGPU or APU.
    
    Bugzilla: https://bugzilla.kernel.org/show_bug.cgi?id=200945
    Fixes: 07f4f97d7b4b ("vga_switcheroo: Use device link for HDA controller")
    Reported-by: Jian-Hong Pan <jian-hong@endlessm.com>
    Tested-by: Jian-Hong Pan <jian-hong@endlessm.com>
    Acked-by: Lukas Wunner <lukas@wunner.de>
    Signed-off-by: Takashi Iwai <tiwai@suse.de>

diff --git a/sound/pci/hda/hda_intel.h b/sound/pci/hda/hda_intel.h
index e3a3d318d2e5..f59719e06b91 100644
--- a/sound/pci/hda/hda_intel.h
+++ b/sound/pci/hda/hda_intel.h
@@ -37,6 +37,7 @@ struct hda_intel {
 
 	/* vga_switcheroo setup */
 	unsigned int use_vga_switcheroo:1;
+	unsigned int need_eld_notify_link:1;
 	unsigned int vga_switcheroo_registered:1;
 	unsigned int init_failed:1; /* delayed init failed */
 

commit 07f4f97d7b4bf325d9f558c5b58230387e4e57e0
Author: Lukas Wunner <lukas@wunner.de>
Date:   Sat Mar 3 10:53:24 2018 +0100

    vga_switcheroo: Use device link for HDA controller
    
    Back in 2013, runtime PM for GPUs with integrated HDA controller was
    introduced with commits 0d69704ae348 ("gpu/vga_switcheroo: add driver
    control power feature. (v3)") and 246efa4a072f ("snd/hda: add runtime
    suspend/resume on optimus support (v4)").
    
    Briefly, the idea was that the HDA controller is forced on and off in
    unison with the GPU.
    
    The original code is mostly still in place even though it was never a
    100% perfect solution:  E.g. on access to the HDA controller, the GPU
    is powered up via vga_switcheroo_runtime_resume_hdmi_audio() but there
    are no provisions to keep it resumed until access to the HDA controller
    has ceased:  The GPU autosuspends after 5 seconds, rendering the HDA
    controller inaccessible.
    
    Additionally, a kludge is required when hda_intel.c probes:  It has to
    check whether the GPU is powered down (check_hdmi_disabled()) and defer
    probing if so.
    
    However in the meantime (in v4.10) the driver core has gained a feature
    called device links which promises to solve such issues in a clean way:
    It allows us to declare a dependency from the HDA controller (consumer)
    to the GPU (supplier).  The PM core then automagically ensures that the
    GPU is runtime resumed as long as the HDA controller's ->probe hook is
    executed and whenever the HDA controller is accessed.
    
    By default, the HDA controller has a dependency on its parent, a PCIe
    Root Port.  Adding a device link creates another dependency on its
    sibling:
    
                                PCIe Root Port
                                 ^          ^
                                 |          |
                                 |          |
                                HDA  ===>  GPU
    
    The device link is not only used for runtime PM, it also guarantees that
    on system sleep, the HDA controller suspends before the GPU and resumes
    after the GPU, and on system shutdown the HDA controller's ->shutdown
    hook is executed before the one of the GPU.  It is a complete solution.
    
    Using this functionality is as simple as calling device_link_add(),
    which results in a dmesg entry like this:
    
            pci 0000:01:00.1: Linked as a consumer to 0000:01:00.0
    
    The code for the GPU-governed audio power management can thus be removed
    (except where it's still needed for legacy manual power control).
    
    The device link is added in a PCI quirk rather than in hda_intel.c.
    It is therefore legal for the GPU to runtime suspend to D3cold even if
    the HDA controller is not bound to a driver or if CONFIG_SND_HDA_INTEL
    is not enabled, for accesses to the HDA controller will cause the GPU to
    wake up regardless if they're occurring outside of hda_intel.c (think
    config space readout via sysfs).
    
    Contrary to the previous implementation, the HDA controller's power
    state is now self-governed, rather than GPU-governed, whereas the GPU's
    power state is no longer fully self-governed.  (The HDA controller needs
    to runtime suspend before the GPU can.)
    
    It is thus crucial that runtime PM is always activated on the HDA
    controller even if CONFIG_SND_HDA_POWER_SAVE_DEFAULT is set to 0 (which
    is the default), lest the GPU stays awake.  This is achieved by setting
    the auto_runtime_pm flag on every codec and the AZX_DCAPS_PM_RUNTIME
    flag on the HDA controller.
    
    A side effect is that power consumption might be reduced if the GPU is
    in use but the HDA controller is not, because the HDA controller is now
    allowed to go to D3hot.  Before, it was forced to stay in D0 as long as
    the GPU was in use.  (There is no reduction in power consumption on my
    Nvidia GK107, but there might be on other chips.)
    
    The code paths for legacy manual power control are adjusted such that
    runtime PM is disabled during power off, thereby preventing the PM core
    from resuming the HDA controller.
    
    Note that the device link is not only added on vga_switcheroo capable
    systems, but for *any* GPU with integrated HDA controller.  The idea is
    that the HDA controller streams audio via connectors located on the GPU,
    so the GPU needs to be on for the HDA controller to do anything useful.
    
    This commit implicitly fixes an unbalanced runtime PM ref upon unbind of
    hda_intel.c:  On ->probe, a runtime PM ref was previously released under
    the condition "azx_has_pm_runtime(chip) || hda->use_vga_switcheroo", but
    on ->remove a runtime PM ref was only acquired under the first of those
    conditions.  Thus, binding and unbinding the driver twice on a
    vga_switcheroo capable system caused the runtime PM refcount to drop
    below zero.  The issue is resolved because the AZX_DCAPS_PM_RUNTIME flag
    is now always set if use_vga_switcheroo is true.
    
    For more information on device links please refer to:
    https://www.kernel.org/doc/html/latest/driver-api/device_link.html
    Documentation/driver-api/device_link.rst
    
    Cc: Dave Airlie <airlied@redhat.com>
    Cc: Ben Skeggs <bskeggs@redhat.com>
    Cc: Alex Deucher <alexander.deucher@amd.com>
    Cc: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Acked-by: Bjorn Helgaas <bhelgaas@google.com>
    Reviewed-by: Takashi Iwai <tiwai@suse.de>
    Reviewed-by: Peter Wu <peter@lekensteyn.nl>
    Tested-by: Kai Heng Feng <kai.heng.feng@canonical.com> # AMD PowerXpress
    Tested-by: Mike Lothian <mike@fireburn.co.uk>          # AMD PowerXpress
    Tested-by: Denis Lisov <dennis.lissov@gmail.com>       # Nvidia Optimus
    Tested-by: Peter Wu <peter@lekensteyn.nl>              # Nvidia Optimus
    Tested-by: Lukas Wunner <lukas@wunner.de>              # MacBook Pro
    Signed-off-by: Lukas Wunner <lukas@wunner.de>
    Link: https://patchwork.freedesktop.org/patch/msgid/51bd38360ff502a8c42b1ebf4405ee1d3f27118d.1520068884.git.lukas@wunner.de

diff --git a/sound/pci/hda/hda_intel.h b/sound/pci/hda/hda_intel.h
index ff0c4d617bc1..e3a3d318d2e5 100644
--- a/sound/pci/hda/hda_intel.h
+++ b/sound/pci/hda/hda_intel.h
@@ -40,9 +40,6 @@ struct hda_intel {
 	unsigned int vga_switcheroo_registered:1;
 	unsigned int init_failed:1; /* delayed init failed */
 
-	/* secondary power domain for hdmi audio under vga device */
-	struct dev_pm_domain hdmi_pm_domain;
-
 	bool need_i915_power:1; /* the hda controller needs i915 power */
 };
 

commit 2b760d88a0fcd85a526a5c1ce4556ceff5723baa
Author: Lukas Wunner <lukas@wunner.de>
Date:   Fri Sep 4 20:49:36 2015 +0200

    ALSA: hda - Spell vga_switcheroo consistently
    
    Currently everyone and their dog has their own favourite spelling
    for vga_switcheroo. This makes it hard to grep dmesg for log entries
    relating to vga_switcheroo. It also makes it hard to find related
    source files in the tree.
    
    vga_switcheroo.c uses pr_fmt "vga_switcheroo". Use that everywhere.
    
    Signed-off-by: Lukas Wunner <lukas@wunner.de>
    Reviewed-by: Takashi Iwai <tiwai@suse.de>
    Link: http://patchwork.freedesktop.org/patch/msgid/9b0175319ce78d831acfcf11e4c6c760f826b0e3.1444663039.git.lukas@wunner.de
    Signed-off-by: Daniel Vetter <daniel.vetter@ffwll.ch>

diff --git a/sound/pci/hda/hda_intel.h b/sound/pci/hda/hda_intel.h
index 354f0bbed833..ff0c4d617bc1 100644
--- a/sound/pci/hda/hda_intel.h
+++ b/sound/pci/hda/hda_intel.h
@@ -35,7 +35,7 @@ struct hda_intel {
 	unsigned int irq_pending_warned:1;
 	unsigned int probe_continued:1;
 
-	/* VGA-switcheroo setup */
+	/* vga_switcheroo setup */
 	unsigned int use_vga_switcheroo:1;
 	unsigned int vga_switcheroo_registered:1;
 	unsigned int init_failed:1; /* delayed init failed */

commit 98d8fc6c5d3652e91c61d78941e0fa6f94771d67
Author: Mengdong Lin <mengdong.lin@intel.com>
Date:   Tue May 19 22:29:30 2015 +0800

    ALSA: hda - Move hda_i915.c from sound/pci/hda to sound/hda
    
    The file is moved to hda core and renamed to hdac_i915.c, so can be used
    by both legacy HDA driver and new Skylake audio driver.
    
    - Add snd_hdac_ prefix to the public APIs.
    - The i915 audio component is moved to core bus and dynamically allocated.
    - A static pointer hdac_acomp is used to help bind/unbind callbacks to get
      this component, because the sound card's private_data is used by the azx
      chip pointer, which is a legacy structure. It could be removed if private
      _data changes to some core structure which can be extended to find the
      bus.
    - snd_hdac_get_display_clk() is added to get the display core clock for
      HSW/BDW.
    - haswell_set_bclk() is moved to hda_intel.c because it needs to write the
      controller registers EM4/EM5, and only legacy HD-A needs it for HSW/BDW.
    - Move definition of HSW/BDW-specific registers EM4/EM5 to hda_register.h
      and rename them to HSW_EM4/HSW_EM5, because other HD-A controllers have
      different layout for the extended mode registers.
    
    Signed-off-by: Mengdong Lin <mengdong.lin@intel.com>
    Signed-off-by: Takashi Iwai <tiwai@suse.de>

diff --git a/sound/pci/hda/hda_intel.h b/sound/pci/hda/hda_intel.h
index 7fd3254a2f3f..354f0bbed833 100644
--- a/sound/pci/hda/hda_intel.h
+++ b/sound/pci/hda/hda_intel.h
@@ -16,7 +16,6 @@
 #ifndef __SOUND_HDA_INTEL_H
 #define __SOUND_HDA_INTEL_H
 
-#include <drm/i915_component.h>
 #include "hda_controller.h"
 
 struct hda_intel {
@@ -44,36 +43,7 @@ struct hda_intel {
 	/* secondary power domain for hdmi audio under vga device */
 	struct dev_pm_domain hdmi_pm_domain;
 
-	/* i915 component interface */
 	bool need_i915_power:1; /* the hda controller needs i915 power */
-	struct i915_audio_component audio_component;
-	int i915_power_refcount;
 };
 
-#ifdef CONFIG_SND_HDA_I915
-int hda_set_codec_wakeup(struct hda_intel *hda, bool enable);
-int hda_display_power(struct hda_intel *hda, bool enable);
-void haswell_set_bclk(struct hda_intel *hda);
-int hda_i915_init(struct hda_intel *hda);
-int hda_i915_exit(struct hda_intel *hda);
-#else
-static inline int hda_set_codec_wakeup(struct hda_intel *hda, bool enable)
-{
-	return 0;
-}
-static inline int hda_display_power(struct hda_intel *hda, bool enable)
-{
-	return 0;
-}
-static inline void haswell_set_bclk(struct hda_intel *hda) { return; }
-static inline int hda_i915_init(struct hda_intel *hda)
-{
-	return 0;
-}
-static inline int hda_i915_exit(struct hda_intel *hda)
-{
-	return 0;
-}
-#endif
-
 #endif

commit 0a67352153505f3ef2cdd155bfcbf7e43186bd82
Author: Lu, Han <han.lu@intel.com>
Date:   Tue May 5 09:05:48 2015 +0800

    ALSA: hda - reset display codec when power on
    
    In SKL, HDMI/DP codec and PCH HD Audio Controller are in different power wells,
    so it's necessary to reset display audio codecs when power well on, otherwise
    display audio codecs will disappear when resume from low power state.
    Reset steps when power on:
        enable codec wakeup -> azx_init_chip() -> disable codec wakeup
    
    The callback for codec wakeup enable/disable is in drivers/gpu/drm/i915/.
    
    Signed-off-by: Lu, Han <han.lu@intel.com>
    Signed-off-by: Takashi Iwai <tiwai@suse.de>

diff --git a/sound/pci/hda/hda_intel.h b/sound/pci/hda/hda_intel.h
index ff41fc30091d..7fd3254a2f3f 100644
--- a/sound/pci/hda/hda_intel.h
+++ b/sound/pci/hda/hda_intel.h
@@ -51,11 +51,16 @@ struct hda_intel {
 };
 
 #ifdef CONFIG_SND_HDA_I915
+int hda_set_codec_wakeup(struct hda_intel *hda, bool enable);
 int hda_display_power(struct hda_intel *hda, bool enable);
 void haswell_set_bclk(struct hda_intel *hda);
 int hda_i915_init(struct hda_intel *hda);
 int hda_i915_exit(struct hda_intel *hda);
 #else
+static inline int hda_set_codec_wakeup(struct hda_intel *hda, bool enable)
+{
+	return 0;
+}
 static inline int hda_display_power(struct hda_intel *hda, bool enable)
 {
 	return 0;

commit 31c648e0d304bbfc49a4a22c6139718367f3fd8d
Author: Takashi Iwai <tiwai@suse.de>
Date:   Thu Apr 30 08:22:41 2015 +0200

    ALSA: hda - Reduce ifdef CONFIG_SND_HDA_I915
    
    We're providing dummy functions for CONFIG_SND_HDA_i915=n, thus ifdef
    can be reduced.  (But hda_i915_init() has to be fixed to return zero.)
    
    This automatically fixes a compile warning:
      sound/pci/hda/hda_intel.c: In function 'azx_probe_continue':
      sound/pci/hda/hda_intel.c:1966:1: warning: label 'i915_power_fail' defined but not used [-Wunused-label]
    
    Reported-by: kbuild test robot <fengguang.wu@intel.com>
    Signed-off-by: Takashi Iwai <tiwai@suse.de>

diff --git a/sound/pci/hda/hda_intel.h b/sound/pci/hda/hda_intel.h
index 505f987eb4a2..ff41fc30091d 100644
--- a/sound/pci/hda/hda_intel.h
+++ b/sound/pci/hda/hda_intel.h
@@ -63,7 +63,7 @@ static inline int hda_display_power(struct hda_intel *hda, bool enable)
 static inline void haswell_set_bclk(struct hda_intel *hda) { return; }
 static inline int hda_i915_init(struct hda_intel *hda)
 {
-	return -ENODEV;
+	return 0;
 }
 static inline int hda_i915_exit(struct hda_intel *hda)
 {

commit 795614dde4d3550c3ef72469b1ba4d09d8635202
Author: Mengdong Lin <mengdong.lin@intel.com>
Date:   Wed Apr 29 17:43:36 2015 +0800

    ALSA: hda - divide controller and codec dependency on i915 gfx power well
    
    This patch can improve power saving for Intel platforms on which only the
    display audio codec is in the shared i915 power well:
    
    - Add a flag "need_i915_power" to indicate whether the controller needs the
      i915 power well.
    
    - The driver will always request the i915 power when probing the controller
      and codecs if AZX_DCAPS_I915_POWERWELL is set (either the controller or a
      codec needs this power).
    
    - If the controller needs the i915 power, the power will be held after probe
      until the controller is runtime suspended or S3. If the controller doesn't
      need the power, the power will be released the after probe, and a codec
      that needs the power can request/release the power via bus link_power ops.
    
    Background:
    - For Haswell/Broadwell, which has a separate HD-A controller for display audio,
      both the controller and the display codec are in the i915 power well.
    
    - For Baytrail/Braswell, the display and analog audio share the same HDA
      controller and link, and only the display codec is in the i915 power well.
    
    - For Skylake, the display and analog audio share the same HDA controller but
      use separate links. Only the display codec is in the i915 power well. And in
      legacy mode we take the two links as one. So it can follow Baytrail/Braswell.
    
    Signed-off-by: Mengdong Lin <mengdong.lin@intel.com>
    Signed-off-by: Takashi Iwai <tiwai@suse.de>

diff --git a/sound/pci/hda/hda_intel.h b/sound/pci/hda/hda_intel.h
index dc1d3ffab1aa..505f987eb4a2 100644
--- a/sound/pci/hda/hda_intel.h
+++ b/sound/pci/hda/hda_intel.h
@@ -45,6 +45,7 @@ struct hda_intel {
 	struct dev_pm_domain hdmi_pm_domain;
 
 	/* i915 component interface */
+	bool need_i915_power:1; /* the hda controller needs i915 power */
 	struct i915_audio_component audio_component;
 	int i915_power_refcount;
 };

commit d4b7b13e19258a848da920502e27526f36c5a59d
Author: Mengdong Lin <mengdong.lin@intel.com>
Date:   Wed Apr 29 17:43:12 2015 +0800

    ALSA: hda - implement a refcount for i915 power well switch
    
    This is to check the refcount of audio driver and reduce calling to i915.
    
    Signed-off-by: Mengdong Lin <mengdong.lin@intel.com>
    Signed-off-by: Takashi Iwai <tiwai@suse.de>

diff --git a/sound/pci/hda/hda_intel.h b/sound/pci/hda/hda_intel.h
index 206989878bc6..dc1d3ffab1aa 100644
--- a/sound/pci/hda/hda_intel.h
+++ b/sound/pci/hda/hda_intel.h
@@ -46,6 +46,7 @@ struct hda_intel {
 
 	/* i915 component interface */
 	struct i915_audio_component audio_component;
+	int i915_power_refcount;
 };
 
 #ifdef CONFIG_SND_HDA_I915

commit a41d122449bea303ada415ef5fb2bf434f5481f9
Author: Takashi Iwai <tiwai@suse.de>
Date:   Tue Apr 14 22:13:18 2015 +0200

    ALSA: hda - Embed bus into controller object
    
    ... and replace with the existing hda-core helper codes.
    This reduces lots of lines, finally.
    
    Since struct hda_bus is now embedded into struct azx,
    snd_hda_bus_new() is moved and expanded from hda_codec.c to
    hda_controller.c, accordingly.  Also private_free bus ops and
    private_data field are removed because we no longer need to point azx
    object from bus (we can use container_of())
    
    The spin locks are consolidated into the single one, bus->reg_lock.
    
    Signed-off-by: Takashi Iwai <tiwai@suse.de>

diff --git a/sound/pci/hda/hda_intel.h b/sound/pci/hda/hda_intel.h
index d5231f7216a7..206989878bc6 100644
--- a/sound/pci/hda/hda_intel.h
+++ b/sound/pci/hda/hda_intel.h
@@ -34,6 +34,7 @@ struct hda_intel {
 
 	/* extra flags */
 	unsigned int irq_pending_warned:1;
+	unsigned int probe_continued:1;
 
 	/* VGA-switcheroo setup */
 	unsigned int use_vga_switcheroo:1;

commit 89a93fea6182a71cedce9de1d901e4f379322cf3
Author: Takashi Iwai <tiwai@suse.de>
Date:   Thu Feb 19 18:04:17 2015 +0100

    ALSA: hda - Fold hda_priv.h into hda_controller.h
    
    There is no big reason to keep them separately.
    
    Signed-off-by: Takashi Iwai <tiwai@suse.de>

diff --git a/sound/pci/hda/hda_intel.h b/sound/pci/hda/hda_intel.h
index 348611835476..d5231f7216a7 100644
--- a/sound/pci/hda/hda_intel.h
+++ b/sound/pci/hda/hda_intel.h
@@ -17,7 +17,7 @@
 #define __SOUND_HDA_INTEL_H
 
 #include <drm/i915_component.h>
-#include "hda_priv.h"
+#include "hda_controller.h"
 
 struct hda_intel {
 	struct azx chip;

commit d7055bd653e00ef40a07065d1c94380240314c48
Author: Imre Deak <imre.deak@intel.com>
Date:   Thu Jan 8 17:54:17 2015 +0200

    ALSA: hda: add component support
    
    Register a component master to be used to interface with the i915
    driver. This is meant to replace the current interface which is based on
    module symbol lookups.
    
    Note that currently we keep the existing behavior and pin the i915
    module while the hda driver is loaded. Using the component interface
    allows us to remove this dependency once support for dynamically
    enabling / disabling the HDMI functionality is added to the driver.
    
    v2:
    - change roles between the hda and i915 components (Daniel)
    v3:
    - rename display_component to audio_component (Daniel)
    v4:
    - move removal of i915_powerwell.h from this patch to the next (Takashi)
    - request_module fails if module support isn't enabled, so ignore
      any error it returns and depend on the following NULL check of the
      component ops (Takashi)
    - change over to using dev_* instead of pr_* (Takashi)
    
    Signed-off-by: Imre Deak <imre.deak@intel.com>
    Reviewed-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Daniel Vetter <daniel.vetter@ffwll.ch>

diff --git a/sound/pci/hda/hda_intel.h b/sound/pci/hda/hda_intel.h
index 70b8306fec23..348611835476 100644
--- a/sound/pci/hda/hda_intel.h
+++ b/sound/pci/hda/hda_intel.h
@@ -16,6 +16,7 @@
 #ifndef __SOUND_HDA_INTEL_H
 #define __SOUND_HDA_INTEL_H
 
+#include <drm/i915_component.h>
 #include "hda_priv.h"
 
 struct hda_intel {
@@ -41,6 +42,9 @@ struct hda_intel {
 
 	/* secondary power domain for hdmi audio under vga device */
 	struct dev_pm_domain hdmi_pm_domain;
+
+	/* i915 component interface */
+	struct i915_audio_component audio_component;
 };
 
 #ifdef CONFIG_SND_HDA_I915

commit 926981ae3325257d0bffcf7ff7ba359edb4fd7e8
Author: Imre Deak <imre.deak@intel.com>
Date:   Thu Jan 8 17:54:16 2015 +0200

    ALSA: hda: pass intel_hda to all i915 interface functions
    
    chip is already passed to most of the i915 interface functions. Unify
    the interface by passing intel_hda instead of chip and passing it to all
    functions. Passing intel_hda instead of chip makes more sense since this
    is an intel specific interface. Also in an upcoming patch we will use
    intel_hda in all of these functions so by passing intel_hda we can save
    on some pointer casts from chip to intel_hda.
    
    This will be needed by an upcoming patch adding component support.
    
    No functional change.
    
    v2-3: unchanged
    v4:
    - pass intel_hda instead of chip
    
    Signed-off-by: Imre Deak <imre.deak@intel.com>
    Reviewed-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Daniel Vetter <daniel.vetter@ffwll.ch>

diff --git a/sound/pci/hda/hda_intel.h b/sound/pci/hda/hda_intel.h
index 434f254adb8b..70b8306fec23 100644
--- a/sound/pci/hda/hda_intel.h
+++ b/sound/pci/hda/hda_intel.h
@@ -44,18 +44,21 @@ struct hda_intel {
 };
 
 #ifdef CONFIG_SND_HDA_I915
-int hda_display_power(bool enable);
-void haswell_set_bclk(struct azx *chip);
-int hda_i915_init(void);
-int hda_i915_exit(void);
+int hda_display_power(struct hda_intel *hda, bool enable);
+void haswell_set_bclk(struct hda_intel *hda);
+int hda_i915_init(struct hda_intel *hda);
+int hda_i915_exit(struct hda_intel *hda);
 #else
-static inline int hda_display_power(bool enable) { return 0; }
-static inline void haswell_set_bclk(struct azx *chip) { return; }
-static inline int hda_i915_init(void)
+static inline int hda_display_power(struct hda_intel *hda, bool enable)
+{
+	return 0;
+}
+static inline void haswell_set_bclk(struct hda_intel *hda) { return; }
+static inline int hda_i915_init(struct hda_intel *hda)
 {
 	return -ENODEV;
 }
-static inline int hda_i915_exit(void)
+static inline int hda_i915_exit(struct hda_intel *hda)
 {
 	return 0;
 }

commit 347de1f8625199d177caf7668cfa1c00717faedb
Author: Imre Deak <imre.deak@intel.com>
Date:   Thu Jan 8 17:54:15 2015 +0200

    ALSA: hda: export struct hda_intel
    
    This struct will be needed by the component code added in an upcoming
    patch, so export it into a new hda_intel.h file. At the same time also
    merge hda_i915.h into this new header, there is no reason to keep two
    separate intel specific header file.
    
    Suggested-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Imre Deak <imre.deak@intel.com>
    Reviewed-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Daniel Vetter <daniel.vetter@ffwll.ch>

diff --git a/sound/pci/hda/hda_intel.h b/sound/pci/hda/hda_intel.h
new file mode 100644
index 000000000000..434f254adb8b
--- /dev/null
+++ b/sound/pci/hda/hda_intel.h
@@ -0,0 +1,64 @@
+/*
+ *  This program is free software; you can redistribute it and/or modify it
+ *  under the terms of the GNU General Public License as published by the Free
+ *  Software Foundation; either version 2 of the License, or (at your option)
+ *  any later version.
+ *
+ *  This program is distributed in the hope that it will be useful, but WITHOUT
+ *  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ *  FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
+ *  more details.
+ *
+ *  You should have received a copy of the GNU General Public License along with
+ *  this program; if not, write to the Free Software Foundation, Inc., 59
+ *  Temple Place - Suite 330, Boston, MA  02111-1307, USA.
+ */
+#ifndef __SOUND_HDA_INTEL_H
+#define __SOUND_HDA_INTEL_H
+
+#include "hda_priv.h"
+
+struct hda_intel {
+	struct azx chip;
+
+	/* for pending irqs */
+	struct work_struct irq_pending_work;
+
+	/* sync probing */
+	struct completion probe_wait;
+	struct work_struct probe_work;
+
+	/* card list (for power_save trigger) */
+	struct list_head list;
+
+	/* extra flags */
+	unsigned int irq_pending_warned:1;
+
+	/* VGA-switcheroo setup */
+	unsigned int use_vga_switcheroo:1;
+	unsigned int vga_switcheroo_registered:1;
+	unsigned int init_failed:1; /* delayed init failed */
+
+	/* secondary power domain for hdmi audio under vga device */
+	struct dev_pm_domain hdmi_pm_domain;
+};
+
+#ifdef CONFIG_SND_HDA_I915
+int hda_display_power(bool enable);
+void haswell_set_bclk(struct azx *chip);
+int hda_i915_init(void);
+int hda_i915_exit(void);
+#else
+static inline int hda_display_power(bool enable) { return 0; }
+static inline void haswell_set_bclk(struct azx *chip) { return; }
+static inline int hda_i915_init(void)
+{
+	return -ENODEV;
+}
+static inline int hda_i915_exit(void)
+{
+	return 0;
+}
+#endif
+
+#endif
