commit 8a2d6ae1f737fd22eaeadd0dc32b85c92f239025
Author: Ville Syrjälä <ville.syrjala@linux.intel.com>
Date:   Thu Apr 27 19:02:30 2017 +0300

    ALSA: x86: Register multiple PCM devices for the LPE audio card
    
    Now that everything is in place let's register a PCM device for
    each port of the display engine. This will make it possible to
    actually output audio to multiple displays at the same time. And
    it avoids modesets on unrelated displays from clobbering up the
    ELD and whatnot for the display currently doing the playback.
    
    v2: Add a PCM per port instead of per pipe
    v3: Fix off by one error with port numbers (Pierre-Louis)
        Fix .notify_audio_lpe() prototype (Pierre-Louis)
    
    Cc: Takashi Iwai <tiwai@suse.de>
    Cc: Pierre-Louis Bossart <pierre-louis.bossart@linux.intel.com>
    Signed-off-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Link: http://patchwork.freedesktop.org/patch/msgid/20170427160231.13337-12-ville.syrjala@linux.intel.com
    Reviewed-by: Takashi Iwai <tiwai@suse.de>

diff --git a/sound/x86/intel_hdmi_audio.h b/sound/x86/intel_hdmi_audio.h
index 2725964ebc46..0d91bb5dbab7 100644
--- a/sound/x86/intel_hdmi_audio.h
+++ b/sound/x86/intel_hdmi_audio.h
@@ -32,7 +32,6 @@
 
 #include "intel_hdmi_lpe_audio.h"
 
-#define PCM_INDEX		0
 #define MAX_PB_STREAMS		1
 #define MAX_CAP_STREAMS		0
 #define BYTES_PER_WORD		0x4
@@ -112,6 +111,8 @@ struct snd_intelhad {
 	struct snd_pcm_chmap *chmap;
 	int tmds_clock_speed;
 	int link_rate;
+	int port; /* fixed */
+	int pipe; /* can change dynamically */
 
 	/* ring buffer (BD) position index */
 	unsigned int bd_head;
@@ -123,7 +124,6 @@ struct snd_intelhad {
 	unsigned int period_bytes;	/* PCM period size in bytes */
 
 	/* internal stuff */
-	unsigned int had_config_offset;
 	union aud_cfg aud_config;	/* AUD_CONFIG reg value cache */
 	struct work_struct hdmi_audio_wq;
 	struct mutex mutex; /* for protecting chmap and eld */
@@ -138,8 +138,9 @@ struct snd_intelhad_card {
 	/* internal stuff */
 	int irq;
 	void __iomem *mmio_start;
+	int num_pipes;
 	int num_ports;
-	struct snd_intelhad pcm_ctx[3];
+	struct snd_intelhad pcm_ctx[3]; /* one for each port */
 };
 
 #endif /* _INTEL_HDMI_AUDIO_ */

commit b4eb0d522fcba0ee819f955fd3279ff4682b8b33
Author: Ville Syrjälä <ville.syrjala@linux.intel.com>
Date:   Thu Apr 27 19:02:29 2017 +0300

    ALSA: x86: Split snd_intelhad into card and PCM specific structures
    
    To allow multiple PCM devices to be registered for the LPE audio card,
    split the private data into card and PCM specific chunks. For now we'll
    stick to just one PCM device as before.
    
    v2: Rework to do a pcm device per port instead of per pipe
    
    Cc: Takashi Iwai <tiwai@suse.de>
    Cc: Pierre-Louis Bossart <pierre-louis.bossart@linux.intel.com>
    Signed-off-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Link: http://patchwork.freedesktop.org/patch/msgid/20170427160231.13337-11-ville.syrjala@linux.intel.com
    Reviewed-by: Takashi Iwai <tiwai@suse.de>

diff --git a/sound/x86/intel_hdmi_audio.h b/sound/x86/intel_hdmi_audio.h
index 2d3e389f76b3..2725964ebc46 100644
--- a/sound/x86/intel_hdmi_audio.h
+++ b/sound/x86/intel_hdmi_audio.h
@@ -101,7 +101,7 @@ struct pcm_stream_info {
  * @chmap: holds channel map info
  */
 struct snd_intelhad {
-	struct snd_card	*card;
+	struct snd_intelhad_card *card_ctx;
 	bool		connected;
 	struct		pcm_stream_info stream_info;
 	unsigned char	eld[HDMI_MAX_ELD_BYTES];
@@ -123,8 +123,6 @@ struct snd_intelhad {
 	unsigned int period_bytes;	/* PCM period size in bytes */
 
 	/* internal stuff */
-	int irq;
-	void __iomem *mmio_start;
 	unsigned int had_config_offset;
 	union aud_cfg aud_config;	/* AUD_CONFIG reg value cache */
 	struct work_struct hdmi_audio_wq;
@@ -133,4 +131,15 @@ struct snd_intelhad {
 	struct snd_jack *jack;
 };
 
+struct snd_intelhad_card {
+	struct snd_card	*card;
+	struct device *dev;
+
+	/* internal stuff */
+	int irq;
+	void __iomem *mmio_start;
+	int num_ports;
+	struct snd_intelhad pcm_ctx[3];
+};
+
 #endif /* _INTEL_HDMI_AUDIO_ */

commit b9bacf275ca2eeb8e8fa85c1705d07e2475f1aaa
Author: Takashi Iwai <tiwai@suse.de>
Date:   Tue Feb 14 12:29:38 2017 +0100

    ALSA: x86: Implement jack control
    
    This patch implements a jack interface for notifying HDMI/DP
    connection.  PA listens to this, so it can handle the monitor
    connection more gracefully.
    
    Signed-off-by: Takashi Iwai <tiwai@suse.de>

diff --git a/sound/x86/intel_hdmi_audio.h b/sound/x86/intel_hdmi_audio.h
index d6ba90fd011d..2d3e389f76b3 100644
--- a/sound/x86/intel_hdmi_audio.h
+++ b/sound/x86/intel_hdmi_audio.h
@@ -130,6 +130,7 @@ struct snd_intelhad {
 	struct work_struct hdmi_audio_wq;
 	struct mutex mutex; /* for protecting chmap and eld */
 	bool need_reset;
+	struct snd_jack *jack;
 };
 
 #endif /* _INTEL_HDMI_AUDIO_ */

commit df42cb499eb1869bfb535f6c6b5ea1406496baf4
Author: Takashi Iwai <tiwai@suse.de>
Date:   Sun Feb 12 11:35:44 2017 +0100

    ALSA: x86: Drop unused stream.running field
    
    The pcm_stream_info.running field is only set in the PCM trigger
    callback but never referred, thus it can be safely removed.
    
    Also, properly cover the spinlock in both the trigger START and STOP
    to protect had_enable_audio() calls.
    
    Signed-off-by: Takashi Iwai <tiwai@suse.de>

diff --git a/sound/x86/intel_hdmi_audio.h b/sound/x86/intel_hdmi_audio.h
index 8b9e184fef44..d6ba90fd011d 100644
--- a/sound/x86/intel_hdmi_audio.h
+++ b/sound/x86/intel_hdmi_audio.h
@@ -83,7 +83,6 @@ struct channel_map_table {
 struct pcm_stream_info {
 	struct snd_pcm_substream *substream;
 	int substream_refcount;
-	bool running;
 };
 
 /*

commit e2acecf2c88370f9d7252e7a05cd7b6d43aed720
Author: Takashi Iwai <tiwai@suse.de>
Date:   Sat Feb 11 08:21:56 2017 +0100

    ALSA: x86: Handle reset at prepare callback
    
    Currently the driver handles some reset procedure at the trigger STOP
    and the underrun functions, where both are executed in the interrupt
    context.  Especially the underrun function has a sync-loop to clear
    the UNDERRUN status bit, and this is supposed to be one of plausible
    causes of GPU hangup.
    
    Since the job to be done in the interrupt handler should be minimum,
    we move the reset function out of trigger and underrun, and push it
    into the prepare (and hw_free) callbacks instead.  Here a new flag,
    need_reset, is introduced to indicate the requirement of the reset
    procedure.  This is for avoiding the multiple resets when PCM prepare
    is called sequentially.
    
    Also in the UNDERRUN bit-clear sync loop, take a longer pause to be in
    the safer side.  Taking a longer delay is no longer a problem now
    because we're running in the normal context.
    
    Signed-off-by: Takashi Iwai <tiwai@suse.de>

diff --git a/sound/x86/intel_hdmi_audio.h b/sound/x86/intel_hdmi_audio.h
index a96728a4e7bc..8b9e184fef44 100644
--- a/sound/x86/intel_hdmi_audio.h
+++ b/sound/x86/intel_hdmi_audio.h
@@ -130,6 +130,7 @@ struct snd_intelhad {
 	union aud_cfg aud_config;	/* AUD_CONFIG reg value cache */
 	struct work_struct hdmi_audio_wq;
 	struct mutex mutex; /* for protecting chmap and eld */
+	bool need_reset;
 };
 
 #endif /* _INTEL_HDMI_AUDIO_ */

commit 40ce4b5d70b0c7e70c3e831e56d2586b57b54915
Author: Takashi Iwai <tiwai@suse.de>
Date:   Tue Feb 7 16:17:06 2017 +0100

    ALSA: x86: Cache AUD_CONFIG register value
    
    At enabling the audio, we modify AUD_CONFIG register bit 0.  So far,
    it does read-modify-write procedure with a special hack for the
    channel bits due to the silicon bug.  But we can optimize it by
    remembering the AUD_CONFIG register value privately.  This simplifies
    the things a lot.
    
    Signed-off-by: Takashi Iwai <tiwai@suse.de>

diff --git a/sound/x86/intel_hdmi_audio.h b/sound/x86/intel_hdmi_audio.h
index fe8d99cb839f..a96728a4e7bc 100644
--- a/sound/x86/intel_hdmi_audio.h
+++ b/sound/x86/intel_hdmi_audio.h
@@ -127,6 +127,7 @@ struct snd_intelhad {
 	int irq;
 	void __iomem *mmio_start;
 	unsigned int had_config_offset;
+	union aud_cfg aud_config;	/* AUD_CONFIG reg value cache */
 	struct work_struct hdmi_audio_wq;
 	struct mutex mutex; /* for protecting chmap and eld */
 };

commit 77531beeb97d079fb422d2b78a0d75c564384310
Author: Takashi Iwai <tiwai@suse.de>
Date:   Tue Feb 7 12:17:23 2017 +0100

    ALSA: x86: Rearrange defines
    
    We have two header files and everything is mixed up chaotically.
    Move the chip-specific definitions like the hardware registers to
    intel_hdmi_lpe_audio.h, and the rest, the implementation specific
    stuff into intel_hdmi_audio.h.
    
    In addition, put some more comments to the register fields, and fix
    the incorrect name prefix for AUD_HDMI_STATUS bits, too.
    
    The whole changes are merely a code shuffling, and there is no
    functional change.
    
    Signed-off-by: Takashi Iwai <tiwai@suse.de>

diff --git a/sound/x86/intel_hdmi_audio.h b/sound/x86/intel_hdmi_audio.h
index 7e2546b853ca..fe8d99cb839f 100644
--- a/sound/x86/intel_hdmi_audio.h
+++ b/sound/x86/intel_hdmi_audio.h
@@ -35,32 +35,50 @@
 #define PCM_INDEX		0
 #define MAX_PB_STREAMS		1
 #define MAX_CAP_STREAMS		0
-
-#define HDMI_INFO_FRAME_WORD1	0x000a0184
-#define DP_INFO_FRAME_WORD1	0x00441b84
-#define FIFO_THRESHOLD		0xFE
-#define DMA_FIFO_THRESHOLD	0x7
 #define BYTES_PER_WORD		0x4
+#define INTEL_HAD		"HdmiLpeAudio"
+
+/*
+ *	CEA speaker placement:
+ *
+ *	FL  FLC   FC   FRC   FR
+ *
+ *						LFE
+ *
+ *	RL  RLC   RC   RRC   RR
+ *
+ *	The Left/Right Surround channel _notions_ LS/RS in SMPTE 320M
+ *	corresponds to CEA RL/RR; The SMPTE channel _assignment_ C/LFE is
+ *	swapped to CEA LFE/FC.
+ */
+enum cea_speaker_placement {
+	FL  = (1 <<  0),        /* Front Left           */
+	FC  = (1 <<  1),        /* Front Center         */
+	FR  = (1 <<  2),        /* Front Right          */
+	FLC = (1 <<  3),        /* Front Left Center    */
+	FRC = (1 <<  4),        /* Front Right Center   */
+	RL  = (1 <<  5),        /* Rear Left            */
+	RC  = (1 <<  6),        /* Rear Center          */
+	RR  = (1 <<  7),        /* Rear Right           */
+	RLC = (1 <<  8),        /* Rear Left Center     */
+	RRC = (1 <<  9),        /* Rear Right Center    */
+	LFE = (1 << 10),        /* Low Frequency Effect */
+};
 
-/* Sampling rate as per IEC60958 Ver 3 */
-#define CH_STATUS_MAP_32KHZ	0x3
-#define CH_STATUS_MAP_44KHZ	0x0
-#define CH_STATUS_MAP_48KHZ	0x2
-#define CH_STATUS_MAP_88KHZ	0x8
-#define CH_STATUS_MAP_96KHZ	0xA
-#define CH_STATUS_MAP_176KHZ	0xC
-#define CH_STATUS_MAP_192KHZ	0xE
+struct cea_channel_speaker_allocation {
+	int ca_index;
+	int speakers[8];
 
-#define MAX_SMPL_WIDTH_20	0x0
-#define MAX_SMPL_WIDTH_24	0x1
-#define SMPL_WIDTH_16BITS	0x1
-#define SMPL_WIDTH_24BITS	0x5
-#define CHANNEL_ALLOCATION	0x1F
-#define VALID_DIP_WORDS		3
-#define LAYOUT0			0
-#define LAYOUT1			1
-#define SWAP_LFE_CENTER		0x00fac4c8
-#define AUD_CONFIG_CH_MASK	0x70
+	/* derived values, just for convenience */
+	int channels;
+	int spk_mask;
+};
+
+struct channel_map_table {
+	unsigned char map;              /* ALSA API channel map position */
+	unsigned char cea_slot;         /* CEA slot value */
+	int spk_mask;                   /* speaker position bit mask */
+};
 
 struct pcm_stream_info {
 	struct snd_pcm_substream *substream;

commit e1b239f371c0c745542cb8108d085ec728e8a69c
Author: Takashi Iwai <tiwai@suse.de>
Date:   Fri Feb 3 00:01:18 2017 +0100

    ALSA: x86: Refactor PCM process engine
    
    This is again a big rewrite of the driver; now it touches the code to
    process PCM stream transfers.
    
    The most fundamental change is that the driver may support more than
    four periods.  Instead of keeping the same index between both the ring
    buffer (with the fixed four buffer descriptors) and the PCM buffer
    periods, we keep difference indices for both (bd_head and pcm_head
    fields).  In addition, when the periods are more than four, we need to
    track both head and next indices.  That is, we now have three indices:
    bd_head, pcm_head and pcm_filled.
    
    Also, the driver works better for periods < 4, too: the remaining BDs
    out of four are marked as invalid, so that the hardware skips those
    BDs in its loop.
    
    By this flexibility, we can use even ALSA-lib dmix plugin, which
    requires 16 periods as default.
    
    The buffer size could be up to 20bit, so the max buffer size was
    increased accordingly.  However, the buffer pre-allocation is kept as
    the old value (600kB) as default.  The reason is the limited number of
    BDs: since it doesn't suffice for the useful SG page management that
    can fit with the usual page allocator like some other drivers, we have
    to still allocate continuous pages, hence we shouldn't take too big
    memories there.
    
    Signed-off-by: Takashi Iwai <tiwai@suse.de>

diff --git a/sound/x86/intel_hdmi_audio.h b/sound/x86/intel_hdmi_audio.h
index 9f713a8a88bc..7e2546b853ca 100644
--- a/sound/x86/intel_hdmi_audio.h
+++ b/sound/x86/intel_hdmi_audio.h
@@ -64,24 +64,15 @@
 
 struct pcm_stream_info {
 	struct snd_pcm_substream *substream;
-	u64		buffer_rendered;
-	u32		ring_buf_size;
 	int substream_refcount;
 	bool running;
 };
 
-struct ring_buf_info {
-	u32	buf_addr;
-	u32	buf_size;
-	u8	is_valid;
-};
-
 /*
  * struct snd_intelhad - intelhad driver structure
  *
  * @card: ptr to hold card details
  * @connected: the monitor connection status
- * @buf_info: ring buffer info
  * @stream_info: stream information
  * @eld: holds ELD info
  * @curr_buf: pointer to hold current active ring buf
@@ -91,26 +82,29 @@ struct ring_buf_info {
  * @buff_done: id of current buffer done intr
  * @dev: platoform device handle
  * @chmap: holds channel map info
- * @underrun_count: PCM stream underrun counter
  */
 struct snd_intelhad {
 	struct snd_card	*card;
 	bool		connected;
-	struct		ring_buf_info buf_info[HAD_NUM_OF_RING_BUFS];
 	struct		pcm_stream_info stream_info;
 	unsigned char	eld[HDMI_MAX_ELD_BYTES];
 	bool dp_output;
-	enum		intel_had_aud_buf_type curr_buf;
-	int		valid_buf_cnt;
 	unsigned int	aes_bits;
 	spinlock_t had_spinlock;
-	enum		intel_had_aud_buf_type buff_done;
 	struct device *dev;
 	struct snd_pcm_chmap *chmap;
-	int underrun_count;
 	int tmds_clock_speed;
 	int link_rate;
 
+	/* ring buffer (BD) position index */
+	unsigned int bd_head;
+	/* PCM buffer position indices */
+	unsigned int pcmbuf_head;	/* being processed */
+	unsigned int pcmbuf_filled;	/* to be filled */
+
+	unsigned int num_bds;		/* number of BDs */
+	unsigned int period_bytes;	/* PCM period size in bytes */
+
 	/* internal stuff */
 	int irq;
 	void __iomem *mmio_start;

commit 91b0cb0cc07bcb5114df2897531f4ea41c148c8e
Author: Takashi Iwai <tiwai@suse.de>
Date:   Thu Feb 2 17:46:49 2017 +0100

    ALSA: x86: Rename drv_status to connected
    
    After the rewrite of the runtime PM code, we have only two driver
    status: CONNECTED and DISCONNECTED.  So it's clearer to use a boolean
    flag, and name it easier one, "connected".
    
    Signed-off-by: Takashi Iwai <tiwai@suse.de>

diff --git a/sound/x86/intel_hdmi_audio.h b/sound/x86/intel_hdmi_audio.h
index dea51fcfc07f..9f713a8a88bc 100644
--- a/sound/x86/intel_hdmi_audio.h
+++ b/sound/x86/intel_hdmi_audio.h
@@ -80,7 +80,7 @@ struct ring_buf_info {
  * struct snd_intelhad - intelhad driver structure
  *
  * @card: ptr to hold card details
- * @drv_status: driver status
+ * @connected: the monitor connection status
  * @buf_info: ring buffer info
  * @stream_info: stream information
  * @eld: holds ELD info
@@ -95,7 +95,7 @@ struct ring_buf_info {
  */
 struct snd_intelhad {
 	struct snd_card	*card;
-	enum had_drv_status	drv_status;
+	bool		connected;
 	struct		ring_buf_info buf_info[HAD_NUM_OF_RING_BUFS];
 	struct		pcm_stream_info stream_info;
 	unsigned char	eld[HDMI_MAX_ELD_BYTES];

commit 03c3437755881a9f6f1b5f8c05e62edf7898a87f
Author: Takashi Iwai <tiwai@suse.de>
Date:   Thu Feb 2 16:19:03 2017 +0100

    ALSA: x86: Clean up unused defines and inclusions
    
    Many defines and constants are left unused.  Clean them up.
    
    Signed-off-by: Takashi Iwai <tiwai@suse.de>

diff --git a/sound/x86/intel_hdmi_audio.h b/sound/x86/intel_hdmi_audio.h
index 9dc0da474f05..dea51fcfc07f 100644
--- a/sound/x86/intel_hdmi_audio.h
+++ b/sound/x86/intel_hdmi_audio.h
@@ -30,20 +30,11 @@
 #ifndef _INTEL_HDMI_AUDIO_H_
 #define _INTEL_HDMI_AUDIO_H_
 
-#include <linux/types.h>
-#include <sound/initval.h>
-#include <linux/version.h>
-#include <linux/pm_runtime.h>
-#include <sound/asoundef.h>
-#include <sound/control.h>
-#include <sound/pcm.h>
-#include <drm/drm_edid.h>
 #include "intel_hdmi_lpe_audio.h"
 
 #define PCM_INDEX		0
 #define MAX_PB_STREAMS		1
 #define MAX_CAP_STREAMS		0
-#define HDMI_AUDIO_DRIVER	"hdmi-audio"
 
 #define HDMI_INFO_FRAME_WORD1	0x000a0184
 #define DP_INFO_FRAME_WORD1	0x00441b84
@@ -85,7 +76,7 @@ struct ring_buf_info {
 	u8	is_valid;
 };
 
-/**
+/*
  * struct snd_intelhad - intelhad driver structure
  *
  * @card: ptr to hold card details

commit 7ceba75f21e4ecb520b110ffada72cc0c9f5c072
Author: Takashi Iwai <tiwai@suse.de>
Date:   Thu Feb 2 15:58:35 2017 +0100

    ALSA: x86: Reduce redundant register field names
    
    Currently each register definition contains the own prefix in the
    union struct itself; for example, union aud_ch_status_0 has
    status_0_regx and status_0_regval fields.  These are simply
    superfluous, since usually the type of the variable is seen in its
    declaration or in its name.
    
    In this patch, we cut off these prefixes.  Now all register
    definitions have regx and regval fields consistently, instead.
    
    Signed-off-by: Takashi Iwai <tiwai@suse.de>

diff --git a/sound/x86/intel_hdmi_audio.h b/sound/x86/intel_hdmi_audio.h
index 4ccaa8b18566..9dc0da474f05 100644
--- a/sound/x86/intel_hdmi_audio.h
+++ b/sound/x86/intel_hdmi_audio.h
@@ -65,7 +65,6 @@
 #define SMPL_WIDTH_16BITS	0x1
 #define SMPL_WIDTH_24BITS	0x5
 #define CHANNEL_ALLOCATION	0x1F
-#define MASK_BYTE0		0x000000FF
 #define VALID_DIP_WORDS		3
 #define LAYOUT0			0
 #define LAYOUT1			1

commit df0435db1db9e385acdc0a354896d2c0e878dbd5
Author: Takashi Iwai <tiwai@suse.de>
Date:   Thu Feb 2 15:37:11 2017 +0100

    ALSA: x86: Use the standard ELD bytes definitions
    
    We have some constants defined in drm/drm_edid.h, and clean up our own
    definitions.
    
    Signed-off-by: Takashi Iwai <tiwai@suse.de>

diff --git a/sound/x86/intel_hdmi_audio.h b/sound/x86/intel_hdmi_audio.h
index 2804e94a6710..4ccaa8b18566 100644
--- a/sound/x86/intel_hdmi_audio.h
+++ b/sound/x86/intel_hdmi_audio.h
@@ -37,6 +37,7 @@
 #include <sound/asoundef.h>
 #include <sound/control.h>
 #include <sound/pcm.h>
+#include <drm/drm_edid.h>
 #include "intel_hdmi_lpe_audio.h"
 
 #define PCM_INDEX		0
@@ -107,7 +108,7 @@ struct snd_intelhad {
 	enum had_drv_status	drv_status;
 	struct		ring_buf_info buf_info[HAD_NUM_OF_RING_BUFS];
 	struct		pcm_stream_info stream_info;
-	union otm_hdmi_eld_t	eld;
+	unsigned char	eld[HDMI_MAX_ELD_BYTES];
 	bool dp_output;
 	enum		intel_had_aud_buf_type curr_buf;
 	int		valid_buf_cnt;

commit f69bd104b5cded0db547636fddd9512d7e6cfbf3
Author: Takashi Iwai <tiwai@suse.de>
Date:   Thu Feb 2 14:57:22 2017 +0100

    ALSA: x86: Move stream status into pcm_stream_info
    
    The only remaining field in struct had_stream_data is stream_type that
    holds the current stream status.  Such information fits better in
    struct pcm_stream_info, so move it as a boolean "running" field to be
    clearer.
    
    This allows us to get rid or had_stream_data definition and
    references.
    
    Also, the superfluous status check get removed in a couple of places
    where we can call PCM helpers in anyway.
    
    Signed-off-by: Takashi Iwai <tiwai@suse.de>

diff --git a/sound/x86/intel_hdmi_audio.h b/sound/x86/intel_hdmi_audio.h
index 6e5a1978e9c7..2804e94a6710 100644
--- a/sound/x86/intel_hdmi_audio.h
+++ b/sound/x86/intel_hdmi_audio.h
@@ -76,6 +76,7 @@ struct pcm_stream_info {
 	u64		buffer_rendered;
 	u32		ring_buf_size;
 	int substream_refcount;
+	bool running;
 };
 
 struct ring_buf_info {
@@ -84,10 +85,6 @@ struct ring_buf_info {
 	u8	is_valid;
 };
 
-struct had_stream_data {
-	enum had_status_stream		stream_type;
-};
-
 /**
  * struct snd_intelhad - intelhad driver structure
  *
@@ -115,7 +112,6 @@ struct snd_intelhad {
 	enum		intel_had_aud_buf_type curr_buf;
 	int		valid_buf_cnt;
 	unsigned int	aes_bits;
-	struct had_stream_data stream_data;
 	spinlock_t had_spinlock;
 	enum		intel_had_aud_buf_type buff_done;
 	struct device *dev;

commit 313d9f28c1d5e0254ca16f2df0f1b737e30c0993
Author: Takashi Iwai <tiwai@suse.de>
Date:   Thu Feb 2 13:00:12 2017 +0100

    ALSA: x86: Properly manage PCM substream lifetype
    
    The PCM substream is referred not only in the PCM callbacks but also
    in the irq handler and in the hotplug/unplug codes.  The latter code
    paths don't take the PCM lock, thus the PCM may be released
    unexpectedly while calling PCM helper functions or accessing
    pcm->runtime fields.
    
    This patch implements a simple refcount to assure the PCM substream
    accessibility while the other codes are accessing.  It needed some
    code refactoring in the relevant functions for avoiding the doubly
    spinlocks.
    
    Signed-off-by: Takashi Iwai <tiwai@suse.de>

diff --git a/sound/x86/intel_hdmi_audio.h b/sound/x86/intel_hdmi_audio.h
index 7bd273ec3275..6e5a1978e9c7 100644
--- a/sound/x86/intel_hdmi_audio.h
+++ b/sound/x86/intel_hdmi_audio.h
@@ -72,9 +72,10 @@
 #define AUD_CONFIG_CH_MASK	0x70
 
 struct pcm_stream_info {
-	struct snd_pcm_substream	*had_substream;
+	struct snd_pcm_substream *substream;
 	u64		buffer_rendered;
 	u32		ring_buf_size;
+	int substream_refcount;
 };
 
 struct ring_buf_info {

commit 7d9e79869ba2a8a552f4c2cf1df44cf9a0822f02
Author: Takashi Iwai <tiwai@suse.de>
Date:   Wed Feb 1 22:25:58 2017 +0100

    ALSA: x86: Drop unused fields from pcm_stream_info
    
    The struct pcm_stream_info contains a few unused or useless fields.
    str_id is always zero, buffer_ptr is volatile, never read, and sfreq
    is nowhere referred.  Kill them.
    
    Signed-off-by: Takashi Iwai <tiwai@suse.de>

diff --git a/sound/x86/intel_hdmi_audio.h b/sound/x86/intel_hdmi_audio.h
index 3bd2bb60f1f1..7bd273ec3275 100644
--- a/sound/x86/intel_hdmi_audio.h
+++ b/sound/x86/intel_hdmi_audio.h
@@ -72,12 +72,9 @@
 #define AUD_CONFIG_CH_MASK	0x70
 
 struct pcm_stream_info {
-	int		str_id;
 	struct snd_pcm_substream	*had_substream;
-	u32		buffer_ptr;
 	u64		buffer_rendered;
 	u32		ring_buf_size;
-	int		sfreq;
 };
 
 struct ring_buf_info {

commit fa5dfe6a01481a8fa00469be42ea32beb468a501
Author: Takashi Iwai <tiwai@suse.de>
Date:   Wed Feb 1 22:03:26 2017 +0100

    ALSA: x86: Drop redundant had_stream_pvt
    
    The had_stream_pvt struct assigned to PCM runtime private data tracks
    merely the stream running status, and the very same information is
    carried by had_stream->stream_type.  Kill it.
    
    Signed-off-by: Takashi Iwai <tiwai@suse.de>

diff --git a/sound/x86/intel_hdmi_audio.h b/sound/x86/intel_hdmi_audio.h
index 258396e61829..3bd2bb60f1f1 100644
--- a/sound/x86/intel_hdmi_audio.h
+++ b/sound/x86/intel_hdmi_audio.h
@@ -86,12 +86,6 @@ struct ring_buf_info {
 	u8	is_valid;
 };
 
-struct had_stream_pvt {
-	enum had_stream_status		stream_status;
-	int				stream_ops;
-	ssize_t				dbg_cum_bytes;
-};
-
 struct had_stream_data {
 	enum had_status_stream		stream_type;
 };

commit 0e9c67d7c88ce7054288e3b61deb09bfa59f8920
Author: Takashi Iwai <tiwai@suse.de>
Date:   Wed Feb 1 17:53:19 2017 +0100

    ALSA: x86: Drop superfluous state field
    
    The state field keeps the connection state and it's basically as same
    as drv_status field.  Drop this redundancy.
    
    Signed-off-by: Takashi Iwai <tiwai@suse.de>

diff --git a/sound/x86/intel_hdmi_audio.h b/sound/x86/intel_hdmi_audio.h
index 945f6831f1dd..258396e61829 100644
--- a/sound/x86/intel_hdmi_audio.h
+++ b/sound/x86/intel_hdmi_audio.h
@@ -129,7 +129,6 @@ struct snd_intelhad {
 	struct device *dev;
 	struct snd_pcm_chmap *chmap;
 	int underrun_count;
-	enum hdmi_connector_status state;
 	int tmds_clock_speed;
 	int link_rate;
 
@@ -138,7 +137,7 @@ struct snd_intelhad {
 	void __iomem *mmio_start;
 	unsigned int had_config_offset;
 	struct work_struct hdmi_audio_wq;
-	struct mutex mutex; /* for protecting chmap, state and eld */
+	struct mutex mutex; /* for protecting chmap and eld */
 };
 
 #endif /* _INTEL_HDMI_AUDIO_ */

commit d0e9b1a23ca3dbe24e88c6671218b9031e37db96
Author: Takashi Iwai <tiwai@suse.de>
Date:   Wed Feb 1 17:37:36 2017 +0100

    ALSA: x86: Drop flag_underrun field
    
    The flag_underrun flag is used to indicate to escalate the XRUN
    reporting at the next position inquiry, but there is a much simpler
    method to achieve it: just call snd_pcm_stop_xrun().
    
    Signed-off-by: Takashi Iwai <tiwai@suse.de>

diff --git a/sound/x86/intel_hdmi_audio.h b/sound/x86/intel_hdmi_audio.h
index be24682e3946..945f6831f1dd 100644
--- a/sound/x86/intel_hdmi_audio.h
+++ b/sound/x86/intel_hdmi_audio.h
@@ -123,7 +123,6 @@ struct snd_intelhad {
 	enum		intel_had_aud_buf_type curr_buf;
 	int		valid_buf_cnt;
 	unsigned int	aes_bits;
-	bool flag_underrun;
 	struct had_stream_data stream_data;
 	spinlock_t had_spinlock;
 	enum		intel_had_aud_buf_type buff_done;

commit 8f8d1d7fe009c320d80ed1c7b0c1d3d48b538965
Author: Takashi Iwai <tiwai@suse.de>
Date:   Wed Feb 1 17:24:02 2017 +0100

    ALSA: x86: Fix racy access to chmap
    
    The access to chmap can be racy against the hotplug process, where it
    recreates the chmap on the fly.  For protecting against it, a mutex is
    introduced in this patch.  It's also used for protecting the change /
    reference of eld and state fields, too.
    
    Signed-off-by: Takashi Iwai <tiwai@suse.de>

diff --git a/sound/x86/intel_hdmi_audio.h b/sound/x86/intel_hdmi_audio.h
index 8b85a5668d83..be24682e3946 100644
--- a/sound/x86/intel_hdmi_audio.h
+++ b/sound/x86/intel_hdmi_audio.h
@@ -139,6 +139,7 @@ struct snd_intelhad {
 	void __iomem *mmio_start;
 	unsigned int had_config_offset;
 	struct work_struct hdmi_audio_wq;
+	struct mutex mutex; /* for protecting chmap, state and eld */
 };
 
 #endif /* _INTEL_HDMI_AUDIO_ */

commit 4151ee845ad8230d18ac4a0e0bf1037180c6d2d9
Author: Takashi Iwai <tiwai@suse.de>
Date:   Tue Jan 31 18:14:15 2017 +0100

    ALSA: x86: Remove _v[12] suffices
    
    Although we dropped the most of the obsoleted *_v1 definitions and
    codes, some codes still keep the _v1 or _v2 suffices.  Now they are
    ripped off.
    
    The only thing to be done carefully here is the definition of control
    offsets.  The original code defines enum hdmi_ctrl_reg_offset_v1 and
    a few new elements just for v2 on its top.  After this cleanup, we
    remove the old AUD_HDMI_STATUS and AUD_HDMIW_INFOFR definitions and
    replace with the v2 values.
    
    Signed-off-by: Takashi Iwai <tiwai@suse.de>

diff --git a/sound/x86/intel_hdmi_audio.h b/sound/x86/intel_hdmi_audio.h
index 4549c4d9d650..8b85a5668d83 100644
--- a/sound/x86/intel_hdmi_audio.h
+++ b/sound/x86/intel_hdmi_audio.h
@@ -69,7 +69,7 @@
 #define LAYOUT0			0
 #define LAYOUT1			1
 #define SWAP_LFE_CENTER		0x00fac4c8
-#define AUD_CONFIG_CH_MASK_V2	0x70
+#define AUD_CONFIG_CH_MASK	0x70
 
 struct pcm_stream_info {
 	int		str_id;

commit e9d65abfa63fad3da372a3852dcade88b5506f4c
Author: Takashi Iwai <tiwai@suse.de>
Date:   Tue Jan 31 16:11:27 2017 +0100

    ALSA: x86: Drop unused fields from snd_intelhad struct
    
    Also change the flag_underrun to bool to be clearer.
    
    Signed-off-by: Takashi Iwai <tiwai@suse.de>

diff --git a/sound/x86/intel_hdmi_audio.h b/sound/x86/intel_hdmi_audio.h
index bcbb4b262fff..4549c4d9d650 100644
--- a/sound/x86/intel_hdmi_audio.h
+++ b/sound/x86/intel_hdmi_audio.h
@@ -39,8 +39,6 @@
 #include <sound/pcm.h>
 #include "intel_hdmi_lpe_audio.h"
 
-struct platform_device;
-
 #define PCM_INDEX		0
 #define MAX_PB_STREAMS		1
 #define MAX_CAP_STREAMS		0
@@ -102,8 +100,6 @@ struct had_stream_data {
  * struct snd_intelhad - intelhad driver structure
  *
  * @card: ptr to hold card details
- * @card_index: sound card index
- * @card_id: detected sound card id
  * @drv_status: driver status
  * @buf_info: ring buffer info
  * @stream_info: stream information
@@ -114,15 +110,11 @@ struct had_stream_data {
  * @aes_bits: IEC958 status bits
  * @buff_done: id of current buffer done intr
  * @dev: platoform device handle
- * @kctl: holds kctl ptrs used for channel map
  * @chmap: holds channel map info
- * @audio_reg_base: hdmi audio register base offset
  * @underrun_count: PCM stream underrun counter
  */
 struct snd_intelhad {
 	struct snd_card	*card;
-	int		card_index;
-	char		*card_id;
 	enum had_drv_status	drv_status;
 	struct		ring_buf_info buf_info[HAD_NUM_OF_RING_BUFS];
 	struct		pcm_stream_info stream_info;
@@ -131,15 +123,12 @@ struct snd_intelhad {
 	enum		intel_had_aud_buf_type curr_buf;
 	int		valid_buf_cnt;
 	unsigned int	aes_bits;
-	int flag_underrun;
+	bool flag_underrun;
 	struct had_stream_data stream_data;
 	spinlock_t had_spinlock;
 	enum		intel_had_aud_buf_type buff_done;
 	struct device *dev;
-	struct snd_kcontrol *kctl;
 	struct snd_pcm_chmap *chmap;
-	unsigned int	*audio_reg_base;
-	unsigned int	audio_cfg_offset;
 	int underrun_count;
 	enum hdmi_connector_status state;
 	int tmds_clock_speed;
@@ -149,7 +138,6 @@ struct snd_intelhad {
 	int irq;
 	void __iomem *mmio_start;
 	unsigned int had_config_offset;
-	int hdmi_audio_interrupt_mask;
 	struct work_struct hdmi_audio_wq;
 };
 

commit df76df12f178642cac616b86a762d2ee749fe402
Author: Takashi Iwai <tiwai@suse.de>
Date:   Tue Jan 31 16:04:10 2017 +0100

    ALSA: x86: Remove indirect call of snd_pcm_period_elapsed()
    
    Again another indirect call...  Let's straighten it up.
    Also define the had_stream field with a proper type instead of a void
    pointer.
    
    Signed-off-by: Takashi Iwai <tiwai@suse.de>

diff --git a/sound/x86/intel_hdmi_audio.h b/sound/x86/intel_hdmi_audio.h
index d301c3021375..bcbb4b262fff 100644
--- a/sound/x86/intel_hdmi_audio.h
+++ b/sound/x86/intel_hdmi_audio.h
@@ -75,8 +75,7 @@ struct platform_device;
 
 struct pcm_stream_info {
 	int		str_id;
-	void	*had_substream;
-	void	(*period_elapsed)(void *had_substream);
+	struct snd_pcm_substream	*had_substream;
 	u32		buffer_ptr;
 	u64		buffer_rendered;
 	u32		ring_buf_size;

commit 372d855f87b535005e392094afff9927bc000cf9
Author: Takashi Iwai <tiwai@suse.de>
Date:   Tue Jan 31 13:57:58 2017 +0100

    ALSA: x86: Fold intel_hdmi_audio_if.c into main file
    
    As the very last step, we fold intel_hdmi_audio_if.c into the main
    file, intel_hdmi_audio.c.  This is merely a cleanup, and no functional
    change.
    
    By this move, we can mark all functions and variables as static, which
    allows the compiler more optimizations.
    
    Signed-off-by: Takashi Iwai <tiwai@suse.de>

diff --git a/sound/x86/intel_hdmi_audio.h b/sound/x86/intel_hdmi_audio.h
index 6efa846f98c9..d301c3021375 100644
--- a/sound/x86/intel_hdmi_audio.h
+++ b/sound/x86/intel_hdmi_audio.h
@@ -154,35 +154,4 @@ struct snd_intelhad {
 	struct work_struct hdmi_audio_wq;
 };
 
-int hdmi_lpe_audio_suspend(struct platform_device *pdev, pm_message_t state);
-int hdmi_lpe_audio_resume(struct platform_device *pdev);
-extern struct snd_pcm_ops snd_intelhad_playback_ops;
-
-int had_process_buffer_done(struct snd_intelhad *intelhaddata);
-int had_process_buffer_underrun(struct snd_intelhad *intelhaddata);
-int had_process_hot_plug(struct snd_intelhad *intelhaddata);
-int had_process_hot_unplug(struct snd_intelhad *intelhaddata);
-
-int snd_intelhad_init_audio_ctrl(struct snd_pcm_substream *substream,
-					struct snd_intelhad *intelhaddata,
-					int flag_silence);
-int snd_intelhad_prog_buffer(struct snd_intelhad *intelhaddata,
-					int start, int end);
-int snd_intelhad_invd_buffer(int start, int end);
-int snd_intelhad_read_len(struct snd_intelhad *intelhaddata);
-void had_build_channel_allocation_map(struct snd_intelhad *intelhaddata);
-
-void snd_intelhad_enable_audio_int(struct snd_intelhad *ctx, bool enable);
-void snd_intelhad_enable_audio(struct snd_intelhad *ctx, bool enable);
-void snd_intelhad_handle_underrun(struct snd_intelhad *intelhaddata);
-
-/* Register access functions */
-int had_get_hwstate(struct snd_intelhad *intelhaddata);
-int had_read_register(struct snd_intelhad *intelhaddata,
-		      u32 reg_addr, u32 *data);
-int had_write_register(struct snd_intelhad *intelhaddata,
-		       u32 reg_addr, u32 data);
-int had_read_modify(struct snd_intelhad *intelhaddata,
-		    u32 reg_addr, u32 data, u32 mask);
-
 #endif /* _INTEL_HDMI_AUDIO_ */

commit da8648097497505d05d8cff6892351f99c029791
Author: Takashi Iwai <tiwai@suse.de>
Date:   Tue Jan 31 13:52:22 2017 +0100

    ALSA: x86: Flatten two abstraction layers
    
    This is the final stage for a big clean-up series.  Here we flatten
    the two layers into one.  Formerly, the implementation was split to
    HDMI "shell" that talks with the platform device, and HDMI audio part
    that communicates via caps and other event handlers.  All these would
    be good if there were multiple instantiations or if there were data
    protection.  But neither are true in our case.  That said, it'll be
    easier to have a flat driver structure in the end.
    
    In this patch, the former struct hdmi_lpe_audio_ctx is forged into the
    existing struct snd_intelhad.  The latter has already a few members
    that are basically the copy from the former.  Only a few new members
    for the lowlevel I/O are added by this change.
    
    Then, the had_get_caps() and had_set_caps() are simply replaced with
    the direct calls to copy the data in the struct fields.  Also, the
    had_event_handler() calls are replaced with the direct call for each
    event as well.
    
    Signed-off-by: Takashi Iwai <tiwai@suse.de>

diff --git a/sound/x86/intel_hdmi_audio.h b/sound/x86/intel_hdmi_audio.h
index 8415f93e40dc..6efa846f98c9 100644
--- a/sound/x86/intel_hdmi_audio.h
+++ b/sound/x86/intel_hdmi_audio.h
@@ -108,7 +108,7 @@ struct had_stream_data {
  * @drv_status: driver status
  * @buf_info: ring buffer info
  * @stream_info: stream information
- * @eeld: holds EELD info
+ * @eld: holds ELD info
  * @curr_buf: pointer to hold current active ring buf
  * @valid_buf_cnt: ring buffer count for stream
  * @had_spinlock: driver lock
@@ -127,7 +127,7 @@ struct snd_intelhad {
 	enum had_drv_status	drv_status;
 	struct		ring_buf_info buf_info[HAD_NUM_OF_RING_BUFS];
 	struct		pcm_stream_info stream_info;
-	union otm_hdmi_eld_t	eeld;
+	union otm_hdmi_eld_t	eld;
 	bool dp_output;
 	enum		intel_had_aud_buf_type curr_buf;
 	int		valid_buf_cnt;
@@ -142,15 +142,27 @@ struct snd_intelhad {
 	unsigned int	*audio_reg_base;
 	unsigned int	audio_cfg_offset;
 	int underrun_count;
+	enum hdmi_connector_status state;
+	int tmds_clock_speed;
+	int link_rate;
+
+	/* internal stuff */
+	int irq;
+	void __iomem *mmio_start;
+	unsigned int had_config_offset;
+	int hdmi_audio_interrupt_mask;
+	struct work_struct hdmi_audio_wq;
 };
 
-int had_event_handler(enum had_event_type event_type, void *data);
-
-int hdmi_audio_suspend(void *drv_data);
-int hdmi_audio_resume(void *drv_data);
-int hdmi_audio_mode_change(struct snd_pcm_substream *substream);
+int hdmi_lpe_audio_suspend(struct platform_device *pdev, pm_message_t state);
+int hdmi_lpe_audio_resume(struct platform_device *pdev);
 extern struct snd_pcm_ops snd_intelhad_playback_ops;
 
+int had_process_buffer_done(struct snd_intelhad *intelhaddata);
+int had_process_buffer_underrun(struct snd_intelhad *intelhaddata);
+int had_process_hot_plug(struct snd_intelhad *intelhaddata);
+int had_process_hot_unplug(struct snd_intelhad *intelhaddata);
+
 int snd_intelhad_init_audio_ctrl(struct snd_pcm_substream *substream,
 					struct snd_intelhad *intelhaddata,
 					int flag_silence);
@@ -160,15 +172,12 @@ int snd_intelhad_invd_buffer(int start, int end);
 int snd_intelhad_read_len(struct snd_intelhad *intelhaddata);
 void had_build_channel_allocation_map(struct snd_intelhad *intelhaddata);
 
-void snd_intelhad_enable_audio(struct snd_pcm_substream *substream, u8 enable);
+void snd_intelhad_enable_audio_int(struct snd_intelhad *ctx, bool enable);
+void snd_intelhad_enable_audio(struct snd_intelhad *ctx, bool enable);
 void snd_intelhad_handle_underrun(struct snd_intelhad *intelhaddata);
 
 /* Register access functions */
 int had_get_hwstate(struct snd_intelhad *intelhaddata);
-int had_get_caps(struct snd_intelhad *intelhaddata,
-		 enum had_caps_list query_element, void *capabilties);
-int had_set_caps(struct snd_intelhad *intelhaddata,
-		 enum had_caps_list set_element, void *capabilties);
 int had_read_register(struct snd_intelhad *intelhaddata,
 		      u32 reg_addr, u32 *data);
 int had_write_register(struct snd_intelhad *intelhaddata,
@@ -176,8 +185,4 @@ int had_write_register(struct snd_intelhad *intelhaddata,
 int had_read_modify(struct snd_intelhad *intelhaddata,
 		    u32 reg_addr, u32 data, u32 mask);
 
-int hdmi_audio_probe(struct platform_device *devptr,
-		     struct snd_intelhad **had_ret);
-int hdmi_audio_remove(struct snd_intelhad *intelhaddata);
-
 #endif /* _INTEL_HDMI_AUDIO_ */

commit eeb756c5bf7566fd79312798a32f59e594688b79
Author: Takashi Iwai <tiwai@suse.de>
Date:   Tue Jan 31 11:06:34 2017 +0100

    ALSA: x86: Drop unused hdmi_audio_query()
    
    It's used nowhere.  Kill it.
    
    Signed-off-by: Takashi Iwai <tiwai@suse.de>

diff --git a/sound/x86/intel_hdmi_audio.h b/sound/x86/intel_hdmi_audio.h
index 98a004499f3c..8415f93e40dc 100644
--- a/sound/x86/intel_hdmi_audio.h
+++ b/sound/x86/intel_hdmi_audio.h
@@ -146,7 +146,6 @@ struct snd_intelhad {
 
 int had_event_handler(enum had_event_type event_type, void *data);
 
-int hdmi_audio_query(void *drv_data, struct hdmi_audio_event event);
 int hdmi_audio_suspend(void *drv_data);
 int hdmi_audio_resume(void *drv_data);
 int hdmi_audio_mode_change(struct snd_pcm_substream *substream);

commit 5647aec26640ffdf099d51b3403eaeac10d74147
Author: Takashi Iwai <tiwai@suse.de>
Date:   Tue Jan 31 08:14:34 2017 +0100

    ALSA: x86: Embed snd_intelhad into snd_card
    
    Instead of allocating snd_intelhad struct, use the card's private_data
    and embed it.  It simplifies the code a lot.
    
    While we're at it, embed had_stream into snd_intelhad struct instead
    of individually allocating, and rename had_pvt_data to a bit more
    specific name, had_stream_data.
    
    Signed-off-by: Takashi Iwai <tiwai@suse.de>

diff --git a/sound/x86/intel_hdmi_audio.h b/sound/x86/intel_hdmi_audio.h
index 32a2fb766e47..98a004499f3c 100644
--- a/sound/x86/intel_hdmi_audio.h
+++ b/sound/x86/intel_hdmi_audio.h
@@ -95,7 +95,7 @@ struct had_stream_pvt {
 	ssize_t				dbg_cum_bytes;
 };
 
-struct had_pvt_data {
+struct had_stream_data {
 	enum had_status_stream		stream_type;
 };
 
@@ -133,7 +133,7 @@ struct snd_intelhad {
 	int		valid_buf_cnt;
 	unsigned int	aes_bits;
 	int flag_underrun;
-	struct had_pvt_data *private_data;
+	struct had_stream_data stream_data;
 	spinlock_t had_spinlock;
 	enum		intel_had_aud_buf_type buff_done;
 	struct device *dev;

commit 0e18060f99a42c20f87d64eb30e5f424509643ae
Author: Takashi Iwai <tiwai@suse.de>
Date:   Tue Jan 31 07:53:56 2017 +0100

    ALSA: x86: Drop unused hw_silence field
    
    It's nowhere used.  Let's drop it.
    
    Signed-off-by: Takashi Iwai <tiwai@suse.de>

diff --git a/sound/x86/intel_hdmi_audio.h b/sound/x86/intel_hdmi_audio.h
index da0a927d37fe..32a2fb766e47 100644
--- a/sound/x86/intel_hdmi_audio.h
+++ b/sound/x86/intel_hdmi_audio.h
@@ -118,7 +118,6 @@ struct had_pvt_data {
  * @kctl: holds kctl ptrs used for channel map
  * @chmap: holds channel map info
  * @audio_reg_base: hdmi audio register base offset
- * @hw_silence: flag indicates SoC support for HW silence/Keep alive
  * @underrun_count: PCM stream underrun counter
  */
 struct snd_intelhad {
@@ -142,7 +141,6 @@ struct snd_intelhad {
 	struct snd_pcm_chmap *chmap;
 	unsigned int	*audio_reg_base;
 	unsigned int	audio_cfg_offset;
-	bool		hw_silence;
 	int underrun_count;
 };
 

commit 6ddb3ab66f94109c524859ba4dd9d43772893676
Author: Takashi Iwai <tiwai@suse.de>
Date:   Mon Jan 30 18:17:44 2017 +0100

    ALSA: x86: Move the global underrun_count to struct snd_intelhad
    
    The last one is in intel_hdmi_audio.c, underrun_count: this can be
    embedded in snd_intelhad object.
    
    Signed-off-by: Takashi Iwai <tiwai@suse.de>

diff --git a/sound/x86/intel_hdmi_audio.h b/sound/x86/intel_hdmi_audio.h
index 110d1d083000..da0a927d37fe 100644
--- a/sound/x86/intel_hdmi_audio.h
+++ b/sound/x86/intel_hdmi_audio.h
@@ -119,6 +119,7 @@ struct had_pvt_data {
  * @chmap: holds channel map info
  * @audio_reg_base: hdmi audio register base offset
  * @hw_silence: flag indicates SoC support for HW silence/Keep alive
+ * @underrun_count: PCM stream underrun counter
  */
 struct snd_intelhad {
 	struct snd_card	*card;
@@ -142,6 +143,7 @@ struct snd_intelhad {
 	unsigned int	*audio_reg_base;
 	unsigned int	audio_cfg_offset;
 	bool		hw_silence;
+	int underrun_count;
 };
 
 int had_event_handler(enum had_event_type event_type, void *data);

commit 437af8f2946231ee141bc2a8d37063a8bb6047b0
Author: Takashi Iwai <tiwai@suse.de>
Date:   Mon Jan 30 17:38:00 2017 +0100

    ALSA: x86: Call event callback directly
    
    Currently the driver calls the event callback stored in its ctx
    pointer, but it's obviously inefficient.  Replace it with the direct
    calls.
    
    Signed-off-by: Takashi Iwai <tiwai@suse.de>

diff --git a/sound/x86/intel_hdmi_audio.h b/sound/x86/intel_hdmi_audio.h
index 5a82a3f429d7..110d1d083000 100644
--- a/sound/x86/intel_hdmi_audio.h
+++ b/sound/x86/intel_hdmi_audio.h
@@ -99,10 +99,6 @@ struct had_pvt_data {
 	enum had_status_stream		stream_type;
 };
 
-struct had_callback_ops {
-	had_event_call_back intel_had_event_call_back;
-};
-
 /**
  * struct snd_intelhad - intelhad driver structure
  *

commit 79dda75a2cfc5628f25338122d24ee8789b367cf
Author: Takashi Iwai <tiwai@suse.de>
Date:   Mon Jan 30 17:23:39 2017 +0100

    ALSA: x86: Pass snd_intelhad object to helpers
    
    For reducing the global variable reference, keep snd_intelhad object
    in the context and pass it to each helper.  It's a preliminary change
    for further cleanup.
    
    This also includes the simplification of the probe procedure: the LPE
    platform driver directly gets the created snd_intelhad object by
    hdmi_audio_probe(), and passes it to each helper and destructor,
    hdmi_audio_remove().  The hdmi_audio_probe() function doesn't call the
    back-registration any longer, which is fairly useless.  The LPE
    platform driver initializes the stuff instead at the right place, and
    calls the wq after the object creation in the probe function itself.
    
    Signed-off-by: Takashi Iwai <tiwai@suse.de>

diff --git a/sound/x86/intel_hdmi_audio.h b/sound/x86/intel_hdmi_audio.h
index ba13ae63bea3..5a82a3f429d7 100644
--- a/sound/x86/intel_hdmi_audio.h
+++ b/sound/x86/intel_hdmi_audio.h
@@ -39,6 +39,8 @@
 #include <sound/pcm.h>
 #include "intel_hdmi_lpe_audio.h"
 
+struct platform_device;
+
 #define PCM_INDEX		0
 #define MAX_PB_STREAMS		1
 #define MAX_CAP_STREAMS		0
@@ -168,13 +170,19 @@ void snd_intelhad_handle_underrun(struct snd_intelhad *intelhaddata);
 
 /* Register access functions */
 int had_get_hwstate(struct snd_intelhad *intelhaddata);
-int had_get_caps(enum had_caps_list query_element, void *capabilties);
-int had_set_caps(enum had_caps_list set_element, void *capabilties);
-int had_read_register(u32 reg_addr, u32 *data);
-int had_write_register(u32 reg_addr, u32 data);
-int had_read_modify(u32 reg_addr, u32 data, u32 mask);
-
-int hdmi_audio_probe(void *devptr);
-int hdmi_audio_remove(void *pdev);
+int had_get_caps(struct snd_intelhad *intelhaddata,
+		 enum had_caps_list query_element, void *capabilties);
+int had_set_caps(struct snd_intelhad *intelhaddata,
+		 enum had_caps_list set_element, void *capabilties);
+int had_read_register(struct snd_intelhad *intelhaddata,
+		      u32 reg_addr, u32 *data);
+int had_write_register(struct snd_intelhad *intelhaddata,
+		       u32 reg_addr, u32 data);
+int had_read_modify(struct snd_intelhad *intelhaddata,
+		    u32 reg_addr, u32 data, u32 mask);
+
+int hdmi_audio_probe(struct platform_device *devptr,
+		     struct snd_intelhad **had_ret);
+int hdmi_audio_remove(struct snd_intelhad *intelhaddata);
 
 #endif /* _INTEL_HDMI_AUDIO_ */

commit 6f9ecc76f4e04b111160d789f36a8c5bf1cc9ab6
Author: Takashi Iwai <tiwai@suse.de>
Date:   Mon Jan 30 16:52:06 2017 +0100

    ALSA: x86: Drop snd_intel_had_interface indirect calls
    
    Yet another indirection is killed: at this time, it's
    snd_intel_had_interface.  It contains also the name string, but it's
    nowhere used, thus we can kill it, too.
    
    Signed-off-by: Takashi Iwai <tiwai@suse.de>

diff --git a/sound/x86/intel_hdmi_audio.h b/sound/x86/intel_hdmi_audio.h
index e7c7432c5078..ba13ae63bea3 100644
--- a/sound/x86/intel_hdmi_audio.h
+++ b/sound/x86/intel_hdmi_audio.h
@@ -149,7 +149,7 @@ struct snd_intelhad {
 int had_event_handler(enum had_event_type event_type, void *data);
 
 int hdmi_audio_query(void *drv_data, struct hdmi_audio_event event);
-int hdmi_audio_suspend(void *drv_data, struct hdmi_audio_event event);
+int hdmi_audio_suspend(void *drv_data);
 int hdmi_audio_resume(void *drv_data);
 int hdmi_audio_mode_change(struct snd_pcm_substream *substream);
 extern struct snd_pcm_ops snd_intelhad_playback_ops;

commit 9eca88c881f1c74c7f5dda3c67cb0b4178429e93
Author: Takashi Iwai <tiwai@suse.de>
Date:   Mon Jan 30 16:37:06 2017 +0100

    ALSA: x86: Replace indirect query_ops with direct calls
    
    Like the previous patch, this replaces the indirect query_ops calls
    via direct function calls.  They are only get_caps and set_caps, so
    fairly straightforward at this time.
    
    Signed-off-by: Takashi Iwai <tiwai@suse.de>

diff --git a/sound/x86/intel_hdmi_audio.h b/sound/x86/intel_hdmi_audio.h
index 5ba06042f669..e7c7432c5078 100644
--- a/sound/x86/intel_hdmi_audio.h
+++ b/sound/x86/intel_hdmi_audio.h
@@ -107,7 +107,6 @@ struct had_callback_ops {
  * @card: ptr to hold card details
  * @card_index: sound card index
  * @card_id: detected sound card id
- * @query_ops: caps call backs for get/set operations
  * @drv_status: driver status
  * @buf_info: ring buffer info
  * @stream_info: stream information
@@ -127,7 +126,6 @@ struct snd_intelhad {
 	struct snd_card	*card;
 	int		card_index;
 	char		*card_id;
-	struct hdmi_audio_query_set_ops	query_ops;
 	enum had_drv_status	drv_status;
 	struct		ring_buf_info buf_info[HAD_NUM_OF_RING_BUFS];
 	struct		pcm_stream_info stream_info;

commit f23df8071b178dcfa4f6014baf9323ddaa33e1fd
Author: Takashi Iwai <tiwai@suse.de>
Date:   Mon Jan 30 16:29:39 2017 +0100

    ALSA: x86: Replace indirect register ops with direct calls
    
    Now about the indirect register ops: they are replaced with direct
    calls, too.
    
    The read / write / modify ops are simply replaced with the
    corresponding functions.  The difference is that we calculate the
    offset inside the function now.  So all the had_config_offset
    references in the caller side are dropped.  This also simplifies the
    DP-audio check in hdmi_audio_write() and hdmi_audio_rmw().
    
    The hdmi_audio_get_register_base is dropped since it's no longer used
    when the base address and config offset are referred in the read/write
    functions.
    
    Signed-off-by: Takashi Iwai <tiwai@suse.de>

diff --git a/sound/x86/intel_hdmi_audio.h b/sound/x86/intel_hdmi_audio.h
index 394959f0bd2e..5ba06042f669 100644
--- a/sound/x86/intel_hdmi_audio.h
+++ b/sound/x86/intel_hdmi_audio.h
@@ -107,7 +107,6 @@ struct had_callback_ops {
  * @card: ptr to hold card details
  * @card_index: sound card index
  * @card_id: detected sound card id
- * @reg_ops: register operations to program registers
  * @query_ops: caps call backs for get/set operations
  * @drv_status: driver status
  * @buf_info: ring buffer info
@@ -128,7 +127,6 @@ struct snd_intelhad {
 	struct snd_card	*card;
 	int		card_index;
 	char		*card_id;
-	struct hdmi_audio_registers_ops	reg_ops;
 	struct hdmi_audio_query_set_ops	query_ops;
 	enum had_drv_status	drv_status;
 	struct		ring_buf_info buf_info[HAD_NUM_OF_RING_BUFS];

commit 76296ef0ecec9bb887be22105744e429c6a5422a
Author: Takashi Iwai <tiwai@suse.de>
Date:   Mon Jan 30 16:09:11 2017 +0100

    ALSA: x86: Drop indirect calls of had_ops
    
    We have only a single implementation of had_ops, hence there is no
    merit to use the indirect calls at all.  Let's replace it with the
    direct calls -- which allows the compiler more optimizations.
    
    Signed-off-by: Takashi Iwai <tiwai@suse.de>

diff --git a/sound/x86/intel_hdmi_audio.h b/sound/x86/intel_hdmi_audio.h
index 034b3873ffa1..394959f0bd2e 100644
--- a/sound/x86/intel_hdmi_audio.h
+++ b/sound/x86/intel_hdmi_audio.h
@@ -123,7 +123,6 @@ struct had_callback_ops {
  * @chmap: holds channel map info
  * @audio_reg_base: hdmi audio register base offset
  * @hw_silence: flag indicates SoC support for HW silence/Keep alive
- * @ops: holds ops functions based on platform
  */
 struct snd_intelhad {
 	struct snd_card	*card;
@@ -149,25 +148,8 @@ struct snd_intelhad {
 	unsigned int	*audio_reg_base;
 	unsigned int	audio_cfg_offset;
 	bool		hw_silence;
-	struct had_ops	*ops;
 };
 
-struct had_ops {
-	void (*enable_audio)(struct snd_pcm_substream *substream,
-			u8 enable);
-	void (*reset_audio)(u8 reset);
-	int (*prog_n)(u32 aud_samp_freq, u32 *n_param,
-			struct snd_intelhad *intelhaddata);
-	void (*prog_cts)(u32 aud_samp_freq, u32 tmds, u32 link_rate,
-			 u32 n_param, struct snd_intelhad *intelhaddata);
-	int (*audio_ctrl)(struct snd_pcm_substream *substream,
-				struct snd_intelhad *intelhaddata);
-	void (*prog_dip)(struct snd_pcm_substream *substream,
-				struct snd_intelhad *intelhaddata);
-	void (*handle_underrun)(struct snd_intelhad *intelhaddata);
-};
-
-
 int had_event_handler(enum had_event_type event_type, void *data);
 
 int hdmi_audio_query(void *drv_data, struct hdmi_audio_event event);
@@ -185,6 +167,9 @@ int snd_intelhad_invd_buffer(int start, int end);
 int snd_intelhad_read_len(struct snd_intelhad *intelhaddata);
 void had_build_channel_allocation_map(struct snd_intelhad *intelhaddata);
 
+void snd_intelhad_enable_audio(struct snd_pcm_substream *substream, u8 enable);
+void snd_intelhad_handle_underrun(struct snd_intelhad *intelhaddata);
+
 /* Register access functions */
 int had_get_hwstate(struct snd_intelhad *intelhaddata);
 int had_get_caps(enum had_caps_list query_element, void *capabilties);

commit 964ca8083c0239b5a729ed08c9f50b6c31ab3a93
Author: Pierre-Louis Bossart <pierre-louis.bossart@linux.intel.com>
Date:   Tue Jan 31 14:16:52 2017 -0600

    ALSA: x86: intel_hdmi: add definitions and logic for DP audio
    
    Imported from legacy patches
    
    Note: the new code doesn't assume a modified ELD but
    an explicit notification that DP is present. It appears
    that the i915 code does change the ELD so we could use
    the ELD-based tests to check for DP audio
    
    Signed-off-by: Pierre-Louis Bossart <pierre-louis.bossart@linux.intel.com>
    Signed-off-by: Takashi Iwai <tiwai@suse.de>

diff --git a/sound/x86/intel_hdmi_audio.h b/sound/x86/intel_hdmi_audio.h
index d2015ec84843..034b3873ffa1 100644
--- a/sound/x86/intel_hdmi_audio.h
+++ b/sound/x86/intel_hdmi_audio.h
@@ -44,7 +44,8 @@
 #define MAX_CAP_STREAMS		0
 #define HDMI_AUDIO_DRIVER	"hdmi-audio"
 
-#define INFO_FRAME_WORD1	0x000a0184
+#define HDMI_INFO_FRAME_WORD1	0x000a0184
+#define DP_INFO_FRAME_WORD1	0x00441b84
 #define FIFO_THRESHOLD		0xFE
 #define DMA_FIFO_THRESHOLD	0x7
 #define BYTES_PER_WORD		0x4
@@ -134,6 +135,7 @@ struct snd_intelhad {
 	struct		ring_buf_info buf_info[HAD_NUM_OF_RING_BUFS];
 	struct		pcm_stream_info stream_info;
 	union otm_hdmi_eld_t	eeld;
+	bool dp_output;
 	enum		intel_had_aud_buf_type curr_buf;
 	int		valid_buf_cnt;
 	unsigned int	aes_bits;
@@ -156,8 +158,8 @@ struct had_ops {
 	void (*reset_audio)(u8 reset);
 	int (*prog_n)(u32 aud_samp_freq, u32 *n_param,
 			struct snd_intelhad *intelhaddata);
-	void (*prog_cts)(u32 aud_samp_freq, u32 tmds, u32 n_param,
-			struct snd_intelhad *intelhaddata);
+	void (*prog_cts)(u32 aud_samp_freq, u32 tmds, u32 link_rate,
+			 u32 n_param, struct snd_intelhad *intelhaddata);
 	int (*audio_ctrl)(struct snd_pcm_substream *substream,
 				struct snd_intelhad *intelhaddata);
 	void (*prog_dip)(struct snd_pcm_substream *substream,

commit 5dab11d89777230b3ff38f19ee1b6fbba9688b23
Author: Jerome Anand <jerome.anand@intel.com>
Date:   Wed Jan 25 04:27:52 2017 +0530

    ALSA: x86: hdmi: Add audio support for BYT and CHT
    
    Hdmi audio driver based on the child platform device
    created by gfx driver is implemented.
    This audio driver is derived from legacy intel
    hdmi audio driver.
    
    The interfaces for interaction between gfx and audio
    are updated and the driver implementation updated to
    derive interrupts in its own address space based on
    irq chip framework
    
    The changes to calculate sub-period positions was triggered
    by David Henningsson <david.henningsson@canonical.com> and is
    accomodated in this patch
    
    Signed-off-by: Pierre-Louis Bossart <pierre-louis.bossart@linux.intel.com>
    Signed-off-by: Jerome Anand <jerome.anand@intel.com>
    Signed-off-by: Takashi Iwai <tiwai@suse.de>

diff --git a/sound/x86/intel_hdmi_audio.h b/sound/x86/intel_hdmi_audio.h
new file mode 100644
index 000000000000..d2015ec84843
--- /dev/null
+++ b/sound/x86/intel_hdmi_audio.h
@@ -0,0 +1,197 @@
+/*
+ * Copyright (C) 2016 Intel Corporation
+ *  Authors:	Sailaja Bandarupalli <sailaja.bandarupalli@intel.com>
+ *		Ramesh Babu K V	<ramesh.babu@intel.com>
+ *		Vaibhav Agarwal <vaibhav.agarwal@intel.com>
+ *		Jerome Anand <jerome.anand@intel.com>
+ *
+ * Permission is hereby granted, free of charge, to any person obtaining
+ * a copy of this software and associated documentation files
+ * (the "Software"), to deal in the Software without restriction,
+ * including without limitation the rights to use, copy, modify, merge,
+ * publish, distribute, sublicense, and/or sell copies of the Software,
+ * and to permit persons to whom the Software is furnished to do so,
+ * subject to the following conditions:
+ *
+ * The above copyright notice and this permission notice (including the
+ * next paragraph) shall be included in all copies or substantial
+ * portions of the Software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
+ * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
+ * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
+ * NONINFRINGEMENT.  IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
+ * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
+ * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
+ * SOFTWARE.
+ */
+
+#ifndef _INTEL_HDMI_AUDIO_H_
+#define _INTEL_HDMI_AUDIO_H_
+
+#include <linux/types.h>
+#include <sound/initval.h>
+#include <linux/version.h>
+#include <linux/pm_runtime.h>
+#include <sound/asoundef.h>
+#include <sound/control.h>
+#include <sound/pcm.h>
+#include "intel_hdmi_lpe_audio.h"
+
+#define PCM_INDEX		0
+#define MAX_PB_STREAMS		1
+#define MAX_CAP_STREAMS		0
+#define HDMI_AUDIO_DRIVER	"hdmi-audio"
+
+#define INFO_FRAME_WORD1	0x000a0184
+#define FIFO_THRESHOLD		0xFE
+#define DMA_FIFO_THRESHOLD	0x7
+#define BYTES_PER_WORD		0x4
+
+/* Sampling rate as per IEC60958 Ver 3 */
+#define CH_STATUS_MAP_32KHZ	0x3
+#define CH_STATUS_MAP_44KHZ	0x0
+#define CH_STATUS_MAP_48KHZ	0x2
+#define CH_STATUS_MAP_88KHZ	0x8
+#define CH_STATUS_MAP_96KHZ	0xA
+#define CH_STATUS_MAP_176KHZ	0xC
+#define CH_STATUS_MAP_192KHZ	0xE
+
+#define MAX_SMPL_WIDTH_20	0x0
+#define MAX_SMPL_WIDTH_24	0x1
+#define SMPL_WIDTH_16BITS	0x1
+#define SMPL_WIDTH_24BITS	0x5
+#define CHANNEL_ALLOCATION	0x1F
+#define MASK_BYTE0		0x000000FF
+#define VALID_DIP_WORDS		3
+#define LAYOUT0			0
+#define LAYOUT1			1
+#define SWAP_LFE_CENTER		0x00fac4c8
+#define AUD_CONFIG_CH_MASK_V2	0x70
+
+struct pcm_stream_info {
+	int		str_id;
+	void	*had_substream;
+	void	(*period_elapsed)(void *had_substream);
+	u32		buffer_ptr;
+	u64		buffer_rendered;
+	u32		ring_buf_size;
+	int		sfreq;
+};
+
+struct ring_buf_info {
+	u32	buf_addr;
+	u32	buf_size;
+	u8	is_valid;
+};
+
+struct had_stream_pvt {
+	enum had_stream_status		stream_status;
+	int				stream_ops;
+	ssize_t				dbg_cum_bytes;
+};
+
+struct had_pvt_data {
+	enum had_status_stream		stream_type;
+};
+
+struct had_callback_ops {
+	had_event_call_back intel_had_event_call_back;
+};
+
+/**
+ * struct snd_intelhad - intelhad driver structure
+ *
+ * @card: ptr to hold card details
+ * @card_index: sound card index
+ * @card_id: detected sound card id
+ * @reg_ops: register operations to program registers
+ * @query_ops: caps call backs for get/set operations
+ * @drv_status: driver status
+ * @buf_info: ring buffer info
+ * @stream_info: stream information
+ * @eeld: holds EELD info
+ * @curr_buf: pointer to hold current active ring buf
+ * @valid_buf_cnt: ring buffer count for stream
+ * @had_spinlock: driver lock
+ * @aes_bits: IEC958 status bits
+ * @buff_done: id of current buffer done intr
+ * @dev: platoform device handle
+ * @kctl: holds kctl ptrs used for channel map
+ * @chmap: holds channel map info
+ * @audio_reg_base: hdmi audio register base offset
+ * @hw_silence: flag indicates SoC support for HW silence/Keep alive
+ * @ops: holds ops functions based on platform
+ */
+struct snd_intelhad {
+	struct snd_card	*card;
+	int		card_index;
+	char		*card_id;
+	struct hdmi_audio_registers_ops	reg_ops;
+	struct hdmi_audio_query_set_ops	query_ops;
+	enum had_drv_status	drv_status;
+	struct		ring_buf_info buf_info[HAD_NUM_OF_RING_BUFS];
+	struct		pcm_stream_info stream_info;
+	union otm_hdmi_eld_t	eeld;
+	enum		intel_had_aud_buf_type curr_buf;
+	int		valid_buf_cnt;
+	unsigned int	aes_bits;
+	int flag_underrun;
+	struct had_pvt_data *private_data;
+	spinlock_t had_spinlock;
+	enum		intel_had_aud_buf_type buff_done;
+	struct device *dev;
+	struct snd_kcontrol *kctl;
+	struct snd_pcm_chmap *chmap;
+	unsigned int	*audio_reg_base;
+	unsigned int	audio_cfg_offset;
+	bool		hw_silence;
+	struct had_ops	*ops;
+};
+
+struct had_ops {
+	void (*enable_audio)(struct snd_pcm_substream *substream,
+			u8 enable);
+	void (*reset_audio)(u8 reset);
+	int (*prog_n)(u32 aud_samp_freq, u32 *n_param,
+			struct snd_intelhad *intelhaddata);
+	void (*prog_cts)(u32 aud_samp_freq, u32 tmds, u32 n_param,
+			struct snd_intelhad *intelhaddata);
+	int (*audio_ctrl)(struct snd_pcm_substream *substream,
+				struct snd_intelhad *intelhaddata);
+	void (*prog_dip)(struct snd_pcm_substream *substream,
+				struct snd_intelhad *intelhaddata);
+	void (*handle_underrun)(struct snd_intelhad *intelhaddata);
+};
+
+
+int had_event_handler(enum had_event_type event_type, void *data);
+
+int hdmi_audio_query(void *drv_data, struct hdmi_audio_event event);
+int hdmi_audio_suspend(void *drv_data, struct hdmi_audio_event event);
+int hdmi_audio_resume(void *drv_data);
+int hdmi_audio_mode_change(struct snd_pcm_substream *substream);
+extern struct snd_pcm_ops snd_intelhad_playback_ops;
+
+int snd_intelhad_init_audio_ctrl(struct snd_pcm_substream *substream,
+					struct snd_intelhad *intelhaddata,
+					int flag_silence);
+int snd_intelhad_prog_buffer(struct snd_intelhad *intelhaddata,
+					int start, int end);
+int snd_intelhad_invd_buffer(int start, int end);
+int snd_intelhad_read_len(struct snd_intelhad *intelhaddata);
+void had_build_channel_allocation_map(struct snd_intelhad *intelhaddata);
+
+/* Register access functions */
+int had_get_hwstate(struct snd_intelhad *intelhaddata);
+int had_get_caps(enum had_caps_list query_element, void *capabilties);
+int had_set_caps(enum had_caps_list set_element, void *capabilties);
+int had_read_register(u32 reg_addr, u32 *data);
+int had_write_register(u32 reg_addr, u32 data);
+int had_read_modify(u32 reg_addr, u32 data, u32 mask);
+
+int hdmi_audio_probe(void *devptr);
+int hdmi_audio_remove(void *pdev);
+
+#endif /* _INTEL_HDMI_AUDIO_ */
