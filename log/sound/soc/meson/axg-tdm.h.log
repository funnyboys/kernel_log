commit cb36ff785e868992e96e8b9e5a0c2822b680a9e2
Author: Jerome Brunet <jbrunet@baylibre.com>
Date:   Thu Jun 13 13:42:32 2019 +0200

    ASoC: meson: axg-tdm: fix sample clock inversion
    
    The content of SND_SOC_DAIFMT_FORMAT_MASK is a number, not a bitfield,
    so the test to check if the format is i2s is wrong. Because of this the
    clock setting may be wrong. For example, the sample clock gets inverted
    in DSP B mode, when it should not.
    
    Fix the lrclk invert helper function
    
    Fixes: 1a11d88f499c ("ASoC: meson: add tdm formatter base driver")
    Signed-off-by: Jerome Brunet <jbrunet@baylibre.com>
    Signed-off-by: Mark Brown <broonie@kernel.org>

diff --git a/sound/soc/meson/axg-tdm.h b/sound/soc/meson/axg-tdm.h
index e578b6f40a07..5774ce0916d4 100644
--- a/sound/soc/meson/axg-tdm.h
+++ b/sound/soc/meson/axg-tdm.h
@@ -40,7 +40,7 @@ struct axg_tdm_iface {
 
 static inline bool axg_tdm_lrclk_invert(unsigned int fmt)
 {
-	return (fmt & SND_SOC_DAIFMT_I2S) ^
+	return ((fmt & SND_SOC_DAIFMT_FORMAT_MASK) == SND_SOC_DAIFMT_I2S) ^
 		!!(fmt & (SND_SOC_DAIFMT_IB_IF | SND_SOC_DAIFMT_NB_IF));
 }
 

commit d60e4f1e4be5e2dfb55fb084b119aed094227a35
Author: Jerome Brunet <jbrunet@baylibre.com>
Date:   Tue Jul 17 17:42:59 2018 +0200

    ASoC: meson: add tdm interface driver
    
    Add Amlogic's axg TDM interface driver. This driver manages the format
    and clocks provided on the pads.
    
    On this SoC, each stream direction provides 4 serial lanes. This makes
    a maximum of 8 channels in i2s modes and 128 channels in DSP modes.
    
    While each lanes operate on the same slot number (same bit clock), they
    may have different TDM masks. This requires to provide a function to let
    the card set the 4 masks, in lieu of the usual set_tdm_slots() callback
    of the dai driver.
    
    Signed-off-by: Jerome Brunet <jbrunet@baylibre.com>
    Signed-off-by: Mark Brown <broonie@kernel.org>

diff --git a/sound/soc/meson/axg-tdm.h b/sound/soc/meson/axg-tdm.h
index 435d95b86457..e578b6f40a07 100644
--- a/sound/soc/meson/axg-tdm.h
+++ b/sound/soc/meson/axg-tdm.h
@@ -71,4 +71,8 @@ static inline int axg_tdm_stream_reset(struct axg_tdm_stream *ts)
 	return axg_tdm_stream_start(ts);
 }
 
+int axg_tdm_set_tdm_slots(struct snd_soc_dai *dai, u32 *tx_mask,
+			  u32 *rx_mask, unsigned int slots,
+			  unsigned int slot_width);
+
 #endif /* _MESON_AXG_TDM_H */

commit 1a11d88f499ceb69e9b4098ddc36866820335a54
Author: Jerome Brunet <jbrunet@baylibre.com>
Date:   Tue Jul 17 17:42:58 2018 +0200

    ASoC: meson: add tdm formatter base driver
    
    Add Amlogic's axg TDM core driver. On this SoC, tdm is bit more
    complex than usual, mainly because the different TDM input decoders can
    be attached to any of TDM pad interface, including the output pads.
    
    For the this, TDM on this SoC is modeled like this:
    - TDM interface provides the DAIs the codecs will be attached to.
      The main responsibility of this driver is to manage the pad format
      and the TDM clock rates.
    - TDM Formatters: These are the entities which are actually dealing with
      the TDM signal. TDMOUT produce a TDM signal from the audio sample
      provided by FRDDR using the clocks provided the TDM interface. TDMIN
      feeds TODDR with audio sample using the clocks and TDM signal provided
      by the TDM Interface.
    - TDM Streams: This provides the link between 1 DAI stream of the TDM
      interface and one (or more) TDM formatters.
    
    This driver provides the TDM formatter and TDM stream operations.
    
    Signed-off-by: Jerome Brunet <jbrunet@baylibre.com>
    Signed-off-by: Mark Brown <broonie@kernel.org>

diff --git a/sound/soc/meson/axg-tdm.h b/sound/soc/meson/axg-tdm.h
new file mode 100644
index 000000000000..435d95b86457
--- /dev/null
+++ b/sound/soc/meson/axg-tdm.h
@@ -0,0 +1,74 @@
+/* SPDX-License-Identifier: (GPL-2.0 OR MIT)
+ *
+ * Copyright (c) 2018 Baylibre SAS.
+ * Author: Jerome Brunet <jbrunet@baylibre.com>
+ */
+
+#ifndef _MESON_AXG_TDM_H
+#define _MESON_AXG_TDM_H
+
+#include <linux/clk.h>
+#include <linux/regmap.h>
+#include <sound/pcm.h>
+#include <sound/soc.h>
+#include <sound/soc-dai.h>
+
+#define AXG_TDM_NUM_LANES	4
+#define AXG_TDM_CHANNEL_MAX	128
+#define AXG_TDM_RATES		(SNDRV_PCM_RATE_5512 |		\
+				 SNDRV_PCM_RATE_8000_192000)
+#define AXG_TDM_FORMATS		(SNDRV_PCM_FMTBIT_S8 |		\
+				 SNDRV_PCM_FMTBIT_S16_LE |	\
+				 SNDRV_PCM_FMTBIT_S20_LE |	\
+				 SNDRV_PCM_FMTBIT_S24_LE |	\
+				 SNDRV_PCM_FMTBIT_S32_LE)
+
+struct axg_tdm_iface {
+	struct clk *sclk;
+	struct clk *lrclk;
+	struct clk *mclk;
+	unsigned long mclk_rate;
+
+	/* format is common to all the DAIs of the iface */
+	unsigned int fmt;
+	unsigned int slots;
+	unsigned int slot_width;
+
+	/* For component wide symmetry */
+	int rate;
+};
+
+static inline bool axg_tdm_lrclk_invert(unsigned int fmt)
+{
+	return (fmt & SND_SOC_DAIFMT_I2S) ^
+		!!(fmt & (SND_SOC_DAIFMT_IB_IF | SND_SOC_DAIFMT_NB_IF));
+}
+
+static inline bool axg_tdm_sclk_invert(unsigned int fmt)
+{
+	return fmt & (SND_SOC_DAIFMT_IB_IF | SND_SOC_DAIFMT_IB_NF);
+}
+
+struct axg_tdm_stream {
+	struct axg_tdm_iface *iface;
+	struct list_head formatter_list;
+	struct mutex lock;
+	unsigned int channels;
+	unsigned int width;
+	unsigned int physical_width;
+	u32 *mask;
+	bool ready;
+};
+
+struct axg_tdm_stream *axg_tdm_stream_alloc(struct axg_tdm_iface *iface);
+void axg_tdm_stream_free(struct axg_tdm_stream *ts);
+int axg_tdm_stream_start(struct axg_tdm_stream *ts);
+void axg_tdm_stream_stop(struct axg_tdm_stream *ts);
+
+static inline int axg_tdm_stream_reset(struct axg_tdm_stream *ts)
+{
+	axg_tdm_stream_stop(ts);
+	return axg_tdm_stream_start(ts);
+}
+
+#endif /* _MESON_AXG_TDM_H */
