commit 58f30150ffd6d95efa524ff05bbcee4e95bfa870
Author: Maxime Ripard <maxime@cerno.tech>
Date:   Tue Jul 7 09:42:37 2020 +0200

    ASoC: core: Remove only the registered component in devm functions
    
    The ASoC devm_ functions that register a component
    (devm_snd_soc_register_component and devm_snd_dmaengine_pcm_register) will
    clean their component by running snd_soc_unregister_component.
    
    snd_soc_unregister_component will then remove all the components for the
    device that was used to register the component in the first place.
    
    However, some drivers register several components (such as a DAI and a
    dmaengine PCM) on the same device, and if the dmaengine PCM is registered
    first, then the DAI will be cleaned up first and
    snd_dmaengine_pcm_unregister will be called next.
    
    snd_dmaengine_pcm_unregister will then lookup the dmaengine PCM component
    on the device, and if there's one unregister that component and release its
    dmaengine channels. That doesn't happen in practice though since the first
    call to snd_soc_unregister_component removed all the components, so we
    never get the chance to release the dmaengine channels.
    
    In order to fix this, instead of removing all the components for a given
    device, we can simply remove the component that was registered in the first
    place. We should have the same number of component registration than we
    have components, so it should work just fine.
    
    Signed-off-by: Maxime Ripard <maxime@cerno.tech>
    Link: https://lore.kernel.org/r/20200707074237.287171-1-maxime@cerno.tech
    Signed-off-by: Mark Brown <broonie@kernel.org>

diff --git a/sound/soc/soc-devres.c b/sound/soc/soc-devres.c
index 11e5d7962370..4534a1c03e8e 100644
--- a/sound/soc/soc-devres.c
+++ b/sound/soc/soc-devres.c
@@ -48,7 +48,9 @@ EXPORT_SYMBOL_GPL(devm_snd_soc_register_dai);
 
 static void devm_component_release(struct device *dev, void *res)
 {
-	snd_soc_unregister_component(*(struct device **)res);
+	const struct snd_soc_component_driver **cmpnt_drv = res;
+
+	snd_soc_unregister_component_by_driver(dev, *cmpnt_drv);
 }
 
 /**
@@ -65,7 +67,7 @@ int devm_snd_soc_register_component(struct device *dev,
 			 const struct snd_soc_component_driver *cmpnt_drv,
 			 struct snd_soc_dai_driver *dai_drv, int num_dai)
 {
-	struct device **ptr;
+	const struct snd_soc_component_driver **ptr;
 	int ret;
 
 	ptr = devres_alloc(devm_component_release, sizeof(*ptr), GFP_KERNEL);
@@ -74,7 +76,7 @@ int devm_snd_soc_register_component(struct device *dev,
 
 	ret = snd_soc_register_component(dev, cmpnt_drv, dai_drv, num_dai);
 	if (ret == 0) {
-		*ptr = dev;
+		*ptr = cmpnt_drv;
 		devres_add(dev, ptr);
 	} else {
 		devres_free(ptr);

commit 0fae253af563cf5d1f5dc651d520c3eafd74f183
Author: Pierre-Louis Bossart <pierre-louis.bossart@linux.intel.com>
Date:   Fri Jun 12 15:59:37 2020 -0500

    ASoC: soc-devres: add devm_snd_soc_register_dai()
    
    The registration of DAIs may be done at two distinct times, once
    during a component registration and later when loading a
    topology. Since devm_ managed resources are freed in the reverse order
    they were allocated, when a component starts unregistering DAIs by
    walking through the DAI list, the memory allocated for the
    topology-registered DAIs was freed already, which leads to 100%
    reproducible KASAN use-after-free reports.
    
    This patch suggests a new devm_ function to force the DAI list to be
    updated prior to freeing the memory chunks referenced by the list
    pointers.
    
    Suggested-by: Bard Liao <yung-chuan.liao@linux.intel.com>
    Signed-off-by: Pierre-Louis Bossart <pierre-louis.bossart@linux.intel.com>
    Reviewed-by: Ranjani Sridharan <ranjani.sridharan@linux.intel.com>
    Reviewed-by: Bard Liao <yung-chuan.liao@linux.intel.com>
    Reviewed-by: Kai Vehmanen <kai.vehmanen@linux.intel.com>
    BugLink: https://github.com/thesofproject/linux/issues/2186
    Link: https://lore.kernel.org/r/20200612205938.26415-2-pierre-louis.bossart@linux.intel.com
    Signed-off-by: Mark Brown <broonie@kernel.org>

diff --git a/sound/soc/soc-devres.c b/sound/soc/soc-devres.c
index a9ea172a66a7..11e5d7962370 100644
--- a/sound/soc/soc-devres.c
+++ b/sound/soc/soc-devres.c
@@ -9,6 +9,43 @@
 #include <sound/soc.h>
 #include <sound/dmaengine_pcm.h>
 
+static void devm_dai_release(struct device *dev, void *res)
+{
+	snd_soc_unregister_dai(*(struct snd_soc_dai **)res);
+}
+
+/**
+ * devm_snd_soc_register_dai - resource-managed dai registration
+ * @dev: Device used to manage component
+ * @component: The component the DAIs are registered for
+ * @dai_drv: DAI driver to use for the DAI
+ * @legacy_dai_naming: if %true, use legacy single-name format;
+ *	if %false, use multiple-name format;
+ */
+struct snd_soc_dai *devm_snd_soc_register_dai(struct device *dev,
+					      struct snd_soc_component *component,
+					      struct snd_soc_dai_driver *dai_drv,
+					      bool legacy_dai_naming)
+{
+	struct snd_soc_dai **ptr;
+	struct snd_soc_dai *dai;
+
+	ptr = devres_alloc(devm_dai_release, sizeof(*ptr), GFP_KERNEL);
+	if (!ptr)
+		return NULL;
+
+	dai = snd_soc_register_dai(component, dai_drv, legacy_dai_naming);
+	if (dai) {
+		*ptr = dai;
+		devres_add(dev, ptr);
+	} else {
+		devres_free(ptr);
+	}
+
+	return dai;
+}
+EXPORT_SYMBOL_GPL(devm_snd_soc_register_dai);
+
 static void devm_component_release(struct device *dev, void *res)
 {
 	snd_soc_unregister_component(*(struct device **)res);

commit 9e14035c7fac144f31a822f0034fe5ed79c9ef8a
Author: Kuninori Morimoto <kuninori.morimoto.gx@renesas.com>
Date:   Mon Jul 2 06:23:45 2018 +0000

    ASoC: soc-devres.c: convert to SPDX identifiers
    
    Signed-off-by: Kuninori Morimoto <kuninori.morimoto.gx@renesas.com>
    Signed-off-by: Mark Brown <broonie@kernel.org>

diff --git a/sound/soc/soc-devres.c b/sound/soc/soc-devres.c
index 7ac745df1412..a9ea172a66a7 100644
--- a/sound/soc/soc-devres.c
+++ b/sound/soc/soc-devres.c
@@ -1,13 +1,8 @@
-/*
- * soc-devres.c  --  ALSA SoC Audio Layer devres functions
- *
- * Copyright (C) 2013 Linaro Ltd
- *
- *  This program is free software; you can redistribute  it and/or modify it
- *  under  the terms of  the GNU General  Public License as published by the
- *  Free Software Foundation;  either version 2 of the  License, or (at your
- *  option) any later version.
- */
+// SPDX-License-Identifier: GPL-2.0+
+//
+// soc-devres.c  --  ALSA SoC Audio Layer devres functions
+//
+// Copyright (C) 2013 Linaro Ltd
 
 #include <linux/module.h>
 #include <linux/moduleparam.h>

commit ef050bece1b5564b2c7135ceadc0d5ffdcf152f7
Author: Charles Keepax <ckeepax@opensource.cirrus.com>
Date:   Tue Apr 24 16:39:02 2018 +0100

    ASoC: Remove platform code now everything is componentised
    
    As all drivers have been moved over to the new generic component
    code remove the now unused platform specific code.
    
    Signed-off-by: Charles Keepax <ckeepax@opensource.cirrus.com>
    Acked-by: Vinod Koul <vkoul@kernel.org>
    Signed-off-by: Mark Brown <broonie@kernel.org>

diff --git a/sound/soc/soc-devres.c b/sound/soc/soc-devres.c
index a57921eeee81..7ac745df1412 100644
--- a/sound/soc/soc-devres.c
+++ b/sound/soc/soc-devres.c
@@ -52,41 +52,6 @@ int devm_snd_soc_register_component(struct device *dev,
 }
 EXPORT_SYMBOL_GPL(devm_snd_soc_register_component);
 
-static void devm_platform_release(struct device *dev, void *res)
-{
-	snd_soc_unregister_platform(*(struct device **)res);
-}
-
-/**
- * devm_snd_soc_register_platform - resource managed platform registration
- * @dev: Device used to manage platform
- * @platform_drv: platform to register
- *
- * Register a platform driver with automatic unregistration when the device is
- * unregistered.
- */
-int devm_snd_soc_register_platform(struct device *dev,
-			const struct snd_soc_platform_driver *platform_drv)
-{
-	struct device **ptr;
-	int ret;
-
-	ptr = devres_alloc(devm_platform_release, sizeof(*ptr), GFP_KERNEL);
-	if (!ptr)
-		return -ENOMEM;
-
-	ret = snd_soc_register_platform(dev, platform_drv);
-	if (ret == 0) {
-		*ptr = dev;
-		devres_add(dev, ptr);
-	} else {
-		devres_free(ptr);
-	}
-
-	return ret;
-}
-EXPORT_SYMBOL_GPL(devm_snd_soc_register_platform);
-
 static void devm_card_release(struct device *dev, void *res)
 {
 	snd_soc_unregister_card(*(struct snd_soc_card **)res);

commit 2f1a11e624d0e8f02282204adfc2a1d374d49fb5
Author: Masanari Iida <standby24x7@gmail.com>
Date:   Wed Jan 28 12:44:27 2015 +0900

    ASoC: Fix warning with make xmldocs caused by soc-devres.c
    
    This patch fix warning while "make xmldocs".
    
    Warning(.//sound/soc/soc-devres.c:70): No description
     found for parameter 'platform_drv'
    Warning(.//sound/soc/soc-devres.c:70): Excess function
     parameter 'platform' description in 'devm_snd_soc_register_platform'
    
    Signed-off-by: Masanari Iida <standby24x7@gmail.com>
    Signed-off-by: Mark Brown <broonie@kernel.org>

diff --git a/sound/soc/soc-devres.c b/sound/soc/soc-devres.c
index 057e5ef7dcce..a57921eeee81 100644
--- a/sound/soc/soc-devres.c
+++ b/sound/soc/soc-devres.c
@@ -60,7 +60,7 @@ static void devm_platform_release(struct device *dev, void *res)
 /**
  * devm_snd_soc_register_platform - resource managed platform registration
  * @dev: Device used to manage platform
- * @platform: platform to register
+ * @platform_drv: platform to register
  *
  * Register a platform driver with automatic unregistration when the device is
  * unregistered.

commit 1f23380b803a670a9eb53f63fd0c662d20ab1b66
Author: Lars-Peter Clausen <lars@metafoo.de>
Date:   Tue Apr 22 22:58:41 2014 +0200

    ASoC: Export devm_snd_soc_register_platform()
    
    devm_snd_soc_register_platform() is used in drivers which can be build as
    modules, so it needs to be exported to avoid linkers errors like:
    
            ERROR: "devm_snd_soc_register_platform" [sound/soc/omap/snd-soc-omap.ko] undefined!
            ERROR: "devm_snd_soc_register_platform" [sound/soc/davinci/snd-soc-davinci.ko] undefined!
    
    Fixes: 8931bf620 ("ASoC: Add resource managed snd_soc_register_platform()")
    Signed-off-by: Lars-Peter Clausen <lars@metafoo.de>
    Signed-off-by: Mark Brown <broonie@linaro.org>

diff --git a/sound/soc/soc-devres.c b/sound/soc/soc-devres.c
index e94aa0277250..057e5ef7dcce 100644
--- a/sound/soc/soc-devres.c
+++ b/sound/soc/soc-devres.c
@@ -85,6 +85,7 @@ int devm_snd_soc_register_platform(struct device *dev,
 
 	return ret;
 }
+EXPORT_SYMBOL_GPL(devm_snd_soc_register_platform);
 
 static void devm_card_release(struct device *dev, void *res)
 {

commit 8931bf6208776292b1b888dd8534229f63e2eaa2
Author: Peter Ujfalusi <peter.ujfalusi@ti.com>
Date:   Wed Apr 16 15:46:11 2014 +0300

    ASoC: Add resource managed snd_soc_register_platform()
    
    Simplify error handling and remove repetitive (and rarely executed) code
    for unregistration by providing a devm_snd_soc_register_platform()
    platform.
    
    Signed-off-by: Peter Ujfalusi <peter.ujfalusi@ti.com>
    Signed-off-by: Mark Brown <broonie@linaro.org>

diff --git a/sound/soc/soc-devres.c b/sound/soc/soc-devres.c
index 7ac745df1412..e94aa0277250 100644
--- a/sound/soc/soc-devres.c
+++ b/sound/soc/soc-devres.c
@@ -52,6 +52,40 @@ int devm_snd_soc_register_component(struct device *dev,
 }
 EXPORT_SYMBOL_GPL(devm_snd_soc_register_component);
 
+static void devm_platform_release(struct device *dev, void *res)
+{
+	snd_soc_unregister_platform(*(struct device **)res);
+}
+
+/**
+ * devm_snd_soc_register_platform - resource managed platform registration
+ * @dev: Device used to manage platform
+ * @platform: platform to register
+ *
+ * Register a platform driver with automatic unregistration when the device is
+ * unregistered.
+ */
+int devm_snd_soc_register_platform(struct device *dev,
+			const struct snd_soc_platform_driver *platform_drv)
+{
+	struct device **ptr;
+	int ret;
+
+	ptr = devres_alloc(devm_platform_release, sizeof(*ptr), GFP_KERNEL);
+	if (!ptr)
+		return -ENOMEM;
+
+	ret = snd_soc_register_platform(dev, platform_drv);
+	if (ret == 0) {
+		*ptr = dev;
+		devres_add(dev, ptr);
+	} else {
+		devres_free(ptr);
+	}
+
+	return ret;
+}
+
 static void devm_card_release(struct device *dev, void *res)
 {
 	snd_soc_unregister_card(*(struct snd_soc_card **)res);

commit 75aac8206006e70859930d356ccfe02543530c27
Merge: 01ad154ea505 2b67f8ba41ac
Author: Mark Brown <broonie@linaro.org>
Date:   Thu Jan 2 13:01:52 2014 +0000

    Merge remote-tracking branch 'asoc/topic/dma' into asoc-next

commit ebff65473f56e6c30de928fd6a4f1ce5ae36e8c5
Author: Shawn Guo <shawn.guo@linaro.org>
Date:   Mon Dec 2 13:26:50 2013 +0800

    ASoC: core: fix devres parameter in devm_snd_soc_register_card()
    
    Since devm_card_release() expects parameter 'res' to be a pointer to
    struct snd_soc_card, devm_snd_soc_register_card() should really pass
    such a pointer rather than the one to struct device.
    
    This bug causes the kernel Oops below with imx-sgtl500 driver when we
    remove the module.  It happens because with 'card' pointing to the wrong
    structure, card->num_rtd becomes 0 in function soc_remove_dai_links().
    Consequently, soc_remove_link_components() and in turn
    soc_cleanup_codec[platform]_debugfs() will not be called on card
    removal.  It results in that debugfs_card_root is being removed while
    its child entries debugfs_codec_root and debugfs_platform_root are still
    there, and thus the kernel Oops.
    
    Fix the bug by correcting the parameter 'res' to be the pointer to
    struct snd_soc_card.
    
    $ lsmod
    Module                  Size  Used by
    snd_soc_imx_sgtl5000     3506  0
    snd_soc_sgtl5000       13677  2
    snd_soc_imx_audmux      5324  1 snd_soc_imx_sgtl5000
    snd_soc_fsl_ssi         8139  2
    imx_pcm_dma             1380  1 snd_soc_fsl_ssi
    $ rmmod snd_soc_imx_sgtl5000
    Unable to handle kernel paging request at virtual address e594025c
    pgd = be134000
    [e594025c] *pgd=00000000
    Internal error: Oops: 5 [#1] SMP ARM
    Modules linked in: snd_soc_imx_sgtl5000(-) snd_soc_sgtl5000 snd_soc_imx_audmux snd_soc_fsl_ssi imx_pcm_dma
    CPU: 0 PID: 1793 Comm: rmmod Not tainted 3.13.0-rc1 #1570
    task: bee28900 ti: bfbec000 task.ti: bfbec000
    PC is at debugfs_remove_recursive+0x28/0x154
    LR is at snd_soc_unregister_card+0xa0/0xcc
    pc : [<80252b38>]    lr : [<80496ac4>]    psr: a0000013
    sp : bfbede00  ip : bfbede28  fp : bfbede24
    r10: 803281d4  r9 : bfbec000  r8 : 803271ac
    r7 : bef54440  r6 : 00000004  r5 : bf9a4010  r4 : bf9a4010
    r3 : e5940224  r2 : 00000000  r1 : bef54450  r0 : 803271ac
    Flags: NzCv  IRQs on  FIQs on  Mode SVC_32  ISA ARM  Segment user
    Control: 10c53c7d  Table: 4e13404a  DAC: 00000015
    Process rmmod (pid: 1793, stack limit = 0xbfbec240)
    Stack: (0xbfbede00 to 0xbfbee000)
    de00: 00000000 bf9a4010 bf9a4010 00000004 bef54440 bec89000 bfbede44 bfbede28
    de20: 80496ac4 80252b1c 804a4b60 bfbede60 bf9a4010 00000004 bfbede54 bfbede48
    de40: 804a4b74 80496a30 bfbede94 bfbede58 80328728 804a4b6c bfbede94 a0000013
    de60: bf1b5800 bef54440 00000002 bf9a4010 7f0169f8 bf9a4044 00000081 8000e9c4
    de80: bfbec000 00000000 bfbedeac bfbede98 80328cb0 80328618 7f016000 bf9a4010
    dea0: bfbedec4 bfbedeb0 8032561c 80328c84 bf9a4010 7f0169f8 bfbedee4 bfbedec8
    dec0: 80325e84 803255a8 bee28900 7f0169f8 00000000 78208d30 bfbedefc bfbedee8
    dee0: 80325410 80325dd4 beca8100 7f0169f8 bfbedf14 bfbedf00 803264f8 803253c8
    df00: 7f01635c 7f016a3c bfbedf24 bfbedf18 80327098 803264d4 bfbedf34 bfbedf28
    df20: 7f016370 80327090 bfbedfa4 bfbedf38 80085ef0 7f016368 bfbedf54 5f646e73
    df40: 5f636f73 5f786d69 6c746773 30303035 00000000 78208008 bfbedf84 bfbedf68
    df60: 800613b0 80061194 fffffffe 78208d00 7efc2f07 00000081 7f016a3c 00000800
    df80: bfbedf84 00000000 00000000 fffffffe 78208d00 7efc2f07 00000000 bfbedfa8
    dfa0: 8000e800 80085dcc fffffffe 78208d00 78208d30 00000800 a8c82400 a8c82400
    dfc0: fffffffe 78208d00 7efc2f07 00000081 00000002 00000000 78208008 00000800
    dfe0: 7efc2e1c 7efc2ba8 76f5ca47 76edec7c 80000010 78208d30 00000000 00000000
    Backtrace:
    [<80252b10>] (debugfs_remove_recursive+0x0/0x154) from [<80496ac4>] (snd_soc_unregister_card+0xa0/0xcc)
     r8:bec89000 r7:bef54440 r6:00000004 r5:bf9a4010 r4:bf9a4010
    r3:00000000
    [<80496a24>] (snd_soc_unregister_card+0x0/0xcc) from [<804a4b74>] (devm_card_release+0x14/0x18)
     r6:00000004 r5:bf9a4010 r4:bfbede60 r3:804a4b60
    [<804a4b60>] (devm_card_release+0x0/0x18) from [<80328728>] (release_nodes+0x11c/0x1dc)
    [<8032860c>] (release_nodes+0x0/0x1dc) from [<80328cb0>] (devres_release_all+0x38/0x54)
    [<80328c78>] (devres_release_all+0x0/0x54) from [<8032561c>] (__device_release_driver+0x80/0xd4)
     r4:bf9a4010 r3:7f016000
    [<8032559c>] (__device_release_driver+0x0/0xd4) from [<80325e84>] (driver_detach+0xbc/0xc0)
     r5:7f0169f8 r4:bf9a4010
    [<80325dc8>] (driver_detach+0x0/0xc0) from [<80325410>] (bus_remove_driver+0x54/0x98)
     r6:78208d30 r5:00000000 r4:7f0169f8 r3:bee28900
    [<803253bc>] (bus_remove_driver+0x0/0x98) from [<803264f8>] (driver_unregister+0x30/0x50)
     r4:7f0169f8 r3:beca8100
    [<803264c8>] (driver_unregister+0x0/0x50) from [<80327098>] (platform_driver_unregister+0x14/0x18)
     r4:7f016a3c r3:7f01635c
    [<80327084>] (platform_driver_unregister+0x0/0x18) from [<7f016370>] (imx_sgtl5000_driver_exit+0x14/0x1c [snd_soc_imx_sgtl5000])
    [<7f01635c>] (imx_sgtl5000_driver_exit+0x0/0x1c [snd_soc_imx_sgtl5000]) from [<80085ef0>] (SyS_delete_module+0x130/0x18c)
    [<80085dc0>] (SyS_delete_module+0x0/0x18c) from [<8000e800>] (ret_fast_syscall+0x0/0x48)
     r6:7efc2f07 r5:78208d00 r4:fffffffe
    Code: 889da9f8 e5983020 e3530000 089da9f8 (e5933038)
    ---[ end trace 825e7e125251a225 ]---
    
    Signed-off-by: Shawn Guo <shawn.guo@linaro.org>
    Signed-off-by: Mark Brown <broonie@linaro.org>

diff --git a/sound/soc/soc-devres.c b/sound/soc/soc-devres.c
index b1d732255c02..3449c1e909ae 100644
--- a/sound/soc/soc-devres.c
+++ b/sound/soc/soc-devres.c
@@ -66,7 +66,7 @@ static void devm_card_release(struct device *dev, void *res)
  */
 int devm_snd_soc_register_card(struct device *dev, struct snd_soc_card *card)
 {
-	struct device **ptr;
+	struct snd_soc_card **ptr;
 	int ret;
 
 	ptr = devres_alloc(devm_card_release, sizeof(*ptr), GFP_KERNEL);
@@ -75,7 +75,7 @@ int devm_snd_soc_register_card(struct device *dev, struct snd_soc_card *card)
 
 	ret = snd_soc_register_card(card);
 	if (ret == 0) {
-		*ptr = dev;
+		*ptr = card;
 		devres_add(dev, ptr);
 	} else {
 		devres_free(ptr);

commit 21585ee848078b12d0d1a513e93936bf96b444a0
Author: Lars-Peter Clausen <lars@metafoo.de>
Date:   Thu Nov 28 08:50:32 2013 +0100

    ASoC: Add resource managed snd_dmaengine_pcm_register()
    
    For many drivers using the generic dmaengine PCM driver one of the few (or the
    only) things left to do in the drivers remove function is to unregister the PCM
    device. This patch adds a resource managed version of snd_dmaengine_pcm_register()
    which makes it possible to simplify the remove function as well as the error
    path in the probe function for those drivers.
    
    Signed-off-by: Lars-Peter Clausen <lars@metafoo.de>
    Signed-off-by: Mark Brown <broonie@linaro.org>

diff --git a/sound/soc/soc-devres.c b/sound/soc/soc-devres.c
index b1d732255c02..999861942d28 100644
--- a/sound/soc/soc-devres.c
+++ b/sound/soc/soc-devres.c
@@ -12,6 +12,7 @@
 #include <linux/module.h>
 #include <linux/moduleparam.h>
 #include <sound/soc.h>
+#include <sound/dmaengine_pcm.h>
 
 static void devm_component_release(struct device *dev, void *res)
 {
@@ -84,3 +85,43 @@ int devm_snd_soc_register_card(struct device *dev, struct snd_soc_card *card)
 	return ret;
 }
 EXPORT_SYMBOL_GPL(devm_snd_soc_register_card);
+
+#ifdef CONFIG_SND_SOC_GENERIC_DMAENGINE_PCM
+
+static void devm_dmaengine_pcm_release(struct device *dev, void *res)
+{
+	snd_dmaengine_pcm_unregister(*(struct device **)res);
+}
+
+/**
+ * devm_snd_dmaengine_pcm_register - resource managed dmaengine PCM registration
+ * @dev: The parent device for the PCM device
+ * @config: Platform specific PCM configuration
+ * @flags: Platform specific quirks
+ *
+ * Register a dmaengine based PCM device with automatic unregistration when the
+ * device is unregistered.
+ */
+int devm_snd_dmaengine_pcm_register(struct device *dev,
+	const struct snd_dmaengine_pcm_config *config, unsigned int flags)
+{
+	struct device **ptr;
+	int ret;
+
+	ptr = devres_alloc(devm_dmaengine_pcm_release, sizeof(*ptr), GFP_KERNEL);
+	if (!ptr)
+		return -ENOMEM;
+
+	ret = snd_dmaengine_pcm_register(dev, config, flags);
+	if (ret == 0) {
+		*ptr = dev;
+		devres_add(dev, ptr);
+	} else {
+		devres_free(ptr);
+	}
+
+	return ret;
+}
+EXPORT_SYMBOL_GPL(devm_snd_dmaengine_pcm_register);
+
+#endif

commit 0e4ff5c806263bf40ee5409ac283b776f0c11e41
Author: Mark Brown <broonie@linaro.org>
Date:   Mon Sep 16 18:02:05 2013 +0100

    ASoC: core: Add devm_snd_soc_register_card()
    
    Simplify error handling and remove repetitive (and rarely executed) code
    for unregistration by providing a devm_snd_soc_register() card.
    
    Signed-off-by: Mark Brown <broonie@linaro.org>
    Acked-by: Liam Girdwood <liam.r.girdwood@linux.intel.com>

diff --git a/sound/soc/soc-devres.c b/sound/soc/soc-devres.c
index 13fe86f7c9a8..b1d732255c02 100644
--- a/sound/soc/soc-devres.c
+++ b/sound/soc/soc-devres.c
@@ -50,3 +50,37 @@ int devm_snd_soc_register_component(struct device *dev,
 	return ret;
 }
 EXPORT_SYMBOL_GPL(devm_snd_soc_register_component);
+
+static void devm_card_release(struct device *dev, void *res)
+{
+	snd_soc_unregister_card(*(struct snd_soc_card **)res);
+}
+
+/**
+ * devm_snd_soc_register_card - resource managed card registration
+ * @dev: Device used to manage card
+ * @card: Card to register
+ *
+ * Register a card with automatic unregistration when the device is
+ * unregistered.
+ */
+int devm_snd_soc_register_card(struct device *dev, struct snd_soc_card *card)
+{
+	struct device **ptr;
+	int ret;
+
+	ptr = devres_alloc(devm_card_release, sizeof(*ptr), GFP_KERNEL);
+	if (!ptr)
+		return -ENOMEM;
+
+	ret = snd_soc_register_card(card);
+	if (ret == 0) {
+		*ptr = dev;
+		devres_add(dev, ptr);
+	} else {
+		devres_free(ptr);
+	}
+
+	return ret;
+}
+EXPORT_SYMBOL_GPL(devm_snd_soc_register_card);

commit a0b03a616b08cf9d709812ff5cf7e9c0958d6807
Author: Mark Brown <broonie@linaro.org>
Date:   Wed Sep 4 20:37:34 2013 +0100

    ASoC: core: Implement devm_snd_soc_register_component()
    
    Since with the wider use of devres many drivers are now only calling
    snd_soc_unregister_component() in their remove functions providing a
    managed version will save a reasonable amount of code.
    
    Signed-off-by: Mark Brown <broonie@linaro.org>

diff --git a/sound/soc/soc-devres.c b/sound/soc/soc-devres.c
new file mode 100644
index 000000000000..13fe86f7c9a8
--- /dev/null
+++ b/sound/soc/soc-devres.c
@@ -0,0 +1,52 @@
+/*
+ * soc-devres.c  --  ALSA SoC Audio Layer devres functions
+ *
+ * Copyright (C) 2013 Linaro Ltd
+ *
+ *  This program is free software; you can redistribute  it and/or modify it
+ *  under  the terms of  the GNU General  Public License as published by the
+ *  Free Software Foundation;  either version 2 of the  License, or (at your
+ *  option) any later version.
+ */
+
+#include <linux/module.h>
+#include <linux/moduleparam.h>
+#include <sound/soc.h>
+
+static void devm_component_release(struct device *dev, void *res)
+{
+	snd_soc_unregister_component(*(struct device **)res);
+}
+
+/**
+ * devm_snd_soc_register_component - resource managed component registration
+ * @dev: Device used to manage component
+ * @cmpnt_drv: Component driver
+ * @dai_drv: DAI driver
+ * @num_dai: Number of DAIs to register
+ *
+ * Register a component with automatic unregistration when the device is
+ * unregistered.
+ */
+int devm_snd_soc_register_component(struct device *dev,
+			 const struct snd_soc_component_driver *cmpnt_drv,
+			 struct snd_soc_dai_driver *dai_drv, int num_dai)
+{
+	struct device **ptr;
+	int ret;
+
+	ptr = devres_alloc(devm_component_release, sizeof(*ptr), GFP_KERNEL);
+	if (!ptr)
+		return -ENOMEM;
+
+	ret = snd_soc_register_component(dev, cmpnt_drv, dai_drv, num_dai);
+	if (ret == 0) {
+		*ptr = dev;
+		devres_add(dev, ptr);
+	} else {
+		devres_free(ptr);
+	}
+
+	return ret;
+}
+EXPORT_SYMBOL_GPL(devm_snd_soc_register_component);
