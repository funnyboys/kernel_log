commit 19260818a9747768b09c1c1f10b4125b4d00595e
Author: Takashi Iwai <tiwai@suse.de>
Date:   Fri Jan 3 09:16:38 2020 +0100

    ALSA: ac97: Treat snd_ac97_bus_ops as const
    
    This is a preliminary patch to allow const for snd_ac97_bus_ops
    definitions in each driver's code.  The ops reference is read-only,
    hence it can be declared as const for further optimization.
    
    There should be no functional changes by this patch.
    
    Link: https://lore.kernel.org/r/20200103081714.9560-23-tiwai@suse.de
    Signed-off-by: Takashi Iwai <tiwai@suse.de>

diff --git a/sound/ac97_bus.c b/sound/ac97_bus.c
index 3732a63a2a81..b4685c53ff11 100644
--- a/sound/ac97_bus.c
+++ b/sound/ac97_bus.c
@@ -55,7 +55,7 @@ static bool snd_ac97_check_id(struct snd_ac97 *ac97, unsigned int id,
 int snd_ac97_reset(struct snd_ac97 *ac97, bool try_warm, unsigned int id,
 	unsigned int id_mask)
 {
-	struct snd_ac97_bus_ops *ops = ac97->bus->ops;
+	const struct snd_ac97_bus_ops *ops = ac97->bus->ops;
 
 	if (try_warm && ops->warm_reset) {
 		ops->warm_reset(ac97);

commit 2874c5fd284268364ece81a7bd936f3c8168e567
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Mon May 27 08:55:01 2019 +0200

    treewide: Replace GPLv2 boilerplate/reference with SPDX - rule 152
    
    Based on 1 normalized pattern(s):
    
      this program is free software you can redistribute it and or modify
      it under the terms of the gnu general public license as published by
      the free software foundation either version 2 of the license or at
      your option any later version
    
    extracted by the scancode license scanner the SPDX license identifier
    
      GPL-2.0-or-later
    
    has been chosen to replace the boilerplate/reference in 3029 file(s).
    
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Reviewed-by: Allison Randal <allison@lohutok.net>
    Cc: linux-spdx@vger.kernel.org
    Link: https://lkml.kernel.org/r/20190527070032.746973796@linutronix.de
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/sound/ac97_bus.c b/sound/ac97_bus.c
index 52e4bc54c9ac..3732a63a2a81 100644
--- a/sound/ac97_bus.c
+++ b/sound/ac97_bus.c
@@ -1,14 +1,10 @@
+// SPDX-License-Identifier: GPL-2.0-or-later
 /*
  * Linux driver model AC97 bus interface
  *
  * Author:	Nicolas Pitre
  * Created:	Jan 14, 2005
  * Copyright:	(C) MontaVista Software Inc.
- *
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation; either version 2 of the License, or
- * (at your option) any later version.
  */
 
 #include <linux/module.h>

commit 08ceab9d875824f8b389530e830349d5d6c4e582
Merge: 22c103cd3dfa 91931320cfbb
Author: Takashi Iwai <tiwai@suse.de>
Date:   Mon Aug 31 16:25:22 2015 +0200

    Merge tag 'asoc-v4.2-rc8' of git://git.kernel.org/pub/scm/linux/kernel/git/broonie/sound into for-linus
    
    ASoC: Updates for v4.3
    
    Not many updates to the core here, but an awful lot of driver updates
    this time round:
    
     - Factoring out of AC'97 reset code into the core
     - New drivers for Cirrus CS4349, GTM601, InvenSense ICS43432, Realtek
       RT298 and ST STI controllers.
     - Machine drivers for Rockchip systems with MAX98090 and RT5645 and
       RT5650.
     - Initial driver support for Intel Skylake devices.
     - A large number of cleanups for Lars-Peter Clausen and Axel Lin.

commit 9bc07dfbcde5b6f3aefa06b902b47eef9769d260
Author: Lars-Peter Clausen <lars@metafoo.de>
Date:   Fri Aug 21 09:48:33 2015 +0200

    ALSA: ac97: Switch to dev_pm_ops
    
    Convert the ac97_bus from legacy suspend/resume callbacks to dev_pm_ops.
    
    Since there isn't anything special to do at the bus level the bus driver
    does not have to implement any callbacks. The device driver core will
    automatically pick up and execute the device's PM ops.
    
    As there is only a single AC'97 driver implementing suspend and resume,
    update both the core and driver at the same time to avoid unnecessary code
    churn.
    
    While we are at it also drop the ifdefs around the suspend/resume functions
    to increase compile test coverage.
    
    Signed-off-by: Lars-Peter Clausen <lars@metafoo.de>
    Acked-by: Dmitry Torokhov <dmitry.torokhov@gmail.com>
    Signed-off-by: Takashi Iwai <tiwai@suse.de>

diff --git a/sound/ac97_bus.c b/sound/ac97_bus.c
index 2b50cbe6aca9..57a6dfc4b694 100644
--- a/sound/ac97_bus.c
+++ b/sound/ac97_bus.c
@@ -27,35 +27,9 @@ static int ac97_bus_match(struct device *dev, struct device_driver *drv)
 	return 1;
 }
 
-#ifdef CONFIG_PM
-static int ac97_bus_suspend(struct device *dev, pm_message_t state)
-{
-	int ret = 0;
-
-	if (dev->driver && dev->driver->suspend)
-		ret = dev->driver->suspend(dev, state);
-
-	return ret;
-}
-
-static int ac97_bus_resume(struct device *dev)
-{
-	int ret = 0;
-
-	if (dev->driver && dev->driver->resume)
-		ret = dev->driver->resume(dev);
-
-	return ret;
-}
-#endif /* CONFIG_PM */
-
 struct bus_type ac97_bus_type = {
 	.name		= "ac97",
 	.match		= ac97_bus_match,
-#ifdef CONFIG_PM
-	.suspend	= ac97_bus_suspend,
-	.resume		= ac97_bus_resume,
-#endif /* CONFIG_PM */
 };
 
 static int __init ac97_bus_init(void)

commit 5f1d980ee9b6353f18765bfa6774a5a08d6cb944
Author: Lars-Peter Clausen <lars@metafoo.de>
Date:   Tue Jul 21 21:53:00 2015 +0200

    ALSA: ac97: Add helper function to reset the AC97 device
    
    There is currently a lot of code duplication in ASoC drivers regarding the
    reset handling of devices. This patch introduces a new generic reset
    function in the generic AC'97 framework that can be used to replace most
    the custom reset functions.
    
    Signed-off-by: Lars-Peter Clausen <lars@metafoo.de>
    Reviewed-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Mark Brown <broonie@kernel.org>

diff --git a/sound/ac97_bus.c b/sound/ac97_bus.c
index 2b50cbe6aca9..55791a0b3943 100644
--- a/sound/ac97_bus.c
+++ b/sound/ac97_bus.c
@@ -17,6 +17,68 @@
 #include <linux/string.h>
 #include <sound/ac97_codec.h>
 
+/*
+ * snd_ac97_check_id() - Reads and checks the vendor ID of the device
+ * @ac97: The AC97 device to check
+ * @id: The ID to compare to
+ * @id_mask: Mask that is applied to the device ID before comparing to @id
+ *
+ * If @id is 0 this function returns true if the read device vendor ID is
+ * a valid ID. If @id is non 0 this functions returns true if @id
+ * matches the read vendor ID. Otherwise the function returns false.
+ */
+static bool snd_ac97_check_id(struct snd_ac97 *ac97, unsigned int id,
+	unsigned int id_mask)
+{
+	ac97->id = ac97->bus->ops->read(ac97, AC97_VENDOR_ID1) << 16;
+	ac97->id |= ac97->bus->ops->read(ac97, AC97_VENDOR_ID2);
+
+	if (ac97->id == 0x0 || ac97->id == 0xffffffff)
+		return false;
+
+	if (id != 0 && id != (ac97->id & id_mask))
+		return false;
+
+	return true;
+}
+
+/**
+ * snd_ac97_reset() - Reset AC'97 device
+ * @ac97: The AC'97 device to reset
+ * @try_warm: Try a warm reset first
+ * @id: Expected device vendor ID
+ * @id_mask: Mask that is applied to the device ID before comparing to @id
+ *
+ * This function resets the AC'97 device. If @try_warm is true the function
+ * first performs a warm reset. If the warm reset is successful the function
+ * returns 1. Otherwise or if @try_warm is false the function issues cold reset
+ * followed by a warm reset. If this is successful the function returns 0,
+ * otherwise a negative error code. If @id is 0 any valid device ID will be
+ * accepted, otherwise only the ID that matches @id and @id_mask is accepted.
+ */
+int snd_ac97_reset(struct snd_ac97 *ac97, bool try_warm, unsigned int id,
+	unsigned int id_mask)
+{
+	struct snd_ac97_bus_ops *ops = ac97->bus->ops;
+
+	if (try_warm && ops->warm_reset) {
+		ops->warm_reset(ac97);
+		if (snd_ac97_check_id(ac97, id, id_mask))
+			return 1;
+	}
+
+	if (ops->reset)
+		ops->reset(ac97);
+	if (ops->warm_reset)
+		ops->warm_reset(ac97);
+
+	if (snd_ac97_check_id(ac97, id, id_mask))
+		return 0;
+
+	return -ENODEV;
+}
+EXPORT_SYMBOL_GPL(snd_ac97_reset);
+
 /*
  * Let drivers decide whether they want to support given codec from their
  * probe method. Drivers have direct access to the struct snd_ac97

commit d0359c6fac18588da04fbefdad096453442653ee
Author: Jeffrin Jose <ahiliation@yahoo.co.in>
Date:   Mon Dec 6 19:27:53 2010 +0530

    sound: Fixed line limit issue in sound/ac97_bus.c
    
    This is a patch to the sound/ac97_bus.c file that fixes up a 80 character
    line limit issue found by the checkpatch.pl tool.
    
    Signed-off-by: Jeffrin Jose <ahiliation@yahoo.co.in>
    Signed-off-by: Takashi Iwai <tiwai@suse.de>

diff --git a/sound/ac97_bus.c b/sound/ac97_bus.c
index a351dd0a09c7..2b50cbe6aca9 100644
--- a/sound/ac97_bus.c
+++ b/sound/ac97_bus.c
@@ -19,8 +19,8 @@
 
 /*
  * Let drivers decide whether they want to support given codec from their
- * probe method.  Drivers have direct access to the struct snd_ac97 structure and may
- * decide based on the id field amongst other things.
+ * probe method. Drivers have direct access to the struct snd_ac97
+ * structure and may  decide based on the id field amongst other things.
  */
 static int ac97_bus_match(struct device *dev, struct device_driver *drv)
 {

commit 96841bae6ebfede07294447ad2de9e6385ae9fb5
Author: Mark Brown <broonie@opensource.wolfsonmicro.com>
Date:   Tue Dec 2 15:15:50 2008 +0000

    ALSA: ac97 - Include ac97_codec.h for ac97_bus_type declaration
    
    This fixes a sparse warning caused by the lack of a connection with the
    prototype for ac97_bus_type.
    
    Signed-off-by: Mark Brown <broonie@opensource.wolfsonmicro.com>
    Signed-off-by: Takashi Iwai <tiwai@suse.de>

diff --git a/sound/ac97_bus.c b/sound/ac97_bus.c
index 7fa37e15f196..a351dd0a09c7 100644
--- a/sound/ac97_bus.c
+++ b/sound/ac97_bus.c
@@ -15,6 +15,7 @@
 #include <linux/init.h>
 #include <linux/device.h>
 #include <linux/string.h>
+#include <sound/ac97_codec.h>
 
 /*
  * Let drivers decide whether they want to support given codec from their

commit 66e27788a33636cf0d9bf22eb9d56a7f4ffa3a84
Author: Martin Langer <martin-langer@gmx.de>
Date:   Mon Feb 5 13:02:35 2007 +0100

    [ALSA] ac97_bus power management
    
    This patch adds CONFIG_PM to the ac97_bus driver.
    
    Signed-off-by: Martin Langer <martin-langer@gmx.de>
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Jaroslav Kysela <perex@suse.cz>

diff --git a/sound/ac97_bus.c b/sound/ac97_bus.c
index 66de2c2f1554..7fa37e15f196 100644
--- a/sound/ac97_bus.c
+++ b/sound/ac97_bus.c
@@ -26,6 +26,7 @@ static int ac97_bus_match(struct device *dev, struct device_driver *drv)
 	return 1;
 }
 
+#ifdef CONFIG_PM
 static int ac97_bus_suspend(struct device *dev, pm_message_t state)
 {
 	int ret = 0;
@@ -45,12 +46,15 @@ static int ac97_bus_resume(struct device *dev)
 
 	return ret;
 }
+#endif /* CONFIG_PM */
 
 struct bus_type ac97_bus_type = {
 	.name		= "ac97",
 	.match		= ac97_bus_match,
+#ifdef CONFIG_PM
 	.suspend	= ac97_bus_suspend,
 	.resume		= ac97_bus_resume,
+#endif /* CONFIG_PM */
 };
 
 static int __init ac97_bus_init(void)

commit e1036502e5263851259d147771226161e5ccc85a
Author: Nicolas Pitre <nico@cam.org>
Date:   Tue Dec 12 13:32:29 2006 -0500

    [PATCH] remove config ordering/dependency between ucb1400-ts and sound subsystem
    
    Commit 2d4ba4a3b9aef95d328d74a17ae84f8d658059e2 introduced a dependency
    that was never meant to exist when the ac97_bus.c module was created.
    Move ac97_bus.c up the directory hierarchy to make sure it is built when
    selected even if sound is configured out so things work as originally
    intended.
    
    Signed-off-by: Nicolas Pitre <nico@cam.org>
    Acked-by: Randy Dunlap <randy.dunlap@oracle.com>
    Signed-off-by: Linus Torvalds <torvalds@osdl.org>

diff --git a/sound/ac97_bus.c b/sound/ac97_bus.c
new file mode 100644
index 000000000000..66de2c2f1554
--- /dev/null
+++ b/sound/ac97_bus.c
@@ -0,0 +1,72 @@
+/*
+ * Linux driver model AC97 bus interface
+ *
+ * Author:	Nicolas Pitre
+ * Created:	Jan 14, 2005
+ * Copyright:	(C) MontaVista Software Inc.
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ */
+
+#include <linux/module.h>
+#include <linux/init.h>
+#include <linux/device.h>
+#include <linux/string.h>
+
+/*
+ * Let drivers decide whether they want to support given codec from their
+ * probe method.  Drivers have direct access to the struct snd_ac97 structure and may
+ * decide based on the id field amongst other things.
+ */
+static int ac97_bus_match(struct device *dev, struct device_driver *drv)
+{
+	return 1;
+}
+
+static int ac97_bus_suspend(struct device *dev, pm_message_t state)
+{
+	int ret = 0;
+
+	if (dev->driver && dev->driver->suspend)
+		ret = dev->driver->suspend(dev, state);
+
+	return ret;
+}
+
+static int ac97_bus_resume(struct device *dev)
+{
+	int ret = 0;
+
+	if (dev->driver && dev->driver->resume)
+		ret = dev->driver->resume(dev);
+
+	return ret;
+}
+
+struct bus_type ac97_bus_type = {
+	.name		= "ac97",
+	.match		= ac97_bus_match,
+	.suspend	= ac97_bus_suspend,
+	.resume		= ac97_bus_resume,
+};
+
+static int __init ac97_bus_init(void)
+{
+	return bus_register(&ac97_bus_type);
+}
+
+subsys_initcall(ac97_bus_init);
+
+static void __exit ac97_bus_exit(void)
+{
+	bus_unregister(&ac97_bus_type);
+}
+
+module_exit(ac97_bus_exit);
+
+EXPORT_SYMBOL(ac97_bus_type);
+
+MODULE_LICENSE("GPL");
