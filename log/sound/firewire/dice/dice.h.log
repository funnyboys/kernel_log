commit 791a485f2da392df00341ed4c0c14780fd320d92
Author: Takashi Sakamoto <o-takashi@sakamocchi.jp>
Date:   Mon Jan 13 17:46:30 2020 +0900

    ALSA: dice: add support for Alesis MasterControl
    
    Alesis MasterControl was shipped 2009 and already discontinued. This model
    consists of:
     * TSB41AB2 for physical layer of IEEE 1394
     * WaveFront Dice II STD for link layer and protocol implementation
     * FreeScale DSPB56374AE
    
    Although the firmware of this model can respond against read transaction
    to address space for TCAT extension protocol, the content is not valid
    for protocol extension. This results in sound card without any PCM/MIDI
    interfaces.
    
    $ ./firewire-request /dev/fw1 read 0xffffe0200000 0x48
    result: 000: 00 00 00 20 00 00 04 94 00 00 04 b4 00 00 00 b4
    result: 010: 00 00 05 68 00 00 00 24 00 00 05 8c 00 00 00 48
    result: 020: 00 00 00 20 00 00 00 08 00 00 00 20 00 00 00 20
    result: 030: 00 00 00 10 00 00 00 08 00 00 00 08 00 00 00 04
    result: 040: 00 00 00 00 00 00 00 00
    
    This commit adds support the model by adding hard-coded stream formats.
    
    $ python3 ~/git/linux-firewire-utils/src/crpp < /sys/bus/firewire/devices/fw1/config_rom
                   ROM header and bus information block
                   -----------------------------------------------------------------
    400  04041ad7  bus_info_length 4, crc_length 4, crc 6871
    404  31333934  bus_name "1394"
    408  e0ff8112  irmc 1, cmc 1, isc 1, bmc 0, pmc 0, cyc_clk_acc 255,
                   max_rec 8 (512), max_rom 1, gen 1, spd 2 (S400)
    40c  00059504  company_id 000595     | Alesis Corporation
    410  008003f5  device_id 04008003f5  | EUI-64 00059504008003f5
    
                   root directory
                   -----------------------------------------------------------------
    414  0006a620  directory_length 6, crc 42528
    418  03000595  vendor: Alesis Corporation
    41c  8100000a  --> descriptor leaf at 444
    420  17000002  model
    424  8100000d  --> descriptor leaf at 458
    428  0c0087c0  node capabilities per IEEE 1394
    42c  d1000001  --> unit directory at 430
    
                   unit directory at 430
                   -----------------------------------------------------------------
    430  00041b9f  directory_length 4, crc 7071
    434  12000595  specifier id: Alesis Corporation
    438  13000001  version: audio
    43c  17000002  model
    440  8100000d  --> descriptor leaf at 474
    
                   descriptor leaf at 444
                   -----------------------------------------------------------------
    444  000494c2  leaf_length 4, crc 38082
    448  00000000  textual descriptor
    44c  00000000  minimal ASCII
    450  416c6573  "Ales"
    454  69730000  "is"
    
                   descriptor leaf at 458
                   -----------------------------------------------------------------
    458  0006c2ec  leaf_length 6, crc 49900
    45c  00000000  textual descriptor
    460  00000000  minimal ASCII
    464  4d617374  "Mast"
    468  6572436f  "erCo"
    46c  6e74726f  "ntro"
    470  6c000000  "l"
    
                   descriptor leaf at 474
                   -----------------------------------------------------------------
    474  0006c2ec  leaf_length 6, crc 49900
    478  00000000  textual descriptor
    47c  00000000  minimal ASCII
    480  4d617374  "Mast"
    484  6572436f  "erCo"
    488  6e74726f  "ntro"
    48c  6c000000  "l"
    
    Signed-off-by: Takashi Sakamoto <o-takashi@sakamocchi.jp>
    Link: https://lore.kernel.org/r/20200113084630.14305-4-o-takashi@sakamocchi.jp
    Signed-off-by: Takashi Iwai <tiwai@suse.de>

diff --git a/sound/firewire/dice/dice.h b/sound/firewire/dice/dice.h
index 16366773e22e..7fbffcab94c2 100644
--- a/sound/firewire/dice/dice.h
+++ b/sound/firewire/dice/dice.h
@@ -229,6 +229,7 @@ int snd_dice_create_midi(struct snd_dice *dice);
 
 int snd_dice_detect_tcelectronic_formats(struct snd_dice *dice);
 int snd_dice_detect_alesis_formats(struct snd_dice *dice);
+int snd_dice_detect_alesis_mastercontrol_formats(struct snd_dice *dice);
 int snd_dice_detect_extension_formats(struct snd_dice *dice);
 int snd_dice_detect_mytek_formats(struct snd_dice *dice);
 int snd_dice_detect_presonus_formats(struct snd_dice *dice);

commit ecb40fd2c8afdb66da7e309b43c6dc90e419c2dc
Author: Takashi Sakamoto <o-takashi@sakamocchi.jp>
Date:   Fri Oct 18 00:54:17 2019 +0900

    ALSA: dice: share PCM buffer size for both direction
    
    This commit allows ALSA dice driver to share PCM buffer size for both
    capture and playback PCM substream. When AMDTP domain starts for one
    of the PCM substream, buffer size of the PCM substream is stores to
    AMDTP domain structure. Some AMDTP streams have already run with the
    buffer size when another PCM substream starts, therefore the PCM
    substream has a constraint to its buffer size.
    
    Signed-off-by: Takashi Sakamoto <o-takashi@sakamocchi.jp>
    Link: https://lore.kernel.org/r/20191017155424.885-6-o-takashi@sakamocchi.jp
    Signed-off-by: Takashi Iwai <tiwai@suse.de>

diff --git a/sound/firewire/dice/dice.h b/sound/firewire/dice/dice.h
index 1f9e3502974e..16366773e22e 100644
--- a/sound/firewire/dice/dice.h
+++ b/sound/firewire/dice/dice.h
@@ -211,7 +211,8 @@ void snd_dice_stream_stop_duplex(struct snd_dice *dice);
 int snd_dice_stream_init_duplex(struct snd_dice *dice);
 void snd_dice_stream_destroy_duplex(struct snd_dice *dice);
 int snd_dice_stream_reserve_duplex(struct snd_dice *dice, unsigned int rate,
-				   unsigned int events_per_period);
+				   unsigned int events_per_period,
+				   unsigned int events_per_buffer);
 void snd_dice_stream_update_duplex(struct snd_dice *dice);
 int snd_dice_stream_detect_current_formats(struct snd_dice *dice);
 

commit 94c8101a2717a96457b474580e47142a0ef933c9
Author: Takashi Sakamoto <o-takashi@sakamocchi.jp>
Date:   Mon Oct 7 20:05:20 2019 +0900

    ALSA: dice: register the size of PCM period to AMDTP domain
    
    This commit is a preparation to share the size of PCM period between
    PCM substreams on AMDTP streams in the same domain. At this time,
    the size of PCM period in PCM substream which starts AMDTP streams in the
    same domain is recorded.
    
    Signed-off-by: Takashi Sakamoto <o-takashi@sakamocchi.jp>
    Link: https://lore.kernel.org/r/20191007110532.30270-6-o-takashi@sakamocchi.jp
    Signed-off-by: Takashi Iwai <tiwai@suse.de>

diff --git a/sound/firewire/dice/dice.h b/sound/firewire/dice/dice.h
index fa6d74303f54..1f9e3502974e 100644
--- a/sound/firewire/dice/dice.h
+++ b/sound/firewire/dice/dice.h
@@ -210,7 +210,8 @@ int snd_dice_stream_start_duplex(struct snd_dice *dice);
 void snd_dice_stream_stop_duplex(struct snd_dice *dice);
 int snd_dice_stream_init_duplex(struct snd_dice *dice);
 void snd_dice_stream_destroy_duplex(struct snd_dice *dice);
-int snd_dice_stream_reserve_duplex(struct snd_dice *dice, unsigned int rate);
+int snd_dice_stream_reserve_duplex(struct snd_dice *dice, unsigned int rate,
+				   unsigned int events_per_period);
 void snd_dice_stream_update_duplex(struct snd_dice *dice);
 int snd_dice_stream_detect_current_formats(struct snd_dice *dice);
 

commit e9f21129b8d84debf53e06f73d340d5af136270f
Author: Takashi Sakamoto <o-takashi@sakamocchi.jp>
Date:   Sun Aug 4 15:21:33 2019 +0900

    ALSA: dice: support AMDTP domain
    
    This commit adds AMDTP domain support for ALSA dice driver.
    
    Signed-off-by: Takashi Sakamoto <o-takashi@sakamocchi.jp>
    Signed-off-by: Takashi Iwai <tiwai@suse.de>

diff --git a/sound/firewire/dice/dice.h b/sound/firewire/dice/dice.h
index c6304e5e9fc4..fa6d74303f54 100644
--- a/sound/firewire/dice/dice.h
+++ b/sound/firewire/dice/dice.h
@@ -112,6 +112,8 @@ struct snd_dice {
 	bool global_enabled;
 	struct completion clock_accepted;
 	unsigned int substreams_counter;
+
+	struct amdtp_domain domain;
 };
 
 enum snd_dice_addr_type {

commit 3c53c6255d598db7084c5c3d7553d7200e857818
Merge: b89b889a326a a98429acadef
Author: Takashi Iwai <tiwai@suse.de>
Date:   Mon Jul 8 14:45:20 2019 +0200

    Merge tag 'asoc-v5.3' of https://git.kernel.org/pub/scm/linux/kernel/git/broonie/sound into for-linus
    
    ASoC: Updates for v5.3
    
    This is a very big update, mainly thanks to Morimoto-san's refactoring
    work and some fairly large new drivers.
    
     - Lots more work on moving towards a component based framework from
       Morimoto-san.
     - Support for force disconnecting muxes from Jerome Brunet.
     - New drivers for Cirrus Logic CS47L35, CS47L85 and CS47L90, Conexant
       CX2072X, Realtek RT1011 and RT1308.
    
    Signed-off-by: Takashi Iwai <tiwai@suse.de>

commit 740680f22d96e078245211b40fc2c141a24c8d1a
Author: Takashi Sakamoto <o-takashi@sakamocchi.jp>
Date:   Tue Jun 18 22:26:19 2019 +0900

    ALSA: dice: unify stop and release method for duplex streams
    
    >From callbacks for pcm and rawmidi interfaces, the functions to stop
    and release duplex streams are called at the same time. This commit
    merges the two functions.
    
    Signed-off-by: Takashi Sakamoto <o-takashi@sakamocchi.jp>
    Signed-off-by: Takashi Iwai <tiwai@suse.de>

diff --git a/sound/firewire/dice/dice.h b/sound/firewire/dice/dice.h
index f95073b85010..fd3f483283d5 100644
--- a/sound/firewire/dice/dice.h
+++ b/sound/firewire/dice/dice.h
@@ -210,7 +210,6 @@ void snd_dice_stream_stop_duplex(struct snd_dice *dice);
 int snd_dice_stream_init_duplex(struct snd_dice *dice);
 void snd_dice_stream_destroy_duplex(struct snd_dice *dice);
 int snd_dice_stream_reserve_duplex(struct snd_dice *dice, unsigned int rate);
-void snd_dice_stream_release_duplex(struct snd_dice *dice);
 void snd_dice_stream_update_duplex(struct snd_dice *dice);
 int snd_dice_stream_detect_current_formats(struct snd_dice *dice);
 

commit 3cd2c2d780a23e8b847c9ec22e8bc9dd6e685cbe
Author: Takashi Sakamoto <o-takashi@sakamocchi.jp>
Date:   Tue Jun 11 22:21:16 2019 +0900

    ALSA: dice: reserve/release isochronous resources in pcm.hw_params/hw_free callbacks
    
    Once allocated, isochronous resources are available for packet
    streaming, even if the streaming is cancelled. For this reason,
    current implementation handles allocation of the resources and
    starting packet streaming at the same time. However, this brings
    complicated procedure to start packet streaming.
    
    This commit separates the allocation and starting. The allocation is
    done in pcm.hw_params callback and available till pcm.hw_free callback.
    Even if any XRUN occurs, pcm.prepare callback is done to restart
    packet streaming without releasing/allocating the resources.
    
    There are two points to stop packet streaming; in pcm.hw_params and
    pcm.prepare callbacks. The former point is a case that packet streaming
    is already started for any MIDI substream then packet streaming is
    requested with different sampling transfer frequency for any PCM
    substream. The latter point is cases of any XRUN or packet queueing
    error.
    
    Signed-off-by: Takashi Sakamoto <o-takashi@sakamocchi.jp>
    Signed-off-by: Takashi Iwai <tiwai@suse.de>

diff --git a/sound/firewire/dice/dice.h b/sound/firewire/dice/dice.h
index 9699adc2a96d..f95073b85010 100644
--- a/sound/firewire/dice/dice.h
+++ b/sound/firewire/dice/dice.h
@@ -205,10 +205,12 @@ extern const unsigned int snd_dice_rates[SND_DICE_RATES_COUNT];
 
 int snd_dice_stream_get_rate_mode(struct snd_dice *dice, unsigned int rate,
 				  enum snd_dice_rate_mode *mode);
-int snd_dice_stream_start_duplex(struct snd_dice *dice, unsigned int rate);
+int snd_dice_stream_start_duplex(struct snd_dice *dice);
 void snd_dice_stream_stop_duplex(struct snd_dice *dice);
 int snd_dice_stream_init_duplex(struct snd_dice *dice);
 void snd_dice_stream_destroy_duplex(struct snd_dice *dice);
+int snd_dice_stream_reserve_duplex(struct snd_dice *dice, unsigned int rate);
+void snd_dice_stream_release_duplex(struct snd_dice *dice);
 void snd_dice_stream_update_duplex(struct snd_dice *dice);
 int snd_dice_stream_detect_current_formats(struct snd_dice *dice);
 

commit da607e1969ffbf7a1ba06280ade768f4f5fee8c3
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Wed May 29 16:57:59 2019 -0700

    treewide: Replace GPLv2 boilerplate/reference with SPDX - rule 345
    
    Based on 1 normalized pattern(s):
    
      licensed under the terms of the gnu general public license version 2
    
    extracted by the scancode license scanner the SPDX license identifier
    
      GPL-2.0-only
    
    has been chosen to replace the boilerplate/reference in 88 file(s).
    
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Reviewed-by: Alexios Zavras <alexios.zavras@intel.com>
    Reviewed-by: Allison Randal <allison@lohutok.net>
    Cc: linux-spdx@vger.kernel.org
    Link: https://lkml.kernel.org/r/20190530000437.521539229@linutronix.de
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/sound/firewire/dice/dice.h b/sound/firewire/dice/dice.h
index 83353a3559e8..eb4fb8bae2ad 100644
--- a/sound/firewire/dice/dice.h
+++ b/sound/firewire/dice/dice.h
@@ -1,10 +1,9 @@
+/* SPDX-License-Identifier: GPL-2.0-only */
 /*
  * dice.h - a part of driver for Dice based devices
  *
  * Copyright (c) Clemens Ladisch
  * Copyright (c) 2014 Takashi Sakamoto
- *
- * Licensed under the terms of the GNU General Public License, version 2.
  */
 
 #ifndef SOUND_DICE_H_INCLUDED

commit c4580f20971539a78231591852055a375a957fab
Author: Takashi Sakamoto <o-takashi@sakamocchi.jp>
Date:   Fri May 17 11:56:22 2019 +0900

    ALSA: dice: add stream format parameters for PreSonus FireStudio
    
    FireStudio was launched by PreSonus 2009. This model consists of three
    ICs for its packet processing on IEEE 1394 bus:
    
     - Texus Instruments TSB41AB2 for physical layer of IEEE 1394 bus
     - WaveFront semiconductor, Dice II STD ASIC for link layer of IEEE 1394
       bus and protocol layer
     - Xilinx Spartan XG3S500E FPGA for signal processing
    
    This model don't support TCAT extended application protocol. For such
    devices, ALSA dice driver needs to have hard-coded parameters for stream
    formats.
    
    This commit adds hard-coded table for this model. As a result, sampling
    transfer frequencies of 88.2/96.0 kHz are supported. I note that this
    patch can be backported to Linux kernel v4.18 and later.
    
    $ python2 crpp < /sys/bus/firewire/devices/fw1/config_rom
                   ROM header and bus information block
                   -----------------------------------------------------------------
    400  04042eda  bus_info_length 4, crc_length 4, crc 11994
    404  31333934  bus_name "1394"
    408  e0ff8112  irmc 1, cmc 1, isc 1, bmc 0, pmc 0, cyc_clk_acc 255,
                   max_rec 8 (512), max_rom 1, gen 1, spd 2 (S400)
    40c  000a9204  company_id 000a92     |
    410  023a8b7f  device_id 04023a8b7f  | EUI-64 000a9204023a8b7f
    
                   root directory
                   -----------------------------------------------------------------
    414  000661b6  directory_length 6, crc 25014
    418  03000a92  vendor
    41c  8100000a  --> descriptor leaf at 444
    420  17000008  model
    424  8100000d  --> descriptor leaf at 458
    428  0c0087c0  node capabilities per IEEE 1394
    42c  d1000001  --> unit directory at 430
    
                   unit directory at 430
                   -----------------------------------------------------------------
    430  00041c75  directory_length 4, crc 7285
    434  12000a92  specifier id
    438  13000001  version
    43c  17000008  model
    440  8100000c  --> descriptor leaf at 470
    
                   descriptor leaf at 444
                   -----------------------------------------------------------------
    444  00047c11  leaf_length 4, crc 31761
    448  00000000  textual descriptor
    44c  00000000  minimal ASCII
    450  50726553  "PreS"
    454  6f6e7573  "onus"
    
                   descriptor leaf at 458
                   -----------------------------------------------------------------
    458  0005d7b3  leaf_length 5, crc 55219
    45c  00000000  textual descriptor
    460  00000000  minimal ASCII
    464  46495245  "FIRE"
    468  53545544  "STUD"
    46c  494f0000  "IO"
    
                   descriptor leaf at 470
                   -----------------------------------------------------------------
    470  0005d7b3  leaf_length 5, crc 55219
    474  00000000  textual descriptor
    478  00000000  minimal ASCII
    47c  46495245  "FIRE"
    480  53545544  "STUD"
    484  494f0000  "IO"
    
    Signed-off-by: Takashi Sakamoto <o-takashi@sakamocchi.jp>
    Signed-off-by: Takashi Iwai <tiwai@suse.de>

diff --git a/sound/firewire/dice/dice.h b/sound/firewire/dice/dice.h
index 83353a3559e8..9699adc2a96d 100644
--- a/sound/firewire/dice/dice.h
+++ b/sound/firewire/dice/dice.h
@@ -227,5 +227,6 @@ int snd_dice_detect_tcelectronic_formats(struct snd_dice *dice);
 int snd_dice_detect_alesis_formats(struct snd_dice *dice);
 int snd_dice_detect_extension_formats(struct snd_dice *dice);
 int snd_dice_detect_mytek_formats(struct snd_dice *dice);
+int snd_dice_detect_presonus_formats(struct snd_dice *dice);
 
 #endif

commit 7c1543f6b57fa9c0e202c4b5a3cb5ffbb63dc9d0
Author: Melvin Vermeeren <mail@mel.vin>
Date:   Thu May 17 21:00:00 2018 +0200

    ALSA: dice: add stream format parameters for Mytek devices
    
    --nextPart3916812.EicPReet6m
    Content-Transfer-Encoding: 7Bit
    Content-Type: text/plain; charset="us-ascii"
    
    Mytek manufactures some equipment with DICE-based firewire ports. These
    devices contain old versions of DICE firmware which lacks detailed
    stream format reporting for all sampling clock modes.
    
    Building upon the recent work by Takashi Sakamoto, hard-coded parameters
    are added for the Stereo 192 DSD-DAC. When the device vendor and model
    match the coded parameters are copied into the stream format cache.
    
    Signed-off-by: Melvin Vermeeren <mail@mel.vin>
    Reviewed-by: Takashi Sakamoto <o-takashi@sakamocchi.jp>
    Signed-off-by: Takashi Iwai <tiwai@suse.de>

diff --git a/sound/firewire/dice/dice.h b/sound/firewire/dice/dice.h
index 505b79fea6d9..83353a3559e8 100644
--- a/sound/firewire/dice/dice.h
+++ b/sound/firewire/dice/dice.h
@@ -226,5 +226,6 @@ int snd_dice_create_midi(struct snd_dice *dice);
 int snd_dice_detect_tcelectronic_formats(struct snd_dice *dice);
 int snd_dice_detect_alesis_formats(struct snd_dice *dice);
 int snd_dice_detect_extension_formats(struct snd_dice *dice);
+int snd_dice_detect_mytek_formats(struct snd_dice *dice);
 
 #endif

commit 9c367c01d3d5060a2bcb2ca76a447bdb42c83c91
Author: Takashi Sakamoto <o-takashi@sakamocchi.jp>
Date:   Wed May 2 19:16:51 2018 +0900

    ALSA: dice: remove local frag of force_two_pcms
    
    At present, to add PCM substreams for each of available tx/rx streams,
    this driver uses a condition based on model-name. This is not enough
    to support unknown models.
    
    In former commits, this driver gains cache of stream formats. For models
    which support protocol extension, all of available steam formats are
    cached. For known models, hard-coded stream formats are used to generate
    the cache. For unknown models, stream formats at current mode of sampling
    transmission frequency is cached.
    
    Anyway, at least, the cached formats are used to expose constrains of PCM
    substreams for userspace applications. Thus, The cached data can be also
    used to add PCM substreams themselves, instead of the name-based
    conditions.
    
    This commit obsoletes local frag of force_two_pcms.
    
    Signed-off-by: Takashi Sakamoto <o-takashi@sakamocchi.jp>
    Signed-off-by: Takashi Iwai <tiwai@suse.de>

diff --git a/sound/firewire/dice/dice.h b/sound/firewire/dice/dice.h
index 4465a5925641..505b79fea6d9 100644
--- a/sound/firewire/dice/dice.h
+++ b/sound/firewire/dice/dice.h
@@ -113,8 +113,6 @@ struct snd_dice {
 	bool global_enabled;
 	struct completion clock_accepted;
 	unsigned int substreams_counter;
-
-	bool force_two_pcms;
 };
 
 enum snd_dice_addr_type {

commit 58579c056c1c9510ae6695ed8e01ee05bbdcfb23
Author: Takashi Sakamoto <o-takashi@sakamocchi.jp>
Date:   Wed May 2 19:16:45 2018 +0900

    ALSA: dice: use extended protocol to detect available stream formats
    
    TC Applied Technologies (TCAT) have added extension to DICE protocol. This
    protocol extension is called as Extended Application Protocol, a.k.a. EAP.
    
    In this protocol extension, units get additional 9 address spaces. One of
    it is for current configuration. In this address space, a pair of router
    and stream formats are exposed per mode of three sampling transmission
    frequencies.
    
    This commit adds support the protocol extension for address space of the
    current configuration to generate cache of stream formats.
    
    Signed-off-by: Takashi Sakamoto <o-takashi@sakamocchi.jp>
    Signed-off-by: Takashi Iwai <tiwai@suse.de>

diff --git a/sound/firewire/dice/dice.h b/sound/firewire/dice/dice.h
index 6be1bcf00116..4465a5925641 100644
--- a/sound/firewire/dice/dice.h
+++ b/sound/firewire/dice/dice.h
@@ -227,5 +227,6 @@ int snd_dice_create_midi(struct snd_dice *dice);
 
 int snd_dice_detect_tcelectronic_formats(struct snd_dice *dice);
 int snd_dice_detect_alesis_formats(struct snd_dice *dice);
+int snd_dice_detect_extension_formats(struct snd_dice *dice);
 
 #endif

commit 28b208f600a36f99365b7fcda2d425a2851c0c15
Author: Takashi Sakamoto <o-takashi@sakamocchi.jp>
Date:   Wed May 2 19:16:44 2018 +0900

    ALSA: dice: add parameters of stream formats for models produced by Alesis
    
    Alesis shipped some models with DICE ASICs. All of them just support
    DICE original protocol and drivers can't retrieve all of available stream
    formats without changing status of sampling transmission frequency
    actually.
    
    This commit puts some hard-coded parameters for the models. When detecting
    the models, the corresponding parameters are copied as cache of stream
    formats.
    
    I note that each of pair of iO14/iO26 and MultiMix 8/12/16 has the same
    model ID on their configuration ROM. The MultiMix 8/12/16 just support
    one mode for sampling transmission frequency and ALSA dice driver already
    handles them correctly. The iO14/iO26 support three modes and need
    hard-coded parameters. To distinguish these two models, this commit let
    the driver to retrieve current stream formats and compare it to known
    parameters, then decide it.
    
    Signed-off-by: Takashi Sakamoto <o-takashi@sakamocchi.jp>
    Signed-off-by: Takashi Iwai <tiwai@suse.de>

diff --git a/sound/firewire/dice/dice.h b/sound/firewire/dice/dice.h
index a4987dce9e0a..6be1bcf00116 100644
--- a/sound/firewire/dice/dice.h
+++ b/sound/firewire/dice/dice.h
@@ -226,5 +226,6 @@ void snd_dice_create_proc(struct snd_dice *dice);
 int snd_dice_create_midi(struct snd_dice *dice);
 
 int snd_dice_detect_tcelectronic_formats(struct snd_dice *dice);
+int snd_dice_detect_alesis_formats(struct snd_dice *dice);
 
 #endif

commit f1f0f330b1d0ac1bcc38d7c84d439f4fde341a9c
Author: Takashi Sakamoto <o-takashi@sakamocchi.jp>
Date:   Wed May 2 19:16:43 2018 +0900

    ALSA: dice: add parameters of stream formats for models produced by TC Electronic
    
    TC Electronic shipped some models with DICE ASICs. All of them just support
    DICE original protocol and drivers can't retrieve all of available stream
    formats without changing status of sampling transmission frequency
    actually.
    
    This commit puts some hard-coded parameters for the models. When detecting
    the models, the corresponding parameters are copied as cache of stream
    formats.
    
    Signed-off-by: Takashi Sakamoto <o-takashi@sakamocchi.jp>
    Signed-off-by: Takashi Iwai <tiwai@suse.de>

diff --git a/sound/firewire/dice/dice.h b/sound/firewire/dice/dice.h
index 0c044f28b9e7..a4987dce9e0a 100644
--- a/sound/firewire/dice/dice.h
+++ b/sound/firewire/dice/dice.h
@@ -70,6 +70,9 @@ enum snd_dice_rate_mode {
 	SND_DICE_RATE_MODE_COUNT,
 };
 
+struct snd_dice;
+typedef int (*snd_dice_detect_formats_t)(struct snd_dice *dice);
+
 struct snd_dice {
 	struct snd_card *card;
 	struct fw_unit *unit;
@@ -91,6 +94,7 @@ struct snd_dice {
 	unsigned int rx_pcm_chs[MAX_STREAMS][SND_DICE_RATE_MODE_COUNT];
 	unsigned int tx_midi_ports[MAX_STREAMS];
 	unsigned int rx_midi_ports[MAX_STREAMS];
+	snd_dice_detect_formats_t detect_formats;
 
 	struct fw_address_handler notification_handler;
 	int owner_generation;
@@ -221,4 +225,6 @@ void snd_dice_create_proc(struct snd_dice *dice);
 
 int snd_dice_create_midi(struct snd_dice *dice);
 
+int snd_dice_detect_tcelectronic_formats(struct snd_dice *dice);
+
 #endif

commit b60152f750ca22ddee20954228d1bcbf45c936f7
Author: Takashi Sakamoto <o-takashi@sakamocchi.jp>
Date:   Wed May 2 19:16:42 2018 +0900

    ALSA: dice: cache stream formats at current mode of sampling transmission frequency
    
    In former commits, proxy structure get members for cache of stream
    formats. This commit fills the cache with stream formats at current mode
    of sampling transmission frequency.
    
    Signed-off-by: Takashi Sakamoto <o-takashi@sakamocchi.jp>
    Signed-off-by: Takashi Iwai <tiwai@suse.de>

diff --git a/sound/firewire/dice/dice.h b/sound/firewire/dice/dice.h
index 8f68976930c5..0c044f28b9e7 100644
--- a/sound/firewire/dice/dice.h
+++ b/sound/firewire/dice/dice.h
@@ -201,11 +201,14 @@ void snd_dice_transaction_destroy(struct snd_dice *dice);
 #define SND_DICE_RATES_COUNT	7
 extern const unsigned int snd_dice_rates[SND_DICE_RATES_COUNT];
 
+int snd_dice_stream_get_rate_mode(struct snd_dice *dice, unsigned int rate,
+				  enum snd_dice_rate_mode *mode);
 int snd_dice_stream_start_duplex(struct snd_dice *dice, unsigned int rate);
 void snd_dice_stream_stop_duplex(struct snd_dice *dice);
 int snd_dice_stream_init_duplex(struct snd_dice *dice);
 void snd_dice_stream_destroy_duplex(struct snd_dice *dice);
 void snd_dice_stream_update_duplex(struct snd_dice *dice);
+int snd_dice_stream_detect_current_formats(struct snd_dice *dice);
 
 int snd_dice_stream_lock_try(struct snd_dice *dice);
 void snd_dice_stream_lock_release(struct snd_dice *dice);

commit 8feda7ddb6a3047609060840a4631b70623b0131
Author: Takashi Sakamoto <o-takashi@sakamocchi.jp>
Date:   Wed May 2 19:16:39 2018 +0900

    ALSA: dice: add cache of stream formats
    
    A previous commit 6f688268b3f4 ('ALSA: dice: purge generating channel
    cache') purged cache of stream formats. DICE interface originally has
    no feature to assist drivers to retrieve available formats for all of
    supported sampling transmission frequencies, without changing the
    frequency actually.
    
    For later release of Dice ASICs such as TCD2210, Dice interface has
    extended protocol and can support the feature. This assists drivers
    to retrieve available stream formats.
    
    This commit is a first step to regain the cache to generate PCM rules
    for all of supported sampling transmission frequencies.
    
    Signed-off-by: Takashi Sakamoto <o-takashi@sakamocchi.jp>
    Signed-off-by: Takashi Iwai <tiwai@suse.de>

diff --git a/sound/firewire/dice/dice.h b/sound/firewire/dice/dice.h
index da00e75e09d4..8f68976930c5 100644
--- a/sound/firewire/dice/dice.h
+++ b/sound/firewire/dice/dice.h
@@ -63,6 +63,13 @@
  */
 #define MAX_STREAMS	2
 
+enum snd_dice_rate_mode {
+	SND_DICE_RATE_MODE_LOW = 0,
+	SND_DICE_RATE_MODE_MIDDLE,
+	SND_DICE_RATE_MODE_HIGH,
+	SND_DICE_RATE_MODE_COUNT,
+};
+
 struct snd_dice {
 	struct snd_card *card;
 	struct fw_unit *unit;
@@ -80,6 +87,10 @@ struct snd_dice {
 	unsigned int rsrv_offset;
 
 	unsigned int clock_caps;
+	unsigned int tx_pcm_chs[MAX_STREAMS][SND_DICE_RATE_MODE_COUNT];
+	unsigned int rx_pcm_chs[MAX_STREAMS][SND_DICE_RATE_MODE_COUNT];
+	unsigned int tx_midi_ports[MAX_STREAMS];
+	unsigned int rx_midi_ports[MAX_STREAMS];
 
 	struct fw_address_handler notification_handler;
 	int owner_generation;

commit 174cd4b1e5fbd0d74c68cf3a74f5bd4923485512
Author: Ingo Molnar <mingo@kernel.org>
Date:   Thu Feb 2 19:15:33 2017 +0100

    sched/headers: Prepare to move signal wakeup & sigpending methods from <linux/sched.h> into <linux/sched/signal.h>
    
    Fix up affected files that include this signal functionality via sched.h.
    
    Acked-by: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Mike Galbraith <efault@gmx.de>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: linux-kernel@vger.kernel.org
    Signed-off-by: Ingo Molnar <mingo@kernel.org>

diff --git a/sound/firewire/dice/dice.h b/sound/firewire/dice/dice.h
index e6c07857f475..da00e75e09d4 100644
--- a/sound/firewire/dice/dice.h
+++ b/sound/firewire/dice/dice.h
@@ -23,6 +23,7 @@
 #include <linux/slab.h>
 #include <linux/spinlock.h>
 #include <linux/wait.h>
+#include <linux/sched/signal.h>
 
 #include <sound/control.h>
 #include <sound/core.h>

commit 7cafc65b3aa1b6970f92211c55712f115d876cfc
Author: Takashi Sakamoto <o-takashi@sakamocchi.jp>
Date:   Mon Mar 7 22:35:45 2016 +0900

    ALSA: dice: force to add two pcm devices for listed models
    
    Some models reduce the number of available isochronous streams for higher
    sampling transfer frequency. Such models bring an issue about how to add
    PCM substreams. When at lower sampling transfer frequency, the
    models reports whole available streams, thus this driver can add enough
    number of PCM substreams at probing time. On the other hand, at higher
    sampling transfer frequency, this driver can just add reduced number of
    PCM substreams. After probed, even if the sampling transfer frequency is
    changed to lower rate, fewer PCM substreams are actually available. This
    is inconvenience.
    
    For the reason, this commit adds a list so that this driver assume models
    on the list to have two pairs of PCM substreams. This list keeps the name
    of model in which the number of available streams differs depending on
    sampling transfer frequency.
    
    Signed-off-by: Takashi Sakamoto <o-takashi@sakamocchi.jp>
    Signed-off-by: Takashi Iwai <tiwai@suse.de>

diff --git a/sound/firewire/dice/dice.h b/sound/firewire/dice/dice.h
index 8fba87d83810..e6c07857f475 100644
--- a/sound/firewire/dice/dice.h
+++ b/sound/firewire/dice/dice.h
@@ -97,6 +97,8 @@ struct snd_dice {
 	bool global_enabled;
 	struct completion clock_accepted;
 	unsigned int substreams_counter;
+
+	bool force_two_pcms;
 };
 
 enum snd_dice_addr_type {

commit 8ae25b760ade9856e5a217ca4f7c3d531b312ca4
Author: Takashi Sakamoto <o-takashi@sakamocchi.jp>
Date:   Mon Mar 7 22:35:42 2016 +0900

    ALSA: dice: have two sets of isochronous resources/streams
    
    Currently ALSA dice driver handles a pair of isochronous resources for
    IEC 61883-1/6 packet streaming. While, according to some documents about
    ASICs named as 'Dice', several isochronous streams are available.
    
    Here, I start to describe ASICs produced under 'Dice' name.
     * Dice II (designed by wavefront semiconductor, including TCAT's IP)
       * STD (with limited functionality of DTCP)
       * CP  (with full functionality of DTCP)
     * TCD2210/2210-E (so-called 'Dice Mini')
     * TCD2220/2220-E (so-called 'Dice Jr.')
     * TCD3070-CH (so-called 'Dice III')
    
    Some documents are public and we can see hardware design of them. We can
    find some articles about hardware internal register definitions
    (not registers exported to IEEE 1394 bus).
    
    * DICE II User Guide
      * http://www.tctechnologies.tc/archive/downloads/dice_ii_user_guide.pdf
        * 6.1 AVS Audio Receivers
          * Table 6.1: AVS Audio Receiver Memory Map
            * ARX1-ARX4
        * 6.2 AVS Audio Transmitters
          * Table 6.2: AVS Audio Transmitter Memory Map
            * ATX1, ATX2
    * TCD22xx User Guide
      * http://www.tctechnologies.tc/downloads/tcd22xx_user_guide.pdf
        * 6.1 AVS Audio Receivers
          * Table 66: AVS Audio Receiver Memory Map
            * ARX1, ARX2
        * 6/2 AVS Audio Transmitters
          * Table 67: AVS Audio Transmitter Memory Map
            * ATX1, ATX2
    * DICE III
      * http://www.tctechnologies.tc/downloads/TCD3070-CH.pdf
        * Dual stream 63 channel transmitter/receiver
    
    For Dice II and TCD22xx series, maximum 16 data channels are transferred in
    an AMDTP packet, while for Dice III, maximum 32 data channels are
    transferred.
    
    According to the design of the series of these ASICs, this commit allows
    this driver to handle additional set of isochronous resources. For
    practical reason, two pair of isochronous resources are added. As of this
    commit, this driver still use a pair of the first isochronous resources.
    
    Signed-off-by: Takashi Sakamoto <o-takashi@sakamocchi.jp>
    Signed-off-by: Takashi Iwai <tiwai@suse.de>

diff --git a/sound/firewire/dice/dice.h b/sound/firewire/dice/dice.h
index 423cdba99726..8fba87d83810 100644
--- a/sound/firewire/dice/dice.h
+++ b/sound/firewire/dice/dice.h
@@ -39,6 +39,29 @@
 #include "../lib.h"
 #include "dice-interface.h"
 
+/*
+ * This module support maximum 2 pairs of tx/rx isochronous streams for
+ * our convinience.
+ *
+ * In documents for ASICs called with a name of 'DICE':
+ *  - ASIC for DICE II:
+ *   - Maximum 2 tx and 4 rx are supported.
+ *   - A packet supports maximum 16 data channels.
+ *  - TCD2210/2210-E (so-called 'Dice Mini'):
+ *   - Maximum 2 tx and 2 rx are supported.
+ *   - A packet supports maximum 16 data channels.
+ *  - TCD2220/2220-E (so-called 'Dice Jr.')
+ *   - 2 tx and 2 rx are supported.
+ *   - A packet supports maximum 16 data channels.
+ *  - TCD3070-CH (so-called 'Dice III')
+ *   - Maximum 2 tx and 2 rx are supported.
+ *   - A packet supports maximum 32 data channels.
+ *
+ * For the above, MIDI conformant data channel is just on the first isochronous
+ * stream.
+ */
+#define MAX_STREAMS	2
+
 struct snd_dice {
 	struct snd_card *card;
 	struct fw_unit *unit;
@@ -67,10 +90,10 @@ struct snd_dice {
 	wait_queue_head_t hwdep_wait;
 
 	/* For streaming */
-	struct fw_iso_resources tx_resources;
-	struct fw_iso_resources rx_resources;
-	struct amdtp_stream tx_stream;
-	struct amdtp_stream rx_stream;
+	struct fw_iso_resources tx_resources[MAX_STREAMS];
+	struct fw_iso_resources rx_resources[MAX_STREAMS];
+	struct amdtp_stream tx_stream[MAX_STREAMS];
+	struct amdtp_stream rx_stream[MAX_STREAMS];
 	bool global_enabled;
 	struct completion clock_accepted;
 	unsigned int substreams_counter;

commit dfabc0eee1400b910d9e0f4bc55af8d2797927d2
Author: Takashi Sakamoto <o-takashi@sakamocchi.jp>
Date:   Mon Feb 8 22:54:20 2016 +0900

    ALSA: dice: ensure phase lock before starting streaming
    
    In former commits, probing process has no need to set sampling transfer
    frequency. Although it's OK to drop a function to change the frequency
    from this module, some models require it before streaming. This seems to
    be due to phase lock of clock source.
    
    This commit moves the function from transaction layer to stream layer, and
    rename it according to the purpose.
    
    Signed-off-by: Takashi Sakamoto <o-takashi@sakamocchi.jp>
    Signed-off-by: Takashi Iwai <tiwai@suse.de>

diff --git a/sound/firewire/dice/dice.h b/sound/firewire/dice/dice.h
index c968f9887af6..423cdba99726 100644
--- a/sound/firewire/dice/dice.h
+++ b/sound/firewire/dice/dice.h
@@ -154,7 +154,6 @@ static inline int snd_dice_transaction_read_sync(struct snd_dice *dice,
 
 int snd_dice_transaction_get_clock_source(struct snd_dice *dice,
 					  unsigned int *source);
-int snd_dice_transaction_set_rate(struct snd_dice *dice, unsigned int rate);
 int snd_dice_transaction_get_rate(struct snd_dice *dice, unsigned int *rate);
 int snd_dice_transaction_set_enable(struct snd_dice *dice);
 void snd_dice_transaction_clear_enable(struct snd_dice *dice);

commit 6f688268b3f4ba494bdf1f9755a3dfa4d91369f0
Author: Takashi Sakamoto <o-takashi@sakamocchi.jp>
Date:   Mon Feb 8 22:54:19 2016 +0900

    ALSA: dice: purge generating channel cache
    
    Dice interface design doesn't allow drivers to read supported combination
    between sampling transfer frequencies and the number of Multi bit linear
    audio data channels. Due to the design, ALSA dice driver changes current
    sampling transfer frequency to generate cache of the combinations at
    device probing processing.
    
    Although, this idea is worse because ALSA dice driver changes the state of
    clock. This is not what users want when they save favorite configuration
    to the device in advance.
    
    Furthermore, there's a possibility that the format of data block is decided
    not only according to current sampling transfer frequency, but also the
    other factors, i.e. data format for digital interface. It's not good to
    generate channel cache according to the sampling transfer frequency only.
    
    This commit purges processing cache data and related structure members. As
    a result, users must set preferable sampling transfer frequency before
    using ALSA PCM applications, as long as they want to start any PCM
    substreams at the rate except for current one.
    
    Signed-off-by: Takashi Sakamoto <o-takashi@sakamocchi.jp>
    Signed-off-by: Takashi Iwai <tiwai@suse.de>

diff --git a/sound/firewire/dice/dice.h b/sound/firewire/dice/dice.h
index 3d5ebebe61ea..c968f9887af6 100644
--- a/sound/firewire/dice/dice.h
+++ b/sound/firewire/dice/dice.h
@@ -56,10 +56,6 @@ struct snd_dice {
 	unsigned int rsrv_offset;
 
 	unsigned int clock_caps;
-	unsigned int tx_channels[3];
-	unsigned int rx_channels[3];
-	unsigned int tx_midi_ports[3];
-	unsigned int rx_midi_ports[3];
 
 	struct fw_address_handler notification_handler;
 	int owner_generation;
@@ -169,9 +165,6 @@ void snd_dice_transaction_destroy(struct snd_dice *dice);
 #define SND_DICE_RATES_COUNT	7
 extern const unsigned int snd_dice_rates[SND_DICE_RATES_COUNT];
 
-int snd_dice_stream_get_rate_mode(struct snd_dice *dice,
-				  unsigned int rate, unsigned int *mode);
-
 int snd_dice_stream_start_duplex(struct snd_dice *dice, unsigned int rate);
 void snd_dice_stream_stop_duplex(struct snd_dice *dice);
 int snd_dice_stream_init_duplex(struct snd_dice *dice);

commit b59fb1900b4feedd2fa9256326e65b5632627465
Author: Takashi Sakamoto <o-takashi@sakamocchi.jp>
Date:   Thu Dec 31 13:58:12 2015 +0900

    ALSA: dice: postpone card registration
    
    Some models based on ASIC for Dice II series (STD, CP) change their
    hardware configurations after appearing on IEEE 1394 bus. This is due to
    interactions of boot loader (RedBoot), firmwares (eCos) and vendor's
    configurations. This causes current ALSA dice driver to get wrong
    information about the hardware's capability because its probe function
    runs just after detecting unit of the model.
    
    As long as I investigated, it takes a bit time (less than 1 second) to load
    the firmware after bootstrap. Just after loaded, the driver can get
    information about the unit. Then the hardware is initialized according to
    vendor's configurations. After, the got information becomes wrong.
    Between bootstrap, firmware loading and post configuration, some bus resets
    are observed.
    
    This commit offloads most processing of probe function into workqueue and
    schedules the workqueue after successive bus resets. This has an effect to
    get correct hardware information and avoid involvement to bus reset storm.
    
    For code simplicity, this change effects all of Dice-based models, i.e.
    Dice II, Dice Jr., Dice Mini and Dice III.
    
    I use a loose strategy to manage a race condition between the work and the
    bus reset. This is due to a specification of dice transaction. When bus
    reset occurs, registered address for the transaction is cleared. Drivers
    must re-register their own address again. While, this operation is required
    for the work because the work includes to wait for the transaction. This
    commit uses no lock primitives for the race condition. Instead, checking
    'registered' member of 'struct snd_dice' avoid executing the work again.
    If sound card is not registered, the work can be scheduled again by bus
    reset handler.
    
    When .remove callback is executed, the sound card is going to be released.
    The work should not be pending or executed in the releasing. This commit
    uses cancel_delayed_work_sync() in .remove callback and wait till the
    pending work finished. After .remove callback, .update callback is not
    executed, therefore no works are scheduled again.
    
    Signed-off-by: Takashi Sakamoto <o-takashi@sakamocchi.jp>
    Signed-off-by: Takashi Iwai <tiwai@suse.de>

diff --git a/sound/firewire/dice/dice.h b/sound/firewire/dice/dice.h
index 101550ac1a24..3d5ebebe61ea 100644
--- a/sound/firewire/dice/dice.h
+++ b/sound/firewire/dice/dice.h
@@ -45,6 +45,9 @@ struct snd_dice {
 	spinlock_t lock;
 	struct mutex mutex;
 
+	bool registered;
+	struct delayed_work dwork;
+
 	/* Offsets for sub-addresses */
 	unsigned int global_offset;
 	unsigned int rx_offset;

commit 5955815e71ff9c773b156680c781c87728e37bea
Author: Takashi Sakamoto <o-takashi@sakamocchi.jp>
Date:   Sat Sep 19 11:21:55 2015 +0900

    ALSA: firewire-lib: add data block processing layer for AM824 format
    
    This commit adds data block processing layer for AM824 format. The new
    layer initializes streaming layer with its value for fmt field.
    
    Currently, most implementation of data block processing still remains
    streaming layer. In later commits, these codes will be moved to the layer.
    
    Signed-off-by: Takashi Sakamoto <o-takashi@sakamocchi.jp>
    Signed-off-by: Takashi Iwai <tiwai@suse.de>

diff --git a/sound/firewire/dice/dice.h b/sound/firewire/dice/dice.h
index 29578c19e977..101550ac1a24 100644
--- a/sound/firewire/dice/dice.h
+++ b/sound/firewire/dice/dice.h
@@ -34,7 +34,7 @@
 #include <sound/pcm_params.h>
 #include <sound/rawmidi.h>
 
-#include "../amdtp-stream.h"
+#include "../amdtp-am824.h"
 #include "../iso-resources.h"
 #include "../lib.h"
 #include "dice-interface.h"

commit d67c46b953749aef223496ec95b7bf93e40887dc
Author: Takashi Sakamoto <o-takashi@sakamocchi.jp>
Date:   Sat Sep 19 11:21:54 2015 +0900

    ALSA: firewire-lib: rename 'amdtp' to 'amdtp-stream' to prepare for functional separation
    
    In later commit, data block processing layer will be newly added. This
    layer will be named as 'amdtp-am824'.
    
    This commit renames current amdtp file to amdtp-stream, to distinguish it
    from the new layer.
    
    Signed-off-by: Takashi Sakamoto <o-takashi@sakamocchi.jp>
    Signed-off-by: Takashi Iwai <tiwai@suse.de>

diff --git a/sound/firewire/dice/dice.h b/sound/firewire/dice/dice.h
index ecf5dc862235..29578c19e977 100644
--- a/sound/firewire/dice/dice.h
+++ b/sound/firewire/dice/dice.h
@@ -34,7 +34,7 @@
 #include <sound/pcm_params.h>
 #include <sound/rawmidi.h>
 
-#include "../amdtp.h"
+#include "../amdtp-stream.h"
 #include "../iso-resources.h"
 #include "../lib.h"
 #include "dice-interface.h"

commit a113ff886b9a6e892dd4107be1fd7883cf020885
Author: Takashi Sakamoto <o-takashi@sakamocchi.jp>
Date:   Tue Dec 9 00:10:39 2014 +0900

    ALSA: dice: Add support for MIDI capture/playback
    
    This commit adds a support for MIDI capture/playback
    
    When MIDI substrams already start streaming and PCM substreams are going to
    join at different sampling rate, streams are stopped once. Then sampling rate
    is changed and streams are restarted.
    
    Signed-off-by: Takashi Sakamoto <o-takashi@sakamocchi.jp>
    Acked-by: Clemens Ladisch <clemens@ladisch.de>
    Signed-off-by: Takashi Iwai <tiwai@suse.de>

diff --git a/sound/firewire/dice/dice.h b/sound/firewire/dice/dice.h
index f30326e22288..ecf5dc862235 100644
--- a/sound/firewire/dice/dice.h
+++ b/sound/firewire/dice/dice.h
@@ -32,6 +32,7 @@
 #include <sound/initval.h>
 #include <sound/pcm.h>
 #include <sound/pcm_params.h>
+#include <sound/rawmidi.h>
 
 #include "../amdtp.h"
 #include "../iso-resources.h"
@@ -183,4 +184,6 @@ int snd_dice_create_hwdep(struct snd_dice *dice);
 
 void snd_dice_create_proc(struct snd_dice *dice);
 
+int snd_dice_create_midi(struct snd_dice *dice);
+
 #endif

commit 8fc01fc0674e3ea7fdd13bd3d138793619227f89
Author: Takashi Sakamoto <o-takashi@sakamocchi.jp>
Date:   Tue Dec 9 00:10:37 2014 +0900

    ALSA: dice: Support for non SYT-Match sampling clock source mode
    
    This commit allows this driver to handle devices with non SYT-Match
    sampling clock source.
    
    When sampling clock source is SYT-Match mode, devices handle
    'presentation timestamp' in received packets and generates sampling clock
    according to the information. In this case, driver is synchronization master
    and must transfer correct value in SYT field of each packets in outgoing
    stream, then the outgoing stream is a master stream.
    
    On the other hand, non SYT-Match mode, devices do this. So drivers must pick
    up the value in SYT field of incoming packets and use the value for outgoing
    stream. Currently firewire-lib module achieve this work.
    
    Furthermore, without SYT-Match and internal clock source, the sampling rate
    should be fixed for the other devices connected to the handled device. This
    commit add a restriction of sampling rate at this situation.
    
    With these implementations, this driver has no need to set clock source.
    This commit remove set function.
    
    Signed-off-by: Takashi Sakamoto <o-takashi@sakamocchi.jp>
    Acked-by: Clemens Ladisch <clemens@ladisch.de>
    Signed-off-by: Takashi Iwai <tiwai@suse.de>

diff --git a/sound/firewire/dice/dice.h b/sound/firewire/dice/dice.h
index a62ee22da5cc..f30326e22288 100644
--- a/sound/firewire/dice/dice.h
+++ b/sound/firewire/dice/dice.h
@@ -152,8 +152,6 @@ static inline int snd_dice_transaction_read_sync(struct snd_dice *dice,
 					 buf, len);
 }
 
-int snd_dice_transaction_set_clock_source(struct snd_dice *dice,
-					  unsigned int source);
 int snd_dice_transaction_get_clock_source(struct snd_dice *dice,
 					  unsigned int *source);
 int snd_dice_transaction_set_rate(struct snd_dice *dice, unsigned int rate);

commit 9a02843caefbc370ef6d5895881101f9436f98da
Author: Takashi Sakamoto <o-takashi@sakamocchi.jp>
Date:   Tue Dec 9 00:10:36 2014 +0900

    ALSA: dice: Add support for duplex streams with synchronization
    
    This commit adds support for AMDTP in-stream. As a result, Dice driver
    supports full duplex streams with synchronization.
    
    AMDTP can transfer timestamps in its packets. By handling the timestamp,
    devices can synchronize to the other devices or drivers on the same bus.
    
    When Dice chipset is 'enabled', it starts streams with correct settings.
    This 'enable' register is global, thus, when a stream is started to run,
    an opposite stream can't start unless turning off 'enable'. Therefore
    a pair of streams must be running. This causes a loss of CPU usage when
    single stream is needed for neither playbacking or capturing.
    
    This commit assumes that playback-only models also have a functionality
    to transmit stream for delivering timestamps.
    
    Currently, sampling clock source is restricted to SYT-Match mode. This is
    improved in followed commit. I note that at SYT-Match mode, Dice can select
    from 4 streams for synchronization but this driver uses the 1st stream only
    for simplicity.
    
    Signed-off-by: Takashi Sakamoto <o-takashi@sakamocchi.jp>
    Acked-by: Clemens Ladisch <clemens@ladisch.de>
    Signed-off-by: Takashi Iwai <tiwai@suse.de>

diff --git a/sound/firewire/dice/dice.h b/sound/firewire/dice/dice.h
index 8be530fe1c34..a62ee22da5cc 100644
--- a/sound/firewire/dice/dice.h
+++ b/sound/firewire/dice/dice.h
@@ -52,18 +52,28 @@ struct snd_dice {
 	unsigned int rsrv_offset;
 
 	unsigned int clock_caps;
+	unsigned int tx_channels[3];
 	unsigned int rx_channels[3];
+	unsigned int tx_midi_ports[3];
 	unsigned int rx_midi_ports[3];
+
 	struct fw_address_handler notification_handler;
 	int owner_generation;
+	u32 notification_bits;
+
+	/* For uapi */
 	int dev_lock_count; /* > 0 driver, < 0 userspace */
 	bool dev_lock_changed;
-	bool global_enabled;
-	struct completion clock_accepted;
 	wait_queue_head_t hwdep_wait;
-	u32 notification_bits;
+
+	/* For streaming */
+	struct fw_iso_resources tx_resources;
 	struct fw_iso_resources rx_resources;
+	struct amdtp_stream tx_stream;
 	struct amdtp_stream rx_stream;
+	bool global_enabled;
+	struct completion clock_accepted;
+	unsigned int substreams_counter;
 };
 
 enum snd_dice_addr_type {
@@ -160,11 +170,11 @@ extern const unsigned int snd_dice_rates[SND_DICE_RATES_COUNT];
 int snd_dice_stream_get_rate_mode(struct snd_dice *dice,
 				  unsigned int rate, unsigned int *mode);
 
-int snd_dice_stream_start(struct snd_dice *dice, unsigned int rate);
-void snd_dice_stream_stop(struct snd_dice *dice);
-int snd_dice_stream_init(struct snd_dice *dice);
-void snd_dice_stream_destroy(struct snd_dice *dice);
-void snd_dice_stream_update(struct snd_dice *dice);
+int snd_dice_stream_start_duplex(struct snd_dice *dice, unsigned int rate);
+void snd_dice_stream_stop_duplex(struct snd_dice *dice);
+int snd_dice_stream_init_duplex(struct snd_dice *dice);
+void snd_dice_stream_destroy_duplex(struct snd_dice *dice);
+void snd_dice_stream_update_duplex(struct snd_dice *dice);
 
 int snd_dice_stream_lock_try(struct snd_dice *dice);
 void snd_dice_stream_lock_release(struct snd_dice *dice);

commit 288a8d0cb04f7715c7c302c8a40bdb227142f3a6
Author: Takashi Sakamoto <o-takashi@sakamocchi.jp>
Date:   Tue Dec 9 00:10:35 2014 +0900

    ALSA: dice: Change the way to start stream
    
    Streaming functionality can start streams when rate is given but currently
    some codes are in PCM functionality.
    
    This commit changes the way to start stream and add some arrangement
    to make it easy to understand the way.
    
    Signed-off-by: Takashi Sakamoto <o-takashi@sakamocchi.jp>
    Acked-by: Clemens Ladisch <clemens@ladisch.de>
    Signed-off-by: Takashi Iwai <tiwai@suse.de>

diff --git a/sound/firewire/dice/dice.h b/sound/firewire/dice/dice.h
index 969189a6604f..8be530fe1c34 100644
--- a/sound/firewire/dice/dice.h
+++ b/sound/firewire/dice/dice.h
@@ -160,9 +160,7 @@ extern const unsigned int snd_dice_rates[SND_DICE_RATES_COUNT];
 int snd_dice_stream_get_rate_mode(struct snd_dice *dice,
 				  unsigned int rate, unsigned int *mode);
 
-int snd_dice_stream_start_packets(struct snd_dice *dice);
-int snd_dice_stream_start(struct snd_dice *dice);
-void snd_dice_stream_stop_packets(struct snd_dice *dice);
+int snd_dice_stream_start(struct snd_dice *dice, unsigned int rate);
 void snd_dice_stream_stop(struct snd_dice *dice);
 int snd_dice_stream_init(struct snd_dice *dice);
 void snd_dice_stream_destroy(struct snd_dice *dice);

commit 04d426a039691bf114997a8af877682fdffcebd7
Author: Takashi Sakamoto <o-takashi@sakamocchi.jp>
Date:   Sat Nov 29 00:59:17 2014 +0900

    ALSA: dice: Split proc interface into a file
    
    This commit adds a file and move some codes related to proc output.
    
    Signed-off-by: Takashi Sakamoto <o-takashi@sakamocchi.jp>
    Signed-off-by: Takashi Iwai <tiwai@suse.de>

diff --git a/sound/firewire/dice/dice.h b/sound/firewire/dice/dice.h
index dcc8c789cd43..969189a6604f 100644
--- a/sound/firewire/dice/dice.h
+++ b/sound/firewire/dice/dice.h
@@ -175,4 +175,6 @@ int snd_dice_create_pcm(struct snd_dice *dice);
 
 int snd_dice_create_hwdep(struct snd_dice *dice);
 
+void snd_dice_create_proc(struct snd_dice *dice);
+
 #endif

commit 19af57b46dda93b34902739673d5f37d8c6d0d5f
Author: Takashi Sakamoto <o-takashi@sakamocchi.jp>
Date:   Sat Nov 29 00:59:16 2014 +0900

    ALSA: dice: Split hwdep functionality into a file
    
    This commit adds a file and move some codes related to hwdep functionality.
    
    This interface is designed for mixer/control application. By using hwdep
    interface, the application can get information about firewire node, can
    lock/unlock kernel streaming and can get notification at starting/stopping
    kernel streaming.
    
    Additionally, this interface give a way to read Dice notification.
    
    Signed-off-by: Takashi Sakamoto <o-takashi@sakamocchi.jp>
    Signed-off-by: Takashi Iwai <tiwai@suse.de>

diff --git a/sound/firewire/dice/dice.h b/sound/firewire/dice/dice.h
index 4d9e55ba895b..dcc8c789cd43 100644
--- a/sound/firewire/dice/dice.h
+++ b/sound/firewire/dice/dice.h
@@ -173,4 +173,6 @@ void snd_dice_stream_lock_release(struct snd_dice *dice);
 
 int snd_dice_create_pcm(struct snd_dice *dice);
 
+int snd_dice_create_hwdep(struct snd_dice *dice);
+
 #endif

commit c50fb91f53626e3bdae3ffebfee586786f970f7c
Author: Takashi Sakamoto <o-takashi@sakamocchi.jp>
Date:   Sat Nov 29 00:59:15 2014 +0900

    ALSA: dice: Split PCM functionality into a file
    
    This commit adds a file and move some codes related to PCM functionality.
    
    Currently PCM playback is supported. PCM capture will be supported in followed
    commits.
    
    Signed-off-by: Takashi Sakamoto <o-takashi@sakamocchi.jp>
    Signed-off-by: Takashi Iwai <tiwai@suse.de>

diff --git a/sound/firewire/dice/dice.h b/sound/firewire/dice/dice.h
index ca4090d881e6..4d9e55ba895b 100644
--- a/sound/firewire/dice/dice.h
+++ b/sound/firewire/dice/dice.h
@@ -171,4 +171,6 @@ void snd_dice_stream_update(struct snd_dice *dice);
 int snd_dice_stream_lock_try(struct snd_dice *dice);
 void snd_dice_stream_lock_release(struct snd_dice *dice);
 
+int snd_dice_create_pcm(struct snd_dice *dice);
+
 #endif

commit 6eb6c81eee2a6270b39ca02a446f3ccece24b6f8
Author: Takashi Sakamoto <o-takashi@sakamocchi.jp>
Date:   Sat Nov 29 00:59:14 2014 +0900

    ALSA: dice: Split stream functionality into a file
    
    This commit adds a file with some helper functions for streaming, and move some
    codes into the file with some arrangements.
    
    Well-known CMP is not used to start/stop streams for Dice chipset. It's
    achieved by writing to specific address. We call this way as 'enable'.
    When devices are 'enabled', streaming starts in registered isochronous channel.
    Some helper functions are already implemented in previous commit.
    
    Basically, the stream is compliant to IEC 61883-6, so-called as AMDTP. But Dice
    has a specific quirk, so called-as 'Dual Wire'. This quirk is applied at
    176.4/192.0kHz. In this mode, each packet includes double number of events than
    number in the specification, and stream runs at a half of sampling rate.
    
    There is another quirk at bus reset. Dice chipset handles drivers' request but
    don't re-enable streaming. So stream should be stopped.
    
    Signed-off-by: Takashi Sakamoto <o-takashi@sakamocchi.jp>
    Signed-off-by: Takashi Iwai <tiwai@suse.de>

diff --git a/sound/firewire/dice/dice.h b/sound/firewire/dice/dice.h
index c756e62ea4ec..ca4090d881e6 100644
--- a/sound/firewire/dice/dice.h
+++ b/sound/firewire/dice/dice.h
@@ -157,4 +157,18 @@ void snd_dice_transaction_destroy(struct snd_dice *dice);
 #define SND_DICE_RATES_COUNT	7
 extern const unsigned int snd_dice_rates[SND_DICE_RATES_COUNT];
 
+int snd_dice_stream_get_rate_mode(struct snd_dice *dice,
+				  unsigned int rate, unsigned int *mode);
+
+int snd_dice_stream_start_packets(struct snd_dice *dice);
+int snd_dice_stream_start(struct snd_dice *dice);
+void snd_dice_stream_stop_packets(struct snd_dice *dice);
+void snd_dice_stream_stop(struct snd_dice *dice);
+int snd_dice_stream_init(struct snd_dice *dice);
+void snd_dice_stream_destroy(struct snd_dice *dice);
+void snd_dice_stream_update(struct snd_dice *dice);
+
+int snd_dice_stream_lock_try(struct snd_dice *dice);
+void snd_dice_stream_lock_release(struct snd_dice *dice);
+
 #endif

commit 7c2d4c0cf5bacb42bc3079e61d299dfaa3dbdde5
Author: Takashi Sakamoto <o-takashi@sakamocchi.jp>
Date:   Sat Nov 29 00:59:13 2014 +0900

    ALSA: dice: Split transaction functionality into a file
    
    This commit adds a file with some helper functions for transaction, and move
    some codes into the file with some arrangements.
    
    For Dice chipset, well-known FCP or AV/C commands are not used to control
    devices. It's achieved by read/write transactions into specific addresses.
    
    Dice's address area is split into 5 areas. Each area has its own role. The
    offset for each area can be got by reading head of the address area. By
    reading these areas, drivers can get to know device status. By writing these
    areas, drivers can change device status.
    
    Dice has a specific mechanism called as 'notification'. When device status is
    changed, Dice devices tells the event by sending transaction. This notification
    is sent to an address which drivers register in advance. But this causes an
    issue to drivers.
    
    To handle the notification, drivers need to allocate its own callback function
    to the address region in host controller. This region is exclusive. For the
    other applications, drivers must give a mechanism to read the received
    notification. For this purpose, Dice driver already implements hwdep interface.
    
    Dice chipset doesn't allow drivers to register several addresses. In this
    reason, when this driver is applied to a device, the other drivers should
    _not_ try to register its own address to the device.
    
    Signed-off-by: Takashi Sakamoto <o-takashi@sakamocchi.jp>
    Signed-off-by: Takashi Iwai <tiwai@suse.de>

diff --git a/sound/firewire/dice/dice.h b/sound/firewire/dice/dice.h
new file mode 100644
index 000000000000..c756e62ea4ec
--- /dev/null
+++ b/sound/firewire/dice/dice.h
@@ -0,0 +1,160 @@
+/*
+ * dice.h - a part of driver for Dice based devices
+ *
+ * Copyright (c) Clemens Ladisch
+ * Copyright (c) 2014 Takashi Sakamoto
+ *
+ * Licensed under the terms of the GNU General Public License, version 2.
+ */
+
+#ifndef SOUND_DICE_H_INCLUDED
+#define SOUND_DICE_H_INCLUDED
+
+#include <linux/compat.h>
+#include <linux/completion.h>
+#include <linux/delay.h>
+#include <linux/device.h>
+#include <linux/firewire.h>
+#include <linux/firewire-constants.h>
+#include <linux/jiffies.h>
+#include <linux/module.h>
+#include <linux/mod_devicetable.h>
+#include <linux/mutex.h>
+#include <linux/slab.h>
+#include <linux/spinlock.h>
+#include <linux/wait.h>
+
+#include <sound/control.h>
+#include <sound/core.h>
+#include <sound/firewire.h>
+#include <sound/hwdep.h>
+#include <sound/info.h>
+#include <sound/initval.h>
+#include <sound/pcm.h>
+#include <sound/pcm_params.h>
+
+#include "../amdtp.h"
+#include "../iso-resources.h"
+#include "../lib.h"
+#include "dice-interface.h"
+
+struct snd_dice {
+	struct snd_card *card;
+	struct fw_unit *unit;
+	spinlock_t lock;
+	struct mutex mutex;
+
+	/* Offsets for sub-addresses */
+	unsigned int global_offset;
+	unsigned int rx_offset;
+	unsigned int tx_offset;
+	unsigned int sync_offset;
+	unsigned int rsrv_offset;
+
+	unsigned int clock_caps;
+	unsigned int rx_channels[3];
+	unsigned int rx_midi_ports[3];
+	struct fw_address_handler notification_handler;
+	int owner_generation;
+	int dev_lock_count; /* > 0 driver, < 0 userspace */
+	bool dev_lock_changed;
+	bool global_enabled;
+	struct completion clock_accepted;
+	wait_queue_head_t hwdep_wait;
+	u32 notification_bits;
+	struct fw_iso_resources rx_resources;
+	struct amdtp_stream rx_stream;
+};
+
+enum snd_dice_addr_type {
+	SND_DICE_ADDR_TYPE_PRIVATE,
+	SND_DICE_ADDR_TYPE_GLOBAL,
+	SND_DICE_ADDR_TYPE_TX,
+	SND_DICE_ADDR_TYPE_RX,
+	SND_DICE_ADDR_TYPE_SYNC,
+	SND_DICE_ADDR_TYPE_RSRV,
+};
+
+int snd_dice_transaction_write(struct snd_dice *dice,
+			       enum snd_dice_addr_type type,
+			       unsigned int offset,
+			       void *buf, unsigned int len);
+int snd_dice_transaction_read(struct snd_dice *dice,
+			      enum snd_dice_addr_type type, unsigned int offset,
+			      void *buf, unsigned int len);
+
+static inline int snd_dice_transaction_write_global(struct snd_dice *dice,
+						    unsigned int offset,
+						    void *buf, unsigned int len)
+{
+	return snd_dice_transaction_write(dice,
+					  SND_DICE_ADDR_TYPE_GLOBAL, offset,
+					  buf, len);
+}
+static inline int snd_dice_transaction_read_global(struct snd_dice *dice,
+						   unsigned int offset,
+						   void *buf, unsigned int len)
+{
+	return snd_dice_transaction_read(dice,
+					 SND_DICE_ADDR_TYPE_GLOBAL, offset,
+					 buf, len);
+}
+static inline int snd_dice_transaction_write_tx(struct snd_dice *dice,
+						unsigned int offset,
+						void *buf, unsigned int len)
+{
+	return snd_dice_transaction_write(dice, SND_DICE_ADDR_TYPE_TX, offset,
+					  buf, len);
+}
+static inline int snd_dice_transaction_read_tx(struct snd_dice *dice,
+					       unsigned int offset,
+					       void *buf, unsigned int len)
+{
+	return snd_dice_transaction_read(dice, SND_DICE_ADDR_TYPE_TX, offset,
+					 buf, len);
+}
+static inline int snd_dice_transaction_write_rx(struct snd_dice *dice,
+						unsigned int offset,
+						void *buf, unsigned int len)
+{
+	return snd_dice_transaction_write(dice, SND_DICE_ADDR_TYPE_RX, offset,
+					  buf, len);
+}
+static inline int snd_dice_transaction_read_rx(struct snd_dice *dice,
+					       unsigned int offset,
+					       void *buf, unsigned int len)
+{
+	return snd_dice_transaction_read(dice, SND_DICE_ADDR_TYPE_RX, offset,
+					 buf, len);
+}
+static inline int snd_dice_transaction_write_sync(struct snd_dice *dice,
+						  unsigned int offset,
+						  void *buf, unsigned int len)
+{
+	return snd_dice_transaction_write(dice, SND_DICE_ADDR_TYPE_SYNC, offset,
+					  buf, len);
+}
+static inline int snd_dice_transaction_read_sync(struct snd_dice *dice,
+						 unsigned int offset,
+						 void *buf, unsigned int len)
+{
+	return snd_dice_transaction_read(dice, SND_DICE_ADDR_TYPE_SYNC, offset,
+					 buf, len);
+}
+
+int snd_dice_transaction_set_clock_source(struct snd_dice *dice,
+					  unsigned int source);
+int snd_dice_transaction_get_clock_source(struct snd_dice *dice,
+					  unsigned int *source);
+int snd_dice_transaction_set_rate(struct snd_dice *dice, unsigned int rate);
+int snd_dice_transaction_get_rate(struct snd_dice *dice, unsigned int *rate);
+int snd_dice_transaction_set_enable(struct snd_dice *dice);
+void snd_dice_transaction_clear_enable(struct snd_dice *dice);
+int snd_dice_transaction_init(struct snd_dice *dice);
+int snd_dice_transaction_reinit(struct snd_dice *dice);
+void snd_dice_transaction_destroy(struct snd_dice *dice);
+
+#define SND_DICE_RATES_COUNT	7
+extern const unsigned int snd_dice_rates[SND_DICE_RATES_COUNT];
+
+#endif
