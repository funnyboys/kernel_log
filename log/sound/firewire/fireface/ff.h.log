commit 1f65e6683267dde67a71c6bfcf71de35916be11a
Author: Takashi Sakamoto <o-takashi@sakamocchi.jp>
Date:   Sun May 10 16:43:01 2020 +0900

    ALSA: fireface: add support for RME Fireface UFX (untested)
    
    Fireface UFX was shipped by RME GmbH in 2010, and now discontinued.
    Although this model has some enhanced feature which Fireface 802
    doesn't have (e.g. on-board USB mass storage device class, configuration
    interface with color display), the functionality relevant to
    packet communication on IEEE 1394 bus seems to be the same as
    Fireface 802 (e.g. available number of channels for PCM frame in
    each sampling transfer frequency).
    
    With the assumption, this commit adds support for Fireface UFX. In ALSA
    fireface driver, these two models are handled as the same one.
    
    Signed-off-by: Takashi Sakamoto <o-takashi@sakamocchi.jp>
    Link: https://lore.kernel.org/r/20200510074301.116224-7-o-takashi@sakamocchi.jp
    Signed-off-by: Takashi Iwai <tiwai@suse.de>

diff --git a/sound/firewire/fireface/ff.h b/sound/firewire/fireface/ff.h
index 1282a57c009f..705e7df4f929 100644
--- a/sound/firewire/fireface/ff.h
+++ b/sound/firewire/fireface/ff.h
@@ -37,6 +37,7 @@
 enum snd_ff_unit_version {
 	SND_FF_UNIT_VERSION_FF800	= 0x000001,
 	SND_FF_UNIT_VERSION_FF400	= 0x000002,
+	SND_FF_UNIT_VERSION_UFX		= 0x000003,
 	SND_FF_UNIT_VERSION_UCX		= 0x000004,
 	SND_FF_UNIT_VERSION_802		= 0x000005,
 };

commit 062bb452b078ba481d856e1aca176e16b8b1466d
Author: Takashi Sakamoto <o-takashi@sakamocchi.jp>
Date:   Sun May 10 16:43:00 2020 +0900

    ALSA: fireface: add support for RME FireFace 802
    
    Fireface 802 was shipped by RME GmbH in 2014. This model supports later
    protocol for management of isochronous communication and synchronization
    of sampling transmission frequency.
    
    This model consists of below ICs:
     * TI TSB41AB2
     * Xilinx Spartan-6 FPGA XC6SLX16
     * TI TMS320 C6747
     * SMSC USB3250
    
    Especially, this model just supports IEEE 1394a, against its name which
    evokes Fireface 800.
    
    This commit adds support for Fireface 802 (tested). Userspace applications
    can transfer PCM frames and MIDI messages via ALSA PCM/Rawmidi interface.
    I note that 4 channels for ADAt1 and ADAT2 are disabled at higher sampling
    transfer frequency since isochronous resources reservation fails due to
    bandwidth limitation of IEEE 1394a.
    
    The value read from LATTER_SYNC_STATUS register is slightly different
    from the one of Fireface UCX. The higher 4 bits and lower 4 bits are
    swapped within the same byte.
    
    Without any assist of userspace application, transmitted MIDI messages
    from the device are not going to be processed. For detail, please refer
    to my comment in code of latter protocol.
    
    $ python crpp < /sys/bus/firewire/devices/fw1/config_rom
                   ROM header and bus information block
                   -----------------------------------------------------------------
    400  0404ffff  bus_info_length 4, crc_length 4, crc 65535 (should be 26805)
    404  31333934  bus_name "1394"
    408  20008000  irmc 0, cmc 0, isc 1, bmc 0, cyc_clk_acc 0, max_rec 8 (512)
    40c  000a3504  company_id 000a35     |
    410  38077423  device_id 0438077423  | EUI-64 000a350438077423
    
                   root directory
                   -----------------------------------------------------------------
    414  0005ffff  directory_length 5, crc 65535 (should be 9514)
    418  0c0083c0  node capabilities per IEEE 1394
    41c  03000a35  vendor
    420  8100000b  --> descriptor leaf at 44c
    424  8d000007  --> eui-64 leaf at 440
    428  d1000001  --> unit directory at 42c
    
                   unit directory at 42c
                   -----------------------------------------------------------------
    42c  0004ffff  directory_length 4, crc 65535 (should be 45134)
    430  12000a35  specifier id
    434  13000005  version
    438  17101800  model
    43c  81000008  --> descriptor leaf at 45c
    
                   eui-64 leaf at 440
                   -----------------------------------------------------------------
    440  0002ffff  leaf_length 2, crc 65535 (should be 60131)
    444  000a3504  company_id 000a35     |
    448  38077423  device_id 0438077423  | EUI-64 000a350438077423
    
                   descriptor leaf at 44c
                   -----------------------------------------------------------------
    44c  0003ffff  leaf_length 3, crc 65535 (should be 469)
    450  00000000  textual descriptor
    454  00000000  minimal ASCII
    458  524d4521  "RME!"
    
                   descriptor leaf at 45c
                   -----------------------------------------------------------------
    45c  0005ffff  leaf_length 5, crc 65535 (should be 10561)
    460  00000000  textual descriptor
    464  00000000  minimal ASCII
    468  46697265  "Fire"
    46c  66616365  "face"
    470  20383032  " 802"
    
    Signed-off-by: Takashi Sakamoto <o-takashi@sakamocchi.jp>
    Link: https://lore.kernel.org/r/20200510074301.116224-6-o-takashi@sakamocchi.jp
    Signed-off-by: Takashi Iwai <tiwai@suse.de>

diff --git a/sound/firewire/fireface/ff.h b/sound/firewire/fireface/ff.h
index 0c4fe7cff84d..1282a57c009f 100644
--- a/sound/firewire/fireface/ff.h
+++ b/sound/firewire/fireface/ff.h
@@ -38,6 +38,7 @@ enum snd_ff_unit_version {
 	SND_FF_UNIT_VERSION_FF800	= 0x000001,
 	SND_FF_UNIT_VERSION_FF400	= 0x000002,
 	SND_FF_UNIT_VERSION_UCX		= 0x000004,
+	SND_FF_UNIT_VERSION_802		= 0x000005,
 };
 
 enum snd_ff_stream_mode {

commit 782222bab83a31f70c427b59587ada963d6c59c3
Author: Takashi Sakamoto <o-takashi@sakamocchi.jp>
Date:   Sun May 10 16:42:59 2020 +0900

    ALSA: fireface: code refactoring to decide name of sound card
    
    This commit uses enumeration constants as index of table for the
    list of name of sound card.
    
    Signed-off-by: Takashi Sakamoto <o-takashi@sakamocchi.jp>
    Link: https://lore.kernel.org/r/20200510074301.116224-5-o-takashi@sakamocchi.jp
    Signed-off-by: Takashi Iwai <tiwai@suse.de>

diff --git a/sound/firewire/fireface/ff.h b/sound/firewire/fireface/ff.h
index 62ad921c3706..0c4fe7cff84d 100644
--- a/sound/firewire/fireface/ff.h
+++ b/sound/firewire/fireface/ff.h
@@ -49,8 +49,6 @@ enum snd_ff_stream_mode {
 
 struct snd_ff_protocol;
 struct snd_ff_spec {
-	const char *const name;
-
 	const unsigned int pcm_capture_channels[SND_FF_STREAM_MODE_COUNT];
 	const unsigned int pcm_playback_channels[SND_FF_STREAM_MODE_COUNT];
 
@@ -72,6 +70,7 @@ struct snd_ff {
 	bool registered;
 	struct delayed_work dwork;
 
+	enum snd_ff_unit_version unit_version;
 	const struct snd_ff_spec *spec;
 
 	/* To handle MIDI tx. */

commit c52f232e11077555cdd515f25376afa54ac36296
Author: Takashi Sakamoto <o-takashi@sakamocchi.jp>
Date:   Sun May 10 16:42:58 2020 +0900

    ALSA: fireface: code refactoring to add enumeration constants for model identification
    
    In RME fireface series, version field of unit directory in configuration
    ROM is used to distinguish each model. The value of field is known and
    it's better to use enumeration constants for code representation.
    
    This commit adds enumeration constants for model identification.
    
    Signed-off-by: Takashi Sakamoto <o-takashi@sakamocchi.jp>
    Link: https://lore.kernel.org/r/20200510074301.116224-4-o-takashi@sakamocchi.jp
    Signed-off-by: Takashi Iwai <tiwai@suse.de>

diff --git a/sound/firewire/fireface/ff.h b/sound/firewire/fireface/ff.h
index dc7a20f75983..62ad921c3706 100644
--- a/sound/firewire/fireface/ff.h
+++ b/sound/firewire/fireface/ff.h
@@ -34,6 +34,12 @@
 #define SND_FF_IN_MIDI_PORTS		2
 #define SND_FF_OUT_MIDI_PORTS		2
 
+enum snd_ff_unit_version {
+	SND_FF_UNIT_VERSION_FF800	= 0x000001,
+	SND_FF_UNIT_VERSION_FF400	= 0x000002,
+	SND_FF_UNIT_VERSION_UCX		= 0x000004,
+};
+
 enum snd_ff_stream_mode {
 	SND_FF_STREAM_MODE_LOW = 0,
 	SND_FF_STREAM_MODE_MID,

commit 4de3eb062e2daf04646d23417a39b8843df4508b
Author: Takashi Sakamoto <o-takashi@sakamocchi.jp>
Date:   Fri Oct 18 00:54:21 2019 +0900

    ALSA: fireface: share PCM buffer size for both direction
    
    This commit allows ALSA fireface driver to share PCM buffer size for
    both capture and playback PCM substream. When AMDTP domain starts for
    one of the PCM substream, buffer size of the PCM substream is stores to
    AMDTP domain structure. Some AMDTP streams have already run with the
    buffer size when another PCM substream starts, therefore the PCM
    substream has a constraint to its buffer size.
    
    Signed-off-by: Takashi Sakamoto <o-takashi@sakamocchi.jp>
    Link: https://lore.kernel.org/r/20191017155424.885-10-o-takashi@sakamocchi.jp
    Signed-off-by: Takashi Iwai <tiwai@suse.de>

diff --git a/sound/firewire/fireface/ff.h b/sound/firewire/fireface/ff.h
index 970d4ae571ee..dc7a20f75983 100644
--- a/sound/firewire/fireface/ff.h
+++ b/sound/firewire/fireface/ff.h
@@ -140,7 +140,8 @@ int snd_ff_stream_get_multiplier_mode(enum cip_sfc sfc,
 int snd_ff_stream_init_duplex(struct snd_ff *ff);
 void snd_ff_stream_destroy_duplex(struct snd_ff *ff);
 int snd_ff_stream_reserve_duplex(struct snd_ff *ff, unsigned int rate,
-				 unsigned int frames_per_period);
+				 unsigned int frames_per_period,
+				 unsigned int frames_per_buffer);
 int snd_ff_stream_start_duplex(struct snd_ff *ff, unsigned int rate);
 void snd_ff_stream_stop_duplex(struct snd_ff *ff);
 void snd_ff_stream_update_duplex(struct snd_ff *ff);

commit 9d9ff58c2f45f2bf926f7ee7c70bcc01bad4c0e8
Author: Takashi Sakamoto <o-takashi@sakamocchi.jp>
Date:   Mon Oct 7 20:05:24 2019 +0900

    ALSA: fireface: register the size of PCM period to AMDTP domain
    
    This commit is a preparation to share the size of PCM period between
    PCM substreams on AMDTP streams in the same domain. At this time,
    the size of PCM period in PCM substream which starts AMDTP streams in the
    same domain is recorded.
    
    Signed-off-by: Takashi Sakamoto <o-takashi@sakamocchi.jp>
    Link: https://lore.kernel.org/r/20191007110532.30270-10-o-takashi@sakamocchi.jp
    Signed-off-by: Takashi Iwai <tiwai@suse.de>

diff --git a/sound/firewire/fireface/ff.h b/sound/firewire/fireface/ff.h
index b4c22ca6079e..970d4ae571ee 100644
--- a/sound/firewire/fireface/ff.h
+++ b/sound/firewire/fireface/ff.h
@@ -139,7 +139,8 @@ int snd_ff_stream_get_multiplier_mode(enum cip_sfc sfc,
 				      enum snd_ff_stream_mode *mode);
 int snd_ff_stream_init_duplex(struct snd_ff *ff);
 void snd_ff_stream_destroy_duplex(struct snd_ff *ff);
-int snd_ff_stream_reserve_duplex(struct snd_ff *ff, unsigned int rate);
+int snd_ff_stream_reserve_duplex(struct snd_ff *ff, unsigned int rate,
+				 unsigned int frames_per_period);
 int snd_ff_stream_start_duplex(struct snd_ff *ff, unsigned int rate);
 void snd_ff_stream_stop_duplex(struct snd_ff *ff);
 void snd_ff_stream_update_duplex(struct snd_ff *ff);

commit c9a9ce899cd1798f054f264043bddc021b47cb1e
Author: Takashi Sakamoto <o-takashi@sakamocchi.jp>
Date:   Sun Aug 4 15:21:37 2019 +0900

    ALSA: fireface: support AMDTP domain
    
    This commit adds AMDTP domain support for ALSA fireface driver.
    
    Signed-off-by: Takashi Sakamoto <o-takashi@sakamocchi.jp>
    Signed-off-by: Takashi Iwai <tiwai@suse.de>

diff --git a/sound/firewire/fireface/ff.h b/sound/firewire/fireface/ff.h
index 36dd0c75b9f7..b4c22ca6079e 100644
--- a/sound/firewire/fireface/ff.h
+++ b/sound/firewire/fireface/ff.h
@@ -91,6 +91,8 @@ struct snd_ff {
 	int dev_lock_count;
 	bool dev_lock_changed;
 	wait_queue_head_t hwdep_wait;
+
+	struct amdtp_domain domain;
 };
 
 enum snd_ff_clock_src {

commit 3c53c6255d598db7084c5c3d7553d7200e857818
Merge: b89b889a326a a98429acadef
Author: Takashi Iwai <tiwai@suse.de>
Date:   Mon Jul 8 14:45:20 2019 +0200

    Merge tag 'asoc-v5.3' of https://git.kernel.org/pub/scm/linux/kernel/git/broonie/sound into for-linus
    
    ASoC: Updates for v5.3
    
    This is a very big update, mainly thanks to Morimoto-san's refactoring
    work and some fairly large new drivers.
    
     - Lots more work on moving towards a component based framework from
       Morimoto-san.
     - Support for force disconnecting muxes from Jerome Brunet.
     - New drivers for Cirrus Logic CS47L35, CS47L85 and CS47L90, Conexant
       CX2072X, Realtek RT1011 and RT1308.
    
    Signed-off-by: Takashi Iwai <tiwai@suse.de>

commit af26bacc1c5ace50645b29aea148c6143753edd4
Author: Takashi Sakamoto <o-takashi@sakamocchi.jp>
Date:   Tue Jun 18 22:26:16 2019 +0900

    ALSA: fireface: unify stop and release method for duplex streams
    
    >From callbacks for pcm and rawmidi interfaces, the functions to stop
    and release duplex streams are called at the same time. This commit
    merges the two functions.
    
    Signed-off-by: Takashi Sakamoto <o-takashi@sakamocchi.jp>
    Signed-off-by: Takashi Iwai <tiwai@suse.de>

diff --git a/sound/firewire/fireface/ff.h b/sound/firewire/fireface/ff.h
index fe5739ee1c88..9b52c368f6de 100644
--- a/sound/firewire/fireface/ff.h
+++ b/sound/firewire/fireface/ff.h
@@ -139,7 +139,6 @@ int snd_ff_stream_get_multiplier_mode(enum cip_sfc sfc,
 int snd_ff_stream_init_duplex(struct snd_ff *ff);
 void snd_ff_stream_destroy_duplex(struct snd_ff *ff);
 int snd_ff_stream_reserve_duplex(struct snd_ff *ff, unsigned int rate);
-void snd_ff_stream_release_duplex(struct snd_ff *ff);
 int snd_ff_stream_start_duplex(struct snd_ff *ff, unsigned int rate);
 void snd_ff_stream_stop_duplex(struct snd_ff *ff);
 void snd_ff_stream_update_duplex(struct snd_ff *ff);

commit 55162d2bb0e86b2d0f87a82713b1e7ee761bf8a8
Author: Takashi Sakamoto <o-takashi@sakamocchi.jp>
Date:   Sun Jun 2 16:12:56 2019 +0900

    ALSA: fireface: reserve/release isochronous resources in pcm.hw_params/hw_free callbacks
    
    Once allocated, isochronous resources are available for packet
    streaming, even if the streaming is cancelled. For this reason,
    current implementation handles allocation of the resources and
    starting packet streaming at the same time. However, this brings
    complicated procedure to start packet streaming.
    
    This commit separates the allocation and starting. The allocation is
    done in pcm.hw_params callback and available till pcm.hw_free callback.
    Even if any XRUN occurs, pcm.prepare callback is done to restart
    packet streaming for allocated the resources.
    
    There are two points to stop packet streaming; in pcm.hw_params and
    pcm.prepare callbacks.
    
    Signed-off-by: Takashi Sakamoto <o-takashi@sakamocchi.jp>
    Signed-off-by: Takashi Iwai <tiwai@suse.de>

diff --git a/sound/firewire/fireface/ff.h b/sound/firewire/fireface/ff.h
index c478103388a2..fe5739ee1c88 100644
--- a/sound/firewire/fireface/ff.h
+++ b/sound/firewire/fireface/ff.h
@@ -138,6 +138,8 @@ int snd_ff_stream_get_multiplier_mode(enum cip_sfc sfc,
 				      enum snd_ff_stream_mode *mode);
 int snd_ff_stream_init_duplex(struct snd_ff *ff);
 void snd_ff_stream_destroy_duplex(struct snd_ff *ff);
+int snd_ff_stream_reserve_duplex(struct snd_ff *ff, unsigned int rate);
+void snd_ff_stream_release_duplex(struct snd_ff *ff);
 int snd_ff_stream_start_duplex(struct snd_ff *ff, unsigned int rate);
 void snd_ff_stream_stop_duplex(struct snd_ff *ff);
 void snd_ff_stream_update_duplex(struct snd_ff *ff);

commit 47b87c8ed072b6d0fd54f1751ad0184e7c8e20e5
Author: Takashi Sakamoto <o-takashi@sakamocchi.jp>
Date:   Sun Jun 2 16:12:52 2019 +0900

    ALSA: fireface: add protocol-specific operation to allocate isochronous resources
    
    This commit is a part of preparation to perform allocation/release
    of isochronous channels in pcm.hw_params/hw_free callbacks.
    
    In ALSA fireface driver, the allocation of isochronous resources is
    programmed in each implementation of protocol. This commit adds
    protocol-specific operation for the allocation separated from
    the operation to begin session.
    
    Signed-off-by: Takashi Sakamoto <o-takashi@sakamocchi.jp>
    Signed-off-by: Takashi Iwai <tiwai@suse.de>

diff --git a/sound/firewire/fireface/ff.h b/sound/firewire/fireface/ff.h
index ed8fea0ff5e1..c478103388a2 100644
--- a/sound/firewire/fireface/ff.h
+++ b/sound/firewire/fireface/ff.h
@@ -113,6 +113,7 @@ struct snd_ff_protocol {
 	int (*get_clock)(struct snd_ff *ff, unsigned int *rate,
 			 enum snd_ff_clock_src *src);
 	int (*switch_fetching_mode)(struct snd_ff *ff, bool enable);
+	int (*allocate_resources)(struct snd_ff *ff, unsigned int rate);
 	int (*begin_session)(struct snd_ff *ff, unsigned int rate);
 	void (*finish_session)(struct snd_ff *ff);
 	void (*dump_status)(struct snd_ff *ff, struct snd_info_buffer *buffer);

commit da607e1969ffbf7a1ba06280ade768f4f5fee8c3
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Wed May 29 16:57:59 2019 -0700

    treewide: Replace GPLv2 boilerplate/reference with SPDX - rule 345
    
    Based on 1 normalized pattern(s):
    
      licensed under the terms of the gnu general public license version 2
    
    extracted by the scancode license scanner the SPDX license identifier
    
      GPL-2.0-only
    
    has been chosen to replace the boilerplate/reference in 88 file(s).
    
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Reviewed-by: Alexios Zavras <alexios.zavras@intel.com>
    Reviewed-by: Allison Randal <allison@lohutok.net>
    Cc: linux-spdx@vger.kernel.org
    Link: https://lkml.kernel.org/r/20190530000437.521539229@linutronix.de
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/sound/firewire/fireface/ff.h b/sound/firewire/fireface/ff.h
index ed8fea0ff5e1..7fac241c2486 100644
--- a/sound/firewire/fireface/ff.h
+++ b/sound/firewire/fireface/ff.h
@@ -1,9 +1,8 @@
+/* SPDX-License-Identifier: GPL-2.0-only */
 /*
  * ff.h - a part of driver for RME Fireface series
  *
  * Copyright (c) 2015-2017 Takashi Sakamoto
- *
- * Licensed under the terms of the GNU General Public License, version 2.
  */
 
 #ifndef SOUND_FIREFACE_H_INCLUDED

commit f0f9f497d44e2f696b4e16c41f3eaa13a009f22d
Author: Takashi Sakamoto <o-takashi@sakamocchi.jp>
Date:   Tue Jan 22 22:17:05 2019 +0900

    ALSA: fireface: support rx MIDI functionality for Fireface UCX
    
    In latter model of Fireface series, asynchronous transaction includes
    a prefix byte to indicate the way to decode included MIDI bytes.
    
    Upper 4 bits of the prefix byte indicates port number, and the rest 4
    bits indicate the way to decode rest of bytes for MIDI messages.
    
    Basically the rest bits indicates the number of bytes for MIDI message.
    However, if the last byte of each MIDi message is included, the rest
    bits are 0xf. For example:
    
    message: f0 00 00 66 14 20 00 00 f7
    offset: content (big endian, port 0)
     '0030: 0x02f00000
     '0030: 0x03006614
     '0030: 0x03200000
     '0030: 0x0ff70000
    
    This commit supports encoding scheme for the above and allows
    applications to transfer MIDI messages via ALSA rawmidi interface.
    An unused member (running_status) is reused to keep state of
    transmission of system exclusive messages.
    
    For your information, this is a dump of config rom.
    
    $ sudo ./hinawa-config-rom-printer /dev/fw1
    { 'bus-info': { 'bmc': False,
                    'chip_ID': 13225063715,
                    'cmc': False,
                    'cyc_clk_acc': 0,
                    'imc': False,
                    'isc': True,
                    'max_rec': 512,
                    'name': '1394',
                    'node_vendor_ID': 2613},
      'root-directory': [ [ 'NODE_CAPABILITIES',
                            { 'addressing': {'64': True, 'fix': True, 'prv': False},
                              'misc': {'int': False, 'ms': False, 'spt': True},
                              'state': { 'atn': False,
                                         'ded': False,
                                         'drq': True,
                                         'elo': False,
                                         'init': False,
                                         'lst': True,
                                         'off': False},
                              'testing': {'bas': False, 'ext': False}}],
                          ['VENDOR', 2613],
                          ['DESCRIPTOR', 'RME!'],
                          ['EUI_64', 2873037108442403],
                          [ 'UNIT',
                            [ ['SPECIFIER_ID', 2613],
                              ['VERSION', 4],
                              ['MODEL', 1054720],
                              ['DESCRIPTOR', 'Fireface UCX']]]]}
    
    Signed-off-by: Takashi Sakamoto <o-takashi@sakamocchi.jp>
    Signed-off-by: Takashi Iwai <tiwai@suse.de>

diff --git a/sound/firewire/fireface/ff.h b/sound/firewire/fireface/ff.h
index e52ad11803e0..ed8fea0ff5e1 100644
--- a/sound/firewire/fireface/ff.h
+++ b/sound/firewire/fireface/ff.h
@@ -75,7 +75,7 @@ struct snd_ff {
 
 	/* TO handle MIDI rx. */
 	struct snd_rawmidi_substream *rx_midi_substreams[SND_FF_OUT_MIDI_PORTS];
-	u8 running_status[SND_FF_OUT_MIDI_PORTS];
+	bool on_sysex[SND_FF_OUT_MIDI_PORTS];
 	__le32 msg_buf[SND_FF_OUT_MIDI_PORTS][SND_FF_MAXIMIM_MIDI_QUADS];
 	struct work_struct rx_midi_work[SND_FF_OUT_MIDI_PORTS];
 	struct fw_transaction transactions[SND_FF_OUT_MIDI_PORTS];

commit 82b6297b4434d1bc523f3470be4875ab185c6663
Author: Takashi Sakamoto <o-takashi@sakamocchi.jp>
Date:   Tue Jan 22 22:17:04 2019 +0900

    ALSA: fireface: add protocol-specific operation to fill transaction buffer with MIDI messages
    
    Between former and latter models, content of asynchronous transaction
    for MIDI messages from driver to device is different.
    
    This commit is a preparation to support latter models. A protocol-specific
    operation is added to encode MIDI messages to the transaction.
    
    Signed-off-by: Takashi Sakamoto <o-takashi@sakamocchi.jp>
    Signed-off-by: Takashi Iwai <tiwai@suse.de>

diff --git a/sound/firewire/fireface/ff.h b/sound/firewire/fireface/ff.h
index edad75a4b260..e52ad11803e0 100644
--- a/sound/firewire/fireface/ff.h
+++ b/sound/firewire/fireface/ff.h
@@ -107,6 +107,9 @@ enum snd_ff_clock_src {
 struct snd_ff_protocol {
 	void (*handle_midi_msg)(struct snd_ff *ff, unsigned int offset,
 				__le32 *buf, size_t length);
+	int (*fill_midi_msg)(struct snd_ff *ff,
+			     struct snd_rawmidi_substream *substream,
+			     unsigned int port);
 	int (*get_clock)(struct snd_ff *ff, unsigned int *rate,
 			 enum snd_ff_clock_src *src);
 	int (*switch_fetching_mode)(struct snd_ff *ff, bool enable);

commit 481e09ac9a82644af697884cc522b76b4dd07e4d
Author: Takashi Sakamoto <o-takashi@sakamocchi.jp>
Date:   Tue Jan 22 22:17:03 2019 +0900

    ALSA: fireface: add model-dependent parameter for address to receive async transaction for MIDI messages
    
    Between former and latter models, destination address to receive
    asynchronous transactions for MIDI messages is different.
    
    This commit adds model-dependent parameter for the addresses.
    
    Signed-off-by: Takashi Sakamoto <o-takashi@sakamocchi.jp>
    Signed-off-by: Takashi Iwai <tiwai@suse.de>

diff --git a/sound/firewire/fireface/ff.h b/sound/firewire/fireface/ff.h
index b86ca4fb7d9b..edad75a4b260 100644
--- a/sound/firewire/fireface/ff.h
+++ b/sound/firewire/fireface/ff.h
@@ -55,6 +55,7 @@ struct snd_ff_spec {
 	const struct snd_ff_protocol *protocol;
 	u64 midi_high_addr;
 	u8 midi_addr_range;
+	u64 midi_rx_addrs[SND_FF_OUT_MIDI_PORTS];
 };
 
 struct snd_ff {

commit 900896771a2f7ba126194911c58dc095fc0dd3d7
Author: Takashi Sakamoto <o-takashi@sakamocchi.jp>
Date:   Tue Jan 22 22:17:01 2019 +0900

    ALSA: fireface: add model-dependent parameter for address range to receive async transaction
    
    In Fireface series, drivers can register destination address for
    asynchronous transaction which transfers MIDI messages from device.
    
    In former models, all of the transactions arrive at the registered
    address without any offset. In latter models, each of the transaction
    arrives at the registered address with sequential offset within 0x00
    to 0x7f. This seems to be for discontinuity detection.
    
    This commit adds model-dependent member for the address range.
    
    Signed-off-by: Takashi Sakamoto <o-takashi@sakamocchi.jp>
    Signed-off-by: Takashi Iwai <tiwai@suse.de>

diff --git a/sound/firewire/fireface/ff.h b/sound/firewire/fireface/ff.h
index ddcffb8d85c6..b86ca4fb7d9b 100644
--- a/sound/firewire/fireface/ff.h
+++ b/sound/firewire/fireface/ff.h
@@ -54,6 +54,7 @@ struct snd_ff_spec {
 
 	const struct snd_ff_protocol *protocol;
 	u64 midi_high_addr;
+	u8 midi_addr_range;
 };
 
 struct snd_ff {

commit 6c644e4e954ddae26880d82e7aa4f551662cdae3
Author: Takashi Sakamoto <o-takashi@sakamocchi.jp>
Date:   Tue Jan 22 22:17:00 2019 +0900

    ALSA: fireface: change prototype of handler for async transaction with MIDI messages
    
    In a series of Fireface, devices transfer asynchronous transaction with
    MIDI messages. In the transaction, content is different depending on
    models. ALSA fireface driver has protocol-dependent handler to pick up
    MIDI messages from the content.
    
    In latter models of the series, the transaction is transferred to range
    of address sequentially. This seems to check continuity of transferred
    messages.
    
    This commit changes prototype of the handler to receive offset of
    address for received transactions.
    
    Signed-off-by: Takashi Sakamoto <o-takashi@sakamocchi.jp>
    Signed-off-by: Takashi Iwai <tiwai@suse.de>

diff --git a/sound/firewire/fireface/ff.h b/sound/firewire/fireface/ff.h
index 8aea7920b57f..ddcffb8d85c6 100644
--- a/sound/firewire/fireface/ff.h
+++ b/sound/firewire/fireface/ff.h
@@ -103,7 +103,8 @@ enum snd_ff_clock_src {
 };
 
 struct snd_ff_protocol {
-	void (*handle_midi_msg)(struct snd_ff *ff, __le32 *buf, size_t length);
+	void (*handle_midi_msg)(struct snd_ff *ff, unsigned int offset,
+				__le32 *buf, size_t length);
 	int (*get_clock)(struct snd_ff *ff, unsigned int *rate,
 			 enum snd_ff_clock_src *src);
 	int (*switch_fetching_mode)(struct snd_ff *ff, bool enable);

commit fd1cc9de64c2ca6c2b5b9061421580a22bfac023
Author: Takashi Sakamoto <o-takashi@sakamocchi.jp>
Date:   Sun Jan 20 17:25:53 2019 +0900

    ALSA: fireface: add support for Fireface UCX
    
    Fireface UFX was shipped by RME GmbH in 2012. This model supports later
    protocol for management of isochronous communication and synchronization
    of sampling transmission frequency.
    
    This commit adds support for the model. At present, it's not clear how
    to encode MIDI messages and decide destination address for asynchronous
    transaction, thus this commit adds support for isochronous communication
    for PCM frames only.
    
    Signed-off-by: Takashi Sakamoto <o-takashi@sakamocchi.jp>
    Signed-off-by: Takashi Iwai <tiwai@suse.de>

diff --git a/sound/firewire/fireface/ff.h b/sound/firewire/fireface/ff.h
index cdb16e931c31..8aea7920b57f 100644
--- a/sound/firewire/fireface/ff.h
+++ b/sound/firewire/fireface/ff.h
@@ -114,6 +114,7 @@ struct snd_ff_protocol {
 
 extern const struct snd_ff_protocol snd_ff_protocol_ff800;
 extern const struct snd_ff_protocol snd_ff_protocol_ff400;
+extern const struct snd_ff_protocol snd_ff_protocol_latter;
 
 int snd_ff_transaction_register(struct snd_ff *ff);
 int snd_ff_transaction_reregister(struct snd_ff *ff);

commit 4c4871a8055a1ff95fbd415d426d7e1d4b763edb
Author: Takashi Sakamoto <o-takashi@sakamocchi.jp>
Date:   Sun Jan 20 17:25:52 2019 +0900

    ALSA: fireface: code refactoring to parse of clock configuration
    
    A procedure to retrieve clock configuration is used by two callers.
    Each of caller has duplicated code to parse bits.
    
    This commit adds refactoring to remove the duplicated code.
    
    Signed-off-by: Takashi Sakamoto <o-takashi@sakamocchi.jp>
    Signed-off-by: Takashi Iwai <tiwai@suse.de>

diff --git a/sound/firewire/fireface/ff.h b/sound/firewire/fireface/ff.h
index 1de2f5ec26fd..cdb16e931c31 100644
--- a/sound/firewire/fireface/ff.h
+++ b/sound/firewire/fireface/ff.h
@@ -139,6 +139,7 @@ int snd_ff_stream_lock_try(struct snd_ff *ff);
 void snd_ff_stream_lock_release(struct snd_ff *ff);
 
 void snd_ff_proc_init(struct snd_ff *ff);
+const char *snd_ff_proc_get_clk_label(enum snd_ff_clock_src src);
 
 int snd_ff_create_midi_devices(struct snd_ff *ff);
 

commit b1d0cb0ae511c0558155c4d4cbb852c9e53bfb67
Author: Takashi Sakamoto <o-takashi@sakamocchi.jp>
Date:   Sun Jan 20 17:25:50 2019 +0900

    ALSA: fireface: add protocol-dependent operation to get clock status
    
    This commit adds a member for a callback function to get clock status
    to former protocol.
    
    Signed-off-by: Takashi Sakamoto <o-takashi@sakamocchi.jp>
    Signed-off-by: Takashi Iwai <tiwai@suse.de>

diff --git a/sound/firewire/fireface/ff.h b/sound/firewire/fireface/ff.h
index 29f55518bf85..1de2f5ec26fd 100644
--- a/sound/firewire/fireface/ff.h
+++ b/sound/firewire/fireface/ff.h
@@ -35,8 +35,6 @@
 #define SND_FF_IN_MIDI_PORTS		2
 #define SND_FF_OUT_MIDI_PORTS		2
 
-#define SND_FF_REG_CLOCK_CONFIG		0x0000801c0004ull
-
 enum snd_ff_stream_mode {
 	SND_FF_STREAM_MODE_LOW = 0,
 	SND_FF_STREAM_MODE_MID,
@@ -106,6 +104,8 @@ enum snd_ff_clock_src {
 
 struct snd_ff_protocol {
 	void (*handle_midi_msg)(struct snd_ff *ff, __le32 *buf, size_t length);
+	int (*get_clock)(struct snd_ff *ff, unsigned int *rate,
+			 enum snd_ff_clock_src *src);
 	int (*switch_fetching_mode)(struct snd_ff *ff, bool enable);
 	int (*begin_session)(struct snd_ff *ff, unsigned int rate);
 	void (*finish_session)(struct snd_ff *ff);
@@ -115,8 +115,6 @@ struct snd_ff_protocol {
 extern const struct snd_ff_protocol snd_ff_protocol_ff800;
 extern const struct snd_ff_protocol snd_ff_protocol_ff400;
 
-int snd_ff_transaction_get_clock(struct snd_ff *ff, unsigned int *rate,
-				 enum snd_ff_clock_src *src);
 int snd_ff_transaction_register(struct snd_ff *ff);
 int snd_ff_transaction_reregister(struct snd_ff *ff);
 void snd_ff_transaction_unregister(struct snd_ff *ff);

commit ae3053c28b86f4f9d4480f6d3ac27f43d8e657ef
Author: Takashi Sakamoto <o-takashi@sakamocchi.jp>
Date:   Sun Jan 20 17:25:49 2019 +0900

    ALSA: fireface: add protocol-dependent operation to switch mode to fetch PCM frame
    
    This commit adds a member for a callback function to switch frame
    fetching mode to former protocol.
    
    Signed-off-by: Takashi Sakamoto <o-takashi@sakamocchi.jp>
    Signed-off-by: Takashi Iwai <tiwai@suse.de>

diff --git a/sound/firewire/fireface/ff.h b/sound/firewire/fireface/ff.h
index 3f22b8d84e36..29f55518bf85 100644
--- a/sound/firewire/fireface/ff.h
+++ b/sound/firewire/fireface/ff.h
@@ -35,8 +35,6 @@
 #define SND_FF_IN_MIDI_PORTS		2
 #define SND_FF_OUT_MIDI_PORTS		2
 
-/* For block write request. */
-#define SND_FF_REG_FETCH_PCM_FRAMES	0x0000801c0000ull
 #define SND_FF_REG_CLOCK_CONFIG		0x0000801c0004ull
 
 enum snd_ff_stream_mode {
@@ -108,6 +106,7 @@ enum snd_ff_clock_src {
 
 struct snd_ff_protocol {
 	void (*handle_midi_msg)(struct snd_ff *ff, __le32 *buf, size_t length);
+	int (*switch_fetching_mode)(struct snd_ff *ff, bool enable);
 	int (*begin_session)(struct snd_ff *ff, unsigned int rate);
 	void (*finish_session)(struct snd_ff *ff);
 	void (*dump_status)(struct snd_ff *ff, struct snd_info_buffer *buffer);

commit e9e29cf8522093f146ab2c23194eee78dd84fa4e
Author: Takashi Sakamoto <o-takashi@sakamocchi.jp>
Date:   Sun Jan 20 17:25:48 2019 +0900

    ALSA: fireface: add protocol-dependent operation to dump status
    
    This commit adds a member for a callback function to dump status and
    move existing code to former protocol.
    
    Signed-off-by: Takashi Sakamoto <o-takashi@sakamocchi.jp>
    Signed-off-by: Takashi Iwai <tiwai@suse.de>

diff --git a/sound/firewire/fireface/ff.h b/sound/firewire/fireface/ff.h
index 7dfc7745a914..3f22b8d84e36 100644
--- a/sound/firewire/fireface/ff.h
+++ b/sound/firewire/fireface/ff.h
@@ -35,7 +35,6 @@
 #define SND_FF_IN_MIDI_PORTS		2
 #define SND_FF_OUT_MIDI_PORTS		2
 
-#define SND_FF_REG_SYNC_STATUS		0x0000801c0000ull
 /* For block write request. */
 #define SND_FF_REG_FETCH_PCM_FRAMES	0x0000801c0000ull
 #define SND_FF_REG_CLOCK_CONFIG		0x0000801c0004ull
@@ -111,6 +110,7 @@ struct snd_ff_protocol {
 	void (*handle_midi_msg)(struct snd_ff *ff, __le32 *buf, size_t length);
 	int (*begin_session)(struct snd_ff *ff, unsigned int rate);
 	void (*finish_session)(struct snd_ff *ff);
+	void (*dump_status)(struct snd_ff *ff, struct snd_info_buffer *buffer);
 };
 
 extern const struct snd_ff_protocol snd_ff_protocol_ff800;

commit 6d1ef1bbfed5f903aaab743a08bde41cc372d646
Author: Takashi Sakamoto <o-takashi@sakamocchi.jp>
Date:   Sun Dec 16 17:32:33 2018 +0900

    ALSA: fireface: code refactoring to handle model-specific registers
    
    As a result of investigation for Fireface 800, 'struct snd_ff_spec.regs'
    is just for higher address to receive tx asynchronous packets of MIDI
    messages, thus it can be simplified.
    
    This commit simplifies it.
    
    Signed-off-by: Takashi Sakamoto <o-takashi@sakamocchi.jp>
    Signed-off-by: Takashi Iwai <tiwai@suse.de>

diff --git a/sound/firewire/fireface/ff.h b/sound/firewire/fireface/ff.h
index 9fdda4fbdbba..7dfc7745a914 100644
--- a/sound/firewire/fireface/ff.h
+++ b/sound/firewire/fireface/ff.h
@@ -36,7 +36,7 @@
 #define SND_FF_OUT_MIDI_PORTS		2
 
 #define SND_FF_REG_SYNC_STATUS		0x0000801c0000ull
-/* For block wriet request. */
+/* For block write request. */
 #define SND_FF_REG_FETCH_PCM_FRAMES	0x0000801c0000ull
 #define SND_FF_REG_CLOCK_CONFIG		0x0000801c0004ull
 
@@ -47,11 +47,6 @@ enum snd_ff_stream_mode {
 	SND_FF_STREAM_MODE_COUNT,
 };
 
-enum snd_ff_reg_type {
-	SND_FF_REG_TYPE_MIDI_HIGH_ADDR = 0,
-	SND_FF_REG_TYPE_COUNT,
-};
-
 struct snd_ff_protocol;
 struct snd_ff_spec {
 	const char *const name;
@@ -63,7 +58,7 @@ struct snd_ff_spec {
 	unsigned int midi_out_ports;
 
 	const struct snd_ff_protocol *protocol;
-	u64 regs[SND_FF_REG_TYPE_COUNT];
+	u64 midi_high_addr;
 };
 
 struct snd_ff {

commit 76ea46887729d0765b1fd39291a69c2c6781ada0
Author: Takashi Sakamoto <o-takashi@sakamocchi.jp>
Date:   Sun Dec 16 17:32:30 2018 +0900

    ALSA: fireface: code refactoring to handle multiplier mode
    
    Fireface 400/800 use three modes against the number of data channels in
    data block for both tx/rx packets.
    
    This commit adds refactoring for it. Some enumerators are added to
    represent each of mode and a function is added to calculate the mode
    from sampling frequency code (sfc).
    
    Signed-off-by: Takashi Sakamoto <o-takashi@sakamocchi.jp>
    Signed-off-by: Takashi Iwai <tiwai@suse.de>

diff --git a/sound/firewire/fireface/ff.h b/sound/firewire/fireface/ff.h
index 17332d9ae3f2..9fdda4fbdbba 100644
--- a/sound/firewire/fireface/ff.h
+++ b/sound/firewire/fireface/ff.h
@@ -31,8 +31,6 @@
 #include "../amdtp-stream.h"
 #include "../iso-resources.h"
 
-#define SND_FF_STREAM_MODES		3
-
 #define SND_FF_MAXIMIM_MIDI_QUADS	9
 #define SND_FF_IN_MIDI_PORTS		2
 #define SND_FF_OUT_MIDI_PORTS		2
@@ -42,6 +40,13 @@
 #define SND_FF_REG_FETCH_PCM_FRAMES	0x0000801c0000ull
 #define SND_FF_REG_CLOCK_CONFIG		0x0000801c0004ull
 
+enum snd_ff_stream_mode {
+	SND_FF_STREAM_MODE_LOW = 0,
+	SND_FF_STREAM_MODE_MID,
+	SND_FF_STREAM_MODE_HIGH,
+	SND_FF_STREAM_MODE_COUNT,
+};
+
 enum snd_ff_reg_type {
 	SND_FF_REG_TYPE_MIDI_HIGH_ADDR = 0,
 	SND_FF_REG_TYPE_COUNT,
@@ -51,8 +56,8 @@ struct snd_ff_protocol;
 struct snd_ff_spec {
 	const char *const name;
 
-	const unsigned int pcm_capture_channels[SND_FF_STREAM_MODES];
-	const unsigned int pcm_playback_channels[SND_FF_STREAM_MODES];
+	const unsigned int pcm_capture_channels[SND_FF_STREAM_MODE_COUNT];
+	const unsigned int pcm_playback_channels[SND_FF_STREAM_MODE_COUNT];
 
 	unsigned int midi_in_ports;
 	unsigned int midi_out_ports;
@@ -129,6 +134,8 @@ int amdtp_ff_add_pcm_hw_constraints(struct amdtp_stream *s,
 int amdtp_ff_init(struct amdtp_stream *s, struct fw_unit *unit,
 		  enum amdtp_stream_direction dir);
 
+int snd_ff_stream_get_multiplier_mode(enum cip_sfc sfc,
+				      enum snd_ff_stream_mode *mode);
 int snd_ff_stream_init_duplex(struct snd_ff *ff);
 void snd_ff_stream_destroy_duplex(struct snd_ff *ff);
 int snd_ff_stream_start_duplex(struct snd_ff *ff, unsigned int rate);

commit d4a0b6cbf26ce7c22bcb070595957590736fec85
Author: Takashi Sakamoto <o-takashi@sakamocchi.jp>
Date:   Sun Dec 16 17:32:29 2018 +0900

    ALSA: fireface: share helper function to switch fetching mode
    
    Both of Fireface 400/800 have the same register to switch frame fetching
    mode regardless of difference of available number of PCM frames in
    rx isochronous packet.
    
    This commit moves a helper function from model-dependent implementation.
    
    Signed-off-by: Takashi Sakamoto <o-takashi@sakamocchi.jp>
    Signed-off-by: Takashi Iwai <tiwai@suse.de>

diff --git a/sound/firewire/fireface/ff.h b/sound/firewire/fireface/ff.h
index 6e4a8197d3ca..17332d9ae3f2 100644
--- a/sound/firewire/fireface/ff.h
+++ b/sound/firewire/fireface/ff.h
@@ -111,7 +111,6 @@ struct snd_ff_protocol {
 	void (*handle_midi_msg)(struct snd_ff *ff, __le32 *buf, size_t length);
 	int (*begin_session)(struct snd_ff *ff, unsigned int rate);
 	void (*finish_session)(struct snd_ff *ff);
-	int (*switch_fetching_mode)(struct snd_ff *ff, bool enable);
 };
 
 extern const struct snd_ff_protocol snd_ff_protocol_ff800;

commit a91f676074c05b3c455700b90849adcfda50079e
Author: Takashi Sakamoto <o-takashi@sakamocchi.jp>
Date:   Tue Dec 11 19:17:35 2018 +0900

    ALSA: fireface: add support for Fireface 800 with MIDI functionality only
    
    Fireface 800 is a flagship model of RME GmbH for audio and music units
    on IEEE 1394 bus, shipped 2004. This model consists of four chips:
     - TI TSB81BA3D for physical layer on cable environment of EEE 1394 bus
     - TI TSB82AA2 for link layer for 1394 OHCI bus bridge to PCI bus
     - Xilinx Spartan-3 FPGA XC3S400
     - Xilinx High-Performance CPLD XC9572XL
    
    This commit adds support Fireface 800. In this time, the support is
    restricted to its MIDI functionality, thus this commit adds some
    condition statements to avoid touching streaming functionality.
    
    Unlike Fireface 400, Fireface 800 has no functionality to suppress
    asynchronous transactions for MIDI messages except for unregister of
    listen address in controller side, thus the feature is available as is.
    
    Signed-off-by: Takashi Sakamoto <o-takashi@sakamocchi.jp>
    Signed-off-by: Takashi Iwai <tiwai@suse.de>

diff --git a/sound/firewire/fireface/ff.h b/sound/firewire/fireface/ff.h
index 178a96cb6e2a..6e4a8197d3ca 100644
--- a/sound/firewire/fireface/ff.h
+++ b/sound/firewire/fireface/ff.h
@@ -114,6 +114,7 @@ struct snd_ff_protocol {
 	int (*switch_fetching_mode)(struct snd_ff *ff, bool enable);
 };
 
+extern const struct snd_ff_protocol snd_ff_protocol_ff800;
 extern const struct snd_ff_protocol snd_ff_protocol_ff400;
 
 int snd_ff_transaction_get_clock(struct snd_ff *ff, unsigned int *rate,

commit aef4ad2f5aa27ec05f0306547bcf7cf86a9e9873
Author: Takashi Sakamoto <o-takashi@sakamocchi.jp>
Date:   Tue Dec 11 19:17:34 2018 +0900

    ALSA: fireface: localize a handler for MIDI messages on tx transaction
    
    Content of asynchronous transaction for MIDI messages differs between
    Fireface 400 and 800.
    
    This commit adds a model-specific handler for the transaction and adds
    arrangement.
    
    Signed-off-by: Takashi Sakamoto <o-takashi@sakamocchi.jp>
    Signed-off-by: Takashi Iwai <tiwai@suse.de>

diff --git a/sound/firewire/fireface/ff.h b/sound/firewire/fireface/ff.h
index 466304c72d76..178a96cb6e2a 100644
--- a/sound/firewire/fireface/ff.h
+++ b/sound/firewire/fireface/ff.h
@@ -108,6 +108,7 @@ enum snd_ff_clock_src {
 };
 
 struct snd_ff_protocol {
+	void (*handle_midi_msg)(struct snd_ff *ff, __le32 *buf, size_t length);
 	int (*begin_session)(struct snd_ff *ff, unsigned int rate);
 	void (*finish_session)(struct snd_ff *ff);
 	int (*switch_fetching_mode)(struct snd_ff *ff, bool enable);

commit 3eb8a24459491acc40440b655ca640c87125c5a3
Author: Takashi Sakamoto <o-takashi@sakamocchi.jp>
Date:   Tue Dec 11 19:17:33 2018 +0900

    ALSA: fireface: add driver data for register for MIDI high address
    
    Fireface 400 and 800 have the same mechanism to decide address to which
    asynchronous transactions are sent for MIDI messages, however they use
    different registers for controllers to notify higher 4 byte of the
    address.
    
    This commit adds a model-specific parameter to represent the address.
    Additionally, it corrects some comments. I note that these two models have
    a difference to enable/disable the transaction.
    
    Signed-off-by: Takashi Sakamoto <o-takashi@sakamocchi.jp>
    Signed-off-by: Takashi Iwai <tiwai@suse.de>

diff --git a/sound/firewire/fireface/ff.h b/sound/firewire/fireface/ff.h
index ea905285beab..466304c72d76 100644
--- a/sound/firewire/fireface/ff.h
+++ b/sound/firewire/fireface/ff.h
@@ -42,6 +42,11 @@
 #define SND_FF_REG_FETCH_PCM_FRAMES	0x0000801c0000ull
 #define SND_FF_REG_CLOCK_CONFIG		0x0000801c0004ull
 
+enum snd_ff_reg_type {
+	SND_FF_REG_TYPE_MIDI_HIGH_ADDR = 0,
+	SND_FF_REG_TYPE_COUNT,
+};
+
 struct snd_ff_protocol;
 struct snd_ff_spec {
 	const char *const name;
@@ -53,6 +58,7 @@ struct snd_ff_spec {
 	unsigned int midi_out_ports;
 
 	const struct snd_ff_protocol *protocol;
+	u64 regs[SND_FF_REG_TYPE_COUNT];
 };
 
 struct snd_ff {
@@ -105,8 +111,6 @@ struct snd_ff_protocol {
 	int (*begin_session)(struct snd_ff *ff, unsigned int rate);
 	void (*finish_session)(struct snd_ff *ff);
 	int (*switch_fetching_mode)(struct snd_ff *ff, bool enable);
-
-	u64 midi_high_addr_reg;
 };
 
 extern const struct snd_ff_protocol snd_ff_protocol_ff400;

commit 0085c6edabe85fd39d6ad4340dba2587511e2b3e
Author: Takashi Sakamoto <o-takashi@sakamocchi.jp>
Date:   Tue Dec 11 19:17:32 2018 +0900

    ALSA: fireface: share register for async transaction of MIDI messages
    
    As long as investigating packet dumps from Fireface 400/800, a register
    to receive asynchronous transactions for MIDI messages is the same. For
    Fireface 800, minor register is used.
    
    This commit declares macros for the transactions and obsoletes
    model-specific parameters.
    
    Signed-off-by: Takashi Sakamoto <o-takashi@sakamocchi.jp>
    Signed-off-by: Takashi Iwai <tiwai@suse.de>

diff --git a/sound/firewire/fireface/ff.h b/sound/firewire/fireface/ff.h
index 95cf90b4b533..ea905285beab 100644
--- a/sound/firewire/fireface/ff.h
+++ b/sound/firewire/fireface/ff.h
@@ -107,8 +107,6 @@ struct snd_ff_protocol {
 	int (*switch_fetching_mode)(struct snd_ff *ff, bool enable);
 
 	u64 midi_high_addr_reg;
-	u64 midi_rx_port_0_reg;
-	u64 midi_rx_port_1_reg;
 };
 
 extern const struct snd_ff_protocol snd_ff_protocol_ff400;

commit 5bfb841e2f5952f5a6d8540dfda196769b358f8c
Author: Takashi Sakamoto <o-takashi@sakamocchi.jp>
Date:   Tue Dec 11 19:17:31 2018 +0900

    ALSA: fireface: add support for second optical interface for ADAT stream
    
    Unlike Fireface 400, Fireface 800 have two pair of optical interface
    for ADAT signal and S/PDIF signal. ADAT signals for the interface
    are handled for sampling clock source separately.
    
    This commit modifies a parser for clock configuration to distinguish
    these two ADAT signals.
    
    Signed-off-by: Takashi Sakamoto <o-takashi@sakamocchi.jp>
    Signed-off-by: Takashi Iwai <tiwai@suse.de>

diff --git a/sound/firewire/fireface/ff.h b/sound/firewire/fireface/ff.h
index cdb1326f65b7..95cf90b4b533 100644
--- a/sound/firewire/fireface/ff.h
+++ b/sound/firewire/fireface/ff.h
@@ -94,10 +94,11 @@ struct snd_ff {
 enum snd_ff_clock_src {
 	SND_FF_CLOCK_SRC_INTERNAL,
 	SND_FF_CLOCK_SRC_SPDIF,
-	SND_FF_CLOCK_SRC_ADAT,
+	SND_FF_CLOCK_SRC_ADAT1,
+	SND_FF_CLOCK_SRC_ADAT2,
 	SND_FF_CLOCK_SRC_WORD,
 	SND_FF_CLOCK_SRC_LTC,
-	/* TODO: perhaps ADAT2 and TCO exists. */
+	/* TODO: perhaps TCO exists. */
 };
 
 struct snd_ff_protocol {

commit 3c3b892b3735edcc9e0be0aa129c72613e3f156e
Author: Takashi Sakamoto <o-takashi@sakamocchi.jp>
Date:   Tue Dec 11 19:17:30 2018 +0900

    ALSA: fireface: share helper function to get current sampling rate and clock source
    
    As long as investigating packet dumps from Fireface 400/800, bits on
    status registers for clock synchronization are the same.
    
    This commit moves a parser for a register of clock configuration to
    obsolete model-specific operations.
    
    Signed-off-by: Takashi Sakamoto <o-takashi@sakamocchi.jp>
    Signed-off-by: Takashi Iwai <tiwai@suse.de>

diff --git a/sound/firewire/fireface/ff.h b/sound/firewire/fireface/ff.h
index 6dc36a2623b3..cdb1326f65b7 100644
--- a/sound/firewire/fireface/ff.h
+++ b/sound/firewire/fireface/ff.h
@@ -101,8 +101,6 @@ enum snd_ff_clock_src {
 };
 
 struct snd_ff_protocol {
-	int (*get_clock)(struct snd_ff *ff, unsigned int *rate,
-			 enum snd_ff_clock_src *src);
 	int (*begin_session)(struct snd_ff *ff, unsigned int rate);
 	void (*finish_session)(struct snd_ff *ff);
 	int (*switch_fetching_mode)(struct snd_ff *ff, bool enable);
@@ -114,6 +112,8 @@ struct snd_ff_protocol {
 
 extern const struct snd_ff_protocol snd_ff_protocol_ff400;
 
+int snd_ff_transaction_get_clock(struct snd_ff *ff, unsigned int *rate,
+				 enum snd_ff_clock_src *src);
 int snd_ff_transaction_register(struct snd_ff *ff);
 int snd_ff_transaction_reregister(struct snd_ff *ff);
 void snd_ff_transaction_unregister(struct snd_ff *ff);

commit 72f10f08b6e95cfeb7cad9ebd165d5cca771e0e7
Author: Takashi Sakamoto <o-takashi@sakamocchi.jp>
Date:   Tue Dec 11 19:17:29 2018 +0900

    ALSA: fireface: share status and configuration dump
    
    As long as investigating packet dumps from Fireface 400/800, bits on
    status registers for clock synchronization are the same.
    
    This commit moves a parser for the registers to obsolete model-specific
    operations.
    
    Signed-off-by: Takashi Sakamoto <o-takashi@sakamocchi.jp>
    Signed-off-by: Takashi Iwai <tiwai@suse.de>

diff --git a/sound/firewire/fireface/ff.h b/sound/firewire/fireface/ff.h
index 9122fb6ed8fd..6dc36a2623b3 100644
--- a/sound/firewire/fireface/ff.h
+++ b/sound/firewire/fireface/ff.h
@@ -107,11 +107,6 @@ struct snd_ff_protocol {
 	void (*finish_session)(struct snd_ff *ff);
 	int (*switch_fetching_mode)(struct snd_ff *ff, bool enable);
 
-	void (*dump_sync_status)(struct snd_ff *ff,
-				 struct snd_info_buffer *buffer);
-	void (*dump_clock_config)(struct snd_ff *ff,
-				  struct snd_info_buffer *buffer);
-
 	u64 midi_high_addr_reg;
 	u64 midi_rx_port_0_reg;
 	u64 midi_rx_port_1_reg;

commit 3ae49ed923028b93c790910d362e3af7f0b87d09
Author: Takashi Sakamoto <o-takashi@sakamocchi.jp>
Date:   Tue Dec 11 19:17:28 2018 +0900

    ALSA: fireface: share some registers for status of clock synchronization
    
    As long as investigating packet dumps from Fireface 400/800, status
    registers for clock synchronization is common.
    
    This commit moves some macros for them to header file.
    
    Signed-off-by: Takashi Sakamoto <o-takashi@sakamocchi.jp>
    Signed-off-by: Takashi Iwai <tiwai@suse.de>

diff --git a/sound/firewire/fireface/ff.h b/sound/firewire/fireface/ff.h
index 64df44beb950..9122fb6ed8fd 100644
--- a/sound/firewire/fireface/ff.h
+++ b/sound/firewire/fireface/ff.h
@@ -37,6 +37,11 @@
 #define SND_FF_IN_MIDI_PORTS		2
 #define SND_FF_OUT_MIDI_PORTS		2
 
+#define SND_FF_REG_SYNC_STATUS		0x0000801c0000ull
+/* For block wriet request. */
+#define SND_FF_REG_FETCH_PCM_FRAMES	0x0000801c0000ull
+#define SND_FF_REG_CLOCK_CONFIG		0x0000801c0004ull
+
 struct snd_ff_protocol;
 struct snd_ff_spec {
 	const char *const name;

commit 782fbec745d84fa06708e703a92a431c4344daf0
Author: Takashi Sakamoto <o-takashi@sakamocchi.jp>
Date:   Tue Aug 22 22:58:15 2017 +0900

    ALSA: firewire: add const qualifier to identifiers for read-only symbols
    
    Drivers in ALSA firewire stack still includes some symbols which can be
    moved to a section for read-only symbols.
    
    Signed-off-by: Takashi Sakamoto <o-takashi@sakamocchi.jp>
    Signed-off-by: Takashi Iwai <tiwai@suse.de>

diff --git a/sound/firewire/fireface/ff.h b/sound/firewire/fireface/ff.h
index 3cb812a50030..64df44beb950 100644
--- a/sound/firewire/fireface/ff.h
+++ b/sound/firewire/fireface/ff.h
@@ -47,7 +47,7 @@ struct snd_ff_spec {
 	unsigned int midi_in_ports;
 	unsigned int midi_out_ports;
 
-	struct snd_ff_protocol *protocol;
+	const struct snd_ff_protocol *protocol;
 };
 
 struct snd_ff {
@@ -112,7 +112,7 @@ struct snd_ff_protocol {
 	u64 midi_rx_port_1_reg;
 };
 
-extern struct snd_ff_protocol snd_ff_protocol_ff400;
+extern const struct snd_ff_protocol snd_ff_protocol_ff400;
 
 int snd_ff_transaction_register(struct snd_ff *ff);
 int snd_ff_transaction_reregister(struct snd_ff *ff);

commit 76fdb3a9e13a781df8bf8652312f6a7cbf5e2f43
Author: Takashi Sakamoto <o-takashi@sakamocchi.jp>
Date:   Fri Mar 31 22:06:12 2017 +0900

    ALSA: fireface: add support for Fireface 400
    
    Fireface 400 is a second model of RME Fireface series, released in 2006.
    This commit adds support for this model.
    
    This model supports 8 analog channels, 2 S/PDIF channels and 8 ADAT
    channels in both of tx/rx packet. The number of ADAT channels differs
    depending on each mode of sampling transmission frequency.
    
    $ python2 linux-firewire-utils/src/crpp < /sys/bus/firewire/devices/fw1/config_rom
                   ROM header and bus information block
                   -----------------------------------------------------------------
    400  04107768  bus_info_length 4, crc_length 16, crc 30568 (should be 61311)
    404  31333934  bus_name "1394"
    408  20009002  irmc 0, cmc 0, isc 1, bmc 0, cyc_clk_acc 0, max_rec 9 (1024)
    40c  000a3501  company_id 000a35     |
    410  1bd0862a  device_id 011bd0862a  | EUI-64 000a35011bd0862a
    
                   root directory
                   -----------------------------------------------------------------
    414  000485ec  directory_length 4, crc 34284
    418  03000a35  vendor
    41c  0c0083c0  node capabilities per IEEE 1394
    420  8d000006  --> eui-64 leaf at 438
    424  d1000001  --> unit directory at 428
    
                   unit directory at 428
                   -----------------------------------------------------------------
    428  000314c4  directory_length 3, crc 5316
    42c  12000a35  specifier id
    430  13000002  version
    434  17101800  model
    
                   eui-64 leaf at 438
                   -----------------------------------------------------------------
    438  000261a8  leaf_length 2, crc 25000
    43c  000a3501  company_id 000a35     |
    440  1bd0862a  device_id 011bd0862a  | EUI-64 000a35011bd0862a
    
    Signed-off-by: Takashi Sakamoto <o-takashi@sakamocchi.jp>
    Signed-off-by: Takashi Iwai <tiwai@suse.de>

diff --git a/sound/firewire/fireface/ff.h b/sound/firewire/fireface/ff.h
index a143b5ab8b71..3cb812a50030 100644
--- a/sound/firewire/fireface/ff.h
+++ b/sound/firewire/fireface/ff.h
@@ -112,6 +112,8 @@ struct snd_ff_protocol {
 	u64 midi_rx_port_1_reg;
 };
 
+extern struct snd_ff_protocol snd_ff_protocol_ff400;
+
 int snd_ff_transaction_register(struct snd_ff *ff);
 int snd_ff_transaction_reregister(struct snd_ff *ff);
 void snd_ff_transaction_unregister(struct snd_ff *ff);

commit f656edd5fb33d889561978b81ec2897087c2f4ca
Author: Takashi Sakamoto <o-takashi@sakamocchi.jp>
Date:   Fri Mar 31 22:06:11 2017 +0900

    ALSA: fireface: add hwdep interface
    
    This commit adds hwdep interface so as the other drivers for audio and
    music units on IEEE 1394 have.
    
    This interface is designed for mixer/control applications. By using this
    interface, an application can get information about firewire node, can
    lock/unlock kernel streaming and can get notification at starting/stopping
    kernel streaming.
    
    Signed-off-by: Takashi Sakamoto <o-takashi@sakamocchi.jp>
    Signed-off-by: Takashi Iwai <tiwai@suse.de>

diff --git a/sound/firewire/fireface/ff.h b/sound/firewire/fireface/ff.h
index 0d5228c905ea..a143b5ab8b71 100644
--- a/sound/firewire/fireface/ff.h
+++ b/sound/firewire/fireface/ff.h
@@ -17,12 +17,15 @@
 #include <linux/mutex.h>
 #include <linux/slab.h>
 #include <linux/compat.h>
+#include <linux/sched/signal.h>
 
 #include <sound/core.h>
 #include <sound/info.h>
 #include <sound/rawmidi.h>
 #include <sound/pcm.h>
 #include <sound/pcm_params.h>
+#include <sound/hwdep.h>
+#include <sound/firewire.h>
 
 #include "../lib.h"
 #include "../amdtp-stream.h"
@@ -77,6 +80,10 @@ struct snd_ff {
 	struct amdtp_stream rx_stream;
 	struct fw_iso_resources tx_resources;
 	struct fw_iso_resources rx_resources;
+
+	int dev_lock_count;
+	bool dev_lock_changed;
+	wait_queue_head_t hwdep_wait;
 };
 
 enum snd_ff_clock_src {
@@ -122,10 +129,16 @@ int snd_ff_stream_start_duplex(struct snd_ff *ff, unsigned int rate);
 void snd_ff_stream_stop_duplex(struct snd_ff *ff);
 void snd_ff_stream_update_duplex(struct snd_ff *ff);
 
+void snd_ff_stream_lock_changed(struct snd_ff *ff);
+int snd_ff_stream_lock_try(struct snd_ff *ff);
+void snd_ff_stream_lock_release(struct snd_ff *ff);
+
 void snd_ff_proc_init(struct snd_ff *ff);
 
 int snd_ff_create_midi_devices(struct snd_ff *ff);
 
 int snd_ff_create_pcm_devices(struct snd_ff *ff);
 
+int snd_ff_create_hwdep_devices(struct snd_ff *ff);
+
 #endif

commit 4b316436ab2e0b74e4986fc66b7cd7902cfd7054
Author: Takashi Sakamoto <o-takashi@sakamocchi.jp>
Date:   Fri Mar 31 22:06:10 2017 +0900

    ALSA: fireface: add support for PCM functionality
    
    This commit adds PCM functionality to transmit/receive PCM frames on
    isochronous packet streaming. This commit enables userspace applications
    to start/stop packet streaming via ALSA PCM interface.
    
    Sampling rate requested by applications is used as sampling transmission
    frequency of IEC 61883-1/6packet streaming. As I described in followed
    commits, units in this series manages sampling clock frequency
    independently of sampling transmission frequency, and they supports
    resampling between their packet streaming/data block processing layer and
    sampling data processing layer. This commit take this driver to utilize
    these features for usability.
    
    When internal clock is selected as source signal of sampling clock, this
    driver allows user space applications to start PCM substreams at any rate
    which packet streaming engine supports as sampling transmission frequency.
    In this case, this driver expects units to perform resampling PCM frames
    for rx/tx packets when sampling clock frequency and sampling transmission
    frequency are mismatched. This is for daily use cases.
    
    When any external clock is selected as the source signal, this driver
    gets configured sampling rate from units, then restricts available
    sampling rate to the rate for PCM applications. This is for studio use
    cases.
    
    Models in this series supports 64.0/128.0 kHz of sampling rate, however
    these frequencies are not supported by IEC 61883-6 as sampling transmission
    frequency. Therefore, packet streaming engine of ALSA firewire stack can't
    handle them. When units are configured to use any external clock as source
    signal of sampling clock and one of these unsupported rate is configured
    as rate of the sampling clock, this driver returns EIO to user space
    applications.
    
    Anyway, this driver doesn't voluntarily configure parameters of sampling
    clock. It's better for users to work with appropriate user space
    implementations to configure the parameters in advance of usage.
    
    Signed-off-by: Takashi Sakamoto <o-takashi@sakamocchi.jp>
    Signed-off-by: Takashi Iwai <tiwai@suse.de>

diff --git a/sound/firewire/fireface/ff.h b/sound/firewire/fireface/ff.h
index 6599c11744ae..0d5228c905ea 100644
--- a/sound/firewire/fireface/ff.h
+++ b/sound/firewire/fireface/ff.h
@@ -21,6 +21,8 @@
 #include <sound/core.h>
 #include <sound/info.h>
 #include <sound/rawmidi.h>
+#include <sound/pcm.h>
+#include <sound/pcm_params.h>
 
 #include "../lib.h"
 #include "../amdtp-stream.h"
@@ -124,4 +126,6 @@ void snd_ff_proc_init(struct snd_ff *ff);
 
 int snd_ff_create_midi_devices(struct snd_ff *ff);
 
+int snd_ff_create_pcm_devices(struct snd_ff *ff);
+
 #endif

commit 75d6d898977830d6d789083bf0a63ea6826124c8
Author: Takashi Sakamoto <o-takashi@sakamocchi.jp>
Date:   Fri Mar 31 22:06:09 2017 +0900

    ALSA: fireface: add stream management functionality
    
    This commit adds management functionality for packet streaming.
    
    As long as investigating Fireface 400, there're three modes depending
    on sampling transmission frequency. The number of data channels in each
    data block is different depending on the mode. The set of available
    data channels for each mode might be different for each protocol and
    model.
    
    The length of registers for the number of isochronous channel is just
    three bits, therefore 0-7ch are available.
    
    When bus reset occurs on IEEE 1394 bus, the device discontinues to
    transmit packets. This commit aborts PCM substreams at bus reset handler.
    
    As I described in followed commits, The device manages its sampling clock
    independently of sampling transmission frequency against IEC 61883-6.
    Thus, it's a lower cost to change the sampling transmission frequency,
    while data fetch between streaming layer and DSP require larger buffer
    for resampling. As a result, device latency might tend to be larger than
    ASICs for IEC 61883-1/6 such as DM1000/DM1100/DM1500 (BeBoB),
    DiceII/TCD2210/TCD2220/TCD3070 and OXFW970/971.
    
    Signed-off-by: Takashi Sakamoto <o-takashi@sakamocchi.jp>
    Signed-off-by: Takashi Iwai <tiwai@suse.de>

diff --git a/sound/firewire/fireface/ff.h b/sound/firewire/fireface/ff.h
index fa7242fd9b8c..6599c11744ae 100644
--- a/sound/firewire/fireface/ff.h
+++ b/sound/firewire/fireface/ff.h
@@ -24,6 +24,7 @@
 
 #include "../lib.h"
 #include "../amdtp-stream.h"
+#include "../iso-resources.h"
 
 #define SND_FF_STREAM_MODES		3
 
@@ -68,6 +69,12 @@ struct snd_ff {
 	ktime_t next_ktime[SND_FF_OUT_MIDI_PORTS];
 	bool rx_midi_error[SND_FF_OUT_MIDI_PORTS];
 	unsigned int rx_bytes[SND_FF_OUT_MIDI_PORTS];
+
+	unsigned int substreams_counter;
+	struct amdtp_stream tx_stream;
+	struct amdtp_stream rx_stream;
+	struct fw_iso_resources tx_resources;
+	struct fw_iso_resources rx_resources;
 };
 
 enum snd_ff_clock_src {
@@ -107,6 +114,12 @@ int amdtp_ff_add_pcm_hw_constraints(struct amdtp_stream *s,
 int amdtp_ff_init(struct amdtp_stream *s, struct fw_unit *unit,
 		  enum amdtp_stream_direction dir);
 
+int snd_ff_stream_init_duplex(struct snd_ff *ff);
+void snd_ff_stream_destroy_duplex(struct snd_ff *ff);
+int snd_ff_stream_start_duplex(struct snd_ff *ff, unsigned int rate);
+void snd_ff_stream_stop_duplex(struct snd_ff *ff);
+void snd_ff_stream_update_duplex(struct snd_ff *ff);
+
 void snd_ff_proc_init(struct snd_ff *ff);
 
 int snd_ff_create_midi_devices(struct snd_ff *ff);

commit 6fb7db902bbe6358b39f359b917f10e3c923058c
Author: Takashi Sakamoto <o-takashi@sakamocchi.jp>
Date:   Fri Mar 31 22:06:08 2017 +0900

    ALSA: fireface: add unique data processing layer
    
    As long as investigating Fireface 400, format of payload of each
    isochronous packet is not IEC 61883-1/6, thus its format of data block
    is not AM824. The remarkable points of the format are:
     * The payload just consists of some data channels of quadlet size without
       CIP header.
     * Each data channels includes data aligned to little endian order.
     * One data channel consists of two parts; 8 bit ancillary field and 24 bit
       PCM frame.
    
    Due to lack of CIP headers, rx/tx packets include no CIP headers and
    different way to check packet discontinuity. For tx packet, the ancillary
    field is used for counter. However, the way of counting is different
    depending on positions of data channels. At 44.1 kHz, ancillary field in:
     * 1st/6th/9th/10th/14th/17th data channels: not used for this purpose.
     * 2nd/18th data channels: incremented every data block (0x00-0xff).
     * 3rd/4th/5th/11th/12th/13th data channels: incremented every 256 data
       blocks (0x00-0x07).
     * 7th/8th/15th/16th data channels: incremented per the number of data
       blocks in a packet. The increment can occur per packet (0x00-0xff).
    
    For tx packet, tag of each isochronous packet is used for this purpose.
    The value of tag cyclically changes between 0, 1, 2 and 3 in this order.
    The interval is different depending on sampling transmission frequency.
    At 44.1/48.0 kHz, it's 256 data blocks. At 88.2 kHz, it's 96 data blocks.
    
    The number of data blocks in tx packet is exactly the same as
    SYT_INTERVAL. There's no empty packet or no-data packet, thus the
    throughput is not 8,000 packets per sec. On the other hand, the one in
    rx packet is 8,000 packets per sec, thus the number of data blocks is
    different between each packet, depending on sampling transmission
    frequency:
     * 44.1 kHz: 5 or 6
     * 48.0 kHz: 5 or 6 or 7
     * 88.2 kHz: 10 or 11 or 12
    
    This commit adds data processing layer to satisfy the above specification
    in a policy of 'best effort'. Although PCM frames are handled for
    intermediate buffer to user space, the ancillary data is not handled at all
    to reduce CPU usage, thus counter is not checked. 0 is always used for tag
    of isochronous packet. Furthermore, the packet streaming layer is
    responsible for calculation of the number of data blocks for each packet,
    thus it's not exactly the same sequence from the above observation.
    
    Signed-off-by: Takashi Sakamoto <o-takashi@sakamocchi.jp>
    Signed-off-by: Takashi Iwai <tiwai@suse.de>

diff --git a/sound/firewire/fireface/ff.h b/sound/firewire/fireface/ff.h
index 2d1fab2c3467..fa7242fd9b8c 100644
--- a/sound/firewire/fireface/ff.h
+++ b/sound/firewire/fireface/ff.h
@@ -23,6 +23,7 @@
 #include <sound/rawmidi.h>
 
 #include "../lib.h"
+#include "../amdtp-stream.h"
 
 #define SND_FF_STREAM_MODES		3
 
@@ -99,6 +100,13 @@ int snd_ff_transaction_register(struct snd_ff *ff);
 int snd_ff_transaction_reregister(struct snd_ff *ff);
 void snd_ff_transaction_unregister(struct snd_ff *ff);
 
+int amdtp_ff_set_parameters(struct amdtp_stream *s, unsigned int rate,
+			    unsigned int pcm_channels);
+int amdtp_ff_add_pcm_hw_constraints(struct amdtp_stream *s,
+				    struct snd_pcm_runtime *runtime);
+int amdtp_ff_init(struct amdtp_stream *s, struct fw_unit *unit,
+		  enum amdtp_stream_direction dir);
+
 void snd_ff_proc_init(struct snd_ff *ff);
 
 int snd_ff_create_midi_devices(struct snd_ff *ff);

commit d3fc7aac11dc54f97f4f28c60a489a555529fa1c
Author: Takashi Sakamoto <o-takashi@sakamocchi.jp>
Date:   Fri Mar 31 22:06:05 2017 +0900

    ALSA: fireface: add proc node to help debugging
    
    Drivers can retrieve the state and configuration of clock by read
    transactions.
    
    This commit allows protocol abstraction layer to to dump the
    information for debugging, via proc interface.
    
    Signed-off-by: Takashi Sakamoto <o-takashi@sakamocchi.jp>
    Signed-off-by: Takashi Iwai <tiwai@suse.de>

diff --git a/sound/firewire/fireface/ff.h b/sound/firewire/fireface/ff.h
index 2944bde250bf..2d1fab2c3467 100644
--- a/sound/firewire/fireface/ff.h
+++ b/sound/firewire/fireface/ff.h
@@ -99,6 +99,8 @@ int snd_ff_transaction_register(struct snd_ff *ff);
 int snd_ff_transaction_reregister(struct snd_ff *ff);
 void snd_ff_transaction_unregister(struct snd_ff *ff);
 
+void snd_ff_proc_init(struct snd_ff *ff);
+
 int snd_ff_create_midi_devices(struct snd_ff *ff);
 
 #endif

commit ff2c293efaf43feb120f6b166891e5eca0cf3ccc
Author: Takashi Sakamoto <o-takashi@sakamocchi.jp>
Date:   Fri Mar 31 22:06:04 2017 +0900

    ALSA: fireface: add support for MIDI functionality
    
    In previous commit, fireface driver supports unique transaction mechanism
    for MIDI feature. This commit adds MIDI functionality for userspace
    applications.
    
    As I wrote in a followed commit, user space applications get some
    requirement from this driver. It should not touch a register to which
    units transmit MIDI messages. It should configure a register in which
    MIDI transmission is controlled.
    
    Signed-off-by: Takashi Sakamoto <o-takashi@sakamocchi.jp>
    Signed-off-by: Takashi Iwai <tiwai@suse.de>

diff --git a/sound/firewire/fireface/ff.h b/sound/firewire/fireface/ff.h
index bac2e58b2e35..2944bde250bf 100644
--- a/sound/firewire/fireface/ff.h
+++ b/sound/firewire/fireface/ff.h
@@ -47,6 +47,7 @@ struct snd_ff {
 	struct snd_card *card;
 	struct fw_unit *unit;
 	struct mutex mutex;
+	spinlock_t lock;
 
 	bool registered;
 	struct delayed_work dwork;
@@ -98,4 +99,6 @@ int snd_ff_transaction_register(struct snd_ff *ff);
 int snd_ff_transaction_reregister(struct snd_ff *ff);
 void snd_ff_transaction_unregister(struct snd_ff *ff);
 
+int snd_ff_create_midi_devices(struct snd_ff *ff);
+
 #endif

commit 19174295788de77dd58dc6060b0d1bcfda21625e
Author: Takashi Sakamoto <o-takashi@sakamocchi.jp>
Date:   Fri Mar 31 22:06:03 2017 +0900

    ALSA: fireface: add transaction support
    
    As long as investigating Fireface 400, MIDI messages are transferred by
    asynchronous communication over IEEE 1394 bus.
    
    Fireface 400 receives MIDI messages by write transactions to two addresses;
    0x'0000'0801'8000 and 0x'0000'0801'9000. Each of two seems to correspond to
    MIDI port 1 and 2.
    
    Fireface 400 transfers MIDI messages by write transactions to certain
    addresses which configured by drivers. The drivers can decide upper 4 byte
    of the addresses by write transactions to 0x'0000'0801'03f4. For the rest
    part of the address, drivers can select from below options:
     * 0x'0000'0000
     * 0x'0000'0080
     * 0x'0000'0100
     * 0x'0000'0180
    
    Selected options are represented in register 0x'0000'0801'051c as bit
    flags. Due to this mechanism, drivers are restricted to use addresses on
    'Memory space' of IEEE 1222, even if transactions to the address have
    some side effects.
    
    This commit adds transaction support for MIDI messaging, based on my
    assumption that the similar mechanism is used on the other protocols. To
    receive asynchronous transactions, the driver allocates a range of address
    in 'Memory space'. I apply a strategy to use 0x'0000'0000 as lower 4 byte
    of the address. When getting failure from Linux FireWire subsystem, this
    driver retries to allocate addresses.
    
    Unfortunately, read transaction to address 0x'0000'0801'051c returns zero
    always, however write transactions have effects to the other features such
    as status of sampling clock. For this reason, this commit delegates a task
    to configure this register to user space applications. The applications
    should set 3rd bit in LSB in little endian order.
    
    Signed-off-by: Takashi Sakamoto <o-takashi@sakamocchi.jp>
    Signed-off-by: Takashi Iwai <tiwai@suse.de>

diff --git a/sound/firewire/fireface/ff.h b/sound/firewire/fireface/ff.h
index 7be0ea4aaa4b..bac2e58b2e35 100644
--- a/sound/firewire/fireface/ff.h
+++ b/sound/firewire/fireface/ff.h
@@ -20,11 +20,16 @@
 
 #include <sound/core.h>
 #include <sound/info.h>
+#include <sound/rawmidi.h>
 
 #include "../lib.h"
 
 #define SND_FF_STREAM_MODES		3
 
+#define SND_FF_MAXIMIM_MIDI_QUADS	9
+#define SND_FF_IN_MIDI_PORTS		2
+#define SND_FF_OUT_MIDI_PORTS		2
+
 struct snd_ff_protocol;
 struct snd_ff_spec {
 	const char *const name;
@@ -47,6 +52,20 @@ struct snd_ff {
 	struct delayed_work dwork;
 
 	const struct snd_ff_spec *spec;
+
+	/* To handle MIDI tx. */
+	struct snd_rawmidi_substream *tx_midi_substreams[SND_FF_IN_MIDI_PORTS];
+	struct fw_address_handler async_handler;
+
+	/* TO handle MIDI rx. */
+	struct snd_rawmidi_substream *rx_midi_substreams[SND_FF_OUT_MIDI_PORTS];
+	u8 running_status[SND_FF_OUT_MIDI_PORTS];
+	__le32 msg_buf[SND_FF_OUT_MIDI_PORTS][SND_FF_MAXIMIM_MIDI_QUADS];
+	struct work_struct rx_midi_work[SND_FF_OUT_MIDI_PORTS];
+	struct fw_transaction transactions[SND_FF_OUT_MIDI_PORTS];
+	ktime_t next_ktime[SND_FF_OUT_MIDI_PORTS];
+	bool rx_midi_error[SND_FF_OUT_MIDI_PORTS];
+	unsigned int rx_bytes[SND_FF_OUT_MIDI_PORTS];
 };
 
 enum snd_ff_clock_src {
@@ -75,4 +94,8 @@ struct snd_ff_protocol {
 	u64 midi_rx_port_1_reg;
 };
 
+int snd_ff_transaction_register(struct snd_ff *ff);
+int snd_ff_transaction_reregister(struct snd_ff *ff);
+void snd_ff_transaction_unregister(struct snd_ff *ff);
+
 #endif

commit 53eb086750f3535eeb70eb177b0fa89d458f1479
Author: Takashi Sakamoto <o-takashi@sakamocchi.jp>
Date:   Fri Mar 31 22:06:02 2017 +0900

    ALSA: fireface: add an abstraction layer for model-specific protocols
    
    As of 2016, RME discontinued its Fireface series, thus it's OK for us
    to focus on released firmwares to drive known units.
    
    As long as investigating Fireface 400 with Windows driver and comparing
    the result to FFADO implementation, I can see these firmwares have
    different register assignments. On the other hand, according to manuals
    of each models, features relevant to packet streaming seem to be common,
    because GUIs for these models have the same options. It's reasonable to
    assume an abstraction layer of protocols to communicate to each models.
    
    This commit adds the abstraction layer for the protocols. This layer
    includes some functions to operate common features of models in this
    series.
    
    In IEC 61883-1/6, the sequence of packet can transfer timing information
    to synchronize receivers to transmitters. Units of each node on IEEE 1394
    bus can generate transmitter's timing clock by handling value of SYT field
    in CIP header with high-precision clock. For audio and music units on
    IEEE 1394 bus, this recovered clock is designed to used for sampling clock
    to capture/generate PCM frames on DSP/ADC/DAC. (Actually, in this world,
    there's no units to implement this specification as is, as long as I
    know).
    
    Fireface series doesn't use this mechanism. Besides, It doesn't use
    isochronous packet with CIP header. It uses internal crystal unit as its
    initial sampling clock. When detecting input signals which can be
    available for sampling clock (e.g. ADAT input), drivers can configure
    units to use the signals as source of sampling clock. When something goes
    wrong, e.g. frequency mismatching between the signal and configured value,
    units fallback to the other detected signals alternatively. When detecting
    no alternatives, internal crystal unit is used as source of sampling
    clock. On manual of Fireface 400, this mechanism is described as
    'Autosync'.
    
    On the units, packet streaming is controlled by write transactions to
    certain registers. Format of the packet, e.g. the number of data channels
    in a data block, is also configured by the same manner. For this purpose,
    .begin_session and .finish_session is added.
    
    The remarkable point of this protocol is to allow drivers to configure
    arbitrary sampling transmission frequency; e.g. 12.345 Hz. As long as I
    know, there's no actual DAC/ADC chips which support this kind of
    capability. I think a pair of packet streaming layer and data block
    processing layer is isolated from sampling data processing layer in a
    point of governed clock. In short, between these parts, resampling layer
    exists. Actually, for Fireface 400, write transactions to
    0x'0000'8010'051c has an effect to change sampling clock frequency with
    base frequencies (32.0/44.1/48.0 kHz) and its multipliers (x2/x4),
    regardless of sampling transmission frequency.
    
    For this reason, the abstraction layer doesn't handle parameters for
    sampling clock. Instead, each implementation of .begin_session is
    expected to configure sampling transmission frequency.
    
    For packet streaming layer, it's enough to get current selection of
    source signals for the sampling clock and its frequency. In the
    abstraction layer, when internal crystal is selected, drivers can sets
    arbitrary sampling frequency, else they should follow configured
    frequency. For this purpose, .get_clock is added.
    
    Drivers are allows to bank up data fetching from a pair of packet
    streaming/data block processing layer and sampling data processing layer.
    This feature seems to suppress noises at starting/stopping packet
    streaming. For this purpose, .switch_fetching_mode is added.
    
    As I described in the above, units have remarkable mechanism to manage
    sampling clock and process sampling data. For debugging purpose,
    .dump_sync_status and .dump_clock_config are added. I don't have a need
    to common interface to represent the status and configuration,
    developers can add actual implementation of the abstraction layer as they
    like.
    
    Unlike PCM frames, MIDI messages are transferred by asynchronous
    communication over IEEE 1394 bus, thus target addresses are important for
    this feature. The .midi_high_addr_reg, .midi_rx_port_0_reg and
    .midi_rx_port_1_reg are for this purpose. I'll describe them in following
    commit.
    
    Signed-off-by: Takashi Sakamoto <o-takashi@sakamocchi.jp>
    Signed-off-by: Takashi Iwai <tiwai@suse.de>

diff --git a/sound/firewire/fireface/ff.h b/sound/firewire/fireface/ff.h
index 269fa259d5a7..7be0ea4aaa4b 100644
--- a/sound/firewire/fireface/ff.h
+++ b/sound/firewire/fireface/ff.h
@@ -19,11 +19,13 @@
 #include <linux/compat.h>
 
 #include <sound/core.h>
+#include <sound/info.h>
 
 #include "../lib.h"
 
 #define SND_FF_STREAM_MODES		3
 
+struct snd_ff_protocol;
 struct snd_ff_spec {
 	const char *const name;
 
@@ -32,6 +34,8 @@ struct snd_ff_spec {
 
 	unsigned int midi_in_ports;
 	unsigned int midi_out_ports;
+
+	struct snd_ff_protocol *protocol;
 };
 
 struct snd_ff {
@@ -44,4 +48,31 @@ struct snd_ff {
 
 	const struct snd_ff_spec *spec;
 };
+
+enum snd_ff_clock_src {
+	SND_FF_CLOCK_SRC_INTERNAL,
+	SND_FF_CLOCK_SRC_SPDIF,
+	SND_FF_CLOCK_SRC_ADAT,
+	SND_FF_CLOCK_SRC_WORD,
+	SND_FF_CLOCK_SRC_LTC,
+	/* TODO: perhaps ADAT2 and TCO exists. */
+};
+
+struct snd_ff_protocol {
+	int (*get_clock)(struct snd_ff *ff, unsigned int *rate,
+			 enum snd_ff_clock_src *src);
+	int (*begin_session)(struct snd_ff *ff, unsigned int rate);
+	void (*finish_session)(struct snd_ff *ff);
+	int (*switch_fetching_mode)(struct snd_ff *ff, bool enable);
+
+	void (*dump_sync_status)(struct snd_ff *ff,
+				 struct snd_info_buffer *buffer);
+	void (*dump_clock_config)(struct snd_ff *ff,
+				  struct snd_info_buffer *buffer);
+
+	u64 midi_high_addr_reg;
+	u64 midi_rx_port_0_reg;
+	u64 midi_rx_port_1_reg;
+};
+
 #endif

commit ed90f91a17112d474909bd820f1bb65a5480959d
Author: Takashi Sakamoto <o-takashi@sakamocchi.jp>
Date:   Fri Mar 31 22:06:01 2017 +0900

    ALSA: fireface: add model specific structure
    
    RME Fireface series has several models and their specifications are
    different. Currently, we find no way to retrieve the specifications
    from actual devices and need to implement them in this driver.
    
    This commit adds a structure to describe model specific data. This
    structure has an identical name for each unit, and maximum number of
    data channels in each mode. I'll describe about the mode in following
    commits.
    
    Signed-off-by: Takashi Sakamoto <o-takashi@sakamocchi.jp>
    Signed-off-by: Takashi Iwai <tiwai@suse.de>

diff --git a/sound/firewire/fireface/ff.h b/sound/firewire/fireface/ff.h
index a0faae18018a..269fa259d5a7 100644
--- a/sound/firewire/fireface/ff.h
+++ b/sound/firewire/fireface/ff.h
@@ -22,6 +22,18 @@
 
 #include "../lib.h"
 
+#define SND_FF_STREAM_MODES		3
+
+struct snd_ff_spec {
+	const char *const name;
+
+	const unsigned int pcm_capture_channels[SND_FF_STREAM_MODES];
+	const unsigned int pcm_playback_channels[SND_FF_STREAM_MODES];
+
+	unsigned int midi_in_ports;
+	unsigned int midi_out_ports;
+};
+
 struct snd_ff {
 	struct snd_card *card;
 	struct fw_unit *unit;
@@ -29,5 +41,7 @@ struct snd_ff {
 
 	bool registered;
 	struct delayed_work dwork;
+
+	const struct snd_ff_spec *spec;
 };
 #endif

commit 324540c4e05c09c007f9e358cacb30b38f296bcc
Author: Takashi Sakamoto <o-takashi@sakamocchi.jp>
Date:   Fri Mar 31 22:06:00 2017 +0900

    ALSA: fireface: postpone sound card registration
    
    Just after appearing on IEEE 1394 bus, this unit generates several bus
    resets. This is due to loading firmware from on-board flash memory and
    initialize hardware. It's better to postpone sound card registration.
    
    This commit schedules workqueue to process actual probe processing
    2 seconds after the last bus-reset. The card instance is kept at unit
    probe callback and released at card free callback. Therefore, when the
    actual probe processing fails, the memory block is wasted. This is due to
    simplify driver implementation.
    
    Signed-off-by: Takashi Sakamoto <o-takashi@sakamocchi.jp>
    Signed-off-by: Takashi Iwai <tiwai@suse.de>

diff --git a/sound/firewire/fireface/ff.h b/sound/firewire/fireface/ff.h
index 64d488ec8264..a0faae18018a 100644
--- a/sound/firewire/fireface/ff.h
+++ b/sound/firewire/fireface/ff.h
@@ -20,9 +20,14 @@
 
 #include <sound/core.h>
 
+#include "../lib.h"
+
 struct snd_ff {
 	struct snd_card *card;
 	struct fw_unit *unit;
 	struct mutex mutex;
+
+	bool registered;
+	struct delayed_work dwork;
 };
 #endif

commit 17c4e5eadc4ab7db4c0655c124174a6d8e5f4dc5
Author: Takashi Sakamoto <o-takashi@sakamocchi.jp>
Date:   Fri Mar 31 22:05:59 2017 +0900

    ALSA: fireface: add skeleton for RME Fireface series
    
    This commit adds a new driver for RME Fireface series. This commit just
    creates/removes card instance according to IEEE 1394 bus event. More
    functions will be added in following commits.
    
    Three types of firmware have released by RME GmbH; for Fireface 400, for
    Fireface 800 and for UCX/802/UFX. It's reasonable that these models use
    different protocol for communication. Currently, I've investigated
    Fireface 400 and nothing others.
    
    Signed-off-by: Takashi Sakamoto <o-takashi@sakamocchi.jp>
    Signed-off-by: Takashi Iwai <tiwai@suse.de>

diff --git a/sound/firewire/fireface/ff.h b/sound/firewire/fireface/ff.h
new file mode 100644
index 000000000000..64d488ec8264
--- /dev/null
+++ b/sound/firewire/fireface/ff.h
@@ -0,0 +1,28 @@
+/*
+ * ff.h - a part of driver for RME Fireface series
+ *
+ * Copyright (c) 2015-2017 Takashi Sakamoto
+ *
+ * Licensed under the terms of the GNU General Public License, version 2.
+ */
+
+#ifndef SOUND_FIREFACE_H_INCLUDED
+#define SOUND_FIREFACE_H_INCLUDED
+
+#include <linux/device.h>
+#include <linux/firewire.h>
+#include <linux/firewire-constants.h>
+#include <linux/module.h>
+#include <linux/mod_devicetable.h>
+#include <linux/mutex.h>
+#include <linux/slab.h>
+#include <linux/compat.h>
+
+#include <sound/core.h>
+
+struct snd_ff {
+	struct snd_card *card;
+	struct fw_unit *unit;
+	struct mutex mutex;
+};
+#endif
