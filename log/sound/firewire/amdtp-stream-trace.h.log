commit 1034872123a06b759aba772b1c99612ccb8e632a
Author: Takashi Sakamoto <o-takashi@sakamocchi.jp>
Date:   Sun May 3 13:57:18 2020 +0900

    ALSA: firewire-lib: fix 'function sizeof not defined' error of tracepoints format
    
    The snd-firewire-lib.ko has 'amdtp-packet' event of tracepoints. Current
    printk format for the event includes 'sizeof(u8)' macro expected to be
    extended in compilation time. However, this is not done. As a result,
    perf tools cannot parse the event for printing:
    
    $ mount -l -t debugfs
    debugfs on /sys/kernel/debug type debugfs (rw,nosuid,nodev,noexec,relatime)
    $ cat /sys/kernel/debug/tracing/events/snd_firewire_lib/amdtp_packet/format
    ...
    print fmt: "%02u %04u %04x %04x %02d %03u %02u %03u %02u %01u %02u %s",
      REC->second, REC->cycle, REC->src, REC->dest, REC->channel,
      REC->payload_quadlets, REC->data_blocks, REC->data_block_counter,
      REC->packet_index, REC->irq, REC->index,
      __print_array(__get_dynamic_array(cip_header),
                    __get_dynamic_array_len(cip_header),
                    sizeof(u8))
    
    $ sudo perf record -e snd_firewire_lib:amdtp_packet
      [snd_firewire_lib:amdtp_packet] function sizeof not defined
      Error: expected type 5 but read 0
    
    This commit fixes it by obsoleting the macro with actual size.
    
    Cc: <stable@vger.kernel.org>
    Fixes: bde2bbdb307a ("ALSA: firewire-lib: use dynamic array for CIP header of tracing events")
    Signed-off-by: Takashi Sakamoto <o-takashi@sakamocchi.jp>
    Link: https://lore.kernel.org/r/20200503045718.86337-1-o-takashi@sakamocchi.jp
    Signed-off-by: Takashi Iwai <tiwai@suse.de>

diff --git a/sound/firewire/amdtp-stream-trace.h b/sound/firewire/amdtp-stream-trace.h
index 16c7f6605511..26e7cb555d3c 100644
--- a/sound/firewire/amdtp-stream-trace.h
+++ b/sound/firewire/amdtp-stream-trace.h
@@ -66,8 +66,7 @@ TRACE_EVENT(amdtp_packet,
 		__entry->irq,
 		__entry->index,
 		__print_array(__get_dynamic_array(cip_header),
-			      __get_dynamic_array_len(cip_header),
-			      sizeof(u8)))
+			      __get_dynamic_array_len(cip_header), 1))
 );
 
 #endif

commit cdefaa44d535a9d555ac4f1925d59ae4d0ef98e8
Author: Takashi Sakamoto <o-takashi@sakamocchi.jp>
Date:   Mon Jul 22 12:36:52 2019 +0900

    ALSA: firewire-lib: pass data block count as an argument to tracepoints event
    
    This is a preparation for future commit that 'struct
    amdtp_stream.data_block_count' does not represent the value of
    data block count for current data block.
    
    Signed-off-by: Takashi Sakamoto <o-takashi@sakamocchi.jp>
    Signed-off-by: Takashi Iwai <tiwai@suse.de>

diff --git a/sound/firewire/amdtp-stream-trace.h b/sound/firewire/amdtp-stream-trace.h
index 4adbbf789cbe..16c7f6605511 100644
--- a/sound/firewire/amdtp-stream-trace.h
+++ b/sound/firewire/amdtp-stream-trace.h
@@ -14,8 +14,8 @@
 #include <linux/tracepoint.h>
 
 TRACE_EVENT(amdtp_packet,
-	TP_PROTO(const struct amdtp_stream *s, u32 cycles, const __be32 *cip_header, unsigned int payload_length, unsigned int data_blocks, unsigned int index),
-	TP_ARGS(s, cycles, cip_header, payload_length, data_blocks, index),
+	TP_PROTO(const struct amdtp_stream *s, u32 cycles, const __be32 *cip_header, unsigned int payload_length, unsigned int data_blocks, unsigned int data_block_counter, unsigned int index),
+	TP_ARGS(s, cycles, cip_header, payload_length, data_blocks, data_block_counter, index),
 	TP_STRUCT__entry(
 		__field(unsigned int, second)
 		__field(unsigned int, cycle)
@@ -47,7 +47,7 @@ TRACE_EVENT(amdtp_packet,
 		}
 		__entry->payload_quadlets = payload_length / sizeof(__be32);
 		__entry->data_blocks = data_blocks;
-		__entry->data_block_counter = s->data_block_counter,
+		__entry->data_block_counter = data_block_counter,
 		__entry->packet_index = s->packet_index;
 		__entry->irq = !!in_interrupt();
 		__entry->index = index;

commit 3c53c6255d598db7084c5c3d7553d7200e857818
Merge: b89b889a326a a98429acadef
Author: Takashi Iwai <tiwai@suse.de>
Date:   Mon Jul 8 14:45:20 2019 +0200

    Merge tag 'asoc-v5.3' of https://git.kernel.org/pub/scm/linux/kernel/git/broonie/sound into for-linus
    
    ASoC: Updates for v5.3
    
    This is a very big update, mainly thanks to Morimoto-san's refactoring
    work and some fairly large new drivers.
    
     - Lots more work on moving towards a component based framework from
       Morimoto-san.
     - Support for force disconnecting muxes from Jerome Brunet.
     - New drivers for Cirrus Logic CS47L35, CS47L85 and CS47L90, Conexant
       CX2072X, Realtek RT1011 and RT1308.
    
    Signed-off-by: Takashi Iwai <tiwai@suse.de>

commit eee22af1eddedf2a140fcf6855564420abed818d
Author: Takashi Sakamoto <o-takashi@sakamocchi.jp>
Date:   Mon Jun 24 18:20:15 2019 +0900

    Revert "ALSA: firewire-lib: fix inverted node IDs for amdtp_packet events"
    
    This reverts commit e703965a129cdd72ff74e248f8fbf0d617844527.
    
    When creating this patch, I compared the value of src field to the
    value of first byte of cip_header field (SID) in tracing event.
    But in this test I used a device which has a quirk to transfer
    isochronous packet with invalid SID. The original change is valid.
    
    Fixes: e703965a129c ("ALSA: firewire-lib: fix inverted node IDs for amdtp_packet events")
    Signed-off-by: Takashi Sakamoto <o-takashi@sakamocchi.jp>
    Signed-off-by: Takashi Iwai <tiwai@suse.de>

diff --git a/sound/firewire/amdtp-stream-trace.h b/sound/firewire/amdtp-stream-trace.h
index 5fe0920f04e5..ab708857979f 100644
--- a/sound/firewire/amdtp-stream-trace.h
+++ b/sound/firewire/amdtp-stream-trace.h
@@ -35,11 +35,11 @@ TRACE_EVENT(amdtp_packet,
 		__entry->cycle = cycles % CYCLES_PER_SECOND;
 		__entry->channel = s->context->channel;
 		if (s->direction == AMDTP_IN_STREAM) {
-			__entry->src = fw_parent_device(s->unit)->card->node_id;
-			__entry->dest = fw_parent_device(s->unit)->node_id;
-		} else {
 			__entry->src = fw_parent_device(s->unit)->node_id;
 			__entry->dest = fw_parent_device(s->unit)->card->node_id;
+		} else {
+			__entry->src = fw_parent_device(s->unit)->card->node_id;
+			__entry->dest = fw_parent_device(s->unit)->node_id;
 		}
 		if (cip_header) {
 			memcpy(__get_dynamic_array(cip_header), cip_header,

commit da607e1969ffbf7a1ba06280ade768f4f5fee8c3
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Wed May 29 16:57:59 2019 -0700

    treewide: Replace GPLv2 boilerplate/reference with SPDX - rule 345
    
    Based on 1 normalized pattern(s):
    
      licensed under the terms of the gnu general public license version 2
    
    extracted by the scancode license scanner the SPDX license identifier
    
      GPL-2.0-only
    
    has been chosen to replace the boilerplate/reference in 88 file(s).
    
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Reviewed-by: Alexios Zavras <alexios.zavras@intel.com>
    Reviewed-by: Allison Randal <allison@lohutok.net>
    Cc: linux-spdx@vger.kernel.org
    Link: https://lkml.kernel.org/r/20190530000437.521539229@linutronix.de
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/sound/firewire/amdtp-stream-trace.h b/sound/firewire/amdtp-stream-trace.h
index ac20acf48fc6..edb5c3afa6f8 100644
--- a/sound/firewire/amdtp-stream-trace.h
+++ b/sound/firewire/amdtp-stream-trace.h
@@ -1,8 +1,8 @@
+/* SPDX-License-Identifier: GPL-2.0-only */
 /*
  * amdtp-stream-trace.h - tracepoint definitions to dump a part of packet data
  *
  * Copyright (c) 2016 Takashi Sakamoto
- * Licensed under the terms of the GNU General Public License, version 2.
  */
 
 #undef TRACE_SYSTEM

commit e703965a129cdd72ff74e248f8fbf0d617844527
Author: Takashi Sakamoto <o-takashi@sakamocchi.jp>
Date:   Fri May 24 18:03:40 2019 +0900

    ALSA: firewire-lib: fix inverted node IDs for amdtp_packet events
    
    The amdtp_packet events have inverted node IDs for src/dst. This commit
    fixes the bug.
    
    Fixes: 8d3f1fdf5211 ("ALSA: firewire-lib: unify tracing events to 'amdtp_packet' event")
    Signed-off-by: Takashi Sakamoto <o-takashi@sakamocchi.jp>
    Signed-off-by: Takashi Iwai <tiwai@suse.de>

diff --git a/sound/firewire/amdtp-stream-trace.h b/sound/firewire/amdtp-stream-trace.h
index ab708857979f..5fe0920f04e5 100644
--- a/sound/firewire/amdtp-stream-trace.h
+++ b/sound/firewire/amdtp-stream-trace.h
@@ -35,11 +35,11 @@ TRACE_EVENT(amdtp_packet,
 		__entry->cycle = cycles % CYCLES_PER_SECOND;
 		__entry->channel = s->context->channel;
 		if (s->direction == AMDTP_IN_STREAM) {
-			__entry->src = fw_parent_device(s->unit)->node_id;
-			__entry->dest = fw_parent_device(s->unit)->card->node_id;
-		} else {
 			__entry->src = fw_parent_device(s->unit)->card->node_id;
 			__entry->dest = fw_parent_device(s->unit)->node_id;
+		} else {
+			__entry->src = fw_parent_device(s->unit)->node_id;
+			__entry->dest = fw_parent_device(s->unit)->card->node_id;
 		}
 		if (cip_header) {
 			memcpy(__get_dynamic_array(cip_header), cip_header,

commit 8d3f1fdf521165cac96a21e35f5a1630147d91b1
Author: Takashi Sakamoto <o-takashi@sakamocchi.jp>
Date:   Sun May 19 19:01:09 2019 +0900

    ALSA: firewire-lib: unify tracing events to 'amdtp_packet' event
    
    Now four events of this module have the same arguments and probe timing.
    This commit adds a new event, 'amdtp_packet', and replace them. Filtering
    functionality of tracing framework is available to pick up events for
    inbound/outbound isochronous packets.
    
    Signed-off-by: Takashi Sakamoto <o-takashi@sakamocchi.jp>
    Signed-off-by: Takashi Iwai <tiwai@suse.de>

diff --git a/sound/firewire/amdtp-stream-trace.h b/sound/firewire/amdtp-stream-trace.h
index 614dfd08aa48..ab708857979f 100644
--- a/sound/firewire/amdtp-stream-trace.h
+++ b/sound/firewire/amdtp-stream-trace.h
@@ -13,7 +13,7 @@
 
 #include <linux/tracepoint.h>
 
-TRACE_EVENT(in_packet,
+TRACE_EVENT(amdtp_packet,
 	TP_PROTO(const struct amdtp_stream *s, u32 cycles, const __be32 *cip_header, unsigned int payload_length, unsigned int data_blocks, unsigned int index),
 	TP_ARGS(s, cycles, cip_header, payload_length, data_blocks, index),
 	TP_STRUCT__entry(
@@ -34,60 +34,13 @@ TRACE_EVENT(in_packet,
 		__entry->second = cycles / CYCLES_PER_SECOND;
 		__entry->cycle = cycles % CYCLES_PER_SECOND;
 		__entry->channel = s->context->channel;
-		__entry->src = fw_parent_device(s->unit)->node_id;
-		__entry->dest = fw_parent_device(s->unit)->card->node_id;
-		if (cip_header) {
-			memcpy(__get_dynamic_array(cip_header), cip_header,
-			       __get_dynamic_array_len(cip_header));
+		if (s->direction == AMDTP_IN_STREAM) {
+			__entry->src = fw_parent_device(s->unit)->node_id;
+			__entry->dest = fw_parent_device(s->unit)->card->node_id;
+		} else {
+			__entry->src = fw_parent_device(s->unit)->card->node_id;
+			__entry->dest = fw_parent_device(s->unit)->node_id;
 		}
-		__entry->payload_quadlets = payload_length / sizeof(__be32);
-		__entry->data_blocks = data_blocks;
-		__entry->data_block_counter = s->data_block_counter,
-		__entry->packet_index = s->packet_index;
-		__entry->irq = !!in_interrupt();
-		__entry->index = index;
-	),
-	TP_printk(
-		"%02u %04u %04x %04x %02d %03u %02u %03u %02u %01u %02u %s",
-		__entry->second,
-		__entry->cycle,
-		__entry->src,
-		__entry->dest,
-		__entry->channel,
-		__entry->payload_quadlets,
-		__entry->data_blocks,
-		__entry->data_block_counter,
-		__entry->packet_index,
-		__entry->irq,
-		__entry->index,
-		__print_array(__get_dynamic_array(cip_header),
-			      __get_dynamic_array_len(cip_header),
-			      sizeof(u8)))
-);
-
-TRACE_EVENT(out_packet,
-	TP_PROTO(const struct amdtp_stream *s, u32 cycles, const __be32 *cip_header, unsigned int payload_length, unsigned int data_blocks, unsigned int index),
-	TP_ARGS(s, cycles, cip_header, payload_length, data_blocks, index),
-	TP_STRUCT__entry(
-		__field(unsigned int, second)
-		__field(unsigned int, cycle)
-		__field(int, channel)
-		__field(int, src)
-		__field(int, dest)
-		__dynamic_array(u8, cip_header, cip_header ? 8 : 0)
-		__field(unsigned int, payload_quadlets)
-		__field(unsigned int, data_blocks)
-		__field(unsigned int, data_block_counter)
-		__field(unsigned int, packet_index)
-		__field(unsigned int, irq)
-		__field(unsigned int, index)
-	),
-	TP_fast_assign(
-		__entry->second = cycles / CYCLES_PER_SECOND;
-		__entry->cycle = cycles % CYCLES_PER_SECOND;
-		__entry->channel = s->context->channel;
-		__entry->src = fw_parent_device(s->unit)->card->node_id;
-		__entry->dest = fw_parent_device(s->unit)->node_id;
 		if (cip_header) {
 			memcpy(__get_dynamic_array(cip_header), cip_header,
 			       __get_dynamic_array_len(cip_header));
@@ -117,94 +70,6 @@ TRACE_EVENT(out_packet,
 			      sizeof(u8)))
 );
 
-TRACE_EVENT(in_packet_without_header,
-	TP_PROTO(const struct amdtp_stream *s, u32 cycles, unsigned int payload_length, unsigned int data_blocks, unsigned int index),
-	TP_ARGS(s, cycles, payload_length, data_blocks, index),
-	TP_STRUCT__entry(
-		__field(unsigned int, second)
-		__field(unsigned int, cycle)
-		__field(int, channel)
-		__field(int, src)
-		__field(int, dest)
-		__field(unsigned int, payload_quadlets)
-		__field(unsigned int, data_blocks)
-		__field(unsigned int, data_block_counter)
-		__field(unsigned int, packet_index)
-		__field(unsigned int, irq)
-		__field(unsigned int, index)
-	),
-	TP_fast_assign(
-		__entry->second = cycles / CYCLES_PER_SECOND;
-		__entry->cycle = cycles % CYCLES_PER_SECOND;
-		__entry->channel = s->context->channel;
-		__entry->src = fw_parent_device(s->unit)->node_id;
-		__entry->dest = fw_parent_device(s->unit)->card->node_id;
-		__entry->payload_quadlets = payload_length / sizeof(__be32);
-		__entry->data_blocks = data_blocks,
-		__entry->data_block_counter = s->data_block_counter,
-		__entry->packet_index = s->packet_index;
-		__entry->irq = !!in_interrupt();
-		__entry->index = index;
-	),
-	TP_printk(
-		"%02u %04u %04x %04x %02d %03u %02u %03u %02u %01u %02u",
-		__entry->second,
-		__entry->cycle,
-		__entry->src,
-		__entry->dest,
-		__entry->channel,
-		__entry->payload_quadlets,
-		__entry->data_blocks,
-		__entry->data_block_counter,
-		__entry->packet_index,
-		__entry->irq,
-		__entry->index)
-);
-
-TRACE_EVENT(out_packet_without_header,
-	TP_PROTO(const struct amdtp_stream *s, u32 cycles, unsigned int payload_length, unsigned int data_blocks, unsigned int index),
-	TP_ARGS(s, cycles, payload_length, data_blocks, index),
-	TP_STRUCT__entry(
-		__field(unsigned int, second)
-		__field(unsigned int, cycle)
-		__field(int, channel)
-		__field(int, src)
-		__field(int, dest)
-		__field(unsigned int, payload_quadlets)
-		__field(unsigned int, data_blocks)
-		__field(unsigned int, data_block_counter)
-		__field(unsigned int, packet_index)
-		__field(unsigned int, irq)
-		__field(unsigned int, index)
-	),
-	TP_fast_assign(
-		__entry->second = cycles / CYCLES_PER_SECOND;
-		__entry->cycle = cycles % CYCLES_PER_SECOND;
-		__entry->channel = s->context->channel;
-		__entry->src = fw_parent_device(s->unit)->card->node_id;
-		__entry->dest = fw_parent_device(s->unit)->node_id;
-		__entry->payload_quadlets = payload_length / sizeof(__be32);
-		__entry->data_blocks = data_blocks,
-		__entry->data_block_counter = s->data_block_counter,
-		__entry->packet_index = s->packet_index;
-		__entry->irq = !!in_interrupt();
-		__entry->index = index;
-	),
-	TP_printk(
-		"%02u %04u %04x %04x %02d %03u %02u %03u %02u %01u %02u",
-		__entry->second,
-		__entry->cycle,
-		__entry->src,
-		__entry->dest,
-		__entry->channel,
-		__entry->payload_quadlets,
-		__entry->data_blocks,
-		__entry->data_block_counter,
-		__entry->packet_index,
-		__entry->irq,
-		__entry->index)
-);
-
 #endif
 
 #undef TRACE_INCLUDE_PATH

commit bde2bbdb307a63e1829c113dba9a378eebe23b18
Author: Takashi Sakamoto <o-takashi@sakamocchi.jp>
Date:   Sun May 19 19:01:08 2019 +0900

    ALSA: firewire-lib: use dynamic array for CIP header of tracing events
    
    This modules handles two types of isochronous packet; one has CIP header
    in IEC 61883-1/6 and another doesn't. The module also have tracing events
    corresponding to the types of packet. To unify the events, one event
    should be probed with or without CIP header.
    
    This commit uses dynamic array for the events to be available for the
    types of packet.
    
    Signed-off-by: Takashi Sakamoto <o-takashi@sakamocchi.jp>
    Signed-off-by: Takashi Iwai <tiwai@suse.de>

diff --git a/sound/firewire/amdtp-stream-trace.h b/sound/firewire/amdtp-stream-trace.h
index 30c547552cd2..614dfd08aa48 100644
--- a/sound/firewire/amdtp-stream-trace.h
+++ b/sound/firewire/amdtp-stream-trace.h
@@ -22,8 +22,7 @@ TRACE_EVENT(in_packet,
 		__field(int, channel)
 		__field(int, src)
 		__field(int, dest)
-		__field(u32, cip_header0)
-		__field(u32, cip_header1)
+		__dynamic_array(u8, cip_header, cip_header ? 8 : 0)
 		__field(unsigned int, payload_quadlets)
 		__field(unsigned int, data_blocks)
 		__field(unsigned int, data_block_counter)
@@ -37,8 +36,10 @@ TRACE_EVENT(in_packet,
 		__entry->channel = s->context->channel;
 		__entry->src = fw_parent_device(s->unit)->node_id;
 		__entry->dest = fw_parent_device(s->unit)->card->node_id;
-		__entry->cip_header0 = be32_to_cpu(cip_header[0]);
-		__entry->cip_header1 = be32_to_cpu(cip_header[1]);
+		if (cip_header) {
+			memcpy(__get_dynamic_array(cip_header), cip_header,
+			       __get_dynamic_array_len(cip_header));
+		}
 		__entry->payload_quadlets = payload_length / sizeof(__be32);
 		__entry->data_blocks = data_blocks;
 		__entry->data_block_counter = s->data_block_counter,
@@ -47,20 +48,21 @@ TRACE_EVENT(in_packet,
 		__entry->index = index;
 	),
 	TP_printk(
-		"%02u %04u %04x %04x %02d %08x %08x %03u %02u %03u %02u %01u %02u",
+		"%02u %04u %04x %04x %02d %03u %02u %03u %02u %01u %02u %s",
 		__entry->second,
 		__entry->cycle,
 		__entry->src,
 		__entry->dest,
 		__entry->channel,
-		__entry->cip_header0,
-		__entry->cip_header1,
 		__entry->payload_quadlets,
 		__entry->data_blocks,
 		__entry->data_block_counter,
 		__entry->packet_index,
 		__entry->irq,
-		__entry->index)
+		__entry->index,
+		__print_array(__get_dynamic_array(cip_header),
+			      __get_dynamic_array_len(cip_header),
+			      sizeof(u8)))
 );
 
 TRACE_EVENT(out_packet,
@@ -72,8 +74,7 @@ TRACE_EVENT(out_packet,
 		__field(int, channel)
 		__field(int, src)
 		__field(int, dest)
-		__field(u32, cip_header0)
-		__field(u32, cip_header1)
+		__dynamic_array(u8, cip_header, cip_header ? 8 : 0)
 		__field(unsigned int, payload_quadlets)
 		__field(unsigned int, data_blocks)
 		__field(unsigned int, data_block_counter)
@@ -87,8 +88,10 @@ TRACE_EVENT(out_packet,
 		__entry->channel = s->context->channel;
 		__entry->src = fw_parent_device(s->unit)->card->node_id;
 		__entry->dest = fw_parent_device(s->unit)->node_id;
-		__entry->cip_header0 = be32_to_cpu(cip_header[0]);
-		__entry->cip_header1 = be32_to_cpu(cip_header[1]);
+		if (cip_header) {
+			memcpy(__get_dynamic_array(cip_header), cip_header,
+			       __get_dynamic_array_len(cip_header));
+		}
 		__entry->payload_quadlets = payload_length / sizeof(__be32);
 		__entry->data_blocks = data_blocks;
 		__entry->data_block_counter = s->data_block_counter,
@@ -97,20 +100,21 @@ TRACE_EVENT(out_packet,
 		__entry->index = index;
 	),
 	TP_printk(
-		"%02u %04u %04x %04x %02d %08x %08x %03u %02u %03u %02u %01u %02u",
+		"%02u %04u %04x %04x %02d %03u %02u %03u %02u %01u %02u %s",
 		__entry->second,
 		__entry->cycle,
 		__entry->src,
 		__entry->dest,
 		__entry->channel,
-		__entry->cip_header0,
-		__entry->cip_header1,
 		__entry->payload_quadlets,
 		__entry->data_blocks,
 		__entry->data_block_counter,
 		__entry->packet_index,
 		__entry->irq,
-		__entry->index)
+		__entry->index,
+		__print_array(__get_dynamic_array(cip_header),
+			      __get_dynamic_array_len(cip_header),
+			      sizeof(u8)))
 );
 
 TRACE_EVENT(in_packet_without_header,

commit a8520f3e9314edddf95479c4796f05b7d594be32
Author: Takashi Sakamoto <o-takashi@sakamocchi.jp>
Date:   Sun May 19 19:01:07 2019 +0900

    ALSA: firewire-lib: use the same unit for payload argument in tracing events
    
    The most of tracing event in this module have the size of payload in
    byte unit, however 'in_packet_without_header' event have the argument
    in quadlet unit.
    
    This commit change the unit for argument to be consistent.
    
    Signed-off-by: Takashi Sakamoto <o-takashi@sakamocchi.jp>
    Signed-off-by: Takashi Iwai <tiwai@suse.de>

diff --git a/sound/firewire/amdtp-stream-trace.h b/sound/firewire/amdtp-stream-trace.h
index 95343fb17583..30c547552cd2 100644
--- a/sound/firewire/amdtp-stream-trace.h
+++ b/sound/firewire/amdtp-stream-trace.h
@@ -39,7 +39,7 @@ TRACE_EVENT(in_packet,
 		__entry->dest = fw_parent_device(s->unit)->card->node_id;
 		__entry->cip_header0 = be32_to_cpu(cip_header[0]);
 		__entry->cip_header1 = be32_to_cpu(cip_header[1]);
-		__entry->payload_quadlets = payload_length / 4;
+		__entry->payload_quadlets = payload_length / sizeof(__be32);
 		__entry->data_blocks = data_blocks;
 		__entry->data_block_counter = s->data_block_counter,
 		__entry->packet_index = s->packet_index;
@@ -89,7 +89,7 @@ TRACE_EVENT(out_packet,
 		__entry->dest = fw_parent_device(s->unit)->node_id;
 		__entry->cip_header0 = be32_to_cpu(cip_header[0]);
 		__entry->cip_header1 = be32_to_cpu(cip_header[1]);
-		__entry->payload_quadlets = payload_length / 4;
+		__entry->payload_quadlets = payload_length / sizeof(__be32);
 		__entry->data_blocks = data_blocks;
 		__entry->data_block_counter = s->data_block_counter,
 		__entry->packet_index = s->packet_index;
@@ -114,8 +114,8 @@ TRACE_EVENT(out_packet,
 );
 
 TRACE_EVENT(in_packet_without_header,
-	TP_PROTO(const struct amdtp_stream *s, u32 cycles, unsigned int payload_quadlets, unsigned int data_blocks, unsigned int index),
-	TP_ARGS(s, cycles, payload_quadlets, data_blocks, index),
+	TP_PROTO(const struct amdtp_stream *s, u32 cycles, unsigned int payload_length, unsigned int data_blocks, unsigned int index),
+	TP_ARGS(s, cycles, payload_length, data_blocks, index),
 	TP_STRUCT__entry(
 		__field(unsigned int, second)
 		__field(unsigned int, cycle)
@@ -135,7 +135,7 @@ TRACE_EVENT(in_packet_without_header,
 		__entry->channel = s->context->channel;
 		__entry->src = fw_parent_device(s->unit)->node_id;
 		__entry->dest = fw_parent_device(s->unit)->card->node_id;
-		__entry->payload_quadlets = payload_quadlets;
+		__entry->payload_quadlets = payload_length / sizeof(__be32);
 		__entry->data_blocks = data_blocks,
 		__entry->data_block_counter = s->data_block_counter,
 		__entry->packet_index = s->packet_index;
@@ -179,7 +179,7 @@ TRACE_EVENT(out_packet_without_header,
 		__entry->channel = s->context->channel;
 		__entry->src = fw_parent_device(s->unit)->card->node_id;
 		__entry->dest = fw_parent_device(s->unit)->node_id;
-		__entry->payload_quadlets = payload_length / 4;
+		__entry->payload_quadlets = payload_length / sizeof(__be32);
 		__entry->data_blocks = data_blocks,
 		__entry->data_block_counter = s->data_block_counter,
 		__entry->packet_index = s->packet_index;

commit 64d0bf4d4977d18983bce6ad2868c9f75ec3a9f1
Author: Takashi Sakamoto <o-takashi@sakamocchi.jp>
Date:   Sun May 19 19:01:06 2019 +0900

    ALSA: firewire-lib: add data_blocks/data_block_counter parameter to in_packet/out_packet tracing events
    
    Tracing events for packets without CIP header have a parameter of
    data_blocks/data_block_counter, but events for packets with CIP header
    don't. This is not good to unify these events.
    
    This commit adds the missing parameters to the events. In timing to
    probe 'in_packet' event, data_blocks and data_block_counter are not
    calculated yet. This commit also changes the timing.
    
    Signed-off-by: Takashi Sakamoto <o-takashi@sakamocchi.jp>
    Signed-off-by: Takashi Iwai <tiwai@suse.de>

diff --git a/sound/firewire/amdtp-stream-trace.h b/sound/firewire/amdtp-stream-trace.h
index a86a827eab90..95343fb17583 100644
--- a/sound/firewire/amdtp-stream-trace.h
+++ b/sound/firewire/amdtp-stream-trace.h
@@ -14,8 +14,8 @@
 #include <linux/tracepoint.h>
 
 TRACE_EVENT(in_packet,
-	TP_PROTO(const struct amdtp_stream *s, u32 cycles, const __be32 *cip_header, unsigned int payload_length, unsigned int index),
-	TP_ARGS(s, cycles, cip_header, payload_length, index),
+	TP_PROTO(const struct amdtp_stream *s, u32 cycles, const __be32 *cip_header, unsigned int payload_length, unsigned int data_blocks, unsigned int index),
+	TP_ARGS(s, cycles, cip_header, payload_length, data_blocks, index),
 	TP_STRUCT__entry(
 		__field(unsigned int, second)
 		__field(unsigned int, cycle)
@@ -25,6 +25,8 @@ TRACE_EVENT(in_packet,
 		__field(u32, cip_header0)
 		__field(u32, cip_header1)
 		__field(unsigned int, payload_quadlets)
+		__field(unsigned int, data_blocks)
+		__field(unsigned int, data_block_counter)
 		__field(unsigned int, packet_index)
 		__field(unsigned int, irq)
 		__field(unsigned int, index)
@@ -38,12 +40,14 @@ TRACE_EVENT(in_packet,
 		__entry->cip_header0 = be32_to_cpu(cip_header[0]);
 		__entry->cip_header1 = be32_to_cpu(cip_header[1]);
 		__entry->payload_quadlets = payload_length / 4;
+		__entry->data_blocks = data_blocks;
+		__entry->data_block_counter = s->data_block_counter,
 		__entry->packet_index = s->packet_index;
 		__entry->irq = !!in_interrupt();
 		__entry->index = index;
 	),
 	TP_printk(
-		"%02u %04u %04x %04x %02d %08x %08x %03u %02u %01u %02u",
+		"%02u %04u %04x %04x %02d %08x %08x %03u %02u %03u %02u %01u %02u",
 		__entry->second,
 		__entry->cycle,
 		__entry->src,
@@ -52,14 +56,16 @@ TRACE_EVENT(in_packet,
 		__entry->cip_header0,
 		__entry->cip_header1,
 		__entry->payload_quadlets,
+		__entry->data_blocks,
+		__entry->data_block_counter,
 		__entry->packet_index,
 		__entry->irq,
 		__entry->index)
 );
 
 TRACE_EVENT(out_packet,
-	TP_PROTO(const struct amdtp_stream *s, u32 cycles, __be32 *cip_header, unsigned int payload_length, unsigned int index),
-	TP_ARGS(s, cycles, cip_header, payload_length, index),
+	TP_PROTO(const struct amdtp_stream *s, u32 cycles, const __be32 *cip_header, unsigned int payload_length, unsigned int data_blocks, unsigned int index),
+	TP_ARGS(s, cycles, cip_header, payload_length, data_blocks, index),
 	TP_STRUCT__entry(
 		__field(unsigned int, second)
 		__field(unsigned int, cycle)
@@ -69,6 +75,8 @@ TRACE_EVENT(out_packet,
 		__field(u32, cip_header0)
 		__field(u32, cip_header1)
 		__field(unsigned int, payload_quadlets)
+		__field(unsigned int, data_blocks)
+		__field(unsigned int, data_block_counter)
 		__field(unsigned int, packet_index)
 		__field(unsigned int, irq)
 		__field(unsigned int, index)
@@ -82,12 +90,14 @@ TRACE_EVENT(out_packet,
 		__entry->cip_header0 = be32_to_cpu(cip_header[0]);
 		__entry->cip_header1 = be32_to_cpu(cip_header[1]);
 		__entry->payload_quadlets = payload_length / 4;
+		__entry->data_blocks = data_blocks;
+		__entry->data_block_counter = s->data_block_counter,
 		__entry->packet_index = s->packet_index;
 		__entry->irq = !!in_interrupt();
 		__entry->index = index;
 	),
 	TP_printk(
-		"%02u %04u %04x %04x %02d %08x %08x %03u %02u %01u %02u",
+		"%02u %04u %04x %04x %02d %08x %08x %03u %02u %03u %02u %01u %02u",
 		__entry->second,
 		__entry->cycle,
 		__entry->src,
@@ -96,6 +106,8 @@ TRACE_EVENT(out_packet,
 		__entry->cip_header0,
 		__entry->cip_header1,
 		__entry->payload_quadlets,
+		__entry->data_blocks,
+		__entry->data_block_counter,
 		__entry->packet_index,
 		__entry->irq,
 		__entry->index)

commit 4a10cecc41825becb3283be5e310759f4994f2ea
Author: Takashi Sakamoto <o-takashi@sakamocchi.jp>
Date:   Sun May 19 19:01:05 2019 +0900

    ALSA: firewire-lib: use the same type of argument for CIP header for tracing event
    
    An argument for CIP header in 'in_packet' event is not the same type in
    'out_packet' event. This is not good to unify these events.
    
    This commit uses the same type of argument for these events.
    
    Signed-off-by: Takashi Sakamoto <o-takashi@sakamocchi.jp>
    Signed-off-by: Takashi Iwai <tiwai@suse.de>

diff --git a/sound/firewire/amdtp-stream-trace.h b/sound/firewire/amdtp-stream-trace.h
index ac20acf48fc6..a86a827eab90 100644
--- a/sound/firewire/amdtp-stream-trace.h
+++ b/sound/firewire/amdtp-stream-trace.h
@@ -14,7 +14,7 @@
 #include <linux/tracepoint.h>
 
 TRACE_EVENT(in_packet,
-	TP_PROTO(const struct amdtp_stream *s, u32 cycles, u32 *cip_header, unsigned int payload_length, unsigned int index),
+	TP_PROTO(const struct amdtp_stream *s, u32 cycles, const __be32 *cip_header, unsigned int payload_length, unsigned int index),
 	TP_ARGS(s, cycles, cip_header, payload_length, index),
 	TP_STRUCT__entry(
 		__field(unsigned int, second)
@@ -35,8 +35,8 @@ TRACE_EVENT(in_packet,
 		__entry->channel = s->context->channel;
 		__entry->src = fw_parent_device(s->unit)->node_id;
 		__entry->dest = fw_parent_device(s->unit)->card->node_id;
-		__entry->cip_header0 = cip_header[0];
-		__entry->cip_header1 = cip_header[1];
+		__entry->cip_header0 = be32_to_cpu(cip_header[0]);
+		__entry->cip_header1 = be32_to_cpu(cip_header[1]);
 		__entry->payload_quadlets = payload_length / 4;
 		__entry->packet_index = s->packet_index;
 		__entry->irq = !!in_interrupt();

commit 5ef108c53e6efd695e32aad969638ccbc35b4be9
Author: Takashi Sakamoto <o-takashi@sakamocchi.jp>
Date:   Sat Dec 15 19:03:21 2018 +0900

    ALSA: firewire-lib: use the same print format for 'without_header' tracepoints
    
    An initial commit to add tracepoints for packets without CIP headers
    uses different print formats for added tracepoints. However this is not
    convenient for users/developers to prepare debug tools.
    
    This commit uses the same format for the two tracepoints.
    
    Cc: <stable@vger.kernel.org> # v4.12+
    Fixes: b164d2fd6e49 ('ALSA: firewire_lib: add tracepoints for packets without CIP headers')
    Signed-off-by: Takashi Sakamoto <o-takashi@sakamocchi.jp>
    Signed-off-by: Takashi Iwai <tiwai@suse.de>

diff --git a/sound/firewire/amdtp-stream-trace.h b/sound/firewire/amdtp-stream-trace.h
index c05b3da0aa1c..ac20acf48fc6 100644
--- a/sound/firewire/amdtp-stream-trace.h
+++ b/sound/firewire/amdtp-stream-trace.h
@@ -131,7 +131,7 @@ TRACE_EVENT(in_packet_without_header,
 		__entry->index = index;
 	),
 	TP_printk(
-		"%02u %04u %04x %04x %02d %03u %3u %3u %02u %01u %02u",
+		"%02u %04u %04x %04x %02d %03u %02u %03u %02u %01u %02u",
 		__entry->second,
 		__entry->cycle,
 		__entry->src,

commit aa9a9e39b4f65733bf19d90cbd026e85a74efb99
Author: Takashi Sakamoto <o-takashi@sakamocchi.jp>
Date:   Sat Dec 15 19:03:20 2018 +0900

    ALSA: firewire-lib: fix wrong assignment for 'out_packet_without_header' tracepoint
    
    An initial commit to add tracepoints for packets without CIP headers
    introduces a wrong assignment to 'data_blocks' value of
    'out_packet_without_header' tracepoint.
    
    This commit fixes the bug.
    
    Cc: <stable@vger.kernel.org> # v4.12+
    Fixes: b164d2fd6e49 ('ALSA: firewire_lib: add tracepoints for packets without CIP headers')
    Signed-off-by: Takashi Sakamoto <o-takashi@sakamocchi.jp>
    Signed-off-by: Takashi Iwai <tiwai@suse.de>

diff --git a/sound/firewire/amdtp-stream-trace.h b/sound/firewire/amdtp-stream-trace.h
index 54cdd4ffa9ce..c05b3da0aa1c 100644
--- a/sound/firewire/amdtp-stream-trace.h
+++ b/sound/firewire/amdtp-stream-trace.h
@@ -169,7 +169,7 @@ TRACE_EVENT(out_packet_without_header,
 		__entry->dest = fw_parent_device(s->unit)->node_id;
 		__entry->payload_quadlets = payload_length / 4;
 		__entry->data_blocks = data_blocks,
-		__entry->data_blocks = s->data_block_counter,
+		__entry->data_block_counter = s->data_block_counter,
 		__entry->packet_index = s->packet_index;
 		__entry->irq = !!in_interrupt();
 		__entry->index = index;

commit c105547501016897194358b11451608a8d5f9a02
Author: Alexei Starovoitov <ast@kernel.org>
Date:   Wed Mar 28 12:05:32 2018 -0700

    treewide: remove large struct-pass-by-value from tracepoint arguments
    
    - fix trace_hfi1_ctxt_info() to pass large struct by reference instead of by value
    - convert 'type array[]' tracepoint arguments into 'type *array',
      since compiler will warn that sizeof('type array[]') == sizeof('type *array')
      and later should be used instead
    
    The CAST_TO_U64 macro in the later patch will enforce that tracepoint
    arguments can only be integers, pointers, or less than 8 byte structures.
    Larger structures should be passed by reference.
    
    Signed-off-by: Alexei Starovoitov <ast@kernel.org>
    Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>

diff --git a/sound/firewire/amdtp-stream-trace.h b/sound/firewire/amdtp-stream-trace.h
index ea0d486652c8..54cdd4ffa9ce 100644
--- a/sound/firewire/amdtp-stream-trace.h
+++ b/sound/firewire/amdtp-stream-trace.h
@@ -14,7 +14,7 @@
 #include <linux/tracepoint.h>
 
 TRACE_EVENT(in_packet,
-	TP_PROTO(const struct amdtp_stream *s, u32 cycles, u32 cip_header[2], unsigned int payload_length, unsigned int index),
+	TP_PROTO(const struct amdtp_stream *s, u32 cycles, u32 *cip_header, unsigned int payload_length, unsigned int index),
 	TP_ARGS(s, cycles, cip_header, payload_length, index),
 	TP_STRUCT__entry(
 		__field(unsigned int, second)

commit b164d2fd6e4985e9270755477dde063e6e48461e
Author: Takashi Sakamoto <o-takashi@sakamocchi.jp>
Date:   Sun Apr 9 21:33:27 2017 +0900

    ALSA: firewire_lib: add tracepoints for packets without CIP headers
    
    Unique protocol is used for RME Fireface series. In this protocol,
    payload format for isochronous packet is not compliant to CIP in
    IEC 61883-1/6. The packet includes data blocks just with data channels,
    without headers and any metadata.
    
    In previous commits, ALSA IEC 61883-1/6 engine supports this protocol.
    However, tracepoints are not supported yet, unlike implementation for
    IEC 61883-1/6 protocol. This commit adds support of tracepoints for
    the protocol.
    
    Signed-off-by: Takashi Sakamoto <o-takashi@sakamocchi.jp>
    Signed-off-by: Takashi Iwai <tiwai@suse.de>

diff --git a/sound/firewire/amdtp-stream-trace.h b/sound/firewire/amdtp-stream-trace.h
index 850b36e27d0d..ea0d486652c8 100644
--- a/sound/firewire/amdtp-stream-trace.h
+++ b/sound/firewire/amdtp-stream-trace.h
@@ -101,6 +101,94 @@ TRACE_EVENT(out_packet,
 		__entry->index)
 );
 
+TRACE_EVENT(in_packet_without_header,
+	TP_PROTO(const struct amdtp_stream *s, u32 cycles, unsigned int payload_quadlets, unsigned int data_blocks, unsigned int index),
+	TP_ARGS(s, cycles, payload_quadlets, data_blocks, index),
+	TP_STRUCT__entry(
+		__field(unsigned int, second)
+		__field(unsigned int, cycle)
+		__field(int, channel)
+		__field(int, src)
+		__field(int, dest)
+		__field(unsigned int, payload_quadlets)
+		__field(unsigned int, data_blocks)
+		__field(unsigned int, data_block_counter)
+		__field(unsigned int, packet_index)
+		__field(unsigned int, irq)
+		__field(unsigned int, index)
+	),
+	TP_fast_assign(
+		__entry->second = cycles / CYCLES_PER_SECOND;
+		__entry->cycle = cycles % CYCLES_PER_SECOND;
+		__entry->channel = s->context->channel;
+		__entry->src = fw_parent_device(s->unit)->node_id;
+		__entry->dest = fw_parent_device(s->unit)->card->node_id;
+		__entry->payload_quadlets = payload_quadlets;
+		__entry->data_blocks = data_blocks,
+		__entry->data_block_counter = s->data_block_counter,
+		__entry->packet_index = s->packet_index;
+		__entry->irq = !!in_interrupt();
+		__entry->index = index;
+	),
+	TP_printk(
+		"%02u %04u %04x %04x %02d %03u %3u %3u %02u %01u %02u",
+		__entry->second,
+		__entry->cycle,
+		__entry->src,
+		__entry->dest,
+		__entry->channel,
+		__entry->payload_quadlets,
+		__entry->data_blocks,
+		__entry->data_block_counter,
+		__entry->packet_index,
+		__entry->irq,
+		__entry->index)
+);
+
+TRACE_EVENT(out_packet_without_header,
+	TP_PROTO(const struct amdtp_stream *s, u32 cycles, unsigned int payload_length, unsigned int data_blocks, unsigned int index),
+	TP_ARGS(s, cycles, payload_length, data_blocks, index),
+	TP_STRUCT__entry(
+		__field(unsigned int, second)
+		__field(unsigned int, cycle)
+		__field(int, channel)
+		__field(int, src)
+		__field(int, dest)
+		__field(unsigned int, payload_quadlets)
+		__field(unsigned int, data_blocks)
+		__field(unsigned int, data_block_counter)
+		__field(unsigned int, packet_index)
+		__field(unsigned int, irq)
+		__field(unsigned int, index)
+	),
+	TP_fast_assign(
+		__entry->second = cycles / CYCLES_PER_SECOND;
+		__entry->cycle = cycles % CYCLES_PER_SECOND;
+		__entry->channel = s->context->channel;
+		__entry->src = fw_parent_device(s->unit)->card->node_id;
+		__entry->dest = fw_parent_device(s->unit)->node_id;
+		__entry->payload_quadlets = payload_length / 4;
+		__entry->data_blocks = data_blocks,
+		__entry->data_blocks = s->data_block_counter,
+		__entry->packet_index = s->packet_index;
+		__entry->irq = !!in_interrupt();
+		__entry->index = index;
+	),
+	TP_printk(
+		"%02u %04u %04x %04x %02d %03u %02u %03u %02u %01u %02u",
+		__entry->second,
+		__entry->cycle,
+		__entry->src,
+		__entry->dest,
+		__entry->channel,
+		__entry->payload_quadlets,
+		__entry->data_blocks,
+		__entry->data_block_counter,
+		__entry->packet_index,
+		__entry->irq,
+		__entry->index)
+);
+
 #endif
 
 #undef TRACE_INCLUDE_PATH

commit ff0fb5aaa8799701aa01bd1f2cdaf93ce98bbe60
Author: Takashi Sakamoto <o-takashi@sakamocchi.jp>
Date:   Fri Mar 31 22:06:06 2017 +0900

    ALSA: firewire-lib: use the same prototype for functions to handle packet
    
    Audio and music units of RME Fireface series use its own protocol for
    isochronous packets to transfer data. This protocol requires ALSA IEC
    61883-1/6 engine to have alternative functions.
    
    This commit is a preparation for the protocol.
    
    Signed-off-by: Takashi Sakamoto <o-takashi@sakamocchi.jp>
    Signed-off-by: Takashi Iwai <tiwai@suse.de>

diff --git a/sound/firewire/amdtp-stream-trace.h b/sound/firewire/amdtp-stream-trace.h
index 9c04faf206b2..850b36e27d0d 100644
--- a/sound/firewire/amdtp-stream-trace.h
+++ b/sound/firewire/amdtp-stream-trace.h
@@ -14,8 +14,8 @@
 #include <linux/tracepoint.h>
 
 TRACE_EVENT(in_packet,
-	TP_PROTO(const struct amdtp_stream *s, u32 cycles, u32 cip_header[2], unsigned int payload_quadlets, unsigned int index),
-	TP_ARGS(s, cycles, cip_header, payload_quadlets, index),
+	TP_PROTO(const struct amdtp_stream *s, u32 cycles, u32 cip_header[2], unsigned int payload_length, unsigned int index),
+	TP_ARGS(s, cycles, cip_header, payload_length, index),
 	TP_STRUCT__entry(
 		__field(unsigned int, second)
 		__field(unsigned int, cycle)
@@ -37,7 +37,7 @@ TRACE_EVENT(in_packet,
 		__entry->dest = fw_parent_device(s->unit)->card->node_id;
 		__entry->cip_header0 = cip_header[0];
 		__entry->cip_header1 = cip_header[1];
-		__entry->payload_quadlets = payload_quadlets;
+		__entry->payload_quadlets = payload_length / 4;
 		__entry->packet_index = s->packet_index;
 		__entry->irq = !!in_interrupt();
 		__entry->index = index;

commit 17e1717c11a34f9b0956e33e0c4a4e4ae8c51a57
Author: Takashi Sakamoto <o-takashi@sakamocchi.jp>
Date:   Wed May 18 22:27:43 2016 +0900

    ALSA: firewire-lib: change a member of event structure to suppress sparse wanings to bool type
    
    Commit a9c4284bf5a9 ("ALSA: firewire-lib: add context information to
    tracepoints") adds new members to tracepoint events of this module, to
    represent context information. One of the members is bool type and
    this causes sparse warnings.
    
    16:1: warning: expression using sizeof bool
    60:1: warning: expression using sizeof bool
    16:1: warning: odd constant _Bool cast (ffffffffffffffff becomes 1)
    60:1: warning: odd constant _Bool cast (ffffffffffffffff becomes 1)
    
    This commit suppresses the warnings, by changing type of the member
    to 'unsigned int'. Additionally, this commit applies '!!' idiom to
    get 0/1 from 'in_interrupt()'.
    
    Fixes: a9c4284bf5a9 ("ALSA: firewire-lib: add context information to tracepoints")
    Signed-off-by: Takashi Sakamoto <o-takashi@sakamocchi.jp>
    Signed-off-by: Takashi Iwai <tiwai@suse.de>

diff --git a/sound/firewire/amdtp-stream-trace.h b/sound/firewire/amdtp-stream-trace.h
index 16225792b722..9c04faf206b2 100644
--- a/sound/firewire/amdtp-stream-trace.h
+++ b/sound/firewire/amdtp-stream-trace.h
@@ -26,7 +26,7 @@ TRACE_EVENT(in_packet,
 		__field(u32, cip_header1)
 		__field(unsigned int, payload_quadlets)
 		__field(unsigned int, packet_index)
-		__field(bool, irq)
+		__field(unsigned int, irq)
 		__field(unsigned int, index)
 	),
 	TP_fast_assign(
@@ -39,7 +39,7 @@ TRACE_EVENT(in_packet,
 		__entry->cip_header1 = cip_header[1];
 		__entry->payload_quadlets = payload_quadlets;
 		__entry->packet_index = s->packet_index;
-		__entry->irq = in_interrupt();
+		__entry->irq = !!in_interrupt();
 		__entry->index = index;
 	),
 	TP_printk(
@@ -70,7 +70,7 @@ TRACE_EVENT(out_packet,
 		__field(u32, cip_header1)
 		__field(unsigned int, payload_quadlets)
 		__field(unsigned int, packet_index)
-		__field(bool, irq)
+		__field(unsigned int, irq)
 		__field(unsigned int, index)
 	),
 	TP_fast_assign(
@@ -83,7 +83,7 @@ TRACE_EVENT(out_packet,
 		__entry->cip_header1 = be32_to_cpu(cip_header[1]);
 		__entry->payload_quadlets = payload_length / 4;
 		__entry->packet_index = s->packet_index;
-		__entry->irq = in_interrupt();
+		__entry->irq = !!in_interrupt();
 		__entry->index = index;
 	),
 	TP_printk(

commit a9c4284bf5a95c4788e7fbf3c46b14dcbfda3a6d
Author: Takashi Sakamoto <o-takashi@sakamocchi.jp>
Date:   Wed May 11 07:33:27 2016 +0900

    ALSA: firewire-lib: add context information to tracepoints
    
    In current implementation, packet processing is done in both of software
    IRQ contexts of IR/IT contexts and process contexts.
    
    This is usual interrupt handling of IR/IT context for 1394 OHCI.
    (in hardware IRQ context)
    irq_handler() (drivers/firewire/ohci.c)
    ->tasklet_schedule()
    (in software IRQ context)
    handle_it_packet() or handle_ir_packet_per_buffer() (drivers/firewire/ohci.c)
    ->flush_iso_completions()
      ->struct fw_iso_context.callback.sc()
      = out_stream_callback() or in_stream_callback()
    
    However, we have another chance for packet processing. It's done in PCM
    frame handling via ALSA PCM interfaces.
    (in process context)
    ioctl(i.e. SNDRV_PCM_IOCTL_HWSYNC)
    ->snd_pcm_hwsync() (sound/core/pcm_native.c)
      ->snd_pcm_update_hw_ptr() (sound/core/pcm_lib.c)
        ->snd_pcm_update_hw_ptr0()
          ->struct snd_pcm_ops.pointer()
          = amdtp_stream_pcm_pointer()
            ->fw_iso_context_flush_completions() (drivers/firewire/core-iso.c)
              ->struct fw_card_driver.flush_iso_completions()
              = ohci_flush_iso_completions() (drivers/firewire/ohci.c)
                ->flush_iso_completions()
                  ->struct fw_iso_context.callback.sc()
                  = out_stream_callback() or in_stream_callback()
    
    This design is for a better granularity of PCM pointer. When ioctl(2) is
    executed with some commands for ALSA PCM interface, queued packets are
    handled at first. Then, the latest number of handled PCM frames is
    reported. The number can represent PCM frames transferred in most near
    isochronous cycle.
    
    Current tracepoints include no information to distinguish running contexts.
    When tracing the interval of software IRQ context, this is not good.
    
    This commit adds more information for current context. Additionally, the
    index of packet processed in one context is added in a case that packet
    processing is executed in continuous context of the same kind,
    
    As a result, the output includes 11 fields with additional two fields
    to commit 0c95c1d6197f ("ALSA: firewire-lib: add tracepoints to dump a part
    of isochronous packet data"):
    17131.9186: out_packet: 07 7494 ffc0 ffc1 00 000700c0 9001a496 058 45 1 13
    17131.9186: out_packet: 07 7495 ffc0 ffc1 00 000700c8 9001ba00 058 46 1 14
    17131.9186: out_packet: 07 7496 ffc0 ffc1 00 000700d0 9001ffff 002 47 1 15
    17131.9189: out_packet: 07 7497 ffc0 ffc1 00 000700d0 9001d36a 058 00 0 00
    17131.9189: out_packet: 07 7498 ffc0 ffc1 00 000700d8 9001e8d4 058 01 0 01
    17131.9189: out_packet: 07 7499 ffc0 ffc1 00 000700e0 9001023e 058 02 0 00
    17131.9206: in_packet:  07 7447 ffc1 ffc0 01 3f070072 9001783d 058 32 1 00
    17131.9206: in_packet:  07 7448 ffc1 ffc0 01 3f070072 90ffffff 002 33 1 01
    17131.9206: in_packet:  07 7449 ffc1 ffc0 01 3f07007a 900191a8 058 34 1 02
    (Here, some common fields are omitted so that a line is within 80
    characters.)
    
    The legend is:
     - The second of cycle scheduled for the packet
     - The count of cycle scheduled for the packet
     - The ID of node as source (hex)
     - The ID of node as destination (hex)
     - The value of isochronous channel
     - The first quadlet of CIP header (hex)
     - The second quadlet of CIP header (hex)
     - The number of included quadlets
     - The index of packet in a buffer maintained by this module
     - 0 in process context, 1 in IRQ context
     - The index of packet processed in the context
    
    Signed-off-by: Takashi Sakamoto <o-takashi@sakamocchi.jp>
    Signed-off-by: Takashi Iwai <tiwai@suse.de>

diff --git a/sound/firewire/amdtp-stream-trace.h b/sound/firewire/amdtp-stream-trace.h
index 425d1d7f26bc..16225792b722 100644
--- a/sound/firewire/amdtp-stream-trace.h
+++ b/sound/firewire/amdtp-stream-trace.h
@@ -14,8 +14,8 @@
 #include <linux/tracepoint.h>
 
 TRACE_EVENT(in_packet,
-	TP_PROTO(const struct amdtp_stream *s, u32 cycles, u32 cip_header[2], unsigned int payload_quadlets),
-	TP_ARGS(s, cycles, cip_header, payload_quadlets),
+	TP_PROTO(const struct amdtp_stream *s, u32 cycles, u32 cip_header[2], unsigned int payload_quadlets, unsigned int index),
+	TP_ARGS(s, cycles, cip_header, payload_quadlets, index),
 	TP_STRUCT__entry(
 		__field(unsigned int, second)
 		__field(unsigned int, cycle)
@@ -25,6 +25,8 @@ TRACE_EVENT(in_packet,
 		__field(u32, cip_header0)
 		__field(u32, cip_header1)
 		__field(unsigned int, payload_quadlets)
+		__field(unsigned int, packet_index)
+		__field(bool, irq)
 		__field(unsigned int, index)
 	),
 	TP_fast_assign(
@@ -36,10 +38,12 @@ TRACE_EVENT(in_packet,
 		__entry->cip_header0 = cip_header[0];
 		__entry->cip_header1 = cip_header[1];
 		__entry->payload_quadlets = payload_quadlets;
-		__entry->index = s->packet_index;
+		__entry->packet_index = s->packet_index;
+		__entry->irq = in_interrupt();
+		__entry->index = index;
 	),
 	TP_printk(
-		"%02u %04u %04x %04x %02d %08x %08x %03u %02u",
+		"%02u %04u %04x %04x %02d %08x %08x %03u %02u %01u %02u",
 		__entry->second,
 		__entry->cycle,
 		__entry->src,
@@ -48,12 +52,14 @@ TRACE_EVENT(in_packet,
 		__entry->cip_header0,
 		__entry->cip_header1,
 		__entry->payload_quadlets,
+		__entry->packet_index,
+		__entry->irq,
 		__entry->index)
 );
 
 TRACE_EVENT(out_packet,
-	TP_PROTO(const struct amdtp_stream *s, u32 cycles, __be32 *cip_header, unsigned int payload_length),
-	TP_ARGS(s, cycles, cip_header, payload_length),
+	TP_PROTO(const struct amdtp_stream *s, u32 cycles, __be32 *cip_header, unsigned int payload_length, unsigned int index),
+	TP_ARGS(s, cycles, cip_header, payload_length, index),
 	TP_STRUCT__entry(
 		__field(unsigned int, second)
 		__field(unsigned int, cycle)
@@ -63,6 +69,8 @@ TRACE_EVENT(out_packet,
 		__field(u32, cip_header0)
 		__field(u32, cip_header1)
 		__field(unsigned int, payload_quadlets)
+		__field(unsigned int, packet_index)
+		__field(bool, irq)
 		__field(unsigned int, index)
 	),
 	TP_fast_assign(
@@ -74,10 +82,12 @@ TRACE_EVENT(out_packet,
 		__entry->cip_header0 = be32_to_cpu(cip_header[0]);
 		__entry->cip_header1 = be32_to_cpu(cip_header[1]);
 		__entry->payload_quadlets = payload_length / 4;
-		__entry->index = s->packet_index;
+		__entry->packet_index = s->packet_index;
+		__entry->irq = in_interrupt();
+		__entry->index = index;
 	),
 	TP_printk(
-		"%02u %04u %04x %04x %02d %08x %08x %03u %02u",
+		"%02u %04u %04x %04x %02d %08x %08x %03u %02u %01u %02u",
 		__entry->second,
 		__entry->cycle,
 		__entry->src,
@@ -86,6 +96,8 @@ TRACE_EVENT(out_packet,
 		__entry->cip_header0,
 		__entry->cip_header1,
 		__entry->payload_quadlets,
+		__entry->packet_index,
+		__entry->irq,
 		__entry->index)
 );
 

commit 0c95c1d6197f3edd3f6ef76f927d67e8ec0794ed
Author: Takashi Sakamoto <o-takashi@sakamocchi.jp>
Date:   Mon May 9 21:12:46 2016 +0900

    ALSA: firewire-lib: add tracepoints to dump a part of isochronous packet data
    
    When audio and music units have some quirks in their sequence of packet,
    it's really hard for non-owners to identify the quirks. Although developers
    need dumps for sequence of packets, it's difficult for users who have no
    knowledges and no equipments for this purpose.
    
    This commit adds tracepoints for this situation. When users encounter
    the issue, they can dump a part of packet data via Linux tracing framework
    as long as using drivers in ALSA firewire stack.
    
    Additionally, tracepoints for outgoing packets will be our help to check
    and debug packet processing of ALSA firewire stack.
    
    This commit newly adds 'snd_firewire_lib' subsystem with 'in_packet' and
    'out_packet' events. In the events, some attributes of packets and the
    index of packet managed by this module are recorded per packet.
    
    This is an usage:
    
    $ trace-cmd record -e snd_firewire_lib:out_packet \
                       -e snd_firewire_lib:in_packet
    /sys/kernel/tracing/events/snd_firewire_lib/out_packet/filter
    /sys/kernel/tracing/events/snd_firewire_lib/in_packet/filter
    Hit Ctrl^C to stop recording
    ^C
    $ trace-cmd report trace.dat
    ...
    23647.033934: in_packet:  01 4073 ffc0 ffc1 00 000f0040 9001b2d1 122 44
    23647.033936: in_packet:  01 4074 ffc0 ffc1 00 000f0048 9001c83b 122 45
    23647.033937: in_packet:  01 4075 ffc0 ffc1 00 000f0050 9001ffff 002 46
    23647.033938: in_packet:  01 4076 ffc0 ffc1 00 000f0050 9001e1a6 122 47
    23647.035426: out_packet: 01 4123 ffc1 ffc0 01 010f00d0 9001fb40 122 17
    23647.035428: out_packet: 01 4124 ffc1 ffc0 01 010f00d8 9001ffff 002 18
    23647.035429: out_packet: 01 4125 ffc1 ffc0 01 010f00d8 900114aa 122 19
    23647.035430: out_packet: 01 4126 ffc1 ffc0 01 010f00e0 90012a15 122 20
    (Here, some common fields are omitted so that a line to be within 80
    characters.)
    ...
    
    One line represent one packet. The legend for the last nine fields is:
     - The second of cycle scheduled for the packet
     - The count of cycle scheduled for the packet
     - The ID of node as source (hex)
      - Some devices transfer packets with invalid source node ID in their CIP
        header.
     - The ID of node as destination (hex)
      - The value is not in CIP header of packets.
     - The value of isochronous channel
     - The first quadlet of CIP header (hex)
     - The second quadlet of CIP header (hex)
     - The number of included quadlets
     - The index of packet in a buffer maintained by this module
    
    This is an example to parse these lines from text file by Python3 script:
    
    \#!/usr/bin/env python3
    import sys
    
    def parse_ts(second, cycle, syt):
        offset = syt & 0xfff
        syt >>= 12
        if cycle & 0x0f > syt:
            cycle += 0x10
        cycle &= 0x1ff0
        cycle |= syt
        second += cycle // 8000
        cycle %= 8000
        # In CYCLE_TIMER of 1394 OHCI, second is represented in 8 bit.
        second %= 128
        return (second, cycle, offset)
    
    def calc_ts(second, cycle, offset):
        ts = offset
        ts += cycle * 3072
        # In DMA descriptor of 1394 OHCI, second is represented in 3 bit.
        ts += (second % 8) * 8000 * 3072
        return ts
    
    def subtract_ts(minuend, subtrahend):
        # In DMA descriptor of 1394 OHCI, second is represented in 3 bit.
        if minuend < subtrahend:
            minuend += 8 * 8000 * 3072
        return minuend - subtrahend
    
    if len(sys.argv) != 2:
        print('At least, one argument is required for packet dump.')
        sys.exit()
    
    filename = sys.argv[1]
    
    data = []
    
    prev = 0
    with open(filename, 'r') as f:
        for line in f:
            pos = line.find('packet:')
            if pos < 0:
                continue
    
            pos += len('packet:')
            line = line[pos:].strip()
            fields = line.split(' ')
    
            datum = []
    
            datum.append(fields[8])
    
            syt = int(fields[6][4:], 16)
    
            # Empty packet in IEC 61883-1, or NODATA in IEC 61883-6
            if syt == 0xffff:
                data_blocks = 0
            else:
                payload_size = int(fields[7], 10)
                data_block_size = int(fields[5][2:4], 16)
                data_blocks = (payload_size - 2) / data_block_size
            datum.append(data_blocks)
    
            second = int(fields[0], 10)
            cycle = int(fields[1], 10)
            start = (second << 25) | (cycle << 12)
            datum.append('0x{0:08x}'.format(start))
            start = calc_ts(second, cycle, 0)
    
            datum.append("0x" + fields[5])
            datum.append("0x" + fields[6])
    
            if syt == 0xffff:
                second = 0
                cycle = 0
                tick = 0
            else:
                second, cycle, tick = parse_ts(second, cycle, syt)
            ts = calc_ts(second, cycle, tick)
            datum.append(start)
            datum.append(ts)
            if ts == 0:
                datum.append(0)
                datum.append(0)
            else:
                # Usual case, or a case over 8 seconds.
                if ts > start or start > 7 * 8000 * 3072:
                    datum.append(subtract_ts(ts, start))
                    if ts > prev or start > 7 * 8000 * 3072:
                        gap = subtract_ts(ts, prev)
                        datum.append(gap)
                    else:
                        datum.append('backward')
                else:
                    datum.append('invalid')
                prev = ts
    
            data.append(datum)
    
    sys.exit()
    
    The data variable includes array with these elements:
    - The index of the packet
    - The number of data blocks in the packet
    - The value of cycle count (hex)
    - The value of CIP header 1 (hex)
    - The value of CIP header 2 (hex)
    - The value of cycle count (tick)
    - The value of calculated presentation timestamp (tick)
    - The offset between the cycle count and presentation timestamp
    - The elapsed ticks from the previous presentation timestamp
    
    Signed-off-by: Takashi Sakamoto <o-takashi@sakamocchi.jp>
    Signed-off-by: Takashi Iwai <tiwai@suse.de>

diff --git a/sound/firewire/amdtp-stream-trace.h b/sound/firewire/amdtp-stream-trace.h
new file mode 100644
index 000000000000..425d1d7f26bc
--- /dev/null
+++ b/sound/firewire/amdtp-stream-trace.h
@@ -0,0 +1,98 @@
+/*
+ * amdtp-stream-trace.h - tracepoint definitions to dump a part of packet data
+ *
+ * Copyright (c) 2016 Takashi Sakamoto
+ * Licensed under the terms of the GNU General Public License, version 2.
+ */
+
+#undef TRACE_SYSTEM
+#define TRACE_SYSTEM		snd_firewire_lib
+
+#if !defined(_AMDTP_STREAM_TRACE_H) || defined(TRACE_HEADER_MULTI_READ)
+#define _AMDTP_STREAM_TRACE_H
+
+#include <linux/tracepoint.h>
+
+TRACE_EVENT(in_packet,
+	TP_PROTO(const struct amdtp_stream *s, u32 cycles, u32 cip_header[2], unsigned int payload_quadlets),
+	TP_ARGS(s, cycles, cip_header, payload_quadlets),
+	TP_STRUCT__entry(
+		__field(unsigned int, second)
+		__field(unsigned int, cycle)
+		__field(int, channel)
+		__field(int, src)
+		__field(int, dest)
+		__field(u32, cip_header0)
+		__field(u32, cip_header1)
+		__field(unsigned int, payload_quadlets)
+		__field(unsigned int, index)
+	),
+	TP_fast_assign(
+		__entry->second = cycles / CYCLES_PER_SECOND;
+		__entry->cycle = cycles % CYCLES_PER_SECOND;
+		__entry->channel = s->context->channel;
+		__entry->src = fw_parent_device(s->unit)->node_id;
+		__entry->dest = fw_parent_device(s->unit)->card->node_id;
+		__entry->cip_header0 = cip_header[0];
+		__entry->cip_header1 = cip_header[1];
+		__entry->payload_quadlets = payload_quadlets;
+		__entry->index = s->packet_index;
+	),
+	TP_printk(
+		"%02u %04u %04x %04x %02d %08x %08x %03u %02u",
+		__entry->second,
+		__entry->cycle,
+		__entry->src,
+		__entry->dest,
+		__entry->channel,
+		__entry->cip_header0,
+		__entry->cip_header1,
+		__entry->payload_quadlets,
+		__entry->index)
+);
+
+TRACE_EVENT(out_packet,
+	TP_PROTO(const struct amdtp_stream *s, u32 cycles, __be32 *cip_header, unsigned int payload_length),
+	TP_ARGS(s, cycles, cip_header, payload_length),
+	TP_STRUCT__entry(
+		__field(unsigned int, second)
+		__field(unsigned int, cycle)
+		__field(int, channel)
+		__field(int, src)
+		__field(int, dest)
+		__field(u32, cip_header0)
+		__field(u32, cip_header1)
+		__field(unsigned int, payload_quadlets)
+		__field(unsigned int, index)
+	),
+	TP_fast_assign(
+		__entry->second = cycles / CYCLES_PER_SECOND;
+		__entry->cycle = cycles % CYCLES_PER_SECOND;
+		__entry->channel = s->context->channel;
+		__entry->src = fw_parent_device(s->unit)->card->node_id;
+		__entry->dest = fw_parent_device(s->unit)->node_id;
+		__entry->cip_header0 = be32_to_cpu(cip_header[0]);
+		__entry->cip_header1 = be32_to_cpu(cip_header[1]);
+		__entry->payload_quadlets = payload_length / 4;
+		__entry->index = s->packet_index;
+	),
+	TP_printk(
+		"%02u %04u %04x %04x %02d %08x %08x %03u %02u",
+		__entry->second,
+		__entry->cycle,
+		__entry->src,
+		__entry->dest,
+		__entry->channel,
+		__entry->cip_header0,
+		__entry->cip_header1,
+		__entry->payload_quadlets,
+		__entry->index)
+);
+
+#endif
+
+#undef TRACE_INCLUDE_PATH
+#define TRACE_INCLUDE_PATH	.
+#undef TRACE_INCLUDE_FILE
+#define TRACE_INCLUDE_FILE	amdtp-stream-trace
+#include <trace/define_trace.h>
