commit fca5e94921d50d13ee8720ce58a352e7fc0228bf
Author: Masahiro Yamada <masahiroy@kernel.org>
Date:   Sun Jun 7 12:20:53 2020 +0900

    samples: binderfs: really compile this sample and fix build issues
    
    Even after commit c624adc9cb6e ("samples: fix binderfs sample"), this
    sample is never compiled.
    
    'hostprogs' teaches Kbuild that this is a host program, but not enough
    to order to compile it. You must add it to 'always-y' to really compile
    it.
    
    Since this sample has never been compiled in upstream, various issues
    are left unnoticed.
    
    [1] compilers without <linux/android/binderfs.h> are still widely used
    
    <linux/android/binderfs.h> is only available since commit c13295ad219d
    ("binderfs: rename header to binderfs.h"), i.e., Linux 5.0
    
    If your compiler is based on UAPI headers older than Linux 5.0, you
    will see the following error:
    
      samples/binderfs/binderfs_example.c:16:10: fatal error: linux/android/binderfs.h: No such file or directory
       #include <linux/android/binderfs.h>
                ^~~~~~~~~~~~~~~~~~~~~~~~~~
      compilation terminated.
    
    You cannot rely on compilers having such a new header.
    
    The common approach is to install UAPI headers of this kernel into
    usr/include, and then add it to the header search path.
    
    I added 'depends on HEADERS_INSTALL' in Kconfig, and '-I usr/include'
    compiler flag in Makefile.
    
    [2] compile the sample for target architecture
    
    Because headers_install works for the target architecture, only the
    native compiler was able to build sample code that requires
    '-I usr/include'.
    
    Commit 7f3a59db274c ("kbuild: add infrastructure to build userspace
    programs") added the new syntax 'userprogs' to compile user-space
    programs for the target architecture.
    
    Use it, and then 'ifndef CROSS_COMPILE' will go away.
    
    I added 'depends on CC_CAN_LINK' because $(CC) is not necessarily
    capable of linking user-space programs.
    
    [3] use subdir-y to descend into samples/binderfs
    
    Since this directory does not contain any kernel-space code, it has no
    point in generating built-in.a or modules.order.
    
    Replace obj-$(CONFIG_...) with subdir-$(CONFIG_...).
    
    [4] -Wunused-variable warning
    
    If I compile this, I see the following warning.
    
      samples/binderfs/binderfs_example.c: In function 'main':
      samples/binderfs/binderfs_example.c:21:9: warning: unused variable 'len' [-Wunused-variable]
         21 |  size_t len;
            |         ^~~
    
    I removed the unused 'len'.
    
    [5] CONFIG_ANDROID_BINDERFS is not required
    
    Since this is a user-space standalone program, it is independent of
    the kernel configuration.
    
    Remove 'depends on ANDROID_BINDERFS'.
    
    Fixes: 9762dc1432e1 ("samples: add binderfs sample program")
    Fixes: c624adc9cb6e ("samples: fix binderfs sample")
    Signed-off-by: Masahiro Yamada <masahiroy@kernel.org>
    Acked-by: Christian Brauner <christian.brauner@ubuntu.com>

diff --git a/samples/binderfs/binderfs_example.c b/samples/binderfs/binderfs_example.c
index 5bbd2ebc0aea..0fd92cdda460 100644
--- a/samples/binderfs/binderfs_example.c
+++ b/samples/binderfs/binderfs_example.c
@@ -18,7 +18,6 @@
 int main(int argc, char *argv[])
 {
 	int fd, ret, saved_errno;
-	size_t len;
 	struct binderfs_device device = { 0 };
 
 	ret = unshare(CLONE_NEWNS);

commit 9762dc1432e10d5571c1ae746c41469504360c2a
Author: Christian Brauner <christian@brauner.io>
Date:   Fri Jan 11 14:41:00 2019 +0100

    samples: add binderfs sample program
    
    This adds a simple sample program mounting binderfs and adding, then
    removing a binder device.  Hopefully, it will be helpful to users who want
    to know how binderfs is supposed to be used.
    
    Signed-off-by: Christian Brauner <christian.brauner@ubuntu.com>
    Signed-off-by: Jonathan Corbet <corbet@lwn.net>

diff --git a/samples/binderfs/binderfs_example.c b/samples/binderfs/binderfs_example.c
new file mode 100644
index 000000000000..5bbd2ebc0aea
--- /dev/null
+++ b/samples/binderfs/binderfs_example.c
@@ -0,0 +1,83 @@
+// SPDX-License-Identifier: GPL-2.0
+
+#define _GNU_SOURCE
+#include <errno.h>
+#include <fcntl.h>
+#include <sched.h>
+#include <stdio.h>
+#include <stdlib.h>
+#include <string.h>
+#include <sys/ioctl.h>
+#include <sys/mount.h>
+#include <sys/stat.h>
+#include <sys/types.h>
+#include <unistd.h>
+#include <linux/android/binder.h>
+#include <linux/android/binderfs.h>
+
+int main(int argc, char *argv[])
+{
+	int fd, ret, saved_errno;
+	size_t len;
+	struct binderfs_device device = { 0 };
+
+	ret = unshare(CLONE_NEWNS);
+	if (ret < 0) {
+		fprintf(stderr, "%s - Failed to unshare mount namespace\n",
+			strerror(errno));
+		exit(EXIT_FAILURE);
+	}
+
+	ret = mount(NULL, "/", NULL, MS_REC | MS_PRIVATE, 0);
+	if (ret < 0) {
+		fprintf(stderr, "%s - Failed to mount / as private\n",
+			strerror(errno));
+		exit(EXIT_FAILURE);
+	}
+
+	ret = mkdir("/dev/binderfs", 0755);
+	if (ret < 0 && errno != EEXIST) {
+		fprintf(stderr, "%s - Failed to create binderfs mountpoint\n",
+			strerror(errno));
+		exit(EXIT_FAILURE);
+	}
+
+	ret = mount(NULL, "/dev/binderfs", "binder", 0, 0);
+	if (ret < 0) {
+		fprintf(stderr, "%s - Failed to mount binderfs\n",
+			strerror(errno));
+		exit(EXIT_FAILURE);
+	}
+
+	memcpy(device.name, "my-binder", strlen("my-binder"));
+
+	fd = open("/dev/binderfs/binder-control", O_RDONLY | O_CLOEXEC);
+	if (fd < 0) {
+		fprintf(stderr, "%s - Failed to open binder-control device\n",
+			strerror(errno));
+		exit(EXIT_FAILURE);
+	}
+
+	ret = ioctl(fd, BINDER_CTL_ADD, &device);
+	saved_errno = errno;
+	close(fd);
+	errno = saved_errno;
+	if (ret < 0) {
+		fprintf(stderr, "%s - Failed to allocate new binder device\n",
+			strerror(errno));
+		exit(EXIT_FAILURE);
+	}
+
+	printf("Allocated new binder device with major %d, minor %d, and name %s\n",
+	       device.major, device.minor, device.name);
+
+	ret = unlink("/dev/binderfs/my-binder");
+	if (ret < 0) {
+		fprintf(stderr, "%s - Failed to delete binder device\n",
+			strerror(errno));
+		exit(EXIT_FAILURE);
+	}
+
+	/* Cleanup happens when the mount namespace dies. */
+	exit(EXIT_SUCCESS);
+}
