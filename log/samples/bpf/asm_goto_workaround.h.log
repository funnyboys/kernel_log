commit 98beb3edeb974e906a81f305d88f7bc96b2ec83e
Author: KP Singh <kpsingh@google.com>
Date:   Wed Oct 2 21:16:52 2019 +0200

    samples/bpf: Add a workaround for asm_inline
    
    This was added in commit eb111869301e ("compiler-types.h: add asm_inline
    definition") and breaks samples/bpf as clang does not support asm __inline.
    
    Fixes: eb111869301e ("compiler-types.h: add asm_inline definition")
    Co-developed-by: Florent Revest <revest@google.com>
    Signed-off-by: Florent Revest <revest@google.com>
    Signed-off-by: KP Singh <kpsingh@google.com>
    Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
    Acked-by: Song Liu <songliubraving@fb.com>
    Acked-by: Andrii Nakryiko <andriin@fb.com>
    Link: https://lore.kernel.org/bpf/20191002191652.11432-1-kpsingh@chromium.org

diff --git a/samples/bpf/asm_goto_workaround.h b/samples/bpf/asm_goto_workaround.h
index 7409722727ca..7048bb3594d6 100644
--- a/samples/bpf/asm_goto_workaround.h
+++ b/samples/bpf/asm_goto_workaround.h
@@ -3,7 +3,8 @@
 #ifndef __ASM_GOTO_WORKAROUND_H
 #define __ASM_GOTO_WORKAROUND_H
 
-/* this will bring in asm_volatile_goto macro definition
+/*
+ * This will bring in asm_volatile_goto and asm_inline macro definitions
  * if enabled by compiler and config options.
  */
 #include <linux/types.h>
@@ -13,5 +14,15 @@
 #define asm_volatile_goto(x...) asm volatile("invalid use of asm_volatile_goto")
 #endif
 
+/*
+ * asm_inline is defined as asm __inline in "include/linux/compiler_types.h"
+ * if supported by the kernel's CC (i.e CONFIG_CC_HAS_ASM_INLINE) which is not
+ * supported by CLANG.
+ */
+#ifdef asm_inline
+#undef asm_inline
+#define asm_inline asm
+#endif
+
 #define volatile(x...) volatile("")
 #endif

commit 636e78b1cdb40b77a79b143dbd9d94847b360efa
Author: Alexei Starovoitov <ast@kernel.org>
Date:   Thu Apr 4 14:37:14 2019 -0700

    samples/bpf: fix build with new clang
    
    clang started to error on invalid asm clobber usage in x86 headers
    and many bpf program samples failed to build with the message:
    
      CLANG-bpf  /data/users/ast/bpf-next/samples/bpf/xdp_redirect_kern.o
    In file included from /data/users/ast/bpf-next/samples/bpf/xdp_redirect_kern.c:14:
    In file included from ../include/linux/in.h:23:
    In file included from ../include/uapi/linux/in.h:24:
    In file included from ../include/linux/socket.h:8:
    In file included from ../include/linux/uio.h:14:
    In file included from ../include/crypto/hash.h:16:
    In file included from ../include/linux/crypto.h:26:
    In file included from ../include/linux/uaccess.h:5:
    In file included from ../include/linux/sched.h:15:
    In file included from ../include/linux/sem.h:5:
    In file included from ../include/uapi/linux/sem.h:5:
    In file included from ../include/linux/ipc.h:9:
    In file included from ../include/linux/refcount.h:72:
    ../arch/x86/include/asm/refcount.h:72:36: error: asm-specifier for input or output variable conflicts with asm clobber list
                                             r->refs.counter, e, "er", i, "cx");
                                                                          ^
    ../arch/x86/include/asm/refcount.h:86:27: error: asm-specifier for input or output variable conflicts with asm clobber list
                                             r->refs.counter, e, "cx");
                                                                 ^
    2 errors generated.
    
    Override volatile() to workaround the problem.
    
    Signed-off-by: Alexei Starovoitov <ast@kernel.org>
    Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>

diff --git a/samples/bpf/asm_goto_workaround.h b/samples/bpf/asm_goto_workaround.h
index 5cd7c1d1a5d5..7409722727ca 100644
--- a/samples/bpf/asm_goto_workaround.h
+++ b/samples/bpf/asm_goto_workaround.h
@@ -13,4 +13,5 @@
 #define asm_volatile_goto(x...) asm volatile("invalid use of asm_volatile_goto")
 #endif
 
+#define volatile(x...) volatile("")
 #endif

commit 6bf3bbe1f4d4cf405e3c2bf07bbdff56d3223ec8
Author: Yonghong Song <yhs@fb.com>
Date:   Sat Jan 12 15:04:30 2019 -0800

    samples/bpf: workaround clang asm goto compilation errors
    
    x86 compilation has required asm goto support since 4.17.
    Since clang does not support asm goto, at 4.17,
    Commit b1ae32dbab50 ("x86/cpufeature: Guard asm_volatile_goto usage
    for BPF compilation") worked around the issue by permitting an
    alternative implementation without asm goto for clang.
    
    At 5.0, more asm goto usages appeared.
      [yhs@148 x86]$ egrep -r asm_volatile_goto
      include/asm/cpufeature.h:     asm_volatile_goto("1: jmp 6f\n"
      include/asm/jump_label.h:     asm_volatile_goto("1:"
      include/asm/jump_label.h:     asm_volatile_goto("1:"
      include/asm/rmwcc.h:  asm_volatile_goto (fullop "; j" #cc " %l[cc_label]"     \
      include/asm/uaccess.h:        asm_volatile_goto("\n"                          \
      include/asm/uaccess.h:        asm_volatile_goto("\n"                          \
      [yhs@148 x86]$
    
    Compiling samples/bpf directories, most bpf programs failed
    compilation with error messages like:
      In file included from /home/yhs/work/bpf-next/samples/bpf/xdp_sample_pkts_kern.c:2:
      In file included from /home/yhs/work/bpf-next/include/linux/ptrace.h:6:
      In file included from /home/yhs/work/bpf-next/include/linux/sched.h:15:
      In file included from /home/yhs/work/bpf-next/include/linux/sem.h:5:
      In file included from /home/yhs/work/bpf-next/include/uapi/linux/sem.h:5:
      In file included from /home/yhs/work/bpf-next/include/linux/ipc.h:9:
      In file included from /home/yhs/work/bpf-next/include/linux/refcount.h:72:
      /home/yhs/work/bpf-next/arch/x86/include/asm/refcount.h:70:9: error: 'asm goto' constructs are not supported yet
            return GEN_BINARY_SUFFIXED_RMWcc(LOCK_PREFIX "subl",
                   ^
      /home/yhs/work/bpf-next/arch/x86/include/asm/rmwcc.h:67:2: note: expanded from macro 'GEN_BINARY_SUFFIXED_RMWcc'
            __GEN_RMWcc(op " %[val], %[var]\n\t" suffix, var, cc,           \
            ^
      /home/yhs/work/bpf-next/arch/x86/include/asm/rmwcc.h:21:2: note: expanded from macro '__GEN_RMWcc'
            asm_volatile_goto (fullop "; j" #cc " %l[cc_label]"             \
            ^
      /home/yhs/work/bpf-next/include/linux/compiler_types.h:188:37: note: expanded from macro 'asm_volatile_goto'
      #define asm_volatile_goto(x...) asm goto(x)
    
    Most implementation does not even provide an alternative
    implementation. And it is also not practical to make changes
    for each call site.
    
    This patch workarounded the asm goto issue by redefining the macro like below:
      #define asm_volatile_goto(x...) asm volatile("invalid use of asm_volatile_goto")
    
    If asm_volatile_goto is not used by bpf programs, which is typically the case, nothing bad
    will happen. If asm_volatile_goto is used by bpf programs, which is incorrect, the compiler
    will issue an error since "invalid use of asm_volatile_goto" is not valid assembly codes.
    
    With this patch, all bpf programs under samples/bpf can pass compilation.
    
    Note that bpf programs under tools/testing/selftests/bpf/ compiled fine as
    they do not access kernel internal headers.
    
    Fixes: e769742d3584 ("Revert "x86/jump-labels: Macrofy inline assembly code to work around GCC inlining bugs"")
    Fixes: 18fe58229d80 ("x86, asm: change the GEN_*_RMWcc() macros to not quote the condition")
    Acked-by: Alexei Starovoitov <ast@kernel.org>
    Signed-off-by: Yonghong Song <yhs@fb.com>
    Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>

diff --git a/samples/bpf/asm_goto_workaround.h b/samples/bpf/asm_goto_workaround.h
new file mode 100644
index 000000000000..5cd7c1d1a5d5
--- /dev/null
+++ b/samples/bpf/asm_goto_workaround.h
@@ -0,0 +1,16 @@
+/* SPDX-License-Identifier: GPL-2.0 */
+/* Copyright (c) 2019 Facebook */
+#ifndef __ASM_GOTO_WORKAROUND_H
+#define __ASM_GOTO_WORKAROUND_H
+
+/* this will bring in asm_volatile_goto macro definition
+ * if enabled by compiler and config options.
+ */
+#include <linux/types.h>
+
+#ifdef asm_volatile_goto
+#undef asm_volatile_goto
+#define asm_volatile_goto(x...) asm volatile("invalid use of asm_volatile_goto")
+#endif
+
+#endif
