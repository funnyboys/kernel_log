commit 7cf245a37ef013b2c1c5ca7ae25061de2ba7ad01
Author: Toke Høiland-Jørgensen <toke@redhat.com>
Date:   Mon Jan 20 14:06:49 2020 +0100

    samples/bpf: Use consistent include paths for libbpf
    
    Fix all files in samples/bpf to include libbpf header files with the bpf/
    prefix, to be consistent with external users of the library. Also ensure
    that all includes of exported libbpf header files (those that are exported
    on 'make install' of the library) use bracketed includes instead of quoted.
    
    To make sure no new files are introduced that doesn't include the bpf/
    prefix in its include, remove tools/lib/bpf from the include path entirely,
    and use tools/lib instead.
    
    Fixes: 6910d7d3867a ("selftests/bpf: Ensure bpf_helper_defs.h are taken from selftests dir")
    Signed-off-by: Toke Høiland-Jørgensen <toke@redhat.com>
    Signed-off-by: Alexei Starovoitov <ast@kernel.org>
    Acked-by: Jesper Dangaard Brouer <brouer@redhat.com>
    Acked-by: Andrii Nakryiko <andriin@fb.com>
    Link: https://lore.kernel.org/bpf/157952560911.1683545.8795966751309534150.stgit@toke.dk

diff --git a/samples/bpf/lathist_kern.c b/samples/bpf/lathist_kern.c
index 18fa088473cd..ca9c2e4e69aa 100644
--- a/samples/bpf/lathist_kern.c
+++ b/samples/bpf/lathist_kern.c
@@ -8,7 +8,7 @@
 #include <linux/version.h>
 #include <linux/ptrace.h>
 #include <uapi/linux/bpf.h>
-#include "bpf_helpers.h"
+#include <bpf/bpf_helpers.h>
 
 #define MAX_ENTRIES	20
 #define MAX_CPU		4

commit 0fb1170ee68a6aa14eca0666e02c4b62cbf1251d
Author: Daniel Wagner <daniel.wagner@bmw-carit.de>
Date:   Fri Jun 19 16:00:44 2015 +0200

    bpf: BPF based latency tracing
    
    BPF offers another way to generate latency histograms. We attach
    kprobes at trace_preempt_off and trace_preempt_on and calculate the
    time it takes to from seeing the off/on transition.
    
    The first array is used to store the start time stamp. The key is the
    CPU id. The second array stores the log2(time diff). We need to use
    static allocation here (array and not hash tables). The kprobes
    hooking into trace_preempt_on|off should not calling any dynamic
    memory allocation or free path. We need to avoid recursivly
    getting called. Besides that, it reduces jitter in the measurement.
    
    CPU 0
          latency        : count     distribution
           1 -> 1        : 0        |                                        |
           2 -> 3        : 0        |                                        |
           4 -> 7        : 0        |                                        |
           8 -> 15       : 0        |                                        |
          16 -> 31       : 0        |                                        |
          32 -> 63       : 0        |                                        |
          64 -> 127      : 0        |                                        |
         128 -> 255      : 0        |                                        |
         256 -> 511      : 0        |                                        |
         512 -> 1023     : 0        |                                        |
        1024 -> 2047     : 0        |                                        |
        2048 -> 4095     : 166723   |*************************************** |
        4096 -> 8191     : 19870    |***                                     |
        8192 -> 16383    : 6324     |                                        |
       16384 -> 32767    : 1098     |                                        |
       32768 -> 65535    : 190      |                                        |
       65536 -> 131071   : 179      |                                        |
      131072 -> 262143   : 18       |                                        |
      262144 -> 524287   : 4        |                                        |
      524288 -> 1048575  : 1363     |                                        |
    CPU 1
          latency        : count     distribution
           1 -> 1        : 0        |                                        |
           2 -> 3        : 0        |                                        |
           4 -> 7        : 0        |                                        |
           8 -> 15       : 0        |                                        |
          16 -> 31       : 0        |                                        |
          32 -> 63       : 0        |                                        |
          64 -> 127      : 0        |                                        |
         128 -> 255      : 0        |                                        |
         256 -> 511      : 0        |                                        |
         512 -> 1023     : 0        |                                        |
        1024 -> 2047     : 0        |                                        |
        2048 -> 4095     : 114042   |*************************************** |
        4096 -> 8191     : 9587     |**                                      |
        8192 -> 16383    : 4140     |                                        |
       16384 -> 32767    : 673      |                                        |
       32768 -> 65535    : 179      |                                        |
       65536 -> 131071   : 29       |                                        |
      131072 -> 262143   : 4        |                                        |
      262144 -> 524287   : 1        |                                        |
      524288 -> 1048575  : 364      |                                        |
    CPU 2
          latency        : count     distribution
           1 -> 1        : 0        |                                        |
           2 -> 3        : 0        |                                        |
           4 -> 7        : 0        |                                        |
           8 -> 15       : 0        |                                        |
          16 -> 31       : 0        |                                        |
          32 -> 63       : 0        |                                        |
          64 -> 127      : 0        |                                        |
         128 -> 255      : 0        |                                        |
         256 -> 511      : 0        |                                        |
         512 -> 1023     : 0        |                                        |
        1024 -> 2047     : 0        |                                        |
        2048 -> 4095     : 40147    |*************************************** |
        4096 -> 8191     : 2300     |*                                       |
        8192 -> 16383    : 828      |                                        |
       16384 -> 32767    : 178      |                                        |
       32768 -> 65535    : 59       |                                        |
       65536 -> 131071   : 2        |                                        |
      131072 -> 262143   : 0        |                                        |
      262144 -> 524287   : 1        |                                        |
      524288 -> 1048575  : 174      |                                        |
    CPU 3
          latency        : count     distribution
           1 -> 1        : 0        |                                        |
           2 -> 3        : 0        |                                        |
           4 -> 7        : 0        |                                        |
           8 -> 15       : 0        |                                        |
          16 -> 31       : 0        |                                        |
          32 -> 63       : 0        |                                        |
          64 -> 127      : 0        |                                        |
         128 -> 255      : 0        |                                        |
         256 -> 511      : 0        |                                        |
         512 -> 1023     : 0        |                                        |
        1024 -> 2047     : 0        |                                        |
        2048 -> 4095     : 29626    |*************************************** |
        4096 -> 8191     : 2704     |**                                      |
        8192 -> 16383    : 1090     |                                        |
       16384 -> 32767    : 160      |                                        |
       32768 -> 65535    : 72       |                                        |
       65536 -> 131071   : 32       |                                        |
      131072 -> 262143   : 26       |                                        |
      262144 -> 524287   : 12       |                                        |
      524288 -> 1048575  : 298      |                                        |
    
    All this is based on the trace3 examples written by
    Alexei Starovoitov <ast@plumgrid.com>.
    
    Signed-off-by: Daniel Wagner <daniel.wagner@bmw-carit.de>
    Cc: Alexei Starovoitov <ast@plumgrid.com>
    Cc: Alexei Starovoitov <ast@plumgrid.com>
    Cc: "David S. Miller" <davem@davemloft.net>
    Cc: Daniel Borkmann <daniel@iogearbox.net>
    Cc: Ingo Molnar <mingo@kernel.org>
    Cc: linux-kernel@vger.kernel.org
    Cc: netdev@vger.kernel.org
    Acked-by: Alexei Starovoitov <ast@plumgrid.com>
    Acked-by: Daniel Borkmann <daniel@iogearbox.net>
    Signed-off-by: David S. Miller <davem@davemloft.net>

diff --git a/samples/bpf/lathist_kern.c b/samples/bpf/lathist_kern.c
new file mode 100644
index 000000000000..18fa088473cd
--- /dev/null
+++ b/samples/bpf/lathist_kern.c
@@ -0,0 +1,99 @@
+/* Copyright (c) 2013-2015 PLUMgrid, http://plumgrid.com
+ * Copyright (c) 2015 BMW Car IT GmbH
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of version 2 of the GNU General Public
+ * License as published by the Free Software Foundation.
+ */
+#include <linux/version.h>
+#include <linux/ptrace.h>
+#include <uapi/linux/bpf.h>
+#include "bpf_helpers.h"
+
+#define MAX_ENTRIES	20
+#define MAX_CPU		4
+
+/* We need to stick to static allocated memory (an array instead of
+ * hash table) because managing dynamic memory from the
+ * trace_preempt_[on|off] tracepoints hooks is not supported.
+ */
+
+struct bpf_map_def SEC("maps") my_map = {
+	.type = BPF_MAP_TYPE_ARRAY,
+	.key_size = sizeof(int),
+	.value_size = sizeof(u64),
+	.max_entries = MAX_CPU,
+};
+
+SEC("kprobe/trace_preempt_off")
+int bpf_prog1(struct pt_regs *ctx)
+{
+	int cpu = bpf_get_smp_processor_id();
+	u64 *ts = bpf_map_lookup_elem(&my_map, &cpu);
+
+	if (ts)
+		*ts = bpf_ktime_get_ns();
+
+	return 0;
+}
+
+static unsigned int log2(unsigned int v)
+{
+	unsigned int r;
+	unsigned int shift;
+
+	r = (v > 0xFFFF) << 4; v >>= r;
+	shift = (v > 0xFF) << 3; v >>= shift; r |= shift;
+	shift = (v > 0xF) << 2; v >>= shift; r |= shift;
+	shift = (v > 0x3) << 1; v >>= shift; r |= shift;
+	r |= (v >> 1);
+
+	return r;
+}
+
+static unsigned int log2l(unsigned long v)
+{
+	unsigned int hi = v >> 32;
+
+	if (hi)
+		return log2(hi) + 32;
+	else
+		return log2(v);
+}
+
+struct bpf_map_def SEC("maps") my_lat = {
+	.type = BPF_MAP_TYPE_ARRAY,
+	.key_size = sizeof(int),
+	.value_size = sizeof(long),
+	.max_entries = MAX_CPU * MAX_ENTRIES,
+};
+
+SEC("kprobe/trace_preempt_on")
+int bpf_prog2(struct pt_regs *ctx)
+{
+	u64 *ts, cur_ts, delta;
+	int key, cpu;
+	long *val;
+
+	cpu = bpf_get_smp_processor_id();
+	ts = bpf_map_lookup_elem(&my_map, &cpu);
+	if (!ts)
+		return 0;
+
+	cur_ts = bpf_ktime_get_ns();
+	delta = log2l(cur_ts - *ts);
+
+	if (delta > MAX_ENTRIES - 1)
+		delta = MAX_ENTRIES - 1;
+
+	key = cpu * MAX_ENTRIES + delta;
+	val = bpf_map_lookup_elem(&my_lat, &key);
+	if (val)
+		__sync_fetch_and_add((long *)val, 1);
+
+	return 0;
+
+}
+
+char _license[] SEC("license") = "GPL";
+u32 _version SEC("version") = LINUX_VERSION_CODE;
