commit 9fbc01cdba66e988122ccdc6094cfd85d9587769
Author: Kefeng Wang <wangkefeng.wang@huawei.com>
Date:   Tue Jun 9 13:52:00 2020 +0000

    sample-trace-array: Remove trace_array 'sample-instance'
    
    Remove trace_array 'sample-instance' if kthread_run fails
    in sample_trace_array_init().
    
    Link: https://lkml.kernel.org/r/20200609135200.2206726-1-wangkefeng.wang@huawei.com
    
    Cc: stable@vger.kernel.org
    Fixes: 89ed42495ef4a ("tracing: Sample module to demonstrate kernel access to Ftrace instances.")
    Reviewed-by: Divya Indi <divya.indi@oracle.com>
    Signed-off-by: Kefeng Wang <wangkefeng.wang@huawei.com>
    Signed-off-by: Steven Rostedt (VMware) <rostedt@goodmis.org>

diff --git a/samples/ftrace/sample-trace-array.c b/samples/ftrace/sample-trace-array.c
index 9e437f930280..6aba02a31c96 100644
--- a/samples/ftrace/sample-trace-array.c
+++ b/samples/ftrace/sample-trace-array.c
@@ -115,8 +115,12 @@ static int __init sample_trace_array_init(void)
 	trace_printk_init_buffers();
 
 	simple_tsk = kthread_run(simple_thread, NULL, "sample-instance");
-	if (IS_ERR(simple_tsk))
+	if (IS_ERR(simple_tsk)) {
+		trace_array_put(tr);
+		trace_array_destroy(tr);
 		return -1;
+	}
+
 	return 0;
 }
 

commit e9b7b1c0c103a623be1a65c39f98719803440871
Author: Kefeng Wang <wangkefeng.wang@huawei.com>
Date:   Wed Jun 10 01:12:44 2020 +0000

    sample-trace-array: Fix sleeping function called from invalid context
    
    BUG: sleeping function called from invalid context at kernel/locking/mutex.c:935
     in_atomic(): 1, irqs_disabled(): 0, non_block: 0, pid: 0, name: swapper/5
     1 lock held by swapper/5/0:
      #0: ffff80001002bd90 (samples/ftrace/sample-trace-array.c:38){+.-.}-{0:0}, at: call_timer_fn+0x8/0x3e0
     CPU: 5 PID: 0 Comm: swapper/5 Not tainted 5.7.0+ #8
     Hardware name: QEMU QEMU Virtual Machine, BIOS 0.0.0 02/06/2015
     Call trace:
      dump_backtrace+0x0/0x1a0
      show_stack+0x20/0x30
      dump_stack+0xe4/0x150
      ___might_sleep+0x160/0x200
      __might_sleep+0x58/0x90
      __mutex_lock+0x64/0x948
      mutex_lock_nested+0x3c/0x58
      __ftrace_set_clr_event+0x44/0x88
      trace_array_set_clr_event+0x24/0x38
      mytimer_handler+0x34/0x40 [sample_trace_array]
    
    mutex_lock() will be called in interrupt context, using workqueue to fix it.
    
    Link: https://lkml.kernel.org/r/20200610011244.2209486-1-wangkefeng.wang@huawei.com
    
    Cc: stable@vger.kernel.org
    Fixes: 89ed42495ef4 ("tracing: Sample module to demonstrate kernel access to Ftrace instances.")
    Reviewed-by: Divya Indi <divya.indi@oracle.com>
    Signed-off-by: Kefeng Wang <wangkefeng.wang@huawei.com>
    Signed-off-by: Steven Rostedt (VMware) <rostedt@goodmis.org>

diff --git a/samples/ftrace/sample-trace-array.c b/samples/ftrace/sample-trace-array.c
index d523450d73eb..9e437f930280 100644
--- a/samples/ftrace/sample-trace-array.c
+++ b/samples/ftrace/sample-trace-array.c
@@ -6,6 +6,7 @@
 #include <linux/timer.h>
 #include <linux/err.h>
 #include <linux/jiffies.h>
+#include <linux/workqueue.h>
 
 /*
  * Any file that uses trace points, must include the header.
@@ -20,6 +21,16 @@ struct trace_array *tr;
 static void mytimer_handler(struct timer_list *unused);
 static struct task_struct *simple_tsk;
 
+static void trace_work_fn(struct work_struct *work)
+{
+	/*
+	 * Disable tracing for event "sample_event".
+	 */
+	trace_array_set_clr_event(tr, "sample-subsystem", "sample_event",
+			false);
+}
+static DECLARE_WORK(trace_work, trace_work_fn);
+
 /*
  * mytimer: Timer setup to disable tracing for event "sample_event". This
  * timer is only for the purposes of the sample module to demonstrate access of
@@ -29,11 +40,7 @@ static DEFINE_TIMER(mytimer, mytimer_handler);
 
 static void mytimer_handler(struct timer_list *unused)
 {
-	/*
-	 * Disable tracing for event "sample_event".
-	 */
-	trace_array_set_clr_event(tr, "sample-subsystem", "sample_event",
-			false);
+	schedule_work(&trace_work);
 }
 
 static void simple_thread_func(int count)
@@ -76,6 +83,7 @@ static int simple_thread(void *arg)
 		simple_thread_func(count++);
 
 	del_timer(&mytimer);
+	cancel_work_sync(&trace_work);
 
 	/*
 	 * trace_array_put() decrements the reference counter associated with

commit 89ed42495ef4a020435f2b999093bb5731eeb8b9
Author: Divya Indi <divya.indi@oracle.com>
Date:   Wed Nov 20 11:08:39 2019 -0800

    tracing: Sample module to demonstrate kernel access to Ftrace instances.
    
    This is a sample module to demonstrate the use of the newly introduced and
    exported APIs to access Ftrace instances from within the kernel.
    
    Newly introduced APIs used here -
    
    1. Create/Lookup a trace array with the given name.
    struct trace_array *trace_array_get_by_name(const char *name)
    
    2. Destroy/Remove a trace array.
    int trace_array_destroy(struct trace_array *tr)
    
    4. Enable/Disable trace events:
    int trace_array_set_clr_event(struct trace_array *tr, const char *system,
            const char *event, bool enable);
    
    Exported APIs -
    1. trace_printk equivalent for instances.
    int trace_array_printk(struct trace_array *tr,
                   unsigned long ip, const char *fmt, ...);
    
    2. Helper function.
    void trace_printk_init_buffers(void);
    
    3. To decrement the reference counter.
    void trace_array_put(struct trace_array *tr)
    
    Sample output(contents of /sys/kernel/tracing/instances/sample-instance)
    NOTE: Tracing disabled after ~5 sec)
    
                                  _-----=> irqs-off
                                 / _----=> need-resched
                                | / _---=> hardirq/softirq
                                || / _--=> preempt-depth
                                ||| /     delay
               TASK-PID   CPU#  ||||    TIMESTAMP  FUNCTION
                  | |       |   ||||       |         |
    sample-instance-1452  [002] ....    49.430948: simple_thread: trace_array_printk: count=0
    sample-instance-1452  [002] ....    49.430951: sample_event: count value=0 at jiffies=4294716608
    sample-instance-1452  [002] ....    50.454847: simple_thread: trace_array_printk: count=1
    sample-instance-1452  [002] ....    50.454849: sample_event: count value=1 at jiffies=4294717632
    sample-instance-1452  [002] ....    51.478748: simple_thread: trace_array_printk: count=2
    sample-instance-1452  [002] ....    51.478750: sample_event: count value=2 at jiffies=4294718656
    sample-instance-1452  [002] ....    52.502652: simple_thread: trace_array_printk: count=3
    sample-instance-1452  [002] ....    52.502655: sample_event: count value=3 at jiffies=4294719680
    sample-instance-1452  [002] ....    53.526533: simple_thread: trace_array_printk: count=4
    sample-instance-1452  [002] ....    53.526535: sample_event: count value=4 at jiffies=4294720704
    sample-instance-1452  [002] ....    54.550438: simple_thread: trace_array_printk: count=5
    sample-instance-1452  [002] ....    55.574336: simple_thread: trace_array_printk: count=6
    
    Link: http://lkml.kernel.org/r/1574276919-11119-3-git-send-email-divya.indi@oracle.com
    
    Reviewed-by: Aruna Ramakrishna <aruna.ramakrishna@oracle.com>
    Signed-off-by: Divya Indi <divya.indi@oracle.com>
    [ Moved to samples/ftrace ]
    Signed-off-by: Steven Rostedt (VMware) <rostedt@goodmis.org>

diff --git a/samples/ftrace/sample-trace-array.c b/samples/ftrace/sample-trace-array.c
new file mode 100644
index 000000000000..d523450d73eb
--- /dev/null
+++ b/samples/ftrace/sample-trace-array.c
@@ -0,0 +1,131 @@
+// SPDX-License-Identifier: GPL-2.0-only
+#include <linux/module.h>
+#include <linux/kthread.h>
+#include <linux/trace.h>
+#include <linux/trace_events.h>
+#include <linux/timer.h>
+#include <linux/err.h>
+#include <linux/jiffies.h>
+
+/*
+ * Any file that uses trace points, must include the header.
+ * But only one file, must include the header by defining
+ * CREATE_TRACE_POINTS first.  This will make the C code that
+ * creates the handles for the trace points.
+ */
+#define CREATE_TRACE_POINTS
+#include "sample-trace-array.h"
+
+struct trace_array *tr;
+static void mytimer_handler(struct timer_list *unused);
+static struct task_struct *simple_tsk;
+
+/*
+ * mytimer: Timer setup to disable tracing for event "sample_event". This
+ * timer is only for the purposes of the sample module to demonstrate access of
+ * Ftrace instances from within kernel.
+ */
+static DEFINE_TIMER(mytimer, mytimer_handler);
+
+static void mytimer_handler(struct timer_list *unused)
+{
+	/*
+	 * Disable tracing for event "sample_event".
+	 */
+	trace_array_set_clr_event(tr, "sample-subsystem", "sample_event",
+			false);
+}
+
+static void simple_thread_func(int count)
+{
+	set_current_state(TASK_INTERRUPTIBLE);
+	schedule_timeout(HZ);
+
+	/*
+	 * Printing count value using trace_array_printk() - trace_printk()
+	 * equivalent for the instance buffers.
+	 */
+	trace_array_printk(tr, _THIS_IP_, "trace_array_printk: count=%d\n",
+			count);
+	/*
+	 * Tracepoint for event "sample_event". This will print the
+	 * current value of count and current jiffies.
+	 */
+	trace_sample_event(count, jiffies);
+}
+
+static int simple_thread(void *arg)
+{
+	int count = 0;
+	unsigned long delay = msecs_to_jiffies(5000);
+
+	/*
+	 * Enable tracing for "sample_event".
+	 */
+	trace_array_set_clr_event(tr, "sample-subsystem", "sample_event", true);
+
+	/*
+	 * Adding timer - mytimer. This timer will disable tracing after
+	 * delay seconds.
+	 *
+	 */
+	add_timer(&mytimer);
+	mod_timer(&mytimer, jiffies+delay);
+
+	while (!kthread_should_stop())
+		simple_thread_func(count++);
+
+	del_timer(&mytimer);
+
+	/*
+	 * trace_array_put() decrements the reference counter associated with
+	 * the trace array - "tr". We are done using the trace array, hence
+	 * decrement the reference counter so that it can be destroyed using
+	 * trace_array_destroy().
+	 */
+	trace_array_put(tr);
+
+	return 0;
+}
+
+static int __init sample_trace_array_init(void)
+{
+	/*
+	 * Return a pointer to the trace array with name "sample-instance" if it
+	 * exists, else create a new trace array.
+	 *
+	 * NOTE: This function increments the reference counter
+	 * associated with the trace array - "tr".
+	 */
+	tr = trace_array_get_by_name("sample-instance");
+
+	if (!tr)
+		return -1;
+	/*
+	 * If context specific per-cpu buffers havent already been allocated.
+	 */
+	trace_printk_init_buffers();
+
+	simple_tsk = kthread_run(simple_thread, NULL, "sample-instance");
+	if (IS_ERR(simple_tsk))
+		return -1;
+	return 0;
+}
+
+static void __exit sample_trace_array_exit(void)
+{
+	kthread_stop(simple_tsk);
+
+	/*
+	 * We are unloading our module and no longer require the trace array.
+	 * Remove/destroy "tr" using trace_array_destroy()
+	 */
+	trace_array_destroy(tr);
+}
+
+module_init(sample_trace_array_init);
+module_exit(sample_trace_array_exit);
+
+MODULE_AUTHOR("Divya Indi");
+MODULE_DESCRIPTION("Sample module for kernel access to Ftrace instances");
+MODULE_LICENSE("GPL");
