commit 89ed42495ef4a020435f2b999093bb5731eeb8b9
Author: Divya Indi <divya.indi@oracle.com>
Date:   Wed Nov 20 11:08:39 2019 -0800

    tracing: Sample module to demonstrate kernel access to Ftrace instances.
    
    This is a sample module to demonstrate the use of the newly introduced and
    exported APIs to access Ftrace instances from within the kernel.
    
    Newly introduced APIs used here -
    
    1. Create/Lookup a trace array with the given name.
    struct trace_array *trace_array_get_by_name(const char *name)
    
    2. Destroy/Remove a trace array.
    int trace_array_destroy(struct trace_array *tr)
    
    4. Enable/Disable trace events:
    int trace_array_set_clr_event(struct trace_array *tr, const char *system,
            const char *event, bool enable);
    
    Exported APIs -
    1. trace_printk equivalent for instances.
    int trace_array_printk(struct trace_array *tr,
                   unsigned long ip, const char *fmt, ...);
    
    2. Helper function.
    void trace_printk_init_buffers(void);
    
    3. To decrement the reference counter.
    void trace_array_put(struct trace_array *tr)
    
    Sample output(contents of /sys/kernel/tracing/instances/sample-instance)
    NOTE: Tracing disabled after ~5 sec)
    
                                  _-----=> irqs-off
                                 / _----=> need-resched
                                | / _---=> hardirq/softirq
                                || / _--=> preempt-depth
                                ||| /     delay
               TASK-PID   CPU#  ||||    TIMESTAMP  FUNCTION
                  | |       |   ||||       |         |
    sample-instance-1452  [002] ....    49.430948: simple_thread: trace_array_printk: count=0
    sample-instance-1452  [002] ....    49.430951: sample_event: count value=0 at jiffies=4294716608
    sample-instance-1452  [002] ....    50.454847: simple_thread: trace_array_printk: count=1
    sample-instance-1452  [002] ....    50.454849: sample_event: count value=1 at jiffies=4294717632
    sample-instance-1452  [002] ....    51.478748: simple_thread: trace_array_printk: count=2
    sample-instance-1452  [002] ....    51.478750: sample_event: count value=2 at jiffies=4294718656
    sample-instance-1452  [002] ....    52.502652: simple_thread: trace_array_printk: count=3
    sample-instance-1452  [002] ....    52.502655: sample_event: count value=3 at jiffies=4294719680
    sample-instance-1452  [002] ....    53.526533: simple_thread: trace_array_printk: count=4
    sample-instance-1452  [002] ....    53.526535: sample_event: count value=4 at jiffies=4294720704
    sample-instance-1452  [002] ....    54.550438: simple_thread: trace_array_printk: count=5
    sample-instance-1452  [002] ....    55.574336: simple_thread: trace_array_printk: count=6
    
    Link: http://lkml.kernel.org/r/1574276919-11119-3-git-send-email-divya.indi@oracle.com
    
    Reviewed-by: Aruna Ramakrishna <aruna.ramakrishna@oracle.com>
    Signed-off-by: Divya Indi <divya.indi@oracle.com>
    [ Moved to samples/ftrace ]
    Signed-off-by: Steven Rostedt (VMware) <rostedt@goodmis.org>

diff --git a/samples/ftrace/sample-trace-array.h b/samples/ftrace/sample-trace-array.h
new file mode 100644
index 000000000000..6f8962428158
--- /dev/null
+++ b/samples/ftrace/sample-trace-array.h
@@ -0,0 +1,84 @@
+/* SPDX-License-Identifier: GPL-2.0 */
+
+/*
+ * If TRACE_SYSTEM is defined, that will be the directory created
+ * in the ftrace directory under /sys/kernel/tracing/events/<system>
+ *
+ * The define_trace.h below will also look for a file name of
+ * TRACE_SYSTEM.h where TRACE_SYSTEM is what is defined here.
+ * In this case, it would look for sample-trace.h
+ *
+ * If the header name will be different than the system name
+ * (as in this case), then you can override the header name that
+ * define_trace.h will look up by defining TRACE_INCLUDE_FILE
+ *
+ * This file is called sample-trace-array.h but we want the system
+ * to be called "sample-subsystem". Therefore we must define the name of this
+ * file:
+ *
+ * #define TRACE_INCLUDE_FILE sample-trace-array
+ *
+ * As we do in the bottom of this file.
+ *
+ * Notice that TRACE_SYSTEM should be defined outside of #if
+ * protection, just like TRACE_INCLUDE_FILE.
+ */
+#undef TRACE_SYSTEM
+#define TRACE_SYSTEM sample-subsystem
+
+/*
+ * TRACE_SYSTEM is expected to be a C valid variable (alpha-numeric
+ * and underscore), although it may start with numbers. If for some
+ * reason it is not, you need to add the following lines:
+ */
+#undef TRACE_SYSTEM_VAR
+#define TRACE_SYSTEM_VAR sample_subsystem
+
+/*
+ * But the above is only needed if TRACE_SYSTEM is not alpha-numeric
+ * and underscored. By default, TRACE_SYSTEM_VAR will be equal to
+ * TRACE_SYSTEM. As TRACE_SYSTEM_VAR must be alpha-numeric, if
+ * TRACE_SYSTEM is not, then TRACE_SYSTEM_VAR must be defined with
+ * only alpha-numeric and underscores.
+ *
+ * The TRACE_SYSTEM_VAR is only used internally and not visible to
+ * user space.
+ */
+
+/*
+ * Notice that this file is not protected like a normal header.
+ * We also must allow for rereading of this file. The
+ *
+ *  || defined(TRACE_HEADER_MULTI_READ)
+ *
+ * serves this purpose.
+ */
+#if !defined(_SAMPLE_TRACE_ARRAY_H) || defined(TRACE_HEADER_MULTI_READ)
+#define _SAMPLE_TRACE_ARRAY_H
+
+#include <linux/tracepoint.h>
+TRACE_EVENT(sample_event,
+
+	TP_PROTO(int count, unsigned long time),
+
+	TP_ARGS(count, time),
+
+	TP_STRUCT__entry(
+		__field(int, count)
+		__field(unsigned long, time)
+	),
+
+	TP_fast_assign(
+		__entry->count = count;
+		__entry->time = time;
+	),
+
+	TP_printk("count value=%d at jiffies=%lu", __entry->count,
+		__entry->time)
+	);
+#endif
+
+#undef TRACE_INCLUDE_PATH
+#define TRACE_INCLUDE_PATH .
+#define TRACE_INCLUDE_FILE sample-trace-array
+#include <trace/define_trace.h>
