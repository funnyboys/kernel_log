commit 0e0c12316d8a645e7b1880e135837ee78d18aed9
Author: Ben Dooks (Codethink) <ben.dooks@codethink.co.uk>
Date:   Fri Jan 24 01:01:35 2020 +0800

    lib: crc64: include <linux/crc64.h> for 'crc64_be'
    
    The crc64_be() is declared in <linux/crc64.h> so include
    this where the symbol is defined to avoid the following
    warning:
    
    lib/crc64.c:43:12: warning: symbol 'crc64_be' was not declared. Should it be static?
    
    Signed-off-by: Ben Dooks (Codethink) <ben.dooks@codethink.co.uk>
    Reviewed-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    Signed-off-by: Coly Li <colyli@suse.de>
    Signed-off-by: Jens Axboe <axboe@kernel.dk>

diff --git a/lib/crc64.c b/lib/crc64.c
index 0ef8ae6ac047..f8928ce28280 100644
--- a/lib/crc64.c
+++ b/lib/crc64.c
@@ -28,6 +28,7 @@
 
 #include <linux/module.h>
 #include <linux/types.h>
+#include <linux/crc64.h>
 #include "crc64table.h"
 
 MODULE_DESCRIPTION("CRC64 calculations");

commit feba04fd2cf8f6a74865338df2e3e1e94d6cfd13
Author: Coly Li <colyli@suse.de>
Date:   Tue Aug 21 21:57:11 2018 -0700

    lib: add crc64 calculation routines
    
    Patch series "add crc64 calculation as kernel library", v5.
    
    This patchset adds basic implementation of crc64 calculation as a Linux
    kernel library.  Since bcache already does crc64 by itself, this patchset
    also modifies bcache code to use the new crc64 library routine.
    
    Currently bcache is the only user of crc64 calculation, another potential
    user is bcachefs which is on the way to be in mainline kernel.  Therefore
    it makes sense to make crc64 calculation to be a public library.
    
    bcache uses crc64 as storage checksum, if a change of crc lib routines
    results an inconsistent result, the unmatched checksum may make bcache
    'think' the on-disk is corrupted, such a change should be avoided or
    detected as early as possible.  Therefore a patch is being prepared which
    adds a crc test framework, to check consistency of different calculations.
    
    This patch (of 2):
    
    Add the re-write crc64 calculation routines for Linux kernel.  The CRC64
    polynomical arithmetic follows ECMA-182 specification, inspired by CRC
    paper of Dr.  Ross N.  Williams (see
    http://www.ross.net/crc/download/crc_v3.txt) and other public domain
    implementations.
    
    All the changes work in this way,
    - When Linux kernel is built, host program lib/gen_crc64table.c will be
      compiled to lib/gen_crc64table and executed.
    - The output of gen_crc64table execution is an array called as lookup
      table (a.k.a POLY 0x42f0e1eba9ea369) which contain 256 64-bit long
      numbers, this table is dumped into header file lib/crc64table.h.
    - Then the header file is included by lib/crc64.c for normal 64bit crc
      calculation.
    - Function declaration of the crc64 calculation routines is placed in
      include/linux/crc64.h
    
    Currently bcache is the only user of crc64_be(), another potential user is
    bcachefs which is on the way to be in mainline kernel.  Therefore it makes
    sense to move crc64 calculation into lib/crc64.c as public code.
    
    [colyli@suse.de: fix review comments from v4]
      Link: http://lkml.kernel.org/r/20180726053352.2781-2-colyli@suse.de
    Link: http://lkml.kernel.org/r/20180718165545.1622-2-colyli@suse.de
    Signed-off-by: Coly Li <colyli@suse.de>
    Co-developed-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    Signed-off-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    Reviewed-by: Hannes Reinecke <hare@suse.de>
    Cc: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Cc: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    Cc: Michael Lyle <mlyle@lyle.org>
    Cc: Kent Overstreet <kent.overstreet@gmail.com>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: Kate Stewart <kstewart@linuxfoundation.org>
    Cc: Eric Biggers <ebiggers3@gmail.com>
    Cc: Randy Dunlap <rdunlap@infradead.org>
    Cc: Noah Massey <noah.massey@gmail.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

diff --git a/lib/crc64.c b/lib/crc64.c
new file mode 100644
index 000000000000..0ef8ae6ac047
--- /dev/null
+++ b/lib/crc64.c
@@ -0,0 +1,56 @@
+// SPDX-License-Identifier: GPL-2.0
+/*
+ * Normal 64-bit CRC calculation.
+ *
+ * This is a basic crc64 implementation following ECMA-182 specification,
+ * which can be found from,
+ * http://www.ecma-international.org/publications/standards/Ecma-182.htm
+ *
+ * Dr. Ross N. Williams has a great document to introduce the idea of CRC
+ * algorithm, here the CRC64 code is also inspired by the table-driven
+ * algorithm and detail example from this paper. This paper can be found
+ * from,
+ * http://www.ross.net/crc/download/crc_v3.txt
+ *
+ * crc64table[256] is the lookup table of a table-driven 64-bit CRC
+ * calculation, which is generated by gen_crc64table.c in kernel build
+ * time. The polynomial of crc64 arithmetic is from ECMA-182 specification
+ * as well, which is defined as,
+ *
+ * x^64 + x^62 + x^57 + x^55 + x^54 + x^53 + x^52 + x^47 + x^46 + x^45 +
+ * x^40 + x^39 + x^38 + x^37 + x^35 + x^33 + x^32 + x^31 + x^29 + x^27 +
+ * x^24 + x^23 + x^22 + x^21 + x^19 + x^17 + x^13 + x^12 + x^10 + x^9 +
+ * x^7 + x^4 + x + 1
+ *
+ * Copyright 2018 SUSE Linux.
+ *   Author: Coly Li <colyli@suse.de>
+ */
+
+#include <linux/module.h>
+#include <linux/types.h>
+#include "crc64table.h"
+
+MODULE_DESCRIPTION("CRC64 calculations");
+MODULE_LICENSE("GPL v2");
+
+/**
+ * crc64_be - Calculate bitwise big-endian ECMA-182 CRC64
+ * @crc: seed value for computation. 0 or (u64)~0 for a new CRC calculation,
+	or the previous crc64 value if computing incrementally.
+ * @p: pointer to buffer over which CRC64 is run
+ * @len: length of buffer @p
+ */
+u64 __pure crc64_be(u64 crc, const void *p, size_t len)
+{
+	size_t i, t;
+
+	const unsigned char *_p = p;
+
+	for (i = 0; i < len; i++) {
+		t = ((crc >> 56) ^ (*_p++)) & 0xFF;
+		crc = crc64table[t] ^ (crc << 8);
+	}
+
+	return crc;
+}
+EXPORT_SYMBOL_GPL(crc64_be);
