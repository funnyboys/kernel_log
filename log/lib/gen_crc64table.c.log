commit d8372ba8ce288acdfce67cb873b2a741785c2e88
Author: NeilBrown <neil@brown.name>
Date:   Sat Dec 29 13:58:09 2018 +1100

    lib: don't depend on linux headers being installed.
    
    gen_crc64table requires linux include files to be installed in
    /usr/include/linux.  This is a new requrement so hosts that could
    previously build the kernel, now cannot.
    
    gen_crc64table makes this requirement by including <linux/swab.h>, but
    nothing from that header is actaully used.
    
    So remove the #include, so that the linux headers no longer need to be
    installed.
    
    Fixes: feba04fd2cf8 ("lib: add crc64 calculation routines")
    Signed-off-by: NeilBrown <neil@brown.name>
    Acked-by: Coly Li <colyli@suse.de>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

diff --git a/lib/gen_crc64table.c b/lib/gen_crc64table.c
index 9011926e4162..094b43aef8db 100644
--- a/lib/gen_crc64table.c
+++ b/lib/gen_crc64table.c
@@ -16,8 +16,6 @@
 #include <inttypes.h>
 #include <stdio.h>
 
-#include <linux/swab.h>
-
 #define CRC64_ECMA182_POLY 0x42F0E1EBA9EA3693ULL
 
 static uint64_t crc64_table[256] = {0};

commit feba04fd2cf8f6a74865338df2e3e1e94d6cfd13
Author: Coly Li <colyli@suse.de>
Date:   Tue Aug 21 21:57:11 2018 -0700

    lib: add crc64 calculation routines
    
    Patch series "add crc64 calculation as kernel library", v5.
    
    This patchset adds basic implementation of crc64 calculation as a Linux
    kernel library.  Since bcache already does crc64 by itself, this patchset
    also modifies bcache code to use the new crc64 library routine.
    
    Currently bcache is the only user of crc64 calculation, another potential
    user is bcachefs which is on the way to be in mainline kernel.  Therefore
    it makes sense to make crc64 calculation to be a public library.
    
    bcache uses crc64 as storage checksum, if a change of crc lib routines
    results an inconsistent result, the unmatched checksum may make bcache
    'think' the on-disk is corrupted, such a change should be avoided or
    detected as early as possible.  Therefore a patch is being prepared which
    adds a crc test framework, to check consistency of different calculations.
    
    This patch (of 2):
    
    Add the re-write crc64 calculation routines for Linux kernel.  The CRC64
    polynomical arithmetic follows ECMA-182 specification, inspired by CRC
    paper of Dr.  Ross N.  Williams (see
    http://www.ross.net/crc/download/crc_v3.txt) and other public domain
    implementations.
    
    All the changes work in this way,
    - When Linux kernel is built, host program lib/gen_crc64table.c will be
      compiled to lib/gen_crc64table and executed.
    - The output of gen_crc64table execution is an array called as lookup
      table (a.k.a POLY 0x42f0e1eba9ea369) which contain 256 64-bit long
      numbers, this table is dumped into header file lib/crc64table.h.
    - Then the header file is included by lib/crc64.c for normal 64bit crc
      calculation.
    - Function declaration of the crc64 calculation routines is placed in
      include/linux/crc64.h
    
    Currently bcache is the only user of crc64_be(), another potential user is
    bcachefs which is on the way to be in mainline kernel.  Therefore it makes
    sense to move crc64 calculation into lib/crc64.c as public code.
    
    [colyli@suse.de: fix review comments from v4]
      Link: http://lkml.kernel.org/r/20180726053352.2781-2-colyli@suse.de
    Link: http://lkml.kernel.org/r/20180718165545.1622-2-colyli@suse.de
    Signed-off-by: Coly Li <colyli@suse.de>
    Co-developed-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    Signed-off-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    Reviewed-by: Hannes Reinecke <hare@suse.de>
    Cc: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Cc: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    Cc: Michael Lyle <mlyle@lyle.org>
    Cc: Kent Overstreet <kent.overstreet@gmail.com>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: Kate Stewart <kstewart@linuxfoundation.org>
    Cc: Eric Biggers <ebiggers3@gmail.com>
    Cc: Randy Dunlap <rdunlap@infradead.org>
    Cc: Noah Massey <noah.massey@gmail.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

diff --git a/lib/gen_crc64table.c b/lib/gen_crc64table.c
new file mode 100644
index 000000000000..9011926e4162
--- /dev/null
+++ b/lib/gen_crc64table.c
@@ -0,0 +1,68 @@
+// SPDX-License-Identifier: GPL-2.0
+/*
+ * Generate lookup table for the table-driven CRC64 calculation.
+ *
+ * gen_crc64table is executed in kernel build time and generates
+ * lib/crc64table.h. This header is included by lib/crc64.c for
+ * the table-driven CRC64 calculation.
+ *
+ * See lib/crc64.c for more information about which specification
+ * and polynomial arithmetic that gen_crc64table.c follows to
+ * generate the lookup table.
+ *
+ * Copyright 2018 SUSE Linux.
+ *   Author: Coly Li <colyli@suse.de>
+ */
+#include <inttypes.h>
+#include <stdio.h>
+
+#include <linux/swab.h>
+
+#define CRC64_ECMA182_POLY 0x42F0E1EBA9EA3693ULL
+
+static uint64_t crc64_table[256] = {0};
+
+static void generate_crc64_table(void)
+{
+	uint64_t i, j, c, crc;
+
+	for (i = 0; i < 256; i++) {
+		crc = 0;
+		c = i << 56;
+
+		for (j = 0; j < 8; j++) {
+			if ((crc ^ c) & 0x8000000000000000ULL)
+				crc = (crc << 1) ^ CRC64_ECMA182_POLY;
+			else
+				crc <<= 1;
+			c <<= 1;
+		}
+
+		crc64_table[i] = crc;
+	}
+}
+
+static void print_crc64_table(void)
+{
+	int i;
+
+	printf("/* this file is generated - do not edit */\n\n");
+	printf("#include <linux/types.h>\n");
+	printf("#include <linux/cache.h>\n\n");
+	printf("static const u64 ____cacheline_aligned crc64table[256] = {\n");
+	for (i = 0; i < 256; i++) {
+		printf("\t0x%016" PRIx64 "ULL", crc64_table[i]);
+		if (i & 0x1)
+			printf(",\n");
+		else
+			printf(", ");
+	}
+	printf("};\n");
+}
+
+int main(int argc, char *argv[])
+{
+	generate_crc64_table();
+	print_crc64_table();
+	return 0;
+}
