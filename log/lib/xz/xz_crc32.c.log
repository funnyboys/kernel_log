commit 242cdad873a75652f97c35aad61270581e0f3a2e
Author: Joel Stanley <joel@jms.id.au>
Date:   Fri Sep 21 12:24:31 2018 +0930

    lib/xz: Put CRC32_POLY_LE in xz_private.h
    
    This fixes a regression introduced by faa16bc404d72a5 ("lib: Use
    existing define with polynomial").
    
    The cleanup added a dependency on include/linux, which broke the PowerPC
    boot wrapper/decompresser when KERNEL_XZ is enabled:
    
      BOOTCC  arch/powerpc/boot/decompress.o
     In file included from arch/powerpc/boot/../../../lib/decompress_unxz.c:233,
                     from arch/powerpc/boot/decompress.c:42:
     arch/powerpc/boot/../../../lib/xz/xz_crc32.c:18:10: fatal error:
     linux/crc32poly.h: No such file or directory
      #include <linux/crc32poly.h>
               ^~~~~~~~~~~~~~~~~~~
    
    The powerpc decompresser is a hairy corner of the kernel. Even while building
    a 64-bit kernel it needs to build a 32-bit binary and therefore avoid including
    files from include/linux.
    
    This allows users of the xz library to avoid including headers from
    'include/linux/' while still achieving the cleanup of the magic number.
    
    Fixes: faa16bc404d72a5 ("lib: Use existing define with polynomial")
    Reported-by: Meelis Roos <mroos@linux.ee>
    Reported-by: kbuild test robot <lkp@intel.com>
    Suggested-by: Christophe LEROY <christophe.leroy@c-s.fr>
    Signed-off-by: Joel Stanley <joel@jms.id.au>
    Tested-by: Meelis Roos <mroos@linux.ee>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>

diff --git a/lib/xz/xz_crc32.c b/lib/xz/xz_crc32.c
index 25a5d87e2e4c..912aae5fa09e 100644
--- a/lib/xz/xz_crc32.c
+++ b/lib/xz/xz_crc32.c
@@ -15,7 +15,6 @@
  * but they are bigger and use more memory for the lookup table.
  */
 
-#include <linux/crc32poly.h>
 #include "xz_private.h"
 
 /*

commit faa16bc404d72a5afb857c924c83a5f691f83386
Author: Krzysztof Kozlowski <krzk@kernel.org>
Date:   Tue Jul 17 18:05:41 2018 +0200

    lib: Use existing define with polynomial
    
    Do not define again the polynomial but use header with existing define.
    
    Signed-off-by: Krzysztof Kozlowski <krzk@kernel.org>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>

diff --git a/lib/xz/xz_crc32.c b/lib/xz/xz_crc32.c
index 34532d14fd4c..25a5d87e2e4c 100644
--- a/lib/xz/xz_crc32.c
+++ b/lib/xz/xz_crc32.c
@@ -15,6 +15,7 @@
  * but they are bigger and use more memory for the lookup table.
  */
 
+#include <linux/crc32poly.h>
 #include "xz_private.h"
 
 /*
@@ -29,7 +30,7 @@ STATIC_RW_DATA uint32_t xz_crc32_table[256];
 
 XZ_EXTERN void xz_crc32_init(void)
 {
-	const uint32_t poly = 0xEDB88320;
+	const uint32_t poly = CRC32_POLY_LE;
 
 	uint32_t i;
 	uint32_t j;

commit 24fa0402a9b6a537e87e38341e78b7da86486846
Author: Lasse Collin <lasse.collin@tukaani.org>
Date:   Wed Jan 12 17:01:22 2011 -0800

    decompressors: add XZ decompressor module
    
    In userspace, the .lzma format has become mostly a legacy file format that
    got superseded by the .xz format.  Similarly, LZMA Utils was superseded by
    XZ Utils.
    
    These patches add support for XZ decompression into the kernel.  Most of
    the code is as is from XZ Embedded <http://tukaani.org/xz/embedded.html>.
    It was written for the Linux kernel but is usable in other projects too.
    
    Advantages of XZ over the current LZMA code in the kernel:
      - Nice API that can be used by other kernel modules; it's
        not limited to kernel, initramfs, and initrd decompression.
      - Integrity check support (CRC32)
      - BCJ filters improve compression of executable code on
        certain architectures. These together with LZMA2 can
        produce a few percent smaller kernel or Squashfs images
        than plain LZMA without making the decompression slower.
    
    This patch: Add the main decompression code (xz_dec), testing module
    (xz_dec_test), wrapper script (xz_wrap.sh) for the xz command line tool,
    and documentation.  The xz_dec module is enough to have a usable XZ
    decompressor e.g.  for Squashfs.
    
    Signed-off-by: Lasse Collin <lasse.collin@tukaani.org>
    Cc: "H. Peter Anvin" <hpa@zytor.com>
    Cc: Alain Knaff <alain@knaff.lu>
    Cc: Albin Tonnerre <albin.tonnerre@free-electrons.com>
    Cc: Phillip Lougher <phillip@lougher.demon.co.uk>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

diff --git a/lib/xz/xz_crc32.c b/lib/xz/xz_crc32.c
new file mode 100644
index 000000000000..34532d14fd4c
--- /dev/null
+++ b/lib/xz/xz_crc32.c
@@ -0,0 +1,59 @@
+/*
+ * CRC32 using the polynomial from IEEE-802.3
+ *
+ * Authors: Lasse Collin <lasse.collin@tukaani.org>
+ *          Igor Pavlov <http://7-zip.org/>
+ *
+ * This file has been put into the public domain.
+ * You can do whatever you want with this file.
+ */
+
+/*
+ * This is not the fastest implementation, but it is pretty compact.
+ * The fastest versions of xz_crc32() on modern CPUs without hardware
+ * accelerated CRC instruction are 3-5 times as fast as this version,
+ * but they are bigger and use more memory for the lookup table.
+ */
+
+#include "xz_private.h"
+
+/*
+ * STATIC_RW_DATA is used in the pre-boot environment on some architectures.
+ * See <linux/decompress/mm.h> for details.
+ */
+#ifndef STATIC_RW_DATA
+#	define STATIC_RW_DATA static
+#endif
+
+STATIC_RW_DATA uint32_t xz_crc32_table[256];
+
+XZ_EXTERN void xz_crc32_init(void)
+{
+	const uint32_t poly = 0xEDB88320;
+
+	uint32_t i;
+	uint32_t j;
+	uint32_t r;
+
+	for (i = 0; i < 256; ++i) {
+		r = i;
+		for (j = 0; j < 8; ++j)
+			r = (r >> 1) ^ (poly & ~((r & 1) - 1));
+
+		xz_crc32_table[i] = r;
+	}
+
+	return;
+}
+
+XZ_EXTERN uint32_t xz_crc32(const uint8_t *buf, size_t size, uint32_t crc)
+{
+	crc = ~crc;
+
+	while (size != 0) {
+		crc = xz_crc32_table[*buf++ ^ (crc & 0xFF)] ^ (crc >> 8);
+		--size;
+	}
+
+	return ~crc;
+}
