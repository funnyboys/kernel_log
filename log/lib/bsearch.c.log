commit df65bba1dcd8ffadd922a71196b78c6d7630c33b
Author: Peter Zijlstra <peterz@infradead.org>
Date:   Wed Feb 19 18:25:09 2020 +0100

    lib/bsearch: Provide __always_inline variant
    
    For code that needs the ultimate performance (it can inline the @cmp
    function too) or simply needs to avoid calling external functions for
    whatever reason, provide an __always_inline variant of bsearch().
    
    [ tglx: Renamed to __inline_bsearch() as suggested by Andy ]
    
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Reviewed-by: Alexandre Chartre <alexandre.chartre@oracle.com>
    Acked-by: Andy Lutomirski <luto@kernel.org>
    Link: https://lkml.kernel.org/r/20200505135313.624443814@linutronix.de

diff --git a/lib/bsearch.c b/lib/bsearch.c
index 8b3aae5ae77a..bf86aa66f2b2 100644
--- a/lib/bsearch.c
+++ b/lib/bsearch.c
@@ -28,27 +28,9 @@
  * the key and elements in the array are of the same type, you can use
  * the same comparison function for both sort() and bsearch().
  */
-void *bsearch(const void *key, const void *base, size_t num, size_t size,
-	      cmp_func_t cmp)
+void *bsearch(const void *key, const void *base, size_t num, size_t size, cmp_func_t cmp)
 {
-	const char *pivot;
-	int result;
-
-	while (num > 0) {
-		pivot = base + (num >> 1) * size;
-		result = cmp(key, pivot);
-
-		if (result == 0)
-			return (void *)pivot;
-
-		if (result > 0) {
-			base = pivot + size;
-			num--;
-		}
-		num >>= 1;
-	}
-
-	return NULL;
+	return __inline_bsearch(key, base, num, size, cmp);
 }
 EXPORT_SYMBOL(bsearch);
 NOKPROBE_SYMBOL(bsearch);

commit e8877ec5dbba6f39d25ca3a81716c23b1760f2ee
Author: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
Date:   Mon Oct 7 16:56:55 2019 +0300

    lib/bsearch: Use generic type for comparator function
    
    Comparator function type, cmp_func_t, is defined in the types.h,
    use it in bsearch() and, thus, add more sense to the corresponding
    comment in the code.
    
    Link: http://lkml.kernel.org/r/20191007135656.37734-2-andriy.shevchenko@linux.intel.com
    
    Signed-off-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    Signed-off-by: Steven Rostedt (VMware) <rostedt@goodmis.org>

diff --git a/lib/bsearch.c b/lib/bsearch.c
index 8baa83968162..8b3aae5ae77a 100644
--- a/lib/bsearch.c
+++ b/lib/bsearch.c
@@ -29,7 +29,7 @@
  * the same comparison function for both sort() and bsearch().
  */
 void *bsearch(const void *key, const void *base, size_t num, size_t size,
-	      int (*cmp)(const void *key, const void *elt))
+	      cmp_func_t cmp)
 {
 	const char *pivot;
 	int result;

commit a10e763b87134a9a4ca3a38b5c4b533e75ec63a3
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Fri May 31 01:09:32 2019 -0700

    treewide: Replace GPLv2 boilerplate/reference with SPDX - rule 372
    
    Based on 1 normalized pattern(s):
    
      this program is free software you can redistribute it and or modify
      it under the terms of the gnu general public license as published by
      the free software foundation version 2
    
    extracted by the scancode license scanner the SPDX license identifier
    
      GPL-2.0-only
    
    has been chosen to replace the boilerplate/reference in 135 file(s).
    
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Reviewed-by: Allison Randal <allison@lohutok.net>
    Cc: linux-spdx@vger.kernel.org
    Link: https://lkml.kernel.org/r/20190531081036.435762997@linutronix.de
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/lib/bsearch.c b/lib/bsearch.c
index 82512fe7b33c..8baa83968162 100644
--- a/lib/bsearch.c
+++ b/lib/bsearch.c
@@ -1,12 +1,9 @@
+// SPDX-License-Identifier: GPL-2.0-only
 /*
  * A generic implementation of binary search for the Linux kernel
  *
  * Copyright (C) 2008-2009 Ksplice, Inc.
  * Author: Tim Abbott <tabbott@ksplice.com>
- *
- * This program is free software; you can redistribute it and/or
- * modify it under the terms of the GNU General Public License as
- * published by the Free Software Foundation; version 2.
  */
 
 #include <linux/export.h>

commit 02106f883cd745523f7766d90a739f983f19e650
Author: Andrea Righi <righi.andrea@gmail.com>
Date:   Wed Feb 13 01:15:34 2019 +0900

    kprobes: Prohibit probing on bsearch()
    
    Since kprobe breakpoing handler is using bsearch(), probing on this
    routine can cause recursive breakpoint problem.
    
    int3
     ->do_int3()
       ->ftrace_int3_handler()
         ->ftrace_location()
           ->ftrace_location_range()
             ->bsearch() -> int3
    
    Prohibit probing on bsearch().
    
    Signed-off-by: Andrea Righi <righi.andrea@gmail.com>
    Acked-by: Masami Hiramatsu <mhiramat@kernel.org>
    Cc: Alexander Shishkin <alexander.shishkin@linux.intel.com>
    Cc: Arnaldo Carvalho de Melo <acme@redhat.com>
    Cc: Jiri Olsa <jolsa@redhat.com>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Mathieu Desnoyers <mathieu.desnoyers@efficios.com>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Steven Rostedt <rostedt@goodmis.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Link: http://lkml.kernel.org/r/154998813406.31052.8791425358974650922.stgit@devbox
    Signed-off-by: Ingo Molnar <mingo@kernel.org>

diff --git a/lib/bsearch.c b/lib/bsearch.c
index 18b445b010c3..82512fe7b33c 100644
--- a/lib/bsearch.c
+++ b/lib/bsearch.c
@@ -11,6 +11,7 @@
 
 #include <linux/export.h>
 #include <linux/bsearch.h>
+#include <linux/kprobes.h>
 
 /*
  * bsearch - binary search an array of elements
@@ -53,3 +54,4 @@ void *bsearch(const void *key, const void *base, size_t num, size_t size,
 	return NULL;
 }
 EXPORT_SYMBOL(bsearch);
+NOKPROBE_SYMBOL(bsearch);

commit 166a0f780a8fdb67f232c85e9905ba84f7247da9
Author: Sergey Senozhatsky <sergey.senozhatsky@gmail.com>
Date:   Mon Jul 10 15:52:01 2017 -0700

    lib/bsearch.c: micro-optimize pivot position calculation
    
    There is a slightly faster way (in terms of the number of instructions
    being used) to calculate the position of a middle element, preserving
    integer overflow safeness.
    
    ./scripts/bloat-o-meter lib/bsearch.o.old lib/bsearch.o.new
    add/remove: 0/0 grow/shrink: 0/1 up/down: 0/-24 (-24)
    function                                     old     new   delta
    bsearch                                      122      98     -24
    
    TEST
    
    INT array of size 100001, elements [0..100000]. gcc 7.1, Os, x86_64.
    
    a) bsearch() of existing key "100001 - 2":
    
    BASE
    ====
    
    $ perf stat ./a.out
    
     Performance counter stats for './a.out':
    
            619.445196      task-clock:u (msec)       #    0.999 CPUs utilized
                     0      context-switches:u        #    0.000 K/sec
                     0      cpu-migrations:u          #    0.000 K/sec
                   133      page-faults:u             #    0.215 K/sec
         1,949,517,279      cycles:u                  #    3.147 GHz                      (83.06%)
           181,017,938      stalled-cycles-frontend:u #    9.29% frontend cycles idle     (83.05%)
            82,959,265      stalled-cycles-backend:u  #    4.26% backend cycles idle      (67.02%)
         4,355,706,383      instructions:u            #    2.23  insn per cycle
                                                      #    0.04  stalled cycles per insn  (83.54%)
         1,051,539,242      branches:u                # 1697.550 M/sec                    (83.54%)
            15,263,381      branch-misses:u           #    1.45% of all branches          (83.43%)
    
           0.620082548 seconds time elapsed
    
    PATCHED
    =======
    
    $ perf stat ./a.out
    
     Performance counter stats for './a.out':
    
            475.097316      task-clock:u (msec)       #    0.999 CPUs utilized
                     0      context-switches:u        #    0.000 K/sec
                     0      cpu-migrations:u          #    0.000 K/sec
                   135      page-faults:u             #    0.284 K/sec
         1,487,467,717      cycles:u                  #    3.131 GHz                      (82.95%)
           186,537,162      stalled-cycles-frontend:u #   12.54% frontend cycles idle     (82.93%)
            28,797,869      stalled-cycles-backend:u  #    1.94% backend cycles idle      (67.10%)
         3,807,564,203      instructions:u            #    2.56  insn per cycle
                                                      #    0.05  stalled cycles per insn  (83.57%)
         1,049,344,291      branches:u                # 2208.693 M/sec                    (83.60%)
                 5,485      branch-misses:u           #    0.00% of all branches          (83.58%)
    
           0.475760235 seconds time elapsed
    
    b) bsearch() of un-existing key "100001 + 2":
    
    BASE
    ====
    
    $ perf stat ./a.out
    
     Performance counter stats for './a.out':
    
            499.244480      task-clock:u (msec)       #    0.999 CPUs utilized
                     0      context-switches:u        #    0.000 K/sec
                     0      cpu-migrations:u          #    0.000 K/sec
                   132      page-faults:u             #    0.264 K/sec
         1,571,194,855      cycles:u                  #    3.147 GHz                      (83.18%)
            13,450,980      stalled-cycles-frontend:u #    0.86% frontend cycles idle     (83.18%)
            21,256,072      stalled-cycles-backend:u  #    1.35% backend cycles idle      (66.78%)
         4,171,197,909      instructions:u            #    2.65  insn per cycle
                                                      #    0.01  stalled cycles per insn  (83.68%)
         1,009,175,281      branches:u                # 2021.405 M/sec                    (83.79%)
                 3,122      branch-misses:u           #    0.00% of all branches          (83.37%)
    
           0.499871144 seconds time elapsed
    
    PATCHED
    =======
    
    $ perf stat ./a.out
    
     Performance counter stats for './a.out':
    
            399.023499      task-clock:u (msec)       #    0.998 CPUs utilized
                     0      context-switches:u        #    0.000 K/sec
                     0      cpu-migrations:u          #    0.000 K/sec
                   134      page-faults:u             #    0.336 K/sec
         1,245,793,991      cycles:u                  #    3.122 GHz                      (83.39%)
            11,529,273      stalled-cycles-frontend:u #    0.93% frontend cycles idle     (83.46%)
            12,116,311      stalled-cycles-backend:u  #    0.97% backend cycles idle      (66.92%)
         3,679,710,005      instructions:u            #    2.95  insn per cycle
                                                      #    0.00  stalled cycles per insn  (83.47%)
         1,009,792,625      branches:u                # 2530.660 M/sec                    (83.46%)
                 2,590      branch-misses:u           #    0.00% of all branches          (83.12%)
    
           0.399733539 seconds time elapsed
    
    Link: http://lkml.kernel.org/r/20170607150457.5905-1-sergey.senozhatsky@gmail.com
    Signed-off-by: Sergey Senozhatsky <sergey.senozhatsky@gmail.com>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

diff --git a/lib/bsearch.c b/lib/bsearch.c
index e33c179089db..18b445b010c3 100644
--- a/lib/bsearch.c
+++ b/lib/bsearch.c
@@ -33,19 +33,21 @@
 void *bsearch(const void *key, const void *base, size_t num, size_t size,
 	      int (*cmp)(const void *key, const void *elt))
 {
-	size_t start = 0, end = num;
+	const char *pivot;
 	int result;
 
-	while (start < end) {
-		size_t mid = start + (end - start) / 2;
+	while (num > 0) {
+		pivot = base + (num >> 1) * size;
+		result = cmp(key, pivot);
 
-		result = cmp(key, base + mid * size);
-		if (result < 0)
-			end = mid;
-		else if (result > 0)
-			start = mid + 1;
-		else
-			return (void *)base + mid * size;
+		if (result == 0)
+			return (void *)pivot;
+
+		if (result > 0) {
+			base = pivot + size;
+			num--;
+		}
+		num >>= 1;
 	}
 
 	return NULL;

commit 8bc3bcc93a2b4e47d5d410146f6546bca6171663
Author: Paul Gortmaker <paul.gortmaker@windriver.com>
Date:   Wed Nov 16 21:29:17 2011 -0500

    lib: reduce the use of module.h wherever possible
    
    For files only using THIS_MODULE and/or EXPORT_SYMBOL, map
    them onto including export.h -- or if the file isn't even
    using those, then just delete the include.  Fix up any implicit
    include dependencies that were being masked by module.h along
    the way.
    
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>

diff --git a/lib/bsearch.c b/lib/bsearch.c
index 5b54758e2afb..e33c179089db 100644
--- a/lib/bsearch.c
+++ b/lib/bsearch.c
@@ -9,7 +9,7 @@
  * published by the Free Software Foundation; version 2.
  */
 
-#include <linux/module.h>
+#include <linux/export.h>
 #include <linux/bsearch.h>
 
 /*

commit 1a94dc35bc5c166d89913dc01a49d27a3c21a455
Author: Tim Abbott <tabbott@ksplice.com>
Date:   Thu Apr 14 20:00:19 2011 +0200

    lib: Add generic binary search function to the kernel.
    
    There a large number hand-coded binary searches in the kernel (run
    "git grep search | grep binary" to find many of them).  Since in my
    experience, hand-coding binary searches can be error-prone, it seems
    worth cleaning this up by providing a generic binary search function.
    
    This generic binary search implementation comes from Ksplice.  It has
    the same basic API as the C library bsearch() function.  Ksplice uses
    it in half a dozen places with 4 different comparison functions, and I
    think our code is substantially cleaner because of this.
    
    Signed-off-by: Tim Abbott <tabbott@ksplice.com>
    Extra-bikeshedding-by: Alan Jenkins <alan-jenkins@tuffmail.co.uk>
    Extra-bikeshedding-by: André Goddard Rosa <andre.goddard@gmail.com>
    Extra-bikeshedding-by: Rusty Russell <rusty@rustcorp.com.au>
    Signed-off-by: Rusty Russell <rusty@rustcorp.com.au>
    Signed-off-by: Alessio Igor Bogani <abogani@kernel.org>
    Signed-off-by: Rusty Russell <rusty@rustcorp.com.au>

diff --git a/lib/bsearch.c b/lib/bsearch.c
new file mode 100644
index 000000000000..5b54758e2afb
--- /dev/null
+++ b/lib/bsearch.c
@@ -0,0 +1,53 @@
+/*
+ * A generic implementation of binary search for the Linux kernel
+ *
+ * Copyright (C) 2008-2009 Ksplice, Inc.
+ * Author: Tim Abbott <tabbott@ksplice.com>
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License as
+ * published by the Free Software Foundation; version 2.
+ */
+
+#include <linux/module.h>
+#include <linux/bsearch.h>
+
+/*
+ * bsearch - binary search an array of elements
+ * @key: pointer to item being searched for
+ * @base: pointer to first element to search
+ * @num: number of elements
+ * @size: size of each element
+ * @cmp: pointer to comparison function
+ *
+ * This function does a binary search on the given array.  The
+ * contents of the array should already be in ascending sorted order
+ * under the provided comparison function.
+ *
+ * Note that the key need not have the same type as the elements in
+ * the array, e.g. key could be a string and the comparison function
+ * could compare the string with the struct's name field.  However, if
+ * the key and elements in the array are of the same type, you can use
+ * the same comparison function for both sort() and bsearch().
+ */
+void *bsearch(const void *key, const void *base, size_t num, size_t size,
+	      int (*cmp)(const void *key, const void *elt))
+{
+	size_t start = 0, end = num;
+	int result;
+
+	while (start < end) {
+		size_t mid = start + (end - start) / 2;
+
+		result = cmp(key, base + mid * size);
+		if (result < 0)
+			end = mid;
+		else if (result > 0)
+			start = mid + 1;
+		else
+			return (void *)base + mid * size;
+	}
+
+	return NULL;
+}
+EXPORT_SYMBOL(bsearch);
