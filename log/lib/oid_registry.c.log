commit b4d0d230ccfb5d1a9ea85da64aa584df7c148ee9
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Mon May 20 19:08:01 2019 +0200

    treewide: Replace GPLv2 boilerplate/reference with SPDX - rule 36
    
    Based on 1 normalized pattern(s):
    
      this program is free software you can redistribute it and or modify
      it under the terms of the gnu general public licence as published by
      the free software foundation either version 2 of the licence or at
      your option any later version
    
    extracted by the scancode license scanner the SPDX license identifier
    
      GPL-2.0-or-later
    
    has been chosen to replace the boilerplate/reference in 114 file(s).
    
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Reviewed-by: Allison Randal <allison@lohutok.net>
    Reviewed-by: Kate Stewart <kstewart@linuxfoundation.org>
    Cc: linux-spdx@vger.kernel.org
    Link: https://lkml.kernel.org/r/20190520170857.552531963@linutronix.de
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/lib/oid_registry.c b/lib/oid_registry.c
index 0bcac6ccb1b2..f7ad43f28579 100644
--- a/lib/oid_registry.c
+++ b/lib/oid_registry.c
@@ -1,12 +1,8 @@
+// SPDX-License-Identifier: GPL-2.0-or-later
 /* ASN.1 Object identifier (OID) registry
  *
  * Copyright (C) 2012 Red Hat, Inc. All Rights Reserved.
  * Written by David Howells (dhowells@redhat.com)
- *
- * This program is free software; you can redistribute it and/or
- * modify it under the terms of the GNU General Public Licence
- * as published by the Free Software Foundation; either version
- * 2 of the Licence, or (at your option) any later version.
  */
 
 #include <linux/module.h>

commit 8dfd2f22d3bf3ab7714f7495ad5d897b8845e8c1
Author: Eric Biggers <ebiggers3@gmail.com>
Date:   Fri Dec 8 15:13:28 2017 +0000

    509: fix printing uninitialized stack memory when OID is empty
    
    Callers of sprint_oid() do not check its return value before printing
    the result.  In the case where the OID is zero-length, -EBADMSG was
    being returned without anything being written to the buffer, resulting
    in uninitialized stack memory being printed.  Fix this by writing
    "(bad)" to the buffer in the cases where -EBADMSG is returned.
    
    Fixes: 4f73175d0375 ("X.509: Add utility functions to render OIDs as strings")
    Signed-off-by: Eric Biggers <ebiggers@google.com>
    Signed-off-by: David Howells <dhowells@redhat.com>

diff --git a/lib/oid_registry.c b/lib/oid_registry.c
index 5a75d127995d..0bcac6ccb1b2 100644
--- a/lib/oid_registry.c
+++ b/lib/oid_registry.c
@@ -116,7 +116,7 @@ int sprint_oid(const void *data, size_t datasize, char *buffer, size_t bufsize)
 	int count;
 
 	if (v >= end)
-		return -EBADMSG;
+		goto bad;
 
 	n = *v++;
 	ret = count = snprintf(buffer, bufsize, "%u.%u", n / 40, n % 40);
@@ -134,7 +134,7 @@ int sprint_oid(const void *data, size_t datasize, char *buffer, size_t bufsize)
 			num = n & 0x7f;
 			do {
 				if (v >= end)
-					return -EBADMSG;
+					goto bad;
 				n = *v++;
 				num <<= 7;
 				num |= n & 0x7f;
@@ -148,6 +148,10 @@ int sprint_oid(const void *data, size_t datasize, char *buffer, size_t bufsize)
 	}
 
 	return ret;
+
+bad:
+	snprintf(buffer, bufsize, "(bad)");
+	return -EBADMSG;
 }
 EXPORT_SYMBOL_GPL(sprint_oid);
 

commit 47e0a208fb9d91e3f3c86309e752b13a36470ae8
Author: Eric Biggers <ebiggers@google.com>
Date:   Fri Dec 8 15:13:28 2017 +0000

    X.509: fix buffer overflow detection in sprint_oid()
    
    In sprint_oid(), if the input buffer were to be more than 1 byte too
    small for the first snprintf(), 'bufsize' would underflow, causing a
    buffer overflow when printing the remainder of the OID.
    
    Fortunately this cannot actually happen currently, because no users pass
    in a buffer that can be too small for the first snprintf().
    
    Regardless, fix it by checking the snprintf() return value correctly.
    
    For consistency also tweak the second snprintf() check to look the same.
    
    Fixes: 4f73175d0375 ("X.509: Add utility functions to render OIDs as strings")
    Cc: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Eric Biggers <ebiggers@google.com>
    Signed-off-by: David Howells <dhowells@redhat.com>
    Reviewed-by: James Morris <james.l.morris@oracle.com>

diff --git a/lib/oid_registry.c b/lib/oid_registry.c
index 41b9e50711a7..5a75d127995d 100644
--- a/lib/oid_registry.c
+++ b/lib/oid_registry.c
@@ -120,10 +120,10 @@ int sprint_oid(const void *data, size_t datasize, char *buffer, size_t bufsize)
 
 	n = *v++;
 	ret = count = snprintf(buffer, bufsize, "%u.%u", n / 40, n % 40);
+	if (count >= bufsize)
+		return -ENOBUFS;
 	buffer += count;
 	bufsize -= count;
-	if (bufsize == 0)
-		return -ENOBUFS;
 
 	while (v < end) {
 		num = 0;
@@ -141,9 +141,9 @@ int sprint_oid(const void *data, size_t datasize, char *buffer, size_t bufsize)
 			} while (n & 0x80);
 		}
 		ret += count = snprintf(buffer, bufsize, ".%lu", num);
-		buffer += count;
-		if (bufsize <= count)
+		if (count >= bufsize)
 			return -ENOBUFS;
+		buffer += count;
 		bufsize -= count;
 	}
 

commit afdb05e9d61905220f09268535235288e6ba3a16
Author: Takashi Iwai <tiwai@suse.de>
Date:   Fri Sep 8 16:15:58 2017 -0700

    lib/oid_registry.c: X.509: fix the buffer overflow in the utility function for OID string
    
    The sprint_oid() utility function doesn't properly check the buffer size
    that it causes that the warning in vsnprintf() be triggered.  For
    example on v4.1 kernel:
    
      ------------[ cut here ]------------
      WARNING: CPU: 0 PID: 2357 at lib/vsprintf.c:1867 vsnprintf+0x5a7/0x5c0()
      ...
    
    We can trigger this issue by injecting maliciously crafted x509 cert in
    DER format.  Just using hex editor to change the length of OID to over
    the length of the SEQUENCE container.  For example:
    
        0:d=0  hl=4 l= 980 cons: SEQUENCE
        4:d=1  hl=4 l= 700 cons:  SEQUENCE
        8:d=2  hl=2 l=   3 cons:   cont [ 0 ]
       10:d=3  hl=2 l=   1 prim:    INTEGER           :02
       13:d=2  hl=2 l=   9 prim:   INTEGER           :9B47FAF791E7D1E3
       24:d=2  hl=2 l=  13 cons:   SEQUENCE
       26:d=3  hl=2 l=   9 prim:    OBJECT            :sha256WithRSAEncryption
       37:d=3  hl=2 l=   0 prim:    NULL
       39:d=2  hl=2 l= 121 cons:   SEQUENCE
       41:d=3  hl=2 l=  22 cons:    SET
       43:d=4  hl=2 l=  20 cons:     SEQUENCE      <=== the SEQ length is 20
       45:d=5  hl=2 l=   3 prim:      OBJECT            :organizationName
            <=== the original length is 3, change the length of OID to over the length of SEQUENCE
    
    Pawel Wieczorkiewicz reported this problem and Takashi Iwai provided
    patch to fix it by checking the bufsize in sprint_oid().
    
    Link: http://lkml.kernel.org/r/20170903021646.2080-1-jlee@suse.com
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: "Lee, Chun-Yi" <jlee@suse.com>
    Reported-by: Pawel Wieczorkiewicz <pwieczorkiewicz@suse.com>
    Cc: David Howells <dhowells@redhat.com>
    Cc: Rusty Russell <rusty@rustcorp.com.au>
    Cc: Pawel Wieczorkiewicz <pwieczorkiewicz@suse.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

diff --git a/lib/oid_registry.c b/lib/oid_registry.c
index 318f382a010d..41b9e50711a7 100644
--- a/lib/oid_registry.c
+++ b/lib/oid_registry.c
@@ -142,9 +142,9 @@ int sprint_oid(const void *data, size_t datasize, char *buffer, size_t bufsize)
 		}
 		ret += count = snprintf(buffer, bufsize, ".%lu", num);
 		buffer += count;
-		bufsize -= count;
-		if (bufsize == 0)
+		if (bufsize <= count)
 			return -ENOBUFS;
+		bufsize -= count;
 	}
 
 	return ret;

commit 9e6879460c8edb0cd3c24c09b83d06541b5af0dc
Author: David Howells <dhowells@redhat.com>
Date:   Sat May 4 08:48:27 2013 +0100

    Give the OID registry file module info to avoid kernel tainting
    
    Give the OID registry file module information so that it doesn't taint the
    kernel when compiled as a module and loaded.
    
    Reported-by: Dros Adamson <Weston.Adamson@netapp.com>
    Signed-off-by: David Howells <dhowells@redhat.com>
    cc: Trond Myklebust <Trond.Myklebust@netapp.com>
    cc: stable@vger.kernel.org
    cc: linux-nfs@vger.kernel.org
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

diff --git a/lib/oid_registry.c b/lib/oid_registry.c
index d8de11f45908..318f382a010d 100644
--- a/lib/oid_registry.c
+++ b/lib/oid_registry.c
@@ -9,6 +9,7 @@
  * 2 of the Licence, or (at your option) any later version.
  */
 
+#include <linux/module.h>
 #include <linux/export.h>
 #include <linux/oid_registry.h>
 #include <linux/kernel.h>
@@ -16,6 +17,10 @@
 #include <linux/bug.h>
 #include "oid_registry_data.c"
 
+MODULE_DESCRIPTION("OID Registry");
+MODULE_AUTHOR("Red Hat, Inc.");
+MODULE_LICENSE("GPL");
+
 /**
  * look_up_OID - Find an OID registration for the specified data
  * @data: Binary representation of the OID

commit 4f73175d0375a7c1b3ae625e76acee8b39741f28
Author: David Howells <dhowells@redhat.com>
Date:   Fri Sep 21 23:30:51 2012 +0100

    X.509: Add utility functions to render OIDs as strings
    
    Add a pair of utility functions to render OIDs as strings.  The first takes an
    encoded OID and turns it into a "a.b.c.d" form string:
    
            int sprint_oid(const void *data, size_t datasize,
                           char *buffer, size_t bufsize);
    
    The second takes an OID enum index and calls the first on the data held
    therein:
    
            int sprint_OID(enum OID oid, char *buffer, size_t bufsize);
    
    Signed-off-by: David Howells <dhowells@redhat.com>
    Signed-off-by: Rusty Russell <rusty@rustcorp.com.au>

diff --git a/lib/oid_registry.c b/lib/oid_registry.c
index 33cfd171f627..d8de11f45908 100644
--- a/lib/oid_registry.c
+++ b/lib/oid_registry.c
@@ -11,6 +11,9 @@
 
 #include <linux/export.h>
 #include <linux/oid_registry.h>
+#include <linux/kernel.h>
+#include <linux/errno.h>
+#include <linux/bug.h>
 #include "oid_registry_data.c"
 
 /**
@@ -87,3 +90,81 @@ enum OID look_up_OID(const void *data, size_t datasize)
 	return OID__NR;
 }
 EXPORT_SYMBOL_GPL(look_up_OID);
+
+/*
+ * sprint_OID - Print an Object Identifier into a buffer
+ * @data: The encoded OID to print
+ * @datasize: The size of the encoded OID
+ * @buffer: The buffer to render into
+ * @bufsize: The size of the buffer
+ *
+ * The OID is rendered into the buffer in "a.b.c.d" format and the number of
+ * bytes is returned.  -EBADMSG is returned if the data could not be intepreted
+ * and -ENOBUFS if the buffer was too small.
+ */
+int sprint_oid(const void *data, size_t datasize, char *buffer, size_t bufsize)
+{
+	const unsigned char *v = data, *end = v + datasize;
+	unsigned long num;
+	unsigned char n;
+	size_t ret;
+	int count;
+
+	if (v >= end)
+		return -EBADMSG;
+
+	n = *v++;
+	ret = count = snprintf(buffer, bufsize, "%u.%u", n / 40, n % 40);
+	buffer += count;
+	bufsize -= count;
+	if (bufsize == 0)
+		return -ENOBUFS;
+
+	while (v < end) {
+		num = 0;
+		n = *v++;
+		if (!(n & 0x80)) {
+			num = n;
+		} else {
+			num = n & 0x7f;
+			do {
+				if (v >= end)
+					return -EBADMSG;
+				n = *v++;
+				num <<= 7;
+				num |= n & 0x7f;
+			} while (n & 0x80);
+		}
+		ret += count = snprintf(buffer, bufsize, ".%lu", num);
+		buffer += count;
+		bufsize -= count;
+		if (bufsize == 0)
+			return -ENOBUFS;
+	}
+
+	return ret;
+}
+EXPORT_SYMBOL_GPL(sprint_oid);
+
+/**
+ * sprint_OID - Print an Object Identifier into a buffer
+ * @oid: The OID to print
+ * @buffer: The buffer to render into
+ * @bufsize: The size of the buffer
+ *
+ * The OID is rendered into the buffer in "a.b.c.d" format and the number of
+ * bytes is returned.
+ */
+int sprint_OID(enum OID oid, char *buffer, size_t bufsize)
+{
+	int ret;
+
+	BUG_ON(oid >= OID__NR);
+
+	ret = sprint_oid(oid_data + oid_index[oid],
+			 oid_index[oid + 1] - oid_index[oid],
+			 buffer, bufsize);
+	BUG_ON(ret == -EBADMSG);
+	return ret;
+}
+EXPORT_SYMBOL_GPL(sprint_OID);

commit a77ad6ea0b0bb1f9d1f52ed494bd72a5fdde208e
Author: David Howells <dhowells@redhat.com>
Date:   Fri Sep 21 23:30:46 2012 +0100

    X.509: Implement simple static OID registry
    
    Implement a simple static OID registry that allows the mapping of an encoded
    OID to an enum value for ease of use.
    
    The OID registry index enum appears in the:
    
            linux/oid_registry.h
    
    header file.  A script generates the registry from lines in the header file
    that look like:
    
            <sp*>OID_foo,<sp*>/*<sp*>1.2.3.4<sp*>*/
    
    The actual OID is taken to be represented by the numbers with interpolated
    dots in the comment.
    
    All other lines in the header are ignored.
    
    The registry is queries by calling:
    
            OID look_up_oid(const void *data, size_t datasize);
    
    This returns a number from the registry enum representing the OID if found or
    OID__NR if not.
    
    Signed-off-by: David Howells <dhowells@redhat.com>
    Signed-off-by: Rusty Russell <rusty@rustcorp.com.au>

diff --git a/lib/oid_registry.c b/lib/oid_registry.c
new file mode 100644
index 000000000000..33cfd171f627
--- /dev/null
+++ b/lib/oid_registry.c
@@ -0,0 +1,89 @@
+/* ASN.1 Object identifier (OID) registry
+ *
+ * Copyright (C) 2012 Red Hat, Inc. All Rights Reserved.
+ * Written by David Howells (dhowells@redhat.com)
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public Licence
+ * as published by the Free Software Foundation; either version
+ * 2 of the Licence, or (at your option) any later version.
+ */
+
+#include <linux/export.h>
+#include <linux/oid_registry.h>
+#include "oid_registry_data.c"
+
+/**
+ * look_up_OID - Find an OID registration for the specified data
+ * @data: Binary representation of the OID
+ * @datasize: Size of the binary representation
+ */
+enum OID look_up_OID(const void *data, size_t datasize)
+{
+	const unsigned char *octets = data;
+	enum OID oid;
+	unsigned char xhash;
+	unsigned i, j, k, hash;
+	size_t len;
+
+	/* Hash the OID data */
+	hash = datasize - 1;
+
+	for (i = 0; i < datasize; i++)
+		hash += octets[i] * 33;
+	hash = (hash >> 24) ^ (hash >> 16) ^ (hash >> 8) ^ hash;
+	hash &= 0xff;
+
+	/* Binary search the OID registry.  OIDs are stored in ascending order
+	 * of hash value then ascending order of size and then in ascending
+	 * order of reverse value.
+	 */
+	i = 0;
+	k = OID__NR;
+	while (i < k) {
+		j = (i + k) / 2;
+
+		xhash = oid_search_table[j].hash;
+		if (xhash > hash) {
+			k = j;
+			continue;
+		}
+		if (xhash < hash) {
+			i = j + 1;
+			continue;
+		}
+
+		oid = oid_search_table[j].oid;
+		len = oid_index[oid + 1] - oid_index[oid];
+		if (len > datasize) {
+			k = j;
+			continue;
+		}
+		if (len < datasize) {
+			i = j + 1;
+			continue;
+		}
+
+		/* Variation is most likely to be at the tail end of the
+		 * OID, so do the comparison in reverse.
+		 */
+		while (len > 0) {
+			unsigned char a = oid_data[oid_index[oid] + --len];
+			unsigned char b = octets[len];
+			if (a > b) {
+				k = j;
+				goto next;
+			}
+			if (a < b) {
+				i = j + 1;
+				goto next;
+			}
+		}
+		return oid;
+	next:
+		;
+	}
+
+	return OID__NR;
+}
+EXPORT_SYMBOL_GPL(look_up_OID);
