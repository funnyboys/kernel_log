commit 89b9060987d988333de59dd218c9666bd7ee95a5
Author: Tetsuo Handa <penguin-kernel@i-love.sakura.ne.jp>
Date:   Tue Dec 17 18:42:06 2019 +0900

    kconfig: Add yes2modconfig and mod2yesconfig targets.
    
    Since kernel configs provided by syzbot are close to "make allyesconfig",
    it takes long time to rebuild. This is especially waste of time when we
    need to rebuild for many times (e.g. doing manual printk() inspection,
    bisect operations).
    
    We can save time if we can exclude modules which are irrelevant to each
    problem. But "make localmodconfig" cannot exclude modules which are built
    into vmlinux because /sbin/lsmod output is used as the source of modules.
    
    Therefore, this patch adds "make yes2modconfig" which converts from =y
    to =m if possible. After confirming that the interested problem is still
    reproducible, we can try "make localmodconfig" (and/or manually tune
    based on "Modules linked in:" line) in order to exclude modules which are
    irrelevant to the interested problem. While we are at it, this patch also
    adds "make mod2yesconfig" which converts from =m to =y in case someone
    wants to convert from =m to =y after "make localmodconfig".
    
    Signed-off-by: Tetsuo Handa <penguin-kernel@I-love.SAKURA.ne.jp>
    Cc: Dmitry Vyukov <dvyukov@google.com>
    Signed-off-by: Masahiro Yamada <masahiroy@kernel.org>

diff --git a/scripts/kconfig/lkc.h b/scripts/kconfig/lkc.h
index 73d3f01f1736..d4ca8297364f 100644
--- a/scripts/kconfig/lkc.h
+++ b/scripts/kconfig/lkc.h
@@ -34,6 +34,8 @@ enum conf_def_mode {
 	def_default,
 	def_yes,
 	def_mod,
+	def_y2m,
+	def_m2y,
 	def_no,
 	def_random
 };
@@ -52,6 +54,7 @@ const char *conf_get_configname(void);
 void sym_set_change_count(int count);
 void sym_add_change_count(int count);
 bool conf_set_all_new_symbols(enum conf_def_mode mode);
+void conf_rewrite_mod_or_yes(enum conf_def_mode mode);
 void set_all_choice_values(struct symbol *csym);
 
 /* confdata.c and expr.c */

commit adf7c5bd0674b04588246e444efef9987b2f1a6b
Author: Masahiro Yamada <masahiroy@kernel.org>
Date:   Tue Dec 17 13:14:23 2019 +0900

    kconfig: squash prop_alloc() into menu_add_prop()
    
    prop_alloc() is only called from menu_add_prop(). Squash it.
    
    Signed-off-by: Masahiro Yamada <masahiroy@kernel.org>

diff --git a/scripts/kconfig/lkc.h b/scripts/kconfig/lkc.h
index 4fb16f316626..73d3f01f1736 100644
--- a/scripts/kconfig/lkc.h
+++ b/scripts/kconfig/lkc.h
@@ -112,7 +112,6 @@ struct symbol *sym_choice_default(struct symbol *sym);
 struct property *sym_get_range_prop(struct symbol *sym);
 const char *sym_get_string_default(struct symbol *sym);
 struct symbol *sym_check_deps(struct symbol *sym);
-struct property *prop_alloc(enum prop_type type, struct symbol *sym);
 struct symbol *prop_get_symbol(struct property *prop);
 
 static inline tristate sym_get_tristate_value(struct symbol *sym)

commit b6f7e9f7050b9f8e5fe60d86e05c0740295a54bf
Author: Masahiro Yamada <yamada.masahiro@socionext.com>
Date:   Mon May 27 23:37:22 2019 +0900

    kconfig: require the argument of --defconfig
    
    Currently, the argument for --defconfig is optional. If the argument
    is not passed, the hard-coded default arch/$(ARCH)/defconfig is used.
    
    It no longer happens in Linux since the last users of the default are
    gone by the following commits:
    
    - Commit f3e20ad67b4c ("s390: move arch/s390/defconfig to
      arch/s390/configs/defconfig")
    
    - Commit 986a13769c4b ("alpha: move arch/alpha/defconfig to
      arch/alpha/configs/defconfig")
    
    I want to kill the Linux-specific directory path embedded in the
    Kconfig binary.
    
    The --savedefconfig (reverse operation of --defconfig) requires an
    argument, so it should not hurt to do likewise for --defconfig.
    
    Signed-off-by: Masahiro Yamada <yamada.masahiro@socionext.com>

diff --git a/scripts/kconfig/lkc.h b/scripts/kconfig/lkc.h
index cbc7658ee27d..4fb16f316626 100644
--- a/scripts/kconfig/lkc.h
+++ b/scripts/kconfig/lkc.h
@@ -49,7 +49,6 @@ const char *zconf_curname(void);
 
 /* confdata.c */
 const char *conf_get_configname(void);
-char *conf_get_default_confname(void);
 void sym_set_change_count(int count);
 void sym_add_change_count(int count);
 bool conf_set_all_new_symbols(enum conf_def_mode mode);

commit 9b9f5948afcdf583cb1b58e0c4cc327aa1820f5a
Author: Masahiro Yamada <yamada.masahiro@socionext.com>
Date:   Mon May 13 01:00:53 2019 +0900

    kconfig: make conf_get_autoconfig_name() static
    
    This is only used in confdata.c
    
    Signed-off-by: Masahiro Yamada <yamada.masahiro@socionext.com>

diff --git a/scripts/kconfig/lkc.h b/scripts/kconfig/lkc.h
index d871539e4b45..cbc7658ee27d 100644
--- a/scripts/kconfig/lkc.h
+++ b/scripts/kconfig/lkc.h
@@ -49,7 +49,6 @@ const char *zconf_curname(void);
 
 /* confdata.c */
 const char *conf_get_configname(void);
-const char *conf_get_autoconfig_name(void);
 char *conf_get_default_confname(void);
 void sym_set_change_count(int count);
 void sym_add_change_count(int count);

commit 981e545a698aee98ed9c11202fe9bc93242f3cec
Author: Masahiro Yamada <yamada.masahiro@socionext.com>
Date:   Thu Jan 24 19:47:29 2019 +0900

    kconfig: rename zconf.l to lexer.l
    
    Use a more logical name.
    
    Signed-off-by: Masahiro Yamada <yamada.masahiro@socionext.com>

diff --git a/scripts/kconfig/lkc.h b/scripts/kconfig/lkc.h
index 531ff7c57d92..d871539e4b45 100644
--- a/scripts/kconfig/lkc.h
+++ b/scripts/kconfig/lkc.h
@@ -90,7 +90,7 @@ void *xrealloc(void *p, size_t size);
 char *xstrdup(const char *s);
 char *xstrndup(const char *s, size_t n);
 
-/* zconf.l */
+/* lexer.l */
 int yylex(void);
 
 struct gstr {

commit cbafbf7f551c3a03fb9440932f1ca13056ca40a6
Author: Masahiro Yamada <yamada.masahiro@socionext.com>
Date:   Fri Dec 21 17:33:05 2018 +0900

    kconfig: split the lexer out of zconf.y
    
    Compile zconf.lex.c independently of the other files.
    
    Signed-off-by: Masahiro Yamada <yamada.masahiro@socionext.com>

diff --git a/scripts/kconfig/lkc.h b/scripts/kconfig/lkc.h
index 160a9312e11a..531ff7c57d92 100644
--- a/scripts/kconfig/lkc.h
+++ b/scripts/kconfig/lkc.h
@@ -90,6 +90,9 @@ void *xrealloc(void *p, size_t size);
 char *xstrdup(const char *s);
 char *xstrndup(const char *s, size_t n);
 
+/* zconf.l */
+int yylex(void);
+
 struct gstr {
 	size_t len;
 	char  *s;

commit 558e78e3ce844c61ceffe32775dbefacf167b023
Author: Masahiro Yamada <yamada.masahiro@socionext.com>
Date:   Fri Dec 21 17:33:04 2018 +0900

    kconfig: split some C files out of zconf.y
    
    I want to compile each C file independently instead of including all
    of them from zconf.y.
    
    Split out confdata.c, expr.c, symbol.c, and preprocess.c .
    These are low-hanging fruits.
    
    Signed-off-by: Masahiro Yamada <yamada.masahiro@socionext.com>

diff --git a/scripts/kconfig/lkc.h b/scripts/kconfig/lkc.h
index 4ff33cd099cd..160a9312e11a 100644
--- a/scripts/kconfig/lkc.h
+++ b/scripts/kconfig/lkc.h
@@ -108,6 +108,7 @@ const char *str_get(struct gstr *gs);
 /* symbol.c */
 void sym_clear_all_valid(void);
 struct symbol *sym_choice_default(struct symbol *sym);
+struct property *sym_get_range_prop(struct symbol *sym);
 const char *sym_get_string_default(struct symbol *sym);
 struct symbol *sym_check_deps(struct symbol *sym);
 struct property *prop_alloc(enum prop_type type, struct symbol *sym);

commit 0c874100108f03401cb3154801d2671bbad40ad4
Author: Masahiro Yamada <yamada.masahiro@socionext.com>
Date:   Tue Dec 18 21:13:35 2018 +0900

    kconfig: convert to SPDX License Identifier
    
    All files in lxdialog/ are licensed under GPL-2.0+, and the rest are
    under GPL-2.0. I added GPL-2.0 tags to test scripts in tests/.
    
    Documentation/process/license-rules.rst does not suggest anything
    about the flex/bison files. Because flex does not accept the C++
    comment style at the very top of a file, I used the C style for
    zconf.l, and so for zconf.y for consistency.
    
    Signed-off-by: Masahiro Yamada <yamada.masahiro@socionext.com>

diff --git a/scripts/kconfig/lkc.h b/scripts/kconfig/lkc.h
index ff6b3e414788..4ff33cd099cd 100644
--- a/scripts/kconfig/lkc.h
+++ b/scripts/kconfig/lkc.h
@@ -1,6 +1,6 @@
+/* SPDX-License-Identifier: GPL-2.0 */
 /*
  * Copyright (C) 2002 Roman Zippel <zippel@linux-m68k.org>
- * Released under the terms of the GNU GPL v2.0.
  */
 
 #ifndef LKC_H

commit 979f2b2f7936f4b71a3100baf2d16c8057f027eb
Author: Masahiro Yamada <yamada.masahiro@socionext.com>
Date:   Tue Dec 11 20:01:10 2018 +0900

    kconfig: remove keyword lookup table entirely
    
    Commit 7a88488bbc23 ("[PATCH] kconfig: use gperf for kconfig keywords")
    introduced gperf for the keyword lookup.
    
    Then, commit bb3290d91695 ("Remove gperf usage from toolchain") killed
    the gperf use. As a result, the linear keyword search was left behind.
    
    If we do not use gperf, there is no reason to have the separate table
    of the keywords. Move all keywords back to the lexer.
    
    I also refactored the lexer to remove the COMMAND and PARAM states.
    
    Signed-off-by: Masahiro Yamada <yamada.masahiro@socionext.com>

diff --git a/scripts/kconfig/lkc.h b/scripts/kconfig/lkc.h
index 5f4880a12246..ff6b3e414788 100644
--- a/scripts/kconfig/lkc.h
+++ b/scripts/kconfig/lkc.h
@@ -30,9 +30,6 @@ static inline const char *CONFIG_prefix(void)
 #undef CONFIG_
 #define CONFIG_ CONFIG_prefix()
 
-#define TF_COMMAND	0x0001
-#define TF_PARAM	0x0002
-
 enum conf_def_mode {
 	def_default,
 	def_yes,
@@ -41,12 +38,6 @@ enum conf_def_mode {
 	def_random
 };
 
-struct kconf_id {
-	const char *name;
-	int token;
-	unsigned int flags;
-};
-
 extern int yylineno;
 void zconfdump(FILE *out);
 void zconf_starthelp(void);

commit ce2164ab58316e27180034112f97608a764f5b37
Author: Masahiro Yamada <yamada.masahiro@socionext.com>
Date:   Tue Dec 11 20:01:00 2018 +0900

    kconfig: refactor scanning and parsing "option" properties
    
    For the keywords "modules", "defconfig_list", and "allnoconfig_y",
    the lexer should pass specific tokens instead of generic T_WORD.
    
    This simplifies both the lexer and the parser.
    
    Signed-off-by: Masahiro Yamada <yamada.masahiro@socionext.com>

diff --git a/scripts/kconfig/lkc.h b/scripts/kconfig/lkc.h
index b6bbcd1dda2b..5f4880a12246 100644
--- a/scripts/kconfig/lkc.h
+++ b/scripts/kconfig/lkc.h
@@ -32,7 +32,6 @@ static inline const char *CONFIG_prefix(void)
 
 #define TF_COMMAND	0x0001
 #define TF_PARAM	0x0002
-#define TF_OPTION	0x0004
 
 enum conf_def_mode {
 	def_default,
@@ -42,10 +41,6 @@ enum conf_def_mode {
 	def_random
 };
 
-#define T_OPT_MODULES		1
-#define T_OPT_DEFCONFIG_LIST	2
-#define T_OPT_ALLNOCONFIG_Y	4
-
 struct kconf_id {
 	const char *name;
 	int token;
@@ -90,7 +85,9 @@ void menu_add_visibility(struct expr *dep);
 struct property *menu_add_prompt(enum prop_type type, char *prompt, struct expr *dep);
 void menu_add_expr(enum prop_type type, struct expr *expr, struct expr *dep);
 void menu_add_symbol(enum prop_type type, struct symbol *sym, struct expr *dep);
-void menu_add_option(int token, char *arg);
+void menu_add_option_modules(void);
+void menu_add_option_defconfig_list(void);
+void menu_add_option_allnoconfig_y(void);
 void menu_finalize(struct menu *parent);
 void menu_set_type(int type);
 

commit 3c8f317d4cf15e7a67457cfdd1e63182a34bcb69
Author: Masahiro Yamada <yamada.masahiro@socionext.com>
Date:   Tue Dec 11 20:00:59 2018 +0900

    kconfig: use distinct tokens for type and default properties
    
    This commit removes kconf_id::stype to prepare for the entire
    removal of kconf_id.c
    
    To simplify the lexer, I want keywords straight-mapped to tokens.
    
    Signed-off-by: Masahiro Yamada <yamada.masahiro@socionext.com>

diff --git a/scripts/kconfig/lkc.h b/scripts/kconfig/lkc.h
index 9eb7c837cd8f..b6bbcd1dda2b 100644
--- a/scripts/kconfig/lkc.h
+++ b/scripts/kconfig/lkc.h
@@ -50,7 +50,6 @@ struct kconf_id {
 	const char *name;
 	int token;
 	unsigned int flags;
-	enum symbol_type stype;
 };
 
 extern int yylineno;

commit c151272d1687ce2a379a93bf848080f9a42f1cef
Author: Masahiro Yamada <yamada.masahiro@socionext.com>
Date:   Tue Aug 14 01:48:38 2018 +0900

    kconfig: remove unused sym_get_env_prop() function
    
    This function is unused since commit 104daea149c4 ("kconfig: reference
    environment variables directly and remove 'option env='").
    
    Signed-off-by: Masahiro Yamada <yamada.masahiro@socionext.com>
    Acked-by: Sam Ravnborg <sam@ravnborg.org>

diff --git a/scripts/kconfig/lkc.h b/scripts/kconfig/lkc.h
index 6b7bbc6238e3..9eb7c837cd8f 100644
--- a/scripts/kconfig/lkc.h
+++ b/scripts/kconfig/lkc.h
@@ -125,7 +125,6 @@ const char *sym_get_string_default(struct symbol *sym);
 struct symbol *sym_check_deps(struct symbol *sym);
 struct property *prop_alloc(enum prop_type type, struct symbol *sym);
 struct symbol *prop_get_symbol(struct property *prop);
-struct property *sym_get_env_prop(struct symbol *sym);
 
 static inline tristate sym_get_tristate_value(struct symbol *sym)
 {

commit a2ff4040151ace5be20e4de34220468b9e842e4d
Author: Masahiro Yamada <yamada.masahiro@socionext.com>
Date:   Fri Jul 20 16:46:26 2018 +0900

    kconfig: rename file_write_dep and move it to confdata.c
    
    file_write_dep() is called only from conf_write_autoconf().
    Move it from util.c to confdata.c to make it static.
    Also, rename it to conf_write_dep() since it should belong to
    the group of conf_write* functions.
    
    Signed-off-by: Masahiro Yamada <yamada.masahiro@socionext.com>

diff --git a/scripts/kconfig/lkc.h b/scripts/kconfig/lkc.h
index ed3ff88e60ba..6b7bbc6238e3 100644
--- a/scripts/kconfig/lkc.h
+++ b/scripts/kconfig/lkc.h
@@ -97,7 +97,6 @@ void menu_set_type(int type);
 
 /* util.c */
 struct file *file_lookup(const char *name);
-int file_write_dep(const char *name);
 void *xmalloc(size_t size);
 void *xcalloc(size_t nmemb, size_t size);
 void *xrealloc(void *p, size_t size);

commit 104daea149c45cc84842ce77a9bd6436d19f3dd8
Author: Masahiro Yamada <yamada.masahiro@socionext.com>
Date:   Mon May 28 18:21:40 2018 +0900

    kconfig: reference environment variables directly and remove 'option env='
    
    To get access to environment variables, Kconfig needs to define a
    symbol using "option env=" syntax.  It is tedious to add a symbol entry
    for each environment variable given that we need to define much more
    such as 'CC', 'AS', 'srctree' etc. to evaluate the compiler capability
    in Kconfig.
    
    Adding '$' for symbol references is grammatically inconsistent.
    Looking at the code, the symbols prefixed with 'S' are expanded by:
     - conf_expand_value()
       This is used to expand 'arch/$ARCH/defconfig' and 'defconfig_list'
     - sym_expand_string_value()
       This is used to expand strings in 'source' and 'mainmenu'
    
    All of them are fixed values independent of user configuration.  So,
    they can be changed into the direct expansion instead of symbols.
    
    This change makes the code much cleaner.  The bounce symbols 'SRCARCH',
    'ARCH', 'SUBARCH', 'KERNELVERSION' are gone.
    
    sym_init() hard-coding 'UNAME_RELEASE' is also gone.  'UNAME_RELEASE'
    should be replaced with an environment variable.
    
    ARCH_DEFCONFIG is a normal symbol, so it should be simply referenced
    without '$' prefix.
    
    The new syntax is addicted by Make.  The variable reference needs
    parentheses, like $(FOO), but you can omit them for single-letter
    variables, like $F.  Yet, in Makefiles, people tend to use the
    parenthetical form for consistency / clarification.
    
    At this moment, only the environment variable is supported, but I will
    extend the concept of 'variable' later on.
    
    The variables are expanded in the lexer so we can simplify the token
    handling on the parser side.
    
    For example, the following code works.
    
    [Example code]
    
      config MY_TOOLCHAIN_LIST
              string
              default "My tools: CC=$(CC), AS=$(AS), CPP=$(CPP)"
    
    [Result]
    
      $ make -s alldefconfig && tail -n 1 .config
      CONFIG_MY_TOOLCHAIN_LIST="My tools: CC=gcc, AS=as, CPP=gcc -E"
    
    Signed-off-by: Masahiro Yamada <yamada.masahiro@socionext.com>
    Reviewed-by: Kees Cook <keescook@chromium.org>

diff --git a/scripts/kconfig/lkc.h b/scripts/kconfig/lkc.h
index 2628bc6a2141..ed3ff88e60ba 100644
--- a/scripts/kconfig/lkc.h
+++ b/scripts/kconfig/lkc.h
@@ -44,7 +44,6 @@ enum conf_def_mode {
 
 #define T_OPT_MODULES		1
 #define T_OPT_DEFCONFIG_LIST	2
-#define T_OPT_ENV		3
 #define T_OPT_ALLNOCONFIG_Y	4
 
 struct kconf_id {
@@ -103,6 +102,7 @@ void *xmalloc(size_t size);
 void *xcalloc(size_t nmemb, size_t size);
 void *xrealloc(void *p, size_t size);
 char *xstrdup(const char *s);
+char *xstrndup(const char *s, size_t n);
 
 struct gstr {
 	size_t len;
@@ -120,9 +120,6 @@ void str_printf(struct gstr *gs, const char *fmt, ...);
 const char *str_get(struct gstr *gs);
 
 /* symbol.c */
-extern struct expr *sym_env_list;
-
-void sym_init(void);
 void sym_clear_all_valid(void);
 struct symbol *sym_choice_default(struct symbol *sym);
 const char *sym_get_string_default(struct symbol *sym);

commit 694c49a7c01cc87194be40cb26404b58b68c291c
Author: Sam Ravnborg <sam@ravnborg.org>
Date:   Tue May 22 21:36:12 2018 +0200

    kconfig: drop localization support
    
    The localization support is broken and appears unused.
    There is no google hits on the update-po-config target.
    And there is no recent (5 years) activity related to the localization.
    
    So lets just drop this as it is no longer used.
    
    Suggested-by: Ulf Magnusson <ulfalizer@gmail.com>
    Suggested-by: Masahiro Yamada <yamada.masahiro@socionext.com>
    Signed-off-by: Sam Ravnborg <sam@ravnborg.org>
    Signed-off-by: Masahiro Yamada <yamada.masahiro@socionext.com>

diff --git a/scripts/kconfig/lkc.h b/scripts/kconfig/lkc.h
index f4394af6e4b8..2628bc6a2141 100644
--- a/scripts/kconfig/lkc.h
+++ b/scripts/kconfig/lkc.h
@@ -8,15 +8,6 @@
 
 #include "expr.h"
 
-#ifndef KBUILD_NO_NLS
-# include <libintl.h>
-#else
-static inline const char *gettext(const char *txt) { return txt; }
-static inline void textdomain(const char *domainname) {}
-static inline void bindtextdomain(const char *name, const char *dir) {}
-static inline char *bind_textdomain_codeset(const char *dn, char *c) { return c; }
-#endif
-
 #ifdef __cplusplus
 extern "C" {
 #endif
@@ -29,11 +20,6 @@ extern "C" {
 #define PACKAGE "linux"
 #endif
 
-#define LOCALEDIR "/usr/share/locale"
-
-#define _(text) gettext(text)
-#define N_(text) (text)
-
 #ifndef CONFIG_
 #define CONFIG_ "CONFIG_"
 #endif

commit 18492685e479fd4d8e1dca836f57c11b6800f083
Author: Masahiro Yamada <yamada.masahiro@socionext.com>
Date:   Fri Mar 23 02:00:14 2018 +0900

    kconfig: use yylineno option instead of manual lineno increments
    
    Tracking the line number by hand is error-prone since you need to
    increment it in every \n matching pattern.
    
    If '%option yylineno' is set, flex defines 'yylineno' to contain the
    current line number and automatically updates it each time it reads a
    \n character.  This is much more convenient although the lexer does
    not initializes yylineno, so you need to set it to 1 each time you
    start reading a new file, and restore it you go back to the previous
    file.
    
    I tested this with DEBUG_PARSE, and confirmed the same dump message
    was produced.
    
    I removed the perf-report option.  Otherwise, I see the following
    message:
      %option yylineno entails a performance penalty ONLY on rules that
      can match newline characters
    
    Signed-off-by: Masahiro Yamada <yamada.masahiro@socionext.com>

diff --git a/scripts/kconfig/lkc.h b/scripts/kconfig/lkc.h
index 2d5ec2d0e952..f4394af6e4b8 100644
--- a/scripts/kconfig/lkc.h
+++ b/scripts/kconfig/lkc.h
@@ -68,6 +68,7 @@ struct kconf_id {
 	enum symbol_type stype;
 };
 
+extern int yylineno;
 void zconfdump(FILE *out);
 void zconf_starthelp(void);
 FILE *zconf_fopen(const char *name);

commit cd81fc82b93fa408c30e08f59e5ef8caaa91d1d2
Author: Masahiro Yamada <yamada.masahiro@socionext.com>
Date:   Sat Feb 17 03:38:31 2018 +0900

    kconfig: add xstrdup() helper
    
    We already have xmalloc(), xcalloc(), and xrealloc(().  Add xstrdup()
    as well to save tedious error handling.
    
    Signed-off-by: Masahiro Yamada <yamada.masahiro@socionext.com>

diff --git a/scripts/kconfig/lkc.h b/scripts/kconfig/lkc.h
index 4e23febbe4b2..2d5ec2d0e952 100644
--- a/scripts/kconfig/lkc.h
+++ b/scripts/kconfig/lkc.h
@@ -115,6 +115,7 @@ int file_write_dep(const char *name);
 void *xmalloc(size_t size);
 void *xcalloc(size_t nmemb, size_t size);
 void *xrealloc(void *p, size_t size);
+char *xstrdup(const char *s);
 
 struct gstr {
 	size_t len;

commit d717f24d8c68081caae2374cf5ea6c4e62c490fc
Author: Masahiro Yamada <yamada.masahiro@socionext.com>
Date:   Fri Feb 9 01:19:07 2018 +0900

    kconfig: add xrealloc() helper
    
    We already have xmalloc(), xcalloc().  Add xrealloc() as well
    to save tedious error handling.
    
    Signed-off-by: Masahiro Yamada <yamada.masahiro@socionext.com>

diff --git a/scripts/kconfig/lkc.h b/scripts/kconfig/lkc.h
index 16cb62b92650..4e23febbe4b2 100644
--- a/scripts/kconfig/lkc.h
+++ b/scripts/kconfig/lkc.h
@@ -114,6 +114,7 @@ struct file *file_lookup(const char *name);
 int file_write_dep(const char *name);
 void *xmalloc(size_t size);
 void *xcalloc(size_t nmemb, size_t size);
+void *xrealloc(void *p, size_t size);
 
 struct gstr {
 	size_t len;

commit df60f4b92d3d0b0b91267532ea2584e3b6b58b2f
Author: Ulf Magnusson <ulfalizer@gmail.com>
Date:   Mon Oct 9 00:14:48 2017 +0200

    kconfig: Remove menu_end_entry()
    
    menu_end_entry() is empty and completely unused as far as I can tell:
    
            $ git log -G menu_end_entry --oneline
            a02f057 [PATCH] kconfig: improve error handling in the parser
            1da177e Linux-2.6.12-rc2
    
    Last one is the initial Git commit, where menu_end_entry() is empty as
    well. I couldn't find anything that redefined it on Google either.
    
    It might be a debugging helper for setting a breakpoint after each
    config, menuconfig, and comment is parsed. IMO it hurts more than it
    helps in that case by making the parsing code look more complicated at a
    glance than it really is, and I suspect it doesn't get used much.
    
    Tested by running the Kconfiglib test suite, which indirectly verifies
    that the .config files generated by the C implementation for each
    defconfig file in the kernel stays the same.
    
    Signed-off-by: Ulf Magnusson <ulfalizer@gmail.com>
    Signed-off-by: Masahiro Yamada <yamada.masahiro@socionext.com>

diff --git a/scripts/kconfig/lkc.h b/scripts/kconfig/lkc.h
index cdcbe43e87b3..16cb62b92650 100644
--- a/scripts/kconfig/lkc.h
+++ b/scripts/kconfig/lkc.h
@@ -100,7 +100,6 @@ void menu_warn(struct menu *menu, const char *fmt, ...);
 struct menu *menu_add_menu(void);
 void menu_end_menu(void);
 void menu_add_entry(struct symbol *sym);
-void menu_end_entry(void);
 void menu_add_dep(struct expr *dep);
 void menu_add_visibility(struct expr *dep);
 struct property *menu_add_prompt(enum prop_type type, char *prompt, struct expr *dep);

commit bb3290d91695bb1ae78ab86f18fb4d7ad8e5ebcc
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Sat Aug 19 10:17:02 2017 -0700

    Remove gperf usage from toolchain
    
    It turns out that gperf-3.1 changed types in the generated code in ways
    that aren't even trivially detectable without having to generate a test-file.
    
    It's just not worth using tools and libraries from clowns that don't
    understand or care about compatibility.  So get rid of gperf.
    
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

diff --git a/scripts/kconfig/lkc.h b/scripts/kconfig/lkc.h
index 91ca126ea080..cdcbe43e87b3 100644
--- a/scripts/kconfig/lkc.h
+++ b/scripts/kconfig/lkc.h
@@ -62,7 +62,7 @@ enum conf_def_mode {
 #define T_OPT_ALLNOCONFIG_Y	4
 
 struct kconf_id {
-	int name;
+	const char *name;
 	int token;
 	unsigned int flags;
 	enum symbol_type stype;

commit ad8d40cda3ad22ad9e8863d55a5c88f85c0173f0
Author: Michal Marek <mmarek@suse.cz>
Date:   Tue Feb 24 16:37:13 2015 +0100

    kconfig: Remove unnecessary prototypes from headers
    
    Signed-off-by: Michal Marek <mmarek@suse.cz>

diff --git a/scripts/kconfig/lkc.h b/scripts/kconfig/lkc.h
index 9f845eab56cb..91ca126ea080 100644
--- a/scripts/kconfig/lkc.h
+++ b/scripts/kconfig/lkc.h
@@ -68,9 +68,6 @@ struct kconf_id {
 	enum symbol_type stype;
 };
 
-extern int zconfdebug;
-
-int zconfparse(void);
 void zconfdump(FILE *out);
 void zconf_starthelp(void);
 FILE *zconf_fopen(const char *name);
@@ -88,11 +85,6 @@ void sym_add_change_count(int count);
 bool conf_set_all_new_symbols(enum conf_def_mode mode);
 void set_all_choice_values(struct symbol *csym);
 
-struct conf_printer {
-	void (*print_symbol)(FILE *, struct symbol *, const char *, void *);
-	void (*print_comment)(FILE *, const char *, void *);
-};
-
 /* confdata.c and expr.c */
 static inline void xfwrite(const void *str, size_t len, size_t count, FILE *out)
 {
@@ -111,7 +103,6 @@ void menu_add_entry(struct symbol *sym);
 void menu_end_entry(void);
 void menu_add_dep(struct expr *dep);
 void menu_add_visibility(struct expr *dep);
-struct property *menu_add_prop(enum prop_type type, char *prompt, struct expr *expr, struct expr *dep);
 struct property *menu_add_prompt(enum prop_type type, char *prompt, struct expr *dep);
 void menu_add_expr(enum prop_type type, struct expr *expr, struct expr *dep);
 void menu_add_symbol(enum prop_type type, struct symbol *sym, struct expr *dep);
@@ -145,8 +136,6 @@ extern struct expr *sym_env_list;
 
 void sym_init(void);
 void sym_clear_all_valid(void);
-void sym_set_all_changed(void);
-void sym_set_changed(struct symbol *sym);
 struct symbol *sym_choice_default(struct symbol *sym);
 const char *sym_get_string_default(struct symbol *sym);
 struct symbol *sym_check_deps(struct symbol *sym);

commit 463157444e377bf9b279101b1f16a94c4648c03a
Author: Michal Marek <mmarek@suse.cz>
Date:   Tue Feb 24 16:32:09 2015 +0100

    kconfig: Remove dead code
    
    Signed-off-by: Michal Marek <mmarek@suse.cz>

diff --git a/scripts/kconfig/lkc.h b/scripts/kconfig/lkc.h
index e418a30bbc40..9f845eab56cb 100644
--- a/scripts/kconfig/lkc.h
+++ b/scripts/kconfig/lkc.h
@@ -135,7 +135,6 @@ struct gstr {
 	int max_width;
 };
 struct gstr str_new(void);
-struct gstr str_assign(const char *s);
 void str_free(struct gstr *gs);
 void str_append(struct gstr *gs, const char *s);
 void str_printf(struct gstr *gs, const char *fmt, ...);

commit 70529b1a1784503169416df19ce3d68746401340
Author: Michal Marek <mmarek@suse.cz>
Date:   Tue Jan 27 17:11:42 2015 +0100

    kconfig: Get rid of the P() macro in headers
    
    This was originally meant for dlopen()ing a potential kconfig shared
    library. The unused dlopen code has already been removed in commit
    5a6f8d2b (kconfig: nuke LKC_DIRECT_LINK cruft), so let's remove the
    rest. The lkc_proto.h change was made with the following sed script:
    
      sed -r 's/^P\(([^,]*), *([^,]*), *(.*)\);/\2 \1\3;/'
    
    Plus some manual adjustments.
    
    Signed-off-by: Michal Marek <mmarek@suse.cz>

diff --git a/scripts/kconfig/lkc.h b/scripts/kconfig/lkc.h
index d5daa7af8b49..e418a30bbc40 100644
--- a/scripts/kconfig/lkc.h
+++ b/scripts/kconfig/lkc.h
@@ -21,9 +21,7 @@ static inline char *bind_textdomain_codeset(const char *dn, char *c) { return c;
 extern "C" {
 #endif
 
-#define P(name,type,arg)	extern type name arg
 #include "lkc_proto.h"
-#undef P
 
 #define SRCTREE "srctree"
 

commit 5d2acfc7b974bbd3858b4dd3f2cdc6362dd8843a
Author: Josh Triplett <josh@joshtriplett.org>
Date:   Mon Apr 7 15:39:09 2014 -0700

    kconfig: make allnoconfig disable options behind EMBEDDED and EXPERT
    
    "make allnoconfig" exists to ease testing of minimal configurations.
    Documentation/SubmitChecklist includes a note to test with allnoconfig.
    This helps catch missing dependencies on common-but-not-required
    functionality, which might otherwise go unnoticed.
    
    However, allnoconfig still leaves many symbols enabled, because they're
    hidden behind CONFIG_EMBEDDED or CONFIG_EXPERT.  For instance, allnoconfig
    still has CONFIG_PRINTK and CONFIG_BLOCK enabled, so drivers don't
    typically get build-tested with those disabled.
    
    To address this, introduce a new Kconfig option "allnoconfig_y", used on
    symbols which only exist to hide other symbols.  Set it on CONFIG_EMBEDDED
    (which then selects CONFIG_EXPERT).  allnoconfig will then disable all the
    symbols hidden behind those.
    
    Signed-off-by: Josh Triplett <josh@joshtriplett.org>
    Tested-by: Paul E. McKenney <paulmck@linux.vnet.ibm.com>
    Cc: Michal Marek <mmarek@suse.cz>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

diff --git a/scripts/kconfig/lkc.h b/scripts/kconfig/lkc.h
index 09f4edfdc911..d5daa7af8b49 100644
--- a/scripts/kconfig/lkc.h
+++ b/scripts/kconfig/lkc.h
@@ -61,6 +61,7 @@ enum conf_def_mode {
 #define T_OPT_MODULES		1
 #define T_OPT_DEFCONFIG_LIST	2
 #define T_OPT_ENV		3
+#define T_OPT_ALLNOCONFIG_Y	4
 
 struct kconf_id {
 	int name;

commit 3b9a19e08960e5cdad5253998637653e592a3c29
Author: Yann E. MORIN <yann.morin.1998@free.fr>
Date:   Sun Apr 28 22:36:38 2013 +0200

    kconfig: loop as long as we changed some symbols in randconfig
    
    Because of choice-in-a-choice constructs, it can happen that not all
    symbols are assigned a value during randconfig, leading in rare cases
    to this situation:
    
        ---8<--- choice-in-choice.in
        choice
            bool "A/B/C"
        config A
            bool "A"
    
        config B
            bool "B"
        if B
        choice
            bool "E/F"
        config E
            bool "E"
        config F
            bool "F"
        endchoice
        endif # B
    
        config C
            bool "C"
        endchoice
        ---8<---
    
        $ ./scripts/kconfig/conf --randconfig choice-in-choice.in
        [--SNIP--]
        $ ./scripts/kconfig/conf --silentoldconfig choice-in-choice.in </dev/null
        [--SNIP--]
        A/B/C
          1. A (A)
        > 2. B (B)
          3. C (C)
        choice[1-3]: 2
          E/F
          > 1. E (E) (NEW)
            2. F (F) (NEW)
          choice[1-2]: aborted!
    
        Console input/output is redirected. Run 'make oldconfig' to update
        configuration.
    
    Fix this by looping in randconfig for as long as some symbol gets assigned
    a value.
    
    Note: this was spotted with the USB EHCI Debug Device Gadget (USB_G_DBGP),
    which uses this choice-in-a-choice construct, and exhibits this problem.
    The example above is just a stripped-down minimalist test-case.
    
    Signed-off-by: "Yann E. MORIN" <yann.morin.1998@free.fr>

diff --git a/scripts/kconfig/lkc.h b/scripts/kconfig/lkc.h
index 0c8d4191ca87..09f4edfdc911 100644
--- a/scripts/kconfig/lkc.h
+++ b/scripts/kconfig/lkc.h
@@ -86,7 +86,7 @@ const char *conf_get_autoconfig_name(void);
 char *conf_get_default_confname(void);
 void sym_set_change_count(int count);
 void sym_add_change_count(int count);
-void conf_set_all_new_symbols(enum conf_def_mode mode);
+bool conf_set_all_new_symbols(enum conf_def_mode mode);
 void set_all_choice_values(struct symbol *csym);
 
 struct conf_printer {

commit fbe98bb9ed3dae23e320c6b113e35f129538d14a
Author: Arve Hjønnevåg <arve@android.com>
Date:   Thu Jun 6 20:37:00 2013 -0700

    kconfig: Fix defconfig when one choice menu selects options that another choice menu depends on
    
    The defconfig and Kconfig combination below, which is based on 3.10-rc4
    Kconfigs, resulted in several options getting set to "m" instead of "y".
    
    defconfig.choice:
    ---8<---
    CONFIG_MODULES=y
    CONFIG_USB_ZERO=y
    ---8<---
    
    Kconfig.choice:
    ---8<---
    menuconfig MODULES
            bool "Enable loadable module support"
    
    config CONFIGFS_FS
            tristate "Userspace-driven configuration filesystem"
    
    config OCFS2_FS
            tristate "OCFS2 file system support"
            depends on CONFIGFS_FS
            select CRC32
    
    config USB_LIBCOMPOSITE
            tristate
            select CONFIGFS_FS
    
    choice
            tristate "USB Gadget Drivers"
            default USB_ETH
    
    config USB_ZERO
            tristate "Gadget Zero (DEVELOPMENT)"
            select USB_LIBCOMPOSITE
    
    config USB_ETH
            tristate "Ethernet Gadget (with CDC Ethernet support)"
            select USB_LIBCOMPOSITE
    
    endchoice
    
    config CRC32
            tristate "CRC32/CRC32c functions"
            default y
    
    choice
            prompt "CRC32 implementation"
            depends on CRC32
            default CRC32_SLICEBY8
    
    config CRC32_SLICEBY8
            bool "Slice by 8 bytes"
    
    endchoice
    ---8<---
    
    $ scripts/kconfig/conf --defconfig=defconfig.choice Kconfig.choice
    
    would result in:
    
    .config:
    ---8<---
    CONFIG_MODULES=y
    CONFIG_CONFIGFS_FS=m
    CONFIG_USB_LIBCOMPOSITE=m
    CONFIG_USB_ZERO=m
    CONFIG_CRC32=y
    CONFIG_CRC32_SLICEBY8=y
    ---8<---
    
    when the expected result would be:
    
    .config:
    ---8<---
    CONFIG_MODULES=y
    CONFIG_CONFIGFS_FS=y
    CONFIG_USB_LIBCOMPOSITE=y
    CONFIG_USB_ZERO=y
    CONFIG_CRC32=y
    CONFIG_CRC32_SLICEBY8=y
    ---8<---
    
    Signed-off-by: Arve Hjønnevåg <arve@android.com>
    [yann.morin.1998@free.fr: add the resulting .config to commit log,
                              remove unneeded USB_GADGET from the defconfig]
    Tested-by: "Yann E. MORIN" <yann.morin.1998@free.fr>
    Reviewed-by: "Yann E. MORIN" <yann.morin.1998@free.fr>
    Signed-off-by: Yann E. MORIN <yann.morin.1998@free.fr>

diff --git a/scripts/kconfig/lkc.h b/scripts/kconfig/lkc.h
index f8aee5fc6d5e..0c8d4191ca87 100644
--- a/scripts/kconfig/lkc.h
+++ b/scripts/kconfig/lkc.h
@@ -87,6 +87,7 @@ char *conf_get_default_confname(void);
 void sym_set_change_count(int count);
 void sym_add_change_count(int count);
 void conf_set_all_new_symbols(enum conf_def_mode mode);
+void set_all_choice_values(struct symbol *csym);
 
 struct conf_printer {
 	void (*print_symbol)(FILE *, struct symbol *, const char *, void *);

commit 177acf78468bf5c359bcb8823ee3bd48b04b8380
Author: Alan Cox <alan@linux.intel.com>
Date:   Tue Nov 6 14:32:08 2012 +0000

    kconfig: Fix malloc handling in conf tools
    
    (and get them out of the noise in the audit work)
    
    Signed-off-by: Alan Cox <alan@linux.intel.com>
    Signed-off-by: Michal Marek <mmarek@suse.cz>

diff --git a/scripts/kconfig/lkc.h b/scripts/kconfig/lkc.h
index 7577a7fbb405..f8aee5fc6d5e 100644
--- a/scripts/kconfig/lkc.h
+++ b/scripts/kconfig/lkc.h
@@ -122,6 +122,8 @@ void menu_set_type(int type);
 /* util.c */
 struct file *file_lookup(const char *name);
 int file_write_dep(const char *name);
+void *xmalloc(size_t size);
+void *xcalloc(size_t nmemb, size_t size);
 
 struct gstr {
 	size_t len;

commit 9a926d4354d84e424e738a6d401328340400331b
Author: Yann E. MORIN <yann.morin.1998@free.fr>
Date:   Sat Oct 20 01:06:25 2012 +0200

    kconfig: get CONFIG_ prefix from the environment
    
    Currently, the CONFIG_ prefix is hard-coded in the kconfig frontends
    executables. This means that two projects that use kconfig with
    different prefixes can not share the same kconfig frontends.
    
    Instead of hard-coding the prefix in the frontends, get it from the
    environment, and revert back to hard-coded value if not found.
    
    Signed-off-by: "Yann E. MORIN" <yann.morin.1998@free.fr>
    Signed-off-by: Michal Marek <mmarek@suse.cz>

diff --git a/scripts/kconfig/lkc.h b/scripts/kconfig/lkc.h
index 7aa9db0b2a77..7577a7fbb405 100644
--- a/scripts/kconfig/lkc.h
+++ b/scripts/kconfig/lkc.h
@@ -41,7 +41,7 @@ extern "C" {
 #endif
 static inline const char *CONFIG_prefix(void)
 {
-	return CONFIG_;
+	return getenv( "CONFIG_" ) ?: CONFIG_;
 }
 #undef CONFIG_
 #define CONFIG_ CONFIG_prefix()

commit b341f7882f04cc70b7437583f012a8d93fbfb00e
Author: Yann E. MORIN <yann.morin.1998@free.fr>
Date:   Sat Oct 20 01:06:24 2012 +0200

    kconfig: add a function to get the CONFIG_ prefix
    
    Currently, we get the CONFIG_ prefix via the CONFIG_ macro, which means
    the CONFIG_ prefix is hard-coded at compile time. This goes against
    having a run-time defined CONFIG_ prefix.
    
    Add a function that returns the CONFIG_ prefix to use (but keep the
    current hard-coded behavior, to be changed in a later patch).
    
    To avoid touching all the code that uses the CONFIG_ macro, we just
    undef it, and define it to be a call to the function.
    
    Signed-off-by: "Yann E. MORIN" <yann.morin.1998@free.fr>
    Signed-off-by: Michal Marek <mmarek@suse.cz>

diff --git a/scripts/kconfig/lkc.h b/scripts/kconfig/lkc.h
index c18f2bd9c095..7aa9db0b2a77 100644
--- a/scripts/kconfig/lkc.h
+++ b/scripts/kconfig/lkc.h
@@ -39,6 +39,12 @@ extern "C" {
 #ifndef CONFIG_
 #define CONFIG_ "CONFIG_"
 #endif
+static inline const char *CONFIG_prefix(void)
+{
+	return CONFIG_;
+}
+#undef CONFIG_
+#define CONFIG_ CONFIG_prefix()
 
 #define TF_COMMAND	0x0001
 #define TF_PARAM	0x0002

commit 37ae2d5998aa29d8bf52f124199a21341bc6d18d
Author: Arnaud Lacombe <lacombar@gmail.com>
Date:   Wed Nov 23 13:05:53 2011 -0500

    kbuild: Fix compiler warning with assertion when calling 'fwrite'
    
    Reinhard Tartler discovered a corner case of calling xfwrite() where the
    length of the string is zero.
    
    Arnaud Lacombe suggested to use assertion for the corner case, as
    fwrite(3) is currently used:
    
     1) in comment printers. Empty comment are not allowed.
     2) in a callback passed to expr_print(), where the string printed is
        either NULL OR non-empty.
     3) in the lexer, auto-generated, and unused.
    
    I feel using assertion is a good solution:
    
     1) It cleanly takes care of the above-mentioned corner case.
     2) It can be easily disabled by defining NDEBUG.
     3) It asserts xfwrite() is simply a wrapper for fwrite().
    
    Reported-by: Reinhard Tartler <Reinhard.Tartler@informatik.uni-erlangen.de>
    Signed-off-by: Arnaud Lacombe <lacombar@gmail.com>
    Signed-off-by: Jean Sacren <sakiwit@gmail.com>
    Signed-off-by: Michal Marek <mmarek@suse.cz>

diff --git a/scripts/kconfig/lkc.h b/scripts/kconfig/lkc.h
index b633bdb9f3d4..c18f2bd9c095 100644
--- a/scripts/kconfig/lkc.h
+++ b/scripts/kconfig/lkc.h
@@ -90,8 +90,10 @@ struct conf_printer {
 /* confdata.c and expr.c */
 static inline void xfwrite(const void *str, size_t len, size_t count, FILE *out)
 {
-	if (fwrite(str, len, count, out) < count)
-		fprintf(stderr, "\nError in writing or end of file.\n");
+	assert(len != 0);
+
+	if (fwrite(str, len, count, out) != count)
+		fprintf(stderr, "Error in writing or end of file.\n");
 }
 
 /* menu.c */

commit 1d3fe4a75b691285cded47c9f1a91b30d25287b0
Merge: 664a41b8a91b 2a11c8ea20bf
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Sat Jul 30 00:17:06 2011 -0700

    Merge branch 'kconfig' of git://git.kernel.org/pub/scm/linux/kernel/git/mmarek/kbuild-2.6
    
    * 'kconfig' of git://git.kernel.org/pub/scm/linux/kernel/git/mmarek/kbuild-2.6: (25 commits)
      kconfig: Introduce IS_ENABLED(), IS_BUILTIN() and IS_MODULE()
      xconfig: Abort close if configuration cannot be saved
      kconfig: fix missing "0x" prefix from S_HEX symbol in autoconf.h
      kconfig/nconf: remove useless conditionnal
      kconfig/nconf: prevent segfault on empty menu
      kconfig/nconf: use the generic menu_get_ext_help()
      nconfig: Avoid Wunused-but-set warning
      kconfig/conf: mark xfgets() private
      kconfig: remove pending prototypes for kconfig_load()
      kconfig/conf: add command line options' description
      kconfig/conf: reduce the scope of `defconfig_file'
      kconfig: use calloc() for expr allocation
      kconfig: introduce specialized printer
      kconfig: do not overwrite symbol direct dependency in assignment
      kconfig/gconf: silent missing prototype warnings
      kconfig/gconf: kill deadcode
      kconfig: nuke LKC_DIRECT_LINK cruft
      kconfig: nuke reference to SWIG
      kconfig: add missing <stdlib.h> inclusion
      kconfig: add missing <ctype.h> inclusion
      ...
    
    Fix up conflicts in scripts/kconfig/Makefile

commit 5c74cd4cc7e7ad9117789e0ca22892a42f87d890
Merge: e54e692ba613 ab63f58f253c
Author: Michal Marek <mmarek@suse.cz>
Date:   Mon Jul 4 11:24:10 2011 +0200

    Merge branch 'kconfig-trivial' of git://github.com/lacombar/linux-2.6 into kbuild/kconfig

commit ab63f58f253c3eca620347f5180ca3d6a1b6aa38
Author: Arnaud Lacombe <lacombar@gmail.com>
Date:   Sat Jul 2 00:59:41 2011 -0400

    kconfig/conf: mark xfgets() private
    
    This function has not much reason to be public. In the mean time, convert
    declaration from K&R C to ISO C.
    
    Signed-off-by: Arnaud Lacombe <lacombar@gmail.com>

diff --git a/scripts/kconfig/lkc.h b/scripts/kconfig/lkc.h
index 60ffe8cc83f1..eed22491f13f 100644
--- a/scripts/kconfig/lkc.h
+++ b/scripts/kconfig/lkc.h
@@ -76,9 +76,6 @@ void zconf_nextfile(const char *name);
 int zconf_lineno(void);
 const char *zconf_curname(void);
 
-/* conf.c */
-void xfgets(char *str, int size, FILE *in);
-
 /* confdata.c */
 const char *conf_get_configname(void);
 const char *conf_get_autoconfig_name(void);

commit 131c60a95e15e7d32b6f10881368e1ffe7296695
Author: Arnaud Lacombe <lacombar@gmail.com>
Date:   Sat Jul 2 00:25:49 2011 -0400

    kconfig: remove pending prototypes for kconfig_load()
    
    Commit 5a6f8d2bd9e3392569ed6f29ea4d7210652f929b removed `kconfig_load()',
    however, it missed an hidden prototypes in `lkc.h'. Fix this.
    
    Signed-off-by: Arnaud Lacombe <lacombar@gmail.com>

diff --git a/scripts/kconfig/lkc.h b/scripts/kconfig/lkc.h
index 625ec69ebeee..60ffe8cc83f1 100644
--- a/scripts/kconfig/lkc.h
+++ b/scripts/kconfig/lkc.h
@@ -94,9 +94,6 @@ static inline void xfwrite(const void *str, size_t len, size_t count, FILE *out)
 		fprintf(stderr, "\nError in writing or end of file.\n");
 }
 
-/* kconfig_load.c */
-void kconfig_load(void);
-
 /* menu.c */
 void _menu_init(void);
 void menu_warn(struct menu *menu, const char *fmt, ...);

commit e54e692ba613c2170c66ce36a3791c009680af08
Author: Arnaud Lacombe <lacombar@gmail.com>
Date:   Sun May 15 23:42:09 2011 -0400

    kconfig: introduce specialized printer
    
    Make conf_write_symbol() grammar agnostic to be able to use it from different
    code path. These path pass a printer callback which will print a symbol's name
    and its value in different format.
    
    conf_write_symbol()'s job become mostly only to prepare a string for the
    printer. This avoid to have to pass specialized flag to generic
    functions
    
    Signed-off-by: Arnaud Lacombe <lacombar@gmail.com>
    [mmarek: rebased on top of de12518 (kconfig: autogenerated config_is_xxx
    macro)]
    Signed-off-by: Michal Marek <mmarek@suse.cz>

diff --git a/scripts/kconfig/lkc.h b/scripts/kconfig/lkc.h
index 625ec69ebeee..306c5a59efc2 100644
--- a/scripts/kconfig/lkc.h
+++ b/scripts/kconfig/lkc.h
@@ -87,6 +87,11 @@ void sym_set_change_count(int count);
 void sym_add_change_count(int count);
 void conf_set_all_new_symbols(enum conf_def_mode mode);
 
+struct conf_printer {
+	void (*print_symbol)(FILE *, struct symbol *, const char *, void *);
+	void (*print_comment)(FILE *, const char *, void *);
+};
+
 /* confdata.c and expr.c */
 static inline void xfwrite(const void *str, size_t len, size_t count, FILE *out)
 {

commit b96a0d0c78c878db6e6b5c02587ba69973e22d41
Author: Arnaud Lacombe <lacombar@gmail.com>
Date:   Mon May 23 02:08:18 2011 -0400

    kconfig: kill no longer needed reference to YYDEBUG
    
    Signed-off-by: Arnaud Lacombe <lacombar@gmail.com>

diff --git a/scripts/kconfig/lkc.h b/scripts/kconfig/lkc.h
index febf0c94d558..f34a0a9b50f1 100644
--- a/scripts/kconfig/lkc.h
+++ b/scripts/kconfig/lkc.h
@@ -68,9 +68,7 @@ struct kconf_id {
 	enum symbol_type stype;
 };
 
-#ifdef YYDEBUG
 extern int zconfdebug;
-#endif
 
 int zconfparse(void);
 void zconfdump(FILE *out);

commit 5a6f8d2bd9e3392569ed6f29ea4d7210652f929b
Author: Arnaud Lacombe <lacombar@gmail.com>
Date:   Wed Jun 1 16:14:47 2011 -0400

    kconfig: nuke LKC_DIRECT_LINK cruft
    
    This interface is not (and has never been ?) used by any frontend, just get rid
    of it.
    
    Signed-off-by: Arnaud Lacombe <lacombar@gmail.com>

diff --git a/scripts/kconfig/lkc.h b/scripts/kconfig/lkc.h
index febf0c94d558..625ec69ebeee 100644
--- a/scripts/kconfig/lkc.h
+++ b/scripts/kconfig/lkc.h
@@ -21,12 +21,7 @@ static inline char *bind_textdomain_codeset(const char *dn, char *c) { return c;
 extern "C" {
 #endif
 
-#ifdef LKC_DIRECT_LINK
 #define P(name,type,arg)	extern type name arg
-#else
-#include "lkc_defs.h"
-#define P(name,type,arg)	extern type (*name ## _p) arg
-#endif
 #include "lkc_proto.h"
 #undef P
 

commit f28b1c8aaa97a68028bb894bffb1690185c62b01
Merge: 0c05384a5a1a 39177ec36236
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Mon Jan 10 08:28:17 2011 -0800

    Merge branch 'kconfig' of git://git.kernel.org/pub/scm/linux/kernel/git/mmarek/kbuild-2.6
    
    * 'kconfig' of git://git.kernel.org/pub/scm/linux/kernel/git/mmarek/kbuild-2.6:
      nconf: handle comment entries within choice/endchoice
      kconfig: fix warning
      kconfig: Make expr_copy() take a const argument
      kconfig: simplify select-with-unmet-direct-dependency warning
      kconfig: add more S_INT and S_HEX consistency checks
      kconfig: fix `zconfdebug' extern declaration
      kconfig/conf: merge duplicate switch's case
      kconfig: fix typos
      kbuild/gconf: add dummy inline for bind_textdomain_codeset()
      kbuild/nconf: fix spaces damage
      kconfig: nuke second argument of conf_write_symbol()
      kconfig: do not define AUTOCONF_INCLUDED
      kconfig: the day kconfig warns about "select"-abuse has come

commit 4ce2c1e8e899831dd152bd0d534a60da6fb1582a
Author: Arnaud Lacombe <lacombar@gmail.com>
Date:   Sun Dec 5 01:41:18 2010 -0500

    kconfig: fix `zconfdebug' extern declaration
    
    This symbol is only exist if YYDEBUG is defined.
    
    Signed-off-by: Arnaud Lacombe <lacombar@gmail.com>
    Signed-off-by: Michal Marek <mmarek@suse.cz>

diff --git a/scripts/kconfig/lkc.h b/scripts/kconfig/lkc.h
index a542c6ba84b3..6d38b7c9c824 100644
--- a/scripts/kconfig/lkc.h
+++ b/scripts/kconfig/lkc.h
@@ -68,10 +68,12 @@ struct kconf_id {
 	enum symbol_type stype;
 };
 
+#ifdef YYDEBUG
+extern int zconfdebug;
+#endif
+
 int zconfparse(void);
 void zconfdump(FILE *out);
-
-extern int zconfdebug;
 void zconf_starthelp(void);
 FILE *zconf_fopen(const char *name);
 void zconf_initscan(const char *name);

commit 1ebfa5198ee96f34f2ee4ae95c92318f07341fbd
Author: Arnaud Lacombe <lacombar@gmail.com>
Date:   Sun Dec 5 01:41:15 2010 -0500

    kbuild/gconf: add dummy inline for bind_textdomain_codeset()
    
    This symbols is used by gconf.
    
    Signed-off-by: Arnaud Lacombe <lacombar@gmail.com>
    Signed-off-by: Michal Marek <mmarek@suse.cz>

diff --git a/scripts/kconfig/lkc.h b/scripts/kconfig/lkc.h
index 753cdbd7b805..a542c6ba84b3 100644
--- a/scripts/kconfig/lkc.h
+++ b/scripts/kconfig/lkc.h
@@ -14,6 +14,7 @@
 static inline const char *gettext(const char *txt) { return txt; }
 static inline void textdomain(const char *domainname) {}
 static inline void bindtextdomain(const char *name, const char *dir) {}
+static inline char *bind_textdomain_codeset(const char *dn, char *c) { return c; }
 #endif
 
 #ifdef __cplusplus

commit 86e187ff9bce9fbed7bfed92ae34f491cf1af50f
Author: Arnaud Lacombe <lacombar@gmail.com>
Date:   Sat Nov 6 18:30:23 2010 -0300

    kconfig: add an option to determine a menu's visibility
    
    This option is aimed to add the possibility to control a menu's visibility
    without adding dependency to the expression to all the submenu.
    
    Signed-off-by: Arnaud Lacombe <lacombar@gmail.com>
    Acked-by: Mauro Carvalho Chehab <mchehab@redhat.com>
    Tested-by: Mauro Carvalho Chehab <mchehab@redhat.com>
    Signed-off-by: Mauro Carvalho Chehab <mchehab@redhat.com>

diff --git a/scripts/kconfig/lkc.h b/scripts/kconfig/lkc.h
index 753cdbd7b805..3f7240df0f3b 100644
--- a/scripts/kconfig/lkc.h
+++ b/scripts/kconfig/lkc.h
@@ -107,6 +107,7 @@ void menu_end_menu(void);
 void menu_add_entry(struct symbol *sym);
 void menu_end_entry(void);
 void menu_add_dep(struct expr *dep);
+void menu_add_visibility(struct expr *dep);
 struct property *menu_add_prop(enum prop_type type, char *prompt, struct expr *expr, struct expr *dep);
 struct property *menu_add_prompt(enum prop_type type, char *prompt, struct expr *dep);
 void menu_add_expr(enum prop_type type, struct expr *expr, struct expr *dep);

commit 2e7a091833f014cac8a6b92573ca6cd2edd2753c
Author: Arnaud Lacombe <lacombar@gmail.com>
Date:   Sat Sep 4 16:03:30 2010 -0400

    kconfig: constify file name
    
    Signed-off-by: Arnaud Lacombe <lacombar@gmail.com>
    Reviewed-by: Sam Ravnborg <sam@ravnborg.org>
    Reviewed-by: Michal Marek <mmarek@suse.cz>

diff --git a/scripts/kconfig/lkc.h b/scripts/kconfig/lkc.h
index 5d5f1872d651..753cdbd7b805 100644
--- a/scripts/kconfig/lkc.h
+++ b/scripts/kconfig/lkc.h
@@ -76,7 +76,7 @@ FILE *zconf_fopen(const char *name);
 void zconf_initscan(const char *name);
 void zconf_nextfile(const char *name);
 int zconf_lineno(void);
-char *zconf_curname(void);
+const char *zconf_curname(void);
 
 /* conf.c */
 void xfgets(char *str, int size, FILE *in);

commit ef211607ed49c475735898514c60a9797208b699
Author: Arnaud Lacombe <lacombar@gmail.com>
Date:   Sat Aug 21 01:20:52 2010 -0400

    kconfig: allow PACKAGE to be defined on the compiler's command-line
    
    Signed-off-by: Arnaud Lacombe <lacombar@gmail.com>
    Reviewed-by: Sam Ravnborg <sam@ravnborg.org>
    Reviewed-by: Michal Marek <mmarek@suse.cz>

diff --git a/scripts/kconfig/lkc.h b/scripts/kconfig/lkc.h
index 1b966bf02b12..5d5f1872d651 100644
--- a/scripts/kconfig/lkc.h
+++ b/scripts/kconfig/lkc.h
@@ -31,7 +31,10 @@ extern "C" {
 
 #define SRCTREE "srctree"
 
+#ifndef PACKAGE
 #define PACKAGE "linux"
+#endif
+
 #define LOCALEDIR "/usr/share/locale"
 
 #define _(text) gettext(text)

commit ffb5957bc48f64f0773fd3fbc43cb9bb9b38e270
Author: Arnaud Lacombe <lacombar@gmail.com>
Date:   Sat Aug 14 23:57:43 2010 -0400

    kconfig: allow build-time definition of the internal config prefix
    
    Signed-off-by: Arnaud Lacombe <lacombar@gmail.com>
    Reviewed-by: Sam Ravnborg <sam@ravnborg.org>
    Reviewed-by: Michal Marek <mmarek@suse.cz>

diff --git a/scripts/kconfig/lkc.h b/scripts/kconfig/lkc.h
index bdf71bd31412..1b966bf02b12 100644
--- a/scripts/kconfig/lkc.h
+++ b/scripts/kconfig/lkc.h
@@ -37,6 +37,9 @@ extern "C" {
 #define _(text) gettext(text)
 #define N_(text) (text)
 
+#ifndef CONFIG_
+#define CONFIG_ "CONFIG_"
+#endif
 
 #define TF_COMMAND	0x0001
 #define TF_PARAM	0x0002

commit 4418a2b904805814bbd14b555d6add6a175f49f3
Author: Jean Sacren <sakiwit@gmail.com>
Date:   Wed Aug 4 16:03:16 2010 -0600

    kconfig: Fix warning: ignoring return value of 'fgets'
    
    This fix facilitates fgets() either it returns on success or on error or
    when end of file occurs.
    
    Signed-off-by: Jean Sacren <sakiwit@gmail.com>
    Signed-off-by: Michal Marek <mmarek@suse.cz>

diff --git a/scripts/kconfig/lkc.h b/scripts/kconfig/lkc.h
index 2ac33f5d273c..bdf71bd31412 100644
--- a/scripts/kconfig/lkc.h
+++ b/scripts/kconfig/lkc.h
@@ -72,6 +72,9 @@ void zconf_nextfile(const char *name);
 int zconf_lineno(void);
 char *zconf_curname(void);
 
+/* conf.c */
+void xfgets(char *str, int size, FILE *in);
+
 /* confdata.c */
 const char *conf_get_configname(void);
 const char *conf_get_autoconfig_name(void);

commit bf5e327a300a9ac959a89440e7c67dc89f3bd804
Author: Jean Sacren <sakiwit@gmail.com>
Date:   Wed Aug 4 16:01:02 2010 -0600

    kconfig: Fix warning: ignoring return value of 'fwrite'
    
    This fix facilitates fwrite() in both confdata.c and expr.c, either it
    succeeds in writing, or an error occurs, or the end of file is reached.
    
    Signed-off-by: Jean Sacren <sakiwit@gmail.com>
    Signed-off-by: Michal Marek <mmarek@suse.cz>

diff --git a/scripts/kconfig/lkc.h b/scripts/kconfig/lkc.h
index 76db065ed72c..2ac33f5d273c 100644
--- a/scripts/kconfig/lkc.h
+++ b/scripts/kconfig/lkc.h
@@ -80,6 +80,13 @@ void sym_set_change_count(int count);
 void sym_add_change_count(int count);
 void conf_set_all_new_symbols(enum conf_def_mode mode);
 
+/* confdata.c and expr.c */
+static inline void xfwrite(const void *str, size_t len, size_t count, FILE *out)
+{
+	if (fwrite(str, len, count, out) < count)
+		fprintf(stderr, "\nError in writing or end of file.\n");
+}
+
 /* kconfig_load.c */
 void kconfig_load(void);
 

commit 7cf3d73b4360e91b14326632ab1aeda4cb26308d
Author: Sam Ravnborg <sam@ravnborg.org>
Date:   Sat Jul 31 23:35:34 2010 +0200

    kconfig: add savedefconfig
    
    savedefconfig will save a minimal config to a file
    named "defconfig".
    
    The config symbols are saved in the same order as
    they appear in the menu structure so it should
    be possible to map them to the relevant menus
    if desired.
    
    The implementation was tested against several minimal
    configs for arm which was created using brute-force.
    
    There was one regression related to default numbers
    which had their valid range further limited by another symbol.
    
    Sample:
    
    config FOO
            int "foo"
            default 4
    
    config BAR
            int "bar"
            range 0 FOO
    
    If FOO is set to 3 then BAR cannot take a value higher than 3.
    But the current implementation will set BAR equal to 4.
    
    This is seldomly used and the final configuration is OK,
    and the fix was non-trivial.
    So it was documented in the code and left as is.
    
    Signed-off-by: Sam Ravnborg <sam@ravnborg.org>
    Acked-by: Uwe Kleine-König <u.kleine-koenig@pengutronix.de>
    Signed-off-by: Michal Marek <mmarek@suse.cz>

diff --git a/scripts/kconfig/lkc.h b/scripts/kconfig/lkc.h
index 755b8190eb64..76db065ed72c 100644
--- a/scripts/kconfig/lkc.h
+++ b/scripts/kconfig/lkc.h
@@ -127,6 +127,7 @@ void sym_clear_all_valid(void);
 void sym_set_all_changed(void);
 void sym_set_changed(struct symbol *sym);
 struct symbol *sym_choice_default(struct symbol *sym);
+const char *sym_get_string_default(struct symbol *sym);
 struct symbol *sym_check_deps(struct symbol *sym);
 struct property *prop_alloc(enum prop_type type, struct symbol *sym);
 struct symbol *prop_get_symbol(struct property *prop);

commit c252147de68cf58ba601278481e473dab432cee4
Author: Sam Ravnborg <sam@ravnborg.org>
Date:   Sat Jul 31 23:35:32 2010 +0200

    kconfig: refactor code in symbol.c
    
    Move logic to determine default for a choice to
    a separate function.
    No functional changes.
    
    Signed-off-by: Sam Ravnborg <sam@ravnborg.org>
    Signed-off-by: Michal Marek <mmarek@suse.cz>

diff --git a/scripts/kconfig/lkc.h b/scripts/kconfig/lkc.h
index ce6549cdaccf..755b8190eb64 100644
--- a/scripts/kconfig/lkc.h
+++ b/scripts/kconfig/lkc.h
@@ -126,6 +126,7 @@ void sym_init(void);
 void sym_clear_all_valid(void);
 void sym_set_all_changed(void);
 void sym_set_changed(struct symbol *sym);
+struct symbol *sym_choice_default(struct symbol *sym);
 struct symbol *sym_check_deps(struct symbol *sym);
 struct property *prop_alloc(enum prop_type type, struct symbol *sym);
 struct symbol *prop_get_symbol(struct property *prop);

commit 692d97c380c6dce2c35a04c5dcbce4e831a42fa0
Author: nir.tzachar@gmail.com <nir.tzachar@gmail.com>
Date:   Wed Nov 25 12:28:43 2009 +0200

    kconfig: new configuration interface (nconfig)
    
    This patch was inspired by the kernel projects page, where an ncurses
    replacement for menuconfig was mentioned (by Sam Ravnborg).
    
    Building on menuconfig, this patch implements a more modern look
    interface using ncurses and ncurses' satellite libraries (menu, panel,
    form). The implementation does not depend on lxdialog, which is
    currently distributed with the kernel.
    
    Signed-off-by: Nir Tzachar <nir.tzachar@gmail.com>
    Signed-off-by: Michal Marek <mmarek@suse.cz>

diff --git a/scripts/kconfig/lkc.h b/scripts/kconfig/lkc.h
index e59dd0c5787a..ce6549cdaccf 100644
--- a/scripts/kconfig/lkc.h
+++ b/scripts/kconfig/lkc.h
@@ -84,7 +84,7 @@ void conf_set_all_new_symbols(enum conf_def_mode mode);
 void kconfig_load(void);
 
 /* menu.c */
-void menu_init(void);
+void _menu_init(void);
 void menu_warn(struct menu *menu, const char *fmt, ...);
 struct menu *menu_add_menu(void);
 void menu_end_menu(void);

commit da60fbbcb637b37b1d77a41886ae4e275422ca96
Author: Vadim Bendebury (вб) <vbendeb@google.com>
Date:   Sun Dec 20 00:29:49 2009 -0800

    menuconfig: wrap long help lines
    
    Help text for certain config options is very extensive (the text
    includes the names of all  other options the option in question depends
    on). Long lines are not wrapped, making it impossible to see the list
    without scrolling horizontally.
    
    This patch adds some logic which wraps help screen lines at word
    boundaries to prevent truncating.
    
    Tested by running
    
      ARCH=powerpc make menuconfig O=/tmp/build
    
    which shows that the long lines are now wrapped, and
    
     ARCH=powerpc make xconfig O=/tmp/build
    
    to demonstrate that it still compiles and operates as expected.
    
    Signed-off-by: Vadim Bendebury <vbendeb@google.com>
    Signed-off-by: Michal Marek <mmarek@suse.cz>

diff --git a/scripts/kconfig/lkc.h b/scripts/kconfig/lkc.h
index f379b0bf8c9e..e59dd0c5787a 100644
--- a/scripts/kconfig/lkc.h
+++ b/scripts/kconfig/lkc.h
@@ -106,6 +106,11 @@ int file_write_dep(const char *name);
 struct gstr {
 	size_t len;
 	char  *s;
+	/*
+	* when max_width is not zero long lines in string s (if any) get
+	* wrapped not to exceed the max_width value
+	*/
+	int max_width;
 };
 struct gstr str_new(void);
 struct gstr str_assign(const char *s);

commit 12122f62324e7c6837ee8b0fa8d257ce7ebcfc6f
Author: Markus Heidelberg <markus.heidelberg@web.de>
Date:   Mon May 18 01:36:54 2009 +0200

    kconfig: do not hardcode "include/config/auto.conf" filename
    
    Regardless of KCONFIG_AUTOCONFIG, the filename written as a Make target
    into "include/config/auto.conf.cmd" was always the default one.
    
    Of course this doesn't make it work for the Kernel kbuild system, since
    there the filename is hardcoded at several places in the Makefiles.
    
    Signed-off-by: Markus Heidelberg <markus.heidelberg@web.de>
    Signed-off-by: Sam Ravnborg <sam@ravnborg.org>

diff --git a/scripts/kconfig/lkc.h b/scripts/kconfig/lkc.h
index 4a9af6f7886b..f379b0bf8c9e 100644
--- a/scripts/kconfig/lkc.h
+++ b/scripts/kconfig/lkc.h
@@ -74,6 +74,7 @@ char *zconf_curname(void);
 
 /* confdata.c */
 const char *conf_get_configname(void);
+const char *conf_get_autoconfig_name(void);
 char *conf_get_default_confname(void);
 void sym_set_change_count(int count);
 void sym_add_change_count(int count);

commit dc7862e5a65b9b9e0aad448398b4f652c49c9350
Author: Roman Zippel <zippel@linux-m68k.org>
Date:   Tue May 6 04:55:55 2008 +0200

    kconfig: set all new symbols automatically
    
    Add conf_set_all_new_symbols() which set all symbols (which don't have a
    value yet) to a specifed value.
    
    Signed-off-by: Roman Zippel <zippel@linux-m68k.org>
    Signed-off-by: Sam Ravnborg <sam@ravnborg.org>

diff --git a/scripts/kconfig/lkc.h b/scripts/kconfig/lkc.h
index 96521cb087ec..4a9af6f7886b 100644
--- a/scripts/kconfig/lkc.h
+++ b/scripts/kconfig/lkc.h
@@ -42,6 +42,14 @@ extern "C" {
 #define TF_PARAM	0x0002
 #define TF_OPTION	0x0004
 
+enum conf_def_mode {
+	def_default,
+	def_yes,
+	def_mod,
+	def_no,
+	def_random
+};
+
 #define T_OPT_MODULES		1
 #define T_OPT_DEFCONFIG_LIST	2
 #define T_OPT_ENV		3
@@ -69,6 +77,7 @@ const char *conf_get_configname(void);
 char *conf_get_default_confname(void);
 void sym_set_change_count(int count);
 void sym_add_change_count(int count);
+void conf_set_all_new_symbols(enum conf_def_mode mode);
 
 /* kconfig_load.c */
 void kconfig_load(void);

commit c4143a83031aef7ba87a62cf654d6d8fb4d8e76e
Author: Sam Ravnborg <sam@ravnborg.org>
Date:   Sun May 4 21:03:20 2008 +0200

    kconfig: fix MAC OS X warnings in menuconfig
    
    Signed-off-by: Sam Ravnborg <sam@ravnborg.org>
    Acked-by: Timur Tabi <timur@freescale.com>

diff --git a/scripts/kconfig/lkc.h b/scripts/kconfig/lkc.h
index 4bc68f20a73c..96521cb087ec 100644
--- a/scripts/kconfig/lkc.h
+++ b/scripts/kconfig/lkc.h
@@ -11,9 +11,9 @@
 #ifndef KBUILD_NO_NLS
 # include <libintl.h>
 #else
-# define gettext(Msgid) ((const char *) (Msgid))
-# define textdomain(Domainname) ((const char *) (Domainname))
-# define bindtextdomain(Domainname, Dirname) ((const char *) (Dirname))
+static inline const char *gettext(const char *txt) { return txt; }
+static inline void textdomain(const char *domainname) {}
+static inline void bindtextdomain(const char *name, const char *dir) {}
 #endif
 
 #ifdef __cplusplus

commit 93449082e905ce73d0346d617dd67c4b668b58af
Author: Roman Zippel <zippel@linux-m68k.org>
Date:   Mon Jan 14 04:50:54 2008 +0100

    kconfig: environment symbol support
    
    Add the possibility to import a value from the environment into kconfig
    via the option syntax. Beside flexibility this has the advantage
    providing proper dependencies.
    Documented the options syntax.
    
    Signed-off-by: Roman Zippel <zippel@linux-m68k.org>
    Signed-off-by: Sam Ravnborg <sam@ravnborg.org>

diff --git a/scripts/kconfig/lkc.h b/scripts/kconfig/lkc.h
index 8a07ee4f6bd4..4bc68f20a73c 100644
--- a/scripts/kconfig/lkc.h
+++ b/scripts/kconfig/lkc.h
@@ -44,6 +44,7 @@ extern "C" {
 
 #define T_OPT_MODULES		1
 #define T_OPT_DEFCONFIG_LIST	2
+#define T_OPT_ENV		3
 
 struct kconf_id {
 	int name;
@@ -74,6 +75,7 @@ void kconfig_load(void);
 
 /* menu.c */
 void menu_init(void);
+void menu_warn(struct menu *menu, const char *fmt, ...);
 struct menu *menu_add_menu(void);
 void menu_end_menu(void);
 void menu_add_entry(struct symbol *sym);
@@ -103,6 +105,8 @@ void str_printf(struct gstr *gs, const char *fmt, ...);
 const char *str_get(struct gstr *gs);
 
 /* symbol.c */
+extern struct expr *sym_env_list;
+
 void sym_init(void);
 void sym_clear_all_valid(void);
 void sym_set_all_changed(void);
@@ -110,6 +114,7 @@ void sym_set_changed(struct symbol *sym);
 struct symbol *sym_check_deps(struct symbol *sym);
 struct property *prop_alloc(enum prop_type type, struct symbol *sym);
 struct symbol *prop_get_symbol(struct property *prop);
+struct property *sym_get_env_prop(struct symbol *sym);
 
 static inline tristate sym_get_tristate_value(struct symbol *sym)
 {

commit d802b50f0d63d2d18d8dae15d7e3285e99e7e7b6
Author: Sam Ravnborg <sam@neptun.ravnborg.org>
Date:   Sun Apr 1 22:29:38 2007 +0200

    kconfig/menuconfig: do not hardcode '.config'
    
    Export and use the function conf_get_configname()
    to retreive the default configuration filename.
    
    Suggested by: Roman Zippel <zippel@linux-m68k.org>
    
    Signed-off-by: Sam Ravnborg <sam@ravnborg.org>

diff --git a/scripts/kconfig/lkc.h b/scripts/kconfig/lkc.h
index 9b2706a41548..8a07ee4f6bd4 100644
--- a/scripts/kconfig/lkc.h
+++ b/scripts/kconfig/lkc.h
@@ -64,6 +64,7 @@ int zconf_lineno(void);
 char *zconf_curname(void);
 
 /* confdata.c */
+const char *conf_get_configname(void);
 char *conf_get_default_confname(void);
 void sym_set_change_count(int count);
 void sym_add_change_count(int count);

commit bfc10001b11e51b59ac901d17c5f05361bd2351d
Author: Karsten Wiese <annabellesgarden@yahoo.de>
Date:   Wed Dec 13 00:34:07 2006 -0800

    [PATCH] kconfig: make sym_change_count static, let it be altered by 2 functions only
    
    Those two functions are
            void sym_set_change_count(int count)
    and
            void sym_add_change_count(int count)
    
    All write accesses to sym_change_count are replaced by calls to above
    functions.
    
    Variable and changer-functions are moved to confdata.c.  IMO thats ok, as
    sym_change_count is an attribute of the .config's change state.
    
    Signed-off-by: Karsten Wiese <fzu@wemgehoertderstaat.de>
    Cc: Sam Ravnborg <sam@ravnborg.org>
    Cc: Roman Zippel <zippel@linux-m68k.org>
    Acked-by: Randy Dunlap <randy.dunlap@oracle.com>
    Signed-off-by: Andrew Morton <akpm@osdl.org>
    Signed-off-by: Linus Torvalds <torvalds@osdl.org>

diff --git a/scripts/kconfig/lkc.h b/scripts/kconfig/lkc.h
index 2628023a1fe1..9b2706a41548 100644
--- a/scripts/kconfig/lkc.h
+++ b/scripts/kconfig/lkc.h
@@ -65,6 +65,8 @@ char *zconf_curname(void);
 
 /* confdata.c */
 char *conf_get_default_confname(void);
+void sym_set_change_count(int count);
+void sym_add_change_count(int count);
 
 /* kconfig_load.c */
 void kconfig_load(void);

commit 14cdd3c402bf7c66f0bcd76e290f0770a54a4b21
Author: Roman Zippel <zippel@linux-m68k.org>
Date:   Thu Jun 8 22:12:51 2006 -0700

    kconfig: KCONFIG_OVERWRITECONFIG
    
    If you set KCONFIG_OVERWRITECONFIG in environment, Kconfig will not break
    symlinks when .config is a symlink to somewhere else.
    
    Signed-off-by: Andrew Morton <akpm@osdl.org>
    Signed-off-by: Sam Ravnborg <sam@ravnborg.org>

diff --git a/scripts/kconfig/lkc.h b/scripts/kconfig/lkc.h
index 2d3d4ed3c9f2..2628023a1fe1 100644
--- a/scripts/kconfig/lkc.h
+++ b/scripts/kconfig/lkc.h
@@ -64,8 +64,6 @@ int zconf_lineno(void);
 char *zconf_curname(void);
 
 /* confdata.c */
-extern const char conf_def_filename[];
-
 char *conf_get_default_confname(void);
 
 /* kconfig_load.c */

commit face4374e288372fba67c865eb0c92337f50d5a4
Author: Roman Zippel <zippel@linux-m68k.org>
Date:   Thu Jun 8 22:12:45 2006 -0700

    kconfig: add defconfig_list/module option
    
    This makes it possible to change two options which were hardcoded sofar.
    1. Any symbol can now take the role of CONFIG_MODULES
    2. The more useful option is to change the list of default file names,
       which kconfig uses to load the base configuration if .config isn't
       available.
    
    Signed-off-by: Roman Zippel <zippel@linux-m68k.org>
    Signed-off-by: Andrew Morton <akpm@osdl.org>
    Signed-off-by: Sam Ravnborg <sam@ravnborg.org>

diff --git a/scripts/kconfig/lkc.h b/scripts/kconfig/lkc.h
index 8e89d342889e..2d3d4ed3c9f2 100644
--- a/scripts/kconfig/lkc.h
+++ b/scripts/kconfig/lkc.h
@@ -104,6 +104,7 @@ const char *str_get(struct gstr *gs);
 /* symbol.c */
 void sym_init(void);
 void sym_clear_all_valid(void);
+void sym_set_all_changed(void);
 void sym_set_changed(struct symbol *sym);
 struct symbol *sym_check_deps(struct symbol *sym);
 struct property *prop_alloc(enum prop_type type, struct symbol *sym);

commit f6a88aa86027bdecfc74ef7c6bf6c68233e86bb3
Author: Roman Zippel <zippel@linux-m68k.org>
Date:   Thu Jun 8 22:12:44 2006 -0700

    kconfig: add symbol option config syntax
    
    This adds the general framework to the parser to define options for config
    symbols with a syntax like:
    
    config FOO
            option bar[="arg"]
    
    Signed-off-by: Roman Zippel <zippel@linux-m68k.org>
    Signed-off-by: Andrew Morton <akpm@osdl.org>
    Signed-off-by: Sam Ravnborg <sam@ravnborg.org>

diff --git a/scripts/kconfig/lkc.h b/scripts/kconfig/lkc.h
index 52c296e0440e..8e89d342889e 100644
--- a/scripts/kconfig/lkc.h
+++ b/scripts/kconfig/lkc.h
@@ -40,6 +40,10 @@ extern "C" {
 
 #define TF_COMMAND	0x0001
 #define TF_PARAM	0x0002
+#define TF_OPTION	0x0004
+
+#define T_OPT_MODULES		1
+#define T_OPT_DEFCONFIG_LIST	2
 
 struct kconf_id {
 	int name;
@@ -78,6 +82,7 @@ struct property *menu_add_prop(enum prop_type type, char *prompt, struct expr *e
 struct property *menu_add_prompt(enum prop_type type, char *prompt, struct expr *dep);
 void menu_add_expr(enum prop_type type, struct expr *expr, struct expr *dep);
 void menu_add_symbol(enum prop_type type, struct symbol *sym, struct expr *dep);
+void menu_add_option(int token, char *arg);
 void menu_finalize(struct menu *parent);
 void menu_set_type(int type);
 

commit 669bfad906522e74ee8d962801552a8c224c0d63
Author: Roman Zippel <zippel@linux-m68k.org>
Date:   Thu Jun 8 22:12:42 2006 -0700

    kconfig: allow loading multiple configurations
    
    Extend conf_read_simple() so it can load multiple configurations.
    
    Signed-off-by: Roman Zippel <zippel@linux-m68k.org>
    Signed-off-by: Andrew Morton <akpm@osdl.org>
    Signed-off-by: Sam Ravnborg <sam@ravnborg.org>

diff --git a/scripts/kconfig/lkc.h b/scripts/kconfig/lkc.h
index 527f60c99c50..52c296e0440e 100644
--- a/scripts/kconfig/lkc.h
+++ b/scripts/kconfig/lkc.h
@@ -137,7 +137,7 @@ static inline bool sym_is_optional(struct symbol *sym)
 
 static inline bool sym_has_value(struct symbol *sym)
 {
-	return sym->flags & SYMBOL_NEW ? false : true;
+	return sym->flags & SYMBOL_DEF_USER ? true : false;
 }
 
 #ifdef __cplusplus

commit c1a0f5e3c01d28b6782457bee5ae5ace3a9958ec
Author: Roman Zippel <zippel@linux-m68k.org>
Date:   Tue Nov 8 21:34:54 2005 -0800

    [PATCH] kconfig: stricter error checking for .config
    
    Add some more checks during the parsing of .config, so that after parsing
    sym_change_count reflects the correct state whether the .config is correct and
    in sync with the Kconfig or if it needs saving.
    
    Signed-off-by: Roman Zippel <zippel@linux-m68k.org>
    Cc: Sam Ravnborg <sam@ravnborg.org>
    Signed-off-by: Andrew Morton <akpm@osdl.org>
    Signed-off-by: Linus Torvalds <torvalds@osdl.org>

diff --git a/scripts/kconfig/lkc.h b/scripts/kconfig/lkc.h
index ca02eb42eeb3..527f60c99c50 100644
--- a/scripts/kconfig/lkc.h
+++ b/scripts/kconfig/lkc.h
@@ -61,7 +61,6 @@ char *zconf_curname(void);
 
 /* confdata.c */
 extern const char conf_def_filename[];
-extern char conf_filename[];
 
 char *conf_get_default_confname(void);
 

commit a02f0570ae201c495ee991b959bb974af18f35cc
Author: Roman Zippel <zippel@linux-m68k.org>
Date:   Tue Nov 8 21:34:53 2005 -0800

    [PATCH] kconfig: improve error handling in the parser
    
    Add a few error tokens to the parser to catch common errors and print more
    descriptive error messages.
    
    Signed-off-by: Roman Zippel <zippel@linux-m68k.org>
    Cc: Sam Ravnborg <sam@ravnborg.org>
    Signed-off-by: Andrew Morton <akpm@osdl.org>
    Signed-off-by: Linus Torvalds <torvalds@osdl.org>

diff --git a/scripts/kconfig/lkc.h b/scripts/kconfig/lkc.h
index 91491d0a3029..ca02eb42eeb3 100644
--- a/scripts/kconfig/lkc.h
+++ b/scripts/kconfig/lkc.h
@@ -70,7 +70,7 @@ void kconfig_load(void);
 
 /* menu.c */
 void menu_init(void);
-void menu_add_menu(void);
+struct menu *menu_add_menu(void);
 void menu_end_menu(void);
 void menu_add_entry(struct symbol *sym);
 void menu_end_entry(void);

commit 3370f9f0d9c7d14bf71aab27fa45c0537f130614
Author: Roman Zippel <zippel@linux-m68k.org>
Date:   Tue Nov 8 21:34:52 2005 -0800

    [PATCH] kconfig: simplify symbol type parsing
    
    This simplifies the parser a bit by merging the various symbol types into a
    single token and adds the type to the keyword hash.
    
    Signed-off-by: Roman Zippel <zippel@linux-m68k.org>
    Cc: Sam Ravnborg <sam@ravnborg.org>
    Signed-off-by: Andrew Morton <akpm@osdl.org>
    Signed-off-by: Linus Torvalds <torvalds@osdl.org>

diff --git a/scripts/kconfig/lkc.h b/scripts/kconfig/lkc.h
index 6881fb084324..91491d0a3029 100644
--- a/scripts/kconfig/lkc.h
+++ b/scripts/kconfig/lkc.h
@@ -45,6 +45,7 @@ struct kconf_id {
 	int name;
 	int token;
 	unsigned int flags;
+	enum symbol_type stype;
 };
 
 int zconfparse(void);

commit 7a88488bbc231e48a4a88ee2569bc0cc5d706f0a
Author: Roman Zippel <zippel@linux-m68k.org>
Date:   Tue Nov 8 21:34:51 2005 -0800

    [PATCH] kconfig: use gperf for kconfig keywords
    
    Use gperf to generate a hash for the kconfig keywords.  This greatly reduces
    the size of the generated scanner and makes it easier to extend kconfig.
    
    Signed-off-by: Roman Zippel <zippel@linux-m68k.org>
    Cc: Sam Ravnborg <sam@ravnborg.org>
    Signed-off-by: Andrew Morton <akpm@osdl.org>
    Signed-off-by: Linus Torvalds <torvalds@osdl.org>

diff --git a/scripts/kconfig/lkc.h b/scripts/kconfig/lkc.h
index 5fba1feff2a8..6881fb084324 100644
--- a/scripts/kconfig/lkc.h
+++ b/scripts/kconfig/lkc.h
@@ -37,6 +37,16 @@ extern "C" {
 #define _(text) gettext(text)
 #define N_(text) (text)
 
+
+#define TF_COMMAND	0x0001
+#define TF_PARAM	0x0002
+
+struct kconf_id {
+	int name;
+	int token;
+	unsigned int flags;
+};
+
 int zconfparse(void);
 void zconfdump(FILE *out);
 

commit 70a6a0cb92f24fd6bbe2e75299168909f735676a
Author: Yuri Vasilevski <yvasilev@duke.math.cinvestav.mx>
Date:   Sun Oct 30 15:03:20 2005 -0800

    [PATCH] fix build on nls free systems
    
    I made a patch that detects if libintl.h (needed for nls) is present on the
    host system and if it's not, it nls support is disabled by providing
    dummies for the used nls functions.
    
    This way if there is nls support on the host system the *config targets
    will build according to Arnaldo Carvalho de Melo's i18n modifications, else
    it just uses the original English messages.
    
    I have also made a bug report at kernel's bugzilla:
    http://bugzilla.kernel.org/show_bug.cgi?id=5501
    And there is a discussion about this problem in Gentoo's bugzilla:
    http://bugs.gentoo.org/show_bug.cgi?id=99810
    
    Cc: Sam Ravnborg <sam@ravnborg.org>
    Signed-off-by: Andrew Morton <akpm@osdl.org>
    Signed-off-by: Linus Torvalds <torvalds@osdl.org>

diff --git a/scripts/kconfig/lkc.h b/scripts/kconfig/lkc.h
index c3d25786a64d..5fba1feff2a8 100644
--- a/scripts/kconfig/lkc.h
+++ b/scripts/kconfig/lkc.h
@@ -8,7 +8,13 @@
 
 #include "expr.h"
 
-#include <libintl.h>
+#ifndef KBUILD_NO_NLS
+# include <libintl.h>
+#else
+# define gettext(Msgid) ((const char *) (Msgid))
+# define textdomain(Domainname) ((const char *) (Domainname))
+# define bindtextdomain(Domainname, Dirname) ((const char *) (Dirname))
+#endif
 
 #ifdef __cplusplus
 extern "C" {

commit fb7f6ff614f3ead2ca41bb4a348b9ea431d95176
Author: blaisorblade@yahoo.it <blaisorblade@yahoo.it>
Date:   Thu Jul 28 17:56:25 2005 +0200

    [PATCH] kconfig: trivial cleanup
    
    Replace all menu_add_prop mimicking menu_add_prompt with the latter func. I've
    had to add a return value to menu_add_prompt for one usage.
    
    I've rebuilt scripts/kconfig/zconf.tab.c_shipped by hand to reflect changes
    in the source (I've not the same Bison version so regenerating it wouldn't
    have been not a good idea), and compared it with what Roman itself did some
    time ago, and it's the same.
    
    So I guess this can be finally merged.
    
    Signed-off-by: Paolo 'Blaisorblade' Giarrusso <blaisorblade@yahoo.it>
    Signed-off-by: Sam Ravnborg <sam@ravnborg.org>

diff --git a/scripts/kconfig/lkc.h b/scripts/kconfig/lkc.h
index 8b84c42b49b5..c3d25786a64d 100644
--- a/scripts/kconfig/lkc.h
+++ b/scripts/kconfig/lkc.h
@@ -59,7 +59,7 @@ void menu_add_entry(struct symbol *sym);
 void menu_end_entry(void);
 void menu_add_dep(struct expr *dep);
 struct property *menu_add_prop(enum prop_type type, char *prompt, struct expr *expr, struct expr *dep);
-void menu_add_prompt(enum prop_type type, char *prompt, struct expr *dep);
+struct property *menu_add_prompt(enum prop_type type, char *prompt, struct expr *dep);
 void menu_add_expr(enum prop_type type, struct expr *expr, struct expr *dep);
 void menu_add_symbol(enum prop_type type, struct symbol *sym, struct expr *dep);
 void menu_finalize(struct menu *parent);

commit 3b9fa0931dd86a1fe5507311ee8031650f5d0e8c
Author: Arnaldo Carvalho de Melo <acme@ghostprotocols.net>
Date:   Thu May 5 15:09:46 2005 -0700

    [PATCH] Kconfig i18n support
    
    This patch adds i18n support for make *config, allowing users to have the
    config process in their own language.
    
    No printk was harmed in the process, don't worry, so all the bug reports,
    kernel messages, etc, remain in english, just the user tools to configure
    the kernel are internationalized.
    
    Users not interested in translations can just unset the related LANG,
    LC_ALL, etc env variables and have the config process in plain english,
    something like:
    
    LANG= make menuconfig
    
    is enough for having the whole config process in english. Or just don't
    install any translation file.
    
    Translations for brazilian portuguese are being done by a team of
    volunteers at:
    
    http://www.visionflex.inf.br/kernel_ptbr/pmwiki.php/Principal/Traducoes
    
    To start the translation process:
    
      make update-po-config
    
      This will generate the pot template named scripts/kconfig/linux.pot,
      copy it to, say, ~/es.po, to start the translation for spanish.
    
    To test your translation, as root issue this command:
    
      msgfmt -o /usr/share/locale/es/LC_MESSAGES/linux.mo ~/es.po
    
      Replace "es" with your language code.
    
      Then execute, for instance:
    
      make menuconfig
    
    The current patch doesn't use any optimization to reduce the size of the
    generated .mo file, it is possible to use the config option as a key, but
    this doesn't prevent the current patch from being used or the translations
    done under the current scheme to be in any way lost if we chose to do any
    kind of keying.
    
    Thanks to Fabricio Vaccari for starting the pt_BR (brazilian portuguese)
    translation effort, Thiago Maciera for helping me with the gconf.cc (QT
    frontent) i18n coding and to all the volunteers that are already working on
    the first translation, to pt_BR.
    
    I left the question on whether to ship the translations with the stock kernel
    sources to be discussed here, please share your suggestions.
    
    Signed-off-by: Arnaldo Carvalho de Melo <acme@conectiva.com.br>
    Signed-off-by: Andrew Morton <akpm@osdl.org>
    Signed-off-by: Linus Torvalds <torvalds@osdl.org
    Signed-off-by: Andrew Morton <akpm@osdl.org>

diff --git a/scripts/kconfig/lkc.h b/scripts/kconfig/lkc.h
index b8a67fc9d647..8b84c42b49b5 100644
--- a/scripts/kconfig/lkc.h
+++ b/scripts/kconfig/lkc.h
@@ -8,6 +8,8 @@
 
 #include "expr.h"
 
+#include <libintl.h>
+
 #ifdef __cplusplus
 extern "C" {
 #endif
@@ -23,6 +25,12 @@ extern "C" {
 
 #define SRCTREE "srctree"
 
+#define PACKAGE "linux"
+#define LOCALEDIR "/usr/share/locale"
+
+#define _(text) gettext(text)
+#define N_(text) (text)
+
 int zconfparse(void);
 void zconfdump(FILE *out);
 

commit 1da177e4c3f41524e886b7f1b8a0c1fc7321cac2
Author: Linus Torvalds <torvalds@ppc970.osdl.org>
Date:   Sat Apr 16 15:20:36 2005 -0700

    Linux-2.6.12-rc2
    
    Initial git repository build. I'm not bothering with the full history,
    even though we have it. We can create a separate "historical" git
    archive of that later if we want to, and in the meantime it's about
    3.2GB when imported into git - space that would just make the early
    git days unnecessarily complicated, when we don't have a lot of good
    infrastructure for it.
    
    Let it rip!

diff --git a/scripts/kconfig/lkc.h b/scripts/kconfig/lkc.h
new file mode 100644
index 000000000000..b8a67fc9d647
--- /dev/null
+++ b/scripts/kconfig/lkc.h
@@ -0,0 +1,123 @@
+/*
+ * Copyright (C) 2002 Roman Zippel <zippel@linux-m68k.org>
+ * Released under the terms of the GNU GPL v2.0.
+ */
+
+#ifndef LKC_H
+#define LKC_H
+
+#include "expr.h"
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+
+#ifdef LKC_DIRECT_LINK
+#define P(name,type,arg)	extern type name arg
+#else
+#include "lkc_defs.h"
+#define P(name,type,arg)	extern type (*name ## _p) arg
+#endif
+#include "lkc_proto.h"
+#undef P
+
+#define SRCTREE "srctree"
+
+int zconfparse(void);
+void zconfdump(FILE *out);
+
+extern int zconfdebug;
+void zconf_starthelp(void);
+FILE *zconf_fopen(const char *name);
+void zconf_initscan(const char *name);
+void zconf_nextfile(const char *name);
+int zconf_lineno(void);
+char *zconf_curname(void);
+
+/* confdata.c */
+extern const char conf_def_filename[];
+extern char conf_filename[];
+
+char *conf_get_default_confname(void);
+
+/* kconfig_load.c */
+void kconfig_load(void);
+
+/* menu.c */
+void menu_init(void);
+void menu_add_menu(void);
+void menu_end_menu(void);
+void menu_add_entry(struct symbol *sym);
+void menu_end_entry(void);
+void menu_add_dep(struct expr *dep);
+struct property *menu_add_prop(enum prop_type type, char *prompt, struct expr *expr, struct expr *dep);
+void menu_add_prompt(enum prop_type type, char *prompt, struct expr *dep);
+void menu_add_expr(enum prop_type type, struct expr *expr, struct expr *dep);
+void menu_add_symbol(enum prop_type type, struct symbol *sym, struct expr *dep);
+void menu_finalize(struct menu *parent);
+void menu_set_type(int type);
+
+/* util.c */
+struct file *file_lookup(const char *name);
+int file_write_dep(const char *name);
+
+struct gstr {
+	size_t len;
+	char  *s;
+};
+struct gstr str_new(void);
+struct gstr str_assign(const char *s);
+void str_free(struct gstr *gs);
+void str_append(struct gstr *gs, const char *s);
+void str_printf(struct gstr *gs, const char *fmt, ...);
+const char *str_get(struct gstr *gs);
+
+/* symbol.c */
+void sym_init(void);
+void sym_clear_all_valid(void);
+void sym_set_changed(struct symbol *sym);
+struct symbol *sym_check_deps(struct symbol *sym);
+struct property *prop_alloc(enum prop_type type, struct symbol *sym);
+struct symbol *prop_get_symbol(struct property *prop);
+
+static inline tristate sym_get_tristate_value(struct symbol *sym)
+{
+	return sym->curr.tri;
+}
+
+
+static inline struct symbol *sym_get_choice_value(struct symbol *sym)
+{
+	return (struct symbol *)sym->curr.val;
+}
+
+static inline bool sym_set_choice_value(struct symbol *ch, struct symbol *chval)
+{
+	return sym_set_tristate_value(chval, yes);
+}
+
+static inline bool sym_is_choice(struct symbol *sym)
+{
+	return sym->flags & SYMBOL_CHOICE ? true : false;
+}
+
+static inline bool sym_is_choice_value(struct symbol *sym)
+{
+	return sym->flags & SYMBOL_CHOICEVAL ? true : false;
+}
+
+static inline bool sym_is_optional(struct symbol *sym)
+{
+	return sym->flags & SYMBOL_OPTIONAL ? true : false;
+}
+
+static inline bool sym_has_value(struct symbol *sym)
+{
+	return sym->flags & SYMBOL_NEW ? false : true;
+}
+
+#ifdef __cplusplus
+}
+#endif
+
+#endif /* LKC_H */
