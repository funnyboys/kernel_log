commit a776c270a0b2fad6715cb714187e4290cadb9237
Merge: 7c4fa150714f 594e576d4b93
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Mon Mar 30 16:13:08 2020 -0700

    Merge branch 'efi-core-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip
    
    Pull EFI updates from Ingo Molnar:
     "The EFI changes in this cycle are much larger than usual, for two
      (positive) reasons:
    
       - The GRUB project is showing signs of life again, resulting in the
         introduction of the generic Linux/UEFI boot protocol, instead of
         x86 specific hacks which are increasingly difficult to maintain.
         There's hope that all future extensions will now go through that
         boot protocol.
    
       - Preparatory work for RISC-V EFI support.
    
      The main changes are:
    
       - Boot time GDT handling changes
    
       - Simplify handling of EFI properties table on arm64
    
       - Generic EFI stub cleanups, to improve command line handling, file
         I/O, memory allocation, etc.
    
       - Introduce a generic initrd loading method based on calling back
         into the firmware, instead of relying on the x86 EFI handover
         protocol or device tree.
    
       - Introduce a mixed mode boot method that does not rely on the x86
         EFI handover protocol either, and could potentially be adopted by
         other architectures (if another one ever surfaces where one
         execution mode is a superset of another)
    
       - Clean up the contents of 'struct efi', and move out everything that
         doesn't need to be stored there.
    
       - Incorporate support for UEFI spec v2.8A changes that permit
         firmware implementations to return EFI_UNSUPPORTED from UEFI
         runtime services at OS runtime, and expose a mask of which ones are
         supported or unsupported via a configuration table.
    
       - Partial fix for the lack of by-VA cache maintenance in the
         decompressor on 32-bit ARM.
    
       - Changes to load device firmware from EFI boot service memory
         regions
    
       - Various documentation updates and minor code cleanups and fixes"
    
    * 'efi-core-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip: (114 commits)
      efi/libstub/arm: Fix spurious message that an initrd was loaded
      efi/libstub/arm64: Avoid image_base value from efi_loaded_image
      partitions/efi: Fix partition name parsing in GUID partition entry
      efi/x86: Fix cast of image argument
      efi/libstub/x86: Use ULONG_MAX as upper bound for all allocations
      efi: Fix a mistype in comments mentioning efivar_entry_iter_begin()
      efi/libstub: Avoid linking libstub/lib-ksyms.o into vmlinux
      efi/x86: Preserve %ebx correctly in efi_set_virtual_address_map()
      efi/x86: Ignore the memory attributes table on i386
      efi/x86: Don't relocate the kernel unless necessary
      efi/x86: Remove extra headroom for setup block
      efi/x86: Add kernel preferred address to PE header
      efi/x86: Decompress at start of PE image load address
      x86/boot/compressed/32: Save the output address instead of recalculating it
      efi/libstub/x86: Deal with exit() boot service returning
      x86/boot: Use unsigned comparison for addresses
      efi/x86: Avoid using code32_start
      efi/x86: Make efi32_pe_entry() more readable
      efi/x86: Respect 32-bit ABI in efi32_pe_entry()
      efi/x86: Annotate the LOADED_IMAGE_PROTOCOL_GUID with SYM_DATA
      ...

commit 3f1b95ef81b7dd5e5481347d7b7a7b427b29307a
Author: Christoph Hellwig <hch@lst.de>
Date:   Tue Mar 24 08:25:21 2020 +0100

    block: declare all partition detection routines in check.h
    
    There is no good reason to include one header per partition type in
    core.c.  Instead move the prototypes for the detection routins to
    check.h, and remove all now empty headers in block/partitions/.
    
    Signed-off-by: Christoph Hellwig <hch@lst.de>
    Signed-off-by: Jens Axboe <axboe@kernel.dk>

diff --git a/block/partitions/efi.h b/block/partitions/efi.h
index 3e8576157575..907bac5ce8f7 100644
--- a/block/partitions/efi.h
+++ b/block/partitions/efi.h
@@ -113,7 +113,4 @@ typedef struct _legacy_mbr {
 	__le16 signature;
 } __packed legacy_mbr;
 
-/* Functions */
-extern int efi_partition(struct parsed_partitions *state);
-
 #endif

commit d5528d5e91041e68e8eab9792ce627705a0ed273
Author: Nikolai Merinov <n.merinov@inango-systems.com>
Date:   Sun Mar 8 09:08:59 2020 +0100

    partitions/efi: Fix partition name parsing in GUID partition entry
    
    GUID partition entry defined to have a partition name as 36 UTF-16LE
    code units. This means that on big-endian platforms ASCII symbols
    would be read with 0xXX00 efi_char16_t character code. In order to
    correctly extract ASCII characters from a partition name field we
    should be converted from 16LE to CPU architecture.
    
    The problem exists on all big endian platforms.
    
    [ mingo: Minor edits. ]
    
    Fixes: eec7ecfede74 ("genhd, efi: add efi partition metadata to hd_structs")
    Reviewed-by: Christoph Hellwig <hch@lst.de>
    Signed-off-by: Nikolai Merinov <n.merinov@inango-systems.com>
    Signed-off-by: Ard Biesheuvel <ardb@kernel.org>
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Link: https://lore.kernel.org/r/20200308080859.21568-29-ardb@kernel.org
    Link: https://lore.kernel.org/r/797777312.1324734.1582544319435.JavaMail.zimbra@inango-systems.com/

diff --git a/block/partitions/efi.h b/block/partitions/efi.h
index 3e8576157575..5fc62fd8d9a9 100644
--- a/block/partitions/efi.h
+++ b/block/partitions/efi.h
@@ -88,7 +88,7 @@ typedef struct _gpt_entry {
 	__le64 starting_lba;
 	__le64 ending_lba;
 	gpt_entry_attributes attributes;
-	efi_char16_t partition_name[72 / sizeof (efi_char16_t)];
+	__le16 partition_name[72/sizeof(__le16)];
 } __packed gpt_entry;
 
 typedef struct _gpt_mbr_record {

commit a497ee34a45d58e9b978d0fa5c4b25d4813eb350
Author: Christoph Hellwig <hch@lst.de>
Date:   Tue Apr 30 14:42:40 2019 -0400

    block: switch all files cleared marked as GPLv2 or later to SPDX tags
    
    All these files have some form of the usual GPLv2 or later boilerplate.
    Switch them to use SPDX tags instead.
    
    Reviewed-by: Chaitanya Kulkarni <chaitanya.kulkarni@wdc.com>
    Signed-off-by: Christoph Hellwig <hch@lst.de>
    Signed-off-by: Jens Axboe <axboe@kernel.dk>

diff --git a/block/partitions/efi.h b/block/partitions/efi.h
index abd0b19288a6..3e8576157575 100644
--- a/block/partitions/efi.h
+++ b/block/partitions/efi.h
@@ -1,3 +1,4 @@
+/* SPDX-License-Identifier: GPL-2.0-or-later */
 /************************************************************
  * EFI GUID Partition Table
  * Per Intel EFI Specification v1.02
@@ -5,21 +6,6 @@
  *
  * By Matt Domsch <Matt_Domsch@dell.com>  Fri Sep 22 22:15:56 CDT 2000  
  *   Copyright 2000,2001 Dell Inc.
- *
- *  This program is free software; you can redistribute it and/or modify
- *  it under the terms of the GNU General Public License as published by
- *  the Free Software Foundation; either version 2 of the License, or
- *  (at your option) any later version.
- * 
- *  This program is distributed in the hope that it will be useful,
- *  but WITHOUT ANY WARRANTY; without even the implied warranty of
- *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- *  GNU General Public License for more details.
- *
- *  You should have received a copy of the GNU General Public License
- *  along with this program; if not, write to the Free Software
- *  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
- * 
  ************************************************************/
 
 #ifndef FS_PART_EFI_H_INCLUDED

commit e3ebf0d457039c857dfeb45434e3be9780dea499
Author: Gideon Israel Dsouza <gidisrael@gmail.com>
Date:   Mon Feb 17 21:17:16 2014 +0530

    block: Use macros from compiler.h instead of __attribute__((...))
    
    To increase compiler portability there are several macros defined
    in <linux/compiler.h> for various gcc __attribute((..)) constructs.
    I've made sure gcc these specific were replaced with the right
    macro and an #include <linux/compiler.h> was placed where needed.
    
    Signed-off-by: Gideon Israel Dsouza <gidisrael@gmail.com>
    Signed-off-by: Jens Axboe <axboe@fb.com>

diff --git a/block/partitions/efi.h b/block/partitions/efi.h
index 4efcafba7e64..abd0b19288a6 100644
--- a/block/partitions/efi.h
+++ b/block/partitions/efi.h
@@ -32,6 +32,7 @@
 #include <linux/major.h>
 #include <linux/string.h>
 #include <linux/efi.h>
+#include <linux/compiler.h>
 
 #define MSDOS_MBR_SIGNATURE 0xaa55
 #define EFI_PMBR_OSTYPE_EFI 0xEF
@@ -87,13 +88,13 @@ typedef struct _gpt_header {
 	 *
 	 * uint8_t		reserved2[ BlockSize - 92 ];
 	 */
-} __attribute__ ((packed)) gpt_header;
+} __packed gpt_header;
 
 typedef struct _gpt_entry_attributes {
 	u64 required_to_function:1;
 	u64 reserved:47;
         u64 type_guid_specific:16;
-} __attribute__ ((packed)) gpt_entry_attributes;
+} __packed gpt_entry_attributes;
 
 typedef struct _gpt_entry {
 	efi_guid_t partition_type_guid;
@@ -102,7 +103,7 @@ typedef struct _gpt_entry {
 	__le64 ending_lba;
 	gpt_entry_attributes attributes;
 	efi_char16_t partition_name[72 / sizeof (efi_char16_t)];
-} __attribute__ ((packed)) gpt_entry;
+} __packed gpt_entry;
 
 typedef struct _gpt_mbr_record {
 	u8	boot_indicator; /* unused by EFI, set to 0x80 for bootable */
@@ -124,7 +125,7 @@ typedef struct _legacy_mbr {
 	__le16 unknown;
 	gpt_mbr_record partition_record[4];
 	__le16 signature;
-} __attribute__ ((packed)) legacy_mbr;
+} __packed legacy_mbr;
 
 /* Functions */
 extern int efi_partition(struct parsed_partitions *state);

commit 08009b30a71d9a7c252c4bd677dbd496af9dd1a2
Author: Davidlohr Bueso <davidlohr@hp.com>
Date:   Wed Sep 11 14:25:02 2013 -0700

    partitions/efi: delete annoying emacs style comments
    
    I love emacs, but these settings for coding style are annoying when trying
    to open the efi.h file.  More important, we already have checkpatch for
    that.
    
    Signed-off-by: Davidlohr Bueso <davidlohr@hp.com>
    Reviewed-by: Karel Zak <kzak@redhat.com>
    Acked-by: Matt Fleming <matt.fleming@intel.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

diff --git a/block/partitions/efi.h b/block/partitions/efi.h
index 7fef625c04de..4efcafba7e64 100644
--- a/block/partitions/efi.h
+++ b/block/partitions/efi.h
@@ -130,22 +130,3 @@ typedef struct _legacy_mbr {
 extern int efi_partition(struct parsed_partitions *state);
 
 #endif
-
-/*
- * Overrides for Emacs so that we follow Linus's tabbing style.
- * Emacs will notice this stuff at the end of the file and automatically
- * adjust the settings for this buffer only.  This must remain at the end
- * of the file.
- * --------------------------------------------------------------------------
- * Local variables:
- * c-indent-level: 4 
- * c-brace-imaginary-offset: 0
- * c-brace-offset: -4
- * c-argdecl-indent: 4
- * c-label-offset: -4
- * c-continued-statement-offset: 4
- * c-continued-brace-offset: 0
- * indent-tabs-mode: nil
- * tab-width: 8
- * End:
- */

commit b05ebbbbeb67a420d06567c6b9618a9e644d6104
Author: Davidlohr Bueso <davidlohr@hp.com>
Date:   Wed Sep 11 14:24:58 2013 -0700

    partitions/efi: detect hybrid MBRs
    
    One of the biggest problems with GPT is compatibility with older, non-GPT
    systems.  The problem is addressed by creating hybrid mbrs, an extension,
    or variant, of the traditional protective mbr.  This contains, apart from
    the 0xEE partition, up three additional primary partitions that point to
    the same space marked by up to three GPT partitions.  The result is that
    legacy OSs can see the three required MBR partitions and at the same time
    ignore the GPT-aware partitions that protect the GPT structures.
    
    While hybrid MBRs are hacks, workarounds and simply not part of the GPT
    standard, they do exist and we have no way around them.  For instance, by
    default, OSX creates a hybrid scheme when using multi-OS booting.
    
    In order for Linux to properly discover protective MBRs, it must be made
    aware of devices that have hybrid MBRs.  No functionality is changed by
    this patch, just a debug message informing the user of the MBR scheme that
    is being used.
    
    [akpm@linux-foundation.org: coding-style fixes]
    Signed-off-by: Davidlohr Bueso <davidlohr@hp.com>
    Reviewed-by: Karel Zak <kzak@redhat.com>
    Acked-by: Matt Fleming <matt.fleming@intel.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

diff --git a/block/partitions/efi.h b/block/partitions/efi.h
index e645ecb35bf3..7fef625c04de 100644
--- a/block/partitions/efi.h
+++ b/block/partitions/efi.h
@@ -37,6 +37,9 @@
 #define EFI_PMBR_OSTYPE_EFI 0xEF
 #define EFI_PMBR_OSTYPE_EFI_GPT 0xEE
 
+#define GPT_MBR_PROTECTIVE  1
+#define GPT_MBR_HYBRID      2
+
 #define GPT_HEADER_SIGNATURE 0x5452415020494645ULL
 #define GPT_HEADER_REVISION_V1 0x00010000
 #define GPT_PRIMARY_PARTITION_TABLE_LBA 1

commit c2ebdc2439f50c049fd362bb225aaf78fe8e4cb8
Author: Davidlohr Bueso <davidlohr@hp.com>
Date:   Wed Sep 11 14:24:55 2013 -0700

    partitions/efi: use lba-aware partition records
    
    The kernel's GPT implementation currently uses the generic 'struct
    partition' type for dealing with legacy MBR partition records.  While this
    is is useful for disklabels that we designed for CHS addressing, such as
    msdos, it doesn't adapt well to newer standards that use LBA instead, such
    as GUID partition tables.  Furthermore, these generic partition structures
    do not have all the required fields to properly follow the UEFI specs.
    
    While a CHS address can be translated to LBA, it's much simpler and
    cleaner to just replace the partition type.  This patch adds a new
    'gpt_record' type that is fully compliant with EFI and will allow, in the
    next patches, to add more checks to properly verify a protective MBR,
    which is paramount to probing a device that makes use of GPT.
    
    [akpm@linux-foundation.org: coding-style fixes]
    Signed-off-by: Davidlohr Bueso <davidlohr@hp.com>
    Reviewed-by: Karel Zak <kzak@redhat.com>
    Acked-by: Matt Fleming <matt.fleming@intel.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

diff --git a/block/partitions/efi.h b/block/partitions/efi.h
index b69ab729558f..e645ecb35bf3 100644
--- a/block/partitions/efi.h
+++ b/block/partitions/efi.h
@@ -101,11 +101,25 @@ typedef struct _gpt_entry {
 	efi_char16_t partition_name[72 / sizeof (efi_char16_t)];
 } __attribute__ ((packed)) gpt_entry;
 
+typedef struct _gpt_mbr_record {
+	u8	boot_indicator; /* unused by EFI, set to 0x80 for bootable */
+	u8	start_head;     /* unused by EFI, pt start in CHS */
+	u8	start_sector;   /* unused by EFI, pt start in CHS */
+	u8	start_track;
+	u8	os_type;        /* EFI and legacy non-EFI OS types */
+	u8	end_head;       /* unused by EFI, pt end in CHS */
+	u8	end_sector;     /* unused by EFI, pt end in CHS */
+	u8	end_track;      /* unused by EFI, pt end in CHS */
+	__le32	starting_lba;   /* used by EFI - start addr of the on disk pt */
+	__le32	size_in_lba;    /* used by EFI - size of pt in LBA */
+} __packed gpt_mbr_record;
+
+
 typedef struct _legacy_mbr {
 	u8 boot_code[440];
 	__le32 unique_mbr_signature;
 	__le16 unknown;
-	struct partition partition_record[4];
+	gpt_mbr_record partition_record[4];
 	__le16 signature;
 } __attribute__ ((packed)) legacy_mbr;
 

commit 9be96f3fd10187f185d84cf878cf032465bcced3
Author: Al Viro <viro@zeniv.linux.org.uk>
Date:   Fri Sep 16 00:25:05 2011 -0400

    move fs/partitions to block/
    
    Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>

diff --git a/block/partitions/efi.h b/block/partitions/efi.h
new file mode 100644
index 000000000000..b69ab729558f
--- /dev/null
+++ b/block/partitions/efi.h
@@ -0,0 +1,134 @@
+/************************************************************
+ * EFI GUID Partition Table
+ * Per Intel EFI Specification v1.02
+ * http://developer.intel.com/technology/efi/efi.htm
+ *
+ * By Matt Domsch <Matt_Domsch@dell.com>  Fri Sep 22 22:15:56 CDT 2000  
+ *   Copyright 2000,2001 Dell Inc.
+ *
+ *  This program is free software; you can redistribute it and/or modify
+ *  it under the terms of the GNU General Public License as published by
+ *  the Free Software Foundation; either version 2 of the License, or
+ *  (at your option) any later version.
+ * 
+ *  This program is distributed in the hope that it will be useful,
+ *  but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ *  GNU General Public License for more details.
+ *
+ *  You should have received a copy of the GNU General Public License
+ *  along with this program; if not, write to the Free Software
+ *  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ * 
+ ************************************************************/
+
+#ifndef FS_PART_EFI_H_INCLUDED
+#define FS_PART_EFI_H_INCLUDED
+
+#include <linux/types.h>
+#include <linux/fs.h>
+#include <linux/genhd.h>
+#include <linux/kernel.h>
+#include <linux/major.h>
+#include <linux/string.h>
+#include <linux/efi.h>
+
+#define MSDOS_MBR_SIGNATURE 0xaa55
+#define EFI_PMBR_OSTYPE_EFI 0xEF
+#define EFI_PMBR_OSTYPE_EFI_GPT 0xEE
+
+#define GPT_HEADER_SIGNATURE 0x5452415020494645ULL
+#define GPT_HEADER_REVISION_V1 0x00010000
+#define GPT_PRIMARY_PARTITION_TABLE_LBA 1
+
+#define PARTITION_SYSTEM_GUID \
+    EFI_GUID( 0xC12A7328, 0xF81F, 0x11d2, \
+              0xBA, 0x4B, 0x00, 0xA0, 0xC9, 0x3E, 0xC9, 0x3B) 
+#define LEGACY_MBR_PARTITION_GUID \
+    EFI_GUID( 0x024DEE41, 0x33E7, 0x11d3, \
+              0x9D, 0x69, 0x00, 0x08, 0xC7, 0x81, 0xF3, 0x9F)
+#define PARTITION_MSFT_RESERVED_GUID \
+    EFI_GUID( 0xE3C9E316, 0x0B5C, 0x4DB8, \
+              0x81, 0x7D, 0xF9, 0x2D, 0xF0, 0x02, 0x15, 0xAE)
+#define PARTITION_BASIC_DATA_GUID \
+    EFI_GUID( 0xEBD0A0A2, 0xB9E5, 0x4433, \
+              0x87, 0xC0, 0x68, 0xB6, 0xB7, 0x26, 0x99, 0xC7)
+#define PARTITION_LINUX_RAID_GUID \
+    EFI_GUID( 0xa19d880f, 0x05fc, 0x4d3b, \
+              0xa0, 0x06, 0x74, 0x3f, 0x0f, 0x84, 0x91, 0x1e)
+#define PARTITION_LINUX_SWAP_GUID \
+    EFI_GUID( 0x0657fd6d, 0xa4ab, 0x43c4, \
+              0x84, 0xe5, 0x09, 0x33, 0xc8, 0x4b, 0x4f, 0x4f)
+#define PARTITION_LINUX_LVM_GUID \
+    EFI_GUID( 0xe6d6d379, 0xf507, 0x44c2, \
+              0xa2, 0x3c, 0x23, 0x8f, 0x2a, 0x3d, 0xf9, 0x28)
+
+typedef struct _gpt_header {
+	__le64 signature;
+	__le32 revision;
+	__le32 header_size;
+	__le32 header_crc32;
+	__le32 reserved1;
+	__le64 my_lba;
+	__le64 alternate_lba;
+	__le64 first_usable_lba;
+	__le64 last_usable_lba;
+	efi_guid_t disk_guid;
+	__le64 partition_entry_lba;
+	__le32 num_partition_entries;
+	__le32 sizeof_partition_entry;
+	__le32 partition_entry_array_crc32;
+
+	/* The rest of the logical block is reserved by UEFI and must be zero.
+	 * EFI standard handles this by:
+	 *
+	 * uint8_t		reserved2[ BlockSize - 92 ];
+	 */
+} __attribute__ ((packed)) gpt_header;
+
+typedef struct _gpt_entry_attributes {
+	u64 required_to_function:1;
+	u64 reserved:47;
+        u64 type_guid_specific:16;
+} __attribute__ ((packed)) gpt_entry_attributes;
+
+typedef struct _gpt_entry {
+	efi_guid_t partition_type_guid;
+	efi_guid_t unique_partition_guid;
+	__le64 starting_lba;
+	__le64 ending_lba;
+	gpt_entry_attributes attributes;
+	efi_char16_t partition_name[72 / sizeof (efi_char16_t)];
+} __attribute__ ((packed)) gpt_entry;
+
+typedef struct _legacy_mbr {
+	u8 boot_code[440];
+	__le32 unique_mbr_signature;
+	__le16 unknown;
+	struct partition partition_record[4];
+	__le16 signature;
+} __attribute__ ((packed)) legacy_mbr;
+
+/* Functions */
+extern int efi_partition(struct parsed_partitions *state);
+
+#endif
+
+/*
+ * Overrides for Emacs so that we follow Linus's tabbing style.
+ * Emacs will notice this stuff at the end of the file and automatically
+ * adjust the settings for this buffer only.  This must remain at the end
+ * of the file.
+ * --------------------------------------------------------------------------
+ * Local variables:
+ * c-indent-level: 4 
+ * c-brace-imaginary-offset: 0
+ * c-brace-offset: -4
+ * c-argdecl-indent: 4
+ * c-label-offset: -4
+ * c-continued-statement-offset: 4
+ * c-continued-brace-offset: 0
+ * indent-tabs-mode: nil
+ * tab-width: 8
+ * End:
+ */
