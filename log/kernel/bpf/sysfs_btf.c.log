commit 90ceddcb495008ac8ba7a3dce297841efcd7d584
Author: Fangrui Song <maskray@google.com>
Date:   Wed Mar 18 15:27:46 2020 -0700

    bpf: Support llvm-objcopy for vmlinux BTF
    
    Simplify gen_btf logic to make it work with llvm-objcopy. The existing
    'file format' and 'architecture' parsing logic is brittle and does not
    work with llvm-objcopy/llvm-objdump.
    
    'file format' output of llvm-objdump>=11 will match GNU objdump, but
    'architecture' (bfdarch) may not.
    
    .BTF in .tmp_vmlinux.btf is non-SHF_ALLOC. Add the SHF_ALLOC flag
    because it is part of vmlinux image used for introspection. C code
    can reference the section via linker script defined __start_BTF and
    __stop_BTF. This fixes a small problem that previous .BTF had the
    SHF_WRITE flag (objcopy -I binary -O elf* synthesized .data).
    
    Additionally, `objcopy -I binary` synthesized symbols
    _binary__btf_vmlinux_bin_start and _binary__btf_vmlinux_bin_stop (not
    used elsewhere) are replaced with more commonplace __start_BTF and
    __stop_BTF.
    
    Add 2>/dev/null because GNU objcopy (but not llvm-objcopy) warns
    "empty loadable segment detected at vaddr=0xffffffff81000000, is this intentional?"
    
    We use a dd command to change the e_type field in the ELF header from
    ET_EXEC to ET_REL so that lld will accept .btf.vmlinux.bin.o.  Accepting
    ET_EXEC as an input file is an extremely rare GNU ld feature that lld
    does not intend to support, because this is error-prone.
    
    The output section description .BTF in include/asm-generic/vmlinux.lds.h
    avoids potential subtle orphan section placement issues and suppresses
    --orphan-handling=warn warnings.
    
    Fixes: df786c9b9476 ("bpf: Force .BTF section start to zero when dumping from vmlinux")
    Fixes: cb0cc635c7a9 ("powerpc: Include .BTF section")
    Reported-by: Nathan Chancellor <natechancellor@gmail.com>
    Signed-off-by: Fangrui Song <maskray@google.com>
    Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
    Tested-by: Stanislav Fomichev <sdf@google.com>
    Tested-by: Andrii Nakryiko <andriin@fb.com>
    Reviewed-by: Stanislav Fomichev <sdf@google.com>
    Reviewed-by: Kees Cook <keescook@chromium.org>
    Acked-by: Andrii Nakryiko <andriin@fb.com>
    Acked-by: Michael Ellerman <mpe@ellerman.id.au> (powerpc)
    Link: https://github.com/ClangBuiltLinux/linux/issues/871
    Link: https://lore.kernel.org/bpf/20200318222746.173648-1-maskray@google.com

diff --git a/kernel/bpf/sysfs_btf.c b/kernel/bpf/sysfs_btf.c
index 7ae5dddd1fe6..3b495773de5a 100644
--- a/kernel/bpf/sysfs_btf.c
+++ b/kernel/bpf/sysfs_btf.c
@@ -9,15 +9,15 @@
 #include <linux/sysfs.h>
 
 /* See scripts/link-vmlinux.sh, gen_btf() func for details */
-extern char __weak _binary__btf_vmlinux_bin_start[];
-extern char __weak _binary__btf_vmlinux_bin_end[];
+extern char __weak __start_BTF[];
+extern char __weak __stop_BTF[];
 
 static ssize_t
 btf_vmlinux_read(struct file *file, struct kobject *kobj,
 		 struct bin_attribute *bin_attr,
 		 char *buf, loff_t off, size_t len)
 {
-	memcpy(buf, _binary__btf_vmlinux_bin_start + off, len);
+	memcpy(buf, __start_BTF + off, len);
 	return len;
 }
 
@@ -30,15 +30,14 @@ static struct kobject *btf_kobj;
 
 static int __init btf_vmlinux_init(void)
 {
-	if (!_binary__btf_vmlinux_bin_start)
+	if (!__start_BTF)
 		return 0;
 
 	btf_kobj = kobject_create_and_add("btf", kernel_kobj);
 	if (!btf_kobj)
 		return -ENOMEM;
 
-	bin_attr_btf_vmlinux.size = _binary__btf_vmlinux_bin_end -
-				    _binary__btf_vmlinux_bin_start;
+	bin_attr_btf_vmlinux.size = __stop_BTF - __start_BTF;
 
 	return sysfs_create_bin_file(btf_kobj, &bin_attr_btf_vmlinux);
 }

commit e03250061b54041d3502696db421c44a4a8039f4
Author: Wei Yongjun <weiyongjun1@huawei.com>
Date:   Fri Aug 16 02:40:44 2019 +0000

    btf: fix return value check in btf_vmlinux_init()
    
    In case of error, the function kobject_create_and_add() returns NULL
    pointer not ERR_PTR(). The IS_ERR() test in the return value check
    should be replaced with NULL test.
    
    Fixes: 341dfcf8d78e ("btf: expose BTF info through sysfs")
    Signed-off-by: Wei Yongjun <weiyongjun1@huawei.com>
    Acked-by: Andrii Nakryiko <andriin@fb.com>
    Signed-off-by: Alexei Starovoitov <ast@kernel.org>

diff --git a/kernel/bpf/sysfs_btf.c b/kernel/bpf/sysfs_btf.c
index 4659349fc795..7ae5dddd1fe6 100644
--- a/kernel/bpf/sysfs_btf.c
+++ b/kernel/bpf/sysfs_btf.c
@@ -30,17 +30,12 @@ static struct kobject *btf_kobj;
 
 static int __init btf_vmlinux_init(void)
 {
-	int err;
-
 	if (!_binary__btf_vmlinux_bin_start)
 		return 0;
 
 	btf_kobj = kobject_create_and_add("btf", kernel_kobj);
-	if (IS_ERR(btf_kobj)) {
-		err = PTR_ERR(btf_kobj);
-		btf_kobj = NULL;
-		return err;
-	}
+	if (!btf_kobj)
+		return -ENOMEM;
 
 	bin_attr_btf_vmlinux.size = _binary__btf_vmlinux_bin_end -
 				    _binary__btf_vmlinux_bin_start;

commit 7fd785685e2243bb639b31557e258d11464c3489
Author: Andrii Nakryiko <andriin@fb.com>
Date:   Tue Aug 13 11:54:42 2019 -0700

    btf: rename /sys/kernel/btf/kernel into /sys/kernel/btf/vmlinux
    
    Expose kernel's BTF under the name vmlinux to be more uniform with using
    kernel module names as file names in the future.
    
    Fixes: 341dfcf8d78e ("btf: expose BTF info through sysfs")
    Suggested-by: Daniel Borkmann <daniel@iogearbox.net>
    Signed-off-by: Andrii Nakryiko <andriin@fb.com>
    Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>

diff --git a/kernel/bpf/sysfs_btf.c b/kernel/bpf/sysfs_btf.c
index 092e63b9758b..4659349fc795 100644
--- a/kernel/bpf/sysfs_btf.c
+++ b/kernel/bpf/sysfs_btf.c
@@ -9,30 +9,30 @@
 #include <linux/sysfs.h>
 
 /* See scripts/link-vmlinux.sh, gen_btf() func for details */
-extern char __weak _binary__btf_kernel_bin_start[];
-extern char __weak _binary__btf_kernel_bin_end[];
+extern char __weak _binary__btf_vmlinux_bin_start[];
+extern char __weak _binary__btf_vmlinux_bin_end[];
 
 static ssize_t
-btf_kernel_read(struct file *file, struct kobject *kobj,
-		struct bin_attribute *bin_attr,
-		char *buf, loff_t off, size_t len)
+btf_vmlinux_read(struct file *file, struct kobject *kobj,
+		 struct bin_attribute *bin_attr,
+		 char *buf, loff_t off, size_t len)
 {
-	memcpy(buf, _binary__btf_kernel_bin_start + off, len);
+	memcpy(buf, _binary__btf_vmlinux_bin_start + off, len);
 	return len;
 }
 
-static struct bin_attribute bin_attr_btf_kernel __ro_after_init = {
-	.attr = { .name = "kernel", .mode = 0444, },
-	.read = btf_kernel_read,
+static struct bin_attribute bin_attr_btf_vmlinux __ro_after_init = {
+	.attr = { .name = "vmlinux", .mode = 0444, },
+	.read = btf_vmlinux_read,
 };
 
 static struct kobject *btf_kobj;
 
-static int __init btf_kernel_init(void)
+static int __init btf_vmlinux_init(void)
 {
 	int err;
 
-	if (!_binary__btf_kernel_bin_start)
+	if (!_binary__btf_vmlinux_bin_start)
 		return 0;
 
 	btf_kobj = kobject_create_and_add("btf", kernel_kobj);
@@ -42,10 +42,10 @@ static int __init btf_kernel_init(void)
 		return err;
 	}
 
-	bin_attr_btf_kernel.size = _binary__btf_kernel_bin_end -
-				   _binary__btf_kernel_bin_start;
+	bin_attr_btf_vmlinux.size = _binary__btf_vmlinux_bin_end -
+				    _binary__btf_vmlinux_bin_start;
 
-	return sysfs_create_bin_file(btf_kobj, &bin_attr_btf_kernel);
+	return sysfs_create_bin_file(btf_kobj, &bin_attr_btf_vmlinux);
 }
 
-subsys_initcall(btf_kernel_init);
+subsys_initcall(btf_vmlinux_init);

commit 341dfcf8d78eaa3a2dc96dea06f0392eb2978364
Author: Andrii Nakryiko <andriin@fb.com>
Date:   Mon Aug 12 11:39:47 2019 -0700

    btf: expose BTF info through sysfs
    
    Make .BTF section allocated and expose its contents through sysfs.
    
    /sys/kernel/btf directory is created to contain all the BTFs present
    inside kernel. Currently there is only kernel's main BTF, represented as
    /sys/kernel/btf/kernel file. Once kernel modules' BTFs are supported,
    each module will expose its BTF as /sys/kernel/btf/<module-name> file.
    
    Current approach relies on a few pieces coming together:
    1. pahole is used to take almost final vmlinux image (modulo .BTF and
       kallsyms) and generate .BTF section by converting DWARF info into
       BTF. This section is not allocated and not mapped to any segment,
       though, so is not yet accessible from inside kernel at runtime.
    2. objcopy dumps .BTF contents into binary file and subsequently
       convert binary file into linkable object file with automatically
       generated symbols _binary__btf_kernel_bin_start and
       _binary__btf_kernel_bin_end, pointing to start and end, respectively,
       of BTF raw data.
    3. final vmlinux image is generated by linking this object file (and
       kallsyms, if necessary). sysfs_btf.c then creates
       /sys/kernel/btf/kernel file and exposes embedded BTF contents through
       it. This allows, e.g., libbpf and bpftool access BTF info at
       well-known location, without resorting to searching for vmlinux image
       on disk (location of which is not standardized and vmlinux image
       might not be even available in some scenarios, e.g., inside qemu
       during testing).
    
    Alternative approach using .incbin assembler directive to embed BTF
    contents directly was attempted but didn't work, because sysfs_proc.o is
    not re-compiled during link-vmlinux.sh stage. This is required, though,
    to update embedded BTF data (initially empty data is embedded, then
    pahole generates BTF info and we need to regenerate sysfs_btf.o with
    updated contents, but it's too late at that point).
    
    If BTF couldn't be generated due to missing or too old pahole,
    sysfs_btf.c handles that gracefully by detecting that
    _binary__btf_kernel_bin_start (weak symbol) is 0 and not creating
    /sys/kernel/btf at all.
    
    v2->v3:
    - added Documentation/ABI/testing/sysfs-kernel-btf (Greg K-H);
    - created proper kobject (btf_kobj) for btf directory (Greg K-H);
    - undo v2 change of reusing vmlinux, as it causes extra kallsyms pass
      due to initially missing  __binary__btf_kernel_bin_{start/end} symbols;
    
    v1->v2:
    - allow kallsyms stage to re-use vmlinux generated by gen_btf();
    
    Reviewed-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Andrii Nakryiko <andriin@fb.com>
    Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>

diff --git a/kernel/bpf/sysfs_btf.c b/kernel/bpf/sysfs_btf.c
new file mode 100644
index 000000000000..092e63b9758b
--- /dev/null
+++ b/kernel/bpf/sysfs_btf.c
@@ -0,0 +1,51 @@
+// SPDX-License-Identifier: GPL-2.0
+/*
+ * Provide kernel BTF information for introspection and use by eBPF tools.
+ */
+#include <linux/kernel.h>
+#include <linux/module.h>
+#include <linux/kobject.h>
+#include <linux/init.h>
+#include <linux/sysfs.h>
+
+/* See scripts/link-vmlinux.sh, gen_btf() func for details */
+extern char __weak _binary__btf_kernel_bin_start[];
+extern char __weak _binary__btf_kernel_bin_end[];
+
+static ssize_t
+btf_kernel_read(struct file *file, struct kobject *kobj,
+		struct bin_attribute *bin_attr,
+		char *buf, loff_t off, size_t len)
+{
+	memcpy(buf, _binary__btf_kernel_bin_start + off, len);
+	return len;
+}
+
+static struct bin_attribute bin_attr_btf_kernel __ro_after_init = {
+	.attr = { .name = "kernel", .mode = 0444, },
+	.read = btf_kernel_read,
+};
+
+static struct kobject *btf_kobj;
+
+static int __init btf_kernel_init(void)
+{
+	int err;
+
+	if (!_binary__btf_kernel_bin_start)
+		return 0;
+
+	btf_kobj = kobject_create_and_add("btf", kernel_kobj);
+	if (IS_ERR(btf_kobj)) {
+		err = PTR_ERR(btf_kobj);
+		btf_kobj = NULL;
+		return err;
+	}
+
+	bin_attr_btf_kernel.size = _binary__btf_kernel_bin_end -
+				   _binary__btf_kernel_bin_start;
+
+	return sysfs_create_bin_file(btf_kobj, &bin_attr_btf_kernel);
+}
+
+subsys_initcall(btf_kernel_init);
