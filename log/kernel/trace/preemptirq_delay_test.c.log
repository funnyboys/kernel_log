commit 8b1fac2e73e84ef0d6391051880a8e1d7044c847
Author: Steven Rostedt (VMware) <rostedt@goodmis.org>
Date:   Sun May 10 11:35:10 2020 -0400

    tracing: Wait for preempt irq delay thread to execute
    
    A bug report was posted that running the preempt irq delay module on a slow
    machine, and removing it quickly could lead to the thread created by the
    modlue to execute after the module is removed, and this could cause the
    kernel to crash. The fix for this was to call kthread_stop() after creating
    the thread to make sure it finishes before allowing the module to be
    removed.
    
    Now this caused the opposite problem on fast machines. What now happens is
    the kthread_stop() can cause the kthread never to execute and the test never
    to run. To fix this, add a completion and wait for the kthread to execute,
    then wait for it to end.
    
    This issue caused the ftracetest selftests to fail on the preemptirq tests.
    
    Link: https://lore.kernel.org/r/20200510114210.15d9e4af@oasis.local.home
    
    Cc: stable@vger.kernel.org
    Fixes: d16a8c31077e ("tracing: Wait for preempt irq delay thread to finish")
    Reviewed-by: Joel Fernandes (Google) <joel@joelfernandes.org>
    Signed-off-by: Steven Rostedt (VMware) <rostedt@goodmis.org>

diff --git a/kernel/trace/preemptirq_delay_test.c b/kernel/trace/preemptirq_delay_test.c
index c4c86de63cf9..312d1a0ca3b6 100644
--- a/kernel/trace/preemptirq_delay_test.c
+++ b/kernel/trace/preemptirq_delay_test.c
@@ -16,6 +16,7 @@
 #include <linux/printk.h>
 #include <linux/string.h>
 #include <linux/sysfs.h>
+#include <linux/completion.h>
 
 static ulong delay = 100;
 static char test_mode[12] = "irq";
@@ -28,6 +29,8 @@ MODULE_PARM_DESC(delay, "Period in microseconds (100 us default)");
 MODULE_PARM_DESC(test_mode, "Mode of the test such as preempt, irq, or alternate (default irq)");
 MODULE_PARM_DESC(burst_size, "The size of a burst (default 1)");
 
+static struct completion done;
+
 #define MIN(x, y) ((x) < (y) ? (x) : (y))
 
 static void busy_wait(ulong time)
@@ -114,6 +117,8 @@ static int preemptirq_delay_run(void *data)
 	for (i = 0; i < s; i++)
 		(testfuncs[i])(i);
 
+	complete(&done);
+
 	set_current_state(TASK_INTERRUPTIBLE);
 	while (!kthread_should_stop()) {
 		schedule();
@@ -128,15 +133,18 @@ static int preemptirq_delay_run(void *data)
 static int preemptirq_run_test(void)
 {
 	struct task_struct *task;
-
 	char task_name[50];
 
+	init_completion(&done);
+
 	snprintf(task_name, sizeof(task_name), "%s_test", test_mode);
 	task =  kthread_run(preemptirq_delay_run, NULL, task_name);
 	if (IS_ERR(task))
 		return PTR_ERR(task);
-	if (task)
+	if (task) {
+		wait_for_completion(&done);
 		kthread_stop(task);
+	}
 	return 0;
 }
 

commit d16a8c31077e75ecb9427fbfea59b74eed00f698
Author: Steven Rostedt (VMware) <rostedt@goodmis.org>
Date:   Wed May 6 10:20:10 2020 -0400

    tracing: Wait for preempt irq delay thread to finish
    
    Running on a slower machine, it is possible that the preempt delay kernel
    thread may still be executing if the module was immediately removed after
    added, and this can cause the kernel to crash as the kernel thread might be
    executing after its code has been removed.
    
    There's no reason that the caller of the code shouldn't just wait for the
    delay thread to finish, as the thread can also be created by a trigger in
    the sysfs code, which also has the same issues.
    
    Link: http://lore.kernel.org/r/5EA2B0C8.2080706@cn.fujitsu.com
    
    Cc: stable@vger.kernel.org
    Fixes: 793937236d1ee ("lib: Add module for testing preemptoff/irqsoff latency tracers")
    Reported-by: Xiao Yang <yangx.jy@cn.fujitsu.com>
    Reviewed-by: Xiao Yang <yangx.jy@cn.fujitsu.com>
    Reviewed-by: Joel Fernandes <joel@joelfernandes.org>
    Signed-off-by: Steven Rostedt (VMware) <rostedt@goodmis.org>

diff --git a/kernel/trace/preemptirq_delay_test.c b/kernel/trace/preemptirq_delay_test.c
index 31c0fad4cb9e..c4c86de63cf9 100644
--- a/kernel/trace/preemptirq_delay_test.c
+++ b/kernel/trace/preemptirq_delay_test.c
@@ -113,22 +113,42 @@ static int preemptirq_delay_run(void *data)
 
 	for (i = 0; i < s; i++)
 		(testfuncs[i])(i);
+
+	set_current_state(TASK_INTERRUPTIBLE);
+	while (!kthread_should_stop()) {
+		schedule();
+		set_current_state(TASK_INTERRUPTIBLE);
+	}
+
+	__set_current_state(TASK_RUNNING);
+
 	return 0;
 }
 
-static struct task_struct *preemptirq_start_test(void)
+static int preemptirq_run_test(void)
 {
+	struct task_struct *task;
+
 	char task_name[50];
 
 	snprintf(task_name, sizeof(task_name), "%s_test", test_mode);
-	return kthread_run(preemptirq_delay_run, NULL, task_name);
+	task =  kthread_run(preemptirq_delay_run, NULL, task_name);
+	if (IS_ERR(task))
+		return PTR_ERR(task);
+	if (task)
+		kthread_stop(task);
+	return 0;
 }
 
 
 static ssize_t trigger_store(struct kobject *kobj, struct kobj_attribute *attr,
 			 const char *buf, size_t count)
 {
-	preemptirq_start_test();
+	ssize_t ret;
+
+	ret = preemptirq_run_test();
+	if (ret)
+		return ret;
 	return count;
 }
 
@@ -148,11 +168,9 @@ static struct kobject *preemptirq_delay_kobj;
 
 static int __init preemptirq_delay_init(void)
 {
-	struct task_struct *test_task;
 	int retval;
 
-	test_task = preemptirq_start_test();
-	retval = PTR_ERR_OR_ZERO(test_task);
+	retval = preemptirq_run_test();
 	if (retval != 0)
 		return retval;
 

commit 793937236d1ee032d2ee5ccc27bdd280a04e766e
Author: Viktor Rosendahl (BMW) <viktor.rosendahl@gmail.com>
Date:   Wed Oct 9 00:08:22 2019 +0200

    preemptirq_delay_test: Add the burst feature and a sysfs trigger
    
    This burst feature enables the user to generate a burst of
    preempt/irqsoff latencies. This makes it possible to test whether we
    are able to detect latencies that systematically occur very close to
    each other.
    
    The maximum burst size is 10. We also create 10 identical test
    functions, so that we get 10 different backtraces; this is useful
    when we want to test whether we can detect all the latencies in a
    burst. Otherwise, there would be no easy way of differentiating
    between which latency in a burst was captured by the tracer.
    
    In addition, there is a sysfs trigger, so that it's not necessary to
    reload the module to repeat the test. The trigger will appear as
    /sys/kernel/preemptirq_delay_test/trigger in sysfs.
    
    Link: http://lkml.kernel.org/r/20191008220824.7911-3-viktor.rosendahl@gmail.com
    
    Reviewed-by: Joel Fernandes (Google) <joel@joelfernandes.org>
    Signed-off-by: Viktor Rosendahl (BMW) <viktor.rosendahl@gmail.com>
    Signed-off-by: Steven Rostedt (VMware) <rostedt@goodmis.org>

diff --git a/kernel/trace/preemptirq_delay_test.c b/kernel/trace/preemptirq_delay_test.c
index d8765c952fab..31c0fad4cb9e 100644
--- a/kernel/trace/preemptirq_delay_test.c
+++ b/kernel/trace/preemptirq_delay_test.c
@@ -10,18 +10,25 @@
 #include <linux/interrupt.h>
 #include <linux/irq.h>
 #include <linux/kernel.h>
+#include <linux/kobject.h>
 #include <linux/kthread.h>
 #include <linux/module.h>
 #include <linux/printk.h>
 #include <linux/string.h>
+#include <linux/sysfs.h>
 
 static ulong delay = 100;
-static char test_mode[10] = "irq";
+static char test_mode[12] = "irq";
+static uint burst_size = 1;
 
-module_param_named(delay, delay, ulong, S_IRUGO);
-module_param_string(test_mode, test_mode, 10, S_IRUGO);
-MODULE_PARM_DESC(delay, "Period in microseconds (100 uS default)");
-MODULE_PARM_DESC(test_mode, "Mode of the test such as preempt or irq (default irq)");
+module_param_named(delay, delay, ulong, 0444);
+module_param_string(test_mode, test_mode, 12, 0444);
+module_param_named(burst_size, burst_size, uint, 0444);
+MODULE_PARM_DESC(delay, "Period in microseconds (100 us default)");
+MODULE_PARM_DESC(test_mode, "Mode of the test such as preempt, irq, or alternate (default irq)");
+MODULE_PARM_DESC(burst_size, "The size of a burst (default 1)");
+
+#define MIN(x, y) ((x) < (y) ? (x) : (y))
 
 static void busy_wait(ulong time)
 {
@@ -34,37 +41,136 @@ static void busy_wait(ulong time)
 	} while ((end - start) < (time * 1000));
 }
 
-static int preemptirq_delay_run(void *data)
+static __always_inline void irqoff_test(void)
 {
 	unsigned long flags;
+	local_irq_save(flags);
+	busy_wait(delay);
+	local_irq_restore(flags);
+}
 
-	if (!strcmp(test_mode, "irq")) {
-		local_irq_save(flags);
-		busy_wait(delay);
-		local_irq_restore(flags);
-	} else if (!strcmp(test_mode, "preempt")) {
-		preempt_disable();
-		busy_wait(delay);
-		preempt_enable();
+static __always_inline void preemptoff_test(void)
+{
+	preempt_disable();
+	busy_wait(delay);
+	preempt_enable();
+}
+
+static void execute_preemptirqtest(int idx)
+{
+	if (!strcmp(test_mode, "irq"))
+		irqoff_test();
+	else if (!strcmp(test_mode, "preempt"))
+		preemptoff_test();
+	else if (!strcmp(test_mode, "alternate")) {
+		if (idx % 2 == 0)
+			irqoff_test();
+		else
+			preemptoff_test();
 	}
+}
+
+#define DECLARE_TESTFN(POSTFIX)				\
+	static void preemptirqtest_##POSTFIX(int idx)	\
+	{						\
+		execute_preemptirqtest(idx);		\
+	}						\
 
+/*
+ * We create 10 different functions, so that we can get 10 different
+ * backtraces.
+ */
+DECLARE_TESTFN(0)
+DECLARE_TESTFN(1)
+DECLARE_TESTFN(2)
+DECLARE_TESTFN(3)
+DECLARE_TESTFN(4)
+DECLARE_TESTFN(5)
+DECLARE_TESTFN(6)
+DECLARE_TESTFN(7)
+DECLARE_TESTFN(8)
+DECLARE_TESTFN(9)
+
+static void (*testfuncs[])(int)  = {
+	preemptirqtest_0,
+	preemptirqtest_1,
+	preemptirqtest_2,
+	preemptirqtest_3,
+	preemptirqtest_4,
+	preemptirqtest_5,
+	preemptirqtest_6,
+	preemptirqtest_7,
+	preemptirqtest_8,
+	preemptirqtest_9,
+};
+
+#define NR_TEST_FUNCS ARRAY_SIZE(testfuncs)
+
+static int preemptirq_delay_run(void *data)
+{
+	int i;
+	int s = MIN(burst_size, NR_TEST_FUNCS);
+
+	for (i = 0; i < s; i++)
+		(testfuncs[i])(i);
 	return 0;
 }
 
-static int __init preemptirq_delay_init(void)
+static struct task_struct *preemptirq_start_test(void)
 {
 	char task_name[50];
-	struct task_struct *test_task;
 
 	snprintf(task_name, sizeof(task_name), "%s_test", test_mode);
+	return kthread_run(preemptirq_delay_run, NULL, task_name);
+}
+
+
+static ssize_t trigger_store(struct kobject *kobj, struct kobj_attribute *attr,
+			 const char *buf, size_t count)
+{
+	preemptirq_start_test();
+	return count;
+}
+
+static struct kobj_attribute trigger_attribute =
+	__ATTR(trigger, 0200, NULL, trigger_store);
+
+static struct attribute *attrs[] = {
+	&trigger_attribute.attr,
+	NULL,
+};
+
+static struct attribute_group attr_group = {
+	.attrs = attrs,
+};
+
+static struct kobject *preemptirq_delay_kobj;
+
+static int __init preemptirq_delay_init(void)
+{
+	struct task_struct *test_task;
+	int retval;
+
+	test_task = preemptirq_start_test();
+	retval = PTR_ERR_OR_ZERO(test_task);
+	if (retval != 0)
+		return retval;
+
+	preemptirq_delay_kobj = kobject_create_and_add("preemptirq_delay_test",
+						       kernel_kobj);
+	if (!preemptirq_delay_kobj)
+		return -ENOMEM;
+
+	retval = sysfs_create_group(preemptirq_delay_kobj, &attr_group);
+	if (retval)
+		kobject_put(preemptirq_delay_kobj);
 
-	test_task = kthread_run(preemptirq_delay_run, NULL, task_name);
-	return PTR_ERR_OR_ZERO(test_task);
+	return retval;
 }
 
 static void __exit preemptirq_delay_exit(void)
 {
-	return;
+	kobject_put(preemptirq_delay_kobj);
 }
 
 module_init(preemptirq_delay_init)

commit 12ad0cb2123aed30241a14792ef5bef9efcccbcd
Author: Steven Rostedt (VMware) <rostedt@goodmis.org>
Date:   Mon Oct 15 23:31:42 2018 -0400

    tracing: Use trace_clock_local() for looping in preemptirq_delay_test.c
    
    The preemptirq_delay_test module is used for the ftrace selftest code that
    tests the latency tracers. The problem is that it uses ktime for the delay
    loop, and then checks the tracer to see if the delay loop is caught, but the
    tracer uses trace_clock_local() which uses various different other clocks to
    measure the latency. As ktime uses the clock cycles, and the code then
    converts that to nanoseconds, it causes rounding errors, and the preemptirq
    latency tests are failing due to being off by 1 (it expects to see a delay
    of 500000 us, but the delay is only 499999 us). This is happening due to a
    rounding error in the ktime (which is totally legit). The purpose of the
    test is to see if it can catch the delay, not to test the accuracy between
    trace_clock_local() and ktime_get(). Best to use apples to apples, and have
    the delay loop use the same clock as the latency tracer does.
    
    Cc: stable@vger.kernel.org
    Fixes: f96e8577da102 ("lib: Add module for testing preemptoff/irqsoff latency tracers")
    Acked-by: Joel Fernandes (Google) <joel@joelfernandes.org>
    Signed-off-by: Steven Rostedt (VMware) <rostedt@goodmis.org>

diff --git a/kernel/trace/preemptirq_delay_test.c b/kernel/trace/preemptirq_delay_test.c
index f704390db9fc..d8765c952fab 100644
--- a/kernel/trace/preemptirq_delay_test.c
+++ b/kernel/trace/preemptirq_delay_test.c
@@ -5,12 +5,12 @@
  * Copyright (C) 2018 Joel Fernandes (Google) <joel@joelfernandes.org>
  */
 
+#include <linux/trace_clock.h>
 #include <linux/delay.h>
 #include <linux/interrupt.h>
 #include <linux/irq.h>
 #include <linux/kernel.h>
 #include <linux/kthread.h>
-#include <linux/ktime.h>
 #include <linux/module.h>
 #include <linux/printk.h>
 #include <linux/string.h>
@@ -25,13 +25,13 @@ MODULE_PARM_DESC(test_mode, "Mode of the test such as preempt or irq (default ir
 
 static void busy_wait(ulong time)
 {
-	ktime_t start, end;
-	start = ktime_get();
+	u64 start, end;
+	start = trace_clock_local();
 	do {
-		end = ktime_get();
+		end = trace_clock_local();
 		if (kthread_should_stop())
 			break;
-	} while (ktime_to_ns(ktime_sub(end, start)) < (time * 1000));
+	} while ((end - start) < (time * 1000));
 }
 
 static int preemptirq_delay_run(void *data)

commit 518eeca05c08347f0a69966b4459cc2d152af959
Author: kbuild test robot <fengguang.wu@intel.com>
Date:   Fri Jul 13 21:14:52 2018 +0800

    tracing: preemptirq_delay_run() can be static
    
    Automatically found by kbuild test robot.
    
    Fixes: ffdc73a3b2ad ("lib: Add module for testing preemptoff/irqsoff latency tracers")
    Signed-off-by: kbuild test robot <fengguang.wu@intel.com>
    Signed-off-by: Steven Rostedt (VMware) <rostedt@goodmis.org>

diff --git a/kernel/trace/preemptirq_delay_test.c b/kernel/trace/preemptirq_delay_test.c
index c97a026c0720..f704390db9fc 100644
--- a/kernel/trace/preemptirq_delay_test.c
+++ b/kernel/trace/preemptirq_delay_test.c
@@ -34,7 +34,7 @@ static void busy_wait(ulong time)
 	} while (ktime_to_ns(ktime_sub(end, start)) < (time * 1000));
 }
 
-int preemptirq_delay_run(void *data)
+static int preemptirq_delay_run(void *data)
 {
 	unsigned long flags;
 

commit f96e8577da1026c344e49c75111303888d225389
Author: Joel Fernandes (Google) <joel@joelfernandes.org>
Date:   Thu Jul 12 14:36:11 2018 -0700

    lib: Add module for testing preemptoff/irqsoff latency tracers
    
    Here we introduce a test module for introducing a long preempt or irq
    disable delay in the kernel which the preemptoff or irqsoff tracers can
    detect. This module is to be used only for test purposes and is default
    disabled.
    
    Following is the expected output (only briefly shown) that can be parsed
    to verify that the tracers are working correctly. We will use this from
    the kselftests in future patches.
    
    For the preemptoff tracer:
    
    echo preemptoff > /d/tracing/current_tracer
    sleep 1
    insmod ./preemptirq_delay_test.ko test_mode=preempt delay=500000
    sleep 1
    bash-4.3# cat /d/tracing/trace
    preempt -1066    2...2    0us@: preemptirq_delay_run <-preemptirq_delay_run
    preempt -1066    2...2 500002us : preemptirq_delay_run <-preemptirq_delay_run
    preempt -1066    2...2 500004us : tracer_preempt_on <-preemptirq_delay_run
    preempt -1066    2...2 500012us : <stack trace>
     => kthread
     => ret_from_fork
    
    For the irqsoff tracer:
    
    echo irqsoff > /d/tracing/current_tracer
    sleep 1
    insmod ./preemptirq_delay_test.ko test_mode=irq delay=500000
    sleep 1
    bash-4.3# cat /d/tracing/trace
    irq dis -1069    1d..1    0us@: preemptirq_delay_run
    irq dis -1069    1d..1 500001us : preemptirq_delay_run
    irq dis -1069    1d..1 500002us : tracer_hardirqs_on <-preemptirq_delay_run
    irq dis -1069    1d..1 500005us : <stack trace>
     => ret_from_fork
    
    Link: http://lkml.kernel.org/r/20180712213611.GA8743@joelaf.mtv.corp.google.com
    
    Cc: Boqun Feng <boqun.feng@gmail.com>
    Cc: Byungchul Park <byungchul.park@lge.com>
    Cc: Ingo Molnar <mingo@redhat.com>
    Cc: Julia Cartwright <julia@ni.com>
    Cc: Masami Hiramatsu <mhiramat@kernel.org>
    Cc: Mathieu Desnoyers <mathieu.desnoyers@efficios.com>
    Cc: Namhyung Kim <namhyung@kernel.org>
    Cc: Paul McKenney <paulmck@linux.vnet.ibm.com>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Shuah Khan <shuah@kernel.org>
    Cc: Thomas Glexiner <tglx@linutronix.de>
    Cc: Todd Kjos <tkjos@google.com>
    Cc: Tom Zanussi <tom.zanussi@linux.intel.com>
    Cc: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    Reviewed-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    [ Erick is a co-developer of this commit ]
    Signed-off-by: Erick Reyes <erickreyes@google.com>
    Signed-off-by: Joel Fernandes (Google) <joel@joelfernandes.org>
    Signed-off-by: Steven Rostedt (VMware) <rostedt@goodmis.org>

diff --git a/kernel/trace/preemptirq_delay_test.c b/kernel/trace/preemptirq_delay_test.c
new file mode 100644
index 000000000000..c97a026c0720
--- /dev/null
+++ b/kernel/trace/preemptirq_delay_test.c
@@ -0,0 +1,72 @@
+// SPDX-License-Identifier: GPL-2.0
+/*
+ * Preempt / IRQ disable delay thread to test latency tracers
+ *
+ * Copyright (C) 2018 Joel Fernandes (Google) <joel@joelfernandes.org>
+ */
+
+#include <linux/delay.h>
+#include <linux/interrupt.h>
+#include <linux/irq.h>
+#include <linux/kernel.h>
+#include <linux/kthread.h>
+#include <linux/ktime.h>
+#include <linux/module.h>
+#include <linux/printk.h>
+#include <linux/string.h>
+
+static ulong delay = 100;
+static char test_mode[10] = "irq";
+
+module_param_named(delay, delay, ulong, S_IRUGO);
+module_param_string(test_mode, test_mode, 10, S_IRUGO);
+MODULE_PARM_DESC(delay, "Period in microseconds (100 uS default)");
+MODULE_PARM_DESC(test_mode, "Mode of the test such as preempt or irq (default irq)");
+
+static void busy_wait(ulong time)
+{
+	ktime_t start, end;
+	start = ktime_get();
+	do {
+		end = ktime_get();
+		if (kthread_should_stop())
+			break;
+	} while (ktime_to_ns(ktime_sub(end, start)) < (time * 1000));
+}
+
+int preemptirq_delay_run(void *data)
+{
+	unsigned long flags;
+
+	if (!strcmp(test_mode, "irq")) {
+		local_irq_save(flags);
+		busy_wait(delay);
+		local_irq_restore(flags);
+	} else if (!strcmp(test_mode, "preempt")) {
+		preempt_disable();
+		busy_wait(delay);
+		preempt_enable();
+	}
+
+	return 0;
+}
+
+static int __init preemptirq_delay_init(void)
+{
+	char task_name[50];
+	struct task_struct *test_task;
+
+	snprintf(task_name, sizeof(task_name), "%s_test", test_mode);
+
+	test_task = kthread_run(preemptirq_delay_run, NULL, task_name);
+	return PTR_ERR_OR_ZERO(test_task);
+}
+
+static void __exit preemptirq_delay_exit(void)
+{
+	return;
+}
+
+module_init(preemptirq_delay_init)
+module_exit(preemptirq_delay_exit)
+MODULE_LICENSE("GPL v2");
