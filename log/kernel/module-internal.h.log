commit b4d0d230ccfb5d1a9ea85da64aa584df7c148ee9
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Mon May 20 19:08:01 2019 +0200

    treewide: Replace GPLv2 boilerplate/reference with SPDX - rule 36
    
    Based on 1 normalized pattern(s):
    
      this program is free software you can redistribute it and or modify
      it under the terms of the gnu general public licence as published by
      the free software foundation either version 2 of the licence or at
      your option any later version
    
    extracted by the scancode license scanner the SPDX license identifier
    
      GPL-2.0-or-later
    
    has been chosen to replace the boilerplate/reference in 114 file(s).
    
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Reviewed-by: Allison Randal <allison@lohutok.net>
    Reviewed-by: Kate Stewart <kstewart@linuxfoundation.org>
    Cc: linux-spdx@vger.kernel.org
    Link: https://lkml.kernel.org/r/20190520170857.552531963@linutronix.de
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/kernel/module-internal.h b/kernel/module-internal.h
index d354341f8cc0..33783abc377b 100644
--- a/kernel/module-internal.h
+++ b/kernel/module-internal.h
@@ -1,12 +1,8 @@
+/* SPDX-License-Identifier: GPL-2.0-or-later */
 /* Module internals
  *
  * Copyright (C) 2012 Red Hat, Inc. All Rights Reserved.
  * Written by David Howells (dhowells@redhat.com)
- *
- * This program is free software; you can redistribute it and/or
- * modify it under the terms of the GNU General Public Licence
- * as published by the Free Software Foundation; either version
- * 2 of the Licence, or (at your option) any later version.
  */
 
 #include <linux/elf.h>

commit 1c7651f43777cdd59c1aaa82c87324d3e7438c7b
Author: Eugene Loh <eugene.loh@oracle.com>
Date:   Mon Feb 25 11:59:58 2019 -0800

    kallsyms: store type information in its own array
    
    When a module is loaded, its symbols' Elf_Sym information is stored
    in a symtab.  Further, type information is also captured.  Since
    Elf_Sym has no type field, historically the st_info field has been
    hijacked for storing type:  st_info was overwritten.
    
    commit 5439c985c5a83a8419f762115afdf560ab72a452 ("module: Overwrite
    st_size instead of st_info") changes that practice, as its one-liner
    indicates.  Unfortunately, this change overwrites symbol size,
    information that a tool like DTrace expects to find.
    
    Allocate a typetab array to store type information so that no Elf_Sym
    field needs to be overwritten.
    
    Fixes: 5439c985c5a8 ("module: Overwrite st_size instead of st_info")
    Signed-off-by: Eugene Loh <eugene.loh@oracle.com>
    Reviewed-by: Nick Alcock <nick.alcock@oracle.com>
    [jeyu: renamed typeoff -> typeoffs ]
    Signed-off-by: Jessica Yu <jeyu@kernel.org>

diff --git a/kernel/module-internal.h b/kernel/module-internal.h
index 79c9be2dbbe9..d354341f8cc0 100644
--- a/kernel/module-internal.h
+++ b/kernel/module-internal.h
@@ -20,7 +20,7 @@ struct load_info {
 	unsigned long len;
 	Elf_Shdr *sechdrs;
 	char *secstrings, *strtab;
-	unsigned long symoffs, stroffs;
+	unsigned long symoffs, stroffs, init_typeoffs, core_typeoffs;
 	struct _ddebug *debug;
 	unsigned int num_debug;
 	bool sig_ok;

commit f314dfea16a085a58d2ff227ea9fa9e490ee5d18
Author: Jessica Yu <jeyu@kernel.org>
Date:   Fri Jun 29 16:37:08 2018 +0200

    modsign: log module name in the event of an error
    
    Now that we have the load_info struct all initialized (including
    info->name, which contains the name of the module) before
    module_sig_check(), make the load_info struct and hence module name
    available to mod_verify_sig() so that we can log the module name in the
    event of an error.
    
    Signed-off-by: Jessica Yu <jeyu@kernel.org>

diff --git a/kernel/module-internal.h b/kernel/module-internal.h
index 915e123a430f..79c9be2dbbe9 100644
--- a/kernel/module-internal.h
+++ b/kernel/module-internal.h
@@ -9,4 +9,27 @@
  * 2 of the Licence, or (at your option) any later version.
  */
 
-extern int mod_verify_sig(const void *mod, unsigned long *_modlen);
+#include <linux/elf.h>
+#include <asm/module.h>
+
+struct load_info {
+	const char *name;
+	/* pointer to module in temporary copy, freed at end of load_module() */
+	struct module *mod;
+	Elf_Ehdr *hdr;
+	unsigned long len;
+	Elf_Shdr *sechdrs;
+	char *secstrings, *strtab;
+	unsigned long symoffs, stroffs;
+	struct _ddebug *debug;
+	unsigned int num_debug;
+	bool sig_ok;
+#ifdef CONFIG_KALLSYMS
+	unsigned long mod_kallsyms_init_off;
+#endif
+	struct {
+		unsigned int sym, str, mod, vers, info, pcpu;
+	} index;
+};
+
+extern int mod_verify_sig(const void *mod, struct load_info *info);

commit b56e5a17b6b9acd16997960504b9940d0d7984e7
Author: David Howells <dhowells@redhat.com>
Date:   Fri Aug 30 16:07:30 2013 +0100

    KEYS: Separate the kernel signature checking keyring from module signing
    
    Separate the kernel signature checking keyring from module signing so that it
    can be used by code other than the module-signing code.
    
    Signed-off-by: David Howells <dhowells@redhat.com>

diff --git a/kernel/module-internal.h b/kernel/module-internal.h
index 24f9247b7d02..915e123a430f 100644
--- a/kernel/module-internal.h
+++ b/kernel/module-internal.h
@@ -9,6 +9,4 @@
  * 2 of the Licence, or (at your option) any later version.
  */
 
-extern struct key *modsign_keyring;
-
 extern int mod_verify_sig(const void *mod, unsigned long *_modlen);

commit caabe240574aec05b2f5667414ce80f9075c2ba1
Author: David Howells <dhowells@redhat.com>
Date:   Sat Oct 20 01:19:29 2012 +0100

    MODSIGN: Move the magic string to the end of a module and eliminate the search
    
    Emit the magic string that indicates a module has a signature after the
    signature data instead of before it.  This allows module_sig_check() to
    be made simpler and faster by the elimination of the search for the
    magic string.  Instead we just need to do a single memcmp().
    
    This works because at the end of the signature data there is the
    fixed-length signature information block.  This block then falls
    immediately prior to the magic number.
    
    From the contents of the information block, it is trivial to calculate
    the size of the signature data and thus the size of the actual module
    data.
    
    Signed-off-by: David Howells <dhowells@redhat.com>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

diff --git a/kernel/module-internal.h b/kernel/module-internal.h
index 6114a13419bd..24f9247b7d02 100644
--- a/kernel/module-internal.h
+++ b/kernel/module-internal.h
@@ -11,5 +11,4 @@
 
 extern struct key *modsign_keyring;
 
-extern int mod_verify_sig(const void *mod, unsigned long modlen,
-			  const void *sig, unsigned long siglen);
+extern int mod_verify_sig(const void *mod, unsigned long *_modlen);

commit 631cc66eb9eaa7296e303197ff1eb0f55e32b61d
Author: David Howells <dhowells@redhat.com>
Date:   Wed Sep 26 10:09:51 2012 +0100

    MODSIGN: Provide module signing public keys to the kernel
    
    Include a PGP keyring containing the public keys required to perform module
    verification in the kernel image during build and create a special keyring
    during boot which is then populated with keys of crypto type holding the public
    keys found in the PGP keyring.
    
    These can be seen by root:
    
    [root@andromeda ~]# cat /proc/keys
    07ad4ee0 I-----     1 perm 3f010000     0     0 crypto    modsign.0: RSA 87b9b3bd []
    15c7f8c3 I-----     1 perm 1f030000     0     0 keyring   .module_sign: 1/4
    ...
    
    It is probably worth permitting root to invalidate these keys, resulting in
    their removal and preventing further modules from being loaded with that key.
    
    Signed-off-by: David Howells <dhowells@redhat.com>
    Signed-off-by: Rusty Russell <rusty@rustcorp.com.au>

diff --git a/kernel/module-internal.h b/kernel/module-internal.h
index 033c17fd70ef..6114a13419bd 100644
--- a/kernel/module-internal.h
+++ b/kernel/module-internal.h
@@ -9,5 +9,7 @@
  * 2 of the Licence, or (at your option) any later version.
  */
 
+extern struct key *modsign_keyring;
+
 extern int mod_verify_sig(const void *mod, unsigned long modlen,
 			  const void *sig, unsigned long siglen);

commit 106a4ee258d14818467829bf0e12aeae14c16cd7
Author: Rusty Russell <rusty@rustcorp.com.au>
Date:   Wed Sep 26 10:09:40 2012 +0100

    module: signature checking hook
    
    We do a very simple search for a particular string appended to the module
    (which is cache-hot and about to be SHA'd anyway).  There's both a config
    option and a boot parameter which control whether we accept or fail with
    unsigned modules and modules that are signed with an unknown key.
    
    If module signing is enabled, the kernel will be tainted if a module is
    loaded that is unsigned or has a signature for which we don't have the
    key.
    
    (Useful feedback and tweaks by David Howells <dhowells@redhat.com>)
    
    Signed-off-by: Rusty Russell <rusty@rustcorp.com.au>
    Signed-off-by: David Howells <dhowells@redhat.com>
    Signed-off-by: Rusty Russell <rusty@rustcorp.com.au>

diff --git a/kernel/module-internal.h b/kernel/module-internal.h
new file mode 100644
index 000000000000..033c17fd70ef
--- /dev/null
+++ b/kernel/module-internal.h
@@ -0,0 +1,13 @@
+/* Module internals
+ *
+ * Copyright (C) 2012 Red Hat, Inc. All Rights Reserved.
+ * Written by David Howells (dhowells@redhat.com)
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public Licence
+ * as published by the Free Software Foundation; either version
+ * 2 of the Licence, or (at your option) any later version.
+ */
+
+extern int mod_verify_sig(const void *mod, unsigned long modlen,
+			  const void *sig, unsigned long siglen);
