commit 52a65ff5603e685e9b19c2e108b3f0826dc7a86b
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Wed Mar 14 22:15:19 2018 +0100

    genirq: Add missing SPDX identifiers
    
    Add SPDX identifiers to files
    
     - which contain an explicit license boiler plate or reference
    
     - which do not contain a license reference and were not updated in the
       initial SPDX conversion because the license was deduced by the scanners
       via EXPORT_SYMBOL_GPL as GPL2.0 only.
    
    [ tglx: Moved adding identifiers from the patch which removes the
            references/boilerplate ]
    
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Cc: Kate Stewart <kstewart@linuxfoundation.org>
    Cc: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Cc: Philippe Ombredanne <pombredanne@nexb.com>
    Link: https://lkml.kernel.org/r/20180314212030.668321222@linutronix.de

diff --git a/kernel/irq/dummychip.c b/kernel/irq/dummychip.c
index 326a67f2410b..0b0cdf206dc4 100644
--- a/kernel/irq/dummychip.c
+++ b/kernel/irq/dummychip.c
@@ -1,3 +1,4 @@
+// SPDX-License-Identifier: GPL-2.0
 /*
  * Copyright (C) 1992, 1998-2006 Linus Torvalds, Ingo Molnar
  * Copyright (C) 2005-2006, Thomas Gleixner, Russell King

commit 9f61f62544747db5d5c590bfae9dd19f1337e421
Merge: de8d1810fda5 086e8ddb5679
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Fri Jun 5 22:25:01 2015 +0200

    Merge branch 'linus' into irq/core
    
    Get the urgent fixes from upstream to avoid conflicts.

commit de8d1810fda5463ee60ba2937ca68e55a52bd9e7
Author: Geert Uytterhoeven <geert+renesas@glider.be>
Date:   Fri May 22 09:58:49 2015 +0200

    genirq: Set IRQCHIP_SKIP_SET_WAKE for no_irq_chip
    
    If no_irq_chip is used for wake up (e.g. gpio-keys with a simple GPIO
    controller), the following warning is printed on resume from s2ram:
    
        WANING: CPU: 0 PID: 1046 at kernel/irq/manage.c:537 irq_set_irq_wake+0x9c/0xf8()
        Unbalanced IRQ 113 wake disable
    
    This happens because no_irq_chip does not implement
    irq_chip.irq_set_wake(), causing set_irq_wake_real() to return -ENXIO,
    and irq_set_irq_wake() to reset the wake_depth to zero.
    
    Set IRQCHIP_SKIP_SET_WAKE to indicate that irq_chip.irq_set_wake() is
    not implemented.
    
    Cfr. commit 10a50f1ab5f06c9a ("genirq: Set IRQCHIP_SKIP_SET_WAKE flag
    for dummy_irq_chip").
    
    Signed-off-by: Geert Uytterhoeven <geert+renesas@glider.be>
    Cc: Roger Quadros <rogerq@ti.com>
    Cc: Gregory Clement <gregory.clement@free-electrons.com>
    Link: http://lkml.kernel.org/r/1432281529-23325-1-git-send-email-geert%2Brenesas@glider.be
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>

diff --git a/kernel/irq/dummychip.c b/kernel/irq/dummychip.c
index 988dc58e8847..6a5419308c54 100644
--- a/kernel/irq/dummychip.c
+++ b/kernel/irq/dummychip.c
@@ -42,6 +42,7 @@ struct irq_chip no_irq_chip = {
 	.irq_enable	= noop,
 	.irq_disable	= noop,
 	.irq_ack	= ack_bad,
+	.flags		= IRQCHIP_SKIP_SET_WAKE,
 };
 
 /*

commit 10a50f1ab5f06c9a3ee5ece3ec52e607ed53c79f
Author: Roger Quadros <rogerq@ti.com>
Date:   Wed Apr 15 11:14:11 2015 +0300

    genirq: Set IRQCHIP_SKIP_SET_WAKE flag for dummy_irq_chip
    
    Without this system suspend is broken on systems that have
    drivers calling enable/disable_irq_wake() for interrupts based off
    the dummy irq hook. (e.g. drivers/gpio/gpio-pcf857x.c)
    
    Signed-off-by: Roger Quadros <rogerq@ti.com>
    Cc: <cw00.choi@samsung.com>
    Cc: <balbi@ti.com>
    Cc: <tony@atomide.com>
    Cc: Gregory Clement <gregory.clement@free-electrons.com>
    Link: http://lkml.kernel.org/r/552E1DD3.4040106@ti.com
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>

diff --git a/kernel/irq/dummychip.c b/kernel/irq/dummychip.c
index 988dc58e8847..2feb6feca0cc 100644
--- a/kernel/irq/dummychip.c
+++ b/kernel/irq/dummychip.c
@@ -57,5 +57,6 @@ struct irq_chip dummy_irq_chip = {
 	.irq_ack	= noop,
 	.irq_mask	= noop,
 	.irq_unmask	= noop,
+	.flags		= IRQCHIP_SKIP_SET_WAKE,
 };
 EXPORT_SYMBOL_GPL(dummy_irq_chip);

commit 17d83127d4c2b322dd8f217e0ac08c66eb403779
Author: Kuninori Morimoto <kuninori.morimoto.gx@renesas.com>
Date:   Mon Jul 30 22:39:20 2012 -0700

    genirq: Export dummy_irq_chip
    
    Export dummy_irq_chip to modules to allow them to do things such as
    
            irq_set_chip_and_handler(virq,
                                     &dummy_irq_chip,
                                     handle_level_irq);
    This fixes
    
            ERROR: "dummy_irq_chip" [drivers/gpio/gpio-pcf857x.ko] undefined!
    
    when gpio-pcf857x.c is being built as a module.
    
    Signed-off-by: Kuninori Morimoto <kuninori.morimoto.gx@renesas.com>
    Cc: Linus Walleij <linus.walleij@linaro.org>
    Cc: Stephen Rothwell <sfr@canb.auug.org.au>
    Cc: Greg KH <gregkh@linuxfoundation.org>
    Link: http://lkml.kernel.org/r/871ujstrp6.wl%25kuninori.morimoto.gx@renesas.com
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>

diff --git a/kernel/irq/dummychip.c b/kernel/irq/dummychip.c
index b5fcd96c7102..988dc58e8847 100644
--- a/kernel/irq/dummychip.c
+++ b/kernel/irq/dummychip.c
@@ -6,6 +6,7 @@
  */
 #include <linux/interrupt.h>
 #include <linux/irq.h>
+#include <linux/export.h>
 
 #include "internals.h"
 
@@ -57,3 +58,4 @@ struct irq_chip dummy_irq_chip = {
 	.irq_mask	= noop,
 	.irq_unmask	= noop,
 };
+EXPORT_SYMBOL_GPL(dummy_irq_chip);

commit 0c6f8a8b917ad361319c8ace3e9f28e69bfdb4c1
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Mon Mar 28 13:32:20 2011 +0200

    genirq: Remove compat code
    
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>

diff --git a/kernel/irq/dummychip.c b/kernel/irq/dummychip.c
index 20dc5474947e..b5fcd96c7102 100644
--- a/kernel/irq/dummychip.c
+++ b/kernel/irq/dummychip.c
@@ -31,13 +31,6 @@ static unsigned int noop_ret(struct irq_data *data)
 	return 0;
 }
 
-#ifndef CONFIG_GENERIC_HARDIRQS_NO_DEPRECATED
-static void compat_noop(unsigned int irq) { }
-#define END_INIT .end = compat_noop
-#else
-#define END_INIT
-#endif
-
 /*
  * Generic no controller implementation
  */
@@ -48,7 +41,6 @@ struct irq_chip no_irq_chip = {
 	.irq_enable	= noop,
 	.irq_disable	= noop,
 	.irq_ack	= ack_bad,
-	END_INIT
 };
 
 /*
@@ -64,5 +56,4 @@ struct irq_chip dummy_irq_chip = {
 	.irq_ack	= noop,
 	.irq_mask	= noop,
 	.irq_unmask	= noop,
-	END_INIT
 };

commit c0a19ebc018222ffd1dd93af5b53d9efd779c19b
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Tue Oct 12 21:58:27 2010 +0200

    genirq: Fix CONFIG_GENIRQ_NO_DEPRECATED=y build
    
    This option can be set to verify the full conversion to the new chip
    functions. Fix the fallout of the patch rework, so the core code
    compiles and works with it.
    
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>

diff --git a/kernel/irq/dummychip.c b/kernel/irq/dummychip.c
index 918dea9de9ea..20dc5474947e 100644
--- a/kernel/irq/dummychip.c
+++ b/kernel/irq/dummychip.c
@@ -31,7 +31,7 @@ static unsigned int noop_ret(struct irq_data *data)
 	return 0;
 }
 
-#ifndef CONFIG_GENERIC_HARDIRQS_NO_CRUFT
+#ifndef CONFIG_GENERIC_HARDIRQS_NO_DEPRECATED
 static void compat_noop(unsigned int irq) { }
 #define END_INIT .end = compat_noop
 #else

commit 3795de236d67a05994a1a12759db9d4dd9ffc42c
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Wed Sep 22 17:09:43 2010 +0200

    genirq: Distangle kernel/irq/handle.c
    
    kernel/irq/handle.c has become a dumpground for random code in random
    order. Split out the irq descriptor management and the dummy irq_chip
    implementation into separate files. Cleanup the include maze while at
    it.
    
    No code change.
    
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Reviewed-by: Ingo Molnar <mingo@elte.hu>

diff --git a/kernel/irq/dummychip.c b/kernel/irq/dummychip.c
new file mode 100644
index 000000000000..918dea9de9ea
--- /dev/null
+++ b/kernel/irq/dummychip.c
@@ -0,0 +1,68 @@
+/*
+ * Copyright (C) 1992, 1998-2006 Linus Torvalds, Ingo Molnar
+ * Copyright (C) 2005-2006, Thomas Gleixner, Russell King
+ *
+ * This file contains the dummy interrupt chip implementation
+ */
+#include <linux/interrupt.h>
+#include <linux/irq.h>
+
+#include "internals.h"
+
+/*
+ * What should we do if we get a hw irq event on an illegal vector?
+ * Each architecture has to answer this themself.
+ */
+static void ack_bad(struct irq_data *data)
+{
+	struct irq_desc *desc = irq_data_to_desc(data);
+
+	print_irq_desc(data->irq, desc);
+	ack_bad_irq(data->irq);
+}
+
+/*
+ * NOP functions
+ */
+static void noop(struct irq_data *data) { }
+
+static unsigned int noop_ret(struct irq_data *data)
+{
+	return 0;
+}
+
+#ifndef CONFIG_GENERIC_HARDIRQS_NO_CRUFT
+static void compat_noop(unsigned int irq) { }
+#define END_INIT .end = compat_noop
+#else
+#define END_INIT
+#endif
+
+/*
+ * Generic no controller implementation
+ */
+struct irq_chip no_irq_chip = {
+	.name		= "none",
+	.irq_startup	= noop_ret,
+	.irq_shutdown	= noop,
+	.irq_enable	= noop,
+	.irq_disable	= noop,
+	.irq_ack	= ack_bad,
+	END_INIT
+};
+
+/*
+ * Generic dummy implementation which can be used for
+ * real dumb interrupt sources
+ */
+struct irq_chip dummy_irq_chip = {
+	.name		= "dummy",
+	.irq_startup	= noop_ret,
+	.irq_shutdown	= noop,
+	.irq_enable	= noop,
+	.irq_disable	= noop,
+	.irq_ack	= noop,
+	.irq_mask	= noop,
+	.irq_unmask	= noop,
+	END_INIT
+};
