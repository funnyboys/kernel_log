commit 2d2682512f0faf4d09a696184bf3c0bb6838baca
Author: Palmer Dabbelt <palmerdabbelt@google.com>
Date:   Tue Apr 14 13:43:24 2020 +0900

    riscv: Allow device trees to be built into the kernel
    
    Some systems don't provide a useful device tree to the kernel on boot.
    Chasing around bootloaders for these systems is a headache, so instead
    le't's just keep a device tree table in the kernel, keyed by the SOC's
    unique identifier, that contains the relevant DTB.
    
    This is only implemented for M mode right now. While we could implement
    this via the SBI calls that allow access to these identifiers, we don't
    have any systems that need this right now.
    
    Signed-off-by: Palmer Dabbelt <palmerdabbelt@google.com>

diff --git a/arch/riscv/include/asm/soc.h b/arch/riscv/include/asm/soc.h
index 7cec1968c8b4..136a442ef876 100644
--- a/arch/riscv/include/asm/soc.h
+++ b/arch/riscv/include/asm/soc.h
@@ -1,6 +1,7 @@
 /* SPDX-License-Identifier: GPL-2.0-or-later */
 /*
  * Copyright (C) 2020 Western Digital Corporation or its affiliates.
+ * Copyright (C) 2020 Google, Inc
  */
 
 #ifndef _ASM_RISCV_SOC_H
@@ -20,4 +21,42 @@ void soc_early_init(void);
 extern unsigned long __soc_early_init_table_start;
 extern unsigned long __soc_early_init_table_end;
 
+/*
+ * Allows Linux to provide a device tree, which is necessary for SOCs that
+ * don't provide a useful one on their own.
+ */
+struct soc_builtin_dtb {
+	unsigned long vendor_id;
+	unsigned long arch_id;
+	unsigned long imp_id;
+	void *(*dtb_func)(void);
+};
+
+/*
+ * The argument name must specify a valid DTS file name without the dts
+ * extension.
+ */
+#define SOC_BUILTIN_DTB_DECLARE(name, vendor, arch, impl)		\
+	extern void *__dtb_##name##_begin;				\
+									\
+	static __init __used						\
+	void *__soc_builtin_dtb_f__##name(void)				\
+	{								\
+		return (void *)&__dtb_##name##_begin;			\
+	}								\
+									\
+	static const struct soc_builtin_dtb __soc_builtin_dtb__##name	\
+		__used __section(__soc_builtin_dtb_table) =		\
+	{								\
+		.vendor_id = vendor,					\
+		.arch_id   = arch,					\
+		.imp_id    = impl,					\
+		.dtb_func  = __soc_builtin_dtb_f__##name,		\
+	}
+
+extern unsigned long __soc_builtin_dtb_table_start;
+extern unsigned long __soc_builtin_dtb_table_end;
+
+void *soc_lookup_builtin_dtb(void);
+
 #endif

commit 335b139057ef79dbede01dea6e8c3f47c2b88802
Author: Damien Le Moal <damien.lemoal@wdc.com>
Date:   Mon Mar 16 09:47:38 2020 +0900

    riscv: Add SOC early init support
    
    Add a mechanism for early SoC initialization for platforms that need
    additional hardware initialization not possible through the regular
    device tree and drivers mechanism. With this, a SoC specific
    initialization function can be called very early, before DTB parsing
    is done by parse_dtb() in Linux RISC-V kernel setup code.
    
    This can be very useful for early hardware initialization for No-MMU
    kernels booted directly in M-mode because it is quite likely that no
    other booting stage exist prior to the No-MMU kernel.
    
    Example use of a SoC early initialization is as follows:
    
    static void vendor_abc_early_init(const void *fdt)
    {
            /*
             * some early init code here that can use simple matches
             * against the flat device tree file.
             */
    }
    SOC_EARLY_INIT_DECLARE("vendor,abc", abc_early_init);
    
    This early initialization function is executed only if the flat device
    tree for the board has a 'compatible = "vendor,abc"' entry;
    
    Signed-off-by: Damien Le Moal <damien.lemoal@wdc.com>
    Signed-off-by: Anup Patel <anup.patel@wdc.com>
    Signed-off-by: Palmer Dabbelt <palmerdabbelt@google.com>

diff --git a/arch/riscv/include/asm/soc.h b/arch/riscv/include/asm/soc.h
new file mode 100644
index 000000000000..7cec1968c8b4
--- /dev/null
+++ b/arch/riscv/include/asm/soc.h
@@ -0,0 +1,23 @@
+/* SPDX-License-Identifier: GPL-2.0-or-later */
+/*
+ * Copyright (C) 2020 Western Digital Corporation or its affiliates.
+ */
+
+#ifndef _ASM_RISCV_SOC_H
+#define _ASM_RISCV_SOC_H
+
+#include <linux/of.h>
+#include <linux/linkage.h>
+#include <linux/types.h>
+
+#define SOC_EARLY_INIT_DECLARE(name, compat, fn)			\
+	static const struct of_device_id __soc_early_init__##name	\
+		__used __section(__soc_early_init_table)		\
+		 = { .compatible = compat, .data = fn  }
+
+void soc_early_init(void);
+
+extern unsigned long __soc_early_init_table_start;
+extern unsigned long __soc_early_init_table_end;
+
+#endif
