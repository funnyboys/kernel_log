commit 1d5c17e470286b8211e8a18d0f85ae89dec4e8d8
Author: Atish Patra <atish.patra@wdc.com>
Date:   Tue Oct 8 18:06:37 2019 -0700

    RISC-V: Typo fixes in image header and documentation.
    
    There are some typos in boot image header and riscv boot documentation.
    
    Fix the typos.
    
    Signed-off-by: Atish Patra <atish.patra@wdc.com>
    Reviewed-by: Palmer Dabbelt <palmerdabbelt@google.com>
    Link: https://lore.kernel.org/r/20191009010637.9955-1-atish.patra@wdc.com
    Signed-off-by: Jonathan Corbet <corbet@lwn.net>

diff --git a/arch/riscv/include/asm/image.h b/arch/riscv/include/asm/image.h
index 7b0f92ba0acc..e0b319af3681 100644
--- a/arch/riscv/include/asm/image.h
+++ b/arch/riscv/include/asm/image.h
@@ -42,7 +42,7 @@
  * @res2:		reserved
  * @magic:		Magic number (RISC-V specific; deprecated)
  * @magic2:		Magic number 2 (to match the ARM64 'magic' field pos)
- * @res4:		reserved (will be used for PE COFF offset)
+ * @res3:		reserved (will be used for PE COFF offset)
  *
  * The intention is for this header format to be shared between multiple
  * architectures to avoid a proliferation of image header formats.
@@ -59,7 +59,7 @@ struct riscv_image_header {
 	u64 res2;
 	u64 magic;
 	u32 magic2;
-	u32 res4;
+	u32 res3;
 };
 #endif /* __ASSEMBLY__ */
 #endif /* _ASM_RISCV_IMAGE_H */

commit 6b57ba8ed48a3ee3d6b53294ccbf02b8cb83c604
Author: Zong Li <zong.li@sifive.com>
Date:   Mon Oct 28 00:42:47 2019 -0700

    riscv: clean up the macro format in each header file
    
    There are many different formats in each header now, such as
    _ASM_XXX_H, __ASM_XXX_H, _ASM_RISCV_XXX_H, RISCV_XXX_H, etc., This patch
    tries to unify the format by using _ASM_RISCV_XXX_H, because the most
    header use it now. This patch also adds the conditional to the headers
    if they lost it.
    
    Signed-off-by: Zong Li <zong.li@sifive.com>
    Signed-off-by: Paul Walmsley <paul.walmsley@sifive.com>

diff --git a/arch/riscv/include/asm/image.h b/arch/riscv/include/asm/image.h
index 344db5244547..7b0f92ba0acc 100644
--- a/arch/riscv/include/asm/image.h
+++ b/arch/riscv/include/asm/image.h
@@ -1,7 +1,7 @@
 /* SPDX-License-Identifier: GPL-2.0 */
 
-#ifndef __ASM_IMAGE_H
-#define __ASM_IMAGE_H
+#ifndef _ASM_RISCV_IMAGE_H
+#define _ASM_RISCV_IMAGE_H
 
 #define RISCV_IMAGE_MAGIC	"RISCV\0\0\0"
 #define RISCV_IMAGE_MAGIC2	"RSC\x05"
@@ -62,4 +62,4 @@ struct riscv_image_header {
 	u32 res4;
 };
 #endif /* __ASSEMBLY__ */
-#endif /* __ASM_IMAGE_H */
+#endif /* _ASM_RISCV_IMAGE_H */

commit 474efecb65dceb15f793b6e2f2b226e952f0f8e9
Author: Paul Walmsley <paul.walmsley@sifive.com>
Date:   Fri Sep 13 18:35:50 2019 -0700

    riscv: modify the Image header to improve compatibility with the ARM64 header
    
    Part of the intention during the definition of the RISC-V kernel image
    header was to lay the groundwork for a future merge with the ARM64
    image header.  One error during my original review was not noticing
    that the RISC-V header's "magic" field was at a different size and
    position than the ARM64's "magic" field.  If the existing ARM64 Image
    header parsing code were to attempt to parse an existing RISC-V kernel
    image header format, it would see a magic number 0.  This is
    undesirable, since it's our intention to align as closely as possible
    with the ARM64 header format.  Another problem was that the original
    "res3" field was not being initialized correctly to zero.
    
    Address these issues by creating a 32-bit "magic2" field in the RISC-V
    header which matches the ARM64 "magic" field.  RISC-V binaries will
    store "RSC\x05" in this field.  The intention is that the use of the
    existing 64-bit "magic" field in the RISC-V header will be deprecated
    over time.  Increment the minor version number of the file format to
    indicate this change, and update the documentation accordingly.  Fix
    the assembler directives in head.S to ensure that reserved fields are
    properly zero-initialized.
    
    Signed-off-by: Paul Walmsley <paul.walmsley@sifive.com>
    Reported-by: Palmer Dabbelt <palmer@sifive.com>
    Reviewed-by: Palmer Dabbelt <palmer@sifive.com>
    Cc: Atish Patra <atish.patra@wdc.com>
    Cc: Karsten Merker <merker@debian.org>
    Link: https://lore.kernel.org/linux-riscv/194c2f10c9806720623430dbf0cc59a965e50448.camel@wdc.com/T/#u
    Link: https://lore.kernel.org/linux-riscv/mhng-755b14c4-8f35-4079-a7ff-e421fd1b02bc@palmer-si-x1e/T/#t

diff --git a/arch/riscv/include/asm/image.h b/arch/riscv/include/asm/image.h
index ef28e106f247..344db5244547 100644
--- a/arch/riscv/include/asm/image.h
+++ b/arch/riscv/include/asm/image.h
@@ -3,7 +3,8 @@
 #ifndef __ASM_IMAGE_H
 #define __ASM_IMAGE_H
 
-#define RISCV_IMAGE_MAGIC	"RISCV"
+#define RISCV_IMAGE_MAGIC	"RISCV\0\0\0"
+#define RISCV_IMAGE_MAGIC2	"RSC\x05"
 
 #define RISCV_IMAGE_FLAG_BE_SHIFT	0
 #define RISCV_IMAGE_FLAG_BE_MASK	0x1
@@ -23,7 +24,7 @@
 #define __HEAD_FLAGS		(__HEAD_FLAG(BE))
 
 #define RISCV_HEADER_VERSION_MAJOR 0
-#define RISCV_HEADER_VERSION_MINOR 1
+#define RISCV_HEADER_VERSION_MINOR 2
 
 #define RISCV_HEADER_VERSION (RISCV_HEADER_VERSION_MAJOR << 16 | \
 			      RISCV_HEADER_VERSION_MINOR)
@@ -39,9 +40,8 @@
  * @version:		version
  * @res1:		reserved
  * @res2:		reserved
- * @magic:		Magic number
- * @res3:		reserved (will be used for additional RISC-V specific
- *			header)
+ * @magic:		Magic number (RISC-V specific; deprecated)
+ * @magic2:		Magic number 2 (to match the ARM64 'magic' field pos)
  * @res4:		reserved (will be used for PE COFF offset)
  *
  * The intention is for this header format to be shared between multiple
@@ -58,7 +58,7 @@ struct riscv_image_header {
 	u32 res1;
 	u64 res2;
 	u64 magic;
-	u32 res3;
+	u32 magic2;
 	u32 res4;
 };
 #endif /* __ASSEMBLY__ */

commit 0f327f2aaad6a87356cbccfa390d4d3b64d0d3b6
Author: Atish Patra <atish.patra@wdc.com>
Date:   Thu Jun 6 16:08:00 2019 -0700

    RISC-V: Add an Image header that boot loader can parse.
    
    Currently, the last stage boot loaders such as U-Boot can accept only
    uImage which is an unnecessary additional step in automating boot
    process.
    
    Add an image header that boot loader understands and boot Linux from
    flat Image directly.
    
    This header is based on ARM64 boot image header and provides an
    opportunity to combine both ARM64 & RISC-V image headers in future.
    
    Also make sure that PE/COFF header can co-exist in the same image so
    that EFI stub can be supported for RISC-V in future. EFI specification
    needs PE/COFF image header in the beginning of the kernel image in order
    to load it as an EFI application. In order to support EFI stub, code0
    should be replaced with "MZ" magic string and res4(at offset 0x3c)
    should point to the rest of the PE/COFF header (which will be added
    during EFI support).
    
    Tested on both QEMU and HiFive Unleashed using OpenSBI + U-Boot + Linux.
    
    Signed-off-by: Atish Patra <atish.patra@wdc.com>
    Reviewed-by: Karsten Merker <merker@debian.org>
    Tested-by: Karsten Merker <merker@debian.org> (QEMU+OpenSBI+U-Boot)
    Tested-by: Kevin Hilman <khilman@baylibre.com> (OpenSBI + U-Boot + Linux)
    [paul.walmsley@sifive.com: fixed whitespace in boot-image-header.txt;
     converted structure comment to kernel-doc format and added some detail]
    Signed-off-by: Paul Walmsley <paul.walmsley@sifive.com>

diff --git a/arch/riscv/include/asm/image.h b/arch/riscv/include/asm/image.h
new file mode 100644
index 000000000000..ef28e106f247
--- /dev/null
+++ b/arch/riscv/include/asm/image.h
@@ -0,0 +1,65 @@
+/* SPDX-License-Identifier: GPL-2.0 */
+
+#ifndef __ASM_IMAGE_H
+#define __ASM_IMAGE_H
+
+#define RISCV_IMAGE_MAGIC	"RISCV"
+
+#define RISCV_IMAGE_FLAG_BE_SHIFT	0
+#define RISCV_IMAGE_FLAG_BE_MASK	0x1
+
+#define RISCV_IMAGE_FLAG_LE		0
+#define RISCV_IMAGE_FLAG_BE		1
+
+#ifdef CONFIG_CPU_BIG_ENDIAN
+#error conversion of header fields to LE not yet implemented
+#else
+#define __HEAD_FLAG_BE		RISCV_IMAGE_FLAG_LE
+#endif
+
+#define __HEAD_FLAG(field)	(__HEAD_FLAG_##field << \
+				RISCV_IMAGE_FLAG_##field##_SHIFT)
+
+#define __HEAD_FLAGS		(__HEAD_FLAG(BE))
+
+#define RISCV_HEADER_VERSION_MAJOR 0
+#define RISCV_HEADER_VERSION_MINOR 1
+
+#define RISCV_HEADER_VERSION (RISCV_HEADER_VERSION_MAJOR << 16 | \
+			      RISCV_HEADER_VERSION_MINOR)
+
+#ifndef __ASSEMBLY__
+/**
+ * struct riscv_image_header - riscv kernel image header
+ * @code0:		Executable code
+ * @code1:		Executable code
+ * @text_offset:	Image load offset (little endian)
+ * @image_size:		Effective Image size (little endian)
+ * @flags:		kernel flags (little endian)
+ * @version:		version
+ * @res1:		reserved
+ * @res2:		reserved
+ * @magic:		Magic number
+ * @res3:		reserved (will be used for additional RISC-V specific
+ *			header)
+ * @res4:		reserved (will be used for PE COFF offset)
+ *
+ * The intention is for this header format to be shared between multiple
+ * architectures to avoid a proliferation of image header formats.
+ */
+
+struct riscv_image_header {
+	u32 code0;
+	u32 code1;
+	u64 text_offset;
+	u64 image_size;
+	u64 flags;
+	u32 version;
+	u32 res1;
+	u64 res2;
+	u64 magic;
+	u32 res3;
+	u32 res4;
+};
+#endif /* __ASSEMBLY__ */
+#endif /* __ASM_IMAGE_H */
