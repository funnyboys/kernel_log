commit 6b57ba8ed48a3ee3d6b53294ccbf02b8cb83c604
Author: Zong Li <zong.li@sifive.com>
Date:   Mon Oct 28 00:42:47 2019 -0700

    riscv: clean up the macro format in each header file
    
    There are many different formats in each header now, such as
    _ASM_XXX_H, __ASM_XXX_H, _ASM_RISCV_XXX_H, RISCV_XXX_H, etc., This patch
    tries to unify the format by using _ASM_RISCV_XXX_H, because the most
    header use it now. This patch also adds the conditional to the headers
    if they lost it.
    
    Signed-off-by: Zong Li <zong.li@sifive.com>
    Signed-off-by: Paul Walmsley <paul.walmsley@sifive.com>

diff --git a/arch/riscv/include/asm/ftrace.h b/arch/riscv/include/asm/ftrace.h
index c6dcc5291f97..ace8a6e2d11d 100644
--- a/arch/riscv/include/asm/ftrace.h
+++ b/arch/riscv/include/asm/ftrace.h
@@ -1,6 +1,9 @@
 /* SPDX-License-Identifier: GPL-2.0 */
 /* Copyright (C) 2017 Andes Technology Corporation */
 
+#ifndef _ASM_RISCV_FTRACE_H
+#define _ASM_RISCV_FTRACE_H
+
 /*
  * The graph frame test is not possible if CONFIG_FRAME_POINTER is not enabled.
  * Check arch/riscv/kernel/mcount.S for detail.
@@ -64,3 +67,5 @@ do {									\
  */
 #define MCOUNT_INSN_SIZE 8
 #endif
+
+#endif /* _ASM_RISCV_FTRACE_H */

commit aea4c671fb985e6a9ffc365c43ea6f5e0d737fea
Author: Alan Kao <alankao@andestech.com>
Date:   Tue Feb 13 13:13:20 2018 +0800

    riscv/ftrace: Add DYNAMIC_FTRACE_WITH_REGS support
    
    Cc: Greentime Hu <greentime@andestech.com>
    Signed-off-by: Alan Kao <alankao@andestech.com>
    Signed-off-by: Palmer Dabbelt <palmer@sifive.com>

diff --git a/arch/riscv/include/asm/ftrace.h b/arch/riscv/include/asm/ftrace.h
index fedadc40e358..c6dcc5291f97 100644
--- a/arch/riscv/include/asm/ftrace.h
+++ b/arch/riscv/include/asm/ftrace.h
@@ -8,6 +8,7 @@
 #if defined(CONFIG_FUNCTION_GRAPH_TRACER) && defined(CONFIG_FRAME_POINTER)
 #define HAVE_FUNCTION_GRAPH_FP_TEST
 #endif
+#define HAVE_FUNCTION_GRAPH_RET_ADDR_PTR
 
 #define ARCH_SUPPORTS_FTRACE_OPS 1
 #ifndef __ASSEMBLY__

commit 71e736a7d65551e49136c1efc4759e5902729cc2
Author: Alan Kao <alankao@andestech.com>
Date:   Tue Feb 13 13:13:19 2018 +0800

    riscv/ftrace: Add ARCH_SUPPORTS_FTRACE_OPS support
    
    Cc: Greentime Hu <greentime@andestech.com>
    Signed-off-by: Alan Kao <alankao@andestech.com>
    Signed-off-by: Palmer Dabbelt <palmer@sifive.com>

diff --git a/arch/riscv/include/asm/ftrace.h b/arch/riscv/include/asm/ftrace.h
index 078743aacfd3..fedadc40e358 100644
--- a/arch/riscv/include/asm/ftrace.h
+++ b/arch/riscv/include/asm/ftrace.h
@@ -9,6 +9,7 @@
 #define HAVE_FUNCTION_GRAPH_FP_TEST
 #endif
 
+#define ARCH_SUPPORTS_FTRACE_OPS 1
 #ifndef __ASSEMBLY__
 void _mcount(void);
 static inline unsigned long ftrace_call_adjust(unsigned long addr)

commit c15ac4fd60d5ffdb151bb2c7805f377fd7f90363
Author: Alan Kao <alankao@andestech.com>
Date:   Tue Feb 13 13:13:17 2018 +0800

    riscv/ftrace: Add dynamic function tracer support
    
    We now have dynamic ftrace with the following added items:
    
    * ftrace_make_call, ftrace_make_nop (in kernel/ftrace.c)
      The two functions turn each recorded call site of filtered functions
      into a call to ftrace_caller or nops
    
    * ftracce_update_ftrace_func (in kernel/ftrace.c)
      turns the nops at ftrace_call into a call to a generic entry for
      function tracers.
    
    * ftrace_caller (in kernel/mcount-dyn.S)
      The entry where each _mcount call sites calls to once they are
      filtered to be traced.
    
    Also, this patch fixes the semantic problems in mcount.S, which will be
    treated as only a reference implementation once we have the dynamic
    ftrace.
    
    Cc: Greentime Hu <greentime@andestech.com>
    Signed-off-by: Alan Kao <alankao@andestech.com>
    Signed-off-by: Palmer Dabbelt <palmer@sifive.com>

diff --git a/arch/riscv/include/asm/ftrace.h b/arch/riscv/include/asm/ftrace.h
index 66d4175eb13e..078743aacfd3 100644
--- a/arch/riscv/include/asm/ftrace.h
+++ b/arch/riscv/include/asm/ftrace.h
@@ -8,3 +8,57 @@
 #if defined(CONFIG_FUNCTION_GRAPH_TRACER) && defined(CONFIG_FRAME_POINTER)
 #define HAVE_FUNCTION_GRAPH_FP_TEST
 #endif
+
+#ifndef __ASSEMBLY__
+void _mcount(void);
+static inline unsigned long ftrace_call_adjust(unsigned long addr)
+{
+	return addr;
+}
+
+struct dyn_arch_ftrace {
+};
+#endif
+
+#ifdef CONFIG_DYNAMIC_FTRACE
+/*
+ * A general call in RISC-V is a pair of insts:
+ * 1) auipc: setting high-20 pc-related bits to ra register
+ * 2) jalr: setting low-12 offset to ra, jump to ra, and set ra to
+ *          return address (original pc + 4)
+ *
+ * Dynamic ftrace generates probes to call sites, so we must deal with
+ * both auipc and jalr at the same time.
+ */
+
+#define MCOUNT_ADDR		((unsigned long)_mcount)
+#define JALR_SIGN_MASK		(0x00000800)
+#define JALR_OFFSET_MASK	(0x00000fff)
+#define AUIPC_OFFSET_MASK	(0xfffff000)
+#define AUIPC_PAD		(0x00001000)
+#define JALR_SHIFT		20
+#define JALR_BASIC		(0x000080e7)
+#define AUIPC_BASIC		(0x00000097)
+#define NOP4			(0x00000013)
+
+#define make_call(caller, callee, call)					\
+do {									\
+	call[0] = to_auipc_insn((unsigned int)((unsigned long)callee -	\
+				(unsigned long)caller));		\
+	call[1] = to_jalr_insn((unsigned int)((unsigned long)callee -	\
+			       (unsigned long)caller));			\
+} while (0)
+
+#define to_jalr_insn(offset)						\
+	(((offset & JALR_OFFSET_MASK) << JALR_SHIFT) | JALR_BASIC)
+
+#define to_auipc_insn(offset)						\
+	((offset & JALR_SIGN_MASK) ?					\
+	(((offset & AUIPC_OFFSET_MASK) + AUIPC_PAD) | AUIPC_BASIC) :	\
+	((offset & AUIPC_OFFSET_MASK) | AUIPC_BASIC))
+
+/*
+ * Let auipc+jalr be the basic *mcount unit*, so we make it 8 bytes here.
+ */
+#define MCOUNT_INSN_SIZE 8
+#endif

commit 10626c32e3827bca560217966f5bd586c4e91584
Author: Alan Kao <nonerkao@gmail.com>
Date:   Mon Dec 18 17:52:48 2017 +0800

    riscv/ftrace: Add basic support
    
    This patch contains basic ftrace support for RV64I platform.
    Specifically, function tracer (HAVE_FUNCTION_TRACER), function graph
    tracer (HAVE_FUNCTION_GRAPH_TRACER), and a frame pointer test
    (HAVE_FUNCTION_GRAPH_FP_TEST) are implemented following the
    instructions in Documentation/trace/ftrace-design.txt.
    
    Note that the functions in both ftrace.c and setup.c should not be
    hooked with the compiler's -pg option: to prevent infinite self-
    referencing for the former, and to ignore early setup stuff for the
    latter.
    
    Signed-off-by: Alan Kao <alankao@andestech.com>
    Signed-off-by: Palmer Dabbelt <palmer@sifive.com>

diff --git a/arch/riscv/include/asm/ftrace.h b/arch/riscv/include/asm/ftrace.h
new file mode 100644
index 000000000000..66d4175eb13e
--- /dev/null
+++ b/arch/riscv/include/asm/ftrace.h
@@ -0,0 +1,10 @@
+/* SPDX-License-Identifier: GPL-2.0 */
+/* Copyright (C) 2017 Andes Technology Corporation */
+
+/*
+ * The graph frame test is not possible if CONFIG_FRAME_POINTER is not enabled.
+ * Check arch/riscv/kernel/mcount.S for detail.
+ */
+#if defined(CONFIG_FUNCTION_GRAPH_TRACER) && defined(CONFIG_FRAME_POINTER)
+#define HAVE_FUNCTION_GRAPH_FP_TEST
+#endif
