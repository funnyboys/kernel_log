commit 8ad8b72721d0f07fa02dbe71f901743f9c71c8e6
Author: Nick Hu <nickhu@andestech.com>
Date:   Mon Jan 6 10:38:32 2020 -0800

    riscv: Add KASAN support
    
    This patch ports the feature Kernel Address SANitizer (KASAN).
    
    Note: The start address of shadow memory is at the beginning of kernel
    space, which is 2^64 - (2^39 / 2) in SV39. The size of the kernel space is
    2^38 bytes so the size of shadow memory should be 2^38 / 8. Thus, the
    shadow memory would not overlap with the fixmap area.
    
    There are currently two limitations in this port,
    
    1. RV64 only: KASAN need large address space for extra shadow memory
    region.
    
    2. KASAN can't debug the modules since the modules are allocated in VMALLOC
    area. We mapped the shadow memory, which corresponding to VMALLOC area, to
    the kasan_early_shadow_page because we don't have enough physical space for
    all the shadow memory corresponding to VMALLOC area.
    
    Signed-off-by: Nick Hu <nickhu@andestech.com>
    Reported-by: Greentime Hu <green.hu@gmail.com>
    Signed-off-by: Palmer Dabbelt <palmerdabbelt@google.com>

diff --git a/arch/riscv/kernel/riscv_ksyms.c b/arch/riscv/kernel/riscv_ksyms.c
index 2a02b7eebee0..450492e1cb4e 100644
--- a/arch/riscv/kernel/riscv_ksyms.c
+++ b/arch/riscv/kernel/riscv_ksyms.c
@@ -11,3 +11,5 @@
  */
 EXPORT_SYMBOL(memset);
 EXPORT_SYMBOL(memcpy);
+EXPORT_SYMBOL(__memset);
+EXPORT_SYMBOL(__memcpy);

commit 4d47ce158efb7b145c680e79cd33e3c6fd773de4
Author: Luc Van Oostenryck <luc.vanoostenryck@gmail.com>
Date:   Sun Dec 22 10:26:04 2019 +0100

    riscv: fix compile failure with EXPORT_SYMBOL() & !MMU
    
    When support for !MMU was added, the declaration of
    __asm_copy_to_user() & __asm_copy_from_user() were #ifdefed
    out hence their EXPORT_SYMBOL() give an error message like:
      .../riscv_ksyms.c:13:15: error: '__asm_copy_to_user' undeclared here
      .../riscv_ksyms.c:14:15: error: '__asm_copy_from_user' undeclared here
    
    Since these symbols are not defined with !MMU it's wrong to export them.
    Same for __clear_user() (even though this one is also declared in
    include/asm-generic/uaccess.h and thus doesn't give an error message).
    
    Fix this by doing the EXPORT_SYMBOL() directly where these symbols
    are defined: inside lib/uaccess.S itself.
    
    Fixes: 6bd33e1ece52 ("riscv: fix compile failure with EXPORT_SYMBOL() & !MMU")
    Reported-by: kbuild test robot <lkp@intel.com>
    Cc: Christoph Hellwig <hch@lst.de>
    Cc: Palmer Dabbelt <palmer@dabbelt.com>
    Cc: Paul Walmsley <paul.walmsley@sifive.com>
    Signed-off-by: Luc Van Oostenryck <luc.vanoostenryck@gmail.com>
    Signed-off-by: Paul Walmsley <paul.walmsley@sifive.com>

diff --git a/arch/riscv/kernel/riscv_ksyms.c b/arch/riscv/kernel/riscv_ksyms.c
index 4800cf703186..2a02b7eebee0 100644
--- a/arch/riscv/kernel/riscv_ksyms.c
+++ b/arch/riscv/kernel/riscv_ksyms.c
@@ -9,8 +9,5 @@
 /*
  * Assembly functions that may be used (directly or indirectly) by modules
  */
-EXPORT_SYMBOL(__clear_user);
-EXPORT_SYMBOL(__asm_copy_to_user);
-EXPORT_SYMBOL(__asm_copy_from_user);
 EXPORT_SYMBOL(memset);
 EXPORT_SYMBOL(memcpy);

commit d2912cb15bdda8ba4a5dd73396ad62641af2f520
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Tue Jun 4 10:11:33 2019 +0200

    treewide: Replace GPLv2 boilerplate/reference with SPDX - rule 500
    
    Based on 2 normalized pattern(s):
    
      this program is free software you can redistribute it and or modify
      it under the terms of the gnu general public license version 2 as
      published by the free software foundation
    
      this program is free software you can redistribute it and or modify
      it under the terms of the gnu general public license version 2 as
      published by the free software foundation #
    
    extracted by the scancode license scanner the SPDX license identifier
    
      GPL-2.0-only
    
    has been chosen to replace the boilerplate/reference in 4122 file(s).
    
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Reviewed-by: Enrico Weigelt <info@metux.net>
    Reviewed-by: Kate Stewart <kstewart@linuxfoundation.org>
    Reviewed-by: Allison Randal <allison@lohutok.net>
    Cc: linux-spdx@vger.kernel.org
    Link: https://lkml.kernel.org/r/20190604081206.933168790@linutronix.de
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/arch/riscv/kernel/riscv_ksyms.c b/arch/riscv/kernel/riscv_ksyms.c
index f247d6d2137c..4800cf703186 100644
--- a/arch/riscv/kernel/riscv_ksyms.c
+++ b/arch/riscv/kernel/riscv_ksyms.c
@@ -1,9 +1,6 @@
+// SPDX-License-Identifier: GPL-2.0-only
 /*
  * Copyright (C) 2017 Zihao Yu
- *
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License version 2 as
- * published by the Free Software Foundation.
  */
 
 #include <linux/export.h>

commit 86406d51d3600bfa2b6f86e1e6bfce712bec0d53
Author: Luc Van Oostenryck <luc.vanoostenryck@gmail.com>
Date:   Sat Jun 9 02:33:51 2018 +0200

    riscv: split the declaration of __copy_user
    
    We use a single __copy_user assembly function to copy memory both from
    and to userspace. While this works, it triggers sparse errors because
    we're implicitly casting between the kernel and user address spaces by
    calling __copy_user.
    
    This patch splits the C declaration into a pair of functions,
    __asm_copy_{to,from}_user, that have sane semantics WRT __user. This
    split make things fine from sparse's point of view. The assembly
    implementation keeps a single definition but add a double ENTRY() for it,
    one for __asm_copy_to_user and another one for __asm_copy_from_user.
    The result is a spare-safe implementation that pays no performance
    or code size penalty.
    
    Signed-off-by: Luc Van Oostenryck <luc.vanoostenryck@gmail.com>
    Signed-off-by: Palmer Dabbelt <palmer@sifive.com>

diff --git a/arch/riscv/kernel/riscv_ksyms.c b/arch/riscv/kernel/riscv_ksyms.c
index 551734248748..f247d6d2137c 100644
--- a/arch/riscv/kernel/riscv_ksyms.c
+++ b/arch/riscv/kernel/riscv_ksyms.c
@@ -13,6 +13,7 @@
  * Assembly functions that may be used (directly or indirectly) by modules
  */
 EXPORT_SYMBOL(__clear_user);
-EXPORT_SYMBOL(__copy_user);
+EXPORT_SYMBOL(__asm_copy_to_user);
+EXPORT_SYMBOL(__asm_copy_from_user);
 EXPORT_SYMBOL(memset);
 EXPORT_SYMBOL(memcpy);

commit 24948b7ec0f31d36dc900088b140c4f9551b6f56
Author: Olof Johansson <olof@lixom.net>
Date:   Wed Nov 29 17:55:16 2017 -0800

    RISC-V: Export some expected symbols for modules
    
    These are the ones needed by current allmodconfig, so add them instead
    of everything other architectures are exporting -- the rest can be
    added on demand later if needed.
    
    Signed-off-by: Olof Johansson <olof@lixom.net>
    Signed-off-by: Palmer Dabbelt <palmer@sifive.com>

diff --git a/arch/riscv/kernel/riscv_ksyms.c b/arch/riscv/kernel/riscv_ksyms.c
index 23cc81ec9e94..551734248748 100644
--- a/arch/riscv/kernel/riscv_ksyms.c
+++ b/arch/riscv/kernel/riscv_ksyms.c
@@ -12,4 +12,7 @@
 /*
  * Assembly functions that may be used (directly or indirectly) by modules
  */
+EXPORT_SYMBOL(__clear_user);
 EXPORT_SYMBOL(__copy_user);
+EXPORT_SYMBOL(memset);
+EXPORT_SYMBOL(memcpy);

commit e2c0cdfba7f69925afc92b20cd9835d81e11a4f1
Author: Palmer Dabbelt <palmer@dabbelt.com>
Date:   Mon Jul 10 18:07:09 2017 -0700

    RISC-V: User-facing API
    
    This patch contains code that is in some way visible to the user:
    including via system calls, the VDSO, module loading and signal
    handling.  It also contains some generic code that is ABI visible.
    
    Signed-off-by: Palmer Dabbelt <palmer@dabbelt.com>

diff --git a/arch/riscv/kernel/riscv_ksyms.c b/arch/riscv/kernel/riscv_ksyms.c
new file mode 100644
index 000000000000..23cc81ec9e94
--- /dev/null
+++ b/arch/riscv/kernel/riscv_ksyms.c
@@ -0,0 +1,15 @@
+/*
+ * Copyright (C) 2017 Zihao Yu
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation.
+ */
+
+#include <linux/export.h>
+#include <linux/uaccess.h>
+
+/*
+ * Assembly functions that may be used (directly or indirectly) by modules
+ */
+EXPORT_SYMBOL(__copy_user);
