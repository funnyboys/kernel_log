commit caab277b1de0a22b675c4c95fc7b285ec2eb5bf5
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Mon Jun 3 07:44:50 2019 +0200

    treewide: Replace GPLv2 boilerplate/reference with SPDX - rule 234
    
    Based on 1 normalized pattern(s):
    
      this program is free software you can redistribute it and or modify
      it under the terms of the gnu general public license version 2 as
      published by the free software foundation this program is
      distributed in the hope that it will be useful but without any
      warranty without even the implied warranty of merchantability or
      fitness for a particular purpose see the gnu general public license
      for more details you should have received a copy of the gnu general
      public license along with this program if not see http www gnu org
      licenses
    
    extracted by the scancode license scanner the SPDX license identifier
    
      GPL-2.0-only
    
    has been chosen to replace the boilerplate/reference in 503 file(s).
    
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Reviewed-by: Alexios Zavras <alexios.zavras@intel.com>
    Reviewed-by: Allison Randal <allison@lohutok.net>
    Reviewed-by: Enrico Weigelt <info@metux.net>
    Cc: linux-spdx@vger.kernel.org
    Link: https://lkml.kernel.org/r/20190602204653.811534538@linutronix.de
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/arch/arm64/include/asm/smp_plat.h b/arch/arm64/include/asm/smp_plat.h
index 7a495403a18a..99ad77df8f52 100644
--- a/arch/arm64/include/asm/smp_plat.h
+++ b/arch/arm64/include/asm/smp_plat.h
@@ -1,19 +1,8 @@
+/* SPDX-License-Identifier: GPL-2.0-only */
 /*
  * Definitions specific to SMP platforms.
  *
  * Copyright (C) 2013 ARM Ltd.
- *
- * This program is free software: you can redistribute it and/or modify
- * it under the terms of the GNU General Public License version 2 as
- * published by the Free Software Foundation.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program.  If not, see <http://www.gnu.org/licenses/>.
  */
 
 #ifndef __ASM_SMP_PLAT_H

commit 262afe92fa8c7d64118948d98667c102c7d16174
Author: Florian Fainelli <f.fainelli@gmail.com>
Date:   Mon Jun 3 16:18:29 2019 -0700

    arm64: smp: Moved cpu_logical_map[] to smp.h
    
    asm/smp.h is included by linux/smp.h and some drivers, in particular
    irqchip drivers can access cpu_logical_map[] in order to perform SMP
    affinity tasks. Make arm64 consistent with other architectures here.
    
    Signed-off-by: Florian Fainelli <f.fainelli@gmail.com>
    Signed-off-by: Will Deacon <will.deacon@arm.com>

diff --git a/arch/arm64/include/asm/smp_plat.h b/arch/arm64/include/asm/smp_plat.h
index af58dcdefb21..7a495403a18a 100644
--- a/arch/arm64/include/asm/smp_plat.h
+++ b/arch/arm64/include/asm/smp_plat.h
@@ -36,11 +36,6 @@ static inline u32 mpidr_hash_size(void)
 	return 1 << mpidr_hash.bits;
 }
 
-/*
- * Logical CPU mapping.
- */
-extern u64 __cpu_logical_map[NR_CPUS];
-#define cpu_logical_map(cpu)    __cpu_logical_map[cpu]
 /*
  * Retrieve logical cpu index corresponding to a given MPIDR.Aff*
  *  - mpidr: MPIDR.Aff* bits to be used for the look-up

commit 377bcff9a38a78083d7fff8e8a41cc894cf7813b
Author: Jonas Rabenstein <jonas.rabenstein@studium.uni-erlangen.de>
Date:   Wed Jul 29 12:07:57 2015 +0100

    arm64: remove dead-code depending on CONFIG_UP_LATE_INIT
    
    Commit 4b3dc9679cf7 ("arm64: force CONFIG_SMP=y and remove redundant
    and therfore can not be selected anymore.
    
    Remove dead #ifdef-block depending on UP_LATE_INIT in
    arch/arm64/kernel/setup.c
    
    Signed-off-by: Jonas Rabenstein <jonas.rabenstein@studium.uni-erlangen.de>
    [will: kill do_post_cpus_up_work altogether]
    Signed-off-by: Will Deacon <will.deacon@arm.com>

diff --git a/arch/arm64/include/asm/smp_plat.h b/arch/arm64/include/asm/smp_plat.h
index 7abf7570c00f..af58dcdefb21 100644
--- a/arch/arm64/include/asm/smp_plat.h
+++ b/arch/arm64/include/asm/smp_plat.h
@@ -56,6 +56,4 @@ static inline int get_logical_index(u64 mpidr)
 	return -EINVAL;
 }
 
-void __init do_post_cpus_up_work(void);
-
 #endif /* __ASM_SMP_PLAT_H */

commit 6ee3c78cecc795e87de9552baca76ea88292556d
Author: Mark Rutland <mark.rutland@arm.com>
Date:   Wed Apr 22 17:26:18 2015 +0100

    arm64: smp_plat: add get_logical_index
    
    The PSCI MIGRATE_INFO_UP_CPU call returns a physical ID, which we will
    need to map back to a Linux logical ID.
    
    Implement a reusable get_logical_index to map from a physical ID to a
    logical ID.
    
    Signed-off-by: Mark Rutland <mark.rutland@arm.com>
    Acked-by: Catalin Marinas <catalin.marinas@arm.com>
    Acked-by: Lorenzo Pieralisi <lorenzo.pieralisi@arm.com>
    Reviewed-by: Hanjun Guo <hanjun.guo@linaro.org>
    Tested-by: Hanjun Guo <hanjun.guo@linaro.org>
    Cc: Will Deacon <will.deacon@arm.com>

diff --git a/arch/arm64/include/asm/smp_plat.h b/arch/arm64/include/asm/smp_plat.h
index 8dcd61e32176..7abf7570c00f 100644
--- a/arch/arm64/include/asm/smp_plat.h
+++ b/arch/arm64/include/asm/smp_plat.h
@@ -19,6 +19,8 @@
 #ifndef __ASM_SMP_PLAT_H
 #define __ASM_SMP_PLAT_H
 
+#include <linux/cpumask.h>
+
 #include <asm/types.h>
 
 struct mpidr_hash {
@@ -39,6 +41,20 @@ static inline u32 mpidr_hash_size(void)
  */
 extern u64 __cpu_logical_map[NR_CPUS];
 #define cpu_logical_map(cpu)    __cpu_logical_map[cpu]
+/*
+ * Retrieve logical cpu index corresponding to a given MPIDR.Aff*
+ *  - mpidr: MPIDR.Aff* bits to be used for the look-up
+ *
+ * Returns the cpu logical index or -EINVAL on look-up error
+ */
+static inline int get_logical_index(u64 mpidr)
+{
+	int cpu;
+	for (cpu = 0; cpu < nr_cpu_ids; cpu++)
+		if (cpu_logical_map(cpu) == mpidr)
+			return cpu;
+	return -EINVAL;
+}
 
 void __init do_post_cpus_up_work(void);
 

commit 137650aad96c9594683445e41afa8ac5a2097520
Author: Mark Rutland <mark.rutland@arm.com>
Date:   Fri Mar 13 16:14:34 2015 +0000

    arm64: apply alternatives for !SMP kernels
    
    Currently we only perform alternative patching for kernels built with
    CONFIG_SMP, as we call apply_alternatives_all() in smp.c, which is only
    built for CONFIG_SMP. Thus !SMP kernels may not have necessary
    alternatives patched in.
    
    This patch ensures that we call apply_alternatives_all() once all CPUs
    are booted, even for !SMP kernels, by having the smp_init_cpus() stub
    call this for !SMP kernels via up_late_init. A new wrapper,
    do_post_cpus_up_work, is added so we can hook other calls here later
    (e.g. boot mode logging).
    
    Cc: Andre Przywara <andre.przywara@arm.com>
    Cc: Catalin Marinas <catalin.marinas@arm.com>
    Fixes: e039ee4ee3fcf174 ("arm64: add alternative runtime patching")
    Tested-by: Ard Biesheuvel <ard.biesheuvel@linaro.org>
    Reviewed-by: Ard Biesheuvel <ard.biesheuvel@linaro.org>
    Signed-off-by: Mark Rutland <mark.rutland@arm.com>
    Signed-off-by: Will Deacon <will.deacon@arm.com>

diff --git a/arch/arm64/include/asm/smp_plat.h b/arch/arm64/include/asm/smp_plat.h
index 59e282311b58..8dcd61e32176 100644
--- a/arch/arm64/include/asm/smp_plat.h
+++ b/arch/arm64/include/asm/smp_plat.h
@@ -40,4 +40,6 @@ static inline u32 mpidr_hash_size(void)
 extern u64 __cpu_logical_map[NR_CPUS];
 #define cpu_logical_map(cpu)    __cpu_logical_map[cpu]
 
+void __init do_post_cpus_up_work(void);
+
 #endif /* __ASM_SMP_PLAT_H */

commit 976d7d3f79a997b223f2ed8eabef7e12e469b5cf
Author: Lorenzo Pieralisi <lorenzo.pieralisi@arm.com>
Date:   Thu May 16 10:32:09 2013 +0100

    arm64: kernel: build MPIDR_EL1 hash function data structure
    
    On ARM64 SMP systems, cores are identified by their MPIDR_EL1 register.
    The MPIDR_EL1 guidelines in the ARM ARM do not provide strict enforcement of
    MPIDR_EL1 layout, only recommendations that, if followed, split the MPIDR_EL1
    on ARM 64 bit platforms in four affinity levels. In multi-cluster
    systems like big.LITTLE, if the affinity guidelines are followed, the
    MPIDR_EL1 can not be considered a linear index. This means that the
    association between logical CPU in the kernel and the HW CPU identifier
    becomes somewhat more complicated requiring methods like hashing to
    associate a given MPIDR_EL1 to a CPU logical index, in order for the look-up
    to be carried out in an efficient and scalable way.
    
    This patch provides a function in the kernel that starting from the
    cpu_logical_map, implement collision-free hashing of MPIDR_EL1 values by
    checking all significative bits of MPIDR_EL1 affinity level bitfields.
    The hashing can then be carried out through bits shifting and ORing; the
    resulting hash algorithm is a collision-free though not minimal hash that can
    be executed with few assembly instructions. The mpidr_el1 is filtered through a
    mpidr mask that is built by checking all bits that toggle in the set of
    MPIDR_EL1s corresponding to possible CPUs. Bits that do not toggle do not
    carry information so they do not contribute to the resulting hash.
    
    Pseudo code:
    
    /* check all bits that toggle, so they are required */
    for (i = 1, mpidr_el1_mask = 0; i < num_possible_cpus(); i++)
            mpidr_el1_mask |= (cpu_logical_map(i) ^ cpu_logical_map(0));
    
    /*
     * Build shifts to be applied to aff0, aff1, aff2, aff3 values to hash the
     * mpidr_el1
     * fls() returns the last bit set in a word, 0 if none
     * ffs() returns the first bit set in a word, 0 if none
     */
    fs0 = mpidr_el1_mask[7:0] ? ffs(mpidr_el1_mask[7:0]) - 1 : 0;
    fs1 = mpidr_el1_mask[15:8] ? ffs(mpidr_el1_mask[15:8]) - 1 : 0;
    fs2 = mpidr_el1_mask[23:16] ? ffs(mpidr_el1_mask[23:16]) - 1 : 0;
    fs3 = mpidr_el1_mask[39:32] ? ffs(mpidr_el1_mask[39:32]) - 1 : 0;
    ls0 = fls(mpidr_el1_mask[7:0]);
    ls1 = fls(mpidr_el1_mask[15:8]);
    ls2 = fls(mpidr_el1_mask[23:16]);
    ls3 = fls(mpidr_el1_mask[39:32]);
    bits0 = ls0 - fs0;
    bits1 = ls1 - fs1;
    bits2 = ls2 - fs2;
    bits3 = ls3 - fs3;
    aff0_shift = fs0;
    aff1_shift = 8 + fs1 - bits0;
    aff2_shift = 16 + fs2 - (bits0 + bits1);
    aff3_shift = 32 + fs3 - (bits0 + bits1 + bits2);
    u32 hash(u64 mpidr_el1) {
            u32 l[4];
            u64 mpidr_el1_masked = mpidr_el1 & mpidr_el1_mask;
            l[0] = mpidr_el1_masked & 0xff;
            l[1] = mpidr_el1_masked & 0xff00;
            l[2] = mpidr_el1_masked & 0xff0000;
            l[3] = mpidr_el1_masked & 0xff00000000;
            return (l[0] >> aff0_shift | l[1] >> aff1_shift | l[2] >> aff2_shift |
                    l[3] >> aff3_shift);
    }
    
    The hashing algorithm relies on the inherent properties set in the ARM ARM
    recommendations for the MPIDR_EL1. Exotic configurations, where for instance
    the MPIDR_EL1 values at a given affinity level have large holes, can end up
    requiring big hash tables since the compression of values that can be achieved
    through shifting is somewhat crippled when holes are present. Kernel warns if
    the number of buckets of the resulting hash table exceeds the number of
    possible CPUs by a factor of 4, which is a symptom of a very sparse HW
    MPIDR_EL1 configuration.
    
    The hash algorithm is quite simple and can easily be implemented in assembly
    code, to be used in code paths where the kernel virtual address space is
    not set-up (ie cpu_resume) and instruction and data fetches are strongly
    ordered so code must be compact and must carry out few data accesses.
    
    Signed-off-by: Lorenzo Pieralisi <lorenzo.pieralisi@arm.com>

diff --git a/arch/arm64/include/asm/smp_plat.h b/arch/arm64/include/asm/smp_plat.h
index ed43a0d2b1b2..59e282311b58 100644
--- a/arch/arm64/include/asm/smp_plat.h
+++ b/arch/arm64/include/asm/smp_plat.h
@@ -21,6 +21,19 @@
 
 #include <asm/types.h>
 
+struct mpidr_hash {
+	u64	mask;
+	u32	shift_aff[4];
+	u32	bits;
+};
+
+extern struct mpidr_hash mpidr_hash;
+
+static inline u32 mpidr_hash_size(void)
+{
+	return 1 << mpidr_hash.bits;
+}
+
 /*
  * Logical CPU mapping.
  */

commit 4c7aa0021356ee91b96cea51b8b7fadebaba489e
Author: Javi Merino <javi.merino@arm.com>
Date:   Wed Aug 29 09:47:19 2012 +0100

    arm64: kernel: initialise cpu_logical_map from the DT
    
    When booting the kernel, the cpu logical id map must be initialised
    using device tree data passed by FW or through an embedded blob.
    
    This patch parses the reg property in device tree "cpu" nodes,
    retrieves the corresponding CPUs hardware identifiers (MPIDR) and
    initialises the cpu logical map accordingly.
    
    The device tree HW identifiers are considered valid if all CPU nodes
    contain a "reg" property, there are no duplicate "reg" entries and the
    DT defines a CPU node whose "reg" property defines affinity levels
    that matches those of the boot CPU.
    
    The primary CPU is assigned cpu logical number 0 to keep the current
    convention valid.
    
    Based on a0ae02405076ac32bd17ece976e914b5b6075bb0 (ARM: kernel: add
    device tree init map function).
    
    Signed-off-by: Javi Merino <javi.merino@arm.com>
    Signed-off-by: Catalin Marinas <catalin.marinas@arm.com>

diff --git a/arch/arm64/include/asm/smp_plat.h b/arch/arm64/include/asm/smp_plat.h
new file mode 100644
index 000000000000..ed43a0d2b1b2
--- /dev/null
+++ b/arch/arm64/include/asm/smp_plat.h
@@ -0,0 +1,30 @@
+/*
+ * Definitions specific to SMP platforms.
+ *
+ * Copyright (C) 2013 ARM Ltd.
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+#ifndef __ASM_SMP_PLAT_H
+#define __ASM_SMP_PLAT_H
+
+#include <asm/types.h>
+
+/*
+ * Logical CPU mapping.
+ */
+extern u64 __cpu_logical_map[NR_CPUS];
+#define cpu_logical_map(cpu)    __cpu_logical_map[cpu]
+
+#endif /* __ASM_SMP_PLAT_H */
