commit 4e410ef96ce6c8d2e2b69d09ab5d44dc8d5352e4
Author: Prabhakar Kushwaha <pkushwaha@marvell.com>
Date:   Sat Dec 21 08:32:38 2019 +0000

    arm64: Remove __exception_text_start and __exception_text_end from asm/section.h
    
    Linux commit b6e43c0e3129 ("arm64: remove __exception annotations") has
    removed __exception_text_start and __exception_text_end sections.
    
    So removing reference of __exception_text_start and __exception_text_end
    from from asm/section.h.
    
    Cc: James Morse <james.morse@arm.com>
    Reviewed-by: Anshuman Khandual <anshuman.khandual@arm.com>
    Signed-off-by: Prabhakar Kushwaha <pkushwaha@marvell.com>
    Signed-off-by: Will Deacon <will@kernel.org>

diff --git a/arch/arm64/include/asm/sections.h b/arch/arm64/include/asm/sections.h
index 25a73aab438f..3994169985ef 100644
--- a/arch/arm64/include/asm/sections.h
+++ b/arch/arm64/include/asm/sections.h
@@ -8,7 +8,6 @@
 #include <asm-generic/sections.h>
 
 extern char __alt_instructions[], __alt_instructions_end[];
-extern char __exception_text_start[], __exception_text_end[];
 extern char __hibernate_exit_text_start[], __hibernate_exit_text_end[];
 extern char __hyp_idmap_text_start[], __hyp_idmap_text_end[];
 extern char __hyp_text_start[], __hyp_text_end[];

commit ca2ef4ffabbef25644e02a98b0f48869f8be0375
Author: Mark Rutland <mark.rutland@arm.com>
Date:   Mon Dec 2 16:11:07 2019 +0000

    arm64: insn: consistently handle exit text
    
    A kernel built with KASAN && FTRACE_WITH_REGS && !MODULES, produces a
    boot-time splat in the bowels of ftrace:
    
    | [    0.000000] ftrace: allocating 32281 entries in 127 pages
    | [    0.000000] ------------[ cut here ]------------
    | [    0.000000] WARNING: CPU: 0 PID: 0 at kernel/trace/ftrace.c:2019 ftrace_bug+0x27c/0x328
    | [    0.000000] CPU: 0 PID: 0 Comm: swapper Not tainted 5.4.0-rc3-00008-g7f08ae53a7e3 #13
    | [    0.000000] Hardware name: linux,dummy-virt (DT)
    | [    0.000000] pstate: 60000085 (nZCv daIf -PAN -UAO)
    | [    0.000000] pc : ftrace_bug+0x27c/0x328
    | [    0.000000] lr : ftrace_init+0x640/0x6cc
    | [    0.000000] sp : ffffa000120e7e00
    | [    0.000000] x29: ffffa000120e7e00 x28: ffff00006ac01b10
    | [    0.000000] x27: ffff00006ac898c0 x26: dfffa00000000000
    | [    0.000000] x25: ffffa000120ef290 x24: ffffa0001216df40
    | [    0.000000] x23: 000000000000018d x22: ffffa0001244c700
    | [    0.000000] x21: ffffa00011bf393c x20: ffff00006ac898c0
    | [    0.000000] x19: 00000000ffffffff x18: 0000000000001584
    | [    0.000000] x17: 0000000000001540 x16: 0000000000000007
    | [    0.000000] x15: 0000000000000000 x14: ffffa00010432770
    | [    0.000000] x13: ffff940002483519 x12: 1ffff40002483518
    | [    0.000000] x11: 1ffff40002483518 x10: ffff940002483518
    | [    0.000000] x9 : dfffa00000000000 x8 : 0000000000000001
    | [    0.000000] x7 : ffff940002483519 x6 : ffffa0001241a8c0
    | [    0.000000] x5 : ffff940002483519 x4 : ffff940002483519
    | [    0.000000] x3 : ffffa00011780870 x2 : 0000000000000001
    | [    0.000000] x1 : 1fffe0000d591318 x0 : 0000000000000000
    | [    0.000000] Call trace:
    | [    0.000000]  ftrace_bug+0x27c/0x328
    | [    0.000000]  ftrace_init+0x640/0x6cc
    | [    0.000000]  start_kernel+0x27c/0x654
    | [    0.000000] random: get_random_bytes called from print_oops_end_marker+0x30/0x60 with crng_init=0
    | [    0.000000] ---[ end trace 0000000000000000 ]---
    | [    0.000000] ftrace faulted on writing
    | [    0.000000] [<ffffa00011bf393c>] _GLOBAL__sub_D_65535_0___tracepoint_initcall_level+0x4/0x28
    | [    0.000000] Initializing ftrace call sites
    | [    0.000000] ftrace record flags: 0
    | [    0.000000]  (0)
    | [    0.000000]  expected tramp: ffffa000100b3344
    
    This is due to an unfortunate combination of several factors.
    
    Building with KASAN results in the compiler generating anonymous
    functions to register/unregister global variables against the shadow
    memory. These functions are placed in .text.startup/.text.exit, and
    given mangled names like _GLOBAL__sub_{I,D}_65535_0_$OTHER_SYMBOL. The
    kernel linker script places these in .init.text and .exit.text
    respectively, which are both discarded at runtime as part of initmem.
    
    Building with FTRACE_WITH_REGS uses -fpatchable-function-entry=2, which
    also instruments KASAN's anonymous functions. When these are discarded
    with the rest of initmem, ftrace removes dangling references to these
    call sites.
    
    Building without MODULES implicitly disables STRICT_MODULE_RWX, and
    causes arm64's patch_map() function to treat any !core_kernel_text()
    symbol as something that can be modified in-place. As core_kernel_text()
    is only true for .text and .init.text, with the latter depending on
    system_state < SYSTEM_RUNNING, we'll treat .exit.text as something that
    can be patched in-place. However, .exit.text is mapped read-only.
    
    Hence in this configuration the ftrace init code blows up while trying
    to patch one of the functions generated by KASAN.
    
    We could try to filter out the call sites in .exit.text rather than
    initializing them, but this would be inconsistent with how we handle
    .init.text, and requires hooking into core bits of ftrace. The behaviour
    of patch_map() is also inconsistent today, so instead let's clean that
    up and have it consistently handle .exit.text.
    
    This patch teaches patch_map() to handle .exit.text at init time,
    preventing the boot-time splat above. The flow of patch_map() is
    reworked to make the logic clearer and minimize redundant
    conditionality.
    
    Fixes: 3b23e4991fb66f6d ("arm64: implement ftrace with regs")
    Signed-off-by: Mark Rutland <mark.rutland@arm.com>
    Cc: Amit Daniel Kachhap <amit.kachhap@arm.com>
    Cc: Ard Biesheuvel <ard.biesheuvel@linaro.org>
    Cc: Torsten Duwe <duwe@suse.de>
    Cc: Will Deacon <will@kernel.org>
    Signed-off-by: Catalin Marinas <catalin.marinas@arm.com>

diff --git a/arch/arm64/include/asm/sections.h b/arch/arm64/include/asm/sections.h
index 788ae971f11c..25a73aab438f 100644
--- a/arch/arm64/include/asm/sections.h
+++ b/arch/arm64/include/asm/sections.h
@@ -15,6 +15,7 @@ extern char __hyp_text_start[], __hyp_text_end[];
 extern char __idmap_text_start[], __idmap_text_end[];
 extern char __initdata_begin[], __initdata_end[];
 extern char __inittext_begin[], __inittext_end[];
+extern char __exittext_begin[], __exittext_end[];
 extern char __irqentry_text_start[], __irqentry_text_end[];
 extern char __mmuoff_data_start[], __mmuoff_data_end[];
 extern char __entry_tramp_text_start[], __entry_tramp_text_end[];

commit caab277b1de0a22b675c4c95fc7b285ec2eb5bf5
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Mon Jun 3 07:44:50 2019 +0200

    treewide: Replace GPLv2 boilerplate/reference with SPDX - rule 234
    
    Based on 1 normalized pattern(s):
    
      this program is free software you can redistribute it and or modify
      it under the terms of the gnu general public license version 2 as
      published by the free software foundation this program is
      distributed in the hope that it will be useful but without any
      warranty without even the implied warranty of merchantability or
      fitness for a particular purpose see the gnu general public license
      for more details you should have received a copy of the gnu general
      public license along with this program if not see http www gnu org
      licenses
    
    extracted by the scancode license scanner the SPDX license identifier
    
      GPL-2.0-only
    
    has been chosen to replace the boilerplate/reference in 503 file(s).
    
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Reviewed-by: Alexios Zavras <alexios.zavras@intel.com>
    Reviewed-by: Allison Randal <allison@lohutok.net>
    Reviewed-by: Enrico Weigelt <info@metux.net>
    Cc: linux-spdx@vger.kernel.org
    Link: https://lkml.kernel.org/r/20190602204653.811534538@linutronix.de
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/arch/arm64/include/asm/sections.h b/arch/arm64/include/asm/sections.h
index caab039d6305..788ae971f11c 100644
--- a/arch/arm64/include/asm/sections.h
+++ b/arch/arm64/include/asm/sections.h
@@ -1,17 +1,6 @@
+/* SPDX-License-Identifier: GPL-2.0-only */
 /*
  * Copyright (C) 2016 ARM Limited
- *
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License version 2 as
- * published by the Free Software Foundation.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program.  If not, see <http://www.gnu.org/licenses/>.
  */
 #ifndef __ASM_SECTIONS_H
 #define __ASM_SECTIONS_H

commit 83f8ee3a73f551aebb5b0bb029feaf6936615730
Author: James Morse <james.morse@arm.com>
Date:   Mon Jan 8 15:38:17 2018 +0000

    arm64: mmu: add the entry trampolines start/end section markers into sections.h
    
    SDEI needs to calculate an offset in the trampoline page too. Move
    the extern char[] to sections.h.
    
    This patch just moves code around.
    
    Signed-off-by: James Morse <james.morse@arm.com>
    Signed-off-by: Catalin Marinas <catalin.marinas@arm.com>

diff --git a/arch/arm64/include/asm/sections.h b/arch/arm64/include/asm/sections.h
index 941267caa39c..caab039d6305 100644
--- a/arch/arm64/include/asm/sections.h
+++ b/arch/arm64/include/asm/sections.h
@@ -28,5 +28,6 @@ extern char __initdata_begin[], __initdata_end[];
 extern char __inittext_begin[], __inittext_end[];
 extern char __irqentry_text_start[], __irqentry_text_end[];
 extern char __mmuoff_data_start[], __mmuoff_data_end[];
+extern char __entry_tramp_text_start[], __entry_tramp_text_end[];
 
 #endif /* __ASM_SECTIONS_H */

commit 2ebe088b73a87c8fc70231b468c719337f258bf0
Author: Ard Biesheuvel <ard.biesheuvel@linaro.org>
Date:   Thu Mar 9 21:52:03 2017 +0100

    arm64: mmu: apply strict permissions to .init.text and .init.data
    
    To avoid having mappings that are writable and executable at the same
    time, split the init region into a .init.text region that is mapped
    read-only, and a .init.data region that is mapped non-executable.
    
    This is possible now that the alternative patching occurs via the linear
    mapping, and the linear alias of the init region is always mapped writable
    (but never executable).
    
    Since the alternatives descriptions themselves are read-only data, move
    those into the .init.text region.
    
    Reviewed-by: Laura Abbott <labbott@redhat.com>
    Reviewed-by: Mark Rutland <mark.rutland@arm.com>
    Tested-by: Mark Rutland <mark.rutland@arm.com>
    Signed-off-by: Ard Biesheuvel <ard.biesheuvel@linaro.org>
    Signed-off-by: Catalin Marinas <catalin.marinas@arm.com>

diff --git a/arch/arm64/include/asm/sections.h b/arch/arm64/include/asm/sections.h
index 4e7e7067afdb..941267caa39c 100644
--- a/arch/arm64/include/asm/sections.h
+++ b/arch/arm64/include/asm/sections.h
@@ -24,6 +24,8 @@ extern char __hibernate_exit_text_start[], __hibernate_exit_text_end[];
 extern char __hyp_idmap_text_start[], __hyp_idmap_text_end[];
 extern char __hyp_text_start[], __hyp_text_end[];
 extern char __idmap_text_start[], __idmap_text_end[];
+extern char __initdata_begin[], __initdata_end[];
+extern char __inittext_begin[], __inittext_end[];
 extern char __irqentry_text_start[], __irqentry_text_end[];
 extern char __mmuoff_data_start[], __mmuoff_data_end[];
 

commit b61130381120398876b86282082ad9f24976dfcf
Author: James Morse <james.morse@arm.com>
Date:   Wed Aug 24 18:27:29 2016 +0100

    arm64: vmlinux.ld: Add mmuoff data sections and move mmuoff text into idmap
    
    Resume from hibernate needs to clean any text executed by the kernel with
    the MMU off to the PoC. Collect these functions together into the
    .idmap.text section as all this code is tightly coupled and also needs
    the same cleaning after resume.
    
    Data is more complicated, secondary_holding_pen_release is written with
    the MMU on, clean and invalidated, then read with the MMU off. In contrast
    __boot_cpu_mode is written with the MMU off, the corresponding cache line
    is invalidated, so when we read it with the MMU on we don't get stale data.
    These cache maintenance operations conflict with each other if the values
    are within a Cache Writeback Granule (CWG) of each other.
    Collect the data into two sections .mmuoff.data.read and .mmuoff.data.write,
    the linker script ensures mmuoff.data.write section is aligned to the
    architectural maximum CWG of 2KB.
    
    Signed-off-by: James Morse <james.morse@arm.com>
    Cc: Ard Biesheuvel <ard.biesheuvel@linaro.org>
    Cc: Mark Rutland <mark.rutland@arm.com>
    Reviewed-by: Catalin Marinas <catalin.marinas@arm.com>
    Signed-off-by: Will Deacon <will.deacon@arm.com>

diff --git a/arch/arm64/include/asm/sections.h b/arch/arm64/include/asm/sections.h
index 237fcdd13445..4e7e7067afdb 100644
--- a/arch/arm64/include/asm/sections.h
+++ b/arch/arm64/include/asm/sections.h
@@ -25,5 +25,6 @@ extern char __hyp_idmap_text_start[], __hyp_idmap_text_end[];
 extern char __hyp_text_start[], __hyp_text_end[];
 extern char __idmap_text_start[], __idmap_text_end[];
 extern char __irqentry_text_start[], __irqentry_text_end[];
+extern char __mmuoff_data_start[], __mmuoff_data_end[];
 
 #endif /* __ASM_SECTIONS_H */

commit ee78fdc71db1ce9a437b9ca17e31063996b71ec1
Author: James Morse <james.morse@arm.com>
Date:   Wed Aug 24 18:27:28 2016 +0100

    arm64: Create sections.h
    
    Each time new section markers are added, kernel/vmlinux.ld.S is updated,
    and new extern char __start_foo[] definitions are scattered through the
    tree.
    
    Create asm/include/sections.h to collect these definitions (and include
    the existing asm-generic version).
    
    Signed-off-by: James Morse <james.morse@arm.com>
    Reviewed-by: Mark Rutland <mark.rutland@arm.com>
    Tested-by: Mark Rutland <mark.rutland@arm.com>
    Reviewed-by: Catalin Marinas <catalin.marinas@arm.com>
    Signed-off-by: Will Deacon <will.deacon@arm.com>

diff --git a/arch/arm64/include/asm/sections.h b/arch/arm64/include/asm/sections.h
new file mode 100644
index 000000000000..237fcdd13445
--- /dev/null
+++ b/arch/arm64/include/asm/sections.h
@@ -0,0 +1,29 @@
+/*
+ * Copyright (C) 2016 ARM Limited
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ */
+#ifndef __ASM_SECTIONS_H
+#define __ASM_SECTIONS_H
+
+#include <asm-generic/sections.h>
+
+extern char __alt_instructions[], __alt_instructions_end[];
+extern char __exception_text_start[], __exception_text_end[];
+extern char __hibernate_exit_text_start[], __hibernate_exit_text_end[];
+extern char __hyp_idmap_text_start[], __hyp_idmap_text_end[];
+extern char __hyp_text_start[], __hyp_text_end[];
+extern char __idmap_text_start[], __idmap_text_end[];
+extern char __irqentry_text_start[], __irqentry_text_end[];
+
+#endif /* __ASM_SECTIONS_H */
