commit 1f7585f30a3af595ac07f610b807c738c9e3baab
Author: Gustavo A. R. Silva <gustavo@embeddedor.com>
Date:   Wed Aug 7 21:34:48 2019 -0500

    ARM: ep93xx: Mark expected switch fall-through
    
    Mark switch cases where we are expecting to fall through.
    
    Fix the following warnings (Building: arm-ep93xx_defconfig arm):
    
    arch/arm/mach-ep93xx/crunch.c: In function 'crunch_do':
    arch/arm/mach-ep93xx/crunch.c:46:3: warning: this statement may
    fall through [-Wimplicit-fallthrough=]
          memset(crunch_state, 0, sizeof(*crunch_state));
          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
       arch/arm/mach-ep93xx/crunch.c:53:2: note: here
         case THREAD_NOTIFY_EXIT:
         ^~~~
    
    Notice that, in this particular case, the code comment is
    modified in accordance with what GCC is expecting to find.
    
    Reported-by: kbuild test robot <lkp@intel.com>
    Signed-off-by: Gustavo A. R. Silva <gustavo@embeddedor.com>

diff --git a/arch/arm/mach-ep93xx/crunch.c b/arch/arm/mach-ep93xx/crunch.c
index 1c9a4be8b503..1c05c5bf7e5c 100644
--- a/arch/arm/mach-ep93xx/crunch.c
+++ b/arch/arm/mach-ep93xx/crunch.c
@@ -49,6 +49,7 @@ static int crunch_do(struct notifier_block *self, unsigned long cmd, void *t)
 		 * FALLTHROUGH: Ensure we don't try to overwrite our newly
 		 * initialised state information on the first fault.
 		 */
+		/* Fall through */
 
 	case THREAD_NOTIFY_EXIT:
 		crunch_task_release(thread);

commit d2912cb15bdda8ba4a5dd73396ad62641af2f520
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Tue Jun 4 10:11:33 2019 +0200

    treewide: Replace GPLv2 boilerplate/reference with SPDX - rule 500
    
    Based on 2 normalized pattern(s):
    
      this program is free software you can redistribute it and or modify
      it under the terms of the gnu general public license version 2 as
      published by the free software foundation
    
      this program is free software you can redistribute it and or modify
      it under the terms of the gnu general public license version 2 as
      published by the free software foundation #
    
    extracted by the scancode license scanner the SPDX license identifier
    
      GPL-2.0-only
    
    has been chosen to replace the boilerplate/reference in 4122 file(s).
    
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Reviewed-by: Enrico Weigelt <info@metux.net>
    Reviewed-by: Kate Stewart <kstewart@linuxfoundation.org>
    Reviewed-by: Allison Randal <allison@lohutok.net>
    Cc: linux-spdx@vger.kernel.org
    Link: https://lkml.kernel.org/r/20190604081206.933168790@linutronix.de
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/arch/arm/mach-ep93xx/crunch.c b/arch/arm/mach-ep93xx/crunch.c
index a4a2ab9648c9..1c9a4be8b503 100644
--- a/arch/arm/mach-ep93xx/crunch.c
+++ b/arch/arm/mach-ep93xx/crunch.c
@@ -1,12 +1,9 @@
+// SPDX-License-Identifier: GPL-2.0-only
 /*
  * arch/arm/kernel/crunch.c
  * Cirrus MaverickCrunch context switching and handling
  *
  * Copyright (C) 2006 Lennert Buytenhek <buytenh@wantstofly.org>
- *
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License version 2 as
- * published by the Free Software Foundation.
  */
 
 #include <linux/module.h>

commit c914283f5e5f55ddf770b8632a5e65e5aa24343e
Author: Shawn Guo <shawn.guo@linaro.org>
Date:   Thu Apr 26 10:05:15 2012 +0800

    ARM: ep93xx: use machine specific hook for late init
    
    Cc: Ryan Mallon <rmallon@gmail.com>
    Signed-off-by: Shawn Guo <shawn.guo@linaro.org>
    Acked-by: H Hartley Sweeten <hsweeten@visionengravers.com>

diff --git a/arch/arm/mach-ep93xx/crunch.c b/arch/arm/mach-ep93xx/crunch.c
index 74753e2df603..a4a2ab9648c9 100644
--- a/arch/arm/mach-ep93xx/crunch.c
+++ b/arch/arm/mach-ep93xx/crunch.c
@@ -79,12 +79,10 @@ static struct notifier_block crunch_notifier_block = {
 	.notifier_call	= crunch_do,
 };
 
-static int __init crunch_init(void)
+int __init crunch_init(void)
 {
 	thread_register_notifier(&crunch_notifier_block);
 	elf_hwcap |= HWCAP_CRUNCH;
 
 	return 0;
 }
-
-late_initcall(crunch_init);

commit a6de3df4f172e124280d88e617ee7d29f7af970b
Author: Ryan Mallon <rmallon@gmail.com>
Date:   Wed Jan 11 13:14:20 2012 +1100

    ep93xx: Remove unnecessary includes of ep93xx-regs.h
    
    Remove the include of ep93xx-regs.h from files which no longer need
    it, notably include/mach/hardware.h.
    
    Signed-off-by: Ryan Mallon <rmallon@gmail.com>
    Reviewed-by: Mika Westerberg <mika.westerberg@iki.fi>
    Acked-by: Hartley Sweeten <hsweeten@visionengravers.com>

diff --git a/arch/arm/mach-ep93xx/crunch.c b/arch/arm/mach-ep93xx/crunch.c
index d05ed0be4a65..74753e2df603 100644
--- a/arch/arm/mach-ep93xx/crunch.c
+++ b/arch/arm/mach-ep93xx/crunch.c
@@ -16,7 +16,7 @@
 #include <linux/sched.h>
 #include <linux/init.h>
 #include <linux/io.h>
-#include <mach/ep93xx-regs.h>
+
 #include <asm/thread_notify.h>
 
 #include "soc.h"

commit 9aeec63e048936f92ad2792ffc8cc66ef0303e0f
Author: Ryan Mallon <rmallon@gmail.com>
Date:   Wed Jan 11 12:53:33 2012 +1100

    ep93xx: Move EP93XX_SYSCON defines to SoC private header
    
    The EP93XX_SYSCON defines are now no longer needed outside of the
    EP93xx SoC core code, so they can be moved to a private header.
    
    Signed-off-by: Ryan Mallon <rmallon@gmail.com>
    Reviewed-by: Mika Westerberg <mika.westerberg@iki.fi>
    Acked-by: Hartley Sweeten <hsweeten@visionengravers.com>

diff --git a/arch/arm/mach-ep93xx/crunch.c b/arch/arm/mach-ep93xx/crunch.c
index 25ef223ba7f3..d05ed0be4a65 100644
--- a/arch/arm/mach-ep93xx/crunch.c
+++ b/arch/arm/mach-ep93xx/crunch.c
@@ -19,6 +19,8 @@
 #include <mach/ep93xx-regs.h>
 #include <asm/thread_notify.h>
 
+#include "soc.h"
+
 struct crunch_state *crunch_owner;
 
 void crunch_task_release(struct thread_info *thread)

commit c444dc0765d4ab87e920c1aeb1a5a622c9b661f9
Author: Ryan Mallon <rmallon@gmail.com>
Date:   Wed Jan 11 12:35:33 2012 +1100

    ep93xx: Move crunch code to mach-ep93xx directory
    
    The crunch code in arch/arm/kernel is specific to the EP93xx. Move it
    to the mach-ep93xx directory. This removes the need for the
    EP93XX_SYSCON defines to be exported to arch/arm/kernel.
    
    Signed-off-by: Ryan Mallon <rmallon@gmail.com>
    Cc: Russell King <linux@arm.linux.org.uk>
    Reviewed-by: Mika Westerberg <mika.westerberg@iki.fi>
    Acked-by: Hartley Sweeten <hsweeten@visionengravers.com>

diff --git a/arch/arm/mach-ep93xx/crunch.c b/arch/arm/mach-ep93xx/crunch.c
new file mode 100644
index 000000000000..25ef223ba7f3
--- /dev/null
+++ b/arch/arm/mach-ep93xx/crunch.c
@@ -0,0 +1,88 @@
+/*
+ * arch/arm/kernel/crunch.c
+ * Cirrus MaverickCrunch context switching and handling
+ *
+ * Copyright (C) 2006 Lennert Buytenhek <buytenh@wantstofly.org>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation.
+ */
+
+#include <linux/module.h>
+#include <linux/types.h>
+#include <linux/kernel.h>
+#include <linux/signal.h>
+#include <linux/sched.h>
+#include <linux/init.h>
+#include <linux/io.h>
+#include <mach/ep93xx-regs.h>
+#include <asm/thread_notify.h>
+
+struct crunch_state *crunch_owner;
+
+void crunch_task_release(struct thread_info *thread)
+{
+	local_irq_disable();
+	if (crunch_owner == &thread->crunchstate)
+		crunch_owner = NULL;
+	local_irq_enable();
+}
+
+static int crunch_enabled(u32 devcfg)
+{
+	return !!(devcfg & EP93XX_SYSCON_DEVCFG_CPENA);
+}
+
+static int crunch_do(struct notifier_block *self, unsigned long cmd, void *t)
+{
+	struct thread_info *thread = (struct thread_info *)t;
+	struct crunch_state *crunch_state;
+	u32 devcfg;
+
+	crunch_state = &thread->crunchstate;
+
+	switch (cmd) {
+	case THREAD_NOTIFY_FLUSH:
+		memset(crunch_state, 0, sizeof(*crunch_state));
+
+		/*
+		 * FALLTHROUGH: Ensure we don't try to overwrite our newly
+		 * initialised state information on the first fault.
+		 */
+
+	case THREAD_NOTIFY_EXIT:
+		crunch_task_release(thread);
+		break;
+
+	case THREAD_NOTIFY_SWITCH:
+		devcfg = __raw_readl(EP93XX_SYSCON_DEVCFG);
+		if (crunch_enabled(devcfg) || crunch_owner == crunch_state) {
+			/*
+			 * We don't use ep93xx_syscon_swlocked_write() here
+			 * because we are on the context switch path and
+			 * preemption is already disabled.
+			 */
+			devcfg ^= EP93XX_SYSCON_DEVCFG_CPENA;
+			__raw_writel(0xaa, EP93XX_SYSCON_SWLOCK);
+			__raw_writel(devcfg, EP93XX_SYSCON_DEVCFG);
+		}
+		break;
+	}
+
+	return NOTIFY_DONE;
+}
+
+static struct notifier_block crunch_notifier_block = {
+	.notifier_call	= crunch_do,
+};
+
+static int __init crunch_init(void)
+{
+	thread_register_notifier(&crunch_notifier_block);
+	elf_hwcap |= HWCAP_CRUNCH;
+
+	return 0;
+}
+
+late_initcall(crunch_init);
