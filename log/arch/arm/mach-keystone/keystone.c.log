commit 75a6faf617d107bdbc74d36ccf89f2280b96ac26
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Sat Jun 1 10:08:37 2019 +0200

    treewide: Replace GPLv2 boilerplate/reference with SPDX - rule 422
    
    Based on 1 normalized pattern(s):
    
      this program is free software you can redistribute it and or modify
      it under the terms and conditions of the gnu general public license
      version 2 as published by the free software foundation
    
    extracted by the scancode license scanner the SPDX license identifier
    
      GPL-2.0-only
    
    has been chosen to replace the boilerplate/reference in 101 file(s).
    
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Reviewed-by: Allison Randal <allison@lohutok.net>
    Cc: linux-spdx@vger.kernel.org
    Link: https://lkml.kernel.org/r/20190531190113.822954939@linutronix.de
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/arch/arm/mach-keystone/keystone.c b/arch/arm/mach-keystone/keystone.c
index 84613abf35a3..638808c4e122 100644
--- a/arch/arm/mach-keystone/keystone.c
+++ b/arch/arm/mach-keystone/keystone.c
@@ -1,13 +1,10 @@
+// SPDX-License-Identifier: GPL-2.0-only
 /*
  * Keystone2 based boards and SOC related code.
  *
  * Copyright 2013 Texas Instruments, Inc.
  *	Cyril Chemparathy <cyril@ti.com>
  *	Santosh Shilimkar <santosh.shillimkar@ti.com>
- *
- * This program is free software; you can redistribute it and/or modify it
- * under the terms and conditions of the GNU General Public License,
- * version 2, as published by the Free Software Foundation.
  */
 #include <linux/io.h>
 #include <linux/of.h>

commit 850bea2335e42780a0752a75860d3fbcc3d12d6e
Author: Kefeng Wang <wangkefeng.wang@huawei.com>
Date:   Wed Jun 1 14:52:56 2016 +0800

    arm: Remove unnecessary of_platform_populate with default match table
    
    After patch "of/platform: Add common method to populate default bus",
    it is possible for arch code to remove unnecessary callers of
    of_platform_populate with default match table.
    
    Acked-by: Viresh Kumar <viresh.kumar@linaro.org>
    Cc: Nicolas Ferre <nicolas.ferre@atmel.com>
    Cc: Ray Jui <rjui@broadcom.com>
    Cc: Lee Jones <lee@kernel.org>
    Cc: Krzysztof Halasa <khalasa@piap.pl>
    Cc: Kukjin Kim <kgene@kernel.org>
    Cc: Rob Herring <robh@kernel.org>
    Cc: Shawn Guo <shawnguo@kernel.org>
    Cc: Santosh Shilimkar <ssantosh@kernel.org>
    Cc: Roland Stigge <stigge@antcom.de>
    Cc: Jason Cooper <jason@lakedaemon.net>
    Cc: Haojian Zhuang <haojian.zhuang@gmail.com>
    Cc: Heiko Stuebner <heiko@sntech.de>
    Cc: Viresh Kumar <vireshk@kernel.org>
    Cc: Shiraz Hashim <shiraz.linux.kernel@gmail.com>
    Cc: Tony Prisk <linux@prisktech.co.nz>
    Cc: Arnd Bergmann <arnd@arndb.de>
    Cc: Russell King <linux@arm.linux.org.uk>
    Signed-off-by: Kefeng Wang <wangkefeng.wang@huawei.com>
    Signed-off-by: Rob Herring <robh@kernel.org>

diff --git a/arch/arm/mach-keystone/keystone.c b/arch/arm/mach-keystone/keystone.c
index a33a296b00dc..84613abf35a3 100644
--- a/arch/arm/mach-keystone/keystone.c
+++ b/arch/arm/mach-keystone/keystone.c
@@ -60,7 +60,6 @@ static void __init keystone_init(void)
 		bus_register_notifier(&platform_bus_type, &platform_nb);
 	}
 	keystone_pm_runtime_init();
-	of_platform_populate(NULL, of_default_bus_match_table, NULL, NULL);
 }
 
 static long long __init keystone_pv_fixup(void)

commit 981b6714dbd26609212536b9fed43e49db1459cf
Author: Russell King <rmk+kernel@arm.linux.org.uk>
Date:   Tue Mar 15 14:55:03 2016 +0000

    ARM: provide improved virt_to_idmap() functionality
    
    For kexec, we need more functionality from the IDMAP system.  We need to
    be able to convert physical addresses to their identity mappped versions
    as well as virtual addresses.
    
    Convert the existing arch_virt_to_idmap() to deal with physical
    addresses instead.
    
    Acked-by: Santosh Shilimkar <ssantosh@kernel.org>
    Signed-off-by: Russell King <rmk+kernel@arm.linux.org.uk>

diff --git a/arch/arm/mach-keystone/keystone.c b/arch/arm/mach-keystone/keystone.c
index e6b9cb1e6709..a33a296b00dc 100644
--- a/arch/arm/mach-keystone/keystone.c
+++ b/arch/arm/mach-keystone/keystone.c
@@ -63,11 +63,6 @@ static void __init keystone_init(void)
 	of_platform_populate(NULL, of_default_bus_match_table, NULL, NULL);
 }
 
-static unsigned long keystone_virt_to_idmap(unsigned long x)
-{
-	return (phys_addr_t)(x) - CONFIG_PAGE_OFFSET + KEYSTONE_LOW_PHYS_START;
-}
-
 static long long __init keystone_pv_fixup(void)
 {
 	long long offset;
@@ -91,7 +86,7 @@ static long long __init keystone_pv_fixup(void)
 	offset = KEYSTONE_HIGH_PHYS_START - KEYSTONE_LOW_PHYS_START;
 
 	/* Populate the arch idmap hook */
-	arch_virt_to_idmap = keystone_virt_to_idmap;
+	arch_phys_to_idmap_offset = -offset;
 
 	return offset;
 }

commit 5a6b7e53d035db7941b27122365cca9f2e912596
Merge: 8c6d4082fc6a 2ef7d5f342c1
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Sun Mar 20 15:15:48 2016 -0700

    Merge tag 'armsoc-dt' of git://git.kernel.org/pub/scm/linux/kernel/git/arm/arm-soc
    
    Pull ARM DT updates from Arnd Bergmann:
     "These are all the updates to device tree files for 32-bit platforms,
      plus a couple of related 64-bit updates:
    
      New SoC support:
       - Allwinner A83T
       - Axis Artpec-6 SoC
       - Mediatek MT7623 SoC
       - TI Keystone K2G SoC
       - ST Microelectronics stm32f469
    
      New board or machine support:
       - ARM Juno R2
       - Buffalo Linkstation LS-QVL and LS-GL
       - Cubietruck plus
       - D-Link DIR-885L
       - DT support for ARM RealView PB1176 and PB11MPCore
       - Google Nexus 7
       - Homlet v2
       - Itead Ibox
       - Lamobo R1
       - LG Optimus Black
       - Logicpd dm3730
       - Raspberry Pi Model A
    
      Other changes include
       - Lots of updates for Qualcomm APQ8064, MSM8974 and others
       - Improved support for Nokia N900 and other OMAP machines
       - Common clk support for lpc32xx
       - HDLCD display on ARM
       - Improved stm32f429 support
       - Improved Renesas device support, r8a779x and others
       - Lots of Rockchip updates
       - Samsung cleanups
       - ADC support for Atmel SAMA5D2
       - BCM2835 (Raspberry Pi) improvements
       - Broadcom Northstar Plus enhancements
       - OMAP GPMC rework
       - Several improvements for Atmel SAMA5D2 / Xplained
       - Global change to remove inofficial "arm,amba-bus" compatible
         string"
    
    * tag 'armsoc-dt' of git://git.kernel.org/pub/scm/linux/kernel/git/arm/arm-soc: (350 commits)
      ARM, ARM64: dts: drop "arm,amba-bus" in favor of "simple-bus"
      ARM: dts: artpec: dual-license on artpec6.dtsi
      ARM: dts: ux500: add synaptics RMI4 for Ux500 TVK DT
      arm64: dts: juno/vexpress: fix node name unit-address presence warnings
      arm64: dts: foundation-v8: add SBSA Generic Watchdog device node
      ARM: dts: at91: sama5d2 Xplained: add leds node
      ARM: dts: at91: sama5d2 Xplained: add user push button
      ARM: dts: at91: sama5d2 Xplained: set pin muxing for usb gadget and usb host
      ARM: dts: stm32f429: Enable Ethernet on Eval board
      ARM: dts: omap3-sniper: TWL4030 keypad support
      Revert "ARM: dts: DRA7: Add dt nodes for PWMSS"
      ARM: dts: dm814x: dra62x: Disable wait pin monitoring for NAND
      ARM: dts: dm814x: dra62x: Fix NAND device nodes
      ARM: dts: stm32f429: Add Ethernet support
      ARM: dts: stm32f429: Add system config bank node
      ARM: dts: at91: sama5d2: add nand0 and nfc0 nodes
      ARM: dts: at91: sama5d2: add dma properties to UART nodes
      ARM: dts: at91: sama5d2 Xplained: Correct the macb irq pinctrl node
      ARM: dts: exynos: Don't overheat the Odroid XU3-Lite on high load
      ARM: dts: exynos: Add cooling levels for Exynos5422/5800 CPUs
      ...

commit 3b2d3dc9fbad869a36bacfc976b5ddd18d2a3f2c
Author: Nishanth Menon <nm@ti.com>
Date:   Fri Feb 5 10:37:17 2016 -0800

    ARM: keystone: Create new binding for K2G SoC
    
    K2G SoC family is the newest version of the Keystone family of processors.
    
    The technical reference manual for K2G can be found here:
    http://www.ti.com/lit/ug/spruhy8/spruhy8.pdf
    
    Add new bindings for K2G and the K2G evm. Also document these new bindings.
    
    Acked-by: Rob Herring <robh@kernel.org>
    Signed-off-by: Nishanth Menon <nm@ti.com>
    Signed-off-by: Franklin S Cooper Jr <fcooper@ti.com>
    Signed-off-by: Santosh Shilimkar <ssantosh@kernel.org>

diff --git a/arch/arm/mach-keystone/keystone.c b/arch/arm/mach-keystone/keystone.c
index c279293f084c..55cb1997afca 100644
--- a/arch/arm/mach-keystone/keystone.c
+++ b/arch/arm/mach-keystone/keystone.c
@@ -100,6 +100,7 @@ static const char *const keystone_match[] __initconst = {
 	"ti,k2hk",
 	"ti,k2e",
 	"ti,k2l",
+	"ti,k2g",
 	"ti,keystone",
 	NULL,
 };

commit 2841029393fad551b49b6de34d44bfa9ef256441
Author: Russell King <rmk+kernel@arm.linux.org.uk>
Date:   Mon Jan 11 17:15:58 2016 +0000

    ARM: make virt_to_idmap() return unsigned long
    
    Make virt_to_idmap() return an unsigned long rather than phys_addr_t.
    
    Returning phys_addr_t here makes no sense, because the definition of
    virt_to_idmap() is that it shall return a physical address which maps
    identically with the virtual address.  Since virtual addresses are
    limited to 32-bit, identity mapped physical addresses are as well.
    
    Almost all users already had an implicit narrowing cast to unsigned long
    so let's make this official and part of this interface.
    
    Tested-by: Grygorii Strashko <grygorii.strashko@ti.com>
    Signed-off-by: Russell King <rmk+kernel@arm.linux.org.uk>

diff --git a/arch/arm/mach-keystone/keystone.c b/arch/arm/mach-keystone/keystone.c
index c279293f084c..d80879ce4963 100644
--- a/arch/arm/mach-keystone/keystone.c
+++ b/arch/arm/mach-keystone/keystone.c
@@ -63,7 +63,7 @@ static void __init keystone_init(void)
 	of_platform_populate(NULL, of_default_bus_match_table, NULL, NULL);
 }
 
-static phys_addr_t keystone_virt_to_idmap(unsigned long x)
+static unsigned long keystone_virt_to_idmap(unsigned long x)
 {
 	return (phys_addr_t)(x) - CONFIG_PAGE_OFFSET + KEYSTONE_LOW_PHYS_START;
 }

commit 01cf228b555b323bba9c76f96c07fb93f1064cba
Author: Nishanth Menon <nm@ti.com>
Date:   Sat Oct 3 17:02:56 2015 -0700

    ARM: keystone: Update compatible to have SoC specific matches
    
    With future SoCs of keystone2 family, the generic compatible match
    may not be sufficient to handle SoC specific handling. So introduce
    matches based on SoC compatiblity.
    
    Signed-off-by: Nishanth Menon <nm@ti.com>
    Signed-off-by: Santosh Shilimkar <ssantosh@kernel.org>

diff --git a/arch/arm/mach-keystone/keystone.c b/arch/arm/mach-keystone/keystone.c
index e288010522f9..c279293f084c 100644
--- a/arch/arm/mach-keystone/keystone.c
+++ b/arch/arm/mach-keystone/keystone.c
@@ -97,6 +97,9 @@ static long long __init keystone_pv_fixup(void)
 }
 
 static const char *const keystone_match[] __initconst = {
+	"ti,k2hk",
+	"ti,k2e",
+	"ti,k2l",
 	"ti,keystone",
 	NULL,
 };

commit c0b759d87eab301af0380f5459057656178e78cf
Author: Russell King <rmk+kernel@arm.linux.org.uk>
Date:   Sat Apr 4 10:01:10 2015 +0100

    ARM: keystone2: rename init_meminfo to pv_fixup
    
    The init_meminfo() method is not about initialising meminfo - it's about
    fixing up the physical to virtual translation so that we use a different
    physical address space, possibly above the 4GB physical address space.
    Therefore, the name "init_meminfo()" is confusing.
    
    Rename it to pv_fixup() instead.
    
    Acked-by: Santosh Shilimkar <ssantosh@kernel.org>
    Tested-by: Murali Karicheri <m-karicheri2@ti.com>
    Signed-off-by: Russell King <rmk+kernel@arm.linux.org.uk>

diff --git a/arch/arm/mach-keystone/keystone.c b/arch/arm/mach-keystone/keystone.c
index af8c92bc8188..e288010522f9 100644
--- a/arch/arm/mach-keystone/keystone.c
+++ b/arch/arm/mach-keystone/keystone.c
@@ -68,7 +68,7 @@ static phys_addr_t keystone_virt_to_idmap(unsigned long x)
 	return (phys_addr_t)(x) - CONFIG_PAGE_OFFSET + KEYSTONE_LOW_PHYS_START;
 }
 
-static long long __init keystone_init_meminfo(void)
+static long long __init keystone_pv_fixup(void)
 {
 	long long offset;
 	phys_addr_t mem_start, mem_end;
@@ -108,5 +108,5 @@ DT_MACHINE_START(KEYSTONE, "Keystone")
 	.smp		= smp_ops(keystone_smp_ops),
 	.init_machine	= keystone_init,
 	.dt_compat	= keystone_match,
-	.init_meminfo   = keystone_init_meminfo,
+	.pv_fixup	= keystone_pv_fixup,
 MACHINE_END

commit 39b74fe82f734ac0bec726733805bb7d46c95933
Author: Russell King <rmk+kernel@arm.linux.org.uk>
Date:   Sat Apr 4 10:25:28 2015 +0100

    ARM: keystone2: move address space switch printk into generic code
    
    There is no point platform code doing this, let's move it into the
    generic code so it doesn't get duplicated.
    
    Acked-by: Santosh Shilimkar <ssantosh@kernel.org>
    Tested-by: Murali Karicheri <m-karicheri2@ti.com>
    Signed-off-by: Russell King <rmk+kernel@arm.linux.org.uk>

diff --git a/arch/arm/mach-keystone/keystone.c b/arch/arm/mach-keystone/keystone.c
index baa0fbc9803a..af8c92bc8188 100644
--- a/arch/arm/mach-keystone/keystone.c
+++ b/arch/arm/mach-keystone/keystone.c
@@ -93,9 +93,6 @@ static long long __init keystone_init_meminfo(void)
 	/* Populate the arch idmap hook */
 	arch_virt_to_idmap = keystone_virt_to_idmap;
 
-	pr_info("Switching to high address space at 0x%llx\n",
-	        (u64)PHYS_OFFSET + (u64)offset);
-
 	return offset;
 }
 

commit c8ca2b4b29282605698968d15667939b23e208e2
Author: Russell King <rmk+kernel@arm.linux.org.uk>
Date:   Sat Apr 4 09:53:38 2015 +0100

    ARM: keystone2: move update of the phys-to-virt constants into generic code
    
    Make the init_meminfo function return the offset to be applied to the
    phys-to-virt translation constants.  This allows us to move the update
    into generic code, along with the requirements for this update.
    
    This avoids platforms having to know the details of the phys-to-virt
    translation support.
    
    Acked-by: Santosh Shilimkar <ssantosh@kernel.org>
    Tested-by: Murali Karicheri <m-karicheri2@ti.com>
    Signed-off-by: Russell King <rmk+kernel@arm.linux.org.uk>

diff --git a/arch/arm/mach-keystone/keystone.c b/arch/arm/mach-keystone/keystone.c
index 3d58a8f4dc7e..baa0fbc9803a 100644
--- a/arch/arm/mach-keystone/keystone.c
+++ b/arch/arm/mach-keystone/keystone.c
@@ -68,11 +68,9 @@ static phys_addr_t keystone_virt_to_idmap(unsigned long x)
 	return (phys_addr_t)(x) - CONFIG_PAGE_OFFSET + KEYSTONE_LOW_PHYS_START;
 }
 
-static void __init keystone_init_meminfo(void)
+static long long __init keystone_init_meminfo(void)
 {
-	bool lpae = IS_ENABLED(CONFIG_ARM_LPAE);
-	bool pvpatch = IS_ENABLED(CONFIG_ARM_PATCH_PHYS_VIRT);
-	phys_addr_t offset = PHYS_OFFSET - KEYSTONE_LOW_PHYS_START;
+	long long offset;
 	phys_addr_t mem_start, mem_end;
 
 	mem_start = memblock_start_of_DRAM();
@@ -81,29 +79,24 @@ static void __init keystone_init_meminfo(void)
 	/* nothing to do if we are running out of the <32-bit space */
 	if (mem_start >= KEYSTONE_LOW_PHYS_START &&
 	    mem_end   <= KEYSTONE_LOW_PHYS_END)
-		return;
-
-	if (!lpae || !pvpatch) {
-		pr_crit("Enable %s%s%s to run outside 32-bit space\n",
-		      !lpae ? __stringify(CONFIG_ARM_LPAE) : "",
-		      (!lpae && !pvpatch) ? " and " : "",
-		      !pvpatch ? __stringify(CONFIG_ARM_PATCH_PHYS_VIRT) : "");
-	}
+		return 0;
 
 	if (mem_start < KEYSTONE_HIGH_PHYS_START ||
 	    mem_end   > KEYSTONE_HIGH_PHYS_END) {
 		pr_crit("Invalid address space for memory (%08llx-%08llx)\n",
-		      (u64)mem_start, (u64)mem_end);
+		        (u64)mem_start, (u64)mem_end);
+		return 0;
 	}
 
-	offset += KEYSTONE_HIGH_PHYS_START;
-	__pv_phys_pfn_offset = PFN_DOWN(offset);
-	__pv_offset = (offset - PAGE_OFFSET);
+	offset = KEYSTONE_HIGH_PHYS_START - KEYSTONE_LOW_PHYS_START;
 
 	/* Populate the arch idmap hook */
 	arch_virt_to_idmap = keystone_virt_to_idmap;
 
-	pr_info("Switching to high address space at 0x%llx\n", (u64)offset);
+	pr_info("Switching to high address space at 0x%llx\n",
+	        (u64)PHYS_OFFSET + (u64)offset);
+
+	return offset;
 }
 
 static const char *const keystone_match[] __initconst = {

commit 30b5f4d6128e12c17a0e54cac685a048c3d8d862
Author: Russell King <rmk+kernel@arm.linux.org.uk>
Date:   Sat Apr 4 11:30:04 2015 +0100

    ARM: keystone2: move platform notifier initialisation into platform init
    
    We ideally want the init_meminfo function to do nothing but return the
    delta to be applied to PHYS_OFFSET - it should do nothing else.  As we
    can detect in platform init code whether we are running in the high
    physical address space, move the platform notifier initialisation
    entirely into the platform init code.
    
    Acked-by: Santosh Shilimkar <ssantosh@kernel.org>
    Tested-by: Murali Karicheri <m-karicheri2@ti.com>
    Signed-off-by: Russell King <rmk+kernel@arm.linux.org.uk>

diff --git a/arch/arm/mach-keystone/keystone.c b/arch/arm/mach-keystone/keystone.c
index 06620875813a..3d58a8f4dc7e 100644
--- a/arch/arm/mach-keystone/keystone.c
+++ b/arch/arm/mach-keystone/keystone.c
@@ -27,7 +27,6 @@
 
 #include "keystone.h"
 
-static struct notifier_block platform_nb;
 static unsigned long keystone_dma_pfn_offset __read_mostly;
 
 static int keystone_platform_notifier(struct notifier_block *nb,
@@ -49,11 +48,18 @@ static int keystone_platform_notifier(struct notifier_block *nb,
 	return NOTIFY_OK;
 }
 
+static struct notifier_block platform_nb = {
+	.notifier_call = keystone_platform_notifier,
+};
+
 static void __init keystone_init(void)
 {
-	keystone_pm_runtime_init();
-	if (platform_nb.notifier_call)
+	if (PHYS_OFFSET >= KEYSTONE_HIGH_PHYS_START) {
+		keystone_dma_pfn_offset = PFN_DOWN(KEYSTONE_HIGH_PHYS_START -
+						   KEYSTONE_LOW_PHYS_START);
 		bus_register_notifier(&platform_bus_type, &platform_nb);
+	}
+	keystone_pm_runtime_init();
 	of_platform_populate(NULL, of_default_bus_match_table, NULL, NULL);
 }
 
@@ -96,9 +102,6 @@ static void __init keystone_init_meminfo(void)
 
 	/* Populate the arch idmap hook */
 	arch_virt_to_idmap = keystone_virt_to_idmap;
-	platform_nb.notifier_call = keystone_platform_notifier;
-	keystone_dma_pfn_offset = PFN_DOWN(KEYSTONE_HIGH_PHYS_START -
-						KEYSTONE_LOW_PHYS_START);
 
 	pr_info("Switching to high address space at 0x%llx\n", (u64)offset);
 }

commit 543c5040f564c80fe59ae82a60fc061055d04a41
Author: Uwe Kleine-König <u.kleine-koenig@pengutronix.de>
Date:   Wed Feb 18 21:01:45 2015 +0100

    ARM: make arrays containing machine compatible strings const
    
    The definition
    
            static const char *axxia_dt_match[] __initconst = {
                    ...
    
    defines a changable array of constant strings. That is you must not do:
    
            *axxia_dt_match[0] = 'k';
    
    but
    
            axxia_dt_match[0] = "different string";
    
    is fine. So the annotation __initconst is wrong and yields a compiler
    error when other really const variables are added with __initconst.
    
    As the struct machine_desc member dt_compat is declared as
    
            const char *const *dt_compat;
    
    making the arrays const is the better alternative over changing all
    annotations to __initdata.
    
    Signed-off-by: Uwe Kleine-König <u.kleine-koenig@pengutronix.de>
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>

diff --git a/arch/arm/mach-keystone/keystone.c b/arch/arm/mach-keystone/keystone.c
index 7f352de26099..06620875813a 100644
--- a/arch/arm/mach-keystone/keystone.c
+++ b/arch/arm/mach-keystone/keystone.c
@@ -103,7 +103,7 @@ static void __init keystone_init_meminfo(void)
 	pr_info("Switching to high address space at 0x%llx\n", (u64)offset);
 }
 
-static const char *keystone_match[] __initconst = {
+static const char *const keystone_match[] __initconst = {
 	"ti,keystone",
 	NULL,
 };

commit bbea06f3efbae5776e6c285fea59fd249eec44ff
Author: Santosh Shilimkar <santosh.shilimkar@ti.com>
Date:   Thu Jun 5 15:22:52 2014 -0400

    ARM: keystone: Drop use of meminfo since its not available anymore
    
    Laura's series removed the meminfo structure and its no longer available.
    Update keystone code to remove the usage of it.
    
    Reported-by: Russell King - ARM Linux <linux@arm.linux.org.uk>
    Signed-off-by: Santosh Shilimkar <santosh.shilimkar@ti.com>
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>

diff --git a/arch/arm/mach-keystone/keystone.c b/arch/arm/mach-keystone/keystone.c
index 1f9ae89ee06d..7f352de26099 100644
--- a/arch/arm/mach-keystone/keystone.c
+++ b/arch/arm/mach-keystone/keystone.c
@@ -14,6 +14,7 @@
 #include <linux/init.h>
 #include <linux/of_platform.h>
 #include <linux/of_address.h>
+#include <linux/memblock.h>
 
 #include <asm/setup.h>
 #include <asm/mach/map.h>
@@ -68,9 +69,8 @@ static void __init keystone_init_meminfo(void)
 	phys_addr_t offset = PHYS_OFFSET - KEYSTONE_LOW_PHYS_START;
 	phys_addr_t mem_start, mem_end;
 
-	BUG_ON(meminfo.nr_banks < 1);
-	mem_start = meminfo.bank[0].start;
-	mem_end = mem_start + meminfo.bank[0].size - 1;
+	mem_start = memblock_start_of_DRAM();
+	mem_end = memblock_end_of_DRAM();
 
 	/* nothing to do if we are running out of the <32-bit space */
 	if (mem_start >= KEYSTONE_LOW_PHYS_START &&

commit b7ae8bf7bf3c9db304aa582e5c26fc74ae636998
Author: Ivan Khoronzhuk <ivan.khoronzhuk@ti.com>
Date:   Fri May 23 16:53:58 2014 -0400

    ARM: keystone: remove redundant reset stuff
    
    Remove reset stuff in flavour of using keystone reset driver:
    driver/power/reset/keystone-reset.c
    
    Reviewed-by: Arnd Bergmann <arnd@arndb.de>
    Signed-off-by: Ivan Khoronzhuk <ivan.khoronzhuk@ti.com>
    Signed-off-by: Santosh Shilimkar <santosh.shilimkar@ti.com>

diff --git a/arch/arm/mach-keystone/keystone.c b/arch/arm/mach-keystone/keystone.c
index 59b8383cbdb0..1f9ae89ee06d 100644
--- a/arch/arm/mach-keystone/keystone.c
+++ b/arch/arm/mach-keystone/keystone.c
@@ -26,11 +26,6 @@
 
 #include "keystone.h"
 
-#define PLL_RESET_WRITE_KEY_MASK		0xffff0000
-#define PLL_RESET_WRITE_KEY			0x5a69
-#define PLL_RESET				BIT(16)
-
-static void __iomem *keystone_rstctrl;
 static struct notifier_block platform_nb;
 static unsigned long keystone_dma_pfn_offset __read_mostly;
 
@@ -55,16 +50,6 @@ static int keystone_platform_notifier(struct notifier_block *nb,
 
 static void __init keystone_init(void)
 {
-	struct device_node *node;
-
-	node = of_find_compatible_node(NULL, NULL, "ti,keystone-reset");
-	if (WARN_ON(!node))
-		pr_warn("ti,keystone-reset node undefined\n");
-
-	keystone_rstctrl = of_iomap(node, 0);
-	if (WARN_ON(!keystone_rstctrl))
-		pr_warn("ti,keystone-reset iomap error\n");
-
 	keystone_pm_runtime_init();
 	if (platform_nb.notifier_call)
 		bus_register_notifier(&platform_bus_type, &platform_nb);
@@ -123,24 +108,6 @@ static const char *keystone_match[] __initconst = {
 	NULL,
 };
 
-void keystone_restart(enum reboot_mode mode, const char *cmd)
-{
-	u32 val;
-
-	BUG_ON(!keystone_rstctrl);
-
-	/* Enable write access to RSTCTRL */
-	val = readl(keystone_rstctrl);
-	val &= PLL_RESET_WRITE_KEY_MASK;
-	val |= PLL_RESET_WRITE_KEY;
-	writel(val, keystone_rstctrl);
-
-	/* Reset the SOC */
-	val = readl(keystone_rstctrl);
-	val &= ~PLL_RESET;
-	writel(val, keystone_rstctrl);
-}
-
 DT_MACHINE_START(KEYSTONE, "Keystone")
 #if defined(CONFIG_ZONE_DMA) && defined(CONFIG_ARM_LPAE)
 	.dma_zone_size	= SZ_2G,
@@ -148,6 +115,5 @@ DT_MACHINE_START(KEYSTONE, "Keystone")
 	.smp		= smp_ops(keystone_smp_ops),
 	.init_machine	= keystone_init,
 	.dt_compat	= keystone_match,
-	.restart	= keystone_restart,
 	.init_meminfo   = keystone_init_meminfo,
 MACHINE_END

commit 14f3791439b5a6cf12127fb80204265533d92664
Author: Santosh Shilimkar <santosh.shilimkar@ti.com>
Date:   Mon Feb 24 17:32:59 2014 +0200

    ARM: keystone: Update the dma offset for non-dt platform devices
    
    Tested-by: Grygorii Strashko <grygorii.strashko@ti.com>
    Signed-off-by: Santosh Shilimkar <santosh.shilimkar@ti.com>

diff --git a/arch/arm/mach-keystone/keystone.c b/arch/arm/mach-keystone/keystone.c
index 155eb062e8d1..59b8383cbdb0 100644
--- a/arch/arm/mach-keystone/keystone.c
+++ b/arch/arm/mach-keystone/keystone.c
@@ -31,6 +31,27 @@
 #define PLL_RESET				BIT(16)
 
 static void __iomem *keystone_rstctrl;
+static struct notifier_block platform_nb;
+static unsigned long keystone_dma_pfn_offset __read_mostly;
+
+static int keystone_platform_notifier(struct notifier_block *nb,
+				      unsigned long event, void *data)
+{
+	struct device *dev = data;
+
+	if (event != BUS_NOTIFY_ADD_DEVICE)
+		return NOTIFY_DONE;
+
+	if (!dev)
+		return NOTIFY_BAD;
+
+	if (!dev->of_node) {
+		dev->dma_pfn_offset = keystone_dma_pfn_offset;
+		dev_err(dev, "set dma_pfn_offset%08lx\n",
+			dev->dma_pfn_offset);
+	}
+	return NOTIFY_OK;
+}
 
 static void __init keystone_init(void)
 {
@@ -45,6 +66,8 @@ static void __init keystone_init(void)
 		pr_warn("ti,keystone-reset iomap error\n");
 
 	keystone_pm_runtime_init();
+	if (platform_nb.notifier_call)
+		bus_register_notifier(&platform_bus_type, &platform_nb);
 	of_platform_populate(NULL, of_default_bus_match_table, NULL, NULL);
 }
 
@@ -88,6 +111,9 @@ static void __init keystone_init_meminfo(void)
 
 	/* Populate the arch idmap hook */
 	arch_virt_to_idmap = keystone_virt_to_idmap;
+	platform_nb.notifier_call = keystone_platform_notifier;
+	keystone_dma_pfn_offset = PFN_DOWN(KEYSTONE_HIGH_PHYS_START -
+						KEYSTONE_LOW_PHYS_START);
 
 	pr_info("Switching to high address space at 0x%llx\n", (u64)offset);
 }

commit 5eb3da7246a5b2dfac9f38a7be62b1a0295584c7
Author: Santosh Shilimkar <santosh.shilimkar@ti.com>
Date:   Thu Jun 13 19:24:39 2013 -0400

    ARM: keystone: Switch over to coherent memory address space
    
    With late code patching updates for LPAE machines has merged now and
    memblock conversion from bootmem is on its way, Keystone can switch to
    the coherent memory address space which starts beyond 4GB boundary.
    The idmap alias needs are managed via virt_to_idmap() for boot purpose.
    
    Tested-by: Grygorii Strashko <grygorii.strashko@ti.com>
    Signed-off-by: Santosh Shilimkar <santosh.shilimkar@ti.com>

diff --git a/arch/arm/mach-keystone/keystone.c b/arch/arm/mach-keystone/keystone.c
index e0b9e1b9cf30..155eb062e8d1 100644
--- a/arch/arm/mach-keystone/keystone.c
+++ b/arch/arm/mach-keystone/keystone.c
@@ -20,6 +20,9 @@
 #include <asm/mach/arch.h>
 #include <asm/mach/time.h>
 #include <asm/smp_plat.h>
+#include <asm/memory.h>
+
+#include "memory.h"
 
 #include "keystone.h"
 
@@ -45,6 +48,50 @@ static void __init keystone_init(void)
 	of_platform_populate(NULL, of_default_bus_match_table, NULL, NULL);
 }
 
+static phys_addr_t keystone_virt_to_idmap(unsigned long x)
+{
+	return (phys_addr_t)(x) - CONFIG_PAGE_OFFSET + KEYSTONE_LOW_PHYS_START;
+}
+
+static void __init keystone_init_meminfo(void)
+{
+	bool lpae = IS_ENABLED(CONFIG_ARM_LPAE);
+	bool pvpatch = IS_ENABLED(CONFIG_ARM_PATCH_PHYS_VIRT);
+	phys_addr_t offset = PHYS_OFFSET - KEYSTONE_LOW_PHYS_START;
+	phys_addr_t mem_start, mem_end;
+
+	BUG_ON(meminfo.nr_banks < 1);
+	mem_start = meminfo.bank[0].start;
+	mem_end = mem_start + meminfo.bank[0].size - 1;
+
+	/* nothing to do if we are running out of the <32-bit space */
+	if (mem_start >= KEYSTONE_LOW_PHYS_START &&
+	    mem_end   <= KEYSTONE_LOW_PHYS_END)
+		return;
+
+	if (!lpae || !pvpatch) {
+		pr_crit("Enable %s%s%s to run outside 32-bit space\n",
+		      !lpae ? __stringify(CONFIG_ARM_LPAE) : "",
+		      (!lpae && !pvpatch) ? " and " : "",
+		      !pvpatch ? __stringify(CONFIG_ARM_PATCH_PHYS_VIRT) : "");
+	}
+
+	if (mem_start < KEYSTONE_HIGH_PHYS_START ||
+	    mem_end   > KEYSTONE_HIGH_PHYS_END) {
+		pr_crit("Invalid address space for memory (%08llx-%08llx)\n",
+		      (u64)mem_start, (u64)mem_end);
+	}
+
+	offset += KEYSTONE_HIGH_PHYS_START;
+	__pv_phys_pfn_offset = PFN_DOWN(offset);
+	__pv_offset = (offset - PAGE_OFFSET);
+
+	/* Populate the arch idmap hook */
+	arch_virt_to_idmap = keystone_virt_to_idmap;
+
+	pr_info("Switching to high address space at 0x%llx\n", (u64)offset);
+}
+
 static const char *keystone_match[] __initconst = {
 	"ti,keystone",
 	NULL,
@@ -76,4 +123,5 @@ DT_MACHINE_START(KEYSTONE, "Keystone")
 	.init_machine	= keystone_init,
 	.dt_compat	= keystone_match,
 	.restart	= keystone_restart,
+	.init_meminfo   = keystone_init_meminfo,
 MACHINE_END

commit 3babe30608dcfec811d64268bd9dc30b7c638e69
Author: Ivan Khoronzhuk <ivan.khoronzhuk@ti.com>
Date:   Thu Mar 20 17:00:27 2014 -0400

    ARM: dts: keystone: use common "ti,keystone" compatible instead of -evm
    
    As suggested by Olof Johansson at
    http://www.spinics.net/lists/arm-kernel/msg314009.html.
    It be better just keeping a "ti,keystone" top-level compatible and
    just using that to probe. If so we don't have to touch the file
    for new boards in the future.
    
    So use common "ti,keystone" compatible in keystone.c for all boards.
    
    Cc: Santosh Shilimkar <santosh.shilimkar@ti.com>
    Cc: Olof Johansson <olof@lixom.net>
    
    Signed-off-by: Ivan Khoronzhuk <ivan.khoronzhuk@ti.com>
    Signed-off-by: Santosh Shilimkar <santosh.shilimkar@ti.com>

diff --git a/arch/arm/mach-keystone/keystone.c b/arch/arm/mach-keystone/keystone.c
index aa0d2121449f..e0b9e1b9cf30 100644
--- a/arch/arm/mach-keystone/keystone.c
+++ b/arch/arm/mach-keystone/keystone.c
@@ -46,10 +46,7 @@ static void __init keystone_init(void)
 }
 
 static const char *keystone_match[] __initconst = {
-	"ti,keystone-evm",
-	"ti,k2hk-evm",
-	"ti,k2l-evm",
-	"ti,k2e-evm",
+	"ti,keystone",
 	NULL,
 };
 

commit f0a289e5086c525eb8ed835ba2d1c5a8a16c04f0
Author: Murali Karicheri <m-karicheri2@ti.com>
Date:   Fri Feb 21 17:48:41 2014 -0500

    ARM: dts: keystone: update for supporting K2L/K2E EVMs
    
    This patch add compatibility strings for k2hk, k2l and k2e EVMs
    
    Cc: Olof Johansson <olof@lixom.net>
    Cc: Arnd Bergmann <arnd@arndb.de>
    Cc: Rob Herring <robh+dt@kernel.org>
    Cc: Kumar Gala <galak@codeaurora.org>
    Cc: Mark Rutland <mark.rutland@arm.com>
    Signed-off-by: Murali Karicheri <m-karicheri2@ti.com>
    Signed-off-by: Santosh Shilimkar <santosh.shilimkar@ti.com>

diff --git a/arch/arm/mach-keystone/keystone.c b/arch/arm/mach-keystone/keystone.c
index 6e6bb7d5ea30..aa0d2121449f 100644
--- a/arch/arm/mach-keystone/keystone.c
+++ b/arch/arm/mach-keystone/keystone.c
@@ -47,6 +47,9 @@ static void __init keystone_init(void)
 
 static const char *keystone_match[] __initconst = {
 	"ti,keystone-evm",
+	"ti,k2hk-evm",
+	"ti,k2l-evm",
+	"ti,k2e-evm",
 	NULL,
 };
 

commit 8308a78db84b047a223c2c753f3cdad77970f81a
Author: Santosh Shilimkar <santosh.shilimkar@ti.com>
Date:   Sat Nov 23 17:08:03 2013 -0500

    ARM: keystone: Make PM bus ready before populating platform devices
    
    Keystone PM bus makes use of generic PM clock core backend. Since
    generic PM clock core uses platform bus notifiers to track events like
    ADD_DEVICE/DEL_DEVICE and to fill clock lists per each device, we need
    to initialise Keystone PM domains before the platform devices have been
    created.
    
    Hence, fix it by moving keystone_pm_runtime_init() before platform
    devices have been populated.
    
    Reported-by: Grygorii Strashko <grygorii.strashko@ti.com>
    Signed-off-by: Santosh Shilimkar <santosh.shilimkar@ti.com>

diff --git a/arch/arm/mach-keystone/keystone.c b/arch/arm/mach-keystone/keystone.c
index 2fe4dd04996c..6e6bb7d5ea30 100644
--- a/arch/arm/mach-keystone/keystone.c
+++ b/arch/arm/mach-keystone/keystone.c
@@ -41,6 +41,7 @@ static void __init keystone_init(void)
 	if (WARN_ON(!keystone_rstctrl))
 		pr_warn("ti,keystone-reset iomap error\n");
 
+	keystone_pm_runtime_init();
 	of_platform_populate(NULL, of_default_bus_match_table, NULL, NULL);
 }
 

commit df595a9d70fc3d1f4435b4a643bfaab9913c0ebd
Author: Santosh Shilimkar <santosh.shilimkar@ti.com>
Date:   Sat Nov 23 16:58:03 2013 -0500

    ARM: keystone: enable DMA zone for LPAE
    
    Keystone II peripheral devices support 32-bit DMA and hence can access only
    first 2GB of the memory address space. So set the platform dma_zone_size
    to handle that case.
    
    Signed-off-by: Santosh Shilimkar <santosh.shilimkar@ti.com>

diff --git a/arch/arm/mach-keystone/keystone.c b/arch/arm/mach-keystone/keystone.c
index b661c5c2870a..2fe4dd04996c 100644
--- a/arch/arm/mach-keystone/keystone.c
+++ b/arch/arm/mach-keystone/keystone.c
@@ -68,6 +68,9 @@ void keystone_restart(enum reboot_mode mode, const char *cmd)
 }
 
 DT_MACHINE_START(KEYSTONE, "Keystone")
+#if defined(CONFIG_ZONE_DMA) && defined(CONFIG_ARM_LPAE)
+	.dma_zone_size	= SZ_2G,
+#endif
 	.smp		= smp_ops(keystone_smp_ops),
 	.init_machine	= keystone_init,
 	.dt_compat	= keystone_match,

commit ed882c3e72d6037589baa4328585c2b0450e673c
Author: Vincent Stehlé <vincent.stehle@freescale.com>
Date:   Thu Jun 27 14:49:27 2013 +0200

    ARM: keystone: fix compilation warning
    
    Fix the following compilation warning:
    
      arch/arm/mach-keystone/keystone.c:74:2: warning: initialization from incompatible pointer type [enabled by default]
      arch/arm/mach-keystone/keystone.c:74:2: warning: (near initialization for ‘__mach_desc_KEYSTONE.restart’) [enabled by default]
    
    Signed-off-by: Vincent Stehlé <vincent.stehle@freescale.com>
    Cc: Robin Holt <holt@sgi.com>
    Cc: Russell King <linux@arm.linux.org.uk>
    Cc: trivial@kernel.org
    Signed-off-by: Olof Johansson <olof@lixom.net>

diff --git a/arch/arm/mach-keystone/keystone.c b/arch/arm/mach-keystone/keystone.c
index fe4d9ff93a7e..b661c5c2870a 100644
--- a/arch/arm/mach-keystone/keystone.c
+++ b/arch/arm/mach-keystone/keystone.c
@@ -49,7 +49,7 @@ static const char *keystone_match[] __initconst = {
 	NULL,
 };
 
-void keystone_restart(char mode, const char *cmd)
+void keystone_restart(enum reboot_mode mode, const char *cmd)
 {
 	u32 val;
 

commit f07cb6a089644e2334c3523af589d9233cc18c74
Author: Santosh Shilimkar <santosh.shilimkar@ti.com>
Date:   Mon Jun 10 12:20:17 2013 -0400

    ARM: keystone: Enable SMP support on Keystone machines
    
    Add basic SMP support for Keystone machines. This does not
    include support for CPU hotplug for now.
    
    Cc: Arnd Bergmann <arnd@arndb.de>
    Cc: arm@kernel.org
    
    Acked-by: Olof Johansson <olof@lixom.net>
    Signed-off-by: Santosh Shilimkar <santosh.shilimkar@ti.com>

diff --git a/arch/arm/mach-keystone/keystone.c b/arch/arm/mach-keystone/keystone.c
index a67c19b8be20..fe4d9ff93a7e 100644
--- a/arch/arm/mach-keystone/keystone.c
+++ b/arch/arm/mach-keystone/keystone.c
@@ -19,6 +19,9 @@
 #include <asm/mach/map.h>
 #include <asm/mach/arch.h>
 #include <asm/mach/time.h>
+#include <asm/smp_plat.h>
+
+#include "keystone.h"
 
 #define PLL_RESET_WRITE_KEY_MASK		0xffff0000
 #define PLL_RESET_WRITE_KEY			0x5a69
@@ -65,6 +68,7 @@ void keystone_restart(char mode, const char *cmd)
 }
 
 DT_MACHINE_START(KEYSTONE, "Keystone")
+	.smp		= smp_ops(keystone_smp_ops),
 	.init_machine	= keystone_init,
 	.dt_compat	= keystone_match,
 	.restart	= keystone_restart,

commit 828989ad87af15b555f783a70efa2cc526b35b3f
Author: Santosh Shilimkar <santosh.shilimkar@ti.com>
Date:   Mon Jun 10 11:27:13 2013 -0400

    ARM: keystone: Add minimal TI Keystone platform support
    
    Texas Instruments Keystone family of multi-core devices are
    based on ARM Cortex A15. Patch adds basic definitions for a
    new Keystone sub-architecture in ARM.
    
    The TCI66xxK2H Communications Infrastructure Keystone SoCs
    are member of the C66x family based on TI's new KeyStone 2
    multi-core SoC Architecture designed specifically for high
    performance wireless and networking infrastructure applications.
    The SOCs contains many subsystems like Cortex A15 ARM CorePacs,
    C66XX DSP CorePacs, MSMC memory controller, Tera Net bus,
    IP Network, Navigator, Hyperlink, 1G/10G Ethernet, Radio layers
    and queue based communication systems.
    
    Cc: Arnd Bergmann <arnd@arndb.de>
    Cc: arm@kernel.org
    
    Acked-by: Olof Johansson <olof@lixom.net>
    Signed-off-by: Santosh Shilimkar <santosh.shilimkar@ti.com>

diff --git a/arch/arm/mach-keystone/keystone.c b/arch/arm/mach-keystone/keystone.c
new file mode 100644
index 000000000000..a67c19b8be20
--- /dev/null
+++ b/arch/arm/mach-keystone/keystone.c
@@ -0,0 +1,71 @@
+/*
+ * Keystone2 based boards and SOC related code.
+ *
+ * Copyright 2013 Texas Instruments, Inc.
+ *	Cyril Chemparathy <cyril@ti.com>
+ *	Santosh Shilimkar <santosh.shillimkar@ti.com>
+ *
+ * This program is free software; you can redistribute it and/or modify it
+ * under the terms and conditions of the GNU General Public License,
+ * version 2, as published by the Free Software Foundation.
+ */
+#include <linux/io.h>
+#include <linux/of.h>
+#include <linux/init.h>
+#include <linux/of_platform.h>
+#include <linux/of_address.h>
+
+#include <asm/setup.h>
+#include <asm/mach/map.h>
+#include <asm/mach/arch.h>
+#include <asm/mach/time.h>
+
+#define PLL_RESET_WRITE_KEY_MASK		0xffff0000
+#define PLL_RESET_WRITE_KEY			0x5a69
+#define PLL_RESET				BIT(16)
+
+static void __iomem *keystone_rstctrl;
+
+static void __init keystone_init(void)
+{
+	struct device_node *node;
+
+	node = of_find_compatible_node(NULL, NULL, "ti,keystone-reset");
+	if (WARN_ON(!node))
+		pr_warn("ti,keystone-reset node undefined\n");
+
+	keystone_rstctrl = of_iomap(node, 0);
+	if (WARN_ON(!keystone_rstctrl))
+		pr_warn("ti,keystone-reset iomap error\n");
+
+	of_platform_populate(NULL, of_default_bus_match_table, NULL, NULL);
+}
+
+static const char *keystone_match[] __initconst = {
+	"ti,keystone-evm",
+	NULL,
+};
+
+void keystone_restart(char mode, const char *cmd)
+{
+	u32 val;
+
+	BUG_ON(!keystone_rstctrl);
+
+	/* Enable write access to RSTCTRL */
+	val = readl(keystone_rstctrl);
+	val &= PLL_RESET_WRITE_KEY_MASK;
+	val |= PLL_RESET_WRITE_KEY;
+	writel(val, keystone_rstctrl);
+
+	/* Reset the SOC */
+	val = readl(keystone_rstctrl);
+	val &= ~PLL_RESET;
+	writel(val, keystone_rstctrl);
+}
+
+DT_MACHINE_START(KEYSTONE, "Keystone")
+	.init_machine	= keystone_init,
+	.dt_compat	= keystone_match,
+	.restart	= keystone_restart,
+MACHINE_END
