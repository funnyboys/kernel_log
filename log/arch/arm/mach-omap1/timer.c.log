commit 5ca467c40c2e557af5675b6a6cf0e7d326349751
Author: Keerthy <j-keerthy@ti.com>
Date:   Thu Feb 15 11:31:44 2018 +0530

    ARM: OMAP: Move dmtimer.h out of plat-omap
    
    The header file is currently under plat-omap directory
    under arch/omap. Move this out to an accessible place.
    
    No Code changes done to the header file and renamed to timer-ti-dm.h.
    
    Signed-off-by: Keerthy <j-keerthy@ti.com>
    Reviewed-by: Sebastian Reichel <sebastian.reichel@collabora.co.uk>
    Tested-by: Ladislav Michl <ladis@linux-mips.org>
    Signed-off-by: Tony Lindgren <tony@atomide.com>

diff --git a/arch/arm/mach-omap1/timer.c b/arch/arm/mach-omap1/timer.c
index 8fb1ec6fa999..4447210c9b0d 100644
--- a/arch/arm/mach-omap1/timer.c
+++ b/arch/arm/mach-omap1/timer.c
@@ -27,7 +27,7 @@
 #include <linux/platform_device.h>
 #include <linux/platform_data/dmtimer-omap.h>
 
-#include <plat/dmtimer.h>
+#include <clocksource/timer-ti-dm.h>
 
 #include "soc.h"
 

commit 764e4ef0a8871339eeddaf27ccc47aeeea28b974
Author: Markus Elfring <elfring@users.sourceforge.net>
Date:   Thu Jun 1 22:17:03 2017 +0200

    ARM: OMAP1: Fix a typo in a comment line
    
    Adjust a line in this description for the software module.
    
    Signed-off-by: Markus Elfring <elfring@users.sourceforge.net>
    Signed-off-by: Tony Lindgren <tony@atomide.com>

diff --git a/arch/arm/mach-omap1/timer.c b/arch/arm/mach-omap1/timer.c
index 637f8c9d9f10..8fb1ec6fa999 100644
--- a/arch/arm/mach-omap1/timer.c
+++ b/arch/arm/mach-omap1/timer.c
@@ -3,7 +3,7 @@
  *
  * Contains first level initialization routines which internally
  * generates timer device information and registers with linux
- * device model. It also has low level function to chnage the timer
+ * device model. It also has a low level function to change the timer
  * input clock source.
  *
  * Copyright (C) 2011 Texas Instruments Incorporated - http://www.ti.com/

commit a9e317c388d48da80fc266f06dc6298cbd790b8c
Author: Markus Elfring <elfring@users.sourceforge.net>
Date:   Thu Jun 1 22:04:29 2017 +0200

    ARM: OMAP1: Delete an error message for a failed memory allocation in omap1_dm_timer_init()
    
    Omit an extra message for a memory allocation failure in this function.
    
    This issue was detected by using the Coccinelle software.
    
    Link: http://events.linuxfoundation.org/sites/events/files/slides/LCJ16-Refactor_Strings-WSang_0.pdf
    Signed-off-by: Markus Elfring <elfring@users.sourceforge.net>
    Signed-off-by: Tony Lindgren <tony@atomide.com>

diff --git a/arch/arm/mach-omap1/timer.c b/arch/arm/mach-omap1/timer.c
index 06c5ba7574a5..637f8c9d9f10 100644
--- a/arch/arm/mach-omap1/timer.c
+++ b/arch/arm/mach-omap1/timer.c
@@ -134,8 +134,6 @@ static int __init omap1_dm_timer_init(void)
 
 		pdata = kzalloc(sizeof(*pdata), GFP_KERNEL);
 		if (!pdata) {
-			dev_err(&pdev->dev, "%s: Failed to allocate pdata.\n",
-				__func__);
 			ret = -ENOMEM;
 			goto err_free_pdata;
 		}

commit 685e2d08c54b1a1bf31bbe6562f06db089d31c7b
Author: Tony Lindgren <tony@atomide.com>
Date:   Wed May 20 09:01:21 2015 -0700

    ARM: OMAP1: Change interrupt numbering for sparse IRQ
    
    Change interrupt numbering for sparse IRQ. We do this using
    a fixed offset until we can drop irqs.h once all it's users
    have been updated.
    
    Note that this depends on the GPIO fix for the MPUIO IRQs
    "gpio: omap: Fix regression for MPUIO interrupts".
    
    Also note that this patch adds some extra irq alloc warnings
    that will go away when we stop calling irq_alloc_descs
    in gpio-omap.c with a follow-up patch.
    
    Cc: Aaro Koskinen <aaro.koskinen@iki.fi>
    Signed-off-by: Tony Lindgren <tony@atomide.com>

diff --git a/arch/arm/mach-omap1/timer.c b/arch/arm/mach-omap1/timer.c
index bde7a35e5000..06c5ba7574a5 100644
--- a/arch/arm/mach-omap1/timer.c
+++ b/arch/arm/mach-omap1/timer.c
@@ -27,10 +27,10 @@
 #include <linux/platform_device.h>
 #include <linux/platform_data/dmtimer-omap.h>
 
-#include <mach/irqs.h>
-
 #include <plat/dmtimer.h>
 
+#include "soc.h"
+
 #define OMAP1610_GPTIMER1_BASE		0xfffb1400
 #define OMAP1610_GPTIMER2_BASE		0xfffb1c00
 #define OMAP1610_GPTIMER3_BASE		0xfffb2400

commit 40fc3bb56ed125aa22c0a85c816ae0f923519146
Author: Jon Hunter <jon-hunter@ti.com>
Date:   Fri Sep 28 11:34:49 2012 -0500

    ARM: OMAP: Add platform data header for DMTIMERs
    
    Move definition of dmtimer platform data structure in to its own header
    under <linux/platform_data>.
    
    Signed-off-by: Jon Hunter <jon-hunter@ti.com>

diff --git a/arch/arm/mach-omap1/timer.c b/arch/arm/mach-omap1/timer.c
index cdeb9d3ef640..bde7a35e5000 100644
--- a/arch/arm/mach-omap1/timer.c
+++ b/arch/arm/mach-omap1/timer.c
@@ -25,6 +25,7 @@
 #include <linux/err.h>
 #include <linux/slab.h>
 #include <linux/platform_device.h>
+#include <linux/platform_data/dmtimer-omap.h>
 
 #include <mach/irqs.h>
 

commit 5c3e4ec48586f6dfb482f1c524748948ba14021e
Author: Jon Hunter <jon-hunter@ti.com>
Date:   Sun Sep 23 17:28:27 2012 -0600

    ARM: OMAP: Add a timer attribute for timers that can interrupt the DSP
    
    Some instances of the DMTIMER peripheral on OMAP devices have the ability
    to interrupt the on-chip DSP in addition to the ARM CPU. Add a DMTIMER
    attribute to indicate which timers can interrupt the DSP. By using the
    omap_dm_timer_request_by_cap() API, driver will now be able to allocate
    a DMTIMER that can interrupt the DSP based upon this attribute and not require
    the driver to know which instance has this capability.
    
    DMTIMERs that have the ability to interrupt the DSP on OMAP devices are as
    follows ...
    
    - OMAP1 (OMAP5912/16xx/17xx) devices    - All 8 DMTIMERs
    - OMAP2/3/4 devices                     - DMTIMERs 5-8
    
    Please note that for OMAP3+, timer8 has the ability to interrupt the DSP and
    generate a PWM output.
    
    Signed-off-by: Jon Hunter <jon-hunter@ti.com>
    Signed-off-by: Paul Walmsley <paul@pwsan.com>

diff --git a/arch/arm/mach-omap1/timer.c b/arch/arm/mach-omap1/timer.c
index aa81593db1af..cdeb9d3ef640 100644
--- a/arch/arm/mach-omap1/timer.c
+++ b/arch/arm/mach-omap1/timer.c
@@ -141,7 +141,7 @@ static int __init omap1_dm_timer_init(void)
 
 		pdata->set_timer_src = omap1_dm_timer_set_src;
 		pdata->timer_capability = OMAP_TIMER_ALWON |
-				OMAP_TIMER_NEEDS_RESET;
+				OMAP_TIMER_NEEDS_RESET | OMAP_TIMER_HAS_DSP_IRQ;
 
 		ret = platform_device_add_data(pdev, pdata, sizeof(*pdata));
 		if (ret) {

commit 6615975bc58a1234bd401a7ff231dae85631fd58
Author: Jon Hunter <jon-hunter@ti.com>
Date:   Tue Jun 5 12:34:57 2012 -0500

    ARM: OMAP: Add flag to indicate if a timer needs a manual reset
    
    For OMAP1 devices, it is necessary to perform a manual reset of the timer.
    Currently, this is indicating by setting the "needs_manual_reset" variable in
    the platform data. Instead of using an extra variable to indicate this add a new
    timer capabilities flag to indicate this and remove the "needs_manual_reset"
    member from the platform data.
    
    Signed-off-by: Jon Hunter <jon-hunter@ti.com>
    Signed-off-by: Tony Lindgren <tony@atomide.com>

diff --git a/arch/arm/mach-omap1/timer.c b/arch/arm/mach-omap1/timer.c
index b4bf48c188fb..aa81593db1af 100644
--- a/arch/arm/mach-omap1/timer.c
+++ b/arch/arm/mach-omap1/timer.c
@@ -140,8 +140,8 @@ static int __init omap1_dm_timer_init(void)
 		}
 
 		pdata->set_timer_src = omap1_dm_timer_set_src;
-		pdata->needs_manual_reset = 1;
-		pdata->timer_capability = OMAP_TIMER_ALWON;
+		pdata->timer_capability = OMAP_TIMER_ALWON |
+				OMAP_TIMER_NEEDS_RESET;
 
 		ret = platform_device_add_data(pdev, pdata, sizeof(*pdata));
 		if (ret) {

commit 1c2d076b589225e51e022d85bb9f25dca26530f3
Author: Jon Hunter <jon-hunter@ti.com>
Date:   Tue Jun 5 12:34:55 2012 -0500

    ARM: OMAP: Remove loses_context variable from timer platform data
    
    The platform data variable loses_context is used to determine if the timer may
    lose its logic state during power transitions and so needs to be restored. This
    information is also provided in the HWMOD device attributes for OMAP2+ devices
    via the OMAP_TIMER_ALWON flag. When this flag is set the timer will not lose
    context. So use the HWMOD device attributes to determine this.
    
    For OMAP1 devices, loses_context is never set and so set the OMAP_TIMER_ALWON
    flag for OMAP1 timers to ensure that code is equivalent.
    
    Signed-off-by: Jon Hunter <jon-hunter@ti.com>
    Signed-off-by: Tony Lindgren <tony@atomide.com>

diff --git a/arch/arm/mach-omap1/timer.c b/arch/arm/mach-omap1/timer.c
index 64c65bcb2d67..b4bf48c188fb 100644
--- a/arch/arm/mach-omap1/timer.c
+++ b/arch/arm/mach-omap1/timer.c
@@ -141,6 +141,7 @@ static int __init omap1_dm_timer_init(void)
 
 		pdata->set_timer_src = omap1_dm_timer_set_src;
 		pdata->needs_manual_reset = 1;
+		pdata->timer_capability = OMAP_TIMER_ALWON;
 
 		ret = platform_device_add_data(pdev, pdata, sizeof(*pdata));
 		if (ret) {

commit cba3309e38cf0407fbdbea788758ad65624c2319
Merge: 976eb445e205 09f45b83109c
Author: Olof Johansson <olof@lixom.net>
Date:   Wed May 9 02:28:08 2012 -0700

    Merge tag 'omap-cleanup-sparse-for-v3.5' of git://git.kernel.org/pub/scm/linux/kernel/git/tmlind/linux-omap into next/cleanup
    
    Sparse and cppcheck warning fixes
    
    By Paul Walmsley
    via Paul Walmsley (1) and Tony Lindgren (1)
    * tag 'omap-cleanup-sparse-for-v3.5' of git://git.kernel.org/pub/scm/linux/kernel/git/tmlind/linux-omap:
      ARM: OMAP2+: clean up some cppcheck warnings
      ARM: OMAP1: board files: deduplicate and clean some NAND-related code
      ARM: OMAP: USB: remove unnecessary sideways include
      ARM: OMAP: DMA: use constant array maximum, drop some LCD DMA code
      ARM: OMAP: OCM RAM: use memset_io() when clearing SRAM
      ARM: OMAP: fix 'using plain integer as NULL pointer' sparse warnings
      ARM: OMAP2+: GPMC: resolve type-conversion warning from sparse
      ARM: OMAP1: OHCI: use platform_data fn ptr to enable OCPI bus
      ARM: OMAP1: OCPI: move to mach-omap1/
      ARM: OMAP: add includes for missing prototypes
      ARM: OMAP2+: declare file-local functions as static
    
    Signed-off-by: Olof Johansson <olof@lixom.net>

commit 6aaec67da1e41a0752a2b903b989e73b9f02e182
Author: Paul Walmsley <paul@pwsan.com>
Date:   Tue Apr 10 18:36:02 2012 -0600

    ARM: OMAP1: DMTIMER: fix broken timer clock source selection
    
    DMTIMER source selection on OMAP1 is broken.  omap1_dm_timer_set_src()
    tries to use __raw_{read,write}l() to read from and write to physical
    addresses, but those functions take virtual addresses.
    
    sparse caught this:
    
    arch/arm/mach-omap1/timer.c:50:13: warning: incorrect type in argument 1 (different base types)
    arch/arm/mach-omap1/timer.c:50:13:    expected void const volatile [noderef] <asn:2>*<noident>
    arch/arm/mach-omap1/timer.c:50:13:    got unsigned int
    arch/arm/mach-omap1/timer.c:52:9: warning: incorrect type in argument 1 (different base types)
    arch/arm/mach-omap1/timer.c:52:9:    expected void const volatile [noderef] <asn:2>*<noident>
    arch/arm/mach-omap1/timer.c:52:9:    got unsigned int
    
    Fix by using omap_{read,writel}(), just like the other users of the
    MOD_CONF_CTRL_1 register in the OMAP1 codebase.  Of course, in the long term,
    removing omap_{read,write}l() is the appropriate thing to do; but
    this will take some work to do this cleanly.
    
    Looks like this was caused by 97933d6 (ARM: OMAP1: dmtimer: conversion
    to platform devices) that dangerously moved code and changed it in
    the same patch.
    
    Signed-off-by: Paul Walmsley <paul@pwsan.com>
    Cc: Tarun Kanti DebBarma <tarun.kanti@ti.com>
    Cc: stable@vger.kernel.org
    [tony@atomide.com: updated comments to include the breaking commit]
    Signed-off-by: Tony Lindgren <tony@atomide.com>

diff --git a/arch/arm/mach-omap1/timer.c b/arch/arm/mach-omap1/timer.c
index 6e90665a7c47..fb202af01d0d 100644
--- a/arch/arm/mach-omap1/timer.c
+++ b/arch/arm/mach-omap1/timer.c
@@ -47,9 +47,9 @@ static int omap1_dm_timer_set_src(struct platform_device *pdev,
 	int n = (pdev->id - 1) << 1;
 	u32 l;
 
-	l = __raw_readl(MOD_CONF_CTRL_1) & ~(0x03 << n);
+	l = omap_readl(MOD_CONF_CTRL_1) & ~(0x03 << n);
 	l |= source << n;
-	__raw_writel(l, MOD_CONF_CTRL_1);
+	omap_writel(l, MOD_CONF_CTRL_1);
 
 	return 0;
 }

commit 8c3d4534a8da0dc6a2d52b61585e61f7e8143096
Author: Paul Walmsley <paul@pwsan.com>
Date:   Fri Apr 13 06:34:26 2012 -0600

    ARM: OMAP2+: declare file-local functions as static
    
    Several function declarations used only in the files in which they're
    declared should include the static keyword, but don't:
    
        arch/arm/mach-omap2/serial.c:248:6: warning: symbol 'cmdline_find_option' was not declared. Should it be static?
        arch/arm/mach-omap2/omap-wakeupgen.c:259:6: warning: symbol 'irq_sar_clear' was not declared. Should it be static?
        arch/arm/mach-omap2/board-rx51-peripherals.c:878:27: warning: symbol 'rx51_vibra_data' was not declared. Should it be static?
        arch/arm/mach-omap2/board-rx51-peripherals.c:882:27: warning: symbol 'rx51_audio_data' was not declared. Should it be static?
        arch/arm/mach-omap2/board-omap4panda.c:201:29: warning: symbol 'omap_panda_wlan_data' was not declared. Should it be static?
        arch/arm/mach-omap2/board-omap4panda.c:393:24: warning: symbol 'omap4_panda_dvi_device' was not declared. Should it be static?
        arch/arm/mach-omap2/board-omap4panda.c:403:12: warning: symbol 'omap4_panda_dvi_init' was not declared. Should it be static?
        arch/arm/mach-omap2/board-omap4panda.c:464:6: warning: symbol 'omap4_panda_display_init' was not declared. Should it be static?
        arch/arm/mach-omap2/hsmmc.c:434:6: warning: symbol 'omap_init_hsmmc' was not declared. Should it be static?
        arch/arm/mach-omap2/hwspinlock.c:31:12: warning: symbol 'hwspinlocks_init' was not declared. Should it be static?
        arch/arm/mach-omap1/timer.c:58:12: warning: symbol 'omap1_dm_timer_init' was not declared. Should it be static?
        arch/arm/mach-omap1/fpga.c:90:6: warning: symbol 'innovator_fpga_IRQ_demux' was not declared. Should it be static?
    
    Mark all of these as static.
    
    Thanks to Arnd Bergmann <arnd@arndb.de> for pointing out a typo in the
    original patch description.
    
    Signed-off-by: Paul Walmsley <paul@pwsan.com>
    Cc: Govindraj R <govindraj.raja@ti.com>
    Cc: Santosh Shilimkar <santosh.shilimkar@ti.com>
    Cc: David Anders <x0132446@ti.com>
    Acked-by: Santosh Shilimkar <santosh.shilimkar@ti.com>
    Acked-by: Arnd Bergmann <arnd@arndb.de>

diff --git a/arch/arm/mach-omap1/timer.c b/arch/arm/mach-omap1/timer.c
index 6e90665a7c47..5536e0456fb7 100644
--- a/arch/arm/mach-omap1/timer.c
+++ b/arch/arm/mach-omap1/timer.c
@@ -54,8 +54,7 @@ static int omap1_dm_timer_set_src(struct platform_device *pdev,
 	return 0;
 }
 
-
-int __init omap1_dm_timer_init(void)
+static int __init omap1_dm_timer_init(void)
 {
 	int i;
 	int ret;

commit 97933d6ced601de013f17ad3f589e72cf2266bba
Author: Tarun Kanti DebBarma <tarun.kanti@ti.com>
Date:   Tue Sep 20 17:00:17 2011 +0530

    ARM: OMAP1: dmtimer: conversion to platform devices
    
    Convert OMAP1 dmtimers into a platform devices and then registers with
    device model framework so that it can be bound to corresponding driver.
    
    Signed-off-by: Thara Gopinath <thara@ti.com>
    Signed-off-by: Tarun Kanti DebBarma <tarun.kanti@ti.com>
    Reviewed-by: Santosh Shilimkar <santosh.shilimkar@ti.com>
    Acked-by: Cousson, Benoit <b-cousson@ti.com>
    Signed-off-by: Tony Lindgren <tony@atomide.com>

diff --git a/arch/arm/mach-omap1/timer.c b/arch/arm/mach-omap1/timer.c
new file mode 100644
index 000000000000..6e90665a7c47
--- /dev/null
+++ b/arch/arm/mach-omap1/timer.c
@@ -0,0 +1,173 @@
+/**
+ * OMAP1 Dual-Mode Timers - platform device registration
+ *
+ * Contains first level initialization routines which internally
+ * generates timer device information and registers with linux
+ * device model. It also has low level function to chnage the timer
+ * input clock source.
+ *
+ * Copyright (C) 2011 Texas Instruments Incorporated - http://www.ti.com/
+ * Tarun Kanti DebBarma <tarun.kanti@ti.com>
+ * Thara Gopinath <thara@ti.com>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation.
+ *
+ * This program is distributed "as is" WITHOUT ANY WARRANTY of any
+ * kind, whether express or implied; without even the implied warranty
+ * of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ */
+
+#include <linux/clk.h>
+#include <linux/io.h>
+#include <linux/err.h>
+#include <linux/slab.h>
+#include <linux/platform_device.h>
+
+#include <mach/irqs.h>
+
+#include <plat/dmtimer.h>
+
+#define OMAP1610_GPTIMER1_BASE		0xfffb1400
+#define OMAP1610_GPTIMER2_BASE		0xfffb1c00
+#define OMAP1610_GPTIMER3_BASE		0xfffb2400
+#define OMAP1610_GPTIMER4_BASE		0xfffb2c00
+#define OMAP1610_GPTIMER5_BASE		0xfffb3400
+#define OMAP1610_GPTIMER6_BASE		0xfffb3c00
+#define OMAP1610_GPTIMER7_BASE		0xfffb7400
+#define OMAP1610_GPTIMER8_BASE		0xfffbd400
+
+#define OMAP1_DM_TIMER_COUNT		8
+
+static int omap1_dm_timer_set_src(struct platform_device *pdev,
+				int source)
+{
+	int n = (pdev->id - 1) << 1;
+	u32 l;
+
+	l = __raw_readl(MOD_CONF_CTRL_1) & ~(0x03 << n);
+	l |= source << n;
+	__raw_writel(l, MOD_CONF_CTRL_1);
+
+	return 0;
+}
+
+
+int __init omap1_dm_timer_init(void)
+{
+	int i;
+	int ret;
+	struct dmtimer_platform_data *pdata;
+	struct platform_device *pdev;
+
+	if (!cpu_is_omap16xx())
+		return 0;
+
+	for (i = 1; i <= OMAP1_DM_TIMER_COUNT; i++) {
+		struct resource res[2];
+		u32 base, irq;
+
+		switch (i) {
+		case 1:
+			base = OMAP1610_GPTIMER1_BASE;
+			irq = INT_1610_GPTIMER1;
+			break;
+		case 2:
+			base = OMAP1610_GPTIMER2_BASE;
+			irq = INT_1610_GPTIMER2;
+			break;
+		case 3:
+			base = OMAP1610_GPTIMER3_BASE;
+			irq = INT_1610_GPTIMER3;
+			break;
+		case 4:
+			base = OMAP1610_GPTIMER4_BASE;
+			irq = INT_1610_GPTIMER4;
+			break;
+		case 5:
+			base = OMAP1610_GPTIMER5_BASE;
+			irq = INT_1610_GPTIMER5;
+			break;
+		case 6:
+			base = OMAP1610_GPTIMER6_BASE;
+			irq = INT_1610_GPTIMER6;
+			break;
+		case 7:
+			base = OMAP1610_GPTIMER7_BASE;
+			irq = INT_1610_GPTIMER7;
+			break;
+		case 8:
+			base = OMAP1610_GPTIMER8_BASE;
+			irq = INT_1610_GPTIMER8;
+			break;
+		default:
+			/*
+			 * not supposed to reach here.
+			 * this is to remove warning.
+			 */
+			return -EINVAL;
+		}
+
+		pdev = platform_device_alloc("omap_timer", i);
+		if (!pdev) {
+			pr_err("%s: Failed to device alloc for dmtimer%d\n",
+				__func__, i);
+			return -ENOMEM;
+		}
+
+		memset(res, 0, 2 * sizeof(struct resource));
+		res[0].start = base;
+		res[0].end = base + 0x46;
+		res[0].flags = IORESOURCE_MEM;
+		res[1].start = irq;
+		res[1].end = irq;
+		res[1].flags = IORESOURCE_IRQ;
+		ret = platform_device_add_resources(pdev, res,
+				ARRAY_SIZE(res));
+		if (ret) {
+			dev_err(&pdev->dev, "%s: Failed to add resources.\n",
+				__func__);
+			goto err_free_pdev;
+		}
+
+		pdata = kzalloc(sizeof(*pdata), GFP_KERNEL);
+		if (!pdata) {
+			dev_err(&pdev->dev, "%s: Failed to allocate pdata.\n",
+				__func__);
+			ret = -ENOMEM;
+			goto err_free_pdata;
+		}
+
+		pdata->set_timer_src = omap1_dm_timer_set_src;
+		pdata->needs_manual_reset = 1;
+
+		ret = platform_device_add_data(pdev, pdata, sizeof(*pdata));
+		if (ret) {
+			dev_err(&pdev->dev, "%s: Failed to add platform data.\n",
+				__func__);
+			goto err_free_pdata;
+		}
+
+		ret = platform_device_add(pdev);
+		if (ret) {
+			dev_err(&pdev->dev, "%s: Failed to add platform device.\n",
+				__func__);
+			goto err_free_pdata;
+		}
+
+		dev_dbg(&pdev->dev, " Registered.\n");
+	}
+
+	return 0;
+
+err_free_pdata:
+	kfree(pdata);
+
+err_free_pdev:
+	platform_device_unregister(pdev);
+
+	return ret;
+}
+arch_initcall(omap1_dm_timer_init);
