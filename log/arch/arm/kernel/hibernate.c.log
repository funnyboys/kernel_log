commit af873fcecef567abf8a3468b06dd4e4aab46da6d
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Tue May 28 09:57:21 2019 -0700

    treewide: Replace GPLv2 boilerplate/reference with SPDX - rule 194
    
    Based on 1 normalized pattern(s):
    
      license terms gnu general public license gpl version 2
    
    extracted by the scancode license scanner the SPDX license identifier
    
      GPL-2.0-only
    
    has been chosen to replace the boilerplate/reference in 161 file(s).
    
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Reviewed-by: Allison Randal <allison@lohutok.net>
    Reviewed-by: Alexios Zavras <alexios.zavras@intel.com>
    Reviewed-by: Steve Winslow <swinslow@gmail.com>
    Reviewed-by: Richard Fontana <rfontana@redhat.com>
    Cc: linux-spdx@vger.kernel.org
    Link: https://lkml.kernel.org/r/20190528170027.447718015@linutronix.de
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/arch/arm/kernel/hibernate.c b/arch/arm/kernel/hibernate.c
index b09561a6d06a..2373020af965 100644
--- a/arch/arm/kernel/hibernate.c
+++ b/arch/arm/kernel/hibernate.c
@@ -1,3 +1,4 @@
+// SPDX-License-Identifier: GPL-2.0-only
 /*
  * Hibernation support specific for ARM
  *
@@ -11,8 +12,6 @@
  *  https://patchwork.kernel.org/patch/96442/
  *
  * Copyright (C) 2006 Rafael J. Wysocki <rjw@sisk.pl>
- *
- * License terms: GNU General Public License (GPL) version 2
  */
 
 #include <linux/mm.h>

commit 4138323eac0b485316e54ad9ce241bac24ddd175
Author: Russell King <rmk+kernel@arm.linux.org.uk>
Date:   Mon Jan 11 17:03:54 2016 +0000

    ARM: use virt_to_idmap() for soft_restart()
    
    Code run via soft_restart() is run with the MMU disabled, so we need to
    pass the identity map physical address rather than the address obtained
    from virt_to_phys().  Therefore, replace virt_to_phys() with
    virt_to_idmap() for all callers of soft_restart().
    
    Signed-off-by: Russell King <rmk+kernel@arm.linux.org.uk>

diff --git a/arch/arm/kernel/hibernate.c b/arch/arm/kernel/hibernate.c
index a71501ff6f18..b09561a6d06a 100644
--- a/arch/arm/kernel/hibernate.c
+++ b/arch/arm/kernel/hibernate.c
@@ -62,7 +62,7 @@ static int notrace arch_save_image(unsigned long unused)
 
 	ret = swsusp_save();
 	if (ret == 0)
-		_soft_restart(virt_to_phys(cpu_resume), false);
+		_soft_restart(virt_to_idmap(cpu_resume), false);
 	return ret;
 }
 
@@ -87,7 +87,7 @@ static void notrace arch_restore_image(void *unused)
 	for (pbe = restore_pblist; pbe; pbe = pbe->next)
 		copy_page(pbe->orig_address, pbe->address);
 
-	_soft_restart(virt_to_phys(cpu_resume), false);
+	_soft_restart(virt_to_idmap(cpu_resume), false);
 }
 
 static u64 resume_stack[PAGE_SIZE/2/sizeof(u64)] __nosavedata;

commit 045ab94e10ee17038066d71abc8fdce719ab56f9
Author: Russell King <rmk+kernel@arm.linux.org.uk>
Date:   Wed Apr 1 17:02:45 2015 +0100

    ARM: move reboot code to arch/arm/kernel/reboot.c
    
    Move shutdown and reboot related code to a separate file, out of
    process.c.  This helps to avoid polluting process.c with non-process
    related code.
    
    Signed-off-by: Russell King <rmk+kernel@arm.linux.org.uk>

diff --git a/arch/arm/kernel/hibernate.c b/arch/arm/kernel/hibernate.c
index cfb354ff2a60..a71501ff6f18 100644
--- a/arch/arm/kernel/hibernate.c
+++ b/arch/arm/kernel/hibernate.c
@@ -100,7 +100,6 @@ static u64 resume_stack[PAGE_SIZE/2/sizeof(u64)] __nosavedata;
  */
 int swsusp_arch_resume(void)
 {
-	extern void call_with_stack(void (*fn)(void *), void *arg, void *sp);
 	call_with_stack(arch_restore_image, 0,
 		resume_stack + ARRAY_SIZE(resume_stack));
 	return 0;

commit 767bf7e7a1e82a81c59778348d156993d0a6175d
Author: Russell King <rmk+kernel@arm.linux.org.uk>
Date:   Wed Apr 1 16:20:39 2015 +0100

    ARM: fix broken hibernation
    
    Normally, when a CPU wants to clear a cache line to zero in the external
    L2 cache, it would generate bus cycles to write each word as it would do
    with any other data access.
    
    However, a Cortex A9 connected to a L2C-310 has a specific feature where
    the CPU can detect this operation, and signal that it wants to zero an
    entire cache line.  This feature, known as Full Line of Zeros (FLZ),
    involves a non-standard AXI signalling mechanism which only the L2C-310
    can properly interpret.
    
    There are separate enable bits in both the L2C-310 and the Cortex A9 -
    the L2C-310 needs to be enabled and have the FLZ enable bit set in the
    auxiliary control register before the Cortex A9 has this feature
    enabled.
    
    Unfortunately, the suspend code was not respecting this - it's not
    obvious from the code:
    
    swsusp_arch_suspend()
     cpu_suspend() /* saves the Cortex A9 auxiliary control register */
      arch_save_image()
      soft_restart() /* turns off FLZ in Cortex A9, and disables L2C */
       cpu_resume() /* restores the Cortex A9 registers, inc auxcr */
    
    At this point, we end up with the L2C disabled, but the Cortex A9 with
    FLZ enabled - which means any memset() or zeroing of a full cache line
    will fail to take effect.
    
    A similar issue exists in the resume path, but it's slightly more
    complex:
    
    swsusp_arch_suspend()
     cpu_suspend() /* saves the Cortex A9 auxiliary control register */
      arch_save_image() /* image with A9 auxcr saved */
    ...
    swsusp_arch_resume()
     call_with_stack()
      arch_restore_image() /* restores image with A9 auxcr saved above */
      soft_restart() /* turns off FLZ in Cortex A9, and disables L2C */
       cpu_resume() /* restores the Cortex A9 registers, inc auxcr */
    
    Again, here we end up with the L2C disabled, but Cortex A9 FLZ enabled.
    
    There's no need to turn off the L2C in either of these two paths; there
    are benefits from not doing so - for example, the page copies will be
    faster with the L2C enabled.
    
    Hence, fix this by providing a variant of soft_restart() which can be
    used without turning the L2 cache controller off, and use it in both
    of these paths to keep the L2C enabled across the respective resume
    transitions.
    
    Fixes: 8ef418c7178f ("ARM: l2c: trial at enabling some Cortex-A9 optimisations")
    Reported-by: Sean Cross <xobs@kosagi.com>
    Tested-by: Sean Cross <xobs@kosagi.com>
    Signed-off-by: Russell King <rmk+kernel@arm.linux.org.uk>

diff --git a/arch/arm/kernel/hibernate.c b/arch/arm/kernel/hibernate.c
index c4cc50e58c13..cfb354ff2a60 100644
--- a/arch/arm/kernel/hibernate.c
+++ b/arch/arm/kernel/hibernate.c
@@ -22,6 +22,7 @@
 #include <asm/suspend.h>
 #include <asm/memory.h>
 #include <asm/sections.h>
+#include "reboot.h"
 
 int pfn_is_nosave(unsigned long pfn)
 {
@@ -61,7 +62,7 @@ static int notrace arch_save_image(unsigned long unused)
 
 	ret = swsusp_save();
 	if (ret == 0)
-		soft_restart(virt_to_phys(cpu_resume));
+		_soft_restart(virt_to_phys(cpu_resume), false);
 	return ret;
 }
 
@@ -86,7 +87,7 @@ static void notrace arch_restore_image(void *unused)
 	for (pbe = restore_pblist; pbe; pbe = pbe->next)
 		copy_page(pbe->orig_address, pbe->address);
 
-	soft_restart(virt_to_phys(cpu_resume));
+	_soft_restart(virt_to_phys(cpu_resume), false);
 }
 
 static u64 resume_stack[PAGE_SIZE/2/sizeof(u64)] __nosavedata;

commit 7f8998c7aef3ac9c5f3f2943e083dfa6302e90d0
Author: Geert Uytterhoeven <geert@linux-m68k.org>
Date:   Thu Oct 9 15:30:30 2014 -0700

    nosave: consolidate __nosave_{begin,end} in <asm/sections.h>
    
    The different architectures used their own (and different) declarations:
    
        extern __visible const void __nosave_begin, __nosave_end;
        extern const void __nosave_begin, __nosave_end;
        extern long __nosave_begin, __nosave_end;
    
    Consolidate them using the first variant in <asm/sections.h>.
    
    Signed-off-by: Geert Uytterhoeven <geert@linux-m68k.org>
    Cc: Russell King <linux@arm.linux.org.uk>
    Cc: Ralf Baechle <ralf@linux-mips.org>
    Cc: Benjamin Herrenschmidt <benh@kernel.crashing.org>
    Cc: Martin Schwidefsky <schwidefsky@de.ibm.com>
    Cc: "David S. Miller" <davem@davemloft.net>
    Cc: Guan Xuetao <gxt@mprc.pku.edu.cn>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: Ingo Molnar <mingo@redhat.com>
    Cc: "H. Peter Anvin" <hpa@zytor.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

diff --git a/arch/arm/kernel/hibernate.c b/arch/arm/kernel/hibernate.c
index bb8b79648643..c4cc50e58c13 100644
--- a/arch/arm/kernel/hibernate.c
+++ b/arch/arm/kernel/hibernate.c
@@ -21,8 +21,7 @@
 #include <asm/idmap.h>
 #include <asm/suspend.h>
 #include <asm/memory.h>
-
-extern const void __nosave_begin, __nosave_end;
+#include <asm/sections.h>
 
 int pfn_is_nosave(unsigned long pfn)
 {

commit 603fb42a66499ab353466c7afa3d38beea20a8a9
Author: Sebastian Capella <sebastian.capella@linaro.org>
Date:   Tue Mar 25 01:20:29 2014 +0100

    ARM: 8011/1: ARM hibernation / suspend-to-disk
    
    Enable hibernation for ARM architectures and provide ARM
    architecture specific calls used during hibernation.
    
    The swsusp hibernation framework depends on the
    platform first having functional suspend/resume.
    
    Then, in order to enable hibernation on a given platform, a
    platform_hibernation_ops structure may need to be registered with
    the system in order to save/restore any SoC-specific / cpu specific
    state needing (re)init over a suspend-to-disk/resume-from-disk cycle.
    
    For example:
    
         - "secure" SoCs that have different sets of control registers
           and/or different CR reg access patterns.
    
         - SoCs with L2 caches as the activation sequence there is
           SoC-dependent; a full off-on cycle for L2 is not done
           by the hibernation support code.
    
         - SoCs requiring steps on wakeup _before_ the "generic" parts
           done by cpu_suspend / cpu_resume can work correctly.
    
         - SoCs having persistent state which is maintained during suspend
           and resume, but will be lost during the power off cycle after
           suspend-to-disk.
    
    This is a rebase/rework of Frank Hofmann's v5 hibernation patchset.
    
    Acked-by: Russ Dill <Russ.Dill@ti.com>
    Cc: "Rafael J. Wysocki" <rjw@rjwysocki.net>
    Signed-off-by: Sebastian Capella <sebastian.capella@linaro.org>
    Acked-by: Pavel Machek <pavel@ucw.cz>
    Reviewed-by: Lorenzo Pieralisi <lorenzo.pieralisi@arm.com>
    [fixed duplicate virt_to_pfn() definition --rmk]
    Signed-off-by: Russell King <rmk+kernel@arm.linux.org.uk>

diff --git a/arch/arm/kernel/hibernate.c b/arch/arm/kernel/hibernate.c
new file mode 100644
index 000000000000..bb8b79648643
--- /dev/null
+++ b/arch/arm/kernel/hibernate.c
@@ -0,0 +1,107 @@
+/*
+ * Hibernation support specific for ARM
+ *
+ * Derived from work on ARM hibernation support by:
+ *
+ * Ubuntu project, hibernation support for mach-dove
+ * Copyright (C) 2010 Nokia Corporation (Hiroshi Doyu)
+ * Copyright (C) 2010 Texas Instruments, Inc. (Teerth Reddy et al.)
+ *  https://lkml.org/lkml/2010/6/18/4
+ *  https://lists.linux-foundation.org/pipermail/linux-pm/2010-June/027422.html
+ *  https://patchwork.kernel.org/patch/96442/
+ *
+ * Copyright (C) 2006 Rafael J. Wysocki <rjw@sisk.pl>
+ *
+ * License terms: GNU General Public License (GPL) version 2
+ */
+
+#include <linux/mm.h>
+#include <linux/suspend.h>
+#include <asm/system_misc.h>
+#include <asm/idmap.h>
+#include <asm/suspend.h>
+#include <asm/memory.h>
+
+extern const void __nosave_begin, __nosave_end;
+
+int pfn_is_nosave(unsigned long pfn)
+{
+	unsigned long nosave_begin_pfn = virt_to_pfn(&__nosave_begin);
+	unsigned long nosave_end_pfn = virt_to_pfn(&__nosave_end - 1);
+
+	return (pfn >= nosave_begin_pfn) && (pfn <= nosave_end_pfn);
+}
+
+void notrace save_processor_state(void)
+{
+	WARN_ON(num_online_cpus() != 1);
+	local_fiq_disable();
+}
+
+void notrace restore_processor_state(void)
+{
+	local_fiq_enable();
+}
+
+/*
+ * Snapshot kernel memory and reset the system.
+ *
+ * swsusp_save() is executed in the suspend finisher so that the CPU
+ * context pointer and memory are part of the saved image, which is
+ * required by the resume kernel image to restart execution from
+ * swsusp_arch_suspend().
+ *
+ * soft_restart is not technically needed, but is used to get success
+ * returned from cpu_suspend.
+ *
+ * When soft reboot completes, the hibernation snapshot is written out.
+ */
+static int notrace arch_save_image(unsigned long unused)
+{
+	int ret;
+
+	ret = swsusp_save();
+	if (ret == 0)
+		soft_restart(virt_to_phys(cpu_resume));
+	return ret;
+}
+
+/*
+ * Save the current CPU state before suspend / poweroff.
+ */
+int notrace swsusp_arch_suspend(void)
+{
+	return cpu_suspend(0, arch_save_image);
+}
+
+/*
+ * Restore page contents for physical pages that were in use during loading
+ * hibernation image.  Switch to idmap_pgd so the physical page tables
+ * are overwritten with the same contents.
+ */
+static void notrace arch_restore_image(void *unused)
+{
+	struct pbe *pbe;
+
+	cpu_switch_mm(idmap_pgd, &init_mm);
+	for (pbe = restore_pblist; pbe; pbe = pbe->next)
+		copy_page(pbe->orig_address, pbe->address);
+
+	soft_restart(virt_to_phys(cpu_resume));
+}
+
+static u64 resume_stack[PAGE_SIZE/2/sizeof(u64)] __nosavedata;
+
+/*
+ * Resume from the hibernation image.
+ * Due to the kernel heap / data restore, stack contents change underneath
+ * and that would make function calls impossible; switch to a temporary
+ * stack within the nosave region to avoid that problem.
+ */
+int swsusp_arch_resume(void)
+{
+	extern void call_with_stack(void (*fn)(void *), void *arg, void *sp);
+	call_with_stack(arch_restore_image, 0,
+		resume_stack + ARRAY_SIZE(resume_stack));
+	return 0;
+}
