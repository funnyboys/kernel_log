commit fb746842f60350f4654b265364c022219614239c
Author: Bartosz Golaszewski <bgolaszewski@baylibre.com>
Date:   Thu Feb 14 15:52:00 2019 +0100

    ARM: davinci: pull davinci_intc_base into the respective intc drivers
    
    davinci_intc_base is defined globally in common.c. Define separate
    local variables for the aintc and cp-intc drivers and remove the
    global one.
    
    Signed-off-by: Bartosz Golaszewski <bgolaszewski@baylibre.com>
    Reviewed-by: David Lechner <david@lechnology.com>
    Signed-off-by: Sekhar Nori <nsekhar@ti.com>

diff --git a/arch/arm/mach-davinci/common.c b/arch/arm/mach-davinci/common.c
index df9d685d9bc9..ae61d19f9b3a 100644
--- a/arch/arm/mach-davinci/common.c
+++ b/arch/arm/mach-davinci/common.c
@@ -23,8 +23,6 @@
 struct davinci_soc_info davinci_soc_info;
 EXPORT_SYMBOL(davinci_soc_info);
 
-void __iomem *davinci_intc_base;
-
 static int __init davinci_init_id(struct davinci_soc_info *soc_info)
 {
 	int			i;

commit e3a8c7631d45c621a78f0cb186ac7a09d9642858
Author: Bartosz Golaszewski <bgolaszewski@baylibre.com>
Date:   Thu Feb 14 15:51:59 2019 +0100

    ARM: davinci: remove davinci_intc_type
    
    We now use the generic ARM irq handler on davinci. There are no more
    users that check davinci_intc_type. Remove the variable and all its
    references.
    
    Signed-off-by: Bartosz Golaszewski <bgolaszewski@baylibre.com>
    Reviewed-by: David Lechner <david@lechnology.com>
    Signed-off-by: Sekhar Nori <nsekhar@ti.com>

diff --git a/arch/arm/mach-davinci/common.c b/arch/arm/mach-davinci/common.c
index 0c638fe15dcb..df9d685d9bc9 100644
--- a/arch/arm/mach-davinci/common.c
+++ b/arch/arm/mach-davinci/common.c
@@ -24,7 +24,6 @@ struct davinci_soc_info davinci_soc_info;
 EXPORT_SYMBOL(davinci_soc_info);
 
 void __iomem *davinci_intc_base;
-int davinci_intc_type;
 
 static int __init davinci_init_id(struct davinci_soc_info *soc_info)
 {

commit 19e99de9a53f9ece6baf8e9a15428aedd4b20c86
Author: Bartosz Golaszewski <bgolaszewski@baylibre.com>
Date:   Tue Jan 8 10:15:36 2019 +0100

    ARM: davinci: remove dead code related to MAC address reading
    
    There are no more users of davinci_get_mac_addr(). Remove it.
    
    Signed-off-by: Bartosz Golaszewski <bgolaszewski@baylibre.com>
    Signed-off-by: Sekhar Nori <nsekhar@ti.com>

diff --git a/arch/arm/mach-davinci/common.c b/arch/arm/mach-davinci/common.c
index e1d0f0d841ff..0c638fe15dcb 100644
--- a/arch/arm/mach-davinci/common.c
+++ b/arch/arm/mach-davinci/common.c
@@ -26,21 +26,6 @@ EXPORT_SYMBOL(davinci_soc_info);
 void __iomem *davinci_intc_base;
 int davinci_intc_type;
 
-void davinci_get_mac_addr(struct nvmem_device *nvmem, void *context)
-{
-	char *mac_addr = davinci_soc_info.emac_pdata->mac_addr;
-	off_t offset = (off_t)context;
-
-	if (!IS_BUILTIN(CONFIG_NVMEM)) {
-		pr_warn("Cannot read MAC addr from EEPROM without CONFIG_NVMEM\n");
-		return;
-	}
-
-	/* Read MAC addr from EEPROM */
-	if (nvmem_device_read(nvmem, offset, ETH_ALEN, mac_addr) == ETH_ALEN)
-		pr_info("Read MAC addr from EEPROM: %pM\n", mac_addr);
-}
-
 static int __init davinci_init_id(struct davinci_soc_info *soc_info)
 {
 	int			i;

commit 88ff663d50e09fdb36dae41fdf803d01529e6883
Author: David Lechner <david@lechnology.com>
Date:   Fri May 18 11:48:25 2018 -0500

    ARM: davinci: remove legacy clocks
    
    This removes the unused legacy clock code from arch/arm/mach-davinci/.
    
    Signed-off-by: David Lechner <david@lechnology.com>
    Reviewed-by: Sekhar Nori <nsekhar@ti.com>
    Signed-off-by: Sekhar Nori <nsekhar@ti.com>

diff --git a/arch/arm/mach-davinci/common.c b/arch/arm/mach-davinci/common.c
index e03f95ccd95c..e1d0f0d841ff 100644
--- a/arch/arm/mach-davinci/common.c
+++ b/arch/arm/mach-davinci/common.c
@@ -20,8 +20,6 @@
 #include <mach/common.h>
 #include <mach/cputype.h>
 
-#include "clock.h"
-
 struct davinci_soc_info davinci_soc_info;
 EXPORT_SYMBOL(davinci_soc_info);
 

commit 4d7ee968edea20d5cd50a8e899920843884c1943
Author: David Lechner <david@lechnology.com>
Date:   Fri May 18 11:48:15 2018 -0500

    ARM: davinci: remove CONFIG_DAVINCI_RESET_CLOCKS
    
    The common clock framework will take care of disabling unused clocks when
    we switch from the legacy davinci clocks and having this enabled will
    cause compile errors after we switch, so remove it now.
    
    Signed-off-by: David Lechner <david@lechnology.com>
    Reviewed-by: Sekhar Nori <nsekhar@ti.com>
    Signed-off-by: Sekhar Nori <nsekhar@ti.com>

diff --git a/arch/arm/mach-davinci/common.c b/arch/arm/mach-davinci/common.c
index bcb6a7ba84e9..e03f95ccd95c 100644
--- a/arch/arm/mach-davinci/common.c
+++ b/arch/arm/mach-davinci/common.c
@@ -118,5 +118,4 @@ void __init davinci_common_init(const struct davinci_soc_info *soc_info)
 void __init davinci_init_late(void)
 {
 	davinci_cpufreq_init();
-	davinci_clk_disable_unused();
 }

commit 1a6d490b45e709ad45f4d7457acd435552698ed4
Author: Bhumika Goyal <bhumirks@gmail.com>
Date:   Mon Oct 16 12:08:23 2017 +0200

    ARM: davinci: make argument to davinci_common_init() as const
    
    Make the function argument of the function davinci_common_init
    as const as it's memory contents are only copied during a
    memcpy call. So, the fields of the structure to which the argument
    soc_info points to never gets modified and therefore the argument can
    be made const.
    Add const to the prototype too.
    
    Signed-off-by: Bhumika Goyal <bhumirks@gmail.com>
    Signed-off-by: Sekhar Nori <nsekhar@ti.com>

diff --git a/arch/arm/mach-davinci/common.c b/arch/arm/mach-davinci/common.c
index 9f9fbfa6da0d..bcb6a7ba84e9 100644
--- a/arch/arm/mach-davinci/common.c
+++ b/arch/arm/mach-davinci/common.c
@@ -77,7 +77,7 @@ static int __init davinci_init_id(struct davinci_soc_info *soc_info)
 	return -EINVAL;
 }
 
-void __init davinci_common_init(struct davinci_soc_info *soc_info)
+void __init davinci_common_init(const struct davinci_soc_info *soc_info)
 {
 	int ret;
 

commit aa9aa1ec2df6ffb270cf98b848570ed58e11a1f9
Author: Kevin Hilman <khilman@baylibre.com>
Date:   Tue Nov 15 11:54:19 2016 -0800

    ARM: davinci: PM: rework init, remove platform device
    
    Remove fake platform device used for PM init.  Move pdata values which
    are common across all current platforms into pm.c.
    
    Also, since PM is only used on da8xx, remove davinci_pm_init() from
    common init code, and only use in da850/omapl138 board files that are
    currently creating the fake platform_device.
    
    Suggested-by: Sekhar Nori <nsekhar@ti.com>
    Signed-off-by: Kevin Hilman <khilman@baylibre.com>
    [nsekhar@ti.com: subject line adjustment]
    Signed-off-by: Sekhar Nori <nsekhar@ti.com>

diff --git a/arch/arm/mach-davinci/common.c b/arch/arm/mach-davinci/common.c
index 049025f6d531..9f9fbfa6da0d 100644
--- a/arch/arm/mach-davinci/common.c
+++ b/arch/arm/mach-davinci/common.c
@@ -118,6 +118,5 @@ void __init davinci_common_init(struct davinci_soc_info *soc_info)
 void __init davinci_init_late(void)
 {
 	davinci_cpufreq_init();
-	davinci_pm_init();
 	davinci_clk_disable_unused();
 }

commit 9896c7b57e9d67948f1f52f903efae5ec6c74321
Merge: f2b1e0f6385d b54891be1a77
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Wed May 18 12:35:46 2016 -0700

    Merge tag 'armsoc-soc' of git://git.kernel.org/pub/scm/linux/kernel/git/arm/arm-soc
    
    Pull ARM SoC platform updates from Arnd Bergmann:
     "We get support for three new 32-bit SoC platforms this time.
    
      The amount of changes in arch/arm for any of them is miniscule, as all
      the interesting code is in device driver subsystems (irqchip, clk,
      pinctrl, ...) these days.  I'm listing them here, as the addition of
      the Kconfig statement is the main relevant milestone for a new
      platform.  In each case, some drivers are are shared with existing
      platforms, while other drivers are added for v4.7 as well, or come in
      a later release.
    
       - The Aspeed platform is probably the most interesting one, this is
         what most whitebox servers use as their baseboard management
         controller.  We get support for the very common ast2400 and ast2500
         SoCs.  The OpenBMC project focuses on this chip, and the LWN
         article about their ELC 2016 presentation at
    
            https://lwn.net/Articles/683320/
    
         triggered the submission, but the code comes from IBM's OpenPOWER
         team rather than the team at Facebook.  There are still a lot more
         drivers that need to get added over time, and I hope both teams can
         work together on that.
    
       - OXNAS is an old platform for Network Attached Storage devices from
         Oxford Semiconductor.  There are models with ARM10 (!) and
         ARM11MPCore cores, but for now, we only support the original ARM9
         based versions.  The product lineup was subsequently part of PLX,
         Avago and now the new Broadcom Ltd.
    
            https://wiki.openwrt.org/doc/hardware/soc/soc.oxnas
    
         has some more information.
    
       - V2M-MPS2 is a prototyping platform from ARM for their Cortex-M
         cores and is related to the existing Realview / Versatile Express
         lineup, but without MMU.
    
         We now support various NOMMU platforms, so adding a new one is
         fairly straightforward.
    
            http://infocenter.arm.com/help/topic/com.arm.doc.100112_0100_03_en/
    
         has detailed information about the platform.
    
      Other noteworthy updates:
    
       - Work on LPC32xx has resumed, and Vladimir Zapolskiy and Sylvain
         Lemieux are now maintaining the platform.
    
         This is an older ARM9 based platform from NXP (not Freescale), but
         it remains in use in embedded markets.
    
       - Kevin Hilman is now co-maintaining the Amlogic Meson platform for
         both 32-bit and 64-bit ARM, and started contributing some patches.
    
       - As is often the case, work on the OMAP platforms makes up the bulk
         of the actual SoC code changes in arch/arm, but there isn't a lot
         of that either"
    
    * tag 'armsoc-soc' of git://git.kernel.org/pub/scm/linux/kernel/git/arm/arm-soc: (42 commits)
      MAINTAINERS: ARM/Amlogic: add co-maintainer, misc. updates
      MAINTAINERS: add ARM/NXP LPC32XX SoC specific drivers to the section
      MAINTAINERS: add new maintainers of NXP LPC32xx SoC
      MAINTAINERS: move ARM/NXP LPC32xx record to ARM section
      arm: Add Aspeed machine
      ARM: lpc32xx: remove duplicate const on lpc32xx_auxdata_lookup
      ARM: lpc32xx: remove leftovers of legacy clock source and provider drivers
      ARM: lpc32xx: remove reboot header file
      ARM: dove: Remove CLK_IS_ROOT
      ARM: orion5x: Remove CLK_IS_ROOT
      ARM: mv78xx0: Remove CLK_IS_ROOT
      ARM: davinci: da850: use clk->set_parent for async3
      ARM: davinci: Move clock init after ioremap.
      MAINTAINERS: Update ARM Versatile Express platform entry
      ARM: vexpress/mps2: introduce MPS2 platform
      MAINTAINERS: add maintainer entry for ARM/OXNAS platform
      ARM: Add new mach-oxnas
      irqchip: versatile-fpga: add new compatible for OX810SE SoC
      ARM: uniphier: correct the call order of of_node_put()
      MAINTAINERS: fix stale TI DaVinci entries
      ...

commit 04b9665b54f7cdc184ea03b0687aaa6d9711646e
Author: Arnd Bergmann <arnd@arndb.de>
Date:   Tue Mar 15 22:34:45 2016 +0100

    ARM: davinci: only use NVMEM when available
    
    The davinci platform contains code that calls into the nvmem
    subsystem, but that might be a loadable module, causing a
    link error:
    
    arch/arm/mach-davinci/built-in.o: In function `davinci_get_mac_addr':
    :(.text+0x1088): undefined reference to `nvmem_device_read'
    arch/arm/mach-davinci/built-in.o: In function `read_factory_config':
    :(.text+0x214c): undefined reference to `nvmem_device_read'
    
    Also, when NVMEM is completely disabled, the functions fail with
    nonobvious error messages.
    
    This ensures we only call the API functions when the code is actually
    reachable from the board file, and otherwise prints a unique log
    message.
    
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>
    Fixes: bec3c11bad0e ("misc: at24: replace memory_accessor with nvmem_device_read")
    Signed-off-by: Sekhar Nori <nsekhar@ti.com>
    Signed-off-by: Kevin Hilman <khilman@baylibre.com>

diff --git a/arch/arm/mach-davinci/common.c b/arch/arm/mach-davinci/common.c
index f55ef2ef2f92..742133b7266a 100644
--- a/arch/arm/mach-davinci/common.c
+++ b/arch/arm/mach-davinci/common.c
@@ -33,6 +33,11 @@ void davinci_get_mac_addr(struct nvmem_device *nvmem, void *context)
 	char *mac_addr = davinci_soc_info.emac_pdata->mac_addr;
 	off_t offset = (off_t)context;
 
+	if (!IS_BUILTIN(CONFIG_NVMEM)) {
+		pr_warn("Cannot read MAC addr from EEPROM without CONFIG_NVMEM\n");
+		return;
+	}
+
 	/* Read MAC addr from EEPROM */
 	if (nvmem_device_read(nvmem, offset, ETH_ALEN, mac_addr) == ETH_ALEN)
 		pr_info("Read MAC addr from EEPROM: %pM\n", mac_addr);

commit 6fc9ebbdeb75197df780c52f5ebcc3eeffb9cd91
Author: David Lechner <david@lechnology.com>
Date:   Thu Apr 14 14:13:35 2016 -0500

    ARM: davinci: Move clock init after ioremap.
    
    Some clocks (such as the USB PHY clocks in DA8xx) will need to use iomem.
    The davinci_common_init() function must be called before the ioremap, so
    the clock init is now split out as separate function.
    
    Signed-off-by: David Lechner <david@lechnology.com>
    Signed-off-by: Sekhar Nori <nsekhar@ti.com>

diff --git a/arch/arm/mach-davinci/common.c b/arch/arm/mach-davinci/common.c
index f55ef2ef2f92..6bc8c22b8ace 100644
--- a/arch/arm/mach-davinci/common.c
+++ b/arch/arm/mach-davinci/common.c
@@ -103,12 +103,6 @@ void __init davinci_common_init(struct davinci_soc_info *soc_info)
 	if (ret < 0)
 		goto err;
 
-	if (davinci_soc_info.cpu_clks) {
-		ret = davinci_clk_init(davinci_soc_info.cpu_clks);
-
-		if (ret != 0)
-			goto err;
-	}
 
 	return;
 

commit bec3c11bad0e7ac05fb90f204d0ab6f79945822b
Author: Andrew Lunn <andrew@lunn.ch>
Date:   Fri Feb 26 20:59:24 2016 +0100

    misc: at24: replace memory_accessor with nvmem_device_read
    
    Now that the AT24 uses the NVMEM framework, replace the
    memory_accessor in the setup() callback with nvmem API calls.
    
    Signed-off-by: Andrew Lunn <andrew@lunn.ch>
    Acked-by: Srinivas Kandagatla <srinivas.kandagatla@linaro.org>
    Tested-by: Sekhar Nori <nsekhar@ti.com>
    Acked-by: Wolfram Sang <wsa@the-dreams.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/arch/arm/mach-davinci/common.c b/arch/arm/mach-davinci/common.c
index a794f6d9d444..f55ef2ef2f92 100644
--- a/arch/arm/mach-davinci/common.c
+++ b/arch/arm/mach-davinci/common.c
@@ -28,13 +28,13 @@ EXPORT_SYMBOL(davinci_soc_info);
 void __iomem *davinci_intc_base;
 int davinci_intc_type;
 
-void davinci_get_mac_addr(struct memory_accessor *mem_acc, void *context)
+void davinci_get_mac_addr(struct nvmem_device *nvmem, void *context)
 {
 	char *mac_addr = davinci_soc_info.emac_pdata->mac_addr;
 	off_t offset = (off_t)context;
 
 	/* Read MAC addr from EEPROM */
-	if (mem_acc->read(mem_acc, mac_addr, offset, ETH_ALEN) == ETH_ALEN)
+	if (nvmem_device_read(nvmem, offset, ETH_ALEN, mac_addr) == ETH_ALEN)
 		pr_info("Read MAC addr from EEPROM: %pM\n", mac_addr);
 }
 

commit 915d6cfab391863aa283c4196f1686d416a6bb05
Author: Marek Szyprowski <m.szyprowski@samsung.com>
Date:   Thu Nov 8 08:46:19 2012 +0100

    ARM: davinci: remove obsoleted init_consistent_dma_size()
    
    Signed-off-by: Marek Szyprowski <m.szyprowski@samsung.com>
    CC: Sekhar Nori <nsekhar@ti.com>
    CC: Kevin Hilman <khilman@ti.com>

diff --git a/arch/arm/mach-davinci/common.c b/arch/arm/mach-davinci/common.c
index 64b0f65a8639..a794f6d9d444 100644
--- a/arch/arm/mach-davinci/common.c
+++ b/arch/arm/mach-davinci/common.c
@@ -87,8 +87,6 @@ void __init davinci_common_init(struct davinci_soc_info *soc_info)
 		iotable_init(davinci_soc_info.io_desc,
 				davinci_soc_info.io_desc_num);
 
-	init_consistent_dma_size(14 << 20);
-
 	/*
 	 * Normally devicemaps_init() would flush caches and tlb after
 	 * mdesc->map_io(), but we must also do it here because of the CPU

commit 3aa3e8407ae9023c5ff59bf5c81fc2553c31eb70
Author: Shawn Guo <shawn.guo@linaro.org>
Date:   Thu Apr 26 09:45:39 2012 +0800

    ARM: davinci: use machine specific hook for late init
    
    Cc: Kevin Hilman <khilman@ti.com>
    Signed-off-by: Shawn Guo <shawn.guo@linaro.org>
    Acked-by: Sekhar Nori <nsekhar@ti.com>

diff --git a/arch/arm/mach-davinci/common.c b/arch/arm/mach-davinci/common.c
index cb9b2e47510c..64b0f65a8639 100644
--- a/arch/arm/mach-davinci/common.c
+++ b/arch/arm/mach-davinci/common.c
@@ -117,3 +117,10 @@ void __init davinci_common_init(struct davinci_soc_info *soc_info)
 err:
 	panic("davinci_common_init: SoC Initialization failed\n");
 }
+
+void __init davinci_init_late(void)
+{
+	davinci_cpufreq_init();
+	davinci_pm_init();
+	davinci_clk_disable_unused();
+}

commit c6121ddd1f75278ab77504af2914d07831558672
Author: Sekhar Nori <nsekhar@ti.com>
Date:   Mon Dec 5 11:29:46 2011 +0100

    ARM: 7190/1: restart: davinci: use new restart hook
    
    Rather than using DaVinci specific davinci_soc_info based
    restart hook, use the restart hook available in the machine
    descriptor instead.
    
    Tested on DM365 and AM18x EVMs.
    
    v2:
    Changed to use restart hook in machine descriptor
    per Russell's comment.
    
    Signed-off-by: Sekhar Nori <nsekhar@ti.com>
    Signed-off-by: Russell King <rmk+kernel@arm.linux.org.uk>

diff --git a/arch/arm/mach-davinci/common.c b/arch/arm/mach-davinci/common.c
index 865ffe5899ac..cb9b2e47510c 100644
--- a/arch/arm/mach-davinci/common.c
+++ b/arch/arm/mach-davinci/common.c
@@ -97,9 +97,6 @@ void __init davinci_common_init(struct davinci_soc_info *soc_info)
 	local_flush_tlb_all();
 	flush_cache_all();
 
-	if (!davinci_soc_info.reset)
-		davinci_soc_info.reset = davinci_watchdog_reset;
-
 	/*
 	 * We want to check CPU revision early for cpu_is_xxxx() macros.
 	 * IO space mapping must be initialized before we can do that.

commit fd24f903182b3f2cda39d95574e45aa8983e5770
Author: Jon Medhurst <tixy@yxit.co.uk>
Date:   Thu Aug 4 14:51:45 2011 +0100

    ARM: mach-davinci: Setup consistent dma size at boot time
    
    Signed-off-by: Jon Medhurst <tixy@yxit.co.uk>
    CC: Sekhar Nori <nsekhar@ti.com>
    CC: Kevin Hilman <khilman@ti.com>

diff --git a/arch/arm/mach-davinci/common.c b/arch/arm/mach-davinci/common.c
index 1d2557394235..865ffe5899ac 100644
--- a/arch/arm/mach-davinci/common.c
+++ b/arch/arm/mach-davinci/common.c
@@ -12,6 +12,7 @@
 #include <linux/io.h>
 #include <linux/etherdevice.h>
 #include <linux/davinci_emac.h>
+#include <linux/dma-mapping.h>
 
 #include <asm/tlb.h>
 #include <asm/mach/map.h>
@@ -86,6 +87,8 @@ void __init davinci_common_init(struct davinci_soc_info *soc_info)
 		iotable_init(davinci_soc_info.io_desc,
 				davinci_soc_info.io_desc_num);
 
+	init_consistent_dma_size(14 << 20);
+
 	/*
 	 * Normally devicemaps_init() would flush caches and tlb after
 	 * mdesc->map_io(), but we must also do it here because of the CPU

commit bd808947040ba53b2b0e52dde598a9414fb27bba
Author: Cyril Chemparathy <cyril@ti.com>
Date:   Fri May 7 17:06:37 2010 -0400

    Davinci: aintc/cpintc - use ioremap()
    
    This patch implements the following:
    
     - interrupt initialization uses ioremap() instead of passing a virtual address
       via davinci_soc_info.
    
     - machine definitions directly point to cp_intc_init() or davinci_irq_init()
    
     - davinci_intc_type and davinci_intc_base now get initialized in controller
       specific init functions instead of davinci_common_init()
    
     - minor fix in davinci_irq_init() to use intc_irq_num instead of
       DAVINCI_N_AINTC_IRQ
    
    Signed-off-by: Cyril Chemparathy <cyril@ti.com>
    Signed-off-by: Kevin Hilman <khilman@deeprootsystems.com>

diff --git a/arch/arm/mach-davinci/common.c b/arch/arm/mach-davinci/common.c
index 65e073df5bc9..1d2557394235 100644
--- a/arch/arm/mach-davinci/common.c
+++ b/arch/arm/mach-davinci/common.c
@@ -112,8 +112,6 @@ void __init davinci_common_init(struct davinci_soc_info *soc_info)
 			goto err;
 	}
 
-	davinci_intc_base = davinci_soc_info.intc_base;
-	davinci_intc_type = davinci_soc_info.intc_type;
 	return;
 
 err:

commit 3347db8392486a1b52aab980cc445cf505c36d45
Author: Cyril Chemparathy <cyril@ti.com>
Date:   Fri May 7 17:06:34 2010 -0400

    Davinci: jtag_id - use ioremap()
    
    This patch replaces the jtag id base info in davinci_soc_info with a physical
    address which is then ioremap()ed within common code.
    
    This patch (in combination with a similar change for PSC) will allow us to
    eliminate the SYSCFG nastiness in DA8xx code.
    
    Signed-off-by: Cyril Chemparathy <cyril@ti.com>
    Signed-off-by: Kevin Hilman <khilman@deeprootsystems.com>

diff --git a/arch/arm/mach-davinci/common.c b/arch/arm/mach-davinci/common.c
index f8221c5ee380..65e073df5bc9 100644
--- a/arch/arm/mach-davinci/common.c
+++ b/arch/arm/mach-davinci/common.c
@@ -37,26 +37,43 @@ void davinci_get_mac_addr(struct memory_accessor *mem_acc, void *context)
 		pr_info("Read MAC addr from EEPROM: %pM\n", mac_addr);
 }
 
-static struct davinci_id * __init davinci_get_id(u32 jtag_id)
+static int __init davinci_init_id(struct davinci_soc_info *soc_info)
 {
-	int i;
-	struct davinci_id *dip;
-	u8 variant = (jtag_id & 0xf0000000) >> 28;
-	u16 part_no = (jtag_id & 0x0ffff000) >> 12;
+	int			i;
+	struct davinci_id	*dip;
+	u8			variant;
+	u16			part_no;
+	void __iomem		*base;
+
+	base = ioremap(soc_info->jtag_id_reg, SZ_4K);
+	if (!base) {
+		pr_err("Unable to map JTAG ID register\n");
+		return -ENOMEM;
+	}
+
+	soc_info->jtag_id = __raw_readl(base);
+	iounmap(base);
 
-	for (i = 0, dip = davinci_soc_info.ids; i < davinci_soc_info.ids_num;
+	variant = (soc_info->jtag_id & 0xf0000000) >> 28;
+	part_no = (soc_info->jtag_id & 0x0ffff000) >> 12;
+
+	for (i = 0, dip = soc_info->ids; i < soc_info->ids_num;
 			i++, dip++)
 		/* Don't care about the manufacturer right now */
-		if ((dip->part_no == part_no) && (dip->variant == variant))
-			return dip;
-
-	return NULL;
+		if ((dip->part_no == part_no) && (dip->variant == variant)) {
+			soc_info->cpu_id = dip->cpu_id;
+			pr_info("DaVinci %s variant 0x%x\n", dip->name,
+					dip->variant);
+			return 0;
+		}
+
+	pr_err("Unknown DaVinci JTAG ID 0x%x\n", soc_info->jtag_id);
+	return -EINVAL;
 }
 
 void __init davinci_common_init(struct davinci_soc_info *soc_info)
 {
 	int ret;
-	struct davinci_id *dip;
 
 	if (!soc_info) {
 		ret = -EINVAL;
@@ -84,18 +101,9 @@ void __init davinci_common_init(struct davinci_soc_info *soc_info)
 	 * We want to check CPU revision early for cpu_is_xxxx() macros.
 	 * IO space mapping must be initialized before we can do that.
 	 */
-	davinci_soc_info.jtag_id = __raw_readl(davinci_soc_info.jtag_id_base);
-
-	dip = davinci_get_id(davinci_soc_info.jtag_id);
-	if (!dip) {
-		ret = -EINVAL;
-		pr_err("Unknown DaVinci JTAG ID 0x%x\n",
-						davinci_soc_info.jtag_id);
+	ret = davinci_init_id(&davinci_soc_info);
+	if (ret < 0)
 		goto err;
-	}
-
-	davinci_soc_info.cpu_id = dip->cpu_id;
-	pr_info("DaVinci %s variant 0x%x\n", dip->name, dip->variant);
 
 	if (davinci_soc_info.cpu_clks) {
 		ret = davinci_clk_init(davinci_soc_info.cpu_clks);

commit c78a5bc2e77e8fc5be29cda5b28c9b9afd0f4b6d
Author: Cyril Chemparathy <cyril@ti.com>
Date:   Sat May 1 18:38:28 2010 -0400

    Davinci: watchdog reset separation across socs
    
    The earlier watchdog reset mechanism had a couple of limitations.  First, it
    embedded a reference to "davinci_wdt_device" inside common code.  This
    forced all derived platforms (da8xx and tnetv107x) to define such a device.
    This also would have caused problems in including multiple socs in a single
    build due to symbol redefinition.
    
    With this patch, davinci_watchdog_reset() now takes the platform device as an
    argument.  The davinci_soc_info struct has been extended to include a reset
    function and a watchdog platform_device.  arch_reset() then uses these
    elements to reset the system in a SoC specific fashion.
    
    Signed-off-by: Cyril Chemparathy <cyril@ti.com>
    Tested-by: Sandeep Paulraj <s-paulraj@ti.com>
    Signed-off-by: Kevin Hilman <khilman@deeprootsystems.com>

diff --git a/arch/arm/mach-davinci/common.c b/arch/arm/mach-davinci/common.c
index 94f27cbcd55a..f8221c5ee380 100644
--- a/arch/arm/mach-davinci/common.c
+++ b/arch/arm/mach-davinci/common.c
@@ -77,6 +77,9 @@ void __init davinci_common_init(struct davinci_soc_info *soc_info)
 	local_flush_tlb_all();
 	flush_cache_all();
 
+	if (!davinci_soc_info.reset)
+		davinci_soc_info.reset = davinci_watchdog_reset;
+
 	/*
 	 * We want to check CPU revision early for cpu_is_xxxx() macros.
 	 * IO space mapping must be initialized before we can do that.

commit 8ee2bf9ab792d0c02b13ca3acbd036debb7745d9
Author: Sriramakrishnan <srk@ti.com>
Date:   Thu Nov 19 15:58:25 2009 +0530

    TI Davinci EMAC : Re-use driver for other platforms.
    
    The davinci EMAC peripheral is also available on other TI
    platforms -notably TI AM3517 SoC. This patch modifies the
    config option and the platform structure header files so that
    the driver can be reused on non-davinci platforms as well.
    
    Signed-off-by: Sriramakrishnan <srk@ti.com>
    Acked-by: Chaithrika U S <chaithrika@ti.com>
    Acked-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Kevin Hilman <khilman@deeprootsystems.com>

diff --git a/arch/arm/mach-davinci/common.c b/arch/arm/mach-davinci/common.c
index c2de94cde56a..94f27cbcd55a 100644
--- a/arch/arm/mach-davinci/common.c
+++ b/arch/arm/mach-davinci/common.c
@@ -11,13 +11,13 @@
 #include <linux/module.h>
 #include <linux/io.h>
 #include <linux/etherdevice.h>
+#include <linux/davinci_emac.h>
 
 #include <asm/tlb.h>
 #include <asm/mach/map.h>
 
 #include <mach/common.h>
 #include <mach/cputype.h>
-#include <mach/emac.h>
 
 #include "clock.h"
 

commit 69872e93d971e72cd43fdf90befaaffd8e32437a
Author: Sekhar Nori <nsekhar@ti.com>
Date:   Thu Oct 1 12:41:06 2009 +0530

    davinci: make it easier to identify SoC init failures
    
    This patch makes it easier to identify SoC init failures
    by panicing when SoC init fails. Without successful SoC
    init, the kernel eventually fails when attempt is made to
    access the clocks.
    
    Also, an error is printed when JTAG ID match fails to make
    it easier to identify failures due to SoC rev changes.
    
    Signed-off-by: Sekhar Nori <nsekhar@ti.com>
    Signed-off-by: Kevin Hilman <khilman@deeprootsystems.com>

diff --git a/arch/arm/mach-davinci/common.c b/arch/arm/mach-davinci/common.c
index 61ede19c6b54..c2de94cde56a 100644
--- a/arch/arm/mach-davinci/common.c
+++ b/arch/arm/mach-davinci/common.c
@@ -86,6 +86,8 @@ void __init davinci_common_init(struct davinci_soc_info *soc_info)
 	dip = davinci_get_id(davinci_soc_info.jtag_id);
 	if (!dip) {
 		ret = -EINVAL;
+		pr_err("Unknown DaVinci JTAG ID 0x%x\n",
+						davinci_soc_info.jtag_id);
 		goto err;
 	}
 
@@ -104,5 +106,5 @@ void __init davinci_common_init(struct davinci_soc_info *soc_info)
 	return;
 
 err:
-	pr_err("davinci_common_init: SoC Initialization failed\n");
+	panic("davinci_common_init: SoC Initialization failed\n");
 }

commit 0b0c4c2a6974eae7b96066cb0da35b526fe58468
Author: Mark A. Greer <mgreer@mvista.com>
Date:   Wed Apr 15 12:41:40 2009 -0700

    davinci: Integrate cp_intc support into low-level irq code
    
    Integrate the Common Platform Interrupt Controller (cp_intc)
    support into the low-level irq handling for davinci and similar
    platforms.  Do it such that support for cp_intc and the original
    aintc can coexist in the same kernel binary.
    
    Signed-off-by: Mark A. Greer <mgreer@mvista.com>
    Signed-off-by: Kevin Hilman <khilman@deeprootsystems.com>

diff --git a/arch/arm/mach-davinci/common.c b/arch/arm/mach-davinci/common.c
index 169ec73f8d76..61ede19c6b54 100644
--- a/arch/arm/mach-davinci/common.c
+++ b/arch/arm/mach-davinci/common.c
@@ -25,6 +25,7 @@ struct davinci_soc_info davinci_soc_info;
 EXPORT_SYMBOL(davinci_soc_info);
 
 void __iomem *davinci_intc_base;
+int davinci_intc_type;
 
 void davinci_get_mac_addr(struct memory_accessor *mem_acc, void *context)
 {
@@ -99,6 +100,7 @@ void __init davinci_common_init(struct davinci_soc_info *soc_info)
 	}
 
 	davinci_intc_base = davinci_soc_info.intc_base;
+	davinci_intc_type = davinci_soc_info.intc_type;
 	return;
 
 err:

commit b14dc0f9942a9c318c6c49f29511d88b3642e2d0
Author: Mark A. Greer <mgreer@mvista.com>
Date:   Wed Apr 15 12:41:27 2009 -0700

    davinci: Factor out emac mac address handling
    
    Factor out the code to extract that mac address from
    i2c eeprom.
    
    Signed-off-by: Mark A. Greer <mgreer@mvista.com>
    Signed-off-by: Kevin Hilman <khilman@deeprootsystems.com>

diff --git a/arch/arm/mach-davinci/common.c b/arch/arm/mach-davinci/common.c
index d72d517d090c..169ec73f8d76 100644
--- a/arch/arm/mach-davinci/common.c
+++ b/arch/arm/mach-davinci/common.c
@@ -10,12 +10,14 @@
  */
 #include <linux/module.h>
 #include <linux/io.h>
+#include <linux/etherdevice.h>
 
 #include <asm/tlb.h>
 #include <asm/mach/map.h>
 
 #include <mach/common.h>
 #include <mach/cputype.h>
+#include <mach/emac.h>
 
 #include "clock.h"
 
@@ -24,6 +26,16 @@ EXPORT_SYMBOL(davinci_soc_info);
 
 void __iomem *davinci_intc_base;
 
+void davinci_get_mac_addr(struct memory_accessor *mem_acc, void *context)
+{
+	char *mac_addr = davinci_soc_info.emac_pdata->mac_addr;
+	off_t offset = (off_t)context;
+
+	/* Read MAC addr from EEPROM */
+	if (mem_acc->read(mem_acc, mac_addr, offset, ETH_ALEN) == ETH_ALEN)
+		pr_info("Read MAC addr from EEPROM: %pM\n", mac_addr);
+}
+
 static struct davinci_id * __init davinci_get_id(u32 jtag_id)
 {
 	int i;

commit 673dd36f0d0cf8893d6b46d524ad80e81076b885
Author: Mark A. Greer <mgreer@mvista.com>
Date:   Wed Apr 15 12:40:00 2009 -0700

    davinci: Move interrupt ctlr info to SoC infrastructure
    
    Use the SoC infrastructure to hold the interrupt controller
    information (i.e., base address, default priorities,
    interrupt controller type, and the number of IRQs).
    
    The interrupt controller base, although initially put
    in the soc_info structure's intc_base field, is eventually
    put in the global 'davinci_intc_base' so the low-level
    interrupt code can access it without a dereference.
    
    These changes enable the SoC default irq priorities to be
    put in the SoC-specific files, and the interrupt controller
    to be at any base address.
    
    Signed-off-by: Mark A. Greer <mgreer@mvista.com>
    Signed-off-by: Kevin Hilman <khilman@deeprootsystems.com>

diff --git a/arch/arm/mach-davinci/common.c b/arch/arm/mach-davinci/common.c
index 2e5b888e6ca6..d72d517d090c 100644
--- a/arch/arm/mach-davinci/common.c
+++ b/arch/arm/mach-davinci/common.c
@@ -22,6 +22,8 @@
 struct davinci_soc_info davinci_soc_info;
 EXPORT_SYMBOL(davinci_soc_info);
 
+void __iomem *davinci_intc_base;
+
 static struct davinci_id * __init davinci_get_id(u32 jtag_id)
 {
 	int i;
@@ -84,6 +86,7 @@ void __init davinci_common_init(struct davinci_soc_info *soc_info)
 			goto err;
 	}
 
+	davinci_intc_base = davinci_soc_info.intc_base;
 	return;
 
 err:

commit 66e0c3991c5a1735dd8add77ab8aff5005f57681
Author: Mark A. Greer <mgreer@mvista.com>
Date:   Wed Apr 15 12:39:23 2009 -0700

    davinci: Add clock init call to common init routine
    
    All of the davinci SoCs need to call davinci_clk_init() so
    put the call in the common init routine.
    
    Signed-off-by: Mark A. Greer <mgreer@mvista.com>
    Signed-off-by: Kevin Hilman <khilman@deeprootsystems.com>

diff --git a/arch/arm/mach-davinci/common.c b/arch/arm/mach-davinci/common.c
index 29b3a8d51211..2e5b888e6ca6 100644
--- a/arch/arm/mach-davinci/common.c
+++ b/arch/arm/mach-davinci/common.c
@@ -17,6 +17,8 @@
 #include <mach/common.h>
 #include <mach/cputype.h>
 
+#include "clock.h"
+
 struct davinci_soc_info davinci_soc_info;
 EXPORT_SYMBOL(davinci_soc_info);
 
@@ -75,6 +77,13 @@ void __init davinci_common_init(struct davinci_soc_info *soc_info)
 	davinci_soc_info.cpu_id = dip->cpu_id;
 	pr_info("DaVinci %s variant 0x%x\n", dip->name, dip->variant);
 
+	if (davinci_soc_info.cpu_clks) {
+		ret = davinci_clk_init(davinci_soc_info.cpu_clks);
+
+		if (ret != 0)
+			goto err;
+	}
+
 	return;
 
 err:

commit b9ab12797e74d93a3656ea0bf5591f8b3e094fd5
Author: Mark A. Greer <mgreer@mvista.com>
Date:   Wed Apr 15 12:39:09 2009 -0700

    davinci: Support JTAG ID register at any address
    
    The Davinci cpu_is_davinci_*() macros use the SoC part number
    and variant retrieved from the JTAG ID register to determine the
    type of cpu that the kernel is running on.  Currently, the code to
    read the JTAG ID register assumes that the register is always at
    the same base address.  This isn't true on some newer SoCs.
    
    To solve this, have the SoC-specific code set the JTAG ID register
    base address in soc_info structure and add a 'cpu_id' member to it.
    'cpu_id' will be used by the cpu_is_davinci_*() macros to match
    the cpu id.  Also move the info used to identify the cpu type into
    the SoC-specific code to keep all SoC-specific code together.
    
    The common code will read the JTAG ID register, search through
    an array of davinci_id structures to identify the cpu type.
    Once identified, it will set the 'cpu_id' member of the soc_info
    structure to the proper value and the cpu_is_davinci_*() macros
    will now work.
    
    Signed-off-by: Mark A. Greer <mgreer@mvista.com>
    Signed-off-by: Kevin Hilman <khilman@deeprootsystems.com>

diff --git a/arch/arm/mach-davinci/common.c b/arch/arm/mach-davinci/common.c
index 9a5486f5519c..29b3a8d51211 100644
--- a/arch/arm/mach-davinci/common.c
+++ b/arch/arm/mach-davinci/common.c
@@ -15,13 +15,31 @@
 #include <asm/mach/map.h>
 
 #include <mach/common.h>
+#include <mach/cputype.h>
 
 struct davinci_soc_info davinci_soc_info;
 EXPORT_SYMBOL(davinci_soc_info);
 
+static struct davinci_id * __init davinci_get_id(u32 jtag_id)
+{
+	int i;
+	struct davinci_id *dip;
+	u8 variant = (jtag_id & 0xf0000000) >> 28;
+	u16 part_no = (jtag_id & 0x0ffff000) >> 12;
+
+	for (i = 0, dip = davinci_soc_info.ids; i < davinci_soc_info.ids_num;
+			i++, dip++)
+		/* Don't care about the manufacturer right now */
+		if ((dip->part_no == part_no) && (dip->variant == variant))
+			return dip;
+
+	return NULL;
+}
+
 void __init davinci_common_init(struct davinci_soc_info *soc_info)
 {
 	int ret;
+	struct davinci_id *dip;
 
 	if (!soc_info) {
 		ret = -EINVAL;
@@ -46,7 +64,16 @@ void __init davinci_common_init(struct davinci_soc_info *soc_info)
 	 * We want to check CPU revision early for cpu_is_xxxx() macros.
 	 * IO space mapping must be initialized before we can do that.
 	 */
-	davinci_check_revision();
+	davinci_soc_info.jtag_id = __raw_readl(davinci_soc_info.jtag_id_base);
+
+	dip = davinci_get_id(davinci_soc_info.jtag_id);
+	if (!dip) {
+		ret = -EINVAL;
+		goto err;
+	}
+
+	davinci_soc_info.cpu_id = dip->cpu_id;
+	pr_info("DaVinci %s variant 0x%x\n", dip->name, dip->variant);
 
 	return;
 

commit 79c3c0b729647a6246c120408f36e6804dab244e
Author: Mark A. Greer <mgreer@mvista.com>
Date:   Wed Apr 15 12:38:58 2009 -0700

    davinci: Encapsulate SoC-specific data in a structure
    
    Create a structure to encapsulate SoC-specific information.
    This will assist in generalizing code so it can be used by
    different SoCs that have similar hardware but with minor
    differences such as having a different base address.
    
    The idea is that the code for each SoC fills out a structure
    with the correct information.  The board-specific code then
    calls the SoC init routine which in turn will call a common
    init routine that makes a copy of the structure, maps in I/O
    regions, etc.
    
    After initialization, code can get a pointer to the structure
    by calling davinci_get_soc_info().  Eventually, the common
    init routine will make a copy of all of the data pointed to
    by the structure so the original data can be made __init_data.
    That way the data for SoC's that aren't being used won't consume
    memory for the entire life of the kernel.
    
    The structure will be extended in subsequent patches but
    initially, it holds the map_desc structure for any I/O
    regions the SoC/board wants statically mapped.
    
    Signed-off-by: Mark A. Greer <mgreer@mvista.com>
    Signed-off-by: Kevin Hilman <khilman@deeprootsystems.com>

diff --git a/arch/arm/mach-davinci/common.c b/arch/arm/mach-davinci/common.c
new file mode 100644
index 000000000000..9a5486f5519c
--- /dev/null
+++ b/arch/arm/mach-davinci/common.c
@@ -0,0 +1,55 @@
+/*
+ * Code commons to all DaVinci SoCs.
+ *
+ * Author: Mark A. Greer <mgreer@mvista.com>
+ *
+ * 2009 (c) MontaVista Software, Inc. This file is licensed under
+ * the terms of the GNU General Public License version 2. This program
+ * is licensed "as is" without any warranty of any kind, whether express
+ * or implied.
+ */
+#include <linux/module.h>
+#include <linux/io.h>
+
+#include <asm/tlb.h>
+#include <asm/mach/map.h>
+
+#include <mach/common.h>
+
+struct davinci_soc_info davinci_soc_info;
+EXPORT_SYMBOL(davinci_soc_info);
+
+void __init davinci_common_init(struct davinci_soc_info *soc_info)
+{
+	int ret;
+
+	if (!soc_info) {
+		ret = -EINVAL;
+		goto err;
+	}
+
+	memcpy(&davinci_soc_info, soc_info, sizeof(struct davinci_soc_info));
+
+	if (davinci_soc_info.io_desc && (davinci_soc_info.io_desc_num > 0))
+		iotable_init(davinci_soc_info.io_desc,
+				davinci_soc_info.io_desc_num);
+
+	/*
+	 * Normally devicemaps_init() would flush caches and tlb after
+	 * mdesc->map_io(), but we must also do it here because of the CPU
+	 * revision check below.
+	 */
+	local_flush_tlb_all();
+	flush_cache_all();
+
+	/*
+	 * We want to check CPU revision early for cpu_is_xxxx() macros.
+	 * IO space mapping must be initialized before we can do that.
+	 */
+	davinci_check_revision();
+
+	return;
+
+err:
+	pr_err("davinci_common_init: SoC Initialization failed\n");
+}
