commit d2199b34871b859d33cd08398af5f1530241cb4e
Author: Peng Fan <peng.fan@nxp.com>
Date:   Wed May 20 13:51:27 2020 +0800

    ARM: imx: use device_initcall for imx_soc_device_init
    
    This is preparation to move imx_soc_device_init to drivers/soc/imx/
    
    There is no reason to must put dt devices under /sys/devices/soc0,
    they could also be under /sys/devices/platform, so we could
    pass NULL as parent when calling of_platform_default_populate.
    
    Following soc-imx8.c soc-imx-scu.c using device_initcall, need
    to change return type to int type for imx_soc_device_init.
    
    Signed-off-by: Peng Fan <peng.fan@nxp.com>
    Signed-off-by: Shawn Guo <shawnguo@kernel.org>

diff --git a/arch/arm/mach-imx/common.h b/arch/arm/mach-imx/common.h
index 5aa5796cff0e..72c3fcc32910 100644
--- a/arch/arm/mach-imx/common.h
+++ b/arch/arm/mach-imx/common.h
@@ -49,7 +49,6 @@ void imx_aips_allow_unprivileged_access(const char *compat);
 int mxc_device_init(void);
 void imx_set_soc_revision(unsigned int rev);
 void imx_init_revision_from_anatop(void);
-struct device *imx_soc_device_init(void);
 void imx6_enable_rbc(bool enable);
 void imx_gpc_check_dt(void);
 void imx_gpc_set_arm_power_in_lpm(bool power_off);

commit 512a928affd51c2dc631401e56ad5ee5d5dd68b6
Author: Ahmad Fatoum <a.fatoum@pengutronix.de>
Date:   Thu Jan 16 15:18:49 2020 +0100

    ARM: imx: build v7_cpu_resume() unconditionally
    
    This function is not only needed by the platform suspend code, but is also
    reused as the CPU resume function when the ARM cores can be powered down
    completely in deep idle, which is the case on i.MX6SX and i.MX6UL(L).
    
    Providing the static inline stub whenever CONFIG_SUSPEND is disabled means
    that those platforms will hang on resume from cpuidle if suspend is disabled.
    
    So there are two problems:
    
      - The static inline stub masks the linker error
      - The function is not available where needed
    
    Fix both by just building the function unconditionally, when
    CONFIG_SOC_IMX6 is enabled. The actual code is three instructions long,
    so it's arguably ok to just leave it in for all i.MX6 kernel configurations.
    
    Fixes: 05136f0897b5 ("ARM: imx: support arm power off in cpuidle for i.mx6sx")
    Signed-off-by: Lucas Stach <l.stach@pengutronix.de>
    Signed-off-by: Ahmad Fatoum <a.fatoum@pengutronix.de>
    Signed-off-by: Rouven Czerwinski <r.czerwinski@pengutronix.de>
    Signed-off-by: Shawn Guo <shawnguo@kernel.org>

diff --git a/arch/arm/mach-imx/common.h b/arch/arm/mach-imx/common.h
index 912aeceb4ff8..5aa5796cff0e 100644
--- a/arch/arm/mach-imx/common.h
+++ b/arch/arm/mach-imx/common.h
@@ -109,17 +109,17 @@ void imx_cpu_die(unsigned int cpu);
 int imx_cpu_kill(unsigned int cpu);
 
 #ifdef CONFIG_SUSPEND
-void v7_cpu_resume(void);
 void imx53_suspend(void __iomem *ocram_vbase);
 extern const u32 imx53_suspend_sz;
 void imx6_suspend(void __iomem *ocram_vbase);
 #else
-static inline void v7_cpu_resume(void) {}
 static inline void imx53_suspend(void __iomem *ocram_vbase) {}
 static const u32 imx53_suspend_sz;
 static inline void imx6_suspend(void __iomem *ocram_vbase) {}
 #endif
 
+void v7_cpu_resume(void);
+
 void imx6_pm_ccm_init(const char *ccm_compat);
 void imx6q_pm_init(void);
 void imx6dl_pm_init(void);

commit d2912cb15bdda8ba4a5dd73396ad62641af2f520
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Tue Jun 4 10:11:33 2019 +0200

    treewide: Replace GPLv2 boilerplate/reference with SPDX - rule 500
    
    Based on 2 normalized pattern(s):
    
      this program is free software you can redistribute it and or modify
      it under the terms of the gnu general public license version 2 as
      published by the free software foundation
    
      this program is free software you can redistribute it and or modify
      it under the terms of the gnu general public license version 2 as
      published by the free software foundation #
    
    extracted by the scancode license scanner the SPDX license identifier
    
      GPL-2.0-only
    
    has been chosen to replace the boilerplate/reference in 4122 file(s).
    
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Reviewed-by: Enrico Weigelt <info@metux.net>
    Reviewed-by: Kate Stewart <kstewart@linuxfoundation.org>
    Reviewed-by: Allison Randal <allison@lohutok.net>
    Cc: linux-spdx@vger.kernel.org
    Link: https://lkml.kernel.org/r/20190604081206.933168790@linutronix.de
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/arch/arm/mach-imx/common.h b/arch/arm/mach-imx/common.h
index c51764a85fd7..912aeceb4ff8 100644
--- a/arch/arm/mach-imx/common.h
+++ b/arch/arm/mach-imx/common.h
@@ -1,12 +1,8 @@
+/* SPDX-License-Identifier: GPL-2.0-only */
 /*
  * Copyright 2004-2014 Freescale Semiconductor, Inc. All Rights Reserved.
  */
 
-/*
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License version 2 as
- * published by the Free Software Foundation.
- */
 
 #ifndef __ASM_ARCH_MXC_COMMON_H__
 #define __ASM_ARCH_MXC_COMMON_H__

commit 6d45a4028c8a6bc0a1e92438283ef7d4ed6ffe71
Author: Anson Huang <anson.huang@nxp.com>
Date:   Mon Jan 14 08:54:59 2019 +0800

    ARM: imx: add i.MX7ULP cpuidle support
    
    This patch adds cpuidle support for i.MX7ULP, 3 cpuidle
    states supported as below:
    
    1. WFI, just ARM wfi;
    2. WAIT mode, mapped to SoC's partial stop mode #3;
    3. STOP mode, mapped to SoC's partial stop mode #1.
    
    In WAIT mode, system clock and bus clock will be enabled;
    In STOP mode, system clock and bus clock will be disabled.
    
    Signed-off-by: Anson Huang <Anson.Huang@nxp.com>
    Signed-off-by: Shawn Guo <shawnguo@kernel.org>

diff --git a/arch/arm/mach-imx/common.h b/arch/arm/mach-imx/common.h
index bc915e5b4d56..c51764a85fd7 100644
--- a/arch/arm/mach-imx/common.h
+++ b/arch/arm/mach-imx/common.h
@@ -72,6 +72,15 @@ enum mxc_cpu_pwr_mode {
 	STOP_POWER_OFF,		/* STOP + SRPG */
 };
 
+enum ulp_cpu_pwr_mode {
+	ULP_PM_HSRUN,    /* High speed run mode */
+	ULP_PM_RUN,      /* Run mode */
+	ULP_PM_WAIT,     /* Wait mode */
+	ULP_PM_STOP,     /* Stop mode */
+	ULP_PM_VLPS,     /* Very low power stop mode */
+	ULP_PM_VLLS,     /* very low leakage stop mode */
+};
+
 void imx_enable_cpu(int cpu, bool enable);
 void imx_set_cpu_jump(int cpu, void *jump_addr);
 u32 imx_get_cpu_arg(int cpu);
@@ -98,6 +107,7 @@ int imx6_set_lpm(enum mxc_cpu_pwr_mode mode);
 void imx6_set_int_mem_clk_lpm(bool enable);
 void imx6sl_set_wait_clk(bool enter);
 int imx_mmdc_get_ddr_type(void);
+int imx7ulp_set_lpm(enum ulp_cpu_pwr_mode mode);
 
 void imx_cpu_die(unsigned int cpu);
 int imx_cpu_kill(unsigned int cpu);

commit de70d0e9d43dd5fa899ce3a1560a4d2536b6b71e
Author: A.s. Dong <aisheng.dong@nxp.com>
Date:   Sat Nov 10 15:13:04 2018 +0000

    ARM: imx: add initial support for imx7ulp
    
    The i.MX 7ULP family of processors features NXP's advanced implementation
    of the Arm Cortex-A7 core, the Arm Cortex-M4 core, as well as a 3D and 2D
    Graphics Processing Units (GPUs).
    
    This patch aims to add an initial support for imx7ulp. Note that we need
    configure power mode to Partial Stop mode 3 with system/bus clock enabled
    first as the default enabled STOP mode will gate off system/bus clock when
    execute WFI in MX7ULP SoC.
    
    And there's still no MXC_CPU_IMX7ULP IDs read from register as ULP has no
    anatop as before. So we encode one with 0xff in reverse order in case new
    ones will be in the future.
    
    Cc: Shawn Guo <shawnguo@kernel.org>
    Signed-off-by: Dong Aisheng <aisheng.dong@nxp.com>
    Reviewed-by: Fabio Estevam <festevam@gmail.com>
    Signed-off-by: Shawn Guo <shawnguo@kernel.org>

diff --git a/arch/arm/mach-imx/common.h b/arch/arm/mach-imx/common.h
index 423dd76bb6b8..bc915e5b4d56 100644
--- a/arch/arm/mach-imx/common.h
+++ b/arch/arm/mach-imx/common.h
@@ -120,6 +120,7 @@ void imx6dl_pm_init(void);
 void imx6sl_pm_init(void);
 void imx6sx_pm_init(void);
 void imx6ul_pm_init(void);
+void imx7ulp_pm_init(void);
 
 #ifdef CONFIG_PM
 void imx51_pm_init(void);

commit 26b754f99402d6e7fc4e07d67a2597e6ebabde8b
Author: Fabio Estevam <fabio.estevam@nxp.com>
Date:   Tue Jul 10 13:31:48 2018 -0300

    ARM: mx5: Set the DBGEN bit in ARM_GPC register
    
    On i.MX51/i.MX53 it is necessary to set the DBGEN bit in
    ARM_GPC register in order to turn on the debug clocks.
    
    The DBGEN bit of ARM_GPC register has the following description
    in the i.MX53 Reference Manual:
    
    "This allows the user to manually activate clocks within the debug
    system. This register bit directly controls the platform's dbgen_out
    output signal which connects to the DAP_SYS to enable all debug clocks.
    Once enabled, the clocks cannot be disabled except by asserting the
    disable_trace input of the DAP_SYS."
    
    Based on a previous patch from Sebastian Reichel.
    
    Signed-off-by: Fabio Estevam <fabio.estevam@nxp.com>
    Signed-off-by: Shawn Guo <shawnguo@kernel.org>

diff --git a/arch/arm/mach-imx/common.h b/arch/arm/mach-imx/common.h
index 93225db759f8..423dd76bb6b8 100644
--- a/arch/arm/mach-imx/common.h
+++ b/arch/arm/mach-imx/common.h
@@ -62,6 +62,7 @@ void imx_gpc_set_arm_power_up_timing(u32 sw2iso, u32 sw);
 void imx_gpc_set_arm_power_down_timing(u32 sw2iso, u32 sw);
 void imx25_pm_init(void);
 void imx27_pm_init(void);
+void imx5_pmu_init(void);
 
 enum mxc_cpu_pwr_mode {
 	WAIT_CLOCKED,		/* wfi only */

commit c791bbbf812a18a7831619783f12a316beeac558
Author: Anson Huang <Anson.Huang@nxp.com>
Date:   Sun Jun 3 10:33:44 2018 +0800

    ARM: imx: add L2 page power control for GPC
    
    Some platforms like i.MX6UL/i.MX6SLL have L2
    page power control in GPC, it needs to be
    disabled if ARM is power gated and L2 is NOT
    flushed, add GPC interface to control it.
    
    Signed-off-by: Anson Huang <Anson.Huang@nxp.com>
    Reviewed-by: Fabio Estevam <fabio.estevam@nxp.com>
    Signed-off-by: Shawn Guo <shawnguo@kernel.org>

diff --git a/arch/arm/mach-imx/common.h b/arch/arm/mach-imx/common.h
index 18aae76fa2da..93225db759f8 100644
--- a/arch/arm/mach-imx/common.h
+++ b/arch/arm/mach-imx/common.h
@@ -57,6 +57,7 @@ struct device *imx_soc_device_init(void);
 void imx6_enable_rbc(bool enable);
 void imx_gpc_check_dt(void);
 void imx_gpc_set_arm_power_in_lpm(bool power_off);
+void imx_gpc_set_l2_mem_power_in_lpm(bool power_off);
 void imx_gpc_set_arm_power_up_timing(u32 sw2iso, u32 sw);
 void imx_gpc_set_arm_power_down_timing(u32 sw2iso, u32 sw);
 void imx25_pm_init(void);

commit 9235d1f85eb7628005aa86b17d7a311d53ae6967
Author: Clément Peron <clement.peron@devialet.com>
Date:   Mon May 28 19:34:08 2018 +0200

    ARM: imx: remove inexistant EPIT timer init
    
    i.MX EPIT timer has been removed but not the init function declaration.
    
    Signed-off-by: Clément Peron <clement.peron@devialet.com>
    Signed-off-by: Shawn Guo <shawnguo@kernel.org>

diff --git a/arch/arm/mach-imx/common.h b/arch/arm/mach-imx/common.h
index c8d68e918b2f..18aae76fa2da 100644
--- a/arch/arm/mach-imx/common.h
+++ b/arch/arm/mach-imx/common.h
@@ -38,7 +38,6 @@ void imx21_soc_init(void);
 void imx27_soc_init(void);
 void imx31_soc_init(void);
 void imx35_soc_init(void);
-void epit_timer_init(void __iomem *base, int irq);
 int mx21_clocks_init(unsigned long lref, unsigned long fref);
 int mx27_clocks_init(unsigned long fref);
 int mx31_clocks_init(unsigned long fref);

commit 5b2576ecf19418de699e230587a6d0b928a05e31
Author: Martin Kaiser <martin@kaiser.cx>
Date:   Tue Dec 19 11:07:04 2017 +0100

    ARM: imx: remove unused imx3 pm definitions
    
    Remove the defintion of mx3_cpu_lp_set(), this function is not
    implemented anywhere. Remove then mx3_cpu_pwr_mode enum as well,
    it was used only as parameter of mx3_cpu_lp_set().
    
    Signed-off-by: Martin Kaiser <martin@kaiser.cx>
    Reviewed-by: Fabio Estevam <fabio.estevam@nxp.com>
    Signed-off-by: Shawn Guo <shawnguo@kernel.org>

diff --git a/arch/arm/mach-imx/common.h b/arch/arm/mach-imx/common.h
index b09a2ec19267..c8d68e918b2f 100644
--- a/arch/arm/mach-imx/common.h
+++ b/arch/arm/mach-imx/common.h
@@ -71,15 +71,6 @@ enum mxc_cpu_pwr_mode {
 	STOP_POWER_OFF,		/* STOP + SRPG */
 };
 
-enum mx3_cpu_pwr_mode {
-	MX3_RUN,
-	MX3_WAIT,
-	MX3_DOZE,
-	MX3_SLEEP,
-};
-
-void mx3_cpu_lp_set(enum mx3_cpu_pwr_mode mode);
-
 void imx_enable_cpu(int cpu, bool enable);
 void imx_set_cpu_jump(int cpu, void *jump_addr);
 u32 imx_get_cpu_arg(int cpu);

commit 6fe5aeb5e7e9318bb720b1f582fc86b7ac3118c0
Author: Vladimir Zapolskiy <vz@mleia.com>
Date:   Mon Sep 26 03:03:43 2016 +0300

    ARM: clk: imx31: properly init clocks for machines with DT
    
    Clock initialization for i.MX31 powered machines with DT support
    should be done by a call of an init function registered with
    CLK_OF_DECLARE() in common clock framework.
    
    The change converts exported mx31_clocks_init_dt() into a static
    initialization function registered by CLK_OF_DECLARE().
    
    Signed-off-by: Vladimir Zapolskiy <vz@mleia.com>
    Acked-by: Stephen Boyd <sboyd@codeaurora.org>
    Signed-off-by: Shawn Guo <shawnguo@kernel.org>

diff --git a/arch/arm/mach-imx/common.h b/arch/arm/mach-imx/common.h
index c4436d9c52ff..b09a2ec19267 100644
--- a/arch/arm/mach-imx/common.h
+++ b/arch/arm/mach-imx/common.h
@@ -43,7 +43,6 @@ int mx21_clocks_init(unsigned long lref, unsigned long fref);
 int mx27_clocks_init(unsigned long fref);
 int mx31_clocks_init(unsigned long fref);
 int mx35_clocks_init(void);
-int mx31_clocks_init_dt(void);
 struct platform_device *mxc_register_gpio(char *name, int id,
 	resource_size_t iobase, resource_size_t iosize, int irq, int irq_high);
 void mxc_set_cpu_type(unsigned int type);

commit 66f2c6d9525baa7534640f09f406cd2987e0f287
Merge: a771151a8323 e40454d3f444
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Fri Oct 7 21:18:42 2016 -0700

    Merge tag 'armsoc-soc' of git://git.kernel.org/pub/scm/linux/kernel/git/arm/arm-soc
    
    Pull ARM SoC platform updates from Arnd Bergmann:
     "These are updates for platform specific code on 32-bit ARM machines,
      essentially anything that can not (yet) be expressed using DT files.
    
      Noteworthy changes include:
    
       - We get support for running in big-endian mode on two platforms:
         sunxi (Allwinner) and s3c24xx (old Samsung).
    
       - The recently added Uniphier platform now uses standard PSCI methods
         for SMP booting and we remove support for old bootloader versions
         that did not support it yet.
    
       - In sunxi, we gain support for the "Nextthing GR8" SoC, which is a
         close relative of the Allwinner A13 and R8 chips.
    
       - PXA completes its move over to the generic dmaengine framework and
         removes its old private API
    
       - mach-bcm gains support for BCM47189/BCM53573, their first ARM SoC
         with integrated 802.11ac wireless networking"
    
    * tag 'armsoc-soc' of git://git.kernel.org/pub/scm/linux/kernel/git/arm/arm-soc: (54 commits)
      ARM: imx legacy: pca100: move peripheral initialization to .init_late
      ARM: imx legacy: mx27ads: move peripheral initialization to .init_late
      ARM: imx legacy: mx21ads: move peripheral initialization to .init_late
      ARM: imx legacy: pcm043: move peripheral initialization to .init_late
      ARM: imx legacy: mx35-3ds: move peripheral initialization to .init_late
      ARM: imx legacy: mx27-3ds: move peripheral initialization to .init_late
      ARM: imx legacy: imx27-visstrim-m10: move peripheral initialization to .init_late
      ARM: imx legacy: vpr200: move peripheral initialization to .init_late
      ARM: imx legacy: mx31moboard: move peripheral initialization to .init_late
      ARM: imx legacy: armadillo5x0: move peripheral initialization to .init_late
      ARM: imx legacy: qong: move peripheral initialization to .init_late
      ARM: imx legacy: mx31-3ds: move peripheral initialization to .init_late
      ARM: imx legacy: pcm037: move peripheral initialization to .init_late
      ARM: imx legacy: mx31lilly: move peripheral initialization to .init_late
      ARM: imx legacy: mx31ads: move peripheral initialization to .init_late
      ARM: imx legacy: mx31lite: move peripheral initialization to .init_late
      ARM: imx legacy: kzm: move peripheral initialization to .init_late
      MAINTAINERS: update list of Oxnas maintainers
      ARM: orion5x: remove extraneous NO_IRQ
      ARM: orion: simplify orion_ge00_switch_init
      ...

commit 8765caa5cb6054247832947119ea533b5d410d2b
Author: Anson Huang <Anson.Huang@nxp.com>
Date:   Mon Aug 29 21:49:56 2016 +0800

    ARM: imx: rename imx6q_set_int_mem_clk_lpm() function
    
    Let's rename the function imx6q_set_int_mem_clk_lpm()
    to imx6_set_int_mem_clk_lpm() since it's actually
    common for all i.MX6 SoCs.
    
    Signed-off-by: Anson Huang <Anson.Huang@nxp.com>
    Signed-off-by: Shawn Guo <shawnguo@kernel.org>

diff --git a/arch/arm/mach-imx/common.h b/arch/arm/mach-imx/common.h
index a8f469333027..fb644304446c 100644
--- a/arch/arm/mach-imx/common.h
+++ b/arch/arm/mach-imx/common.h
@@ -109,7 +109,7 @@ void imx_anatop_init(void);
 void imx_anatop_pre_suspend(void);
 void imx_anatop_post_resume(void);
 int imx6_set_lpm(enum mxc_cpu_pwr_mode mode);
-void imx6q_set_int_mem_clk_lpm(bool enable);
+void imx6_set_int_mem_clk_lpm(bool enable);
 void imx6sl_set_wait_clk(bool enter);
 int imx_mmdc_get_ddr_type(void);
 

commit e1291cffcc509e790f46f1af6fec13eb8d44d5bb
Author: Alexander Shiyan <shc_work@mail.ru>
Date:   Sat Aug 6 07:56:25 2016 +0300

    ARM: i.MX: Remove i.MX1 non-DT support
    
    This patch removes registration helpers and support files,
    used for non-DT i.MX1 targets.
    
    Signed-off-by: Alexander Shiyan <shc_work@mail.ru>
    Signed-off-by: Shawn Guo <shawnguo@kernel.org>

diff --git a/arch/arm/mach-imx/common.h b/arch/arm/mach-imx/common.h
index a8f469333027..bcca48138933 100644
--- a/arch/arm/mach-imx/common.h
+++ b/arch/arm/mach-imx/common.h
@@ -21,29 +21,24 @@ struct device_node;
 enum mxc_cpu_pwr_mode;
 struct of_device_id;
 
-void mx1_map_io(void);
 void mx21_map_io(void);
 void mx27_map_io(void);
 void mx31_map_io(void);
 void mx35_map_io(void);
-void imx1_init_early(void);
 void imx21_init_early(void);
 void imx27_init_early(void);
 void imx31_init_early(void);
 void imx35_init_early(void);
 void mxc_init_irq(void __iomem *);
-void mx1_init_irq(void);
 void mx21_init_irq(void);
 void mx27_init_irq(void);
 void mx31_init_irq(void);
 void mx35_init_irq(void);
-void imx1_soc_init(void);
 void imx21_soc_init(void);
 void imx27_soc_init(void);
 void imx31_soc_init(void);
 void imx35_soc_init(void);
 void epit_timer_init(void __iomem *base, int irq);
-int mx1_clocks_init(unsigned long fref);
 int mx21_clocks_init(unsigned long lref, unsigned long fref);
 int mx27_clocks_init(unsigned long fref);
 int mx31_clocks_init(unsigned long fref);

commit 48e076dadd0a79047befa539487d8645ded0b7e7
Author: Arnd Bergmann <arnd@arndb.de>
Date:   Tue Jun 28 10:22:16 2016 +0800

    ARM: imx: rework mx27_pm_init() call
    
    mx27_pm_init() uses its own initcall, unlike all of the other
    functions like it. Replacing the initcall with a .init_late()
    callback makes imx27 more like the others and lets us remove
    the last caller of cpu_is_mx27().
    
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>
    Signed-off-by: Shawn Guo <shawnguo@kernel.org>

diff --git a/arch/arm/mach-imx/common.h b/arch/arm/mach-imx/common.h
index 0a1d1f175b7a..a8f469333027 100644
--- a/arch/arm/mach-imx/common.h
+++ b/arch/arm/mach-imx/common.h
@@ -67,6 +67,7 @@ void imx_gpc_set_arm_power_in_lpm(bool power_off);
 void imx_gpc_set_arm_power_up_timing(u32 sw2iso, u32 sw);
 void imx_gpc_set_arm_power_down_timing(u32 sw2iso, u32 sw);
 void imx25_pm_init(void);
+void imx27_pm_init(void);
 
 enum mxc_cpu_pwr_mode {
 	WAIT_CLOCKED,		/* wfi only */

commit 6f98cb22e4089c3eb63ff86fac010291a0e30241
Author: Arnd Bergmann <arnd@arndb.de>
Date:   Fri Jun 24 12:49:56 2016 +0200

    ARM: imx: remove cpu_is_mx1 check
    
    There is only one call site for this, and it's easily replaced
    by initializing the reset value at boot time.
    
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>
    Signed-off-by: Shawn Guo <shawnguo@kernel.org>

diff --git a/arch/arm/mach-imx/common.h b/arch/arm/mach-imx/common.h
index 60d9ae63f76e..0a1d1f175b7a 100644
--- a/arch/arm/mach-imx/common.h
+++ b/arch/arm/mach-imx/common.h
@@ -54,6 +54,7 @@ struct platform_device *mxc_register_gpio(char *name, int id,
 void mxc_set_cpu_type(unsigned int type);
 void mxc_restart(enum reboot_mode, const char *);
 void mxc_arch_reset_init(void __iomem *);
+void imx1_reset_init(void __iomem *);
 void imx_set_aips(void __iomem *);
 void imx_aips_allow_unprivileged_access(const char *compat);
 int mxc_device_init(void);

commit ead812669980aad571fdcfeb239d47c405dd248b
Author: Alexander Shiyan <shc_work@mail.ru>
Date:   Wed Jun 1 22:07:32 2016 +0300

    ARM: imx: Use IRQCHIP_DECLARE for TZIC
    
    Remove boilerplate code by using IRQCHIP_DECLARE macro.
    
    Signed-off-by: Alexander Shiyan <shc_work@mail.ru>
    Signed-off-by: Shawn Guo <shawnguo@kernel.org>

diff --git a/arch/arm/mach-imx/common.h b/arch/arm/mach-imx/common.h
index 58a38464480d..60d9ae63f76e 100644
--- a/arch/arm/mach-imx/common.h
+++ b/arch/arm/mach-imx/common.h
@@ -32,7 +32,6 @@ void imx27_init_early(void);
 void imx31_init_early(void);
 void imx35_init_early(void);
 void mxc_init_irq(void __iomem *);
-void tzic_init_irq(void);
 void mx1_init_irq(void);
 void mx21_init_irq(void);
 void mx27_init_irq(void);

commit 8c4300c227ffffc4db26b6bb3e0271de7ddbd289
Author: Fabio Estevam <fabio.estevam@nxp.com>
Date:   Tue Feb 2 19:45:38 2016 -0200

    ARM: mx25: Add basic suspend/resume support
    
    Tested basic suspend/resume on a mx25pdk:
    
    $ echo enabled > /sys/class/tty/ttymxc0/power/wakeup
    $ echo mem > /sys/power/state
    
    Then press any key in the serial console and the system wakes up.
    
    Signed-off-by: Fabio Estevam <fabio.estevam@nxp.com>
    Signed-off-by: Shawn Guo <shawnguo@kernel.org>

diff --git a/arch/arm/mach-imx/common.h b/arch/arm/mach-imx/common.h
index 32b83f09da18..58a38464480d 100644
--- a/arch/arm/mach-imx/common.h
+++ b/arch/arm/mach-imx/common.h
@@ -66,6 +66,7 @@ void imx_gpc_check_dt(void);
 void imx_gpc_set_arm_power_in_lpm(bool power_off);
 void imx_gpc_set_arm_power_up_timing(u32 sw2iso, u32 sw);
 void imx_gpc_set_arm_power_down_timing(u32 sw2iso, u32 sw);
+void imx25_pm_init(void);
 
 enum mxc_cpu_pwr_mode {
 	WAIT_CLOCKED,		/* wfi only */

commit 75305275a721d33ae9abfaeed2817cec8b2fee9a
Author: Masahiro Yamada <yamada.masahiro@socionext.com>
Date:   Sun Nov 15 10:39:53 2015 +0900

    ARM: use const and __initconst for smp_operations
    
    These smp_operations structures are not over-written, so add "const"
    qualifier and replace __initdata with __initconst.
    
    Also, add "static" where it is possible.
    
    Signed-off-by: Masahiro Yamada <yamada.masahiro@socionext.com>
    Acked-by: Krzysztof Kozlowski <k.kozlowski@samsung.com>
    Acked-by: Maxime Ripard <maxime.ripard@free-electrons.com>
    Acked-by: Moritz Fischer <moritz.fischer@ettus.com>
    Acked-by: Stephen Boyd <sboyd@codeaurora.org> # qcom part
    Acked-by: Viresh Kumar <viresh.kumar@linaro.org>
    Acked-by: Patrice Chotard <patrice.chotard@st.com>
    Acked-by: Heiko Stuebner <heiko@sntech.de>
    Acked-by: Wei Xu <xuwei5@hisilicon.com>
    Acked-by: Florian Fainelli <f.fainelli@gmail.com>
    Acked-by: Sebastian Hesselbarth <sebastian.hesselbarth@gmail.com>
    Acked-by: Gregory CLEMENT <gregory.clement@free-electrons.com>
    Acked-by: Shawn Guo <shawnguo@kernel.org>
    Acked-by: Matthias Brugger <matthias.bgg@gmail.com>
    Acked-by: Thierry Reding <treding@nvidia.com>
    Acked-by: Nicolas Pitre <nico@linaro.org>
    Acked-by: Liviu Dudau <Liviu.Dudau@arm.com>
    Acked-by: Linus Walleij <linus.walleij@linaro.org>
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>

diff --git a/arch/arm/mach-imx/common.h b/arch/arm/mach-imx/common.h
index e2d53839fceb..32b83f09da18 100644
--- a/arch/arm/mach-imx/common.h
+++ b/arch/arm/mach-imx/common.h
@@ -153,7 +153,7 @@ void imx_init_l2cache(void);
 static inline void imx_init_l2cache(void) {}
 #endif
 
-extern struct smp_operations imx_smp_ops;
-extern struct smp_operations ls1021a_smp_ops;
+extern const struct smp_operations imx_smp_ops;
+extern const struct smp_operations ls1021a_smp_ops;
 
 #endif

commit ee4a5f838c8437484c9387e9ef9256332f07f3dd
Author: Anson Huang <b20788@freescale.com>
Date:   Wed Aug 5 01:48:37 2015 +0800

    ARM: imx: add suspend/resume support for i.mx6ul
    
    This patch adds suspend function for i.MX6UL, it supports
    "standby" and "mem" mode, for "standby" mode, SoC will
    enter STOP mode only, while for "mem" mode, SoC will
    enter STOP mode and DDR IO will be set to low power
    mode.
    
    As i.MX6UL contains a "Cortex-A7" ARM core which has no
    PL310, so we need to avoid any PL310 operations during
    suspend/resume, also, we need to flush Cortex-A7's inernal
    L2 cache before suspend.
    
    Signed-off-by: Anson Huang <b20788@freescale.com>

diff --git a/arch/arm/mach-imx/common.h b/arch/arm/mach-imx/common.h
index 21e4e8697a58..e2d53839fceb 100644
--- a/arch/arm/mach-imx/common.h
+++ b/arch/arm/mach-imx/common.h
@@ -131,6 +131,7 @@ void imx6q_pm_init(void);
 void imx6dl_pm_init(void);
 void imx6sl_pm_init(void);
 void imx6sx_pm_init(void);
+void imx6ul_pm_init(void);
 
 #ifdef CONFIG_PM
 void imx51_pm_init(void);

commit 1579c7b9fe0105a523440ec13b0c59da53c880e3
Author: Martin Fuzzey <mfuzzey@parkeon.com>
Date:   Tue May 12 15:31:03 2015 +0200

    ARM: imx53: Set DDR pins to high impedance when in suspend to RAM.
    
    In order to save power the DDR pins should be put into high
    impedance when in suspend to RAM.
    
    This requires manually requesting self refresh (rather than using the
    automatic mode implemented by the CCM / ESDCTL), followed by
    reconfiguring the IOMUXC.
    
    Of course the code to do this cannot itself run from DDR so the
    code is copied to and executed from internal memory.
    
    In my tests using a custom i.MX53 board with LPDDR2 RAM
    this reduced the suspend power consumption from 200mW to 60mW.
    
    Signed-off-by: Martin Fuzzey <mfuzzey@parkeon.com>
    Signed-off-by: Shawn Guo <shawn.guo@linaro.org>

diff --git a/arch/arm/mach-imx/common.h b/arch/arm/mach-imx/common.h
index 1f800b9a63f5..21e4e8697a58 100644
--- a/arch/arm/mach-imx/common.h
+++ b/arch/arm/mach-imx/common.h
@@ -116,9 +116,13 @@ int imx_cpu_kill(unsigned int cpu);
 
 #ifdef CONFIG_SUSPEND
 void v7_cpu_resume(void);
+void imx53_suspend(void __iomem *ocram_vbase);
+extern const u32 imx53_suspend_sz;
 void imx6_suspend(void __iomem *ocram_vbase);
 #else
 static inline void v7_cpu_resume(void) {}
+static inline void imx53_suspend(void __iomem *ocram_vbase) {}
+static const u32 imx53_suspend_sz;
 static inline void imx6_suspend(void __iomem *ocram_vbase) {}
 #endif
 

commit d0185d96c6c61871f090fe51116b6d81b3dd74b9
Author: Shenwei Wang <shenwei.wang@freescale.com>
Date:   Wed Apr 29 16:18:37 2015 -0500

    ARM: imx: Remove the duplicated function declaration
    
    Removed the duplicated function declaration of mxc_timer_init
    which was already declared in drivers/clk/imx/clk.h.
    
    Signed-off-by: Shenwei Wang <shenwei.wang@freescale.com>
    Signed-off-by: Shawn Guo <shawn.guo@linaro.org>

diff --git a/arch/arm/mach-imx/common.h b/arch/arm/mach-imx/common.h
index fbd86f1b7f3b..1f800b9a63f5 100644
--- a/arch/arm/mach-imx/common.h
+++ b/arch/arm/mach-imx/common.h
@@ -44,7 +44,6 @@ void imx27_soc_init(void);
 void imx31_soc_init(void);
 void imx35_soc_init(void);
 void epit_timer_init(void __iomem *base, int irq);
-void mxc_timer_init(unsigned long, int);
 int mx1_clocks_init(unsigned long fref);
 int mx21_clocks_init(unsigned long lref, unsigned long fref);
 int mx27_clocks_init(unsigned long fref);

commit 35e2916f70e3be767c5c8ef6cc80bc5398b8914c
Author: Shawn Guo <shawn.guo@linaro.org>
Date:   Wed Apr 29 13:07:03 2015 +0800

    ARM: imx6: initialize CCM_CLPCR_LPM into RUN mode earlier
    
    Commit 4631960d26da ("ARM: imx6: set initial power mode in pm function")
    moves imx6_set_lpm() from clock init function into
    imx6_pm_common_init().  This causes a hang when cpuidle support is
    enabled.  The reason for that is ARM core clock is shut down
    unexpectedly by WAIT mode.  It happens with the following call stack:
    
        cpuidle_register_governor()
            cpuidle_switch_governor()
                cpuidle_uninstall_idle_handler()
                    synchronize_sched()
                        wait_rcu_gp()
                            wait_for_completion()
    
    When wait_for_completion() is called as above, all cores are idle/WFI.
    Hence, the reset value of CCM_CLPCR_LPM - WAIT mode, will trigger a
    hardware shutdown of the ARM core clock.
    
    To fix the regression, we need to ensure that CCM_CLPCR_LPM is
    initialized into RUN mode earlier than cpuidle governor registration,
    which is a postcore_initcall.  This patch creates function
    imx6_pm_ccm_init() to map CCM block and initialize CCM_CLPCR_LPM into
    RUN mode, and have the function called from machine .init_irq hook,
    which should be early enough.
    
    Reported-by: Kevin Hilman <khilman@kernel.org>
    Fixes: 8fb76a07e2cb ("ARM: imx6: set initial power mode in pm function")
    Tested-by: Kevin Hilman <khilman@linaro.org>
    Tested-by: Tyler Baker <tyler.baker@linaro.org>
    Signed-off-by: Shawn Guo <shawn.guo@linaro.org>

diff --git a/arch/arm/mach-imx/common.h b/arch/arm/mach-imx/common.h
index d1e2873f807e..fbd86f1b7f3b 100644
--- a/arch/arm/mach-imx/common.h
+++ b/arch/arm/mach-imx/common.h
@@ -123,6 +123,7 @@ static inline void v7_cpu_resume(void) {}
 static inline void imx6_suspend(void __iomem *ocram_vbase) {}
 #endif
 
+void imx6_pm_ccm_init(const char *ccm_compat);
 void imx6q_pm_init(void);
 void imx6dl_pm_init(void);
 void imx6sl_pm_init(void);

commit f0b478b5d42ee9d925b45c22cbdc1ad4c90c3cf1
Author: Shawn Guo <shawn.guo@linaro.org>
Date:   Sat Apr 25 23:37:12 2015 +0800

    ARM: imx6: let pm code map CCM block on its own
    
    We are about to move imx6 clock driver into drivers/clk, so let's get
    imx6 pm code map CCM block on its own rather than relying on clock
    driver to do the mapping.
    
    Signed-off-by: Shawn Guo <shawn.guo@linaro.org>

diff --git a/arch/arm/mach-imx/common.h b/arch/arm/mach-imx/common.h
index d7f3b7b1d911..d1e2873f807e 100644
--- a/arch/arm/mach-imx/common.h
+++ b/arch/arm/mach-imx/common.h
@@ -127,7 +127,6 @@ void imx6q_pm_init(void);
 void imx6dl_pm_init(void);
 void imx6sl_pm_init(void);
 void imx6sx_pm_init(void);
-void imx6q_pm_set_ccm_base(void __iomem *base);
 
 #ifdef CONFIG_PM
 void imx51_pm_init(void);

commit 8fb76a07e2cb08b9f278a6415af4f784bb635a6e
Author: Shawn Guo <shawn.guo@linaro.org>
Date:   Sat Apr 25 22:59:19 2015 +0800

    ARM: imx6: set initial power mode in pm function
    
    Rather than setting initial low-power mode in every single i.MX6 clock
    initialization function, we should really do that in pm code.  Let's
    move imx6q_set_lpm(WAIT_CLOCKED) call into imx6_pm_common_init().
    
    While at it, let's rename the function to imx6_set_lpm() since it's
    actually common for all i.MX6 SoCs.
    
    Signed-off-by: Shawn Guo <shawn.guo@linaro.org>

diff --git a/arch/arm/mach-imx/common.h b/arch/arm/mach-imx/common.h
index fe510fbd0c8c..d7f3b7b1d911 100644
--- a/arch/arm/mach-imx/common.h
+++ b/arch/arm/mach-imx/common.h
@@ -107,7 +107,7 @@ void imx_gpc_hwirq_unmask(unsigned int hwirq);
 void imx_anatop_init(void);
 void imx_anatop_pre_suspend(void);
 void imx_anatop_post_resume(void);
-int imx6q_set_lpm(enum mxc_cpu_pwr_mode mode);
+int imx6_set_lpm(enum mxc_cpu_pwr_mode mode);
 void imx6q_set_int_mem_clk_lpm(bool enable);
 void imx6sl_set_wait_clk(bool enter);
 int imx_mmdc_get_ddr_type(void);

commit f3a9249d096178d29bba69cece29da99a622ce28
Author: Shawn Guo <shawn.guo@linaro.org>
Date:   Sat Apr 25 22:38:19 2015 +0800

    ARM: imx5: let pm code map CCM block on its own
    
    We are about to move imx5 clock driver into drivers/clk, so let's get
    imx5 pm code map CCM block on its own rather than relying on clock
    driver to do the mapping.
    
    Signed-off-by: Shawn Guo <shawn.guo@linaro.org>

diff --git a/arch/arm/mach-imx/common.h b/arch/arm/mach-imx/common.h
index 3682d094a259..fe510fbd0c8c 100644
--- a/arch/arm/mach-imx/common.h
+++ b/arch/arm/mach-imx/common.h
@@ -132,11 +132,9 @@ void imx6q_pm_set_ccm_base(void __iomem *base);
 #ifdef CONFIG_PM
 void imx51_pm_init(void);
 void imx53_pm_init(void);
-void imx5_pm_set_ccm_base(void __iomem *base);
 #else
 static inline void imx51_pm_init(void) {}
 static inline void imx53_pm_init(void) {}
-static inline void imx5_pm_set_ccm_base(void __iomem *base) {}
 #endif
 
 #ifdef CONFIG_NEON

commit 9bbef18750b34fa1d476e46a7833867b49f856c4
Author: Shawn Guo <shawn.guo@linaro.org>
Date:   Sat Apr 25 21:03:15 2015 +0800

    ARM: imx: move revision definitions and declarations into a header
    
    The revision definitions and declarations are widely used by clock
    drivers.  As a step of moving clock drivers out of arch/arm/mach-imx,
    let's create header include/soc/imx/revision.h to accommodate them.
    
    Signed-off-by: Shawn Guo <shawn.guo@linaro.org>

diff --git a/arch/arm/mach-imx/common.h b/arch/arm/mach-imx/common.h
index 5cddd1534265..3682d094a259 100644
--- a/arch/arm/mach-imx/common.h
+++ b/arch/arm/mach-imx/common.h
@@ -56,13 +56,10 @@ struct platform_device *mxc_register_gpio(char *name, int id,
 void mxc_set_cpu_type(unsigned int type);
 void mxc_restart(enum reboot_mode, const char *);
 void mxc_arch_reset_init(void __iomem *);
-int mx51_revision(void);
-int mx53_revision(void);
 void imx_set_aips(void __iomem *);
 void imx_aips_allow_unprivileged_access(const char *compat);
 int mxc_device_init(void);
 void imx_set_soc_revision(unsigned int rev);
-unsigned int imx_get_soc_revision(void);
 void imx_init_revision_from_anatop(void);
 struct device *imx_soc_device_init(void);
 void imx6_enable_rbc(bool enable);
@@ -87,7 +84,6 @@ enum mx3_cpu_pwr_mode {
 };
 
 void mx3_cpu_lp_set(enum mx3_cpu_pwr_mode mode);
-void imx_print_silicon_rev(const char *cpu, int srev);
 
 void imx_enable_cpu(int cpu, bool enable);
 void imx_set_cpu_jump(int cpu, void *jump_addr);

commit 6c529c499fecfe65da6429917bd9cb319040c69e
Author: Shawn Guo <shawn.guo@linaro.org>
Date:   Sat Apr 25 15:44:10 2015 +0800

    ARM: imx: use dynamic mapping for timer
    
    Pass physical address of timer block to mxc_timer_init() call, which in
    turn does dynamic mapping within the function.  Thus, we can avoid using
    static mapping in clock drivers.
    
    Signed-off-by: Shawn Guo <shawn.guo@linaro.org>

diff --git a/arch/arm/mach-imx/common.h b/arch/arm/mach-imx/common.h
index 0f04e30b726d..5cddd1534265 100644
--- a/arch/arm/mach-imx/common.h
+++ b/arch/arm/mach-imx/common.h
@@ -44,7 +44,7 @@ void imx27_soc_init(void);
 void imx31_soc_init(void);
 void imx35_soc_init(void);
 void epit_timer_init(void __iomem *base, int irq);
-void mxc_timer_init(void __iomem *, int);
+void mxc_timer_init(unsigned long, int);
 int mx1_clocks_init(unsigned long fref);
 int mx21_clocks_init(unsigned long lref, unsigned long fref);
 int mx27_clocks_init(unsigned long fref);

commit 14517564795a5cd22e2da3119037f9883383fae9
Author: Marc Zyngier <marc.zyngier@arm.com>
Date:   Fri Mar 13 16:05:37 2015 +0000

    ARM: imx6: Warn when an old DT is detected
    
    Now that the GPC has been converted to be a full blown irqchip
    (and not a mole on the side of the GIC), booting a new kernel
    with an old DT is likely to result in a rough ride for the user.
    
    This patch makes sure such a situation is promptly detected and
    the user made aware that a DT update is in order.
    
    Signed-off-by: Marc Zyngier <marc.zyngier@arm.com>
    Acked-by: Jason Cooper <jason@lakedaemon.net>
    Signed-off-by: Shawn Guo <shawn.guo@linaro.org>

diff --git a/arch/arm/mach-imx/common.h b/arch/arm/mach-imx/common.h
index 2fbdc283bc99..0f04e30b726d 100644
--- a/arch/arm/mach-imx/common.h
+++ b/arch/arm/mach-imx/common.h
@@ -66,6 +66,7 @@ unsigned int imx_get_soc_revision(void);
 void imx_init_revision_from_anatop(void);
 struct device *imx_soc_device_init(void);
 void imx6_enable_rbc(bool enable);
+void imx_gpc_check_dt(void);
 void imx_gpc_set_arm_power_in_lpm(bool power_off);
 void imx_gpc_set_arm_power_up_timing(u32 sw2iso, u32 sw);
 void imx_gpc_set_arm_power_down_timing(u32 sw2iso, u32 sw);

commit b923ff6af0d5a806a3996dac6d4393cd9792d0f4
Author: Marc Zyngier <marc.zyngier@arm.com>
Date:   Mon Feb 23 17:45:18 2015 +0000

    ARM: imx6: convert GPC to stacked domains
    
    IMX6 has been (ab)using the gic_arch_extn to provide
    wakeup from suspend, and it makes a lot of sense to convert
    this code to use stacked domains instead.
    
    This patch does just this, updating the DT files to actually
    reflect what the HW provides.
    
    BIG FAT WARNING: because the DTs were so far lying by not
    exposing the fact that the GPC block is actually the first
    interrupt controller in the chain, kernels with this patch
    applied wont have any suspend-resume facility when booted
    with old DTs, and old kernels with updated DTs won't even boot.
    
    Tested-by: Stefan Agner <stefan@agner.ch>
    Acked-by: Stefan Agner <stefan@agner.ch>
    Signed-off-by: Marc Zyngier <marc.zyngier@arm.com>
    Signed-off-by: Shawn Guo <shawn.guo@linaro.org>

diff --git a/arch/arm/mach-imx/common.h b/arch/arm/mach-imx/common.h
index 771ecfe96c14..2fbdc283bc99 100644
--- a/arch/arm/mach-imx/common.h
+++ b/arch/arm/mach-imx/common.h
@@ -101,7 +101,6 @@ static inline void imx_scu_map_io(void) {}
 static inline void imx_smp_prepare(void) {}
 #endif
 void imx_src_init(void);
-void imx_gpc_init(void);
 void imx_gpc_pre_suspend(bool arm_power_off);
 void imx_gpc_post_resume(void);
 void imx_gpc_mask_all(void);

commit 6869a22fcf10ba9e32ad9a6301ee3fe326625fd6
Author: Fabio Estevam <fabio.estevam@freescale.com>
Date:   Fri Mar 13 10:31:55 2015 -0300

    ARM: mx25: Remove static memory mapping
    
    We use dynamic memory mapping when using dt, so remove all the static mappings.
    
    Signed-off-by: Fabio Estevam <fabio.estevam@freescale.com>
    Signed-off-by: Shawn Guo <shawn.guo@linaro.org>

diff --git a/arch/arm/mach-imx/common.h b/arch/arm/mach-imx/common.h
index a12b52d3152f..771ecfe96c14 100644
--- a/arch/arm/mach-imx/common.h
+++ b/arch/arm/mach-imx/common.h
@@ -23,13 +23,11 @@ struct of_device_id;
 
 void mx1_map_io(void);
 void mx21_map_io(void);
-void mx25_map_io(void);
 void mx27_map_io(void);
 void mx31_map_io(void);
 void mx35_map_io(void);
 void imx1_init_early(void);
 void imx21_init_early(void);
-void imx25_init_early(void);
 void imx27_init_early(void);
 void imx31_init_early(void);
 void imx35_init_early(void);
@@ -37,13 +35,11 @@ void mxc_init_irq(void __iomem *);
 void tzic_init_irq(void);
 void mx1_init_irq(void);
 void mx21_init_irq(void);
-void mx25_init_irq(void);
 void mx27_init_irq(void);
 void mx31_init_irq(void);
 void mx35_init_irq(void);
 void imx1_soc_init(void);
 void imx21_soc_init(void);
-void imx25_soc_init(void);
 void imx27_soc_init(void);
 void imx31_soc_init(void);
 void imx35_soc_init(void);

commit d8a3beea003b4c162e5713a1a86596e9296da1d7
Author: Fabio Estevam <fabio.estevam@freescale.com>
Date:   Fri Mar 13 10:31:53 2015 -0300

    ARM: mx25: Remove mx25_clocks_init()
    
    mx25_clocks_init() is only used to register the clocks for non-dt platforms.
    
    As mx25 has been converted to a dt-only platform, we can safely remove it.
    
    Signed-off-by: Fabio Estevam <fabio.estevam@freescale.com>
    Signed-off-by: Shawn Guo <shawn.guo@linaro.org>

diff --git a/arch/arm/mach-imx/common.h b/arch/arm/mach-imx/common.h
index 1028b6c505c4..a12b52d3152f 100644
--- a/arch/arm/mach-imx/common.h
+++ b/arch/arm/mach-imx/common.h
@@ -51,7 +51,6 @@ void epit_timer_init(void __iomem *base, int irq);
 void mxc_timer_init(void __iomem *, int);
 int mx1_clocks_init(unsigned long fref);
 int mx21_clocks_init(unsigned long lref, unsigned long fref);
-int mx25_clocks_init(void);
 int mx27_clocks_init(unsigned long fref);
 int mx31_clocks_init(unsigned long fref);
 int mx35_clocks_init(void);

commit 05136f0897b526b9cd090c93b95bbd1b67c18cc5
Author: Anson Huang <b20788@freescale.com>
Date:   Wed Dec 17 12:24:12 2014 +0800

    ARM: imx: support arm power off in cpuidle for i.mx6sx
    
    This patch introduces an independent cpuidle driver for
    i.MX6SX, and supports arm power off in idle, totally
    3 levels of cpuidle are supported as below:
    
    1. ARM WFI;
    2. SOC in WAIT mode;
    3. SOC in WAIT mode + ARM power off.
    
    ARM power off can save at least 5mW power.
    
    This patch also replaces imx6q_enable_rbc with imx6_enable_rbc.
    
    Signed-off-by: Anson Huang <b20788@freescale.com>
    Signed-off-by: Shawn Guo <shawn.guo@linaro.org>

diff --git a/arch/arm/mach-imx/common.h b/arch/arm/mach-imx/common.h
index cfcdb623d78f..1028b6c505c4 100644
--- a/arch/arm/mach-imx/common.h
+++ b/arch/arm/mach-imx/common.h
@@ -70,6 +70,10 @@ void imx_set_soc_revision(unsigned int rev);
 unsigned int imx_get_soc_revision(void);
 void imx_init_revision_from_anatop(void);
 struct device *imx_soc_device_init(void);
+void imx6_enable_rbc(bool enable);
+void imx_gpc_set_arm_power_in_lpm(bool power_off);
+void imx_gpc_set_arm_power_up_timing(u32 sw2iso, u32 sw);
+void imx_gpc_set_arm_power_down_timing(u32 sw2iso, u32 sw);
 
 enum mxc_cpu_pwr_mode {
 	WAIT_CLOCKED,		/* wfi only */

commit 6cd94d5e57ab97ddd672b707ab4bb639672c1727
Merge: 6c9e92476bc9 842f7d2c4d39
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Tue Dec 9 14:38:28 2014 -0800

    Merge tag 'soc-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/arm/arm-soc
    
    Pull ARM SoC platform changes from Arnd Bergmann:
     "New and updated SoC support, notable changes include:
    
       - bcm:
            brcmstb SMP support
            initial iproc/cygnus support
       - exynos:
            Exynos4415 SoC support
            PMU and suspend support for Exynos5420
            PMU support for Exynos3250
            pm related maintenance
       - imx:
            new LS1021A SoC support
            vybrid 610 global timer support
       - integrator:
            convert to using multiplatform configuration
       - mediatek:
            earlyprintk support for mt8127/mt8135
       - meson:
            meson8 soc and l2 cache controller support
       - mvebu:
            Armada 38x CPU hotplug support
            drop support for prerelease Armada 375 Z1 stepping
            extended suspend support, now works on Armada 370/XP
       - omap:
            hwmod related maintenance
            prcm cleanup
       - pxa:
            initial pxa27x DT handling
       - rockchip:
            SMP support for rk3288
            add cpu frequency scaling support
       - shmobile:
            r8a7740 power domain support
            various small restart, timer, pci apmu changes
       - sunxi:
            Allwinner A80 (sun9i) earlyprintk support
       - ux500:
            power domain support
    
      Overall, a significant chunk of changes, coming mostly from the usual
      suspects: omap, shmobile, samsung and mvebu, all of which already
      contain a lot of platform specific code in arch/arm"
    
    * tag 'soc-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/arm/arm-soc: (187 commits)
      ARM: mvebu: use the cpufreq-dt platform_data for independent clocks
      soc: integrator: Add terminating entry for integrator_cm_match
      ARM: mvebu: add SDRAM controller description for Armada XP
      ARM: mvebu: adjust mbus controller description on Armada 370/XP
      ARM: mvebu: add suspend/resume DT information for Armada XP GP
      ARM: mvebu: synchronize secondary CPU clocks on resume
      ARM: mvebu: make sure MMU is disabled in armada_370_xp_cpu_resume
      ARM: mvebu: Armada XP GP specific suspend/resume code
      ARM: mvebu: reserve the first 10 KB of each memory bank for suspend/resume
      ARM: mvebu: implement suspend/resume support for Armada XP
      clk: mvebu: add suspend/resume for gatable clocks
      bus: mvebu-mbus: provide a mechanism to save SDRAM window configuration
      bus: mvebu-mbus: suspend/resume support
      clocksource: time-armada-370-xp: add suspend/resume support
      irqchip: armada-370-xp: Add suspend/resume support
      ARM: add lolevel debug support for asm9260
      ARM: add mach-asm9260
      ARM: EXYNOS: use u8 for val[] in struct exynos_pmu_conf
      power: reset: imx-snvs-poweroff: add power off driver for i.mx6
      ARM: imx: temporarily remove CONFIG_SOC_FSL from LS1021A
      ...

commit 6c9e92476bc924ede6d6d2f0bfed2c06ae148d29
Merge: 0563fdc0d9fb ef1dfa7332e9
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Tue Dec 9 14:18:35 2014 -0800

    Merge tag 'cleanup-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/arm/arm-soc
    
    Pull ARM SoC cleanups from Arnd Bergmann:
     "The remaining cleanups for 3.19 are to a large part result of
      devicetree conversion nearing completion on two other platforms
      besides AT91:
    
       - Like AT91, Renesas shmobile is in the process to migrate to DT and
         multiplatform, but using a different approach of doing it one SoC
         at a time.  For 3.19, the r8a7791 platform and associated "Koelsch"
         board are considered complete and we remove the non-DT
         non-multiplatform support for this.
    
       - The ARM Versatile Express has supported DT and multiplatform for a
         long time, but we have still kept the legacy board files around,
         because not all drivers were fully working before.  We have finally
         taken the last step to remove the board files.
    
      Other changes in this branch are preparation for the later branches or
      just unrelated to the more interesting changes:
    
       - The dts files for arm64 get moved into per-vendor directories for a
         clearer structure.
    
       - Some dead code removal (zynq, exynos, davinci, imx)
    
       - Using pr_*() macros more consistently instead of printk(KERN_*) in
         some platform code"
    
    * tag 'cleanup-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/arm/arm-soc: (71 commits)
      ARM: zynq: Remove secondary_startup() declaration from header
      ARM: vexpress: Enable regulator framework when MMCI is in use
      ARM: vexpress: Remove non-DT code
      ARM: imx: Remove unneeded .map_io initialization
      ARM: dts: imx6qdl-sabresd: Fix the microphone route
      ARM: imx: refactor mxc_iomux_mode()
      ARM: imx: simplify clk_pllv3_prepare()
      ARM: imx6q: drop unnecessary semicolon
      ARM: imx: clean up machine mxc_arch_reset_init_dt reset init
      ARM: dts: imx6qdl-rex: Remove unneeded 'fsl,mode' property
      ARM: dts: imx6qdl-gw5x: Remove unneeded 'fsl,mode' property
      ARM: dts: imx6qdl-sabresd: Use IMX6QDL_CLK_CKO define
      ARM: at91: remove useless init_time for DT-only SoCs
      ARM: davinci: Remove redundant casts
      ARM: davinci: Use standard logging styles
      ARM: shmobile: r8a7779: Spelling/grammar s/entity/identity/, s/map/mapping/
      ARM: shmobile: sh7372: Spelling/grammar s/entity map/identity mapping/
      ARM: shmobile: sh73a0: Spelling/grammar s/entity map/identity mapping/
      ARM: EXYNOS: Remove unused static iomapping
      ARM: at91: fix build breakage due to legacy board removals
      ...

commit 65bb688aab9424849e94f74d555542fa76cd3d5a
Author: Marc Zyngier <marc.zyngier@arm.com>
Date:   Tue Dec 2 16:05:26 2014 +0000

    ARM: imx6: fix bogus use of irq_get_irq_data
    
    The imx6 PM code seems to be quite creative in its use of irq_data,
    using something that is very much a hardware interrupt number where
    we expect a virtual one.  Yes, it worked so far, but that's only
    luck, and it will definitely explode in 3.19.
    
    Fix it by using a pair of helper functions that deal with the
    actual hardware.
    
    Tested-by: Fabio Estevam <fabio.estevam@freescale.com>
    Acked-by: Philipp Zabel <p.zabel@pengutronix.de>
    Acked-by: Shawn Guo <shawn.guo@linaro.org>
    Signed-off-by: Marc Zyngier <marc.zyngier@arm.com>
    Signed-off-by: Olof Johansson <olof@lixom.net>

diff --git a/arch/arm/mach-imx/common.h b/arch/arm/mach-imx/common.h
index 1dabf435c592..66662a1e36de 100644
--- a/arch/arm/mach-imx/common.h
+++ b/arch/arm/mach-imx/common.h
@@ -108,8 +108,8 @@ void imx_gpc_pre_suspend(bool arm_power_off);
 void imx_gpc_post_resume(void);
 void imx_gpc_mask_all(void);
 void imx_gpc_restore_all(void);
-void imx_gpc_irq_mask(struct irq_data *d);
-void imx_gpc_irq_unmask(struct irq_data *d);
+void imx_gpc_hwirq_mask(unsigned int hwirq);
+void imx_gpc_hwirq_unmask(unsigned int hwirq);
 void imx_anatop_init(void);
 void imx_anatop_pre_suspend(void);
 void imx_anatop_post_resume(void);

commit 4e3fea4a950e3ec22ec8f99a7438aa5ba584263a
Author: Jingchang Lu <b35083@freescale.com>
Date:   Fri Oct 31 17:01:13 2014 +0800

    ARM: imx: Add Freescale LS1021A SMP support
    
    Freescale LS1021A SoCs deploy two cortex-A7 processors,
    this adds bring-up support for the secondary core.
    
    Signed-off-by: Jingchang Lu <b35083@freescale.com>
    Signed-off-by: Shawn Guo <shawn.guo@linaro.org>

diff --git a/arch/arm/mach-imx/common.h b/arch/arm/mach-imx/common.h
index 23c84e67a56d..fe9a908da3ed 100644
--- a/arch/arm/mach-imx/common.h
+++ b/arch/arm/mach-imx/common.h
@@ -158,5 +158,6 @@ static inline void imx_init_l2cache(void) {}
 #endif
 
 extern struct smp_operations imx_smp_ops;
+extern struct smp_operations ls1021a_smp_ops;
 
 #endif

commit ec336b284136610a43c9daac56d66b20d43ddf7b
Author: Anson Huang <b20788@freescale.com>
Date:   Wed Sep 17 11:11:45 2014 +0800

    ARM: imx: replace cpu type check with ddr type check
    
    As the DDR/IO and MMDC setting are different on LPDDR2 and DDR3,
    we used cpu type to decide how to do these settings in suspend
    before which is NOT flexible, take i.MX6SL for example, although
    it has LPDDR2 on EVK board, but users can also use DDR3 on other
    boards, so it is better to read the DDR type from MMDC then decide
    how to do related settings.
    
    Signed-off-by: Anson Huang <b20788@freescale.com>
    Signed-off-by: Shawn Guo <shawn.guo@freescale.com>

diff --git a/arch/arm/mach-imx/common.h b/arch/arm/mach-imx/common.h
index 1dabf435c592..23c84e67a56d 100644
--- a/arch/arm/mach-imx/common.h
+++ b/arch/arm/mach-imx/common.h
@@ -116,6 +116,7 @@ void imx_anatop_post_resume(void);
 int imx6q_set_lpm(enum mxc_cpu_pwr_mode mode);
 void imx6q_set_int_mem_clk_lpm(bool enable);
 void imx6sl_set_wait_clk(bool enter);
+int imx_mmdc_get_ddr_type(void);
 
 void imx_cpu_die(unsigned int cpu);
 int imx_cpu_kill(unsigned int cpu);

commit 08ae9646468c636098f689a72194778b15c9d94a
Author: Jingchang Lu <jingchang.lu@freescale.com>
Date:   Fri Oct 31 17:39:53 2014 +0800

    ARM: imx: clean up machine mxc_arch_reset_init_dt reset init
    
    System restart mechanism has been changed with the introduction
    of "kernel restart handler call chain support". The imx2 watchdog
    based restart handler has been moved to the driver, and these
    restart can be removed from the machine layer.
    
    This patch cleans up the device tree version machine reset init with
    mxc_arch_reset_init_dt and removes corresponding .restart handler,
    for the .init_machine that can be handled by system default after
    removing the mxc_arch_reset_init_dt, the .init_machine is also removed.
    
    Signed-off-by: Jingchang Lu <jingchang.lu@freescale.com>
    Signed-off-by: Shawn Guo <shawn.guo@linaro.org>

diff --git a/arch/arm/mach-imx/common.h b/arch/arm/mach-imx/common.h
index 1dabf435c592..a6147f9fce7f 100644
--- a/arch/arm/mach-imx/common.h
+++ b/arch/arm/mach-imx/common.h
@@ -61,7 +61,6 @@ struct platform_device *mxc_register_gpio(char *name, int id,
 void mxc_set_cpu_type(unsigned int type);
 void mxc_restart(enum reboot_mode, const char *);
 void mxc_arch_reset_init(void __iomem *);
-void mxc_arch_reset_init_dt(void);
 int mx51_revision(void);
 int mx53_revision(void);
 void imx_set_aips(void __iomem *);

commit ee295d7ff442699bb7982f2283f71eabcc16f367
Author: Shawn Guo <shawn.guo@freescale.com>
Date:   Mon Sep 1 08:57:20 2014 +0800

    ARM: imx: remove imx_scu_standby_enable()
    
    With commit c716483c3db1 ("ARM: 8122/1: smp_scu: enable SCU standby
    support"), the STANDBY bit of SCU is handled by core function
    scu_enable().  So imx_scu_standby_enable() can be removed now.
    
    Signed-off-by: Shawn Guo <shawn.guo@freescale.com>

diff --git a/arch/arm/mach-imx/common.h b/arch/arm/mach-imx/common.h
index 22ba8973bcb9..1dabf435c592 100644
--- a/arch/arm/mach-imx/common.h
+++ b/arch/arm/mach-imx/common.h
@@ -98,11 +98,9 @@ void imx_set_cpu_arg(int cpu, u32 arg);
 void v7_secondary_startup(void);
 void imx_scu_map_io(void);
 void imx_smp_prepare(void);
-void imx_scu_standby_enable(void);
 #else
 static inline void imx_scu_map_io(void) {}
 static inline void imx_smp_prepare(void) {}
-static inline void imx_scu_standby_enable(void) {}
 #endif
 void imx_src_init(void);
 void imx_gpc_init(void);

commit fd4959d8779a8e7099c6ecf4f7c854dbf34890e9
Author: Alexander Shiyan <shc_work@mail.ru>
Date:   Sun Jul 13 09:34:00 2014 +0400

    ARM: i.MX: Use CLOCKSOURCE_OF_DECLARE() for DT targets
    
    This patch uses clocksource_of_init() call for DT targets.
    
    Signed-off-by: Alexander Shiyan <shc_work@mail.ru>
    Signed-off-by: Shawn Guo <shawn.guo@freescale.com>

diff --git a/arch/arm/mach-imx/common.h b/arch/arm/mach-imx/common.h
index f7189bc461ad..22ba8973bcb9 100644
--- a/arch/arm/mach-imx/common.h
+++ b/arch/arm/mach-imx/common.h
@@ -49,7 +49,6 @@ void imx31_soc_init(void);
 void imx35_soc_init(void);
 void epit_timer_init(void __iomem *base, int irq);
 void mxc_timer_init(void __iomem *, int);
-void mxc_timer_init_dt(struct device_node *);
 int mx1_clocks_init(unsigned long fref);
 int mx21_clocks_init(unsigned long lref, unsigned long fref);
 int mx25_clocks_init(void);

commit e57e4ab5fc2e4e58447d13493c3e567b61359523
Author: Steffen Trumtrar <s.trumtrar@pengutronix.de>
Date:   Mon Jul 7 11:41:26 2014 +0200

    ARM: i.MX: allow disabling supervisor protect via DT
    
    The i.MX SoCs allow to setup fine grained access rights to peripherals on the
    AIPS bus.
    This is done via the Peripheral Access Register (PAR) in e.g. the i.MX21
    or in later SoC versions the Off-Platform Peripheral Access Control Register
    (OPACR), e.g. i.MX53.
    Under certain circumstances this leads to problems in which bus masters are
    not granted their access rights to peripherals.
    To be able to disable these restrictions on DT platforms, add a helper function
    that looks for AIPS nodes in the DT and disables them for every compatible node
    it finds.
    The compatible has to be declared in the mach-specific entry file, where this
    helper function should then be called.
    
    Signed-off-by: Steffen Trumtrar <s.trumtrar@pengutronix.de>
    Signed-off-by: Shawn Guo <shawn.guo@freescale.com>

diff --git a/arch/arm/mach-imx/common.h b/arch/arm/mach-imx/common.h
index e0632d1890ac..f7189bc461ad 100644
--- a/arch/arm/mach-imx/common.h
+++ b/arch/arm/mach-imx/common.h
@@ -19,6 +19,7 @@ struct pt_regs;
 struct clk;
 struct device_node;
 enum mxc_cpu_pwr_mode;
+struct of_device_id;
 
 void mx1_map_io(void);
 void mx21_map_io(void);
@@ -65,6 +66,7 @@ void mxc_arch_reset_init_dt(void);
 int mx51_revision(void);
 int mx53_revision(void);
 void imx_set_aips(void __iomem *);
+void imx_aips_allow_unprivileged_access(const char *compat);
 int mxc_device_init(void);
 void imx_set_soc_revision(unsigned int rev);
 unsigned int imx_get_soc_revision(void);

commit e9db15e3221f2efef205dc1df584a3ca21b58dfa
Author: Denis Carikli <denis@eukrea.com>
Date:   Wed Jun 25 14:41:36 2014 +0200

    ARM: i.MX25 clk: Use of_clk_init() for DT case
    
    Replace .init_time() hook with of_clk_init() for DT targets.
    
    Based on:
      d4347ee ARM: i.MX27 clk: Use of_clk_init() for DT case
    
    Signed-off-by: Denis Carikli <denis@eukrea.com>
    Acked-by: Sascha Hauer <s.hauer@pengutronix.de>
    Signed-off-by: Shawn Guo <shawn.guo@freescale.com>

diff --git a/arch/arm/mach-imx/common.h b/arch/arm/mach-imx/common.h
index d205f362cf29..e0632d1890ac 100644
--- a/arch/arm/mach-imx/common.h
+++ b/arch/arm/mach-imx/common.h
@@ -55,7 +55,6 @@ int mx25_clocks_init(void);
 int mx27_clocks_init(unsigned long fref);
 int mx31_clocks_init(unsigned long fref);
 int mx35_clocks_init(void);
-int mx25_clocks_init_dt(void);
 int mx31_clocks_init_dt(void);
 struct platform_device *mxc_register_gpio(char *name, int id,
 	resource_size_t iobase, resource_size_t iosize, int irq, int irq_high);

commit 80c0ecdce802bd642dc7127cc77cea04e0a71bf5
Author: Anson Huang <b20788@freescale.com>
Date:   Mon Jun 23 16:42:44 2014 +0800

    ARM: imx: add standby mode support for suspend
    
    Add standby mode support for suspend, to enter standby mode:
    
    echo standby > /sys/power/state;
    
    Use UART or RTC alarm to wake up system, when system enters
    standby mode, SOC will enter STOP mode with ARM core kept
    power on and 24M XTAL on.
    
    Signed-off-by: Anson Huang <b20788@freescale.com>
    Signed-off-by: Shawn Guo <shawn.guo@freescale.com>

diff --git a/arch/arm/mach-imx/common.h b/arch/arm/mach-imx/common.h
index 13a6e1f8e11e..d205f362cf29 100644
--- a/arch/arm/mach-imx/common.h
+++ b/arch/arm/mach-imx/common.h
@@ -106,7 +106,7 @@ static inline void imx_scu_standby_enable(void) {}
 #endif
 void imx_src_init(void);
 void imx_gpc_init(void);
-void imx_gpc_pre_suspend(void);
+void imx_gpc_pre_suspend(bool arm_power_off);
 void imx_gpc_post_resume(void);
 void imx_gpc_mask_all(void);
 void imx_gpc_restore_all(void);

commit dfea953ae221111c14d2fcfebad7b1973a0f49bd
Author: Anson Huang <b20788@freescale.com>
Date:   Mon Jun 23 16:42:43 2014 +0800

    ARM: imx: mem bit must be cleared before entering DSM mode
    
    According to hardware design, mem bit must be clear before
    entering DSM mode, as ARM core will be power gated in DSM mode.
    
    Signed-off-by: Anson Huang <b20788@freescale.com>
    Signed-off-by: Shawn Guo <shawn.guo@freescale.com>

diff --git a/arch/arm/mach-imx/common.h b/arch/arm/mach-imx/common.h
index 50ee9c23974c..13a6e1f8e11e 100644
--- a/arch/arm/mach-imx/common.h
+++ b/arch/arm/mach-imx/common.h
@@ -116,7 +116,7 @@ void imx_anatop_init(void);
 void imx_anatop_pre_suspend(void);
 void imx_anatop_post_resume(void);
 int imx6q_set_lpm(enum mxc_cpu_pwr_mode mode);
-void imx6q_set_int_mem_clk_lpm(void);
+void imx6q_set_int_mem_clk_lpm(bool enable);
 void imx6sl_set_wait_clk(bool enter);
 
 void imx_cpu_die(unsigned int cpu);

commit ff843d621bfc9a9b36c370bb523d3551f2e195dd
Author: Anson Huang <b20788@freescale.com>
Date:   Fri Jun 20 13:20:54 2014 +0800

    ARM: imx: add suspend support for i.mx6sx
    
    Add suspend support for i.MX6SX.
    
    To enter suspend, echo mem > /sys/power/state.
    To exit suspend, using RTC alarm or enable debug UART wakeup.
    
    Signed-off-by: Anson Huang <b20788@freescale.com>
    Signed-off-by: Shawn Guo <shawn.guo@freescale.com>

diff --git a/arch/arm/mach-imx/common.h b/arch/arm/mach-imx/common.h
index 7668ff53773f..50ee9c23974c 100644
--- a/arch/arm/mach-imx/common.h
+++ b/arch/arm/mach-imx/common.h
@@ -133,6 +133,7 @@ static inline void imx6_suspend(void __iomem *ocram_vbase) {}
 void imx6q_pm_init(void);
 void imx6dl_pm_init(void);
 void imx6sl_pm_init(void);
+void imx6sx_pm_init(void);
 void imx6q_pm_set_ccm_base(void __iomem *base);
 
 #ifdef CONFIG_PM

commit c349adde00e8aba6c05316ef8670836baff2d503
Author: Alexander Shiyan <shc_work@mail.ru>
Date:   Sat Jun 7 20:09:26 2014 +0400

    ARM: i.MX27 clk: Use of_clk_init() for DT case
    
    Replace .init_time() hook with of_clk_init() for DT targets.
    
    Signed-off-by: Alexander Shiyan <shc_work@mail.ru>
    Signed-off-by: Shawn Guo <shawn.guo@freescale.com>

diff --git a/arch/arm/mach-imx/common.h b/arch/arm/mach-imx/common.h
index 5aaea2bcf4f3..7668ff53773f 100644
--- a/arch/arm/mach-imx/common.h
+++ b/arch/arm/mach-imx/common.h
@@ -56,7 +56,6 @@ int mx27_clocks_init(unsigned long fref);
 int mx31_clocks_init(unsigned long fref);
 int mx35_clocks_init(void);
 int mx25_clocks_init_dt(void);
-int mx27_clocks_init_dt(void);
 int mx31_clocks_init_dt(void);
 struct platform_device *mxc_register_gpio(char *name, int id,
 	resource_size_t iobase, resource_size_t iosize, int irq, int irq_high);

commit 364b28a574c4d4cb673d99ff1c59e9f2ddbf57f9
Author: Shawn Guo <shawn.guo@freescale.com>
Date:   Tue May 20 15:09:42 2014 +0800

    ARM: imx5: clean function declarations in mx51.h
    
    The mx51_display_revision() is a dead declaration.  Remove it.  Also,
    move mx51_revision() into common.h.
    
    Signed-off-by: Shawn Guo <shawn.guo@freescale.com>

diff --git a/arch/arm/mach-imx/common.h b/arch/arm/mach-imx/common.h
index 53ee5692610c..5aaea2bcf4f3 100644
--- a/arch/arm/mach-imx/common.h
+++ b/arch/arm/mach-imx/common.h
@@ -64,6 +64,7 @@ void mxc_set_cpu_type(unsigned int type);
 void mxc_restart(enum reboot_mode, const char *);
 void mxc_arch_reset_init(void __iomem *);
 void mxc_arch_reset_init_dt(void);
+int mx51_revision(void);
 int mx53_revision(void);
 void imx_set_aips(void __iomem *);
 int mxc_device_init(void);

commit c745cae7027cf9eb96bdc2fd751bd03a196362e5
Author: Shawn Guo <shawn.guo@freescale.com>
Date:   Tue May 20 15:46:46 2014 +0800

    ARM: imx5: remove file mm-imx5.c
    
    The only code left in mm-imx5.c is to create static mapping.  While all
    IMX platform code are moved to use dynamic mapping, the file can just be
    removed now.
    
    Signed-off-by: Shawn Guo <shawn.guo@freescale.com>

diff --git a/arch/arm/mach-imx/common.h b/arch/arm/mach-imx/common.h
index b480f0bb66be..53ee5692610c 100644
--- a/arch/arm/mach-imx/common.h
+++ b/arch/arm/mach-imx/common.h
@@ -26,8 +26,6 @@ void mx25_map_io(void);
 void mx27_map_io(void);
 void mx31_map_io(void);
 void mx35_map_io(void);
-void mx51_map_io(void);
-void mx53_map_io(void);
 void imx1_init_early(void);
 void imx21_init_early(void);
 void imx25_init_early(void);

commit ff4ab2311a902e30cd579339a83679bab944e1bc
Author: Shawn Guo <shawn.guo@freescale.com>
Date:   Tue May 20 15:34:06 2014 +0800

    ARM: imx5: move init hooks into mach-imx5x.c
    
    These imx5 init_early[late] hooks are called only from mach-imx5x.c.
    Let's move them into mach-imx5x.c.
    
    While at it, replace the static mapping in imx51_ipu_mipi_setup() with
    dynamic mapping.  Also this function and imx_src_init() do not
    necessarily to be called at .init_early hook, so move them into
    .init_machine.
    
    The mxc_iomux_v3_init() is dropped from imx51_init_early() in the
    moving, since it's only needed by non-DT boot.
    
    Signed-off-by: Shawn Guo <shawn.guo@freescale.com>

diff --git a/arch/arm/mach-imx/common.h b/arch/arm/mach-imx/common.h
index 1156bf6cbeb5..b480f0bb66be 100644
--- a/arch/arm/mach-imx/common.h
+++ b/arch/arm/mach-imx/common.h
@@ -34,8 +34,6 @@ void imx25_init_early(void);
 void imx27_init_early(void);
 void imx31_init_early(void);
 void imx35_init_early(void);
-void imx51_init_early(void);
-void imx53_init_early(void);
 void mxc_init_irq(void __iomem *);
 void tzic_init_irq(void);
 void mx1_init_irq(void);
@@ -50,8 +48,6 @@ void imx25_soc_init(void);
 void imx27_soc_init(void);
 void imx31_soc_init(void);
 void imx35_soc_init(void);
-void imx51_init_late(void);
-void imx53_init_late(void);
 void epit_timer_init(void __iomem *base, int irq);
 void mxc_timer_init(void __iomem *, int);
 void mxc_timer_init_dt(struct device_node *);

commit 36b66c3fc20ad9a50ae7f19b3c807c68259753df
Author: Shawn Guo <shawn.guo@freescale.com>
Date:   Tue May 20 14:55:15 2014 +0800

    ARM: imx5: use dynamic mapping for Cortex and GPC block
    
    The imx5 pm code uses static mapping to access Cortex and GPC registers.
    The patch create struct imx5_pm_data to encode physical address of
    Cortex and GPC block, and create dynamic mapping for them at run-time.
    
    Signed-off-by: Shawn Guo <shawn.guo@freescale.com>

diff --git a/arch/arm/mach-imx/common.h b/arch/arm/mach-imx/common.h
index 8aa198c9b1d5..1156bf6cbeb5 100644
--- a/arch/arm/mach-imx/common.h
+++ b/arch/arm/mach-imx/common.h
@@ -142,10 +142,12 @@ void imx6sl_pm_init(void);
 void imx6q_pm_set_ccm_base(void __iomem *base);
 
 #ifdef CONFIG_PM
-void imx5_pm_init(void);
+void imx51_pm_init(void);
+void imx53_pm_init(void);
 void imx5_pm_set_ccm_base(void __iomem *base);
 #else
-static inline void imx5_pm_init(void) {}
+static inline void imx51_pm_init(void) {}
+static inline void imx53_pm_init(void) {}
 static inline void imx5_pm_set_ccm_base(void __iomem *base) {}
 #endif
 

commit 4ef5e3870113c5caab22d4363d882b372f2c6b57
Author: Shawn Guo <shawn.guo@freescale.com>
Date:   Tue May 20 13:41:36 2014 +0800

    ARM: imx5: reuse clock CCM mapping in pm code
    
    The imx5 pm code needs to access CCM registers.  Let's remove the use
    of CCM static mapping in pm code by reusing the dynamic mapping created
    in clock code.
    
    Signed-off-by: Shawn Guo <shawn.guo@freescale.com>

diff --git a/arch/arm/mach-imx/common.h b/arch/arm/mach-imx/common.h
index 1d6cf4d55f57..8aa198c9b1d5 100644
--- a/arch/arm/mach-imx/common.h
+++ b/arch/arm/mach-imx/common.h
@@ -143,8 +143,10 @@ void imx6q_pm_set_ccm_base(void __iomem *base);
 
 #ifdef CONFIG_PM
 void imx5_pm_init(void);
+void imx5_pm_set_ccm_base(void __iomem *base);
 #else
 static inline void imx5_pm_init(void) {}
+static inline void imx5_pm_set_ccm_base(void __iomem *base) {}
 #endif
 
 #ifdef CONFIG_NEON

commit c23f82a70c8ca89f5fae1a8f8e927cc257fb19f7
Author: Shawn Guo <shawn.guo@freescale.com>
Date:   Mon May 19 21:08:43 2014 +0800

    ARM: imx5: remove function imx51_soc_init()
    
    The function imx51_soc_init() was used by non-DT boot only.  Since
    i.MX51 supports DT only, the function can be removed now.
    
    Signed-off-by: Shawn Guo <shawn.guo@freescale.com>

diff --git a/arch/arm/mach-imx/common.h b/arch/arm/mach-imx/common.h
index 6d018c039896..1d6cf4d55f57 100644
--- a/arch/arm/mach-imx/common.h
+++ b/arch/arm/mach-imx/common.h
@@ -50,7 +50,6 @@ void imx25_soc_init(void);
 void imx27_soc_init(void);
 void imx31_soc_init(void);
 void imx35_soc_init(void);
-void imx51_soc_init(void);
 void imx51_init_late(void);
 void imx53_init_late(void);
 void epit_timer_init(void __iomem *base, int irq);

commit fffa051281f7cb2729abe584d111e064f609f2ab
Author: Shawn Guo <shawn.guo@freescale.com>
Date:   Mon May 19 20:19:06 2014 +0800

    ARM: imx5: tzic_init_irq() can directly be .init_irq hook
    
    After i.MX51 supports DT only, tzic_init_irq() can figure out the
    tzic_base on its own.  Thus, it can directly be .init_irq hook, and
    mx51[53]_init_irq() can be saved.
    
    Signed-off-by: Shawn Guo <shawn.guo@freescale.com>

diff --git a/arch/arm/mach-imx/common.h b/arch/arm/mach-imx/common.h
index cf9e9c2f934b..6d018c039896 100644
--- a/arch/arm/mach-imx/common.h
+++ b/arch/arm/mach-imx/common.h
@@ -37,15 +37,13 @@ void imx35_init_early(void);
 void imx51_init_early(void);
 void imx53_init_early(void);
 void mxc_init_irq(void __iomem *);
-void tzic_init_irq(void __iomem *);
+void tzic_init_irq(void);
 void mx1_init_irq(void);
 void mx21_init_irq(void);
 void mx25_init_irq(void);
 void mx27_init_irq(void);
 void mx31_init_irq(void);
 void mx35_init_irq(void);
-void mx51_init_irq(void);
-void mx53_init_irq(void);
 void imx1_soc_init(void);
 void imx21_soc_init(void);
 void imx25_soc_init(void);

commit c16cc8a0e90e91f250fabf08e2c772e3ce4dca74
Author: Shawn Guo <shawn.guo@freescale.com>
Date:   Mon May 19 15:43:42 2014 +0800

    ARM: imx5: make mx51_clocks_init() a DT call
    
    Since i.MX51 becomes a DT only platform, we can make mx51_clocks_init()
    a DT call and save function mx51_clocks_init_dt() now.
    
    Signed-off-by: Shawn Guo <shawn.guo@freescale.com>

diff --git a/arch/arm/mach-imx/common.h b/arch/arm/mach-imx/common.h
index 9ab785ce13e8..cf9e9c2f934b 100644
--- a/arch/arm/mach-imx/common.h
+++ b/arch/arm/mach-imx/common.h
@@ -64,8 +64,6 @@ int mx25_clocks_init(void);
 int mx27_clocks_init(unsigned long fref);
 int mx31_clocks_init(unsigned long fref);
 int mx35_clocks_init(void);
-int mx51_clocks_init(unsigned long ckil, unsigned long osc,
-			unsigned long ckih1, unsigned long ckih2);
 int mx25_clocks_init_dt(void);
 int mx27_clocks_init_dt(void);
 int mx31_clocks_init_dt(void);

commit 000bf9ee89b4c921173cf49c0329a673aa08f516
Author: Alexander Shiyan <shc_work@mail.ru>
Date:   Sun May 11 11:35:57 2014 +0400

    ARM: i.MX: Setup IRQ handler from IRQ driver
    
    This patch moves IRQ handler setup to the its corresponded IRQ
    driver (AVIC, TZIC).
    
    Signed-off-by: Alexander Shiyan <shc_work@mail.ru>
    Signed-off-by: Shawn Guo <shawn.guo@freescale.com>

diff --git a/arch/arm/mach-imx/common.h b/arch/arm/mach-imx/common.h
index 4facd01d1c75..9ab785ce13e8 100644
--- a/arch/arm/mach-imx/common.h
+++ b/arch/arm/mach-imx/common.h
@@ -101,19 +101,6 @@ enum mx3_cpu_pwr_mode {
 void mx3_cpu_lp_set(enum mx3_cpu_pwr_mode mode);
 void imx_print_silicon_rev(const char *cpu, int srev);
 
-void avic_handle_irq(struct pt_regs *);
-void tzic_handle_irq(struct pt_regs *);
-
-#define imx1_handle_irq avic_handle_irq
-#define imx21_handle_irq avic_handle_irq
-#define imx25_handle_irq avic_handle_irq
-#define imx27_handle_irq avic_handle_irq
-#define imx31_handle_irq avic_handle_irq
-#define imx35_handle_irq avic_handle_irq
-#define imx50_handle_irq tzic_handle_irq
-#define imx51_handle_irq tzic_handle_irq
-#define imx53_handle_irq tzic_handle_irq
-
 void imx_enable_cpu(int cpu, bool enable);
 void imx_set_cpu_jump(int cpu, void *jump_addr);
 u32 imx_get_cpu_arg(int cpu);

commit 876292d66791c0f635333bf8d31efd11701fe495
Author: Gilles Chanteperdrix <gilles.chanteperdrix@xenomai.org>
Date:   Sat Apr 5 17:57:45 2014 +0200

    ARM: imx: factor device tree timer initialization
    
    Signed-off-by: Gilles Chanteperdrix <gilles.chanteperdrix@xenomai.org>
    Signed-off-by: Shawn Guo <shawn.guo@freescale.com>

diff --git a/arch/arm/mach-imx/common.h b/arch/arm/mach-imx/common.h
index b5241ea76706..4facd01d1c75 100644
--- a/arch/arm/mach-imx/common.h
+++ b/arch/arm/mach-imx/common.h
@@ -17,6 +17,7 @@ struct irq_data;
 struct platform_device;
 struct pt_regs;
 struct clk;
+struct device_node;
 enum mxc_cpu_pwr_mode;
 
 void mx1_map_io(void);
@@ -56,6 +57,7 @@ void imx51_init_late(void);
 void imx53_init_late(void);
 void epit_timer_init(void __iomem *base, int irq);
 void mxc_timer_init(void __iomem *, int);
+void mxc_timer_init_dt(struct device_node *);
 int mx1_clocks_init(unsigned long fref);
 int mx21_clocks_init(unsigned long lref, unsigned long fref);
 int mx25_clocks_init(void);

commit c356bdb407baf23b202a6b4d2234114db6ae55bd
Author: Shawn Guo <shawn.guo@linaro.org>
Date:   Wed Feb 26 19:48:33 2014 +0800

    ARM: imx6: move v7_cpu_resume() into suspend-imx6.S
    
    The suspend-imx6.S is introduced recently for suspend low-level assembly
    code.  Since function v7_cpu_resume() is only used by suspend support,
    it makes sense to move the function into suspend-imx6.S, and control the
    build of the file with CONFIG_SUSPEND option.
    
    Signed-off-by: Shawn Guo <shawn.guo@linaro.org>

diff --git a/arch/arm/mach-imx/common.h b/arch/arm/mach-imx/common.h
index 91d69ccf7c76..b5241ea76706 100644
--- a/arch/arm/mach-imx/common.h
+++ b/arch/arm/mach-imx/common.h
@@ -116,7 +116,6 @@ void imx_enable_cpu(int cpu, bool enable);
 void imx_set_cpu_jump(int cpu, void *jump_addr);
 u32 imx_get_cpu_arg(int cpu);
 void imx_set_cpu_arg(int cpu, u32 arg);
-void v7_cpu_resume(void);
 #ifdef CONFIG_SMP
 void v7_secondary_startup(void);
 void imx_scu_map_io(void);
@@ -145,7 +144,14 @@ void imx6sl_set_wait_clk(bool enter);
 void imx_cpu_die(unsigned int cpu);
 int imx_cpu_kill(unsigned int cpu);
 
+#ifdef CONFIG_SUSPEND
+void v7_cpu_resume(void);
 void imx6_suspend(void __iomem *ocram_vbase);
+#else
+static inline void v7_cpu_resume(void) {}
+static inline void imx6_suspend(void __iomem *ocram_vbase) {}
+#endif
+
 void imx6q_pm_init(void);
 void imx6dl_pm_init(void);
 void imx6sl_pm_init(void);

commit df595746fa69db2e36d89677df26ba51f9706c1b
Author: Anson Huang <b20788@freescale.com>
Date:   Fri Jan 17 11:39:05 2014 +0800

    ARM: imx: add suspend in ocram support for i.mx6q
    
    When system enter suspend, we can set the DDR IO to
    high-Z state to save DDR IOs' power consumption, this
    operation can save many power(from ~26mA@1.5V to ~15mA@1.5V,
    measured on i.MX6Q SabreSD board, R25) of DDR IOs. To
    achieve that, we need to copy the suspend code to ocram
    and run the low level hardware related code(set DDR IOs
    to high-Z state) in ocram.
    
    If there is no ocram space available, then system will
    still do suspend in external DDR, hence no DDR IOs will
    be set to high-Z.
    
    The OCRAM usage layout is as below,
    
    ocram suspend region(4K currently):
    ======================== high address ======================
                                  .
                                  .
                                  .
                                  ^
                                  ^
                                  ^
                          imx6_suspend code
                 PM_INFO structure(imx6_cpu_pm_info)
    ======================== low address =======================
    
    Reviewed-by: Sascha Hauer <s.hauer@pengutronix.de>
    Signed-off-by: Anson Huang <b20788@freescale.com>
    Signed-off-by: Shawn Guo <shawn.guo@linaro.org>

diff --git a/arch/arm/mach-imx/common.h b/arch/arm/mach-imx/common.h
index b909b689619b..91d69ccf7c76 100644
--- a/arch/arm/mach-imx/common.h
+++ b/arch/arm/mach-imx/common.h
@@ -1,5 +1,5 @@
 /*
- * Copyright 2004-2013 Freescale Semiconductor, Inc. All Rights Reserved.
+ * Copyright 2004-2014 Freescale Semiconductor, Inc. All Rights Reserved.
  */
 
 /*
@@ -145,8 +145,12 @@ void imx6sl_set_wait_clk(bool enter);
 void imx_cpu_die(unsigned int cpu);
 int imx_cpu_kill(unsigned int cpu);
 
+void imx6_suspend(void __iomem *ocram_vbase);
 void imx6q_pm_init(void);
+void imx6dl_pm_init(void);
+void imx6sl_pm_init(void);
 void imx6q_pm_set_ccm_base(void __iomem *base);
+
 #ifdef CONFIG_PM
 void imx5_pm_init(void);
 #else

commit 751f7e999afcef157527f5f6f06529c93f8a4022
Author: Anson Huang <b20788@freescale.com>
Date:   Thu Jan 9 16:03:16 2014 +0800

    ARM: imx: add cpuidle support for i.mx6sl
    
    Add cpuidle support for i.MX6SL, currently only support
    two cpuidle levels(ARM wfi and WAIT mode), and add software
    workaround for WAIT mode errata as below:
    
    ERR005311 CCM: After exit from WAIT mode, unwanted interrupt(s) taken
              during WAIT mode entry process could cause cache memory
              corruption.
    
    Software workaround:
        To prevent this issue from occurring, software should ensure that
    the ARM to IPG clock ratio is less than 12:5 (that is < 2.4x), before
    entering WAIT mode.
    
    Signed-off-by: Anson Huang <b20788@freescale.com>
    Signed-off-by: Shawn Guo <shawn.guo@linaro.org>

diff --git a/arch/arm/mach-imx/common.h b/arch/arm/mach-imx/common.h
index cdbddfa2a42f..b909b689619b 100644
--- a/arch/arm/mach-imx/common.h
+++ b/arch/arm/mach-imx/common.h
@@ -140,6 +140,7 @@ void imx_anatop_pre_suspend(void);
 void imx_anatop_post_resume(void);
 int imx6q_set_lpm(enum mxc_cpu_pwr_mode mode);
 void imx6q_set_int_mem_clk_lpm(void);
+void imx6sl_set_wait_clk(bool enter);
 
 void imx_cpu_die(unsigned int cpu);
 int imx_cpu_kill(unsigned int cpu);

commit fa6be65ed4d65ca7e56a878d247ed963a3619c0e
Author: Fabio Estevam <fabio.estevam@freescale.com>
Date:   Tue Jan 7 08:00:40 2014 -0200

    ARM: imx: Use INT_MEM_CLK_LPM as the bit name
    
    Bit 17 of register CCM_CGPR is called INT_MEM_CLK_LPM as per the mx6
    reference manual, so use this name instead.
    
    Signed-off-by: Fabio Estevam <fabio.estevam@freescale.com>
    Signed-off-by: Shawn Guo <shawn.guo@linaro.org>

diff --git a/arch/arm/mach-imx/common.h b/arch/arm/mach-imx/common.h
index baf439dc22d8..cdbddfa2a42f 100644
--- a/arch/arm/mach-imx/common.h
+++ b/arch/arm/mach-imx/common.h
@@ -139,7 +139,7 @@ void imx_anatop_init(void);
 void imx_anatop_pre_suspend(void);
 void imx_anatop_post_resume(void);
 int imx6q_set_lpm(enum mxc_cpu_pwr_mode mode);
-void imx6q_set_chicken_bit(void);
+void imx6q_set_int_mem_clk_lpm(void);
 
 void imx_cpu_die(unsigned int cpu);
 int imx_cpu_kill(unsigned int cpu);

commit 28a9f3b078c545064dcf4b46d2c6917554d1642e
Author: Shawn Guo <shawn.guo@linaro.org>
Date:   Tue Feb 18 10:35:05 2014 +0800

    ARM: imx6: build pm-imx6q.c independently of CONFIG_PM
    
    When building a kernel image with only CONFIG_CPU_IDLE but no CONFIG_PM,
    we will get the following link error.
    
      LD      init/built-in.o
    arch/arm/mach-imx/built-in.o: In function `imx6q_enter_wait':
    platform-spi_imx.c:(.text+0x25c0): undefined reference to `imx6q_set_lpm'
    platform-spi_imx.c:(.text+0x25d4): undefined reference to `imx6q_set_lpm'
    arch/arm/mach-imx/built-in.o: In function `imx6q_cpuidle_init':
    platform-spi_imx.c:(.init.text+0x75d4): undefined reference to `imx6q_set_chicken_bit'
    make[1]: *** [vmlinux] Error 1
    
    Since pm-imx6q.c has been a collection of library functions that access
    CCM low-power registers used by not only suspend but also cpuidle and
    other drivers, let's build pm-imx6q.c independently of CONFIG_PM to fix
    above error.
    
    Reported-by: Lucas Stach <l.stach@pengutronix.de>
    Signed-off-by: Shawn Guo <shawn.guo@linaro.org>
    Cc: stable@vger.kernel.org
    Acked-by: Christian Gmeiner <christian.gmeiner@gmail.com>
    Signed-off-by: Olof Johansson <olof@lixom.net>

diff --git a/arch/arm/mach-imx/common.h b/arch/arm/mach-imx/common.h
index 59c3b9b26bb4..baf439dc22d8 100644
--- a/arch/arm/mach-imx/common.h
+++ b/arch/arm/mach-imx/common.h
@@ -144,13 +144,11 @@ void imx6q_set_chicken_bit(void);
 void imx_cpu_die(unsigned int cpu);
 int imx_cpu_kill(unsigned int cpu);
 
-#ifdef CONFIG_PM
 void imx6q_pm_init(void);
 void imx6q_pm_set_ccm_base(void __iomem *base);
+#ifdef CONFIG_PM
 void imx5_pm_init(void);
 #else
-static inline void imx6q_pm_init(void) {}
-static inline void imx6q_pm_set_ccm_base(void __iomem *base) {}
 static inline void imx5_pm_init(void) {}
 #endif
 

commit 374daac46f2718c341e449f52a511404c8de4435
Author: Greg Ungerer <gerg@uclinux.org>
Date:   Mon Nov 4 10:13:40 2013 +1000

    ARM: imx: add support code for IMX50 based machines
    
    Add machine support code for the Freescale IMX50 SoC.
    
    The IMX50 is quite similar to the Freescale IMX53, and contains many of the
    same periperhal hardware modules, at the same address offsets as the IMX53.
    (Notable exceptions are that the IMX50 contains no CAN bus hardware, less
    GPIO, no VPU, it does contain an Electrophoretic display controller though).
    
    This support code uses some of the IMX53 setup code to reduce duplication
    of what would be identical init IO setup.
    
    Signed-off-by: Greg Ungerer <gerg@uclinux.org>
    Signed-off-by: Shawn Guo <shawn.guo@linaro.org>

diff --git a/arch/arm/mach-imx/common.h b/arch/arm/mach-imx/common.h
index 24a7899e36a8..59c3b9b26bb4 100644
--- a/arch/arm/mach-imx/common.h
+++ b/arch/arm/mach-imx/common.h
@@ -108,6 +108,7 @@ void tzic_handle_irq(struct pt_regs *);
 #define imx27_handle_irq avic_handle_irq
 #define imx31_handle_irq avic_handle_irq
 #define imx35_handle_irq avic_handle_irq
+#define imx50_handle_irq tzic_handle_irq
 #define imx51_handle_irq tzic_handle_irq
 #define imx53_handle_irq tzic_handle_irq
 

commit b6e23bb63f28f0a8ffa7cf9824fa48000c08f9b2
Author: Shawn Guo <shawn.guo@linaro.org>
Date:   Mon Oct 28 16:37:12 2013 +0800

    ARM: imx: remove imx_src_prepare_restart() call
    
    There is ~10% possibility that the following emergency restart command
    fails to reboot imx6q.
    
    $ echo b > /proc/sysrq-trigger
    
    The IMX restart routine mxc_restart() assumes that it will always run on
    primary core, and will call imx_src_prepare_restart() to disable
    secondary cores in order to get them come to online in the following
    boot.  However, the assumption is only true for normal kernel_restart()
    case where migrate_to_reboot_cpu() will be called to migrate to primary
    core, but not necessarily true for emergency_restart() case.  So when
    emergency_restart() calls into mxc_restart() on any secondary core,
    system will hang immediately once imx_src_prepare_restart() is called
    to disabled secondary cores.  Since emergency_restart() is defined as a
    function that is safe to call in interrupt context, we cannot just call
    migrate_to_reboot_cpu() to fix the issue.
    
    Fortunately, we just found that the issue can be fixed at imx6q platform
    level.  We used to call imx_src_prepare_restart() to disable all
    secondary cores before resetting hardware.  Otherwise, the secondary
    will fail come to online in the reboot.  However, we recently found that
    after commit 6050d18 (ARM: imx: reset core along with enable/disable
    operation) comes to play, we do not need to reset the secondary cores
    any more.  That said, mxc_restart() now can run on any core to reboot
    the system, as long as we remove the imx_src_prepare_restart() call from
    mxc_restart().
    
    So let's simply remove imx_src_prepare_restart() call to fix the above
    emergency restart failure.
    
    Reported-by: Jiada Wang <jiada_wang@mentor.com>
    Signed-off-by: Shawn Guo <shawn.guo@linaro.org>

diff --git a/arch/arm/mach-imx/common.h b/arch/arm/mach-imx/common.h
index 7cbe22d0c6e9..24a7899e36a8 100644
--- a/arch/arm/mach-imx/common.h
+++ b/arch/arm/mach-imx/common.h
@@ -127,11 +127,6 @@ static inline void imx_smp_prepare(void) {}
 static inline void imx_scu_standby_enable(void) {}
 #endif
 void imx_src_init(void);
-#ifdef CONFIG_HAVE_IMX_SRC
-void imx_src_prepare_restart(void);
-#else
-static inline void imx_src_prepare_restart(void) {}
-#endif
 void imx_gpc_init(void);
 void imx_gpc_pre_suspend(void);
 void imx_gpc_post_resume(void);

commit d48866fefdac239a4e02777e712aad60db9ee8a8
Author: Shawn Guo <shawn.guo@linaro.org>
Date:   Wed Oct 16 19:52:00 2013 +0800

    ARM: imx: ensure dsm_request signal is not asserted when setting LPM
    
    There is a defect in imx6 LPM design.  When SW tries to enter low power
    mode with following sequence, the chip will enter low power mode before
    A9 CPU execute WFI instruction:
    
    1. Set CCM_CLPCR[1:0] to 2'b00;
    2. ARM CPU enters WFI;
    3. ARM CPU wakeup from an interrupt event, which is masked by GPC or not
       visible to GPC, such as interrupt from local timer;
    4. Set CCM_CLPCR[1:0] to 2'b01 or 2'b10;
    5. ARM CPU execute WFI.
    
    Before the last step, the chip will enter WAIT mode if CCM_CLPCR[1:0] is
    set to 2'b01, or enter STOP mode if CCM_CLPCR[1:0] is set to 2'b10.
    
    The patch implements a recommended workaround for this issue.
    
    1. SW triggers irq #32(IOMUX) to be always pending manually by setting
       IOMUX_GPR1_GINT bit;
    2. SW should then unmask it in GPC before setting CCM LPM;
    3. SW should mask it right after CCM LPM is set (bit0-1 of CCM_CLPCR).
    
    Signed-off-by: Shawn Guo <shawn.guo@linaro.org>

diff --git a/arch/arm/mach-imx/common.h b/arch/arm/mach-imx/common.h
index fde6661ef70d..7cbe22d0c6e9 100644
--- a/arch/arm/mach-imx/common.h
+++ b/arch/arm/mach-imx/common.h
@@ -13,6 +13,7 @@
 
 #include <linux/reboot.h>
 
+struct irq_data;
 struct platform_device;
 struct pt_regs;
 struct clk;
@@ -136,6 +137,8 @@ void imx_gpc_pre_suspend(void);
 void imx_gpc_post_resume(void);
 void imx_gpc_mask_all(void);
 void imx_gpc_restore_all(void);
+void imx_gpc_irq_mask(struct irq_data *d);
+void imx_gpc_irq_unmask(struct irq_data *d);
 void imx_anatop_init(void);
 void imx_anatop_pre_suspend(void);
 void imx_anatop_post_resume(void);

commit 9e8147bb5ec5d1dda2141da70f96b98985a306cb
Author: Shawn Guo <shawn.guo@linaro.org>
Date:   Wed Sep 25 23:09:36 2013 +0800

    ARM: imx6q: move low-power code out of clock driver
    
    The LPM (Low Power Mode) code that currently sits in imx6q clock driver
    will be reused by imx6sl.  Let's move it into pm-imx6q.c, so that we
    can keep clock driver SoC specific and reuse pm-imx6q.c on imx6sl.
    
    In order to avoid adding another ioremap for CCM block,
    imx6q_pm_set_ccm_base() is created to let clock driver set up ccm_base
    for pm code.
    
    During the move, the unused CCGR macros get removed.
    
    Signed-off-by: Shawn Guo <shawn.guo@linaro.org>

diff --git a/arch/arm/mach-imx/common.h b/arch/arm/mach-imx/common.h
index ddcbd90b4edf..fde6661ef70d 100644
--- a/arch/arm/mach-imx/common.h
+++ b/arch/arm/mach-imx/common.h
@@ -147,9 +147,11 @@ int imx_cpu_kill(unsigned int cpu);
 
 #ifdef CONFIG_PM
 void imx6q_pm_init(void);
+void imx6q_pm_set_ccm_base(void __iomem *base);
 void imx5_pm_init(void);
 #else
 static inline void imx6q_pm_init(void) {}
+static inline void imx6q_pm_set_ccm_base(void __iomem *base) {}
 static inline void imx5_pm_init(void) {}
 #endif
 

commit 803648db201f6c5f45e74a646f8f17bdeeb7b7e6
Author: Shawn Guo <shawn.guo@linaro.org>
Date:   Wed Oct 16 21:05:35 2013 +0800

    ARM: imx: drop extern with function prototypes in common.h
    
    Since commit 70dc8a4 (checkpatch: warn when using extern with function
    prototypes in .h files), we will get checkpatch warning when updating
    common.h following the existing convention which has extern for function
    prototypes.
    
    Let's change the convention to not use extern with function prototypes
    in this header.
    
    Signed-off-by: Shawn Guo <shawn.guo@linaro.org>

diff --git a/arch/arm/mach-imx/common.h b/arch/arm/mach-imx/common.h
index 2413bfbc42f9..ddcbd90b4edf 100644
--- a/arch/arm/mach-imx/common.h
+++ b/arch/arm/mach-imx/common.h
@@ -18,63 +18,63 @@ struct pt_regs;
 struct clk;
 enum mxc_cpu_pwr_mode;
 
-extern void mx1_map_io(void);
-extern void mx21_map_io(void);
-extern void mx25_map_io(void);
-extern void mx27_map_io(void);
-extern void mx31_map_io(void);
-extern void mx35_map_io(void);
-extern void mx51_map_io(void);
-extern void mx53_map_io(void);
-extern void imx1_init_early(void);
-extern void imx21_init_early(void);
-extern void imx25_init_early(void);
-extern void imx27_init_early(void);
-extern void imx31_init_early(void);
-extern void imx35_init_early(void);
-extern void imx51_init_early(void);
-extern void imx53_init_early(void);
-extern void mxc_init_irq(void __iomem *);
-extern void tzic_init_irq(void __iomem *);
-extern void mx1_init_irq(void);
-extern void mx21_init_irq(void);
-extern void mx25_init_irq(void);
-extern void mx27_init_irq(void);
-extern void mx31_init_irq(void);
-extern void mx35_init_irq(void);
-extern void mx51_init_irq(void);
-extern void mx53_init_irq(void);
-extern void imx1_soc_init(void);
-extern void imx21_soc_init(void);
-extern void imx25_soc_init(void);
-extern void imx27_soc_init(void);
-extern void imx31_soc_init(void);
-extern void imx35_soc_init(void);
-extern void imx51_soc_init(void);
-extern void imx51_init_late(void);
-extern void imx53_init_late(void);
-extern void epit_timer_init(void __iomem *base, int irq);
-extern void mxc_timer_init(void __iomem *, int);
-extern int mx1_clocks_init(unsigned long fref);
-extern int mx21_clocks_init(unsigned long lref, unsigned long fref);
-extern int mx25_clocks_init(void);
-extern int mx27_clocks_init(unsigned long fref);
-extern int mx31_clocks_init(unsigned long fref);
-extern int mx35_clocks_init(void);
-extern int mx51_clocks_init(unsigned long ckil, unsigned long osc,
+void mx1_map_io(void);
+void mx21_map_io(void);
+void mx25_map_io(void);
+void mx27_map_io(void);
+void mx31_map_io(void);
+void mx35_map_io(void);
+void mx51_map_io(void);
+void mx53_map_io(void);
+void imx1_init_early(void);
+void imx21_init_early(void);
+void imx25_init_early(void);
+void imx27_init_early(void);
+void imx31_init_early(void);
+void imx35_init_early(void);
+void imx51_init_early(void);
+void imx53_init_early(void);
+void mxc_init_irq(void __iomem *);
+void tzic_init_irq(void __iomem *);
+void mx1_init_irq(void);
+void mx21_init_irq(void);
+void mx25_init_irq(void);
+void mx27_init_irq(void);
+void mx31_init_irq(void);
+void mx35_init_irq(void);
+void mx51_init_irq(void);
+void mx53_init_irq(void);
+void imx1_soc_init(void);
+void imx21_soc_init(void);
+void imx25_soc_init(void);
+void imx27_soc_init(void);
+void imx31_soc_init(void);
+void imx35_soc_init(void);
+void imx51_soc_init(void);
+void imx51_init_late(void);
+void imx53_init_late(void);
+void epit_timer_init(void __iomem *base, int irq);
+void mxc_timer_init(void __iomem *, int);
+int mx1_clocks_init(unsigned long fref);
+int mx21_clocks_init(unsigned long lref, unsigned long fref);
+int mx25_clocks_init(void);
+int mx27_clocks_init(unsigned long fref);
+int mx31_clocks_init(unsigned long fref);
+int mx35_clocks_init(void);
+int mx51_clocks_init(unsigned long ckil, unsigned long osc,
 			unsigned long ckih1, unsigned long ckih2);
-extern int mx25_clocks_init_dt(void);
-extern int mx27_clocks_init_dt(void);
-extern int mx31_clocks_init_dt(void);
-extern struct platform_device *mxc_register_gpio(char *name, int id,
+int mx25_clocks_init_dt(void);
+int mx27_clocks_init_dt(void);
+int mx31_clocks_init_dt(void);
+struct platform_device *mxc_register_gpio(char *name, int id,
 	resource_size_t iobase, resource_size_t iosize, int irq, int irq_high);
-extern void mxc_set_cpu_type(unsigned int type);
-extern void mxc_restart(enum reboot_mode, const char *);
-extern void mxc_arch_reset_init(void __iomem *);
-extern void mxc_arch_reset_init_dt(void);
-extern int mx53_revision(void);
-extern void imx_set_aips(void __iomem *);
-extern int mxc_device_init(void);
+void mxc_set_cpu_type(unsigned int type);
+void mxc_restart(enum reboot_mode, const char *);
+void mxc_arch_reset_init(void __iomem *);
+void mxc_arch_reset_init_dt(void);
+int mx53_revision(void);
+void imx_set_aips(void __iomem *);
+int mxc_device_init(void);
 void imx_set_soc_revision(unsigned int rev);
 unsigned int imx_get_soc_revision(void);
 void imx_init_revision_from_anatop(void);
@@ -95,8 +95,8 @@ enum mx3_cpu_pwr_mode {
 	MX3_SLEEP,
 };
 
-extern void mx3_cpu_lp_set(enum mx3_cpu_pwr_mode mode);
-extern void imx_print_silicon_rev(const char *cpu, int srev);
+void mx3_cpu_lp_set(enum mx3_cpu_pwr_mode mode);
+void imx_print_silicon_rev(const char *cpu, int srev);
 
 void avic_handle_irq(struct pt_regs *);
 void tzic_handle_irq(struct pt_regs *);
@@ -110,57 +110,57 @@ void tzic_handle_irq(struct pt_regs *);
 #define imx51_handle_irq tzic_handle_irq
 #define imx53_handle_irq tzic_handle_irq
 
-extern void imx_enable_cpu(int cpu, bool enable);
-extern void imx_set_cpu_jump(int cpu, void *jump_addr);
-extern u32 imx_get_cpu_arg(int cpu);
-extern void imx_set_cpu_arg(int cpu, u32 arg);
-extern void v7_cpu_resume(void);
+void imx_enable_cpu(int cpu, bool enable);
+void imx_set_cpu_jump(int cpu, void *jump_addr);
+u32 imx_get_cpu_arg(int cpu);
+void imx_set_cpu_arg(int cpu, u32 arg);
+void v7_cpu_resume(void);
 #ifdef CONFIG_SMP
-extern void v7_secondary_startup(void);
-extern void imx_scu_map_io(void);
-extern void imx_smp_prepare(void);
-extern void imx_scu_standby_enable(void);
+void v7_secondary_startup(void);
+void imx_scu_map_io(void);
+void imx_smp_prepare(void);
+void imx_scu_standby_enable(void);
 #else
 static inline void imx_scu_map_io(void) {}
 static inline void imx_smp_prepare(void) {}
 static inline void imx_scu_standby_enable(void) {}
 #endif
-extern void imx_src_init(void);
+void imx_src_init(void);
 #ifdef CONFIG_HAVE_IMX_SRC
-extern void imx_src_prepare_restart(void);
+void imx_src_prepare_restart(void);
 #else
 static inline void imx_src_prepare_restart(void) {}
 #endif
-extern void imx_gpc_init(void);
-extern void imx_gpc_pre_suspend(void);
-extern void imx_gpc_post_resume(void);
-extern void imx_gpc_mask_all(void);
-extern void imx_gpc_restore_all(void);
-extern void imx_anatop_init(void);
-extern void imx_anatop_pre_suspend(void);
-extern void imx_anatop_post_resume(void);
-extern int imx6q_set_lpm(enum mxc_cpu_pwr_mode mode);
-extern void imx6q_set_chicken_bit(void);
-
-extern void imx_cpu_die(unsigned int cpu);
-extern int imx_cpu_kill(unsigned int cpu);
+void imx_gpc_init(void);
+void imx_gpc_pre_suspend(void);
+void imx_gpc_post_resume(void);
+void imx_gpc_mask_all(void);
+void imx_gpc_restore_all(void);
+void imx_anatop_init(void);
+void imx_anatop_pre_suspend(void);
+void imx_anatop_post_resume(void);
+int imx6q_set_lpm(enum mxc_cpu_pwr_mode mode);
+void imx6q_set_chicken_bit(void);
+
+void imx_cpu_die(unsigned int cpu);
+int imx_cpu_kill(unsigned int cpu);
 
 #ifdef CONFIG_PM
-extern void imx6q_pm_init(void);
-extern void imx5_pm_init(void);
+void imx6q_pm_init(void);
+void imx5_pm_init(void);
 #else
 static inline void imx6q_pm_init(void) {}
 static inline void imx5_pm_init(void) {}
 #endif
 
 #ifdef CONFIG_NEON
-extern int mx51_neon_fixup(void);
+int mx51_neon_fixup(void);
 #else
 static inline int mx51_neon_fixup(void) { return 0; }
 #endif
 
 #ifdef CONFIG_CACHE_L2X0
-extern void imx_init_l2cache(void);
+void imx_init_l2cache(void);
 #else
 static inline void imx_init_l2cache(void) {}
 #endif

commit 87a84b69824d7fd63b20f3bc98d75c0238b8e7d0
Author: Shawn Guo <shawn.guo@linaro.org>
Date:   Sun Oct 6 16:47:46 2013 +0800

    ARM: imx: replace imx6q_restart() with mxc_restart()
    
    The imx6q_restart() works fine with normal reboot but will run into
    problem with emergency reboot like sysrq-b.  In that case, of_iomap()
    gets called from interrupt context and hence triggers the BUG_ON in
    __get_vm_area_node().
    
    Actually, since commit c1e31d1 (ARM: imx: create
    mxc_arch_reset_init_dt() for DT boot), imx6q/dl should try to use
    mxc_restart() by calling mxc_arch_reset_init_dt() beforehand, where
    things like of_iomap() can be done.
    
    The patch updates mxc_restart() a little bit to get it work for imx6q/dl
    and kill imx6q_restart() completely.
    
    Reported-by: Nathan Lynch <nathan_lynch@mentor.com>
    Signed-off-by: Shawn Guo <shawn.guo@linaro.org>

diff --git a/arch/arm/mach-imx/common.h b/arch/arm/mach-imx/common.h
index d04ed7e8d8d3..2413bfbc42f9 100644
--- a/arch/arm/mach-imx/common.h
+++ b/arch/arm/mach-imx/common.h
@@ -126,7 +126,11 @@ static inline void imx_smp_prepare(void) {}
 static inline void imx_scu_standby_enable(void) {}
 #endif
 extern void imx_src_init(void);
+#ifdef CONFIG_HAVE_IMX_SRC
 extern void imx_src_prepare_restart(void);
+#else
+static inline void imx_src_prepare_restart(void) {}
+#endif
 extern void imx_gpc_init(void);
 extern void imx_gpc_pre_suspend(void);
 extern void imx_gpc_post_resume(void);

commit 7655fe53f4d39379d3f619e1ed49c79aba4d319b
Author: Shawn Guo <shawn.guo@linaro.org>
Date:   Wed Sep 25 21:30:42 2013 +0800

    ARM: imx: remove stale mx53_display_revision() declaration
    
    The mx53_display_revision() declaration in common.h is stale and used
    nowhere, so remove it.
    
    Signed-off-by: Shawn Guo <shawn.guo@linaro.org>

diff --git a/arch/arm/mach-imx/common.h b/arch/arm/mach-imx/common.h
index f9d01142a4f6..d04ed7e8d8d3 100644
--- a/arch/arm/mach-imx/common.h
+++ b/arch/arm/mach-imx/common.h
@@ -73,7 +73,6 @@ extern void mxc_restart(enum reboot_mode, const char *);
 extern void mxc_arch_reset_init(void __iomem *);
 extern void mxc_arch_reset_init_dt(void);
 extern int mx53_revision(void);
-extern int mx53_display_revision(void);
 extern void imx_set_aips(void __iomem *);
 extern int mxc_device_init(void);
 void imx_set_soc_revision(unsigned int rev);

commit a28875462bd493fc1bb041c21f811b4a0577a497
Author: Shawn Guo <shawn.guo@linaro.org>
Date:   Tue Aug 13 16:59:28 2013 +0800

    ARM: imx6: report soc info via soc device
    
    The patch enables soc bus infrastructure and adds a function
    imx_soc_device_init() to report soc info via soc device interface for
    imx6qdl and imx6sl.  With the support, user space can get soc related
    info by looking at sysfs like below.
    
      $ cat /sys/devices/soc0/machine
      Freescale i.MX6 Quad SABRE Smart Device Board
      $ cat /sys/devices/soc0/family
      Freescale i.MX
      $ cat /sys/devices/soc0/soc_id
      i.MX6Q
      $ cat /sys/devices/soc0/revision
      1.2
    
    Signed-off-by: Shawn Guo <shawn.guo@linaro.org>

diff --git a/arch/arm/mach-imx/common.h b/arch/arm/mach-imx/common.h
index d0191152807d..f9d01142a4f6 100644
--- a/arch/arm/mach-imx/common.h
+++ b/arch/arm/mach-imx/common.h
@@ -79,6 +79,7 @@ extern int mxc_device_init(void);
 void imx_set_soc_revision(unsigned int rev);
 unsigned int imx_get_soc_revision(void);
 void imx_init_revision_from_anatop(void);
+struct device *imx_soc_device_init(void);
 
 enum mxc_cpu_pwr_mode {
 	WAIT_CLOCKED,		/* wfi only */

commit f1c6f314727c7595e249c7da3933ba2bc6219e58
Author: Shawn Guo <shawn.guo@linaro.org>
Date:   Tue Aug 13 14:59:43 2013 +0800

    ARM: imx: add a common function to initialize revision from anatop
    
    The patch creates a common function imx_init_revision_from_anatop() by
    merging imx6q_init_revision() and imx_anatop_get_digprog(), so that any
    SoC that encodes revision info in anatop can use it to initialize
    revision.
    
    Signed-off-by: Shawn Guo <shawn.guo@linaro.org>

diff --git a/arch/arm/mach-imx/common.h b/arch/arm/mach-imx/common.h
index cac12870efb3..d0191152807d 100644
--- a/arch/arm/mach-imx/common.h
+++ b/arch/arm/mach-imx/common.h
@@ -78,6 +78,7 @@ extern void imx_set_aips(void __iomem *);
 extern int mxc_device_init(void);
 void imx_set_soc_revision(unsigned int rev);
 unsigned int imx_get_soc_revision(void);
+void imx_init_revision_from_anatop(void);
 
 enum mxc_cpu_pwr_mode {
 	WAIT_CLOCKED,		/* wfi only */
@@ -134,7 +135,6 @@ extern void imx_gpc_restore_all(void);
 extern void imx_anatop_init(void);
 extern void imx_anatop_pre_suspend(void);
 extern void imx_anatop_post_resume(void);
-extern u32 imx_anatop_get_digprog(void);
 extern int imx6q_set_lpm(enum mxc_cpu_pwr_mode mode);
 extern void imx6q_set_chicken_bit(void);
 

commit 3f75978b3742157853618c5c6dd4a5f49aa950b1
Author: Shawn Guo <shawn.guo@linaro.org>
Date:   Tue Aug 13 14:10:29 2013 +0800

    ARM: imx6q: use common soc revision helpers
    
    It calls imx_set_soc_revision() to set up soc revision in
    imx6q_init_revision(), and replaces all the occurrences of
    imx6q_revision() with common helper imx_get_soc_revision().
    
    Signed-off-by: Shawn Guo <shawn.guo@linaro.org>

diff --git a/arch/arm/mach-imx/common.h b/arch/arm/mach-imx/common.h
index 6ac25f68a6bc..cac12870efb3 100644
--- a/arch/arm/mach-imx/common.h
+++ b/arch/arm/mach-imx/common.h
@@ -73,7 +73,6 @@ extern void mxc_restart(enum reboot_mode, const char *);
 extern void mxc_arch_reset_init(void __iomem *);
 extern void mxc_arch_reset_init_dt(void);
 extern int mx53_revision(void);
-extern int imx6q_revision(void);
 extern int mx53_display_revision(void);
 extern void imx_set_aips(void __iomem *);
 extern int mxc_device_init(void);

commit bfefdff8f91aa0a9ff1291d18d54498af276a6e5
Author: Shawn Guo <shawn.guo@linaro.org>
Date:   Tue Aug 13 13:54:02 2013 +0800

    ARM: imx: add soc revision helper functions
    
    Similar to what we do for cpu type, the patch adds helper functions
    imx_set_soc_revision() and imx_get_soc_revision() to maintain
    imx_soc_revision in cpu.c.
    
    Signed-off-by: Shawn Guo <shawn.guo@linaro.org>

diff --git a/arch/arm/mach-imx/common.h b/arch/arm/mach-imx/common.h
index 28e8ca0871e8..6ac25f68a6bc 100644
--- a/arch/arm/mach-imx/common.h
+++ b/arch/arm/mach-imx/common.h
@@ -77,6 +77,8 @@ extern int imx6q_revision(void);
 extern int mx53_display_revision(void);
 extern void imx_set_aips(void __iomem *);
 extern int mxc_device_init(void);
+void imx_set_soc_revision(unsigned int rev);
+unsigned int imx_get_soc_revision(void);
 
 enum mxc_cpu_pwr_mode {
 	WAIT_CLOCKED,		/* wfi only */

commit 4d9d18a560a50920691865c1efdad6577616eaa9
Author: Sebastian Hesselbarth <sebastian.hesselbarth@gmail.com>
Date:   Tue Aug 27 14:50:00 2013 +0200

    ARM: imx: remove custom .init_time hook
    
    With arch/arm calling of_clk_init(NULL) from time_init(), we can now
    remove custom .init_time hooks.
    
    Signed-off-by: Sebastian Hesselbarth <sebastian.hesselbarth@gmail.com>
    Acked-by: Shawn Guo <shawn.guo@linaro.org>

diff --git a/arch/arm/mach-imx/common.h b/arch/arm/mach-imx/common.h
index 4517fd760bfc..28e8ca0871e8 100644
--- a/arch/arm/mach-imx/common.h
+++ b/arch/arm/mach-imx/common.h
@@ -63,13 +63,9 @@ extern int mx31_clocks_init(unsigned long fref);
 extern int mx35_clocks_init(void);
 extern int mx51_clocks_init(unsigned long ckil, unsigned long osc,
 			unsigned long ckih1, unsigned long ckih2);
-extern int mx53_clocks_init(unsigned long ckil, unsigned long osc,
-			unsigned long ckih1, unsigned long ckih2);
 extern int mx25_clocks_init_dt(void);
 extern int mx27_clocks_init_dt(void);
 extern int mx31_clocks_init_dt(void);
-extern int mx51_clocks_init_dt(void);
-extern int mx53_clocks_init_dt(void);
 extern struct platform_device *mxc_register_gpio(char *name, int id,
 	resource_size_t iobase, resource_size_t iosize, int irq, int irq_high);
 extern void mxc_set_cpu_type(unsigned int type);

commit ddcb9aa65a759112ea3548c2adc473f0086a031e
Author: Peter Chen <peter.chen@freescale.com>
Date:   Wed Aug 14 11:40:56 2013 +0800

    ARM: imx: Move anatop related from board file to anatop driver
    
    Move anatop related (For USB) from board file to anatop driver
    
    Signed-off-by: Peter Chen <peter.chen@freescale.com>
    Signed-off-by: Shawn Guo <shawn.guo@linaro.org>

diff --git a/arch/arm/mach-imx/common.h b/arch/arm/mach-imx/common.h
index cdc9288ac48a..4517fd760bfc 100644
--- a/arch/arm/mach-imx/common.h
+++ b/arch/arm/mach-imx/common.h
@@ -137,7 +137,6 @@ extern void imx_gpc_restore_all(void);
 extern void imx_anatop_init(void);
 extern void imx_anatop_pre_suspend(void);
 extern void imx_anatop_post_resume(void);
-extern void imx_anatop_usb_chrg_detect_disable(void);
 extern u32 imx_anatop_get_digprog(void);
 extern int imx6q_set_lpm(enum mxc_cpu_pwr_mode mode);
 extern void imx6q_set_chicken_bit(void);

commit 547dd1e089db9927ad95cfb525152fec5153cfeb
Author: Fabio Estevam <fabio.estevam@freescale.com>
Date:   Fri Jul 26 00:17:36 2013 -0300

    ARM: mx53: Allow suspend/resume
    
    Current imx53_pm_init() implementation is incomplete as it lacks calling
    suspend_set_ops().
    
    Use a single imx5_pm_init() function to handle both mx51 and mx53.
    
    This allows mx53 to enter in low-power mode.
    
    Tested on a mx53qsb:
    
    root@freescale /$ echo mem > /sys/power/state
    PM: Syncing filesystems ... done.
    mmc0: card e624 removed
    Freezing user space processes ... (elapsed 0.001 seconds) done.
    Freezing remaining freezable tasks ... (elapsed 0.001 seconds) done.
    Suspending console(s) (use no_console_suspend to debug)
    
    ... (Press Power button)
    
    PM: suspend of devices complete after 17.067 msecs
    PM: suspend devices took 0.020 seconds
    PM: late suspend of devices complete after 0.954 msecs
    PM: noirq suspend of devices complete after 1.288 msecs
    Disabling non-boot CPUs ...
    PM: noirq resume of devices complete after 0.680 msecs
    PM: early resume of devices complete after 0.914 msecs
    PM: resume of devices complete after 44.955 msecs
    PM: resume devices took 0.050 seconds
    Restarting tasks ... done.
    mmc0: host does not support reading read-only switch. assuming write-enable.
    mmc0: new SDHC card at address e624
    mmcblk0: mmc0:e624 SU04G 3.69 GiB
     mmcblk0: p1 p2 p3
    libphy: 63fec000.etherne:00 - Link is Down
    libphy: 63fec000.etherne:00 - Link is Up - 100/Full
    root@freescale /$
    
    Signed-off-by: Fabio Estevam <fabio.estevam@freescale.com>
    Signed-off-by: Shawn Guo <shawn.guo@linaro.org>

diff --git a/arch/arm/mach-imx/common.h b/arch/arm/mach-imx/common.h
index b96aff7476ea..cdc9288ac48a 100644
--- a/arch/arm/mach-imx/common.h
+++ b/arch/arm/mach-imx/common.h
@@ -147,12 +147,10 @@ extern int imx_cpu_kill(unsigned int cpu);
 
 #ifdef CONFIG_PM
 extern void imx6q_pm_init(void);
-extern void imx51_pm_init(void);
-extern void imx53_pm_init(void);
+extern void imx5_pm_init(void);
 #else
 static inline void imx6q_pm_init(void) {}
-static inline void imx51_pm_init(void) {}
-static inline void imx53_pm_init(void) {}
+static inline void imx5_pm_init(void) {}
 #endif
 
 #ifdef CONFIG_NEON

commit e6a07569611daf4190c0fd2c2bb1e2189c0cb479
Author: Shawn Guo <shawn.guo@linaro.org>
Date:   Mon Jul 8 21:45:20 2013 +0800

    ARM: imx: let L2 initialization be a common function
    
    Move imx6q L2 initialization function imx6q_init_l2cache() into
    system.c, and rename it imx_init_l2cache(), so that other platforms
    other than imx6q can also use the function.
    
    Signed-off-by: Shawn Guo <shawn.guo@linaro.org>
    Acked-by: Dirk Behme <dirk.behme@de.bosch.com>

diff --git a/arch/arm/mach-imx/common.h b/arch/arm/mach-imx/common.h
index cb6c838b63ed..b96aff7476ea 100644
--- a/arch/arm/mach-imx/common.h
+++ b/arch/arm/mach-imx/common.h
@@ -161,6 +161,12 @@ extern int mx51_neon_fixup(void);
 static inline int mx51_neon_fixup(void) { return 0; }
 #endif
 
+#ifdef CONFIG_CACHE_L2X0
+extern void imx_init_l2cache(void);
+#else
+static inline void imx_init_l2cache(void) {}
+#endif
+
 extern struct smp_operations imx_smp_ops;
 
 #endif

commit 7b6d864b48d95e6ea1df7df64475b9cb9616dcf9
Author: Robin Holt <holt@sgi.com>
Date:   Mon Jul 8 16:01:40 2013 -0700

    reboot: arm: change reboot_mode to use enum reboot_mode
    
    Preparing to move the parsing of reboot= to generic kernel code forces
    the change in reboot_mode handling to use the enum.
    
    [akpm@linux-foundation.org: fix arch/arm/mach-socfpga/socfpga.c]
    Signed-off-by: Robin Holt <holt@sgi.com>
    Cc: Russell King <rmk+kernel@arm.linux.org.uk>
    Cc: Russ Anderson <rja@sgi.com>
    Cc: Robin Holt <holt@sgi.com>
    Cc: H. Peter Anvin <hpa@zytor.com>
    Cc: Guan Xuetao <gxt@mprc.pku.edu.cn>
    Acked-by: Russell King <rmk+kernel@arm.linux.org.uk>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

diff --git a/arch/arm/mach-imx/common.h b/arch/arm/mach-imx/common.h
index ee78847abf47..cb6c838b63ed 100644
--- a/arch/arm/mach-imx/common.h
+++ b/arch/arm/mach-imx/common.h
@@ -11,6 +11,8 @@
 #ifndef __ASM_ARCH_MXC_COMMON_H__
 #define __ASM_ARCH_MXC_COMMON_H__
 
+#include <linux/reboot.h>
+
 struct platform_device;
 struct pt_regs;
 struct clk;
@@ -71,7 +73,7 @@ extern int mx53_clocks_init_dt(void);
 extern struct platform_device *mxc_register_gpio(char *name, int id,
 	resource_size_t iobase, resource_size_t iosize, int irq, int irq_high);
 extern void mxc_set_cpu_type(unsigned int type);
-extern void mxc_restart(char, const char *);
+extern void mxc_restart(enum reboot_mode, const char *);
 extern void mxc_arch_reset_init(void __iomem *);
 extern void mxc_arch_reset_init_dt(void);
 extern int mx53_revision(void);

commit 53bb71da1c5c14267089218923585840f76e2480
Author: Shawn Guo <shawn.guo@linaro.org>
Date:   Tue May 21 09:58:51 2013 +0800

    ARM: imx6: use common of_clk_init() call to initialize clocks
    
    Instead of explicitly calling clock initialization functions, we can
    declare the functions with CLK_OF_DECLARE() and then call common
    of_clk_init() to have them invoked properly.
    
    Signed-off-by: Shawn Guo <shawn.guo@linaro.org>

diff --git a/arch/arm/mach-imx/common.h b/arch/arm/mach-imx/common.h
index 208e76fcc6b9..ee78847abf47 100644
--- a/arch/arm/mach-imx/common.h
+++ b/arch/arm/mach-imx/common.h
@@ -68,8 +68,6 @@ extern int mx27_clocks_init_dt(void);
 extern int mx31_clocks_init_dt(void);
 extern int mx51_clocks_init_dt(void);
 extern int mx53_clocks_init_dt(void);
-extern int mx6q_clocks_init(void);
-extern int imx6sl_clocks_init(void);
 extern struct platform_device *mxc_register_gpio(char *name, int id,
 	resource_size_t iobase, resource_size_t iosize, int irq, int irq_high);
 extern void mxc_set_cpu_type(unsigned int type);

commit 31a2fbf70e1cf3fcd6623a928a5547a2c5c6733f
Author: Shawn Guo <shawn.guo@linaro.org>
Date:   Fri May 3 11:24:47 2013 +0800

    ARM: imx: add initial support for imx6sl
    
    Add initial support for i.MX6 SoloLite.
    
    Signed-off-by: Shawn Guo <shawn.guo@linaro.org>

diff --git a/arch/arm/mach-imx/common.h b/arch/arm/mach-imx/common.h
index 963971e11f6a..208e76fcc6b9 100644
--- a/arch/arm/mach-imx/common.h
+++ b/arch/arm/mach-imx/common.h
@@ -69,6 +69,7 @@ extern int mx31_clocks_init_dt(void);
 extern int mx51_clocks_init_dt(void);
 extern int mx53_clocks_init_dt(void);
 extern int mx6q_clocks_init(void);
+extern int imx6sl_clocks_init(void);
 extern struct platform_device *mxc_register_gpio(char *name, int id,
 	resource_size_t iobase, resource_size_t iosize, int irq, int irq_high);
 extern void mxc_set_cpu_type(unsigned int type);

commit c1e31d126b4db6a3a8d96883fae40fe22d5eba65
Author: Shawn Guo <shawn.guo@linaro.org>
Date:   Fri May 10 10:19:01 2013 +0800

    ARM: imx: create mxc_arch_reset_init_dt() for DT boot
    
    The mxc_arch_reset_init() uses static mapping and calls clk_get_sys() to
    get clock.  It's suitable for non-DT boot but not for DT boot where
    dynamic mapping and of_clk_get() should be used instead.  Create
    mxc_arch_reset_init_dt() as the DT variant of mxc_arch_reset_init(),
    and change DT platforms to use it.
    
    Signed-off-by: Shawn Guo <shawn.guo@linaro.org>

diff --git a/arch/arm/mach-imx/common.h b/arch/arm/mach-imx/common.h
index c08ae3f99cee..963971e11f6a 100644
--- a/arch/arm/mach-imx/common.h
+++ b/arch/arm/mach-imx/common.h
@@ -74,6 +74,7 @@ extern struct platform_device *mxc_register_gpio(char *name, int id,
 extern void mxc_set_cpu_type(unsigned int type);
 extern void mxc_restart(char, const char *);
 extern void mxc_arch_reset_init(void __iomem *);
+extern void mxc_arch_reset_init_dt(void);
 extern int mx53_revision(void);
 extern int imx6q_revision(void);
 extern int mx53_display_revision(void);

commit 009e63f8d144f9f946c5e0eccbeb597aba16de57
Author: Shawn Guo <shawn.guo@linaro.org>
Date:   Wed May 8 21:05:53 2013 +0800

    ARM: imx: compile fix for hotplug.c
    
    Commit bca7a5a (ARM: cpu hotplug: remove majority of cache flushing
    from platforms) removes include of <asm/cacheflush.h> and hence
    discovers a few indirect inclusion and declaration problems as below.
    
      CC      arch/arm/mach-imx/hotplug.o
    In file included from arch/arm/mach-imx/hotplug.c:16:0:
    arch/arm/mach-imx/common.h:100:29: warning: ‘struct pt_regs’ declared inside parameter list [enabled by default]
    arch/arm/mach-imx/common.h:100:29: warning: its scope is only this definition or declaration, which is probably not what you want [enabled by default]
    arch/arm/mach-imx/common.h:101:29: warning: ‘struct pt_regs’ declared inside parameter list [enabled by default]
    arch/arm/mach-imx/hotplug.c: In function ‘imx_cpu_die’:
    arch/arm/mach-imx/hotplug.c:53:2: error: implicit declaration of function ‘cpu_do_idle’ [-Werror=implicit-function-declaration]
    arch/arm/mach-imx/hotplug.c: In function ‘imx_cpu_kill’:
    arch/arm/mach-imx/hotplug.c:58:26: error: ‘jiffies’ undeclared (first use in this function)
    arch/arm/mach-imx/hotplug.c:58:26: note: each undeclared identifier is reported only once for each function it appears in
    arch/arm/mach-imx/hotplug.c:58:2: error: implicit declaration of function ‘msecs_to_jiffies’ [-Werror=implicit-function-declaration]
    arch/arm/mach-imx/hotplug.c:61:3: error: implicit declaration of function ‘time_after’ [-Werror=implicit-function-declaration]
    
    Fix them by adding the needed inclusion and declaration.
    
    Signed-off-by: Shawn Guo <shawn.guo@linaro.org>
    Acked-by: Arnd Bergmann <arnd@arndb.de>
    Acked-by: Uwe Kleine-König <u.kleine-koenig@pengutronix.de>
    Signed-off-by: Olof Johansson <olof@lixom.net>

diff --git a/arch/arm/mach-imx/common.h b/arch/arm/mach-imx/common.h
index 4cba7dbb079f..c08ae3f99cee 100644
--- a/arch/arm/mach-imx/common.h
+++ b/arch/arm/mach-imx/common.h
@@ -12,6 +12,7 @@
 #define __ASM_ARCH_MXC_COMMON_H__
 
 struct platform_device;
+struct pt_regs;
 struct clk;
 enum mxc_cpu_pwr_mode;
 

commit b1a3582dc6f1f85a56b60f688305a5194e266e02
Author: Philipp Zabel <p.zabel@pengutronix.de>
Date:   Wed Mar 27 18:30:37 2013 +0100

    ARM i.MX6q: export imx6q_revision
    
    So it can be used in clk-imx6q.c for revision dependent clock tree setup.
    
    Signed-off-by: Philipp Zabel <p.zabel@pengutronix.de>
    Signed-off-by: Shawn Guo <shawn.guo@linaro.org>

diff --git a/arch/arm/mach-imx/common.h b/arch/arm/mach-imx/common.h
index bcb11b1751d8..4cba7dbb079f 100644
--- a/arch/arm/mach-imx/common.h
+++ b/arch/arm/mach-imx/common.h
@@ -74,6 +74,7 @@ extern void mxc_set_cpu_type(unsigned int type);
 extern void mxc_restart(char, const char *);
 extern void mxc_arch_reset_init(void __iomem *);
 extern int mx53_revision(void);
+extern int imx6q_revision(void);
 extern int mx53_display_revision(void);
 extern void imx_set_aips(void __iomem *);
 extern int mxc_device_init(void);

commit 263475d4e0b0623fb7a22f8ac0a5c01017eabf20
Author: Anson Huang <b20788@freescale.com>
Date:   Thu Mar 21 10:58:06 2013 -0400

    ARM: imx: enable RBC to support anatop LPM mode
    
    RBC is to control whether some ANATOP sub modules
    can enter lpm mode when SOC is into STOP mode, if
    RBC is enabled and PMIC_VSTBY_REQ is set, ANATOP
    will have below behaviors:
    
    1. Digital LDOs(CORE, SOC and PU) are bypassed;
    2. Analog LDOs(1P1, 2P5, 3P0) are disabled;
    
    As the 2P5 is necessary for DRAM IO pre-drive in
    STOP mode, so we need to enable weak 2P5 in STOP
    mode when 2P5 LDO is disabled.
    
    For RBC settings, there are some rules as below
    due to hardware design:
    
    1. All interrupts must be masked during operating
       RBC registers;
    2. At least 2 CKIL(32K) cycles is needed after the
       RBC setting is changed.
    
    Signed-off-by: Anson Huang <b20788@freescale.com>
    Signed-off-by: Shawn Guo <shawn.guo@linaro.org>

diff --git a/arch/arm/mach-imx/common.h b/arch/arm/mach-imx/common.h
index d557bf383289..bcb11b1751d8 100644
--- a/arch/arm/mach-imx/common.h
+++ b/arch/arm/mach-imx/common.h
@@ -128,6 +128,8 @@ extern void imx_src_prepare_restart(void);
 extern void imx_gpc_init(void);
 extern void imx_gpc_pre_suspend(void);
 extern void imx_gpc_post_resume(void);
+extern void imx_gpc_mask_all(void);
+extern void imx_gpc_restore_all(void);
 extern void imx_anatop_init(void);
 extern void imx_anatop_pre_suspend(void);
 extern void imx_anatop_post_resume(void);

commit e95dddb34c896f33e89f97365491e7932f89a0c0
Author: Anson Huang <b20788@freescale.com>
Date:   Wed Mar 20 19:39:42 2013 -0400

    ARM: imx: enable anatop suspend/resume
    
    Anatop module have sereval configurations for user
    to reduce the power consumption in suspend, provide
    suspend/resume interface for further use and enable
    fet_odrive to reduce CORE LDO leakage during suspend.
    
    As we have a common anatop file, remove all the operations
    of anatop module in other files, use anatop interfaces to
    do that.
    
    Signed-off-by: Anson Huang <b20788@freescale.com>
    Signed-off-by: Shawn Guo <shawn.guo@linaro.org>

diff --git a/arch/arm/mach-imx/common.h b/arch/arm/mach-imx/common.h
index 9fea2522d7a3..d557bf383289 100644
--- a/arch/arm/mach-imx/common.h
+++ b/arch/arm/mach-imx/common.h
@@ -1,5 +1,5 @@
 /*
- * Copyright 2004-2007 Freescale Semiconductor, Inc. All Rights Reserved.
+ * Copyright 2004-2013 Freescale Semiconductor, Inc. All Rights Reserved.
  */
 
 /*
@@ -128,6 +128,11 @@ extern void imx_src_prepare_restart(void);
 extern void imx_gpc_init(void);
 extern void imx_gpc_pre_suspend(void);
 extern void imx_gpc_post_resume(void);
+extern void imx_anatop_init(void);
+extern void imx_anatop_pre_suspend(void);
+extern void imx_anatop_post_resume(void);
+extern void imx_anatop_usb_chrg_detect_disable(void);
+extern u32 imx_anatop_get_digprog(void);
 extern int imx6q_set_lpm(enum mxc_cpu_pwr_mode mode);
 extern void imx6q_set_chicken_bit(void);
 

commit a862d88d3f119efcb50aa3b8644643d6c97e3250
Merge: 7c3c1b8c90e0 3442a7b51d1c
Author: Shawn Guo <shawn.guo@linaro.org>
Date:   Fri Apr 12 19:00:28 2013 +0800

    Merge tag 'imx-cleanup-3.10' into imx/soc
    
    The imx cleanup for 3.10:
    
    * Clean up a couple of unneeded function declarations
    * Remove imx specific cpufreq driver as generic cpufreq-cpu0 works well
      as the replacement
    * Remove platform ahci support
    * Clean up unused ARCH/MACH Kconfig symbols
    * Remove a couple of unused files

commit fda7f2267ded7e892b07466eaf7173633ccb17ad
Author: Shawn Guo <shawn.guo@linaro.org>
Date:   Wed Mar 13 13:29:35 2013 +0800

    ARM: imx: remove pl310_get_save_ptr() declaration
    
    Commit a1f1c7e (arm/imx6q: add suspend/resume support) added
    declaration for a non-existing function pl310_get_save_ptr() by
    mistake.  Remove it.
    
    Signed-off-by: Shawn Guo <shawn.guo@linaro.org>

diff --git a/arch/arm/mach-imx/common.h b/arch/arm/mach-imx/common.h
index 048e6c850f54..d4b2f369751b 100644
--- a/arch/arm/mach-imx/common.h
+++ b/arch/arm/mach-imx/common.h
@@ -111,7 +111,6 @@ void tzic_handle_irq(struct pt_regs *);
 extern void imx_enable_cpu(int cpu, bool enable);
 extern void imx_set_cpu_jump(int cpu, void *jump_addr);
 extern void v7_cpu_resume(void);
-extern u32 *pl310_get_save_ptr(void);
 #ifdef CONFIG_SMP
 extern void v7_secondary_startup(void);
 extern void imx_scu_map_io(void);

commit 4e33a0634c051aff538f2daae81eff4b3e191d4a
Author: Shawn Guo <shawn.guo@linaro.org>
Date:   Wed Mar 13 13:25:43 2013 +0800

    ARM: imx: remove duplicated function declaration
    
    Commit 13eed98 (arm/imx6q: add device tree machine support) added
    duplicated function declaration for imx_enable_cpu() and
    imx_set_cpu_jump().  Remove them.
    
    Signed-off-by: Shawn Guo <shawn.guo@linaro.org>

diff --git a/arch/arm/mach-imx/common.h b/arch/arm/mach-imx/common.h
index 5a800bfcec5b..048e6c850f54 100644
--- a/arch/arm/mach-imx/common.h
+++ b/arch/arm/mach-imx/common.h
@@ -122,8 +122,6 @@ static inline void imx_scu_map_io(void) {}
 static inline void imx_smp_prepare(void) {}
 static inline void imx_scu_standby_enable(void) {}
 #endif
-extern void imx_enable_cpu(int cpu, bool enable);
-extern void imx_set_cpu_jump(int cpu, void *jump_addr);
 extern void imx_src_init(void);
 extern void imx_src_prepare_restart(void);
 extern void imx_gpc_init(void);

commit 2f3edfd7e27ad4206acbc2ae99c9df5f46353024
Author: Shawn Guo <shawn.guo@linaro.org>
Date:   Tue Mar 26 16:46:07 2013 +0800

    ARM: imx: fix sync issue between imx_cpu_die and imx_cpu_kill
    
    There is a sync issue with hotplug operation.  It's possible that when
    imx_cpu_kill gets running on primary core, the imx_cpu_die execution
    on the core which is to be killed hasn't been finished yet.  The problem
    will very likely be hit when running suspend without no_console_suspend
    setting on kernel cmdline.
    
    It uses cpu jumping argument register to sync imx_cpu_die and
    imx_cpu_kill.  The register will be set in imx_cpu_die and imx_cpu_kill
    will wait for the register being cleared to actually kill the cpu.
    
    Signed-off-by: Shawn Guo <shawn.guo@linaro.org>
    Cc: <stable@vger.kernel.org>

diff --git a/arch/arm/mach-imx/common.h b/arch/arm/mach-imx/common.h
index 5a800bfcec5b..5bf4a97ab241 100644
--- a/arch/arm/mach-imx/common.h
+++ b/arch/arm/mach-imx/common.h
@@ -110,6 +110,8 @@ void tzic_handle_irq(struct pt_regs *);
 
 extern void imx_enable_cpu(int cpu, bool enable);
 extern void imx_set_cpu_jump(int cpu, void *jump_addr);
+extern u32 imx_get_cpu_arg(int cpu);
+extern void imx_set_cpu_arg(int cpu, u32 arg);
 extern void v7_cpu_resume(void);
 extern u32 *pl310_get_save_ptr(void);
 #ifdef CONFIG_SMP

commit 469da62096e23adc755c1268b00b5fc7a214151b
Merge: 422796165088 88b62b915b0b
Author: Olof Johansson <olof@lixom.net>
Date:   Mon Feb 4 22:56:41 2013 -0800

    Merge tag 'v3.8-rc6' into next/soc
    
    Linux 3.8-rc6

commit 4227961650884a06757f80877d5dce0bddc723d4
Merge: ef4acb75a019 e5f9dec8ff5f
Author: Olof Johansson <olof@lixom.net>
Date:   Mon Feb 4 22:24:20 2013 -0800

    Merge tag 'imx6q-cpudile-3.9' of git://git.linaro.org/people/shawnguo/linux-2.6 into next/soc
    
    From Shawn Guo:
    imx6q cpuidle support for 3.9
    
     - It's based on imx-cleanup-3.9 to avoid conflicts.
    
    * tag 'imx6q-cpudile-3.9' of git://git.linaro.org/people/shawnguo/linux-2.6:
      ARM: imx6q: support WAIT mode using cpuidle
      ARM: imx: move imx6q_cpuidle_driver into a separate file
      ARM: imx: mask gpc interrupts initially
      ARM: imx: return zero in case next event gets a large increment
      ARM: imx: Remove mx508 support
      ARM: imx: Remove mach-mx51_3ds board
      ARM: imx: use debug_ll_io_init() for imx6q
      ARM: imx: remove unused imx6q_clock_map_io()
      ARM: mach-imx: Kconfig: Do not select Babbage for MACH_IMX51_DT
    
    Signed-off-by: Olof Johansson <olof@lixom.net>
    
    Still, two delete/change conflicts caused by imx/cleanup:
    
            arch/arm/mach-imx/mach-mx50_rdp.c
            arch/arm/mach-imx/mach-mx51_3ds.c

commit e5f9dec8ff5ff3f6254412abed1f68d758f6616b
Author: Shawn Guo <shawn.guo@linaro.org>
Date:   Tue Dec 4 22:55:15 2012 +0800

    ARM: imx6q: support WAIT mode using cpuidle
    
    Add WAIT mode (ARM core clock gating) support to imx6q cpuidle driver.
    As WAIT mode is broken on imx6q TO 1.0 and 1.1, it only enables the
    support for revision 1.2 with chicken bit set.
    
    Signed-off-by: Shawn Guo <shawn.guo@linaro.org>

diff --git a/arch/arm/mach-imx/common.h b/arch/arm/mach-imx/common.h
index 972c9f8cc97a..c04ec845e3a3 100644
--- a/arch/arm/mach-imx/common.h
+++ b/arch/arm/mach-imx/common.h
@@ -117,9 +117,11 @@ extern u32 *pl310_get_save_ptr(void);
 extern void v7_secondary_startup(void);
 extern void imx_scu_map_io(void);
 extern void imx_smp_prepare(void);
+extern void imx_scu_standby_enable(void);
 #else
 static inline void imx_scu_map_io(void) {}
 static inline void imx_smp_prepare(void) {}
+static inline void imx_scu_standby_enable(void) {}
 #endif
 extern void imx_enable_cpu(int cpu, bool enable);
 extern void imx_set_cpu_jump(int cpu, void *jump_addr);
@@ -129,6 +131,7 @@ extern void imx_gpc_init(void);
 extern void imx_gpc_pre_suspend(void);
 extern void imx_gpc_post_resume(void);
 extern int imx6q_set_lpm(enum mxc_cpu_pwr_mode mode);
+extern void imx6q_set_chicken_bit(void);
 
 extern void imx_cpu_die(unsigned int cpu);
 

commit 7356420cd34e40fe27bf26555b0bf3f2849a43dd
Author: Fabio Estevam <fabio.estevam@freescale.com>
Date:   Tue Jan 22 10:40:55 2013 -0200

    ARM: imx: Remove mx508 support
    
    Only mx508 based board is mach-mx50_rdp and it has been marked as BROKEN
    for several releases.
    
    mx508 currently lacks clock support.
    
    In case someone needs to add mx508 support back, then the recommended approach
    is to use device tree.
    
    Signed-off-by: Fabio Estevam <fabio.estevam@freescale.com>
    Signed-off-by: Shawn Guo <shawn.guo@linaro.org>

diff --git a/arch/arm/mach-imx/common.h b/arch/arm/mach-imx/common.h
index d67264097b32..972c9f8cc97a 100644
--- a/arch/arm/mach-imx/common.h
+++ b/arch/arm/mach-imx/common.h
@@ -21,7 +21,6 @@ extern void mx25_map_io(void);
 extern void mx27_map_io(void);
 extern void mx31_map_io(void);
 extern void mx35_map_io(void);
-extern void mx50_map_io(void);
 extern void mx51_map_io(void);
 extern void mx53_map_io(void);
 extern void imx1_init_early(void);
@@ -30,7 +29,6 @@ extern void imx25_init_early(void);
 extern void imx27_init_early(void);
 extern void imx31_init_early(void);
 extern void imx35_init_early(void);
-extern void imx50_init_early(void);
 extern void imx51_init_early(void);
 extern void imx53_init_early(void);
 extern void mxc_init_irq(void __iomem *);
@@ -41,7 +39,6 @@ extern void mx25_init_irq(void);
 extern void mx27_init_irq(void);
 extern void mx31_init_irq(void);
 extern void mx35_init_irq(void);
-extern void mx50_init_irq(void);
 extern void mx51_init_irq(void);
 extern void mx53_init_irq(void);
 extern void imx1_soc_init(void);
@@ -50,7 +47,6 @@ extern void imx25_soc_init(void);
 extern void imx27_soc_init(void);
 extern void imx31_soc_init(void);
 extern void imx35_soc_init(void);
-extern void imx50_soc_init(void);
 extern void imx51_soc_init(void);
 extern void imx51_init_late(void);
 extern void imx53_init_late(void);
@@ -109,7 +105,6 @@ void tzic_handle_irq(struct pt_regs *);
 #define imx27_handle_irq avic_handle_irq
 #define imx31_handle_irq avic_handle_irq
 #define imx35_handle_irq avic_handle_irq
-#define imx50_handle_irq tzic_handle_irq
 #define imx51_handle_irq tzic_handle_irq
 #define imx53_handle_irq tzic_handle_irq
 #define imx6q_handle_irq gic_handle_irq

commit 3e549a69469775ae26dd3bc34365e6da5bdbf18c
Author: Shawn Guo <shawn.guo@linaro.org>
Date:   Thu Jan 17 16:37:42 2013 +0800

    ARM: imx: use debug_ll_io_init() for imx6q
    
    Use debug_ll_io_init() to map low level debug port for imx6q, so that
    arch/arm/mach-imx/lluart.c can be removed.
    
    Signed-off-by: Shawn Guo <shawn.guo@linaro.org>

diff --git a/arch/arm/mach-imx/common.h b/arch/arm/mach-imx/common.h
index 7eb3bb2267b5..d67264097b32 100644
--- a/arch/arm/mach-imx/common.h
+++ b/arch/arm/mach-imx/common.h
@@ -116,11 +116,6 @@ void tzic_handle_irq(struct pt_regs *);
 
 extern void imx_enable_cpu(int cpu, bool enable);
 extern void imx_set_cpu_jump(int cpu, void *jump_addr);
-#ifdef CONFIG_DEBUG_LL
-extern void imx_lluart_map_io(void);
-#else
-static inline void imx_lluart_map_io(void) {}
-#endif
 extern void v7_cpu_resume(void);
 extern u32 *pl310_get_save_ptr(void);
 #ifdef CONFIG_SMP

commit cd4842f55861202d8b1d8b1ed035f22014f0812c
Author: Shawn Guo <shawn.guo@linaro.org>
Date:   Thu Jan 17 16:26:29 2013 +0800

    ARM: imx: remove unused imx6q_clock_map_io()
    
    imx6q_clock_map_io() becomes an empty function since imx6q clock driver
    is moved to common clock framework.  It's used nowhere now.  Remove it.
    
    Signed-off-by: Shawn Guo <shawn.guo@linaro.org>

diff --git a/arch/arm/mach-imx/common.h b/arch/arm/mach-imx/common.h
index 7191ab4434e5..7eb3bb2267b5 100644
--- a/arch/arm/mach-imx/common.h
+++ b/arch/arm/mach-imx/common.h
@@ -139,7 +139,6 @@ extern void imx_gpc_init(void);
 extern void imx_gpc_pre_suspend(void);
 extern void imx_gpc_post_resume(void);
 extern int imx6q_set_lpm(enum mxc_cpu_pwr_mode mode);
-extern void imx6q_clock_map_io(void);
 
 extern void imx_cpu_die(unsigned int cpu);
 

commit 837576642167d701f983e4def0d3936b514a28ae
Author: Shawn Guo <shawn.guo@linaro.org>
Date:   Mon Jan 14 14:08:50 2013 +0800

    ARM: imx: disable cpu in .cpu_kill hook
    
    It's buggy to disable the cpu that is being hot-unplugged in .cpu_die
    hook which runs on the cpu itself.  Instead, it should be done in
    .cpu_kill which runs on the thread (another cpu) that asks for shutting
    down the cpu.  Move imx_enable_cpu(cpu, false) call into .cpu_kill
    hook, and leave the cpu to be hot-unplugged in WFI within .cpu_die,
    so that we can get a more stable cpu hot-plug operation.
    
    Signed-off-by: Shawn Guo <shawn.guo@linaro.org>

diff --git a/arch/arm/mach-imx/common.h b/arch/arm/mach-imx/common.h
index 7191ab4434e5..fa36fb84ab19 100644
--- a/arch/arm/mach-imx/common.h
+++ b/arch/arm/mach-imx/common.h
@@ -142,6 +142,7 @@ extern int imx6q_set_lpm(enum mxc_cpu_pwr_mode mode);
 extern void imx6q_clock_map_io(void);
 
 extern void imx_cpu_die(unsigned int cpu);
+extern int imx_cpu_kill(unsigned int cpu);
 
 #ifdef CONFIG_PM
 extern void imx6q_pm_init(void);

commit 1d5cc604f42ff1acdec0407247b2f720135ba0c2
Author: Rob Herring <rob.herring@calxeda.com>
Date:   Tue Nov 20 19:52:32 2012 -0600

    ARM: remove mach .handle_irq for GIC users
    
    Now that the GIC initialization sets up the handle_arch_irq pointer, we
    can remove it for all machines and make it static.
    
    Signed-off-by: Rob Herring <rob.herring@calxeda.com>
    Cc: Russell King <linux@arm.linux.org.uk>
    Cc: Anton Vorontsov <avorontsov@mvista.com>
    Cc: Kyungmin Park <kyungmin.park@samsung.com>
    Cc: Sascha Hauer <kernel@pengutronix.de>
    Cc: David Brown <davidb@codeaurora.org>
    Cc: Daniel Walker <dwalker@fifo99.com>
    Cc: Bryan Huntsman <bryanh@codeaurora.org>
    Acked-by: Tony Lindgren <tony@atomide.com>
    Cc: Paul Mundt <lethal@linux-sh.org>
    Cc: Magnus Damm <magnus.damm@gmail.com>
    Cc: Dinh Nguyen <dinguyen@altera.com>
    Cc: Shiraz Hashim <shiraz.hashim@st.com>
    Acked-by: Stephen Warren <swarren@nvidia.com>
    Cc: Srinidhi Kasagar <srinidhi.kasagar@stericsson.com>
    Cc: Linus Walleij <linus.walleij@linaro.org>
    Acked-by: Viresh Kumar <viresh.kumar@linaro.org>
    Acked-by: Kukjin Kim <kgene.kim@samsung.com>
    Acked-by: Shawn Guo <shawn.guo@linaro.org>
    Acked-by: Olof Johansson <olof@lixom.net>
    Acked-by: Arnd Bergmann <arnd@arndb.de>

diff --git a/arch/arm/mach-imx/common.h b/arch/arm/mach-imx/common.h
index 7191ab4434e5..b0164da63b0c 100644
--- a/arch/arm/mach-imx/common.h
+++ b/arch/arm/mach-imx/common.h
@@ -112,7 +112,6 @@ void tzic_handle_irq(struct pt_regs *);
 #define imx50_handle_irq tzic_handle_irq
 #define imx51_handle_irq tzic_handle_irq
 #define imx53_handle_irq tzic_handle_irq
-#define imx6q_handle_irq gic_handle_irq
 
 extern void imx_enable_cpu(int cpu, bool enable);
 extern void imx_set_cpu_jump(int cpu, void *jump_addr);

commit ef4bac5532fcc678a77ee2b16836458f58407056
Author: Sascha Hauer <s.hauer@pengutronix.de>
Date:   Thu Sep 20 14:59:36 2012 +0200

    ARM i.MX25: Add devicetree support
    
    This adds a i.MX25 dt machine descriptor and changes the clock
    support to optionally initialize from dt.
    
    Signed-off-by: Sascha Hauer <s.hauer@pengutronix.de>
    Acked-by: Shawn Guo <shawn.guo@linaro.org>

diff --git a/arch/arm/mach-imx/common.h b/arch/arm/mach-imx/common.h
index ef8db6b34841..7191ab4434e5 100644
--- a/arch/arm/mach-imx/common.h
+++ b/arch/arm/mach-imx/common.h
@@ -66,6 +66,7 @@ extern int mx51_clocks_init(unsigned long ckil, unsigned long osc,
 			unsigned long ckih1, unsigned long ckih2);
 extern int mx53_clocks_init(unsigned long ckil, unsigned long osc,
 			unsigned long ckih1, unsigned long ckih2);
+extern int mx25_clocks_init_dt(void);
 extern int mx27_clocks_init_dt(void);
 extern int mx31_clocks_init_dt(void);
 extern int mx51_clocks_init_dt(void);

commit 69ac71d370b21cc52a2afd06f3a6d6d1da5edc75
Author: Shawn Guo <shawn.guo@linaro.org>
Date:   Thu Sep 20 14:21:16 2012 +0800

    ARM: imx: call mxc_device_init() in soc specific function
    
    mxc_device_init() is a core_initcall function used to register devices
    for mxc_aips_bus and mxc_ahb_bus, which are needed by gpio and dma
    device registration.
    
    Instead of being a core_initcall function, we have it called in soc
    specific initialization function before gpio and dma devices get
    registered, so that it will not be called for other platforms when
    we enable multi-platform support for imx.
    
    Signed-off-by: Shawn Guo <shawn.guo@linaro.org>

diff --git a/arch/arm/mach-imx/common.h b/arch/arm/mach-imx/common.h
index ead901814c0d..ef8db6b34841 100644
--- a/arch/arm/mach-imx/common.h
+++ b/arch/arm/mach-imx/common.h
@@ -79,6 +79,7 @@ extern void mxc_arch_reset_init(void __iomem *);
 extern int mx53_revision(void);
 extern int mx53_display_revision(void);
 extern void imx_set_aips(void __iomem *);
+extern int mxc_device_init(void);
 
 enum mxc_cpu_pwr_mode {
 	WAIT_CLOCKED,		/* wfi only */

commit e3372474cfa0dc016f10ec47baddbd1ed0abecf3
Author: Shawn Guo <shawn.guo@linaro.org>
Date:   Thu Sep 13 21:01:00 2012 +0800

    ARM: imx: include common.h rather than mach/common.h
    
    Rename mach-imx/include/mach/common.h to mach-imx/common.h and update
    all users to include common.h rather than mach/common.h.
    
    It also removes an unneeded inclusion to common.h in
    mach-imx/devices/devices.c.
    
    Signed-off-by: Shawn Guo <shawn.guo@linaro.org>
    Acked-by: Sascha Hauer <s.hauer@pengutronix.de>
    Acked-by: Arnd Bergmann <arnd@arndb.de>

diff --git a/arch/arm/mach-imx/common.h b/arch/arm/mach-imx/common.h
new file mode 100644
index 000000000000..ead901814c0d
--- /dev/null
+++ b/arch/arm/mach-imx/common.h
@@ -0,0 +1,162 @@
+/*
+ * Copyright 2004-2007 Freescale Semiconductor, Inc. All Rights Reserved.
+ */
+
+/*
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation.
+ */
+
+#ifndef __ASM_ARCH_MXC_COMMON_H__
+#define __ASM_ARCH_MXC_COMMON_H__
+
+struct platform_device;
+struct clk;
+enum mxc_cpu_pwr_mode;
+
+extern void mx1_map_io(void);
+extern void mx21_map_io(void);
+extern void mx25_map_io(void);
+extern void mx27_map_io(void);
+extern void mx31_map_io(void);
+extern void mx35_map_io(void);
+extern void mx50_map_io(void);
+extern void mx51_map_io(void);
+extern void mx53_map_io(void);
+extern void imx1_init_early(void);
+extern void imx21_init_early(void);
+extern void imx25_init_early(void);
+extern void imx27_init_early(void);
+extern void imx31_init_early(void);
+extern void imx35_init_early(void);
+extern void imx50_init_early(void);
+extern void imx51_init_early(void);
+extern void imx53_init_early(void);
+extern void mxc_init_irq(void __iomem *);
+extern void tzic_init_irq(void __iomem *);
+extern void mx1_init_irq(void);
+extern void mx21_init_irq(void);
+extern void mx25_init_irq(void);
+extern void mx27_init_irq(void);
+extern void mx31_init_irq(void);
+extern void mx35_init_irq(void);
+extern void mx50_init_irq(void);
+extern void mx51_init_irq(void);
+extern void mx53_init_irq(void);
+extern void imx1_soc_init(void);
+extern void imx21_soc_init(void);
+extern void imx25_soc_init(void);
+extern void imx27_soc_init(void);
+extern void imx31_soc_init(void);
+extern void imx35_soc_init(void);
+extern void imx50_soc_init(void);
+extern void imx51_soc_init(void);
+extern void imx51_init_late(void);
+extern void imx53_init_late(void);
+extern void epit_timer_init(void __iomem *base, int irq);
+extern void mxc_timer_init(void __iomem *, int);
+extern int mx1_clocks_init(unsigned long fref);
+extern int mx21_clocks_init(unsigned long lref, unsigned long fref);
+extern int mx25_clocks_init(void);
+extern int mx27_clocks_init(unsigned long fref);
+extern int mx31_clocks_init(unsigned long fref);
+extern int mx35_clocks_init(void);
+extern int mx51_clocks_init(unsigned long ckil, unsigned long osc,
+			unsigned long ckih1, unsigned long ckih2);
+extern int mx53_clocks_init(unsigned long ckil, unsigned long osc,
+			unsigned long ckih1, unsigned long ckih2);
+extern int mx27_clocks_init_dt(void);
+extern int mx31_clocks_init_dt(void);
+extern int mx51_clocks_init_dt(void);
+extern int mx53_clocks_init_dt(void);
+extern int mx6q_clocks_init(void);
+extern struct platform_device *mxc_register_gpio(char *name, int id,
+	resource_size_t iobase, resource_size_t iosize, int irq, int irq_high);
+extern void mxc_set_cpu_type(unsigned int type);
+extern void mxc_restart(char, const char *);
+extern void mxc_arch_reset_init(void __iomem *);
+extern int mx53_revision(void);
+extern int mx53_display_revision(void);
+extern void imx_set_aips(void __iomem *);
+
+enum mxc_cpu_pwr_mode {
+	WAIT_CLOCKED,		/* wfi only */
+	WAIT_UNCLOCKED,		/* WAIT */
+	WAIT_UNCLOCKED_POWER_OFF,	/* WAIT + SRPG */
+	STOP_POWER_ON,		/* just STOP */
+	STOP_POWER_OFF,		/* STOP + SRPG */
+};
+
+enum mx3_cpu_pwr_mode {
+	MX3_RUN,
+	MX3_WAIT,
+	MX3_DOZE,
+	MX3_SLEEP,
+};
+
+extern void mx3_cpu_lp_set(enum mx3_cpu_pwr_mode mode);
+extern void imx_print_silicon_rev(const char *cpu, int srev);
+
+void avic_handle_irq(struct pt_regs *);
+void tzic_handle_irq(struct pt_regs *);
+
+#define imx1_handle_irq avic_handle_irq
+#define imx21_handle_irq avic_handle_irq
+#define imx25_handle_irq avic_handle_irq
+#define imx27_handle_irq avic_handle_irq
+#define imx31_handle_irq avic_handle_irq
+#define imx35_handle_irq avic_handle_irq
+#define imx50_handle_irq tzic_handle_irq
+#define imx51_handle_irq tzic_handle_irq
+#define imx53_handle_irq tzic_handle_irq
+#define imx6q_handle_irq gic_handle_irq
+
+extern void imx_enable_cpu(int cpu, bool enable);
+extern void imx_set_cpu_jump(int cpu, void *jump_addr);
+#ifdef CONFIG_DEBUG_LL
+extern void imx_lluart_map_io(void);
+#else
+static inline void imx_lluart_map_io(void) {}
+#endif
+extern void v7_cpu_resume(void);
+extern u32 *pl310_get_save_ptr(void);
+#ifdef CONFIG_SMP
+extern void v7_secondary_startup(void);
+extern void imx_scu_map_io(void);
+extern void imx_smp_prepare(void);
+#else
+static inline void imx_scu_map_io(void) {}
+static inline void imx_smp_prepare(void) {}
+#endif
+extern void imx_enable_cpu(int cpu, bool enable);
+extern void imx_set_cpu_jump(int cpu, void *jump_addr);
+extern void imx_src_init(void);
+extern void imx_src_prepare_restart(void);
+extern void imx_gpc_init(void);
+extern void imx_gpc_pre_suspend(void);
+extern void imx_gpc_post_resume(void);
+extern int imx6q_set_lpm(enum mxc_cpu_pwr_mode mode);
+extern void imx6q_clock_map_io(void);
+
+extern void imx_cpu_die(unsigned int cpu);
+
+#ifdef CONFIG_PM
+extern void imx6q_pm_init(void);
+extern void imx51_pm_init(void);
+extern void imx53_pm_init(void);
+#else
+static inline void imx6q_pm_init(void) {}
+static inline void imx51_pm_init(void) {}
+static inline void imx53_pm_init(void) {}
+#endif
+
+#ifdef CONFIG_NEON
+extern int mx51_neon_fixup(void);
+#else
+static inline int mx51_neon_fixup(void) { return 0; }
+#endif
+
+extern struct smp_operations imx_smp_ops;
+
+#endif
