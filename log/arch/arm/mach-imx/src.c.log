commit 756931e058ec3dc625f85a09ae0c3143d2a6ef72
Author: Anson Huang <Anson.Huang@nxp.com>
Date:   Wed Feb 26 12:34:26 2020 +0800

    ARM: imx: Drop unnecessary src_base check
    
    src_base is already checked during src driver initialization, no
    need to check its availability again when using it.
    
    Signed-off-by: Anson Huang <Anson.Huang@nxp.com>
    Signed-off-by: Shawn Guo <shawnguo@kernel.org>

diff --git a/arch/arm/mach-imx/src.c b/arch/arm/mach-imx/src.c
index 0beea6d0217f..f52f371292ac 100644
--- a/arch/arm/mach-imx/src.c
+++ b/arch/arm/mach-imx/src.c
@@ -43,9 +43,6 @@ static int imx_src_reset_module(struct reset_controller_dev *rcdev,
 	int bit;
 	u32 val;
 
-	if (!src_base)
-		return -ENODEV;
-
 	if (sw_reset_idx >= ARRAY_SIZE(sw_reset_bits))
 		return -EINVAL;
 

commit fcaf20360a5992b88603271ab814a200e28d0088
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Mon May 27 08:55:08 2019 +0200

    treewide: Replace GPLv2 boilerplate/reference with SPDX - rule 159
    
    Based on 1 normalized pattern(s):
    
      the code contained herein is licensed under the gnu general public
      license you may obtain a copy of the gnu general public license
      version 2 or later at the following locations http www opensource
      org licenses gpl license html http www gnu org copyleft gpl html
    
    extracted by the scancode license scanner the SPDX license identifier
    
      GPL-2.0-or-later
    
    has been chosen to replace the boilerplate/reference in 161 file(s).
    
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Reviewed-by: Richard Fontana <rfontana@redhat.com>
    Reviewed-by: Allison Randal <allison@lohutok.net>
    Reviewed-by: Kate Stewart <kstewart@linuxfoundation.org>
    Cc: linux-spdx@vger.kernel.org
    Link: https://lkml.kernel.org/r/20190527070033.383790741@linutronix.de
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/arch/arm/mach-imx/src.c b/arch/arm/mach-imx/src.c
index 495d85d0fe7e..0beea6d0217f 100644
--- a/arch/arm/mach-imx/src.c
+++ b/arch/arm/mach-imx/src.c
@@ -1,13 +1,7 @@
+// SPDX-License-Identifier: GPL-2.0-or-later
 /*
  * Copyright 2011 Freescale Semiconductor, Inc.
  * Copyright 2011 Linaro Ltd.
- *
- * The code contained herein is licensed under the GNU General Public
- * License. You may obtain a copy of the GNU General Public License
- * Version 2 or later at the following locations:
- *
- * http://www.opensource.org/licenses/gpl-license.html
- * http://www.gnu.org/copyleft/gpl.html
  */
 
 #include <linux/init.h>

commit 64fc2a947a9873700929ec0ef02b4654a04e0476
Author: Florian Fainelli <f.fainelli@gmail.com>
Date:   Sun Jan 15 03:59:29 2017 +0100

    ARM: 8641/1: treewide: Replace uses of virt_to_phys with __pa_symbol
    
    All low-level PM/SMP code using virt_to_phys() should actually use
    __pa_symbol() against kernel symbols. Update code where relevant to move
    away from virt_to_phys().
    
    Acked-by: Russell King <rmk+kernel@armlinux.org.uk>
    Reviewed-by: Laura Abbott <labbott@redhat.com>
    Signed-off-by: Florian Fainelli <f.fainelli@gmail.com>
    Signed-off-by: Russell King <rmk+kernel@arm.linux.org.uk>

diff --git a/arch/arm/mach-imx/src.c b/arch/arm/mach-imx/src.c
index 70b083fe934a..495d85d0fe7e 100644
--- a/arch/arm/mach-imx/src.c
+++ b/arch/arm/mach-imx/src.c
@@ -99,7 +99,7 @@ void imx_enable_cpu(int cpu, bool enable)
 void imx_set_cpu_jump(int cpu, void *jump_addr)
 {
 	cpu = cpu_logical_map(cpu);
-	writel_relaxed(virt_to_phys(jump_addr),
+	writel_relaxed(__pa_symbol(jump_addr),
 		       src_base + SRC_GPR1 + cpu * 8);
 }
 

commit d2443b2e6167e80eca9a068d5ecc0e6f081b3ca4
Author: Philipp Zabel <p.zabel@pengutronix.de>
Date:   Thu Feb 25 10:44:41 2016 +0100

    ARM: imx: Make reset_control_ops const
    
    The imx_src_ops structure is never modified. Make it const.
    
    Signed-off-by: Philipp Zabel <p.zabel@pengutronix.de>
    Signed-off-by: Shawn Guo <shawnguo@kernel.org>

diff --git a/arch/arm/mach-imx/src.c b/arch/arm/mach-imx/src.c
index 45f7f4e0a447..70b083fe934a 100644
--- a/arch/arm/mach-imx/src.c
+++ b/arch/arm/mach-imx/src.c
@@ -73,7 +73,7 @@ static int imx_src_reset_module(struct reset_controller_dev *rcdev,
 	return 0;
 }
 
-static struct reset_control_ops imx_src_ops = {
+static const struct reset_control_ops imx_src_ops = {
 	.reset = imx_src_reset_module,
 };
 

commit b6e23bb63f28f0a8ffa7cf9824fa48000c08f9b2
Author: Shawn Guo <shawn.guo@linaro.org>
Date:   Mon Oct 28 16:37:12 2013 +0800

    ARM: imx: remove imx_src_prepare_restart() call
    
    There is ~10% possibility that the following emergency restart command
    fails to reboot imx6q.
    
    $ echo b > /proc/sysrq-trigger
    
    The IMX restart routine mxc_restart() assumes that it will always run on
    primary core, and will call imx_src_prepare_restart() to disable
    secondary cores in order to get them come to online in the following
    boot.  However, the assumption is only true for normal kernel_restart()
    case where migrate_to_reboot_cpu() will be called to migrate to primary
    core, but not necessarily true for emergency_restart() case.  So when
    emergency_restart() calls into mxc_restart() on any secondary core,
    system will hang immediately once imx_src_prepare_restart() is called
    to disabled secondary cores.  Since emergency_restart() is defined as a
    function that is safe to call in interrupt context, we cannot just call
    migrate_to_reboot_cpu() to fix the issue.
    
    Fortunately, we just found that the issue can be fixed at imx6q platform
    level.  We used to call imx_src_prepare_restart() to disable all
    secondary cores before resetting hardware.  Otherwise, the secondary
    will fail come to online in the reboot.  However, we recently found that
    after commit 6050d18 (ARM: imx: reset core along with enable/disable
    operation) comes to play, we do not need to reset the secondary cores
    any more.  That said, mxc_restart() now can run on any core to reboot
    the system, as long as we remove the imx_src_prepare_restart() call from
    mxc_restart().
    
    So let's simply remove imx_src_prepare_restart() call to fix the above
    emergency restart failure.
    
    Reported-by: Jiada Wang <jiada_wang@mentor.com>
    Signed-off-by: Shawn Guo <shawn.guo@linaro.org>

diff --git a/arch/arm/mach-imx/src.c b/arch/arm/mach-imx/src.c
index 4754373e7e7d..45f7f4e0a447 100644
--- a/arch/arm/mach-imx/src.c
+++ b/arch/arm/mach-imx/src.c
@@ -115,21 +115,6 @@ void imx_set_cpu_arg(int cpu, u32 arg)
 	writel_relaxed(arg, src_base + SRC_GPR1 + cpu * 8 + 4);
 }
 
-void imx_src_prepare_restart(void)
-{
-	u32 val;
-
-	/* clear enable bits of secondary cores */
-	spin_lock(&scr_lock);
-	val = readl_relaxed(src_base + SRC_SCR);
-	val &= ~(0x7 << BP_SRC_SCR_CORE1_ENABLE);
-	writel_relaxed(val, src_base + SRC_SCR);
-	spin_unlock(&scr_lock);
-
-	/* clear persistent entry register of primary core */
-	writel_relaxed(0, src_base + SRC_GPR1);
-}
-
 void __init imx_src_init(void)
 {
 	struct device_node *np;

commit 6050d181a4fd4abb745506a6e565d55f1f9df964
Author: Shawn Guo <shawn.guo@linaro.org>
Date:   Wed Oct 9 15:54:31 2013 +0800

    ARM: imx: reset core along with enable/disable operation
    
    From hotplug stress test result, resetting core during enable/disable
    operation can improve cpu hotplug stability.  So let's set
    SRC reset bit in imx_enable_cpu() for the core when its enable bit is
    accessed.
    
    Signed-off-by: Shawn Guo <shawn.guo@linaro.org>

diff --git a/arch/arm/mach-imx/src.c b/arch/arm/mach-imx/src.c
index 10a6b1a8c5ac..4754373e7e7d 100644
--- a/arch/arm/mach-imx/src.c
+++ b/arch/arm/mach-imx/src.c
@@ -91,6 +91,7 @@ void imx_enable_cpu(int cpu, bool enable)
 	spin_lock(&scr_lock);
 	val = readl_relaxed(src_base + SRC_SCR);
 	val = enable ? val | mask : val & ~mask;
+	val |= 1 << (BP_SRC_SCR_CORE1_RST + cpu - 1);
 	writel_relaxed(val, src_base + SRC_SCR);
 	spin_unlock(&scr_lock);
 }

commit fcba914542082b272f31c8e4c40000b88ed3208d
Merge: a8c4b90e670b 5c5f0421a8ee
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Tue May 7 11:02:18 2013 -0700

    Merge tag 'soc-for-linus-3' of git://git.kernel.org/pub/scm/linux/kernel/git/arm/arm-soc
    
    Pull ARM SoC platform updates (part 3) from Arnd Bergmann:
     "This is the third and smallest of the SoC specific updates.  Changes
      include:
    
       - SMP support for the Xilinx zynq platform
       - Smaller imx changes
       - LPAE support for mvebu
       - Moving the orion5x, kirkwood, dove and mvebu platforms to a common
         "mbus" driver for their internal devices.
    
      It would be good to get feedback on the location of the "mbus" driver.
      Since this is used on multiple platforms may potentially get shared
      with other architectures (powerpc and arm64), it was moved to
      drivers/bus/.  We expect other similar drivers to get moved to the
      same place in order to avoid creating more top-level directories under
      drivers/ or cluttering up the messy drivers/misc/ even more."
    
    * tag 'soc-for-linus-3' of git://git.kernel.org/pub/scm/linux/kernel/git/arm/arm-soc: (50 commits)
      ARM: imx: reset_controller may be disabled
      ARM: mvebu: Align the internal registers virtual base to support LPAE
      ARM: mvebu: Limit the DMA zone when LPAE is selected
      arm: plat-orion: remove addr-map code
      arm: mach-mv78xx0: convert to use the mvebu-mbus driver
      arm: mach-orion5x: convert to use mvebu-mbus driver
      arm: mach-dove: convert to use mvebu-mbus driver
      arm: mach-kirkwood: convert to use mvebu-mbus driver
      arm: mach-mvebu: convert to use mvebu-mbus driver
      ARM i.MX53: set CLK_SET_RATE_PARENT flag on the tve_ext_sel clock
      ARM i.MX53: tve_di clock is not part of the CCM, but of TVE
      ARM i.MX53: make tve_ext_sel propagate rate change to PLL
      ARM i.MX53: Remove unused tve_gate clkdev entry
      ARM i.MX5: Remove tve_sel clock from i.MX53 clock tree
      ARM: i.MX5: Add PATA and SRTC clocks
      ARM: imx: do not bring up unavailable cores
      ARM: imx: add initial imx6dl support
      ARM: imx1: mm: add call to mxc_device_init
      ARM: imx_v4_v5_defconfig: Add CONFIG_GPIO_SYSFS
      ARM: imx_v6_v7_defconfig: Select CONFIG_PERF_EVENTS
      ...

commit 5c5f0421a8eea5bdaba9b9313c5bb4833aeb39cd
Author: Arnd Bergmann <arnd@arndb.de>
Date:   Tue Apr 30 14:58:31 2013 +0200

    ARM: imx: reset_controller may be disabled
    
    The new reset controller API is optional, so if that is disabled,
    we must not call it from platform code.
    
    arch/arm/mach-imx/built-in.o: In function
     `imx_src_init': /git/arm-soc/arch/arm/mach-imx/src.c:144:
            undefined reference to `reset_controller_register'
    
    Cc: Sascha Hauer <kernel@pengutronix.de>
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>

diff --git a/arch/arm/mach-imx/src.c b/arch/arm/mach-imx/src.c
index dec641108b54..4e0236c89c5e 100644
--- a/arch/arm/mach-imx/src.c
+++ b/arch/arm/mach-imx/src.c
@@ -138,7 +138,8 @@ void __init imx_src_init(void)
 	WARN_ON(!src_base);
 
 	imx_reset_controller.of_node = np;
-	reset_controller_register(&imx_reset_controller);
+	if (IS_ENABLED(CONFIG_RESET_CONTROLLER))
+		reset_controller_register(&imx_reset_controller);
 
 	/*
 	 * force warm reset sources to generate cold reset

commit dfab34aa61a0f8c14a67d7b4c1dae28e57ba592d
Merge: a7726350e064 88cf9c5e4947
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Thu May 2 09:28:03 2013 -0700

    Merge tag 'dt-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/arm/arm-soc
    
    Pull ARM SoC device-tree updates from Olof Johansson:
     "Part 1 of device-tree updates for 3.10.  The bulk of the churn in this
      branch is due to i.MX moving from C-defined pin control over to device
      tree, which is a one-time conversion that will allow greater
      flexibility down the road.
    
      Besides that, there's PCI-e bindings for Marvell mvebu platforms and a
      handful of cleanups to tegra due to the new include file functionality
      of the device tree compiler"
    
    * tag 'dt-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/arm/arm-soc: (113 commits)
      arm: mvebu: PCIe Device Tree informations for Armada XP GP
      arm: mvebu: PCIe Device Tree informations for Armada 370 DB
      arm: mvebu: PCIe Device Tree informations for Armada 370 Mirabox
      arm: mvebu: PCIe Device Tree informations for Armada XP DB
      arm: mvebu: PCIe Device Tree informations for OpenBlocks AX3-4
      arm: mvebu: add PCIe Device Tree informations for Armada XP
      arm: mvebu: add PCIe Device Tree informations for Armada 370
      ARM: sunxi: unify osc24M_fixed and osc24M
      arm: vt8500: Add SDHC support to WM8505 DT
      ARM: dts: Add a 64 bits version of the skeleton device tree
      ARM: mvebu: Add Device Bus and CFI flash memory support to defconfig
      ARM: mvebu: Add support for NOR flash device on Openblocks AX3 board
      ARM: mvebu: Add support for NOR flash device on Armada XP-GP board
      ARM: mvebu: Add Device Bus support for Armada 370/XP SoC
      ARM: dts: imx6dl-wandboard: Add USB Host support
      ARM: dts: imx51 cpu node
      ARM: dts: Add missing imx27-phytec-phycore dtb target
      ARM: dts: Add NFC support for i.MX27 Phytec PCM038 module
      ARM: i.MX51: Add PATA support
      ARM: dts: Add initial support for Wandboard Dual-Lite
      ...

commit 4d26aa305414dbb33b3c32fb205b68004cda8ffc
Merge: 600fe9751aeb e74fc973b6e5
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Thu May 2 08:56:55 2013 -0700

    Merge tag 'fixes-nc-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/arm/arm-soc
    
    Pull ARM SoC non-critical fixes from Olof Johansson:
     "Here is a collection of fixes (and some intermixed cleanups) that were
      considered less important and thus not included in the later parts of
      the 3.9-rc cycle.
    
      It's a bit all over the map, contents wise.  A series of ux500 fixes
      and cleanups, a bunch of various fixes for OMAP and tegra, and some
      for Freescale i.MX and even Qualcomm MSM.
    
      Note that there's also a patch on this branch to globally turn off
      -Wmaybe-uninitialized when building with -Os.  It's been posted
      several times by Arnd and no dissent was raised, but nobody seemed
      interested to pick it up.  So here it is, as the topmost patch."
    
    * tag 'fixes-nc-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/arm/arm-soc: (70 commits)
      Turn off -Wmaybe-uninitialized when building with -Os
      ARM: orion5x: include linux/cpu.h
      ARM: tegra: call cpu_do_idle from C code
      ARM: u300: fix ages old copy/paste bug
      ARM: OMAP2+: add dependencies on ARCH_MULTI_V6/V7
      ARM: tegra: solve adr range issue with THUMB2_KERNEL enabled
      ARM: tegra: fix relocation truncated error when THUMB2_KERNEL enabled
      ARM: tegra: fix build error when THUMB2_KERNEL enabled
      ARM: msm: Fix uncompess.h tx underrun check
      ARM: vexpress: Remove A9 PMU compatible values for non-A9 platforms
      ARM: cpuimx27 and mbimx27: prepend CONFIG_ to Kconfig macro
      ARM: OMAP2+: fix typo "CONFIG_BRIDGE_DVFS"
      ARM: OMAP1: remove "config MACH_OMAP_HTCWIZARD"
      ARM: mach-imx: mach-imx6q: Fix sparse warnings
      ARM: mach-imx: src: Include "common.h
      ARM: mach-imx: gpc: Include "common.h"
      ARM: mach-imx: avic: Staticize *avic_base
      ARM: mach-imx: tzic: Staticize *tzic_base
      ARM: mach-imx: clk: Include "clk.h"
      ARM: mach-imx: clk-busy: Staticize clk_busy_mux_ops
      ...

commit 02985b94638b4de3ef9f2eb2ac5befe5bab12c26
Author: Philipp Zabel <p.zabel@pengutronix.de>
Date:   Thu Mar 28 17:35:19 2013 +0100

    ARM i.MX6q: Add GPU, VPU, IPU, and OpenVG resets to System Reset Controller (SRC)
    
    The SRC has auto-deasserting reset bits that control reset lines to
    the GPU, VPU, IPU, and OpenVG IP modules. This patch adds a reset
    controller that can be controlled by those devices using the
    reset controller API.
    
    Signed-off-by: Philipp Zabel <p.zabel@pengutronix.de>
    Reviewed-by: Stephen Warren <swarren@nvidia.com>
    Reviewed-by: Marek Vasut <marex@denx.de>
    Reviewed-by: Pavel Machek <pavel@ucw.cz>
    Signed-off-by: Shawn Guo <shawn.guo@linaro.org>

diff --git a/arch/arm/mach-imx/src.c b/arch/arm/mach-imx/src.c
index 09a742f8c7ab..dec641108b54 100644
--- a/arch/arm/mach-imx/src.c
+++ b/arch/arm/mach-imx/src.c
@@ -14,16 +14,72 @@
 #include <linux/io.h>
 #include <linux/of.h>
 #include <linux/of_address.h>
+#include <linux/reset-controller.h>
 #include <linux/smp.h>
 #include <asm/smp_plat.h>
 
 #define SRC_SCR				0x000
 #define SRC_GPR1			0x020
 #define BP_SRC_SCR_WARM_RESET_ENABLE	0
+#define BP_SRC_SCR_SW_GPU_RST		1
+#define BP_SRC_SCR_SW_VPU_RST		2
+#define BP_SRC_SCR_SW_IPU1_RST		3
+#define BP_SRC_SCR_SW_OPEN_VG_RST	4
+#define BP_SRC_SCR_SW_IPU2_RST		12
 #define BP_SRC_SCR_CORE1_RST		14
 #define BP_SRC_SCR_CORE1_ENABLE		22
 
 static void __iomem *src_base;
+static DEFINE_SPINLOCK(scr_lock);
+
+static const int sw_reset_bits[5] = {
+	BP_SRC_SCR_SW_GPU_RST,
+	BP_SRC_SCR_SW_VPU_RST,
+	BP_SRC_SCR_SW_IPU1_RST,
+	BP_SRC_SCR_SW_OPEN_VG_RST,
+	BP_SRC_SCR_SW_IPU2_RST
+};
+
+static int imx_src_reset_module(struct reset_controller_dev *rcdev,
+		unsigned long sw_reset_idx)
+{
+	unsigned long timeout;
+	unsigned long flags;
+	int bit;
+	u32 val;
+
+	if (!src_base)
+		return -ENODEV;
+
+	if (sw_reset_idx >= ARRAY_SIZE(sw_reset_bits))
+		return -EINVAL;
+
+	bit = 1 << sw_reset_bits[sw_reset_idx];
+
+	spin_lock_irqsave(&scr_lock, flags);
+	val = readl_relaxed(src_base + SRC_SCR);
+	val |= bit;
+	writel_relaxed(val, src_base + SRC_SCR);
+	spin_unlock_irqrestore(&scr_lock, flags);
+
+	timeout = jiffies + msecs_to_jiffies(1000);
+	while (readl(src_base + SRC_SCR) & bit) {
+		if (time_after(jiffies, timeout))
+			return -ETIME;
+		cpu_relax();
+	}
+
+	return 0;
+}
+
+static struct reset_control_ops imx_src_ops = {
+	.reset = imx_src_reset_module,
+};
+
+static struct reset_controller_dev imx_reset_controller = {
+	.ops = &imx_src_ops,
+	.nr_resets = ARRAY_SIZE(sw_reset_bits),
+};
 
 void imx_enable_cpu(int cpu, bool enable)
 {
@@ -31,9 +87,11 @@ void imx_enable_cpu(int cpu, bool enable)
 
 	cpu = cpu_logical_map(cpu);
 	mask = 1 << (BP_SRC_SCR_CORE1_ENABLE + cpu - 1);
+	spin_lock(&scr_lock);
 	val = readl_relaxed(src_base + SRC_SCR);
 	val = enable ? val | mask : val & ~mask;
 	writel_relaxed(val, src_base + SRC_SCR);
+	spin_unlock(&scr_lock);
 }
 
 void imx_set_cpu_jump(int cpu, void *jump_addr)
@@ -60,9 +118,11 @@ void imx_src_prepare_restart(void)
 	u32 val;
 
 	/* clear enable bits of secondary cores */
+	spin_lock(&scr_lock);
 	val = readl_relaxed(src_base + SRC_SCR);
 	val &= ~(0x7 << BP_SRC_SCR_CORE1_ENABLE);
 	writel_relaxed(val, src_base + SRC_SCR);
+	spin_unlock(&scr_lock);
 
 	/* clear persistent entry register of primary core */
 	writel_relaxed(0, src_base + SRC_GPR1);
@@ -77,11 +137,16 @@ void __init imx_src_init(void)
 	src_base = of_iomap(np, 0);
 	WARN_ON(!src_base);
 
+	imx_reset_controller.of_node = np;
+	reset_controller_register(&imx_reset_controller);
+
 	/*
 	 * force warm reset sources to generate cold reset
 	 * for a more reliable restart
 	 */
+	spin_lock(&scr_lock);
 	val = readl_relaxed(src_base + SRC_SCR);
 	val &= ~(1 << BP_SRC_SCR_WARM_RESET_ENABLE);
 	writel_relaxed(val, src_base + SRC_SCR);
+	spin_unlock(&scr_lock);
 }

commit bd3d924d71a45b88941b50ddaa77aadb2ae4ded7
Author: Philipp Zabel <p.zabel@pengutronix.de>
Date:   Thu Mar 28 17:35:22 2013 +0100

    ARM i.MX5: Add System Reset Controller (SRC) support for i.MX51 and i.MX53
    
    The SRC in i.MX51 and i.MX53 is similar to the one in i.MX6q minus
    the IPU2 reset line and multi core CPU reset/enable bits.
    
    Signed-off-by: Philipp Zabel <p.zabel@pengutronix.de>
    Reviewed-by: Stephen Warren <swarren@nvidia.com>
    Reviewed-by: Marek Vasut <marex@denx.de>
    Reviewed-by: Pavel Machek <pavel@ucw.cz>
    Signed-off-by: Shawn Guo <shawn.guo@linaro.org>

diff --git a/arch/arm/mach-imx/src.c b/arch/arm/mach-imx/src.c
index e15f1555c59b..cef5ca7c464d 100644
--- a/arch/arm/mach-imx/src.c
+++ b/arch/arm/mach-imx/src.c
@@ -61,7 +61,9 @@ void __init imx_src_init(void)
 	struct device_node *np;
 	u32 val;
 
-	np = of_find_compatible_node(NULL, NULL, "fsl,imx6q-src");
+	np = of_find_compatible_node(NULL, NULL, "fsl,imx51-src");
+	if (!np)
+		return;
 	src_base = of_iomap(np, 0);
 	WARN_ON(!src_base);
 

commit 0989857625ba9d446916495f619435a3b42e7be4
Author: Fabio Estevam <fabio.estevam@freescale.com>
Date:   Mon Mar 25 09:20:43 2013 -0300

    ARM: mach-imx: src: Include "common.h
    
    Fix the following sparse warnings:
    
    arch/arm/mach-imx/src.c:28:6: warning: symbol 'imx_enable_cpu' was not declared. Should it be static?
    arch/arm/mach-imx/src.c:39:6: warning: symbol 'imx_set_cpu_jump' was not declared. Should it be static?
    arch/arm/mach-imx/src.c:46:6: warning: symbol 'imx_src_prepare_restart' was not declared. Should it be static?
    arch/arm/mach-imx/src.c:59:13: warning: symbol 'imx_src_init' was not declared. Should it be static?
    
    Signed-off-by: Fabio Estevam <fabio.estevam@freescale.com>
    Signed-off-by: Shawn Guo <shawn.guo@linaro.org>

diff --git a/arch/arm/mach-imx/src.c b/arch/arm/mach-imx/src.c
index e15f1555c59b..648634d9b6c3 100644
--- a/arch/arm/mach-imx/src.c
+++ b/arch/arm/mach-imx/src.c
@@ -16,6 +16,7 @@
 #include <linux/of_address.h>
 #include <linux/smp.h>
 #include <asm/smp_plat.h>
+#include "common.h"
 
 #define SRC_SCR				0x000
 #define SRC_GPR1			0x020

commit 2f3edfd7e27ad4206acbc2ae99c9df5f46353024
Author: Shawn Guo <shawn.guo@linaro.org>
Date:   Tue Mar 26 16:46:07 2013 +0800

    ARM: imx: fix sync issue between imx_cpu_die and imx_cpu_kill
    
    There is a sync issue with hotplug operation.  It's possible that when
    imx_cpu_kill gets running on primary core, the imx_cpu_die execution
    on the core which is to be killed hasn't been finished yet.  The problem
    will very likely be hit when running suspend without no_console_suspend
    setting on kernel cmdline.
    
    It uses cpu jumping argument register to sync imx_cpu_die and
    imx_cpu_kill.  The register will be set in imx_cpu_die and imx_cpu_kill
    will wait for the register being cleared to actually kill the cpu.
    
    Signed-off-by: Shawn Guo <shawn.guo@linaro.org>
    Cc: <stable@vger.kernel.org>

diff --git a/arch/arm/mach-imx/src.c b/arch/arm/mach-imx/src.c
index e15f1555c59b..09a742f8c7ab 100644
--- a/arch/arm/mach-imx/src.c
+++ b/arch/arm/mach-imx/src.c
@@ -43,6 +43,18 @@ void imx_set_cpu_jump(int cpu, void *jump_addr)
 		       src_base + SRC_GPR1 + cpu * 8);
 }
 
+u32 imx_get_cpu_arg(int cpu)
+{
+	cpu = cpu_logical_map(cpu);
+	return readl_relaxed(src_base + SRC_GPR1 + cpu * 8 + 4);
+}
+
+void imx_set_cpu_arg(int cpu, u32 arg)
+{
+	cpu = cpu_logical_map(cpu);
+	writel_relaxed(arg, src_base + SRC_GPR1 + cpu * 8 + 4);
+}
+
 void imx_src_prepare_restart(void)
 {
 	u32 val;

commit eb50439b92b6298bf209a982f295ba9c0f7cb30b
Author: Will Deacon <will.deacon@arm.com>
Date:   Fri Jan 20 12:01:12 2012 +0100

    ARM: 7293/1: logical_cpu_map: decouple CPU mapping from SMP
    
    It turns out that the logical CPU mapping is useful even when !CONFIG_SMP
    for manipulation of devices like interrupt and power controllers when
    running a UP kernel on a CPU other than 0. This can happen when kexecing
    a UP image from an SMP kernel.
    
    In the future, multi-cluster systems running AMP configurations will
    require something similar for mapping cluster IDs, so it makes sense to
    decouple this logic in preparation for this support.
    
    Acked-by: Yang Bai <hamo.by@gmail.com>
    Acked-by: Marc Zyngier <marc.zyngier@arm.com>
    Reported-by: Joerg Roedel <joerg.roedel@amd.com>
    Signed-off-by: Will Deacon <will.deacon@arm.com>
    Signed-off-by: Russell King <rmk+kernel@arm.linux.org.uk>

diff --git a/arch/arm/mach-imx/src.c b/arch/arm/mach-imx/src.c
index 29bd1243781e..e15f1555c59b 100644
--- a/arch/arm/mach-imx/src.c
+++ b/arch/arm/mach-imx/src.c
@@ -15,6 +15,7 @@
 #include <linux/of.h>
 #include <linux/of_address.h>
 #include <linux/smp.h>
+#include <asm/smp_plat.h>
 
 #define SRC_SCR				0x000
 #define SRC_GPR1			0x020
@@ -24,10 +25,6 @@
 
 static void __iomem *src_base;
 
-#ifndef CONFIG_SMP
-#define cpu_logical_map(cpu)		0
-#endif
-
 void imx_enable_cpu(int cpu, bool enable)
 {
 	u32 mask, val;

commit 8b0f6d12de91345190f234edba781b2fd03257b6
Merge: 916e5ebb9f5a efb963dcd985
Author: Olof Johansson <olof@lixom.net>
Date:   Mon Jan 16 22:46:06 2012 -0800

    Merge branch 'fixes-for-arm-soc' of git://sources.calxeda.com/kernel/linux into fixes
    
    * 'fixes-for-arm-soc' of git://sources.calxeda.com/kernel/linux:
      ARM: make BSYM macro assembly only
      ARM: highbank: remove incorrect BSYM usage
      ARM: imx: remove incorrect BSYM usage
      ARM: exynos: remove incorrect BSYM usage
      ARM: ux500: add missing ENDPROC to headsmp.S
      ARM: msm: Add missing ENDPROC to headsmp.S
      ARM: versatile: Add missing ENDPROC to headsmp.S

commit 0a60cb14a58696100481674682eb07ffb2a8eac7
Author: Rob Herring <rob.herring@calxeda.com>
Date:   Mon Jan 9 15:41:40 2012 -0600

    ARM: imx: remove incorrect BSYM usage
    
    BSYM macro is only needed for assembly files and its usage in c files is
    wrong, so remove it. The linker will correctly set bit 0 for Thumb2
    kernels.
    
    Signed-off-by: Rob Herring <rob.herring@calxeda.com>
    Cc: Sascha Hauer <kernel@pengutronix.de>
    Acked-by: Shawn Guo <shawn.guo@linaro.org>
    Acked-by: Dave Martin <dave.martin@linaro.org>

diff --git a/arch/arm/mach-imx/src.c b/arch/arm/mach-imx/src.c
index a8e33681b732..74a4b5d3d1c0 100644
--- a/arch/arm/mach-imx/src.c
+++ b/arch/arm/mach-imx/src.c
@@ -15,7 +15,6 @@
 #include <linux/of.h>
 #include <linux/of_address.h>
 #include <linux/smp.h>
-#include <asm/unified.h>
 
 #define SRC_SCR				0x000
 #define SRC_GPR1			0x020
@@ -42,7 +41,7 @@ void imx_enable_cpu(int cpu, bool enable)
 void imx_set_cpu_jump(int cpu, void *jump_addr)
 {
 	cpu = cpu_logical_map(cpu);
-	writel_relaxed(BSYM(virt_to_phys(jump_addr)),
+	writel_relaxed(virt_to_phys(jump_addr),
 		       src_base + SRC_GPR1 + cpu * 8);
 }
 

commit 0575fb754dbfc32a01f297e778533340a533ec68
Author: Shawn Guo <shawn.guo@linaro.org>
Date:   Fri Dec 9 00:51:26 2011 +0100

    ARM: 7198/1: arm/imx6: add restart support for imx6q
    
    The restart support was missed from the initial imx6q submission.
    The mxc_restart() does not work for imx6q.  Instead, this patch adds
    the restart for imx6q.
    
    Signed-off-by: Shawn Guo <shawn.guo@linaro.org>
    Signed-off-by: Russell King <rmk+kernel@arm.linux.org.uk>

diff --git a/arch/arm/mach-imx/src.c b/arch/arm/mach-imx/src.c
index a8e33681b732..4bde04f99e38 100644
--- a/arch/arm/mach-imx/src.c
+++ b/arch/arm/mach-imx/src.c
@@ -19,6 +19,7 @@
 
 #define SRC_SCR				0x000
 #define SRC_GPR1			0x020
+#define BP_SRC_SCR_WARM_RESET_ENABLE	0
 #define BP_SRC_SCR_CORE1_RST		14
 #define BP_SRC_SCR_CORE1_ENABLE		22
 
@@ -46,11 +47,33 @@ void imx_set_cpu_jump(int cpu, void *jump_addr)
 		       src_base + SRC_GPR1 + cpu * 8);
 }
 
+void imx_src_prepare_restart(void)
+{
+	u32 val;
+
+	/* clear enable bits of secondary cores */
+	val = readl_relaxed(src_base + SRC_SCR);
+	val &= ~(0x7 << BP_SRC_SCR_CORE1_ENABLE);
+	writel_relaxed(val, src_base + SRC_SCR);
+
+	/* clear persistent entry register of primary core */
+	writel_relaxed(0, src_base + SRC_GPR1);
+}
+
 void __init imx_src_init(void)
 {
 	struct device_node *np;
+	u32 val;
 
 	np = of_find_compatible_node(NULL, NULL, "fsl,imx6q-src");
 	src_base = of_iomap(np, 0);
 	WARN_ON(!src_base);
+
+	/*
+	 * force warm reset sources to generate cold reset
+	 * for a more reliable restart
+	 */
+	val = readl_relaxed(src_base + SRC_SCR);
+	val &= ~(1 << BP_SRC_SCR_WARM_RESET_ENABLE);
+	writel_relaxed(val, src_base + SRC_SCR);
 }

commit eaa142ca3dee1478aca1a645bb0e5a249a33241a
Author: Will Deacon <will.deacon@arm.com>
Date:   Tue Aug 9 12:24:07 2011 +0100

    ARM: mach-imx: convert logical CPU numbers to physical numbers
    
    This patch uses the new cpu_logical_map() macro for converting logical
    CPU numbers into physical numbers when releasing CPUs during the SMP
    boot and CPU hotplug paths.
    
    Cc: Sascha Hauer <s.hauer@pengutronix.de>
    Acked-by: Shawn Guo <shawn.guo@linaro.org>
    Signed-off-by: Will Deacon <will.deacon@arm.com>

diff --git a/arch/arm/mach-imx/src.c b/arch/arm/mach-imx/src.c
index 36cacbd0dcc2..a8e33681b732 100644
--- a/arch/arm/mach-imx/src.c
+++ b/arch/arm/mach-imx/src.c
@@ -14,6 +14,7 @@
 #include <linux/io.h>
 #include <linux/of.h>
 #include <linux/of_address.h>
+#include <linux/smp.h>
 #include <asm/unified.h>
 
 #define SRC_SCR				0x000
@@ -23,10 +24,15 @@
 
 static void __iomem *src_base;
 
+#ifndef CONFIG_SMP
+#define cpu_logical_map(cpu)		0
+#endif
+
 void imx_enable_cpu(int cpu, bool enable)
 {
 	u32 mask, val;
 
+	cpu = cpu_logical_map(cpu);
 	mask = 1 << (BP_SRC_SCR_CORE1_ENABLE + cpu - 1);
 	val = readl_relaxed(src_base + SRC_SCR);
 	val = enable ? val | mask : val & ~mask;
@@ -35,6 +41,7 @@ void imx_enable_cpu(int cpu, bool enable)
 
 void imx_set_cpu_jump(int cpu, void *jump_addr)
 {
+	cpu = cpu_logical_map(cpu);
 	writel_relaxed(BSYM(virt_to_phys(jump_addr)),
 		       src_base + SRC_GPR1 + cpu * 8);
 }

commit 9fbbe6890c88aa332efe61d5894108dd8b932530
Author: Shawn Guo <shawn.guo@linaro.org>
Date:   Tue Sep 6 14:39:44 2011 +0800

    arm/imx6q: add core drivers clock, gpc, mmdc and src
    
    It adds a number of core drivers support for imx6q, including clock,
    General Power Controller (gpc), Multi Mode DDR Controller(mmdc) and
    System Reset Controller (src).
    
    Signed-off-by: Ranjani Vaidyanathan <ra5478@freescale.com>
    Signed-off-by: Shawn Guo <shawn.guo@linaro.org>

diff --git a/arch/arm/mach-imx/src.c b/arch/arm/mach-imx/src.c
new file mode 100644
index 000000000000..36cacbd0dcc2
--- /dev/null
+++ b/arch/arm/mach-imx/src.c
@@ -0,0 +1,49 @@
+/*
+ * Copyright 2011 Freescale Semiconductor, Inc.
+ * Copyright 2011 Linaro Ltd.
+ *
+ * The code contained herein is licensed under the GNU General Public
+ * License. You may obtain a copy of the GNU General Public License
+ * Version 2 or later at the following locations:
+ *
+ * http://www.opensource.org/licenses/gpl-license.html
+ * http://www.gnu.org/copyleft/gpl.html
+ */
+
+#include <linux/init.h>
+#include <linux/io.h>
+#include <linux/of.h>
+#include <linux/of_address.h>
+#include <asm/unified.h>
+
+#define SRC_SCR				0x000
+#define SRC_GPR1			0x020
+#define BP_SRC_SCR_CORE1_RST		14
+#define BP_SRC_SCR_CORE1_ENABLE		22
+
+static void __iomem *src_base;
+
+void imx_enable_cpu(int cpu, bool enable)
+{
+	u32 mask, val;
+
+	mask = 1 << (BP_SRC_SCR_CORE1_ENABLE + cpu - 1);
+	val = readl_relaxed(src_base + SRC_SCR);
+	val = enable ? val | mask : val & ~mask;
+	writel_relaxed(val, src_base + SRC_SCR);
+}
+
+void imx_set_cpu_jump(int cpu, void *jump_addr)
+{
+	writel_relaxed(BSYM(virt_to_phys(jump_addr)),
+		       src_base + SRC_GPR1 + cpu * 8);
+}
+
+void __init imx_src_init(void)
+{
+	struct device_node *np;
+
+	np = of_find_compatible_node(NULL, NULL, "fsl,imx6q-src");
+	src_base = of_iomap(np, 0);
+	WARN_ON(!src_base);
+}
