commit aa03319f28402fa7613d313b411490952b3f9bd4
Author: Geert Uytterhoeven <geert+renesas@glider.be>
Date:   Fri May 18 14:48:54 2018 +0200

    ARM: shmobile: Remove unused shmobile_smp_init_fallback_ops()
    
    shmobile_smp_init_fallback_ops() became unused after removing
    SoC-specific machine definitions that provided legacy SMP initialization
    fallbacks.
    
    Signed-off-by: Geert Uytterhoeven <geert+renesas@glider.be>
    Signed-off-by: Simon Horman <horms+renesas@verge.net.au>

diff --git a/arch/arm/mach-shmobile/common.h b/arch/arm/mach-shmobile/common.h
index 2109f123bdfb..3ac4b36b5c2b 100644
--- a/arch/arm/mach-shmobile/common.h
+++ b/arch/arm/mach-shmobile/common.h
@@ -15,7 +15,6 @@ extern void shmobile_smp_sleep(void);
 extern void shmobile_smp_hook(unsigned int cpu, unsigned long fn,
 			      unsigned long arg);
 extern bool shmobile_smp_cpu_can_disable(unsigned int cpu);
-extern bool shmobile_smp_init_fallback_ops(void);
 extern void shmobile_boot_apmu(void);
 extern void shmobile_boot_scu(void);
 extern void shmobile_smp_scu_prepare_cpus(phys_addr_t scu_base_phys,

commit cad160ed0a94927e59bb5e31ab192d70f08decae
Author: Mylène Josserand <mylene.josserand@bootlin.com>
Date:   Fri May 4 21:05:45 2018 +0200

    ARM: shmobile: Convert file to use cntvoff
    
    Now that a common function is available for CNTVOFF's
    initialization, let's convert shmobile-apmu code to use
    this function.
    
    Signed-off-by: Mylène Josserand <mylene.josserand@bootlin.com>
    Reviewed-by: Geert Uytterhoeven <geert+renesas@glider.be>
    Tested-by: Geert Uytterhoeven <geert+renesas@glider.be>
    Acked-by: Simon Horman <horms+renesas@verge.net.au>
    Signed-off-by: Maxime Ripard <maxime.ripard@bootlin.com>

diff --git a/arch/arm/mach-shmobile/common.h b/arch/arm/mach-shmobile/common.h
index 43c1ac696274..2109f123bdfb 100644
--- a/arch/arm/mach-shmobile/common.h
+++ b/arch/arm/mach-shmobile/common.h
@@ -2,7 +2,6 @@
 #ifndef __ARCH_MACH_COMMON_H
 #define __ARCH_MACH_COMMON_H
 
-extern void shmobile_init_cntvoff(void);
 extern void shmobile_init_delay(void);
 extern void shmobile_boot_vector(void);
 extern unsigned long shmobile_boot_fn;

commit 58adf1ba0d227754d9bc763c667f10efe0053ce5
Author: Fabrizio Castro <fabrizio.castro@bp.renesas.com>
Date:   Wed Feb 28 17:40:22 2018 +0000

    ARM: shmobile: Add watchdog support
    
    On R-Car Gen2 and RZ/G1 platforms, we use the SBAR registers to make non
    boot CPUs run a routine designed to bring up SMP and deal with hot plug.
    The value contained in the SBAR registers is not initialized by a WDT
    triggered reset, which means that after a WDT triggered reset we jump
    to the SMP bring up routine, preventing the system from executing the
    bootrom code.
    
    The purpose of this patch is to jump to the bootrom code in case of a
    WDT triggered reset, and keep the SMP functionality untouched.
    In order to tell if the code had been called due to the WDT overflowing
    we are testing WOVF from register RWTCSRA.
    
    The new function shmobile_boot_vector_gen2 isn't replacing
    shmobile_boot_vector for backward compatibility reasons. The kernel
    will install the best option (either shmobile_boot_vector or
    shmobile_boot_vector_gen2) to ICRAM1 after parsing the device tree,
    according to the amount of memory available.
    
    Since shmobile_boot_vector has become bigger, "reg" property of nodes
    compatible with "renesas,smp-sram" now need to be set to a value
    greater or equal to "<0 0x60>".
    
    Signed-off-by: Fabrizio Castro <fabrizio.castro@bp.renesas.com>
    Signed-off-by: Ramesh Shanmugasundaram <ramesh.shanmugasundaram@bp.renesas.com>
    Reviewed-by: Geert Uytterhoeven <geert+renesas@glider.be>
    [simon: dropped #ifdef from common.h]
    Signed-off-by: Simon Horman <horms+renesas@verge.net.au>

diff --git a/arch/arm/mach-shmobile/common.h b/arch/arm/mach-shmobile/common.h
index a8fa4f7e1f60..43c1ac696274 100644
--- a/arch/arm/mach-shmobile/common.h
+++ b/arch/arm/mach-shmobile/common.h
@@ -7,6 +7,10 @@ extern void shmobile_init_delay(void);
 extern void shmobile_boot_vector(void);
 extern unsigned long shmobile_boot_fn;
 extern unsigned long shmobile_boot_size;
+extern void shmobile_boot_vector_gen2(void);
+extern unsigned long shmobile_boot_fn_gen2;
+extern unsigned long shmobile_boot_cpu_gen2;
+extern unsigned long shmobile_boot_size_gen2;
 extern void shmobile_smp_boot(void);
 extern void shmobile_smp_sleep(void);
 extern void shmobile_smp_hook(unsigned int cpu, unsigned long fn,

commit 8c609698569578913ad40bb160b97c3f6cfa15ec
Merge: 18c83d2c0390 fa32475ad56d
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Thu Nov 16 14:05:12 2017 -0800

    Merge tag 'armsoc-soc' of git://git.kernel.org/pub/scm/linux/kernel/git/arm/arm-soc
    
    Pull ARM SoC platform updates from Arnd Bergmann:
     "Most of the commits are for defconfig changes, to enable newly added
      drivers or features that people have started using. For the changed
      lines lines, we have mostly cleanups, the affected platforms are OMAP,
      Versatile, EP93xx, Samsung, Broadcom, i.MX, and Actions.
    
      The largest single change is the introduction of the TI "sysc" bus
      driver, with the intention of cleaning up more legacy code.
    
      Two new SoC platforms get added this time:
    
       - Allwinner R40 is a modernized version of the A20 chip, now with a
         Quad-Core ARM Cortex-A7. According to the manufacturer, it is
         intended for "Smart Hardware"
    
       - Broadcom Hurricane 2 (Aka Strataconnect BCM5334X) is a family of
         chips meant for managed gigabit ethernet switches, based around a
         Cortex-A9 CPU.
    
      Finally, we gain SMP support for two platforms: Renesas R-Car E2 and
      Amlogic Meson8/8b, which were previously added but only supported
      uniprocessor operation"
    
    * tag 'armsoc-soc' of git://git.kernel.org/pub/scm/linux/kernel/git/arm/arm-soc: (118 commits)
      ARM: multi_v7_defconfig: Select RPMSG_VIRTIO as module
      ARM: multi_v7_defconfig: enable CONFIG_GPIO_UNIPHIER
      arm64: defconfig: enable CONFIG_GPIO_UNIPHIER
      ARM: meson: enable MESON_IRQ_GPIO in Kconfig for meson8b
      ARM: meson: Add SMP bringup code for Meson8 and Meson8b
      ARM: smp_scu: allow the platform code to read the SCU CPU status
      ARM: smp_scu: add a helper for powering on a specific CPU
      dt-bindings: Amlogic: Add Meson8 and Meson8b SMP related documentation
      ARM: OMAP3: Delete an unnecessary variable initialisation in omap3xxx_hwmod_init()
      ARM: OMAP3: Use common error handling code in omap3xxx_hwmod_init()
      ARM: defconfig: select the right SX150X driver
      arm64: defconfig: Enable QCOM_IOMMU
      arm64: Add ThunderX drivers to defconfig
      arm64: defconfig: Enable Tegra PCI controller
      cpufreq: imx6q: Move speed grading check to cpufreq driver
      arm64: defconfig: re-enable Qualcomm DB410c USB
      ARM: configs: stm32: Add MDMA support in STM32 defconfig
      ARM: imx: Enable cpuidle for i.MX6DL starting at 1.1
      bus: ti-sysc: Fix unbalanced pm_runtime_enable by adding remove
      bus: ti-sysc: mark PM functions as __maybe_unused
      ...

commit b24413180f5600bcb3bb70fbed5cf186b60864bd
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Wed Nov 1 15:07:57 2017 +0100

    License cleanup: add SPDX GPL-2.0 license identifier to files with no license
    
    Many source files in the tree are missing licensing information, which
    makes it harder for compliance tools to determine the correct license.
    
    By default all files without license information are under the default
    license of the kernel, which is GPL version 2.
    
    Update the files which contain no license information with the 'GPL-2.0'
    SPDX license identifier.  The SPDX identifier is a legally binding
    shorthand, which can be used instead of the full boiler plate text.
    
    This patch is based on work done by Thomas Gleixner and Kate Stewart and
    Philippe Ombredanne.
    
    How this work was done:
    
    Patches were generated and checked against linux-4.14-rc6 for a subset of
    the use cases:
     - file had no licensing information it it.
     - file was a */uapi/* one with no licensing information in it,
     - file was a */uapi/* one with existing licensing information,
    
    Further patches will be generated in subsequent months to fix up cases
    where non-standard license headers were used, and references to license
    had to be inferred by heuristics based on keywords.
    
    The analysis to determine which SPDX License Identifier to be applied to
    a file was done in a spreadsheet of side by side results from of the
    output of two independent scanners (ScanCode & Windriver) producing SPDX
    tag:value files created by Philippe Ombredanne.  Philippe prepared the
    base worksheet, and did an initial spot review of a few 1000 files.
    
    The 4.13 kernel was the starting point of the analysis with 60,537 files
    assessed.  Kate Stewart did a file by file comparison of the scanner
    results in the spreadsheet to determine which SPDX license identifier(s)
    to be applied to the file. She confirmed any determination that was not
    immediately clear with lawyers working with the Linux Foundation.
    
    Criteria used to select files for SPDX license identifier tagging was:
     - Files considered eligible had to be source code files.
     - Make and config files were included as candidates if they contained >5
       lines of source
     - File already had some variant of a license header in it (even if <5
       lines).
    
    All documentation files were explicitly excluded.
    
    The following heuristics were used to determine which SPDX license
    identifiers to apply.
    
     - when both scanners couldn't find any license traces, file was
       considered to have no license information in it, and the top level
       COPYING file license applied.
    
       For non */uapi/* files that summary was:
    
       SPDX license identifier                            # files
       ---------------------------------------------------|-------
       GPL-2.0                                              11139
    
       and resulted in the first patch in this series.
    
       If that file was a */uapi/* path one, it was "GPL-2.0 WITH
       Linux-syscall-note" otherwise it was "GPL-2.0".  Results of that was:
    
       SPDX license identifier                            # files
       ---------------------------------------------------|-------
       GPL-2.0 WITH Linux-syscall-note                        930
    
       and resulted in the second patch in this series.
    
     - if a file had some form of licensing information in it, and was one
       of the */uapi/* ones, it was denoted with the Linux-syscall-note if
       any GPL family license was found in the file or had no licensing in
       it (per prior point).  Results summary:
    
       SPDX license identifier                            # files
       ---------------------------------------------------|------
       GPL-2.0 WITH Linux-syscall-note                       270
       GPL-2.0+ WITH Linux-syscall-note                      169
       ((GPL-2.0 WITH Linux-syscall-note) OR BSD-2-Clause)    21
       ((GPL-2.0 WITH Linux-syscall-note) OR BSD-3-Clause)    17
       LGPL-2.1+ WITH Linux-syscall-note                      15
       GPL-1.0+ WITH Linux-syscall-note                       14
       ((GPL-2.0+ WITH Linux-syscall-note) OR BSD-3-Clause)    5
       LGPL-2.0+ WITH Linux-syscall-note                       4
       LGPL-2.1 WITH Linux-syscall-note                        3
       ((GPL-2.0 WITH Linux-syscall-note) OR MIT)              3
       ((GPL-2.0 WITH Linux-syscall-note) AND MIT)             1
    
       and that resulted in the third patch in this series.
    
     - when the two scanners agreed on the detected license(s), that became
       the concluded license(s).
    
     - when there was disagreement between the two scanners (one detected a
       license but the other didn't, or they both detected different
       licenses) a manual inspection of the file occurred.
    
     - In most cases a manual inspection of the information in the file
       resulted in a clear resolution of the license that should apply (and
       which scanner probably needed to revisit its heuristics).
    
     - When it was not immediately clear, the license identifier was
       confirmed with lawyers working with the Linux Foundation.
    
     - If there was any question as to the appropriate license identifier,
       the file was flagged for further research and to be revisited later
       in time.
    
    In total, over 70 hours of logged manual review was done on the
    spreadsheet to determine the SPDX license identifiers to apply to the
    source files by Kate, Philippe, Thomas and, in some cases, confirmation
    by lawyers working with the Linux Foundation.
    
    Kate also obtained a third independent scan of the 4.13 code base from
    FOSSology, and compared selected files where the other two scanners
    disagreed against that SPDX file, to see if there was new insights.  The
    Windriver scanner is based on an older version of FOSSology in part, so
    they are related.
    
    Thomas did random spot checks in about 500 files from the spreadsheets
    for the uapi headers and agreed with SPDX license identifier in the
    files he inspected. For the non-uapi files Thomas did random spot checks
    in about 15000 files.
    
    In initial set of patches against 4.14-rc6, 3 files were found to have
    copy/paste license identifier errors, and have been fixed to reflect the
    correct identifier.
    
    Additionally Philippe spent 10 hours this week doing a detailed manual
    inspection and review of the 12,461 patched files from the initial patch
    version early this week with:
     - a full scancode scan run, collecting the matched texts, detected
       license ids and scores
     - reviewing anything where there was a license detected (about 500+
       files) to ensure that the applied SPDX license was correct
     - reviewing anything where there was no detection but the patch license
       was not GPL-2.0 WITH Linux-syscall-note to ensure that the applied
       SPDX license was correct
    
    This produced a worksheet with 20 files needing minor correction.  This
    worksheet was then exported into 3 different .csv files for the
    different types of files to be modified.
    
    These .csv files were then reviewed by Greg.  Thomas wrote a script to
    parse the csv files and add the proper SPDX tag to the file, in the
    format that the file expected.  This script was further refined by Greg
    based on the output to detect more types of files automatically and to
    distinguish between header and source .c files (which need different
    comment types.)  Finally Greg ran the script using the .csv files to
    generate the patches.
    
    Reviewed-by: Kate Stewart <kstewart@linuxfoundation.org>
    Reviewed-by: Philippe Ombredanne <pombredanne@nexb.com>
    Reviewed-by: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/arch/arm/mach-shmobile/common.h b/arch/arm/mach-shmobile/common.h
index 1a8f7b3ab449..f8fcd799d677 100644
--- a/arch/arm/mach-shmobile/common.h
+++ b/arch/arm/mach-shmobile/common.h
@@ -1,3 +1,4 @@
+/* SPDX-License-Identifier: GPL-2.0 */
 #ifndef __ARCH_MACH_COMMON_H
 #define __ARCH_MACH_COMMON_H
 

commit 3fd45a136ff61bb54deab70fb2d534a85e40481f
Author: Geert Uytterhoeven <geert+renesas@glider.be>
Date:   Fri Sep 1 10:37:45 2017 +0200

    ARM: shmobile: rcar-gen2: Make sure CNTVOFF is initialized on CA7/15
    
    On Cortex-A7, the arch timer CNTVOFF register is uninitialized.
    Ideally it should be initialized by the boot loader, but it isn't.
    
    For the boot CPU, CNTVOFF is initialized by Linux since commit
    9ce3fa6816c2fb59 ("ARM: shmobile: rcar-gen2: Add CA7 arch_timer
    initialization for r8a7794").
    For secondary CPU cores, no such initialization is done.
    
    Hence when enabling SMP on r8a7794, the kernel log is spammed with:
    
        WARNING: Underflow in clocksource 'arch_sys_counter' observed, time update ignored.
                 Please report this, consider using a different clocksource, if possible.
                 Your kernel is probably still fine.
    
    As Marc Zyngier pointed out that Cortex-A15 and Cortex-A7 are similar with
    respect to CNTVOFF, we have been very lucky this just worked on R-Car
    Gen2 SoCs with Cortex-A15 cores.
    
    To fix this:
      - Move the existing inline asm code to initialize CNTVOFF to an
        assembler source file (adding comments and replacing hardcoded
        constants by definitions in the process), so it can be reused,
      - Perform the initialization of CNTVOFF on the boot CPU (Cortex-A15 or
        Cortex-A7) on all R-Car Gen2 and RZ/G1 parts,
      - Wrap the standard secondary_startup() routine inside a routine which
        initializes CNTVOFF.
    
    Based on patches by Hisashi Nakamura in the BSP.
    
    Signed-off-by: Geert Uytterhoeven <geert+renesas@glider.be>
    Tested-by: Fabrizio Castro <fabrizio.castro@bp.renesas.com>
    Signed-off-by: Simon Horman <horms+renesas@verge.net.au>

diff --git a/arch/arm/mach-shmobile/common.h b/arch/arm/mach-shmobile/common.h
index 1a8f7b3ab449..ea6e9e2be3f7 100644
--- a/arch/arm/mach-shmobile/common.h
+++ b/arch/arm/mach-shmobile/common.h
@@ -1,6 +1,7 @@
 #ifndef __ARCH_MACH_COMMON_H
 #define __ARCH_MACH_COMMON_H
 
+extern void shmobile_init_cntvoff(void);
 extern void shmobile_init_delay(void);
 extern void shmobile_boot_vector(void);
 extern unsigned long shmobile_boot_fn;
@@ -11,6 +12,7 @@ extern void shmobile_smp_hook(unsigned int cpu, unsigned long fn,
 			      unsigned long arg);
 extern bool shmobile_smp_cpu_can_disable(unsigned int cpu);
 extern bool shmobile_smp_init_fallback_ops(void);
+extern void shmobile_boot_apmu(void);
 extern void shmobile_boot_scu(void);
 extern void shmobile_smp_scu_prepare_cpus(phys_addr_t scu_base_phys,
 					  unsigned int max_cpus);

commit c21af444eace56619e33df0b1fc67ec2e33481ac
Author: Magnus Damm <damm+renesas@opensource.se>
Date:   Tue Jun 28 16:10:37 2016 +0200

    ARM: shmobile: smp: Add function to prioritize DT SMP
    
    Add a function to check if other DT based method is available, and
    if so return false to not hook up smp_ops from the machine vector.
    
    This results in that DT-based SMP support has priority over older
    C-based smp_ops code, and in case DT-based SMP support code does not
    exist in the DTB then the old smp_ops code will still work as-is.
    
    Signed-off-by: Magnus Damm <damm+renesas@opensource.se>
    Signed-off-by: Geert Uytterhoeven <geert+renesas@glider.be>
    Signed-off-by: Simon Horman <horms+renesas@verge.net.au>

diff --git a/arch/arm/mach-shmobile/common.h b/arch/arm/mach-shmobile/common.h
index 3b562d87826d..1a8f7b3ab449 100644
--- a/arch/arm/mach-shmobile/common.h
+++ b/arch/arm/mach-shmobile/common.h
@@ -10,6 +10,7 @@ extern void shmobile_smp_sleep(void);
 extern void shmobile_smp_hook(unsigned int cpu, unsigned long fn,
 			      unsigned long arg);
 extern bool shmobile_smp_cpu_can_disable(unsigned int cpu);
+extern bool shmobile_smp_init_fallback_ops(void);
 extern void shmobile_boot_scu(void);
 extern void shmobile_smp_scu_prepare_cpus(phys_addr_t scu_base_phys,
 					  unsigned int max_cpus);

commit a399dc9fc5005321cebee6589d6bca780ed99c18
Author: Viresh Kumar <viresh.kumar@linaro.org>
Date:   Fri Apr 22 16:58:44 2016 +0530

    cpufreq: shmobile: Use generic platdev driver
    
    The cpufreq-dt-platdev driver supports creation of cpufreq-dt platform
    device now, reuse that and remove similar code from platform code.
    
    Signed-off-by: Viresh Kumar <viresh.kumar@linaro.org>
    Acked-by: Arnd Bergmann <arnd@arndb.de>
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>

diff --git a/arch/arm/mach-shmobile/common.h b/arch/arm/mach-shmobile/common.h
index 5464b7a75e30..3b562d87826d 100644
--- a/arch/arm/mach-shmobile/common.h
+++ b/arch/arm/mach-shmobile/common.h
@@ -25,16 +25,9 @@ static inline int shmobile_suspend_init(void) { return 0; }
 static inline void shmobile_smp_apmu_suspend_init(void) { }
 #endif
 
-#ifdef CONFIG_CPU_FREQ
-int shmobile_cpufreq_init(void);
-#else
-static inline int shmobile_cpufreq_init(void) { return 0; }
-#endif
-
 static inline void __init shmobile_init_late(void)
 {
 	shmobile_suspend_init();
-	shmobile_cpufreq_init();
 }
 
 #endif /* __ARCH_MACH_COMMON_H */

commit 8701d8083d1e4b9210b9cf4f420bcf7b4b36bd6d
Author: Geert Uytterhoeven <geert+renesas@glider.be>
Date:   Thu Jan 28 16:13:32 2016 +0100

    ARM: shmobile: Consolidate SCU mapping code
    
    Currently the SCU registers are mapped in SoC-specific code, using
    different methods, all involving the static mapping set up from
    machine_desc.map_io():
      - On emev2, a static (non-identity) mapping is used, with ioremap().
        As the static mapping uses the MT_DEVICE type, ioremap() reuses it,
        and the returned virtual address is suitable for passing to
        shmobile_smp_hook(),
      - On sh73a0 and r8a7779, a static identity mapping is used, with the
        legacy IOMEM() macro.
        As the static mapping uses the MT_DEVICE_NONSHARED type, replacing
        IOMEM() by ioremap() would create a new mapping, whose virtual
        address cannot be passed to shmobile_smp_hook().
    
    Move the mapping of the SCU registers from SoC-specific code to common
    code, always using ioremap(). To work in the absence of a static
    mapping, this requires passing the physical SCU base address to
    shmobile_smp_hook().
    
    Signed-off-by: Geert Uytterhoeven <geert+renesas@glider.be>
    Signed-off-by: Simon Horman <horms+renesas@verge.net.au>

diff --git a/arch/arm/mach-shmobile/common.h b/arch/arm/mach-shmobile/common.h
index b3a4ed5289ec..5464b7a75e30 100644
--- a/arch/arm/mach-shmobile/common.h
+++ b/arch/arm/mach-shmobile/common.h
@@ -11,7 +11,8 @@ extern void shmobile_smp_hook(unsigned int cpu, unsigned long fn,
 			      unsigned long arg);
 extern bool shmobile_smp_cpu_can_disable(unsigned int cpu);
 extern void shmobile_boot_scu(void);
-extern void shmobile_smp_scu_prepare_cpus(unsigned int max_cpus);
+extern void shmobile_smp_scu_prepare_cpus(phys_addr_t scu_base_phys,
+					  unsigned int max_cpus);
 extern void shmobile_smp_scu_cpu_die(unsigned int cpu);
 extern int shmobile_smp_scu_cpu_kill(unsigned int cpu);
 extern struct platform_suspend_ops shmobile_suspend_ops;
@@ -30,8 +31,6 @@ int shmobile_cpufreq_init(void);
 static inline int shmobile_cpufreq_init(void) { return 0; }
 #endif
 
-extern void __iomem *shmobile_scu_base;
-
 static inline void __init shmobile_init_late(void)
 {
 	shmobile_suspend_init();

commit 901c5ffaaed117a38be9d0c29247c4888d6c8636
Author: Geert Uytterhoeven <geert+renesas@glider.be>
Date:   Mon Feb 15 13:20:08 2016 +0100

    ARM: shmobile: Remove shmobile_boot_arg
    
    CPU boot configuration writes to shmobile_boot_arg, which is located in
    the .text section, and thus should not be written to.
    
    As of commit 1d33a354bbb618ba ("ARM: shmobile: Per-CPU SMP boot / sleep
    code for SCU SoCs"), and ignoring accidental remainings,
    shmobile_boot_arg is always set to MPIDR_HWID_BITMASK by C code.
    Hence we can just hardcode this in the assembler code, and remove the
    variable, and thus also remove the need to write to this variable.
    
    Signed-off-by: Geert Uytterhoeven <geert+renesas@glider.be>
    Acked-by: Nicolas Pitre <nico@linaro.org>
    Signed-off-by: Simon Horman <horms+renesas@verge.net.au>

diff --git a/arch/arm/mach-shmobile/common.h b/arch/arm/mach-shmobile/common.h
index 9cb11215ceba..b3a4ed5289ec 100644
--- a/arch/arm/mach-shmobile/common.h
+++ b/arch/arm/mach-shmobile/common.h
@@ -4,7 +4,6 @@
 extern void shmobile_init_delay(void);
 extern void shmobile_boot_vector(void);
 extern unsigned long shmobile_boot_fn;
-extern unsigned long shmobile_boot_arg;
 extern unsigned long shmobile_boot_size;
 extern void shmobile_smp_boot(void);
 extern void shmobile_smp_sleep(void);

commit 04418c23a9411b85b8789eab5f4397bcbd62b7b4
Author: Laurent Pinchart <laurent.pinchart+renesas@ideasonboard.com>
Date:   Sat Aug 29 00:37:17 2015 +0300

    ARM: shmobile: Remove legacy clock support leftovers
    
    The shmobile_clk_init() function has been removed and the linux/sh_clk.h
    header doesn't need to be included anymore.
    
    Signed-off-by: Laurent Pinchart <laurent.pinchart+renesas@ideasonboard.com>
    Signed-off-by: Simon Horman <horms+renesas@verge.net.au>

diff --git a/arch/arm/mach-shmobile/common.h b/arch/arm/mach-shmobile/common.h
index 0833a6ed02e4..9cb11215ceba 100644
--- a/arch/arm/mach-shmobile/common.h
+++ b/arch/arm/mach-shmobile/common.h
@@ -15,8 +15,6 @@ extern void shmobile_boot_scu(void);
 extern void shmobile_smp_scu_prepare_cpus(unsigned int max_cpus);
 extern void shmobile_smp_scu_cpu_die(unsigned int cpu);
 extern int shmobile_smp_scu_cpu_kill(unsigned int cpu);
-struct clk;
-extern int shmobile_clk_init(void);
 extern struct platform_suspend_ops shmobile_suspend_ops;
 
 #ifdef CONFIG_SUSPEND

commit b62708ac3f5ebfd3a15bd65fd48ed013c5f166bf
Author: Geert Uytterhoeven <geert+renesas@glider.be>
Date:   Tue Aug 4 20:03:12 2015 +0200

    ARM: shmobile: Remove obsolete twd_local_timer declaration
    
    The last user of twd_local_timer was removed in commit c99cd90d98a98aa1
    ("ARM: shmobile: r8a7779: Remove legacy SoC code").
    
    Signed-off-by: Geert Uytterhoeven <geert+renesas@glider.be>
    Signed-off-by: Simon Horman <horms+renesas@verge.net.au>

diff --git a/arch/arm/mach-shmobile/common.h b/arch/arm/mach-shmobile/common.h
index 2a350b48b893..0833a6ed02e4 100644
--- a/arch/arm/mach-shmobile/common.h
+++ b/arch/arm/mach-shmobile/common.h
@@ -2,7 +2,6 @@
 #define __ARCH_MACH_COMMON_H
 
 extern void shmobile_init_delay(void);
-struct twd_local_timer;
 extern void shmobile_boot_vector(void);
 extern unsigned long shmobile_boot_fn;
 extern unsigned long shmobile_boot_arg;

commit 93161cb4c3c27517f1b4516a880adaf7df4112e2
Author: Geert Uytterhoeven <geert+renesas@glider.be>
Date:   Tue Aug 4 20:03:11 2015 +0200

    ARM: shmobile: Remove obsolete earlytimer registration
    
    The last caller of shmobile_earlytimer_init() was removed in commit
    c99cd90d98a98aa1 ("ARM: shmobile: r8a7779: Remove legacy SoC code").
    
    Signed-off-by: Geert Uytterhoeven <geert+renesas@glider.be>
    Signed-off-by: Simon Horman <horms+renesas@verge.net.au>

diff --git a/arch/arm/mach-shmobile/common.h b/arch/arm/mach-shmobile/common.h
index ee8fe9e473d7..2a350b48b893 100644
--- a/arch/arm/mach-shmobile/common.h
+++ b/arch/arm/mach-shmobile/common.h
@@ -1,7 +1,6 @@
 #ifndef __ARCH_MACH_COMMON_H
 #define __ARCH_MACH_COMMON_H
 
-extern void shmobile_earlytimer_init(void);
 extern void shmobile_init_delay(void);
 struct twd_local_timer;
 extern void shmobile_boot_vector(void);

commit 815fc8c06b57f283f942c6c25e3c58d6e4cb8fd7
Author: Geert Uytterhoeven <geert+renesas@glider.be>
Date:   Tue Aug 4 20:03:08 2015 +0200

    ARM: shmobile: Remove obsolete custom earlyprintk code
    
    The last caller of shmobile_setup_console() was removed in commit
    44d88c754e57a6d9 ("ARM: shmobile: Remove legacy SoC code for R-Mobile
    A1").
    
    Signed-off-by: Geert Uytterhoeven <geert+renesas@glider.be>
    Signed-off-by: Simon Horman <horms+renesas@verge.net.au>

diff --git a/arch/arm/mach-shmobile/common.h b/arch/arm/mach-shmobile/common.h
index 8d27ec546a35..ee8fe9e473d7 100644
--- a/arch/arm/mach-shmobile/common.h
+++ b/arch/arm/mach-shmobile/common.h
@@ -4,7 +4,6 @@
 extern void shmobile_earlytimer_init(void);
 extern void shmobile_init_delay(void);
 struct twd_local_timer;
-extern void shmobile_setup_console(void);
 extern void shmobile_boot_vector(void);
 extern unsigned long shmobile_boot_fn;
 extern unsigned long shmobile_boot_arg;

commit 787047eea24a2443c366679ae6b5a3873a33b64e
Author: Stephen Boyd <sboyd@codeaurora.org>
Date:   Wed Jul 29 00:34:48 2015 +0100

    ARM: 8392/3: smp: Only expose /sys/.../cpuX/online if hotpluggable
    
    Writes to /sys/.../cpuX/online fail if we determine the platform
    doesn't support hotplug for that CPU. Furthermore, if the cpu_die
    op isn't specified the system hangs when we try to offline a CPU
    and it comes right back online unexpectedly. Let's figure this
    stuff out before we make the sysfs nodes so that the online file
    doesn't even exist if it isn't (at least sometimes) possible to
    hotplug the CPU.
    
    Add a new 'cpu_can_disable' op and repoint all 'cpu_disable'
    implementations at it because all implementers use the op to
    indicate if a CPU can be hotplugged or not in a static fashion.
    With PSCI we may need to add a 'cpu_disable' op so that the
    secure OS can be migrated off the CPU we're trying to hotplug.
    In this case, the 'cpu_can_disable' op will indicate that all
    CPUs are hotpluggable by returning true, but the 'cpu_disable' op
    will make a PSCI migration call and occasionally fail, denying
    the hotplug of a CPU. This shouldn't be any worse than x86 where
    we may indicate that all CPUs are hotpluggable but occasionally
    we can't offline a CPU due to check_irq_vectors_for_cpu_disable()
    failing to find a CPU to move vectors to.
    
    Cc: Mark Rutland <mark.rutland@arm.com>
    Cc: Nicolas Pitre <nico@linaro.org>
    Cc: Dave Martin <Dave.Martin@arm.com>
    Acked-by: Simon Horman <horms@verge.net.au> [shmobile portion]
    Tested-by: Simon Horman <horms@verge.net.au>
    Cc: Magnus Damm <magnus.damm@gmail.com>
    Cc: <linux-sh@vger.kernel.org>
    Tested-by: Tyler Baker <tyler.baker@linaro.org>
    Cc: Geert Uytterhoeven <geert@linux-m68k.org>
    Signed-off-by: Stephen Boyd <sboyd@codeaurora.org>
    Signed-off-by: Russell King <rmk+kernel@arm.linux.org.uk>

diff --git a/arch/arm/mach-shmobile/common.h b/arch/arm/mach-shmobile/common.h
index 476092b86c6e..8d27ec546a35 100644
--- a/arch/arm/mach-shmobile/common.h
+++ b/arch/arm/mach-shmobile/common.h
@@ -13,7 +13,7 @@ extern void shmobile_smp_boot(void);
 extern void shmobile_smp_sleep(void);
 extern void shmobile_smp_hook(unsigned int cpu, unsigned long fn,
 			      unsigned long arg);
-extern int shmobile_smp_cpu_disable(unsigned int cpu);
+extern bool shmobile_smp_cpu_can_disable(unsigned int cpu);
 extern void shmobile_boot_scu(void);
 extern void shmobile_smp_scu_prepare_cpus(unsigned int max_cpus);
 extern void shmobile_smp_scu_cpu_die(unsigned int cpu);

commit 02b4e2756e01c623cc4dbceae4b07be75252db5b
Author: Russell King <rmk+kernel@arm.linux.org.uk>
Date:   Tue May 19 17:06:44 2015 +0100

    ARM: v7 setup function should invalidate L1 cache
    
    All ARMv5 and older CPUs invalidate their caches in the early assembly
    setup function, prior to enabling the MMU.  This is because the L1
    cache should not contain any data relevant to the execution of the
    kernel at this point; all data should have been flushed out to memory.
    
    This requirement should also be true for ARMv6 and ARMv7 CPUs - indeed,
    these typically do not search their caches when caching is disabled (as
    it needs to be when the MMU is disabled) so this change should be safe.
    
    ARMv7 allows there to be CPUs which search their caches while caching is
    disabled, and it's permitted that the cache is uninitialised at boot;
    for these, the architecture reference manual requires that an
    implementation specific code sequence is used immediately after reset
    to ensure that the cache is placed into a sane state.  Such
    functionality is definitely outside the remit of the Linux kernel, and
    must be done by the SoC's firmware before _any_ CPU gets to the Linux
    kernel.
    
    Changing the data cache clean+invalidate to a mere invalidate allows us
    to get rid of a lot of platform specific hacks around this issue for
    their secondary CPU bringup paths - some of which were buggy.
    
    Reviewed-by: Florian Fainelli <f.fainelli@gmail.com>
    Tested-by: Florian Fainelli <f.fainelli@gmail.com>
    Tested-by: Heiko Stuebner <heiko@sntech.de>
    Tested-by: Dinh Nguyen <dinguyen@opensource.altera.com>
    Acked-by: Sebastian Hesselbarth <sebastian.hesselbarth@gmail.com>
    Tested-by: Sebastian Hesselbarth <sebastian.hesselbarth@gmail.com>
    Acked-by: Shawn Guo <shawn.guo@linaro.org>
    Tested-by: Thierry Reding <treding@nvidia.com>
    Acked-by: Thierry Reding <treding@nvidia.com>
    Tested-by: Geert Uytterhoeven <geert+renesas@glider.be>
    Tested-by: Michal Simek <michal.simek@xilinx.com>
    Tested-by: Wei Xu <xuwei5@hisilicon.com>
    Signed-off-by: Russell King <rmk+kernel@arm.linux.org.uk>

diff --git a/arch/arm/mach-shmobile/common.h b/arch/arm/mach-shmobile/common.h
index afc60bad6fd6..476092b86c6e 100644
--- a/arch/arm/mach-shmobile/common.h
+++ b/arch/arm/mach-shmobile/common.h
@@ -14,7 +14,6 @@ extern void shmobile_smp_sleep(void);
 extern void shmobile_smp_hook(unsigned int cpu, unsigned long fn,
 			      unsigned long arg);
 extern int shmobile_smp_cpu_disable(unsigned int cpu);
-extern void shmobile_invalidate_start(void);
 extern void shmobile_boot_scu(void);
 extern void shmobile_smp_scu_prepare_cpus(unsigned int max_cpus);
 extern void shmobile_smp_scu_cpu_die(unsigned int cpu);

commit e5ac320de1fe3ef5a5afa5f8a0cd19b0c5373a37
Merge: 7d2b6ef19cf0 89522f0f8bd5
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Wed Apr 22 09:20:15 2015 -0700

    Merge tag 'armsoc-multiplatform' of git://git.kernel.org/pub/scm/linux/kernel/git/arm/arm-soc
    
    Pull ARM SoC multiplatform code changes from Olof Johansson:
     "The changes here belong to two main platforms:
    
       - Atmel At91 is flipping the bit and going multiplatform.  This
         includes some cleanups and removal of code, and the final flip of
         config dependencies
    
       - Shmobile has several platforms that are going multiplatform, but
         this branch also contains a bunch of cleanups that they weren't
         able to keep separate in a good way.  THere's also a removal of one
         of their SoCs and the corresponding boards (sh7372 and mackerel)"
    
    * tag 'armsoc-multiplatform' of git://git.kernel.org/pub/scm/linux/kernel/git/arm/arm-soc: (67 commits)
      ARM: at91/pm: move AT91_MEMCTRL_* to pm.h
      ARM: at91/pm: move the standby functions to pm.c
      ARM: at91: fix pm_suspend.S compilation when ARMv6 is selected
      ARM: at91: add a Kconfig dependency on multi-platform
      ARM: at91: drop AT91_TIMER_HZ
      ARM: at91: remove hardware.h
      ARM: at91: remove SoC headers
      ARM: at91: remove useless mach/cpu.h
      ARM: at91: remove unused headers
      ARM: at91: switch at91_dt_defconfig to multiplatform
      ARM: at91: switch to multiplatform
      ARM: shmobile: r8a7778: enable multiplatform target
      ARM: shmobile: bockw: add sound to DT
      ARM: shmobile: r8a7778: add sound to DT
      ARM: shmobile: bockw: add devices hooked up to i2c0 to DT
      DT: i2c: add trivial binding for OKI ML86V7667 video decoder
      ARM: shmobile: r8a7778: common clock framework CPG driver
      ARM: shmobile: bockw dts: set extal clock frequency
      ARM: shmobile: bockw dts: Move Ethernet node to BSC
      ARM: shmobile: r8a73a4: Remove legacy code
      ...

commit df67a2b72eb6fa205c0954e3f4f416e282e7412b
Author: Daniel Lezcano <daniel.lezcano@linaro.org>
Date:   Tue Mar 17 16:25:12 2015 +0100

    ARM: shmobile: cpuidle: Remove the pointless default driver
    
    The default idle driver uses one state with the WFI instruction.
    The default idle routine invokes WFI when no cpuidle driver is present.
    
    The default cpuidle driver is pointless and does not give more than the
    default idle routine and moreover it pulls all the mathematics tied with
    the cpuidle governor for nothing, hence consuming more energy.
    
    Remove the default driver, the related code and register the driver directly.
    
    [compiled only - no board - no test]
    
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Signed-off-by: Simon Horman <horms+renesas@verge.net.au>

diff --git a/arch/arm/mach-shmobile/common.h b/arch/arm/mach-shmobile/common.h
index 309025efd4cf..1dc09713f753 100644
--- a/arch/arm/mach-shmobile/common.h
+++ b/arch/arm/mach-shmobile/common.h
@@ -23,8 +23,6 @@ struct clk;
 extern int shmobile_clk_init(void);
 extern void shmobile_handle_irq_intc(struct pt_regs *);
 extern struct platform_suspend_ops shmobile_suspend_ops;
-struct cpuidle_driver;
-extern void shmobile_cpuidle_set_driver(struct cpuidle_driver *drv);
 
 #ifdef CONFIG_SUSPEND
 int shmobile_suspend_init(void);
@@ -34,12 +32,6 @@ static inline int shmobile_suspend_init(void) { return 0; }
 static inline void shmobile_smp_apmu_suspend_init(void) { }
 #endif
 
-#ifdef CONFIG_CPU_IDLE
-int shmobile_cpuidle_init(void);
-#else
-static inline int shmobile_cpuidle_init(void) { return 0; }
-#endif
-
 #ifdef CONFIG_CPU_FREQ
 int shmobile_cpufreq_init(void);
 #else
@@ -51,7 +43,6 @@ extern void __iomem *shmobile_scu_base;
 static inline void __init shmobile_init_late(void)
 {
 	shmobile_suspend_init();
-	shmobile_cpuidle_init();
 	shmobile_cpufreq_init();
 }
 

commit 59b89af1d5551c12bf710840d5215a186607ca23
Author: Magnus Damm <damm+renesas@opensource.se>
Date:   Mon Jan 26 15:19:20 2015 +0900

    ARM: shmobile: sh7372: Remove Legacy C SoC code
    
    Remove support for the legacy Cortex-A8 based sh7372 SoC.
    
    The Linux kernel still lacks DT bindings for the sh7372 INTC
    interrupt controller so DT multiplatform support is not possibile.
    
    Also, the sh7372 SoC never went into mass production anyway so to
    aid migration to DT multiplatform simply get rid of sh7372 support.
    
    Signed-off-by: Magnus Damm <damm+renesas@opensource.se>
    Acked-by: Laurent Pinchart <laurent.pinchart@ideasonboard.com>
    Acked-by: Geert Uytterhoeven <geert+renesas@glider.be>
    Signed-off-by: Simon Horman <horms+renesas@verge.net.au>

diff --git a/arch/arm/mach-shmobile/common.h b/arch/arm/mach-shmobile/common.h
index 309025efd4cf..8faf6e040d78 100644
--- a/arch/arm/mach-shmobile/common.h
+++ b/arch/arm/mach-shmobile/common.h
@@ -21,7 +21,6 @@ extern void shmobile_smp_scu_cpu_die(unsigned int cpu);
 extern int shmobile_smp_scu_cpu_kill(unsigned int cpu);
 struct clk;
 extern int shmobile_clk_init(void);
-extern void shmobile_handle_irq_intc(struct pt_regs *);
 extern struct platform_suspend_ops shmobile_suspend_ops;
 struct cpuidle_driver;
 extern void shmobile_cpuidle_set_driver(struct cpuidle_driver *drv);

commit a8d2ff39c7c4a5ce50df2a47d5f8523810dd4c29
Author: Hisashi Nakamura <hisashi.nakamura.ak@renesas.com>
Date:   Fri Oct 24 17:33:08 2014 +0900

    ARM: shmobile: Separate APMU resource data into CPU dependant part
    
    APMU resources are not common to all R-Car SoCs so don't share this data.
    A subsequent patch will correct the CPU cores for the r8a7791.
    
    Signed-off-by: Hisashi Nakamura <hisashi.nakamura.ak@renesas.com>
    Signed-off-by: Simon Horman <horms+renesas@verge.net.au>

diff --git a/arch/arm/mach-shmobile/common.h b/arch/arm/mach-shmobile/common.h
index 72087c79ad7b..309025efd4cf 100644
--- a/arch/arm/mach-shmobile/common.h
+++ b/arch/arm/mach-shmobile/common.h
@@ -19,11 +19,6 @@ extern void shmobile_boot_scu(void);
 extern void shmobile_smp_scu_prepare_cpus(unsigned int max_cpus);
 extern void shmobile_smp_scu_cpu_die(unsigned int cpu);
 extern int shmobile_smp_scu_cpu_kill(unsigned int cpu);
-extern void shmobile_smp_apmu_prepare_cpus(unsigned int max_cpus);
-extern int shmobile_smp_apmu_boot_secondary(unsigned int cpu,
-					    struct task_struct *idle);
-extern void shmobile_smp_apmu_cpu_die(unsigned int cpu);
-extern int shmobile_smp_apmu_cpu_kill(unsigned int cpu);
 struct clk;
 extern int shmobile_clk_init(void);
 extern void shmobile_handle_irq_intc(struct pt_regs *);

commit 7dd4cfd7f8c2976a8d65022146386480474501ca
Author: Magnus Damm <damm+renesas@opensource.se>
Date:   Wed Aug 20 22:03:12 2014 +0900

    ARM: shmobile: Remove shmobile_setup_delay()
    
    All ARM mach-shmobile SoCs and boards now rely on DTS for
    CPU Frequency information, so remove the unused function
    shmobile_setup_delay(). While at it, make the function
    shmobile_setup_delay_hz() static.
    
    Signed-off-by: Magnus Damm <damm+renesas@opensource.se>
    Signed-off-by: Simon Horman <horms+renesas@verge.net.au>

diff --git a/arch/arm/mach-shmobile/common.h b/arch/arm/mach-shmobile/common.h
index 98056081f0da..72087c79ad7b 100644
--- a/arch/arm/mach-shmobile/common.h
+++ b/arch/arm/mach-shmobile/common.h
@@ -2,8 +2,6 @@
 #define __ARCH_MACH_COMMON_H
 
 extern void shmobile_earlytimer_init(void);
-extern void shmobile_setup_delay(unsigned int max_cpu_core_mhz,
-			 unsigned int mult, unsigned int div);
 extern void shmobile_init_delay(void);
 struct twd_local_timer;
 extern void shmobile_setup_console(void);

commit 98abaf1370c932db38a23b270f86689b66b34cdf
Merge: 12af7011e958 3ed66ec5ced8
Author: Olof Johansson <olof@lixom.net>
Date:   Mon Jul 7 22:07:14 2014 -0700

    Merge tag 'renesas-soc-for-v3.17' of git://git.kernel.org/pub/scm/linux/kernel/git/horms/renesas into next/soc
    
    Merge "Renesas ARM Based SoC Updates for v3.17" from Simon Horman:
    
    - Use shmobile_init_late on r8a7791 and r8a7790 whien booting using DT-only
    - Support Core-Standby for Suspend to RAM on r8a7791 and r8a7790 SoCs
    - Shared CMA reservation for R-Car Gen2 SoCs
    - Add r8a7791 SYSC power management support
    
    * tag 'renesas-soc-for-v3.17' of git://git.kernel.org/pub/scm/linux/kernel/git/horms/renesas:
      ARM: shmobile: Remove ARCH_HAS_CPUFREQ config for shmobile
      ARM: shmobile: rcar-gen2: update call to dma_contiguous_reserve_area
      ARM: shmobile: rcar-gen2: correct return value of shmobile_smp_apmu_suspend_init
      ARM: shmobile: rcar-gen2: Remove useless copied section for LongTrail
      ARM: shmobile: rcar-gen2: Use "1ULL" instead of "(u64)1"
      ARM: shmobile: rcar-gen2: Update for of_get_flat_dt_prop() update
      ARM: shmobile: Add shared R-Car Gen2 CMA reservation code
      ARM: shmobile: Use shmobile_init_late() on r8a7791 DT-only
      ARM: shmobile: Use shmobile_init_late() on r8a7790 DT-only
      ARM: shmobile: Mark all SoCs in shmobile as CPUFreq, capable
      ARM: shmobile: r8a7791: Support Core-Standby for Suspend to RAM
      ARM: shmobile: r8a7790: Support Core-Standby for Suspend to RAM
      ARM: shmobile: APMU: Add Core-Standby-state for Suspend to RAM
      ARM: shmobile: r8a7791 SYSC setup code
    
    Signed-off-by: Olof Johansson <olof@lixom.net>

commit 21760aedabc795a6758bf15fafcd59fe0799cd9f
Merge: 5bf521b81377 c1a0f9932b66
Author: Olof Johansson <olof@lixom.net>
Date:   Sun Jul 6 17:15:48 2014 -0700

    Merge tag 'renesas-r8a7779-multiplatform-for-v3.17' of git://git.kernel.org/pub/scm/linux/kernel/git/horms/renesas into next/soc
    
    Pull "Renesas ARM Based SoC r8a7779-multiplatform Updates for v3.17" from
    Simon Horman:
    
    Move r8a7779 SoC and its Marzen board to use common clocks,
    multiplatform and initialise SCIF (serial) devices using DT.
    
    * tag 'renesas-r8a7779-multiplatform-for-v3.17' of git://git.kernel.org/pub/scm/linux/kernel/git/horms/renesas: (32 commits)
      ARM: shmobile: marzen: Do not use workaround for scif devices
      ARM: shmobile: marzen: Initialise SCIF devices using DT
      ARM: shmobile: marzen: Remove early_printk from command line
      ARM: shmobile: r8a7779: Add scif nodes to dtsi
      ARM: shmobile: r8a7779 dtsi: Correct #address-cells/#size-cells for clocks
      ARM: shmobile: r8a7779 dtsi: Update unit-addresses for clocks
      ARM: shmobile: r8a7779: Remove unused r8a7779_init_delay()
      ARM: shmobile: marzen-reference: Use DT CPU Frequency
      ARM: shmobile: r8a7779: Use DT CPU Frequency in common case
      ARM: shmobile: r8a7779: Add Maximum CPU Frequency to DTS
      ARM: shmobile: marzen-reference: Remove legacy clock support
      ARM: shmobile: Remove Marzen reference DTS
      ARM: shmobile: Let Marzen multiplatform boot with Marzen DTB
      ARM: shmobile: Remove non-multiplatform Marzen reference support
      ARM: shmobile: marzen-reference: Instantiate clkdevs for SCIF and TMU
      ARM: shmobile: marzen-reference: Initialize CPG device
      ARM: shmobile: r8a7779: Initial multiplatform support
      ARM: shmobile: marzen-reference: Move clock and OF device initialisation into board code
      ARM: shmobile: r8a7779: Move r8a7779_earlytimer_init to clock-r8a7779.c
      ARM: shmobile: r8a7779: Add helper to read mode pins
      ...
    
    Signed-off-by: Olof Johansson <olof@lixom.net>

commit ecdaca48629bd99609fdc612685363330967dce2
Author: Simon Horman <horms+renesas@verge.net.au>
Date:   Mon Jun 16 20:21:13 2014 +0900

    ARM: shmobile: rcar-gen2: correct return value of shmobile_smp_apmu_suspend_init
    
    The dummy shmobile_smp_apmu_suspend_init() function provided when
    CPU_IDLE is not set should not return a value as per the signature
    of the function.
    
    This problem appears to have been introduced by
    867ba81f728f1daa ("ARM: shmobile: APMU: Add Core-Standby-state for Suspend
    to RAM").
    
    Cc: Keita Kobayashi <keita.kobayashi.ym@renesas.com>
    Signed-off-by: Simon Horman <horms+renesas@verge.net.au>

diff --git a/arch/arm/mach-shmobile/common.h b/arch/arm/mach-shmobile/common.h
index 8f0cd5791583..1e811999557d 100644
--- a/arch/arm/mach-shmobile/common.h
+++ b/arch/arm/mach-shmobile/common.h
@@ -38,7 +38,7 @@ int shmobile_suspend_init(void);
 void shmobile_smp_apmu_suspend_init(void);
 #else
 static inline int shmobile_suspend_init(void) { return 0; }
-static inline void shmobile_smp_apmu_suspend_init(void) { return 0; }
+static inline void shmobile_smp_apmu_suspend_init(void) { }
 #endif
 
 #ifdef CONFIG_CPU_IDLE

commit d6d757c9a4e06e118fa5158fa74e03c514d862d2
Author: keita kobayashi <keita.kobayashi.ym@renesas.com>
Date:   Thu May 29 16:24:27 2014 +0900

    ARM: shmobile: APMU: Add Core-Standby-state for Suspend to RAM
    
    This patch add Core-Standby-state for Suspend to RAM.
    
    Signed-off-by: Keita Kobayashi <keita.kobayashi.ym@renesas.com>
    Acked-by: Magnus Damm <damm+renesas@opensource.se>
    [horms+renesas@verge.net.au: rebase]
    Signed-off-by: Simon Horman <horms+renesas@verge.net.au>

diff --git a/arch/arm/mach-shmobile/common.h b/arch/arm/mach-shmobile/common.h
index f7a360edcc35..8f0cd5791583 100644
--- a/arch/arm/mach-shmobile/common.h
+++ b/arch/arm/mach-shmobile/common.h
@@ -35,8 +35,10 @@ extern void shmobile_cpuidle_set_driver(struct cpuidle_driver *drv);
 
 #ifdef CONFIG_SUSPEND
 int shmobile_suspend_init(void);
+void shmobile_smp_apmu_suspend_init(void);
 #else
 static inline int shmobile_suspend_init(void) { return 0; }
+static inline void shmobile_smp_apmu_suspend_init(void) { return 0; }
 #endif
 
 #ifdef CONFIG_CPU_IDLE

commit fd44aa5e570d1d8c7d361dcbf94c2b8cd25cfe92
Author: Magnus Damm <damm+renesas@opensource.se>
Date:   Tue Jun 17 16:47:37 2014 +0900

    ARM: shmobile: Move common.h
    
    Change location for common.h so it can be used as #include "common.h"
    instead of the old style #include <mach/common.h>.
    
    Signed-off-by: Magnus Damm <damm+renesas@opensource.se>
    Acked-by: Geert Uytterhoeven <geert@linux-m68k.org>
    Acked-by: Arnd Bergmann <arnd@arndb.de>
    Signed-off-by: Simon Horman <horms+renesas@verge.net.au>

diff --git a/arch/arm/mach-shmobile/common.h b/arch/arm/mach-shmobile/common.h
new file mode 100644
index 000000000000..f7a360edcc35
--- /dev/null
+++ b/arch/arm/mach-shmobile/common.h
@@ -0,0 +1,56 @@
+#ifndef __ARCH_MACH_COMMON_H
+#define __ARCH_MACH_COMMON_H
+
+extern void shmobile_earlytimer_init(void);
+extern void shmobile_setup_delay(unsigned int max_cpu_core_mhz,
+			 unsigned int mult, unsigned int div);
+extern void shmobile_init_delay(void);
+struct twd_local_timer;
+extern void shmobile_setup_console(void);
+extern void shmobile_boot_vector(void);
+extern unsigned long shmobile_boot_fn;
+extern unsigned long shmobile_boot_arg;
+extern unsigned long shmobile_boot_size;
+extern void shmobile_smp_boot(void);
+extern void shmobile_smp_sleep(void);
+extern void shmobile_smp_hook(unsigned int cpu, unsigned long fn,
+			      unsigned long arg);
+extern int shmobile_smp_cpu_disable(unsigned int cpu);
+extern void shmobile_invalidate_start(void);
+extern void shmobile_boot_scu(void);
+extern void shmobile_smp_scu_prepare_cpus(unsigned int max_cpus);
+extern void shmobile_smp_scu_cpu_die(unsigned int cpu);
+extern int shmobile_smp_scu_cpu_kill(unsigned int cpu);
+extern void shmobile_smp_apmu_prepare_cpus(unsigned int max_cpus);
+extern int shmobile_smp_apmu_boot_secondary(unsigned int cpu,
+					    struct task_struct *idle);
+extern void shmobile_smp_apmu_cpu_die(unsigned int cpu);
+extern int shmobile_smp_apmu_cpu_kill(unsigned int cpu);
+struct clk;
+extern int shmobile_clk_init(void);
+extern void shmobile_handle_irq_intc(struct pt_regs *);
+extern struct platform_suspend_ops shmobile_suspend_ops;
+struct cpuidle_driver;
+extern void shmobile_cpuidle_set_driver(struct cpuidle_driver *drv);
+
+#ifdef CONFIG_SUSPEND
+int shmobile_suspend_init(void);
+#else
+static inline int shmobile_suspend_init(void) { return 0; }
+#endif
+
+#ifdef CONFIG_CPU_IDLE
+int shmobile_cpuidle_init(void);
+#else
+static inline int shmobile_cpuidle_init(void) { return 0; }
+#endif
+
+extern void __iomem *shmobile_scu_base;
+
+static inline void __init shmobile_init_late(void)
+{
+	shmobile_suspend_init();
+	shmobile_cpuidle_init();
+}
+
+#endif /* __ARCH_MACH_COMMON_H */
