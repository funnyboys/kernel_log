commit 4b42745211af552f170f38a1b97f4a112b5da6b2
Merge: b22b6beae611 f4f9554f16d0
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Mon Oct 29 15:37:33 2018 -0700

    Merge tag 'armsoc-soc' of git://git.kernel.org/pub/scm/linux/kernel/git/arm/arm-soc
    
    Pull ARM SoC platform updates from Arnd Bergmann:
     "A couple of platforms change hands in the MAINTAINERS file:
    
       - Linus Walleij lists himself for the ARM Reference platforms:
         versatile, vexpress, integrator and realview. He has been the main
         contributor for these for a while, and makes it official now.
    
       - Vladimir Zapolskiy takes over the LPC18xx platform from Joachim
         Eastwood
    
       - Manivannan Sadhasivam becomes a secondary maintainer for the
         Actions Semi machines
    
       - Nicolas Ferre lists updates the MAINTAINER listing for the AT91
         platform: Ludovic Desroches is now a co-maintainer for the
         platform, and several other people (Claudiu Beznea, Cristian
         Birsan, Eugen Hristev, Codrin Ciubotariu) take over individual
         device drivers.
    
      Thanks everyone for working on this, and welcome to the new
      maintainers!
    
      The "virt" platform on qemy or kvm can now be used in big-endian mode
      without additional tricks, thanks to Jason Donenfeld.
    
      Once again, we gain support for another NXP i.MX6 variant, this time
      it's the i.MX 6ULZ 32-bit single-core version.
    
      On arm64, we add support for two SoCs from Renesas: RZ/G2E (r8a774c0)
      and RZ/G2M (r8a774a1). These are described as microcontrollers on the
      manufacturer website, but appear to be rather powerful. The RZ/G2M is
      used on the reference board for the CIP Super Long Term Support (SLTS)
      Linux Kernels"
    
    * tag 'armsoc-soc' of git://git.kernel.org/pub/scm/linux/kernel/git/arm/arm-soc: (54 commits)
      MAINTAINERS: Assign myself as a maintainer of ARM/LPC18XX architecture
      arm64: exynos: Enable generic power domain support
      MAINTAINERS: remove non-exsiting email address of Baoyou
      MAINTAINERS: fix pattern in ARM/Synaptics berlin SoC section
      MAINTAINERS: Drop dt-bindings/genpd/k2g.h
      ARM: samsung: Limit SAMSUNG_PM_CHECK config option to non-Exynos platforms
      arm64: actions: Enable PINCTRL in platforms Kconfig
      MAINTAINERS: Add entry for Actions Semi Owl SoCs DMA driver
      MAINTAINERS: Add entry for Actions Semiconductor Owl I2C driver
      MAINTAINERS: Update clock binding entry for Actions Semi Owl SoCs
      ARM: imx: add i.mx6ulz msl support
      ARM: Assume maintainership of ARM reference designs
      ARM: support big-endian for the virt architecture
      MAINTAINERS: sdhci: move the Microchip entry to proper location
      MAINTAINERS: move former ATMEL entries to proper MICROCHIP location
      MAINTAINERS: remove the / ATMEL string from MICROCHIP entries
      MAINTAINERS: iio: add co-maintainer to SAMA5D2-compatible ADC driver
      MAINTAINERS: pwm: add entry for Microchip pwm driver
      MAINTAINERS: dmaengine: add files to Microchip dma entry
      MAINTAINERS: USB: change maintainer for Microchip USBA gadget driver
      ...

commit 5af5d40c401581399f2b6a646a83ad0f31015eb6
Author: Rob Herring <robh@kernel.org>
Date:   Mon Aug 27 09:42:49 2018 -0500

    ARM: shmobile: use for_each_of_cpu_node iterator
    
    Use the for_each_of_cpu_node iterator to iterate over cpu nodes. This
    has the side effect of defaulting to iterating using "cpu" node names in
    preference to the deprecated (for FDT) device_type == "cpu".
    
    Cc: Magnus Damm <magnus.damm@gmail.com>
    Cc: Russell King <linux@armlinux.org.uk>
    Cc: linux-arm-kernel@lists.infradead.org
    Cc: linux-renesas-soc@vger.kernel.org
    Reviewed-by: Geert Uytterhoeven <geert+renesas@glider.be>
    Reviewed-by: Simon Horman <horms+renesas@verge.net.au>
    Signed-off-by: Rob Herring <robh@kernel.org>

diff --git a/arch/arm/mach-shmobile/timer.c b/arch/arm/mach-shmobile/timer.c
index 828e8aea037e..e48b0939693f 100644
--- a/arch/arm/mach-shmobile/timer.c
+++ b/arch/arm/mach-shmobile/timer.c
@@ -22,22 +22,16 @@
 
 void __init shmobile_init_delay(void)
 {
-	struct device_node *np, *cpus;
+	struct device_node *np;
 	u32 max_freq = 0;
 
-	cpus = of_find_node_by_path("/cpus");
-	if (!cpus)
-		return;
-
-	for_each_child_of_node(cpus, np) {
+	for_each_of_cpu_node(np) {
 		u32 freq;
 
 		if (!of_property_read_u32(np, "clock-frequency", &freq))
 			max_freq = max(max_freq, freq);
 	}
 
-	of_node_put(cpus);
-
 	if (!max_freq)
 		return;
 

commit e2f2594b8e4c4dab5761dede92f3793c34048a6c
Author: Kuninori Morimoto <kuninori.morimoto.gx@renesas.com>
Date:   Fri Sep 7 01:43:23 2018 +0000

    ARM: shmobile: convert to SPDX identifiers
    
    This patch updates license to use SPDX-License-Identifier
    instead of verbose license text.
    
    Signed-off-by: Kuninori Morimoto <kuninori.morimoto.gx@renesas.com>
    Reviewed-by: Geert Uytterhoeven <geert+renesas@glider.be>
    Signed-off-by: Simon Horman <horms+renesas@verge.net.au>

diff --git a/arch/arm/mach-shmobile/timer.c b/arch/arm/mach-shmobile/timer.c
index 828e8aea037e..7bf25f386e35 100644
--- a/arch/arm/mach-shmobile/timer.c
+++ b/arch/arm/mach-shmobile/timer.c
@@ -1,17 +1,9 @@
+// SPDX-License-Identifier: GPL-2.0
 /*
  * SH-Mobile Timer
  *
  * Copyright (C) 2010  Magnus Damm
  * Copyright (C) 2002 - 2009  Paul Mundt
- *
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation; version 2 of the License.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
  */
 #include <linux/platform_device.h>
 #include <linux/clocksource.h>

commit 54f464e0c91f10212fa5699bfef1f104ee7d2213
Author: Geert Uytterhoeven <geert+renesas@glider.be>
Date:   Thu Jul 12 18:08:57 2018 +0200

    ARM: shmobile: Always enable ARCH_TIMER on SoCs with A7 and/or A15
    
    R-Mobile APE6, R-Car Gen2, and RZ/G1 SoCs have Cortex-A7 and/or
    Cortex-A15 CPU cores, all of which have ARM architectured timers.
    
    Force use of the ARM architectured timer on these SoCs.
    This allows to:
      - Remove the calls to shmobile_init_delay() from the corresponding
        machine vectors,
      - Remove a check in timer setup specific to R-Car Gen2,
      - Remove a check in shmobile_init_delay().
    
    Signed-off-by: Geert Uytterhoeven <geert+renesas@glider.be>
    Signed-off-by: Simon Horman <horms+renesas@verge.net.au>

diff --git a/arch/arm/mach-shmobile/timer.c b/arch/arm/mach-shmobile/timer.c
index 6196a6380385..828e8aea037e 100644
--- a/arch/arm/mach-shmobile/timer.c
+++ b/arch/arm/mach-shmobile/timer.c
@@ -32,14 +32,6 @@ void __init shmobile_init_delay(void)
 	for_each_child_of_node(cpus, np) {
 		u32 freq;
 
-		if (IS_ENABLED(CONFIG_ARM_ARCH_TIMER) &&
-		    (of_device_is_compatible(np, "arm,cortex-a7") ||
-		     of_device_is_compatible(np, "arm,cortex-a15"))) {
-			of_node_put(np);
-			of_node_put(cpus);
-			return;
-		}
-
 		if (!of_property_read_u32(np, "clock-frequency", &freq))
 			max_freq = max(max_freq, freq);
 	}

commit a4b8c18c40704c28be62af4606cc6758c9ff3dba
Author: Geert Uytterhoeven <geert+renesas@glider.be>
Date:   Thu Apr 14 10:33:16 2016 +0200

    ARM: shmobile: timer: Drop support for Cortex A8
    
    Commit edf4100906044225 ("ARM: shmobile: sh7372 dtsi: Remove Legacy
    file") removed the DTS for the last shmobile SoC with a Cortex A8 CPU
    core (sh7372 aka SH-Mobile AP4), hence drop support for it in the
    loops-per-jiffy preset code.
    
    As "div" is always 1 for supported contemporary ARM processors, we can
    simplify the code:
      - Absorb shmobile_setup_delay_hz(), which was always called with
        mult = div = 1,
      - Return earlier if the Cortex A7/A15 arch timer exists and support is
        enabled.
    
    Signed-off-by: Geert Uytterhoeven <geert+renesas@glider.be>
    Signed-off-by: Simon Horman <horms+renesas@verge.net.au>

diff --git a/arch/arm/mach-shmobile/timer.c b/arch/arm/mach-shmobile/timer.c
index 67d79f9c6bad..6196a6380385 100644
--- a/arch/arm/mach-shmobile/timer.c
+++ b/arch/arm/mach-shmobile/timer.c
@@ -20,28 +20,9 @@
 
 #include "common.h"
 
-static void __init shmobile_setup_delay_hz(unsigned int max_cpu_core_hz,
-					   unsigned int mult, unsigned int div)
-{
-	/* calculate a worst-case loops-per-jiffy value
-	 * based on maximum cpu core hz setting and the
-	 * __delay() implementation in arch/arm/lib/delay.S
-	 *
-	 * this will result in a longer delay than expected
-	 * when the cpu core runs on lower frequencies.
-	 */
-
-	unsigned int value = HZ * div / mult;
-
-	if (!preset_lpj)
-		preset_lpj = max_cpu_core_hz / value;
-}
-
 void __init shmobile_init_delay(void)
 {
 	struct device_node *np, *cpus;
-	unsigned int div = 0;
-	bool has_arch_timer = false;
 	u32 max_freq = 0;
 
 	cpus = of_find_node_by_path("/cpus");
@@ -51,25 +32,32 @@ void __init shmobile_init_delay(void)
 	for_each_child_of_node(cpus, np) {
 		u32 freq;
 
+		if (IS_ENABLED(CONFIG_ARM_ARCH_TIMER) &&
+		    (of_device_is_compatible(np, "arm,cortex-a7") ||
+		     of_device_is_compatible(np, "arm,cortex-a15"))) {
+			of_node_put(np);
+			of_node_put(cpus);
+			return;
+		}
+
 		if (!of_property_read_u32(np, "clock-frequency", &freq))
 			max_freq = max(max_freq, freq);
-
-		if (of_device_is_compatible(np, "arm,cortex-a8")) {
-			div = 2;
-		} else if (of_device_is_compatible(np, "arm,cortex-a9")) {
-			div = 1;
-		} else if (of_device_is_compatible(np, "arm,cortex-a7") ||
-			 of_device_is_compatible(np, "arm,cortex-a15")) {
-			div = 1;
-			has_arch_timer = true;
-		}
 	}
 
 	of_node_put(cpus);
 
-	if (!max_freq || !div)
+	if (!max_freq)
 		return;
 
-	if (!has_arch_timer || !IS_ENABLED(CONFIG_ARM_ARCH_TIMER))
-		shmobile_setup_delay_hz(max_freq, 1, div);
+	/*
+	 * Calculate a worst-case loops-per-jiffy value
+	 * based on maximum cpu core hz setting and the
+	 * __delay() implementation in arch/arm/lib/delay.S.
+	 *
+	 * This will result in a longer delay than expected
+	 * when the cpu core runs on lower frequencies.
+	 */
+
+	if (!preset_lpj)
+		preset_lpj = max_freq / HZ;
 }

commit c531fb27e9699eaee478ee5686a3cca5dee73602
Author: Geert Uytterhoeven <geert+renesas@glider.be>
Date:   Mon Jan 11 19:41:12 2016 +0100

    ARM: shmobile: timer: Fix preset_lpj leading to too short delays
    
    On all shmobile ARM SoCs, loop-based delays may complete early, which
    can be after only 1/3 (Cortex A9) or 1/2 (Cortex A7 or A15) of the
    minimum required time.
    
    This is caused by calculating preset_lpj based on incorrect assumptions
    about the number of clock cycles per loop:
      - All of Cortex A7, A9, and A15 run __loop_delay() at 1 loop per
        CPU clock cycle,
      - As of commit 11d4bb1bd067f9d0 ("ARM: 7907/1: lib: delay-loop: Add
        align directive to fix BogoMIPS calculation"), Cortex A8 runs
        __loop_delay() at 1 loop per 2 instead of 3 CPU clock cycles.
    
    On SoCs with Cortex A7 and/or A15 CPU cores, this went unnoticed, as
    delays use the ARM arch timer if available. R-Car Gen2 doesn't work if
    the arch timer is disabled. However, APE6 can be used without the arch
    timer.
    
    Signed-off-by: Geert Uytterhoeven <geert+renesas@glider.be>
    Signed-off-by: Simon Horman <horms+renesas@verge.net.au>

diff --git a/arch/arm/mach-shmobile/timer.c b/arch/arm/mach-shmobile/timer.c
index ad008e4b0c49..67d79f9c6bad 100644
--- a/arch/arm/mach-shmobile/timer.c
+++ b/arch/arm/mach-shmobile/timer.c
@@ -40,8 +40,7 @@ static void __init shmobile_setup_delay_hz(unsigned int max_cpu_core_hz,
 void __init shmobile_init_delay(void)
 {
 	struct device_node *np, *cpus;
-	bool is_a7_a8_a9 = false;
-	bool is_a15 = false;
+	unsigned int div = 0;
 	bool has_arch_timer = false;
 	u32 max_freq = 0;
 
@@ -55,27 +54,22 @@ void __init shmobile_init_delay(void)
 		if (!of_property_read_u32(np, "clock-frequency", &freq))
 			max_freq = max(max_freq, freq);
 
-		if (of_device_is_compatible(np, "arm,cortex-a8") ||
-		    of_device_is_compatible(np, "arm,cortex-a9")) {
-			is_a7_a8_a9 = true;
-		} else if (of_device_is_compatible(np, "arm,cortex-a7")) {
-			is_a7_a8_a9 = true;
-			has_arch_timer = true;
-		} else if (of_device_is_compatible(np, "arm,cortex-a15")) {
-			is_a15 = true;
+		if (of_device_is_compatible(np, "arm,cortex-a8")) {
+			div = 2;
+		} else if (of_device_is_compatible(np, "arm,cortex-a9")) {
+			div = 1;
+		} else if (of_device_is_compatible(np, "arm,cortex-a7") ||
+			 of_device_is_compatible(np, "arm,cortex-a15")) {
+			div = 1;
 			has_arch_timer = true;
 		}
 	}
 
 	of_node_put(cpus);
 
-	if (!max_freq)
+	if (!max_freq || !div)
 		return;
 
-	if (!has_arch_timer || !IS_ENABLED(CONFIG_ARM_ARCH_TIMER)) {
-		if (is_a7_a8_a9)
-			shmobile_setup_delay_hz(max_freq, 1, 3);
-		else if (is_a15)
-			shmobile_setup_delay_hz(max_freq, 2, 4);
-	}
+	if (!has_arch_timer || !IS_ENABLED(CONFIG_ARM_ARCH_TIMER))
+		shmobile_setup_delay_hz(max_freq, 1, div);
 }

commit 2e41e5fe88f99c03a77c4325870f160378b42268
Author: Geert Uytterhoeven <geert+renesas@glider.be>
Date:   Thu Jan 28 16:20:48 2016 +0100

    ARM: shmobile: Add includes providing forward declarations
    
    make C=1:
    
        arch/arm/mach-shmobile/timer.c:38:13: warning: symbol 'shmobile_init_delay' was not declared. Should it be static?
        arch/arm/mach-shmobile/suspend.c:37:29: warning: symbol 'shmobile_suspend_ops' was not declared. Should it be static?
        arch/arm/mach-shmobile/suspend.c:44:12: warning: symbol 'shmobile_suspend_init' was not declared. Should it be static?
        arch/arm/mach-shmobile/cpufreq.c:13:12: warning: symbol 'shmobile_cpufreq_init' was not declared. Should it be static?
    
    Include "common.h" to fix these.
    
    Signed-off-by: Geert Uytterhoeven <geert+renesas@glider.be>
    Signed-off-by: Simon Horman <horms+renesas@verge.net.au>

diff --git a/arch/arm/mach-shmobile/timer.c b/arch/arm/mach-shmobile/timer.c
index c17d4d3881ff..ad008e4b0c49 100644
--- a/arch/arm/mach-shmobile/timer.c
+++ b/arch/arm/mach-shmobile/timer.c
@@ -18,6 +18,8 @@
 #include <linux/delay.h>
 #include <linux/of_address.h>
 
+#include "common.h"
+
 static void __init shmobile_setup_delay_hz(unsigned int max_cpu_core_hz,
 					   unsigned int mult, unsigned int div)
 {

commit 93161cb4c3c27517f1b4516a880adaf7df4112e2
Author: Geert Uytterhoeven <geert+renesas@glider.be>
Date:   Tue Aug 4 20:03:11 2015 +0200

    ARM: shmobile: Remove obsolete earlytimer registration
    
    The last caller of shmobile_earlytimer_init() was removed in commit
    c99cd90d98a98aa1 ("ARM: shmobile: r8a7779: Remove legacy SoC code").
    
    Signed-off-by: Geert Uytterhoeven <geert+renesas@glider.be>
    Signed-off-by: Simon Horman <horms+renesas@verge.net.au>

diff --git a/arch/arm/mach-shmobile/timer.c b/arch/arm/mach-shmobile/timer.c
index f1d027aa7a81..c17d4d3881ff 100644
--- a/arch/arm/mach-shmobile/timer.c
+++ b/arch/arm/mach-shmobile/timer.c
@@ -77,24 +77,3 @@ void __init shmobile_init_delay(void)
 			shmobile_setup_delay_hz(max_freq, 2, 4);
 	}
 }
-
-static void __init shmobile_late_time_init(void)
-{
-	/*
-	 * Make sure all compiled-in early timers register themselves.
-	 *
-	 * Run probe() for two "earlytimer" devices, these will be the
-	 * clockevents and clocksource devices respectively. In the event
-	 * that only a clockevents device is available, we -ENODEV on the
-	 * clocksource and the jiffies clocksource is used transparently
-	 * instead. No error handling is necessary here.
-	 */
-	early_platform_driver_register_all("earlytimer");
-	early_platform_driver_probe("earlytimer", 2, 0);
-}
-
-void __init shmobile_earlytimer_init(void)
-{
-	late_time_init = shmobile_late_time_init;
-}
-

commit 20834a406ee20b57c796f9911f06600b71c75788
Author: Geert Uytterhoeven <geert+renesas@glider.be>
Date:   Wed Jun 17 11:34:21 2015 +0200

    ARM: shmobile: timer: r8a73a4 and r8a7790 are multi-platform only
    
    Since commits e042681894b62d60 ("ARM: shmobile: r8a7790: Remove legacy
    code") and 9d07d414d4c33d86 ("ARM: shmobile: r8a73a4: ape6evm: Remove
    legacy platform"), the R-Mobile APE6 and R-Car H2 SoCs are supported by
    multiplatform kernels only.
    Hence we can drop checks for these SoCs in legacy kernel builds.
    
    Signed-off-by: Geert Uytterhoeven <geert+renesas@glider.be>
    Signed-off-by: Simon Horman <horms+renesas@verge.net.au>

diff --git a/arch/arm/mach-shmobile/timer.c b/arch/arm/mach-shmobile/timer.c
index 0edf2a6d2bbe..f1d027aa7a81 100644
--- a/arch/arm/mach-shmobile/timer.c
+++ b/arch/arm/mach-shmobile/timer.c
@@ -70,18 +70,6 @@ void __init shmobile_init_delay(void)
 	if (!max_freq)
 		return;
 
-#ifdef CONFIG_ARCH_SHMOBILE_LEGACY
-	/* Non-multiplatform r8a73a4 SoC cannot use arch timer due
-	 * to GIC being initialized from C and arch timer via DT */
-	if (of_machine_is_compatible("renesas,r8a73a4"))
-		has_arch_timer = false;
-
-	/* Non-multiplatform r8a7790 SoC cannot use arch timer due
-	 * to GIC being initialized from C and arch timer via DT */
-	if (of_machine_is_compatible("renesas,r8a7790"))
-		has_arch_timer = false;
-#endif
-
 	if (!has_arch_timer || !IS_ENABLED(CONFIG_ARM_ARCH_TIMER)) {
 		if (is_a7_a8_a9)
 			shmobile_setup_delay_hz(max_freq, 1, 3);

commit 28111dda37e653781efc73c06229f006739b3982
Merge: eab8d6530cc0 77cf5166f21c
Author: Olof Johansson <olof@lixom.net>
Date:   Sun Feb 1 08:51:12 2015 -0800

    Merge tag 'renesas-soc-fixes3-for-v3.19' of git://git.kernel.org/pub/scm/linux/kernel/git/horms/renesas into fixes
    
    Merge "Third Round of Renesas ARM Based SoC Fixes for v3.19" from Simon Horman:
    
    * Instantiate GIC from C board code in legacy builds on r8a7790 and r8a73a4
    
    * tag 'renesas-soc-fixes3-for-v3.19' of git://git.kernel.org/pub/scm/linux/kernel/git/horms/renesas:
      ARM: shmobile: r8a7790: Instantiate GIC from C board code in legacy builds
      ARM: shmobile: r8a73a4: Instantiate GIC from C board code in legacy builds
    
    Signed-off-by: Olof Johansson <olof@lixom.net>

commit 77cf5166f21c3b73b04571311dc89a327424f594
Author: Magnus Damm <damm+renesas@opensource.se>
Date:   Thu Jan 29 16:25:32 2015 +0900

    ARM: shmobile: r8a7790: Instantiate GIC from C board code in legacy builds
    
    As of commit 9a1091ef0017c40a ("irqchip: gic: Support hierarchy irq
    domain."), the Lager legacy board support is known to be broken.
    
    The IRQ numbers of the GIC are now virtual, and no longer match the
    hardcoded hardware IRQ numbers in the legacy platform board code.
    
    To fix this issue specific to non-multiplatform r8a7790 and Lager:
     1) Instantiate the GIC from platform board code and also
     2) Skip over the DT arch timer as well as
     3) Force delay setup based on DT CPU frequency
    
    With these 3 fixes in place interrupts on Lager are now unbroken.
    
    Partially based on legacy GIC fix by Geert Uytterhoeven, thanks to
    him for the initial work.
    
    Signed-off-by: Magnus Damm <damm+renesas@opensource.se>
    Acked-by: Geert Uytterhoeven <geert+renesas@glider.be>
    Signed-off-by: Simon Horman <horms+renesas@verge.net.au>

diff --git a/arch/arm/mach-shmobile/timer.c b/arch/arm/mach-shmobile/timer.c
index 44d32a84b001..88f067bcec94 100644
--- a/arch/arm/mach-shmobile/timer.c
+++ b/arch/arm/mach-shmobile/timer.c
@@ -80,6 +80,11 @@ void __init shmobile_init_delay(void)
 	 * to GIC being initialized from C and arch timer via DT */
 	if (of_machine_is_compatible("renesas,r8a73a4"))
 		has_arch_timer = false;
+
+	/* Non-multiplatform r8a7790 SoC cannot use arch timer due
+	 * to GIC being initialized from C and arch timer via DT */
+	if (of_machine_is_compatible("renesas,r8a7790"))
+		has_arch_timer = false;
 #endif
 
 	if (!has_arch_timer || !IS_ENABLED(CONFIG_ARM_ARCH_TIMER)) {

commit 974b072f71e350bf2c5fb9cfd5c6c9d341a53300
Author: Magnus Damm <damm+renesas@opensource.se>
Date:   Wed Jan 28 21:46:45 2015 +0900

    ARM: shmobile: r8a73a4: Instantiate GIC from C board code in legacy builds
    
    As of commit 9a1091ef0017c40a ("irqchip: gic: Support hierarchy irq
    domain."), the APE6EVM legacy board support is known to be broken.
    
    The IRQ numbers of the GIC are now virtual, and no longer match the
    hardcoded hardware IRQ numbers in the legacy platform board code.
    
    To fix this issue specific to non-muliplatform r8a73a4 and APE6EVM:
     1) Instantiate the GIC from platform board code and also
     2) Skip over the DT arch timer as well as
     3) Force delay setup based on DT CPU frequency
    
    With these 3 fixes in place interrupts on APE6EVM are now unbroken.
    
    Partially based on legacy GIC fix by Geert Uytterhoeven, thanks to
    him for the initial work.
    
    Signed-off-by: Magnus Damm <damm+renesas@opensource.se>
    Acked-by: Geert Uytterhoeven <geert+renesas@glider.be>
    Signed-off-by: Simon Horman <horms+renesas@verge.net.au>

diff --git a/arch/arm/mach-shmobile/timer.c b/arch/arm/mach-shmobile/timer.c
index 32ee335d2632..44d32a84b001 100644
--- a/arch/arm/mach-shmobile/timer.c
+++ b/arch/arm/mach-shmobile/timer.c
@@ -75,6 +75,13 @@ void __init shmobile_init_delay(void)
 	if (!max_freq)
 		return;
 
+#ifdef CONFIG_ARCH_SHMOBILE_LEGACY
+	/* Non-multiplatform r8a73a4 SoC cannot use arch timer due
+	 * to GIC being initialized from C and arch timer via DT */
+	if (of_machine_is_compatible("renesas,r8a73a4"))
+		has_arch_timer = false;
+#endif
+
 	if (!has_arch_timer || !IS_ENABLED(CONFIG_ARM_ARCH_TIMER)) {
 		if (is_a7_a8_a9)
 			shmobile_setup_delay_hz(max_freq, 1, 3);

commit 6cd94d5e57ab97ddd672b707ab4bb639672c1727
Merge: 6c9e92476bc9 842f7d2c4d39
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Tue Dec 9 14:38:28 2014 -0800

    Merge tag 'soc-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/arm/arm-soc
    
    Pull ARM SoC platform changes from Arnd Bergmann:
     "New and updated SoC support, notable changes include:
    
       - bcm:
            brcmstb SMP support
            initial iproc/cygnus support
       - exynos:
            Exynos4415 SoC support
            PMU and suspend support for Exynos5420
            PMU support for Exynos3250
            pm related maintenance
       - imx:
            new LS1021A SoC support
            vybrid 610 global timer support
       - integrator:
            convert to using multiplatform configuration
       - mediatek:
            earlyprintk support for mt8127/mt8135
       - meson:
            meson8 soc and l2 cache controller support
       - mvebu:
            Armada 38x CPU hotplug support
            drop support for prerelease Armada 375 Z1 stepping
            extended suspend support, now works on Armada 370/XP
       - omap:
            hwmod related maintenance
            prcm cleanup
       - pxa:
            initial pxa27x DT handling
       - rockchip:
            SMP support for rk3288
            add cpu frequency scaling support
       - shmobile:
            r8a7740 power domain support
            various small restart, timer, pci apmu changes
       - sunxi:
            Allwinner A80 (sun9i) earlyprintk support
       - ux500:
            power domain support
    
      Overall, a significant chunk of changes, coming mostly from the usual
      suspects: omap, shmobile, samsung and mvebu, all of which already
      contain a lot of platform specific code in arch/arm"
    
    * tag 'soc-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/arm/arm-soc: (187 commits)
      ARM: mvebu: use the cpufreq-dt platform_data for independent clocks
      soc: integrator: Add terminating entry for integrator_cm_match
      ARM: mvebu: add SDRAM controller description for Armada XP
      ARM: mvebu: adjust mbus controller description on Armada 370/XP
      ARM: mvebu: add suspend/resume DT information for Armada XP GP
      ARM: mvebu: synchronize secondary CPU clocks on resume
      ARM: mvebu: make sure MMU is disabled in armada_370_xp_cpu_resume
      ARM: mvebu: Armada XP GP specific suspend/resume code
      ARM: mvebu: reserve the first 10 KB of each memory bank for suspend/resume
      ARM: mvebu: implement suspend/resume support for Armada XP
      clk: mvebu: add suspend/resume for gatable clocks
      bus: mvebu-mbus: provide a mechanism to save SDRAM window configuration
      bus: mvebu-mbus: suspend/resume support
      clocksource: time-armada-370-xp: add suspend/resume support
      irqchip: armada-370-xp: Add suspend/resume support
      ARM: add lolevel debug support for asm9260
      ARM: add mach-asm9260
      ARM: EXYNOS: use u8 for val[] in struct exynos_pmu_conf
      power: reset: imx-snvs-poweroff: add power off driver for i.mx6
      ARM: imx: temporarily remove CONFIG_SOC_FSL from LS1021A
      ...

commit 335204dfb83b3105cf4a666d1ad024917831cbdc
Author: Laurent Pinchart <laurent.pinchart+renesas@ideasonboard.com>
Date:   Sun Oct 26 16:20:27 2014 +0200

    ARM: shmobile: Remove FSF address from copyright headers
    
    The information is already included in the COPYING file in the kernel
    sources root directory, we don't want to modify all source files when
    the FSF will move to a new address, and I'm tired of seeing the related
    checkpatch.pl warnings.
    
    Signed-off-by: Laurent Pinchart <laurent.pinchart+renesas@ideasonboard.com>
    Signed-off-by: Simon Horman <horms+renesas@verge.net.au>

diff --git a/arch/arm/mach-shmobile/timer.c b/arch/arm/mach-shmobile/timer.c
index 87c6be1e79bd..1081b763e0f3 100644
--- a/arch/arm/mach-shmobile/timer.c
+++ b/arch/arm/mach-shmobile/timer.c
@@ -12,11 +12,6 @@
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
- *
  */
 #include <linux/platform_device.h>
 #include <linux/clocksource.h>

commit 27f3c70874fc1d114e26c807e900fec4b50b1217
Author: Magnus Damm <damm+renesas@opensource.se>
Date:   Mon Oct 6 08:59:20 2014 +0900

    ARM: shmobile: Handle CA7 arch timer delay
    
    Update the delay code to include arch timer checks
    for CA7. From a arch timer availability perspective
    CA7 should be treated same as CA15.
    
    Signed-off-by: Magnus Damm <damm+renesas@opensource.se>
    Signed-off-by: Simon Horman <horms+renesas@verge.net.au>

diff --git a/arch/arm/mach-shmobile/timer.c b/arch/arm/mach-shmobile/timer.c
index 87c6be1e79bd..32ee335d2632 100644
--- a/arch/arm/mach-shmobile/timer.c
+++ b/arch/arm/mach-shmobile/timer.c
@@ -45,6 +45,7 @@ void __init shmobile_init_delay(void)
 	struct device_node *np, *cpus;
 	bool is_a7_a8_a9 = false;
 	bool is_a15 = false;
+	bool has_arch_timer = false;
 	u32 max_freq = 0;
 
 	cpus = of_find_node_by_path("/cpus");
@@ -57,12 +58,16 @@ void __init shmobile_init_delay(void)
 		if (!of_property_read_u32(np, "clock-frequency", &freq))
 			max_freq = max(max_freq, freq);
 
-		if (of_device_is_compatible(np, "arm,cortex-a7") ||
-		    of_device_is_compatible(np, "arm,cortex-a8") ||
-		    of_device_is_compatible(np, "arm,cortex-a9"))
+		if (of_device_is_compatible(np, "arm,cortex-a8") ||
+		    of_device_is_compatible(np, "arm,cortex-a9")) {
 			is_a7_a8_a9 = true;
-		else if (of_device_is_compatible(np, "arm,cortex-a15"))
+		} else if (of_device_is_compatible(np, "arm,cortex-a7")) {
+			is_a7_a8_a9 = true;
+			has_arch_timer = true;
+		} else if (of_device_is_compatible(np, "arm,cortex-a15")) {
 			is_a15 = true;
+			has_arch_timer = true;
+		}
 	}
 
 	of_node_put(cpus);
@@ -70,10 +75,12 @@ void __init shmobile_init_delay(void)
 	if (!max_freq)
 		return;
 
-	if (is_a7_a8_a9)
-		shmobile_setup_delay_hz(max_freq, 1, 3);
-	else if (is_a15 && !IS_ENABLED(CONFIG_ARM_ARCH_TIMER))
-		shmobile_setup_delay_hz(max_freq, 2, 4);
+	if (!has_arch_timer || !IS_ENABLED(CONFIG_ARM_ARCH_TIMER)) {
+		if (is_a7_a8_a9)
+			shmobile_setup_delay_hz(max_freq, 1, 3);
+		else if (is_a15)
+			shmobile_setup_delay_hz(max_freq, 2, 4);
+	}
 }
 
 static void __init shmobile_late_time_init(void)

commit 138310e18b70caed1b7acf02a2c97170dcb3c55d
Merge: eb492df96161 5923abb205e0
Author: Arnd Bergmann <arnd@arndb.de>
Date:   Tue Sep 9 17:09:35 2014 +0200

    Merge tag 'renesas-soc3-for-v3.18' of git://git.kernel.org/pub/scm/linux/kernel/git/horms/renesas into next/soc
    
    Pull "Third Round of Renesas ARM Based SoC Soc Updates for v3.18" from Simon Horman:
    
    * Initial r8a7794 SoC support
    * Support Cortex-A7 in shmobile_init_delay()
    
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>
    
    * tag 'renesas-soc3-for-v3.18' of git://git.kernel.org/pub/scm/linux/kernel/git/horms/renesas:
      ARM: shmobile: Initial r8a7794 SoC support
      ARM: shmobile: support Cortex-A7 in shmobile_init_delay()

commit 0dc50fd3dc4a70d0d317103188c129d378125643
Author: Ulrich Hecht <ulrich.hecht+renesas@gmail.com>
Date:   Thu Sep 4 16:02:27 2014 +0200

    ARM: shmobile: support Cortex-A7 in shmobile_init_delay()
    
    Signed-off-by: Ulrich Hecht <ulrich.hecht+renesas@gmail.com>
    Acked-by: Magnus Damm <damm+renesas@opensource.se>
    Signed-off-by: Simon Horman <horms+renesas@verge.net.au>

diff --git a/arch/arm/mach-shmobile/timer.c b/arch/arm/mach-shmobile/timer.c
index 942efdc82a62..0b01770c2b37 100644
--- a/arch/arm/mach-shmobile/timer.c
+++ b/arch/arm/mach-shmobile/timer.c
@@ -60,7 +60,7 @@ void __init shmobile_setup_delay(unsigned int max_cpu_core_mhz,
 void __init shmobile_init_delay(void)
 {
 	struct device_node *np, *cpus;
-	bool is_a8_a9 = false;
+	bool is_a7_a8_a9 = false;
 	bool is_a15 = false;
 	u32 max_freq = 0;
 
@@ -74,9 +74,10 @@ void __init shmobile_init_delay(void)
 		if (!of_property_read_u32(np, "clock-frequency", &freq))
 			max_freq = max(max_freq, freq);
 
-		if (of_device_is_compatible(np, "arm,cortex-a8") ||
+		if (of_device_is_compatible(np, "arm,cortex-a7") ||
+		    of_device_is_compatible(np, "arm,cortex-a8") ||
 		    of_device_is_compatible(np, "arm,cortex-a9"))
-			is_a8_a9 = true;
+			is_a7_a8_a9 = true;
 		else if (of_device_is_compatible(np, "arm,cortex-a15"))
 			is_a15 = true;
 	}
@@ -86,7 +87,7 @@ void __init shmobile_init_delay(void)
 	if (!max_freq)
 		return;
 
-	if (is_a8_a9)
+	if (is_a7_a8_a9)
 		shmobile_setup_delay_hz(max_freq, 1, 3);
 	else if (is_a15 && !IS_ENABLED(CONFIG_ARM_ARCH_TIMER))
 		shmobile_setup_delay_hz(max_freq, 2, 4);

commit 7dd4cfd7f8c2976a8d65022146386480474501ca
Author: Magnus Damm <damm+renesas@opensource.se>
Date:   Wed Aug 20 22:03:12 2014 +0900

    ARM: shmobile: Remove shmobile_setup_delay()
    
    All ARM mach-shmobile SoCs and boards now rely on DTS for
    CPU Frequency information, so remove the unused function
    shmobile_setup_delay(). While at it, make the function
    shmobile_setup_delay_hz() static.
    
    Signed-off-by: Magnus Damm <damm+renesas@opensource.se>
    Signed-off-by: Simon Horman <horms+renesas@verge.net.au>

diff --git a/arch/arm/mach-shmobile/timer.c b/arch/arm/mach-shmobile/timer.c
index 942efdc82a62..adce98b44f8a 100644
--- a/arch/arm/mach-shmobile/timer.c
+++ b/arch/arm/mach-shmobile/timer.c
@@ -23,8 +23,8 @@
 #include <linux/delay.h>
 #include <linux/of_address.h>
 
-void __init shmobile_setup_delay_hz(unsigned int max_cpu_core_hz,
-				    unsigned int mult, unsigned int div)
+static void __init shmobile_setup_delay_hz(unsigned int max_cpu_core_hz,
+					   unsigned int mult, unsigned int div)
 {
 	/* calculate a worst-case loops-per-jiffy value
 	 * based on maximum cpu core hz setting and the
@@ -40,23 +40,6 @@ void __init shmobile_setup_delay_hz(unsigned int max_cpu_core_hz,
 		preset_lpj = max_cpu_core_hz / value;
 }
 
-void __init shmobile_setup_delay(unsigned int max_cpu_core_mhz,
-				 unsigned int mult, unsigned int div)
-{
-	/* calculate a worst-case loops-per-jiffy value
-	 * based on maximum cpu core mhz setting and the
-	 * __delay() implementation in arch/arm/lib/delay.S
-	 *
-	 * this will result in a longer delay than expected
-	 * when the cpu core runs on lower frequencies.
-	 */
-
-	unsigned int value = (1000000 * mult) / (HZ * div);
-
-	if (!preset_lpj)
-		preset_lpj = max_cpu_core_mhz * value;
-}
-
 void __init shmobile_init_delay(void)
 {
 	struct device_node *np, *cpus;

commit edc8fb1d6ebdfc4efa009073586d3567c3368475
Author: Laurent Pinchart <laurent.pinchart+renesas@ideasonboard.com>
Date:   Wed May 21 15:31:05 2014 +0200

    ARM: shmobile: Fix device node reference leakage in shmobile_init_delay
    
    The of_find_compatible_node() function returns a new reference to the
    found node. Instead of just adding of_node_put() calls, simplify the
    code by moving the CPU identification logic inside the loop over cpu
    nodes, in order to lower complexity from O(n) to O(1) by replacing
    of_find_compatible_node() calls with of_device_is_compatible().
    
    Signed-off-by: Laurent Pinchart <laurent.pinchart+renesas@ideasonboard.com>
    Acked-by: Magnus Damm <damm+renesas@opensource.se>
    Signed-off-by: Simon Horman <horms+renesas@verge.net.au>

diff --git a/arch/arm/mach-shmobile/timer.c b/arch/arm/mach-shmobile/timer.c
index 68bc0b82226d..942efdc82a62 100644
--- a/arch/arm/mach-shmobile/timer.c
+++ b/arch/arm/mach-shmobile/timer.c
@@ -59,29 +59,37 @@ void __init shmobile_setup_delay(unsigned int max_cpu_core_mhz,
 
 void __init shmobile_init_delay(void)
 {
-	struct device_node *np, *parent;
-	u32 max_freq, freq;
-
-	max_freq = 0;
-
-	parent = of_find_node_by_path("/cpus");
-	if (parent) {
-		for_each_child_of_node(parent, np) {
-			if (!of_property_read_u32(np, "clock-frequency", &freq))
-				max_freq = max(max_freq, freq);
-		}
-		of_node_put(parent);
-	}
+	struct device_node *np, *cpus;
+	bool is_a8_a9 = false;
+	bool is_a15 = false;
+	u32 max_freq = 0;
+
+	cpus = of_find_node_by_path("/cpus");
+	if (!cpus)
+		return;
+
+	for_each_child_of_node(cpus, np) {
+		u32 freq;
+
+		if (!of_property_read_u32(np, "clock-frequency", &freq))
+			max_freq = max(max_freq, freq);
 
-	if (max_freq) {
-		if (of_find_compatible_node(NULL, NULL, "arm,cortex-a8"))
-			shmobile_setup_delay_hz(max_freq, 1, 3);
-		else if (of_find_compatible_node(NULL, NULL, "arm,cortex-a9"))
-			shmobile_setup_delay_hz(max_freq, 1, 3);
-		else if (of_find_compatible_node(NULL, NULL, "arm,cortex-a15"))
-			if (!IS_ENABLED(CONFIG_ARM_ARCH_TIMER))
-				shmobile_setup_delay_hz(max_freq, 2, 4);
+		if (of_device_is_compatible(np, "arm,cortex-a8") ||
+		    of_device_is_compatible(np, "arm,cortex-a9"))
+			is_a8_a9 = true;
+		else if (of_device_is_compatible(np, "arm,cortex-a15"))
+			is_a15 = true;
 	}
+
+	of_node_put(cpus);
+
+	if (!max_freq)
+		return;
+
+	if (is_a8_a9)
+		shmobile_setup_delay_hz(max_freq, 1, 3);
+	else if (is_a15 && !IS_ENABLED(CONFIG_ARM_ARCH_TIMER))
+		shmobile_setup_delay_hz(max_freq, 2, 4);
 }
 
 static void __init shmobile_late_time_init(void)

commit f492b81777c93b33afe892b424e022022b5bc297
Author: Simon Horman <horms+renesas@verge.net.au>
Date:   Tue May 13 15:59:18 2014 +0900

    ARM: shmobile: Set clock frequency in HZ from OF nodes
    
    shmobile_init_delay() looks for OF "clock-frequency" to determine
    the delay which is set by calling shmobile_setup_delay().
    
    Unfortunately this seems to be incorrect in detail as
    "clock-frequency" node values are in HZ whereas the frequency
    argument to shmobile_setup_delay() is in MHz.
    
    Provide a variant of shmobile_setup_delay() that accepts HZ to
    correct this problem.
    
    Signed-off-by: Simon Horman <horms+renesas@verge.net.au>

diff --git a/arch/arm/mach-shmobile/timer.c b/arch/arm/mach-shmobile/timer.c
index ccecde9a3362..68bc0b82226d 100644
--- a/arch/arm/mach-shmobile/timer.c
+++ b/arch/arm/mach-shmobile/timer.c
@@ -23,6 +23,23 @@
 #include <linux/delay.h>
 #include <linux/of_address.h>
 
+void __init shmobile_setup_delay_hz(unsigned int max_cpu_core_hz,
+				    unsigned int mult, unsigned int div)
+{
+	/* calculate a worst-case loops-per-jiffy value
+	 * based on maximum cpu core hz setting and the
+	 * __delay() implementation in arch/arm/lib/delay.S
+	 *
+	 * this will result in a longer delay than expected
+	 * when the cpu core runs on lower frequencies.
+	 */
+
+	unsigned int value = HZ * div / mult;
+
+	if (!preset_lpj)
+		preset_lpj = max_cpu_core_hz / value;
+}
+
 void __init shmobile_setup_delay(unsigned int max_cpu_core_mhz,
 				 unsigned int mult, unsigned int div)
 {
@@ -58,12 +75,12 @@ void __init shmobile_init_delay(void)
 
 	if (max_freq) {
 		if (of_find_compatible_node(NULL, NULL, "arm,cortex-a8"))
-			shmobile_setup_delay(max_freq, 1, 3);
+			shmobile_setup_delay_hz(max_freq, 1, 3);
 		else if (of_find_compatible_node(NULL, NULL, "arm,cortex-a9"))
-			shmobile_setup_delay(max_freq, 1, 3);
+			shmobile_setup_delay_hz(max_freq, 1, 3);
 		else if (of_find_compatible_node(NULL, NULL, "arm,cortex-a15"))
 			if (!IS_ENABLED(CONFIG_ARM_ARCH_TIMER))
-				shmobile_setup_delay(max_freq, 2, 4);
+				shmobile_setup_delay_hz(max_freq, 2, 4);
 	}
 }
 

commit c39dae380b4a11f1050a2ef6607598dcbe0541be
Author: Magnus Damm <damm@opensource.se>
Date:   Thu Mar 6 12:28:24 2014 +0900

    ARM: shmobile: Add shared shmobile_init_delay()
    
    Introduce shmobile_init_delay() that gets CPU specific
    parameters from DT and sets up the early delay from
    there. This allows us to both remove frequency information
    from the C code and consolidate existing code.
    
    Signed-off-by: Magnus Damm <damm@opensource.se>
    Signed-off-by: Simon Horman <horms+renesas@verge.net.au>

diff --git a/arch/arm/mach-shmobile/timer.c b/arch/arm/mach-shmobile/timer.c
index 62d7052d6f21..ccecde9a3362 100644
--- a/arch/arm/mach-shmobile/timer.c
+++ b/arch/arm/mach-shmobile/timer.c
@@ -21,6 +21,7 @@
 #include <linux/platform_device.h>
 #include <linux/clocksource.h>
 #include <linux/delay.h>
+#include <linux/of_address.h>
 
 void __init shmobile_setup_delay(unsigned int max_cpu_core_mhz,
 				 unsigned int mult, unsigned int div)
@@ -39,6 +40,33 @@ void __init shmobile_setup_delay(unsigned int max_cpu_core_mhz,
 		preset_lpj = max_cpu_core_mhz * value;
 }
 
+void __init shmobile_init_delay(void)
+{
+	struct device_node *np, *parent;
+	u32 max_freq, freq;
+
+	max_freq = 0;
+
+	parent = of_find_node_by_path("/cpus");
+	if (parent) {
+		for_each_child_of_node(parent, np) {
+			if (!of_property_read_u32(np, "clock-frequency", &freq))
+				max_freq = max(max_freq, freq);
+		}
+		of_node_put(parent);
+	}
+
+	if (max_freq) {
+		if (of_find_compatible_node(NULL, NULL, "arm,cortex-a8"))
+			shmobile_setup_delay(max_freq, 1, 3);
+		else if (of_find_compatible_node(NULL, NULL, "arm,cortex-a9"))
+			shmobile_setup_delay(max_freq, 1, 3);
+		else if (of_find_compatible_node(NULL, NULL, "arm,cortex-a15"))
+			if (!IS_ENABLED(CONFIG_ARM_ARCH_TIMER))
+				shmobile_setup_delay(max_freq, 2, 4);
+	}
+}
+
 static void __init shmobile_late_time_init(void)
 {
 	/*

commit 13eb604665c94d4cd9d7e2aeceef974cf1f30701
Author: Magnus Damm <damm@opensource.se>
Date:   Thu Aug 1 04:03:09 2013 +0900

    ARM: shmobile: Remove unused shmobile_init_time()
    
    Remove shmobile_timer_init() since it now is unused.
    
    Signed-off-by: Magnus Damm <damm@opensource.se>
    Signed-off-by: Simon Horman <horms+renesas@verge.net.au>

diff --git a/arch/arm/mach-shmobile/timer.c b/arch/arm/mach-shmobile/timer.c
index f321dbeb2379..62d7052d6f21 100644
--- a/arch/arm/mach-shmobile/timer.c
+++ b/arch/arm/mach-shmobile/timer.c
@@ -59,7 +59,3 @@ void __init shmobile_earlytimer_init(void)
 	late_time_init = shmobile_late_time_init;
 }
 
-void __init shmobile_timer_init(void)
-{
-	clocksource_of_init();
-}

commit 0583fe478a7d93be2c814b7e50d6e81c287edfe8
Author: Rob Herring <rob.herring@calxeda.com>
Date:   Wed Apr 10 18:27:51 2013 -0500

    ARM: convert arm/arm64 arch timer to use CLKSRC_OF init
    
    This converts arm and arm64 to use CLKSRC_OF DT based initialization for
    the arch timer. A new function arch_timer_arch_init is added to allow for
    arch specific setup.
    
    This has a side effect of enabling sched_clock on omap5 and exynos5. There
    should not be any reason not to use the arch timers for sched_clock.
    
    Signed-off-by: Rob Herring <rob.herring@calxeda.com>
    Cc: Russell King <linux@arm.linux.org.uk>
    Cc: Kukjin Kim <kgene.kim@samsung.com>
    Cc: Tony Lindgren <tony@atomide.com>
    Cc: Simon Horman <horms@verge.net.au>
    Cc: Magnus Damm <magnus.damm@gmail.com>
    Cc: Catalin Marinas <catalin.marinas@arm.com>
    Cc: Will Deacon <will.deacon@arm.com>
    Cc: John Stultz <john.stultz@linaro.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: linux-samsung-soc@vger.kernel.org
    Cc: linux-omap@vger.kernel.org
    Cc: linux-sh@vger.kernel.org
    Acked-by: Santosh Shilimkar <santosh.shilimkar@ti.com>

diff --git a/arch/arm/mach-shmobile/timer.c b/arch/arm/mach-shmobile/timer.c
index 3d16d4dff01b..f321dbeb2379 100644
--- a/arch/arm/mach-shmobile/timer.c
+++ b/arch/arm/mach-shmobile/timer.c
@@ -19,10 +19,8 @@
  *
  */
 #include <linux/platform_device.h>
+#include <linux/clocksource.h>
 #include <linux/delay.h>
-#include <asm/arch_timer.h>
-#include <asm/mach/time.h>
-#include <asm/smp_twd.h>
 
 void __init shmobile_setup_delay(unsigned int max_cpu_core_mhz,
 				 unsigned int mult, unsigned int div)
@@ -63,6 +61,5 @@ void __init shmobile_earlytimer_init(void)
 
 void __init shmobile_timer_init(void)
 {
-	arch_timer_of_register();
-	arch_timer_sched_clock_init();
+	clocksource_of_init();
 }

commit dbe1c3defb3844772634446492ea6c13882596ec
Author: Magnus Damm <damm@opensource.se>
Date:   Tue Feb 5 16:30:49 2013 +0900

    ARM: shmobile: Register ARM architected timer
    
    Register ARM architected timer by default for all mach-shmobile
    systems using late timer.
    
    Signed-off-by: Magnus Damm <damm@opensource.se>
    Signed-off-by: Simon Horman <horms+renesas@verge.net.au>

diff --git a/arch/arm/mach-shmobile/timer.c b/arch/arm/mach-shmobile/timer.c
index fdbe54a11555..3d16d4dff01b 100644
--- a/arch/arm/mach-shmobile/timer.c
+++ b/arch/arm/mach-shmobile/timer.c
@@ -20,6 +20,7 @@
  */
 #include <linux/platform_device.h>
 #include <linux/delay.h>
+#include <asm/arch_timer.h>
 #include <asm/mach/time.h>
 #include <asm/smp_twd.h>
 
@@ -62,4 +63,6 @@ void __init shmobile_earlytimer_init(void)
 
 void __init shmobile_timer_init(void)
 {
+	arch_timer_of_register();
+	arch_timer_sched_clock_init();
 }

commit 6bb27d7349db51b50c40534710fe164ca0d58902
Author: Stephen Warren <swarren@nvidia.com>
Date:   Thu Nov 8 12:40:59 2012 -0700

    ARM: delete struct sys_timer
    
    Now that the only field in struct sys_timer is .init, delete the struct,
    and replace the machine descriptor .timer field with the initialization
    function itself.
    
    This will enable moving timer drivers into drivers/clocksource without
    having to place a public prototype of each struct sys_timer object into
    include/linux; the intent is to create a single of_clocksource_init()
    function that determines which timer driver to initialize by scanning
    the device dtree, much like the proposed irqchip_init() at:
    http://www.spinics.net/lists/arm-kernel/msg203686.html
    
    Includes mach-omap2 fixes from Igor Grinberg.
    
    Tested-by: Robert Jarzmik <robert.jarzmik@free.fr>
    Signed-off-by: Stephen Warren <swarren@nvidia.com>

diff --git a/arch/arm/mach-shmobile/timer.c b/arch/arm/mach-shmobile/timer.c
index a68919727e24..fdbe54a11555 100644
--- a/arch/arm/mach-shmobile/timer.c
+++ b/arch/arm/mach-shmobile/timer.c
@@ -60,10 +60,6 @@ void __init shmobile_earlytimer_init(void)
 	late_time_init = shmobile_late_time_init;
 }
 
-static void __init shmobile_timer_init(void)
+void __init shmobile_timer_init(void)
 {
 }
-
-struct sys_timer shmobile_timer = {
-	.init		= shmobile_timer_init,
-};

commit 173bf69a7af142e0325fa514954f6eeb2d20cc1d
Author: Magnus Damm <damm@opensource.se>
Date:   Thu May 10 00:37:48 2012 +0200

    ARM / mach-shmobile: Use preset_lpj with calibrate_delay()
    
    Update the mach-shmobile shared delay calibration code for late
    timers. All existing in-tree non-DT socs are however using early
    timers today and they are unaffected by this change.
    
    The patch modifies shmobile_setup_delay() from using lpj_fine
    to preset_lpj. This change allows us to preset the worst case
    loops-per-jiffy value to all CPU cores on the system.
    
    The old code which made use of lpj_fine did not affect the
    secondary CPU cores which made it impossible to boot on SMP
    without early timers.
    
    Needed for SMP SoCs using late timers like EMEV2 or any other
    mach-shmobile SMP SoC that makes use of late timers via DT.
    
    Signed-off-by: Magnus Damm <damm@opensource.se>
    Signed-off-by: Rafael J. Wysocki <rjw@sisk.pl>

diff --git a/arch/arm/mach-shmobile/timer.c b/arch/arm/mach-shmobile/timer.c
index cba39d866687..a68919727e24 100644
--- a/arch/arm/mach-shmobile/timer.c
+++ b/arch/arm/mach-shmobile/timer.c
@@ -36,7 +36,8 @@ void __init shmobile_setup_delay(unsigned int max_cpu_core_mhz,
 
 	unsigned int value = (1000000 * mult) / (HZ * div);
 
-	lpj_fine = max_cpu_core_mhz * value;
+	if (!preset_lpj)
+		preset_lpj = max_cpu_core_mhz * value;
 }
 
 static void __init shmobile_late_time_init(void)

commit 15d2c83948a3f47095017dbcf2060132bcd8c00c
Merge: e994d5eb7c3e 3b7b70552afe
Author: Rafael J. Wysocki <rjw@sisk.pl>
Date:   Sat May 12 22:20:36 2012 +0200

    Merge branch 'renesas-dt' into renesas-soc-core
    
    * renesas-dt:
      ARM: mach-shmobile: sh7372 generic board support via DT V2
      ARM: mach-shmobile: Rework sh7372 INTCS demuxer V2
      ARM: mach-shmobile: Use INTC_IRQ_PINS_16H on sh7372
      ARM: mach-shmobile: Use 0x3400 as INTCS vector offset
      ARM: mach-shmobile: Introduce INTC_IRQ_PINS_16H
      ARM: mach-shmobile: Introduce shmobile_setup_delay()

commit d6720003c3732db891f6b5b10691a9c13ff6c46b
Author: Kuninori Morimoto <kuninori.morimoto.gx@renesas.com>
Date:   Thu May 10 00:26:58 2012 -0700

    ARM / mach-shmobile: sh73a0 SMP TWD boot regression fix
    
    Fix SMP TWD boot regression on sh73a0 based platforms caused by:
    
    4200b16 ARM: shmobile: convert to twd_local_timer_register() interface
    
    After the merge of the above commit it has been impossible to boot
    sh73a0 based SoCs with SMP enabled and CONFIG_HAVE_ARM_TWD=y. The
    kernel crashes at smp_init_cpus() timing which is before the console
    has been initialized, so to the user this looks like a kernel lock up
    without any particular error message.
    
    This patch fixes the regression on sh73a0 by moving the TWD
    registration code from smp_init_cpus() to sys_timer->init() time.
    
    This patch removed shmobile_twd_init() which is no longer needed
    
    Signed-off-by: Kuninori Morimoto <kuninori.morimoto.gx@renesas.com>
    Signed-off-by: Magnus Damm <damm@opensource.se>
    Signed-off-by: Rafael J. Wysocki <rjw@sisk.pl>

diff --git a/arch/arm/mach-shmobile/timer.c b/arch/arm/mach-shmobile/timer.c
index 2fba5f3d1c8a..8b79e7917a23 100644
--- a/arch/arm/mach-shmobile/timer.c
+++ b/arch/arm/mach-shmobile/timer.c
@@ -46,15 +46,6 @@ static void __init shmobile_timer_init(void)
 {
 }
 
-void __init shmobile_twd_init(struct twd_local_timer *twd_local_timer)
-{
-#ifdef CONFIG_HAVE_ARM_TWD
-	int err = twd_local_timer_register(twd_local_timer);
-	if (err)
-		pr_err("twd_local_timer_register failed %d\n", err);
-#endif
-}
-
 struct sys_timer shmobile_timer = {
 	.init		= shmobile_timer_init,
 };

commit 0f2c9f20e4e339de30cfd5613dfa9505e7b9c58b
Author: Magnus Damm <damm@opensource.se>
Date:   Wed Mar 28 19:22:30 2012 +0900

    ARM: mach-shmobile: Introduce shmobile_setup_delay()
    
    Add the function shmobile_setup_delay() to let platforms
    configure their maximum loops per jiffy delay. With this
    jiffies calculation done the dependency on early timer
    is removed.
    
    In the future this allows us to assign timers
    using the regular driver model via the device tree.
    
    Signed-off-by: Magnus Damm <damm@opensource.se>
    Signed-off-by: Rafael J. Wysocki <rjw@sisk.pl>

diff --git a/arch/arm/mach-shmobile/timer.c b/arch/arm/mach-shmobile/timer.c
index 2fba5f3d1c8a..599e0081a533 100644
--- a/arch/arm/mach-shmobile/timer.c
+++ b/arch/arm/mach-shmobile/timer.c
@@ -19,9 +19,26 @@
  *
  */
 #include <linux/platform_device.h>
+#include <linux/delay.h>
 #include <asm/mach/time.h>
 #include <asm/smp_twd.h>
 
+void __init shmobile_setup_delay(unsigned int max_cpu_core_mhz,
+				 unsigned int mult, unsigned int div)
+{
+	/* calculate a worst-case loops-per-jiffy value
+	 * based on maximum cpu core mhz setting and the
+	 * __delay() implementation in arch/arm/lib/delay.S
+	 *
+	 * this will result in a longer delay than expected
+	 * when the cpu core runs on lower frequencies.
+	 */
+
+	unsigned int value = (1000000 * mult) / (HZ * div);
+
+	lpj_fine = max_cpu_core_mhz * value;
+}
+
 static void __init shmobile_late_time_init(void)
 {
 	/*

commit b2f1df8d2fc14bf7e6d9d967043d4b60c2efd8dc
Merge: c0206e228e34 5cd9eb2736a5
Author: Arnd Bergmann <arnd@arndb.de>
Date:   Mon Mar 19 20:46:32 2012 +0000

    Merge branch 'renesas/timer' into next/timer
    
    Conflicts:
            arch/arm/mach-shmobile/timer.c
    
    This resolves a nonobvious merge conflict between renesas
    timer changes in the global timer changes with those
    from the renesas soc branch and last minute bug fixes that
    went into v3.3.
    
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>

commit 4200b16d58cd34ff8e1616d8ed77417f8fc44864
Author: Marc Zyngier <marc.zyngier@arm.com>
Date:   Tue Jan 10 19:44:19 2012 +0000

    ARM: shmobile: convert to twd_local_timer_register() interface
    
    Add support for the new smp_twd runtime registration interface
    to the shmobile platforms, and remove the old compile-time support.
    
    Cc: Magnus Damm <magnus.damm@gmail.com>
    Cc: Paul Mundt <lethal@linux-sh.org>
    Signed-off-by: Marc Zyngier <marc.zyngier@arm.com>

diff --git a/arch/arm/mach-shmobile/timer.c b/arch/arm/mach-shmobile/timer.c
index 895794b543cd..be16231e86fc 100644
--- a/arch/arm/mach-shmobile/timer.c
+++ b/arch/arm/mach-shmobile/timer.c
@@ -20,6 +20,7 @@
  */
 #include <linux/platform_device.h>
 #include <asm/mach/time.h>
+#include <asm/smp_twd.h>
 
 static void __init shmobile_late_time_init(void)
 {
@@ -41,6 +42,15 @@ static void __init shmobile_timer_init(void)
 	late_time_init = shmobile_late_time_init;
 }
 
+void __init shmobile_twd_init(struct twd_local_timer *twd_local_timer)
+{
+#ifdef CONFIG_HAVE_ARM_TWD
+	int err = twd_local_timer_register(twd_local_timer);
+	if (err)
+		pr_err("twd_local_timer_register failed %d\n", err);
+#endif
+}
+
 struct sys_timer shmobile_timer = {
 	.init		= shmobile_timer_init,
 };

commit 2854903ad1329d09d7ec35639fff0949e45d496d
Author: Magnus Damm <damm@opensource.se>
Date:   Tue Mar 6 17:37:09 2012 +0900

    ARM: mach-shmobile: default to no earlytimer
    
    Now when all SoCs and boards are converted to use
    shmobile_earlytimer_init(), change the default behavior
    of shmobile_timer.init() from using early timer to
    do nothing which is suitable for upcoming DT support.
    
    Signed-off-by: Magnus Damm <damm@opensource.se>
    Signed-off-by: Rafael J. Wysocki <rjw@sisk.pl>

diff --git a/arch/arm/mach-shmobile/timer.c b/arch/arm/mach-shmobile/timer.c
index e51064343553..be1ad70fe404 100644
--- a/arch/arm/mach-shmobile/timer.c
+++ b/arch/arm/mach-shmobile/timer.c
@@ -43,7 +43,6 @@ void __init shmobile_earlytimer_init(void)
 
 static void __init shmobile_timer_init(void)
 {
-	shmobile_earlytimer_init();
 }
 
 struct sys_timer shmobile_timer = {

commit 08ad42fb7702ee2968b5b837e245ca8fd2175223
Author: Magnus Damm <damm@opensource.se>
Date:   Tue Mar 6 17:36:14 2012 +0900

    ARM: mach-shmobile: add shmobile_earlytimer_init()
    
    Add shmobile_earlytimer_init() that can be used to
    enable the earlytimer probing from the SoC code.
    
    Signed-off-by: Magnus Damm <damm@opensource.se>
    Signed-off-by: Rafael J. Wysocki <rjw@sisk.pl>

diff --git a/arch/arm/mach-shmobile/timer.c b/arch/arm/mach-shmobile/timer.c
index 895794b543cd..e51064343553 100644
--- a/arch/arm/mach-shmobile/timer.c
+++ b/arch/arm/mach-shmobile/timer.c
@@ -36,11 +36,16 @@ static void __init shmobile_late_time_init(void)
 	early_platform_driver_probe("earlytimer", 2, 0);
 }
 
-static void __init shmobile_timer_init(void)
+void __init shmobile_earlytimer_init(void)
 {
 	late_time_init = shmobile_late_time_init;
 }
 
+static void __init shmobile_timer_init(void)
+{
+	shmobile_earlytimer_init();
+}
+
 struct sys_timer shmobile_timer = {
 	.init		= shmobile_timer_init,
 };

commit c793c1b0c8ea11b46caf5a532752214b27a2df42
Author: Magnus Damm <damm@opensource.se>
Date:   Fri Feb 5 11:14:49 2010 +0000

    ARM: mach-shmobile: SH-Mobile G3 support.
    
    This adds preliminary support for the SH-Mobile G-series.
    
    The SH-Mobile G-series is a series of ARM/SH multi-core CPUs that aside
    from the ARM MPU are primarily composed of existing SH IP blocks.
    
    This includes initial support for the SH7367 (SH-Mobile G3) CPU and
    the G3EVM reference board.
    
    Only timer, serial console, and NOR flash are supported at this point.
    Patches for the interrupt controller, pinmux support, clock framework
    and runtime pm will be submitted as feature patches on top of this.
    
    Signed-off-by: Magnus Damm <damm@opensource.se>
    Signed-off-by: Paul Mundt <lethal@linux-sh.org>

diff --git a/arch/arm/mach-shmobile/timer.c b/arch/arm/mach-shmobile/timer.c
new file mode 100644
index 000000000000..895794b543cd
--- /dev/null
+++ b/arch/arm/mach-shmobile/timer.c
@@ -0,0 +1,46 @@
+/*
+ * SH-Mobile Timer
+ *
+ * Copyright (C) 2010  Magnus Damm
+ * Copyright (C) 2002 - 2009  Paul Mundt
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; version 2 of the License.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+ *
+ */
+#include <linux/platform_device.h>
+#include <asm/mach/time.h>
+
+static void __init shmobile_late_time_init(void)
+{
+	/*
+	 * Make sure all compiled-in early timers register themselves.
+	 *
+	 * Run probe() for two "earlytimer" devices, these will be the
+	 * clockevents and clocksource devices respectively. In the event
+	 * that only a clockevents device is available, we -ENODEV on the
+	 * clocksource and the jiffies clocksource is used transparently
+	 * instead. No error handling is necessary here.
+	 */
+	early_platform_driver_register_all("earlytimer");
+	early_platform_driver_probe("earlytimer", 2, 0);
+}
+
+static void __init shmobile_timer_init(void)
+{
+	late_time_init = shmobile_late_time_init;
+}
+
+struct sys_timer shmobile_timer = {
+	.init		= shmobile_timer_init,
+};
