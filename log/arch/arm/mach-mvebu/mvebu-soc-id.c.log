commit 9674d4a3cf4307dda468a0b48e5e43a2fdb56b68
Author: Gregory CLEMENT <gregory.clement@free-electrons.com>
Date:   Mon Jun 23 17:42:08 2014 +0200

    ARM: mvebu: Use system controller to get the soc id when possible
    
    On Armada 38x it is possible to get the SoC Id and the revision
    without using the PCI register. Accessing the PCI registers implies
    enabling its clock and, because of the initialization issue, not
    keeping them enable. So if possible it is better to avoid it.
    
    Armada 370 and Armada XP provides the SoC ID values from the system
    controller but not the revision.
    
    Armada 375 provides both but the SoC ID value looks buggy (0x6660
    instead of 0x6720).
    
    Signed-off-by: Gregory CLEMENT <gregory.clement@free-electrons.com>
    Link: https://lkml.kernel.org/r/1403538128-27859-1-git-send-email-gregory.clement@free-electrons.com
    Signed-off-by: Jason Cooper <jason@lakedaemon.net>

diff --git a/arch/arm/mach-mvebu/mvebu-soc-id.c b/arch/arm/mach-mvebu/mvebu-soc-id.c
index 12c66cac967d..a99434bcee84 100644
--- a/arch/arm/mach-mvebu/mvebu-soc-id.c
+++ b/arch/arm/mach-mvebu/mvebu-soc-id.c
@@ -25,6 +25,7 @@
 #include <linux/of_address.h>
 #include <linux/slab.h>
 #include <linux/sys_soc.h>
+#include "common.h"
 #include "mvebu-soc-id.h"
 
 #define PCIE_DEV_ID_OFF		0x0
@@ -54,7 +55,7 @@ int mvebu_get_soc_id(u32 *dev, u32 *rev)
 		return -ENODEV;
 }
 
-static int __init mvebu_soc_id_init(void)
+static int __init get_soc_id_by_pci(void)
 {
 	struct device_node *np;
 	int ret = 0;
@@ -129,6 +130,22 @@ static int __init mvebu_soc_id_init(void)
 
 	return ret;
 }
+
+static int __init mvebu_soc_id_init(void)
+{
+
+	/*
+	 * First try to get the ID and the revision by the system
+	 * register and use PCI registers only if it is not possible
+	 */
+	if (!mvebu_system_controller_get_soc_id(&soc_dev_id, &soc_rev)) {
+		is_id_valid = true;
+		pr_info("MVEBU SoC ID=0x%X, Rev=0x%X\n", soc_dev_id, soc_rev);
+		return 0;
+	}
+
+	return get_soc_id_by_pci();
+}
 early_initcall(mvebu_soc_id_init);
 
 static int __init mvebu_soc_device(void)

commit 5e80d81acc420fa33b56078f73f38546ab99be6f
Author: Gregory CLEMENT <gregory.clement@free-electrons.com>
Date:   Fri Jun 20 16:35:52 2014 +0200

    ARM: mvebu: Use the a standard errno in mvebu_get_soc_id
    
    Instead of using -1 as error value, use a standard errno.
    
    Signed-off-by: Gregory CLEMENT <gregory.clement@free-electrons.com>
    Link: https://lkml.kernel.org/r/1403274953-21790-2-git-send-email-gregory.clement@free-electrons.com
    Acked-by: Thomas Petazzoni <thomas.petazzoni@free-electrons.com>
    Signed-off-by: Jason Cooper <jason@lakedaemon.net>

diff --git a/arch/arm/mach-mvebu/mvebu-soc-id.c b/arch/arm/mach-mvebu/mvebu-soc-id.c
index d0f35b4d4a23..12c66cac967d 100644
--- a/arch/arm/mach-mvebu/mvebu-soc-id.c
+++ b/arch/arm/mach-mvebu/mvebu-soc-id.c
@@ -51,7 +51,7 @@ int mvebu_get_soc_id(u32 *dev, u32 *rev)
 		*rev = soc_rev;
 		return 0;
 	} else
-		return -1;
+		return -ENODEV;
 }
 
 static int __init mvebu_soc_id_init(void)

commit 825f4e0271b0de3f7f31d963dcdaa0056fe9b73a
Merge: 0a58471541cc b5b9324a6296
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Mon Jun 2 16:15:12 2014 -0700

    Merge tag 'soc-for-3.16' of git://git.kernel.org/pub/scm/linux/kernel/git/arm/arm-soc into next
    
    Pull part one of ARM SoC updates from Olof Johansson:
     "A quite large set of SoC updates this cycle.  In no particular order:
    
       - Multi-cluster power management for Samsung Exynos, adding support
         for big.LITTLE CPU switching on EXYNOS5
    
       - SMP support for Marvell Armada 375 and 38x
    
       - SMP rework on Allwinner A31
    
       - Xilinx Zynq support for SOC_BUS, big endian
    
       - Marvell orion5x platform cleanup, modernizing the implementation
         and moving to DT.
    
       - _Finally_ moving Samsung Exynos over to support MULTIPLATFORM, so
         that their platform can be enabled in the same kernel binary as
         most of the other v7 platforms in the tree.  \o/
    
         The work isn't quite complete, there's some driver fixes still
         needed, but the basics now work.
    
      New SoC support added:
    
       - Freescale i.MX6SX
    
       - LSI Axxia AXM55xx SoCs
    
       - Samsung EXYNOS 3250, 5260, 5410, 5420 and 5800
    
       - STi STIH407
    
      plus a large set of various smaller updates for different platforms.
      I'm probably missing some important one here"
    
    * tag 'soc-for-3.16' of git://git.kernel.org/pub/scm/linux/kernel/git/arm/arm-soc: (281 commits)
      ARM: exynos: don't run exynos4 l2x0 setup on other platforms
      ARM: exynos: Fix "allmodconfig" build errors in mcpm and hotplug
      ARM: EXYNOS: mcpm rename the power_down_finish
      ARM: EXYNOS: Enable mcpm for dual-cluster exynos5800 SoC
      ARM: EXYNOS: Enable multi-platform build support
      ARM: EXYNOS: Consolidate Kconfig entries
      ARM: EXYNOS: Add support for EXYNOS5410 SoC
      ARM: EXYNOS: Support secondary CPU boot of Exynos3250
      ARM: EXYNOS: Add Exynos3250 SoC ID
      ARM: EXYNOS: Add 5800 SoC support
      ARM: EXYNOS: initial board support for exynos5260 SoC
      clk: exynos5410: register clocks using common clock framework
      ARM: debug: qcom: add UART addresses to Kconfig help for APQ8084
      ARM: sunxi: allow building without reset controller
      Documentation: devicetree: arm: sort enable-method entries
      ARM: rockchip: convert smp bringup to CPU_METHOD_OF_DECLARE
      clk: exynos5250: Add missing sysmmu clocks for DISP and ISP blocks
      ARM: dts: axxia: Add reset controller
      power: reset: Add Axxia system reset driver
      ARM: axxia: Adding defconfig for AXM55xx
      ...

commit b25bcf1bcaf6687991ae08dd76cd784bf9fe3d05
Author: Thomas Petazzoni <thomas.petazzoni@free-electrons.com>
Date:   Mon May 12 16:11:40 2014 +0200

    ARM: mvebu: mvebu-soc-id: keep clock enabled if PCIe unit is enabled
    
    Since the mvebu-soc-id code in mach-mvebu/ was introduced, several
    users have noticed a regression: the PCIe card connected in the first
    PCIe interface is not detected properly.
    
    This is due to the fact that the mvebu-soc-id code enables the PCIe
    clock of the first PCIe interface, reads the SoC device ID and
    revision number (yes this information is made available as part of
    PCIe registers), and then disables the clock. However, by doing this,
    we gate the clock and therefore loose the complex PCIe configuration
    that was done by the bootloader.
    
    Unfortunately, as of today, the kernel is not capable of doing this
    complex configuration by itself, so we really need to keep the PCIe
    clock enabled. However, we don't want to keep it enabled
    unconditionally: if the PCIe interface is not enabled or PCI support
    is not compiled into the kernel, there is no reason to keep the PCIe
    clock running.
    
    This issue was discussed with Kevin Hilman, and the suggested solution
    was to make the mvebu-soc-id code keep the clock enabled in case it
    will be needed for PCIe. This is therefore the solution implemented in
    this patch.
    
    Long term, we hope to make the kernel more capable in terms of PCIe
    configuration for this platform, which will anyway be needed to
    support the compilation of the PCIe host controller driver as a
    module. In the mean time however, we don't have much other choice than
    to implement the currently proposed solution.
    
    Reported-by: Neil Greatorex <neil@fatboyfat.co.uk>
    Cc: Neil Greatorex <neil@fatboyfat.co.uk>
    Cc: Jason Gunthorpe <jgunthorpe@obsidianresearch.com>
    Cc: Kevin Hilman <khilman@linaro.org>
    Signed-off-by: Thomas Petazzoni <thomas.petazzoni@free-electrons.com>
    Link: https://lkml.kernel.org/r/1399903900-29977-3-git-send-email-thomas.petazzoni@free-electrons.com
    Fixes: af8d1c63afcb ("ARM: mvebu: Add support to get the ID and the revision of a SoC")
    Cc: <stable@vger.kernel.org> # 3.14+: 42a18d1cf484: ARM: mvebu: mvebu-soc-id: add missing clk_put() call
    Cc: <stable@vger.kernel.org> # 3.14+
    Acked-by: Gregory CLEMENT <gregory.clement@free-electrons.com>
    Tested-by: Gregory CLEMENT <gregory.clement@free-electrons.com>
    Tested-by: Andrew Lunn <andrew@lunn.ch>
    Tested-by: Willy Tarreau <w@1wt.eu>
    Signed-off-by: Jason Cooper <jason@lakedaemon.net>

diff --git a/arch/arm/mach-mvebu/mvebu-soc-id.c b/arch/arm/mach-mvebu/mvebu-soc-id.c
index b52af6f4a0c6..09520e19b78e 100644
--- a/arch/arm/mach-mvebu/mvebu-soc-id.c
+++ b/arch/arm/mach-mvebu/mvebu-soc-id.c
@@ -108,8 +108,18 @@ static int __init mvebu_soc_id_init(void)
 	iounmap(pci_base);
 
 res_ioremap:
-	clk_disable_unprepare(clk);
-	clk_put(clk);
+	/*
+	 * If the PCIe unit is actually enabled and we have PCI
+	 * support in the kernel, we intentionally do not release the
+	 * reference to the clock. We want to keep it running since
+	 * the bootloader does some PCIe link configuration that the
+	 * kernel is for now unable to do, and gating the clock would
+	 * make us loose this precious configuration.
+	 */
+	if (!of_device_is_available(child) || !IS_ENABLED(CONFIG_PCI_MVEBU)) {
+		clk_disable_unprepare(clk);
+		clk_put(clk);
+	}
 
 clk_err:
 	of_node_put(child);

commit 42a18d1cf484d02e23afadfa5dc09356e6bef9fa
Author: Thomas Petazzoni <thomas.petazzoni@free-electrons.com>
Date:   Mon May 12 16:11:39 2014 +0200

    ARM: mvebu: mvebu-soc-id: add missing clk_put() call
    
    The mvebu-soc-id code in mach-mvebu/ needs to enable a clock to read
    the SoC device ID and revision number. To do so, it does a clk_get(),
    then a clk_prepare_enable(), reads the value, and disables the clock
    with clk_disable_unprepare(). However, it forgets to clk_put() the
    clock. This commit fixes this issue.
    
    Signed-off-by: Thomas Petazzoni <thomas.petazzoni@free-electrons.com>
    Link: https://lkml.kernel.org/r/1399903900-29977-2-git-send-email-thomas.petazzoni@free-electrons.com
    Cc: <stable@vger.kernel.org> # 3.14+
    Fixes: af8d1c63afcb ("ARM: mvebu: Add support to get the ID and the revision of a SoC")
    Acked-by: Gregory CLEMENT <gregory.clement@free-electrons.com>
    Tested-by: Gregory CLEMENT <gregory.clement@free-electrons.com>
    Tested-by: Andrew Lunn <andrew@lunn.ch>
    Tested-by: Willy Tarreau <w@1wt.eu>
    Signed-off-by: Jason Cooper <jason@lakedaemon.net>

diff --git a/arch/arm/mach-mvebu/mvebu-soc-id.c b/arch/arm/mach-mvebu/mvebu-soc-id.c
index f3d4cf53f746..b52af6f4a0c6 100644
--- a/arch/arm/mach-mvebu/mvebu-soc-id.c
+++ b/arch/arm/mach-mvebu/mvebu-soc-id.c
@@ -109,6 +109,7 @@ static int __init mvebu_soc_id_init(void)
 
 res_ioremap:
 	clk_disable_unprepare(clk);
+	clk_put(clk);
 
 clk_err:
 	of_node_put(child);

commit 73c3c79137f05de2ffcfec3469e4110e40dd1522
Author: Thomas Petazzoni <thomas.petazzoni@free-electrons.com>
Date:   Mon May 5 17:05:23 2014 +0200

    ARM: mvebu: initialize mvebu-soc-id earlier
    
    Currently, the mvebu-soc-id logic is initialized through a
    core_initcall(). However, we will soon need to know the SoC revision
    before booting secondary CPUs, because a workaround affects Armada 375
    Z1 steppings, but should not be applied on Armada 375 A0 steppings.
    
    Unfortunately, core_initcall() are called way too late compared to the
    SMP initialization. Therefore, the mvebu-soc-id initialization is move
    to an early_initcall(), which is called before the SMP initialization.
    
    Signed-off-by: Thomas Petazzoni <thomas.petazzoni@free-electrons.com>
    Link: https://lkml.kernel.org/r/1399302326-6917-3-git-send-email-thomas.petazzoni@free-electrons.com
    Signed-off-by: Jason Cooper <jason@lakedaemon.net>

diff --git a/arch/arm/mach-mvebu/mvebu-soc-id.c b/arch/arm/mach-mvebu/mvebu-soc-id.c
index 874a7504818e..e9119a99a5f3 100644
--- a/arch/arm/mach-mvebu/mvebu-soc-id.c
+++ b/arch/arm/mach-mvebu/mvebu-soc-id.c
@@ -118,7 +118,7 @@ static int __init mvebu_soc_id_init(void)
 
 	return ret;
 }
-core_initcall(mvebu_soc_id_init);
+early_initcall(mvebu_soc_id_init);
 
 static int __init mvebu_soc_device(void)
 {

commit 56a705a48eae9c474ba7f82af5c4ff5cf306f654
Author: Andrew Lunn <andrew@lunn.ch>
Date:   Tue Mar 4 18:51:47 2014 +0100

    ARM: mvebu: Add a SOC bus device entry
    
    Add the SoC Family, device ID and revision to /sys/bus/soc.
    
    Signed-off-by: Andrew Lunn <andrew@lunn.ch>
    Link: https://lkml.kernel.org/r/1393955507-26436-1-git-send-email-andrew@lunn.ch
    Signed-off-by: Jason Cooper <jason@lakedaemon.net>

diff --git a/arch/arm/mach-mvebu/mvebu-soc-id.c b/arch/arm/mach-mvebu/mvebu-soc-id.c
index f3d4cf53f746..874a7504818e 100644
--- a/arch/arm/mach-mvebu/mvebu-soc-id.c
+++ b/arch/arm/mach-mvebu/mvebu-soc-id.c
@@ -23,6 +23,8 @@
 #include <linux/kernel.h>
 #include <linux/of.h>
 #include <linux/of_address.h>
+#include <linux/slab.h>
+#include <linux/sys_soc.h>
 #include "mvebu-soc-id.h"
 
 #define PCIE_DEV_ID_OFF		0x0
@@ -118,3 +120,31 @@ static int __init mvebu_soc_id_init(void)
 }
 core_initcall(mvebu_soc_id_init);
 
+static int __init mvebu_soc_device(void)
+{
+	struct soc_device_attribute *soc_dev_attr;
+	struct soc_device *soc_dev;
+
+	/* Also protects against running on non-mvebu systems */
+	if (!is_id_valid)
+		return 0;
+
+	soc_dev_attr = kzalloc(sizeof(*soc_dev_attr), GFP_KERNEL);
+	if (!soc_dev_attr)
+		return -ENOMEM;
+
+	soc_dev_attr->family = kasprintf(GFP_KERNEL, "Marvell");
+	soc_dev_attr->revision = kasprintf(GFP_KERNEL, "%X", soc_rev);
+	soc_dev_attr->soc_id = kasprintf(GFP_KERNEL, "%X", soc_dev_id);
+
+	soc_dev = soc_device_register(soc_dev_attr);
+	if (IS_ERR(soc_dev)) {
+		kfree(soc_dev_attr->family);
+		kfree(soc_dev_attr->revision);
+		kfree(soc_dev_attr->soc_id);
+		kfree(soc_dev_attr);
+	}
+
+	return 0;
+}
+postcore_initcall(mvebu_soc_device);

commit 97171ad70e054779eded877bec6a126ac6468695
Author: Andrew Lunn <andrew@lunn.ch>
Date:   Sat Feb 22 20:15:01 2014 +0100

    ARM: mvebu: Enable mvebu-soc-id on Kirkwood
    
    Add the Kirkwood PCIe compatibility string to mvebu-soc-id, so that it
    can get the SoC ID and revision from the PCIe endpoints.
    
    Signed-off-by: Andrew Lunn <andrew@lunn.ch>
    Acked-by: Arnd Bergmann <arnd@arndb.de>
    Tested-by: Jason Gunthorpe <jgunthorpe@obsidianresearch.com>
    Signed-off-by: Jason Cooper <jason@lakedaemon.net>

diff --git a/arch/arm/mach-mvebu/mvebu-soc-id.c b/arch/arm/mach-mvebu/mvebu-soc-id.c
index f3b325f6cbd4..f3d4cf53f746 100644
--- a/arch/arm/mach-mvebu/mvebu-soc-id.c
+++ b/arch/arm/mach-mvebu/mvebu-soc-id.c
@@ -38,6 +38,7 @@ static bool is_id_valid;
 static const struct of_device_id mvebu_pcie_of_match_table[] = {
 	{ .compatible = "marvell,armada-xp-pcie", },
 	{ .compatible = "marvell,armada-370-pcie", },
+	{ .compatible = "marvell,kirkwood-pcie" },
 	{},
 };
 

commit dc4910d9e93f8cc56b190dd8fc9e789135978216
Author: Gregory CLEMENT <gregory.clement@free-electrons.com>
Date:   Mon Jan 20 15:59:50 2014 +0100

    ARM: mvebu: Fix kernel hang in mvebu_soc_id_init() when of_iomap failed
    
    When pci_base is accessed whereas it has not been properly mapped by
    of_iomap() the kernel hang. The check of this pointer made an improper
    use of IS_ERR() instead of comparing to NULL. This patch fix this
    issue.
    
    Signed-off-by: Gregory CLEMENT <gregory.clement@free-electrons.com>
    Reported-by: Ezequiel Garcia <ezequiel.garcia@free-electrons.com>
    Cc: stable@vger.kernel.org # v3.12+: af8d1c63afcb: ARM: mvebu: Add support to get the ID and the revision of a SoC
    Cc: stable@vger.kernel.org # v3.12+: 85e618a1be2b: ARM: mvebu: Add quirk for i2c for the OpenBlocks AX3-4 board
    Cc: stable@vger.kernel.org # v3.12+: 6cf70ae928ba: i2c: mv64xxx: Fix bus hang on A0 version of the Armada XP SoCs
    Cc: stable@vger.kernel.org # v3.12+: f8b94beb7e6a: i2c: mv64xxx: Document the newly introduced Armada XP A0 compatible
    Cc: stable@vger.kernel.org # v3.12+
    Fixes: 930ab3d403ae (i2c: mv64xxx: Add I2C Transaction Generator support)
    Signed-off-by: Jason Cooper <jason@lakedaemon.net>

diff --git a/arch/arm/mach-mvebu/mvebu-soc-id.c b/arch/arm/mach-mvebu/mvebu-soc-id.c
index fe4fc1cbdfaf..f3b325f6cbd4 100644
--- a/arch/arm/mach-mvebu/mvebu-soc-id.c
+++ b/arch/arm/mach-mvebu/mvebu-soc-id.c
@@ -88,7 +88,7 @@ static int __init mvebu_soc_id_init(void)
 	}
 
 	pci_base = of_iomap(child, 0);
-	if (IS_ERR(pci_base)) {
+	if (pci_base == NULL) {
 		pr_err("cannot map registers\n");
 		ret = -ENOMEM;
 		goto res_ioremap;

commit af8d1c63afcbf36eea06789c92e22d4af118d2fb
Author: Gregory CLEMENT <gregory.clement@free-electrons.com>
Date:   Thu Jan 2 15:08:59 2014 +0100

    ARM: mvebu: Add support to get the ID and the revision of a SoC
    
    All the mvebu SoCs have information related to their variant and
    revision that can be read from the PCI control register.
    
    This patch adds support for Armada XP and Armada 370. This reading of
    the revision and the ID are done before the PCI initialization to
    avoid any conflicts. Once these data are retrieved, the resources are
    freed to let the PCI subsystem use it.
    
    Cc: stable@vger.kernel.org # v3.12+
    Fixes: 930ab3d403ae (i2c: mv64xxx: Add I2C Transaction Generator support)
    Signed-off-by: Gregory CLEMENT <gregory.clement@free-electrons.com>
    Acked-by: Arnd Bergmann <arnd@arndb.de>
    Signed-off-by: Jason Cooper <jason@lakedaemon.net>

diff --git a/arch/arm/mach-mvebu/mvebu-soc-id.c b/arch/arm/mach-mvebu/mvebu-soc-id.c
new file mode 100644
index 000000000000..fe4fc1cbdfaf
--- /dev/null
+++ b/arch/arm/mach-mvebu/mvebu-soc-id.c
@@ -0,0 +1,119 @@
+/*
+ * ID and revision information for mvebu SoCs
+ *
+ * Copyright (C) 2014 Marvell
+ *
+ * Gregory CLEMENT <gregory.clement@free-electrons.com>
+ *
+ * This file is licensed under the terms of the GNU General Public
+ * License version 2.  This program is licensed "as is" without any
+ * warranty of any kind, whether express or implied.
+ *
+ * All the mvebu SoCs have information related to their variant and
+ * revision that can be read from the PCI control register. This is
+ * done before the PCI initialization to avoid any conflict. Once the
+ * ID and revision are retrieved, the mapping is freed.
+ */
+
+#define pr_fmt(fmt) "mvebu-soc-id: " fmt
+
+#include <linux/clk.h>
+#include <linux/init.h>
+#include <linux/io.h>
+#include <linux/kernel.h>
+#include <linux/of.h>
+#include <linux/of_address.h>
+#include "mvebu-soc-id.h"
+
+#define PCIE_DEV_ID_OFF		0x0
+#define PCIE_DEV_REV_OFF	0x8
+
+#define SOC_ID_MASK	    0xFFFF0000
+#define SOC_REV_MASK	    0xFF
+
+static u32 soc_dev_id;
+static u32 soc_rev;
+static bool is_id_valid;
+
+static const struct of_device_id mvebu_pcie_of_match_table[] = {
+	{ .compatible = "marvell,armada-xp-pcie", },
+	{ .compatible = "marvell,armada-370-pcie", },
+	{},
+};
+
+int mvebu_get_soc_id(u32 *dev, u32 *rev)
+{
+	if (is_id_valid) {
+		*dev = soc_dev_id;
+		*rev = soc_rev;
+		return 0;
+	} else
+		return -1;
+}
+
+static int __init mvebu_soc_id_init(void)
+{
+	struct device_node *np;
+	int ret = 0;
+	void __iomem *pci_base;
+	struct clk *clk;
+	struct device_node *child;
+
+	np = of_find_matching_node(NULL, mvebu_pcie_of_match_table);
+	if (!np)
+		return ret;
+
+	/*
+	 * ID and revision are available from any port, so we
+	 * just pick the first one
+	 */
+	child = of_get_next_child(np, NULL);
+	if (child == NULL) {
+		pr_err("cannot get pci node\n");
+		ret = -ENOMEM;
+		goto clk_err;
+	}
+
+	clk = of_clk_get_by_name(child, NULL);
+	if (IS_ERR(clk)) {
+		pr_err("cannot get clock\n");
+		ret = -ENOMEM;
+		goto clk_err;
+	}
+
+	ret = clk_prepare_enable(clk);
+	if (ret) {
+		pr_err("cannot enable clock\n");
+		goto clk_err;
+	}
+
+	pci_base = of_iomap(child, 0);
+	if (IS_ERR(pci_base)) {
+		pr_err("cannot map registers\n");
+		ret = -ENOMEM;
+		goto res_ioremap;
+	}
+
+	/* SoC ID */
+	soc_dev_id = readl(pci_base + PCIE_DEV_ID_OFF) >> 16;
+
+	/* SoC revision */
+	soc_rev = readl(pci_base + PCIE_DEV_REV_OFF) & SOC_REV_MASK;
+
+	is_id_valid = true;
+
+	pr_info("MVEBU SoC ID=0x%X, Rev=0x%X\n", soc_dev_id, soc_rev);
+
+	iounmap(pci_base);
+
+res_ioremap:
+	clk_disable_unprepare(clk);
+
+clk_err:
+	of_node_put(child);
+	of_node_put(np);
+
+	return ret;
+}
+core_initcall(mvebu_soc_id_init);
+
