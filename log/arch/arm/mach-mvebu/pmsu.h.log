commit ab64920c3742ba992a3bf0b06f9750d1cad9d050
Merge: 756f80cee766 6e6db2bea3ea
Author: Arnd Bergmann <arnd@arndb.de>
Date:   Thu Dec 4 16:46:43 2014 +0100

    Merge tag 'mvebu-soc-suspend-3.19' of git://git.infradead.org/linux-mvebu into next/soc
    
    Pull "mvebu SoC suspend changes for v3.19" from Jason Cooper:
    
     - Armada 370/XP suspend/resume support
    
     - mvebu SoC driver suspend/resume support
        - irqchip
        - clocksource
        - mbus
        - clk
    
    * tag 'mvebu-soc-suspend-3.19' of git://git.infradead.org/linux-mvebu:
      ARM: mvebu: add SDRAM controller description for Armada XP
      ARM: mvebu: adjust mbus controller description on Armada 370/XP
      ARM: mvebu: add suspend/resume DT information for Armada XP GP
      ARM: mvebu: synchronize secondary CPU clocks on resume
      ARM: mvebu: make sure MMU is disabled in armada_370_xp_cpu_resume
      ARM: mvebu: Armada XP GP specific suspend/resume code
      ARM: mvebu: reserve the first 10 KB of each memory bank for suspend/resume
      ARM: mvebu: implement suspend/resume support for Armada XP
      clk: mvebu: add suspend/resume for gatable clocks
      bus: mvebu-mbus: provide a mechanism to save SDRAM window configuration
      bus: mvebu-mbus: suspend/resume support
      clocksource: time-armada-370-xp: add suspend/resume support
      irqchip: armada-370-xp: Add suspend/resume support
      Documentation: dt-bindings: minimal documentation for MVEBU SDRAM controller
    
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>

commit 8446be5d030c0d986cf90e0b395764f2c6ca443d
Author: Thomas Petazzoni <thomas.petazzoni@free-electrons.com>
Date:   Fri Nov 21 17:00:06 2014 +0100

    ARM: mvebu: implement suspend/resume support for Armada XP
    
    This commit implements the core of the platform code to enable
    suspend/resume on Armada XP. It registers the platform_suspend_ops
    structure, and implements the ->enter() hook of this structure.
    
    It is worth mentioning that this commit only provides the SoC-level
    part of suspend/resume, which calls into some board-specific code
    provided in a follow-up commit.
    
    The most important thing that this SoC-level code has to do is to
    build an in-memory structure that contains a magic number, the return
    address in the kernel after resume, and a set of address/value
    pairs. This structure is used by the bootloader to restore a certain
    number of registers (according to the set of address/value pairs) and
    then jump back into the kernel at the provided location.
    
    The code also puts the SDRAM into self-refresh mode, before calling
    into board-specific code to actually enter the suspend to RAM state.
    
    [ jac - add email exchange between Andrew Lunn and Thomas Petazzoni to better
    describe who consumes the address/value pairs ]
    
    > > Is this a well defined mechanism supported by mainline uboot, barebox
    > > etc. Or is it some Marvell extension to their uboot?
    >
    > As far as I know, it is a Marvell extension to their "binary header",
    > so it's done even before U-Boot starts. Since the hardware needs
    > assistance from the bootloader to do suspend/resume, there is
    > necessarily a certain amount of cooperation/agreement needed by what
    > the kernel does and what the bootloader expects. I'm not sure there's
    > any "standard" mechanism here. Do you know of any?
    >
    > I know the suspend/resume on the Blackfin architecture works the same
    > way (at least it used to work that way years ago when I did a bit of
    > Blackfin stuff). And here as well, there was some cooperation between
    > the kernel and the bootloader. See
    > arch/blackfin/mach-common/dpmc_modes.S, function do_hibernate() at the
    > end.
    >
    
    Signed-off-by: Thomas Petazzoni <thomas.petazzoni@free-electrons.com>
    Link: https://lkml.kernel.org/r/1416585613-2113-10-git-send-email-thomas.petazzoni@free-electrons.com
    Signed-off-by: Jason Cooper <jason@lakedaemon.net>

diff --git a/arch/arm/mach-mvebu/pmsu.h b/arch/arm/mach-mvebu/pmsu.h
index 6b58c1fe2b0d..a7c242dc2ebd 100644
--- a/arch/arm/mach-mvebu/pmsu.h
+++ b/arch/arm/mach-mvebu/pmsu.h
@@ -17,5 +17,6 @@ int mvebu_setup_boot_addr_wa(unsigned int crypto_eng_target,
                              phys_addr_t resume_addr_reg);
 
 void mvebu_v7_pmsu_idle_exit(void);
+void armada_370_xp_cpu_resume(void);
 
 #endif	/* __MACH_370_XP_PMSU_H */

commit 626d686487bfd8136c4543bee7b6b2e52c33b3f8
Author: Gregory CLEMENT <gregory.clement@free-electrons.com>
Date:   Thu Oct 30 12:39:44 2014 +0100

    ARM: mvebu: Implement the CPU hotplug support for the Armada 38x SoCs
    
    This commit implements the CPU hotplug support for the Marvell Armada
    38x platform. Similarly to what was done for the Armada XP, this
    commit:
    
     * Implements the ->cpu_die() function of SMP operations by calling
       armada_38x_do_cpu_suspend() to enter the deep idle state for
       CPUs going offline.
    
     * Implements a dummy ->cpu_kill() function, simply needed for the
       kernel to know we have CPU hotplug support.
    
     * The mvebu_cortex_a9_boot_secondary() function makes sure to wake up
       the CPU if waiting in deep idle state by sending an IPI before
       deasserting the CPUs from reset. This is because
       mvebu_cortex_a9_boot_secondary() is now used in two different
       situations: for the initial boot of secondary CPUs (where CPU reset
       deassert is used to wake up CPUs) and for CPU hotplug (where an IPI
       is used to take CPU out of deep idle).
    
     * At boot time, we exit from the idle state in the
        ->smp_secondary_init() hook.
    
    This commit has been tested using CPU hotplug through sysfs
    (/sys/devices/system/cpu/cpuX/online) and using kexec.
    
    Signed-off-by: Gregory CLEMENT <gregory.clement@free-electrons.com>
    Tested-by: Thomas Petazzoni <thomas.petazzoni@free-electrons.com>
    Reviewed-by: Thomas Petazzoni <thomas.petazzoni@free-electrons.com>
    Link: https://lkml.kernel.org/r/1414669184-16785-5-git-send-email-gregory.clement@free-electrons.com
    Signed-off-by: Jason Cooper <jason@lakedaemon.net>

diff --git a/arch/arm/mach-mvebu/pmsu.h b/arch/arm/mach-mvebu/pmsu.h
index e1eb4959a2d4..c2c95db4f648 100644
--- a/arch/arm/mach-mvebu/pmsu.h
+++ b/arch/arm/mach-mvebu/pmsu.h
@@ -19,4 +19,5 @@ int mvebu_setup_boot_addr_wa(unsigned int crypto_eng_target,
 void mvebu_v7_pmsu_idle_exit(void);
 
 int armada_370_xp_pmsu_idle_enter(unsigned long deepidle);
+int armada_38x_do_cpu_suspend(unsigned long deepidle);
 #endif	/* __MACH_370_XP_PMSU_H */

commit 316fbbc400875c647c3a220c7525ffa8d2c80306
Author: Gregory CLEMENT <gregory.clement@free-electrons.com>
Date:   Thu Oct 30 12:39:41 2014 +0100

    ARM: mvebu: Clean-up the Armada XP support
    
    This patch removes the unneeded include of the armada-370-xp.h header.
    
    It also moves some declarations from this file into more accurate
    places.
    
    Finally, it also adds a comment explaining that we can't remove yet the
    smp field in the dt machine struct due to backward compatibly of the
    device tree.
    
    In a few releases, when the old device tree will be obsolete, we will be
    able to remove the smp field and then the armada-370-xp.h header.
    
    Signed-off-by: Gregory CLEMENT <gregory.clement@free-electrons.com>
    Tested-by: Thomas Petazzoni <thomas.petazzoni@free-electrons.com>
    Reviewed-by: Thomas Petazzoni <thomas.petazzoni@free-electrons.com>
    Link: https://lkml.kernel.org/r/1414669184-16785-2-git-send-email-gregory.clement@free-electrons.com
    Signed-off-by: Jason Cooper <jason@lakedaemon.net>

diff --git a/arch/arm/mach-mvebu/pmsu.h b/arch/arm/mach-mvebu/pmsu.h
index 6b58c1fe2b0d..e1eb4959a2d4 100644
--- a/arch/arm/mach-mvebu/pmsu.h
+++ b/arch/arm/mach-mvebu/pmsu.h
@@ -18,4 +18,5 @@ int mvebu_setup_boot_addr_wa(unsigned int crypto_eng_target,
 
 void mvebu_v7_pmsu_idle_exit(void);
 
+int armada_370_xp_pmsu_idle_enter(unsigned long deepidle);
 #endif	/* __MACH_370_XP_PMSU_H */

commit 898ef3e9bfc7f5c94a1e67d0a540e224e2496909
Author: Gregory CLEMENT <gregory.clement@free-electrons.com>
Date:   Wed Jul 23 15:00:42 2014 +0200

    ARM: mvebu: rename the armada_370_xp symbols to mvebu_v7 in pmsu.c
    
    Most of the function related to the PMSU are not specific to the
    Armada 370 or Armada XP SoCs. They can also be used for most of the
    other mvebu ARMv7 SoCs, and will actually be used to support cpuidle
    on Armada 38x.
    
    Signed-off-by: Gregory CLEMENT <gregory.clement@free-electrons.com>
    Signed-off-by: Thomas Petazzoni <thomas.petazzoni@free-electrons.com>
    Link: https://lkml.kernel.org/r/1406120453-29291-6-git-send-email-thomas.petazzoni@free-electrons.com
    Signed-off-by: Jason Cooper <jason@lakedaemon.net>

diff --git a/arch/arm/mach-mvebu/pmsu.h b/arch/arm/mach-mvebu/pmsu.h
index ae501948ec73..6b58c1fe2b0d 100644
--- a/arch/arm/mach-mvebu/pmsu.h
+++ b/arch/arm/mach-mvebu/pmsu.h
@@ -16,4 +16,6 @@ int mvebu_setup_boot_addr_wa(unsigned int crypto_eng_target,
                              unsigned int crypto_eng_attribute,
                              phys_addr_t resume_addr_reg);
 
+void mvebu_v7_pmsu_idle_exit(void);
+
 #endif	/* __MACH_370_XP_PMSU_H */

commit 3076cc58c958090ad50acf50fc855845e3462523
Author: Gregory CLEMENT <gregory.clement@free-electrons.com>
Date:   Wed Jul 23 15:00:40 2014 +0200

    ARM: mvebu: add a common function for the boot address work around
    
    On some of the mvebu SoCs and due to internal BootROM issue, the CPU
    initial jump code must be placed in the SRAM memory of the SoC. In
    order to achieve this, we have to unmap the BootROM and at some
    specific location where the BootROM was placed, create a dedicated
    MBus window for the SRAM. This SRAM is initialized with a few
    instructions of code that allows to jump to the real secondary CPU
    boot address. The SRAM used is the Crypto engine one.
    
    This work around is currently needed for booting SMP on Armada 375 Z1
    and will be needed for cpuidle support on Armada 370. Instead of
    duplicating the same code, this commit introduces a common function to
    handle it: mvebu_setup_boot_addr_wa().
    
    Signed-off-by: Gregory CLEMENT <gregory.clement@free-electrons.com>
    Signed-off-by: Thomas Petazzoni <thomas.petazzoni@free-electrons.com>
    Link: https://lkml.kernel.org/r/1406120453-29291-4-git-send-email-thomas.petazzoni@free-electrons.com
    Signed-off-by: Jason Cooper <jason@lakedaemon.net>

diff --git a/arch/arm/mach-mvebu/pmsu.h b/arch/arm/mach-mvebu/pmsu.h
index 07a737c6b95d..ae501948ec73 100644
--- a/arch/arm/mach-mvebu/pmsu.h
+++ b/arch/arm/mach-mvebu/pmsu.h
@@ -12,5 +12,8 @@
 #define __MACH_MVEBU_PMSU_H
 
 int armada_xp_boot_cpu(unsigned int cpu_id, void *phys_addr);
+int mvebu_setup_boot_addr_wa(unsigned int crypto_eng_target,
+                             unsigned int crypto_eng_attribute,
+                             phys_addr_t resume_addr_reg);
 
 #endif	/* __MACH_370_XP_PMSU_H */

commit 7444dad2409afd94c08875e961ca61c5999cd606
Author: Gregory CLEMENT <gregory.clement@free-electrons.com>
Date:   Thu Aug 2 11:17:51 2012 +0300

    arm: mvebu: Add initial support for power managmement service unit
    
    The Armada 370 and Armada XP SOCs have a power management service unit
    which is responsible for powering down and waking up CPUs and other
    SOC units. This patch adds support for this unit.
    
    Signed-off-by: Yehuda Yitschak <yehuday@marvell.com>
    Signed-off-by: Gregory CLEMENT <gregory.clement@free-electrons.com>

diff --git a/arch/arm/mach-mvebu/pmsu.h b/arch/arm/mach-mvebu/pmsu.h
new file mode 100644
index 000000000000..07a737c6b95d
--- /dev/null
+++ b/arch/arm/mach-mvebu/pmsu.h
@@ -0,0 +1,16 @@
+/*
+ * Power Management Service Unit (PMSU) support for Armada 370/XP platforms.
+ *
+ * Copyright (C) 2012 Marvell
+ *
+ * This file is licensed under the terms of the GNU General Public
+ * License version 2.  This program is licensed "as is" without any
+ * warranty of any kind, whether express or implied.
+ */
+
+#ifndef __MACH_MVEBU_PMSU_H
+#define __MACH_MVEBU_PMSU_H
+
+int armada_xp_boot_cpu(unsigned int cpu_id, void *phys_addr);
+
+#endif	/* __MACH_370_XP_PMSU_H */
