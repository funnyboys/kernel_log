commit 149ed3d404c9bd00f0fadc35215a9e7a54c5cfd0
Author: Pali Rohár <pali@kernel.org>
Date:   Fri Apr 10 14:34:00 2020 -0700

    change email address for Pali Rohár
    
    For security reasons I stopped using gmail account and kernel address is
    now up-to-date alias to my personal address.
    
    People periodically send me emails to address which they found in source
    code of drivers, so this change reflects state where people can contact
    me.
    
    [ Added .mailmap entry as per Joe Perches  - Linus ]
    Signed-off-by: Pali Rohár <pali@kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Cc: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Cc: Joe Perches <joe@perches.com>
    Link: http://lkml.kernel.org/r/20200307104237.8199-1-pali@kernel.org
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

diff --git a/arch/arm/mach-omap2/omap-secure.h b/arch/arm/mach-omap2/omap-secure.h
index ba8c486c0454..4aaa95706d39 100644
--- a/arch/arm/mach-omap2/omap-secure.h
+++ b/arch/arm/mach-omap2/omap-secure.h
@@ -5,7 +5,7 @@
  * Copyright (C) 2011 Texas Instruments, Inc.
  *	Santosh Shilimkar <santosh.shilimkar@ti.com>
  * Copyright (C) 2012 Ivaylo Dimitrov <freemangordon@abv.bg>
- * Copyright (C) 2013 Pali Rohár <pali.rohar@gmail.com>
+ * Copyright (C) 2013 Pali Rohár <pali@kernel.org>
  */
 #ifndef OMAP_ARCH_OMAP_SECURE_H
 #define OMAP_ARCH_OMAP_SECURE_H

commit 8ab871f8bdfcca627802b6992e556fba5722a268
Author: Andrew F. Davis <afd@ti.com>
Date:   Thu Jan 2 16:19:43 2020 -0500

    ARM: OMAP2+: sleep43xx: Call secure suspend/resume handlers
    
    During suspend CPU context may be lost in both non-secure and secure CPU
    states. The kernel can handle saving and restoring the non-secure context
    but must call into the secure side to allow it to save any context it may
    lose. Add these calls here.
    
    Note that on systems with OP-TEE available the suspend call is issued to
    OP-TEE using the ARM SMCCC, but the resume call is always issued to the
    ROM. This is because on waking from suspend the ROM is restored as the
    secure monitor. It is this resume call that instructs the ROM to restore
    OP-TEE, all subsequent calls will be handled by OP-TEE and should use the
    ARM SMCCC.
    
    Signed-off-by: Andrew F. Davis <afd@ti.com>
    Acked-by: Dave Gerlach <d-gerlach@ti.com>
    Reviewed-by: Lokesh Vutla <lokeshvutla@ti.com>
    Signed-off-by: Tony Lindgren <tony@atomide.com>

diff --git a/arch/arm/mach-omap2/omap-secure.h b/arch/arm/mach-omap2/omap-secure.h
index 736e594365f4..ba8c486c0454 100644
--- a/arch/arm/mach-omap2/omap-secure.h
+++ b/arch/arm/mach-omap2/omap-secure.h
@@ -53,6 +53,9 @@
 #define OMAP4_PPA_L2_POR_INDEX		0x23
 #define OMAP4_PPA_CPU_ACTRL_SMP_INDEX	0x25
 
+#define AM43xx_PPA_SVC_PM_SUSPEND	0x71
+#define AM43xx_PPA_SVC_PM_RESUME	0x72
+
 /* Secure RX-51 PPA (Primary Protected Application) APIs */
 #define RX51_PPA_HWRNG			29
 #define RX51_PPA_L2_INVAL		40

commit 48840e16c299d886a1fc333375f0564c34cab127
Author: Andrew F. Davis <afd@ti.com>
Date:   Thu Jan 2 16:19:42 2020 -0500

    ARM: OMAP2+: Use ARM SMC Calling Convention when OP-TEE is available
    
    On High-Security(HS) OMAP2+ class devices a couple actions must be
    performed from the ARM TrustZone during boot. These traditionally can be
    performed by calling into the secure ROM code resident in this secure
    world using legacy SMC calls. Optionally OP-TEE can replace this secure
    world functionality by replacing the ROM after boot. ARM recommends a
    standard calling convention is used for this interaction (SMC Calling
    Convention). We check for the presence of OP-TEE and use this type of
    call to perform the needed actions, falling back to the legacy OMAP ROM
    call if OP-TEE is not available.
    
    Signed-off-by: Andrew F. Davis <afd@ti.com>
    Reviewed-by: Lokesh Vutla <lokeshvutla@ti.com>
    Signed-off-by: Tony Lindgren <tony@atomide.com>

diff --git a/arch/arm/mach-omap2/omap-secure.h b/arch/arm/mach-omap2/omap-secure.h
index 78a1c4f04bbe..736e594365f4 100644
--- a/arch/arm/mach-omap2/omap-secure.h
+++ b/arch/arm/mach-omap2/omap-secure.h
@@ -62,6 +62,8 @@
 
 extern u32 omap_secure_dispatcher(u32 idx, u32 flag, u32 nargs,
 				u32 arg1, u32 arg2, u32 arg3, u32 arg4);
+extern void omap_smccc_smc(u32 fn, u32 arg);
+extern void omap_smc1(u32 fn, u32 arg);
 extern u32 omap_smc2(u32 id, u32 falg, u32 pargs);
 extern u32 omap_smc3(u32 id, u32 process, u32 flag, u32 pargs);
 extern phys_addr_t omap_secure_ram_mempool_base(void);

commit dbebc8bfe9dcb760b72ec7e2bb9de30a174ff8dc
Author: Andrew F. Davis <afd@ti.com>
Date:   Thu Jan 2 16:19:41 2020 -0500

    ARM: OMAP2+: Introduce check for OP-TEE in omap_secure_init()
    
    This check and associated flag can be used to signal the presence
    of OP-TEE on the platform. This can be used to determine which
    SMC calls to make to perform secure operations.
    
    Signed-off-by: Andrew F. Davis <afd@ti.com>
    Reviewed-by: Lokesh Vutla <lokeshvutla@ti.com>
    Signed-off-by: Tony Lindgren <tony@atomide.com>

diff --git a/arch/arm/mach-omap2/omap-secure.h b/arch/arm/mach-omap2/omap-secure.h
index 9aeeb236a224..78a1c4f04bbe 100644
--- a/arch/arm/mach-omap2/omap-secure.h
+++ b/arch/arm/mach-omap2/omap-secure.h
@@ -10,6 +10,8 @@
 #ifndef OMAP_ARCH_OMAP_SECURE_H
 #define OMAP_ARCH_OMAP_SECURE_H
 
+#include <linux/types.h>
+
 /* Monitor error code */
 #define  API_HAL_RET_VALUE_NS2S_CONVERSION_ERROR	0xFFFFFFFE
 #define  API_HAL_RET_VALUE_SERVICE_UNKNWON		0xFFFFFFFF
@@ -72,6 +74,7 @@ extern u32 rx51_secure_dispatcher(u32 idx, u32 process, u32 flag, u32 nargs,
 extern u32 rx51_secure_update_aux_cr(u32 set_bits, u32 clear_bits);
 extern u32 rx51_secure_rng_call(u32 ptr, u32 count, u32 flag);
 
+extern bool optee_available;
 void omap_secure_init(void);
 
 #ifdef CONFIG_SOC_HAS_REALTIME_COUNTER

commit db711893eac81442fb5cde3801e183d3abfe5693
Author: Andrew F. Davis <afd@ti.com>
Date:   Thu Jan 2 16:19:40 2020 -0500

    ARM: OMAP2+: Add omap_secure_init callback hook for secure initialization
    
    This can be used for detecting secure features or making early device
    init sequence changes based on device security type.
    
    Signed-off-by: Andrew F. Davis <afd@ti.com>
    Reviewed-by: Lokesh Vutla <lokeshvutla@ti.com>
    Signed-off-by: Tony Lindgren <tony@atomide.com>

diff --git a/arch/arm/mach-omap2/omap-secure.h b/arch/arm/mach-omap2/omap-secure.h
index 20046e8f8ecb..9aeeb236a224 100644
--- a/arch/arm/mach-omap2/omap-secure.h
+++ b/arch/arm/mach-omap2/omap-secure.h
@@ -72,6 +72,8 @@ extern u32 rx51_secure_dispatcher(u32 idx, u32 process, u32 flag, u32 nargs,
 extern u32 rx51_secure_update_aux_cr(u32 set_bits, u32 clear_bits);
 extern u32 rx51_secure_rng_call(u32 ptr, u32 count, u32 flag);
 
+void omap_secure_init(void);
+
 #ifdef CONFIG_SOC_HAS_REALTIME_COUNTER
 void set_cntfreq(void);
 #else

commit d2912cb15bdda8ba4a5dd73396ad62641af2f520
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Tue Jun 4 10:11:33 2019 +0200

    treewide: Replace GPLv2 boilerplate/reference with SPDX - rule 500
    
    Based on 2 normalized pattern(s):
    
      this program is free software you can redistribute it and or modify
      it under the terms of the gnu general public license version 2 as
      published by the free software foundation
    
      this program is free software you can redistribute it and or modify
      it under the terms of the gnu general public license version 2 as
      published by the free software foundation #
    
    extracted by the scancode license scanner the SPDX license identifier
    
      GPL-2.0-only
    
    has been chosen to replace the boilerplate/reference in 4122 file(s).
    
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Reviewed-by: Enrico Weigelt <info@metux.net>
    Reviewed-by: Kate Stewart <kstewart@linuxfoundation.org>
    Reviewed-by: Allison Randal <allison@lohutok.net>
    Cc: linux-spdx@vger.kernel.org
    Link: https://lkml.kernel.org/r/20190604081206.933168790@linutronix.de
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/arch/arm/mach-omap2/omap-secure.h b/arch/arm/mach-omap2/omap-secure.h
index c509cde71f93..20046e8f8ecb 100644
--- a/arch/arm/mach-omap2/omap-secure.h
+++ b/arch/arm/mach-omap2/omap-secure.h
@@ -1,3 +1,4 @@
+/* SPDX-License-Identifier: GPL-2.0-only */
 /*
  * omap-secure.h: OMAP Secure infrastructure header.
  *
@@ -5,10 +6,6 @@
  *	Santosh Shilimkar <santosh.shilimkar@ti.com>
  * Copyright (C) 2012 Ivaylo Dimitrov <freemangordon@abv.bg>
  * Copyright (C) 2013 Pali Rohár <pali.rohar@gmail.com>
- *
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License version 2 as
- * published by the Free Software Foundation.
  */
 #ifndef OMAP_ARCH_OMAP_SECURE_H
 #define OMAP_ARCH_OMAP_SECURE_H

commit d09220a887f70368afa79e850c95e74890c0a32d
Author: Tony Lindgren <tony@atomide.com>
Date:   Mon Nov 27 08:57:26 2017 -0800

    ARM: OMAP2+: Fix SRAM virt to phys translation for save_secure_ram_context
    
    With the CMA changes from Joonsoo Kim <iamjoonsoo.kim@lge.com>, it
    was noticed that n900 stopped booting. After investigating it turned
    out that n900 save_secure_ram_context does some whacky virtual to
    physical address translation for the SRAM data address.
    
    As we now only have minimal parts of omap3 idle code copied to SRAM,
    running save_secure_ram_context() in SRAM is not needed. It only gets
    called on PM init. And it seems there's no need to ever call this from
    SRAM idle code.
    
    So let's just keep save_secure_ram_context() in DDR, and pass it the
    physical address of the parameters. We can do everything else in
    omap-secure.c like we already do for other secure code.
    
    And since we don't have any documentation, I still have no clue what
    the values for 0, 1 and 1 for the parameters might be. If somebody has
    figured it out, please do send a patch to add some comments.
    
    Debugged-by: Joonsoo Kim <iamjoonsoo.kim@lge.com>
    Signed-off-by: Tony Lindgren <tony@atomide.com>

diff --git a/arch/arm/mach-omap2/omap-secure.h b/arch/arm/mach-omap2/omap-secure.h
index bae263fba640..c509cde71f93 100644
--- a/arch/arm/mach-omap2/omap-secure.h
+++ b/arch/arm/mach-omap2/omap-secure.h
@@ -31,6 +31,8 @@
 /* Maximum Secure memory storage size */
 #define OMAP_SECURE_RAM_STORAGE	(88 * SZ_1K)
 
+#define OMAP3_SAVE_SECURE_RAM_SZ	0x803F
+
 /* Secure low power HAL API index */
 #define OMAP4_HAL_SAVESECURERAM_INDEX	0x1a
 #define OMAP4_HAL_SAVEHW_INDEX		0x1b
@@ -65,6 +67,8 @@ extern u32 omap_smc2(u32 id, u32 falg, u32 pargs);
 extern u32 omap_smc3(u32 id, u32 process, u32 flag, u32 pargs);
 extern phys_addr_t omap_secure_ram_mempool_base(void);
 extern int omap_secure_ram_reserve_memblock(void);
+extern u32 save_secure_ram_context(u32 args_pa);
+extern u32 omap3_save_secure_ram(void __iomem *save_regs, int size);
 
 extern u32 rx51_secure_dispatcher(u32 idx, u32 process, u32 flag, u32 nargs,
 				  u32 arg1, u32 arg2, u32 arg3, u32 arg4);

commit c0053bd50af57c4ebf032a9de1b07ca78c982452
Author: Nishanth Menon <nm@ti.com>
Date:   Thu Aug 6 10:54:24 2015 -0500

    ARM: OMAP5 / DRA7: Introduce workaround for 801819
    
    Add workaround for Cortex-A15 ARM erratum 801819 which says in summary
    that "A livelock can occur in the L2 cache arbitration that might
    prevent a snoop from completing. Under certain conditions this can
    cause the system to deadlock. "
    
    Recommended workaround is as follows:
    Do both of the following:
    
    1) Do not use the write-back no-allocate memory type.
    2) Do not issue write-back cacheable stores at any time when the cache
    is disabled (SCTLR.C=0) and the MMU is enabled (SCTLR.M=1). Because it
    is implementation defined whether cacheable stores update the cache when
    the cache is disabled it is not expected that any portable code will
    execute cacheable stores when the cache is disabled.
    
    For implementations of Cortex-A15 configured without the “L2 arbitration
    register slice” option (typically one or two core systems), you must
    also do the following:
    
    3) Disable write-streaming in each CPU by setting ACTLR[28:25] = 0b1111
    
    So, we provide an option to disable write streaming on OMAP5 and DRA7.
    It is a rare condition to occur and may be enabled selectively based
    on platform acceptance of risk.
    
    Applies to: A15 revisions r2p0, r2p1, r2p2, r2p3 or r2p4 and REVIDR[3]
    is set to 0.
    
    Based on ARM errata Document revision 18.0 (22 Nov 2013)
    
    Note: the configuration for the workaround needs to be done with
    each CPU bringup, since CPU0 bringup is done by bootloader, it is
    recommended to have the workaround in the bootloader, kernel also does
    ensure that CPU0 has the workaround and makes the workaround active
    when CPU1 gets active.
    
    With CONFIG_SMP disabled, it is expected to be done by the bootloader.
    
    This does show significant degradation in synthetic tests such as
    mbw (https://packages.qa.debian.org/m/mbw.html)
    mbw -n 100 100|grep AVG (on a test platform)
    Without enabling the erratum:
    AVG Method: MEMCPY  Elapsed: 0.13406  MiB: 100.00000  Copy: 745.913 MiB/s
    AVG Method: DUMB    Elapsed: 0.06746  MiB: 100.00000  Copy: 1482.357 MiB/s
    AVG Method: MCBLOCK Elapsed: 0.03058  MiB: 100.00000  Copy: 3270.569 MiB/s
    After enabling the erratum:
    AVG Method: MEMCPY  Elapsed: 0.13757  MiB: 100.00000  Copy: 726.913 MiB/s
    AVG Method: DUMB    Elapsed: 0.12024  MiB: 100.00000  Copy: 831.668 MiB/s
    AVG Method: MCBLOCK Elapsed: 0.09243  MiB: 100.00000  Copy: 1081.942 MiB/s
    
    Most benchmarks are designed for specific performance analysis, so
    overall usecase must be considered before making a decision to
    enable/disable the erratum workaround.
    
    Pending internal investigation, the erratum is kept disabled by default.
    
    Cc: Russell King <rmk+kernel@arm.linux.org.uk>
    Cc: Catalin Marinas <catalin.marinas@arm.com>
    Cc: Tony Lindgren <tony@atomide.com>
    Suggested-by: Richard Woodruff <r-woodruff2@ti.com>
    Suggested-by: Brad Griffis <bgriffis@ti.com>
    Signed-off-by: Nishanth Menon <nm@ti.com>
    Signed-off-by: Tony Lindgren <tony@atomide.com>

diff --git a/arch/arm/mach-omap2/omap-secure.h b/arch/arm/mach-omap2/omap-secure.h
index af2851fbcdf0..bae263fba640 100644
--- a/arch/arm/mach-omap2/omap-secure.h
+++ b/arch/arm/mach-omap2/omap-secure.h
@@ -46,6 +46,7 @@
 
 #define OMAP5_DRA7_MON_SET_CNTFRQ_INDEX	0x109
 #define OMAP5_MON_AMBA_IF_INDEX		0x108
+#define OMAP5_DRA7_MON_SET_ACR_INDEX	0x107
 
 /* Secure PPA(Primary Protected Application) APIs */
 #define OMAP4_PPA_L2_POR_INDEX		0x23

commit 606da4826b89b044b51e3a84958b802204cfe4c7
Author: Stefan Hengelein <stefan.hengelein@fau.de>
Date:   Wed Feb 25 19:44:27 2015 +0100

    ARM: OMAP4: remove dead kconfig option OMAP4_ERRATA_I688
    
    The Kconfig-Option OMAP4_ERRATA_I688 is never visible due to a
    contradiction in it's dependencies.
    The option requires ARCH_MULTIPLATFORM to be 'disabled'. However, an
    enclosing menu requires either ARCH_MULTI_V6 or ARCH_MULTI_V7 to be
    enabled. These options inherit a dependency from an enclosing menu,
    that requires ARCH_MULTIPLATFORM to be 'enabled'.
    This is a contradiction and made this option also unavailable for
    non-multiplatform configurations.
    
    Since there are no selects on OMAP4_ERRATA_I688, which would ignore
    dependencies, the code related to that option is dead and can be
    removed.
    
    This (logical) defect has been found with the undertaker tool.
    (https://undertaker.cs.fau.de)
    
    Signed-off-by: Stefan Hengelein <stefan.hengelein@fau.de>
    Acked-by: Santosh Shilimkar <ssantosh@kernel.org>
    Signed-off-by: Tony Lindgren <tony@atomide.com>

diff --git a/arch/arm/mach-omap2/omap-secure.h b/arch/arm/mach-omap2/omap-secure.h
index dec2b05d184b..af2851fbcdf0 100644
--- a/arch/arm/mach-omap2/omap-secure.h
+++ b/arch/arm/mach-omap2/omap-secure.h
@@ -70,13 +70,6 @@ extern u32 rx51_secure_dispatcher(u32 idx, u32 process, u32 flag, u32 nargs,
 extern u32 rx51_secure_update_aux_cr(u32 set_bits, u32 clear_bits);
 extern u32 rx51_secure_rng_call(u32 ptr, u32 count, u32 flag);
 
-#ifdef CONFIG_OMAP4_ERRATA_I688
-extern int omap_barrier_reserve_memblock(void);
-#else
-static inline void omap_barrier_reserve_memblock(void)
-{ }
-#endif
-
 #ifdef CONFIG_SOC_HAS_REALTIME_COUNTER
 void set_cntfreq(void);
 #else

commit 4664d4d86012c4a51b9f40d0d72e27e39205e874
Author: Santosh Shilimkar <santosh.shilimkar@ti.com>
Date:   Fri Feb 8 17:07:31 2013 +0530

    ARM: OMAP5 / DRA7: PM / wakeupgen: Enables ES2 PM mode by default
    
    Enables MPUSS ES2 power management mode using ES2_PM_MODE in
    AMBA_IF_MODE register.
    
    0x0: OMAP5 ES1 behavior, CPU cores would enter and exit OFF mode together.
         Broken! Fortunately, we do not support this anymore.
    0x1: OMAP5 ES2, DRA7 behavior, CPU cores are allowed to enter/exit OFF mode
         independently.
    
    This is one time settings thanks to always ON domain.
    
    Signed-off-by: Santosh Shilimkar <santosh.shilimkar@ti.com>
    [nm@ti.com: minor conflict resolutions, consolidation for DRA7]
    Signed-off-by: Nishanth Menon <nm@ti.com>
    Reviewed-by: Kevin Hilman <khilman@linaro.org>
    Tested-by: Kevin Hilman <khilman@linaro.org>

diff --git a/arch/arm/mach-omap2/omap-secure.h b/arch/arm/mach-omap2/omap-secure.h
index 3e97c6c8ecf1..dec2b05d184b 100644
--- a/arch/arm/mach-omap2/omap-secure.h
+++ b/arch/arm/mach-omap2/omap-secure.h
@@ -45,6 +45,7 @@
 #define OMAP4_MON_L2X0_PREFETCH_INDEX	0x113
 
 #define OMAP5_DRA7_MON_SET_CNTFRQ_INDEX	0x109
+#define OMAP5_MON_AMBA_IF_INDEX		0x108
 
 /* Secure PPA(Primary Protected Application) APIs */
 #define OMAP4_PPA_L2_POR_INDEX		0x23

commit 39cec6222924dfbb5d7f5d2b2f718af34e872add
Author: Tony Lindgren <tony@atomide.com>
Date:   Mon Nov 18 13:56:48 2013 -0800

    ARM: OMAP2+: Fix undefined reference to set_cntfreq
    
    If CONFIG_SOC_HAS_REALTIME_COUNTER is not selected for omap5
    or dra7xx, we can get the following error:
    
    arch/arm/mach-omap2/built-in.o: In function `omap4_secondary_init':
    :(.text+0x7ab0): undefined reference to `set_cntfreq'
    
    Fix the issue by not trying to initalize the realtime counter
    unles CONFIG_SOC_HAS_REALTIME_COUNTER is selected.
    
    Acked-by: Santosh Shilimkar <santosh.shilimkar@ti.com>
    Signed-off-by: Tony Lindgren <tony@atomide.com>

diff --git a/arch/arm/mach-omap2/omap-secure.h b/arch/arm/mach-omap2/omap-secure.h
index 8cc7d331437d..3e97c6c8ecf1 100644
--- a/arch/arm/mach-omap2/omap-secure.h
+++ b/arch/arm/mach-omap2/omap-secure.h
@@ -76,6 +76,13 @@ static inline void omap_barrier_reserve_memblock(void)
 { }
 #endif
 
+#ifdef CONFIG_SOC_HAS_REALTIME_COUNTER
 void set_cntfreq(void);
+#else
+static inline void set_cntfreq(void)
+{
+}
+#endif
+
 #endif /* __ASSEMBLER__ */
 #endif /* OMAP_ARCH_OMAP_SECURE_H */

commit d5aabbcaee6bb5fb57ea8c67714516af4d8238ce
Merge: aac59e3efce3 60cd8b09f1e2
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Mon Nov 11 16:57:16 2013 +0900

    Merge tag 'boards-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/arm/arm-soc
    
    Pull ARM SoC board updates from Olof Johansson:
     "Board-related updates.  This branch is getting smaller and smaller,
      which is the whole idea so that's reassuring.
    
      Right now by far most of the code is related to shmobile updates, and
      they are now switching over to removal of board code and migration to
      multiplatform, so we'll see their board code base shrink in the near
      future too, I hope.
    
      In addition to that is some defconfig updates, some display updates
      for OMAP and a bit of new board support for Rockchip boards"
    
    * tag 'boards-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/arm/arm-soc: (56 commits)
      ARM: rockchip: add support for rk3188 and Radxa Rock board
      ARM: rockchip: add dts for bqcurie2 tablet
      ARM: rockchip: enable arm-global-timer
      ARM: rockchip: move shared dt properties to common source file
      ARM: OMAP2+: display: Create omap_vout device inside omap_display_init
      ARM: OMAP2+: display: Create omapvrfb and omapfb devices inside omap_display_init
      ARM: OMAP2+: display: Create omapdrm device inside omap_display_init
      ARM: OMAP2+: drm: Don't build device for DMM
      ARM: tegra: defconfig updates
      RX-51: Add support for OMAP3 ROM Random Number Generator
      ARM: OMAP3: RX-51: ARM errata 430973 workaround
      ARM: OMAP3: Add secure function omap_smc3() which calling instruction smc #1
      ARM: shmobile: marzen: enable INTC IRQ
      ARM: shmobile: bockw: add SMSC support on reference
      ARM: shmobile: Use SMP on Koelsch
      ARM: shmobile: Remove KZM9D reference DTS
      ARM: shmobile: Let KZM9D multiplatform boot with KZM9D DTB
      ARM: shmobile: Remove non-multiplatform KZM9D reference support
      ARM: shmobile: Use KZM9D without reference for multiplatform
      ARM: shmobile: Sync KZM9D DTS with KZM9D reference DTS
      ...

commit 5523e4092ee4f2ef58d00c78365c8bddf730c900
Author: R Sricharan <r.sricharan@ti.com>
Date:   Thu Oct 10 13:13:48 2013 +0530

    ARM: OMAP5/DRA7: realtime_counter: Configure CNTFRQ register
    
    The realtime counter called master counter, produces the count
    used by the private timer peripherals in the MPU_CLUSTER. The
    CNTFRQ per cpu register is used to denote the frequency of the counter.
    Currently the frequency value is passed from the
    DT file, but this is not scalable when we have other non-DT guest
    OS. This register must be set to the right value by the
    secure rom code. Setting this register helps in propagating the right
    frequency value across OSes.
    
    More discussions and the reason for adding this in a non-DT
    way can be seen from below.
    http://www.mail-archive.com/linux-omap@vger.kernel.org/msg93832.html
    
    So configuring this secure register for all the cpus here.
    
    Cc: Nishanth Menon <nm@ti.com>
    Cc: Rajendra Nayak <rnayak@ti.com>
    Cc: Marc Zyngier <marc.zyngier@arm.com>
    Cc: Mark Rutland <mark.rutland@arm.com>
    Tested-by: Nishanth Menon <nm@ti.com>
    Acked-by: Santosh Shilimkar <santosh.shilimkar@ti.com>
    Signed-off-by: Sricharan R <r.sricharan@ti.com>
    Signed-off-by: Tony Lindgren <tony@atomide.com>

diff --git a/arch/arm/mach-omap2/omap-secure.h b/arch/arm/mach-omap2/omap-secure.h
index 0e729170c46b..a5ee09d20ac9 100644
--- a/arch/arm/mach-omap2/omap-secure.h
+++ b/arch/arm/mach-omap2/omap-secure.h
@@ -42,6 +42,8 @@
 #define OMAP4_MON_L2X0_AUXCTRL_INDEX	0x109
 #define OMAP4_MON_L2X0_PREFETCH_INDEX	0x113
 
+#define OMAP5_DRA7_MON_SET_CNTFRQ_INDEX	0x109
+
 /* Secure PPA(Primary Protected Application) APIs */
 #define OMAP4_PPA_L2_POR_INDEX		0x23
 #define OMAP4_PPA_CPU_ACTRL_SMP_INDEX	0x25
@@ -60,5 +62,7 @@ extern int omap_barrier_reserve_memblock(void);
 static inline void omap_barrier_reserve_memblock(void)
 { }
 #endif
+
+void set_cntfreq(void);
 #endif /* __ASSEMBLER__ */
 #endif /* OMAP_ARCH_OMAP_SECURE_H */

commit d2065e2b5bb3ec986f0f3ba044a81a136767d0b4
Author: Pali Rohár <pali.rohar@gmail.com>
Date:   Fri Sep 20 15:25:07 2013 +0200

    RX-51: Add support for OMAP3 ROM Random Number Generator
    
    Adding this driver as platform device and only for RX-51 until somebody test if
    it working also on other OMAP3 HS devices and until there will be generic ARM
    way to deal with SMC calls.
    
    Signed-off-by: Pali Rohár <pali.rohar@gmail.com>
    [tony@atomide.com: folded in the clock alias change]
    Signed-off-by: Tony Lindgren <tony@atomide.com>

diff --git a/arch/arm/mach-omap2/omap-secure.h b/arch/arm/mach-omap2/omap-secure.h
index 51b59c686a53..f6cabb0033fc 100644
--- a/arch/arm/mach-omap2/omap-secure.h
+++ b/arch/arm/mach-omap2/omap-secure.h
@@ -65,6 +65,7 @@ extern int omap_secure_ram_reserve_memblock(void);
 extern u32 rx51_secure_dispatcher(u32 idx, u32 process, u32 flag, u32 nargs,
 				  u32 arg1, u32 arg2, u32 arg3, u32 arg4);
 extern u32 rx51_secure_update_aux_cr(u32 set_bits, u32 clear_bits);
+extern u32 rx51_secure_rng_call(u32 ptr, u32 count, u32 flag);
 
 #ifdef CONFIG_OMAP4_ERRATA_I688
 extern int omap_barrier_reserve_memblock(void);

commit 4748a7240284b0f68bd47a66365c2cd561939830
Author: Pali Rohár <pali.rohar@gmail.com>
Date:   Wed Sep 18 21:43:56 2013 +0200

    ARM: OMAP3: RX-51: ARM errata 430973 workaround
    
    Closed and signed Nokia X-Loader bootloader stored in RX-51 nand does not set
    IBE bit in ACTLR and starting kernel in non-secure mode. So direct write to
    ACTLR by our kernel does not working and the code for ARM errata 430973 in
    commit 7ce236fcd6fd45b0441a2d49acb2ceb2de2e8a47 that sets IBE bit is a noop.
    
    In order to have workaround for ARM errata 430973 from non-secure world on
    RX-51 we needs Secure Monitor Call to set IBE BIT in ACTLR.
    
    This patch adds RX-51 specific secure support code and sets IBE bit in ACTLR
    during board init code for ARM errata 430973 workaround.
    
    Note that new function rx51_secure_dispatcher() differs from existing
    omap_secure_dispatcher(). It calling omap_smc3() and param[0] is nargs+1.
    
    ARM errata 430973 workaround is needed for thumb-2 ISA compiled userspace
    binaries. Without this workaround thumb-2 binaries crashing. So with this
    patch it is possible to recompile and run applications/binaries with thumb-2
    ISA on RX-51.
    
    Signed-off-by: Ivaylo Dimitrov <freemangordon@abv.bg>
    Signed-off-by: Pali Rohár <pali.rohar@gmail.com>
    Signed-off-by: Tony Lindgren <tony@atomide.com>

diff --git a/arch/arm/mach-omap2/omap-secure.h b/arch/arm/mach-omap2/omap-secure.h
index c4586f42ea98..51b59c686a53 100644
--- a/arch/arm/mach-omap2/omap-secure.h
+++ b/arch/arm/mach-omap2/omap-secure.h
@@ -3,6 +3,8 @@
  *
  * Copyright (C) 2011 Texas Instruments, Inc.
  *	Santosh Shilimkar <santosh.shilimkar@ti.com>
+ * Copyright (C) 2012 Ivaylo Dimitrov <freemangordon@abv.bg>
+ * Copyright (C) 2013 Pali Rohár <pali.rohar@gmail.com>
  *
  * This program is free software; you can redistribute it and/or modify
  * it under the terms of the GNU General Public License version 2 as
@@ -46,6 +48,11 @@
 #define OMAP4_PPA_L2_POR_INDEX		0x23
 #define OMAP4_PPA_CPU_ACTRL_SMP_INDEX	0x25
 
+/* Secure RX-51 PPA (Primary Protected Application) APIs */
+#define RX51_PPA_HWRNG			29
+#define RX51_PPA_L2_INVAL		40
+#define RX51_PPA_WRITE_ACR		42
+
 #ifndef __ASSEMBLER__
 
 extern u32 omap_secure_dispatcher(u32 idx, u32 flag, u32 nargs,
@@ -55,6 +62,10 @@ extern u32 omap_smc3(u32 id, u32 process, u32 flag, u32 pargs);
 extern phys_addr_t omap_secure_ram_mempool_base(void);
 extern int omap_secure_ram_reserve_memblock(void);
 
+extern u32 rx51_secure_dispatcher(u32 idx, u32 process, u32 flag, u32 nargs,
+				  u32 arg1, u32 arg2, u32 arg3, u32 arg4);
+extern u32 rx51_secure_update_aux_cr(u32 set_bits, u32 clear_bits);
+
 #ifdef CONFIG_OMAP4_ERRATA_I688
 extern int omap_barrier_reserve_memblock(void);
 #else

commit a33f1788192d13165594f8ec6975dbae34502ec9
Author: Pali Rohár <pali.rohar@gmail.com>
Date:   Sun Sep 8 09:43:29 2013 +0200

    ARM: OMAP3: Add secure function omap_smc3() which calling instruction smc #1
    
    Here is new version (v4) of omap secure part patch:
    
    Other secure functions omap_smc1() and omap_smc2() calling instruction smc #0
    but Nokia RX-51 board needs to call smc #1 for PPA access.
    
    Signed-off-by: Ivaylo Dimitrov <freemangordon@abv.bg>
    Signed-off-by: Pali Rohár <pali.rohar@gmail.com>
    Signed-off-by: Tony Lindgren <tony@atomide.com>

diff --git a/arch/arm/mach-omap2/omap-secure.h b/arch/arm/mach-omap2/omap-secure.h
index 0e729170c46b..c4586f42ea98 100644
--- a/arch/arm/mach-omap2/omap-secure.h
+++ b/arch/arm/mach-omap2/omap-secure.h
@@ -51,6 +51,7 @@
 extern u32 omap_secure_dispatcher(u32 idx, u32 flag, u32 nargs,
 				u32 arg1, u32 arg2, u32 arg3, u32 arg4);
 extern u32 omap_smc2(u32 id, u32 falg, u32 pargs);
+extern u32 omap_smc3(u32 id, u32 process, u32 flag, u32 pargs);
 extern phys_addr_t omap_secure_ram_mempool_base(void);
 extern int omap_secure_ram_reserve_memblock(void);
 

commit f7a9b8a147cc10c7181cf0ca7b2b06cebf950140
Author: Lokesh Vutla <lokeshvutla@ti.com>
Date:   Tue Oct 2 00:17:06 2012 +0530

    ARM: OMAP: Move plat/omap-secure.h locally to mach-omap2
    
    Moving plat/omap-secure.h locally to mach-omap2/
    as part of single zImage work
    
    Signed-off-by: Lokesh Vutla <lokeshvutla@ti.com>
    Signed-off-by: Tony Lindgren <tony@atomide.com>

diff --git a/arch/arm/mach-omap2/omap-secure.h b/arch/arm/mach-omap2/omap-secure.h
index c90a43589abe..0e729170c46b 100644
--- a/arch/arm/mach-omap2/omap-secure.h
+++ b/arch/arm/mach-omap2/omap-secure.h
@@ -52,6 +52,13 @@ extern u32 omap_secure_dispatcher(u32 idx, u32 flag, u32 nargs,
 				u32 arg1, u32 arg2, u32 arg3, u32 arg4);
 extern u32 omap_smc2(u32 id, u32 falg, u32 pargs);
 extern phys_addr_t omap_secure_ram_mempool_base(void);
+extern int omap_secure_ram_reserve_memblock(void);
 
+#ifdef CONFIG_OMAP4_ERRATA_I688
+extern int omap_barrier_reserve_memblock(void);
+#else
+static inline void omap_barrier_reserve_memblock(void)
+{ }
+#endif
 #endif /* __ASSEMBLER__ */
 #endif /* OMAP_ARCH_OMAP_SECURE_H */

commit c1db9d735c4d8de331611b7cc62926ffb7a7512d
Author: Tony Lindgren <tony@atomide.com>
Date:   Thu Sep 20 11:41:14 2012 -0700

    ARM: OMAP2+: Make omap-secure.h local
    
    This can be local to mach-omap2.
    
    Signed-off-by: Tony Lindgren <tony@atomide.com>

diff --git a/arch/arm/mach-omap2/omap-secure.h b/arch/arm/mach-omap2/omap-secure.h
new file mode 100644
index 000000000000..c90a43589abe
--- /dev/null
+++ b/arch/arm/mach-omap2/omap-secure.h
@@ -0,0 +1,57 @@
+/*
+ * omap-secure.h: OMAP Secure infrastructure header.
+ *
+ * Copyright (C) 2011 Texas Instruments, Inc.
+ *	Santosh Shilimkar <santosh.shilimkar@ti.com>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation.
+ */
+#ifndef OMAP_ARCH_OMAP_SECURE_H
+#define OMAP_ARCH_OMAP_SECURE_H
+
+/* Monitor error code */
+#define  API_HAL_RET_VALUE_NS2S_CONVERSION_ERROR	0xFFFFFFFE
+#define  API_HAL_RET_VALUE_SERVICE_UNKNWON		0xFFFFFFFF
+
+/* HAL API error codes */
+#define  API_HAL_RET_VALUE_OK		0x00
+#define  API_HAL_RET_VALUE_FAIL		0x01
+
+/* Secure HAL API flags */
+#define FLAG_START_CRITICAL		0x4
+#define FLAG_IRQFIQ_MASK		0x3
+#define FLAG_IRQ_ENABLE			0x2
+#define FLAG_FIQ_ENABLE			0x1
+#define NO_FLAG				0x0
+
+/* Maximum Secure memory storage size */
+#define OMAP_SECURE_RAM_STORAGE	(88 * SZ_1K)
+
+/* Secure low power HAL API index */
+#define OMAP4_HAL_SAVESECURERAM_INDEX	0x1a
+#define OMAP4_HAL_SAVEHW_INDEX		0x1b
+#define OMAP4_HAL_SAVEALL_INDEX		0x1c
+#define OMAP4_HAL_SAVEGIC_INDEX		0x1d
+
+/* Secure Monitor mode APIs */
+#define OMAP4_MON_SCU_PWR_INDEX		0x108
+#define OMAP4_MON_L2X0_DBG_CTRL_INDEX	0x100
+#define OMAP4_MON_L2X0_CTRL_INDEX	0x102
+#define OMAP4_MON_L2X0_AUXCTRL_INDEX	0x109
+#define OMAP4_MON_L2X0_PREFETCH_INDEX	0x113
+
+/* Secure PPA(Primary Protected Application) APIs */
+#define OMAP4_PPA_L2_POR_INDEX		0x23
+#define OMAP4_PPA_CPU_ACTRL_SMP_INDEX	0x25
+
+#ifndef __ASSEMBLER__
+
+extern u32 omap_secure_dispatcher(u32 idx, u32 flag, u32 nargs,
+				u32 arg1, u32 arg2, u32 arg3, u32 arg4);
+extern u32 omap_smc2(u32 id, u32 falg, u32 pargs);
+extern phys_addr_t omap_secure_ram_mempool_base(void);
+
+#endif /* __ASSEMBLER__ */
+#endif /* OMAP_ARCH_OMAP_SECURE_H */
