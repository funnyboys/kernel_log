commit 8b9c550e37ff4e4d0de2890a835f44a7813e3423
Author: Alex Elder <elder@linaro.org>
Date:   Mon Apr 21 16:53:09 2014 -0500

    ARM: bcm: use inline assembly for "smc" request
    
    Move the code that implements the "smc" call into a C function that
    uses inline assembly.  This allows us to make that function private,
    and enables us to get rid of "arch/arm/mach-bcm/bcm_kona_smc_asm.S".
    Rename what had been the "buffer_addr" argument to be "buffer_phys"
    so it's consistent with other usage in this file.
    
    Since it's now easy to do, verify that r12 contains SEC_EXIT_NORMAL
    upon completion of the SMC.  There really isn't a good way to handle
    the abnormal completion of a secure monitor request.
    
    Since "bcm_kona_smc.h" is now only included from C files, eliminate
    the #ifndef __ASSEMBLY__.
    
    Signed-off-by: Alex Elder <elder@linaro.org>
    Reviewed-by: Tim Kryger <tim.kryger@linaro.org>
    Reviewed-by: Markus Mayer <markus.mayer@linaro.org>
    Reviewed-by: Matt Porter <mporter@linaro.org>
    Signed-off-by: Matt Porter <mporter@linaro.org>

diff --git a/arch/arm/mach-bcm/bcm_kona_smc.h b/arch/arm/mach-bcm/bcm_kona_smc.h
index 629e64a89982..2e29ec67e414 100644
--- a/arch/arm/mach-bcm/bcm_kona_smc.h
+++ b/arch/arm/mach-bcm/bcm_kona_smc.h
@@ -21,7 +21,6 @@
 #define SEC_ROM_RET_OK			0x00000001
 #define SEC_EXIT_NORMAL			0x1
 
-#ifndef	__ASSEMBLY__
 extern int __init bcm_kona_smc_init(void);
 
 extern unsigned bcm_kona_smc(unsigned service_id,
@@ -30,9 +29,4 @@ extern unsigned bcm_kona_smc(unsigned service_id,
 			     unsigned arg2,
 			     unsigned arg3);
 
-extern int bcm_kona_smc_asm(u32 service_id,
-			    u32 buffer_addr);
-
-#endif	/* __ASSEMBLY__ */
-
 #endif /* BCM_KONA_SMC_H */

commit c64756cca2fb4da96fcc71e376d712297aedc4a2
Author: Alex Elder <elder@linaro.org>
Date:   Mon Apr 21 16:53:04 2014 -0500

    ARM: bcm: clean up SMC code
    
    This patch just does some simple cleanup in "bcm_kona_smc.c":
        - Get rid of the secure_bridge_data structure.  Instead, just
          define two globals that record the physical and virtual
          addresses of the SMC arguments buffer.  Use "buffer" instead
          of "bounce" in their names.  Drop of the erroneous __iomem
          annotation for the physical address.
        - Get rid of the initialized flag and just use a non-null buffer
          address to indicate that.
        - Get the size of the memory region when fetching the SMC
          arguments buffer location from the device tree.  Use it to
          call ioremap() directly rather than requiring of_iomap() to
          go look it up again.
        - Do some additional validation on that memory region size.
        - Flush caches unconditionally in __bcm_kona_smc(); nothing
          supplies SSAPI_BRCM_START_VC_CORE as a service id.
        - Drop a needless initialization of "rc" in __bcm_kona_smc().
    
    It also deletes most of the content of "bcm_kona_smc.h" because it's
    never actually used and is of questionable value anyway.
    
    Signed-off-by: Alex Elder <elder@linaro.org>
    Reviewed-by: Tim Kryger <tim.kryger@linaro.org>
    Reviewed-by: Markus Mayer <markus.mayer@linaro.org>
    Reviewed-by: Matt Porter <mporter@linaro.org>
    Signed-off-by: Matt Porter <mporter@linaro.org>

diff --git a/arch/arm/mach-bcm/bcm_kona_smc.h b/arch/arm/mach-bcm/bcm_kona_smc.h
index d098a7e76744..629e64a89982 100644
--- a/arch/arm/mach-bcm/bcm_kona_smc.h
+++ b/arch/arm/mach-bcm/bcm_kona_smc.h
@@ -15,54 +15,12 @@
 #define BCM_KONA_SMC_H
 
 #include <linux/types.h>
-#define FLAGS	(SEC_ROM_ICACHE_ENABLE_MASK | SEC_ROM_DCACHE_ENABLE_MASK | \
-			SEC_ROM_IRQ_ENABLE_MASK | SEC_ROM_FIQ_ENABLE_MASK)
 
-/*!
- * Definitions for IRQ & FIQ Mask for ARM
- */
-
-#define FIQ_IRQ_MASK						0xC0
-#define FIQ_MASK						0x40
-#define IRQ_MASK						0x80
-
-/*!
- * Secure Mode FLAGs
- */
-
-/* When set, enables ICache within the secure mode */
-#define SEC_ROM_ICACHE_ENABLE_MASK                        0x00000001
-
-/* When set, enables DCache within the secure mode */
-#define SEC_ROM_DCACHE_ENABLE_MASK                        0x00000002
-
-/* When set, enables IRQ within the secure mode */
-#define SEC_ROM_IRQ_ENABLE_MASK                           0x00000004
-
-/* When set, enables FIQ within the secure mode */
-#define SEC_ROM_FIQ_ENABLE_MASK                           0x00000008
-
-/* When set, enables Unified L2 cache within the secure mode */
-#define SEC_ROM_UL2_CACHE_ENABLE_MASK                     0x00000010
-
-/* Broadcom Secure Service API Service IDs */
-#define SSAPI_DORMANT_ENTRY_SERV                          0x01000000
-#define SSAPI_PUBLIC_OTP_SERV                             0x01000001
-#define SSAPI_ENABLE_L2_CACHE                             0x01000002
-#define SSAPI_DISABLE_L2_CACHE                            0x01000003
-#define SSAPI_WRITE_SCU_STATUS                            0x01000004
-#define SSAPI_WRITE_PWR_GATE                              0x01000005
-
-/* Broadcom Secure Service API Return Codes */
+/* Broadcom Secure Service API service IDs, return codes, and exit codes */
+#define SSAPI_ENABLE_L2_CACHE		0x01000002
 #define SEC_ROM_RET_OK			0x00000001
-#define SEC_ROM_RET_FAIL		0x00000009
-
-#define SSAPI_RET_FROM_INT_SERV		0x4
 #define SEC_EXIT_NORMAL			0x1
 
-#define SSAPI_ROW_AES			0x0E000006
-#define SSAPI_BRCM_START_VC_CORE	0x0E000008
-
 #ifndef	__ASSEMBLY__
 extern int __init bcm_kona_smc_init(void);
 

commit 3a76b35186cb967a69c4a3935caf2fdf428e933b
Author: Christian Daudt <csd@broadcom.com>
Date:   Tue Aug 6 17:04:54 2013 -0700

    ARM: bcm: Make secure API call optional
    
    The current bcm_kona_smc_init function throws a BUG_ON if there's no SMC
    device node defined in the device tree.
    
    Since secure API access is optional depending the chip configuration,
    fix this by allowing the rest of the code to run even if there's no SMC
    device node defined
    
    Signed-off-by: Christian Daudt <csd@broadcom.com>
    Reviewed-by: Markus Mayer <markus.mayer@linaro.org>

diff --git a/arch/arm/mach-bcm/bcm_kona_smc.h b/arch/arm/mach-bcm/bcm_kona_smc.h
index 3bedbed1c21b..d098a7e76744 100644
--- a/arch/arm/mach-bcm/bcm_kona_smc.h
+++ b/arch/arm/mach-bcm/bcm_kona_smc.h
@@ -64,7 +64,7 @@
 #define SSAPI_BRCM_START_VC_CORE	0x0E000008
 
 #ifndef	__ASSEMBLY__
-extern void bcm_kona_smc_init(void);
+extern int __init bcm_kona_smc_init(void);
 
 extern unsigned bcm_kona_smc(unsigned service_id,
 			     unsigned arg0,

commit b8eb35fd594aa5b635e329d5c8efab8aaceb8619
Author: Christian Daudt <csd@broadcom.com>
Date:   Tue Feb 26 21:48:49 2013 -0800

    ARM: bcm281xx: Add L2 cache enable code
    
    - Adds a module to provide calls into secure monitor mode
    - Uses this module to make secure monitor calls to enable L2 cache.
    
    Updates from V1:
    - Split DT portion into separate patch
    - replace #ifdef-ed L2 code with "if".
    - move init call to board init
    
    Signed-off-by: Christian Daudt <csd@broadcom.com>
    Acked-by: Arnd Bergmann <arnd@arndb.de>

diff --git a/arch/arm/mach-bcm/bcm_kona_smc.h b/arch/arm/mach-bcm/bcm_kona_smc.h
new file mode 100644
index 000000000000..3bedbed1c21b
--- /dev/null
+++ b/arch/arm/mach-bcm/bcm_kona_smc.h
@@ -0,0 +1,80 @@
+/*
+ * Copyright (C) 2013 Broadcom Corporation
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License as
+ * published by the Free Software Foundation version 2.
+ *
+ * This program is distributed "as is" WITHOUT ANY WARRANTY of any
+ * kind, whether express or implied; without even the implied warranty
+ * of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ */
+
+#ifndef BCM_KONA_SMC_H
+#define BCM_KONA_SMC_H
+
+#include <linux/types.h>
+#define FLAGS	(SEC_ROM_ICACHE_ENABLE_MASK | SEC_ROM_DCACHE_ENABLE_MASK | \
+			SEC_ROM_IRQ_ENABLE_MASK | SEC_ROM_FIQ_ENABLE_MASK)
+
+/*!
+ * Definitions for IRQ & FIQ Mask for ARM
+ */
+
+#define FIQ_IRQ_MASK						0xC0
+#define FIQ_MASK						0x40
+#define IRQ_MASK						0x80
+
+/*!
+ * Secure Mode FLAGs
+ */
+
+/* When set, enables ICache within the secure mode */
+#define SEC_ROM_ICACHE_ENABLE_MASK                        0x00000001
+
+/* When set, enables DCache within the secure mode */
+#define SEC_ROM_DCACHE_ENABLE_MASK                        0x00000002
+
+/* When set, enables IRQ within the secure mode */
+#define SEC_ROM_IRQ_ENABLE_MASK                           0x00000004
+
+/* When set, enables FIQ within the secure mode */
+#define SEC_ROM_FIQ_ENABLE_MASK                           0x00000008
+
+/* When set, enables Unified L2 cache within the secure mode */
+#define SEC_ROM_UL2_CACHE_ENABLE_MASK                     0x00000010
+
+/* Broadcom Secure Service API Service IDs */
+#define SSAPI_DORMANT_ENTRY_SERV                          0x01000000
+#define SSAPI_PUBLIC_OTP_SERV                             0x01000001
+#define SSAPI_ENABLE_L2_CACHE                             0x01000002
+#define SSAPI_DISABLE_L2_CACHE                            0x01000003
+#define SSAPI_WRITE_SCU_STATUS                            0x01000004
+#define SSAPI_WRITE_PWR_GATE                              0x01000005
+
+/* Broadcom Secure Service API Return Codes */
+#define SEC_ROM_RET_OK			0x00000001
+#define SEC_ROM_RET_FAIL		0x00000009
+
+#define SSAPI_RET_FROM_INT_SERV		0x4
+#define SEC_EXIT_NORMAL			0x1
+
+#define SSAPI_ROW_AES			0x0E000006
+#define SSAPI_BRCM_START_VC_CORE	0x0E000008
+
+#ifndef	__ASSEMBLY__
+extern void bcm_kona_smc_init(void);
+
+extern unsigned bcm_kona_smc(unsigned service_id,
+			     unsigned arg0,
+			     unsigned arg1,
+			     unsigned arg2,
+			     unsigned arg3);
+
+extern int bcm_kona_smc_asm(u32 service_id,
+			    u32 buffer_addr);
+
+#endif	/* __ASSEMBLY__ */
+
+#endif /* BCM_KONA_SMC_H */
