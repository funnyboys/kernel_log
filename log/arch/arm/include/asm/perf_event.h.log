commit d2912cb15bdda8ba4a5dd73396ad62641af2f520
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Tue Jun 4 10:11:33 2019 +0200

    treewide: Replace GPLv2 boilerplate/reference with SPDX - rule 500
    
    Based on 2 normalized pattern(s):
    
      this program is free software you can redistribute it and or modify
      it under the terms of the gnu general public license version 2 as
      published by the free software foundation
    
      this program is free software you can redistribute it and or modify
      it under the terms of the gnu general public license version 2 as
      published by the free software foundation #
    
    extracted by the scancode license scanner the SPDX license identifier
    
      GPL-2.0-only
    
    has been chosen to replace the boilerplate/reference in 4122 file(s).
    
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Reviewed-by: Enrico Weigelt <info@metux.net>
    Reviewed-by: Kate Stewart <kstewart@linuxfoundation.org>
    Reviewed-by: Allison Randal <allison@lohutok.net>
    Cc: linux-spdx@vger.kernel.org
    Link: https://lkml.kernel.org/r/20190604081206.933168790@linutronix.de
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/arch/arm/include/asm/perf_event.h b/arch/arm/include/asm/perf_event.h
index 4f9dec489931..fe87397c3d8c 100644
--- a/arch/arm/include/asm/perf_event.h
+++ b/arch/arm/include/asm/perf_event.h
@@ -1,12 +1,8 @@
+/* SPDX-License-Identifier: GPL-2.0-only */
 /*
  *  linux/arch/arm/include/asm/perf_event.h
  *
  *  Copyright (C) 2009 picoChip Designs Ltd, Jamie Iles
- *
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License version 2 as
- * published by the Free Software Foundation.
- *
  */
 
 #ifndef __ARM_PERF_EVENT_H__

commit b3eac0265bf6258f08dcd4ac7fa7f87cc050defc
Author: Hou Pengyang <houpengyang@huawei.com>
Date:   Fri May 8 06:43:03 2015 +0100

    arm: perf: Fix callchain parse error with kernel tracepoint events
    
    For ARM, when tracing with tracepoint events, the IP and cpsr are set
    to 0, preventing the perf code parsing the callchain and resolving the
    symbols correctly.
    
     ./perf record -e sched:sched_switch -g --call-graph dwarf ls
        [ perf record: Captured and wrote 0.006 MB perf.data ]
     ./perf report -f
        Samples: 5  of event 'sched:sched_switch', Event count (approx.): 5
        Children      Self    Command  Shared Object     Symbol
        100.00%       100.00%  ls       [unknown]         [.] 00000000
    
    The fix is to implement perf_arch_fetch_caller_regs for ARM, which fills
    several necessary registers used for callchain unwinding, including pc,sp,
    fp and cpsr.
    
    With this patch, callchain can be parsed correctly as :
    
       .....
    -  100.00%   100.00%  ls       [kernel.kallsyms]  [k] __sched_text_start
       + __sched_text_start
    +   20.00%     0.00%  ls       libc-2.18.so       [.] _dl_addr
    +   20.00%     0.00%  ls       libc-2.18.so       [.] write
       .....
    
    Jean Pihet found this in ARM and come up with a patch:
    http://thread.gmane.org/gmane.linux.kernel/1734283/focus=1734280
    
    This patch rewrite Jean's patch in C.
    
    Signed-off-by: Hou Pengyang <houpengyang@huawei.com>
    Signed-off-by: Will Deacon <will.deacon@arm.com>

diff --git a/arch/arm/include/asm/perf_event.h b/arch/arm/include/asm/perf_event.h
index d9cf138fd7d4..4f9dec489931 100644
--- a/arch/arm/include/asm/perf_event.h
+++ b/arch/arm/include/asm/perf_event.h
@@ -19,4 +19,11 @@ extern unsigned long perf_misc_flags(struct pt_regs *regs);
 #define perf_misc_flags(regs)	perf_misc_flags(regs)
 #endif
 
+#define perf_arch_fetch_caller_regs(regs, __ip) { \
+	(regs)->ARM_pc = (__ip); \
+	(regs)->ARM_fp = (unsigned long) __builtin_frame_address(0); \
+	(regs)->ARM_sp = current_stack_pointer; \
+	(regs)->ARM_cpsr = SVC_MODE; \
+}
+
 #endif /* __ARM_PERF_EVENT_H__ */

commit d39976f0fd144d1cef4830d696e2a1e6d8058dc6
Author: Mark Rutland <mark.rutland@arm.com>
Date:   Mon Sep 29 17:15:32 2014 +0100

    arm: perf: factor out callchain code
    
    The ARM callchain handling code is currently bundled with the ARM PMU
    management code, despite the two having no dependency on each other.
    This bundling has the unfortunate property of making callchain handling
    depend on CONFIG_HW_PERF_EVENTS, even though the callchain handling
    could be applied to software events in the absence of PMU hardware
    support.
    
    This patch separates the two, placing the callchain handling in
    perf_callchain.c and making it depend on CONFIG_PERF_EVENTS rather than
    CONFIG_HW_PERF_EVENTS, enabling callchain recording on kernels built
    without hardware perf event support.
    
    Signed-off-by: Mark Rutland <mark.rutland@arm.com>
    Reviewed-by: Will Deacon <will.deacon@arm.com>
    Signed-off-by: Will Deacon <will.deacon@arm.com>

diff --git a/arch/arm/include/asm/perf_event.h b/arch/arm/include/asm/perf_event.h
index c3a83691af8e..d9cf138fd7d4 100644
--- a/arch/arm/include/asm/perf_event.h
+++ b/arch/arm/include/asm/perf_event.h
@@ -12,7 +12,7 @@
 #ifndef __ARM_PERF_EVENT_H__
 #define __ARM_PERF_EVENT_H__
 
-#ifdef CONFIG_HW_PERF_EVENTS
+#ifdef CONFIG_PERF_EVENTS
 struct pt_regs;
 extern unsigned long perf_instruction_pointer(struct pt_regs *regs);
 extern unsigned long perf_misc_flags(struct pt_regs *regs);

commit ac8674dc0a8b97d564f293ae57cdf2d1e416b698
Author: Mark Rutland <mark.rutland@arm.com>
Date:   Wed May 28 18:08:40 2014 +0100

    arm: perf: move event map macros to pmu.h
    
    A few PMU-related macros are now looking a little lonely in
    asm/perf_event.h now that all other PMU-specific structs, function
    prototypes and macros live in pmu.h.
    
    So as to make their placement consistent and to make it easier to build
    atop of the current PMU functionality, let's reunite the entire family in
    pmu.h
    
    Acked-by: Will Deacon <will.deacon@arm.com>
    Tested-by: Christopher Covington <cov@codeaurora.org>
    Signed-off-by: Mark Rutland <mark.rutland@arm.com>
    Signed-off-by: Will Deacon <will.deacon@arm.com>

diff --git a/arch/arm/include/asm/perf_event.h b/arch/arm/include/asm/perf_event.h
index 755877527cf9..c3a83691af8e 100644
--- a/arch/arm/include/asm/perf_event.h
+++ b/arch/arm/include/asm/perf_event.h
@@ -12,15 +12,6 @@
 #ifndef __ARM_PERF_EVENT_H__
 #define __ARM_PERF_EVENT_H__
 
-/*
- * The ARMv7 CPU PMU supports up to 32 event counters.
- */
-#define ARMPMU_MAX_HWEVENTS		32
-
-#define HW_OP_UNSUPPORTED		0xFFFF
-#define C(_x)				PERF_COUNT_HW_CACHE_##_x
-#define CACHE_OP_UNSUPPORTED		0xFFFF
-
 #ifdef CONFIG_HW_PERF_EVENTS
 struct pt_regs;
 extern unsigned long perf_instruction_pointer(struct pt_regs *regs);

commit c7cc504bc351e41e871e317ca7f032f4562f34ad
Author: Marc Zyngier <Marc.Zyngier@arm.com>
Date:   Thu Nov 22 13:05:55 2012 +0100

    ARM: 7584/1: perf: fix link error when CONFIG_HW_PERF_EVENTS is not selected
    
    Commit e50c541 (ARM: perf: add guest vs host discrimination) broken the
    link as perf_instruction_pointer and perf_misc_flags are not defined
    when CONFIG_HW_PERF_EVENTS is not selected.
    
    As it make little sense to try and profile a guest without any HW event,
    just fallback to the original code when this config option is not selected.
    
    Reported-by: Russell King <linux@arm.linux.org.uk>
    Acked-by: Will Deacon <will.deacon@arm.com>
    Signed-off-by: Marc Zyngier <marc.zyngier@arm.com>
    Signed-off-by: Russell King <rmk+kernel@arm.linux.org.uk>

diff --git a/arch/arm/include/asm/perf_event.h b/arch/arm/include/asm/perf_event.h
index 00416edecead..755877527cf9 100644
--- a/arch/arm/include/asm/perf_event.h
+++ b/arch/arm/include/asm/perf_event.h
@@ -21,9 +21,11 @@
 #define C(_x)				PERF_COUNT_HW_CACHE_##_x
 #define CACHE_OP_UNSUPPORTED		0xFFFF
 
+#ifdef CONFIG_HW_PERF_EVENTS
 struct pt_regs;
 extern unsigned long perf_instruction_pointer(struct pt_regs *regs);
 extern unsigned long perf_misc_flags(struct pt_regs *regs);
 #define perf_misc_flags(regs)	perf_misc_flags(regs)
+#endif
 
 #endif /* __ARM_PERF_EVENT_H__ */

commit e50c54189f7c6211a99539156e3978474f0b1a0b
Author: Marc Zyngier <Marc.Zyngier@arm.com>
Date:   Thu Sep 13 16:40:46 2012 +0100

    ARM: perf: add guest vs host discrimination
    
    Add minimal guest support to perf, so it can distinguish whether
    the PMU interrupt was in the host or the guest, as well as collecting
    some very basic information (guest PC, user vs kernel mode).
    
    This is not feature complete though, as it doesn't support backtracing
    in the guest.
    
    Based on the x86 implementation, tested with KVM/ARM.
    
    Signed-off-by: Marc Zyngier <marc.zyngier@arm.com>
    Signed-off-by: Will Deacon <will.deacon@arm.com>

diff --git a/arch/arm/include/asm/perf_event.h b/arch/arm/include/asm/perf_event.h
index 625cd621a436..00416edecead 100644
--- a/arch/arm/include/asm/perf_event.h
+++ b/arch/arm/include/asm/perf_event.h
@@ -21,4 +21,9 @@
 #define C(_x)				PERF_COUNT_HW_CACHE_##_x
 #define CACHE_OP_UNSUPPORTED		0xFFFF
 
+struct pt_regs;
+extern unsigned long perf_instruction_pointer(struct pt_regs *regs);
+extern unsigned long perf_misc_flags(struct pt_regs *regs);
+#define perf_misc_flags(regs)	perf_misc_flags(regs)
+
 #endif /* __ARM_PERF_EVENT_H__ */

commit 6dbc00297095122ea89e016ce6affad0b7c0ddac
Author: Will Deacon <will.deacon@arm.com>
Date:   Sun Jul 29 12:36:28 2012 +0100

    ARM: perf: prepare for moving CPU PMU code into separate file
    
    The CPU PMU code is tightly coupled with generic ARM PMU handling code.
    This makes it cumbersome when trying to add support for other ARM PMUs
    (e.g. interconnect, L2 cache controller, bus) as the generic parts of
    the code are not readily reusable.
    
    This patch cleans up perf_event.c so that reusable code is exposed via
    header files to other potential PMU drivers. The CPU code is
    consistently named to identify it as such and also to prepare for moving
    it into a separate file.
    
    Signed-off-by: Will Deacon <will.deacon@arm.com>

diff --git a/arch/arm/include/asm/perf_event.h b/arch/arm/include/asm/perf_event.h
index e074948d8143..625cd621a436 100644
--- a/arch/arm/include/asm/perf_event.h
+++ b/arch/arm/include/asm/perf_event.h
@@ -12,6 +12,13 @@
 #ifndef __ARM_PERF_EVENT_H__
 #define __ARM_PERF_EVENT_H__
 
-/* Nothing to see here... */
+/*
+ * The ARMv7 CPU PMU supports up to 32 event counters.
+ */
+#define ARMPMU_MAX_HWEVENTS		32
+
+#define HW_OP_UNSUPPORTED		0xFFFF
+#define C(_x)				PERF_COUNT_HW_CACHE_##_x
+#define CACHE_OP_UNSUPPORTED		0xFFFF
 
 #endif /* __ARM_PERF_EVENT_H__ */

commit 4295b898f5a5c7e62ae68e7a4ecc4b414622ffe6
Author: Will Deacon <will.deacon@arm.com>
Date:   Fri Jul 6 15:45:00 2012 +0100

    ARM: 7448/1: perf: remove arm_perf_pmu_ids global enumeration
    
    In order to provide PMU name strings compatible with the OProfile
    user ABI, an enumeration of all PMUs is currently used by perf to
    identify each PMU uniquely. Unfortunately, this does not scale well
    in the presence of multiple PMUs and creates a single, global namespace
    across all PMUs in the system.
    
    This patch removes the enumeration and instead uses the name string
    for the PMU to map onto the OProfile variant. perf_pmu_name is
    implemented for CPU PMUs, which is all that OProfile cares about anyway.
    
    Signed-off-by: Will Deacon <will.deacon@arm.com>
    Signed-off-by: Russell King <rmk+kernel@arm.linux.org.uk>

diff --git a/arch/arm/include/asm/perf_event.h b/arch/arm/include/asm/perf_event.h
index 00cbe10a50e3..e074948d8143 100644
--- a/arch/arm/include/asm/perf_event.h
+++ b/arch/arm/include/asm/perf_event.h
@@ -12,21 +12,6 @@
 #ifndef __ARM_PERF_EVENT_H__
 #define __ARM_PERF_EVENT_H__
 
-/* ARM perf PMU IDs for use by internal perf clients. */
-enum arm_perf_pmu_ids {
-	ARM_PERF_PMU_ID_XSCALE1	= 0,
-	ARM_PERF_PMU_ID_XSCALE2,
-	ARM_PERF_PMU_ID_V6,
-	ARM_PERF_PMU_ID_V6MP,
-	ARM_PERF_PMU_ID_CA8,
-	ARM_PERF_PMU_ID_CA9,
-	ARM_PERF_PMU_ID_CA5,
-	ARM_PERF_PMU_ID_CA15,
-	ARM_PERF_PMU_ID_CA7,
-	ARM_NUM_PMU_IDS,
-};
-
-extern enum arm_perf_pmu_ids
-armpmu_get_pmu_id(void);
+/* Nothing to see here... */
 
 #endif /* __ARM_PERF_EVENT_H__ */

commit 12679a2d7e3bfbdc7586e3e86d1ca90c46659363
Merge: 1c036588772d b0df89868006
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Thu Mar 29 16:53:48 2012 -0700

    Merge branch 'for-linus' of git://git.linaro.org/people/rmk/linux-arm
    
    Pull more ARM updates from Russell King.
    
    This got a fair number of conflicts with the <asm/system.h> split, but
    also with some other sparse-irq and header file include cleanups.  They
    all looked pretty trivial, though.
    
    * 'for-linus' of git://git.linaro.org/people/rmk/linux-arm: (59 commits)
      ARM: fix Kconfig warning for HAVE_BPF_JIT
      ARM: 7361/1: provide XIP_VIRT_ADDR for no-MMU builds
      ARM: 7349/1: integrator: convert to sparse irqs
      ARM: 7259/3: net: JIT compiler for packet filters
      ARM: 7334/1: add jump label support
      ARM: 7333/2: jump label: detect %c support for ARM
      ARM: 7338/1: add support for early console output via semihosting
      ARM: use set_current_blocked() and block_sigmask()
      ARM: exec: remove redundant set_fs(USER_DS)
      ARM: 7332/1: extract out code patch function from kprobes
      ARM: 7331/1: extract out insn generation code from ftrace
      ARM: 7330/1: ftrace: use canonical Thumb-2 wide instruction format
      ARM: 7351/1: ftrace: remove useless memory checks
      ARM: 7316/1: kexec: EOI active and mask all interrupts in kexec crash path
      ARM: Versatile Express: add NO_IOPORT
      ARM: get rid of asm/irq.h in asm/prom.h
      ARM: 7319/1: Print debug info for SIGBUS in user faults
      ARM: 7318/1: gic: refactor irq_start assignment
      ARM: 7317/1: irq: avoid NULL check in for_each_irq_desc loop
      ARM: 7315/1: perf: add support for the Cortex-A7 PMU
      ...

commit d33c88c659d708e7c5d518a05ef9349a36217bb2
Author: Will Deacon <will.deacon@arm.com>
Date:   Fri Feb 3 14:46:01 2012 +0100

    ARM: 7315/1: perf: add support for the Cortex-A7 PMU
    
    Cortex-A7 implements an ARMv7-compatible PMU compliant with the PMUv2
    architecture specification.
    
    This patch adds support for the PMU to the ARM perf backend.
    
    Signed-off-by: Will Deacon <will.deacon@arm.com>
    Signed-off-by: Russell King <rmk+kernel@arm.linux.org.uk>

diff --git a/arch/arm/include/asm/perf_event.h b/arch/arm/include/asm/perf_event.h
index 99cfe3607989..ee7c056be3f4 100644
--- a/arch/arm/include/asm/perf_event.h
+++ b/arch/arm/include/asm/perf_event.h
@@ -26,6 +26,7 @@ enum arm_perf_pmu_ids {
 	ARM_PERF_PMU_ID_CA9,
 	ARM_PERF_PMU_ID_CA5,
 	ARM_PERF_PMU_ID_CA15,
+	ARM_PERF_PMU_ID_CA7,
 	ARM_NUM_PMU_IDS,
 };
 

commit 44a683971119bafb5bc30778f92ee773680ebb6f
Merge: 801493c2e249 08aa0d1f376e
Author: Ingo Molnar <mingo@elte.hu>
Date:   Fri Jan 27 12:07:57 2012 +0100

    Merge branch 'perf/fast' into perf/core
    
    Merge reason: Lets ready it for v3.4
    
    Signed-off-by: Ingo Molnar <mingo@elte.hu>

commit 35edc2a5095efb189e60dc32bbb9d2663aec6d24
Author: Peter Zijlstra <a.p.zijlstra@chello.nl>
Date:   Sun Nov 20 20:36:02 2011 +0100

    perf, arch: Rework perf_event_index()
    
    Put the logic to compute the event index into a per pmu method. This
    is required because the x86 rules are weird and wonderful and don't
    match the capabilities of the current scheme.
    
    AFAIK only powerpc actually has a usable userspace read of the PMCs
    but I'm not at all sure anybody actually used that.
    
    ARM is restored to the default since it currently does not support
    userspace access at all. And all software events are provided with a
    method that reports their index as 0 (disabled).
    
    Signed-off-by: Peter Zijlstra <a.p.zijlstra@chello.nl>
    Cc: Michael Cree <mcree@orcon.net.nz>
    Cc: Will Deacon <will.deacon@arm.com>
    Cc: Deng-Cheng Zhu <dengcheng.zhu@gmail.com>
    Cc: Anton Blanchard <anton@samba.org>
    Cc: Eric B Munson <emunson@mgebm.net>
    Cc: Heiko Carstens <heiko.carstens@de.ibm.com>
    Cc: Paul Mundt <lethal@linux-sh.org>
    Cc: David S. Miller <davem@davemloft.net>
    Cc: Richard Kuo <rkuo@codeaurora.org>
    Cc: Stephane Eranian <eranian@google.com>
    Cc: Arun Sharma <asharma@fb.com>
    Link: http://lkml.kernel.org/n/tip-dfydxodki16lylkt3gl2j7cw@git.kernel.org
    Signed-off-by: Ingo Molnar <mingo@elte.hu>

diff --git a/arch/arm/include/asm/perf_event.h b/arch/arm/include/asm/perf_event.h
index 0f8e3827a89b..08f94d8fc04c 100644
--- a/arch/arm/include/asm/perf_event.h
+++ b/arch/arm/include/asm/perf_event.h
@@ -12,10 +12,6 @@
 #ifndef __ARM_PERF_EVENT_H__
 #define __ARM_PERF_EVENT_H__
 
-/* ARM performance counters start from 1 (in the cp15 accesses) so use the
- * same indexes here for consistency. */
-#define PERF_EVENT_INDEX_OFFSET 1
-
 /* ARM perf PMU IDs for use by internal perf clients. */
 enum arm_perf_pmu_ids {
 	ARM_PERF_PMU_ID_XSCALE1	= 0,

commit feb45d06ffd7b59f43f1ed8edf53a0cfe3e7ad2a
Author: Will Deacon <will.deacon@arm.com>
Date:   Mon Nov 14 10:33:05 2011 +0000

    ARM: perf: remove unused armpmu_get_max_events
    
    armpmu_get_max_events is only called from perf_num_counters, so we can
    inline it there. It existed as a separate entity as a hangover from
    the original perf-based oprofile implementation.
    
    Signed-off-by: Will Deacon <will.deacon@arm.com>

diff --git a/arch/arm/include/asm/perf_event.h b/arch/arm/include/asm/perf_event.h
index 0f8e3827a89b..99cfe3607989 100644
--- a/arch/arm/include/asm/perf_event.h
+++ b/arch/arm/include/asm/perf_event.h
@@ -32,7 +32,4 @@ enum arm_perf_pmu_ids {
 extern enum arm_perf_pmu_ids
 armpmu_get_pmu_id(void);
 
-extern int
-armpmu_get_max_events(void);
-
 #endif /* __ARM_PERF_EVENT_H__ */

commit 14abd038a7a209193c58ee7dde01ef4bf1523a91
Author: Will Deacon <will.deacon@arm.com>
Date:   Wed Jan 19 14:24:38 2011 +0000

    ARM: perf: add support for the Cortex-A15 PMU
    
    This patch adds support for the Cortex-A15 PMU to the ARMv7
    perf-event backend.
    
    Signed-off-by: Will Deacon <will.deacon@arm.com>

diff --git a/arch/arm/include/asm/perf_event.h b/arch/arm/include/asm/perf_event.h
index 207bd3c79ab6..0f8e3827a89b 100644
--- a/arch/arm/include/asm/perf_event.h
+++ b/arch/arm/include/asm/perf_event.h
@@ -25,6 +25,7 @@ enum arm_perf_pmu_ids {
 	ARM_PERF_PMU_ID_CA8,
 	ARM_PERF_PMU_ID_CA9,
 	ARM_PERF_PMU_ID_CA5,
+	ARM_PERF_PMU_ID_CA15,
 	ARM_NUM_PMU_IDS,
 };
 

commit 0c205cbe20654616e2f8389c0c1ff707d9dccb63
Author: Will Deacon <will.deacon@arm.com>
Date:   Fri Jun 3 17:40:15 2011 +0100

    ARM: perf: add support for the Cortex-A5 PMU
    
    This patch adds support for the Cortex-A5 PMU to the ARMv7 perf-event
    backend.
    
    Signed-off-by: Will Deacon <will.deacon@arm.com>

diff --git a/arch/arm/include/asm/perf_event.h b/arch/arm/include/asm/perf_event.h
index c4aa4e8c6af9..207bd3c79ab6 100644
--- a/arch/arm/include/asm/perf_event.h
+++ b/arch/arm/include/asm/perf_event.h
@@ -24,6 +24,7 @@ enum arm_perf_pmu_ids {
 	ARM_PERF_PMU_ID_V6MP,
 	ARM_PERF_PMU_ID_CA8,
 	ARM_PERF_PMU_ID_CA9,
+	ARM_PERF_PMU_ID_CA5,
 	ARM_NUM_PMU_IDS,
 };
 

commit e360adbe29241a0194e10e20595360dd7b98a2b3
Author: Peter Zijlstra <a.p.zijlstra@chello.nl>
Date:   Thu Oct 14 14:01:34 2010 +0800

    irq_work: Add generic hardirq context callbacks
    
    Provide a mechanism that allows running code in IRQ context. It is
    most useful for NMI code that needs to interact with the rest of the
    system -- like wakeup a task to drain buffers.
    
    Perf currently has such a mechanism, so extract that and provide it as
    a generic feature, independent of perf so that others may also
    benefit.
    
    The IRQ context callback is generated through self-IPIs where
    possible, or on architectures like powerpc the decrementer (the
    built-in timer facility) is set to generate an interrupt immediately.
    
    Architectures that don't have anything like this get to do with a
    callback from the timer tick. These architectures can call
    irq_work_run() at the tail of any IRQ handlers that might enqueue such
    work (like the perf IRQ handler) to avoid undue latencies in
    processing the work.
    
    Signed-off-by: Peter Zijlstra <a.p.zijlstra@chello.nl>
    Acked-by: Kyle McMartin <kyle@mcmartin.ca>
    Acked-by: Martin Schwidefsky <schwidefsky@de.ibm.com>
    [ various fixes ]
    Signed-off-by: Huang Ying <ying.huang@intel.com>
    LKML-Reference: <1287036094.7768.291.camel@yhuang-dev>
    Signed-off-by: Ingo Molnar <mingo@elte.hu>

diff --git a/arch/arm/include/asm/perf_event.h b/arch/arm/include/asm/perf_event.h
index b5799a3b7117..c4aa4e8c6af9 100644
--- a/arch/arm/include/asm/perf_event.h
+++ b/arch/arm/include/asm/perf_event.h
@@ -12,18 +12,6 @@
 #ifndef __ARM_PERF_EVENT_H__
 #define __ARM_PERF_EVENT_H__
 
-/*
- * NOP: on *most* (read: all supported) ARM platforms, the performance
- * counter interrupts are regular interrupts and not an NMI. This
- * means that when we receive the interrupt we can call
- * perf_event_do_pending() that handles all of the work with
- * interrupts disabled.
- */
-static inline void
-set_perf_event_pending(void)
-{
-}
-
 /* ARM performance counters start from 1 (in the cp15 accesses) so use the
  * same indexes here for consistency. */
 #define PERF_EVENT_INDEX_OFFSET 1

commit 25d3584797a39f57b69cd835722ac7c41113fb9a
Author: Will Deacon <will.deacon@arm.com>
Date:   Mon Aug 16 15:15:14 2010 +0100

    ARM: 6330/1: perf: reword comments relating to perf_event_do_pending
    
    This is purely a cosmetic change to the ARM perf backend because the current
    comments about the relationship between NMIs, interrupt context and
    perf_event_do_pending are misleading.
    
    This patch updates the comments so that they reflect what the code
    actually does (which is in line with other architectures).
    
    Acked-by: Jamie Iles <jamie.iles@picochip.com>
    Signed-off-by: Will Deacon <will.deacon@arm.com>
    Signed-off-by: Russell King <rmk+kernel@arm.linux.org.uk>

diff --git a/arch/arm/include/asm/perf_event.h b/arch/arm/include/asm/perf_event.h
index 48837e6d8887..b5799a3b7117 100644
--- a/arch/arm/include/asm/perf_event.h
+++ b/arch/arm/include/asm/perf_event.h
@@ -17,7 +17,7 @@
  * counter interrupts are regular interrupts and not an NMI. This
  * means that when we receive the interrupt we can call
  * perf_event_do_pending() that handles all of the work with
- * interrupts enabled.
+ * interrupts disabled.
  */
 static inline void
 set_perf_event_pending(void)

commit 929f5199448a67d41bb249d58815ef77bcd53622
Author: Will Deacon <will.deacon@arm.com>
Date:   Fri Apr 30 11:34:26 2010 +0100

    ARM: 6071/1: perf-events: allow modules to query the number of hardware counters
    
    For OProfile to initialise oprofilefs correctly, it needs to know
    the number of counters it can represent.
    
    This patch adds a function to the ARM perf-events backend to return
    the number of hardware counters available for the current PMU.
    
    Cc: Jamie Iles <jamie.iles@picochip.com>
    Signed-off-by: Will Deacon <will.deacon@arm.com>
    Signed-off-by: Russell King <rmk+kernel@arm.linux.org.uk>

diff --git a/arch/arm/include/asm/perf_event.h b/arch/arm/include/asm/perf_event.h
index fa4b32625d37..48837e6d8887 100644
--- a/arch/arm/include/asm/perf_event.h
+++ b/arch/arm/include/asm/perf_event.h
@@ -42,4 +42,7 @@ enum arm_perf_pmu_ids {
 extern enum arm_perf_pmu_ids
 armpmu_get_pmu_id(void);
 
+extern int
+armpmu_get_max_events(void);
+
 #endif /* __ARM_PERF_EVENT_H__ */

commit 181193f398e7d8da6b1196138f0e219709621743
Author: Will Deacon <will.deacon@arm.com>
Date:   Fri Apr 30 11:32:44 2010 +0100

    ARM: 6069/1: perf-events: use numeric ID to identify PMU
    
    The ARM perf-events framework provides support for a number of different
    PMUs using struct arm_pmu. The char *name field of this struct can be
    used to identify the PMU, but this is cumbersome if used outside of perf.
    
    This patch replaces the name string for a PMU with an enum, which holds
    a unique ID for the PMU being represented. This ID can be used to index
    an array of names within perf, so no functionality is lost. The presence
    of the ID field, allows other kernel subsystems [currently oprofile] to
    use their own mappings for the PMU name.
    
    Cc: Jean Pihet <jpihet@mvista.com>
    Acked-by: Jamie Iles <jamie.iles@picochip.com>
    Signed-off-by: Will Deacon <will.deacon@arm.com>
    Signed-off-by: Russell King <rmk+kernel@arm.linux.org.uk>

diff --git a/arch/arm/include/asm/perf_event.h b/arch/arm/include/asm/perf_event.h
index 49e3049aba32..fa4b32625d37 100644
--- a/arch/arm/include/asm/perf_event.h
+++ b/arch/arm/include/asm/perf_event.h
@@ -28,4 +28,18 @@ set_perf_event_pending(void)
  * same indexes here for consistency. */
 #define PERF_EVENT_INDEX_OFFSET 1
 
+/* ARM perf PMU IDs for use by internal perf clients. */
+enum arm_perf_pmu_ids {
+	ARM_PERF_PMU_ID_XSCALE1	= 0,
+	ARM_PERF_PMU_ID_XSCALE2,
+	ARM_PERF_PMU_ID_V6,
+	ARM_PERF_PMU_ID_V6MP,
+	ARM_PERF_PMU_ID_CA8,
+	ARM_PERF_PMU_ID_CA9,
+	ARM_NUM_PMU_IDS,
+};
+
+extern enum arm_perf_pmu_ids
+armpmu_get_pmu_id(void);
+
 #endif /* __ARM_PERF_EVENT_H__ */

commit 7ada189f5c8627662c23f49b3e68463f86fc511e
Author: Jamie Iles <jamie.iles@picochip.com>
Date:   Tue Feb 2 20:24:58 2010 +0100

    ARM: 5900/2: arm: enable support for software perf events
    
    The perf events subsystem allows counting of both hardware and
    software events. This patch implements the bare minimum for software
    performance events.
    
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Ingo Molnar <mingo@elte.hu>
    Signed-off-by: Jamie Iles <jamie.iles@picochip.com>
    Signed-off-by: Russell King <rmk+kernel@arm.linux.org.uk>

diff --git a/arch/arm/include/asm/perf_event.h b/arch/arm/include/asm/perf_event.h
new file mode 100644
index 000000000000..49e3049aba32
--- /dev/null
+++ b/arch/arm/include/asm/perf_event.h
@@ -0,0 +1,31 @@
+/*
+ *  linux/arch/arm/include/asm/perf_event.h
+ *
+ *  Copyright (C) 2009 picoChip Designs Ltd, Jamie Iles
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation.
+ *
+ */
+
+#ifndef __ARM_PERF_EVENT_H__
+#define __ARM_PERF_EVENT_H__
+
+/*
+ * NOP: on *most* (read: all supported) ARM platforms, the performance
+ * counter interrupts are regular interrupts and not an NMI. This
+ * means that when we receive the interrupt we can call
+ * perf_event_do_pending() that handles all of the work with
+ * interrupts enabled.
+ */
+static inline void
+set_perf_event_pending(void)
+{
+}
+
+/* ARM performance counters start from 1 (in the cp15 accesses) so use the
+ * same indexes here for consistency. */
+#define PERF_EVENT_INDEX_OFFSET 1
+
+#endif /* __ARM_PERF_EVENT_H__ */
