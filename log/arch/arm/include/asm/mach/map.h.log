commit d2912cb15bdda8ba4a5dd73396ad62641af2f520
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Tue Jun 4 10:11:33 2019 +0200

    treewide: Replace GPLv2 boilerplate/reference with SPDX - rule 500
    
    Based on 2 normalized pattern(s):
    
      this program is free software you can redistribute it and or modify
      it under the terms of the gnu general public license version 2 as
      published by the free software foundation
    
      this program is free software you can redistribute it and or modify
      it under the terms of the gnu general public license version 2 as
      published by the free software foundation #
    
    extracted by the scancode license scanner the SPDX license identifier
    
      GPL-2.0-only
    
    has been chosen to replace the boilerplate/reference in 4122 file(s).
    
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Reviewed-by: Enrico Weigelt <info@metux.net>
    Reviewed-by: Kate Stewart <kstewart@linuxfoundation.org>
    Reviewed-by: Allison Randal <allison@lohutok.net>
    Cc: linux-spdx@vger.kernel.org
    Link: https://lkml.kernel.org/r/20190604081206.933168790@linutronix.de
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/arch/arm/include/asm/mach/map.h b/arch/arm/include/asm/mach/map.h
index 9b7c328fb207..92282558caf7 100644
--- a/arch/arm/include/asm/mach/map.h
+++ b/arch/arm/include/asm/mach/map.h
@@ -1,12 +1,9 @@
+/* SPDX-License-Identifier: GPL-2.0-only */
 /*
  *  arch/arm/include/asm/map.h
  *
  *  Copyright (C) 1999-2000 Russell King
  *
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License version 2 as
- * published by the Free Software Foundation.
- *
  *  Page table mapping constructs and function prototypes
  */
 #ifndef __ASM_MACH_MAP_H

commit c7936206b9715d7a3075b53789c1fed0cab9147f
Author: Ard Biesheuvel <ard.biesheuvel@linaro.org>
Date:   Wed Apr 29 10:04:17 2015 +0200

    ARM: implement create_mapping_late() for EFI use
    
    This implements create_mapping_late(), which we will use to populate
    the UEFI Runtime Services page tables.
    
    Tested-by: Ryan Harkin <ryan.harkin@linaro.org>
    Reviewed-by: Matt Fleming <matt@codeblueprint.co.uk>
    Signed-off-by: Ard Biesheuvel <ard.biesheuvel@linaro.org>

diff --git a/arch/arm/include/asm/mach/map.h b/arch/arm/include/asm/mach/map.h
index f98c7f32c9c8..9b7c328fb207 100644
--- a/arch/arm/include/asm/mach/map.h
+++ b/arch/arm/include/asm/mach/map.h
@@ -42,6 +42,8 @@ enum {
 extern void iotable_init(struct map_desc *, int);
 extern void vm_reserve_area_early(unsigned long addr, unsigned long size,
 				  void *caller);
+extern void create_mapping_late(struct mm_struct *mm, struct map_desc *md,
+				bool ng);
 
 #ifdef CONFIG_DEBUG_LL
 extern void debug_ll_addr(unsigned long *paddr, unsigned long *vaddr);

commit ebd4922ecc38e31e662cd641dd04099a9652c9b3
Author: Russell King <rmk+kernel@arm.linux.org.uk>
Date:   Thu Oct 24 08:12:39 2013 +0100

    ARM: implement basic NX support for kernel lowmem mappings
    
    Add basic NX support for kernel lowmem mappings.  We mark any section
    which does not overlap kernel text as non-executable, preventing it
    from being used to write code and then execute directly from there.
    
    This does not change the alignment of the sections, so the kernel
    image doesn't grow significantly via this change, so we can do this
    without needing a config option.
    
    Signed-off-by: Russell King <rmk+kernel@arm.linux.org.uk>

diff --git a/arch/arm/include/asm/mach/map.h b/arch/arm/include/asm/mach/map.h
index 447be0744a85..f98c7f32c9c8 100644
--- a/arch/arm/include/asm/mach/map.h
+++ b/arch/arm/include/asm/mach/map.h
@@ -29,6 +29,7 @@ enum {
 	MT_LOW_VECTORS,
 	MT_HIGH_VECTORS,
 	MT_MEMORY_RWX,
+	MT_MEMORY_RW,
 	MT_ROM,
 	MT_MEMORY_RWX_NONCACHED,
 	MT_MEMORY_RW_DTCM,

commit 2e2c9de207be043ee80161971c814d740759d3bc
Author: Russell King <rmk+kernel@arm.linux.org.uk>
Date:   Thu Oct 24 10:26:40 2013 +0100

    ARM: add permission annotations to MT_MEMORY* mapping types
    
    Document the permissions which the various MT_MEMORY* mapping types
    will provide.
    
    Signed-off-by: Russell King <rmk+kernel@arm.linux.org.uk>

diff --git a/arch/arm/include/asm/mach/map.h b/arch/arm/include/asm/mach/map.h
index 2fe141fcc8d6..447be0744a85 100644
--- a/arch/arm/include/asm/mach/map.h
+++ b/arch/arm/include/asm/mach/map.h
@@ -22,18 +22,20 @@ struct map_desc {
 };
 
 /* types 0-3 are defined in asm/io.h */
-#define MT_UNCACHED		4
-#define MT_CACHECLEAN		5
-#define MT_MINICLEAN		6
-#define MT_LOW_VECTORS		7
-#define MT_HIGH_VECTORS		8
-#define MT_MEMORY		9
-#define MT_ROM			10
-#define MT_MEMORY_NONCACHED	11
-#define MT_MEMORY_DTCM		12
-#define MT_MEMORY_ITCM		13
-#define MT_MEMORY_SO		14
-#define MT_MEMORY_DMA_READY	15
+enum {
+	MT_UNCACHED = 4,
+	MT_CACHECLEAN,
+	MT_MINICLEAN,
+	MT_LOW_VECTORS,
+	MT_HIGH_VECTORS,
+	MT_MEMORY_RWX,
+	MT_ROM,
+	MT_MEMORY_RWX_NONCACHED,
+	MT_MEMORY_RW_DTCM,
+	MT_MEMORY_RWX_ITCM,
+	MT_MEMORY_RW_SO,
+	MT_MEMORY_DMA_READY,
+};
 
 #ifdef CONFIG_MMU
 extern void iotable_init(struct map_desc *, int);

commit e5c5f2adeb370559f4b221d57214db85858b786a
Author: Rob Herring <robherring2@gmail.com>
Date:   Mon Oct 22 11:42:54 2012 -0600

    ARM: implement debug_ll_io_init()
    
    When using DEBUG_LL, the UART's (or other HW's) registers are mapped
    into early page tables based on the results of assembly macro addruart.
    Later, when the page tables are replaced, the same virtual address must
    remain valid. Historically, this has been ensured by using defines from
    <mach/iomap.h> in both the implementation of addruart, and the machine's
    .map_io() function. However, with the move to single zImage, we wish to
    remove <mach/iomap.h>. To enable this, the macro addruart may be used
    when constructing the late page tables too; addruart is exposed as a
    C function debug_ll_addr(), and used to set up the required mapping in
    debug_ll_io_init(), which may called on an opt-in basis from a machine's
    .map_io() function.
    
    Signed-off-by: Rob Herring <rob.herring@calxeda.com>
    [swarren: Mask map.virtual with PAGE_MASK. Checked for NULL results from
     debug_ll_addr (e.g. when selected UART isn't valid). Fixed compile when
     either !CONFIG_DEBUG_LL or CONFIG_DEBUG_SEMIHOSTING.]
    Signed-off-by: Stephen Warren <swarren@nvidia.com>
    Signed-off-by: Olof Johansson <olof@lixom.net>

diff --git a/arch/arm/include/asm/mach/map.h b/arch/arm/include/asm/mach/map.h
index 195ac2f9d3d3..2fe141fcc8d6 100644
--- a/arch/arm/include/asm/mach/map.h
+++ b/arch/arm/include/asm/mach/map.h
@@ -40,6 +40,13 @@ extern void iotable_init(struct map_desc *, int);
 extern void vm_reserve_area_early(unsigned long addr, unsigned long size,
 				  void *caller);
 
+#ifdef CONFIG_DEBUG_LL
+extern void debug_ll_addr(unsigned long *paddr, unsigned long *vaddr);
+extern void debug_ll_io_init(void);
+#else
+static inline void debug_ll_io_init(void) {}
+#endif
+
 struct mem_type;
 extern const struct mem_type *get_mem_type(unsigned int type);
 /*

commit c2794437091a4fda72c4a4f3567dd728dcc0c3c9
Author: Rob Herring <rob.herring@calxeda.com>
Date:   Wed Feb 29 18:10:58 2012 -0600

    ARM: Add fixed PCI i/o mapping
    
    This adds a fixed virtual mapping for PCI i/o addresses. The mapping is
    located at the last 2MB of vmalloc region (0xfee00000-0xff000000). 2MB
    is used to align with PMD size, but IO_SPACE_LIMIT is 1MB. The space
    is reserved after .map_io and can be mapped at any time later with
    pci_ioremap_io. Platforms which need early i/o mapping (e.g. for vga
    console) can call pci_map_io_early in their .map_io function.
    
    This has changed completely from the 1st implementation which only
    supported creating the static mapping at .map_io.
    
    Signed-off-by: Rob Herring <rob.herring@calxeda.com>
    Cc: Russell King <linux@arm.linux.org.uk>
    Acked-by: Nicolas Pitre <nico@linaro.org>

diff --git a/arch/arm/include/asm/mach/map.h b/arch/arm/include/asm/mach/map.h
index a6efcdd6fd25..195ac2f9d3d3 100644
--- a/arch/arm/include/asm/mach/map.h
+++ b/arch/arm/include/asm/mach/map.h
@@ -9,6 +9,9 @@
  *
  *  Page table mapping constructs and function prototypes
  */
+#ifndef __ASM_MACH_MAP_H
+#define __ASM_MACH_MAP_H
+
 #include <asm/io.h>
 
 struct map_desc {
@@ -34,6 +37,8 @@ struct map_desc {
 
 #ifdef CONFIG_MMU
 extern void iotable_init(struct map_desc *, int);
+extern void vm_reserve_area_early(unsigned long addr, unsigned long size,
+				  void *caller);
 
 struct mem_type;
 extern const struct mem_type *get_mem_type(unsigned int type);
@@ -44,4 +49,7 @@ extern int ioremap_page(unsigned long virt, unsigned long phys,
 			const struct mem_type *mtype);
 #else
 #define iotable_init(map,num)	do { } while (0)
+#define vm_reserve_area_early(a,s,c)	do { } while (0)
+#endif
+
 #endif

commit c79095092834a18ae74cfc08def1a5a101dc106c
Author: Marek Szyprowski <m.szyprowski@samsung.com>
Date:   Thu Dec 29 13:09:51 2011 +0100

    ARM: integrate CMA with DMA-mapping subsystem
    
    This patch adds support for CMA to dma-mapping subsystem for ARM
    architecture. By default a global CMA area is used, but specific devices
    are allowed to have their private memory areas if required (they can be
    created with dma_declare_contiguous() function during board
    initialisation).
    
    Contiguous memory areas reserved for DMA are remapped with 2-level page
    tables on boot. Once a buffer is requested, a low memory kernel mapping
    is updated to to match requested memory access type.
    
    GFP_ATOMIC allocations are performed from special pool which is created
    early during boot. This way remapping page attributes is not needed on
    allocation time.
    
    CMA has been enabled unconditionally for ARMv6+ systems.
    
    Signed-off-by: Marek Szyprowski <m.szyprowski@samsung.com>
    Signed-off-by: Kyungmin Park <kyungmin.park@samsung.com>
    CC: Michal Nazarewicz <mina86@mina86.com>
    Acked-by: Arnd Bergmann <arnd@arndb.de>
    Tested-by: Rob Clark <rob.clark@linaro.org>
    Tested-by: Ohad Ben-Cohen <ohad@wizery.com>
    Tested-by: Benjamin Gaignard <benjamin.gaignard@linaro.org>
    Tested-by: Robert Nelson <robertcnelson@gmail.com>
    Tested-by: Barry Song <Baohua.Song@csr.com>

diff --git a/arch/arm/include/asm/mach/map.h b/arch/arm/include/asm/mach/map.h
index b36f3654bf54..a6efcdd6fd25 100644
--- a/arch/arm/include/asm/mach/map.h
+++ b/arch/arm/include/asm/mach/map.h
@@ -30,6 +30,7 @@ struct map_desc {
 #define MT_MEMORY_DTCM		12
 #define MT_MEMORY_ITCM		13
 #define MT_MEMORY_SO		14
+#define MT_MEMORY_DMA_READY	15
 
 #ifdef CONFIG_MMU
 extern void iotable_init(struct map_desc *, int);

commit 8fb54284ba6aa1f0d832ec015fde64ecf4bb0f4f
Author: Santosh Shilimkar <santosh.shilimkar@ti.com>
Date:   Tue Jun 28 12:42:56 2011 -0700

    ARM: mm: Add strongly ordered descriptor support.
    
    On certain architectures, there might be a need to mark certain
    addresses with strongly ordered memory attributes to avoid ordering
    issues at the interconnect level.
    
    On OMAP4, the asynchronous bridge buffers can only be drained
    with strongly ordered accesses and hence the need to mark the
    memory strongly ordered.
    
    Signed-off-by: Santosh Shilimkar <santosh.shilimkar@ti.com>
    Signed-off-by: Woodruff Richard <r-woodruff2@ti.com>
    Tested-by: Vishwanath BS <vishwanath.bs@ti.com>

diff --git a/arch/arm/include/asm/mach/map.h b/arch/arm/include/asm/mach/map.h
index d2fedb5aeb1f..b36f3654bf54 100644
--- a/arch/arm/include/asm/mach/map.h
+++ b/arch/arm/include/asm/mach/map.h
@@ -29,6 +29,7 @@ struct map_desc {
 #define MT_MEMORY_NONCACHED	11
 #define MT_MEMORY_DTCM		12
 #define MT_MEMORY_ITCM		13
+#define MT_MEMORY_SO		14
 
 #ifdef CONFIG_MMU
 extern void iotable_init(struct map_desc *, int);

commit cb9d7707cd9be57830f31616233f6a872ca8416d
Author: Linus Walleij <linus.walleij@stericsson.com>
Date:   Mon Jul 12 21:50:59 2010 +0100

    ARM: 6222/1: add memory types for the TCMs
    
    The earlier TCM memory regions were mapped as MT_MEMORY_UNCACHED
    which doesn't really work on platforms supporting the new v6
    features like the NX bit. Add unique MT_MEMORY_[I|D]TCM types
    instead.
    
    Cc: Nicolas Pitre <nico@fluxnic.net>
    Signed-off-by: Linus Walleij <linus.walleij@stericsson.com>
    Signed-off-by: Russell King <rmk+kernel@arm.linux.org.uk>

diff --git a/arch/arm/include/asm/mach/map.h b/arch/arm/include/asm/mach/map.h
index 742c2aaeb020..d2fedb5aeb1f 100644
--- a/arch/arm/include/asm/mach/map.h
+++ b/arch/arm/include/asm/mach/map.h
@@ -27,6 +27,8 @@ struct map_desc {
 #define MT_MEMORY		9
 #define MT_ROM			10
 #define MT_MEMORY_NONCACHED	11
+#define MT_MEMORY_DTCM		12
+#define MT_MEMORY_ITCM		13
 
 #ifdef CONFIG_MMU
 extern void iotable_init(struct map_desc *, int);

commit 69d3a84a646d6ad6cd693a7a3d5b9af414113d2c
Author: Hiroshi DOYU <Hiroshi.DOYU@nokia.com>
Date:   Wed Jan 28 21:32:08 2009 +0200

    omap iommu: simple virtual address space management
    
    This patch provides a device drivers, which has a omap iommu, with
    address mapping APIs between device virtual address(iommu), physical
    address and MPU virtual address.
    
    There are 4 possible patterns for iommu virtual address(iova/da) mapping.
    
        |iova/                        mapping               iommu_          page
        | da        pa      va      (d)-(p)-(v)             function        type
      ---------------------------------------------------------------------------
      1 | c         c       c        1 - 1 - 1        _kmap() / _kunmap()   s
      2 | c         c,a     c        1 - 1 - 1      _kmalloc()/ _kfree()    s
      3 | c         d       c        1 - n - 1        _vmap() / _vunmap()   s
      4 | c         d,a     c        1 - n - 1      _vmalloc()/ _vfree()    n*
    
        'iova':     device iommu virtual address
        'da':       alias of 'iova'
        'pa':       physical address
        'va':       mpu virtual address
    
        'c':        contiguous memory area
        'd':        dicontiguous memory area
        'a':        anonymous memory allocation
        '()':       optional feature
    
        'n':        a normal page(4KB) size is used.
        's':        multiple iommu superpage(16MB, 1MB, 64KB, 4KB) size is used.
    
        '*':        not yet, but feasible.
    
    Signed-off-by: Hiroshi DOYU <Hiroshi.DOYU@nokia.com>

diff --git a/arch/arm/include/asm/mach/map.h b/arch/arm/include/asm/mach/map.h
index 58cf91f38e6f..742c2aaeb020 100644
--- a/arch/arm/include/asm/mach/map.h
+++ b/arch/arm/include/asm/mach/map.h
@@ -30,6 +30,14 @@ struct map_desc {
 
 #ifdef CONFIG_MMU
 extern void iotable_init(struct map_desc *, int);
+
+struct mem_type;
+extern const struct mem_type *get_mem_type(unsigned int type);
+/*
+ * external interface to remap single page with appropriate type
+ */
+extern int ioremap_page(unsigned long virt, unsigned long phys,
+			const struct mem_type *mtype);
 #else
 #define iotable_init(map,num)	do { } while (0)
 #endif

commit e4707dd3e9d0cb57597b6568a5e51fea5d6fca41
Author: Paul Walmsley <paul@pwsan.com>
Date:   Thu Mar 12 20:11:43 2009 +0100

    [ARM] 5422/1: ARM: MMU: add a Non-cacheable Normal executable memory type
    
    This patch adds a Non-cacheable Normal ARM executable memory type,
    MT_MEMORY_NONCACHED.
    
    On OMAP3, this is used for rapid dynamic voltage/frequency scaling in
    the VDD2 voltage domain. OMAP3's SDRAM controller (SDRC) is in the
    VDD2 voltage domain, and its clock frequency must change along with
    voltage. The SDRC clock change code cannot run from SDRAM itself,
    since SDRAM accesses are paused during the clock change. So the
    current implementation of the DVFS code executes from OMAP on-chip
    SRAM, aka "OCM RAM."
    
    If the OCM RAM pages are marked as Cacheable, the ARM cache controller
    will attempt to flush dirty cache lines to the SDRC, so it can fill
    those lines with OCM RAM instruction code. The problem is that the
    SDRC is paused during DVFS, and so any SDRAM access causes the ARM MPU
    subsystem to hang.
    
    TI's original solution to this problem was to mark the OCM RAM
    sections as Strongly Ordered memory, thus preventing caching. This is
    overkill: since the memory is marked as non-bufferable, OCM RAM writes
    become needlessly slow. The idea of "Strongly Ordered SRAM" is also
    conceptually disturbing. Previous LAKML list discussion is here:
    
    http://www.spinics.net/lists/arm-kernel/msg54312.html
    
    This memory type MT_MEMORY_NONCACHED is used for OCM RAM by a future
    patch.
    
    Cc: Richard Woodruff <r-woodruff2@ti.com>
    Signed-off-by: Paul Walmsley <paul@pwsan.com>
    Signed-off-by: Russell King <rmk+kernel@arm.linux.org.uk>

diff --git a/arch/arm/include/asm/mach/map.h b/arch/arm/include/asm/mach/map.h
index 39d949b63e80..58cf91f38e6f 100644
--- a/arch/arm/include/asm/mach/map.h
+++ b/arch/arm/include/asm/mach/map.h
@@ -26,6 +26,7 @@ struct map_desc {
 #define MT_HIGH_VECTORS		8
 #define MT_MEMORY		9
 #define MT_ROM			10
+#define MT_MEMORY_NONCACHED	11
 
 #ifdef CONFIG_MMU
 extern void iotable_init(struct map_desc *, int);

commit ebb4c65869db7213280ad9c510637683939b5ff8
Author: Russell King <rmk@dyn-67.arm.linux.org.uk>
Date:   Sun Nov 9 11:18:36 2008 +0000

    [ARM] iop: iop3xx needs registers mapped uncached+unbuffered
    
    Mikael Pettersson reported:
    
       The 2.6.28-rc kernels fail to detect PCI device 0000:00:01.0
       (the first ethernet port) on my Thecus n2100 XScale box.
    
       There is however still a strange "ghost" device that gets partially
       detected in 2.6.28-rc2 vanilla.
    
    The IOP321 manual says:
    
      The user designates the memory region containing the OCCDR as
      non-cacheable and non-bufferable from the IntelR XScaleTM core.
      This guarantees that all load/stores to the OCCDR are only of
      DWORD quantities.
    
    Ensure that the OCCDR is so mapped.
    
    Signed-off-by: Russell King <rmk+kernel@arm.linux.org.uk>

diff --git a/arch/arm/include/asm/mach/map.h b/arch/arm/include/asm/mach/map.h
index cb1139ac1943..39d949b63e80 100644
--- a/arch/arm/include/asm/mach/map.h
+++ b/arch/arm/include/asm/mach/map.h
@@ -19,12 +19,13 @@ struct map_desc {
 };
 
 /* types 0-3 are defined in asm/io.h */
-#define MT_CACHECLEAN		4
-#define MT_MINICLEAN		5
-#define MT_LOW_VECTORS		6
-#define MT_HIGH_VECTORS		7
-#define MT_MEMORY		8
-#define MT_ROM			9
+#define MT_UNCACHED		4
+#define MT_CACHECLEAN		5
+#define MT_MINICLEAN		6
+#define MT_LOW_VECTORS		7
+#define MT_HIGH_VECTORS		8
+#define MT_MEMORY		9
+#define MT_ROM			10
 
 #ifdef CONFIG_MMU
 extern void iotable_init(struct map_desc *, int);

commit 9b727abdff93b0039fba94e96216fc280af4cf01
Author: Russell King <rmk@dyn-67.arm.linux.org.uk>
Date:   Sun Sep 7 12:45:01 2008 +0100

    [ARM] Remove MT_NONSHARED_DEVICE alias
    
    Use MT_DEVICE_NONSHARED instead.
    
    Signed-off-by: Russell King <rmk+kernel@arm.linux.org.uk>

diff --git a/arch/arm/include/asm/mach/map.h b/arch/arm/include/asm/mach/map.h
index 72586cd4372e..cb1139ac1943 100644
--- a/arch/arm/include/asm/mach/map.h
+++ b/arch/arm/include/asm/mach/map.h
@@ -26,8 +26,6 @@ struct map_desc {
 #define MT_MEMORY		8
 #define MT_ROM			9
 
-#define MT_NONSHARED_DEVICE	MT_DEVICE_NONSHARED
-
 #ifdef CONFIG_MMU
 extern void iotable_init(struct map_desc *, int);
 #else

commit db5b7169474882fabbd811a4cf5c1bae3157e677
Author: Russell King <rmk@dyn-67.arm.linux.org.uk>
Date:   Sun Sep 7 12:42:51 2008 +0100

    [ARM] Remove MT_DEVICE_IXP2000 and associated definitions
    
    As of the previous commit, MT_DEVICE_IXP2000 encodes to the same
    PTE bit encoding as MT_DEVICE, so it's now redundant.  Convert
    MT_DEVICE_IXP2000 to use MT_DEVICE instead, and remove its aliases.
    
    Signed-off-by: Russell King <rmk+kernel@arm.linux.org.uk>

diff --git a/arch/arm/include/asm/mach/map.h b/arch/arm/include/asm/mach/map.h
index 9eb936e49cc3..72586cd4372e 100644
--- a/arch/arm/include/asm/mach/map.h
+++ b/arch/arm/include/asm/mach/map.h
@@ -18,16 +18,15 @@ struct map_desc {
 	unsigned int type;
 };
 
-/* types 0-4 are defined in asm/io.h */
-#define MT_CACHECLEAN		5
-#define MT_MINICLEAN		6
-#define MT_LOW_VECTORS		7
-#define MT_HIGH_VECTORS		8
-#define MT_MEMORY		9
-#define MT_ROM			10
+/* types 0-3 are defined in asm/io.h */
+#define MT_CACHECLEAN		4
+#define MT_MINICLEAN		5
+#define MT_LOW_VECTORS		6
+#define MT_HIGH_VECTORS		7
+#define MT_MEMORY		8
+#define MT_ROM			9
 
 #define MT_NONSHARED_DEVICE	MT_DEVICE_NONSHARED
-#define MT_IXP2000_DEVICE	MT_DEVICE_IXP2000
 
 #ifdef CONFIG_MMU
 extern void iotable_init(struct map_desc *, int);

commit 1ad77a876da48331451698cc4172c90ab9b6372f
Author: Lennert Buytenhek <buytenh@wantstofly.org>
Date:   Fri Sep 5 13:17:11 2008 +0100

    [ARM] 5241/1: provide ioremap_wc()
    
    This patch provides an ARM implementation of ioremap_wc().
    
    We use different page table attributes depending on which CPU we
    are running on:
    
    - Non-XScale ARMv5 and earlier systems: The ARMv5 ARM documents four
      possible mapping types (CB=00/01/10/11).  We can't use any of the
      cached memory types (CB=10/11), since that breaks coherency with
      peripheral devices.  Both CB=00 and CB=01 are suitable for _wc, and
      CB=01 (Uncached/Buffered) allows the hardware more freedom than
      CB=00, so we'll use that.
    
      (The ARMv5 ARM seems to suggest that CB=01 is allowed to delay stores
      but isn't allowed to merge them, but there is no other mapping type
      we can use that allows the hardware to delay and merge stores, so
      we'll go with CB=01.)
    
    - XScale v1/v2 (ARMv5): same as the ARMv5 case above, with the slight
      difference that on these platforms, CB=01 actually _does_ allow
      merging stores.  (If you want noncoalescing bufferable behavior
      on Xscale v1/v2, you need to use XCB=101.)
    
    - Xscale v3 (ARMv5) and ARMv6+: on these systems, we use TEXCB=00100
      mappings (Inner/Outer Uncacheable in xsc3 parlance, Uncached Normal
      in ARMv6 parlance).
    
      The ARMv6 ARM explicitly says that any accesses to Normal memory can
      be merged, which makes Normal memory more suitable for _wc mappings
      than Device or Strongly Ordered memory, as the latter two mapping
      types are guaranteed to maintain transaction number, size and order.
      We use the Uncached variety of Normal mappings for the same reason
      that we can't use C=1 mappings on ARMv5.
    
      The xsc3 Architecture Specification documents TEXCB=00100 as being
      Uncacheable and allowing coalescing of writes, which is also just
      what we need.
    
    Signed-off-by: Lennert Buytenhek <buytenh@marvell.com>
    Signed-off-by: Russell King <rmk+kernel@arm.linux.org.uk>

diff --git a/arch/arm/include/asm/mach/map.h b/arch/arm/include/asm/mach/map.h
index 06f583b13999..9eb936e49cc3 100644
--- a/arch/arm/include/asm/mach/map.h
+++ b/arch/arm/include/asm/mach/map.h
@@ -18,13 +18,13 @@ struct map_desc {
 	unsigned int type;
 };
 
-/* types 0-3 are defined in asm/io.h */
-#define MT_CACHECLEAN		4
-#define MT_MINICLEAN		5
-#define MT_LOW_VECTORS		6
-#define MT_HIGH_VECTORS		7
-#define MT_MEMORY		8
-#define MT_ROM			9
+/* types 0-4 are defined in asm/io.h */
+#define MT_CACHECLEAN		5
+#define MT_MINICLEAN		6
+#define MT_LOW_VECTORS		7
+#define MT_HIGH_VECTORS		8
+#define MT_MEMORY		9
+#define MT_ROM			10
 
 #define MT_NONSHARED_DEVICE	MT_DEVICE_NONSHARED
 #define MT_IXP2000_DEVICE	MT_DEVICE_IXP2000

commit 4baa9922430662431231ac637adedddbb0cfb2d7
Author: Russell King <rmk@dyn-67.arm.linux.org.uk>
Date:   Sat Aug 2 10:55:55 2008 +0100

    [ARM] move include/asm-arm to arch/arm/include/asm
    
    Move platform independent header files to arch/arm/include/asm, leaving
    those in asm/arch* and asm/plat* alone.
    
    Signed-off-by: Russell King <rmk+kernel@arm.linux.org.uk>

diff --git a/arch/arm/include/asm/mach/map.h b/arch/arm/include/asm/mach/map.h
new file mode 100644
index 000000000000..06f583b13999
--- /dev/null
+++ b/arch/arm/include/asm/mach/map.h
@@ -0,0 +1,36 @@
+/*
+ *  arch/arm/include/asm/map.h
+ *
+ *  Copyright (C) 1999-2000 Russell King
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation.
+ *
+ *  Page table mapping constructs and function prototypes
+ */
+#include <asm/io.h>
+
+struct map_desc {
+	unsigned long virtual;
+	unsigned long pfn;
+	unsigned long length;
+	unsigned int type;
+};
+
+/* types 0-3 are defined in asm/io.h */
+#define MT_CACHECLEAN		4
+#define MT_MINICLEAN		5
+#define MT_LOW_VECTORS		6
+#define MT_HIGH_VECTORS		7
+#define MT_MEMORY		8
+#define MT_ROM			9
+
+#define MT_NONSHARED_DEVICE	MT_DEVICE_NONSHARED
+#define MT_IXP2000_DEVICE	MT_DEVICE_IXP2000
+
+#ifdef CONFIG_MMU
+extern void iotable_init(struct map_desc *, int);
+#else
+#define iotable_init(map,num)	do { } while (0)
+#endif
