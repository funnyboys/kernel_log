commit d2912cb15bdda8ba4a5dd73396ad62641af2f520
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Tue Jun 4 10:11:33 2019 +0200

    treewide: Replace GPLv2 boilerplate/reference with SPDX - rule 500
    
    Based on 2 normalized pattern(s):
    
      this program is free software you can redistribute it and or modify
      it under the terms of the gnu general public license version 2 as
      published by the free software foundation
    
      this program is free software you can redistribute it and or modify
      it under the terms of the gnu general public license version 2 as
      published by the free software foundation #
    
    extracted by the scancode license scanner the SPDX license identifier
    
      GPL-2.0-only
    
    has been chosen to replace the boilerplate/reference in 4122 file(s).
    
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Reviewed-by: Enrico Weigelt <info@metux.net>
    Reviewed-by: Kate Stewart <kstewart@linuxfoundation.org>
    Reviewed-by: Allison Randal <allison@lohutok.net>
    Cc: linux-spdx@vger.kernel.org
    Link: https://lkml.kernel.org/r/20190604081206.933168790@linutronix.de
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/arch/arm/include/asm/firmware.h b/arch/arm/include/asm/firmware.h
index 6698272bbcbf..23fe0bd405c7 100644
--- a/arch/arm/include/asm/firmware.h
+++ b/arch/arm/include/asm/firmware.h
@@ -1,11 +1,8 @@
+/* SPDX-License-Identifier: GPL-2.0-only */
 /*
  * Copyright (C) 2012 Samsung Electronics.
  * Kyungmin Park <kyungmin.park@samsung.com>
  * Tomasz Figa <t.figa@samsung.com>
- *
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License version 2 as
- * published by the Free Software Foundation.
  */
 
 #ifndef __ASM_ARM_FIRMWARE_H

commit 96446e21d6e9303cce0374af3f4012556dc501ce
Author: Dmitry Osipenko <digetx@gmail.com>
Date:   Mon Mar 18 01:52:05 2019 +0300

    ARM: trusted_foundations: Make prepare_idle call to take mode argument
    
    The Trusted Foundations firmware call varies depending on the required
    suspend-mode. Make the firmware API to take the mode argument in order
    to expose all of the modes to firmware user.
    
    Tested-by: Robert Yang <decatf@gmail.com>
    Tested-by: Michał Mirosław <mirq-linux@rere.qmqm.pl>
    Signed-off-by: Dmitry Osipenko <digetx@gmail.com>
    Signed-off-by: Thierry Reding <treding@nvidia.com>

diff --git a/arch/arm/include/asm/firmware.h b/arch/arm/include/asm/firmware.h
index 34c1d96ef46d..6698272bbcbf 100644
--- a/arch/arm/include/asm/firmware.h
+++ b/arch/arm/include/asm/firmware.h
@@ -24,7 +24,7 @@ struct firmware_ops {
 	/*
 	 * Inform the firmware we intend to enter CPU idle mode
 	 */
-	int (*prepare_idle)(void);
+	int (*prepare_idle)(unsigned long mode);
 	/*
 	 * Enters CPU idle mode
 	 */

commit 1225ad72866b440574a22372b9edceb035632f2b
Author: Bartlomiej Zolnierkiewicz <b.zolnierkie@samsung.com>
Date:   Wed Mar 18 14:09:56 2015 +0100

    ARM: EXYNOS: add exynos_get_boot_addr() helper
    
    Add get_cpu_boot_addr() firmware operation and then
    exynos_get_boot_addr() helper.
    
    This is a preparation for adding coupled cpuidle support
    for Exynos3250 SoC.
    
    There should be no functional changes caused by this patch.
    
    Signed-off-by: Bartlomiej Zolnierkiewicz <b.zolnierkie@samsung.com>
    Cc: Daniel Lezcano <daniel.lezcano@linaro.org>
    Cc: Russell King <rmk+kernel@arm.linux.org.uk>
    Signed-off-by: Krzysztof Kozlowski <k.kozlowski@samsung.com>
    Signed-off-by: Kukjin Kim <kgene@kernel.org>

diff --git a/arch/arm/include/asm/firmware.h b/arch/arm/include/asm/firmware.h
index 89aefe10d66b..34c1d96ef46d 100644
--- a/arch/arm/include/asm/firmware.h
+++ b/arch/arm/include/asm/firmware.h
@@ -33,6 +33,10 @@ struct firmware_ops {
 	 * Sets boot address of specified physical CPU
 	 */
 	int (*set_cpu_boot_addr)(int cpu, unsigned long boot_addr);
+	/*
+	 * Gets boot address of specified physical CPU
+	 */
+	int (*get_cpu_boot_addr)(int cpu, unsigned long *boot_addr);
 	/*
 	 * Boots specified physical CPU
 	 */

commit 0b7778a801fde0eacd5ee08242290273507e60a2
Author: Bartlomiej Zolnierkiewicz <b.zolnierkie@samsung.com>
Date:   Thu Sep 25 17:59:41 2014 +0900

    ARM: firmware: add AFTR mode support to firmware do_idle method
    
    On some platforms (i.e. EXYNOS ones) more than one idle mode is
    available and we need to distinguish them in firmware do_idle method.
    
    Add mode parameter to do_idle firmware method and AFTR mode support
    to EXYNOS do_idle implementation.
    
    This change is a preparation for adding secure firmware support to
    EXYNOS cpuidle driver.
    
    This patch shouldn't cause any functionality changes.
    
    Signed-off-by: Bartlomiej Zolnierkiewicz <b.zolnierkie@samsung.com>
    Acked-by: Kyungmin Park <kyungmin.park@samsung.com>
    Acked-by: Thierry Reding <treding@nvidia.com>
    Signed-off-by: Kukjin Kim <kgene.kim@samsung.com>

diff --git a/arch/arm/include/asm/firmware.h b/arch/arm/include/asm/firmware.h
index 5904f59b0409..89aefe10d66b 100644
--- a/arch/arm/include/asm/firmware.h
+++ b/arch/arm/include/asm/firmware.h
@@ -28,7 +28,7 @@ struct firmware_ops {
 	/*
 	 * Enters CPU idle mode
 	 */
-	int (*do_idle)(void);
+	int (*do_idle)(unsigned long mode);
 	/*
 	 * Sets boot address of specified physical CPU
 	 */

commit 9c261f89a30010a33c15e6b7cfc7c79ae6bea653
Author: Tomasz Figa <t.figa@samsung.com>
Date:   Wed Sep 24 01:24:35 2014 +0900

    ARM: firmware: Introduce suspend and resume operations
    
    This patch extends the firmware_ops structure with two new callbacks:
    .suspend() and .resume(). The former is intended to ask the firmware to
    save all its volatile state and suspend the system, without returning
    back to the kernel in between. The latter is to be called early by
    very low level platform suspend code after waking up to restore low
    level hardware state, which can't be restored in non-secure mode.
    
    While at it, outdated version of the structure is removed from the
    documentation and replaced with a reference to the header file.
    
    Signed-off-by: Tomasz Figa <t.figa@samsung.com>
    Acked-by: Alexandre Courbot <acourbot@nvidia.com>
    Signed-off-by: Kukjin Kim <kgene.kim@samsung.com>

diff --git a/arch/arm/include/asm/firmware.h b/arch/arm/include/asm/firmware.h
index 2c9f10df7568..5904f59b0409 100644
--- a/arch/arm/include/asm/firmware.h
+++ b/arch/arm/include/asm/firmware.h
@@ -41,6 +41,14 @@ struct firmware_ops {
 	 * Initializes L2 cache
 	 */
 	int (*l2x0_init)(void);
+	/*
+	 * Enter system-wide suspend.
+	 */
+	int (*suspend)(void);
+	/*
+	 * Restore state of privileged hardware after system-wide suspend.
+	 */
+	int (*resume)(void);
 };
 
 /* Global pointer for current firmware_ops structure, can't be NULL. */

commit cd42145cd993fa1a7426d63648fc7e3423fb2e1d
Author: Alexandre Courbot <acourbot@nvidia.com>
Date:   Fri Feb 7 13:35:04 2014 +0900

    ARM: firmware: add prepare_idle() operation
    
    Some firmwares do not put the CPU into idle mode themselves, but still
    need to be informed that the CPU is about to enter idle mode before this
    happens. Add a prepare_idle() operation to the firmware_ops structure to
    handle such cases.
    
    Signed-off-by: Alexandre Courbot <acourbot@nvidia.com>
    Acked-by: Olof Johansson <olof@lixom.net>
    Signed-off-by: Stephen Warren <swarren@nvidia.com>

diff --git a/arch/arm/include/asm/firmware.h b/arch/arm/include/asm/firmware.h
index 15631300c238..2c9f10df7568 100644
--- a/arch/arm/include/asm/firmware.h
+++ b/arch/arm/include/asm/firmware.h
@@ -21,6 +21,10 @@
  * A filled up structure can be registered with register_firmware_ops().
  */
 struct firmware_ops {
+	/*
+	 * Inform the firmware we intend to enter CPU idle mode
+	 */
+	int (*prepare_idle)(void);
 	/*
 	 * Enters CPU idle mode
 	 */

commit 7366b92a77fc00357294819bb495896d7482f30c
Author: Tomasz Figa <t.figa@samsung.com>
Date:   Tue Dec 11 13:58:43 2012 +0900

    ARM: Add interface for registering and calling firmware-specific operations
    
    Some boards are running with secure firmware running in TrustZone secure
    world, which changes the way some things have to be initialized.
    
    This patch adds an interface for platforms to specify available firmware
    operations and call them.
    
    A wrapper macro, call_firmware_op(), checks if the operation is provided
    and calls it if so, otherwise returns -ENOSYS to allow fallback to
    legacy operation..
    
    By default no operations are provided.
    
    Example of use:
    
    In code using firmware ops:
    
      __raw_writel(virt_to_phys(exynos4_secondary_startup),
                   CPU1_BOOT_REG);
    
      /* Call Exynos specific smc call */
      if (call_firmware_op(cpu_boot, cpu) == -ENOSYS)
              cpu_boot_legacy(...); /* Try legacy way */
    
      gic_raise_softirq(cpumask_of(cpu), 1);
    
    In board-/platform-specific code:
    
      static int platformX_do_idle(void)
      {
              /* tell platformX firmware to enter idle */
              return 0;
      }
    
      static int platformX_cpu_boot(int i)
      {
              /* tell platformX firmware to boot CPU i */
              return 0;
      }
    
      static const struct firmware_ops platformX_firmware_ops = {
              .do_idle      = exynos_do_idle,
              .cpu_boot     = exynos_cpu_boot,
              /* other operations not available on platformX */
      };
    
      static void __init board_init_early(void)
      {
              register_firmware_ops(&platformX_firmware_ops);
      }
    
    Signed-off-by: Kyungmin Park <kyungmin.park@samsung.com>
    Signed-off-by: Tomasz Figa <t.figa@samsung.com>
    Signed-off-by: Kukjin Kim <kgene.kim@samsung.com>

diff --git a/arch/arm/include/asm/firmware.h b/arch/arm/include/asm/firmware.h
new file mode 100644
index 000000000000..15631300c238
--- /dev/null
+++ b/arch/arm/include/asm/firmware.h
@@ -0,0 +1,66 @@
+/*
+ * Copyright (C) 2012 Samsung Electronics.
+ * Kyungmin Park <kyungmin.park@samsung.com>
+ * Tomasz Figa <t.figa@samsung.com>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation.
+ */
+
+#ifndef __ASM_ARM_FIRMWARE_H
+#define __ASM_ARM_FIRMWARE_H
+
+#include <linux/bug.h>
+
+/*
+ * struct firmware_ops
+ *
+ * A structure to specify available firmware operations.
+ *
+ * A filled up structure can be registered with register_firmware_ops().
+ */
+struct firmware_ops {
+	/*
+	 * Enters CPU idle mode
+	 */
+	int (*do_idle)(void);
+	/*
+	 * Sets boot address of specified physical CPU
+	 */
+	int (*set_cpu_boot_addr)(int cpu, unsigned long boot_addr);
+	/*
+	 * Boots specified physical CPU
+	 */
+	int (*cpu_boot)(int cpu);
+	/*
+	 * Initializes L2 cache
+	 */
+	int (*l2x0_init)(void);
+};
+
+/* Global pointer for current firmware_ops structure, can't be NULL. */
+extern const struct firmware_ops *firmware_ops;
+
+/*
+ * call_firmware_op(op, ...)
+ *
+ * Checks if firmware operation is present and calls it,
+ * otherwise returns -ENOSYS
+ */
+#define call_firmware_op(op, ...)					\
+	((firmware_ops->op) ? firmware_ops->op(__VA_ARGS__) : (-ENOSYS))
+
+/*
+ * register_firmware_ops(ops)
+ *
+ * A function to register platform firmware_ops struct.
+ */
+static inline void register_firmware_ops(const struct firmware_ops *ops)
+{
+	BUG_ON(!ops);
+
+	firmware_ops = ops;
+}
+
+#endif
