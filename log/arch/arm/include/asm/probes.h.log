commit 1802d0beecafe581ad584634ba92f8a471d8a63a
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Mon May 27 08:55:21 2019 +0200

    treewide: Replace GPLv2 boilerplate/reference with SPDX - rule 174
    
    Based on 1 normalized pattern(s):
    
      this program is free software you can redistribute it and or modify
      it under the terms of the gnu general public license version 2 as
      published by the free software foundation this program is
      distributed in the hope that it will be useful but without any
      warranty without even the implied warranty of merchantability or
      fitness for a particular purpose see the gnu general public license
      for more details
    
    extracted by the scancode license scanner the SPDX license identifier
    
      GPL-2.0-only
    
    has been chosen to replace the boilerplate/reference in 655 file(s).
    
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Reviewed-by: Allison Randal <allison@lohutok.net>
    Reviewed-by: Kate Stewart <kstewart@linuxfoundation.org>
    Reviewed-by: Richard Fontana <rfontana@redhat.com>
    Cc: linux-spdx@vger.kernel.org
    Link: https://lkml.kernel.org/r/20190527070034.575739538@linutronix.de
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/arch/arm/include/asm/probes.h b/arch/arm/include/asm/probes.h
index 991c9127c650..ebbd9ec95d21 100644
--- a/arch/arm/include/asm/probes.h
+++ b/arch/arm/include/asm/probes.h
@@ -1,3 +1,4 @@
+/* SPDX-License-Identifier: GPL-2.0-only */
 /*
  * arch/arm/include/asm/probes.h
  *
@@ -5,15 +6,6 @@
  * which contains the following notice...
  *
  * Copyright (C) 2006, 2007 Motorola Inc.
- *
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License version 2 as
- * published by the Free Software Foundation.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
- * General Public License for more details.
  */
 
 #ifndef _ASM_PROBES_H

commit 454f3e132d0520472558518df61ee14db1dbef88
Author: Masami Hiramatsu <mhiramat@kernel.org>
Date:   Wed Jun 20 01:06:34 2018 +0900

    ARM/kprobes: Remove jprobe arm implementation
    
    Remove arch dependent setjump/longjump functions
    and unused fields in kprobe_ctlblk for jprobes
    from arch/arm.
    
    Signed-off-by: Masami Hiramatsu <mhiramat@kernel.org>
    Acked-by: Thomas Gleixner <tglx@linutronix.de>
    Cc: Ananth N Mavinakayanahalli <ananth@linux.vnet.ibm.com>
    Cc: Andrew Morton <akpm@linux-foundation.org>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Russell King <linux@armlinux.org.uk>
    Cc: Steven Rostedt <rostedt@goodmis.org>
    Cc: linux-arch@vger.kernel.org
    Cc: linux-arm-kernel@lists.infradead.org
    Link: https://lore.kernel.org/lkml/152942439350.15209.11127640848082283736.stgit@devbox
    Signed-off-by: Ingo Molnar <mingo@kernel.org>

diff --git a/arch/arm/include/asm/probes.h b/arch/arm/include/asm/probes.h
index 1e5b9bb92270..991c9127c650 100644
--- a/arch/arm/include/asm/probes.h
+++ b/arch/arm/include/asm/probes.h
@@ -51,7 +51,6 @@ struct arch_probes_insn {
  * We assume one instruction can consume at most 64 bytes stack, which is
  * 'push {r0-r15}'. Instructions consume more or unknown stack space like
  * 'str r0, [sp, #-80]' and 'str r0, [sp, r1]' should be prohibit to probe.
- * Both kprobe and jprobe use this macro.
  */
 #define MAX_STACK_SIZE			64
 

commit bfc9657d752c47d59dc0bab85ebdc19cf60100dd
Author: Wang Nan <wangnan0@huawei.com>
Date:   Mon Jan 5 19:34:47 2015 +0800

    ARM: optprobes: execute instruction during restoring if possible.
    
    This patch removes software emulation or simulation for most of probed
    instructions. If the instruction doesn't use PC relative addressing,
    it will be translated into following instructions in the restore code
    in code template:
    
     ldmia {r0 - r14}  // restore all instruction except PC
     <instruction>     // direct execute the probed instruction
     b next_insn       // branch to next instruction.
    
    Signed-off-by: Wang Nan <wangnan0@huawei.com>
    Reviewed-by: Masami Hiramatsu <masami.hiramatsu.pt@hitachi.com>
    Signed-off-by: Jon Medhurst <tixy@linaro.org>

diff --git a/arch/arm/include/asm/probes.h b/arch/arm/include/asm/probes.h
index b668e60f759c..1e5b9bb92270 100644
--- a/arch/arm/include/asm/probes.h
+++ b/arch/arm/include/asm/probes.h
@@ -42,6 +42,7 @@ struct arch_probes_insn {
 	probes_insn_fn_t		*insn_fn;
 	int				stack_space;
 	unsigned long			register_usage_flags;
+	bool				kprobe_direct_exec;
 };
 
 #endif /* __ASSEMBLY__ */

commit 28a1899db30a9325498aef114055506286dc8010
Author: Wang Nan <wangnan0@huawei.com>
Date:   Mon Jan 5 19:29:44 2015 +0800

    ARM: kprobes: check register usage for probed instruction.
    
    This patch utilizes the previously introduced checker to check
    register usage for probed ARM instruction and saves it in a mask.
    A further patch will use such information to avoid simulation or
    emulation.
    
    Signed-off-by: Wang Nan <wangnan0@huawei.com>
    Reviewed-by: Jon Medhurst <tixy@linaro.org>
    Signed-off-by: Jon Medhurst <tixy@linaro.org>

diff --git a/arch/arm/include/asm/probes.h b/arch/arm/include/asm/probes.h
index cd9e81588d83..b668e60f759c 100644
--- a/arch/arm/include/asm/probes.h
+++ b/arch/arm/include/asm/probes.h
@@ -41,6 +41,7 @@ struct arch_probes_insn {
 	probes_insn_singlestep_t	*insn_singlestep;
 	probes_insn_fn_t		*insn_fn;
 	int				stack_space;
+	unsigned long			register_usage_flags;
 };
 
 #endif /* __ASSEMBLY__ */

commit a0266c214fab21371a499e6ab1c9385cc6589189
Author: Wang Nan <wangnan0@huawei.com>
Date:   Mon Jan 5 19:29:25 2015 +0800

    ARM: kprobes: disallow probing stack consuming instructions
    
    This patch prohibits probing instructions for which the stack
    requirements are unable to be determined statically. Some test cases
    are found not work again after the modification, this patch also
    removes them.
    
    Signed-off-by: Wang Nan <wangnan0@huawei.com>
    Reviewed-by: Jon Medhurst <tixy@linaro.org>
    Signed-off-by: Jon Medhurst <tixy@linaro.org>

diff --git a/arch/arm/include/asm/probes.h b/arch/arm/include/asm/probes.h
index 6026deb28794..cd9e81588d83 100644
--- a/arch/arm/include/asm/probes.h
+++ b/arch/arm/include/asm/probes.h
@@ -19,6 +19,8 @@
 #ifndef _ASM_PROBES_H
 #define _ASM_PROBES_H
 
+#ifndef __ASSEMBLY__
+
 typedef u32 probes_opcode_t;
 
 struct arch_probes_insn;
@@ -41,4 +43,14 @@ struct arch_probes_insn {
 	int				stack_space;
 };
 
+#endif /* __ASSEMBLY__ */
+
+/*
+ * We assume one instruction can consume at most 64 bytes stack, which is
+ * 'push {r0-r15}'. Instructions consume more or unknown stack space like
+ * 'str r0, [sp, #-80]' and 'str r0, [sp, r1]' should be prohibit to probe.
+ * Both kprobe and jprobe use this macro.
+ */
+#define MAX_STACK_SIZE			64
+
 #endif

commit 6624cf651f1a14363d0385f36dc255d304ac7ebb
Author: Wang Nan <wangnan0@huawei.com>
Date:   Mon Jan 5 19:29:21 2015 +0800

    ARM: kprobes: collects stack consumption for store instructions
    
    This patch uses the previously introduced checker functionality on
    store instructions to record their stack consumption information to
    arch_probes_insn.
    
    Signed-off-by: Wang Nan <wangnan0@huawei.com>
    Reviewed-by: Jon Medhurst <tixy@linaro.org>
    Signed-off-by: Jon Medhurst <tixy@linaro.org>

diff --git a/arch/arm/include/asm/probes.h b/arch/arm/include/asm/probes.h
index 806cfe622a9e..6026deb28794 100644
--- a/arch/arm/include/asm/probes.h
+++ b/arch/arm/include/asm/probes.h
@@ -38,6 +38,7 @@ struct arch_probes_insn {
 	probes_check_cc			*insn_check_cc;
 	probes_insn_singlestep_t	*insn_singlestep;
 	probes_insn_fn_t		*insn_fn;
+	int				stack_space;
 };
 
 #endif

commit b4cd605ca92d9a8a2f71355cb45dd943ebcb0c97
Author: David A. Long <dave.long@linaro.org>
Date:   Wed Mar 5 21:41:29 2014 -0500

    ARM: Make arch_specific_insn a define for new arch_probes_insn structure
    
    Because the common underlying code for ARM kprobes and uprobes needs
    to share a common architecrure-specific context structure, and because
    the generic kprobes include file insists on defining this to a dummy
    structure when kprobes is not configured, a new common structure is
    required which can exist when uprobes is configured without kprobes.
    In this case kprobes will define a dummy structure, but without the
    define aliasing the two structure tags it will not affect uprobes and
    the shared probes code.
    
    Signed-off-by: David A. Long <dave.long@linaro.org>
    Acked-by: Jon Medhurst <tixy@linaro.org>

diff --git a/arch/arm/include/asm/probes.h b/arch/arm/include/asm/probes.h
index c37252c73ee5..806cfe622a9e 100644
--- a/arch/arm/include/asm/probes.h
+++ b/arch/arm/include/asm/probes.h
@@ -21,18 +21,18 @@
 
 typedef u32 probes_opcode_t;
 
-struct arch_specific_insn;
+struct arch_probes_insn;
 typedef void (probes_insn_handler_t)(probes_opcode_t,
-				     struct arch_specific_insn *,
+				     struct arch_probes_insn *,
 				     struct pt_regs *);
 typedef unsigned long (probes_check_cc)(unsigned long);
 typedef void (probes_insn_singlestep_t)(probes_opcode_t,
-					struct arch_specific_insn *,
+					struct arch_probes_insn *,
 					struct pt_regs *);
 typedef void (probes_insn_fn_t)(void);
 
 /* Architecture specific copy of original instruction. */
-struct arch_specific_insn {
+struct arch_probes_insn {
 	probes_opcode_t			*insn;
 	probes_insn_handler_t		*insn_handler;
 	probes_check_cc			*insn_check_cc;

commit 47e190fafde49ff8ca732fa137e39cb2b8baba8c
Author: David A. Long <dave.long@linaro.org>
Date:   Thu Mar 6 18:12:07 2014 -0500

    ARM: Change the remaining shared kprobes/uprobes symbols to something generic
    
    Any more ARM kprobes/uprobes symbols which have "kprobe" in the name must be
    changed to the more generic "probes" or other non-kprobes specific symbol.
    
    Signed-off-by: David A. Long <dave.long@linaro.org>
    Acked-by: Jon Medhurst <tixy@linaro.org>

diff --git a/arch/arm/include/asm/probes.h b/arch/arm/include/asm/probes.h
index c4acf6c8a2d4..c37252c73ee5 100644
--- a/arch/arm/include/asm/probes.h
+++ b/arch/arm/include/asm/probes.h
@@ -19,26 +19,25 @@
 #ifndef _ASM_PROBES_H
 #define _ASM_PROBES_H
 
-struct kprobe;
 typedef u32 probes_opcode_t;
 
 struct arch_specific_insn;
-typedef void (kprobe_insn_handler_t)(probes_opcode_t,
+typedef void (probes_insn_handler_t)(probes_opcode_t,
 				     struct arch_specific_insn *,
 				     struct pt_regs *);
 typedef unsigned long (probes_check_cc)(unsigned long);
-typedef void (kprobe_insn_singlestep_t)(probes_opcode_t,
+typedef void (probes_insn_singlestep_t)(probes_opcode_t,
 					struct arch_specific_insn *,
 					struct pt_regs *);
-typedef void (kprobe_insn_fn_t)(void);
+typedef void (probes_insn_fn_t)(void);
 
 /* Architecture specific copy of original instruction. */
 struct arch_specific_insn {
 	probes_opcode_t			*insn;
-	kprobe_insn_handler_t		*insn_handler;
+	probes_insn_handler_t		*insn_handler;
 	probes_check_cc			*insn_check_cc;
-	kprobe_insn_singlestep_t	*insn_singlestep;
-	kprobe_insn_fn_t		*insn_fn;
+	probes_insn_singlestep_t	*insn_singlestep;
+	probes_insn_fn_t		*insn_fn;
 };
 
 #endif

commit f145d664df502585618b12ed68c681f82153e02a
Author: David A. Long <dave.long@linaro.org>
Date:   Wed Mar 5 21:17:23 2014 -0500

    ARM: Make the kprobes condition_check symbol names more generic
    
    In preparation for sharing the ARM kprobes instruction interpreting
    code with uprobes, make the symbols names less kprobes-specific.
    
    Signed-off-by: David A. Long <dave.long@linaro.org>
    Acked-by: Jon Medhurst <tixy@linaro.org>

diff --git a/arch/arm/include/asm/probes.h b/arch/arm/include/asm/probes.h
index 4d014c4aa1e7..c4acf6c8a2d4 100644
--- a/arch/arm/include/asm/probes.h
+++ b/arch/arm/include/asm/probes.h
@@ -20,22 +20,23 @@
 #define _ASM_PROBES_H
 
 struct kprobe;
+typedef u32 probes_opcode_t;
 
 struct arch_specific_insn;
-typedef void (kprobe_insn_handler_t)(kprobe_opcode_t,
+typedef void (kprobe_insn_handler_t)(probes_opcode_t,
 				     struct arch_specific_insn *,
 				     struct pt_regs *);
-typedef unsigned long (kprobe_check_cc)(unsigned long);
-typedef void (kprobe_insn_singlestep_t)(kprobe_opcode_t,
+typedef unsigned long (probes_check_cc)(unsigned long);
+typedef void (kprobe_insn_singlestep_t)(probes_opcode_t,
 					struct arch_specific_insn *,
 					struct pt_regs *);
 typedef void (kprobe_insn_fn_t)(void);
 
 /* Architecture specific copy of original instruction. */
 struct arch_specific_insn {
-	kprobe_opcode_t			*insn;
+	probes_opcode_t			*insn;
 	kprobe_insn_handler_t		*insn_handler;
-	kprobe_check_cc			*insn_check_cc;
+	probes_check_cc			*insn_check_cc;
 	kprobe_insn_singlestep_t	*insn_singlestep;
 	kprobe_insn_fn_t		*insn_fn;
 };

commit 7579f4b3764337b39087d10496af0e741cbfe570
Author: David A. Long <dave.long@linaro.org>
Date:   Fri Mar 7 11:19:32 2014 -0500

    ARM: Remove use of struct kprobe from generic probes code
    
    Change the generic ARM probes code to pass in the opcode and architecture-specific
    structure separately instead of using struct kprobe, so we do not pollute
    code being used only for uprobes or other non-kprobes instruction
    interpretation.
    
    Signed-off-by: David A. Long <dave.long@linaro.org>
    Acked-by: Jon Medhurst <tixy@linaro.org>

diff --git a/arch/arm/include/asm/probes.h b/arch/arm/include/asm/probes.h
index 737a9b310efc..4d014c4aa1e7 100644
--- a/arch/arm/include/asm/probes.h
+++ b/arch/arm/include/asm/probes.h
@@ -21,9 +21,14 @@
 
 struct kprobe;
 
-typedef void (kprobe_insn_handler_t)(struct kprobe *, struct pt_regs *);
+struct arch_specific_insn;
+typedef void (kprobe_insn_handler_t)(kprobe_opcode_t,
+				     struct arch_specific_insn *,
+				     struct pt_regs *);
 typedef unsigned long (kprobe_check_cc)(unsigned long);
-typedef void (kprobe_insn_singlestep_t)(struct kprobe *, struct pt_regs *);
+typedef void (kprobe_insn_singlestep_t)(kprobe_opcode_t,
+					struct arch_specific_insn *,
+					struct pt_regs *);
 typedef void (kprobe_insn_fn_t)(void);
 
 /* Architecture specific copy of original instruction. */

commit c18377c303787ded44b7decd7dee694db0f205e9
Author: David A. Long <dave.long@linaro.org>
Date:   Fri Mar 7 11:16:10 2014 -0500

    ARM: Move generic arm instruction parsing code to new files for sharing between features
    
    Move the arm version of the kprobes instruction parsing code into more generic
    files from where it can be used by uprobes and possibly other subsystems. The
    symbol names will be made more generic in a subsequent part of this patchset.
    
    Signed-off-by: David A. Long <dave.long@linaro.org>
    Acked-by: Jon Medhurst <tixy@linaro.org>

diff --git a/arch/arm/include/asm/probes.h b/arch/arm/include/asm/probes.h
index 90c5f5485202..737a9b310efc 100644
--- a/arch/arm/include/asm/probes.h
+++ b/arch/arm/include/asm/probes.h
@@ -19,6 +19,8 @@
 #ifndef _ASM_PROBES_H
 #define _ASM_PROBES_H
 
+struct kprobe;
+
 typedef void (kprobe_insn_handler_t)(struct kprobe *, struct pt_regs *);
 typedef unsigned long (kprobe_check_cc)(unsigned long);
 typedef void (kprobe_insn_singlestep_t)(struct kprobe *, struct pt_regs *);

commit b2531dd5e5f19ea01d67aed82d81c5f778ec0fb7
Author: David A. Long <dave.long@linaro.org>
Date:   Thu Mar 6 17:53:34 2014 -0500

    ARM: move shared uprobe/kprobe definitions into new include file
    
    Separate the kprobe-only definitions from the definitions needed by
    both kprobes and uprobes.
    
    Signed-off-by: David A. Long <dave.long@linaro.org>
    Acked-by: Jon Medhurst <tixy@linaro.org>

diff --git a/arch/arm/include/asm/probes.h b/arch/arm/include/asm/probes.h
new file mode 100644
index 000000000000..90c5f5485202
--- /dev/null
+++ b/arch/arm/include/asm/probes.h
@@ -0,0 +1,36 @@
+/*
+ * arch/arm/include/asm/probes.h
+ *
+ * Original contents copied from arch/arm/include/asm/kprobes.h
+ * which contains the following notice...
+ *
+ * Copyright (C) 2006, 2007 Motorola Inc.
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * General Public License for more details.
+ */
+
+#ifndef _ASM_PROBES_H
+#define _ASM_PROBES_H
+
+typedef void (kprobe_insn_handler_t)(struct kprobe *, struct pt_regs *);
+typedef unsigned long (kprobe_check_cc)(unsigned long);
+typedef void (kprobe_insn_singlestep_t)(struct kprobe *, struct pt_regs *);
+typedef void (kprobe_insn_fn_t)(void);
+
+/* Architecture specific copy of original instruction. */
+struct arch_specific_insn {
+	kprobe_opcode_t			*insn;
+	kprobe_insn_handler_t		*insn_handler;
+	kprobe_check_cc			*insn_check_cc;
+	kprobe_insn_singlestep_t	*insn_singlestep;
+	kprobe_insn_fn_t		*insn_fn;
+};
+
+#endif
