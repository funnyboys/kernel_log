commit db0487abd641db12a74a413067519a741e01dc57
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Tue Jan 22 15:41:12 2019 +0100

    arm: dump: no need to check return value of debugfs_create functions
    
    When calling debugfs functions, there is no need to ever check the
    return value.  The function can work or not, but the code logic should
    never do something different based on this.
    
    Cc: Russell King <linux@armlinux.org.uk>
    Cc: Jinbum Park <jinb.park7@gmail.com>
    Cc: linux-arm-kernel@lists.infradead.org
    Reviewed-by: Kees Cook <keescook@chromium.org>
    Acked-by: Laura Abbott <labbott@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/arch/arm/include/asm/ptdump.h b/arch/arm/include/asm/ptdump.h
index 3ebf9718288d..0c2d3d0d4cc6 100644
--- a/arch/arm/include/asm/ptdump.h
+++ b/arch/arm/include/asm/ptdump.h
@@ -21,13 +21,10 @@ struct ptdump_info {
 
 void ptdump_walk_pgd(struct seq_file *s, struct ptdump_info *info);
 #ifdef CONFIG_ARM_PTDUMP_DEBUGFS
-int ptdump_debugfs_register(struct ptdump_info *info, const char *name);
+void ptdump_debugfs_register(struct ptdump_info *info, const char *name);
 #else
-static inline int ptdump_debugfs_register(struct ptdump_info *info,
-					const char *name)
-{
-	return 0;
-}
+static inline void ptdump_debugfs_register(struct ptdump_info *info,
+					   const char *name) { }
 #endif /* CONFIG_ARM_PTDUMP_DEBUGFS */
 
 void ptdump_check_wx(void);

commit a8e53c151fe7ac52a1c13a6ace0c9e8e0f61260c
Author: Jinbum Park <jinb.park7@gmail.com>
Date:   Tue Dec 12 01:43:57 2017 +0100

    ARM: 8737/1: mm: dump: add checking for writable and executable
    
    Page mappings with full RWX permissions are a security risk.
    x86, arm64 has an option to walk the page tables
    and dump any bad pages.
    
    (1404d6f13e47
    ("arm64: dump: Add checking for writable and exectuable pages"))
    Add a similar implementation for arm.
    
    Reviewed-by: Kees Cook <keescook@chromium.org>
    Tested-by: Laura Abbott <labbott@redhat.com>
    Reviewed-by: Laura Abbott <labbott@redhat.com>
    Signed-off-by: Jinbum Park <jinb.park7@gmail.com>
    Signed-off-by: Russell King <rmk+kernel@armlinux.org.uk>

diff --git a/arch/arm/include/asm/ptdump.h b/arch/arm/include/asm/ptdump.h
index 45d2de313eda..3ebf9718288d 100644
--- a/arch/arm/include/asm/ptdump.h
+++ b/arch/arm/include/asm/ptdump.h
@@ -30,6 +30,14 @@ static inline int ptdump_debugfs_register(struct ptdump_info *info,
 }
 #endif /* CONFIG_ARM_PTDUMP_DEBUGFS */
 
+void ptdump_check_wx(void);
+
 #endif /* CONFIG_ARM_PTDUMP_CORE */
 
+#ifdef CONFIG_DEBUG_WX
+#define debug_checkwx() ptdump_check_wx()
+#else
+#define debug_checkwx() do { } while (0)
+#endif
+
 #endif /* __ASM_PTDUMP_H */

commit 4fb69cc4566f175839615cc4ef8828ae4d5341d9
Author: Jinbum Park <jinb.park7@gmail.com>
Date:   Tue Dec 12 01:41:09 2017 +0100

    ARM: 8735/1: mm: dump: make page table dumping reusable
    
    This patch refactors the arm page table dumping code,
    so multiple tables may be registered with the framework.
    
    This patch refers below commits of arm64.
    (4674fdb9f149 ("arm64: mm: dump: make page table dumping reusable"))
    (4ddb9bf83349 ("arm64: dump: Make ptdump debugfs a separate option"))
    
    Reviewed-by: Kees Cook <keescook@chromium.org>
    Tested-by: Laura Abbott <labbott@redhat.com>
    Reviewed-by: Laura Abbott <labbott@redhat.com>
    Signed-off-by: Jinbum Park <jinb.park7@gmail.com>
    Signed-off-by: Russell King <rmk+kernel@armlinux.org.uk>

diff --git a/arch/arm/include/asm/ptdump.h b/arch/arm/include/asm/ptdump.h
new file mode 100644
index 000000000000..45d2de313eda
--- /dev/null
+++ b/arch/arm/include/asm/ptdump.h
@@ -0,0 +1,35 @@
+/* SPDX-License-Identifier: GPL-2.0 */
+/* Copyright (C) 2014 ARM Ltd. */
+#ifndef __ASM_PTDUMP_H
+#define __ASM_PTDUMP_H
+
+#ifdef CONFIG_ARM_PTDUMP_CORE
+
+#include <linux/mm_types.h>
+#include <linux/seq_file.h>
+
+struct addr_marker {
+	unsigned long start_address;
+	char *name;
+};
+
+struct ptdump_info {
+	struct mm_struct		*mm;
+	const struct addr_marker	*markers;
+	unsigned long			base_addr;
+};
+
+void ptdump_walk_pgd(struct seq_file *s, struct ptdump_info *info);
+#ifdef CONFIG_ARM_PTDUMP_DEBUGFS
+int ptdump_debugfs_register(struct ptdump_info *info, const char *name);
+#else
+static inline int ptdump_debugfs_register(struct ptdump_info *info,
+					const char *name)
+{
+	return 0;
+}
+#endif /* CONFIG_ARM_PTDUMP_DEBUGFS */
+
+#endif /* CONFIG_ARM_PTDUMP_CORE */
+
+#endif /* __ASM_PTDUMP_H */
