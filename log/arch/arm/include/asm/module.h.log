commit 62d0fd591db1f9dcf68fb963b3a94af085a6b166
Author: Masahiro Yamada <masahiroy@kernel.org>
Date:   Wed Apr 22 01:13:55 2020 +0900

    arch: split MODULE_ARCH_VERMAGIC definitions out to <asm/vermagic.h>
    
    As the bug report [1] pointed out, <linux/vermagic.h> must be included
    after <linux/module.h>.
    
    I believe we should not impose any include order restriction. We often
    sort include directives alphabetically, but it is just coding style
    convention. Technically, we can include header files in any order by
    making every header self-contained.
    
    Currently, arch-specific MODULE_ARCH_VERMAGIC is defined in
    <asm/module.h>, which is not included from <linux/vermagic.h>.
    
    Hence, the straight-forward fix-up would be as follows:
    
    |--- a/include/linux/vermagic.h
    |+++ b/include/linux/vermagic.h
    |@@ -1,5 +1,6 @@
    | /* SPDX-License-Identifier: GPL-2.0 */
    | #include <generated/utsrelease.h>
    |+#include <linux/module.h>
    |
    | /* Simply sanity version stamp for modules. */
    | #ifdef CONFIG_SMP
    
    This works enough, but for further cleanups, I split MODULE_ARCH_VERMAGIC
    definitions into <asm/vermagic.h>.
    
    With this, <linux/module.h> and <linux/vermagic.h> will be orthogonal,
    and the location of MODULE_ARCH_VERMAGIC definitions will be consistent.
    
    For arc and ia64, MODULE_PROC_FAMILY is only used for defining
    MODULE_ARCH_VERMAGIC. I squashed it.
    
    For hexagon, nds32, and xtensa, I removed <asm/modules.h> entirely
    because they contained nothing but MODULE_ARCH_VERMAGIC definition.
    Kbuild will automatically generate <asm/modules.h> at build-time,
    wrapping <asm-generic/module.h>.
    
    [1] https://lore.kernel.org/lkml/20200411155623.GA22175@zn.tnic
    
    Reported-by: Borislav Petkov <bp@suse.de>
    Signed-off-by: Masahiro Yamada <masahiroy@kernel.org>
    Acked-by: Jessica Yu <jeyu@kernel.org>

diff --git a/arch/arm/include/asm/module.h b/arch/arm/include/asm/module.h
index 182163b55546..4b0df09cbe67 100644
--- a/arch/arm/include/asm/module.h
+++ b/arch/arm/include/asm/module.h
@@ -37,30 +37,6 @@ struct mod_arch_specific {
 struct module;
 u32 get_module_plt(struct module *mod, unsigned long loc, Elf32_Addr val);
 
-/*
- * Add the ARM architecture version to the version magic string
- */
-#define MODULE_ARCH_VERMAGIC_ARMVSN "ARMv" __stringify(__LINUX_ARM_ARCH__) " "
-
-/* Add __virt_to_phys patching state as well */
-#ifdef CONFIG_ARM_PATCH_PHYS_VIRT
-#define MODULE_ARCH_VERMAGIC_P2V "p2v8 "
-#else
-#define MODULE_ARCH_VERMAGIC_P2V ""
-#endif
-
-/* Add instruction set architecture tag to distinguish ARM/Thumb kernels */
-#ifdef CONFIG_THUMB2_KERNEL
-#define MODULE_ARCH_VERMAGIC_ARMTHUMB "thumb2 "
-#else
-#define MODULE_ARCH_VERMAGIC_ARMTHUMB ""
-#endif
-
-#define MODULE_ARCH_VERMAGIC \
-	MODULE_ARCH_VERMAGIC_ARMVSN \
-	MODULE_ARCH_VERMAGIC_ARMTHUMB \
-	MODULE_ARCH_VERMAGIC_P2V
-
 #ifdef CONFIG_THUMB2_KERNEL
 #define HAVE_ARCH_KALLSYMS_SYMBOL_VALUE
 static inline unsigned long kallsyms_symbol_value(const Elf_Sym *sym)

commit 93d77e7f1410c366050d6035dcba1a5167c7cf0b
Author: Vincent Whitchurch <vincent.whitchurch@axis.com>
Date:   Fri Dec 14 17:05:55 2018 +0100

    ARM: module: Fix function kallsyms on Thumb-2
    
    Thumb-2 functions have the lowest bit set in the symbol value in the
    symtab.  When kallsyms are generated for the vmlinux, the kallsyms are
    generated from the output of nm, and nm clears the lowest bit.
    
     $ arm-linux-gnueabihf-readelf -a vmlinux | grep show_interrupts
      95947: 8015dc89   686 FUNC    GLOBAL DEFAULT    2 show_interrupts
     $ arm-linux-gnueabihf-nm vmlinux | grep show_interrupts
     8015dc88 T show_interrupts
     $ cat /proc/kallsyms | grep show_interrupts
     8015dc88 T show_interrupts
    
    However, for modules, the kallsyms uses the values in the symbol table
    without modification, so for functions in modules, the lowest bit is set
    in kallsyms.
    
     $ arm-linux-gnueabihf-readelf -a drivers/net/tun.ko | grep tun_get_socket
        333: 00002d4d    36 FUNC    GLOBAL DEFAULT    1 tun_get_socket
     $ arm-linux-gnueabihf-nm drivers/net/tun.ko | grep tun_get_socket
     00002d4c T tun_get_socket
     $ cat /proc/kallsyms | grep tun_get_socket
     7f802d4d t tun_get_socket      [tun]
    
    Because of this, the symbol+offset of the crashing instruction shown in
    oopses is incorrect when the crash is in a module.  For example, given a
    tun_get_socket which starts like this,
    
     00002d4c <tun_get_socket>:
         2d4c:       6943            ldr     r3, [r0, #20]
         2d4e:       4a07            ldr     r2, [pc, #28]
         2d50:       4293            cmp     r3, r2
    
    a crash when tun_get_socket is called with NULL results in:
    
     PC is at tun_xdp+0xa3/0xa4 [tun]
     pc : [<7f802d4c>]
    
    As can be seen, the "PC is at" line reports the wrong symbol name, and
    the symbol+offset will point to the wrong source line if it is passed to
    gdb.
    
    To solve this, add a way for archs to fixup the reading of these module
    kallsyms values, and use that to clear the lowest bit for function
    symbols on Thumb-2.
    
    After the fix:
    
     # cat /proc/kallsyms | grep tun_get_socket
     7f802d4c t tun_get_socket       [tun]
    
     PC is at tun_get_socket+0x0/0x24 [tun]
     pc : [<7f802d4c>]
    
    Signed-off-by: Vincent Whitchurch <vincent.whitchurch@axis.com>
    Signed-off-by: Jessica Yu <jeyu@kernel.org>

diff --git a/arch/arm/include/asm/module.h b/arch/arm/include/asm/module.h
index 9e81b7c498d8..182163b55546 100644
--- a/arch/arm/include/asm/module.h
+++ b/arch/arm/include/asm/module.h
@@ -61,4 +61,15 @@ u32 get_module_plt(struct module *mod, unsigned long loc, Elf32_Addr val);
 	MODULE_ARCH_VERMAGIC_ARMTHUMB \
 	MODULE_ARCH_VERMAGIC_P2V
 
+#ifdef CONFIG_THUMB2_KERNEL
+#define HAVE_ARCH_KALLSYMS_SYMBOL_VALUE
+static inline unsigned long kallsyms_symbol_value(const Elf_Sym *sym)
+{
+	if (ELF_ST_TYPE(sym->st_info) == STT_FUNC)
+		return sym->st_value & ~1;
+
+	return sym->st_value;
+}
+#endif
+
 #endif /* _ASM_ARM_MODULE_H */

commit 4d58e7034d1971436d44f203cf69d2feb6b82e5c
Author: Arnd Bergmann <arnd@arndb.de>
Date:   Fri Jul 6 14:48:47 2018 +0200

    ARM: module: fix modsign build error
    
    The asm/module.h header file can not be included standalone, which
    breaks the module signing code after a recent change:
    
    In file included from kernel/module-internal.h:13,
                     from kernel/module_signing.c:17:
    arch/arm/include/asm/module.h:37:27: error: 'struct module' declared inside parameter list will not be visible outside of this definition or declaration [-Werror]
     u32 get_module_plt(struct module *mod, unsigned long loc, Elf32_Addr val);
    
    This adds a forward declaration of struct module to make it all work.
    
    Fixes: f314dfea16a0 ("modsign: log module name in the event of an error")
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>
    Acked-by: Russell King <rmk+kernel@armlinux.org.uk>
    Signed-off-by: Jessica Yu <jeyu@kernel.org>

diff --git a/arch/arm/include/asm/module.h b/arch/arm/include/asm/module.h
index 89ad0596033a..9e81b7c498d8 100644
--- a/arch/arm/include/asm/module.h
+++ b/arch/arm/include/asm/module.h
@@ -34,6 +34,7 @@ struct mod_arch_specific {
 #endif
 };
 
+struct module;
 u32 get_module_plt(struct module *mod, unsigned long loc, Elf32_Addr val);
 
 /*

commit b24413180f5600bcb3bb70fbed5cf186b60864bd
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Wed Nov 1 15:07:57 2017 +0100

    License cleanup: add SPDX GPL-2.0 license identifier to files with no license
    
    Many source files in the tree are missing licensing information, which
    makes it harder for compliance tools to determine the correct license.
    
    By default all files without license information are under the default
    license of the kernel, which is GPL version 2.
    
    Update the files which contain no license information with the 'GPL-2.0'
    SPDX license identifier.  The SPDX identifier is a legally binding
    shorthand, which can be used instead of the full boiler plate text.
    
    This patch is based on work done by Thomas Gleixner and Kate Stewart and
    Philippe Ombredanne.
    
    How this work was done:
    
    Patches were generated and checked against linux-4.14-rc6 for a subset of
    the use cases:
     - file had no licensing information it it.
     - file was a */uapi/* one with no licensing information in it,
     - file was a */uapi/* one with existing licensing information,
    
    Further patches will be generated in subsequent months to fix up cases
    where non-standard license headers were used, and references to license
    had to be inferred by heuristics based on keywords.
    
    The analysis to determine which SPDX License Identifier to be applied to
    a file was done in a spreadsheet of side by side results from of the
    output of two independent scanners (ScanCode & Windriver) producing SPDX
    tag:value files created by Philippe Ombredanne.  Philippe prepared the
    base worksheet, and did an initial spot review of a few 1000 files.
    
    The 4.13 kernel was the starting point of the analysis with 60,537 files
    assessed.  Kate Stewart did a file by file comparison of the scanner
    results in the spreadsheet to determine which SPDX license identifier(s)
    to be applied to the file. She confirmed any determination that was not
    immediately clear with lawyers working with the Linux Foundation.
    
    Criteria used to select files for SPDX license identifier tagging was:
     - Files considered eligible had to be source code files.
     - Make and config files were included as candidates if they contained >5
       lines of source
     - File already had some variant of a license header in it (even if <5
       lines).
    
    All documentation files were explicitly excluded.
    
    The following heuristics were used to determine which SPDX license
    identifiers to apply.
    
     - when both scanners couldn't find any license traces, file was
       considered to have no license information in it, and the top level
       COPYING file license applied.
    
       For non */uapi/* files that summary was:
    
       SPDX license identifier                            # files
       ---------------------------------------------------|-------
       GPL-2.0                                              11139
    
       and resulted in the first patch in this series.
    
       If that file was a */uapi/* path one, it was "GPL-2.0 WITH
       Linux-syscall-note" otherwise it was "GPL-2.0".  Results of that was:
    
       SPDX license identifier                            # files
       ---------------------------------------------------|-------
       GPL-2.0 WITH Linux-syscall-note                        930
    
       and resulted in the second patch in this series.
    
     - if a file had some form of licensing information in it, and was one
       of the */uapi/* ones, it was denoted with the Linux-syscall-note if
       any GPL family license was found in the file or had no licensing in
       it (per prior point).  Results summary:
    
       SPDX license identifier                            # files
       ---------------------------------------------------|------
       GPL-2.0 WITH Linux-syscall-note                       270
       GPL-2.0+ WITH Linux-syscall-note                      169
       ((GPL-2.0 WITH Linux-syscall-note) OR BSD-2-Clause)    21
       ((GPL-2.0 WITH Linux-syscall-note) OR BSD-3-Clause)    17
       LGPL-2.1+ WITH Linux-syscall-note                      15
       GPL-1.0+ WITH Linux-syscall-note                       14
       ((GPL-2.0+ WITH Linux-syscall-note) OR BSD-3-Clause)    5
       LGPL-2.0+ WITH Linux-syscall-note                       4
       LGPL-2.1 WITH Linux-syscall-note                        3
       ((GPL-2.0 WITH Linux-syscall-note) OR MIT)              3
       ((GPL-2.0 WITH Linux-syscall-note) AND MIT)             1
    
       and that resulted in the third patch in this series.
    
     - when the two scanners agreed on the detected license(s), that became
       the concluded license(s).
    
     - when there was disagreement between the two scanners (one detected a
       license but the other didn't, or they both detected different
       licenses) a manual inspection of the file occurred.
    
     - In most cases a manual inspection of the information in the file
       resulted in a clear resolution of the license that should apply (and
       which scanner probably needed to revisit its heuristics).
    
     - When it was not immediately clear, the license identifier was
       confirmed with lawyers working with the Linux Foundation.
    
     - If there was any question as to the appropriate license identifier,
       the file was flagged for further research and to be revisited later
       in time.
    
    In total, over 70 hours of logged manual review was done on the
    spreadsheet to determine the SPDX license identifiers to apply to the
    source files by Kate, Philippe, Thomas and, in some cases, confirmation
    by lawyers working with the Linux Foundation.
    
    Kate also obtained a third independent scan of the 4.13 code base from
    FOSSology, and compared selected files where the other two scanners
    disagreed against that SPDX file, to see if there was new insights.  The
    Windriver scanner is based on an older version of FOSSology in part, so
    they are related.
    
    Thomas did random spot checks in about 500 files from the spreadsheets
    for the uapi headers and agreed with SPDX license identifier in the
    files he inspected. For the non-uapi files Thomas did random spot checks
    in about 15000 files.
    
    In initial set of patches against 4.14-rc6, 3 files were found to have
    copy/paste license identifier errors, and have been fixed to reflect the
    correct identifier.
    
    Additionally Philippe spent 10 hours this week doing a detailed manual
    inspection and review of the 12,461 patched files from the initial patch
    version early this week with:
     - a full scancode scan run, collecting the matched texts, detected
       license ids and scores
     - reviewing anything where there was a license detected (about 500+
       files) to ensure that the applied SPDX license was correct
     - reviewing anything where there was no detection but the patch license
       was not GPL-2.0 WITH Linux-syscall-note to ensure that the applied
       SPDX license was correct
    
    This produced a worksheet with 20 files needing minor correction.  This
    worksheet was then exported into 3 different .csv files for the
    different types of files to be modified.
    
    These .csv files were then reviewed by Greg.  Thomas wrote a script to
    parse the csv files and add the proper SPDX tag to the file, in the
    format that the file expected.  This script was further refined by Greg
    based on the output to detect more types of files automatically and to
    distinguish between header and source .c files (which need different
    comment types.)  Finally Greg ran the script using the .csv files to
    generate the patches.
    
    Reviewed-by: Kate Stewart <kstewart@linuxfoundation.org>
    Reviewed-by: Philippe Ombredanne <pombredanne@nexb.com>
    Reviewed-by: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/arch/arm/include/asm/module.h b/arch/arm/include/asm/module.h
index ed2319663a1e..89ad0596033a 100644
--- a/arch/arm/include/asm/module.h
+++ b/arch/arm/include/asm/module.h
@@ -1,3 +1,4 @@
+/* SPDX-License-Identifier: GPL-2.0 */
 #ifndef _ASM_ARM_MODULE_H
 #define _ASM_ARM_MODULE_H
 

commit b7ede5a1f5905ac394cc8e61712a13e3c5cb7b8f
Author: Ard Biesheuvel <ard.biesheuvel@linaro.org>
Date:   Wed Feb 22 19:40:12 2017 +0100

    ARM: 8662/1: module: split core and init PLT sections
    
    Since commit 35fa91eed817 ("ARM: kernel: merge core and init PLTs"),
    the ARM module PLT code allocates all PLT entries in a single core
    section, since the overhead of having a separate init PLT section is
    not justified by the small number of PLT entries usually required for
    init code.
    
    However, the core and init module regions are allocated independently,
    and there is a corner case where the core region may be allocated from
    the VMALLOC region if the dedicated module region is exhausted, but the
    init region, being much smaller, can still be allocated from the module
    region. This puts the PLT entries out of reach of the relocated branch
    instructions, defeating the whole purpose of PLTs.
    
    So split the core and init PLT regions, and name the latter ".init.plt"
    so it gets allocated along with (and sufficiently close to) the .init
    sections that it serves. Also, given that init PLT entries may need to
    be emitted for branches that target the core module, modify the logic
    that disregards defined symbols to only disregard symbols that are
    defined in the same section.
    
    Fixes: 35fa91eed817 ("ARM: kernel: merge core and init PLTs")
    Cc: <stable@vger.kernel.org> # v4.9+
    Reported-by: Angus Clark <angus@angusclark.org>
    Tested-by: Angus Clark <angus@angusclark.org>
    Signed-off-by: Ard Biesheuvel <ard.biesheuvel@linaro.org>
    Signed-off-by: Russell King <rmk+kernel@armlinux.org.uk>

diff --git a/arch/arm/include/asm/module.h b/arch/arm/include/asm/module.h
index 464748b9fd7d..ed2319663a1e 100644
--- a/arch/arm/include/asm/module.h
+++ b/arch/arm/include/asm/module.h
@@ -18,13 +18,18 @@ enum {
 };
 #endif
 
+struct mod_plt_sec {
+	struct elf32_shdr	*plt;
+	int			plt_count;
+};
+
 struct mod_arch_specific {
 #ifdef CONFIG_ARM_UNWIND
 	struct unwind_table *unwind[ARM_SEC_MAX];
 #endif
 #ifdef CONFIG_ARM_MODULE_PLTS
-	struct elf32_shdr   *plt;
-	int		    plt_count;
+	struct mod_plt_sec	core;
+	struct mod_plt_sec	init;
 #endif
 };
 

commit 35fa91eed817d2c65c59ef5a9737011313be6ac0
Author: Ard Biesheuvel <ard.biesheuvel@linaro.org>
Date:   Tue Aug 16 17:21:02 2016 +0200

    ARM: kernel: merge core and init PLTs
    
    The PLT code uses a separate .init.plt section to allocate PLT entries
    for jump and call instructions in __init code. However, even for fairly
    sizable modules like mac80211.ko, we only end up with a couple of PLT
    entries in the .init section, and so we can simplify the code
    significantly by emitting all PLT entries into the same section.
    
    Tested-by: Jongsung Kim <neidhard.kim@lge.com>
    Signed-off-by: Ard Biesheuvel <ard.biesheuvel@linaro.org>

diff --git a/arch/arm/include/asm/module.h b/arch/arm/include/asm/module.h
index e358b7966c06..464748b9fd7d 100644
--- a/arch/arm/include/asm/module.h
+++ b/arch/arm/include/asm/module.h
@@ -23,10 +23,8 @@ struct mod_arch_specific {
 	struct unwind_table *unwind[ARM_SEC_MAX];
 #endif
 #ifdef CONFIG_ARM_MODULE_PLTS
-	struct elf32_shdr   *core_plt;
-	struct elf32_shdr   *init_plt;
-	int		    core_plt_count;
-	int		    init_plt_count;
+	struct elf32_shdr   *plt;
+	int		    plt_count;
 #endif
 };
 

commit 7d485f647c1f4a6976264c90447fb0dbf07b111d
Author: Ard Biesheuvel <ard.biesheuvel@linaro.org>
Date:   Mon Nov 24 16:54:35 2014 +0100

    ARM: 8220/1: allow modules outside of bl range
    
    Loading modules far away from the kernel in memory is problematic
    because the 'bl' instruction only has limited reach, and modules are not
    built with PLTs. Instead of using the -mlong-calls option (which affects
    all compiler emitted bl instructions, but not the ones in assembler),
    this patch allocates some additional space at module load time, and
    populates it with PLT like veneers when encountering relocations that
    are out of range.
    
    This should work with all relocations against symbols exported by the
    kernel, including those resulting from GCC generated implicit function
    calls for ftrace etc.
    
    The module memory size increases by about 5% on average, regardless of
    whether any PLT entries were actually needed. However, due to the page
    based rounding that occurs when allocating module memory, the average
    memory footprint increase is negligible.
    
    Reviewed-by: Nicolas Pitre <nico@linaro.org>
    Signed-off-by: Ard Biesheuvel <ard.biesheuvel@linaro.org>
    Signed-off-by: Russell King <rmk+kernel@arm.linux.org.uk>

diff --git a/arch/arm/include/asm/module.h b/arch/arm/include/asm/module.h
index ed690c49ef93..e358b7966c06 100644
--- a/arch/arm/include/asm/module.h
+++ b/arch/arm/include/asm/module.h
@@ -16,11 +16,21 @@ enum {
 	ARM_SEC_UNLIKELY,
 	ARM_SEC_MAX,
 };
+#endif
 
 struct mod_arch_specific {
+#ifdef CONFIG_ARM_UNWIND
 	struct unwind_table *unwind[ARM_SEC_MAX];
-};
 #endif
+#ifdef CONFIG_ARM_MODULE_PLTS
+	struct elf32_shdr   *core_plt;
+	struct elf32_shdr   *init_plt;
+	int		    core_plt_count;
+	int		    init_plt_count;
+#endif
+};
+
+u32 get_module_plt(struct module *mod, unsigned long loc, Elf32_Addr val);
 
 /*
  * Add the ARM architecture version to the version magic string

commit 849b882b52df0f276d9ffded01d85654aa0da422
Author: Douglas Anderson <dianders@chromium.org>
Date:   Thu Aug 29 00:08:01 2013 +0100

    ARM: 7829/1: Add ".text.unlikely" and ".text.hot" to arm unwind tables
    
    It appears that gcc may put some code in ".text.unlikely" or
    ".text.hot" sections.  Right now those aren't accounted for in unwind
    tables.  Add them.
    
    I found some docs about this at:
      http://gcc.gnu.org/onlinedocs/gcc-4.6.2/gcc.pdf
    
    Without this, if you have slub_debug turned on, you can get messages
    that look like this:
      unwind: Index not found 7f008c50
    
    Signed-off-by: Doug Anderson <dianders@chromium.org>
    Acked-by: Mike Frysinger <vapier@gentoo.org>
    Signed-off-by: Russell King <rmk+kernel@arm.linux.org.uk>

diff --git a/arch/arm/include/asm/module.h b/arch/arm/include/asm/module.h
index 0d3a28dbc8e5..ed690c49ef93 100644
--- a/arch/arm/include/asm/module.h
+++ b/arch/arm/include/asm/module.h
@@ -12,6 +12,8 @@ enum {
 	ARM_SEC_CORE,
 	ARM_SEC_EXIT,
 	ARM_SEC_DEVEXIT,
+	ARM_SEC_HOT,
+	ARM_SEC_UNLIKELY,
 	ARM_SEC_MAX,
 };
 

commit 786d35d45cc40b2a51a18f73e14e135d47fdced7
Author: David Howells <dhowells@redhat.com>
Date:   Fri Sep 28 14:31:03 2012 +0930

    Make most arch asm/module.h files use asm-generic/module.h
    
    Use the mapping of Elf_[SPE]hdr, Elf_Addr, Elf_Sym, Elf_Dyn, Elf_Rel/Rela,
    ELF_R_TYPE() and ELF_R_SYM() to either the 32-bit version or the 64-bit version
    into asm-generic/module.h for all arches bar MIPS.
    
    Also, use the generic definition mod_arch_specific where possible.
    
    To this end, I've defined three new config bools:
    
     (*) HAVE_MOD_ARCH_SPECIFIC
    
         Arches define this if they don't want to use the empty generic
         mod_arch_specific struct.
    
     (*) MODULES_USE_ELF_RELA
    
         Arches define this if their modules can contain RELA records.  This causes
         the Elf_Rela mapping to be emitted and allows apply_relocate_add() to be
         defined by the arch rather than have the core emit an error message.
    
     (*) MODULES_USE_ELF_REL
    
         Arches define this if their modules can contain REL records.  This causes
         the Elf_Rel mapping to be emitted and allows apply_relocate() to be
         defined by the arch rather than have the core emit an error message.
    
    Note that it is possible to allow both REL and RELA records: m68k and mips are
    two arches that do this.
    
    With this, some arch asm/module.h files can be deleted entirely and replaced
    with a generic-y marker in the arch Kbuild file.
    
    Additionally, I have removed the bits from m32r and score that handle the
    unsupported type of relocation record as that's now handled centrally.
    
    Signed-off-by: David Howells <dhowells@redhat.com>
    Acked-by: Sam Ravnborg <sam@ravnborg.org>
    Signed-off-by: Rusty Russell <rusty@rustcorp.com.au>

diff --git a/arch/arm/include/asm/module.h b/arch/arm/include/asm/module.h
index 6c6809f982f1..0d3a28dbc8e5 100644
--- a/arch/arm/include/asm/module.h
+++ b/arch/arm/include/asm/module.h
@@ -1,9 +1,7 @@
 #ifndef _ASM_ARM_MODULE_H
 #define _ASM_ARM_MODULE_H
 
-#define Elf_Shdr	Elf32_Shdr
-#define Elf_Sym		Elf32_Sym
-#define Elf_Ehdr	Elf32_Ehdr
+#include <asm-generic/module.h>
 
 struct unwind_table;
 
@@ -16,13 +14,11 @@ enum {
 	ARM_SEC_DEVEXIT,
 	ARM_SEC_MAX,
 };
-#endif
 
 struct mod_arch_specific {
-#ifdef CONFIG_ARM_UNWIND
 	struct unwind_table *unwind[ARM_SEC_MAX];
-#endif
 };
+#endif
 
 /*
  * Add the ARM architecture version to the version magic string

commit daece59689e76ed55d8863cae04993679a8e844e
Author: Nicolas Pitre <nicolas.pitre@linaro.org>
Date:   Fri Aug 12 00:14:29 2011 +0100

    ARM: 7013/1: P2V: Remove ARM_PATCH_PHYS_VIRT_16BIT
    
    This code can be removed now that MSM targets no longer need the 16-bit
    offsets for P2V.
    
    Signed-off-by: Nicolas Pitre <nicolas.pitre@linaro.org>
    Signed-off-by: Stephen Boyd <sboyd@codeaurora.org>
    Signed-off-by: Russell King <rmk+kernel@arm.linux.org.uk>

diff --git a/arch/arm/include/asm/module.h b/arch/arm/include/asm/module.h
index 543b44916d2c..6c6809f982f1 100644
--- a/arch/arm/include/asm/module.h
+++ b/arch/arm/include/asm/module.h
@@ -31,11 +31,7 @@ struct mod_arch_specific {
 
 /* Add __virt_to_phys patching state as well */
 #ifdef CONFIG_ARM_PATCH_PHYS_VIRT
-#ifdef CONFIG_ARM_PATCH_PHYS_VIRT_16BIT
-#define MODULE_ARCH_VERMAGIC_P2V "p2v16 "
-#else
 #define MODULE_ARCH_VERMAGIC_P2V "p2v8 "
-#endif
 #else
 #define MODULE_ARCH_VERMAGIC_P2V ""
 #endif

commit 80f0aad77f3e1e9d9e518b09ac46963d628ae2be
Author: Dave Martin <dave.martin@linaro.org>
Date:   Fri Feb 25 17:54:52 2011 +0100

    ARM: 6766/1: Thumb-2: Reflect ARM/Thumb-2 configuration in module vermagic
    
    Loading Thumb-2 modules into an ARM kernel or vice-versa isn't
    guaranteed to work safely, since the kernel is not interworking-
    aware everywhere.
    
    This patch adds "thumb2" to the module vermagic when
    CONFIG_THUMB2_KERNEL is enabled, to help avoid accidental loading
    of modules into the wrong kernel.
    
    Signed-off-by: Dave Martin <dave.martin@linaro.org>
    Acked-by: Nicolas Pitre <nicolas.pitre@linaro.org>
    Signed-off-by: Russell King <rmk+kernel@arm.linux.org.uk>

diff --git a/arch/arm/include/asm/module.h b/arch/arm/include/asm/module.h
index a2b775b81cfa..543b44916d2c 100644
--- a/arch/arm/include/asm/module.h
+++ b/arch/arm/include/asm/module.h
@@ -40,8 +40,16 @@ struct mod_arch_specific {
 #define MODULE_ARCH_VERMAGIC_P2V ""
 #endif
 
+/* Add instruction set architecture tag to distinguish ARM/Thumb kernels */
+#ifdef CONFIG_THUMB2_KERNEL
+#define MODULE_ARCH_VERMAGIC_ARMTHUMB "thumb2 "
+#else
+#define MODULE_ARCH_VERMAGIC_ARMTHUMB ""
+#endif
+
 #define MODULE_ARCH_VERMAGIC \
 	MODULE_ARCH_VERMAGIC_ARMVSN \
+	MODULE_ARCH_VERMAGIC_ARMTHUMB \
 	MODULE_ARCH_VERMAGIC_P2V
 
 #endif /* _ASM_ARM_MODULE_H */

commit cada3c0841e1deaec4c0f92654610b028dc683ff
Author: Russell King <rmk+kernel@arm.linux.org.uk>
Date:   Tue Jan 4 19:39:29 2011 +0000

    ARM: P2V: extend to 16-bit translation offsets
    
    MSM's memory is aligned to 2MB, which is more than we can do with our
    existing method as we're limited to the upper 8 bits.  Extend this by
    using two instructions to 16 bits, automatically selected when MSM is
    enabled.
    
    Acked-by: Tony Lindgren <tony@atomide.com>
    Reviewed-by: Nicolas Pitre <nicolas.pitre@linaro.org>
    Tested-by: Nicolas Pitre <nicolas.pitre@linaro.org>
    Signed-off-by: Russell King <rmk+kernel@arm.linux.org.uk>

diff --git a/arch/arm/include/asm/module.h b/arch/arm/include/asm/module.h
index d072c21332ee..a2b775b81cfa 100644
--- a/arch/arm/include/asm/module.h
+++ b/arch/arm/include/asm/module.h
@@ -31,7 +31,11 @@ struct mod_arch_specific {
 
 /* Add __virt_to_phys patching state as well */
 #ifdef CONFIG_ARM_PATCH_PHYS_VIRT
+#ifdef CONFIG_ARM_PATCH_PHYS_VIRT_16BIT
+#define MODULE_ARCH_VERMAGIC_P2V "p2v16 "
+#else
 #define MODULE_ARCH_VERMAGIC_P2V "p2v8 "
+#endif
 #else
 #define MODULE_ARCH_VERMAGIC_P2V ""
 #endif

commit dc21af99fadcfa0ae65b52fd0895f85824f0c288
Author: Russell King <rmk+kernel@arm.linux.org.uk>
Date:   Tue Jan 4 19:09:43 2011 +0000

    ARM: P2V: introduce phys_to_virt/virt_to_phys runtime patching
    
    This idea came from Nicolas, Eric Miao produced an initial version,
    which was then rewritten into this.
    
    Patch the physical to virtual translations at runtime.  As we modify
    the code, this makes it incompatible with XIP kernels, but allows us
    to achieve this with minimal loss of performance.
    
    As many translations are of the form:
    
            physical = virtual + (PHYS_OFFSET - PAGE_OFFSET)
            virtual = physical - (PHYS_OFFSET - PAGE_OFFSET)
    
    we generate an 'add' instruction for __virt_to_phys(), and a 'sub'
    instruction for __phys_to_virt().  We calculate at run time (PHYS_OFFSET
    - PAGE_OFFSET) by comparing the address prior to MMU initialization with
    where it should be once the MMU has been initialized, and place this
    constant into the above add/sub instructions.
    
    Once we have (PHYS_OFFSET - PAGE_OFFSET), we can calculate the real
    PHYS_OFFSET as PAGE_OFFSET is a build-time constant, and save this for
    the C-mode PHYS_OFFSET variable definition to use.
    
    At present, we are unable to support Realview with Sparsemem enabled
    as this uses a complex mapping function, and MSM as this requires a
    constant which will not fit in our math instruction.
    
    Add a module version magic string for this feature to prevent
    incompatible modules being loaded.
    
    Tested-by: Tony Lindgren <tony@atomide.com>
    Reviewed-by: Nicolas Pitre <nicolas.pitre@linaro.org>
    Tested-by: Nicolas Pitre <nicolas.pitre@linaro.org>
    Signed-off-by: Russell King <rmk+kernel@arm.linux.org.uk>

diff --git a/arch/arm/include/asm/module.h b/arch/arm/include/asm/module.h
index 12c8e680cbff..d072c21332ee 100644
--- a/arch/arm/include/asm/module.h
+++ b/arch/arm/include/asm/module.h
@@ -25,8 +25,19 @@ struct mod_arch_specific {
 };
 
 /*
- * Include the ARM architecture version.
+ * Add the ARM architecture version to the version magic string
  */
-#define MODULE_ARCH_VERMAGIC	"ARMv" __stringify(__LINUX_ARM_ARCH__) " "
+#define MODULE_ARCH_VERMAGIC_ARMVSN "ARMv" __stringify(__LINUX_ARM_ARCH__) " "
+
+/* Add __virt_to_phys patching state as well */
+#ifdef CONFIG_ARM_PATCH_PHYS_VIRT
+#define MODULE_ARCH_VERMAGIC_P2V "p2v8 "
+#else
+#define MODULE_ARCH_VERMAGIC_P2V ""
+#endif
+
+#define MODULE_ARCH_VERMAGIC \
+	MODULE_ARCH_VERMAGIC_ARMVSN \
+	MODULE_ARCH_VERMAGIC_P2V
 
 #endif /* _ASM_ARM_MODULE_H */

commit 8931360eb9c6ec8bd30efef579cef81917a2fcf3
Author: Russell King <rmk+kernel@arm.linux.org.uk>
Date:   Fri Nov 12 13:02:46 2010 +0000

    ARM: module: clean up handling of ELF unwind tables
    
    There's no need to keep pointers to the ELF sections available while
    the module is loaded - we only need the section pointers while we're
    finding and registering the unwind tables, which can all be done during
    the finalize stage of loading.
    
    Signed-off-by: Russell King <rmk+kernel@arm.linux.org.uk>

diff --git a/arch/arm/include/asm/module.h b/arch/arm/include/asm/module.h
index cbb0bc295d2b..12c8e680cbff 100644
--- a/arch/arm/include/asm/module.h
+++ b/arch/arm/include/asm/module.h
@@ -8,11 +8,6 @@
 struct unwind_table;
 
 #ifdef CONFIG_ARM_UNWIND
-struct arm_unwind_mapping {
-	Elf_Shdr *unw_sec;
-	Elf_Shdr *sec_text;
-	struct unwind_table *unwind;
-};
 enum {
 	ARM_SEC_INIT,
 	ARM_SEC_DEVINIT,
@@ -21,13 +16,13 @@ enum {
 	ARM_SEC_DEVEXIT,
 	ARM_SEC_MAX,
 };
+#endif
+
 struct mod_arch_specific {
-	struct arm_unwind_mapping map[ARM_SEC_MAX];
-};
-#else
-struct mod_arch_specific {
-};
+#ifdef CONFIG_ARM_UNWIND
+	struct unwind_table *unwind[ARM_SEC_MAX];
 #endif
+};
 
 /*
  * Include the ARM architecture version.

commit 09e56a2d076c2afb2a1932ae4283e10ef2d26ef3
Author: Phil Carmody <ext-phil.2.carmody@nokia.com>
Date:   Thu Aug 19 15:19:04 2010 +0100

    ARM: 6340/1: module - additional unwind tables for exit/devexit sections
    
    Without these, exit functions cannot be stack-traced, so to speak.
    This implies that module unloads that perform allocations (don't
    laugh) will cause noisy warnings on the console when kmemleak is
    enabled, as it presumes that all code's call chains are traceable.
    Similarly, BUGs and WARN_ONs will give additional console spam.
    
    Signed-off-by: Phil Carmody <ext-phil.2.carmody@nokia.com>
    Acked-by: Catalin Marinas <catalin.marinas@arm.com>
    Signed-off-by: Russell King <rmk+kernel@arm.linux.org.uk>

diff --git a/arch/arm/include/asm/module.h b/arch/arm/include/asm/module.h
index 6dcff0f7f8d7..cbb0bc295d2b 100644
--- a/arch/arm/include/asm/module.h
+++ b/arch/arm/include/asm/module.h
@@ -17,6 +17,8 @@ enum {
 	ARM_SEC_INIT,
 	ARM_SEC_DEVINIT,
 	ARM_SEC_CORE,
+	ARM_SEC_EXIT,
+	ARM_SEC_DEVEXIT,
 	ARM_SEC_MAX,
 };
 struct mod_arch_specific {

commit e5f7772eec3ec342ecfe686ab8330ef538af134b
Author: Phil Carmody <ext-phil.2.carmody@nokia.com>
Date:   Thu Aug 19 15:16:37 2010 +0100

    ARM: 6339/1: module - simplify unwind table handling
    
    The various sections are all dealt with similarly, so factor out
    that common behaviour. (Incorporating Peter Huewe's fix.)
    
    Cc: Peter Huewe <peterhuewe@gmx.de>
    Signed-off-by: Phil Carmody <ext-phil.2.carmody@nokia.com>
    Acked-by: Catalin Marinas <catalin.marinas@arm.com>
    Signed-off-by: Russell King <rmk+kernel@arm.linux.org.uk>

diff --git a/arch/arm/include/asm/module.h b/arch/arm/include/asm/module.h
index e4dfa69abb68..6dcff0f7f8d7 100644
--- a/arch/arm/include/asm/module.h
+++ b/arch/arm/include/asm/module.h
@@ -7,20 +7,25 @@
 
 struct unwind_table;
 
-struct mod_arch_specific
-{
 #ifdef CONFIG_ARM_UNWIND
-	Elf_Shdr *unw_sec_init;
-	Elf_Shdr *unw_sec_devinit;
-	Elf_Shdr *unw_sec_core;
-	Elf_Shdr *sec_init_text;
-	Elf_Shdr *sec_devinit_text;
-	Elf_Shdr *sec_core_text;
-	struct unwind_table *unwind_init;
-	struct unwind_table *unwind_devinit;
-	struct unwind_table *unwind_core;
-#endif
+struct arm_unwind_mapping {
+	Elf_Shdr *unw_sec;
+	Elf_Shdr *sec_text;
+	struct unwind_table *unwind;
+};
+enum {
+	ARM_SEC_INIT,
+	ARM_SEC_DEVINIT,
+	ARM_SEC_CORE,
+	ARM_SEC_MAX,
+};
+struct mod_arch_specific {
+	struct arm_unwind_mapping map[ARM_SEC_MAX];
 };
+#else
+struct mod_arch_specific {
+};
+#endif
 
 /*
  * Include the ARM architecture version.

commit 2e1926e7b5d39eb31880152d636e8d8d011888cb
Author: Catalin Marinas <catalin.marinas@arm.com>
Date:   Wed Feb 11 13:09:54 2009 +0100

    [ARM] 5384/1: unwind: Add stack unwinding support for loadable modules
    
    This patch adds ELF section parsing for the unwinding tables in loadable
    modules together with the PREL31 relocation symbol resolving.
    
    Signed-off-by: Catalin Marinas <catalin.marinas@arm.com>
    Signed-off-by: Russell King <rmk+kernel@arm.linux.org.uk>

diff --git a/arch/arm/include/asm/module.h b/arch/arm/include/asm/module.h
index 24b168dc31a3..e4dfa69abb68 100644
--- a/arch/arm/include/asm/module.h
+++ b/arch/arm/include/asm/module.h
@@ -1,15 +1,27 @@
 #ifndef _ASM_ARM_MODULE_H
 #define _ASM_ARM_MODULE_H
 
-struct mod_arch_specific
-{
-	int foo;
-};
-
 #define Elf_Shdr	Elf32_Shdr
 #define Elf_Sym		Elf32_Sym
 #define Elf_Ehdr	Elf32_Ehdr
 
+struct unwind_table;
+
+struct mod_arch_specific
+{
+#ifdef CONFIG_ARM_UNWIND
+	Elf_Shdr *unw_sec_init;
+	Elf_Shdr *unw_sec_devinit;
+	Elf_Shdr *unw_sec_core;
+	Elf_Shdr *sec_init_text;
+	Elf_Shdr *sec_devinit_text;
+	Elf_Shdr *sec_core_text;
+	struct unwind_table *unwind_init;
+	struct unwind_table *unwind_devinit;
+	struct unwind_table *unwind_core;
+#endif
+};
+
 /*
  * Include the ARM architecture version.
  */

commit 4baa9922430662431231ac637adedddbb0cfb2d7
Author: Russell King <rmk@dyn-67.arm.linux.org.uk>
Date:   Sat Aug 2 10:55:55 2008 +0100

    [ARM] move include/asm-arm to arch/arm/include/asm
    
    Move platform independent header files to arch/arm/include/asm, leaving
    those in asm/arch* and asm/plat* alone.
    
    Signed-off-by: Russell King <rmk+kernel@arm.linux.org.uk>

diff --git a/arch/arm/include/asm/module.h b/arch/arm/include/asm/module.h
new file mode 100644
index 000000000000..24b168dc31a3
--- /dev/null
+++ b/arch/arm/include/asm/module.h
@@ -0,0 +1,18 @@
+#ifndef _ASM_ARM_MODULE_H
+#define _ASM_ARM_MODULE_H
+
+struct mod_arch_specific
+{
+	int foo;
+};
+
+#define Elf_Shdr	Elf32_Shdr
+#define Elf_Sym		Elf32_Sym
+#define Elf_Ehdr	Elf32_Ehdr
+
+/*
+ * Include the ARM architecture version.
+ */
+#define MODULE_ARCH_VERMAGIC	"ARMv" __stringify(__LINUX_ARM_ARCH__) " "
+
+#endif /* _ASM_ARM_MODULE_H */
