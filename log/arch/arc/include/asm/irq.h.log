commit d2912cb15bdda8ba4a5dd73396ad62641af2f520
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Tue Jun 4 10:11:33 2019 +0200

    treewide: Replace GPLv2 boilerplate/reference with SPDX - rule 500
    
    Based on 2 normalized pattern(s):
    
      this program is free software you can redistribute it and or modify
      it under the terms of the gnu general public license version 2 as
      published by the free software foundation
    
      this program is free software you can redistribute it and or modify
      it under the terms of the gnu general public license version 2 as
      published by the free software foundation #
    
    extracted by the scancode license scanner the SPDX license identifier
    
      GPL-2.0-only
    
    has been chosen to replace the boilerplate/reference in 4122 file(s).
    
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Reviewed-by: Enrico Weigelt <info@metux.net>
    Reviewed-by: Kate Stewart <kstewart@linuxfoundation.org>
    Reviewed-by: Allison Randal <allison@lohutok.net>
    Cc: linux-spdx@vger.kernel.org
    Link: https://lkml.kernel.org/r/20190604081206.933168790@linutronix.de
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/arch/arc/include/asm/irq.h b/arch/arc/include/asm/irq.h
index 0618b1ce707c..0309cb405cfb 100644
--- a/arch/arc/include/asm/irq.h
+++ b/arch/arc/include/asm/irq.h
@@ -1,9 +1,6 @@
+/* SPDX-License-Identifier: GPL-2.0-only */
 /*
  * Copyright (C) 2004, 2007-2010, 2011-2012 Synopsys, Inc. (www.synopsys.com)
- *
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License version 2 as
- * published by the Free Software Foundation.
  */
 
 #ifndef __ASM_ARC_IRQ_H

commit 179cf194e6d153fb6daeca811253502d5c84e4c8
Author: Vineet Gupta <vgupta@synopsys.com>
Date:   Wed Feb 1 09:44:33 2017 -0800

    ARCv2: intc: Use runtime value of irq count for setting up intc
    
    Signed-off-by: Vineet Gupta <vgupta@synopsys.com>

diff --git a/arch/arc/include/asm/irq.h b/arch/arc/include/asm/irq.h
index a3880b423925..0618b1ce707c 100644
--- a/arch/arc/include/asm/irq.h
+++ b/arch/arc/include/asm/irq.h
@@ -21,6 +21,7 @@
 #ifdef CONFIG_ISA_ARCV2
 #define IPI_IRQ		19
 #define SOFTIRQ_IRQ	21
+#define FIRST_EXT_IRQ	24
 #endif
 
 #include <linux/interrupt.h>

commit f33b8cddc8ad8ce83cd3214406bcf68ec6c4d8ec
Author: Yuriy Kolerov <yuriy.kolerov@synopsys.com>
Date:   Tue Jan 31 14:45:22 2017 +0300

    ARCv2: intc: Rework the build time irq count information
    
    Currently Kconfig knob ARC_NUMBER_OF_INTERRUPTS is used as indicator of
    hard irq count. But it is flawed that it doesn't affect
     - NR_IRQS     : for number of virtual interrupts
     - NR_CPU_IRQS : for number of hardware interrupts
    
    Moreover the actual hardware irq count might still not be same as
    ARC_NUMBER_OF_INTERRUPTS. So use the information availble in the
    Build Configuration Registers and get rid of the Kconfig option.
    
    We still need "some" build time info about irq count to set up
    sufficient number of vector table entries. This is done with a
    sufficiently large NR_CPU_IRQS which will eventually be used soley for
    that purpose (subsequent patches will remove its usage elsewhere)
    
    So to summarize what this patch does:
    
      * NR_CPU_IRQS defines a maximum number of hardware interrupts.
      * Remove ARC_NUMBER_OF_INTERRUPTS option and create interrupts
        table for all possible hardware interrupts.
      * Increase a maximum number of virtual IRQs to 512. ARCv2 can
        support 240 interrupts in the core interrupts controllers
        and 128 interrupts in IDU. Thus 512 virtual IRQs must be
        enough for most configurations of boards.
    
    This patch leads to NR_CPU_IRQS in 2 places, to reduce the overall
    churn. The next patch will remove the 2nd definition anyways.
    
    Signed-off-by: Yuriy Kolerov <yuriy.kolerov@synopsys.com>
    Signed-off-by: Vineet Gupta <vgupta@synopsys.com>
    [vgupta: reworked the changelog a bit]

diff --git a/arch/arc/include/asm/irq.h b/arch/arc/include/asm/irq.h
index 19deab06b07a..a3880b423925 100644
--- a/arch/arc/include/asm/irq.h
+++ b/arch/arc/include/asm/irq.h
@@ -9,7 +9,13 @@
 #ifndef __ASM_ARC_IRQ_H
 #define __ASM_ARC_IRQ_H
 
-#define NR_IRQS		128 /* allow some CPU external IRQ handling */
+/*
+ * ARCv2 can support 240 interrupts in the core interrupts controllers and
+ * 128 interrupts in IDU. Thus 512 virtual IRQs must be enough for most
+ * configurations of boards.
+ * This doesnt affect ARCompact, but we change it to same value
+ */
+#define NR_IRQS		512
 
 /* Platform Independent IRQs */
 #ifdef CONFIG_ISA_ARCV2

commit fe7b10994618c846481fbcf9212d296df47bc1dc
Author: Vineet Gupta <vgupta@synopsys.com>
Date:   Wed Feb 1 10:14:11 2017 -0800

    ARC: [intc-*]: confine NR_CPU_IRQS to intc code
    
    And even this willl change in subsequent patches where we resort to
    using run time info instead...
    
    Signed-off-by: Vineet Gupta <vgupta@synopsys.com>

diff --git a/arch/arc/include/asm/irq.h b/arch/arc/include/asm/irq.h
index c0fa0d2de400..19deab06b07a 100644
--- a/arch/arc/include/asm/irq.h
+++ b/arch/arc/include/asm/irq.h
@@ -9,7 +9,6 @@
 #ifndef __ASM_ARC_IRQ_H
 #define __ASM_ARC_IRQ_H
 
-#define NR_CPU_IRQS	32  /* number of interrupt lines of ARC770 CPU */
 #define NR_IRQS		128 /* allow some CPU external IRQ handling */
 
 /* Platform Independent IRQs */

commit 88555cc584d93e658722f090d3f8fb84d5fa15a5
Author: Vineet Gupta <vgupta@synopsys.com>
Date:   Wed Mar 30 18:35:28 2016 +0530

    ARC: irq: export some IRQs again
    
    This will be needed for switching to linear irq domain as
    irq_create_mapping() called by intr code needs the IRQ numbers
    in addition to existing usage in mcip.c for requesting the irq
    
    Signed-off-by: Vineet Gupta <vgupta@synopsys.com>

diff --git a/arch/arc/include/asm/irq.h b/arch/arc/include/asm/irq.h
index a6ac89dc228f..c0fa0d2de400 100644
--- a/arch/arc/include/asm/irq.h
+++ b/arch/arc/include/asm/irq.h
@@ -12,6 +12,12 @@
 #define NR_CPU_IRQS	32  /* number of interrupt lines of ARC770 CPU */
 #define NR_IRQS		128 /* allow some CPU external IRQ handling */
 
+/* Platform Independent IRQs */
+#ifdef CONFIG_ISA_ARCV2
+#define IPI_IRQ		19
+#define SOFTIRQ_IRQ	21
+#endif
+
 #include <linux/interrupt.h>
 #include <asm-generic/irq.h>
 

commit 77c8d0d6b3f4ea0989b9ca42fb368cc2aac02495
Author: Vineet Gupta <vgupta@synopsys.com>
Date:   Fri Jan 1 17:58:45 2016 +0530

    ARC: clockevent: DT based probe
    
     - timer frequency is derived from DT (no longer rely on top level
       DT "clock-frequency" probed early and exported by asm/clk.h)
    
     - TIMER0_IRQ need not be exported across arch code, confined to intc as
       it is property of same
    
     - Any failures in clockevent setup are considered pedantic and system
       panic()'s as there is no generic fallback (unlike clocksource where
       a jiffies based soft clocksource always exists)
    
    Acked-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Signed-off-by: Vineet Gupta <vgupta@synopsys.com>

diff --git a/arch/arc/include/asm/irq.h b/arch/arc/include/asm/irq.h
index 5c0b5abda67a..a6ac89dc228f 100644
--- a/arch/arc/include/asm/irq.h
+++ b/arch/arc/include/asm/irq.h
@@ -12,15 +12,6 @@
 #define NR_CPU_IRQS	32  /* number of interrupt lines of ARC770 CPU */
 #define NR_IRQS		128 /* allow some CPU external IRQ handling */
 
-/* Platform Independent IRQs */
-#ifdef CONFIG_ISA_ARCOMPACT
-#define TIMER0_IRQ      3
-#define TIMER1_IRQ      4
-#else
-#define TIMER0_IRQ      16
-#define TIMER1_IRQ      17
-#endif
-
 #include <linux/interrupt.h>
 #include <asm-generic/irq.h>
 

commit eec3c58efa271d7dfa30c978dda2c88280212634
Author: Noam Camus <noamc@ezchip.com>
Date:   Fri Jan 1 15:48:49 2016 +0530

    ARC: clockevent: switch to cpu notifier for clockevent setup
    
    ARC Timers so far have been handled as "legacy" w/o explicit description
    in DT. This poses challenge for newer platforms wanting to use them.
    This series will eventually help move timers over to DT.
    
    This patch does a small change of using a CPU notifier to set clockevent
    on non-boot CPUs. So explicit setup is done only on boot CPU (which will
    later be done by DT)
    
    Signed-off-by: Noam Camus <noamc@ezchip.com>
    [vgupta: broken off from a bigger patch]
    Signed-off-by: Vineet Gupta <vgupta@synopsys.com>

diff --git a/arch/arc/include/asm/irq.h b/arch/arc/include/asm/irq.h
index f9c735ede4fc..5c0b5abda67a 100644
--- a/arch/arc/include/asm/irq.h
+++ b/arch/arc/include/asm/irq.h
@@ -25,6 +25,5 @@
 #include <asm-generic/irq.h>
 
 extern void arc_init_IRQ(void);
-void arc_local_timer_setup(void);
 
 #endif

commit 569579401ae1c9b9f317f38261e32135b153e9b3
Author: Vineet Gupta <vgupta@synopsys.com>
Date:   Thu Jan 28 12:56:03 2016 +0530

    ARC: opencode arc_request_percpu_irq
    
    - The idea is to remove the API usage since it has a subltle
      design flaw - relies on being called on cpu0 first. This is true for
      some early per cpu irqs such as TIMER/IPI, but not for late probed
      per cpu peripherals such a perf. And it's usage in perf has already
      bitten us once: see c6317bc7c5ab
      ("ARCv2: perf: Ensure perf intr gets enabled on all cores") where we
      ended up open coding it anyways
    
    - The seeming duplication will go away once we start using cpu notifier
      for timer setup
    
    Signed-off-by: Vineet Gupta <vgupta@synopsys.com>

diff --git a/arch/arc/include/asm/irq.h b/arch/arc/include/asm/irq.h
index 49014f0ef36d..f9c735ede4fc 100644
--- a/arch/arc/include/asm/irq.h
+++ b/arch/arc/include/asm/irq.h
@@ -26,8 +26,5 @@
 
 extern void arc_init_IRQ(void);
 void arc_local_timer_setup(void);
-void arc_request_percpu_irq(int irq, int cpu,
-                            irqreturn_t (*isr)(int irq, void *dev),
-                            const char *irq_nm, void *percpu_dev);
 
 #endif

commit 9681787930cec7cee77db0a93c747153ef962b8a
Author: Vineet Gupta <vgupta@synopsys.com>
Date:   Tue Feb 23 13:35:12 2016 +0530

    ARCv2: SMP: Push IPI_IRQ into IPI provider
    
    Signed-off-by: Vineet Gupta <vgupta@synopsys.com>

diff --git a/arch/arc/include/asm/irq.h b/arch/arc/include/asm/irq.h
index bc5103637326..49014f0ef36d 100644
--- a/arch/arc/include/asm/irq.h
+++ b/arch/arc/include/asm/irq.h
@@ -19,7 +19,6 @@
 #else
 #define TIMER0_IRQ      16
 #define TIMER1_IRQ      17
-#define IPI_IRQ         19
 #endif
 
 #include <linux/interrupt.h>

commit dbcbc7e7cee15058fdb9696b2b38c692680fc413
Author: Vineet Gupta <vgupta@synopsys.com>
Date:   Thu Jan 28 12:48:05 2016 +0530

    ARC: [intc-compact] Remove IPI setup from ARCompact port
    
    There is no real ARC700 based SMP SoC so remove IPI definition.
    EZChip's SMP ARC700 is going to use a different intc and IPI provider
    anyways.
    
    Signed-off-by: Vineet Gupta <vgupta@synopsys.com>

diff --git a/arch/arc/include/asm/irq.h b/arch/arc/include/asm/irq.h
index 4fd7d62a6e30..bc5103637326 100644
--- a/arch/arc/include/asm/irq.h
+++ b/arch/arc/include/asm/irq.h
@@ -16,7 +16,6 @@
 #ifdef CONFIG_ISA_ARCOMPACT
 #define TIMER0_IRQ      3
 #define TIMER1_IRQ      4
-#define IPI_IRQ		(NR_CPU_IRQS-1) /* dummy to enable SMP build for up hardware */
 #else
 #define TIMER0_IRQ      16
 #define TIMER1_IRQ      17

commit e0868e6f673d0d2db6a3c3798605e6efb756e61e
Author: Vineet Gupta <vgupta@synopsys.com>
Date:   Mon Oct 12 14:58:54 2015 +0530

    ARC: smp: irqchip: handle IPI as percpu irq like timer
    
    The reason this was not done so far was lack of genuine IPI_IRQ for
    ARC700, as we don't have a SMP version of core yet (which might change
    soon thx to EZChip). Nevertheles to increase the build coverage, we
    need to allow CONFIG_SMP for ARC700 and still be able to run it on a
    UP platform (nsim or AXS101) with a UP Device Tree (SMP-on-UP)
    
    The build itself requires some define for IPI_IRQ and even a dummy
    value is fine since that code won't run anyways.
    
    Signed-off-by: Vineet Gupta <vgupta@synopsys.com>

diff --git a/arch/arc/include/asm/irq.h b/arch/arc/include/asm/irq.h
index bc5103637326..4fd7d62a6e30 100644
--- a/arch/arc/include/asm/irq.h
+++ b/arch/arc/include/asm/irq.h
@@ -16,6 +16,7 @@
 #ifdef CONFIG_ISA_ARCOMPACT
 #define TIMER0_IRQ      3
 #define TIMER1_IRQ      4
+#define IPI_IRQ		(NR_CPU_IRQS-1) /* dummy to enable SMP build for up hardware */
 #else
 #define TIMER0_IRQ      16
 #define TIMER1_IRQ      17

commit 82fea5a1bbbe8c3b56d5f3efbf8880c7b25b1758
Author: Vineet Gupta <vgupta@synopsys.com>
Date:   Wed Sep 10 19:05:38 2014 +0530

    ARCv2: SMP: Support ARConnect (MCIP) for Inter-Core-Interrupts et al
    
    Cc: Jason Cooper <jason@lakedaemon.net>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Vineet Gupta <vgupta@synopsys.com>

diff --git a/arch/arc/include/asm/irq.h b/arch/arc/include/asm/irq.h
index 49014f0ef36d..bc5103637326 100644
--- a/arch/arc/include/asm/irq.h
+++ b/arch/arc/include/asm/irq.h
@@ -19,6 +19,7 @@
 #else
 #define TIMER0_IRQ      16
 #define TIMER1_IRQ      17
+#define IPI_IRQ         19
 #endif
 
 #include <linux/interrupt.h>

commit 1f6ccfff6314672743ad7252160654709e997a2a
Author: Vineet Gupta <vgupta@synopsys.com>
Date:   Mon May 13 18:30:41 2013 +0530

    ARCv2: Support for ARCv2 ISA and HS38x cores
    
    The notable features are:
        - SMP configurations of upto 4 cores with coherency
        - Optional L2 Cache and IO-Coherency
        - Revised Interrupt Architecture (multiple priorites, reg banks,
            auto stack switch, auto regfile save/restore)
        - MMUv4 (PIPT dcache, Huge Pages)
        - Instructions for
            * 64bit load/store: LDD, STD
            * Hardware assisted divide/remainder: DIV, REM
            * Function prologue/epilogue: ENTER_S, LEAVE_S
            * IRQ enable/disable: CLRI, SETI
            * pop count: FFS, FLS
            * SETcc, BMSKN, XBFU...
    
    Signed-off-by: Vineet Gupta <vgupta@synopsys.com>

diff --git a/arch/arc/include/asm/irq.h b/arch/arc/include/asm/irq.h
index f38652fb2ed7..49014f0ef36d 100644
--- a/arch/arc/include/asm/irq.h
+++ b/arch/arc/include/asm/irq.h
@@ -13,8 +13,13 @@
 #define NR_IRQS		128 /* allow some CPU external IRQ handling */
 
 /* Platform Independent IRQs */
+#ifdef CONFIG_ISA_ARCOMPACT
 #define TIMER0_IRQ      3
 #define TIMER1_IRQ      4
+#else
+#define TIMER0_IRQ      16
+#define TIMER1_IRQ      17
+#endif
 
 #include <linux/interrupt.h>
 #include <asm-generic/irq.h>

commit 2b75c0f93e395aa6130c20a08016b143e6ec8c53
Author: Vineet Gupta <vgupta@synopsys.com>
Date:   Wed May 7 15:25:10 2014 +0530

    ARC: [SMP] unify cpu private IRQ requests (TIMER/IPI)
    
    The current cpu-private IRQ registration is ugly as it requires need to
    expose arch_unmask_irq() outside of intc code.
    So switch to percpu IRQ APIs:
      -request_percpu_irq [boot core]
      -enable_percpu_irq  [all cores]
    
    Encapsulated in helper arc_request_percpu_irq()
    
    Signed-off-by: Vineet Gupta <vgupta@synopsys.com>

diff --git a/arch/arc/include/asm/irq.h b/arch/arc/include/asm/irq.h
index fb4efb648971..f38652fb2ed7 100644
--- a/arch/arc/include/asm/irq.h
+++ b/arch/arc/include/asm/irq.h
@@ -16,9 +16,13 @@
 #define TIMER0_IRQ      3
 #define TIMER1_IRQ      4
 
+#include <linux/interrupt.h>
 #include <asm-generic/irq.h>
 
 extern void arc_init_IRQ(void);
 void arc_local_timer_setup(void);
+void arc_request_percpu_irq(int irq, int cpu,
+                            irqreturn_t (*isr)(int irq, void *dev),
+                            const char *irq_nm, void *percpu_dev);
 
 #endif

commit 2d4899f6bddfbeb88c01f2ec28f977e0d8c8d369
Author: Vineet Gupta <vgupta@synopsys.com>
Date:   Thu May 8 14:06:38 2014 +0530

    ARC: arc_local_timer_setup() need not pass own cpu id
    
    Signed-off-by: Vineet Gupta <vgupta@synopsys.com>

diff --git a/arch/arc/include/asm/irq.h b/arch/arc/include/asm/irq.h
index 781f57f25bd8..fb4efb648971 100644
--- a/arch/arc/include/asm/irq.h
+++ b/arch/arc/include/asm/irq.h
@@ -19,6 +19,6 @@
 #include <asm-generic/irq.h>
 
 extern void arc_init_IRQ(void);
-void arc_local_timer_setup(unsigned int cpu);
+void arc_local_timer_setup(void);
 
 #endif

commit 9a091d9e8450a4cec76bd208bbbb017a12795416
Author: Vineet Gupta <vgupta@synopsys.com>
Date:   Fri Feb 28 16:13:44 2014 +0800

    ARC: [SMP] ISS SMP extension bitrot
    
    * Move extension specific code out of common SMP code
    * Don't enable it by default for SMP
    
    Signed-off-by: Vineet Gupta <vgupta@synopsys.com>

diff --git a/arch/arc/include/asm/irq.h b/arch/arc/include/asm/irq.h
index 291a70db68b8..781f57f25bd8 100644
--- a/arch/arc/include/asm/irq.h
+++ b/arch/arc/include/asm/irq.h
@@ -19,8 +19,6 @@
 #include <asm-generic/irq.h>
 
 extern void arc_init_IRQ(void);
-extern int get_hw_config_num_irq(void);
-
 void arc_local_timer_setup(unsigned int cpu);
 
 #endif

commit 4782f7f9aeba4dfd383c532e96bebf83ce0b9748
Author: Chen Gang <gang.chen@asianux.com>
Date:   Wed Oct 23 11:02:51 2013 +0800

    arc: remove '__init' for get_hw_config_num_irq()
    
    get_hw_config_num_irq() may be called by normal iss_model_init_smp()
    which is a function pointer for 'init_smp' which may be called by
    first_lines_of_secondary() which also need be normal too.
    
    The related warning (with allmodconfig):
    
        MODPOST vmlinux.o
      WARNING: vmlinux.o(.text+0x5814): Section mismatch in reference from the function iss_model_init_smp() to the function .init.text:get_hw_config_num_irq()
      The function iss_model_init_smp() references
      the function __init get_hw_config_num_irq().
      This is often because iss_model_init_smp lacks a __init
      annotation or the annotation of get_hw_config_num_irq is wrong.
    
    Signed-off-by: Chen Gang <gang.chen@asianux.com>

diff --git a/arch/arc/include/asm/irq.h b/arch/arc/include/asm/irq.h
index 548207f073da..291a70db68b8 100644
--- a/arch/arc/include/asm/irq.h
+++ b/arch/arc/include/asm/irq.h
@@ -19,7 +19,7 @@
 #include <asm-generic/irq.h>
 
 extern void arc_init_IRQ(void);
-extern int __init get_hw_config_num_irq(void);
+extern int get_hw_config_num_irq(void);
 
 void arc_local_timer_setup(unsigned int cpu);
 

commit ef3a661af69046df74beb0ddfa27204aad316385
Author: Chen Gang <gang.chen@asianux.com>
Date:   Wed Oct 23 10:12:05 2013 +0800

    arc: remove '__init' for setup_processor() and arc_init_IRQ()
    
    They haven't '__init' in definition, but has '__init' in declaration.
    And normal function start_kernel_secondary() may call setup_processor()
    which will call arc_init_IRQ().
    
    So need remove '__init' for both of them. The related warning (with
    allmodconfig):
    
        MODPOST vmlinux.o
      WARNING: vmlinux.o(.text+0x3084): Section mismatch in reference from the function start_kernel_secondary() to the function .init.text:setup_processor()
      The function start_kernel_secondary() references
      the function __init setup_processor().
      This is often because start_kernel_secondary lacks a __init
      annotation or the annotation of setup_processor is wrong.
    
    Signed-off-by: Chen Gang <gang.chen@asianux.com>

diff --git a/arch/arc/include/asm/irq.h b/arch/arc/include/asm/irq.h
index c0a72105ee0b..548207f073da 100644
--- a/arch/arc/include/asm/irq.h
+++ b/arch/arc/include/asm/irq.h
@@ -18,7 +18,7 @@
 
 #include <asm-generic/irq.h>
 
-extern void __init arc_init_IRQ(void);
+extern void arc_init_IRQ(void);
 extern int __init get_hw_config_num_irq(void);
 
 void arc_local_timer_setup(unsigned int cpu);

commit ce7599567e27eabc1003e35b6f05579268dafecd
Author: Paul Gortmaker <paul.gortmaker@windriver.com>
Date:   Mon Jun 24 15:30:15 2013 -0400

    arc: delete __cpuinit usage from all arc files
    
    The __cpuinit type of throwaway sections might have made sense
    some time ago when RAM was more constrained, but now the savings
    do not offset the cost and complications.  For example, the fix in
    commit 5e427ec2d0 ("x86: Fix bit corruption at CPU resume time")
    is a good example of the nasty type of bugs that can be created
    with improper use of the various __init prefixes.
    
    After a discussion on LKML[1] it was decided that cpuinit should go
    the way of devinit and be phased out.  Once all the users are gone,
    we can then finally remove the macros themselves from linux/init.h.
    
    Note that some harmless section mismatch warnings may result, since
    notify_cpu_starting() and cpu_up() are arch independent (kernel/cpu.c)
    are flagged as __cpuinit  -- so if we remove the __cpuinit from
    arch specific callers, we will also get section mismatch warnings.
    As an intermediate step, we intend to turn the linux/init.h cpuinit
    content into no-ops as early as possible, since that will get rid
    of these warnings.  In any case, they are temporary and harmless.
    
    This removes all the arch/arc uses of the __cpuinit macros from
    all C files.  Currently arc does not have any __CPUINIT used in
    assembly files.
    
    [1] https://lkml.org/lkml/2013/5/20/589
    
    Cc: Vineet Gupta <vgupta@synopsys.com>
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>
    Signed-off-by: Vineet Gupta <vgupta@synopsys.com>

diff --git a/arch/arc/include/asm/irq.h b/arch/arc/include/asm/irq.h
index 57898a17eb82..c0a72105ee0b 100644
--- a/arch/arc/include/asm/irq.h
+++ b/arch/arc/include/asm/irq.h
@@ -21,6 +21,6 @@
 extern void __init arc_init_IRQ(void);
 extern int __init get_hw_config_num_irq(void);
 
-void __cpuinit arc_local_timer_setup(unsigned int cpu);
+void arc_local_timer_setup(unsigned int cpu);
 
 #endif

commit a37cdacc9bc339097a2c206aad449ca307d7fd63
Author: Christian Ruppert <christian.ruppert@abilis.com>
Date:   Thu Apr 11 15:19:39 2013 +0200

    ARC: Prepare interrupt code for external controllers
    
    This patch adds some room for CPU-external interrupt controllers in the
    Linux interrupt space. Until now, only the 32 CPU internal interrupt lines
    were supported which does not allow for external interrupt controllers such
    as GPIO modules etc.
    
    Signed-off-by: Christian Ruppert <christian.ruppert@abilis.com>
    Signed-off-by: Pierrick Hascoet <pierrick.hascoet@abilis.com>
    Signed-off-by: Vineet Gupta <vgupta@synopsys.com>

diff --git a/arch/arc/include/asm/irq.h b/arch/arc/include/asm/irq.h
index 4c588f9820cf..57898a17eb82 100644
--- a/arch/arc/include/asm/irq.h
+++ b/arch/arc/include/asm/irq.h
@@ -9,7 +9,8 @@
 #ifndef __ASM_ARC_IRQ_H
 #define __ASM_ARC_IRQ_H
 
-#define NR_IRQS		32
+#define NR_CPU_IRQS	32  /* number of interrupt lines of ARC770 CPU */
+#define NR_IRQS		128 /* allow some CPU external IRQ handling */
 
 /* Platform Independent IRQs */
 #define TIMER0_IRQ      3

commit decae9d3e87b5454b3b190d8e00b063175a3a091
Author: Vineet Gupta <vgupta@synopsys.com>
Date:   Fri Jan 18 15:12:26 2013 +0530

    ARC: [Review] Multi-platform image #5: NR_IRQS defined by ARC core
    
    For now this will suffice for all platforms, later exotic ones needs to
    get this from DeviceTree
    
    Signed-off-by: Vineet Gupta <vgupta@synopsys.com>
    Cc: Arnd Bergmann <arnd@arndb.de>

diff --git a/arch/arc/include/asm/irq.h b/arch/arc/include/asm/irq.h
index 20aaab8971ad..4c588f9820cf 100644
--- a/arch/arc/include/asm/irq.h
+++ b/arch/arc/include/asm/irq.h
@@ -9,6 +9,8 @@
 #ifndef __ASM_ARC_IRQ_H
 #define __ASM_ARC_IRQ_H
 
+#define NR_IRQS		32
+
 /* Platform Independent IRQs */
 #define TIMER0_IRQ      3
 #define TIMER1_IRQ      4

commit e97ff121ae61ba80e41b2cc3bd6dfe9886d22505
Author: Vineet Gupta <vgupta@synopsys.com>
Date:   Fri Jan 18 15:12:26 2013 +0530

    ARC: [Review] Multi-platform image #4: Isolate platform headers
    
    -Top level ARC makefile removes -I for platform headers
    -asm/irq.h no longer includes plat/irq.h
    
    -platform makefile adds -I for it's specfic platform headers
    -platform code to directly include it's plat/irq.h
    
    -Linker script needed plat/memmap.h for CCM info, already in .config
    
    Signed-off-by: Vineet Gupta <vgupta@synopsys.com>
    Cc: Arnd Bergmann <arnd@arndb.de>
    Acked-by: Arnd Bergmann <arnd@arndb.de>

diff --git a/arch/arc/include/asm/irq.h b/arch/arc/include/asm/irq.h
index f1b318d92877..20aaab8971ad 100644
--- a/arch/arc/include/asm/irq.h
+++ b/arch/arc/include/asm/irq.h
@@ -13,7 +13,6 @@
 #define TIMER0_IRQ      3
 #define TIMER1_IRQ      4
 
-#include <plat/irq.h>		/* Board Specific IRQ assignments */
 #include <asm-generic/irq.h>
 
 extern void __init arc_init_IRQ(void);

commit 877768c84d6ca8f7dedafff0e44615a12e82f8f4
Author: Vineet Gupta <vgupta@synopsys.com>
Date:   Wed Jan 23 16:32:48 2013 +0530

    ARC: [Review] Multi-platform image #3: switch to board callback
    
    -platform API is retired and instead callbacks are used
    
    Signed-off-by: Vineet Gupta <vgupta@synopsys.com>
    Cc: Arnd Bergmann <arnd@arndb.de>
    Acked-by: Arnd Bergmann <arnd@arndb.de>

diff --git a/arch/arc/include/asm/irq.h b/arch/arc/include/asm/irq.h
index c91b2e4344a1..f1b318d92877 100644
--- a/arch/arc/include/asm/irq.h
+++ b/arch/arc/include/asm/irq.h
@@ -17,7 +17,6 @@
 #include <asm-generic/irq.h>
 
 extern void __init arc_init_IRQ(void);
-extern void __init plat_init_IRQ(void);
 extern int __init get_hw_config_num_irq(void);
 
 void __cpuinit arc_local_timer_setup(unsigned int cpu);

commit ee36d1722112f33725ec1a7fc02f6c46e630fd27
Author: Vineet Gupta <vgupta@synopsys.com>
Date:   Fri Jan 18 15:12:20 2013 +0530

    ARC: [plat-arcfpga] Static platform device for CONFIG_SERIAL_ARC
    
    N.B. This is old style of hardcoding platform device specific info
    in code and it's instantiation thererof using platform_add_devices().
    Subsequent patches replace this with DeviceTree based runtime probe.
    
    This patch has been retained just as an example of "don't-do-this" for
    newer kernel ports.
    
    Signed-off-by: Vineet Gupta <vgupta@synopsys.com>
    Cc: Arnd Bergmann <arnd@arndb.de>

diff --git a/arch/arc/include/asm/irq.h b/arch/arc/include/asm/irq.h
index 514b30287445..c91b2e4344a1 100644
--- a/arch/arc/include/asm/irq.h
+++ b/arch/arc/include/asm/irq.h
@@ -13,6 +13,7 @@
 #define TIMER0_IRQ      3
 #define TIMER1_IRQ      4
 
+#include <plat/irq.h>		/* Board Specific IRQ assignments */
 #include <asm-generic/irq.h>
 
 extern void __init arc_init_IRQ(void);

commit d8005e6b95268cbb50db3773d5f180c32a9434fe
Author: Vineet Gupta <vgupta@synopsys.com>
Date:   Fri Jan 18 15:12:18 2013 +0530

    ARC: Timers/counters/delay management
    
    ARC700 includes 2 in-core 32bit timers TIMER0 and TIMER1.
    Both have exactly same capabilies.
    
    * programmable to count from TIMER<n>_CNT to TIMER<n>_LIMIT
    * for count 0 and LIMIT ~1, provides a free-running counter by
        auto-wrapping when limit is reached.
    * optionally interrupt when LIMIT is reached (oneshot event semantics)
    * rearming the interrupt provides periodic semantics
    * run at CPU clk
    
    ARC Linux uses TIMER0 for clockevent (periodic/oneshot) and TIMER1 for
    clocksource (free-running clock).
    
    Newer cores provide RTSC insn which gives a 64bit cpu clk snapshot hence
    is more apt for clocksource when available.
    
    SMP poses a bit of challenge for global timekeeping clocksource /
    sched_clock() backend:
     -TIMER1 based local clocks are out-of-sync hence can't be used
      (thus we default to jiffies based cs as well as sched_clock() one/both
      of which platform can override with it's specific hardware assist)
     -RTSC is only allowed in SMP if it's cross-core-sync (Kconfig glue
      ensures that) and thus usable for both requirements.
    
    Signed-off-by: Vineet Gupta <vgupta@synopsys.com>
    Cc: Thomas Gleixner <tglx@linutronix.de>

diff --git a/arch/arc/include/asm/irq.h b/arch/arc/include/asm/irq.h
index ca4aeba1eed3..514b30287445 100644
--- a/arch/arc/include/asm/irq.h
+++ b/arch/arc/include/asm/irq.h
@@ -19,4 +19,6 @@ extern void __init arc_init_IRQ(void);
 extern void __init plat_init_IRQ(void);
 extern int __init get_hw_config_num_irq(void);
 
+void __cpuinit arc_local_timer_setup(unsigned int cpu);
+
 #endif

commit bacdf4809afade180a8f2171adb4cf7ec715d139
Author: Vineet Gupta <vgupta@synopsys.com>
Date:   Fri Jan 18 15:12:18 2013 +0530

    ARC: Interrupt Handling
    
    This contains:
    -bootup arch IRQ init: init_IRQ(), arc_init_IRQ()
    -generic IRQ subsystem glue: arch_do_IRQ()
    -basic IRQ chip setup for in-core intc
    
    Signed-off-by: Vineet Gupta <vgupta@synopsys.com>
    Cc: Thomas Gleixner <tglx@linutronix.de>

diff --git a/arch/arc/include/asm/irq.h b/arch/arc/include/asm/irq.h
new file mode 100644
index 000000000000..ca4aeba1eed3
--- /dev/null
+++ b/arch/arc/include/asm/irq.h
@@ -0,0 +1,22 @@
+/*
+ * Copyright (C) 2004, 2007-2010, 2011-2012 Synopsys, Inc. (www.synopsys.com)
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation.
+ */
+
+#ifndef __ASM_ARC_IRQ_H
+#define __ASM_ARC_IRQ_H
+
+/* Platform Independent IRQs */
+#define TIMER0_IRQ      3
+#define TIMER1_IRQ      4
+
+#include <asm-generic/irq.h>
+
+extern void __init arc_init_IRQ(void);
+extern void __init plat_init_IRQ(void);
+extern int __init get_hw_config_num_irq(void);
+
+#endif
