commit b24413180f5600bcb3bb70fbed5cf186b60864bd
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Wed Nov 1 15:07:57 2017 +0100

    License cleanup: add SPDX GPL-2.0 license identifier to files with no license
    
    Many source files in the tree are missing licensing information, which
    makes it harder for compliance tools to determine the correct license.
    
    By default all files without license information are under the default
    license of the kernel, which is GPL version 2.
    
    Update the files which contain no license information with the 'GPL-2.0'
    SPDX license identifier.  The SPDX identifier is a legally binding
    shorthand, which can be used instead of the full boiler plate text.
    
    This patch is based on work done by Thomas Gleixner and Kate Stewart and
    Philippe Ombredanne.
    
    How this work was done:
    
    Patches were generated and checked against linux-4.14-rc6 for a subset of
    the use cases:
     - file had no licensing information it it.
     - file was a */uapi/* one with no licensing information in it,
     - file was a */uapi/* one with existing licensing information,
    
    Further patches will be generated in subsequent months to fix up cases
    where non-standard license headers were used, and references to license
    had to be inferred by heuristics based on keywords.
    
    The analysis to determine which SPDX License Identifier to be applied to
    a file was done in a spreadsheet of side by side results from of the
    output of two independent scanners (ScanCode & Windriver) producing SPDX
    tag:value files created by Philippe Ombredanne.  Philippe prepared the
    base worksheet, and did an initial spot review of a few 1000 files.
    
    The 4.13 kernel was the starting point of the analysis with 60,537 files
    assessed.  Kate Stewart did a file by file comparison of the scanner
    results in the spreadsheet to determine which SPDX license identifier(s)
    to be applied to the file. She confirmed any determination that was not
    immediately clear with lawyers working with the Linux Foundation.
    
    Criteria used to select files for SPDX license identifier tagging was:
     - Files considered eligible had to be source code files.
     - Make and config files were included as candidates if they contained >5
       lines of source
     - File already had some variant of a license header in it (even if <5
       lines).
    
    All documentation files were explicitly excluded.
    
    The following heuristics were used to determine which SPDX license
    identifiers to apply.
    
     - when both scanners couldn't find any license traces, file was
       considered to have no license information in it, and the top level
       COPYING file license applied.
    
       For non */uapi/* files that summary was:
    
       SPDX license identifier                            # files
       ---------------------------------------------------|-------
       GPL-2.0                                              11139
    
       and resulted in the first patch in this series.
    
       If that file was a */uapi/* path one, it was "GPL-2.0 WITH
       Linux-syscall-note" otherwise it was "GPL-2.0".  Results of that was:
    
       SPDX license identifier                            # files
       ---------------------------------------------------|-------
       GPL-2.0 WITH Linux-syscall-note                        930
    
       and resulted in the second patch in this series.
    
     - if a file had some form of licensing information in it, and was one
       of the */uapi/* ones, it was denoted with the Linux-syscall-note if
       any GPL family license was found in the file or had no licensing in
       it (per prior point).  Results summary:
    
       SPDX license identifier                            # files
       ---------------------------------------------------|------
       GPL-2.0 WITH Linux-syscall-note                       270
       GPL-2.0+ WITH Linux-syscall-note                      169
       ((GPL-2.0 WITH Linux-syscall-note) OR BSD-2-Clause)    21
       ((GPL-2.0 WITH Linux-syscall-note) OR BSD-3-Clause)    17
       LGPL-2.1+ WITH Linux-syscall-note                      15
       GPL-1.0+ WITH Linux-syscall-note                       14
       ((GPL-2.0+ WITH Linux-syscall-note) OR BSD-3-Clause)    5
       LGPL-2.0+ WITH Linux-syscall-note                       4
       LGPL-2.1 WITH Linux-syscall-note                        3
       ((GPL-2.0 WITH Linux-syscall-note) OR MIT)              3
       ((GPL-2.0 WITH Linux-syscall-note) AND MIT)             1
    
       and that resulted in the third patch in this series.
    
     - when the two scanners agreed on the detected license(s), that became
       the concluded license(s).
    
     - when there was disagreement between the two scanners (one detected a
       license but the other didn't, or they both detected different
       licenses) a manual inspection of the file occurred.
    
     - In most cases a manual inspection of the information in the file
       resulted in a clear resolution of the license that should apply (and
       which scanner probably needed to revisit its heuristics).
    
     - When it was not immediately clear, the license identifier was
       confirmed with lawyers working with the Linux Foundation.
    
     - If there was any question as to the appropriate license identifier,
       the file was flagged for further research and to be revisited later
       in time.
    
    In total, over 70 hours of logged manual review was done on the
    spreadsheet to determine the SPDX license identifiers to apply to the
    source files by Kate, Philippe, Thomas and, in some cases, confirmation
    by lawyers working with the Linux Foundation.
    
    Kate also obtained a third independent scan of the 4.13 code base from
    FOSSology, and compared selected files where the other two scanners
    disagreed against that SPDX file, to see if there was new insights.  The
    Windriver scanner is based on an older version of FOSSology in part, so
    they are related.
    
    Thomas did random spot checks in about 500 files from the spreadsheets
    for the uapi headers and agreed with SPDX license identifier in the
    files he inspected. For the non-uapi files Thomas did random spot checks
    in about 15000 files.
    
    In initial set of patches against 4.14-rc6, 3 files were found to have
    copy/paste license identifier errors, and have been fixed to reflect the
    correct identifier.
    
    Additionally Philippe spent 10 hours this week doing a detailed manual
    inspection and review of the 12,461 patched files from the initial patch
    version early this week with:
     - a full scancode scan run, collecting the matched texts, detected
       license ids and scores
     - reviewing anything where there was a license detected (about 500+
       files) to ensure that the applied SPDX license was correct
     - reviewing anything where there was no detection but the patch license
       was not GPL-2.0 WITH Linux-syscall-note to ensure that the applied
       SPDX license was correct
    
    This produced a worksheet with 20 files needing minor correction.  This
    worksheet was then exported into 3 different .csv files for the
    different types of files to be modified.
    
    These .csv files were then reviewed by Greg.  Thomas wrote a script to
    parse the csv files and add the proper SPDX tag to the file, in the
    format that the file expected.  This script was further refined by Greg
    based on the output to detect more types of files automatically and to
    distinguish between header and source .c files (which need different
    comment types.)  Finally Greg ran the script using the .csv files to
    generate the patches.
    
    Reviewed-by: Kate Stewart <kstewart@linuxfoundation.org>
    Reviewed-by: Philippe Ombredanne <pombredanne@nexb.com>
    Reviewed-by: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/arch/m68k/include/asm/m54xxsim.h b/arch/m68k/include/asm/m54xxsim.h
index 7758d0a1a84d..2a3305f6fac6 100644
--- a/arch/m68k/include/asm/m54xxsim.h
+++ b/arch/m68k/include/asm/m54xxsim.h
@@ -1,3 +1,4 @@
+/* SPDX-License-Identifier: GPL-2.0 */
 /*
  *	m54xxsim.h -- ColdFire 547x/548x System Integration Unit support.
  */

commit 2d24b532f95b8b1b61bf670ef5bdee52bcf59640
Author: Steven King <sfking@fdwdc.com>
Date:   Mon Jun 30 09:53:19 2014 -0700

    m68knommu: platform support for i2c devices on ColdFire SoC
    
    These changes based on work by Steven King <sfking@fdwdc.com> to support
    the i2c hardware modules on ColdFire SoC family devices.
    
    This is the per SoC hardware support. Contains a common platform device
    setup. Each of the SoC family members tends to have some minor local
    setup required to initialize the module. But all ColdFire family members
    use the same i2c hardware module.
    
    This i2c hardware module is the same as used in the Freescale iMX ARM
    based family of SoC devices. Steven's original patches were based on using
    a new and different i2c-coldfire.c driver. But this is not neccessary as
    we can use the existing Linux i2c-imx.c driver with no change required to
    it. And this patch is now based on using the existing i2c-imx driver.
    
    This patch only contains the ColdFire platform changes.
    
    Signed-off-by: Greg Ungerer <gerg@uclinux.org>
    Tested-by: Angelo Dureghello <angelo@sysam.it>

diff --git a/arch/m68k/include/asm/m54xxsim.h b/arch/m68k/include/asm/m54xxsim.h
index 73d937ff36eb..7758d0a1a84d 100644
--- a/arch/m68k/include/asm/m54xxsim.h
+++ b/arch/m68k/include/asm/m54xxsim.h
@@ -45,6 +45,7 @@
  */
 #define MCF_IRQ_TIMER		(MCFINT_VECBASE + 54)	/* Slice Timer 0 */
 #define MCF_IRQ_PROFILER	(MCFINT_VECBASE + 53)	/* Slice Timer 1 */
+#define MCF_IRQ_I2C0		(MCFINT_VECBASE + 40)
 #define MCF_IRQ_UART0		(MCFINT_VECBASE + 35)
 #define MCF_IRQ_UART1		(MCFINT_VECBASE + 34)
 #define MCF_IRQ_UART2		(MCFINT_VECBASE + 33)
@@ -107,4 +108,14 @@
 #define MCF_PAR_PSC_RTS_RTS	(0x30)
 #define MCF_PAR_PSC_CANRX	(0x40)
 
+#define MCF_PAR_FECI2CIRQ	(MCF_MBAR + 0x00000a44)	/* FEC/I2C/IRQ */
+#define MCF_PAR_FECI2CIRQ_SDA	(1 << 3)
+#define MCF_PAR_FECI2CIRQ_SCL	(1 << 2)
+
+/*
+ * I2C module.
+ */
+#define MCFI2C_BASE0		(MCF_MBAR + 0x8f00)
+#define MCFI2C_SIZE0		0x40
+
 #endif	/* m54xxsim_h */

commit 8cf4a973b47d69227b8ad31d41e4054c59de4dcc
Author: Greg Ungerer <gerg@linux-m68k.org>
Date:   Fri Aug 26 15:59:30 2016 +1000

    m68k: generalize io memory region setup for ColdFire ACR registers
    
    The ACR registers of the ColdFire define at a macro level what regions
    of the addresses space should have caching or other attribute types applied.
    
    Currently for the MMU enabled setups we map the interal IO peripheral addres
    space as uncachable based on the define for the MBAR address (CONFIG_MBAR).
    Not all ColdFire SoC use a programmable MBAR register address. Some parts
    have fixed addressing for their internal peripheral registers.
    
    Generalize the way we get the internal peripheral base address so all types
    can be accomodated in the ACR definitions. Each ColdFire SoC type now sets
    its IO memory base and size definitions (which may be based on MBAR) which
    are then used in the ACR definitions.
    
    Signed-off-by: Greg Ungerer <gerg@linux-m68k.org>

diff --git a/arch/m68k/include/asm/m54xxsim.h b/arch/m68k/include/asm/m54xxsim.h
index 7dd6cc4bcd72..73d937ff36eb 100644
--- a/arch/m68k/include/asm/m54xxsim.h
+++ b/arch/m68k/include/asm/m54xxsim.h
@@ -10,6 +10,8 @@
 #define	MCF_BUSCLK		(MCF_CLK / 2)
 #define	MACHINE			MACH_M54XX
 #define	FPUTYPE			FPU_COLDFIRE
+#define	IOMEMBASE		MCF_MBAR
+#define	IOMEMSIZE		0x01000000
 
 #include <asm/m54xxacr.h>
 

commit cbd5b982f6a1540ebb0144774d64381e7b2d39fd
Author: Greg Ungerer <gerg@linux-m68k.org>
Date:   Thu Aug 25 23:12:22 2016 +1000

    m68k: report correct FPU type on ColdFire MMU platforms
    
    Not all ColdFire SoC parts that have an MMU also have an FPU - so set
    an FPU type (via m68k_fputype) appropriate for the configured platform.
    
    With this set correctly /proc/cpuinfo will report FPU "none" on devices
    that don't have one. And kernel code paths that initialize FPU hardware
    will now only execute if an FPU is actually present.
    
    Signed-off-by: Greg Ungerer <gerg@linux-m68k.org>

diff --git a/arch/m68k/include/asm/m54xxsim.h b/arch/m68k/include/asm/m54xxsim.h
index cde03902da24..7dd6cc4bcd72 100644
--- a/arch/m68k/include/asm/m54xxsim.h
+++ b/arch/m68k/include/asm/m54xxsim.h
@@ -9,6 +9,7 @@
 #define	CPU_INSTR_PER_JIFFY	2
 #define	MCF_BUSCLK		(MCF_CLK / 2)
 #define	MACHINE			MACH_M54XX
+#define	FPUTYPE			FPU_COLDFIRE
 
 #include <asm/m54xxacr.h>
 

commit 81d33350bab8b6889ac0f9c98bce58128be1c72d
Author: Greg Ungerer <gerg@linux-m68k.org>
Date:   Thu Aug 25 23:10:59 2016 +1000

    m68k: set appropriate machine type for m5411x SoC platforms
    
    Create a new machine type for platforms based around the ColdFire 5441x
    SoC family. Set that machine type on startup when building for this
    platform type.
    
    Currently the ColdFire head.S hard codes a M54xx machine type at startup -
    since that is the only platform type currently supported with MMU enabled.
    The m5441x has an MMU and this change forms part of the support required
    to run it with the MMU enabled.
    
    Signed-off-by: Greg Ungerer <gerg@linux-m68k.org>

diff --git a/arch/m68k/include/asm/m54xxsim.h b/arch/m68k/include/asm/m54xxsim.h
index a5fbd17ab0a5..cde03902da24 100644
--- a/arch/m68k/include/asm/m54xxsim.h
+++ b/arch/m68k/include/asm/m54xxsim.h
@@ -8,6 +8,7 @@
 #define	CPU_NAME		"COLDFIRE(m54xx)"
 #define	CPU_INSTR_PER_JIFFY	2
 #define	MCF_BUSCLK		(MCF_CLK / 2)
+#define	MACHINE			MACH_M54XX
 
 #include <asm/m54xxacr.h>
 

commit 83c6bdb827c9422fe6e02130d9546800143304c1
Author: Steven King <sfking@fdwdc.com>
Date:   Wed May 21 16:00:33 2014 -0700

    m68knommu: Implement gpio support for m54xx.
    
    Singed-off-by: Steven King <sfking@fdwdc.com>
    Signed-off-by: Greg Ungerer <gerg@uclinux.org>

diff --git a/arch/m68k/include/asm/m54xxsim.h b/arch/m68k/include/asm/m54xxsim.h
index d3bd83887429..a5fbd17ab0a5 100644
--- a/arch/m68k/include/asm/m54xxsim.h
+++ b/arch/m68k/include/asm/m54xxsim.h
@@ -55,9 +55,15 @@
 /*
  *	Generic GPIO support
  */
-#define MCFGPIO_PIN_MAX		0	/* I am too lazy to count */
-#define MCFGPIO_IRQ_MAX		-1
-#define MCFGPIO_IRQ_VECBASE	-1
+#define MCFGPIO_PODR		(MCF_MBAR + 0xA00)
+#define MCFGPIO_PDDR		(MCF_MBAR + 0xA10)
+#define MCFGPIO_PPDR		(MCF_MBAR + 0xA20)
+#define MCFGPIO_SETR		(MCF_MBAR + 0xA20)
+#define MCFGPIO_CLRR		(MCF_MBAR + 0xA30)
+
+#define MCFGPIO_PIN_MAX		136	/* 128 gpio + 8 eport */
+#define MCFGPIO_IRQ_MAX		8
+#define MCFGPIO_IRQ_VECBASE	MCFINT_VECBASE
 
 /*
  *	EDGE Port support.

commit 632306f2454bf46c71d4fb7a499916d942b22a32
Author: Greg Ungerer <gerg@uclinux.org>
Date:   Tue Sep 18 14:34:04 2012 +1000

    m68knommu: clean up Pin Assignment definitions for the 54xx ColdFire CPU
    
    The Pin Assignment register definitions for the ColdFire 54xx CPU family are
    inconsistently named and defined compared to the other ColdFire part
    definitions. Rename them with the same prefix as used on other parts,
    MCFGPIO_PAR_, and make their definitions include the MCF_MBAR periphperal
    region offset.
    
    Signed-off-by: Greg Ungerer <gerg@uclinux.org>

diff --git a/arch/m68k/include/asm/m54xxsim.h b/arch/m68k/include/asm/m54xxsim.h
index d6a50799ff27..d3bd83887429 100644
--- a/arch/m68k/include/asm/m54xxsim.h
+++ b/arch/m68k/include/asm/m54xxsim.h
@@ -70,15 +70,25 @@
 #define	MCFEPORT_EPFR		(MCF_MBAR + 0xf0c)	/* Flags */
 
 /*
- *	Some PSC related definitions
+ *	Pin Assignment register definitions
  */
-#define MCF_PAR_PSC(x)		(0x000A4F-((x)&0x3))
+#define MCFGPIO_PAR_FBCTL	(MCF_MBAR + 0xA40)
+#define MCFGPIO_PAR_FBCS	(MCF_MBAR + 0xA42)
+#define MCFGPIO_PAR_DMA		(MCF_MBAR + 0xA43)
+#define MCFGPIO_PAR_FECI2CIRQ	(MCF_MBAR + 0xA44)
+#define MCFGPIO_PAR_PCIBG	(MCF_MBAR + 0xA48)	/* PCI bus grant */
+#define MCFGPIO_PAR_PCIBR	(MCF_MBAR + 0xA4A)	/* PCI */
+#define MCFGPIO_PAR_PSC0	(MCF_MBAR + 0xA4F)
+#define MCFGPIO_PAR_PSC1	(MCF_MBAR + 0xA4E)
+#define MCFGPIO_PAR_PSC2	(MCF_MBAR + 0xA4D)
+#define MCFGPIO_PAR_PSC3	(MCF_MBAR + 0xA4C)
+#define MCFGPIO_PAR_DSPI	(MCF_MBAR + 0xA50)
+#define MCFGPIO_PAR_TIMER	(MCF_MBAR + 0xA52)
+
 #define MCF_PAR_SDA		(0x0008)
 #define MCF_PAR_SCL		(0x0004)
 #define MCF_PAR_PSC_TXD		(0x04)
 #define MCF_PAR_PSC_RXD		(0x08)
-#define MCF_PAR_PSC_RTS(x)	(((x)&0x03)<<4)
-#define MCF_PAR_PSC_CTS(x)	(((x)&0x03)<<6)
 #define MCF_PAR_PSC_CTS_GPIO	(0x00)
 #define MCF_PAR_PSC_CTS_BCLK	(0x80)
 #define MCF_PAR_PSC_CTS_CTS	(0xC0)
@@ -87,7 +97,4 @@
 #define MCF_PAR_PSC_RTS_RTS	(0x30)
 #define MCF_PAR_PSC_CANRX	(0x40)
 
-#define MCF_PAR_PCIBG		(CONFIG_MBAR + 0xa48)	/* PCI bus grant */
-#define MCF_PAR_PCIBR		(CONFIG_MBAR + 0xa4a)	/* PCI */
-
 #endif	/* m54xxsim_h */

commit f2f41c68eabfb32574f9088135480618206dd432
Author: Greg Ungerer <gerg@uclinux.org>
Date:   Mon Sep 17 16:51:20 2012 +1000

    m68knommu: move ColdFire slice timer address defiens to 54xx header
    
    Move the base address defines of the ColdFire 54xx CPU slice timers into the
    54xx specific header (m54xxsim.h). They are CPU specific, and belong with the
    CPU specific defines. Also make them relative to the MBAR peripheral region,
    making the define the absolute address.
    
    Signed-off-by: Greg Ungerer <gerg@uclinux.org>

diff --git a/arch/m68k/include/asm/m54xxsim.h b/arch/m68k/include/asm/m54xxsim.h
index d3c5e0dbdadf..d6a50799ff27 100644
--- a/arch/m68k/include/asm/m54xxsim.h
+++ b/arch/m68k/include/asm/m54xxsim.h
@@ -46,6 +46,12 @@
 #define MCF_IRQ_UART2		(MCFINT_VECBASE + 33)
 #define MCF_IRQ_UART3		(MCFINT_VECBASE + 32)
 
+/*
+ *	Slice Timer support.
+ */
+#define MCFSLT_TIMER0		(MCF_MBAR + 0x900)	/* Base addr TIMER0 */
+#define MCFSLT_TIMER1		(MCF_MBAR + 0x910)	/* Base addr TIMER1 */
+
 /*
  *	Generic GPIO support
  */

commit 32be2acc7caa9c9c1157002c4c77063e0084e774
Author: Greg Ungerer <gerg@uclinux.org>
Date:   Tue Jul 10 15:34:27 2012 +1000

    m68k: add PCI bus support definitions for the ColdFire M54xx SoC family
    
    Add all the required definitoins to support the ColdFire M54xx SoC PCI
    hardware unit. These are strait out of the MCF5475 Reference Manual.
    
    Signed-off-by: Greg Ungerer <gerg@uclinux.org>

diff --git a/arch/m68k/include/asm/m54xxsim.h b/arch/m68k/include/asm/m54xxsim.h
index ae56b8848a9d..d3c5e0dbdadf 100644
--- a/arch/m68k/include/asm/m54xxsim.h
+++ b/arch/m68k/include/asm/m54xxsim.h
@@ -81,4 +81,7 @@
 #define MCF_PAR_PSC_RTS_RTS	(0x30)
 #define MCF_PAR_PSC_CANRX	(0x40)
 
+#define MCF_PAR_PCIBG		(CONFIG_MBAR + 0xa48)	/* PCI bus grant */
+#define MCF_PAR_PCIBR		(CONFIG_MBAR + 0xa4a)	/* PCI */
+
 #endif	/* m54xxsim_h */

commit bbbeeaf2f74b634c95af3492e4958e752966eaa5
Author: Greg Ungerer <gerg@uclinux.org>
Date:   Sat Dec 24 00:46:37 2011 +1000

    m68knommu: make 54xx UART platform addressing consistent
    
    If we make all UART addressing consistent across all ColdFire family members
    then we will be able to remove the duplicated plaform data and use a single
    setup for all.
    
    So modify the ColdFire 54xx UART addressing so that:
    
    . UARTs are numbered from 0 up
    . base addresses are absolute (not relative to MBAR peripheral register)
    . use a common name for IRQs used
    
    Signed-off-by: Greg Ungerer <gerg@uclinux.org>

diff --git a/arch/m68k/include/asm/m54xxsim.h b/arch/m68k/include/asm/m54xxsim.h
index 1ed8bfb02772..ae56b8848a9d 100644
--- a/arch/m68k/include/asm/m54xxsim.h
+++ b/arch/m68k/include/asm/m54xxsim.h
@@ -31,16 +31,20 @@
 /*
  *	UART module.
  */
-#define MCFUART_BASE1		0x8600		/* Base address of UART1 */
-#define MCFUART_BASE2		0x8700		/* Base address of UART2 */
-#define MCFUART_BASE3		0x8800		/* Base address of UART3 */
-#define MCFUART_BASE4		0x8900		/* Base address of UART4 */
+#define MCFUART_BASE0		(MCF_MBAR + 0x8600)	/* Base address UART0 */
+#define MCFUART_BASE1		(MCF_MBAR + 0x8700)	/* Base address UART1 */
+#define MCFUART_BASE2		(MCF_MBAR + 0x8800)	/* Base address UART2 */
+#define MCFUART_BASE3		(MCF_MBAR + 0x8900)	/* Base address UART3 */
 
 /*
  *	Define system peripheral IRQ usage.
  */
-#define MCF_IRQ_TIMER		(64 + 54)	/* Slice Timer 0 */
-#define MCF_IRQ_PROFILER	(64 + 53)	/* Slice Timer 1 */
+#define MCF_IRQ_TIMER		(MCFINT_VECBASE + 54)	/* Slice Timer 0 */
+#define MCF_IRQ_PROFILER	(MCFINT_VECBASE + 53)	/* Slice Timer 1 */
+#define MCF_IRQ_UART0		(MCFINT_VECBASE + 35)
+#define MCF_IRQ_UART1		(MCFINT_VECBASE + 34)
+#define MCF_IRQ_UART2		(MCFINT_VECBASE + 33)
+#define MCF_IRQ_UART3		(MCFINT_VECBASE + 32)
 
 /*
  *	Generic GPIO support

commit 57b481436f2a5580054784af8f044d2e3f602b53
Author: Greg Ungerer <gerg@uclinux.org>
Date:   Fri Mar 11 17:06:58 2011 +1000

    m68knommu: external interrupt support to ColdFire intc-2 controller
    
    The EDGE Port module of some ColdFire parts using the intc-2 interrupt
    controller provides support for 7 external interrupts. These interrupts
    go off-chip (that is they are not for internal peripherals). They need
    some special handling and have some extra setup registers. Add code to
    support them.
    
    Signed-off-by: Greg Ungerer <gerg@uclinux.org>

diff --git a/arch/m68k/include/asm/m54xxsim.h b/arch/m68k/include/asm/m54xxsim.h
index daaae276bb09..1ed8bfb02772 100644
--- a/arch/m68k/include/asm/m54xxsim.h
+++ b/arch/m68k/include/asm/m54xxsim.h
@@ -49,6 +49,16 @@
 #define MCFGPIO_IRQ_MAX		-1
 #define MCFGPIO_IRQ_VECBASE	-1
 
+/*
+ *	EDGE Port support.
+ */
+#define	MCFEPORT_EPPAR		(MCF_MBAR + 0xf00)	/* Pin assignment */
+#define	MCFEPORT_EPDDR		(MCF_MBAR + 0xf04)	/* Data direction */
+#define	MCFEPORT_EPIER		(MCF_MBAR + 0xf05)	/* Interrupt enable */
+#define	MCFEPORT_EPDR		(MCF_MBAR + 0xf08)	/* Port data (w) */
+#define	MCFEPORT_EPPDR		(MCF_MBAR + 0xf09)	/* Port data (r) */
+#define	MCFEPORT_EPFR		(MCF_MBAR + 0xf0c)	/* Flags */
+
 /*
  *	Some PSC related definitions
  */

commit ce3de78a1c9504dba1781e47613b397e4028ae2b
Author: Greg Ungerer <gerg@uclinux.org>
Date:   Wed Mar 9 14:19:08 2011 +1000

    m68knommu: remove ColdFire CLOCK_DIV config option
    
    The reality is that you do not need the abiltity to configure the
    clock divider for ColdFire CPUs. It is a fixed ratio on any given
    ColdFire family member. It is not the same for all ColdFire parts,
    but it is always the same in a model range. So hard define the divider
    for each supported ColdFire CPU type and remove the Kconfig option.
    
    Signed-off-by: Greg Ungerer <gerg@uclinux.org>

diff --git a/arch/m68k/include/asm/m54xxsim.h b/arch/m68k/include/asm/m54xxsim.h
index cc5d94d215b4..daaae276bb09 100644
--- a/arch/m68k/include/asm/m54xxsim.h
+++ b/arch/m68k/include/asm/m54xxsim.h
@@ -7,6 +7,7 @@
 
 #define	CPU_NAME		"COLDFIRE(m54xx)"
 #define	CPU_INSTR_PER_JIFFY	2
+#define	MCF_BUSCLK		(MCF_CLK / 2)
 
 #include <asm/m54xxacr.h>
 

commit 254eef7464f0704290af4b91021f512eb4c98d59
Author: Greg Ungerer <gerg@uclinux.org>
Date:   Sat Mar 5 22:17:17 2011 +1000

    m68knommu: remove kludge seting of MCF_IPSBAR for ColdFire 54xx
    
    The ColdFire 54xx family shares the same interrupt controller used
    on the 523x, 527x and 528x ColdFire parts, but it isn't offset
    relative to the IPSBAR register. The 54xx doesn't have an IPSBAR
    register.
    
    By including the base address of the peripheral registers in the register
    definitions (MCFICM_INTC0 and MCFICM_INTC1 in this case) we can avoid
    having to define a fake IPSBAR for the 54xx. And this makes the register
    address definitions of these more consistent, the majority of the other
    register address defines include the peripheral base address already.
    
    Signed-off-by: Greg Ungerer <gerg@uclinux.org>

diff --git a/arch/m68k/include/asm/m54xxsim.h b/arch/m68k/include/asm/m54xxsim.h
index 462ae5328441..cc5d94d215b4 100644
--- a/arch/m68k/include/asm/m54xxsim.h
+++ b/arch/m68k/include/asm/m54xxsim.h
@@ -15,7 +15,8 @@
 /*
  *      Interrupt Controller Registers
  */
-#define MCFICM_INTC0		0x0700		/* Base for Interrupt Ctrl 0 */
+#define MCFICM_INTC0		(MCF_MBAR + 0x700) 	/* Base for Interrupt Ctrl 0 */
+
 #define MCFINTC_IPRH		0x00		/* Interrupt pending 32-63 */
 #define MCFINTC_IPRL		0x04		/* Interrupt pending 1-31 */
 #define MCFINTC_IMRH		0x08		/* Interrupt mask 32-63 */

commit 3d461401eb5e3a8c471e92500aebd6c115273fba
Author: Greg Ungerer <gerg@uclinux.org>
Date:   Tue Nov 9 10:40:44 2010 +1000

    m68knommu: move inclusion of ColdFire v4 cache registers
    
    Move the inclusion of the version 4 cache controller registers so that
    it is with all the other register bit flag definitions. This makes it
    consistent with the other version core inclusion points, and means we
    don't need "#ifdef"ery in odd-ball places for these definitions.
    
    Signed-off-by: Greg Ungerer <gerg@uclinux.org>

diff --git a/arch/m68k/include/asm/m54xxsim.h b/arch/m68k/include/asm/m54xxsim.h
index a08a7ae776b1..462ae5328441 100644
--- a/arch/m68k/include/asm/m54xxsim.h
+++ b/arch/m68k/include/asm/m54xxsim.h
@@ -8,6 +8,8 @@
 #define	CPU_NAME		"COLDFIRE(m54xx)"
 #define	CPU_INSTR_PER_JIFFY	2
 
+#include <asm/m54xxacr.h>
+
 #define MCFINT_VECBASE		64
 
 /*

commit 57015421d3f3deafb1f6ccf03a6fe0539763dbee
Author: Greg Ungerer <gerg@uclinux.org>
Date:   Wed Nov 3 12:50:30 2010 +1000

    m68knommu: move UART addressing to part specific includes
    
    The ColdFire UART base addresses varies between the different ColdFire
    family members. Instead of keeping the base addresses with the UART
    definitions keep them with the other addresses definitions for each
    ColdFire part.
    
    The motivation for this move is so that when we add new ColdFire
    part definitions, they are all in a single file (and we shouldn't
    normally need to modify the UART definitions in mcfuart.h at all).
    
    Signed-off-by: Greg Ungerer <gerg@uclinux.org>

diff --git a/arch/m68k/include/asm/m54xxsim.h b/arch/m68k/include/asm/m54xxsim.h
index 6072248916ac..a08a7ae776b1 100644
--- a/arch/m68k/include/asm/m54xxsim.h
+++ b/arch/m68k/include/asm/m54xxsim.h
@@ -24,6 +24,14 @@
 #define MCFINTC_IACKL		0x19		/* */
 #define MCFINTC_ICR0		0x40		/* Base ICR register */
 
+/*
+ *	UART module.
+ */
+#define MCFUART_BASE1		0x8600		/* Base address of UART1 */
+#define MCFUART_BASE2		0x8700		/* Base address of UART2 */
+#define MCFUART_BASE3		0x8800		/* Base address of UART3 */
+#define MCFUART_BASE4		0x8900		/* Base address of UART4 */
+
 /*
  *	Define system peripheral IRQ usage.
  */

commit 733f31b764061d976a60c5ee454632d9562900ea
Author: Greg Ungerer <gerg@uclinux.org>
Date:   Tue Nov 2 17:40:37 2010 +1000

    m68knommu: fix clock rate value reported for ColdFire 54xx parts
    
    The instruction timings of the ColdFire 54xx family parts are
    different to other version 4 parts (or version 2 or 3 parts for
    that matter too).
    
    Move the instruction timing setting into the ColdFire part
    specific headers, and set the 54xx value appropriately.
    
    Signed-off-by: Greg Ungerer <gerg@uclinux.org>

diff --git a/arch/m68k/include/asm/m54xxsim.h b/arch/m68k/include/asm/m54xxsim.h
index d69a64fd3bde..6072248916ac 100644
--- a/arch/m68k/include/asm/m54xxsim.h
+++ b/arch/m68k/include/asm/m54xxsim.h
@@ -5,9 +5,10 @@
 #ifndef	m54xxsim_h
 #define m54xxsim_h
 
-#define	CPU_NAME	"COLDFIRE(m54xx)"
+#define	CPU_NAME		"COLDFIRE(m54xx)"
+#define	CPU_INSTR_PER_JIFFY	2
 
-#define MCFINT_VECBASE      64
+#define MCFINT_VECBASE		64
 
 /*
  *      Interrupt Controller Registers

commit 7fc82b655a169039d8a58fde609b5e778573d5ab
Author: Greg Ungerer <gerg@uclinux.org>
Date:   Tue Nov 2 17:13:27 2010 +1000

    m68knommu: move ColdFire CPU names into their headers
    
    Move the ColdFire CPU names out of setup.c and into their repsective
    headers. That way when we add new ones we won't need to modify
    setup.c any more.
    
    Add the missing 548x CPU name.
    
    Signed-off-by: Greg Ungerer <gerg@uclinux.org>

diff --git a/arch/m68k/include/asm/m54xxsim.h b/arch/m68k/include/asm/m54xxsim.h
index c46826c900b3..d69a64fd3bde 100644
--- a/arch/m68k/include/asm/m54xxsim.h
+++ b/arch/m68k/include/asm/m54xxsim.h
@@ -5,6 +5,8 @@
 #ifndef	m54xxsim_h
 #define m54xxsim_h
 
+#define	CPU_NAME	"COLDFIRE(m54xx)"
+
 #define MCFINT_VECBASE      64
 
 /*

commit 5b2e6555ac3eb58a4e5eb5020471df08f0c42c01
Author: Greg Ungerer <gerg@uclinux.org>
Date:   Tue Nov 2 12:05:29 2010 +1000

    m68knommu: make Coldfire 548x support more generic
    
    The ColdFire 547x family of processors is very similar to the ColdFire
    548x series. Almost all of the support for them is the same. Make the
    code supporting the 548x more gneric, so it will be capable of
    supporting both families.
    
    For the most part this is a renaming excerise to make the support
    code more obviously apply to both families.
    
    Signed-off-by: Greg Ungerer <gerg@uclinux.org>

diff --git a/arch/m68k/include/asm/m54xxsim.h b/arch/m68k/include/asm/m54xxsim.h
new file mode 100644
index 000000000000..c46826c900b3
--- /dev/null
+++ b/arch/m68k/include/asm/m54xxsim.h
@@ -0,0 +1,55 @@
+/*
+ *	m54xxsim.h -- ColdFire 547x/548x System Integration Unit support.
+ */
+
+#ifndef	m54xxsim_h
+#define m54xxsim_h
+
+#define MCFINT_VECBASE      64
+
+/*
+ *      Interrupt Controller Registers
+ */
+#define MCFICM_INTC0		0x0700		/* Base for Interrupt Ctrl 0 */
+#define MCFINTC_IPRH		0x00		/* Interrupt pending 32-63 */
+#define MCFINTC_IPRL		0x04		/* Interrupt pending 1-31 */
+#define MCFINTC_IMRH		0x08		/* Interrupt mask 32-63 */
+#define MCFINTC_IMRL		0x0c		/* Interrupt mask 1-31 */
+#define MCFINTC_INTFRCH		0x10		/* Interrupt force 32-63 */
+#define MCFINTC_INTFRCL		0x14		/* Interrupt force 1-31 */
+#define MCFINTC_IRLR		0x18		/* */
+#define MCFINTC_IACKL		0x19		/* */
+#define MCFINTC_ICR0		0x40		/* Base ICR register */
+
+/*
+ *	Define system peripheral IRQ usage.
+ */
+#define MCF_IRQ_TIMER		(64 + 54)	/* Slice Timer 0 */
+#define MCF_IRQ_PROFILER	(64 + 53)	/* Slice Timer 1 */
+
+/*
+ *	Generic GPIO support
+ */
+#define MCFGPIO_PIN_MAX		0	/* I am too lazy to count */
+#define MCFGPIO_IRQ_MAX		-1
+#define MCFGPIO_IRQ_VECBASE	-1
+
+/*
+ *	Some PSC related definitions
+ */
+#define MCF_PAR_PSC(x)		(0x000A4F-((x)&0x3))
+#define MCF_PAR_SDA		(0x0008)
+#define MCF_PAR_SCL		(0x0004)
+#define MCF_PAR_PSC_TXD		(0x04)
+#define MCF_PAR_PSC_RXD		(0x08)
+#define MCF_PAR_PSC_RTS(x)	(((x)&0x03)<<4)
+#define MCF_PAR_PSC_CTS(x)	(((x)&0x03)<<6)
+#define MCF_PAR_PSC_CTS_GPIO	(0x00)
+#define MCF_PAR_PSC_CTS_BCLK	(0x80)
+#define MCF_PAR_PSC_CTS_CTS	(0xC0)
+#define MCF_PAR_PSC_RTS_GPIO    (0x00)
+#define MCF_PAR_PSC_RTS_FSYNC	(0x20)
+#define MCF_PAR_PSC_RTS_RTS	(0x30)
+#define MCF_PAR_PSC_CANRX	(0x40)
+
+#endif	/* m54xxsim_h */
