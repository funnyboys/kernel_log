commit 482cd90cd781c9b5607ed9c9f8641dc95a9d4cce
Author: Jiaxun Yang <jiaxun.yang@flygoat.com>
Date:   Wed May 27 21:17:21 2020 +0800

    MIPS: Loongson64: Define PCI_IOBASE
    
    PCI_IOBASE is used to create VM maps for PCI I/O ports, it is
    required by generic PCI drivers to make memory mapped I/O range
    work.
    
    To deal with legacy drivers that have fixed I/O ports range we
    reserved 0x10000 in PCI_IOBASE, should be enough for i8259 i8042
    stuff.
    
    Signed-off-by: Jiaxun Yang <jiaxun.yang@flygoat.com>
    Signed-off-by: Thomas Bogendoerfer <tsbogend@alpha.franken.de>

diff --git a/arch/mips/loongson64/init.c b/arch/mips/loongson64/init.c
index 23eeb85b1abf..59ddadace83f 100644
--- a/arch/mips/loongson64/init.c
+++ b/arch/mips/loongson64/init.c
@@ -5,6 +5,7 @@
  */
 
 #include <linux/irqchip.h>
+#include <linux/logic_pio.h>
 #include <linux/memblock.h>
 #include <asm/bootinfo.h>
 #include <asm/traps.h>
@@ -45,8 +46,7 @@ void __init prom_init(void)
 	prom_init_env();
 
 	/* init base address of io space */
-	set_io_port_base((unsigned long)
-		ioremap(LOONGSON_PCIIO_BASE, LOONGSON_PCIIO_SIZE));
+	set_io_port_base(PCI_IOBASE);
 
 	loongson_sysconf.early_config();
 
@@ -63,7 +63,45 @@ void __init prom_free_prom_memory(void)
 {
 }
 
+static __init void reserve_pio_range(void)
+{
+	struct logic_pio_hwaddr *range;
+
+	range = kzalloc(sizeof(*range), GFP_ATOMIC);
+	if (!range)
+		return;
+
+	range->fwnode = &of_root->fwnode;
+	range->size = MMIO_LOWER_RESERVED;
+	range->hw_start = LOONGSON_PCIIO_BASE;
+	range->flags = LOGIC_PIO_CPU_MMIO;
+
+	if (logic_pio_register_range(range)) {
+		pr_err("Failed to reserve PIO range for legacy ISA\n");
+		goto free_range;
+	}
+
+	if (WARN(range->io_start != 0,
+			"Reserved PIO range does not start from 0\n"))
+		goto unregister;
+
+	/*
+	 * i8259 would access I/O space, so mapping must be done here.
+	 * Please remove it when all drivers can be managed by logic_pio.
+	 */
+	ioremap_page_range(PCI_IOBASE, PCI_IOBASE + MMIO_LOWER_RESERVED,
+				LOONGSON_PCIIO_BASE,
+				pgprot_device(PAGE_KERNEL));
+
+	return;
+unregister:
+	logic_pio_unregister_range(range);
+free_range:
+	kfree(range);
+}
+
 void __init arch_init_irq(void)
 {
+	reserve_pio_range();
 	irqchip_init();
 }

commit f39293fd37fff74c531b7a52d0459cc77db85e7f
Author: Ben Hutchings <ben@decadent.org.uk>
Date:   Sat May 23 23:50:34 2020 +0800

    MIPS: Fix exception handler memcpy()
    
    The exception handler subroutines are declared as a single char, but
    when copied to the required addresses the copy length is 0x80.
    
    When range checks are enabled for memcpy() this results in a build
    failure, with error messages such as:
    
    In file included from arch/mips/mti-malta/malta-init.c:15:
    In function 'memcpy',
        inlined from 'mips_nmi_setup' at arch/mips/mti-malta/malta-init.c:98:2:
    include/linux/string.h:376:4: error: call to '__read_overflow2' declared with attribute error: detected read beyond size of object passed as 2nd parameter
      376 |    __read_overflow2();
          |    ^~~~~~~~~~~~~~~~~~
    
    Change the declarations to use type char[].
    
    Signed-off-by: Ben Hutchings <ben@decadent.org.uk>
    Signed-off-by: YunQiang Su <syq@debian.org>
    Signed-off-by: Thomas Bogendoerfer <tsbogend@alpha.franken.de>

diff --git a/arch/mips/loongson64/init.c b/arch/mips/loongson64/init.c
index 2b45ca6ca98d..23eeb85b1abf 100644
--- a/arch/mips/loongson64/init.c
+++ b/arch/mips/loongson64/init.c
@@ -22,10 +22,10 @@ u32 node_id_offset;
 static void __init mips_nmi_setup(void)
 {
 	void *base;
-	extern char except_vec_nmi;
+	extern char except_vec_nmi[];
 
 	base = (void *)(CAC_BASE + 0x380);
-	memcpy(base, &except_vec_nmi, 0x80);
+	memcpy(base, except_vec_nmi, 0x80);
 	flush_icache_range((unsigned long)base, (unsigned long)base + 0x80);
 }
 

commit 68fbb9721ea76b2a3088b749e004456f2de05b9f
Author: Tiezhu Yang <yangtiezhu@loongson.cn>
Date:   Fri May 8 16:36:05 2020 +0800

    MIPS: Loongson: Add DMA support for LS7A
    
    In the current market, the most used bridge chip on the Loongson platform
    are RS780E and LS7A, the RS780E bridge chip is already supported by the
    mainline kernel.
    
    If use the default implementation of __phys_to_dma() and __dma_to_phys()
    in dma-direct.h when CONFIG_ARCH_HAS_PHYS_TO_DMA is not set, it works
    well used with LS7A on the Loongson single-way and multi-way platform,
    and also works well used with RS780E on the Loongson single-way platform,
    but the DMA address will be wrong on the non-node0 used with RS780E on
    the Loongson multi-way platform.
    
    Just as the description in the code comment, the devices get node id from
    40 bit of HyperTransport bus, so we extract 2 bit node id (bit 44~45) from
    48 bit address space of Loongson CPU and embed it into HyperTransport bus
    (bit 37-38), this operation can be done only at the software level used
    with RS780E on the Loongson multi-way platform, because it has no hardware
    function to translate address of node id, this is a hardware compatibility
    problem.
    
    Device
        |
        | DMA address
        |
    Host Bridge
        |
        | HT bus address (40 bit)
        |
       CPU
        |
        | physical address (48 bit)
        |
       RAM
    
    The LS7A has dma_node_id_offset field in the DMA route config register,
    the hardware can use the dma_node_id_offset to translate address of
    node id automatically, so we can get correct address when just use the
    dma_pfn_offset field in struct device.
    
    For the above reasons, in order to maintain downward compatibility
    to support the RS780E bridge chip, it is better to use the platform
    dependent implementation of __phys_to_dma() and __dma_to_phys().
    
    Signed-off-by: Tiezhu Yang <yangtiezhu@loongson.cn>
    Signed-off-by: Thomas Bogendoerfer <tsbogend@alpha.franken.de>

diff --git a/arch/mips/loongson64/init.c b/arch/mips/loongson64/init.c
index da38944471f4..2b45ca6ca98d 100644
--- a/arch/mips/loongson64/init.c
+++ b/arch/mips/loongson64/init.c
@@ -13,6 +13,11 @@
 #include <asm/fw/fw.h>
 
 #include <loongson.h>
+#include <boot_param.h>
+
+#define NODE_ID_OFFSET_ADDR	((void __iomem *)TO_UNCAC(0x1001041c))
+
+u32 node_id_offset;
 
 static void __init mips_nmi_setup(void)
 {
@@ -24,6 +29,16 @@ static void __init mips_nmi_setup(void)
 	flush_icache_range((unsigned long)base, (unsigned long)base + 0x80);
 }
 
+void ls7a_early_config(void)
+{
+	node_id_offset = ((readl(NODE_ID_OFFSET_ADDR) >> 8) & 0x1f) + 36;
+}
+
+void rs780e_early_config(void)
+{
+	node_id_offset = 37;
+}
+
 void __init prom_init(void)
 {
 	fw_init_cmdline();
@@ -33,6 +48,8 @@ void __init prom_init(void)
 	set_io_port_base((unsigned long)
 		ioremap(LOONGSON_PCIIO_BASE, LOONGSON_PCIIO_SIZE));
 
+	loongson_sysconf.early_config();
+
 	prom_init_numa_memory();
 
 	/* Hardcode to CPU UART 0 */

commit 8bec3875c547c78314c48959542e202bdd897a42
Author: Jiaxun Yang <jiaxun.yang@flygoat.com>
Date:   Wed Mar 25 11:55:00 2020 +0800

    MIPS: Loongson64: Drop legacy IRQ code
    
    We've made generic irqchip drivers for Loongson-3 platform, it's time
    to say goodbye to these legacy code.
    
    Signed-off-by: Jiaxun Yang <jiaxun.yang@flygoat.com>
    Co-developed-by: Huacai Chen <chenhc@lemote.com>
    Signed-off-by: Huacai Chen <chenhc@lemote.com>
    Signed-off-by: Thomas Bogendoerfer <tsbogend@alpha.franken.de>

diff --git a/arch/mips/loongson64/init.c b/arch/mips/loongson64/init.c
index 5ac1a0f35ca4..da38944471f4 100644
--- a/arch/mips/loongson64/init.c
+++ b/arch/mips/loongson64/init.c
@@ -4,6 +4,7 @@
  * Author: Wu Zhangjin, wuzhangjin@gmail.com
  */
 
+#include <linux/irqchip.h>
 #include <linux/memblock.h>
 #include <asm/bootinfo.h>
 #include <asm/traps.h>
@@ -44,3 +45,8 @@ void __init prom_init(void)
 void __init prom_free_prom_memory(void)
 {
 }
+
+void __init arch_init_irq(void)
+{
+	irqchip_init();
+}

commit 75cac781dca43e735fbb4166d994263a14f0823e
Author: Jiaxun Yang <jiaxun.yang@flygoat.com>
Date:   Thu Nov 7 12:01:15 2019 +0800

    MIPS: Loongson{2ef, 32, 64} convert to generic fw cmdline
    
    All of Loongson firmwares are passing boot cmdline/env
    in the manner of YAMON/PMON. Thus we can remove duplicated
    cmdline initialize code and convert to generic fw method.
    
    Signed-off-by: Jiaxun Yang <jiaxun.yang@flygoat.com>
    Signed-off-by: Paul Burton <paulburton@kernel.org>
    Cc: linux-mips@vger.kernel.org
    Cc: chenhe@lemote.com

diff --git a/arch/mips/loongson64/init.c b/arch/mips/loongson64/init.c
index 48b44f415059..5ac1a0f35ca4 100644
--- a/arch/mips/loongson64/init.c
+++ b/arch/mips/loongson64/init.c
@@ -9,6 +9,7 @@
 #include <asm/traps.h>
 #include <asm/smp-ops.h>
 #include <asm/cacheflush.h>
+#include <asm/fw/fw.h>
 
 #include <loongson.h>
 
@@ -24,7 +25,7 @@ static void __init mips_nmi_setup(void)
 
 void __init prom_init(void)
 {
-	prom_init_cmdline();
+	fw_init_cmdline();
 	prom_init_env();
 
 	/* init base address of io space */

commit 6fbde6b492dfc761ad60a68fb2cb32b1eb05b786
Author: Jiaxun Yang <jiaxun.yang@flygoat.com>
Date:   Sun Oct 20 23:01:36 2019 +0800

    MIPS: Loongson64: Move files to the top-level directory
    
    Current Loongson-3 code can share among all Loongson64 processors.
    
    Signed-off-by: Jiaxun Yang <jiaxun.yang@flygoat.com>
    Signed-off-by: Paul Burton <paulburton@kernel.org>
    Cc: linux-mips@vger.kernel.org
    Cc: chenhc@lemote.com
    Cc: paul.burton@mips.com

diff --git a/arch/mips/loongson64/init.c b/arch/mips/loongson64/init.c
new file mode 100644
index 000000000000..48b44f415059
--- /dev/null
+++ b/arch/mips/loongson64/init.c
@@ -0,0 +1,45 @@
+// SPDX-License-Identifier: GPL-2.0-or-later
+/*
+ * Copyright (C) 2009 Lemote Inc.
+ * Author: Wu Zhangjin, wuzhangjin@gmail.com
+ */
+
+#include <linux/memblock.h>
+#include <asm/bootinfo.h>
+#include <asm/traps.h>
+#include <asm/smp-ops.h>
+#include <asm/cacheflush.h>
+
+#include <loongson.h>
+
+static void __init mips_nmi_setup(void)
+{
+	void *base;
+	extern char except_vec_nmi;
+
+	base = (void *)(CAC_BASE + 0x380);
+	memcpy(base, &except_vec_nmi, 0x80);
+	flush_icache_range((unsigned long)base, (unsigned long)base + 0x80);
+}
+
+void __init prom_init(void)
+{
+	prom_init_cmdline();
+	prom_init_env();
+
+	/* init base address of io space */
+	set_io_port_base((unsigned long)
+		ioremap(LOONGSON_PCIIO_BASE, LOONGSON_PCIIO_SIZE));
+
+	prom_init_numa_memory();
+
+	/* Hardcode to CPU UART 0 */
+	setup_8250_early_printk_port(TO_UNCAC(LOONGSON_REG_BASE + 0x1e0), 0, 1024);
+
+	register_smp_ops(&loongson3_smp_ops);
+	board_nmi_handler_setup = mips_nmi_setup;
+}
+
+void __init prom_free_prom_memory(void)
+{
+}
