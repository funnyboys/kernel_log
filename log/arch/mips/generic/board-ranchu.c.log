commit 2874c5fd284268364ece81a7bd936f3c8168e567
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Mon May 27 08:55:01 2019 +0200

    treewide: Replace GPLv2 boilerplate/reference with SPDX - rule 152
    
    Based on 1 normalized pattern(s):
    
      this program is free software you can redistribute it and or modify
      it under the terms of the gnu general public license as published by
      the free software foundation either version 2 of the license or at
      your option any later version
    
    extracted by the scancode license scanner the SPDX license identifier
    
      GPL-2.0-or-later
    
    has been chosen to replace the boilerplate/reference in 3029 file(s).
    
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Reviewed-by: Allison Randal <allison@lohutok.net>
    Cc: linux-spdx@vger.kernel.org
    Link: https://lkml.kernel.org/r/20190527070032.746973796@linutronix.de
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/arch/mips/generic/board-ranchu.c b/arch/mips/generic/board-ranchu.c
index 59a8c18fa2cc..a89aaad59cb1 100644
--- a/arch/mips/generic/board-ranchu.c
+++ b/arch/mips/generic/board-ranchu.c
@@ -1,12 +1,8 @@
+// SPDX-License-Identifier: GPL-2.0-or-later
 /*
  * Support code for virtual Ranchu board for MIPS.
  *
  * Author: Miodrag Dinic <miodrag.dinic@mips.com>
- *
- * This program is free software; you can redistribute it and/or modify it
- * under the terms of the GNU General Public License as published by the
- * Free Software Foundation;  either version 2 of the  License, or (at your
- * option) any later version.
  */
 
 #include <linux/of_address.h>

commit e17ae5cdd10ad957de5b03bfa832cfcad3b46248
Author: James Hogan <jhogan@kernel.org>
Date:   Fri Feb 2 22:14:10 2018 +0000

    MIPS: generic: Fix ranchu_of_match[] termination
    
    ranchu_of_match[] has no terminating element to end the search for a
    matching compatible string when the first and only element does not
    match, so add one now.
    
    Fixes: f2d0b0d5c171 ("MIPS: ranchu: Add Ranchu as a new generic-based board")
    Signed-off-by: James Hogan <jhogan@kernel.org>
    Reviewed-by: Paul Burton <paul.burton@mips.com>
    Reviewed-by: Matt Redfearn <matt.redfearn@mips.com>
    Cc: Ralf Baechle <ralf@linux-mips.org>
    Cc: Miodrag Dinic <miodrag.dinic@mips.com>
    Cc: Goran Ferenc <goran.ferenc@mips.com>
    Cc: Aleksandar Markovic <aleksandar.markovic@mips.com>
    Cc: linux-mips@linux-mips.org
    Patchwork: https://patchwork.linux-mips.org/patch/18581/

diff --git a/arch/mips/generic/board-ranchu.c b/arch/mips/generic/board-ranchu.c
index ea451b89bb53..59a8c18fa2cc 100644
--- a/arch/mips/generic/board-ranchu.c
+++ b/arch/mips/generic/board-ranchu.c
@@ -84,6 +84,7 @@ static const struct of_device_id ranchu_of_match[] __initconst = {
 	{
 		.compatible = "mti,ranchu",
 	},
+	{}
 };
 
 MIPS_MACHINE(ranchu) = {

commit f2d0b0d5c1718487f8a27d3ca3ec0f05ca3adedd
Author: Miodrag Dinic <miodrag.dinic@mips.com>
Date:   Fri Dec 29 16:41:47 2017 +0100

    MIPS: ranchu: Add Ranchu as a new generic-based board
    
    Provide amendments to the MIPS generic platform framework so that
    the new generic-based board Ranchu can be chosen to be built.
    
    The Ranchu board is intended to be used by Android emulator. The name
    "Ranchu" originates from Android development community. "Goldfish" and
    "Ranchu" are terms used for two generations of virtual boards used by
    Android emulator. The name "Ranchu" is a newer one among the two, and
    this patch deals with Ranchu. However, for historical reasons, some
    devices/drivers still contain the name "Goldfish".
    
    MIPS Ranchu machine includes a number of Goldfish devices. The support
    for Virtio devices is also included. Ranchu board supports up to 16
    Virtio devices which can be attached using Virtio MMIO Bus. This is
    summarized in the following picture:
    
           ABUS
            ||----MIPS CPU
            ||       |                    IRQs
            ||----Goldfish PIC------------(32)--------
            ||                     | | | | | | | | |
            ||----Goldfish TTY------ | | | | | | | |
            ||                       | | | | | | | |
            ||----Goldfish RTC-------- | | | | | | |
            ||                         | | | | | | |
            ||----Goldfish FB----------- | | | | | |
            ||                           | | | | | |
            ||----Goldfish Events--------- | | | | |
            ||                             | | | | |
            ||----Goldfish Audio------------ | | | |
            ||                               | | | |
            ||----Goldfish Battery------------ | | |
            ||                                 | | |
            ||----Android PIPE------------------ | |
            ||                                   | |
            ||----Virtio MMIO Bus                | |
            ||    |    |    |                    | |
            ||    |    |   (virtio-block)--------- |
            ||   (16)  |                           |
            ||    |   (virtio-net)------------------
    
    Device Tree is created on the QEMU side based on the information about
    devices IO map and IRQ numbers. Kernel will load this DTB using UHI
    boot protocol DTB handover mode.
    
    Signed-off-by: Miodrag Dinic <miodrag.dinic@mips.com>
    Signed-off-by: Goran Ferenc <goran.ferenc@mips.com>
    Signed-off-by: Aleksandar Markovic <aleksandar.markovic@mips.com>
    Reviewed-by: James Hogan <jhogan@kernel.org>
    Cc: Ralf Baechle <ralf@linux-mips.org>
    Cc: Paul Burton <paul.burton@mips.com>
    Cc: linux-mips@linux-mips.org
    Patchwork: https://patchwork.linux-mips.org/patch/18138/
    Signed-off-by: James Hogan <jhogan@kernel.org>

diff --git a/arch/mips/generic/board-ranchu.c b/arch/mips/generic/board-ranchu.c
new file mode 100644
index 000000000000..ea451b89bb53
--- /dev/null
+++ b/arch/mips/generic/board-ranchu.c
@@ -0,0 +1,92 @@
+/*
+ * Support code for virtual Ranchu board for MIPS.
+ *
+ * Author: Miodrag Dinic <miodrag.dinic@mips.com>
+ *
+ * This program is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License as published by the
+ * Free Software Foundation;  either version 2 of the  License, or (at your
+ * option) any later version.
+ */
+
+#include <linux/of_address.h>
+#include <linux/types.h>
+
+#include <asm/machine.h>
+#include <asm/mipsregs.h>
+#include <asm/time.h>
+
+#define GOLDFISH_TIMER_LOW		0x00
+#define GOLDFISH_TIMER_HIGH		0x04
+
+static __init u64 read_rtc_time(void __iomem *base)
+{
+	u32 time_low;
+	u32 time_high;
+
+	/*
+	 * Reading the low address latches the high value
+	 * as well so there is no fear that we may read
+	 * inaccurate high value.
+	 */
+	time_low = readl(base + GOLDFISH_TIMER_LOW);
+	time_high = readl(base + GOLDFISH_TIMER_HIGH);
+
+	return ((u64)time_high << 32) | time_low;
+}
+
+static __init unsigned int ranchu_measure_hpt_freq(void)
+{
+	u64 rtc_start, rtc_current, rtc_delta;
+	unsigned int start, count;
+	struct device_node *np;
+	void __iomem *rtc_base;
+
+	np = of_find_compatible_node(NULL, NULL, "google,goldfish-rtc");
+	if (!np)
+		panic("%s(): Failed to find 'google,goldfish-rtc' dt node!",
+		      __func__);
+
+	rtc_base = of_iomap(np, 0);
+	if (!rtc_base)
+		panic("%s(): Failed to ioremap Goldfish RTC base!", __func__);
+
+	/*
+	 * Poll the nanosecond resolution RTC for one
+	 * second to calibrate the CPU frequency.
+	 */
+	rtc_start = read_rtc_time(rtc_base);
+	start = read_c0_count();
+
+	do {
+		rtc_current = read_rtc_time(rtc_base);
+		rtc_delta = rtc_current - rtc_start;
+	} while (rtc_delta < NSEC_PER_SEC);
+
+	count = read_c0_count() - start;
+
+	/*
+	 * Make sure the frequency will be a round number.
+	 * Without this correction, the returned value may vary
+	 * between subsequent emulation executions.
+	 *
+	 * TODO: Set this value using device tree.
+	 */
+	count += 5000;
+	count -= count % 10000;
+
+	iounmap(rtc_base);
+
+	return count;
+}
+
+static const struct of_device_id ranchu_of_match[] __initconst = {
+	{
+		.compatible = "mti,ranchu",
+	},
+};
+
+MIPS_MACHINE(ranchu) = {
+	.matches = ranchu_of_match,
+	.measure_hpt_freq = ranchu_measure_hpt_freq,
+};
