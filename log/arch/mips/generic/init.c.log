commit 089a792c750dde659169c0b7ca9f1d056ee44c89
Author: Geert Uytterhoeven <geert+renesas@glider.be>
Date:   Wed Feb 12 11:15:40 2020 +0100

    MIPS: generic: Replace <linux/clk-provider.h> by <linux/of_clk.h>
    
    The generic MIPS platform code is not a clock provider, and just needs
    to call of_clk_init().
    
    Hence it can include <linux/of_clk.h> instead of <linux/clk-provider.h>.
    
    Signed-off-by: Geert Uytterhoeven <geert+renesas@glider.be>
    Reviewed-by: Philippe Mathieu-Daud√© <f4bug@amsat.org>
    Reviewed-by: Stephen Boyd <sboyd@kernel.org>
    Signed-off-by: Paul Burton <paulburton@kernel.org>
    Cc: Ralf Baechle <ralf@linux-mips.org>
    Cc: Florian Fainelli <f.fainelli@gmail.com>
    Cc: Paul Cercueil <paul@crapouillou.net>
    Cc: James Hartley <james.hartley@sondrel.com>
    Cc: John Crispin <john@phrozen.org>
    Cc: linux-mips@vger.kernel.org
    Cc: bcm-kernel-feedback-list@broadcom.com
    Cc: linux-clk@vger.kernel.org
    Cc: linux-kernel@vger.kernel.org

diff --git a/arch/mips/generic/init.c b/arch/mips/generic/init.c
index 1de215b283d6..805d0135a9f4 100644
--- a/arch/mips/generic/init.c
+++ b/arch/mips/generic/init.c
@@ -5,10 +5,10 @@
  */
 
 #include <linux/clk.h>
-#include <linux/clk-provider.h>
 #include <linux/clocksource.h>
 #include <linux/init.h>
 #include <linux/irqchip.h>
+#include <linux/of_clk.h>
 #include <linux/of_fdt.h>
 
 #include <asm/bootinfo.h>

commit a14bf1dc494aa5126e4f23ebd9fa04991133814e
Author: Tiezhu Yang <yangtiezhu@loongson.cn>
Date:   Wed Oct 9 00:15:09 2019 +0800

    MIPS: generic: Use __initconst for const init data
    
    Fix the following checkpatch errors:
    
    $ ./scripts/checkpatch.pl --no-tree -f arch/mips/generic/init.c
    ERROR: Use of const init definition must use __initconst
    #23: FILE: arch/mips/generic/init.c:23:
    +static __initdata const void *fdt;
    
    ERROR: Use of const init definition must use __initconst
    #24: FILE: arch/mips/generic/init.c:24:
    +static __initdata const struct mips_machine *mach;
    
    ERROR: Use of const init definition must use __initconst
    #25: FILE: arch/mips/generic/init.c:25:
    +static __initdata const void *mach_match_data;
    
    Fixes: eed0eabd12ef ("MIPS: generic: Introduce generic DT-based board support")
    Signed-off-by: Tiezhu Yang <yangtiezhu@loongson.cn>
    Signed-off-by: Paul Burton <paul.burton@mips.com>
    Cc: ralf@linux-mips.org
    Cc: jhogan@kernel.org
    Cc: linux-mips@vger.kernel.org
    Cc: linux-kernel@vger.kernel.org

diff --git a/arch/mips/generic/init.c b/arch/mips/generic/init.c
index d5b8c4717ded..1de215b283d6 100644
--- a/arch/mips/generic/init.c
+++ b/arch/mips/generic/init.c
@@ -20,9 +20,9 @@
 #include <asm/smp-ops.h>
 #include <asm/time.h>
 
-static __initdata const void *fdt;
-static __initdata const struct mips_machine *mach;
-static __initdata const void *mach_match_data;
+static __initconst const void *fdt;
+static __initconst const struct mips_machine *mach;
+static __initconst const void *mach_match_data;
 
 void __init prom_init(void)
 {

commit 2874c5fd284268364ece81a7bd936f3c8168e567
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Mon May 27 08:55:01 2019 +0200

    treewide: Replace GPLv2 boilerplate/reference with SPDX - rule 152
    
    Based on 1 normalized pattern(s):
    
      this program is free software you can redistribute it and or modify
      it under the terms of the gnu general public license as published by
      the free software foundation either version 2 of the license or at
      your option any later version
    
    extracted by the scancode license scanner the SPDX license identifier
    
      GPL-2.0-or-later
    
    has been chosen to replace the boilerplate/reference in 3029 file(s).
    
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Reviewed-by: Allison Randal <allison@lohutok.net>
    Cc: linux-spdx@vger.kernel.org
    Link: https://lkml.kernel.org/r/20190527070032.746973796@linutronix.de
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/arch/mips/generic/init.c b/arch/mips/generic/init.c
index a84475f1924f..d5b8c4717ded 100644
--- a/arch/mips/generic/init.c
+++ b/arch/mips/generic/init.c
@@ -1,11 +1,7 @@
+// SPDX-License-Identifier: GPL-2.0-or-later
 /*
  * Copyright (C) 2016 Imagination Technologies
  * Author: Paul Burton <paul.burton@mips.com>
- *
- * This program is free software; you can redistribute it and/or modify it
- * under the terms of the GNU General Public License as published by the
- * Free Software Foundation;  either version 2 of the  License, or (at your
- * option) any later version.
  */
 
 #include <linux/clk.h>

commit 67eebf7213046e65d8fb1f37f5fd10d5fb71e098
Author: Marcin Nowakowski <marcin.nowakowski@fungible.com>
Date:   Mon May 13 14:32:43 2019 +0200

    generic: fix appended dtb support
    
    Appended DTB support is mostly intended to be used on legacy systems,
    but it is a valid feature that can be enabled for generic platform,
    which currently doesn't support it - if selected, the appended DTB will
    be ignored by the platform startup code.
    
    During kernel startup, the appended DTB's location is stored in
    fw_passed_dtb if the init code finds what appears to be a valid DTB.
    Otherwise (if a0 == -2), a1 is stored in fw_passed_dtb, so either way it
    will always point to either a user-passed DTB or built-in DTB.
    
    Signed-off-by: Marcin Nowakowski <marcin.nowakowski@fungible.com>
    Signed-off-by: Paul Burton <paul.burton@mips.com>
    Cc: linux-mips@vger.kernel.org

diff --git a/arch/mips/generic/init.c b/arch/mips/generic/init.c
index a106f8113842..a84475f1924f 100644
--- a/arch/mips/generic/init.c
+++ b/arch/mips/generic/init.c
@@ -43,14 +43,14 @@ void __init *plat_get_fdt(void)
 		/* Already set up */
 		return (void *)fdt;
 
-	if ((fw_arg0 == -2) && !fdt_check_header((void *)fw_arg1)) {
+	if ((fw_arg0 == -2) && !fdt_check_header((void *)fw_passed_dtb)) {
 		/*
 		 * We booted using the UHI boot protocol, so we have been
 		 * provided with the appropriate device tree for the board.
 		 * Make use of it & search for any machine struct based upon
 		 * the root compatible string.
 		 */
-		fdt = (void *)fw_arg1;
+		fdt = (void *)fw_passed_dtb;
 
 		for_each_mips_machine(check_mach) {
 			match = mips_machine_is_compatible(check_mach, fdt);

commit 28ec2238f37e72a3a40a7eb46893e7651bcc40a6
Author: Nicholas Mc Guire <hofrat@osadl.org>
Date:   Wed Jul 11 20:32:45 2018 +0200

    MIPS: generic: fix missing of_node_put()
    
    of_find_compatible_node() returns a device_node pointer with refcount
    incremented and must be decremented explicitly.
     As this code is using the result only to check presence of the interrupt
    controller (!NULL) but not actually using the result otherwise the
    refcount can be decremented here immediately again.
    
    Signed-off-by: Nicholas Mc Guire <hofrat@osadl.org>
    Signed-off-by: Paul Burton <paul.burton@mips.com>
    Patchwork: https://patchwork.linux-mips.org/patch/19820/
    Cc: Ralf Baechle <ralf@linux-mips.org>
    Cc: James Hogan <jhogan@kernel.org>
    Cc: linux-mips@linux-mips.org
    Cc: linux-kernel@vger.kernel.org

diff --git a/arch/mips/generic/init.c b/arch/mips/generic/init.c
index 07ec08462d70..a106f8113842 100644
--- a/arch/mips/generic/init.c
+++ b/arch/mips/generic/init.c
@@ -203,6 +203,7 @@ void __init arch_init_irq(void)
 					    "mti,cpu-interrupt-controller");
 	if (!cpu_has_veic && !intc_node)
 		mips_cpu_irq_init();
+	of_node_put(intc_node);
 
 	irqchip_init();
 }

commit 6a7ec6c5ca0c8264bd505be122ca2d4ede60de92
Author: Rob Herring <robh@kernel.org>
Date:   Tue Jun 19 15:47:09 2018 -0600

    MIPS: generic: remove unnecessary of_platform_populate call
    
    The DT core will call of_platform_populate, so it is not necessary for
    arch specific code to call it unless there are custom match entries,
    auxdata or parent device. Neither of those apply here, so remove the call.
    
    Cc: Paul Burton <paul.burton@mips.com>
    Cc: Ralf Baechle <ralf@linux-mips.org>
    Cc: James Hogan <jhogan@kernel.org>
    Cc: linux-mips@linux-mips.org
    Signed-off-by: Rob Herring <robh@kernel.org>
    Patchwork: https://patchwork.linux-mips.org/patch/19591/
    Signed-off-by: Paul Burton <paul.burton@mips.com>
    Cc: linux-kernel@vger.kernel.org

diff --git a/arch/mips/generic/init.c b/arch/mips/generic/init.c
index 5ba6fcc26fa7..07ec08462d70 100644
--- a/arch/mips/generic/init.c
+++ b/arch/mips/generic/init.c
@@ -14,7 +14,6 @@
 #include <linux/init.h>
 #include <linux/irqchip.h>
 #include <linux/of_fdt.h>
-#include <linux/of_platform.h>
 
 #include <asm/bootinfo.h>
 #include <asm/fw/fw.h>
@@ -208,18 +207,6 @@ void __init arch_init_irq(void)
 	irqchip_init();
 }
 
-static int __init publish_devices(void)
-{
-	if (!of_have_populated_dt())
-		panic("Device-tree not present");
-
-	if (of_platform_populate(NULL, of_default_bus_match_table, NULL, NULL))
-		panic("Failed to populate DT");
-
-	return 0;
-}
-arch_initcall(publish_devices);
-
 void __init prom_free_prom_memory(void)
 {
 }

commit 7f005f112f527f0762386c6fd182966d0e066eaf
Author: Matt Redfearn <matt.redfearn@mips.com>
Date:   Mon Oct 16 11:06:49 2017 +0100

    MIPS: generic: Fix compilation error from include asm/mips-cpc.h
    
    Commit e83f7e02af50c ("MIPS: CPS: Have asm/mips-cps.h include CM & CPC
    headers") adds a #error to arch/mips/include/asm/mips-cpc.h if it is
    included directly. While this commit replaced almost all direct includes
    of mips-cm.h and mips-cpc.h, 2 remain.
    
    With some defconfigs, mips-cps.h is indirectly included before
    mips-cpc.h, but in others this results in compilation errors:
    
    In file included from arch/mips/generic/init.c:23:0:
    ./arch/mips/include/asm/mips-cpc.h:12:3: error: #error Please include
    asm/mips-cps.h rather than asm/mips-cpc.h
     # error Please include asm/mips-cps.h rather than asm/mips-cpc.h
    
    In file included from arch/mips/kernel/smp.c:23:0:
    ./arch/mips/include/asm/mips-cpc.h:12:3: error: #error Please include
    asm/mips-cps.h rather than asm/mips-cpc.h
     # error Please include asm/mips-cps.h rather than asm/mips-cpc.h
    
    In both cases, fix this by including mips-cps.h instead.
    
    Fixes: e83f7e02af50c ("MIPS: CPS: Have asm/mips-cps.h include CM & CPC headers")
    Signed-off-by: Matt Redfearn <matt.redfearn@mips.com>
    Patchwork: https://patchwork.linux-mips.org/patch/17492/
    Signed-off-by: James Hogan <jhogan@kernel.org>

diff --git a/arch/mips/generic/init.c b/arch/mips/generic/init.c
index cf409ba358a1..5ba6fcc26fa7 100644
--- a/arch/mips/generic/init.c
+++ b/arch/mips/generic/init.c
@@ -20,7 +20,7 @@
 #include <asm/fw/fw.h>
 #include <asm/irq_cpu.h>
 #include <asm/machine.h>
-#include <asm/mips-cpc.h>
+#include <asm/mips-cps.h>
 #include <asm/prom.h>
 #include <asm/smp-ops.h>
 #include <asm/time.h>

commit 48c834be170bb1060e14092ff1c7967ea72b2e97
Author: Paul Burton <paul.burton@mips.com>
Date:   Wed Oct 25 17:04:33 2017 -0700

    Update MIPS email addresses
    
    MIPS will soon not be a part of Imagination Technologies, and as such
    many @imgtec.com email addresses will no longer be valid. This patch
    updates the addresses for those who:
    
     - Have 10 or more patches in mainline authored using an @imgtec.com
       email address, or any patches dated within the past year.
    
     - Are still with Imagination but leaving as part of the MIPS business
       unit, as determined from an internal email address list.
    
     - Haven't already updated their email address (ie. JamesH) or expressed
       a desire to be excluded (ie. Maciej).
    
     - Acked v2 or earlier of this patch, which leaves Deng-Cheng, Matt &
       myself.
    
    New addresses are of the form firstname.lastname@mips.com, and all
    verified against an internal email address list. An entry is added to
    .mailmap for each person such that get_maintainer.pl will report the new
    addresses rather than @imgtec.com addresses which will soon be dead.
    
    Instances of the affected addresses throughout the tree are then
    mechanically replaced with the new @mips.com address.
    
    Signed-off-by: Paul Burton <paul.burton@mips.com>
    Cc: Deng-Cheng Zhu <dengcheng.zhu@imgtec.com>
    Cc: Deng-Cheng Zhu <dengcheng.zhu@mips.com>
    Acked-by: Dengcheng Zhu <dengcheng.zhu@mips.com>
    Cc: Matt Redfearn <matt.redfearn@imgtec.com>
    Cc: Matt Redfearn <matt.redfearn@mips.com>
    Acked-by: Matt Redfearn <matt.redfearn@mips.com>
    Cc: Andrew Morton <akpm@linux-foundation.org>
    Cc: linux-kernel@vger.kernel.org
    Cc: linux-mips@linux-mips.org
    Cc: trivial@kernel.org
    Patchwork: https://patchwork.linux-mips.org/patch/17540/
    Signed-off-by: James Hogan <jhogan@kernel.org>

diff --git a/arch/mips/generic/init.c b/arch/mips/generic/init.c
index 15a7fb8e2a2e..cf409ba358a1 100644
--- a/arch/mips/generic/init.c
+++ b/arch/mips/generic/init.c
@@ -1,6 +1,6 @@
 /*
  * Copyright (C) 2016 Imagination Technologies
- * Author: Paul Burton <paul.burton@imgtec.com>
+ * Author: Paul Burton <paul.burton@mips.com>
  *
  * This program is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License as published by the

commit b47e9c62f2312066df5719cfc3a6104bf854071a
Author: Paul Burton <paul.burton@imgtec.com>
Date:   Wed Aug 23 11:17:44 2017 -0700

    MIPS: generic: Include asm/bootinfo.h for plat_fdt_relocated()
    
    arch/mips/generic/init.c provides an implementation of the
    plat_fdt_relocated() function, but doesn't include the asm/bootinfo.h
    header which declares it. This leads to a warning from sparse:
    
    arch/mips/generic/init.c:94:13: warning: symbol 'plat_fdt_relocated' was
      not declared. Should it be static?
    
    Fix this by including asm/bootinfo.h to get the declaration of
    plat_fdt_relocated(). We also #ifdef our definition of
    plat_fdt_relocated() such that it is only provided when
    CONFIG_RELOCATABLE is set, matching the header & avoiding the redundant
    function for non-relocatable kernels.
    
    Signed-off-by: Paul Burton <paul.burton@imgtec.com>
    Cc: Matt Redfearn <matt.redfearn@imgtec.com>
    Cc: linux-mips@linux-mips.org
    Cc: trivial@kernel.org
    Patchwork: https://patchwork.linux-mips.org/patch/17166/
    Signed-off-by: Ralf Baechle <ralf@linux-mips.org>

diff --git a/arch/mips/generic/init.c b/arch/mips/generic/init.c
index 3f32b376d30e..15a7fb8e2a2e 100644
--- a/arch/mips/generic/init.c
+++ b/arch/mips/generic/init.c
@@ -16,6 +16,7 @@
 #include <linux/of_fdt.h>
 #include <linux/of_platform.h>
 
+#include <asm/bootinfo.h>
 #include <asm/fw/fw.h>
 #include <asm/irq_cpu.h>
 #include <asm/machine.h>
@@ -88,6 +89,8 @@ void __init *plat_get_fdt(void)
 	return (void *)fdt;
 }
 
+#ifdef CONFIG_RELOCATABLE
+
 void __init plat_fdt_relocated(void *new_location)
 {
 	/*
@@ -101,6 +104,8 @@ void __init plat_fdt_relocated(void *new_location)
 		fw_arg1 = (unsigned long)new_location;
 }
 
+#endif /* CONFIG_RELOCATABLE */
+
 void __init plat_mem_setup(void)
 {
 	if (mach && mach->fixup_fdt)

commit 568d135d337d3114688fef9fdbce7fb6dbbd04c7
Merge: 4ecd4ff55ac5 d40e0d4fb561
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Sat Jul 15 10:59:54 2017 -0700

    Merge branch 'upstream' of git://git.linux-mips.org/pub/scm/ralf/upstream-linus
    
    Pull MIPS updates from Ralf Baechle:
     "Boston platform support:
       - Document DT bindings
       - Add CLK driver for board clocks
    
      CM:
       - Avoid per-core locking with CM3 & higher
       - WARN on attempt to lock invalid VP, not BUG
    
      CPS:
       - Select CONFIG_SYS_SUPPORTS_SCHED_SMT for MIPSr6
       - Prevent multi-core with dcache aliasing
       - Handle cores not powering down more gracefully
       - Handle spurious VP starts more gracefully
    
      DSP:
       - Add lwx & lhx missaligned access support
    
      eBPF:
       - Add MIPS support along with many supporting change to add the
         required infrastructure
    
      Generic arch code:
       - Misc sysmips MIPS_ATOMIC_SET fixes
       - Drop duplicate HAVE_SYSCALL_TRACEPOINTS
       - Negate error syscall return in trace
       - Correct forced syscall errors
       - Traced negative syscalls should return -ENOSYS
       - Allow samples/bpf/tracex5 to access syscall arguments for sane
         traces
       - Cleanup from old Kconfig options in defconfigs
       - Fix PREF instruction usage by memcpy for MIPS R6
       - Fix various special cases in the FPU eulation
       - Fix some special cases in MIPS16e2 support
       - Fix MIPS I ISA /proc/cpuinfo reporting
       - Sort MIPS Kconfig alphabetically
       - Fix minimum alignment requirement of IRQ stack as required by
         ABI / GCC
       - Fix special cases in the module loader
       - Perform post-DMA cache flushes on systems with MAARs
       - Probe the I6500 CPU
       - Cleanup cmpxchg and add support for 1 and 2 byte operations
       - Use queued read/write locks (qrwlock)
       - Use queued spinlocks (qspinlock)
       - Add CPU shared FTLB feature detection
       - Handle tlbex-tlbp race condition
       - Allow storing pgd in C0_CONTEXT for MIPSr6
       - Use current_cpu_type() in m4kc_tlbp_war()
       - Support Boston in the generic kernel
    
      Generic platform:
       - yamon-dt: Pull YAMON DT shim code out of SEAD-3 board
       - yamon-dt: Support > 256MB of RAM
       - yamon-dt: Use serial* rather than uart* aliases
       - Abstract FDT fixup application
       - Set RTC_ALWAYS_BCD to 0
       - Add a MAINTAINERS entry
    
      core kernel:
       - qspinlock.c: include linux/prefetch.h
    
      Loongson 3:
       - Add support
    
      Perf:
       - Add I6500 support
    
      SEAD-3:
       - Remove GIC timer from DT
       - Set interrupt-parent per-device, not at root node
       - Fix GIC interrupt specifiers
    
      SMP:
       - Skip IPI setup if we only have a single CPU
    
      VDSO:
       - Make comment match reality
       - Improvements to time code in VDSO"
    
    * 'upstream' of git://git.linux-mips.org/pub/scm/ralf/upstream-linus: (86 commits)
      locking/qspinlock: Include linux/prefetch.h
      MIPS: Fix MIPS I ISA /proc/cpuinfo reporting
      MIPS: Fix minimum alignment requirement of IRQ stack
      MIPS: generic: Support MIPS Boston development boards
      MIPS: DTS: img: Don't attempt to build-in all .dtb files
      clk: boston: Add a driver for MIPS Boston board clocks
      dt-bindings: Document img,boston-clock binding
      MIPS: Traced negative syscalls should return -ENOSYS
      MIPS: Correct forced syscall errors
      MIPS: Negate error syscall return in trace
      MIPS: Drop duplicate HAVE_SYSCALL_TRACEPOINTS select
      MIPS16e2: Provide feature overrides for non-MIPS16 systems
      MIPS: MIPS16e2: Report ASE presence in /proc/cpuinfo
      MIPS: MIPS16e2: Subdecode extended LWSP/SWSP instructions
      MIPS: MIPS16e2: Identify ASE presence
      MIPS: VDSO: Fix a mismatch between comment and preprocessor constant
      MIPS: VDSO: Add implementation of gettimeofday() fallback
      MIPS: VDSO: Add implementation of clock_gettime() fallback
      MIPS: VDSO: Fix conversions in do_monotonic()/do_monotonic_coarse()
      MIPS: Use current_cpu_type() in m4kc_tlbp_war()
      ...

commit e889dfca12ce95cdeaa50f66d1f33ad8fed4ca58
Author: Paul Burton <paul.burton@imgtec.com>
Date:   Fri Jun 2 12:29:54 2017 -0700

    MIPS: generic: Abstract FDT fixup application
    
    Introduce an apply_mips_fdt_fixups() function which can apply fixups to
    an FDT based upon an array of fixup descriptions. This abstracts that
    functionality such that legacy board code can apply FDT fixups without
    requiring lots of duplication.
    
    Signed-off-by: Paul Burton <paul.burton@imgtec.com>
    Cc: linux-mips@linux-mips.org
    Patchwork: https://patchwork.linux-mips.org/patch/16184/
    Signed-off-by: Ralf Baechle <ralf@linux-mips.org>

diff --git a/arch/mips/generic/init.c b/arch/mips/generic/init.c
index 4af619215410..4a9a1edbfb29 100644
--- a/arch/mips/generic/init.c
+++ b/arch/mips/generic/init.c
@@ -122,6 +122,33 @@ void __init device_tree_init(void)
 		err = register_up_smp_ops();
 }
 
+int __init apply_mips_fdt_fixups(void *fdt_out, size_t fdt_out_size,
+				 const void *fdt_in,
+				 const struct mips_fdt_fixup *fixups)
+{
+	int err;
+
+	err = fdt_open_into(fdt_in, fdt_out, fdt_out_size);
+	if (err) {
+		pr_err("Failed to open FDT\n");
+		return err;
+	}
+
+	for (; fixups->apply; fixups++) {
+		err = fixups->apply(fdt_out);
+		if (err) {
+			pr_err("Failed to apply FDT fixup \"%s\"\n",
+			       fixups->description);
+			return err;
+		}
+	}
+
+	err = fdt_pack(fdt_out);
+	if (err)
+		pr_err("Failed to pack FDT\n");
+	return err;
+}
+
 void __init plat_time_init(void)
 {
 	struct device_node *np;

commit ba5d08c0ea785d5710c5a1e7dc3182b7124d63c0
Author: Daniel Lezcano <daniel.lezcano@linaro.org>
Date:   Fri May 26 17:40:46 2017 +0200

    clocksource/drivers: Rename clocksource_probe to timer_probe
    
    The function name is now renamed to 'timer_probe' for consistency with
    the CLOCKSOURCE_OF_DECLARE => TIMER_OF_DECLARE change.
    
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Acked-by: Viresh Kumar <viresh.kumar@linaro.org>
    Acked-by: Heiko Stuebner <heiko@sntech.de>
    Reviewed-by: Linus Walleij <linus.walleij@linaro.org>

diff --git a/arch/mips/generic/init.c b/arch/mips/generic/init.c
index 4af619215410..1231b5a17b37 100644
--- a/arch/mips/generic/init.c
+++ b/arch/mips/generic/init.c
@@ -161,7 +161,7 @@ void __init plat_time_init(void)
 		}
 	}
 
-	clocksource_probe();
+	timer_probe();
 }
 
 void __init arch_init_irq(void)

commit 0063fdede69b2cc6f861aab0641f7e25f451def9
Author: Marcin Nowakowski <marcin.nowakowski@imgtec.com>
Date:   Wed Nov 23 14:43:47 2016 +0100

    MIPS: platform: Allow for DTB to be moved during kernel relocation
    
    Add plat_fdt_relocated(void*) API to allow the kernel relocation code to
    update platform's information about the DTB location if the DTB had to
    be moved due to being placed in a location used by the relocated kernel.
    
    Signed-off-by: Marcin Nowakowski <marcin.nowakowski@imgtec.com>
    Cc: linux-mips@linux-mips.org
    Patchwork: https://patchwork.linux-mips.org/patch/14611/
    Signed-off-by: Ralf Baechle <ralf@linux-mips.org>

diff --git a/arch/mips/generic/init.c b/arch/mips/generic/init.c
index d493ccbf274a..4af619215410 100644
--- a/arch/mips/generic/init.c
+++ b/arch/mips/generic/init.c
@@ -88,6 +88,19 @@ void __init *plat_get_fdt(void)
 	return (void *)fdt;
 }
 
+void __init plat_fdt_relocated(void *new_location)
+{
+	/*
+	 * reset fdt as the cached value would point to the location
+	 * before relocations happened and update the location argument
+	 * if it was passed using UHI
+	 */
+	fdt = NULL;
+
+	if (fw_arg0 == -2)
+		fw_arg1 = (unsigned long)new_location;
+}
+
 void __init plat_mem_setup(void)
 {
 	if (mach && mach->fixup_fdt)

commit 9a59061cfd7ac00f21111d2e8aa7f4ab11d27f6c
Author: Matt Redfearn <matt.redfearn@imgtec.com>
Date:   Mon Oct 17 17:25:24 2016 +0100

    MIPS: generic: Fix KASLR for generic kernel.
    
    The KASLR code requires that the plat_get_fdt() function return the
    address of the device tree, and it must be available early in the boot,
    before prom_init() is called. Move the code determining the address of
    the device tree into plat_get_fdt, and call that from prom_init().
    
    The fdt pointer will be set up by plat_get_fdt() called from
    relocate_kernel initially and once the relocated kernel has started,
    prom_init() will use it again to determine the address in the relocated
    image.
    
    Fixes: eed0eabd12ef ("MIPS: generic: Introduce generic DT-based board support")
    Signed-off-by: Matt Redfearn <matt.redfearn@imgtec.com>
    Reviewed-by: James Hogan <james.hogan@imgtec.com>
    Reviewed-by: Paul Burton <paul.burton@imgtec.com>
    Cc: linux-mips@linux-mips.org
    Cc: linux-kernel@vger.kernel.org
    Patchwork: https://patchwork.linux-mips.org/patch/14415/
    Signed-off-by: Ralf Baechle <ralf@linux-mips.org>

diff --git a/arch/mips/generic/init.c b/arch/mips/generic/init.c
index 0ea73e845440..d493ccbf274a 100644
--- a/arch/mips/generic/init.c
+++ b/arch/mips/generic/init.c
@@ -29,10 +29,20 @@ static __initdata const struct mips_machine *mach;
 static __initdata const void *mach_match_data;
 
 void __init prom_init(void)
+{
+	plat_get_fdt();
+	BUG_ON(!fdt);
+}
+
+void __init *plat_get_fdt(void)
 {
 	const struct mips_machine *check_mach;
 	const struct of_device_id *match;
 
+	if (fdt)
+		/* Already set up */
+		return (void *)fdt;
+
 	if ((fw_arg0 == -2) && !fdt_check_header((void *)fw_arg1)) {
 		/*
 		 * We booted using the UHI boot protocol, so we have been
@@ -75,12 +85,6 @@ void __init prom_init(void)
 		/* Retrieve the machine's FDT */
 		fdt = mach->fdt;
 	}
-
-	BUG_ON(!fdt);
-}
-
-void __init *plat_get_fdt(void)
-{
 	return (void *)fdt;
 }
 

commit eed0eabd12ef061821cbfa20d903476e07645320
Author: Paul Burton <paul.burton@imgtec.com>
Date:   Wed Oct 5 18:18:20 2016 +0100

    MIPS: generic: Introduce generic DT-based board support
    
    Introduce a "generic" platform, which aims to be board-agnostic by
    making use of device trees passed by the boot protocol defined in the
    MIPS UHI (Universal Hosting Interface) specification. Provision is made
    for supporting boards which use a legacy boot protocol that can't be
    changed, but adding support for such boards or any others is left to
    followon patches.
    
    Right now the built kernels expect to be loaded to 0x80100000, ie. in
    kseg0. This is fine for the vast majority of MIPS platforms, but
    nevertheless it would be good to remove this limitation in the future by
    mapping the kernel via the TLB such that it can be loaded anywhere & map
    itself appropriately.
    
    Configuration is handled by dynamically generating configs using
    scripts/kconfig/merge_config.sh, somewhat similar to the way powerpc
    makes use of it. This allows for variations upon the configuration, eg.
    differing architecture revisions or subsets of driver support for
    differing boards, to be handled without having a large number of
    defconfig files.
    
    Signed-off-by: Paul Burton <paul.burton@imgtec.com>
    Cc: linux-mips@linux-mips.org
    Patchwork: https://patchwork.linux-mips.org/patch/14353/
    Signed-off-by: Ralf Baechle <ralf@linux-mips.org>

diff --git a/arch/mips/generic/init.c b/arch/mips/generic/init.c
new file mode 100644
index 000000000000..0ea73e845440
--- /dev/null
+++ b/arch/mips/generic/init.c
@@ -0,0 +1,176 @@
+/*
+ * Copyright (C) 2016 Imagination Technologies
+ * Author: Paul Burton <paul.burton@imgtec.com>
+ *
+ * This program is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License as published by the
+ * Free Software Foundation;  either version 2 of the  License, or (at your
+ * option) any later version.
+ */
+
+#include <linux/clk.h>
+#include <linux/clk-provider.h>
+#include <linux/clocksource.h>
+#include <linux/init.h>
+#include <linux/irqchip.h>
+#include <linux/of_fdt.h>
+#include <linux/of_platform.h>
+
+#include <asm/fw/fw.h>
+#include <asm/irq_cpu.h>
+#include <asm/machine.h>
+#include <asm/mips-cpc.h>
+#include <asm/prom.h>
+#include <asm/smp-ops.h>
+#include <asm/time.h>
+
+static __initdata const void *fdt;
+static __initdata const struct mips_machine *mach;
+static __initdata const void *mach_match_data;
+
+void __init prom_init(void)
+{
+	const struct mips_machine *check_mach;
+	const struct of_device_id *match;
+
+	if ((fw_arg0 == -2) && !fdt_check_header((void *)fw_arg1)) {
+		/*
+		 * We booted using the UHI boot protocol, so we have been
+		 * provided with the appropriate device tree for the board.
+		 * Make use of it & search for any machine struct based upon
+		 * the root compatible string.
+		 */
+		fdt = (void *)fw_arg1;
+
+		for_each_mips_machine(check_mach) {
+			match = mips_machine_is_compatible(check_mach, fdt);
+			if (match) {
+				mach = check_mach;
+				mach_match_data = match->data;
+				break;
+			}
+		}
+	} else if (IS_ENABLED(CONFIG_LEGACY_BOARDS)) {
+		/*
+		 * We weren't booted using the UHI boot protocol, but do
+		 * support some number of boards with legacy boot protocols.
+		 * Attempt to find the right one.
+		 */
+		for_each_mips_machine(check_mach) {
+			if (!check_mach->detect)
+				continue;
+
+			if (!check_mach->detect())
+				continue;
+
+			mach = check_mach;
+		}
+
+		/*
+		 * If we don't recognise the machine then we can't continue, so
+		 * die here.
+		 */
+		BUG_ON(!mach);
+
+		/* Retrieve the machine's FDT */
+		fdt = mach->fdt;
+	}
+
+	BUG_ON(!fdt);
+}
+
+void __init *plat_get_fdt(void)
+{
+	return (void *)fdt;
+}
+
+void __init plat_mem_setup(void)
+{
+	if (mach && mach->fixup_fdt)
+		fdt = mach->fixup_fdt(fdt, mach_match_data);
+
+	strlcpy(arcs_cmdline, boot_command_line, COMMAND_LINE_SIZE);
+	__dt_setup_arch((void *)fdt);
+}
+
+void __init device_tree_init(void)
+{
+	int err;
+
+	unflatten_and_copy_device_tree();
+	mips_cpc_probe();
+
+	err = register_cps_smp_ops();
+	if (err)
+		err = register_up_smp_ops();
+}
+
+void __init plat_time_init(void)
+{
+	struct device_node *np;
+	struct clk *clk;
+
+	of_clk_init(NULL);
+
+	if (!cpu_has_counter) {
+		mips_hpt_frequency = 0;
+	} else if (mach && mach->measure_hpt_freq) {
+		mips_hpt_frequency = mach->measure_hpt_freq();
+	} else {
+		np = of_get_cpu_node(0, NULL);
+		if (!np) {
+			pr_err("Failed to get CPU node\n");
+			return;
+		}
+
+		clk = of_clk_get(np, 0);
+		if (IS_ERR(clk)) {
+			pr_err("Failed to get CPU clock: %ld\n", PTR_ERR(clk));
+			return;
+		}
+
+		mips_hpt_frequency = clk_get_rate(clk);
+		clk_put(clk);
+
+		switch (boot_cpu_type()) {
+		case CPU_20KC:
+		case CPU_25KF:
+			/* The counter runs at the CPU clock rate */
+			break;
+		default:
+			/* The counter runs at half the CPU clock rate */
+			mips_hpt_frequency /= 2;
+			break;
+		}
+	}
+
+	clocksource_probe();
+}
+
+void __init arch_init_irq(void)
+{
+	struct device_node *intc_node;
+
+	intc_node = of_find_compatible_node(NULL, NULL,
+					    "mti,cpu-interrupt-controller");
+	if (!cpu_has_veic && !intc_node)
+		mips_cpu_irq_init();
+
+	irqchip_init();
+}
+
+static int __init publish_devices(void)
+{
+	if (!of_have_populated_dt())
+		panic("Device-tree not present");
+
+	if (of_platform_populate(NULL, of_default_bus_match_table, NULL, NULL))
+		panic("Failed to populate DT");
+
+	return 0;
+}
+arch_initcall(publish_devices);
+
+void __init prom_free_prom_memory(void)
+{
+}
