commit 78bdbbac08d7383b5c8a2b489ae789049704b046
Author: Masahiro Yamada <masahiroy@kernel.org>
Date:   Wed Mar 25 16:45:29 2020 +0900

    MIPS: do not compile generic functions for CONFIG_CAVIUM_OCTEON_SOC
    
    MIPS provides multiple definitions for the following functions:
    
      fw_init_cmdline
      __delay
      __udelay
      __ndelay
      memmove
      __rmemcpy
      memcpy
      __copy_user
    
    The generic ones are defined in lib-y objects, which are overridden by
    the Octeon ones when CONFIG_CAVIUM_OCTEON_SOC is enabled.
    
    The use of EXPORT_SYMBOL in static libraries potentially causes a
    problem for the llvm linker [1]. So, I want to forcibly link lib-y
    objects to vmlinux when CONFIG_MODULES=y.
    
    As a groundwork, we must fix multiple definitions that have previously
    been hidden by lib-y.
    
    If you look at lib/string.c, arch can define __HAVE_ARCH_* to opt out
    the generic implementation.
    
    Similarly, this commit adds CONFIG_HAVE_PLAT_* to allow a platform
    to opt out the MIPS generic code.
    
    [1]: https://github.com/ClangBuiltLinux/linux/issues/515
    
    Reported-by: kbuild test robot <lkp@intel.com>
    Signed-off-by: Masahiro Yamada <masahiroy@kernel.org>
    Signed-off-by: Thomas Bogendoerfer <tsbogend@alpha.franken.de>

diff --git a/arch/mips/lib/delay.c b/arch/mips/lib/delay.c
index 68c495ed71e3..2e8dfc1d59c8 100644
--- a/arch/mips/lib/delay.c
+++ b/arch/mips/lib/delay.c
@@ -24,6 +24,8 @@
 #define GCC_DADDI_IMM_ASM() "r"
 #endif
 
+#ifndef CONFIG_HAVE_PLAT_DELAY
+
 void __delay(unsigned long loops)
 {
 	__asm__ __volatile__ (
@@ -63,3 +65,5 @@ void __ndelay(unsigned long ns)
 	__delay((ns * 0x00000005ull * HZ * lpj) >> 32);
 }
 EXPORT_SYMBOL(__ndelay);
+
+#endif

commit c2c09742171c785292c3680f6723c8df996fc713
Author: Paul Burton <paul.burton@imgtec.com>
Date:   Wed Aug 23 11:17:48 2017 -0700

    MIPS: Include asm/delay.h for __{,n,u}delay()
    
    arch/mips/lib/delay.c provides our implementations of the __delay(),
    __ndelay() & __udelay() functions, but doesn't include the asm/delay.h
    header which declares them. This leads to warnings from sparse:
    
      arch/mips/lib/delay.c:26:6: warning: symbol '__delay' was not
        declared. Should it be static?
      arch/mips/lib/delay.c:50:6: warning: symbol '__udelay' was not
        declared. Should it be static?
      arch/mips/lib/delay.c:58:6: warning: symbol '__ndelay' was not
        declared. Should it be static?
    
    To keep checkpatch happy was well, include <linux/delay.h> rather than
    <asm/delay.h> directly to get the declarations of __delay(), __ndelay() &
    __udelay().
    
    [ralf@linux-mips.org: Fixed to include <linux/delay.h.]
    
    Signed-off-by: Paul Burton <paul.burton@imgtec.com>
    Cc: linux-mips@linux-mips.org
    Cc: trivial@kernel.org
    Patchwork: https://patchwork.linux-mips.org/patch/17170/
    Signed-off-by: Ralf Baechle <ralf@linux-mips.org>

diff --git a/arch/mips/lib/delay.c b/arch/mips/lib/delay.c
index 2307a3cb2714..68c495ed71e3 100644
--- a/arch/mips/lib/delay.c
+++ b/arch/mips/lib/delay.c
@@ -8,6 +8,7 @@
  * Copyright (C) 1999, 2000 Silicon Graphics, Inc.
  * Copyright (C) 2007, 2014 Maciej W. Rozycki
  */
+#include <linux/delay.h>
 #include <linux/export.h>
 #include <linux/param.h>
 #include <linux/smp.h>

commit 527581b9cf6ec560502eea91a82f511a2db77cde
Author: Paul Gortmaker <paul.gortmaker@windriver.com>
Date:   Sun Aug 21 15:58:15 2016 -0400

    MIPS: lib: Audit and remove any unnecessary uses of module.h
    
    Historically a lot of these existed because we did not have
    a distinction between what was modular code and what was providing
    support to modules via EXPORT_SYMBOL and friends.  That changed
    when we forked out support for the latter into the export.h file.
    
    This means we should be able to reduce the usage of module.h
    in code that is obj-y Makefile or bool Kconfig.  The advantage
    in doing so is that module.h itself sources about 15 other headers;
    adding significantly to what we feed cpp, and it can obscure what
    headers we are effectively using.
    
    Since module.h was the source for init.h (for __init) and for
    export.h (for EXPORT_SYMBOL) we consider each obj-y/bool instance
    for the presence of either and replace as needed.
    
    The compiler.h additions are for an implict presence of the
    "notrace" which module.h brought in but export.h does not.
    
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>
    Cc: linux-mips@linux-mips.org
    Patchwork: https://patchwork.linux-mips.org/patch/14034/
    Signed-off-by: Ralf Baechle <ralf@linux-mips.org>

diff --git a/arch/mips/lib/delay.c b/arch/mips/lib/delay.c
index 21d27c6819a2..2307a3cb2714 100644
--- a/arch/mips/lib/delay.c
+++ b/arch/mips/lib/delay.c
@@ -8,7 +8,7 @@
  * Copyright (C) 1999, 2000 Silicon Graphics, Inc.
  * Copyright (C) 2007, 2014 Maciej W. Rozycki
  */
-#include <linux/module.h>
+#include <linux/export.h>
 #include <linux/param.h>
 #include <linux/smp.h>
 #include <linux/stringify.h>

commit e496453d3e15ae3e153a03116cb6070e00ec63ee
Author: Maciej W. Rozycki <macro@linux-mips.org>
Date:   Sun Apr 6 21:42:49 2014 +0100

    MIPS: __delay ABI-dependent subtraction simplification
    
    This small update to the previous fix to __delay removes a conditional
    around the ABI-dependent subtraction operation within an inline asm in
    favor to the standard <asm/asm.h> LONG_SUBU macro.  No change in code
    produced.
    
    Signed-off-by: Maciej W. Rozycki <macro@linux-mips.org>
    Cc: linux-mips@linux-mips.org
    Patchwork: https://patchwork.linux-mips.org/patch/6703/
    Signed-off-by: Ralf Baechle <ralf@linux-mips.org>

diff --git a/arch/mips/lib/delay.c b/arch/mips/lib/delay.c
index 705cfb7c1a74..21d27c6819a2 100644
--- a/arch/mips/lib/delay.c
+++ b/arch/mips/lib/delay.c
@@ -11,7 +11,9 @@
 #include <linux/module.h>
 #include <linux/param.h>
 #include <linux/smp.h>
+#include <linux/stringify.h>
 
+#include <asm/asm.h>
 #include <asm/compiler.h>
 #include <asm/war.h>
 
@@ -27,11 +29,7 @@ void __delay(unsigned long loops)
 	"	.set	noreorder				\n"
 	"	.align	3					\n"
 	"1:	bnez	%0, 1b					\n"
-#if BITS_PER_LONG == 32
-	"	subu	%0, %1					\n"
-#else
-	"	dsubu	%0, %1					\n"
-#endif
+	"	 " __stringify(LONG_SUBU) "	%0, %1		\n"
 	"	.set	reorder					\n"
 	: "=r" (loops)
 	: GCC_DADDI_IMM_ASM() (1), "0" (loops));

commit 2db4bc3418c43f1e810b304c48f8ddff2535075b
Author: Maciej W. Rozycki <macro@linux-mips.org>
Date:   Tue Apr 1 00:57:28 2014 +0100

    MIPS: __delay CPU_DADDI_WORKAROUNDS bug fix
    
    With CPU_DADDI_WORKAROUNDS enabled __delay assembles with a macro in a
    branch delay slot:
    
    {standard input}: Assembler messages:
    {standard input}:18: Warning: Macro instruction expanded into multiple
    instructions in a branch delay slot
    
    and broken code results:
    
    0000000000000000 <__delay>:
       0:   1480ffff        bnez    a0,0 <__delay>
       4:   24010001        li      at,1
       8:   0081202f        dsubu   a0,a0,at
       c:   03e00008        jr      ra
      10:   00000000        nop
      14:   00000000        nop
    
    Consequently the function loops indefinitely, showing up prominently as a
    hang in the delay loop calibration at bootstrap.
    
    This change corrects the problem by forcing the immediate 1 into a
    register while keeping code produced identical where CPU_DADDI_WORKAROUNDS
    is disabled.
    
    Signed-off-by: Maciej W. Rozycki <macro@linux-mips.org>
    Cc: linux-mips@linux-mips.org
    Patchwork: https://patchwork.linux-mips.org/patch/6669/
    Signed-off-by: Ralf Baechle <ralf@linux-mips.org>

diff --git a/arch/mips/lib/delay.c b/arch/mips/lib/delay.c
index 44713af15a62..705cfb7c1a74 100644
--- a/arch/mips/lib/delay.c
+++ b/arch/mips/lib/delay.c
@@ -6,7 +6,7 @@
  * Copyright (C) 1994 by Waldorf Electronics
  * Copyright (C) 1995 - 2000, 01, 03 by Ralf Baechle
  * Copyright (C) 1999, 2000 Silicon Graphics, Inc.
- * Copyright (C) 2007  Maciej W. Rozycki
+ * Copyright (C) 2007, 2014 Maciej W. Rozycki
  */
 #include <linux/module.h>
 #include <linux/param.h>
@@ -15,6 +15,12 @@
 #include <asm/compiler.h>
 #include <asm/war.h>
 
+#ifndef CONFIG_CPU_DADDI_WORKAROUNDS
+#define GCC_DADDI_IMM_ASM() "I"
+#else
+#define GCC_DADDI_IMM_ASM() "r"
+#endif
+
 void __delay(unsigned long loops)
 {
 	__asm__ __volatile__ (
@@ -22,13 +28,13 @@ void __delay(unsigned long loops)
 	"	.align	3					\n"
 	"1:	bnez	%0, 1b					\n"
 #if BITS_PER_LONG == 32
-	"	subu	%0, 1					\n"
+	"	subu	%0, %1					\n"
 #else
-	"	dsubu	%0, 1					\n"
+	"	dsubu	%0, %1					\n"
 #endif
 	"	.set	reorder					\n"
 	: "=r" (loops)
-	: "0" (loops));
+	: GCC_DADDI_IMM_ASM() (1), "0" (loops));
 }
 EXPORT_SYMBOL(__delay);
 

commit 7034228792cc561e79ff8600f02884bd4c80e287
Author: Ralf Baechle <ralf@linux-mips.org>
Date:   Tue Jan 22 12:59:30 2013 +0100

    MIPS: Whitespace cleanup.
    
    Having received another series of whitespace patches I decided to do this
    once and for all rather than dealing with this kind of patches trickling
    in forever.
    
    Signed-off-by: Ralf Baechle <ralf@linux-mips.org>

diff --git a/arch/mips/lib/delay.c b/arch/mips/lib/delay.c
index 288f7954988d..44713af15a62 100644
--- a/arch/mips/lib/delay.c
+++ b/arch/mips/lib/delay.c
@@ -36,7 +36,7 @@ EXPORT_SYMBOL(__delay);
  * Division by multiplication: you don't have to worry about
  * loss of precision.
  *
- * Use only for very small delays ( < 1 msec).  Should probably use a
+ * Use only for very small delays ( < 1 msec).	Should probably use a
  * lookup table, really, as the multiplications take much too long with
  * short delays.  This is a "reasonable" implementation, though (and the
  * first constant multiplications gets optimized away if the delay is

commit 4ea494b528ac1b9df9f0c77ba49e3e8ee108d9ec
Author: Geert Uytterhoeven <geert@linux-m68k.org>
Date:   Thu Dec 6 18:12:17 2012 +0000

    MIPS: delay.c: Check BITS_PER_LONG instead of __SIZEOF_LONG__
    
    When building a 32-bit kernel for RBTX4927 with gcc version 4.1.2 20061115
    (prerelease) (Ubuntu 4.1.1-21), I get:
    
    arch/mips/lib/delay.c:24:5: warning: "__SIZEOF_LONG__" is not defined
    
    As a consequence, __delay() always uses the 64-bit "dsubu" instruction.
    
    Replace the check for "__SIZEOF_LONG__ == 4" by "BITS_PER_LONG == 32" to
    fix this.
    
    Introduced by commit 5210edcd527773c227465ad18e416a894966324f [MIPS: Make
    __{,n,u}delay declarations match definitions and generic delay.h"]
    
    Signed-off-by: Geert Uytterhoeven <geert@linux-m68k.org>
    Patchwork: https://patchwork.linux-mips.org/patch/4678/
    Acked-by: David Daney <david.daney@cavium.com>
    Signed-off-by: Ralf Baechle <ralf@linux-mips.org>

diff --git a/arch/mips/lib/delay.c b/arch/mips/lib/delay.c
index dc81ca8dc0dd..288f7954988d 100644
--- a/arch/mips/lib/delay.c
+++ b/arch/mips/lib/delay.c
@@ -21,7 +21,7 @@ void __delay(unsigned long loops)
 	"	.set	noreorder				\n"
 	"	.align	3					\n"
 	"1:	bnez	%0, 1b					\n"
-#if __SIZEOF_LONG__ == 4
+#if BITS_PER_LONG == 32
 	"	subu	%0, 1					\n"
 #else
 	"	dsubu	%0, 1					\n"

commit 5210edcd527773c227465ad18e416a894966324f
Author: David Daney <david.daney@cavium.com>
Date:   Fri Sep 28 11:34:10 2012 -0700

    MIPS: Make __{,n,u}delay declarations match definitions and generic delay.h
    
    At some recent point arch/mips/include/asm/delay.h has started being
    included into csrc-octeon.c where the __?delay() functions are defined.
    This causes a compile failure due to conflicting declarations and
    definitions of the functions.
    
    It turns out that the generic definitions in arch/mips/lib/delay.c also
    conflict.
    
    Proposed fix: Declare the functions to take unsigned long parameters
    just like asm-generic (and x86) does.  Update __delay to agree
    (__ndelay and __udelay need no change).
    
    Bonus: Get rid of 'inline' from __delay() definition, as it is globally
    visible, and the compiler should be making this decision itself (it does
    in fact inline the function without being told to).
    
    Signed-off-by: David Daney <david.daney@cavium.com>
    Cc: linux-mips@linux-mips.org
    Patchwork: https://patchwork.linux-mips.org/patch/4354/
    Signed-off-by: Ralf Baechle <ralf@linux-mips.org>

diff --git a/arch/mips/lib/delay.c b/arch/mips/lib/delay.c
index 5995969e8c42..dc81ca8dc0dd 100644
--- a/arch/mips/lib/delay.c
+++ b/arch/mips/lib/delay.c
@@ -15,13 +15,17 @@
 #include <asm/compiler.h>
 #include <asm/war.h>
 
-inline void __delay(unsigned int loops)
+void __delay(unsigned long loops)
 {
 	__asm__ __volatile__ (
 	"	.set	noreorder				\n"
 	"	.align	3					\n"
 	"1:	bnez	%0, 1b					\n"
+#if __SIZEOF_LONG__ == 4
 	"	subu	%0, 1					\n"
+#else
+	"	dsubu	%0, 1					\n"
+#endif
 	"	.set	reorder					\n"
 	: "=r" (loops)
 	: "0" (loops));

commit abe5b417fb4a52e9510fdb5a16e722e91bf89e92
Author: Ralf Baechle <ralf@linux-mips.org>
Date:   Wed Mar 10 16:16:04 2010 +0100

    MIPS: delay: Fix use of current_cpu_data in preemptable code.
    
    This may lead to warnings like:
    
    BUG: using smp_processor_id() in preemptible [00000000] code: reboot/1989
    caller is __udelay+0x14/0x70
    Call Trace:
    [<ffffffff8110ad28>] dump_stack+0x8/0x34
    [<ffffffff812dde04>] debug_smp_processor_id+0xf4/0x110
    [<ffffffff812d90bc>] __udelay+0x14/0x70
    [<ffffffff81378274>] md_notify_reboot+0x12c/0x148
    [<ffffffff81161054>] notifier_call_chain+0x64/0xc8
    [<ffffffff811614dc>] __blocking_notifier_call_chain+0x64/0xc0
    [<ffffffff8115566c>] kernel_restart_prepare+0x1c/0x38
    [<ffffffff811556cc>] kernel_restart+0x14/0x50
    [<ffffffff8115581c>] SyS_reboot+0x10c/0x1f0
    [<ffffffff81103684>] handle_sysn32+0x44/0x84
    
    Signed-off-by: Ralf Baechle <ralf@linux-mips.org>

diff --git a/arch/mips/lib/delay.c b/arch/mips/lib/delay.c
index 6b3b1de9dcae..5995969e8c42 100644
--- a/arch/mips/lib/delay.c
+++ b/arch/mips/lib/delay.c
@@ -41,7 +41,7 @@ EXPORT_SYMBOL(__delay);
 
 void __udelay(unsigned long us)
 {
-	unsigned int lpj = current_cpu_data.udelay_val;
+	unsigned int lpj = raw_current_cpu_data.udelay_val;
 
 	__delay((us * 0x000010c7ull * HZ * lpj) >> 32);
 }
@@ -49,7 +49,7 @@ EXPORT_SYMBOL(__udelay);
 
 void __ndelay(unsigned long ns)
 {
-	unsigned int lpj = current_cpu_data.udelay_val;
+	unsigned int lpj = raw_current_cpu_data.udelay_val;
 
 	__delay((ns * 0x00000005ull * HZ * lpj) >> 32);
 }

commit 3cb3a66cf7559d9c5d47ddf58481530b8943052f
Author: Atsushi Nemoto <nemoto@toshiba-tops.co.jp>
Date:   Tue Jun 9 11:12:48 2009 +0900

    MIPS: Fix __ndelay build error and add 'ull' suffix for 32-bit kernel
    
    Signed-off-by: Atsushi Nemoto <anemo@mba.ocn.ne.jp>
    Signed-off-by: Ralf Baechle <ralf@linux-mips.org>

diff --git a/arch/mips/lib/delay.c b/arch/mips/lib/delay.c
index f69c6b569eb3..6b3b1de9dcae 100644
--- a/arch/mips/lib/delay.c
+++ b/arch/mips/lib/delay.c
@@ -43,7 +43,7 @@ void __udelay(unsigned long us)
 {
 	unsigned int lpj = current_cpu_data.udelay_val;
 
-	__delay((us * 0x000010c7 * HZ * lpj) >> 32);
+	__delay((us * 0x000010c7ull * HZ * lpj) >> 32);
 }
 EXPORT_SYMBOL(__udelay);
 
@@ -51,6 +51,6 @@ void __ndelay(unsigned long ns)
 {
 	unsigned int lpj = current_cpu_data.udelay_val;
 
-	__delay((us * 0x00000005 * HZ * lpj) >> 32);
+	__delay((ns * 0x00000005ull * HZ * lpj) >> 32);
 }
 EXPORT_SYMBOL(__ndelay);

commit 5636919b5c909fee54a6ef5226475ecae012ad02
Author: Ralf Baechle <ralf@linux-mips.org>
Date:   Sat Feb 28 09:44:28 2009 +0000

    MIPS: Outline udelay and fix a few issues.
    
    Outlining fixes the issue were on certain CPUs such as the R10000 family
    the delay loop would need an extra cycle if it overlaps a cacheline
    boundary.
    
    The rewrite also fixes build errors with GCC 4.4 which was changed in
    way incompatible with the kernel's inline assembly.
    
    Relying on pure C for computation of the delay value removes the need for
    explicit.  The price we pay is a slight slowdown of the computation - to
    be fixed on another day.
    
    Signed-off-by: Ralf Baechle <ralf@linux-mips.org>

diff --git a/arch/mips/lib/delay.c b/arch/mips/lib/delay.c
new file mode 100644
index 000000000000..f69c6b569eb3
--- /dev/null
+++ b/arch/mips/lib/delay.c
@@ -0,0 +1,56 @@
+/*
+ * This file is subject to the terms and conditions of the GNU General Public
+ * License.  See the file "COPYING" in the main directory of this archive
+ * for more details.
+ *
+ * Copyright (C) 1994 by Waldorf Electronics
+ * Copyright (C) 1995 - 2000, 01, 03 by Ralf Baechle
+ * Copyright (C) 1999, 2000 Silicon Graphics, Inc.
+ * Copyright (C) 2007  Maciej W. Rozycki
+ */
+#include <linux/module.h>
+#include <linux/param.h>
+#include <linux/smp.h>
+
+#include <asm/compiler.h>
+#include <asm/war.h>
+
+inline void __delay(unsigned int loops)
+{
+	__asm__ __volatile__ (
+	"	.set	noreorder				\n"
+	"	.align	3					\n"
+	"1:	bnez	%0, 1b					\n"
+	"	subu	%0, 1					\n"
+	"	.set	reorder					\n"
+	: "=r" (loops)
+	: "0" (loops));
+}
+EXPORT_SYMBOL(__delay);
+
+/*
+ * Division by multiplication: you don't have to worry about
+ * loss of precision.
+ *
+ * Use only for very small delays ( < 1 msec).  Should probably use a
+ * lookup table, really, as the multiplications take much too long with
+ * short delays.  This is a "reasonable" implementation, though (and the
+ * first constant multiplications gets optimized away if the delay is
+ * a constant)
+ */
+
+void __udelay(unsigned long us)
+{
+	unsigned int lpj = current_cpu_data.udelay_val;
+
+	__delay((us * 0x000010c7 * HZ * lpj) >> 32);
+}
+EXPORT_SYMBOL(__udelay);
+
+void __ndelay(unsigned long ns)
+{
+	unsigned int lpj = current_cpu_data.udelay_val;
+
+	__delay((us * 0x00000005 * HZ * lpj) >> 32);
+}
+EXPORT_SYMBOL(__ndelay);
