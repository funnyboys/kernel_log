commit 2874c5fd284268364ece81a7bd936f3c8168e567
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Mon May 27 08:55:01 2019 +0200

    treewide: Replace GPLv2 boilerplate/reference with SPDX - rule 152
    
    Based on 1 normalized pattern(s):
    
      this program is free software you can redistribute it and or modify
      it under the terms of the gnu general public license as published by
      the free software foundation either version 2 of the license or at
      your option any later version
    
    extracted by the scancode license scanner the SPDX license identifier
    
      GPL-2.0-or-later
    
    has been chosen to replace the boilerplate/reference in 3029 file(s).
    
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Reviewed-by: Allison Randal <allison@lohutok.net>
    Cc: linux-spdx@vger.kernel.org
    Link: https://lkml.kernel.org/r/20190527070032.746973796@linutronix.de
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/arch/x86/kernel/sysfb.c b/arch/x86/kernel/sysfb.c
index 160386e9fc17..014ebd8ca869 100644
--- a/arch/x86/kernel/sysfb.c
+++ b/arch/x86/kernel/sysfb.c
@@ -1,11 +1,7 @@
+// SPDX-License-Identifier: GPL-2.0-or-later
 /*
  * Generic System Framebuffers on x86
  * Copyright (c) 2012-2013 David Herrmann <dh.herrmann@gmail.com>
- *
- * This program is free software; you can redistribute it and/or modify it
- * under the terms of the GNU General Public License as published by the Free
- * Software Foundation; either version 2 of the License, or (at your option)
- * any later version.
  */
 
 /*

commit e8d95ce9705c6683f57dc146b8c726c4d2242a52
Author: Fabian Frederick <fabf@skynet.be>
Date:   Fri Oct 17 22:00:53 2014 +0200

    x86/sysfb: Use PTR_ERR_OR_ZERO
    
    Replace IS_ERR/PTR_ERR
    
    Signed-off-by: Fabian Frederick <fabf@skynet.be>
    Link: http://lkml.kernel.org/r/1413576053-26761-1-git-send-email-fabf@skynet.be
    Signed-off-by: H. Peter Anvin <hpa@linux.intel.com>

diff --git a/arch/x86/kernel/sysfb.c b/arch/x86/kernel/sysfb.c
index 193ec2ce46c7..160386e9fc17 100644
--- a/arch/x86/kernel/sysfb.c
+++ b/arch/x86/kernel/sysfb.c
@@ -67,7 +67,7 @@ static __init int sysfb_init(void)
 
 	pd = platform_device_register_resndata(NULL, name, 0,
 					       NULL, 0, si, sizeof(*si));
-	return IS_ERR(pd) ? PTR_ERR(pd) : 0;
+	return PTR_ERR_OR_ZERO(pd);
 }
 
 /* must execute after PCI subsystem for EFI quirks */

commit 2995e506276bfdc7311eb02db8b2aa1a61a4b849
Author: David Herrmann <dh.herrmann@gmail.com>
Date:   Fri Aug 2 14:05:23 2013 +0200

    x86: sysfb: move EFI quirks from efifb to sysfb
    
    The EFI FB quirks from efifb.c are useful for simple-framebuffer devices
    as well. Apply them by default so we can convert efifb.c to use
    efi-framebuffer platform devices.
    
    Signed-off-by: David Herrmann <dh.herrmann@gmail.com>
    Link: http://lkml.kernel.org/r/1375445127-15480-5-git-send-email-dh.herrmann@gmail.com
    Signed-off-by: H. Peter Anvin <hpa@linux.intel.com>

diff --git a/arch/x86/kernel/sysfb.c b/arch/x86/kernel/sysfb.c
index 7f30e194eb52..193ec2ce46c7 100644
--- a/arch/x86/kernel/sysfb.c
+++ b/arch/x86/kernel/sysfb.c
@@ -47,6 +47,8 @@ static __init int sysfb_init(void)
 	bool compatible;
 	int ret;
 
+	sysfb_apply_efi_quirks();
+
 	/* try to create a simple-framebuffer device */
 	compatible = parse_mode(si, &mode);
 	if (compatible) {
@@ -68,4 +70,5 @@ static __init int sysfb_init(void)
 	return IS_ERR(pd) ? PTR_ERR(pd) : 0;
 }
 
+/* must execute after PCI subsystem for EFI quirks */
 device_initcall(sysfb_init);

commit e3263ab389a7bc9398c3d366819d6f39b9cfd677
Author: David Herrmann <dh.herrmann@gmail.com>
Date:   Fri Aug 2 14:05:22 2013 +0200

    x86: provide platform-devices for boot-framebuffers
    
    The current situation regarding boot-framebuffers (VGA, VESA/VBE, EFI) on
    x86 causes troubles when loading multiple fbdev drivers. The global
    "struct screen_info" does not provide any state-tracking about which
    drivers use the FBs. request_mem_region() theoretically works, but
    unfortunately vesafb/efifb ignore it due to quirks for broken boards.
    
    Avoid this by creating a platform framebuffer devices with a pointer
    to the "struct screen_info" as platform-data. Drivers can now create
    platform-drivers and the driver-core will refuse multiple drivers being
    active simultaneously.
    
    We keep the screen_info available for backwards-compatibility. Drivers
    can be converted in follow-up patches.
    
    Different devices are created for VGA/VESA/EFI FBs to allow multiple
    drivers to be loaded on distro kernels. We create:
     - "vesa-framebuffer" for VBE/VESA graphics FBs
     - "efi-framebuffer" for EFI FBs
     - "platform-framebuffer" for everything else
    This allows to load vesafb, efifb and others simultaneously and each
    picks up only the supported FB types.
    
    Apart from platform-framebuffer devices, this also introduces a
    compatibility option for "simple-framebuffer" drivers which recently got
    introduced for OF based systems. If CONFIG_X86_SYSFB is selected, we
    try to match the screen_info against a simple-framebuffer supported
    format. If we succeed, we create a "simple-framebuffer" device instead
    of a platform-framebuffer.
    This allows to reuse the simplefb.c driver across architectures and also
    to introduce a SimpleDRM driver. There is no need to have vesafb.c,
    efifb.c, simplefb.c and more just to have architecture specific quirks
    in their setup-routines.
    
    Instead, we now move the architecture specific quirks into x86-setup and
    provide a generic simple-framebuffer. For backwards-compatibility (if
    strange formats are used), we still allow vesafb/efifb to be loaded
    simultaneously and pick up all remaining devices.
    
    Signed-off-by: David Herrmann <dh.herrmann@gmail.com>
    Link: http://lkml.kernel.org/r/1375445127-15480-4-git-send-email-dh.herrmann@gmail.com
    Tested-by: Stephen Warren <swarren@nvidia.com>
    Signed-off-by: H. Peter Anvin <hpa@linux.intel.com>

diff --git a/arch/x86/kernel/sysfb.c b/arch/x86/kernel/sysfb.c
new file mode 100644
index 000000000000..7f30e194eb52
--- /dev/null
+++ b/arch/x86/kernel/sysfb.c
@@ -0,0 +1,71 @@
+/*
+ * Generic System Framebuffers on x86
+ * Copyright (c) 2012-2013 David Herrmann <dh.herrmann@gmail.com>
+ *
+ * This program is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License as published by the Free
+ * Software Foundation; either version 2 of the License, or (at your option)
+ * any later version.
+ */
+
+/*
+ * Simple-Framebuffer support for x86 systems
+ * Create a platform-device for any available boot framebuffer. The
+ * simple-framebuffer platform device is already available on DT systems, so
+ * this module parses the global "screen_info" object and creates a suitable
+ * platform device compatible with the "simple-framebuffer" DT object. If
+ * the framebuffer is incompatible, we instead create a legacy
+ * "vesa-framebuffer", "efi-framebuffer" or "platform-framebuffer" device and
+ * pass the screen_info as platform_data. This allows legacy drivers
+ * to pick these devices up without messing with simple-framebuffer drivers.
+ * The global "screen_info" is still valid at all times.
+ *
+ * If CONFIG_X86_SYSFB is not selected, we never register "simple-framebuffer"
+ * platform devices, but only use legacy framebuffer devices for
+ * backwards compatibility.
+ *
+ * TODO: We set the dev_id field of all platform-devices to 0. This allows
+ * other x86 OF/DT parsers to create such devices, too. However, they must
+ * start at offset 1 for this to work.
+ */
+
+#include <linux/err.h>
+#include <linux/init.h>
+#include <linux/kernel.h>
+#include <linux/mm.h>
+#include <linux/platform_data/simplefb.h>
+#include <linux/platform_device.h>
+#include <linux/screen_info.h>
+#include <asm/sysfb.h>
+
+static __init int sysfb_init(void)
+{
+	struct screen_info *si = &screen_info;
+	struct simplefb_platform_data mode;
+	struct platform_device *pd;
+	const char *name;
+	bool compatible;
+	int ret;
+
+	/* try to create a simple-framebuffer device */
+	compatible = parse_mode(si, &mode);
+	if (compatible) {
+		ret = create_simplefb(si, &mode);
+		if (!ret)
+			return 0;
+	}
+
+	/* if the FB is incompatible, create a legacy framebuffer device */
+	if (si->orig_video_isVGA == VIDEO_TYPE_EFI)
+		name = "efi-framebuffer";
+	else if (si->orig_video_isVGA == VIDEO_TYPE_VLFB)
+		name = "vesa-framebuffer";
+	else
+		name = "platform-framebuffer";
+
+	pd = platform_device_register_resndata(NULL, name, 0,
+					       NULL, 0, si, sizeof(*si));
+	return IS_ERR(pd) ? PTR_ERR(pd) : 0;
+}
+
+device_initcall(sysfb_init);
