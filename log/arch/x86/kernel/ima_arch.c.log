commit e9765680a31b22ca6703936c000ce5cc46192e10
Merge: c5f86891185c dc235d62fc60
Author: Ingo Molnar <mingo@kernel.org>
Date:   Wed Feb 26 15:21:22 2020 +0100

    Merge tag 'efi-next' of git://git.kernel.org/pub/scm/linux/kernel/git/efi/efi into efi/core
    
    Pull EFI updates for v5.7 from Ard Biesheuvel:
    
    This time, the set of changes for the EFI subsystem is much larger than
    usual. The main reasons are:
    
     - Get things cleaned up before EFI support for RISC-V arrives, which will
       increase the size of the validation matrix, and therefore the threshold to
       making drastic changes,
    
     - After years of defunct maintainership, the GRUB project has finally started
       to consider changes from the distros regarding UEFI boot, some of which are
       highly specific to the way x86 does UEFI secure boot and measured boot,
       based on knowledge of both shim internals and the layout of bootparams and
       the x86 setup header. Having this maintenance burden on other architectures
       (which don't need shim in the first place) is hard to justify, so instead,
       we are introducing a generic Linux/UEFI boot protocol.
    
    Summary of changes:
    
     - Boot time GDT handling changes (Arvind)
    
     - Simplify handling of EFI properties table on arm64
    
     - Generic EFI stub cleanups, to improve command line handling, file I/O,
       memory allocation, etc.
    
     - Introduce a generic initrd loading method based on calling back into
       the firmware, instead of relying on the x86 EFI handover protocol or
       device tree.
    
     - Introduce a mixed mode boot method that does not rely on the x86 EFI
       handover protocol either, and could potentially be adopted by other
       architectures (if another one ever surfaces where one execution mode
       is a superset of another)
    
     - Clean up the contents of struct efi, and move out everything that
       doesn't need to be stored there.
    
     - Incorporate support for UEFI spec v2.8A changes that permit firmware
       implementations to return EFI_UNSUPPORTED from UEFI runtime services at
       OS runtime, and expose a mask of which ones are supported or unsupported
       via a configuration table.
    
     - Various documentation updates and minor code cleanups (Heinrich)
    
     - Partial fix for the lack of by-VA cache maintenance in the decompressor
       on 32-bit ARM. Note that these patches were deliberately put at the
       beginning so they can be used as a stable branch that will be shared with
       a PR containing the complete fix, which I will send to the ARM tree.
    
    Signed-off-by: Ingo Molnar <mingo@kernel.org>

commit 9a440391b560347bf5ee7cb96b63e7e91cedf66a
Author: Ard Biesheuvel <ardb@kernel.org>
Date:   Thu Jan 23 13:09:35 2020 +0100

    x86/ima: Use EFI GetVariable only when available
    
    Replace the EFI runtime services check with one that tells us whether
    EFI GetVariable() is implemented by the firmware.
    
    Signed-off-by: Ard Biesheuvel <ardb@kernel.org>

diff --git a/arch/x86/kernel/ima_arch.c b/arch/x86/kernel/ima_arch.c
index 4d4f5d9faac3..cb6ed616a543 100644
--- a/arch/x86/kernel/ima_arch.c
+++ b/arch/x86/kernel/ima_arch.c
@@ -19,7 +19,7 @@ static enum efi_secureboot_mode get_sb_mode(void)
 
 	size = sizeof(secboot);
 
-	if (!efi_enabled(EFI_RUNTIME_SERVICES)) {
+	if (!efi_rt_services_supported(EFI_RT_SUPPORTED_GET_VARIABLE)) {
 		pr_info("ima: secureboot mode unknown, no efi\n");
 		return efi_secureboot_mode_unknown;
 	}

commit ff5ac61ee83c13f516544d29847d28be093a40ee
Author: Ard Biesheuvel <ardb@kernel.org>
Date:   Sat Feb 1 09:32:21 2020 +0100

    x86/ima: use correct identifier for SetupMode variable
    
    The IMA arch code attempts to inspect the "SetupMode" EFI variable
    by populating a variable called efi_SetupMode_name with the string
    "SecureBoot" and passing that to the EFI GetVariable service, which
    obviously does not yield the expected result.
    
    Given that the string is only referenced a single time, let's get
    rid of the intermediate variable, and pass the correct string as
    an immediate argument. While at it, do the same for "SecureBoot".
    
    Fixes: 399574c64eaf ("x86/ima: retry detecting secure boot mode")
    Fixes: 980ef4d22a95 ("x86/ima: check EFI SetupMode too")
    Cc: Matthew Garrett <mjg59@google.com>
    Signed-off-by: Ard Biesheuvel <ardb@kernel.org>
    Cc: stable@vger.kernel.org # v5.3
    Signed-off-by: Mimi Zohar <zohar@linux.ibm.com>

diff --git a/arch/x86/kernel/ima_arch.c b/arch/x86/kernel/ima_arch.c
index 4d4f5d9faac3..23054909c8dd 100644
--- a/arch/x86/kernel/ima_arch.c
+++ b/arch/x86/kernel/ima_arch.c
@@ -10,8 +10,6 @@ extern struct boot_params boot_params;
 
 static enum efi_secureboot_mode get_sb_mode(void)
 {
-	efi_char16_t efi_SecureBoot_name[] = L"SecureBoot";
-	efi_char16_t efi_SetupMode_name[] = L"SecureBoot";
 	efi_guid_t efi_variable_guid = EFI_GLOBAL_VARIABLE_GUID;
 	efi_status_t status;
 	unsigned long size;
@@ -25,7 +23,7 @@ static enum efi_secureboot_mode get_sb_mode(void)
 	}
 
 	/* Get variable contents into buffer */
-	status = efi.get_variable(efi_SecureBoot_name, &efi_variable_guid,
+	status = efi.get_variable(L"SecureBoot", &efi_variable_guid,
 				  NULL, &size, &secboot);
 	if (status == EFI_NOT_FOUND) {
 		pr_info("ima: secureboot mode disabled\n");
@@ -38,7 +36,7 @@ static enum efi_secureboot_mode get_sb_mode(void)
 	}
 
 	size = sizeof(setupmode);
-	status = efi.get_variable(efi_SetupMode_name, &efi_variable_guid,
+	status = efi.get_variable(L"SetupMode", &efi_variable_guid,
 				  NULL, &size, &setupmode);
 
 	if (status != EFI_SUCCESS)	/* ignore unknown SetupMode */

commit aefcf2f4b58155d27340ba5f9ddbe9513da8286d
Merge: f1f2f614d535 45893a0abee6
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Sat Sep 28 08:14:15 2019 -0700

    Merge branch 'next-lockdown' of git://git.kernel.org/pub/scm/linux/kernel/git/jmorris/linux-security
    
    Pull kernel lockdown mode from James Morris:
     "This is the latest iteration of the kernel lockdown patchset, from
      Matthew Garrett, David Howells and others.
    
      From the original description:
    
        This patchset introduces an optional kernel lockdown feature,
        intended to strengthen the boundary between UID 0 and the kernel.
        When enabled, various pieces of kernel functionality are restricted.
        Applications that rely on low-level access to either hardware or the
        kernel may cease working as a result - therefore this should not be
        enabled without appropriate evaluation beforehand.
    
        The majority of mainstream distributions have been carrying variants
        of this patchset for many years now, so there's value in providing a
        doesn't meet every distribution requirement, but gets us much closer
        to not requiring external patches.
    
      There are two major changes since this was last proposed for mainline:
    
       - Separating lockdown from EFI secure boot. Background discussion is
         covered here: https://lwn.net/Articles/751061/
    
       -  Implementation as an LSM, with a default stackable lockdown LSM
          module. This allows the lockdown feature to be policy-driven,
          rather than encoding an implicit policy within the mechanism.
    
      The new locked_down LSM hook is provided to allow LSMs to make a
      policy decision around whether kernel functionality that would allow
      tampering with or examining the runtime state of the kernel should be
      permitted.
    
      The included lockdown LSM provides an implementation with a simple
      policy intended for general purpose use. This policy provides a coarse
      level of granularity, controllable via the kernel command line:
    
        lockdown={integrity|confidentiality}
    
      Enable the kernel lockdown feature. If set to integrity, kernel features
      that allow userland to modify the running kernel are disabled. If set to
      confidentiality, kernel features that allow userland to extract
      confidential information from the kernel are also disabled.
    
      This may also be controlled via /sys/kernel/security/lockdown and
      overriden by kernel configuration.
    
      New or existing LSMs may implement finer-grained controls of the
      lockdown features. Refer to the lockdown_reason documentation in
      include/linux/security.h for details.
    
      The lockdown feature has had signficant design feedback and review
      across many subsystems. This code has been in linux-next for some
      weeks, with a few fixes applied along the way.
    
      Stephen Rothwell noted that commit 9d1f8be5cf42 ("bpf: Restrict bpf
      when kernel lockdown is in confidentiality mode") is missing a
      Signed-off-by from its author. Matthew responded that he is providing
      this under category (c) of the DCO"
    
    * 'next-lockdown' of git://git.kernel.org/pub/scm/linux/kernel/git/jmorris/linux-security: (31 commits)
      kexec: Fix file verification on S390
      security: constify some arrays in lockdown LSM
      lockdown: Print current->comm in restriction messages
      efi: Restrict efivar_ssdt_load when the kernel is locked down
      tracefs: Restrict tracefs when the kernel is locked down
      debugfs: Restrict debugfs when the kernel is locked down
      kexec: Allow kexec_file() with appropriate IMA policy when locked down
      lockdown: Lock down perf when in confidentiality mode
      bpf: Restrict bpf when kernel lockdown is in confidentiality mode
      lockdown: Lock down tracing and perf kprobes when in confidentiality mode
      lockdown: Lock down /proc/kcore
      x86/mmiotrace: Lock down the testmmiotrace module
      lockdown: Lock down module params that specify hardware parameters (eg. ioport)
      lockdown: Lock down TIOCSSERIAL
      lockdown: Prohibit PCMCIA CIS storage when the kernel is locked down
      acpi: Disable ACPI table override if the kernel is locked down
      acpi: Ignore acpi_rsdp kernel param when the kernel has been locked down
      ACPI: Limit access to custom_method when the kernel is locked down
      x86/msr: Restrict MSR access when the kernel is locked down
      x86: Lock down IO port access when the kernel is locked down
      ...

commit 99d5cadfde2b1acb7650021df5abaa5ec447dd10
Author: Jiri Bohac <jbohac@suse.cz>
Date:   Mon Aug 19 17:17:44 2019 -0700

    kexec_file: split KEXEC_VERIFY_SIG into KEXEC_SIG and KEXEC_SIG_FORCE
    
    This is a preparatory patch for kexec_file_load() lockdown.  A locked down
    kernel needs to prevent unsigned kernel images from being loaded with
    kexec_file_load().  Currently, the only way to force the signature
    verification is compiling with KEXEC_VERIFY_SIG.  This prevents loading
    usigned images even when the kernel is not locked down at runtime.
    
    This patch splits KEXEC_VERIFY_SIG into KEXEC_SIG and KEXEC_SIG_FORCE.
    Analogous to the MODULE_SIG and MODULE_SIG_FORCE for modules, KEXEC_SIG
    turns on the signature verification but allows unsigned images to be
    loaded.  KEXEC_SIG_FORCE disallows images without a valid signature.
    
    Signed-off-by: Jiri Bohac <jbohac@suse.cz>
    Signed-off-by: David Howells <dhowells@redhat.com>
    Signed-off-by: Matthew Garrett <mjg59@google.com>
    cc: kexec@lists.infradead.org
    Signed-off-by: James Morris <jmorris@namei.org>

diff --git a/arch/x86/kernel/ima_arch.c b/arch/x86/kernel/ima_arch.c
index 64b973f0e985..b98890894731 100644
--- a/arch/x86/kernel/ima_arch.c
+++ b/arch/x86/kernel/ima_arch.c
@@ -66,9 +66,9 @@ bool arch_ima_get_secureboot(void)
 
 /* secureboot arch rules */
 static const char * const sb_arch_rules[] = {
-#if !IS_ENABLED(CONFIG_KEXEC_VERIFY_SIG)
+#if !IS_ENABLED(CONFIG_KEXEC_SIG)
 	"appraise func=KEXEC_KERNEL_CHECK appraise_type=imasig",
-#endif /* CONFIG_KEXEC_VERIFY_SIG */
+#endif /* CONFIG_KEXEC_SIG */
 	"measure func=KEXEC_KERNEL_CHECK",
 #if !IS_ENABLED(CONFIG_MODULE_SIG)
 	"appraise func=MODULE_CHECK appraise_type=imasig",

commit 980ef4d22a95a3cd84a9b8ffaa7b81b391d173c6
Author: Mimi Zohar <zohar@linux.ibm.com>
Date:   Wed Apr 24 13:05:46 2019 -0400

    x86/ima: check EFI SetupMode too
    
    Checking "SecureBoot" mode is not sufficient, also check "SetupMode".
    
    Fixes: 399574c64eaf ("x86/ima: retry detecting secure boot mode")
    Reported-by: Matthew Garrett <mjg59@google.com>
    Signed-off-by: Mimi Zohar <zohar@linux.ibm.com>

diff --git a/arch/x86/kernel/ima_arch.c b/arch/x86/kernel/ima_arch.c
index 64b973f0e985..4c407833faca 100644
--- a/arch/x86/kernel/ima_arch.c
+++ b/arch/x86/kernel/ima_arch.c
@@ -11,10 +11,11 @@ extern struct boot_params boot_params;
 static enum efi_secureboot_mode get_sb_mode(void)
 {
 	efi_char16_t efi_SecureBoot_name[] = L"SecureBoot";
+	efi_char16_t efi_SetupMode_name[] = L"SecureBoot";
 	efi_guid_t efi_variable_guid = EFI_GLOBAL_VARIABLE_GUID;
 	efi_status_t status;
 	unsigned long size;
-	u8 secboot;
+	u8 secboot, setupmode;
 
 	size = sizeof(secboot);
 
@@ -36,7 +37,14 @@ static enum efi_secureboot_mode get_sb_mode(void)
 		return efi_secureboot_mode_unknown;
 	}
 
-	if (secboot == 0) {
+	size = sizeof(setupmode);
+	status = efi.get_variable(efi_SetupMode_name, &efi_variable_guid,
+				  NULL, &size, &setupmode);
+
+	if (status != EFI_SUCCESS)	/* ignore unknown SetupMode */
+		setupmode = 0;
+
+	if (secboot == 0 || setupmode == 1) {
 		pr_info("ima: secureboot mode disabled\n");
 		return efi_secureboot_mode_disabled;
 	}

commit 558b523d46289f111d53d7c42211069063be5985
Author: Scott Wood <swood@redhat.com>
Date:   Tue Apr 23 17:48:07 2019 -0500

    x86/ima: Check EFI_RUNTIME_SERVICES before using
    
    Checking efi_enabled(EFI_BOOT) is not sufficient to ensure that
    EFI runtime services are available, e.g. if efi=noruntime is used.
    
    Without this, I get an oops on a PREEMPT_RT kernel where efi=noruntime is
    the default.
    
    Fixes: 399574c64eaf94e8 ("x86/ima: retry detecting secure boot mode")
    Cc: stable@vger.kernel.org  (linux-5.0)
    Signed-off-by: Scott Wood <swood@redhat.com>
    Signed-off-by: Mimi Zohar <zohar@linux.ibm.com>

diff --git a/arch/x86/kernel/ima_arch.c b/arch/x86/kernel/ima_arch.c
index 85de790583f9..64b973f0e985 100644
--- a/arch/x86/kernel/ima_arch.c
+++ b/arch/x86/kernel/ima_arch.c
@@ -18,6 +18,11 @@ static enum efi_secureboot_mode get_sb_mode(void)
 
 	size = sizeof(secboot);
 
+	if (!efi_enabled(EFI_RUNTIME_SERVICES)) {
+		pr_info("ima: secureboot mode unknown, no efi\n");
+		return efi_secureboot_mode_unknown;
+	}
+
 	/* Get variable contents into buffer */
 	status = efi.get_variable(efi_SecureBoot_name, &efi_variable_guid,
 				  NULL, &size, &secboot);

commit 3d45ad9260c35c597706847e196aae8d966a574f
Author: Mimi Zohar <zohar@linux.ibm.com>
Date:   Wed Apr 3 22:12:17 2019 -0400

    x86/ima: add missing include
    
    As reported by 0-DAY kernel test infrastructure:
       arch/x86//kernel/ima_arch.c: In function 'arch_get_ima_policy':
    >> arch/x86//kernel/ima_arch.c:78:4: error: implicit declaration of
    function 'set_module_sig_enforced' [-Werror=implicit-function-declaration]
    
    Signed-off-by: Mimi Zohar <zohar@linux.ibm.com>

diff --git a/arch/x86/kernel/ima_arch.c b/arch/x86/kernel/ima_arch.c
index 3fb9847f1cad..85de790583f9 100644
--- a/arch/x86/kernel/ima_arch.c
+++ b/arch/x86/kernel/ima_arch.c
@@ -3,6 +3,7 @@
  * Copyright (C) 2018 IBM Corporation
  */
 #include <linux/efi.h>
+#include <linux/module.h>
 #include <linux/ima.h>
 
 extern struct boot_params boot_params;

commit 8db5da0b8618df79eceea99672e205d4a2a6309e
Author: Mimi Zohar <zohar@linux.ibm.com>
Date:   Sun Jan 27 19:03:45 2019 -0500

    x86/ima: require signed kernel modules
    
    Have the IMA architecture specific policy require signed kernel modules
    on systems with secure boot mode enabled; and coordinate the different
    signature verification methods, so only one signature is required.
    
    Requiring appended kernel module signatures may be configured, enabled
    on the boot command line, or with this patch enabled in secure boot
    mode.  This patch defines set_module_sig_enforced().
    
    To coordinate between appended kernel module signatures and IMA
    signatures, only define an IMA MODULE_CHECK policy rule if
    CONFIG_MODULE_SIG is not enabled.  A custom IMA policy may still define
    and require an IMA signature.
    
    Signed-off-by: Mimi Zohar <zohar@linux.ibm.com>
    Reviewed-by: Luis Chamberlain <mcgrof@kernel.org>
    Acked-by: Jessica Yu <jeyu@kernel.org>

diff --git a/arch/x86/kernel/ima_arch.c b/arch/x86/kernel/ima_arch.c
index e47cd9390ab4..3fb9847f1cad 100644
--- a/arch/x86/kernel/ima_arch.c
+++ b/arch/x86/kernel/ima_arch.c
@@ -64,12 +64,19 @@ static const char * const sb_arch_rules[] = {
 	"appraise func=KEXEC_KERNEL_CHECK appraise_type=imasig",
 #endif /* CONFIG_KEXEC_VERIFY_SIG */
 	"measure func=KEXEC_KERNEL_CHECK",
+#if !IS_ENABLED(CONFIG_MODULE_SIG)
+	"appraise func=MODULE_CHECK appraise_type=imasig",
+#endif
+	"measure func=MODULE_CHECK",
 	NULL
 };
 
 const char * const *arch_get_ima_policy(void)
 {
-	if (IS_ENABLED(CONFIG_IMA_ARCH_POLICY) && arch_ima_get_secureboot())
+	if (IS_ENABLED(CONFIG_IMA_ARCH_POLICY) && arch_ima_get_secureboot()) {
+		if (IS_ENABLED(CONFIG_MODULE_SIG))
+			set_module_sig_enforced();
 		return sb_arch_rules;
+	}
 	return NULL;
 }

commit 399574c64eaf94e82b7cf056978d7e68748c0f1d
Author: Mimi Zohar <zohar@linux.ibm.com>
Date:   Sun Nov 18 04:08:12 2018 -0500

    x86/ima: retry detecting secure boot mode
    
    The secure boot mode may not be detected on boot for some reason (eg.
    buggy firmware).  This patch attempts one more time to detect the
    secure boot mode.
    
    Signed-off-by: Mimi Zohar <zohar@linux.ibm.com>

diff --git a/arch/x86/kernel/ima_arch.c b/arch/x86/kernel/ima_arch.c
index 6c248616ee57..e47cd9390ab4 100644
--- a/arch/x86/kernel/ima_arch.c
+++ b/arch/x86/kernel/ima_arch.c
@@ -7,10 +7,52 @@
 
 extern struct boot_params boot_params;
 
+static enum efi_secureboot_mode get_sb_mode(void)
+{
+	efi_char16_t efi_SecureBoot_name[] = L"SecureBoot";
+	efi_guid_t efi_variable_guid = EFI_GLOBAL_VARIABLE_GUID;
+	efi_status_t status;
+	unsigned long size;
+	u8 secboot;
+
+	size = sizeof(secboot);
+
+	/* Get variable contents into buffer */
+	status = efi.get_variable(efi_SecureBoot_name, &efi_variable_guid,
+				  NULL, &size, &secboot);
+	if (status == EFI_NOT_FOUND) {
+		pr_info("ima: secureboot mode disabled\n");
+		return efi_secureboot_mode_disabled;
+	}
+
+	if (status != EFI_SUCCESS) {
+		pr_info("ima: secureboot mode unknown\n");
+		return efi_secureboot_mode_unknown;
+	}
+
+	if (secboot == 0) {
+		pr_info("ima: secureboot mode disabled\n");
+		return efi_secureboot_mode_disabled;
+	}
+
+	pr_info("ima: secureboot mode enabled\n");
+	return efi_secureboot_mode_enabled;
+}
+
 bool arch_ima_get_secureboot(void)
 {
-	if (efi_enabled(EFI_BOOT) &&
-		(boot_params.secure_boot == efi_secureboot_mode_enabled))
+	static enum efi_secureboot_mode sb_mode;
+	static bool initialized;
+
+	if (!initialized && efi_enabled(EFI_BOOT)) {
+		sb_mode = boot_params.secure_boot;
+
+		if (sb_mode == efi_secureboot_mode_unset)
+			sb_mode = get_sb_mode();
+		initialized = true;
+	}
+
+	if (sb_mode == efi_secureboot_mode_enabled)
 		return true;
 	else
 		return false;

commit d958083a8f6408e76850bc7394976050d7e43173
Author: Eric Richter <erichte@linux.ibm.com>
Date:   Tue Oct 9 23:00:37 2018 +0530

    x86/ima: define arch_get_ima_policy() for x86
    
    On x86, there are two methods of verifying a kexec'ed kernel image
    signature being loaded via the kexec_file_load syscall - an architecture
    specific implementaton or a IMA KEXEC_KERNEL_CHECK appraisal rule. Neither
    of these methods verify the kexec'ed kernel image signature being loaded
    via the kexec_load syscall.
    
    Secure boot enabled systems require kexec images to be signed. Therefore,
    this patch loads an IMA KEXEC_KERNEL_CHECK policy rule on secure boot
    enabled systems not configured with CONFIG_KEXEC_VERIFY_SIG enabled.
    
    When IMA_APPRAISE_BOOTPARAM is configured, different IMA appraise modes
    (eg. fix, log) can be specified on the boot command line, allowing unsigned
    or invalidly signed kernel images to be kexec'ed. This patch permits
    enabling IMA_APPRAISE_BOOTPARAM or IMA_ARCH_POLICY, but not both.
    
    Signed-off-by: Eric Richter <erichte@linux.ibm.com>
    Signed-off-by: Nayna Jain <nayna@linux.ibm.com>
    Cc: David Howells <dhowells@redhat.com>
    Cc: Eric Biederman <ebiederm@xmission.com>
    Cc: Peter Jones <pjones@redhat.com>
    Cc: Vivek Goyal <vgoyal@redhat.com>
    Cc: Dave Young <dyoung@redhat.com>
    Signed-off-by: Mimi Zohar <zohar@linux.ibm.com>

diff --git a/arch/x86/kernel/ima_arch.c b/arch/x86/kernel/ima_arch.c
index bb5a88d2b271..6c248616ee57 100644
--- a/arch/x86/kernel/ima_arch.c
+++ b/arch/x86/kernel/ima_arch.c
@@ -15,3 +15,19 @@ bool arch_ima_get_secureboot(void)
 	else
 		return false;
 }
+
+/* secureboot arch rules */
+static const char * const sb_arch_rules[] = {
+#if !IS_ENABLED(CONFIG_KEXEC_VERIFY_SIG)
+	"appraise func=KEXEC_KERNEL_CHECK appraise_type=imasig",
+#endif /* CONFIG_KEXEC_VERIFY_SIG */
+	"measure func=KEXEC_KERNEL_CHECK",
+	NULL
+};
+
+const char * const *arch_get_ima_policy(void)
+{
+	if (IS_ENABLED(CONFIG_IMA_ARCH_POLICY) && arch_ima_get_secureboot())
+		return sb_arch_rules;
+	return NULL;
+}

commit 0914ade209c452cff6a29b1c0ae6fff3167fa1d0
Author: Nayna Jain <nayna@linux.ibm.com>
Date:   Tue Oct 9 23:00:33 2018 +0530

    x86/ima: define arch_ima_get_secureboot
    
    Distros are concerned about totally disabling the kexec_load syscall.
    As a compromise, the kexec_load syscall will only be disabled when
    CONFIG_KEXEC_VERIFY_SIG is configured and the system is booted with
    secureboot enabled.
    
    This patch defines the new arch specific function called
    arch_ima_get_secureboot() to retrieve the secureboot state of the system.
    
    Signed-off-by: Nayna Jain <nayna@linux.ibm.com>
    Suggested-by: Seth Forshee <seth.forshee@canonical.com>
    Cc: David Howells <dhowells@redhat.com>
    Cc: Eric Biederman <ebiederm@xmission.com>
    Cc: Peter Jones <pjones@redhat.com>
    Cc: Vivek Goyal <vgoyal@redhat.com>
    Cc: Dave Young <dyoung@redhat.com>
    Signed-off-by: Mimi Zohar <zohar@linux.ibm.com>

diff --git a/arch/x86/kernel/ima_arch.c b/arch/x86/kernel/ima_arch.c
new file mode 100644
index 000000000000..bb5a88d2b271
--- /dev/null
+++ b/arch/x86/kernel/ima_arch.c
@@ -0,0 +1,17 @@
+/* SPDX-License-Identifier: GPL-2.0+ */
+/*
+ * Copyright (C) 2018 IBM Corporation
+ */
+#include <linux/efi.h>
+#include <linux/ima.h>
+
+extern struct boot_params boot_params;
+
+bool arch_ima_get_secureboot(void)
+{
+	if (efi_enabled(EFI_BOOT) &&
+		(boot_params.secure_boot == efi_secureboot_mode_enabled))
+		return true;
+	else
+		return false;
+}
