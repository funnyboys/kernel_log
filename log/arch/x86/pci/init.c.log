commit b24413180f5600bcb3bb70fbed5cf186b60864bd
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Wed Nov 1 15:07:57 2017 +0100

    License cleanup: add SPDX GPL-2.0 license identifier to files with no license
    
    Many source files in the tree are missing licensing information, which
    makes it harder for compliance tools to determine the correct license.
    
    By default all files without license information are under the default
    license of the kernel, which is GPL version 2.
    
    Update the files which contain no license information with the 'GPL-2.0'
    SPDX license identifier.  The SPDX identifier is a legally binding
    shorthand, which can be used instead of the full boiler plate text.
    
    This patch is based on work done by Thomas Gleixner and Kate Stewart and
    Philippe Ombredanne.
    
    How this work was done:
    
    Patches were generated and checked against linux-4.14-rc6 for a subset of
    the use cases:
     - file had no licensing information it it.
     - file was a */uapi/* one with no licensing information in it,
     - file was a */uapi/* one with existing licensing information,
    
    Further patches will be generated in subsequent months to fix up cases
    where non-standard license headers were used, and references to license
    had to be inferred by heuristics based on keywords.
    
    The analysis to determine which SPDX License Identifier to be applied to
    a file was done in a spreadsheet of side by side results from of the
    output of two independent scanners (ScanCode & Windriver) producing SPDX
    tag:value files created by Philippe Ombredanne.  Philippe prepared the
    base worksheet, and did an initial spot review of a few 1000 files.
    
    The 4.13 kernel was the starting point of the analysis with 60,537 files
    assessed.  Kate Stewart did a file by file comparison of the scanner
    results in the spreadsheet to determine which SPDX license identifier(s)
    to be applied to the file. She confirmed any determination that was not
    immediately clear with lawyers working with the Linux Foundation.
    
    Criteria used to select files for SPDX license identifier tagging was:
     - Files considered eligible had to be source code files.
     - Make and config files were included as candidates if they contained >5
       lines of source
     - File already had some variant of a license header in it (even if <5
       lines).
    
    All documentation files were explicitly excluded.
    
    The following heuristics were used to determine which SPDX license
    identifiers to apply.
    
     - when both scanners couldn't find any license traces, file was
       considered to have no license information in it, and the top level
       COPYING file license applied.
    
       For non */uapi/* files that summary was:
    
       SPDX license identifier                            # files
       ---------------------------------------------------|-------
       GPL-2.0                                              11139
    
       and resulted in the first patch in this series.
    
       If that file was a */uapi/* path one, it was "GPL-2.0 WITH
       Linux-syscall-note" otherwise it was "GPL-2.0".  Results of that was:
    
       SPDX license identifier                            # files
       ---------------------------------------------------|-------
       GPL-2.0 WITH Linux-syscall-note                        930
    
       and resulted in the second patch in this series.
    
     - if a file had some form of licensing information in it, and was one
       of the */uapi/* ones, it was denoted with the Linux-syscall-note if
       any GPL family license was found in the file or had no licensing in
       it (per prior point).  Results summary:
    
       SPDX license identifier                            # files
       ---------------------------------------------------|------
       GPL-2.0 WITH Linux-syscall-note                       270
       GPL-2.0+ WITH Linux-syscall-note                      169
       ((GPL-2.0 WITH Linux-syscall-note) OR BSD-2-Clause)    21
       ((GPL-2.0 WITH Linux-syscall-note) OR BSD-3-Clause)    17
       LGPL-2.1+ WITH Linux-syscall-note                      15
       GPL-1.0+ WITH Linux-syscall-note                       14
       ((GPL-2.0+ WITH Linux-syscall-note) OR BSD-3-Clause)    5
       LGPL-2.0+ WITH Linux-syscall-note                       4
       LGPL-2.1 WITH Linux-syscall-note                        3
       ((GPL-2.0 WITH Linux-syscall-note) OR MIT)              3
       ((GPL-2.0 WITH Linux-syscall-note) AND MIT)             1
    
       and that resulted in the third patch in this series.
    
     - when the two scanners agreed on the detected license(s), that became
       the concluded license(s).
    
     - when there was disagreement between the two scanners (one detected a
       license but the other didn't, or they both detected different
       licenses) a manual inspection of the file occurred.
    
     - In most cases a manual inspection of the information in the file
       resulted in a clear resolution of the license that should apply (and
       which scanner probably needed to revisit its heuristics).
    
     - When it was not immediately clear, the license identifier was
       confirmed with lawyers working with the Linux Foundation.
    
     - If there was any question as to the appropriate license identifier,
       the file was flagged for further research and to be revisited later
       in time.
    
    In total, over 70 hours of logged manual review was done on the
    spreadsheet to determine the SPDX license identifiers to apply to the
    source files by Kate, Philippe, Thomas and, in some cases, confirmation
    by lawyers working with the Linux Foundation.
    
    Kate also obtained a third independent scan of the 4.13 code base from
    FOSSology, and compared selected files where the other two scanners
    disagreed against that SPDX file, to see if there was new insights.  The
    Windriver scanner is based on an older version of FOSSology in part, so
    they are related.
    
    Thomas did random spot checks in about 500 files from the spreadsheets
    for the uapi headers and agreed with SPDX license identifier in the
    files he inspected. For the non-uapi files Thomas did random spot checks
    in about 15000 files.
    
    In initial set of patches against 4.14-rc6, 3 files were found to have
    copy/paste license identifier errors, and have been fixed to reflect the
    correct identifier.
    
    Additionally Philippe spent 10 hours this week doing a detailed manual
    inspection and review of the 12,461 patched files from the initial patch
    version early this week with:
     - a full scancode scan run, collecting the matched texts, detected
       license ids and scores
     - reviewing anything where there was a license detected (about 500+
       files) to ensure that the applied SPDX license was correct
     - reviewing anything where there was no detection but the patch license
       was not GPL-2.0 WITH Linux-syscall-note to ensure that the applied
       SPDX license was correct
    
    This produced a worksheet with 20 files needing minor correction.  This
    worksheet was then exported into 3 different .csv files for the
    different types of files to be modified.
    
    These .csv files were then reviewed by Greg.  Thomas wrote a script to
    parse the csv files and add the proper SPDX tag to the file, in the
    format that the file expected.  This script was further refined by Greg
    based on the output to detect more types of files automatically and to
    distinguish between header and source .c files (which need different
    comment types.)  Finally Greg ran the script using the .csv files to
    generate the patches.
    
    Reviewed-by: Kate Stewart <kstewart@linuxfoundation.org>
    Reviewed-by: Philippe Ombredanne <pombredanne@nexb.com>
    Reviewed-by: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/arch/x86/pci/init.c b/arch/x86/pci/init.c
index adb62aaa7ecd..5fc617edf108 100644
--- a/arch/x86/pci/init.c
+++ b/arch/x86/pci/init.c
@@ -1,3 +1,4 @@
+// SPDX-License-Identifier: GPL-2.0
 #include <linux/pci.h>
 #include <linux/init.h>
 #include <asm/pci_x86.h>

commit d5d0e88c1e5b069aadb050ff6ec95df312de876a
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Mon Feb 22 05:42:04 2010 -0800

    x86, olpc: Use pci subarch init for OLPC
    
    Replace the #ifdef'ed OLPC-specific init functions by a conditional
    x86_init function.  If the function returns 0 we leave pci_arch_init,
    otherwise we continue.
    
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Cc: Jesse Barnes <jbarnes@virtuousgeek.org>
    Cc: Andres Salomon <dilinger@collabora.co.uk>
    LKML-Reference: <43F901BD926A4E43B106BF17856F0755A318CE89@orsmsx508.amr.corp.intel.com>
    Signed-off-by: Jacob Pan <jacob.jun.pan@intel.com>
    Signed-off-by: H. Peter Anvin <hpa@zytor.com>

diff --git a/arch/x86/pci/init.c b/arch/x86/pci/init.c
index 25a1f8efed4a..adb62aaa7ecd 100644
--- a/arch/x86/pci/init.c
+++ b/arch/x86/pci/init.c
@@ -1,6 +1,7 @@
 #include <linux/pci.h>
 #include <linux/init.h>
 #include <asm/pci_x86.h>
+#include <asm/x86_init.h>
 
 /* arch_initcall has too random ordering, so call the initializers
    in the right sequence from here. */
@@ -15,10 +16,9 @@ static __init int pci_arch_init(void)
 	if (!(pci_probe & PCI_PROBE_NOEARLY))
 		pci_mmcfg_early_init();
 
-#ifdef CONFIG_PCI_OLPC
-	if (!pci_olpc_init())
-		return 0;	/* skip additional checks if it's an XO */
-#endif
+	if (x86_init.pci.arch_init && !x86_init.pci.arch_init())
+		return 0;
+
 #ifdef CONFIG_PCI_BIOS
 	pci_pcbios_init();
 #endif

commit 23a36002742bca87510201770a7d931c4aa63e97
Author: Jacob Pan <jacob.jun.pan@intel.com>
Date:   Mon Dec 8 09:44:16 2008 -0800

    PCI: avoid early PCI mmconfig init if pci=noearly is given in cmdline
    
    Early type 1 accesses can cause problems on some platforms, and
    pci=noearly is supposed to prevent them from occurring.  However, early
    mcfg probing code uses type 1 and  isn't protected by a check for
    noearly.  This patch fixes that problem.
    
    Signed-off-by: Jacob Pan <jacob.jun.pan@intel.com>
    Signed-off-by: Jesse Barnes <jbarnes@virtuousgeek.org>

diff --git a/arch/x86/pci/init.c b/arch/x86/pci/init.c
index bec3b048e72b..25a1f8efed4a 100644
--- a/arch/x86/pci/init.c
+++ b/arch/x86/pci/init.c
@@ -12,7 +12,8 @@ static __init int pci_arch_init(void)
 	type = pci_direct_probe();
 #endif
 
-	pci_mmcfg_early_init();
+	if (!(pci_probe & PCI_PROBE_NOEARLY))
+		pci_mmcfg_early_init();
 
 #ifdef CONFIG_PCI_OLPC
 	if (!pci_olpc_init())

commit 824877111cd7f2b4fd2fe6947c5c5cbbb3ac5bd8
Author: Jaswinder Singh Rajput <jaswinder@infradead.org>
Date:   Sat Dec 27 18:32:28 2008 +0530

    x86, pci: move arch/x86/pci/pci.h to arch/x86/include/asm/pci_x86.h
    
    Impact: cleanup
    
    Now that arch/x86/pci/pci.h is used in a number of other places as well,
    move the lowlevel x86 pci definitions into the architecture include files.
    (not to be confused with the existing arch/x86/include/asm/pci.h file,
    which provides public details about x86 PCI)
    
    Tested on: X86_32_UP, X86_32_SMP and X86_64_SMP
    
    Signed-off-by: Jaswinder Singh Rajput <jaswinderrajput@gmail.com>
    Acked-by: Jesse Barnes <jbarnes@virtuousgeek.org>
    Signed-off-by: Ingo Molnar <mingo@elte.hu>

diff --git a/arch/x86/pci/init.c b/arch/x86/pci/init.c
index d6c950f81858..bec3b048e72b 100644
--- a/arch/x86/pci/init.c
+++ b/arch/x86/pci/init.c
@@ -1,6 +1,6 @@
 #include <linux/pci.h>
 #include <linux/init.h>
-#include "pci.h"
+#include <asm/pci_x86.h>
 
 /* arch_initcall has too random ordering, so call the initializers
    in the right sequence from here. */

commit 8dd779b19ce5972072ad2372a86c8acbae4da768
Author: Robert Richter <robert.richter@amd.com>
Date:   Wed Jul 2 22:50:29 2008 +0200

    x86/pci: removing subsys_initcall ordering dependencies
    
    So far subsys_initcalls has been executed in this order depending on
    the object order in the Makefile:
    
    arch/x86/pci/visws.c:subsys_initcall(pcibios_init);
    arch/x86/pci/numa.c:subsys_initcall(pci_numa_init);
    arch/x86/pci/acpi.c:subsys_initcall(pci_acpi_init);
    arch/x86/pci/legacy.c:subsys_initcall(pci_legacy_init);
    arch/x86/pci/irq.c:subsys_initcall(pcibios_irq_init);
    arch/x86/pci/common.c:subsys_initcall(pcibios_init);
    
    This patch removes the ordering dependency. There is now only one
    subsys_initcall function that contains subsystem initialization code
    with a defined order.
    
    Signed-off-by: Robert Richter <robert.richter@amd.com>
    Acked-by: Jesse Barnes <jbarnes@virtuousgeek.org>
    Signed-off-by: Ingo Molnar <mingo@elte.hu>

diff --git a/arch/x86/pci/init.c b/arch/x86/pci/init.c
index b821f4462d99..d6c950f81858 100644
--- a/arch/x86/pci/init.c
+++ b/arch/x86/pci/init.c
@@ -4,7 +4,7 @@
 
 /* arch_initcall has too random ordering, so call the initializers
    in the right sequence from here. */
-static __init int pci_access_init(void)
+static __init int pci_arch_init(void)
 {
 #ifdef CONFIG_PCI_DIRECT
 	int type = 0;
@@ -40,4 +40,4 @@ static __init int pci_access_init(void)
 
 	return 0;
 }
-arch_initcall(pci_access_init);
+arch_initcall(pci_arch_init);

commit 2bdd1b031b200d55c2512c8d7e0e9bdcf85d011f
Author: Andres Salomon <dilinger@queued.net>
Date:   Thu Jun 5 14:14:41 2008 -0700

    PCI/x86: fix up PCI stuff so that PCI_GOANY supports OLPC
    
    Previously, one would have to specifically choose CONFIG_OLPC and
    CONFIG_PCI_GOOLPC in order to enable PCI_OLPC.  That doesn't really work
    for distro kernels, so this patch allows one to choose CONFIG_OLPC and
    CONFIG_PCI_GOANY in order to build in OLPC support in a generic kernel (as
    requested by Robert Millan).
    
    This also moves GOOLPC before GOANY in the menuconfig list.
    
    Finally, make pci_access_init return early if we detect OLPC hardware.
    There's no need to continue probing stuff, and pci_pcbios_init
    specifically trashes our settings (we didn't run into that before because
    PCI_GOANY wasn't supported).
    
    Signed-off-by: Andres Salomon <dilinger@debian.org>
    Cc: Ingo Molnar <mingo@elte.hu>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Jesse Barnes <jbarnes@virtuousgeek.org>

diff --git a/arch/x86/pci/init.c b/arch/x86/pci/init.c
index e70b9c57b88e..b821f4462d99 100644
--- a/arch/x86/pci/init.c
+++ b/arch/x86/pci/init.c
@@ -15,7 +15,8 @@ static __init int pci_access_init(void)
 	pci_mmcfg_early_init();
 
 #ifdef CONFIG_PCI_OLPC
-	pci_olpc_init();
+	if (!pci_olpc_init())
+		return 0;	/* skip additional checks if it's an XO */
 #endif
 #ifdef CONFIG_PCI_BIOS
 	pci_pcbios_init();

commit 0df18ff366853cdf31e5238764ec5c63e6b5a398
Author: Yinghai Lu <yhlu.kernel@gmail.com>
Date:   Mon Apr 14 15:40:37 2008 -0700

    x86 PCI: call dmi_check_pciprobe()
    
    this change:
    
    | commit 08f1c192c3c32797068bfe97738babb3295bbf42
    | Author: Muli Ben-Yehuda <muli@il.ibm.com>
    | Date:   Sun Jul 22 00:23:39 2007 +0300
    |
    |    x86-64: introduce struct pci_sysdata to facilitate sharing of ->sysdata
    |
    |    This patch introduces struct pci_sysdata to x86 and x86-64, and
    |    converts the existing two users (NUMA, Calgary) to use it.
    |
    |    This lays the groundwork for having other users of sysdata, such as
    |    the PCI domains work.
    |
    |    The Calgary bits are tested, the NUMA bits just look ok.
    
    replaces pcibios_scan_root with pci_scan_bus_parented...
    
    but in pcibios_scan_root we have a DMI check:
    
        dmi_check_system(pciprobe_dmi_table);
    
    when when have several peer root buses this could be called multiple
    times (which is bad), so move that call to pci_access_init().
    
    Signed-off-by: Yinghai Lu <yhlu.kernel@gmail.com>
    Signed-off-by: Ingo Molnar <mingo@elte.hu>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Jesse Barnes <jbarnes@virtuousgeek.org>

diff --git a/arch/x86/pci/init.c b/arch/x86/pci/init.c
index b394b2a4b912..e70b9c57b88e 100644
--- a/arch/x86/pci/init.c
+++ b/arch/x86/pci/init.c
@@ -33,6 +33,8 @@ static __init int pci_access_init(void)
 		printk(KERN_ERR
 		"PCI: Fatal: No config space access function found\n");
 
+	dmi_check_pciprobe();
+
 	dmi_check_skip_isa_align();
 
 	return 0;

commit 13a6ddb08e58a1bd344da7898c4e2f13bdf18c2f
Author: Yinghai Lu <yhlu.kernel.send@gmail.com>
Date:   Thu Mar 27 01:31:18 2008 -0700

    x86/pci: add pci=skip_isa_align command lines.
    
    so we don't align the io port start address for pci cards.
    
    also move out dmi check out acpi.c, because it has nothing to do with acpi.
    it could spare some calling when we have several peer root buses.
    
    Signed-off-by: Yinghai Lu <yhlu.kernel@gmail.com>
    Signed-off-by: Ingo Molnar <mingo@elte.hu>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Jesse Barnes <jbarnes@virtuousgeek.org>

diff --git a/arch/x86/pci/init.c b/arch/x86/pci/init.c
index dd30c6076b5d..b394b2a4b912 100644
--- a/arch/x86/pci/init.c
+++ b/arch/x86/pci/init.c
@@ -33,6 +33,8 @@ static __init int pci_access_init(void)
 		printk(KERN_ERR
 		"PCI: Fatal: No config space access function found\n");
 
+	dmi_check_skip_isa_align();
+
 	return 0;
 }
 arch_initcall(pci_access_init);

commit 5f78e4d33945b291d12765cdd7e4304f437b9361
Merge: 867a89e0b73a 5f0b2976cb2b
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Tue Apr 29 08:26:51 2008 -0700

    Merge branch 'for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/x86/linux-2.6-x86-bigbox-pci
    
    * 'for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/x86/linux-2.6-x86-bigbox-pci:
      x86: add pci=check_enable_amd_mmconf and dmi check
      x86: work around io allocation overlap of HT links
      acpi: get boot_cpu_id as early for k8_scan_nodes
      x86_64: don't need set default res if only have one root bus
      x86: double check the multi root bus with fam10h mmconf
      x86: multi pci root bus with different io resource range, on 64-bit
      x86: use bus conf in NB conf fun1 to get bus range on, on 64-bit
      x86: get mp_bus_to_node early
      x86 pci: remove checking type for mmconfig probe
      x86: remove unneeded check in mmconf reject
      driver core: try parent numa_node at first before using default
      x86: seperate mmconf for fam10h out from setup_64.c
      x86: if acpi=off, force setting the mmconf for fam10h
      x86_64: check MSR to get MMCONFIG for AMD Family 10h
      x86_64: check and enable MMCONFIG for AMD Family 10h
      x86_64: set cfg_size for AMD Family 10h in case MMCONFIG
      x86: mmconf enable mcfg early
      x86: clear pci_mmcfg_virt when mmcfg get rejected
      x86: validate against acpi motherboard resources
    
    Fixed up fairly trivial conflicts in arch/x86/pci/{init.c,pci.h} due to
    OLPC support manually.

commit 3ef0e1f8cad0a851b3dbf91802b14af7dd780352
Author: Andres Salomon <dilinger@queued.net>
Date:   Tue Apr 29 00:59:53 2008 -0700

    x86: olpc: add One Laptop Per Child architecture support
    
    This adds support for OLPC XO hardware.  Open Firmware on XOs don't contain
    the VSA, so it is necessary to emulate the PCI BARs in the kernel.  This also
    adds functionality for running EC commands, and a CONFIG_OLPC.
    
    A number of OLPC drivers depend upon CONFIG_OLPC.
    
    olpc_ec_timeout is a hack to work around Embedded Controller bugs.
    
    [akpm@linux-foundation.org: build fix]
    [akpm@linux-foundation.org: geode_has_vsa build fix]
    [akpm@linux-foundation.org: olpc_register_battery_callback doesn't exist]
    Signed-off-by: Andres Salomon <dilinger@debian.org>
    Acked-by: Ingo Molnar <mingo@elte.hu>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: Andi Kleen <ak@suse.de>
    Cc: Jordan Crouse <jordan.crouse@amd.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

diff --git a/arch/x86/pci/init.c b/arch/x86/pci/init.c
index 3de9f9ba2da6..0f5f7dd2a620 100644
--- a/arch/x86/pci/init.c
+++ b/arch/x86/pci/init.c
@@ -13,6 +13,9 @@ static __init int pci_access_init(void)
 #endif
 #ifdef CONFIG_PCI_MMCONFIG
 	pci_mmcfg_init(type);
+#endif
+#ifdef CONFIG_PCI_OLPC
+	pci_olpc_init();
 #endif
 	if (raw_pci_ops)
 		return 0;

commit bb63b4219976d48ed6d22ac33c18be334fb5a78c
Author: Yinghai Lu <Yinghai.Lu@Sun.COM>
Date:   Thu Feb 28 23:56:50 2008 -0800

    x86 pci: remove checking type for mmconfig probe
    
    doesn't need to check if it is type1 or type2, we can use raw_pci_ops
    directly.
    
    also make pci_direct_conf1 static again.
    
    anyway is there system with type 2 and mmconf support?
    
    Signed-off-by: Yinghai Lu <yinghai.lu@sun.com>
    Signed-off-by: Ingo Molnar <mingo@elte.hu>

diff --git a/arch/x86/pci/init.c b/arch/x86/pci/init.c
index 2080b04b3bcc..343c36337e69 100644
--- a/arch/x86/pci/init.c
+++ b/arch/x86/pci/init.c
@@ -6,14 +6,13 @@
    in the right sequence from here. */
 static __init int pci_access_init(void)
 {
-	int type __maybe_unused = 0;
-
 #ifdef CONFIG_PCI_DIRECT
+	int type = 0;
+
 	type = pci_direct_probe();
 #endif
-	pci_mmcfg_early_init(type);
-	if (raw_pci_ops)
-		return 0;
+	pci_mmcfg_early_init();
+
 #ifdef CONFIG_PCI_BIOS
 	pci_pcbios_init();
 #endif
@@ -26,7 +25,7 @@ static __init int pci_access_init(void)
 #ifdef CONFIG_PCI_DIRECT
 	pci_direct_init(type);
 #endif
-	if (!raw_pci_ops)
+	if (!raw_pci_ops && !raw_pci_ext_ops)
 		printk(KERN_ERR
 		"PCI: Fatal: No config space access function found\n");
 

commit 7752d5cfe3d11ca0bb9c673ec38bd78ba6578f8e
Author: Robert Hancock <hancockr@shaw.ca>
Date:   Fri Feb 15 01:27:20 2008 -0800

    x86: validate against acpi motherboard resources
    
    This path adds validation of the MMCONFIG table against the ACPI reserved
    motherboard resources.  If the MMCONFIG table is found to be reserved in
    ACPI, we don't bother checking the E820 table.  The PCI Express firmware
    spec apparently tells BIOS developers that reservation in ACPI is required
    and E820 reservation is optional, so checking against ACPI first makes
    sense.  Many BIOSes don't reserve the MMCONFIG region in E820 even though
    it is perfectly functional, the existing check needlessly disables MMCONFIG
    in these cases.
    
    In order to do this, MMCONFIG setup has been split into two phases.  If PCI
    configuration type 1 is not available then MMCONFIG is enabled early as
    before.  Otherwise, it is enabled later after the ACPI interpreter is
    enabled, since we need to be able to execute control methods in order to
    check the ACPI reserved resources.  Presently this is just triggered off
    the end of ACPI interpreter initialization.
    
    There are a few other behavioral changes here:
    
    - Validate all MMCONFIG configurations provided, not just the first one.
    
    - Validate the entire required length of each configuration according to
      the provided ending bus number is reserved, not just the minimum required
      allocation.
    
    - Validate that the area is reserved even if we read it from the chipset
      directly and not from the MCFG table.  This catches the case where the
      BIOS didn't set the location properly in the chipset and has mapped it
      over other things it shouldn't have.
    
    This also cleans up the MMCONFIG initialization functions so that they
    simply do nothing if MMCONFIG is not compiled in.
    
    Based on an original patch by Rajesh Shah from Intel.
    
    [akpm@linux-foundation.org: many fixes and cleanups]
    Signed-off-by: Robert Hancock <hancockr@shaw.ca>
    Signed-off-by: Andi Kleen <ak@suse.de>
    Cc: Andrew Morton <akpm@linux-foundation.org>
    Cc: Greg KH <greg@kroah.com>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Tested-by: Andi Kleen <ak@suse.de>
    Cc: Rajesh Shah <rajesh.shah@intel.com>
    Cc: Jesse Barnes <jbarnes@virtuousgeek.org>
    Acked-by: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Andi Kleen <ak@suse.de>
    Cc: Greg KH <greg@kroah.com>
    Signed-off-by: Ingo Molnar <mingo@elte.hu>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>

diff --git a/arch/x86/pci/init.c b/arch/x86/pci/init.c
index 3de9f9ba2da6..2080b04b3bcc 100644
--- a/arch/x86/pci/init.c
+++ b/arch/x86/pci/init.c
@@ -11,9 +11,7 @@ static __init int pci_access_init(void)
 #ifdef CONFIG_PCI_DIRECT
 	type = pci_direct_probe();
 #endif
-#ifdef CONFIG_PCI_MMCONFIG
-	pci_mmcfg_init(type);
-#endif
+	pci_mmcfg_early_init(type);
 	if (raw_pci_ops)
 		return 0;
 #ifdef CONFIG_PCI_BIOS

commit fb9aa6f1d4a1e11e66a680460b2c2b2b10b62f79
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Thu Oct 11 11:16:36 2007 +0200

    i386: move pci
    
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Ingo Molnar <mingo@elte.hu>

diff --git a/arch/x86/pci/init.c b/arch/x86/pci/init.c
new file mode 100644
index 000000000000..3de9f9ba2da6
--- /dev/null
+++ b/arch/x86/pci/init.c
@@ -0,0 +1,37 @@
+#include <linux/pci.h>
+#include <linux/init.h>
+#include "pci.h"
+
+/* arch_initcall has too random ordering, so call the initializers
+   in the right sequence from here. */
+static __init int pci_access_init(void)
+{
+	int type __maybe_unused = 0;
+
+#ifdef CONFIG_PCI_DIRECT
+	type = pci_direct_probe();
+#endif
+#ifdef CONFIG_PCI_MMCONFIG
+	pci_mmcfg_init(type);
+#endif
+	if (raw_pci_ops)
+		return 0;
+#ifdef CONFIG_PCI_BIOS
+	pci_pcbios_init();
+#endif
+	/*
+	 * don't check for raw_pci_ops here because we want pcbios as last
+	 * fallback, yet it's needed to run first to set pcibios_last_bus
+	 * in case legacy PCI probing is used. otherwise detecting peer busses
+	 * fails.
+	 */
+#ifdef CONFIG_PCI_DIRECT
+	pci_direct_init(type);
+#endif
+	if (!raw_pci_ops)
+		printk(KERN_ERR
+		"PCI: Fatal: No config space access function found\n");
+
+	return 0;
+}
+arch_initcall(pci_access_init);
