commit 4c953f879460bf65ea3c119354026b126fe8ee57
Author: Stephane Eranian <eranian@google.com>
Date:   Wed May 27 15:46:58 2020 -0700

    perf/x86/rapl: Make perf_probe_msr() more robust and flexible
    
    This patch modifies perf_probe_msr() by allowing passing of
    struct perf_msr array where some entries are not populated, i.e.,
    they have either an msr address of 0 or no attribute_group pointer.
    This helps with certain call paths, e.g., RAPL.
    
    In case the grp is NULL, the default sysfs visibility rule
    applies which is to make the group visible. Without the patch,
    you would get a kernel crash with a NULL group.
    
    Signed-off-by: Stephane Eranian <eranian@google.com>
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Link: https://lore.kernel.org/r/20200527224659.206129-5-eranian@google.com

diff --git a/arch/x86/events/probe.c b/arch/x86/events/probe.c
index c2ede2f3b277..136a1e847254 100644
--- a/arch/x86/events/probe.c
+++ b/arch/x86/events/probe.c
@@ -10,6 +10,11 @@ not_visible(struct kobject *kobj, struct attribute *attr, int i)
 	return 0;
 }
 
+/*
+ * Accepts msr[] array with non populated entries as long as either
+ * msr[i].msr is 0 or msr[i].grp is NULL. Note that the default sysfs
+ * visibility is visible when group->is_visible callback is set.
+ */
 unsigned long
 perf_msr_probe(struct perf_msr *msr, int cnt, bool zero, void *data)
 {
@@ -24,8 +29,16 @@ perf_msr_probe(struct perf_msr *msr, int cnt, bool zero, void *data)
 		if (!msr[bit].no_check) {
 			struct attribute_group *grp = msr[bit].grp;
 
+			/* skip entry with no group */
+			if (!grp)
+				continue;
+
 			grp->is_visible = not_visible;
 
+			/* skip unpopulated entry */
+			if (!msr[bit].msr)
+				continue;
+
 			if (msr[bit].test && !msr[bit].test(bit, data))
 				continue;
 			/* Virt sucks; you cannot tell if a R/O MSR is present :/ */

commit 98253a546a468d88b7e782ab67cdf447d3c7bbe2
Author: Jiri Olsa <jolsa@kernel.org>
Date:   Sun Jun 16 16:03:51 2019 +0200

    perf/x86: Add MSR probe interface
    
    Adding perf_msr_probe function to provide interface for
    checking up on MSR register and set the related attribute
    group visibility.
    
    User defines following struct for each MSR register:
    
      struct perf_msr {
           u64                       msr;
           struct attribute_group   *grp;
           bool                    (*test)(int idx, void *data);
           bool                      no_check;
      };
    
    Where:
      msr      - is the MSR address
      attrs    - is attribute groups array to add if the check passed
      test     - is test function pointer
      no_check - is bool that bypass the check and adds the
                  attribute without any test
    
    The array of struct perf_msr is passed into:
    
      perf_msr_probe(struct perf_msr *msr, int cnt, bool zero, void *data)
    
    Together with:
      cnt  - which is the number of struct msr array elements
      data - which is user pointer passed to the test function
      zero - allow counters that returns zero on rdmsr
    
    The perf_msr_probe will executed test code, read the MSR and
    check the value is != 0. If all these tests pass, related
    attribute group is kept visible.
    
    Also adding PMU_EVENT_GROUP macro helper to define attribute
    group for single attribute. It will be used in following patches.
    
    Signed-off-by: Jiri Olsa <jolsa@kernel.org>
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Cc: Alexander Shishkin <alexander.shishkin@linux.intel.com>
    Cc: Andy Lutomirski <luto@kernel.org>
    Cc: Arnaldo Carvalho de Melo <acme@kernel.org>
    Cc: Arnaldo Carvalho de Melo <acme@redhat.com>
    Cc: Borislav Petkov <bp@alien8.de>
    Cc: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Cc: Jiri Olsa <jolsa@redhat.com>
    Cc: Kan <kan.liang@linux.intel.com>
    Cc: Liang
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Namhyung Kim <namhyung@kernel.org>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Stephane Eranian <eranian@google.com>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: Vince Weaver <vincent.weaver@maine.edu>
    Link: https://lkml.kernel.org/r/20190616140358.27799-2-jolsa@kernel.org
    Signed-off-by: Ingo Molnar <mingo@kernel.org>

diff --git a/arch/x86/events/probe.c b/arch/x86/events/probe.c
new file mode 100644
index 000000000000..c2ede2f3b277
--- /dev/null
+++ b/arch/x86/events/probe.c
@@ -0,0 +1,45 @@
+// SPDX-License-Identifier: GPL-2.0
+#include <linux/export.h>
+#include <linux/types.h>
+#include <linux/bits.h>
+#include "probe.h"
+
+static umode_t
+not_visible(struct kobject *kobj, struct attribute *attr, int i)
+{
+	return 0;
+}
+
+unsigned long
+perf_msr_probe(struct perf_msr *msr, int cnt, bool zero, void *data)
+{
+	unsigned long avail = 0;
+	unsigned int bit;
+	u64 val;
+
+	if (cnt >= BITS_PER_LONG)
+		return 0;
+
+	for (bit = 0; bit < cnt; bit++) {
+		if (!msr[bit].no_check) {
+			struct attribute_group *grp = msr[bit].grp;
+
+			grp->is_visible = not_visible;
+
+			if (msr[bit].test && !msr[bit].test(bit, data))
+				continue;
+			/* Virt sucks; you cannot tell if a R/O MSR is present :/ */
+			if (rdmsrl_safe(msr[bit].msr, &val))
+				continue;
+			/* Disable zero counters if requested. */
+			if (!zero && !val)
+				continue;
+
+			grp->is_visible = NULL;
+		}
+		avail |= BIT(bit);
+	}
+
+	return avail;
+}
+EXPORT_SYMBOL_GPL(perf_msr_probe);
