commit b971880fe79f4042aaaf426744a5b19521bf77b3
Author: Babu Moger <Babu.Moger@amd.com>
Date:   Tue Nov 5 21:25:32 2019 +0000

    x86/Kconfig: Rename UMIP config parameter
    
    AMD 2nd generation EPYC processors support the UMIP (User-Mode
    Instruction Prevention) feature. So, rename X86_INTEL_UMIP to
    generic X86_UMIP and modify the text to cover both Intel and AMD.
    
     [ bp: take of the disabled-features.h copy in tools/ too. ]
    
    Signed-off-by: Babu Moger <babu.moger@amd.com>
    Signed-off-by: Borislav Petkov <bp@suse.de>
    Cc: Andy Lutomirski <luto@kernel.org>
    Cc: "H. Peter Anvin" <hpa@zytor.com>
    Cc: Ingo Molnar <mingo@redhat.com>
    Cc: Ricardo Neri <ricardo.neri-calderon@linux.intel.com>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: "x86@kernel.org" <x86@kernel.org>
    Link: https://lkml.kernel.org/r/157298912544.17462.2018334793891409521.stgit@naples-babu.amd.com

diff --git a/arch/x86/include/asm/umip.h b/arch/x86/include/asm/umip.h
index db43f2a0d92c..aeed98c3c9e1 100644
--- a/arch/x86/include/asm/umip.h
+++ b/arch/x86/include/asm/umip.h
@@ -4,9 +4,9 @@
 #include <linux/types.h>
 #include <asm/ptrace.h>
 
-#ifdef CONFIG_X86_INTEL_UMIP
+#ifdef CONFIG_X86_UMIP
 bool fixup_umip_exception(struct pt_regs *regs);
 #else
 static inline bool fixup_umip_exception(struct pt_regs *regs) { return false; }
-#endif  /* CONFIG_X86_INTEL_UMIP */
+#endif  /* CONFIG_X86_UMIP */
 #endif  /* _ASM_X86_UMIP_H */

commit 1e5db223696afa55e6a038fac638f759e1fdcc01
Author: Ricardo Neri <ricardo.neri-calderon@linux.intel.com>
Date:   Sun Nov 5 18:27:52 2017 -0800

    x86/umip: Add emulation code for UMIP instructions
    
    The feature User-Mode Instruction Prevention present in recent Intel
    processor prevents a group of instructions (sgdt, sidt, sldt, smsw, and
    str) from being executed with CPL > 0. Otherwise, a general protection
    fault is issued.
    
    Rather than relaying to the user space the general protection fault caused
    by the UMIP-protected instructions (in the form of a SIGSEGV signal), it
    can be trapped and the instruction emulated to provide a dummy result.
    This allows to both conserve the current kernel behavior and not reveal the
    system resources that UMIP intends to protect (i.e., the locations of the
    global descriptor and interrupt descriptor tables, the segment selectors of
    the local descriptor table, the value of the task state register and the
    contents of the CR0 register).
    
    This emulation is needed because certain applications (e.g., WineHQ and
    DOSEMU2) rely on this subset of instructions to function. Given that sldt
    and str are not commonly used in programs that run on WineHQ or DOSEMU2,
    they are not emulated. Also, emulation is provided only for 32-bit
    processes; 64-bit processes that attempt to use the instructions that UMIP
    protects will receive the SIGSEGV signal issued as a consequence of the
    general protection fault.
    
    The instructions protected by UMIP can be split in two groups. Those which
    return a kernel memory address (sgdt and sidt) and those which return a
    value (smsw, sldt and str; the last two not emulated).
    
    For the instructions that return a kernel memory address, applications such
    as WineHQ rely on the result being located in the kernel memory space, not
    the actual location of the table. The result is emulated as a hard-coded
    value that lies close to the top of the kernel memory. The limit for the
    GDT and the IDT are set to zero.
    
    The instruction smsw is emulated to return the value that the register CR0
    has at boot time as set in the head_32.
    
    Care is taken to appropriately emulate the results when segmentation is
    used. That is, rather than relying on USER_DS and USER_CS, the function
    insn_get_addr_ref() inspects the segment descriptor pointed by the
    registers in pt_regs. This ensures that we correctly obtain the segment
    base address and the address and operand sizes even if the user space
    application uses a local descriptor table.
    
    Signed-off-by: Ricardo Neri <ricardo.neri-calderon@linux.intel.com>
    Reviewed-by: Thomas Gleixner <tglx@linutronix.de>
    Cc: Andrew Morton <akpm@linux-foundation.org>
    Cc: Andy Lutomirski <luto@kernel.org>
    Cc: Borislav Petkov <bp@alien8.de>
    Cc: Borislav Petkov <bp@suse.de>
    Cc: Brian Gerst <brgerst@gmail.com>
    Cc: Chen Yucong <slaoub@gmail.com>
    Cc: Chris Metcalf <cmetcalf@mellanox.com>
    Cc: Dave Hansen <dave.hansen@linux.intel.com>
    Cc: Denys Vlasenko <dvlasenk@redhat.com>
    Cc: Fenghua Yu <fenghua.yu@intel.com>
    Cc: H. Peter Anvin <hpa@zytor.com>
    Cc: Huang Rui <ray.huang@amd.com>
    Cc: Jiri Slaby <jslaby@suse.cz>
    Cc: Jonathan Corbet <corbet@lwn.net>
    Cc: Josh Poimboeuf <jpoimboe@redhat.com>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Masami Hiramatsu <mhiramat@kernel.org>
    Cc: Michael S. Tsirkin <mst@redhat.com>
    Cc: Paolo Bonzini <pbonzini@redhat.com>
    Cc: Paul Gortmaker <paul.gortmaker@windriver.com>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Ravi V. Shankar <ravi.v.shankar@intel.com>
    Cc: Shuah Khan <shuah@kernel.org>
    Cc: Tony Luck <tony.luck@intel.com>
    Cc: Vlastimil Babka <vbabka@suse.cz>
    Cc: ricardo.neri@intel.com
    Link: http://lkml.kernel.org/r/1509935277-22138-8-git-send-email-ricardo.neri-calderon@linux.intel.com
    Signed-off-by: Ingo Molnar <mingo@kernel.org>

diff --git a/arch/x86/include/asm/umip.h b/arch/x86/include/asm/umip.h
new file mode 100644
index 000000000000..db43f2a0d92c
--- /dev/null
+++ b/arch/x86/include/asm/umip.h
@@ -0,0 +1,12 @@
+#ifndef _ASM_X86_UMIP_H
+#define _ASM_X86_UMIP_H
+
+#include <linux/types.h>
+#include <asm/ptrace.h>
+
+#ifdef CONFIG_X86_INTEL_UMIP
+bool fixup_umip_exception(struct pt_regs *regs);
+#else
+static inline bool fixup_umip_exception(struct pt_regs *regs) { return false; }
+#endif  /* CONFIG_X86_INTEL_UMIP */
+#endif  /* _ASM_X86_UMIP_H */
