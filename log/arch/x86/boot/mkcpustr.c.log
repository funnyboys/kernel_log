commit 14442a159cf488c05bd5639c9fd5665385b9ab39
Author: Sean Christopherson <sean.j.christopherson@intel.com>
Date:   Fri Dec 20 20:45:05 2019 -0800

    x86/cpu: Print VMX flags in /proc/cpuinfo using VMX_FEATURES_*
    
    Add support for generating VMX feature names in capflags.c and use the
    resulting x86_vmx_flags to print the VMX flags in /proc/cpuinfo.  Don't
    print VMX flags if no bits are set in word 0, which holds Pin Controls.
    Pin Control's INTR and NMI exiting are fundamental pillars of VMX, if
    they are not supported then the CPU is broken, it does not actually
    support VMX, or the kernel wasn't built with support for the target CPU.
    
    Print the features in a dedicated "vmx flags" line to avoid polluting
    the common "flags" and to avoid having to prefix all flags with "vmx_",
    which results in horrendously long names.
    
    Keep synthetic VMX flags in cpufeatures to preserve /proc/cpuinfo's ABI
    for those flags.  This means that "flags" and "vmx flags" will have
    duplicate entries for tpr_shadow (virtual_tpr), vnmi, ept, flexpriority,
    vpid and ept_ad, but caps the pollution of "flags" at those six VMX
    features.  The vendor-specific code that populates the synthetic flags
    will be consolidated in a future patch to further minimize the lasting
    damage.
    
    Signed-off-by: Sean Christopherson <sean.j.christopherson@intel.com>
    Signed-off-by: Borislav Petkov <bp@suse.de>
    Link: https://lkml.kernel.org/r/20191221044513.21680-12-sean.j.christopherson@intel.com

diff --git a/arch/x86/boot/mkcpustr.c b/arch/x86/boot/mkcpustr.c
index 9caa10e82217..da0ccc5de538 100644
--- a/arch/x86/boot/mkcpustr.c
+++ b/arch/x86/boot/mkcpustr.c
@@ -15,6 +15,7 @@
 #include "../include/asm/required-features.h"
 #include "../include/asm/disabled-features.h"
 #include "../include/asm/cpufeatures.h"
+#include "../include/asm/vmxfeatures.h"
 #include "../kernel/cpu/capflags.c"
 
 int main(void)

commit d691005856b059758b0d2d8454c2a6b251def18d
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Wed May 22 09:51:29 2019 +0200

    treewide: Replace GPLv2 boilerplate/reference with SPDX - rule 83
    
    Based on 1 normalized pattern(s):
    
      this file is part of the linux kernel and is made available under
      the terms of the gnu general public license version 2 or at your
      option any later version incorporated herein by reference
    
    extracted by the scancode license scanner the SPDX license identifier
    
      GPL-2.0-or-later
    
    has been chosen to replace the boilerplate/reference in 18 file(s).
    
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Reviewed-by: Richard Fontana <rfontana@redhat.com>
    Reviewed-by: Allison Randal <allison@lohutok.net>
    Reviewed-by: Armijn Hemel <armijn@tjaldur.nl>
    Reviewed-by: Kate Stewart <kstewart@linuxfoundation.org>
    Cc: linux-spdx@vger.kernel.org
    Link: https://lkml.kernel.org/r/20190520075211.321157221@linutronix.de
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/arch/x86/boot/mkcpustr.c b/arch/x86/boot/mkcpustr.c
index f72498dc90d2..9caa10e82217 100644
--- a/arch/x86/boot/mkcpustr.c
+++ b/arch/x86/boot/mkcpustr.c
@@ -1,11 +1,8 @@
+// SPDX-License-Identifier: GPL-2.0-or-later
 /* ----------------------------------------------------------------------- *
  *
  *   Copyright 2008 rPath, Inc. - All Rights Reserved
  *
- *   This file is part of the Linux kernel, and is made available under
- *   the terms of the GNU General Public License version 2 or (at your
- *   option) any later version; incorporated herein by reference.
- *
  * ----------------------------------------------------------------------- */
 
 /*

commit cd4d09ec6f6c12a2cc3db5b7d8876a325a53545b
Author: Borislav Petkov <bp@suse.de>
Date:   Tue Jan 26 22:12:04 2016 +0100

    x86/cpufeature: Carve out X86_FEATURE_*
    
    Move them to a separate header and have the following
    dependency:
    
      x86/cpufeatures.h <- x86/processor.h <- x86/cpufeature.h
    
    This makes it easier to use the header in asm code and not
    include the whole cpufeature.h and add guards for asm.
    
    Suggested-by: H. Peter Anvin <hpa@zytor.com>
    Signed-off-by: Borislav Petkov <bp@suse.de>
    Cc: Andy Lutomirski <luto@amacapital.net>
    Cc: Borislav Petkov <bp@alien8.de>
    Cc: Brian Gerst <brgerst@gmail.com>
    Cc: Denys Vlasenko <dvlasenk@redhat.com>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Link: http://lkml.kernel.org/r/1453842730-28463-5-git-send-email-bp@alien8.de
    Signed-off-by: Ingo Molnar <mingo@kernel.org>

diff --git a/arch/x86/boot/mkcpustr.c b/arch/x86/boot/mkcpustr.c
index 637097e66a62..f72498dc90d2 100644
--- a/arch/x86/boot/mkcpustr.c
+++ b/arch/x86/boot/mkcpustr.c
@@ -17,7 +17,7 @@
 
 #include "../include/asm/required-features.h"
 #include "../include/asm/disabled-features.h"
-#include "../include/asm/cpufeature.h"
+#include "../include/asm/cpufeatures.h"
 #include "../kernel/cpu/capflags.c"
 
 int main(void)

commit 381aa07a9b4e1f82969203e9e4863da2a157781d
Author: Dave Hansen <dave.hansen@linux.intel.com>
Date:   Thu Sep 11 14:15:13 2014 -0700

    x86: Introduce disabled-features
    
    I believe the REQUIRED_MASK aproach was taken so that it was
    easier to consult in assembly (arch/x86/kernel/verify_cpu.S).
    DISABLED_MASK does not have the same restriction, but I
    implemented it the same way for consistency.
    
    We have a REQUIRED_MASK... which does two things:
    1. Keeps a list of cpuid bits to check in very early boot and
       refuse to boot if those are not present.
    2. Consulted during cpu_has() checks, which allows us to
       optimize out things at compile-time.  In other words, if we
       *KNOW* we will not boot with the feature off, then we can
       safely assume that it will be present forever.
    
    But, we don't have a similar mechanism for CPU features which
    may be present but that we know we will not use.  We simply
    use our existing mechanisms to repeatedly check the status of
    the bit at runtime (well, the alternatives patching helps here
    but it does not provide compile-time optimization).
    
    Adding a feature to disabled-features.h allows the bit to be
    checked via a new macro: cpu_feature_enabled().  Note that
    for features in DISABLED_MASK, checks with this macro have
    all of the benefits of an #ifdef.  Before, we would have done
    this in a header:
    
    #ifdef CONFIG_X86_INTEL_MPX
    #define cpu_has_mpx cpu_has(X86_FEATURE_MPX)
    #else
    #define cpu_has_mpx 0
    #endif
    
    and this in the code:
    
            if (cpu_has_mpx)
                    do_some_mpx_thing();
    
    Now, just add your feature to DISABLED_MASK and you can do this
    everywhere, and get the same benefits you would have from
    #ifdefs:
    
            if (cpu_feature_enabled(X86_FEATURE_MPX))
                    do_some_mpx_thing();
    
    We need a new function and *not* a modification to cpu_has()
    because there are cases where we actually need to check the CPU
    itself, despite what features the kernel supports.  The best
    example of this is a hypervisor which has no control over what
    features its guests are using and where the guest does not depend
    on the host for support.
    
    Signed-off-by: Dave Hansen <dave.hansen@linux.intel.com>
    Link: http://lkml.kernel.org/r/20140911211513.9E35E931@viggo.jf.intel.com
    Acked-by: Borislav Petkov <bp@suse.de>
    Signed-off-by: H. Peter Anvin <hpa@linux.intel.com>

diff --git a/arch/x86/boot/mkcpustr.c b/arch/x86/boot/mkcpustr.c
index 4579eff0ef4d..637097e66a62 100644
--- a/arch/x86/boot/mkcpustr.c
+++ b/arch/x86/boot/mkcpustr.c
@@ -16,6 +16,7 @@
 #include <stdio.h>
 
 #include "../include/asm/required-features.h"
+#include "../include/asm/disabled-features.h"
 #include "../include/asm/cpufeature.h"
 #include "../kernel/cpu/capflags.c"
 

commit abbf1590de22a6d2240a59383477da50d1402f6a
Author: David Howells <dhowells@redhat.com>
Date:   Tue Oct 2 18:01:26 2012 +0100

    UAPI: Partition the header include path sets and add uapi/ header directories
    
    Partition the header include path flags into two sets, one for kernelspace
    builds and one for userspace builds.
    
    Add the following directories to build after the ordinary include directories
    so that #include will pick up the UAPI header directly if the kernel header
    has been moved there.
    
    The userspace set (represented by the USERINCLUDE make variable) contains:
    
            -I $(srctree)/arch/$(hdr-arch)/include/uapi
            -I arch/$(hdr-arch)/include/generated/uapi
            -I $(srctree)/include/uapi
            -I include/generated/uapi
            -include $(srctree)/include/linux/kconfig.h
    
    and the kernelspace set (represented by the LINUXINCLUDE make variable)
    contains:
    
            -I $(srctree)/arch/$(hdr-arch)/include
            -I arch/$(hdr-arch)/include/generated
            -I $(srctree)/include
            -I include              --- if not building in the source tree
    
    plus everything in the USERINCLUDE set.
    
    Then use USERINCLUDE in building the x86 boot code.
    
    Signed-off-by: David Howells <dhowells@redhat.com>
    Acked-by: Arnd Bergmann <arnd@arndb.de>
    Acked-by: Thomas Gleixner <tglx@linutronix.de>
    Acked-by: Paul E. McKenney <paulmck@linux.vnet.ibm.com>
    Acked-by: Dave Jones <davej@redhat.com>

diff --git a/arch/x86/boot/mkcpustr.c b/arch/x86/boot/mkcpustr.c
index 919257f526f2..4579eff0ef4d 100644
--- a/arch/x86/boot/mkcpustr.c
+++ b/arch/x86/boot/mkcpustr.c
@@ -15,6 +15,8 @@
 
 #include <stdio.h>
 
+#include "../include/asm/required-features.h"
+#include "../include/asm/cpufeature.h"
 #include "../kernel/cpu/capflags.c"
 
 int main(void)

commit 3235dc3f22378f35ce77eba0d0f62db2d9c4844e
Author: Frans Pop <elendil@planet.nl>
Date:   Sat Feb 6 18:47:17 2010 +0100

    x86: Remove trailing spaces in messages
    
    Signed-off-by: Frans Pop <elendil@planet.nl>
    Cc: Avi Kivity <avi@redhat.com>
    Cc: x86@kernel.org
    LKML-Reference: <1265478443-31072-10-git-send-email-elendil@planet.nl>
    [ Left out the KVM bits. ]
    Signed-off-by: Ingo Molnar <mingo@elte.hu>

diff --git a/arch/x86/boot/mkcpustr.c b/arch/x86/boot/mkcpustr.c
index 8ef60f20b371..919257f526f2 100644
--- a/arch/x86/boot/mkcpustr.c
+++ b/arch/x86/boot/mkcpustr.c
@@ -22,7 +22,7 @@ int main(void)
 	int i, j;
 	const char *str;
 
-	printf("static const char x86_cap_strs[] = \n");
+	printf("static const char x86_cap_strs[] =\n");
 
 	for (i = 0; i < NCAPINTS; i++) {
 		for (j = 0; j < 32; j++) {

commit 97fc0555dae8f4d437c8672c14d7191962429be4
Author: H. Peter Anvin <hpa@zytor.com>
Date:   Tue Sep 16 15:09:26 2008 -0700

    x86 setup: handle more than 8 CPU flag words
    
    Checkin e38e05a85828dac23540cd007df5f20985388afc added a 9th CPU flag
    word, but didn't adjust the boot code to match.  This patch adds the
    necessary boot code support.
    
    Note: due to a typo in an #if statement, it didn't trigger the #error
    this was supposed to do.
    
    Signed-off-by: H. Peter Anvin <hpa@zytor.com>

diff --git a/arch/x86/boot/mkcpustr.c b/arch/x86/boot/mkcpustr.c
index 4589caa3e9d1..8ef60f20b371 100644
--- a/arch/x86/boot/mkcpustr.c
+++ b/arch/x86/boot/mkcpustr.c
@@ -17,31 +17,31 @@
 
 #include "../kernel/cpu/capflags.c"
 
-#if NCAPFLAGS > 8
-# error "Need to adjust the boot code handling of CPUID strings"
-#endif
-
 int main(void)
 {
-	int i;
+	int i, j;
 	const char *str;
 
 	printf("static const char x86_cap_strs[] = \n");
 
-	for (i = 0; i < NCAPINTS*32; i++) {
-		str = x86_cap_flags[i];
-
-		if (i == NCAPINTS*32-1) {
-			/* The last entry must be unconditional; this
-			   also consumes the compiler-added null character */
-			if (!str)
-				str = "";
-			printf("\t\"\\x%02x\"\"%s\"\n", i, str);
-		} else if (str) {
-			printf("#if REQUIRED_MASK%d & (1 << %d)\n"
-			       "\t\"\\x%02x\"\"%s\\0\"\n"
-			       "#endif\n",
-			       i >> 5, i & 31, i, str);
+	for (i = 0; i < NCAPINTS; i++) {
+		for (j = 0; j < 32; j++) {
+			str = x86_cap_flags[i*32+j];
+
+			if (i == NCAPINTS-1 && j == 31) {
+				/* The last entry must be unconditional; this
+				   also consumes the compiler-added null
+				   character */
+				if (!str)
+					str = "";
+				printf("\t\"\\x%02x\\x%02x\"\"%s\"\n",
+				       i, j, str);
+			} else if (str) {
+				printf("#if REQUIRED_MASK%d & (1 << %d)\n"
+				       "\t\"\\x%02x\\x%02x\"\"%s\\0\"\n"
+				       "#endif\n",
+				       i, j, i, j, str);
+			}
 		}
 	}
 	printf("\t;\n");

commit 7414aa41a63348c3bc72d8c37b716024c29b6d50
Author: H. Peter Anvin <hpa@zytor.com>
Date:   Wed Aug 27 17:56:44 2008 -0700

    x86: generate names for /proc/cpuinfo from <asm/cpufeature.h>
    
    We have had a number of cases where <asm/cpufeature.h> (and its
    predecessors) have diverged substantially from the names list in
    /proc/cpuinfo.  This patch generates the latter from the former.
    
    It retains the option for explicitly overriding the strings, but by
    making that require a separate action it should at least be less
    likely to happen.
    
    It would be good to do a future pass and rename strings that are
    gratuituously different in the kernel (/proc/cpuinfo is a userspace
    interface and must remain constant.)
    
    Signed-off-by: H. Peter Anvin <hpa@zytor.com>

diff --git a/arch/x86/boot/mkcpustr.c b/arch/x86/boot/mkcpustr.c
index bbe76953bae9..4589caa3e9d1 100644
--- a/arch/x86/boot/mkcpustr.c
+++ b/arch/x86/boot/mkcpustr.c
@@ -15,7 +15,7 @@
 
 #include <stdio.h>
 
-#include "../kernel/cpu/feature_names.c"
+#include "../kernel/cpu/capflags.c"
 
 #if NCAPFLAGS > 8
 # error "Need to adjust the boot code handling of CPUID strings"

commit f0be6c6a697c2fe8e2efbe98cd157bdbcff969ae
Author: H. Peter Anvin <hpa@zytor.com>
Date:   Mon Feb 4 16:48:00 2008 +0100

    x86 setup: print missing CPU features in cleartext
    
    Instead of obscure numbers, print the list of missing CPU features in
    cleartext.  To conserve space, use a host program (mkcpustr.c) to
    produce a compact list of mandatory features only.
    
    Signed-off-by: H. Peter Anvin <hpa@zytor.com>
    Signed-off-by: Ingo Molnar <mingo@elte.hu>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>

diff --git a/arch/x86/boot/mkcpustr.c b/arch/x86/boot/mkcpustr.c
new file mode 100644
index 000000000000..bbe76953bae9
--- /dev/null
+++ b/arch/x86/boot/mkcpustr.c
@@ -0,0 +1,49 @@
+/* ----------------------------------------------------------------------- *
+ *
+ *   Copyright 2008 rPath, Inc. - All Rights Reserved
+ *
+ *   This file is part of the Linux kernel, and is made available under
+ *   the terms of the GNU General Public License version 2 or (at your
+ *   option) any later version; incorporated herein by reference.
+ *
+ * ----------------------------------------------------------------------- */
+
+/*
+ * This is a host program to preprocess the CPU strings into a
+ * compact format suitable for the setup code.
+ */
+
+#include <stdio.h>
+
+#include "../kernel/cpu/feature_names.c"
+
+#if NCAPFLAGS > 8
+# error "Need to adjust the boot code handling of CPUID strings"
+#endif
+
+int main(void)
+{
+	int i;
+	const char *str;
+
+	printf("static const char x86_cap_strs[] = \n");
+
+	for (i = 0; i < NCAPINTS*32; i++) {
+		str = x86_cap_flags[i];
+
+		if (i == NCAPINTS*32-1) {
+			/* The last entry must be unconditional; this
+			   also consumes the compiler-added null character */
+			if (!str)
+				str = "";
+			printf("\t\"\\x%02x\"\"%s\"\n", i, str);
+		} else if (str) {
+			printf("#if REQUIRED_MASK%d & (1 << %d)\n"
+			       "\t\"\\x%02x\"\"%s\\0\"\n"
+			       "#endif\n",
+			       i >> 5, i & 31, i, str);
+		}
+	}
+	printf("\t;\n");
+	return 0;
+}
