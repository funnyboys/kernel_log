commit b4bf274198bd415e66af0b54a2e181c59fd43ba4
Author: Mao Han <han_mao@c-sky.com>
Date:   Wed Apr 10 10:27:10 2019 +0800

    csky: Add perf_arch_fetch_caller_regs support
    
    In trace events as tracepoints context are not able to
    be retrieve with task_pt_regs. Without arch caller regs
    support the pt_regs context will be all zero, perf can
    not parsing the callchain and resolving the symbols
    correctly, some time will even get into deadlock
    while handling the page fault, eg:
    
    perf kmem â€”page record ls
    
    Changelog
     - Add test case cmd in comment
     - Use regs_fp(regs) which is defined in abi/regdef.h
    
    Signed-off-by: Mao Han <han_mao@c-sky.com>
    Signed-off-by: Guo Ren <guoren@kernel.org>

diff --git a/arch/csky/abiv1/inc/abi/regdef.h b/arch/csky/abiv1/inc/abi/regdef.h
index 729b1c3edcfd..104707fbdcc1 100644
--- a/arch/csky/abiv1/inc/abi/regdef.h
+++ b/arch/csky/abiv1/inc/abi/regdef.h
@@ -6,6 +6,7 @@
 
 #define syscallid	r1
 #define regs_syscallid(regs) regs->regs[9]
+#define regs_fp(regs) regs->regs[2]
 
 /*
  * PSR format:

commit bf241682936293291dcf40fd93cdd0f5e6222902
Author: Guo Ren <ren_guo@c-sky.com>
Date:   Mon Apr 1 19:06:09 2019 +0800

    csky: Reconstruct signal processing
    
    Linux kernel has provided some apis for arch signal's implementation.
    For example:
            restore_saved_sigmask()
            set_current_blocked()
            restore_altstack()
    
    But in last version of csky signal.c didn't use them and some codes are
    confusing, so reconstruct signal.c with reference to riscv's code.
    
    Now csky signal.c implementation are very close to riscv and we can
    get the following benefits:
     - Clear code structure
     - The signal code of riscv and csky can be reviewed together
     - Promoting the unification of arch's signal implementation
    
    Also modified the related code in entry.S
    
    Signed-off-by: Guo Ren <ren_guo@c-sky.com>
    Cc: Arnd Bergmann <arnd@arndb.de>

diff --git a/arch/csky/abiv1/inc/abi/regdef.h b/arch/csky/abiv1/inc/abi/regdef.h
index 9e7e692dd271..729b1c3edcfd 100644
--- a/arch/csky/abiv1/inc/abi/regdef.h
+++ b/arch/csky/abiv1/inc/abi/regdef.h
@@ -21,4 +21,6 @@
 
 #define SYSTRACE_SAVENUM	2
 
+#define TRAP0_SIZE		2
+
 #endif /* __ASM_CSKY_REGDEF_H */

commit f4625ee0e40a5c724bb3f3eb7fd89e491bfd7646
Author: Guo Ren <ren_guo@c-sky.com>
Date:   Sat Mar 30 23:44:34 2019 +0800

    csky: Use in_syscall & forget_syscall instead of r11_sig
    
    We could use regs->sr 16-24 bits to detect syscall: VEC_TRAP0 and
    r11_sig is no necessary for current implementation.
    
    In this patch, we implement the in_syscall and forget_syscall which are
    inspired from arm & nds32, but csky pt_regs has no syscall_num element
    and we just set zero to regs->sr's vector-bits-field instead.
    
    For ret_from_fork, current task was forked from parent which is in syscall
    progress and its regs->sr has been already setted with VEC_TRAP0. See:
    arch/csky/kernel/process.c: copy_thread()
    
    Signed-off-by: Guo Ren <ren_guo@c-sky.com>

diff --git a/arch/csky/abiv1/inc/abi/regdef.h b/arch/csky/abiv1/inc/abi/regdef.h
index 876689291b71..9e7e692dd271 100644
--- a/arch/csky/abiv1/inc/abi/regdef.h
+++ b/arch/csky/abiv1/inc/abi/regdef.h
@@ -5,8 +5,6 @@
 #define __ASM_CSKY_REGDEF_H
 
 #define syscallid	r1
-#define r11_sig		r11
-
 #define regs_syscallid(regs) regs->regs[9]
 
 /*

commit 735ee005c371b2d8d1dbf0542590d17f1e0a0b2f
Author: Guo Ren <ren_guo@c-sky.com>
Date:   Wed Sep 5 14:25:22 2018 +0800

    csky: Misc headers
    
    This patch adds csky registers' definition, bitops, byteorder,
    asm-offsets codes.
    
    Signed-off-by: Guo Ren <ren_guo@c-sky.com>
    Reviewed-by: Arnd Bergmann <arnd@arndb.de>

diff --git a/arch/csky/abiv1/inc/abi/regdef.h b/arch/csky/abiv1/inc/abi/regdef.h
new file mode 100644
index 000000000000..876689291b71
--- /dev/null
+++ b/arch/csky/abiv1/inc/abi/regdef.h
@@ -0,0 +1,26 @@
+/* SPDX-License-Identifier: GPL-2.0 */
+// Copyright (C) 2018 Hangzhou C-SKY Microsystems co.,ltd.
+
+#ifndef __ASM_CSKY_REGDEF_H
+#define __ASM_CSKY_REGDEF_H
+
+#define syscallid	r1
+#define r11_sig		r11
+
+#define regs_syscallid(regs) regs->regs[9]
+
+/*
+ * PSR format:
+ * | 31 | 30-24 | 23-16 | 15 14 | 13-0 |
+ *   S     CPID     VEC     TM
+ *
+ *    S: Super Mode
+ * CPID: Coprocessor id, only 15 for MMU
+ *  VEC: Exception Number
+ *   TM: Trace Mode
+ */
+#define DEFAULT_PSR_VALUE	0x8f000000
+
+#define SYSTRACE_SAVENUM	2
+
+#endif /* __ASM_CSKY_REGDEF_H */
