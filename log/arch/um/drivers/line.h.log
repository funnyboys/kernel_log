commit dbddf429dc514257170d4c5e116cbd95a86408ab
Author: Alex Dewar <alex.dewar@gmx.co.uk>
Date:   Sun Aug 25 10:49:16 2019 +0100

    um: Add SPDX headers for files in arch/um/drivers
    
    Convert files to use SPDX header. All files are licensed under the GPLv2.
    
    Signed-off-by: Alex Dewar <alex.dewar@gmx.co.uk>
    Signed-off-by: Richard Weinberger <richard@nod.at>

diff --git a/arch/um/drivers/line.h b/arch/um/drivers/line.h
index 138a14526d9c..a151ff5155ef 100644
--- a/arch/um/drivers/line.h
+++ b/arch/um/drivers/line.h
@@ -1,6 +1,6 @@
+/* SPDX-License-Identifier: GPL-2.0 */
 /* 
  * Copyright (C) 2001, 2002 Jeff Dike (jdike@karaya.com)
- * Licensed under the GPL
  */
 
 #ifndef __LINE_H__

commit 37185b33240870719b6b5913a46e6a441f1ae96f
Author: Al Viro <viro@ZenIV.linux.org.uk>
Date:   Mon Oct 8 03:27:32 2012 +0100

    um: get rid of pointless include "..." where include <...> will do
    
    Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>
    Signed-off-by: Richard Weinberger <richard@nod.at>

diff --git a/arch/um/drivers/line.h b/arch/um/drivers/line.h
index bae95611e7ab..138a14526d9c 100644
--- a/arch/um/drivers/line.h
+++ b/arch/um/drivers/line.h
@@ -6,12 +6,12 @@
 #ifndef __LINE_H__
 #define __LINE_H__
 
-#include "linux/list.h"
-#include "linux/workqueue.h"
-#include "linux/tty.h"
-#include "linux/interrupt.h"
-#include "linux/spinlock.h"
-#include "linux/mutex.h"
+#include <linux/list.h>
+#include <linux/workqueue.h>
+#include <linux/tty.h>
+#include <linux/interrupt.h>
+#include <linux/spinlock.h>
+#include <linux/mutex.h>
 #include "chan_user.h"
 #include "mconsole_kern.h"
 

commit a84ccab132370a07c7ca0c6df8c96bbd16306c9a
Author: Richard Weinberger <richard@nod.at>
Date:   Mon Jun 4 21:58:39 2012 +0200

    um: remove count_lock
    
    this lock is no longer needed.
    
    Signed-off-by: Richard Weinberger <richard@nod.at>

diff --git a/arch/um/drivers/line.h b/arch/um/drivers/line.h
index ad00f3e11ecc..bae95611e7ab 100644
--- a/arch/um/drivers/line.h
+++ b/arch/um/drivers/line.h
@@ -33,7 +33,6 @@ struct line_driver {
 
 struct line {
 	struct tty_port port;
-	struct mutex count_lock;
 	int valid;
 
 	char *init_str;

commit 79e0273d187c807dfec8d0cf450b8187cab5d3af
Author: Richard Weinberger <richard@nod.at>
Date:   Mon Jun 4 21:57:24 2012 +0200

    um: fully use tty_port
    
    ... use all tty_port helpers
    
    Signed-off-by: Richard Weinberger <richard@nod.at>

diff --git a/arch/um/drivers/line.h b/arch/um/drivers/line.h
index 6c3b252bf480..ad00f3e11ecc 100644
--- a/arch/um/drivers/line.h
+++ b/arch/um/drivers/line.h
@@ -58,7 +58,11 @@ struct line {
 };
 
 extern void line_close(struct tty_struct *tty, struct file * filp);
-extern int line_open(struct line *lines, struct tty_struct *tty);
+extern int line_open(struct tty_struct *tty, struct file *filp);
+extern int line_install(struct tty_driver *driver, struct tty_struct *tty,
+	struct line *line);
+extern void line_cleanup(struct tty_struct *tty);
+extern void line_hangup(struct tty_struct *tty);
 extern int line_setup(char **conf, unsigned nlines, char **def,
 		      char *init, char *name);
 extern int line_write(struct tty_struct *tty, const unsigned char *buf,

commit d003e982c1d2b8bf8418c415b0b87175d6a1bda2
Author: Richard Weinberger <richard@nod.at>
Date:   Mon Jun 4 20:53:13 2012 +0200

    um: remove line_ioctl()
    
    line_ioctl() has no real function.
    
    Signed-off-by: Richard Weinberger <richard@nod.at>

diff --git a/arch/um/drivers/line.h b/arch/um/drivers/line.h
index 5b3d4fbdec18..6c3b252bf480 100644
--- a/arch/um/drivers/line.h
+++ b/arch/um/drivers/line.h
@@ -69,8 +69,6 @@ extern int line_chars_in_buffer(struct tty_struct *tty);
 extern void line_flush_buffer(struct tty_struct *tty);
 extern void line_flush_chars(struct tty_struct *tty);
 extern int line_write_room(struct tty_struct *tty);
-extern int line_ioctl(struct tty_struct *tty, unsigned int cmd,
-				unsigned long arg);
 extern void line_throttle(struct tty_struct *tty);
 extern void line_unthrottle(struct tty_struct *tty);
 

commit 6fc58845ad189f8ceebd68a2ff524bfcd689a75e
Author: Jiri Slaby <jslaby@suse.cz>
Date:   Mon Jun 4 13:35:27 2012 +0200

    TTY: um/line, use tty from tty_port
    
    This means switching to the tty refcounted model so that we will not
    race with interrupts.
    
    Signed-off-by: Jiri Slaby <jslaby@suse.cz>
    Cc: Jeff Dike <jdike@addtoit.com>
    Cc: Richard Weinberger <richard@nod.at>
    Cc: user-mode-linux-devel@lists.sourceforge.net
    Signed-off-by: Richard Weinberger <richard@nod.at>

diff --git a/arch/um/drivers/line.h b/arch/um/drivers/line.h
index 0e06a1f441d7..5b3d4fbdec18 100644
--- a/arch/um/drivers/line.h
+++ b/arch/um/drivers/line.h
@@ -33,7 +33,6 @@ struct line_driver {
 
 struct line {
 	struct tty_port port;
-	struct tty_struct *tty;
 	struct mutex count_lock;
 	int valid;
 

commit 060ed31dd9ede0726f8c88aff36c6cd8ec6d0fe8
Author: Jiri Slaby <jslaby@suse.cz>
Date:   Mon Jun 4 13:35:26 2012 +0200

    TTY: um/line, add tty_port
    
    And use count from there.
    
    Signed-off-by: Jiri Slaby <jslaby@suse.cz>
    Cc: Jeff Dike <jdike@addtoit.com>
    Cc: Richard Weinberger <richard@nod.at>
    Cc: user-mode-linux-devel@lists.sourceforge.net
    Signed-off-by: Richard Weinberger <richard@nod.at>

diff --git a/arch/um/drivers/line.h b/arch/um/drivers/line.h
index 0a1834719dba..0e06a1f441d7 100644
--- a/arch/um/drivers/line.h
+++ b/arch/um/drivers/line.h
@@ -32,9 +32,9 @@ struct line_driver {
 };
 
 struct line {
+	struct tty_port port;
 	struct tty_struct *tty;
 	struct mutex count_lock;
-	unsigned long count;
 	int valid;
 
 	char *init_str;

commit 5eaa3411a80fe50b3a0333389e0e259c580869e9
Author: Al Viro <viro@zeniv.linux.org.uk>
Date:   Fri Sep 9 20:20:52 2011 -0400

    um: line->have_irq is never checked...
    
    looks like a half-arsed duplicate of line->enabled
    
    Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>
    Signed-off-by: Richard Weinberger <richard@nod.at>

diff --git a/arch/um/drivers/line.h b/arch/um/drivers/line.h
index 6cb05a22e9b0..0a1834719dba 100644
--- a/arch/um/drivers/line.h
+++ b/arch/um/drivers/line.h
@@ -56,7 +56,6 @@ struct line {
 	int sigio;
 	struct delayed_work task;
 	const struct line_driver *driver;
-	int have_irq;
 };
 
 extern void line_close(struct tty_struct *tty, struct file * filp);

commit ee4850702bd6980c7baeb6a45142d55744a109a2
Author: Al Viro <viro@zeniv.linux.org.uk>
Date:   Thu Sep 8 07:07:26 2011 -0400

    um: sorting out the chan mess, part 1
    
    put references to in and out chans associated with line into
    explicit struct chan * fields in it.
    
    Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>
    Signed-off-by: Richard Weinberger <richard@nod.at>

diff --git a/arch/um/drivers/line.h b/arch/um/drivers/line.h
index 95991994a93b..6cb05a22e9b0 100644
--- a/arch/um/drivers/line.h
+++ b/arch/um/drivers/line.h
@@ -39,6 +39,7 @@ struct line {
 
 	char *init_str;
 	struct list_head chan_list;
+	struct chan *chan_in, *chan_out;
 
 	/*This lock is actually, mostly, local to*/
 	spinlock_t lock;

commit 04292b2cf8f02a33cfc1054c0c51aa8c77731813
Author: Al Viro <viro@zeniv.linux.org.uk>
Date:   Fri Sep 9 20:07:05 2011 -0400

    um: get rid of lines_init()
    
    move config-independent parts of initialization into
    register_lines(), call setup_one_line() after it instead
    of abusing ->init_str.
    
    Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>
    Signed-off-by: Richard Weinberger <richard@nod.at>

diff --git a/arch/um/drivers/line.h b/arch/um/drivers/line.h
index e3f86065e049..95991994a93b 100644
--- a/arch/um/drivers/line.h
+++ b/arch/um/drivers/line.h
@@ -82,7 +82,8 @@ extern void line_close_chan(struct line *line);
 extern int register_lines(struct line_driver *line_driver,
 			  const struct tty_operations *driver,
 			  struct line *lines, int nlines);
-extern void lines_init(struct line *lines, int nlines, struct chan_opts *opts);
+extern int setup_one_line(struct line *lines, int n, char *init,
+			  const struct chan_opts *opts, char **error_out);
 extern void close_lines(struct line *lines, int nlines);
 
 extern int line_config(struct line *lines, unsigned int sizeof_lines,

commit cfe6b7c79daa0efa27f474f1fe2a88fd7af5cc47
Author: Al Viro <viro@zeniv.linux.org.uk>
Date:   Fri Sep 9 19:45:42 2011 -0400

    um: switch line.c tty drivers to dynamic device creation
    
    Current code doesn't update the symlinks in /sys/dev/char when we add/remove
    tty lines.  Fixing that allows to stop messing with ->valid before the driver
    registration, which is a Good Thing(tm) - we shouldn't have it set before we
    really have the things set up and ready for line_open().
    
    We need tty_driver available to call tty_{un,}register_device(), so we just
    stash a reference to it into struct line_driver.
    
    Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>
    Signed-off-by: Richard Weinberger <richard@nod.at>

diff --git a/arch/um/drivers/line.h b/arch/um/drivers/line.h
index 471f477b271e..e3f86065e049 100644
--- a/arch/um/drivers/line.h
+++ b/arch/um/drivers/line.h
@@ -15,7 +15,7 @@
 #include "chan_user.h"
 #include "mconsole_kern.h"
 
-/* There's only one modifiable field in this - .mc.list */
+/* There's only two modifiable fields in this - .mc.list and .driver */
 struct line_driver {
 	const char *name;
 	const char *device_name;
@@ -28,6 +28,7 @@ struct line_driver {
 	const int write_irq;
 	const char *write_irq_name;
 	struct mc_device mc;
+	struct tty_driver *driver;
 };
 
 struct line {
@@ -78,9 +79,9 @@ extern char *add_xterm_umid(char *base);
 extern int line_setup_irq(int fd, int input, int output, struct line *line,
 			  void *data);
 extern void line_close_chan(struct line *line);
-extern struct tty_driver *register_lines(struct line_driver *line_driver,
-					 const struct tty_operations *driver,
-					 struct line *lines, int nlines);
+extern int register_lines(struct line_driver *line_driver,
+			  const struct tty_operations *driver,
+			  struct line *lines, int nlines);
 extern void lines_init(struct line *lines, int nlines, struct chan_opts *opts);
 extern void close_lines(struct line *lines, int nlines);
 

commit d8c215adbf3901aa7d00a0f17f08d77be689f838
Author: Al Viro <viro@zeniv.linux.org.uk>
Date:   Fri Sep 9 17:36:37 2011 -0400

    um: convert count_lock to mutex, fix a race in line_open()
    
    If two processes are opening the same line, the second to get
    into line_open() will decide that it doesn't need to do anything
    (correctly) or wait for anything.  The latter, unfortunately,
    is incorrect - the first opener might not be through yet.  We
    need to have exclusion covering the entire line_init(), including
    the blocking parts.  Moreover, the next patch will need to
    widen the exclusion on mconsole side of things, also including
    the blocking bits, so let's just convert that sucker to mutex...
    
    Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>
    Signed-off-by: Richard Weinberger <richard@nod.at>

diff --git a/arch/um/drivers/line.h b/arch/um/drivers/line.h
index 0c4dadf5e03e..471f477b271e 100644
--- a/arch/um/drivers/line.h
+++ b/arch/um/drivers/line.h
@@ -32,7 +32,7 @@ struct line_driver {
 
 struct line {
 	struct tty_struct *tty;
-	spinlock_t count_lock;
+	struct mutex count_lock;
 	unsigned long count;
 	int valid;
 

commit 43574c1afea4f798592c03cf4d4ecea4fd0a8416
Author: Al Viro <viro@zeniv.linux.org.uk>
Date:   Fri Sep 9 17:25:00 2011 -0400

    um: get rid of the init_prio mess
    
    make line_setup() act on a separate array of conf strings + default conf,
    have lines array initialized explicitly by that data, bury LINE_INIT()
    macro from hell.
    
    Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>
    Signed-off-by: Richard Weinberger <richard@nod.at>

diff --git a/arch/um/drivers/line.h b/arch/um/drivers/line.h
index 63df3ca02ac2..0c4dadf5e03e 100644
--- a/arch/um/drivers/line.h
+++ b/arch/um/drivers/line.h
@@ -37,7 +37,6 @@ struct line {
 	int valid;
 
 	char *init_str;
-	int init_pri;
 	struct list_head chan_list;
 
 	/*This lock is actually, mostly, local to*/
@@ -58,18 +57,10 @@ struct line {
 	int have_irq;
 };
 
-#define LINE_INIT(str, d) \
-	{ .count_lock =	__SPIN_LOCK_UNLOCKED((str).count_lock), \
-	  .init_str =	str,	\
-	  .init_pri =	INIT_STATIC, \
-	  .valid =	1, \
-	  .lock =	__SPIN_LOCK_UNLOCKED((str).lock), \
-	  .driver =	d }
-
 extern void line_close(struct tty_struct *tty, struct file * filp);
 extern int line_open(struct line *lines, struct tty_struct *tty);
-extern int line_setup(struct line *lines, unsigned int sizeof_lines,
-		      char *init, char **error_out);
+extern int line_setup(char **conf, unsigned nlines, char **def,
+		      char *init, char *name);
 extern int line_write(struct tty_struct *tty, const unsigned char *buf,
 		      int len);
 extern int line_put_char(struct tty_struct *tty, unsigned char ch);

commit 510c72a3cf51c9463db64eb6c21347f4940a202f
Author: Al Viro <viro@ftp.linux.org.uk>
Date:   Thu Aug 18 20:08:29 2011 +0100

    um: take chan_*.h and line.h to arch/um/drivers
    
    Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>
    Signed-off-by: Richard Weinberger <richard@nod.at>

diff --git a/arch/um/drivers/line.h b/arch/um/drivers/line.h
new file mode 100644
index 000000000000..63df3ca02ac2
--- /dev/null
+++ b/arch/um/drivers/line.h
@@ -0,0 +1,106 @@
+/* 
+ * Copyright (C) 2001, 2002 Jeff Dike (jdike@karaya.com)
+ * Licensed under the GPL
+ */
+
+#ifndef __LINE_H__
+#define __LINE_H__
+
+#include "linux/list.h"
+#include "linux/workqueue.h"
+#include "linux/tty.h"
+#include "linux/interrupt.h"
+#include "linux/spinlock.h"
+#include "linux/mutex.h"
+#include "chan_user.h"
+#include "mconsole_kern.h"
+
+/* There's only one modifiable field in this - .mc.list */
+struct line_driver {
+	const char *name;
+	const char *device_name;
+	const short major;
+	const short minor_start;
+	const short type;
+	const short subtype;
+	const int read_irq;
+	const char *read_irq_name;
+	const int write_irq;
+	const char *write_irq_name;
+	struct mc_device mc;
+};
+
+struct line {
+	struct tty_struct *tty;
+	spinlock_t count_lock;
+	unsigned long count;
+	int valid;
+
+	char *init_str;
+	int init_pri;
+	struct list_head chan_list;
+
+	/*This lock is actually, mostly, local to*/
+	spinlock_t lock;
+	int throttled;
+	/* Yes, this is a real circular buffer.
+	 * XXX: And this should become a struct kfifo!
+	 *
+	 * buffer points to a buffer allocated on demand, of length
+	 * LINE_BUFSIZE, head to the start of the ring, tail to the end.*/
+	char *buffer;
+	char *head;
+	char *tail;
+
+	int sigio;
+	struct delayed_work task;
+	const struct line_driver *driver;
+	int have_irq;
+};
+
+#define LINE_INIT(str, d) \
+	{ .count_lock =	__SPIN_LOCK_UNLOCKED((str).count_lock), \
+	  .init_str =	str,	\
+	  .init_pri =	INIT_STATIC, \
+	  .valid =	1, \
+	  .lock =	__SPIN_LOCK_UNLOCKED((str).lock), \
+	  .driver =	d }
+
+extern void line_close(struct tty_struct *tty, struct file * filp);
+extern int line_open(struct line *lines, struct tty_struct *tty);
+extern int line_setup(struct line *lines, unsigned int sizeof_lines,
+		      char *init, char **error_out);
+extern int line_write(struct tty_struct *tty, const unsigned char *buf,
+		      int len);
+extern int line_put_char(struct tty_struct *tty, unsigned char ch);
+extern void line_set_termios(struct tty_struct *tty, struct ktermios * old);
+extern int line_chars_in_buffer(struct tty_struct *tty);
+extern void line_flush_buffer(struct tty_struct *tty);
+extern void line_flush_chars(struct tty_struct *tty);
+extern int line_write_room(struct tty_struct *tty);
+extern int line_ioctl(struct tty_struct *tty, unsigned int cmd,
+				unsigned long arg);
+extern void line_throttle(struct tty_struct *tty);
+extern void line_unthrottle(struct tty_struct *tty);
+
+extern char *add_xterm_umid(char *base);
+extern int line_setup_irq(int fd, int input, int output, struct line *line,
+			  void *data);
+extern void line_close_chan(struct line *line);
+extern struct tty_driver *register_lines(struct line_driver *line_driver,
+					 const struct tty_operations *driver,
+					 struct line *lines, int nlines);
+extern void lines_init(struct line *lines, int nlines, struct chan_opts *opts);
+extern void close_lines(struct line *lines, int nlines);
+
+extern int line_config(struct line *lines, unsigned int sizeof_lines,
+		       char *str, const struct chan_opts *opts,
+		       char **error_out);
+extern int line_id(char **str, int *start_out, int *end_out);
+extern int line_remove(struct line *lines, unsigned int sizeof_lines, int n,
+		       char **error_out);
+extern int line_get_config(char *dev, struct line *lines,
+			   unsigned int sizeof_lines, char *str,
+			   int size, char **error_out);
+
+#endif
