commit 673deb0beba5d39c2e0bc6536e00b03b6ef59cc0
Author: Claudio Imbrenda <imbrenda@linux.ibm.com>
Date:   Thu Apr 23 14:01:14 2020 +0200

    s390/protvirt: fix compilation issue
    
    The kernel fails to compile with CONFIG_PROTECTED_VIRTUALIZATION_GUEST
    set but CONFIG_KVM unset.
    
    This patch fixes the issue by making the needed variable always available.
    
    Link: https://lkml.kernel.org/r/20200423120114.2027410-1-imbrenda@linux.ibm.com
    Fixes: a0f60f843199 ("s390/protvirt: Add sysfs firmware interface for Ultravisor information")
    Reported-by: kbuild test robot <lkp@intel.com>
    Reported-by: Philipp Rudo <prudo@linux.ibm.com>
    Suggested-by: Philipp Rudo <prudo@linux.ibm.com>
    Reviewed-by: David Hildenbrand <david@redhat.com>
    Reviewed-by: Cornelia Huck <cohuck@redhat.com>
    Reviewed-by: Vasily Gorbik <gor@linux.ibm.com>
    Acked-by: Christian Borntraeger <borntraeger@de.ibm.com>
    Signed-off-by: Claudio Imbrenda <imbrenda@linux.ibm.com>
    Signed-off-by: Vasily Gorbik <gor@linux.ibm.com>

diff --git a/arch/s390/boot/uv.c b/arch/s390/boot/uv.c
index 8fde561f1d07..f887a479cdc7 100644
--- a/arch/s390/boot/uv.c
+++ b/arch/s390/boot/uv.c
@@ -7,9 +7,7 @@
 #ifdef CONFIG_PROTECTED_VIRTUALIZATION_GUEST
 int __bootdata_preserved(prot_virt_guest);
 #endif
-#if IS_ENABLED(CONFIG_KVM)
 struct uv_info __bootdata_preserved(uv_info);
-#endif
 
 void uv_query_info(void)
 {

commit ecdc5d842bb3c166c3d549e52ba91a3955b257f2
Author: Vasily Gorbik <gor@linux.ibm.com>
Date:   Wed Oct 23 13:56:36 2019 +0200

    s390/protvirt: introduce host side setup
    
    Add "prot_virt" command line option which controls if the kernel
    protected VMs support is enabled at early boot time. This has to be
    done early, because it needs large amounts of memory and will disable
    some features like STP time sync for the lpar.
    
    Extend ultravisor info definitions and expose it via uv_info struct
    filled in during startup.
    
    Signed-off-by: Vasily Gorbik <gor@linux.ibm.com>
    Reviewed-by: Thomas Huth <thuth@redhat.com>
    Acked-by: David Hildenbrand <david@redhat.com>
    Reviewed-by: Cornelia Huck <cohuck@redhat.com>
    Acked-by: Christian Borntraeger <borntraeger@de.ibm.com>
    [borntraeger@de.ibm.com: patch merging, splitting, fixing]
    Signed-off-by: Christian Borntraeger <borntraeger@de.ibm.com>

diff --git a/arch/s390/boot/uv.c b/arch/s390/boot/uv.c
index 3f501159ee9f..8fde561f1d07 100644
--- a/arch/s390/boot/uv.c
+++ b/arch/s390/boot/uv.c
@@ -3,7 +3,13 @@
 #include <asm/facility.h>
 #include <asm/sections.h>
 
+/* will be used in arch/s390/kernel/uv.c */
+#ifdef CONFIG_PROTECTED_VIRTUALIZATION_GUEST
 int __bootdata_preserved(prot_virt_guest);
+#endif
+#if IS_ENABLED(CONFIG_KVM)
+struct uv_info __bootdata_preserved(uv_info);
+#endif
 
 void uv_query_info(void)
 {
@@ -19,7 +25,21 @@ void uv_query_info(void)
 	if (uv_call(0, (uint64_t)&uvcb) && uvcb.header.rc != 0x100)
 		return;
 
+	if (IS_ENABLED(CONFIG_KVM)) {
+		memcpy(uv_info.inst_calls_list, uvcb.inst_calls_list, sizeof(uv_info.inst_calls_list));
+		uv_info.uv_base_stor_len = uvcb.uv_base_stor_len;
+		uv_info.guest_base_stor_len = uvcb.conf_base_phys_stor_len;
+		uv_info.guest_virt_base_stor_len = uvcb.conf_base_virt_stor_len;
+		uv_info.guest_virt_var_stor_len = uvcb.conf_virt_var_stor_len;
+		uv_info.guest_cpu_stor_len = uvcb.cpu_stor_len;
+		uv_info.max_sec_stor_addr = ALIGN(uvcb.max_guest_stor_addr, PAGE_SIZE);
+		uv_info.max_num_sec_conf = uvcb.max_num_sec_conf;
+		uv_info.max_guest_cpus = uvcb.max_guest_cpus;
+	}
+
+#ifdef CONFIG_PROTECTED_VIRTUALIZATION_GUEST
 	if (test_bit_inv(BIT_UVC_CMD_SET_SHARED_ACCESS, (unsigned long *)uvcb.inst_calls_list) &&
 	    test_bit_inv(BIT_UVC_CMD_REMOVE_SHARED_ACCESS, (unsigned long *)uvcb.inst_calls_list))
 		prot_virt_guest = 1;
+#endif
 }

commit 27dc0700c3be7c681cea03c5230b93d02f623492
Author: Christian Borntraeger <borntraeger@de.ibm.com>
Date:   Mon Feb 10 11:27:37 2020 -0500

    s390/uv: Fix handling of length extensions
    
    The query parameter block might contain additional information and can
    be extended in the future. If the size of the block does not suffice we
    get an error code of rc=0x100.  The buffer will contain all information
    up to the specified size and the hypervisor/guest simply do not need the
    additional information as they do not know about the new data.  That
    means that we can (and must) accept rc=0x100 as success.
    
    Cc: stable@vger.kernel.org
    Reviewed-by: Cornelia Huck <cohuck@redhat.com>
    Fixes: 5abb9351dfd9 ("s390/uv: introduce guest side ultravisor code")
    Signed-off-by: Christian Borntraeger <borntraeger@de.ibm.com>
    Signed-off-by: Vasily Gorbik <gor@linux.ibm.com>

diff --git a/arch/s390/boot/uv.c b/arch/s390/boot/uv.c
index ed007f4a6444..3f501159ee9f 100644
--- a/arch/s390/boot/uv.c
+++ b/arch/s390/boot/uv.c
@@ -15,7 +15,8 @@ void uv_query_info(void)
 	if (!test_facility(158))
 		return;
 
-	if (uv_call(0, (uint64_t)&uvcb))
+	/* rc==0x100 means that there is additional data we do not process */
+	if (uv_call(0, (uint64_t)&uvcb) && uvcb.header.rc != 0x100)
 		return;
 
 	if (test_bit_inv(BIT_UVC_CMD_SET_SHARED_ACCESS, (unsigned long *)uvcb.inst_calls_list) &&

commit 5abb9351dfd937d43193f4d09af9c72bfe2c4180
Author: Vasily Gorbik <gor@linux.ibm.com>
Date:   Mon Apr 1 19:11:03 2019 +0200

    s390/uv: introduce guest side ultravisor code
    
    The Ultravisor Call Facility (stfle bit 158) defines an API to the
    Ultravisor (UV calls), a mini hypervisor located at machine
    level. With help of the Ultravisor, KVM will be able to run
    "protected" VMs, special VMs whose memory and management data are
    unavailable to KVM.
    
    The protected VMs can also request services from the Ultravisor.
    The guest api consists of UV calls to share and unshare memory with the
    kvm hypervisor.
    
    To enable this feature support PROTECTED_VIRTUALIZATION_GUEST kconfig
    option has been introduced.
    
    Co-developed-by: Janosch Frank <frankja@de.ibm.com>
    Signed-off-by: Janosch Frank <frankja@de.ibm.com>
    Signed-off-by: Vasily Gorbik <gor@linux.ibm.com>
    Signed-off-by: Martin Schwidefsky <schwidefsky@de.ibm.com>

diff --git a/arch/s390/boot/uv.c b/arch/s390/boot/uv.c
new file mode 100644
index 000000000000..ed007f4a6444
--- /dev/null
+++ b/arch/s390/boot/uv.c
@@ -0,0 +1,24 @@
+// SPDX-License-Identifier: GPL-2.0
+#include <asm/uv.h>
+#include <asm/facility.h>
+#include <asm/sections.h>
+
+int __bootdata_preserved(prot_virt_guest);
+
+void uv_query_info(void)
+{
+	struct uv_cb_qui uvcb = {
+		.header.cmd = UVC_CMD_QUI,
+		.header.len = sizeof(uvcb)
+	};
+
+	if (!test_facility(158))
+		return;
+
+	if (uv_call(0, (uint64_t)&uvcb))
+		return;
+
+	if (test_bit_inv(BIT_UVC_CMD_SET_SHARED_ACCESS, (unsigned long *)uvcb.inst_calls_list) &&
+	    test_bit_inv(BIT_UVC_CMD_REMOVE_SHARED_ACCESS, (unsigned long *)uvcb.inst_calls_list))
+		prot_virt_guest = 1;
+}
