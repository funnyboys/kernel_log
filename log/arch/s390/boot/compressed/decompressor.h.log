commit 805bc0bc238f7209fca5e39c152b0d3c12046ac9
Author: Gerald Schaefer <gerald.schaefer@de.ibm.com>
Date:   Sun Feb 3 21:35:45 2019 +0100

    s390/kernel: build a relocatable kernel
    
    This patch adds support for building a relocatable kernel with -fPIE.
    The kernel will be relocated to 0 early in the boot process.
    
    Signed-off-by: Gerald Schaefer <gerald.schaefer@de.ibm.com>
    Reviewed-by: Philipp Rudo <prudo@linux.ibm.com>
    Signed-off-by: Martin Schwidefsky <schwidefsky@de.ibm.com>

diff --git a/arch/s390/boot/compressed/decompressor.h b/arch/s390/boot/compressed/decompressor.h
index 424cf524aac1..c15eb7114d83 100644
--- a/arch/s390/boot/compressed/decompressor.h
+++ b/arch/s390/boot/compressed/decompressor.h
@@ -19,6 +19,9 @@ struct vmlinux_info {
 	unsigned long bootdata_size;
 	unsigned long bootdata_preserved_off;
 	unsigned long bootdata_preserved_size;
+	unsigned long dynsym_start;
+	unsigned long rela_dyn_start;
+	unsigned long rela_dyn_end;
 };
 
 extern char _vmlinux_info[];

commit bf9921a9c15bad089c08b94c300a6cafa035a612
Author: Gerald Schaefer <gerald.schaefer@de.ibm.com>
Date:   Mon Apr 1 19:10:45 2019 +0200

    s390: introduce .boot.preserved.data section
    
    Introduce .boot.preserve.data section which is similar to .boot.data and
    "shared" between the decompressor code and the decompressed kernel. The
    decompressor will store values in it, and copy over to the decompressed
    image before starting it. This method allows to avoid using pre-defined
    addresses and other hacks to pass values between those boot phases.
    
    Unlike .boot.data section .boot.preserved.data is NOT a part of init data,
    and hence will be preserved for the kernel life time.
    
    Signed-off-by: Gerald Schaefer <gerald.schaefer@de.ibm.com>
    Signed-off-by: Vasily Gorbik <gor@linux.ibm.com>
    Signed-off-by: Martin Schwidefsky <schwidefsky@de.ibm.com>

diff --git a/arch/s390/boot/compressed/decompressor.h b/arch/s390/boot/compressed/decompressor.h
index e1c1f2ec60f4..424cf524aac1 100644
--- a/arch/s390/boot/compressed/decompressor.h
+++ b/arch/s390/boot/compressed/decompressor.h
@@ -17,6 +17,8 @@ struct vmlinux_info {
 	unsigned long bss_size;		/* uncompressed image .bss size */
 	unsigned long bootdata_off;
 	unsigned long bootdata_size;
+	unsigned long bootdata_preserved_off;
+	unsigned long bootdata_preserved_size;
 };
 
 extern char _vmlinux_info[];

commit d1b52a4388ffdcff47fb53de7fffe052fe766a9f
Author: Vasily Gorbik <gor@linux.ibm.com>
Date:   Tue Apr 10 14:14:02 2018 +0200

    s390: introduce .boot.data section
    
    Introduce .boot.data section which is "shared" between the decompressor
    code and the decompressed kernel. The decompressor will store values in
    it, and copy over to the decompressed image before starting it. This
    method allows to avoid using pre-defined addresses and other hacks to
    pass values between those boot phases.
    
    .boot.data section is a part of init data, and will be freed after kernel
    initialization is complete.
    
    For uncompressed kernel image, .boot.data section is basically the same
    as .init.data
    
    Reviewed-by: Martin Schwidefsky <schwidefsky@de.ibm.com>
    Signed-off-by: Vasily Gorbik <gor@linux.ibm.com>
    Signed-off-by: Martin Schwidefsky <schwidefsky@de.ibm.com>

diff --git a/arch/s390/boot/compressed/decompressor.h b/arch/s390/boot/compressed/decompressor.h
index b774425dcb5f..e1c1f2ec60f4 100644
--- a/arch/s390/boot/compressed/decompressor.h
+++ b/arch/s390/boot/compressed/decompressor.h
@@ -15,6 +15,8 @@ struct vmlinux_info {
 	void (*entry)(void);
 	unsigned long image_size;	/* does not include .bss */
 	unsigned long bss_size;		/* uncompressed image .bss size */
+	unsigned long bootdata_off;
+	unsigned long bootdata_size;
 };
 
 extern char _vmlinux_info[];

commit 7516fc11e44e73f1fcf8a3808dd88f82142e6585
Author: Vasily Gorbik <gor@linux.ibm.com>
Date:   Wed Jul 25 15:01:11 2018 +0200

    s390/decompressor: clean up and rename compressed/misc.c
    
    Since compressed/misc.c is conditionally compiled move error reporting
    code to boot/main.c. With that being done compressed/misc.c has no
    "miscellaneous" functions left and is all about plain decompression
    now. Rename it accordingly.
    
    Reviewed-by: Martin Schwidefsky <schwidefsky@de.ibm.com>
    Signed-off-by: Vasily Gorbik <gor@linux.ibm.com>
    Signed-off-by: Martin Schwidefsky <schwidefsky@de.ibm.com>

diff --git a/arch/s390/boot/compressed/decompressor.h b/arch/s390/boot/compressed/decompressor.h
index 90d382d501d7..b774425dcb5f 100644
--- a/arch/s390/boot/compressed/decompressor.h
+++ b/arch/s390/boot/compressed/decompressor.h
@@ -8,6 +8,7 @@ static inline void *decompress_kernel(void) {}
 void *decompress_kernel(void);
 #endif
 unsigned long mem_safe_offset(void);
+void error(char *m);
 
 struct vmlinux_info {
 	unsigned long default_lma;

commit 15426ca43d888e79f2dc4012bce0cbd6be96baf1
Author: Vasily Gorbik <gor@linux.ibm.com>
Date:   Wed Apr 11 11:56:55 2018 +0200

    s390: rescue initrd as early as possible
    
    To avoid multi-stage initrd rescue operation and to simplify
    assumptions during early memory allocations move initrd at some final
    safe destination as early as possible. This would also allow us to
    drop .bss usage restrictions for some files.
    
    Reviewed-by: Martin Schwidefsky <schwidefsky@de.ibm.com>
    Signed-off-by: Vasily Gorbik <gor@linux.ibm.com>
    Signed-off-by: Martin Schwidefsky <schwidefsky@de.ibm.com>

diff --git a/arch/s390/boot/compressed/decompressor.h b/arch/s390/boot/compressed/decompressor.h
index 011cbb6e0e08..90d382d501d7 100644
--- a/arch/s390/boot/compressed/decompressor.h
+++ b/arch/s390/boot/compressed/decompressor.h
@@ -7,11 +7,13 @@ static inline void *decompress_kernel(void) {}
 #else
 void *decompress_kernel(void);
 #endif
+unsigned long mem_safe_offset(void);
 
 struct vmlinux_info {
 	unsigned long default_lma;
 	void (*entry)(void);
 	unsigned long image_size;	/* does not include .bss */
+	unsigned long bss_size;		/* uncompressed image .bss size */
 };
 
 extern char _vmlinux_info[];

commit 369f91c374514f9491d52fec12f7ee9ef6d44b23
Author: Vasily Gorbik <gor@linux.ibm.com>
Date:   Thu Jul 19 16:51:25 2018 +0200

    s390/decompressor: rework uncompressed image info collection
    
    The kernel decompressor has to know several bits of information about
    uncompressed image. Currently this info is collected by running "nm" on
    uncompressed vmlinux + "sed" and producing sizes.h file. This method
    worked well, but it has several disadvantages. Obscure symbols name
    pattern matching is fragile. Adding new values makes pattern even
    longer. Logic is spread across code and make file. Limited ability to
    adjust symbols values (currently magic lma value of 0x100000 is always
    subtracted). Apart from that same pieces of information (and more)
    would be needed for early memory detection and features like KASLR
    outside of boot/compressed/ folder where sizes.h is generated.
    
    To overcome limitations new "struct vmlinux_info" has been introduced
    to include values needed for the decompressor and the rest of the
    boot code. The only static instance of vmlinux_info is produced during
    vmlinux link step by filling in struct fields by the linker (like it is
    done with input_data in boot/compressed/vmlinux.scr.lds.S). This way
    individual values could be adjusted with all the knowledge linker has
    and arithmetic it supports. Later .vmlinux.info section (which contains
    struct vmlinux_info) is transplanted into the decompressor image and
    dropped from uncompressed image altogether.
    
    While doing that replace "compressed/vmlinux.scr.lds.S" linker
    script (whose purpose is to rename .data section in piggy.o to
    .rodata.compressed) with plain objcopy command. And simplify
    decompressor's linker script.
    
    Reviewed-by: Martin Schwidefsky <schwidefsky@de.ibm.com>
    Signed-off-by: Vasily Gorbik <gor@linux.ibm.com>
    Signed-off-by: Martin Schwidefsky <schwidefsky@de.ibm.com>

diff --git a/arch/s390/boot/compressed/decompressor.h b/arch/s390/boot/compressed/decompressor.h
index 0dd0b84679c4..011cbb6e0e08 100644
--- a/arch/s390/boot/compressed/decompressor.h
+++ b/arch/s390/boot/compressed/decompressor.h
@@ -3,9 +3,18 @@
 #define BOOT_COMPRESSED_DECOMPRESSOR_H
 
 #ifdef CONFIG_KERNEL_UNCOMPRESSED
-static inline void *decompress_kernel(unsigned long *uncompressed_size) {}
+static inline void *decompress_kernel(void) {}
 #else
-void *decompress_kernel(unsigned long *uncompressed_size);
+void *decompress_kernel(void);
 #endif
 
+struct vmlinux_info {
+	unsigned long default_lma;
+	void (*entry)(void);
+	unsigned long image_size;	/* does not include .bss */
+};
+
+extern char _vmlinux_info[];
+#define vmlinux (*(struct vmlinux_info *)_vmlinux_info)
+
 #endif /* BOOT_COMPRESSED_DECOMPRESSOR_H */

commit 8f75582a2fb6e2c5afc5252b6d6932f61a79c939
Author: Vasily Gorbik <gor@linux.ibm.com>
Date:   Thu Jul 19 13:11:28 2018 +0200

    s390: remove decompressor's head.S
    
    Decompressor's head.S provided "data mover" sole purpose of which has
    been to safely move uncompressed kernel at 0x100000 and jump to it.
    
    With current bzImage layout entire decompressor's code guaranteed to be
    in a safe location under 0x100000, and hence could not be overwritten
    during kernel move. For that reason head.S could be replaced with simple
    memmove function. To do so introduce early boot code phase which is
    executed from arch/s390/boot/head.S after "verify_facilities" and takes
    care of optional kernel image decompression and transition to it.
    
    Reviewed-by: Martin Schwidefsky <schwidefsky@de.ibm.com>
    Signed-off-by: Vasily Gorbik <gor@linux.ibm.com>
    Signed-off-by: Martin Schwidefsky <schwidefsky@de.ibm.com>

diff --git a/arch/s390/boot/compressed/decompressor.h b/arch/s390/boot/compressed/decompressor.h
new file mode 100644
index 000000000000..0dd0b84679c4
--- /dev/null
+++ b/arch/s390/boot/compressed/decompressor.h
@@ -0,0 +1,11 @@
+/* SPDX-License-Identifier: GPL-2.0 */
+#ifndef BOOT_COMPRESSED_DECOMPRESSOR_H
+#define BOOT_COMPRESSED_DECOMPRESSOR_H
+
+#ifdef CONFIG_KERNEL_UNCOMPRESSED
+static inline void *decompress_kernel(unsigned long *uncompressed_size) {}
+#else
+void *decompress_kernel(unsigned long *uncompressed_size);
+#endif
+
+#endif /* BOOT_COMPRESSED_DECOMPRESSOR_H */
