commit fe5908bccc565f85cab025695627678cf257f91e
Author: Thomas Richter <tmricht@linux.ibm.com>
Date:   Mon Oct 29 13:16:38 2018 +0000

    s390/cpum_cf_diag: Add support for s390 counter facility diagnostic trace
    
    Introduce a PMU device named cpum_cf_diag. It extracts the
    values of all counters in all authorized counter sets and stores
    them as event raw data. This is done with the STORE CPU COUNTER
    MULTIPLE instruction to speed up access. All counter sets
    fit into one buffer. The values of each counter are taken
    when the event is started on the performance sub-system and when
    the event is stopped.
    This results in counter values available at the start and
    at the end of the measurement time frame. The difference is
    calculated for each counter. The differences of all
    counters are then saved as event raw data in the perf.data
    file.
    
    The counter values are accompanied by the time stamps
    when the counter set was started and when the counter set
    was stopped. This data is part of a trailer entry which
    describes the time frame, counter set version numbers,
    CPU speed, and machine type for later analysis.
    
    Signed-off-by: Thomas Richter <tmricht@linux.ibm.com>
    Reviewed-by: Hendrik Brueckner <brueckner@linux.ibm.com>
    Signed-off-by: Martin Schwidefsky <schwidefsky@de.ibm.com>

diff --git a/arch/s390/include/asm/cpu_mcf.h b/arch/s390/include/asm/cpu_mcf.h
index 0c236d1a7aee..649b9fc60685 100644
--- a/arch/s390/include/asm/cpu_mcf.h
+++ b/arch/s390/include/asm/cpu_mcf.h
@@ -49,6 +49,26 @@ static inline void ctr_set_stop(u64 *state, int ctr_set)
 	*state &= ~(cpumf_ctr_ctl[ctr_set] << CPUMF_LCCTL_ACTCTL_SHIFT);
 }
 
+static inline void ctr_set_multiple_enable(u64 *state, u64 ctrsets)
+{
+	*state |= ctrsets << CPUMF_LCCTL_ENABLE_SHIFT;
+}
+
+static inline void ctr_set_multiple_disable(u64 *state, u64 ctrsets)
+{
+	*state &= ~(ctrsets << CPUMF_LCCTL_ENABLE_SHIFT);
+}
+
+static inline void ctr_set_multiple_start(u64 *state, u64 ctrsets)
+{
+	*state |= ctrsets << CPUMF_LCCTL_ACTCTL_SHIFT;
+}
+
+static inline void ctr_set_multiple_stop(u64 *state, u64 ctrsets)
+{
+	*state &= ~(ctrsets << CPUMF_LCCTL_ACTCTL_SHIFT);
+}
+
 static inline int ctr_stcctm(enum cpumf_ctr_set set, u64 range, u64 *dest)
 {
 	switch (set) {
@@ -97,4 +117,10 @@ static inline void kernel_cpumcf_end(void)
 	preempt_enable();
 }
 
+/* Return true if store counter set multiple instruction is available */
+static inline int stccm_avail(void)
+{
+	return test_facility(142);
+}
+
 #endif /* _ASM_S390_CPU_MCF_H */

commit 86c0b75715e711c035ae0ed9820ae95f14fe2c0d
Author: Hendrik Brueckner <brueckner@linux.ibm.com>
Date:   Fri Oct 26 09:48:29 2018 +0200

    s390/cpum_cf: add ctr_stcctm() function
    
    Introduce the ctr_stcctm() function as wrapper function to extract counters
    from a particular counter set.  Note that the counter set is part of the
    stcctm instruction opcode, few indirections are necessary to specify the
    counter set as variable.
    
    Signed-off-by: Hendrik Brueckner <brueckner@linux.ibm.com>
    Signed-off-by: Martin Schwidefsky <schwidefsky@de.ibm.com>

diff --git a/arch/s390/include/asm/cpu_mcf.h b/arch/s390/include/asm/cpu_mcf.h
index 7121365a85d9..0c236d1a7aee 100644
--- a/arch/s390/include/asm/cpu_mcf.h
+++ b/arch/s390/include/asm/cpu_mcf.h
@@ -49,6 +49,25 @@ static inline void ctr_set_stop(u64 *state, int ctr_set)
 	*state &= ~(cpumf_ctr_ctl[ctr_set] << CPUMF_LCCTL_ACTCTL_SHIFT);
 }
 
+static inline int ctr_stcctm(enum cpumf_ctr_set set, u64 range, u64 *dest)
+{
+	switch (set) {
+	case CPUMF_CTR_SET_BASIC:
+		return stcctm(BASIC, range, dest);
+	case CPUMF_CTR_SET_USER:
+		return stcctm(PROBLEM_STATE, range, dest);
+	case CPUMF_CTR_SET_CRYPTO:
+		return stcctm(CRYPTO_ACTIVITY, range, dest);
+	case CPUMF_CTR_SET_EXT:
+		return stcctm(EXTENDED, range, dest);
+	case CPUMF_CTR_SET_MT_DIAG:
+		return stcctm(MT_DIAG_CLEARING, range, dest);
+	case CPUMF_CTR_SET_MAX:
+		return 3;
+	}
+	return 3;
+}
+
 struct cpu_cf_events {
 	struct cpumf_ctr_info	info;
 	atomic_t		ctr_set[CPUMF_CTR_SET_MAX];

commit 869f4f98fafadddb3a871b9513f24a44479d8296
Author: Hendrik Brueckner <brueckner@linux.ibm.com>
Date:   Thu Oct 25 16:58:15 2018 +0200

    s390/cpum_cf: introduce kernel_cpumcf_avail() function
    
    A preparation to move out common CPU-MF counter facility support
    functions, first introduce a function that indicates whether the
    support is ready to use.
    
    Signed-off-by: Hendrik Brueckner <brueckner@linux.ibm.com>
    Signed-off-by: Martin Schwidefsky <schwidefsky@de.ibm.com>

diff --git a/arch/s390/include/asm/cpu_mcf.h b/arch/s390/include/asm/cpu_mcf.h
index 12a4224560bc..7121365a85d9 100644
--- a/arch/s390/include/asm/cpu_mcf.h
+++ b/arch/s390/include/asm/cpu_mcf.h
@@ -59,6 +59,7 @@ struct cpu_cf_events {
 };
 DECLARE_PER_CPU(struct cpu_cf_events, cpu_cf_events);
 
+bool kernel_cpumcf_avail(void);
 int __kernel_cpumcf_begin(void);
 unsigned long kernel_cpumcf_alert(int clear);
 void __kernel_cpumcf_end(void);

commit 17bebcc68eeea3e1189f712dcba39809ad0d7a86
Author: Hendrik Brueckner <brueckner@linux.ibm.com>
Date:   Wed Aug 8 10:38:43 2018 +0200

    s390/cpum_cf: Add minimal in-kernel interface for counter measurements
    
    Introduce a minimal interface for doing counter measurements of small
    units of work within the kernel.  Use the kernel_cpumcf_begin() function
    start a measurement session and, later, stop it with kernel_cpumcf_end().
    
    During the measreument session, you can enable and start/stop counter sets
    by using ctr_set_* functions.  To make these changes effective use the
    lcctl() function.  You can then use the ecctr() function to extract counters
    from the different counter sets.
    Please note that you have to check whether the counter sets to be enabled
    are authorized.
    
    Note that when a measurement session is active, other users cannot perform
    counter measurements.  In such cases, kernel_cpumcf_begin() indicates this
    with returning -EBUSY.  If the counter facility is not available,
    kernel_cpumcf_begin() returns -ENODEV.
    
    Note that this interface is restricted to the current CPU and, thus,
    preemption must be turned off.
    
    Example:
    
            u32 state, err;
            u64 cycles, insn;
    
            err = kernel_cpumcf_begin();
            if (err)
                    goto out_busy;
    
            state = 0;
            ctr_set_enable(&state, CPUMF_CTR_SET_BASIC);
            ctr_set_start(&state, CPUMF_CTR_SET_BASIC);
    
            err = lcctl(state);
            if (err)
                    goto ;
    
            /* ... do your work ... */
    
            ctr_set_stop(&state, CPUMF_CTR_SET_BASIC);
            err = lcctl(state);
            if (err)
                    goto out;
    
            cycles = insn = 0;
            ecctr(0, &cycles);
            ecctr(1, &insn);
    
            /* ... */
    
            kernel_cpumcf_end();
    out_busy:
    
    Signed-off-by: Hendrik Brueckner <brueckner@linux.ibm.com>
    Signed-off-by: Martin Schwidefsky <schwidefsky@de.ibm.com>

diff --git a/arch/s390/include/asm/cpu_mcf.h b/arch/s390/include/asm/cpu_mcf.h
index 2cd4f09ee268..12a4224560bc 100644
--- a/arch/s390/include/asm/cpu_mcf.h
+++ b/arch/s390/include/asm/cpu_mcf.h
@@ -63,4 +63,18 @@ int __kernel_cpumcf_begin(void);
 unsigned long kernel_cpumcf_alert(int clear);
 void __kernel_cpumcf_end(void);
 
+static inline int kernel_cpumcf_begin(void)
+{
+	if (!cpum_cf_avail())
+		return -ENODEV;
+
+	preempt_disable();
+	return __kernel_cpumcf_begin();
+}
+static inline void kernel_cpumcf_end(void)
+{
+	__kernel_cpumcf_end();
+	preempt_enable();
+}
+
 #endif /* _ASM_S390_CPU_MCF_H */

commit 26b8317f51a20c1e4f61fbd2cc68975faad10b02
Author: Hendrik Brueckner <brueckner@linux.ibm.com>
Date:   Wed Aug 8 10:30:37 2018 +0200

    s390/cpum_cf: introduce kernel_cpumcf_alert() to obtain measurement alerts
    
    During a __kernel_cpumcf_begin()/end() session, save measurement alerts
    for the counter facility in the per-CPU cpu_cf_events variable.
    Users can obtain and, optionally, clear the alerts by calling
    kernel_cpumcf_alert() to specifically handle alerts.
    
    Signed-off-by: Hendrik Brueckner <brueckner@linux.ibm.com>
    Signed-off-by: Martin Schwidefsky <schwidefsky@de.ibm.com>

diff --git a/arch/s390/include/asm/cpu_mcf.h b/arch/s390/include/asm/cpu_mcf.h
index 82e0b80f2c81..2cd4f09ee268 100644
--- a/arch/s390/include/asm/cpu_mcf.h
+++ b/arch/s390/include/asm/cpu_mcf.h
@@ -52,6 +52,7 @@ static inline void ctr_set_stop(u64 *state, int ctr_set)
 struct cpu_cf_events {
 	struct cpumf_ctr_info	info;
 	atomic_t		ctr_set[CPUMF_CTR_SET_MAX];
+	atomic64_t		alert;
 	u64			state, tx_state;
 	unsigned int		flags;
 	unsigned int		txn_flags;
@@ -59,6 +60,7 @@ struct cpu_cf_events {
 DECLARE_PER_CPU(struct cpu_cf_events, cpu_cf_events);
 
 int __kernel_cpumcf_begin(void);
+unsigned long kernel_cpumcf_alert(int clear);
 void __kernel_cpumcf_end(void);
 
 #endif /* _ASM_S390_CPU_MCF_H */

commit f944bcdf5b8431c68be8bdd13259d27412e45c14
Author: Hendrik Brueckner <brueckner@linux.ibm.com>
Date:   Wed Aug 8 10:12:22 2018 +0200

    s390/cpu_mf: move struct cpu_cf_events and per-CPU variable to header file
    
    Make the struct cpu_cf_events and the respective per-CPU variable available
    to in-kernel users.  Access to this per-CPU variable shall be done between
    the calls to __kernel_cpumcf_begin() and __kernel_cpumcf_end().
    
    Signed-off-by: Hendrik Brueckner <brueckner@linux.ibm.com>
    Signed-off-by: Martin Schwidefsky <schwidefsky@de.ibm.com>

diff --git a/arch/s390/include/asm/cpu_mcf.h b/arch/s390/include/asm/cpu_mcf.h
index 63fa74115cba..82e0b80f2c81 100644
--- a/arch/s390/include/asm/cpu_mcf.h
+++ b/arch/s390/include/asm/cpu_mcf.h
@@ -49,6 +49,15 @@ static inline void ctr_set_stop(u64 *state, int ctr_set)
 	*state &= ~(cpumf_ctr_ctl[ctr_set] << CPUMF_LCCTL_ACTCTL_SHIFT);
 }
 
+struct cpu_cf_events {
+	struct cpumf_ctr_info	info;
+	atomic_t		ctr_set[CPUMF_CTR_SET_MAX];
+	u64			state, tx_state;
+	unsigned int		flags;
+	unsigned int		txn_flags;
+};
+DECLARE_PER_CPU(struct cpu_cf_events, cpu_cf_events);
+
 int __kernel_cpumcf_begin(void);
 void __kernel_cpumcf_end(void);
 

commit 3d33345aa3d9ab2ee9b5a5bf2a8842c43603d537
Author: Hendrik Brueckner <brueckner@linux.ibm.com>
Date:   Mon Aug 6 17:43:07 2018 +0200

    s390/cpum_cf: prepare for in-kernel counter measurements
    
    Prepare the counter facility support to be used by other in-kernel
    users.  The first step introduces the __kernel_cpumcf_begin() and
    __kernel_cpumcf_end() functions to reserve the counter facility
    for doing measurements and to release after the measurements are
    done.
    
    Signed-off-by: Hendrik Brueckner <brueckner@linux.ibm.com>
    Signed-off-by: Martin Schwidefsky <schwidefsky@de.ibm.com>

diff --git a/arch/s390/include/asm/cpu_mcf.h b/arch/s390/include/asm/cpu_mcf.h
index b6e73fbf87d0..63fa74115cba 100644
--- a/arch/s390/include/asm/cpu_mcf.h
+++ b/arch/s390/include/asm/cpu_mcf.h
@@ -49,4 +49,7 @@ static inline void ctr_set_stop(u64 *state, int ctr_set)
 	*state &= ~(cpumf_ctr_ctl[ctr_set] << CPUMF_LCCTL_ACTCTL_SHIFT);
 }
 
+int __kernel_cpumcf_begin(void);
+void __kernel_cpumcf_end(void);
+
 #endif /* _ASM_S390_CPU_MCF_H */

commit 30e145f811428e1a96738fbc1f98ccc91f412d93
Author: Hendrik Brueckner <brueckner@linux.ibm.com>
Date:   Mon Aug 6 15:56:43 2018 +0200

    s390/cpum_cf: move counter set controls to a new header file
    
    Move counter set specific controls and functions to the asm/cpu_mcf.h
    header file containg all counter facility support definitions.  Also
    adapt few variable names and header file includes.  No functional changes.
    
    Signed-off-by: Hendrik Brueckner <brueckner@linux.ibm.com>
    Signed-off-by: Martin Schwidefsky <schwidefsky@de.ibm.com>

diff --git a/arch/s390/include/asm/cpu_mcf.h b/arch/s390/include/asm/cpu_mcf.h
new file mode 100644
index 000000000000..b6e73fbf87d0
--- /dev/null
+++ b/arch/s390/include/asm/cpu_mcf.h
@@ -0,0 +1,52 @@
+/* SPDX-License-Identifier: GPL-2.0 */
+/*
+ * Counter facility support definitions for the Linux perf
+ *
+ * Copyright IBM Corp. 2019
+ * Author(s): Hendrik Brueckner <brueckner@linux.ibm.com>
+ */
+#ifndef _ASM_S390_CPU_MCF_H
+#define _ASM_S390_CPU_MCF_H
+
+#include <linux/perf_event.h>
+#include <asm/cpu_mf.h>
+
+enum cpumf_ctr_set {
+	CPUMF_CTR_SET_BASIC   = 0,    /* Basic Counter Set */
+	CPUMF_CTR_SET_USER    = 1,    /* Problem-State Counter Set */
+	CPUMF_CTR_SET_CRYPTO  = 2,    /* Crypto-Activity Counter Set */
+	CPUMF_CTR_SET_EXT     = 3,    /* Extended Counter Set */
+	CPUMF_CTR_SET_MT_DIAG = 4,    /* MT-diagnostic Counter Set */
+
+	/* Maximum number of counter sets */
+	CPUMF_CTR_SET_MAX,
+};
+
+#define CPUMF_LCCTL_ENABLE_SHIFT    16
+#define CPUMF_LCCTL_ACTCTL_SHIFT     0
+static const u64 cpumf_ctr_ctl[CPUMF_CTR_SET_MAX] = {
+	[CPUMF_CTR_SET_BASIC]	= 0x02,
+	[CPUMF_CTR_SET_USER]	= 0x04,
+	[CPUMF_CTR_SET_CRYPTO]	= 0x08,
+	[CPUMF_CTR_SET_EXT]	= 0x01,
+	[CPUMF_CTR_SET_MT_DIAG] = 0x20,
+};
+
+static inline void ctr_set_enable(u64 *state, int ctr_set)
+{
+	*state |= cpumf_ctr_ctl[ctr_set] << CPUMF_LCCTL_ENABLE_SHIFT;
+}
+static inline void ctr_set_disable(u64 *state, int ctr_set)
+{
+	*state &= ~(cpumf_ctr_ctl[ctr_set] << CPUMF_LCCTL_ENABLE_SHIFT);
+}
+static inline void ctr_set_start(u64 *state, int ctr_set)
+{
+	*state |= cpumf_ctr_ctl[ctr_set] << CPUMF_LCCTL_ACTCTL_SHIFT;
+}
+static inline void ctr_set_stop(u64 *state, int ctr_set)
+{
+	*state &= ~(cpumf_ctr_ctl[ctr_set] << CPUMF_LCCTL_ACTCTL_SHIFT);
+}
+
+#endif /* _ASM_S390_CPU_MCF_H */
