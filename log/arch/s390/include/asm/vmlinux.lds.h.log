commit bf9921a9c15bad089c08b94c300a6cafa035a612
Author: Gerald Schaefer <gerald.schaefer@de.ibm.com>
Date:   Mon Apr 1 19:10:45 2019 +0200

    s390: introduce .boot.preserved.data section
    
    Introduce .boot.preserve.data section which is similar to .boot.data and
    "shared" between the decompressor code and the decompressed kernel. The
    decompressor will store values in it, and copy over to the decompressed
    image before starting it. This method allows to avoid using pre-defined
    addresses and other hacks to pass values between those boot phases.
    
    Unlike .boot.data section .boot.preserved.data is NOT a part of init data,
    and hence will be preserved for the kernel life time.
    
    Signed-off-by: Gerald Schaefer <gerald.schaefer@de.ibm.com>
    Signed-off-by: Vasily Gorbik <gor@linux.ibm.com>
    Signed-off-by: Martin Schwidefsky <schwidefsky@de.ibm.com>

diff --git a/arch/s390/include/asm/vmlinux.lds.h b/arch/s390/include/asm/vmlinux.lds.h
index 2d127f900352..cbe670a6861b 100644
--- a/arch/s390/include/asm/vmlinux.lds.h
+++ b/arch/s390/include/asm/vmlinux.lds.h
@@ -18,3 +18,16 @@
 		*(SORT_BY_ALIGNMENT(SORT_BY_NAME(.boot.data*)))		\
 		__boot_data_end = .;					\
 	}
+
+/*
+ * .boot.preserved.data is similar to .boot.data, but it is not part of the
+ * .init section and thus will be preserved for later use in the decompressed
+ * kernel.
+ */
+#define BOOT_DATA_PRESERVED						\
+	. = ALIGN(PAGE_SIZE);						\
+	.boot.preserved.data : {					\
+		__boot_data_preserved_start = .;			\
+		*(SORT_BY_ALIGNMENT(SORT_BY_NAME(.boot.preserved.data*))) \
+		__boot_data_preserved_end = .;				\
+	}

commit d1b52a4388ffdcff47fb53de7fffe052fe766a9f
Author: Vasily Gorbik <gor@linux.ibm.com>
Date:   Tue Apr 10 14:14:02 2018 +0200

    s390: introduce .boot.data section
    
    Introduce .boot.data section which is "shared" between the decompressor
    code and the decompressed kernel. The decompressor will store values in
    it, and copy over to the decompressed image before starting it. This
    method allows to avoid using pre-defined addresses and other hacks to
    pass values between those boot phases.
    
    .boot.data section is a part of init data, and will be freed after kernel
    initialization is complete.
    
    For uncompressed kernel image, .boot.data section is basically the same
    as .init.data
    
    Reviewed-by: Martin Schwidefsky <schwidefsky@de.ibm.com>
    Signed-off-by: Vasily Gorbik <gor@linux.ibm.com>
    Signed-off-by: Martin Schwidefsky <schwidefsky@de.ibm.com>

diff --git a/arch/s390/include/asm/vmlinux.lds.h b/arch/s390/include/asm/vmlinux.lds.h
new file mode 100644
index 000000000000..2d127f900352
--- /dev/null
+++ b/arch/s390/include/asm/vmlinux.lds.h
@@ -0,0 +1,20 @@
+/* SPDX-License-Identifier: GPL-2.0 */
+#include <asm/page.h>
+
+/*
+ * .boot.data section is shared between the decompressor code and the
+ * decompressed kernel. The decompressor will store values in it, and copy
+ * over to the decompressed image before starting it.
+ *
+ * .boot.data variables are kept in separate .boot.data.<var name> sections,
+ * which are sorted by alignment first, then by name before being merged
+ * into single .boot.data section. This way big holes cased by page aligned
+ * structs are avoided and linker produces consistent result.
+ */
+#define BOOT_DATA							\
+	. = ALIGN(PAGE_SIZE);						\
+	.boot.data : {							\
+		__boot_data_start = .;					\
+		*(SORT_BY_ALIGNMENT(SORT_BY_NAME(.boot.data*)))		\
+		__boot_data_end = .;					\
+	}
