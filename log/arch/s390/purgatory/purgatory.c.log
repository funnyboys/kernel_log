commit 34d6245fbc81e764806a65fceaeb3ab3274a1e63
Author: Hans de Goede <hdegoede@redhat.com>
Date:   Sun Sep 1 22:35:31 2019 +0200

    crypto: sha256 - Merge crypto/sha256.h into crypto/sha.h
    
    The generic sha256 implementation from lib/crypto/sha256.c uses data
    structs defined in crypto/sha.h, so lets move the function prototypes
    there too.
    
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>

diff --git a/arch/s390/purgatory/purgatory.c b/arch/s390/purgatory/purgatory.c
index a80c78da9985..0a423bcf6746 100644
--- a/arch/s390/purgatory/purgatory.c
+++ b/arch/s390/purgatory/purgatory.c
@@ -9,7 +9,7 @@
 
 #include <linux/kexec.h>
 #include <linux/string.h>
-#include <crypto/sha256.h>
+#include <crypto/sha.h>
 #include <asm/purgatory.h>
 
 int verify_sha256_digest(void)

commit ad767ee858b38af634c957a792cb001d54a7b981
Author: Hans de Goede <hdegoede@redhat.com>
Date:   Sat Aug 17 16:24:31 2019 +0200

    crypto: sha256 - Move lib/sha256.c to lib/crypto
    
    Generic crypto implementations belong under lib/crypto not directly in
    lib, likewise the header should be in include/crypto, not include/linux.
    
    Note that the code in lib/crypto/sha256.c is not yet available for
    generic use after this commit, it is still only used by the s390 and x86
    purgatory code. Making it suitable for generic use is done in further
    patches in this series.
    
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>

diff --git a/arch/s390/purgatory/purgatory.c b/arch/s390/purgatory/purgatory.c
index 3528e6da4e87..a80c78da9985 100644
--- a/arch/s390/purgatory/purgatory.c
+++ b/arch/s390/purgatory/purgatory.c
@@ -8,8 +8,8 @@
  */
 
 #include <linux/kexec.h>
-#include <linux/sha256.h>
 #include <linux/string.h>
+#include <crypto/sha256.h>
 #include <asm/purgatory.h>
 
 int verify_sha256_digest(void)

commit 287d6070acbb2529e24462faffca46663885dddc
Author: Philipp Rudo <prudo@linux.ibm.com>
Date:   Wed Jun 27 12:03:43 2018 +0200

    s390/purgatory: Remove duplicate variable definitions
    
    Currently there are some variables in the purgatory (e.g. kernel_entry)
    which are defined twice, once in assembler- and once in c-code. The reason
    for this is that these variables are set during purgatory load, where
    sanity checks on the corresponding Elf_Sym's are made, while they are used
    in assembler-code. Thus adding a second definition in c-code is a handy
    workaround to guarantee correct Elf_Sym's are created.
    
    When the purgatory is compiled with -fcommon (default for gcc on s390) this
    is no problem because both symbols are merged by the linker. However this
    is not required by ISO C and when the purgatory is built with -fno-common
    the linker fails with errors like
    
    arch/s390/purgatory/purgatory.o:(.bss+0x18): multiple definition of `kernel_entry'
    arch/s390/purgatory/head.o:/.../arch/s390/purgatory/head.S:230: first defined here
    
    Thus remove the duplicate definitions and add the required size and type
    information to the assembler definition. Also add -fno-common to the
    command line options to prevent similar hacks in the future.
    
    Signed-off-by: Philipp Rudo <prudo@linux.ibm.com>
    Acked-by: Heiko Carstens <heiko.carstens@de.ibm.com>
    Signed-off-by: Martin Schwidefsky <schwidefsky@de.ibm.com>

diff --git a/arch/s390/purgatory/purgatory.c b/arch/s390/purgatory/purgatory.c
index 4e2beb3c29b7..3528e6da4e87 100644
--- a/arch/s390/purgatory/purgatory.c
+++ b/arch/s390/purgatory/purgatory.c
@@ -12,15 +12,6 @@
 #include <linux/string.h>
 #include <asm/purgatory.h>
 
-struct kexec_sha_region purgatory_sha_regions[KEXEC_SEGMENT_MAX];
-u8 purgatory_sha256_digest[SHA256_DIGEST_SIZE];
-
-u64 kernel_entry;
-u64 kernel_type;
-
-u64 crash_start;
-u64 crash_size;
-
 int verify_sha256_digest(void)
 {
 	struct kexec_sha_region *ptr, *end;

commit ee337f5469fd67f22d231e520ec4189ce0589d92
Author: Philipp Rudo <prudo@linux.vnet.ibm.com>
Date:   Tue Sep 5 11:55:23 2017 +0200

    s390/kexec_file: Add crash support to image loader
    
    Add support to load a crash kernel to the image loader. This requires
    extending the purgatory.
    
    Signed-off-by: Philipp Rudo <prudo@linux.vnet.ibm.com>
    Reviewed-by: Martin Schwidefsky <schwidefsky@de.ibm.com>
    Signed-off-by: Martin Schwidefsky <schwidefsky@de.ibm.com>

diff --git a/arch/s390/purgatory/purgatory.c b/arch/s390/purgatory/purgatory.c
index 52b92f2bf0b9..4e2beb3c29b7 100644
--- a/arch/s390/purgatory/purgatory.c
+++ b/arch/s390/purgatory/purgatory.c
@@ -16,6 +16,10 @@ struct kexec_sha_region purgatory_sha_regions[KEXEC_SEGMENT_MAX];
 u8 purgatory_sha256_digest[SHA256_DIGEST_SIZE];
 
 u64 kernel_entry;
+u64 kernel_type;
+
+u64 crash_start;
+u64 crash_size;
 
 int verify_sha256_digest(void)
 {

commit 840798a1f52994c172270893bd2ec6013cc92e40
Author: Philipp Rudo <prudo@linux.vnet.ibm.com>
Date:   Mon Aug 28 15:32:36 2017 +0200

    s390/kexec_file: Add purgatory
    
    The common code expects the architecture to have a purgatory that runs
    between the two kernels. Add it now. For simplicity first skip crash
    support.
    
    Signed-off-by: Philipp Rudo <prudo@linux.vnet.ibm.com>
    Signed-off-by: Martin Schwidefsky <schwidefsky@de.ibm.com>

diff --git a/arch/s390/purgatory/purgatory.c b/arch/s390/purgatory/purgatory.c
new file mode 100644
index 000000000000..52b92f2bf0b9
--- /dev/null
+++ b/arch/s390/purgatory/purgatory.c
@@ -0,0 +1,38 @@
+// SPDX-License-Identifier: GPL-2.0
+/*
+ * Purgatory code running between two kernels.
+ *
+ * Copyright IBM Corp. 2018
+ *
+ * Author(s): Philipp Rudo <prudo@linux.vnet.ibm.com>
+ */
+
+#include <linux/kexec.h>
+#include <linux/sha256.h>
+#include <linux/string.h>
+#include <asm/purgatory.h>
+
+struct kexec_sha_region purgatory_sha_regions[KEXEC_SEGMENT_MAX];
+u8 purgatory_sha256_digest[SHA256_DIGEST_SIZE];
+
+u64 kernel_entry;
+
+int verify_sha256_digest(void)
+{
+	struct kexec_sha_region *ptr, *end;
+	u8 digest[SHA256_DIGEST_SIZE];
+	struct sha256_state sctx;
+
+	sha256_init(&sctx);
+	end = purgatory_sha_regions + ARRAY_SIZE(purgatory_sha_regions);
+
+	for (ptr = purgatory_sha_regions; ptr < end; ptr++)
+		sha256_update(&sctx, (uint8_t *)(ptr->start), ptr->len);
+
+	sha256_final(&sctx, digest);
+
+	if (memcmp(digest, purgatory_sha256_digest, sizeof(digest)))
+		return 1;
+
+	return 0;
+}
