commit b886d83c5b621abc84ff9616f14c529be3f6b147
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Sat Jun 1 10:08:55 2019 +0200

    treewide: Replace GPLv2 boilerplate/reference with SPDX - rule 441
    
    Based on 1 normalized pattern(s):
    
      this program is free software you can redistribute it and or modify
      it under the terms of the gnu general public license as published by
      the free software foundation version 2 of the license
    
    extracted by the scancode license scanner the SPDX license identifier
    
      GPL-2.0-only
    
    has been chosen to replace the boilerplate/reference in 315 file(s).
    
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Reviewed-by: Allison Randal <allison@lohutok.net>
    Reviewed-by: Armijn Hemel <armijn@tjaldur.nl>
    Cc: linux-spdx@vger.kernel.org
    Link: https://lkml.kernel.org/r/20190531190115.503150771@linutronix.de
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/arch/powerpc/include/asm/msi_bitmap.h b/arch/powerpc/include/asm/msi_bitmap.h
index 1ec7125551f1..55c2f7db9cbd 100644
--- a/arch/powerpc/include/asm/msi_bitmap.h
+++ b/arch/powerpc/include/asm/msi_bitmap.h
@@ -1,14 +1,9 @@
+/* SPDX-License-Identifier: GPL-2.0-only */
 #ifndef _POWERPC_SYSDEV_MSI_BITMAP_H
 #define _POWERPC_SYSDEV_MSI_BITMAP_H
 
 /*
  * Copyright 2008, Michael Ellerman, IBM Corporation.
- *
- * This program is free software; you can redistribute it and/or
- * modify it under the terms of the GNU General Public License
- * as published by the Free Software Foundation; version 2 of the
- * License.
- *
  */
 
 #include <linux/of.h>

commit cb2d3883c6033831e2a93b396fcc43033108409c
Author: Denis Kirjanov <kda@linux-powerpc.org>
Date:   Wed Sep 16 22:26:14 2015 +0300

    powerpc/msi: Free the bitmap if it was slab allocated
    
    During the MSI bitmap test on boot kmemleak spews the following trace:
    
    unreferenced object 0xc00000016e86c900 (size 64):
        comm "swapper/0", pid 1, jiffies 4294893173 (age 518.024s)
        hex dump (first 32 bytes):
            00 00 01 ff 7f ff 7f 37 00 00 00 00 00 00 00 00
            .......7........
            ff ff ff ff ff ff ff ff 01 ff ff ff ff
            ff ff ff
            ................
            backtrace:
            [<c00000000003eebc>] .zalloc_maybe_bootmem+0x3c/0x380
            [<c000000000042d6c>] .msi_bitmap_alloc+0x3c/0xb0
            [<c000000000a9aff8>] .msi_bitmap_selftest+0x30/0x2b4
            [<c0000000000090f4>] .do_one_initcall+0xd4/0x270
            [<c000000000a8e250>] .kernel_init_freeable+0x1a0/0x280
            [<c000000000009b5c>] .kernel_init+0x1c/0x120
            [<c000000000007fbc>] .ret_from_kernel_thread+0x58/0x9c
    
    Add a flag to msi_bitmap for tracking allocations from slab and memblock
    so we can properly free/handle memory in msi_bitmap_free().
    
    Signed-off-by: Denis Kirjanov <kda@linux-powerpc.org>
    Reviewed-by: Catalin Marinas <catalin.marinas@arm.com>
    [mpe: Reword changelog & use bitmap_from_slab in the if]
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>

diff --git a/arch/powerpc/include/asm/msi_bitmap.h b/arch/powerpc/include/asm/msi_bitmap.h
index 97ac3f46ae0d..1ec7125551f1 100644
--- a/arch/powerpc/include/asm/msi_bitmap.h
+++ b/arch/powerpc/include/asm/msi_bitmap.h
@@ -19,6 +19,7 @@ struct msi_bitmap {
 	unsigned long		*bitmap;
 	spinlock_t		lock;
 	unsigned int		irq_count;
+	bool		 	bitmap_from_slab;
 };
 
 int msi_bitmap_alloc_hwirqs(struct msi_bitmap *bmp, int num);

commit 7e302869e0c5261aba779e059cddcd2fbf7aedbe
Author: Michael Ellerman <michael@ellerman.id.au>
Date:   Wed Aug 6 09:10:01 2008 +1000

    powerpc: Split-out common MSI bitmap logic into msi_bitmap.c
    
    There are now two almost identical implementations of an MSI bitmap
    allocator, one in mpic_msi.c and the other in fsl_msi.c.
    
    Merge them together and put the result in msi_bitmap.c.  Some of the
    MPIC bits will remain to provide a nicer interface for the MPIC users.
    
    In the process we fix two buglets.  The first is that the allocation
    routines, now msi_bitmap_alloc_hwirqs(), returned an unsigned result,
    even though they use -1 to indicate allocation failure.  Although all
    the callers were checking correctly, it is much better for the routine
    to just return an int.  At least until someone wants > ~2 billion MSIs.
    
    The second buglet is that the device tree reservation logic only
    allowed power-of-two reservations.  AFAICT that didn't effect any
    existing code but it's nicer if we can reserve arbitrary irqs from MSI
    use.
    
    We also add some selftests, which exposed the two buglets and now test
    for them, as well as some basic sanity tests.  The tests are only built
    when CONFIG_DEBUG_KERNEL=y.
    
    Signed-off-by: Michael Ellerman <michael@ellerman.id.au>
    Signed-off-by: Paul Mackerras <paulus@samba.org>

diff --git a/arch/powerpc/include/asm/msi_bitmap.h b/arch/powerpc/include/asm/msi_bitmap.h
new file mode 100644
index 000000000000..97ac3f46ae0d
--- /dev/null
+++ b/arch/powerpc/include/asm/msi_bitmap.h
@@ -0,0 +1,35 @@
+#ifndef _POWERPC_SYSDEV_MSI_BITMAP_H
+#define _POWERPC_SYSDEV_MSI_BITMAP_H
+
+/*
+ * Copyright 2008, Michael Ellerman, IBM Corporation.
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License
+ * as published by the Free Software Foundation; version 2 of the
+ * License.
+ *
+ */
+
+#include <linux/of.h>
+#include <asm/irq.h>
+
+struct msi_bitmap {
+	struct device_node	*of_node;
+	unsigned long		*bitmap;
+	spinlock_t		lock;
+	unsigned int		irq_count;
+};
+
+int msi_bitmap_alloc_hwirqs(struct msi_bitmap *bmp, int num);
+void msi_bitmap_free_hwirqs(struct msi_bitmap *bmp, unsigned int offset,
+			    unsigned int num);
+void msi_bitmap_reserve_hwirq(struct msi_bitmap *bmp, unsigned int hwirq);
+
+int msi_bitmap_reserve_dt_hwirqs(struct msi_bitmap *bmp);
+
+int msi_bitmap_alloc(struct msi_bitmap *bmp, unsigned int irq_count,
+		     struct device_node *of_node);
+void msi_bitmap_free(struct msi_bitmap *bmp);
+
+#endif /* _POWERPC_SYSDEV_MSI_BITMAP_H */
