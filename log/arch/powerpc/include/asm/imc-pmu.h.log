commit f4344b19fa2d081a24d802dbab99223751e19bcd
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Thu May 23 11:14:49 2019 +0200

    treewide: Replace GPLv2 boilerplate/reference with SPDX - rule 112
    
    Based on 1 normalized pattern(s):
    
      this program is free software you can redistribute it and or modify
      it under the terms of the gnu general public license as published by
      the free software foundation either version 2 of the license or
      later version
    
    extracted by the scancode license scanner the SPDX license identifier
    
      GPL-2.0-or-later
    
    has been chosen to replace the boilerplate/reference in 4 file(s).
    
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Reviewed-by: Allison Randal <allison@lohutok.net>
    Reviewed-by: Richard Fontana <rfontana@redhat.com>
    Reviewed-by: Kate Stewart <kstewart@linuxfoundation.org>
    Cc: linux-spdx@vger.kernel.org
    Link: https://lkml.kernel.org/r/20190523091650.480557885@linutronix.de
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/arch/powerpc/include/asm/imc-pmu.h b/arch/powerpc/include/asm/imc-pmu.h
index 7c2ef0e42661..4da4fcba0684 100644
--- a/arch/powerpc/include/asm/imc-pmu.h
+++ b/arch/powerpc/include/asm/imc-pmu.h
@@ -1,3 +1,4 @@
+/* SPDX-License-Identifier: GPL-2.0-or-later */
 #ifndef __ASM_POWERPC_IMC_PMU_H
 #define __ASM_POWERPC_IMC_PMU_H
 
@@ -7,11 +8,6 @@
  * Copyright (C) 2017 Madhavan Srinivasan, IBM Corporation.
  *           (C) 2017 Anju T Sudhakar, IBM Corporation.
  *           (C) 2017 Hemant K Shaw, IBM Corporation.
- *
- * This program is free software; you can redistribute it and/or
- * modify it under the terms of the GNU General Public License
- * as published by the Free Software Foundation; either version
- * 2 of the License, or later version.
  */
 
 #include <linux/perf_event.h>

commit d1720adff3783a2ba7c128e304a385d18962835b
Author: Anju T Sudhakar <anju@linux.vnet.ibm.com>
Date:   Tue Apr 16 15:18:27 2019 +0530

    powerpc/include: Add data structures and macros for IMC trace mode
    
    Add the macros needed for IMC (In-Memory Collection Counters) trace-mode
    and data structure to hold the trace-imc record data.
    Also, add the new type "OPAL_IMC_COUNTERS_TRACE" in 'opal-api.h', since
    there is a new switch case added in the opal-calls for IMC.
    
    Signed-off-by: Anju T Sudhakar <anju@linux.vnet.ibm.com>
    Reviewed-by: Madhavan Srinivasan <maddy@linux.vnet.ibm.com>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>

diff --git a/arch/powerpc/include/asm/imc-pmu.h b/arch/powerpc/include/asm/imc-pmu.h
index 69f516ecb2fd..7c2ef0e42661 100644
--- a/arch/powerpc/include/asm/imc-pmu.h
+++ b/arch/powerpc/include/asm/imc-pmu.h
@@ -33,6 +33,7 @@
  */
 #define THREAD_IMC_LDBAR_MASK           0x0003ffffffffe000ULL
 #define THREAD_IMC_ENABLE               0x8000000000000000ULL
+#define TRACE_IMC_ENABLE		0x4000000000000000ULL
 
 /*
  * For debugfs interface for imc-mode and imc-command
@@ -59,6 +60,34 @@ struct imc_events {
 	char *scale;
 };
 
+/*
+ * Trace IMC hardware updates a 64bytes record on
+ * Core Performance Monitoring Counter (CPMC)
+ * overflow. Here is the layout for the trace imc record
+ *
+ * DW 0 : Timebase
+ * DW 1 : Program Counter
+ * DW 2 : PIDR information
+ * DW 3 : CPMC1
+ * DW 4 : CPMC2
+ * DW 5 : CPMC3
+ * Dw 6 : CPMC4
+ * DW 7 : Timebase
+ * .....
+ *
+ * The following is the data structure to hold trace imc data.
+ */
+struct trace_imc_data {
+	u64 tb1;
+	u64 ip;
+	u64 val;
+	u64 cpmc1;
+	u64 cpmc2;
+	u64 cpmc3;
+	u64 cpmc4;
+	u64 tb2;
+};
+
 /* Event attribute array index */
 #define IMC_FORMAT_ATTR		0
 #define IMC_EVENT_ATTR		1
@@ -68,6 +97,13 @@ struct imc_events {
 /* PMU Format attribute macros */
 #define IMC_EVENT_OFFSET_MASK	0xffffffffULL
 
+/*
+ * Macro to mask bits 0:21 of first double word(which is the timebase) to
+ * compare with 8th double word (timebase) of trace imc record data.
+ */
+#define IMC_TRACE_RECORD_TB1_MASK      0x3ffffffffffULL
+
+
 /*
  * Device tree parser code detects IMC pmu support and
  * registers new IMC pmus. This structure will hold the
@@ -113,6 +149,7 @@ struct imc_pmu_ref {
 
 enum {
 	IMC_TYPE_THREAD		= 0x1,
+	IMC_TYPE_TRACE		= 0x2,
 	IMC_TYPE_CORE		= 0x4,
 	IMC_TYPE_CHIP           = 0x10,
 };
@@ -123,6 +160,8 @@ enum {
 #define IMC_DOMAIN_NEST		1
 #define IMC_DOMAIN_CORE		2
 #define IMC_DOMAIN_THREAD	3
+/* For trace-imc the domain is still thread but it operates in trace-mode */
+#define IMC_DOMAIN_TRACE	4
 
 extern int init_imc_pmu(struct device_node *parent,
 				struct imc_pmu *pmu_ptr, int pmu_id);

commit 25af86b2aeb60dd52bd18a875124490e23bd4515
Author: Anju T Sudhakar <anju@linux.vnet.ibm.com>
Date:   Tue May 22 14:42:37 2018 +0530

    powerpc/perf: Unregister thread-imc if core-imc not supported
    
    Since thread-imc internally use the core-imc hardware infrastructure
    and is depended on it, having thread-imc in the kernel in the
    absence of core-imc is trivial. Patch disables thread-imc, if
    core-imc is not registered.
    
    Signed-off-by: Anju T Sudhakar <anju@linux.vnet.ibm.com>
    Reviewed-by: Madhavan Srinivasan <maddy@linux.vnet.ibm.com>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>

diff --git a/arch/powerpc/include/asm/imc-pmu.h b/arch/powerpc/include/asm/imc-pmu.h
index d76cb11be3e3..69f516ecb2fd 100644
--- a/arch/powerpc/include/asm/imc-pmu.h
+++ b/arch/powerpc/include/asm/imc-pmu.h
@@ -128,4 +128,5 @@ extern int init_imc_pmu(struct device_node *parent,
 				struct imc_pmu *pmu_ptr, int pmu_id);
 extern void thread_imc_disable(void);
 extern int get_max_nest_dev(void);
+extern void unregister_thread_imc(void);
 #endif /* __ASM_POWERPC_IMC_PMU_H */

commit 684d984038aa2b8ec3ab4b9d314257879a3fbfbd
Author: Anju T Sudhakar <anju@linux.vnet.ibm.com>
Date:   Wed Dec 13 11:39:54 2017 +0530

    powerpc/powernv: Add debugfs interface for imc-mode and imc-command
    
    In memory Collection (IMC) counter pmu driver controls the ucode's
    execution state. At the system boot, IMC perf driver pause the ucode.
    Ucode state is changed to "running" only when any of the nest units
    are monitored or profiled using perf tool.
    
    Nest units support only limited set of hardware counters and ucode is
    always programmed in the "production mode" ("accumulation") mode. This
    mode is configured to provide key performance metric data for most of
    the nest units.
    
    But ucode also supports other modes which would be used for "debug" to
    drill down specific nest units. That is, ucode when switched to
    "powerbus" debug mode (for example), will dynamically reconfigure the
    nest counters to target only "powerbus" related events in the hardware
    counters. This allows the IMC nest unit to focus on powerbus related
    transactions in the system in more detail. At this point, production
    mode events may or may not be counted.
    
    IMC nest counters has both in-band (ucode access) and out of band
    access to it. Since not all nest counter configurations are supported
    by ucode, out of band tools are used to characterize other nest
    counter configurations.
    
    Patch provides an interface via "debugfs" to enable the switching of
    ucode modes in the system. To switch ucode mode, one has to first
    pause the microcode (imc_cmd), and then write the target mode value to
    the "imc_mode" file.
    
    Proposed Approach:
    
    In the proposed approach, the function (export_imc_mode_and_cmd) which
    creates the debugfs interface for imc mode and command is implemented
    in opal-imc.c. Thus we can use imc_get_mem_addr() to get the homer
    base address for each chip.
    
    The interface to expose imc mode and command is required only if we
    have nest pmu units registered. Employing the existing data structures
    to track whether we have any nest units registered will require to
    extend data from perf side to opal-imc.c. Instead an integer is
    introduced to hold that information by counting successful nest unit
    registration. Debugfs interface is removed based on the integer count.
    
    Example for the interface:
    
      $ ls /sys/kernel/debug/imc
      imc_cmd_0  imc_cmd_8  imc_mode_0  imc_mode_8
    
    Signed-off-by: Anju T Sudhakar <anju@linux.vnet.ibm.com>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>

diff --git a/arch/powerpc/include/asm/imc-pmu.h b/arch/powerpc/include/asm/imc-pmu.h
index 080731dc883a..d76cb11be3e3 100644
--- a/arch/powerpc/include/asm/imc-pmu.h
+++ b/arch/powerpc/include/asm/imc-pmu.h
@@ -34,6 +34,13 @@
 #define THREAD_IMC_LDBAR_MASK           0x0003ffffffffe000ULL
 #define THREAD_IMC_ENABLE               0x8000000000000000ULL
 
+/*
+ * For debugfs interface for imc-mode and imc-command
+ */
+#define IMC_CNTL_BLK_OFFSET		0x3FC00
+#define IMC_CNTL_BLK_CMD_OFFSET		8
+#define IMC_CNTL_BLK_MODE_OFFSET	32
+
 /*
  * Structure to hold memory address information for imc units.
  */

commit 8b4e6deaff7822c76c94336c40f8d1f244c6f6ed
Author: Anju T Sudhakar <anju@linux.vnet.ibm.com>
Date:   Mon Dec 11 11:28:37 2017 +0530

    powerpc/perf: Pass struct imc_events as a parameter to imc_parse_event()
    
    Remove the allocation of struct imc_events from imc_parse_event().
    Instead pass imc_events as a parameter to imc_parse_event(), which is
    a pointer to a slot in the array allocated in
    update_events_in_group().
    
    Reported-by: Dan Carpenter ("powerpc/perf: Fix a sizeof() typo so we allocate less memory")
    Suggested-by: Michael Ellerman <mpe@ellerman.id.au>
    Signed-off-by: Anju T Sudhakar <anju@linux.vnet.ibm.com>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>

diff --git a/arch/powerpc/include/asm/imc-pmu.h b/arch/powerpc/include/asm/imc-pmu.h
index fad0e6ff460f..080731dc883a 100644
--- a/arch/powerpc/include/asm/imc-pmu.h
+++ b/arch/powerpc/include/asm/imc-pmu.h
@@ -71,7 +71,7 @@ struct imc_events {
 struct imc_pmu {
 	struct pmu pmu;
 	struct imc_mem_info *mem_info;
-	struct imc_events **events;
+	struct imc_events *events;
 	/*
 	 * Attribute groups for the PMU. Slot 0 used for
 	 * format attribute, slot 1 used for cpusmask attribute,

commit 73ce9aec65b17433e18163d07eb5cb6bf114bd6c
Author: Madhavan Srinivasan <maddy@linux.vnet.ibm.com>
Date:   Wed Nov 22 10:45:39 2017 +0530

    powerpc/perf: Fix IMC_MAX_PMU macro
    
    IMC_MAX_PMU is used for static storage (per_nest_pmu_arr) which holds
    nest pmu information. Current value for the macro is 32 based on
    the initial number of nest pmu units supported by the nest microcode.
    But going forward, microcode could support more nest units. Instead
    of static storage, patch to fix the code to dynamically allocate an
    array based on the number of nest imc units found in the device tree.
    
    Fixes:8f95faaac56c1 ('powerpc/powernv: Detect and create IMC device')
    Signed-off-by: Madhavan Srinivasan <maddy@linux.vnet.ibm.com>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>

diff --git a/arch/powerpc/include/asm/imc-pmu.h b/arch/powerpc/include/asm/imc-pmu.h
index 7f74c282710f..fad0e6ff460f 100644
--- a/arch/powerpc/include/asm/imc-pmu.h
+++ b/arch/powerpc/include/asm/imc-pmu.h
@@ -20,11 +20,6 @@
 #include <linux/io.h>
 #include <asm/opal.h>
 
-/*
- * For static allocation of some of the structures.
- */
-#define IMC_MAX_PMUS			32
-
 /*
  * Compatibility macros for IMC devices
  */
@@ -125,4 +120,5 @@ enum {
 extern int init_imc_pmu(struct device_node *parent,
 				struct imc_pmu *pmu_ptr, int pmu_id);
 extern void thread_imc_disable(void);
+extern int get_max_nest_dev(void);
 #endif /* __ASM_POWERPC_IMC_PMU_H */

commit 8f95faaac56c18b32d0e23ace55417a440abdb7e
Author: Madhavan Srinivasan <maddy@linux.vnet.ibm.com>
Date:   Wed Jul 19 03:06:33 2017 +0530

    powerpc/powernv: Detect and create IMC device
    
    Code to create platform device for the In-Memory Collection (IMC)
    counters. Platform devices are created based on the IMC compatibility.
    New header file created to contain the data structures and macros
    needed for In-Memory Collection (IMC) counter pmu devices.
    
    The device tree for IMC counters starts at the node "imc-counters".
    This node contains all the IMC PMU nodes and event nodes for these IMC
    PMUs. Device probe() parses the device to locate three possible IMC
    device types (Nest/Core/Thread). Function then branch to parse each
    unit nodes to populate vital information such as device memory sizes,
    event nodes information, base address for reserve memory access (if
    any) and so on. Simple bare-minimum shutdown function added which only
    "stops" the engines.
    
    Signed-off-by: Anju T Sudhakar <anju@linux.vnet.ibm.com>
    Signed-off-by: Hemant Kumar <hemant@linux.vnet.ibm.com>
    Signed-off-by: Madhavan Srinivasan <maddy@linux.vnet.ibm.com>
    [mpe: Fix build with CONFIG_PERF_EVENTS=n]
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>

diff --git a/arch/powerpc/include/asm/imc-pmu.h b/arch/powerpc/include/asm/imc-pmu.h
new file mode 100644
index 000000000000..7f74c282710f
--- /dev/null
+++ b/arch/powerpc/include/asm/imc-pmu.h
@@ -0,0 +1,128 @@
+#ifndef __ASM_POWERPC_IMC_PMU_H
+#define __ASM_POWERPC_IMC_PMU_H
+
+/*
+ * IMC Nest Performance Monitor counter support.
+ *
+ * Copyright (C) 2017 Madhavan Srinivasan, IBM Corporation.
+ *           (C) 2017 Anju T Sudhakar, IBM Corporation.
+ *           (C) 2017 Hemant K Shaw, IBM Corporation.
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License
+ * as published by the Free Software Foundation; either version
+ * 2 of the License, or later version.
+ */
+
+#include <linux/perf_event.h>
+#include <linux/slab.h>
+#include <linux/of.h>
+#include <linux/io.h>
+#include <asm/opal.h>
+
+/*
+ * For static allocation of some of the structures.
+ */
+#define IMC_MAX_PMUS			32
+
+/*
+ * Compatibility macros for IMC devices
+ */
+#define IMC_DTB_COMPAT			"ibm,opal-in-memory-counters"
+#define IMC_DTB_UNIT_COMPAT		"ibm,imc-counters"
+
+
+/*
+ * LDBAR: Counter address and Enable/Disable macro.
+ * perf/imc-pmu.c has the LDBAR layout information.
+ */
+#define THREAD_IMC_LDBAR_MASK           0x0003ffffffffe000ULL
+#define THREAD_IMC_ENABLE               0x8000000000000000ULL
+
+/*
+ * Structure to hold memory address information for imc units.
+ */
+struct imc_mem_info {
+	u64 *vbase;
+	u32 id;
+};
+
+/*
+ * Place holder for nest pmu events and values.
+ */
+struct imc_events {
+	u32 value;
+	char *name;
+	char *unit;
+	char *scale;
+};
+
+/* Event attribute array index */
+#define IMC_FORMAT_ATTR		0
+#define IMC_EVENT_ATTR		1
+#define IMC_CPUMASK_ATTR	2
+#define IMC_NULL_ATTR		3
+
+/* PMU Format attribute macros */
+#define IMC_EVENT_OFFSET_MASK	0xffffffffULL
+
+/*
+ * Device tree parser code detects IMC pmu support and
+ * registers new IMC pmus. This structure will hold the
+ * pmu functions, events, counter memory information
+ * and attrs for each imc pmu and will be referenced at
+ * the time of pmu registration.
+ */
+struct imc_pmu {
+	struct pmu pmu;
+	struct imc_mem_info *mem_info;
+	struct imc_events **events;
+	/*
+	 * Attribute groups for the PMU. Slot 0 used for
+	 * format attribute, slot 1 used for cpusmask attribute,
+	 * slot 2 used for event attribute. Slot 3 keep as
+	 * NULL.
+	 */
+	const struct attribute_group *attr_groups[4];
+	u32 counter_mem_size;
+	int domain;
+	/*
+	 * flag to notify whether the memory is mmaped
+	 * or allocated by kernel.
+	 */
+	bool imc_counter_mmaped;
+};
+
+/*
+ * Structure to hold id, lock and reference count for the imc events which
+ * are inited.
+ */
+struct imc_pmu_ref {
+	struct mutex lock;
+	unsigned int id;
+	int refc;
+};
+
+/*
+ * In-Memory Collection Counters type.
+ * Data comes from Device tree.
+ * Three device type are supported.
+ */
+
+enum {
+	IMC_TYPE_THREAD		= 0x1,
+	IMC_TYPE_CORE		= 0x4,
+	IMC_TYPE_CHIP           = 0x10,
+};
+
+/*
+ * Domains for IMC PMUs
+ */
+#define IMC_DOMAIN_NEST		1
+#define IMC_DOMAIN_CORE		2
+#define IMC_DOMAIN_THREAD	3
+
+extern int init_imc_pmu(struct device_node *parent,
+				struct imc_pmu *pmu_ptr, int pmu_id);
+extern void thread_imc_disable(void);
+#endif /* __ASM_POWERPC_IMC_PMU_H */
