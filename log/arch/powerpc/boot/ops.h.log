commit 7ade8495dcfd788a76e6877c9ea86f5207369ea4
Author: Michal Simek <michal.simek@xilinx.com>
Date:   Thu May 21 16:55:52 2020 +0000

    powerpc: Remove Xilinx PPC405/PPC440 support
    
    The latest Xilinx design tools called ISE and EDK has been released in
    October 2013. New tool doesn't support any PPC405/PPC440 new designs.
    These platforms are no longer supported and tested.
    
    PowerPC 405/440 port is orphan from 2013 by
    commit cdeb89943bfc ("MAINTAINERS: Fix incorrect status tag") and
    commit 19624236cce1 ("MAINTAINERS: Update Grant's email address and maintainership")
    that's why it is time to remove the support fot these platforms.
    
    Signed-off-by: Michal Simek <michal.simek@xilinx.com>
    Signed-off-by: Christophe Leroy <christophe.leroy@csgroup.eu>
    Acked-by: Arnd Bergmann <arnd@arndb.de>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Link: https://lore.kernel.org/r/8c593895e2cb57d232d85ce4d8c3a1aa7f0869cc.1590079968.git.christophe.leroy@csgroup.eu

diff --git a/arch/powerpc/boot/ops.h b/arch/powerpc/boot/ops.h
index e0606766480f..6455fc9a244f 100644
--- a/arch/powerpc/boot/ops.h
+++ b/arch/powerpc/boot/ops.h
@@ -88,7 +88,6 @@ int serial_console_init(void);
 int ns16550_console_init(void *devp, struct serial_console_data *scdp);
 int cpm_console_init(void *devp, struct serial_console_data *scdp);
 int mpc5200_psc_console_init(void *devp, struct serial_console_data *scdp);
-int uartlite_console_init(void *devp, struct serial_console_data *scdp);
 int opal_console_init(void *devp, struct serial_console_data *scdp);
 void *simple_alloc_init(char *base, unsigned long heap_size,
 			unsigned long granularity, unsigned long max_allocs);

commit 528229d210781b2da66c6d257a326c21099982b5
Author: Benjamin Herrenschmidt <benh@kernel.crashing.org>
Date:   Mon Aug 19 23:13:13 2019 -0300

    powerpc: Add support for adding an ESM blob to the zImage wrapper
    
    For secure VMs, the signing tool will create a ticket called the "ESM blob"
    for the Enter Secure Mode ultravisor call with the signatures of the kernel
    and initrd among other things.
    
    This adds support to the wrapper script for adding that blob via the "-e"
    option to the zImage.pseries.
    
    It also adds code to the zImage wrapper itself to retrieve and if necessary
    relocate the blob, and pass its address to Linux via the device-tree, to be
    later consumed by prom_init.
    
    Signed-off-by: Benjamin Herrenschmidt <benh@kernel.crashing.org>
    [ bauerman: Minor adjustments to some comments. ]
    Signed-off-by: Thiago Jung Bauermann <bauerman@linux.ibm.com>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Link: https://lore.kernel.org/r/20190820021326.6884-4-bauerman@linux.ibm.com

diff --git a/arch/powerpc/boot/ops.h b/arch/powerpc/boot/ops.h
index cd043726ed88..e0606766480f 100644
--- a/arch/powerpc/boot/ops.h
+++ b/arch/powerpc/boot/ops.h
@@ -251,6 +251,8 @@ extern char _initrd_start[];
 extern char _initrd_end[];
 extern char _dtb_start[];
 extern char _dtb_end[];
+extern char _esm_blob_start[];
+extern char _esm_blob_end[];
 
 static inline __attribute__((const))
 int __ilog2_u32(u32 n)

commit 30f4bbe0472a9644d79a1624fde7f7ba4e44df68
Author: Mark Greer <mgreer@animalcreek.com>
Date:   Thu Apr 5 18:17:17 2018 -0700

    powerpc/boot: Remove support for Marvell MPSC serial controller
    
    There are no longer any platforms that use Marvell's MPSC serial
    controller so remove its driver.
    
    Signed-off-by: Mark Greer <mgreer@animalcreek.com>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>

diff --git a/arch/powerpc/boot/ops.h b/arch/powerpc/boot/ops.h
index fad1862f4b2d..cd043726ed88 100644
--- a/arch/powerpc/boot/ops.h
+++ b/arch/powerpc/boot/ops.h
@@ -86,7 +86,6 @@ void start(void);
 void fdt_init(void *blob);
 int serial_console_init(void);
 int ns16550_console_init(void *devp, struct serial_console_data *scdp);
-int mpsc_console_init(void *devp, struct serial_console_data *scdp);
 int cpm_console_init(void *devp, struct serial_console_data *scdp);
 int mpc5200_psc_console_init(void *devp, struct serial_console_data *scdp);
 int uartlite_console_init(void *devp, struct serial_console_data *scdp);

commit a1ff57416af9a7971a801d553cd53edd8afb28d6
Author: Oliver O'Halloran <oohall@gmail.com>
Date:   Wed Nov 23 13:55:13 2016 +1100

    powerpc/boot: Fix the early OPAL console wrappers
    
    When configured with CONFIG_PPC_EARLY_DEBUG_OPAL=y the kernel expects
    the OPAL entry and base addresses to be passed in r8 and r9
    respectively. Currently the wrapper does not attempt to restore these
    values before entering the decompressed kernel which causes the kernel
    to branch into whatever happens to be in r9 when doing a write to the
    OPAL console in early boot.
    
    This patch adds a platform_ops hook that can be used to branch into the
    new kernel. The OPAL console driver patches this at runtime so that if
    the console is used it will be restored just prior to entering the
    kernel.
    
    Fixes: 656ad58ef19e ("powerpc/boot: Add OPAL console to epapr wrappers")
    Cc: stable@vger.kernel.org # v4.8+
    Signed-off-by: Oliver O'Halloran <oohall@gmail.com>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>

diff --git a/arch/powerpc/boot/ops.h b/arch/powerpc/boot/ops.h
index 309d1b127e96..fad1862f4b2d 100644
--- a/arch/powerpc/boot/ops.h
+++ b/arch/powerpc/boot/ops.h
@@ -30,6 +30,7 @@ struct platform_ops {
 	void *	(*realloc)(void *ptr, unsigned long size);
 	void	(*exit)(void);
 	void *	(*vmlinux_alloc)(unsigned long size);
+	void  	(*kentry)(unsigned long fdt_addr, void *vmlinux_addr);
 };
 extern struct platform_ops platform_ops;
 

commit 1b7898ee276b39e54d870dc4ef3374f663d0b426
Author: Oliver O'Halloran <oohall@gmail.com>
Date:   Thu Sep 22 16:54:31 2016 +1000

    powerpc/boot: Use the pre-boot decompression API
    
    Currently the powerpc boot wrapper has its own wrapper around zlib to
    handle decompressing gzipped kernels. The kernel decompressor library
    functions now provide a generic interface that can be used in the
    pre-boot environment. This allows boot wrappers to easily support
    different compression algorithms. This patch converts the wrapper to use
    this new API, but does not add support for using new algorithms.
    
    Signed-off-by: Oliver O'Halloran <oohall@gmail.com>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>

diff --git a/arch/powerpc/boot/ops.h b/arch/powerpc/boot/ops.h
index e19b64ef977a..309d1b127e96 100644
--- a/arch/powerpc/boot/ops.h
+++ b/arch/powerpc/boot/ops.h
@@ -260,4 +260,7 @@ int __ilog2_u32(u32 n)
 	return 31 - bit;
 }
 
+long partial_decompress(void *inbuf, unsigned long input_size, void *outbuf,
+	unsigned long output_size, unsigned long skip);
+
 #endif /* _PPC_BOOT_OPS_H_ */

commit 656ad58ef19e2a763fa5c938b20ae0f6b8d67242
Author: Oliver O'Halloran <oohall@gmail.com>
Date:   Fri Jul 1 00:34:37 2016 +1000

    powerpc/boot: Add OPAL console to epapr wrappers
    
    This patch adds an OPAL console backend to the powerpc boot wrapper so
    that decompression failures inside the wrapper can be reported to the
    user. This is important since it typically indicates data corruption in
    the firmware and other nasty things.
    
    Currently this only works when building a little endian kernel. When
    compiling a 64 bit BE kernel the wrapper is always build 32 bit to be
    compatible with some 32 bit firmwares. BE support will be added at a
    later date. Another limitation of this is that only the "raw" type of
    OPAL console is supported, however machines that provide a hvsi console
    also provide a raw console so this is not an issue in practice.
    
    Actually-written-by: Benjamin Herrenschmidt <benh@kernel.crashing.org>
    Signed-off-by: Oliver O'Halloran <oohall@gmail.com>
    [mpe: Move #ifdef __powerpc64__ to avoid warnings on 32-bit]
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>

diff --git a/arch/powerpc/boot/ops.h b/arch/powerpc/boot/ops.h
index 5e75e1c5518e..e19b64ef977a 100644
--- a/arch/powerpc/boot/ops.h
+++ b/arch/powerpc/boot/ops.h
@@ -89,6 +89,7 @@ int mpsc_console_init(void *devp, struct serial_console_data *scdp);
 int cpm_console_init(void *devp, struct serial_console_data *scdp);
 int mpc5200_psc_console_init(void *devp, struct serial_console_data *scdp);
 int uartlite_console_init(void *devp, struct serial_console_data *scdp);
+int opal_console_init(void *devp, struct serial_console_data *scdp);
 void *simple_alloc_init(char *base, unsigned long heap_size,
 			unsigned long granularity, unsigned long max_allocs);
 extern void flush_cache(void *, unsigned long);

commit 4b4b13d5fec8a82ed2780c487e49cfc4321a8c14
Author: Simon Kagstrom <simon.kagstrom@netinsight.net>
Date:   Tue Oct 28 12:19:00 2014 +0100

    powerpc/boot: Parse chosen/cmdline-timeout parameter
    
    On some platforms a 5 second timeout during boot might be quite long, so
    make it configurable. Run the loop at least once to let the user stop
    the boot by holding a key pressed. If the timeout is set to 0, don't
    wait for input, which can be used as a workaround if the boot hangs on
    random data coming in on the serial port.
    
    Signed-off-by: Simon Kagstrom <simon.kagstrom@netinsight.net>
    [mpe: Changelog wording & whitespace]
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>

diff --git a/arch/powerpc/boot/ops.h b/arch/powerpc/boot/ops.h
index 8aad3c55aeda..5e75e1c5518e 100644
--- a/arch/powerpc/boot/ops.h
+++ b/arch/powerpc/boot/ops.h
@@ -58,7 +58,7 @@ extern struct dt_ops dt_ops;
 struct console_ops {
 	int	(*open)(void);
 	void	(*write)(const char *buf, int len);
-	void	(*edit_cmdline)(char *buf, int len);
+	void	(*edit_cmdline)(char *buf, int len, unsigned int getline_timeout);
 	void	(*close)(void);
 	void	*data;
 };

commit 579a53cafdd641f2d67ba4f4fbd9cc4180b8717d
Author: Anton Blanchard <anton@samba.org>
Date:   Mon Apr 14 21:55:25 2014 +1000

    powerpc: Bump BOOT_COMMAND_LINE_SIZE to 2048
    
    Bump the boot wrapper BOOT_COMMAND_LINE_SIZE to match the
    kernel.
    
    Signed-off-by: Anton Blanchard <anton@samba.org>
    Signed-off-by: Benjamin Herrenschmidt <benh@kernel.crashing.org>

diff --git a/arch/powerpc/boot/ops.h b/arch/powerpc/boot/ops.h
index 339e041e8dda..8aad3c55aeda 100644
--- a/arch/powerpc/boot/ops.h
+++ b/arch/powerpc/boot/ops.h
@@ -15,7 +15,7 @@
 #include "types.h"
 #include "string.h"
 
-#define	BOOT_COMMAND_LINE_SIZE	512
+#define	BOOT_COMMAND_LINE_SIZE	2048
 #define	MAX_PATH_LEN		256
 #define	MAX_PROP_LEN		256 /* What should this be? */
 

commit a2dd5da77f2cc9fc9ff11ea6b699556254e94a6c
Author: Anton Blanchard <anton@samba.org>
Date:   Mon Apr 14 21:54:05 2014 +1000

    powerpc: Rename duplicate COMMAND_LINE_SIZE define
    
    We have two definitions of COMMAND_LINE_SIZE, one for the kernel
    and one for the boot wrapper. I assume this is so the boot
    wrapper can be self sufficient and not rely on kernel headers.
    
    Having two defines with the same name is confusing, I just
    updated the wrong one when trying to bump it.
    
    Make the boot wrapper define unique by calling it
    BOOT_COMMAND_LINE_SIZE.
    
    Signed-off-by: Anton Blanchard <anton@samba.org>
    Signed-off-by: Benjamin Herrenschmidt <benh@kernel.crashing.org>

diff --git a/arch/powerpc/boot/ops.h b/arch/powerpc/boot/ops.h
index b3218ce451bb..339e041e8dda 100644
--- a/arch/powerpc/boot/ops.h
+++ b/arch/powerpc/boot/ops.h
@@ -15,7 +15,7 @@
 #include "types.h"
 #include "string.h"
 
-#define	COMMAND_LINE_SIZE	512
+#define	BOOT_COMMAND_LINE_SIZE	512
 #define	MAX_PATH_LEN		256
 #define	MAX_PROP_LEN		256 /* What should this be? */
 

commit 71773f0337bee8a3701aaaec22581c18a5f44679
Author: Mike Ditto <mditto@consentry.com>
Date:   Tue Oct 21 11:32:29 2008 +0000

    powerpc: Add del_node() for early boot code to prune inapplicable devices.
    
    Some platforms have variants that can share most of a flat device tree but need
    a few devices selectively pruned at boot time.  This adds del_node() to ops.h
    to allow access to the existing fdt_del_node().
    
    Signed-off-by: Mike Ditto <mditto@consentry.com>
    Signed-off-by: Benjamin Herrenschmidt <benh@kernel.crashing.org>

diff --git a/arch/powerpc/boot/ops.h b/arch/powerpc/boot/ops.h
index 321e2f5afe71..b3218ce451bb 100644
--- a/arch/powerpc/boot/ops.h
+++ b/arch/powerpc/boot/ops.h
@@ -40,6 +40,7 @@ struct dt_ops {
 			const int buflen);
 	int	(*setprop)(const void *phandle, const char *name,
 			const void *buf, const int buflen);
+	int (*del_node)(const void *phandle);
 	void *(*get_parent)(const void *phandle);
 	/* The node must not already exist. */
 	void *(*create_node)(const void *parent, const char *name);
@@ -126,6 +127,11 @@ static inline int setprop_str(void *devp, const char *name, const char *buf)
 	return -1;
 }
 
+static inline int del_node(const void *devp)
+{
+	return dt_ops.del_node ? dt_ops.del_node(devp) : -1;
+}
+
 static inline void *get_parent(const char *devp)
 {
 	return dt_ops.get_parent ? dt_ops.get_parent(devp) : NULL;

commit da0a5f0c65913e4ec0a70a5019ce0a7bcaab21c9
Author: Laurent Pinchart <laurentp@cse-semaphore.com>
Date:   Thu Apr 10 17:03:04 2008 +0200

    [POWERPC] Add bootwrapper function to get virtual reg from the device tree.
    
    This patch adds a new generic device tree processing function that retrieves
    virtual reg addresses from the device tree to the bootwrapper code. It also
    updates the bootwrapper code to use the new function.
    
    dt_get_virtual_reg() retrieves the virtual reg addresses from the
    "virtual-reg" property. If the property can't be found, it uses the "reg"
    property and walks the tree to translate it to absolute addresses.
    
    Signed-off-by: Laurent Pinchart <laurentp@cse-semaphore.com>
    Acked-by: Scott Wood <scottwood@freescale.com>
    Signed-off-by: Kumar Gala <galak@kernel.crashing.org>

diff --git a/arch/powerpc/boot/ops.h b/arch/powerpc/boot/ops.h
index 4b0544b03c64..321e2f5afe71 100644
--- a/arch/powerpc/boot/ops.h
+++ b/arch/powerpc/boot/ops.h
@@ -95,6 +95,7 @@ int dt_xlate_reg(void *node, int res, unsigned long *addr, unsigned long *size);
 int dt_xlate_addr(void *node, u32 *buf, int buflen, unsigned long *xlated_addr);
 int dt_is_compatible(void *node, const char *compat);
 void dt_get_reg_format(void *node, u32 *naddr, u32 *nsize);
+int dt_get_virtual_reg(void *node, void **addr, int nres);
 
 static inline void *finddevice(const char *name)
 {

commit b3bea15d29799797d1486aeddf883404a2e05c81
Author: Kumar Gala <galak@kernel.crashing.org>
Date:   Thu Jan 24 22:41:05 2008 -0600

    [POWERPC] bootwrapper: Add find_node_by_compatible
    
    Add the ability to find a device node by just what its compatible with.
    This is useful in cases that we don't have a prop to find the node with.
    
    Signed-off-by: Kumar Gala <galak@kernel.crashing.org>

diff --git a/arch/powerpc/boot/ops.h b/arch/powerpc/boot/ops.h
index 5872ef1779ae..4b0544b03c64 100644
--- a/arch/powerpc/boot/ops.h
+++ b/arch/powerpc/boot/ops.h
@@ -46,6 +46,8 @@ struct dt_ops {
 	void *(*find_node_by_prop_value)(const void *prev,
 	                                 const char *propname,
 	                                 const char *propval, int proplen);
+	void *(*find_node_by_compatible)(const void *prev,
+	                                 const char *compat);
 	unsigned long (*finalize)(void);
 	char *(*get_path)(const void *phandle, char *buf, int len);
 };
@@ -172,6 +174,15 @@ static inline void *find_node_by_alias(const char *alias)
 	return NULL;
 }
 
+static inline void *find_node_by_compatible(const void *prev,
+                                            const char *compat)
+{
+	if (dt_ops.find_node_by_compatible)
+		return dt_ops.find_node_by_compatible(prev, compat);
+
+	return NULL;
+}
+
 void dt_fixup_memory(u64 start, u64 size);
 void dt_fixup_cpu_clocks(u32 cpufreq, u32 tbfreq, u32 busfreq);
 void dt_fixup_clock(const char *path, u32 freq);

commit ad160681c8caa0a73e6abd3ac606cd857608f94a
Author: Kumar Gala <galak@kernel.crashing.org>
Date:   Tue Jan 15 09:30:32 2008 -0600

    [POWERPC] bootwrapper: Add find_node_by_alias and dt_fixup_mac_address_by_alias
    
    Add the ability to set the mac address given the alias for the device.
    Removes the need for having a linux,network-index property.
    
    Signed-off-by: Kumar Gala <galak@kernel.crashing.org>

diff --git a/arch/powerpc/boot/ops.h b/arch/powerpc/boot/ops.h
index 6036a98e646a..5872ef1779ae 100644
--- a/arch/powerpc/boot/ops.h
+++ b/arch/powerpc/boot/ops.h
@@ -159,9 +159,23 @@ static inline void *find_node_by_devtype(const void *prev,
 	return find_node_by_prop_value_str(prev, "device_type", type);
 }
 
+static inline void *find_node_by_alias(const char *alias)
+{
+	void *devp = finddevice("/aliases");
+
+	if (devp) {
+		char path[MAX_PATH_LEN];
+		if (getprop(devp, alias, path, MAX_PATH_LEN) > 0)
+			return finddevice(path);
+	}
+
+	return NULL;
+}
+
 void dt_fixup_memory(u64 start, u64 size);
 void dt_fixup_cpu_clocks(u32 cpufreq, u32 tbfreq, u32 busfreq);
 void dt_fixup_clock(const char *path, u32 freq);
+void dt_fixup_mac_address_by_alias(const char *alias, const u8 *addr);
 void dt_fixup_mac_address(u32 index, const u8 *addr);
 void __dt_fixup_mac_addresses(u32 startindex, ...);
 #define dt_fixup_mac_addresses(...) \

commit 430b01e8f5e524a2bfa50074d97d0bdc2505807b
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Mon Dec 10 14:28:39 2007 +1100

    [POWERPC] Kill flatdevtree.c
    
    Now that earlier patches have switched the bootwrapper to using libfdt
    for device tree manipulation, this patch removes the now unused
    flatdevtree.c and related files.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>
    Signed-off-by: Paul Mackerras <paulus@samba.org>

diff --git a/arch/powerpc/boot/ops.h b/arch/powerpc/boot/ops.h
index 28df2c5a9761..6036a98e646a 100644
--- a/arch/powerpc/boot/ops.h
+++ b/arch/powerpc/boot/ops.h
@@ -79,7 +79,6 @@ struct loader_info {
 extern struct loader_info loader_info;
 
 void start(void);
-int ft_init(void *dt_blob, unsigned int max_size, unsigned int max_find_device);
 void fdt_init(void *blob);
 int serial_console_init(void);
 int ns16550_console_init(void *devp, struct serial_console_data *scdp);

commit 2f0dfeaa84a8eea56218b77ffc61ed3dd7181847
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Mon Dec 10 14:28:39 2007 +1100

    [POWERPC] Use embedded libfdt in the bootwrapper
    
    This incorporates libfdt (from the source embedded in an earlier
    commit) into the wrapper.a library used by the bootwrapper.  This
    includes adding a libfdt_env.h file, which the libfdt sources need in
    order to integrate into the bootwrapper environment, and a
    libfdt-wrapper.c which provides glue to connect the bootwrapper's
    abstract device tree callbacks to the libfdt functions.
    
    In addition, this changes the various wrapper and platform files to
    use libfdt functions instead of the older flatdevtree.c library.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>
    Signed-off-by: Paul Mackerras <paulus@samba.org>

diff --git a/arch/powerpc/boot/ops.h b/arch/powerpc/boot/ops.h
index a180b6505f47..28df2c5a9761 100644
--- a/arch/powerpc/boot/ops.h
+++ b/arch/powerpc/boot/ops.h
@@ -80,6 +80,7 @@ extern struct loader_info loader_info;
 
 void start(void);
 int ft_init(void *dt_blob, unsigned int max_size, unsigned int max_find_device);
+void fdt_init(void *blob);
 int serial_console_init(void);
 int ns16550_console_init(void *devp, struct serial_console_data *scdp);
 int mpsc_console_init(void *devp, struct serial_console_data *scdp);

commit 7ddc5f978b16c024b6c1fcecbda6815d3d3222ef
Author: Grant Likely <grant.likely@secretlab.ca>
Date:   Tue Oct 2 12:15:13 2007 +1000

    [POWERPC] Virtex: Add uartlite bootwrapper driver
    
    Allows the bootwrapper to use the uartlite device for console output.
    
    Signed-off-by: Grant Likely <grant.likely@secretlab.ca>
    Signed-off-by: Josh Boyer <jwboyer@linux.vnet.ibm.com>

diff --git a/arch/powerpc/boot/ops.h b/arch/powerpc/boot/ops.h
index e948e57abef8..a180b6505f47 100644
--- a/arch/powerpc/boot/ops.h
+++ b/arch/powerpc/boot/ops.h
@@ -85,6 +85,7 @@ int ns16550_console_init(void *devp, struct serial_console_data *scdp);
 int mpsc_console_init(void *devp, struct serial_console_data *scdp);
 int cpm_console_init(void *devp, struct serial_console_data *scdp);
 int mpc5200_psc_console_init(void *devp, struct serial_console_data *scdp);
+int uartlite_console_init(void *devp, struct serial_console_data *scdp);
 void *simple_alloc_init(char *base, unsigned long heap_size,
 			unsigned long granularity, unsigned long max_allocs);
 extern void flush_cache(void *, unsigned long);

commit 27ff35d9026b5d41d66ed95b65d7819db4cf5fb1
Author: Scott Wood <scottwood@freescale.com>
Date:   Tue Sep 25 06:09:11 2007 +1000

    [POWERPC] bootwrapper: Factor out dt_set_mac_address()
    
    This allows callers to set addresses one at a time when that would be more
    convenient.
    
    Signed-off-by: Scott Wood <scottwood@freescale.com>
    Acked-by: David Gibson <david@gibson.dropbear.id.au>
    Signed-off-by: Paul Mackerras <paulus@samba.org>

diff --git a/arch/powerpc/boot/ops.h b/arch/powerpc/boot/ops.h
index f639fcab2c44..e948e57abef8 100644
--- a/arch/powerpc/boot/ops.h
+++ b/arch/powerpc/boot/ops.h
@@ -161,6 +161,7 @@ static inline void *find_node_by_devtype(const void *prev,
 void dt_fixup_memory(u64 start, u64 size);
 void dt_fixup_cpu_clocks(u32 cpufreq, u32 tbfreq, u32 busfreq);
 void dt_fixup_clock(const char *path, u32 freq);
+void dt_fixup_mac_address(u32 index, const u8 *addr);
 void __dt_fixup_mac_addresses(u32 startindex, ...);
 #define dt_fixup_mac_addresses(...) \
 	__dt_fixup_mac_addresses(0, __VA_ARGS__, NULL)

commit 85498ae87c7d789de613b7e21bd539577142c3cb
Author: Grant Likely <grant.likely@secretlab.ca>
Date:   Sat Sep 1 03:34:37 2007 +1000

    [POWERPC] mpc5200: Add cuimage support for mpc5200 boards
    
    Signed-off-by: Grant Likely <grant.likely@secretlab.ca>
    Acked-by: David Gibson <david@gibson.dropbear.id.au>
    Signed-off-by: Paul Mackerras <paulus@samba.org>

diff --git a/arch/powerpc/boot/ops.h b/arch/powerpc/boot/ops.h
index 703255bf0089..f639fcab2c44 100644
--- a/arch/powerpc/boot/ops.h
+++ b/arch/powerpc/boot/ops.h
@@ -84,6 +84,7 @@ int serial_console_init(void);
 int ns16550_console_init(void *devp, struct serial_console_data *scdp);
 int mpsc_console_init(void *devp, struct serial_console_data *scdp);
 int cpm_console_init(void *devp, struct serial_console_data *scdp);
+int mpc5200_psc_console_init(void *devp, struct serial_console_data *scdp);
 void *simple_alloc_init(char *base, unsigned long heap_size,
 			unsigned long granularity, unsigned long max_allocs);
 extern void flush_cache(void *, unsigned long);

commit 21f3fe2f7ab57832ea1fc7f719ec7e167b7ad80e
Author: Scott Wood <scottwood@freescale.com>
Date:   Thu Sep 6 05:21:12 2007 +1000

    [POWERPC] bootwrapper: Add get_path()
    
    This will be used by the PlanetCore firmware support to construct
    a linux,stdout-path from the serial node that it finds.
    
    Signed-off-by: Scott Wood <scottwood@freescale.com>
    Acked-by: David Gibson <david@gibson.dropbear.id.au>
    Signed-off-by: Paul Mackerras <paulus@samba.org>

diff --git a/arch/powerpc/boot/ops.h b/arch/powerpc/boot/ops.h
index 45c2268d5c56..703255bf0089 100644
--- a/arch/powerpc/boot/ops.h
+++ b/arch/powerpc/boot/ops.h
@@ -47,6 +47,7 @@ struct dt_ops {
 	                                 const char *propname,
 	                                 const char *propval, int proplen);
 	unsigned long (*finalize)(void);
+	char *(*get_path)(const void *phandle, char *buf, int len);
 };
 extern struct dt_ops dt_ops;
 
@@ -170,6 +171,14 @@ static inline void *find_node_by_linuxphandle(const u32 linuxphandle)
 			(char *)&linuxphandle, sizeof(u32));
 }
 
+static inline char *get_path(const void *phandle, char *buf, int len)
+{
+	if (dt_ops.get_path)
+		return dt_ops.get_path(phandle, buf, len);
+
+	return NULL;
+}
+
 static inline void *malloc(unsigned long size)
 {
 	return (platform_ops.malloc) ? platform_ops.malloc(size) : NULL;

commit e5d8d54db25790524da34b0143f4e0176fb7677b
Author: Scott Wood <scottwood@freescale.com>
Date:   Tue Aug 21 03:40:02 2007 +1000

    [POWERPC] bootwrapper: Add PowerQUICC II (82xx with CPM) cuboot support
    
    This allows booting on legacy, non-device-tree aware versions of U-boot.
    
    It also fixes up the hardware to match the PCI and chipselect information
    in the device tree, as u-boot is inconsistent in setting these up
    correctly (or at all).
    
    Signed-off-by: Scott Wood <scottwood@freescale.com>
    Acked-by: David Gibson <david@gibson.dropbear.id.au>
    Signed-off-by: Paul Mackerras <paulus@samba.org>

diff --git a/arch/powerpc/boot/ops.h b/arch/powerpc/boot/ops.h
index e4b6139d2d6e..45c2268d5c56 100644
--- a/arch/powerpc/boot/ops.h
+++ b/arch/powerpc/boot/ops.h
@@ -89,6 +89,7 @@ extern void flush_cache(void *, unsigned long);
 int dt_xlate_reg(void *node, int res, unsigned long *addr, unsigned long *size);
 int dt_xlate_addr(void *node, u32 *buf, int buflen, unsigned long *xlated_addr);
 int dt_is_compatible(void *node, const char *compat);
+void dt_get_reg_format(void *node, u32 *naddr, u32 *nsize);
 
 static inline void *finddevice(const char *name)
 {
@@ -206,4 +207,12 @@ extern char _initrd_end[];
 extern char _dtb_start[];
 extern char _dtb_end[];
 
+static inline __attribute__((const))
+int __ilog2_u32(u32 n)
+{
+	int bit;
+	asm ("cntlzw %0,%1" : "=r" (bit) : "r" (n));
+	return 31 - bit;
+}
+
 #endif /* _PPC_BOOT_OPS_H_ */

commit 2f1d4899321be87bc5f0c4ee0e62c9d9ced05f80
Author: Scott Wood <scottwood@freescale.com>
Date:   Tue Aug 21 03:39:58 2007 +1000

    [POWERPC] bootwrapper: Move linker symbols into ops.h
    
    Most of these were previously used by numerous C files and
    redeclared in each one.
    
    Signed-off-by: Scott Wood <scottwood@freescale.com>
    Signed-off-by: Paul Mackerras <paulus@samba.org>

diff --git a/arch/powerpc/boot/ops.h b/arch/powerpc/boot/ops.h
index 2bc2f02db741..e4b6139d2d6e 100644
--- a/arch/powerpc/boot/ops.h
+++ b/arch/powerpc/boot/ops.h
@@ -196,4 +196,14 @@ static inline void exit(void)
 extern unsigned long timebase_period_ns;
 void udelay(long delay);
 
+extern char _start[];
+extern char __bss_start[];
+extern char _end[];
+extern char _vmlinux_start[];
+extern char _vmlinux_end[];
+extern char _initrd_start[];
+extern char _initrd_end[];
+extern char _dtb_start[];
+extern char _dtb_end[];
+
 #endif /* _PPC_BOOT_OPS_H_ */

commit d0f53fafc016b3f4f20f63ecf52f6df8774bcb3c
Author: Scott Wood <scottwood@freescale.com>
Date:   Tue Aug 21 03:39:57 2007 +1000

    [POWERPC] bootwrapper: Add CPM serial driver
    
    This serial port is used on all 8xx, many 82xx, and some 85xx chips.
    
    The driver requires that the port has already been set up by the firmware
    and/or platform code.
    
    Signed-off-by: Scott Wood <scottwood@freescale.com>
    Acked-by: David Gibson <david@gibson.dropbear.id.au>
    Signed-off-by: Paul Mackerras <paulus@samba.org>

diff --git a/arch/powerpc/boot/ops.h b/arch/powerpc/boot/ops.h
index e45b364e7fcf..2bc2f02db741 100644
--- a/arch/powerpc/boot/ops.h
+++ b/arch/powerpc/boot/ops.h
@@ -82,6 +82,7 @@ int ft_init(void *dt_blob, unsigned int max_size, unsigned int max_find_device);
 int serial_console_init(void);
 int ns16550_console_init(void *devp, struct serial_console_data *scdp);
 int mpsc_console_init(void *devp, struct serial_console_data *scdp);
+int cpm_console_init(void *devp, struct serial_console_data *scdp);
 void *simple_alloc_init(char *base, unsigned long heap_size,
 			unsigned long granularity, unsigned long max_allocs);
 extern void flush_cache(void *, unsigned long);

commit 3ee9b7abafc36a9377af6f036f50c3450954884c
Author: Scott Wood <scottwood@freescale.com>
Date:   Tue Aug 21 03:39:55 2007 +1000

    [POWERPC] bootwrapper: Declare udelay() in ops.h
    
    Declarations in various users are removed.
    
    Signed-off-by: Scott Wood <scottwood@freescale.com>
    Signed-off-by: Paul Mackerras <paulus@samba.org>

diff --git a/arch/powerpc/boot/ops.h b/arch/powerpc/boot/ops.h
index a10bf5a153d5..e45b364e7fcf 100644
--- a/arch/powerpc/boot/ops.h
+++ b/arch/powerpc/boot/ops.h
@@ -193,5 +193,6 @@ static inline void exit(void)
 	void *_platform_stack_top = _bss_stack + sizeof(_bss_stack);
 
 extern unsigned long timebase_period_ns;
+void udelay(long delay);
 
 #endif /* _PPC_BOOT_OPS_H_ */

commit a73ac50c4787b1b28d5c94bb18c60352f5dd7d6f
Author: Scott Wood <scottwood@freescale.com>
Date:   Tue Aug 21 03:39:48 2007 +1000

    [POWERPC] bootwrapper: Add dt_is_compatible()
    
    This can be used rather than doing a simple strcmp, which will fail to
    handle multiple compatible entries.
    
    Signed-off-by: Scott Wood <scottwood@freescale.com>
    Acked-by: David Gibson <david@gibson.dropbear.id.au>
    Signed-off-by: Paul Mackerras <paulus@samba.org>

diff --git a/arch/powerpc/boot/ops.h b/arch/powerpc/boot/ops.h
index aebd6edc9a90..a10bf5a153d5 100644
--- a/arch/powerpc/boot/ops.h
+++ b/arch/powerpc/boot/ops.h
@@ -87,6 +87,7 @@ void *simple_alloc_init(char *base, unsigned long heap_size,
 extern void flush_cache(void *, unsigned long);
 int dt_xlate_reg(void *node, int res, unsigned long *addr, unsigned long *size);
 int dt_xlate_addr(void *node, u32 *buf, int buflen, unsigned long *xlated_addr);
+int dt_is_compatible(void *node, const char *compat);
 
 static inline void *finddevice(const char *name)
 {

commit 643d3c139b0a5289d7f0ba19fdcb24be6d7e768f
Author: Scott Wood <scottwood@freescale.com>
Date:   Tue Aug 21 03:39:45 2007 +1000

    [POWERPC] bootwrapper: Set timebase_period_ns from dt_fixup_cpu_clocks
    
    This lets udelay() work properly on platforms which use dt_fixup_cpu_clocks.
    
    Signed-off-by: Scott Wood <scottwood@freescale.com>
    Acked-by: David Gibson <david@gibson.dropbear.id.au>
    Signed-off-by: Paul Mackerras <paulus@samba.org>

diff --git a/arch/powerpc/boot/ops.h b/arch/powerpc/boot/ops.h
index 86077066cd7c..aebd6edc9a90 100644
--- a/arch/powerpc/boot/ops.h
+++ b/arch/powerpc/boot/ops.h
@@ -191,4 +191,6 @@ static inline void exit(void)
 	static char _bss_stack[size]; \
 	void *_platform_stack_top = _bss_stack + sizeof(_bss_stack);
 
+extern unsigned long timebase_period_ns;
+
 #endif /* _PPC_BOOT_OPS_H_ */

commit 62cf6a9d65cd7ba66f96be25e3e8c5036c3e581e
Author: Geoff Levand <geoffrey.levand@am.sony.com>
Date:   Sat Jun 16 08:06:44 2007 +1000

    [POWERPC] Make kernel_entry_t have global scope in bootwrapper
    
    For the convenience of custom platform code make the powerpc
    bootwrapper typdef kernel_entry_t global in scope.
    
    Signed-off-by: Geoff Levand <geoffrey.levand@am.sony.com>
    Signed-off-by: Paul Mackerras <paulus@samba.org>

diff --git a/arch/powerpc/boot/ops.h b/arch/powerpc/boot/ops.h
index a1581b7f1779..86077066cd7c 100644
--- a/arch/powerpc/boot/ops.h
+++ b/arch/powerpc/boot/ops.h
@@ -19,6 +19,8 @@
 #define	MAX_PATH_LEN		256
 #define	MAX_PROP_LEN		256 /* What should this be? */
 
+typedef void (*kernel_entry_t)(unsigned long r3, unsigned long r4, void *r5);
+
 /* Platform specific operations */
 struct platform_ops {
 	void	(*fixups)(void);

commit b96fbb6e1eb81bb21a8c3462773a0056e12de427
Author: Geoff Levand <geoffrey.levand@am.sony.com>
Date:   Sat Jun 16 08:06:40 2007 +1000

    [POWERPC] Fix constantness of bootwrapper arg
    
    Fixes the constantness of the powerpc bootwrapper's console_ops.write
    routine.  Allows printing of constant strings.
    
    Signed-off-by: Geoff Levand <geoffrey.levand@am.sony.com>
    Signed-off-by: Paul Mackerras <paulus@samba.org>

diff --git a/arch/powerpc/boot/ops.h b/arch/powerpc/boot/ops.h
index 959124f3f9af..a1581b7f1779 100644
--- a/arch/powerpc/boot/ops.h
+++ b/arch/powerpc/boot/ops.h
@@ -51,7 +51,7 @@ extern struct dt_ops dt_ops;
 /* Console operations */
 struct console_ops {
 	int	(*open)(void);
-	void	(*write)(char *buf, int len);
+	void	(*write)(const char *buf, int len);
 	void	(*edit_cmdline)(char *buf, int len);
 	void	(*close)(void);
 	void	*data;

commit e12deb840ceed7051ab4799ae71b675a83c58c7c
Author: Mark A. Greer <mgreer@mvista.com>
Date:   Sat May 12 10:54:31 2007 +1000

    [POWERPC] Add bootwrapper support for Marvell MPSC
    
    The bootwrapper requires a serial driver to allow cmdline editing
    and information reporting on the console.  This driver is required
    by platforms that boot a zImage and use the MPSC for the console.
    
    Signed-off-by: Mark A. Greer <mgreer@mvista.com>
    Signed-off-by: Paul Mackerras <paulus@samba.org>

diff --git a/arch/powerpc/boot/ops.h b/arch/powerpc/boot/ops.h
index 73bd47a3a079..959124f3f9af 100644
--- a/arch/powerpc/boot/ops.h
+++ b/arch/powerpc/boot/ops.h
@@ -79,6 +79,7 @@ void start(void);
 int ft_init(void *dt_blob, unsigned int max_size, unsigned int max_find_device);
 int serial_console_init(void);
 int ns16550_console_init(void *devp, struct serial_console_data *scdp);
+int mpsc_console_init(void *devp, struct serial_console_data *scdp);
 void *simple_alloc_init(char *base, unsigned long heap_size,
 			unsigned long granularity, unsigned long max_allocs);
 extern void flush_cache(void *, unsigned long);

commit 8895ea483e144f8acca16adfff7c60a993e77b7d
Author: Mark A. Greer <mgreer@mvista.com>
Date:   Sat Apr 28 06:48:24 2007 +1000

    [POWERPC] Add dt_xlate_addr() to bootwrapper
    
    dt_xlate_reg() looks up the 'reg' property in the specified node
    to get the address and size to translate.  Add dt_xlate_addr()
    which is passed in the address and size to translate.
    
    Signed-off-by: Mark A. Greer <mgreer@mvista.com>
    Signed-off-by: Paul Mackerras <paulus@samba.org>

diff --git a/arch/powerpc/boot/ops.h b/arch/powerpc/boot/ops.h
index 20e87199f6a4..73bd47a3a079 100644
--- a/arch/powerpc/boot/ops.h
+++ b/arch/powerpc/boot/ops.h
@@ -82,8 +82,8 @@ int ns16550_console_init(void *devp, struct serial_console_data *scdp);
 void *simple_alloc_init(char *base, unsigned long heap_size,
 			unsigned long granularity, unsigned long max_allocs);
 extern void flush_cache(void *, unsigned long);
-int dt_xlate_reg(void *node, int res, unsigned long *addr,
-                 unsigned long *size);
+int dt_xlate_reg(void *node, int res, unsigned long *addr, unsigned long *size);
+int dt_xlate_addr(void *node, u32 *buf, int buflen, unsigned long *xlated_addr);
 
 static inline void *finddevice(const char *name)
 {

commit 4ca478e6066ce57f7cc856af36aaf1a2d64417cb
Author: Geert Uytterhoeven <Geert.Uytterhoeven@eu.sony.com>
Date:   Wed Apr 18 19:24:12 2007 +1000

    [POWERPC] bootwrapper: Use `unsigned long' for malloc sizes
    
    Use `unsigned long' for malloc sizes, to match common practice and types used
    by most callers and callees.
    Also use `unsigned long' for integers representing pointers in simple_alloc.
    
    Signed-off-by: Geert Uytterhoeven <Geert.Uytterhoeven@eu.sony.com>
    Signed-off-by: Paul Mackerras <paulus@samba.org>

diff --git a/arch/powerpc/boot/ops.h b/arch/powerpc/boot/ops.h
index ee0f9c25f839..20e87199f6a4 100644
--- a/arch/powerpc/boot/ops.h
+++ b/arch/powerpc/boot/ops.h
@@ -23,7 +23,7 @@
 struct platform_ops {
 	void	(*fixups)(void);
 	void	(*image_hdr)(const void *);
-	void *	(*malloc)(u32 size);
+	void *	(*malloc)(unsigned long size);
 	void	(*free)(void *ptr);
 	void *	(*realloc)(void *ptr, unsigned long size);
 	void	(*exit)(void);
@@ -79,8 +79,8 @@ void start(void);
 int ft_init(void *dt_blob, unsigned int max_size, unsigned int max_find_device);
 int serial_console_init(void);
 int ns16550_console_init(void *devp, struct serial_console_data *scdp);
-void *simple_alloc_init(char *base, u32 heap_size, u32 granularity,
-		u32 max_allocs);
+void *simple_alloc_init(char *base, unsigned long heap_size,
+			unsigned long granularity, unsigned long max_allocs);
 extern void flush_cache(void *, unsigned long);
 int dt_xlate_reg(void *node, int res, unsigned long *addr,
                  unsigned long *size);
@@ -164,7 +164,7 @@ static inline void *find_node_by_linuxphandle(const u32 linuxphandle)
 			(char *)&linuxphandle, sizeof(u32));
 }
 
-static inline void *malloc(u32 size)
+static inline void *malloc(unsigned long size)
 {
 	return (platform_ops.malloc) ? platform_ops.malloc(size) : NULL;
 }

commit d6f1d2a9a83f447af6c210c8268ce117772da77f
Author: Mark A. Greer <mgreer@mvista.com>
Date:   Tue Mar 27 15:31:41 2007 -0700

    [POWERPC] Routine to find the devtree node of a linux,phandle
    
    Signed-off-by: Mark A. Greer <mgreer@mvista.com>
    Signed-off-by: Paul Mackerras <paulus@samba.org>

diff --git a/arch/powerpc/boot/ops.h b/arch/powerpc/boot/ops.h
index fbd9030d660e..ee0f9c25f839 100644
--- a/arch/powerpc/boot/ops.h
+++ b/arch/powerpc/boot/ops.h
@@ -158,6 +158,12 @@ void __dt_fixup_mac_addresses(u32 startindex, ...);
 	__dt_fixup_mac_addresses(0, __VA_ARGS__, NULL)
 
 
+static inline void *find_node_by_linuxphandle(const u32 linuxphandle)
+{
+	return find_node_by_prop_value(NULL, "linux,phandle",
+			(char *)&linuxphandle, sizeof(u32));
+}
+
 static inline void *malloc(u32 size)
 {
 	return (platform_ops.malloc) ? platform_ops.malloc(size) : NULL;

commit 6e1af384f1c1742ae6d86bbf779d4fa020c509bc
Author: Scott Wood <scottwood@freescale.com>
Date:   Mon Mar 26 15:52:24 2007 -0500

    [POWERPC] bootwrapper: Add dt_xlate_reg(), and use it to find serial registers.
    
    dt_xlate_reg() uses the ranges properties of a node's parentage to find
    the absolute physical address of the node's registers.
    
    The ns16550 driver uses this when no virtual-reg property is found.
    
    Signed-off-by: Scott Wood <scottwood@freescale.com>
    Signed-off-by: Paul Mackerras <paulus@samba.org>

diff --git a/arch/powerpc/boot/ops.h b/arch/powerpc/boot/ops.h
index 8008d612402e..fbd9030d660e 100644
--- a/arch/powerpc/boot/ops.h
+++ b/arch/powerpc/boot/ops.h
@@ -82,6 +82,8 @@ int ns16550_console_init(void *devp, struct serial_console_data *scdp);
 void *simple_alloc_init(char *base, u32 heap_size, u32 granularity,
 		u32 max_allocs);
 extern void flush_cache(void *, unsigned long);
+int dt_xlate_reg(void *node, int res, unsigned long *addr,
+                 unsigned long *size);
 
 static inline void *finddevice(const char *name)
 {

commit 3af82a8b00f98ca54e4c860eeb2b9ede6d8cadf4
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Thu Mar 22 17:02:21 2007 +1100

    [POWERPC] Clean up zImage handling of the command line
    
    This cleans up how the zImage code manipulates the kernel
    command line.  Notable improvements from the old handling:
            - Command line manipulation is consolidated into a new
    prep_cmdline() function, rather than being scattered across start()
    and some helper functions
            - Less stack space use: we use just a single global command
    line buffer, which can be initialized by an external tool as before,
    we no longer need another command line sized buffer on the stack.
            - Easier to support platforms whose firmware passes a
    commandline, but not a device tree.  Platform code can now point new
    loader_info fields to the firmware's command line, rather than having
    to do early manipulation of the /chosen bootargs property which may
    then be rewritten again by the core.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>
    Signed-off-by: Paul Mackerras <paulus@samba.org>

diff --git a/arch/powerpc/boot/ops.h b/arch/powerpc/boot/ops.h
index cc191e8e147f..8008d612402e 100644
--- a/arch/powerpc/boot/ops.h
+++ b/arch/powerpc/boot/ops.h
@@ -70,6 +70,8 @@ struct serial_console_data {
 struct loader_info {
 	void *promptr;
 	unsigned long initrd_addr, initrd_size;
+	char *cmdline;
+	int cmdline_len;
 };
 extern struct loader_info loader_info;
 

commit 27fbaa9702e548e74dffd21855769f6cedad42bd
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Thu Mar 22 17:02:21 2007 +1100

    [POWERPC] Add device tree utility functions to zImage
    
    This patch adds a library of useful device tree manipulation functions
    to the zImage library, for use by platform code.  These functions are
    based on the hooks already in dt_ops, so they're not dependent on a
    particular device tree implementation.  This patch also slightly
    streamlines the code in main.c using these new functions.
    
    This is a consolidation of my work in this area with Scott Wood's
    patches to a very similar end.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>
    Signed-off-by: Paul Mackerras <paulus@samba.org>

diff --git a/arch/powerpc/boot/ops.h b/arch/powerpc/boot/ops.h
index 592dc6c20bdb..cc191e8e147f 100644
--- a/arch/powerpc/boot/ops.h
+++ b/arch/powerpc/boot/ops.h
@@ -96,6 +96,11 @@ static inline int setprop(void *devp, const char *name,
 {
 	return (dt_ops.setprop) ? dt_ops.setprop(devp, name, buf, buflen) : -1;
 }
+#define setprop_val(devp, name, val) \
+	do { \
+		typeof(val) x = (val); \
+		setprop((devp), (name), &x, sizeof(x)); \
+	} while (0)
 
 static inline int setprop_str(void *devp, const char *name, const char *buf)
 {
@@ -141,6 +146,14 @@ static inline void *find_node_by_devtype(const void *prev,
 	return find_node_by_prop_value_str(prev, "device_type", type);
 }
 
+void dt_fixup_memory(u64 start, u64 size);
+void dt_fixup_cpu_clocks(u32 cpufreq, u32 tbfreq, u32 busfreq);
+void dt_fixup_clock(const char *path, u32 freq);
+void __dt_fixup_mac_addresses(u32 startindex, ...);
+#define dt_fixup_mac_addresses(...) \
+	__dt_fixup_mac_addresses(0, __VA_ARGS__, NULL)
+
+
 static inline void *malloc(u32 size)
 {
 	return (platform_ops.malloc) ? platform_ops.malloc(size) : NULL;

commit e5a2072bd48eb4a35c57a8ec45897ac2db3a3f82
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Thu Mar 22 17:02:21 2007 +1100

    [POWERPC] New reg.h for the zImage
    
    This patch adds a reg.h to the zImage code, with common definitions
    for accessing system registers.  For now, this includes functions for
    retrieving the PVR and the stack pointer.  This patch then uses the
    new reg.h to let start() display the running stack address without
    having to explicitly pass the stack as a parameter from the asm code.
    
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>
    Signed-off-by: Paul Mackerras <paulus@samba.org>

diff --git a/arch/powerpc/boot/ops.h b/arch/powerpc/boot/ops.h
index ea5368caca59..592dc6c20bdb 100644
--- a/arch/powerpc/boot/ops.h
+++ b/arch/powerpc/boot/ops.h
@@ -73,7 +73,7 @@ struct loader_info {
 };
 extern struct loader_info loader_info;
 
-void start(void *sp);
+void start(void);
 int ft_init(void *dt_blob, unsigned int max_size, unsigned int max_find_device);
 int serial_console_init(void);
 int ns16550_console_init(void *devp, struct serial_console_data *scdp);

commit 6a923216aac01d0f3eeea606377b81541f1a2773
Author: Milton Miller <miltonm@bga.com>
Date:   Wed Mar 21 09:02:44 2007 -0600

    [POWERPC] bootwrapper: Add a fatal error helper
    
    Add a macro fatal that calls printf then exit.  User must include stdio.h.
    
    Typically replaces 3 lines with 1, although I added back some whitespace.
    
    Signed-off-by: Milton Miller <miltonm@bga.com>
    Signed-off-by: Paul Mackerras <paulus@samba.org>

diff --git a/arch/powerpc/boot/ops.h b/arch/powerpc/boot/ops.h
index 93608b772db5..ea5368caca59 100644
--- a/arch/powerpc/boot/ops.h
+++ b/arch/powerpc/boot/ops.h
@@ -158,6 +158,8 @@ static inline void exit(void)
 		platform_ops.exit();
 	for(;;);
 }
+#define fatal(args...) { printf(args); exit(); }
+
 
 #define BSS_STACK(size) \
 	static char _bss_stack[size]; \

commit 0e6806734fd861c360ecbb4262d3d5678cea7faf
Author: Milton Miller <miltonm@bga.com>
Date:   Mon Mar 19 14:58:06 2007 -0600

    [POWERPC] boot: export flush_cache
    
    Move the declaration of flush_cache to ops.h for use by platform code.
    
    Signed-off-by: Milton Miller <miltonm@bga.com>
    Acked-by: David Gibson <david@gibson.dropbear.id.au>
    Signed-off-by: Paul Mackerras <paulus@samba.org>

diff --git a/arch/powerpc/boot/ops.h b/arch/powerpc/boot/ops.h
index 4d0cfd733985..93608b772db5 100644
--- a/arch/powerpc/boot/ops.h
+++ b/arch/powerpc/boot/ops.h
@@ -79,7 +79,7 @@ int serial_console_init(void);
 int ns16550_console_init(void *devp, struct serial_console_data *scdp);
 void *simple_alloc_init(char *base, u32 heap_size, u32 granularity,
 		u32 max_allocs);
-
+extern void flush_cache(void *, unsigned long);
 
 static inline void *finddevice(const char *name)
 {

commit f61e7cd21b47b07002aa39d2f8f0db14b4a51719
Author: Scott Wood <scottwood@freescale.com>
Date:   Fri Mar 16 12:28:49 2007 -0500

    [POWERPC] bootwrapper: Make setprop accept a const buffer.
    
    Signed-off-by: Scott Wood <scottwood@freescale.com>
    Acked-by: David Gibson <david@gibson.dropbear.id.au>
    Signed-off-by: Paul Mackerras <paulus@samba.org>

diff --git a/arch/powerpc/boot/ops.h b/arch/powerpc/boot/ops.h
index dae0e3b23cf5..4d0cfd733985 100644
--- a/arch/powerpc/boot/ops.h
+++ b/arch/powerpc/boot/ops.h
@@ -91,7 +91,8 @@ static inline int getprop(void *devp, const char *name, void *buf, int buflen)
 	return (dt_ops.getprop) ? dt_ops.getprop(devp, name, buf, buflen) : -1;
 }
 
-static inline int setprop(void *devp, const char *name, void *buf, int buflen)
+static inline int setprop(void *devp, const char *name,
+                          const void *buf, int buflen)
 {
 	return (dt_ops.setprop) ? dt_ops.setprop(devp, name, buf, buflen) : -1;
 }

commit a07940ba00218267493798e89e3f4a86fea53125
Author: Scott Wood <scottwood@freescale.com>
Date:   Fri Mar 16 12:27:54 2007 -0500

    [POWERPC] bootwrapper: Add dt_ops methods.
    
    Add get_parent, create_node, and find_node_by_prop_value to dt_ops.
    Currently only implemented by flatdevtree_misc.
    
    Also, add a _str convenience wrapper for setprop.
    
    Signed-off-by: Scott Wood <scottwood@freescale.com>
    Acked-by: David Gibson <david@gibson.dropbear.id.au>
    Signed-off-by: Paul Mackerras <paulus@samba.org>

diff --git a/arch/powerpc/boot/ops.h b/arch/powerpc/boot/ops.h
index 2b569ad984bd..dae0e3b23cf5 100644
--- a/arch/powerpc/boot/ops.h
+++ b/arch/powerpc/boot/ops.h
@@ -13,6 +13,7 @@
 
 #include <stddef.h>
 #include "types.h"
+#include "string.h"
 
 #define	COMMAND_LINE_SIZE	512
 #define	MAX_PATH_LEN		256
@@ -37,6 +38,12 @@ struct dt_ops {
 			const int buflen);
 	int	(*setprop)(const void *phandle, const char *name,
 			const void *buf, const int buflen);
+	void *(*get_parent)(const void *phandle);
+	/* The node must not already exist. */
+	void *(*create_node)(const void *parent, const char *name);
+	void *(*find_node_by_prop_value)(const void *prev,
+	                                 const char *propname,
+	                                 const char *propval, int proplen);
 	unsigned long (*finalize)(void);
 };
 extern struct dt_ops dt_ops;
@@ -89,6 +96,50 @@ static inline int setprop(void *devp, const char *name, void *buf, int buflen)
 	return (dt_ops.setprop) ? dt_ops.setprop(devp, name, buf, buflen) : -1;
 }
 
+static inline int setprop_str(void *devp, const char *name, const char *buf)
+{
+	if (dt_ops.setprop)
+		return dt_ops.setprop(devp, name, buf, strlen(buf) + 1);
+
+	return -1;
+}
+
+static inline void *get_parent(const char *devp)
+{
+	return dt_ops.get_parent ? dt_ops.get_parent(devp) : NULL;
+}
+
+static inline void *create_node(const void *parent, const char *name)
+{
+	return dt_ops.create_node ? dt_ops.create_node(parent, name) : NULL;
+}
+
+
+static inline void *find_node_by_prop_value(const void *prev,
+                                            const char *propname,
+                                            const char *propval, int proplen)
+{
+	if (dt_ops.find_node_by_prop_value)
+		return dt_ops.find_node_by_prop_value(prev, propname,
+		                                      propval, proplen);
+
+	return NULL;
+}
+
+static inline void *find_node_by_prop_value_str(const void *prev,
+                                                const char *propname,
+                                                const char *propval)
+{
+	return find_node_by_prop_value(prev, propname, propval,
+	                               strlen(propval) + 1);
+}
+
+static inline void *find_node_by_devtype(const void *prev,
+                                         const char *type)
+{
+	return find_node_by_prop_value_str(prev, "device_type", type);
+}
+
 static inline void *malloc(u32 size)
 {
 	return (platform_ops.malloc) ? platform_ops.malloc(size) : NULL;

commit ce3edb30ec2b6350c4258e3d52e73b410e2ea12d
Author: Scott Wood <scottwood@freescale.com>
Date:   Mon Mar 12 14:41:38 2007 -0600

    [POWERPC] bootwrapper: Add stddef.h to ops.h
    
    ops.h references NULL, so include stddef.h, so files including ops.h
    don't have to.
    
    Signed-off-by: Scott Wood <scottwood@freescale.com>
    Acked-by: Mark A. Greer <mgreer@mvista.com>
    Acked-by: David Gibson <david@gibson.dropbear.id.au>
    Signed-off-by: Paul Mackerras <paulus@samba.org>

diff --git a/arch/powerpc/boot/ops.h b/arch/powerpc/boot/ops.h
index cad4eee599fb..2b569ad984bd 100644
--- a/arch/powerpc/boot/ops.h
+++ b/arch/powerpc/boot/ops.h
@@ -11,6 +11,7 @@
 #ifndef _PPC_BOOT_OPS_H_
 #define _PPC_BOOT_OPS_H_
 
+#include <stddef.h>
 #include "types.h"
 
 #define	COMMAND_LINE_SIZE	512

commit cd197ffcf10bcc1a260efe5c09a3188fd9228c83
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Mon Mar 5 14:24:52 2007 +1100

    [POWERPC] zImage: Cleanup and improve zImage entry point
    
    This patch re-organises the way the zImage wrapper code is entered, to
    allow more flexibility on platforms with unusual entry conditions.
    After this patch, a platform .o file has two options:
    
    1) It can define a _zimage_start, in which case the platform code gets
       control from the very beginning of execution.  In this case the
       platform code is responsible for relocating the zImage if necessary,
       clearing the BSS, performing any platform specific initialization, and
       finally calling start() to load and enter the kernel.
    
    2) It can define platform_init().  In this case the generic crt0.S
       handles initial entry, and calls platform_init() before calling
       start().  The signature of platform_init() is changed, however, to
       take up to 5 parameters (in r3..r7) as they come from the platform's
       initial loader, instead of a fixed set of parameters based on OF's
       usage.
    
       When using the generic crt0.S, the platform .o can optionally
       supply a custom stack to use, using the BSS_STACK() macro.  If this
       is not supplied, the crt0.S will assume that the loader has
       supplied a usable stack.
    
    In either case, the platform code communicates information to the
    generic code (specifically, a PROM pointer for OF systems, and/or an
    initrd image address supplied by the bootloader) via a global
    structure "loader_info".
    
    In addition the wrapper script is rearranged to ensure that the
    platform .o is always linked first.  This means that platforms where
    the zImage entry point is at a fixed address or offset, rather than
    being encoded in the binary header can be supported using option (1).
    
    Signed-off-by: David Gibson <dwg@au1.ibm.com>
    Signed-off-by: Paul Mackerras <paulus@samba.org>

diff --git a/arch/powerpc/boot/ops.h b/arch/powerpc/boot/ops.h
index fa62ff223e70..cad4eee599fb 100644
--- a/arch/powerpc/boot/ops.h
+++ b/arch/powerpc/boot/ops.h
@@ -59,7 +59,13 @@ struct serial_console_data {
 	void		(*close)(void);
 };
 
-int platform_init(void *promptr, char *dt_blob_start, char *dt_blob_end);
+struct loader_info {
+	void *promptr;
+	unsigned long initrd_addr, initrd_size;
+};
+extern struct loader_info loader_info;
+
+void start(void *sp);
 int ft_init(void *dt_blob, unsigned int max_size, unsigned int max_find_device);
 int serial_console_init(void);
 int ns16550_console_init(void *devp, struct serial_console_data *scdp);
@@ -100,4 +106,8 @@ static inline void exit(void)
 	for(;;);
 }
 
+#define BSS_STACK(size) \
+	static char _bss_stack[size]; \
+	void *_platform_stack_top = _bss_stack + sizeof(_bss_stack);
+
 #endif /* _PPC_BOOT_OPS_H_ */

commit 79c8541924a220964f9f2cbed31eaa9fdb042eab
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Mon Mar 5 14:24:52 2007 +1100

    [POWERPC] zImage: Cleanup and improve prep_kernel()
    
    This patch rewrites prep_kernel() in the zImage wrapper code to be
    clearer and more flexible.  Notable changes:
    
            - Handling of the initrd image from prep_kernel() has moved
    into a new prep_initrd() function.
            - The address of the initrd image is now added as device tree
    properties, as the kernel expects.
            - We only copy a packaged initrd image to a new location if it
    is in danger of being clobbered when the kernel moves to its final
    location, instead of always.
            - By default we decompress the kernel directly to address 0,
    instead of requiring it to relocate itself.  Platforms (such as OF)
    where doing this could clobber still-live firmware data structures can
    override the vmlinux_alloc hook to provide an alternate place to
    decompress the kernel.
            - We no longer pass lots of information between functions in
    global variables.
    
    Signed-off-by: David Gibson <dwg@au1.ibm.com>
    Signed-off-by: Paul Mackerras <paulus@samba.org>

diff --git a/arch/powerpc/boot/ops.h b/arch/powerpc/boot/ops.h
index 8abb6516bb7c..fa62ff223e70 100644
--- a/arch/powerpc/boot/ops.h
+++ b/arch/powerpc/boot/ops.h
@@ -25,6 +25,7 @@ struct platform_ops {
 	void	(*free)(void *ptr);
 	void *	(*realloc)(void *ptr, unsigned long size);
 	void	(*exit)(void);
+	void *	(*vmlinux_alloc)(unsigned long size);
 };
 extern struct platform_ops platform_ops;
 

commit 35af89eb491a0741005e474626053266e6e635b7
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Tue Nov 21 11:37:37 2006 +1100

    [POWERPC] Cleanup zImage handling of kernel entry with flat device tree
    
    This makes 2 changes to clean up the flat device tree handling
    logic in the zImage wrapper.
    
    First, there were two callbacks from the dt_ops structure used for
    producing a final flat tree to pass to the kerne: dt_ops.ft_pack()
    which packed the flat tree (possibly a no-op) and dt_ops.ft_addr()
    which retreived the address of the final blob.  Since they were only
    ever called together, this patch combines the two into a single new
    callback, dt_ops.finalize().  This new callback does whatever
    platform-dependent things are necessary to produce a final flat device
    tree blob, and returns the blob's addres.
    
    Second, the current logic calls the kernel with a flat device tree if
    one is build into the zImage wrapper, otherwise it boots the kernel
    with a PROM pointer, expecting the kernel to copy the OF device tree
    itself.  This approach precludes the possibility of the platform
    wrapper code building a flat device tree from whatever
    platform-specific information firmware provides.  Thus, this patch
    takes the more sensible approach of invoking the kernel with a flat
    tree if the dt_ops.finalize callback provides one (by whatever means).
    
    So, the dt_ops.finalize callback can be NULL, or can be a function
    which returns NULL.  In either case, the zImage wrapper logic assumes
    that this is a platform with OF and invokes the kernel accordingly.
    
    Signed-off-by: David Gibson <dwg@au1.ibm.com>
    Signed-off-by: Paul Mackerras <paulus@samba.org>

diff --git a/arch/powerpc/boot/ops.h b/arch/powerpc/boot/ops.h
index 59832fb0f276..8abb6516bb7c 100644
--- a/arch/powerpc/boot/ops.h
+++ b/arch/powerpc/boot/ops.h
@@ -35,8 +35,7 @@ struct dt_ops {
 			const int buflen);
 	int	(*setprop)(const void *phandle, const char *name,
 			const void *buf, const int buflen);
-	void	(*ft_pack)(void);
-	unsigned long (*ft_addr)(void);
+	unsigned long (*finalize)(void);
 };
 extern struct dt_ops dt_ops;
 

commit c888554bf95a5a0a6ac3e2389c6bf1e03e9480ba
Author: Mark A. Greer <mgreer@mvista.com>
Date:   Mon Oct 16 13:49:27 2006 -0700

    [POWERPC] More bootwrapper reorganization
    
    More reorganization of the bootwrapper:
    - Add dtb section to zImage
    - ft_init now called by platform_init
    - Pack a flat dt before calling kernel
    - Remove size parameter from free
    - printf only calls console_ops.write it its not NULL
    - Some cleanup
    
    Signed-off-by: Mark A. Greer <mgreer@mvista.com>
    Signed-off-by: Paul Mackerras <paulus@samba.org>

diff --git a/arch/powerpc/boot/ops.h b/arch/powerpc/boot/ops.h
index 135eb4bb03b4..59832fb0f276 100644
--- a/arch/powerpc/boot/ops.h
+++ b/arch/powerpc/boot/ops.h
@@ -22,7 +22,8 @@ struct platform_ops {
 	void	(*fixups)(void);
 	void	(*image_hdr)(const void *);
 	void *	(*malloc)(u32 size);
-	void	(*free)(void *ptr, u32 size);
+	void	(*free)(void *ptr);
+	void *	(*realloc)(void *ptr, unsigned long size);
 	void	(*exit)(void);
 };
 extern struct platform_ops platform_ops;
@@ -30,12 +31,11 @@ extern struct platform_ops platform_ops;
 /* Device Tree operations */
 struct dt_ops {
 	void *	(*finddevice)(const char *name);
-	int	(*getprop)(const void *node, const char *name, void *buf,
+	int	(*getprop)(const void *phandle, const char *name, void *buf,
 			const int buflen);
-	int	(*setprop)(const void *node, const char *name,
+	int	(*setprop)(const void *phandle, const char *name,
 			const void *buf, const int buflen);
-	u64	(*translate_addr)(const char *path, const u32 *in_addr,
-			const u32 addr_len);
+	void	(*ft_pack)(void);
 	unsigned long (*ft_addr)(void);
 };
 extern struct dt_ops dt_ops;
@@ -59,10 +59,13 @@ struct serial_console_data {
 	void		(*close)(void);
 };
 
-extern int platform_init(void *promptr);
-extern void simple_alloc_init(void);
-extern void ft_init(void *dt_blob);
-extern int serial_console_init(void);
+int platform_init(void *promptr, char *dt_blob_start, char *dt_blob_end);
+int ft_init(void *dt_blob, unsigned int max_size, unsigned int max_find_device);
+int serial_console_init(void);
+int ns16550_console_init(void *devp, struct serial_console_data *scdp);
+void *simple_alloc_init(char *base, u32 heap_size, u32 granularity,
+		u32 max_allocs);
+
 
 static inline void *finddevice(const char *name)
 {
@@ -84,10 +87,10 @@ static inline void *malloc(u32 size)
 	return (platform_ops.malloc) ? platform_ops.malloc(size) : NULL;
 }
 
-static inline void free(void *ptr, u32 size)
+static inline void free(void *ptr)
 {
 	if (platform_ops.free)
-		platform_ops.free(ptr, size);
+		platform_ops.free(ptr);
 }
 
 static inline void exit(void)

commit b2c5f61920eeee9c4e78698de4fde4586fe5ae79
Author: Mark A. Greer <mgreer@mvista.com>
Date:   Tue Sep 19 14:05:08 2006 +1000

    [POWERPC] Start arch/powerpc/boot code reorganization
    
    This abstracts the operations used in the bootwrapper, and defines
    the operations needed for the bootwrapper to run on an OF platform.
    
    The operations have been divided up into platform ops (platform_ops),
    firmware ops (fw_ops), device tree ops (dt_ops), and console ops
    (console_ops).
    
    The proper operations will be hooked up at runtime to provide the
    functionality that you need.
    
    Signed-off-by: Mark A. Greer <mgreer@mvista.com>
    Signed-off-by: Paul Mackerras <paulus@samba.org>

diff --git a/arch/powerpc/boot/ops.h b/arch/powerpc/boot/ops.h
new file mode 100644
index 000000000000..135eb4bb03b4
--- /dev/null
+++ b/arch/powerpc/boot/ops.h
@@ -0,0 +1,100 @@
+/*
+ * Global definition of all the bootwrapper operations.
+ *
+ * Author: Mark A. Greer <mgreer@mvista.com>
+ *
+ * 2006 (c) MontaVista Software, Inc.  This file is licensed under
+ * the terms of the GNU General Public License version 2.  This program
+ * is licensed "as is" without any warranty of any kind, whether express
+ * or implied.
+ */
+#ifndef _PPC_BOOT_OPS_H_
+#define _PPC_BOOT_OPS_H_
+
+#include "types.h"
+
+#define	COMMAND_LINE_SIZE	512
+#define	MAX_PATH_LEN		256
+#define	MAX_PROP_LEN		256 /* What should this be? */
+
+/* Platform specific operations */
+struct platform_ops {
+	void	(*fixups)(void);
+	void	(*image_hdr)(const void *);
+	void *	(*malloc)(u32 size);
+	void	(*free)(void *ptr, u32 size);
+	void	(*exit)(void);
+};
+extern struct platform_ops platform_ops;
+
+/* Device Tree operations */
+struct dt_ops {
+	void *	(*finddevice)(const char *name);
+	int	(*getprop)(const void *node, const char *name, void *buf,
+			const int buflen);
+	int	(*setprop)(const void *node, const char *name,
+			const void *buf, const int buflen);
+	u64	(*translate_addr)(const char *path, const u32 *in_addr,
+			const u32 addr_len);
+	unsigned long (*ft_addr)(void);
+};
+extern struct dt_ops dt_ops;
+
+/* Console operations */
+struct console_ops {
+	int	(*open)(void);
+	void	(*write)(char *buf, int len);
+	void	(*edit_cmdline)(char *buf, int len);
+	void	(*close)(void);
+	void	*data;
+};
+extern struct console_ops console_ops;
+
+/* Serial console operations */
+struct serial_console_data {
+	int		(*open)(void);
+	void		(*putc)(unsigned char c);
+	unsigned char	(*getc)(void);
+	u8		(*tstc)(void);
+	void		(*close)(void);
+};
+
+extern int platform_init(void *promptr);
+extern void simple_alloc_init(void);
+extern void ft_init(void *dt_blob);
+extern int serial_console_init(void);
+
+static inline void *finddevice(const char *name)
+{
+	return (dt_ops.finddevice) ? dt_ops.finddevice(name) : NULL;
+}
+
+static inline int getprop(void *devp, const char *name, void *buf, int buflen)
+{
+	return (dt_ops.getprop) ? dt_ops.getprop(devp, name, buf, buflen) : -1;
+}
+
+static inline int setprop(void *devp, const char *name, void *buf, int buflen)
+{
+	return (dt_ops.setprop) ? dt_ops.setprop(devp, name, buf, buflen) : -1;
+}
+
+static inline void *malloc(u32 size)
+{
+	return (platform_ops.malloc) ? platform_ops.malloc(size) : NULL;
+}
+
+static inline void free(void *ptr, u32 size)
+{
+	if (platform_ops.free)
+		platform_ops.free(ptr, size);
+}
+
+static inline void exit(void)
+{
+	if (platform_ops.exit)
+		platform_ops.exit();
+	for(;;);
+}
+
+#endif /* _PPC_BOOT_OPS_H_ */
