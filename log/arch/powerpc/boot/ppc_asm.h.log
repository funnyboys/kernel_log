commit 2874c5fd284268364ece81a7bd936f3c8168e567
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Mon May 27 08:55:01 2019 +0200

    treewide: Replace GPLv2 boilerplate/reference with SPDX - rule 152
    
    Based on 1 normalized pattern(s):
    
      this program is free software you can redistribute it and or modify
      it under the terms of the gnu general public license as published by
      the free software foundation either version 2 of the license or at
      your option any later version
    
    extracted by the scancode license scanner the SPDX license identifier
    
      GPL-2.0-or-later
    
    has been chosen to replace the boilerplate/reference in 3029 file(s).
    
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Reviewed-by: Allison Randal <allison@lohutok.net>
    Cc: linux-spdx@vger.kernel.org
    Link: https://lkml.kernel.org/r/20190527070032.746973796@linutronix.de
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/arch/powerpc/boot/ppc_asm.h b/arch/powerpc/boot/ppc_asm.h
index c63299f9fdd9..192b97523b05 100644
--- a/arch/powerpc/boot/ppc_asm.h
+++ b/arch/powerpc/boot/ppc_asm.h
@@ -1,3 +1,4 @@
+/* SPDX-License-Identifier: GPL-2.0-or-later */
 #ifndef _PPC64_PPC_ASM_H
 #define _PPC64_PPC_ASM_H
 /*
@@ -5,11 +6,6 @@
  * Definitions used by various bits of low-level assembly code on PowerPC.
  *
  * Copyright (C) 1995-1999 Gary Thomas, Paul Mackerras, Cort Dougan.
- *
- *  This program is free software; you can redistribute it and/or
- *  modify it under the terms of the GNU General Public License
- *  as published by the Free Software Foundation; either version
- *  2 of the License, or (at your option) any later version.
  */
 
 /* Condition Register Bit Fields */

commit 72e4b2cdf07b4c43115f058ed74d694eab5d6454
Author: Christophe Leroy <christophe.leroy@c-s.fr>
Date:   Tue Aug 8 13:58:50 2017 +0200

    powerpc/time: refactor MFTB() to limit number of ifdefs
    
    The 8xx cannot access the TBL and TBU registers using mfspr/mtspr
    It must be accessed using mftb/mftbu
    
    Due to this, there is a number of places with #ifdef CONFIG_8xx
    
    This patch defines new macros MFTBL(x) and MFTBU(x) on the same model
    as MFTB(x) and tries to make use of them as much as possible.
    
    In arch/powerpc/include/asm/timex.h, we also remove the ifdef
    for the asm() operands as the compiler doesn't mind unused operands
    
    Signed-off-by: Christophe Leroy <christophe.leroy@c-s.fr>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>

diff --git a/arch/powerpc/boot/ppc_asm.h b/arch/powerpc/boot/ppc_asm.h
index 68e388ee94fe..c63299f9fdd9 100644
--- a/arch/powerpc/boot/ppc_asm.h
+++ b/arch/powerpc/boot/ppc_asm.h
@@ -80,4 +80,12 @@
 	.long 0xa6037b7d; /* mtsrr1 r11				*/ \
 	.long 0x2400004c  /* rfid				*/
 
+#ifdef CONFIG_PPC_8xx
+#define MFTBL(dest)			mftb dest
+#define MFTBU(dest)			mftbu dest
+#else
+#define MFTBL(dest)			mfspr dest, SPRN_TBRL
+#define MFTBU(dest)			mfspr dest, SPRN_TBRU
+#endif
+
 #endif /* _PPC64_PPC_ASM_H */

commit f1fe5252018075e18d7f0c0e23ee173546420361
Author: Nicholas Piggin <npiggin@gmail.com>
Date:   Mon May 1 22:01:09 2017 +1000

    powerpc/64s: Fix FIXUP_ENDIAN non-maskable interrupt reentrancy
    
    FIXUP_ENDIAN uses SRR[01] with MSR_RI=1, which gets corrupted if there
    is an interleaving system reset or machine check interrupt.
    
    Set MSR_RI=0 before setting SRRs. The rfid will restore MSR.
    
    Signed-off-by: Nicholas Piggin <npiggin@gmail.com>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>

diff --git a/arch/powerpc/boot/ppc_asm.h b/arch/powerpc/boot/ppc_asm.h
index b03373d8b386..68e388ee94fe 100644
--- a/arch/powerpc/boot/ppc_asm.h
+++ b/arch/powerpc/boot/ppc_asm.h
@@ -67,13 +67,15 @@
 #define MSR_LE		0x0000000000000001
 
 #define FIXUP_ENDIAN						   \
-	tdi   0, 0, 0x48; /* Reverse endian of b . + 8		*/ \
-	b     $+36;	  /* Skip trampoline if endian is good	*/ \
-	.long 0x05009f42; /* bcl 20,31,$+4			*/ \
-	.long 0xa602487d; /* mflr r10				*/ \
-	.long 0x1c004a39; /* addi r10,r10,28			*/ \
+	tdi   0,0,0x48;	  /* Reverse endian of b . + 8		*/ \
+	b     $+44;	  /* Skip trampoline if endian is good	*/ \
 	.long 0xa600607d; /* mfmsr r11				*/ \
 	.long 0x01006b69; /* xori r11,r11,1			*/ \
+	.long 0x00004039; /* li r10,0				*/ \
+	.long 0x6401417d; /* mtmsrd r10,1			*/ \
+	.long 0x05009f42; /* bcl 20,31,$+4			*/ \
+	.long 0xa602487d; /* mflr r10				*/ \
+	.long 0x14004a39; /* addi r10,r10,20			*/ \
 	.long 0xa6035a7d; /* mtsrr0 r10				*/ \
 	.long 0xa6037b7d; /* mtsrr1 r11				*/ \
 	.long 0x2400004c  /* rfid				*/

commit 656ad58ef19e2a763fa5c938b20ae0f6b8d67242
Author: Oliver O'Halloran <oohall@gmail.com>
Date:   Fri Jul 1 00:34:37 2016 +1000

    powerpc/boot: Add OPAL console to epapr wrappers
    
    This patch adds an OPAL console backend to the powerpc boot wrapper so
    that decompression failures inside the wrapper can be reported to the
    user. This is important since it typically indicates data corruption in
    the firmware and other nasty things.
    
    Currently this only works when building a little endian kernel. When
    compiling a 64 bit BE kernel the wrapper is always build 32 bit to be
    compatible with some 32 bit firmwares. BE support will be added at a
    later date. Another limitation of this is that only the "raw" type of
    OPAL console is supported, however machines that provide a hvsi console
    also provide a raw console so this is not an issue in practice.
    
    Actually-written-by: Benjamin Herrenschmidt <benh@kernel.crashing.org>
    Signed-off-by: Oliver O'Halloran <oohall@gmail.com>
    [mpe: Move #ifdef __powerpc64__ to avoid warnings on 32-bit]
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>

diff --git a/arch/powerpc/boot/ppc_asm.h b/arch/powerpc/boot/ppc_asm.h
index 35ea60c1f070..b03373d8b386 100644
--- a/arch/powerpc/boot/ppc_asm.h
+++ b/arch/powerpc/boot/ppc_asm.h
@@ -61,6 +61,10 @@
 
 #define SPRN_TBRL	268
 #define SPRN_TBRU	269
+#define SPRN_HSRR0	0x13A	/* Hypervisor Save/Restore 0 */
+#define SPRN_HSRR1	0x13B	/* Hypervisor Save/Restore 1 */
+
+#define MSR_LE		0x0000000000000001
 
 #define FIXUP_ENDIAN						   \
 	tdi   0, 0, 0x48; /* Reverse endian of b . + 8		*/ \

commit 147c05168fc86e824ccd1c0a02b40843e3cbca88
Author: Cédric Le Goater <clg@fr.ibm.com>
Date:   Thu Apr 24 09:23:39 2014 +0200

    powerpc/boot: Add support for 64bit little endian wrapper
    
    The code is only slightly modified : entry points now use the
    FIXUP_ENDIAN trampoline to switch endian order. The 32bit wrapper
    is kept for big endian kernels and 64bit is enforced for little
    endian kernels with a PPC64_BOOT_WRAPPER config option.
    
    The linker script is generated using the kernel preprocessor flags
    to make use of the CONFIG_* definitions and the wrapper script is
    modified to take into account the new elf64ppc format.
    
    Finally, the zImage file is compiled as a position independent
    executable (-pie) which makes it loadable at any address by the
    firmware.
    
    Signed-off-by: Cédric Le Goater <clg@fr.ibm.com>
    Signed-off-by: Benjamin Herrenschmidt <benh@kernel.crashing.org>

diff --git a/arch/powerpc/boot/ppc_asm.h b/arch/powerpc/boot/ppc_asm.h
index eb0e98be69e0..35ea60c1f070 100644
--- a/arch/powerpc/boot/ppc_asm.h
+++ b/arch/powerpc/boot/ppc_asm.h
@@ -62,4 +62,16 @@
 #define SPRN_TBRL	268
 #define SPRN_TBRU	269
 
+#define FIXUP_ENDIAN						   \
+	tdi   0, 0, 0x48; /* Reverse endian of b . + 8		*/ \
+	b     $+36;	  /* Skip trampoline if endian is good	*/ \
+	.long 0x05009f42; /* bcl 20,31,$+4			*/ \
+	.long 0xa602487d; /* mflr r10				*/ \
+	.long 0x1c004a39; /* addi r10,r10,28			*/ \
+	.long 0xa600607d; /* mfmsr r11				*/ \
+	.long 0x01006b69; /* xori r11,r11,1			*/ \
+	.long 0xa6035a7d; /* mtsrr0 r10				*/ \
+	.long 0xa6037b7d; /* mtsrr1 r11				*/ \
+	.long 0x2400004c  /* rfid				*/
+
 #endif /* _PPC64_PPC_ASM_H */

commit beb2dc0a7a84be003ce54e98b95d65cc66e6e536
Author: Scott Wood <scottwood@freescale.com>
Date:   Tue Aug 20 19:33:12 2013 -0500

    powerpc: Convert some mftb/mftbu into mfspr
    
    Some CPUs (such as e500v1/v2) don't implement mftb and will take a
    trap.  mfspr should work on everything that has a timebase, and is the
    preferred instruction according to ISA v2.06.
    
    Currently we get away with mftb on 85xx because the assembler converts
    it to mfspr due to -Wa,-me500.  However, that flag has other effects
    that are undesireable for certain targets (e.g.  lwsync is converted to
    sync), and is hostile to multiplatform kernels.  Thus we would like to
    stop setting it for all e500-family builds.
    
    mftb/mftbu instances which are in 85xx code or common code are
    converted.  Instances which will never run on 85xx are left alone.
    
    Signed-off-by: Scott Wood <scottwood@freescale.com>

diff --git a/arch/powerpc/boot/ppc_asm.h b/arch/powerpc/boot/ppc_asm.h
index 1c2c2817f9b7..eb0e98be69e0 100644
--- a/arch/powerpc/boot/ppc_asm.h
+++ b/arch/powerpc/boot/ppc_asm.h
@@ -59,4 +59,7 @@
 #define	r30	30
 #define	r31	31
 
+#define SPRN_TBRL	268
+#define SPRN_TBRU	269
+
 #endif /* _PPC64_PPC_ASM_H */

commit 94b212c29f685ca54b5689a8e89ac7671c43d651
Author: Paul Mackerras <paulus@samba.org>
Date:   Wed Nov 16 13:38:21 2005 +1100

    powerpc: Move ppc64 boot wrapper code over to arch/powerpc
    
    This also extends the code to handle 32-bit ELF vmlinux files as well
    as 64-bit ones.  This is sufficient for booting on new-world 32-bit
    powermacs (i.e. all recent machines).
    
    Signed-off-by: Paul Mackerras <paulus@samba.org>

diff --git a/arch/powerpc/boot/ppc_asm.h b/arch/powerpc/boot/ppc_asm.h
new file mode 100644
index 000000000000..1c2c2817f9b7
--- /dev/null
+++ b/arch/powerpc/boot/ppc_asm.h
@@ -0,0 +1,62 @@
+#ifndef _PPC64_PPC_ASM_H
+#define _PPC64_PPC_ASM_H
+/*
+ *
+ * Definitions used by various bits of low-level assembly code on PowerPC.
+ *
+ * Copyright (C) 1995-1999 Gary Thomas, Paul Mackerras, Cort Dougan.
+ *
+ *  This program is free software; you can redistribute it and/or
+ *  modify it under the terms of the GNU General Public License
+ *  as published by the Free Software Foundation; either version
+ *  2 of the License, or (at your option) any later version.
+ */
+
+/* Condition Register Bit Fields */
+
+#define	cr0	0
+#define	cr1	1
+#define	cr2	2
+#define	cr3	3
+#define	cr4	4
+#define	cr5	5
+#define	cr6	6
+#define	cr7	7
+
+
+/* General Purpose Registers (GPRs) */
+
+#define	r0	0
+#define	r1	1
+#define	r2	2
+#define	r3	3
+#define	r4	4
+#define	r5	5
+#define	r6	6
+#define	r7	7
+#define	r8	8
+#define	r9	9
+#define	r10	10
+#define	r11	11
+#define	r12	12
+#define	r13	13
+#define	r14	14
+#define	r15	15
+#define	r16	16
+#define	r17	17
+#define	r18	18
+#define	r19	19
+#define	r20	20
+#define	r21	21
+#define	r22	22
+#define	r23	23
+#define	r24	24
+#define	r25	25
+#define	r26	26
+#define	r27	27
+#define	r28	28
+#define	r29	29
+#define	r30	30
+#define	r31	31
+
+#endif /* _PPC64_PPC_ASM_H */
