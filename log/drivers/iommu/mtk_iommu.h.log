commit 1f4fd6248139b5406bb9cf1dde25dbec05f6c57e
Author: Yong Wu <yong.wu@mediatek.com>
Date:   Mon Nov 4 15:01:06 2019 +0800

    iommu/mediatek: Move the tlb_sync into tlb_flush
    
    Right now, the tlb_add_flush_nosync and tlb_sync always appear together.
    we merge the two functions into one(also move the tlb_lock into the new
    function). No functional change.
    
    Signed-off-by: Chao Hao <chao.hao@mediatek.com>
    Signed-off-by: Yong Wu <yong.wu@mediatek.com>
    Signed-off-by: Joerg Roedel <jroedel@suse.de>

diff --git a/drivers/iommu/mtk_iommu.h b/drivers/iommu/mtk_iommu.h
index 8cae22de7663..ea949a324e33 100644
--- a/drivers/iommu/mtk_iommu.h
+++ b/drivers/iommu/mtk_iommu.h
@@ -57,7 +57,6 @@ struct mtk_iommu_data {
 	struct mtk_iommu_domain		*m4u_dom;
 	struct iommu_group		*m4u_group;
 	bool                            enable_4GB;
-	bool				tlb_flush_active;
 	spinlock_t			tlb_lock; /* lock for tlb range flush */
 
 	struct iommu_device		iommu;

commit da3cc91b8db403728cde03c8a95cba268d8cbf1b
Author: Yong Wu <yong.wu@mediatek.com>
Date:   Mon Nov 4 15:01:03 2019 +0800

    iommu/mediatek: Add a new tlb_lock for tlb_flush
    
    The commit 4d689b619445 ("iommu/io-pgtable-arm-v7s: Convert to IOMMU API
    TLB sync") help move the tlb_sync of unmap from v7s into the iommu
    framework. It helps add a new function "mtk_iommu_iotlb_sync", But it
    lacked the lock, then it will cause the variable "tlb_flush_active"
    may be changed unexpectedly, we could see this warning log randomly:
    
    mtk-iommu 10205000.iommu: Partial TLB flush timed out, falling back to
    full flush
    
    The HW requires tlb_flush/tlb_sync in pairs strictly, this patch adds
    a new tlb_lock for tlb operations to fix this issue.
    
    Fixes: 4d689b619445 ("iommu/io-pgtable-arm-v7s: Convert to IOMMU API TLB sync")
    Signed-off-by: Yong Wu <yong.wu@mediatek.com>
    Signed-off-by: Joerg Roedel <jroedel@suse.de>

diff --git a/drivers/iommu/mtk_iommu.h b/drivers/iommu/mtk_iommu.h
index fc0f16eabacd..8cae22de7663 100644
--- a/drivers/iommu/mtk_iommu.h
+++ b/drivers/iommu/mtk_iommu.h
@@ -58,6 +58,7 @@ struct mtk_iommu_data {
 	struct iommu_group		*m4u_group;
 	bool                            enable_4GB;
 	bool				tlb_flush_active;
+	spinlock_t			tlb_lock; /* lock for tlb range flush */
 
 	struct iommu_device		iommu;
 	const struct mtk_iommu_plat_data *plat_data;

commit 1ee9feb2c9f893b893c900d2492c6a01dca680f3
Author: Yong Wu <yong.wu@mediatek.com>
Date:   Sat Aug 24 11:02:08 2019 +0800

    iommu/mediatek: Clean up struct mtk_smi_iommu
    
    Remove the "struct mtk_smi_iommu" to simplify the code since it has only
    one item in it right now.
    
    Signed-off-by: Yong Wu <yong.wu@mediatek.com>
    Reviewed-by: Matthias Brugger <matthias.bgg@gmail.com>
    Signed-off-by: Joerg Roedel <jroedel@suse.de>

diff --git a/drivers/iommu/mtk_iommu.h b/drivers/iommu/mtk_iommu.h
index 56b579c5a088..fc0f16eabacd 100644
--- a/drivers/iommu/mtk_iommu.h
+++ b/drivers/iommu/mtk_iommu.h
@@ -56,7 +56,6 @@ struct mtk_iommu_data {
 	struct mtk_iommu_suspend_reg	reg;
 	struct mtk_iommu_domain		*m4u_dom;
 	struct iommu_group		*m4u_group;
-	struct mtk_smi_iommu		smi_imu;      /* SMI larb iommu info */
 	bool                            enable_4GB;
 	bool				tlb_flush_active;
 
@@ -64,6 +63,7 @@ struct mtk_iommu_data {
 	const struct mtk_iommu_plat_data *plat_data;
 
 	struct list_head		list;
+	struct mtk_smi_larb_iommu	larb_imu[MTK_LARB_NR_MAX];
 };
 
 static inline int compare_of(struct device *dev, void *data)
@@ -80,14 +80,14 @@ static inline int mtk_iommu_bind(struct device *dev)
 {
 	struct mtk_iommu_data *data = dev_get_drvdata(dev);
 
-	return component_bind_all(dev, &data->smi_imu);
+	return component_bind_all(dev, &data->larb_imu);
 }
 
 static inline void mtk_iommu_unbind(struct device *dev)
 {
 	struct mtk_iommu_data *data = dev_get_drvdata(dev);
 
-	component_unbind_all(dev, &data->smi_imu);
+	component_unbind_all(dev, &data->larb_imu);
 }
 
 #endif

commit b9475b3471f81a60a727886230b0903be72dc96d
Author: Yong Wu <yong.wu@mediatek.com>
Date:   Sat Aug 24 11:02:06 2019 +0800

    iommu/mediatek: Fix VLD_PA_RNG register backup when suspend
    
    The register VLD_PA_RNG(0x118) was forgot to backup while adding 4GB
    mode support for mt2712. this patch add it.
    
    Fixes: 30e2fccf9512 ("iommu/mediatek: Enlarge the validate PA range
    for 4GB mode")
    Signed-off-by: Yong Wu <yong.wu@mediatek.com>
    Reviewed-by: Evan Green <evgreen@chromium.org>
    Reviewed-by: Matthias Brugger <matthias.bgg@gmail.com>
    Signed-off-by: Joerg Roedel <jroedel@suse.de>

diff --git a/drivers/iommu/mtk_iommu.h b/drivers/iommu/mtk_iommu.h
index 6b1f833696a6..56b579c5a088 100644
--- a/drivers/iommu/mtk_iommu.h
+++ b/drivers/iommu/mtk_iommu.h
@@ -24,6 +24,7 @@ struct mtk_iommu_suspend_reg {
 	u32				int_control0;
 	u32				int_main_control;
 	u32				ivrp_paddr;
+	u32				vld_pa_rng;
 };
 
 enum mtk_iommu_plat {

commit 907ba6a195991adb2a3edf4aff0d8dbb308d4d97
Author: Yong Wu <yong.wu@mediatek.com>
Date:   Sat Aug 24 11:02:02 2019 +0800

    iommu/mediatek: Add mt8183 IOMMU support
    
    The M4U IP blocks in mt8183 is MediaTek's generation2 M4U which use
    the ARM Short-descriptor like mt8173, and most of the HW registers
    are the same.
    
    Here list main differences between mt8183 and mt8173/mt2712:
    1) mt8183 has only one M4U HW like mt8173 while mt2712 has two.
    2) mt8183 don't have the "bclk" clock, it use the EMI clock instead.
    3) mt8183 can support the dram over 4GB, but it doesn't call this "4GB
    mode".
    4) mt8183 pgtable base register(0x0) extend bit[1:0] which represent
    the bit[33:32] in the physical address of the pgtable base, But the
    standard ttbr0[1] means the S bit which is enabled defaultly, Hence,
    we add a mask.
    5) mt8183 HW has a GALS modules, SMI should enable "has_gals" support.
    6) mt8183 need reset_axi like mt8173.
    7) the larb-id in smi-common is remapped. M4U should add its larbid_remap.
    
    Signed-off-by: Yong Wu <yong.wu@mediatek.com>
    Reviewed-by: Evan Green <evgreen@chromium.org>
    Reviewed-by: Matthias Brugger <matthias.bgg@gmail.com>
    Signed-off-by: Joerg Roedel <jroedel@suse.de>

diff --git a/drivers/iommu/mtk_iommu.h b/drivers/iommu/mtk_iommu.h
index 973d6e077e43..6b1f833696a6 100644
--- a/drivers/iommu/mtk_iommu.h
+++ b/drivers/iommu/mtk_iommu.h
@@ -30,6 +30,7 @@ enum mtk_iommu_plat {
 	M4U_MT2701,
 	M4U_MT2712,
 	M4U_MT8173,
+	M4U_MT8183,
 };
 
 struct mtk_iommu_plat_data {

commit 2b326d8b1d2b443c3dad96f54c6b279559f87751
Author: Yong Wu <yong.wu@mediatek.com>
Date:   Sat Aug 24 11:02:00 2019 +0800

    iommu/mediatek: Move vld_pa_rng into plat_data
    
    Both mt8173 and mt8183 don't have this vld_pa_rng(valid physical address
    range) register while mt2712 have. Move it into the plat_data.
    
    Signed-off-by: Yong Wu <yong.wu@mediatek.com>
    Reviewed-by: Evan Green <evgreen@chromium.org>
    Reviewed-by: Matthias Brugger <matthias.bgg@gmail.com>
    Signed-off-by: Joerg Roedel <jroedel@suse.de>

diff --git a/drivers/iommu/mtk_iommu.h b/drivers/iommu/mtk_iommu.h
index 8d3b525b8752..973d6e077e43 100644
--- a/drivers/iommu/mtk_iommu.h
+++ b/drivers/iommu/mtk_iommu.h
@@ -38,6 +38,7 @@ struct mtk_iommu_plat_data {
 
 	/* HW will use the EMI clock if there isn't the "bclk". */
 	bool                has_bclk;
+	bool                has_vld_pa_rng;
 	bool                reset_axi;
 	unsigned char       larbid_remap[MTK_LARB_NR_MAX];
 };

commit 50822b0b948fabfc8bcee9a89d031c276b135506
Author: Yong Wu <yong.wu@mediatek.com>
Date:   Sat Aug 24 11:01:59 2019 +0800

    iommu/mediatek: Move reset_axi into plat_data
    
    In mt8173 and mt8183, 0x48 is REG_MMU_STANDARD_AXI_MODE while it is
    REG_MMU_CTRL in the other SoCs, and the bits meaning is completely
    different with the REG_MMU_STANDARD_AXI_MODE.
    
    This patch moves this property to plat_data, it's also a preparing
    patch for mt8183.
    
    Signed-off-by: Yong Wu <yong.wu@mediatek.com>
    Reviewed-by: Nicolas Boichat <drinkcat@chromium.org>
    Reviewed-by: Evan Green <evgreen@chromium.org>
    Reviewed-by: Matthias Brugger <matthias.bgg@gmail.com>
    Signed-off-by: Joerg Roedel <jroedel@suse.de>

diff --git a/drivers/iommu/mtk_iommu.h b/drivers/iommu/mtk_iommu.h
index d1a1d8887a0e..8d3b525b8752 100644
--- a/drivers/iommu/mtk_iommu.h
+++ b/drivers/iommu/mtk_iommu.h
@@ -38,7 +38,7 @@ struct mtk_iommu_plat_data {
 
 	/* HW will use the EMI clock if there isn't the "bclk". */
 	bool                has_bclk;
-
+	bool                reset_axi;
 	unsigned char       larbid_remap[MTK_LARB_NR_MAX];
 };
 

commit b3e5eee76548f621bb1c3e9dab4a4ff98bebf0de
Author: Yong Wu <yong.wu@mediatek.com>
Date:   Sat Aug 24 11:01:57 2019 +0800

    iommu/mediatek: Add larb-id remapped support
    
    The larb-id may be remapped in the smi-common, this means the
    larb-id reported in the mtk_iommu_isr isn't the real larb-id,
    
    Take mt8183 as a example:
                           M4U
                            |
    ---------------------------------------------
    |               SMI common                  |
    -0-----7-----5-----6-----1-----2------3-----4- <- Id remapped
     |     |     |     |     |     |      |     |
    larb0 larb1 IPU0  IPU1 larb4 larb5  larb6  CCU
    disp  vdec  img   cam   venc  img    cam
    As above, larb0 connects with the id 0 in smi-common.
              larb1 connects with the id 7 in smi-common.
              ...
    If the larb-id reported in the isr is 7, actually it's larb1(vdec).
    In order to output the right larb-id in the isr, we add a larb-id
    remapping relationship in this patch.
    
    If there is no this larb-id remapping in some SoCs, use the linear
    mapping array instead.
    
    This also is a preparing patch for mt8183.
    
    Signed-off-by: Yong Wu <yong.wu@mediatek.com>
    Reviewed-by: Nicolas Boichat <drinkcat@chromium.org>
    Reviewed-by: Evan Green <evgreen@chromium.org>
    Reviewed-by: Matthias Brugger <matthias.bgg@gmail.com>
    
    Signed-off-by: Joerg Roedel <jroedel@suse.de>

diff --git a/drivers/iommu/mtk_iommu.h b/drivers/iommu/mtk_iommu.h
index 821172bd6c52..d1a1d8887a0e 100644
--- a/drivers/iommu/mtk_iommu.h
+++ b/drivers/iommu/mtk_iommu.h
@@ -38,6 +38,8 @@ struct mtk_iommu_plat_data {
 
 	/* HW will use the EMI clock if there isn't the "bclk". */
 	bool                has_bclk;
+
+	unsigned char       larbid_remap[MTK_LARB_NR_MAX];
 };
 
 struct mtk_iommu_domain;

commit 2aa4c2597cd67139697eb3095d5b6d61074c7ffc
Author: Yong Wu <yong.wu@mediatek.com>
Date:   Sat Aug 24 11:01:56 2019 +0800

    iommu/mediatek: Add bclk can be supported optionally
    
    In some SoCs, M4U doesn't have its "bclk", it will use the EMI
    clock instead which has always been enabled when entering kernel.
    
    Currently mt2712 and mt8173 have this bclk while mt8183 doesn't.
    
    This also is a preparing patch for mt8183.
    
    Signed-off-by: Yong Wu <yong.wu@mediatek.com>
    Reviewed-by: Evan Green <evgreen@chromium.org>
    Reviewed-by: Matthias Brugger <matthias.bgg@gmail.com>
    Signed-off-by: Joerg Roedel <jroedel@suse.de>

diff --git a/drivers/iommu/mtk_iommu.h b/drivers/iommu/mtk_iommu.h
index c281c01b2d5b..821172bd6c52 100644
--- a/drivers/iommu/mtk_iommu.h
+++ b/drivers/iommu/mtk_iommu.h
@@ -35,6 +35,9 @@ enum mtk_iommu_plat {
 struct mtk_iommu_plat_data {
 	enum mtk_iommu_plat m4u_plat;
 	bool                has_4gb_mode;
+
+	/* HW will use the EMI clock if there isn't the "bclk". */
+	bool                has_bclk;
 };
 
 struct mtk_iommu_domain;

commit b4dad40e4f35bbf2393f35f4492acf799eb8136d
Author: Yong Wu <yong.wu@mediatek.com>
Date:   Sat Aug 24 11:01:55 2019 +0800

    iommu/mediatek: Adjust the PA for the 4GB Mode
    
    After extending the v7s support PA[33:32] for MediaTek, we have to adjust
    the PA ourself for the 4GB mode.
    
    In the 4GB Mode, the PA will remap like this:
    CPU PA         ->    M4U output PA
    0x4000_0000          0x1_4000_0000 (Add bit32)
    0x8000_0000          0x1_8000_0000 ...
    0xc000_0000          0x1_c000_0000 ...
    0x1_0000_0000        0x1_0000_0000 (No change)
    
    1) Always add bit32 for CPU PA in ->map.
    2) Discard the bit32 in iova_to_phys if PA > 0x1_4000_0000 since the
    iommu consumer always use the CPU PA.
    
    Besides, the "oas" always is set to 34 since v7s has already supported our
    case.
    
    Both mt2712 and mt8173 support this "4GB mode" while the mt8183 don't.
    The PA in mt8183 won't remap.
    
    Signed-off-by: Yong Wu <yong.wu@mediatek.com>
    Signed-off-by: Joerg Roedel <jroedel@suse.de>

diff --git a/drivers/iommu/mtk_iommu.h b/drivers/iommu/mtk_iommu.h
index 9725b083c62f..c281c01b2d5b 100644
--- a/drivers/iommu/mtk_iommu.h
+++ b/drivers/iommu/mtk_iommu.h
@@ -34,6 +34,7 @@ enum mtk_iommu_plat {
 
 struct mtk_iommu_plat_data {
 	enum mtk_iommu_plat m4u_plat;
+	bool                has_4gb_mode;
 };
 
 struct mtk_iommu_domain;

commit cecdce9d7eed33ce24da8dd4a2151b68d5c17865
Author: Yong Wu <yong.wu@mediatek.com>
Date:   Sat Aug 24 11:01:47 2019 +0800

    iommu/mediatek: Use a struct as the platform data
    
    Use a struct as the platform special data instead of the enumeration.
    This is a prepare patch for adding mt8183 iommu support.
    
    Signed-off-by: Yong Wu <yong.wu@mediatek.com>
    Reviewed-by: Matthias Brugger <matthias.bgg@gmail.com>
    Reviewed-by: Evan Green <evgreen@chromium.org>
    Signed-off-by: Joerg Roedel <jroedel@suse.de>

diff --git a/drivers/iommu/mtk_iommu.h b/drivers/iommu/mtk_iommu.h
index 59337323db58..9725b083c62f 100644
--- a/drivers/iommu/mtk_iommu.h
+++ b/drivers/iommu/mtk_iommu.h
@@ -32,6 +32,10 @@ enum mtk_iommu_plat {
 	M4U_MT8173,
 };
 
+struct mtk_iommu_plat_data {
+	enum mtk_iommu_plat m4u_plat;
+};
+
 struct mtk_iommu_domain;
 
 struct mtk_iommu_data {
@@ -48,7 +52,7 @@ struct mtk_iommu_data {
 	bool				tlb_flush_active;
 
 	struct iommu_device		iommu;
-	enum mtk_iommu_plat		m4u_plat;
+	const struct mtk_iommu_plat_data *plat_data;
 
 	struct list_head		list;
 };

commit 1802d0beecafe581ad584634ba92f8a471d8a63a
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Mon May 27 08:55:21 2019 +0200

    treewide: Replace GPLv2 boilerplate/reference with SPDX - rule 174
    
    Based on 1 normalized pattern(s):
    
      this program is free software you can redistribute it and or modify
      it under the terms of the gnu general public license version 2 as
      published by the free software foundation this program is
      distributed in the hope that it will be useful but without any
      warranty without even the implied warranty of merchantability or
      fitness for a particular purpose see the gnu general public license
      for more details
    
    extracted by the scancode license scanner the SPDX license identifier
    
      GPL-2.0-only
    
    has been chosen to replace the boilerplate/reference in 655 file(s).
    
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Reviewed-by: Allison Randal <allison@lohutok.net>
    Reviewed-by: Kate Stewart <kstewart@linuxfoundation.org>
    Reviewed-by: Richard Fontana <rfontana@redhat.com>
    Cc: linux-spdx@vger.kernel.org
    Link: https://lkml.kernel.org/r/20190527070034.575739538@linutronix.de
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/iommu/mtk_iommu.h b/drivers/iommu/mtk_iommu.h
index 62c2c3e8c5df..59337323db58 100644
--- a/drivers/iommu/mtk_iommu.h
+++ b/drivers/iommu/mtk_iommu.h
@@ -1,15 +1,7 @@
+/* SPDX-License-Identifier: GPL-2.0-only */
 /*
  * Copyright (c) 2015-2016 MediaTek Inc.
  * Author: Honghui Zhang <honghui.zhang@mediatek.com>
- *
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License version 2 as
- * published by the Free Software Foundation.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
  */
 
 #ifndef _MTK_IOMMU_H_

commit b77cf11f094136a9d7d0ee6a56cf49db1f412871
Author: Rob Herring <robh@kernel.org>
Date:   Tue Feb 5 10:37:31 2019 -0600

    iommu: Allow io-pgtable to be used outside of drivers/iommu/
    
    Move io-pgtable.h to include/linux/ and export alloc_io_pgtable_ops
    and free_io_pgtable_ops. This enables drivers outside drivers/iommu/ to
    use the page table library. Specifically, some ARM Mali GPUs use the
    ARM page table formats.
    
    Cc: Will Deacon <will.deacon@arm.com>
    Cc: Robin Murphy <robin.murphy@arm.com>
    Cc: Joerg Roedel <joro@8bytes.org>
    Cc: Matthias Brugger <matthias.bgg@gmail.com>
    Cc: Rob Clark <robdclark@gmail.com>
    Cc: linux-arm-kernel@lists.infradead.org
    Cc: iommu@lists.linux-foundation.org
    Cc: linux-mediatek@lists.infradead.org
    Cc: linux-arm-msm@vger.kernel.org
    Signed-off-by: Rob Herring <robh@kernel.org>
    Signed-off-by: Joerg Roedel <jroedel@suse.de>

diff --git a/drivers/iommu/mtk_iommu.h b/drivers/iommu/mtk_iommu.h
index 778498b8633f..62c2c3e8c5df 100644
--- a/drivers/iommu/mtk_iommu.h
+++ b/drivers/iommu/mtk_iommu.h
@@ -19,13 +19,12 @@
 #include <linux/component.h>
 #include <linux/device.h>
 #include <linux/io.h>
+#include <linux/io-pgtable.h>
 #include <linux/iommu.h>
 #include <linux/list.h>
 #include <linux/spinlock.h>
 #include <soc/mediatek/smi.h>
 
-#include "io-pgtable.h"
-
 struct mtk_iommu_suspend_reg {
 	u32				standard_axi_mode;
 	u32				dcm_dis;

commit 70ca608b2ec6dafa6bb1c2b0691852fc78f8f717
Author: Yong Wu <yong.wu@mediatek.com>
Date:   Sun Mar 18 09:52:54 2018 +0800

    iommu/mediatek: Fix protect memory setting
    
    In MediaTek's IOMMU design, When a iommu translation fault occurs
    (HW can NOT translate the destination address to a valid physical
    address), the IOMMU HW output the dirty data into a special memory
    to avoid corrupting the main memory, this is called "protect memory".
    the register(0x114) for protect memory is a little different between
    mt8173 and mt2712.
    
    In the mt8173, bit[30:6] in the register represents [31:7] of the
    physical address. In the 4GB mode, the register bit[31] should be 1.
    While in the mt2712, the bits don't shift. bit[31:7] in the register
    represents [31:7] in the physical address, and bit[1:0] in the
    register represents bit[33:32] of the physical address if it has.
    
    Fixes: e6dec9230862 ("iommu/mediatek: Add mt2712 IOMMU support")
    Reported-by: Honghui Zhang <honghui.zhang@mediatek.com>
    Signed-off-by: Yong Wu <yong.wu@mediatek.com>
    Signed-off-by: Joerg Roedel <jroedel@suse.de>

diff --git a/drivers/iommu/mtk_iommu.h b/drivers/iommu/mtk_iommu.h
index b4451a1c7c2f..778498b8633f 100644
--- a/drivers/iommu/mtk_iommu.h
+++ b/drivers/iommu/mtk_iommu.h
@@ -32,6 +32,7 @@ struct mtk_iommu_suspend_reg {
 	u32				ctrl_reg;
 	u32				int_control0;
 	u32				int_main_control;
+	u32				ivrp_paddr;
 };
 
 enum mtk_iommu_plat {

commit 7c3a2ec02806a6f83270f34f8ab4e501e7d8ea69
Author: Yong Wu <yong.wu@mediatek.com>
Date:   Mon Aug 21 19:00:17 2017 +0800

    iommu/mediatek: Merge 2 M4U HWs into one iommu domain
    
    In theory, If there are 2 M4U HWs, there should be 2 IOMMU domains.
    But one IOMMU domain(4GB iova range) is enough for us currently,
    It's unnecessary to maintain 2 pagetables.
    
    Besides, This patch can simplify our consumer code largely. They don't
    need map a iova range from one domain into another, They can share the
    iova address easily.
    
    Signed-off-by: Yong Wu <yong.wu@mediatek.com>
    Signed-off-by: Joerg Roedel <jroedel@suse.de>

diff --git a/drivers/iommu/mtk_iommu.h b/drivers/iommu/mtk_iommu.h
index 462e593b7d71..b4451a1c7c2f 100644
--- a/drivers/iommu/mtk_iommu.h
+++ b/drivers/iommu/mtk_iommu.h
@@ -57,6 +57,8 @@ struct mtk_iommu_data {
 
 	struct iommu_device		iommu;
 	enum mtk_iommu_plat		m4u_plat;
+
+	struct list_head		list;
 };
 
 static inline int compare_of(struct device *dev, void *data)

commit e6dec92308628cff5f1f8bd1bcdf87581c9dc676
Author: Yong Wu <yong.wu@mediatek.com>
Date:   Mon Aug 21 19:00:16 2017 +0800

    iommu/mediatek: Add mt2712 IOMMU support
    
    The M4U IP blocks in mt2712 is MTK's generation2 M4U which use the
    ARM Short-descriptor like mt8173, and most of the HW registers are
    the same.
    
    The difference is that there are 2 M4U HWs in mt2712 while there's
    only one in mt8173. The purpose of 2 M4U HWs is for balance the
    bandwidth.
    
    Normally if there are 2 M4U HWs, there should be 2 iommu domains,
    each M4U has a iommu domain.
    
    Signed-off-by: Yong Wu <yong.wu@mediatek.com>
    Signed-off-by: Joerg Roedel <jroedel@suse.de>

diff --git a/drivers/iommu/mtk_iommu.h b/drivers/iommu/mtk_iommu.h
index c06cc91b5d9a..462e593b7d71 100644
--- a/drivers/iommu/mtk_iommu.h
+++ b/drivers/iommu/mtk_iommu.h
@@ -34,6 +34,12 @@ struct mtk_iommu_suspend_reg {
 	u32				int_main_control;
 };
 
+enum mtk_iommu_plat {
+	M4U_MT2701,
+	M4U_MT2712,
+	M4U_MT8173,
+};
+
 struct mtk_iommu_domain;
 
 struct mtk_iommu_data {
@@ -50,6 +56,7 @@ struct mtk_iommu_data {
 	bool				tlb_flush_active;
 
 	struct iommu_device		iommu;
+	enum mtk_iommu_plat		m4u_plat;
 };
 
 static inline int compare_of(struct device *dev, void *data)

commit 98a8f63e56a0bdcf1d0af8d840d011ab90386684
Author: Robin Murphy <robin.murphy@arm.com>
Date:   Thu Jul 6 17:55:30 2017 +0100

    iommu/mtk: Avoid redundant TLB syncs locally
    
    Under certain circumstances, the io-pgtable code may end up issuing two
    TLB sync operations without any intervening invalidations. This goes
    badly for the M4U hardware, since it means the second sync ends up
    polling for a non-existent operation to finish, and as a result times
    out and warns. The io_pgtable_tlb_* helpers implement a high-level
    optimisation to avoid issuing the second sync at all in such cases, but
    in order to work correctly that requires all pagetable operations to be
    serialised under a lock, thus is no longer applicable to all io-pgtable
    users.
    
    Since we're the only user actually relying on this flag for correctness,
    let's reimplement it locally to avoid the headache of trying to make the
    high-level version concurrency-safe for other users.
    
    CC: Yong Wu <yong.wu@mediatek.com>
    CC: Matthias Brugger <matthias.bgg@gmail.com>
    Tested-by: Yong Wu <yong.wu@mediatek.com>
    Signed-off-by: Robin Murphy <robin.murphy@arm.com>
    Signed-off-by: Will Deacon <will.deacon@arm.com>

diff --git a/drivers/iommu/mtk_iommu.h b/drivers/iommu/mtk_iommu.h
index 2a28eadeea0e..c06cc91b5d9a 100644
--- a/drivers/iommu/mtk_iommu.h
+++ b/drivers/iommu/mtk_iommu.h
@@ -47,6 +47,7 @@ struct mtk_iommu_data {
 	struct iommu_group		*m4u_group;
 	struct mtk_smi_iommu		smi_imu;      /* SMI larb iommu info */
 	bool                            enable_4GB;
+	bool				tlb_flush_active;
 
 	struct iommu_device		iommu;
 };

commit b16c0170b53cfbf50db6cd60a427b52b0602b882
Author: Joerg Roedel <jroedel@suse.de>
Date:   Fri Feb 3 12:57:32 2017 +0100

    iommu/mediatek: Make use of iommu_device_register interface
    
    Register individual Mediatek IOMMUs to the iommu core and
    add sysfs entries.
    
    Cc: Matthias Brugger <matthias.bgg@gmail.com>
    Cc: linux-arm-kernel@lists.infradead.org
    Cc: linux-mediatek@lists.infradead.org
    Signed-off-by: Joerg Roedel <jroedel@suse.de>

diff --git a/drivers/iommu/mtk_iommu.h b/drivers/iommu/mtk_iommu.h
index 50177f738e4e..2a28eadeea0e 100644
--- a/drivers/iommu/mtk_iommu.h
+++ b/drivers/iommu/mtk_iommu.h
@@ -47,6 +47,8 @@ struct mtk_iommu_data {
 	struct iommu_group		*m4u_group;
 	struct mtk_smi_iommu		smi_imu;      /* SMI larb iommu info */
 	bool                            enable_4GB;
+
+	struct iommu_device		iommu;
 };
 
 static inline int compare_of(struct device *dev, void *data)

commit 00c7c81f7b49d9b739690c45d9986474d52c6240
Author: Russell King <rmk+kernel@armlinux.org.uk>
Date:   Wed Oct 19 11:30:34 2016 +0100

    iommu/mediatek: Convert DT component matching to component_match_add_release()
    
    Convert DT component matching to use component_match_add_release().
    
    Signed-off-by: Russell King <rmk+kernel@armlinux.org.uk>
    Signed-off-by: Joerg Roedel <jroedel@suse.de>

diff --git a/drivers/iommu/mtk_iommu.h b/drivers/iommu/mtk_iommu.h
index f59609f20270..50177f738e4e 100644
--- a/drivers/iommu/mtk_iommu.h
+++ b/drivers/iommu/mtk_iommu.h
@@ -54,6 +54,11 @@ static inline int compare_of(struct device *dev, void *data)
 	return dev->of_node == data;
 }
 
+static inline void release_of(struct device *dev, void *data)
+{
+	of_node_put(data);
+}
+
 static inline int mtk_iommu_bind(struct device *dev)
 {
 	struct mtk_iommu_data *data = dev_get_drvdata(dev);

commit 84672f192671e64e473eb535259c910860cab7a9
Author: Robin Murphy <robin.murphy@arm.com>
Date:   Mon Oct 17 12:49:21 2016 +0100

    iommu/mediatek: Convert M4Uv1 to iommu_fwspec
    
    Our per-device data consists of the M4U instance and firmware-provided
    list of LARB IDs, which is a perfect fit for the generic iommu_fwspec
    machinery. Use that directly instead of the custom archdata code - while
    we can't rely on the of_xlate() mechanism to initialise things until the
    32-bit ARM DMA code learns about groups and default domains, it still
    results in a reasonable simplification overall.
    
    CC: Honghui Zhang <honghui.zhang@mediatek.com>
    Signed-off-by: Robin Murphy <robin.murphy@arm.com>
    Tested-by: Honghui Zhang <honghui.zhang@mediatek.com>
    Signed-off-by: Joerg Roedel <jroedel@suse.de>

diff --git a/drivers/iommu/mtk_iommu.h b/drivers/iommu/mtk_iommu.h
index 3dab13b4a211..f59609f20270 100644
--- a/drivers/iommu/mtk_iommu.h
+++ b/drivers/iommu/mtk_iommu.h
@@ -34,12 +34,6 @@ struct mtk_iommu_suspend_reg {
 	u32				int_main_control;
 };
 
-struct mtk_iommu_client_priv {
-	struct list_head		client;
-	unsigned int			mtk_m4u_id;
-	struct device			*m4udev;
-};
-
 struct mtk_iommu_domain;
 
 struct mtk_iommu_data {

commit 9a8a5dcf20eee254ce490f12d579ef80ee776eb6
Author: Joerg Roedel <jroedel@suse.de>
Date:   Tue Aug 9 15:46:46 2016 +0200

    iommu/mediatek: Mark static functions in headers inline
    
    This was an oversight while merging these functions. Fix it.
    
    Cc: Honghui Zhang <honghui.zhang@mediatek.com>
    Fixes: 9ca340c98c0d ('iommu/mediatek: move the common struct into header file')
    Signed-off-by: Joerg Roedel <jroedel@suse.de>

diff --git a/drivers/iommu/mtk_iommu.h b/drivers/iommu/mtk_iommu.h
index 9ed0a8462ccf..3dab13b4a211 100644
--- a/drivers/iommu/mtk_iommu.h
+++ b/drivers/iommu/mtk_iommu.h
@@ -55,19 +55,19 @@ struct mtk_iommu_data {
 	bool                            enable_4GB;
 };
 
-static int compare_of(struct device *dev, void *data)
+static inline int compare_of(struct device *dev, void *data)
 {
 	return dev->of_node == data;
 }
 
-static int mtk_iommu_bind(struct device *dev)
+static inline int mtk_iommu_bind(struct device *dev)
 {
 	struct mtk_iommu_data *data = dev_get_drvdata(dev);
 
 	return component_bind_all(dev, &data->smi_imu);
 }
 
-static void mtk_iommu_unbind(struct device *dev)
+static inline void mtk_iommu_unbind(struct device *dev)
 {
 	struct mtk_iommu_data *data = dev_get_drvdata(dev);
 

commit 9ca340c98c0dc6cb60b5ebd7847302f57648f0ba
Author: Honghui Zhang <honghui.zhang@mediatek.com>
Date:   Wed Jun 8 17:50:58 2016 +0800

    iommu/mediatek: move the common struct into header file
    
    Move the struct defines of mtk iommu into a new header files for
    common use.
    
    Signed-off-by: Honghui Zhang <honghui.zhang@mediatek.com>
    Signed-off-by: Joerg Roedel <jroedel@suse.de>

diff --git a/drivers/iommu/mtk_iommu.h b/drivers/iommu/mtk_iommu.h
new file mode 100644
index 000000000000..9ed0a8462ccf
--- /dev/null
+++ b/drivers/iommu/mtk_iommu.h
@@ -0,0 +1,77 @@
+/*
+ * Copyright (c) 2015-2016 MediaTek Inc.
+ * Author: Honghui Zhang <honghui.zhang@mediatek.com>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ */
+
+#ifndef _MTK_IOMMU_H_
+#define _MTK_IOMMU_H_
+
+#include <linux/clk.h>
+#include <linux/component.h>
+#include <linux/device.h>
+#include <linux/io.h>
+#include <linux/iommu.h>
+#include <linux/list.h>
+#include <linux/spinlock.h>
+#include <soc/mediatek/smi.h>
+
+#include "io-pgtable.h"
+
+struct mtk_iommu_suspend_reg {
+	u32				standard_axi_mode;
+	u32				dcm_dis;
+	u32				ctrl_reg;
+	u32				int_control0;
+	u32				int_main_control;
+};
+
+struct mtk_iommu_client_priv {
+	struct list_head		client;
+	unsigned int			mtk_m4u_id;
+	struct device			*m4udev;
+};
+
+struct mtk_iommu_domain;
+
+struct mtk_iommu_data {
+	void __iomem			*base;
+	int				irq;
+	struct device			*dev;
+	struct clk			*bclk;
+	phys_addr_t			protect_base; /* protect memory base */
+	struct mtk_iommu_suspend_reg	reg;
+	struct mtk_iommu_domain		*m4u_dom;
+	struct iommu_group		*m4u_group;
+	struct mtk_smi_iommu		smi_imu;      /* SMI larb iommu info */
+	bool                            enable_4GB;
+};
+
+static int compare_of(struct device *dev, void *data)
+{
+	return dev->of_node == data;
+}
+
+static int mtk_iommu_bind(struct device *dev)
+{
+	struct mtk_iommu_data *data = dev_get_drvdata(dev);
+
+	return component_bind_all(dev, &data->smi_imu);
+}
+
+static void mtk_iommu_unbind(struct device *dev)
+{
+	struct mtk_iommu_data *data = dev_get_drvdata(dev);
+
+	component_unbind_all(dev, &data->smi_imu);
+}
+
+#endif
