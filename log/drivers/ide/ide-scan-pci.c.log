commit 78a515f9faf3af43cf9c4f61254dd1c5b3cb2d0b
Author: David S. Miller <davem@davemloft.net>
Date:   Sat Apr 4 18:07:59 2020 -0700

    drivers/ide: Fix build regression.
    
       drivers/ide/ide-scan-pci.c: In function 'ide_scan_pcibus':
    >> drivers/ide/ide-scan-pci.c:104:13: error: incompatible type for argument 1 of 'list_del'
         104 |   list_del(d->node);
             |            ~^~~~~~
             |             |
             |             struct list_head
       In file included from include/linux/module.h:12,
                        from drivers/ide/ide-scan-pci.c:12:
       include/linux/list.h:144:47: note: expected 'struct list_head *' but argument is of type 'struct list_head'
         144 | static inline void list_del(struct list_head *entry)
             |                             ~~~~~~~~~~~~~~~~~~^~~~~
    
    Fixes: 6a0033457f23 ("drivers/ide: convert to list_for_each_entry_safe()")
    Reported-by: kbuild test robot <lkp@intel.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

diff --git a/drivers/ide/ide-scan-pci.c b/drivers/ide/ide-scan-pci.c
index 383f0d813001..b0411a1827a3 100644
--- a/drivers/ide/ide-scan-pci.c
+++ b/drivers/ide/ide-scan-pci.c
@@ -101,7 +101,7 @@ static int __init ide_scan_pcibus(void)
 	 */
 
 	list_for_each_entry_safe(d, tmp, &ide_pci_drivers, node) {
-		list_del(d->node);
+		list_del(&d->node);
 		if (__pci_register_driver(d, d->driver.owner,
 					  d->driver.mod_name))
 			printk(KERN_ERR "%s: failed to register %s driver\n",

commit 6a0033457f2380852a3a4138d4c79571a5b51be6
Author: chenqiwu <chenqiwu@xiaomi.com>
Date:   Fri Feb 14 17:16:25 2020 +0800

    drivers/ide: convert to list_for_each_entry_safe()
    
    Use list_for_each_entry_safe() instead of list_for_each_safe()
    to simplify the code.
    
    Signed-off-by: chenqiwu <chenqiwu@xiaomi.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

diff --git a/drivers/ide/ide-scan-pci.c b/drivers/ide/ide-scan-pci.c
index acf874800ca4..383f0d813001 100644
--- a/drivers/ide/ide-scan-pci.c
+++ b/drivers/ide/ide-scan-pci.c
@@ -89,8 +89,7 @@ static int __init ide_scan_pcidev(struct pci_dev *dev)
 static int __init ide_scan_pcibus(void)
 {
 	struct pci_dev *dev = NULL;
-	struct pci_driver *d;
-	struct list_head *l, *n;
+	struct pci_driver *d, *tmp;
 
 	pre_init = 0;
 	for_each_pci_dev(dev)
@@ -101,9 +100,8 @@ static int __init ide_scan_pcibus(void)
 	 *	are post init.
 	 */
 
-	list_for_each_safe(l, n, &ide_pci_drivers) {
-		list_del(l);
-		d = list_entry(l, struct pci_driver, node);
+	list_for_each_entry_safe(d, tmp, &ide_pci_drivers, node) {
+		list_del(d->node);
 		if (__pci_register_driver(d, d->driver.owner,
 					  d->driver.mod_name))
 			printk(KERN_ERR "%s: failed to register %s driver\n",

commit b1f9e5e355e909000fcccfd2bc31f7c1ded358ab
Author: Lorenzo Pieralisi <lorenzo.pieralisi@arm.com>
Date:   Mon Oct 2 11:52:47 2017 +0100

    ide: fix IRQ assignment for PCI bus order probing
    
    We used to assign IRQs for all devices at boot-time, before any drivers
    claimed devices.  The following commits:
    
      30fdfb929e82 ("PCI: Add a call to pci_assign_irq() in pci_device_probe()")
      0e4c2eeb758a ("alpha/PCI: Replace pci_fixup_irqs() call with host bridge IRQ mapping hooks")
    
    changed this so we now call pci_assign_irq() from pci_device_probe() when
    we call a driver's probe method.
    
    The ide_scan_pcibus() path (enabled by CONFIG_IDEPCI_PCIBUS_ORDER) bypasses
    pci_device_probe() so it can guarantee devices are claimed in order of PCI
    bus address.  It calls the driver's probe method directly, so it misses the
    pci_assign_irq() call (and other PCI initialization functions), which
    causes failures like this:
    
      ide0: disabled, no IRQ
      ide0: failed to initialize IDE interface
      ide0: disabling port
      cmd64x 0000:00:02.0: IDE controller (0x1095:0x0646 rev 0x07)
      CMD64x_IDE 0000:00:02.0: BAR 0: can't reserve [io  0x8050-0x8057]
      cmd64x 0000:00:02.0: can't reserve resources
      CMD64x_IDE: probe of 0000:00:02.0 failed with error -16
      ide_generic: please use "probe_mask=0x3f" module parameter for probing
      all legacy ISA IDE ports
      ------------[ cut here ]------------
      WARNING: CPU: 0 PID: 1 at fs/sysfs/dir.c:31 sysfs_warn_dup+0x94/0xd0
      sysfs: cannot create duplicate filename '/class/ide_port/ide0'
      ...
    
      Trace:
      [<fffffc000048c9f4>] sysfs_warn_dup+0x94/0xd0
      [<fffffc0000330928>] warn_slowpath_fmt+0x58/0x70
      [<fffffc000048c9f4>] sysfs_warn_dup+0x94/0xd0
      [<fffffc0000486d40>] kernfs_path_from_node+0x30/0x60
      [<fffffc00004874ac>] kernfs_put+0x16c/0x2c0
      [<fffffc00004874ac>] kernfs_put+0x16c/0x2c0
      [<fffffc000048d010>] sysfs_do_create_link_sd.isra.2+0x100/0x120
      [<fffffc00005b9d64>] device_add+0x2a4/0x7c0
      [<fffffc00005ba5cc>] device_create_groups_vargs+0x14c/0x170
      [<fffffc00005ba518>] device_create_groups_vargs+0x98/0x170
      [<fffffc00005ba690>] device_create+0x50/0x70
      [<fffffc00005df36c>] ide_host_register+0x48c/0xa00
      [<fffffc00005df330>] ide_host_register+0x450/0xa00
      [<fffffc00005ba2a0>] device_register+0x20/0x50
      [<fffffc00005df330>] ide_host_register+0x450/0xa00
      [<fffffc00005df944>] ide_host_add+0x64/0xe0
      [<fffffc000079b41c>] kobject_uevent_env+0x16c/0x710
      [<fffffc0000310288>] do_one_initcall+0x68/0x260
      [<fffffc00007b13bc>] kernel_init+0x1c/0x1a0
      ...
      ---[ end trace 24a70433c3e4d374 ]---
      ide0: disabling port
    
    Fix the IRQ allocation issue by calling pci_assign_irq() from
    ide_scan_pcidev() before probing the IDE PCI drivers, so that IRQs for a
    given PCI device are allocated for the IDE PCI drivers to use them for
    device configuration.
    
    Fixes: 30fdfb929e82 ("PCI: Add a call to pci_assign_irq() in pci_device_probe()")
    Fixes: 0e4c2eeb758a ("alpha/PCI: Replace pci_fixup_irqs() call with host bridge IRQ mapping hooks")
    Link: http://lkml.kernel.org/r/32ec730f-c1b0-5584-cd35-f8a809122b96@roeck-us.net
    Reported-by: Guenter Roeck <linux@roeck-us.net>
    Tested-by: Guenter Roeck <linux@roeck-us.net>
    Signed-off-by: Lorenzo Pieralisi <lorenzo.pieralisi@arm.com>
    [bhelgaas: changelog]
    Signed-off-by: Bjorn Helgaas <bhelgaas@google.com>
    Reviewed-by: Bartlomiej Zolnierkiewicz <b.zolnierkie@samsung.com>
    Acked-by: David S. Miller <davem@davemloft.net>
    Cc: Richard Henderson <rth@twiddle.net>
    Cc: Ivan Kokshaysky <ink@jurassic.park.msu.ru>
    Cc: Matt Turner <mattst88@gmail.com>

diff --git a/drivers/ide/ide-scan-pci.c b/drivers/ide/ide-scan-pci.c
index 86aa88aeb3a6..acf874800ca4 100644
--- a/drivers/ide/ide-scan-pci.c
+++ b/drivers/ide/ide-scan-pci.c
@@ -56,6 +56,7 @@ static int __init ide_scan_pcidev(struct pci_dev *dev)
 {
 	struct list_head *l;
 	struct pci_driver *d;
+	int ret;
 
 	list_for_each(l, &ide_pci_drivers) {
 		d = list_entry(l, struct pci_driver, node);
@@ -63,10 +64,14 @@ static int __init ide_scan_pcidev(struct pci_dev *dev)
 			const struct pci_device_id *id =
 				pci_match_id(d->id_table, dev);
 
-			if (id != NULL && d->probe(dev, id) >= 0) {
-				dev->driver = d;
-				pci_dev_get(dev);
-				return 1;
+			if (id != NULL) {
+				pci_assign_irq(dev);
+				ret = d->probe(dev, id);
+				if (ret >= 0) {
+					dev->driver = d;
+					pci_dev_get(dev);
+					return 1;
+				}
 			}
 		}
 	}

commit e04a2bd6d8c95608cbb2c803ee2875cebfd89f52
Author: Paul Gortmaker <paul.gortmaker@windriver.com>
Date:   Wed Dec 9 16:45:51 2015 -0500

    drivers/ide: make ide-scan-pci.c driver explicitly non-modular
    
    The Kconfig for this support is currently:
    
    config IDEPCI_PCIBUS_ORDER
            bool "Probe IDE PCI devices in the PCI bus order (DEPRECATED)"
    
    ...meaning that it currently is not being built as a module by anyone.
    Lets change the initcall to be the equivalent device_initcall, so that
    when reading the driver code, there is no doubt it is builtin-only.
    
    Unlike other similar changes, we leave the module.h header to be
    included since this code interacts with other drivers and needs to
    know what a struct module is.
    
    Cc: "David S. Miller" <davem@davemloft.net>
    Cc: linux-ide@vger.kernel.org
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

diff --git a/drivers/ide/ide-scan-pci.c b/drivers/ide/ide-scan-pci.c
index c3da53e7bb2b..86aa88aeb3a6 100644
--- a/drivers/ide/ide-scan-pci.c
+++ b/drivers/ide/ide-scan-pci.c
@@ -107,5 +107,4 @@ static int __init ide_scan_pcibus(void)
 
 	return 0;
 }
-
-module_init(ide_scan_pcibus);
+device_initcall(ide_scan_pcibus);

commit db210f824c2f155703edf03bc2137da1bd76e27d
Author: Thiago Farina <tfransosi@gmail.com>
Date:   Sun May 1 12:10:25 2011 +0000

    ide/ide-scan-pci.c: Use for_each_pci_dev().
    
    Use for_each_pci_dev() to simplify the code.
    
    Signed-off-by: Thiago Farina <tfransosi@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

diff --git a/drivers/ide/ide-scan-pci.c b/drivers/ide/ide-scan-pci.c
index 0e79efff1deb..c3da53e7bb2b 100644
--- a/drivers/ide/ide-scan-pci.c
+++ b/drivers/ide/ide-scan-pci.c
@@ -88,7 +88,7 @@ static int __init ide_scan_pcibus(void)
 	struct list_head *l, *n;
 
 	pre_init = 0;
-	while ((dev = pci_get_device(PCI_ANY_ID, PCI_ANY_ID, dev)))
+	for_each_pci_dev(dev)
 		ide_scan_pcidev(dev);
 
 	/*

commit eb63963a55f039f049d0dd1121f91f332af6ecc9
Author: Harvey Harrison <harvey.harrison@gmail.com>
Date:   Sat Apr 26 22:25:20 2008 +0200

    ide: replace remaining __FUNCTION__ occurrences
    
    __FUNCTION__ is gcc-specific, use __func__
    
    [bart: fix checkpatch.pl errors in ide-lib.c and ppc/mpc8xx.c while at it]
    
    Signed-off-by: Harvey Harrison <harvey.harrison@gmail.com>
    Cc: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Bartlomiej Zolnierkiewicz <bzolnier@gmail.com>

diff --git a/drivers/ide/ide-scan-pci.c b/drivers/ide/ide-scan-pci.c
index 98888da1b600..0e79efff1deb 100644
--- a/drivers/ide/ide-scan-pci.c
+++ b/drivers/ide/ide-scan-pci.c
@@ -102,7 +102,7 @@ static int __init ide_scan_pcibus(void)
 		if (__pci_register_driver(d, d->driver.owner,
 					  d->driver.mod_name))
 			printk(KERN_ERR "%s: failed to register %s driver\n",
-					__FUNCTION__, d->driver.mod_name);
+					__func__, d->driver.mod_name);
 	}
 
 	return 0;

commit a594eeb1a1d320981fccc29584b6f21fcebd765f
Author: Greg Kroah-Hartman <gregkh@suse.de>
Date:   Fri Apr 18 00:46:20 2008 +0200

    IDE: remove ide=reverse IDE core
    
    This option is obsolete and can be removed safely.
    
    It allows us to remove the pci_get_device_reverse() function from the
    PCI core.
    
    Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>
    Signed-off-by: Bartlomiej Zolnierkiewicz <bzolnier@gmail.com>

diff --git a/drivers/ide/ide-scan-pci.c b/drivers/ide/ide-scan-pci.c
index 93d2e41be853..98888da1b600 100644
--- a/drivers/ide/ide-scan-pci.c
+++ b/drivers/ide/ide-scan-pci.c
@@ -88,13 +88,8 @@ static int __init ide_scan_pcibus(void)
 	struct list_head *l, *n;
 
 	pre_init = 0;
-	if (!ide_scan_direction)
-		while ((dev = pci_get_device(PCI_ANY_ID, PCI_ANY_ID, dev)))
-			ide_scan_pcidev(dev);
-	else
-		while ((dev = pci_get_device_reverse(PCI_ANY_ID, PCI_ANY_ID,
-						     dev)))
-			ide_scan_pcidev(dev);
+	while ((dev = pci_get_device(PCI_ANY_ID, PCI_ANY_ID, dev)))
+		ide_scan_pcidev(dev);
 
 	/*
 	 *	Hand the drivers over to the PCI layer now we

commit 2eae6ebbf99a083687466c010e3129fede9cdb4b
Author: Adrian Bunk <bunk@kernel.org>
Date:   Fri Feb 1 23:09:16 2008 +0100

    ide: small ide-scan-pci.c cleanup
    
    - ide_scan_pcibus() can become static
    - instead of ide_scan_pci() we can use ide_scan_pcibus() directly
      in module_init()
    
    Signed-off-by: Adrian Bunk <bunk@kernel.org>
    Signed-off-by: Bartlomiej Zolnierkiewicz <bzolnier@gmail.com>

diff --git a/drivers/ide/ide-scan-pci.c b/drivers/ide/ide-scan-pci.c
index 7ffa332d77ce..93d2e41be853 100644
--- a/drivers/ide/ide-scan-pci.c
+++ b/drivers/ide/ide-scan-pci.c
@@ -81,7 +81,7 @@ static int __init ide_scan_pcidev(struct pci_dev *dev)
  *	module ordering not traditionally ordered.
  */
 
-int __init ide_scan_pcibus(void)
+static int __init ide_scan_pcibus(void)
 {
 	struct pci_dev *dev = NULL;
 	struct pci_driver *d;
@@ -113,9 +113,4 @@ int __init ide_scan_pcibus(void)
 	return 0;
 }
 
-static int __init ide_scan_pci(void)
-{
-	return ide_scan_pcibus();
-}
-
-module_init(ide_scan_pci);
+module_init(ide_scan_pcibus);

commit 9ac59226ca95889ad620b0e63c0f700679fee5dd
Author: Bartlomiej Zolnierkiewicz <bzolnier@gmail.com>
Date:   Sat Jan 26 20:13:09 2008 +0100

    ide: move CONFIG_IDEPCI_PCIBUS_ORDER code to ide-scan-pci.c
    
    Signed-off-by: Bartlomiej Zolnierkiewicz <bzolnier@gmail.com>

diff --git a/drivers/ide/ide-scan-pci.c b/drivers/ide/ide-scan-pci.c
index 23015d89e735..7ffa332d77ce 100644
--- a/drivers/ide/ide-scan-pci.c
+++ b/drivers/ide/ide-scan-pci.c
@@ -1,8 +1,118 @@
+/*
+ * support for probing IDE PCI devices in the PCI bus order
+ *
+ * Copyright (c) 1998-2000  Andre Hedrick <andre@linux-ide.org>
+ * Copyright (c) 1995-1998  Mark Lord
+ *
+ * May be copied or modified under the terms of the GNU General Public License
+ */
+
 #include <linux/kernel.h>
 #include <linux/init.h>
 #include <linux/module.h>
 #include <linux/ide.h>
 
+/*
+ *	Module interfaces
+ */
+
+static int pre_init = 1;		/* Before first ordered IDE scan */
+static LIST_HEAD(ide_pci_drivers);
+
+/*
+ *	__ide_pci_register_driver	-	attach IDE driver
+ *	@driver: pci driver
+ *	@module: owner module of the driver
+ *
+ *	Registers a driver with the IDE layer. The IDE layer arranges that
+ *	boot time setup is done in the expected device order and then
+ *	hands the controllers off to the core PCI code to do the rest of
+ *	the work.
+ *
+ *	Returns are the same as for pci_register_driver
+ */
+
+int __ide_pci_register_driver(struct pci_driver *driver, struct module *module,
+			      const char *mod_name)
+{
+	if (!pre_init)
+		return __pci_register_driver(driver, module, mod_name);
+	driver->driver.owner = module;
+	list_add_tail(&driver->node, &ide_pci_drivers);
+	return 0;
+}
+EXPORT_SYMBOL_GPL(__ide_pci_register_driver);
+
+/**
+ *	ide_scan_pcidev		-	find an IDE driver for a device
+ *	@dev: PCI device to check
+ *
+ *	Look for an IDE driver to handle the device we are considering.
+ *	This is only used during boot up to get the ordering correct. After
+ *	boot up the pci layer takes over the job.
+ */
+
+static int __init ide_scan_pcidev(struct pci_dev *dev)
+{
+	struct list_head *l;
+	struct pci_driver *d;
+
+	list_for_each(l, &ide_pci_drivers) {
+		d = list_entry(l, struct pci_driver, node);
+		if (d->id_table) {
+			const struct pci_device_id *id =
+				pci_match_id(d->id_table, dev);
+
+			if (id != NULL && d->probe(dev, id) >= 0) {
+				dev->driver = d;
+				pci_dev_get(dev);
+				return 1;
+			}
+		}
+	}
+	return 0;
+}
+
+/**
+ *	ide_scan_pcibus		-	perform the initial IDE driver scan
+ *
+ *	Perform the initial bus rather than driver ordered scan of the
+ *	PCI drivers. After this all IDE pci handling becomes standard
+ *	module ordering not traditionally ordered.
+ */
+
+int __init ide_scan_pcibus(void)
+{
+	struct pci_dev *dev = NULL;
+	struct pci_driver *d;
+	struct list_head *l, *n;
+
+	pre_init = 0;
+	if (!ide_scan_direction)
+		while ((dev = pci_get_device(PCI_ANY_ID, PCI_ANY_ID, dev)))
+			ide_scan_pcidev(dev);
+	else
+		while ((dev = pci_get_device_reverse(PCI_ANY_ID, PCI_ANY_ID,
+						     dev)))
+			ide_scan_pcidev(dev);
+
+	/*
+	 *	Hand the drivers over to the PCI layer now we
+	 *	are post init.
+	 */
+
+	list_for_each_safe(l, n, &ide_pci_drivers) {
+		list_del(l);
+		d = list_entry(l, struct pci_driver, node);
+		if (__pci_register_driver(d, d->driver.owner,
+					  d->driver.mod_name))
+			printk(KERN_ERR "%s: failed to register %s driver\n",
+					__FUNCTION__, d->driver.mod_name);
+	}
+
+	return 0;
+}
+
 static int __init ide_scan_pci(void)
 {
 	return ide_scan_pcibus();

commit ade2daf9c6e57845fe83a24e0a9fa1c03c6e91b1
Author: Bartlomiej Zolnierkiewicz <bzolnier@gmail.com>
Date:   Sat Jan 26 20:13:07 2008 +0100

    ide: make remaining built-in only IDE host drivers modular (take 2)
    
    * Make remaining built-in only IDE host drivers modular, add ide-scan-pci.c
      file for probing PCI host drivers registered with IDE core (special case
      for built-in IDE and CONFIG_IDEPCI_PCIBUS_ORDER=y) and then take care of
      the ordering in which all IDE host drivers are probed when IDE is built-in
      during link time.
    
    * Move probing of gayle, falconide, macide, q40ide and buddha (m68k arch
      specific) host drivers, before PCI ones (no PCI on m68k), ide-cris (cris
      arch specific), cmd640 (x86 arch specific) and pmac (ppc arch specific).
    
    * Move probing of ide-cris (cris arch specific) host driver before cmd640
      (x86 arch specific).
    
    * Move probing of mpc8xx (ppc specific) host driver before ide-pnp (depends
      on ISA and none of ppc platform that use mpc8xx supports ISA) and ide-h8300
      (h8300 arch specific).
    
    * Add "probe_vlb" kernel parameter to cmd640 host driver and update
      Documentation/ide.txt accordingly.
    
    * Make IDE_ARM config option visible so it can also be disabled if needed.
    
    * Remove bogus comment from ide.c while at it.
    
    v2:
    * Fix two issues spotted by Sergei:
      - replace ENOMEM error value by ENOENT in ide-h8300 host driver
      - fix MODULE_PARM_DESC() in cmd640 host driver
    
    Cc: Sergei Shtylyov <sshtylyov@ru.mvista.com>
    Cc: Mikael Starvik <starvik@axis.com>
    Cc: Geert Uytterhoeven <geert@linux-m68k.org>
    Cc: Roman Zippel <zippel@linux-m68k.org>
    Cc: Benjamin Herrenschmidt <benh@kernel.crashing.org>
    Signed-off-by: Bartlomiej Zolnierkiewicz <bzolnier@gmail.com>

diff --git a/drivers/ide/ide-scan-pci.c b/drivers/ide/ide-scan-pci.c
new file mode 100644
index 000000000000..23015d89e735
--- /dev/null
+++ b/drivers/ide/ide-scan-pci.c
@@ -0,0 +1,11 @@
+#include <linux/kernel.h>
+#include <linux/init.h>
+#include <linux/module.h>
+#include <linux/ide.h>
+
+static int __init ide_scan_pci(void)
+{
+	return ide_scan_pcibus();
+}
+
+module_init(ide_scan_pci);
