commit 37613fa5b762a73073de3c2e23baa4a1da337e71
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Thu Apr 25 20:06:18 2019 +0200

    regmap: add proper SPDX identifiers on files that did not have them.
    
    There were a few files in the regmap code that did not have SPDX
    identifiers on them, so fix that up.  At the same time, remove the "free
    form" text that specified the license of the file, as that is impossible
    for any tool to properly parse.
    
    Also, as Mark loves // comment markers, convert all of the headers to be
    the same to make things look consistent :)
    
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Mark Brown <broonie@kernel.org>

diff --git a/drivers/base/regmap/internal.h b/drivers/base/regmap/internal.h
index a98fced9bff8..3d80c4b43f72 100644
--- a/drivers/base/regmap/internal.h
+++ b/drivers/base/regmap/internal.h
@@ -1,13 +1,10 @@
+/* SPDX-License-Identifier: GPL-2.0 */
 /*
  * Register map access API internal header
  *
  * Copyright 2011 Wolfson Microelectronics plc
  *
  * Author: Mark Brown <broonie@opensource.wolfsonmicro.com>
- *
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License version 2 as
- * published by the Free Software Foundation.
  */
 
 #ifndef _REGMAP_INTERNAL_H

commit ae2399c48c023ef8a6e0d260950420296252b3e9
Merge: 9ef688410506 cdf6b11daa77 1c96a2f67cd9
Author: Mark Brown <broonie@kernel.org>
Date:   Sun Oct 21 12:07:26 2018 +0100

    Merge remote-tracking branches 'regmap/topic/noinc' and 'regmap/topic/single-rw' into regmap-next

commit cdf6b11daa77d4b55ddf0530842a551cc5562a93
Author: Ben Whitten <ben.whitten@gmail.com>
Date:   Fri Oct 19 10:33:50 2018 +0100

    regmap: Add regmap_noinc_write API
    
    The regmap API had a noinc_read function added for instances where devices
    supported returning data from an internal FIFO in a single read.
    
    This commit adds the noinc_write variant to allow writing to a non
    incrementing register, this is used in devices such as the sx1301 for
    loading firmware.
    
    Signed-off-by: Ben Whitten <ben.whitten@lairdtech.com>
    Signed-off-by: Mark Brown <broonie@kernel.org>

diff --git a/drivers/base/regmap/internal.h b/drivers/base/regmap/internal.h
index a6bf34d6394e..404f123cbe55 100644
--- a/drivers/base/regmap/internal.h
+++ b/drivers/base/regmap/internal.h
@@ -94,11 +94,13 @@ struct regmap {
 	bool (*readable_reg)(struct device *dev, unsigned int reg);
 	bool (*volatile_reg)(struct device *dev, unsigned int reg);
 	bool (*precious_reg)(struct device *dev, unsigned int reg);
+	bool (*writeable_noinc_reg)(struct device *dev, unsigned int reg);
 	bool (*readable_noinc_reg)(struct device *dev, unsigned int reg);
 	const struct regmap_access_table *wr_table;
 	const struct regmap_access_table *rd_table;
 	const struct regmap_access_table *volatile_table;
 	const struct regmap_access_table *precious_table;
+	const struct regmap_access_table *wr_noinc_table;
 	const struct regmap_access_table *rd_noinc_table;
 
 	int (*reg_read)(void *context, unsigned int reg, unsigned int *val);
@@ -183,6 +185,7 @@ bool regmap_writeable(struct regmap *map, unsigned int reg);
 bool regmap_readable(struct regmap *map, unsigned int reg);
 bool regmap_volatile(struct regmap *map, unsigned int reg);
 bool regmap_precious(struct regmap *map, unsigned int reg);
+bool regmap_writeable_noinc(struct regmap *map, unsigned int reg);
 bool regmap_readable_noinc(struct regmap *map, unsigned int reg);
 
 int _regmap_write(struct regmap *map, unsigned int reg,

commit 9ad8eb0168ab76786f65d4b80ce082980f79a1d9
Author: David Frey <dpfrey@gmail.com>
Date:   Sat Sep 1 09:50:40 2018 -0700

    regmap: fix comment for regmap.use_single_write
    
    Signed-off-by: David Frey <dpfrey@gmail.com>
    Signed-off-by: Mark Brown <broonie@kernel.org>

diff --git a/drivers/base/regmap/internal.h b/drivers/base/regmap/internal.h
index a6bf34d6394e..16414ccace96 100644
--- a/drivers/base/regmap/internal.h
+++ b/drivers/base/regmap/internal.h
@@ -149,7 +149,7 @@ struct regmap {
 
 	/* if set, converts bulk read to single read */
 	bool use_single_read;
-	/* if set, converts bulk read to single read */
+	/* if set, converts bulk write to single write */
 	bool use_single_write;
 	/* if set, the device supports multi write mode */
 	bool can_multi_write;

commit 74fe7b551f3385fa585d92616c85b3a575b2b2cb
Author: Crestez Dan Leonard <leonard.crestez@intel.com>
Date:   Tue Aug 7 17:52:17 2018 +0300

    regmap: Add regmap_noinc_read API
    
    The regmap API usually assumes that bulk read operations will read a
    range of registers but some I2C/SPI devices have certain registers for
    which a such a read operation will return data from an internal FIFO
    instead. Add an explicit API to support bulk read without range semantics.
    
    Some linux drivers use regmap_bulk_read or regmap_raw_read for such
    registers, for example mpu6050 or bmi150 from IIO. This only happens to
    work because when caching is disabled a single regmap read op will map
    to a single bus read op (as desired). This breaks if caching is enabled and
    reg+1 happens to be a cacheable register.
    
    Without regmap support refactoring a driver to enable regmap caching
    requires separate I2C and SPI paths. This is exactly what regmap is
    supposed to help avoid.
    
    Suggested-by: Jonathan Cameron <jic23@kernel.org>
    Signed-off-by: Crestez Dan Leonard <leonard.crestez@intel.com>
    Signed-off-by: Stefan Popa <stefan.popa@analog.com>
    Signed-off-by: Mark Brown <broonie@kernel.org>

diff --git a/drivers/base/regmap/internal.h b/drivers/base/regmap/internal.h
index 53785e0e297a..a6bf34d6394e 100644
--- a/drivers/base/regmap/internal.h
+++ b/drivers/base/regmap/internal.h
@@ -94,10 +94,12 @@ struct regmap {
 	bool (*readable_reg)(struct device *dev, unsigned int reg);
 	bool (*volatile_reg)(struct device *dev, unsigned int reg);
 	bool (*precious_reg)(struct device *dev, unsigned int reg);
+	bool (*readable_noinc_reg)(struct device *dev, unsigned int reg);
 	const struct regmap_access_table *wr_table;
 	const struct regmap_access_table *rd_table;
 	const struct regmap_access_table *volatile_table;
 	const struct regmap_access_table *precious_table;
+	const struct regmap_access_table *rd_noinc_table;
 
 	int (*reg_read)(void *context, unsigned int reg, unsigned int *val);
 	int (*reg_write)(void *context, unsigned int reg, unsigned int val);
@@ -181,6 +183,7 @@ bool regmap_writeable(struct regmap *map, unsigned int reg);
 bool regmap_readable(struct regmap *map, unsigned int reg);
 bool regmap_volatile(struct regmap *map, unsigned int reg);
 bool regmap_precious(struct regmap *map, unsigned int reg);
+bool regmap_readable_noinc(struct regmap *map, unsigned int reg);
 
 int _regmap_write(struct regmap *map, unsigned int reg,
 		  unsigned int val);

commit 72465736adf2aade263a9475a1d42007fd49e703
Author: Mark Brown <broonie@kernel.org>
Date:   Tue Dec 12 16:56:43 2017 +0000

    regmap: Disable debugfs when locking is disabled
    
    The recently added support for disabling the regmap internal locking left
    debugfs enabled for devices with the locking disabled. This is a problem
    since debugfs allows userspace to do things like initiate reads from the
    hardware which will use the scratch buffers protected by the regmap locking
    so could cause data corruption.
    
    For safety address this by just disabling debugfs for these devices. That
    is overly conservative since some of the debugfs files just read internal
    data structures but it's much simpler to implmement and less likely to
    lead to problems with tooling that works with debugfs.
    
    Reported-by: Lars-Peter Clausen <lars@metafoo.de>
    Signed-off-by: Mark Brown <broonie@kernel.org>

diff --git a/drivers/base/regmap/internal.h b/drivers/base/regmap/internal.h
index 8641183cac2f..53785e0e297a 100644
--- a/drivers/base/regmap/internal.h
+++ b/drivers/base/regmap/internal.h
@@ -77,6 +77,7 @@ struct regmap {
 	int async_ret;
 
 #ifdef CONFIG_DEBUG_FS
+	bool debugfs_disable;
 	struct dentry *debugfs;
 	const char *debugfs_name;
 
@@ -215,10 +216,17 @@ struct regmap_field {
 extern void regmap_debugfs_initcall(void);
 extern void regmap_debugfs_init(struct regmap *map, const char *name);
 extern void regmap_debugfs_exit(struct regmap *map);
+
+static inline void regmap_debugfs_disable(struct regmap *map)
+{
+	map->debugfs_disable = true;
+}
+
 #else
 static inline void regmap_debugfs_initcall(void) { }
 static inline void regmap_debugfs_init(struct regmap *map, const char *name) { }
 static inline void regmap_debugfs_exit(struct regmap *map) { }
+static inline void regmap_debugfs_disable(struct regmap *map) { }
 #endif
 
 /* regcache core declarations */

commit 8698b9364710e7bac84b3af07dd410e39c8c2e08
Author: Baolin Wang <baolin.wang@linaro.org>
Date:   Wed Nov 1 10:11:55 2017 +0800

    regmap: Add hardware spinlock support
    
    On some platforms, when reading or writing some special registers through
    regmap, we should acquire one hardware spinlock to synchronize between
    the multiple subsystems. Thus this patch adds the hardware spinlock
    support for regmap.
    
    Signed-off-by: Baolin Wang <baolin.wang@linaro.org>
    Signed-off-by: Mark Brown <broonie@kernel.org>

diff --git a/drivers/base/regmap/internal.h b/drivers/base/regmap/internal.h
index 2a4435d76028..8641183cac2f 100644
--- a/drivers/base/regmap/internal.h
+++ b/drivers/base/regmap/internal.h
@@ -157,6 +157,8 @@ struct regmap {
 
 	struct rb_root range_tree;
 	void *selector_work_buf;	/* Scratch buffer used for selector */
+
+	struct hwspinlock *hwlock;
 };
 
 struct regcache_ops {

commit f785fb2ec0cbe73165333ea1f23cce36c7fc2521
Merge: c8d2bc9bc39e 55562449032c 359a2f17604e
Author: Mark Brown <broonie@kernel.org>
Date:   Tue Oct 4 05:17:12 2016 +0200

    Merge remote-tracking branches 'regmap/topic/core' and 'regmap/topic/debugfs' into regmap-next

commit f50e38c9966076465bc8d9dd0bc582c268a0031e
Author: Tony Lindgren <tony@atomide.com>
Date:   Thu Sep 15 13:56:10 2016 -0700

    regmap: Allow longer flag masks for read and write
    
    We currently only support masking the top bit for read and write
    flags. Let's make the mask unsigned long and mask the bytes based
    on the configured register length to make things more generic.
    
    This allows using regmap for more exotic combinations like SPI
    devices that need little endian addressing.
    
    Signed-off-by: Tony Lindgren <tony@atomide.com>
    Signed-off-by: Mark Brown <broonie@kernel.org>

diff --git a/drivers/base/regmap/internal.h b/drivers/base/regmap/internal.h
index a0380338946a..6636f03ac2da 100644
--- a/drivers/base/regmap/internal.h
+++ b/drivers/base/regmap/internal.h
@@ -105,8 +105,8 @@ struct regmap {
 
 	bool defer_caching;
 
-	u8 read_flag_mask;
-	u8 write_flag_mask;
+	unsigned long read_flag_mask;
+	unsigned long write_flag_mask;
 
 	/* number of bits to (left) shift the reg value when formatting*/
 	int reg_shift;

commit 1ea975cf1ef57b1e44c0aec4820f60bb3b60904b
Author: Cristian Birsan <cristian.birsan@microchip.com>
Date:   Mon Aug 8 18:44:21 2016 +0300

    regmap: Add a function to check if a regmap register is cached
    
    Add a function to check if a regmap register is cached. This will be used
    in debugfs to dump the cached values of write only registers.
    
    Signed-off-by: Cristian Birsan <cristian.birsan@microchip.com>
    Signed-off-by: Mark Brown <broonie@kernel.org>

diff --git a/drivers/base/regmap/internal.h b/drivers/base/regmap/internal.h
index a0380338946a..f4be4c19bb17 100644
--- a/drivers/base/regmap/internal.h
+++ b/drivers/base/regmap/internal.h
@@ -173,6 +173,7 @@ struct regcache_ops {
 	int (*drop)(struct regmap *map, unsigned int min, unsigned int max);
 };
 
+bool regmap_cached(struct regmap *map, unsigned int reg);
 bool regmap_writeable(struct regmap *map, unsigned int reg);
 bool regmap_readable(struct regmap *map, unsigned int reg);
 bool regmap_volatile(struct regmap *map, unsigned int reg);

commit 4f7d6dd4df8b388e2056c89b528254cdd79dea2a
Author: Mark Brown <broonie@kernel.org>
Date:   Tue Mar 29 12:28:33 2016 -0700

    regmap: Fix implicit inclusion of device.h
    
    internal.h is using dev_name() but doesn't include device.h which
    defines it.  Add an explicit include to avoid build problems due to
    this.
    
    Tested-by: Alexander Stein <alexander.stein@systec-electronic.com>
    Signed-off-by: Mark Brown <broonie@kernel.org>

diff --git a/drivers/base/regmap/internal.h b/drivers/base/regmap/internal.h
index 5c79526245c2..a0380338946a 100644
--- a/drivers/base/regmap/internal.h
+++ b/drivers/base/regmap/internal.h
@@ -13,6 +13,7 @@
 #ifndef _REGMAP_INTERNAL_H
 #define _REGMAP_INTERNAL_H
 
+#include <linux/device.h>
 #include <linux/regmap.h>
 #include <linux/fs.h>
 #include <linux/list.h>

commit 8b31ec5572f812acac36f3d02944ade76a8f51b9
Author: Xiubo Li <lixiubo@cmss.chinamobile.com>
Date:   Mon Jan 4 18:00:34 2016 +0800

    regcache: Introduce the index parsing API by stride order
    
    Here introduces regcache_get_index_by_order() for regmap cache,
    which uses the register stride order and bit rotation, to improve
    the performance.
    
    Signed-off-by: Xiubo Li <lixiubo@cmss.chinamobile.com>
    Signed-off-by: Mark Brown <broonie@kernel.org>

diff --git a/drivers/base/regmap/internal.h b/drivers/base/regmap/internal.h
index c22b04b2ca17..5c79526245c2 100644
--- a/drivers/base/regmap/internal.h
+++ b/drivers/base/regmap/internal.h
@@ -273,4 +273,10 @@ static inline unsigned int regmap_get_offset(const struct regmap *map,
 		return index * map->reg_stride;
 }
 
+static inline unsigned int regcache_get_index_by_order(const struct regmap *map,
+						       unsigned int reg)
+{
+	return reg >> map->reg_stride_order;
+}
+
 #endif

commit ca747be22fa57bbee50e34c220401160e8f2a07f
Author: Xiubo Li <lixiubo@cmss.chinamobile.com>
Date:   Mon Jan 4 18:00:33 2016 +0800

    regmap: core: Introduce register stride order
    
    Since the register stride should always equal to 2^N, and bit rotation is
    much faster than multiplication and division. So introducing the stride
    order and using bit rotation to get the offset of the register from the
    index to improve the performance.
    
    Signed-off-by: Xiubo Li <lixiubo@cmss.chinamobile.com>
    Signed-off-by: Mark Brown <broonie@kernel.org>

diff --git a/drivers/base/regmap/internal.h b/drivers/base/regmap/internal.h
index 3df977054781..c22b04b2ca17 100644
--- a/drivers/base/regmap/internal.h
+++ b/drivers/base/regmap/internal.h
@@ -110,6 +110,7 @@ struct regmap {
 	/* number of bits to (left) shift the reg value when formatting*/
 	int reg_shift;
 	int reg_stride;
+	int reg_stride_order;
 
 	/* regcache specific members */
 	const struct regcache_ops *cache_ops;
@@ -263,4 +264,13 @@ static inline const char *regmap_name(const struct regmap *map)
 	return map->name;
 }
 
+static inline unsigned int regmap_get_offset(const struct regmap *map,
+					     unsigned int index)
+{
+	if (map->reg_stride_order >= 0)
+		return index << map->reg_stride_order;
+	else
+		return index * map->reg_stride;
+}
+
 #endif

commit e880e87488d5bbf630dd716e6de8a53585614568
Merge: 118c216e16c5 c23fe83138ed
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Wed Nov 4 21:50:37 2015 -0800

    Merge tag 'driver-core-4.4-rc1' of git://git.kernel.org/pub/scm/linux/kernel/git/gregkh/driver-core
    
    Pull driver core updates from Greg KH:
     "Here's the "big" driver core updates for 4.4-rc1.  Primarily a bunch
      of debugfs updates, with a smattering of minor driver core fixes and
      updates as well.
    
      All have been in linux-next for a long time"
    
    * tag 'driver-core-4.4-rc1' of git://git.kernel.org/pub/scm/linux/kernel/git/gregkh/driver-core:
      debugfs: Add debugfs_create_ulong()
      of: to support binding numa node to specified device in devicetree
      debugfs: Add read-only/write-only bool file ops
      debugfs: Add read-only/write-only size_t file ops
      debugfs: Add read-only/write-only x64 file ops
      debugfs: Consolidate file mode checks in debugfs_create_*()
      Revert "mm: Check if section present during memory block (un)registering"
      driver-core: platform: Provide helpers for multi-driver modules
      mm: Check if section present during memory block (un)registering
      devres: fix a for loop bounds check
      CMA: fix CONFIG_CMA_SIZE_MBYTES overflow in 64bit
      base/platform: assert that dev_pm_domain callbacks are called unconditionally
      sysfs: correctly handle short reads on PREALLOC attrs.
      base: soc: siplify ida usage
      kobject: move EXPORT_SYMBOL() macros next to corresponding definitions
      kobject: explain what kobject's sd field is
      debugfs: document that debugfs_remove*() accepts NULL and error values
      debugfs: Pass bool pointer to debugfs_create_bool()
      ACPI / EC: Fix broken 64bit big-endian users of 'global_lock'

commit d4a1a317e7478b70e18b9cc8eac7d29090121b6e
Merge: b3961e8703cb b4a21fc275e9 ca07e9f3cb92 536b5603e7a3
Author: Mark Brown <broonie@kernel.org>
Date:   Mon Oct 12 19:25:07 2015 +0100

    Merge remote-tracking branches 'regmap/topic/atomic', 'regmap/topic/debugfs' and 'regmap/topic/irq-hdr' into regmap-next

commit 77792b11409c9270d98e604b4314b85ce886ac7d
Author: Jon Ringle <jringle@gridpoint.com>
Date:   Thu Oct 1 12:38:07 2015 -0400

    regmap: Allow installing custom reg_update_bits function
    
    This commit allows installing a custom reg_update_bits function for cases where
    the hardware provides a mechanism to set or clear register bits without a
    read/modify/write cycle. Such is the case with the Microchip ENCX24J600.
    
    If a custom reg_update_bits function is provided, it will only be used against
    volatile registers.
    
    Signed-off-by: Jon Ringle <jringle@gridpoint.com>
    Signed-off-by: Mark Brown <broonie@kernel.org>

diff --git a/drivers/base/regmap/internal.h b/drivers/base/regmap/internal.h
index cc557886ab23..628ad7ac078b 100644
--- a/drivers/base/regmap/internal.h
+++ b/drivers/base/regmap/internal.h
@@ -98,6 +98,8 @@ struct regmap {
 
 	int (*reg_read)(void *context, unsigned int reg, unsigned int *val);
 	int (*reg_write)(void *context, unsigned int reg, unsigned int val);
+	int (*reg_update_bits)(void *context, unsigned int reg,
+			       unsigned int mask, unsigned int val);
 
 	bool defer_caching;
 

commit 621a5f7ad9cd1ce7933f1d302067cbd58354173c
Author: Viresh Kumar <viresh.kumar@linaro.org>
Date:   Sat Sep 26 15:04:07 2015 -0700

    debugfs: Pass bool pointer to debugfs_create_bool()
    
    Its a bit odd that debugfs_create_bool() takes 'u32 *' as an argument,
    when all it needs is a boolean pointer.
    
    It would be better to update this API to make it accept 'bool *'
    instead, as that will make it more consistent and often more convenient.
    Over that bool takes just a byte.
    
    That required updates to all user sites as well, in the same commit
    updating the API. regmap core was also using
    debugfs_{read|write}_file_bool(), directly and variable types were
    updated for that to be bool as well.
    
    Signed-off-by: Viresh Kumar <viresh.kumar@linaro.org>
    Acked-by: Mark Brown <broonie@kernel.org>
    Acked-by: Charles Keepax <ckeepax@opensource.wolfsonmicro.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/base/regmap/internal.h b/drivers/base/regmap/internal.h
index cc557886ab23..5b907f2c62b9 100644
--- a/drivers/base/regmap/internal.h
+++ b/drivers/base/regmap/internal.h
@@ -122,9 +122,9 @@ struct regmap {
 	unsigned int num_reg_defaults_raw;
 
 	/* if set, only the cache is modified not the HW */
-	u32 cache_only;
+	bool cache_only;
 	/* if set, only the HW is modified not the cache */
-	u32 cache_bypass;
+	bool cache_bypass;
 	/* if set, remember to free reg_defaults_raw */
 	bool cache_free;
 
@@ -132,7 +132,7 @@ struct regmap {
 	const void *reg_defaults_raw;
 	void *cache;
 	/* if set, the cache contains newer data than the HW */
-	u32 cache_dirty;
+	bool cache_dirty;
 	/* if set, the HW registers are known to match map->reg_defaults */
 	bool no_sync_defaults;
 

commit b4a21fc275e99fc63c77b30da92ee497f8a7bdb6
Author: Stephen Boyd <sboyd@codeaurora.org>
Date:   Fri Sep 11 16:37:05 2015 -0700

    regmap: Allocate buffers with GFP_ATOMIC when fast_io == true
    
    If a regmap is using fast_io, allocate the scratch buffer in
    regmap_bulk_write() with GFP_ATOMIC instead of GFP_KERNEL.
    Otherwise we may schedule while atomic.
    
    Reported-by: Abhijeet Dharmapurikar <adharmap@codeaurora.org>
    Signed-off-by: Stephen Boyd <sboyd@codeaurora.org>
    Signed-off-by: Mark Brown <broonie@kernel.org>

diff --git a/drivers/base/regmap/internal.h b/drivers/base/regmap/internal.h
index cc557886ab23..f3b1445da0a5 100644
--- a/drivers/base/regmap/internal.h
+++ b/drivers/base/regmap/internal.h
@@ -59,6 +59,7 @@ struct regmap {
 	regmap_lock lock;
 	regmap_unlock unlock;
 	void *lock_arg; /* This is passed to lock/unlock functions */
+	gfp_t alloc_flags;
 
 	struct device *dev; /* Device we do I/O on */
 	void *work_buf;     /* Scratch buffer used to format I/O */

commit 072502a67c9164625288cca17704808e6c06273f
Merge: 84fb9015d20d 1ed8111443ae 2de9d6006c19
Author: Mark Brown <broonie@kernel.org>
Date:   Fri Sep 4 17:22:10 2015 +0100

    Merge remote-tracking branches 'regmap/topic/lockdep' and 'regmap/topic/seq-delay' into regmap-next

commit adaac459759db4a1fd35baddbe47bac700095496
Author: Markus Pargmann <mpa@pengutronix.de>
Date:   Sun Aug 30 09:33:53 2015 +0200

    regmap: Introduce max_raw_read/write for regmap_bulk_read/write
    
    There are some buses which have a limit on the maximum number of bytes
    that can be send/received. An example for this is
    I2C_FUNC_SMBUS_I2C_BLOCK which does not support any reads/writes of more
    than 32 bytes. The regmap_bulk operations should still be able to
    utilize the full 32 bytes in this case.
    
    Signed-off-by: Markus Pargmann <mpa@pengutronix.de>
    Signed-off-by: Mark Brown <broonie@kernel.org>

diff --git a/drivers/base/regmap/internal.h b/drivers/base/regmap/internal.h
index d744ae3926dd..fc554e357c5d 100644
--- a/drivers/base/regmap/internal.h
+++ b/drivers/base/regmap/internal.h
@@ -146,6 +146,10 @@ struct regmap {
 	/* if set, the device supports multi write mode */
 	bool can_multi_write;
 
+	/* if set, raw reads/writes are limited to this size */
+	size_t max_raw_read;
+	size_t max_raw_write;
+
 	struct rb_root range_tree;
 	void *selector_work_buf;	/* Scratch buffer used for selector */
 };

commit 67921a1a6660d32cc2770d05d656a1187b6d94d5
Author: Markus Pargmann <mpa@pengutronix.de>
Date:   Fri Aug 21 10:26:42 2015 +0200

    regmap: Split use_single_rw internally into use_single_read/write
    
    use_single_rw currently reflects the capabilities of the connected
    device. The capabilities of the bus are currently missing for this
    variable.
    
    As there are read only and write only buses we need seperate values for
    use_single_rw to also reflect tha capabilities of the bus.
    
    This patch splits use_single_rw into use_single_read and
    use_single_write. The initialization is changed to check the
    configuration for use_single_rw and to check the capabilities of the
    used bus.
    
    Signed-off-by: Markus Pargmann <mpa@pengutronix.de>
    Signed-off-by: Mark Brown <broonie@kernel.org>

diff --git a/drivers/base/regmap/internal.h b/drivers/base/regmap/internal.h
index b2b2849fc6d3..d744ae3926dd 100644
--- a/drivers/base/regmap/internal.h
+++ b/drivers/base/regmap/internal.h
@@ -139,8 +139,10 @@ struct regmap {
 	struct reg_default *patch;
 	int patch_regs;
 
-	/* if set, converts bulk rw to single rw */
-	bool use_single_rw;
+	/* if set, converts bulk read to single read */
+	bool use_single_read;
+	/* if set, converts bulk read to single read */
+	bool use_single_write;
 	/* if set, the device supports multi write mode */
 	bool can_multi_write;
 

commit 8019ff6cfc0440415fcfb6352c58c3951e6ab053
Author: Nariman Poushin <nariman@opensource.wolfsonmicro.com>
Date:   Thu Jul 16 16:36:21 2015 +0100

    regmap: Use reg_sequence for multi_reg_write / register_patch
    
    Separate the functionality using sequences of register writes from the
    functions that take register defaults. This change renames the arguments
    in order to support the extension of reg_sequence to take an optional
    delay to be applied after any given register in a sequence is written.
    This avoids adding an int to all register defaults, which could
    substantially increase memory usage for regmaps with large default tables.
    
    This also updates all the clients of multi_reg_write/register_patch.
    
    Signed-off-by: Nariman Poushin <nariman@opensource.wolfsonmicro.com>
    Signed-off-by: Mark Brown <broonie@kernel.org>

diff --git a/drivers/base/regmap/internal.h b/drivers/base/regmap/internal.h
index b2b2849fc6d3..873ddf91c9d3 100644
--- a/drivers/base/regmap/internal.h
+++ b/drivers/base/regmap/internal.h
@@ -136,7 +136,7 @@ struct regmap {
 	/* if set, the HW registers are known to match map->reg_defaults */
 	bool no_sync_defaults;
 
-	struct reg_default *patch;
+	struct reg_sequence *patch;
 	int patch_regs;
 
 	/* if set, converts bulk rw to single rw */

commit 1c79771a7270278e6ff486edf4dfeb8c4fc01ee0
Author: Kevin Cernekee <cernekee@chromium.org>
Date:   Tue May 5 15:14:14 2015 -0700

    regmap: Use regcache_mark_dirty() to indicate power loss or reset
    
    Existing regmap users call regcache_mark_dirty() as part of the
    suspend/resume sequence, to tell regcache that non-default values need to
    be resynced post-resume.  Add an internal "no_sync_defaults" regmap flag
    to remember this state, so that regcache_sync() can differentiate between
    these two cases:
    
    1) HW was reset, so any cache values that match map->reg_defaults can be
    safely skipped.  On some chips there are a lot of registers in the
    reg_defaults list, so this optimization speeds things up quite a bit.
    
    2) HW was not reset (maybe it was just clock-gated), so if we cached
    any writes, they should be sent to the hardware regardless of whether
    they match the HW default.  Currently this will write out all values in
    the regcache, since we don't maintain per-register dirty bits.
    
    Suggested-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Kevin Cernekee <cernekee@chromium.org>
    Signed-off-by: Mark Brown <broonie@kernel.org>

diff --git a/drivers/base/regmap/internal.h b/drivers/base/regmap/internal.h
index a13587b5c2be..b2b2849fc6d3 100644
--- a/drivers/base/regmap/internal.h
+++ b/drivers/base/regmap/internal.h
@@ -131,7 +131,10 @@ struct regmap {
 	struct reg_default *reg_defaults;
 	const void *reg_defaults_raw;
 	void *cache;
+	/* if set, the cache contains newer data than the HW */
 	u32 cache_dirty;
+	/* if set, the HW registers are known to match map->reg_defaults */
+	bool no_sync_defaults;
 
 	struct reg_default *patch;
 	int patch_regs;

commit c6b570d97c0e77f570bb6b2ed30d372b2b1e9aae
Author: Philipp Zabel <p.zabel@pengutronix.de>
Date:   Mon Mar 9 12:20:13 2015 +0100

    regmap: introduce regmap_name to fix syscon regmap trace events
    
    This patch fixes a NULL pointer dereference when enabling regmap event
    tracing in the presence of a syscon regmap, introduced by commit bdb0066df96e
    ("mfd: syscon: Decouple syscon interface from platform devices").
    That patch introduced syscon regmaps that have their dev field set to NULL.
    The regmap trace events expect it to point to a valid struct device and feed
    it to dev_name():
    
      $ echo 1 > /sys/kernel/debug/tracing/events/regmap/enable
    
      Unable to handle kernel NULL pointer dereference at virtual address 0000002c
      pgd = 80004000
      [0000002c] *pgd=00000000
      Internal error: Oops: 17 [#1] SMP ARM
      Modules linked in: coda videobuf2_vmalloc
      CPU: 0 PID: 304 Comm: kworker/0:2 Not tainted 4.0.0-rc2+ #9197
      Hardware name: Freescale i.MX6 Quad/DualLite (Device Tree)
      Workqueue: events_freezable thermal_zone_device_check
      task: 9f25a200 ti: 9f1ee000 task.ti: 9f1ee000
      PC is at ftrace_raw_event_regmap_block+0x3c/0xe4
      LR is at _regmap_raw_read+0x1bc/0x1cc
      pc : [<803636e8>]    lr : [<80365f2c>]    psr: 600f0093
      sp : 9f1efd78  ip : 9f1efdb8  fp : 9f1efdb4
      r10: 00000004  r9 : 00000001  r8 : 00000001
      r7 : 00000180  r6 : 00000000  r5 : 9f00e3c0  r4 : 00000003
      r3 : 00000001  r2 : 00000180  r1 : 00000000  r0 : 9f00e3c0
      Flags: nZCv  IRQs off  FIQs on  Mode SVC_32  ISA ARM  Segment kernel
      Control: 10c5387d  Table: 2d91004a  DAC: 00000015
      Process kworker/0:2 (pid: 304, stack limit = 0x9f1ee210)
      Stack: (0x9f1efd78 to 0x9f1f0000)
      fd60:                                                       9f1efda4 9f1efd88
      fd80: 800708c0 805f9510 80927140 800f0013 9f1fc800 9eb2f490 00000000 00000180
      fda0: 808e3840 00000001 9f1efdfc 9f1efdb8 80365f2c 803636b8 805f8958 800708e0
      fdc0: a00f0013 803636ac 9f16de00 00000180 80927140 9f1fc800 9f1fc800 9f1efe6c
      fde0: 9f1efe6c 9f732400 00000000 00000000 9f1efe1c 9f1efe00 80365f70 80365d7c
      fe00: 80365f3c 9f1fc800 9f1fc800 00000180 9f1efe44 9f1efe20 803656a4 80365f48
      fe20: 9f1fc800 00000180 9f1efe6c 9f1efe6c 9f732400 00000000 9f1efe64 9f1efe48
      fe40: 803657bc 80365634 00000001 9e95f910 9f1fc800 9f1efeb4 9f1efe8c 9f1efe68
      fe60: 80452ac0 80365778 9f1efe8c 9f1efe78 9e93d400 9e93d5e8 9f1efeb4 9f72ef40
      fe80: 9f1efeac 9f1efe90 8044e11c 80452998 8045298c 9e93d608 9e93d400 808e1978
      fea0: 9f1efecc 9f1efeb0 8044fd14 8044e0d0 ffffffff 9f25a200 9e93d608 9e481380
      fec0: 9f1efedc 9f1efed0 8044fde8 8044fcec 9f1eff1c 9f1efee0 80038d50 8044fdd8
      fee0: 9f1ee020 9f72ef40 9e481398 00000000 00000008 9f72ef54 9f1ee020 9f72ef40
      ff00: 9e481398 9e481380 00000008 9f72ef40 9f1eff5c 9f1eff20 80039754 80038bfc
      ff20: 00000000 9e481380 80894100 808e1662 00000000 9e4f2ec0 00000000 9e481380
      ff40: 800396f8 00000000 00000000 00000000 9f1effac 9f1eff60 8003e020 80039704
      ff60: ffffffff 00000000 ffffffff 9e481380 00000000 00000000 9f1eff78 9f1eff78
      ff80: 00000000 00000000 9f1eff88 9f1eff88 9e4f2ec0 8003df30 00000000 00000000
      ffa0: 00000000 9f1effb0 8000eb60 8003df3c 00000000 00000000 00000000 00000000
      ffc0: 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000
      ffe0: 00000000 00000000 00000000 00000000 00000013 00000000 ffffffff ffffffff
      Backtrace:
      [<803636ac>] (ftrace_raw_event_regmap_block) from [<80365f2c>] (_regmap_raw_read+0x1bc/0x1cc)
       r9:00000001 r8:808e3840 r7:00000180 r6:00000000 r5:9eb2f490 r4:9f1fc800
      [<80365d70>] (_regmap_raw_read) from [<80365f70>] (_regmap_bus_read+0x34/0x6c)
       r10:00000000 r9:00000000 r8:9f732400 r7:9f1efe6c r6:9f1efe6c r5:9f1fc800
       r4:9f1fc800
      [<80365f3c>] (_regmap_bus_read) from [<803656a4>] (_regmap_read+0x7c/0x144)
       r6:00000180 r5:9f1fc800 r4:9f1fc800 r3:80365f3c
      [<80365628>] (_regmap_read) from [<803657bc>] (regmap_read+0x50/0x70)
       r9:00000000 r8:9f732400 r7:9f1efe6c r6:9f1efe6c r5:00000180 r4:9f1fc800
      [<8036576c>] (regmap_read) from [<80452ac0>] (imx_get_temp+0x134/0x1a4)
       r6:9f1efeb4 r5:9f1fc800 r4:9e95f910 r3:00000001
      [<8045298c>] (imx_get_temp) from [<8044e11c>] (thermal_zone_get_temp+0x58/0x74)
       r7:9f72ef40 r6:9f1efeb4 r5:9e93d5e8 r4:9e93d400
      [<8044e0c4>] (thermal_zone_get_temp) from [<8044fd14>] (thermal_zone_device_update+0x34/0xec)
       r6:808e1978 r5:9e93d400 r4:9e93d608 r3:8045298c
      [<8044fce0>] (thermal_zone_device_update) from [<8044fde8>] (thermal_zone_device_check+0x1c/0x20)
       r5:9e481380 r4:9e93d608
      [<8044fdcc>] (thermal_zone_device_check) from [<80038d50>] (process_one_work+0x160/0x3d4)
      [<80038bf0>] (process_one_work) from [<80039754>] (worker_thread+0x5c/0x4f4)
       r10:9f72ef40 r9:00000008 r8:9e481380 r7:9e481398 r6:9f72ef40 r5:9f1ee020
       r4:9f72ef54
      [<800396f8>] (worker_thread) from [<8003e020>] (kthread+0xf0/0x108)
       r10:00000000 r9:00000000 r8:00000000 r7:800396f8 r6:9e481380 r5:00000000
       r4:9e4f2ec0
      [<8003df30>] (kthread) from [<8000eb60>] (ret_from_fork+0x14/0x34)
       r7:00000000 r6:00000000 r5:8003df30 r4:9e4f2ec0
      Code: e3140040 1a00001a e3140020 1a000016 (e596002c)
      ---[ end trace 193c15c2494ec960 ]---
    
    Fixes: bdb0066df96e (mfd: syscon: Decouple syscon interface from platform devices)
    Signed-off-by: Philipp Zabel <p.zabel@pengutronix.de>
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Cc: stable@vger.kernel.org

diff --git a/drivers/base/regmap/internal.h b/drivers/base/regmap/internal.h
index beb8b27d4621..a13587b5c2be 100644
--- a/drivers/base/regmap/internal.h
+++ b/drivers/base/regmap/internal.h
@@ -243,4 +243,12 @@ extern struct regcache_ops regcache_rbtree_ops;
 extern struct regcache_ops regcache_lzo_ops;
 extern struct regcache_ops regcache_flat_ops;
 
+static inline const char *regmap_name(const struct regmap *map)
+{
+	if (map->dev)
+		return dev_name(map->dev);
+
+	return map->name;
+}
+
 #endif

commit 1aff0310ebdd42fa0045440cee19c5a8cfecf70c
Merge: dfdb3c4d1822 927db287ba02 f27b37f5993a 5892ded23c8e
Author: Mark Brown <broonie@kernel.org>
Date:   Sun Feb 8 11:16:11 2015 +0800

    Merge remote-tracking branches 'regmap/topic/ac97', 'regmap/topic/doc' and 'regmap/topic/smbus' into regmap-next

commit 3c174d29263b1954171cf857a9bf59dcbe527875
Author: Guenter Roeck <linux@roeck-us.net>
Date:   Tue Feb 3 10:01:18 2015 -0800

    regmap: Export regmap_get_val_endian
    
    We'll need to call it from regmap-i2c.c, which can be built as module.
    
    Signed-off-by: Guenter Roeck <linux@roeck-us.net>
    Signed-off-by: Mark Brown <broonie@kernel.org>

diff --git a/drivers/base/regmap/internal.h b/drivers/base/regmap/internal.h
index 0da5865df5b1..c49a79edae52 100644
--- a/drivers/base/regmap/internal.h
+++ b/drivers/base/regmap/internal.h
@@ -233,6 +233,10 @@ int _regmap_raw_write(struct regmap *map, unsigned int reg,
 
 void regmap_async_complete_cb(struct regmap_async *async, int ret);
 
+enum regmap_endian regmap_get_val_endian(struct device *dev,
+					 const struct regmap_bus *bus,
+					 const struct regmap_config *config);
+
 extern struct regcache_ops regcache_rbtree_ops;
 extern struct regcache_ops regcache_lzo_ops;
 extern struct regcache_ops regcache_flat_ops;

commit f93d1be217d89f258f0108a8cd64b98cb8fa9e73
Author: Wang, Yalin <Yalin.Wang@sonymobile.com>
Date:   Mon Dec 15 16:05:50 2014 +0800

    regmap: Move spinlock_flags into the union
    
    This patch move struct regmap.spinlock_flags into the union of
    spinlock, so that we can shrink struct regmap size.
    
    Signed-off-by: Yalin Wang <yalin.wang@sonymobile.com>
    Signed-off-by: Mark Brown <broonie@kernel.org>

diff --git a/drivers/base/regmap/internal.h b/drivers/base/regmap/internal.h
index 0da5865df5b1..8e94584b0d26 100644
--- a/drivers/base/regmap/internal.h
+++ b/drivers/base/regmap/internal.h
@@ -51,9 +51,11 @@ struct regmap_async {
 struct regmap {
 	union {
 		struct mutex mutex;
-		spinlock_t spinlock;
+		struct {
+			spinlock_t spinlock;
+			unsigned long spinlock_flags;
+		};
 	};
-	unsigned long spinlock_flags;
 	regmap_lock lock;
 	regmap_unlock unlock;
 	void *lock_arg; /* This is passed to lock/unlock functions */

commit 88507a2ba8b453a38b950f3ccb2cae6cc4d82e7a
Merge: 18a64d844c0e 336fb81b319e
Author: Mark Brown <broonie@kernel.org>
Date:   Mon Sep 29 20:49:41 2014 +0100

    Merge remote-tracking branch 'regmap/topic/core' into regmap-next

commit 336fb81b319ec4d5c09aa6417de7c042cfcd7461
Author: Wang, Yalin <Yalin.Wang@sonymobile.com>
Date:   Thu Sep 11 16:19:49 2014 +0800

    regmap: change struct regmap's internal locks as union
    
    this patch change struct regmap->mutex and struct regmap->spinlock
    as an union, because these 2 members are only used one of them,
    we change it to shrink the struct size.
    
    Signed-off-by: Yalin Wang <yalin.wang@sonymobile.com>
    Signed-off-by: Mark Brown <broonie@kernel.org>

diff --git a/drivers/base/regmap/internal.h b/drivers/base/regmap/internal.h
index 7d1326985bee..f82e8faa5d93 100644
--- a/drivers/base/regmap/internal.h
+++ b/drivers/base/regmap/internal.h
@@ -49,8 +49,10 @@ struct regmap_async {
 };
 
 struct regmap {
-	struct mutex mutex;
-	spinlock_t spinlock;
+	union {
+		struct mutex mutex;
+		spinlock_t spinlock;
+	};
 	unsigned long spinlock_flags;
 	regmap_lock lock;
 	regmap_unlock unlock;

commit 5e0cbe78762b5f02986bf9e59a188dad2f6e0be1
Author: Lars-Peter Clausen <lars@metafoo.de>
Date:   Sun Aug 24 15:32:27 2014 +0200

    regmap: Fix regcache debugfs initialization
    
    Commit 6cfec04bcc05 ("regmap: Separate regmap dev initialization") moved the
    regmap debugfs initialization after regcache initialization. This means
    that the regmap debugfs directory is not created yet when the cache
    initialization runs and so any debugfs files registered by the regcache are
    created in the debugfs root directory rather than the debugfs directory of
    the regmap instance. Fix this by adding a separate callback for the
    regcache debugfs initialization which will be called after the parent
    debugfs entry has been created.
    
    Fixes: 6cfec04bcc05 (regmap: Separate regmap dev initialization)
    Signed-off-by: Lars-Peter Clausen <lars@metafoo.de>
    Signed-off-by: Mark Brown <broonie@linaro.org>
    Cc: stable@vger.kernel.org

diff --git a/drivers/base/regmap/internal.h b/drivers/base/regmap/internal.h
index 7d1326985bee..bfc90b8547f2 100644
--- a/drivers/base/regmap/internal.h
+++ b/drivers/base/regmap/internal.h
@@ -146,6 +146,9 @@ struct regcache_ops {
 	enum regcache_type type;
 	int (*init)(struct regmap *map);
 	int (*exit)(struct regmap *map);
+#ifdef CONFIG_DEBUG_FS
+	void (*debugfs_init)(struct regmap *map);
+#endif
 	int (*read)(struct regmap *map, unsigned int reg, unsigned int *value);
 	int (*write)(struct regmap *map, unsigned int reg, unsigned int value);
 	int (*sync)(struct regmap *map, unsigned int min, unsigned int max);

commit e894c3f46c302716d2f156b1f3339e2f96ceb65c
Author: Opensource [Anthony Olech] <anthony.olech.opensource@diasemi.com>
Date:   Tue Mar 4 13:54:02 2014 +0000

    regmap: Implementation for regmap_multi_reg_write
    
    This is the implementation of regmap_multi_reg_write()
    
    There is a new capability 'can_multi_write' that device drivers
    must set in order to use this multi reg write mode.
    
    This replaces the first definition, which just defined the API.
    
    Signed-off-by: Anthony Olech <anthony.olech.opensource@diasemi.com>
    Signed-off-by: Mark Brown <broonie@linaro.org>

diff --git a/drivers/base/regmap/internal.h b/drivers/base/regmap/internal.h
index 33414b1de201..7d1326985bee 100644
--- a/drivers/base/regmap/internal.h
+++ b/drivers/base/regmap/internal.h
@@ -134,6 +134,8 @@ struct regmap {
 
 	/* if set, converts bulk rw to single rw */
 	bool use_single_rw;
+	/* if set, the device supports multi write mode */
+	bool can_multi_write;
 
 	struct rb_root range_tree;
 	void *selector_work_buf;	/* Scratch buffer used for selector */

commit f2783f0e9cac215df5b7ee0a903adfeabde90b24
Merge: bee54e310e57 a0102375ee82
Author: Mark Brown <broonie@linaro.org>
Date:   Mon Oct 28 13:01:33 2013 -0700

    Merge remote-tracking branch 'regmap/topic/field' into regmap-next

commit 0a8198094da895c8d5db95812fe9de7027d808e4
Author: Mark Brown <broonie@linaro.org>
Date:   Wed Oct 9 12:28:52 2013 +0100

    regmap: Simplify the initiation of async I/O
    
    Rather than passing a flag around through the entire call stack store it
    in the regmap struct and read it when required. This minimises the
    visibility of the feature through the API, minimising the code updates
    needed to use it more widely.
    
    Signed-off-by: Mark Brown <broonie@linaro.org>

diff --git a/drivers/base/regmap/internal.h b/drivers/base/regmap/internal.h
index 793ebe207c8a..6873b4ce03f9 100644
--- a/drivers/base/regmap/internal.h
+++ b/drivers/base/regmap/internal.h
@@ -63,6 +63,7 @@ struct regmap {
 	void *bus_context;
 	const char *name;
 
+	bool async;
 	spinlock_t async_lock;
 	wait_queue_head_t async_waitq;
 	struct list_head async_list;
@@ -218,7 +219,7 @@ bool regcache_set_val(struct regmap *map, void *base, unsigned int idx,
 int regcache_lookup_reg(struct regmap *map, unsigned int reg);
 
 int _regmap_raw_write(struct regmap *map, unsigned int reg,
-		      const void *val, size_t val_len, bool async);
+		      const void *val, size_t val_len);
 
 void regmap_async_complete_cb(struct regmap_async *async, int ret);
 

commit 7e09a979404ed07b8f05d09a0e87a87c7891f472
Author: Mark Brown <broonie@linaro.org>
Date:   Mon Oct 7 23:00:24 2013 +0100

    regmap: Cache async work structures
    
    Rather than allocating and deallocating the structures used to manage async
    transfers each time we do one keep the structures around as long as the
    regmap is around. This should provide a small performance improvement.
    
    Signed-off-by: Mark Brown <broonie@linaro.org>

diff --git a/drivers/base/regmap/internal.h b/drivers/base/regmap/internal.h
index 57f777835d97..793ebe207c8a 100644
--- a/drivers/base/regmap/internal.h
+++ b/drivers/base/regmap/internal.h
@@ -44,7 +44,6 @@ struct regmap_format {
 
 struct regmap_async {
 	struct list_head list;
-	struct work_struct cleanup;
 	struct regmap *map;
 	void *work_buf;
 };
@@ -67,6 +66,7 @@ struct regmap {
 	spinlock_t async_lock;
 	wait_queue_head_t async_waitq;
 	struct list_head async_list;
+	struct list_head async_free;
 	int async_ret;
 
 #ifdef CONFIG_DEBUG_FS

commit a0102375ee82db1e08324b1a21484854cf2c1677
Author: Kuninori Morimoto <kuninori.morimoto.gx@renesas.com>
Date:   Sun Sep 1 20:30:50 2013 -0700

    regmap: Add regmap_fields APIs
    
    Current Linux kernel is supporting regmap_field method
    and it is very useful feature.
    It needs one regmap_filed for one register access.
    
    OTOH, there is multi port device which
    has many same registers in the market.
    The difference for each register access is
    only its address offset.
    
    Current API needs many regmap_field for such device,
    but it is not good.
    This patch adds new regmap_fileds API which can care
    about multi port/offset access via regmap.
    
    Signed-off-by: Kuninori Morimoto <kuninori.morimoto.gx@renesas.com>
    Signed-off-by: Mark Brown <broonie@linaro.org>

diff --git a/drivers/base/regmap/internal.h b/drivers/base/regmap/internal.h
index 57f777835d97..9010614f7793 100644
--- a/drivers/base/regmap/internal.h
+++ b/drivers/base/regmap/internal.h
@@ -179,6 +179,9 @@ struct regmap_field {
 	/* lsb */
 	unsigned int shift;
 	unsigned int reg;
+
+	unsigned int id_size;
+	unsigned int id_offset;
 };
 
 #ifdef CONFIG_DEBUG_FS

commit 3f4ff561bc88b074d5e868dde4012d89cbb06c87
Author: Lars-Peter Clausen <lars@metafoo.de>
Date:   Thu Aug 29 10:26:34 2013 +0200

    regmap: rbtree: Make cache_present bitmap per node
    
    With devices which have a dense and small register map but placed at a large
    offset the global cache_present bitmap imposes a huge memory overhead. Making
    the cache_present per rbtree node avoids the issue and easily reduces the memory
    footprint by a factor of ten. For devices with a more sparse map or without a
    large base register offset the memory usage might increase slightly by a few
    bytes, but not significantly. E.g. for a device which has ~50 registers at
    offset 0x4000 the memory footprint of the register cache goes down form 2496
    bytes to 175 bytes.
    
    Moving the bitmap to a per node basis means that the handling of the bitmap is
    now cache implementation specific and can no longer be managed by the core. The
    regcache_sync_block() function is extended by a additional parameter so that the
    cache implementation can tell the core which registers in the block are set and
    which are not. The parameter is optional and if NULL the core assumes that all
    registers are set. The rbtree cache also needs to implement its own drop
    callback instead of relying on the core to handle this.
    
    Signed-off-by: Lars-Peter Clausen <lars@metafoo.de>
    Signed-off-by: Mark Brown <broonie@linaro.org>

diff --git a/drivers/base/regmap/internal.h b/drivers/base/regmap/internal.h
index 5308e3e870ba..57f777835d97 100644
--- a/drivers/base/regmap/internal.h
+++ b/drivers/base/regmap/internal.h
@@ -128,9 +128,6 @@ struct regmap {
 	void *cache;
 	u32 cache_dirty;
 
-	unsigned long *cache_present;
-	unsigned int cache_present_nbits;
-
 	struct reg_default *patch;
 	int patch_regs;
 
@@ -203,6 +200,7 @@ int regcache_write(struct regmap *map,
 			unsigned int reg, unsigned int value);
 int regcache_sync(struct regmap *map);
 int regcache_sync_block(struct regmap *map, void *block,
+			unsigned long *cache_present,
 			unsigned int block_base, unsigned int start,
 			unsigned int end);
 
@@ -218,16 +216,6 @@ unsigned int regcache_get_val(struct regmap *map, const void *base,
 bool regcache_set_val(struct regmap *map, void *base, unsigned int idx,
 		      unsigned int val);
 int regcache_lookup_reg(struct regmap *map, unsigned int reg);
-int regcache_set_reg_present(struct regmap *map, unsigned int reg);
-
-static inline bool regcache_reg_present(struct regmap *map, unsigned int reg)
-{
-	if (!map->cache_present)
-		return false;
-	if (reg > map->cache_present_nbits)
-		return false;
-	return map->cache_present[BIT_WORD(reg)] & BIT_MASK(reg);
-}
 
 int _regmap_raw_write(struct regmap *map, unsigned int reg,
 		      const void *val, size_t val_len, bool async);

commit 1767da9e8e9a1dc1416d6bb1029b8cf5659dac2a
Author: Ionut Nicu <ioan.nicu.ext@nsn.com>
Date:   Fri Aug 9 12:09:15 2013 +0200

    regmap: fix regcache_reg_present() for empty cache
    
    In the initial case when no reg_defaults values are
    provided and no register value was added to the cache
    yet, the cache_present bitmap is NULL. If this function
    is invoked for any register it should return false
    (i.e. the register is not cached) instead of true.
    
    Signed-off-by: Ionut Nicu <ioan.nicu.ext@nsn.com>
    Signed-off-by: Mark Brown <broonie@linaro.org>

diff --git a/drivers/base/regmap/internal.h b/drivers/base/regmap/internal.h
index 29c83160ca29..5308e3e870ba 100644
--- a/drivers/base/regmap/internal.h
+++ b/drivers/base/regmap/internal.h
@@ -223,7 +223,7 @@ int regcache_set_reg_present(struct regmap *map, unsigned int reg);
 static inline bool regcache_reg_present(struct regmap *map, unsigned int reg)
 {
 	if (!map->cache_present)
-		return true;
+		return false;
 	if (reg > map->cache_present_nbits)
 		return false;
 	return map->cache_present[BIT_WORD(reg)] & BIT_MASK(reg);

commit 7bc8c4c37aea74332b16ffb5412a8ad355d508ce
Merge: ad4f496b445e 539fde59ebc6
Author: Mark Brown <broonie@linaro.org>
Date:   Sun Jun 30 12:40:03 2013 +0100

    Merge remote-tracking branch 'regmap/topic/field' into regmap-next

commit 67252287871113deba96adf7e4df1752f3f08688
Author: Srinivas Kandagatla <srinivas.kandagatla@st.com>
Date:   Tue Jun 11 13:18:15 2013 +0100

    regmap: Add regmap_field APIs
    
    It is common to access regmap registers at bit level, using
    regmap_update_bits or regmap_read functions, however the end user has to
    take care of a mask or shifting. This becomes overhead when such use
    cases are high. Having a common function to do this is much convenient
    and less error prone.
    
    The idea of regmap_field is simple, regmap_field gives a logical
    structure to bits of the regmap register, and the driver can use this
    logical entity without the knowledge of the bit positions and masks all
    over the code. This way code looks much neat and it need not handle the
    masks, shifts every time it access the those entities.
    
    With this new regmap_field_read/write apis the end user can setup a
    regmap field using regmap_field_init and use the return regmap_field to
    read write the register field without worrying about the masks or
    shifts.
    
    Also this apis will be useful for drivers which are based on regmaps,
    like some clocks or pinctrls which can work on the regmap_fields
    directly without having to worry about bit positions.
    
    Signed-off-by: Srinivas Kandagatla <srinivas.kandagatla@st.com>
    Signed-off-by: Mark Brown <broonie@linaro.org>

diff --git a/drivers/base/regmap/internal.h b/drivers/base/regmap/internal.h
index c130536e0ab0..c5f6ebd0466d 100644
--- a/drivers/base/regmap/internal.h
+++ b/drivers/base/regmap/internal.h
@@ -174,6 +174,14 @@ struct regmap_range_node {
 	unsigned int window_len;
 };
 
+struct regmap_field {
+	struct regmap *regmap;
+	unsigned int mask;
+	/* lsb */
+	unsigned int shift;
+	unsigned int reg;
+};
+
 #ifdef CONFIG_DEBUG_FS
 extern void regmap_debugfs_initcall(void);
 extern void regmap_debugfs_init(struct regmap *map, const char *name);

commit 92ab1aab59c61b3e05200b9aa0e05ab770059142
Author: Lars-Peter Clausen <lars@metafoo.de>
Date:   Fri May 24 10:29:22 2013 +0200

    regmap: Make regmap-mmio usable from atomic contexts
    
    regmap-mmio uses a spinlock with spin_lock() and spin_unlock() for locking.
    To be able to use the regmap API from different contexts (atomic vs non-atomic),
    without the risk of race conditions, we need to use spin_lock_irqsave() and
    spin_lock_irqrestore() instead. A new field, the spinlock_flags field, is added
    to regmap struct to store the flags between regmap_{,un}lock_spinlock(). The
    spinlock_flags field itself is also protected by the spinlock.
    
    Thanks to Stephen Warren for the suggestion of this particular solution.
    
    Signed-off-by: Lars-Peter Clausen <lars@metafoo.de>
    Reviewed-by: Stephen Warren <swarren@nvidia.com>
    Signed-off-by: Mark Brown <broonie@opensource.wolfsonmicro.com>

diff --git a/drivers/base/regmap/internal.h b/drivers/base/regmap/internal.h
index b33a4ff67adf..ae23d8391aa0 100644
--- a/drivers/base/regmap/internal.h
+++ b/drivers/base/regmap/internal.h
@@ -52,6 +52,7 @@ struct regmap_async {
 struct regmap {
 	struct mutex mutex;
 	spinlock_t spinlock;
+	unsigned long spinlock_flags;
 	regmap_lock lock;
 	regmap_unlock unlock;
 	void *lock_arg; /* This is passed to lock/unlock functions */

commit 697e85bc6a9aa44ecd73392586fe9cfd7e0467ba
Author: Mark Brown <broonie@opensource.wolfsonmicro.com>
Date:   Wed May 8 13:55:22 2013 +0100

    regmap: Add support for discarding parts of the register cache
    
    Allow drivers to discard parts of the register cache, for example if part
    of the hardware has been reset.
    
    Signed-off-by: Mark Brown <broonie@opensource.wolfsonmicro.com>

diff --git a/drivers/base/regmap/internal.h b/drivers/base/regmap/internal.h
index c130536e0ab0..b33a4ff67adf 100644
--- a/drivers/base/regmap/internal.h
+++ b/drivers/base/regmap/internal.h
@@ -148,6 +148,7 @@ struct regcache_ops {
 	int (*read)(struct regmap *map, unsigned int reg, unsigned int *value);
 	int (*write)(struct regmap *map, unsigned int reg, unsigned int value);
 	int (*sync)(struct regmap *map, unsigned int min, unsigned int max);
+	int (*drop)(struct regmap *map, unsigned int min, unsigned int max);
 };
 
 bool regmap_writeable(struct regmap *map, unsigned int reg);

commit 38a817965d2d624b0db68f3bf5ae783ad7f2087a
Merge: 7f47db4006f5 065b4c587557
Author: Mark Brown <broonie@opensource.wolfsonmicro.com>
Date:   Tue Apr 16 16:05:50 2013 +0100

    Merge remote-tracking branch 'regmap/topic/range' into regmap-next

commit f8bd822cbf953299b2957b45f6a43c08e7931ddc
Author: Mark Brown <broonie@opensource.wolfsonmicro.com>
Date:   Fri Mar 29 19:32:28 2013 +0000

    regmap: cache: Factor out block sync
    
    The idea of holding blocks of registers in device format is shared between
    at least rbtree and lzo cache formats so split out the loop that does the
    sync from the rbtree code so optimisations on it can be reused.
    
    Signed-off-by: Mark Brown <broonie@opensource.wolfsonmicro.com>
    Reviewed-by: Dimitris Papastamos <dp@opensource.wolfsonmicro.com>

diff --git a/drivers/base/regmap/internal.h b/drivers/base/regmap/internal.h
index b01fe59fbfe8..01fbe48e8155 100644
--- a/drivers/base/regmap/internal.h
+++ b/drivers/base/regmap/internal.h
@@ -191,6 +191,9 @@ int regcache_read(struct regmap *map,
 int regcache_write(struct regmap *map,
 			unsigned int reg, unsigned int value);
 int regcache_sync(struct regmap *map);
+int regcache_sync_block(struct regmap *map, void *block,
+			unsigned int block_base, unsigned int start,
+			unsigned int end);
 
 static inline const void *regcache_get_val_addr(struct regmap *map,
 						const void *base,

commit 78493f2d7b51d6f6d03982cee559c62dfab4c292
Author: Mark Brown <broonie@opensource.wolfsonmicro.com>
Date:   Fri Mar 29 19:18:59 2013 +0000

    regmap: cache: Factor out reg_present support from rbtree cache
    
    The idea of maintaining a bitmap of present registers is something that
    can usefully be used by other cache types that maintain blocks of cached
    registers so move the code out of the rbtree cache and into the generic
    regcache code.
    
    Refactor the interface slightly as we go to wrap the set bit and enlarge
    bitmap operations (since we never do one without the other) and make it
    more robust for reads of uncached registers by bounds checking before we
    look at the bitmap.
    
    Signed-off-by: Mark Brown <broonie@opensource.wolfsonmicro.com>
    Reviewed-by: Dimitris Papastamos <dp@opensource.wolfsonmicro.com>

diff --git a/drivers/base/regmap/internal.h b/drivers/base/regmap/internal.h
index 95d46a5ea7e7..b01fe59fbfe8 100644
--- a/drivers/base/regmap/internal.h
+++ b/drivers/base/regmap/internal.h
@@ -126,6 +126,9 @@ struct regmap {
 	void *cache;
 	u32 cache_dirty;
 
+	unsigned long *cache_present;
+	unsigned int cache_present_nbits;
+
 	struct reg_default *patch;
 	int patch_regs;
 
@@ -201,6 +204,16 @@ unsigned int regcache_get_val(struct regmap *map, const void *base,
 bool regcache_set_val(struct regmap *map, void *base, unsigned int idx,
 		      unsigned int val);
 int regcache_lookup_reg(struct regmap *map, unsigned int reg);
+int regcache_set_reg_present(struct regmap *map, unsigned int reg);
+
+static inline bool regcache_reg_present(struct regmap *map, unsigned int reg)
+{
+	if (!map->cache_present)
+		return true;
+	if (reg > map->cache_present_nbits)
+		return false;
+	return map->cache_present[BIT_WORD(reg)] & BIT_MASK(reg);
+}
 
 int _regmap_raw_write(struct regmap *map, unsigned int reg,
 		      const void *val, size_t val_len, bool async);

commit 8817796b75c8847d63d6d4523c79c24b47748a05
Author: Mark Brown <broonie@opensource.wolfsonmicro.com>
Date:   Wed Mar 13 19:29:36 2013 +0000

    regmap: cache: Provide a get address of value operation
    
    Provide a helper to do the size based index into a block of registers and
    use it when reading a value.
    
    Signed-off-by: Mark Brown <broonie@opensource.wolfsonmicro.com>

diff --git a/drivers/base/regmap/internal.h b/drivers/base/regmap/internal.h
index 6d409350f50a..95d46a5ea7e7 100644
--- a/drivers/base/regmap/internal.h
+++ b/drivers/base/regmap/internal.h
@@ -189,6 +189,13 @@ int regcache_write(struct regmap *map,
 			unsigned int reg, unsigned int value);
 int regcache_sync(struct regmap *map);
 
+static inline const void *regcache_get_val_addr(struct regmap *map,
+						const void *base,
+						unsigned int idx)
+{
+	return base + (map->cache_word_size * idx);
+}
+
 unsigned int regcache_get_val(struct regmap *map, const void *base,
 			      unsigned int idx);
 bool regcache_set_val(struct regmap *map, void *base, unsigned int idx,

commit 584de329ca43cc6d73eb74885e1d5d9fc0549423
Author: Mark Brown <broonie@opensource.wolfsonmicro.com>
Date:   Wed Mar 13 19:19:34 2013 +0000

    regmap: core: Make raw write available to regcache
    
    This allows the cache to sync values directly to the device when stored
    in native format and also allows asynchronous I/O.
    
    Signed-off-by: Mark Brown <broonie@opensource.wolfsonmicro.com>

diff --git a/drivers/base/regmap/internal.h b/drivers/base/regmap/internal.h
index 2b5851d42dbb..6d409350f50a 100644
--- a/drivers/base/regmap/internal.h
+++ b/drivers/base/regmap/internal.h
@@ -195,6 +195,9 @@ bool regcache_set_val(struct regmap *map, void *base, unsigned int idx,
 		      unsigned int val);
 int regcache_lookup_reg(struct regmap *map, unsigned int reg);
 
+int _regmap_raw_write(struct regmap *map, unsigned int reg,
+		      const void *val, size_t val_len, bool async);
+
 void regmap_async_complete_cb(struct regmap_async *async, int ret);
 
 extern struct regcache_ops regcache_rbtree_ops;

commit 065b4c587557dcd3dc8d3ff1ba2b9ecc6e0c6668
Author: Dimitris Papastamos <dp@opensource.wolfsonmicro.com>
Date:   Wed Feb 20 12:15:23 2013 +0000

    regmap: debugfs: Add a registers `range' file
    
    This file lists the register ranges in the register map.  The condition
    to split the range is based on whether the block is readable or not.
    
    Ensure that we lock the `debugfs_off_cache' list whenever we access
    and modify the list.  There is a possible race otherwise between the
    read() operations of the `registers' file and the `range' file.
    
    Signed-off-by: Dimitris Papastamos <dp@opensource.wolfsonmicro.com>
    Signed-off-by: Mark Brown <broonie@opensource.wolfsonmicro.com>

diff --git a/drivers/base/regmap/internal.h b/drivers/base/regmap/internal.h
index 5a22bd33ce3d..dc23508745fe 100644
--- a/drivers/base/regmap/internal.h
+++ b/drivers/base/regmap/internal.h
@@ -76,6 +76,7 @@ struct regmap {
 	unsigned int debugfs_tot_len;
 
 	struct list_head debugfs_off_cache;
+	struct mutex cache_lock;
 #endif
 
 	unsigned int max_register;

commit 8a819ff8abac9ad49f120c84cce01878b3d235c2
Author: Mark Brown <broonie@opensource.wolfsonmicro.com>
Date:   Mon Mar 4 09:04:51 2013 +0800

    regmap: core: Split out in place value parsing
    
    Currently the value parsing operations both return the parsed value and
    modify the passed buffer. This precludes their use in places like the cache
    code so split out the in place modification into a new parse_inplace()
    operation.
    
    Signed-off-by: Mark Brown <broonie@opensource.wolfsonmicro.com>

diff --git a/drivers/base/regmap/internal.h b/drivers/base/regmap/internal.h
index 582d7fdf414b..2b5851d42dbb 100644
--- a/drivers/base/regmap/internal.h
+++ b/drivers/base/regmap/internal.h
@@ -38,7 +38,8 @@ struct regmap_format {
 			     unsigned int reg, unsigned int val);
 	void (*format_reg)(void *buf, unsigned int reg, unsigned int shift);
 	void (*format_val)(void *buf, unsigned int val, unsigned int shift);
-	unsigned int (*parse_val)(void *buf);
+	unsigned int (*parse_val)(const void *buf);
+	void (*parse_inplace)(void *buf);
 };
 
 struct regmap_async {

commit 879082c9fe6e8fbddf787170eee605e4be138d0f
Author: Mark Brown <broonie@opensource.wolfsonmicro.com>
Date:   Thu Feb 21 18:03:13 2013 +0000

    regmap: cache: Pass the map rather than the word size when updating values
    
    It's more idiomatic to pass the map structure around and this means we
    can use other bits of information from the map.
    
    Signed-off-by: Mark Brown <broonie@opensource.wolfsonmicro.com>

diff --git a/drivers/base/regmap/internal.h b/drivers/base/regmap/internal.h
index 5a22bd33ce3d..582d7fdf414b 100644
--- a/drivers/base/regmap/internal.h
+++ b/drivers/base/regmap/internal.h
@@ -188,10 +188,10 @@ int regcache_write(struct regmap *map,
 			unsigned int reg, unsigned int value);
 int regcache_sync(struct regmap *map);
 
-unsigned int regcache_get_val(const void *base, unsigned int idx,
-			      unsigned int word_size);
-bool regcache_set_val(void *base, unsigned int idx,
-		      unsigned int val, unsigned int word_size);
+unsigned int regcache_get_val(struct regmap *map, const void *base,
+			      unsigned int idx);
+bool regcache_set_val(struct regmap *map, void *base, unsigned int idx,
+		      unsigned int val);
 int regcache_lookup_reg(struct regmap *map, unsigned int reg);
 
 void regmap_async_complete_cb(struct regmap_async *async, int ret);

commit a2b37efc4e2aa76a5be29bbde8a2cd1c9c9066bc
Merge: a31f68497e07 d2a5884a6416
Author: Mark Brown <broonie@opensource.wolfsonmicro.com>
Date:   Thu Feb 14 17:11:09 2013 +0000

    Merge remote-tracking branch 'regmap/topic/no-bus' into regmap-next

commit 7798b582d31e92227ca457f93db320ad9654dada
Merge: 43280026c842 2ac902ce17f9
Author: Mark Brown <broonie@opensource.wolfsonmicro.com>
Date:   Thu Feb 14 17:11:07 2013 +0000

    Merge remote-tracking branch 'regmap/topic/flat' into regmap-next

commit 43280026c842c44a8505a1b909378e62f754ecfe
Merge: 3689cf7fd17e 4dd7c5531d3b
Author: Mark Brown <broonie@opensource.wolfsonmicro.com>
Date:   Thu Feb 14 17:11:06 2013 +0000

    Merge remote-tracking branch 'regmap/topic/debugfs' into regmap-next

commit c2c1ee66016a45477f58f0fd30907b1e959ca76b
Author: Dimitris Papastamos <dp@opensource.wolfsonmicro.com>
Date:   Fri Feb 8 12:47:14 2013 +0000

    regmap: debugfs: Add a `max_reg' member in struct regmap_debugfs_off_cache
    
    We are keeping track of the maximum register as well, this will make
    things easier for us in sharing this code with the code implementing
    the register ranges functionality.  It also simplifies a bit the
    calculations when looking for the relevant block:offset from within
    the cache.
    
    Signed-off-by: Dimitris Papastamos <dp@opensource.wolfsonmicro.com>
    Signed-off-by: Mark Brown <broonie@opensource.wolfsonmicro.com>

diff --git a/drivers/base/regmap/internal.h b/drivers/base/regmap/internal.h
index 401d1919635a..26b8ffde1458 100644
--- a/drivers/base/regmap/internal.h
+++ b/drivers/base/regmap/internal.h
@@ -25,6 +25,7 @@ struct regmap_debugfs_off_cache {
 	off_t min;
 	off_t max;
 	unsigned int base_reg;
+	unsigned int max_reg;
 };
 
 struct regmap_format {

commit 0d509f2b112b21411712f0bf789b372987967e49
Author: Mark Brown <broonie@opensource.wolfsonmicro.com>
Date:   Sun Jan 27 22:07:38 2013 +0800

    regmap: Add asynchronous I/O support
    
    Some use cases like firmware download can transfer a lot of data in quick
    succession. With high speed buses these use cases can benefit from having
    multiple transfers scheduled at once since this allows the bus to minimise
    the delay between transfers.
    
    Support this by adding regmap_raw_write_async(), allowing raw transfers to
    be scheduled, and regmap_async_complete() to wait for them to finish.
    
    Signed-off-by: Mark Brown <broonie@opensource.wolfsonmicro.com>

diff --git a/drivers/base/regmap/internal.h b/drivers/base/regmap/internal.h
index 51f057405647..202518641779 100644
--- a/drivers/base/regmap/internal.h
+++ b/drivers/base/regmap/internal.h
@@ -16,6 +16,7 @@
 #include <linux/regmap.h>
 #include <linux/fs.h>
 #include <linux/list.h>
+#include <linux/wait.h>
 
 struct regmap;
 struct regcache_ops;
@@ -39,6 +40,13 @@ struct regmap_format {
 	unsigned int (*parse_val)(void *buf);
 };
 
+struct regmap_async {
+	struct list_head list;
+	struct work_struct cleanup;
+	struct regmap *map;
+	void *work_buf;
+};
+
 struct regmap {
 	struct mutex mutex;
 	spinlock_t spinlock;
@@ -53,6 +61,11 @@ struct regmap {
 	void *bus_context;
 	const char *name;
 
+	spinlock_t async_lock;
+	wait_queue_head_t async_waitq;
+	struct list_head async_list;
+	int async_ret;
+
 #ifdef CONFIG_DEBUG_FS
 	struct dentry *debugfs;
 	const char *debugfs_name;
@@ -178,6 +191,8 @@ bool regcache_set_val(void *base, unsigned int idx,
 		      unsigned int val, unsigned int word_size);
 int regcache_lookup_reg(struct regmap *map, unsigned int reg);
 
+void regmap_async_complete_cb(struct regmap_async *async, int ret);
+
 extern struct regcache_ops regcache_rbtree_ops;
 extern struct regcache_ops regcache_lzo_ops;
 

commit d2a5884a64161b524cc6749ee11b95d252e497f3
Author: Andrey Smirnov <andrew.smirnov@gmail.com>
Date:   Sun Jan 27 10:49:05 2013 -0800

    regmap: Add "no-bus" option for regmap API
    
    This commit adds provision for "no-bus" usage of the regmap API. In
    this configuration user can provide API with two callbacks 'reg_read'
    and 'reg_write' which are to be called when reads and writes to one of
    device's registers is performed. This is useful for devices that
    expose registers but whose register access sequence does not fit the 'bus'
    abstraction.
    
    Signed-off-by: Andrey Smirnov <andrew.smirnov@gmail.com>
    Signed-off-by: Mark Brown <broonie@opensource.wolfsonmicro.com>

diff --git a/drivers/base/regmap/internal.h b/drivers/base/regmap/internal.h
index 51f057405647..b55fde5d216a 100644
--- a/drivers/base/regmap/internal.h
+++ b/drivers/base/regmap/internal.h
@@ -77,6 +77,8 @@ struct regmap {
 	int (*reg_read)(void *context, unsigned int reg, unsigned int *val);
 	int (*reg_write)(void *context, unsigned int reg, unsigned int val);
 
+	bool defer_caching;
+
 	u8 read_flag_mask;
 	u8 write_flag_mask;
 

commit 07c320dc31d757b8cb59c64dab320215c929bf02
Author: Andrey Smirnov <andrew.smirnov@gmail.com>
Date:   Sat Jan 12 12:54:13 2013 -0800

    regmap: Add provisions to have user-defined write operation
    
    This commit is a preparatory commit to provide "no-bus" configuration
    option for regmap API. It adds necessary plumbing needed to have the
    ability to provide user define register write function.
    
    Signed-off-by: Andrey Smirnov <andrew.smirnov@gmail.com>
    Signed-off-by: Mark Brown <broonie@opensource.wolfsonmicro.com>

diff --git a/drivers/base/regmap/internal.h b/drivers/base/regmap/internal.h
index 471eb90276e4..51f057405647 100644
--- a/drivers/base/regmap/internal.h
+++ b/drivers/base/regmap/internal.h
@@ -75,6 +75,7 @@ struct regmap {
 	const struct regmap_access_table *precious_table;
 
 	int (*reg_read)(void *context, unsigned int reg, unsigned int *val);
+	int (*reg_write)(void *context, unsigned int reg, unsigned int val);
 
 	u8 read_flag_mask;
 	u8 write_flag_mask;

commit ad278406b3b8b8e454af23b63df3c3d63f6aee94
Author: Andrey Smirnov <andrew.smirnov@gmail.com>
Date:   Sat Jan 12 12:54:12 2013 -0800

    regmap: Add provisions to have user-defined read operation
    
    This commit is a preparatory commit to provide "no-bus" configuration
    option for regmap API. It adds necessary plumbing needed to have the
    ability to provide user define register read function.
    
    Signed-off-by: Andrey Smirnov <andrew.smirnov@gmail.com>
    Signed-off-by: Mark Brown <broonie@opensource.wolfsonmicro.com>

diff --git a/drivers/base/regmap/internal.h b/drivers/base/regmap/internal.h
index 401d1919635a..471eb90276e4 100644
--- a/drivers/base/regmap/internal.h
+++ b/drivers/base/regmap/internal.h
@@ -74,6 +74,8 @@ struct regmap {
 	const struct regmap_access_table *volatile_table;
 	const struct regmap_access_table *precious_table;
 
+	int (*reg_read)(void *context, unsigned int reg, unsigned int *val);
+
 	u8 read_flag_mask;
 	u8 write_flag_mask;
 

commit 2ac902ce17f9dfa0d4d1f0818be147b5d2515fb7
Author: Mark Brown <broonie@opensource.wolfsonmicro.com>
Date:   Wed Dec 19 14:51:55 2012 +0000

    regmap: flat: Add flat cache type
    
    While for I2C and SPI devices the overhead of using rbtree for devices with
    only one block of registers is negligible the same isn't always going to
    be true for MMIO devices where the I/O costs are very much lower. Cater
    for these devices by adding a simple flat array type for them where the
    lookups are simple array accesses, taking us right back to the original
    ASoC cache implementation.
    
    Thanks to Magnus Damm for the discussion which prompted this.
    
    Signed-off-by: Mark Brown <broonie@opensource.wolfsonmicro.com>

diff --git a/drivers/base/regmap/internal.h b/drivers/base/regmap/internal.h
index 401d1919635a..e22bb80edff1 100644
--- a/drivers/base/regmap/internal.h
+++ b/drivers/base/regmap/internal.h
@@ -177,5 +177,6 @@ int regcache_lookup_reg(struct regmap *map, unsigned int reg);
 
 extern struct regcache_ops regcache_rbtree_ops;
 extern struct regcache_ops regcache_lzo_ops;
+extern struct regcache_ops regcache_flat_ops;
 
 #endif

commit 8e24a6e696ebdc44513357ac00b6ee18f54e69f5
Merge: db760fbecd3d 76aad392f75e
Author: Mark Brown <broonie@opensource.wolfsonmicro.com>
Date:   Tue Dec 11 12:39:32 2012 +0900

    Merge remote-tracking branch 'regmap/topic/table' into regmap-next

commit db760fbecd3d609098ef4121d7988ff2a5db15d1
Merge: 4d348e6e0a35 0d4529c534c1
Author: Mark Brown <broonie@opensource.wolfsonmicro.com>
Date:   Tue Dec 11 12:39:30 2012 +0900

    Merge remote-tracking branch 'regmap/topic/lock' into regmap-next

commit 5166b7c006eeb4f6becc0822974d8da259484ba1
Author: Mark Brown <broonie@opensource.wolfsonmicro.com>
Date:   Tue Dec 11 01:24:29 2012 +0900

    regmap: debugfs: Cache offsets of valid regions for dump
    
    Avoid doing a linear scan of the entire register map for each read() of
    the debugfs register dump by recording the offsets where valid registers
    exist when we first read the registers file. This assumes the set of
    valid registers never changes, if this is not the case invalidation of
    the cache will be required.
    
    This could be further improved for large blocks of contiguous registers
    by calculating the register we will read from within the block - currently
    we do a linear scan of the block. An rbtree may also be worthwhile.
    
    Signed-off-by: Mark Brown <broonie@opensource.wolfsonmicro.com>

diff --git a/drivers/base/regmap/internal.h b/drivers/base/regmap/internal.h
index 1abcd27e2d0f..9c3b0e7a6c7d 100644
--- a/drivers/base/regmap/internal.h
+++ b/drivers/base/regmap/internal.h
@@ -15,10 +15,18 @@
 
 #include <linux/regmap.h>
 #include <linux/fs.h>
+#include <linux/list.h>
 
 struct regmap;
 struct regcache_ops;
 
+struct regmap_debugfs_off_cache {
+	struct list_head list;
+	off_t min;
+	off_t max;
+	unsigned int base_reg;
+};
+
 struct regmap_format {
 	size_t buf_size;
 	size_t reg_bytes;
@@ -54,6 +62,8 @@ struct regmap {
 	unsigned int debugfs_reg_len;
 	unsigned int debugfs_val_len;
 	unsigned int debugfs_tot_len;
+
+	struct list_head debugfs_off_cache;
 #endif
 
 	unsigned int max_register;

commit cbc1938badc31f43ab77e92a9b1a51c4fe8b4113
Author: Mark Brown <broonie@opensource.wolfsonmicro.com>
Date:   Thu Dec 6 13:29:05 2012 +0900

    regmap: Cache register and value sizes for debugfs
    
    No point in calculating them every time.
    
    Signed-off-by: Mark Brown <broonie@opensource.wolfsonmicro.com>

diff --git a/drivers/base/regmap/internal.h b/drivers/base/regmap/internal.h
index ac869d28d5ba..1abcd27e2d0f 100644
--- a/drivers/base/regmap/internal.h
+++ b/drivers/base/regmap/internal.h
@@ -50,6 +50,10 @@ struct regmap {
 #ifdef CONFIG_DEBUG_FS
 	struct dentry *debugfs;
 	const char *debugfs_name;
+
+	unsigned int debugfs_reg_len;
+	unsigned int debugfs_val_len;
+	unsigned int debugfs_tot_len;
 #endif
 
 	unsigned int max_register;

commit 76aad392f75e6ce5be3f106554e16f7ff96543e5
Author: Davide Ciminaghi <ciminaghi@gnudd.com>
Date:   Tue Nov 20 15:20:30 2012 +0100

    regmap: introduce tables for readable/writeable/volatile/precious checks
    
    Many of the regmap enabled drivers implementing one or more of the
    readable, writeable, volatile and precious methods use the same code
    pattern:
    
            return ((reg >= X && reg <= Y) || (reg >= W && reg <= Z) || ...)
    
    Switch to a data driven approach, using tables to describe
    readable/writeable/volatile and precious registers ranges instead.
    The table based check can still be overridden by passing the usual function
    pointers via struct regmap_config.
    
    Signed-off-by: Davide Ciminaghi <ciminaghi@gnudd.com>
    Signed-off-by: Mark Brown <broonie@opensource.wolfsonmicro.com>

diff --git a/drivers/base/regmap/internal.h b/drivers/base/regmap/internal.h
index 2cd01b57b1c4..288e135fd5f8 100644
--- a/drivers/base/regmap/internal.h
+++ b/drivers/base/regmap/internal.h
@@ -55,6 +55,10 @@ struct regmap {
 	bool (*readable_reg)(struct device *dev, unsigned int reg);
 	bool (*volatile_reg)(struct device *dev, unsigned int reg);
 	bool (*precious_reg)(struct device *dev, unsigned int reg);
+	const struct regmap_access_table *wr_table;
+	const struct regmap_access_table *rd_table;
+	const struct regmap_access_table *volatile_table;
+	const struct regmap_access_table *precious_table;
 
 	u8 read_flag_mask;
 	u8 write_flag_mask;

commit 3afa24f7ad0a1ab5478f1e9a6c4df1acf52171d1
Merge: 869e4a5f5848 0d4529c534c1
Author: Mark Brown <broonie@opensource.wolfsonmicro.com>
Date:   Wed Nov 21 11:09:46 2012 +0900

    Merge branch 'topic/lock' of git://git.kernel.org/pub/scm/linux/kernel/git/broonie/regmap into regmap-table

commit 0d4529c534c1c664f25088eb5f5b4d7ce0ee2510
Author: Davide Ciminaghi <ciminaghi@gnudd.com>
Date:   Tue Oct 16 15:56:59 2012 +0200

    regmap: make lock/unlock functions customizable
    
    It is sometimes convenient for a regmap user to override the standard
    regmap lock/unlock functions with custom functions.
    For instance this can be useful in case an already existing spinlock
    or mutex has to be used for locking a set of registers instead of the
    internal regmap spinlock/mutex.
    Note that the fast_io field of struct regmap_bus is ignored in case
    custom locking functions are used.
    
    Signed-off-by: Davide Ciminaghi <ciminaghi@gnudd.com>
    Signed-off-by: Mark Brown <broonie@opensource.wolfsonmicro.com>

diff --git a/drivers/base/regmap/internal.h b/drivers/base/regmap/internal.h
index 80f9ab9c3aa4..b1ee824e2a5f 100644
--- a/drivers/base/regmap/internal.h
+++ b/drivers/base/regmap/internal.h
@@ -31,14 +31,12 @@ struct regmap_format {
 	unsigned int (*parse_val)(void *buf);
 };
 
-typedef void (*regmap_lock)(struct regmap *map);
-typedef void (*regmap_unlock)(struct regmap *map);
-
 struct regmap {
 	struct mutex mutex;
 	spinlock_t spinlock;
 	regmap_lock lock;
 	regmap_unlock unlock;
+	void *lock_arg; /* This is passed to lock/unlock functions */
 
 	struct device *dev; /* Device we do I/O on */
 	void *work_buf;     /* Scratch buffer used to format I/O */

commit 4b020b3f9ba2af8031c5c7d759fbafd234d1c390
Author: Mark Brown <broonie@opensource.wolfsonmicro.com>
Date:   Wed Oct 3 13:13:16 2012 +0100

    regmap: Provide debugfs read of register ranges
    
    If a register range is named then provide a debugfs file showing the
    contents of the range separately.
    
    Signed-off-by: Mark Brown <broonie@opensource.wolfsonmicro.com>

diff --git a/drivers/base/regmap/internal.h b/drivers/base/regmap/internal.h
index 27e66c3e7a59..ac869d28d5ba 100644
--- a/drivers/base/regmap/internal.h
+++ b/drivers/base/regmap/internal.h
@@ -121,6 +121,7 @@ int _regmap_write(struct regmap *map, unsigned int reg,
 struct regmap_range_node {
 	struct rb_node node;
 	const char *name;
+	struct regmap *map;
 
 	unsigned int range_min;
 	unsigned int range_max;

commit d058bb49618482f2eff0db57618c9a7352916dd5
Author: Mark Brown <broonie@opensource.wolfsonmicro.com>
Date:   Wed Oct 3 12:40:47 2012 +0100

    regmap: Allow ranges to be named
    
    For more useful diagnostics.
    
    Signed-off-by: Mark Brown <broonie@opensource.wolfsonmicro.com>

diff --git a/drivers/base/regmap/internal.h b/drivers/base/regmap/internal.h
index 80f9ab9c3aa4..27e66c3e7a59 100644
--- a/drivers/base/regmap/internal.h
+++ b/drivers/base/regmap/internal.h
@@ -120,6 +120,7 @@ int _regmap_write(struct regmap *map, unsigned int reg,
 
 struct regmap_range_node {
 	struct rb_node node;
+	const char *name;
 
 	unsigned int range_min;
 	unsigned int range_max;

commit 6863ca6227598d15c372f1e03449bbb4cfbcca7f
Author: Krystian Garbaciak <krystian.garbaciak@diasemi.com>
Date:   Fri Jun 15 11:23:56 2012 +0100

    regmap: Add support for register indirect addressing.
    
    Devices with register paging or indirectly accessed registers can configure
    register mapping to map those on virtual address range. During access to
    virtually mapped register range, indirect addressing is processed
    automatically, in following steps:
      1. selector for page or indirect register is updated (when needed);
      2. register in data window is accessed.
    
    Configuration should provide minimum and maximum register for virtual range,
    details of selector field for page selection, minimum and maximum register of
    data window for indirect access.
    
    Virtual range registers are managed by cache as well as direct access
    registers. In order to make indirect access more efficient, selector register
    should be declared as non-volatile, if possible.
    
    struct regmap_config is extended with the following:
    struct regmap_range_cfg *ranges;
    unsigned int            n_ranges;
    
    [Also reordered debugfs init to later on since the cleanup code was
    conflicting with the new cleanup code for ranges anyway -- broonie]
    
    Signed-off-by: Krystian Garbaciak <krystian.garbaciak@diasemi.com>
    Signed-off-by: Mark Brown <broonie@opensource.wolfsonmicro.com>

diff --git a/drivers/base/regmap/internal.h b/drivers/base/regmap/internal.h
index b986b8660b0c..80f9ab9c3aa4 100644
--- a/drivers/base/regmap/internal.h
+++ b/drivers/base/regmap/internal.h
@@ -95,6 +95,9 @@ struct regmap {
 
 	/* if set, converts bulk rw to single rw */
 	bool use_single_rw;
+
+	struct rb_root range_tree;
+	void *selector_work_buf;	/* Scratch buffer used for selector */
 };
 
 struct regcache_ops {
@@ -115,6 +118,20 @@ bool regmap_precious(struct regmap *map, unsigned int reg);
 int _regmap_write(struct regmap *map, unsigned int reg,
 		  unsigned int val);
 
+struct regmap_range_node {
+	struct rb_node node;
+
+	unsigned int range_min;
+	unsigned int range_max;
+
+	unsigned int selector_reg;
+	unsigned int selector_mask;
+	int selector_shift;
+
+	unsigned int window_start;
+	unsigned int window_len;
+};
+
 #ifdef CONFIG_DEBUG_FS
 extern void regmap_debugfs_initcall(void);
 extern void regmap_debugfs_init(struct regmap *map, const char *name);

commit 06e65cb322f91dc20fbcfc1a7ee2fb105ecc417b
Merge: f298536728d0 25061d285747 72b39f6f2b5a 2431d0a1d68a
Author: Mark Brown <broonie@opensource.wolfsonmicro.com>
Date:   Sun May 13 19:20:47 2012 +0100

    Merge branches 'regmap-core', 'regmap-stride', 'regmap-mmio' and 'regmap-irq' into regmap-next

commit 72b39f6f2b5a6b0beff14b80bed9756f151218a9
Author: Mark Brown <broonie@opensource.wolfsonmicro.com>
Date:   Tue May 8 17:44:40 2012 +0100

    regmap: Implement dev_get_regmap()
    
    Use devres to implement dev_get_regmap(). This should mean that in almost
    all cases devices wishing to take advantage of framework features based on
    regmap shouldn't need to explicitly pass the regmap into the framework.
    This simplifies device setup a bit.
    
    Signed-off-by: Mark Brown <broonie@opensource.wolfsonmicro.com>

diff --git a/drivers/base/regmap/internal.h b/drivers/base/regmap/internal.h
index e46c279f8280..c994bc9bc04f 100644
--- a/drivers/base/regmap/internal.h
+++ b/drivers/base/regmap/internal.h
@@ -45,6 +45,7 @@ struct regmap {
 	struct regmap_format format;  /* Buffer format */
 	const struct regmap_bus *bus;
 	void *bus_context;
+	const char *name;
 
 #ifdef CONFIG_DEBUG_FS
 	struct dentry *debugfs;

commit 2e33caf16f7a1903d226ef7f9f5ec6a234fee18e
Author: Ashish Jangam <ashish.jangam@kpitcummins.com>
Date:   Mon Apr 30 23:23:40 2012 +0100

    regmap: Converts group operation into single read write operations
    
    Some devices does not support bulk read and write operations, for them
    we have series of single write and read operations.
    
    Signed-off-by: Anthony Olech <Anthony.Olech@diasemi.com>
    Signed-off-by: Ashish Jangam <ashish.jangam@kpitcummins.com>
    [Fixed coding style, don't check use_single_rw before assign --broonie ]
    Signed-off-by: Mark Brown <broonie@opensource.wolfsonmicro.com>

diff --git a/drivers/base/regmap/internal.h b/drivers/base/regmap/internal.h
index d92e9b1cb83c..2eb719704885 100644
--- a/drivers/base/regmap/internal.h
+++ b/drivers/base/regmap/internal.h
@@ -91,6 +91,9 @@ struct regmap {
 
 	struct reg_default *patch;
 	int patch_regs;
+
+	/* if set, converts bulk rw to single rw */
+	bool use_single_rw;
 };
 
 struct regcache_ops {

commit f01ee60fffa4dc6c77122121233a793f7f696e67
Author: Stephen Warren <swarren@nvidia.com>
Date:   Mon Apr 9 13:40:24 2012 -0600

    regmap: implement register striding
    
    regmap_config.reg_stride is introduced. All extant register addresses
    are a multiple of this value. Users of serial-oriented regmap busses will
    typically set this to 1. Users of the MMIO regmap bus will typically set
    this based on the value size of their registers, in bytes, so 4 for a
    32-bit register.
    
    Throughout the regmap code, actual register addresses are used. Wherever
    the register address is used to index some array of values, the address
    is divided by the stride to determine the index, or vice-versa. Error-
    checking is added to all entry-points for register address data to ensure
    that register addresses actually satisfy the specified stride. The MMIO
    bus ensures that the specified stride is large enough for the register
    size.
    
    Signed-off-by: Stephen Warren <swarren@nvidia.com>
    Signed-off-by: Mark Brown <broonie@opensource.wolfsonmicro.com>

diff --git a/drivers/base/regmap/internal.h b/drivers/base/regmap/internal.h
index 99b28fffbd0e..d92e9b1cb83c 100644
--- a/drivers/base/regmap/internal.h
+++ b/drivers/base/regmap/internal.h
@@ -62,6 +62,7 @@ struct regmap {
 
 	/* number of bits to (left) shift the reg value when formatting*/
 	int reg_shift;
+	int reg_stride;
 
 	/* regcache specific members */
 	const struct regcache_ops *cache_ops;

commit c0cc6fe1d09e3f1baecbdf8922473c8e7d3a5317
Merge: 0034102808e0 d939fb9a78b4 851960ba7cb3 abec95adefae
Author: Mark Brown <broonie@opensource.wolfsonmicro.com>
Date:   Tue Apr 10 11:01:07 2012 +0100

    Merge branches 'regmap-core', 'regmap-mmio' and 'regmap-naming' into regmap-stride

commit abec95adefaeb2229cb28de65f3d32cd149b9dd9
Author: Stephen Warren <swarren@nvidia.com>
Date:   Thu Apr 5 23:09:20 2012 -0600

    regmap: fix compilation when !CONFIG_DEBUG_FS
    
    Commit 79c64d5 "regmap: allow regmap instances to be named" changed the
    prototype of regmap_debugfs_init, but didn't update the dummy inline used
    when !CONFIG_DEBUGFS. Fix this.
    
    Signed-off-by: Stephen Warren <swarren@nvidia.com>
    Signed-off-by: Mark Brown <broonie@opensource.wolfsonmicro.com>

diff --git a/drivers/base/regmap/internal.h b/drivers/base/regmap/internal.h
index 6beef6691c47..8461ca7711ed 100644
--- a/drivers/base/regmap/internal.h
+++ b/drivers/base/regmap/internal.h
@@ -106,7 +106,7 @@ extern void regmap_debugfs_init(struct regmap *map, const char *name);
 extern void regmap_debugfs_exit(struct regmap *map);
 #else
 static inline void regmap_debugfs_initcall(void) { }
-static inline void regmap_debugfs_init(struct regmap *map) { }
+static inline void regmap_debugfs_init(struct regmap *map, const char *name) { }
 static inline void regmap_debugfs_exit(struct regmap *map) { }
 #endif
 

commit d3c242e1f22f5dfed009296ee45ce896153f0b53
Author: Stephen Warren <swarren@nvidia.com>
Date:   Wed Apr 4 15:48:29 2012 -0600

    regmap: allow regmap instances to be named
    
    Some devices have multiple separate register regions. Logically, one
    regmap would be created per region. One issue that prevents this is that
    each instance will attempt to create the same debugfs files. Avoid this
    by allowing regmaps to be named, and use the name to construct the
    debugfs directory name.
    
    Signed-off-by: Stephen Warren <swarren@nvidia.com>
    Signed-off-by: Mark Brown <broonie@opensource.wolfsonmicro.com>

diff --git a/drivers/base/regmap/internal.h b/drivers/base/regmap/internal.h
index fcafc5b2e651..6beef6691c47 100644
--- a/drivers/base/regmap/internal.h
+++ b/drivers/base/regmap/internal.h
@@ -41,6 +41,7 @@ struct regmap {
 
 #ifdef CONFIG_DEBUG_FS
 	struct dentry *debugfs;
+	const char *debugfs_name;
 #endif
 
 	unsigned int max_register;
@@ -101,7 +102,7 @@ int _regmap_write(struct regmap *map, unsigned int reg,
 
 #ifdef CONFIG_DEBUG_FS
 extern void regmap_debugfs_initcall(void);
-extern void regmap_debugfs_init(struct regmap *map);
+extern void regmap_debugfs_init(struct regmap *map, const char *name);
 extern void regmap_debugfs_exit(struct regmap *map);
 #else
 static inline void regmap_debugfs_initcall(void) { }

commit bacdbe077342ecc9e7b3e374cc5a41995116706a
Author: Stephen Warren <swarren@nvidia.com>
Date:   Wed Apr 4 15:48:28 2012 -0600

    regmap: introduce fast_io busses, and use a spinlock for them
    
    Some bus types have very fast IO. For these, acquiring a mutex for every
    IO operation is a significant overhead. Allow busses to indicate their IO
    is fast, and enhance regmap to use a spinlock for those busses.
    
    [Currently limited to native endian registers -- broonie]
    
    Signed-off-by: Stephen Warren <swarren@nvidia.com>
    Signed-off-by: Mark Brown <broonie@opensource.wolfsonmicro.com>

diff --git a/drivers/base/regmap/internal.h b/drivers/base/regmap/internal.h
index b95fd1f25295..e46c279f8280 100644
--- a/drivers/base/regmap/internal.h
+++ b/drivers/base/regmap/internal.h
@@ -31,8 +31,14 @@ struct regmap_format {
 	unsigned int (*parse_val)(void *buf);
 };
 
+typedef void (*regmap_lock)(struct regmap *map);
+typedef void (*regmap_unlock)(struct regmap *map);
+
 struct regmap {
-	struct mutex lock;
+	struct mutex mutex;
+	spinlock_t spinlock;
+	regmap_lock lock;
+	regmap_unlock unlock;
 
 	struct device *dev; /* Device we do I/O on */
 	void *work_buf;     /* Scratch buffer used to format I/O */

commit 0135bbcc7a0cc056f0203ff839466236b8e3dc19
Author: Stephen Warren <swarren@nvidia.com>
Date:   Wed Apr 4 15:48:30 2012 -0600

    regmap: introduce explicit bus_context for bus callbacks
    
    The only context needed by I2C and SPI bus definitions is the device
    itself; this can be converted to an i2c_client or spi_device in order
    to perform IO on the device. However, other bus types may need more
    context in order to perform IO. Enable this by having regmap_init accept
    a bus_context parameter, and pass this to all bus callbacks. The
    existing callbacks simply pass the struct device here. Future bus types
    may pass something else.
    
    Signed-off-by: Stephen Warren <swarren@nvidia.com>
    Signed-off-by: Mark Brown <broonie@opensource.wolfsonmicro.com>

diff --git a/drivers/base/regmap/internal.h b/drivers/base/regmap/internal.h
index fcafc5b2e651..b95fd1f25295 100644
--- a/drivers/base/regmap/internal.h
+++ b/drivers/base/regmap/internal.h
@@ -38,6 +38,7 @@ struct regmap {
 	void *work_buf;     /* Scratch buffer used to format I/O */
 	struct regmap_format format;  /* Buffer format */
 	const struct regmap_bus *bus;
+	void *bus_context;
 
 #ifdef CONFIG_DEBUG_FS
 	struct dentry *debugfs;

commit d939fb9a78b4743bc4bc3cc415894ed42050c5cc
Author: Marc Reilly <marc@cpdesign.com.au>
Date:   Fri Mar 16 12:11:43 2012 +1100

    regmap: Use pad_bits and reg_bits when determining register format.
    
    This change combines any padding bits into the register address bits when
    determining register format handlers to use the next byte-divisible
    register size.
    A reg_shift member is introduced to the regmap struct to enable fixup
    of the reg format.
    Format handlers now take an extra parameter specifying the number of
    bits to shift the value by.
    
    Signed-off-by: Marc Reilly <marc@cpdesign.com.au>
    Signed-off-by: Mark Brown <broonie@opensource.wolfsonmicro.com>

diff --git a/drivers/base/regmap/internal.h b/drivers/base/regmap/internal.h
index fcafc5b2e651..606b83d75458 100644
--- a/drivers/base/regmap/internal.h
+++ b/drivers/base/regmap/internal.h
@@ -26,8 +26,8 @@ struct regmap_format {
 	size_t val_bytes;
 	void (*format_write)(struct regmap *map,
 			     unsigned int reg, unsigned int val);
-	void (*format_reg)(void *buf, unsigned int reg);
-	void (*format_val)(void *buf, unsigned int val);
+	void (*format_reg)(void *buf, unsigned int reg, unsigned int shift);
+	void (*format_val)(void *buf, unsigned int val, unsigned int shift);
 	unsigned int (*parse_val)(void *buf);
 };
 
@@ -52,6 +52,9 @@ struct regmap {
 	u8 read_flag_mask;
 	u8 write_flag_mask;
 
+	/* number of bits to (left) shift the reg value when formatting*/
+	int reg_shift;
+
 	/* regcache specific members */
 	const struct regcache_ops *cache_ops;
 	enum regcache_type cache_type;

commit 4a6be7bb7474500a69f6d8f25899b8038491bdbb
Merge: 7d9aca39dcac f9353e70bceb
Author: Mark Brown <broonie@opensource.wolfsonmicro.com>
Date:   Wed Mar 14 13:14:24 2012 +0000

    Merge remote-tracking branches 'regmap/topic/patch' and 'regmap/topic/sync' into regmap-next

commit 7d9aca39dcacd2b3f42e2e287162329f410f93e1
Merge: e1c1c69c8fc7 a0cc0209abb9
Author: Mark Brown <broonie@opensource.wolfsonmicro.com>
Date:   Wed Mar 14 13:13:25 2012 +0000

    Merge remote-tracking branch 'regmap/topic/drivers' into regmap-next
    
    Resolved simple add/add conflicts:
            drivers/base/regmap/internal.h
            drivers/base/regmap/regmap.c

commit ac8d91c801905a061ca883dca427a5e19602a1e7
Author: Mark Brown <broonie@opensource.wolfsonmicro.com>
Date:   Thu Feb 23 19:31:04 2012 +0000

    regmap: Supply ranges to the sync operations
    
    In order to allow us to support partial sync operations add minimum and
    maximum register arguments to the sync operation and update the rbtree
    and lzo caches to use this new information. The LZO implementation is
    obviously not good, we could exit the iteration earlier, but there may
    be room for more wide reaching optimisation there.
    
    Signed-off-by: Mark Brown <broonie@opensource.wolfsonmicro.com>

diff --git a/drivers/base/regmap/internal.h b/drivers/base/regmap/internal.h
index d141b80479b5..9c1d62e3e15c 100644
--- a/drivers/base/regmap/internal.h
+++ b/drivers/base/regmap/internal.h
@@ -87,7 +87,7 @@ struct regcache_ops {
 	int (*exit)(struct regmap *map);
 	int (*read)(struct regmap *map, unsigned int reg, unsigned int *value);
 	int (*write)(struct regmap *map, unsigned int reg, unsigned int value);
-	int (*sync)(struct regmap *map);
+	int (*sync)(struct regmap *map, unsigned int min, unsigned int max);
 };
 
 bool regmap_writeable(struct regmap *map, unsigned int reg);

commit 847fb6fdf58c0ef4c207d2853a043a4da3db9c76
Author: Mark Brown <broonie@opensource.wolfsonmicro.com>
Date:   Mon Feb 6 18:01:35 2012 +0000

    regmap: Don't use bitfields for booleans
    
    This was a cut'n'paste from some older code.
    
    Since we're about to add debugfs support don't do the obvious thing and
    use bool, use u32 instead (which debugfs has been using since time
    immemorial).
    
    Signed-off-by: Mark Brown <broonie@opensource.wolfsonmicro.com>

diff --git a/drivers/base/regmap/internal.h b/drivers/base/regmap/internal.h
index e33f1be2b299..e93d7b7d1cf9 100644
--- a/drivers/base/regmap/internal.h
+++ b/drivers/base/regmap/internal.h
@@ -66,16 +66,16 @@ struct regmap {
 	unsigned int num_reg_defaults_raw;
 
 	/* if set, only the cache is modified not the HW */
-	unsigned int cache_only:1;
+	u32 cache_only;
 	/* if set, only the HW is modified not the cache */
-	unsigned int cache_bypass:1;
+	u32 cache_bypass;
 	/* if set, remember to free reg_defaults_raw */
-	unsigned int cache_free:1;
+	bool cache_free;
 
 	struct reg_default *reg_defaults;
 	const void *reg_defaults_raw;
 	void *cache;
-	bool cache_dirty;
+	u32 cache_dirty;
 };
 
 struct regcache_ops {

commit 22f0d90a34827812413bb3fbeda6a2a79bb58423
Author: Mark Brown <broonie@opensource.wolfsonmicro.com>
Date:   Sat Jan 21 12:01:14 2012 +0000

    regmap: Support register patch sets
    
    Device manufacturers frequently provide register sequences, usually not
    fully documented, to be run at startup in order to provide better defaults
    for devices (for example, improving performance in the light of silicon
    evaluation). Support such updates by allowing drivers to register update
    sets with the core. These updates will be written to the device immediately
    and will also be rewritten when the cache is synced.
    
    The assumption is that the reason for resyncing the cache will always be
    that the device has been powered off. If this turns out to not be the case
    then a separate operation can be provided.
    
    Currently the implementation only allows a single set of updates to be
    specified for a device, this could be extended in future.
    
    Signed-off-by: Mark Brown <broonie@opensource.wolfsonmicro.com>

diff --git a/drivers/base/regmap/internal.h b/drivers/base/regmap/internal.h
index 1a02b7537c8b..d141b80479b5 100644
--- a/drivers/base/regmap/internal.h
+++ b/drivers/base/regmap/internal.h
@@ -75,6 +75,9 @@ struct regmap {
 	const void *reg_defaults_raw;
 	void *cache;
 	bool cache_dirty;
+
+	struct reg_default *patch;
+	int patch_regs;
 };
 
 struct regcache_ops {

commit 82159ba8e6ef8c38e3e0452d90b4ff8da9e4b2c1
Author: Mark Brown <broonie@opensource.wolfsonmicro.com>
Date:   Wed Jan 18 10:52:25 2012 +0000

    regmap: Add support for padding between register and address
    
    Some devices, especially those with high speed control interfaces, require
    padding between the register and the data. Support this in the regmap API
    by providing a pad_bits configuration parameter.
    
    Only devices with integer byte counts are supported.
    
    Signed-off-by: Mark Brown <broonie@opensource.wolfsonmicro.com>

diff --git a/drivers/base/regmap/internal.h b/drivers/base/regmap/internal.h
index 1a02b7537c8b..e33f1be2b299 100644
--- a/drivers/base/regmap/internal.h
+++ b/drivers/base/regmap/internal.h
@@ -22,6 +22,7 @@ struct regcache_ops;
 struct regmap_format {
 	size_t buf_size;
 	size_t reg_bytes;
+	size_t pad_bytes;
 	size_t val_bytes;
 	void (*format_write)(struct regmap *map,
 			     unsigned int reg, unsigned int val);

commit 4c691664583ef6a91f9ed0e08a75fbd30a5ffd5c
Author: Mark Brown <broonie@opensource.wolfsonmicro.com>
Date:   Fri Nov 18 16:53:00 2011 +0000

    regmap: Remove indexed cache type
    
    There should be no situation where it offers any advantage over rbtree
    and there are no current users so remove the code for simplicity.
    
    Signed-off-by: Mark Brown <broonie@opensource.wolfsonmicro.com>

diff --git a/drivers/base/regmap/internal.h b/drivers/base/regmap/internal.h
index 954f7b73238f..1a02b7537c8b 100644
--- a/drivers/base/regmap/internal.h
+++ b/drivers/base/regmap/internal.h
@@ -119,10 +119,7 @@ unsigned int regcache_get_val(const void *base, unsigned int idx,
 bool regcache_set_val(void *base, unsigned int idx,
 		      unsigned int val, unsigned int word_size);
 int regcache_lookup_reg(struct regmap *map, unsigned int reg);
-int regcache_insert_reg(struct regmap *map, unsigned int reg,
-			unsigned int val);
 
-extern struct regcache_ops regcache_indexed_ops;
 extern struct regcache_ops regcache_rbtree_ops;
 extern struct regcache_ops regcache_lzo_ops;
 

commit e5e3b8abeda1cf45f5a079458dbc267952694c7a
Author: Lars-Peter Clausen <lars@metafoo.de>
Date:   Wed Nov 16 16:28:16 2011 +0100

    regmap: Move initialization of regcache related fields to regcache_init
    
    Move the initialization regcache related fields of the regmap struct to
    regcache_init. This allows us to keep regmap and regcache code better
    separated.
    
    Signed-off-by: Lars-Peter Clausen <lars@metafoo.de>
    Signed-off-by: Mark Brown <broonie@opensource.wolfsonmicro.com>

diff --git a/drivers/base/regmap/internal.h b/drivers/base/regmap/internal.h
index 6483e0bda0cf..954f7b73238f 100644
--- a/drivers/base/regmap/internal.h
+++ b/drivers/base/regmap/internal.h
@@ -106,7 +106,7 @@ static inline void regmap_debugfs_exit(struct regmap *map) { }
 #endif
 
 /* regcache core declarations */
-int regcache_init(struct regmap *map);
+int regcache_init(struct regmap *map, const struct regmap_config *config);
 void regcache_exit(struct regmap *map);
 int regcache_read(struct regmap *map,
 		       unsigned int reg, unsigned int *value);

commit 8ae0d7e8a918e9603748abe9b31984fc5d96abb3
Author: Mark Brown <broonie@opensource.wolfsonmicro.com>
Date:   Wed Oct 26 10:34:22 2011 +0200

    regmap: Track if the register cache is dirty and suppress unneeded syncs
    
    Allow drivers to optimise out the register cache sync if they didn't need
    to do one. If the hardware is desynced from the register cache (by power
    loss for example) then the driver should call regcache_mark_dirty() to
    let the core know about this.
    
    Signed-off-by: Mark Brown <broonie@opensource.wolfsonmicro.com>

diff --git a/drivers/base/regmap/internal.h b/drivers/base/regmap/internal.h
index 348ff02eb93e..6483e0bda0cf 100644
--- a/drivers/base/regmap/internal.h
+++ b/drivers/base/regmap/internal.h
@@ -74,6 +74,7 @@ struct regmap {
 	struct reg_default *reg_defaults;
 	const void *reg_defaults_raw;
 	void *cache;
+	bool cache_dirty;
 };
 
 struct regcache_ops {

commit 4d2dc09538561eb8823c3c0072e6f5b868a5abe1
Author: Dimitris Papastamos <dp@opensource.wolfsonmicro.com>
Date:   Thu Sep 29 10:39:07 2011 +0100

    regmap: Make _regmap_write() global
    
    Signed-off-by: Dimitris Papastamos <dp@opensource.wolfsonmicro.com>
    Signed-off-by: Mark Brown <broonie@opensource.wolfsonmicro.com>

diff --git a/drivers/base/regmap/internal.h b/drivers/base/regmap/internal.h
index 2d51b1b099f7..348ff02eb93e 100644
--- a/drivers/base/regmap/internal.h
+++ b/drivers/base/regmap/internal.h
@@ -91,6 +91,9 @@ bool regmap_readable(struct regmap *map, unsigned int reg);
 bool regmap_volatile(struct regmap *map, unsigned int reg);
 bool regmap_precious(struct regmap *map, unsigned int reg);
 
+int _regmap_write(struct regmap *map, unsigned int reg,
+		  unsigned int val);
+
 #ifdef CONFIG_DEBUG_FS
 extern void regmap_debugfs_initcall(void);
 extern void regmap_debugfs_init(struct regmap *map);

commit 2cbbb579bcbe3e11baf1c59920dcd5a780b80447
Author: Dimitris Papastamos <dp@opensource.wolfsonmicro.com>
Date:   Mon Sep 19 14:34:03 2011 +0100

    regmap: Add the LZO cache support
    
    This patch adds support for LZO compression when storing the register
    cache.
    
    For a typical device whose register map would normally occupy 25kB or 50kB
    by using the LZO compression technique, one can get down to ~5-7kB.  There
    might be a performance penalty associated with each individual read/write
    due to decompressing/compressing the underlying cache, however that should not
    be noticeable.  These memory benefits depend on whether the target architecture
    can get rid of the memory occupied by the original register defaults cache
    which is marked as __devinitconst.  Nevertheless there will be some memory
    gain even if the target architecture can't get rid of the original register
    map, this should be around ~30-32kB instead of 50kB.
    
    Signed-off-by: Dimitris Papastamos <dp@opensource.wolfsonmicro.com>
    Signed-off-by: Mark Brown <broonie@opensource.wolfsonmicro.com>

diff --git a/drivers/base/regmap/internal.h b/drivers/base/regmap/internal.h
index 7ef8afc77e7c..2d51b1b099f7 100644
--- a/drivers/base/regmap/internal.h
+++ b/drivers/base/regmap/internal.h
@@ -120,4 +120,6 @@ int regcache_insert_reg(struct regmap *map, unsigned int reg,
 
 extern struct regcache_ops regcache_indexed_ops;
 extern struct regcache_ops regcache_rbtree_ops;
+extern struct regcache_ops regcache_lzo_ops;
+
 #endif

commit 28644c809f44498b8cd91d00b4cdb09e63b99843
Author: Dimitris Papastamos <dp@opensource.wolfsonmicro.com>
Date:   Mon Sep 19 14:34:02 2011 +0100

    regmap: Add the rbtree cache support
    
    This patch adds support for the rbtree cache compression type.
    
    Each rbnode manages a variable length block of registers.  There can be no
    two nodes with overlapping blocks.  Each block has a base register and a
    currently top register, all the other registers, if any, lie in between these
    two and in ascending order.
    
    The reasoning behind the construction of this rbtree is simple.  In the
    snd_soc_rbtree_cache_init() function, we iterate over the register defaults
    provided by the regcache core.  For each register value that is non-zero we
    insert it in the rbtree.  In order to determine in which rbnode we need
    to add the register, we first look if there is another register already
    added that is adjacent to the one we are about to add.  If that is the case
    we append it in that rbnode block, otherwise we create a new rbnode
    with a single register in its block and add it to the tree.
    
    There are various optimizations across the implementation to speed up lookups
    by caching the most recently used rbnode.
    
    Signed-off-by: Dimitris Papastamos <dp@opensource.wolfsonmicro.com>
    Tested-by: Lars-Peter Clausen <lars@metafoo.de>
    Signed-off-by: Mark Brown <broonie@opensource.wolfsonmicro.com>

diff --git a/drivers/base/regmap/internal.h b/drivers/base/regmap/internal.h
index 5bd5759efd5c..7ef8afc77e7c 100644
--- a/drivers/base/regmap/internal.h
+++ b/drivers/base/regmap/internal.h
@@ -119,4 +119,5 @@ int regcache_insert_reg(struct regmap *map, unsigned int reg,
 			unsigned int val);
 
 extern struct regcache_ops regcache_indexed_ops;
+extern struct regcache_ops regcache_rbtree_ops;
 #endif

commit 195af65ca92179ac2b524d35d732dc6fecec2744
Author: Dimitris Papastamos <dp@opensource.wolfsonmicro.com>
Date:   Mon Sep 19 14:34:01 2011 +0100

    regmap: Add the indexed cache support
    
    This is the simplest form of a cache available in regcache.  Any
    registers whose default value is 0 are ignored.  If any of those
    registers are modified in the future, they will be placed in the
    cache on demand.  The cache layout is essentially using the provided
    register defaults by the regcache core directly and does not re-map
    it to another representation.
    
    Signed-off-by: Dimitris Papastamos <dp@opensource.wolfsonmicro.com>
    Signed-off-by: Mark Brown <broonie@opensource.wolfsonmicro.com>

diff --git a/drivers/base/regmap/internal.h b/drivers/base/regmap/internal.h
index 615f5581d5db..5bd5759efd5c 100644
--- a/drivers/base/regmap/internal.h
+++ b/drivers/base/regmap/internal.h
@@ -118,4 +118,5 @@ int regcache_lookup_reg(struct regmap *map, unsigned int reg);
 int regcache_insert_reg(struct regmap *map, unsigned int reg,
 			unsigned int val);
 
+extern struct regcache_ops regcache_indexed_ops;
 #endif

commit 9fabe24e9b1af84509b842731d2beaf85e66681e
Author: Dimitris Papastamos <dp@opensource.wolfsonmicro.com>
Date:   Mon Sep 19 14:34:00 2011 +0100

    regmap: Introduce caching support
    
    This patch introduces caching support for regmap.  The regcache API
    has evolved essentially out of ASoC soc-cache so most of the actual
    caching types (except LZO) have been tested in the past.
    
    The purpose of regcache is to optimize in time and space the handling
    of register caches.  Time optimization is achieved by not having to go
    over a slow bus like I2C to read the value of a register, instead it is
    cached locally in memory and can be retrieved faster.  Regarding space
    optimization, some of the cache types are better at packing the caches,
    for e.g. the rbtree and the LZO caches.  By doing this the sacrifice in
    time still wins over doing I2C transactions.
    
    Signed-off-by: Dimitris Papastamos <dp@opensource.wolfsonmicro.com>
    Tested-by: Lars-Peter Clausen <lars@metafoo.de>
    Signed-off-by: Mark Brown <broonie@opensource.wolfsonmicro.com>

diff --git a/drivers/base/regmap/internal.h b/drivers/base/regmap/internal.h
index a98493cde5c3..615f5581d5db 100644
--- a/drivers/base/regmap/internal.h
+++ b/drivers/base/regmap/internal.h
@@ -17,6 +17,7 @@
 #include <linux/fs.h>
 
 struct regmap;
+struct regcache_ops;
 
 struct regmap_format {
 	size_t buf_size;
@@ -49,6 +50,40 @@ struct regmap {
 
 	u8 read_flag_mask;
 	u8 write_flag_mask;
+
+	/* regcache specific members */
+	const struct regcache_ops *cache_ops;
+	enum regcache_type cache_type;
+
+	/* number of bytes in reg_defaults_raw */
+	unsigned int cache_size_raw;
+	/* number of bytes per word in reg_defaults_raw */
+	unsigned int cache_word_size;
+	/* number of entries in reg_defaults */
+	unsigned int num_reg_defaults;
+	/* number of entries in reg_defaults_raw */
+	unsigned int num_reg_defaults_raw;
+
+	/* if set, only the cache is modified not the HW */
+	unsigned int cache_only:1;
+	/* if set, only the HW is modified not the cache */
+	unsigned int cache_bypass:1;
+	/* if set, remember to free reg_defaults_raw */
+	unsigned int cache_free:1;
+
+	struct reg_default *reg_defaults;
+	const void *reg_defaults_raw;
+	void *cache;
+};
+
+struct regcache_ops {
+	const char *name;
+	enum regcache_type type;
+	int (*init)(struct regmap *map);
+	int (*exit)(struct regmap *map);
+	int (*read)(struct regmap *map, unsigned int reg, unsigned int *value);
+	int (*write)(struct regmap *map, unsigned int reg, unsigned int value);
+	int (*sync)(struct regmap *map);
 };
 
 bool regmap_writeable(struct regmap *map, unsigned int reg);
@@ -66,4 +101,21 @@ static inline void regmap_debugfs_init(struct regmap *map) { }
 static inline void regmap_debugfs_exit(struct regmap *map) { }
 #endif
 
+/* regcache core declarations */
+int regcache_init(struct regmap *map);
+void regcache_exit(struct regmap *map);
+int regcache_read(struct regmap *map,
+		       unsigned int reg, unsigned int *value);
+int regcache_write(struct regmap *map,
+			unsigned int reg, unsigned int value);
+int regcache_sync(struct regmap *map);
+
+unsigned int regcache_get_val(const void *base, unsigned int idx,
+			      unsigned int word_size);
+bool regcache_set_val(void *base, unsigned int idx,
+		      unsigned int val, unsigned int word_size);
+int regcache_lookup_reg(struct regmap *map, unsigned int reg);
+int regcache_insert_reg(struct regmap *map, unsigned int reg,
+			unsigned int val);
+
 #endif

commit bbcf61ca8dcf093bd030a4dafb662b714676652d
Author: Lars-Peter Clausen <lars@metafoo.de>
Date:   Mon Sep 5 22:06:13 2011 +0200

    regmap: Make debugfs stubs static inline
    
    Make the debugfs stubs static inline to avoid future compilation issues due to
    duplicated symbols when CONFIG_DEBUG_FS=n once internal.h is included by
    multiple source files.
    
    Signed-off-by: Lars-Peter Clausen <lars@metafoo.de>
    Signed-off-by: Mark Brown <broonie@opensource.wolfsonmicro.com>

diff --git a/drivers/base/regmap/internal.h b/drivers/base/regmap/internal.h
index 7e14d5a6f53e..a98493cde5c3 100644
--- a/drivers/base/regmap/internal.h
+++ b/drivers/base/regmap/internal.h
@@ -61,9 +61,9 @@ extern void regmap_debugfs_initcall(void);
 extern void regmap_debugfs_init(struct regmap *map);
 extern void regmap_debugfs_exit(struct regmap *map);
 #else
-void regmap_debugfs_initcall(void) { }
-void regmap_debugfs_init(struct regmap *map) { }
-void regmap_debugfs_exit(struct regmap *map) { }
+static inline void regmap_debugfs_initcall(void) { }
+static inline void regmap_debugfs_init(struct regmap *map) { }
+static inline void regmap_debugfs_exit(struct regmap *map) { }
 #endif
 
 #endif

commit 6f306441e97f8f9d27c43a536360fe221f675a71
Author: Lars-Peter Clausen <lars@metafoo.de>
Date:   Mon Sep 5 20:46:32 2011 +0200

    regmap: Add support for device specific write and read flag masks.
    
    Some buses like SPI have no standard notation of read or write operations.
    The general scheme here is to set or clear specific bits in the register
    address to indicate whether the operation is a read or write. We already
    support having a read flag mask per bus, but as there is no standard
    the bits which need to be set or cleared differ between devices and vendors,
    thus we need a mechanism to specify them per device.
    
    This patch adds two new entries to the regmap_config struct, read_flag_mask and
    write_flag_mask. These will be or'ed onto the top byte when doing a read or
    write operation. If both masks are empty the device will fallback to the
    regmap_bus masks.
    
    Signed-off-by: Lars-Peter Clausen <lars@metafoo.de>
    Signed-off-by: Mark Brown <broonie@opensource.wolfsonmicro.com>

diff --git a/drivers/base/regmap/internal.h b/drivers/base/regmap/internal.h
index 5ab3fefa4b05..7e14d5a6f53e 100644
--- a/drivers/base/regmap/internal.h
+++ b/drivers/base/regmap/internal.h
@@ -46,6 +46,9 @@ struct regmap {
 	bool (*readable_reg)(struct device *dev, unsigned int reg);
 	bool (*volatile_reg)(struct device *dev, unsigned int reg);
 	bool (*precious_reg)(struct device *dev, unsigned int reg);
+
+	u8 read_flag_mask;
+	u8 write_flag_mask;
 };
 
 bool regmap_writeable(struct regmap *map, unsigned int reg);

commit 8de2f081ef8ee716663f916df9f2a7d015fa0dad
Author: Mark Brown <broonie@opensource.wolfsonmicro.com>
Date:   Wed Aug 10 17:14:41 2011 +0900

    regmap: Add functions to check for access on registers
    
    We're going to be using these in quite a few places so factor out the
    readable/writable/volatile/precious checks.
    
    Signed-off-by: Mark Brown <broonie@opensource.wolfsonmicro.com>

diff --git a/drivers/base/regmap/internal.h b/drivers/base/regmap/internal.h
index a67dc68aba5e..5ab3fefa4b05 100644
--- a/drivers/base/regmap/internal.h
+++ b/drivers/base/regmap/internal.h
@@ -48,6 +48,11 @@ struct regmap {
 	bool (*precious_reg)(struct device *dev, unsigned int reg);
 };
 
+bool regmap_writeable(struct regmap *map, unsigned int reg);
+bool regmap_readable(struct regmap *map, unsigned int reg);
+bool regmap_volatile(struct regmap *map, unsigned int reg);
+bool regmap_precious(struct regmap *map, unsigned int reg);
+
 #ifdef CONFIG_DEBUG_FS
 extern void regmap_debugfs_initcall(void);
 extern void regmap_debugfs_init(struct regmap *map);

commit 2efe1642b73e74604498175de032b8a604868fb7
Author: Mark Brown <broonie@opensource.wolfsonmicro.com>
Date:   Mon Aug 8 15:41:46 2011 +0900

    regmap: Skip precious registers when dumping registers via debugfs
    
    Signed-off-by: Mark Brown <broonie@opensource.wolfsonmicro.com>

diff --git a/drivers/base/regmap/internal.h b/drivers/base/regmap/internal.h
index 78f87f316a1b..a67dc68aba5e 100644
--- a/drivers/base/regmap/internal.h
+++ b/drivers/base/regmap/internal.h
@@ -45,6 +45,7 @@ struct regmap {
 	bool (*writeable_reg)(struct device *dev, unsigned int reg);
 	bool (*readable_reg)(struct device *dev, unsigned int reg);
 	bool (*volatile_reg)(struct device *dev, unsigned int reg);
+	bool (*precious_reg)(struct device *dev, unsigned int reg);
 };
 
 #ifdef CONFIG_DEBUG_FS

commit 31244e396fa9e4854cfd6dfe305983e77802c156
Author: Mark Brown <broonie@opensource.wolfsonmicro.com>
Date:   Wed Jul 20 22:56:53 2011 +0100

    regmap: Provide register map dump via debugfs
    
    Copy over the read parts of the ASoC debugfs implementation into regmap,
    allowing users to see what the register values the device has are at
    runtime. The implementation, especially the support for seeking, is
    mostly due to Dimitris Papastamos' work in ASoC.
    
    Signed-off-by: Mark Brown <broonie@opensource.wolfsonmicro.com>

diff --git a/drivers/base/regmap/internal.h b/drivers/base/regmap/internal.h
index 7e61504a7ac3..78f87f316a1b 100644
--- a/drivers/base/regmap/internal.h
+++ b/drivers/base/regmap/internal.h
@@ -14,6 +14,7 @@
 #define _REGMAP_INTERNAL_H
 
 #include <linux/regmap.h>
+#include <linux/fs.h>
 
 struct regmap;
 
@@ -36,10 +37,24 @@ struct regmap {
 	struct regmap_format format;  /* Buffer format */
 	const struct regmap_bus *bus;
 
+#ifdef CONFIG_DEBUG_FS
+	struct dentry *debugfs;
+#endif
+
 	unsigned int max_register;
 	bool (*writeable_reg)(struct device *dev, unsigned int reg);
 	bool (*readable_reg)(struct device *dev, unsigned int reg);
 	bool (*volatile_reg)(struct device *dev, unsigned int reg);
 };
 
+#ifdef CONFIG_DEBUG_FS
+extern void regmap_debugfs_initcall(void);
+extern void regmap_debugfs_init(struct regmap *map);
+extern void regmap_debugfs_exit(struct regmap *map);
+#else
+void regmap_debugfs_initcall(void) { }
+void regmap_debugfs_init(struct regmap *map) { }
+void regmap_debugfs_exit(struct regmap *map) { }
+#endif
+
 #endif

commit 93de91245b66f20dd387c2745744950a11a5c436
Author: Mark Brown <broonie@opensource.wolfsonmicro.com>
Date:   Wed Jul 20 22:35:37 2011 +0100

    regmap: Use a local header for API internals
    
    Allowing the implementation to be multi-file.
    
    Signed-off-by: Mark Brown <broonie@opensource.wolfsonmicro.com>

diff --git a/drivers/base/regmap/internal.h b/drivers/base/regmap/internal.h
new file mode 100644
index 000000000000..7e61504a7ac3
--- /dev/null
+++ b/drivers/base/regmap/internal.h
@@ -0,0 +1,45 @@
+/*
+ * Register map access API internal header
+ *
+ * Copyright 2011 Wolfson Microelectronics plc
+ *
+ * Author: Mark Brown <broonie@opensource.wolfsonmicro.com>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation.
+ */
+
+#ifndef _REGMAP_INTERNAL_H
+#define _REGMAP_INTERNAL_H
+
+#include <linux/regmap.h>
+
+struct regmap;
+
+struct regmap_format {
+	size_t buf_size;
+	size_t reg_bytes;
+	size_t val_bytes;
+	void (*format_write)(struct regmap *map,
+			     unsigned int reg, unsigned int val);
+	void (*format_reg)(void *buf, unsigned int reg);
+	void (*format_val)(void *buf, unsigned int val);
+	unsigned int (*parse_val)(void *buf);
+};
+
+struct regmap {
+	struct mutex lock;
+
+	struct device *dev; /* Device we do I/O on */
+	void *work_buf;     /* Scratch buffer used to format I/O */
+	struct regmap_format format;  /* Buffer format */
+	const struct regmap_bus *bus;
+
+	unsigned int max_register;
+	bool (*writeable_reg)(struct device *dev, unsigned int reg);
+	bool (*readable_reg)(struct device *dev, unsigned int reg);
+	bool (*volatile_reg)(struct device *dev, unsigned int reg);
+};
+
+#endif
