commit df2fbf5bfa0e7fff8b4784507e4d68f200454318
Merge: 44ebe016df3a 8d485da0ddee
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Fri Jun 12 14:10:21 2020 -0700

    Merge tag 'thermal-v5.8-rc1' of git://git.kernel.org/pub/scm/linux/kernel/git/thermal/linux
    
    Pull thermal updates from Daniel Lezcano:
    
     - Add the hwmon support on the i.MX SC (Anson Huang)
    
     - Thermal framework cleanups (self-encapsulation, pointless stubs,
       private structures) (Daniel Lezcano)
    
     - Use the PM QoS frequency changes for the devfreq cooling device
       (Matthias Kaehlcke)
    
     - Remove duplicate error messages from platform_get_irq() error
       handling (Markus Elfring)
    
     - Add support for the bandgap sensors (Keerthy)
    
     - Statically initialize .get_mode/.set_mode ops (Andrzej Pietrasiewicz)
    
     - Add Renesas R-Car maintainer entry (Niklas Söderlund)
    
     - Fix error checking after calling ti_bandgap_get_sensor_data() for the
       TI SoC thermal (Sudip Mukherjee)
    
     - Add latency constraint for the idle injection, the DT binding and the
       change the registering function (Daniel Lezcano)
    
     - Convert the thermal framework binding to the Yaml schema (Amit
       Kucheria)
    
     - Replace zero-length array with flexible-array on i.MX 8MM (Gustavo A.
       R. Silva)
    
     - Thermal framework cleanups (alphabetic order for heads, replace
       module.h by export.h, make file naming consistent) (Amit Kucheria)
    
     - Merge tsens-common into the tsens driver (Amit Kucheria)
    
     - Fix platform dependency for the Qoriq driver (Geert Uytterhoeven)
    
     - Clean up the rcar_thermal_update_temp() function in the rcar thermal
       driver (Niklas Söderlund)
    
     - Fix the TMSAR register for the TMUv2 on the Qoriq platform (Yuantian
       Tang)
    
     - Export GDDV, OEM vendor variables, and don't require IDSP for the
       int340x thermal driver - trivial conflicts fixed (Matthew Garrett)
    
    * tag 'thermal-v5.8-rc1' of git://git.kernel.org/pub/scm/linux/kernel/git/thermal/linux: (48 commits)
      thermal/int340x_thermal: Don't require IDSP to exist
      thermal/int340x_thermal: Export OEM vendor variables
      thermal/int340x_thermal: Export GDDV
      thermal: qoriq: Update the settings for TMUv2
      thermal: rcar_thermal: Clean up rcar_thermal_update_temp()
      thermal: qoriq: Add platform dependencies
      drivers: thermal: tsens: Merge tsens-common.c into tsens.c
      thermal/of: Rename of-thermal.c
      thermal/governors: Prefix all source files with gov_
      thermal/drivers/user_space: Sort headers alphabetically
      thermal/drivers/of-thermal: Sort headers alphabetically
      thermal/drivers/cpufreq_cooling: Replace module.h with export.h
      thermal/drivers/cpufreq_cooling: Sort headers alphabetically
      thermal/drivers/clock_cooling: Include export.h
      thermal/drivers/clock_cooling: Sort headers alphabetically
      thermal/drivers/thermal_hwmon: Include export.h
      thermal/drivers/thermal_hwmon: Sort headers alphabetically
      thermal/drivers/thermal_helpers: Include export.h
      thermal/drivers/thermal_helpers: Sort headers alphabetically
      thermal/core: Replace module.h with export.h
      ...

commit 755a7397947e21123d8162eaf7477b614732ff22
Author: Dong Aisheng <aisheng.dong@nxp.com>
Date:   Sun Apr 26 16:11:43 2020 +0800

    dt-bindings: firmware: imx: Move system control into dt-binding headfile
    
    i.MX8 SoCs DTS file needs system control macro definitions, so move them
    into dt-binding headfile, then include/linux/firmware/imx/types.h can be
    removed and those drivers using it should be changed accordingly.
    
    Signed-off-by: Dong Aisheng <aisheng.dong@nxp.com>
    Signed-off-by: Jacky Bai <ping.bai@nxp.com>
    Signed-off-by: Anson Huang <Anson.Huang@nxp.com>
    Signed-off-by: Shawn Guo <shawnguo@kernel.org>

diff --git a/drivers/thermal/imx_sc_thermal.c b/drivers/thermal/imx_sc_thermal.c
index a8723b1eb8b0..8938ea81a525 100644
--- a/drivers/thermal/imx_sc_thermal.c
+++ b/drivers/thermal/imx_sc_thermal.c
@@ -3,9 +3,9 @@
  * Copyright 2018-2020 NXP.
  */
 
+#include <dt-bindings/firmware/imx/rsrc.h>
 #include <linux/err.h>
 #include <linux/firmware/imx/sci.h>
-#include <linux/firmware/imx/types.h>
 #include <linux/module.h>
 #include <linux/of.h>
 #include <linux/of_device.h>

commit d2bc4dd91da6095a769fdc9bc519d3be7ad5f97a
Author: Anson Huang <Anson.Huang@nxp.com>
Date:   Thu Mar 26 11:13:31 2020 +0800

    thermal: imx_sc_thermal: Add hwmon support
    
    Expose i.MX SC thermal sensors as HWMON devices.
    
    Signed-off-by: Anson Huang <Anson.Huang@nxp.com>
    Reviewed-by: Amit Kucheria <amit.kucheria@linaro.org>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Link: https://lore.kernel.org/r/1585192411-25593-1-git-send-email-Anson.Huang@nxp.com

diff --git a/drivers/thermal/imx_sc_thermal.c b/drivers/thermal/imx_sc_thermal.c
index a8723b1eb8b0..b2b68c943738 100644
--- a/drivers/thermal/imx_sc_thermal.c
+++ b/drivers/thermal/imx_sc_thermal.c
@@ -14,6 +14,7 @@
 #include <linux/thermal.h>
 
 #include "thermal_core.h"
+#include "thermal_hwmon.h"
 
 #define IMX_SC_MISC_FUNC_GET_TEMP	13
 
@@ -115,6 +116,9 @@ static int imx_sc_thermal_probe(struct platform_device *pdev)
 			ret = PTR_ERR(sensor->tzd);
 			break;
 		}
+
+		if (devm_thermal_add_hwmon_sysfs(sensor->tzd))
+			dev_warn(&pdev->dev, "failed to add hwmon sysfs attributes\n");
 	}
 
 	of_node_put(sensor_np);

commit 968ea0dffa9396e9f8e00f12fd69be95f5a09191
Author: Anson Huang <Anson.Huang@nxp.com>
Date:   Thu Mar 19 16:26:20 2020 +0800

    thermal: imx_sc_thermal: Fix incorrect data type
    
    The temperature value passed from SCU could be negative value,
    the data type should be signed instead of unsigned.
    
    Fixes: e20db70dba1c ("thermal: imx_sc: add i.MX system controller thermal support")
    Signed-off-by: Anson Huang <Anson.Huang@nxp.com>
    Reviewed-by: Amit Kucheria <amit.kucheria@linaro.org>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Link: https://lore.kernel.org/r/1584606380-9972-1-git-send-email-Anson.Huang@nxp.com

diff --git a/drivers/thermal/imx_sc_thermal.c b/drivers/thermal/imx_sc_thermal.c
index dbb277af232d..a8723b1eb8b0 100644
--- a/drivers/thermal/imx_sc_thermal.c
+++ b/drivers/thermal/imx_sc_thermal.c
@@ -30,8 +30,8 @@ struct req_get_temp {
 } __packed __aligned(4);
 
 struct resp_get_temp {
-	u16 celsius;
-	u8 tenths;
+	s16 celsius;
+	s8 tenths;
 } __packed __aligned(4);
 
 struct imx_sc_msg_misc_get_temp {

commit 1fd213f38b999b95777d4dddc7e232e08f2294c8
Author: Anson Huang <Anson.Huang@nxp.com>
Date:   Mon Mar 2 10:51:25 2020 +0800

    thermal: imx_sc_thermal: Align imx sc thermal msg structs to 4
    
    The i.MX SCU API strongly assumes that messages are composed out
    of 4-bytes words but some of our message structs have odd sizeofs,
    use __packed __aligned(4) to avoid potential oopses.
    
    Signed-off-by: Anson Huang <Anson.Huang@nxp.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Link: https://lore.kernel.org/r/1583117485-30922-1-git-send-email-Anson.Huang@nxp.com

diff --git a/drivers/thermal/imx_sc_thermal.c b/drivers/thermal/imx_sc_thermal.c
index 4955dfd285ce..dbb277af232d 100644
--- a/drivers/thermal/imx_sc_thermal.c
+++ b/drivers/thermal/imx_sc_thermal.c
@@ -27,12 +27,12 @@ struct imx_sc_sensor {
 struct req_get_temp {
 	u16 resource_id;
 	u8 type;
-} __packed;
+} __packed __aligned(4);
 
 struct resp_get_temp {
 	u16 celsius;
 	u8 tenths;
-} __packed;
+} __packed __aligned(4);
 
 struct imx_sc_msg_misc_get_temp {
 	struct imx_sc_rpc_msg hdr;
@@ -40,7 +40,7 @@ struct imx_sc_msg_misc_get_temp {
 		struct req_get_temp req;
 		struct resp_get_temp resp;
 	} data;
-};
+} __packed __aligned(4);
 
 static int imx_sc_thermal_get_temp(void *data, int *temp)
 {

commit e20db70dba1c0783b9878ce37171ad560b1ebaf3
Author: Anson Huang <Anson.Huang@nxp.com>
Date:   Sat Feb 22 08:08:50 2020 +0800

    thermal: imx_sc: add i.MX system controller thermal support
    
    i.MX8QXP is an ARMv8 SoC which has a Cortex-M4 system controller
    inside, the system controller is in charge of controlling power,
    clock and thermal sensors etc..
    
    This patch adds i.MX system controller thermal driver support,
    Linux kernel has to communicate with system controller via MU
    (message unit) IPC to get each thermal sensor's temperature,
    it supports multiple sensors which are passed from device tree,
    please see the binding doc for details.
    
    Signed-off-by: Anson Huang <Anson.Huang@nxp.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Link: https://lore.kernel.org/r/1582330132-13461-3-git-send-email-Anson.Huang@nxp.com

diff --git a/drivers/thermal/imx_sc_thermal.c b/drivers/thermal/imx_sc_thermal.c
new file mode 100644
index 000000000000..4955dfd285ce
--- /dev/null
+++ b/drivers/thermal/imx_sc_thermal.c
@@ -0,0 +1,148 @@
+// SPDX-License-Identifier: GPL-2.0+
+/*
+ * Copyright 2018-2020 NXP.
+ */
+
+#include <linux/err.h>
+#include <linux/firmware/imx/sci.h>
+#include <linux/firmware/imx/types.h>
+#include <linux/module.h>
+#include <linux/of.h>
+#include <linux/of_device.h>
+#include <linux/platform_device.h>
+#include <linux/slab.h>
+#include <linux/thermal.h>
+
+#include "thermal_core.h"
+
+#define IMX_SC_MISC_FUNC_GET_TEMP	13
+
+static struct imx_sc_ipc *thermal_ipc_handle;
+
+struct imx_sc_sensor {
+	struct thermal_zone_device *tzd;
+	u32 resource_id;
+};
+
+struct req_get_temp {
+	u16 resource_id;
+	u8 type;
+} __packed;
+
+struct resp_get_temp {
+	u16 celsius;
+	u8 tenths;
+} __packed;
+
+struct imx_sc_msg_misc_get_temp {
+	struct imx_sc_rpc_msg hdr;
+	union {
+		struct req_get_temp req;
+		struct resp_get_temp resp;
+	} data;
+};
+
+static int imx_sc_thermal_get_temp(void *data, int *temp)
+{
+	struct imx_sc_msg_misc_get_temp msg;
+	struct imx_sc_rpc_msg *hdr = &msg.hdr;
+	struct imx_sc_sensor *sensor = data;
+	int ret;
+
+	msg.data.req.resource_id = sensor->resource_id;
+	msg.data.req.type = IMX_SC_C_TEMP;
+
+	hdr->ver = IMX_SC_RPC_VERSION;
+	hdr->svc = IMX_SC_RPC_SVC_MISC;
+	hdr->func = IMX_SC_MISC_FUNC_GET_TEMP;
+	hdr->size = 2;
+
+	ret = imx_scu_call_rpc(thermal_ipc_handle, &msg, true);
+	if (ret) {
+		dev_err(&sensor->tzd->device, "read temp sensor %d failed, ret %d\n",
+			sensor->resource_id, ret);
+		return ret;
+	}
+
+	*temp = msg.data.resp.celsius * 1000 + msg.data.resp.tenths * 100;
+
+	return 0;
+}
+
+static const struct thermal_zone_of_device_ops imx_sc_thermal_ops = {
+	.get_temp = imx_sc_thermal_get_temp,
+};
+
+static int imx_sc_thermal_probe(struct platform_device *pdev)
+{
+	struct device_node *np, *child, *sensor_np;
+	struct imx_sc_sensor *sensor;
+	int ret;
+
+	ret = imx_scu_get_handle(&thermal_ipc_handle);
+	if (ret)
+		return ret;
+
+	np = of_find_node_by_name(NULL, "thermal-zones");
+	if (!np)
+		return -ENODEV;
+
+	sensor_np = of_node_get(pdev->dev.of_node);
+
+	for_each_available_child_of_node(np, child) {
+		sensor = devm_kzalloc(&pdev->dev, sizeof(*sensor), GFP_KERNEL);
+		if (!sensor) {
+			of_node_put(sensor_np);
+			return -ENOMEM;
+		}
+
+		ret = thermal_zone_of_get_sensor_id(child,
+						    sensor_np,
+						    &sensor->resource_id);
+		if (ret < 0) {
+			dev_err(&pdev->dev,
+				"failed to get valid sensor resource id: %d\n",
+				ret);
+			break;
+		}
+
+		sensor->tzd = devm_thermal_zone_of_sensor_register(&pdev->dev,
+								   sensor->resource_id,
+								   sensor,
+								   &imx_sc_thermal_ops);
+		if (IS_ERR(sensor->tzd)) {
+			dev_err(&pdev->dev, "failed to register thermal zone\n");
+			ret = PTR_ERR(sensor->tzd);
+			break;
+		}
+	}
+
+	of_node_put(sensor_np);
+
+	return ret;
+}
+
+static int imx_sc_thermal_remove(struct platform_device *pdev)
+{
+	return 0;
+}
+
+static const struct of_device_id imx_sc_thermal_table[] = {
+	{ .compatible = "fsl,imx-sc-thermal", },
+	{}
+};
+MODULE_DEVICE_TABLE(of, imx_sc_thermal_table);
+
+static struct platform_driver imx_sc_thermal_driver = {
+		.probe = imx_sc_thermal_probe,
+		.remove	= imx_sc_thermal_remove,
+		.driver = {
+			.name = "imx-sc-thermal",
+			.of_match_table = imx_sc_thermal_table,
+		},
+};
+module_platform_driver(imx_sc_thermal_driver);
+
+MODULE_AUTHOR("Anson Huang <Anson.Huang@nxp.com>");
+MODULE_DESCRIPTION("Thermal driver for NXP i.MX SoCs with system controller");
+MODULE_LICENSE("GPL v2");
