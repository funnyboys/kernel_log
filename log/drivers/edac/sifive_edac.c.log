commit b62061b82a6e6783bed5f9052326694ba1418bba
Merge: 35417d57efaa 7e5d6cf35329
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Mon Jan 27 09:16:22 2020 -0800

    Merge tag 'edac_for_5.6' of git://git.kernel.org/pub/scm/linux/kernel/git/ras/ras
    
    Pull EDAC updates from Borislav Petkov:
     "A totally boring branch this time around: a garden variety of small
      fixes all over the place"
    
    * tag 'edac_for_5.6' of git://git.kernel.org/pub/scm/linux/kernel/git/ras/ras:
      EDAC/amd64: Do not warn when removing instances
      EDAC/sifive: Fix return value check in ecc_register()
      EDAC/aspeed: Remove unneeded semicolon
      EDAC: remove set but not used variable 'ecc_loc'
      EDAC: skx_common: downgrade message importance on missing PCI device
      EDAC/Kconfig: Fix Kconfig indentation

commit 6cd18453b68942913fd3b1913b707646e544c2ac
Author: Wei Yongjun <weiyongjun1@huawei.com>
Date:   Wed Jan 15 15:03:03 2020 +0000

    EDAC/sifive: Fix return value check in ecc_register()
    
    In case of error, the function edac_device_alloc_ctl_info() returns a
    NULL pointer, not ERR_PTR(). Replace the IS_ERR() test in the return
    value check with a NULL test.
    
    Fixes: 91abaeaaff35 ("EDAC/sifive: Add EDAC platform driver for SiFive SoCs")
    Signed-off-by: Wei Yongjun <weiyongjun1@huawei.com>
    Signed-off-by: Borislav Petkov <bp@suse.de>
    Link: https://lkml.kernel.org/r/20200115150303.112627-1-weiyongjun1@huawei.com

diff --git a/drivers/edac/sifive_edac.c b/drivers/edac/sifive_edac.c
index 413cdb4a591d..bb9ceeaf29bf 100644
--- a/drivers/edac/sifive_edac.c
+++ b/drivers/edac/sifive_edac.c
@@ -54,8 +54,8 @@ static int ecc_register(struct platform_device *pdev)
 	p->dci = edac_device_alloc_ctl_info(0, "sifive_ecc", 1, "sifive_ecc",
 					    1, 1, NULL, 0,
 					    edac_device_alloc_index());
-	if (IS_ERR(p->dci))
-		return PTR_ERR(p->dci);
+	if (!p->dci)
+		return -ENOMEM;
 
 	p->dci->dev = &pdev->dev;
 	p->dci->mod_name = "Sifive ECC Manager";

commit 13cf4cf030183dd9a8731f3fe32456e83b6c7b68
Author: Yash Shah <yash.shah@sifive.com>
Date:   Tue Jan 7 22:09:06 2020 -0800

    riscv: move sifive_l2_cache.h to include/soc
    
    The commit 9209fb51896f ("riscv: move sifive_l2_cache.c to drivers/soc")
    moves the sifive L2 cache driver to driver/soc. It did not move the
    header file along with the driver. Therefore this patch moves the header
    file to driver/soc
    
    Signed-off-by: Yash Shah <yash.shah@sifive.com>
    Reviewed-by: Anup Patel <anup@brainfault.org>
    [paul.walmsley@sifive.com: updated to fix the include guard]
    Fixes: 9209fb51896f ("riscv: move sifive_l2_cache.c to drivers/soc")
    Signed-off-by: Paul Walmsley <paul.walmsley@sifive.com>

diff --git a/drivers/edac/sifive_edac.c b/drivers/edac/sifive_edac.c
index 413cdb4a591d..c0cc72a3b2be 100644
--- a/drivers/edac/sifive_edac.c
+++ b/drivers/edac/sifive_edac.c
@@ -10,7 +10,7 @@
 #include <linux/edac.h>
 #include <linux/platform_device.h>
 #include "edac_module.h"
-#include <asm/sifive_l2_cache.h>
+#include <soc/sifive/sifive_l2_cache.h>
 
 #define DRVNAME "sifive_edac"
 

commit 91abaeaaff35d97e88d2249f69f19db749a19a68
Author: Yash Shah <yash.shah@sifive.com>
Date:   Mon May 6 16:57:06 2019 +0530

    EDAC/sifive: Add EDAC platform driver for SiFive SoCs
    
    Add an EDAC driver for SiFive SoCs. The initial version supports ECC
    event monitoring and reporting through the EDAC framework for the SiFive
    L2 cache controller. It registers for notifier events from the L2 cache
    controller driver (arch/riscv/mm/sifive_l2_cache.c) for L2 ECC events.
    
     [ bp: Massage commit message. ]
    
    Signed-off-by: Yash Shah <yash.shah@sifive.com>
    Signed-off-by: Borislav Petkov <bp@suse.de>
    Reviewed-by: James Morse <james.morse@arm.com>
    Cc: Albert Ou <aou@eecs.berkeley.edu>
    Cc: "David S. Miller" <davem@davemloft.net>
    Cc: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Cc: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Cc: Linus Walleij <linus.walleij@linaro.org>
    Cc: linux-edac <linux-edac@vger.kernel.org>
    Cc: linux-riscv@lists.infradead.org
    Cc: Mauro Carvalho Chehab <mchehab@kernel.org>
    Cc: Nicolas Ferre <nicolas.ferre@microchip.com>
    Cc: Palmer Dabbelt <palmer@sifive.com>
    Cc: "Paul E. McKenney" <paulmck@linux.ibm.com>
    Cc: Paul Walmsley <paul.walmsley@sifive.com>
    Cc: sachin.ghadi@sifive.com
    Link: https://lkml.kernel.org/r/1557142026-15949-2-git-send-email-yash.shah@sifive.com

diff --git a/drivers/edac/sifive_edac.c b/drivers/edac/sifive_edac.c
new file mode 100644
index 000000000000..413cdb4a591d
--- /dev/null
+++ b/drivers/edac/sifive_edac.c
@@ -0,0 +1,119 @@
+// SPDX-License-Identifier: GPL-2.0
+/*
+ * SiFive Platform EDAC Driver
+ *
+ * Copyright (C) 2018-2019 SiFive, Inc.
+ *
+ * This driver is partially based on octeon_edac-pc.c
+ *
+ */
+#include <linux/edac.h>
+#include <linux/platform_device.h>
+#include "edac_module.h"
+#include <asm/sifive_l2_cache.h>
+
+#define DRVNAME "sifive_edac"
+
+struct sifive_edac_priv {
+	struct notifier_block notifier;
+	struct edac_device_ctl_info *dci;
+};
+
+/**
+ * EDAC error callback
+ *
+ * @event: non-zero if unrecoverable.
+ */
+static
+int ecc_err_event(struct notifier_block *this, unsigned long event, void *ptr)
+{
+	const char *msg = (char *)ptr;
+	struct sifive_edac_priv *p;
+
+	p = container_of(this, struct sifive_edac_priv, notifier);
+
+	if (event == SIFIVE_L2_ERR_TYPE_UE)
+		edac_device_handle_ue(p->dci, 0, 0, msg);
+	else if (event == SIFIVE_L2_ERR_TYPE_CE)
+		edac_device_handle_ce(p->dci, 0, 0, msg);
+
+	return NOTIFY_OK;
+}
+
+static int ecc_register(struct platform_device *pdev)
+{
+	struct sifive_edac_priv *p;
+
+	p = devm_kzalloc(&pdev->dev, sizeof(*p), GFP_KERNEL);
+	if (!p)
+		return -ENOMEM;
+
+	p->notifier.notifier_call = ecc_err_event;
+	platform_set_drvdata(pdev, p);
+
+	p->dci = edac_device_alloc_ctl_info(0, "sifive_ecc", 1, "sifive_ecc",
+					    1, 1, NULL, 0,
+					    edac_device_alloc_index());
+	if (IS_ERR(p->dci))
+		return PTR_ERR(p->dci);
+
+	p->dci->dev = &pdev->dev;
+	p->dci->mod_name = "Sifive ECC Manager";
+	p->dci->ctl_name = dev_name(&pdev->dev);
+	p->dci->dev_name = dev_name(&pdev->dev);
+
+	if (edac_device_add_device(p->dci)) {
+		dev_err(p->dci->dev, "failed to register with EDAC core\n");
+		goto err;
+	}
+
+	register_sifive_l2_error_notifier(&p->notifier);
+
+	return 0;
+
+err:
+	edac_device_free_ctl_info(p->dci);
+
+	return -ENXIO;
+}
+
+static int ecc_unregister(struct platform_device *pdev)
+{
+	struct sifive_edac_priv *p = platform_get_drvdata(pdev);
+
+	unregister_sifive_l2_error_notifier(&p->notifier);
+	edac_device_del_device(&pdev->dev);
+	edac_device_free_ctl_info(p->dci);
+
+	return 0;
+}
+
+static struct platform_device *sifive_pdev;
+
+static int __init sifive_edac_init(void)
+{
+	int ret;
+
+	sifive_pdev = platform_device_register_simple(DRVNAME, 0, NULL, 0);
+	if (IS_ERR(sifive_pdev))
+		return PTR_ERR(sifive_pdev);
+
+	ret = ecc_register(sifive_pdev);
+	if (ret)
+		platform_device_unregister(sifive_pdev);
+
+	return ret;
+}
+
+static void __exit sifive_edac_exit(void)
+{
+	ecc_unregister(sifive_pdev);
+	platform_device_unregister(sifive_pdev);
+}
+
+module_init(sifive_edac_init);
+module_exit(sifive_edac_exit);
+
+MODULE_AUTHOR("SiFive Inc.");
+MODULE_DESCRIPTION("SiFive platform EDAC driver");
+MODULE_LICENSE("GPL v2");
