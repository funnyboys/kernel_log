commit 0db592b1a3b7b513e16920a9cf8545e6732189c9
Author: K V, Abhilash <abhilash.k.v@intel.com>
Date:   Thu Apr 23 16:20:55 2020 +0300

    usb: typec: ucsi: replace magic numbers
    
    Replace magic numbers with macros in trace.h.
    
    Signed-off-by: K V, Abhilash <abhilash.k.v@intel.com>
    Signed-off-by: Heikki Krogerus <heikki.krogerus@linux.intel.com>
    Link: https://lore.kernel.org/r/20200423132058.6972-4-heikki.krogerus@linux.intel.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/usb/typec/ucsi/trace.c b/drivers/usb/typec/ucsi/trace.c
index 48ad1dc1b1b2..cb62ad835761 100644
--- a/drivers/usb/typec/ucsi/trace.c
+++ b/drivers/usb/typec/ucsi/trace.c
@@ -35,16 +35,16 @@ const char *ucsi_cmd_str(u64 raw_cmd)
 
 const char *ucsi_cci_str(u32 cci)
 {
-	if (cci & GENMASK(7, 0)) {
-		if (cci & BIT(29))
+	if (UCSI_CCI_CONNECTOR(cci)) {
+		if (cci & UCSI_CCI_ACK_COMPLETE)
 			return "Event pending (ACK completed)";
-		if (cci & BIT(31))
+		if (cci & UCSI_CCI_COMMAND_COMPLETE)
 			return "Event pending (command completed)";
 		return "Connector Change";
 	}
-	if (cci & BIT(29))
+	if (cci & UCSI_CCI_ACK_COMPLETE)
 		return "ACK completed";
-	if (cci & BIT(31))
+	if (cci & UCSI_CCI_COMMAND_COMPLETE)
 		return "Command completed";
 
 	return "";

commit 470ce43a1a810117f09aa4bcad6ca2be6b29c8d1
Author: Heikki Krogerus <heikki.krogerus@linux.intel.com>
Date:   Mon Nov 4 17:24:32 2019 +0300

    usb: typec: ucsi: Remove struct ucsi_control
    
    That data structure was used for constructing the commands
    before executing them, but it was never really useful. Using
    the structure just complicated the driver. The commands are
    64-bit wide, so it is enough to simply fill a u64 variable.
    No data structures needed.
    
    This simplifies the driver considerable and makes it much
    easier to for example add support for big endian systems
    later on.
    
    Signed-off-by: Heikki Krogerus <heikki.krogerus@linux.intel.com>
    Tested-by: Ajay Gupta <ajayg@nvidia.com>
    Reviewed-by: Guenter Roeck <linux@roeck-us.net>
    Link: https://lore.kernel.org/r/20191104142435.29960-16-heikki.krogerus@linux.intel.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/usb/typec/ucsi/trace.c b/drivers/usb/typec/ucsi/trace.c
index 1dabafb74320..48ad1dc1b1b2 100644
--- a/drivers/usb/typec/ucsi/trace.c
+++ b/drivers/usb/typec/ucsi/trace.c
@@ -33,17 +33,6 @@ const char *ucsi_cmd_str(u64 raw_cmd)
 	return ucsi_cmd_strs[(cmd >= ARRAY_SIZE(ucsi_cmd_strs)) ? 0 : cmd];
 }
 
-static const char * const ucsi_ack_strs[] = {
-	[0]				= "",
-	[UCSI_ACK_EVENT]		= "event",
-	[UCSI_ACK_CMD]			= "command",
-};
-
-const char *ucsi_ack_str(u8 ack)
-{
-	return ucsi_ack_strs[(ack >= ARRAY_SIZE(ucsi_ack_strs)) ? 0 : ack];
-}
-
 const char *ucsi_cci_str(u32 cci)
 {
 	if (cci & GENMASK(7, 0)) {

commit ad74b8649beaf1a22cf8641324e3321fa0269d16
Author: Heikki Krogerus <heikki.krogerus@linux.intel.com>
Date:   Tue Apr 23 17:21:48 2019 +0300

    usb: typec: ucsi: Preliminary support for alternate modes
    
    With UCSI the alternate modes, just like everything else
    related to USB Type-C connectors, are handled in firmware.
    The operating system can see the status and is allowed to
    request certain things, for example entering and exiting the
    modes, but the support for alternate modes is very limited
    in UCSI. The feature is also optional, which means that even
    when the platform supports alternate modes, the operating
    system may not be even made aware of them.
    
    UCSI does not support direct VDM reading or writing.
    Instead, alternate modes can be entered and exited using a
    single custom command which takes also an optional SVID
    specific configuration value as parameter. That means every
    supported alternate mode has to be handled separately in
    UCSI driver.
    
    This commit does not include support for any specific
    alternate mode. The discovered alternate modes are now
    registered, but binding a driver to an alternate mode will
    not be possible until support for that alternate mode is
    added to the UCSI driver.
    
    Tested-by: Ajay Gupta <ajayg@nvidia.com>
    Signed-off-by: Heikki Krogerus <heikki.krogerus@linux.intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/usb/typec/ucsi/trace.c b/drivers/usb/typec/ucsi/trace.c
index ffa3b4c3f338..1dabafb74320 100644
--- a/drivers/usb/typec/ucsi/trace.c
+++ b/drivers/usb/typec/ucsi/trace.c
@@ -60,3 +60,15 @@ const char *ucsi_cci_str(u32 cci)
 
 	return "";
 }
+
+static const char * const ucsi_recipient_strs[] = {
+	[UCSI_RECIPIENT_CON]		= "port",
+	[UCSI_RECIPIENT_SOP]		= "partner",
+	[UCSI_RECIPIENT_SOP_P]		= "plug (prime)",
+	[UCSI_RECIPIENT_SOP_PP]		= "plug (double prime)",
+};
+
+const char *ucsi_recipient_str(u8 recipient)
+{
+	return ucsi_recipient_strs[recipient];
+}

commit 81534d5fa973fc10a48c245c08688e61ffe41366
Author: Heikki Krogerus <heikki.krogerus@linux.intel.com>
Date:   Fri Feb 1 13:47:56 2019 +0300

    usb: typec: ucsi: Remove debug.h file
    
    It's not needed. Moving everything from it to trace.c.
    
    Signed-off-by: Heikki Krogerus <heikki.krogerus@linux.intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/usb/typec/ucsi/trace.c b/drivers/usb/typec/ucsi/trace.c
index d9a6ff6e673c..ffa3b4c3f338 100644
--- a/drivers/usb/typec/ucsi/trace.c
+++ b/drivers/usb/typec/ucsi/trace.c
@@ -1,3 +1,62 @@
 // SPDX-License-Identifier: GPL-2.0
 #define CREATE_TRACE_POINTS
+#include "ucsi.h"
 #include "trace.h"
+
+static const char * const ucsi_cmd_strs[] = {
+	[0]				= "Unknown command",
+	[UCSI_PPM_RESET]		= "PPM_RESET",
+	[UCSI_CANCEL]			= "CANCEL",
+	[UCSI_CONNECTOR_RESET]		= "CONNECTOR_RESET",
+	[UCSI_ACK_CC_CI]		= "ACK_CC_CI",
+	[UCSI_SET_NOTIFICATION_ENABLE]	= "SET_NOTIFICATION_ENABLE",
+	[UCSI_GET_CAPABILITY]		= "GET_CAPABILITY",
+	[UCSI_GET_CONNECTOR_CAPABILITY]	= "GET_CONNECTOR_CAPABILITY",
+	[UCSI_SET_UOM]			= "SET_UOM",
+	[UCSI_SET_UOR]			= "SET_UOR",
+	[UCSI_SET_PDM]			= "SET_PDM",
+	[UCSI_SET_PDR]			= "SET_PDR",
+	[UCSI_GET_ALTERNATE_MODES]	= "GET_ALTERNATE_MODES",
+	[UCSI_GET_CAM_SUPPORTED]	= "GET_CAM_SUPPORTED",
+	[UCSI_GET_CURRENT_CAM]		= "GET_CURRENT_CAM",
+	[UCSI_SET_NEW_CAM]		= "SET_NEW_CAM",
+	[UCSI_GET_PDOS]			= "GET_PDOS",
+	[UCSI_GET_CABLE_PROPERTY]	= "GET_CABLE_PROPERTY",
+	[UCSI_GET_CONNECTOR_STATUS]	= "GET_CONNECTOR_STATUS",
+	[UCSI_GET_ERROR_STATUS]		= "GET_ERROR_STATUS",
+};
+
+const char *ucsi_cmd_str(u64 raw_cmd)
+{
+	u8 cmd = raw_cmd & GENMASK(7, 0);
+
+	return ucsi_cmd_strs[(cmd >= ARRAY_SIZE(ucsi_cmd_strs)) ? 0 : cmd];
+}
+
+static const char * const ucsi_ack_strs[] = {
+	[0]				= "",
+	[UCSI_ACK_EVENT]		= "event",
+	[UCSI_ACK_CMD]			= "command",
+};
+
+const char *ucsi_ack_str(u8 ack)
+{
+	return ucsi_ack_strs[(ack >= ARRAY_SIZE(ucsi_ack_strs)) ? 0 : ack];
+}
+
+const char *ucsi_cci_str(u32 cci)
+{
+	if (cci & GENMASK(7, 0)) {
+		if (cci & BIT(29))
+			return "Event pending (ACK completed)";
+		if (cci & BIT(31))
+			return "Event pending (command completed)";
+		return "Connector Change";
+	}
+	if (cci & BIT(29))
+		return "ACK completed";
+	if (cci & BIT(31))
+		return "Command completed";
+
+	return "";
+}

commit 956c36c297a232f33f608886a504d47216338fc6
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Mon Nov 6 16:34:11 2017 +0100

    USB: typec: add SPDX identifiers to some files
    
    Due to these typec files being moved into the drivers/usb/ directory in
    this tree, they missed the larger "add SPDX tags to all files" work.  So
    add the correct SPDX license tag, based on the license text in the file
    itself.
    
    The SPDX identifier is a legally binding shorthand, which can be used
    instead of the full boiler plate text.
    
    Cc: Guenter Roeck <linux@roeck-us.net>
    Cc: Hans de Goede <hdegoede@redhat.com>
    Cc: Yueyao Zhu <yueyao.zhu@gmail.com>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: Kate Stewart <kstewart@linuxfoundation.org>
    Cc: Philippe Ombredanne <pombredanne@nexb.com>
    Acked-by: Heikki Krogerus <heikki.krogerus@linux.intel.com>
    Acked-by: Rui Miguel Silva <rmfrfs@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/usb/typec/ucsi/trace.c b/drivers/usb/typec/ucsi/trace.c
index 006f65c72a34..d9a6ff6e673c 100644
--- a/drivers/usb/typec/ucsi/trace.c
+++ b/drivers/usb/typec/ucsi/trace.c
@@ -1,2 +1,3 @@
+// SPDX-License-Identifier: GPL-2.0
 #define CREATE_TRACE_POINTS
 #include "trace.h"

commit c1b0bc2dabfa884dea49c02adaf3cd6b52b33d2f
Author: Heikki Krogerus <heikki.krogerus@linux.intel.com>
Date:   Fri Jun 16 11:21:24 2017 +0300

    usb: typec: Add support for UCSI interface
    
    UCSI - USB Type-C Connector System Software Interface - is a
    specification that defines set of registers and data
    structures for controlling the USB Type-C ports. It's
    designed for systems where an embedded controller (EC) is in
    charge of the USB Type-C PHY or USB Power Delivery
    controller. It is designed for systems with EC, but it is
    not limited to them, and for example some USB Power Delivery
    controllers will use it as their direct control interface.
    
    With UCSI the EC (or USB PD controller) acts as the port
    manager, implementing all USB Type-C and Power Delivery state
    machines. The OS can use the interfaces for reading the
    status of the ports and controlling basic operations like
    role swapping.
    
    The UCSI specification highlights the fact that it does not
    define the interface method (PCI/I2C/ACPI/etc.).
    Therefore the driver is implemented as library and every
    supported interface method needs its own driver. Driver for
    ACPI is provided in separate patch following this one.
    
    The initial driver includes support for all required
    features from UCSI specification version 1.0 (getting
    connector capabilities and status, and support for power and
    data role swapping), but none of the optional UCSI features
    (alternate modes, power source capabilities, and cable
    capabilities).
    
    Signed-off-by: Heikki Krogerus <heikki.krogerus@linux.intel.com>
    Reviewed-by: Guenter Roeck <linux@roeck-us.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/usb/typec/ucsi/trace.c b/drivers/usb/typec/ucsi/trace.c
new file mode 100644
index 000000000000..006f65c72a34
--- /dev/null
+++ b/drivers/usb/typec/ucsi/trace.c
@@ -0,0 +1,2 @@
+#define CREATE_TRACE_POINTS
+#include "trace.h"
