commit 627cfa89b1fe8d189ee71718fe9eb607026db301
Author: Johan Hovold <johan@kernel.org>
Date:   Fri Nov 3 18:12:08 2017 +0100

    USB: serial: fix module-license macros
    
    Several GPL-2.0 drivers used "GPL" rather than "GPL v2" in their
    MODULE_LICENSE macros; fix the macros to match the licenses.
    
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/usb/serial/metro-usb.c b/drivers/usb/serial/metro-usb.c
index 2832810c9693..e63cea02cfd8 100644
--- a/drivers/usb/serial/metro-usb.c
+++ b/drivers/usb/serial/metro-usb.c
@@ -368,7 +368,7 @@ static struct usb_serial_driver * const serial_drivers[] = {
 
 module_usb_serial_driver(serial_drivers, id_table);
 
-MODULE_LICENSE("GPL");
+MODULE_LICENSE("GPL v2");
 MODULE_AUTHOR("Philip Nicastro");
 MODULE_AUTHOR("Aleksey Babahin <tamerlan311@gmail.com>");
 MODULE_DESCRIPTION(DRIVER_DESC);

commit 5fd54ace4721fc5ce2bb5aef6318fcf17f421460
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Fri Nov 3 11:28:30 2017 +0100

    USB: add SPDX identifiers to all remaining files in drivers/usb/
    
    It's good to have SPDX identifiers in all files to make it easier to
    audit the kernel tree for correct licenses.
    
    Update the drivers/usb/ and include/linux/usb* files with the correct
    SPDX license identifier based on the license text in the file itself.
    The SPDX identifier is a legally binding shorthand, which can be used
    instead of the full boiler plate text.
    
    This work is based on a script and data from Thomas Gleixner, Philippe
    Ombredanne, and Kate Stewart.
    
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: Kate Stewart <kstewart@linuxfoundation.org>
    Cc: Philippe Ombredanne <pombredanne@nexb.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Acked-by: Felipe Balbi <felipe.balbi@linux.intel.com>
    Acked-by: Johan Hovold <johan@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/usb/serial/metro-usb.c b/drivers/usb/serial/metro-usb.c
index 36f65df41721..2832810c9693 100644
--- a/drivers/usb/serial/metro-usb.c
+++ b/drivers/usb/serial/metro-usb.c
@@ -1,3 +1,4 @@
+// SPDX-License-Identifier: GPL-2.0
 /*
   Some of this code is credited to Linux USB open source files that are
   distributed with Linux.

commit 29ce32ecca842d73cd1c82f540a6fbde5d1ad44b
Merge: dc586a60a11d 7c36e6e14da5
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Thu Nov 2 17:42:47 2017 +0100

    Merge tag 'usb-serial-4.15-rc1' of git://git.kernel.org/pub/scm/linux/kernel/git/johan/usb-serial into usb-next
    
    Johan writes:
    
    USB-serial updates for v4.15-rc1
    
    Here are the USB-serial updates for 4.15-rc1, including:
    
     - three fixes for longstanding issues in garmin_gps and metro-usb which
       could lead to NULL-pointer dereferences and memory leaks
    
     - a workaround for broken f81534 firmware-handling of overruns
    
     - f81534 break support, and
    
     - conversion to timer_setup()
    
    Included are also various clean ups and a new qcserial device id.
    
    All have been in linux-next with no reported issues.
    
    Signed-off-by: Johan Hovold <johan@kernel.org>

commit 31dc3f819bac28a0990b36510197560258ab7421
Author: Johan Hovold <johan@kernel.org>
Date:   Thu Oct 12 14:50:46 2017 +0200

    USB: serial: metro-usb: add MS7820 device id
    
    Add device-id entry for (Honeywell) Metrologic MS7820 bar code scanner.
    
    The device has two interfaces (in this mode?); a vendor-specific
    interface with two interrupt endpoints and a second HID interface, which
    we do not bind to.
    
    Reported-by: Ladislav Dobrovsky <ladislav.dobrovsky@gmail.com>
    Tested-by: Ladislav Dobrovsky <ladislav.dobrovsky@gmail.com>
    Cc: stable <stable@vger.kernel.org>
    Signed-off-by: Johan Hovold <johan@kernel.org>

diff --git a/drivers/usb/serial/metro-usb.c b/drivers/usb/serial/metro-usb.c
index cc84da8dbb84..14511d6a7d44 100644
--- a/drivers/usb/serial/metro-usb.c
+++ b/drivers/usb/serial/metro-usb.c
@@ -45,6 +45,7 @@ struct metrousb_private {
 static const struct usb_device_id id_table[] = {
 	{ USB_DEVICE(FOCUS_VENDOR_ID, FOCUS_PRODUCT_ID_BI) },
 	{ USB_DEVICE(FOCUS_VENDOR_ID, FOCUS_PRODUCT_ID_UNI) },
+	{ USB_DEVICE_INTERFACE_CLASS(0x0c2e, 0x0730, 0xff) },	/* MS7820 */
 	{ }, /* Terminating entry. */
 };
 MODULE_DEVICE_TABLE(usb, id_table);

commit ee13a25fc355650b3acf43857b7a496eb6b07f0b
Author: Johan Hovold <johan@kernel.org>
Date:   Thu Oct 12 10:54:23 2017 +0200

    USB: serial: metro-usb: add missing interrupt-out endpoint check
    
    One class of "unidirectional" devices managed by this driver uses an
    interrupt-out endpoint to send control messages at open and close. Due
    to a missing endpoint sanity check, this could result in an interrupt
    URB being submitted to endpoint 0 instead. This would be caught by
    USB core (without a WARN dump), but let's verify that the expected
    endpoints are present at probe rather than when a port is later opened.
    
    Reviewed-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Johan Hovold <johan@kernel.org>

diff --git a/drivers/usb/serial/metro-usb.c b/drivers/usb/serial/metro-usb.c
index a64940975ac6..f16915b457c9 100644
--- a/drivers/usb/serial/metro-usb.c
+++ b/drivers/usb/serial/metro-usb.c
@@ -53,21 +53,33 @@ MODULE_DEVICE_TABLE(usb, id_table);
 #define UNI_CMD_OPEN	0x80
 #define UNI_CMD_CLOSE	0xFF
 
-static inline int metrousb_is_unidirectional_mode(struct usb_serial_port *port)
+static int metrousb_is_unidirectional_mode(struct usb_serial *serial)
 {
-	__u16 product_id = le16_to_cpu(
-		port->serial->dev->descriptor.idProduct);
+	u16 product_id = le16_to_cpu(serial->dev->descriptor.idProduct);
 
 	return product_id == FOCUS_PRODUCT_ID_UNI;
 }
 
+static int metrousb_calc_num_ports(struct usb_serial *serial,
+				   struct usb_serial_endpoints *epds)
+{
+	if (metrousb_is_unidirectional_mode(serial)) {
+		if (epds->num_interrupt_out == 0) {
+			dev_err(&serial->interface->dev, "interrupt-out endpoint missing\n");
+			return -ENODEV;
+		}
+	}
+
+	return 1;
+}
+
 static int metrousb_send_unidirectional_cmd(u8 cmd, struct usb_serial_port *port)
 {
 	int ret;
 	int actual_len;
 	u8 *buffer_cmd = NULL;
 
-	if (!metrousb_is_unidirectional_mode(port))
+	if (!metrousb_is_unidirectional_mode(port->serial))
 		return 0;
 
 	buffer_cmd = kzalloc(sizeof(cmd), GFP_KERNEL);
@@ -334,8 +346,8 @@ static struct usb_serial_driver metrousb_device = {
 	},
 	.description		= "Metrologic USB to Serial",
 	.id_table		= id_table,
-	.num_ports		= 1,
 	.num_interrupt_in	= 1,
+	.calc_num_ports		= metrousb_calc_num_ports,
 	.open			= metrousb_open,
 	.close			= metrousb_cleanup,
 	.read_int_callback	= metrousb_read_int_callback,

commit 6f792f471fad3ed16aca9ccedacdcd48fbedf7a9
Author: Johan Hovold <johan@kernel.org>
Date:   Thu Oct 12 10:54:22 2017 +0200

    USB: serial: metro-usb: simplify endpoint check
    
    Let usb-serial core verify that the interrupt-in endpoint is present
    when binding the interface instead of the driver verifying this at every
    open.
    
    Reviewed-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Johan Hovold <johan@kernel.org>

diff --git a/drivers/usb/serial/metro-usb.c b/drivers/usb/serial/metro-usb.c
index 4bb29e03dae4..a64940975ac6 100644
--- a/drivers/usb/serial/metro-usb.c
+++ b/drivers/usb/serial/metro-usb.c
@@ -160,13 +160,6 @@ static int metrousb_open(struct tty_struct *tty, struct usb_serial_port *port)
 	unsigned long flags = 0;
 	int result = 0;
 
-	/* Make sure the urb is initialized. */
-	if (!port->interrupt_in_urb) {
-		dev_err(&port->dev, "%s - interrupt urb not initialized\n",
-			__func__);
-		return -ENODEV;
-	}
-
 	/* Set the private data information for the port. */
 	spin_lock_irqsave(&metro_priv->lock, flags);
 	metro_priv->control_state = 0;
@@ -342,6 +335,7 @@ static struct usb_serial_driver metrousb_device = {
 	.description		= "Metrologic USB to Serial",
 	.id_table		= id_table,
 	.num_ports		= 1,
+	.num_interrupt_in	= 1,
 	.open			= metrousb_open,
 	.close			= metrousb_cleanup,
 	.read_int_callback	= metrousb_read_int_callback,

commit 2339536d229df25c71c0900fc619289229bfecf6
Author: Johan Hovold <johan@kernel.org>
Date:   Thu Oct 12 10:54:21 2017 +0200

    USB: serial: metro-usb: stop I/O after failed open
    
    Make sure to kill the interrupt-in URB after a failed open request.
    Apart from saving power (and avoiding stale input after a later
    successful open), this also prevents a NULL-deref in the completion
    handler if the port is manually unbound.
    
    Reviewed-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Fixes: 704577861d5e ("USB: serial: metro-usb: get data from device in Uni-Directional mode.")
    Cc: stable <stable@vger.kernel.org>     # 3.5
    Signed-off-by: Johan Hovold <johan@kernel.org>

diff --git a/drivers/usb/serial/metro-usb.c b/drivers/usb/serial/metro-usb.c
index cc84da8dbb84..4bb29e03dae4 100644
--- a/drivers/usb/serial/metro-usb.c
+++ b/drivers/usb/serial/metro-usb.c
@@ -188,7 +188,7 @@ static int metrousb_open(struct tty_struct *tty, struct usb_serial_port *port)
 		dev_err(&port->dev,
 			"%s - failed submitting interrupt in urb, error code=%d\n",
 			__func__, result);
-		goto exit;
+		return result;
 	}
 
 	/* Send activate cmd to device */
@@ -197,9 +197,14 @@ static int metrousb_open(struct tty_struct *tty, struct usb_serial_port *port)
 		dev_err(&port->dev,
 			"%s - failed to configure device, error code=%d\n",
 			__func__, result);
-		goto exit;
+		goto err_kill_urb;
 	}
-exit:
+
+	return 0;
+
+err_kill_urb:
+	usb_kill_urb(port->interrupt_in_urb);
+
 	return result;
 }
 

commit acfe27633b4c380a67956bd2f73fc9a2c932cc39
Author: Johan Hovold <johan@kernel.org>
Date:   Wed Feb 8 13:49:19 2017 +0100

    USB: serial: metro-usb: drop redundant URB reinitialisation
    
    No need to reinitialise the interrupt-in URB with values that have not
    changed before (some) resubmissions.
    
    This also allows the interrupt-in callback to have a single path for URB
    resubmission.
    
    Reviewed-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Johan Hovold <johan@kernel.org>

diff --git a/drivers/usb/serial/metro-usb.c b/drivers/usb/serial/metro-usb.c
index f220a470197a..cc84da8dbb84 100644
--- a/drivers/usb/serial/metro-usb.c
+++ b/drivers/usb/serial/metro-usb.c
@@ -135,23 +135,8 @@ static void metrousb_read_int_callback(struct urb *urb)
 	throttled = metro_priv->throttled;
 	spin_unlock_irqrestore(&metro_priv->lock, flags);
 
-	/* Continue trying to read if set. */
-	if (!throttled) {
-		usb_fill_int_urb(port->interrupt_in_urb, port->serial->dev,
-				 usb_rcvintpipe(port->serial->dev, port->interrupt_in_endpointAddress),
-				 port->interrupt_in_urb->transfer_buffer,
-				 port->interrupt_in_urb->transfer_buffer_length,
-				 metrousb_read_int_callback, port, 1);
-
-		result = usb_submit_urb(port->interrupt_in_urb, GFP_ATOMIC);
-
-		if (result)
-			dev_err(&port->dev,
-				"%s - failed submitting interrupt in urb, error code=%d\n",
-				__func__, result);
-	}
-	return;
-
+	if (throttled)
+		return;
 exit:
 	/* Try to resubmit the urb. */
 	result = usb_submit_urb(urb, GFP_ATOMIC);
@@ -337,7 +322,6 @@ static void metrousb_unthrottle(struct tty_struct *tty)
 	spin_unlock_irqrestore(&metro_priv->lock, flags);
 
 	/* Submit the urb to read from the port. */
-	port->interrupt_in_urb->dev = port->serial->dev;
 	result = usb_submit_urb(port->interrupt_in_urb, GFP_ATOMIC);
 	if (result)
 		dev_err(tty->dev,

commit 168fc6c3c33ee7e9b2355e1a17d07e8313eb60f5
Author: Johan Hovold <johan@kernel.org>
Date:   Wed Feb 8 13:49:18 2017 +0100

    USB: serial: metro-usb: drop function-tracing debugging
    
    Drop some unnecessary debug printks.
    
    Reviewed-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Johan Hovold <johan@kernel.org>

diff --git a/drivers/usb/serial/metro-usb.c b/drivers/usb/serial/metro-usb.c
index b0c7746438df..f220a470197a 100644
--- a/drivers/usb/serial/metro-usb.c
+++ b/drivers/usb/serial/metro-usb.c
@@ -163,8 +163,6 @@ static void metrousb_read_int_callback(struct urb *urb)
 
 static void metrousb_cleanup(struct usb_serial_port *port)
 {
-	dev_dbg(&port->dev, "%s\n", __func__);
-
 	usb_kill_urb(port->interrupt_in_urb);
 
 	metrousb_send_unidirectional_cmd(UNI_CMD_CLOSE, port);
@@ -177,8 +175,6 @@ static int metrousb_open(struct tty_struct *tty, struct usb_serial_port *port)
 	unsigned long flags = 0;
 	int result = 0;
 
-	dev_dbg(&port->dev, "%s\n", __func__);
-
 	/* Make sure the urb is initialized. */
 	if (!port->interrupt_in_urb) {
 		dev_err(&port->dev, "%s - interrupt urb not initialized\n",
@@ -218,8 +214,6 @@ static int metrousb_open(struct tty_struct *tty, struct usb_serial_port *port)
 			__func__, result);
 		goto exit;
 	}
-
-	dev_dbg(&port->dev, "%s - port open\n", __func__);
 exit:
 	return result;
 }
@@ -281,8 +275,6 @@ static void metrousb_throttle(struct tty_struct *tty)
 	struct metrousb_private *metro_priv = usb_get_serial_port_data(port);
 	unsigned long flags = 0;
 
-	dev_dbg(tty->dev, "%s\n", __func__);
-
 	/* Set the private information for the port to stop reading data. */
 	spin_lock_irqsave(&metro_priv->lock, flags);
 	metro_priv->throttled = 1;
@@ -296,8 +288,6 @@ static int metrousb_tiocmget(struct tty_struct *tty)
 	struct metrousb_private *metro_priv = usb_get_serial_port_data(port);
 	unsigned long flags = 0;
 
-	dev_dbg(tty->dev, "%s\n", __func__);
-
 	spin_lock_irqsave(&metro_priv->lock, flags);
 	control_state = metro_priv->control_state;
 	spin_unlock_irqrestore(&metro_priv->lock, flags);
@@ -341,8 +331,6 @@ static void metrousb_unthrottle(struct tty_struct *tty)
 	unsigned long flags = 0;
 	int result = 0;
 
-	dev_dbg(tty->dev, "%s\n", __func__);
-
 	/* Set the private information for the port to resume reading data. */
 	spin_lock_irqsave(&metro_priv->lock, flags);
 	metro_priv->throttled = 0;

commit d395c9ab00901cdd804c36857e9079dd794c3b1c
Author: Johan Hovold <johan@kernel.org>
Date:   Wed Feb 8 13:49:17 2017 +0100

    USB: serial: metro-usb: drop redundant URB unlink
    
    Drop redundant URB unlink as there's no need to unlink an URB which is
    about to be killed synchronously.
    
    Reviewed-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Johan Hovold <johan@kernel.org>

diff --git a/drivers/usb/serial/metro-usb.c b/drivers/usb/serial/metro-usb.c
index 4f7cd30b5424..b0c7746438df 100644
--- a/drivers/usb/serial/metro-usb.c
+++ b/drivers/usb/serial/metro-usb.c
@@ -165,7 +165,6 @@ static void metrousb_cleanup(struct usb_serial_port *port)
 {
 	dev_dbg(&port->dev, "%s\n", __func__);
 
-	usb_unlink_urb(port->interrupt_in_urb);
 	usb_kill_urb(port->interrupt_in_urb);
 
 	metrousb_send_unidirectional_cmd(UNI_CMD_CLOSE, port);

commit 965bbef552cdbf22ab7fb83e7f92b2f251d56f70
Author: Johan Hovold <johan@kernel.org>
Date:   Wed Feb 8 13:49:16 2017 +0100

    USB: serial: metro-usb: drop unused interrupt-out callback
    
    Drop the unused interrupt-out callback.
    
    Reviewed-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Johan Hovold <johan@kernel.org>

diff --git a/drivers/usb/serial/metro-usb.c b/drivers/usb/serial/metro-usb.c
index 39e683096e94..4f7cd30b5424 100644
--- a/drivers/usb/serial/metro-usb.c
+++ b/drivers/usb/serial/metro-usb.c
@@ -161,14 +161,6 @@ static void metrousb_read_int_callback(struct urb *urb)
 			__func__, result);
 }
 
-static void metrousb_write_int_callback(struct urb *urb)
-{
-	struct usb_serial_port *port = urb->context;
-
-	dev_warn(&port->dev, "%s not implemented yet.\n",
-		__func__);
-}
-
 static void metrousb_cleanup(struct usb_serial_port *port)
 {
 	dev_dbg(&port->dev, "%s\n", __func__);
@@ -377,7 +369,6 @@ static struct usb_serial_driver metrousb_device = {
 	.open			= metrousb_open,
 	.close			= metrousb_cleanup,
 	.read_int_callback	= metrousb_read_int_callback,
-	.write_int_callback	= metrousb_write_int_callback,
 	.port_probe		= metrousb_port_probe,
 	.port_remove		= metrousb_port_remove,
 	.throttle		= metrousb_throttle,

commit 803a536243b3a1ed2289f41897b11b72bd083309
Author: Paul Gortmaker <paul.gortmaker@windriver.com>
Date:   Wed Jan 8 11:08:26 2014 -0500

    usb: delete non-required instances of include <linux/init.h>
    
    None of these files are actually using any __init type directives
    and hence don't need to include <linux/init.h>.  Most are just a
    left over from __devinit and __cpuinit removal, or simply due to
    code getting copied from one driver to the next.
    
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/usb/serial/metro-usb.c b/drivers/usb/serial/metro-usb.c
index 6df2e44f05d8..39e683096e94 100644
--- a/drivers/usb/serial/metro-usb.c
+++ b/drivers/usb/serial/metro-usb.c
@@ -7,7 +7,6 @@
 */
 
 #include <linux/kernel.h>
-#include <linux/init.h>
 #include <linux/tty.h>
 #include <linux/module.h>
 #include <linux/usb.h>

commit 5c6b98dd0437ba8c1b515bf11357784335613d65
Author: Johan Hovold <jhovold@gmail.com>
Date:   Sun Dec 29 19:22:54 2013 +0100

    USB: serial: constify device-id tables
    
    Declare device-id tables as const where possible.
    
    Signed-off-by: Johan Hovold <jhovold@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/usb/serial/metro-usb.c b/drivers/usb/serial/metro-usb.c
index 2b648c41f4e7..6df2e44f05d8 100644
--- a/drivers/usb/serial/metro-usb.c
+++ b/drivers/usb/serial/metro-usb.c
@@ -43,7 +43,7 @@ struct metrousb_private {
 };
 
 /* Device table list. */
-static struct usb_device_id id_table[] = {
+static const struct usb_device_id id_table[] = {
 	{ USB_DEVICE(FOCUS_VENDOR_ID, FOCUS_PRODUCT_ID_BI) },
 	{ USB_DEVICE(FOCUS_VENDOR_ID, FOCUS_PRODUCT_ID_UNI) },
 	{ }, /* Terminating entry. */

commit 8f24c4905cdc86f9ecef1c2690950b219681e749
Author: Rashika Kheria <rashika.kheria@gmail.com>
Date:   Thu Dec 19 15:43:17 2013 +0530

    drivers: usb: Mark function as static in metro-usb.c
    
    Mark function metrousb_is_unidirectional_mode() in serial/metro-usb.c
    because it is not used outside this file.
    
    This eliminates the following warning in serial/metro-usb.c:
    drivers/usb/serial/metro-usb.c:57:12: warning: no previous prototype for ‘metrousb_is_unidirectional_mode’ [-Wmissing-prototypes]
    
    Signed-off-by: Rashika Kheria <rashika.kheria@gmail.com>
    Reviewed-by: Josh Triplett <josh@joshtriplett.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/usb/serial/metro-usb.c b/drivers/usb/serial/metro-usb.c
index 40ccf6e5e318..2b648c41f4e7 100644
--- a/drivers/usb/serial/metro-usb.c
+++ b/drivers/usb/serial/metro-usb.c
@@ -54,7 +54,7 @@ MODULE_DEVICE_TABLE(usb, id_table);
 #define UNI_CMD_OPEN	0x80
 #define UNI_CMD_CLOSE	0xFF
 
-inline int metrousb_is_unidirectional_mode(struct usb_serial_port *port)
+static inline int metrousb_is_unidirectional_mode(struct usb_serial_port *port)
 {
 	__u16 product_id = le16_to_cpu(
 		port->serial->dev->descriptor.idProduct);

commit 1143832eca8f1d64da7d85642c956ae9d25c69e1
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Thu Jun 6 10:32:00 2013 -0700

    USB: serial: ports: add minor and port number
    
    The usb_serial_port structure had the number field, which was the minor
    number for the port, which almost no one really cared about.  They
    really wanted the number of the port within the device, which you had to
    subtract from the minor of the parent usb_serial_device structure.  To
    clean this up, provide the real minor number of the port, and the number
    of the port within the serial device separately, as these numbers might
    not be related in the future.
    
    Bonus is that this cleans up a lot of logic in the drivers, and saves
    lines overall.
    
    Tested-by: Tobias Winter <tobias@linuxdingsda.de>
    Reviewed-by: Johan Hovold <jhovold@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    
    --
     drivers/staging/serqt_usb2/serqt_usb2.c |   21 +++--------
     drivers/usb/serial/ark3116.c            |    2 -
     drivers/usb/serial/bus.c                |    6 +--
     drivers/usb/serial/console.c            |    2 -
     drivers/usb/serial/cp210x.c             |    2 -
     drivers/usb/serial/cypress_m8.c         |    4 +-
     drivers/usb/serial/digi_acceleport.c    |    6 ---
     drivers/usb/serial/f81232.c             |    5 +-
     drivers/usb/serial/garmin_gps.c         |    6 +--
     drivers/usb/serial/io_edgeport.c        |   58 ++++++++++++--------------------
     drivers/usb/serial/io_ti.c              |   21 ++++-------
     drivers/usb/serial/keyspan.c            |   29 +++++++---------
     drivers/usb/serial/metro-usb.c          |    4 +-
     drivers/usb/serial/mos7720.c            |   37 +++++++++-----------
     drivers/usb/serial/mos7840.c            |   52 +++++++++-------------------
     drivers/usb/serial/opticon.c            |    2 -
     drivers/usb/serial/pl2303.c             |    2 -
     drivers/usb/serial/quatech2.c           |    7 +--
     drivers/usb/serial/sierra.c             |    2 -
     drivers/usb/serial/ti_usb_3410_5052.c   |   10 ++---
     drivers/usb/serial/usb-serial.c         |    7 ++-
     drivers/usb/serial/usb_wwan.c           |    2 -
     drivers/usb/serial/whiteheat.c          |   20 +++++------
     include/linux/usb/serial.h              |    6 ++-
     24 files changed, 133 insertions(+), 180 deletions(-)

diff --git a/drivers/usb/serial/metro-usb.c b/drivers/usb/serial/metro-usb.c
index 47e247759eb0..40ccf6e5e318 100644
--- a/drivers/usb/serial/metro-usb.c
+++ b/drivers/usb/serial/metro-usb.c
@@ -224,8 +224,8 @@ static int metrousb_open(struct tty_struct *tty, struct usb_serial_port *port)
 	result = metrousb_send_unidirectional_cmd(UNI_CMD_OPEN, port);
 	if (result) {
 		dev_err(&port->dev,
-			"%s - failed to configure device for port number=%d, error code=%d\n",
-			__func__, port->number, result);
+			"%s - failed to configure device, error code=%d\n",
+			__func__, result);
 		goto exit;
 	}
 

commit 5813f281bba6603bed52d6005a9d6a9f23f5c061
Author: Johan Hovold <jhovold@gmail.com>
Date:   Thu Mar 21 12:37:40 2013 +0100

    USB: metro-usb: always disable uart on close
    
    Always try to disable the uart on close.
    
    Since the switch to tty ports, close will be called as part of shutdown
    before disconnect returns. Hence there is no need to check the
    disconnected flag, and we can put devices in disabled states also on
    driver unbind.
    
    Signed-off-by: Johan Hovold <jhovold@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/usb/serial/metro-usb.c b/drivers/usb/serial/metro-usb.c
index bf3c7a23553e..47e247759eb0 100644
--- a/drivers/usb/serial/metro-usb.c
+++ b/drivers/usb/serial/metro-usb.c
@@ -177,10 +177,7 @@ static void metrousb_cleanup(struct usb_serial_port *port)
 	usb_unlink_urb(port->interrupt_in_urb);
 	usb_kill_urb(port->interrupt_in_urb);
 
-	mutex_lock(&port->serial->disc_mutex);
-	if (!port->serial->disconnected)
-		metrousb_send_unidirectional_cmd(UNI_CMD_CLOSE, port);
-	mutex_unlock(&port->serial->disc_mutex);
+	metrousb_send_unidirectional_cmd(UNI_CMD_CLOSE, port);
 }
 
 static int metrousb_open(struct tty_struct *tty, struct usb_serial_port *port)

commit 2e124b4a390ca85325fae75764bef92f0547fa25
Author: Jiri Slaby <jslaby@suse.cz>
Date:   Thu Jan 3 15:53:06 2013 +0100

    TTY: switch tty_flip_buffer_push
    
    Now, we start converting tty buffer functions to actually use
    tty_port. This will allow us to get rid of the need of tty in many
    call sites. Only tty_port will needed and hence no more
    tty_port_tty_get in those paths.
    
    Now, the one where most of tty_port_tty_get gets removed:
    tty_flip_buffer_push.
    
    IOW we also closed all the races in drivers not using tty_port_tty_get
    at all yet.
    
    Also we move tty_flip_buffer_push declaration from include/linux/tty.h
    to include/linux/tty_flip.h to all others while we are changing it
    anyway.
    
    Signed-off-by: Jiri Slaby <jslaby@suse.cz>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/usb/serial/metro-usb.c b/drivers/usb/serial/metro-usb.c
index 6264f3974ea7..bf3c7a23553e 100644
--- a/drivers/usb/serial/metro-usb.c
+++ b/drivers/usb/serial/metro-usb.c
@@ -95,7 +95,6 @@ static void metrousb_read_int_callback(struct urb *urb)
 {
 	struct usb_serial_port *port = urb->context;
 	struct metrousb_private *metro_priv = usb_get_serial_port_data(port);
-	struct tty_struct *tty;
 	unsigned char *data = urb->transfer_buffer;
 	int throttled = 0;
 	int result = 0;
@@ -124,15 +123,13 @@ static void metrousb_read_int_callback(struct urb *urb)
 
 
 	/* Set the data read from the usb port into the serial port buffer. */
-	tty = tty_port_tty_get(&port->port);
-	if (tty && urb->actual_length) {
+	if (urb->actual_length) {
 		/* Loop through the data copying each byte to the tty layer. */
 		tty_insert_flip_string(&port->port, data, urb->actual_length);
 
 		/* Force the data to the tty layer. */
-		tty_flip_buffer_push(tty);
+		tty_flip_buffer_push(&port->port);
 	}
-	tty_kref_put(tty);
 
 	/* Set any port variables. */
 	spin_lock_irqsave(&metro_priv->lock, flags);

commit 05c7cd39907184328f48d3e7899f9cdd653ad336
Author: Jiri Slaby <jslaby@suse.cz>
Date:   Thu Jan 3 15:53:04 2013 +0100

    TTY: switch tty_insert_flip_string
    
    Now, we start converting tty buffer functions to actually use
    tty_port. This will allow us to get rid of the need of tty in many
    call sites. Only tty_port will needed and hence no more
    tty_port_tty_get in those paths.
    
    tty_insert_flip_string this time.
    
    Signed-off-by: Jiri Slaby <jslaby@suse.cz>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/usb/serial/metro-usb.c b/drivers/usb/serial/metro-usb.c
index 3d258448c29a..6264f3974ea7 100644
--- a/drivers/usb/serial/metro-usb.c
+++ b/drivers/usb/serial/metro-usb.c
@@ -127,7 +127,7 @@ static void metrousb_read_int_callback(struct urb *urb)
 	tty = tty_port_tty_get(&port->port);
 	if (tty && urb->actual_length) {
 		/* Loop through the data copying each byte to the tty layer. */
-		tty_insert_flip_string(tty, data, urb->actual_length);
+		tty_insert_flip_string(&port->port, data, urb->actual_length);
 
 		/* Force the data to the tty layer. */
 		tty_flip_buffer_push(tty);

commit bcbec053d2197031d04b8e040c61695b5d7a949d
Author: Johan Hovold <jhovold@gmail.com>
Date:   Wed Oct 31 11:59:52 2012 +0100

    USB: serial: remove driver version information
    
    Remove all MODULE_VERSION macros and driver-version information (except
    for garmin_gps which uses it in a status reply).
    
    It is the kernel version that matters and not some private version
    scheme which rarely even gets updated.
    
    Signed-off-by: Johan Hovold <jhovold@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/usb/serial/metro-usb.c b/drivers/usb/serial/metro-usb.c
index 6f29c74eb769..3d258448c29a 100644
--- a/drivers/usb/serial/metro-usb.c
+++ b/drivers/usb/serial/metro-usb.c
@@ -20,8 +20,6 @@
 #include <linux/uaccess.h>
 #include <linux/usb/serial.h>
 
-/* Version Information */
-#define DRIVER_VERSION "v1.2.0.0"
 #define DRIVER_DESC "Metrologic Instruments Inc. - USB-POS driver"
 
 /* Product information. */

commit 2ee44fbeac92c36e53779a57ee84cfee1affe418
Author: Johan Hovold <jhovold@gmail.com>
Date:   Thu Oct 25 10:29:00 2012 +0200

    USB: metro-usb: fix io after disconnect
    
    Make sure no control urb is submitted during close after a disconnect by
    checking the disconnected flag.
    
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Johan Hovold <jhovold@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/usb/serial/metro-usb.c b/drivers/usb/serial/metro-usb.c
index 25cb97c25ad4..6f29c74eb769 100644
--- a/drivers/usb/serial/metro-usb.c
+++ b/drivers/usb/serial/metro-usb.c
@@ -179,16 +179,13 @@ static void metrousb_cleanup(struct usb_serial_port *port)
 {
 	dev_dbg(&port->dev, "%s\n", __func__);
 
-	if (port->serial->dev) {
-		/* Shutdown any interrupt in urbs. */
-		if (port->interrupt_in_urb) {
-			usb_unlink_urb(port->interrupt_in_urb);
-			usb_kill_urb(port->interrupt_in_urb);
-		}
-
-		/* Send deactivate cmd to device */
+	usb_unlink_urb(port->interrupt_in_urb);
+	usb_kill_urb(port->interrupt_in_urb);
+
+	mutex_lock(&port->serial->disc_mutex);
+	if (!port->serial->disconnected)
 		metrousb_send_unidirectional_cmd(UNI_CMD_CLOSE, port);
-	}
+	mutex_unlock(&port->serial->disc_mutex);
 }
 
 static int metrousb_open(struct tty_struct *tty, struct usb_serial_port *port)

commit 50dde8686eec41bf3d7cbec7a6f76c073ab01903
Author: Johan Hovold <jhovold@gmail.com>
Date:   Thu Oct 25 10:28:59 2012 +0200

    USB: metro-usb: fix port-data memory leak
    
    Fix port-data memory leak by moving port data allocation and
    deallocation to port_probe and port_remove.
    
    Since commit 0998d0631001288 (device-core: Ensure drvdata = NULL when no
    driver is bound) the port private data is no longer freed at release as
    it is no longer accessible.
    
    Note that the call to metrousb_clean (close) in shutdown was redundant.
    
    Compile-only tested.
    
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Johan Hovold <jhovold@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/usb/serial/metro-usb.c b/drivers/usb/serial/metro-usb.c
index 0b257ddffbdb..25cb97c25ad4 100644
--- a/drivers/usb/serial/metro-usb.c
+++ b/drivers/usb/serial/metro-usb.c
@@ -271,51 +271,27 @@ static int metrousb_set_modem_ctrl(struct usb_serial *serial, unsigned int contr
 	return retval;
 }
 
-static void metrousb_shutdown(struct usb_serial *serial)
+static int metrousb_port_probe(struct usb_serial_port *port)
 {
-	int i = 0;
+	struct metrousb_private *metro_priv;
 
-	dev_dbg(&serial->dev->dev, "%s\n", __func__);
+	metro_priv = kzalloc(sizeof(*metro_priv), GFP_KERNEL);
+	if (!metro_priv)
+		return -ENOMEM;
 
-	/* Stop reading and writing on all ports. */
-	for (i = 0; i < serial->num_ports; ++i) {
-		/* Close any open urbs. */
-		metrousb_cleanup(serial->port[i]);
+	spin_lock_init(&metro_priv->lock);
 
-		/* Free memory. */
-		kfree(usb_get_serial_port_data(serial->port[i]));
-		usb_set_serial_port_data(serial->port[i], NULL);
+	usb_set_serial_port_data(port, metro_priv);
 
-		dev_dbg(&serial->dev->dev, "%s - freed port number=%d\n",
-			__func__, serial->port[i]->number);
-	}
+	return 0;
 }
 
-static int metrousb_startup(struct usb_serial *serial)
+static int metrousb_port_remove(struct usb_serial_port *port)
 {
 	struct metrousb_private *metro_priv;
-	struct usb_serial_port *port;
-	int i = 0;
-
-	dev_dbg(&serial->dev->dev, "%s\n", __func__);
 
-	/* Loop through the serial ports setting up the private structures.
-	 * Currently we only use one port. */
-	for (i = 0; i < serial->num_ports; ++i) {
-		port = serial->port[i];
-
-		/* Declare memory. */
-		metro_priv = kzalloc(sizeof(struct metrousb_private), GFP_KERNEL);
-		if (!metro_priv)
-			return -ENOMEM;
-
-		/* Initialize memory. */
-		spin_lock_init(&metro_priv->lock);
-		usb_set_serial_port_data(port, metro_priv);
-
-		dev_dbg(&serial->dev->dev, "%s - port number=%d\n ",
-			__func__, port->number);
-	}
+	metro_priv = usb_get_serial_port_data(port);
+	kfree(metro_priv);
 
 	return 0;
 }
@@ -414,8 +390,8 @@ static struct usb_serial_driver metrousb_device = {
 	.close			= metrousb_cleanup,
 	.read_int_callback	= metrousb_read_int_callback,
 	.write_int_callback	= metrousb_write_int_callback,
-	.attach			= metrousb_startup,
-	.release		= metrousb_shutdown,
+	.port_probe		= metrousb_port_probe,
+	.port_remove		= metrousb_port_remove,
 	.throttle		= metrousb_throttle,
 	.unthrottle		= metrousb_unthrottle,
 	.tiocmget		= metrousb_tiocmget,

commit d9a807461fc8cc0d6ba589ea0730d139122af012
Merge: 3498d13b8090 70c048a238c7
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Mon Oct 1 13:23:01 2012 -0700

    Merge tag 'usb-3.6' of git://git.kernel.org/pub/scm/linux/kernel/git/gregkh/usb
    
    Pull USB changes from Greg Kroah-Hartman:
     "Here is the big USB pull request for 3.7-rc1
    
      There are lots of gadget driver changes (including copying a bunch of
      files into the drivers/staging/ccg/ directory so that the other gadget
      drivers can be fixed up properly without breaking that driver), and we
      remove the old obsolete ub.c driver from the tree.
    
      There are also the usual XHCI set of updates, and other various driver
      changes and updates.  We also are trying hard to remove the old dbg()
      macro, but the final bits of that removal will be coming in through
      the networking tree before we can delete it for good.
    
      All of these patches have been in the linux-next tree.
    
      Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>"
    
    Fix up several annoying - but fairly mindless - conflicts due to the
    termios structure having moved into the tty device, and often clashing
    with dbg -> dev_dbg conversion.
    
    * tag 'usb-3.6' of git://git.kernel.org/pub/scm/linux/kernel/git/gregkh/usb: (339 commits)
      USB: ezusb: move ezusb.c from drivers/usb/serial to drivers/usb/misc
      USB: uas: fix gcc warning
      USB: uas: fix locking
      USB: Fix race condition when removing host controllers
      USB: uas: add locking
      USB: uas: fix abort
      USB: uas: remove aborted field, replace with status bit.
      USB: uas: fix task management
      USB: uas: keep track of command urbs
      xhci: Intel Panther Point BEI quirk.
      powerpc/usb: remove checking PHY_CLK_VALID for UTMI PHY
      USB: ftdi_sio: add TIAO USB Multi-Protocol Adapter (TUMPA) support
      Revert "usb : Add sysfs files to control port power."
      USB: serial: remove vizzini driver
      usb: host: xhci: Fix Null pointer dereferencing with 71c731a for non-x86 systems
      Increase XHCI suspend timeout to 16ms
      USB: ohci-at91: fix null pointer in ohci_hcd_at91_overcurrent_irq
      USB: sierra_ms: don't keep unused variable
      fsl/usb: Add support for USB controller version 2.4
      USB: qcaux: add Pantech vendor class match
      ...

commit e4fd70c5e2befa29f962d640c1f78feefb7b3c25
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Fri Sep 14 12:31:42 2012 -0700

    USB: serial: metro-usb.c: remove debug module parameter
    
    Now that the dbg() macro is no longer being used in the driver,
    the debug module parameter doesn't do anything at all.  So remove
    it so as to not confuse people.
    
    CC: Aleksey Babahin <tamerlan311@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/usb/serial/metro-usb.c b/drivers/usb/serial/metro-usb.c
index d47eb06fe463..ed61b53df78b 100644
--- a/drivers/usb/serial/metro-usb.c
+++ b/drivers/usb/serial/metro-usb.c
@@ -52,9 +52,6 @@ static struct usb_device_id id_table[] = {
 };
 MODULE_DEVICE_TABLE(usb, id_table);
 
-/* Input parameter constants. */
-static bool debug;
-
 /* UNI-Directional mode commands for device configure */
 #define UNI_CMD_OPEN	0x80
 #define UNI_CMD_CLOSE	0xFF
@@ -442,7 +439,3 @@ MODULE_LICENSE("GPL");
 MODULE_AUTHOR("Philip Nicastro");
 MODULE_AUTHOR("Aleksey Babahin <tamerlan311@gmail.com>");
 MODULE_DESCRIPTION(DRIVER_DESC);
-
-/* Module input parameters */
-module_param(debug, bool, S_IRUGO | S_IWUSR);
-MODULE_PARM_DESC(debug, "Print debug info (bool 1=on, 0=off)");

commit 6b9563a714138dc2377c500e588e31f7166c92f0
Author: Alan Cox <alan@linux.intel.com>
Date:   Tue Jul 24 10:59:01 2012 +0100

    tty: fix the metro-usb change I messed up
    
    Fixes the leak of a tty kref that Jiri pointed out.
    
    Signed-off-by: Alan Cox <alan@linux.intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/usb/serial/metro-usb.c b/drivers/usb/serial/metro-usb.c
index 7ae9af6b2a54..2b0627b5fe2c 100644
--- a/drivers/usb/serial/metro-usb.c
+++ b/drivers/usb/serial/metro-usb.c
@@ -136,8 +136,8 @@ static void metrousb_read_int_callback(struct urb *urb)
 
 		/* Force the data to the tty layer. */
 		tty_flip_buffer_push(tty);
-		tty_kref_put(tty);
 	}
+	tty_kref_put(tty);
 
 	/* Set any port variables. */
 	spin_lock_irqsave(&metro_priv->lock, flags);

commit 467a3ca5cab64a16b5ec46ebb1895c84c280dcfe
Merge: 40c9f61eae90 84a1caf1453c
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Mon Jul 16 12:32:42 2012 -0700

    Merge branch 'v3.6-rc7' into tty-next
    
    This is to sync up on Linus's branch to get the other tty and core changes.
    
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 000c74d9fa14ec61411310187cfa9e43581593b5
Author: Alan Cox <alan@linux.intel.com>
Date:   Thu Jul 12 12:59:17 2012 +0100

    usb: fix sillies in the metro USB driver
    
    Bits noticed doing the termios conversion
    
    Signed-off-by: Alan Cox <alan@linux.intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/usb/serial/metro-usb.c b/drivers/usb/serial/metro-usb.c
index 81423f7361db..bad5f0cb7ae8 100644
--- a/drivers/usb/serial/metro-usb.c
+++ b/drivers/usb/serial/metro-usb.c
@@ -130,20 +130,14 @@ static void metrousb_read_int_callback(struct urb *urb)
 
 	/* Set the data read from the usb port into the serial port buffer. */
 	tty = tty_port_tty_get(&port->port);
-	if (!tty) {
-		dev_err(&port->dev, "%s - bad tty pointer - exiting\n",
-			__func__);
-		return;
-	}
-
 	if (tty && urb->actual_length) {
 		/* Loop through the data copying each byte to the tty layer. */
 		tty_insert_flip_string(tty, data, urb->actual_length);
 
 		/* Force the data to the tty layer. */
 		tty_flip_buffer_push(tty);
+		tty_kref_put(tty);
 	}
-	tty_kref_put(tty);
 
 	/* Set any port variables. */
 	spin_lock_irqsave(&metro_priv->lock, flags);

commit b7d28e32c93801d60c1a7a817f774a02b7bdde43
Author: Johan Hovold <jhovold@gmail.com>
Date:   Mon Jul 2 12:34:24 2012 +0200

    USB: metro-usb: fix tty_flip_buffer_push use
    
    Do not set low_latency flag at open as tty_flip_buffer_push must not be
    called in IRQ context with low_latency set.
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Johan Hovold <jhovold@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/usb/serial/metro-usb.c b/drivers/usb/serial/metro-usb.c
index 81423f7361db..d47eb06fe463 100644
--- a/drivers/usb/serial/metro-usb.c
+++ b/drivers/usb/serial/metro-usb.c
@@ -222,14 +222,6 @@ static int metrousb_open(struct tty_struct *tty, struct usb_serial_port *port)
 	metro_priv->throttled = 0;
 	spin_unlock_irqrestore(&metro_priv->lock, flags);
 
-	/*
-	 * Force low_latency on so that our tty_push actually forces the data
-	 * through, otherwise it is scheduled, and with high data rates (like
-	 * with OHCI) data can get lost.
-	 */
-	if (tty)
-		tty->low_latency = 1;
-
 	/* Clear the urb pipe. */
 	usb_clear_halt(serial->dev, port->interrupt_in_urb->pipe);
 

commit 68e24113457e437b1576670f2419b77ed0531e9e
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Tue May 8 15:46:14 2012 -0700

    USB: serial: rework usb_serial_register/deregister_drivers()
    
    This reworks the usb_serial_register_drivers() and
    usb_serial_deregister_drivers() to not need a pointer to a struct
    usb_driver anymore.  The usb_driver structure is now created dynamically
    and registered and unregistered as needed.
    
    This saves lines of code in each usb-serial driver.  All in-kernel users
    of these functions were also fixed up at this time.  The pl2303 driver
    was tested that everything worked properly.
    
    Thanks for the idea to do this from Alan Stern.
    
    Cc: Adhir Ramjiawan <adhirramjiawan0@gmail.com>
    Cc: Alan Stern <stern@rowland.harvard.edu>
    Cc: Al Borchers <alborchers@steinerpoint.com>
    Cc: Aleksey Babahin <tamerlan311@gmail.com>
    Cc: Andrew Morton <akpm@linux-foundation.org>
    Cc: Andrew Worsley <amworsley@gmail.com>
    Cc: Bart Hartgers <bart.hartgers@gmail.com>
    Cc: Bill Pemberton <wfp5p@virginia.edu>
    Cc: Dan Carpenter <error27@gmail.com>
    Cc: Dan Williams <dcbw@redhat.com>
    Cc: Donald Lee <donald@asix.com.tw>
    Cc: Eric Dumazet <eric.dumazet@gmail.com>
    Cc: "Eric W. Biederman" <ebiederm@xmission.com>
    Cc: Felipe Balbi <balbi@ti.com>
    Cc: Gary Brubaker <xavyer@ix.netcom.com>
    Cc: Jesper Juhl <jj@chaosbits.net>
    Cc: Jiri Kosina <jkosina@suse.cz>
    Cc: Johan Hovold <jhovold@gmail.com>
    Cc: Julia Lawall <julia@diku.dk>
    Cc: Kautuk Consul <consul.kautuk@gmail.com>
    Cc: Kuninori Morimoto <kuninori.morimoto.gx@renesas.com>
    Cc: Lonnie Mendez <dignome@gmail.com>
    Cc: Matthias Bruestle and Harald Welte <support@reiner-sct.com>
    Cc: Matthias Urlichs <smurf@smurf.noris.de>
    Cc: Mauro Carvalho Chehab <mchehab@redhat.com>
    Cc: Michal Sroczynski <msroczyn@gmail.com>
    Cc: "Michał Wróbel" <michal.wrobel@flytronic.pl>
    Cc: Oliver Neukum <oliver@neukum.name>
    Cc: Paul Gortmaker <paul.gortmaker@windriver.com>
    Cc: Peter Berger <pberger@brimson.com>
    Cc: Preston Fick <preston.fick@silabs.com>
    Cc: "Rafael J. Wysocki" <rjw@sisk.pl>
    Cc: Rigbert Hamisch <rigbert@gmx.de>
    Cc: Rusty Russell <rusty@rustcorp.com.au>
    Cc: Simon Arlott <simon@fire.lp0.eu>
    Cc: Support Department <support@connecttech.com>
    Cc: Thomas Tuttle <ttuttle@chromium.org>
    Cc: Uwe Bonnes <bon@elektron.ikp.physik.tu-darmstadt.de>
    Cc: Wang YanQing <Udknight@gmail.com>
    Cc: William Greathouse <wgreathouse@smva.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/usb/serial/metro-usb.c b/drivers/usb/serial/metro-usb.c
index 14ad1db38ab5..81423f7361db 100644
--- a/drivers/usb/serial/metro-usb.c
+++ b/drivers/usb/serial/metro-usb.c
@@ -419,11 +419,6 @@ static void metrousb_unthrottle(struct tty_struct *tty)
 			result);
 }
 
-static struct usb_driver metrousb_driver = {
-	.name =		"metro-usb",
-	.id_table =	id_table
-};
-
 static struct usb_serial_driver metrousb_device = {
 	.driver = {
 		.owner =	THIS_MODULE,
@@ -449,7 +444,7 @@ static struct usb_serial_driver * const serial_drivers[] = {
 	NULL,
 };
 
-module_usb_serial_driver(metrousb_driver, serial_drivers);
+module_usb_serial_driver(serial_drivers, id_table);
 
 MODULE_LICENSE("GPL");
 MODULE_AUTHOR("Philip Nicastro");

commit 32078f915d1acab356080b144aa89fe3487f3979
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Mon May 7 14:02:13 2012 -0700

    USB: serial: remove usb_serial_disconnect call in all drivers
    
    This is now set by the usb-serial core, no need for the driver to
    individually set it.
    
    Thanks to Alan Stern for the idea to get rid of it.
    
    Cc: William Greathouse <wgreathouse@smva.com>
    Cc: Matthias Bruestle and Harald Welte <support@reiner-sct.com>
    Cc: Lonnie Mendez <dignome@gmail.com>
    Cc: Peter Berger <pberger@brimson.com>
    Cc: Al Borchers <alborchers@steinerpoint.com>
    Cc: Gary Brubaker <xavyer@ix.netcom.com>
    Cc: Oliver Neukum <oliver@neukum.name>
    Cc: Matthias Urlichs <smurf@smurf.noris.de>
    Cc: Support Department <support@connecttech.com>
    Cc: Rusty Russell <rusty@rustcorp.com.au>
    Cc: Alan Stern <stern@rowland.harvard.edu>
    Cc: Mauro Carvalho Chehab <mchehab@redhat.com>
    Cc: Kautuk Consul <consul.kautuk@gmail.com>
    Cc: Bill Pemberton <wfp5p@virginia.edu>
    Cc: Paul Gortmaker <paul.gortmaker@windriver.com>
    Cc: Bart Hartgers <bart.hartgers@gmail.com>
    Cc: Johan Hovold <jhovold@gmail.com>
    Cc: Preston Fick <preston.fick@silabs.com>
    Cc: Uwe Bonnes <bon@elektron.ikp.physik.tu-darmstadt.de>
    Cc: Simon Arlott <simon@fire.lp0.eu>
    Cc: Andrew Worsley <amworsley@gmail.com>
    Cc: "Michał Wróbel" <michal.wrobel@flytronic.pl>
    Cc: Andrew Morton <akpm@linux-foundation.org>
    Cc: Eric Dumazet <eric.dumazet@gmail.com>
    Cc: "Eric W. Biederman" <ebiederm@xmission.com>
    Cc: Felipe Balbi <balbi@ti.com>
    Cc: Aleksey Babahin <tamerlan311@gmail.com>
    Cc: Dan Carpenter <error27@gmail.com>
    Cc: Jiri Kosina <jkosina@suse.cz>
    Cc: Donald Lee <donald@asix.com.tw>
    Cc: Julia Lawall <julia@diku.dk>
    Cc: Michal Sroczynski <msroczyn@gmail.com>
    Cc: Wang YanQing <Udknight@gmail.com>
    Cc: Dan Williams <dcbw@redhat.com>
    Cc: Thomas Tuttle <ttuttle@chromium.org>
    Cc: Rigbert Hamisch <rigbert@gmx.de>
    Cc: "Rafael J. Wysocki" <rjw@sisk.pl>
    Cc: Kuninori Morimoto <kuninori.morimoto.gx@renesas.com>
    Cc: Jesper Juhl <jj@chaosbits.net>
    Cc: Adhir Ramjiawan <adhirramjiawan0@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/usb/serial/metro-usb.c b/drivers/usb/serial/metro-usb.c
index 06cf5c87a96c..14ad1db38ab5 100644
--- a/drivers/usb/serial/metro-usb.c
+++ b/drivers/usb/serial/metro-usb.c
@@ -421,7 +421,6 @@ static void metrousb_unthrottle(struct tty_struct *tty)
 
 static struct usb_driver metrousb_driver = {
 	.name =		"metro-usb",
-	.disconnect =	usb_serial_disconnect,
 	.id_table =	id_table
 };
 

commit 5026bb07be87ef5892742e6853ae6efa0f41961f
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Mon May 7 13:48:33 2012 -0700

    USB: serial: remove usb_serial_probe call in all drivers
    
    This is now set by the usb-serial core, no need for the driver to
    individually set it.
    
    Thanks to Alan Stern for the idea to get rid of it.
    
    Cc: William Greathouse <wgreathouse@smva.com>
    Cc: Matthias Bruestle and Harald Welte <support@reiner-sct.com>
    Cc: Lonnie Mendez <dignome@gmail.com>
    Cc: Peter Berger <pberger@brimson.com>
    Cc: Al Borchers <alborchers@steinerpoint.com>
    Cc: Gary Brubaker <xavyer@ix.netcom.com>
    Cc: Oliver Neukum <oliver@neukum.name>
    Cc: Matthias Urlichs <smurf@smurf.noris.de>
    Cc: Support Department <support@connecttech.com>
    Cc: Rusty Russell <rusty@rustcorp.com.au>
    Cc: Alan Stern <stern@rowland.harvard.edu>
    Cc: Mauro Carvalho Chehab <mchehab@redhat.com>
    Cc: Kautuk Consul <consul.kautuk@gmail.com>
    Cc: Bill Pemberton <wfp5p@virginia.edu>
    Cc: Paul Gortmaker <paul.gortmaker@windriver.com>
    Cc: Bart Hartgers <bart.hartgers@gmail.com>
    Cc: Johan Hovold <jhovold@gmail.com>
    Cc: Preston Fick <preston.fick@silabs.com>
    Cc: Uwe Bonnes <bon@elektron.ikp.physik.tu-darmstadt.de>
    Cc: Simon Arlott <simon@fire.lp0.eu>
    Cc: Andrew Worsley <amworsley@gmail.com>
    Cc: "Michał Wróbel" <michal.wrobel@flytronic.pl>
    Cc: Andrew Morton <akpm@linux-foundation.org>
    Cc: Eric Dumazet <eric.dumazet@gmail.com>
    Cc: "Eric W. Biederman" <ebiederm@xmission.com>
    Cc: Felipe Balbi <balbi@ti.com>
    Cc: Aleksey Babahin <tamerlan311@gmail.com>
    Cc: Dan Carpenter <error27@gmail.com>
    Cc: Jiri Kosina <jkosina@suse.cz>
    Cc: Donald Lee <donald@asix.com.tw>
    Cc: Julia Lawall <julia@diku.dk>
    Cc: Michal Sroczynski <msroczyn@gmail.com>
    Cc: Wang YanQing <Udknight@gmail.com>
    Cc: Dan Williams <dcbw@redhat.com>
    Cc: Thomas Tuttle <ttuttle@chromium.org>
    Cc: Rigbert Hamisch <rigbert@gmx.de>
    Cc: "Rafael J. Wysocki" <rjw@sisk.pl>
    Cc: Kuninori Morimoto <kuninori.morimoto.gx@renesas.com>
    Cc: Jesper Juhl <jj@chaosbits.net>
    Cc: Adhir Ramjiawan <adhirramjiawan0@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/usb/serial/metro-usb.c b/drivers/usb/serial/metro-usb.c
index d17c8677a293..06cf5c87a96c 100644
--- a/drivers/usb/serial/metro-usb.c
+++ b/drivers/usb/serial/metro-usb.c
@@ -421,7 +421,6 @@ static void metrousb_unthrottle(struct tty_struct *tty)
 
 static struct usb_driver metrousb_driver = {
 	.name =		"metro-usb",
-	.probe =	usb_serial_probe,
 	.disconnect =	usb_serial_disconnect,
 	.id_table =	id_table
 };

commit e2dd3af49ad96804e385e7342ac5999a7da32df4
Author: Aleksey Babahin <tamerlan311@gmail.com>
Date:   Tue Mar 20 00:46:37 2012 +0400

    USB: serial: metro-usb: cosmetic fix in driver description.
    
    Message in kernel log:
    "metro-usb ttyUSB0: Metrologic USB to Serial converter now disconnected from ttyUSB0"
    
    bit more likely than:
    "metro-usb ttyUSB0: Metrologic USB to serial converter. converter now disconnected from ttyUSB0"
    
    Signed-off-by: Aleksey Babahin <tamerlan311@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/usb/serial/metro-usb.c b/drivers/usb/serial/metro-usb.c
index 1e2bb451156a..d17c8677a293 100644
--- a/drivers/usb/serial/metro-usb.c
+++ b/drivers/usb/serial/metro-usb.c
@@ -431,7 +431,7 @@ static struct usb_serial_driver metrousb_device = {
 		.owner =	THIS_MODULE,
 		.name =		"metro-usb",
 	},
-	.description		= "Metrologic USB to serial converter.",
+	.description		= "Metrologic USB to Serial",
 	.id_table		= id_table,
 	.num_ports		= 1,
 	.open			= metrousb_open,

commit 41dc29400212dd5e65a63c7de212b4df040255fb
Author: Aleksey Babahin <tamerlan311@gmail.com>
Date:   Tue Mar 20 00:46:36 2012 +0400

    USB: serial: metro-usb: remove duplicated #include <linux/errno.h>
    
    Signed-off-by: Aleksey Babahin <tamerlan311@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/usb/serial/metro-usb.c b/drivers/usb/serial/metro-usb.c
index 97238536d30d..1e2bb451156a 100644
--- a/drivers/usb/serial/metro-usb.c
+++ b/drivers/usb/serial/metro-usb.c
@@ -17,7 +17,6 @@
 #include <linux/tty_flip.h>
 #include <linux/moduleparam.h>
 #include <linux/spinlock.h>
-#include <linux/errno.h>
 #include <linux/uaccess.h>
 #include <linux/usb/serial.h>
 

commit bd2c09bc20c13eeb90cf185df9439e815302821d
Author: Aleksey Babahin <tamerlan311@gmail.com>
Date:   Tue Mar 20 00:46:35 2012 +0400

    USB: serial: metro-usb: make debug messages bit more informative.
    
    In this place result value is always zero. Use urb->status instead.
    
    Signed-off-by: Aleksey Babahin <tamerlan311@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/usb/serial/metro-usb.c b/drivers/usb/serial/metro-usb.c
index d9ae5841b1ab..97238536d30d 100644
--- a/drivers/usb/serial/metro-usb.c
+++ b/drivers/usb/serial/metro-usb.c
@@ -119,12 +119,12 @@ static void metrousb_read_int_callback(struct urb *urb)
 		/* urb has been terminated. */
 		dev_dbg(&port->dev,
 			"%s - urb shutting down, error code=%d\n",
-			__func__, result);
+			__func__, urb->status);
 		return;
 	default:
 		dev_dbg(&port->dev,
 			"%s - non-zero urb received, error code=%d\n",
-			__func__, result);
+			__func__, urb->status);
 		goto exit;
 	}
 

commit 91fbecfe59356a37d7e979cdd97f01c062fe1fda
Author: Aleksey Babahin <tamerlan311@gmail.com>
Date:   Tue Mar 20 00:46:34 2012 +0400

    USB: serial: metro-usb: print errors always, not only in debug mode.
    
    Signed-off-by: Aleksey Babahin <tamerlan311@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/usb/serial/metro-usb.c b/drivers/usb/serial/metro-usb.c
index 2df22176515b..d9ae5841b1ab 100644
--- a/drivers/usb/serial/metro-usb.c
+++ b/drivers/usb/serial/metro-usb.c
@@ -132,7 +132,7 @@ static void metrousb_read_int_callback(struct urb *urb)
 	/* Set the data read from the usb port into the serial port buffer. */
 	tty = tty_port_tty_get(&port->port);
 	if (!tty) {
-		dev_dbg(&port->dev, "%s - bad tty pointer - exiting\n",
+		dev_err(&port->dev, "%s - bad tty pointer - exiting\n",
 			__func__);
 		return;
 	}
@@ -162,7 +162,7 @@ static void metrousb_read_int_callback(struct urb *urb)
 		result = usb_submit_urb(port->interrupt_in_urb, GFP_ATOMIC);
 
 		if (result)
-			dev_dbg(&port->dev,
+			dev_err(&port->dev,
 				"%s - failed submitting interrupt in urb, error code=%d\n",
 				__func__, result);
 	}
@@ -172,7 +172,7 @@ static void metrousb_read_int_callback(struct urb *urb)
 	/* Try to resubmit the urb. */
 	result = usb_submit_urb(urb, GFP_ATOMIC);
 	if (result)
-		dev_dbg(&port->dev,
+		dev_err(&port->dev,
 			"%s - failed submitting interrupt in urb, error code=%d\n",
 			__func__, result);
 }
@@ -212,7 +212,7 @@ static int metrousb_open(struct tty_struct *tty, struct usb_serial_port *port)
 
 	/* Make sure the urb is initialized. */
 	if (!port->interrupt_in_urb) {
-		dev_dbg(&port->dev, "%s - interrupt urb not initialized\n",
+		dev_err(&port->dev, "%s - interrupt urb not initialized\n",
 			__func__);
 		return -ENODEV;
 	}
@@ -243,7 +243,7 @@ static int metrousb_open(struct tty_struct *tty, struct usb_serial_port *port)
 	result = usb_submit_urb(port->interrupt_in_urb, GFP_KERNEL);
 
 	if (result) {
-		dev_dbg(&port->dev,
+		dev_err(&port->dev,
 			"%s - failed submitting interrupt in urb, error code=%d\n",
 			__func__, result);
 		goto exit;
@@ -282,7 +282,7 @@ static int metrousb_set_modem_ctrl(struct usb_serial *serial, unsigned int contr
 				METROUSB_SET_REQUEST_TYPE, METROUSB_SET_MODEM_CTRL_REQUEST,
 				control_state, 0, NULL, 0, WDR_TIMEOUT);
 	if (retval < 0)
-		dev_dbg(&serial->dev->dev,
+		dev_err(&serial->dev->dev,
 			"%s - set modem ctrl=0x%x failed, error code=%d\n",
 			__func__, mcr, retval);
 
@@ -415,7 +415,7 @@ static void metrousb_unthrottle(struct tty_struct *tty)
 	port->interrupt_in_urb->dev = port->serial->dev;
 	result = usb_submit_urb(port->interrupt_in_urb, GFP_ATOMIC);
 	if (result)
-		dev_dbg(tty->dev,
+		dev_err(tty->dev,
 			"failed submitting interrupt in urb error code=%d\n",
 			result);
 }

commit 704577861d5e7408db59e182d8dca42e5bc4d506
Author: Aleksey Babahin <tamerlan311@gmail.com>
Date:   Tue Mar 20 00:46:33 2012 +0400

    USB: serial: metro-usb: get data from device in Uni-Directional mode.
    
    We should send special control command to tell device start or stop
    transmitting a data.
    
    In Bi-Directional mode that cmd`s are not required.
    
    Signed-off-by: Aleksey Babahin <tamerlan311@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/usb/serial/metro-usb.c b/drivers/usb/serial/metro-usb.c
index 92b6f85ab4b9..2df22176515b 100644
--- a/drivers/usb/serial/metro-usb.c
+++ b/drivers/usb/serial/metro-usb.c
@@ -56,6 +56,47 @@ MODULE_DEVICE_TABLE(usb, id_table);
 /* Input parameter constants. */
 static bool debug;
 
+/* UNI-Directional mode commands for device configure */
+#define UNI_CMD_OPEN	0x80
+#define UNI_CMD_CLOSE	0xFF
+
+inline int metrousb_is_unidirectional_mode(struct usb_serial_port *port)
+{
+	__u16 product_id = le16_to_cpu(
+		port->serial->dev->descriptor.idProduct);
+
+	return product_id == FOCUS_PRODUCT_ID_UNI;
+}
+
+static int metrousb_send_unidirectional_cmd(u8 cmd, struct usb_serial_port *port)
+{
+	int ret;
+	int actual_len;
+	u8 *buffer_cmd = NULL;
+
+	if (!metrousb_is_unidirectional_mode(port))
+		return 0;
+
+	buffer_cmd = kzalloc(sizeof(cmd), GFP_KERNEL);
+	if (!buffer_cmd)
+		return -ENOMEM;
+
+	*buffer_cmd = cmd;
+
+	ret = usb_interrupt_msg(port->serial->dev,
+		usb_sndintpipe(port->serial->dev, port->interrupt_out_endpointAddress),
+		buffer_cmd, sizeof(cmd),
+		&actual_len, USB_CTRL_SET_TIMEOUT);
+
+	kfree(buffer_cmd);
+
+	if (ret < 0)
+		return ret;
+	else if (actual_len != sizeof(cmd))
+		return -EIO;
+	return 0;
+}
+
 static void metrousb_read_int_callback(struct urb *urb)
 {
 	struct usb_serial_port *port = urb->context;
@@ -154,6 +195,9 @@ static void metrousb_cleanup(struct usb_serial_port *port)
 			usb_unlink_urb(port->interrupt_in_urb);
 			usb_kill_urb(port->interrupt_in_urb);
 		}
+
+		/* Send deactivate cmd to device */
+		metrousb_send_unidirectional_cmd(UNI_CMD_CLOSE, port);
 	}
 }
 
@@ -205,6 +249,15 @@ static int metrousb_open(struct tty_struct *tty, struct usb_serial_port *port)
 		goto exit;
 	}
 
+	/* Send activate cmd to device */
+	result = metrousb_send_unidirectional_cmd(UNI_CMD_OPEN, port);
+	if (result) {
+		dev_err(&port->dev,
+			"%s - failed to configure device for port number=%d, error code=%d\n",
+			__func__, port->number, result);
+		goto exit;
+	}
+
 	dev_dbg(&port->dev, "%s - port open\n", __func__);
 exit:
 	return result;

commit 28a4b6a690dfc000e86c8e02a1e1c1a9832252ec
Author: Aleksey Babahin <tamerlan311@gmail.com>
Date:   Tue Mar 20 00:46:32 2012 +0400

    USB: serial: metro-usb: dummy implement write_int_callback() function.
    
    This function is never called now. Because we don`t send much data
    to the device, only one byte via usb_interrupt_msg(). That doesn't require
    callback function. But without declaration of write_int_callback inside
    the struct usb_serial_driver, the usb_serial_probe doesn't initialize
    endpoint address for the interrupt out pipe(interrupt_out_endpointAddress).
    This endpoint is necessary for sending data via usb_interrupt_msg()
    function.
    
    Signed-off-by: Aleksey Babahin <tamerlan311@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/usb/serial/metro-usb.c b/drivers/usb/serial/metro-usb.c
index 08d16e8c002d..92b6f85ab4b9 100644
--- a/drivers/usb/serial/metro-usb.c
+++ b/drivers/usb/serial/metro-usb.c
@@ -136,6 +136,14 @@ static void metrousb_read_int_callback(struct urb *urb)
 			__func__, result);
 }
 
+static void metrousb_write_int_callback(struct urb *urb)
+{
+	struct usb_serial_port *port = urb->context;
+
+	dev_warn(&port->dev, "%s not implemented yet.\n",
+		__func__);
+}
+
 static void metrousb_cleanup(struct usb_serial_port *port)
 {
 	dev_dbg(&port->dev, "%s\n", __func__);
@@ -377,6 +385,7 @@ static struct usb_serial_driver metrousb_device = {
 	.open			= metrousb_open,
 	.close			= metrousb_cleanup,
 	.read_int_callback	= metrousb_read_int_callback,
+	.write_int_callback	= metrousb_write_int_callback,
 	.attach			= metrousb_startup,
 	.release		= metrousb_shutdown,
 	.throttle		= metrousb_throttle,

commit 810ec78e9a5d7de845598e8816370bcb2ccabf32
Author: Aleksey Babahin <tamerlan311@gmail.com>
Date:   Tue Mar 20 00:46:31 2012 +0400

    USB: serial: metro-usb: Fix idProduct for Uni-Directional mode.
    
    The right idProduct for Metrologic Bar Code Scanner
    in Uni-Directional Serial Emulation mode is 0x0700.
    
    Also rename idProduct for Bi-Directional mode to be a bit more informative.
    
    Signed-off-by: Aleksey Babahin <tamerlan311@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/usb/serial/metro-usb.c b/drivers/usb/serial/metro-usb.c
index 6e1622f2a297..08d16e8c002d 100644
--- a/drivers/usb/serial/metro-usb.c
+++ b/drivers/usb/serial/metro-usb.c
@@ -27,8 +27,8 @@
 
 /* Product information. */
 #define FOCUS_VENDOR_ID			0x0C2E
-#define FOCUS_PRODUCT_ID		0x0720
-#define FOCUS_PRODUCT_ID_UNI		0x0710
+#define FOCUS_PRODUCT_ID_BI		0x0720
+#define FOCUS_PRODUCT_ID_UNI		0x0700
 
 #define METROUSB_SET_REQUEST_TYPE	0x40
 #define METROUSB_SET_MODEM_CTRL_REQUEST	10
@@ -47,7 +47,7 @@ struct metrousb_private {
 
 /* Device table list. */
 static struct usb_device_id id_table[] = {
-	{ USB_DEVICE(FOCUS_VENDOR_ID, FOCUS_PRODUCT_ID) },
+	{ USB_DEVICE(FOCUS_VENDOR_ID, FOCUS_PRODUCT_ID_BI) },
 	{ USB_DEVICE(FOCUS_VENDOR_ID, FOCUS_PRODUCT_ID_UNI) },
 	{ }, /* Terminating entry. */
 };

commit 5db51b50c10f3bf56d5c636832c5556ead90562d
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Thu Mar 8 14:16:12 2012 -0800

    USB: serial: metro-usb: move to use dev_dbg() instead of dbg()
    
    This properly ties the driver into the dynamic debug system and provides
    the needed device identification when the messages are printed out.
    
    It also removes a ton of checkpatch warnings as well, which is always a
    nice validation that it's the correct thing to do.
    
    Cc: Aleksey Babahin <tamerlan311@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/usb/serial/metro-usb.c b/drivers/usb/serial/metro-usb.c
index 6b7d2779148c..6e1622f2a297 100644
--- a/drivers/usb/serial/metro-usb.c
+++ b/drivers/usb/serial/metro-usb.c
@@ -66,7 +66,7 @@ static void metrousb_read_int_callback(struct urb *urb)
 	int result = 0;
 	unsigned long flags = 0;
 
-	dbg("METRO-USB - %s - port number=%d", __FUNCTION__, port->number);
+	dev_dbg(&port->dev, "%s\n", __func__);
 
 	switch (urb->status) {
 	case 0:
@@ -76,12 +76,14 @@ static void metrousb_read_int_callback(struct urb *urb)
 	case -ENOENT:
 	case -ESHUTDOWN:
 		/* urb has been terminated. */
-		dbg("METRO-USB - %s - urb shutting down, port number=%d, error code=%d",
-			__FUNCTION__, port->number, result);
+		dev_dbg(&port->dev,
+			"%s - urb shutting down, error code=%d\n",
+			__func__, result);
 		return;
 	default:
-		dbg("METRO-USB - %s - non-zero urb received, port number=%d, error code=%d",
-			__FUNCTION__, port->number, result);
+		dev_dbg(&port->dev,
+			"%s - non-zero urb received, error code=%d\n",
+			__func__, result);
 		goto exit;
 	}
 
@@ -89,7 +91,8 @@ static void metrousb_read_int_callback(struct urb *urb)
 	/* Set the data read from the usb port into the serial port buffer. */
 	tty = tty_port_tty_get(&port->port);
 	if (!tty) {
-		dbg("%s - bad tty pointer - exiting", __func__);
+		dev_dbg(&port->dev, "%s - bad tty pointer - exiting\n",
+			__func__);
 		return;
 	}
 
@@ -117,25 +120,25 @@ static void metrousb_read_int_callback(struct urb *urb)
 
 		result = usb_submit_urb(port->interrupt_in_urb, GFP_ATOMIC);
 
-		if (result) {
-			dbg("METRO-USB - %s - failed submitting interrupt in urb for port number=%d, error code=%d",
-				__FUNCTION__, port->number, result);
-		}
+		if (result)
+			dev_dbg(&port->dev,
+				"%s - failed submitting interrupt in urb, error code=%d\n",
+				__func__, result);
 	}
 	return;
 
 exit:
 	/* Try to resubmit the urb. */
 	result = usb_submit_urb(urb, GFP_ATOMIC);
-	if (result) {
-		dbg("METRO-USB - %s - failed submitting interrupt in urb for port number=%d, error code=%d",
-			__FUNCTION__, port->number, result);
-	}
+	if (result)
+		dev_dbg(&port->dev,
+			"%s - failed submitting interrupt in urb, error code=%d\n",
+			__func__, result);
 }
 
 static void metrousb_cleanup(struct usb_serial_port *port)
 {
-	dbg("METRO-USB - %s - port number=%d", __FUNCTION__, port->number);
+	dev_dbg(&port->dev, "%s\n", __func__);
 
 	if (port->serial->dev) {
 		/* Shutdown any interrupt in urbs. */
@@ -153,11 +156,12 @@ static int metrousb_open(struct tty_struct *tty, struct usb_serial_port *port)
 	unsigned long flags = 0;
 	int result = 0;
 
-	dbg("METRO-USB - %s - port number=%d", __FUNCTION__, port->number);
+	dev_dbg(&port->dev, "%s\n", __func__);
 
 	/* Make sure the urb is initialized. */
 	if (!port->interrupt_in_urb) {
-		dbg("METRO-USB - %s - interrupt urb not initialized for port number=%d", __FUNCTION__, port->number);
+		dev_dbg(&port->dev, "%s - interrupt urb not initialized\n",
+			__func__);
 		return -ENODEV;
 	}
 
@@ -187,12 +191,13 @@ static int metrousb_open(struct tty_struct *tty, struct usb_serial_port *port)
 	result = usb_submit_urb(port->interrupt_in_urb, GFP_KERNEL);
 
 	if (result) {
-		dbg("METRO-USB - %s - failed submitting interrupt in urb for port number=%d, error code=%d"
-			, __FUNCTION__, port->number, result);
+		dev_dbg(&port->dev,
+			"%s - failed submitting interrupt in urb, error code=%d\n",
+			__func__, result);
 		goto exit;
 	}
 
-	dbg("METRO-USB - %s - port open for port number=%d", __FUNCTION__, port->number);
+	dev_dbg(&port->dev, "%s - port open\n", __func__);
 exit:
 	return result;
 }
@@ -202,7 +207,8 @@ static int metrousb_set_modem_ctrl(struct usb_serial *serial, unsigned int contr
 	int retval = 0;
 	unsigned char mcr = METROUSB_MCR_NONE;
 
-	dbg("METRO-USB - %s - control state=%d", __FUNCTION__, control_state);
+	dev_dbg(&serial->dev->dev, "%s - control state = %d\n",
+		__func__, control_state);
 
 	/* Set the modem control value. */
 	if (control_state & TIOCM_DTR)
@@ -215,7 +221,9 @@ static int metrousb_set_modem_ctrl(struct usb_serial *serial, unsigned int contr
 				METROUSB_SET_REQUEST_TYPE, METROUSB_SET_MODEM_CTRL_REQUEST,
 				control_state, 0, NULL, 0, WDR_TIMEOUT);
 	if (retval < 0)
-		dbg("METRO-USB - %s - set modem ctrl=0x%x failed, error code=%d", __FUNCTION__, mcr, retval);
+		dev_dbg(&serial->dev->dev,
+			"%s - set modem ctrl=0x%x failed, error code=%d\n",
+			__func__, mcr, retval);
 
 	return retval;
 }
@@ -224,7 +232,7 @@ static void metrousb_shutdown(struct usb_serial *serial)
 {
 	int i = 0;
 
-	dbg("METRO-USB - %s", __FUNCTION__);
+	dev_dbg(&serial->dev->dev, "%s\n", __func__);
 
 	/* Stop reading and writing on all ports. */
 	for (i = 0; i < serial->num_ports; ++i) {
@@ -235,7 +243,8 @@ static void metrousb_shutdown(struct usb_serial *serial)
 		kfree(usb_get_serial_port_data(serial->port[i]));
 		usb_set_serial_port_data(serial->port[i], NULL);
 
-		dbg("METRO-USB - %s - freed port number=%d", __FUNCTION__, serial->port[i]->number);
+		dev_dbg(&serial->dev->dev, "%s - freed port number=%d\n",
+			__func__, serial->port[i]->number);
 	}
 }
 
@@ -245,7 +254,7 @@ static int metrousb_startup(struct usb_serial *serial)
 	struct usb_serial_port *port;
 	int i = 0;
 
-	dbg("METRO-USB - %s", __FUNCTION__);
+	dev_dbg(&serial->dev->dev, "%s\n", __func__);
 
 	/* Loop through the serial ports setting up the private structures.
 	 * Currently we only use one port. */
@@ -261,7 +270,8 @@ static int metrousb_startup(struct usb_serial *serial)
 		spin_lock_init(&metro_priv->lock);
 		usb_set_serial_port_data(port, metro_priv);
 
-		dbg("METRO-USB - %s - port number=%d.", __FUNCTION__, port->number);
+		dev_dbg(&serial->dev->dev, "%s - port number=%d\n ",
+			__func__, port->number);
 	}
 
 	return 0;
@@ -273,7 +283,7 @@ static void metrousb_throttle(struct tty_struct *tty)
 	struct metrousb_private *metro_priv = usb_get_serial_port_data(port);
 	unsigned long flags = 0;
 
-	dbg("METRO-USB - %s - port number=%d", __FUNCTION__, port->number);
+	dev_dbg(tty->dev, "%s\n", __func__);
 
 	/* Set the private information for the port to stop reading data. */
 	spin_lock_irqsave(&metro_priv->lock, flags);
@@ -288,7 +298,7 @@ static int metrousb_tiocmget(struct tty_struct *tty)
 	struct metrousb_private *metro_priv = usb_get_serial_port_data(port);
 	unsigned long flags = 0;
 
-	dbg("METRO-USB - %s - port number=%d", __FUNCTION__, port->number);
+	dev_dbg(tty->dev, "%s\n", __func__);
 
 	spin_lock_irqsave(&metro_priv->lock, flags);
 	control_state = metro_priv->control_state;
@@ -306,7 +316,7 @@ static int metrousb_tiocmset(struct tty_struct *tty,
 	unsigned long flags = 0;
 	unsigned long control_state = 0;
 
-	dbg("METRO-USB - %s - port number=%d, set=%d, clear=%d", __FUNCTION__, port->number, set, clear);
+	dev_dbg(tty->dev, "%s - set=%d, clear=%d\n", __func__, set, clear);
 
 	spin_lock_irqsave(&metro_priv->lock, flags);
 	control_state = metro_priv->control_state;
@@ -333,7 +343,7 @@ static void metrousb_unthrottle(struct tty_struct *tty)
 	unsigned long flags = 0;
 	int result = 0;
 
-	dbg("METRO-USB - %s - port number=%d", __FUNCTION__, port->number);
+	dev_dbg(tty->dev, "%s\n", __func__);
 
 	/* Set the private information for the port to resume reading data. */
 	spin_lock_irqsave(&metro_priv->lock, flags);
@@ -343,10 +353,10 @@ static void metrousb_unthrottle(struct tty_struct *tty)
 	/* Submit the urb to read from the port. */
 	port->interrupt_in_urb->dev = port->serial->dev;
 	result = usb_submit_urb(port->interrupt_in_urb, GFP_ATOMIC);
-	if (result) {
-		dbg("METRO-USB - %s - failed submitting interrupt in urb for port number=%d, error code=%d",
-			__FUNCTION__, port->number, result);
-	}
+	if (result)
+		dev_dbg(tty->dev,
+			"failed submitting interrupt in urb error code=%d\n",
+			result);
 }
 
 static struct usb_driver metrousb_driver = {

commit 8111e4ecf9373f6d76504416b0e76b18372f3598
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Thu Mar 8 14:00:11 2012 -0800

    USB: serial: metro-usb: remove unneeded cast and function call
    
    We should use kzalloc() instead of kmalloc() and memset(), and remove an
    unneeded void * cast as well.
    
    Cc: Aleksey Babahin <tamerlan311@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/usb/serial/metro-usb.c b/drivers/usb/serial/metro-usb.c
index e968d3396813..6b7d2779148c 100644
--- a/drivers/usb/serial/metro-usb.c
+++ b/drivers/usb/serial/metro-usb.c
@@ -58,7 +58,7 @@ static bool debug;
 
 static void metrousb_read_int_callback(struct urb *urb)
 {
-	struct usb_serial_port *port = (struct usb_serial_port *)urb->context;
+	struct usb_serial_port *port = urb->context;
 	struct metrousb_private *metro_priv = usb_get_serial_port_data(port);
 	struct tty_struct *tty;
 	unsigned char *data = urb->transfer_buffer;
@@ -253,13 +253,10 @@ static int metrousb_startup(struct usb_serial *serial)
 		port = serial->port[i];
 
 		/* Declare memory. */
-		metro_priv = kmalloc(sizeof(struct metrousb_private), GFP_KERNEL);
+		metro_priv = kzalloc(sizeof(struct metrousb_private), GFP_KERNEL);
 		if (!metro_priv)
 			return -ENOMEM;
 
-		/* Clear memory. */
-		memset(metro_priv, 0x00, sizeof(struct metrousb_private));
-
 		/* Initialize memory. */
 		spin_lock_init(&metro_priv->lock);
 		usb_set_serial_port_data(port, metro_priv);

commit dd63b0b4d6d036e1d5f7008c97c30789415489de
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Thu Mar 8 13:58:13 2012 -0800

    USB: serial: metro-usb: remove function header comments
    
    They aren't needed, make the checkpatch tool unhappy, and in some
    places, aren't even correct.  So just remove them, they get in the way
    and are messy.
    
    Cc: Aleksey Babahin <tamerlan311@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/usb/serial/metro-usb.c b/drivers/usb/serial/metro-usb.c
index 8758e01289b9..e968d3396813 100644
--- a/drivers/usb/serial/metro-usb.c
+++ b/drivers/usb/serial/metro-usb.c
@@ -56,17 +56,6 @@ MODULE_DEVICE_TABLE(usb, id_table);
 /* Input parameter constants. */
 static bool debug;
 
-/* ----------------------------------------------------------------------------------------------
-  Description:
-	Read the port from the read interrupt.
-
-  Input:
-	struct urb *: urb structure to get data.
-	struct pt_regs *: pt_regs structure.
-
-  Output:
-	None:
-*/
 static void metrousb_read_int_callback(struct urb *urb)
 {
 	struct usb_serial_port *port = (struct usb_serial_port *)urb->context;
@@ -144,16 +133,6 @@ static void metrousb_read_int_callback(struct urb *urb)
 	}
 }
 
-/* ----------------------------------------------------------------------------------------------
-  Description:
-	Clean up any urbs and port information.
-
-  Input:
-	struct usb_serial_port *: pointer to a usb_serial_port structure.
-
-  Output:
-	int: Returns true (0) if successful, false otherwise.
-*/
 static void metrousb_cleanup(struct usb_serial_port *port)
 {
 	dbg("METRO-USB - %s - port number=%d", __FUNCTION__, port->number);
@@ -167,17 +146,6 @@ static void metrousb_cleanup(struct usb_serial_port *port)
 	}
 }
 
-/* ----------------------------------------------------------------------------------------------
-  Description:
-	Open the drivers serial port.
-
-  Input:
-	struct usb_serial_port *: pointer to a usb_serial_port structure.
-	struct file *: pointer to a file structure.
-
-  Output:
-	int: Returns true (0) if successful, false otherwise.
-*/
 static int metrousb_open(struct tty_struct *tty, struct usb_serial_port *port)
 {
 	struct usb_serial *serial = port->serial;
@@ -229,17 +197,6 @@ static int metrousb_open(struct tty_struct *tty, struct usb_serial_port *port)
 	return result;
 }
 
-/* ----------------------------------------------------------------------------------------------
-  Description:
-	Set the modem control state for the entered serial port.
-
-  Input:
-	struct usb_serial_port *: pointer to a usb_serial_port structure.
-	unsigned int: control state value to set.
-
-  Output:
-	int: Returns true (0) if successful, false otherwise.
-*/
 static int metrousb_set_modem_ctrl(struct usb_serial *serial, unsigned int control_state)
 {
 	int retval = 0;
@@ -263,17 +220,6 @@ static int metrousb_set_modem_ctrl(struct usb_serial *serial, unsigned int contr
 	return retval;
 }
 
-
-/* ----------------------------------------------------------------------------------------------
-  Description:
-	Shutdown the driver.
-
-  Input:
-	struct usb_serial *: pointer to a usb-serial structure.
-
-  Output:
-	int: Returns true (0) if successful, false otherwise.
-*/
 static void metrousb_shutdown(struct usb_serial *serial)
 {
 	int i = 0;
@@ -293,16 +239,6 @@ static void metrousb_shutdown(struct usb_serial *serial)
 	}
 }
 
-/* ----------------------------------------------------------------------------------------------
-  Description:
-	Startup the driver.
-
-  Input:
-	struct usb_serial *: pointer to a usb-serial structure.
-
-  Output:
-	int: Returns true (0) if successful, false otherwise.
-*/
 static int metrousb_startup(struct usb_serial *serial)
 {
 	struct metrousb_private *metro_priv;
@@ -334,16 +270,6 @@ static int metrousb_startup(struct usb_serial *serial)
 	return 0;
 }
 
-/* ----------------------------------------------------------------------------------------------
-  Description:
-	Set the serial port throttle to stop reading from the port.
-
-  Input:
-	struct usb_serial_port *: pointer to a usb_serial_port structure.
-
-  Output:
-	None:
-*/
 static void metrousb_throttle(struct tty_struct *tty)
 {
 	struct usb_serial_port *port = tty->driver_data;
@@ -358,17 +284,6 @@ static void metrousb_throttle(struct tty_struct *tty)
 	spin_unlock_irqrestore(&metro_priv->lock, flags);
 }
 
-/* ----------------------------------------------------------------------------------------------
-  Description:
-	Get the serial port control line states.
-
-  Input:
-	struct usb_serial_port *: pointer to a usb_serial_port structure.
-	struct file *: pointer to a file structure.
-
-  Output:
-	int: Returns the state of the control lines.
-*/
 static int metrousb_tiocmget(struct tty_struct *tty)
 {
 	unsigned long control_state = 0;
@@ -385,19 +300,6 @@ static int metrousb_tiocmget(struct tty_struct *tty)
 	return control_state;
 }
 
-/* ----------------------------------------------------------------------------------------------
-  Description:
-	Set the serial port control line states.
-
-  Input:
-	struct usb_serial_port *: pointer to a usb_serial_port structure.
-	struct file *: pointer to a file structure.
-	unsigned int: line state to set.
-	unsigned int: line state to clear.
-
-  Output:
-	int: Returns the state of the control lines.
-*/
 static int metrousb_tiocmset(struct tty_struct *tty,
 			     unsigned int set, unsigned int clear)
 {
@@ -427,16 +329,6 @@ static int metrousb_tiocmset(struct tty_struct *tty,
 	return metrousb_set_modem_ctrl(serial, control_state);
 }
 
-/* ----------------------------------------------------------------------------------------------
-  Description:
-	Set the serial port unthrottle to resume reading from the port.
-
-  Input:
-	struct usb_serial_port *: pointer to a usb_serial_port structure.
-
-  Output:
-	None:
-*/
 static void metrousb_unthrottle(struct tty_struct *tty)
 {
 	struct usb_serial_port *port = tty->driver_data;
@@ -460,7 +352,6 @@ static void metrousb_unthrottle(struct tty_struct *tty)
 	}
 }
 
-/* Driver structure. */
 static struct usb_driver metrousb_driver = {
 	.name =		"metro-usb",
 	.probe =	usb_serial_probe,
@@ -468,7 +359,6 @@ static struct usb_driver metrousb_driver = {
 	.id_table =	id_table
 };
 
-/* Device structure. */
 static struct usb_serial_driver metrousb_device = {
 	.driver = {
 		.owner =	THIS_MODULE,

commit 9fbd1649d54edc614c64ab075f7485622fd6450a
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Thu Mar 8 13:55:41 2012 -0800

    USB: serial: metro-usb: remove function prototypes
    
    By rearranging the functions a bit, we can remove all function
    prototypes.
    
    Note, this also deleted the _close function, as it wasn't needed, it was
    doing the same thing the cleanup function did, so just call that
    instead.
    
    Cc: Aleksey Babahin <tamerlan311@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/usb/serial/metro-usb.c b/drivers/usb/serial/metro-usb.c
index 66e9355cfd00..8758e01289b9 100644
--- a/drivers/usb/serial/metro-usb.c
+++ b/drivers/usb/serial/metro-usb.c
@@ -56,89 +56,115 @@ MODULE_DEVICE_TABLE(usb, id_table);
 /* Input parameter constants. */
 static bool debug;
 
-/* Function prototypes. */
-static void metrousb_cleanup(struct usb_serial_port *port);
-static void metrousb_close(struct usb_serial_port *port);
-static int  metrousb_open(struct tty_struct *tty, struct usb_serial_port *port);
-static void metrousb_read_int_callback(struct urb *urb);
-static void metrousb_shutdown(struct usb_serial *serial);
-static int metrousb_startup(struct usb_serial *serial);
-static void metrousb_throttle(struct tty_struct *tty);
-static int metrousb_tiocmget(struct tty_struct *tty);
-static int metrousb_tiocmset(struct tty_struct *tty, unsigned int set, unsigned int clear);
-static void metrousb_unthrottle(struct tty_struct *tty);
-
-/* Driver structure. */
-static struct usb_driver metrousb_driver = {
-	.name =		"metro-usb",
-	.probe =	usb_serial_probe,
-	.disconnect =	usb_serial_disconnect,
-	.id_table =	id_table
-};
-
-/* Device structure. */
-static struct usb_serial_driver metrousb_device = {
-	.driver = {
-		.owner =	THIS_MODULE,
-		.name =		"metro-usb",
-	},
-	.description		= "Metrologic USB to serial converter.",
-	.id_table		= id_table,
-	.num_ports		= 1,
-	.open			= metrousb_open,
-	.close			= metrousb_close,
-	.read_int_callback	= metrousb_read_int_callback,
-	.attach			= metrousb_startup,
-	.release		= metrousb_shutdown,
-	.throttle		= metrousb_throttle,
-	.unthrottle		= metrousb_unthrottle,
-	.tiocmget		= metrousb_tiocmget,
-	.tiocmset		= metrousb_tiocmset,
-};
-
-static struct usb_serial_driver * const serial_drivers[] = {
-	&metrousb_device,
-	NULL,
-};
-
 /* ----------------------------------------------------------------------------------------------
   Description:
-	Clean up any urbs and port information.
+	Read the port from the read interrupt.
 
   Input:
-	struct usb_serial_port *: pointer to a usb_serial_port structure.
+	struct urb *: urb structure to get data.
+	struct pt_regs *: pt_regs structure.
 
   Output:
-	int: Returns true (0) if successful, false otherwise.
+	None:
 */
-static void metrousb_cleanup(struct usb_serial_port *port)
+static void metrousb_read_int_callback(struct urb *urb)
 {
+	struct usb_serial_port *port = (struct usb_serial_port *)urb->context;
+	struct metrousb_private *metro_priv = usb_get_serial_port_data(port);
+	struct tty_struct *tty;
+	unsigned char *data = urb->transfer_buffer;
+	int throttled = 0;
+	int result = 0;
+	unsigned long flags = 0;
+
 	dbg("METRO-USB - %s - port number=%d", __FUNCTION__, port->number);
 
-	if (port->serial->dev) {
-		/* Shutdown any interrupt in urbs. */
-		if (port->interrupt_in_urb) {
-			usb_unlink_urb(port->interrupt_in_urb);
-			usb_kill_urb(port->interrupt_in_urb);
+	switch (urb->status) {
+	case 0:
+		/* Success status, read from the port. */
+		break;
+	case -ECONNRESET:
+	case -ENOENT:
+	case -ESHUTDOWN:
+		/* urb has been terminated. */
+		dbg("METRO-USB - %s - urb shutting down, port number=%d, error code=%d",
+			__FUNCTION__, port->number, result);
+		return;
+	default:
+		dbg("METRO-USB - %s - non-zero urb received, port number=%d, error code=%d",
+			__FUNCTION__, port->number, result);
+		goto exit;
+	}
+
+
+	/* Set the data read from the usb port into the serial port buffer. */
+	tty = tty_port_tty_get(&port->port);
+	if (!tty) {
+		dbg("%s - bad tty pointer - exiting", __func__);
+		return;
+	}
+
+	if (tty && urb->actual_length) {
+		/* Loop through the data copying each byte to the tty layer. */
+		tty_insert_flip_string(tty, data, urb->actual_length);
+
+		/* Force the data to the tty layer. */
+		tty_flip_buffer_push(tty);
+	}
+	tty_kref_put(tty);
+
+	/* Set any port variables. */
+	spin_lock_irqsave(&metro_priv->lock, flags);
+	throttled = metro_priv->throttled;
+	spin_unlock_irqrestore(&metro_priv->lock, flags);
+
+	/* Continue trying to read if set. */
+	if (!throttled) {
+		usb_fill_int_urb(port->interrupt_in_urb, port->serial->dev,
+				 usb_rcvintpipe(port->serial->dev, port->interrupt_in_endpointAddress),
+				 port->interrupt_in_urb->transfer_buffer,
+				 port->interrupt_in_urb->transfer_buffer_length,
+				 metrousb_read_int_callback, port, 1);
+
+		result = usb_submit_urb(port->interrupt_in_urb, GFP_ATOMIC);
+
+		if (result) {
+			dbg("METRO-USB - %s - failed submitting interrupt in urb for port number=%d, error code=%d",
+				__FUNCTION__, port->number, result);
 		}
 	}
+	return;
+
+exit:
+	/* Try to resubmit the urb. */
+	result = usb_submit_urb(urb, GFP_ATOMIC);
+	if (result) {
+		dbg("METRO-USB - %s - failed submitting interrupt in urb for port number=%d, error code=%d",
+			__FUNCTION__, port->number, result);
+	}
 }
 
 /* ----------------------------------------------------------------------------------------------
   Description:
-	Close the open serial port. Cleanup any open serial port information.
+	Clean up any urbs and port information.
 
   Input:
 	struct usb_serial_port *: pointer to a usb_serial_port structure.
-	struct file *: pointer to a file structure.
 
   Output:
 	int: Returns true (0) if successful, false otherwise.
 */
-static void metrousb_close(struct usb_serial_port *port)
+static void metrousb_cleanup(struct usb_serial_port *port)
 {
 	dbg("METRO-USB - %s - port number=%d", __FUNCTION__, port->number);
-	metrousb_cleanup(port);
+
+	if (port->serial->dev) {
+		/* Shutdown any interrupt in urbs. */
+		if (port->interrupt_in_urb) {
+			usb_unlink_urb(port->interrupt_in_urb);
+			usb_kill_urb(port->interrupt_in_urb);
+		}
+	}
 }
 
 /* ----------------------------------------------------------------------------------------------
@@ -203,94 +229,6 @@ static int metrousb_open(struct tty_struct *tty, struct usb_serial_port *port)
 	return result;
 }
 
-/* ----------------------------------------------------------------------------------------------
-  Description:
-	Read the port from the read interrupt.
-
-  Input:
-	struct urb *: urb structure to get data.
-	struct pt_regs *: pt_regs structure.
-
-  Output:
-	None:
-*/
-static void metrousb_read_int_callback(struct urb *urb)
-{
-	struct usb_serial_port *port = (struct usb_serial_port *)urb->context;
-	struct metrousb_private *metro_priv = usb_get_serial_port_data(port);
-	struct tty_struct *tty;
-	unsigned char *data = urb->transfer_buffer;
-	int throttled = 0;
-	int result = 0;
-	unsigned long flags = 0;
-
-	dbg("METRO-USB - %s - port number=%d", __FUNCTION__, port->number);
-
-	switch (urb->status) {
-	case 0:
-		/* Success status, read from the port. */
-		break;
-	case -ECONNRESET:
-	case -ENOENT:
-	case -ESHUTDOWN:
-		/* urb has been terminated. */
-		dbg("METRO-USB - %s - urb shutting down, port number=%d, error code=%d",
-			__FUNCTION__, port->number, result);
-		return;
-	default:
-		dbg("METRO-USB - %s - non-zero urb received, port number=%d, error code=%d",
-			__FUNCTION__, port->number, result);
-		goto exit;
-	}
-
-
-	/* Set the data read from the usb port into the serial port buffer. */
-	tty = tty_port_tty_get(&port->port);
-	if (!tty) {
-		dbg("%s - bad tty pointer - exiting", __func__);
-		return;
-	}
-
-	if (tty && urb->actual_length) {
-		/* Loop through the data copying each byte to the tty layer. */
-		tty_insert_flip_string(tty, data, urb->actual_length);
-
-		/* Force the data to the tty layer. */
-		tty_flip_buffer_push(tty);
-	}
-	tty_kref_put(tty);
-
-	/* Set any port variables. */
-	spin_lock_irqsave(&metro_priv->lock, flags);
-	throttled = metro_priv->throttled;
-	spin_unlock_irqrestore(&metro_priv->lock, flags);
-
-	/* Continue trying to read if set. */
-	if (!throttled) {
-		usb_fill_int_urb(port->interrupt_in_urb, port->serial->dev,
-				 usb_rcvintpipe(port->serial->dev, port->interrupt_in_endpointAddress),
-				 port->interrupt_in_urb->transfer_buffer,
-				 port->interrupt_in_urb->transfer_buffer_length,
-				 metrousb_read_int_callback, port, 1);
-
-		result = usb_submit_urb(port->interrupt_in_urb, GFP_ATOMIC);
-
-		if (result) {
-			dbg("METRO-USB - %s - failed submitting interrupt in urb for port number=%d, error code=%d",
-				__FUNCTION__, port->number, result);
-		}
-	}
-	return;
-
-exit:
-	/* Try to resubmit the urb. */
-	result = usb_submit_urb(urb, GFP_ATOMIC);
-	if (result) {
-		dbg("METRO-USB - %s - failed submitting interrupt in urb for port number=%d, error code=%d",
-			__FUNCTION__, port->number, result);
-	}
-}
-
 /* ----------------------------------------------------------------------------------------------
   Description:
 	Set the modem control state for the entered serial port.
@@ -522,6 +460,39 @@ static void metrousb_unthrottle(struct tty_struct *tty)
 	}
 }
 
+/* Driver structure. */
+static struct usb_driver metrousb_driver = {
+	.name =		"metro-usb",
+	.probe =	usb_serial_probe,
+	.disconnect =	usb_serial_disconnect,
+	.id_table =	id_table
+};
+
+/* Device structure. */
+static struct usb_serial_driver metrousb_device = {
+	.driver = {
+		.owner =	THIS_MODULE,
+		.name =		"metro-usb",
+	},
+	.description		= "Metrologic USB to serial converter.",
+	.id_table		= id_table,
+	.num_ports		= 1,
+	.open			= metrousb_open,
+	.close			= metrousb_cleanup,
+	.read_int_callback	= metrousb_read_int_callback,
+	.attach			= metrousb_startup,
+	.release		= metrousb_shutdown,
+	.throttle		= metrousb_throttle,
+	.unthrottle		= metrousb_unthrottle,
+	.tiocmget		= metrousb_tiocmget,
+	.tiocmset		= metrousb_tiocmset,
+};
+
+static struct usb_serial_driver * const serial_drivers[] = {
+	&metrousb_device,
+	NULL,
+};
+
 module_usb_serial_driver(metrousb_driver, serial_drivers);
 
 MODULE_LICENSE("GPL");

commit d4cbd6e990a798d21577ee2f42a3880da09edf3a
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Thu Mar 8 13:50:54 2012 -0800

    USB: serial: metro-usb: fix up coding style errors
    
    This fixes up all of the coding style errors, and removes the initial,
    unneeded comments on how to load the module and the old changelog which
    are no longer needed.
    
    There are still a number of coding style warnings left, I'll get to them
    later.
    
    Cc: Aleksey Babahin <tamerlan311@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/usb/serial/metro-usb.c b/drivers/usb/serial/metro-usb.c
index d22a603597e8..66e9355cfd00 100644
--- a/drivers/usb/serial/metro-usb.c
+++ b/drivers/usb/serial/metro-usb.c
@@ -1,32 +1,9 @@
 /*
-  Date Created:	9/15/2006
-  File Name:		metro-usb.c
-  Description:	metro-usb.c is the drivers main source file. The driver is a USB to Serial converter.
-		The driver takes USB data and sends it to a virtual ttyUSB# serial port.
-		The driver interfaces with the usbserial.ko driver supplied by Linux.
-
-		NOTES:
-		To install the driver:
-		1. Install the usbserial.ko module supplied by Linux with: # insmod usbserial.ko
-		2. Install the metro-usb.ko module with: # insmod metro-usb.ko
-
-		Some of this code is credited to Linux USB open source files that are distributed with Linux.
+  Some of this code is credited to Linux USB open source files that are
+  distributed with Linux.
 
   Copyright:	2007 Metrologic Instruments. All rights reserved.
   Copyright:	2011 Azimut Ltd. <http://azimutrzn.ru/>
-  Requirements: gedit.exe, notepad.exe
- 
-  Revision History:
-
-  Date:			Developer:			Revisions:
-  ------------------------------------------------------------------------------
-  1/30/2007		Philip Nicastro		Initial release. (v1.0.0.0)
-  2/27/2007		Philip Nicastro		Changed the metrousb_read_int_callback function to use a loop with the tty_insert_flip_char function to copy each byte to the tty layer. Removed the tty_buffer_request_room and the tty_insert_flip_string function calls. These calls were not supported on Fedora.
-  2/27/2007		Philip Nicastro		Released. (v1.1.0.0)
-  10/07/2011		Aleksey Babahin		Update for new kernel (tested on 2.6.38)
-						Add unidirection mode support
- 
- 
 */
 
 #include <linux/kernel.h>
@@ -41,8 +18,8 @@
 #include <linux/moduleparam.h>
 #include <linux/spinlock.h>
 #include <linux/errno.h>
+#include <linux/uaccess.h>
 #include <linux/usb/serial.h>
-#include <asm/uaccess.h>
 
 /* Version Information */
 #define DRIVER_VERSION "v1.2.0.0"
@@ -59,7 +36,7 @@
 #define METROUSB_MCR_NONE		0x08	/* Deactivate DTR and RTS. */
 #define METROUSB_MCR_RTS		0x0a	/* Activate RTS. */
 #define METROUSB_MCR_DTR		0x09	/* Activate DTR. */
-#define WDR_TIMEOUT			5000 	/* default urb timeout. */
+#define WDR_TIMEOUT			5000	/* default urb timeout. */
 
 /* Private data structure. */
 struct metrousb_private {
@@ -69,7 +46,7 @@ struct metrousb_private {
 };
 
 /* Device table list. */
-static struct usb_device_id id_table [] = {
+static struct usb_device_id id_table[] = {
 	{ USB_DEVICE(FOCUS_VENDOR_ID, FOCUS_PRODUCT_ID) },
 	{ USB_DEVICE(FOCUS_VENDOR_ID, FOCUS_PRODUCT_ID_UNI) },
 	{ }, /* Terminating entry. */
@@ -80,12 +57,12 @@ MODULE_DEVICE_TABLE(usb, id_table);
 static bool debug;
 
 /* Function prototypes. */
-static void metrousb_cleanup (struct usb_serial_port *port);
-static void metrousb_close (struct usb_serial_port *port);
-static int  metrousb_open (struct tty_struct *tty, struct usb_serial_port *port);
-static void metrousb_read_int_callback (struct urb *urb);
-static void metrousb_shutdown (struct usb_serial *serial);
-static int metrousb_startup (struct usb_serial *serial);
+static void metrousb_cleanup(struct usb_serial_port *port);
+static void metrousb_close(struct usb_serial_port *port);
+static int  metrousb_open(struct tty_struct *tty, struct usb_serial_port *port);
+static void metrousb_read_int_callback(struct urb *urb);
+static void metrousb_shutdown(struct usb_serial *serial);
+static int metrousb_startup(struct usb_serial *serial);
 static void metrousb_throttle(struct tty_struct *tty);
 static int metrousb_tiocmget(struct tty_struct *tty);
 static int metrousb_tiocmset(struct tty_struct *tty, unsigned int set, unsigned int clear);
@@ -105,18 +82,18 @@ static struct usb_serial_driver metrousb_device = {
 		.owner =	THIS_MODULE,
 		.name =		"metro-usb",
 	},
-	.description 		= "Metrologic USB to serial converter.",
-	.id_table 		= id_table,
-	.num_ports 		= 1,
-	.open 			= metrousb_open,
-	.close 			= metrousb_close,
-	.read_int_callback 	= metrousb_read_int_callback,
-	.attach 		= metrousb_startup,
-	.release 		= metrousb_shutdown,
-	.throttle          	= metrousb_throttle,
-	.unthrottle        	= metrousb_unthrottle,
-	.tiocmget          	= metrousb_tiocmget,
-	.tiocmset          	= metrousb_tiocmset,
+	.description		= "Metrologic USB to serial converter.",
+	.id_table		= id_table,
+	.num_ports		= 1,
+	.open			= metrousb_open,
+	.close			= metrousb_close,
+	.read_int_callback	= metrousb_read_int_callback,
+	.attach			= metrousb_startup,
+	.release		= metrousb_shutdown,
+	.throttle		= metrousb_throttle,
+	.unthrottle		= metrousb_unthrottle,
+	.tiocmget		= metrousb_tiocmget,
+	.tiocmset		= metrousb_tiocmset,
 };
 
 static struct usb_serial_driver * const serial_drivers[] = {
@@ -134,7 +111,7 @@ static struct usb_serial_driver * const serial_drivers[] = {
   Output:
 	int: Returns true (0) if successful, false otherwise.
 */
-static void metrousb_cleanup (struct usb_serial_port *port)
+static void metrousb_cleanup(struct usb_serial_port *port)
 {
 	dbg("METRO-USB - %s - port number=%d", __FUNCTION__, port->number);
 
@@ -144,12 +121,6 @@ static void metrousb_cleanup (struct usb_serial_port *port)
 			usb_unlink_urb(port->interrupt_in_urb);
 			usb_kill_urb(port->interrupt_in_urb);
 		}
-
-		// temp
-		// this will be needed for the write urb
-		/* Shutdown any interrupt_out_urbs. */
-		//if (serial->num_bulk_in)
-		//	usb_kill_urb(port->read_urb);
 	}
 }
 
@@ -164,7 +135,7 @@ static void metrousb_cleanup (struct usb_serial_port *port)
   Output:
 	int: Returns true (0) if successful, false otherwise.
 */
-static void metrousb_close (struct usb_serial_port *port)
+static void metrousb_close(struct usb_serial_port *port)
 {
 	dbg("METRO-USB - %s - port number=%d", __FUNCTION__, port->number);
 	metrousb_cleanup(port);
@@ -181,7 +152,7 @@ static void metrousb_close (struct usb_serial_port *port)
   Output:
 	int: Returns true (0) if successful, false otherwise.
 */
-static int metrousb_open (struct tty_struct *tty, struct usb_serial_port *port)
+static int metrousb_open(struct tty_struct *tty, struct usb_serial_port *port)
 {
 	struct usb_serial *serial = port->serial;
 	struct metrousb_private *metro_priv = usb_get_serial_port_data(port);
@@ -207,16 +178,15 @@ static int metrousb_open (struct tty_struct *tty, struct usb_serial_port *port)
 	 * through, otherwise it is scheduled, and with high data rates (like
 	 * with OHCI) data can get lost.
 	 */
-	if (tty) {
+	if (tty)
 		tty->low_latency = 1;
-	}
 
 	/* Clear the urb pipe. */
 	usb_clear_halt(serial->dev, port->interrupt_in_urb->pipe);
 
 	/* Start reading from the device */
-	usb_fill_int_urb (port->interrupt_in_urb, serial->dev,
-			   usb_rcvintpipe (serial->dev, port->interrupt_in_endpointAddress),
+	usb_fill_int_urb(port->interrupt_in_urb, serial->dev,
+			  usb_rcvintpipe(serial->dev, port->interrupt_in_endpointAddress),
 			   port->interrupt_in_urb->transfer_buffer,
 			   port->interrupt_in_urb->transfer_buffer_length,
 			   metrousb_read_int_callback, port, 1);
@@ -244,7 +214,7 @@ static int metrousb_open (struct tty_struct *tty, struct usb_serial_port *port)
   Output:
 	None:
 */
-static void metrousb_read_int_callback (struct urb *urb)
+static void metrousb_read_int_callback(struct urb *urb)
 {
 	struct usb_serial_port *port = (struct usb_serial_port *)urb->context;
 	struct metrousb_private *metro_priv = usb_get_serial_port_data(port);
@@ -257,20 +227,20 @@ static void metrousb_read_int_callback (struct urb *urb)
 	dbg("METRO-USB - %s - port number=%d", __FUNCTION__, port->number);
 
 	switch (urb->status) {
-		case 0:
-			/* Success status, read from the port. */
-			break;
-		case -ECONNRESET:
-		case -ENOENT:
-		case -ESHUTDOWN:
-			/* urb has been terminated. */
-			dbg("METRO-USB - %s - urb shutting down, port number=%d, error code=%d",
-				__FUNCTION__, port->number, result);
-			return;
-		default:
-			dbg("METRO-USB - %s - non-zero urb received, port number=%d, error code=%d",
-				__FUNCTION__, port->number, result);
-			goto exit;
+	case 0:
+		/* Success status, read from the port. */
+		break;
+	case -ECONNRESET:
+	case -ENOENT:
+	case -ESHUTDOWN:
+		/* urb has been terminated. */
+		dbg("METRO-USB - %s - urb shutting down, port number=%d, error code=%d",
+			__FUNCTION__, port->number, result);
+		return;
+	default:
+		dbg("METRO-USB - %s - non-zero urb received, port number=%d, error code=%d",
+			__FUNCTION__, port->number, result);
+		goto exit;
 	}
 
 
@@ -282,10 +252,10 @@ static void metrousb_read_int_callback (struct urb *urb)
 	}
 
 	if (tty && urb->actual_length) {
-		// Loop through the data copying each byte to the tty layer.
+		/* Loop through the data copying each byte to the tty layer. */
 		tty_insert_flip_string(tty, data, urb->actual_length);
 
-		// Force the data to the tty layer.
+		/* Force the data to the tty layer. */
 		tty_flip_buffer_push(tty);
 	}
 	tty_kref_put(tty);
@@ -297,11 +267,11 @@ static void metrousb_read_int_callback (struct urb *urb)
 
 	/* Continue trying to read if set. */
 	if (!throttled) {
-		usb_fill_int_urb (port->interrupt_in_urb, port->serial->dev,
-				   usb_rcvintpipe (port->serial->dev, port->interrupt_in_endpointAddress),
-				   port->interrupt_in_urb->transfer_buffer,
-				   port->interrupt_in_urb->transfer_buffer_length,
-				   metrousb_read_int_callback, port, 1);
+		usb_fill_int_urb(port->interrupt_in_urb, port->serial->dev,
+				 usb_rcvintpipe(port->serial->dev, port->interrupt_in_endpointAddress),
+				 port->interrupt_in_urb->transfer_buffer,
+				 port->interrupt_in_urb->transfer_buffer_length,
+				 metrousb_read_int_callback, port, 1);
 
 		result = usb_submit_urb(port->interrupt_in_urb, GFP_ATOMIC);
 
@@ -314,7 +284,7 @@ static void metrousb_read_int_callback (struct urb *urb)
 
 exit:
 	/* Try to resubmit the urb. */
-	result = usb_submit_urb (urb, GFP_ATOMIC);
+	result = usb_submit_urb(urb, GFP_ATOMIC);
 	if (result) {
 		dbg("METRO-USB - %s - failed submitting interrupt in urb for port number=%d, error code=%d",
 			__FUNCTION__, port->number, result);
@@ -366,14 +336,14 @@ static int metrousb_set_modem_ctrl(struct usb_serial *serial, unsigned int contr
   Output:
 	int: Returns true (0) if successful, false otherwise.
 */
-static void metrousb_shutdown (struct usb_serial *serial)
+static void metrousb_shutdown(struct usb_serial *serial)
 {
 	int i = 0;
 
 	dbg("METRO-USB - %s", __FUNCTION__);
 
 	/* Stop reading and writing on all ports. */
-	for (i=0; i < serial->num_ports; ++i) {
+	for (i = 0; i < serial->num_ports; ++i) {
 		/* Close any open urbs. */
 		metrousb_cleanup(serial->port[i]);
 
@@ -409,12 +379,12 @@ static int metrousb_startup(struct usb_serial *serial)
 		port = serial->port[i];
 
 		/* Declare memory. */
-		metro_priv = (struct metrousb_private *) kmalloc (sizeof(struct metrousb_private), GFP_KERNEL);
+		metro_priv = kmalloc(sizeof(struct metrousb_private), GFP_KERNEL);
 		if (!metro_priv)
 			return -ENOMEM;
 
 		/* Clear memory. */
-		memset (metro_priv, 0x00, sizeof(struct metrousb_private));
+		memset(metro_priv, 0x00, sizeof(struct metrousb_private));
 
 		/* Initialize memory. */
 		spin_lock_init(&metro_priv->lock);
@@ -436,7 +406,7 @@ static int metrousb_startup(struct usb_serial *serial)
   Output:
 	None:
 */
-static void metrousb_throttle (struct tty_struct *tty)
+static void metrousb_throttle(struct tty_struct *tty)
 {
 	struct usb_serial_port *port = tty->driver_data;
 	struct metrousb_private *metro_priv = usb_get_serial_port_data(port);
@@ -461,7 +431,7 @@ static void metrousb_throttle (struct tty_struct *tty)
   Output:
 	int: Returns the state of the control lines.
 */
-static int metrousb_tiocmget (struct tty_struct *tty)
+static int metrousb_tiocmget(struct tty_struct *tty)
 {
 	unsigned long control_state = 0;
 	struct usb_serial_port *port = tty->driver_data;
@@ -490,8 +460,8 @@ static int metrousb_tiocmget (struct tty_struct *tty)
   Output:
 	int: Returns the state of the control lines.
 */
-static int metrousb_tiocmset (struct tty_struct *tty,
-			       unsigned int set, unsigned int clear)
+static int metrousb_tiocmset(struct tty_struct *tty,
+			     unsigned int set, unsigned int clear)
 {
 	struct usb_serial_port *port = tty->driver_data;
 	struct usb_serial *serial = port->serial;
@@ -504,7 +474,7 @@ static int metrousb_tiocmset (struct tty_struct *tty,
 	spin_lock_irqsave(&metro_priv->lock, flags);
 	control_state = metro_priv->control_state;
 
-	// Set the RTS and DTR values.
+	/* Set the RTS and DTR values. */
 	if (set & TIOCM_RTS)
 		control_state |= TIOCM_RTS;
 	if (set & TIOCM_DTR)
@@ -529,7 +499,7 @@ static int metrousb_tiocmset (struct tty_struct *tty,
   Output:
 	None:
 */
-static void metrousb_unthrottle (struct tty_struct *tty)
+static void metrousb_unthrottle(struct tty_struct *tty)
 {
 	struct usb_serial_port *port = tty->driver_data;
 	struct metrousb_private *metro_priv = usb_get_serial_port_data(port);
@@ -555,9 +525,9 @@ static void metrousb_unthrottle (struct tty_struct *tty)
 module_usb_serial_driver(metrousb_driver, serial_drivers);
 
 MODULE_LICENSE("GPL");
-MODULE_AUTHOR( "Philip Nicastro" );
-MODULE_AUTHOR( "Aleksey Babahin <tamerlan311@gmail.com>" );
-MODULE_DESCRIPTION( DRIVER_DESC );
+MODULE_AUTHOR("Philip Nicastro");
+MODULE_AUTHOR("Aleksey Babahin <tamerlan311@gmail.com>");
+MODULE_DESCRIPTION(DRIVER_DESC);
 
 /* Module input parameters */
 module_param(debug, bool, S_IRUGO | S_IWUSR);

commit 159d4d8d5e9416dba78b84d4be10d7b1172728ee
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Thu Mar 8 13:42:41 2012 -0800

    USB: serial: metro-usb: remove the .h file
    
    A driver doesn't need a .h file just for simple things like vendor ids
    and a private structure.  So move it into the .c file instead, saving
    some overall lines.
    
    Cc: Aleksey Babahin <tamerlan311@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/usb/serial/metro-usb.c b/drivers/usb/serial/metro-usb.c
index 919dd47ab46f..d22a603597e8 100644
--- a/drivers/usb/serial/metro-usb.c
+++ b/drivers/usb/serial/metro-usb.c
@@ -40,15 +40,34 @@
 #include <linux/tty_flip.h>
 #include <linux/moduleparam.h>
 #include <linux/spinlock.h>
-#include <asm/uaccess.h>
 #include <linux/errno.h>
-#include "metro-usb.h"
 #include <linux/usb/serial.h>
+#include <asm/uaccess.h>
 
 /* Version Information */
 #define DRIVER_VERSION "v1.2.0.0"
 #define DRIVER_DESC "Metrologic Instruments Inc. - USB-POS driver"
 
+/* Product information. */
+#define FOCUS_VENDOR_ID			0x0C2E
+#define FOCUS_PRODUCT_ID		0x0720
+#define FOCUS_PRODUCT_ID_UNI		0x0710
+
+#define METROUSB_SET_REQUEST_TYPE	0x40
+#define METROUSB_SET_MODEM_CTRL_REQUEST	10
+#define METROUSB_SET_BREAK_REQUEST	0x40
+#define METROUSB_MCR_NONE		0x08	/* Deactivate DTR and RTS. */
+#define METROUSB_MCR_RTS		0x0a	/* Activate RTS. */
+#define METROUSB_MCR_DTR		0x09	/* Activate DTR. */
+#define WDR_TIMEOUT			5000 	/* default urb timeout. */
+
+/* Private data structure. */
+struct metrousb_private {
+	spinlock_t lock;
+	int throttled;
+	unsigned long control_state;
+};
+
 /* Device table list. */
 static struct usb_device_id id_table [] = {
 	{ USB_DEVICE(FOCUS_VENDOR_ID, FOCUS_PRODUCT_ID) },

commit 1935e357bb2a3031772730293a3725e3cca07778
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Thu Mar 8 13:39:53 2012 -0800

    USB: serial: metro-usb: convert to use module_usb_serial_driver
    
    Now that we aren't doing anything special in the init function, move to
    use the easier module_usb_serial_driver() call instead, saving a lot of
    lines of unnecessary code.
    
    Cc: Aleksey Babahin <tamerlan311@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/usb/serial/metro-usb.c b/drivers/usb/serial/metro-usb.c
index d0c47e1dab10..919dd47ab46f 100644
--- a/drivers/usb/serial/metro-usb.c
+++ b/drivers/usb/serial/metro-usb.c
@@ -151,47 +151,6 @@ static void metrousb_close (struct usb_serial_port *port)
 	metrousb_cleanup(port);
 }
 
-/* ----------------------------------------------------------------------------------------------
-  Description:
-	Driver exit.
-
-  Input:
-	None:
-
-  Output:
-	None:
-*/
-static void __exit metrousb_exit(void)
-{
-	usb_serial_deregister_drivers(&metrousb_driver, serial_drivers);
-}
-
-/* ----------------------------------------------------------------------------------------------
-  Description:
-	Driver initialization.
-
-  Input:
-	None:
-
-  Output:
-	int: Returns true (0) if successful, false otherwise.
-*/
-static int __init metrousb_init(void)
-{
-	int retval = 0;
-
-	dbg("METRO-USB - %s", __FUNCTION__);
-
-	/* Register the devices. */
-	retval = usb_serial_register_drivers(&metrousb_driver, serial_drivers);
-	if (retval)
-		return retval;
-
-	printk(KERN_INFO DRIVER_DESC " : " DRIVER_VERSION);
-
-	return retval;
-}
-
 /* ----------------------------------------------------------------------------------------------
   Description:
 	Open the drivers serial port.
@@ -574,9 +533,8 @@ static void metrousb_unthrottle (struct tty_struct *tty)
 	}
 }
 
-/* Standard module function. */
-module_init(metrousb_init);
-module_exit(metrousb_exit);
+module_usb_serial_driver(metrousb_driver, serial_drivers);
+
 MODULE_LICENSE("GPL");
 MODULE_AUTHOR( "Philip Nicastro" );
 MODULE_AUTHOR( "Aleksey Babahin <tamerlan311@gmail.com>" );

commit fdac0f647a2cf12e7152dc1d94dd08a1af4a2a82
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Thu Mar 8 13:37:32 2012 -0800

    USB: serial: metro-usb: remove vendor and product module parameters
    
    All new usb serial drivers should be using the dynamic id function, not
    having module parameters for this type of thing.  So remove them before
    anyone gets used to them being there.
    
    Cc: Aleksey Babahin <tamerlan311@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/usb/serial/metro-usb.c b/drivers/usb/serial/metro-usb.c
index bb6838959876..d0c47e1dab10 100644
--- a/drivers/usb/serial/metro-usb.c
+++ b/drivers/usb/serial/metro-usb.c
@@ -8,8 +8,7 @@
 		NOTES:
 		To install the driver:
 		1. Install the usbserial.ko module supplied by Linux with: # insmod usbserial.ko
-		2. Install the metro-usb.ko module with: # insmod metro-usb.ko vender=0x#### product=0x#### debug=1
-		   The vendor, product and debug parameters are optional.
+		2. Install the metro-usb.ko module with: # insmod metro-usb.ko
 
 		Some of this code is credited to Linux USB open source files that are distributed with Linux.
 
@@ -54,15 +53,12 @@
 static struct usb_device_id id_table [] = {
 	{ USB_DEVICE(FOCUS_VENDOR_ID, FOCUS_PRODUCT_ID) },
 	{ USB_DEVICE(FOCUS_VENDOR_ID, FOCUS_PRODUCT_ID_UNI) },
-	{ }, /* Optional paramenter entry. */
 	{ }, /* Terminating entry. */
 };
 MODULE_DEVICE_TABLE(usb, id_table);
 
 /* Input parameter constants. */
-static int debug;
-static __u16 vendor;
-static __u16 product;
+static bool debug;
 
 /* Function prototypes. */
 static void metrousb_cleanup (struct usb_serial_port *port);
@@ -183,26 +179,9 @@ static void __exit metrousb_exit(void)
 static int __init metrousb_init(void)
 {
 	int retval = 0;
-	int i = 0;
 
 	dbg("METRO-USB - %s", __FUNCTION__);
 
-	/* Add the device parameters if entered. */
-	if ((vendor > 0) && (product > 0)) {
-		struct usb_device_id usb_dev_temp[] = { {USB_DEVICE(vendor, product) } };
-
-		/* Find the last entry in id_table */
-		for (i=0; i < ARRAY_SIZE(id_table); i++) {
-			if (id_table[i].idVendor == 0) {
-				id_table[i] = usb_dev_temp[0];
-				break;
-			}
-		}
-
-		dbg("METRO-USB - %s - support added for unknown device: vendor=0x%x - product=0x%x", __FUNCTION__, vendor, product);
-		printk(KERN_INFO "Metro USB-POS support added for unknown device: vendor=0x%x - product=0x%x", vendor, product);
-	}
-
 	/* Register the devices. */
 	retval = usb_serial_register_drivers(&metrousb_driver, serial_drivers);
 	if (retval)
@@ -606,13 +585,3 @@ MODULE_DESCRIPTION( DRIVER_DESC );
 /* Module input parameters */
 module_param(debug, bool, S_IRUGO | S_IWUSR);
 MODULE_PARM_DESC(debug, "Print debug info (bool 1=on, 0=off)");
-
-module_param(vendor, ushort, 0);
-MODULE_PARM_DESC(vendor, "User specified vendor ID (ushort)");
-
-module_param(product, ushort, 0);
-MODULE_PARM_DESC(product, "User specified product ID (ushort)");
-
-
-
-

commit 11a4f40064f38dcc369d716bea2020f6b5e290ff
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Thu Mar 8 13:33:04 2012 -0800

    USB: serial: metro-usb: fix up usb_serial_register calls
    
    The usb serial core has changed how the driver is to be registered and
    unregistered recently.  Make these changes to the driver so that it will
    properly build and work.
    
    Cc: Aleksey Babahin <tamerlan311@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/usb/serial/metro-usb.c b/drivers/usb/serial/metro-usb.c
index 5b8ed50e5dda..bb6838959876 100644
--- a/drivers/usb/serial/metro-usb.c
+++ b/drivers/usb/serial/metro-usb.c
@@ -92,7 +92,6 @@ static struct usb_serial_driver metrousb_device = {
 	},
 	.description 		= "Metrologic USB to serial converter.",
 	.id_table 		= id_table,
-	.usb_driver		= &metrousb_driver,
 	.num_ports 		= 1,
 	.open 			= metrousb_open,
 	.close 			= metrousb_close,
@@ -105,6 +104,11 @@ static struct usb_serial_driver metrousb_device = {
 	.tiocmset          	= metrousb_tiocmset,
 };
 
+static struct usb_serial_driver * const serial_drivers[] = {
+	&metrousb_device,
+	NULL,
+};
+
 /* ----------------------------------------------------------------------------------------------
   Description:
 	Clean up any urbs and port information.
@@ -163,10 +167,7 @@ static void metrousb_close (struct usb_serial_port *port)
 */
 static void __exit metrousb_exit(void)
 {
-	dbg("METRO-USB - %s", __FUNCTION__);
-
-	usb_deregister(&metrousb_driver);
-	usb_serial_deregister(&metrousb_device);
+	usb_serial_deregister_drivers(&metrousb_driver, serial_drivers);
 }
 
 /* ----------------------------------------------------------------------------------------------
@@ -203,15 +204,10 @@ static int __init metrousb_init(void)
 	}
 
 	/* Register the devices. */
-	retval = usb_serial_register(&metrousb_device);
+	retval = usb_serial_register_drivers(&metrousb_driver, serial_drivers);
 	if (retval)
 		return retval;
 
-	/* Register the driver. */
-	retval = usb_register(&metrousb_driver);
-	if (retval)
-		usb_serial_deregister(&metrousb_device);
-
 	printk(KERN_INFO DRIVER_DESC " : " DRIVER_VERSION);
 
 	return retval;

commit 43d186fe992da93bb1dd34a7dd4534719624431c
Author: Aleksey Babahin <tamerlan311@gmail.com>
Date:   Thu Mar 8 13:18:43 2012 -0800

    USB: serial: add metro-usb driver to the tree
    
    This driver is for the Metrologic barcode scanner.
    
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/usb/serial/metro-usb.c b/drivers/usb/serial/metro-usb.c
new file mode 100644
index 000000000000..5b8ed50e5dda
--- /dev/null
+++ b/drivers/usb/serial/metro-usb.c
@@ -0,0 +1,622 @@
+/*
+  Date Created:	9/15/2006
+  File Name:		metro-usb.c
+  Description:	metro-usb.c is the drivers main source file. The driver is a USB to Serial converter.
+		The driver takes USB data and sends it to a virtual ttyUSB# serial port.
+		The driver interfaces with the usbserial.ko driver supplied by Linux.
+
+		NOTES:
+		To install the driver:
+		1. Install the usbserial.ko module supplied by Linux with: # insmod usbserial.ko
+		2. Install the metro-usb.ko module with: # insmod metro-usb.ko vender=0x#### product=0x#### debug=1
+		   The vendor, product and debug parameters are optional.
+
+		Some of this code is credited to Linux USB open source files that are distributed with Linux.
+
+  Copyright:	2007 Metrologic Instruments. All rights reserved.
+  Copyright:	2011 Azimut Ltd. <http://azimutrzn.ru/>
+  Requirements: gedit.exe, notepad.exe
+ 
+  Revision History:
+
+  Date:			Developer:			Revisions:
+  ------------------------------------------------------------------------------
+  1/30/2007		Philip Nicastro		Initial release. (v1.0.0.0)
+  2/27/2007		Philip Nicastro		Changed the metrousb_read_int_callback function to use a loop with the tty_insert_flip_char function to copy each byte to the tty layer. Removed the tty_buffer_request_room and the tty_insert_flip_string function calls. These calls were not supported on Fedora.
+  2/27/2007		Philip Nicastro		Released. (v1.1.0.0)
+  10/07/2011		Aleksey Babahin		Update for new kernel (tested on 2.6.38)
+						Add unidirection mode support
+ 
+ 
+*/
+
+#include <linux/kernel.h>
+#include <linux/init.h>
+#include <linux/tty.h>
+#include <linux/module.h>
+#include <linux/usb.h>
+#include <linux/errno.h>
+#include <linux/slab.h>
+#include <linux/tty_driver.h>
+#include <linux/tty_flip.h>
+#include <linux/moduleparam.h>
+#include <linux/spinlock.h>
+#include <asm/uaccess.h>
+#include <linux/errno.h>
+#include "metro-usb.h"
+#include <linux/usb/serial.h>
+
+/* Version Information */
+#define DRIVER_VERSION "v1.2.0.0"
+#define DRIVER_DESC "Metrologic Instruments Inc. - USB-POS driver"
+
+/* Device table list. */
+static struct usb_device_id id_table [] = {
+	{ USB_DEVICE(FOCUS_VENDOR_ID, FOCUS_PRODUCT_ID) },
+	{ USB_DEVICE(FOCUS_VENDOR_ID, FOCUS_PRODUCT_ID_UNI) },
+	{ }, /* Optional paramenter entry. */
+	{ }, /* Terminating entry. */
+};
+MODULE_DEVICE_TABLE(usb, id_table);
+
+/* Input parameter constants. */
+static int debug;
+static __u16 vendor;
+static __u16 product;
+
+/* Function prototypes. */
+static void metrousb_cleanup (struct usb_serial_port *port);
+static void metrousb_close (struct usb_serial_port *port);
+static int  metrousb_open (struct tty_struct *tty, struct usb_serial_port *port);
+static void metrousb_read_int_callback (struct urb *urb);
+static void metrousb_shutdown (struct usb_serial *serial);
+static int metrousb_startup (struct usb_serial *serial);
+static void metrousb_throttle(struct tty_struct *tty);
+static int metrousb_tiocmget(struct tty_struct *tty);
+static int metrousb_tiocmset(struct tty_struct *tty, unsigned int set, unsigned int clear);
+static void metrousb_unthrottle(struct tty_struct *tty);
+
+/* Driver structure. */
+static struct usb_driver metrousb_driver = {
+	.name =		"metro-usb",
+	.probe =	usb_serial_probe,
+	.disconnect =	usb_serial_disconnect,
+	.id_table =	id_table
+};
+
+/* Device structure. */
+static struct usb_serial_driver metrousb_device = {
+	.driver = {
+		.owner =	THIS_MODULE,
+		.name =		"metro-usb",
+	},
+	.description 		= "Metrologic USB to serial converter.",
+	.id_table 		= id_table,
+	.usb_driver		= &metrousb_driver,
+	.num_ports 		= 1,
+	.open 			= metrousb_open,
+	.close 			= metrousb_close,
+	.read_int_callback 	= metrousb_read_int_callback,
+	.attach 		= metrousb_startup,
+	.release 		= metrousb_shutdown,
+	.throttle          	= metrousb_throttle,
+	.unthrottle        	= metrousb_unthrottle,
+	.tiocmget          	= metrousb_tiocmget,
+	.tiocmset          	= metrousb_tiocmset,
+};
+
+/* ----------------------------------------------------------------------------------------------
+  Description:
+	Clean up any urbs and port information.
+
+  Input:
+	struct usb_serial_port *: pointer to a usb_serial_port structure.
+
+  Output:
+	int: Returns true (0) if successful, false otherwise.
+*/
+static void metrousb_cleanup (struct usb_serial_port *port)
+{
+	dbg("METRO-USB - %s - port number=%d", __FUNCTION__, port->number);
+
+	if (port->serial->dev) {
+		/* Shutdown any interrupt in urbs. */
+		if (port->interrupt_in_urb) {
+			usb_unlink_urb(port->interrupt_in_urb);
+			usb_kill_urb(port->interrupt_in_urb);
+		}
+
+		// temp
+		// this will be needed for the write urb
+		/* Shutdown any interrupt_out_urbs. */
+		//if (serial->num_bulk_in)
+		//	usb_kill_urb(port->read_urb);
+	}
+}
+
+/* ----------------------------------------------------------------------------------------------
+  Description:
+	Close the open serial port. Cleanup any open serial port information.
+
+  Input:
+	struct usb_serial_port *: pointer to a usb_serial_port structure.
+	struct file *: pointer to a file structure.
+
+  Output:
+	int: Returns true (0) if successful, false otherwise.
+*/
+static void metrousb_close (struct usb_serial_port *port)
+{
+	dbg("METRO-USB - %s - port number=%d", __FUNCTION__, port->number);
+	metrousb_cleanup(port);
+}
+
+/* ----------------------------------------------------------------------------------------------
+  Description:
+	Driver exit.
+
+  Input:
+	None:
+
+  Output:
+	None:
+*/
+static void __exit metrousb_exit(void)
+{
+	dbg("METRO-USB - %s", __FUNCTION__);
+
+	usb_deregister(&metrousb_driver);
+	usb_serial_deregister(&metrousb_device);
+}
+
+/* ----------------------------------------------------------------------------------------------
+  Description:
+	Driver initialization.
+
+  Input:
+	None:
+
+  Output:
+	int: Returns true (0) if successful, false otherwise.
+*/
+static int __init metrousb_init(void)
+{
+	int retval = 0;
+	int i = 0;
+
+	dbg("METRO-USB - %s", __FUNCTION__);
+
+	/* Add the device parameters if entered. */
+	if ((vendor > 0) && (product > 0)) {
+		struct usb_device_id usb_dev_temp[] = { {USB_DEVICE(vendor, product) } };
+
+		/* Find the last entry in id_table */
+		for (i=0; i < ARRAY_SIZE(id_table); i++) {
+			if (id_table[i].idVendor == 0) {
+				id_table[i] = usb_dev_temp[0];
+				break;
+			}
+		}
+
+		dbg("METRO-USB - %s - support added for unknown device: vendor=0x%x - product=0x%x", __FUNCTION__, vendor, product);
+		printk(KERN_INFO "Metro USB-POS support added for unknown device: vendor=0x%x - product=0x%x", vendor, product);
+	}
+
+	/* Register the devices. */
+	retval = usb_serial_register(&metrousb_device);
+	if (retval)
+		return retval;
+
+	/* Register the driver. */
+	retval = usb_register(&metrousb_driver);
+	if (retval)
+		usb_serial_deregister(&metrousb_device);
+
+	printk(KERN_INFO DRIVER_DESC " : " DRIVER_VERSION);
+
+	return retval;
+}
+
+/* ----------------------------------------------------------------------------------------------
+  Description:
+	Open the drivers serial port.
+
+  Input:
+	struct usb_serial_port *: pointer to a usb_serial_port structure.
+	struct file *: pointer to a file structure.
+
+  Output:
+	int: Returns true (0) if successful, false otherwise.
+*/
+static int metrousb_open (struct tty_struct *tty, struct usb_serial_port *port)
+{
+	struct usb_serial *serial = port->serial;
+	struct metrousb_private *metro_priv = usb_get_serial_port_data(port);
+	unsigned long flags = 0;
+	int result = 0;
+
+	dbg("METRO-USB - %s - port number=%d", __FUNCTION__, port->number);
+
+	/* Make sure the urb is initialized. */
+	if (!port->interrupt_in_urb) {
+		dbg("METRO-USB - %s - interrupt urb not initialized for port number=%d", __FUNCTION__, port->number);
+		return -ENODEV;
+	}
+
+	/* Set the private data information for the port. */
+	spin_lock_irqsave(&metro_priv->lock, flags);
+	metro_priv->control_state = 0;
+	metro_priv->throttled = 0;
+	spin_unlock_irqrestore(&metro_priv->lock, flags);
+
+	/*
+	 * Force low_latency on so that our tty_push actually forces the data
+	 * through, otherwise it is scheduled, and with high data rates (like
+	 * with OHCI) data can get lost.
+	 */
+	if (tty) {
+		tty->low_latency = 1;
+	}
+
+	/* Clear the urb pipe. */
+	usb_clear_halt(serial->dev, port->interrupt_in_urb->pipe);
+
+	/* Start reading from the device */
+	usb_fill_int_urb (port->interrupt_in_urb, serial->dev,
+			   usb_rcvintpipe (serial->dev, port->interrupt_in_endpointAddress),
+			   port->interrupt_in_urb->transfer_buffer,
+			   port->interrupt_in_urb->transfer_buffer_length,
+			   metrousb_read_int_callback, port, 1);
+	result = usb_submit_urb(port->interrupt_in_urb, GFP_KERNEL);
+
+	if (result) {
+		dbg("METRO-USB - %s - failed submitting interrupt in urb for port number=%d, error code=%d"
+			, __FUNCTION__, port->number, result);
+		goto exit;
+	}
+
+	dbg("METRO-USB - %s - port open for port number=%d", __FUNCTION__, port->number);
+exit:
+	return result;
+}
+
+/* ----------------------------------------------------------------------------------------------
+  Description:
+	Read the port from the read interrupt.
+
+  Input:
+	struct urb *: urb structure to get data.
+	struct pt_regs *: pt_regs structure.
+
+  Output:
+	None:
+*/
+static void metrousb_read_int_callback (struct urb *urb)
+{
+	struct usb_serial_port *port = (struct usb_serial_port *)urb->context;
+	struct metrousb_private *metro_priv = usb_get_serial_port_data(port);
+	struct tty_struct *tty;
+	unsigned char *data = urb->transfer_buffer;
+	int throttled = 0;
+	int result = 0;
+	unsigned long flags = 0;
+
+	dbg("METRO-USB - %s - port number=%d", __FUNCTION__, port->number);
+
+	switch (urb->status) {
+		case 0:
+			/* Success status, read from the port. */
+			break;
+		case -ECONNRESET:
+		case -ENOENT:
+		case -ESHUTDOWN:
+			/* urb has been terminated. */
+			dbg("METRO-USB - %s - urb shutting down, port number=%d, error code=%d",
+				__FUNCTION__, port->number, result);
+			return;
+		default:
+			dbg("METRO-USB - %s - non-zero urb received, port number=%d, error code=%d",
+				__FUNCTION__, port->number, result);
+			goto exit;
+	}
+
+
+	/* Set the data read from the usb port into the serial port buffer. */
+	tty = tty_port_tty_get(&port->port);
+	if (!tty) {
+		dbg("%s - bad tty pointer - exiting", __func__);
+		return;
+	}
+
+	if (tty && urb->actual_length) {
+		// Loop through the data copying each byte to the tty layer.
+		tty_insert_flip_string(tty, data, urb->actual_length);
+
+		// Force the data to the tty layer.
+		tty_flip_buffer_push(tty);
+	}
+	tty_kref_put(tty);
+
+	/* Set any port variables. */
+	spin_lock_irqsave(&metro_priv->lock, flags);
+	throttled = metro_priv->throttled;
+	spin_unlock_irqrestore(&metro_priv->lock, flags);
+
+	/* Continue trying to read if set. */
+	if (!throttled) {
+		usb_fill_int_urb (port->interrupt_in_urb, port->serial->dev,
+				   usb_rcvintpipe (port->serial->dev, port->interrupt_in_endpointAddress),
+				   port->interrupt_in_urb->transfer_buffer,
+				   port->interrupt_in_urb->transfer_buffer_length,
+				   metrousb_read_int_callback, port, 1);
+
+		result = usb_submit_urb(port->interrupt_in_urb, GFP_ATOMIC);
+
+		if (result) {
+			dbg("METRO-USB - %s - failed submitting interrupt in urb for port number=%d, error code=%d",
+				__FUNCTION__, port->number, result);
+		}
+	}
+	return;
+
+exit:
+	/* Try to resubmit the urb. */
+	result = usb_submit_urb (urb, GFP_ATOMIC);
+	if (result) {
+		dbg("METRO-USB - %s - failed submitting interrupt in urb for port number=%d, error code=%d",
+			__FUNCTION__, port->number, result);
+	}
+}
+
+/* ----------------------------------------------------------------------------------------------
+  Description:
+	Set the modem control state for the entered serial port.
+
+  Input:
+	struct usb_serial_port *: pointer to a usb_serial_port structure.
+	unsigned int: control state value to set.
+
+  Output:
+	int: Returns true (0) if successful, false otherwise.
+*/
+static int metrousb_set_modem_ctrl(struct usb_serial *serial, unsigned int control_state)
+{
+	int retval = 0;
+	unsigned char mcr = METROUSB_MCR_NONE;
+
+	dbg("METRO-USB - %s - control state=%d", __FUNCTION__, control_state);
+
+	/* Set the modem control value. */
+	if (control_state & TIOCM_DTR)
+		mcr |= METROUSB_MCR_DTR;
+	if (control_state & TIOCM_RTS)
+		mcr |= METROUSB_MCR_RTS;
+
+	/* Send the command to the usb port. */
+	retval = usb_control_msg(serial->dev, usb_sndctrlpipe(serial->dev, 0),
+				METROUSB_SET_REQUEST_TYPE, METROUSB_SET_MODEM_CTRL_REQUEST,
+				control_state, 0, NULL, 0, WDR_TIMEOUT);
+	if (retval < 0)
+		dbg("METRO-USB - %s - set modem ctrl=0x%x failed, error code=%d", __FUNCTION__, mcr, retval);
+
+	return retval;
+}
+
+
+/* ----------------------------------------------------------------------------------------------
+  Description:
+	Shutdown the driver.
+
+  Input:
+	struct usb_serial *: pointer to a usb-serial structure.
+
+  Output:
+	int: Returns true (0) if successful, false otherwise.
+*/
+static void metrousb_shutdown (struct usb_serial *serial)
+{
+	int i = 0;
+
+	dbg("METRO-USB - %s", __FUNCTION__);
+
+	/* Stop reading and writing on all ports. */
+	for (i=0; i < serial->num_ports; ++i) {
+		/* Close any open urbs. */
+		metrousb_cleanup(serial->port[i]);
+
+		/* Free memory. */
+		kfree(usb_get_serial_port_data(serial->port[i]));
+		usb_set_serial_port_data(serial->port[i], NULL);
+
+		dbg("METRO-USB - %s - freed port number=%d", __FUNCTION__, serial->port[i]->number);
+	}
+}
+
+/* ----------------------------------------------------------------------------------------------
+  Description:
+	Startup the driver.
+
+  Input:
+	struct usb_serial *: pointer to a usb-serial structure.
+
+  Output:
+	int: Returns true (0) if successful, false otherwise.
+*/
+static int metrousb_startup(struct usb_serial *serial)
+{
+	struct metrousb_private *metro_priv;
+	struct usb_serial_port *port;
+	int i = 0;
+
+	dbg("METRO-USB - %s", __FUNCTION__);
+
+	/* Loop through the serial ports setting up the private structures.
+	 * Currently we only use one port. */
+	for (i = 0; i < serial->num_ports; ++i) {
+		port = serial->port[i];
+
+		/* Declare memory. */
+		metro_priv = (struct metrousb_private *) kmalloc (sizeof(struct metrousb_private), GFP_KERNEL);
+		if (!metro_priv)
+			return -ENOMEM;
+
+		/* Clear memory. */
+		memset (metro_priv, 0x00, sizeof(struct metrousb_private));
+
+		/* Initialize memory. */
+		spin_lock_init(&metro_priv->lock);
+		usb_set_serial_port_data(port, metro_priv);
+
+		dbg("METRO-USB - %s - port number=%d.", __FUNCTION__, port->number);
+	}
+
+	return 0;
+}
+
+/* ----------------------------------------------------------------------------------------------
+  Description:
+	Set the serial port throttle to stop reading from the port.
+
+  Input:
+	struct usb_serial_port *: pointer to a usb_serial_port structure.
+
+  Output:
+	None:
+*/
+static void metrousb_throttle (struct tty_struct *tty)
+{
+	struct usb_serial_port *port = tty->driver_data;
+	struct metrousb_private *metro_priv = usb_get_serial_port_data(port);
+	unsigned long flags = 0;
+
+	dbg("METRO-USB - %s - port number=%d", __FUNCTION__, port->number);
+
+	/* Set the private information for the port to stop reading data. */
+	spin_lock_irqsave(&metro_priv->lock, flags);
+	metro_priv->throttled = 1;
+	spin_unlock_irqrestore(&metro_priv->lock, flags);
+}
+
+/* ----------------------------------------------------------------------------------------------
+  Description:
+	Get the serial port control line states.
+
+  Input:
+	struct usb_serial_port *: pointer to a usb_serial_port structure.
+	struct file *: pointer to a file structure.
+
+  Output:
+	int: Returns the state of the control lines.
+*/
+static int metrousb_tiocmget (struct tty_struct *tty)
+{
+	unsigned long control_state = 0;
+	struct usb_serial_port *port = tty->driver_data;
+	struct metrousb_private *metro_priv = usb_get_serial_port_data(port);
+	unsigned long flags = 0;
+
+	dbg("METRO-USB - %s - port number=%d", __FUNCTION__, port->number);
+
+	spin_lock_irqsave(&metro_priv->lock, flags);
+	control_state = metro_priv->control_state;
+	spin_unlock_irqrestore(&metro_priv->lock, flags);
+
+	return control_state;
+}
+
+/* ----------------------------------------------------------------------------------------------
+  Description:
+	Set the serial port control line states.
+
+  Input:
+	struct usb_serial_port *: pointer to a usb_serial_port structure.
+	struct file *: pointer to a file structure.
+	unsigned int: line state to set.
+	unsigned int: line state to clear.
+
+  Output:
+	int: Returns the state of the control lines.
+*/
+static int metrousb_tiocmset (struct tty_struct *tty,
+			       unsigned int set, unsigned int clear)
+{
+	struct usb_serial_port *port = tty->driver_data;
+	struct usb_serial *serial = port->serial;
+	struct metrousb_private *metro_priv = usb_get_serial_port_data(port);
+	unsigned long flags = 0;
+	unsigned long control_state = 0;
+
+	dbg("METRO-USB - %s - port number=%d, set=%d, clear=%d", __FUNCTION__, port->number, set, clear);
+
+	spin_lock_irqsave(&metro_priv->lock, flags);
+	control_state = metro_priv->control_state;
+
+	// Set the RTS and DTR values.
+	if (set & TIOCM_RTS)
+		control_state |= TIOCM_RTS;
+	if (set & TIOCM_DTR)
+		control_state |= TIOCM_DTR;
+	if (clear & TIOCM_RTS)
+		control_state &= ~TIOCM_RTS;
+	if (clear & TIOCM_DTR)
+		control_state &= ~TIOCM_DTR;
+
+	metro_priv->control_state = control_state;
+	spin_unlock_irqrestore(&metro_priv->lock, flags);
+	return metrousb_set_modem_ctrl(serial, control_state);
+}
+
+/* ----------------------------------------------------------------------------------------------
+  Description:
+	Set the serial port unthrottle to resume reading from the port.
+
+  Input:
+	struct usb_serial_port *: pointer to a usb_serial_port structure.
+
+  Output:
+	None:
+*/
+static void metrousb_unthrottle (struct tty_struct *tty)
+{
+	struct usb_serial_port *port = tty->driver_data;
+	struct metrousb_private *metro_priv = usb_get_serial_port_data(port);
+	unsigned long flags = 0;
+	int result = 0;
+
+	dbg("METRO-USB - %s - port number=%d", __FUNCTION__, port->number);
+
+	/* Set the private information for the port to resume reading data. */
+	spin_lock_irqsave(&metro_priv->lock, flags);
+	metro_priv->throttled = 0;
+	spin_unlock_irqrestore(&metro_priv->lock, flags);
+
+	/* Submit the urb to read from the port. */
+	port->interrupt_in_urb->dev = port->serial->dev;
+	result = usb_submit_urb(port->interrupt_in_urb, GFP_ATOMIC);
+	if (result) {
+		dbg("METRO-USB - %s - failed submitting interrupt in urb for port number=%d, error code=%d",
+			__FUNCTION__, port->number, result);
+	}
+}
+
+/* Standard module function. */
+module_init(metrousb_init);
+module_exit(metrousb_exit);
+MODULE_LICENSE("GPL");
+MODULE_AUTHOR( "Philip Nicastro" );
+MODULE_AUTHOR( "Aleksey Babahin <tamerlan311@gmail.com>" );
+MODULE_DESCRIPTION( DRIVER_DESC );
+
+/* Module input parameters */
+module_param(debug, bool, S_IRUGO | S_IWUSR);
+MODULE_PARM_DESC(debug, "Print debug info (bool 1=on, 0=off)");
+
+module_param(vendor, ushort, 0);
+MODULE_PARM_DESC(vendor, "User specified vendor ID (ushort)");
+
+module_param(product, ushort, 0);
+MODULE_PARM_DESC(product, "User specified product ID (ushort)");
+
+
+
+
