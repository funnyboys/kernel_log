commit 34c7ed72f4f04e73901ca6ec2e1db6c040495935
Author: Marek Szyprowski <m.szyprowski@samsung.com>
Date:   Thu Aug 29 07:30:27 2019 +0200

    usb: core: phy: add support for PHY calibration
    
    Some PHYs (for example Exynos5 USB3.0 DRD PHY) require calibration to be
    done after every USB HCD reset. Generic PHY framework has been already
    extended with phy_calibrate() function in commit 36914111e682 ("drivers:
    phy: add calibrate method"). This patch adds support for it to generic
    PHY handling code in USB HCD core.
    
    Signed-off-by: Marek Szyprowski <m.szyprowski@samsung.com>
    Tested-by: Anand Moon <linux.amoon@gmail.com>
    Tested-by: Jochen Sprickerhof <jochen@sprickerhof.de>
    Link: https://lore.kernel.org/r/20190829053028.32438-2-m.szyprowski@samsung.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/usb/core/phy.h b/drivers/usb/core/phy.h
index dad564e2d2d4..20a267cd986b 100644
--- a/drivers/usb/core/phy.h
+++ b/drivers/usb/core/phy.h
@@ -18,6 +18,7 @@ int usb_phy_roothub_exit(struct usb_phy_roothub *phy_roothub);
 
 int usb_phy_roothub_set_mode(struct usb_phy_roothub *phy_roothub,
 			     enum phy_mode mode);
+int usb_phy_roothub_calibrate(struct usb_phy_roothub *phy_roothub);
 int usb_phy_roothub_power_on(struct usb_phy_roothub *phy_roothub);
 void usb_phy_roothub_power_off(struct usb_phy_roothub *phy_roothub);
 

commit b97a31348379f7beed7664a8d4eab491e227c165
Author: Miquel Raynal <miquel.raynal@bootlin.com>
Date:   Tue Jan 29 10:23:40 2019 +0100

    usb: core: comply to PHY framework
    
    Current implementation of the USB core does not take into account the
    new PHY framework. Correct the situation by adding a call to
    phy_set_mode() before phy_power_on().
    
    Signed-off-by: Miquel Raynal <miquel.raynal@bootlin.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/usb/core/phy.h b/drivers/usb/core/phy.h
index 88a3c037e9df..dad564e2d2d4 100644
--- a/drivers/usb/core/phy.h
+++ b/drivers/usb/core/phy.h
@@ -16,6 +16,8 @@ struct usb_phy_roothub *usb_phy_roothub_alloc(struct device *dev);
 int usb_phy_roothub_init(struct usb_phy_roothub *phy_roothub);
 int usb_phy_roothub_exit(struct usb_phy_roothub *phy_roothub);
 
+int usb_phy_roothub_set_mode(struct usb_phy_roothub *phy_roothub,
+			     enum phy_mode mode);
 int usb_phy_roothub_power_on(struct usb_phy_roothub *phy_roothub);
 void usb_phy_roothub_power_off(struct usb_phy_roothub *phy_roothub);
 

commit 350f76dc063934215a877ef582206763c8a80395
Author: Martin Blumenstingl <martin.blumenstingl@googlemail.com>
Date:   Wed Apr 18 21:39:51 2018 +0200

    usb: core: phy: add the SPDX-License-Identifier and include guard
    
    This clarifies the license of the code. While here also add an include
    guard to the header file.
    
    Fixes: 07dbff0ddbd86c ("usb: core: add a wrapper for the USB PHYs on the HCD")
    Suggested-by: Masahiro Yamada <yamada.masahiro@socionext.com>
    Signed-off-by: Martin Blumenstingl <martin.blumenstingl@googlemail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/usb/core/phy.h b/drivers/usb/core/phy.h
index bbc969383074..88a3c037e9df 100644
--- a/drivers/usb/core/phy.h
+++ b/drivers/usb/core/phy.h
@@ -1,3 +1,13 @@
+/* SPDX-License-Identifier: GPL-2.0+ */
+/*
+ * USB roothub wrapper
+ *
+ * Copyright (C) 2018 Martin Blumenstingl <martin.blumenstingl@googlemail.com>
+ */
+
+#ifndef __USB_CORE_PHY_H_
+#define __USB_CORE_PHY_H_
+
 struct device;
 struct usb_phy_roothub;
 
@@ -13,3 +23,5 @@ int usb_phy_roothub_suspend(struct device *controller_dev,
 			    struct usb_phy_roothub *phy_roothub);
 int usb_phy_roothub_resume(struct device *controller_dev,
 			   struct usb_phy_roothub *phy_roothub);
+
+#endif /* __USB_CORE_PHY_H_ */

commit 9d3cd19be3e2675f5b30172f3305f79ddcb91023
Author: Martin Blumenstingl <martin.blumenstingl@googlemail.com>
Date:   Wed Apr 18 21:39:50 2018 +0200

    usb: core: phy: add missing forward declaration for "struct device"
    
    Currently hcd.c is the only consumer of the usb_phy_roothub logic. This
    already includes the required header files so struct device is known.
    However, future consumers might not know about struct device.
    Add a forward declaration for struct device to fix potential future
    consumers which don't include any of the struct device API headers.
    
    Fixes: 07dbff0ddbd86c ("usb: core: add a wrapper for the USB PHYs on the HCD")
    Suggested-by: Masahiro Yamada <yamada.masahiro@socionext.com>
    Signed-off-by: Martin Blumenstingl <martin.blumenstingl@googlemail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/usb/core/phy.h b/drivers/usb/core/phy.h
index 605555901d44..bbc969383074 100644
--- a/drivers/usb/core/phy.h
+++ b/drivers/usb/core/phy.h
@@ -1,3 +1,4 @@
+struct device;
 struct usb_phy_roothub;
 
 struct usb_phy_roothub *usb_phy_roothub_alloc(struct device *dev);

commit f0e36d478faf37fb26413b2530d04e6b30af3834
Author: Martin Blumenstingl <martin.blumenstingl@googlemail.com>
Date:   Wed Apr 18 21:39:48 2018 +0200

    usb: core: use phy_exit during suspend if wake up is not supported
    
    If the USB controller can wake up the system (which is the case for
    example with the Mediatek USB3 IP) then we must not call phy_exit during
    suspend to ensure that the USB controller doesn't have to re-enumerate
    the devices during resume.
    However, if the USB controller cannot wake up the system (which is the
    case for example on various TI platforms using a dwc3 controller) then
    we must call phy_exit during suspend. Otherwise the PHY driver keeps the
    clocks enabled, which prevents the system from reaching the lowest power
    levels in the suspend state.
    
    Solve this by introducing two new functions in the PHY wrapper which are
    dedicated to the suspend and resume handling.
    If the controller can wake up the system the new usb_phy_roothub_suspend
    function will simply call usb_phy_roothub_power_off. However, if wake up
    is not supported by the controller it will also call
    usb_phy_roothub_exit.
    The also new usb_phy_roothub_resume function takes care of calling
    usb_phy_roothub_init (if the controller can't wake up the system) in
    addition to usb_phy_roothub_power_on.
    
    Fixes: 07dbff0ddbd86c ("usb: core: add a wrapper for the USB PHYs on the HCD")
    Fixes: 178a0bce05cbc1 ("usb: core: hcd: integrate the PHY wrapper into the HCD core")
    Reported-by: Roger Quadros <rogerq@ti.com>
    Suggested-by: Roger Quadros <rogerq@ti.com>
    Suggested-by: Chunfeng Yun <chunfeng.yun@mediatek.com>
    Signed-off-by: Martin Blumenstingl <martin.blumenstingl@googlemail.com>
    Tested-by: Chunfeng Yun <chunfeng.yun@mediatek.com>
    Reviewed-by: Roger Quadros <rogerq@ti.com>
    Tested-by: Keerthy <j-keerthy@ti.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/usb/core/phy.h b/drivers/usb/core/phy.h
index eb31253201ad..605555901d44 100644
--- a/drivers/usb/core/phy.h
+++ b/drivers/usb/core/phy.h
@@ -7,3 +7,8 @@ int usb_phy_roothub_exit(struct usb_phy_roothub *phy_roothub);
 
 int usb_phy_roothub_power_on(struct usb_phy_roothub *phy_roothub);
 void usb_phy_roothub_power_off(struct usb_phy_roothub *phy_roothub);
+
+int usb_phy_roothub_suspend(struct device *controller_dev,
+			    struct usb_phy_roothub *phy_roothub);
+int usb_phy_roothub_resume(struct device *controller_dev,
+			   struct usb_phy_roothub *phy_roothub);

commit 63cb03f5c11eef2c08b5812f4533ba87cf778fa8
Author: Martin Blumenstingl <martin.blumenstingl@googlemail.com>
Date:   Wed Apr 18 21:39:47 2018 +0200

    usb: core: split usb_phy_roothub_{init,alloc}
    
    Before this patch usb_phy_roothub_init served two purposes (from a
    caller's point of view - like hcd.c):
    - parsing the PHYs and allocating the list entries
    - calling phy_init on each list entry
    
    While this worked so far it has one disadvantage: if we need to call
    phy_init for each PHY instance then the existing code cannot be re-used.
    Solve this by splitting off usb_phy_roothub_alloc which only parses the
    PHYs and allocates the list entries.
    usb_phy_roothub_init then gets a struct usb_phy_roothub and only calls
    phy_init on each PHY instance (along with the corresponding cleanup if
    that failed somewhere).
    
    This is a preparation step for adding proper suspend support for some
    hardware that requires phy_exit to be called during suspend and phy_init
    to be called during resume.
    
    Signed-off-by: Martin Blumenstingl <martin.blumenstingl@googlemail.com>
    Tested-by: Chunfeng Yun <chunfeng.yun@mediatek.com>
    Reviewed-by: Roger Quadros <rogerq@ti.com>
    Tested-by: Keerthy <j-keerthy@ti.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/usb/core/phy.h b/drivers/usb/core/phy.h
index 6fde59bfbff8..eb31253201ad 100644
--- a/drivers/usb/core/phy.h
+++ b/drivers/usb/core/phy.h
@@ -1,6 +1,8 @@
 struct usb_phy_roothub;
 
-struct usb_phy_roothub *usb_phy_roothub_init(struct device *dev);
+struct usb_phy_roothub *usb_phy_roothub_alloc(struct device *dev);
+
+int usb_phy_roothub_init(struct usb_phy_roothub *phy_roothub);
 int usb_phy_roothub_exit(struct usb_phy_roothub *phy_roothub);
 
 int usb_phy_roothub_power_on(struct usb_phy_roothub *phy_roothub);

commit 07dbff0ddbd86c08c42088e9f996c2650095d684
Author: Martin Blumenstingl <martin.blumenstingl@googlemail.com>
Date:   Sat Mar 3 22:43:04 2018 +0100

    usb: core: add a wrapper for the USB PHYs on the HCD
    
    Many SoC platforms have separate devices for the USB PHY which are
    registered through the generic PHY framework. These PHYs have to be
    enabled to make the USB controller actually work. They also have to be
    disabled again on shutdown/suspend.
    
    Currently (at least) the following HCI platform drivers are using custom
    code to obtain all PHYs via devicetree for the roothub/controller and
    disable/enable them when required:
    - ehci-platform.c has ehci_platform_power_{on,off}
    - xhci-mtk.c has xhci_mtk_phy_{init,exit,power_on,power_off}
    - ohci-platform.c has ohci_platform_power_{on,off}
    
    With this new wrapper the USB PHYs can be specified directly in the
    USB controller's devicetree node (just like on the drivers listed
    above). This allows SoCs like the Amlogic Meson GXL family to operate
    correctly once this is wired up correctly. These SoCs use a dwc3
    controller and require all USB PHYs to be initialized (if one of the USB
    PHYs it not initialized then none of USB port works at all).
    
    Signed-off-by: Martin Blumenstingl <martin.blumenstingl@googlemail.com>
    Tested-by: Yixun Lan <yixun.lan@amlogic.com>
    Cc: Chunfeng Yun <chunfeng.yun@mediatek.com>
    Tested-by: Neil Armstrong <narmstrong@baylibre.con>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/usb/core/phy.h b/drivers/usb/core/phy.h
new file mode 100644
index 000000000000..6fde59bfbff8
--- /dev/null
+++ b/drivers/usb/core/phy.h
@@ -0,0 +1,7 @@
+struct usb_phy_roothub;
+
+struct usb_phy_roothub *usb_phy_roothub_init(struct device *dev);
+int usb_phy_roothub_exit(struct usb_phy_roothub *phy_roothub);
+
+int usb_phy_roothub_power_on(struct usb_phy_roothub *phy_roothub);
+void usb_phy_roothub_power_off(struct usb_phy_roothub *phy_roothub);
