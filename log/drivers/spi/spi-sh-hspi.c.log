commit e74dc5c763448004ec8add422e9db53ee246acce
Author: Alexandru Ardelean <alexandru.ardelean@analog.com>
Date:   Thu Sep 26 13:51:37 2019 +0300

    spi: use new `spi_transfer_delay_exec` helper where straightforward
    
    For many places in the spi drivers, using the new `spi_transfer_delay`
    helper is straightforward.
    It's just replacing:
    ```
      if (t->delay_usecs)
         udelay(t->delay_usecs);
    ```
    with `spi_transfer_delay(t)` which handles both `delay_usecs` and the new
    `delay` field.
    
    This change replaces in all places (in the spi drivers)  where this change
    is simple.
    
    Signed-off-by: Alexandru Ardelean <alexandru.ardelean@analog.com>
    Link: https://lore.kernel.org/r/20190926105147.7839-10-alexandru.ardelean@analog.com
    Signed-off-by: Mark Brown <broonie@kernel.org>

diff --git a/drivers/spi/spi-sh-hspi.c b/drivers/spi/spi-sh-hspi.c
index 7f73f91d412a..a62034e2a7cb 100644
--- a/drivers/spi/spi-sh-hspi.c
+++ b/drivers/spi/spi-sh-hspi.c
@@ -190,8 +190,7 @@ static int hspi_transfer_one_message(struct spi_controller *ctlr,
 
 		msg->actual_length += t->len;
 
-		if (t->delay_usecs)
-			udelay(t->delay_usecs);
+		spi_transfer_delay_exec(t);
 
 		if (cs_change) {
 			ndelay(nsecs);

commit 5a0e577fc9155fafc3bfc9fac025ebfad4f4bf14
Author: Geert Uytterhoeven <geert+renesas@glider.be>
Date:   Fri Feb 8 10:09:08 2019 +0100

    spi: sh-hspi: Replace spi_master by spi_controller
    
    As of commit 8caab75fd2c2a926 ('spi: Generalize SPI "master" to
    "controller"'), the old master-centric names are compatibility wrappers
    for the new controller-centric names.
    
    Signed-off-by: Geert Uytterhoeven <geert+renesas@glider.be>
    Signed-off-by: Mark Brown <broonie@kernel.org>

diff --git a/drivers/spi/spi-sh-hspi.c b/drivers/spi/spi-sh-hspi.c
index 7159cb99dbe9..7f73f91d412a 100644
--- a/drivers/spi/spi-sh-hspi.c
+++ b/drivers/spi/spi-sh-hspi.c
@@ -35,7 +35,7 @@
 
 struct hspi_priv {
 	void __iomem *addr;
-	struct spi_master *master;
+	struct spi_controller *ctlr;
 	struct device *dev;
 	struct clk *clk;
 };
@@ -140,10 +140,10 @@ static void hspi_hw_setup(struct hspi_priv *hspi,
 	hspi_write(hspi, SPSCR, 0x21);	/* master mode / CS control */
 }
 
-static int hspi_transfer_one_message(struct spi_master *master,
+static int hspi_transfer_one_message(struct spi_controller *ctlr,
 				     struct spi_message *msg)
 {
-	struct hspi_priv *hspi = spi_master_get_devdata(master);
+	struct hspi_priv *hspi = spi_controller_get_devdata(ctlr);
 	struct spi_transfer *t;
 	u32 tx;
 	u32 rx;
@@ -205,7 +205,7 @@ static int hspi_transfer_one_message(struct spi_master *master,
 		ndelay(nsecs);
 		hspi_hw_cs_disable(hspi);
 	}
-	spi_finalize_current_message(master);
+	spi_finalize_current_message(ctlr);
 
 	return ret;
 }
@@ -213,7 +213,7 @@ static int hspi_transfer_one_message(struct spi_master *master,
 static int hspi_probe(struct platform_device *pdev)
 {
 	struct resource *res;
-	struct spi_master *master;
+	struct spi_controller *ctlr;
 	struct hspi_priv *hspi;
 	struct clk *clk;
 	int ret;
@@ -225,8 +225,8 @@ static int hspi_probe(struct platform_device *pdev)
 		return -EINVAL;
 	}
 
-	master = spi_alloc_master(&pdev->dev, sizeof(*hspi));
-	if (!master)
+	ctlr = spi_alloc_master(&pdev->dev, sizeof(*hspi));
+	if (!ctlr)
 		return -ENOMEM;
 
 	clk = clk_get(&pdev->dev, NULL);
@@ -236,11 +236,11 @@ static int hspi_probe(struct platform_device *pdev)
 		goto error0;
 	}
 
-	hspi = spi_master_get_devdata(master);
+	hspi = spi_controller_get_devdata(ctlr);
 	platform_set_drvdata(pdev, hspi);
 
 	/* init hspi */
-	hspi->master	= master;
+	hspi->ctlr	= ctlr;
 	hspi->dev	= &pdev->dev;
 	hspi->clk	= clk;
 	hspi->addr	= devm_ioremap(hspi->dev,
@@ -252,16 +252,16 @@ static int hspi_probe(struct platform_device *pdev)
 
 	pm_runtime_enable(&pdev->dev);
 
-	master->bus_num		= pdev->id;
-	master->mode_bits	= SPI_CPOL | SPI_CPHA;
-	master->dev.of_node	= pdev->dev.of_node;
-	master->auto_runtime_pm = true;
-	master->transfer_one_message		= hspi_transfer_one_message;
-	master->bits_per_word_mask = SPI_BPW_MASK(8);
+	ctlr->bus_num = pdev->id;
+	ctlr->mode_bits	= SPI_CPOL | SPI_CPHA;
+	ctlr->dev.of_node = pdev->dev.of_node;
+	ctlr->auto_runtime_pm = true;
+	ctlr->transfer_one_message = hspi_transfer_one_message;
+	ctlr->bits_per_word_mask = SPI_BPW_MASK(8);
 
-	ret = devm_spi_register_master(&pdev->dev, master);
+	ret = devm_spi_register_controller(&pdev->dev, ctlr);
 	if (ret < 0) {
-		dev_err(&pdev->dev, "spi_register_master error.\n");
+		dev_err(&pdev->dev, "devm_spi_register_controller error.\n");
 		goto error2;
 	}
 
@@ -272,7 +272,7 @@ static int hspi_probe(struct platform_device *pdev)
  error1:
 	clk_put(clk);
  error0:
-	spi_master_put(master);
+	spi_controller_put(ctlr);
 
 	return ret;
 }

commit 88e7e0a8df1ff1ceac0a4b487e25860446bdbfb2
Author: Geert Uytterhoeven <geert+renesas@glider.be>
Date:   Fri Jan 18 15:11:05 2019 +0100

    spi: sh-hspi: Remove error messages on out-of-memory conditions
    
    There is no need to print an error message when memory allocations or
    related operations fail, as the core will take care of that.
    
    Signed-off-by: Geert Uytterhoeven <geert+renesas@glider.be>
    Signed-off-by: Mark Brown <broonie@kernel.org>

diff --git a/drivers/spi/spi-sh-hspi.c b/drivers/spi/spi-sh-hspi.c
index dc0926e43665..7159cb99dbe9 100644
--- a/drivers/spi/spi-sh-hspi.c
+++ b/drivers/spi/spi-sh-hspi.c
@@ -226,10 +226,8 @@ static int hspi_probe(struct platform_device *pdev)
 	}
 
 	master = spi_alloc_master(&pdev->dev, sizeof(*hspi));
-	if (!master) {
-		dev_err(&pdev->dev, "spi_alloc_master error.\n");
+	if (!master)
 		return -ENOMEM;
-	}
 
 	clk = clk_get(&pdev->dev, NULL);
 	if (IS_ERR(clk)) {
@@ -248,7 +246,6 @@ static int hspi_probe(struct platform_device *pdev)
 	hspi->addr	= devm_ioremap(hspi->dev,
 				       res->start, resource_size(res));
 	if (!hspi->addr) {
-		dev_err(&pdev->dev, "ioremap error.\n");
 		ret = -ENOMEM;
 		goto error1;
 	}

commit 9135bac325052be8a131a8a75bbcc583451ebb1f
Author: Wolfram Sang <wsa+renesas@sang-engineering.com>
Date:   Wed Aug 22 00:02:23 2018 +0200

    spi: use SPDX identifier for Renesas drivers
    
    Signed-off-by: Wolfram Sang <wsa+renesas@sang-engineering.com>
    Reviewed-by: Simon Horman <horms+renesas@verge.net.au>
    Signed-off-by: Mark Brown <broonie@kernel.org>

diff --git a/drivers/spi/spi-sh-hspi.c b/drivers/spi/spi-sh-hspi.c
index 20e800e70442..dc0926e43665 100644
--- a/drivers/spi/spi-sh-hspi.c
+++ b/drivers/spi/spi-sh-hspi.c
@@ -1,3 +1,4 @@
+// SPDX-License-Identifier: GPL-2.0
 /*
  * SuperH HSPI bus driver
  *
@@ -7,15 +8,6 @@
  * Based on pxa2xx_spi.c:
  * Copyright (C) 2011 Renesas Solutions Corp.
  * Copyright (C) 2005 Stephen Street / StreetFire Sound Labs
- *
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation; version 2 of the License.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
  */
 
 #include <linux/clk.h>
@@ -316,6 +308,6 @@ static struct platform_driver hspi_driver = {
 module_platform_driver(hspi_driver);
 
 MODULE_DESCRIPTION("SuperH HSPI bus driver");
-MODULE_LICENSE("GPL");
+MODULE_LICENSE("GPL v2");
 MODULE_AUTHOR("Kuninori Morimoto <kuninori.morimoto.gx@renesas.com>");
 MODULE_ALIAS("platform:sh-hspi");

commit 2c658e212ce7e40ace56d9441c8c5634d4d420e3
Author: Jarkko Nikula <jarkko.nikula@linux.intel.com>
Date:   Thu Dec 18 16:12:08 2014 +0200

    spi: Remove FSF mailing addresses
    
    Signed-off-by: Jarkko Nikula <jarkko.nikula@linux.intel.com>
    Signed-off-by: Mark Brown <broonie@kernel.org>

diff --git a/drivers/spi/spi-sh-hspi.c b/drivers/spi/spi-sh-hspi.c
index fc29233d0650..20e800e70442 100644
--- a/drivers/spi/spi-sh-hspi.c
+++ b/drivers/spi/spi-sh-hspi.c
@@ -16,11 +16,6 @@
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
- *
  */
 
 #include <linux/clk.h>

commit 14ac00e033c57983032993d3b7b3f70b16a9fdbd
Author: Wolfram Sang <wsa@the-dreams.de>
Date:   Mon Oct 20 16:21:36 2014 +0200

    spi: drop owner assignment from platform_drivers
    
    A platform_driver does not need to set an owner, it will be populated by the
    driver core.
    
    Signed-off-by: Wolfram Sang <wsa@the-dreams.de>

diff --git a/drivers/spi/spi-sh-hspi.c b/drivers/spi/spi-sh-hspi.c
index 94b5faed21e2..fc29233d0650 100644
--- a/drivers/spi/spi-sh-hspi.c
+++ b/drivers/spi/spi-sh-hspi.c
@@ -315,7 +315,6 @@ static struct platform_driver hspi_driver = {
 	.remove = hspi_remove,
 	.driver = {
 		.name = "sh-hspi",
-		.owner = THIS_MODULE,
 		.of_match_table = hspi_of_match,
 	},
 };

commit 8e3489f3b6c159079cf690d0913409e1178ccf2f
Author: Jingoo Han <jg1.han@samsung.com>
Date:   Tue Jun 3 21:04:59 2014 +0900

    spi: sh-hspi: Make of_device_id array const
    
    Make of_device_id array const, because all OF functions handle
    it as const.
    
    Signed-off-by: Jingoo Han <jg1.han@samsung.com>
    Acked-by: Geert Uytterhoeven <geert@linux-m68k.org>
    Acked-by: Kuninori Morimoto <kuninori.morimoto.gx@renesas.com>
    Signed-off-by: Mark Brown <broonie@linaro.org>

diff --git a/drivers/spi/spi-sh-hspi.c b/drivers/spi/spi-sh-hspi.c
index c8e795ef2e13..94b5faed21e2 100644
--- a/drivers/spi/spi-sh-hspi.c
+++ b/drivers/spi/spi-sh-hspi.c
@@ -304,7 +304,7 @@ static int hspi_remove(struct platform_device *pdev)
 	return 0;
 }
 
-static struct of_device_id hspi_of_match[] = {
+static const struct of_device_id hspi_of_match[] = {
 	{ .compatible = "renesas,hspi", },
 	{ /* sentinel */ }
 };

commit 4a4dd7d80e11f62cacf49bd90d9448a218188af7
Author: Simon Horman <horms+renesas@verge.net.au>
Date:   Mon Apr 14 10:41:38 2014 +0900

    spi: sh-hspi: Do not specifically request shyway_clk clock
    
    Rather than requesting the shyway_clk call clk_get with
    the device and a NULL con_id.
    
    This is in keeping with the way that clk_get() is called
    on other drivers used by Renesas Gen 1 SoCs. And I believe
    it is compatible with supplying clocks via DT, unlike the current code.
    
    It appears to me that the two uses of this driver are
    the r8a7778 and r8a7779 SoCs.
    
    The r8a7779 already has clocks setup to allow this driver to continue to work
    with this change applied.
    
    The r8a7778 has clocks incorrectly setup to allow this driver to continue
    to work with this change applied. This problem is addressed in
    "ARM: shmobile: r8a7778: Use clks as MSTP007 parent" which is thus
    a pre-requisite of this patch.
    
    Signed-off-by: Simon Horman <horms+renesas@verge.net.au>
    Signed-off-by: Mark Brown <broonie@linaro.org>

diff --git a/drivers/spi/spi-sh-hspi.c b/drivers/spi/spi-sh-hspi.c
index 9009456bdf4d..c8e795ef2e13 100644
--- a/drivers/spi/spi-sh-hspi.c
+++ b/drivers/spi/spi-sh-hspi.c
@@ -244,9 +244,9 @@ static int hspi_probe(struct platform_device *pdev)
 		return -ENOMEM;
 	}
 
-	clk = clk_get(NULL, "shyway_clk");
+	clk = clk_get(&pdev->dev, NULL);
 	if (IS_ERR(clk)) {
-		dev_err(&pdev->dev, "shyway_clk is required\n");
+		dev_err(&pdev->dev, "couldn't get clock\n");
 		ret = -EINVAL;
 		goto error0;
 	}

commit 81235b4ea3aa2e942ac37979433f41b748f12da1
Merge: 17523680647b 382ab20e8138 09e99bca8324 3abf0edd2c16 e2a0ba547ba3 ed8eb250d7b0 a82ba3a318dd 4189a728ae26
Author: Mark Brown <broonie@linaro.org>
Date:   Sun Mar 30 00:51:34 2014 +0000

    Merge remote-tracking branches 'spi/topic/s3c64xx', 'spi/topic/sc18is602', 'spi/topic/sh-hspi', 'spi/topic/sh-msiof', 'spi/topic/sh-sci', 'spi/topic/sirf' and 'spi/topic/spidev' into spi-next

commit 3abf0edd2c16326727326c35704ab9cad0529eda
Author: Geert Uytterhoeven <geert+renesas@linux-m68k.org>
Date:   Tue Mar 11 10:59:10 2014 +0100

    spi: sh-hspi: Add missing call to pm_runtime_disable() in failure path
    
    Signed-off-by: Geert Uytterhoeven <geert+renesas@linux-m68k.org>
    Signed-off-by: Mark Brown <broonie@linaro.org>

diff --git a/drivers/spi/spi-sh-hspi.c b/drivers/spi/spi-sh-hspi.c
index 180eecf72428..89cfedf6d21a 100644
--- a/drivers/spi/spi-sh-hspi.c
+++ b/drivers/spi/spi-sh-hspi.c
@@ -279,11 +279,13 @@ static int hspi_probe(struct platform_device *pdev)
 	ret = devm_spi_register_master(&pdev->dev, master);
 	if (ret < 0) {
 		dev_err(&pdev->dev, "spi_register_master error.\n");
-		goto error1;
+		goto error2;
 	}
 
 	return 0;
 
+ error2:
+	pm_runtime_disable(&pdev->dev);
  error1:
 	clk_put(clk);
  error0:

commit e428a420078eac26039b53af464355332809be52
Author: Axel Lin <axel.lin@ingics.com>
Date:   Sun Mar 2 23:01:50 2014 +0800

    spi: sh-hspi: Remove duplicate code to set default transfer speed
    
    In the implementation of __spi_validate(), spi core will use spi device's max
    speed as default transfer speed if it is not set for this transfer.
    So we can remove the same logic in hspi_hw_setup().
    
    Signed-off-by: Axel Lin <axel.lin@ingics.com>
    Acked-by: Geert Uytterhoeven <geert@linux-m68k.org>
    Signed-off-by: Mark Brown <broonie@linaro.org>

diff --git a/drivers/spi/spi-sh-hspi.c b/drivers/spi/spi-sh-hspi.c
index dad800b9887f..180eecf72428 100644
--- a/drivers/spi/spi-sh-hspi.c
+++ b/drivers/spi/spi-sh-hspi.c
@@ -111,14 +111,9 @@ static void hspi_hw_setup(struct hspi_priv *hspi,
 {
 	struct spi_device *spi = msg->spi;
 	struct device *dev = hspi->dev;
-	u32 target_rate;
 	u32 spcr, idiv_clk;
 	u32 rate, best_rate, min, tmp;
 
-	target_rate = t ? t->speed_hz : 0;
-	if (!target_rate)
-		target_rate = spi->max_speed_hz;
-
 	/*
 	 * find best IDIV/CLKCx settings
 	 */
@@ -138,7 +133,7 @@ static void hspi_hw_setup(struct hspi_priv *hspi,
 		rate /= (((idiv_clk & 0x1F) + 1) * 2);
 
 		/* save best settings */
-		tmp = abs(target_rate - rate);
+		tmp = abs(t->speed_hz - rate);
 		if (tmp < min) {
 			min = tmp;
 			spcr = idiv_clk;
@@ -151,7 +146,7 @@ static void hspi_hw_setup(struct hspi_priv *hspi,
 	if (spi->mode & SPI_CPOL)
 		spcr |= 1 << 6;
 
-	dev_dbg(dev, "speed %d/%d\n", target_rate, best_rate);
+	dev_dbg(dev, "speed %d/%d\n", t->speed_hz, best_rate);
 
 	hspi_write(hspi, SPCR, spcr);
 	hspi_write(hspi, SPSR, 0x0);

commit 80d68ca5a52176a140e1daa527d0b698feb69c83
Author: Axel Lin <axel.lin@ingics.com>
Date:   Thu Feb 27 10:27:30 2014 +0800

    spi: sh-hspi: Remove hspi_cleanup function
    
    hspi_cleanup() is doing nothing except print a non-useful debug message,
    so remove it.  Also remove unused hspi2info macro.
    
    Signed-off-by: Axel Lin <axel.lin@ingics.com>
    Acked-by: Geert Uytterhoeven <geert@linux-m68k.org>
    Signed-off-by: Mark Brown <broonie@linaro.org>

diff --git a/drivers/spi/spi-sh-hspi.c b/drivers/spi/spi-sh-hspi.c
index dbd2c44f95e9..dad800b9887f 100644
--- a/drivers/spi/spi-sh-hspi.c
+++ b/drivers/spi/spi-sh-hspi.c
@@ -46,8 +46,6 @@
 /* SPSR */
 #define RXFL	(1 << 2)
 
-#define hspi2info(h)	(h->dev->platform_data)
-
 struct hspi_priv {
 	void __iomem *addr;
 	struct spi_master *master;
@@ -230,14 +228,6 @@ static int hspi_transfer_one_message(struct spi_master *master,
 	return ret;
 }
 
-static void hspi_cleanup(struct spi_device *spi)
-{
-	struct hspi_priv *hspi = spi_master_get_devdata(spi->master);
-	struct device *dev = hspi->dev;
-
-	dev_dbg(dev, "%s cleanup\n", spi->modalias);
-}
-
 static int hspi_probe(struct platform_device *pdev)
 {
 	struct resource *res;
@@ -285,7 +275,6 @@ static int hspi_probe(struct platform_device *pdev)
 
 	master->num_chipselect	= 1;
 	master->bus_num		= pdev->id;
-	master->cleanup		= hspi_cleanup;
 	master->mode_bits	= SPI_CPOL | SPI_CPHA;
 	master->dev.of_node	= pdev->dev.of_node;
 	master->auto_runtime_pm = true;

commit 4522193698d115761f9e4f340697f86975ac8e69
Author: Axel Lin <axel.lin@ingics.com>
Date:   Wed Feb 12 22:09:52 2014 +0800

    spi: sh-hspi: Convert to let spi core validate bits_per_word
    
    Set bits_per_word_mask so spi core will reject transfers that attempt to use
    an unsupported bits_per_word value.
    
    Signed-off-by: Axel Lin <axel.lin@ingics.com>
    Signed-off-by: Mark Brown <broonie@linaro.org>

diff --git a/drivers/spi/spi-sh-hspi.c b/drivers/spi/spi-sh-hspi.c
index 82d2f922ffa0..dbd2c44f95e9 100644
--- a/drivers/spi/spi-sh-hspi.c
+++ b/drivers/spi/spi-sh-hspi.c
@@ -230,21 +230,6 @@ static int hspi_transfer_one_message(struct spi_master *master,
 	return ret;
 }
 
-static int hspi_setup(struct spi_device *spi)
-{
-	struct hspi_priv *hspi = spi_master_get_devdata(spi->master);
-	struct device *dev = hspi->dev;
-
-	if (8 != spi->bits_per_word) {
-		dev_err(dev, "bits_per_word should be 8\n");
-		return -EIO;
-	}
-
-	dev_dbg(dev, "%s setup\n", spi->modalias);
-
-	return 0;
-}
-
 static void hspi_cleanup(struct spi_device *spi)
 {
 	struct hspi_priv *hspi = spi_master_get_devdata(spi->master);
@@ -300,12 +285,13 @@ static int hspi_probe(struct platform_device *pdev)
 
 	master->num_chipselect	= 1;
 	master->bus_num		= pdev->id;
-	master->setup		= hspi_setup;
 	master->cleanup		= hspi_cleanup;
 	master->mode_bits	= SPI_CPOL | SPI_CPHA;
 	master->dev.of_node	= pdev->dev.of_node;
 	master->auto_runtime_pm = true;
 	master->transfer_one_message		= hspi_transfer_one_message;
+	master->bits_per_word_mask = SPI_BPW_MASK(8);
+
 	ret = devm_spi_register_master(&pdev->dev, master);
 	if (ret < 0) {
 		dev_err(&pdev->dev, "spi_register_master error.\n");

commit 78e39523b8c9721250b54b7fd930aeced56cf511
Author: Axel Lin <axel.lin@ingics.com>
Date:   Tue Feb 11 22:10:19 2014 +0800

    spi: Remove explictly set bus_num and num_chipselect to default setting
    
    The purpose of commit 1e8a52e18cfb
    "spi: By default setup spi_masters with 1 chipselect and dynamics bus number"
    is to avoid setting default value for bus_num and num_chipselect in spi master
    drivers. So let's remove the duplicate code.
    
    Signed-off-by: Axel Lin <axel.lin@ingics.com>
    Acked-by: Uwe Kleine-König <u.kleine-koenig@pengutronix.de>
    Acked-By: David Daney <david.daney@cavium.com>
    Acked-by: Stephen Warren <swarren@nvidia.com>
    Signed-off-by: Mark Brown <broonie@linaro.org>

diff --git a/drivers/spi/spi-sh-hspi.c b/drivers/spi/spi-sh-hspi.c
index 82d2f922ffa0..755d7cc9e72f 100644
--- a/drivers/spi/spi-sh-hspi.c
+++ b/drivers/spi/spi-sh-hspi.c
@@ -298,7 +298,6 @@ static int hspi_probe(struct platform_device *pdev)
 
 	pm_runtime_enable(&pdev->dev);
 
-	master->num_chipselect	= 1;
 	master->bus_num		= pdev->id;
 	master->setup		= hspi_setup;
 	master->cleanup		= hspi_cleanup;

commit 907e26b6f52004ecec152f5650b5dc687aed7157
Merge: 36e66bf84ff0 714bb654e975 ba1271bb05f8 c6c07b4f6d69 e1d0cd473be4 50a779982983 7c7ccc52fc7b e826a7ff69b2 84acfd4340f9 bb489841b131 9a21e4770ac8
Author: Mark Brown <broonie@linaro.org>
Date:   Thu Jan 23 13:07:09 2014 +0000

    Merge remote-tracking branches 'spi/topic/fsl-espi', 'spi/topic/gpio', 'spi/topic/hspi', 'spi/topic/mpc512x', 'spi/topic/msiof', 'spi/topic/nuc900', 'spi/topic/oc-tiny', 'spi/topic/omap', 'spi/topic/orion' and 'spi/topic/pci' into spi-linus

commit c6c07b4f6d697cab021ca07de21c4c0da2ac47b1
Author: Geert Uytterhoeven <geert+renesas@linux-m68k.org>
Date:   Sun Jan 12 14:03:38 2014 +0100

    spi: sh-hspi: Spelling s/recive/receive/
    
    Signed-off-by: Geert Uytterhoeven <geert+renesas@linux-m68k.org>
    Signed-off-by: Mark Brown <broonie@linaro.org>

diff --git a/drivers/spi/spi-sh-hspi.c b/drivers/spi/spi-sh-hspi.c
index 292567ab4c6c..2677709251ac 100644
--- a/drivers/spi/spi-sh-hspi.c
+++ b/drivers/spi/spi-sh-hspi.c
@@ -197,7 +197,7 @@ static int hspi_transfer_one_message(struct spi_master *master,
 
 			hspi_write(hspi, SPTBR, tx);
 
-			/* wait recive */
+			/* wait receive */
 			ret = hspi_status_check_timeout(hspi, 0x4, 0x4);
 			if (ret < 0)
 				break;

commit caedb997a400ab50da201dd415c3ef7cce016437
Author: Axel Lin <axel.lin@ingics.com>
Date:   Wed Jan 8 18:52:40 2014 +0800

    spi: sh-hspi: Fix modalias for sh-hspi
    
    Make the modalias matches the driver name.
    Seems the MODULE_ALIAS is copied from drivers/spi/spi-sh-spi.c.
    So both spi-sh.ko and spi-sh-hspi.ko have the same alias. Fix it.
    
    Signed-off-by: Axel Lin <axel.lin@ingics.com>
    Signed-off-by: Mark Brown <broonie@linaro.org>

diff --git a/drivers/spi/spi-sh-hspi.c b/drivers/spi/spi-sh-hspi.c
index 292567ab4c6c..40179d201966 100644
--- a/drivers/spi/spi-sh-hspi.c
+++ b/drivers/spi/spi-sh-hspi.c
@@ -353,4 +353,4 @@ module_platform_driver(hspi_driver);
 MODULE_DESCRIPTION("SuperH HSPI bus driver");
 MODULE_LICENSE("GPL");
 MODULE_AUTHOR("Kuninori Morimoto <kuninori.morimoto.gx@renesas.com>");
-MODULE_ALIAS("platform:sh_spi");
+MODULE_ALIAS("platform:sh-hspi");

commit ffd6dd3eaa1e6a0d454c08efcc996ea7014aa1d2
Merge: 6e693ff1e3ab e5f7825cda36
Author: Mark Brown <broonie@linaro.org>
Date:   Fri Oct 25 09:51:28 2013 +0100

    Merge remote-tracking branch 'spi/topic/hspi' into spi-next

commit 52d85ebb7b639448e596a8577bf981f5b139f4fd
Merge: 2ef2e60d2f4d db9371b853e7
Author: Mark Brown <broonie@linaro.org>
Date:   Fri Oct 25 09:51:21 2013 +0100

    Merge remote-tracking branch 'spi/topic/bfin' into spi-next

commit e5f7825cda366809153701e8bb89123bd973be00
Author: Kuninori Morimoto <kuninori.morimoto.gx@renesas.com>
Date:   Thu Oct 24 21:53:29 2013 -0700

    spi/hspi: add device tree support
    
    Support for loading the Renesas HSPI driver via devicetree.
    
    Signed-off-by: Kuninori Morimoto <kuninori.morimoto.gx@renesas.com>
    Signed-off-by: Mark Brown <broonie@linaro.org>

diff --git a/drivers/spi/spi-sh-hspi.c b/drivers/spi/spi-sh-hspi.c
index b9e7b5e61528..8a147d92f9eb 100644
--- a/drivers/spi/spi-sh-hspi.c
+++ b/drivers/spi/spi-sh-hspi.c
@@ -303,6 +303,7 @@ static int hspi_probe(struct platform_device *pdev)
 	master->setup		= hspi_setup;
 	master->cleanup		= hspi_cleanup;
 	master->mode_bits	= SPI_CPOL | SPI_CPHA;
+	master->dev.of_node	= pdev->dev.of_node;
 	master->auto_runtime_pm = true;
 	master->transfer_one_message		= hspi_transfer_one_message;
 	ret = spi_register_master(master);
@@ -333,12 +334,19 @@ static int hspi_remove(struct platform_device *pdev)
 	return 0;
 }
 
+static struct of_device_id hspi_of_match[] = {
+	{ .compatible = "renesas,hspi", },
+	{ /* sentinel */ }
+};
+MODULE_DEVICE_TABLE(of, hspi_of_match);
+
 static struct platform_driver hspi_driver = {
 	.probe = hspi_probe,
 	.remove = hspi_remove,
 	.driver = {
 		.name = "sh-hspi",
 		.owner = THIS_MODULE,
+		.of_match_table = hspi_of_match,
 	},
 };
 module_platform_driver(hspi_driver);

commit a29c8ae7187aee902d37d7677255de726614e43e
Author: Jingoo Han <jg1.han@samsung.com>
Date:   Mon Oct 14 10:35:42 2013 +0900

    spi: sh-hspi: Fix checkpatch issue
    
    Fix the following checkpatch warning.
    
      WARNING: space prohibited before semicolon
    
    Signed-off-by: Jingoo Han <jg1.han@samsung.com>
    Signed-off-by: Mark Brown <broonie@linaro.org>

diff --git a/drivers/spi/spi-sh-hspi.c b/drivers/spi/spi-sh-hspi.c
index e488a90a98b8..b9e7b5e61528 100644
--- a/drivers/spi/spi-sh-hspi.c
+++ b/drivers/spi/spi-sh-hspi.c
@@ -137,7 +137,7 @@ static void hspi_hw_setup(struct hspi_priv *hspi,
 			rate /= 16;
 
 		/* CLKCx calculation */
-		rate /= (((idiv_clk & 0x1F) + 1) * 2) ;
+		rate /= (((idiv_clk & 0x1F) + 1) * 2);
 
 		/* save best settings */
 		tmp = abs(target_rate - rate);

commit 268d76430d1b68c340687357ffd18b4b12d02269
Author: Kuninori Morimoto <kuninori.morimoto.gx@renesas.com>
Date:   Thu Oct 3 02:15:50 2013 -0700

    spi/hspi: fixup Runtime PM enable timing
    
    3e00a09d2fbd64f0ad98e7c8c29dbf9e038fc746
    (spi/hspi: Convert to core runtime PM)
    enabled master->auto_runtime_pm.
    Then, pm_runtime_enable() is required *before*
    spi_register_master() calling.
    This patch fixed it up.
    Kernel will hang up with "spi_master spi0: Failed to power device: -13"
    message without this patch.
    
    Signed-off-by: Kuninori Morimoto <kuninori.morimoto.gx@renesas.com>
    Signed-off-by: Mark Brown <broonie@linaro.org>

diff --git a/drivers/spi/spi-sh-hspi.c b/drivers/spi/spi-sh-hspi.c
index 0b68cb592fa4..e488a90a98b8 100644
--- a/drivers/spi/spi-sh-hspi.c
+++ b/drivers/spi/spi-sh-hspi.c
@@ -296,6 +296,8 @@ static int hspi_probe(struct platform_device *pdev)
 		goto error1;
 	}
 
+	pm_runtime_enable(&pdev->dev);
+
 	master->num_chipselect	= 1;
 	master->bus_num		= pdev->id;
 	master->setup		= hspi_setup;
@@ -309,8 +311,6 @@ static int hspi_probe(struct platform_device *pdev)
 		goto error1;
 	}
 
-	pm_runtime_enable(&pdev->dev);
-
 	return 0;
 
  error1:

commit 1c43f2ae1ee3b04f7466e31a59b19b7fa5fe4fc2
Author: Jingoo Han <jg1.han@samsung.com>
Date:   Tue Sep 24 13:47:59 2013 +0900

    spi: sh-hspi: use devm_spi_register_master()
    
    Use devm_spi_register_master() to make cleanup paths simpler.
    
    Signed-off-by: Jingoo Han <jg1.han@samsung.com>
    Acked-by: Kuninori Morimoto <kuninori.morimoto.gx@renesas.com>
    Signed-off-by: Mark Brown <broonie@linaro.org>

diff --git a/drivers/spi/spi-sh-hspi.c b/drivers/spi/spi-sh-hspi.c
index 0b68cb592fa4..97e913d225f3 100644
--- a/drivers/spi/spi-sh-hspi.c
+++ b/drivers/spi/spi-sh-hspi.c
@@ -303,7 +303,7 @@ static int hspi_probe(struct platform_device *pdev)
 	master->mode_bits	= SPI_CPOL | SPI_CPHA;
 	master->auto_runtime_pm = true;
 	master->transfer_one_message		= hspi_transfer_one_message;
-	ret = spi_register_master(master);
+	ret = devm_spi_register_master(&pdev->dev, master);
 	if (ret < 0) {
 		dev_err(&pdev->dev, "spi_register_master error.\n");
 		goto error1;
@@ -328,7 +328,6 @@ static int hspi_remove(struct platform_device *pdev)
 	pm_runtime_disable(&pdev->dev);
 
 	clk_put(hspi->clk);
-	spi_unregister_master(hspi->master);
 
 	return 0;
 }

commit 874915ed4b88fd616e6aa635bea163a470e98219
Merge: 2dc745b6ef6d 8e76fda3e1ea
Author: Mark Brown <broonie@linaro.org>
Date:   Sun Sep 1 13:49:10 2013 +0100

    Merge remote-tracking branch 'spi/topic/sh-hspi' into spi-next

commit 3e00a09d2fbd64f0ad98e7c8c29dbf9e038fc746
Author: Mark Brown <broonie@linaro.org>
Date:   Sun Jul 28 15:35:36 2013 +0100

    spi/hspi: Convert to core runtime PM
    
    Signed-off-by: Mark Brown <broonie@linaro.org>

diff --git a/drivers/spi/spi-sh-hspi.c b/drivers/spi/spi-sh-hspi.c
index 716edf999538..b95d6a9fb80e 100644
--- a/drivers/spi/spi-sh-hspi.c
+++ b/drivers/spi/spi-sh-hspi.c
@@ -99,21 +99,6 @@ static int hspi_status_check_timeout(struct hspi_priv *hspi, u32 mask, u32 val)
 /*
  *		spi master function
  */
-static int hspi_prepare_transfer(struct spi_master *master)
-{
-	struct hspi_priv *hspi = spi_master_get_devdata(master);
-
-	pm_runtime_get_sync(hspi->dev);
-	return 0;
-}
-
-static int hspi_unprepare_transfer(struct spi_master *master)
-{
-	struct hspi_priv *hspi = spi_master_get_devdata(master);
-
-	pm_runtime_put_sync(hspi->dev);
-	return 0;
-}
 
 #define hspi_hw_cs_enable(hspi)		hspi_hw_cs_ctrl(hspi, 0)
 #define hspi_hw_cs_disable(hspi)	hspi_hw_cs_ctrl(hspi, 1)
@@ -316,9 +301,8 @@ static int hspi_probe(struct platform_device *pdev)
 	master->setup		= hspi_setup;
 	master->cleanup		= hspi_cleanup;
 	master->mode_bits	= SPI_CPOL | SPI_CPHA;
-	master->prepare_transfer_hardware	= hspi_prepare_transfer;
+	master->auto_runtime_pm = true;
 	master->transfer_one_message		= hspi_transfer_one_message;
-	master->unprepare_transfer_hardware	= hspi_unprepare_transfer;
 	ret = spi_register_master(master);
 	if (ret < 0) {
 		dev_err(&pdev->dev, "spi_register_master error.\n");

commit 8e76fda3e1ea73bc47189ebc49d4228ec86fb1fa
Author: Mark Brown <broonie@linaro.org>
Date:   Sun Jul 28 15:33:51 2013 +0100

    spi/sh-hspi: Remove noisy print
    
    This adds no meaningful value.
    
    Signed-off-by: Mark Brown <broonie@linaro.org>

diff --git a/drivers/spi/spi-sh-hspi.c b/drivers/spi/spi-sh-hspi.c
index 716edf999538..daf2bf2bb59d 100644
--- a/drivers/spi/spi-sh-hspi.c
+++ b/drivers/spi/spi-sh-hspi.c
@@ -327,8 +327,6 @@ static int hspi_probe(struct platform_device *pdev)
 
 	pm_runtime_enable(&pdev->dev);
 
-	dev_info(&pdev->dev, "probed\n");
-
 	return 0;
 
  error1:

commit 3d09da11b59ade74502b246782552f9cb1eb59bd
Merge: 1728ddb2ca72 24b5a82cf570
Author: Mark Brown <broonie@linaro.org>
Date:   Wed Jun 26 16:21:02 2013 +0100

    Merge remote-tracking branch 'spi/topic/pdata' into spi-next

commit bc2bfffc3866e8c87dde19d5619262a810a51ed8
Author: Kuninori Morimoto <kuninori.morimoto.gx@renesas.com>
Date:   Sun May 26 17:59:20 2013 -0700

    spi: hspi: fixup long delay time
    
    Current HSPI driver is using msleep(20) on hspi_status_check_timeout(),
    but it was too long delay for SPI device.
    Bock-W board SPI access was too slow without this patch.
    This patch uses udelay(10) for it.
    
    Tested-by: Yusuke Goda <yusuke.goda.sx@renesas.com>
    Signed-off-by: Kuninori Morimoto <kuninori.morimoto.gx@renesas.com>
    Signed-off-by: Mark Brown <broonie@opensource.wolfsonmicro.com>

diff --git a/drivers/spi/spi-sh-hspi.c b/drivers/spi/spi-sh-hspi.c
index 60cfae51c713..eab593eaaafa 100644
--- a/drivers/spi/spi-sh-hspi.c
+++ b/drivers/spi/spi-sh-hspi.c
@@ -89,7 +89,7 @@ static int hspi_status_check_timeout(struct hspi_priv *hspi, u32 mask, u32 val)
 		if ((mask & hspi_read(hspi, SPSR)) == val)
 			return 0;
 
-		msleep(20);
+		udelay(10);
 	}
 
 	dev_err(hspi->dev, "timeout\n");

commit 24b5a82cf5709a4bc577f42fdaa61b23a7f58f08
Author: Jingoo Han <jg1.han@samsung.com>
Date:   Thu May 23 19:20:40 2013 +0900

    spi: use platform_{get,set}_drvdata()
    
    Use the wrapper functions for getting and setting the driver data using
    platform_device instead of using dev_{get,set}_drvdata() with &pdev->dev,
    so we can directly pass a struct platform_device.
    
    Signed-off-by: Jingoo Han <jg1.han@samsung.com>
    Signed-off-by: Mark Brown <broonie@opensource.wolfsonmicro.com>

diff --git a/drivers/spi/spi-sh-hspi.c b/drivers/spi/spi-sh-hspi.c
index 60cfae51c713..d3a62b9cfff3 100644
--- a/drivers/spi/spi-sh-hspi.c
+++ b/drivers/spi/spi-sh-hspi.c
@@ -297,7 +297,7 @@ static int hspi_probe(struct platform_device *pdev)
 	}
 
 	hspi = spi_master_get_devdata(master);
-	dev_set_drvdata(&pdev->dev, hspi);
+	platform_set_drvdata(pdev, hspi);
 
 	/* init hspi */
 	hspi->master	= master;
@@ -341,7 +341,7 @@ static int hspi_probe(struct platform_device *pdev)
 
 static int hspi_remove(struct platform_device *pdev)
 {
-	struct hspi_priv *hspi = dev_get_drvdata(&pdev->dev);
+	struct hspi_priv *hspi = platform_get_drvdata(pdev);
 
 	pm_runtime_disable(&pdev->dev);
 

commit d3601e56cf64a3f2df6f6380cccb3644274406e2
Author: Cyril Roelandt <tipecaml@gmail.com>
Date:   Wed Dec 12 01:24:54 2012 +0100

    spi/sh-hspi: fix return value check in hspi_probe().
    
    According to its documentation, clk_get() returns a "valid IS_ERR() condition
    containing errno", so we should call IS_ERR() rather than a NULL check.
    
    Signed-off-by: Cyril Roelandt <tipecaml@gmail.com>
    Acked-by: Kuninori Morimoto <kuninori.morimoto.gx@renesas.com>
    Signed-off-by: Grant Likely <grant.likely@secretlab.ca>

diff --git a/drivers/spi/spi-sh-hspi.c b/drivers/spi/spi-sh-hspi.c
index 32f7b55fce09..60cfae51c713 100644
--- a/drivers/spi/spi-sh-hspi.c
+++ b/drivers/spi/spi-sh-hspi.c
@@ -290,7 +290,7 @@ static int hspi_probe(struct platform_device *pdev)
 	}
 
 	clk = clk_get(NULL, "shyway_clk");
-	if (!clk) {
+	if (IS_ERR(clk)) {
 		dev_err(&pdev->dev, "shyway_clk is required\n");
 		ret = -EINVAL;
 		goto error0;

commit fd4a319bc933ae93e68935b21924a9ca4ba2d060
Author: Grant Likely <grant.likely@secretlab.ca>
Date:   Fri Dec 7 16:57:14 2012 +0000

    spi: Remove HOTPLUG section attributes
    
    CONFIG_HOTPLUG is going away as an option.  As result the __dev*
    markings will be going away.
    
    Remove use of __devinit, __devexit_p, __devinitdata, __devinitconst,
    and __devexit.
    
    Bill Pemberton has done most of the legwork on this series. I've used
    his script to purge the attributes from the drivers/gpio tree.
    
    Reported-by: Bill Pemberton <wfp5p@virginia.edu>
    Signed-off-by: Grant Likely <grant.likely@secretlab.ca>

diff --git a/drivers/spi/spi-sh-hspi.c b/drivers/spi/spi-sh-hspi.c
index 47c4beee8a0e..32f7b55fce09 100644
--- a/drivers/spi/spi-sh-hspi.c
+++ b/drivers/spi/spi-sh-hspi.c
@@ -268,7 +268,7 @@ static void hspi_cleanup(struct spi_device *spi)
 	dev_dbg(dev, "%s cleanup\n", spi->modalias);
 }
 
-static int __devinit hspi_probe(struct platform_device *pdev)
+static int hspi_probe(struct platform_device *pdev)
 {
 	struct resource *res;
 	struct spi_master *master;
@@ -339,7 +339,7 @@ static int __devinit hspi_probe(struct platform_device *pdev)
 	return ret;
 }
 
-static int __devexit hspi_remove(struct platform_device *pdev)
+static int hspi_remove(struct platform_device *pdev)
 {
 	struct hspi_priv *hspi = dev_get_drvdata(&pdev->dev);
 
@@ -353,7 +353,7 @@ static int __devexit hspi_remove(struct platform_device *pdev)
 
 static struct platform_driver hspi_driver = {
 	.probe = hspi_probe,
-	.remove = __devexit_p(hspi_remove),
+	.remove = hspi_remove,
 	.driver = {
 		.name = "sh-hspi",
 		.owner = THIS_MODULE,

commit ce3293058637ada3b1837a77c8f9c672a51b2434
Author: Phil Edworthy <phil.edworthy@renesas.com>
Date:   Thu Nov 22 14:37:27 2012 +0000

    spi/sh-hspi: add CS manual control support
    
    The current HSPI driver used automatic CS control, leading to CS
    active for each byte transmitted. This patch changes the driver
    to manual CS control, and ensures CS is active thoughout a whole
    message. Additionally, it uses the cs_change field to determine
    if CS is disabled between transfers in the message.
    
    Signed-off-by: Phil Edworthy <phil.edworthy@renesas.com>
    Signed-off-by: Grant Likely <grant.likely@secretlab.ca>

diff --git a/drivers/spi/spi-sh-hspi.c b/drivers/spi/spi-sh-hspi.c
index 796c077ef439..47c4beee8a0e 100644
--- a/drivers/spi/spi-sh-hspi.c
+++ b/drivers/spi/spi-sh-hspi.c
@@ -68,6 +68,16 @@ static u32 hspi_read(struct hspi_priv *hspi, int reg)
 	return ioread32(hspi->addr + reg);
 }
 
+static void hspi_bit_set(struct hspi_priv *hspi, int reg, u32 mask, u32 set)
+{
+	u32 val = hspi_read(hspi, reg);
+
+	val &= ~mask;
+	val |= set & mask;
+
+	hspi_write(hspi, reg, val);
+}
+
 /*
  *		transfer function
  */
@@ -105,6 +115,13 @@ static int hspi_unprepare_transfer(struct spi_master *master)
 	return 0;
 }
 
+#define hspi_hw_cs_enable(hspi)		hspi_hw_cs_ctrl(hspi, 0)
+#define hspi_hw_cs_disable(hspi)	hspi_hw_cs_ctrl(hspi, 1)
+static void hspi_hw_cs_ctrl(struct hspi_priv *hspi, int hi)
+{
+	hspi_bit_set(hspi, SPSCR, (1 << 6), (hi) << 6);
+}
+
 static void hspi_hw_setup(struct hspi_priv *hspi,
 			  struct spi_message *msg,
 			  struct spi_transfer *t)
@@ -155,7 +172,7 @@ static void hspi_hw_setup(struct hspi_priv *hspi,
 
 	hspi_write(hspi, SPCR, spcr);
 	hspi_write(hspi, SPSR, 0x0);
-	hspi_write(hspi, SPSCR, 0x1);	/* master mode */
+	hspi_write(hspi, SPSCR, 0x21);	/* master mode / CS control */
 }
 
 static int hspi_transfer_one_message(struct spi_master *master,
@@ -166,12 +183,21 @@ static int hspi_transfer_one_message(struct spi_master *master,
 	u32 tx;
 	u32 rx;
 	int ret, i;
+	unsigned int cs_change;
+	const int nsecs = 50;
 
 	dev_dbg(hspi->dev, "%s\n", __func__);
 
+	cs_change = 1;
 	ret = 0;
 	list_for_each_entry(t, &msg->transfers, transfer_list) {
-		hspi_hw_setup(hspi, msg, t);
+
+		if (cs_change) {
+			hspi_hw_setup(hspi, msg, t);
+			hspi_hw_cs_enable(hspi);
+			ndelay(nsecs);
+		}
+		cs_change = t->cs_change;
 
 		for (i = 0; i < t->len; i++) {
 
@@ -198,9 +224,22 @@ static int hspi_transfer_one_message(struct spi_master *master,
 		}
 
 		msg->actual_length += t->len;
+
+		if (t->delay_usecs)
+			udelay(t->delay_usecs);
+
+		if (cs_change) {
+			ndelay(nsecs);
+			hspi_hw_cs_disable(hspi);
+			ndelay(nsecs);
+		}
 	}
 
 	msg->status = ret;
+	if (!cs_change) {
+		ndelay(nsecs);
+		hspi_hw_cs_disable(hspi);
+	}
 	spi_finalize_current_message(master);
 
 	return ret;

commit 78bfee0e1e2e22c3062b41be8db618e7484c8e35
Author: Julia Lawall <Julia.Lawall@lip6.fr>
Date:   Sat Sep 1 18:33:08 2012 +0200

    spi: spi-sh-hspi: drop frees of devm_ alloc'd data
    
    devm free functions should not have to be explicitly used.
    
    A semantic match that finds this problem is as follows:
    (http://coccinelle.lip6.fr/)
    
    // <smpl>
    @@
    @@
    
    (
    * devm_kfree(...);
    |
    * devm_free_irq(...);
    |
    * devm_iounmap(...);
    |
    * devm_release_region(...);
    |
    * devm_release_mem_region(...);
    )
    // </smpl>
    
    Signed-off-by: Julia Lawall <Julia.Lawall@lip6.fr>
    Signed-off-by: Mark Brown <broonie@opensource.wolfsonmicro.com>

diff --git a/drivers/spi/spi-sh-hspi.c b/drivers/spi/spi-sh-hspi.c
index 934138c7b3d3..796c077ef439 100644
--- a/drivers/spi/spi-sh-hspi.c
+++ b/drivers/spi/spi-sh-hspi.c
@@ -283,7 +283,7 @@ static int __devinit hspi_probe(struct platform_device *pdev)
 	ret = spi_register_master(master);
 	if (ret < 0) {
 		dev_err(&pdev->dev, "spi_register_master error.\n");
-		goto error2;
+		goto error1;
 	}
 
 	pm_runtime_enable(&pdev->dev);
@@ -292,8 +292,6 @@ static int __devinit hspi_probe(struct platform_device *pdev)
 
 	return 0;
 
- error2:
-	devm_iounmap(hspi->dev, hspi->addr);
  error1:
 	clk_put(clk);
  error0:
@@ -310,7 +308,6 @@ static int __devexit hspi_remove(struct platform_device *pdev)
 
 	clk_put(hspi->clk);
 	spi_unregister_master(hspi->master);
-	devm_iounmap(hspi->dev, hspi->addr);
 
 	return 0;
 }

commit bb9c5687e8cd02d6f8a3aea40c118b439cb09501
Author: Kuninori Morimoto <kuninori.morimoto.gx@renesas.com>
Date:   Wed Mar 14 02:48:25 2012 -0700

    spi: sh-hspi: modify write/read method
    
    Current sh-hspi had wrong write/read method which was not linux standard.
    If spi_transfer requests tx[2], rx[2] len=2,
    then, driver should run tx[0], rx[0], tx[1], rx[1].
    But current sh-hspi runs tx[0], tx[1], rx[0], rx[1].
    This patch fixes it up.
    
    Signed-off-by: Kuninori Morimoto <kuninori.morimoto.gx@renesas.com>
    Signed-off-by: Grant Likely <grant.likely@secretlab.ca>

diff --git a/drivers/spi/spi-sh-hspi.c b/drivers/spi/spi-sh-hspi.c
index 5784734d257d..934138c7b3d3 100644
--- a/drivers/spi/spi-sh-hspi.c
+++ b/drivers/spi/spi-sh-hspi.c
@@ -86,66 +86,6 @@ static int hspi_status_check_timeout(struct hspi_priv *hspi, u32 mask, u32 val)
 	return -ETIMEDOUT;
 }
 
-static int hspi_push(struct hspi_priv *hspi, struct spi_message *msg,
-		     struct spi_transfer *t)
-{
-	int i, ret;
-	u8 *data = (u8 *)t->tx_buf;
-
-	/*
-	 * FIXME
-	 * very simple, but polling transfer
-	 */
-	for (i = 0; i < t->len; i++) {
-		/* wait remains */
-		ret = hspi_status_check_timeout(hspi, 0x1, 0x0);
-		if (ret < 0)
-			return ret;
-
-		hspi_write(hspi, SPTBR, (u32)data[i]);
-
-		/* wait recive */
-		ret = hspi_status_check_timeout(hspi, 0x4, 0x4);
-		if (ret < 0)
-			return ret;
-
-		/* dummy read */
-		hspi_read(hspi, SPRBR);
-	}
-
-	return 0;
-}
-
-static int hspi_pop(struct hspi_priv *hspi, struct spi_message *msg,
-		    struct spi_transfer *t)
-{
-	int i, ret;
-	u8 *data = (u8 *)t->rx_buf;
-
-	/*
-	 * FIXME
-	 * very simple, but polling receive
-	 */
-	for (i = 0; i < t->len; i++) {
-		/* wait remains */
-		ret = hspi_status_check_timeout(hspi, 0x1, 0);
-		if (ret < 0)
-			return ret;
-
-		/* dummy write */
-		hspi_write(hspi, SPTBR, 0x0);
-
-		/* wait recive */
-		ret = hspi_status_check_timeout(hspi, 0x4, 0x4);
-		if (ret < 0)
-			return ret;
-
-		data[i] = (u8)hspi_read(hspi, SPRBR);
-	}
-
-	return 0;
-}
-
 /*
  *		spi master function
  */
@@ -223,7 +163,9 @@ static int hspi_transfer_one_message(struct spi_master *master,
 {
 	struct hspi_priv *hspi = spi_master_get_devdata(master);
 	struct spi_transfer *t;
-	int ret;
+	u32 tx;
+	u32 rx;
+	int ret, i;
 
 	dev_dbg(hspi->dev, "%s\n", __func__);
 
@@ -231,19 +173,32 @@ static int hspi_transfer_one_message(struct spi_master *master,
 	list_for_each_entry(t, &msg->transfers, transfer_list) {
 		hspi_hw_setup(hspi, msg, t);
 
-		if (t->tx_buf) {
-			ret = hspi_push(hspi, msg, t);
+		for (i = 0; i < t->len; i++) {
+
+			/* wait remains */
+			ret = hspi_status_check_timeout(hspi, 0x1, 0);
 			if (ret < 0)
-				goto error;
-		}
-		if (t->rx_buf) {
-			ret = hspi_pop(hspi, msg, t);
+				break;
+
+			tx = 0;
+			if (t->tx_buf)
+				tx = (u32)((u8 *)t->tx_buf)[i];
+
+			hspi_write(hspi, SPTBR, tx);
+
+			/* wait recive */
+			ret = hspi_status_check_timeout(hspi, 0x4, 0x4);
 			if (ret < 0)
-				goto error;
+				break;
+
+			rx = hspi_read(hspi, SPRBR);
+			if (t->rx_buf)
+				((u8 *)t->rx_buf)[i] = (u8)rx;
+
 		}
+
 		msg->actual_length += t->len;
 	}
-error:
 
 	msg->status = ret;
 	spi_finalize_current_message(master);

commit 49e599b8595f9d33276860c6a02e05f240c4ceca
Author: Kuninori Morimoto <kuninori.morimoto.gx@renesas.com>
Date:   Wed Mar 14 02:48:05 2012 -0700

    spi: sh-hspi: control spi clock more correctly
    
    Current sh-hspi had used platform-specific speed.
    This patch remove it, and use spi_transfer specific speed.
    It removes unnecessary flags from struct sh_hspi_info,
    but struct sh_hspi_info is still exist, since sh-hspi needs
    platform info in the future.
    
    Signed-off-by: Kuninori Morimoto <kuninori.morimoto.gx@renesas.com>
    Signed-off-by: Grant Likely <grant.likely@secretlab.ca>

diff --git a/drivers/spi/spi-sh-hspi.c b/drivers/spi/spi-sh-hspi.c
index 42906731c40d..5784734d257d 100644
--- a/drivers/spi/spi-sh-hspi.c
+++ b/drivers/spi/spi-sh-hspi.c
@@ -22,6 +22,8 @@
  * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
  *
  */
+
+#include <linux/clk.h>
 #include <linux/module.h>
 #include <linux/kernel.h>
 #include <linux/timer.h>
@@ -50,6 +52,7 @@ struct hspi_priv {
 	void __iomem *addr;
 	struct spi_master *master;
 	struct device *dev;
+	struct clk *clk;
 };
 
 /*
@@ -162,6 +165,59 @@ static int hspi_unprepare_transfer(struct spi_master *master)
 	return 0;
 }
 
+static void hspi_hw_setup(struct hspi_priv *hspi,
+			  struct spi_message *msg,
+			  struct spi_transfer *t)
+{
+	struct spi_device *spi = msg->spi;
+	struct device *dev = hspi->dev;
+	u32 target_rate;
+	u32 spcr, idiv_clk;
+	u32 rate, best_rate, min, tmp;
+
+	target_rate = t ? t->speed_hz : 0;
+	if (!target_rate)
+		target_rate = spi->max_speed_hz;
+
+	/*
+	 * find best IDIV/CLKCx settings
+	 */
+	min = ~0;
+	best_rate = 0;
+	spcr = 0;
+	for (idiv_clk = 0x00; idiv_clk <= 0x3F; idiv_clk++) {
+		rate = clk_get_rate(hspi->clk);
+
+		/* IDIV calculation */
+		if (idiv_clk & (1 << 5))
+			rate /= 128;
+		else
+			rate /= 16;
+
+		/* CLKCx calculation */
+		rate /= (((idiv_clk & 0x1F) + 1) * 2) ;
+
+		/* save best settings */
+		tmp = abs(target_rate - rate);
+		if (tmp < min) {
+			min = tmp;
+			spcr = idiv_clk;
+			best_rate = rate;
+		}
+	}
+
+	if (spi->mode & SPI_CPHA)
+		spcr |= 1 << 7;
+	if (spi->mode & SPI_CPOL)
+		spcr |= 1 << 6;
+
+	dev_dbg(dev, "speed %d/%d\n", target_rate, best_rate);
+
+	hspi_write(hspi, SPCR, spcr);
+	hspi_write(hspi, SPSR, 0x0);
+	hspi_write(hspi, SPSCR, 0x1);	/* master mode */
+}
+
 static int hspi_transfer_one_message(struct spi_master *master,
 				     struct spi_message *msg)
 {
@@ -173,6 +229,8 @@ static int hspi_transfer_one_message(struct spi_master *master,
 
 	ret = 0;
 	list_for_each_entry(t, &msg->transfers, transfer_list) {
+		hspi_hw_setup(hspi, msg, t);
+
 		if (t->tx_buf) {
 			ret = hspi_push(hspi, msg, t);
 			if (ret < 0)
@@ -197,28 +255,12 @@ static int hspi_setup(struct spi_device *spi)
 {
 	struct hspi_priv *hspi = spi_master_get_devdata(spi->master);
 	struct device *dev = hspi->dev;
-	struct sh_hspi_info *info = hspi2info(hspi);
-	u32 data;
 
 	if (8 != spi->bits_per_word) {
 		dev_err(dev, "bits_per_word should be 8\n");
 		return -EIO;
 	}
 
-	/* setup first of all in under pm_runtime */
-	data = SH_HSPI_CLK_DIVC(info->flags);
-
-	if (info->flags & SH_HSPI_FBS)
-		data |= 1 << 7;
-	if (info->flags & SH_HSPI_CLKP_HIGH)
-		data |= 1 << 6;
-	if (info->flags & SH_HSPI_IDIV_DIV128)
-		data |= 1 << 5;
-
-	hspi_write(hspi, SPCR, data);
-	hspi_write(hspi, SPSR, 0x0);
-	hspi_write(hspi, SPSCR, 0x1);	/* master mode */
-
 	dev_dbg(dev, "%s setup\n", spi->modalias);
 
 	return 0;
@@ -237,6 +279,7 @@ static int __devinit hspi_probe(struct platform_device *pdev)
 	struct resource *res;
 	struct spi_master *master;
 	struct hspi_priv *hspi;
+	struct clk *clk;
 	int ret;
 
 	/* get base addr */
@@ -252,12 +295,20 @@ static int __devinit hspi_probe(struct platform_device *pdev)
 		return -ENOMEM;
 	}
 
+	clk = clk_get(NULL, "shyway_clk");
+	if (!clk) {
+		dev_err(&pdev->dev, "shyway_clk is required\n");
+		ret = -EINVAL;
+		goto error0;
+	}
+
 	hspi = spi_master_get_devdata(master);
 	dev_set_drvdata(&pdev->dev, hspi);
 
 	/* init hspi */
 	hspi->master	= master;
 	hspi->dev	= &pdev->dev;
+	hspi->clk	= clk;
 	hspi->addr	= devm_ioremap(hspi->dev,
 				       res->start, resource_size(res));
 	if (!hspi->addr) {
@@ -289,6 +340,8 @@ static int __devinit hspi_probe(struct platform_device *pdev)
  error2:
 	devm_iounmap(hspi->dev, hspi->addr);
  error1:
+	clk_put(clk);
+ error0:
 	spi_master_put(master);
 
 	return ret;
@@ -300,6 +353,7 @@ static int __devexit hspi_remove(struct platform_device *pdev)
 
 	pm_runtime_disable(&pdev->dev);
 
+	clk_put(hspi->clk);
 	spi_unregister_master(hspi->master);
 	devm_iounmap(hspi->dev, hspi->addr);
 

commit ec139b67ad00647239b804d6f15315b83dba9a58
Author: Kuninori Morimoto <kuninori.morimoto.gx@renesas.com>
Date:   Wed Mar 14 02:47:40 2012 -0700

    spi: sh-hspi: convert to using core message queue
    
    Signed-off-by: Kuninori Morimoto <kuninori.morimoto.gx@renesas.com>
    Signed-off-by: Grant Likely <grant.likely@secretlab.ca>

diff --git a/drivers/spi/spi-sh-hspi.c b/drivers/spi/spi-sh-hspi.c
index 8356ec8cfda2..42906731c40d 100644
--- a/drivers/spi/spi-sh-hspi.c
+++ b/drivers/spi/spi-sh-hspi.c
@@ -27,7 +27,6 @@
 #include <linux/timer.h>
 #include <linux/delay.h>
 #include <linux/list.h>
-#include <linux/workqueue.h>
 #include <linux/interrupt.h>
 #include <linux/platform_device.h>
 #include <linux/pm_runtime.h>
@@ -50,11 +49,7 @@
 struct hspi_priv {
 	void __iomem *addr;
 	struct spi_master *master;
-	struct list_head queue;
-	struct workqueue_struct *workqueue;
-	struct work_struct ws;
 	struct device *dev;
-	spinlock_t lock;
 };
 
 /*
@@ -148,88 +143,82 @@ static int hspi_pop(struct hspi_priv *hspi, struct spi_message *msg,
 	return 0;
 }
 
-static void hspi_work(struct work_struct *work)
+/*
+ *		spi master function
+ */
+static int hspi_prepare_transfer(struct spi_master *master)
 {
-	struct hspi_priv *hspi = container_of(work, struct hspi_priv, ws);
-	struct sh_hspi_info *info = hspi2info(hspi);
-	struct spi_message *msg;
-	struct spi_transfer *t;
-	unsigned long flags;
-	u32 data;
-	int ret;
-
-	dev_dbg(hspi->dev, "%s\n", __func__);
+	struct hspi_priv *hspi = spi_master_get_devdata(master);
 
-	/************************ pm enable ************************/
 	pm_runtime_get_sync(hspi->dev);
+	return 0;
+}
 
-	/* setup first of all in under pm_runtime */
-	data = SH_HSPI_CLK_DIVC(info->flags);
+static int hspi_unprepare_transfer(struct spi_master *master)
+{
+	struct hspi_priv *hspi = spi_master_get_devdata(master);
 
-	if (info->flags & SH_HSPI_FBS)
-		data |= 1 << 7;
-	if (info->flags & SH_HSPI_CLKP_HIGH)
-		data |= 1 << 6;
-	if (info->flags & SH_HSPI_IDIV_DIV128)
-		data |= 1 << 5;
+	pm_runtime_put_sync(hspi->dev);
+	return 0;
+}
 
-	hspi_write(hspi, SPCR, data);
-	hspi_write(hspi, SPSR, 0x0);
-	hspi_write(hspi, SPSCR, 0x1);	/* master mode */
+static int hspi_transfer_one_message(struct spi_master *master,
+				     struct spi_message *msg)
+{
+	struct hspi_priv *hspi = spi_master_get_devdata(master);
+	struct spi_transfer *t;
+	int ret;
 
-	while (1) {
-		msg = NULL;
+	dev_dbg(hspi->dev, "%s\n", __func__);
 
-		/************************ spin lock ************************/
-		spin_lock_irqsave(&hspi->lock, flags);
-		if (!list_empty(&hspi->queue)) {
-			msg = list_entry(hspi->queue.next,
-					 struct spi_message, queue);
-			list_del_init(&msg->queue);
+	ret = 0;
+	list_for_each_entry(t, &msg->transfers, transfer_list) {
+		if (t->tx_buf) {
+			ret = hspi_push(hspi, msg, t);
+			if (ret < 0)
+				goto error;
 		}
-		spin_unlock_irqrestore(&hspi->lock, flags);
-		/************************ spin unlock ************************/
-		if (!msg)
-			break;
-
-		ret = 0;
-		list_for_each_entry(t, &msg->transfers, transfer_list) {
-			if (t->tx_buf) {
-				ret = hspi_push(hspi, msg, t);
-				if (ret < 0)
-					goto error;
-			}
-			if (t->rx_buf) {
-				ret = hspi_pop(hspi, msg, t);
-				if (ret < 0)
-					goto error;
-			}
-			msg->actual_length += t->len;
+		if (t->rx_buf) {
+			ret = hspi_pop(hspi, msg, t);
+			if (ret < 0)
+				goto error;
 		}
-error:
-		msg->status = ret;
-		msg->complete(msg->context);
+		msg->actual_length += t->len;
 	}
+error:
 
-	pm_runtime_put_sync(hspi->dev);
-	/************************ pm disable ************************/
+	msg->status = ret;
+	spi_finalize_current_message(master);
 
-	return;
+	return ret;
 }
 
-/*
- *		spi master function
- */
 static int hspi_setup(struct spi_device *spi)
 {
 	struct hspi_priv *hspi = spi_master_get_devdata(spi->master);
 	struct device *dev = hspi->dev;
+	struct sh_hspi_info *info = hspi2info(hspi);
+	u32 data;
 
 	if (8 != spi->bits_per_word) {
 		dev_err(dev, "bits_per_word should be 8\n");
 		return -EIO;
 	}
 
+	/* setup first of all in under pm_runtime */
+	data = SH_HSPI_CLK_DIVC(info->flags);
+
+	if (info->flags & SH_HSPI_FBS)
+		data |= 1 << 7;
+	if (info->flags & SH_HSPI_CLKP_HIGH)
+		data |= 1 << 6;
+	if (info->flags & SH_HSPI_IDIV_DIV128)
+		data |= 1 << 5;
+
+	hspi_write(hspi, SPCR, data);
+	hspi_write(hspi, SPSR, 0x0);
+	hspi_write(hspi, SPSCR, 0x1);	/* master mode */
+
 	dev_dbg(dev, "%s setup\n", spi->modalias);
 
 	return 0;
@@ -243,26 +232,6 @@ static void hspi_cleanup(struct spi_device *spi)
 	dev_dbg(dev, "%s cleanup\n", spi->modalias);
 }
 
-static int hspi_transfer(struct spi_device *spi, struct spi_message *msg)
-{
-	struct hspi_priv *hspi = spi_master_get_devdata(spi->master);
-	unsigned long flags;
-
-	/************************ spin lock ************************/
-	spin_lock_irqsave(&hspi->lock, flags);
-
-	msg->actual_length	= 0;
-	msg->status		= -EINPROGRESS;
-	list_add_tail(&msg->queue, &hspi->queue);
-
-	spin_unlock_irqrestore(&hspi->lock, flags);
-	/************************ spin unlock ************************/
-
-	queue_work(hspi->workqueue, &hspi->ws);
-
-	return 0;
-}
-
 static int __devinit hspi_probe(struct platform_device *pdev)
 {
 	struct resource *res;
@@ -296,27 +265,19 @@ static int __devinit hspi_probe(struct platform_device *pdev)
 		ret = -ENOMEM;
 		goto error1;
 	}
-	hspi->workqueue = create_singlethread_workqueue(dev_name(&pdev->dev));
-	if (!hspi->workqueue) {
-		dev_err(&pdev->dev, "create workqueue error\n");
-		ret = -EBUSY;
-		goto error2;
-	}
-
-	spin_lock_init(&hspi->lock);
-	INIT_LIST_HEAD(&hspi->queue);
-	INIT_WORK(&hspi->ws, hspi_work);
 
 	master->num_chipselect	= 1;
 	master->bus_num		= pdev->id;
 	master->setup		= hspi_setup;
-	master->transfer	= hspi_transfer;
 	master->cleanup		= hspi_cleanup;
 	master->mode_bits	= SPI_CPOL | SPI_CPHA;
+	master->prepare_transfer_hardware	= hspi_prepare_transfer;
+	master->transfer_one_message		= hspi_transfer_one_message;
+	master->unprepare_transfer_hardware	= hspi_unprepare_transfer;
 	ret = spi_register_master(master);
 	if (ret < 0) {
 		dev_err(&pdev->dev, "spi_register_master error.\n");
-		goto error3;
+		goto error2;
 	}
 
 	pm_runtime_enable(&pdev->dev);
@@ -325,8 +286,6 @@ static int __devinit hspi_probe(struct platform_device *pdev)
 
 	return 0;
 
- error3:
-	destroy_workqueue(hspi->workqueue);
  error2:
 	devm_iounmap(hspi->dev, hspi->addr);
  error1:
@@ -342,7 +301,6 @@ static int __devexit hspi_remove(struct platform_device *pdev)
 	pm_runtime_disable(&pdev->dev);
 
 	spi_unregister_master(hspi->master);
-	destroy_workqueue(hspi->workqueue);
 	devm_iounmap(hspi->dev, hspi->addr);
 
 	return 0;

commit d1c8bbd793e4c2f346f8788ad312f5b5b530aff5
Author: Kuninori Morimoto <kuninori.morimoto.gx@renesas.com>
Date:   Thu Mar 1 17:10:17 2012 -0800

    spi: Add SuperH HSPI prototype driver
    
    This patch adds SuperH HSPI driver.
    It is still prototype driver, but has enough function at this point.
    
    Signed-off-by: Kuninori Morimoto <kuninori.morimoto.gx@renesas.com>
    Signed-off-by: Grant Likely <grant.likely@secretlab.ca>

diff --git a/drivers/spi/spi-sh-hspi.c b/drivers/spi/spi-sh-hspi.c
new file mode 100644
index 000000000000..8356ec8cfda2
--- /dev/null
+++ b/drivers/spi/spi-sh-hspi.c
@@ -0,0 +1,364 @@
+/*
+ * SuperH HSPI bus driver
+ *
+ * Copyright (C) 2011  Kuninori Morimoto
+ *
+ * Based on spi-sh.c:
+ * Based on pxa2xx_spi.c:
+ * Copyright (C) 2011 Renesas Solutions Corp.
+ * Copyright (C) 2005 Stephen Street / StreetFire Sound Labs
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; version 2 of the License.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+ *
+ */
+#include <linux/module.h>
+#include <linux/kernel.h>
+#include <linux/timer.h>
+#include <linux/delay.h>
+#include <linux/list.h>
+#include <linux/workqueue.h>
+#include <linux/interrupt.h>
+#include <linux/platform_device.h>
+#include <linux/pm_runtime.h>
+#include <linux/io.h>
+#include <linux/spi/spi.h>
+#include <linux/spi/sh_hspi.h>
+
+#define SPCR	0x00
+#define SPSR	0x04
+#define SPSCR	0x08
+#define SPTBR	0x0C
+#define SPRBR	0x10
+#define SPCR2	0x14
+
+/* SPSR */
+#define RXFL	(1 << 2)
+
+#define hspi2info(h)	(h->dev->platform_data)
+
+struct hspi_priv {
+	void __iomem *addr;
+	struct spi_master *master;
+	struct list_head queue;
+	struct workqueue_struct *workqueue;
+	struct work_struct ws;
+	struct device *dev;
+	spinlock_t lock;
+};
+
+/*
+ *		basic function
+ */
+static void hspi_write(struct hspi_priv *hspi, int reg, u32 val)
+{
+	iowrite32(val, hspi->addr + reg);
+}
+
+static u32 hspi_read(struct hspi_priv *hspi, int reg)
+{
+	return ioread32(hspi->addr + reg);
+}
+
+/*
+ *		transfer function
+ */
+static int hspi_status_check_timeout(struct hspi_priv *hspi, u32 mask, u32 val)
+{
+	int t = 256;
+
+	while (t--) {
+		if ((mask & hspi_read(hspi, SPSR)) == val)
+			return 0;
+
+		msleep(20);
+	}
+
+	dev_err(hspi->dev, "timeout\n");
+	return -ETIMEDOUT;
+}
+
+static int hspi_push(struct hspi_priv *hspi, struct spi_message *msg,
+		     struct spi_transfer *t)
+{
+	int i, ret;
+	u8 *data = (u8 *)t->tx_buf;
+
+	/*
+	 * FIXME
+	 * very simple, but polling transfer
+	 */
+	for (i = 0; i < t->len; i++) {
+		/* wait remains */
+		ret = hspi_status_check_timeout(hspi, 0x1, 0x0);
+		if (ret < 0)
+			return ret;
+
+		hspi_write(hspi, SPTBR, (u32)data[i]);
+
+		/* wait recive */
+		ret = hspi_status_check_timeout(hspi, 0x4, 0x4);
+		if (ret < 0)
+			return ret;
+
+		/* dummy read */
+		hspi_read(hspi, SPRBR);
+	}
+
+	return 0;
+}
+
+static int hspi_pop(struct hspi_priv *hspi, struct spi_message *msg,
+		    struct spi_transfer *t)
+{
+	int i, ret;
+	u8 *data = (u8 *)t->rx_buf;
+
+	/*
+	 * FIXME
+	 * very simple, but polling receive
+	 */
+	for (i = 0; i < t->len; i++) {
+		/* wait remains */
+		ret = hspi_status_check_timeout(hspi, 0x1, 0);
+		if (ret < 0)
+			return ret;
+
+		/* dummy write */
+		hspi_write(hspi, SPTBR, 0x0);
+
+		/* wait recive */
+		ret = hspi_status_check_timeout(hspi, 0x4, 0x4);
+		if (ret < 0)
+			return ret;
+
+		data[i] = (u8)hspi_read(hspi, SPRBR);
+	}
+
+	return 0;
+}
+
+static void hspi_work(struct work_struct *work)
+{
+	struct hspi_priv *hspi = container_of(work, struct hspi_priv, ws);
+	struct sh_hspi_info *info = hspi2info(hspi);
+	struct spi_message *msg;
+	struct spi_transfer *t;
+	unsigned long flags;
+	u32 data;
+	int ret;
+
+	dev_dbg(hspi->dev, "%s\n", __func__);
+
+	/************************ pm enable ************************/
+	pm_runtime_get_sync(hspi->dev);
+
+	/* setup first of all in under pm_runtime */
+	data = SH_HSPI_CLK_DIVC(info->flags);
+
+	if (info->flags & SH_HSPI_FBS)
+		data |= 1 << 7;
+	if (info->flags & SH_HSPI_CLKP_HIGH)
+		data |= 1 << 6;
+	if (info->flags & SH_HSPI_IDIV_DIV128)
+		data |= 1 << 5;
+
+	hspi_write(hspi, SPCR, data);
+	hspi_write(hspi, SPSR, 0x0);
+	hspi_write(hspi, SPSCR, 0x1);	/* master mode */
+
+	while (1) {
+		msg = NULL;
+
+		/************************ spin lock ************************/
+		spin_lock_irqsave(&hspi->lock, flags);
+		if (!list_empty(&hspi->queue)) {
+			msg = list_entry(hspi->queue.next,
+					 struct spi_message, queue);
+			list_del_init(&msg->queue);
+		}
+		spin_unlock_irqrestore(&hspi->lock, flags);
+		/************************ spin unlock ************************/
+		if (!msg)
+			break;
+
+		ret = 0;
+		list_for_each_entry(t, &msg->transfers, transfer_list) {
+			if (t->tx_buf) {
+				ret = hspi_push(hspi, msg, t);
+				if (ret < 0)
+					goto error;
+			}
+			if (t->rx_buf) {
+				ret = hspi_pop(hspi, msg, t);
+				if (ret < 0)
+					goto error;
+			}
+			msg->actual_length += t->len;
+		}
+error:
+		msg->status = ret;
+		msg->complete(msg->context);
+	}
+
+	pm_runtime_put_sync(hspi->dev);
+	/************************ pm disable ************************/
+
+	return;
+}
+
+/*
+ *		spi master function
+ */
+static int hspi_setup(struct spi_device *spi)
+{
+	struct hspi_priv *hspi = spi_master_get_devdata(spi->master);
+	struct device *dev = hspi->dev;
+
+	if (8 != spi->bits_per_word) {
+		dev_err(dev, "bits_per_word should be 8\n");
+		return -EIO;
+	}
+
+	dev_dbg(dev, "%s setup\n", spi->modalias);
+
+	return 0;
+}
+
+static void hspi_cleanup(struct spi_device *spi)
+{
+	struct hspi_priv *hspi = spi_master_get_devdata(spi->master);
+	struct device *dev = hspi->dev;
+
+	dev_dbg(dev, "%s cleanup\n", spi->modalias);
+}
+
+static int hspi_transfer(struct spi_device *spi, struct spi_message *msg)
+{
+	struct hspi_priv *hspi = spi_master_get_devdata(spi->master);
+	unsigned long flags;
+
+	/************************ spin lock ************************/
+	spin_lock_irqsave(&hspi->lock, flags);
+
+	msg->actual_length	= 0;
+	msg->status		= -EINPROGRESS;
+	list_add_tail(&msg->queue, &hspi->queue);
+
+	spin_unlock_irqrestore(&hspi->lock, flags);
+	/************************ spin unlock ************************/
+
+	queue_work(hspi->workqueue, &hspi->ws);
+
+	return 0;
+}
+
+static int __devinit hspi_probe(struct platform_device *pdev)
+{
+	struct resource *res;
+	struct spi_master *master;
+	struct hspi_priv *hspi;
+	int ret;
+
+	/* get base addr */
+	res = platform_get_resource(pdev, IORESOURCE_MEM, 0);
+	if (!res) {
+		dev_err(&pdev->dev, "invalid resource\n");
+		return -EINVAL;
+	}
+
+	master = spi_alloc_master(&pdev->dev, sizeof(*hspi));
+	if (!master) {
+		dev_err(&pdev->dev, "spi_alloc_master error.\n");
+		return -ENOMEM;
+	}
+
+	hspi = spi_master_get_devdata(master);
+	dev_set_drvdata(&pdev->dev, hspi);
+
+	/* init hspi */
+	hspi->master	= master;
+	hspi->dev	= &pdev->dev;
+	hspi->addr	= devm_ioremap(hspi->dev,
+				       res->start, resource_size(res));
+	if (!hspi->addr) {
+		dev_err(&pdev->dev, "ioremap error.\n");
+		ret = -ENOMEM;
+		goto error1;
+	}
+	hspi->workqueue = create_singlethread_workqueue(dev_name(&pdev->dev));
+	if (!hspi->workqueue) {
+		dev_err(&pdev->dev, "create workqueue error\n");
+		ret = -EBUSY;
+		goto error2;
+	}
+
+	spin_lock_init(&hspi->lock);
+	INIT_LIST_HEAD(&hspi->queue);
+	INIT_WORK(&hspi->ws, hspi_work);
+
+	master->num_chipselect	= 1;
+	master->bus_num		= pdev->id;
+	master->setup		= hspi_setup;
+	master->transfer	= hspi_transfer;
+	master->cleanup		= hspi_cleanup;
+	master->mode_bits	= SPI_CPOL | SPI_CPHA;
+	ret = spi_register_master(master);
+	if (ret < 0) {
+		dev_err(&pdev->dev, "spi_register_master error.\n");
+		goto error3;
+	}
+
+	pm_runtime_enable(&pdev->dev);
+
+	dev_info(&pdev->dev, "probed\n");
+
+	return 0;
+
+ error3:
+	destroy_workqueue(hspi->workqueue);
+ error2:
+	devm_iounmap(hspi->dev, hspi->addr);
+ error1:
+	spi_master_put(master);
+
+	return ret;
+}
+
+static int __devexit hspi_remove(struct platform_device *pdev)
+{
+	struct hspi_priv *hspi = dev_get_drvdata(&pdev->dev);
+
+	pm_runtime_disable(&pdev->dev);
+
+	spi_unregister_master(hspi->master);
+	destroy_workqueue(hspi->workqueue);
+	devm_iounmap(hspi->dev, hspi->addr);
+
+	return 0;
+}
+
+static struct platform_driver hspi_driver = {
+	.probe = hspi_probe,
+	.remove = __devexit_p(hspi_remove),
+	.driver = {
+		.name = "sh-hspi",
+		.owner = THIS_MODULE,
+	},
+};
+module_platform_driver(hspi_driver);
+
+MODULE_DESCRIPTION("SuperH HSPI bus driver");
+MODULE_LICENSE("GPL");
+MODULE_AUTHOR("Kuninori Morimoto <kuninori.morimoto.gx@renesas.com>");
+MODULE_ALIAS("platform:sh_spi");
