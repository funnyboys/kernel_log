commit 80503b23b23b5b2228d8750b786eb182f2fa28d2
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Fri May 24 12:04:09 2019 +0200

    treewide: Replace GPLv2 boilerplate/reference with SPDX - rule 149
    
    Based on 1 normalized pattern(s):
    
      licensed under the gpl 2 or later
    
    extracted by the scancode license scanner the SPDX license identifier
    
      GPL-2.0-or-later
    
    has been chosen to replace the boilerplate/reference in 82 file(s).
    
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Reviewed-by: Allison Randal <allison@lohutok.net>
    Reviewed-by: Kate Stewart <kstewart@linuxfoundation.org>
    Reviewed-by: Richard Fontana <rfontana@redhat.com>
    Cc: linux-spdx@vger.kernel.org
    Link: https://lkml.kernel.org/r/20190524100845.150836982@linutronix.de
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/input/misc/ad714x.h b/drivers/input/misc/ad714x.h
index 5d65d303b9bf..af847b5f0d0e 100644
--- a/drivers/input/misc/ad714x.h
+++ b/drivers/input/misc/ad714x.h
@@ -1,9 +1,8 @@
+/* SPDX-License-Identifier: GPL-2.0-or-later */
 /*
  * AD714X CapTouch Programmable Controller driver (bus interfaces)
  *
  * Copyright 2009-2011 Analog Devices Inc.
- *
- * Licensed under the GPL-2 or later.
  */
 
 #ifndef _AD714X_H_

commit c5c18a06af753eab1162fcdfb1cf03581e70b3f4
Author: Vaishali Thakkar <vthakkar1994@gmail.com>
Date:   Sat Sep 12 11:08:34 2015 -0700

    Input: ad714x - convert to using managed resources
    
    Use managed resource functions devm_request_threaded_irq,
    devm_inpute_allocate_device and devm_kzalloc to simplify error handling.
    Also, remove use of input_unregister_device as input_register_device itself
    handles it and works as resource managed function.
    
    To be compatible with the change, various gotos are replaced with direct
    returns, and unneeded labels are dropped. With these changes remove
    ad714x_remove and corresponding calls of it as they are now redundant.
    
    Signed-off-by: Vaishali Thakkar <vthakkar1994@gmail.com>
    Signed-off-by: Dmitry Torokhov <dmitry.torokhov@gmail.com>

diff --git a/drivers/input/misc/ad714x.h b/drivers/input/misc/ad714x.h
index 3c85455aa66d..5d65d303b9bf 100644
--- a/drivers/input/misc/ad714x.h
+++ b/drivers/input/misc/ad714x.h
@@ -50,6 +50,5 @@ int ad714x_disable(struct ad714x_chip *ad714x);
 int ad714x_enable(struct ad714x_chip *ad714x);
 struct ad714x_chip *ad714x_probe(struct device *dev, u16 bus_type, int irq,
 				 ad714x_read_t read, ad714x_write_t write);
-void ad714x_remove(struct ad714x_chip *ad714x);
 
 #endif

commit 9eff794b777ac9ca034129a1b637204000c8fb29
Author: Michael Hennerich <michael.hennerich@analog.com>
Date:   Mon Aug 22 09:45:42 2011 -0700

    Input: ad714x - read the interrupt status registers in a row
    
    The interrupt status registers should be read in row to avoid invalid data.
    
    Alter "read" method for both bus options to allow reading several registers
    in a row and make sure we read interrupt status registers properly.
    
    Read sequence saves 50% of bus transactions compared to single register
    reads. So use it also for the result registers, which are also located
    in a row.
    
    Also update copyright notice.
    
    Signed-off-by: Michael Hennerich <michael.hennerich@analog.com>
    Signed-off-by: Dmitry Torokhov <dtor@mail.ru>

diff --git a/drivers/input/misc/ad714x.h b/drivers/input/misc/ad714x.h
index d12d14911fc3..3c85455aa66d 100644
--- a/drivers/input/misc/ad714x.h
+++ b/drivers/input/misc/ad714x.h
@@ -1,7 +1,7 @@
 /*
  * AD714X CapTouch Programmable Controller driver (bus interfaces)
  *
- * Copyright 2009 Analog Devices Inc.
+ * Copyright 2009-2011 Analog Devices Inc.
  *
  * Licensed under the GPL-2 or later.
  */
@@ -18,12 +18,12 @@ struct ad714x_platform_data;
 struct ad714x_driver_data;
 struct ad714x_chip;
 
-typedef int (*ad714x_read_t)(struct ad714x_chip *, unsigned short, unsigned short *);
+typedef int (*ad714x_read_t)(struct ad714x_chip *, unsigned short, unsigned short *, size_t);
 typedef int (*ad714x_write_t)(struct ad714x_chip *, unsigned short, unsigned short);
 
 struct ad714x_chip {
-	unsigned short h_state;
 	unsigned short l_state;
+	unsigned short h_state;
 	unsigned short c_state;
 	unsigned short adc_reg[STAGE_NUM];
 	unsigned short amb_reg[STAGE_NUM];

commit c0409feb86893f5ccf73964c7b2b47ca64bdb014
Author: Dmitry Torokhov <dmitry.torokhov@gmail.com>
Date:   Mon Aug 22 09:45:39 2011 -0700

    Input: ad714x - use DMA-safe buffers for spi_write()
    
    spi_write() requires use of DMA-safe (cacheline aligned) buffers.
    Also use the same buffers when reading data since to avoid extra
    locking and potential memory allocation in spi_write_then_read().
    
    Acked-by: Michael Hennerich <michael.hennerich@analog.com>
    Signed-off-by: Dmitry Torokhov <dtor@mail.ru>

diff --git a/drivers/input/misc/ad714x.h b/drivers/input/misc/ad714x.h
index 45c54fb13f07..d12d14911fc3 100644
--- a/drivers/input/misc/ad714x.h
+++ b/drivers/input/misc/ad714x.h
@@ -11,11 +11,40 @@
 
 #include <linux/types.h>
 
+#define STAGE_NUM              12
+
 struct device;
+struct ad714x_platform_data;
+struct ad714x_driver_data;
 struct ad714x_chip;
 
-typedef int (*ad714x_read_t)(struct device *, unsigned short, unsigned short *);
-typedef int (*ad714x_write_t)(struct device *, unsigned short, unsigned short);
+typedef int (*ad714x_read_t)(struct ad714x_chip *, unsigned short, unsigned short *);
+typedef int (*ad714x_write_t)(struct ad714x_chip *, unsigned short, unsigned short);
+
+struct ad714x_chip {
+	unsigned short h_state;
+	unsigned short l_state;
+	unsigned short c_state;
+	unsigned short adc_reg[STAGE_NUM];
+	unsigned short amb_reg[STAGE_NUM];
+	unsigned short sensor_val[STAGE_NUM];
+
+	struct ad714x_platform_data *hw;
+	struct ad714x_driver_data *sw;
+
+	int irq;
+	struct device *dev;
+	ad714x_read_t read;
+	ad714x_write_t write;
+
+	struct mutex mutex;
+
+	unsigned product;
+	unsigned version;
+
+	__be16 xfer_buf[16] ____cacheline_aligned;
+
+};
 
 int ad714x_disable(struct ad714x_chip *ad714x);
 int ad714x_enable(struct ad714x_chip *ad714x);

commit 31a6296333b94964e9a073649840bb34d4603369
Author: Bryan Wu <cooloney@kernel.org>
Date:   Sun Mar 21 23:23:24 2010 -0700

    Input: add Analog Devices AD714x captouch input driver
    
    AD7142 and AD7147 are integrated capacitance-to-digital converters
    (CDCs) with on-chip environmental calibration for use in systems
    requiring a novel user input method. The AD7142 and AD7147 can interface
    to external capacitance sensors implementing functions such as buttons,
    scrollwheels, sliders, touchpads and so on.
    
    The chips don't restrict the specific usage. Depending on the hardware
    connection, one special target board can include one or several these
    components. The platform_data for the device's "struct device" holds
    these information. The data-struct defined in head file descript the
    hardware feature of button/scrollwheel/slider/touchpad components on
    target boards, which need be filled in the arch/mach-/.
    
    As the result, the driver is independent of boards. It gets the
    components layout from the platform_data, registers related devices,
    fullfills the algorithms and state machines for these components and
    report related input events to up level.
    
    Signed-off-by: Bryan Wu <cooloney@kernel.org>
    Signed-off-by: Michael Hennerich <michael.hennerich@analog.com>
    Signed-off-by: Barry Song <21cnbao@gmail.com>
    Signed-off-by: Mike Frysinger <vapier@gentoo.org>
    Signed-off-by: Dmitry Torokhov <dtor@mail.ru>

diff --git a/drivers/input/misc/ad714x.h b/drivers/input/misc/ad714x.h
new file mode 100644
index 000000000000..45c54fb13f07
--- /dev/null
+++ b/drivers/input/misc/ad714x.h
@@ -0,0 +1,26 @@
+/*
+ * AD714X CapTouch Programmable Controller driver (bus interfaces)
+ *
+ * Copyright 2009 Analog Devices Inc.
+ *
+ * Licensed under the GPL-2 or later.
+ */
+
+#ifndef _AD714X_H_
+#define _AD714X_H_
+
+#include <linux/types.h>
+
+struct device;
+struct ad714x_chip;
+
+typedef int (*ad714x_read_t)(struct device *, unsigned short, unsigned short *);
+typedef int (*ad714x_write_t)(struct device *, unsigned short, unsigned short);
+
+int ad714x_disable(struct ad714x_chip *ad714x);
+int ad714x_enable(struct ad714x_chip *ad714x);
+struct ad714x_chip *ad714x_probe(struct device *dev, u16 bus_type, int irq,
+				 ad714x_read_t read, ad714x_write_t write);
+void ad714x_remove(struct ad714x_chip *ad714x);
+
+#endif
