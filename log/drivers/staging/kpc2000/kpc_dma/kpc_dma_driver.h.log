commit 0af192c755bdfe0476d3ffc99e8483644c026deb
Author: Sam Muhammed <jane.pnx9@gmail.com>
Date:   Wed Mar 25 10:26:36 2020 -0400

    Staging: kpc2000: kpc_dma: Remove comparison to NULL.
    
    Comparison to NULL been used across the driver,
    remove them and use (!var) instead.
    
    Checkpatch.pl: CHECK:
    Comparison to NULL could be written "!desc"... etc
    
    Signed-off-by: Sam Muhammed <jane.pnx9@gmail.com>
    Link: https://lore.kernel.org/r/f344afba0a8bb0413941a63678688435f04a96b4.1585143581.git.jane.pnx9@gmail.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/kpc2000/kpc_dma/kpc_dma_driver.h b/drivers/staging/kpc2000/kpc_dma/kpc_dma_driver.h
index 4c8cc866b826..8b9c978257b9 100644
--- a/drivers/staging/kpc2000/kpc_dma/kpc_dma_driver.h
+++ b/drivers/staging/kpc2000/kpc_dma/kpc_dma_driver.h
@@ -198,14 +198,14 @@ u32  GetEngineCompletePtr(struct kpc_dma_device *eng)
 static inline
 void  lock_engine(struct kpc_dma_device *eng)
 {
-	BUG_ON(eng == NULL);
+	BUG_ON(!eng);
 	mutex_lock(&eng->sem);
 }
 
 static inline
 void  unlock_engine(struct kpc_dma_device *eng)
 {
-	BUG_ON(eng == NULL);
+	BUG_ON(!eng);
 	mutex_unlock(&eng->sem);
 }
 

commit c77a6794c0fe543df7226ab045e0f507a0b24aee
Author: Jeremy Sowden <jeremy@azazel.net>
Date:   Thu Jun 13 10:23:58 2019 +0100

    staging: kpc2000: removed DMA AIO implementation.
    
    The existing implementation for doing DMA via asynchronous IO didn't
    work and there was no longer a use-case for it.  Removed it.
    
    Fixed a few checkpatch warnings about too-long lines and extraneous
    braces in the process.
    
    Reported-by: Matt Sickler <matt.sickler@daktronics.com>
    Signed-off-by: Jeremy Sowden <jeremy@azazel.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/kpc2000/kpc_dma/kpc_dma_driver.h b/drivers/staging/kpc2000/kpc_dma/kpc_dma_driver.h
index ee47f43e71cf..4c8cc866b826 100644
--- a/drivers/staging/kpc2000/kpc_dma/kpc_dma_driver.h
+++ b/drivers/staging/kpc2000/kpc_dma/kpc_dma_driver.h
@@ -14,7 +14,6 @@
 #include <linux/pci.h>
 #include <linux/interrupt.h>
 #include <linux/workqueue.h>
-#include <linux/aio.h>
 #include <linux/bitops.h>
 #include "../kpc.h"
 
@@ -87,7 +86,6 @@ struct aio_cb_data {
 	struct kpc_dma_device      *ldev;
 	struct completion  *cpl;
 	unsigned char       flags;
-	struct kiocb       *kcb;
 	size_t              len;
 
 	unsigned int        page_count;

commit d34141ebd7e74cc4e68fe58b2d30eb5dcf1e7aeb
Author: Vandana BN <bnvandana@gmail.com>
Date:   Mon May 13 19:13:27 2019 +0530

    Staging: kpc2000: kpc_dma: Resolve cast warning and use const for file_operation
    
    This Patch resolves unnecessary cast warning and const file_operations
    reported by checkpath.pl
    WARNING: unnecessary cast may hide bugs
    WARNING: struct file_operations should normally be const
    
    Signed-off-by: Vandana BN <bnvandana@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/kpc2000/kpc_dma/kpc_dma_driver.h b/drivers/staging/kpc2000/kpc_dma/kpc_dma_driver.h
index cf781940ac1b..ee47f43e71cf 100644
--- a/drivers/staging/kpc2000/kpc_dma/kpc_dma_driver.h
+++ b/drivers/staging/kpc2000/kpc_dma/kpc_dma_driver.h
@@ -57,7 +57,7 @@ struct dev_private_data {
 
 struct kpc_dma_device *kpc_dma_lookup_device(int minor);
 
-extern struct file_operations  kpc_dma_fops;
+extern const struct file_operations  kpc_dma_fops;
 
 #define ENG_CAP_PRESENT                 0x00000001
 #define ENG_CAP_DIRECTION               0x00000002

commit 63c867d794e89edc22440e8d9581063eeb766bda
Author: Vandana BN <bnvandana@gmail.com>
Date:   Mon May 13 19:13:25 2019 +0530

    Staging: kpc2000: kpc_dma: Resolve warning Missing blank line after declarations & labels not to be indented.
    
    This patch resloves below warnings reported by checkpath in kpc_dma
    WARNING: Missing a blank line after declarations
    WARNING: labels should not be indented
    CHECK: Please don't use multiple blank lines
    CHECK: Please use a blank line after function/struct/union/enum
    declarations
    
    Signed-off-by: Vandana BN <bnvandana@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/kpc2000/kpc_dma/kpc_dma_driver.h b/drivers/staging/kpc2000/kpc_dma/kpc_dma_driver.h
index 8101601736a2..cf781940ac1b 100644
--- a/drivers/staging/kpc2000/kpc_dma/kpc_dma_driver.h
+++ b/drivers/staging/kpc2000/kpc_dma/kpc_dma_driver.h
@@ -18,7 +18,6 @@
 #include <linux/bitops.h>
 #include "../kpc.h"
 
-
 struct kp2000_device;
 struct kpc_dma_device {
 	struct list_head            list;
@@ -157,15 +156,18 @@ void  WriteEngineControl(struct kpc_dma_device *eng, u32 value)
 {
 	writel(value, eng->eng_regs + 1);
 }
+
 static inline
 u32  GetEngineControl(struct kpc_dma_device *eng)
 {
 	return readl(eng->eng_regs + 1);
 }
+
 static inline
 void  SetClearEngineControl(struct kpc_dma_device *eng, u32 set_bits, u32 clear_bits)
 {
 	u32 val = GetEngineControl(eng);
+
 	val |= set_bits;
 	val &= ~clear_bits;
 	WriteEngineControl(eng, val);
@@ -176,16 +178,19 @@ void  SetEngineNextPtr(struct kpc_dma_device *eng, struct kpc_dma_descriptor *de
 {
 	writel(desc->MyDMAAddr, eng->eng_regs + 2);
 }
+
 static inline
 void  SetEngineSWPtr(struct kpc_dma_device *eng, struct kpc_dma_descriptor *desc)
 {
 	writel(desc->MyDMAAddr, eng->eng_regs + 3);
 }
+
 static inline
 void  ClearEngineCompletePtr(struct kpc_dma_device *eng)
 {
 	writel(0, eng->eng_regs + 4);
 }
+
 static inline
 u32  GetEngineCompletePtr(struct kpc_dma_device *eng)
 {
@@ -206,7 +211,6 @@ void  unlock_engine(struct kpc_dma_device *eng)
 	mutex_unlock(&eng->sem);
 }
 
-
 /// Shared Functions
 void  start_dma_engine(struct kpc_dma_device *eng);
 int   setup_dma_engine(struct kpc_dma_device *eng, u32 desc_cnt);

commit 20fe99222dd33e8f92e9e33c9fa231145145ce33
Author: Vandana BN <bnvandana@gmail.com>
Date:   Mon May 13 19:13:21 2019 +0530

    Staging: kpc2000: kpc_dma: Resolve space errors around pointers and function declarations reported by checkpatch.
    
    This patch resolves below errors reported by checkpatch
    ERROR: "(foo*)" should be "(foo *)"
    ERROR: "foo * bar" should be "foo *bar"
    ERROR: "foo __init  bar" should be "foo __init bar"
    ERROR: "foo __exit  bar" should be "foo __exit bar"
    
    Signed-off-by: Vandana BN <bnvandana@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/kpc2000/kpc_dma/kpc_dma_driver.h b/drivers/staging/kpc2000/kpc_dma/kpc_dma_driver.h
index 67c0ea31acab..8101601736a2 100644
--- a/drivers/staging/kpc2000/kpc_dma/kpc_dma_driver.h
+++ b/drivers/staging/kpc2000/kpc_dma/kpc_dma_driver.h
@@ -56,7 +56,7 @@ struct dev_private_data {
 	u64                         user_sts;
 };
 
-struct kpc_dma_device *  kpc_dma_lookup_device(int minor);
+struct kpc_dma_device *kpc_dma_lookup_device(int minor);
 
 extern struct file_operations  kpc_dma_fops;
 
@@ -172,12 +172,12 @@ void  SetClearEngineControl(struct kpc_dma_device *eng, u32 set_bits, u32 clear_
 }
 
 static inline
-void  SetEngineNextPtr(struct kpc_dma_device *eng, struct kpc_dma_descriptor * desc)
+void  SetEngineNextPtr(struct kpc_dma_device *eng, struct kpc_dma_descriptor *desc)
 {
 	writel(desc->MyDMAAddr, eng->eng_regs + 2);
 }
 static inline
-void  SetEngineSWPtr(struct kpc_dma_device *eng, struct kpc_dma_descriptor * desc)
+void  SetEngineSWPtr(struct kpc_dma_device *eng, struct kpc_dma_descriptor *desc)
 {
 	writel(desc->MyDMAAddr, eng->eng_regs + 3);
 }

commit 0f7aa9d2447bbfef3637e74ff0ea6a1cf92b8f3e
Author: Vandana BN <bnvandana@gmail.com>
Date:   Mon May 13 19:13:20 2019 +0530

    Staging: kpc2000: kpc_dma: Resolve trailing whitespace error reported by checkpatch
    
    Resolve trailing whitespace error from checkpatch.pl
    ERROR: trailing whitespace
    
    Signed-off-by: Vandana BN <bnvandana@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/kpc2000/kpc_dma/kpc_dma_driver.h b/drivers/staging/kpc2000/kpc_dma/kpc_dma_driver.h
index ef913b7496e6..67c0ea31acab 100644
--- a/drivers/staging/kpc2000/kpc_dma/kpc_dma_driver.h
+++ b/drivers/staging/kpc2000/kpc_dma/kpc_dma_driver.h
@@ -27,23 +27,23 @@ struct kpc_dma_device {
 	struct device              *kpc_dma_dev;
 	struct kobject              kobj;
 	char                        name[16];
-	
+
 	int                         dir; // DMA_FROM_DEVICE || DMA_TO_DEVICE
 	struct mutex                sem;
 	unsigned int                irq;
 	struct work_struct          irq_work;
-	
+
 	atomic_t                    open_count;
-	
+
 	size_t                      accumulated_bytes;
 	u32                         accumulated_flags;
-	
+
 	// Descriptor "Pool" housekeeping
 	u32                         desc_pool_cnt;
 	struct dma_pool            *desc_pool;
 	struct kpc_dma_descriptor  *desc_pool_first;
 	struct kpc_dma_descriptor  *desc_pool_last;
-	
+
 	struct kpc_dma_descriptor  *desc_next;
 	struct kpc_dma_descriptor  *desc_completed;
 };
@@ -90,7 +90,7 @@ struct aio_cb_data {
 	unsigned char       flags;
 	struct kiocb       *kcb;
 	size_t              len;
-	
+
 	unsigned int        page_count;
 	struct page       **user_pages;
 	struct sg_table     sgt;
@@ -119,10 +119,10 @@ struct kpc_dma_descriptor {
 		volatile u32  DescSystemAddrLS;
 		volatile u32  DescSystemAddrMS;
 		volatile u32  DescNextDescPtr;
-		
+
 		dma_addr_t    MyDMAAddr;
 		struct kpc_dma_descriptor   *Next;
-		
+
 		struct aio_cb_data  *acd;
 } __attribute__((packed));
 // DescControlFlags:

commit 7df95299b94a63ec67a6389fc02dc25019a80ee8
Author: Matt Sickler <Matt.Sickler@daktronics.com>
Date:   Mon Apr 22 22:05:58 2019 +0000

    staging: kpc2000: Add DMA driver
    
    Add Daktronics DMA driver.  I've added the SPDX license identifiers, Kconfig
    entry, and cleaned up as many of the warnings as I could.
    
    The AIO support code will be removed in a future patch.
    
    Signed-off-by: Matt Sickler <matt.sickler@daktronics.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/kpc2000/kpc_dma/kpc_dma_driver.h b/drivers/staging/kpc2000/kpc_dma/kpc_dma_driver.h
new file mode 100644
index 000000000000..ef913b7496e6
--- /dev/null
+++ b/drivers/staging/kpc2000/kpc_dma/kpc_dma_driver.h
@@ -0,0 +1,220 @@
+/* SPDX-License-Identifier: GPL-2.0+ */
+#ifndef KPC_DMA_DRIVER_H
+#define KPC_DMA_DRIVER_H
+#include <linux/platform_device.h>
+#include <linux/cdev.h>
+#include <linux/kfifo.h>
+#include <linux/list.h>
+#include <linux/spinlock.h>
+#include <linux/sched.h>
+#include <linux/miscdevice.h>
+#include <linux/rwsem.h>
+#include <linux/dma-mapping.h>
+#include <linux/dmapool.h>
+#include <linux/pci.h>
+#include <linux/interrupt.h>
+#include <linux/workqueue.h>
+#include <linux/aio.h>
+#include <linux/bitops.h>
+#include "../kpc.h"
+
+
+struct kp2000_device;
+struct kpc_dma_device {
+	struct list_head            list;
+	struct platform_device     *pldev;
+	u32 __iomem                *eng_regs;
+	struct device              *kpc_dma_dev;
+	struct kobject              kobj;
+	char                        name[16];
+	
+	int                         dir; // DMA_FROM_DEVICE || DMA_TO_DEVICE
+	struct mutex                sem;
+	unsigned int                irq;
+	struct work_struct          irq_work;
+	
+	atomic_t                    open_count;
+	
+	size_t                      accumulated_bytes;
+	u32                         accumulated_flags;
+	
+	// Descriptor "Pool" housekeeping
+	u32                         desc_pool_cnt;
+	struct dma_pool            *desc_pool;
+	struct kpc_dma_descriptor  *desc_pool_first;
+	struct kpc_dma_descriptor  *desc_pool_last;
+	
+	struct kpc_dma_descriptor  *desc_next;
+	struct kpc_dma_descriptor  *desc_completed;
+};
+
+struct dev_private_data {
+	struct kpc_dma_device      *ldev;
+	u64                         card_addr;
+	u64                         user_ctl;
+	u64                         user_ctl_last;
+	u64                         user_sts;
+};
+
+struct kpc_dma_device *  kpc_dma_lookup_device(int minor);
+
+extern struct file_operations  kpc_dma_fops;
+
+#define ENG_CAP_PRESENT                 0x00000001
+#define ENG_CAP_DIRECTION               0x00000002
+#define ENG_CAP_TYPE_MASK               0x000000F0
+#define ENG_CAP_NUMBER_MASK             0x0000FF00
+#define ENG_CAP_CARD_ADDR_SIZE_MASK     0x007F0000
+#define ENG_CAP_DESC_MAX_BYTE_CNT_MASK  0x3F000000
+#define ENG_CAP_PERF_SCALE_MASK         0xC0000000
+
+#define ENG_CTL_IRQ_ENABLE              BIT(0)
+#define ENG_CTL_IRQ_ACTIVE              BIT(1)
+#define ENG_CTL_DESC_COMPLETE           BIT(2)
+#define ENG_CTL_DESC_ALIGN_ERR          BIT(3)
+#define ENG_CTL_DESC_FETCH_ERR          BIT(4)
+#define ENG_CTL_SW_ABORT_ERR            BIT(5)
+#define ENG_CTL_DESC_CHAIN_END          BIT(7)
+#define ENG_CTL_DMA_ENABLE              BIT(8)
+#define ENG_CTL_DMA_RUNNING             BIT(10)
+#define ENG_CTL_DMA_WAITING             BIT(11)
+#define ENG_CTL_DMA_WAITING_PERSIST     BIT(12)
+#define ENG_CTL_DMA_RESET_REQUEST       BIT(14)
+#define ENG_CTL_DMA_RESET               BIT(15)
+#define ENG_CTL_DESC_FETCH_ERR_CLASS_MASK   0x700000
+
+struct aio_cb_data {
+	struct dev_private_data    *priv;
+	struct kpc_dma_device      *ldev;
+	struct completion  *cpl;
+	unsigned char       flags;
+	struct kiocb       *kcb;
+	size_t              len;
+	
+	unsigned int        page_count;
+	struct page       **user_pages;
+	struct sg_table     sgt;
+	int                 mapped_entry_count;
+};
+
+#define ACD_FLAG_DONE               0
+#define ACD_FLAG_ABORT              1
+#define ACD_FLAG_ENG_ACCUM_ERROR    4
+#define ACD_FLAG_ENG_ACCUM_SHORT    5
+
+struct kpc_dma_descriptor {
+	struct {
+		volatile u32  DescByteCount              :20;
+		volatile u32  DescStatusErrorFlags       :4;
+		volatile u32  DescStatusFlags            :8;
+	};
+		volatile u32  DescUserControlLS;
+		volatile u32  DescUserControlMS;
+		volatile u32  DescCardAddrLS;
+	struct {
+		volatile u32  DescBufferByteCount        :20;
+		volatile u32  DescCardAddrMS             :4;
+		volatile u32  DescControlFlags           :8;
+	};
+		volatile u32  DescSystemAddrLS;
+		volatile u32  DescSystemAddrMS;
+		volatile u32  DescNextDescPtr;
+		
+		dma_addr_t    MyDMAAddr;
+		struct kpc_dma_descriptor   *Next;
+		
+		struct aio_cb_data  *acd;
+} __attribute__((packed));
+// DescControlFlags:
+#define DMA_DESC_CTL_SOP            BIT(7)
+#define DMA_DESC_CTL_EOP            BIT(6)
+#define DMA_DESC_CTL_AFIFO          BIT(2)
+#define DMA_DESC_CTL_IRQONERR       BIT(1)
+#define DMA_DESC_CTL_IRQONDONE      BIT(0)
+// DescStatusFlags:
+#define DMA_DESC_STS_SOP            BIT(7)
+#define DMA_DESC_STS_EOP            BIT(6)
+#define DMA_DESC_STS_ERROR          BIT(4)
+#define DMA_DESC_STS_USMSZ          BIT(3)
+#define DMA_DESC_STS_USLSZ          BIT(2)
+#define DMA_DESC_STS_SHORT          BIT(1)
+#define DMA_DESC_STS_COMPLETE       BIT(0)
+// DescStatusErrorFlags:
+#define DMA_DESC_ESTS_ECRC          BIT(2)
+#define DMA_DESC_ESTS_POISON        BIT(1)
+#define DMA_DESC_ESTS_UNSUCCESSFUL  BIT(0)
+
+#define DMA_DESC_ALIGNMENT          0x20
+
+static inline
+u32  GetEngineCapabilities(struct kpc_dma_device *eng)
+{
+	return readl(eng->eng_regs + 0);
+}
+
+static inline
+void  WriteEngineControl(struct kpc_dma_device *eng, u32 value)
+{
+	writel(value, eng->eng_regs + 1);
+}
+static inline
+u32  GetEngineControl(struct kpc_dma_device *eng)
+{
+	return readl(eng->eng_regs + 1);
+}
+static inline
+void  SetClearEngineControl(struct kpc_dma_device *eng, u32 set_bits, u32 clear_bits)
+{
+	u32 val = GetEngineControl(eng);
+	val |= set_bits;
+	val &= ~clear_bits;
+	WriteEngineControl(eng, val);
+}
+
+static inline
+void  SetEngineNextPtr(struct kpc_dma_device *eng, struct kpc_dma_descriptor * desc)
+{
+	writel(desc->MyDMAAddr, eng->eng_regs + 2);
+}
+static inline
+void  SetEngineSWPtr(struct kpc_dma_device *eng, struct kpc_dma_descriptor * desc)
+{
+	writel(desc->MyDMAAddr, eng->eng_regs + 3);
+}
+static inline
+void  ClearEngineCompletePtr(struct kpc_dma_device *eng)
+{
+	writel(0, eng->eng_regs + 4);
+}
+static inline
+u32  GetEngineCompletePtr(struct kpc_dma_device *eng)
+{
+	return readl(eng->eng_regs + 4);
+}
+
+static inline
+void  lock_engine(struct kpc_dma_device *eng)
+{
+	BUG_ON(eng == NULL);
+	mutex_lock(&eng->sem);
+}
+
+static inline
+void  unlock_engine(struct kpc_dma_device *eng)
+{
+	BUG_ON(eng == NULL);
+	mutex_unlock(&eng->sem);
+}
+
+
+/// Shared Functions
+void  start_dma_engine(struct kpc_dma_device *eng);
+int   setup_dma_engine(struct kpc_dma_device *eng, u32 desc_cnt);
+void  stop_dma_engine(struct kpc_dma_device *eng);
+void  destroy_dma_engine(struct kpc_dma_device *eng);
+void  clear_desc(struct kpc_dma_descriptor *desc);
+int   count_descriptors_available(struct kpc_dma_device *eng);
+void  transfer_complete_cb(struct aio_cb_data *acd, size_t xfr_count, u32 flags);
+
+#endif /* KPC_DMA_DRIVER_H */
+
