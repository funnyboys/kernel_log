commit f5fbb83feba2a91c4b19389ba995175d71c51df9
Author: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
Date:   Sat May 30 07:38:24 2020 +0200

    media: atomisp: add SPDX headers
    
    This driver is licensed under GPL 2.0, as stated inside their
    headers.
    
    Add the proper tag there. We should probably latter cleanup
    the reduntant licensing text, but this could be done later,
    after we get rid of other abstraction layers.
    
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>

diff --git a/drivers/staging/media/atomisp/i2c/ov2680.h b/drivers/staging/media/atomisp/i2c/ov2680.h
index f4e618062e9c..49920245e064 100644
--- a/drivers/staging/media/atomisp/i2c/ov2680.h
+++ b/drivers/staging/media/atomisp/i2c/ov2680.h
@@ -1,3 +1,4 @@
+/* SPDX-License-Identifier: GPL-2.0 */
 /*
  * Support for OmniVision OV2680 5M camera sensor.
  *

commit abbd669dbfbb8c68936b575fe296af3a3184ed3d
Author: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
Date:   Thu May 28 10:29:31 2020 +0200

    media: atomisp: do another round of coding style cleanup
    
    Run checkpatch --fix-inline again, in order to get rid
    of some additional issues that got introduced (or that
    checkpatch can now detect).
    
    This should help preventing receiving random cleanups,
    while keeping the code on a better shape.
    
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>

diff --git a/drivers/staging/media/atomisp/i2c/ov2680.h b/drivers/staging/media/atomisp/i2c/ov2680.h
index 034e1032f6c0..f4e618062e9c 100644
--- a/drivers/staging/media/atomisp/i2c/ov2680.h
+++ b/drivers/staging/media/atomisp/i2c/ov2680.h
@@ -456,6 +456,7 @@ static struct ov2680_reg const ov2680_656x496_30fps[] = {
 	// {0x5090, 0x0c},
 	{}
 };
+
 /*
 * 800x600 30fps  VBlanking 1lane 10Bit (binning)
 */
@@ -500,6 +501,7 @@ static struct ov2680_reg const ov2680_720x592_30fps[] = {
 	{0x5081, 0x41},
 	{}
 };
+
 /*
 * 800x600 30fps  VBlanking 1lane 10Bit (binning)
 */

commit b0ac238396c41e78025d05d9167027940fbef2b4
Author: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
Date:   Tue May 19 17:31:50 2020 +0200

    media: atomisp-ov2680: get rid of the type field
    
    This isn't really used, so get rid, in order to make the code
    simpler.
    
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>

diff --git a/drivers/staging/media/atomisp/i2c/ov2680.h b/drivers/staging/media/atomisp/i2c/ov2680.h
index 741d0e2e0398..034e1032f6c0 100644
--- a/drivers/staging/media/atomisp/i2c/ov2680.h
+++ b/drivers/staging/media/atomisp/i2c/ov2680.h
@@ -179,15 +179,6 @@ struct ov2680_device {
 	u8 type;
 };
 
-enum ov2680_tok_type {
-	OV2680_8BIT  = 0x0001,
-	OV2680_16BIT = 0x0002,
-	OV2680_32BIT = 0x0004,
-	OV2680_TOK_TERM   = 0xf000,	/* terminating token for reg list */
-	OV2680_TOK_DELAY  = 0xfe00,	/* delay token for reg list */
-	OV2680_TOK_MASK = 0xfff0
-};
-
 /**
  * struct ov2680_reg - MI sensor  register format
  * @type: type of the register
@@ -197,7 +188,6 @@ enum ov2680_tok_type {
  * Define a structure for sensor register initialization values
  */
 struct ov2680_reg {
-	enum ov2680_tok_type type;
 	u16 reg;
 	u32 val;	/* @set value for read/mod/write, @mask */
 };
@@ -217,79 +207,79 @@ struct ov2680_write_ctrl {
 };
 
 static struct ov2680_reg const ov2680_global_setting[] = {
-	{OV2680_8BIT, 0x0103, 0x01},
-	{OV2680_8BIT, 0x3002, 0x00},
-	{OV2680_8BIT, 0x3016, 0x1c},
-	{OV2680_8BIT, 0x3018, 0x44},
-	{OV2680_8BIT, 0x3020, 0x00},
-	{OV2680_8BIT, 0x3080, 0x02},
-	{OV2680_8BIT, 0x3082, 0x45},
-	{OV2680_8BIT, 0x3084, 0x09},
-	{OV2680_8BIT, 0x3085, 0x04},
-	{OV2680_8BIT, 0x3503, 0x03},
-	{OV2680_8BIT, 0x350b, 0x36},
-	{OV2680_8BIT, 0x3600, 0xb4},
-	{OV2680_8BIT, 0x3603, 0x39},
-	{OV2680_8BIT, 0x3604, 0x24},
-	{OV2680_8BIT, 0x3605, 0x00},
-	{OV2680_8BIT, 0x3620, 0x26},
-	{OV2680_8BIT, 0x3621, 0x37},
-	{OV2680_8BIT, 0x3622, 0x04},
-	{OV2680_8BIT, 0x3628, 0x00},
-	{OV2680_8BIT, 0x3705, 0x3c},
-	{OV2680_8BIT, 0x370c, 0x50},
-	{OV2680_8BIT, 0x370d, 0xc0},
-	{OV2680_8BIT, 0x3718, 0x88},
-	{OV2680_8BIT, 0x3720, 0x00},
-	{OV2680_8BIT, 0x3721, 0x00},
-	{OV2680_8BIT, 0x3722, 0x00},
-	{OV2680_8BIT, 0x3723, 0x00},
-	{OV2680_8BIT, 0x3738, 0x00},
-	{OV2680_8BIT, 0x3717, 0x58},
-	{OV2680_8BIT, 0x3781, 0x80},
-	{OV2680_8BIT, 0x3789, 0x60},
-	{OV2680_8BIT, 0x3800, 0x00},
-	{OV2680_8BIT, 0x3819, 0x04},
-	{OV2680_8BIT, 0x4000, 0x81},
-	{OV2680_8BIT, 0x4001, 0x40},
-	{OV2680_8BIT, 0x4602, 0x02},
-	{OV2680_8BIT, 0x481f, 0x36},
-	{OV2680_8BIT, 0x4825, 0x36},
-	{OV2680_8BIT, 0x4837, 0x18},
-	{OV2680_8BIT, 0x5002, 0x30},
-	{OV2680_8BIT, 0x5004, 0x04},//manual awb 1x
-	{OV2680_8BIT, 0x5005, 0x00},
-	{OV2680_8BIT, 0x5006, 0x04},
-	{OV2680_8BIT, 0x5007, 0x00},
-	{OV2680_8BIT, 0x5008, 0x04},
-	{OV2680_8BIT, 0x5009, 0x00},
-	{OV2680_8BIT, 0x5080, 0x00},
-	{OV2680_8BIT, 0x3701, 0x64},  //add on 14/05/13
-	{OV2680_8BIT, 0x3784, 0x0c},  //based OV2680_R1A_AM10.ovt add on 14/06/13
-	{OV2680_8BIT, 0x5780, 0x3e},  //based OV2680_R1A_AM10.ovt,Adjust DPC setting (57xx) on 14/06/13
-	{OV2680_8BIT, 0x5781, 0x0f},
-	{OV2680_8BIT, 0x5782, 0x04},
-	{OV2680_8BIT, 0x5783, 0x02},
-	{OV2680_8BIT, 0x5784, 0x01},
-	{OV2680_8BIT, 0x5785, 0x01},
-	{OV2680_8BIT, 0x5786, 0x00},
-	{OV2680_8BIT, 0x5787, 0x04},
-	{OV2680_8BIT, 0x5788, 0x02},
-	{OV2680_8BIT, 0x5789, 0x00},
-	{OV2680_8BIT, 0x578a, 0x01},
-	{OV2680_8BIT, 0x578b, 0x02},
-	{OV2680_8BIT, 0x578c, 0x03},
-	{OV2680_8BIT, 0x578d, 0x03},
-	{OV2680_8BIT, 0x578e, 0x08},
-	{OV2680_8BIT, 0x578f, 0x0c},
-	{OV2680_8BIT, 0x5790, 0x08},
-	{OV2680_8BIT, 0x5791, 0x04},
-	{OV2680_8BIT, 0x5792, 0x00},
-	{OV2680_8BIT, 0x5793, 0x00},
-	{OV2680_8BIT, 0x5794, 0x03}, //based OV2680_R1A_AM10.ovt,Adjust DPC setting (57xx) on 14/06/13
-	{OV2680_8BIT, 0x0100, 0x00},	//stream off
-
-	{OV2680_TOK_TERM, 0, 0}
+	{0x0103, 0x01},
+	{0x3002, 0x00},
+	{0x3016, 0x1c},
+	{0x3018, 0x44},
+	{0x3020, 0x00},
+	{0x3080, 0x02},
+	{0x3082, 0x45},
+	{0x3084, 0x09},
+	{0x3085, 0x04},
+	{0x3503, 0x03},
+	{0x350b, 0x36},
+	{0x3600, 0xb4},
+	{0x3603, 0x39},
+	{0x3604, 0x24},
+	{0x3605, 0x00},
+	{0x3620, 0x26},
+	{0x3621, 0x37},
+	{0x3622, 0x04},
+	{0x3628, 0x00},
+	{0x3705, 0x3c},
+	{0x370c, 0x50},
+	{0x370d, 0xc0},
+	{0x3718, 0x88},
+	{0x3720, 0x00},
+	{0x3721, 0x00},
+	{0x3722, 0x00},
+	{0x3723, 0x00},
+	{0x3738, 0x00},
+	{0x3717, 0x58},
+	{0x3781, 0x80},
+	{0x3789, 0x60},
+	{0x3800, 0x00},
+	{0x3819, 0x04},
+	{0x4000, 0x81},
+	{0x4001, 0x40},
+	{0x4602, 0x02},
+	{0x481f, 0x36},
+	{0x4825, 0x36},
+	{0x4837, 0x18},
+	{0x5002, 0x30},
+	{0x5004, 0x04},//manual awb 1x
+	{0x5005, 0x00},
+	{0x5006, 0x04},
+	{0x5007, 0x00},
+	{0x5008, 0x04},
+	{0x5009, 0x00},
+	{0x5080, 0x00},
+	{0x3701, 0x64},  //add on 14/05/13
+	{0x3784, 0x0c},  //based OV2680_R1A_AM10.ovt add on 14/06/13
+	{0x5780, 0x3e},  //based OV2680_R1A_AM10.ovt,Adjust DPC setting (57xx) on 14/06/13
+	{0x5781, 0x0f},
+	{0x5782, 0x04},
+	{0x5783, 0x02},
+	{0x5784, 0x01},
+	{0x5785, 0x01},
+	{0x5786, 0x00},
+	{0x5787, 0x04},
+	{0x5788, 0x02},
+	{0x5789, 0x00},
+	{0x578a, 0x01},
+	{0x578b, 0x02},
+	{0x578c, 0x03},
+	{0x578d, 0x03},
+	{0x578e, 0x08},
+	{0x578f, 0x0c},
+	{0x5790, 0x08},
+	{0x5791, 0x04},
+	{0x5792, 0x00},
+	{0x5793, 0x00},
+	{0x5794, 0x03}, //based OV2680_R1A_AM10.ovt,Adjust DPC setting (57xx) on 14/06/13
+	{0x0100, 0x00},	//stream off
+
+	{}
 };
 
 #if 0 /* None of the definitions below are used currently */
@@ -297,389 +287,389 @@ static struct ov2680_reg const ov2680_global_setting[] = {
  * 176x144 30fps  VBlanking 1lane 10Bit (binning)
  */
 static struct ov2680_reg const ov2680_QCIF_30fps[] = {
-	{OV2680_8BIT, 0x3086, 0x01},
-	{OV2680_8BIT, 0x3501, 0x24},
-	{OV2680_8BIT, 0x3502, 0x40},
-	{OV2680_8BIT, 0x370a, 0x23},
-	{OV2680_8BIT, 0x3801, 0xa0},
-	{OV2680_8BIT, 0x3802, 0x00},
-	{OV2680_8BIT, 0x3803, 0x78},
-	{OV2680_8BIT, 0x3804, 0x05},
-	{OV2680_8BIT, 0x3805, 0xaf},
-	{OV2680_8BIT, 0x3806, 0x04},
-	{OV2680_8BIT, 0x3807, 0x47},
-	{OV2680_8BIT, 0x3808, 0x00},
-	{OV2680_8BIT, 0x3809, 0xC0},
-	{OV2680_8BIT, 0x380a, 0x00},
-	{OV2680_8BIT, 0x380b, 0xa0},
-	{OV2680_8BIT, 0x380c, 0x06},
-	{OV2680_8BIT, 0x380d, 0xb0},
-	{OV2680_8BIT, 0x380e, 0x02},
-	{OV2680_8BIT, 0x380f, 0x84},
-	{OV2680_8BIT, 0x3810, 0x00},
-	{OV2680_8BIT, 0x3811, 0x04},
-	{OV2680_8BIT, 0x3812, 0x00},
-	{OV2680_8BIT, 0x3813, 0x04},
-	{OV2680_8BIT, 0x3814, 0x31},
-	{OV2680_8BIT, 0x3815, 0x31},
-	{OV2680_8BIT, 0x4000, 0x81},
-	{OV2680_8BIT, 0x4001, 0x40},
-	{OV2680_8BIT, 0x4008, 0x00},
-	{OV2680_8BIT, 0x4009, 0x03},
-	{OV2680_8BIT, 0x5081, 0x41},
-	{OV2680_8BIT, 0x5708, 0x00}, //add for full size flip off and mirror off 2014/09/11
-	{OV2680_8BIT, 0x5704, 0x10},
-	{OV2680_8BIT, 0x5705, 0xa0},
-	{OV2680_8BIT, 0x5706, 0x0c},
-	{OV2680_8BIT, 0x5707, 0x78},
-	{OV2680_8BIT, 0x3820, 0xc2},
-	{OV2680_8BIT, 0x3821, 0x01},
-	// {OV2680_8BIT, 0x5090, 0x0c},
-	{OV2680_TOK_TERM, 0, 0}
+	{0x3086, 0x01},
+	{0x3501, 0x24},
+	{0x3502, 0x40},
+	{0x370a, 0x23},
+	{0x3801, 0xa0},
+	{0x3802, 0x00},
+	{0x3803, 0x78},
+	{0x3804, 0x05},
+	{0x3805, 0xaf},
+	{0x3806, 0x04},
+	{0x3807, 0x47},
+	{0x3808, 0x00},
+	{0x3809, 0xC0},
+	{0x380a, 0x00},
+	{0x380b, 0xa0},
+	{0x380c, 0x06},
+	{0x380d, 0xb0},
+	{0x380e, 0x02},
+	{0x380f, 0x84},
+	{0x3810, 0x00},
+	{0x3811, 0x04},
+	{0x3812, 0x00},
+	{0x3813, 0x04},
+	{0x3814, 0x31},
+	{0x3815, 0x31},
+	{0x4000, 0x81},
+	{0x4001, 0x40},
+	{0x4008, 0x00},
+	{0x4009, 0x03},
+	{0x5081, 0x41},
+	{0x5708, 0x00}, //add for full size flip off and mirror off 2014/09/11
+	{0x5704, 0x10},
+	{0x5705, 0xa0},
+	{0x5706, 0x0c},
+	{0x5707, 0x78},
+	{0x3820, 0xc2},
+	{0x3821, 0x01},
+	// {0x5090, 0x0c},
+	{}
 };
 
 /*
  * 352x288 30fps  VBlanking 1lane 10Bit (binning)
  */
 static struct ov2680_reg const ov2680_CIF_30fps[] = {
-	{OV2680_8BIT, 0x3086, 0x01},
-	{OV2680_8BIT, 0x3501, 0x24},
-	{OV2680_8BIT, 0x3502, 0x40},
-	{OV2680_8BIT, 0x370a, 0x23},
-	{OV2680_8BIT, 0x3801, 0xa0},
-	{OV2680_8BIT, 0x3802, 0x00},
-	{OV2680_8BIT, 0x3803, 0x78},
-	{OV2680_8BIT, 0x3804, 0x03},
-	{OV2680_8BIT, 0x3805, 0x8f},
-	{OV2680_8BIT, 0x3806, 0x02},
-	{OV2680_8BIT, 0x3807, 0xe7},
-	{OV2680_8BIT, 0x3808, 0x01},
-	{OV2680_8BIT, 0x3809, 0x70},
-	{OV2680_8BIT, 0x380a, 0x01},
-	{OV2680_8BIT, 0x380b, 0x30},
-	{OV2680_8BIT, 0x380c, 0x06},
-	{OV2680_8BIT, 0x380d, 0xb0},
-	{OV2680_8BIT, 0x380e, 0x02},
-	{OV2680_8BIT, 0x380f, 0x84},
-	{OV2680_8BIT, 0x3810, 0x00},
-	{OV2680_8BIT, 0x3811, 0x04},
-	{OV2680_8BIT, 0x3812, 0x00},
-	{OV2680_8BIT, 0x3813, 0x04},
-	{OV2680_8BIT, 0x3814, 0x31},
-	{OV2680_8BIT, 0x3815, 0x31},
-	{OV2680_8BIT, 0x4008, 0x00},
-	{OV2680_8BIT, 0x4009, 0x03},
-	{OV2680_8BIT, 0x5081, 0x41},
-	{OV2680_8BIT, 0x5708, 0x00}, //add for full size flip off and mirror off 2014/09/11
-	{OV2680_8BIT, 0x5704, 0x10},
-	{OV2680_8BIT, 0x5705, 0xa0},
-	{OV2680_8BIT, 0x5706, 0x0c},
-	{OV2680_8BIT, 0x5707, 0x78},
-	{OV2680_8BIT, 0x3820, 0xc2},
-	{OV2680_8BIT, 0x3821, 0x01},
-	// {OV2680_8BIT, 0x5090, 0x0c},
-	{OV2680_TOK_TERM, 0, 0}
+	{0x3086, 0x01},
+	{0x3501, 0x24},
+	{0x3502, 0x40},
+	{0x370a, 0x23},
+	{0x3801, 0xa0},
+	{0x3802, 0x00},
+	{0x3803, 0x78},
+	{0x3804, 0x03},
+	{0x3805, 0x8f},
+	{0x3806, 0x02},
+	{0x3807, 0xe7},
+	{0x3808, 0x01},
+	{0x3809, 0x70},
+	{0x380a, 0x01},
+	{0x380b, 0x30},
+	{0x380c, 0x06},
+	{0x380d, 0xb0},
+	{0x380e, 0x02},
+	{0x380f, 0x84},
+	{0x3810, 0x00},
+	{0x3811, 0x04},
+	{0x3812, 0x00},
+	{0x3813, 0x04},
+	{0x3814, 0x31},
+	{0x3815, 0x31},
+	{0x4008, 0x00},
+	{0x4009, 0x03},
+	{0x5081, 0x41},
+	{0x5708, 0x00}, //add for full size flip off and mirror off 2014/09/11
+	{0x5704, 0x10},
+	{0x5705, 0xa0},
+	{0x5706, 0x0c},
+	{0x5707, 0x78},
+	{0x3820, 0xc2},
+	{0x3821, 0x01},
+	// {0x5090, 0x0c},
+	{}
 };
 
 /*
  * 336x256 30fps  VBlanking 1lane 10Bit (binning)
  */
 static struct ov2680_reg const ov2680_QVGA_30fps[] = {
-	{OV2680_8BIT, 0x3086, 0x01},
-	{OV2680_8BIT, 0x3501, 0x24},
-	{OV2680_8BIT, 0x3502, 0x40},
-	{OV2680_8BIT, 0x370a, 0x23},
-	{OV2680_8BIT, 0x3801, 0xa0},
-	{OV2680_8BIT, 0x3802, 0x00},
-	{OV2680_8BIT, 0x3803, 0x78},
-	{OV2680_8BIT, 0x3804, 0x03},
-	{OV2680_8BIT, 0x3805, 0x4f},
-	{OV2680_8BIT, 0x3806, 0x02},
-	{OV2680_8BIT, 0x3807, 0x87},
-	{OV2680_8BIT, 0x3808, 0x01},
-	{OV2680_8BIT, 0x3809, 0x50},
-	{OV2680_8BIT, 0x380a, 0x01},
-	{OV2680_8BIT, 0x380b, 0x00},
-	{OV2680_8BIT, 0x380c, 0x06},
-	{OV2680_8BIT, 0x380d, 0xb0},
-	{OV2680_8BIT, 0x380e, 0x02},
-	{OV2680_8BIT, 0x380f, 0x84},
-	{OV2680_8BIT, 0x3810, 0x00},
-	{OV2680_8BIT, 0x3811, 0x04},
-	{OV2680_8BIT, 0x3812, 0x00},
-	{OV2680_8BIT, 0x3813, 0x04},
-	{OV2680_8BIT, 0x3814, 0x31},
-	{OV2680_8BIT, 0x3815, 0x31},
-	{OV2680_8BIT, 0x4008, 0x00},
-	{OV2680_8BIT, 0x4009, 0x03},
-	{OV2680_8BIT, 0x5081, 0x41},
-	{OV2680_8BIT, 0x5708, 0x00}, //add for full size flip off and mirror off 2014/09/11
-	{OV2680_8BIT, 0x5704, 0x10},
-	{OV2680_8BIT, 0x5705, 0xa0},
-	{OV2680_8BIT, 0x5706, 0x0c},
-	{OV2680_8BIT, 0x5707, 0x78},
-	{OV2680_8BIT, 0x3820, 0xc2},
-	{OV2680_8BIT, 0x3821, 0x01},
-	// {OV2680_8BIT, 0x5090, 0x0c},
-	{OV2680_TOK_TERM, 0, 0}
+	{0x3086, 0x01},
+	{0x3501, 0x24},
+	{0x3502, 0x40},
+	{0x370a, 0x23},
+	{0x3801, 0xa0},
+	{0x3802, 0x00},
+	{0x3803, 0x78},
+	{0x3804, 0x03},
+	{0x3805, 0x4f},
+	{0x3806, 0x02},
+	{0x3807, 0x87},
+	{0x3808, 0x01},
+	{0x3809, 0x50},
+	{0x380a, 0x01},
+	{0x380b, 0x00},
+	{0x380c, 0x06},
+	{0x380d, 0xb0},
+	{0x380e, 0x02},
+	{0x380f, 0x84},
+	{0x3810, 0x00},
+	{0x3811, 0x04},
+	{0x3812, 0x00},
+	{0x3813, 0x04},
+	{0x3814, 0x31},
+	{0x3815, 0x31},
+	{0x4008, 0x00},
+	{0x4009, 0x03},
+	{0x5081, 0x41},
+	{0x5708, 0x00}, //add for full size flip off and mirror off 2014/09/11
+	{0x5704, 0x10},
+	{0x5705, 0xa0},
+	{0x5706, 0x0c},
+	{0x5707, 0x78},
+	{0x3820, 0xc2},
+	{0x3821, 0x01},
+	// {0x5090, 0x0c},
+	{}
 };
 
 /*
  * 656x496 30fps  VBlanking 1lane 10Bit (binning)
  */
 static struct ov2680_reg const ov2680_656x496_30fps[] = {
-	{OV2680_8BIT, 0x3086, 0x01},
-	{OV2680_8BIT, 0x3501, 0x24},
-	{OV2680_8BIT, 0x3502, 0x40},
-	{OV2680_8BIT, 0x370a, 0x23},
-	{OV2680_8BIT, 0x3801, 0xa0},
-	{OV2680_8BIT, 0x3802, 0x00},
-	{OV2680_8BIT, 0x3803, 0x78},
-	{OV2680_8BIT, 0x3804, 0x05},
-	{OV2680_8BIT, 0x3805, 0xcf},
-	{OV2680_8BIT, 0x3806, 0x04},
-	{OV2680_8BIT, 0x3807, 0x67},
-	{OV2680_8BIT, 0x3808, 0x02},
-	{OV2680_8BIT, 0x3809, 0x90},
-	{OV2680_8BIT, 0x380a, 0x01},
-	{OV2680_8BIT, 0x380b, 0xf0},
-	{OV2680_8BIT, 0x380c, 0x06},
-	{OV2680_8BIT, 0x380d, 0xb0},
-	{OV2680_8BIT, 0x380e, 0x02},
-	{OV2680_8BIT, 0x380f, 0x84},
-	{OV2680_8BIT, 0x3810, 0x00},
-	{OV2680_8BIT, 0x3811, 0x04},
-	{OV2680_8BIT, 0x3812, 0x00},
-	{OV2680_8BIT, 0x3813, 0x04},
-	{OV2680_8BIT, 0x3814, 0x31},
-	{OV2680_8BIT, 0x3815, 0x31},
-	{OV2680_8BIT, 0x4008, 0x00},
-	{OV2680_8BIT, 0x4009, 0x03},
-	{OV2680_8BIT, 0x5081, 0x41},
-	{OV2680_8BIT, 0x5708, 0x00}, //add for full size flip off and mirror off 2014/09/11
-	{OV2680_8BIT, 0x5704, 0x10},
-	{OV2680_8BIT, 0x5705, 0xa0},
-	{OV2680_8BIT, 0x5706, 0x0c},
-	{OV2680_8BIT, 0x5707, 0x78},
-	{OV2680_8BIT, 0x3820, 0xc2},
-	{OV2680_8BIT, 0x3821, 0x01},
-	// {OV2680_8BIT, 0x5090, 0x0c},
-	{OV2680_TOK_TERM, 0, 0}
+	{0x3086, 0x01},
+	{0x3501, 0x24},
+	{0x3502, 0x40},
+	{0x370a, 0x23},
+	{0x3801, 0xa0},
+	{0x3802, 0x00},
+	{0x3803, 0x78},
+	{0x3804, 0x05},
+	{0x3805, 0xcf},
+	{0x3806, 0x04},
+	{0x3807, 0x67},
+	{0x3808, 0x02},
+	{0x3809, 0x90},
+	{0x380a, 0x01},
+	{0x380b, 0xf0},
+	{0x380c, 0x06},
+	{0x380d, 0xb0},
+	{0x380e, 0x02},
+	{0x380f, 0x84},
+	{0x3810, 0x00},
+	{0x3811, 0x04},
+	{0x3812, 0x00},
+	{0x3813, 0x04},
+	{0x3814, 0x31},
+	{0x3815, 0x31},
+	{0x4008, 0x00},
+	{0x4009, 0x03},
+	{0x5081, 0x41},
+	{0x5708, 0x00}, //add for full size flip off and mirror off 2014/09/11
+	{0x5704, 0x10},
+	{0x5705, 0xa0},
+	{0x5706, 0x0c},
+	{0x5707, 0x78},
+	{0x3820, 0xc2},
+	{0x3821, 0x01},
+	// {0x5090, 0x0c},
+	{}
 };
 /*
 * 800x600 30fps  VBlanking 1lane 10Bit (binning)
 */
 static struct ov2680_reg const ov2680_720x592_30fps[] = {
-	{OV2680_8BIT, 0x3086, 0x01},
-	{OV2680_8BIT, 0x3501, 0x26},
-	{OV2680_8BIT, 0x3502, 0x40},
-	{OV2680_8BIT, 0x370a, 0x23},
-	{OV2680_8BIT, 0x3801, 0x00}, // X_ADDR_START;
-	{OV2680_8BIT, 0x3802, 0x00},
-	{OV2680_8BIT, 0x3803, 0x00}, // Y_ADDR_START;
-	{OV2680_8BIT, 0x3804, 0x05},
-	{OV2680_8BIT, 0x3805, 0xaf}, // X_ADDR_END;
-	{OV2680_8BIT, 0x3806, 0x04},
-	{OV2680_8BIT, 0x3807, 0xaf}, // Y_ADDR_END;
-	{OV2680_8BIT, 0x3808, 0x02},
-	{OV2680_8BIT, 0x3809, 0xd0}, // X_OUTPUT_SIZE;
-	{OV2680_8BIT, 0x380a, 0x02},
-	{OV2680_8BIT, 0x380b, 0x50}, // Y_OUTPUT_SIZE;
-	{OV2680_8BIT, 0x380c, 0x06},
-	{OV2680_8BIT, 0x380d, 0xac}, // HTS;
-	{OV2680_8BIT, 0x380e, 0x02},
-	{OV2680_8BIT, 0x380f, 0x84}, // VTS;
-	{OV2680_8BIT, 0x3810, 0x00},
-	{OV2680_8BIT, 0x3811, 0x00},
-	{OV2680_8BIT, 0x3812, 0x00},
-	{OV2680_8BIT, 0x3813, 0x00},
-	{OV2680_8BIT, 0x3814, 0x31},
-	{OV2680_8BIT, 0x3815, 0x31},
-	{OV2680_8BIT, 0x4008, 0x00},
-	{OV2680_8BIT, 0x4009, 0x03},
-	{OV2680_8BIT, 0x5708, 0x00},
-	{OV2680_8BIT, 0x5704, 0x02},
-	{OV2680_8BIT, 0x5705, 0xd0}, // X_WIN;
-	{OV2680_8BIT, 0x5706, 0x02},
-	{OV2680_8BIT, 0x5707, 0x50}, // Y_WIN;
-	{OV2680_8BIT, 0x3820, 0xc2}, // FLIP_FORMAT;
-	{OV2680_8BIT, 0x3821, 0x01}, // MIRROR_FORMAT;
-	{OV2680_8BIT, 0x5090, 0x00}, // PRE ISP CTRL16, default value is 0x0C;
+	{0x3086, 0x01},
+	{0x3501, 0x26},
+	{0x3502, 0x40},
+	{0x370a, 0x23},
+	{0x3801, 0x00}, // X_ADDR_START;
+	{0x3802, 0x00},
+	{0x3803, 0x00}, // Y_ADDR_START;
+	{0x3804, 0x05},
+	{0x3805, 0xaf}, // X_ADDR_END;
+	{0x3806, 0x04},
+	{0x3807, 0xaf}, // Y_ADDR_END;
+	{0x3808, 0x02},
+	{0x3809, 0xd0}, // X_OUTPUT_SIZE;
+	{0x380a, 0x02},
+	{0x380b, 0x50}, // Y_OUTPUT_SIZE;
+	{0x380c, 0x06},
+	{0x380d, 0xac}, // HTS;
+	{0x380e, 0x02},
+	{0x380f, 0x84}, // VTS;
+	{0x3810, 0x00},
+	{0x3811, 0x00},
+	{0x3812, 0x00},
+	{0x3813, 0x00},
+	{0x3814, 0x31},
+	{0x3815, 0x31},
+	{0x4008, 0x00},
+	{0x4009, 0x03},
+	{0x5708, 0x00},
+	{0x5704, 0x02},
+	{0x5705, 0xd0}, // X_WIN;
+	{0x5706, 0x02},
+	{0x5707, 0x50}, // Y_WIN;
+	{0x3820, 0xc2}, // FLIP_FORMAT;
+	{0x3821, 0x01}, // MIRROR_FORMAT;
+	{0x5090, 0x00}, // PRE ISP CTRL16, default value is 0x0C;
 	// BIT[3]: Mirror order, BG or GB;
 	// BIT[2]: Flip order, BR or RB;
-	{OV2680_8BIT, 0x5081, 0x41},
-	{OV2680_TOK_TERM, 0, 0}
+	{0x5081, 0x41},
+	{}
 };
 /*
 * 800x600 30fps  VBlanking 1lane 10Bit (binning)
 */
 static struct ov2680_reg const ov2680_800x600_30fps[] = {
-	{OV2680_8BIT, 0x3086, 0x01},
-	{OV2680_8BIT, 0x3501, 0x26},
-	{OV2680_8BIT, 0x3502, 0x40},
-	{OV2680_8BIT, 0x370a, 0x23},
-	{OV2680_8BIT, 0x3801, 0x00},
-	{OV2680_8BIT, 0x3802, 0x00},
-	{OV2680_8BIT, 0x3803, 0x00},
-	{OV2680_8BIT, 0x3804, 0x06},
-	{OV2680_8BIT, 0x3805, 0x4f},
-	{OV2680_8BIT, 0x3806, 0x04},
-	{OV2680_8BIT, 0x3807, 0xbf},
-	{OV2680_8BIT, 0x3808, 0x03},
-	{OV2680_8BIT, 0x3809, 0x20},
-	{OV2680_8BIT, 0x380a, 0x02},
-	{OV2680_8BIT, 0x380b, 0x58},
-	{OV2680_8BIT, 0x380c, 0x06},
-	{OV2680_8BIT, 0x380d, 0xac},
-	{OV2680_8BIT, 0x380e, 0x02},
-	{OV2680_8BIT, 0x380f, 0x84},
-	{OV2680_8BIT, 0x3810, 0x00},
-	{OV2680_8BIT, 0x3811, 0x00},
-	{OV2680_8BIT, 0x3812, 0x00},
-	{OV2680_8BIT, 0x3813, 0x00},
-	{OV2680_8BIT, 0x3814, 0x31},
-	{OV2680_8BIT, 0x3815, 0x31},
-	{OV2680_8BIT, 0x5708, 0x00},
-	{OV2680_8BIT, 0x5704, 0x03},
-	{OV2680_8BIT, 0x5705, 0x20},
-	{OV2680_8BIT, 0x5706, 0x02},
-	{OV2680_8BIT, 0x5707, 0x58},
-	{OV2680_8BIT, 0x3820, 0xc2},
-	{OV2680_8BIT, 0x3821, 0x01},
-	{OV2680_8BIT, 0x5090, 0x00},
-	{OV2680_8BIT, 0x4008, 0x00},
-	{OV2680_8BIT, 0x4009, 0x03},
-	{OV2680_8BIT, 0x5081, 0x41},
-	{OV2680_TOK_TERM, 0, 0}
+	{0x3086, 0x01},
+	{0x3501, 0x26},
+	{0x3502, 0x40},
+	{0x370a, 0x23},
+	{0x3801, 0x00},
+	{0x3802, 0x00},
+	{0x3803, 0x00},
+	{0x3804, 0x06},
+	{0x3805, 0x4f},
+	{0x3806, 0x04},
+	{0x3807, 0xbf},
+	{0x3808, 0x03},
+	{0x3809, 0x20},
+	{0x380a, 0x02},
+	{0x380b, 0x58},
+	{0x380c, 0x06},
+	{0x380d, 0xac},
+	{0x380e, 0x02},
+	{0x380f, 0x84},
+	{0x3810, 0x00},
+	{0x3811, 0x00},
+	{0x3812, 0x00},
+	{0x3813, 0x00},
+	{0x3814, 0x31},
+	{0x3815, 0x31},
+	{0x5708, 0x00},
+	{0x5704, 0x03},
+	{0x5705, 0x20},
+	{0x5706, 0x02},
+	{0x5707, 0x58},
+	{0x3820, 0xc2},
+	{0x3821, 0x01},
+	{0x5090, 0x00},
+	{0x4008, 0x00},
+	{0x4009, 0x03},
+	{0x5081, 0x41},
+	{}
 };
 
 /*
  * 720p=1280*720 30fps  VBlanking 1lane 10Bit (no-Scaling)
  */
 static struct ov2680_reg const ov2680_720p_30fps[] = {
-	{OV2680_8BIT, 0x3086, 0x00},
-	{OV2680_8BIT, 0x3501, 0x48},
-	{OV2680_8BIT, 0x3502, 0xe0},
-	{OV2680_8BIT, 0x370a, 0x21},
-	{OV2680_8BIT, 0x3801, 0xa0},
-	{OV2680_8BIT, 0x3802, 0x00},
-	{OV2680_8BIT, 0x3803, 0xf2},
-	{OV2680_8BIT, 0x3804, 0x05},
-	{OV2680_8BIT, 0x3805, 0xbf},
-	{OV2680_8BIT, 0x3806, 0x03},
-	{OV2680_8BIT, 0x3807, 0xdd},
-	{OV2680_8BIT, 0x3808, 0x05},
-	{OV2680_8BIT, 0x3809, 0x10},
-	{OV2680_8BIT, 0x380a, 0x02},
-	{OV2680_8BIT, 0x380b, 0xe0},
-	{OV2680_8BIT, 0x380c, 0x06},
-	{OV2680_8BIT, 0x380d, 0xa8},
-	{OV2680_8BIT, 0x380e, 0x05},
-	{OV2680_8BIT, 0x380f, 0x0e},
-	{OV2680_8BIT, 0x3810, 0x00},
-	{OV2680_8BIT, 0x3811, 0x08},
-	{OV2680_8BIT, 0x3812, 0x00},
-	{OV2680_8BIT, 0x3813, 0x06},
-	{OV2680_8BIT, 0x3814, 0x11},
-	{OV2680_8BIT, 0x3815, 0x11},
-	{OV2680_8BIT, 0x4008, 0x02},
-	{OV2680_8BIT, 0x4009, 0x09},
-	{OV2680_8BIT, 0x5081, 0x41},
-	{OV2680_8BIT, 0x5708, 0x00}, //add for full size flip off and mirror off 2014/09/11
-	{OV2680_8BIT, 0x5704, 0x10},
-	{OV2680_8BIT, 0x5705, 0xa0},
-	{OV2680_8BIT, 0x5706, 0x0c},
-	{OV2680_8BIT, 0x5707, 0x78},
-	{OV2680_8BIT, 0x3820, 0xc0},
-	{OV2680_8BIT, 0x3821, 0x00},
-	// {OV2680_8BIT, 0x5090, 0x0c},
-	{OV2680_TOK_TERM, 0, 0}
+	{0x3086, 0x00},
+	{0x3501, 0x48},
+	{0x3502, 0xe0},
+	{0x370a, 0x21},
+	{0x3801, 0xa0},
+	{0x3802, 0x00},
+	{0x3803, 0xf2},
+	{0x3804, 0x05},
+	{0x3805, 0xbf},
+	{0x3806, 0x03},
+	{0x3807, 0xdd},
+	{0x3808, 0x05},
+	{0x3809, 0x10},
+	{0x380a, 0x02},
+	{0x380b, 0xe0},
+	{0x380c, 0x06},
+	{0x380d, 0xa8},
+	{0x380e, 0x05},
+	{0x380f, 0x0e},
+	{0x3810, 0x00},
+	{0x3811, 0x08},
+	{0x3812, 0x00},
+	{0x3813, 0x06},
+	{0x3814, 0x11},
+	{0x3815, 0x11},
+	{0x4008, 0x02},
+	{0x4009, 0x09},
+	{0x5081, 0x41},
+	{0x5708, 0x00}, //add for full size flip off and mirror off 2014/09/11
+	{0x5704, 0x10},
+	{0x5705, 0xa0},
+	{0x5706, 0x0c},
+	{0x5707, 0x78},
+	{0x3820, 0xc0},
+	{0x3821, 0x00},
+	// {0x5090, 0x0c},
+	{}
 };
 
 /*
  * 1296x976 30fps  VBlanking 1lane 10Bit(no-scaling)
  */
 static struct ov2680_reg const ov2680_1296x976_30fps[] = {
-	{OV2680_8BIT, 0x3086, 0x00},
-	{OV2680_8BIT, 0x3501, 0x48},
-	{OV2680_8BIT, 0x3502, 0xe0},
-	{OV2680_8BIT, 0x370a, 0x21},
-	{OV2680_8BIT, 0x3801, 0xa0},
-	{OV2680_8BIT, 0x3802, 0x00},
-	{OV2680_8BIT, 0x3803, 0x78},
-	{OV2680_8BIT, 0x3804, 0x05},
-	{OV2680_8BIT, 0x3805, 0xbf},
-	{OV2680_8BIT, 0x3806, 0x04},
-	{OV2680_8BIT, 0x3807, 0x57},
-	{OV2680_8BIT, 0x3808, 0x05},
-	{OV2680_8BIT, 0x3809, 0x10},
-	{OV2680_8BIT, 0x380a, 0x03},
-	{OV2680_8BIT, 0x380b, 0xd0},
-	{OV2680_8BIT, 0x380c, 0x06},
-	{OV2680_8BIT, 0x380d, 0xa8},
-	{OV2680_8BIT, 0x380e, 0x05},
-	{OV2680_8BIT, 0x380f, 0x0e},
-	{OV2680_8BIT, 0x3810, 0x00},
-	{OV2680_8BIT, 0x3811, 0x08},
-	{OV2680_8BIT, 0x3812, 0x00},
-	{OV2680_8BIT, 0x3813, 0x08},
-	{OV2680_8BIT, 0x3814, 0x11},
-	{OV2680_8BIT, 0x3815, 0x11},
-	{OV2680_8BIT, 0x4008, 0x02},
-	{OV2680_8BIT, 0x4009, 0x09},
-	{OV2680_8BIT, 0x5081, 0x41},
-	{OV2680_8BIT, 0x5708, 0x00}, //add for full size flip off and mirror off 2014/09/11
-	{OV2680_8BIT, 0x5704, 0x10},
-	{OV2680_8BIT, 0x5705, 0xa0},
-	{OV2680_8BIT, 0x5706, 0x0c},
-	{OV2680_8BIT, 0x5707, 0x78},
-	{OV2680_8BIT, 0x3820, 0xc0},
-	{OV2680_8BIT, 0x3821, 0x00}, //miror/flip
-	// {OV2680_8BIT, 0x5090, 0x0c},
-	{OV2680_TOK_TERM, 0, 0}
+	{0x3086, 0x00},
+	{0x3501, 0x48},
+	{0x3502, 0xe0},
+	{0x370a, 0x21},
+	{0x3801, 0xa0},
+	{0x3802, 0x00},
+	{0x3803, 0x78},
+	{0x3804, 0x05},
+	{0x3805, 0xbf},
+	{0x3806, 0x04},
+	{0x3807, 0x57},
+	{0x3808, 0x05},
+	{0x3809, 0x10},
+	{0x380a, 0x03},
+	{0x380b, 0xd0},
+	{0x380c, 0x06},
+	{0x380d, 0xa8},
+	{0x380e, 0x05},
+	{0x380f, 0x0e},
+	{0x3810, 0x00},
+	{0x3811, 0x08},
+	{0x3812, 0x00},
+	{0x3813, 0x08},
+	{0x3814, 0x11},
+	{0x3815, 0x11},
+	{0x4008, 0x02},
+	{0x4009, 0x09},
+	{0x5081, 0x41},
+	{0x5708, 0x00}, //add for full size flip off and mirror off 2014/09/11
+	{0x5704, 0x10},
+	{0x5705, 0xa0},
+	{0x5706, 0x0c},
+	{0x5707, 0x78},
+	{0x3820, 0xc0},
+	{0x3821, 0x00}, //miror/flip
+	// {0x5090, 0x0c},
+	{}
 };
 
 /*
  *   1456*1096 30fps  VBlanking 1lane 10bit(no-scaling)
 */
 static struct ov2680_reg const ov2680_1456x1096_30fps[] = {
-	{OV2680_8BIT, 0x3086, 0x00},
-	{OV2680_8BIT, 0x3501, 0x48},
-	{OV2680_8BIT, 0x3502, 0xe0},
-	{OV2680_8BIT, 0x370a, 0x21},
-	{OV2680_8BIT, 0x3801, 0x90},
-	{OV2680_8BIT, 0x3802, 0x00},
-	{OV2680_8BIT, 0x3803, 0x78},
-	{OV2680_8BIT, 0x3804, 0x06},
-	{OV2680_8BIT, 0x3805, 0x4f},
-	{OV2680_8BIT, 0x3806, 0x04},
-	{OV2680_8BIT, 0x3807, 0xC0},
-	{OV2680_8BIT, 0x3808, 0x05},
-	{OV2680_8BIT, 0x3809, 0xb0},
-	{OV2680_8BIT, 0x380a, 0x04},
-	{OV2680_8BIT, 0x380b, 0x48},
-	{OV2680_8BIT, 0x380c, 0x06},
-	{OV2680_8BIT, 0x380d, 0xa8},
-	{OV2680_8BIT, 0x380e, 0x05},
-	{OV2680_8BIT, 0x380f, 0x0e},
-	{OV2680_8BIT, 0x3810, 0x00},
-	{OV2680_8BIT, 0x3811, 0x08},
-	{OV2680_8BIT, 0x3812, 0x00},
-	{OV2680_8BIT, 0x3813, 0x00},
-	{OV2680_8BIT, 0x3814, 0x11},
-	{OV2680_8BIT, 0x3815, 0x11},
-	{OV2680_8BIT, 0x4008, 0x02},
-	{OV2680_8BIT, 0x4009, 0x09},
-	{OV2680_8BIT, 0x5081, 0x41},
-	{OV2680_8BIT, 0x5708, 0x00}, //add for full size flip off and mirror off 2014/09/11
-	{OV2680_8BIT, 0x5704, 0x10},
-	{OV2680_8BIT, 0x5705, 0xa0},
-	{OV2680_8BIT, 0x5706, 0x0c},
-	{OV2680_8BIT, 0x5707, 0x78},
-	{OV2680_8BIT, 0x3820, 0xc0},
-	{OV2680_8BIT, 0x3821, 0x00},
-	// {OV2680_8BIT, 0x5090, 0x0c},
-	{OV2680_TOK_TERM, 0, 0}
+	{0x3086, 0x00},
+	{0x3501, 0x48},
+	{0x3502, 0xe0},
+	{0x370a, 0x21},
+	{0x3801, 0x90},
+	{0x3802, 0x00},
+	{0x3803, 0x78},
+	{0x3804, 0x06},
+	{0x3805, 0x4f},
+	{0x3806, 0x04},
+	{0x3807, 0xC0},
+	{0x3808, 0x05},
+	{0x3809, 0xb0},
+	{0x380a, 0x04},
+	{0x380b, 0x48},
+	{0x380c, 0x06},
+	{0x380d, 0xa8},
+	{0x380e, 0x05},
+	{0x380f, 0x0e},
+	{0x3810, 0x00},
+	{0x3811, 0x08},
+	{0x3812, 0x00},
+	{0x3813, 0x00},
+	{0x3814, 0x11},
+	{0x3815, 0x11},
+	{0x4008, 0x02},
+	{0x4009, 0x09},
+	{0x5081, 0x41},
+	{0x5708, 0x00}, //add for full size flip off and mirror off 2014/09/11
+	{0x5704, 0x10},
+	{0x5705, 0xa0},
+	{0x5706, 0x0c},
+	{0x5707, 0x78},
+	{0x3820, 0xc0},
+	{0x3821, 0x00},
+	// {0x5090, 0x0c},
+	{}
 };
 #endif
 
@@ -688,43 +678,43 @@ static struct ov2680_reg const ov2680_1456x1096_30fps[] = {
  */
 
 static struct ov2680_reg const ov2680_1616x916_30fps[] = {
-	{OV2680_8BIT, 0x3086, 0x00},
-	{OV2680_8BIT, 0x3501, 0x48},
-	{OV2680_8BIT, 0x3502, 0xe0},
-	{OV2680_8BIT, 0x370a, 0x21},
-	{OV2680_8BIT, 0x3801, 0x00},
-	{OV2680_8BIT, 0x3802, 0x00},
-	{OV2680_8BIT, 0x3803, 0x96},
-	{OV2680_8BIT, 0x3804, 0x06},
-	{OV2680_8BIT, 0x3805, 0x4f},
-	{OV2680_8BIT, 0x3806, 0x04},
-	{OV2680_8BIT, 0x3807, 0x39},
-	{OV2680_8BIT, 0x3808, 0x06},
-	{OV2680_8BIT, 0x3809, 0x50},
-	{OV2680_8BIT, 0x380a, 0x03},
-	{OV2680_8BIT, 0x380b, 0x94},
-	{OV2680_8BIT, 0x380c, 0x06},
-	{OV2680_8BIT, 0x380d, 0xa8},
-	{OV2680_8BIT, 0x380e, 0x05},
-	{OV2680_8BIT, 0x380f, 0x0e},
-	{OV2680_8BIT, 0x3810, 0x00},
-	{OV2680_8BIT, 0x3811, 0x00},
-	{OV2680_8BIT, 0x3812, 0x00},
-	{OV2680_8BIT, 0x3813, 0x08},
-	{OV2680_8BIT, 0x3814, 0x11},
-	{OV2680_8BIT, 0x3815, 0x11},
-	{OV2680_8BIT, 0x4008, 0x02},
-	{OV2680_8BIT, 0x4009, 0x09},
-	{OV2680_8BIT, 0x5081, 0x41},
-	{OV2680_8BIT, 0x5708, 0x01}, //add for full size flip off and mirror off 2014/09/11
-	{OV2680_8BIT, 0x5704, 0x06},
-	{OV2680_8BIT, 0x5705, 0x50},
-	{OV2680_8BIT, 0x5706, 0x03},
-	{OV2680_8BIT, 0x5707, 0x94},
-	{OV2680_8BIT, 0x3820, 0xc0},
-	{OV2680_8BIT, 0x3821, 0x00},
-	// {OV2680_8BIT, 0x5090, 0x0C},
-	{OV2680_TOK_TERM, 0, 0}
+	{0x3086, 0x00},
+	{0x3501, 0x48},
+	{0x3502, 0xe0},
+	{0x370a, 0x21},
+	{0x3801, 0x00},
+	{0x3802, 0x00},
+	{0x3803, 0x96},
+	{0x3804, 0x06},
+	{0x3805, 0x4f},
+	{0x3806, 0x04},
+	{0x3807, 0x39},
+	{0x3808, 0x06},
+	{0x3809, 0x50},
+	{0x380a, 0x03},
+	{0x380b, 0x94},
+	{0x380c, 0x06},
+	{0x380d, 0xa8},
+	{0x380e, 0x05},
+	{0x380f, 0x0e},
+	{0x3810, 0x00},
+	{0x3811, 0x00},
+	{0x3812, 0x00},
+	{0x3813, 0x08},
+	{0x3814, 0x11},
+	{0x3815, 0x11},
+	{0x4008, 0x02},
+	{0x4009, 0x09},
+	{0x5081, 0x41},
+	{0x5708, 0x01}, //add for full size flip off and mirror off 2014/09/11
+	{0x5704, 0x06},
+	{0x5705, 0x50},
+	{0x5706, 0x03},
+	{0x5707, 0x94},
+	{0x3820, 0xc0},
+	{0x3821, 0x00},
+	// {0x5090, 0x0C},
+	{}
 };
 
 /*
@@ -732,86 +722,86 @@ static struct ov2680_reg const ov2680_1616x916_30fps[] = {
  */
 #if 0
 static struct ov2680_reg const ov2680_1616x1082_30fps[] = {
-	{OV2680_8BIT, 0x3086, 0x00},
-	{OV2680_8BIT, 0x3501, 0x48},
-	{OV2680_8BIT, 0x3502, 0xe0},
-	{OV2680_8BIT, 0x370a, 0x21},
-	{OV2680_8BIT, 0x3801, 0x00},
-	{OV2680_8BIT, 0x3802, 0x00},
-	{OV2680_8BIT, 0x3803, 0x86},
-	{OV2680_8BIT, 0x3804, 0x06},
-	{OV2680_8BIT, 0x3805, 0x4f},
-	{OV2680_8BIT, 0x3806, 0x04},
-	{OV2680_8BIT, 0x3807, 0xbf},
-	{OV2680_8BIT, 0x3808, 0x06},
-	{OV2680_8BIT, 0x3809, 0x50},
-	{OV2680_8BIT, 0x380a, 0x04},
-	{OV2680_8BIT, 0x380b, 0x3a},
-	{OV2680_8BIT, 0x380c, 0x06},
-	{OV2680_8BIT, 0x380d, 0xa8},
-	{OV2680_8BIT, 0x380e, 0x05},
-	{OV2680_8BIT, 0x380f, 0x0e},
-	{OV2680_8BIT, 0x3810, 0x00},
-	{OV2680_8BIT, 0x3811, 0x00},
-	{OV2680_8BIT, 0x3812, 0x00},
-	{OV2680_8BIT, 0x3813, 0x00},
-	{OV2680_8BIT, 0x3814, 0x11},
-	{OV2680_8BIT, 0x3815, 0x11},
-	{OV2680_8BIT, 0x5708, 0x01}, //add for full size flip off and mirror off 2014/09/11
-	{OV2680_8BIT, 0x5704, 0x06},
-	{OV2680_8BIT, 0x5705, 0x50},
-	{OV2680_8BIT, 0x5706, 0x04},
-	{OV2680_8BIT, 0x5707, 0x3a},
-	{OV2680_8BIT, 0x3820, 0xc0},
-	{OV2680_8BIT, 0x3821, 0x00},
-	// {OV2680_8BIT, 0x5090, 0x0C},
-	{OV2680_8BIT, 0x4008, 0x02},
-	{OV2680_8BIT, 0x4009, 0x09},
-	{OV2680_8BIT, 0x5081, 0x41},
-	{OV2680_TOK_TERM, 0, 0}
+	{0x3086, 0x00},
+	{0x3501, 0x48},
+	{0x3502, 0xe0},
+	{0x370a, 0x21},
+	{0x3801, 0x00},
+	{0x3802, 0x00},
+	{0x3803, 0x86},
+	{0x3804, 0x06},
+	{0x3805, 0x4f},
+	{0x3806, 0x04},
+	{0x3807, 0xbf},
+	{0x3808, 0x06},
+	{0x3809, 0x50},
+	{0x380a, 0x04},
+	{0x380b, 0x3a},
+	{0x380c, 0x06},
+	{0x380d, 0xa8},
+	{0x380e, 0x05},
+	{0x380f, 0x0e},
+	{0x3810, 0x00},
+	{0x3811, 0x00},
+	{0x3812, 0x00},
+	{0x3813, 0x00},
+	{0x3814, 0x11},
+	{0x3815, 0x11},
+	{0x5708, 0x01}, //add for full size flip off and mirror off 2014/09/11
+	{0x5704, 0x06},
+	{0x5705, 0x50},
+	{0x5706, 0x04},
+	{0x5707, 0x3a},
+	{0x3820, 0xc0},
+	{0x3821, 0x00},
+	// {0x5090, 0x0C},
+	{0x4008, 0x02},
+	{0x4009, 0x09},
+	{0x5081, 0x41},
+	{}
 };
 #endif
 /*
  * 1616x1216 30fps VBlanking 1lane 10Bit
  */
 static struct ov2680_reg const ov2680_1616x1216_30fps[] = {
-	{OV2680_8BIT, 0x3086, 0x00},
-	{OV2680_8BIT, 0x3501, 0x48},
-	{OV2680_8BIT, 0x3502, 0xe0},
-	{OV2680_8BIT, 0x370a, 0x21},
-	{OV2680_8BIT, 0x3801, 0x00},
-	{OV2680_8BIT, 0x3802, 0x00},
-	{OV2680_8BIT, 0x3803, 0x00},
-	{OV2680_8BIT, 0x3804, 0x06},
-	{OV2680_8BIT, 0x3805, 0x4f},
-	{OV2680_8BIT, 0x3806, 0x04},
-	{OV2680_8BIT, 0x3807, 0xbf},
-	{OV2680_8BIT, 0x3808, 0x06},
-	{OV2680_8BIT, 0x3809, 0x50},//50},//4line for mirror and flip
-	{OV2680_8BIT, 0x380a, 0x04},
-	{OV2680_8BIT, 0x380b, 0xc0},//c0},
-	{OV2680_8BIT, 0x380c, 0x06},
-	{OV2680_8BIT, 0x380d, 0xa8},
-	{OV2680_8BIT, 0x380e, 0x05},
-	{OV2680_8BIT, 0x380f, 0x0e},
-	{OV2680_8BIT, 0x3810, 0x00},
-	{OV2680_8BIT, 0x3811, 0x00},
-	{OV2680_8BIT, 0x3812, 0x00},
-	{OV2680_8BIT, 0x3813, 0x00},
-	{OV2680_8BIT, 0x3814, 0x11},
-	{OV2680_8BIT, 0x3815, 0x11},
-	{OV2680_8BIT, 0x4008, 0x00},
-	{OV2680_8BIT, 0x4009, 0x0b},
-	{OV2680_8BIT, 0x5081, 0x01},
-	{OV2680_8BIT, 0x5708, 0x01}, //add for full size flip off and mirror off 2014/09/11
-	{OV2680_8BIT, 0x5704, 0x06},
-	{OV2680_8BIT, 0x5705, 0x50},
-	{OV2680_8BIT, 0x5706, 0x04},
-	{OV2680_8BIT, 0x5707, 0xcc},
-	{OV2680_8BIT, 0x3820, 0xc0},
-	{OV2680_8BIT, 0x3821, 0x00},
-	// {OV2680_8BIT, 0x5090, 0x0C},
-	{OV2680_TOK_TERM, 0, 0}
+	{0x3086, 0x00},
+	{0x3501, 0x48},
+	{0x3502, 0xe0},
+	{0x370a, 0x21},
+	{0x3801, 0x00},
+	{0x3802, 0x00},
+	{0x3803, 0x00},
+	{0x3804, 0x06},
+	{0x3805, 0x4f},
+	{0x3806, 0x04},
+	{0x3807, 0xbf},
+	{0x3808, 0x06},
+	{0x3809, 0x50},//50},//4line for mirror and flip
+	{0x380a, 0x04},
+	{0x380b, 0xc0},//c0},
+	{0x380c, 0x06},
+	{0x380d, 0xa8},
+	{0x380e, 0x05},
+	{0x380f, 0x0e},
+	{0x3810, 0x00},
+	{0x3811, 0x00},
+	{0x3812, 0x00},
+	{0x3813, 0x00},
+	{0x3814, 0x11},
+	{0x3815, 0x11},
+	{0x4008, 0x00},
+	{0x4009, 0x0b},
+	{0x5081, 0x01},
+	{0x5708, 0x01}, //add for full size flip off and mirror off 2014/09/11
+	{0x5704, 0x06},
+	{0x5705, 0x50},
+	{0x5706, 0x04},
+	{0x5707, 0xcc},
+	{0x3820, 0xc0},
+	{0x3821, 0x00},
+	// {0x5090, 0x0C},
+	{}
 };
 
 static struct ov2680_resolution ov2680_res_preview[] = {

commit eaa399eb542cdfc5748a32634ba3d5cffb5517cd
Author: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
Date:   Sun Apr 19 17:51:29 2020 +0200

    media: atomisp: do lots of other coding style cleanups
    
    Use some auto-reformat tools to make the atomisp style
    a little better. There are still lots of weird things there,
    but this will hopefully reduce the number of pure coding
    style patches submitted upstream.
    
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>

diff --git a/drivers/staging/media/atomisp/i2c/ov2680.h b/drivers/staging/media/atomisp/i2c/ov2680.h
index d216d827e573..741d0e2e0398 100644
--- a/drivers/staging/media/atomisp/i2c/ov2680.h
+++ b/drivers/staging/media/atomisp/i2c/ov2680.h
@@ -162,659 +162,659 @@ struct ov2680_format {
 	struct ov2680_reg *regs;
 };
 
-	/*
-	 * ov2680 device structure.
-	 */
-	struct ov2680_device {
-		struct v4l2_subdev sd;
-		struct media_pad pad;
-		struct v4l2_mbus_framefmt format;
-		struct mutex input_lock;
+/*
+ * ov2680 device structure.
+ */
+struct ov2680_device {
+	struct v4l2_subdev sd;
+	struct media_pad pad;
+	struct v4l2_mbus_framefmt format;
+	struct mutex input_lock;
 	struct v4l2_ctrl_handler ctrl_handler;
-		struct camera_sensor_platform_data *platform_data;
-		int vt_pix_clk_freq_mhz;
-		int fmt_idx;
-		int run_mode;
-		u8 res;
-		u8 type;
-	};
-
-	enum ov2680_tok_type {
-		OV2680_8BIT  = 0x0001,
-		OV2680_16BIT = 0x0002,
-		OV2680_32BIT = 0x0004,
-		OV2680_TOK_TERM   = 0xf000,	/* terminating token for reg list */
-		OV2680_TOK_DELAY  = 0xfe00,	/* delay token for reg list */
-		OV2680_TOK_MASK = 0xfff0
-	};
-
-	/**
-	 * struct ov2680_reg - MI sensor  register format
-	 * @type: type of the register
-	 * @reg: 16-bit offset to register
-	 * @val: 8/16/32-bit register value
-	 *
-	 * Define a structure for sensor register initialization values
-	 */
-	struct ov2680_reg {
-		enum ov2680_tok_type type;
-		u16 reg;
-		u32 val;	/* @set value for read/mod/write, @mask */
-	};
-
-	#define to_ov2680_sensor(x) container_of(x, struct ov2680_device, sd)
-
-	#define OV2680_MAX_WRITE_BUF_SIZE	30
-
-	struct ov2680_write_buffer {
-		u16 addr;
-		u8 data[OV2680_MAX_WRITE_BUF_SIZE];
-	};
-
-	struct ov2680_write_ctrl {
-		int index;
-		struct ov2680_write_buffer buffer;
-	};
-
-	static struct ov2680_reg const ov2680_global_setting[] = {
-	    {OV2680_8BIT, 0x0103, 0x01},
-	    {OV2680_8BIT, 0x3002, 0x00},
-	    {OV2680_8BIT, 0x3016, 0x1c},
-	    {OV2680_8BIT, 0x3018, 0x44},
-	    {OV2680_8BIT, 0x3020, 0x00},
-	    {OV2680_8BIT, 0x3080, 0x02},
-	    {OV2680_8BIT, 0x3082, 0x45},
-	    {OV2680_8BIT, 0x3084, 0x09},
-	    {OV2680_8BIT, 0x3085, 0x04},
-	    {OV2680_8BIT, 0x3503, 0x03},
-	    {OV2680_8BIT, 0x350b, 0x36},
-	    {OV2680_8BIT, 0x3600, 0xb4},
-	    {OV2680_8BIT, 0x3603, 0x39},
-	    {OV2680_8BIT, 0x3604, 0x24},
-	    {OV2680_8BIT, 0x3605, 0x00},
-	    {OV2680_8BIT, 0x3620, 0x26},
-	    {OV2680_8BIT, 0x3621, 0x37},
-	    {OV2680_8BIT, 0x3622, 0x04},
-	    {OV2680_8BIT, 0x3628, 0x00},
-	    {OV2680_8BIT, 0x3705, 0x3c},
-	    {OV2680_8BIT, 0x370c, 0x50},
-	    {OV2680_8BIT, 0x370d, 0xc0},
-	    {OV2680_8BIT, 0x3718, 0x88},
-	    {OV2680_8BIT, 0x3720, 0x00},
-	    {OV2680_8BIT, 0x3721, 0x00},
-	    {OV2680_8BIT, 0x3722, 0x00},
-	    {OV2680_8BIT, 0x3723, 0x00},
-	    {OV2680_8BIT, 0x3738, 0x00},
-	    {OV2680_8BIT, 0x3717, 0x58},
-	    {OV2680_8BIT, 0x3781, 0x80},
-	    {OV2680_8BIT, 0x3789, 0x60},
-	    {OV2680_8BIT, 0x3800, 0x00},
-	    {OV2680_8BIT, 0x3819, 0x04},
-	    {OV2680_8BIT, 0x4000, 0x81},
-	    {OV2680_8BIT, 0x4001, 0x40},
-	    {OV2680_8BIT, 0x4602, 0x02},
-	    {OV2680_8BIT, 0x481f, 0x36},
-	    {OV2680_8BIT, 0x4825, 0x36},
-	    {OV2680_8BIT, 0x4837, 0x18},
-	    {OV2680_8BIT, 0x5002, 0x30},
-	    {OV2680_8BIT, 0x5004, 0x04},//manual awb 1x
-	    {OV2680_8BIT, 0x5005, 0x00},
-	    {OV2680_8BIT, 0x5006, 0x04},
-	    {OV2680_8BIT, 0x5007, 0x00},
-	    {OV2680_8BIT, 0x5008, 0x04},
-	    {OV2680_8BIT, 0x5009, 0x00},
-	    {OV2680_8BIT, 0x5080, 0x00},
-	    {OV2680_8BIT, 0x3701, 0x64},  //add on 14/05/13
-	    {OV2680_8BIT, 0x3784, 0x0c},  //based OV2680_R1A_AM10.ovt add on 14/06/13
-	    {OV2680_8BIT, 0x5780, 0x3e},  //based OV2680_R1A_AM10.ovt,Adjust DPC setting (57xx) on 14/06/13
-	    {OV2680_8BIT, 0x5781, 0x0f},
-	    {OV2680_8BIT, 0x5782, 0x04},
-	    {OV2680_8BIT, 0x5783, 0x02},
-	    {OV2680_8BIT, 0x5784, 0x01},
-	    {OV2680_8BIT, 0x5785, 0x01},
-	    {OV2680_8BIT, 0x5786, 0x00},
-	    {OV2680_8BIT, 0x5787, 0x04},
-	    {OV2680_8BIT, 0x5788, 0x02},
-	    {OV2680_8BIT, 0x5789, 0x00},
-	    {OV2680_8BIT, 0x578a, 0x01},
-	    {OV2680_8BIT, 0x578b, 0x02},
-	    {OV2680_8BIT, 0x578c, 0x03},
-	    {OV2680_8BIT, 0x578d, 0x03},
-	    {OV2680_8BIT, 0x578e, 0x08},
-	    {OV2680_8BIT, 0x578f, 0x0c},
-	    {OV2680_8BIT, 0x5790, 0x08},
-	    {OV2680_8BIT, 0x5791, 0x04},
-	    {OV2680_8BIT, 0x5792, 0x00},
-	    {OV2680_8BIT, 0x5793, 0x00},
-	    {OV2680_8BIT, 0x5794, 0x03}, //based OV2680_R1A_AM10.ovt,Adjust DPC setting (57xx) on 14/06/13
-		{OV2680_8BIT, 0x0100, 0x00},	//stream off
-
-		{OV2680_TOK_TERM, 0, 0}
-	};
+	struct camera_sensor_platform_data *platform_data;
+	int vt_pix_clk_freq_mhz;
+	int fmt_idx;
+	int run_mode;
+	u8 res;
+	u8 type;
+};
+
+enum ov2680_tok_type {
+	OV2680_8BIT  = 0x0001,
+	OV2680_16BIT = 0x0002,
+	OV2680_32BIT = 0x0004,
+	OV2680_TOK_TERM   = 0xf000,	/* terminating token for reg list */
+	OV2680_TOK_DELAY  = 0xfe00,	/* delay token for reg list */
+	OV2680_TOK_MASK = 0xfff0
+};
+
+/**
+ * struct ov2680_reg - MI sensor  register format
+ * @type: type of the register
+ * @reg: 16-bit offset to register
+ * @val: 8/16/32-bit register value
+ *
+ * Define a structure for sensor register initialization values
+ */
+struct ov2680_reg {
+	enum ov2680_tok_type type;
+	u16 reg;
+	u32 val;	/* @set value for read/mod/write, @mask */
+};
+
+#define to_ov2680_sensor(x) container_of(x, struct ov2680_device, sd)
+
+#define OV2680_MAX_WRITE_BUF_SIZE	30
+
+struct ov2680_write_buffer {
+	u16 addr;
+	u8 data[OV2680_MAX_WRITE_BUF_SIZE];
+};
+
+struct ov2680_write_ctrl {
+	int index;
+	struct ov2680_write_buffer buffer;
+};
+
+static struct ov2680_reg const ov2680_global_setting[] = {
+	{OV2680_8BIT, 0x0103, 0x01},
+	{OV2680_8BIT, 0x3002, 0x00},
+	{OV2680_8BIT, 0x3016, 0x1c},
+	{OV2680_8BIT, 0x3018, 0x44},
+	{OV2680_8BIT, 0x3020, 0x00},
+	{OV2680_8BIT, 0x3080, 0x02},
+	{OV2680_8BIT, 0x3082, 0x45},
+	{OV2680_8BIT, 0x3084, 0x09},
+	{OV2680_8BIT, 0x3085, 0x04},
+	{OV2680_8BIT, 0x3503, 0x03},
+	{OV2680_8BIT, 0x350b, 0x36},
+	{OV2680_8BIT, 0x3600, 0xb4},
+	{OV2680_8BIT, 0x3603, 0x39},
+	{OV2680_8BIT, 0x3604, 0x24},
+	{OV2680_8BIT, 0x3605, 0x00},
+	{OV2680_8BIT, 0x3620, 0x26},
+	{OV2680_8BIT, 0x3621, 0x37},
+	{OV2680_8BIT, 0x3622, 0x04},
+	{OV2680_8BIT, 0x3628, 0x00},
+	{OV2680_8BIT, 0x3705, 0x3c},
+	{OV2680_8BIT, 0x370c, 0x50},
+	{OV2680_8BIT, 0x370d, 0xc0},
+	{OV2680_8BIT, 0x3718, 0x88},
+	{OV2680_8BIT, 0x3720, 0x00},
+	{OV2680_8BIT, 0x3721, 0x00},
+	{OV2680_8BIT, 0x3722, 0x00},
+	{OV2680_8BIT, 0x3723, 0x00},
+	{OV2680_8BIT, 0x3738, 0x00},
+	{OV2680_8BIT, 0x3717, 0x58},
+	{OV2680_8BIT, 0x3781, 0x80},
+	{OV2680_8BIT, 0x3789, 0x60},
+	{OV2680_8BIT, 0x3800, 0x00},
+	{OV2680_8BIT, 0x3819, 0x04},
+	{OV2680_8BIT, 0x4000, 0x81},
+	{OV2680_8BIT, 0x4001, 0x40},
+	{OV2680_8BIT, 0x4602, 0x02},
+	{OV2680_8BIT, 0x481f, 0x36},
+	{OV2680_8BIT, 0x4825, 0x36},
+	{OV2680_8BIT, 0x4837, 0x18},
+	{OV2680_8BIT, 0x5002, 0x30},
+	{OV2680_8BIT, 0x5004, 0x04},//manual awb 1x
+	{OV2680_8BIT, 0x5005, 0x00},
+	{OV2680_8BIT, 0x5006, 0x04},
+	{OV2680_8BIT, 0x5007, 0x00},
+	{OV2680_8BIT, 0x5008, 0x04},
+	{OV2680_8BIT, 0x5009, 0x00},
+	{OV2680_8BIT, 0x5080, 0x00},
+	{OV2680_8BIT, 0x3701, 0x64},  //add on 14/05/13
+	{OV2680_8BIT, 0x3784, 0x0c},  //based OV2680_R1A_AM10.ovt add on 14/06/13
+	{OV2680_8BIT, 0x5780, 0x3e},  //based OV2680_R1A_AM10.ovt,Adjust DPC setting (57xx) on 14/06/13
+	{OV2680_8BIT, 0x5781, 0x0f},
+	{OV2680_8BIT, 0x5782, 0x04},
+	{OV2680_8BIT, 0x5783, 0x02},
+	{OV2680_8BIT, 0x5784, 0x01},
+	{OV2680_8BIT, 0x5785, 0x01},
+	{OV2680_8BIT, 0x5786, 0x00},
+	{OV2680_8BIT, 0x5787, 0x04},
+	{OV2680_8BIT, 0x5788, 0x02},
+	{OV2680_8BIT, 0x5789, 0x00},
+	{OV2680_8BIT, 0x578a, 0x01},
+	{OV2680_8BIT, 0x578b, 0x02},
+	{OV2680_8BIT, 0x578c, 0x03},
+	{OV2680_8BIT, 0x578d, 0x03},
+	{OV2680_8BIT, 0x578e, 0x08},
+	{OV2680_8BIT, 0x578f, 0x0c},
+	{OV2680_8BIT, 0x5790, 0x08},
+	{OV2680_8BIT, 0x5791, 0x04},
+	{OV2680_8BIT, 0x5792, 0x00},
+	{OV2680_8BIT, 0x5793, 0x00},
+	{OV2680_8BIT, 0x5794, 0x03}, //based OV2680_R1A_AM10.ovt,Adjust DPC setting (57xx) on 14/06/13
+	{OV2680_8BIT, 0x0100, 0x00},	//stream off
+
+	{OV2680_TOK_TERM, 0, 0}
+};
 
 #if 0 /* None of the definitions below are used currently */
-	/*
-	 * 176x144 30fps  VBlanking 1lane 10Bit (binning)
-	 */
-	static struct ov2680_reg const ov2680_QCIF_30fps[] = {
-		{OV2680_8BIT, 0x3086, 0x01},
-		{OV2680_8BIT, 0x3501, 0x24},
-		{OV2680_8BIT, 0x3502, 0x40},
-		{OV2680_8BIT, 0x370a, 0x23},
-		{OV2680_8BIT, 0x3801, 0xa0},
-		{OV2680_8BIT, 0x3802, 0x00},
-		{OV2680_8BIT, 0x3803, 0x78},
-		{OV2680_8BIT, 0x3804, 0x05},
-		{OV2680_8BIT, 0x3805, 0xaf},
-		{OV2680_8BIT, 0x3806, 0x04},
-		{OV2680_8BIT, 0x3807, 0x47},
-		{OV2680_8BIT, 0x3808, 0x00},
-		{OV2680_8BIT, 0x3809, 0xC0},
-		{OV2680_8BIT, 0x380a, 0x00},
-		{OV2680_8BIT, 0x380b, 0xa0},
-		{OV2680_8BIT, 0x380c, 0x06},
-		{OV2680_8BIT, 0x380d, 0xb0},
-		{OV2680_8BIT, 0x380e, 0x02},
-		{OV2680_8BIT, 0x380f, 0x84},
-		{OV2680_8BIT, 0x3810, 0x00},
-		{OV2680_8BIT, 0x3811, 0x04},
-		{OV2680_8BIT, 0x3812, 0x00},
-		{OV2680_8BIT, 0x3813, 0x04},
-		{OV2680_8BIT, 0x3814, 0x31},
-		{OV2680_8BIT, 0x3815, 0x31},
-		{OV2680_8BIT, 0x4000, 0x81},
-		{OV2680_8BIT, 0x4001, 0x40},
-		{OV2680_8BIT, 0x4008, 0x00},
-		{OV2680_8BIT, 0x4009, 0x03},
-		{OV2680_8BIT, 0x5081, 0x41},
-		{OV2680_8BIT, 0x5708, 0x00}, //add for full size flip off and mirror off 2014/09/11
-		{OV2680_8BIT, 0x5704, 0x10},
-		{OV2680_8BIT, 0x5705, 0xa0},
-		{OV2680_8BIT, 0x5706, 0x0c},
-		{OV2680_8BIT, 0x5707, 0x78},
-		{OV2680_8BIT, 0x3820, 0xc2},
-		{OV2680_8BIT, 0x3821, 0x01},
-		// {OV2680_8BIT, 0x5090, 0x0c},
-		{OV2680_TOK_TERM, 0, 0}
-	};
-
-	/*
-	 * 352x288 30fps  VBlanking 1lane 10Bit (binning)
-	 */
-	static struct ov2680_reg const ov2680_CIF_30fps[] = {
-		{OV2680_8BIT, 0x3086, 0x01},
-		{OV2680_8BIT, 0x3501, 0x24},
-		{OV2680_8BIT, 0x3502, 0x40},
-		{OV2680_8BIT, 0x370a, 0x23},
-		{OV2680_8BIT, 0x3801, 0xa0},
-		{OV2680_8BIT, 0x3802, 0x00},
-		{OV2680_8BIT, 0x3803, 0x78},
-		{OV2680_8BIT, 0x3804, 0x03},
-		{OV2680_8BIT, 0x3805, 0x8f},
-		{OV2680_8BIT, 0x3806, 0x02},
-		{OV2680_8BIT, 0x3807, 0xe7},
-		{OV2680_8BIT, 0x3808, 0x01},
-		{OV2680_8BIT, 0x3809, 0x70},
-		{OV2680_8BIT, 0x380a, 0x01},
-		{OV2680_8BIT, 0x380b, 0x30},
-		{OV2680_8BIT, 0x380c, 0x06},
-		{OV2680_8BIT, 0x380d, 0xb0},
-		{OV2680_8BIT, 0x380e, 0x02},
-		{OV2680_8BIT, 0x380f, 0x84},
-		{OV2680_8BIT, 0x3810, 0x00},
-		{OV2680_8BIT, 0x3811, 0x04},
-		{OV2680_8BIT, 0x3812, 0x00},
-		{OV2680_8BIT, 0x3813, 0x04},
-		{OV2680_8BIT, 0x3814, 0x31},
-		{OV2680_8BIT, 0x3815, 0x31},
-		{OV2680_8BIT, 0x4008, 0x00},
-		{OV2680_8BIT, 0x4009, 0x03},
-		{OV2680_8BIT, 0x5081, 0x41},
-		{OV2680_8BIT, 0x5708, 0x00}, //add for full size flip off and mirror off 2014/09/11
-		{OV2680_8BIT, 0x5704, 0x10},
-		{OV2680_8BIT, 0x5705, 0xa0},
-		{OV2680_8BIT, 0x5706, 0x0c},
-		{OV2680_8BIT, 0x5707, 0x78},
-		{OV2680_8BIT, 0x3820, 0xc2},
-		{OV2680_8BIT, 0x3821, 0x01},
-		// {OV2680_8BIT, 0x5090, 0x0c},
-		{OV2680_TOK_TERM, 0, 0}
-	};
-
-	/*
-	 * 336x256 30fps  VBlanking 1lane 10Bit (binning)
-	 */
-	static struct ov2680_reg const ov2680_QVGA_30fps[] = {
-		{OV2680_8BIT, 0x3086, 0x01},
-		{OV2680_8BIT, 0x3501, 0x24},
-		{OV2680_8BIT, 0x3502, 0x40},
-		{OV2680_8BIT, 0x370a, 0x23},
-		{OV2680_8BIT, 0x3801, 0xa0},
-		{OV2680_8BIT, 0x3802, 0x00},
-		{OV2680_8BIT, 0x3803, 0x78},
-		{OV2680_8BIT, 0x3804, 0x03},
-		{OV2680_8BIT, 0x3805, 0x4f},
-		{OV2680_8BIT, 0x3806, 0x02},
-		{OV2680_8BIT, 0x3807, 0x87},
-		{OV2680_8BIT, 0x3808, 0x01},
-		{OV2680_8BIT, 0x3809, 0x50},
-		{OV2680_8BIT, 0x380a, 0x01},
-		{OV2680_8BIT, 0x380b, 0x00},
-		{OV2680_8BIT, 0x380c, 0x06},
-		{OV2680_8BIT, 0x380d, 0xb0},
-		{OV2680_8BIT, 0x380e, 0x02},
-		{OV2680_8BIT, 0x380f, 0x84},
-		{OV2680_8BIT, 0x3810, 0x00},
-		{OV2680_8BIT, 0x3811, 0x04},
-		{OV2680_8BIT, 0x3812, 0x00},
-		{OV2680_8BIT, 0x3813, 0x04},
-		{OV2680_8BIT, 0x3814, 0x31},
-		{OV2680_8BIT, 0x3815, 0x31},
-		{OV2680_8BIT, 0x4008, 0x00},
-		{OV2680_8BIT, 0x4009, 0x03},
-		{OV2680_8BIT, 0x5081, 0x41},
-		{OV2680_8BIT, 0x5708, 0x00}, //add for full size flip off and mirror off 2014/09/11
-		{OV2680_8BIT, 0x5704, 0x10},
-		{OV2680_8BIT, 0x5705, 0xa0},
-		{OV2680_8BIT, 0x5706, 0x0c},
-		{OV2680_8BIT, 0x5707, 0x78},
-		{OV2680_8BIT, 0x3820, 0xc2},
-		{OV2680_8BIT, 0x3821, 0x01},
-		// {OV2680_8BIT, 0x5090, 0x0c},
-		{OV2680_TOK_TERM, 0, 0}
-	};
-
-	/*
-	 * 656x496 30fps  VBlanking 1lane 10Bit (binning)
-	 */
-	static struct ov2680_reg const ov2680_656x496_30fps[] = {
-		{OV2680_8BIT, 0x3086, 0x01},
-		{OV2680_8BIT, 0x3501, 0x24},
-		{OV2680_8BIT, 0x3502, 0x40},
-		{OV2680_8BIT, 0x370a, 0x23},
-		{OV2680_8BIT, 0x3801, 0xa0},
-		{OV2680_8BIT, 0x3802, 0x00},
-		{OV2680_8BIT, 0x3803, 0x78},
-		{OV2680_8BIT, 0x3804, 0x05},
-		{OV2680_8BIT, 0x3805, 0xcf},
-		{OV2680_8BIT, 0x3806, 0x04},
-		{OV2680_8BIT, 0x3807, 0x67},
-		{OV2680_8BIT, 0x3808, 0x02},
-		{OV2680_8BIT, 0x3809, 0x90},
-		{OV2680_8BIT, 0x380a, 0x01},
-		{OV2680_8BIT, 0x380b, 0xf0},
-		{OV2680_8BIT, 0x380c, 0x06},
-		{OV2680_8BIT, 0x380d, 0xb0},
-		{OV2680_8BIT, 0x380e, 0x02},
-		{OV2680_8BIT, 0x380f, 0x84},
-		{OV2680_8BIT, 0x3810, 0x00},
-		{OV2680_8BIT, 0x3811, 0x04},
-		{OV2680_8BIT, 0x3812, 0x00},
-		{OV2680_8BIT, 0x3813, 0x04},
-		{OV2680_8BIT, 0x3814, 0x31},
-		{OV2680_8BIT, 0x3815, 0x31},
-		{OV2680_8BIT, 0x4008, 0x00},
-		{OV2680_8BIT, 0x4009, 0x03},
-		{OV2680_8BIT, 0x5081, 0x41},
-		{OV2680_8BIT, 0x5708, 0x00}, //add for full size flip off and mirror off 2014/09/11
-		{OV2680_8BIT, 0x5704, 0x10},
-		{OV2680_8BIT, 0x5705, 0xa0},
-		{OV2680_8BIT, 0x5706, 0x0c},
-		{OV2680_8BIT, 0x5707, 0x78},
-		{OV2680_8BIT, 0x3820, 0xc2},
-		{OV2680_8BIT, 0x3821, 0x01},
-		// {OV2680_8BIT, 0x5090, 0x0c},
-		{OV2680_TOK_TERM, 0, 0}
-	};
-	/*
-	* 800x600 30fps  VBlanking 1lane 10Bit (binning)
-	*/
-	static struct ov2680_reg const ov2680_720x592_30fps[] = {
-		{OV2680_8BIT, 0x3086, 0x01},
-		{OV2680_8BIT, 0x3501, 0x26},
-		{OV2680_8BIT, 0x3502, 0x40},
-		{OV2680_8BIT, 0x370a, 0x23},
-		{OV2680_8BIT, 0x3801, 0x00}, // X_ADDR_START;
-		{OV2680_8BIT, 0x3802, 0x00},
-		{OV2680_8BIT, 0x3803, 0x00}, // Y_ADDR_START;
-		{OV2680_8BIT, 0x3804, 0x05},
-		{OV2680_8BIT, 0x3805, 0xaf}, // X_ADDR_END;
-		{OV2680_8BIT, 0x3806, 0x04},
-		{OV2680_8BIT, 0x3807, 0xaf}, // Y_ADDR_END;
-		{OV2680_8BIT, 0x3808, 0x02},
-		{OV2680_8BIT, 0x3809, 0xd0}, // X_OUTPUT_SIZE;
-		{OV2680_8BIT, 0x380a, 0x02},
-		{OV2680_8BIT, 0x380b, 0x50}, // Y_OUTPUT_SIZE;
-		{OV2680_8BIT, 0x380c, 0x06},
-		{OV2680_8BIT, 0x380d, 0xac}, // HTS;
-		{OV2680_8BIT, 0x380e, 0x02},
-		{OV2680_8BIT, 0x380f, 0x84}, // VTS;
-		{OV2680_8BIT, 0x3810, 0x00},
-		{OV2680_8BIT, 0x3811, 0x00},
-		{OV2680_8BIT, 0x3812, 0x00},
-		{OV2680_8BIT, 0x3813, 0x00},
-		{OV2680_8BIT, 0x3814, 0x31},
-		{OV2680_8BIT, 0x3815, 0x31},
-		{OV2680_8BIT, 0x4008, 0x00},
-		{OV2680_8BIT, 0x4009, 0x03},
-		{OV2680_8BIT, 0x5708, 0x00},
-		{OV2680_8BIT, 0x5704, 0x02},
-		{OV2680_8BIT, 0x5705, 0xd0}, // X_WIN;
-		{OV2680_8BIT, 0x5706, 0x02},
-		{OV2680_8BIT, 0x5707, 0x50}, // Y_WIN;
-		{OV2680_8BIT, 0x3820, 0xc2}, // FLIP_FORMAT;
-		{OV2680_8BIT, 0x3821, 0x01}, // MIRROR_FORMAT;
-		{OV2680_8BIT, 0x5090, 0x00}, // PRE ISP CTRL16, default value is 0x0C;
-					     // BIT[3]: Mirror order, BG or GB;
-					     // BIT[2]: Flip order, BR or RB;
-		{OV2680_8BIT, 0x5081, 0x41},
-		{OV2680_TOK_TERM, 0, 0}
-	};
-	/*
-	* 800x600 30fps  VBlanking 1lane 10Bit (binning)
-	*/
-	static struct ov2680_reg const ov2680_800x600_30fps[] = {
-		{OV2680_8BIT, 0x3086, 0x01},
-		{OV2680_8BIT, 0x3501, 0x26},
-		{OV2680_8BIT, 0x3502, 0x40},
-		{OV2680_8BIT, 0x370a, 0x23},
-		{OV2680_8BIT, 0x3801, 0x00},
-		{OV2680_8BIT, 0x3802, 0x00},
-		{OV2680_8BIT, 0x3803, 0x00},
-		{OV2680_8BIT, 0x3804, 0x06},
-		{OV2680_8BIT, 0x3805, 0x4f},
-		{OV2680_8BIT, 0x3806, 0x04},
-		{OV2680_8BIT, 0x3807, 0xbf},
-		{OV2680_8BIT, 0x3808, 0x03},
-		{OV2680_8BIT, 0x3809, 0x20},
-		{OV2680_8BIT, 0x380a, 0x02},
-		{OV2680_8BIT, 0x380b, 0x58},
-		{OV2680_8BIT, 0x380c, 0x06},
-		{OV2680_8BIT, 0x380d, 0xac},
-		{OV2680_8BIT, 0x380e, 0x02},
-		{OV2680_8BIT, 0x380f, 0x84},
-		{OV2680_8BIT, 0x3810, 0x00},
-		{OV2680_8BIT, 0x3811, 0x00},
-		{OV2680_8BIT, 0x3812, 0x00},
-		{OV2680_8BIT, 0x3813, 0x00},
-		{OV2680_8BIT, 0x3814, 0x31},
-		{OV2680_8BIT, 0x3815, 0x31},
-		{OV2680_8BIT, 0x5708, 0x00},
-		{OV2680_8BIT, 0x5704, 0x03},
-		{OV2680_8BIT, 0x5705, 0x20},
-		{OV2680_8BIT, 0x5706, 0x02},
-		{OV2680_8BIT, 0x5707, 0x58},
-		{OV2680_8BIT, 0x3820, 0xc2},
-		{OV2680_8BIT, 0x3821, 0x01},
-		{OV2680_8BIT, 0x5090, 0x00},
-		{OV2680_8BIT, 0x4008, 0x00},
-		{OV2680_8BIT, 0x4009, 0x03},
-		{OV2680_8BIT, 0x5081, 0x41},
-		{OV2680_TOK_TERM, 0, 0}
-	};
-
-	/*
-	 * 720p=1280*720 30fps  VBlanking 1lane 10Bit (no-Scaling)
-	 */
-	static struct ov2680_reg const ov2680_720p_30fps[] = {
-		{OV2680_8BIT, 0x3086, 0x00},
-		{OV2680_8BIT, 0x3501, 0x48},
-		{OV2680_8BIT, 0x3502, 0xe0},
-		{OV2680_8BIT, 0x370a, 0x21},
-		{OV2680_8BIT, 0x3801, 0xa0},
-		{OV2680_8BIT, 0x3802, 0x00},
-		{OV2680_8BIT, 0x3803, 0xf2},
-		{OV2680_8BIT, 0x3804, 0x05},
-		{OV2680_8BIT, 0x3805, 0xbf},
-		{OV2680_8BIT, 0x3806, 0x03},
-		{OV2680_8BIT, 0x3807, 0xdd},
-		{OV2680_8BIT, 0x3808, 0x05},
-		{OV2680_8BIT, 0x3809, 0x10},
-		{OV2680_8BIT, 0x380a, 0x02},
-		{OV2680_8BIT, 0x380b, 0xe0},
-		{OV2680_8BIT, 0x380c, 0x06},
-		{OV2680_8BIT, 0x380d, 0xa8},
-		{OV2680_8BIT, 0x380e, 0x05},
-		{OV2680_8BIT, 0x380f, 0x0e},
-		{OV2680_8BIT, 0x3810, 0x00},
-		{OV2680_8BIT, 0x3811, 0x08},
-		{OV2680_8BIT, 0x3812, 0x00},
-		{OV2680_8BIT, 0x3813, 0x06},
-		{OV2680_8BIT, 0x3814, 0x11},
-		{OV2680_8BIT, 0x3815, 0x11},
-		{OV2680_8BIT, 0x4008, 0x02},
-		{OV2680_8BIT, 0x4009, 0x09},
-		{OV2680_8BIT, 0x5081, 0x41},
-		{OV2680_8BIT, 0x5708, 0x00}, //add for full size flip off and mirror off 2014/09/11
-		{OV2680_8BIT, 0x5704, 0x10},
-		{OV2680_8BIT, 0x5705, 0xa0},
-		{OV2680_8BIT, 0x5706, 0x0c},
-		{OV2680_8BIT, 0x5707, 0x78},
-		{OV2680_8BIT, 0x3820, 0xc0},
-		{OV2680_8BIT, 0x3821, 0x00},
-		// {OV2680_8BIT, 0x5090, 0x0c},
-		{OV2680_TOK_TERM, 0, 0}
-	};
-
-	/*
-	 * 1296x976 30fps  VBlanking 1lane 10Bit(no-scaling)
-	 */
-	static struct ov2680_reg const ov2680_1296x976_30fps[] = {
-		{OV2680_8BIT, 0x3086, 0x00},
-		{OV2680_8BIT, 0x3501, 0x48},
-		{OV2680_8BIT, 0x3502, 0xe0},
-		{OV2680_8BIT, 0x370a, 0x21},
-		{OV2680_8BIT, 0x3801, 0xa0},
-		{OV2680_8BIT, 0x3802, 0x00},
-		{OV2680_8BIT, 0x3803, 0x78},
-		{OV2680_8BIT, 0x3804, 0x05},
-		{OV2680_8BIT, 0x3805, 0xbf},
-		{OV2680_8BIT, 0x3806, 0x04},
-		{OV2680_8BIT, 0x3807, 0x57},
-		{OV2680_8BIT, 0x3808, 0x05},
-		{OV2680_8BIT, 0x3809, 0x10},
-		{OV2680_8BIT, 0x380a, 0x03},
-		{OV2680_8BIT, 0x380b, 0xd0},
-		{OV2680_8BIT, 0x380c, 0x06},
-		{OV2680_8BIT, 0x380d, 0xa8},
-		{OV2680_8BIT, 0x380e, 0x05},
-		{OV2680_8BIT, 0x380f, 0x0e},
-		{OV2680_8BIT, 0x3810, 0x00},
-		{OV2680_8BIT, 0x3811, 0x08},
-		{OV2680_8BIT, 0x3812, 0x00},
-		{OV2680_8BIT, 0x3813, 0x08},
-		{OV2680_8BIT, 0x3814, 0x11},
-		{OV2680_8BIT, 0x3815, 0x11},
-		{OV2680_8BIT, 0x4008, 0x02},
-		{OV2680_8BIT, 0x4009, 0x09},
-		{OV2680_8BIT, 0x5081, 0x41},
-		{OV2680_8BIT, 0x5708, 0x00}, //add for full size flip off and mirror off 2014/09/11
-		{OV2680_8BIT, 0x5704, 0x10},
-		{OV2680_8BIT, 0x5705, 0xa0},
-		{OV2680_8BIT, 0x5706, 0x0c},
-		{OV2680_8BIT, 0x5707, 0x78},
-		{OV2680_8BIT, 0x3820, 0xc0},
-		{OV2680_8BIT, 0x3821, 0x00}, //miror/flip
-		// {OV2680_8BIT, 0x5090, 0x0c},
-		{OV2680_TOK_TERM, 0, 0}
-	};
-
-	/*
-	 *   1456*1096 30fps  VBlanking 1lane 10bit(no-scaling)
-	*/
-	static struct ov2680_reg const ov2680_1456x1096_30fps[] = {
-		{OV2680_8BIT, 0x3086, 0x00},
-		{OV2680_8BIT, 0x3501, 0x48},
-		{OV2680_8BIT, 0x3502, 0xe0},
-		{OV2680_8BIT, 0x370a, 0x21},
-		{OV2680_8BIT, 0x3801, 0x90},
-		{OV2680_8BIT, 0x3802, 0x00},
-		{OV2680_8BIT, 0x3803, 0x78},
-		{OV2680_8BIT, 0x3804, 0x06},
-		{OV2680_8BIT, 0x3805, 0x4f},
-		{OV2680_8BIT, 0x3806, 0x04},
-		{OV2680_8BIT, 0x3807, 0xC0},
-		{OV2680_8BIT, 0x3808, 0x05},
-		{OV2680_8BIT, 0x3809, 0xb0},
-		{OV2680_8BIT, 0x380a, 0x04},
-		{OV2680_8BIT, 0x380b, 0x48},
-		{OV2680_8BIT, 0x380c, 0x06},
-		{OV2680_8BIT, 0x380d, 0xa8},
-		{OV2680_8BIT, 0x380e, 0x05},
-		{OV2680_8BIT, 0x380f, 0x0e},
-		{OV2680_8BIT, 0x3810, 0x00},
-		{OV2680_8BIT, 0x3811, 0x08},
-		{OV2680_8BIT, 0x3812, 0x00},
-		{OV2680_8BIT, 0x3813, 0x00},
-		{OV2680_8BIT, 0x3814, 0x11},
-		{OV2680_8BIT, 0x3815, 0x11},
-		{OV2680_8BIT, 0x4008, 0x02},
-		{OV2680_8BIT, 0x4009, 0x09},
-		{OV2680_8BIT, 0x5081, 0x41},
-		{OV2680_8BIT, 0x5708, 0x00}, //add for full size flip off and mirror off 2014/09/11
-		{OV2680_8BIT, 0x5704, 0x10},
-		{OV2680_8BIT, 0x5705, 0xa0},
-		{OV2680_8BIT, 0x5706, 0x0c},
-		{OV2680_8BIT, 0x5707, 0x78},
-		{OV2680_8BIT, 0x3820, 0xc0},
-		{OV2680_8BIT, 0x3821, 0x00},
-		// {OV2680_8BIT, 0x5090, 0x0c},
-		{OV2680_TOK_TERM, 0, 0}
-	};
+/*
+ * 176x144 30fps  VBlanking 1lane 10Bit (binning)
+ */
+static struct ov2680_reg const ov2680_QCIF_30fps[] = {
+	{OV2680_8BIT, 0x3086, 0x01},
+	{OV2680_8BIT, 0x3501, 0x24},
+	{OV2680_8BIT, 0x3502, 0x40},
+	{OV2680_8BIT, 0x370a, 0x23},
+	{OV2680_8BIT, 0x3801, 0xa0},
+	{OV2680_8BIT, 0x3802, 0x00},
+	{OV2680_8BIT, 0x3803, 0x78},
+	{OV2680_8BIT, 0x3804, 0x05},
+	{OV2680_8BIT, 0x3805, 0xaf},
+	{OV2680_8BIT, 0x3806, 0x04},
+	{OV2680_8BIT, 0x3807, 0x47},
+	{OV2680_8BIT, 0x3808, 0x00},
+	{OV2680_8BIT, 0x3809, 0xC0},
+	{OV2680_8BIT, 0x380a, 0x00},
+	{OV2680_8BIT, 0x380b, 0xa0},
+	{OV2680_8BIT, 0x380c, 0x06},
+	{OV2680_8BIT, 0x380d, 0xb0},
+	{OV2680_8BIT, 0x380e, 0x02},
+	{OV2680_8BIT, 0x380f, 0x84},
+	{OV2680_8BIT, 0x3810, 0x00},
+	{OV2680_8BIT, 0x3811, 0x04},
+	{OV2680_8BIT, 0x3812, 0x00},
+	{OV2680_8BIT, 0x3813, 0x04},
+	{OV2680_8BIT, 0x3814, 0x31},
+	{OV2680_8BIT, 0x3815, 0x31},
+	{OV2680_8BIT, 0x4000, 0x81},
+	{OV2680_8BIT, 0x4001, 0x40},
+	{OV2680_8BIT, 0x4008, 0x00},
+	{OV2680_8BIT, 0x4009, 0x03},
+	{OV2680_8BIT, 0x5081, 0x41},
+	{OV2680_8BIT, 0x5708, 0x00}, //add for full size flip off and mirror off 2014/09/11
+	{OV2680_8BIT, 0x5704, 0x10},
+	{OV2680_8BIT, 0x5705, 0xa0},
+	{OV2680_8BIT, 0x5706, 0x0c},
+	{OV2680_8BIT, 0x5707, 0x78},
+	{OV2680_8BIT, 0x3820, 0xc2},
+	{OV2680_8BIT, 0x3821, 0x01},
+	// {OV2680_8BIT, 0x5090, 0x0c},
+	{OV2680_TOK_TERM, 0, 0}
+};
+
+/*
+ * 352x288 30fps  VBlanking 1lane 10Bit (binning)
+ */
+static struct ov2680_reg const ov2680_CIF_30fps[] = {
+	{OV2680_8BIT, 0x3086, 0x01},
+	{OV2680_8BIT, 0x3501, 0x24},
+	{OV2680_8BIT, 0x3502, 0x40},
+	{OV2680_8BIT, 0x370a, 0x23},
+	{OV2680_8BIT, 0x3801, 0xa0},
+	{OV2680_8BIT, 0x3802, 0x00},
+	{OV2680_8BIT, 0x3803, 0x78},
+	{OV2680_8BIT, 0x3804, 0x03},
+	{OV2680_8BIT, 0x3805, 0x8f},
+	{OV2680_8BIT, 0x3806, 0x02},
+	{OV2680_8BIT, 0x3807, 0xe7},
+	{OV2680_8BIT, 0x3808, 0x01},
+	{OV2680_8BIT, 0x3809, 0x70},
+	{OV2680_8BIT, 0x380a, 0x01},
+	{OV2680_8BIT, 0x380b, 0x30},
+	{OV2680_8BIT, 0x380c, 0x06},
+	{OV2680_8BIT, 0x380d, 0xb0},
+	{OV2680_8BIT, 0x380e, 0x02},
+	{OV2680_8BIT, 0x380f, 0x84},
+	{OV2680_8BIT, 0x3810, 0x00},
+	{OV2680_8BIT, 0x3811, 0x04},
+	{OV2680_8BIT, 0x3812, 0x00},
+	{OV2680_8BIT, 0x3813, 0x04},
+	{OV2680_8BIT, 0x3814, 0x31},
+	{OV2680_8BIT, 0x3815, 0x31},
+	{OV2680_8BIT, 0x4008, 0x00},
+	{OV2680_8BIT, 0x4009, 0x03},
+	{OV2680_8BIT, 0x5081, 0x41},
+	{OV2680_8BIT, 0x5708, 0x00}, //add for full size flip off and mirror off 2014/09/11
+	{OV2680_8BIT, 0x5704, 0x10},
+	{OV2680_8BIT, 0x5705, 0xa0},
+	{OV2680_8BIT, 0x5706, 0x0c},
+	{OV2680_8BIT, 0x5707, 0x78},
+	{OV2680_8BIT, 0x3820, 0xc2},
+	{OV2680_8BIT, 0x3821, 0x01},
+	// {OV2680_8BIT, 0x5090, 0x0c},
+	{OV2680_TOK_TERM, 0, 0}
+};
+
+/*
+ * 336x256 30fps  VBlanking 1lane 10Bit (binning)
+ */
+static struct ov2680_reg const ov2680_QVGA_30fps[] = {
+	{OV2680_8BIT, 0x3086, 0x01},
+	{OV2680_8BIT, 0x3501, 0x24},
+	{OV2680_8BIT, 0x3502, 0x40},
+	{OV2680_8BIT, 0x370a, 0x23},
+	{OV2680_8BIT, 0x3801, 0xa0},
+	{OV2680_8BIT, 0x3802, 0x00},
+	{OV2680_8BIT, 0x3803, 0x78},
+	{OV2680_8BIT, 0x3804, 0x03},
+	{OV2680_8BIT, 0x3805, 0x4f},
+	{OV2680_8BIT, 0x3806, 0x02},
+	{OV2680_8BIT, 0x3807, 0x87},
+	{OV2680_8BIT, 0x3808, 0x01},
+	{OV2680_8BIT, 0x3809, 0x50},
+	{OV2680_8BIT, 0x380a, 0x01},
+	{OV2680_8BIT, 0x380b, 0x00},
+	{OV2680_8BIT, 0x380c, 0x06},
+	{OV2680_8BIT, 0x380d, 0xb0},
+	{OV2680_8BIT, 0x380e, 0x02},
+	{OV2680_8BIT, 0x380f, 0x84},
+	{OV2680_8BIT, 0x3810, 0x00},
+	{OV2680_8BIT, 0x3811, 0x04},
+	{OV2680_8BIT, 0x3812, 0x00},
+	{OV2680_8BIT, 0x3813, 0x04},
+	{OV2680_8BIT, 0x3814, 0x31},
+	{OV2680_8BIT, 0x3815, 0x31},
+	{OV2680_8BIT, 0x4008, 0x00},
+	{OV2680_8BIT, 0x4009, 0x03},
+	{OV2680_8BIT, 0x5081, 0x41},
+	{OV2680_8BIT, 0x5708, 0x00}, //add for full size flip off and mirror off 2014/09/11
+	{OV2680_8BIT, 0x5704, 0x10},
+	{OV2680_8BIT, 0x5705, 0xa0},
+	{OV2680_8BIT, 0x5706, 0x0c},
+	{OV2680_8BIT, 0x5707, 0x78},
+	{OV2680_8BIT, 0x3820, 0xc2},
+	{OV2680_8BIT, 0x3821, 0x01},
+	// {OV2680_8BIT, 0x5090, 0x0c},
+	{OV2680_TOK_TERM, 0, 0}
+};
+
+/*
+ * 656x496 30fps  VBlanking 1lane 10Bit (binning)
+ */
+static struct ov2680_reg const ov2680_656x496_30fps[] = {
+	{OV2680_8BIT, 0x3086, 0x01},
+	{OV2680_8BIT, 0x3501, 0x24},
+	{OV2680_8BIT, 0x3502, 0x40},
+	{OV2680_8BIT, 0x370a, 0x23},
+	{OV2680_8BIT, 0x3801, 0xa0},
+	{OV2680_8BIT, 0x3802, 0x00},
+	{OV2680_8BIT, 0x3803, 0x78},
+	{OV2680_8BIT, 0x3804, 0x05},
+	{OV2680_8BIT, 0x3805, 0xcf},
+	{OV2680_8BIT, 0x3806, 0x04},
+	{OV2680_8BIT, 0x3807, 0x67},
+	{OV2680_8BIT, 0x3808, 0x02},
+	{OV2680_8BIT, 0x3809, 0x90},
+	{OV2680_8BIT, 0x380a, 0x01},
+	{OV2680_8BIT, 0x380b, 0xf0},
+	{OV2680_8BIT, 0x380c, 0x06},
+	{OV2680_8BIT, 0x380d, 0xb0},
+	{OV2680_8BIT, 0x380e, 0x02},
+	{OV2680_8BIT, 0x380f, 0x84},
+	{OV2680_8BIT, 0x3810, 0x00},
+	{OV2680_8BIT, 0x3811, 0x04},
+	{OV2680_8BIT, 0x3812, 0x00},
+	{OV2680_8BIT, 0x3813, 0x04},
+	{OV2680_8BIT, 0x3814, 0x31},
+	{OV2680_8BIT, 0x3815, 0x31},
+	{OV2680_8BIT, 0x4008, 0x00},
+	{OV2680_8BIT, 0x4009, 0x03},
+	{OV2680_8BIT, 0x5081, 0x41},
+	{OV2680_8BIT, 0x5708, 0x00}, //add for full size flip off and mirror off 2014/09/11
+	{OV2680_8BIT, 0x5704, 0x10},
+	{OV2680_8BIT, 0x5705, 0xa0},
+	{OV2680_8BIT, 0x5706, 0x0c},
+	{OV2680_8BIT, 0x5707, 0x78},
+	{OV2680_8BIT, 0x3820, 0xc2},
+	{OV2680_8BIT, 0x3821, 0x01},
+	// {OV2680_8BIT, 0x5090, 0x0c},
+	{OV2680_TOK_TERM, 0, 0}
+};
+/*
+* 800x600 30fps  VBlanking 1lane 10Bit (binning)
+*/
+static struct ov2680_reg const ov2680_720x592_30fps[] = {
+	{OV2680_8BIT, 0x3086, 0x01},
+	{OV2680_8BIT, 0x3501, 0x26},
+	{OV2680_8BIT, 0x3502, 0x40},
+	{OV2680_8BIT, 0x370a, 0x23},
+	{OV2680_8BIT, 0x3801, 0x00}, // X_ADDR_START;
+	{OV2680_8BIT, 0x3802, 0x00},
+	{OV2680_8BIT, 0x3803, 0x00}, // Y_ADDR_START;
+	{OV2680_8BIT, 0x3804, 0x05},
+	{OV2680_8BIT, 0x3805, 0xaf}, // X_ADDR_END;
+	{OV2680_8BIT, 0x3806, 0x04},
+	{OV2680_8BIT, 0x3807, 0xaf}, // Y_ADDR_END;
+	{OV2680_8BIT, 0x3808, 0x02},
+	{OV2680_8BIT, 0x3809, 0xd0}, // X_OUTPUT_SIZE;
+	{OV2680_8BIT, 0x380a, 0x02},
+	{OV2680_8BIT, 0x380b, 0x50}, // Y_OUTPUT_SIZE;
+	{OV2680_8BIT, 0x380c, 0x06},
+	{OV2680_8BIT, 0x380d, 0xac}, // HTS;
+	{OV2680_8BIT, 0x380e, 0x02},
+	{OV2680_8BIT, 0x380f, 0x84}, // VTS;
+	{OV2680_8BIT, 0x3810, 0x00},
+	{OV2680_8BIT, 0x3811, 0x00},
+	{OV2680_8BIT, 0x3812, 0x00},
+	{OV2680_8BIT, 0x3813, 0x00},
+	{OV2680_8BIT, 0x3814, 0x31},
+	{OV2680_8BIT, 0x3815, 0x31},
+	{OV2680_8BIT, 0x4008, 0x00},
+	{OV2680_8BIT, 0x4009, 0x03},
+	{OV2680_8BIT, 0x5708, 0x00},
+	{OV2680_8BIT, 0x5704, 0x02},
+	{OV2680_8BIT, 0x5705, 0xd0}, // X_WIN;
+	{OV2680_8BIT, 0x5706, 0x02},
+	{OV2680_8BIT, 0x5707, 0x50}, // Y_WIN;
+	{OV2680_8BIT, 0x3820, 0xc2}, // FLIP_FORMAT;
+	{OV2680_8BIT, 0x3821, 0x01}, // MIRROR_FORMAT;
+	{OV2680_8BIT, 0x5090, 0x00}, // PRE ISP CTRL16, default value is 0x0C;
+	// BIT[3]: Mirror order, BG or GB;
+	// BIT[2]: Flip order, BR or RB;
+	{OV2680_8BIT, 0x5081, 0x41},
+	{OV2680_TOK_TERM, 0, 0}
+};
+/*
+* 800x600 30fps  VBlanking 1lane 10Bit (binning)
+*/
+static struct ov2680_reg const ov2680_800x600_30fps[] = {
+	{OV2680_8BIT, 0x3086, 0x01},
+	{OV2680_8BIT, 0x3501, 0x26},
+	{OV2680_8BIT, 0x3502, 0x40},
+	{OV2680_8BIT, 0x370a, 0x23},
+	{OV2680_8BIT, 0x3801, 0x00},
+	{OV2680_8BIT, 0x3802, 0x00},
+	{OV2680_8BIT, 0x3803, 0x00},
+	{OV2680_8BIT, 0x3804, 0x06},
+	{OV2680_8BIT, 0x3805, 0x4f},
+	{OV2680_8BIT, 0x3806, 0x04},
+	{OV2680_8BIT, 0x3807, 0xbf},
+	{OV2680_8BIT, 0x3808, 0x03},
+	{OV2680_8BIT, 0x3809, 0x20},
+	{OV2680_8BIT, 0x380a, 0x02},
+	{OV2680_8BIT, 0x380b, 0x58},
+	{OV2680_8BIT, 0x380c, 0x06},
+	{OV2680_8BIT, 0x380d, 0xac},
+	{OV2680_8BIT, 0x380e, 0x02},
+	{OV2680_8BIT, 0x380f, 0x84},
+	{OV2680_8BIT, 0x3810, 0x00},
+	{OV2680_8BIT, 0x3811, 0x00},
+	{OV2680_8BIT, 0x3812, 0x00},
+	{OV2680_8BIT, 0x3813, 0x00},
+	{OV2680_8BIT, 0x3814, 0x31},
+	{OV2680_8BIT, 0x3815, 0x31},
+	{OV2680_8BIT, 0x5708, 0x00},
+	{OV2680_8BIT, 0x5704, 0x03},
+	{OV2680_8BIT, 0x5705, 0x20},
+	{OV2680_8BIT, 0x5706, 0x02},
+	{OV2680_8BIT, 0x5707, 0x58},
+	{OV2680_8BIT, 0x3820, 0xc2},
+	{OV2680_8BIT, 0x3821, 0x01},
+	{OV2680_8BIT, 0x5090, 0x00},
+	{OV2680_8BIT, 0x4008, 0x00},
+	{OV2680_8BIT, 0x4009, 0x03},
+	{OV2680_8BIT, 0x5081, 0x41},
+	{OV2680_TOK_TERM, 0, 0}
+};
+
+/*
+ * 720p=1280*720 30fps  VBlanking 1lane 10Bit (no-Scaling)
+ */
+static struct ov2680_reg const ov2680_720p_30fps[] = {
+	{OV2680_8BIT, 0x3086, 0x00},
+	{OV2680_8BIT, 0x3501, 0x48},
+	{OV2680_8BIT, 0x3502, 0xe0},
+	{OV2680_8BIT, 0x370a, 0x21},
+	{OV2680_8BIT, 0x3801, 0xa0},
+	{OV2680_8BIT, 0x3802, 0x00},
+	{OV2680_8BIT, 0x3803, 0xf2},
+	{OV2680_8BIT, 0x3804, 0x05},
+	{OV2680_8BIT, 0x3805, 0xbf},
+	{OV2680_8BIT, 0x3806, 0x03},
+	{OV2680_8BIT, 0x3807, 0xdd},
+	{OV2680_8BIT, 0x3808, 0x05},
+	{OV2680_8BIT, 0x3809, 0x10},
+	{OV2680_8BIT, 0x380a, 0x02},
+	{OV2680_8BIT, 0x380b, 0xe0},
+	{OV2680_8BIT, 0x380c, 0x06},
+	{OV2680_8BIT, 0x380d, 0xa8},
+	{OV2680_8BIT, 0x380e, 0x05},
+	{OV2680_8BIT, 0x380f, 0x0e},
+	{OV2680_8BIT, 0x3810, 0x00},
+	{OV2680_8BIT, 0x3811, 0x08},
+	{OV2680_8BIT, 0x3812, 0x00},
+	{OV2680_8BIT, 0x3813, 0x06},
+	{OV2680_8BIT, 0x3814, 0x11},
+	{OV2680_8BIT, 0x3815, 0x11},
+	{OV2680_8BIT, 0x4008, 0x02},
+	{OV2680_8BIT, 0x4009, 0x09},
+	{OV2680_8BIT, 0x5081, 0x41},
+	{OV2680_8BIT, 0x5708, 0x00}, //add for full size flip off and mirror off 2014/09/11
+	{OV2680_8BIT, 0x5704, 0x10},
+	{OV2680_8BIT, 0x5705, 0xa0},
+	{OV2680_8BIT, 0x5706, 0x0c},
+	{OV2680_8BIT, 0x5707, 0x78},
+	{OV2680_8BIT, 0x3820, 0xc0},
+	{OV2680_8BIT, 0x3821, 0x00},
+	// {OV2680_8BIT, 0x5090, 0x0c},
+	{OV2680_TOK_TERM, 0, 0}
+};
+
+/*
+ * 1296x976 30fps  VBlanking 1lane 10Bit(no-scaling)
+ */
+static struct ov2680_reg const ov2680_1296x976_30fps[] = {
+	{OV2680_8BIT, 0x3086, 0x00},
+	{OV2680_8BIT, 0x3501, 0x48},
+	{OV2680_8BIT, 0x3502, 0xe0},
+	{OV2680_8BIT, 0x370a, 0x21},
+	{OV2680_8BIT, 0x3801, 0xa0},
+	{OV2680_8BIT, 0x3802, 0x00},
+	{OV2680_8BIT, 0x3803, 0x78},
+	{OV2680_8BIT, 0x3804, 0x05},
+	{OV2680_8BIT, 0x3805, 0xbf},
+	{OV2680_8BIT, 0x3806, 0x04},
+	{OV2680_8BIT, 0x3807, 0x57},
+	{OV2680_8BIT, 0x3808, 0x05},
+	{OV2680_8BIT, 0x3809, 0x10},
+	{OV2680_8BIT, 0x380a, 0x03},
+	{OV2680_8BIT, 0x380b, 0xd0},
+	{OV2680_8BIT, 0x380c, 0x06},
+	{OV2680_8BIT, 0x380d, 0xa8},
+	{OV2680_8BIT, 0x380e, 0x05},
+	{OV2680_8BIT, 0x380f, 0x0e},
+	{OV2680_8BIT, 0x3810, 0x00},
+	{OV2680_8BIT, 0x3811, 0x08},
+	{OV2680_8BIT, 0x3812, 0x00},
+	{OV2680_8BIT, 0x3813, 0x08},
+	{OV2680_8BIT, 0x3814, 0x11},
+	{OV2680_8BIT, 0x3815, 0x11},
+	{OV2680_8BIT, 0x4008, 0x02},
+	{OV2680_8BIT, 0x4009, 0x09},
+	{OV2680_8BIT, 0x5081, 0x41},
+	{OV2680_8BIT, 0x5708, 0x00}, //add for full size flip off and mirror off 2014/09/11
+	{OV2680_8BIT, 0x5704, 0x10},
+	{OV2680_8BIT, 0x5705, 0xa0},
+	{OV2680_8BIT, 0x5706, 0x0c},
+	{OV2680_8BIT, 0x5707, 0x78},
+	{OV2680_8BIT, 0x3820, 0xc0},
+	{OV2680_8BIT, 0x3821, 0x00}, //miror/flip
+	// {OV2680_8BIT, 0x5090, 0x0c},
+	{OV2680_TOK_TERM, 0, 0}
+};
+
+/*
+ *   1456*1096 30fps  VBlanking 1lane 10bit(no-scaling)
+*/
+static struct ov2680_reg const ov2680_1456x1096_30fps[] = {
+	{OV2680_8BIT, 0x3086, 0x00},
+	{OV2680_8BIT, 0x3501, 0x48},
+	{OV2680_8BIT, 0x3502, 0xe0},
+	{OV2680_8BIT, 0x370a, 0x21},
+	{OV2680_8BIT, 0x3801, 0x90},
+	{OV2680_8BIT, 0x3802, 0x00},
+	{OV2680_8BIT, 0x3803, 0x78},
+	{OV2680_8BIT, 0x3804, 0x06},
+	{OV2680_8BIT, 0x3805, 0x4f},
+	{OV2680_8BIT, 0x3806, 0x04},
+	{OV2680_8BIT, 0x3807, 0xC0},
+	{OV2680_8BIT, 0x3808, 0x05},
+	{OV2680_8BIT, 0x3809, 0xb0},
+	{OV2680_8BIT, 0x380a, 0x04},
+	{OV2680_8BIT, 0x380b, 0x48},
+	{OV2680_8BIT, 0x380c, 0x06},
+	{OV2680_8BIT, 0x380d, 0xa8},
+	{OV2680_8BIT, 0x380e, 0x05},
+	{OV2680_8BIT, 0x380f, 0x0e},
+	{OV2680_8BIT, 0x3810, 0x00},
+	{OV2680_8BIT, 0x3811, 0x08},
+	{OV2680_8BIT, 0x3812, 0x00},
+	{OV2680_8BIT, 0x3813, 0x00},
+	{OV2680_8BIT, 0x3814, 0x11},
+	{OV2680_8BIT, 0x3815, 0x11},
+	{OV2680_8BIT, 0x4008, 0x02},
+	{OV2680_8BIT, 0x4009, 0x09},
+	{OV2680_8BIT, 0x5081, 0x41},
+	{OV2680_8BIT, 0x5708, 0x00}, //add for full size flip off and mirror off 2014/09/11
+	{OV2680_8BIT, 0x5704, 0x10},
+	{OV2680_8BIT, 0x5705, 0xa0},
+	{OV2680_8BIT, 0x5706, 0x0c},
+	{OV2680_8BIT, 0x5707, 0x78},
+	{OV2680_8BIT, 0x3820, 0xc0},
+	{OV2680_8BIT, 0x3821, 0x00},
+	// {OV2680_8BIT, 0x5090, 0x0c},
+	{OV2680_TOK_TERM, 0, 0}
+};
 #endif
 
-	/*
-	 *1616x916  30fps  VBlanking 1lane 10bit
-	 */
-
-	static struct ov2680_reg const ov2680_1616x916_30fps[] = {
-		{OV2680_8BIT, 0x3086, 0x00},
-		{OV2680_8BIT, 0x3501, 0x48},
-		{OV2680_8BIT, 0x3502, 0xe0},
-		{OV2680_8BIT, 0x370a, 0x21},
-		{OV2680_8BIT, 0x3801, 0x00},
-		{OV2680_8BIT, 0x3802, 0x00},
-		{OV2680_8BIT, 0x3803, 0x96},
-		{OV2680_8BIT, 0x3804, 0x06},
-		{OV2680_8BIT, 0x3805, 0x4f},
-		{OV2680_8BIT, 0x3806, 0x04},
-		{OV2680_8BIT, 0x3807, 0x39},
-		{OV2680_8BIT, 0x3808, 0x06},
-		{OV2680_8BIT, 0x3809, 0x50},
-		{OV2680_8BIT, 0x380a, 0x03},
-		{OV2680_8BIT, 0x380b, 0x94},
-		{OV2680_8BIT, 0x380c, 0x06},
-		{OV2680_8BIT, 0x380d, 0xa8},
-		{OV2680_8BIT, 0x380e, 0x05},
-		{OV2680_8BIT, 0x380f, 0x0e},
-		{OV2680_8BIT, 0x3810, 0x00},
-		{OV2680_8BIT, 0x3811, 0x00},
-		{OV2680_8BIT, 0x3812, 0x00},
-		{OV2680_8BIT, 0x3813, 0x08},
-		{OV2680_8BIT, 0x3814, 0x11},
-		{OV2680_8BIT, 0x3815, 0x11},
-		{OV2680_8BIT, 0x4008, 0x02},
-		{OV2680_8BIT, 0x4009, 0x09},
-		{OV2680_8BIT, 0x5081, 0x41},
-		{OV2680_8BIT, 0x5708, 0x01}, //add for full size flip off and mirror off 2014/09/11
-		{OV2680_8BIT, 0x5704, 0x06},
-		{OV2680_8BIT, 0x5705, 0x50},
-		{OV2680_8BIT, 0x5706, 0x03},
-		{OV2680_8BIT, 0x5707, 0x94},
-		{OV2680_8BIT, 0x3820, 0xc0},
-		{OV2680_8BIT, 0x3821, 0x00},
-		// {OV2680_8BIT, 0x5090, 0x0C},
-		{OV2680_TOK_TERM, 0, 0}
-	};
-
-	/*
-	 * 1612x1212 30fps VBlanking 1lane 10Bit
-	 */
+/*
+ *1616x916  30fps  VBlanking 1lane 10bit
+ */
+
+static struct ov2680_reg const ov2680_1616x916_30fps[] = {
+	{OV2680_8BIT, 0x3086, 0x00},
+	{OV2680_8BIT, 0x3501, 0x48},
+	{OV2680_8BIT, 0x3502, 0xe0},
+	{OV2680_8BIT, 0x370a, 0x21},
+	{OV2680_8BIT, 0x3801, 0x00},
+	{OV2680_8BIT, 0x3802, 0x00},
+	{OV2680_8BIT, 0x3803, 0x96},
+	{OV2680_8BIT, 0x3804, 0x06},
+	{OV2680_8BIT, 0x3805, 0x4f},
+	{OV2680_8BIT, 0x3806, 0x04},
+	{OV2680_8BIT, 0x3807, 0x39},
+	{OV2680_8BIT, 0x3808, 0x06},
+	{OV2680_8BIT, 0x3809, 0x50},
+	{OV2680_8BIT, 0x380a, 0x03},
+	{OV2680_8BIT, 0x380b, 0x94},
+	{OV2680_8BIT, 0x380c, 0x06},
+	{OV2680_8BIT, 0x380d, 0xa8},
+	{OV2680_8BIT, 0x380e, 0x05},
+	{OV2680_8BIT, 0x380f, 0x0e},
+	{OV2680_8BIT, 0x3810, 0x00},
+	{OV2680_8BIT, 0x3811, 0x00},
+	{OV2680_8BIT, 0x3812, 0x00},
+	{OV2680_8BIT, 0x3813, 0x08},
+	{OV2680_8BIT, 0x3814, 0x11},
+	{OV2680_8BIT, 0x3815, 0x11},
+	{OV2680_8BIT, 0x4008, 0x02},
+	{OV2680_8BIT, 0x4009, 0x09},
+	{OV2680_8BIT, 0x5081, 0x41},
+	{OV2680_8BIT, 0x5708, 0x01}, //add for full size flip off and mirror off 2014/09/11
+	{OV2680_8BIT, 0x5704, 0x06},
+	{OV2680_8BIT, 0x5705, 0x50},
+	{OV2680_8BIT, 0x5706, 0x03},
+	{OV2680_8BIT, 0x5707, 0x94},
+	{OV2680_8BIT, 0x3820, 0xc0},
+	{OV2680_8BIT, 0x3821, 0x00},
+	// {OV2680_8BIT, 0x5090, 0x0C},
+	{OV2680_TOK_TERM, 0, 0}
+};
+
+/*
+ * 1612x1212 30fps VBlanking 1lane 10Bit
+ */
 #if 0
-	static struct ov2680_reg const ov2680_1616x1082_30fps[] = {
-		{OV2680_8BIT, 0x3086, 0x00},
-		{OV2680_8BIT, 0x3501, 0x48},
-		{OV2680_8BIT, 0x3502, 0xe0},
-		{OV2680_8BIT, 0x370a, 0x21},
-		{OV2680_8BIT, 0x3801, 0x00},
-		{OV2680_8BIT, 0x3802, 0x00},
-		{OV2680_8BIT, 0x3803, 0x86},
-		{OV2680_8BIT, 0x3804, 0x06},
-		{OV2680_8BIT, 0x3805, 0x4f},
-		{OV2680_8BIT, 0x3806, 0x04},
-		{OV2680_8BIT, 0x3807, 0xbf},
-		{OV2680_8BIT, 0x3808, 0x06},
-		{OV2680_8BIT, 0x3809, 0x50},
-		{OV2680_8BIT, 0x380a, 0x04},
-		{OV2680_8BIT, 0x380b, 0x3a},
-		{OV2680_8BIT, 0x380c, 0x06},
-		{OV2680_8BIT, 0x380d, 0xa8},
-		{OV2680_8BIT, 0x380e, 0x05},
-		{OV2680_8BIT, 0x380f, 0x0e},
-		{OV2680_8BIT, 0x3810, 0x00},
-		{OV2680_8BIT, 0x3811, 0x00},
-		{OV2680_8BIT, 0x3812, 0x00},
-		{OV2680_8BIT, 0x3813, 0x00},
-		{OV2680_8BIT, 0x3814, 0x11},
-		{OV2680_8BIT, 0x3815, 0x11},
-		{OV2680_8BIT, 0x5708, 0x01}, //add for full size flip off and mirror off 2014/09/11
-		{OV2680_8BIT, 0x5704, 0x06},
-		{OV2680_8BIT, 0x5705, 0x50},
-		{OV2680_8BIT, 0x5706, 0x04},
-		{OV2680_8BIT, 0x5707, 0x3a},
-		{OV2680_8BIT, 0x3820, 0xc0},
-		{OV2680_8BIT, 0x3821, 0x00},
-		// {OV2680_8BIT, 0x5090, 0x0C},
-		{OV2680_8BIT, 0x4008, 0x02},
-		{OV2680_8BIT, 0x4009, 0x09},
-		{OV2680_8BIT, 0x5081, 0x41},
-		{OV2680_TOK_TERM, 0, 0}
-	};
+static struct ov2680_reg const ov2680_1616x1082_30fps[] = {
+	{OV2680_8BIT, 0x3086, 0x00},
+	{OV2680_8BIT, 0x3501, 0x48},
+	{OV2680_8BIT, 0x3502, 0xe0},
+	{OV2680_8BIT, 0x370a, 0x21},
+	{OV2680_8BIT, 0x3801, 0x00},
+	{OV2680_8BIT, 0x3802, 0x00},
+	{OV2680_8BIT, 0x3803, 0x86},
+	{OV2680_8BIT, 0x3804, 0x06},
+	{OV2680_8BIT, 0x3805, 0x4f},
+	{OV2680_8BIT, 0x3806, 0x04},
+	{OV2680_8BIT, 0x3807, 0xbf},
+	{OV2680_8BIT, 0x3808, 0x06},
+	{OV2680_8BIT, 0x3809, 0x50},
+	{OV2680_8BIT, 0x380a, 0x04},
+	{OV2680_8BIT, 0x380b, 0x3a},
+	{OV2680_8BIT, 0x380c, 0x06},
+	{OV2680_8BIT, 0x380d, 0xa8},
+	{OV2680_8BIT, 0x380e, 0x05},
+	{OV2680_8BIT, 0x380f, 0x0e},
+	{OV2680_8BIT, 0x3810, 0x00},
+	{OV2680_8BIT, 0x3811, 0x00},
+	{OV2680_8BIT, 0x3812, 0x00},
+	{OV2680_8BIT, 0x3813, 0x00},
+	{OV2680_8BIT, 0x3814, 0x11},
+	{OV2680_8BIT, 0x3815, 0x11},
+	{OV2680_8BIT, 0x5708, 0x01}, //add for full size flip off and mirror off 2014/09/11
+	{OV2680_8BIT, 0x5704, 0x06},
+	{OV2680_8BIT, 0x5705, 0x50},
+	{OV2680_8BIT, 0x5706, 0x04},
+	{OV2680_8BIT, 0x5707, 0x3a},
+	{OV2680_8BIT, 0x3820, 0xc0},
+	{OV2680_8BIT, 0x3821, 0x00},
+	// {OV2680_8BIT, 0x5090, 0x0C},
+	{OV2680_8BIT, 0x4008, 0x02},
+	{OV2680_8BIT, 0x4009, 0x09},
+	{OV2680_8BIT, 0x5081, 0x41},
+	{OV2680_TOK_TERM, 0, 0}
+};
 #endif
-	/*
-	 * 1616x1216 30fps VBlanking 1lane 10Bit
-	 */
-	static struct ov2680_reg const ov2680_1616x1216_30fps[] = {
-		{OV2680_8BIT, 0x3086, 0x00},
-		{OV2680_8BIT, 0x3501, 0x48},
-		{OV2680_8BIT, 0x3502, 0xe0},
-		{OV2680_8BIT, 0x370a, 0x21},
-		{OV2680_8BIT, 0x3801, 0x00},
-		{OV2680_8BIT, 0x3802, 0x00},
-		{OV2680_8BIT, 0x3803, 0x00},
-		{OV2680_8BIT, 0x3804, 0x06},
-		{OV2680_8BIT, 0x3805, 0x4f},
-		{OV2680_8BIT, 0x3806, 0x04},
-		{OV2680_8BIT, 0x3807, 0xbf},
-		{OV2680_8BIT, 0x3808, 0x06},
-		{OV2680_8BIT, 0x3809, 0x50},//50},//4line for mirror and flip
-		{OV2680_8BIT, 0x380a, 0x04},
-		{OV2680_8BIT, 0x380b, 0xc0},//c0},
-		{OV2680_8BIT, 0x380c, 0x06},
-		{OV2680_8BIT, 0x380d, 0xa8},
-		{OV2680_8BIT, 0x380e, 0x05},
-		{OV2680_8BIT, 0x380f, 0x0e},
-		{OV2680_8BIT, 0x3810, 0x00},
-		{OV2680_8BIT, 0x3811, 0x00},
-		{OV2680_8BIT, 0x3812, 0x00},
-		{OV2680_8BIT, 0x3813, 0x00},
-		{OV2680_8BIT, 0x3814, 0x11},
-		{OV2680_8BIT, 0x3815, 0x11},
-		{OV2680_8BIT, 0x4008, 0x00},
-		{OV2680_8BIT, 0x4009, 0x0b},
-		{OV2680_8BIT, 0x5081, 0x01},
-		{OV2680_8BIT, 0x5708, 0x01}, //add for full size flip off and mirror off 2014/09/11
-		{OV2680_8BIT, 0x5704, 0x06},
-		{OV2680_8BIT, 0x5705, 0x50},
-		{OV2680_8BIT, 0x5706, 0x04},
-		{OV2680_8BIT, 0x5707, 0xcc},
-		{OV2680_8BIT, 0x3820, 0xc0},
-		{OV2680_8BIT, 0x3821, 0x00},
-		// {OV2680_8BIT, 0x5090, 0x0C},
-		{OV2680_TOK_TERM, 0, 0}
-	};
-
-	static struct ov2680_resolution ov2680_res_preview[] = {
+/*
+ * 1616x1216 30fps VBlanking 1lane 10Bit
+ */
+static struct ov2680_reg const ov2680_1616x1216_30fps[] = {
+	{OV2680_8BIT, 0x3086, 0x00},
+	{OV2680_8BIT, 0x3501, 0x48},
+	{OV2680_8BIT, 0x3502, 0xe0},
+	{OV2680_8BIT, 0x370a, 0x21},
+	{OV2680_8BIT, 0x3801, 0x00},
+	{OV2680_8BIT, 0x3802, 0x00},
+	{OV2680_8BIT, 0x3803, 0x00},
+	{OV2680_8BIT, 0x3804, 0x06},
+	{OV2680_8BIT, 0x3805, 0x4f},
+	{OV2680_8BIT, 0x3806, 0x04},
+	{OV2680_8BIT, 0x3807, 0xbf},
+	{OV2680_8BIT, 0x3808, 0x06},
+	{OV2680_8BIT, 0x3809, 0x50},//50},//4line for mirror and flip
+	{OV2680_8BIT, 0x380a, 0x04},
+	{OV2680_8BIT, 0x380b, 0xc0},//c0},
+	{OV2680_8BIT, 0x380c, 0x06},
+	{OV2680_8BIT, 0x380d, 0xa8},
+	{OV2680_8BIT, 0x380e, 0x05},
+	{OV2680_8BIT, 0x380f, 0x0e},
+	{OV2680_8BIT, 0x3810, 0x00},
+	{OV2680_8BIT, 0x3811, 0x00},
+	{OV2680_8BIT, 0x3812, 0x00},
+	{OV2680_8BIT, 0x3813, 0x00},
+	{OV2680_8BIT, 0x3814, 0x11},
+	{OV2680_8BIT, 0x3815, 0x11},
+	{OV2680_8BIT, 0x4008, 0x00},
+	{OV2680_8BIT, 0x4009, 0x0b},
+	{OV2680_8BIT, 0x5081, 0x01},
+	{OV2680_8BIT, 0x5708, 0x01}, //add for full size flip off and mirror off 2014/09/11
+	{OV2680_8BIT, 0x5704, 0x06},
+	{OV2680_8BIT, 0x5705, 0x50},
+	{OV2680_8BIT, 0x5706, 0x04},
+	{OV2680_8BIT, 0x5707, 0xcc},
+	{OV2680_8BIT, 0x3820, 0xc0},
+	{OV2680_8BIT, 0x3821, 0x00},
+	// {OV2680_8BIT, 0x5090, 0x0C},
+	{OV2680_TOK_TERM, 0, 0}
+};
+
+static struct ov2680_resolution ov2680_res_preview[] = {
 	{
 		.desc = "ov2680_1616x1216_30fps",
 		.width = 1616,

commit bdfe0beb95eebc864f341fd0c5e903672b90b1a2
Author: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
Date:   Sun Apr 19 16:06:45 2020 +0200

    media: atomisp: fix several coding style issues
    
    Use checkpatch.pl --fix-inplace --strict to solve several
    coding style issues, manually reviewing the produced code and
    fixing some troubles caused by checkpatch.
    
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>

diff --git a/drivers/staging/media/atomisp/i2c/ov2680.h b/drivers/staging/media/atomisp/i2c/ov2680.h
index bde2f148184d..d216d827e573 100644
--- a/drivers/staging/media/atomisp/i2c/ov2680.h
+++ b/drivers/staging/media/atomisp/i2c/ov2680.h
@@ -132,10 +132,8 @@
 #define OV2680_START_STREAMING			0x01
 #define OV2680_STOP_STREAMING			0x00
 
-
 #define OV2680_INVALID_CONFIG	0xffffffff
 
-
 struct regval_list {
 	u16 reg_num;
 	u8 value;
@@ -294,7 +292,6 @@ struct ov2680_format {
 		{OV2680_TOK_TERM, 0, 0}
 	};
 
-
 #if 0 /* None of the definitions below are used currently */
 	/*
 	 * 176x144 30fps  VBlanking 1lane 10Bit (binning)
@@ -427,7 +424,6 @@ struct ov2680_format {
 		{OV2680_TOK_TERM, 0, 0}
 	};
 
-
 	/*
 	 * 656x496 30fps  VBlanking 1lane 10Bit (binning)
 	 */
@@ -641,12 +637,12 @@ struct ov2680_format {
 		{OV2680_8BIT, 0x3821, 0x00}, //miror/flip
 		// {OV2680_8BIT, 0x5090, 0x0c},
 		{OV2680_TOK_TERM, 0, 0}
- 	};
+	};
 
 	/*
 	 *   1456*1096 30fps  VBlanking 1lane 10bit(no-scaling)
 	*/
-	static struct ov2680_reg const ov2680_1456x1096_30fps[]= {
+	static struct ov2680_reg const ov2680_1456x1096_30fps[] = {
 		{OV2680_8BIT, 0x3086, 0x00},
 		{OV2680_8BIT, 0x3501, 0x48},
 		{OV2680_8BIT, 0x3502, 0xe0},
@@ -773,7 +769,7 @@ struct ov2680_format {
 		{OV2680_8BIT, 0x4009, 0x09},
 		{OV2680_8BIT, 0x5081, 0x41},
 		{OV2680_TOK_TERM, 0, 0}
-        };
+	};
 #endif
 	/*
 	 * 1616x1216 30fps VBlanking 1lane 10Bit
@@ -821,7 +817,7 @@ struct ov2680_format {
 	static struct ov2680_resolution ov2680_res_preview[] = {
 	{
 		.desc = "ov2680_1616x1216_30fps",
- 	  	.width = 1616,
+		.width = 1616,
 		.height = 1216,
 		.pix_clk_freq = 66,
 		.fps = 30,
@@ -834,7 +830,7 @@ struct ov2680_format {
 		.skip_frames = 3,
 		.regs = ov2680_1616x1216_30fps,
 	},
-   	{
+	{
 		.desc = "ov2680_1616x916_30fps",
 		.width = 1616,
 		.height = 916,
@@ -850,6 +846,7 @@ struct ov2680_format {
 		.regs = ov2680_1616x916_30fps,
 	},
 };
+
 #define N_RES_PREVIEW (ARRAY_SIZE(ov2680_res_preview))
 
 static struct ov2680_resolution *ov2680_res = ov2680_res_preview;

commit ad85094b293e40e7a2f831b0311a389d952ebd5e
Author: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
Date:   Sun Apr 19 12:18:13 2020 +0200

    Revert "media: staging: atomisp: Remove driver"
    
    There are some interest on having this driver back, and I
    can probably dedicate some time to address its issue. So,
    let's ressurect it.
    
    For now, the driver causes a recursive error and doesn't
    build, so, make it depend on BROKEN.
    
    This reverts commit 51b8dc5163d2ff2bf04019f8bf7e3bd0e75bb654.
    
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>

diff --git a/drivers/staging/media/atomisp/i2c/ov2680.h b/drivers/staging/media/atomisp/i2c/ov2680.h
new file mode 100644
index 000000000000..bde2f148184d
--- /dev/null
+++ b/drivers/staging/media/atomisp/i2c/ov2680.h
@@ -0,0 +1,858 @@
+/*
+ * Support for OmniVision OV2680 5M camera sensor.
+ *
+ * Copyright (c) 2013 Intel Corporation. All Rights Reserved.
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License version
+ * 2 as published by the Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ *
+ */
+
+#ifndef __OV2680_H__
+#define __OV2680_H__
+#include <linux/kernel.h>
+#include <linux/types.h>
+#include <linux/i2c.h>
+#include <linux/delay.h>
+#include <linux/videodev2.h>
+#include <linux/spinlock.h>
+#include <media/v4l2-subdev.h>
+#include <media/v4l2-device.h>
+#include <media/v4l2-ctrls.h>
+#include <linux/v4l2-mediabus.h>
+#include <media/media-entity.h>
+
+#include "../include/linux/atomisp_platform.h"
+
+/* Defines for register writes and register array processing */
+#define I2C_MSG_LENGTH		0x2
+#define I2C_RETRY_COUNT		5
+
+#define OV2680_FOCAL_LENGTH_NUM	334	/*3.34mm*/
+#define OV2680_FOCAL_LENGTH_DEM	100
+#define OV2680_F_NUMBER_DEFAULT_NUM	24
+#define OV2680_F_NUMBER_DEM	10
+
+#define OV2680_BIN_FACTOR_MAX 4
+
+#define MAX_FMTS		1
+
+/* sensor_mode_data read_mode adaptation */
+#define OV2680_READ_MODE_BINNING_ON	0x0400
+#define OV2680_READ_MODE_BINNING_OFF	0x00
+#define OV2680_INTEGRATION_TIME_MARGIN	8
+
+#define OV2680_MAX_EXPOSURE_VALUE	0xFFF1
+#define OV2680_MAX_GAIN_VALUE		0xFF
+
+/*
+ * focal length bits definition:
+ * bits 31-16: numerator, bits 15-0: denominator
+ */
+#define OV2680_FOCAL_LENGTH_DEFAULT 0x1B70064
+
+/*
+ * current f-number bits definition:
+ * bits 31-16: numerator, bits 15-0: denominator
+ */
+#define OV2680_F_NUMBER_DEFAULT 0x18000a
+
+/*
+ * f-number range bits definition:
+ * bits 31-24: max f-number numerator
+ * bits 23-16: max f-number denominator
+ * bits 15-8: min f-number numerator
+ * bits 7-0: min f-number denominator
+ */
+#define OV2680_F_NUMBER_RANGE 0x180a180a
+#define OV2680_ID	0x2680
+
+#define OV2680_FINE_INTG_TIME_MIN 0
+#define OV2680_FINE_INTG_TIME_MAX_MARGIN 0
+#define OV2680_COARSE_INTG_TIME_MIN 1
+#define OV2680_COARSE_INTG_TIME_MAX_MARGIN 6
+
+/*
+ * OV2680 System control registers
+ */
+#define OV2680_SW_SLEEP				0x0100
+#define OV2680_SW_RESET				0x0103
+#define OV2680_SW_STREAM			0x0100
+
+#define OV2680_SC_CMMN_CHIP_ID_H		0x300A
+#define OV2680_SC_CMMN_CHIP_ID_L		0x300B
+#define OV2680_SC_CMMN_SCCB_ID			0x302B /* 0x300C*/
+#define OV2680_SC_CMMN_SUB_ID			0x302A /* process, version*/
+
+#define OV2680_GROUP_ACCESS							0x3208 /*Bit[7:4] Group control, Bit[3:0] Group ID*/
+
+#define OV2680_EXPOSURE_H							0x3500 /*Bit[3:0] Bit[19:16] of exposure, remaining 16 bits lies in Reg0x3501&Reg0x3502*/
+#define OV2680_EXPOSURE_M							0x3501
+#define OV2680_EXPOSURE_L							0x3502
+#define OV2680_AGC_H								0x350A /*Bit[1:0] means Bit[9:8] of gain*/
+#define OV2680_AGC_L								0x350B /*Bit[7:0] of gain*/
+
+#define OV2680_HORIZONTAL_START_H					0x3800 /*Bit[11:8]*/
+#define OV2680_HORIZONTAL_START_L					0x3801 /*Bit[7:0]*/
+#define OV2680_VERTICAL_START_H						0x3802 /*Bit[11:8]*/
+#define OV2680_VERTICAL_START_L						0x3803 /*Bit[7:0]*/
+#define OV2680_HORIZONTAL_END_H						0x3804 /*Bit[11:8]*/
+#define OV2680_HORIZONTAL_END_L						0x3805 /*Bit[7:0]*/
+#define OV2680_VERTICAL_END_H						0x3806 /*Bit[11:8]*/
+#define OV2680_VERTICAL_END_L						0x3807 /*Bit[7:0]*/
+#define OV2680_HORIZONTAL_OUTPUT_SIZE_H				0x3808 /*Bit[3:0]*/
+#define OV2680_HORIZONTAL_OUTPUT_SIZE_L				0x3809 /*Bit[7:0]*/
+#define OV2680_VERTICAL_OUTPUT_SIZE_H				0x380a /*Bit[3:0]*/
+#define OV2680_VERTICAL_OUTPUT_SIZE_L				0x380b /*Bit[7:0]*/
+#define OV2680_TIMING_HTS_H							0x380C  /*High 8-bit, and low 8-bit HTS address is 0x380d*/
+#define OV2680_TIMING_HTS_L							0x380D  /*High 8-bit, and low 8-bit HTS address is 0x380d*/
+#define OV2680_TIMING_VTS_H							0x380e  /*High 8-bit, and low 8-bit HTS address is 0x380f*/
+#define OV2680_TIMING_VTS_L							0x380f  /*High 8-bit, and low 8-bit HTS address is 0x380f*/
+#define OV2680_FRAME_OFF_NUM						0x4202
+
+/*Flip/Mirror*/
+#define OV2680_FLIP_REG				0x3820
+#define OV2680_MIRROR_REG			0x3821
+#define OV2680_FLIP_BIT				1
+#define OV2680_MIRROR_BIT			2
+#define OV2680_FLIP_MIRROR_BIT_ENABLE		4
+
+#define OV2680_MWB_RED_GAIN_H			0x5004/*0x3400*/
+#define OV2680_MWB_GREEN_GAIN_H			0x5006/*0x3402*/
+#define OV2680_MWB_BLUE_GAIN_H			0x5008/*0x3404*/
+#define OV2680_MWB_GAIN_MAX				0x0fff
+
+#define OV2680_START_STREAMING			0x01
+#define OV2680_STOP_STREAMING			0x00
+
+
+#define OV2680_INVALID_CONFIG	0xffffffff
+
+
+struct regval_list {
+	u16 reg_num;
+	u8 value;
+};
+
+struct ov2680_resolution {
+	u8 *desc;
+	const struct ov2680_reg *regs;
+	int res;
+	int width;
+	int height;
+	int fps;
+	int pix_clk_freq;
+	u32 skip_frames;
+	u16 pixels_per_line;
+	u16 lines_per_frame;
+	u8 bin_factor_x;
+	u8 bin_factor_y;
+	u8 bin_mode;
+	bool used;
+};
+
+struct ov2680_format {
+	u8 *desc;
+	u32 pixelformat;
+	struct ov2680_reg *regs;
+};
+
+	/*
+	 * ov2680 device structure.
+	 */
+	struct ov2680_device {
+		struct v4l2_subdev sd;
+		struct media_pad pad;
+		struct v4l2_mbus_framefmt format;
+		struct mutex input_lock;
+	struct v4l2_ctrl_handler ctrl_handler;
+		struct camera_sensor_platform_data *platform_data;
+		int vt_pix_clk_freq_mhz;
+		int fmt_idx;
+		int run_mode;
+		u8 res;
+		u8 type;
+	};
+
+	enum ov2680_tok_type {
+		OV2680_8BIT  = 0x0001,
+		OV2680_16BIT = 0x0002,
+		OV2680_32BIT = 0x0004,
+		OV2680_TOK_TERM   = 0xf000,	/* terminating token for reg list */
+		OV2680_TOK_DELAY  = 0xfe00,	/* delay token for reg list */
+		OV2680_TOK_MASK = 0xfff0
+	};
+
+	/**
+	 * struct ov2680_reg - MI sensor  register format
+	 * @type: type of the register
+	 * @reg: 16-bit offset to register
+	 * @val: 8/16/32-bit register value
+	 *
+	 * Define a structure for sensor register initialization values
+	 */
+	struct ov2680_reg {
+		enum ov2680_tok_type type;
+		u16 reg;
+		u32 val;	/* @set value for read/mod/write, @mask */
+	};
+
+	#define to_ov2680_sensor(x) container_of(x, struct ov2680_device, sd)
+
+	#define OV2680_MAX_WRITE_BUF_SIZE	30
+
+	struct ov2680_write_buffer {
+		u16 addr;
+		u8 data[OV2680_MAX_WRITE_BUF_SIZE];
+	};
+
+	struct ov2680_write_ctrl {
+		int index;
+		struct ov2680_write_buffer buffer;
+	};
+
+	static struct ov2680_reg const ov2680_global_setting[] = {
+	    {OV2680_8BIT, 0x0103, 0x01},
+	    {OV2680_8BIT, 0x3002, 0x00},
+	    {OV2680_8BIT, 0x3016, 0x1c},
+	    {OV2680_8BIT, 0x3018, 0x44},
+	    {OV2680_8BIT, 0x3020, 0x00},
+	    {OV2680_8BIT, 0x3080, 0x02},
+	    {OV2680_8BIT, 0x3082, 0x45},
+	    {OV2680_8BIT, 0x3084, 0x09},
+	    {OV2680_8BIT, 0x3085, 0x04},
+	    {OV2680_8BIT, 0x3503, 0x03},
+	    {OV2680_8BIT, 0x350b, 0x36},
+	    {OV2680_8BIT, 0x3600, 0xb4},
+	    {OV2680_8BIT, 0x3603, 0x39},
+	    {OV2680_8BIT, 0x3604, 0x24},
+	    {OV2680_8BIT, 0x3605, 0x00},
+	    {OV2680_8BIT, 0x3620, 0x26},
+	    {OV2680_8BIT, 0x3621, 0x37},
+	    {OV2680_8BIT, 0x3622, 0x04},
+	    {OV2680_8BIT, 0x3628, 0x00},
+	    {OV2680_8BIT, 0x3705, 0x3c},
+	    {OV2680_8BIT, 0x370c, 0x50},
+	    {OV2680_8BIT, 0x370d, 0xc0},
+	    {OV2680_8BIT, 0x3718, 0x88},
+	    {OV2680_8BIT, 0x3720, 0x00},
+	    {OV2680_8BIT, 0x3721, 0x00},
+	    {OV2680_8BIT, 0x3722, 0x00},
+	    {OV2680_8BIT, 0x3723, 0x00},
+	    {OV2680_8BIT, 0x3738, 0x00},
+	    {OV2680_8BIT, 0x3717, 0x58},
+	    {OV2680_8BIT, 0x3781, 0x80},
+	    {OV2680_8BIT, 0x3789, 0x60},
+	    {OV2680_8BIT, 0x3800, 0x00},
+	    {OV2680_8BIT, 0x3819, 0x04},
+	    {OV2680_8BIT, 0x4000, 0x81},
+	    {OV2680_8BIT, 0x4001, 0x40},
+	    {OV2680_8BIT, 0x4602, 0x02},
+	    {OV2680_8BIT, 0x481f, 0x36},
+	    {OV2680_8BIT, 0x4825, 0x36},
+	    {OV2680_8BIT, 0x4837, 0x18},
+	    {OV2680_8BIT, 0x5002, 0x30},
+	    {OV2680_8BIT, 0x5004, 0x04},//manual awb 1x
+	    {OV2680_8BIT, 0x5005, 0x00},
+	    {OV2680_8BIT, 0x5006, 0x04},
+	    {OV2680_8BIT, 0x5007, 0x00},
+	    {OV2680_8BIT, 0x5008, 0x04},
+	    {OV2680_8BIT, 0x5009, 0x00},
+	    {OV2680_8BIT, 0x5080, 0x00},
+	    {OV2680_8BIT, 0x3701, 0x64},  //add on 14/05/13
+	    {OV2680_8BIT, 0x3784, 0x0c},  //based OV2680_R1A_AM10.ovt add on 14/06/13
+	    {OV2680_8BIT, 0x5780, 0x3e},  //based OV2680_R1A_AM10.ovt,Adjust DPC setting (57xx) on 14/06/13
+	    {OV2680_8BIT, 0x5781, 0x0f},
+	    {OV2680_8BIT, 0x5782, 0x04},
+	    {OV2680_8BIT, 0x5783, 0x02},
+	    {OV2680_8BIT, 0x5784, 0x01},
+	    {OV2680_8BIT, 0x5785, 0x01},
+	    {OV2680_8BIT, 0x5786, 0x00},
+	    {OV2680_8BIT, 0x5787, 0x04},
+	    {OV2680_8BIT, 0x5788, 0x02},
+	    {OV2680_8BIT, 0x5789, 0x00},
+	    {OV2680_8BIT, 0x578a, 0x01},
+	    {OV2680_8BIT, 0x578b, 0x02},
+	    {OV2680_8BIT, 0x578c, 0x03},
+	    {OV2680_8BIT, 0x578d, 0x03},
+	    {OV2680_8BIT, 0x578e, 0x08},
+	    {OV2680_8BIT, 0x578f, 0x0c},
+	    {OV2680_8BIT, 0x5790, 0x08},
+	    {OV2680_8BIT, 0x5791, 0x04},
+	    {OV2680_8BIT, 0x5792, 0x00},
+	    {OV2680_8BIT, 0x5793, 0x00},
+	    {OV2680_8BIT, 0x5794, 0x03}, //based OV2680_R1A_AM10.ovt,Adjust DPC setting (57xx) on 14/06/13
+		{OV2680_8BIT, 0x0100, 0x00},	//stream off
+
+		{OV2680_TOK_TERM, 0, 0}
+	};
+
+
+#if 0 /* None of the definitions below are used currently */
+	/*
+	 * 176x144 30fps  VBlanking 1lane 10Bit (binning)
+	 */
+	static struct ov2680_reg const ov2680_QCIF_30fps[] = {
+		{OV2680_8BIT, 0x3086, 0x01},
+		{OV2680_8BIT, 0x3501, 0x24},
+		{OV2680_8BIT, 0x3502, 0x40},
+		{OV2680_8BIT, 0x370a, 0x23},
+		{OV2680_8BIT, 0x3801, 0xa0},
+		{OV2680_8BIT, 0x3802, 0x00},
+		{OV2680_8BIT, 0x3803, 0x78},
+		{OV2680_8BIT, 0x3804, 0x05},
+		{OV2680_8BIT, 0x3805, 0xaf},
+		{OV2680_8BIT, 0x3806, 0x04},
+		{OV2680_8BIT, 0x3807, 0x47},
+		{OV2680_8BIT, 0x3808, 0x00},
+		{OV2680_8BIT, 0x3809, 0xC0},
+		{OV2680_8BIT, 0x380a, 0x00},
+		{OV2680_8BIT, 0x380b, 0xa0},
+		{OV2680_8BIT, 0x380c, 0x06},
+		{OV2680_8BIT, 0x380d, 0xb0},
+		{OV2680_8BIT, 0x380e, 0x02},
+		{OV2680_8BIT, 0x380f, 0x84},
+		{OV2680_8BIT, 0x3810, 0x00},
+		{OV2680_8BIT, 0x3811, 0x04},
+		{OV2680_8BIT, 0x3812, 0x00},
+		{OV2680_8BIT, 0x3813, 0x04},
+		{OV2680_8BIT, 0x3814, 0x31},
+		{OV2680_8BIT, 0x3815, 0x31},
+		{OV2680_8BIT, 0x4000, 0x81},
+		{OV2680_8BIT, 0x4001, 0x40},
+		{OV2680_8BIT, 0x4008, 0x00},
+		{OV2680_8BIT, 0x4009, 0x03},
+		{OV2680_8BIT, 0x5081, 0x41},
+		{OV2680_8BIT, 0x5708, 0x00}, //add for full size flip off and mirror off 2014/09/11
+		{OV2680_8BIT, 0x5704, 0x10},
+		{OV2680_8BIT, 0x5705, 0xa0},
+		{OV2680_8BIT, 0x5706, 0x0c},
+		{OV2680_8BIT, 0x5707, 0x78},
+		{OV2680_8BIT, 0x3820, 0xc2},
+		{OV2680_8BIT, 0x3821, 0x01},
+		// {OV2680_8BIT, 0x5090, 0x0c},
+		{OV2680_TOK_TERM, 0, 0}
+	};
+
+	/*
+	 * 352x288 30fps  VBlanking 1lane 10Bit (binning)
+	 */
+	static struct ov2680_reg const ov2680_CIF_30fps[] = {
+		{OV2680_8BIT, 0x3086, 0x01},
+		{OV2680_8BIT, 0x3501, 0x24},
+		{OV2680_8BIT, 0x3502, 0x40},
+		{OV2680_8BIT, 0x370a, 0x23},
+		{OV2680_8BIT, 0x3801, 0xa0},
+		{OV2680_8BIT, 0x3802, 0x00},
+		{OV2680_8BIT, 0x3803, 0x78},
+		{OV2680_8BIT, 0x3804, 0x03},
+		{OV2680_8BIT, 0x3805, 0x8f},
+		{OV2680_8BIT, 0x3806, 0x02},
+		{OV2680_8BIT, 0x3807, 0xe7},
+		{OV2680_8BIT, 0x3808, 0x01},
+		{OV2680_8BIT, 0x3809, 0x70},
+		{OV2680_8BIT, 0x380a, 0x01},
+		{OV2680_8BIT, 0x380b, 0x30},
+		{OV2680_8BIT, 0x380c, 0x06},
+		{OV2680_8BIT, 0x380d, 0xb0},
+		{OV2680_8BIT, 0x380e, 0x02},
+		{OV2680_8BIT, 0x380f, 0x84},
+		{OV2680_8BIT, 0x3810, 0x00},
+		{OV2680_8BIT, 0x3811, 0x04},
+		{OV2680_8BIT, 0x3812, 0x00},
+		{OV2680_8BIT, 0x3813, 0x04},
+		{OV2680_8BIT, 0x3814, 0x31},
+		{OV2680_8BIT, 0x3815, 0x31},
+		{OV2680_8BIT, 0x4008, 0x00},
+		{OV2680_8BIT, 0x4009, 0x03},
+		{OV2680_8BIT, 0x5081, 0x41},
+		{OV2680_8BIT, 0x5708, 0x00}, //add for full size flip off and mirror off 2014/09/11
+		{OV2680_8BIT, 0x5704, 0x10},
+		{OV2680_8BIT, 0x5705, 0xa0},
+		{OV2680_8BIT, 0x5706, 0x0c},
+		{OV2680_8BIT, 0x5707, 0x78},
+		{OV2680_8BIT, 0x3820, 0xc2},
+		{OV2680_8BIT, 0x3821, 0x01},
+		// {OV2680_8BIT, 0x5090, 0x0c},
+		{OV2680_TOK_TERM, 0, 0}
+	};
+
+	/*
+	 * 336x256 30fps  VBlanking 1lane 10Bit (binning)
+	 */
+	static struct ov2680_reg const ov2680_QVGA_30fps[] = {
+		{OV2680_8BIT, 0x3086, 0x01},
+		{OV2680_8BIT, 0x3501, 0x24},
+		{OV2680_8BIT, 0x3502, 0x40},
+		{OV2680_8BIT, 0x370a, 0x23},
+		{OV2680_8BIT, 0x3801, 0xa0},
+		{OV2680_8BIT, 0x3802, 0x00},
+		{OV2680_8BIT, 0x3803, 0x78},
+		{OV2680_8BIT, 0x3804, 0x03},
+		{OV2680_8BIT, 0x3805, 0x4f},
+		{OV2680_8BIT, 0x3806, 0x02},
+		{OV2680_8BIT, 0x3807, 0x87},
+		{OV2680_8BIT, 0x3808, 0x01},
+		{OV2680_8BIT, 0x3809, 0x50},
+		{OV2680_8BIT, 0x380a, 0x01},
+		{OV2680_8BIT, 0x380b, 0x00},
+		{OV2680_8BIT, 0x380c, 0x06},
+		{OV2680_8BIT, 0x380d, 0xb0},
+		{OV2680_8BIT, 0x380e, 0x02},
+		{OV2680_8BIT, 0x380f, 0x84},
+		{OV2680_8BIT, 0x3810, 0x00},
+		{OV2680_8BIT, 0x3811, 0x04},
+		{OV2680_8BIT, 0x3812, 0x00},
+		{OV2680_8BIT, 0x3813, 0x04},
+		{OV2680_8BIT, 0x3814, 0x31},
+		{OV2680_8BIT, 0x3815, 0x31},
+		{OV2680_8BIT, 0x4008, 0x00},
+		{OV2680_8BIT, 0x4009, 0x03},
+		{OV2680_8BIT, 0x5081, 0x41},
+		{OV2680_8BIT, 0x5708, 0x00}, //add for full size flip off and mirror off 2014/09/11
+		{OV2680_8BIT, 0x5704, 0x10},
+		{OV2680_8BIT, 0x5705, 0xa0},
+		{OV2680_8BIT, 0x5706, 0x0c},
+		{OV2680_8BIT, 0x5707, 0x78},
+		{OV2680_8BIT, 0x3820, 0xc2},
+		{OV2680_8BIT, 0x3821, 0x01},
+		// {OV2680_8BIT, 0x5090, 0x0c},
+		{OV2680_TOK_TERM, 0, 0}
+	};
+
+
+	/*
+	 * 656x496 30fps  VBlanking 1lane 10Bit (binning)
+	 */
+	static struct ov2680_reg const ov2680_656x496_30fps[] = {
+		{OV2680_8BIT, 0x3086, 0x01},
+		{OV2680_8BIT, 0x3501, 0x24},
+		{OV2680_8BIT, 0x3502, 0x40},
+		{OV2680_8BIT, 0x370a, 0x23},
+		{OV2680_8BIT, 0x3801, 0xa0},
+		{OV2680_8BIT, 0x3802, 0x00},
+		{OV2680_8BIT, 0x3803, 0x78},
+		{OV2680_8BIT, 0x3804, 0x05},
+		{OV2680_8BIT, 0x3805, 0xcf},
+		{OV2680_8BIT, 0x3806, 0x04},
+		{OV2680_8BIT, 0x3807, 0x67},
+		{OV2680_8BIT, 0x3808, 0x02},
+		{OV2680_8BIT, 0x3809, 0x90},
+		{OV2680_8BIT, 0x380a, 0x01},
+		{OV2680_8BIT, 0x380b, 0xf0},
+		{OV2680_8BIT, 0x380c, 0x06},
+		{OV2680_8BIT, 0x380d, 0xb0},
+		{OV2680_8BIT, 0x380e, 0x02},
+		{OV2680_8BIT, 0x380f, 0x84},
+		{OV2680_8BIT, 0x3810, 0x00},
+		{OV2680_8BIT, 0x3811, 0x04},
+		{OV2680_8BIT, 0x3812, 0x00},
+		{OV2680_8BIT, 0x3813, 0x04},
+		{OV2680_8BIT, 0x3814, 0x31},
+		{OV2680_8BIT, 0x3815, 0x31},
+		{OV2680_8BIT, 0x4008, 0x00},
+		{OV2680_8BIT, 0x4009, 0x03},
+		{OV2680_8BIT, 0x5081, 0x41},
+		{OV2680_8BIT, 0x5708, 0x00}, //add for full size flip off and mirror off 2014/09/11
+		{OV2680_8BIT, 0x5704, 0x10},
+		{OV2680_8BIT, 0x5705, 0xa0},
+		{OV2680_8BIT, 0x5706, 0x0c},
+		{OV2680_8BIT, 0x5707, 0x78},
+		{OV2680_8BIT, 0x3820, 0xc2},
+		{OV2680_8BIT, 0x3821, 0x01},
+		// {OV2680_8BIT, 0x5090, 0x0c},
+		{OV2680_TOK_TERM, 0, 0}
+	};
+	/*
+	* 800x600 30fps  VBlanking 1lane 10Bit (binning)
+	*/
+	static struct ov2680_reg const ov2680_720x592_30fps[] = {
+		{OV2680_8BIT, 0x3086, 0x01},
+		{OV2680_8BIT, 0x3501, 0x26},
+		{OV2680_8BIT, 0x3502, 0x40},
+		{OV2680_8BIT, 0x370a, 0x23},
+		{OV2680_8BIT, 0x3801, 0x00}, // X_ADDR_START;
+		{OV2680_8BIT, 0x3802, 0x00},
+		{OV2680_8BIT, 0x3803, 0x00}, // Y_ADDR_START;
+		{OV2680_8BIT, 0x3804, 0x05},
+		{OV2680_8BIT, 0x3805, 0xaf}, // X_ADDR_END;
+		{OV2680_8BIT, 0x3806, 0x04},
+		{OV2680_8BIT, 0x3807, 0xaf}, // Y_ADDR_END;
+		{OV2680_8BIT, 0x3808, 0x02},
+		{OV2680_8BIT, 0x3809, 0xd0}, // X_OUTPUT_SIZE;
+		{OV2680_8BIT, 0x380a, 0x02},
+		{OV2680_8BIT, 0x380b, 0x50}, // Y_OUTPUT_SIZE;
+		{OV2680_8BIT, 0x380c, 0x06},
+		{OV2680_8BIT, 0x380d, 0xac}, // HTS;
+		{OV2680_8BIT, 0x380e, 0x02},
+		{OV2680_8BIT, 0x380f, 0x84}, // VTS;
+		{OV2680_8BIT, 0x3810, 0x00},
+		{OV2680_8BIT, 0x3811, 0x00},
+		{OV2680_8BIT, 0x3812, 0x00},
+		{OV2680_8BIT, 0x3813, 0x00},
+		{OV2680_8BIT, 0x3814, 0x31},
+		{OV2680_8BIT, 0x3815, 0x31},
+		{OV2680_8BIT, 0x4008, 0x00},
+		{OV2680_8BIT, 0x4009, 0x03},
+		{OV2680_8BIT, 0x5708, 0x00},
+		{OV2680_8BIT, 0x5704, 0x02},
+		{OV2680_8BIT, 0x5705, 0xd0}, // X_WIN;
+		{OV2680_8BIT, 0x5706, 0x02},
+		{OV2680_8BIT, 0x5707, 0x50}, // Y_WIN;
+		{OV2680_8BIT, 0x3820, 0xc2}, // FLIP_FORMAT;
+		{OV2680_8BIT, 0x3821, 0x01}, // MIRROR_FORMAT;
+		{OV2680_8BIT, 0x5090, 0x00}, // PRE ISP CTRL16, default value is 0x0C;
+					     // BIT[3]: Mirror order, BG or GB;
+					     // BIT[2]: Flip order, BR or RB;
+		{OV2680_8BIT, 0x5081, 0x41},
+		{OV2680_TOK_TERM, 0, 0}
+	};
+	/*
+	* 800x600 30fps  VBlanking 1lane 10Bit (binning)
+	*/
+	static struct ov2680_reg const ov2680_800x600_30fps[] = {
+		{OV2680_8BIT, 0x3086, 0x01},
+		{OV2680_8BIT, 0x3501, 0x26},
+		{OV2680_8BIT, 0x3502, 0x40},
+		{OV2680_8BIT, 0x370a, 0x23},
+		{OV2680_8BIT, 0x3801, 0x00},
+		{OV2680_8BIT, 0x3802, 0x00},
+		{OV2680_8BIT, 0x3803, 0x00},
+		{OV2680_8BIT, 0x3804, 0x06},
+		{OV2680_8BIT, 0x3805, 0x4f},
+		{OV2680_8BIT, 0x3806, 0x04},
+		{OV2680_8BIT, 0x3807, 0xbf},
+		{OV2680_8BIT, 0x3808, 0x03},
+		{OV2680_8BIT, 0x3809, 0x20},
+		{OV2680_8BIT, 0x380a, 0x02},
+		{OV2680_8BIT, 0x380b, 0x58},
+		{OV2680_8BIT, 0x380c, 0x06},
+		{OV2680_8BIT, 0x380d, 0xac},
+		{OV2680_8BIT, 0x380e, 0x02},
+		{OV2680_8BIT, 0x380f, 0x84},
+		{OV2680_8BIT, 0x3810, 0x00},
+		{OV2680_8BIT, 0x3811, 0x00},
+		{OV2680_8BIT, 0x3812, 0x00},
+		{OV2680_8BIT, 0x3813, 0x00},
+		{OV2680_8BIT, 0x3814, 0x31},
+		{OV2680_8BIT, 0x3815, 0x31},
+		{OV2680_8BIT, 0x5708, 0x00},
+		{OV2680_8BIT, 0x5704, 0x03},
+		{OV2680_8BIT, 0x5705, 0x20},
+		{OV2680_8BIT, 0x5706, 0x02},
+		{OV2680_8BIT, 0x5707, 0x58},
+		{OV2680_8BIT, 0x3820, 0xc2},
+		{OV2680_8BIT, 0x3821, 0x01},
+		{OV2680_8BIT, 0x5090, 0x00},
+		{OV2680_8BIT, 0x4008, 0x00},
+		{OV2680_8BIT, 0x4009, 0x03},
+		{OV2680_8BIT, 0x5081, 0x41},
+		{OV2680_TOK_TERM, 0, 0}
+	};
+
+	/*
+	 * 720p=1280*720 30fps  VBlanking 1lane 10Bit (no-Scaling)
+	 */
+	static struct ov2680_reg const ov2680_720p_30fps[] = {
+		{OV2680_8BIT, 0x3086, 0x00},
+		{OV2680_8BIT, 0x3501, 0x48},
+		{OV2680_8BIT, 0x3502, 0xe0},
+		{OV2680_8BIT, 0x370a, 0x21},
+		{OV2680_8BIT, 0x3801, 0xa0},
+		{OV2680_8BIT, 0x3802, 0x00},
+		{OV2680_8BIT, 0x3803, 0xf2},
+		{OV2680_8BIT, 0x3804, 0x05},
+		{OV2680_8BIT, 0x3805, 0xbf},
+		{OV2680_8BIT, 0x3806, 0x03},
+		{OV2680_8BIT, 0x3807, 0xdd},
+		{OV2680_8BIT, 0x3808, 0x05},
+		{OV2680_8BIT, 0x3809, 0x10},
+		{OV2680_8BIT, 0x380a, 0x02},
+		{OV2680_8BIT, 0x380b, 0xe0},
+		{OV2680_8BIT, 0x380c, 0x06},
+		{OV2680_8BIT, 0x380d, 0xa8},
+		{OV2680_8BIT, 0x380e, 0x05},
+		{OV2680_8BIT, 0x380f, 0x0e},
+		{OV2680_8BIT, 0x3810, 0x00},
+		{OV2680_8BIT, 0x3811, 0x08},
+		{OV2680_8BIT, 0x3812, 0x00},
+		{OV2680_8BIT, 0x3813, 0x06},
+		{OV2680_8BIT, 0x3814, 0x11},
+		{OV2680_8BIT, 0x3815, 0x11},
+		{OV2680_8BIT, 0x4008, 0x02},
+		{OV2680_8BIT, 0x4009, 0x09},
+		{OV2680_8BIT, 0x5081, 0x41},
+		{OV2680_8BIT, 0x5708, 0x00}, //add for full size flip off and mirror off 2014/09/11
+		{OV2680_8BIT, 0x5704, 0x10},
+		{OV2680_8BIT, 0x5705, 0xa0},
+		{OV2680_8BIT, 0x5706, 0x0c},
+		{OV2680_8BIT, 0x5707, 0x78},
+		{OV2680_8BIT, 0x3820, 0xc0},
+		{OV2680_8BIT, 0x3821, 0x00},
+		// {OV2680_8BIT, 0x5090, 0x0c},
+		{OV2680_TOK_TERM, 0, 0}
+	};
+
+	/*
+	 * 1296x976 30fps  VBlanking 1lane 10Bit(no-scaling)
+	 */
+	static struct ov2680_reg const ov2680_1296x976_30fps[] = {
+		{OV2680_8BIT, 0x3086, 0x00},
+		{OV2680_8BIT, 0x3501, 0x48},
+		{OV2680_8BIT, 0x3502, 0xe0},
+		{OV2680_8BIT, 0x370a, 0x21},
+		{OV2680_8BIT, 0x3801, 0xa0},
+		{OV2680_8BIT, 0x3802, 0x00},
+		{OV2680_8BIT, 0x3803, 0x78},
+		{OV2680_8BIT, 0x3804, 0x05},
+		{OV2680_8BIT, 0x3805, 0xbf},
+		{OV2680_8BIT, 0x3806, 0x04},
+		{OV2680_8BIT, 0x3807, 0x57},
+		{OV2680_8BIT, 0x3808, 0x05},
+		{OV2680_8BIT, 0x3809, 0x10},
+		{OV2680_8BIT, 0x380a, 0x03},
+		{OV2680_8BIT, 0x380b, 0xd0},
+		{OV2680_8BIT, 0x380c, 0x06},
+		{OV2680_8BIT, 0x380d, 0xa8},
+		{OV2680_8BIT, 0x380e, 0x05},
+		{OV2680_8BIT, 0x380f, 0x0e},
+		{OV2680_8BIT, 0x3810, 0x00},
+		{OV2680_8BIT, 0x3811, 0x08},
+		{OV2680_8BIT, 0x3812, 0x00},
+		{OV2680_8BIT, 0x3813, 0x08},
+		{OV2680_8BIT, 0x3814, 0x11},
+		{OV2680_8BIT, 0x3815, 0x11},
+		{OV2680_8BIT, 0x4008, 0x02},
+		{OV2680_8BIT, 0x4009, 0x09},
+		{OV2680_8BIT, 0x5081, 0x41},
+		{OV2680_8BIT, 0x5708, 0x00}, //add for full size flip off and mirror off 2014/09/11
+		{OV2680_8BIT, 0x5704, 0x10},
+		{OV2680_8BIT, 0x5705, 0xa0},
+		{OV2680_8BIT, 0x5706, 0x0c},
+		{OV2680_8BIT, 0x5707, 0x78},
+		{OV2680_8BIT, 0x3820, 0xc0},
+		{OV2680_8BIT, 0x3821, 0x00}, //miror/flip
+		// {OV2680_8BIT, 0x5090, 0x0c},
+		{OV2680_TOK_TERM, 0, 0}
+ 	};
+
+	/*
+	 *   1456*1096 30fps  VBlanking 1lane 10bit(no-scaling)
+	*/
+	static struct ov2680_reg const ov2680_1456x1096_30fps[]= {
+		{OV2680_8BIT, 0x3086, 0x00},
+		{OV2680_8BIT, 0x3501, 0x48},
+		{OV2680_8BIT, 0x3502, 0xe0},
+		{OV2680_8BIT, 0x370a, 0x21},
+		{OV2680_8BIT, 0x3801, 0x90},
+		{OV2680_8BIT, 0x3802, 0x00},
+		{OV2680_8BIT, 0x3803, 0x78},
+		{OV2680_8BIT, 0x3804, 0x06},
+		{OV2680_8BIT, 0x3805, 0x4f},
+		{OV2680_8BIT, 0x3806, 0x04},
+		{OV2680_8BIT, 0x3807, 0xC0},
+		{OV2680_8BIT, 0x3808, 0x05},
+		{OV2680_8BIT, 0x3809, 0xb0},
+		{OV2680_8BIT, 0x380a, 0x04},
+		{OV2680_8BIT, 0x380b, 0x48},
+		{OV2680_8BIT, 0x380c, 0x06},
+		{OV2680_8BIT, 0x380d, 0xa8},
+		{OV2680_8BIT, 0x380e, 0x05},
+		{OV2680_8BIT, 0x380f, 0x0e},
+		{OV2680_8BIT, 0x3810, 0x00},
+		{OV2680_8BIT, 0x3811, 0x08},
+		{OV2680_8BIT, 0x3812, 0x00},
+		{OV2680_8BIT, 0x3813, 0x00},
+		{OV2680_8BIT, 0x3814, 0x11},
+		{OV2680_8BIT, 0x3815, 0x11},
+		{OV2680_8BIT, 0x4008, 0x02},
+		{OV2680_8BIT, 0x4009, 0x09},
+		{OV2680_8BIT, 0x5081, 0x41},
+		{OV2680_8BIT, 0x5708, 0x00}, //add for full size flip off and mirror off 2014/09/11
+		{OV2680_8BIT, 0x5704, 0x10},
+		{OV2680_8BIT, 0x5705, 0xa0},
+		{OV2680_8BIT, 0x5706, 0x0c},
+		{OV2680_8BIT, 0x5707, 0x78},
+		{OV2680_8BIT, 0x3820, 0xc0},
+		{OV2680_8BIT, 0x3821, 0x00},
+		// {OV2680_8BIT, 0x5090, 0x0c},
+		{OV2680_TOK_TERM, 0, 0}
+	};
+#endif
+
+	/*
+	 *1616x916  30fps  VBlanking 1lane 10bit
+	 */
+
+	static struct ov2680_reg const ov2680_1616x916_30fps[] = {
+		{OV2680_8BIT, 0x3086, 0x00},
+		{OV2680_8BIT, 0x3501, 0x48},
+		{OV2680_8BIT, 0x3502, 0xe0},
+		{OV2680_8BIT, 0x370a, 0x21},
+		{OV2680_8BIT, 0x3801, 0x00},
+		{OV2680_8BIT, 0x3802, 0x00},
+		{OV2680_8BIT, 0x3803, 0x96},
+		{OV2680_8BIT, 0x3804, 0x06},
+		{OV2680_8BIT, 0x3805, 0x4f},
+		{OV2680_8BIT, 0x3806, 0x04},
+		{OV2680_8BIT, 0x3807, 0x39},
+		{OV2680_8BIT, 0x3808, 0x06},
+		{OV2680_8BIT, 0x3809, 0x50},
+		{OV2680_8BIT, 0x380a, 0x03},
+		{OV2680_8BIT, 0x380b, 0x94},
+		{OV2680_8BIT, 0x380c, 0x06},
+		{OV2680_8BIT, 0x380d, 0xa8},
+		{OV2680_8BIT, 0x380e, 0x05},
+		{OV2680_8BIT, 0x380f, 0x0e},
+		{OV2680_8BIT, 0x3810, 0x00},
+		{OV2680_8BIT, 0x3811, 0x00},
+		{OV2680_8BIT, 0x3812, 0x00},
+		{OV2680_8BIT, 0x3813, 0x08},
+		{OV2680_8BIT, 0x3814, 0x11},
+		{OV2680_8BIT, 0x3815, 0x11},
+		{OV2680_8BIT, 0x4008, 0x02},
+		{OV2680_8BIT, 0x4009, 0x09},
+		{OV2680_8BIT, 0x5081, 0x41},
+		{OV2680_8BIT, 0x5708, 0x01}, //add for full size flip off and mirror off 2014/09/11
+		{OV2680_8BIT, 0x5704, 0x06},
+		{OV2680_8BIT, 0x5705, 0x50},
+		{OV2680_8BIT, 0x5706, 0x03},
+		{OV2680_8BIT, 0x5707, 0x94},
+		{OV2680_8BIT, 0x3820, 0xc0},
+		{OV2680_8BIT, 0x3821, 0x00},
+		// {OV2680_8BIT, 0x5090, 0x0C},
+		{OV2680_TOK_TERM, 0, 0}
+	};
+
+	/*
+	 * 1612x1212 30fps VBlanking 1lane 10Bit
+	 */
+#if 0
+	static struct ov2680_reg const ov2680_1616x1082_30fps[] = {
+		{OV2680_8BIT, 0x3086, 0x00},
+		{OV2680_8BIT, 0x3501, 0x48},
+		{OV2680_8BIT, 0x3502, 0xe0},
+		{OV2680_8BIT, 0x370a, 0x21},
+		{OV2680_8BIT, 0x3801, 0x00},
+		{OV2680_8BIT, 0x3802, 0x00},
+		{OV2680_8BIT, 0x3803, 0x86},
+		{OV2680_8BIT, 0x3804, 0x06},
+		{OV2680_8BIT, 0x3805, 0x4f},
+		{OV2680_8BIT, 0x3806, 0x04},
+		{OV2680_8BIT, 0x3807, 0xbf},
+		{OV2680_8BIT, 0x3808, 0x06},
+		{OV2680_8BIT, 0x3809, 0x50},
+		{OV2680_8BIT, 0x380a, 0x04},
+		{OV2680_8BIT, 0x380b, 0x3a},
+		{OV2680_8BIT, 0x380c, 0x06},
+		{OV2680_8BIT, 0x380d, 0xa8},
+		{OV2680_8BIT, 0x380e, 0x05},
+		{OV2680_8BIT, 0x380f, 0x0e},
+		{OV2680_8BIT, 0x3810, 0x00},
+		{OV2680_8BIT, 0x3811, 0x00},
+		{OV2680_8BIT, 0x3812, 0x00},
+		{OV2680_8BIT, 0x3813, 0x00},
+		{OV2680_8BIT, 0x3814, 0x11},
+		{OV2680_8BIT, 0x3815, 0x11},
+		{OV2680_8BIT, 0x5708, 0x01}, //add for full size flip off and mirror off 2014/09/11
+		{OV2680_8BIT, 0x5704, 0x06},
+		{OV2680_8BIT, 0x5705, 0x50},
+		{OV2680_8BIT, 0x5706, 0x04},
+		{OV2680_8BIT, 0x5707, 0x3a},
+		{OV2680_8BIT, 0x3820, 0xc0},
+		{OV2680_8BIT, 0x3821, 0x00},
+		// {OV2680_8BIT, 0x5090, 0x0C},
+		{OV2680_8BIT, 0x4008, 0x02},
+		{OV2680_8BIT, 0x4009, 0x09},
+		{OV2680_8BIT, 0x5081, 0x41},
+		{OV2680_TOK_TERM, 0, 0}
+        };
+#endif
+	/*
+	 * 1616x1216 30fps VBlanking 1lane 10Bit
+	 */
+	static struct ov2680_reg const ov2680_1616x1216_30fps[] = {
+		{OV2680_8BIT, 0x3086, 0x00},
+		{OV2680_8BIT, 0x3501, 0x48},
+		{OV2680_8BIT, 0x3502, 0xe0},
+		{OV2680_8BIT, 0x370a, 0x21},
+		{OV2680_8BIT, 0x3801, 0x00},
+		{OV2680_8BIT, 0x3802, 0x00},
+		{OV2680_8BIT, 0x3803, 0x00},
+		{OV2680_8BIT, 0x3804, 0x06},
+		{OV2680_8BIT, 0x3805, 0x4f},
+		{OV2680_8BIT, 0x3806, 0x04},
+		{OV2680_8BIT, 0x3807, 0xbf},
+		{OV2680_8BIT, 0x3808, 0x06},
+		{OV2680_8BIT, 0x3809, 0x50},//50},//4line for mirror and flip
+		{OV2680_8BIT, 0x380a, 0x04},
+		{OV2680_8BIT, 0x380b, 0xc0},//c0},
+		{OV2680_8BIT, 0x380c, 0x06},
+		{OV2680_8BIT, 0x380d, 0xa8},
+		{OV2680_8BIT, 0x380e, 0x05},
+		{OV2680_8BIT, 0x380f, 0x0e},
+		{OV2680_8BIT, 0x3810, 0x00},
+		{OV2680_8BIT, 0x3811, 0x00},
+		{OV2680_8BIT, 0x3812, 0x00},
+		{OV2680_8BIT, 0x3813, 0x00},
+		{OV2680_8BIT, 0x3814, 0x11},
+		{OV2680_8BIT, 0x3815, 0x11},
+		{OV2680_8BIT, 0x4008, 0x00},
+		{OV2680_8BIT, 0x4009, 0x0b},
+		{OV2680_8BIT, 0x5081, 0x01},
+		{OV2680_8BIT, 0x5708, 0x01}, //add for full size flip off and mirror off 2014/09/11
+		{OV2680_8BIT, 0x5704, 0x06},
+		{OV2680_8BIT, 0x5705, 0x50},
+		{OV2680_8BIT, 0x5706, 0x04},
+		{OV2680_8BIT, 0x5707, 0xcc},
+		{OV2680_8BIT, 0x3820, 0xc0},
+		{OV2680_8BIT, 0x3821, 0x00},
+		// {OV2680_8BIT, 0x5090, 0x0C},
+		{OV2680_TOK_TERM, 0, 0}
+	};
+
+	static struct ov2680_resolution ov2680_res_preview[] = {
+	{
+		.desc = "ov2680_1616x1216_30fps",
+ 	  	.width = 1616,
+		.height = 1216,
+		.pix_clk_freq = 66,
+		.fps = 30,
+		.used = 0,
+		.pixels_per_line = 1698,//1704,
+		.lines_per_frame = 1294,
+		.bin_factor_x = 0,
+		.bin_factor_y = 0,
+		.bin_mode = 0,
+		.skip_frames = 3,
+		.regs = ov2680_1616x1216_30fps,
+	},
+   	{
+		.desc = "ov2680_1616x916_30fps",
+		.width = 1616,
+		.height = 916,
+		.fps = 30,
+		.pix_clk_freq = 66,
+		.used = 0,
+		.pixels_per_line = 1698,//1704,
+		.lines_per_frame = 1294,
+		.bin_factor_x = 0,
+		.bin_factor_y = 0,
+		.bin_mode = 0,
+		.skip_frames = 3,
+		.regs = ov2680_1616x916_30fps,
+	},
+};
+#define N_RES_PREVIEW (ARRAY_SIZE(ov2680_res_preview))
+
+static struct ov2680_resolution *ov2680_res = ov2680_res_preview;
+static unsigned long N_RES = N_RES_PREVIEW;
+
+#endif

commit 51b8dc5163d2ff2bf04019f8bf7e3bd0e75bb654
Author: Sakari Ailus <sakari.ailus@linux.intel.com>
Date:   Wed May 9 17:34:45 2018 +0300

    media: staging: atomisp: Remove driver
    
    The atomisp driver has a long list of todo items and little has been done
    to address these lately while more has been added. The driver is also not
    functional. In other words, the driver would not be getting out of staging
    in the foreseeable future. At the same time it consumes developer
    resources in order to maintain the flaky code base. Remove it.
    
    Signed-off-by: Sakari Ailus <sakari.ailus@linux.intel.com>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+samsung@kernel.org>

diff --git a/drivers/staging/media/atomisp/i2c/ov2680.h b/drivers/staging/media/atomisp/i2c/ov2680.h
deleted file mode 100644
index bde2f148184d..000000000000
--- a/drivers/staging/media/atomisp/i2c/ov2680.h
+++ /dev/null
@@ -1,858 +0,0 @@
-/*
- * Support for OmniVision OV2680 5M camera sensor.
- *
- * Copyright (c) 2013 Intel Corporation. All Rights Reserved.
- *
- * This program is free software; you can redistribute it and/or
- * modify it under the terms of the GNU General Public License version
- * 2 as published by the Free Software Foundation.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- *
- *
- */
-
-#ifndef __OV2680_H__
-#define __OV2680_H__
-#include <linux/kernel.h>
-#include <linux/types.h>
-#include <linux/i2c.h>
-#include <linux/delay.h>
-#include <linux/videodev2.h>
-#include <linux/spinlock.h>
-#include <media/v4l2-subdev.h>
-#include <media/v4l2-device.h>
-#include <media/v4l2-ctrls.h>
-#include <linux/v4l2-mediabus.h>
-#include <media/media-entity.h>
-
-#include "../include/linux/atomisp_platform.h"
-
-/* Defines for register writes and register array processing */
-#define I2C_MSG_LENGTH		0x2
-#define I2C_RETRY_COUNT		5
-
-#define OV2680_FOCAL_LENGTH_NUM	334	/*3.34mm*/
-#define OV2680_FOCAL_LENGTH_DEM	100
-#define OV2680_F_NUMBER_DEFAULT_NUM	24
-#define OV2680_F_NUMBER_DEM	10
-
-#define OV2680_BIN_FACTOR_MAX 4
-
-#define MAX_FMTS		1
-
-/* sensor_mode_data read_mode adaptation */
-#define OV2680_READ_MODE_BINNING_ON	0x0400
-#define OV2680_READ_MODE_BINNING_OFF	0x00
-#define OV2680_INTEGRATION_TIME_MARGIN	8
-
-#define OV2680_MAX_EXPOSURE_VALUE	0xFFF1
-#define OV2680_MAX_GAIN_VALUE		0xFF
-
-/*
- * focal length bits definition:
- * bits 31-16: numerator, bits 15-0: denominator
- */
-#define OV2680_FOCAL_LENGTH_DEFAULT 0x1B70064
-
-/*
- * current f-number bits definition:
- * bits 31-16: numerator, bits 15-0: denominator
- */
-#define OV2680_F_NUMBER_DEFAULT 0x18000a
-
-/*
- * f-number range bits definition:
- * bits 31-24: max f-number numerator
- * bits 23-16: max f-number denominator
- * bits 15-8: min f-number numerator
- * bits 7-0: min f-number denominator
- */
-#define OV2680_F_NUMBER_RANGE 0x180a180a
-#define OV2680_ID	0x2680
-
-#define OV2680_FINE_INTG_TIME_MIN 0
-#define OV2680_FINE_INTG_TIME_MAX_MARGIN 0
-#define OV2680_COARSE_INTG_TIME_MIN 1
-#define OV2680_COARSE_INTG_TIME_MAX_MARGIN 6
-
-/*
- * OV2680 System control registers
- */
-#define OV2680_SW_SLEEP				0x0100
-#define OV2680_SW_RESET				0x0103
-#define OV2680_SW_STREAM			0x0100
-
-#define OV2680_SC_CMMN_CHIP_ID_H		0x300A
-#define OV2680_SC_CMMN_CHIP_ID_L		0x300B
-#define OV2680_SC_CMMN_SCCB_ID			0x302B /* 0x300C*/
-#define OV2680_SC_CMMN_SUB_ID			0x302A /* process, version*/
-
-#define OV2680_GROUP_ACCESS							0x3208 /*Bit[7:4] Group control, Bit[3:0] Group ID*/
-
-#define OV2680_EXPOSURE_H							0x3500 /*Bit[3:0] Bit[19:16] of exposure, remaining 16 bits lies in Reg0x3501&Reg0x3502*/
-#define OV2680_EXPOSURE_M							0x3501
-#define OV2680_EXPOSURE_L							0x3502
-#define OV2680_AGC_H								0x350A /*Bit[1:0] means Bit[9:8] of gain*/
-#define OV2680_AGC_L								0x350B /*Bit[7:0] of gain*/
-
-#define OV2680_HORIZONTAL_START_H					0x3800 /*Bit[11:8]*/
-#define OV2680_HORIZONTAL_START_L					0x3801 /*Bit[7:0]*/
-#define OV2680_VERTICAL_START_H						0x3802 /*Bit[11:8]*/
-#define OV2680_VERTICAL_START_L						0x3803 /*Bit[7:0]*/
-#define OV2680_HORIZONTAL_END_H						0x3804 /*Bit[11:8]*/
-#define OV2680_HORIZONTAL_END_L						0x3805 /*Bit[7:0]*/
-#define OV2680_VERTICAL_END_H						0x3806 /*Bit[11:8]*/
-#define OV2680_VERTICAL_END_L						0x3807 /*Bit[7:0]*/
-#define OV2680_HORIZONTAL_OUTPUT_SIZE_H				0x3808 /*Bit[3:0]*/
-#define OV2680_HORIZONTAL_OUTPUT_SIZE_L				0x3809 /*Bit[7:0]*/
-#define OV2680_VERTICAL_OUTPUT_SIZE_H				0x380a /*Bit[3:0]*/
-#define OV2680_VERTICAL_OUTPUT_SIZE_L				0x380b /*Bit[7:0]*/
-#define OV2680_TIMING_HTS_H							0x380C  /*High 8-bit, and low 8-bit HTS address is 0x380d*/
-#define OV2680_TIMING_HTS_L							0x380D  /*High 8-bit, and low 8-bit HTS address is 0x380d*/
-#define OV2680_TIMING_VTS_H							0x380e  /*High 8-bit, and low 8-bit HTS address is 0x380f*/
-#define OV2680_TIMING_VTS_L							0x380f  /*High 8-bit, and low 8-bit HTS address is 0x380f*/
-#define OV2680_FRAME_OFF_NUM						0x4202
-
-/*Flip/Mirror*/
-#define OV2680_FLIP_REG				0x3820
-#define OV2680_MIRROR_REG			0x3821
-#define OV2680_FLIP_BIT				1
-#define OV2680_MIRROR_BIT			2
-#define OV2680_FLIP_MIRROR_BIT_ENABLE		4
-
-#define OV2680_MWB_RED_GAIN_H			0x5004/*0x3400*/
-#define OV2680_MWB_GREEN_GAIN_H			0x5006/*0x3402*/
-#define OV2680_MWB_BLUE_GAIN_H			0x5008/*0x3404*/
-#define OV2680_MWB_GAIN_MAX				0x0fff
-
-#define OV2680_START_STREAMING			0x01
-#define OV2680_STOP_STREAMING			0x00
-
-
-#define OV2680_INVALID_CONFIG	0xffffffff
-
-
-struct regval_list {
-	u16 reg_num;
-	u8 value;
-};
-
-struct ov2680_resolution {
-	u8 *desc;
-	const struct ov2680_reg *regs;
-	int res;
-	int width;
-	int height;
-	int fps;
-	int pix_clk_freq;
-	u32 skip_frames;
-	u16 pixels_per_line;
-	u16 lines_per_frame;
-	u8 bin_factor_x;
-	u8 bin_factor_y;
-	u8 bin_mode;
-	bool used;
-};
-
-struct ov2680_format {
-	u8 *desc;
-	u32 pixelformat;
-	struct ov2680_reg *regs;
-};
-
-	/*
-	 * ov2680 device structure.
-	 */
-	struct ov2680_device {
-		struct v4l2_subdev sd;
-		struct media_pad pad;
-		struct v4l2_mbus_framefmt format;
-		struct mutex input_lock;
-	struct v4l2_ctrl_handler ctrl_handler;
-		struct camera_sensor_platform_data *platform_data;
-		int vt_pix_clk_freq_mhz;
-		int fmt_idx;
-		int run_mode;
-		u8 res;
-		u8 type;
-	};
-
-	enum ov2680_tok_type {
-		OV2680_8BIT  = 0x0001,
-		OV2680_16BIT = 0x0002,
-		OV2680_32BIT = 0x0004,
-		OV2680_TOK_TERM   = 0xf000,	/* terminating token for reg list */
-		OV2680_TOK_DELAY  = 0xfe00,	/* delay token for reg list */
-		OV2680_TOK_MASK = 0xfff0
-	};
-
-	/**
-	 * struct ov2680_reg - MI sensor  register format
-	 * @type: type of the register
-	 * @reg: 16-bit offset to register
-	 * @val: 8/16/32-bit register value
-	 *
-	 * Define a structure for sensor register initialization values
-	 */
-	struct ov2680_reg {
-		enum ov2680_tok_type type;
-		u16 reg;
-		u32 val;	/* @set value for read/mod/write, @mask */
-	};
-
-	#define to_ov2680_sensor(x) container_of(x, struct ov2680_device, sd)
-
-	#define OV2680_MAX_WRITE_BUF_SIZE	30
-
-	struct ov2680_write_buffer {
-		u16 addr;
-		u8 data[OV2680_MAX_WRITE_BUF_SIZE];
-	};
-
-	struct ov2680_write_ctrl {
-		int index;
-		struct ov2680_write_buffer buffer;
-	};
-
-	static struct ov2680_reg const ov2680_global_setting[] = {
-	    {OV2680_8BIT, 0x0103, 0x01},
-	    {OV2680_8BIT, 0x3002, 0x00},
-	    {OV2680_8BIT, 0x3016, 0x1c},
-	    {OV2680_8BIT, 0x3018, 0x44},
-	    {OV2680_8BIT, 0x3020, 0x00},
-	    {OV2680_8BIT, 0x3080, 0x02},
-	    {OV2680_8BIT, 0x3082, 0x45},
-	    {OV2680_8BIT, 0x3084, 0x09},
-	    {OV2680_8BIT, 0x3085, 0x04},
-	    {OV2680_8BIT, 0x3503, 0x03},
-	    {OV2680_8BIT, 0x350b, 0x36},
-	    {OV2680_8BIT, 0x3600, 0xb4},
-	    {OV2680_8BIT, 0x3603, 0x39},
-	    {OV2680_8BIT, 0x3604, 0x24},
-	    {OV2680_8BIT, 0x3605, 0x00},
-	    {OV2680_8BIT, 0x3620, 0x26},
-	    {OV2680_8BIT, 0x3621, 0x37},
-	    {OV2680_8BIT, 0x3622, 0x04},
-	    {OV2680_8BIT, 0x3628, 0x00},
-	    {OV2680_8BIT, 0x3705, 0x3c},
-	    {OV2680_8BIT, 0x370c, 0x50},
-	    {OV2680_8BIT, 0x370d, 0xc0},
-	    {OV2680_8BIT, 0x3718, 0x88},
-	    {OV2680_8BIT, 0x3720, 0x00},
-	    {OV2680_8BIT, 0x3721, 0x00},
-	    {OV2680_8BIT, 0x3722, 0x00},
-	    {OV2680_8BIT, 0x3723, 0x00},
-	    {OV2680_8BIT, 0x3738, 0x00},
-	    {OV2680_8BIT, 0x3717, 0x58},
-	    {OV2680_8BIT, 0x3781, 0x80},
-	    {OV2680_8BIT, 0x3789, 0x60},
-	    {OV2680_8BIT, 0x3800, 0x00},
-	    {OV2680_8BIT, 0x3819, 0x04},
-	    {OV2680_8BIT, 0x4000, 0x81},
-	    {OV2680_8BIT, 0x4001, 0x40},
-	    {OV2680_8BIT, 0x4602, 0x02},
-	    {OV2680_8BIT, 0x481f, 0x36},
-	    {OV2680_8BIT, 0x4825, 0x36},
-	    {OV2680_8BIT, 0x4837, 0x18},
-	    {OV2680_8BIT, 0x5002, 0x30},
-	    {OV2680_8BIT, 0x5004, 0x04},//manual awb 1x
-	    {OV2680_8BIT, 0x5005, 0x00},
-	    {OV2680_8BIT, 0x5006, 0x04},
-	    {OV2680_8BIT, 0x5007, 0x00},
-	    {OV2680_8BIT, 0x5008, 0x04},
-	    {OV2680_8BIT, 0x5009, 0x00},
-	    {OV2680_8BIT, 0x5080, 0x00},
-	    {OV2680_8BIT, 0x3701, 0x64},  //add on 14/05/13
-	    {OV2680_8BIT, 0x3784, 0x0c},  //based OV2680_R1A_AM10.ovt add on 14/06/13
-	    {OV2680_8BIT, 0x5780, 0x3e},  //based OV2680_R1A_AM10.ovt,Adjust DPC setting (57xx) on 14/06/13
-	    {OV2680_8BIT, 0x5781, 0x0f},
-	    {OV2680_8BIT, 0x5782, 0x04},
-	    {OV2680_8BIT, 0x5783, 0x02},
-	    {OV2680_8BIT, 0x5784, 0x01},
-	    {OV2680_8BIT, 0x5785, 0x01},
-	    {OV2680_8BIT, 0x5786, 0x00},
-	    {OV2680_8BIT, 0x5787, 0x04},
-	    {OV2680_8BIT, 0x5788, 0x02},
-	    {OV2680_8BIT, 0x5789, 0x00},
-	    {OV2680_8BIT, 0x578a, 0x01},
-	    {OV2680_8BIT, 0x578b, 0x02},
-	    {OV2680_8BIT, 0x578c, 0x03},
-	    {OV2680_8BIT, 0x578d, 0x03},
-	    {OV2680_8BIT, 0x578e, 0x08},
-	    {OV2680_8BIT, 0x578f, 0x0c},
-	    {OV2680_8BIT, 0x5790, 0x08},
-	    {OV2680_8BIT, 0x5791, 0x04},
-	    {OV2680_8BIT, 0x5792, 0x00},
-	    {OV2680_8BIT, 0x5793, 0x00},
-	    {OV2680_8BIT, 0x5794, 0x03}, //based OV2680_R1A_AM10.ovt,Adjust DPC setting (57xx) on 14/06/13
-		{OV2680_8BIT, 0x0100, 0x00},	//stream off
-
-		{OV2680_TOK_TERM, 0, 0}
-	};
-
-
-#if 0 /* None of the definitions below are used currently */
-	/*
-	 * 176x144 30fps  VBlanking 1lane 10Bit (binning)
-	 */
-	static struct ov2680_reg const ov2680_QCIF_30fps[] = {
-		{OV2680_8BIT, 0x3086, 0x01},
-		{OV2680_8BIT, 0x3501, 0x24},
-		{OV2680_8BIT, 0x3502, 0x40},
-		{OV2680_8BIT, 0x370a, 0x23},
-		{OV2680_8BIT, 0x3801, 0xa0},
-		{OV2680_8BIT, 0x3802, 0x00},
-		{OV2680_8BIT, 0x3803, 0x78},
-		{OV2680_8BIT, 0x3804, 0x05},
-		{OV2680_8BIT, 0x3805, 0xaf},
-		{OV2680_8BIT, 0x3806, 0x04},
-		{OV2680_8BIT, 0x3807, 0x47},
-		{OV2680_8BIT, 0x3808, 0x00},
-		{OV2680_8BIT, 0x3809, 0xC0},
-		{OV2680_8BIT, 0x380a, 0x00},
-		{OV2680_8BIT, 0x380b, 0xa0},
-		{OV2680_8BIT, 0x380c, 0x06},
-		{OV2680_8BIT, 0x380d, 0xb0},
-		{OV2680_8BIT, 0x380e, 0x02},
-		{OV2680_8BIT, 0x380f, 0x84},
-		{OV2680_8BIT, 0x3810, 0x00},
-		{OV2680_8BIT, 0x3811, 0x04},
-		{OV2680_8BIT, 0x3812, 0x00},
-		{OV2680_8BIT, 0x3813, 0x04},
-		{OV2680_8BIT, 0x3814, 0x31},
-		{OV2680_8BIT, 0x3815, 0x31},
-		{OV2680_8BIT, 0x4000, 0x81},
-		{OV2680_8BIT, 0x4001, 0x40},
-		{OV2680_8BIT, 0x4008, 0x00},
-		{OV2680_8BIT, 0x4009, 0x03},
-		{OV2680_8BIT, 0x5081, 0x41},
-		{OV2680_8BIT, 0x5708, 0x00}, //add for full size flip off and mirror off 2014/09/11
-		{OV2680_8BIT, 0x5704, 0x10},
-		{OV2680_8BIT, 0x5705, 0xa0},
-		{OV2680_8BIT, 0x5706, 0x0c},
-		{OV2680_8BIT, 0x5707, 0x78},
-		{OV2680_8BIT, 0x3820, 0xc2},
-		{OV2680_8BIT, 0x3821, 0x01},
-		// {OV2680_8BIT, 0x5090, 0x0c},
-		{OV2680_TOK_TERM, 0, 0}
-	};
-
-	/*
-	 * 352x288 30fps  VBlanking 1lane 10Bit (binning)
-	 */
-	static struct ov2680_reg const ov2680_CIF_30fps[] = {
-		{OV2680_8BIT, 0x3086, 0x01},
-		{OV2680_8BIT, 0x3501, 0x24},
-		{OV2680_8BIT, 0x3502, 0x40},
-		{OV2680_8BIT, 0x370a, 0x23},
-		{OV2680_8BIT, 0x3801, 0xa0},
-		{OV2680_8BIT, 0x3802, 0x00},
-		{OV2680_8BIT, 0x3803, 0x78},
-		{OV2680_8BIT, 0x3804, 0x03},
-		{OV2680_8BIT, 0x3805, 0x8f},
-		{OV2680_8BIT, 0x3806, 0x02},
-		{OV2680_8BIT, 0x3807, 0xe7},
-		{OV2680_8BIT, 0x3808, 0x01},
-		{OV2680_8BIT, 0x3809, 0x70},
-		{OV2680_8BIT, 0x380a, 0x01},
-		{OV2680_8BIT, 0x380b, 0x30},
-		{OV2680_8BIT, 0x380c, 0x06},
-		{OV2680_8BIT, 0x380d, 0xb0},
-		{OV2680_8BIT, 0x380e, 0x02},
-		{OV2680_8BIT, 0x380f, 0x84},
-		{OV2680_8BIT, 0x3810, 0x00},
-		{OV2680_8BIT, 0x3811, 0x04},
-		{OV2680_8BIT, 0x3812, 0x00},
-		{OV2680_8BIT, 0x3813, 0x04},
-		{OV2680_8BIT, 0x3814, 0x31},
-		{OV2680_8BIT, 0x3815, 0x31},
-		{OV2680_8BIT, 0x4008, 0x00},
-		{OV2680_8BIT, 0x4009, 0x03},
-		{OV2680_8BIT, 0x5081, 0x41},
-		{OV2680_8BIT, 0x5708, 0x00}, //add for full size flip off and mirror off 2014/09/11
-		{OV2680_8BIT, 0x5704, 0x10},
-		{OV2680_8BIT, 0x5705, 0xa0},
-		{OV2680_8BIT, 0x5706, 0x0c},
-		{OV2680_8BIT, 0x5707, 0x78},
-		{OV2680_8BIT, 0x3820, 0xc2},
-		{OV2680_8BIT, 0x3821, 0x01},
-		// {OV2680_8BIT, 0x5090, 0x0c},
-		{OV2680_TOK_TERM, 0, 0}
-	};
-
-	/*
-	 * 336x256 30fps  VBlanking 1lane 10Bit (binning)
-	 */
-	static struct ov2680_reg const ov2680_QVGA_30fps[] = {
-		{OV2680_8BIT, 0x3086, 0x01},
-		{OV2680_8BIT, 0x3501, 0x24},
-		{OV2680_8BIT, 0x3502, 0x40},
-		{OV2680_8BIT, 0x370a, 0x23},
-		{OV2680_8BIT, 0x3801, 0xa0},
-		{OV2680_8BIT, 0x3802, 0x00},
-		{OV2680_8BIT, 0x3803, 0x78},
-		{OV2680_8BIT, 0x3804, 0x03},
-		{OV2680_8BIT, 0x3805, 0x4f},
-		{OV2680_8BIT, 0x3806, 0x02},
-		{OV2680_8BIT, 0x3807, 0x87},
-		{OV2680_8BIT, 0x3808, 0x01},
-		{OV2680_8BIT, 0x3809, 0x50},
-		{OV2680_8BIT, 0x380a, 0x01},
-		{OV2680_8BIT, 0x380b, 0x00},
-		{OV2680_8BIT, 0x380c, 0x06},
-		{OV2680_8BIT, 0x380d, 0xb0},
-		{OV2680_8BIT, 0x380e, 0x02},
-		{OV2680_8BIT, 0x380f, 0x84},
-		{OV2680_8BIT, 0x3810, 0x00},
-		{OV2680_8BIT, 0x3811, 0x04},
-		{OV2680_8BIT, 0x3812, 0x00},
-		{OV2680_8BIT, 0x3813, 0x04},
-		{OV2680_8BIT, 0x3814, 0x31},
-		{OV2680_8BIT, 0x3815, 0x31},
-		{OV2680_8BIT, 0x4008, 0x00},
-		{OV2680_8BIT, 0x4009, 0x03},
-		{OV2680_8BIT, 0x5081, 0x41},
-		{OV2680_8BIT, 0x5708, 0x00}, //add for full size flip off and mirror off 2014/09/11
-		{OV2680_8BIT, 0x5704, 0x10},
-		{OV2680_8BIT, 0x5705, 0xa0},
-		{OV2680_8BIT, 0x5706, 0x0c},
-		{OV2680_8BIT, 0x5707, 0x78},
-		{OV2680_8BIT, 0x3820, 0xc2},
-		{OV2680_8BIT, 0x3821, 0x01},
-		// {OV2680_8BIT, 0x5090, 0x0c},
-		{OV2680_TOK_TERM, 0, 0}
-	};
-
-
-	/*
-	 * 656x496 30fps  VBlanking 1lane 10Bit (binning)
-	 */
-	static struct ov2680_reg const ov2680_656x496_30fps[] = {
-		{OV2680_8BIT, 0x3086, 0x01},
-		{OV2680_8BIT, 0x3501, 0x24},
-		{OV2680_8BIT, 0x3502, 0x40},
-		{OV2680_8BIT, 0x370a, 0x23},
-		{OV2680_8BIT, 0x3801, 0xa0},
-		{OV2680_8BIT, 0x3802, 0x00},
-		{OV2680_8BIT, 0x3803, 0x78},
-		{OV2680_8BIT, 0x3804, 0x05},
-		{OV2680_8BIT, 0x3805, 0xcf},
-		{OV2680_8BIT, 0x3806, 0x04},
-		{OV2680_8BIT, 0x3807, 0x67},
-		{OV2680_8BIT, 0x3808, 0x02},
-		{OV2680_8BIT, 0x3809, 0x90},
-		{OV2680_8BIT, 0x380a, 0x01},
-		{OV2680_8BIT, 0x380b, 0xf0},
-		{OV2680_8BIT, 0x380c, 0x06},
-		{OV2680_8BIT, 0x380d, 0xb0},
-		{OV2680_8BIT, 0x380e, 0x02},
-		{OV2680_8BIT, 0x380f, 0x84},
-		{OV2680_8BIT, 0x3810, 0x00},
-		{OV2680_8BIT, 0x3811, 0x04},
-		{OV2680_8BIT, 0x3812, 0x00},
-		{OV2680_8BIT, 0x3813, 0x04},
-		{OV2680_8BIT, 0x3814, 0x31},
-		{OV2680_8BIT, 0x3815, 0x31},
-		{OV2680_8BIT, 0x4008, 0x00},
-		{OV2680_8BIT, 0x4009, 0x03},
-		{OV2680_8BIT, 0x5081, 0x41},
-		{OV2680_8BIT, 0x5708, 0x00}, //add for full size flip off and mirror off 2014/09/11
-		{OV2680_8BIT, 0x5704, 0x10},
-		{OV2680_8BIT, 0x5705, 0xa0},
-		{OV2680_8BIT, 0x5706, 0x0c},
-		{OV2680_8BIT, 0x5707, 0x78},
-		{OV2680_8BIT, 0x3820, 0xc2},
-		{OV2680_8BIT, 0x3821, 0x01},
-		// {OV2680_8BIT, 0x5090, 0x0c},
-		{OV2680_TOK_TERM, 0, 0}
-	};
-	/*
-	* 800x600 30fps  VBlanking 1lane 10Bit (binning)
-	*/
-	static struct ov2680_reg const ov2680_720x592_30fps[] = {
-		{OV2680_8BIT, 0x3086, 0x01},
-		{OV2680_8BIT, 0x3501, 0x26},
-		{OV2680_8BIT, 0x3502, 0x40},
-		{OV2680_8BIT, 0x370a, 0x23},
-		{OV2680_8BIT, 0x3801, 0x00}, // X_ADDR_START;
-		{OV2680_8BIT, 0x3802, 0x00},
-		{OV2680_8BIT, 0x3803, 0x00}, // Y_ADDR_START;
-		{OV2680_8BIT, 0x3804, 0x05},
-		{OV2680_8BIT, 0x3805, 0xaf}, // X_ADDR_END;
-		{OV2680_8BIT, 0x3806, 0x04},
-		{OV2680_8BIT, 0x3807, 0xaf}, // Y_ADDR_END;
-		{OV2680_8BIT, 0x3808, 0x02},
-		{OV2680_8BIT, 0x3809, 0xd0}, // X_OUTPUT_SIZE;
-		{OV2680_8BIT, 0x380a, 0x02},
-		{OV2680_8BIT, 0x380b, 0x50}, // Y_OUTPUT_SIZE;
-		{OV2680_8BIT, 0x380c, 0x06},
-		{OV2680_8BIT, 0x380d, 0xac}, // HTS;
-		{OV2680_8BIT, 0x380e, 0x02},
-		{OV2680_8BIT, 0x380f, 0x84}, // VTS;
-		{OV2680_8BIT, 0x3810, 0x00},
-		{OV2680_8BIT, 0x3811, 0x00},
-		{OV2680_8BIT, 0x3812, 0x00},
-		{OV2680_8BIT, 0x3813, 0x00},
-		{OV2680_8BIT, 0x3814, 0x31},
-		{OV2680_8BIT, 0x3815, 0x31},
-		{OV2680_8BIT, 0x4008, 0x00},
-		{OV2680_8BIT, 0x4009, 0x03},
-		{OV2680_8BIT, 0x5708, 0x00},
-		{OV2680_8BIT, 0x5704, 0x02},
-		{OV2680_8BIT, 0x5705, 0xd0}, // X_WIN;
-		{OV2680_8BIT, 0x5706, 0x02},
-		{OV2680_8BIT, 0x5707, 0x50}, // Y_WIN;
-		{OV2680_8BIT, 0x3820, 0xc2}, // FLIP_FORMAT;
-		{OV2680_8BIT, 0x3821, 0x01}, // MIRROR_FORMAT;
-		{OV2680_8BIT, 0x5090, 0x00}, // PRE ISP CTRL16, default value is 0x0C;
-					     // BIT[3]: Mirror order, BG or GB;
-					     // BIT[2]: Flip order, BR or RB;
-		{OV2680_8BIT, 0x5081, 0x41},
-		{OV2680_TOK_TERM, 0, 0}
-	};
-	/*
-	* 800x600 30fps  VBlanking 1lane 10Bit (binning)
-	*/
-	static struct ov2680_reg const ov2680_800x600_30fps[] = {
-		{OV2680_8BIT, 0x3086, 0x01},
-		{OV2680_8BIT, 0x3501, 0x26},
-		{OV2680_8BIT, 0x3502, 0x40},
-		{OV2680_8BIT, 0x370a, 0x23},
-		{OV2680_8BIT, 0x3801, 0x00},
-		{OV2680_8BIT, 0x3802, 0x00},
-		{OV2680_8BIT, 0x3803, 0x00},
-		{OV2680_8BIT, 0x3804, 0x06},
-		{OV2680_8BIT, 0x3805, 0x4f},
-		{OV2680_8BIT, 0x3806, 0x04},
-		{OV2680_8BIT, 0x3807, 0xbf},
-		{OV2680_8BIT, 0x3808, 0x03},
-		{OV2680_8BIT, 0x3809, 0x20},
-		{OV2680_8BIT, 0x380a, 0x02},
-		{OV2680_8BIT, 0x380b, 0x58},
-		{OV2680_8BIT, 0x380c, 0x06},
-		{OV2680_8BIT, 0x380d, 0xac},
-		{OV2680_8BIT, 0x380e, 0x02},
-		{OV2680_8BIT, 0x380f, 0x84},
-		{OV2680_8BIT, 0x3810, 0x00},
-		{OV2680_8BIT, 0x3811, 0x00},
-		{OV2680_8BIT, 0x3812, 0x00},
-		{OV2680_8BIT, 0x3813, 0x00},
-		{OV2680_8BIT, 0x3814, 0x31},
-		{OV2680_8BIT, 0x3815, 0x31},
-		{OV2680_8BIT, 0x5708, 0x00},
-		{OV2680_8BIT, 0x5704, 0x03},
-		{OV2680_8BIT, 0x5705, 0x20},
-		{OV2680_8BIT, 0x5706, 0x02},
-		{OV2680_8BIT, 0x5707, 0x58},
-		{OV2680_8BIT, 0x3820, 0xc2},
-		{OV2680_8BIT, 0x3821, 0x01},
-		{OV2680_8BIT, 0x5090, 0x00},
-		{OV2680_8BIT, 0x4008, 0x00},
-		{OV2680_8BIT, 0x4009, 0x03},
-		{OV2680_8BIT, 0x5081, 0x41},
-		{OV2680_TOK_TERM, 0, 0}
-	};
-
-	/*
-	 * 720p=1280*720 30fps  VBlanking 1lane 10Bit (no-Scaling)
-	 */
-	static struct ov2680_reg const ov2680_720p_30fps[] = {
-		{OV2680_8BIT, 0x3086, 0x00},
-		{OV2680_8BIT, 0x3501, 0x48},
-		{OV2680_8BIT, 0x3502, 0xe0},
-		{OV2680_8BIT, 0x370a, 0x21},
-		{OV2680_8BIT, 0x3801, 0xa0},
-		{OV2680_8BIT, 0x3802, 0x00},
-		{OV2680_8BIT, 0x3803, 0xf2},
-		{OV2680_8BIT, 0x3804, 0x05},
-		{OV2680_8BIT, 0x3805, 0xbf},
-		{OV2680_8BIT, 0x3806, 0x03},
-		{OV2680_8BIT, 0x3807, 0xdd},
-		{OV2680_8BIT, 0x3808, 0x05},
-		{OV2680_8BIT, 0x3809, 0x10},
-		{OV2680_8BIT, 0x380a, 0x02},
-		{OV2680_8BIT, 0x380b, 0xe0},
-		{OV2680_8BIT, 0x380c, 0x06},
-		{OV2680_8BIT, 0x380d, 0xa8},
-		{OV2680_8BIT, 0x380e, 0x05},
-		{OV2680_8BIT, 0x380f, 0x0e},
-		{OV2680_8BIT, 0x3810, 0x00},
-		{OV2680_8BIT, 0x3811, 0x08},
-		{OV2680_8BIT, 0x3812, 0x00},
-		{OV2680_8BIT, 0x3813, 0x06},
-		{OV2680_8BIT, 0x3814, 0x11},
-		{OV2680_8BIT, 0x3815, 0x11},
-		{OV2680_8BIT, 0x4008, 0x02},
-		{OV2680_8BIT, 0x4009, 0x09},
-		{OV2680_8BIT, 0x5081, 0x41},
-		{OV2680_8BIT, 0x5708, 0x00}, //add for full size flip off and mirror off 2014/09/11
-		{OV2680_8BIT, 0x5704, 0x10},
-		{OV2680_8BIT, 0x5705, 0xa0},
-		{OV2680_8BIT, 0x5706, 0x0c},
-		{OV2680_8BIT, 0x5707, 0x78},
-		{OV2680_8BIT, 0x3820, 0xc0},
-		{OV2680_8BIT, 0x3821, 0x00},
-		// {OV2680_8BIT, 0x5090, 0x0c},
-		{OV2680_TOK_TERM, 0, 0}
-	};
-
-	/*
-	 * 1296x976 30fps  VBlanking 1lane 10Bit(no-scaling)
-	 */
-	static struct ov2680_reg const ov2680_1296x976_30fps[] = {
-		{OV2680_8BIT, 0x3086, 0x00},
-		{OV2680_8BIT, 0x3501, 0x48},
-		{OV2680_8BIT, 0x3502, 0xe0},
-		{OV2680_8BIT, 0x370a, 0x21},
-		{OV2680_8BIT, 0x3801, 0xa0},
-		{OV2680_8BIT, 0x3802, 0x00},
-		{OV2680_8BIT, 0x3803, 0x78},
-		{OV2680_8BIT, 0x3804, 0x05},
-		{OV2680_8BIT, 0x3805, 0xbf},
-		{OV2680_8BIT, 0x3806, 0x04},
-		{OV2680_8BIT, 0x3807, 0x57},
-		{OV2680_8BIT, 0x3808, 0x05},
-		{OV2680_8BIT, 0x3809, 0x10},
-		{OV2680_8BIT, 0x380a, 0x03},
-		{OV2680_8BIT, 0x380b, 0xd0},
-		{OV2680_8BIT, 0x380c, 0x06},
-		{OV2680_8BIT, 0x380d, 0xa8},
-		{OV2680_8BIT, 0x380e, 0x05},
-		{OV2680_8BIT, 0x380f, 0x0e},
-		{OV2680_8BIT, 0x3810, 0x00},
-		{OV2680_8BIT, 0x3811, 0x08},
-		{OV2680_8BIT, 0x3812, 0x00},
-		{OV2680_8BIT, 0x3813, 0x08},
-		{OV2680_8BIT, 0x3814, 0x11},
-		{OV2680_8BIT, 0x3815, 0x11},
-		{OV2680_8BIT, 0x4008, 0x02},
-		{OV2680_8BIT, 0x4009, 0x09},
-		{OV2680_8BIT, 0x5081, 0x41},
-		{OV2680_8BIT, 0x5708, 0x00}, //add for full size flip off and mirror off 2014/09/11
-		{OV2680_8BIT, 0x5704, 0x10},
-		{OV2680_8BIT, 0x5705, 0xa0},
-		{OV2680_8BIT, 0x5706, 0x0c},
-		{OV2680_8BIT, 0x5707, 0x78},
-		{OV2680_8BIT, 0x3820, 0xc0},
-		{OV2680_8BIT, 0x3821, 0x00}, //miror/flip
-		// {OV2680_8BIT, 0x5090, 0x0c},
-		{OV2680_TOK_TERM, 0, 0}
- 	};
-
-	/*
-	 *   1456*1096 30fps  VBlanking 1lane 10bit(no-scaling)
-	*/
-	static struct ov2680_reg const ov2680_1456x1096_30fps[]= {
-		{OV2680_8BIT, 0x3086, 0x00},
-		{OV2680_8BIT, 0x3501, 0x48},
-		{OV2680_8BIT, 0x3502, 0xe0},
-		{OV2680_8BIT, 0x370a, 0x21},
-		{OV2680_8BIT, 0x3801, 0x90},
-		{OV2680_8BIT, 0x3802, 0x00},
-		{OV2680_8BIT, 0x3803, 0x78},
-		{OV2680_8BIT, 0x3804, 0x06},
-		{OV2680_8BIT, 0x3805, 0x4f},
-		{OV2680_8BIT, 0x3806, 0x04},
-		{OV2680_8BIT, 0x3807, 0xC0},
-		{OV2680_8BIT, 0x3808, 0x05},
-		{OV2680_8BIT, 0x3809, 0xb0},
-		{OV2680_8BIT, 0x380a, 0x04},
-		{OV2680_8BIT, 0x380b, 0x48},
-		{OV2680_8BIT, 0x380c, 0x06},
-		{OV2680_8BIT, 0x380d, 0xa8},
-		{OV2680_8BIT, 0x380e, 0x05},
-		{OV2680_8BIT, 0x380f, 0x0e},
-		{OV2680_8BIT, 0x3810, 0x00},
-		{OV2680_8BIT, 0x3811, 0x08},
-		{OV2680_8BIT, 0x3812, 0x00},
-		{OV2680_8BIT, 0x3813, 0x00},
-		{OV2680_8BIT, 0x3814, 0x11},
-		{OV2680_8BIT, 0x3815, 0x11},
-		{OV2680_8BIT, 0x4008, 0x02},
-		{OV2680_8BIT, 0x4009, 0x09},
-		{OV2680_8BIT, 0x5081, 0x41},
-		{OV2680_8BIT, 0x5708, 0x00}, //add for full size flip off and mirror off 2014/09/11
-		{OV2680_8BIT, 0x5704, 0x10},
-		{OV2680_8BIT, 0x5705, 0xa0},
-		{OV2680_8BIT, 0x5706, 0x0c},
-		{OV2680_8BIT, 0x5707, 0x78},
-		{OV2680_8BIT, 0x3820, 0xc0},
-		{OV2680_8BIT, 0x3821, 0x00},
-		// {OV2680_8BIT, 0x5090, 0x0c},
-		{OV2680_TOK_TERM, 0, 0}
-	};
-#endif
-
-	/*
-	 *1616x916  30fps  VBlanking 1lane 10bit
-	 */
-
-	static struct ov2680_reg const ov2680_1616x916_30fps[] = {
-		{OV2680_8BIT, 0x3086, 0x00},
-		{OV2680_8BIT, 0x3501, 0x48},
-		{OV2680_8BIT, 0x3502, 0xe0},
-		{OV2680_8BIT, 0x370a, 0x21},
-		{OV2680_8BIT, 0x3801, 0x00},
-		{OV2680_8BIT, 0x3802, 0x00},
-		{OV2680_8BIT, 0x3803, 0x96},
-		{OV2680_8BIT, 0x3804, 0x06},
-		{OV2680_8BIT, 0x3805, 0x4f},
-		{OV2680_8BIT, 0x3806, 0x04},
-		{OV2680_8BIT, 0x3807, 0x39},
-		{OV2680_8BIT, 0x3808, 0x06},
-		{OV2680_8BIT, 0x3809, 0x50},
-		{OV2680_8BIT, 0x380a, 0x03},
-		{OV2680_8BIT, 0x380b, 0x94},
-		{OV2680_8BIT, 0x380c, 0x06},
-		{OV2680_8BIT, 0x380d, 0xa8},
-		{OV2680_8BIT, 0x380e, 0x05},
-		{OV2680_8BIT, 0x380f, 0x0e},
-		{OV2680_8BIT, 0x3810, 0x00},
-		{OV2680_8BIT, 0x3811, 0x00},
-		{OV2680_8BIT, 0x3812, 0x00},
-		{OV2680_8BIT, 0x3813, 0x08},
-		{OV2680_8BIT, 0x3814, 0x11},
-		{OV2680_8BIT, 0x3815, 0x11},
-		{OV2680_8BIT, 0x4008, 0x02},
-		{OV2680_8BIT, 0x4009, 0x09},
-		{OV2680_8BIT, 0x5081, 0x41},
-		{OV2680_8BIT, 0x5708, 0x01}, //add for full size flip off and mirror off 2014/09/11
-		{OV2680_8BIT, 0x5704, 0x06},
-		{OV2680_8BIT, 0x5705, 0x50},
-		{OV2680_8BIT, 0x5706, 0x03},
-		{OV2680_8BIT, 0x5707, 0x94},
-		{OV2680_8BIT, 0x3820, 0xc0},
-		{OV2680_8BIT, 0x3821, 0x00},
-		// {OV2680_8BIT, 0x5090, 0x0C},
-		{OV2680_TOK_TERM, 0, 0}
-	};
-
-	/*
-	 * 1612x1212 30fps VBlanking 1lane 10Bit
-	 */
-#if 0
-	static struct ov2680_reg const ov2680_1616x1082_30fps[] = {
-		{OV2680_8BIT, 0x3086, 0x00},
-		{OV2680_8BIT, 0x3501, 0x48},
-		{OV2680_8BIT, 0x3502, 0xe0},
-		{OV2680_8BIT, 0x370a, 0x21},
-		{OV2680_8BIT, 0x3801, 0x00},
-		{OV2680_8BIT, 0x3802, 0x00},
-		{OV2680_8BIT, 0x3803, 0x86},
-		{OV2680_8BIT, 0x3804, 0x06},
-		{OV2680_8BIT, 0x3805, 0x4f},
-		{OV2680_8BIT, 0x3806, 0x04},
-		{OV2680_8BIT, 0x3807, 0xbf},
-		{OV2680_8BIT, 0x3808, 0x06},
-		{OV2680_8BIT, 0x3809, 0x50},
-		{OV2680_8BIT, 0x380a, 0x04},
-		{OV2680_8BIT, 0x380b, 0x3a},
-		{OV2680_8BIT, 0x380c, 0x06},
-		{OV2680_8BIT, 0x380d, 0xa8},
-		{OV2680_8BIT, 0x380e, 0x05},
-		{OV2680_8BIT, 0x380f, 0x0e},
-		{OV2680_8BIT, 0x3810, 0x00},
-		{OV2680_8BIT, 0x3811, 0x00},
-		{OV2680_8BIT, 0x3812, 0x00},
-		{OV2680_8BIT, 0x3813, 0x00},
-		{OV2680_8BIT, 0x3814, 0x11},
-		{OV2680_8BIT, 0x3815, 0x11},
-		{OV2680_8BIT, 0x5708, 0x01}, //add for full size flip off and mirror off 2014/09/11
-		{OV2680_8BIT, 0x5704, 0x06},
-		{OV2680_8BIT, 0x5705, 0x50},
-		{OV2680_8BIT, 0x5706, 0x04},
-		{OV2680_8BIT, 0x5707, 0x3a},
-		{OV2680_8BIT, 0x3820, 0xc0},
-		{OV2680_8BIT, 0x3821, 0x00},
-		// {OV2680_8BIT, 0x5090, 0x0C},
-		{OV2680_8BIT, 0x4008, 0x02},
-		{OV2680_8BIT, 0x4009, 0x09},
-		{OV2680_8BIT, 0x5081, 0x41},
-		{OV2680_TOK_TERM, 0, 0}
-        };
-#endif
-	/*
-	 * 1616x1216 30fps VBlanking 1lane 10Bit
-	 */
-	static struct ov2680_reg const ov2680_1616x1216_30fps[] = {
-		{OV2680_8BIT, 0x3086, 0x00},
-		{OV2680_8BIT, 0x3501, 0x48},
-		{OV2680_8BIT, 0x3502, 0xe0},
-		{OV2680_8BIT, 0x370a, 0x21},
-		{OV2680_8BIT, 0x3801, 0x00},
-		{OV2680_8BIT, 0x3802, 0x00},
-		{OV2680_8BIT, 0x3803, 0x00},
-		{OV2680_8BIT, 0x3804, 0x06},
-		{OV2680_8BIT, 0x3805, 0x4f},
-		{OV2680_8BIT, 0x3806, 0x04},
-		{OV2680_8BIT, 0x3807, 0xbf},
-		{OV2680_8BIT, 0x3808, 0x06},
-		{OV2680_8BIT, 0x3809, 0x50},//50},//4line for mirror and flip
-		{OV2680_8BIT, 0x380a, 0x04},
-		{OV2680_8BIT, 0x380b, 0xc0},//c0},
-		{OV2680_8BIT, 0x380c, 0x06},
-		{OV2680_8BIT, 0x380d, 0xa8},
-		{OV2680_8BIT, 0x380e, 0x05},
-		{OV2680_8BIT, 0x380f, 0x0e},
-		{OV2680_8BIT, 0x3810, 0x00},
-		{OV2680_8BIT, 0x3811, 0x00},
-		{OV2680_8BIT, 0x3812, 0x00},
-		{OV2680_8BIT, 0x3813, 0x00},
-		{OV2680_8BIT, 0x3814, 0x11},
-		{OV2680_8BIT, 0x3815, 0x11},
-		{OV2680_8BIT, 0x4008, 0x00},
-		{OV2680_8BIT, 0x4009, 0x0b},
-		{OV2680_8BIT, 0x5081, 0x01},
-		{OV2680_8BIT, 0x5708, 0x01}, //add for full size flip off and mirror off 2014/09/11
-		{OV2680_8BIT, 0x5704, 0x06},
-		{OV2680_8BIT, 0x5705, 0x50},
-		{OV2680_8BIT, 0x5706, 0x04},
-		{OV2680_8BIT, 0x5707, 0xcc},
-		{OV2680_8BIT, 0x3820, 0xc0},
-		{OV2680_8BIT, 0x3821, 0x00},
-		// {OV2680_8BIT, 0x5090, 0x0C},
-		{OV2680_TOK_TERM, 0, 0}
-	};
-
-	static struct ov2680_resolution ov2680_res_preview[] = {
-	{
-		.desc = "ov2680_1616x1216_30fps",
- 	  	.width = 1616,
-		.height = 1216,
-		.pix_clk_freq = 66,
-		.fps = 30,
-		.used = 0,
-		.pixels_per_line = 1698,//1704,
-		.lines_per_frame = 1294,
-		.bin_factor_x = 0,
-		.bin_factor_y = 0,
-		.bin_mode = 0,
-		.skip_frames = 3,
-		.regs = ov2680_1616x1216_30fps,
-	},
-   	{
-		.desc = "ov2680_1616x916_30fps",
-		.width = 1616,
-		.height = 916,
-		.fps = 30,
-		.pix_clk_freq = 66,
-		.used = 0,
-		.pixels_per_line = 1698,//1704,
-		.lines_per_frame = 1294,
-		.bin_factor_x = 0,
-		.bin_factor_y = 0,
-		.bin_mode = 0,
-		.skip_frames = 3,
-		.regs = ov2680_1616x916_30fps,
-	},
-};
-#define N_RES_PREVIEW (ARRAY_SIZE(ov2680_res_preview))
-
-static struct ov2680_resolution *ov2680_res = ov2680_res_preview;
-static unsigned long N_RES = N_RES_PREVIEW;
-
-#endif

commit db01f7ccfa6d4738e366077ce7423d1710b805f3
Author: Mauro Carvalho Chehab <mchehab@s-opensource.com>
Date:   Mon Apr 16 12:37:08 2018 -0400

    media: staging: atomisp: Comment out several unused sensor resolutions
    
    The register settings for several resolutions aren't used
    currently. So, comment them out.
    
    Fix those warnings:
    
    In file included from drivers/staging/media/atomisp/i2c/atomisp-gc2235.c:35:0:
    drivers/staging/media/atomisp/i2c/gc2235.h:340:32: warning: 'gc2235_960_640_30fps' defined but not used [-Wunused-const-variable=]
     static struct gc2235_reg const gc2235_960_640_30fps[] = {
                                    ^~~~~~~~~~~~~~~~~~~~
    drivers/staging/media/atomisp/i2c/gc2235.h:287:32: warning: 'gc2235_1296_736_30fps' defined but not used [-Wunused-const-variable=]
     static struct gc2235_reg const gc2235_1296_736_30fps[] = {
                                    ^~~~~~~~~~~~~~~~~~~~~
    In file included from drivers/staging/media/atomisp/i2c/atomisp-ov2722.c:35:0:
    drivers/staging/media/atomisp/i2c/ov2722.h:999:32: warning: 'ov2722_720p_30fps' defined but not used [-Wunused-const-variable=]
     static struct ov2722_reg const ov2722_720p_30fps[] = {
                                    ^~~~~~~~~~~~~~~~~
    drivers/staging/media/atomisp/i2c/ov2722.h:787:32: warning: 'ov2722_1M3_30fps' defined but not used [-Wunused-const-variable=]
     static struct ov2722_reg const ov2722_1M3_30fps[] = {
                                    ^~~~~~~~~~~~~~~~
    drivers/staging/media/atomisp/i2c/ov2722.h:476:32: warning: 'ov2722_VGA_30fps' defined but not used [-Wunused-const-variable=]
     static struct ov2722_reg const ov2722_VGA_30fps[] = {
                                    ^~~~~~~~~~~~~~~~
    drivers/staging/media/atomisp/i2c/ov2722.h:367:32: warning: 'ov2722_480P_30fps' defined but not used [-Wunused-const-variable=]
     static struct ov2722_reg const ov2722_480P_30fps[] = {
                                    ^~~~~~~~~~~~~~~~~
    drivers/staging/media/atomisp/i2c/ov2722.h:257:32: warning: 'ov2722_QVGA_30fps' defined but not used [-Wunused-const-variable=]
     static struct ov2722_reg const ov2722_QVGA_30fps[] = {
                                    ^~~~~~~~~~~~~~~~~
    drivers/staging/media/atomisp/i2c/atomisp-ov2680.c: In function '__ov2680_set_exposure':
    In file included from drivers/staging/media/atomisp/i2c/atomisp-ov2680.c:35:0:
    At top level:
    drivers/staging/media/atomisp/i2c/ov2680.h:736:33: warning: 'ov2680_1616x1082_30fps' defined but not used [-Wunused-const-variable=]
      static struct ov2680_reg const ov2680_1616x1082_30fps[] = {
                                     ^~~~~~~~~~~~~~~~~~~~~~
    drivers/staging/media/atomisp/i2c/ov2680.h:649:33: warning: 'ov2680_1456x1096_30fps' defined but not used [-Wunused-const-variable=]
      static struct ov2680_reg const ov2680_1456x1096_30fps[]= {
                                     ^~~~~~~~~~~~~~~~~~~~~~
    drivers/staging/media/atomisp/i2c/ov2680.h:606:33: warning: 'ov2680_1296x976_30fps' defined but not used [-Wunused-const-variable=]
      static struct ov2680_reg const ov2680_1296x976_30fps[] = {
                                     ^~~~~~~~~~~~~~~~~~~~~
    drivers/staging/media/atomisp/i2c/ov2680.h:563:33: warning: 'ov2680_720p_30fps' defined but not used [-Wunused-const-variable=]
      static struct ov2680_reg const ov2680_720p_30fps[] = {
                                     ^~~~~~~~~~~~~~~~~
    drivers/staging/media/atomisp/i2c/ov2680.h:520:33: warning: 'ov2680_800x600_30fps' defined but not used [-Wunused-const-variable=]
      static struct ov2680_reg const ov2680_800x600_30fps[] = {
                                     ^~~~~~~~~~~~~~~~~~~~
    drivers/staging/media/atomisp/i2c/ov2680.h:475:33: warning: 'ov2680_720x592_30fps' defined but not used [-Wunused-const-variable=]
      static struct ov2680_reg const ov2680_720x592_30fps[] = {
                                     ^~~~~~~~~~~~~~~~~~~~
    drivers/staging/media/atomisp/i2c/ov2680.h:433:33: warning: 'ov2680_656x496_30fps' defined but not used [-Wunused-const-variable=]
      static struct ov2680_reg const ov2680_656x496_30fps[] = {
                                     ^~~~~~~~~~~~~~~~~~~~
    drivers/staging/media/atomisp/i2c/ov2680.h:389:33: warning: 'ov2680_QVGA_30fps' defined but not used [-Wunused-const-variable=]
      static struct ov2680_reg const ov2680_QVGA_30fps[] = {
                                     ^~~~~~~~~~~~~~~~~
    drivers/staging/media/atomisp/i2c/ov2680.h:346:33: warning: 'ov2680_CIF_30fps' defined but not used [-Wunused-const-variable=]
      static struct ov2680_reg const ov2680_CIF_30fps[] = {
                                     ^~~~~~~~~~~~~~~~
    drivers/staging/media/atomisp/i2c/ov2680.h:301:33: warning: 'ov2680_QCIF_30fps' defined but not used [-Wunused-const-variable=]
      static struct ov2680_reg const ov2680_QCIF_30fps[] = {
                                     ^~~~~~~~~~~~~~~~~
    In file included from drivers/staging/media/atomisp/i2c/ov5693/atomisp-ov5693.c:36:0:
    drivers/staging/media/atomisp/i2c/ov5693/ov5693.h:988:32: warning: 'ov5693_1424x1168_30fps' defined but not used [-Wunused-const-variable=]
     static struct ov5693_reg const ov5693_1424x1168_30fps[] = {
                                    ^~~~~~~~~~~~~~~~~~~~~~
    drivers/staging/media/atomisp/i2c/ov5693/ov5693.h:954:32: warning: 'ov5693_2592x1944_30fps' defined but not used [-Wunused-const-variable=]
     static struct ov5693_reg const ov5693_2592x1944_30fps[] = {
                                    ^~~~~~~~~~~~~~~~~~~~~~
    drivers/staging/media/atomisp/i2c/ov5693/ov5693.h:889:32: warning: 'ov5693_2592x1456_30fps' defined but not used [-Wunused-const-variable=]
     static struct ov5693_reg const ov5693_2592x1456_30fps[] = {
                                    ^~~~~~~~~~~~~~~~~~~~~~
    drivers/staging/media/atomisp/i2c/ov5693/ov5693.h:862:32: warning: 'ov5693_1940x1096' defined but not used [-Wunused-const-variable=]
     static struct ov5693_reg const ov5693_1940x1096[] = {
                                    ^~~~~~~~~~~~~~~~
    drivers/staging/media/atomisp/i2c/ov5693/ov5693.h:796:32: warning: 'ov5693_1636p_30fps' defined but not used [-Wunused-const-variable=]
     static struct ov5693_reg const ov5693_1636p_30fps[] = {
                                    ^~~~~~~~~~~~~~~~~~
    drivers/staging/media/atomisp/i2c/ov5693/ov5693.h:758:32: warning: 'ov5693_1296x736' defined but not used [-Wunused-const-variable=]
     static struct ov5693_reg const ov5693_1296x736[] = {
                                    ^~~~~~~~~~~~~~~
    drivers/staging/media/atomisp/i2c/ov5693/ov5693.h:730:32: warning: 'ov5693_976x556' defined but not used [-Wunused-const-variable=]
     static struct ov5693_reg const ov5693_976x556[] = {
                                    ^~~~~~~~~~~~~~
    drivers/staging/media/atomisp/i2c/ov5693/ov5693.h:672:32: warning: 'ov5693_736x496' defined but not used [-Wunused-const-variable=]
     static struct ov5693_reg const ov5693_736x496[] = {
                                    ^~~~~~~~~~~~~~
    drivers/staging/media/atomisp/i2c/ov5693/ov5693.h:643:32: warning: 'ov5693_192x160' defined but not used [-Wunused-const-variable=]
     static struct ov5693_reg const ov5693_192x160[] = {
                                    ^~~~~~~~~~~~~~
    drivers/staging/media/atomisp/i2c/ov5693/ov5693.h:616:32: warning: 'ov5693_368x304' defined but not used [-Wunused-const-variable=]
     static struct ov5693_reg const ov5693_368x304[] = {
                                    ^~~~~~~~~~~~~~
    drivers/staging/media/atomisp/i2c/ov5693/ov5693.h:587:32: warning: 'ov5693_336x256' defined but not used [-Wunused-const-variable=]
     static struct ov5693_reg const ov5693_336x256[] = {
                                    ^~~~~~~~~~~~~~
    drivers/staging/media/atomisp/i2c/ov5693/ov5693.h:540:32: warning: 'ov5693_1296x976' defined but not used [-Wunused-const-variable=]
     static struct ov5693_reg const ov5693_1296x976[] = {
                                    ^~~~~~~~~~~~~~~
    drivers/staging/media/atomisp/i2c/ov5693/ov5693.h:509:32: warning: 'ov5693_654x496' defined but not used [-Wunused-const-variable=]
     static struct ov5693_reg const ov5693_654x496[] = {
                                    ^~~~~~~~~~~~~~
    
    Signed-off-by: Mauro Carvalho Chehab <mchehab@s-opensource.com>
    Signed-off-by: Sakari Ailus <sakari.ailus@linux.intel.com>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+samsung@kernel.org>

diff --git a/drivers/staging/media/atomisp/i2c/ov2680.h b/drivers/staging/media/atomisp/i2c/ov2680.h
index c83ae379f517..bde2f148184d 100644
--- a/drivers/staging/media/atomisp/i2c/ov2680.h
+++ b/drivers/staging/media/atomisp/i2c/ov2680.h
@@ -295,6 +295,7 @@ struct ov2680_format {
 	};
 
 
+#if 0 /* None of the definitions below are used currently */
 	/*
 	 * 176x144 30fps  VBlanking 1lane 10Bit (binning)
 	 */
@@ -513,7 +514,6 @@ struct ov2680_format {
 		{OV2680_8BIT, 0x5081, 0x41},
 		{OV2680_TOK_TERM, 0, 0}
 	};
-
 	/*
 	* 800x600 30fps  VBlanking 1lane 10Bit (binning)
 	*/
@@ -685,6 +685,7 @@ struct ov2680_format {
 		// {OV2680_8BIT, 0x5090, 0x0c},
 		{OV2680_TOK_TERM, 0, 0}
 	};
+#endif
 
 	/*
 	 *1616x916  30fps  VBlanking 1lane 10bit
@@ -733,6 +734,7 @@ struct ov2680_format {
 	/*
 	 * 1612x1212 30fps VBlanking 1lane 10Bit
 	 */
+#if 0
 	static struct ov2680_reg const ov2680_1616x1082_30fps[] = {
 		{OV2680_8BIT, 0x3086, 0x00},
 		{OV2680_8BIT, 0x3501, 0x48},
@@ -772,6 +774,7 @@ struct ov2680_format {
 		{OV2680_8BIT, 0x5081, 0x41},
 		{OV2680_TOK_TERM, 0, 0}
         };
+#endif
 	/*
 	 * 1616x1216 30fps VBlanking 1lane 10Bit
 	 */

commit 746d60e90e0795068bae73fe5231c8aae19922bf
Author: Mauro Carvalho Chehab <mchehab@s-opensource.com>
Date:   Mon Apr 16 12:37:06 2018 -0400

    media: atomisp: ov2680.h: fix identation
    
    The identation for several tables there are broken.
    
    Signed-off-by: Mauro Carvalho Chehab <mchehab@s-opensource.com>
    Signed-off-by: Sakari Ailus <sakari.ailus@linux.intel.com>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+samsung@kernel.org>

diff --git a/drivers/staging/media/atomisp/i2c/ov2680.h b/drivers/staging/media/atomisp/i2c/ov2680.h
index cb38e6e79409..c83ae379f517 100644
--- a/drivers/staging/media/atomisp/i2c/ov2680.h
+++ b/drivers/staging/media/atomisp/i2c/ov2680.h
@@ -299,131 +299,131 @@ struct ov2680_format {
 	 * 176x144 30fps  VBlanking 1lane 10Bit (binning)
 	 */
 	static struct ov2680_reg const ov2680_QCIF_30fps[] = {
-	{OV2680_8BIT, 0x3086, 0x01},
-	{OV2680_8BIT, 0x3501, 0x24},
-	{OV2680_8BIT, 0x3502, 0x40},
-	{OV2680_8BIT, 0x370a, 0x23},
-	{OV2680_8BIT, 0x3801, 0xa0},
-	{OV2680_8BIT, 0x3802, 0x00},
-	{OV2680_8BIT, 0x3803, 0x78},
-	{OV2680_8BIT, 0x3804, 0x05},
-	{OV2680_8BIT, 0x3805, 0xaf},
-	{OV2680_8BIT, 0x3806, 0x04},
-	{OV2680_8BIT, 0x3807, 0x47},
-	{OV2680_8BIT, 0x3808, 0x00},
-	{OV2680_8BIT, 0x3809, 0xC0},
-	{OV2680_8BIT, 0x380a, 0x00},
-	{OV2680_8BIT, 0x380b, 0xa0},
-	{OV2680_8BIT, 0x380c, 0x06},
-	{OV2680_8BIT, 0x380d, 0xb0},
-	{OV2680_8BIT, 0x380e, 0x02},
-	{OV2680_8BIT, 0x380f, 0x84},
-	{OV2680_8BIT, 0x3810, 0x00},
-	{OV2680_8BIT, 0x3811, 0x04},
-	{OV2680_8BIT, 0x3812, 0x00},
-	{OV2680_8BIT, 0x3813, 0x04},
-	{OV2680_8BIT, 0x3814, 0x31},
-	{OV2680_8BIT, 0x3815, 0x31},
-	{OV2680_8BIT, 0x4000, 0x81},
-	{OV2680_8BIT, 0x4001, 0x40},
-	{OV2680_8BIT, 0x4008, 0x00},
-	{OV2680_8BIT, 0x4009, 0x03},
-	{OV2680_8BIT, 0x5081, 0x41},
-	{OV2680_8BIT, 0x5708, 0x00}, //add for full size flip off and mirror off 2014/09/11
-	{OV2680_8BIT, 0x5704, 0x10},
-	{OV2680_8BIT, 0x5705, 0xa0},
-	{OV2680_8BIT, 0x5706, 0x0c},
-	{OV2680_8BIT, 0x5707, 0x78},
-	{OV2680_8BIT, 0x3820, 0xc2},
-	{OV2680_8BIT, 0x3821, 0x01},
-    // {OV2680_8BIT, 0x5090, 0x0c},
-    {OV2680_TOK_TERM, 0, 0}
+		{OV2680_8BIT, 0x3086, 0x01},
+		{OV2680_8BIT, 0x3501, 0x24},
+		{OV2680_8BIT, 0x3502, 0x40},
+		{OV2680_8BIT, 0x370a, 0x23},
+		{OV2680_8BIT, 0x3801, 0xa0},
+		{OV2680_8BIT, 0x3802, 0x00},
+		{OV2680_8BIT, 0x3803, 0x78},
+		{OV2680_8BIT, 0x3804, 0x05},
+		{OV2680_8BIT, 0x3805, 0xaf},
+		{OV2680_8BIT, 0x3806, 0x04},
+		{OV2680_8BIT, 0x3807, 0x47},
+		{OV2680_8BIT, 0x3808, 0x00},
+		{OV2680_8BIT, 0x3809, 0xC0},
+		{OV2680_8BIT, 0x380a, 0x00},
+		{OV2680_8BIT, 0x380b, 0xa0},
+		{OV2680_8BIT, 0x380c, 0x06},
+		{OV2680_8BIT, 0x380d, 0xb0},
+		{OV2680_8BIT, 0x380e, 0x02},
+		{OV2680_8BIT, 0x380f, 0x84},
+		{OV2680_8BIT, 0x3810, 0x00},
+		{OV2680_8BIT, 0x3811, 0x04},
+		{OV2680_8BIT, 0x3812, 0x00},
+		{OV2680_8BIT, 0x3813, 0x04},
+		{OV2680_8BIT, 0x3814, 0x31},
+		{OV2680_8BIT, 0x3815, 0x31},
+		{OV2680_8BIT, 0x4000, 0x81},
+		{OV2680_8BIT, 0x4001, 0x40},
+		{OV2680_8BIT, 0x4008, 0x00},
+		{OV2680_8BIT, 0x4009, 0x03},
+		{OV2680_8BIT, 0x5081, 0x41},
+		{OV2680_8BIT, 0x5708, 0x00}, //add for full size flip off and mirror off 2014/09/11
+		{OV2680_8BIT, 0x5704, 0x10},
+		{OV2680_8BIT, 0x5705, 0xa0},
+		{OV2680_8BIT, 0x5706, 0x0c},
+		{OV2680_8BIT, 0x5707, 0x78},
+		{OV2680_8BIT, 0x3820, 0xc2},
+		{OV2680_8BIT, 0x3821, 0x01},
+		// {OV2680_8BIT, 0x5090, 0x0c},
+		{OV2680_TOK_TERM, 0, 0}
 	};
 
 	/*
 	 * 352x288 30fps  VBlanking 1lane 10Bit (binning)
 	 */
 	static struct ov2680_reg const ov2680_CIF_30fps[] = {
-	{OV2680_8BIT, 0x3086, 0x01},
-	{OV2680_8BIT, 0x3501, 0x24},
-	{OV2680_8BIT, 0x3502, 0x40},
-	{OV2680_8BIT, 0x370a, 0x23},
-	{OV2680_8BIT, 0x3801, 0xa0},
-	{OV2680_8BIT, 0x3802, 0x00},
-	{OV2680_8BIT, 0x3803, 0x78},
-	{OV2680_8BIT, 0x3804, 0x03},
-	{OV2680_8BIT, 0x3805, 0x8f},
-	{OV2680_8BIT, 0x3806, 0x02},
-	{OV2680_8BIT, 0x3807, 0xe7},
-	{OV2680_8BIT, 0x3808, 0x01},
-	{OV2680_8BIT, 0x3809, 0x70},
-	{OV2680_8BIT, 0x380a, 0x01},
-	{OV2680_8BIT, 0x380b, 0x30},
-	{OV2680_8BIT, 0x380c, 0x06},
-	{OV2680_8BIT, 0x380d, 0xb0},
-	{OV2680_8BIT, 0x380e, 0x02},
-	{OV2680_8BIT, 0x380f, 0x84},
-	{OV2680_8BIT, 0x3810, 0x00},
-	{OV2680_8BIT, 0x3811, 0x04},
-	{OV2680_8BIT, 0x3812, 0x00},
-	{OV2680_8BIT, 0x3813, 0x04},
-	{OV2680_8BIT, 0x3814, 0x31},
-	{OV2680_8BIT, 0x3815, 0x31},
-	{OV2680_8BIT, 0x4008, 0x00},
-	{OV2680_8BIT, 0x4009, 0x03},
-	{OV2680_8BIT, 0x5081, 0x41},
-	{OV2680_8BIT, 0x5708, 0x00}, //add for full size flip off and mirror off 2014/09/11
-	{OV2680_8BIT, 0x5704, 0x10},
-	{OV2680_8BIT, 0x5705, 0xa0},
-	{OV2680_8BIT, 0x5706, 0x0c},
-	{OV2680_8BIT, 0x5707, 0x78},
-	{OV2680_8BIT, 0x3820, 0xc2},
-	{OV2680_8BIT, 0x3821, 0x01},
-    // {OV2680_8BIT, 0x5090, 0x0c},
-    {OV2680_TOK_TERM, 0, 0}
+		{OV2680_8BIT, 0x3086, 0x01},
+		{OV2680_8BIT, 0x3501, 0x24},
+		{OV2680_8BIT, 0x3502, 0x40},
+		{OV2680_8BIT, 0x370a, 0x23},
+		{OV2680_8BIT, 0x3801, 0xa0},
+		{OV2680_8BIT, 0x3802, 0x00},
+		{OV2680_8BIT, 0x3803, 0x78},
+		{OV2680_8BIT, 0x3804, 0x03},
+		{OV2680_8BIT, 0x3805, 0x8f},
+		{OV2680_8BIT, 0x3806, 0x02},
+		{OV2680_8BIT, 0x3807, 0xe7},
+		{OV2680_8BIT, 0x3808, 0x01},
+		{OV2680_8BIT, 0x3809, 0x70},
+		{OV2680_8BIT, 0x380a, 0x01},
+		{OV2680_8BIT, 0x380b, 0x30},
+		{OV2680_8BIT, 0x380c, 0x06},
+		{OV2680_8BIT, 0x380d, 0xb0},
+		{OV2680_8BIT, 0x380e, 0x02},
+		{OV2680_8BIT, 0x380f, 0x84},
+		{OV2680_8BIT, 0x3810, 0x00},
+		{OV2680_8BIT, 0x3811, 0x04},
+		{OV2680_8BIT, 0x3812, 0x00},
+		{OV2680_8BIT, 0x3813, 0x04},
+		{OV2680_8BIT, 0x3814, 0x31},
+		{OV2680_8BIT, 0x3815, 0x31},
+		{OV2680_8BIT, 0x4008, 0x00},
+		{OV2680_8BIT, 0x4009, 0x03},
+		{OV2680_8BIT, 0x5081, 0x41},
+		{OV2680_8BIT, 0x5708, 0x00}, //add for full size flip off and mirror off 2014/09/11
+		{OV2680_8BIT, 0x5704, 0x10},
+		{OV2680_8BIT, 0x5705, 0xa0},
+		{OV2680_8BIT, 0x5706, 0x0c},
+		{OV2680_8BIT, 0x5707, 0x78},
+		{OV2680_8BIT, 0x3820, 0xc2},
+		{OV2680_8BIT, 0x3821, 0x01},
+		// {OV2680_8BIT, 0x5090, 0x0c},
+		{OV2680_TOK_TERM, 0, 0}
 	};
 
 	/*
 	 * 336x256 30fps  VBlanking 1lane 10Bit (binning)
 	 */
 	static struct ov2680_reg const ov2680_QVGA_30fps[] = {
-	{OV2680_8BIT, 0x3086, 0x01},
-	{OV2680_8BIT, 0x3501, 0x24},
-	{OV2680_8BIT, 0x3502, 0x40},
-	{OV2680_8BIT, 0x370a, 0x23},
-	{OV2680_8BIT, 0x3801, 0xa0},
-	{OV2680_8BIT, 0x3802, 0x00},
-	{OV2680_8BIT, 0x3803, 0x78},
-	{OV2680_8BIT, 0x3804, 0x03},
-	{OV2680_8BIT, 0x3805, 0x4f},
-	{OV2680_8BIT, 0x3806, 0x02},
-	{OV2680_8BIT, 0x3807, 0x87},
-	{OV2680_8BIT, 0x3808, 0x01},
-	{OV2680_8BIT, 0x3809, 0x50},
-	{OV2680_8BIT, 0x380a, 0x01},
-	{OV2680_8BIT, 0x380b, 0x00},
-	{OV2680_8BIT, 0x380c, 0x06},
-	{OV2680_8BIT, 0x380d, 0xb0},
-	{OV2680_8BIT, 0x380e, 0x02},
-	{OV2680_8BIT, 0x380f, 0x84},
-	{OV2680_8BIT, 0x3810, 0x00},
-	{OV2680_8BIT, 0x3811, 0x04},
-	{OV2680_8BIT, 0x3812, 0x00},
-	{OV2680_8BIT, 0x3813, 0x04},
-	{OV2680_8BIT, 0x3814, 0x31},
-	{OV2680_8BIT, 0x3815, 0x31},
-	{OV2680_8BIT, 0x4008, 0x00},
-	{OV2680_8BIT, 0x4009, 0x03},
-	{OV2680_8BIT, 0x5081, 0x41},
-	{OV2680_8BIT, 0x5708, 0x00}, //add for full size flip off and mirror off 2014/09/11
-	{OV2680_8BIT, 0x5704, 0x10},
-	{OV2680_8BIT, 0x5705, 0xa0},
-	{OV2680_8BIT, 0x5706, 0x0c},
-	{OV2680_8BIT, 0x5707, 0x78},
-	{OV2680_8BIT, 0x3820, 0xc2},
-	{OV2680_8BIT, 0x3821, 0x01},
-    // {OV2680_8BIT, 0x5090, 0x0c},
-    {OV2680_TOK_TERM, 0, 0}
+		{OV2680_8BIT, 0x3086, 0x01},
+		{OV2680_8BIT, 0x3501, 0x24},
+		{OV2680_8BIT, 0x3502, 0x40},
+		{OV2680_8BIT, 0x370a, 0x23},
+		{OV2680_8BIT, 0x3801, 0xa0},
+		{OV2680_8BIT, 0x3802, 0x00},
+		{OV2680_8BIT, 0x3803, 0x78},
+		{OV2680_8BIT, 0x3804, 0x03},
+		{OV2680_8BIT, 0x3805, 0x4f},
+		{OV2680_8BIT, 0x3806, 0x02},
+		{OV2680_8BIT, 0x3807, 0x87},
+		{OV2680_8BIT, 0x3808, 0x01},
+		{OV2680_8BIT, 0x3809, 0x50},
+		{OV2680_8BIT, 0x380a, 0x01},
+		{OV2680_8BIT, 0x380b, 0x00},
+		{OV2680_8BIT, 0x380c, 0x06},
+		{OV2680_8BIT, 0x380d, 0xb0},
+		{OV2680_8BIT, 0x380e, 0x02},
+		{OV2680_8BIT, 0x380f, 0x84},
+		{OV2680_8BIT, 0x3810, 0x00},
+		{OV2680_8BIT, 0x3811, 0x04},
+		{OV2680_8BIT, 0x3812, 0x00},
+		{OV2680_8BIT, 0x3813, 0x04},
+		{OV2680_8BIT, 0x3814, 0x31},
+		{OV2680_8BIT, 0x3815, 0x31},
+		{OV2680_8BIT, 0x4008, 0x00},
+		{OV2680_8BIT, 0x4009, 0x03},
+		{OV2680_8BIT, 0x5081, 0x41},
+		{OV2680_8BIT, 0x5708, 0x00}, //add for full size flip off and mirror off 2014/09/11
+		{OV2680_8BIT, 0x5704, 0x10},
+		{OV2680_8BIT, 0x5705, 0xa0},
+		{OV2680_8BIT, 0x5706, 0x0c},
+		{OV2680_8BIT, 0x5707, 0x78},
+		{OV2680_8BIT, 0x3820, 0xc2},
+		{OV2680_8BIT, 0x3821, 0x01},
+		// {OV2680_8BIT, 0x5090, 0x0c},
+		{OV2680_TOK_TERM, 0, 0}
 	};
 
 
@@ -431,259 +431,259 @@ struct ov2680_format {
 	 * 656x496 30fps  VBlanking 1lane 10Bit (binning)
 	 */
 	static struct ov2680_reg const ov2680_656x496_30fps[] = {
-	{OV2680_8BIT, 0x3086, 0x01},
-	{OV2680_8BIT, 0x3501, 0x24},
-	{OV2680_8BIT, 0x3502, 0x40},
-	{OV2680_8BIT, 0x370a, 0x23},
-	{OV2680_8BIT, 0x3801, 0xa0},
-	{OV2680_8BIT, 0x3802, 0x00},
-	{OV2680_8BIT, 0x3803, 0x78},
-	{OV2680_8BIT, 0x3804, 0x05},
-	{OV2680_8BIT, 0x3805, 0xcf},
-	{OV2680_8BIT, 0x3806, 0x04},
-	{OV2680_8BIT, 0x3807, 0x67},
-	{OV2680_8BIT, 0x3808, 0x02},
-	{OV2680_8BIT, 0x3809, 0x90},
-	{OV2680_8BIT, 0x380a, 0x01},
-	{OV2680_8BIT, 0x380b, 0xf0},
-	{OV2680_8BIT, 0x380c, 0x06},
-	{OV2680_8BIT, 0x380d, 0xb0},
-	{OV2680_8BIT, 0x380e, 0x02},
-	{OV2680_8BIT, 0x380f, 0x84},
-	{OV2680_8BIT, 0x3810, 0x00},
-	{OV2680_8BIT, 0x3811, 0x04},
-	{OV2680_8BIT, 0x3812, 0x00},
-	{OV2680_8BIT, 0x3813, 0x04},
-	{OV2680_8BIT, 0x3814, 0x31},
-	{OV2680_8BIT, 0x3815, 0x31},
-	{OV2680_8BIT, 0x4008, 0x00},
-	{OV2680_8BIT, 0x4009, 0x03},
-	{OV2680_8BIT, 0x5081, 0x41},
-	{OV2680_8BIT, 0x5708, 0x00}, //add for full size flip off and mirror off 2014/09/11
-	{OV2680_8BIT, 0x5704, 0x10},
-	{OV2680_8BIT, 0x5705, 0xa0},
-	{OV2680_8BIT, 0x5706, 0x0c},
-	{OV2680_8BIT, 0x5707, 0x78},
-	{OV2680_8BIT, 0x3820, 0xc2},
-	{OV2680_8BIT, 0x3821, 0x01},
-    // {OV2680_8BIT, 0x5090, 0x0c},
-    {OV2680_TOK_TERM, 0, 0}
+		{OV2680_8BIT, 0x3086, 0x01},
+		{OV2680_8BIT, 0x3501, 0x24},
+		{OV2680_8BIT, 0x3502, 0x40},
+		{OV2680_8BIT, 0x370a, 0x23},
+		{OV2680_8BIT, 0x3801, 0xa0},
+		{OV2680_8BIT, 0x3802, 0x00},
+		{OV2680_8BIT, 0x3803, 0x78},
+		{OV2680_8BIT, 0x3804, 0x05},
+		{OV2680_8BIT, 0x3805, 0xcf},
+		{OV2680_8BIT, 0x3806, 0x04},
+		{OV2680_8BIT, 0x3807, 0x67},
+		{OV2680_8BIT, 0x3808, 0x02},
+		{OV2680_8BIT, 0x3809, 0x90},
+		{OV2680_8BIT, 0x380a, 0x01},
+		{OV2680_8BIT, 0x380b, 0xf0},
+		{OV2680_8BIT, 0x380c, 0x06},
+		{OV2680_8BIT, 0x380d, 0xb0},
+		{OV2680_8BIT, 0x380e, 0x02},
+		{OV2680_8BIT, 0x380f, 0x84},
+		{OV2680_8BIT, 0x3810, 0x00},
+		{OV2680_8BIT, 0x3811, 0x04},
+		{OV2680_8BIT, 0x3812, 0x00},
+		{OV2680_8BIT, 0x3813, 0x04},
+		{OV2680_8BIT, 0x3814, 0x31},
+		{OV2680_8BIT, 0x3815, 0x31},
+		{OV2680_8BIT, 0x4008, 0x00},
+		{OV2680_8BIT, 0x4009, 0x03},
+		{OV2680_8BIT, 0x5081, 0x41},
+		{OV2680_8BIT, 0x5708, 0x00}, //add for full size flip off and mirror off 2014/09/11
+		{OV2680_8BIT, 0x5704, 0x10},
+		{OV2680_8BIT, 0x5705, 0xa0},
+		{OV2680_8BIT, 0x5706, 0x0c},
+		{OV2680_8BIT, 0x5707, 0x78},
+		{OV2680_8BIT, 0x3820, 0xc2},
+		{OV2680_8BIT, 0x3821, 0x01},
+		// {OV2680_8BIT, 0x5090, 0x0c},
+		{OV2680_TOK_TERM, 0, 0}
 	};
 	/*
 	* 800x600 30fps  VBlanking 1lane 10Bit (binning)
 	*/
 	static struct ov2680_reg const ov2680_720x592_30fps[] = {
-	{OV2680_8BIT, 0x3086, 0x01},
-	{OV2680_8BIT, 0x3501, 0x26},
-	{OV2680_8BIT, 0x3502, 0x40},
-	{OV2680_8BIT, 0x370a, 0x23},
-	{OV2680_8BIT, 0x3801, 0x00}, // X_ADDR_START;
-	{OV2680_8BIT, 0x3802, 0x00},
-	{OV2680_8BIT, 0x3803, 0x00}, // Y_ADDR_START;
-	{OV2680_8BIT, 0x3804, 0x05},
-	{OV2680_8BIT, 0x3805, 0xaf}, // X_ADDR_END;
-	{OV2680_8BIT, 0x3806, 0x04},
-	{OV2680_8BIT, 0x3807, 0xaf}, // Y_ADDR_END;
-	{OV2680_8BIT, 0x3808, 0x02},
-	{OV2680_8BIT, 0x3809, 0xd0}, // X_OUTPUT_SIZE;
-	{OV2680_8BIT, 0x380a, 0x02},
-	{OV2680_8BIT, 0x380b, 0x50}, // Y_OUTPUT_SIZE;
-	{OV2680_8BIT, 0x380c, 0x06},
-	{OV2680_8BIT, 0x380d, 0xac}, // HTS;
-	{OV2680_8BIT, 0x380e, 0x02},
-	{OV2680_8BIT, 0x380f, 0x84}, // VTS;
-	{OV2680_8BIT, 0x3810, 0x00},
-	{OV2680_8BIT, 0x3811, 0x00},
-	{OV2680_8BIT, 0x3812, 0x00},
-	{OV2680_8BIT, 0x3813, 0x00},
-	{OV2680_8BIT, 0x3814, 0x31},
-	{OV2680_8BIT, 0x3815, 0x31},
-	{OV2680_8BIT, 0x4008, 0x00},
-	{OV2680_8BIT, 0x4009, 0x03},
-	{OV2680_8BIT, 0x5708, 0x00},
-	{OV2680_8BIT, 0x5704, 0x02},
-	{OV2680_8BIT, 0x5705, 0xd0}, // X_WIN;
-	{OV2680_8BIT, 0x5706, 0x02},
-	{OV2680_8BIT, 0x5707, 0x50}, // Y_WIN;
-	{OV2680_8BIT, 0x3820, 0xc2}, // FLIP_FORMAT;
-	{OV2680_8BIT, 0x3821, 0x01}, // MIRROR_FORMAT;
-    {OV2680_8BIT, 0x5090, 0x00}, // PRE ISP CTRL16, default value is 0x0C;
-                                 // BIT[3]: Mirror order, BG or GB;
-                                 // BIT[2]: Flip order, BR or RB;
-	{OV2680_8BIT, 0x5081, 0x41},
-    {OV2680_TOK_TERM, 0, 0}
+		{OV2680_8BIT, 0x3086, 0x01},
+		{OV2680_8BIT, 0x3501, 0x26},
+		{OV2680_8BIT, 0x3502, 0x40},
+		{OV2680_8BIT, 0x370a, 0x23},
+		{OV2680_8BIT, 0x3801, 0x00}, // X_ADDR_START;
+		{OV2680_8BIT, 0x3802, 0x00},
+		{OV2680_8BIT, 0x3803, 0x00}, // Y_ADDR_START;
+		{OV2680_8BIT, 0x3804, 0x05},
+		{OV2680_8BIT, 0x3805, 0xaf}, // X_ADDR_END;
+		{OV2680_8BIT, 0x3806, 0x04},
+		{OV2680_8BIT, 0x3807, 0xaf}, // Y_ADDR_END;
+		{OV2680_8BIT, 0x3808, 0x02},
+		{OV2680_8BIT, 0x3809, 0xd0}, // X_OUTPUT_SIZE;
+		{OV2680_8BIT, 0x380a, 0x02},
+		{OV2680_8BIT, 0x380b, 0x50}, // Y_OUTPUT_SIZE;
+		{OV2680_8BIT, 0x380c, 0x06},
+		{OV2680_8BIT, 0x380d, 0xac}, // HTS;
+		{OV2680_8BIT, 0x380e, 0x02},
+		{OV2680_8BIT, 0x380f, 0x84}, // VTS;
+		{OV2680_8BIT, 0x3810, 0x00},
+		{OV2680_8BIT, 0x3811, 0x00},
+		{OV2680_8BIT, 0x3812, 0x00},
+		{OV2680_8BIT, 0x3813, 0x00},
+		{OV2680_8BIT, 0x3814, 0x31},
+		{OV2680_8BIT, 0x3815, 0x31},
+		{OV2680_8BIT, 0x4008, 0x00},
+		{OV2680_8BIT, 0x4009, 0x03},
+		{OV2680_8BIT, 0x5708, 0x00},
+		{OV2680_8BIT, 0x5704, 0x02},
+		{OV2680_8BIT, 0x5705, 0xd0}, // X_WIN;
+		{OV2680_8BIT, 0x5706, 0x02},
+		{OV2680_8BIT, 0x5707, 0x50}, // Y_WIN;
+		{OV2680_8BIT, 0x3820, 0xc2}, // FLIP_FORMAT;
+		{OV2680_8BIT, 0x3821, 0x01}, // MIRROR_FORMAT;
+		{OV2680_8BIT, 0x5090, 0x00}, // PRE ISP CTRL16, default value is 0x0C;
+					     // BIT[3]: Mirror order, BG or GB;
+					     // BIT[2]: Flip order, BR or RB;
+		{OV2680_8BIT, 0x5081, 0x41},
+		{OV2680_TOK_TERM, 0, 0}
 	};
 
 	/*
 	* 800x600 30fps  VBlanking 1lane 10Bit (binning)
 	*/
 	static struct ov2680_reg const ov2680_800x600_30fps[] = {
-	{OV2680_8BIT, 0x3086, 0x01},
-	{OV2680_8BIT, 0x3501, 0x26},
-	{OV2680_8BIT, 0x3502, 0x40},
-	{OV2680_8BIT, 0x370a, 0x23},
-	{OV2680_8BIT, 0x3801, 0x00},
-	{OV2680_8BIT, 0x3802, 0x00},
-	{OV2680_8BIT, 0x3803, 0x00},
-	{OV2680_8BIT, 0x3804, 0x06},
-	{OV2680_8BIT, 0x3805, 0x4f},
-	{OV2680_8BIT, 0x3806, 0x04},
-	{OV2680_8BIT, 0x3807, 0xbf},
-	{OV2680_8BIT, 0x3808, 0x03},
-	{OV2680_8BIT, 0x3809, 0x20},
-	{OV2680_8BIT, 0x380a, 0x02},
-	{OV2680_8BIT, 0x380b, 0x58},
-	{OV2680_8BIT, 0x380c, 0x06},
-	{OV2680_8BIT, 0x380d, 0xac},
-	{OV2680_8BIT, 0x380e, 0x02},
-	{OV2680_8BIT, 0x380f, 0x84},
-	{OV2680_8BIT, 0x3810, 0x00},
-	{OV2680_8BIT, 0x3811, 0x00},
-	{OV2680_8BIT, 0x3812, 0x00},
-	{OV2680_8BIT, 0x3813, 0x00},
-	{OV2680_8BIT, 0x3814, 0x31},
-	{OV2680_8BIT, 0x3815, 0x31},
-	{OV2680_8BIT, 0x5708, 0x00},
-	{OV2680_8BIT, 0x5704, 0x03},
-	{OV2680_8BIT, 0x5705, 0x20},
-	{OV2680_8BIT, 0x5706, 0x02},
-	{OV2680_8BIT, 0x5707, 0x58},
-	{OV2680_8BIT, 0x3820, 0xc2},
-	{OV2680_8BIT, 0x3821, 0x01},
-    {OV2680_8BIT, 0x5090, 0x00},
-	{OV2680_8BIT, 0x4008, 0x00},
-	{OV2680_8BIT, 0x4009, 0x03},
-	{OV2680_8BIT, 0x5081, 0x41},
-    {OV2680_TOK_TERM, 0, 0}
+		{OV2680_8BIT, 0x3086, 0x01},
+		{OV2680_8BIT, 0x3501, 0x26},
+		{OV2680_8BIT, 0x3502, 0x40},
+		{OV2680_8BIT, 0x370a, 0x23},
+		{OV2680_8BIT, 0x3801, 0x00},
+		{OV2680_8BIT, 0x3802, 0x00},
+		{OV2680_8BIT, 0x3803, 0x00},
+		{OV2680_8BIT, 0x3804, 0x06},
+		{OV2680_8BIT, 0x3805, 0x4f},
+		{OV2680_8BIT, 0x3806, 0x04},
+		{OV2680_8BIT, 0x3807, 0xbf},
+		{OV2680_8BIT, 0x3808, 0x03},
+		{OV2680_8BIT, 0x3809, 0x20},
+		{OV2680_8BIT, 0x380a, 0x02},
+		{OV2680_8BIT, 0x380b, 0x58},
+		{OV2680_8BIT, 0x380c, 0x06},
+		{OV2680_8BIT, 0x380d, 0xac},
+		{OV2680_8BIT, 0x380e, 0x02},
+		{OV2680_8BIT, 0x380f, 0x84},
+		{OV2680_8BIT, 0x3810, 0x00},
+		{OV2680_8BIT, 0x3811, 0x00},
+		{OV2680_8BIT, 0x3812, 0x00},
+		{OV2680_8BIT, 0x3813, 0x00},
+		{OV2680_8BIT, 0x3814, 0x31},
+		{OV2680_8BIT, 0x3815, 0x31},
+		{OV2680_8BIT, 0x5708, 0x00},
+		{OV2680_8BIT, 0x5704, 0x03},
+		{OV2680_8BIT, 0x5705, 0x20},
+		{OV2680_8BIT, 0x5706, 0x02},
+		{OV2680_8BIT, 0x5707, 0x58},
+		{OV2680_8BIT, 0x3820, 0xc2},
+		{OV2680_8BIT, 0x3821, 0x01},
+		{OV2680_8BIT, 0x5090, 0x00},
+		{OV2680_8BIT, 0x4008, 0x00},
+		{OV2680_8BIT, 0x4009, 0x03},
+		{OV2680_8BIT, 0x5081, 0x41},
+		{OV2680_TOK_TERM, 0, 0}
 	};
 
 	/*
 	 * 720p=1280*720 30fps  VBlanking 1lane 10Bit (no-Scaling)
 	 */
 	static struct ov2680_reg const ov2680_720p_30fps[] = {
-	{OV2680_8BIT, 0x3086, 0x00},
-	{OV2680_8BIT, 0x3501, 0x48},
-	{OV2680_8BIT, 0x3502, 0xe0},
-	{OV2680_8BIT, 0x370a, 0x21},
-	{OV2680_8BIT, 0x3801, 0xa0},
-	{OV2680_8BIT, 0x3802, 0x00},
-	{OV2680_8BIT, 0x3803, 0xf2},
-	{OV2680_8BIT, 0x3804, 0x05},
-	{OV2680_8BIT, 0x3805, 0xbf},
-	{OV2680_8BIT, 0x3806, 0x03},
-	{OV2680_8BIT, 0x3807, 0xdd},
-	{OV2680_8BIT, 0x3808, 0x05},
-	{OV2680_8BIT, 0x3809, 0x10},
-	{OV2680_8BIT, 0x380a, 0x02},
-	{OV2680_8BIT, 0x380b, 0xe0},
-	{OV2680_8BIT, 0x380c, 0x06},
-	{OV2680_8BIT, 0x380d, 0xa8},
-	{OV2680_8BIT, 0x380e, 0x05},
-	{OV2680_8BIT, 0x380f, 0x0e},
-	{OV2680_8BIT, 0x3810, 0x00},
-	{OV2680_8BIT, 0x3811, 0x08},
-	{OV2680_8BIT, 0x3812, 0x00},
-	{OV2680_8BIT, 0x3813, 0x06},
-	{OV2680_8BIT, 0x3814, 0x11},
-	{OV2680_8BIT, 0x3815, 0x11},
-	{OV2680_8BIT, 0x4008, 0x02},
-	{OV2680_8BIT, 0x4009, 0x09},
-	{OV2680_8BIT, 0x5081, 0x41},
-	{OV2680_8BIT, 0x5708, 0x00}, //add for full size flip off and mirror off 2014/09/11
-	{OV2680_8BIT, 0x5704, 0x10},
-	{OV2680_8BIT, 0x5705, 0xa0},
-	{OV2680_8BIT, 0x5706, 0x0c},
-	{OV2680_8BIT, 0x5707, 0x78},
-	{OV2680_8BIT, 0x3820, 0xc0},
-	{OV2680_8BIT, 0x3821, 0x00},
-    // {OV2680_8BIT, 0x5090, 0x0c},
-    {OV2680_TOK_TERM, 0, 0}
+		{OV2680_8BIT, 0x3086, 0x00},
+		{OV2680_8BIT, 0x3501, 0x48},
+		{OV2680_8BIT, 0x3502, 0xe0},
+		{OV2680_8BIT, 0x370a, 0x21},
+		{OV2680_8BIT, 0x3801, 0xa0},
+		{OV2680_8BIT, 0x3802, 0x00},
+		{OV2680_8BIT, 0x3803, 0xf2},
+		{OV2680_8BIT, 0x3804, 0x05},
+		{OV2680_8BIT, 0x3805, 0xbf},
+		{OV2680_8BIT, 0x3806, 0x03},
+		{OV2680_8BIT, 0x3807, 0xdd},
+		{OV2680_8BIT, 0x3808, 0x05},
+		{OV2680_8BIT, 0x3809, 0x10},
+		{OV2680_8BIT, 0x380a, 0x02},
+		{OV2680_8BIT, 0x380b, 0xe0},
+		{OV2680_8BIT, 0x380c, 0x06},
+		{OV2680_8BIT, 0x380d, 0xa8},
+		{OV2680_8BIT, 0x380e, 0x05},
+		{OV2680_8BIT, 0x380f, 0x0e},
+		{OV2680_8BIT, 0x3810, 0x00},
+		{OV2680_8BIT, 0x3811, 0x08},
+		{OV2680_8BIT, 0x3812, 0x00},
+		{OV2680_8BIT, 0x3813, 0x06},
+		{OV2680_8BIT, 0x3814, 0x11},
+		{OV2680_8BIT, 0x3815, 0x11},
+		{OV2680_8BIT, 0x4008, 0x02},
+		{OV2680_8BIT, 0x4009, 0x09},
+		{OV2680_8BIT, 0x5081, 0x41},
+		{OV2680_8BIT, 0x5708, 0x00}, //add for full size flip off and mirror off 2014/09/11
+		{OV2680_8BIT, 0x5704, 0x10},
+		{OV2680_8BIT, 0x5705, 0xa0},
+		{OV2680_8BIT, 0x5706, 0x0c},
+		{OV2680_8BIT, 0x5707, 0x78},
+		{OV2680_8BIT, 0x3820, 0xc0},
+		{OV2680_8BIT, 0x3821, 0x00},
+		// {OV2680_8BIT, 0x5090, 0x0c},
+		{OV2680_TOK_TERM, 0, 0}
 	};
 
 	/*
 	 * 1296x976 30fps  VBlanking 1lane 10Bit(no-scaling)
 	 */
 	static struct ov2680_reg const ov2680_1296x976_30fps[] = {
-	{OV2680_8BIT, 0x3086, 0x00},
-	{OV2680_8BIT, 0x3501, 0x48},
-	{OV2680_8BIT, 0x3502, 0xe0},
-	{OV2680_8BIT, 0x370a, 0x21},
-	{OV2680_8BIT, 0x3801, 0xa0},
-	{OV2680_8BIT, 0x3802, 0x00},
-	{OV2680_8BIT, 0x3803, 0x78},
-	{OV2680_8BIT, 0x3804, 0x05},
-	{OV2680_8BIT, 0x3805, 0xbf},
-	{OV2680_8BIT, 0x3806, 0x04},
-	{OV2680_8BIT, 0x3807, 0x57},
-	{OV2680_8BIT, 0x3808, 0x05},
-	{OV2680_8BIT, 0x3809, 0x10},
-	{OV2680_8BIT, 0x380a, 0x03},
-	{OV2680_8BIT, 0x380b, 0xd0},
-	{OV2680_8BIT, 0x380c, 0x06},
-	{OV2680_8BIT, 0x380d, 0xa8},
-	{OV2680_8BIT, 0x380e, 0x05},
-	{OV2680_8BIT, 0x380f, 0x0e},
-	{OV2680_8BIT, 0x3810, 0x00},
-	{OV2680_8BIT, 0x3811, 0x08},
-	{OV2680_8BIT, 0x3812, 0x00},
-	{OV2680_8BIT, 0x3813, 0x08},
-	{OV2680_8BIT, 0x3814, 0x11},
-	{OV2680_8BIT, 0x3815, 0x11},
-	{OV2680_8BIT, 0x4008, 0x02},
-	{OV2680_8BIT, 0x4009, 0x09},
-	{OV2680_8BIT, 0x5081, 0x41},
-	{OV2680_8BIT, 0x5708, 0x00}, //add for full size flip off and mirror off 2014/09/11
-	{OV2680_8BIT, 0x5704, 0x10},
-	{OV2680_8BIT, 0x5705, 0xa0},
-	{OV2680_8BIT, 0x5706, 0x0c},
-	{OV2680_8BIT, 0x5707, 0x78},
-	{OV2680_8BIT, 0x3820, 0xc0},
-	{OV2680_8BIT, 0x3821, 0x00}, //miror/flip
-    // {OV2680_8BIT, 0x5090, 0x0c},
-    {OV2680_TOK_TERM, 0, 0}
+		{OV2680_8BIT, 0x3086, 0x00},
+		{OV2680_8BIT, 0x3501, 0x48},
+		{OV2680_8BIT, 0x3502, 0xe0},
+		{OV2680_8BIT, 0x370a, 0x21},
+		{OV2680_8BIT, 0x3801, 0xa0},
+		{OV2680_8BIT, 0x3802, 0x00},
+		{OV2680_8BIT, 0x3803, 0x78},
+		{OV2680_8BIT, 0x3804, 0x05},
+		{OV2680_8BIT, 0x3805, 0xbf},
+		{OV2680_8BIT, 0x3806, 0x04},
+		{OV2680_8BIT, 0x3807, 0x57},
+		{OV2680_8BIT, 0x3808, 0x05},
+		{OV2680_8BIT, 0x3809, 0x10},
+		{OV2680_8BIT, 0x380a, 0x03},
+		{OV2680_8BIT, 0x380b, 0xd0},
+		{OV2680_8BIT, 0x380c, 0x06},
+		{OV2680_8BIT, 0x380d, 0xa8},
+		{OV2680_8BIT, 0x380e, 0x05},
+		{OV2680_8BIT, 0x380f, 0x0e},
+		{OV2680_8BIT, 0x3810, 0x00},
+		{OV2680_8BIT, 0x3811, 0x08},
+		{OV2680_8BIT, 0x3812, 0x00},
+		{OV2680_8BIT, 0x3813, 0x08},
+		{OV2680_8BIT, 0x3814, 0x11},
+		{OV2680_8BIT, 0x3815, 0x11},
+		{OV2680_8BIT, 0x4008, 0x02},
+		{OV2680_8BIT, 0x4009, 0x09},
+		{OV2680_8BIT, 0x5081, 0x41},
+		{OV2680_8BIT, 0x5708, 0x00}, //add for full size flip off and mirror off 2014/09/11
+		{OV2680_8BIT, 0x5704, 0x10},
+		{OV2680_8BIT, 0x5705, 0xa0},
+		{OV2680_8BIT, 0x5706, 0x0c},
+		{OV2680_8BIT, 0x5707, 0x78},
+		{OV2680_8BIT, 0x3820, 0xc0},
+		{OV2680_8BIT, 0x3821, 0x00}, //miror/flip
+		// {OV2680_8BIT, 0x5090, 0x0c},
+		{OV2680_TOK_TERM, 0, 0}
  	};
 
 	/*
 	 *   1456*1096 30fps  VBlanking 1lane 10bit(no-scaling)
 	*/
 	static struct ov2680_reg const ov2680_1456x1096_30fps[]= {
-	{OV2680_8BIT, 0x3086, 0x00},
-	{OV2680_8BIT, 0x3501, 0x48},
-	{OV2680_8BIT, 0x3502, 0xe0},
-	{OV2680_8BIT, 0x370a, 0x21},
-	{OV2680_8BIT, 0x3801, 0x90},
-	{OV2680_8BIT, 0x3802, 0x00},
-	{OV2680_8BIT, 0x3803, 0x78},
-	{OV2680_8BIT, 0x3804, 0x06},
-	{OV2680_8BIT, 0x3805, 0x4f},
-	{OV2680_8BIT, 0x3806, 0x04},
-	{OV2680_8BIT, 0x3807, 0xC0},
-	{OV2680_8BIT, 0x3808, 0x05},
-	{OV2680_8BIT, 0x3809, 0xb0},
-	{OV2680_8BIT, 0x380a, 0x04},
-	{OV2680_8BIT, 0x380b, 0x48},
-	{OV2680_8BIT, 0x380c, 0x06},
-	{OV2680_8BIT, 0x380d, 0xa8},
-	{OV2680_8BIT, 0x380e, 0x05},
-	{OV2680_8BIT, 0x380f, 0x0e},
-	{OV2680_8BIT, 0x3810, 0x00},
-	{OV2680_8BIT, 0x3811, 0x08},
-	{OV2680_8BIT, 0x3812, 0x00},
-	{OV2680_8BIT, 0x3813, 0x00},
-	{OV2680_8BIT, 0x3814, 0x11},
-	{OV2680_8BIT, 0x3815, 0x11},
-	{OV2680_8BIT, 0x4008, 0x02},
-	{OV2680_8BIT, 0x4009, 0x09},
-	{OV2680_8BIT, 0x5081, 0x41},
-	{OV2680_8BIT, 0x5708, 0x00}, //add for full size flip off and mirror off 2014/09/11
-	{OV2680_8BIT, 0x5704, 0x10},
-	{OV2680_8BIT, 0x5705, 0xa0},
-	{OV2680_8BIT, 0x5706, 0x0c},
-	{OV2680_8BIT, 0x5707, 0x78},
-	{OV2680_8BIT, 0x3820, 0xc0},
-	{OV2680_8BIT, 0x3821, 0x00},
-    // {OV2680_8BIT, 0x5090, 0x0c},
-	{OV2680_TOK_TERM, 0, 0}
+		{OV2680_8BIT, 0x3086, 0x00},
+		{OV2680_8BIT, 0x3501, 0x48},
+		{OV2680_8BIT, 0x3502, 0xe0},
+		{OV2680_8BIT, 0x370a, 0x21},
+		{OV2680_8BIT, 0x3801, 0x90},
+		{OV2680_8BIT, 0x3802, 0x00},
+		{OV2680_8BIT, 0x3803, 0x78},
+		{OV2680_8BIT, 0x3804, 0x06},
+		{OV2680_8BIT, 0x3805, 0x4f},
+		{OV2680_8BIT, 0x3806, 0x04},
+		{OV2680_8BIT, 0x3807, 0xC0},
+		{OV2680_8BIT, 0x3808, 0x05},
+		{OV2680_8BIT, 0x3809, 0xb0},
+		{OV2680_8BIT, 0x380a, 0x04},
+		{OV2680_8BIT, 0x380b, 0x48},
+		{OV2680_8BIT, 0x380c, 0x06},
+		{OV2680_8BIT, 0x380d, 0xa8},
+		{OV2680_8BIT, 0x380e, 0x05},
+		{OV2680_8BIT, 0x380f, 0x0e},
+		{OV2680_8BIT, 0x3810, 0x00},
+		{OV2680_8BIT, 0x3811, 0x08},
+		{OV2680_8BIT, 0x3812, 0x00},
+		{OV2680_8BIT, 0x3813, 0x00},
+		{OV2680_8BIT, 0x3814, 0x11},
+		{OV2680_8BIT, 0x3815, 0x11},
+		{OV2680_8BIT, 0x4008, 0x02},
+		{OV2680_8BIT, 0x4009, 0x09},
+		{OV2680_8BIT, 0x5081, 0x41},
+		{OV2680_8BIT, 0x5708, 0x00}, //add for full size flip off and mirror off 2014/09/11
+		{OV2680_8BIT, 0x5704, 0x10},
+		{OV2680_8BIT, 0x5705, 0xa0},
+		{OV2680_8BIT, 0x5706, 0x0c},
+		{OV2680_8BIT, 0x5707, 0x78},
+		{OV2680_8BIT, 0x3820, 0xc0},
+		{OV2680_8BIT, 0x3821, 0x00},
+		// {OV2680_8BIT, 0x5090, 0x0c},
+		{OV2680_TOK_TERM, 0, 0}
 	};
 
 	/*
@@ -691,129 +691,128 @@ struct ov2680_format {
 	 */
 
 	static struct ov2680_reg const ov2680_1616x916_30fps[] = {
-
-	{OV2680_8BIT, 0x3086, 0x00},
-	{OV2680_8BIT, 0x3501, 0x48},
-	{OV2680_8BIT, 0x3502, 0xe0},
-	{OV2680_8BIT, 0x370a, 0x21},
-	{OV2680_8BIT, 0x3801, 0x00},
-	{OV2680_8BIT, 0x3802, 0x00},
-	{OV2680_8BIT, 0x3803, 0x96},
-	{OV2680_8BIT, 0x3804, 0x06},
-	{OV2680_8BIT, 0x3805, 0x4f},
-	{OV2680_8BIT, 0x3806, 0x04},
-	{OV2680_8BIT, 0x3807, 0x39},
-	{OV2680_8BIT, 0x3808, 0x06},
-	{OV2680_8BIT, 0x3809, 0x50},
-	{OV2680_8BIT, 0x380a, 0x03},
-	{OV2680_8BIT, 0x380b, 0x94},
-	{OV2680_8BIT, 0x380c, 0x06},
-	{OV2680_8BIT, 0x380d, 0xa8},
-	{OV2680_8BIT, 0x380e, 0x05},
-	{OV2680_8BIT, 0x380f, 0x0e},
-	{OV2680_8BIT, 0x3810, 0x00},
-	{OV2680_8BIT, 0x3811, 0x00},
-	{OV2680_8BIT, 0x3812, 0x00},
-	{OV2680_8BIT, 0x3813, 0x08},
-	{OV2680_8BIT, 0x3814, 0x11},
-	{OV2680_8BIT, 0x3815, 0x11},
-	{OV2680_8BIT, 0x4008, 0x02},
-	{OV2680_8BIT, 0x4009, 0x09},
-	{OV2680_8BIT, 0x5081, 0x41},
-	{OV2680_8BIT, 0x5708, 0x01}, //add for full size flip off and mirror off 2014/09/11
-	{OV2680_8BIT, 0x5704, 0x06},
-	{OV2680_8BIT, 0x5705, 0x50},
-	{OV2680_8BIT, 0x5706, 0x03},
-	{OV2680_8BIT, 0x5707, 0x94},
-	{OV2680_8BIT, 0x3820, 0xc0},
-	{OV2680_8BIT, 0x3821, 0x00},
-    // {OV2680_8BIT, 0x5090, 0x0C},
-    {OV2680_TOK_TERM, 0, 0}
+		{OV2680_8BIT, 0x3086, 0x00},
+		{OV2680_8BIT, 0x3501, 0x48},
+		{OV2680_8BIT, 0x3502, 0xe0},
+		{OV2680_8BIT, 0x370a, 0x21},
+		{OV2680_8BIT, 0x3801, 0x00},
+		{OV2680_8BIT, 0x3802, 0x00},
+		{OV2680_8BIT, 0x3803, 0x96},
+		{OV2680_8BIT, 0x3804, 0x06},
+		{OV2680_8BIT, 0x3805, 0x4f},
+		{OV2680_8BIT, 0x3806, 0x04},
+		{OV2680_8BIT, 0x3807, 0x39},
+		{OV2680_8BIT, 0x3808, 0x06},
+		{OV2680_8BIT, 0x3809, 0x50},
+		{OV2680_8BIT, 0x380a, 0x03},
+		{OV2680_8BIT, 0x380b, 0x94},
+		{OV2680_8BIT, 0x380c, 0x06},
+		{OV2680_8BIT, 0x380d, 0xa8},
+		{OV2680_8BIT, 0x380e, 0x05},
+		{OV2680_8BIT, 0x380f, 0x0e},
+		{OV2680_8BIT, 0x3810, 0x00},
+		{OV2680_8BIT, 0x3811, 0x00},
+		{OV2680_8BIT, 0x3812, 0x00},
+		{OV2680_8BIT, 0x3813, 0x08},
+		{OV2680_8BIT, 0x3814, 0x11},
+		{OV2680_8BIT, 0x3815, 0x11},
+		{OV2680_8BIT, 0x4008, 0x02},
+		{OV2680_8BIT, 0x4009, 0x09},
+		{OV2680_8BIT, 0x5081, 0x41},
+		{OV2680_8BIT, 0x5708, 0x01}, //add for full size flip off and mirror off 2014/09/11
+		{OV2680_8BIT, 0x5704, 0x06},
+		{OV2680_8BIT, 0x5705, 0x50},
+		{OV2680_8BIT, 0x5706, 0x03},
+		{OV2680_8BIT, 0x5707, 0x94},
+		{OV2680_8BIT, 0x3820, 0xc0},
+		{OV2680_8BIT, 0x3821, 0x00},
+		// {OV2680_8BIT, 0x5090, 0x0C},
+		{OV2680_TOK_TERM, 0, 0}
 	};
 
 	/*
 	 * 1612x1212 30fps VBlanking 1lane 10Bit
 	 */
 	static struct ov2680_reg const ov2680_1616x1082_30fps[] = {
-       {OV2680_8BIT, 0x3086, 0x00},
-       {OV2680_8BIT, 0x3501, 0x48},
-       {OV2680_8BIT, 0x3502, 0xe0},
-       {OV2680_8BIT, 0x370a, 0x21},
-       {OV2680_8BIT, 0x3801, 0x00},
-       {OV2680_8BIT, 0x3802, 0x00},
-       {OV2680_8BIT, 0x3803, 0x86},
-       {OV2680_8BIT, 0x3804, 0x06},
-       {OV2680_8BIT, 0x3805, 0x4f},
-       {OV2680_8BIT, 0x3806, 0x04},
-       {OV2680_8BIT, 0x3807, 0xbf},
-       {OV2680_8BIT, 0x3808, 0x06},
-       {OV2680_8BIT, 0x3809, 0x50},
-       {OV2680_8BIT, 0x380a, 0x04},
-       {OV2680_8BIT, 0x380b, 0x3a},
-       {OV2680_8BIT, 0x380c, 0x06},
-       {OV2680_8BIT, 0x380d, 0xa8},
-       {OV2680_8BIT, 0x380e, 0x05},
-       {OV2680_8BIT, 0x380f, 0x0e},
-       {OV2680_8BIT, 0x3810, 0x00},
-       {OV2680_8BIT, 0x3811, 0x00},
-       {OV2680_8BIT, 0x3812, 0x00},
-       {OV2680_8BIT, 0x3813, 0x00},
-       {OV2680_8BIT, 0x3814, 0x11},
-       {OV2680_8BIT, 0x3815, 0x11},
-       {OV2680_8BIT, 0x5708, 0x01}, //add for full size flip off and mirror off 2014/09/11
-       {OV2680_8BIT, 0x5704, 0x06},
-       {OV2680_8BIT, 0x5705, 0x50},
-       {OV2680_8BIT, 0x5706, 0x04},
-       {OV2680_8BIT, 0x5707, 0x3a},
-       {OV2680_8BIT, 0x3820, 0xc0},
-       {OV2680_8BIT, 0x3821, 0x00},
-       // {OV2680_8BIT, 0x5090, 0x0C},
-       {OV2680_8BIT, 0x4008, 0x02},
-       {OV2680_8BIT, 0x4009, 0x09},
-       {OV2680_8BIT, 0x5081, 0x41},
+		{OV2680_8BIT, 0x3086, 0x00},
+		{OV2680_8BIT, 0x3501, 0x48},
+		{OV2680_8BIT, 0x3502, 0xe0},
+		{OV2680_8BIT, 0x370a, 0x21},
+		{OV2680_8BIT, 0x3801, 0x00},
+		{OV2680_8BIT, 0x3802, 0x00},
+		{OV2680_8BIT, 0x3803, 0x86},
+		{OV2680_8BIT, 0x3804, 0x06},
+		{OV2680_8BIT, 0x3805, 0x4f},
+		{OV2680_8BIT, 0x3806, 0x04},
+		{OV2680_8BIT, 0x3807, 0xbf},
+		{OV2680_8BIT, 0x3808, 0x06},
+		{OV2680_8BIT, 0x3809, 0x50},
+		{OV2680_8BIT, 0x380a, 0x04},
+		{OV2680_8BIT, 0x380b, 0x3a},
+		{OV2680_8BIT, 0x380c, 0x06},
+		{OV2680_8BIT, 0x380d, 0xa8},
+		{OV2680_8BIT, 0x380e, 0x05},
+		{OV2680_8BIT, 0x380f, 0x0e},
+		{OV2680_8BIT, 0x3810, 0x00},
+		{OV2680_8BIT, 0x3811, 0x00},
+		{OV2680_8BIT, 0x3812, 0x00},
+		{OV2680_8BIT, 0x3813, 0x00},
+		{OV2680_8BIT, 0x3814, 0x11},
+		{OV2680_8BIT, 0x3815, 0x11},
+		{OV2680_8BIT, 0x5708, 0x01}, //add for full size flip off and mirror off 2014/09/11
+		{OV2680_8BIT, 0x5704, 0x06},
+		{OV2680_8BIT, 0x5705, 0x50},
+		{OV2680_8BIT, 0x5706, 0x04},
+		{OV2680_8BIT, 0x5707, 0x3a},
+		{OV2680_8BIT, 0x3820, 0xc0},
+		{OV2680_8BIT, 0x3821, 0x00},
+		// {OV2680_8BIT, 0x5090, 0x0C},
+		{OV2680_8BIT, 0x4008, 0x02},
+		{OV2680_8BIT, 0x4009, 0x09},
+		{OV2680_8BIT, 0x5081, 0x41},
 		{OV2680_TOK_TERM, 0, 0}
         };
 	/*
 	 * 1616x1216 30fps VBlanking 1lane 10Bit
 	 */
 	static struct ov2680_reg const ov2680_1616x1216_30fps[] = {
-	{OV2680_8BIT, 0x3086, 0x00},
-	{OV2680_8BIT, 0x3501, 0x48},
-	{OV2680_8BIT, 0x3502, 0xe0},
-	{OV2680_8BIT, 0x370a, 0x21},
-	{OV2680_8BIT, 0x3801, 0x00},
-	{OV2680_8BIT, 0x3802, 0x00},
-	{OV2680_8BIT, 0x3803, 0x00},
-	{OV2680_8BIT, 0x3804, 0x06},
-	{OV2680_8BIT, 0x3805, 0x4f},
-	{OV2680_8BIT, 0x3806, 0x04},
-	{OV2680_8BIT, 0x3807, 0xbf},
-	{OV2680_8BIT, 0x3808, 0x06},
-	{OV2680_8BIT, 0x3809, 0x50},//50},//4line for mirror and flip
-	{OV2680_8BIT, 0x380a, 0x04},
-	{OV2680_8BIT, 0x380b, 0xc0},//c0},
-	{OV2680_8BIT, 0x380c, 0x06},
-	{OV2680_8BIT, 0x380d, 0xa8},
-	{OV2680_8BIT, 0x380e, 0x05},
-	{OV2680_8BIT, 0x380f, 0x0e},
-	{OV2680_8BIT, 0x3810, 0x00},
-	{OV2680_8BIT, 0x3811, 0x00},
-	{OV2680_8BIT, 0x3812, 0x00},
-	{OV2680_8BIT, 0x3813, 0x00},
-	{OV2680_8BIT, 0x3814, 0x11},
-	{OV2680_8BIT, 0x3815, 0x11},
-	{OV2680_8BIT, 0x4008, 0x00},
-	{OV2680_8BIT, 0x4009, 0x0b},
-	{OV2680_8BIT, 0x5081, 0x01},
-	{OV2680_8BIT, 0x5708, 0x01}, //add for full size flip off and mirror off 2014/09/11
-	{OV2680_8BIT, 0x5704, 0x06},
-	{OV2680_8BIT, 0x5705, 0x50},
-	{OV2680_8BIT, 0x5706, 0x04},
-	{OV2680_8BIT, 0x5707, 0xcc},
-	{OV2680_8BIT, 0x3820, 0xc0},
-	{OV2680_8BIT, 0x3821, 0x00},
-    // {OV2680_8BIT, 0x5090, 0x0C},
-    {OV2680_TOK_TERM, 0, 0}
+		{OV2680_8BIT, 0x3086, 0x00},
+		{OV2680_8BIT, 0x3501, 0x48},
+		{OV2680_8BIT, 0x3502, 0xe0},
+		{OV2680_8BIT, 0x370a, 0x21},
+		{OV2680_8BIT, 0x3801, 0x00},
+		{OV2680_8BIT, 0x3802, 0x00},
+		{OV2680_8BIT, 0x3803, 0x00},
+		{OV2680_8BIT, 0x3804, 0x06},
+		{OV2680_8BIT, 0x3805, 0x4f},
+		{OV2680_8BIT, 0x3806, 0x04},
+		{OV2680_8BIT, 0x3807, 0xbf},
+		{OV2680_8BIT, 0x3808, 0x06},
+		{OV2680_8BIT, 0x3809, 0x50},//50},//4line for mirror and flip
+		{OV2680_8BIT, 0x380a, 0x04},
+		{OV2680_8BIT, 0x380b, 0xc0},//c0},
+		{OV2680_8BIT, 0x380c, 0x06},
+		{OV2680_8BIT, 0x380d, 0xa8},
+		{OV2680_8BIT, 0x380e, 0x05},
+		{OV2680_8BIT, 0x380f, 0x0e},
+		{OV2680_8BIT, 0x3810, 0x00},
+		{OV2680_8BIT, 0x3811, 0x00},
+		{OV2680_8BIT, 0x3812, 0x00},
+		{OV2680_8BIT, 0x3813, 0x00},
+		{OV2680_8BIT, 0x3814, 0x11},
+		{OV2680_8BIT, 0x3815, 0x11},
+		{OV2680_8BIT, 0x4008, 0x00},
+		{OV2680_8BIT, 0x4009, 0x0b},
+		{OV2680_8BIT, 0x5081, 0x01},
+		{OV2680_8BIT, 0x5708, 0x01}, //add for full size flip off and mirror off 2014/09/11
+		{OV2680_8BIT, 0x5704, 0x06},
+		{OV2680_8BIT, 0x5705, 0x50},
+		{OV2680_8BIT, 0x5706, 0x04},
+		{OV2680_8BIT, 0x5707, 0xcc},
+		{OV2680_8BIT, 0x3820, 0xc0},
+		{OV2680_8BIT, 0x3821, 0x00},
+		// {OV2680_8BIT, 0x5090, 0x0C},
+		{OV2680_TOK_TERM, 0, 0}
 	};
 
 	static struct ov2680_resolution ov2680_res_preview[] = {

commit f97b8e6baa10c5b891cb65491f457274f5788717
Author: Sakari Ailus <sakari.ailus@linux.intel.com>
Date:   Sun Jan 21 16:43:42 2018 -0500

    media: staging: atomisp: Kill subdev s_parm abuse
    
    Remove sensor driver's interface for setting the use case specific mode
    list as well as the mode lists that are related to other than
    CI_MODE_PREVIEW. This removes s_parm abuse in using driver specific values
    in v4l2_streamparm.capture.capturemode. The drivers already support
    [gs]_frame_interval so removing support for [gs]_parm is enough.
    
    Signed-off-by: Sakari Ailus <sakari.ailus@linux.intel.com>
    Signed-off-by: Hans Verkuil <hans.verkuil@cisco.com>
    Signed-off-by: Mauro Carvalho Chehab <mchehab@s-opensource.com>

diff --git a/drivers/staging/media/atomisp/i2c/ov2680.h b/drivers/staging/media/atomisp/i2c/ov2680.h
index 03f75dd80f87..cb38e6e79409 100644
--- a/drivers/staging/media/atomisp/i2c/ov2680.h
+++ b/drivers/staging/media/atomisp/i2c/ov2680.h
@@ -850,74 +850,6 @@ struct ov2680_format {
 };
 #define N_RES_PREVIEW (ARRAY_SIZE(ov2680_res_preview))
 
-static struct ov2680_resolution ov2680_res_still[] = {
-	{
-		.desc = "ov2680_1616x1216_30fps",
-		.width = 1616,
-		.height = 1216,
-		.pix_clk_freq = 66,
-		.fps = 30,
-		.used = 0,
-		.pixels_per_line = 1698,//1704,
-		.lines_per_frame = 1294,
-		.bin_factor_x = 0,
-		.bin_factor_y = 0,
-		.bin_mode = 0,
-		.skip_frames = 3,
-		.regs = ov2680_1616x1216_30fps,
-	},
-   	{
-		.desc = "ov2680_1616x916_30fps",
-		.width = 1616,
-		.height = 916,
-		.fps = 30,
-		.pix_clk_freq = 66,
-		.used = 0,
-		.pixels_per_line = 1698,//1704,
-		.lines_per_frame = 1294,
-		.bin_factor_x = 0,
-		.bin_factor_y = 0,
-		.bin_mode = 0,
-		.skip_frames = 3,
-		.regs = ov2680_1616x916_30fps,
-	},
-};
-#define N_RES_STILL (ARRAY_SIZE(ov2680_res_still))
-
-static struct ov2680_resolution ov2680_res_video[] = {
-	{
-		.desc = "ov2680_1616x1216_30fps",
-		.width = 1616,
-		.height = 1216,
-		.pix_clk_freq = 66,
-		.fps = 30,
-		.used = 0,
-		.pixels_per_line = 1698,//1704,
-		.lines_per_frame = 1294,
-		.bin_factor_x = 0,
-		.bin_factor_y = 0,
-		.bin_mode = 0,
-		.skip_frames = 3,
-		.regs = ov2680_1616x1216_30fps,
-	},
-	{
-		.desc = "ov2680_720p_30fps",
-		.width = 1616,
-		.height = 916,
-		.fps = 30,
-		.pix_clk_freq = 66,
-		.used = 0,
-		.pixels_per_line = 1698,//1704,
-		.lines_per_frame = 1294,
-		.bin_factor_x = 0,
-		.bin_factor_y = 0,
-		.bin_mode = 0,
-		.skip_frames = 3,
-		.regs = ov2680_1616x916_30fps,
-	},
-};
-#define N_RES_VIDEO (ARRAY_SIZE(ov2680_res_video))
-
 static struct ov2680_resolution *ov2680_res = ov2680_res_preview;
 static unsigned long N_RES = N_RES_PREVIEW;
 

commit 456e7b1804f762e406297a663e43b2c14e386e75
Author: Arnd Bergmann <arnd@arndb.de>
Date:   Mon Nov 27 10:21:41 2017 -0500

    media: staging: atomisp: convert timestamps to ktime_t
    
    timespec overflows in 2038 on 32-bit architectures, and the
    getnstimeofday() suffers from possible time jumps, so the
    timestamps here are better done using ktime_get(), which has
    neither of those problems.
    
    In case of ov2680, we don't seem to use the timestamp at
    all, so I just remove it.
    
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>
    Reviewed-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    Reviewed-by: Alan Cox <alan@linux.intel.com>
    Signed-off-by: Sakari Ailus <sakari.ailus@linux.intel.com>
    Signed-off-by: Mauro Carvalho Chehab <mchehab@s-opensource.com>

diff --git a/drivers/staging/media/atomisp/i2c/ov2680.h b/drivers/staging/media/atomisp/i2c/ov2680.h
index bf4897347df7..03f75dd80f87 100644
--- a/drivers/staging/media/atomisp/i2c/ov2680.h
+++ b/drivers/staging/media/atomisp/i2c/ov2680.h
@@ -174,7 +174,6 @@ struct ov2680_format {
 		struct mutex input_lock;
 	struct v4l2_ctrl_handler ctrl_handler;
 		struct camera_sensor_platform_data *platform_data;
-		struct timespec timestamp_t_focus_abs;
 		int vt_pix_clk_freq_mhz;
 		int fmt_idx;
 		int run_mode;

commit b5027c520f35979f702bf42b4e55640f4168c317
Author: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
Date:   Wed Sep 27 14:25:08 2017 -0400

    media: staging: atomisp: Remove FSF snail address
    
    Snail address is subject to change, remove it completely from the code.
    
    This has been done using the following script:
    
            sed -i '/You should/,/02110-1301/d' \
                    $(git grep -n -w Franklin -- drivers/staging/media/atomisp/ | cut -f1 -d:)
    
    No functional change intended.
    
    Signed-off-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    Signed-off-by: Sakari Ailus <sakari.ailus@linux.intel.com>
    Signed-off-by: Mauro Carvalho Chehab <mchehab@s-opensource.com>

diff --git a/drivers/staging/media/atomisp/i2c/ov2680.h b/drivers/staging/media/atomisp/i2c/ov2680.h
index 198c158de3f2..bf4897347df7 100644
--- a/drivers/staging/media/atomisp/i2c/ov2680.h
+++ b/drivers/staging/media/atomisp/i2c/ov2680.h
@@ -12,10 +12,6 @@
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
  *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
- * 02110-1301, USA.
  *
  */
 

commit e19c92059a700453a304061ff4291dfc2de2902b
Author: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
Date:   Wed Sep 27 14:24:59 2017 -0400

    media: staging: atomisp: Switch i2c drivers to use ->probe_new()
    
    Since most of the drivers are being used on ACPI enabled platforms
    there is no need to keep legacy API support for them. Thus, switch
    to ->probe_new() callback and remove orphaned code.
    
    Signed-off-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    Signed-off-by: Sakari Ailus <sakari.ailus@linux.intel.com>
    Signed-off-by: Mauro Carvalho Chehab <mchehab@s-opensource.com>

diff --git a/drivers/staging/media/atomisp/i2c/ov2680.h b/drivers/staging/media/atomisp/i2c/ov2680.h
index ab8907e6c9ef..198c158de3f2 100644
--- a/drivers/staging/media/atomisp/i2c/ov2680.h
+++ b/drivers/staging/media/atomisp/i2c/ov2680.h
@@ -35,10 +35,6 @@
 
 #include "../include/linux/atomisp_platform.h"
 
-#define OV2680_NAME		"ov2680"
-#define OV2680B_NAME	"ov2680b"
-#define OV2680F_NAME	"ov2680f"
-
 /* Defines for register writes and register array processing */
 #define I2C_MSG_LENGTH		0x2
 #define I2C_RETRY_COUNT		5
@@ -227,12 +223,6 @@ struct ov2680_format {
 		struct ov2680_write_buffer buffer;
 	};
 
-	static const struct i2c_device_id ov2680_id[] = {
-		{OV2680B_NAME, 0},
-		{OV2680F_NAME, 0},
-		{}
-	};
-
 	static struct ov2680_reg const ov2680_global_setting[] = {
 	    {OV2680_8BIT, 0x0103, 0x01},
 	    {OV2680_8BIT, 0x3002, 0x00},

commit f3aa68405d907cdec852078d73a200608d5aa473
Author: Dan Carpenter <dan.carpenter@oracle.com>
Date:   Mon Jul 17 04:58:54 2017 -0300

    media: staging: atomisp: array underflow in ioctl
    
    I noticed an array underflow in ov5693_enum_frame_size().  The code
    looks like this:
    
            int index = fse->index;
    
            if (index >= N_RES)
                    retur -EINVAL;
    
    fse->index is a u32 that comes from the user.  We want negative values
    to be counted as -EINVAL but they aren't.  There are several ways to fix
    this but I feel like the best fix for future proofing is to change the
    type of N_RES from int to unsigned long to make it the same as if we
    were comparing against ARRAY_SIZE().
    
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Signed-off-by: Sakari Ailus <sakari.ailus@linux.intel.com>
    Signed-off-by: Mauro Carvalho Chehab <mchehab@s-opensource.com>

diff --git a/drivers/staging/media/atomisp/i2c/ov2680.h b/drivers/staging/media/atomisp/i2c/ov2680.h
index 944fe8e3bcbf..ab8907e6c9ef 100644
--- a/drivers/staging/media/atomisp/i2c/ov2680.h
+++ b/drivers/staging/media/atomisp/i2c/ov2680.h
@@ -934,7 +934,6 @@ static struct ov2680_resolution ov2680_res_video[] = {
 #define N_RES_VIDEO (ARRAY_SIZE(ov2680_res_video))
 
 static struct ov2680_resolution *ov2680_res = ov2680_res_preview;
-static int N_RES = N_RES_PREVIEW;
-
+static unsigned long N_RES = N_RES_PREVIEW;
 
 #endif

commit 25016567be26887232aa3f6fd0d0116356691cc3
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Tue Mar 7 13:21:24 2017 +0100

    staging: atomisp: fix include Makefile mess
    
    Using LINUXINCLUDE is a very old hack, and doesn't play well with
    building objects in a different directory than the kernel source is in.
    
    So fix up the include file references to be relative to make it obvious
    we are pulling in local include files, which need to get fixed up.
    
    Reported-by: kbuild test robot <fengguang.wu@intel.com>
    Reported-by: Stephen Rothwell <sfr@canb.auug.org.au>
    Cc: Alan Cox <alan@linux.intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/media/atomisp/i2c/ov2680.h b/drivers/staging/media/atomisp/i2c/ov2680.h
index 5ee2cfcc1684..944fe8e3bcbf 100644
--- a/drivers/staging/media/atomisp/i2c/ov2680.h
+++ b/drivers/staging/media/atomisp/i2c/ov2680.h
@@ -33,7 +33,7 @@
 #include <linux/v4l2-mediabus.h>
 #include <media/media-entity.h>
 
-#include <linux/atomisp_platform.h>
+#include "../include/linux/atomisp_platform.h"
 
 #define OV2680_NAME		"ov2680"
 #define OV2680B_NAME	"ov2680b"

commit a49d25364dfb9f8a64037488a39ab1f56c5fa419
Author: Alan Cox <alan@linux.intel.com>
Date:   Fri Feb 17 16:55:17 2017 +0000

    staging/atomisp: Add support for the Intel IPU v2
    
    This patch adds support for the Intel IPU v2 as found on Android and IoT
    Baytrail-T and Baytrail-CR platforms (those with the IPU PCI mapped). You
    will also need the firmware files from your device (Android usually puts
    them into /etc) - or you can find them in the downloadable restore/upgrade
    kits if you blew them away for some reason.
    
    It may be possible to extend the driver to handle the BYT/T windows
    platforms such as the ASUS T100TA. These platforms don't expose the IPU via
    the PCI interface but via ACPI buried in the GPU description and with the
    camera information somewhere unknown so would need a platform driver
    interface adding to the codebase *IFF* the firmware works on such devices.
    
    To get good results you also need a suitable support library such as
    libxcam. The camera is intended to be driven from Android so it has a lot of
    features that many desktop apps don't fully spport.
    
    In theory all the pieces are there to build it with -DISP2401 and some
    differing files to get CherryTrail/T support, but unifying the drivers
    properlly is a work in progress.
    
    The IPU driver represents the work of a lot of people within Intel over many
    years. It's historical goal was portability rather than Linux upstream. Any
    queries about the upstream aimed driver should be sent to me not to the
    original authors.
    
    Signed-off-by: Alan Cox <alan@linux.intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/media/atomisp/i2c/ov2680.h b/drivers/staging/media/atomisp/i2c/ov2680.h
new file mode 100644
index 000000000000..5ee2cfcc1684
--- /dev/null
+++ b/drivers/staging/media/atomisp/i2c/ov2680.h
@@ -0,0 +1,940 @@
+/*
+ * Support for OmniVision OV2680 5M camera sensor.
+ *
+ * Copyright (c) 2013 Intel Corporation. All Rights Reserved.
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License version
+ * 2 as published by the Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+ * 02110-1301, USA.
+ *
+ */
+
+#ifndef __OV2680_H__
+#define __OV2680_H__
+#include <linux/kernel.h>
+#include <linux/types.h>
+#include <linux/i2c.h>
+#include <linux/delay.h>
+#include <linux/videodev2.h>
+#include <linux/spinlock.h>
+#include <media/v4l2-subdev.h>
+#include <media/v4l2-device.h>
+#include <media/v4l2-ctrls.h>
+#include <linux/v4l2-mediabus.h>
+#include <media/media-entity.h>
+
+#include <linux/atomisp_platform.h>
+
+#define OV2680_NAME		"ov2680"
+#define OV2680B_NAME	"ov2680b"
+#define OV2680F_NAME	"ov2680f"
+
+/* Defines for register writes and register array processing */
+#define I2C_MSG_LENGTH		0x2
+#define I2C_RETRY_COUNT		5
+
+#define OV2680_FOCAL_LENGTH_NUM	334	/*3.34mm*/
+#define OV2680_FOCAL_LENGTH_DEM	100
+#define OV2680_F_NUMBER_DEFAULT_NUM	24
+#define OV2680_F_NUMBER_DEM	10
+
+#define OV2680_BIN_FACTOR_MAX 4
+
+#define MAX_FMTS		1
+
+/* sensor_mode_data read_mode adaptation */
+#define OV2680_READ_MODE_BINNING_ON	0x0400
+#define OV2680_READ_MODE_BINNING_OFF	0x00
+#define OV2680_INTEGRATION_TIME_MARGIN	8
+
+#define OV2680_MAX_EXPOSURE_VALUE	0xFFF1
+#define OV2680_MAX_GAIN_VALUE		0xFF
+
+/*
+ * focal length bits definition:
+ * bits 31-16: numerator, bits 15-0: denominator
+ */
+#define OV2680_FOCAL_LENGTH_DEFAULT 0x1B70064
+
+/*
+ * current f-number bits definition:
+ * bits 31-16: numerator, bits 15-0: denominator
+ */
+#define OV2680_F_NUMBER_DEFAULT 0x18000a
+
+/*
+ * f-number range bits definition:
+ * bits 31-24: max f-number numerator
+ * bits 23-16: max f-number denominator
+ * bits 15-8: min f-number numerator
+ * bits 7-0: min f-number denominator
+ */
+#define OV2680_F_NUMBER_RANGE 0x180a180a
+#define OV2680_ID	0x2680
+
+#define OV2680_FINE_INTG_TIME_MIN 0
+#define OV2680_FINE_INTG_TIME_MAX_MARGIN 0
+#define OV2680_COARSE_INTG_TIME_MIN 1
+#define OV2680_COARSE_INTG_TIME_MAX_MARGIN 6
+
+/*
+ * OV2680 System control registers
+ */
+#define OV2680_SW_SLEEP				0x0100
+#define OV2680_SW_RESET				0x0103
+#define OV2680_SW_STREAM			0x0100
+
+#define OV2680_SC_CMMN_CHIP_ID_H		0x300A
+#define OV2680_SC_CMMN_CHIP_ID_L		0x300B
+#define OV2680_SC_CMMN_SCCB_ID			0x302B /* 0x300C*/
+#define OV2680_SC_CMMN_SUB_ID			0x302A /* process, version*/
+
+#define OV2680_GROUP_ACCESS							0x3208 /*Bit[7:4] Group control, Bit[3:0] Group ID*/
+
+#define OV2680_EXPOSURE_H							0x3500 /*Bit[3:0] Bit[19:16] of exposure, remaining 16 bits lies in Reg0x3501&Reg0x3502*/
+#define OV2680_EXPOSURE_M							0x3501
+#define OV2680_EXPOSURE_L							0x3502
+#define OV2680_AGC_H								0x350A /*Bit[1:0] means Bit[9:8] of gain*/
+#define OV2680_AGC_L								0x350B /*Bit[7:0] of gain*/
+
+#define OV2680_HORIZONTAL_START_H					0x3800 /*Bit[11:8]*/
+#define OV2680_HORIZONTAL_START_L					0x3801 /*Bit[7:0]*/
+#define OV2680_VERTICAL_START_H						0x3802 /*Bit[11:8]*/
+#define OV2680_VERTICAL_START_L						0x3803 /*Bit[7:0]*/
+#define OV2680_HORIZONTAL_END_H						0x3804 /*Bit[11:8]*/
+#define OV2680_HORIZONTAL_END_L						0x3805 /*Bit[7:0]*/
+#define OV2680_VERTICAL_END_H						0x3806 /*Bit[11:8]*/
+#define OV2680_VERTICAL_END_L						0x3807 /*Bit[7:0]*/
+#define OV2680_HORIZONTAL_OUTPUT_SIZE_H				0x3808 /*Bit[3:0]*/
+#define OV2680_HORIZONTAL_OUTPUT_SIZE_L				0x3809 /*Bit[7:0]*/
+#define OV2680_VERTICAL_OUTPUT_SIZE_H				0x380a /*Bit[3:0]*/
+#define OV2680_VERTICAL_OUTPUT_SIZE_L				0x380b /*Bit[7:0]*/
+#define OV2680_TIMING_HTS_H							0x380C  /*High 8-bit, and low 8-bit HTS address is 0x380d*/
+#define OV2680_TIMING_HTS_L							0x380D  /*High 8-bit, and low 8-bit HTS address is 0x380d*/
+#define OV2680_TIMING_VTS_H							0x380e  /*High 8-bit, and low 8-bit HTS address is 0x380f*/
+#define OV2680_TIMING_VTS_L							0x380f  /*High 8-bit, and low 8-bit HTS address is 0x380f*/
+#define OV2680_FRAME_OFF_NUM						0x4202
+
+/*Flip/Mirror*/
+#define OV2680_FLIP_REG				0x3820
+#define OV2680_MIRROR_REG			0x3821
+#define OV2680_FLIP_BIT				1
+#define OV2680_MIRROR_BIT			2
+#define OV2680_FLIP_MIRROR_BIT_ENABLE		4
+
+#define OV2680_MWB_RED_GAIN_H			0x5004/*0x3400*/
+#define OV2680_MWB_GREEN_GAIN_H			0x5006/*0x3402*/
+#define OV2680_MWB_BLUE_GAIN_H			0x5008/*0x3404*/
+#define OV2680_MWB_GAIN_MAX				0x0fff
+
+#define OV2680_START_STREAMING			0x01
+#define OV2680_STOP_STREAMING			0x00
+
+
+#define OV2680_INVALID_CONFIG	0xffffffff
+
+
+struct regval_list {
+	u16 reg_num;
+	u8 value;
+};
+
+struct ov2680_resolution {
+	u8 *desc;
+	const struct ov2680_reg *regs;
+	int res;
+	int width;
+	int height;
+	int fps;
+	int pix_clk_freq;
+	u32 skip_frames;
+	u16 pixels_per_line;
+	u16 lines_per_frame;
+	u8 bin_factor_x;
+	u8 bin_factor_y;
+	u8 bin_mode;
+	bool used;
+};
+
+struct ov2680_format {
+	u8 *desc;
+	u32 pixelformat;
+	struct ov2680_reg *regs;
+};
+
+	/*
+	 * ov2680 device structure.
+	 */
+	struct ov2680_device {
+		struct v4l2_subdev sd;
+		struct media_pad pad;
+		struct v4l2_mbus_framefmt format;
+		struct mutex input_lock;
+	struct v4l2_ctrl_handler ctrl_handler;
+		struct camera_sensor_platform_data *platform_data;
+		struct timespec timestamp_t_focus_abs;
+		int vt_pix_clk_freq_mhz;
+		int fmt_idx;
+		int run_mode;
+		u8 res;
+		u8 type;
+	};
+
+	enum ov2680_tok_type {
+		OV2680_8BIT  = 0x0001,
+		OV2680_16BIT = 0x0002,
+		OV2680_32BIT = 0x0004,
+		OV2680_TOK_TERM   = 0xf000,	/* terminating token for reg list */
+		OV2680_TOK_DELAY  = 0xfe00,	/* delay token for reg list */
+		OV2680_TOK_MASK = 0xfff0
+	};
+
+	/**
+	 * struct ov2680_reg - MI sensor  register format
+	 * @type: type of the register
+	 * @reg: 16-bit offset to register
+	 * @val: 8/16/32-bit register value
+	 *
+	 * Define a structure for sensor register initialization values
+	 */
+	struct ov2680_reg {
+		enum ov2680_tok_type type;
+		u16 reg;
+		u32 val;	/* @set value for read/mod/write, @mask */
+	};
+
+	#define to_ov2680_sensor(x) container_of(x, struct ov2680_device, sd)
+
+	#define OV2680_MAX_WRITE_BUF_SIZE	30
+
+	struct ov2680_write_buffer {
+		u16 addr;
+		u8 data[OV2680_MAX_WRITE_BUF_SIZE];
+	};
+
+	struct ov2680_write_ctrl {
+		int index;
+		struct ov2680_write_buffer buffer;
+	};
+
+	static const struct i2c_device_id ov2680_id[] = {
+		{OV2680B_NAME, 0},
+		{OV2680F_NAME, 0},
+		{}
+	};
+
+	static struct ov2680_reg const ov2680_global_setting[] = {
+	    {OV2680_8BIT, 0x0103, 0x01},
+	    {OV2680_8BIT, 0x3002, 0x00},
+	    {OV2680_8BIT, 0x3016, 0x1c},
+	    {OV2680_8BIT, 0x3018, 0x44},
+	    {OV2680_8BIT, 0x3020, 0x00},
+	    {OV2680_8BIT, 0x3080, 0x02},
+	    {OV2680_8BIT, 0x3082, 0x45},
+	    {OV2680_8BIT, 0x3084, 0x09},
+	    {OV2680_8BIT, 0x3085, 0x04},
+	    {OV2680_8BIT, 0x3503, 0x03},
+	    {OV2680_8BIT, 0x350b, 0x36},
+	    {OV2680_8BIT, 0x3600, 0xb4},
+	    {OV2680_8BIT, 0x3603, 0x39},
+	    {OV2680_8BIT, 0x3604, 0x24},
+	    {OV2680_8BIT, 0x3605, 0x00},
+	    {OV2680_8BIT, 0x3620, 0x26},
+	    {OV2680_8BIT, 0x3621, 0x37},
+	    {OV2680_8BIT, 0x3622, 0x04},
+	    {OV2680_8BIT, 0x3628, 0x00},
+	    {OV2680_8BIT, 0x3705, 0x3c},
+	    {OV2680_8BIT, 0x370c, 0x50},
+	    {OV2680_8BIT, 0x370d, 0xc0},
+	    {OV2680_8BIT, 0x3718, 0x88},
+	    {OV2680_8BIT, 0x3720, 0x00},
+	    {OV2680_8BIT, 0x3721, 0x00},
+	    {OV2680_8BIT, 0x3722, 0x00},
+	    {OV2680_8BIT, 0x3723, 0x00},
+	    {OV2680_8BIT, 0x3738, 0x00},
+	    {OV2680_8BIT, 0x3717, 0x58},
+	    {OV2680_8BIT, 0x3781, 0x80},
+	    {OV2680_8BIT, 0x3789, 0x60},
+	    {OV2680_8BIT, 0x3800, 0x00},
+	    {OV2680_8BIT, 0x3819, 0x04},
+	    {OV2680_8BIT, 0x4000, 0x81},
+	    {OV2680_8BIT, 0x4001, 0x40},
+	    {OV2680_8BIT, 0x4602, 0x02},
+	    {OV2680_8BIT, 0x481f, 0x36},
+	    {OV2680_8BIT, 0x4825, 0x36},
+	    {OV2680_8BIT, 0x4837, 0x18},
+	    {OV2680_8BIT, 0x5002, 0x30},
+	    {OV2680_8BIT, 0x5004, 0x04},//manual awb 1x
+	    {OV2680_8BIT, 0x5005, 0x00},
+	    {OV2680_8BIT, 0x5006, 0x04},
+	    {OV2680_8BIT, 0x5007, 0x00},
+	    {OV2680_8BIT, 0x5008, 0x04},
+	    {OV2680_8BIT, 0x5009, 0x00},
+	    {OV2680_8BIT, 0x5080, 0x00},
+	    {OV2680_8BIT, 0x3701, 0x64},  //add on 14/05/13
+	    {OV2680_8BIT, 0x3784, 0x0c},  //based OV2680_R1A_AM10.ovt add on 14/06/13
+	    {OV2680_8BIT, 0x5780, 0x3e},  //based OV2680_R1A_AM10.ovt,Adjust DPC setting (57xx) on 14/06/13
+	    {OV2680_8BIT, 0x5781, 0x0f},
+	    {OV2680_8BIT, 0x5782, 0x04},
+	    {OV2680_8BIT, 0x5783, 0x02},
+	    {OV2680_8BIT, 0x5784, 0x01},
+	    {OV2680_8BIT, 0x5785, 0x01},
+	    {OV2680_8BIT, 0x5786, 0x00},
+	    {OV2680_8BIT, 0x5787, 0x04},
+	    {OV2680_8BIT, 0x5788, 0x02},
+	    {OV2680_8BIT, 0x5789, 0x00},
+	    {OV2680_8BIT, 0x578a, 0x01},
+	    {OV2680_8BIT, 0x578b, 0x02},
+	    {OV2680_8BIT, 0x578c, 0x03},
+	    {OV2680_8BIT, 0x578d, 0x03},
+	    {OV2680_8BIT, 0x578e, 0x08},
+	    {OV2680_8BIT, 0x578f, 0x0c},
+	    {OV2680_8BIT, 0x5790, 0x08},
+	    {OV2680_8BIT, 0x5791, 0x04},
+	    {OV2680_8BIT, 0x5792, 0x00},
+	    {OV2680_8BIT, 0x5793, 0x00},
+	    {OV2680_8BIT, 0x5794, 0x03}, //based OV2680_R1A_AM10.ovt,Adjust DPC setting (57xx) on 14/06/13
+		{OV2680_8BIT, 0x0100, 0x00},	//stream off
+
+		{OV2680_TOK_TERM, 0, 0}
+	};
+
+
+	/*
+	 * 176x144 30fps  VBlanking 1lane 10Bit (binning)
+	 */
+	static struct ov2680_reg const ov2680_QCIF_30fps[] = {
+	{OV2680_8BIT, 0x3086, 0x01},
+	{OV2680_8BIT, 0x3501, 0x24},
+	{OV2680_8BIT, 0x3502, 0x40},
+	{OV2680_8BIT, 0x370a, 0x23},
+	{OV2680_8BIT, 0x3801, 0xa0},
+	{OV2680_8BIT, 0x3802, 0x00},
+	{OV2680_8BIT, 0x3803, 0x78},
+	{OV2680_8BIT, 0x3804, 0x05},
+	{OV2680_8BIT, 0x3805, 0xaf},
+	{OV2680_8BIT, 0x3806, 0x04},
+	{OV2680_8BIT, 0x3807, 0x47},
+	{OV2680_8BIT, 0x3808, 0x00},
+	{OV2680_8BIT, 0x3809, 0xC0},
+	{OV2680_8BIT, 0x380a, 0x00},
+	{OV2680_8BIT, 0x380b, 0xa0},
+	{OV2680_8BIT, 0x380c, 0x06},
+	{OV2680_8BIT, 0x380d, 0xb0},
+	{OV2680_8BIT, 0x380e, 0x02},
+	{OV2680_8BIT, 0x380f, 0x84},
+	{OV2680_8BIT, 0x3810, 0x00},
+	{OV2680_8BIT, 0x3811, 0x04},
+	{OV2680_8BIT, 0x3812, 0x00},
+	{OV2680_8BIT, 0x3813, 0x04},
+	{OV2680_8BIT, 0x3814, 0x31},
+	{OV2680_8BIT, 0x3815, 0x31},
+	{OV2680_8BIT, 0x4000, 0x81},
+	{OV2680_8BIT, 0x4001, 0x40},
+	{OV2680_8BIT, 0x4008, 0x00},
+	{OV2680_8BIT, 0x4009, 0x03},
+	{OV2680_8BIT, 0x5081, 0x41},
+	{OV2680_8BIT, 0x5708, 0x00}, //add for full size flip off and mirror off 2014/09/11
+	{OV2680_8BIT, 0x5704, 0x10},
+	{OV2680_8BIT, 0x5705, 0xa0},
+	{OV2680_8BIT, 0x5706, 0x0c},
+	{OV2680_8BIT, 0x5707, 0x78},
+	{OV2680_8BIT, 0x3820, 0xc2},
+	{OV2680_8BIT, 0x3821, 0x01},
+    // {OV2680_8BIT, 0x5090, 0x0c},
+    {OV2680_TOK_TERM, 0, 0}
+	};
+
+	/*
+	 * 352x288 30fps  VBlanking 1lane 10Bit (binning)
+	 */
+	static struct ov2680_reg const ov2680_CIF_30fps[] = {
+	{OV2680_8BIT, 0x3086, 0x01},
+	{OV2680_8BIT, 0x3501, 0x24},
+	{OV2680_8BIT, 0x3502, 0x40},
+	{OV2680_8BIT, 0x370a, 0x23},
+	{OV2680_8BIT, 0x3801, 0xa0},
+	{OV2680_8BIT, 0x3802, 0x00},
+	{OV2680_8BIT, 0x3803, 0x78},
+	{OV2680_8BIT, 0x3804, 0x03},
+	{OV2680_8BIT, 0x3805, 0x8f},
+	{OV2680_8BIT, 0x3806, 0x02},
+	{OV2680_8BIT, 0x3807, 0xe7},
+	{OV2680_8BIT, 0x3808, 0x01},
+	{OV2680_8BIT, 0x3809, 0x70},
+	{OV2680_8BIT, 0x380a, 0x01},
+	{OV2680_8BIT, 0x380b, 0x30},
+	{OV2680_8BIT, 0x380c, 0x06},
+	{OV2680_8BIT, 0x380d, 0xb0},
+	{OV2680_8BIT, 0x380e, 0x02},
+	{OV2680_8BIT, 0x380f, 0x84},
+	{OV2680_8BIT, 0x3810, 0x00},
+	{OV2680_8BIT, 0x3811, 0x04},
+	{OV2680_8BIT, 0x3812, 0x00},
+	{OV2680_8BIT, 0x3813, 0x04},
+	{OV2680_8BIT, 0x3814, 0x31},
+	{OV2680_8BIT, 0x3815, 0x31},
+	{OV2680_8BIT, 0x4008, 0x00},
+	{OV2680_8BIT, 0x4009, 0x03},
+	{OV2680_8BIT, 0x5081, 0x41},
+	{OV2680_8BIT, 0x5708, 0x00}, //add for full size flip off and mirror off 2014/09/11
+	{OV2680_8BIT, 0x5704, 0x10},
+	{OV2680_8BIT, 0x5705, 0xa0},
+	{OV2680_8BIT, 0x5706, 0x0c},
+	{OV2680_8BIT, 0x5707, 0x78},
+	{OV2680_8BIT, 0x3820, 0xc2},
+	{OV2680_8BIT, 0x3821, 0x01},
+    // {OV2680_8BIT, 0x5090, 0x0c},
+    {OV2680_TOK_TERM, 0, 0}
+	};
+
+	/*
+	 * 336x256 30fps  VBlanking 1lane 10Bit (binning)
+	 */
+	static struct ov2680_reg const ov2680_QVGA_30fps[] = {
+	{OV2680_8BIT, 0x3086, 0x01},
+	{OV2680_8BIT, 0x3501, 0x24},
+	{OV2680_8BIT, 0x3502, 0x40},
+	{OV2680_8BIT, 0x370a, 0x23},
+	{OV2680_8BIT, 0x3801, 0xa0},
+	{OV2680_8BIT, 0x3802, 0x00},
+	{OV2680_8BIT, 0x3803, 0x78},
+	{OV2680_8BIT, 0x3804, 0x03},
+	{OV2680_8BIT, 0x3805, 0x4f},
+	{OV2680_8BIT, 0x3806, 0x02},
+	{OV2680_8BIT, 0x3807, 0x87},
+	{OV2680_8BIT, 0x3808, 0x01},
+	{OV2680_8BIT, 0x3809, 0x50},
+	{OV2680_8BIT, 0x380a, 0x01},
+	{OV2680_8BIT, 0x380b, 0x00},
+	{OV2680_8BIT, 0x380c, 0x06},
+	{OV2680_8BIT, 0x380d, 0xb0},
+	{OV2680_8BIT, 0x380e, 0x02},
+	{OV2680_8BIT, 0x380f, 0x84},
+	{OV2680_8BIT, 0x3810, 0x00},
+	{OV2680_8BIT, 0x3811, 0x04},
+	{OV2680_8BIT, 0x3812, 0x00},
+	{OV2680_8BIT, 0x3813, 0x04},
+	{OV2680_8BIT, 0x3814, 0x31},
+	{OV2680_8BIT, 0x3815, 0x31},
+	{OV2680_8BIT, 0x4008, 0x00},
+	{OV2680_8BIT, 0x4009, 0x03},
+	{OV2680_8BIT, 0x5081, 0x41},
+	{OV2680_8BIT, 0x5708, 0x00}, //add for full size flip off and mirror off 2014/09/11
+	{OV2680_8BIT, 0x5704, 0x10},
+	{OV2680_8BIT, 0x5705, 0xa0},
+	{OV2680_8BIT, 0x5706, 0x0c},
+	{OV2680_8BIT, 0x5707, 0x78},
+	{OV2680_8BIT, 0x3820, 0xc2},
+	{OV2680_8BIT, 0x3821, 0x01},
+    // {OV2680_8BIT, 0x5090, 0x0c},
+    {OV2680_TOK_TERM, 0, 0}
+	};
+
+
+	/*
+	 * 656x496 30fps  VBlanking 1lane 10Bit (binning)
+	 */
+	static struct ov2680_reg const ov2680_656x496_30fps[] = {
+	{OV2680_8BIT, 0x3086, 0x01},
+	{OV2680_8BIT, 0x3501, 0x24},
+	{OV2680_8BIT, 0x3502, 0x40},
+	{OV2680_8BIT, 0x370a, 0x23},
+	{OV2680_8BIT, 0x3801, 0xa0},
+	{OV2680_8BIT, 0x3802, 0x00},
+	{OV2680_8BIT, 0x3803, 0x78},
+	{OV2680_8BIT, 0x3804, 0x05},
+	{OV2680_8BIT, 0x3805, 0xcf},
+	{OV2680_8BIT, 0x3806, 0x04},
+	{OV2680_8BIT, 0x3807, 0x67},
+	{OV2680_8BIT, 0x3808, 0x02},
+	{OV2680_8BIT, 0x3809, 0x90},
+	{OV2680_8BIT, 0x380a, 0x01},
+	{OV2680_8BIT, 0x380b, 0xf0},
+	{OV2680_8BIT, 0x380c, 0x06},
+	{OV2680_8BIT, 0x380d, 0xb0},
+	{OV2680_8BIT, 0x380e, 0x02},
+	{OV2680_8BIT, 0x380f, 0x84},
+	{OV2680_8BIT, 0x3810, 0x00},
+	{OV2680_8BIT, 0x3811, 0x04},
+	{OV2680_8BIT, 0x3812, 0x00},
+	{OV2680_8BIT, 0x3813, 0x04},
+	{OV2680_8BIT, 0x3814, 0x31},
+	{OV2680_8BIT, 0x3815, 0x31},
+	{OV2680_8BIT, 0x4008, 0x00},
+	{OV2680_8BIT, 0x4009, 0x03},
+	{OV2680_8BIT, 0x5081, 0x41},
+	{OV2680_8BIT, 0x5708, 0x00}, //add for full size flip off and mirror off 2014/09/11
+	{OV2680_8BIT, 0x5704, 0x10},
+	{OV2680_8BIT, 0x5705, 0xa0},
+	{OV2680_8BIT, 0x5706, 0x0c},
+	{OV2680_8BIT, 0x5707, 0x78},
+	{OV2680_8BIT, 0x3820, 0xc2},
+	{OV2680_8BIT, 0x3821, 0x01},
+    // {OV2680_8BIT, 0x5090, 0x0c},
+    {OV2680_TOK_TERM, 0, 0}
+	};
+	/*
+	* 800x600 30fps  VBlanking 1lane 10Bit (binning)
+	*/
+	static struct ov2680_reg const ov2680_720x592_30fps[] = {
+	{OV2680_8BIT, 0x3086, 0x01},
+	{OV2680_8BIT, 0x3501, 0x26},
+	{OV2680_8BIT, 0x3502, 0x40},
+	{OV2680_8BIT, 0x370a, 0x23},
+	{OV2680_8BIT, 0x3801, 0x00}, // X_ADDR_START;
+	{OV2680_8BIT, 0x3802, 0x00},
+	{OV2680_8BIT, 0x3803, 0x00}, // Y_ADDR_START;
+	{OV2680_8BIT, 0x3804, 0x05},
+	{OV2680_8BIT, 0x3805, 0xaf}, // X_ADDR_END;
+	{OV2680_8BIT, 0x3806, 0x04},
+	{OV2680_8BIT, 0x3807, 0xaf}, // Y_ADDR_END;
+	{OV2680_8BIT, 0x3808, 0x02},
+	{OV2680_8BIT, 0x3809, 0xd0}, // X_OUTPUT_SIZE;
+	{OV2680_8BIT, 0x380a, 0x02},
+	{OV2680_8BIT, 0x380b, 0x50}, // Y_OUTPUT_SIZE;
+	{OV2680_8BIT, 0x380c, 0x06},
+	{OV2680_8BIT, 0x380d, 0xac}, // HTS;
+	{OV2680_8BIT, 0x380e, 0x02},
+	{OV2680_8BIT, 0x380f, 0x84}, // VTS;
+	{OV2680_8BIT, 0x3810, 0x00},
+	{OV2680_8BIT, 0x3811, 0x00},
+	{OV2680_8BIT, 0x3812, 0x00},
+	{OV2680_8BIT, 0x3813, 0x00},
+	{OV2680_8BIT, 0x3814, 0x31},
+	{OV2680_8BIT, 0x3815, 0x31},
+	{OV2680_8BIT, 0x4008, 0x00},
+	{OV2680_8BIT, 0x4009, 0x03},
+	{OV2680_8BIT, 0x5708, 0x00},
+	{OV2680_8BIT, 0x5704, 0x02},
+	{OV2680_8BIT, 0x5705, 0xd0}, // X_WIN;
+	{OV2680_8BIT, 0x5706, 0x02},
+	{OV2680_8BIT, 0x5707, 0x50}, // Y_WIN;
+	{OV2680_8BIT, 0x3820, 0xc2}, // FLIP_FORMAT;
+	{OV2680_8BIT, 0x3821, 0x01}, // MIRROR_FORMAT;
+    {OV2680_8BIT, 0x5090, 0x00}, // PRE ISP CTRL16, default value is 0x0C;
+                                 // BIT[3]: Mirror order, BG or GB;
+                                 // BIT[2]: Flip order, BR or RB;
+	{OV2680_8BIT, 0x5081, 0x41},
+    {OV2680_TOK_TERM, 0, 0}
+	};
+
+	/*
+	* 800x600 30fps  VBlanking 1lane 10Bit (binning)
+	*/
+	static struct ov2680_reg const ov2680_800x600_30fps[] = {
+	{OV2680_8BIT, 0x3086, 0x01},
+	{OV2680_8BIT, 0x3501, 0x26},
+	{OV2680_8BIT, 0x3502, 0x40},
+	{OV2680_8BIT, 0x370a, 0x23},
+	{OV2680_8BIT, 0x3801, 0x00},
+	{OV2680_8BIT, 0x3802, 0x00},
+	{OV2680_8BIT, 0x3803, 0x00},
+	{OV2680_8BIT, 0x3804, 0x06},
+	{OV2680_8BIT, 0x3805, 0x4f},
+	{OV2680_8BIT, 0x3806, 0x04},
+	{OV2680_8BIT, 0x3807, 0xbf},
+	{OV2680_8BIT, 0x3808, 0x03},
+	{OV2680_8BIT, 0x3809, 0x20},
+	{OV2680_8BIT, 0x380a, 0x02},
+	{OV2680_8BIT, 0x380b, 0x58},
+	{OV2680_8BIT, 0x380c, 0x06},
+	{OV2680_8BIT, 0x380d, 0xac},
+	{OV2680_8BIT, 0x380e, 0x02},
+	{OV2680_8BIT, 0x380f, 0x84},
+	{OV2680_8BIT, 0x3810, 0x00},
+	{OV2680_8BIT, 0x3811, 0x00},
+	{OV2680_8BIT, 0x3812, 0x00},
+	{OV2680_8BIT, 0x3813, 0x00},
+	{OV2680_8BIT, 0x3814, 0x31},
+	{OV2680_8BIT, 0x3815, 0x31},
+	{OV2680_8BIT, 0x5708, 0x00},
+	{OV2680_8BIT, 0x5704, 0x03},
+	{OV2680_8BIT, 0x5705, 0x20},
+	{OV2680_8BIT, 0x5706, 0x02},
+	{OV2680_8BIT, 0x5707, 0x58},
+	{OV2680_8BIT, 0x3820, 0xc2},
+	{OV2680_8BIT, 0x3821, 0x01},
+    {OV2680_8BIT, 0x5090, 0x00},
+	{OV2680_8BIT, 0x4008, 0x00},
+	{OV2680_8BIT, 0x4009, 0x03},
+	{OV2680_8BIT, 0x5081, 0x41},
+    {OV2680_TOK_TERM, 0, 0}
+	};
+
+	/*
+	 * 720p=1280*720 30fps  VBlanking 1lane 10Bit (no-Scaling)
+	 */
+	static struct ov2680_reg const ov2680_720p_30fps[] = {
+	{OV2680_8BIT, 0x3086, 0x00},
+	{OV2680_8BIT, 0x3501, 0x48},
+	{OV2680_8BIT, 0x3502, 0xe0},
+	{OV2680_8BIT, 0x370a, 0x21},
+	{OV2680_8BIT, 0x3801, 0xa0},
+	{OV2680_8BIT, 0x3802, 0x00},
+	{OV2680_8BIT, 0x3803, 0xf2},
+	{OV2680_8BIT, 0x3804, 0x05},
+	{OV2680_8BIT, 0x3805, 0xbf},
+	{OV2680_8BIT, 0x3806, 0x03},
+	{OV2680_8BIT, 0x3807, 0xdd},
+	{OV2680_8BIT, 0x3808, 0x05},
+	{OV2680_8BIT, 0x3809, 0x10},
+	{OV2680_8BIT, 0x380a, 0x02},
+	{OV2680_8BIT, 0x380b, 0xe0},
+	{OV2680_8BIT, 0x380c, 0x06},
+	{OV2680_8BIT, 0x380d, 0xa8},
+	{OV2680_8BIT, 0x380e, 0x05},
+	{OV2680_8BIT, 0x380f, 0x0e},
+	{OV2680_8BIT, 0x3810, 0x00},
+	{OV2680_8BIT, 0x3811, 0x08},
+	{OV2680_8BIT, 0x3812, 0x00},
+	{OV2680_8BIT, 0x3813, 0x06},
+	{OV2680_8BIT, 0x3814, 0x11},
+	{OV2680_8BIT, 0x3815, 0x11},
+	{OV2680_8BIT, 0x4008, 0x02},
+	{OV2680_8BIT, 0x4009, 0x09},
+	{OV2680_8BIT, 0x5081, 0x41},
+	{OV2680_8BIT, 0x5708, 0x00}, //add for full size flip off and mirror off 2014/09/11
+	{OV2680_8BIT, 0x5704, 0x10},
+	{OV2680_8BIT, 0x5705, 0xa0},
+	{OV2680_8BIT, 0x5706, 0x0c},
+	{OV2680_8BIT, 0x5707, 0x78},
+	{OV2680_8BIT, 0x3820, 0xc0},
+	{OV2680_8BIT, 0x3821, 0x00},
+    // {OV2680_8BIT, 0x5090, 0x0c},
+    {OV2680_TOK_TERM, 0, 0}
+	};
+
+	/*
+	 * 1296x976 30fps  VBlanking 1lane 10Bit(no-scaling)
+	 */
+	static struct ov2680_reg const ov2680_1296x976_30fps[] = {
+	{OV2680_8BIT, 0x3086, 0x00},
+	{OV2680_8BIT, 0x3501, 0x48},
+	{OV2680_8BIT, 0x3502, 0xe0},
+	{OV2680_8BIT, 0x370a, 0x21},
+	{OV2680_8BIT, 0x3801, 0xa0},
+	{OV2680_8BIT, 0x3802, 0x00},
+	{OV2680_8BIT, 0x3803, 0x78},
+	{OV2680_8BIT, 0x3804, 0x05},
+	{OV2680_8BIT, 0x3805, 0xbf},
+	{OV2680_8BIT, 0x3806, 0x04},
+	{OV2680_8BIT, 0x3807, 0x57},
+	{OV2680_8BIT, 0x3808, 0x05},
+	{OV2680_8BIT, 0x3809, 0x10},
+	{OV2680_8BIT, 0x380a, 0x03},
+	{OV2680_8BIT, 0x380b, 0xd0},
+	{OV2680_8BIT, 0x380c, 0x06},
+	{OV2680_8BIT, 0x380d, 0xa8},
+	{OV2680_8BIT, 0x380e, 0x05},
+	{OV2680_8BIT, 0x380f, 0x0e},
+	{OV2680_8BIT, 0x3810, 0x00},
+	{OV2680_8BIT, 0x3811, 0x08},
+	{OV2680_8BIT, 0x3812, 0x00},
+	{OV2680_8BIT, 0x3813, 0x08},
+	{OV2680_8BIT, 0x3814, 0x11},
+	{OV2680_8BIT, 0x3815, 0x11},
+	{OV2680_8BIT, 0x4008, 0x02},
+	{OV2680_8BIT, 0x4009, 0x09},
+	{OV2680_8BIT, 0x5081, 0x41},
+	{OV2680_8BIT, 0x5708, 0x00}, //add for full size flip off and mirror off 2014/09/11
+	{OV2680_8BIT, 0x5704, 0x10},
+	{OV2680_8BIT, 0x5705, 0xa0},
+	{OV2680_8BIT, 0x5706, 0x0c},
+	{OV2680_8BIT, 0x5707, 0x78},
+	{OV2680_8BIT, 0x3820, 0xc0},
+	{OV2680_8BIT, 0x3821, 0x00}, //miror/flip
+    // {OV2680_8BIT, 0x5090, 0x0c},
+    {OV2680_TOK_TERM, 0, 0}
+ 	};
+
+	/*
+	 *   1456*1096 30fps  VBlanking 1lane 10bit(no-scaling)
+	*/
+	static struct ov2680_reg const ov2680_1456x1096_30fps[]= {
+	{OV2680_8BIT, 0x3086, 0x00},
+	{OV2680_8BIT, 0x3501, 0x48},
+	{OV2680_8BIT, 0x3502, 0xe0},
+	{OV2680_8BIT, 0x370a, 0x21},
+	{OV2680_8BIT, 0x3801, 0x90},
+	{OV2680_8BIT, 0x3802, 0x00},
+	{OV2680_8BIT, 0x3803, 0x78},
+	{OV2680_8BIT, 0x3804, 0x06},
+	{OV2680_8BIT, 0x3805, 0x4f},
+	{OV2680_8BIT, 0x3806, 0x04},
+	{OV2680_8BIT, 0x3807, 0xC0},
+	{OV2680_8BIT, 0x3808, 0x05},
+	{OV2680_8BIT, 0x3809, 0xb0},
+	{OV2680_8BIT, 0x380a, 0x04},
+	{OV2680_8BIT, 0x380b, 0x48},
+	{OV2680_8BIT, 0x380c, 0x06},
+	{OV2680_8BIT, 0x380d, 0xa8},
+	{OV2680_8BIT, 0x380e, 0x05},
+	{OV2680_8BIT, 0x380f, 0x0e},
+	{OV2680_8BIT, 0x3810, 0x00},
+	{OV2680_8BIT, 0x3811, 0x08},
+	{OV2680_8BIT, 0x3812, 0x00},
+	{OV2680_8BIT, 0x3813, 0x00},
+	{OV2680_8BIT, 0x3814, 0x11},
+	{OV2680_8BIT, 0x3815, 0x11},
+	{OV2680_8BIT, 0x4008, 0x02},
+	{OV2680_8BIT, 0x4009, 0x09},
+	{OV2680_8BIT, 0x5081, 0x41},
+	{OV2680_8BIT, 0x5708, 0x00}, //add for full size flip off and mirror off 2014/09/11
+	{OV2680_8BIT, 0x5704, 0x10},
+	{OV2680_8BIT, 0x5705, 0xa0},
+	{OV2680_8BIT, 0x5706, 0x0c},
+	{OV2680_8BIT, 0x5707, 0x78},
+	{OV2680_8BIT, 0x3820, 0xc0},
+	{OV2680_8BIT, 0x3821, 0x00},
+    // {OV2680_8BIT, 0x5090, 0x0c},
+	{OV2680_TOK_TERM, 0, 0}
+	};
+
+	/*
+	 *1616x916  30fps  VBlanking 1lane 10bit
+	 */
+
+	static struct ov2680_reg const ov2680_1616x916_30fps[] = {
+
+	{OV2680_8BIT, 0x3086, 0x00},
+	{OV2680_8BIT, 0x3501, 0x48},
+	{OV2680_8BIT, 0x3502, 0xe0},
+	{OV2680_8BIT, 0x370a, 0x21},
+	{OV2680_8BIT, 0x3801, 0x00},
+	{OV2680_8BIT, 0x3802, 0x00},
+	{OV2680_8BIT, 0x3803, 0x96},
+	{OV2680_8BIT, 0x3804, 0x06},
+	{OV2680_8BIT, 0x3805, 0x4f},
+	{OV2680_8BIT, 0x3806, 0x04},
+	{OV2680_8BIT, 0x3807, 0x39},
+	{OV2680_8BIT, 0x3808, 0x06},
+	{OV2680_8BIT, 0x3809, 0x50},
+	{OV2680_8BIT, 0x380a, 0x03},
+	{OV2680_8BIT, 0x380b, 0x94},
+	{OV2680_8BIT, 0x380c, 0x06},
+	{OV2680_8BIT, 0x380d, 0xa8},
+	{OV2680_8BIT, 0x380e, 0x05},
+	{OV2680_8BIT, 0x380f, 0x0e},
+	{OV2680_8BIT, 0x3810, 0x00},
+	{OV2680_8BIT, 0x3811, 0x00},
+	{OV2680_8BIT, 0x3812, 0x00},
+	{OV2680_8BIT, 0x3813, 0x08},
+	{OV2680_8BIT, 0x3814, 0x11},
+	{OV2680_8BIT, 0x3815, 0x11},
+	{OV2680_8BIT, 0x4008, 0x02},
+	{OV2680_8BIT, 0x4009, 0x09},
+	{OV2680_8BIT, 0x5081, 0x41},
+	{OV2680_8BIT, 0x5708, 0x01}, //add for full size flip off and mirror off 2014/09/11
+	{OV2680_8BIT, 0x5704, 0x06},
+	{OV2680_8BIT, 0x5705, 0x50},
+	{OV2680_8BIT, 0x5706, 0x03},
+	{OV2680_8BIT, 0x5707, 0x94},
+	{OV2680_8BIT, 0x3820, 0xc0},
+	{OV2680_8BIT, 0x3821, 0x00},
+    // {OV2680_8BIT, 0x5090, 0x0C},
+    {OV2680_TOK_TERM, 0, 0}
+	};
+
+	/*
+	 * 1612x1212 30fps VBlanking 1lane 10Bit
+	 */
+	static struct ov2680_reg const ov2680_1616x1082_30fps[] = {
+       {OV2680_8BIT, 0x3086, 0x00},
+       {OV2680_8BIT, 0x3501, 0x48},
+       {OV2680_8BIT, 0x3502, 0xe0},
+       {OV2680_8BIT, 0x370a, 0x21},
+       {OV2680_8BIT, 0x3801, 0x00},
+       {OV2680_8BIT, 0x3802, 0x00},
+       {OV2680_8BIT, 0x3803, 0x86},
+       {OV2680_8BIT, 0x3804, 0x06},
+       {OV2680_8BIT, 0x3805, 0x4f},
+       {OV2680_8BIT, 0x3806, 0x04},
+       {OV2680_8BIT, 0x3807, 0xbf},
+       {OV2680_8BIT, 0x3808, 0x06},
+       {OV2680_8BIT, 0x3809, 0x50},
+       {OV2680_8BIT, 0x380a, 0x04},
+       {OV2680_8BIT, 0x380b, 0x3a},
+       {OV2680_8BIT, 0x380c, 0x06},
+       {OV2680_8BIT, 0x380d, 0xa8},
+       {OV2680_8BIT, 0x380e, 0x05},
+       {OV2680_8BIT, 0x380f, 0x0e},
+       {OV2680_8BIT, 0x3810, 0x00},
+       {OV2680_8BIT, 0x3811, 0x00},
+       {OV2680_8BIT, 0x3812, 0x00},
+       {OV2680_8BIT, 0x3813, 0x00},
+       {OV2680_8BIT, 0x3814, 0x11},
+       {OV2680_8BIT, 0x3815, 0x11},
+       {OV2680_8BIT, 0x5708, 0x01}, //add for full size flip off and mirror off 2014/09/11
+       {OV2680_8BIT, 0x5704, 0x06},
+       {OV2680_8BIT, 0x5705, 0x50},
+       {OV2680_8BIT, 0x5706, 0x04},
+       {OV2680_8BIT, 0x5707, 0x3a},
+       {OV2680_8BIT, 0x3820, 0xc0},
+       {OV2680_8BIT, 0x3821, 0x00},
+       // {OV2680_8BIT, 0x5090, 0x0C},
+       {OV2680_8BIT, 0x4008, 0x02},
+       {OV2680_8BIT, 0x4009, 0x09},
+       {OV2680_8BIT, 0x5081, 0x41},
+		{OV2680_TOK_TERM, 0, 0}
+        };
+	/*
+	 * 1616x1216 30fps VBlanking 1lane 10Bit
+	 */
+	static struct ov2680_reg const ov2680_1616x1216_30fps[] = {
+	{OV2680_8BIT, 0x3086, 0x00},
+	{OV2680_8BIT, 0x3501, 0x48},
+	{OV2680_8BIT, 0x3502, 0xe0},
+	{OV2680_8BIT, 0x370a, 0x21},
+	{OV2680_8BIT, 0x3801, 0x00},
+	{OV2680_8BIT, 0x3802, 0x00},
+	{OV2680_8BIT, 0x3803, 0x00},
+	{OV2680_8BIT, 0x3804, 0x06},
+	{OV2680_8BIT, 0x3805, 0x4f},
+	{OV2680_8BIT, 0x3806, 0x04},
+	{OV2680_8BIT, 0x3807, 0xbf},
+	{OV2680_8BIT, 0x3808, 0x06},
+	{OV2680_8BIT, 0x3809, 0x50},//50},//4line for mirror and flip
+	{OV2680_8BIT, 0x380a, 0x04},
+	{OV2680_8BIT, 0x380b, 0xc0},//c0},
+	{OV2680_8BIT, 0x380c, 0x06},
+	{OV2680_8BIT, 0x380d, 0xa8},
+	{OV2680_8BIT, 0x380e, 0x05},
+	{OV2680_8BIT, 0x380f, 0x0e},
+	{OV2680_8BIT, 0x3810, 0x00},
+	{OV2680_8BIT, 0x3811, 0x00},
+	{OV2680_8BIT, 0x3812, 0x00},
+	{OV2680_8BIT, 0x3813, 0x00},
+	{OV2680_8BIT, 0x3814, 0x11},
+	{OV2680_8BIT, 0x3815, 0x11},
+	{OV2680_8BIT, 0x4008, 0x00},
+	{OV2680_8BIT, 0x4009, 0x0b},
+	{OV2680_8BIT, 0x5081, 0x01},
+	{OV2680_8BIT, 0x5708, 0x01}, //add for full size flip off and mirror off 2014/09/11
+	{OV2680_8BIT, 0x5704, 0x06},
+	{OV2680_8BIT, 0x5705, 0x50},
+	{OV2680_8BIT, 0x5706, 0x04},
+	{OV2680_8BIT, 0x5707, 0xcc},
+	{OV2680_8BIT, 0x3820, 0xc0},
+	{OV2680_8BIT, 0x3821, 0x00},
+    // {OV2680_8BIT, 0x5090, 0x0C},
+    {OV2680_TOK_TERM, 0, 0}
+	};
+
+	static struct ov2680_resolution ov2680_res_preview[] = {
+	{
+		.desc = "ov2680_1616x1216_30fps",
+ 	  	.width = 1616,
+		.height = 1216,
+		.pix_clk_freq = 66,
+		.fps = 30,
+		.used = 0,
+		.pixels_per_line = 1698,//1704,
+		.lines_per_frame = 1294,
+		.bin_factor_x = 0,
+		.bin_factor_y = 0,
+		.bin_mode = 0,
+		.skip_frames = 3,
+		.regs = ov2680_1616x1216_30fps,
+	},
+   	{
+		.desc = "ov2680_1616x916_30fps",
+		.width = 1616,
+		.height = 916,
+		.fps = 30,
+		.pix_clk_freq = 66,
+		.used = 0,
+		.pixels_per_line = 1698,//1704,
+		.lines_per_frame = 1294,
+		.bin_factor_x = 0,
+		.bin_factor_y = 0,
+		.bin_mode = 0,
+		.skip_frames = 3,
+		.regs = ov2680_1616x916_30fps,
+	},
+};
+#define N_RES_PREVIEW (ARRAY_SIZE(ov2680_res_preview))
+
+static struct ov2680_resolution ov2680_res_still[] = {
+	{
+		.desc = "ov2680_1616x1216_30fps",
+		.width = 1616,
+		.height = 1216,
+		.pix_clk_freq = 66,
+		.fps = 30,
+		.used = 0,
+		.pixels_per_line = 1698,//1704,
+		.lines_per_frame = 1294,
+		.bin_factor_x = 0,
+		.bin_factor_y = 0,
+		.bin_mode = 0,
+		.skip_frames = 3,
+		.regs = ov2680_1616x1216_30fps,
+	},
+   	{
+		.desc = "ov2680_1616x916_30fps",
+		.width = 1616,
+		.height = 916,
+		.fps = 30,
+		.pix_clk_freq = 66,
+		.used = 0,
+		.pixels_per_line = 1698,//1704,
+		.lines_per_frame = 1294,
+		.bin_factor_x = 0,
+		.bin_factor_y = 0,
+		.bin_mode = 0,
+		.skip_frames = 3,
+		.regs = ov2680_1616x916_30fps,
+	},
+};
+#define N_RES_STILL (ARRAY_SIZE(ov2680_res_still))
+
+static struct ov2680_resolution ov2680_res_video[] = {
+	{
+		.desc = "ov2680_1616x1216_30fps",
+		.width = 1616,
+		.height = 1216,
+		.pix_clk_freq = 66,
+		.fps = 30,
+		.used = 0,
+		.pixels_per_line = 1698,//1704,
+		.lines_per_frame = 1294,
+		.bin_factor_x = 0,
+		.bin_factor_y = 0,
+		.bin_mode = 0,
+		.skip_frames = 3,
+		.regs = ov2680_1616x1216_30fps,
+	},
+	{
+		.desc = "ov2680_720p_30fps",
+		.width = 1616,
+		.height = 916,
+		.fps = 30,
+		.pix_clk_freq = 66,
+		.used = 0,
+		.pixels_per_line = 1698,//1704,
+		.lines_per_frame = 1294,
+		.bin_factor_x = 0,
+		.bin_factor_y = 0,
+		.bin_mode = 0,
+		.skip_frames = 3,
+		.regs = ov2680_1616x916_30fps,
+	},
+};
+#define N_RES_VIDEO (ARRAY_SIZE(ov2680_res_video))
+
+static struct ov2680_resolution *ov2680_res = ov2680_res_preview;
+static int N_RES = N_RES_PREVIEW;
+
+
+#endif
