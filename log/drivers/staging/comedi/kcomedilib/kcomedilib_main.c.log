commit f814e74c9b5f37f22fe28acc1989566b99adb170
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Tue Nov 7 14:58:45 2017 +0100

    staging: comedi: Remove redundant license text
    
    Now that the SPDX tag is in all comedi files, that identifies the
    license in a specific and legally-defined manner.  So the extra GPL text
    wording can be removed as it is no longer needed at all.
    
    This is done on a quest to remove the 700+ different ways that files in
    the kernel describe the GPL license text.  And there's unneeded stuff
    like the address (sometimes incorrect) for the FSF which is never
    needed.
    
    No copyright headers or other non-license-description text was removed.
    
    Cc: Ian Abbott <abbotti@mev.co.uk>
    Cc: H Hartley Sweeten <hsweeten@visionengravers.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/kcomedilib/kcomedilib_main.c b/drivers/staging/comedi/kcomedilib/kcomedilib_main.c
index 7d73bdd1e795..df9bba1b69ed 100644
--- a/drivers/staging/comedi/kcomedilib/kcomedilib_main.c
+++ b/drivers/staging/comedi/kcomedilib/kcomedilib_main.c
@@ -5,16 +5,6 @@
  *
  * COMEDI - Linux Control and Measurement Device Interface
  * Copyright (C) 1997-2000 David A. Schleef <ds@schleef.org>
- *
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation; either version 2 of the License, or
- * (at your option) any later version.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
  */
 
 #include <linux/module.h>

commit e184e2bed8fc895ce930624524d319289c1f1082
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Tue Nov 7 14:58:43 2017 +0100

    staging: comedi: add SPDX identifiers to all greybus driver files
    
    It's good to have SPDX identifiers in all files to make it easier to
    audit the kernel tree for correct licenses.
    
    Update the drivers/staging/comedi files files with the correct SPDX
    license identifier based on the license text in the file itself.  The
    SPDX identifier is a legally binding shorthand, which can be used
    instead of the full boiler plate text.
    
    This work is based on a script and data from Thomas Gleixner, Philippe
    Ombredanne, and Kate Stewart.
    
    Cc: Ian Abbott <abbotti@mev.co.uk>
    Cc: H Hartley Sweeten <hsweeten@visionengravers.com>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: Kate Stewart <kstewart@linuxfoundation.org>
    Cc: Philippe Ombredanne <pombredanne@nexb.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/kcomedilib/kcomedilib_main.c b/drivers/staging/comedi/kcomedilib/kcomedilib_main.c
index 55d43c076b1c..7d73bdd1e795 100644
--- a/drivers/staging/comedi/kcomedilib/kcomedilib_main.c
+++ b/drivers/staging/comedi/kcomedilib/kcomedilib_main.c
@@ -1,3 +1,4 @@
+// SPDX-License-Identifier: GPL-2.0+
 /*
  * kcomedilib/kcomedilib.c
  * a comedlib interface for kernel modules

commit c7ea8b51101484bda234b990ead032bf0b364752
Author: Cheah Kok Cheong <thrust73@gmail.com>
Date:   Tue Dec 6 00:57:28 2016 +0800

    Staging: comedi: kcomedilib: Add module_init/exit function
    
    Add init/exit function to follow LKM semantics.
    Apparently this module can still load/unload without
    the init/exit function.
    
    Tested loading/unloading with and without this patch.
    
    Signed-off-by: Cheah Kok Cheong <thrust73@gmail.com>
    Reviewed-by: Ian Abbott <abbotti@mev.co.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/kcomedilib/kcomedilib_main.c b/drivers/staging/comedi/kcomedilib/kcomedilib_main.c
index d0a8a28edd36..55d43c076b1c 100644
--- a/drivers/staging/comedi/kcomedilib/kcomedilib_main.c
+++ b/drivers/staging/comedi/kcomedilib/kcomedilib_main.c
@@ -250,3 +250,15 @@ int comedi_get_n_channels(struct comedi_device *dev, unsigned int subdevice)
 	return n;
 }
 EXPORT_SYMBOL_GPL(comedi_get_n_channels);
+
+static int __init kcomedilib_module_init(void)
+{
+	return 0;
+}
+
+static void __exit kcomedilib_module_exit(void)
+{
+}
+
+module_init(kcomedilib_module_init);
+module_exit(kcomedilib_module_exit);

commit 6b32fccc104da1e9673bb461035c1dbcb5a2962e
Author: Nayeemahmed Badebade <itachi.opsrc@gmail.com>
Date:   Thu Sep 3 23:14:35 2015 +0530

    staging: comedi: kcomedilib: Fixed coding style issue
    
    Fixed checkpatch.pl warning in kcomedilib_main.c:
     - Block comments use * on subsequent lines
    
    Signed-off-by: Nayeemahmed Badebade <itachi.opsrc@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/kcomedilib/kcomedilib_main.c b/drivers/staging/comedi/kcomedilib/kcomedilib_main.c
index 76bf5619fdd5..d0a8a28edd36 100644
--- a/drivers/staging/comedi/kcomedilib/kcomedilib_main.c
+++ b/drivers/staging/comedi/kcomedilib/kcomedilib_main.c
@@ -1,20 +1,20 @@
 /*
-    kcomedilib/kcomedilib.c
-    a comedlib interface for kernel modules
-
-    COMEDI - Linux Control and Measurement Device Interface
-    Copyright (C) 1997-2000 David A. Schleef <ds@schleef.org>
-
-    This program is free software; you can redistribute it and/or modify
-    it under the terms of the GNU General Public License as published by
-    the Free Software Foundation; either version 2 of the License, or
-    (at your option) any later version.
-
-    This program is distributed in the hope that it will be useful,
-    but WITHOUT ANY WARRANTY; without even the implied warranty of
-    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-    GNU General Public License for more details.
-*/
+ * kcomedilib/kcomedilib.c
+ * a comedlib interface for kernel modules
+ *
+ * COMEDI - Linux Control and Measurement Device Interface
+ * Copyright (C) 1997-2000 David A. Schleef <ds@schleef.org>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ */
 
 #include <linux/module.h>
 

commit 4c36fdde64f858ce167ad69859c89b1a8c9b6fb0
Author: H Hartley Sweeten <hsweeten@visionengravers.com>
Date:   Wed Mar 4 12:15:41 2015 -0700

    staging: comedi: kcomedilib_main: (!foo) preferred over (foo == NULL)
    
    Signed-off-by: H Hartley Sweeten <hsweeten@visionengravers.com>
    Reviewed-by: Ian Abbott <abbotti@mev.co.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/kcomedilib/kcomedilib_main.c b/drivers/staging/comedi/kcomedilib/kcomedilib_main.c
index 973f544e85e1..76bf5619fdd5 100644
--- a/drivers/staging/comedi/kcomedilib/kcomedilib_main.c
+++ b/drivers/staging/comedi/kcomedilib/kcomedilib_main.c
@@ -58,7 +58,7 @@ struct comedi_device *comedi_open(const char *filename)
 		retval = NULL;
 	up_read(&dev->attach_lock);
 
-	if (retval == NULL)
+	if (!retval)
 		comedi_dev_put(dev);
 
 	return retval;

commit 53d484b18f1444eba3836ea0d162460fab3edc55
Author: Gustavo A. R. Silva <silvagustavosilva@gmail.com>
Date:   Sun Jan 11 15:46:26 2015 -0600

    Staging: comedi: kcomedilib: Fixed a typo
    
    Fixed a typo in kcomedilib_main.c file.
    
    Signed-off-by: Gustavo A. R. Silva <garsilva@embeddedor.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/kcomedilib/kcomedilib_main.c b/drivers/staging/comedi/kcomedilib/kcomedilib_main.c
index 8777f958c041..973f544e85e1 100644
--- a/drivers/staging/comedi/kcomedilib/kcomedilib_main.c
+++ b/drivers/staging/comedi/kcomedilib/kcomedilib_main.c
@@ -95,7 +95,7 @@ static int comedi_do_insn(struct comedi_device *dev,
 
 	if (s->type == COMEDI_SUBD_UNUSED) {
 		dev_err(dev->class_dev,
-			"%d not useable subdevice\n", insn->subdev);
+			"%d not usable subdevice\n", insn->subdev);
 		ret = -EIO;
 		goto error;
 	}

commit e6bed035ca652c43c897731366ea816ea2c4fbf1
Author: Chase Southwood <chase.southwood@yahoo.com>
Date:   Fri Feb 14 21:59:40 2014 -0600

    Staging: comedi: kcomedilib: replace deprecated simple_strtoul() with kstrtouint()
    
    Since simple_strtoul() has been deprecated, replace it with kstrtouint().
    Also, since return code checking for this new function is enforced, add a
    check to ensure that the conversion has succeeded.
    
    Signed-off-by: Chase Southwood <chase.southwood@yahoo.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/kcomedilib/kcomedilib_main.c b/drivers/staging/comedi/kcomedilib/kcomedilib_main.c
index 7dc5a18e69d4..8777f958c041 100644
--- a/drivers/staging/comedi/kcomedilib/kcomedilib_main.c
+++ b/drivers/staging/comedi/kcomedilib/kcomedilib_main.c
@@ -41,7 +41,8 @@ struct comedi_device *comedi_open(const char *filename)
 	if (strncmp(filename, "/dev/comedi", 11) != 0)
 		return NULL;
 
-	minor = simple_strtoul(filename + 11, NULL, 0);
+	if (kstrtouint(filename + 11, 0, &minor))
+		return NULL;
 
 	if (minor >= COMEDI_NUM_BOARD_MINORS)
 		return NULL;

commit 69e2387f3bfd408c7fb6c0d14b83d792f67ed638
Author: Ian Abbott <abbotti@mev.co.uk>
Date:   Fri Nov 8 15:03:39 2013 +0000

    staging: comedi: kcomedilib: protect against device detachment
    
    The functions in "kcomedilib" need to prevent the comedi device being
    detached during their operation.  This can be done by acquiring either
    the main mutex or the "attach lock" semaphore in the `struct
    comedi_device`.  Use the attach lock when merely checking whether the
    device is attached.  Use the mutex when processing a comedi instruction.
    
    Also, don't bother trying to manipulate the module use count of
    low-level comedi driver in `comedi_open()` and `comedi_close()`.  If the
    device gets detached while it is "open", we wouldn't be able to
    decrement the module use count anyway.
    
    Signed-off-by: Ian Abbott <abbotti@mev.co.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/kcomedilib/kcomedilib_main.c b/drivers/staging/comedi/kcomedilib/kcomedilib_main.c
index b3a06f2dbad6..7dc5a18e69d4 100644
--- a/drivers/staging/comedi/kcomedilib/kcomedilib_main.c
+++ b/drivers/staging/comedi/kcomedilib/kcomedilib_main.c
@@ -50,10 +50,12 @@ struct comedi_device *comedi_open(const char *filename)
 	if (!dev)
 		return NULL;
 
-	if (dev->attached && try_module_get(dev->driver->module))
+	down_read(&dev->attach_lock);
+	if (dev->attached)
 		retval = dev;
 	else
 		retval = NULL;
+	up_read(&dev->attach_lock);
 
 	if (retval == NULL)
 		comedi_dev_put(dev);
@@ -62,13 +64,9 @@ struct comedi_device *comedi_open(const char *filename)
 }
 EXPORT_SYMBOL_GPL(comedi_open);
 
-int comedi_close(struct comedi_device *d)
+int comedi_close(struct comedi_device *dev)
 {
-	struct comedi_device *dev = (struct comedi_device *)d;
-
-	module_put(dev->driver->module);
 	comedi_dev_put(dev);
-
 	return 0;
 }
 EXPORT_SYMBOL_GPL(comedi_close);
@@ -78,7 +76,14 @@ static int comedi_do_insn(struct comedi_device *dev,
 			  unsigned int *data)
 {
 	struct comedi_subdevice *s;
-	int ret = 0;
+	int ret;
+
+	mutex_lock(&dev->mutex);
+
+	if (!dev->attached) {
+		ret = -EINVAL;
+		goto error;
+	}
 
 	/* a subdevice instruction */
 	if (insn->subdev >= dev->n_subdevices) {
@@ -125,6 +130,7 @@ static int comedi_do_insn(struct comedi_device *dev,
 	s->busy = NULL;
 error:
 
+	mutex_unlock(&dev->mutex);
 	return ret;
 }
 
@@ -174,9 +180,6 @@ int comedi_dio_bitfield2(struct comedi_device *dev, unsigned int subdev,
 	unsigned int shift;
 	int ret;
 
-	if (subdev >= dev->n_subdevices)
-		return -EINVAL;
-
 	base_channel = CR_CHAN(base_channel);
 	n_chan = comedi_get_n_channels(dev, subdev);
 	if (base_channel >= n_chan)
@@ -216,23 +219,33 @@ int comedi_find_subdevice_by_type(struct comedi_device *dev, int type,
 				  unsigned int subd)
 {
 	struct comedi_subdevice *s;
-
-	if (subd > dev->n_subdevices)
-		return -ENODEV;
-
-	for (; subd < dev->n_subdevices; subd++) {
-		s = &dev->subdevices[subd];
-		if (s->type == type)
-			return subd;
-	}
-	return -1;
+	int ret = -ENODEV;
+
+	down_read(&dev->attach_lock);
+	if (dev->attached)
+		for (; subd < dev->n_subdevices; subd++) {
+			s = &dev->subdevices[subd];
+			if (s->type == type) {
+				ret = subd;
+				break;
+			}
+		}
+	up_read(&dev->attach_lock);
+	return ret;
 }
 EXPORT_SYMBOL_GPL(comedi_find_subdevice_by_type);
 
 int comedi_get_n_channels(struct comedi_device *dev, unsigned int subdevice)
 {
-	struct comedi_subdevice *s = &dev->subdevices[subdevice];
+	int n;
+
+	down_read(&dev->attach_lock);
+	if (!dev->attached || subdevice >= dev->n_subdevices)
+		n = 0;
+	else
+		n = dev->subdevices[subdevice].n_chan;
+	up_read(&dev->attach_lock);
 
-	return s->n_chan;
+	return n;
 }
 EXPORT_SYMBOL_GPL(comedi_get_n_channels);

commit 799a66ba36cb51330c53c024dffc6ddb68545c9c
Author: Ian Abbott <abbotti@mev.co.uk>
Date:   Fri Nov 8 15:03:38 2013 +0000

    staging: comedi: kcomedilib: increment reference while device in use
    
    Low-level comedi drivers that use the "kcomedilib" module (currently only
    the "comedi_bond" driver) call `comedi_open()` to "open" another comedi
    device (not as a file) and `comedi_close()` to "close" it.  (Note: these
    are the functions exported by the "kcomedilib" module, not the
    identically named, statically linked functions in the core "comedi"
    module.)
    
    In `comedi_open()`, call `comedi_dev_get_from_minor()` instead of
    `comedi_dev_from_minor()` to get the pointer to the `struct
    comedi_device` being "opened".  This increments its reference count to
    prevent it being freed.  Call `comedi_dev_put()` if `comedi_open()`
    returns `NULL`, and also call it from `comedi_close()`.  This decrements
    the reference count.
    
    Note that although we now protect against the `struct comedi_device`
    being freed, we do not yet protect against it being "detached" while it
    is being used.  This will be addressed by a later patch.
    
    Signed-off-by: Ian Abbott <abbotti@mev.co.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/kcomedilib/kcomedilib_main.c b/drivers/staging/comedi/kcomedilib/kcomedilib_main.c
index cd60677a3ed2..b3a06f2dbad6 100644
--- a/drivers/staging/comedi/kcomedilib/kcomedilib_main.c
+++ b/drivers/staging/comedi/kcomedilib/kcomedilib_main.c
@@ -35,7 +35,7 @@ MODULE_LICENSE("GPL");
 
 struct comedi_device *comedi_open(const char *filename)
 {
-	struct comedi_device *dev;
+	struct comedi_device *dev, *retval = NULL;
 	unsigned int minor;
 
 	if (strncmp(filename, "/dev/comedi", 11) != 0)
@@ -46,15 +46,19 @@ struct comedi_device *comedi_open(const char *filename)
 	if (minor >= COMEDI_NUM_BOARD_MINORS)
 		return NULL;
 
-	dev = comedi_dev_from_minor(minor);
-
-	if (!dev || !dev->attached)
+	dev = comedi_dev_get_from_minor(minor);
+	if (!dev)
 		return NULL;
 
-	if (!try_module_get(dev->driver->module))
-		return NULL;
+	if (dev->attached && try_module_get(dev->driver->module))
+		retval = dev;
+	else
+		retval = NULL;
+
+	if (retval == NULL)
+		comedi_dev_put(dev);
 
-	return dev;
+	return retval;
 }
 EXPORT_SYMBOL_GPL(comedi_open);
 
@@ -63,6 +67,7 @@ int comedi_close(struct comedi_device *d)
 	struct comedi_device *dev = (struct comedi_device *)d;
 
 	module_put(dev->driver->module);
+	comedi_dev_put(dev);
 
 	return 0;
 }

commit 0f3ce1a600fc1aca996a550f332c9f0c712ea80a
Author: Ian Abbott <abbotti@mev.co.uk>
Date:   Fri Aug 23 14:45:08 2013 +0100

    staging: comedi: comedi_bond: handle base channel for insn_bits
    
    If a DIO subdevice has more than 32 channels, its 'insn_bits' handler is
    supposed to take account of the base channel from
    `CR_CHAN(insn->chanspec)`.  (The comedi core will adjust the base
    channel to 0 and shift the mask and data to compensate if the subdevice
    has less than or equal to 32 channels.)  The "comedi_bond" driver
    currently ignores the base channel and assumes it is 0.
    
    Replace `comedi_dio_bitfield()` in the "kcomedilib" module with
    `comedi_dio_bitfield2()` that takes account of the base channel, and
    rewrite the "comedi_bond" driver's 'insn_bits' handler
    (`bonding_dio_insn_bits()`) to take account of the base channel and use
    the new function.
    
    No other modules use `comedi_dio_bitfield()` so it is safe to replace it
    with `comedi_dio_bitfield2()`.  The name follows that of the equivalent
    function in the user-space comedilib.  If the base channel is non-zero
    and the subdevice has less than or equal to 32 channels it needs to
    adjust things in the same way as the comedi core (same as `parse_insn()`
    in "comedi_fops.c") due to most drivers ignoring the base channel.
    
    Signed-off-by: Ian Abbott <abbotti@mev.co.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/kcomedilib/kcomedilib_main.c b/drivers/staging/comedi/kcomedilib/kcomedilib_main.c
index c7e809b35fd2..cd60677a3ed2 100644
--- a/drivers/staging/comedi/kcomedilib/kcomedilib_main.c
+++ b/drivers/staging/comedi/kcomedilib/kcomedilib_main.c
@@ -159,28 +159,53 @@ int comedi_dio_config(struct comedi_device *dev, unsigned int subdev,
 }
 EXPORT_SYMBOL_GPL(comedi_dio_config);
 
-int comedi_dio_bitfield(struct comedi_device *dev, unsigned int subdev,
-			unsigned int mask, unsigned int *bits)
+int comedi_dio_bitfield2(struct comedi_device *dev, unsigned int subdev,
+			 unsigned int mask, unsigned int *bits,
+			 unsigned int base_channel)
 {
 	struct comedi_insn insn;
 	unsigned int data[2];
+	unsigned int n_chan;
+	unsigned int shift;
 	int ret;
 
+	if (subdev >= dev->n_subdevices)
+		return -EINVAL;
+
+	base_channel = CR_CHAN(base_channel);
+	n_chan = comedi_get_n_channels(dev, subdev);
+	if (base_channel >= n_chan)
+		return -EINVAL;
+
 	memset(&insn, 0, sizeof(insn));
 	insn.insn = INSN_BITS;
+	insn.chanspec = base_channel;
 	insn.n = 2;
 	insn.subdev = subdev;
 
 	data[0] = mask;
 	data[1] = *bits;
 
-	ret = comedi_do_insn(dev, &insn, data);
-
-	*bits = data[1];
+	/*
+	 * Most drivers ignore the base channel in insn->chanspec.
+	 * Fix this here if the subdevice has <= 32 channels.
+	 */
+	if (n_chan <= 32) {
+		shift = base_channel;
+		if (shift) {
+			insn.chanspec = 0;
+			data[0] <<= shift;
+			data[1] <<= shift;
+		}
+	} else {
+		shift = 0;
+	}
 
+	ret = comedi_do_insn(dev, &insn, data);
+	*bits = data[1] >> shift;
 	return ret;
 }
-EXPORT_SYMBOL_GPL(comedi_dio_bitfield);
+EXPORT_SYMBOL_GPL(comedi_dio_bitfield2);
 
 int comedi_find_subdevice_by_type(struct comedi_device *dev, int type,
 				  unsigned int subd)

commit 16d2d3cbb353406956267283425d8fcae873c948
Author: Ian Abbott <abbotti@mev.co.uk>
Date:   Fri Aug 23 14:45:07 2013 +0100

    staging: comedi: comedi_bond: get INSN_CONFIG_DIO_QUERY info from horse's mouth
    
    The DIO subdevice of the "comedi_bond" device attempts to remember the
    directions of DIO channels itself in the `io_bits` member of the
    subdevice, but that is only large enough for the first 32 channels and
    it might not be accurate anyway as changing the direction of one channel
    may have affected a whole group of channels and we have no idea of the
    initial directions before the "bonded" device was linked to the the
    "comedi_bond" device.  It would be better to ask the bonded device for
    this information when handling a `INSN_CONFIG_DIO_QUERY` configuration
    instruction.  Add new function `comedi_dio_get_config()` to the
    "kcomedilib" module to allow us to get the DIO direction of a channel
    and use it.
    
    Signed-off-by: Ian Abbott <abbotti@mev.co.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/kcomedilib/kcomedilib_main.c b/drivers/staging/comedi/kcomedilib/kcomedilib_main.c
index 066083c1bceb..c7e809b35fd2 100644
--- a/drivers/staging/comedi/kcomedilib/kcomedilib_main.c
+++ b/drivers/staging/comedi/kcomedilib/kcomedilib_main.c
@@ -123,6 +123,27 @@ static int comedi_do_insn(struct comedi_device *dev,
 	return ret;
 }
 
+int comedi_dio_get_config(struct comedi_device *dev, unsigned int subdev,
+			  unsigned int chan, unsigned int *io)
+{
+	struct comedi_insn insn;
+	unsigned int data[2];
+	int ret;
+
+	memset(&insn, 0, sizeof(insn));
+	insn.insn = INSN_CONFIG;
+	insn.n = 2;
+	insn.subdev = subdev;
+	insn.chanspec = CR_PACK(chan, 0, 0);
+	data[0] = INSN_CONFIG_DIO_QUERY;
+	data[1] = 0;
+	ret = comedi_do_insn(dev, &insn, data);
+	if (ret >= 0)
+		*io = data[1];
+	return ret;
+}
+EXPORT_SYMBOL_GPL(comedi_dio_get_config);
+
 int comedi_dio_config(struct comedi_device *dev, unsigned int subdev,
 		      unsigned int chan, unsigned int io)
 {

commit d92fef8d2552ffde42b6092cb467f3021ebf8b98
Author: H Hartley Sweeten <hsweeten@visionengravers.com>
Date:   Mon Jun 24 17:05:31 2013 -0700

    staging: comedi: do not include <linux/delay.h> if its not needed
    
    Some of the comedi files include this header but don't need it.
    
    Signed-off-by: H Hartley Sweeten <hsweeten@visionengravers.com>
    Cc: Ian Abbott <abbotti@mev.co.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/kcomedilib/kcomedilib_main.c b/drivers/staging/comedi/kcomedilib/kcomedilib_main.c
index cb3d3260a65e..066083c1bceb 100644
--- a/drivers/staging/comedi/kcomedilib/kcomedilib_main.c
+++ b/drivers/staging/comedi/kcomedilib/kcomedilib_main.c
@@ -22,7 +22,6 @@
 #include <linux/kernel.h>
 #include <linux/sched.h>
 #include <linux/fcntl.h>
-#include <linux/delay.h>
 #include <linux/mm.h>
 #include <linux/io.h>
 

commit 8e6b7915a1da703617dca28c33e150141fcec9b0
Author: H Hartley Sweeten <hsweeten@visionengravers.com>
Date:   Mon Jun 24 17:05:07 2013 -0700

    staging: comedi: drivers do not need <linux/ioport.h>
    
    All the ioport resources are managed by the comedi core. None of
    the drivers depend on <linux/ioport.h>. Remove the includes.
    
    Signed-off-by: H Hartley Sweeten <hsweeten@visionengravers.com>
    Cc: Ian Abbott <abbotti@mev.co.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/kcomedilib/kcomedilib_main.c b/drivers/staging/comedi/kcomedilib/kcomedilib_main.c
index da8988c6bf50..cb3d3260a65e 100644
--- a/drivers/staging/comedi/kcomedilib/kcomedilib_main.c
+++ b/drivers/staging/comedi/kcomedilib/kcomedilib_main.c
@@ -23,7 +23,6 @@
 #include <linux/sched.h>
 #include <linux/fcntl.h>
 #include <linux/delay.h>
-#include <linux/ioport.h>
 #include <linux/mm.h>
 #include <linux/io.h>
 

commit 641f064e5df6fb3aaeb6256031a153a5efb16ca6
Author: H Hartley Sweeten <hsweeten@visionengravers.com>
Date:   Wed Apr 24 18:13:24 2013 -0700

    staging: comedi: remove FSF address from boilerplate text
    
    Addresses change...
    
    Remove the paragraph with the FSF address from all the comedi source
    files.
    
    Also, remove the paragraph about the finding the complete GPL in the
    COPYING file since it's unnecessary.
    
    Signed-off-by: H Hartley Sweeten <hsweeten@visionengravers.com>
    Cc: Ian Abbott <abbotti@mev.co.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/kcomedilib/kcomedilib_main.c b/drivers/staging/comedi/kcomedilib/kcomedilib_main.c
index 3231a483f561..da8988c6bf50 100644
--- a/drivers/staging/comedi/kcomedilib/kcomedilib_main.c
+++ b/drivers/staging/comedi/kcomedilib/kcomedilib_main.c
@@ -14,11 +14,6 @@
     but WITHOUT ANY WARRANTY; without even the implied warranty of
     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
     GNU General Public License for more details.
-
-    You should have received a copy of the GNU General Public License
-    along with this program; if not, write to the Free Software
-    Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
-
 */
 
 #include <linux/module.h>

commit 5660e7427113eff85ae712af9cf98c8c5bd368e3
Author: H Hartley Sweeten <hsweeten@visionengravers.com>
Date:   Fri Apr 12 10:11:54 2013 -0700

    staging: comedi: use EXPORT_SYMBOL_GPL() for all exported symbols
    
    Comedi is licensed under GPL. Some if its exports are currently
    EXPORT_SYMBOL() and others are EXPORT_SYMBOL_GPL(). Change them all
    to EXPORT_SYMBOL_GPL() and see if anyone reports any fall out.
    
    If any of the symbols "need" to be EXPORT_SYMBOL() they will be
    addressed as needed.
    
    Signed-off-by: H Hartley Sweeten <hsweeten@visionengravers.com>
    Cc: Ian Abbott <abbotti@mev.co.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/kcomedilib/kcomedilib_main.c b/drivers/staging/comedi/kcomedilib/kcomedilib_main.c
index 8932a510d96c..3231a483f561 100644
--- a/drivers/staging/comedi/kcomedilib/kcomedilib_main.c
+++ b/drivers/staging/comedi/kcomedilib/kcomedilib_main.c
@@ -63,7 +63,7 @@ struct comedi_device *comedi_open(const char *filename)
 
 	return dev;
 }
-EXPORT_SYMBOL(comedi_open);
+EXPORT_SYMBOL_GPL(comedi_open);
 
 int comedi_close(struct comedi_device *d)
 {
@@ -73,7 +73,7 @@ int comedi_close(struct comedi_device *d)
 
 	return 0;
 }
-EXPORT_SYMBOL(comedi_close);
+EXPORT_SYMBOL_GPL(comedi_close);
 
 static int comedi_do_insn(struct comedi_device *dev,
 			  struct comedi_insn *insn,
@@ -143,7 +143,7 @@ int comedi_dio_config(struct comedi_device *dev, unsigned int subdev,
 
 	return comedi_do_insn(dev, &insn, &io);
 }
-EXPORT_SYMBOL(comedi_dio_config);
+EXPORT_SYMBOL_GPL(comedi_dio_config);
 
 int comedi_dio_bitfield(struct comedi_device *dev, unsigned int subdev,
 			unsigned int mask, unsigned int *bits)
@@ -166,7 +166,7 @@ int comedi_dio_bitfield(struct comedi_device *dev, unsigned int subdev,
 
 	return ret;
 }
-EXPORT_SYMBOL(comedi_dio_bitfield);
+EXPORT_SYMBOL_GPL(comedi_dio_bitfield);
 
 int comedi_find_subdevice_by_type(struct comedi_device *dev, int type,
 				  unsigned int subd)
@@ -183,7 +183,7 @@ int comedi_find_subdevice_by_type(struct comedi_device *dev, int type,
 	}
 	return -1;
 }
-EXPORT_SYMBOL(comedi_find_subdevice_by_type);
+EXPORT_SYMBOL_GPL(comedi_find_subdevice_by_type);
 
 int comedi_get_n_channels(struct comedi_device *dev, unsigned int subdevice)
 {
@@ -191,4 +191,4 @@ int comedi_get_n_channels(struct comedi_device *dev, unsigned int subdevice)
 
 	return s->n_chan;
 }
-EXPORT_SYMBOL(comedi_get_n_channels);
+EXPORT_SYMBOL_GPL(comedi_get_n_channels);

commit 4da5fa9a439fda3019585aecab44462fd641b6f8
Author: H Hartley Sweeten <hsweeten@visionengravers.com>
Date:   Wed Dec 19 15:35:23 2012 -0700

    staging: comedi: use comedi_dev_from_minor()
    
    Remove the need to export comedi_get_device_file_info() by using the
    new helper comedi_dev_from_minor(). This will also allow us to make
    the comedi_device_file_info struct private.
    
    Signed-off-by: H Hartley Sweeten <hsweeten@visionengravers.com>
    Cc: Ian Abbott <abbotti@mev.co.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/kcomedilib/kcomedilib_main.c b/drivers/staging/comedi/kcomedilib/kcomedilib_main.c
index 4dc09a210883..8932a510d96c 100644
--- a/drivers/staging/comedi/kcomedilib/kcomedilib_main.c
+++ b/drivers/staging/comedi/kcomedilib/kcomedilib_main.c
@@ -42,7 +42,6 @@ MODULE_LICENSE("GPL");
 
 struct comedi_device *comedi_open(const char *filename)
 {
-	struct comedi_device_file_info *dev_file_info;
 	struct comedi_device *dev;
 	unsigned int minor;
 
@@ -54,12 +53,9 @@ struct comedi_device *comedi_open(const char *filename)
 	if (minor >= COMEDI_NUM_BOARD_MINORS)
 		return NULL;
 
-	dev_file_info = comedi_get_device_file_info(minor);
-	if (dev_file_info == NULL)
-		return NULL;
-	dev = dev_file_info->device;
+	dev = comedi_dev_from_minor(minor);
 
-	if (dev == NULL || !dev->attached)
+	if (!dev || !dev->attached)
 		return NULL;
 
 	if (!try_module_get(dev->driver->module))

commit 1b6c710e2a0f636aa038dc80dc114edf8217f5e6
Author: H Hartley Sweeten <hartleys@visionengravers.com>
Date:   Mon Nov 26 17:34:29 2012 -0700

    staging: comedi: remove unnecessary '#define __NO_VERSION__'
    
    This define is no longer required for multi-file modules.
    
    Signed-off-by: H Hartley Sweeten <hsweeten@visionengravers.com>
    Cc: Ian Abbott <abbotti@mev.co.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/kcomedilib/kcomedilib_main.c b/drivers/staging/comedi/kcomedilib/kcomedilib_main.c
index 944ba9d718d9..4dc09a210883 100644
--- a/drivers/staging/comedi/kcomedilib/kcomedilib_main.c
+++ b/drivers/staging/comedi/kcomedilib/kcomedilib_main.c
@@ -21,7 +21,6 @@
 
 */
 
-#define __NO_VERSION__
 #include <linux/module.h>
 
 #include <linux/errno.h>

commit 49e8e44bcf3832a7fbe383a6e715b85ee2c7b2e6
Author: YAMANE Toshiaki <yamanetoshi@gmail.com>
Date:   Fri Oct 5 09:07:00 2012 +0900

    staging/comedi: Use dev_ printks in kcomedilib/kcomedilib_main.c
    
    fixed below checkpatch warning.
    - WARNING: Prefer netdev_err(netdev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
    
    Signed-off-by: YAMANE Toshiaki <yamanetoshi@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/kcomedilib/kcomedilib_main.c b/drivers/staging/comedi/kcomedilib/kcomedilib_main.c
index 3f20ea55b8d0..944ba9d718d9 100644
--- a/drivers/staging/comedi/kcomedilib/kcomedilib_main.c
+++ b/drivers/staging/comedi/kcomedilib/kcomedilib_main.c
@@ -95,7 +95,8 @@ static int comedi_do_insn(struct comedi_device *dev,
 	s = &dev->subdevices[insn->subdev];
 
 	if (s->type == COMEDI_SUBD_UNUSED) {
-		printk(KERN_ERR "%d not useable subdevice\n", insn->subdev);
+		dev_err(dev->class_dev,
+			"%d not useable subdevice\n", insn->subdev);
 		ret = -EIO;
 		goto error;
 	}
@@ -104,7 +105,7 @@ static int comedi_do_insn(struct comedi_device *dev,
 
 	ret = comedi_check_chanlist(s, 1, &insn->chanspec);
 	if (ret < 0) {
-		printk(KERN_ERR "bad chanspec\n");
+		dev_err(dev->class_dev, "bad chanspec\n");
 		ret = -EINVAL;
 		goto error;
 	}

commit 1f5cc359158772304a92ee9c5682ca83416d2ba8
Author: H Hartley Sweeten <hartleys@visionengravers.com>
Date:   Wed Sep 19 17:26:53 2012 -0700

    staging: comedi: kcomedilib: fix a __user space access issue
    
    The 'data' field in struct comedi_insn is an unsigned int __user *.
    The comedi core copies this data to kernel space before passing it
    on to a drivers insn_bits/insn_config method.
    
    kcomedilib provides an interface for external kernel modules to
    use the comedi drivers. This interface creates a comedi_insn
    that is then passed to the comedi drivers insn_bits/insn_config
    method. Unfortunately, kcomedilib is using the comedi_insn 'data'
    field directly which results in some sparse warnings:
    
      warning: incorrect type in argument 4 (different address spaces)
         expected unsigned int *<noident>
         got unsigned int [noderef] <asn:1>*data
    
      warning: incorrect type in assignment (different address spaces)
         expected unsigned int [noderef] <asn:1>*[addressable] [assigned] data
         got unsigned int *<noident>
    
    Fix this by passing the kernel data directly, as a separate parameter,
    instead of trying to put in into the comedi_insn 'data' field. This is
    how the comedi core handles the data from user space.
    
    Signed-off-by: H Hartley Sweeten <hsweeten@visionengravers.com>
    Cc: Ian Abbott <abbotti@mev.co.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/kcomedilib/kcomedilib_main.c b/drivers/staging/comedi/kcomedilib/kcomedilib_main.c
index f96416d1d2f7..3f20ea55b8d0 100644
--- a/drivers/staging/comedi/kcomedilib/kcomedilib_main.c
+++ b/drivers/staging/comedi/kcomedilib/kcomedilib_main.c
@@ -80,7 +80,9 @@ int comedi_close(struct comedi_device *d)
 }
 EXPORT_SYMBOL(comedi_close);
 
-static int comedi_do_insn(struct comedi_device *dev, struct comedi_insn *insn)
+static int comedi_do_insn(struct comedi_device *dev,
+			  struct comedi_insn *insn,
+			  unsigned int *data)
 {
 	struct comedi_subdevice *s;
 	int ret = 0;
@@ -115,11 +117,11 @@ static int comedi_do_insn(struct comedi_device *dev, struct comedi_insn *insn)
 
 	switch (insn->insn) {
 	case INSN_BITS:
-		ret = s->insn_bits(dev, s, insn, insn->data);
+		ret = s->insn_bits(dev, s, insn, data);
 		break;
 	case INSN_CONFIG:
 		/* XXX should check instruction length */
-		ret = s->insn_config(dev, s, insn, insn->data);
+		ret = s->insn_config(dev, s, insn, data);
 		break;
 	default:
 		ret = -EINVAL;
@@ -140,11 +142,10 @@ int comedi_dio_config(struct comedi_device *dev, unsigned int subdev,
 	memset(&insn, 0, sizeof(insn));
 	insn.insn = INSN_CONFIG;
 	insn.n = 1;
-	insn.data = &io;
 	insn.subdev = subdev;
 	insn.chanspec = CR_PACK(chan, 0, 0);
 
-	return comedi_do_insn(dev, &insn);
+	return comedi_do_insn(dev, &insn, &io);
 }
 EXPORT_SYMBOL(comedi_dio_config);
 
@@ -158,13 +159,12 @@ int comedi_dio_bitfield(struct comedi_device *dev, unsigned int subdev,
 	memset(&insn, 0, sizeof(insn));
 	insn.insn = INSN_BITS;
 	insn.n = 2;
-	insn.data = data;
 	insn.subdev = subdev;
 
 	data[0] = mask;
 	data[1] = *bits;
 
-	ret = comedi_do_insn(dev, &insn);
+	ret = comedi_do_insn(dev, &insn, data);
 
 	*bits = data[1];
 

commit 5818e7090bb6eacb886bd2f7fc3df06e23047b29
Author: H Hartley Sweeten <hartleys@visionengravers.com>
Date:   Wed Sep 5 18:59:26 2012 -0700

    staging: comedi: kcomedilib: remove subdevice pointer math
    
    Convert the comedi_subdevice access from pointer math to array
    access.
    
    Signed-off-by: H Hartley Sweeten <hsweeten@visionengravers.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/kcomedilib/kcomedilib_main.c b/drivers/staging/comedi/kcomedilib/kcomedilib_main.c
index 0252b4408851..f96416d1d2f7 100644
--- a/drivers/staging/comedi/kcomedilib/kcomedilib_main.c
+++ b/drivers/staging/comedi/kcomedilib/kcomedilib_main.c
@@ -90,7 +90,7 @@ static int comedi_do_insn(struct comedi_device *dev, struct comedi_insn *insn)
 		ret = -EINVAL;
 		goto error;
 	}
-	s = dev->subdevices + insn->subdev;
+	s = &dev->subdevices[insn->subdev];
 
 	if (s->type == COMEDI_SUBD_UNUSED) {
 		printk(KERN_ERR "%d not useable subdevice\n", insn->subdev);
@@ -175,11 +175,14 @@ EXPORT_SYMBOL(comedi_dio_bitfield);
 int comedi_find_subdevice_by_type(struct comedi_device *dev, int type,
 				  unsigned int subd)
 {
+	struct comedi_subdevice *s;
+
 	if (subd > dev->n_subdevices)
 		return -ENODEV;
 
 	for (; subd < dev->n_subdevices; subd++) {
-		if (dev->subdevices[subd].type == type)
+		s = &dev->subdevices[subd];
+		if (s->type == type)
 			return subd;
 	}
 	return -1;
@@ -188,7 +191,7 @@ EXPORT_SYMBOL(comedi_find_subdevice_by_type);
 
 int comedi_get_n_channels(struct comedi_device *dev, unsigned int subdevice)
 {
-	struct comedi_subdevice *s = dev->subdevices + subdevice;
+	struct comedi_subdevice *s = &dev->subdevices[subdevice];
 
 	return s->n_chan;
 }

commit 2312202c4ac3590da9dcf33337e6f0a14f78d124
Author: Gustavo Silva <silvagustavosilva@gmail.com>
Date:   Sun Jun 27 12:40:31 2010 -0500

    Staging: comedi: kcomedilib: fix coding style issues in kcomedilib_main.c
    
    This is a patch to the kcomedilib_main.c file that fixes up some printk() warning issues.
    
    Signed-off-by: Gustavo Silva <silvagustavo@users.sourceforge.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>

diff --git a/drivers/staging/comedi/kcomedilib/kcomedilib_main.c b/drivers/staging/comedi/kcomedilib/kcomedilib_main.c
index 863aae40edeb..0252b4408851 100644
--- a/drivers/staging/comedi/kcomedilib/kcomedilib_main.c
+++ b/drivers/staging/comedi/kcomedilib/kcomedilib_main.c
@@ -93,7 +93,7 @@ static int comedi_do_insn(struct comedi_device *dev, struct comedi_insn *insn)
 	s = dev->subdevices + insn->subdev;
 
 	if (s->type == COMEDI_SUBD_UNUSED) {
-		printk("%d not useable subdevice\n", insn->subdev);
+		printk(KERN_ERR "%d not useable subdevice\n", insn->subdev);
 		ret = -EIO;
 		goto error;
 	}
@@ -102,7 +102,7 @@ static int comedi_do_insn(struct comedi_device *dev, struct comedi_insn *insn)
 
 	ret = comedi_check_chanlist(s, 1, &insn->chanspec);
 	if (ret < 0) {
-		printk("bad chanspec\n");
+		printk(KERN_ERR "bad chanspec\n");
 		ret = -EINVAL;
 		goto error;
 	}

commit 472dfe77b91d8026c3ccda22c60db0e92bc27863
Author: Greg Kroah-Hartman <gregkh@suse.de>
Date:   Mon May 3 15:01:50 2010 -0700

    Staging: comedi: kcomedilib: make it typesafe
    
    If we really are passing in a struct comedi_device, then say we are,
    don't mess around with void pointers for no reason.
    
    This also fixes up the comedi_bond.c driver, which is the only
    user of the kcomedilib code.
    
    Cc: Ian Abbott <abbotti@mev.co.uk>
    Cc: Frank Mori Hess <fmhess@users.sourceforge.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>

diff --git a/drivers/staging/comedi/kcomedilib/kcomedilib_main.c b/drivers/staging/comedi/kcomedilib/kcomedilib_main.c
index fa0db41292da..863aae40edeb 100644
--- a/drivers/staging/comedi/kcomedilib/kcomedilib_main.c
+++ b/drivers/staging/comedi/kcomedilib/kcomedilib_main.c
@@ -41,7 +41,7 @@ MODULE_AUTHOR("David Schleef <ds@schleef.org>");
 MODULE_DESCRIPTION("Comedi kernel library");
 MODULE_LICENSE("GPL");
 
-void *comedi_open(const char *filename)
+struct comedi_device *comedi_open(const char *filename)
 {
 	struct comedi_device_file_info *dev_file_info;
 	struct comedi_device *dev;
@@ -66,11 +66,11 @@ void *comedi_open(const char *filename)
 	if (!try_module_get(dev->driver->module))
 		return NULL;
 
-	return (void *)dev;
+	return dev;
 }
 EXPORT_SYMBOL(comedi_open);
 
-int comedi_close(void *d)
+int comedi_close(struct comedi_device *d)
 {
 	struct comedi_device *dev = (struct comedi_device *)d;
 
@@ -132,8 +132,8 @@ static int comedi_do_insn(struct comedi_device *dev, struct comedi_insn *insn)
 	return ret;
 }
 
-int comedi_dio_config(void *dev, unsigned int subdev, unsigned int chan,
-		      unsigned int io)
+int comedi_dio_config(struct comedi_device *dev, unsigned int subdev,
+		      unsigned int chan, unsigned int io)
 {
 	struct comedi_insn insn;
 
@@ -148,8 +148,8 @@ int comedi_dio_config(void *dev, unsigned int subdev, unsigned int chan,
 }
 EXPORT_SYMBOL(comedi_dio_config);
 
-int comedi_dio_bitfield(void *dev, unsigned int subdev, unsigned int mask,
-			unsigned int *bits)
+int comedi_dio_bitfield(struct comedi_device *dev, unsigned int subdev,
+			unsigned int mask, unsigned int *bits)
 {
 	struct comedi_insn insn;
 	unsigned int data[2];
@@ -172,10 +172,9 @@ int comedi_dio_bitfield(void *dev, unsigned int subdev, unsigned int mask,
 }
 EXPORT_SYMBOL(comedi_dio_bitfield);
 
-int comedi_find_subdevice_by_type(void *d, int type, unsigned int subd)
+int comedi_find_subdevice_by_type(struct comedi_device *dev, int type,
+				  unsigned int subd)
 {
-	struct comedi_device *dev = (struct comedi_device *)d;
-
 	if (subd > dev->n_subdevices)
 		return -ENODEV;
 
@@ -187,9 +186,8 @@ int comedi_find_subdevice_by_type(void *d, int type, unsigned int subd)
 }
 EXPORT_SYMBOL(comedi_find_subdevice_by_type);
 
-int comedi_get_n_channels(void *d, unsigned int subdevice)
+int comedi_get_n_channels(struct comedi_device *dev, unsigned int subdevice)
 {
-	struct comedi_device *dev = (struct comedi_device *)d;
 	struct comedi_subdevice *s = dev->subdevices + subdevice;
 
 	return s->n_chan;

commit 3781bc5425f985c2ceffa3b2111e1d0eeb38cc24
Author: Greg Kroah-Hartman <gregkh@suse.de>
Date:   Mon May 3 14:54:34 2010 -0700

    Staging: comedi: kcomedilib: simplify comedi_do_insn()
    
    Now that we know we are only making 2 different types of instructions,
    only handle those two types.
    
    Also make the call a bit more typesafe by passing the correct pointer
    type.
    
    Cc: Ian Abbott <abbotti@mev.co.uk>
    Cc: Frank Mori Hess <fmhess@users.sourceforge.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>

diff --git a/drivers/staging/comedi/kcomedilib/kcomedilib_main.c b/drivers/staging/comedi/kcomedilib/kcomedilib_main.c
index d27de93ff4dd..fa0db41292da 100644
--- a/drivers/staging/comedi/kcomedilib/kcomedilib_main.c
+++ b/drivers/staging/comedi/kcomedilib/kcomedilib_main.c
@@ -80,127 +80,53 @@ int comedi_close(void *d)
 }
 EXPORT_SYMBOL(comedi_close);
 
-/*
- *	COMEDI_INSN
- *	perform an instruction
- */
-static int comedi_do_insn(void *d, struct comedi_insn *insn)
+static int comedi_do_insn(struct comedi_device *dev, struct comedi_insn *insn)
 {
-	struct comedi_device *dev = (struct comedi_device *)d;
 	struct comedi_subdevice *s;
 	int ret = 0;
 
-	if (insn->insn & INSN_MASK_SPECIAL) {
-		switch (insn->insn) {
-		case INSN_GTOD:
-			{
-				struct timeval tv;
-
-				do_gettimeofday(&tv);
-				insn->data[0] = tv.tv_sec;
-				insn->data[1] = tv.tv_usec;
-				ret = 2;
-
-				break;
-			}
-		case INSN_WAIT:
-			/* XXX isn't the value supposed to be nanosecs? */
-			if (insn->n != 1 || insn->data[0] >= 100) {
-				ret = -EINVAL;
-				break;
-			}
-			udelay(insn->data[0]);
-			ret = 1;
-			break;
-		case INSN_INTTRIG:
-			if (insn->n != 1) {
-				ret = -EINVAL;
-				break;
-			}
-			if (insn->subdev >= dev->n_subdevices) {
-				printk("%d not usable subdevice\n",
-				       insn->subdev);
-				ret = -EINVAL;
-				break;
-			}
-			s = dev->subdevices + insn->subdev;
-			if (!s->async) {
-				printk("no async\n");
-				ret = -EINVAL;
-				break;
-			}
-			if (!s->async->inttrig) {
-				printk("no inttrig\n");
-				ret = -EAGAIN;
-				break;
-			}
-			ret = s->async->inttrig(dev, s, insn->data[0]);
-			if (ret >= 0)
-				ret = 1;
-			break;
-		default:
-			ret = -EINVAL;
-		}
-	} else {
-		/* a subdevice instruction */
-		if (insn->subdev >= dev->n_subdevices) {
-			ret = -EINVAL;
-			goto error;
-		}
-		s = dev->subdevices + insn->subdev;
-
-		if (s->type == COMEDI_SUBD_UNUSED) {
-			printk("%d not useable subdevice\n", insn->subdev);
-			ret = -EIO;
-			goto error;
-		}
-
-		/* XXX check lock */
-
-		ret = comedi_check_chanlist(s, 1, &insn->chanspec);
-		if (ret < 0) {
-			printk("bad chanspec\n");
-			ret = -EINVAL;
-			goto error;
-		}
-
-		if (s->busy) {
-			ret = -EBUSY;
-			goto error;
-		}
-		s->busy = d;
-
-		switch (insn->insn) {
-		case INSN_READ:
-			ret = s->insn_read(dev, s, insn, insn->data);
-			break;
-		case INSN_WRITE:
-			ret = s->insn_write(dev, s, insn, insn->data);
-			break;
-		case INSN_BITS:
-			ret = s->insn_bits(dev, s, insn, insn->data);
-			break;
-		case INSN_CONFIG:
-			/* XXX should check instruction length */
-			ret = s->insn_config(dev, s, insn, insn->data);
-			break;
-		default:
-			ret = -EINVAL;
-			break;
-		}
-
-		s->busy = NULL;
+	/* a subdevice instruction */
+	if (insn->subdev >= dev->n_subdevices) {
+		ret = -EINVAL;
+		goto error;
 	}
-	if (ret < 0)
+	s = dev->subdevices + insn->subdev;
+
+	if (s->type == COMEDI_SUBD_UNUSED) {
+		printk("%d not useable subdevice\n", insn->subdev);
+		ret = -EIO;
 		goto error;
-#if 0
-	/* XXX do we want this? -- abbotti #if'ed it out for now. */
-	if (ret != insn->n) {
-		printk("BUG: result of insn != insn.n\n");
+	}
+
+	/* XXX check lock */
+
+	ret = comedi_check_chanlist(s, 1, &insn->chanspec);
+	if (ret < 0) {
+		printk("bad chanspec\n");
 		ret = -EINVAL;
 		goto error;
 	}
-#endif
+
+	if (s->busy) {
+		ret = -EBUSY;
+		goto error;
+	}
+	s->busy = dev;
+
+	switch (insn->insn) {
+	case INSN_BITS:
+		ret = s->insn_bits(dev, s, insn, insn->data);
+		break;
+	case INSN_CONFIG:
+		/* XXX should check instruction length */
+		ret = s->insn_config(dev, s, insn, insn->data);
+		break;
+	default:
+		ret = -EINVAL;
+		break;
+	}
+
+	s->busy = NULL;
 error:
 
 	return ret;

commit 88cccef0193a7f8c6a73326404c0b2f9ad27f71a
Author: Greg Kroah-Hartman <gregkh@suse.de>
Date:   Mon May 3 14:49:54 2010 -0700

    Staging: comedi: kcomedilib: comedi_do_insn is now static
    
    No one else calls this function, so mark it static.
    Now we can strip out the unneeded functionality in here as well.
    
    Cc: Ian Abbott <abbotti@mev.co.uk>
    Cc: Frank Mori Hess <fmhess@users.sourceforge.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>

diff --git a/drivers/staging/comedi/kcomedilib/kcomedilib_main.c b/drivers/staging/comedi/kcomedilib/kcomedilib_main.c
index 7cb29f2bc862..d27de93ff4dd 100644
--- a/drivers/staging/comedi/kcomedilib/kcomedilib_main.c
+++ b/drivers/staging/comedi/kcomedilib/kcomedilib_main.c
@@ -84,7 +84,7 @@ EXPORT_SYMBOL(comedi_close);
  *	COMEDI_INSN
  *	perform an instruction
  */
-int comedi_do_insn(void *d, struct comedi_insn *insn)
+static int comedi_do_insn(void *d, struct comedi_insn *insn)
 {
 	struct comedi_device *dev = (struct comedi_device *)d;
 	struct comedi_subdevice *s;

commit a1525758c848aedf590bba3a919321e2d80fcd6e
Author: Greg Kroah-Hartman <gregkh@suse.de>
Date:   Mon May 3 14:44:55 2010 -0700

    Staging: comedi: kcomedilib: delete dio.c and get.c
    
    Merge these two files into kcomedilib_main.c as they are tiny.
    
    This will also let us get rid of another global symbol in the future.
    
    Cc: Ian Abbott <abbotti@mev.co.uk>
    Cc: Frank Mori Hess <fmhess@users.sourceforge.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>

diff --git a/drivers/staging/comedi/kcomedilib/kcomedilib_main.c b/drivers/staging/comedi/kcomedilib/kcomedilib_main.c
index addfcd5a7a7f..7cb29f2bc862 100644
--- a/drivers/staging/comedi/kcomedilib/kcomedilib_main.c
+++ b/drivers/staging/comedi/kcomedilib/kcomedilib_main.c
@@ -206,3 +206,66 @@ int comedi_do_insn(void *d, struct comedi_insn *insn)
 	return ret;
 }
 
+int comedi_dio_config(void *dev, unsigned int subdev, unsigned int chan,
+		      unsigned int io)
+{
+	struct comedi_insn insn;
+
+	memset(&insn, 0, sizeof(insn));
+	insn.insn = INSN_CONFIG;
+	insn.n = 1;
+	insn.data = &io;
+	insn.subdev = subdev;
+	insn.chanspec = CR_PACK(chan, 0, 0);
+
+	return comedi_do_insn(dev, &insn);
+}
+EXPORT_SYMBOL(comedi_dio_config);
+
+int comedi_dio_bitfield(void *dev, unsigned int subdev, unsigned int mask,
+			unsigned int *bits)
+{
+	struct comedi_insn insn;
+	unsigned int data[2];
+	int ret;
+
+	memset(&insn, 0, sizeof(insn));
+	insn.insn = INSN_BITS;
+	insn.n = 2;
+	insn.data = data;
+	insn.subdev = subdev;
+
+	data[0] = mask;
+	data[1] = *bits;
+
+	ret = comedi_do_insn(dev, &insn);
+
+	*bits = data[1];
+
+	return ret;
+}
+EXPORT_SYMBOL(comedi_dio_bitfield);
+
+int comedi_find_subdevice_by_type(void *d, int type, unsigned int subd)
+{
+	struct comedi_device *dev = (struct comedi_device *)d;
+
+	if (subd > dev->n_subdevices)
+		return -ENODEV;
+
+	for (; subd < dev->n_subdevices; subd++) {
+		if (dev->subdevices[subd].type == type)
+			return subd;
+	}
+	return -1;
+}
+EXPORT_SYMBOL(comedi_find_subdevice_by_type);
+
+int comedi_get_n_channels(void *d, unsigned int subdevice)
+{
+	struct comedi_device *dev = (struct comedi_device *)d;
+	struct comedi_subdevice *s = dev->subdevices + subdevice;
+
+	return s->n_chan;
+}
+EXPORT_SYMBOL(comedi_get_n_channels);

commit 6b18af18d2c48c07864cf38b5475a0f4d1913bc4
Author: Greg Kroah-Hartman <gregkh@suse.de>
Date:   Mon May 3 14:41:28 2010 -0700

    Staging: comedi: kcomedilib: kcomedilib_main.c: remove unused functions
    
    Remove the unused functions from the kcomedilib_main.c file as they are
    not needed.
    
    Cc: Ian Abbott <abbotti@mev.co.uk>
    Cc: Frank Mori Hess <fmhess@users.sourceforge.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>

diff --git a/drivers/staging/comedi/kcomedilib/kcomedilib_main.c b/drivers/staging/comedi/kcomedilib/kcomedilib_main.c
index 32c7bbb8d78a..addfcd5a7a7f 100644
--- a/drivers/staging/comedi/kcomedilib/kcomedilib_main.c
+++ b/drivers/staging/comedi/kcomedilib/kcomedilib_main.c
@@ -70,25 +70,6 @@ void *comedi_open(const char *filename)
 }
 EXPORT_SYMBOL(comedi_open);
 
-void *comedi_open_old(unsigned int minor)
-{
-	struct comedi_device_file_info *dev_file_info;
-	struct comedi_device *dev;
-
-	if (minor >= COMEDI_NUM_MINORS)
-		return NULL;
-
-	dev_file_info = comedi_get_device_file_info(minor);
-	if (dev_file_info == NULL)
-		return NULL;
-	dev = dev_file_info->device;
-
-	if (dev == NULL || !dev->attached)
-		return NULL;
-
-	return (void *)dev;
-}
-
 int comedi_close(void *d)
 {
 	struct comedi_device *dev = (struct comedi_device *)d;
@@ -99,83 +80,6 @@ int comedi_close(void *d)
 }
 EXPORT_SYMBOL(comedi_close);
 
-int comedi_loglevel(int newlevel)
-{
-	return 0;
-}
-
-void comedi_perror(const char *message)
-{
-	printk(KERN_ERR "%s: unknown error\n", message);
-}
-
-char *comedi_strerror(int err)
-{
-	return "unknown error";
-}
-
-int comedi_fileno(void *d)
-{
-	struct comedi_device *dev = (struct comedi_device *)d;
-
-	/* return something random */
-	return dev->minor;
-}
-
-int comedi_command(void *d, struct comedi_cmd *cmd)
-{
-	struct comedi_device *dev = (struct comedi_device *)d;
-	struct comedi_subdevice *s;
-	struct comedi_async *async;
-	unsigned runflags;
-
-	if (cmd->subdev >= dev->n_subdevices)
-		return -ENODEV;
-
-	s = dev->subdevices + cmd->subdev;
-	if (s->type == COMEDI_SUBD_UNUSED)
-		return -EIO;
-
-	async = s->async;
-	if (async == NULL)
-		return -ENODEV;
-
-	if (s->busy)
-		return -EBUSY;
-	s->busy = d;
-
-	if (async->cb_mask & COMEDI_CB_EOS)
-		cmd->flags |= TRIG_WAKE_EOS;
-
-	async->cmd = *cmd;
-
-	runflags = SRF_RUNNING;
-
-	comedi_set_subdevice_runflags(s, ~0, runflags);
-
-	comedi_reset_async_buf(async);
-
-	return s->do_cmd(dev, s);
-}
-
-int comedi_command_test(void *d, struct comedi_cmd *cmd)
-{
-	struct comedi_device *dev = (struct comedi_device *)d;
-	struct comedi_subdevice *s;
-
-	if (cmd->subdev >= dev->n_subdevices)
-		return -ENODEV;
-
-	s = dev->subdevices + cmd->subdev;
-	if (s->type == COMEDI_SUBD_UNUSED)
-		return -EIO;
-
-	if (s->async == NULL)
-		return -ENODEV;
-
-	return s->do_cmdtest(dev, s, cmd);
-}
-
 /*
  *	COMEDI_INSN
  *	perform an instruction
@@ -302,261 +206,3 @@ int comedi_do_insn(void *d, struct comedi_insn *insn)
 	return ret;
 }
 
-/*
-	COMEDI_LOCK
-	lock subdevice
-
-	arg:
-		subdevice number
-
-	reads:
-		none
-
-	writes:
-		none
-
-	necessary locking:
-	- ioctl/rt lock  (this type)
-	- lock while subdevice busy
-	- lock while subdevice being programmed
-
-*/
-int comedi_lock(void *d, unsigned int subdevice)
-{
-	struct comedi_device *dev = (struct comedi_device *)d;
-	struct comedi_subdevice *s;
-	unsigned long flags;
-	int ret = 0;
-
-	if (subdevice >= dev->n_subdevices)
-		return -EINVAL;
-
-	s = dev->subdevices + subdevice;
-
-	spin_lock_irqsave(&s->spin_lock, flags);
-
-	if (s->busy) {
-		ret = -EBUSY;
-	} else {
-		if (s->lock) {
-			ret = -EBUSY;
-		} else {
-			s->lock = d;
-		}
-	}
-
-	spin_unlock_irqrestore(&s->spin_lock, flags);
-
-	return ret;
-}
-
-/*
-	COMEDI_UNLOCK
-	unlock subdevice
-
-	arg:
-		subdevice number
-
-	reads:
-		none
-
-	writes:
-		none
-
-*/
-int comedi_unlock(void *d, unsigned int subdevice)
-{
-	struct comedi_device *dev = (struct comedi_device *)d;
-	struct comedi_subdevice *s;
-	unsigned long flags;
-	struct comedi_async *async;
-	int ret;
-
-	if (subdevice >= dev->n_subdevices)
-		return -EINVAL;
-
-	s = dev->subdevices + subdevice;
-
-	async = s->async;
-
-	spin_lock_irqsave(&s->spin_lock, flags);
-
-	if (s->busy) {
-		ret = -EBUSY;
-	} else if (s->lock && s->lock != (void *)d) {
-		ret = -EACCES;
-	} else {
-		s->lock = NULL;
-
-		if (async) {
-			async->cb_mask = 0;
-			async->cb_func = NULL;
-			async->cb_arg = NULL;
-		}
-
-		ret = 0;
-	}
-
-	spin_unlock_irqrestore(&s->spin_lock, flags);
-
-	return ret;
-}
-
-/*
-	COMEDI_CANCEL
-	cancel acquisition ioctl
-
-	arg:
-		subdevice number
-
-	reads:
-		nothing
-
-	writes:
-		nothing
-
-*/
-int comedi_cancel(void *d, unsigned int subdevice)
-{
-	struct comedi_device *dev = (struct comedi_device *)d;
-	struct comedi_subdevice *s;
-	int ret = 0;
-
-	if (subdevice >= dev->n_subdevices)
-		return -EINVAL;
-
-	s = dev->subdevices + subdevice;
-
-	if (s->lock && s->lock != d)
-		return -EACCES;
-
-#if 0
-	if (!s->busy)
-		return 0;
-
-	if (s->busy != d)
-		return -EBUSY;
-#endif
-
-	if (!s->cancel || !s->async)
-		return -EINVAL;
-
-	ret = s->cancel(dev, s);
-
-	if (ret)
-		return ret;
-
-	comedi_set_subdevice_runflags(s, SRF_RUNNING | SRF_RT, 0);
-	s->async->inttrig = NULL;
-	s->busy = NULL;
-
-	return 0;
-}
-
-/*
-   registration of callback functions
- */
-int comedi_register_callback(void *d, unsigned int subdevice,
-			     unsigned int mask, int (*cb) (unsigned int,
-							   void *), void *arg)
-{
-	struct comedi_device *dev = (struct comedi_device *)d;
-	struct comedi_subdevice *s;
-	struct comedi_async *async;
-
-	if (subdevice >= dev->n_subdevices)
-		return -EINVAL;
-
-	s = dev->subdevices + subdevice;
-
-	async = s->async;
-	if (s->type == COMEDI_SUBD_UNUSED || !async)
-		return -EIO;
-
-	/* are we locked? (ioctl lock) */
-	if (s->lock && s->lock != d)
-		return -EACCES;
-
-	/* are we busy? */
-	if (s->busy)
-		return -EBUSY;
-
-	if (!mask) {
-		async->cb_mask = 0;
-		async->cb_func = NULL;
-		async->cb_arg = NULL;
-	} else {
-		async->cb_mask = mask;
-		async->cb_func = cb;
-		async->cb_arg = arg;
-	}
-
-	return 0;
-}
-
-int comedi_poll(void *d, unsigned int subdevice)
-{
-	struct comedi_device *dev = (struct comedi_device *)d;
-	struct comedi_subdevice *s = dev->subdevices;
-	struct comedi_async *async;
-
-	if (subdevice >= dev->n_subdevices)
-		return -EINVAL;
-
-	s = dev->subdevices + subdevice;
-
-	async = s->async;
-	if (s->type == COMEDI_SUBD_UNUSED || !async)
-		return -EIO;
-
-	/* are we locked? (ioctl lock) */
-	if (s->lock && s->lock != d)
-		return -EACCES;
-
-	/* are we running? XXX wrong? */
-	if (!s->busy)
-		return -EIO;
-
-	return s->poll(dev, s);
-}
-
-/* WARNING: not portable */
-int comedi_map(void *d, unsigned int subdevice, void *ptr)
-{
-	struct comedi_device *dev = (struct comedi_device *)d;
-	struct comedi_subdevice *s;
-
-	if (subdevice >= dev->n_subdevices)
-		return -EINVAL;
-
-	s = dev->subdevices + subdevice;
-
-	if (!s->async)
-		return -EINVAL;
-
-	if (ptr)
-		*((void **)ptr) = s->async->prealloc_buf;
-
-	/* XXX no reference counting */
-
-	return 0;
-}
-
-/* WARNING: not portable */
-int comedi_unmap(void *d, unsigned int subdevice)
-{
-	struct comedi_device *dev = (struct comedi_device *)d;
-	struct comedi_subdevice *s;
-
-	if (subdevice >= dev->n_subdevices)
-		return -EINVAL;
-
-	s = dev->subdevices + subdevice;
-
-	if (!s->async)
-		return -EINVAL;
-
-	/* XXX no reference counting */
-
-	return 0;
-}

commit 7382e5711f3adc934227473f82156ae1e2d7e562
Author: Greg Kroah-Hartman <gregkh@suse.de>
Date:   Sat May 1 13:08:06 2010 -0700

    Staging: comedi: kcomedilib: remove ksyms.c file
    
    Move only the exports that we actually use into the individual
    files, and delete the ksyms.c file entirely.  This will make it
    easier to start cleaning up kcomedilib (i.e. delete most of it.)
    
    Cc: Ian Abbott <abbotti@mev.co.uk>
    Cc: Frank Mori Hess <fmhess@users.sourceforge.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>

diff --git a/drivers/staging/comedi/kcomedilib/kcomedilib_main.c b/drivers/staging/comedi/kcomedilib/kcomedilib_main.c
index 2229b46e849c..32c7bbb8d78a 100644
--- a/drivers/staging/comedi/kcomedilib/kcomedilib_main.c
+++ b/drivers/staging/comedi/kcomedilib/kcomedilib_main.c
@@ -31,7 +31,7 @@
 #include <linux/delay.h>
 #include <linux/ioport.h>
 #include <linux/mm.h>
-#include <asm/io.h>
+#include <linux/io.h>
 
 #include "../comedi.h"
 #include "../comedilib.h"
@@ -68,6 +68,7 @@ void *comedi_open(const char *filename)
 
 	return (void *)dev;
 }
+EXPORT_SYMBOL(comedi_open);
 
 void *comedi_open_old(unsigned int minor)
 {
@@ -96,6 +97,7 @@ int comedi_close(void *d)
 
 	return 0;
 }
+EXPORT_SYMBOL(comedi_close);
 
 int comedi_loglevel(int newlevel)
 {
@@ -104,7 +106,7 @@ int comedi_loglevel(int newlevel)
 
 void comedi_perror(const char *message)
 {
-	printk("%s: unknown error\n", message);
+	printk(KERN_ERR "%s: unknown error\n", message);
 }
 
 char *comedi_strerror(int err)

commit 0fd0ca75fd9eb0e9cde49c28ad227c2d8d049366
Author: Greg Kroah-Hartman <gregkh@suse.de>
Date:   Sat May 1 12:33:17 2010 -0700

    Staging: comedi: rename check_chanlist to comedi_check_chanlist
    
    It's a global function, so properly name it and move the
    export to where the function is located at.
    
    Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>

diff --git a/drivers/staging/comedi/kcomedilib/kcomedilib_main.c b/drivers/staging/comedi/kcomedilib/kcomedilib_main.c
index 288fef4fcbcc..2229b46e849c 100644
--- a/drivers/staging/comedi/kcomedilib/kcomedilib_main.c
+++ b/drivers/staging/comedi/kcomedilib/kcomedilib_main.c
@@ -251,7 +251,7 @@ int comedi_do_insn(void *d, struct comedi_insn *insn)
 
 		/* XXX check lock */
 
-		ret = check_chanlist(s, 1, &insn->chanspec);
+		ret = comedi_check_chanlist(s, 1, &insn->chanspec);
 		if (ret < 0) {
 			printk("bad chanspec\n");
 			ret = -EINVAL;

commit 5a0e3ad6af8660be21ca98a971cd00f331318c05
Author: Tejun Heo <tj@kernel.org>
Date:   Wed Mar 24 17:04:11 2010 +0900

    include cleanup: Update gfp.h and slab.h includes to prepare for breaking implicit slab.h inclusion from percpu.h
    
    percpu.h is included by sched.h and module.h and thus ends up being
    included when building most .c files.  percpu.h includes slab.h which
    in turn includes gfp.h making everything defined by the two files
    universally available and complicating inclusion dependencies.
    
    percpu.h -> slab.h dependency is about to be removed.  Prepare for
    this change by updating users of gfp and slab facilities include those
    headers directly instead of assuming availability.  As this conversion
    needs to touch large number of source files, the following script is
    used as the basis of conversion.
    
      http://userweb.kernel.org/~tj/misc/slabh-sweep.py
    
    The script does the followings.
    
    * Scan files for gfp and slab usages and update includes such that
      only the necessary includes are there.  ie. if only gfp is used,
      gfp.h, if slab is used, slab.h.
    
    * When the script inserts a new include, it looks at the include
      blocks and try to put the new include such that its order conforms
      to its surrounding.  It's put in the include block which contains
      core kernel includes, in the same order that the rest are ordered -
      alphabetical, Christmas tree, rev-Xmas-tree or at the end if there
      doesn't seem to be any matching order.
    
    * If the script can't find a place to put a new include (mostly
      because the file doesn't have fitting include block), it prints out
      an error message indicating which .h file needs to be added to the
      file.
    
    The conversion was done in the following steps.
    
    1. The initial automatic conversion of all .c files updated slightly
       over 4000 files, deleting around 700 includes and adding ~480 gfp.h
       and ~3000 slab.h inclusions.  The script emitted errors for ~400
       files.
    
    2. Each error was manually checked.  Some didn't need the inclusion,
       some needed manual addition while adding it to implementation .h or
       embedding .c file was more appropriate for others.  This step added
       inclusions to around 150 files.
    
    3. The script was run again and the output was compared to the edits
       from #2 to make sure no file was left behind.
    
    4. Several build tests were done and a couple of problems were fixed.
       e.g. lib/decompress_*.c used malloc/free() wrappers around slab
       APIs requiring slab.h to be added manually.
    
    5. The script was run on all .h files but without automatically
       editing them as sprinkling gfp.h and slab.h inclusions around .h
       files could easily lead to inclusion dependency hell.  Most gfp.h
       inclusion directives were ignored as stuff from gfp.h was usually
       wildly available and often used in preprocessor macros.  Each
       slab.h inclusion directive was examined and added manually as
       necessary.
    
    6. percpu.h was updated not to include slab.h.
    
    7. Build test were done on the following configurations and failures
       were fixed.  CONFIG_GCOV_KERNEL was turned off for all tests (as my
       distributed build env didn't work with gcov compiles) and a few
       more options had to be turned off depending on archs to make things
       build (like ipr on powerpc/64 which failed due to missing writeq).
    
       * x86 and x86_64 UP and SMP allmodconfig and a custom test config.
       * powerpc and powerpc64 SMP allmodconfig
       * sparc and sparc64 SMP allmodconfig
       * ia64 SMP allmodconfig
       * s390 SMP allmodconfig
       * alpha SMP allmodconfig
       * um on x86_64 SMP allmodconfig
    
    8. percpu.h modifications were reverted so that it could be applied as
       a separate patch and serve as bisection point.
    
    Given the fact that I had only a couple of failures from tests on step
    6, I'm fairly confident about the coverage of this conversion patch.
    If there is a breakage, it's likely to be something in one of the arch
    headers which should be easily discoverable easily on most builds of
    the specific arch.
    
    Signed-off-by: Tejun Heo <tj@kernel.org>
    Guess-its-ok-by: Christoph Lameter <cl@linux-foundation.org>
    Cc: Ingo Molnar <mingo@redhat.com>
    Cc: Lee Schermerhorn <Lee.Schermerhorn@hp.com>

diff --git a/drivers/staging/comedi/kcomedilib/kcomedilib_main.c b/drivers/staging/comedi/kcomedilib/kcomedilib_main.c
index 6552ef6d8297..288fef4fcbcc 100644
--- a/drivers/staging/comedi/kcomedilib/kcomedilib_main.c
+++ b/drivers/staging/comedi/kcomedilib/kcomedilib_main.c
@@ -31,7 +31,6 @@
 #include <linux/delay.h>
 #include <linux/ioport.h>
 #include <linux/mm.h>
-#include <linux/slab.h>
 #include <asm/io.h>
 
 #include "../comedi.h"

commit 0a85b6f0ab0d2edb0d41b32697111ce0e4f43496
Author: Mithlesh Thukral <mithlesh@linsyssoft.com>
Date:   Mon Jun 8 21:04:41 2009 +0530

    Staging: Comedi: Lindent changes to comdi driver in staging tree
    
    Lindent changes to comdi driver in staging tree.
    This patch is followed by the checkpatch.pl error fixes.
    Did not make them part of this patch as the patch size is already huge.
    
    Signed-off-by: Mithlesh Thukral <mithlesh@linsyssoft.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>

diff --git a/drivers/staging/comedi/kcomedilib/kcomedilib_main.c b/drivers/staging/comedi/kcomedilib/kcomedilib_main.c
index b39ea7c50b87..6552ef6d8297 100644
--- a/drivers/staging/comedi/kcomedilib/kcomedilib_main.c
+++ b/drivers/staging/comedi/kcomedilib/kcomedilib_main.c
@@ -67,7 +67,7 @@ void *comedi_open(const char *filename)
 	if (!try_module_get(dev->driver->module))
 		return NULL;
 
-	return (void *) dev;
+	return (void *)dev;
 }
 
 void *comedi_open_old(unsigned int minor)
@@ -86,12 +86,12 @@ void *comedi_open_old(unsigned int minor)
 	if (dev == NULL || !dev->attached)
 		return NULL;
 
-	return (void *) dev;
+	return (void *)dev;
 }
 
 int comedi_close(void *d)
 {
-	struct comedi_device *dev = (struct comedi_device *) d;
+	struct comedi_device *dev = (struct comedi_device *)d;
 
 	module_put(dev->driver->module);
 
@@ -115,7 +115,7 @@ char *comedi_strerror(int err)
 
 int comedi_fileno(void *d)
 {
-	struct comedi_device *dev = (struct comedi_device *) d;
+	struct comedi_device *dev = (struct comedi_device *)d;
 
 	/* return something random */
 	return dev->minor;
@@ -123,7 +123,7 @@ int comedi_fileno(void *d)
 
 int comedi_command(void *d, struct comedi_cmd *cmd)
 {
-	struct comedi_device *dev = (struct comedi_device *) d;
+	struct comedi_device *dev = (struct comedi_device *)d;
 	struct comedi_subdevice *s;
 	struct comedi_async *async;
 	unsigned runflags;
@@ -159,7 +159,7 @@ int comedi_command(void *d, struct comedi_cmd *cmd)
 
 int comedi_command_test(void *d, struct comedi_cmd *cmd)
 {
-	struct comedi_device *dev = (struct comedi_device *) d;
+	struct comedi_device *dev = (struct comedi_device *)d;
 	struct comedi_subdevice *s;
 
 	if (cmd->subdev >= dev->n_subdevices)
@@ -181,7 +181,7 @@ int comedi_command_test(void *d, struct comedi_cmd *cmd)
  */
 int comedi_do_insn(void *d, struct comedi_insn *insn)
 {
-	struct comedi_device *dev = (struct comedi_device *) d;
+	struct comedi_device *dev = (struct comedi_device *)d;
 	struct comedi_subdevice *s;
 	int ret = 0;
 
@@ -214,7 +214,7 @@ int comedi_do_insn(void *d, struct comedi_insn *insn)
 			}
 			if (insn->subdev >= dev->n_subdevices) {
 				printk("%d not usable subdevice\n",
-					insn->subdev);
+				       insn->subdev);
 				ret = -EINVAL;
 				break;
 			}
@@ -296,7 +296,7 @@ int comedi_do_insn(void *d, struct comedi_insn *insn)
 		goto error;
 	}
 #endif
-      error:
+error:
 
 	return ret;
 }
@@ -322,7 +322,7 @@ int comedi_do_insn(void *d, struct comedi_insn *insn)
 */
 int comedi_lock(void *d, unsigned int subdevice)
 {
-	struct comedi_device *dev = (struct comedi_device *) d;
+	struct comedi_device *dev = (struct comedi_device *)d;
 	struct comedi_subdevice *s;
 	unsigned long flags;
 	int ret = 0;
@@ -365,7 +365,7 @@ int comedi_lock(void *d, unsigned int subdevice)
 */
 int comedi_unlock(void *d, unsigned int subdevice)
 {
-	struct comedi_device *dev = (struct comedi_device *) d;
+	struct comedi_device *dev = (struct comedi_device *)d;
 	struct comedi_subdevice *s;
 	unsigned long flags;
 	struct comedi_async *async;
@@ -417,7 +417,7 @@ int comedi_unlock(void *d, unsigned int subdevice)
 */
 int comedi_cancel(void *d, unsigned int subdevice)
 {
-	struct comedi_device *dev = (struct comedi_device *) d;
+	struct comedi_device *dev = (struct comedi_device *)d;
 	struct comedi_subdevice *s;
 	int ret = 0;
 
@@ -456,9 +456,10 @@ int comedi_cancel(void *d, unsigned int subdevice)
    registration of callback functions
  */
 int comedi_register_callback(void *d, unsigned int subdevice,
-	unsigned int mask, int (*cb) (unsigned int, void *), void *arg)
+			     unsigned int mask, int (*cb) (unsigned int,
+							   void *), void *arg)
 {
-	struct comedi_device *dev = (struct comedi_device *) d;
+	struct comedi_device *dev = (struct comedi_device *)d;
 	struct comedi_subdevice *s;
 	struct comedi_async *async;
 
@@ -494,7 +495,7 @@ int comedi_register_callback(void *d, unsigned int subdevice,
 
 int comedi_poll(void *d, unsigned int subdevice)
 {
-	struct comedi_device *dev = (struct comedi_device *) d;
+	struct comedi_device *dev = (struct comedi_device *)d;
 	struct comedi_subdevice *s = dev->subdevices;
 	struct comedi_async *async;
 
@@ -521,7 +522,7 @@ int comedi_poll(void *d, unsigned int subdevice)
 /* WARNING: not portable */
 int comedi_map(void *d, unsigned int subdevice, void *ptr)
 {
-	struct comedi_device *dev = (struct comedi_device *) d;
+	struct comedi_device *dev = (struct comedi_device *)d;
 	struct comedi_subdevice *s;
 
 	if (subdevice >= dev->n_subdevices)
@@ -543,7 +544,7 @@ int comedi_map(void *d, unsigned int subdevice, void *ptr)
 /* WARNING: not portable */
 int comedi_unmap(void *d, unsigned int subdevice)
 {
-	struct comedi_device *dev = (struct comedi_device *) d;
+	struct comedi_device *dev = (struct comedi_device *)d;
 	struct comedi_subdevice *s;
 
 	if (subdevice >= dev->n_subdevices)

commit 25436dc9d84f1be60ff549c9ab712bba2835f284
Author: Greg Kroah-Hartman <gregkh@suse.de>
Date:   Mon Apr 27 15:14:34 2009 -0700

    Staging: comedi: remove RT code
    
    This removes the unused RT code from the comedi subsystem.
    
    A lot of drivers needed to then include interrupt.h on their own, as they
    were picking it up through the comedi_rt.h inclusion.
    
    Cc: Ian Abbott <abbotti@mev.co.uk>
    Cc: Frank Mori Hess <fmhess@users.sourceforge.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>

diff --git a/drivers/staging/comedi/kcomedilib/kcomedilib_main.c b/drivers/staging/comedi/kcomedilib/kcomedilib_main.c
index 95f0dde8d3e6..b39ea7c50b87 100644
--- a/drivers/staging/comedi/kcomedilib/kcomedilib_main.c
+++ b/drivers/staging/comedi/kcomedilib/kcomedilib_main.c
@@ -150,10 +150,6 @@ int comedi_command(void *d, struct comedi_cmd *cmd)
 
 	runflags = SRF_RUNNING;
 
-#ifdef CONFIG_COMEDI_RT
-	if (comedi_switch_to_rt(dev) == 0)
-		runflags |= SRF_RT;
-#endif
 	comedi_set_subdevice_runflags(s, ~0, runflags);
 
 	comedi_reset_async_buf(async);
@@ -449,11 +445,6 @@ int comedi_cancel(void *d, unsigned int subdevice)
 	if (ret)
 		return ret;
 
-#ifdef CONFIG_COMEDI_RT
-	if (comedi_get_subdevice_runflags(s) & SRF_RT)
-		comedi_switch_to_non_rt(dev);
-
-#endif
 	comedi_set_subdevice_runflags(s, SRF_RUNNING | SRF_RT, 0);
 	s->async->inttrig = NULL;
 	s->busy = NULL;

commit 5f74ea14c07fee91d3bdbaad88bff6264c6200e6
Author: Greg Kroah-Hartman <gregkh@suse.de>
Date:   Mon Apr 27 14:44:31 2009 -0700

    Staging: comedi: remove comedi-specific wrappers
    
    There are a number of comedi "wrappers" for some RT functions that are
    about to go away.  This patch removes all of the wrapper calls within
    the comedi drivers and core in order to prepare for removing the RT
    comedi code.
    
    Cc: Ian Abbott <abbotti@mev.co.uk>
    Cc: Frank Mori Hess <fmhess@users.sourceforge.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>

diff --git a/drivers/staging/comedi/kcomedilib/kcomedilib_main.c b/drivers/staging/comedi/kcomedilib/kcomedilib_main.c
index a4fa9571c58f..95f0dde8d3e6 100644
--- a/drivers/staging/comedi/kcomedilib/kcomedilib_main.c
+++ b/drivers/staging/comedi/kcomedilib/kcomedilib_main.c
@@ -105,7 +105,7 @@ int comedi_loglevel(int newlevel)
 
 void comedi_perror(const char *message)
 {
-	rt_printk("%s: unknown error\n", message);
+	printk("%s: unknown error\n", message);
 }
 
 char *comedi_strerror(int err)
@@ -208,7 +208,7 @@ int comedi_do_insn(void *d, struct comedi_insn *insn)
 				ret = -EINVAL;
 				break;
 			}
-			comedi_udelay(insn->data[0]);
+			udelay(insn->data[0]);
 			ret = 1;
 			break;
 		case INSN_INTTRIG:
@@ -217,19 +217,19 @@ int comedi_do_insn(void *d, struct comedi_insn *insn)
 				break;
 			}
 			if (insn->subdev >= dev->n_subdevices) {
-				rt_printk("%d not usable subdevice\n",
+				printk("%d not usable subdevice\n",
 					insn->subdev);
 				ret = -EINVAL;
 				break;
 			}
 			s = dev->subdevices + insn->subdev;
 			if (!s->async) {
-				rt_printk("no async\n");
+				printk("no async\n");
 				ret = -EINVAL;
 				break;
 			}
 			if (!s->async->inttrig) {
-				rt_printk("no inttrig\n");
+				printk("no inttrig\n");
 				ret = -EAGAIN;
 				break;
 			}
@@ -249,7 +249,7 @@ int comedi_do_insn(void *d, struct comedi_insn *insn)
 		s = dev->subdevices + insn->subdev;
 
 		if (s->type == COMEDI_SUBD_UNUSED) {
-			rt_printk("%d not useable subdevice\n", insn->subdev);
+			printk("%d not useable subdevice\n", insn->subdev);
 			ret = -EIO;
 			goto error;
 		}
@@ -258,7 +258,7 @@ int comedi_do_insn(void *d, struct comedi_insn *insn)
 
 		ret = check_chanlist(s, 1, &insn->chanspec);
 		if (ret < 0) {
-			rt_printk("bad chanspec\n");
+			printk("bad chanspec\n");
 			ret = -EINVAL;
 			goto error;
 		}
@@ -295,7 +295,7 @@ int comedi_do_insn(void *d, struct comedi_insn *insn)
 #if 0
 	/* XXX do we want this? -- abbotti #if'ed it out for now. */
 	if (ret != insn->n) {
-		rt_printk("BUG: result of insn != insn.n\n");
+		printk("BUG: result of insn != insn.n\n");
 		ret = -EINVAL;
 		goto error;
 	}
@@ -336,7 +336,7 @@ int comedi_lock(void *d, unsigned int subdevice)
 
 	s = dev->subdevices + subdevice;
 
-	comedi_spin_lock_irqsave(&s->spin_lock, flags);
+	spin_lock_irqsave(&s->spin_lock, flags);
 
 	if (s->busy) {
 		ret = -EBUSY;
@@ -348,7 +348,7 @@ int comedi_lock(void *d, unsigned int subdevice)
 		}
 	}
 
-	comedi_spin_unlock_irqrestore(&s->spin_lock, flags);
+	spin_unlock_irqrestore(&s->spin_lock, flags);
 
 	return ret;
 }
@@ -382,7 +382,7 @@ int comedi_unlock(void *d, unsigned int subdevice)
 
 	async = s->async;
 
-	comedi_spin_lock_irqsave(&s->spin_lock, flags);
+	spin_lock_irqsave(&s->spin_lock, flags);
 
 	if (s->busy) {
 		ret = -EBUSY;
@@ -400,7 +400,7 @@ int comedi_unlock(void *d, unsigned int subdevice)
 		ret = 0;
 	}
 
-	comedi_spin_unlock_irqrestore(&s->spin_lock, flags);
+	spin_unlock_irqrestore(&s->spin_lock, flags);
 
 	return ret;
 }

commit 90035c0886b256d75bced13b3b3cea5234aff136
Author: Bill Pemberton <wfp5p@virginia.edu>
Date:   Mon Mar 16 22:05:53 2009 -0400

    Staging: comedi: Remove comedi_insn typedef
    
    Signed-off-by: Bill Pemberton <wfp5p@virginia.edu>
    Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>

diff --git a/drivers/staging/comedi/kcomedilib/kcomedilib_main.c b/drivers/staging/comedi/kcomedilib/kcomedilib_main.c
index 43dae3e40379..a4fa9571c58f 100644
--- a/drivers/staging/comedi/kcomedilib/kcomedilib_main.c
+++ b/drivers/staging/comedi/kcomedilib/kcomedilib_main.c
@@ -183,7 +183,7 @@ int comedi_command_test(void *d, struct comedi_cmd *cmd)
  *	COMEDI_INSN
  *	perform an instruction
  */
-int comedi_do_insn(void *d, comedi_insn *insn)
+int comedi_do_insn(void *d, struct comedi_insn *insn)
 {
 	struct comedi_device *dev = (struct comedi_device *) d;
 	struct comedi_subdevice *s;

commit ea6d0d4cab4f4f2d6a88f3bce4707fe92696fd3f
Author: Bill Pemberton <wfp5p@virginia.edu>
Date:   Mon Mar 16 22:05:47 2009 -0400

    Staging: comedi: Remove comedi_cmd typedef
    
    Signed-off-by: Bill Pemberton <wfp5p@virginia.edu>
    Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>

diff --git a/drivers/staging/comedi/kcomedilib/kcomedilib_main.c b/drivers/staging/comedi/kcomedilib/kcomedilib_main.c
index 31b749d4962a..43dae3e40379 100644
--- a/drivers/staging/comedi/kcomedilib/kcomedilib_main.c
+++ b/drivers/staging/comedi/kcomedilib/kcomedilib_main.c
@@ -121,7 +121,7 @@ int comedi_fileno(void *d)
 	return dev->minor;
 }
 
-int comedi_command(void *d, comedi_cmd *cmd)
+int comedi_command(void *d, struct comedi_cmd *cmd)
 {
 	struct comedi_device *dev = (struct comedi_device *) d;
 	struct comedi_subdevice *s;
@@ -161,7 +161,7 @@ int comedi_command(void *d, comedi_cmd *cmd)
 	return s->do_cmd(dev, s);
 }
 
-int comedi_command_test(void *d, comedi_cmd *cmd)
+int comedi_command_test(void *d, struct comedi_cmd *cmd)
 {
 	struct comedi_device *dev = (struct comedi_device *) d;
 	struct comedi_subdevice *s;

commit d163679ceec20c50f9aee880fa76c0c1185244a8
Author: Bill Pemberton <wfp5p@virginia.edu>
Date:   Mon Mar 16 22:05:20 2009 -0400

    Staging: comedi: Remove comedi_async typedef
    
    Signed-off-by: Bill Pemberton <wfp5p@virginia.edu>
    Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>

diff --git a/drivers/staging/comedi/kcomedilib/kcomedilib_main.c b/drivers/staging/comedi/kcomedilib/kcomedilib_main.c
index 928e93500bbf..31b749d4962a 100644
--- a/drivers/staging/comedi/kcomedilib/kcomedilib_main.c
+++ b/drivers/staging/comedi/kcomedilib/kcomedilib_main.c
@@ -125,7 +125,7 @@ int comedi_command(void *d, comedi_cmd *cmd)
 {
 	struct comedi_device *dev = (struct comedi_device *) d;
 	struct comedi_subdevice *s;
-	comedi_async *async;
+	struct comedi_async *async;
 	unsigned runflags;
 
 	if (cmd->subdev >= dev->n_subdevices)
@@ -372,7 +372,7 @@ int comedi_unlock(void *d, unsigned int subdevice)
 	struct comedi_device *dev = (struct comedi_device *) d;
 	struct comedi_subdevice *s;
 	unsigned long flags;
-	comedi_async *async;
+	struct comedi_async *async;
 	int ret;
 
 	if (subdevice >= dev->n_subdevices)
@@ -469,7 +469,7 @@ int comedi_register_callback(void *d, unsigned int subdevice,
 {
 	struct comedi_device *dev = (struct comedi_device *) d;
 	struct comedi_subdevice *s;
-	comedi_async *async;
+	struct comedi_async *async;
 
 	if (subdevice >= dev->n_subdevices)
 		return -EINVAL;
@@ -505,7 +505,7 @@ int comedi_poll(void *d, unsigned int subdevice)
 {
 	struct comedi_device *dev = (struct comedi_device *) d;
 	struct comedi_subdevice *s = dev->subdevices;
-	comedi_async *async;
+	struct comedi_async *async;
 
 	if (subdevice >= dev->n_subdevices)
 		return -EINVAL;

commit 34c43922e62708d45e9660eee4b4f1fb7b4bf2c7
Author: Bill Pemberton <wfp5p@virginia.edu>
Date:   Mon Mar 16 22:05:14 2009 -0400

    Staging: comedi: Remove comedi_subdevice typedef
    
    Signed-off-by: Bill Pemberton <wfp5p@virginia.edu>
    Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>

diff --git a/drivers/staging/comedi/kcomedilib/kcomedilib_main.c b/drivers/staging/comedi/kcomedilib/kcomedilib_main.c
index 98ddbb61ac01..928e93500bbf 100644
--- a/drivers/staging/comedi/kcomedilib/kcomedilib_main.c
+++ b/drivers/staging/comedi/kcomedilib/kcomedilib_main.c
@@ -124,7 +124,7 @@ int comedi_fileno(void *d)
 int comedi_command(void *d, comedi_cmd *cmd)
 {
 	struct comedi_device *dev = (struct comedi_device *) d;
-	comedi_subdevice *s;
+	struct comedi_subdevice *s;
 	comedi_async *async;
 	unsigned runflags;
 
@@ -164,7 +164,7 @@ int comedi_command(void *d, comedi_cmd *cmd)
 int comedi_command_test(void *d, comedi_cmd *cmd)
 {
 	struct comedi_device *dev = (struct comedi_device *) d;
-	comedi_subdevice *s;
+	struct comedi_subdevice *s;
 
 	if (cmd->subdev >= dev->n_subdevices)
 		return -ENODEV;
@@ -186,7 +186,7 @@ int comedi_command_test(void *d, comedi_cmd *cmd)
 int comedi_do_insn(void *d, comedi_insn *insn)
 {
 	struct comedi_device *dev = (struct comedi_device *) d;
-	comedi_subdevice *s;
+	struct comedi_subdevice *s;
 	int ret = 0;
 
 	if (insn->insn & INSN_MASK_SPECIAL) {
@@ -327,7 +327,7 @@ int comedi_do_insn(void *d, comedi_insn *insn)
 int comedi_lock(void *d, unsigned int subdevice)
 {
 	struct comedi_device *dev = (struct comedi_device *) d;
-	comedi_subdevice *s;
+	struct comedi_subdevice *s;
 	unsigned long flags;
 	int ret = 0;
 
@@ -370,7 +370,7 @@ int comedi_lock(void *d, unsigned int subdevice)
 int comedi_unlock(void *d, unsigned int subdevice)
 {
 	struct comedi_device *dev = (struct comedi_device *) d;
-	comedi_subdevice *s;
+	struct comedi_subdevice *s;
 	unsigned long flags;
 	comedi_async *async;
 	int ret;
@@ -422,7 +422,7 @@ int comedi_unlock(void *d, unsigned int subdevice)
 int comedi_cancel(void *d, unsigned int subdevice)
 {
 	struct comedi_device *dev = (struct comedi_device *) d;
-	comedi_subdevice *s;
+	struct comedi_subdevice *s;
 	int ret = 0;
 
 	if (subdevice >= dev->n_subdevices)
@@ -468,7 +468,7 @@ int comedi_register_callback(void *d, unsigned int subdevice,
 	unsigned int mask, int (*cb) (unsigned int, void *), void *arg)
 {
 	struct comedi_device *dev = (struct comedi_device *) d;
-	comedi_subdevice *s;
+	struct comedi_subdevice *s;
 	comedi_async *async;
 
 	if (subdevice >= dev->n_subdevices)
@@ -504,7 +504,7 @@ int comedi_register_callback(void *d, unsigned int subdevice,
 int comedi_poll(void *d, unsigned int subdevice)
 {
 	struct comedi_device *dev = (struct comedi_device *) d;
-	comedi_subdevice *s = dev->subdevices;
+	struct comedi_subdevice *s = dev->subdevices;
 	comedi_async *async;
 
 	if (subdevice >= dev->n_subdevices)
@@ -531,7 +531,7 @@ int comedi_poll(void *d, unsigned int subdevice)
 int comedi_map(void *d, unsigned int subdevice, void *ptr)
 {
 	struct comedi_device *dev = (struct comedi_device *) d;
-	comedi_subdevice *s;
+	struct comedi_subdevice *s;
 
 	if (subdevice >= dev->n_subdevices)
 		return -EINVAL;
@@ -553,7 +553,7 @@ int comedi_map(void *d, unsigned int subdevice, void *ptr)
 int comedi_unmap(void *d, unsigned int subdevice)
 {
 	struct comedi_device *dev = (struct comedi_device *) d;
-	comedi_subdevice *s;
+	struct comedi_subdevice *s;
 
 	if (subdevice >= dev->n_subdevices)
 		return -EINVAL;

commit 71b5f4f11971dea972832ad63a994c7e5b45db6b
Author: Bill Pemberton <wfp5p@virginia.edu>
Date:   Mon Mar 16 22:05:08 2009 -0400

    Staging: comedi: Remove comedi_device typedef
    
    Signed-off-by: Bill Pemberton <wfp5p@virginia.edu>
    Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>

diff --git a/drivers/staging/comedi/kcomedilib/kcomedilib_main.c b/drivers/staging/comedi/kcomedilib/kcomedilib_main.c
index 0320a0ce74e9..98ddbb61ac01 100644
--- a/drivers/staging/comedi/kcomedilib/kcomedilib_main.c
+++ b/drivers/staging/comedi/kcomedilib/kcomedilib_main.c
@@ -45,7 +45,7 @@ MODULE_LICENSE("GPL");
 void *comedi_open(const char *filename)
 {
 	struct comedi_device_file_info *dev_file_info;
-	comedi_device *dev;
+	struct comedi_device *dev;
 	unsigned int minor;
 
 	if (strncmp(filename, "/dev/comedi", 11) != 0)
@@ -73,7 +73,7 @@ void *comedi_open(const char *filename)
 void *comedi_open_old(unsigned int minor)
 {
 	struct comedi_device_file_info *dev_file_info;
-	comedi_device *dev;
+	struct comedi_device *dev;
 
 	if (minor >= COMEDI_NUM_MINORS)
 		return NULL;
@@ -91,7 +91,7 @@ void *comedi_open_old(unsigned int minor)
 
 int comedi_close(void *d)
 {
-	comedi_device *dev = (comedi_device *) d;
+	struct comedi_device *dev = (struct comedi_device *) d;
 
 	module_put(dev->driver->module);
 
@@ -115,7 +115,7 @@ char *comedi_strerror(int err)
 
 int comedi_fileno(void *d)
 {
-	comedi_device *dev = (comedi_device *) d;
+	struct comedi_device *dev = (struct comedi_device *) d;
 
 	/* return something random */
 	return dev->minor;
@@ -123,7 +123,7 @@ int comedi_fileno(void *d)
 
 int comedi_command(void *d, comedi_cmd *cmd)
 {
-	comedi_device *dev = (comedi_device *) d;
+	struct comedi_device *dev = (struct comedi_device *) d;
 	comedi_subdevice *s;
 	comedi_async *async;
 	unsigned runflags;
@@ -163,7 +163,7 @@ int comedi_command(void *d, comedi_cmd *cmd)
 
 int comedi_command_test(void *d, comedi_cmd *cmd)
 {
-	comedi_device *dev = (comedi_device *) d;
+	struct comedi_device *dev = (struct comedi_device *) d;
 	comedi_subdevice *s;
 
 	if (cmd->subdev >= dev->n_subdevices)
@@ -185,7 +185,7 @@ int comedi_command_test(void *d, comedi_cmd *cmd)
  */
 int comedi_do_insn(void *d, comedi_insn *insn)
 {
-	comedi_device *dev = (comedi_device *) d;
+	struct comedi_device *dev = (struct comedi_device *) d;
 	comedi_subdevice *s;
 	int ret = 0;
 
@@ -326,7 +326,7 @@ int comedi_do_insn(void *d, comedi_insn *insn)
 */
 int comedi_lock(void *d, unsigned int subdevice)
 {
-	comedi_device *dev = (comedi_device *) d;
+	struct comedi_device *dev = (struct comedi_device *) d;
 	comedi_subdevice *s;
 	unsigned long flags;
 	int ret = 0;
@@ -369,7 +369,7 @@ int comedi_lock(void *d, unsigned int subdevice)
 */
 int comedi_unlock(void *d, unsigned int subdevice)
 {
-	comedi_device *dev = (comedi_device *) d;
+	struct comedi_device *dev = (struct comedi_device *) d;
 	comedi_subdevice *s;
 	unsigned long flags;
 	comedi_async *async;
@@ -421,7 +421,7 @@ int comedi_unlock(void *d, unsigned int subdevice)
 */
 int comedi_cancel(void *d, unsigned int subdevice)
 {
-	comedi_device *dev = (comedi_device *) d;
+	struct comedi_device *dev = (struct comedi_device *) d;
 	comedi_subdevice *s;
 	int ret = 0;
 
@@ -467,7 +467,7 @@ int comedi_cancel(void *d, unsigned int subdevice)
 int comedi_register_callback(void *d, unsigned int subdevice,
 	unsigned int mask, int (*cb) (unsigned int, void *), void *arg)
 {
-	comedi_device *dev = (comedi_device *) d;
+	struct comedi_device *dev = (struct comedi_device *) d;
 	comedi_subdevice *s;
 	comedi_async *async;
 
@@ -503,7 +503,7 @@ int comedi_register_callback(void *d, unsigned int subdevice,
 
 int comedi_poll(void *d, unsigned int subdevice)
 {
-	comedi_device *dev = (comedi_device *) d;
+	struct comedi_device *dev = (struct comedi_device *) d;
 	comedi_subdevice *s = dev->subdevices;
 	comedi_async *async;
 
@@ -530,7 +530,7 @@ int comedi_poll(void *d, unsigned int subdevice)
 /* WARNING: not portable */
 int comedi_map(void *d, unsigned int subdevice, void *ptr)
 {
-	comedi_device *dev = (comedi_device *) d;
+	struct comedi_device *dev = (struct comedi_device *) d;
 	comedi_subdevice *s;
 
 	if (subdevice >= dev->n_subdevices)
@@ -552,7 +552,7 @@ int comedi_map(void *d, unsigned int subdevice, void *ptr)
 /* WARNING: not portable */
 int comedi_unmap(void *d, unsigned int subdevice)
 {
-	comedi_device *dev = (comedi_device *) d;
+	struct comedi_device *dev = (struct comedi_device *) d;
 	comedi_subdevice *s;
 
 	if (subdevice >= dev->n_subdevices)

commit 0b3fb27fa7b4bf811c31ee66453cda0a6d94aa6c
Author: Bill Pemberton <wfp5p@virginia.edu>
Date:   Mon Mar 16 22:04:56 2009 -0400

    Staging: comedi: Remove comedi_t typedef
    
    Signed-off-by: Bill Pemberton <wfp5p@virginia.edu>
    Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>

diff --git a/drivers/staging/comedi/kcomedilib/kcomedilib_main.c b/drivers/staging/comedi/kcomedilib/kcomedilib_main.c
index 7818e391dcab..0320a0ce74e9 100644
--- a/drivers/staging/comedi/kcomedilib/kcomedilib_main.c
+++ b/drivers/staging/comedi/kcomedilib/kcomedilib_main.c
@@ -42,7 +42,7 @@ MODULE_AUTHOR("David Schleef <ds@schleef.org>");
 MODULE_DESCRIPTION("Comedi kernel library");
 MODULE_LICENSE("GPL");
 
-comedi_t *comedi_open(const char *filename)
+void *comedi_open(const char *filename)
 {
 	struct comedi_device_file_info *dev_file_info;
 	comedi_device *dev;
@@ -67,10 +67,10 @@ comedi_t *comedi_open(const char *filename)
 	if (!try_module_get(dev->driver->module))
 		return NULL;
 
-	return (comedi_t *) dev;
+	return (void *) dev;
 }
 
-comedi_t *comedi_open_old(unsigned int minor)
+void *comedi_open_old(unsigned int minor)
 {
 	struct comedi_device_file_info *dev_file_info;
 	comedi_device *dev;
@@ -86,10 +86,10 @@ comedi_t *comedi_open_old(unsigned int minor)
 	if (dev == NULL || !dev->attached)
 		return NULL;
 
-	return (comedi_t *) dev;
+	return (void *) dev;
 }
 
-int comedi_close(comedi_t *d)
+int comedi_close(void *d)
 {
 	comedi_device *dev = (comedi_device *) d;
 
@@ -113,7 +113,7 @@ char *comedi_strerror(int err)
 	return "unknown error";
 }
 
-int comedi_fileno(comedi_t *d)
+int comedi_fileno(void *d)
 {
 	comedi_device *dev = (comedi_device *) d;
 
@@ -121,7 +121,7 @@ int comedi_fileno(comedi_t *d)
 	return dev->minor;
 }
 
-int comedi_command(comedi_t *d, comedi_cmd *cmd)
+int comedi_command(void *d, comedi_cmd *cmd)
 {
 	comedi_device *dev = (comedi_device *) d;
 	comedi_subdevice *s;
@@ -161,7 +161,7 @@ int comedi_command(comedi_t *d, comedi_cmd *cmd)
 	return s->do_cmd(dev, s);
 }
 
-int comedi_command_test(comedi_t *d, comedi_cmd *cmd)
+int comedi_command_test(void *d, comedi_cmd *cmd)
 {
 	comedi_device *dev = (comedi_device *) d;
 	comedi_subdevice *s;
@@ -183,7 +183,7 @@ int comedi_command_test(comedi_t *d, comedi_cmd *cmd)
  *	COMEDI_INSN
  *	perform an instruction
  */
-int comedi_do_insn(comedi_t *d, comedi_insn *insn)
+int comedi_do_insn(void *d, comedi_insn *insn)
 {
 	comedi_device *dev = (comedi_device *) d;
 	comedi_subdevice *s;
@@ -324,7 +324,7 @@ int comedi_do_insn(comedi_t *d, comedi_insn *insn)
 	- lock while subdevice being programmed
 
 */
-int comedi_lock(comedi_t *d, unsigned int subdevice)
+int comedi_lock(void *d, unsigned int subdevice)
 {
 	comedi_device *dev = (comedi_device *) d;
 	comedi_subdevice *s;
@@ -367,7 +367,7 @@ int comedi_lock(comedi_t *d, unsigned int subdevice)
 		none
 
 */
-int comedi_unlock(comedi_t *d, unsigned int subdevice)
+int comedi_unlock(void *d, unsigned int subdevice)
 {
 	comedi_device *dev = (comedi_device *) d;
 	comedi_subdevice *s;
@@ -419,7 +419,7 @@ int comedi_unlock(comedi_t *d, unsigned int subdevice)
 		nothing
 
 */
-int comedi_cancel(comedi_t *d, unsigned int subdevice)
+int comedi_cancel(void *d, unsigned int subdevice)
 {
 	comedi_device *dev = (comedi_device *) d;
 	comedi_subdevice *s;
@@ -464,7 +464,7 @@ int comedi_cancel(comedi_t *d, unsigned int subdevice)
 /*
    registration of callback functions
  */
-int comedi_register_callback(comedi_t *d, unsigned int subdevice,
+int comedi_register_callback(void *d, unsigned int subdevice,
 	unsigned int mask, int (*cb) (unsigned int, void *), void *arg)
 {
 	comedi_device *dev = (comedi_device *) d;
@@ -501,7 +501,7 @@ int comedi_register_callback(comedi_t *d, unsigned int subdevice,
 	return 0;
 }
 
-int comedi_poll(comedi_t *d, unsigned int subdevice)
+int comedi_poll(void *d, unsigned int subdevice)
 {
 	comedi_device *dev = (comedi_device *) d;
 	comedi_subdevice *s = dev->subdevices;
@@ -528,7 +528,7 @@ int comedi_poll(comedi_t *d, unsigned int subdevice)
 }
 
 /* WARNING: not portable */
-int comedi_map(comedi_t *d, unsigned int subdevice, void *ptr)
+int comedi_map(void *d, unsigned int subdevice, void *ptr)
 {
 	comedi_device *dev = (comedi_device *) d;
 	comedi_subdevice *s;
@@ -550,7 +550,7 @@ int comedi_map(comedi_t *d, unsigned int subdevice, void *ptr)
 }
 
 /* WARNING: not portable */
-int comedi_unmap(comedi_t *d, unsigned int subdevice)
+int comedi_unmap(void *d, unsigned int subdevice)
 {
 	comedi_device *dev = (comedi_device *) d;
 	comedi_subdevice *s;

commit 82675f3547ba2a0732beabd9bb4393535f74408c
Author: Bill Pemberton <wfp5p@virginia.edu>
Date:   Mon Mar 16 22:04:23 2009 -0400

    Staging: comedi: Remove curly braces where they are not needed
    
    Changes as suggested by checkpatch.pl.
    
    Signed-off-by: Bill Pemberton <wfp5p@virginia.edu>
    Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>

diff --git a/drivers/staging/comedi/kcomedilib/kcomedilib_main.c b/drivers/staging/comedi/kcomedilib/kcomedilib_main.c
index 94a5067f6bd5..7818e391dcab 100644
--- a/drivers/staging/comedi/kcomedilib/kcomedilib_main.c
+++ b/drivers/staging/comedi/kcomedilib/kcomedilib_main.c
@@ -331,9 +331,9 @@ int comedi_lock(comedi_t *d, unsigned int subdevice)
 	unsigned long flags;
 	int ret = 0;
 
-	if (subdevice >= dev->n_subdevices) {
+	if (subdevice >= dev->n_subdevices)
 		return -EINVAL;
-	}
+
 	s = dev->subdevices + subdevice;
 
 	comedi_spin_lock_irqsave(&s->spin_lock, flags);
@@ -375,9 +375,9 @@ int comedi_unlock(comedi_t *d, unsigned int subdevice)
 	comedi_async *async;
 	int ret;
 
-	if (subdevice >= dev->n_subdevices) {
+	if (subdevice >= dev->n_subdevices)
 		return -EINVAL;
-	}
+
 	s = dev->subdevices + subdevice;
 
 	async = s->async;
@@ -425,9 +425,9 @@ int comedi_cancel(comedi_t *d, unsigned int subdevice)
 	comedi_subdevice *s;
 	int ret = 0;
 
-	if (subdevice >= dev->n_subdevices) {
+	if (subdevice >= dev->n_subdevices)
 		return -EINVAL;
-	}
+
 	s = dev->subdevices + subdevice;
 
 	if (s->lock && s->lock != d)
@@ -450,9 +450,9 @@ int comedi_cancel(comedi_t *d, unsigned int subdevice)
 		return ret;
 
 #ifdef CONFIG_COMEDI_RT
-	if (comedi_get_subdevice_runflags(s) & SRF_RT) {
+	if (comedi_get_subdevice_runflags(s) & SRF_RT)
 		comedi_switch_to_non_rt(dev);
-	}
+
 #endif
 	comedi_set_subdevice_runflags(s, SRF_RUNNING | SRF_RT, 0);
 	s->async->inttrig = NULL;
@@ -471,9 +471,9 @@ int comedi_register_callback(comedi_t *d, unsigned int subdevice,
 	comedi_subdevice *s;
 	comedi_async *async;
 
-	if (subdevice >= dev->n_subdevices) {
+	if (subdevice >= dev->n_subdevices)
 		return -EINVAL;
-	}
+
 	s = dev->subdevices + subdevice;
 
 	async = s->async;
@@ -507,9 +507,9 @@ int comedi_poll(comedi_t *d, unsigned int subdevice)
 	comedi_subdevice *s = dev->subdevices;
 	comedi_async *async;
 
-	if (subdevice >= dev->n_subdevices) {
+	if (subdevice >= dev->n_subdevices)
 		return -EINVAL;
-	}
+
 	s = dev->subdevices + subdevice;
 
 	async = s->async;
@@ -533,17 +533,16 @@ int comedi_map(comedi_t *d, unsigned int subdevice, void *ptr)
 	comedi_device *dev = (comedi_device *) d;
 	comedi_subdevice *s;
 
-	if (subdevice >= dev->n_subdevices) {
+	if (subdevice >= dev->n_subdevices)
 		return -EINVAL;
-	}
+
 	s = dev->subdevices + subdevice;
 
 	if (!s->async)
 		return -EINVAL;
 
-	if (ptr) {
+	if (ptr)
 		*((void **)ptr) = s->async->prealloc_buf;
-	}
 
 	/* XXX no reference counting */
 
@@ -556,9 +555,9 @@ int comedi_unmap(comedi_t *d, unsigned int subdevice)
 	comedi_device *dev = (comedi_device *) d;
 	comedi_subdevice *s;
 
-	if (subdevice >= dev->n_subdevices) {
+	if (subdevice >= dev->n_subdevices)
 		return -EINVAL;
-	}
+
 	s = dev->subdevices + subdevice;
 
 	if (!s->async)

commit 197c82bf25b9e379cb5646561be1a727ab9e84a7
Author: Bill Pemberton <wfp5p@virginia.edu>
Date:   Mon Mar 16 22:03:51 2009 -0400

    Staging: comedi: Remove instances of assignments in conditionals
    
    Signed-off-by: Bill Pemberton <wfp5p@virginia.edu>
    Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>

diff --git a/drivers/staging/comedi/kcomedilib/kcomedilib_main.c b/drivers/staging/comedi/kcomedilib/kcomedilib_main.c
index 7133f2f2607c..94a5067f6bd5 100644
--- a/drivers/staging/comedi/kcomedilib/kcomedilib_main.c
+++ b/drivers/staging/comedi/kcomedilib/kcomedilib_main.c
@@ -256,7 +256,8 @@ int comedi_do_insn(comedi_t *d, comedi_insn *insn)
 
 		/* XXX check lock */
 
-		if ((ret = check_chanlist(s, 1, &insn->chanspec)) < 0) {
+		ret = check_chanlist(s, 1, &insn->chanspec);
+		if (ret < 0) {
 			rt_printk("bad chanspec\n");
 			ret = -EINVAL;
 			goto error;
@@ -443,7 +444,9 @@ int comedi_cancel(comedi_t *d, unsigned int subdevice)
 	if (!s->cancel || !s->async)
 		return -EINVAL;
 
-	if ((ret = s->cancel(dev, s)))
+	ret = s->cancel(dev, s);
+
+	if (ret)
 		return ret;
 
 #ifdef CONFIG_COMEDI_RT

commit 6a98d36e87a0b38d711d580b5fc9dbba17f68dfc
Author: Bill Pemberton <wfp5p@virginia.edu>
Date:   Mon Mar 16 22:03:45 2009 -0400

    Staging: comedi: Add spaces around parens as requested by checkpatch.pl
    
    Signed-off-by: Bill Pemberton <wfp5p@virginia.edu>
    Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>

diff --git a/drivers/staging/comedi/kcomedilib/kcomedilib_main.c b/drivers/staging/comedi/kcomedilib/kcomedilib_main.c
index e758e4e8c91b..7133f2f2607c 100644
--- a/drivers/staging/comedi/kcomedilib/kcomedilib_main.c
+++ b/drivers/staging/comedi/kcomedilib/kcomedilib_main.c
@@ -57,11 +57,11 @@ comedi_t *comedi_open(const char *filename)
 		return NULL;
 
 	dev_file_info = comedi_get_device_file_info(minor);
-	if(dev_file_info == NULL)
+	if (dev_file_info == NULL)
 		return NULL;
 	dev = dev_file_info->device;
 
-	if(dev == NULL || !dev->attached)
+	if (dev == NULL || !dev->attached)
 		return NULL;
 
 	if (!try_module_get(dev->driver->module))
@@ -79,11 +79,11 @@ comedi_t *comedi_open_old(unsigned int minor)
 		return NULL;
 
 	dev_file_info = comedi_get_device_file_info(minor);
-	if(dev_file_info == NULL)
+	if (dev_file_info == NULL)
 		return NULL;
 	dev = dev_file_info->device;
 
-	if(dev == NULL || !dev->attached)
+	if (dev == NULL || !dev->attached)
 		return NULL;
 
 	return (comedi_t *) dev;

commit e473e9120b0a2d7252aca1ed9db5adadee36c0fa
Author: Bill Pemberton <wfp5p@virginia.edu>
Date:   Mon Mar 16 22:03:29 2009 -0400

    Staging: comedi: Change "foo * bar" to "foo *bar"
    
    Removes checkpatch.pl errors
    
    Signed-off-by: Bill Pemberton <wfp5p@virginia.edu>
    Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>

diff --git a/drivers/staging/comedi/kcomedilib/kcomedilib_main.c b/drivers/staging/comedi/kcomedilib/kcomedilib_main.c
index 510fbdcec493..e758e4e8c91b 100644
--- a/drivers/staging/comedi/kcomedilib/kcomedilib_main.c
+++ b/drivers/staging/comedi/kcomedilib/kcomedilib_main.c
@@ -89,7 +89,7 @@ comedi_t *comedi_open_old(unsigned int minor)
 	return (comedi_t *) dev;
 }
 
-int comedi_close(comedi_t * d)
+int comedi_close(comedi_t *d)
 {
 	comedi_device *dev = (comedi_device *) d;
 
@@ -113,7 +113,7 @@ char *comedi_strerror(int err)
 	return "unknown error";
 }
 
-int comedi_fileno(comedi_t * d)
+int comedi_fileno(comedi_t *d)
 {
 	comedi_device *dev = (comedi_device *) d;
 
@@ -121,7 +121,7 @@ int comedi_fileno(comedi_t * d)
 	return dev->minor;
 }
 
-int comedi_command(comedi_t * d, comedi_cmd * cmd)
+int comedi_command(comedi_t *d, comedi_cmd *cmd)
 {
 	comedi_device *dev = (comedi_device *) d;
 	comedi_subdevice *s;
@@ -161,7 +161,7 @@ int comedi_command(comedi_t * d, comedi_cmd * cmd)
 	return s->do_cmd(dev, s);
 }
 
-int comedi_command_test(comedi_t * d, comedi_cmd * cmd)
+int comedi_command_test(comedi_t *d, comedi_cmd *cmd)
 {
 	comedi_device *dev = (comedi_device *) d;
 	comedi_subdevice *s;
@@ -183,7 +183,7 @@ int comedi_command_test(comedi_t * d, comedi_cmd * cmd)
  *	COMEDI_INSN
  *	perform an instruction
  */
-int comedi_do_insn(comedi_t * d, comedi_insn * insn)
+int comedi_do_insn(comedi_t *d, comedi_insn *insn)
 {
 	comedi_device *dev = (comedi_device *) d;
 	comedi_subdevice *s;
@@ -323,7 +323,7 @@ int comedi_do_insn(comedi_t * d, comedi_insn * insn)
 	- lock while subdevice being programmed
 
 */
-int comedi_lock(comedi_t * d, unsigned int subdevice)
+int comedi_lock(comedi_t *d, unsigned int subdevice)
 {
 	comedi_device *dev = (comedi_device *) d;
 	comedi_subdevice *s;
@@ -366,7 +366,7 @@ int comedi_lock(comedi_t * d, unsigned int subdevice)
 		none
 
 */
-int comedi_unlock(comedi_t * d, unsigned int subdevice)
+int comedi_unlock(comedi_t *d, unsigned int subdevice)
 {
 	comedi_device *dev = (comedi_device *) d;
 	comedi_subdevice *s;
@@ -418,7 +418,7 @@ int comedi_unlock(comedi_t * d, unsigned int subdevice)
 		nothing
 
 */
-int comedi_cancel(comedi_t * d, unsigned int subdevice)
+int comedi_cancel(comedi_t *d, unsigned int subdevice)
 {
 	comedi_device *dev = (comedi_device *) d;
 	comedi_subdevice *s;
@@ -461,7 +461,7 @@ int comedi_cancel(comedi_t * d, unsigned int subdevice)
 /*
    registration of callback functions
  */
-int comedi_register_callback(comedi_t * d, unsigned int subdevice,
+int comedi_register_callback(comedi_t *d, unsigned int subdevice,
 	unsigned int mask, int (*cb) (unsigned int, void *), void *arg)
 {
 	comedi_device *dev = (comedi_device *) d;
@@ -498,7 +498,7 @@ int comedi_register_callback(comedi_t * d, unsigned int subdevice,
 	return 0;
 }
 
-int comedi_poll(comedi_t * d, unsigned int subdevice)
+int comedi_poll(comedi_t *d, unsigned int subdevice)
 {
 	comedi_device *dev = (comedi_device *) d;
 	comedi_subdevice *s = dev->subdevices;
@@ -525,7 +525,7 @@ int comedi_poll(comedi_t * d, unsigned int subdevice)
 }
 
 /* WARNING: not portable */
-int comedi_map(comedi_t * d, unsigned int subdevice, void *ptr)
+int comedi_map(comedi_t *d, unsigned int subdevice, void *ptr)
 {
 	comedi_device *dev = (comedi_device *) d;
 	comedi_subdevice *s;
@@ -548,7 +548,7 @@ int comedi_map(comedi_t * d, unsigned int subdevice, void *ptr)
 }
 
 /* WARNING: not portable */
-int comedi_unmap(comedi_t * d, unsigned int subdevice)
+int comedi_unmap(comedi_t *d, unsigned int subdevice)
 {
 	comedi_device *dev = (comedi_device *) d;
 	comedi_subdevice *s;

commit b79a7a2089294cba254f6972e4e224fea643b84a
Author: David Schleef <ds@schleef.org>
Date:   Fri Nov 14 15:58:23 2008 -0800

    Staging: comedi: add kcomedilib to the tree
    
    This adds the kcomedilib module
    
    From: David Schleef <ds@schleef.org>
    Cc: Frank Mori Hess <fmhess@users.sourceforge.net>
    Cc: Ian Abbott <abbotti@mev.co.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>

diff --git a/drivers/staging/comedi/kcomedilib/kcomedilib_main.c b/drivers/staging/comedi/kcomedilib/kcomedilib_main.c
new file mode 100644
index 000000000000..510fbdcec493
--- /dev/null
+++ b/drivers/staging/comedi/kcomedilib/kcomedilib_main.c
@@ -0,0 +1,567 @@
+/*
+    kcomedilib/kcomedilib.c
+    a comedlib interface for kernel modules
+
+    COMEDI - Linux Control and Measurement Device Interface
+    Copyright (C) 1997-2000 David A. Schleef <ds@schleef.org>
+
+    This program is free software; you can redistribute it and/or modify
+    it under the terms of the GNU General Public License as published by
+    the Free Software Foundation; either version 2 of the License, or
+    (at your option) any later version.
+
+    This program is distributed in the hope that it will be useful,
+    but WITHOUT ANY WARRANTY; without even the implied warranty of
+    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+    GNU General Public License for more details.
+
+    You should have received a copy of the GNU General Public License
+    along with this program; if not, write to the Free Software
+    Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
+
+*/
+
+#define __NO_VERSION__
+#include <linux/module.h>
+
+#include <linux/errno.h>
+#include <linux/kernel.h>
+#include <linux/sched.h>
+#include <linux/fcntl.h>
+#include <linux/delay.h>
+#include <linux/ioport.h>
+#include <linux/mm.h>
+#include <linux/slab.h>
+#include <asm/io.h>
+
+#include "../comedi.h"
+#include "../comedilib.h"
+#include "../comedidev.h"
+
+MODULE_AUTHOR("David Schleef <ds@schleef.org>");
+MODULE_DESCRIPTION("Comedi kernel library");
+MODULE_LICENSE("GPL");
+
+comedi_t *comedi_open(const char *filename)
+{
+	struct comedi_device_file_info *dev_file_info;
+	comedi_device *dev;
+	unsigned int minor;
+
+	if (strncmp(filename, "/dev/comedi", 11) != 0)
+		return NULL;
+
+	minor = simple_strtoul(filename + 11, NULL, 0);
+
+	if (minor >= COMEDI_NUM_BOARD_MINORS)
+		return NULL;
+
+	dev_file_info = comedi_get_device_file_info(minor);
+	if(dev_file_info == NULL)
+		return NULL;
+	dev = dev_file_info->device;
+
+	if(dev == NULL || !dev->attached)
+		return NULL;
+
+	if (!try_module_get(dev->driver->module))
+		return NULL;
+
+	return (comedi_t *) dev;
+}
+
+comedi_t *comedi_open_old(unsigned int minor)
+{
+	struct comedi_device_file_info *dev_file_info;
+	comedi_device *dev;
+
+	if (minor >= COMEDI_NUM_MINORS)
+		return NULL;
+
+	dev_file_info = comedi_get_device_file_info(minor);
+	if(dev_file_info == NULL)
+		return NULL;
+	dev = dev_file_info->device;
+
+	if(dev == NULL || !dev->attached)
+		return NULL;
+
+	return (comedi_t *) dev;
+}
+
+int comedi_close(comedi_t * d)
+{
+	comedi_device *dev = (comedi_device *) d;
+
+	module_put(dev->driver->module);
+
+	return 0;
+}
+
+int comedi_loglevel(int newlevel)
+{
+	return 0;
+}
+
+void comedi_perror(const char *message)
+{
+	rt_printk("%s: unknown error\n", message);
+}
+
+char *comedi_strerror(int err)
+{
+	return "unknown error";
+}
+
+int comedi_fileno(comedi_t * d)
+{
+	comedi_device *dev = (comedi_device *) d;
+
+	/* return something random */
+	return dev->minor;
+}
+
+int comedi_command(comedi_t * d, comedi_cmd * cmd)
+{
+	comedi_device *dev = (comedi_device *) d;
+	comedi_subdevice *s;
+	comedi_async *async;
+	unsigned runflags;
+
+	if (cmd->subdev >= dev->n_subdevices)
+		return -ENODEV;
+
+	s = dev->subdevices + cmd->subdev;
+	if (s->type == COMEDI_SUBD_UNUSED)
+		return -EIO;
+
+	async = s->async;
+	if (async == NULL)
+		return -ENODEV;
+
+	if (s->busy)
+		return -EBUSY;
+	s->busy = d;
+
+	if (async->cb_mask & COMEDI_CB_EOS)
+		cmd->flags |= TRIG_WAKE_EOS;
+
+	async->cmd = *cmd;
+
+	runflags = SRF_RUNNING;
+
+#ifdef CONFIG_COMEDI_RT
+	if (comedi_switch_to_rt(dev) == 0)
+		runflags |= SRF_RT;
+#endif
+	comedi_set_subdevice_runflags(s, ~0, runflags);
+
+	comedi_reset_async_buf(async);
+
+	return s->do_cmd(dev, s);
+}
+
+int comedi_command_test(comedi_t * d, comedi_cmd * cmd)
+{
+	comedi_device *dev = (comedi_device *) d;
+	comedi_subdevice *s;
+
+	if (cmd->subdev >= dev->n_subdevices)
+		return -ENODEV;
+
+	s = dev->subdevices + cmd->subdev;
+	if (s->type == COMEDI_SUBD_UNUSED)
+		return -EIO;
+
+	if (s->async == NULL)
+		return -ENODEV;
+
+	return s->do_cmdtest(dev, s, cmd);
+}
+
+/*
+ *	COMEDI_INSN
+ *	perform an instruction
+ */
+int comedi_do_insn(comedi_t * d, comedi_insn * insn)
+{
+	comedi_device *dev = (comedi_device *) d;
+	comedi_subdevice *s;
+	int ret = 0;
+
+	if (insn->insn & INSN_MASK_SPECIAL) {
+		switch (insn->insn) {
+		case INSN_GTOD:
+			{
+				struct timeval tv;
+
+				do_gettimeofday(&tv);
+				insn->data[0] = tv.tv_sec;
+				insn->data[1] = tv.tv_usec;
+				ret = 2;
+
+				break;
+			}
+		case INSN_WAIT:
+			/* XXX isn't the value supposed to be nanosecs? */
+			if (insn->n != 1 || insn->data[0] >= 100) {
+				ret = -EINVAL;
+				break;
+			}
+			comedi_udelay(insn->data[0]);
+			ret = 1;
+			break;
+		case INSN_INTTRIG:
+			if (insn->n != 1) {
+				ret = -EINVAL;
+				break;
+			}
+			if (insn->subdev >= dev->n_subdevices) {
+				rt_printk("%d not usable subdevice\n",
+					insn->subdev);
+				ret = -EINVAL;
+				break;
+			}
+			s = dev->subdevices + insn->subdev;
+			if (!s->async) {
+				rt_printk("no async\n");
+				ret = -EINVAL;
+				break;
+			}
+			if (!s->async->inttrig) {
+				rt_printk("no inttrig\n");
+				ret = -EAGAIN;
+				break;
+			}
+			ret = s->async->inttrig(dev, s, insn->data[0]);
+			if (ret >= 0)
+				ret = 1;
+			break;
+		default:
+			ret = -EINVAL;
+		}
+	} else {
+		/* a subdevice instruction */
+		if (insn->subdev >= dev->n_subdevices) {
+			ret = -EINVAL;
+			goto error;
+		}
+		s = dev->subdevices + insn->subdev;
+
+		if (s->type == COMEDI_SUBD_UNUSED) {
+			rt_printk("%d not useable subdevice\n", insn->subdev);
+			ret = -EIO;
+			goto error;
+		}
+
+		/* XXX check lock */
+
+		if ((ret = check_chanlist(s, 1, &insn->chanspec)) < 0) {
+			rt_printk("bad chanspec\n");
+			ret = -EINVAL;
+			goto error;
+		}
+
+		if (s->busy) {
+			ret = -EBUSY;
+			goto error;
+		}
+		s->busy = d;
+
+		switch (insn->insn) {
+		case INSN_READ:
+			ret = s->insn_read(dev, s, insn, insn->data);
+			break;
+		case INSN_WRITE:
+			ret = s->insn_write(dev, s, insn, insn->data);
+			break;
+		case INSN_BITS:
+			ret = s->insn_bits(dev, s, insn, insn->data);
+			break;
+		case INSN_CONFIG:
+			/* XXX should check instruction length */
+			ret = s->insn_config(dev, s, insn, insn->data);
+			break;
+		default:
+			ret = -EINVAL;
+			break;
+		}
+
+		s->busy = NULL;
+	}
+	if (ret < 0)
+		goto error;
+#if 0
+	/* XXX do we want this? -- abbotti #if'ed it out for now. */
+	if (ret != insn->n) {
+		rt_printk("BUG: result of insn != insn.n\n");
+		ret = -EINVAL;
+		goto error;
+	}
+#endif
+      error:
+
+	return ret;
+}
+
+/*
+	COMEDI_LOCK
+	lock subdevice
+
+	arg:
+		subdevice number
+
+	reads:
+		none
+
+	writes:
+		none
+
+	necessary locking:
+	- ioctl/rt lock  (this type)
+	- lock while subdevice busy
+	- lock while subdevice being programmed
+
+*/
+int comedi_lock(comedi_t * d, unsigned int subdevice)
+{
+	comedi_device *dev = (comedi_device *) d;
+	comedi_subdevice *s;
+	unsigned long flags;
+	int ret = 0;
+
+	if (subdevice >= dev->n_subdevices) {
+		return -EINVAL;
+	}
+	s = dev->subdevices + subdevice;
+
+	comedi_spin_lock_irqsave(&s->spin_lock, flags);
+
+	if (s->busy) {
+		ret = -EBUSY;
+	} else {
+		if (s->lock) {
+			ret = -EBUSY;
+		} else {
+			s->lock = d;
+		}
+	}
+
+	comedi_spin_unlock_irqrestore(&s->spin_lock, flags);
+
+	return ret;
+}
+
+/*
+	COMEDI_UNLOCK
+	unlock subdevice
+
+	arg:
+		subdevice number
+
+	reads:
+		none
+
+	writes:
+		none
+
+*/
+int comedi_unlock(comedi_t * d, unsigned int subdevice)
+{
+	comedi_device *dev = (comedi_device *) d;
+	comedi_subdevice *s;
+	unsigned long flags;
+	comedi_async *async;
+	int ret;
+
+	if (subdevice >= dev->n_subdevices) {
+		return -EINVAL;
+	}
+	s = dev->subdevices + subdevice;
+
+	async = s->async;
+
+	comedi_spin_lock_irqsave(&s->spin_lock, flags);
+
+	if (s->busy) {
+		ret = -EBUSY;
+	} else if (s->lock && s->lock != (void *)d) {
+		ret = -EACCES;
+	} else {
+		s->lock = NULL;
+
+		if (async) {
+			async->cb_mask = 0;
+			async->cb_func = NULL;
+			async->cb_arg = NULL;
+		}
+
+		ret = 0;
+	}
+
+	comedi_spin_unlock_irqrestore(&s->spin_lock, flags);
+
+	return ret;
+}
+
+/*
+	COMEDI_CANCEL
+	cancel acquisition ioctl
+
+	arg:
+		subdevice number
+
+	reads:
+		nothing
+
+	writes:
+		nothing
+
+*/
+int comedi_cancel(comedi_t * d, unsigned int subdevice)
+{
+	comedi_device *dev = (comedi_device *) d;
+	comedi_subdevice *s;
+	int ret = 0;
+
+	if (subdevice >= dev->n_subdevices) {
+		return -EINVAL;
+	}
+	s = dev->subdevices + subdevice;
+
+	if (s->lock && s->lock != d)
+		return -EACCES;
+
+#if 0
+	if (!s->busy)
+		return 0;
+
+	if (s->busy != d)
+		return -EBUSY;
+#endif
+
+	if (!s->cancel || !s->async)
+		return -EINVAL;
+
+	if ((ret = s->cancel(dev, s)))
+		return ret;
+
+#ifdef CONFIG_COMEDI_RT
+	if (comedi_get_subdevice_runflags(s) & SRF_RT) {
+		comedi_switch_to_non_rt(dev);
+	}
+#endif
+	comedi_set_subdevice_runflags(s, SRF_RUNNING | SRF_RT, 0);
+	s->async->inttrig = NULL;
+	s->busy = NULL;
+
+	return 0;
+}
+
+/*
+   registration of callback functions
+ */
+int comedi_register_callback(comedi_t * d, unsigned int subdevice,
+	unsigned int mask, int (*cb) (unsigned int, void *), void *arg)
+{
+	comedi_device *dev = (comedi_device *) d;
+	comedi_subdevice *s;
+	comedi_async *async;
+
+	if (subdevice >= dev->n_subdevices) {
+		return -EINVAL;
+	}
+	s = dev->subdevices + subdevice;
+
+	async = s->async;
+	if (s->type == COMEDI_SUBD_UNUSED || !async)
+		return -EIO;
+
+	/* are we locked? (ioctl lock) */
+	if (s->lock && s->lock != d)
+		return -EACCES;
+
+	/* are we busy? */
+	if (s->busy)
+		return -EBUSY;
+
+	if (!mask) {
+		async->cb_mask = 0;
+		async->cb_func = NULL;
+		async->cb_arg = NULL;
+	} else {
+		async->cb_mask = mask;
+		async->cb_func = cb;
+		async->cb_arg = arg;
+	}
+
+	return 0;
+}
+
+int comedi_poll(comedi_t * d, unsigned int subdevice)
+{
+	comedi_device *dev = (comedi_device *) d;
+	comedi_subdevice *s = dev->subdevices;
+	comedi_async *async;
+
+	if (subdevice >= dev->n_subdevices) {
+		return -EINVAL;
+	}
+	s = dev->subdevices + subdevice;
+
+	async = s->async;
+	if (s->type == COMEDI_SUBD_UNUSED || !async)
+		return -EIO;
+
+	/* are we locked? (ioctl lock) */
+	if (s->lock && s->lock != d)
+		return -EACCES;
+
+	/* are we running? XXX wrong? */
+	if (!s->busy)
+		return -EIO;
+
+	return s->poll(dev, s);
+}
+
+/* WARNING: not portable */
+int comedi_map(comedi_t * d, unsigned int subdevice, void *ptr)
+{
+	comedi_device *dev = (comedi_device *) d;
+	comedi_subdevice *s;
+
+	if (subdevice >= dev->n_subdevices) {
+		return -EINVAL;
+	}
+	s = dev->subdevices + subdevice;
+
+	if (!s->async)
+		return -EINVAL;
+
+	if (ptr) {
+		*((void **)ptr) = s->async->prealloc_buf;
+	}
+
+	/* XXX no reference counting */
+
+	return 0;
+}
+
+/* WARNING: not portable */
+int comedi_unmap(comedi_t * d, unsigned int subdevice)
+{
+	comedi_device *dev = (comedi_device *) d;
+	comedi_subdevice *s;
+
+	if (subdevice >= dev->n_subdevices) {
+		return -EINVAL;
+	}
+	s = dev->subdevices + subdevice;
+
+	if (!s->async)
+		return -EINVAL;
+
+	/* XXX no reference counting */
+
+	return 0;
+}
