commit 80ef846e9909f22ccdc2a4a6d931266cecce8b2c
Merge: 081096d98bb2 77f55d1305c1
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Sun Jun 7 10:45:08 2020 -0700

    Merge tag 'staging-5.8-rc1' of git://git.kernel.org/pub/scm/linux/kernel/git/gregkh/staging
    
    Pull staging/IIO driver updates from Greg KH:
     "Here is the large set of staging and IIO driver changes for 5.8-rc1
    
      Nothing major, but a lot of new IIO drivers are included in here,
      along with other core iio cleanups and changes.
    
      On the staging driver front, again, nothing noticable. No new
      deletions or additions, just a ton of tiny cleanups all over the tree
      done by a lot of different people. Most coding style, but many actual
      real fixes and cleanups that are nice to see.
    
      All of these have been in linux-next for a while with no reported
      issues"
    
    * tag 'staging-5.8-rc1' of git://git.kernel.org/pub/scm/linux/kernel/git/gregkh/staging: (618 commits)
      staging: rtl8723bs: Use common packet header constants
      staging: sm750fb: Add names to proc_setBLANK args
      staging: most: usb: init return value in default path of switch/case expression
      staging: vchiq: Get rid of VCHIQ_SERVICE_OPENEND callback reason
      staging: vchiq: move vchiq_release_message() into vchiq
      staging: vchi: Get rid of C++ guards
      staging: vchi: Get rid of not implemented function declarations
      staging: vchi: Get rid of vchiq_status_to_vchi()
      staging: vchi: Get rid of vchi_service_set_option()
      staging: vchi: Merge vchi_msg_queue() into vchi_queue_kernel_message()
      staging: vchiq: Move copy callback handling into vchiq
      staging: vchi: Get rid of vchi_queue_user_message()
      staging: vchi: Get rid of vchi_service_destroy()
      staging: most: usb: use function sysfs_streq
      staging: most: usb: add missing put_device calls
      staging: most: usb: use correct error codes
      staging: most: usb: replace code to calculate array index
      staging: most: usb: don't use error path to exit function on success
      staging: most: usb: move allocation of URB out of critical section
      staging: most: usb: return 0 instead of variable
      ...

commit 388138764e2549520afd0b3b4e15de8deb592ff6
Author: Al Viro <viro@zeniv.linux.org.uk>
Date:   Sat Apr 25 18:44:30 2020 -0400

    comedi: get rid of compat_alloc_user_space() mess in COMEDI_RANGEINFO compat
    
    Just take copy_from_user() out of do_rangeing_ioctl() into the caller and
    have compat_rangeinfo() build a native version and pass it to do_rangeinfo_ioctl()
    directly.
    
    Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>

diff --git a/drivers/staging/comedi/comedi_internal.h b/drivers/staging/comedi/comedi_internal.h
index 515f293a5d26..7c8f18f55122 100644
--- a/drivers/staging/comedi/comedi_internal.h
+++ b/drivers/staging/comedi/comedi_internal.h
@@ -18,7 +18,7 @@ struct comedi_subdevice;
 struct device;
 
 int do_rangeinfo_ioctl(struct comedi_device *dev,
-		       struct comedi_rangeinfo __user *arg);
+		       struct comedi_rangeinfo *it);
 struct comedi_device *comedi_alloc_board_minor(struct device *hardware_device);
 void comedi_release_hardware_device(struct device *hardware_device);
 int comedi_alloc_subdevice_minor(struct comedi_subdevice *s);

commit 37c2513eadd418c91422bb8224f097ae9daa7e06
Author: John B. Wyatt IV <jbwyatt4@gmail.com>
Date:   Sun Mar 29 01:00:31 2020 -0700

    staging: comedi: Fix line ending with a (
    
    Fix style issue with declaration by adopting the same style as the
    function defintion in drivers/staging/comedi/comedi_buf.c.
    
    Issue reported by checkpatch.
    
    Signed-off-by: John B. Wyatt IV <jbwyatt4@gmail.com>
    Reviewed-by: Stefano Brivio <sbrivio@redhat.com>
    Link: https://lore.kernel.org/r/20200329080031.511959-1-jbwyatt4@gmail.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/comedi_internal.h b/drivers/staging/comedi/comedi_internal.h
index 515f293a5d26..1d54a0dba347 100644
--- a/drivers/staging/comedi/comedi_internal.h
+++ b/drivers/staging/comedi/comedi_internal.h
@@ -32,8 +32,8 @@ void comedi_buf_map_get(struct comedi_buf_map *bm);
 int comedi_buf_map_put(struct comedi_buf_map *bm);
 int comedi_buf_map_access(struct comedi_buf_map *bm, unsigned long offset,
 			  void *buf, int len, int write);
-struct comedi_buf_map *comedi_buf_map_from_subdev_get(
-		struct comedi_subdevice *s);
+struct comedi_buf_map *
+comedi_buf_map_from_subdev_get(struct comedi_subdevice *s);
 unsigned int comedi_buf_write_n_available(struct comedi_subdevice *s);
 unsigned int comedi_buf_write_n_allocated(struct comedi_subdevice *s);
 void comedi_device_cancel_all(struct comedi_device *dev);

commit b24413180f5600bcb3bb70fbed5cf186b60864bd
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Wed Nov 1 15:07:57 2017 +0100

    License cleanup: add SPDX GPL-2.0 license identifier to files with no license
    
    Many source files in the tree are missing licensing information, which
    makes it harder for compliance tools to determine the correct license.
    
    By default all files without license information are under the default
    license of the kernel, which is GPL version 2.
    
    Update the files which contain no license information with the 'GPL-2.0'
    SPDX license identifier.  The SPDX identifier is a legally binding
    shorthand, which can be used instead of the full boiler plate text.
    
    This patch is based on work done by Thomas Gleixner and Kate Stewart and
    Philippe Ombredanne.
    
    How this work was done:
    
    Patches were generated and checked against linux-4.14-rc6 for a subset of
    the use cases:
     - file had no licensing information it it.
     - file was a */uapi/* one with no licensing information in it,
     - file was a */uapi/* one with existing licensing information,
    
    Further patches will be generated in subsequent months to fix up cases
    where non-standard license headers were used, and references to license
    had to be inferred by heuristics based on keywords.
    
    The analysis to determine which SPDX License Identifier to be applied to
    a file was done in a spreadsheet of side by side results from of the
    output of two independent scanners (ScanCode & Windriver) producing SPDX
    tag:value files created by Philippe Ombredanne.  Philippe prepared the
    base worksheet, and did an initial spot review of a few 1000 files.
    
    The 4.13 kernel was the starting point of the analysis with 60,537 files
    assessed.  Kate Stewart did a file by file comparison of the scanner
    results in the spreadsheet to determine which SPDX license identifier(s)
    to be applied to the file. She confirmed any determination that was not
    immediately clear with lawyers working with the Linux Foundation.
    
    Criteria used to select files for SPDX license identifier tagging was:
     - Files considered eligible had to be source code files.
     - Make and config files were included as candidates if they contained >5
       lines of source
     - File already had some variant of a license header in it (even if <5
       lines).
    
    All documentation files were explicitly excluded.
    
    The following heuristics were used to determine which SPDX license
    identifiers to apply.
    
     - when both scanners couldn't find any license traces, file was
       considered to have no license information in it, and the top level
       COPYING file license applied.
    
       For non */uapi/* files that summary was:
    
       SPDX license identifier                            # files
       ---------------------------------------------------|-------
       GPL-2.0                                              11139
    
       and resulted in the first patch in this series.
    
       If that file was a */uapi/* path one, it was "GPL-2.0 WITH
       Linux-syscall-note" otherwise it was "GPL-2.0".  Results of that was:
    
       SPDX license identifier                            # files
       ---------------------------------------------------|-------
       GPL-2.0 WITH Linux-syscall-note                        930
    
       and resulted in the second patch in this series.
    
     - if a file had some form of licensing information in it, and was one
       of the */uapi/* ones, it was denoted with the Linux-syscall-note if
       any GPL family license was found in the file or had no licensing in
       it (per prior point).  Results summary:
    
       SPDX license identifier                            # files
       ---------------------------------------------------|------
       GPL-2.0 WITH Linux-syscall-note                       270
       GPL-2.0+ WITH Linux-syscall-note                      169
       ((GPL-2.0 WITH Linux-syscall-note) OR BSD-2-Clause)    21
       ((GPL-2.0 WITH Linux-syscall-note) OR BSD-3-Clause)    17
       LGPL-2.1+ WITH Linux-syscall-note                      15
       GPL-1.0+ WITH Linux-syscall-note                       14
       ((GPL-2.0+ WITH Linux-syscall-note) OR BSD-3-Clause)    5
       LGPL-2.0+ WITH Linux-syscall-note                       4
       LGPL-2.1 WITH Linux-syscall-note                        3
       ((GPL-2.0 WITH Linux-syscall-note) OR MIT)              3
       ((GPL-2.0 WITH Linux-syscall-note) AND MIT)             1
    
       and that resulted in the third patch in this series.
    
     - when the two scanners agreed on the detected license(s), that became
       the concluded license(s).
    
     - when there was disagreement between the two scanners (one detected a
       license but the other didn't, or they both detected different
       licenses) a manual inspection of the file occurred.
    
     - In most cases a manual inspection of the information in the file
       resulted in a clear resolution of the license that should apply (and
       which scanner probably needed to revisit its heuristics).
    
     - When it was not immediately clear, the license identifier was
       confirmed with lawyers working with the Linux Foundation.
    
     - If there was any question as to the appropriate license identifier,
       the file was flagged for further research and to be revisited later
       in time.
    
    In total, over 70 hours of logged manual review was done on the
    spreadsheet to determine the SPDX license identifiers to apply to the
    source files by Kate, Philippe, Thomas and, in some cases, confirmation
    by lawyers working with the Linux Foundation.
    
    Kate also obtained a third independent scan of the 4.13 code base from
    FOSSology, and compared selected files where the other two scanners
    disagreed against that SPDX file, to see if there was new insights.  The
    Windriver scanner is based on an older version of FOSSology in part, so
    they are related.
    
    Thomas did random spot checks in about 500 files from the spreadsheets
    for the uapi headers and agreed with SPDX license identifier in the
    files he inspected. For the non-uapi files Thomas did random spot checks
    in about 15000 files.
    
    In initial set of patches against 4.14-rc6, 3 files were found to have
    copy/paste license identifier errors, and have been fixed to reflect the
    correct identifier.
    
    Additionally Philippe spent 10 hours this week doing a detailed manual
    inspection and review of the 12,461 patched files from the initial patch
    version early this week with:
     - a full scancode scan run, collecting the matched texts, detected
       license ids and scores
     - reviewing anything where there was a license detected (about 500+
       files) to ensure that the applied SPDX license was correct
     - reviewing anything where there was no detection but the patch license
       was not GPL-2.0 WITH Linux-syscall-note to ensure that the applied
       SPDX license was correct
    
    This produced a worksheet with 20 files needing minor correction.  This
    worksheet was then exported into 3 different .csv files for the
    different types of files to be modified.
    
    These .csv files were then reviewed by Greg.  Thomas wrote a script to
    parse the csv files and add the proper SPDX tag to the file, in the
    format that the file expected.  This script was further refined by Greg
    based on the output to detect more types of files automatically and to
    distinguish between header and source .c files (which need different
    comment types.)  Finally Greg ran the script using the .csv files to
    generate the patches.
    
    Reviewed-by: Kate Stewart <kstewart@linuxfoundation.org>
    Reviewed-by: Philippe Ombredanne <pombredanne@nexb.com>
    Reviewed-by: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/comedi_internal.h b/drivers/staging/comedi/comedi_internal.h
index 6246f4a78ca6..515f293a5d26 100644
--- a/drivers/staging/comedi/comedi_internal.h
+++ b/drivers/staging/comedi/comedi_internal.h
@@ -1,3 +1,4 @@
+/* SPDX-License-Identifier: GPL-2.0 */
 #ifndef _COMEDI_INTERNAL_H
 #define _COMEDI_INTERNAL_H
 

commit 255364f7b8a0fee3fb642b3e1521e943dd67bfb3
Author: Ian Abbott <abbotti@mev.co.uk>
Date:   Thu Apr 20 19:05:14 2017 +0100

    staging: comedi: support vm_access_process for mmap'd buffer
    
    If a process that has mmap'd a COMEDI buffer is being run under a
    debugger such as GDB, the buffer contents are inaccessible from the
    debugger.  Support the `access()` VM operation to allow the buffer
    contents to be accessed by another process.
    
    Signed-off-by: Ian Abbott <abbotti@mev.co.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/comedi_internal.h b/drivers/staging/comedi/comedi_internal.h
index 534415e331b6..6246f4a78ca6 100644
--- a/drivers/staging/comedi/comedi_internal.h
+++ b/drivers/staging/comedi/comedi_internal.h
@@ -29,6 +29,8 @@ void comedi_buf_reset(struct comedi_subdevice *s);
 bool comedi_buf_is_mmapped(struct comedi_subdevice *s);
 void comedi_buf_map_get(struct comedi_buf_map *bm);
 int comedi_buf_map_put(struct comedi_buf_map *bm);
+int comedi_buf_map_access(struct comedi_buf_map *bm, unsigned long offset,
+			  void *buf, int len, int write);
 struct comedi_buf_map *comedi_buf_map_from_subdev_get(
 		struct comedi_subdevice *s);
 unsigned int comedi_buf_write_n_available(struct comedi_subdevice *s);

commit 751922da902c4a4b2861f8ec8d0c3ee9178de9ff
Author: Ian Abbott <abbotti@mev.co.uk>
Date:   Thu Dec 15 13:19:48 2016 +0000

    staging: comedi: comedi_internal.h: add identifiers to function parameters
    
    Fix checkpatch.pl warnings of the form "function definition argument
    'foo' should also have an identifier name".
    
    Signed-off-by: Ian Abbott <abbotti@mev.co.uk>
    Reviewed-by: H Hartley Sweeten <hsweeten@visionengravers.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/comedi_internal.h b/drivers/staging/comedi/comedi_internal.h
index 3f2c88ae6470..534415e331b6 100644
--- a/drivers/staging/comedi/comedi_internal.h
+++ b/drivers/staging/comedi/comedi_internal.h
@@ -44,11 +44,12 @@ extern unsigned int comedi_default_buf_maxsize_kb;
 extern struct comedi_driver *comedi_drivers;
 extern struct mutex comedi_drivers_list_lock;
 
-int insn_inval(struct comedi_device *, struct comedi_subdevice *,
-	       struct comedi_insn *, unsigned int *);
+int insn_inval(struct comedi_device *dev, struct comedi_subdevice *s,
+	       struct comedi_insn *insn, unsigned int *data);
 
-void comedi_device_detach(struct comedi_device *);
-int comedi_device_attach(struct comedi_device *, struct comedi_devconfig *);
+void comedi_device_detach(struct comedi_device *dev);
+int comedi_device_attach(struct comedi_device *dev,
+			 struct comedi_devconfig *it);
 
 #ifdef CONFIG_PROC_FS
 

commit 432fbde739583140c7ee937910786a9d740804c9
Author: Ian Abbott <abbotti@mev.co.uk>
Date:   Fri Oct 9 12:26:49 2015 +0100

    staging: comedi: add new comedi_buf_write_n_available()
    
    Add a new function `comedi_buf_write_n_available()` to return the amount
    of buffer space available for writing, including space already allocated
    by `comedi_buf_write_alloc()` plus any unallocated space available.
    This is currently just for internal use by the comedi core, so is not
    exported.
    
    Signed-off-by: Ian Abbott <abbotti@mev.co.uk>
    Reviewed-by: H Hartley Sweeten <hsweeten@visionengravers.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/comedi_internal.h b/drivers/staging/comedi/comedi_internal.h
index cd9437f72c35..3f2c88ae6470 100644
--- a/drivers/staging/comedi/comedi_internal.h
+++ b/drivers/staging/comedi/comedi_internal.h
@@ -31,6 +31,7 @@ void comedi_buf_map_get(struct comedi_buf_map *bm);
 int comedi_buf_map_put(struct comedi_buf_map *bm);
 struct comedi_buf_map *comedi_buf_map_from_subdev_get(
 		struct comedi_subdevice *s);
+unsigned int comedi_buf_write_n_available(struct comedi_subdevice *s);
 unsigned int comedi_buf_write_n_allocated(struct comedi_subdevice *s);
 void comedi_device_cancel_all(struct comedi_device *dev);
 bool comedi_can_auto_free_spriv(struct comedi_subdevice *s);

commit 8fc369ae38ff281d38e9ea11805a5cae862989bc
Author: Ian Abbott <abbotti@mev.co.uk>
Date:   Tue Apr 21 13:18:10 2015 +0100

    staging: comedi: wrap COMEDI_SRF_FREE_SPRIV usage
    
    The `COMEDI_SRF_FREE_SPRIV` flag in the `runflags` member of `struct
    comedi_subdevice` indicates that the memory pointed to by the `private`
    member can be automatically freed by the comedi core on subdevice
    clean-up (when the low-level comedi device is being "detached").  the
    flag doesn't really belong in `runflags`, but it was somewhere
    convenient to keep it without having to add a new member to the
    structure.
    
    Rather than access the `COMEDI_SRF_FREE_SPRIV` flag directly, use some
    new wrapper functions:
    
    * comedi_can_auto_free_spriv(s) - checks whether the subdevice's
      `s->private` points to memory that can be freed automatically.
    * comedi_set_spriv_auto_free(s) - marks the subdevice as having a
      `s->private` that points to memory that can be freed automatically.
    
    Export `comedi_set_spriv_auto_free()` for use by the low-level comedi
    driver modules, in particular the "amplc_dio200_common" module.
    
    Signed-off-by: Ian Abbott <abbotti@mev.co.uk>
    Reviewed-by: H Hartley Sweeten <hsweeten@visionengravers.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/comedi_internal.h b/drivers/staging/comedi/comedi_internal.h
index 3b918538847e..cd9437f72c35 100644
--- a/drivers/staging/comedi/comedi_internal.h
+++ b/drivers/staging/comedi/comedi_internal.h
@@ -33,6 +33,7 @@ struct comedi_buf_map *comedi_buf_map_from_subdev_get(
 		struct comedi_subdevice *s);
 unsigned int comedi_buf_write_n_allocated(struct comedi_subdevice *s);
 void comedi_device_cancel_all(struct comedi_device *dev);
+bool comedi_can_auto_free_spriv(struct comedi_subdevice *s);
 
 extern unsigned int comedi_default_buf_size_kb;
 extern unsigned int comedi_default_buf_maxsize_kb;

commit 78cff59e88eb0f3ae81f50741a8ce2e38f890139
Author: Ian Abbott <abbotti@mev.co.uk>
Date:   Fri Mar 27 15:58:19 2015 +0000

    staging: comedi: make comedi_internal.h self-reliant
    
    Add `#include`s and declare incomplete types to "comedi_internal.h" so
    that .c files still compile when it is the first file included.
    
    Signed-off-by: Ian Abbott <abbotti@mev.co.uk>
    Reviewed-by: H Hartley Sweeten <hsweeten@visionengravers.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/comedi_internal.h b/drivers/staging/comedi/comedi_internal.h
index d57817c19aea..3b918538847e 100644
--- a/drivers/staging/comedi/comedi_internal.h
+++ b/drivers/staging/comedi/comedi_internal.h
@@ -1,11 +1,21 @@
 #ifndef _COMEDI_INTERNAL_H
 #define _COMEDI_INTERNAL_H
 
+#include <linux/compiler.h>
 #include <linux/types.h>
 
 /*
  * various internal comedi stuff
  */
+
+struct comedi_buf_map;
+struct comedi_devconfig;
+struct comedi_device;
+struct comedi_insn;
+struct comedi_rangeinfo;
+struct comedi_subdevice;
+struct device;
+
 int do_rangeinfo_ioctl(struct comedi_device *dev,
 		       struct comedi_rangeinfo __user *arg);
 struct comedi_device *comedi_alloc_board_minor(struct device *hardware_device);

commit 663dfc05053d826c2b319bda6c6864a1c005608d
Author: H Hartley Sweeten <hsweeten@visionengravers.com>
Date:   Fri Jul 18 14:28:12 2014 -0700

    staging: comedi: comedi_internal.h: checkpatch.pl --strict cleanup
    
    Fix the checkpatch.pl --strict issues:
    
    CHECK: Please use a blank line after function/struct/union/enum declarations
    
    Signed-off-by: H Hartley Sweeten <hsweeten@visionengravers.com>
    Cc: Ian Abbott <abbotti@mev.co.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/comedi_internal.h b/drivers/staging/comedi/comedi_internal.h
index e978c223f5b5..d57817c19aea 100644
--- a/drivers/staging/comedi/comedi_internal.h
+++ b/drivers/staging/comedi/comedi_internal.h
@@ -48,6 +48,7 @@ void comedi_proc_cleanup(void);
 static inline void comedi_proc_init(void)
 {
 }
+
 static inline void comedi_proc_cleanup(void)
 {
 }

commit d4526ab4e03bb16beee03547bfcbc1d8e09707f1
Author: Ian Abbott <abbotti@mev.co.uk>
Date:   Tue May 6 13:12:11 2014 +0100

    staging: comedi: pass subdevice to comedi_buf_is_mmapped()
    
    Change the parameters of `comedi_buf_is_mmapped()` to pass a pointer to
    the comedi subdevice instead of a pointer to the "async" structure
    belonging to the subdevice.
    
    The main aim at the moment is to replace all the `struct comedi_async *`
    parameters with `struct comedi_subdevice *` parameters in the comedi
    driver API.
    
    Signed-off-by: Ian Abbott <abbotti@mev.co.uk>
    Reviewed-by: H Hartley Sweeten <hsweeten@visionengravers.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/comedi_internal.h b/drivers/staging/comedi/comedi_internal.h
index 3cc81de03b56..e978c223f5b5 100644
--- a/drivers/staging/comedi/comedi_internal.h
+++ b/drivers/staging/comedi/comedi_internal.h
@@ -16,7 +16,7 @@ void comedi_free_subdevice_minor(struct comedi_subdevice *s);
 int comedi_buf_alloc(struct comedi_device *dev, struct comedi_subdevice *s,
 		     unsigned long new_size);
 void comedi_buf_reset(struct comedi_subdevice *s);
-bool comedi_buf_is_mmapped(struct comedi_async *async);
+bool comedi_buf_is_mmapped(struct comedi_subdevice *s);
 void comedi_buf_map_get(struct comedi_buf_map *bm);
 int comedi_buf_map_put(struct comedi_buf_map *bm);
 struct comedi_buf_map *comedi_buf_map_from_subdev_get(

commit fcc18a9aa2c43765ba37012879936fbf142ba91c
Author: Ian Abbott <abbotti@mev.co.uk>
Date:   Tue May 6 13:12:10 2014 +0100

    staging: comedi: pass subdevice to comedi_buf_reset()
    
    Change the parameters of `comedi_buf_reset()` to pass a pointer to the
    comedi subdevice instead of a pointer to the "async" structure belonging
    to the subdevice.
    
    The main aim at the moment is to replace all the `struct comedi_async *`
    parameters with `struct comedi_subdevice *` parameters in the comedi
    driver API.
    
    Signed-off-by: Ian Abbott <abbotti@mev.co.uk>
    Reviewed-by: H Hartley Sweeten <hsweeten@visionengravers.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/comedi_internal.h b/drivers/staging/comedi/comedi_internal.h
index 36e7a99b5079..3cc81de03b56 100644
--- a/drivers/staging/comedi/comedi_internal.h
+++ b/drivers/staging/comedi/comedi_internal.h
@@ -15,7 +15,7 @@ void comedi_free_subdevice_minor(struct comedi_subdevice *s);
 
 int comedi_buf_alloc(struct comedi_device *dev, struct comedi_subdevice *s,
 		     unsigned long new_size);
-void comedi_buf_reset(struct comedi_async *async);
+void comedi_buf_reset(struct comedi_subdevice *s);
 bool comedi_buf_is_mmapped(struct comedi_async *async);
 void comedi_buf_map_get(struct comedi_buf_map *bm);
 int comedi_buf_map_put(struct comedi_buf_map *bm);

commit 0f1f34e844a24187270315ffb539d4bd1900c333
Author: Ian Abbott <abbotti@mev.co.uk>
Date:   Tue May 6 13:12:06 2014 +0100

    staging: comedi: pass subdevice to comedi_buf_write_n_allocated()
    
    Change the parameters of `comedi_buf_write_n_allocated()` to pass a
    pointer to the comedi subdevice instead of a pointer to the "async"
    structure belonging to the subdevice.
    
    The main aim at the moment is to replace all the `struct comedi_async *`
    parameters with `struct comedi_subdevice *` parameters in the comedi
    driver API.
    
    Signed-off-by: Ian Abbott <abbotti@mev.co.uk>
    Reviewed-by: H Hartley Sweeten <hsweeten@visionengravers.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/comedi_internal.h b/drivers/staging/comedi/comedi_internal.h
index a492f2d2436e..36e7a99b5079 100644
--- a/drivers/staging/comedi/comedi_internal.h
+++ b/drivers/staging/comedi/comedi_internal.h
@@ -21,7 +21,7 @@ void comedi_buf_map_get(struct comedi_buf_map *bm);
 int comedi_buf_map_put(struct comedi_buf_map *bm);
 struct comedi_buf_map *comedi_buf_map_from_subdev_get(
 		struct comedi_subdevice *s);
-unsigned int comedi_buf_write_n_allocated(struct comedi_async *async);
+unsigned int comedi_buf_write_n_allocated(struct comedi_subdevice *s);
 void comedi_device_cancel_all(struct comedi_device *dev);
 
 extern unsigned int comedi_default_buf_size_kb;

commit b34aa86f12e8848ba453215602c8c50fa63c4cb3
Author: Ian Abbott <abbotti@mev.co.uk>
Date:   Thu Apr 10 19:41:57 2014 +0100

    staging: comedi: fix circular locking dependency in comedi_mmap()
    
    Mmapping a comedi data buffer with lockdep checking enabled produced the
    following kernel debug messages:
    
    ======================================================
    [ INFO: possible circular locking dependency detected ]
    3.5.0-rc3-ija1+ #9 Tainted: G         C
    -------------------------------------------------------
    comedi_test/4160 is trying to acquire lock:
     (&dev->mutex#2){+.+.+.}, at: [<ffffffffa00313f4>] comedi_mmap+0x57/0x1d9 [comedi]
    
    but task is already holding lock:
     (&mm->mmap_sem){++++++}, at: [<ffffffff810c96fe>] vm_mmap_pgoff+0x41/0x76
    
    which lock already depends on the new lock.
    
    the existing dependency chain (in reverse order) is:
    
    -> #1 (&mm->mmap_sem){++++++}:
           [<ffffffff8106d0e8>] lock_acquire+0x97/0x105
           [<ffffffff810ce3bc>] might_fault+0x6d/0x90
           [<ffffffffa0031ffb>] do_devinfo_ioctl.isra.7+0x11e/0x14c [comedi]
           [<ffffffffa003227f>] comedi_unlocked_ioctl+0x256/0xe48 [comedi]
           [<ffffffff810f7fcd>] vfs_ioctl+0x18/0x34
           [<ffffffff810f87fd>] do_vfs_ioctl+0x382/0x43c
           [<ffffffff810f88f9>] sys_ioctl+0x42/0x65
           [<ffffffff81415c62>] system_call_fastpath+0x16/0x1b
    
    -> #0 (&dev->mutex#2){+.+.+.}:
           [<ffffffff8106c528>] __lock_acquire+0x101d/0x1591
           [<ffffffff8106d0e8>] lock_acquire+0x97/0x105
           [<ffffffff8140c894>] mutex_lock_nested+0x46/0x2a4
           [<ffffffffa00313f4>] comedi_mmap+0x57/0x1d9 [comedi]
           [<ffffffff810d5816>] mmap_region+0x281/0x492
           [<ffffffff810d5c92>] do_mmap_pgoff+0x26b/0x2a7
           [<ffffffff810c971a>] vm_mmap_pgoff+0x5d/0x76
           [<ffffffff810d493f>] sys_mmap_pgoff+0xc7/0x10d
           [<ffffffff81004d36>] sys_mmap+0x16/0x20
           [<ffffffff81415c62>] system_call_fastpath+0x16/0x1b
    
    other info that might help us debug this:
    
     Possible unsafe locking scenario:
    
           CPU0                    CPU1
           ----                    ----
      lock(&mm->mmap_sem);
                                   lock(&dev->mutex#2);
                                   lock(&mm->mmap_sem);
      lock(&dev->mutex#2);
    
     *** DEADLOCK ***
    
    To avoid the circular dependency, just try to get the lock in
    `comedi_mmap()` instead of blocking.  Since the comedi device's main mutex
    is heavily used, do a down-read of its `attach_lock` rwsemaphore
    instead.  Trying to down-read `attach_lock` should only fail if
    some task has down-write locked it, and that is only done while the
    comedi device is being attached to or detached from a low-level hardware
    device.
    
    Unfortunately, acquiring the `attach_lock` doesn't prevent another
    task replacing the comedi data buffer we are trying to mmap.  The
    details of the buffer are held in a `struct comedi_buf_map` and pointed
    to by `s->async->buf_map` where `s` is the comedi subdevice whose buffer
    we are trying to map.  The `struct comedi_buf_map` is already reference
    counted with a `struct kref`, so we can stop it being freed prematurely.
    
    Modify `comedi_mmap()` to call new function
    `comedi_buf_map_from_subdev_get()` to read the subdevice's current
    buffer map pointer and increment its reference instead of accessing
    `async->buf_map` directly.  Call `comedi_buf_map_put()` to decrement the
    reference once the buffer map structure has been dealt with.  (Note that
    `comedi_buf_map_put()` does nothing if passed a NULL pointer.)
    
    `comedi_buf_map_from_subdev_get()` checks the subdevice's buffer map
    pointer has been set and the buffer map has been initialized enough for
    `comedi_mmap()` to deal with it (specifically, check the `n_pages`
    member has been set to a non-zero value).  If all is well, the buffer
    map's reference is incremented and a pointer to it is returned.  The
    comedi subdevice's spin-lock is used to protect the checks.  Also use
    the spin-lock in `__comedi_buf_alloc()` and `__comedi_buf_free()` to
    protect changes to the subdevice's buffer map structure pointer and the
    buffer map structure's `n_pages` member.  (This checking of `n_pages` is
    a bit clunky and I [Ian Abbott] plan to deal with it in the future.)
    
    Signed-off-by: Ian Abbott <abbotti@mev.co.uk>
    Cc: <stable@vger.kernel.org> # 3.14.x, 3.15.x
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/comedi_internal.h b/drivers/staging/comedi/comedi_internal.h
index 9a746570f161..a492f2d2436e 100644
--- a/drivers/staging/comedi/comedi_internal.h
+++ b/drivers/staging/comedi/comedi_internal.h
@@ -19,6 +19,8 @@ void comedi_buf_reset(struct comedi_async *async);
 bool comedi_buf_is_mmapped(struct comedi_async *async);
 void comedi_buf_map_get(struct comedi_buf_map *bm);
 int comedi_buf_map_put(struct comedi_buf_map *bm);
+struct comedi_buf_map *comedi_buf_map_from_subdev_get(
+		struct comedi_subdevice *s);
 unsigned int comedi_buf_write_n_allocated(struct comedi_async *async);
 void comedi_device_cancel_all(struct comedi_device *dev);
 

commit af93da31634d6d55c9d313b5c49af8b272f7cb79
Author: Ian Abbott <abbotti@mev.co.uk>
Date:   Fri Nov 8 15:03:43 2013 +0000

    staging: comedi: protect buffer from being freed while mmapped
    
    If a comedi device is automatically detached by `comedi_auto_unconfig()`
    any data buffers associated with subdevices that support asynchronous
    commands will be freed.  If the buffer is mmapped at the time, bad
    things are likely to happen!  Prevent this by moving some of the buffer
    details from `struct comedi_async` into a new, dynamically allocated,
    and kref-counted `struct comedi_buf_map`.  This holds a list of pages, a
    reference count, and enough information to free the pages.  The new
    member `buf_map` of `struct comedi_async` points to a `struct
    comedi_buf_map` when the buffer size is non-zero.
    
    Provide a new helper function `comedi_buf_is_mapped()` to check whether
    an a buffer is mmapped.  If it is mmapped, the buffer is not allowed to
    be resized and the device is not allowed to be manually detached by the
    `COMEDI_DEVCONFIG` ioctl.  Provide helper functions
    `comedi_buf_map_get()` and `comedi_buf_map_put()` to manipulate the
    reference count of the `struct comedi_buf_map`, which will be freed
    along with its contents via the 'release' callback of the `kref_put()`
    call.  The reference count is manipulated by the vma operations and the
    mmap file operation.
    
    Now, when the comedi device is automatically detached, the buffer will
    be effectively freed by calling `comedi_buf_alloc()` with a new buffer
    size of 0.  That calls local function `__comedi_buf_free()` which calls
    `comedi_buf_map_put()` on the `buf_map` member to free it.  It won't
    actually be freed until the final 'put'.
    
    Signed-off-by: Ian Abbott <abbotti@mev.co.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/comedi_internal.h b/drivers/staging/comedi/comedi_internal.h
index 151693b11383..9a746570f161 100644
--- a/drivers/staging/comedi/comedi_internal.h
+++ b/drivers/staging/comedi/comedi_internal.h
@@ -16,6 +16,9 @@ void comedi_free_subdevice_minor(struct comedi_subdevice *s);
 int comedi_buf_alloc(struct comedi_device *dev, struct comedi_subdevice *s,
 		     unsigned long new_size);
 void comedi_buf_reset(struct comedi_async *async);
+bool comedi_buf_is_mmapped(struct comedi_async *async);
+void comedi_buf_map_get(struct comedi_buf_map *bm);
+int comedi_buf_map_put(struct comedi_buf_map *bm);
 unsigned int comedi_buf_write_n_allocated(struct comedi_async *async);
 void comedi_device_cancel_all(struct comedi_device *dev);
 

commit d19db51a0eeb659cd924a9d08b20a2ed4ee46b15
Author: Ian Abbott <abbotti@mev.co.uk>
Date:   Fri Nov 8 15:03:28 2013 +0000

    staging: comedi: cancel commands before detaching device
    
    The comedi core module's handling of the `COMEDI_DEVCONFIG` ioctl will
    not allow a device to be detached if it is busy.  However, comedi
    devices can also be auto-detached due to a removal of a hardware device.
    One of the things we should do in that case is cancel any asynchronous
    commands that are running.  Add a new function
    `comedi_device_cancel_all()` to do that and call it from
    `comedi_device_detach()`.
    
    Signed-off-by: Ian Abbott <abbotti@mev.co.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/comedi_internal.h b/drivers/staging/comedi/comedi_internal.h
index fda1a7ba0e16..151693b11383 100644
--- a/drivers/staging/comedi/comedi_internal.h
+++ b/drivers/staging/comedi/comedi_internal.h
@@ -17,6 +17,7 @@ int comedi_buf_alloc(struct comedi_device *dev, struct comedi_subdevice *s,
 		     unsigned long new_size);
 void comedi_buf_reset(struct comedi_async *async);
 unsigned int comedi_buf_write_n_allocated(struct comedi_async *async);
+void comedi_device_cancel_all(struct comedi_device *dev);
 
 extern unsigned int comedi_default_buf_size_kb;
 extern unsigned int comedi_default_buf_maxsize_kb;

commit c383e2d6dacf0b6fdd40fbaf044e235cac54a20f
Author: Ian Abbott <abbotti@mev.co.uk>
Date:   Thu Jun 27 14:50:58 2013 +0100

    staging: comedi: use a mutex when accessing driver list
    
    Low-level comedi drivers registered with the comedi core by
    `comedi_driver_register()` are linked together into a simple linked list
    headed by the `comedi_drivers` variable and chained by the `next` member
    of `struct comedi_driver`.  A driver is removed from the list by
    `comedi_driver_unregister()`.  The driver list is iterated through by
    `comedi_device_attach()` when the `COMEDI_DEVCONFIG` ioctl is used to
    attach a "legacy" device to a driver, and is also iterated through by
    `comedi_read()` in "proc.c" when reading "/proc/comedi".
    
    There is currently no protection against items being added or removed
    from the list while it is being iterated.  Add a mutex
    `comedi_drivers_list_lock` to be locked while adding or removing an item
    on the list, or when iterating through the list.
    
    `comedi_driver_unregister()` also checks for and detaches any devices
    using the driver.  This is currently done before unlinking the driver
    from the list, but it makes more sense to unlink the driver from the
    list first to prevent `comedi_device_attach()` attempting to use it, so
    move the unlinking part to the start of the function.  Also, in
    `comedi_device_attach()` hold on to the mutex until we've finished
    attempting to attach the device to avoid it interfering with the
    detachment in `comedi_driver_unregister()`.
    
    Signed-off-by: Ian Abbott <abbotti@mev.co.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/comedi_internal.h b/drivers/staging/comedi/comedi_internal.h
index d5e03e558b35..fda1a7ba0e16 100644
--- a/drivers/staging/comedi/comedi_internal.h
+++ b/drivers/staging/comedi/comedi_internal.h
@@ -24,6 +24,7 @@ extern unsigned int comedi_default_buf_maxsize_kb;
 /* drivers.c */
 
 extern struct comedi_driver *comedi_drivers;
+extern struct mutex comedi_drivers_list_lock;
 
 int insn_inval(struct comedi_device *, struct comedi_subdevice *,
 	       struct comedi_insn *, unsigned int *);

commit 7638ffcb50903d9ddbf605c7e9578d72658a960a
Author: Ian Abbott <abbotti@mev.co.uk>
Date:   Thu Apr 4 14:58:50 2013 +0100

    staging: comedi: change comedi_alloc_board_minor() to return pointer
    
    Change `comedi_alloc_board_minor()` to return a pointer to the allocated
    `struct comedi_device` instead of a minor device number.  Return an
    `ERR_PTR()` value on error instead of a negative error number.  This
    saves a call to `comedi_dev_from_minor()` in `comedi_auto_config()`.
    
    Also change it to use a local variable `dev` to hold the pointer to the
    `struct comedi_device` instead of using `info->device` all the time.
    
    Signed-off-by: Ian Abbott <abbotti@mev.co.uk>
    Reviewed-by: H Hartley Sweeten <hsweeten@visionengravers.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/comedi_internal.h b/drivers/staging/comedi/comedi_internal.h
index 05e9e6d951d0..d5e03e558b35 100644
--- a/drivers/staging/comedi/comedi_internal.h
+++ b/drivers/staging/comedi/comedi_internal.h
@@ -8,7 +8,7 @@
  */
 int do_rangeinfo_ioctl(struct comedi_device *dev,
 		       struct comedi_rangeinfo __user *arg);
-int comedi_alloc_board_minor(struct device *hardware_device);
+struct comedi_device *comedi_alloc_board_minor(struct device *hardware_device);
 void comedi_release_hardware_device(struct device *hardware_device);
 int comedi_alloc_subdevice_minor(struct comedi_subdevice *s);
 void comedi_free_subdevice_minor(struct comedi_subdevice *s);

commit 70f30c3771f1e7c55d381954d84beff9c257a2b6
Author: Ian Abbott <abbotti@mev.co.uk>
Date:   Thu Apr 4 14:58:49 2013 +0100

    staging: comedi: make comedi_free_board_minor() static
    
    `comedi_free_board_minor()` is now only called from the same .c file it
    is defined in, so give it static linkage.
    
    Signed-off-by: Ian Abbott <abbotti@mev.co.uk>
    Reviewed-by: H Hartley Sweeten <hsweeten@visionengravers.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/comedi_internal.h b/drivers/staging/comedi/comedi_internal.h
index fd14de662e8f..05e9e6d951d0 100644
--- a/drivers/staging/comedi/comedi_internal.h
+++ b/drivers/staging/comedi/comedi_internal.h
@@ -9,7 +9,6 @@
 int do_rangeinfo_ioctl(struct comedi_device *dev,
 		       struct comedi_rangeinfo __user *arg);
 int comedi_alloc_board_minor(struct device *hardware_device);
-void comedi_free_board_minor(unsigned minor);
 void comedi_release_hardware_device(struct device *hardware_device);
 int comedi_alloc_subdevice_minor(struct comedi_subdevice *s);
 void comedi_free_subdevice_minor(struct comedi_subdevice *s);

commit 3346b798f202bf2f5b5272870ecdb75acec2e752
Author: Ian Abbott <abbotti@mev.co.uk>
Date:   Thu Apr 4 14:58:47 2013 +0100

    staging: comedi: add comedi_release_hardware_device()
    
    Add `comedi_release_hardware_device()` as a replacement for the call
    sequence `comedi_find_board_minor()`, `comedi_free_board_minor()`.  This
    is slightly safer as we can make sure nothing funny happens to the found
    `comedi_file_info_table[]` entry in the middle of the sequence.  Change
    `comedi_auto_unconfig()` to call the new function instead of the old
    sequence.  Remove `comedi_find_board_minor()` as it has no other
    callers.
    
    Signed-off-by: Ian Abbott <abbotti@mev.co.uk>
    Reviewed-by: H Hartley Sweeten <hsweeten@visionengravers.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/comedi_internal.h b/drivers/staging/comedi/comedi_internal.h
index b3743135f4aa..fd14de662e8f 100644
--- a/drivers/staging/comedi/comedi_internal.h
+++ b/drivers/staging/comedi/comedi_internal.h
@@ -10,7 +10,7 @@ int do_rangeinfo_ioctl(struct comedi_device *dev,
 		       struct comedi_rangeinfo __user *arg);
 int comedi_alloc_board_minor(struct device *hardware_device);
 void comedi_free_board_minor(unsigned minor);
-int comedi_find_board_minor(struct device *hardware_device);
+void comedi_release_hardware_device(struct device *hardware_device);
 int comedi_alloc_subdevice_minor(struct comedi_subdevice *s);
 void comedi_free_subdevice_minor(struct comedi_subdevice *s);
 

commit 4a79f730179061c54d5c4ce1b59c1babbb05912f
Author: H Hartley Sweeten <hsweeten@visionengravers.com>
Date:   Mon Feb 4 17:13:01 2013 -0700

    staging: comedi: remove 'comedi_autoconfig' module parameter
    
    This module parameter is used to enable the auto config mechanism
    in the comedi core. Most of the PCI, PCMCIA, and USB drivers have
    been converted to use the auto config mechanism and will not attach
    if it is disabled.
    
    Since the 'comedi_autoconfig' parameter is defaulted to true, just
    remove it so that the comedi drivers that use auto config will
    always be able to attach.
    
    Signed-off-by: H Hartley Sweeten <hsweeten@visionengravers.com>
    Cc: Ian Abbott <abbotti@mev.co.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/comedi_internal.h b/drivers/staging/comedi/comedi_internal.h
index df4c67652933..b3743135f4aa 100644
--- a/drivers/staging/comedi/comedi_internal.h
+++ b/drivers/staging/comedi/comedi_internal.h
@@ -21,7 +21,6 @@ unsigned int comedi_buf_write_n_allocated(struct comedi_async *async);
 
 extern unsigned int comedi_default_buf_size_kb;
 extern unsigned int comedi_default_buf_maxsize_kb;
-extern bool comedi_autoconfig;
 
 /* drivers.c */
 

commit f65cc5447eaea9f7be1ff54e27c9658a66c5910f
Author: Ian Abbott <abbotti@mev.co.uk>
Date:   Fri Feb 1 10:20:30 2013 +0000

    staging: comedi: change comedi_alloc_subdevice_minor parameters
    
    `comedi_alloc_subdevice_minor()` doesn't really need a parameter
    pointing to a `struct comedi_device` as it can get this information from
    the parameter pointing to a `struct comedi_subdevice`.  Just pass the
    subdevice parameter.
    
    Signed-by: Ian Abbott <abbotti@mev.co.uk>
    
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/comedi_internal.h b/drivers/staging/comedi/comedi_internal.h
index f4f0ff293797..df4c67652933 100644
--- a/drivers/staging/comedi/comedi_internal.h
+++ b/drivers/staging/comedi/comedi_internal.h
@@ -11,8 +11,7 @@ int do_rangeinfo_ioctl(struct comedi_device *dev,
 int comedi_alloc_board_minor(struct device *hardware_device);
 void comedi_free_board_minor(unsigned minor);
 int comedi_find_board_minor(struct device *hardware_device);
-int comedi_alloc_subdevice_minor(struct comedi_device *dev,
-				 struct comedi_subdevice *s);
+int comedi_alloc_subdevice_minor(struct comedi_subdevice *s);
 void comedi_free_subdevice_minor(struct comedi_subdevice *s);
 
 int comedi_buf_alloc(struct comedi_device *dev, struct comedi_subdevice *s,

commit e9ab1c2f7eb6bc5d885429381e773bc1a61646ca
Author: Ian Abbott <abbotti@mev.co.uk>
Date:   Fri Feb 1 10:20:29 2013 +0000

    staging: comedi: move comedi_alloc_subdevice_minor declarations
    
    Move the declarations of `comedi_alloc_subdevice_minor()` and
    `comedi_free_subdevice_minor()` from "comedidev.h" to
    "comedi_internal.h" since they are only of interest to the comedi core,
    and are not exported to the low-level comedi drivers.
    
    Signed-off-by: Ian Abbott <abbotti@mev.co.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/comedi_internal.h b/drivers/staging/comedi/comedi_internal.h
index b36bb954db58..f4f0ff293797 100644
--- a/drivers/staging/comedi/comedi_internal.h
+++ b/drivers/staging/comedi/comedi_internal.h
@@ -11,6 +11,9 @@ int do_rangeinfo_ioctl(struct comedi_device *dev,
 int comedi_alloc_board_minor(struct device *hardware_device);
 void comedi_free_board_minor(unsigned minor);
 int comedi_find_board_minor(struct device *hardware_device);
+int comedi_alloc_subdevice_minor(struct comedi_device *dev,
+				 struct comedi_subdevice *s);
+void comedi_free_subdevice_minor(struct comedi_subdevice *s);
 
 int comedi_buf_alloc(struct comedi_device *dev, struct comedi_subdevice *s,
 		     unsigned long new_size);

commit 085494ac2039433a5df9fdd6fb653579e18b8c71
Author: H Hartley Sweeten <hsweeten@visionengravers.com>
Date:   Wed Jan 30 15:25:31 2013 -0700

    staging: comedi: don't expose comedi_proc_{init,cleanup}
    
    These functions are only used by the comedi core. Move the
    prototypes to comedi_internal.h so they are not exposed to
    the comedi drivers.
    
    Signed-off-by: H Hartley Sweeten <hsweeten@visionengravers.com>
    Cc: Ian Abbott <abbotti@mev.co.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/comedi_internal.h b/drivers/staging/comedi/comedi_internal.h
index 81b6f7811625..b36bb954db58 100644
--- a/drivers/staging/comedi/comedi_internal.h
+++ b/drivers/staging/comedi/comedi_internal.h
@@ -31,4 +31,19 @@ int insn_inval(struct comedi_device *, struct comedi_subdevice *,
 void comedi_device_detach(struct comedi_device *);
 int comedi_device_attach(struct comedi_device *, struct comedi_devconfig *);
 
+#ifdef CONFIG_PROC_FS
+
+/* proc.c */
+
+void comedi_proc_init(void);
+void comedi_proc_cleanup(void);
+#else
+static inline void comedi_proc_init(void)
+{
+}
+static inline void comedi_proc_cleanup(void)
+{
+}
+#endif
+
 #endif /* _COMEDI_INTERNAL_H */

commit 39bd5e59b1ebdaa58d9458923ab96f61bda1296c
Author: H Hartley Sweeten <hsweeten@visionengravers.com>
Date:   Wed Jan 30 15:25:06 2013 -0700

    staging: comedi: don't expose comedi_device_{attach,detach}
    
    These functions are only used by the comedi core. Move the
    prototypes to comedi_internal.h so they are not exposed to
    the comedi drivers.
    
    Tidy up comedi_internal.h a bit so that all the internal stuff
    in drivers.c is grouped.
    
    Signed-off-by: H Hartley Sweeten <hsweeten@visionengravers.com>
    Cc: Ian Abbott <abbotti@mev.co.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/comedi_internal.h b/drivers/staging/comedi/comedi_internal.h
index 5e6f05b30e6c..81b6f7811625 100644
--- a/drivers/staging/comedi/comedi_internal.h
+++ b/drivers/staging/comedi/comedi_internal.h
@@ -8,8 +8,6 @@
  */
 int do_rangeinfo_ioctl(struct comedi_device *dev,
 		       struct comedi_rangeinfo __user *arg);
-int insn_inval(struct comedi_device *dev, struct comedi_subdevice *s,
-	       struct comedi_insn *insn, unsigned int *data);
 int comedi_alloc_board_minor(struct device *hardware_device);
 void comedi_free_board_minor(unsigned minor);
 int comedi_find_board_minor(struct device *hardware_device);
@@ -22,6 +20,15 @@ unsigned int comedi_buf_write_n_allocated(struct comedi_async *async);
 extern unsigned int comedi_default_buf_size_kb;
 extern unsigned int comedi_default_buf_maxsize_kb;
 extern bool comedi_autoconfig;
+
+/* drivers.c */
+
 extern struct comedi_driver *comedi_drivers;
 
+int insn_inval(struct comedi_device *, struct comedi_subdevice *,
+	       struct comedi_insn *, unsigned int *);
+
+void comedi_device_detach(struct comedi_device *);
+int comedi_device_attach(struct comedi_device *, struct comedi_devconfig *);
+
 #endif /* _COMEDI_INTERNAL_H */

commit 8bd650f91be07fb84adc2e47fb1379b7223b95a4
Author: H Hartley Sweeten <hsweeten@visionengravers.com>
Date:   Wed Jan 9 13:32:18 2013 -0700

    staging: comedi: comedi_buf: don't expose comedi_buf_write_n_allocated()
    
    This helper function is only called by the comedi core in comedi_buf.c
    and comedi_fops.c. For aesthetic reasons, move it to comedi_buf.c and
    remove the inline. Move the prototype from comedidev.h to comedi_internal.h
    so it's not exposed outside the comedi core.
    
    Signed-off-by: H Hartley Sweeten <hsweeten@visionengravers.com>
    Signed-off-by: Ian Abbott <abbotti@mev.co.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/comedi_internal.h b/drivers/staging/comedi/comedi_internal.h
index 9e94f2deb3be..5e6f05b30e6c 100644
--- a/drivers/staging/comedi/comedi_internal.h
+++ b/drivers/staging/comedi/comedi_internal.h
@@ -17,6 +17,7 @@ int comedi_find_board_minor(struct device *hardware_device);
 int comedi_buf_alloc(struct comedi_device *dev, struct comedi_subdevice *s,
 		     unsigned long new_size);
 void comedi_buf_reset(struct comedi_async *async);
+unsigned int comedi_buf_write_n_allocated(struct comedi_async *async);
 
 extern unsigned int comedi_default_buf_size_kb;
 extern unsigned int comedi_default_buf_maxsize_kb;

commit 61c9fb0eb08bc9b7164a6181b0062d9959406a34
Author: H Hartley Sweeten <hsweeten@visionengravers.com>
Date:   Wed Jan 9 13:27:07 2013 -0700

    staging: comedi: comedi_buf: rename comedi_reset_async_buf()
    
    For aesthetic reasons, rename this function to comedi_buf_reset(). This
    makes all the asynchronous buffer functions have the same namespace.
    
    Signed-off-by: H Hartley Sweeten <hsweeten@visionengravers.com>
    Signed-off-by: Ian Abbott <abbotti@mev.co.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/comedi_internal.h b/drivers/staging/comedi/comedi_internal.h
index e70ef0515d9a..9e94f2deb3be 100644
--- a/drivers/staging/comedi/comedi_internal.h
+++ b/drivers/staging/comedi/comedi_internal.h
@@ -13,9 +13,10 @@ int insn_inval(struct comedi_device *dev, struct comedi_subdevice *s,
 int comedi_alloc_board_minor(struct device *hardware_device);
 void comedi_free_board_minor(unsigned minor);
 int comedi_find_board_minor(struct device *hardware_device);
-void comedi_reset_async_buf(struct comedi_async *async);
+
 int comedi_buf_alloc(struct comedi_device *dev, struct comedi_subdevice *s,
 		     unsigned long new_size);
+void comedi_buf_reset(struct comedi_async *async);
 
 extern unsigned int comedi_default_buf_size_kb;
 extern unsigned int comedi_default_buf_maxsize_kb;

commit f286766e4ba899043714471a0a2c9f1474d2ab5c
Author: Ian Abbott <abbotti@mev.co.uk>
Date:   Tue Jun 19 10:17:46 2012 +0100

    staging: comedi: remove comedi_fops.h
    
    Move the contents of "comedi_fops.h" into "comedi_internal.h" and delete
    "comedi_fops.h". It only contains a couple of external variable
    declarations (and #include <linux/types.h>) and one of those isn't even
    declared in "comedi_fops.c".  The other one is an external declaration
    of a variable used to store a module parameter and some of those are
    already externally declared in "comedi_internal.h", so they can keep it
    company!
    
    Signed-off-by: Ian Abbott <abbotti@mev.co.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/comedi_internal.h b/drivers/staging/comedi/comedi_internal.h
index b004963a3d63..e70ef0515d9a 100644
--- a/drivers/staging/comedi/comedi_internal.h
+++ b/drivers/staging/comedi/comedi_internal.h
@@ -1,6 +1,8 @@
 #ifndef _COMEDI_INTERNAL_H
 #define _COMEDI_INTERNAL_H
 
+#include <linux/types.h>
+
 /*
  * various internal comedi stuff
  */
@@ -17,5 +19,7 @@ int comedi_buf_alloc(struct comedi_device *dev, struct comedi_subdevice *s,
 
 extern unsigned int comedi_default_buf_size_kb;
 extern unsigned int comedi_default_buf_maxsize_kb;
+extern bool comedi_autoconfig;
+extern struct comedi_driver *comedi_drivers;
 
 #endif /* _COMEDI_INTERNAL_H */

commit 97ce84de8c19823ab0377a7ffc7fa25a8caa6ab8
Author: Ian Abbott <abbotti@mev.co.uk>
Date:   Tue Jun 19 10:17:45 2012 +0100

    staging: comedi: comedi_internal.h inclusion guards
    
    Add a multiple inclusion guard macro to "comedi_internal.h".
    
    Signed-off-by: Ian Abbott <abbotti@mev.co.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/comedi_internal.h b/drivers/staging/comedi/comedi_internal.h
index 7ed20a04eef5..b004963a3d63 100644
--- a/drivers/staging/comedi/comedi_internal.h
+++ b/drivers/staging/comedi/comedi_internal.h
@@ -1,3 +1,6 @@
+#ifndef _COMEDI_INTERNAL_H
+#define _COMEDI_INTERNAL_H
+
 /*
  * various internal comedi stuff
  */
@@ -14,3 +17,5 @@ int comedi_buf_alloc(struct comedi_device *dev, struct comedi_subdevice *s,
 
 extern unsigned int comedi_default_buf_size_kb;
 extern unsigned int comedi_default_buf_maxsize_kb;
+
+#endif /* _COMEDI_INTERNAL_H */

commit 3a5fa27516116352e810b2122afd82c3d5cbcc7e
Author: Ian Abbott <abbotti@mev.co.uk>
Date:   Tue Jun 19 10:17:44 2012 +0100

    staging: comedi: rename internal.h to comedi_internal.h
    
    Use a less generic name for this internal header file included by
    various parts of the comedi core.
    
    Signed-off-by: Ian Abbott <abbotti@mev.co.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/comedi_internal.h b/drivers/staging/comedi/comedi_internal.h
new file mode 100644
index 000000000000..7ed20a04eef5
--- /dev/null
+++ b/drivers/staging/comedi/comedi_internal.h
@@ -0,0 +1,16 @@
+/*
+ * various internal comedi stuff
+ */
+int do_rangeinfo_ioctl(struct comedi_device *dev,
+		       struct comedi_rangeinfo __user *arg);
+int insn_inval(struct comedi_device *dev, struct comedi_subdevice *s,
+	       struct comedi_insn *insn, unsigned int *data);
+int comedi_alloc_board_minor(struct device *hardware_device);
+void comedi_free_board_minor(unsigned minor);
+int comedi_find_board_minor(struct device *hardware_device);
+void comedi_reset_async_buf(struct comedi_async *async);
+int comedi_buf_alloc(struct comedi_device *dev, struct comedi_subdevice *s,
+		     unsigned long new_size);
+
+extern unsigned int comedi_default_buf_size_kb;
+extern unsigned int comedi_default_buf_maxsize_kb;
