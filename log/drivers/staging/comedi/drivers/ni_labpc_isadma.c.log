commit b69839391d444882d83c85a531da8b4e75a2b2e6
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Tue Nov 7 14:58:44 2017 +0100

    staging: comedi: drivers: Remove redundant license text
    
    Now that the SPDX tag is in all comedi files, that identifies the
    license in a specific and legally-defined manner.  So the extra GPL text
    wording can be removed as it is no longer needed at all.
    
    This is done on a quest to remove the 700+ different ways that files in
    the kernel describe the GPL license text.  And there's unneeded stuff
    like the address (sometimes incorrect) for the FSF which is never
    needed.
    
    No copyright headers or other non-license-description text was removed.
    
    Cc: Ian Abbott <abbotti@mev.co.uk>
    Cc: H Hartley Sweeten <hsweeten@visionengravers.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/drivers/ni_labpc_isadma.c b/drivers/staging/comedi/drivers/ni_labpc_isadma.c
index be0e2367263b..5657736a9408 100644
--- a/drivers/staging/comedi/drivers/ni_labpc_isadma.c
+++ b/drivers/staging/comedi/drivers/ni_labpc_isadma.c
@@ -6,16 +6,6 @@
  *
  * Extracted from ni_labpc.c:
  * Copyright (C) 2001-2003 Frank Mori Hess <fmhess@users.sourceforge.net>
- *
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation; either version 2 of the License, or
- * (at your option) any later version.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
  */
 
 #include <linux/module.h>

commit e184e2bed8fc895ce930624524d319289c1f1082
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Tue Nov 7 14:58:43 2017 +0100

    staging: comedi: add SPDX identifiers to all greybus driver files
    
    It's good to have SPDX identifiers in all files to make it easier to
    audit the kernel tree for correct licenses.
    
    Update the drivers/staging/comedi files files with the correct SPDX
    license identifier based on the license text in the file itself.  The
    SPDX identifier is a legally binding shorthand, which can be used
    instead of the full boiler plate text.
    
    This work is based on a script and data from Thomas Gleixner, Philippe
    Ombredanne, and Kate Stewart.
    
    Cc: Ian Abbott <abbotti@mev.co.uk>
    Cc: H Hartley Sweeten <hsweeten@visionengravers.com>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: Kate Stewart <kstewart@linuxfoundation.org>
    Cc: Philippe Ombredanne <pombredanne@nexb.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/drivers/ni_labpc_isadma.c b/drivers/staging/comedi/drivers/ni_labpc_isadma.c
index 29dbdf5ec25d..be0e2367263b 100644
--- a/drivers/staging/comedi/drivers/ni_labpc_isadma.c
+++ b/drivers/staging/comedi/drivers/ni_labpc_isadma.c
@@ -1,3 +1,4 @@
+// SPDX-License-Identifier: GPL-2.0+
 /*
  * comedi/drivers/ni_labpc_isadma.c
  * ISA DMA support for National Instruments Lab-PC series boards and

commit 557e0c1c6575aaaf190534b291131afb972e6774
Author: Ian Abbott <abbotti@mev.co.uk>
Date:   Fri Mar 27 19:13:49 2015 +0000

    staging: comedi: ni_labpc_isadma: remove #include "comedi_fc.h"
    
    "ni_labpc_isadma.c" doesn't use anything from "comedi_fc.h".
    
    Signed-off-by: Ian Abbott <abbotti@mev.co.uk>
    Reviewed-by: H Hartley Sweeten <hsweeten@visionengravers.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/drivers/ni_labpc_isadma.c b/drivers/staging/comedi/drivers/ni_labpc_isadma.c
index 6b4ccd86b3d0..29dbdf5ec25d 100644
--- a/drivers/staging/comedi/drivers/ni_labpc_isadma.c
+++ b/drivers/staging/comedi/drivers/ni_labpc_isadma.c
@@ -23,7 +23,6 @@
 #include "../comedidev.h"
 
 #include "comedi_isadma.h"
-#include "comedi_fc.h"
 #include "ni_labpc.h"
 #include "ni_labpc_regs.h"
 #include "ni_labpc_isadma.h"

commit cf0438c9c3da2f243961561d1e3742519b2eeb3d
Author: H Hartley Sweeten <hsweeten@visionengravers.com>
Date:   Wed Jan 14 10:05:10 2015 -0700

    staging: comedi: ni_labpc_isadma: use comedi_isdma module
    
    The labpc driver has already had the depends on ISA_DMA_API limitation removed
    by moving all the DMA support code into the labpc_isadma module.
    
    For aesthetics, use the comedi_isadma module to provide the actual ISA DMA
    support.
    
    Signed-off-by: H Hartley Sweeten <hsweeten@visionengravers.com>
    Reviewed-by: Ian Abbott <abbotti@mev.co.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/drivers/ni_labpc_isadma.c b/drivers/staging/comedi/drivers/ni_labpc_isadma.c
index 3100549b365c..6b4ccd86b3d0 100644
--- a/drivers/staging/comedi/drivers/ni_labpc_isadma.c
+++ b/drivers/staging/comedi/drivers/ni_labpc_isadma.c
@@ -19,10 +19,10 @@
 
 #include <linux/module.h>
 #include <linux/slab.h>
-#include "../comedidev.h"
 
-#include <asm/dma.h>
+#include "../comedidev.h"
 
+#include "comedi_isadma.h"
 #include "comedi_fc.h"
 #include "ni_labpc.h"
 #include "ni_labpc_regs.h"
@@ -31,35 +31,10 @@
 /* size in bytes of dma buffer */
 #define LABPC_ISADMA_BUFFER_SIZE	0xff00
 
-static void labpc_isadma_program(struct labpc_dma_desc *dma)
-{
-	unsigned long flags;
-
-	flags = claim_dma_lock();
-	clear_dma_ff(dma->chan);
-	set_dma_mode(dma->chan, DMA_MODE_READ);
-	set_dma_addr(dma->chan, dma->hw_addr);
-	set_dma_count(dma->chan, dma->size);
-	enable_dma(dma->chan);
-	release_dma_lock(flags);
-}
-
-static unsigned int labpc_isadma_disable(struct labpc_dma_desc *dma)
-{
-	unsigned long flags;
-	unsigned int residue;
-
-	flags = claim_dma_lock();
-	disable_dma(dma->chan);
-	residue = get_dma_residue(dma->chan);
-	release_dma_lock(flags);
-
-	return residue;
-}
-
 /* utility function that suggests a dma transfer size in bytes */
 static unsigned int labpc_suggest_transfer_size(struct comedi_device *dev,
-						struct comedi_subdevice *s)
+						struct comedi_subdevice *s,
+						unsigned int maxbytes)
 {
 	struct comedi_cmd *cmd = &s->async->cmd;
 	unsigned int sample_size = comedi_bytes_per_sample(s);
@@ -76,8 +51,8 @@ static unsigned int labpc_suggest_transfer_size(struct comedi_device *dev,
 	size = (freq / 3) * sample_size;
 
 	/* set a minimum and maximum size allowed */
-	if (size > LABPC_ISADMA_BUFFER_SIZE)
-		size = LABPC_ISADMA_BUFFER_SIZE;
+	if (size > maxbytes)
+		size = maxbytes;
 	else if (size < sample_size)
 		size = sample_size;
 
@@ -87,17 +62,17 @@ static unsigned int labpc_suggest_transfer_size(struct comedi_device *dev,
 void labpc_setup_dma(struct comedi_device *dev, struct comedi_subdevice *s)
 {
 	struct labpc_private *devpriv = dev->private;
-	struct labpc_dma_desc *dma = &devpriv->dma_desc;
+	struct comedi_isadma_desc *desc = &devpriv->dma->desc[0];
 	struct comedi_cmd *cmd = &s->async->cmd;
 	unsigned int sample_size = comedi_bytes_per_sample(s);
 
 	/* set appropriate size of transfer */
-	dma->size = labpc_suggest_transfer_size(dev, s);
+	desc->size = labpc_suggest_transfer_size(dev, s, desc->maxsize);
 	if (cmd->stop_src == TRIG_COUNT &&
-	    devpriv->count * sample_size < dma->size)
-		dma->size = devpriv->count * sample_size;
+	    devpriv->count * sample_size < desc->size)
+		desc->size = devpriv->count * sample_size;
 
-	labpc_isadma_program(dma);
+	comedi_isadma_program(desc);
 
 	/* set CMD3 bits for caller to enable DMA and interrupt */
 	devpriv->cmd3 |= (CMD3_DMAEN | CMD3_DMATCINTEN);
@@ -107,11 +82,11 @@ EXPORT_SYMBOL_GPL(labpc_setup_dma);
 void labpc_drain_dma(struct comedi_device *dev)
 {
 	struct labpc_private *devpriv = dev->private;
-	struct labpc_dma_desc *dma = &devpriv->dma_desc;
+	struct comedi_isadma_desc *desc = &devpriv->dma->desc[0];
 	struct comedi_subdevice *s = dev->read_subdev;
 	struct comedi_async *async = s->async;
 	struct comedi_cmd *cmd = &async->cmd;
-	unsigned int max_samples = comedi_bytes_to_samples(s, dma->size);
+	unsigned int max_samples = comedi_bytes_to_samples(s, desc->size);
 	unsigned int residue;
 	unsigned int nsamples;
 	unsigned int leftover;
@@ -121,7 +96,7 @@ void labpc_drain_dma(struct comedi_device *dev)
 	 * transfer.  It should always be zero at this point unless
 	 * the stop_src is set to external triggering.
 	 */
-	residue = labpc_isadma_disable(dma);
+	residue = comedi_isadma_disable(desc->chan);
 
 	/*
 	 * Figure out how many samples to read for this transfer and
@@ -141,21 +116,21 @@ void labpc_drain_dma(struct comedi_device *dev)
 	} else {
 		leftover = max_samples;
 	}
-	dma->size = comedi_samples_to_bytes(s, leftover);
+	desc->size = comedi_samples_to_bytes(s, leftover);
 
-	comedi_buf_write_samples(s, dma->virt_addr, nsamples);
+	comedi_buf_write_samples(s, desc->virt_addr, nsamples);
 }
 EXPORT_SYMBOL_GPL(labpc_drain_dma);
 
 static void handle_isa_dma(struct comedi_device *dev)
 {
 	struct labpc_private *devpriv = dev->private;
-	struct labpc_dma_desc *dma = &devpriv->dma_desc;
+	struct comedi_isadma_desc *desc = &devpriv->dma->desc[0];
 
 	labpc_drain_dma(dev);
 
-	if (dma->size)
-		labpc_isadma_program(dma);
+	if (desc->size)
+		comedi_isadma_program(desc);
 
 	/* clear dma tc interrupt */
 	devpriv->write_byte(dev, 0x1, DMATC_CLEAR_REG);
@@ -179,37 +154,24 @@ EXPORT_SYMBOL_GPL(labpc_handle_dma_status);
 void labpc_init_dma_chan(struct comedi_device *dev, unsigned int dma_chan)
 {
 	struct labpc_private *devpriv = dev->private;
-	struct labpc_dma_desc *dma = &devpriv->dma_desc;
 
+	/* only DMA channels 3 and 1 are valid */
 	if (dma_chan != 1 && dma_chan != 3)
 		return;
 
-	if (request_dma(dma_chan, dev->board_name))
-		return;
-
-	dma->virt_addr = dma_alloc_coherent(NULL, LABPC_ISADMA_BUFFER_SIZE,
-					    &dma->hw_addr, GFP_KERNEL);
-	if (!dma->virt_addr) {
-		free_dma(dma_chan);
-		return;
-	}
-
-	dma->chan = dma_chan;
-
-	labpc_isadma_disable(dma);
+	/* DMA uses 1 buffer */
+	devpriv->dma = comedi_isadma_alloc(dev, 1, dma_chan, dma_chan,
+					   LABPC_ISADMA_BUFFER_SIZE,
+					   COMEDI_ISADMA_READ);
 }
 EXPORT_SYMBOL_GPL(labpc_init_dma_chan);
 
 void labpc_free_dma_chan(struct comedi_device *dev)
 {
 	struct labpc_private *devpriv = dev->private;
-	struct labpc_dma_desc *dma = &devpriv->dma_desc;
 
-	if (dma->virt_addr)
-		dma_free_coherent(NULL, LABPC_ISADMA_BUFFER_SIZE,
-				  dma->virt_addr, dma->hw_addr);
-	if (dma->chan)
-		free_dma(dma->chan);
+	if (devpriv)
+		comedi_isadma_free(devpriv->dma);
 }
 EXPORT_SYMBOL_GPL(labpc_free_dma_chan);
 

commit 0afa6153fb6fd2b1865248d96058b26ae2f1bcf5
Author: H Hartley Sweeten <hsweeten@visionengravers.com>
Date:   Tue Jan 13 10:16:42 2015 -0700

    staging: comedi: ni_labpc_isadma: introduce labpc_isadma_program()
    
    Introduce a helper function to program the ISA DMA controller. Program
    the ISA DMA as described in Documentation/DMA-ISA-LPC.txt.
    
    Signed-off-by: H Hartley Sweeten <hsweeten@visionengravers.com>
    Reviewed-by: Ian Abbott <abbotti@mev.co.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/drivers/ni_labpc_isadma.c b/drivers/staging/comedi/drivers/ni_labpc_isadma.c
index af13f4b37daa..3100549b365c 100644
--- a/drivers/staging/comedi/drivers/ni_labpc_isadma.c
+++ b/drivers/staging/comedi/drivers/ni_labpc_isadma.c
@@ -31,6 +31,19 @@
 /* size in bytes of dma buffer */
 #define LABPC_ISADMA_BUFFER_SIZE	0xff00
 
+static void labpc_isadma_program(struct labpc_dma_desc *dma)
+{
+	unsigned long flags;
+
+	flags = claim_dma_lock();
+	clear_dma_ff(dma->chan);
+	set_dma_mode(dma->chan, DMA_MODE_READ);
+	set_dma_addr(dma->chan, dma->hw_addr);
+	set_dma_count(dma->chan, dma->size);
+	enable_dma(dma->chan);
+	release_dma_lock(flags);
+}
+
 static unsigned int labpc_isadma_disable(struct labpc_dma_desc *dma)
 {
 	unsigned long flags;
@@ -77,22 +90,15 @@ void labpc_setup_dma(struct comedi_device *dev, struct comedi_subdevice *s)
 	struct labpc_dma_desc *dma = &devpriv->dma_desc;
 	struct comedi_cmd *cmd = &s->async->cmd;
 	unsigned int sample_size = comedi_bytes_per_sample(s);
-	unsigned long irq_flags;
 
-	irq_flags = claim_dma_lock();
-	/* clear flip-flop to make sure 2-byte registers for
-	 * count and address get set correctly */
-	clear_dma_ff(dma->chan);
-	set_dma_mode(dma->chan, DMA_MODE_READ);
-	set_dma_addr(dma->chan, dma->hw_addr);
 	/* set appropriate size of transfer */
 	dma->size = labpc_suggest_transfer_size(dev, s);
 	if (cmd->stop_src == TRIG_COUNT &&
 	    devpriv->count * sample_size < dma->size)
 		dma->size = devpriv->count * sample_size;
-	set_dma_count(dma->chan, dma->size);
-	enable_dma(dma->chan);
-	release_dma_lock(irq_flags);
+
+	labpc_isadma_program(dma);
+
 	/* set CMD3 bits for caller to enable DMA and interrupt */
 	devpriv->cmd3 |= (CMD3_DMAEN | CMD3_DMATCINTEN);
 }
@@ -145,18 +151,11 @@ static void handle_isa_dma(struct comedi_device *dev)
 {
 	struct labpc_private *devpriv = dev->private;
 	struct labpc_dma_desc *dma = &devpriv->dma_desc;
-	unsigned long flags;
 
 	labpc_drain_dma(dev);
 
-	if (dma->size) {
-		flags = claim_dma_lock();
-		set_dma_mode(dma->chan, DMA_MODE_READ);
-		set_dma_addr(dma->chan, dma->hw_addr);
-		set_dma_count(dma->chan, dma->size);
-		enable_dma(dma->chan);
-		release_dma_lock(flags);
-	}
+	if (dma->size)
+		labpc_isadma_program(dma);
 
 	/* clear dma tc interrupt */
 	devpriv->write_byte(dev, 0x1, DMATC_CLEAR_REG);

commit f2c6bbe8e02d589a02282c2a260f912ab4f12376
Author: H Hartley Sweeten <hsweeten@visionengravers.com>
Date:   Tue Jan 13 10:16:41 2015 -0700

    staging: comedi: ni_labpc_isadma: move dma programming out of labpc_drain_dma()
    
    The external caller of labpc_drain_dma() does not enable the DMA transfer. Only
    the call from handle_isa_dma() results in the programmed DMA operation getting
    enabled.
    
    For aesthetics, move the dma programming to handle_isa_dma(). Make sure the
    DMA operation would actually do something (dma->size != 0) before programming
    it to avoid enabling the DMA at the end of a stop_src == TRIG_COUNT command.
    
    Signed-off-by: H Hartley Sweeten <hsweeten@visionengravers.com>
    Reviewed-by: Ian Abbott <abbotti@mev.co.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/drivers/ni_labpc_isadma.c b/drivers/staging/comedi/drivers/ni_labpc_isadma.c
index 2fb7e728049b..af13f4b37daa 100644
--- a/drivers/staging/comedi/drivers/ni_labpc_isadma.c
+++ b/drivers/staging/comedi/drivers/ni_labpc_isadma.c
@@ -109,7 +109,6 @@ void labpc_drain_dma(struct comedi_device *dev)
 	unsigned int residue;
 	unsigned int nsamples;
 	unsigned int leftover;
-	unsigned long flags;
 
 	/*
 	 * residue is the number of bytes left to be done on the dma
@@ -139,13 +138,6 @@ void labpc_drain_dma(struct comedi_device *dev)
 	dma->size = comedi_samples_to_bytes(s, leftover);
 
 	comedi_buf_write_samples(s, dma->virt_addr, nsamples);
-
-	/* set address and count for next transfer */
-	flags = claim_dma_lock();
-	set_dma_mode(dma->chan, DMA_MODE_READ);
-	set_dma_addr(dma->chan, dma->hw_addr);
-	set_dma_count(dma->chan, dma->size);
-	release_dma_lock(flags);
 }
 EXPORT_SYMBOL_GPL(labpc_drain_dma);
 
@@ -153,10 +145,18 @@ static void handle_isa_dma(struct comedi_device *dev)
 {
 	struct labpc_private *devpriv = dev->private;
 	struct labpc_dma_desc *dma = &devpriv->dma_desc;
+	unsigned long flags;
 
 	labpc_drain_dma(dev);
 
-	enable_dma(dma->chan);
+	if (dma->size) {
+		flags = claim_dma_lock();
+		set_dma_mode(dma->chan, DMA_MODE_READ);
+		set_dma_addr(dma->chan, dma->hw_addr);
+		set_dma_count(dma->chan, dma->size);
+		enable_dma(dma->chan);
+		release_dma_lock(flags);
+	}
 
 	/* clear dma tc interrupt */
 	devpriv->write_byte(dev, 0x1, DMATC_CLEAR_REG);

commit 72ba5c1612f5ea7f907290903e8fc24ed94aec13
Author: H Hartley Sweeten <hsweeten@visionengravers.com>
Date:   Tue Jan 13 10:16:40 2015 -0700

    staging: comedi: ni_labpc_isadma: tidy up labpc_drain_dma()
    
    Tidy up the code that determines the number of samples to read for the
    current DMA transfer and how many samples are needed for the next DMA,
    
    Signed-off-by: H Hartley Sweeten <hsweeten@visionengravers.com>
    Reviewed-by: Ian Abbott <abbotti@mev.co.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/drivers/ni_labpc_isadma.c b/drivers/staging/comedi/drivers/ni_labpc_isadma.c
index 862fb7edb33d..2fb7e728049b 100644
--- a/drivers/staging/comedi/drivers/ni_labpc_isadma.c
+++ b/drivers/staging/comedi/drivers/ni_labpc_isadma.c
@@ -105,12 +105,11 @@ void labpc_drain_dma(struct comedi_device *dev)
 	struct comedi_subdevice *s = dev->read_subdev;
 	struct comedi_async *async = s->async;
 	struct comedi_cmd *cmd = &async->cmd;
-	unsigned int sample_size = comedi_bytes_per_sample(s);
-	int status;
+	unsigned int max_samples = comedi_bytes_to_samples(s, dma->size);
+	unsigned int residue;
+	unsigned int nsamples;
+	unsigned int leftover;
 	unsigned long flags;
-	unsigned int max_points, num_points, residue, leftover;
-
-	status = devpriv->stat1;
 
 	/*
 	 * residue is the number of bytes left to be done on the dma
@@ -119,32 +118,33 @@ void labpc_drain_dma(struct comedi_device *dev)
 	 */
 	residue = labpc_isadma_disable(dma);
 
-	/* figure out how many points to read */
-	max_points = dma->size / sample_size;
-	num_points = max_points - comedi_bytes_to_samples(s, residue);
-	if (cmd->stop_src == TRIG_COUNT && devpriv->count < num_points)
-		num_points = devpriv->count;
-
-	/* figure out how many points will be stored next time */
-	leftover = 0;
-	if (cmd->stop_src != TRIG_COUNT) {
-		leftover = dma->size / sample_size;
-	} else if (devpriv->count > num_points) {
-		leftover = devpriv->count - num_points;
-		if (leftover > max_points)
-			leftover = max_points;
+	/*
+	 * Figure out how many samples to read for this transfer and
+	 * how many will be stored for next time.
+	 */
+	nsamples = max_samples - comedi_bytes_to_samples(s, residue);
+	if (cmd->stop_src == TRIG_COUNT) {
+		if (devpriv->count <= nsamples) {
+			nsamples = devpriv->count;
+			leftover = 0;
+		} else {
+			leftover = devpriv->count - nsamples;
+			if (leftover > max_samples)
+				leftover = max_samples;
+		}
+		devpriv->count -= nsamples;
+	} else {
+		leftover = max_samples;
 	}
+	dma->size = comedi_samples_to_bytes(s, leftover);
 
-	comedi_buf_write_samples(s, dma->virt_addr, num_points);
-
-	if (cmd->stop_src == TRIG_COUNT)
-		devpriv->count -= num_points;
+	comedi_buf_write_samples(s, dma->virt_addr, nsamples);
 
 	/* set address and count for next transfer */
 	flags = claim_dma_lock();
 	set_dma_mode(dma->chan, DMA_MODE_READ);
 	set_dma_addr(dma->chan, dma->hw_addr);
-	set_dma_count(dma->chan, leftover * sample_size);
+	set_dma_count(dma->chan, dma->size);
 	release_dma_lock(flags);
 }
 EXPORT_SYMBOL_GPL(labpc_drain_dma);

commit 0f02b081da44370d5c88340501e7a12ef9076a34
Author: H Hartley Sweeten <hsweeten@visionengravers.com>
Date:   Tue Jan 13 10:16:39 2015 -0700

    staging: comedi: ni_labpc_isadma: introduce labpc_isadma_disable()
    
    Introduce a helper function to disable and the ISA DMA controller and
    return the residue as described in Documentation/DMA-ISA-LPC.txt.
    
    The DMA will always be disabled when labpc_setup_dma() is called. Remove
    the unnecessary disable in that function.
    
    Signed-off-by: H Hartley Sweeten <hsweeten@visionengravers.com>
    Reviewed-by: Ian Abbott <abbotti@mev.co.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/drivers/ni_labpc_isadma.c b/drivers/staging/comedi/drivers/ni_labpc_isadma.c
index 0ce8aad2f342..862fb7edb33d 100644
--- a/drivers/staging/comedi/drivers/ni_labpc_isadma.c
+++ b/drivers/staging/comedi/drivers/ni_labpc_isadma.c
@@ -31,6 +31,19 @@
 /* size in bytes of dma buffer */
 #define LABPC_ISADMA_BUFFER_SIZE	0xff00
 
+static unsigned int labpc_isadma_disable(struct labpc_dma_desc *dma)
+{
+	unsigned long flags;
+	unsigned int residue;
+
+	flags = claim_dma_lock();
+	disable_dma(dma->chan);
+	residue = get_dma_residue(dma->chan);
+	release_dma_lock(flags);
+
+	return residue;
+}
+
 /* utility function that suggests a dma transfer size in bytes */
 static unsigned int labpc_suggest_transfer_size(struct comedi_device *dev,
 						struct comedi_subdevice *s)
@@ -67,10 +80,10 @@ void labpc_setup_dma(struct comedi_device *dev, struct comedi_subdevice *s)
 	unsigned long irq_flags;
 
 	irq_flags = claim_dma_lock();
-	disable_dma(dma->chan);
 	/* clear flip-flop to make sure 2-byte registers for
 	 * count and address get set correctly */
 	clear_dma_ff(dma->chan);
+	set_dma_mode(dma->chan, DMA_MODE_READ);
 	set_dma_addr(dma->chan, dma->hw_addr);
 	/* set appropriate size of transfer */
 	dma->size = labpc_suggest_transfer_size(dev, s);
@@ -99,20 +112,16 @@ void labpc_drain_dma(struct comedi_device *dev)
 
 	status = devpriv->stat1;
 
-	flags = claim_dma_lock();
-	disable_dma(dma->chan);
-	/* clear flip-flop to make sure 2-byte registers for
-	 * count and address get set correctly */
-	clear_dma_ff(dma->chan);
-
-	/* figure out how many points to read */
-	max_points = dma->size / sample_size;
-	/* residue is the number of points left to be done on the dma
+	/*
+	 * residue is the number of bytes left to be done on the dma
 	 * transfer.  It should always be zero at this point unless
 	 * the stop_src is set to external triggering.
 	 */
-	residue = get_dma_residue(dma->chan) / sample_size;
-	num_points = max_points - residue;
+	residue = labpc_isadma_disable(dma);
+
+	/* figure out how many points to read */
+	max_points = dma->size / sample_size;
+	num_points = max_points - comedi_bytes_to_samples(s, residue);
 	if (cmd->stop_src == TRIG_COUNT && devpriv->count < num_points)
 		num_points = devpriv->count;
 
@@ -132,6 +141,8 @@ void labpc_drain_dma(struct comedi_device *dev)
 		devpriv->count -= num_points;
 
 	/* set address and count for next transfer */
+	flags = claim_dma_lock();
+	set_dma_mode(dma->chan, DMA_MODE_READ);
 	set_dma_addr(dma->chan, dma->hw_addr);
 	set_dma_count(dma->chan, leftover * sample_size);
 	release_dma_lock(flags);
@@ -170,7 +181,6 @@ void labpc_init_dma_chan(struct comedi_device *dev, unsigned int dma_chan)
 {
 	struct labpc_private *devpriv = dev->private;
 	struct labpc_dma_desc *dma = &devpriv->dma_desc;
-	unsigned long dma_flags;
 
 	if (dma_chan != 1 && dma_chan != 3)
 		return;
@@ -187,10 +197,7 @@ void labpc_init_dma_chan(struct comedi_device *dev, unsigned int dma_chan)
 
 	dma->chan = dma_chan;
 
-	dma_flags = claim_dma_lock();
-	disable_dma(dma->chan);
-	set_dma_mode(dma->chan, DMA_MODE_READ);
-	release_dma_lock(dma_flags);
+	labpc_isadma_disable(dma);
 }
 EXPORT_SYMBOL_GPL(labpc_init_dma_chan);
 

commit afd8f40f6f10bb43c445458a36b873add4dd08f3
Author: H Hartley Sweeten <hsweeten@visionengravers.com>
Date:   Tue Jan 13 10:16:38 2015 -0700

    staging: comedi: ni_labpc_isadma: convert 'dma_buffer_size' to a define
    
    For aesthetics, convert this statis const global variable to a define.
    
    Cleanup the maximum 'size' calc in labpc_suggest_transfer_size(). The modulo
    operation will always result in '0'.
    
    Signed-off-by: H Hartley Sweeten <hsweeten@visionengravers.com>
    Reviewed-by: Ian Abbott <abbotti@mev.co.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/drivers/ni_labpc_isadma.c b/drivers/staging/comedi/drivers/ni_labpc_isadma.c
index 43e4f99f25df..0ce8aad2f342 100644
--- a/drivers/staging/comedi/drivers/ni_labpc_isadma.c
+++ b/drivers/staging/comedi/drivers/ni_labpc_isadma.c
@@ -29,7 +29,7 @@
 #include "ni_labpc_isadma.h"
 
 /* size in bytes of dma buffer */
-static const int dma_buffer_size = 0xff00;
+#define LABPC_ISADMA_BUFFER_SIZE	0xff00
 
 /* utility function that suggests a dma transfer size in bytes */
 static unsigned int labpc_suggest_transfer_size(struct comedi_device *dev,
@@ -50,8 +50,8 @@ static unsigned int labpc_suggest_transfer_size(struct comedi_device *dev,
 	size = (freq / 3) * sample_size;
 
 	/* set a minimum and maximum size allowed */
-	if (size > dma_buffer_size)
-		size = dma_buffer_size - dma_buffer_size % sample_size;
+	if (size > LABPC_ISADMA_BUFFER_SIZE)
+		size = LABPC_ISADMA_BUFFER_SIZE;
 	else if (size < sample_size)
 		size = sample_size;
 
@@ -178,7 +178,7 @@ void labpc_init_dma_chan(struct comedi_device *dev, unsigned int dma_chan)
 	if (request_dma(dma_chan, dev->board_name))
 		return;
 
-	dma->virt_addr = dma_alloc_coherent(NULL, dma_buffer_size,
+	dma->virt_addr = dma_alloc_coherent(NULL, LABPC_ISADMA_BUFFER_SIZE,
 					    &dma->hw_addr, GFP_KERNEL);
 	if (!dma->virt_addr) {
 		free_dma(dma_chan);
@@ -200,7 +200,7 @@ void labpc_free_dma_chan(struct comedi_device *dev)
 	struct labpc_dma_desc *dma = &devpriv->dma_desc;
 
 	if (dma->virt_addr)
-		dma_free_coherent(NULL, dma_buffer_size,
+		dma_free_coherent(NULL, LABPC_ISADMA_BUFFER_SIZE,
 				  dma->virt_addr, dma->hw_addr);
 	if (dma->chan)
 		free_dma(dma->chan);

commit ac525a7f724ef47cae087fc2b09978a5fdda829c
Author: H Hartley Sweeten <hsweeten@visionengravers.com>
Date:   Tue Jan 13 10:16:37 2015 -0700

    staging: comedi: ni_labpc_isadma: remove hard coded samples size
    
    Use the comedi_bytes_per_sample() helper and remove the hard coded sample
    size.
    
    Signed-off-by: H Hartley Sweeten <hsweeten@visionengravers.com>
    Reviewed-by: Ian Abbott <abbotti@mev.co.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/drivers/ni_labpc_isadma.c b/drivers/staging/comedi/drivers/ni_labpc_isadma.c
index ecdbe11a206c..43e4f99f25df 100644
--- a/drivers/staging/comedi/drivers/ni_labpc_isadma.c
+++ b/drivers/staging/comedi/drivers/ni_labpc_isadma.c
@@ -30,12 +30,13 @@
 
 /* size in bytes of dma buffer */
 static const int dma_buffer_size = 0xff00;
-/* 2 bytes per sample */
-static const int sample_size = 2;
 
 /* utility function that suggests a dma transfer size in bytes */
-static unsigned int labpc_suggest_transfer_size(const struct comedi_cmd *cmd)
+static unsigned int labpc_suggest_transfer_size(struct comedi_device *dev,
+						struct comedi_subdevice *s)
 {
+	struct comedi_cmd *cmd = &s->async->cmd;
+	unsigned int sample_size = comedi_bytes_per_sample(s);
 	unsigned int size;
 	unsigned int freq;
 
@@ -62,6 +63,7 @@ void labpc_setup_dma(struct comedi_device *dev, struct comedi_subdevice *s)
 	struct labpc_private *devpriv = dev->private;
 	struct labpc_dma_desc *dma = &devpriv->dma_desc;
 	struct comedi_cmd *cmd = &s->async->cmd;
+	unsigned int sample_size = comedi_bytes_per_sample(s);
 	unsigned long irq_flags;
 
 	irq_flags = claim_dma_lock();
@@ -71,7 +73,7 @@ void labpc_setup_dma(struct comedi_device *dev, struct comedi_subdevice *s)
 	clear_dma_ff(dma->chan);
 	set_dma_addr(dma->chan, dma->hw_addr);
 	/* set appropriate size of transfer */
-	dma->size = labpc_suggest_transfer_size(cmd);
+	dma->size = labpc_suggest_transfer_size(dev, s);
 	if (cmd->stop_src == TRIG_COUNT &&
 	    devpriv->count * sample_size < dma->size)
 		dma->size = devpriv->count * sample_size;
@@ -90,6 +92,7 @@ void labpc_drain_dma(struct comedi_device *dev)
 	struct comedi_subdevice *s = dev->read_subdev;
 	struct comedi_async *async = s->async;
 	struct comedi_cmd *cmd = &async->cmd;
+	unsigned int sample_size = comedi_bytes_per_sample(s);
 	int status;
 	unsigned long flags;
 	unsigned int max_points, num_points, residue, leftover;

commit 05e511cf966fd1c806960679c579633b6c566129
Author: H Hartley Sweeten <hsweeten@visionengravers.com>
Date:   Mon Jan 12 10:55:54 2015 -0700

    staging: comedi: ni_labpc: remove VIRT_TO_BUS dependancy
    
    Use dma_{alloc,free}_coherent() to allocate and free the DMA buffers.
    This removes the dependancy on VIRT_TO_BUS.
    
    Signed-off-by: H Hartley Sweeten <hsweeten@visionengravers.com>
    Reviewed-by: Ian Abbott <abbotti@mev.co.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/drivers/ni_labpc_isadma.c b/drivers/staging/comedi/drivers/ni_labpc_isadma.c
index 829c4e447912..ecdbe11a206c 100644
--- a/drivers/staging/comedi/drivers/ni_labpc_isadma.c
+++ b/drivers/staging/comedi/drivers/ni_labpc_isadma.c
@@ -175,14 +175,14 @@ void labpc_init_dma_chan(struct comedi_device *dev, unsigned int dma_chan)
 	if (request_dma(dma_chan, dev->board_name))
 		return;
 
-	dma->virt_addr = kmalloc(dma_buffer_size, GFP_KERNEL | GFP_DMA);
+	dma->virt_addr = dma_alloc_coherent(NULL, dma_buffer_size,
+					    &dma->hw_addr, GFP_KERNEL);
 	if (!dma->virt_addr) {
 		free_dma(dma_chan);
 		return;
 	}
 
 	dma->chan = dma_chan;
-	dma->hw_addr = virt_to_bus(dma->virt_addr);
 
 	dma_flags = claim_dma_lock();
 	disable_dma(dma->chan);
@@ -196,7 +196,9 @@ void labpc_free_dma_chan(struct comedi_device *dev)
 	struct labpc_private *devpriv = dev->private;
 	struct labpc_dma_desc *dma = &devpriv->dma_desc;
 
-	kfree(dma->virt_addr);
+	if (dma->virt_addr)
+		dma_free_coherent(NULL, dma_buffer_size,
+				  dma->virt_addr, dma->hw_addr);
 	if (dma->chan)
 		free_dma(dma->chan);
 }

commit 9ff24fd577fdc6744ca328bdee59133b1094aede
Author: H Hartley Sweeten <hsweeten@visionengravers.com>
Date:   Mon Jan 12 10:55:53 2015 -0700

    staging: comedi: ni_labpc_isadma: tidy up labpc_init_dma_chan()
    
    DMA support is optional for the labpc driver. The return value from
    labpc_init_dma_chan() is not even checked by the caller.
    
    Change the return type to void and tidy up the function a bit.
    
    Signed-off-by: H Hartley Sweeten <hsweeten@visionengravers.com>
    Reviewed-by: Ian Abbott <abbotti@mev.co.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/drivers/ni_labpc_isadma.c b/drivers/staging/comedi/drivers/ni_labpc_isadma.c
index b7217a76df67..829c4e447912 100644
--- a/drivers/staging/comedi/drivers/ni_labpc_isadma.c
+++ b/drivers/staging/comedi/drivers/ni_labpc_isadma.c
@@ -163,28 +163,24 @@ void labpc_handle_dma_status(struct comedi_device *dev)
 }
 EXPORT_SYMBOL_GPL(labpc_handle_dma_status);
 
-int labpc_init_dma_chan(struct comedi_device *dev, unsigned int dma_chan)
+void labpc_init_dma_chan(struct comedi_device *dev, unsigned int dma_chan)
 {
 	struct labpc_private *devpriv = dev->private;
 	struct labpc_dma_desc *dma = &devpriv->dma_desc;
-	void *dma_buffer;
 	unsigned long dma_flags;
-	int ret;
 
 	if (dma_chan != 1 && dma_chan != 3)
-		return -EINVAL;
+		return;
 
-	dma_buffer = kmalloc(dma_buffer_size, GFP_KERNEL | GFP_DMA);
-	if (!dma_buffer)
-		return -ENOMEM;
+	if (request_dma(dma_chan, dev->board_name))
+		return;
 
-	ret = request_dma(dma_chan, dev->board_name);
-	if (ret) {
-		kfree(dma_buffer);
-		return ret;
+	dma->virt_addr = kmalloc(dma_buffer_size, GFP_KERNEL | GFP_DMA);
+	if (!dma->virt_addr) {
+		free_dma(dma_chan);
+		return;
 	}
 
-	dma->virt_addr = dma_buffer;
 	dma->chan = dma_chan;
 	dma->hw_addr = virt_to_bus(dma->virt_addr);
 
@@ -192,8 +188,6 @@ int labpc_init_dma_chan(struct comedi_device *dev, unsigned int dma_chan)
 	disable_dma(dma->chan);
 	set_dma_mode(dma->chan, DMA_MODE_READ);
 	release_dma_lock(dma_flags);
-
-	return 0;
 }
 EXPORT_SYMBOL_GPL(labpc_init_dma_chan);
 

commit 4d1c15c08f6620ac912d56a800a0322e64a7e3e5
Author: H Hartley Sweeten <hsweeten@visionengravers.com>
Date:   Mon Jan 12 10:55:52 2015 -0700

    staging: comedi: ni_labpc: introduce struct labpc_dma_desc
    
    For aesthetics, introduce a struct to hold the DMA descriptor data.
    
    Signed-off-by: H Hartley Sweeten <hsweeten@visionengravers.com>
    Reviewed-by: Ian Abbott <abbotti@mev.co.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/drivers/ni_labpc_isadma.c b/drivers/staging/comedi/drivers/ni_labpc_isadma.c
index 6d386050e59d..b7217a76df67 100644
--- a/drivers/staging/comedi/drivers/ni_labpc_isadma.c
+++ b/drivers/staging/comedi/drivers/ni_labpc_isadma.c
@@ -60,22 +60,23 @@ static unsigned int labpc_suggest_transfer_size(const struct comedi_cmd *cmd)
 void labpc_setup_dma(struct comedi_device *dev, struct comedi_subdevice *s)
 {
 	struct labpc_private *devpriv = dev->private;
+	struct labpc_dma_desc *dma = &devpriv->dma_desc;
 	struct comedi_cmd *cmd = &s->async->cmd;
 	unsigned long irq_flags;
 
 	irq_flags = claim_dma_lock();
-	disable_dma(devpriv->dma_chan);
+	disable_dma(dma->chan);
 	/* clear flip-flop to make sure 2-byte registers for
 	 * count and address get set correctly */
-	clear_dma_ff(devpriv->dma_chan);
-	set_dma_addr(devpriv->dma_chan, devpriv->dma_addr);
+	clear_dma_ff(dma->chan);
+	set_dma_addr(dma->chan, dma->hw_addr);
 	/* set appropriate size of transfer */
-	devpriv->dma_transfer_size = labpc_suggest_transfer_size(cmd);
+	dma->size = labpc_suggest_transfer_size(cmd);
 	if (cmd->stop_src == TRIG_COUNT &&
-	    devpriv->count * sample_size < devpriv->dma_transfer_size)
-		devpriv->dma_transfer_size = devpriv->count * sample_size;
-	set_dma_count(devpriv->dma_chan, devpriv->dma_transfer_size);
-	enable_dma(devpriv->dma_chan);
+	    devpriv->count * sample_size < dma->size)
+		dma->size = devpriv->count * sample_size;
+	set_dma_count(dma->chan, dma->size);
+	enable_dma(dma->chan);
 	release_dma_lock(irq_flags);
 	/* set CMD3 bits for caller to enable DMA and interrupt */
 	devpriv->cmd3 |= (CMD3_DMAEN | CMD3_DMATCINTEN);
@@ -85,6 +86,7 @@ EXPORT_SYMBOL_GPL(labpc_setup_dma);
 void labpc_drain_dma(struct comedi_device *dev)
 {
 	struct labpc_private *devpriv = dev->private;
+	struct labpc_dma_desc *dma = &devpriv->dma_desc;
 	struct comedi_subdevice *s = dev->read_subdev;
 	struct comedi_async *async = s->async;
 	struct comedi_cmd *cmd = &async->cmd;
@@ -95,18 +97,18 @@ void labpc_drain_dma(struct comedi_device *dev)
 	status = devpriv->stat1;
 
 	flags = claim_dma_lock();
-	disable_dma(devpriv->dma_chan);
+	disable_dma(dma->chan);
 	/* clear flip-flop to make sure 2-byte registers for
 	 * count and address get set correctly */
-	clear_dma_ff(devpriv->dma_chan);
+	clear_dma_ff(dma->chan);
 
 	/* figure out how many points to read */
-	max_points = devpriv->dma_transfer_size / sample_size;
+	max_points = dma->size / sample_size;
 	/* residue is the number of points left to be done on the dma
 	 * transfer.  It should always be zero at this point unless
 	 * the stop_src is set to external triggering.
 	 */
-	residue = get_dma_residue(devpriv->dma_chan) / sample_size;
+	residue = get_dma_residue(dma->chan) / sample_size;
 	num_points = max_points - residue;
 	if (cmd->stop_src == TRIG_COUNT && devpriv->count < num_points)
 		num_points = devpriv->count;
@@ -114,21 +116,21 @@ void labpc_drain_dma(struct comedi_device *dev)
 	/* figure out how many points will be stored next time */
 	leftover = 0;
 	if (cmd->stop_src != TRIG_COUNT) {
-		leftover = devpriv->dma_transfer_size / sample_size;
+		leftover = dma->size / sample_size;
 	} else if (devpriv->count > num_points) {
 		leftover = devpriv->count - num_points;
 		if (leftover > max_points)
 			leftover = max_points;
 	}
 
-	comedi_buf_write_samples(s, devpriv->dma_buffer, num_points);
+	comedi_buf_write_samples(s, dma->virt_addr, num_points);
 
 	if (cmd->stop_src == TRIG_COUNT)
 		devpriv->count -= num_points;
 
 	/* set address and count for next transfer */
-	set_dma_addr(devpriv->dma_chan, devpriv->dma_addr);
-	set_dma_count(devpriv->dma_chan, leftover * sample_size);
+	set_dma_addr(dma->chan, dma->hw_addr);
+	set_dma_count(dma->chan, leftover * sample_size);
 	release_dma_lock(flags);
 }
 EXPORT_SYMBOL_GPL(labpc_drain_dma);
@@ -136,10 +138,11 @@ EXPORT_SYMBOL_GPL(labpc_drain_dma);
 static void handle_isa_dma(struct comedi_device *dev)
 {
 	struct labpc_private *devpriv = dev->private;
+	struct labpc_dma_desc *dma = &devpriv->dma_desc;
 
 	labpc_drain_dma(dev);
 
-	enable_dma(devpriv->dma_chan);
+	enable_dma(dma->chan);
 
 	/* clear dma tc interrupt */
 	devpriv->write_byte(dev, 0x1, DMATC_CLEAR_REG);
@@ -163,6 +166,7 @@ EXPORT_SYMBOL_GPL(labpc_handle_dma_status);
 int labpc_init_dma_chan(struct comedi_device *dev, unsigned int dma_chan)
 {
 	struct labpc_private *devpriv = dev->private;
+	struct labpc_dma_desc *dma = &devpriv->dma_desc;
 	void *dma_buffer;
 	unsigned long dma_flags;
 	int ret;
@@ -180,13 +184,13 @@ int labpc_init_dma_chan(struct comedi_device *dev, unsigned int dma_chan)
 		return ret;
 	}
 
-	devpriv->dma_buffer = dma_buffer;
-	devpriv->dma_chan = dma_chan;
-	devpriv->dma_addr = virt_to_bus(devpriv->dma_buffer);
+	dma->virt_addr = dma_buffer;
+	dma->chan = dma_chan;
+	dma->hw_addr = virt_to_bus(dma->virt_addr);
 
 	dma_flags = claim_dma_lock();
-	disable_dma(devpriv->dma_chan);
-	set_dma_mode(devpriv->dma_chan, DMA_MODE_READ);
+	disable_dma(dma->chan);
+	set_dma_mode(dma->chan, DMA_MODE_READ);
 	release_dma_lock(dma_flags);
 
 	return 0;
@@ -196,13 +200,11 @@ EXPORT_SYMBOL_GPL(labpc_init_dma_chan);
 void labpc_free_dma_chan(struct comedi_device *dev)
 {
 	struct labpc_private *devpriv = dev->private;
+	struct labpc_dma_desc *dma = &devpriv->dma_desc;
 
-	kfree(devpriv->dma_buffer);
-	devpriv->dma_buffer = NULL;
-	if (devpriv->dma_chan) {
-		free_dma(devpriv->dma_chan);
-		devpriv->dma_chan = 0;
-	}
+	kfree(dma->virt_addr);
+	if (dma->chan)
+		free_dma(dma->chan);
 }
 EXPORT_SYMBOL_GPL(labpc_free_dma_chan);
 

commit b9357cba10f866799516befba2bb374463ccf74d
Author: H Hartley Sweeten <hsweeten@visionengravers.com>
Date:   Wed Oct 22 15:36:31 2014 -0700

    staging: comedi: ni_labpc_isadma: use comedi_buf_write_samples()
    
    Use comedi_buf_write_samples() instead of cfc_write_to_buffer() to add all
    the samples to the async buffer in one operation.
    
    The core will add the COMEDI_CB_BLOCK event when data is written to the
    async buffer. Remove the unnecessary event in the driver.
    
    Signed-off-by: H Hartley Sweeten <hsweeten@visionengravers.com>
    Reviewed-by: Ian Abbott <abbotti@mev.co.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/drivers/ni_labpc_isadma.c b/drivers/staging/comedi/drivers/ni_labpc_isadma.c
index 967202e0635e..6d386050e59d 100644
--- a/drivers/staging/comedi/drivers/ni_labpc_isadma.c
+++ b/drivers/staging/comedi/drivers/ni_labpc_isadma.c
@@ -91,7 +91,6 @@ void labpc_drain_dma(struct comedi_device *dev)
 	int status;
 	unsigned long flags;
 	unsigned int max_points, num_points, residue, leftover;
-	int i;
 
 	status = devpriv->stat1;
 
@@ -122,9 +121,7 @@ void labpc_drain_dma(struct comedi_device *dev)
 			leftover = max_points;
 	}
 
-	/* write data to comedi buffer */
-	for (i = 0; i < num_points; i++)
-		cfc_write_to_buffer(s, devpriv->dma_buffer[i]);
+	comedi_buf_write_samples(s, devpriv->dma_buffer, num_points);
 
 	if (cmd->stop_src == TRIG_COUNT)
 		devpriv->count -= num_points;
@@ -133,8 +130,6 @@ void labpc_drain_dma(struct comedi_device *dev)
 	set_dma_addr(devpriv->dma_chan, devpriv->dma_addr);
 	set_dma_count(devpriv->dma_chan, leftover * sample_size);
 	release_dma_lock(flags);
-
-	async->events |= COMEDI_CB_BLOCK;
 }
 EXPORT_SYMBOL_GPL(labpc_drain_dma);
 

commit 765c8b03d7e7cd7f22e7233b01e4d3b68d656c61
Author: Ian Abbott <abbotti@mev.co.uk>
Date:   Tue Sep 9 11:26:43 2014 +0100

    staging: comedi: ni_labpc_isadma: replace comedi_board() calls
    
    The `comedi_board(dev)` inline function calls just return
    `dev->board_ptr`.  Expand the inline function calls.
    
    Signed-off-by: Ian Abbott <abbotti@mev.co.uk>
    Reviewed-by: H Hartley Sweeten <hsweeten@visionengravers.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/drivers/ni_labpc_isadma.c b/drivers/staging/comedi/drivers/ni_labpc_isadma.c
index cb7d1c952cf2..967202e0635e 100644
--- a/drivers/staging/comedi/drivers/ni_labpc_isadma.c
+++ b/drivers/staging/comedi/drivers/ni_labpc_isadma.c
@@ -152,7 +152,7 @@ static void handle_isa_dma(struct comedi_device *dev)
 
 void labpc_handle_dma_status(struct comedi_device *dev)
 {
-	const struct labpc_boardinfo *board = comedi_board(dev);
+	const struct labpc_boardinfo *board = dev->board_ptr;
 	struct labpc_private *devpriv = dev->private;
 
 	/*

commit ac482be4b6312263ffd5101dc5e560d55c00b571
Author: H Hartley Sweeten <hsweeten@visionengravers.com>
Date:   Tue Jul 29 15:01:39 2014 -0700

    staging: comedi: ni_labpc: pass comedi_device to the I/O callbacks
    
    This driver uses some callbacks in the private data to handle the
    port mapped or memory mapped I/O used to access the hardware.
    
    Pass the comedi_device pointer to the helper functions so that the
    base address can be found and does not need to be included in each
    call.
    
    Also, remove the inline from the helper functions.
    
    Signed-off-by: H Hartley Sweeten <hsweeten@visionengravers.com>
    Reviewed-by: Ian Abbott <abbotti@mev.co.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/drivers/ni_labpc_isadma.c b/drivers/staging/comedi/drivers/ni_labpc_isadma.c
index d9f25fdbb728..cb7d1c952cf2 100644
--- a/drivers/staging/comedi/drivers/ni_labpc_isadma.c
+++ b/drivers/staging/comedi/drivers/ni_labpc_isadma.c
@@ -147,7 +147,7 @@ static void handle_isa_dma(struct comedi_device *dev)
 	enable_dma(devpriv->dma_chan);
 
 	/* clear dma tc interrupt */
-	devpriv->write_byte(0x1, dev->iobase + DMATC_CLEAR_REG);
+	devpriv->write_byte(dev, 0x1, DMATC_CLEAR_REG);
 }
 
 void labpc_handle_dma_status(struct comedi_device *dev)

commit 3cd3195251e7c21c2e258f04440483478de3e286
Author: H Hartley Sweeten <hsweeten@visionengravers.com>
Date:   Tue May 27 10:31:01 2014 -0700

    staging: comedi: ni_labpc_isadma: use comedi_cmd pointer
    
    Use a local variable to access the comedi_cmd as a pointer instead
    of getting to from the comedi_async pointer.
    
    Signed-off-by: H Hartley Sweeten <hsweeten@visionengravers.com>
    Reviewed-by: Ian Abbott <abbotti@mev.co.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/drivers/ni_labpc_isadma.c b/drivers/staging/comedi/drivers/ni_labpc_isadma.c
index 2149596830af..d9f25fdbb728 100644
--- a/drivers/staging/comedi/drivers/ni_labpc_isadma.c
+++ b/drivers/staging/comedi/drivers/ni_labpc_isadma.c
@@ -87,6 +87,7 @@ void labpc_drain_dma(struct comedi_device *dev)
 	struct labpc_private *devpriv = dev->private;
 	struct comedi_subdevice *s = dev->read_subdev;
 	struct comedi_async *async = s->async;
+	struct comedi_cmd *cmd = &async->cmd;
 	int status;
 	unsigned long flags;
 	unsigned int max_points, num_points, residue, leftover;
@@ -108,12 +109,12 @@ void labpc_drain_dma(struct comedi_device *dev)
 	 */
 	residue = get_dma_residue(devpriv->dma_chan) / sample_size;
 	num_points = max_points - residue;
-	if (devpriv->count < num_points && async->cmd.stop_src == TRIG_COUNT)
+	if (cmd->stop_src == TRIG_COUNT && devpriv->count < num_points)
 		num_points = devpriv->count;
 
 	/* figure out how many points will be stored next time */
 	leftover = 0;
-	if (async->cmd.stop_src != TRIG_COUNT) {
+	if (cmd->stop_src != TRIG_COUNT) {
 		leftover = devpriv->dma_transfer_size / sample_size;
 	} else if (devpriv->count > num_points) {
 		leftover = devpriv->count - num_points;
@@ -125,7 +126,7 @@ void labpc_drain_dma(struct comedi_device *dev)
 	for (i = 0; i < num_points; i++)
 		cfc_write_to_buffer(s, devpriv->dma_buffer[i]);
 
-	if (async->cmd.stop_src == TRIG_COUNT)
+	if (cmd->stop_src == TRIG_COUNT)
 		devpriv->count -= num_points;
 
 	/* set address and count for next transfer */

commit 9bd53e0398f490707549455c00475af4923df872
Author: Ian Abbott <abbotti@mev.co.uk>
Date:   Fri Jun 28 17:09:26 2013 +0100

    staging: comedi: ni_labpc: migrate DMA status handling
    
    Migrate the code for checking and handling the interrupt status handling
    for ISA DMA transfers into new a new function
    `labpc_handle_dma_status()` in the "ni_labpc_isadma" module.  Provide a
    dummy inline function in "ni_labpc_isadma.h" if the "ni_labpc_isadma"
    module is not being built.
    
    The static function `handle_isa_dma()` also needs to move across to the
    new module.
    
    Signed-off-by: Ian Abbott <abbotti@mev.co.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/drivers/ni_labpc_isadma.c b/drivers/staging/comedi/drivers/ni_labpc_isadma.c
index c4bfecc07b63..2149596830af 100644
--- a/drivers/staging/comedi/drivers/ni_labpc_isadma.c
+++ b/drivers/staging/comedi/drivers/ni_labpc_isadma.c
@@ -137,6 +137,33 @@ void labpc_drain_dma(struct comedi_device *dev)
 }
 EXPORT_SYMBOL_GPL(labpc_drain_dma);
 
+static void handle_isa_dma(struct comedi_device *dev)
+{
+	struct labpc_private *devpriv = dev->private;
+
+	labpc_drain_dma(dev);
+
+	enable_dma(devpriv->dma_chan);
+
+	/* clear dma tc interrupt */
+	devpriv->write_byte(0x1, dev->iobase + DMATC_CLEAR_REG);
+}
+
+void labpc_handle_dma_status(struct comedi_device *dev)
+{
+	const struct labpc_boardinfo *board = comedi_board(dev);
+	struct labpc_private *devpriv = dev->private;
+
+	/*
+	 * if a dma terminal count of external stop trigger
+	 * has occurred
+	 */
+	if (devpriv->stat1 & STAT1_GATA0 ||
+	    (board->is_labpc1200 && devpriv->stat2 & STAT2_OUTA1))
+		handle_isa_dma(dev);
+}
+EXPORT_SYMBOL_GPL(labpc_handle_dma_status);
+
 int labpc_init_dma_chan(struct comedi_device *dev, unsigned int dma_chan)
 {
 	struct labpc_private *devpriv = dev->private;

commit f88e8e09880d4abe3cad98ec8889e0f46eb89e4d
Author: Ian Abbott <abbotti@mev.co.uk>
Date:   Fri Jun 28 17:09:25 2013 +0100

    staging: comedi: ni_labpc: migrate labpc_drain_dma()
    
    Move `labpc_drain_dma()` into the "ni_labpc_isadma" module.  Provide a
    dummy inline function in "ni_labpc_isadma.h" if the module is not being
    built.
    
    Signed-off-by: Ian Abbott <abbotti@mev.co.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/drivers/ni_labpc_isadma.c b/drivers/staging/comedi/drivers/ni_labpc_isadma.c
index dba2be36c48d..c4bfecc07b63 100644
--- a/drivers/staging/comedi/drivers/ni_labpc_isadma.c
+++ b/drivers/staging/comedi/drivers/ni_labpc_isadma.c
@@ -23,6 +23,7 @@
 
 #include <asm/dma.h>
 
+#include "comedi_fc.h"
 #include "ni_labpc.h"
 #include "ni_labpc_regs.h"
 #include "ni_labpc_isadma.h"
@@ -81,6 +82,61 @@ void labpc_setup_dma(struct comedi_device *dev, struct comedi_subdevice *s)
 }
 EXPORT_SYMBOL_GPL(labpc_setup_dma);
 
+void labpc_drain_dma(struct comedi_device *dev)
+{
+	struct labpc_private *devpriv = dev->private;
+	struct comedi_subdevice *s = dev->read_subdev;
+	struct comedi_async *async = s->async;
+	int status;
+	unsigned long flags;
+	unsigned int max_points, num_points, residue, leftover;
+	int i;
+
+	status = devpriv->stat1;
+
+	flags = claim_dma_lock();
+	disable_dma(devpriv->dma_chan);
+	/* clear flip-flop to make sure 2-byte registers for
+	 * count and address get set correctly */
+	clear_dma_ff(devpriv->dma_chan);
+
+	/* figure out how many points to read */
+	max_points = devpriv->dma_transfer_size / sample_size;
+	/* residue is the number of points left to be done on the dma
+	 * transfer.  It should always be zero at this point unless
+	 * the stop_src is set to external triggering.
+	 */
+	residue = get_dma_residue(devpriv->dma_chan) / sample_size;
+	num_points = max_points - residue;
+	if (devpriv->count < num_points && async->cmd.stop_src == TRIG_COUNT)
+		num_points = devpriv->count;
+
+	/* figure out how many points will be stored next time */
+	leftover = 0;
+	if (async->cmd.stop_src != TRIG_COUNT) {
+		leftover = devpriv->dma_transfer_size / sample_size;
+	} else if (devpriv->count > num_points) {
+		leftover = devpriv->count - num_points;
+		if (leftover > max_points)
+			leftover = max_points;
+	}
+
+	/* write data to comedi buffer */
+	for (i = 0; i < num_points; i++)
+		cfc_write_to_buffer(s, devpriv->dma_buffer[i]);
+
+	if (async->cmd.stop_src == TRIG_COUNT)
+		devpriv->count -= num_points;
+
+	/* set address and count for next transfer */
+	set_dma_addr(devpriv->dma_chan, devpriv->dma_addr);
+	set_dma_count(devpriv->dma_chan, leftover * sample_size);
+	release_dma_lock(flags);
+
+	async->events |= COMEDI_CB_BLOCK;
+}
+EXPORT_SYMBOL_GPL(labpc_drain_dma);
+
 int labpc_init_dma_chan(struct comedi_device *dev, unsigned int dma_chan)
 {
 	struct labpc_private *devpriv = dev->private;

commit 88dd0c0a8016d6d80ed47eb306c5b41e8af0f83a
Author: Ian Abbott <abbotti@mev.co.uk>
Date:   Fri Jun 28 17:09:24 2013 +0100

    staging: comedi: ni_labpc: migrate DMA transfer set-up
    
    Migrate the code for setting up an ISA DMA transfer into a new function
    `labpc_setup_dma()` in the "ni_labpc_isadma" module.  Provide a dummy
    inline function in "ni_labpc_isadma.h" if the "ni_labpc_isadma" module
    is not being built.
    
    The static function `labpc_suggest_transfer_size()` also needs to move
    across to the new module.
    
    Signed-off-by: Ian Abbott <abbotti@mev.co.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/drivers/ni_labpc_isadma.c b/drivers/staging/comedi/drivers/ni_labpc_isadma.c
index a05297421bd1..dba2be36c48d 100644
--- a/drivers/staging/comedi/drivers/ni_labpc_isadma.c
+++ b/drivers/staging/comedi/drivers/ni_labpc_isadma.c
@@ -29,6 +29,57 @@
 
 /* size in bytes of dma buffer */
 static const int dma_buffer_size = 0xff00;
+/* 2 bytes per sample */
+static const int sample_size = 2;
+
+/* utility function that suggests a dma transfer size in bytes */
+static unsigned int labpc_suggest_transfer_size(const struct comedi_cmd *cmd)
+{
+	unsigned int size;
+	unsigned int freq;
+
+	if (cmd->convert_src == TRIG_TIMER)
+		freq = 1000000000 / cmd->convert_arg;
+	else
+		/* return some default value */
+		freq = 0xffffffff;
+
+	/* make buffer fill in no more than 1/3 second */
+	size = (freq / 3) * sample_size;
+
+	/* set a minimum and maximum size allowed */
+	if (size > dma_buffer_size)
+		size = dma_buffer_size - dma_buffer_size % sample_size;
+	else if (size < sample_size)
+		size = sample_size;
+
+	return size;
+}
+
+void labpc_setup_dma(struct comedi_device *dev, struct comedi_subdevice *s)
+{
+	struct labpc_private *devpriv = dev->private;
+	struct comedi_cmd *cmd = &s->async->cmd;
+	unsigned long irq_flags;
+
+	irq_flags = claim_dma_lock();
+	disable_dma(devpriv->dma_chan);
+	/* clear flip-flop to make sure 2-byte registers for
+	 * count and address get set correctly */
+	clear_dma_ff(devpriv->dma_chan);
+	set_dma_addr(devpriv->dma_chan, devpriv->dma_addr);
+	/* set appropriate size of transfer */
+	devpriv->dma_transfer_size = labpc_suggest_transfer_size(cmd);
+	if (cmd->stop_src == TRIG_COUNT &&
+	    devpriv->count * sample_size < devpriv->dma_transfer_size)
+		devpriv->dma_transfer_size = devpriv->count * sample_size;
+	set_dma_count(devpriv->dma_chan, devpriv->dma_transfer_size);
+	enable_dma(devpriv->dma_chan);
+	release_dma_lock(irq_flags);
+	/* set CMD3 bits for caller to enable DMA and interrupt */
+	devpriv->cmd3 |= (CMD3_DMAEN | CMD3_DMATCINTEN);
+}
+EXPORT_SYMBOL_GPL(labpc_setup_dma);
 
 int labpc_init_dma_chan(struct comedi_device *dev, unsigned int dma_chan)
 {

commit 50787fa99d80e86c9a22b7af16fd9827f733f3ab
Author: Ian Abbott <abbotti@mev.co.uk>
Date:   Fri Jun 28 17:09:23 2013 +0100

    staging: comedi: ni_labpc: move register defs to new file
    
    The new "ni_labpc_isadma" module will need to access some register
    definitions from "ni_labpc.c", which is not part of the module's source.
    Move all the register definitions into a new, common header file
    "ni_labpc_regs.h".
    
    Signed-off-by: Ian Abbott <abbotti@mev.co.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/drivers/ni_labpc_isadma.c b/drivers/staging/comedi/drivers/ni_labpc_isadma.c
index e6c8437f573c..a05297421bd1 100644
--- a/drivers/staging/comedi/drivers/ni_labpc_isadma.c
+++ b/drivers/staging/comedi/drivers/ni_labpc_isadma.c
@@ -24,6 +24,7 @@
 #include <asm/dma.h>
 
 #include "ni_labpc.h"
+#include "ni_labpc_regs.h"
 #include "ni_labpc_isadma.h"
 
 /* size in bytes of dma buffer */

commit 86aff4bb11eb721b9be40dcd51f7571fb00edcde
Author: Ian Abbott <abbotti@mev.co.uk>
Date:   Fri Jun 28 17:09:20 2013 +0100

    staging: comedi: ni_labpc: migrate DMA channel init & free
    
    Migrate the code for requesting an ISA DMA channel and a DMA buffer, and
    the code for freeing them into two new functions in the
    "ni_labpc_isadma" module: `labpc_init_dma_chan()` and
    `labpc_free_dma_chan()`.  Dummy inline functions are provided in
    "ni_labpc_isadma.h" if the "ni_labpc_isadma" module is not being built.
    
    Signed-off-by: Ian Abbott <abbotti@mev.co.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/drivers/ni_labpc_isadma.c b/drivers/staging/comedi/drivers/ni_labpc_isadma.c
index 586ea54b8d79..e6c8437f573c 100644
--- a/drivers/staging/comedi/drivers/ni_labpc_isadma.c
+++ b/drivers/staging/comedi/drivers/ni_labpc_isadma.c
@@ -18,9 +18,63 @@
  */
 
 #include <linux/module.h>
+#include <linux/slab.h>
+#include "../comedidev.h"
 
+#include <asm/dma.h>
+
+#include "ni_labpc.h"
 #include "ni_labpc_isadma.h"
 
+/* size in bytes of dma buffer */
+static const int dma_buffer_size = 0xff00;
+
+int labpc_init_dma_chan(struct comedi_device *dev, unsigned int dma_chan)
+{
+	struct labpc_private *devpriv = dev->private;
+	void *dma_buffer;
+	unsigned long dma_flags;
+	int ret;
+
+	if (dma_chan != 1 && dma_chan != 3)
+		return -EINVAL;
+
+	dma_buffer = kmalloc(dma_buffer_size, GFP_KERNEL | GFP_DMA);
+	if (!dma_buffer)
+		return -ENOMEM;
+
+	ret = request_dma(dma_chan, dev->board_name);
+	if (ret) {
+		kfree(dma_buffer);
+		return ret;
+	}
+
+	devpriv->dma_buffer = dma_buffer;
+	devpriv->dma_chan = dma_chan;
+	devpriv->dma_addr = virt_to_bus(devpriv->dma_buffer);
+
+	dma_flags = claim_dma_lock();
+	disable_dma(devpriv->dma_chan);
+	set_dma_mode(devpriv->dma_chan, DMA_MODE_READ);
+	release_dma_lock(dma_flags);
+
+	return 0;
+}
+EXPORT_SYMBOL_GPL(labpc_init_dma_chan);
+
+void labpc_free_dma_chan(struct comedi_device *dev)
+{
+	struct labpc_private *devpriv = dev->private;
+
+	kfree(devpriv->dma_buffer);
+	devpriv->dma_buffer = NULL;
+	if (devpriv->dma_chan) {
+		free_dma(devpriv->dma_chan);
+		devpriv->dma_chan = 0;
+	}
+}
+EXPORT_SYMBOL_GPL(labpc_free_dma_chan);
+
 static int __init ni_labpc_isadma_init_module(void)
 {
 	return 0;

commit 9a6386623fc8a67f792b9df56acbd8758e1aa93d
Author: Ian Abbott <abbotti@mev.co.uk>
Date:   Fri Jun 28 17:09:19 2013 +0100

    staging: comedi: ni_labpc_isadma: new module for ISA DMA support
    
    It's just an empty module at the moment, selected by COMEDI_NI_LABPC_ISA
    && ISA_DMA_API && VIRT_TO_BUS, but will be populated by later patches to
    migrate ISA DMA support for NI Lab-PC cards out of the "ni_labpc"
    module.
    
    Signed-off-by: Ian Abbott <abbotti@mev.co.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/drivers/ni_labpc_isadma.c b/drivers/staging/comedi/drivers/ni_labpc_isadma.c
new file mode 100644
index 000000000000..586ea54b8d79
--- /dev/null
+++ b/drivers/staging/comedi/drivers/ni_labpc_isadma.c
@@ -0,0 +1,37 @@
+/*
+ * comedi/drivers/ni_labpc_isadma.c
+ * ISA DMA support for National Instruments Lab-PC series boards and
+ * compatibles.
+ *
+ * Extracted from ni_labpc.c:
+ * Copyright (C) 2001-2003 Frank Mori Hess <fmhess@users.sourceforge.net>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ */
+
+#include <linux/module.h>
+
+#include "ni_labpc_isadma.h"
+
+static int __init ni_labpc_isadma_init_module(void)
+{
+	return 0;
+}
+module_init(ni_labpc_isadma_init_module);
+
+static void __exit ni_labpc_isadma_cleanup_module(void)
+{
+}
+module_exit(ni_labpc_isadma_cleanup_module);
+
+MODULE_AUTHOR("Comedi http://www.comedi.org");
+MODULE_DESCRIPTION("Comedi NI Lab-PC ISA DMA support");
+MODULE_LICENSE("GPL");
