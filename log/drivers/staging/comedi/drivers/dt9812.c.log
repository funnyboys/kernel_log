commit 7c2c18202ce0c0f8f05a4d72999899fdc3fe9de3
Author: Ian Abbott <abbotti@mev.co.uk>
Date:   Wed Apr 17 16:16:11 2019 +0100

    staging: comedi: dt9812: Call mutex_destroy() on private mutex
    
    `dt9812_detach()` is the Comedi "detach" handler for the dt9812 driver.
    When it is called, the private data for the device is about to be freed.
    The private data contains a mutex `devpriv->mut` that was initialized
    when the private data was allocated.  Call `mutex_destroy()` to mark it
    as invalid.
    
    Also remove the calls to `mutex_lock()` and `mutex_unlock()` from
    `dt9812_detach()` as the mutex is only being used around a call to
    `usb_set_intfdata()` to clear the USB interface's driver data pointer.
    The mutex lock seems redundant here, especially as it is about to be
    destroyed.
    
    Signed-off-by: Ian Abbott <abbotti@mev.co.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/drivers/dt9812.c b/drivers/staging/comedi/drivers/dt9812.c
index 9f165f1cefa5..634f57730c1e 100644
--- a/drivers/staging/comedi/drivers/dt9812.c
+++ b/drivers/staging/comedi/drivers/dt9812.c
@@ -835,11 +835,8 @@ static void dt9812_detach(struct comedi_device *dev)
 	if (!devpriv)
 		return;
 
-	mutex_lock(&devpriv->mut);
-
+	mutex_destroy(&devpriv->mut);
 	usb_set_intfdata(intf, NULL);
-
-	mutex_unlock(&devpriv->mut);
 }
 
 static struct comedi_driver dt9812_driver = {

commit f3145cb39231772e6a0c276c56f135d22ac7a549
Author: Marco Wang <m.aesophor@gmail.com>
Date:   Tue Oct 16 20:37:11 2018 +0800

    Staging: comedi: dt9812: fixed a typo in comment.
    
    Fixed a typo in comment.
    
    Signed-off-by: Marco Wang <m.aesophor@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/drivers/dt9812.c b/drivers/staging/comedi/drivers/dt9812.c
index 75cc9e8e5b94..9f165f1cefa5 100644
--- a/drivers/staging/comedi/drivers/dt9812.c
+++ b/drivers/staging/comedi/drivers/dt9812.c
@@ -40,7 +40,7 @@
 #define DT9812_MAX_WRITE_CMD_PIPE_SIZE	32
 #define DT9812_MAX_READ_CMD_PIPE_SIZE	32
 
-/* usb_bulk_msg() timout in milliseconds */
+/* usb_bulk_msg() timeout in milliseconds */
 #define DT9812_USB_TIMEOUT		1000
 
 /*

commit b69839391d444882d83c85a531da8b4e75a2b2e6
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Tue Nov 7 14:58:44 2017 +0100

    staging: comedi: drivers: Remove redundant license text
    
    Now that the SPDX tag is in all comedi files, that identifies the
    license in a specific and legally-defined manner.  So the extra GPL text
    wording can be removed as it is no longer needed at all.
    
    This is done on a quest to remove the 700+ different ways that files in
    the kernel describe the GPL license text.  And there's unneeded stuff
    like the address (sometimes incorrect) for the FSF which is never
    needed.
    
    No copyright headers or other non-license-description text was removed.
    
    Cc: Ian Abbott <abbotti@mev.co.uk>
    Cc: H Hartley Sweeten <hsweeten@visionengravers.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/drivers/dt9812.c b/drivers/staging/comedi/drivers/dt9812.c
index ccef829651bb..75cc9e8e5b94 100644
--- a/drivers/staging/comedi/drivers/dt9812.c
+++ b/drivers/staging/comedi/drivers/dt9812.c
@@ -6,16 +6,6 @@
  * Copyright (C) 2005 Anders Blomdell <anders.blomdell@control.lth.se>
  *
  * COMEDI - Linux Control and Measurement Device Interface
- *
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation; either version 2 of the License, or
- * (at your option) any later version.
-
- *  This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
  */
 
 /*

commit e184e2bed8fc895ce930624524d319289c1f1082
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Tue Nov 7 14:58:43 2017 +0100

    staging: comedi: add SPDX identifiers to all greybus driver files
    
    It's good to have SPDX identifiers in all files to make it easier to
    audit the kernel tree for correct licenses.
    
    Update the drivers/staging/comedi files files with the correct SPDX
    license identifier based on the license text in the file itself.  The
    SPDX identifier is a legally binding shorthand, which can be used
    instead of the full boiler plate text.
    
    This work is based on a script and data from Thomas Gleixner, Philippe
    Ombredanne, and Kate Stewart.
    
    Cc: Ian Abbott <abbotti@mev.co.uk>
    Cc: H Hartley Sweeten <hsweeten@visionengravers.com>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: Kate Stewart <kstewart@linuxfoundation.org>
    Cc: Philippe Ombredanne <pombredanne@nexb.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/drivers/dt9812.c b/drivers/staging/comedi/drivers/dt9812.c
index 7ebca862ecaa..ccef829651bb 100644
--- a/drivers/staging/comedi/drivers/dt9812.c
+++ b/drivers/staging/comedi/drivers/dt9812.c
@@ -1,3 +1,4 @@
+// SPDX-License-Identifier: GPL-2.0+
 /*
  * comedi/drivers/dt9812.c
  *   COMEDI driver for DataTranslation DT9812 USB module

commit 62190d498c1d1cee970176840f24822fc14d27d1
Author: Cheah Kok Cheong <thrust73@gmail.com>
Date:   Fri Jul 22 23:29:39 2016 +0800

    staging: comedi: drivers: replace le16_to_cpu() with usb_endpoint_maxp()
    
    Use macro introduced in commit 939f325f4a0f
    ("usb: add usb_endpoint_maxp() macro")
    
    Signed-off-by: Cheah Kok Cheong <thrust73@gmail.com>
    Reviewed-by: Ian Abbott <abbotti@mev.co.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/drivers/dt9812.c b/drivers/staging/comedi/drivers/dt9812.c
index 3295bb4ac8c4..7ebca862ecaa 100644
--- a/drivers/staging/comedi/drivers/dt9812.c
+++ b/drivers/staging/comedi/drivers/dt9812.c
@@ -660,12 +660,12 @@ static int dt9812_find_endpoints(struct comedi_device *dev)
 		case 1:
 			dir = USB_DIR_OUT;
 			devpriv->cmd_wr.addr = ep->bEndpointAddress;
-			devpriv->cmd_wr.size = le16_to_cpu(ep->wMaxPacketSize);
+			devpriv->cmd_wr.size = usb_endpoint_maxp(ep);
 			break;
 		case 2:
 			dir = USB_DIR_IN;
 			devpriv->cmd_rd.addr = ep->bEndpointAddress;
-			devpriv->cmd_rd.size = le16_to_cpu(ep->wMaxPacketSize);
+			devpriv->cmd_rd.size = usb_endpoint_maxp(ep);
 			break;
 		case 3:
 			/* unused write stream */

commit 9faa310f2b813bad7682120d37ac760db14eec93
Author: Ksenija Stanojevic <ksenija.stanojevic@gmail.com>
Date:   Tue Oct 13 19:08:03 2015 +0200

    Staging: comedi: dt9812: Use mutex instead of semaphore
    
    Replace binary semaphore with mutex. Mutex also gives better performance
    than semaphore.
    
    Signed-off-by: Ksenija Stanojevic <ksenija.stanojevic@gmail.com>
    Reviewed-by: Arnd Bergmann <arnd@arndb.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/drivers/dt9812.c b/drivers/staging/comedi/drivers/dt9812.c
index 0a4ee8b75aba..3295bb4ac8c4 100644
--- a/drivers/staging/comedi/drivers/dt9812.c
+++ b/drivers/staging/comedi/drivers/dt9812.c
@@ -233,7 +233,7 @@ struct dt9812_usb_cmd {
 };
 
 struct dt9812_private {
-	struct semaphore sem;
+	struct mutex mut;
 	struct {
 		__u8 addr;
 		size_t size;
@@ -335,7 +335,7 @@ static int dt9812_digital_in(struct comedi_device *dev, u8 *bits)
 	u8 value[2];
 	int ret;
 
-	down(&devpriv->sem);
+	mutex_lock(&devpriv->mut);
 	ret = dt9812_read_multiple_registers(dev, 2, reg, value);
 	if (ret == 0) {
 		/*
@@ -345,7 +345,7 @@ static int dt9812_digital_in(struct comedi_device *dev, u8 *bits)
 		 */
 		*bits = (value[0] & 0x7f) | ((value[1] & 0x08) << 4);
 	}
-	up(&devpriv->sem);
+	mutex_unlock(&devpriv->mut);
 
 	return ret;
 }
@@ -357,9 +357,9 @@ static int dt9812_digital_out(struct comedi_device *dev, u8 bits)
 	u8 value[1] = { bits };
 	int ret;
 
-	down(&devpriv->sem);
+	mutex_lock(&devpriv->mut);
 	ret = dt9812_write_multiple_registers(dev, 1, reg, value);
-	up(&devpriv->sem);
+	mutex_unlock(&devpriv->mut);
 
 	return ret;
 }
@@ -444,7 +444,7 @@ static int dt9812_analog_in(struct comedi_device *dev,
 	u8 val[3];
 	int ret;
 
-	down(&devpriv->sem);
+	mutex_lock(&devpriv->mut);
 
 	/* 1 select the gain */
 	dt9812_configure_gain(dev, &rmw[0], gain);
@@ -493,7 +493,7 @@ static int dt9812_analog_in(struct comedi_device *dev,
 	}
 
 exit:
-	up(&devpriv->sem);
+	mutex_unlock(&devpriv->mut);
 
 	return ret;
 }
@@ -504,7 +504,7 @@ static int dt9812_analog_out(struct comedi_device *dev, int channel, u16 value)
 	struct dt9812_rmw_byte rmw[3];
 	int ret;
 
-	down(&devpriv->sem);
+	mutex_lock(&devpriv->mut);
 
 	switch (channel) {
 	case 0:
@@ -543,7 +543,7 @@ static int dt9812_analog_out(struct comedi_device *dev, int channel, u16 value)
 	}
 	ret = dt9812_rmw_multiple_registers(dev, 3, rmw);
 
-	up(&devpriv->sem);
+	mutex_unlock(&devpriv->mut);
 
 	return ret;
 }
@@ -606,9 +606,9 @@ static int dt9812_ao_insn_read(struct comedi_device *dev,
 	struct dt9812_private *devpriv = dev->private;
 	int ret;
 
-	down(&devpriv->sem);
+	mutex_lock(&devpriv->mut);
 	ret = comedi_readback_insn_read(dev, s, insn, data);
-	up(&devpriv->sem);
+	mutex_unlock(&devpriv->mut);
 
 	return ret;
 }
@@ -772,7 +772,7 @@ static int dt9812_auto_attach(struct comedi_device *dev,
 	if (!devpriv)
 		return -ENOMEM;
 
-	sema_init(&devpriv->sem, 1);
+	mutex_init(&devpriv->mut);
 	usb_set_intfdata(intf, devpriv);
 
 	ret = dt9812_find_endpoints(dev);
@@ -844,11 +844,11 @@ static void dt9812_detach(struct comedi_device *dev)
 	if (!devpriv)
 		return;
 
-	down(&devpriv->sem);
+	mutex_lock(&devpriv->mut);
 
 	usb_set_intfdata(intf, NULL);
 
-	up(&devpriv->sem);
+	mutex_unlock(&devpriv->mut);
 }
 
 static struct comedi_driver dt9812_driver = {

commit 5050b1353903f71ab81462458100e2927e904d66
Author: H Hartley Sweeten <hsweeten@visionengravers.com>
Date:   Wed Oct 7 15:58:44 2015 -0700

    staging: comedi: dt9812: reword comments to fix checkpatch.pl issues
    
    Reword the block comments to fix the checkpatch.pl issues about:
    
    WARNING: Block comments use * on subsequent lines
    WARNING: Block comments use a trailing */ on a separate line
    
    For consistency, also reword the previous comments.
    
    Signed-off-by: H Hartley Sweeten <hsweeten@visionengravers.com>
    Reviewed-by: Ian Abbott <abbotti@mev.co.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/drivers/dt9812.c b/drivers/staging/comedi/drivers/dt9812.c
index 23bd3218bb04..0a4ee8b75aba 100644
--- a/drivers/staging/comedi/drivers/dt9812.c
+++ b/drivers/staging/comedi/drivers/dt9812.c
@@ -513,13 +513,12 @@ static int dt9812_analog_out(struct comedi_device *dev, int channel, u16 value)
 		rmw[0].and_mask = 0xff;
 		rmw[0].or_value = F020_MASK_DACXCN_DACXEN;
 
-		/* 2 load low byte of DAC value first */
+		/* 2. load lsb of DAC value first */
 		rmw[1].address = F020_SFR_DAC0L;
 		rmw[1].and_mask = 0xff;
 		rmw[1].or_value = value & 0xff;
 
-		/* 3 load high byte of DAC value next to latch the
-			12-bit value */
+		/* 3. load msb of DAC value next to latch the 12-bit value */
 		rmw[2].address = F020_SFR_DAC0H;
 		rmw[2].and_mask = 0xff;
 		rmw[2].or_value = (value >> 8) & 0xf;
@@ -531,13 +530,12 @@ static int dt9812_analog_out(struct comedi_device *dev, int channel, u16 value)
 		rmw[0].and_mask = 0xff;
 		rmw[0].or_value = F020_MASK_DACXCN_DACXEN;
 
-		/* 2 load low byte of DAC value first */
+		/* 2. load lsb of DAC value first */
 		rmw[1].address = F020_SFR_DAC1L;
 		rmw[1].and_mask = 0xff;
 		rmw[1].or_value = value & 0xff;
 
-		/* 3 load high byte of DAC value next to latch the
-			12-bit value */
+		/* 3. load msb of DAC value next to latch the 12-bit value */
 		rmw[2].address = F020_SFR_DAC1H;
 		rmw[2].and_mask = 0xff;
 		rmw[2].or_value = (value >> 8) & 0xf;

commit 00761a9c4b71682ffc6a988d11f96ccf71cebb4e
Author: H Hartley Sweeten <hsweeten@visionengravers.com>
Date:   Wed Oct 7 15:58:43 2015 -0700

    staging: comedi: dt9812: rename F020_MASK_DACxCN_DACxEN
    
    Rename this CamelCase define.
    
    Signed-off-by: H Hartley Sweeten <hsweeten@visionengravers.com>
    Reviewed-by: Ian Abbott <abbotti@mev.co.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/drivers/dt9812.c b/drivers/staging/comedi/drivers/dt9812.c
index 92ec0d6c0366..23bd3218bb04 100644
--- a/drivers/staging/comedi/drivers/dt9812.c
+++ b/drivers/staging/comedi/drivers/dt9812.c
@@ -80,7 +80,7 @@
 #define F020_MASK_ADC0CN_AD0INT		0x20
 #define F020_MASK_ADC0CN_AD0BUSY	0x10
 
-#define F020_MASK_DACxCN_DACxEN		0x80
+#define F020_MASK_DACXCN_DACXEN		0x80
 
 enum {
 					/* A/D  D/A  DI  DO  CT */
@@ -511,7 +511,7 @@ static int dt9812_analog_out(struct comedi_device *dev, int channel, u16 value)
 		/* 1. Set DAC mode */
 		rmw[0].address = F020_SFR_DAC0CN;
 		rmw[0].and_mask = 0xff;
-		rmw[0].or_value = F020_MASK_DACxCN_DACxEN;
+		rmw[0].or_value = F020_MASK_DACXCN_DACXEN;
 
 		/* 2 load low byte of DAC value first */
 		rmw[1].address = F020_SFR_DAC0L;
@@ -529,7 +529,7 @@ static int dt9812_analog_out(struct comedi_device *dev, int channel, u16 value)
 		/* 1. Set DAC mode */
 		rmw[0].address = F020_SFR_DAC1CN;
 		rmw[0].and_mask = 0xff;
-		rmw[0].or_value = F020_MASK_DACxCN_DACxEN;
+		rmw[0].or_value = F020_MASK_DACXCN_DACXEN;
 
 		/* 2 load low byte of DAC value first */
 		rmw[1].address = F020_SFR_DAC1L;

commit 6c6e8b1ab21be537fd3ffad5ca1d1b93ed44e5e6
Author: H Hartley Sweeten <hsweeten@visionengravers.com>
Date:   Wed Oct 7 15:58:42 2015 -0700

    staging: comedi: dt9812: tidy up multi-line comment
    
    Reformat the multi-line comment in the kernel CodingStyle.
    
    Signed-off-by: H Hartley Sweeten <hsweeten@visionengravers.com>
    Reviewed-by: Ian Abbott <abbotti@mev.co.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/drivers/dt9812.c b/drivers/staging/comedi/drivers/dt9812.c
index e11c216a4c85..92ec0d6c0366 100644
--- a/drivers/staging/comedi/drivers/dt9812.c
+++ b/drivers/staging/comedi/drivers/dt9812.c
@@ -18,17 +18,17 @@
  */
 
 /*
-Driver: dt9812
-Description: Data Translation DT9812 USB module
-Author: anders.blomdell@control.lth.se (Anders Blomdell)
-Status: in development
-Devices: [Data Translation] DT9812 (dt9812)
-Updated: Sun Nov 20 20:18:34 EST 2005
-
-This driver works, but bulk transfers not implemented. Might be a starting point
-for someone else. I found out too late that USB has too high latencies (>1 ms)
-for my needs.
-*/
+ * Driver: dt9812
+ * Description: Data Translation DT9812 USB module
+ * Devices: [Data Translation] DT9812 (dt9812)
+ * Author: anders.blomdell@control.lth.se (Anders Blomdell)
+ * Status: in development
+ * Updated: Sun Nov 20 20:18:34 EST 2005
+ *
+ * This driver works, but bulk transfers not implemented. Might be a
+ * starting point for someone else. I found out too late that USB has
+ * too high latencies (>1 ms) for my needs.
+ */
 
 /*
  * Nota Bene:

commit 2079377a15a48601d3c498b37ad25ebeb4edacdb
Author: Ian Abbott <abbotti@mev.co.uk>
Date:   Tue Jan 27 17:49:03 2015 +0000

    staging: comedi: dt9812: include new "comedi_usb.h" header
    
    Include the new "../comedi_usb.h" header instead of <linux/usb.h> and
    "../comedidev.h", which will now get included indirectly.
    
    Signed-off-by: Ian Abbott <abbotti@mev.co.uk>
    Reviewed-by: H Hartley Sweeten <hsweeten@visionengravers.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/drivers/dt9812.c b/drivers/staging/comedi/drivers/dt9812.c
index 06c601d8fdff..e11c216a4c85 100644
--- a/drivers/staging/comedi/drivers/dt9812.c
+++ b/drivers/staging/comedi/drivers/dt9812.c
@@ -42,9 +42,8 @@ for my needs.
 #include <linux/module.h>
 #include <linux/errno.h>
 #include <linux/uaccess.h>
-#include <linux/usb.h>
 
-#include "../comedidev.h"
+#include "../comedi_usb.h"
 
 #define DT9812_DIAGS_BOARD_INFO_ADDR	0xFBFF
 #define DT9812_MAX_WRITE_CMD_PIPE_SIZE	32

commit ef49d8329e25ee1686520315713b86419cddcb45
Author: H Hartley Sweeten <hsweeten@visionengravers.com>
Date:   Thu Oct 30 11:19:34 2014 -0700

    staging: comedi: drivers: replace SDF_WRITEABLE with SDF_WRITABLE
    
    As indicated in the comedi.h uapi header, SDF_WRITEABLE was a spelling
    error in the API, SDF_WRITABLE is prefered.
    
    For aesthetics, replace all the SDF_WRITEABLE uses with SDF_WRITABLE.
    
    Signed-off-by: H Hartley Sweeten <hsweeten@visionengravers.com>
    Reviewed-by: Ian Abbott <abbotti@mev.co.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/drivers/dt9812.c b/drivers/staging/comedi/drivers/dt9812.c
index 77bb89fee327..06c601d8fdff 100644
--- a/drivers/staging/comedi/drivers/dt9812.c
+++ b/drivers/staging/comedi/drivers/dt9812.c
@@ -804,7 +804,7 @@ static int dt9812_auto_attach(struct comedi_device *dev,
 	/* Digital Output subdevice */
 	s = &dev->subdevices[1];
 	s->type		= COMEDI_SUBD_DO;
-	s->subdev_flags	= SDF_WRITEABLE;
+	s->subdev_flags	= SDF_WRITABLE;
 	s->n_chan	= 8;
 	s->maxdata	= 1;
 	s->range_table	= &range_digital;
@@ -822,7 +822,7 @@ static int dt9812_auto_attach(struct comedi_device *dev,
 	/* Analog Output subdevice */
 	s = &dev->subdevices[3];
 	s->type		= COMEDI_SUBD_AO;
-	s->subdev_flags	= SDF_WRITEABLE;
+	s->subdev_flags	= SDF_WRITABLE;
 	s->n_chan	= 2;
 	s->maxdata	= 0x0fff;
 	s->range_table	= is_unipolar ? &range_unipolar2_5 : &range_bipolar10;

commit acc5fe2ce36f41f74603d57b635df28a61c94c34
Author: H Hartley Sweeten <hsweeten@visionengravers.com>
Date:   Mon Aug 25 16:04:19 2014 -0700

    staging: comedi: dt9812: use comedi_subdevice 'readback'
    
    Use the new comedi_subdevice 'readback' member and the core provided
    (*insn_read) for the readback of the analog output subdevice channels.
    
    Signed-off-by: H Hartley Sweeten <hsweeten@visionengravers.com>
    Reviewed-by: Ian Abbott <abbotti@mev.co.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/drivers/dt9812.c b/drivers/staging/comedi/drivers/dt9812.c
index bd2ca2b371e6..77bb89fee327 100644
--- a/drivers/staging/comedi/drivers/dt9812.c
+++ b/drivers/staging/comedi/drivers/dt9812.c
@@ -240,7 +240,6 @@ struct dt9812_private {
 		size_t size;
 	} cmd_wr, cmd_rd;
 	u16 device;
-	u16 ao_shadow[2];
 };
 
 static int dt9812_read_info(struct comedi_device *dev,
@@ -546,7 +545,6 @@ static int dt9812_analog_out(struct comedi_device *dev, int channel, u16 value)
 		break;
 	}
 	ret = dt9812_rmw_multiple_registers(dev, 3, rmw);
-	devpriv->ao_shadow[channel] = value;
 
 	up(&devpriv->sem);
 
@@ -609,15 +607,13 @@ static int dt9812_ao_insn_read(struct comedi_device *dev,
 			       unsigned int *data)
 {
 	struct dt9812_private *devpriv = dev->private;
-	unsigned int chan = CR_CHAN(insn->chanspec);
-	int i;
+	int ret;
 
 	down(&devpriv->sem);
-	for (i = 0; i < insn->n; i++)
-		data[i] = devpriv->ao_shadow[chan];
+	ret = comedi_readback_insn_read(dev, s, insn, data);
 	up(&devpriv->sem);
 
-	return insn->n;
+	return ret;
 }
 
 static int dt9812_ao_insn_write(struct comedi_device *dev,
@@ -626,13 +622,17 @@ static int dt9812_ao_insn_write(struct comedi_device *dev,
 				unsigned int *data)
 {
 	unsigned int chan = CR_CHAN(insn->chanspec);
-	int ret;
 	int i;
 
 	for (i = 0; i < insn->n; i++) {
-		ret = dt9812_analog_out(dev, chan, data[i]);
+		unsigned int val = data[i];
+		int ret;
+
+		ret = dt9812_analog_out(dev, chan, val);
 		if (ret)
 			return ret;
+
+		s->readback[chan] = val;
 	}
 
 	return insn->n;
@@ -769,6 +769,7 @@ static int dt9812_auto_attach(struct comedi_device *dev,
 	struct comedi_subdevice *s;
 	bool is_unipolar;
 	int ret;
+	int i;
 
 	devpriv = comedi_alloc_devpriv(dev, sizeof(*devpriv));
 	if (!devpriv)
@@ -828,8 +829,12 @@ static int dt9812_auto_attach(struct comedi_device *dev,
 	s->insn_write	= dt9812_ao_insn_write;
 	s->insn_read	= dt9812_ao_insn_read;
 
-	devpriv->ao_shadow[0] = is_unipolar ? 0x0000 : 0x0800;
-	devpriv->ao_shadow[1] = is_unipolar ? 0x0000 : 0x0800;
+	ret = comedi_alloc_subdev_readback(s);
+	if (ret)
+		return ret;
+
+	for (i = 0; i < s->n_chan; i++)
+		s->readback[i] = is_unipolar ? 0x0000 : 0x0800;
 
 	return 0;
 }

commit 98039f8ac2a138cc687e06e04b42bc57d09702d4
Author: H Hartley Sweeten <hsweeten@visionengravers.com>
Date:   Wed Jul 16 11:01:58 2014 -0700

    staging: comedi: dt9812: checkpatch.pl cleanup (missing blank line)
    
    Fix checkpatch.pl warning:
    
    WARNING: Missing a blank line after declarations
    
    Signed-off-by: H Hartley Sweeten <hsweeten@visionengravers.com>
    Cc: Ian Abbott <abbotti@mev.co.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/drivers/dt9812.c b/drivers/staging/comedi/drivers/dt9812.c
index b3aeb6fb2ad0..bd2ca2b371e6 100644
--- a/drivers/staging/comedi/drivers/dt9812.c
+++ b/drivers/staging/comedi/drivers/dt9812.c
@@ -653,6 +653,7 @@ static int dt9812_find_endpoints(struct comedi_device *dev)
 
 	for (i = 0; i < host->desc.bNumEndpoints; ++i) {
 		int dir = -1;
+
 		ep = &host->endpoint[i].desc;
 		switch (i) {
 		case 0:

commit 885a947e5b08953ebd5fce88be89a0399a7ab918
Author: Paul Gortmaker <paul.gortmaker@windriver.com>
Date:   Tue Dec 10 15:23:48 2013 -0500

    staging: delete non-required instances of include <linux/init.h>
    
    None of these files are actually using any __init type directives
    and hence don't need to include <linux/init.h>.  Most are just a
    left over from __devinit and __cpuinit removal, or simply due to
    code getting copied from one driver to the next.
    
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/drivers/dt9812.c b/drivers/staging/comedi/drivers/dt9812.c
index 73af600c1725..b3aeb6fb2ad0 100644
--- a/drivers/staging/comedi/drivers/dt9812.c
+++ b/drivers/staging/comedi/drivers/dt9812.c
@@ -41,7 +41,6 @@ for my needs.
 #include <linux/kernel.h>
 #include <linux/module.h>
 #include <linux/errno.h>
-#include <linux/init.h>
 #include <linux/uaccess.h>
 #include <linux/usb.h>
 

commit 3ceba4ba9882bf9e5ecfa5823c79ba92659e4776
Author: Ian Abbott <abbotti@mev.co.uk>
Date:   Mon Oct 7 17:29:38 2013 +0100

    staging: comedi: dt9812: remove ifdefed out enums
    
    Remove the #if'd out DT9812_DEVID_... enumerated constants and line up
    the comments for the others.
    
    Signed-off-by: Ian Abbott <abbotti@mev.co.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/drivers/dt9812.c b/drivers/staging/comedi/drivers/dt9812.c
index 64565d4c902d..73af600c1725 100644
--- a/drivers/staging/comedi/drivers/dt9812.c
+++ b/drivers/staging/comedi/drivers/dt9812.c
@@ -85,13 +85,9 @@ for my needs.
 #define F020_MASK_DACxCN_DACxEN		0x80
 
 enum {
-	/* A/D  D/A  DI  DO  CT */
-	DT9812_DEVID_DT9812_10,	/*  8    2   8   8   1  +/- 10V */
-	DT9812_DEVID_DT9812_2PT5,	/* 8    2   8   8   1  0-2.44V */
-#if 0
-	DT9812_DEVID_DT9813,	/*  16   2   4   4   1  +/- 10V */
-	DT9812_DEVID_DT9814	/*  24   2   0   0   1  +/- 10V */
-#endif
+					/* A/D  D/A  DI  DO  CT */
+	DT9812_DEVID_DT9812_10,		/*  8    2   8   8   1  +/- 10V */
+	DT9812_DEVID_DT9812_2PT5,	/*  8    2   8   8   1  0-2.44V */
 };
 
 enum dt9812_gain {

commit 97f4289ad08cffe55de06d4ac4f89ac540450aee
Author: H Hartley Sweeten <hsweeten@visionengravers.com>
Date:   Fri Aug 30 11:05:58 2013 -0700

    staging: comedi: drivers: use comedi_dio_update_state() for simple cases
    
    Use comedi_dio_update_state() to handle the boilerplate code to update
    the subdevice s->state for simple cases where the hardware is updated
    when any channel is modified.
    
    Also, fix a bug in the amplc_pc263 and amplc_pci263 drivers where the
    current state is not returned in data[1].
    
    Signed-off-by: H Hartley Sweeten <hsweeten@visionengravers.com>
    Reviewed-by: Ian Abbott <abbotti@mev.co.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/drivers/dt9812.c b/drivers/staging/comedi/drivers/dt9812.c
index b5e6f33dc217..64565d4c902d 100644
--- a/drivers/staging/comedi/drivers/dt9812.c
+++ b/drivers/staging/comedi/drivers/dt9812.c
@@ -580,15 +580,8 @@ static int dt9812_do_insn_bits(struct comedi_device *dev,
 			       struct comedi_insn *insn,
 			       unsigned int *data)
 {
-	unsigned int mask = data[0];
-	unsigned int bits = data[1];
-
-	if (mask) {
-		s->state &= ~mask;
-		s->state |= (bits & mask);
-
+	if (comedi_dio_update_state(s, data))
 		dt9812_digital_out(dev, s->state);
-	}
 
 	data[1] = s->state;
 

commit 70bcbc06b7c0c7ecb900a81250862440e80205f7
Author: Shaun Laing <shaun@XResource.ca>
Date:   Tue Jul 30 11:29:43 2013 -0600

    staging: comedi: dt9812: Resolve different base types warnings.
    
    Resolves warnings from the "sparse" checker of the form "warning: incorrect
    type in assignment (different base types)".
    
    Signed-off-by: Shaun Laing <shaun@xresource.ca>
    Reviewed-by: Ian Abbott <abbotti@mev.co.uk>
    Reviewed-by: H Hartley Sweeten <hsweeten@visionengravers.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/drivers/dt9812.c b/drivers/staging/comedi/drivers/dt9812.c
index 7d78c78a4a27..b5e6f33dc217 100644
--- a/drivers/staging/comedi/drivers/dt9812.c
+++ b/drivers/staging/comedi/drivers/dt9812.c
@@ -187,8 +187,8 @@ enum {
 };
 
 struct dt9812_flash_data {
-	u16 numbytes;
-	u16 address;
+	__le16 numbytes;
+	__le16 address;
 };
 
 #define DT9812_MAX_NUM_MULTI_BYTE_RDS  \
@@ -229,7 +229,7 @@ struct dt9812_rmw_multi {
 };
 
 struct dt9812_usb_cmd {
-	u32 cmd;
+	__le32 cmd;
 	union {
 		struct dt9812_flash_data flash_data_info;
 		struct dt9812_read_multi read_multi_info;

commit a66b0f039cddfd01152eb773c4f60b246f612516
Author: Wei Yongjun <yongjun_wei@trendmicro.com.cn>
Date:   Mon Jul 29 12:28:51 2013 +0800

    staging: comedi: dt9812: remove duplicated include from dt9812.c
    
    Remove duplicated include.
    
    Signed-off-by: Wei Yongjun <yongjun_wei@trendmicro.com.cn>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/drivers/dt9812.c b/drivers/staging/comedi/drivers/dt9812.c
index bd14017b798c..7d78c78a4a27 100644
--- a/drivers/staging/comedi/drivers/dt9812.c
+++ b/drivers/staging/comedi/drivers/dt9812.c
@@ -42,7 +42,6 @@ for my needs.
 #include <linux/module.h>
 #include <linux/errno.h>
 #include <linux/init.h>
-#include <linux/module.h>
 #include <linux/uaccess.h>
 #include <linux/usb.h>
 

commit e4ea910a487af187950f88d345e6dc9744c8d257
Author: Shaun Laing <shaun@XResource.ca>
Date:   Fri Jul 26 08:25:34 2013 -0600

    staging: comedi: dt9812: Resolves sparse endian warnings.
    
    Resolves warnings from the "sparse" checker of the form "warning: cast to
    restricted __le??".
    
    Signed-off-by: Shaun Laing <shaun@xresource.ca>
    Reviewed-by: H Hartley Sweeten <hsweeten@visionengravers.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/drivers/dt9812.c b/drivers/staging/comedi/drivers/dt9812.c
index ffb7572b10f5..bd14017b798c 100644
--- a/drivers/staging/comedi/drivers/dt9812.c
+++ b/drivers/staging/comedi/drivers/dt9812.c
@@ -707,8 +707,9 @@ static int dt9812_reset_device(struct comedi_device *dev)
 	u32 serial;
 	u16 vendor;
 	u16 product;
-	u16 tmp16;
 	u8 tmp8;
+	__le16 tmp16;
+	__le32 tmp32;
 	int ret;
 	int i;
 
@@ -731,19 +732,19 @@ static int dt9812_reset_device(struct comedi_device *dev)
 		}
 	}
 
-	ret = dt9812_read_info(dev, 1, &vendor, sizeof(vendor));
+	ret = dt9812_read_info(dev, 1, &tmp16, sizeof(tmp16));
 	if (ret) {
 		dev_err(dev->class_dev, "failed to read vendor id\n");
 		return ret;
 	}
-	vendor = le16_to_cpu(vendor);
+	vendor = le16_to_cpu(tmp16);
 
-	ret = dt9812_read_info(dev, 3, &product, sizeof(product));
+	ret = dt9812_read_info(dev, 3, &tmp16, sizeof(tmp16));
 	if (ret) {
 		dev_err(dev->class_dev, "failed to read product id\n");
 		return ret;
 	}
-	product = le16_to_cpu(product);
+	product = le16_to_cpu(tmp16);
 
 	ret = dt9812_read_info(dev, 5, &tmp16, sizeof(tmp16));
 	if (ret) {
@@ -752,12 +753,12 @@ static int dt9812_reset_device(struct comedi_device *dev)
 	}
 	devpriv->device = le16_to_cpu(tmp16);
 
-	ret = dt9812_read_info(dev, 7, &serial, sizeof(serial));
+	ret = dt9812_read_info(dev, 7, &tmp32, sizeof(tmp32));
 	if (ret) {
 		dev_err(dev->class_dev, "failed to read serial number\n");
 		return ret;
 	}
-	serial = le32_to_cpu(serial);
+	serial = le32_to_cpu(tmp32);
 
 	/* let the user know what node this device is now attached to */
 	dev_info(dev->class_dev, "USB DT9812 (%4.4x.%4.4x.%4.4x) #0x%8.8x\n",

commit ce157f8032bbd46d9427034c335b0afd751da25d
Author: H Hartley Sweeten <hsweeten@visionengravers.com>
Date:   Mon Jun 24 17:04:43 2013 -0700

    staging: comedi: don't rely on comedidev.h to include headers
    
    comedidev.h is the main kernel header for comedi. Every comedi
    driver includes this header which then includes a number of
    <linux/*> headers. All the drivers need <linux/module.h> and some
    of them need <linux/delay.h>. The rest are not needed by any of
    the drivers.
    
    Remove all the includes in comedidev.h except for <linux/dma-mapping.h>,
    which is needed to pick up the enum dma_data_direction for the
    comedi_subdevice definition, and "comedi.h", which is the uapi
    header for comedi.
    
    Add <linux/module.h> to all the comedi drivers and <linux/delay.h>
    to the couple that need it.
    
    Signed-off-by: H Hartley Sweeten <hsweeten@visionengravers.com>
    Cc: Ian Abbott <abbotti@mev.co.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/drivers/dt9812.c b/drivers/staging/comedi/drivers/dt9812.c
index 07aa828365e5..ffb7572b10f5 100644
--- a/drivers/staging/comedi/drivers/dt9812.c
+++ b/drivers/staging/comedi/drivers/dt9812.c
@@ -39,6 +39,7 @@ for my needs.
  */
 
 #include <linux/kernel.h>
+#include <linux/module.h>
 #include <linux/errno.h>
 #include <linux/init.h>
 #include <linux/module.h>

commit 0bdab509bf9c6d838dc0a3b1d68bbf841fc20b5a
Author: H Hartley Sweeten <hsweeten@visionengravers.com>
Date:   Mon Jun 24 16:55:44 2013 -0700

    staging: comedi: use comedi_alloc_devpriv()
    
    Use the helper function to allocate memory and set the comedi_device
    private data pointer.
    
    This removes the dependency on slab.h from most of the drivers so
    remove the global #include in comedidev.h and the local #include
    in some of the drivers.
    
    Signed-off-by: H Hartley Sweeten <hsweeten@visionengravers.com>
    Reviewed-by: Ian Abbott <abbotti@mev.co.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/drivers/dt9812.c b/drivers/staging/comedi/drivers/dt9812.c
index 6c60949d9193..07aa828365e5 100644
--- a/drivers/staging/comedi/drivers/dt9812.c
+++ b/drivers/staging/comedi/drivers/dt9812.c
@@ -41,7 +41,6 @@ for my needs.
 #include <linux/kernel.h>
 #include <linux/errno.h>
 #include <linux/init.h>
-#include <linux/slab.h>
 #include <linux/module.h>
 #include <linux/uaccess.h>
 #include <linux/usb.h>
@@ -781,10 +780,9 @@ static int dt9812_auto_attach(struct comedi_device *dev,
 	bool is_unipolar;
 	int ret;
 
-	devpriv = kzalloc(sizeof(*devpriv), GFP_KERNEL);
+	devpriv = comedi_alloc_devpriv(dev, sizeof(*devpriv));
 	if (!devpriv)
 		return -ENOMEM;
-	dev->private = devpriv;
 
 	sema_init(&devpriv->sem, 1);
 	usb_set_intfdata(intf, devpriv);

commit 87d87adcd797291e553fcfca32bc7b257a041d95
Author: H Hartley Sweeten <hsweeten@visionengravers.com>
Date:   Mon May 20 14:27:48 2013 -0700

    staging: comedi: dt9812: use comedi_to_usb_dev()
    
    Use the helper function to get a usb_device pointer from a
    comedi_device pointer. This removes the need for also getting
    the usb_interface pointer in some cases.
    
    Signed-off-by: H Hartley Sweeten <hsweeten@visionengravers.com>
    Cc Ian Abbott <abbotti@mev.co.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/drivers/dt9812.c b/drivers/staging/comedi/drivers/dt9812.c
index 9aab5b9a8738..6c60949d9193 100644
--- a/drivers/staging/comedi/drivers/dt9812.c
+++ b/drivers/staging/comedi/drivers/dt9812.c
@@ -252,8 +252,7 @@ struct dt9812_private {
 static int dt9812_read_info(struct comedi_device *dev,
 			    int offset, void *buf, size_t buf_size)
 {
-	struct usb_interface *intf = comedi_to_usb_interface(dev);
-	struct usb_device *usb = interface_to_usbdev(intf);
+	struct usb_device *usb = comedi_to_usb_dev(dev);
 	struct dt9812_private *devpriv = dev->private;
 	struct dt9812_usb_cmd cmd;
 	int count, ret;
@@ -277,8 +276,7 @@ static int dt9812_read_multiple_registers(struct comedi_device *dev,
 					  int reg_count, u8 *address,
 					  u8 *value)
 {
-	struct usb_interface *intf = comedi_to_usb_interface(dev);
-	struct usb_device *usb = interface_to_usbdev(intf);
+	struct usb_device *usb = comedi_to_usb_dev(dev);
 	struct dt9812_private *devpriv = dev->private;
 	struct dt9812_usb_cmd cmd;
 	int i, count, ret;
@@ -302,8 +300,7 @@ static int dt9812_write_multiple_registers(struct comedi_device *dev,
 					   int reg_count, u8 *address,
 					   u8 *value)
 {
-	struct usb_interface *intf = comedi_to_usb_interface(dev);
-	struct usb_device *usb = interface_to_usbdev(intf);
+	struct usb_device *usb = comedi_to_usb_dev(dev);
 	struct dt9812_private *devpriv = dev->private;
 	struct dt9812_usb_cmd cmd;
 	int i, count;
@@ -324,8 +321,7 @@ static int dt9812_rmw_multiple_registers(struct comedi_device *dev,
 					 int reg_count,
 					 struct dt9812_rmw_byte *rmw)
 {
-	struct usb_interface *intf = comedi_to_usb_interface(dev);
-	struct usb_device *usb = interface_to_usbdev(intf);
+	struct usb_device *usb = comedi_to_usb_dev(dev);
 	struct dt9812_private *devpriv = dev->private;
 	struct dt9812_usb_cmd cmd;
 	int i, count;
@@ -706,8 +702,7 @@ static int dt9812_find_endpoints(struct comedi_device *dev)
 
 static int dt9812_reset_device(struct comedi_device *dev)
 {
-	struct usb_interface *intf = comedi_to_usb_interface(dev);
-	struct usb_device *usb = interface_to_usbdev(intf);
+	struct usb_device *usb = comedi_to_usb_dev(dev);
 	struct dt9812_private *devpriv = dev->private;
 	u32 serial;
 	u16 vendor;

commit 9a054c278d951720e8761151b6ff9d7e1948258e
Author: H Hartley Sweeten <hsweeten@visionengravers.com>
Date:   Tue May 14 14:36:11 2013 -0700

    staging: comedi: dt9812: do not allow attaching to unsupported devices
    
    The DT9812 is part of the ECONseries of USB Data Acquisition Modules.
    This driver only supports the DT9812-10V and DT9812-2.5V versions of
    the module. Do not attach to the device if an unsupported module is
    detected.
    
    Signed-off-by: H Hartley Sweeten <hsweeten@visionengravers.com>
    Cc: Ian Abbott <abbotti@mev.co.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/drivers/dt9812.c b/drivers/staging/comedi/drivers/dt9812.c
index e6d9191f9432..9aab5b9a8738 100644
--- a/drivers/staging/comedi/drivers/dt9812.c
+++ b/drivers/staging/comedi/drivers/dt9812.c
@@ -768,6 +768,12 @@ static int dt9812_reset_device(struct comedi_device *dev)
 	dev_info(dev->class_dev, "USB DT9812 (%4.4x.%4.4x.%4.4x) #0x%8.8x\n",
 		 vendor, product, devpriv->device, serial);
 
+	if (devpriv->device != DT9812_DEVID_DT9812_10 &&
+	    devpriv->device != DT9812_DEVID_DT9812_2PT5) {
+		dev_err(dev->class_dev, "Unsupported device!\n");
+		return -EINVAL;
+	}
+
 	return 0;
 }
 

commit d6caedf074afe10d585df6d8e61c7a171d91e44f
Author: H Hartley Sweeten <hsweeten@visionengravers.com>
Date:   Tue May 14 14:35:47 2013 -0700

    staging: comedi: dt9812: default the analog input gain to 1
    
    The 'default' case should never happen. In case it does, default the
    gain to '1'.
    
    Signed-off-by: H Hartley Sweeten <hsweeten@visionengravers.com>
    Cc: Ian Abbott <abbotti@mev.co.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/drivers/dt9812.c b/drivers/staging/comedi/drivers/dt9812.c
index 9281d49dbdeb..e6d9191f9432 100644
--- a/drivers/staging/comedi/drivers/dt9812.c
+++ b/drivers/staging/comedi/drivers/dt9812.c
@@ -422,6 +422,8 @@ static void dt9812_configure_gain(struct comedi_device *dev,
 		rmw->or_value = F020_MASK_ADC0CF_AMP0GN2 |
 				F020_MASK_ADC0CF_AMP0GN1;
 		break;
+	default:
+		/* this should never happen, just use a gain of 1 */
 	case DT9812_GAIN_1:
 		rmw->or_value = 0x00;
 		break;
@@ -438,9 +440,6 @@ static void dt9812_configure_gain(struct comedi_device *dev,
 	case DT9812_GAIN_16:
 		rmw->or_value = F020_MASK_ADC0CF_AMP0GN2;
 		break;
-	default:
-		dev_err(dev->class_dev, "Illegal gain %d\n", gain);
-		break;
 	}
 }
 

commit 548c278c6caff2fd7b84fb985bcfda5bc1de8793
Author: H Hartley Sweeten <hsweeten@visionengravers.com>
Date:   Tue May 14 14:35:24 2013 -0700

    staging: comedi: dt9812: usb_bulk_msg() timeout is in milliseconds
    
    The timeout values passed to usb_bulk_msg() should be in milliseconds
    not jiffies.
    
    Signed-off-by: H Hartley Sweeten <hsweeten@visionengravers.com>
    Cc: Ian Abbott <abbotti@mev.co.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/drivers/dt9812.c b/drivers/staging/comedi/drivers/dt9812.c
index 99f487283174..9281d49dbdeb 100644
--- a/drivers/staging/comedi/drivers/dt9812.c
+++ b/drivers/staging/comedi/drivers/dt9812.c
@@ -52,6 +52,9 @@ for my needs.
 #define DT9812_MAX_WRITE_CMD_PIPE_SIZE	32
 #define DT9812_MAX_READ_CMD_PIPE_SIZE	32
 
+/* usb_bulk_msg() timout in milliseconds */
+#define DT9812_USB_TIMEOUT		1000
+
 /*
  * See Silican Laboratories C8051F020/1/2/3 manual
  */
@@ -262,12 +265,12 @@ static int dt9812_read_info(struct comedi_device *dev,
 
 	/* DT9812 only responds to 32 byte writes!! */
 	ret = usb_bulk_msg(usb, usb_sndbulkpipe(usb, devpriv->cmd_wr.addr),
-			   &cmd, 32, &count, HZ * 1);
+			   &cmd, 32, &count, DT9812_USB_TIMEOUT);
 	if (ret)
 		return ret;
 
 	return usb_bulk_msg(usb, usb_rcvbulkpipe(usb, devpriv->cmd_rd.addr),
-			    buf, buf_size, &count, HZ * 1);
+			    buf, buf_size, &count, DT9812_USB_TIMEOUT);
 }
 
 static int dt9812_read_multiple_registers(struct comedi_device *dev,
@@ -287,12 +290,12 @@ static int dt9812_read_multiple_registers(struct comedi_device *dev,
 
 	/* DT9812 only responds to 32 byte writes!! */
 	ret = usb_bulk_msg(usb, usb_sndbulkpipe(usb, devpriv->cmd_wr.addr),
-			   &cmd, 32, &count, HZ * 1);
+			   &cmd, 32, &count, DT9812_USB_TIMEOUT);
 	if (ret)
 		return ret;
 
 	return usb_bulk_msg(usb, usb_rcvbulkpipe(usb, devpriv->cmd_rd.addr),
-			    value, reg_count, &count, HZ * 1);
+			    value, reg_count, &count, DT9812_USB_TIMEOUT);
 }
 
 static int dt9812_write_multiple_registers(struct comedi_device *dev,
@@ -314,7 +317,7 @@ static int dt9812_write_multiple_registers(struct comedi_device *dev,
 
 	/* DT9812 only responds to 32 byte writes!! */
 	return usb_bulk_msg(usb, usb_sndbulkpipe(usb, devpriv->cmd_wr.addr),
-			    &cmd, 32, &count, HZ * 1);
+			    &cmd, 32, &count, DT9812_USB_TIMEOUT);
 }
 
 static int dt9812_rmw_multiple_registers(struct comedi_device *dev,
@@ -334,7 +337,7 @@ static int dt9812_rmw_multiple_registers(struct comedi_device *dev,
 
 	/* DT9812 only responds to 32 byte writes!! */
 	return usb_bulk_msg(usb, usb_sndbulkpipe(usb, devpriv->cmd_wr.addr),
-			    &cmd, 32, &count, HZ * 1);
+			    &cmd, 32, &count, DT9812_USB_TIMEOUT);
 }
 
 static int dt9812_digital_in(struct comedi_device *dev, u8 *bits)

commit df7f64e481f259baa44b61379b5052479b33af14
Author: H Hartley Sweeten <hsweeten@visionengravers.com>
Date:   Tue May 14 14:35:00 2013 -0700

    staging: comedi: dt9812: remove some #if 0'ed out code
    
    The struct dt9812_usb_cmd definition contains some #if 0'ed
    out code that would cause build errors if enabled. Just remove
    it.
    
    Signed-off-by: H Hartley Sweeten <hsweeten@visionengravers.com>
    Cc: Ian Abbott <abbotti@mev.co.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/drivers/dt9812.c b/drivers/staging/comedi/drivers/dt9812.c
index 4de9faa877a2..99f487283174 100644
--- a/drivers/staging/comedi/drivers/dt9812.c
+++ b/drivers/staging/comedi/drivers/dt9812.c
@@ -234,25 +234,6 @@ struct dt9812_usb_cmd {
 		struct dt9812_write_multi write_multi_info;
 		struct dt9812_rmw_multi rmw_multi_info;
 	} u;
-#if 0
-	WRITE_BYTE_INFO WriteByteInfo;
-	READ_BYTE_INFO ReadByteInfo;
-	WRITE_MULTI_INFO WriteMultiInfo;
-	READ_MULTI_INFO ReadMultiInfo;
-	RMW_BYTE_INFO RMWByteInfo;
-	RMW_MULTI_INFO RMWMultiInfo;
-	DAC_THRESHOLD_INFO DacThresholdInfo;
-	INT_ON_CHANGE_MASK_INFO IntOnChangeMaskInfo;
-	CGL_INFO CglInfo;
-	SUBSYSTEM_INFO SubsystemInfo;
-	CAL_POT_CMD CalPotCmd;
-	WRITE_DEV_BYTE_INFO WriteDevByteInfo;
-	READ_DEV_BYTE_INFO ReadDevByteInfo;
-	WRITE_DEV_MULTI_INFO WriteDevMultiInfo;
-	READ_DEV_MULTI_INFO ReadDevMultiInfo;
-	READ_SINGLE_VALUE_INFO ReadSingleValueInfo;
-	WRITE_SINGLE_VALUE_INFO WriteSingleValueInfo;
-#endif
 };
 
 struct dt9812_private {

commit 056254facfe2f0775ce5f23ac542f034da71cc84
Author: H Hartley Sweeten <hsweeten@visionengravers.com>
Date:   Tue May 14 14:34:36 2013 -0700

    staging: comedi: dt9812: use dev->class_dev for all dev_{level} messages
    
    For consistency in the driver, use dev->class_dev for the device in
    all the dev_{level} messages.
    
    Signed-off-by: H Hartley Sweeten <hsweeten@visionengravers.com>
    Cc: Ian Abbott <abbotti@mev.co.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/drivers/dt9812.c b/drivers/staging/comedi/drivers/dt9812.c
index b9a09b900573..4de9faa877a2 100644
--- a/drivers/staging/comedi/drivers/dt9812.c
+++ b/drivers/staging/comedi/drivers/dt9812.c
@@ -681,7 +681,7 @@ static int dt9812_find_endpoints(struct comedi_device *dev)
 	int i;
 
 	if (host->desc.bNumEndpoints != 5) {
-		dev_err(&intf->dev, "Wrong number of endpoints\n");
+		dev_err(dev->class_dev, "Wrong number of endpoints\n");
 		return -ENODEV;
 	}
 
@@ -713,7 +713,8 @@ static int dt9812_find_endpoints(struct comedi_device *dev)
 			break;
 		}
 		if ((ep->bEndpointAddress & USB_DIR_IN) != dir) {
-			dev_err(&intf->dev, "Endpoint has wrong direction\n");
+			dev_err(dev->class_dev,
+				"Endpoint has wrong direction\n");
 			return -ENODEV;
 		}
 	}
@@ -746,41 +747,42 @@ static int dt9812_reset_device(struct comedi_device *dev)
 				break;
 		}
 		if (ret) {
-			dev_err(&intf->dev, "unable to reset configuration\n");
+			dev_err(dev->class_dev,
+				"unable to reset configuration\n");
 			return ret;
 		}
 	}
 
 	ret = dt9812_read_info(dev, 1, &vendor, sizeof(vendor));
 	if (ret) {
-		dev_err(&intf->dev, "failed to read vendor id\n");
+		dev_err(dev->class_dev, "failed to read vendor id\n");
 		return ret;
 	}
 	vendor = le16_to_cpu(vendor);
 
 	ret = dt9812_read_info(dev, 3, &product, sizeof(product));
 	if (ret) {
-		dev_err(&intf->dev, "failed to read product id\n");
+		dev_err(dev->class_dev, "failed to read product id\n");
 		return ret;
 	}
 	product = le16_to_cpu(product);
 
 	ret = dt9812_read_info(dev, 5, &tmp16, sizeof(tmp16));
 	if (ret) {
-		dev_err(&intf->dev, "failed to read device id\n");
+		dev_err(dev->class_dev, "failed to read device id\n");
 		return ret;
 	}
 	devpriv->device = le16_to_cpu(tmp16);
 
 	ret = dt9812_read_info(dev, 7, &serial, sizeof(serial));
 	if (ret) {
-		dev_err(&intf->dev, "failed to read serial number\n");
+		dev_err(dev->class_dev, "failed to read serial number\n");
 		return ret;
 	}
 	serial = le32_to_cpu(serial);
 
 	/* let the user know what node this device is now attached to */
-	dev_info(&intf->dev, "USB DT9812 (%4.4x.%4.4x.%4.4x) #0x%8.8x\n",
+	dev_info(dev->class_dev, "USB DT9812 (%4.4x.%4.4x.%4.4x) #0x%8.8x\n",
 		 vendor, product, devpriv->device, serial);
 
 	return 0;

commit 4a76abebd9fbac3018613a0be1ea343e94cf89fe
Author: H Hartley Sweeten <hsweeten@visionengravers.com>
Date:   Tue May 14 14:34:12 2013 -0700

    staging: comedi: dt9812: remove pr_fmt()
    
    There are no pr_{level} messages in this driver. Remove the pr_fmt().
    
    Signed-off-by: H Hartley Sweeten <hsweeten@visionengravers.com>
    Cc: Ian Abbott <abbotti@mev.co.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/drivers/dt9812.c b/drivers/staging/comedi/drivers/dt9812.c
index 3a187ccce216..b9a09b900573 100644
--- a/drivers/staging/comedi/drivers/dt9812.c
+++ b/drivers/staging/comedi/drivers/dt9812.c
@@ -38,8 +38,6 @@ for my needs.
  *      says P1).
  */
 
-#define pr_fmt(fmt) KBUILD_MODNAME ": " fmt
-
 #include <linux/kernel.h>
 #include <linux/errno.h>
 #include <linux/init.h>

commit 99928e654da031e5cbf537ab2e83997a1420e30c
Author: H Hartley Sweeten <hsweeten@visionengravers.com>
Date:   Tue May 14 14:33:53 2013 -0700

    staging: comedi: dt9812: cleanup analog out subdevice (*insn_write)
    
    For aesthetic reasons, rename the function to help with grepping and
    rename some of the local vars.
    
    The dt9812_analog_out() function can fail. Make sure to check for any
    failure and return the errno.
    
    The comedi core expects the (*insn_write) functions to return either
    an errno or the number of samples written. Change the final return to
    insn->n to make this clearer.
    
    Signed-off-by: H Hartley Sweeten <hsweeten@visionengravers.com>
    Cc: Ian Abbott <abbotti@mev.co.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/drivers/dt9812.c b/drivers/staging/comedi/drivers/dt9812.c
index c1f6a5e1be21..3a187ccce216 100644
--- a/drivers/staging/comedi/drivers/dt9812.c
+++ b/drivers/staging/comedi/drivers/dt9812.c
@@ -656,16 +656,22 @@ static int dt9812_ao_insn_read(struct comedi_device *dev,
 	return insn->n;
 }
 
-static int dt9812_ao_winsn(struct comedi_device *dev,
-			   struct comedi_subdevice *s, struct comedi_insn *insn,
-			   unsigned int *data)
+static int dt9812_ao_insn_write(struct comedi_device *dev,
+				struct comedi_subdevice *s,
+				struct comedi_insn *insn,
+				unsigned int *data)
 {
-	unsigned int channel = CR_CHAN(insn->chanspec);
-	int n;
+	unsigned int chan = CR_CHAN(insn->chanspec);
+	int ret;
+	int i;
 
-	for (n = 0; n < insn->n; n++)
-		dt9812_analog_out(dev, channel, data[n]);
-	return n;
+	for (i = 0; i < insn->n; i++) {
+		ret = dt9812_analog_out(dev, chan, data[i]);
+		if (ret)
+			return ret;
+	}
+
+	return insn->n;
 }
 
 static int dt9812_find_endpoints(struct comedi_device *dev)
@@ -847,7 +853,7 @@ static int dt9812_auto_attach(struct comedi_device *dev,
 	s->n_chan	= 2;
 	s->maxdata	= 0x0fff;
 	s->range_table	= is_unipolar ? &range_unipolar2_5 : &range_bipolar10;
-	s->insn_write	= dt9812_ao_winsn;
+	s->insn_write	= dt9812_ao_insn_write;
 	s->insn_read	= dt9812_ao_insn_read;
 
 	devpriv->ao_shadow[0] = is_unipolar ? 0x0000 : 0x0800;

commit e79f18e6b91a4f7b5cb9cef3c98721a6887c84ca
Author: H Hartley Sweeten <hsweeten@visionengravers.com>
Date:   Tue May 14 14:33:30 2013 -0700

    staging: comedi: dt9812: cleanup analog out subdevice (*insn_read)
    
    For aesthetic reasons, rename the function to help with grepping and
    rename some of the local vars.
    
    This function returns the current analog output value for the channel
    that is cached in the private data. Absorb dt9812_analog_out_shadow()
    into this function to make it more concise.
    
    The comedi core expects the (*insn_read) functions to return either
    an errno or the number of samples read. Change the final return to
    insn->n to make this clearer.
    
    Signed-off-by: H Hartley Sweeten <hsweeten@visionengravers.com>
    Cc: Ian Abbott <abbotti@mev.co.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/drivers/dt9812.c b/drivers/staging/comedi/drivers/dt9812.c
index c83dc7f7e9f4..c1f6a5e1be21 100644
--- a/drivers/staging/comedi/drivers/dt9812.c
+++ b/drivers/staging/comedi/drivers/dt9812.c
@@ -529,18 +529,6 @@ static int dt9812_analog_in(struct comedi_device *dev,
 	return ret;
 }
 
-static int dt9812_analog_out_shadow(struct comedi_device *dev,
-				    int channel, u16 *value)
-{
-	struct dt9812_private *devpriv = dev->private;
-
-	down(&devpriv->sem);
-	*value = devpriv->ao_shadow[channel];
-	up(&devpriv->sem);
-
-	return 0;
-}
-
 static int dt9812_analog_out(struct comedi_device *dev, int channel, u16 value)
 {
 	struct dt9812_private *devpriv = dev->private;
@@ -651,20 +639,21 @@ static int dt9812_ai_insn_read(struct comedi_device *dev,
 	return insn->n;
 }
 
-static int dt9812_ao_rinsn(struct comedi_device *dev,
-			   struct comedi_subdevice *s, struct comedi_insn *insn,
-			   unsigned int *data)
+static int dt9812_ao_insn_read(struct comedi_device *dev,
+			       struct comedi_subdevice *s,
+			       struct comedi_insn *insn,
+			       unsigned int *data)
 {
-	unsigned int channel = CR_CHAN(insn->chanspec);
-	int n;
-	u16 value;
+	struct dt9812_private *devpriv = dev->private;
+	unsigned int chan = CR_CHAN(insn->chanspec);
+	int i;
 
-	for (n = 0; n < insn->n; n++) {
-		value = 0;
-		dt9812_analog_out_shadow(dev, channel, &value);
-		data[n] = value;
-	}
-	return n;
+	down(&devpriv->sem);
+	for (i = 0; i < insn->n; i++)
+		data[i] = devpriv->ao_shadow[chan];
+	up(&devpriv->sem);
+
+	return insn->n;
 }
 
 static int dt9812_ao_winsn(struct comedi_device *dev,
@@ -859,7 +848,7 @@ static int dt9812_auto_attach(struct comedi_device *dev,
 	s->maxdata	= 0x0fff;
 	s->range_table	= is_unipolar ? &range_unipolar2_5 : &range_bipolar10;
 	s->insn_write	= dt9812_ao_winsn;
-	s->insn_read	= dt9812_ao_rinsn;
+	s->insn_read	= dt9812_ao_insn_read;
 
 	devpriv->ao_shadow[0] = is_unipolar ? 0x0000 : 0x0800;
 	devpriv->ao_shadow[1] = is_unipolar ? 0x0000 : 0x0800;

commit 83a69f5adb81b3432fb1e58485639c391cc65f17
Author: H Hartley Sweeten <hsweeten@visionengravers.com>
Date:   Tue May 14 14:33:09 2013 -0700

    staging: comedi: dt9812: cleanup analog in subdevice (*insn_read)
    
    For aesthetic reasons, rename the function to help with grepping and
    rename some of the local vars.
    
    dt9812_analog_in() can fail. Make sure to check for any failure and
    return the errno.
    
    The comedi core expects the (*insn_read) functions to return either
    an errno or the number of samples read. Change the final return to
    insn->n to make this clearer.
    
    Signed-off-by: H Hartley Sweeten <hsweeten@visionengravers.com>
    Cc: Ian Abbott <abbotti@mev.co.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/drivers/dt9812.c b/drivers/staging/comedi/drivers/dt9812.c
index 7f6d43a33de3..c83dc7f7e9f4 100644
--- a/drivers/staging/comedi/drivers/dt9812.c
+++ b/drivers/staging/comedi/drivers/dt9812.c
@@ -631,20 +631,24 @@ static int dt9812_do_insn_bits(struct comedi_device *dev,
 	return insn->n;
 }
 
-static int dt9812_ai_rinsn(struct comedi_device *dev,
-			   struct comedi_subdevice *s, struct comedi_insn *insn,
-			   unsigned int *data)
+static int dt9812_ai_insn_read(struct comedi_device *dev,
+			       struct comedi_subdevice *s,
+			       struct comedi_insn *insn,
+			       unsigned int *data)
 {
-	unsigned int channel = CR_CHAN(insn->chanspec);
-	int n;
-
-	for (n = 0; n < insn->n; n++) {
-		u16 value = 0;
+	unsigned int chan = CR_CHAN(insn->chanspec);
+	u16 val = 0;
+	int ret;
+	int i;
 
-		dt9812_analog_in(dev, channel, &value, DT9812_GAIN_1);
-		data[n] = value;
+	for (i = 0; i < insn->n; i++) {
+		ret = dt9812_analog_in(dev, chan, &val, DT9812_GAIN_1);
+		if (ret)
+			return ret;
+		data[i] = val;
 	}
-	return n;
+
+	return insn->n;
 }
 
 static int dt9812_ao_rinsn(struct comedi_device *dev,
@@ -845,7 +849,7 @@ static int dt9812_auto_attach(struct comedi_device *dev,
 	s->n_chan	= 8;
 	s->maxdata	= 0x0fff;
 	s->range_table	= is_unipolar ? &range_unipolar2_5 : &range_bipolar10;
-	s->insn_read	= dt9812_ai_rinsn;
+	s->insn_read	= dt9812_ai_insn_read;
 
 	/* Analog Output subdevice */
 	s = &dev->subdevices[3];

commit 36c973d0896a5319cf3089c20e8d9881bc60297e
Author: H Hartley Sweeten <hsweeten@visionengravers.com>
Date:   Tue May 14 14:32:42 2013 -0700

    staging: comedi: dt9812: convert digital out subdevice to (*insn_bits)
    
    Currently the (*insn_write) function for the digital output subdevice
    only sets the state for a single channel. It's more efficent to use
    the (*insn_bits) function and allow setting the state for all the
    channels.
    
    The comedi core can use the (*insn_bits) to emulate the (*insn_write)
    if needed.
    
    Also, use the subdevice 'state' variable to hold the current state
    of the channels instead of 'do_shadow' in the private data.
    
    Signed-off-by: H Hartley Sweeten <hsweeten@visionengravers.com>
    Cc: Ian Abbott <abbotti@mev.co.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/drivers/dt9812.c b/drivers/staging/comedi/drivers/dt9812.c
index 4fd15162f4b6..7f6d43a33de3 100644
--- a/drivers/staging/comedi/drivers/dt9812.c
+++ b/drivers/staging/comedi/drivers/dt9812.c
@@ -265,7 +265,6 @@ struct dt9812_private {
 	} cmd_wr, cmd_rd;
 	u16 device;
 	u16 ao_shadow[2];
-	u8 do_shadow;
 };
 
 static int dt9812_read_info(struct comedi_device *dev,
@@ -390,23 +389,11 @@ static int dt9812_digital_out(struct comedi_device *dev, u8 bits)
 
 	down(&devpriv->sem);
 	ret = dt9812_write_multiple_registers(dev, 1, reg, value);
-	devpriv->do_shadow = bits;
 	up(&devpriv->sem);
 
 	return ret;
 }
 
-static int dt9812_digital_out_shadow(struct comedi_device *dev, u8 *bits)
-{
-	struct dt9812_private *devpriv = dev->private;
-
-	down(&devpriv->sem);
-	*bits = devpriv->do_shadow;
-	up(&devpriv->sem);
-
-	return 0;
-}
-
 static void dt9812_configure_mux(struct comedi_device *dev,
 				 struct dt9812_rmw_byte *rmw, int channel)
 {
@@ -624,24 +611,24 @@ static int dt9812_di_insn_bits(struct comedi_device *dev,
 	return insn->n;
 }
 
-static int dt9812_do_winsn(struct comedi_device *dev,
-			   struct comedi_subdevice *s, struct comedi_insn *insn,
-			   unsigned int *data)
+static int dt9812_do_insn_bits(struct comedi_device *dev,
+			       struct comedi_subdevice *s,
+			       struct comedi_insn *insn,
+			       unsigned int *data)
 {
-	unsigned int channel = CR_CHAN(insn->chanspec);
-	int n;
-	u8 bits = 0;
+	unsigned int mask = data[0];
+	unsigned int bits = data[1];
 
-	dt9812_digital_out_shadow(dev, &bits);
-	for (n = 0; n < insn->n; n++) {
-		u8 mask = 1 << channel;
+	if (mask) {
+		s->state &= ~mask;
+		s->state |= (bits & mask);
 
-		bits &= ~mask;
-		if (data[n])
-			bits |= mask;
+		dt9812_digital_out(dev, s->state);
 	}
-	dt9812_digital_out(dev, bits);
-	return n;
+
+	data[1] = s->state;
+
+	return insn->n;
 }
 
 static int dt9812_ai_rinsn(struct comedi_device *dev,
@@ -849,9 +836,7 @@ static int dt9812_auto_attach(struct comedi_device *dev,
 	s->n_chan	= 8;
 	s->maxdata	= 1;
 	s->range_table	= &range_digital;
-	s->insn_write	= dt9812_do_winsn;
-
-	devpriv->do_shadow = 0;
+	s->insn_bits	= dt9812_do_insn_bits;
 
 	/* Analog Input subdevice */
 	s = &dev->subdevices[2];

commit e81eaba6c425a5d06623e5ad93cb7b3c096e8d5c
Author: H Hartley Sweeten <hsweeten@visionengravers.com>
Date:   Tue May 14 14:32:17 2013 -0700

    staging: comedi: dt9812: convert digital in subdevice to (*insn_bits)
    
    Currently the (*insn_read) function for the digital input subdevice
    returns the state for a single channel. It's more efficent to use
    the (*insn_bits) function and return the state for all the channels.
    
    The comedi core can use the (*insn_bits) to emulate the (*insn_read)
    if needed.
    
    Signed-off-by: H Hartley Sweeten <hsweeten@visionengravers.com>
    Cc: Ian Abbott <abbotti@mev.co.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/drivers/dt9812.c b/drivers/staging/comedi/drivers/dt9812.c
index 1bc89cc6b08d..4fd15162f4b6 100644
--- a/drivers/staging/comedi/drivers/dt9812.c
+++ b/drivers/staging/comedi/drivers/dt9812.c
@@ -607,18 +607,21 @@ static int dt9812_analog_out(struct comedi_device *dev, int channel, u16 value)
 	return ret;
 }
 
-static int dt9812_di_rinsn(struct comedi_device *dev,
-			   struct comedi_subdevice *s, struct comedi_insn *insn,
-			   unsigned int *data)
+static int dt9812_di_insn_bits(struct comedi_device *dev,
+			       struct comedi_subdevice *s,
+			       struct comedi_insn *insn,
+			       unsigned int *data)
 {
-	unsigned int channel = CR_CHAN(insn->chanspec);
-	int n;
 	u8 bits = 0;
+	int ret;
 
-	dt9812_digital_in(dev, &bits);
-	for (n = 0; n < insn->n; n++)
-		data[n] = ((1 << channel) & bits) != 0;
-	return n;
+	ret = dt9812_digital_in(dev, &bits);
+	if (ret)
+		return ret;
+
+	data[1] = bits;
+
+	return insn->n;
 }
 
 static int dt9812_do_winsn(struct comedi_device *dev,
@@ -837,7 +840,7 @@ static int dt9812_auto_attach(struct comedi_device *dev,
 	s->n_chan	= 8;
 	s->maxdata	= 1;
 	s->range_table	= &range_digital;
-	s->insn_read	= dt9812_di_rinsn;
+	s->insn_bits	= dt9812_di_insn_bits;
 
 	/* Digital Output subdevice */
 	s = &dev->subdevices[1];

commit 421b42ab17bdcabedd7549e5887e4c78d64f6c2f
Author: H Hartley Sweeten <hsweeten@visionengravers.com>
Date:   Tue May 14 14:30:59 2013 -0700

    staging: comedi: dt9812: remove unused variables from private data
    
    The vendor, product, and serial numbers read from the usb device
    are only used for a dev_info() message about the device after it
    is reset. Reading these values might not be required for the usb
    device to function.
    
    For now just remove the variables from the private data and just
    use local variables.
    
    Signed-off-by: H Hartley Sweeten <hsweeten@visionengravers.com>
    Cc: Ian Abbott <abbotti@mev.co.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/drivers/dt9812.c b/drivers/staging/comedi/drivers/dt9812.c
index 0efff288a86a..1bc89cc6b08d 100644
--- a/drivers/staging/comedi/drivers/dt9812.c
+++ b/drivers/staging/comedi/drivers/dt9812.c
@@ -263,9 +263,6 @@ struct dt9812_private {
 		__u8 addr;
 		size_t size;
 	} cmd_wr, cmd_rd;
-	u32 serial;
-	u16 vendor;
-	u16 product;
 	u16 device;
 	u16 ao_shadow[2];
 	u8 do_shadow;
@@ -741,11 +738,13 @@ static int dt9812_reset_device(struct comedi_device *dev)
 	struct usb_interface *intf = comedi_to_usb_interface(dev);
 	struct usb_device *usb = interface_to_usbdev(intf);
 	struct dt9812_private *devpriv = dev->private;
-	int ret;
-	int i;
-	u32 tmp32;
+	u32 serial;
+	u16 vendor;
+	u16 product;
 	u16 tmp16;
 	u8 tmp8;
+	int ret;
+	int i;
 
 	ret = dt9812_read_info(dev, 0, &tmp8, sizeof(tmp8));
 	if (ret) {
@@ -765,19 +764,19 @@ static int dt9812_reset_device(struct comedi_device *dev)
 		}
 	}
 
-	ret = dt9812_read_info(dev, 1, &tmp16, sizeof(tmp16));
+	ret = dt9812_read_info(dev, 1, &vendor, sizeof(vendor));
 	if (ret) {
 		dev_err(&intf->dev, "failed to read vendor id\n");
 		return ret;
 	}
-	devpriv->vendor = le16_to_cpu(tmp16);
+	vendor = le16_to_cpu(vendor);
 
-	ret = dt9812_read_info(dev, 3, &tmp16, sizeof(tmp16));
+	ret = dt9812_read_info(dev, 3, &product, sizeof(product));
 	if (ret) {
 		dev_err(&intf->dev, "failed to read product id\n");
 		return ret;
 	}
-	devpriv->product = le16_to_cpu(tmp16);
+	product = le16_to_cpu(product);
 
 	ret = dt9812_read_info(dev, 5, &tmp16, sizeof(tmp16));
 	if (ret) {
@@ -786,17 +785,16 @@ static int dt9812_reset_device(struct comedi_device *dev)
 	}
 	devpriv->device = le16_to_cpu(tmp16);
 
-	ret = dt9812_read_info(dev, 7, &tmp32, sizeof(tmp32));
+	ret = dt9812_read_info(dev, 7, &serial, sizeof(serial));
 	if (ret) {
 		dev_err(&intf->dev, "failed to read serial number\n");
 		return ret;
 	}
-	devpriv->serial = le32_to_cpu(tmp32);
+	serial = le32_to_cpu(serial);
 
 	/* let the user know what node this device is now attached to */
 	dev_info(&intf->dev, "USB DT9812 (%4.4x.%4.4x.%4.4x) #0x%8.8x\n",
-		 devpriv->vendor, devpriv->product, devpriv->device,
-		 devpriv->serial);
+		 vendor, product, devpriv->device, serial);
 
 	return 0;
 }

commit b78750c1234d2abafb12c61a9e96c7860f47a6e7
Author: H Hartley Sweeten <hsweeten@visionengravers.com>
Date:   Tue May 14 14:30:20 2013 -0700

    staging: comedi: dt9812: convert to use comedi (*auto_attach)
    
    Converting this driver to use the comedi (*auto_attach) mechanism
    allows pushing the usb (*probe) into the comedi (*auto_attach) and
    the usb (disconnect) into the comedi (*detach). This removes the
    disconnect between the usb driver and the comedi driver. Now when
    the comedi driver is attached it will always have a usb device
    associated with it.
    
    This removes the 16 usb device limitation and allows bringing all
    the private data into a single struct that can be kzalloc'ed when
    the comedi driver is (*auto_attached). It also allows removing the
    the sanity checks that make sure a usb device is connected to the
    comedi device in the helper functions.
    
    For aesthetic reasons, add some whitespace to the subdevice init.
    
    Also, fix the analog out subdevice. There are 2 analog output
    channels available on the usb device.
    
    Signed-off-by: H Hartley Sweeten <hsweeten@visionengravers.com>
    Cc: Ian Abbott <abbotti@mev.co.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/drivers/dt9812.c b/drivers/staging/comedi/drivers/dt9812.c
index 57bdb06921e3..0efff288a86a 100644
--- a/drivers/staging/comedi/drivers/dt9812.c
+++ b/drivers/staging/comedi/drivers/dt9812.c
@@ -45,7 +45,6 @@ for my needs.
 #include <linux/init.h>
 #include <linux/slab.h>
 #include <linux/module.h>
-#include <linux/kref.h>
 #include <linux/uaccess.h>
 #include <linux/usb.h>
 
@@ -258,55 +257,26 @@ struct dt9812_usb_cmd {
 #endif
 };
 
-#define DT9812_NUM_SLOTS	16
-
-static DEFINE_SEMAPHORE(dt9812_mutex);
-
-struct usb_dt9812 {
-	struct slot_dt9812 *slot;
-	struct usb_device *udev;
-	u16 vendor;
-	u16 product;
-	u16 device;
-	u32 serial;
+struct dt9812_private {
+	struct semaphore sem;
 	struct {
 		__u8 addr;
 		size_t size;
 	} cmd_wr, cmd_rd;
-	struct kref kref;
-};
-
-struct dt9812_private {
-	struct semaphore sem;
-	struct slot_dt9812 *slot;
+	u32 serial;
+	u16 vendor;
+	u16 product;
+	u16 device;
 	u16 ao_shadow[2];
 	u8 do_shadow;
 };
 
-struct slot_dt9812 {
-	struct usb_dt9812 *usb;
-	struct dt9812_private *devpriv;
-};
-
-static struct slot_dt9812 dt9812[DT9812_NUM_SLOTS];
-
-static inline struct usb_dt9812 *to_dt9812_dev(struct kref *d)
-{
-	return container_of(d, struct usb_dt9812, kref);
-}
-
-static void dt9812_delete(struct kref *kref)
-{
-	struct usb_dt9812 *dev = to_dt9812_dev(kref);
-
-	usb_put_dev(dev->udev);
-	kfree(dev);
-}
-
-static int dt9812_read_info(struct usb_dt9812 *dev, int offset, void *buf,
-			    size_t buf_size)
+static int dt9812_read_info(struct comedi_device *dev,
+			    int offset, void *buf, size_t buf_size)
 {
-	struct usb_device *usb = dev->udev;
+	struct usb_interface *intf = comedi_to_usb_interface(dev);
+	struct usb_device *usb = interface_to_usbdev(intf);
+	struct dt9812_private *devpriv = dev->private;
 	struct dt9812_usb_cmd cmd;
 	int count, ret;
 
@@ -316,19 +286,22 @@ static int dt9812_read_info(struct usb_dt9812 *dev, int offset, void *buf,
 	cmd.u.flash_data_info.numbytes = cpu_to_le16(buf_size);
 
 	/* DT9812 only responds to 32 byte writes!! */
-	ret = usb_bulk_msg(usb, usb_sndbulkpipe(usb, dev->cmd_wr.addr),
+	ret = usb_bulk_msg(usb, usb_sndbulkpipe(usb, devpriv->cmd_wr.addr),
 			   &cmd, 32, &count, HZ * 1);
 	if (ret)
 		return ret;
 
-	return usb_bulk_msg(usb, usb_rcvbulkpipe(usb, dev->cmd_rd.addr),
+	return usb_bulk_msg(usb, usb_rcvbulkpipe(usb, devpriv->cmd_rd.addr),
 			    buf, buf_size, &count, HZ * 1);
 }
 
-static int dt9812_read_multiple_registers(struct usb_dt9812 *dev, int reg_count,
-					  u8 *address, u8 *value)
+static int dt9812_read_multiple_registers(struct comedi_device *dev,
+					  int reg_count, u8 *address,
+					  u8 *value)
 {
-	struct usb_device *usb = dev->udev;
+	struct usb_interface *intf = comedi_to_usb_interface(dev);
+	struct usb_device *usb = interface_to_usbdev(intf);
+	struct dt9812_private *devpriv = dev->private;
 	struct dt9812_usb_cmd cmd;
 	int i, count, ret;
 
@@ -338,20 +311,22 @@ static int dt9812_read_multiple_registers(struct usb_dt9812 *dev, int reg_count,
 		cmd.u.read_multi_info.address[i] = address[i];
 
 	/* DT9812 only responds to 32 byte writes!! */
-	ret = usb_bulk_msg(usb, usb_sndbulkpipe(usb, dev->cmd_wr.addr),
+	ret = usb_bulk_msg(usb, usb_sndbulkpipe(usb, devpriv->cmd_wr.addr),
 			   &cmd, 32, &count, HZ * 1);
 	if (ret)
 		return ret;
 
-	return usb_bulk_msg(usb, usb_rcvbulkpipe(usb, dev->cmd_rd.addr),
+	return usb_bulk_msg(usb, usb_rcvbulkpipe(usb, devpriv->cmd_rd.addr),
 			    value, reg_count, &count, HZ * 1);
 }
 
-static int dt9812_write_multiple_registers(struct usb_dt9812 *dev,
+static int dt9812_write_multiple_registers(struct comedi_device *dev,
 					   int reg_count, u8 *address,
 					   u8 *value)
 {
-	struct usb_device *usb = dev->udev;
+	struct usb_interface *intf = comedi_to_usb_interface(dev);
+	struct usb_device *usb = interface_to_usbdev(intf);
+	struct dt9812_private *devpriv = dev->private;
 	struct dt9812_usb_cmd cmd;
 	int i, count;
 
@@ -363,14 +338,17 @@ static int dt9812_write_multiple_registers(struct usb_dt9812 *dev,
 	}
 
 	/* DT9812 only responds to 32 byte writes!! */
-	return usb_bulk_msg(usb, usb_sndbulkpipe(usb, dev->cmd_wr.addr),
+	return usb_bulk_msg(usb, usb_sndbulkpipe(usb, devpriv->cmd_wr.addr),
 			    &cmd, 32, &count, HZ * 1);
 }
 
-static int dt9812_rmw_multiple_registers(struct usb_dt9812 *dev, int reg_count,
+static int dt9812_rmw_multiple_registers(struct comedi_device *dev,
+					 int reg_count,
 					 struct dt9812_rmw_byte *rmw)
 {
-	struct usb_device *usb = dev->udev;
+	struct usb_interface *intf = comedi_to_usb_interface(dev);
+	struct usb_device *usb = interface_to_usbdev(intf);
+	struct dt9812_private *devpriv = dev->private;
 	struct dt9812_usb_cmd cmd;
 	int i, count;
 
@@ -380,30 +358,26 @@ static int dt9812_rmw_multiple_registers(struct usb_dt9812 *dev, int reg_count,
 		cmd.u.rmw_multi_info.rmw[i] = rmw[i];
 
 	/* DT9812 only responds to 32 byte writes!! */
-	return usb_bulk_msg(usb, usb_sndbulkpipe(usb, dev->cmd_wr.addr),
+	return usb_bulk_msg(usb, usb_sndbulkpipe(usb, devpriv->cmd_wr.addr),
 			    &cmd, 32, &count, HZ * 1);
 }
 
 static int dt9812_digital_in(struct comedi_device *dev, u8 *bits)
 {
 	struct dt9812_private *devpriv = dev->private;
-	struct slot_dt9812 *slot = devpriv->slot;
-	int ret = -ENODEV;
+	u8 reg[2] = { F020_SFR_P3, F020_SFR_P1 };
+	u8 value[2];
+	int ret;
 
 	down(&devpriv->sem);
-	if (slot->usb) {
-		u8 reg[2] = { F020_SFR_P3, F020_SFR_P1 };
-		u8 value[2];
-
-		ret = dt9812_read_multiple_registers(slot->usb, 2, reg, value);
-		if (ret == 0) {
-			/*
-			 * bits 0-6 in F020_SFR_P3 are bits 0-6 in the digital
-			 * input port bit 3 in F020_SFR_P1 is bit 7 in the
-			 * digital input port
-			 */
-			*bits = (value[0] & 0x7f) | ((value[1] & 0x08) << 4);
-		}
+	ret = dt9812_read_multiple_registers(dev, 2, reg, value);
+	if (ret == 0) {
+		/*
+		 * bits 0-6 in F020_SFR_P3 are bits 0-6 in the digital
+		 * input port bit 3 in F020_SFR_P1 is bit 7 in the
+		 * digital input port
+		 */
+		*bits = (value[0] & 0x7f) | ((value[1] & 0x08) << 4);
 	}
 	up(&devpriv->sem);
 
@@ -413,17 +387,13 @@ static int dt9812_digital_in(struct comedi_device *dev, u8 *bits)
 static int dt9812_digital_out(struct comedi_device *dev, u8 bits)
 {
 	struct dt9812_private *devpriv = dev->private;
-	struct slot_dt9812 *slot = devpriv->slot;
-	int ret = -ENODEV;
+	u8 reg[1] = { F020_SFR_P2 };
+	u8 value[1] = { bits };
+	int ret;
 
 	down(&devpriv->sem);
-	if (slot->usb) {
-		u8 reg[1] = { F020_SFR_P2 };
-		u8 value[1] = { bits };
-
-		ret = dt9812_write_multiple_registers(slot->usb, 1, reg, value);
-		devpriv->do_shadow = bits;
-	}
+	ret = dt9812_write_multiple_registers(dev, 1, reg, value);
+	devpriv->do_shadow = bits;
 	up(&devpriv->sem);
 
 	return ret;
@@ -444,10 +414,8 @@ static void dt9812_configure_mux(struct comedi_device *dev,
 				 struct dt9812_rmw_byte *rmw, int channel)
 {
 	struct dt9812_private *devpriv = dev->private;
-	struct slot_dt9812 *slot = devpriv->slot;
-	struct usb_dt9812 *usb = slot->usb;
 
-	if (usb->device == DT9812_DEVID_DT9812_10) {
+	if (devpriv->device == DT9812_DEVID_DT9812_10) {
 		/* In the DT9812/10V MUX is selected by P1.5-7 */
 		rmw->address = F020_SFR_P1;
 		rmw->and_mask = 0xe0;
@@ -465,11 +433,9 @@ static void dt9812_configure_gain(struct comedi_device *dev,
 				  enum dt9812_gain gain)
 {
 	struct dt9812_private *devpriv = dev->private;
-	struct slot_dt9812 *slot = devpriv->slot;
-	struct usb_dt9812 *usb = slot->usb;
 
 	/* In the DT9812/10V, there is an external gain of 0.5 */
-	if (usb->device == DT9812_DEVID_DT9812_10)
+	if (devpriv->device == DT9812_DEVID_DT9812_10)
 		gain <<= 1;
 
 	rmw->address = F020_SFR_ADC0CF;
@@ -516,7 +482,6 @@ static int dt9812_analog_in(struct comedi_device *dev,
 			    int channel, u16 *value, enum dt9812_gain gain)
 {
 	struct dt9812_private *devpriv = dev->private;
-	struct slot_dt9812 *slot = devpriv->slot;
 	struct dt9812_rmw_byte rmw[3];
 	u8 reg[3] = {
 		F020_SFR_ADC0CN,
@@ -524,11 +489,9 @@ static int dt9812_analog_in(struct comedi_device *dev,
 		F020_SFR_ADC0L
 	};
 	u8 val[3];
-	int ret = -ENODEV;
+	int ret;
 
 	down(&devpriv->sem);
-	if (!slot->usb)
-		goto exit;
 
 	/* 1 select the gain */
 	dt9812_configure_gain(dev, &rmw[0], gain);
@@ -541,12 +504,12 @@ static int dt9812_analog_in(struct comedi_device *dev,
 	rmw[2].and_mask = 0xff;
 	rmw[2].or_value = F020_MASK_ADC0CN_AD0EN | F020_MASK_ADC0CN_AD0BUSY;
 
-	ret = dt9812_rmw_multiple_registers(slot->usb, 3, rmw);
+	ret = dt9812_rmw_multiple_registers(dev, 3, rmw);
 	if (ret)
 		goto exit;
 
 	/* read the status and ADC */
-	ret = dt9812_read_multiple_registers(slot->usb, 3, reg, val);
+	ret = dt9812_read_multiple_registers(dev, 3, reg, val);
 	if (ret)
 		goto exit;
 
@@ -561,7 +524,7 @@ static int dt9812_analog_in(struct comedi_device *dev,
 	 */
 	if ((val[0] & (F020_MASK_ADC0CN_AD0INT | F020_MASK_ADC0CN_AD0BUSY)) ==
 	    F020_MASK_ADC0CN_AD0INT) {
-		switch (slot->usb->device) {
+		switch (devpriv->device) {
 		case DT9812_DEVID_DT9812_10:
 			/*
 			 * For DT9812-10V the personality module set the
@@ -597,53 +560,51 @@ static int dt9812_analog_out_shadow(struct comedi_device *dev,
 static int dt9812_analog_out(struct comedi_device *dev, int channel, u16 value)
 {
 	struct dt9812_private *devpriv = dev->private;
-	struct slot_dt9812 *slot = devpriv->slot;
-	int ret = -ENODEV;
+	struct dt9812_rmw_byte rmw[3];
+	int ret;
 
 	down(&devpriv->sem);
-	if (slot->usb) {
-		struct dt9812_rmw_byte rmw[3];
 
-		switch (channel) {
-		case 0:
-			/* 1. Set DAC mode */
-			rmw[0].address = F020_SFR_DAC0CN;
-			rmw[0].and_mask = 0xff;
-			rmw[0].or_value = F020_MASK_DACxCN_DACxEN;
-
-			/* 2 load low byte of DAC value first */
-			rmw[1].address = F020_SFR_DAC0L;
-			rmw[1].and_mask = 0xff;
-			rmw[1].or_value = value & 0xff;
-
-			/* 3 load high byte of DAC value next to latch the
-			   12-bit value */
-			rmw[2].address = F020_SFR_DAC0H;
-			rmw[2].and_mask = 0xff;
-			rmw[2].or_value = (value >> 8) & 0xf;
-			break;
+	switch (channel) {
+	case 0:
+		/* 1. Set DAC mode */
+		rmw[0].address = F020_SFR_DAC0CN;
+		rmw[0].and_mask = 0xff;
+		rmw[0].or_value = F020_MASK_DACxCN_DACxEN;
+
+		/* 2 load low byte of DAC value first */
+		rmw[1].address = F020_SFR_DAC0L;
+		rmw[1].and_mask = 0xff;
+		rmw[1].or_value = value & 0xff;
+
+		/* 3 load high byte of DAC value next to latch the
+			12-bit value */
+		rmw[2].address = F020_SFR_DAC0H;
+		rmw[2].and_mask = 0xff;
+		rmw[2].or_value = (value >> 8) & 0xf;
+		break;
 
-		case 1:
-			/* 1. Set DAC mode */
-			rmw[0].address = F020_SFR_DAC1CN;
-			rmw[0].and_mask = 0xff;
-			rmw[0].or_value = F020_MASK_DACxCN_DACxEN;
-
-			/* 2 load low byte of DAC value first */
-			rmw[1].address = F020_SFR_DAC1L;
-			rmw[1].and_mask = 0xff;
-			rmw[1].or_value = value & 0xff;
-
-			/* 3 load high byte of DAC value next to latch the
-			   12-bit value */
-			rmw[2].address = F020_SFR_DAC1H;
-			rmw[2].and_mask = 0xff;
-			rmw[2].or_value = (value >> 8) & 0xf;
-			break;
-		}
-		ret = dt9812_rmw_multiple_registers(slot->usb, 3, rmw);
-		devpriv->ao_shadow[channel] = value;
+	case 1:
+		/* 1. Set DAC mode */
+		rmw[0].address = F020_SFR_DAC1CN;
+		rmw[0].and_mask = 0xff;
+		rmw[0].or_value = F020_MASK_DACxCN_DACxEN;
+
+		/* 2 load low byte of DAC value first */
+		rmw[1].address = F020_SFR_DAC1L;
+		rmw[1].and_mask = 0xff;
+		rmw[1].or_value = value & 0xff;
+
+		/* 3 load high byte of DAC value next to latch the
+			12-bit value */
+		rmw[2].address = F020_SFR_DAC1H;
+		rmw[2].and_mask = 0xff;
+		rmw[2].or_value = (value >> 8) & 0xf;
+		break;
 	}
+	ret = dt9812_rmw_multiple_registers(dev, 3, rmw);
+	devpriv->ao_shadow[channel] = value;
+
 	up(&devpriv->sem);
 
 	return ret;
@@ -727,10 +688,11 @@ static int dt9812_ao_winsn(struct comedi_device *dev,
 	return n;
 }
 
-static int dt9812_find_endpoints(struct usb_interface *intf,
-				 struct usb_dt9812 *devpriv)
+static int dt9812_find_endpoints(struct comedi_device *dev)
 {
+	struct usb_interface *intf = comedi_to_usb_interface(dev);
 	struct usb_host_interface *host = intf->cur_altsetting;
+	struct dt9812_private *devpriv = dev->private;
 	struct usb_endpoint_descriptor *ep;
 	int i;
 
@@ -774,24 +736,26 @@ static int dt9812_find_endpoints(struct usb_interface *intf,
 	return 0;
 }
 
-static int dt9812_reset_device(struct usb_interface *intf,
-			       struct usb_dt9812 *devpriv)
+static int dt9812_reset_device(struct comedi_device *dev)
 {
+	struct usb_interface *intf = comedi_to_usb_interface(dev);
+	struct usb_device *usb = interface_to_usbdev(intf);
+	struct dt9812_private *devpriv = dev->private;
 	int ret;
 	int i;
 	u32 tmp32;
 	u16 tmp16;
 	u8 tmp8;
 
-	ret = dt9812_read_info(devpriv, 0, &tmp8, sizeof(tmp8));
+	ret = dt9812_read_info(dev, 0, &tmp8, sizeof(tmp8));
 	if (ret) {
 		/*
 		 * Seems like a configuration reset is necessary if driver is
 		 * reloaded while device is attached
 		 */
-		usb_reset_configuration(devpriv->udev);
+		usb_reset_configuration(usb);
 		for (i = 0; i < 10; i++) {
-			ret = dt9812_read_info(devpriv, 1, &tmp8, sizeof(tmp8));
+			ret = dt9812_read_info(dev, 1, &tmp8, sizeof(tmp8));
 			if (ret == 0)
 				break;
 		}
@@ -801,28 +765,28 @@ static int dt9812_reset_device(struct usb_interface *intf,
 		}
 	}
 
-	ret = dt9812_read_info(devpriv, 1, &tmp16, sizeof(tmp16));
+	ret = dt9812_read_info(dev, 1, &tmp16, sizeof(tmp16));
 	if (ret) {
 		dev_err(&intf->dev, "failed to read vendor id\n");
 		return ret;
 	}
 	devpriv->vendor = le16_to_cpu(tmp16);
 
-	ret = dt9812_read_info(devpriv, 3, &tmp16, sizeof(tmp16));
+	ret = dt9812_read_info(dev, 3, &tmp16, sizeof(tmp16));
 	if (ret) {
 		dev_err(&intf->dev, "failed to read product id\n");
 		return ret;
 	}
 	devpriv->product = le16_to_cpu(tmp16);
 
-	ret = dt9812_read_info(devpriv, 5, &tmp16, sizeof(tmp16));
+	ret = dt9812_read_info(dev, 5, &tmp16, sizeof(tmp16));
 	if (ret) {
 		dev_err(&intf->dev, "failed to read device id\n");
 		return ret;
 	}
 	devpriv->device = le16_to_cpu(tmp16);
 
-	ret = dt9812_read_info(devpriv, 7, &tmp32, sizeof(tmp32));
+	ret = dt9812_read_info(dev, 7, &tmp32, sizeof(tmp32));
 	if (ret) {
 		dev_err(&intf->dev, "failed to read serial number\n");
 		return ret;
@@ -837,11 +801,11 @@ static int dt9812_reset_device(struct usb_interface *intf,
 	return 0;
 }
 
-static int dt9812_attach(struct comedi_device *dev, struct comedi_devconfig *it)
+static int dt9812_auto_attach(struct comedi_device *dev,
+			      unsigned long context)
 {
-	struct slot_dt9812 *slot = NULL;
+	struct usb_interface *intf = comedi_to_usb_interface(dev);
 	struct dt9812_private *devpriv;
-	int i;
 	struct comedi_subdevice *s;
 	bool is_unipolar;
 	int ret;
@@ -850,186 +814,110 @@ static int dt9812_attach(struct comedi_device *dev, struct comedi_devconfig *it)
 	if (!devpriv)
 		return -ENOMEM;
 	dev->private = devpriv;
-	sema_init(&devpriv->sem, 1);
 
-	down(&dt9812_mutex);
+	sema_init(&devpriv->sem, 1);
+	usb_set_intfdata(intf, devpriv);
 
-	/*
-	 * Find the first unused slot for the comedi device
-	 * that has a usb device connected.
-	 */
-	for (i = 0; i < DT9812_NUM_SLOTS; i++) {
-		if (dt9812[i].usb && !dt9812[i].devpriv) {
-			slot = &dt9812[i];
-			break;
-		}
-	}
-	if (!slot) {
-		up(&dt9812_mutex);
-		return -ENODEV;
-	}
+	ret = dt9812_find_endpoints(dev);
+	if (ret)
+		return ret;
 
-	slot->devpriv = devpriv;
-	devpriv->slot = slot;
-	is_unipolar = (slot->usb->device == DT9812_DEVID_DT9812_2PT5);
+	ret = dt9812_reset_device(dev);
+	if (ret)
+		return ret;
 
-	up(&dt9812_mutex);
+	is_unipolar = (devpriv->device == DT9812_DEVID_DT9812_2PT5);
 
 	ret = comedi_alloc_subdevices(dev, 4);
 	if (ret)
 		return ret;
 
-	/* digital input subdevice */
+	/* Digital Input subdevice */
 	s = &dev->subdevices[0];
-	s->type = COMEDI_SUBD_DI;
-	s->subdev_flags = SDF_READABLE;
-	s->n_chan = 8;
-	s->maxdata = 1;
-	s->range_table = &range_digital;
-	s->insn_read = &dt9812_di_rinsn;
-
-	/* digital output subdevice */
+	s->type		= COMEDI_SUBD_DI;
+	s->subdev_flags	= SDF_READABLE;
+	s->n_chan	= 8;
+	s->maxdata	= 1;
+	s->range_table	= &range_digital;
+	s->insn_read	= dt9812_di_rinsn;
+
+	/* Digital Output subdevice */
 	s = &dev->subdevices[1];
-	s->type = COMEDI_SUBD_DO;
-	s->subdev_flags = SDF_WRITEABLE;
-	s->n_chan = 8;
-	s->maxdata = 1;
-	s->range_table = &range_digital;
-	s->insn_write = &dt9812_do_winsn;
+	s->type		= COMEDI_SUBD_DO;
+	s->subdev_flags	= SDF_WRITEABLE;
+	s->n_chan	= 8;
+	s->maxdata	= 1;
+	s->range_table	= &range_digital;
+	s->insn_write	= dt9812_do_winsn;
 
 	devpriv->do_shadow = 0;
 
-	/* analog input subdevice */
+	/* Analog Input subdevice */
 	s = &dev->subdevices[2];
-	s->type = COMEDI_SUBD_AI;
-	s->subdev_flags = SDF_READABLE | SDF_GROUND;
-	s->n_chan = 8;
-	s->maxdata = 4095;
-	s->range_table = is_unipolar ? &range_unipolar2_5 : &range_bipolar10;
-	s->insn_read = &dt9812_ai_rinsn;
-
-	/* analog output subdevice */
+	s->type		= COMEDI_SUBD_AI;
+	s->subdev_flags	= SDF_READABLE | SDF_GROUND;
+	s->n_chan	= 8;
+	s->maxdata	= 0x0fff;
+	s->range_table	= is_unipolar ? &range_unipolar2_5 : &range_bipolar10;
+	s->insn_read	= dt9812_ai_rinsn;
+
+	/* Analog Output subdevice */
 	s = &dev->subdevices[3];
-	s->type = COMEDI_SUBD_AO;
-	s->subdev_flags = SDF_WRITEABLE;
-	s->n_chan = 0;
-	s->maxdata = 4095;
-	s->range_table = is_unipolar ? &range_unipolar2_5 : &range_bipolar10;
-	s->insn_write = &dt9812_ao_winsn;
-	s->insn_read = &dt9812_ao_rinsn;
+	s->type		= COMEDI_SUBD_AO;
+	s->subdev_flags	= SDF_WRITEABLE;
+	s->n_chan	= 2;
+	s->maxdata	= 0x0fff;
+	s->range_table	= is_unipolar ? &range_unipolar2_5 : &range_bipolar10;
+	s->insn_write	= dt9812_ao_winsn;
+	s->insn_read	= dt9812_ao_rinsn;
 
 	devpriv->ao_shadow[0] = is_unipolar ? 0x0000 : 0x0800;
 	devpriv->ao_shadow[1] = is_unipolar ? 0x0000 : 0x0800;
 
-	dev_info(dev->class_dev, "successfully attached to dt9812.\n");
-
 	return 0;
 }
 
 static void dt9812_detach(struct comedi_device *dev)
 {
+	struct usb_interface *intf = comedi_to_usb_interface(dev);
 	struct dt9812_private *devpriv = dev->private;
 
-	if (devpriv && devpriv->slot)
-		devpriv->slot = NULL;
-}
-
-static struct comedi_driver dt9812_comedi_driver = {
-	.module = THIS_MODULE,
-	.driver_name = "dt9812",
-	.attach = dt9812_attach,
-	.detach = dt9812_detach,
-};
-
-static int dt9812_probe(struct usb_interface *intf,
-			const struct usb_device_id *id)
-{
-	struct slot_dt9812 *slot = NULL;
-	struct usb_dt9812 *dev = NULL;
-	int retval = -ENOMEM;
-	int i;
-
-	/* allocate memory for our device state and initialize it */
-	dev = kzalloc(sizeof(*dev), GFP_KERNEL);
-	if (dev == NULL)
-		goto error;
-
-	kref_init(&dev->kref);
-
-	down(&dt9812_mutex);
-
-	/* Find an empty slot for the usb device */
-	for (i = 0; i < DT9812_NUM_SLOTS; i++) {
-		if (!dt9812[i].usb) {
-			slot = &dt9812[i];
-			break;
-		}
-	}
-	if (!slot) {
-		up(&dt9812_mutex);
-		retval = -ENODEV;
-		goto error;
-	}
-
-	slot->usb = dev;
-	dev->slot = slot;
-
-	up(&dt9812_mutex);
-
-	dev->udev = usb_get_dev(interface_to_usbdev(intf));
-
-	retval = dt9812_find_endpoints(intf, dev);
-	if (retval)
-		goto error;
-
-	retval = dt9812_reset_device(intf, dev);
-	if (retval)
-		goto error;
+	if (!devpriv)
+		return;
 
-	/* save our data pointer in this interface device */
-	usb_set_intfdata(intf, dev);
+	down(&devpriv->sem);
 
-	return 0;
+	usb_set_intfdata(intf, NULL);
 
-error:
-	if (dev)
-		kref_put(&dev->kref, dt9812_delete);
-	return retval;
+	up(&devpriv->sem);
 }
 
-static void dt9812_disconnect(struct usb_interface *intf)
-{
-	struct usb_dt9812 *dev;
-	int minor = intf->minor;
-
-	down(&dt9812_mutex);
-	dev = usb_get_intfdata(intf);
-	if (dev->slot) {
-		dev->slot->usb = NULL;
-		dev->slot = NULL;
-	}
-	usb_set_intfdata(intf, NULL);
-	up(&dt9812_mutex);
-
-	/* queue final destruction */
-	kref_put(&dev->kref, dt9812_delete);
+static struct comedi_driver dt9812_driver = {
+	.driver_name	= "dt9812",
+	.module		= THIS_MODULE,
+	.auto_attach	= dt9812_auto_attach,
+	.detach		= dt9812_detach,
+};
 
-	dev_info(&intf->dev, "USB Dt9812 #%d now disconnected\n", minor);
+static int dt9812_usb_probe(struct usb_interface *intf,
+			    const struct usb_device_id *id)
+{
+	return comedi_usb_auto_config(intf, &dt9812_driver, id->driver_info);
 }
 
-static const struct usb_device_id dt9812_table[] = {
+static const struct usb_device_id dt9812_usb_table[] = {
 	{ USB_DEVICE(0x0867, 0x9812) },
 	{ }
 };
-MODULE_DEVICE_TABLE(usb, dt9812_table);
+MODULE_DEVICE_TABLE(usb, dt9812_usb_table);
 
 static struct usb_driver dt9812_usb_driver = {
 	.name		= "dt9812",
-	.id_table	= dt9812_table,
-	.probe		= dt9812_probe,
-	.disconnect	= dt9812_disconnect,
+	.id_table	= dt9812_usb_table,
+	.probe		= dt9812_usb_probe,
+	.disconnect	= comedi_usb_auto_unconfig,
 };
-module_comedi_usb_driver(dt9812_comedi_driver, dt9812_usb_driver);
+module_comedi_usb_driver(dt9812_driver, dt9812_usb_driver);
 
 MODULE_AUTHOR("Anders Blomdell <anders.blomdell@control.lth.se>");
 MODULE_DESCRIPTION("Comedi DT9812 driver");

commit 8db1eba1e267bcd8d524eab3bdc2357b6d770f33
Author: H Hartley Sweeten <hsweeten@visionengravers.com>
Date:   Tue May 14 14:29:40 2013 -0700

    staging: comedi: dt9812: factor the device reset out of dt9812_probe()
    
    When this driver is converted to the comedi (*auto_attach) mechanism
    the device reset will be done during the (*auto_attach). To make the
    conversion cleaner, factor the device reset out of the (*probe).
    
    Signed-off-by: H Hartley Sweeten <hsweeten@visionengravers.com>
    Cc: Ian Abbott <abbotti@mev.co.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/drivers/dt9812.c b/drivers/staging/comedi/drivers/dt9812.c
index 42a4a9d796bc..57bdb06921e3 100644
--- a/drivers/staging/comedi/drivers/dt9812.c
+++ b/drivers/staging/comedi/drivers/dt9812.c
@@ -774,6 +774,69 @@ static int dt9812_find_endpoints(struct usb_interface *intf,
 	return 0;
 }
 
+static int dt9812_reset_device(struct usb_interface *intf,
+			       struct usb_dt9812 *devpriv)
+{
+	int ret;
+	int i;
+	u32 tmp32;
+	u16 tmp16;
+	u8 tmp8;
+
+	ret = dt9812_read_info(devpriv, 0, &tmp8, sizeof(tmp8));
+	if (ret) {
+		/*
+		 * Seems like a configuration reset is necessary if driver is
+		 * reloaded while device is attached
+		 */
+		usb_reset_configuration(devpriv->udev);
+		for (i = 0; i < 10; i++) {
+			ret = dt9812_read_info(devpriv, 1, &tmp8, sizeof(tmp8));
+			if (ret == 0)
+				break;
+		}
+		if (ret) {
+			dev_err(&intf->dev, "unable to reset configuration\n");
+			return ret;
+		}
+	}
+
+	ret = dt9812_read_info(devpriv, 1, &tmp16, sizeof(tmp16));
+	if (ret) {
+		dev_err(&intf->dev, "failed to read vendor id\n");
+		return ret;
+	}
+	devpriv->vendor = le16_to_cpu(tmp16);
+
+	ret = dt9812_read_info(devpriv, 3, &tmp16, sizeof(tmp16));
+	if (ret) {
+		dev_err(&intf->dev, "failed to read product id\n");
+		return ret;
+	}
+	devpriv->product = le16_to_cpu(tmp16);
+
+	ret = dt9812_read_info(devpriv, 5, &tmp16, sizeof(tmp16));
+	if (ret) {
+		dev_err(&intf->dev, "failed to read device id\n");
+		return ret;
+	}
+	devpriv->device = le16_to_cpu(tmp16);
+
+	ret = dt9812_read_info(devpriv, 7, &tmp32, sizeof(tmp32));
+	if (ret) {
+		dev_err(&intf->dev, "failed to read serial number\n");
+		return ret;
+	}
+	devpriv->serial = le32_to_cpu(tmp32);
+
+	/* let the user know what node this device is now attached to */
+	dev_info(&intf->dev, "USB DT9812 (%4.4x.%4.4x.%4.4x) #0x%8.8x\n",
+		 devpriv->vendor, devpriv->product, devpriv->device,
+		 devpriv->serial);
+
+	return 0;
+}
+
 static int dt9812_attach(struct comedi_device *dev, struct comedi_devconfig *it)
 {
 	struct slot_dt9812 *slot = NULL;
@@ -885,7 +948,6 @@ static int dt9812_probe(struct usb_interface *intf,
 	struct usb_dt9812 *dev = NULL;
 	int retval = -ENOMEM;
 	int i;
-	u8 fw;
 
 	/* allocate memory for our device state and initialize it */
 	dev = kzalloc(sizeof(*dev), GFP_KERNEL);
@@ -920,56 +982,13 @@ static int dt9812_probe(struct usb_interface *intf,
 	if (retval)
 		goto error;
 
-	if (dt9812_read_info(dev, 0, &fw, sizeof(fw)) != 0) {
-		/*
-		 * Seems like a configuration reset is necessary if driver is
-		 * reloaded while device is attached
-		 */
-		usb_reset_configuration(dev->udev);
-		for (i = 0; i < 10; i++) {
-			retval = dt9812_read_info(dev, 1, &fw, sizeof(fw));
-			if (retval == 0) {
-				dev_info(&intf->dev,
-					 "usb_reset_configuration succeeded "
-					 "after %d iterations\n", i);
-				break;
-			}
-		}
-	}
-
-	if (dt9812_read_info(dev, 1, &dev->vendor, sizeof(dev->vendor)) != 0) {
-		dev_err(&intf->dev, "Failed to read vendor.\n");
-		retval = -ENODEV;
-		goto error;
-	}
-	if (dt9812_read_info(dev, 3, &dev->product, sizeof(dev->product)) != 0) {
-		dev_err(&intf->dev, "Failed to read product.\n");
-		retval = -ENODEV;
-		goto error;
-	}
-	if (dt9812_read_info(dev, 5, &dev->device, sizeof(dev->device)) != 0) {
-		dev_err(&intf->dev, "Failed to read device.\n");
-		retval = -ENODEV;
-		goto error;
-	}
-	if (dt9812_read_info(dev, 7, &dev->serial, sizeof(dev->serial)) != 0) {
-		dev_err(&intf->dev, "Failed to read serial.\n");
-		retval = -ENODEV;
+	retval = dt9812_reset_device(intf, dev);
+	if (retval)
 		goto error;
-	}
-
-	dev->vendor = le16_to_cpu(dev->vendor);
-	dev->product = le16_to_cpu(dev->product);
-	dev->device = le16_to_cpu(dev->device);
-	dev->serial = le32_to_cpu(dev->serial);
 
 	/* save our data pointer in this interface device */
 	usb_set_intfdata(intf, dev);
 
-	/* let the user know what node this device is now attached to */
-	dev_info(&intf->dev, "USB DT9812 (%4.4x.%4.4x.%4.4x) #0x%8.8x\n",
-		 dev->vendor, dev->product, dev->device, dev->serial);
-
 	return 0;
 
 error:

commit 8ee26468babacd156e366e5c123fa8fb0860a44b
Author: H Hartley Sweeten <hsweeten@visionengravers.com>
Date:   Tue May 14 14:29:14 2013 -0700

    staging: comedi: dt9812: factor the endpoint setup out of dt9812_probe()
    
    When this driver is converted to the comedi (*auto_attach) mechanism the
    endpoint setup will be done during the (*auto_attach). To make the
    conversion cleaner, factor the endpoint setup out of the (*probe).
    
    Signed-off-by: H Hartley Sweeten <hsweeten@visionengravers.com>
    Cc: Ian Abbott <abbotti@mev.co.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/drivers/dt9812.c b/drivers/staging/comedi/drivers/dt9812.c
index be00acbdcc5a..42a4a9d796bc 100644
--- a/drivers/staging/comedi/drivers/dt9812.c
+++ b/drivers/staging/comedi/drivers/dt9812.c
@@ -727,6 +727,53 @@ static int dt9812_ao_winsn(struct comedi_device *dev,
 	return n;
 }
 
+static int dt9812_find_endpoints(struct usb_interface *intf,
+				 struct usb_dt9812 *devpriv)
+{
+	struct usb_host_interface *host = intf->cur_altsetting;
+	struct usb_endpoint_descriptor *ep;
+	int i;
+
+	if (host->desc.bNumEndpoints != 5) {
+		dev_err(&intf->dev, "Wrong number of endpoints\n");
+		return -ENODEV;
+	}
+
+	for (i = 0; i < host->desc.bNumEndpoints; ++i) {
+		int dir = -1;
+		ep = &host->endpoint[i].desc;
+		switch (i) {
+		case 0:
+			/* unused message pipe */
+			dir = USB_DIR_IN;
+			break;
+		case 1:
+			dir = USB_DIR_OUT;
+			devpriv->cmd_wr.addr = ep->bEndpointAddress;
+			devpriv->cmd_wr.size = le16_to_cpu(ep->wMaxPacketSize);
+			break;
+		case 2:
+			dir = USB_DIR_IN;
+			devpriv->cmd_rd.addr = ep->bEndpointAddress;
+			devpriv->cmd_rd.size = le16_to_cpu(ep->wMaxPacketSize);
+			break;
+		case 3:
+			/* unused write stream */
+			dir = USB_DIR_OUT;
+			break;
+		case 4:
+			/* unused read stream */
+			dir = USB_DIR_IN;
+			break;
+		}
+		if ((ep->bEndpointAddress & USB_DIR_IN) != dir) {
+			dev_err(&intf->dev, "Endpoint has wrong direction\n");
+			return -ENODEV;
+		}
+	}
+	return 0;
+}
+
 static int dt9812_attach(struct comedi_device *dev, struct comedi_devconfig *it)
 {
 	struct slot_dt9812 *slot = NULL;
@@ -836,8 +883,6 @@ static int dt9812_probe(struct usb_interface *intf,
 {
 	struct slot_dt9812 *slot = NULL;
 	struct usb_dt9812 *dev = NULL;
-	struct usb_host_interface *host;
-	struct usb_endpoint_descriptor *ep;
 	int retval = -ENOMEM;
 	int i;
 	u8 fw;
@@ -871,49 +916,10 @@ static int dt9812_probe(struct usb_interface *intf,
 
 	dev->udev = usb_get_dev(interface_to_usbdev(intf));
 
-	/* Check endpoints */
-	host = intf->cur_altsetting;
-
-	if (host->desc.bNumEndpoints != 5) {
-		dev_err(&intf->dev, "Wrong number of endpoints.\n");
-		retval = -ENODEV;
+	retval = dt9812_find_endpoints(intf, dev);
+	if (retval)
 		goto error;
-	}
 
-	for (i = 0; i < host->desc.bNumEndpoints; ++i) {
-		int direction = -1;
-		ep = &host->endpoint[i].desc;
-		switch (i) {
-		case 0:
-			/* unused message pipe */
-			direction = USB_DIR_IN;
-			break;
-		case 1:
-			direction = USB_DIR_OUT;
-			dev->cmd_wr.addr = ep->bEndpointAddress;
-			dev->cmd_wr.size = le16_to_cpu(ep->wMaxPacketSize);
-			break;
-		case 2:
-			direction = USB_DIR_IN;
-			dev->cmd_rd.addr = ep->bEndpointAddress;
-			dev->cmd_rd.size = le16_to_cpu(ep->wMaxPacketSize);
-			break;
-		case 3:
-			/* unused write stream */
-			direction = USB_DIR_OUT;
-			break;
-		case 4:
-			/* unused read stream */
-			direction = USB_DIR_IN;
-			break;
-		}
-		if ((ep->bEndpointAddress & USB_DIR_IN) != direction) {
-			dev_err(&intf->dev,
-				"Endpoint has wrong direction.\n");
-			retval = -ENODEV;
-			goto error;
-		}
-	}
 	if (dt9812_read_info(dev, 0, &fw, sizeof(fw)) != 0) {
 		/*
 		 * Seems like a configuration reset is necessary if driver is

commit 8f5669376dbb16ecb97618749fa3e69105eb4544
Author: H Hartley Sweeten <hsweeten@visionengravers.com>
Date:   Tue May 14 14:28:51 2013 -0700

    staging: comedi: dt9812: remove 'interface' from usb private data
    
    The usb_interface * is only used in the usb (*probe) and (*disconnect).
    Remove the pointer to the 'interface' in the usb private data.
    
    For aesthetic reasons, rename the variable 'interface' to simply
    'intf' in the (*probe) and (*disconnect).
    
    Signed-off-by: H Hartley Sweeten <hsweeten@visionengravers.com>
    Cc: Ian Abbott <abbotti@mev.co.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/drivers/dt9812.c b/drivers/staging/comedi/drivers/dt9812.c
index 831ca9477f46..be00acbdcc5a 100644
--- a/drivers/staging/comedi/drivers/dt9812.c
+++ b/drivers/staging/comedi/drivers/dt9812.c
@@ -265,7 +265,6 @@ static DEFINE_SEMAPHORE(dt9812_mutex);
 struct usb_dt9812 {
 	struct slot_dt9812 *slot;
 	struct usb_device *udev;
-	struct usb_interface *interface;
 	u16 vendor;
 	u16 product;
 	u16 device;
@@ -832,7 +831,7 @@ static struct comedi_driver dt9812_comedi_driver = {
 	.detach = dt9812_detach,
 };
 
-static int dt9812_probe(struct usb_interface *interface,
+static int dt9812_probe(struct usb_interface *intf,
 			const struct usb_device_id *id)
 {
 	struct slot_dt9812 *slot = NULL;
@@ -870,14 +869,13 @@ static int dt9812_probe(struct usb_interface *interface,
 
 	up(&dt9812_mutex);
 
-	dev->udev = usb_get_dev(interface_to_usbdev(interface));
-	dev->interface = interface;
+	dev->udev = usb_get_dev(interface_to_usbdev(intf));
 
 	/* Check endpoints */
-	host = interface->cur_altsetting;
+	host = intf->cur_altsetting;
 
 	if (host->desc.bNumEndpoints != 5) {
-		dev_err(&interface->dev, "Wrong number of endpoints.\n");
+		dev_err(&intf->dev, "Wrong number of endpoints.\n");
 		retval = -ENODEV;
 		goto error;
 	}
@@ -910,7 +908,7 @@ static int dt9812_probe(struct usb_interface *interface,
 			break;
 		}
 		if ((ep->bEndpointAddress & USB_DIR_IN) != direction) {
-			dev_err(&interface->dev,
+			dev_err(&intf->dev,
 				"Endpoint has wrong direction.\n");
 			retval = -ENODEV;
 			goto error;
@@ -925,7 +923,7 @@ static int dt9812_probe(struct usb_interface *interface,
 		for (i = 0; i < 10; i++) {
 			retval = dt9812_read_info(dev, 1, &fw, sizeof(fw));
 			if (retval == 0) {
-				dev_info(&interface->dev,
+				dev_info(&intf->dev,
 					 "usb_reset_configuration succeeded "
 					 "after %d iterations\n", i);
 				break;
@@ -934,22 +932,22 @@ static int dt9812_probe(struct usb_interface *interface,
 	}
 
 	if (dt9812_read_info(dev, 1, &dev->vendor, sizeof(dev->vendor)) != 0) {
-		dev_err(&interface->dev, "Failed to read vendor.\n");
+		dev_err(&intf->dev, "Failed to read vendor.\n");
 		retval = -ENODEV;
 		goto error;
 	}
 	if (dt9812_read_info(dev, 3, &dev->product, sizeof(dev->product)) != 0) {
-		dev_err(&interface->dev, "Failed to read product.\n");
+		dev_err(&intf->dev, "Failed to read product.\n");
 		retval = -ENODEV;
 		goto error;
 	}
 	if (dt9812_read_info(dev, 5, &dev->device, sizeof(dev->device)) != 0) {
-		dev_err(&interface->dev, "Failed to read device.\n");
+		dev_err(&intf->dev, "Failed to read device.\n");
 		retval = -ENODEV;
 		goto error;
 	}
 	if (dt9812_read_info(dev, 7, &dev->serial, sizeof(dev->serial)) != 0) {
-		dev_err(&interface->dev, "Failed to read serial.\n");
+		dev_err(&intf->dev, "Failed to read serial.\n");
 		retval = -ENODEV;
 		goto error;
 	}
@@ -960,10 +958,10 @@ static int dt9812_probe(struct usb_interface *interface,
 	dev->serial = le32_to_cpu(dev->serial);
 
 	/* save our data pointer in this interface device */
-	usb_set_intfdata(interface, dev);
+	usb_set_intfdata(intf, dev);
 
 	/* let the user know what node this device is now attached to */
-	dev_info(&interface->dev, "USB DT9812 (%4.4x.%4.4x.%4.4x) #0x%8.8x\n",
+	dev_info(&intf->dev, "USB DT9812 (%4.4x.%4.4x.%4.4x) #0x%8.8x\n",
 		 dev->vendor, dev->product, dev->device, dev->serial);
 
 	return 0;
@@ -974,24 +972,24 @@ static int dt9812_probe(struct usb_interface *interface,
 	return retval;
 }
 
-static void dt9812_disconnect(struct usb_interface *interface)
+static void dt9812_disconnect(struct usb_interface *intf)
 {
 	struct usb_dt9812 *dev;
-	int minor = interface->minor;
+	int minor = intf->minor;
 
 	down(&dt9812_mutex);
-	dev = usb_get_intfdata(interface);
+	dev = usb_get_intfdata(intf);
 	if (dev->slot) {
 		dev->slot->usb = NULL;
 		dev->slot = NULL;
 	}
-	usb_set_intfdata(interface, NULL);
+	usb_set_intfdata(intf, NULL);
 	up(&dt9812_mutex);
 
 	/* queue final destruction */
 	kref_put(&dev->kref, dt9812_delete);
 
-	dev_info(&interface->dev, "USB Dt9812 #%d now disconnected\n", minor);
+	dev_info(&intf->dev, "USB Dt9812 #%d now disconnected\n", minor);
 }
 
 static const struct usb_device_id dt9812_table[] = {

commit 135a0009a5ff601e2c68dfd6b280f42e43711c23
Author: H Hartley Sweeten <hsweeten@visionengravers.com>
Date:   Tue May 14 14:28:26 2013 -0700

    staging: comedi: dt9812: move shadow values to private data
    
    The analog and digital out shadow values are only used by the
    comedi_device. Move the variables from the usb private data to
    the comedi private data. Also, rename them to something a bit
    shorter.
    
    Move the initialization of the shadow values from the usb probe
    to the comedi attach. Also rename the flag used to determine the
    initial value from 'range_2_5' to 'is_unipolar'.
    
    Signed-off-by: H Hartley Sweeten <hsweeten@visionengravers.com>
    Cc: Ian Abbott <abbotti@mev.co.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/drivers/dt9812.c b/drivers/staging/comedi/drivers/dt9812.c
index 8a4462ac5817..831ca9477f46 100644
--- a/drivers/staging/comedi/drivers/dt9812.c
+++ b/drivers/staging/comedi/drivers/dt9812.c
@@ -275,13 +275,13 @@ struct usb_dt9812 {
 		size_t size;
 	} cmd_wr, cmd_rd;
 	struct kref kref;
-	u16 analog_out_shadow[2];
-	u8 digital_out_shadow;
 };
 
 struct dt9812_private {
 	struct semaphore sem;
 	struct slot_dt9812 *slot;
+	u16 ao_shadow[2];
+	u8 do_shadow;
 };
 
 struct slot_dt9812 {
@@ -423,7 +423,7 @@ static int dt9812_digital_out(struct comedi_device *dev, u8 bits)
 		u8 value[1] = { bits };
 
 		ret = dt9812_write_multiple_registers(slot->usb, 1, reg, value);
-		slot->usb->digital_out_shadow = bits;
+		devpriv->do_shadow = bits;
 	}
 	up(&devpriv->sem);
 
@@ -433,17 +433,12 @@ static int dt9812_digital_out(struct comedi_device *dev, u8 bits)
 static int dt9812_digital_out_shadow(struct comedi_device *dev, u8 *bits)
 {
 	struct dt9812_private *devpriv = dev->private;
-	struct slot_dt9812 *slot = devpriv->slot;
-	int ret = -ENODEV;
 
 	down(&devpriv->sem);
-	if (slot->usb) {
-		*bits = slot->usb->digital_out_shadow;
-		ret = 0;
-	}
+	*bits = devpriv->do_shadow;
 	up(&devpriv->sem);
 
-	return ret;
+	return 0;
 }
 
 static void dt9812_configure_mux(struct comedi_device *dev,
@@ -592,17 +587,12 @@ static int dt9812_analog_out_shadow(struct comedi_device *dev,
 				    int channel, u16 *value)
 {
 	struct dt9812_private *devpriv = dev->private;
-	struct slot_dt9812 *slot = devpriv->slot;
-	int ret = -ENODEV;
 
 	down(&devpriv->sem);
-	if (slot->usb) {
-		*value = slot->usb->analog_out_shadow[channel];
-		ret = 0;
-	}
+	*value = devpriv->ao_shadow[channel];
 	up(&devpriv->sem);
 
-	return ret;
+	return 0;
 }
 
 static int dt9812_analog_out(struct comedi_device *dev, int channel, u16 value)
@@ -653,7 +643,7 @@ static int dt9812_analog_out(struct comedi_device *dev, int channel, u16 value)
 			break;
 		}
 		ret = dt9812_rmw_multiple_registers(slot->usb, 3, rmw);
-		slot->usb->analog_out_shadow[channel] = value;
+		devpriv->ao_shadow[channel] = value;
 	}
 	up(&devpriv->sem);
 
@@ -744,7 +734,7 @@ static int dt9812_attach(struct comedi_device *dev, struct comedi_devconfig *it)
 	struct dt9812_private *devpriv;
 	int i;
 	struct comedi_subdevice *s;
-	bool range_2_5;
+	bool is_unipolar;
 	int ret;
 
 	devpriv = kzalloc(sizeof(*devpriv), GFP_KERNEL);
@@ -772,7 +762,7 @@ static int dt9812_attach(struct comedi_device *dev, struct comedi_devconfig *it)
 
 	slot->devpriv = devpriv;
 	devpriv->slot = slot;
-	range_2_5 = (slot->usb->device == DT9812_DEVID_DT9812_2PT5);
+	is_unipolar = (slot->usb->device == DT9812_DEVID_DT9812_2PT5);
 
 	up(&dt9812_mutex);
 
@@ -798,13 +788,15 @@ static int dt9812_attach(struct comedi_device *dev, struct comedi_devconfig *it)
 	s->range_table = &range_digital;
 	s->insn_write = &dt9812_do_winsn;
 
+	devpriv->do_shadow = 0;
+
 	/* analog input subdevice */
 	s = &dev->subdevices[2];
 	s->type = COMEDI_SUBD_AI;
 	s->subdev_flags = SDF_READABLE | SDF_GROUND;
 	s->n_chan = 8;
 	s->maxdata = 4095;
-	s->range_table = range_2_5 ? &range_unipolar2_5 : &range_bipolar10;
+	s->range_table = is_unipolar ? &range_unipolar2_5 : &range_bipolar10;
 	s->insn_read = &dt9812_ai_rinsn;
 
 	/* analog output subdevice */
@@ -813,10 +805,13 @@ static int dt9812_attach(struct comedi_device *dev, struct comedi_devconfig *it)
 	s->subdev_flags = SDF_WRITEABLE;
 	s->n_chan = 0;
 	s->maxdata = 4095;
-	s->range_table = range_2_5 ? &range_unipolar2_5 : &range_bipolar10;
+	s->range_table = is_unipolar ? &range_unipolar2_5 : &range_bipolar10;
 	s->insn_write = &dt9812_ao_winsn;
 	s->insn_read = &dt9812_ao_rinsn;
 
+	devpriv->ao_shadow[0] = is_unipolar ? 0x0000 : 0x0800;
+	devpriv->ao_shadow[1] = is_unipolar ? 0x0000 : 0x0800;
+
 	dev_info(dev->class_dev, "successfully attached to dt9812.\n");
 
 	return 0;
@@ -963,17 +958,6 @@ static int dt9812_probe(struct usb_interface *interface,
 	dev->product = le16_to_cpu(dev->product);
 	dev->device = le16_to_cpu(dev->device);
 	dev->serial = le32_to_cpu(dev->serial);
-	switch (dev->device) {
-	case DT9812_DEVID_DT9812_10:
-		dev->analog_out_shadow[0] = 0x0800;
-		dev->analog_out_shadow[1] = 0x800;
-		break;
-	case DT9812_DEVID_DT9812_2PT5:
-		dev->analog_out_shadow[0] = 0x0000;
-		dev->analog_out_shadow[1] = 0x0000;
-		break;
-	}
-	dev->digital_out_shadow = 0;
 
 	/* save our data pointer in this interface device */
 	usb_set_intfdata(interface, dev);

commit 9e8917b3828dbb05874a54dd36779f11a6ea56fa
Author: H Hartley Sweeten <hsweeten@visionengravers.com>
Date:   Tue May 14 14:28:01 2013 -0700

    staging: comedi: dt9812: use module_comedi_usb_driver()
    
    Now that the semaphore used by the comedi_driver is initialized
    when the comedi_device private data is allocated, the module_init()
    in this driver just clears the 'slot' data before calling
    comedi_usb_driver_register(). This static data will already be
    cleared when the driver is loaded.
    
    Replace the module_{init,exit}() with the module_comedi_usb_driver()
    macro to remove the boilerplate code.
    
    Signed-off-by: H Hartley Sweeten <hsweeten@visionengravers.com>
    Cc: Ian Abbott <abbotti@mev.co.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/drivers/dt9812.c b/drivers/staging/comedi/drivers/dt9812.c
index 7c26866c40a2..8a4462ac5817 100644
--- a/drivers/staging/comedi/drivers/dt9812.c
+++ b/drivers/staging/comedi/drivers/dt9812.c
@@ -1022,28 +1022,7 @@ static struct usb_driver dt9812_usb_driver = {
 	.probe		= dt9812_probe,
 	.disconnect	= dt9812_disconnect,
 };
-
-static int __init usb_dt9812_init(void)
-{
-	int i;
-
-	/* Initialize all driver slots */
-	for (i = 0; i < DT9812_NUM_SLOTS; i++) {
-		dt9812[i].usb = NULL;
-		dt9812[i].devpriv = NULL;
-	}
-
-	return comedi_usb_driver_register(&dt9812_comedi_driver,
-						&dt9812_usb_driver);
-}
-
-static void __exit usb_dt9812_exit(void)
-{
-	comedi_usb_driver_unregister(&dt9812_comedi_driver, &dt9812_usb_driver);
-}
-
-module_init(usb_dt9812_init);
-module_exit(usb_dt9812_exit);
+module_comedi_usb_driver(dt9812_comedi_driver, dt9812_usb_driver);
 
 MODULE_AUTHOR("Anders Blomdell <anders.blomdell@control.lth.se>");
 MODULE_DESCRIPTION("Comedi DT9812 driver");

commit eb5a0a8ca5a9ee145c9c586083c63bff711c66d1
Author: H Hartley Sweeten <hsweeten@visionengravers.com>
Date:   Tue May 14 14:27:39 2013 -0700

    staging: comedi: dt9812: move the sempaphore used by the comedi_driver
    
    The semaphore in the struct slot_dt9812 is used by the comedi_driver
    when reading and writing to the usb device. It has no real association
    with the 'slot'. The 'slot' is protected with a static semaphore in
    the driver.
    
    Move the semaphore into the comedi_device private data and initialize
    it after the private data is allocated.
    
    Signed-off-by: H Hartley Sweeten <hsweeten@visionengravers.com>
    Cc: Ian Abbott <abbotti@mev.co.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/drivers/dt9812.c b/drivers/staging/comedi/drivers/dt9812.c
index 94ab0c57eb3d..7c26866c40a2 100644
--- a/drivers/staging/comedi/drivers/dt9812.c
+++ b/drivers/staging/comedi/drivers/dt9812.c
@@ -280,11 +280,11 @@ struct usb_dt9812 {
 };
 
 struct dt9812_private {
+	struct semaphore sem;
 	struct slot_dt9812 *slot;
 };
 
 struct slot_dt9812 {
-	struct semaphore mutex;
 	struct usb_dt9812 *usb;
 	struct dt9812_private *devpriv;
 };
@@ -391,7 +391,7 @@ static int dt9812_digital_in(struct comedi_device *dev, u8 *bits)
 	struct slot_dt9812 *slot = devpriv->slot;
 	int ret = -ENODEV;
 
-	down(&slot->mutex);
+	down(&devpriv->sem);
 	if (slot->usb) {
 		u8 reg[2] = { F020_SFR_P3, F020_SFR_P1 };
 		u8 value[2];
@@ -406,7 +406,7 @@ static int dt9812_digital_in(struct comedi_device *dev, u8 *bits)
 			*bits = (value[0] & 0x7f) | ((value[1] & 0x08) << 4);
 		}
 	}
-	up(&slot->mutex);
+	up(&devpriv->sem);
 
 	return ret;
 }
@@ -417,7 +417,7 @@ static int dt9812_digital_out(struct comedi_device *dev, u8 bits)
 	struct slot_dt9812 *slot = devpriv->slot;
 	int ret = -ENODEV;
 
-	down(&slot->mutex);
+	down(&devpriv->sem);
 	if (slot->usb) {
 		u8 reg[1] = { F020_SFR_P2 };
 		u8 value[1] = { bits };
@@ -425,7 +425,7 @@ static int dt9812_digital_out(struct comedi_device *dev, u8 bits)
 		ret = dt9812_write_multiple_registers(slot->usb, 1, reg, value);
 		slot->usb->digital_out_shadow = bits;
 	}
-	up(&slot->mutex);
+	up(&devpriv->sem);
 
 	return ret;
 }
@@ -436,12 +436,12 @@ static int dt9812_digital_out_shadow(struct comedi_device *dev, u8 *bits)
 	struct slot_dt9812 *slot = devpriv->slot;
 	int ret = -ENODEV;
 
-	down(&slot->mutex);
+	down(&devpriv->sem);
 	if (slot->usb) {
 		*bits = slot->usb->digital_out_shadow;
 		ret = 0;
 	}
-	up(&slot->mutex);
+	up(&devpriv->sem);
 
 	return ret;
 }
@@ -532,7 +532,7 @@ static int dt9812_analog_in(struct comedi_device *dev,
 	u8 val[3];
 	int ret = -ENODEV;
 
-	down(&slot->mutex);
+	down(&devpriv->sem);
 	if (!slot->usb)
 		goto exit;
 
@@ -583,7 +583,7 @@ static int dt9812_analog_in(struct comedi_device *dev,
 	}
 
 exit:
-	up(&slot->mutex);
+	up(&devpriv->sem);
 
 	return ret;
 }
@@ -595,12 +595,12 @@ static int dt9812_analog_out_shadow(struct comedi_device *dev,
 	struct slot_dt9812 *slot = devpriv->slot;
 	int ret = -ENODEV;
 
-	down(&slot->mutex);
+	down(&devpriv->sem);
 	if (slot->usb) {
 		*value = slot->usb->analog_out_shadow[channel];
 		ret = 0;
 	}
-	up(&slot->mutex);
+	up(&devpriv->sem);
 
 	return ret;
 }
@@ -611,7 +611,7 @@ static int dt9812_analog_out(struct comedi_device *dev, int channel, u16 value)
 	struct slot_dt9812 *slot = devpriv->slot;
 	int ret = -ENODEV;
 
-	down(&slot->mutex);
+	down(&devpriv->sem);
 	if (slot->usb) {
 		struct dt9812_rmw_byte rmw[3];
 
@@ -655,7 +655,7 @@ static int dt9812_analog_out(struct comedi_device *dev, int channel, u16 value)
 		ret = dt9812_rmw_multiple_registers(slot->usb, 3, rmw);
 		slot->usb->analog_out_shadow[channel] = value;
 	}
-	up(&slot->mutex);
+	up(&devpriv->sem);
 
 	return ret;
 }
@@ -751,6 +751,7 @@ static int dt9812_attach(struct comedi_device *dev, struct comedi_devconfig *it)
 	if (!devpriv)
 		return -ENOMEM;
 	dev->private = devpriv;
+	sema_init(&devpriv->sem, 1);
 
 	down(&dt9812_mutex);
 
@@ -769,11 +770,9 @@ static int dt9812_attach(struct comedi_device *dev, struct comedi_devconfig *it)
 		return -ENODEV;
 	}
 
-	down(&slot->mutex);
 	slot->devpriv = devpriv;
 	devpriv->slot = slot;
 	range_2_5 = (slot->usb->device == DT9812_DEVID_DT9812_2PT5);
-	up(&slot->mutex);
 
 	up(&dt9812_mutex);
 
@@ -871,10 +870,8 @@ static int dt9812_probe(struct usb_interface *interface,
 		goto error;
 	}
 
-	down(&slot->mutex);
 	slot->usb = dev;
 	dev->slot = slot;
-	up(&slot->mutex);
 
 	up(&dt9812_mutex);
 
@@ -1001,9 +998,7 @@ static void dt9812_disconnect(struct usb_interface *interface)
 	down(&dt9812_mutex);
 	dev = usb_get_intfdata(interface);
 	if (dev->slot) {
-		down(&dev->slot->mutex);
 		dev->slot->usb = NULL;
-		up(&dev->slot->mutex);
 		dev->slot = NULL;
 	}
 	usb_set_intfdata(interface, NULL);
@@ -1034,7 +1029,6 @@ static int __init usb_dt9812_init(void)
 
 	/* Initialize all driver slots */
 	for (i = 0; i < DT9812_NUM_SLOTS; i++) {
-		sema_init(&dt9812[i].mutex, 1);
 		dt9812[i].usb = NULL;
 		dt9812[i].devpriv = NULL;
 	}

commit fad1c32076ae8b82c7b62be5946f98596f7febeb
Author: H Hartley Sweeten <hsweeten@visionengravers.com>
Date:   Tue May 14 14:27:16 2013 -0700

    staging: comedi: dt9812: pass the comedi_device * to dt9812_analog_out_shadow()
    
    For aesthetic reasons, instead of passing the 'slot' pointer, pass the
    comedi_device pointer to this function and rename the local var 'result'
    to simply 'ret'.
    
    Signed-off-by: H Hartley Sweeten <hsweeten@visionengravers.com>
    Cc: Ian Abbott <abbotti@mev.co.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/drivers/dt9812.c b/drivers/staging/comedi/drivers/dt9812.c
index ac5629c1a7d0..94ab0c57eb3d 100644
--- a/drivers/staging/comedi/drivers/dt9812.c
+++ b/drivers/staging/comedi/drivers/dt9812.c
@@ -588,19 +588,21 @@ static int dt9812_analog_in(struct comedi_device *dev,
 	return ret;
 }
 
-static int dt9812_analog_out_shadow(struct slot_dt9812 *slot, int channel,
-				    u16 *value)
+static int dt9812_analog_out_shadow(struct comedi_device *dev,
+				    int channel, u16 *value)
 {
-	int result = -ENODEV;
+	struct dt9812_private *devpriv = dev->private;
+	struct slot_dt9812 *slot = devpriv->slot;
+	int ret = -ENODEV;
 
 	down(&slot->mutex);
 	if (slot->usb) {
 		*value = slot->usb->analog_out_shadow[channel];
-		result = 0;
+		ret = 0;
 	}
 	up(&slot->mutex);
 
-	return result;
+	return ret;
 }
 
 static int dt9812_analog_out(struct comedi_device *dev, int channel, u16 value)
@@ -712,14 +714,13 @@ static int dt9812_ao_rinsn(struct comedi_device *dev,
 			   struct comedi_subdevice *s, struct comedi_insn *insn,
 			   unsigned int *data)
 {
-	struct dt9812_private *devpriv = dev->private;
 	unsigned int channel = CR_CHAN(insn->chanspec);
 	int n;
 	u16 value;
 
 	for (n = 0; n < insn->n; n++) {
 		value = 0;
-		dt9812_analog_out_shadow(devpriv->slot, channel, &value);
+		dt9812_analog_out_shadow(dev, channel, &value);
 		data[n] = value;
 	}
 	return n;

commit 387d4879500cfc4b887740643061336916f587fb
Author: H Hartley Sweeten <hsweeten@visionengravers.com>
Date:   Tue May 14 14:26:54 2013 -0700

    staging: comedi: dt9812: tidy up the usb endpoint enumeration
    
    Only the command_{write,read} usb endpoints are used by this driver.
    
    Remove the message_pipe, and {read,write}_stream endpoint information
    from the usb private data.
    
    Rename the variables used for command endpoints to help keep the
    lines < 80 chars.
    
    Also, rename a couple of the local variables used to enumerate the
    endpoints to also help keep the lines < 80 chars.
    
    Signed-off-by: H Hartley Sweeten <hsweeten@visionengravers.com>
    Cc: Ian Abbott <abbotti@mev.co.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/drivers/dt9812.c b/drivers/staging/comedi/drivers/dt9812.c
index 3e471baaea0e..ac5629c1a7d0 100644
--- a/drivers/staging/comedi/drivers/dt9812.c
+++ b/drivers/staging/comedi/drivers/dt9812.c
@@ -273,7 +273,7 @@ struct usb_dt9812 {
 	struct {
 		__u8 addr;
 		size_t size;
-	} message_pipe, command_write, command_read, write_stream, read_stream;
+	} cmd_wr, cmd_rd;
 	struct kref kref;
 	u16 analog_out_shadow[2];
 	u8 digital_out_shadow;
@@ -317,12 +317,12 @@ static int dt9812_read_info(struct usb_dt9812 *dev, int offset, void *buf,
 	cmd.u.flash_data_info.numbytes = cpu_to_le16(buf_size);
 
 	/* DT9812 only responds to 32 byte writes!! */
-	ret = usb_bulk_msg(usb, usb_sndbulkpipe(usb, dev->command_write.addr),
+	ret = usb_bulk_msg(usb, usb_sndbulkpipe(usb, dev->cmd_wr.addr),
 			   &cmd, 32, &count, HZ * 1);
 	if (ret)
 		return ret;
 
-	return usb_bulk_msg(usb, usb_rcvbulkpipe(usb, dev->command_read.addr),
+	return usb_bulk_msg(usb, usb_rcvbulkpipe(usb, dev->cmd_rd.addr),
 			    buf, buf_size, &count, HZ * 1);
 }
 
@@ -339,12 +339,12 @@ static int dt9812_read_multiple_registers(struct usb_dt9812 *dev, int reg_count,
 		cmd.u.read_multi_info.address[i] = address[i];
 
 	/* DT9812 only responds to 32 byte writes!! */
-	ret = usb_bulk_msg(usb, usb_sndbulkpipe(usb, dev->command_write.addr),
+	ret = usb_bulk_msg(usb, usb_sndbulkpipe(usb, dev->cmd_wr.addr),
 			   &cmd, 32, &count, HZ * 1);
 	if (ret)
 		return ret;
 
-	return usb_bulk_msg(usb, usb_rcvbulkpipe(usb, dev->command_read.addr),
+	return usb_bulk_msg(usb, usb_rcvbulkpipe(usb, dev->cmd_rd.addr),
 			    value, reg_count, &count, HZ * 1);
 }
 
@@ -364,7 +364,7 @@ static int dt9812_write_multiple_registers(struct usb_dt9812 *dev,
 	}
 
 	/* DT9812 only responds to 32 byte writes!! */
-	return usb_bulk_msg(usb, usb_sndbulkpipe(usb, dev->command_write.addr),
+	return usb_bulk_msg(usb, usb_sndbulkpipe(usb, dev->cmd_wr.addr),
 			    &cmd, 32, &count, HZ * 1);
 }
 
@@ -381,7 +381,7 @@ static int dt9812_rmw_multiple_registers(struct usb_dt9812 *dev, int reg_count,
 		cmd.u.rmw_multi_info.rmw[i] = rmw[i];
 
 	/* DT9812 only responds to 32 byte writes!! */
-	return usb_bulk_msg(usb, usb_sndbulkpipe(usb, dev->command_write.addr),
+	return usb_bulk_msg(usb, usb_sndbulkpipe(usb, dev->cmd_wr.addr),
 			    &cmd, 32, &count, HZ * 1);
 }
 
@@ -842,8 +842,8 @@ static int dt9812_probe(struct usb_interface *interface,
 {
 	struct slot_dt9812 *slot = NULL;
 	struct usb_dt9812 *dev = NULL;
-	struct usb_host_interface *iface_desc;
-	struct usb_endpoint_descriptor *endpoint;
+	struct usb_host_interface *host;
+	struct usb_endpoint_descriptor *ep;
 	int retval = -ENOMEM;
 	int i;
 	u8 fw;
@@ -881,51 +881,42 @@ static int dt9812_probe(struct usb_interface *interface,
 	dev->interface = interface;
 
 	/* Check endpoints */
-	iface_desc = interface->cur_altsetting;
+	host = interface->cur_altsetting;
 
-	if (iface_desc->desc.bNumEndpoints != 5) {
+	if (host->desc.bNumEndpoints != 5) {
 		dev_err(&interface->dev, "Wrong number of endpoints.\n");
 		retval = -ENODEV;
 		goto error;
 	}
 
-	for (i = 0; i < iface_desc->desc.bNumEndpoints; ++i) {
+	for (i = 0; i < host->desc.bNumEndpoints; ++i) {
 		int direction = -1;
-		endpoint = &iface_desc->endpoint[i].desc;
+		ep = &host->endpoint[i].desc;
 		switch (i) {
 		case 0:
+			/* unused message pipe */
 			direction = USB_DIR_IN;
-			dev->message_pipe.addr = endpoint->bEndpointAddress;
-			dev->message_pipe.size =
-			    le16_to_cpu(endpoint->wMaxPacketSize);
-
 			break;
 		case 1:
 			direction = USB_DIR_OUT;
-			dev->command_write.addr = endpoint->bEndpointAddress;
-			dev->command_write.size =
-			    le16_to_cpu(endpoint->wMaxPacketSize);
+			dev->cmd_wr.addr = ep->bEndpointAddress;
+			dev->cmd_wr.size = le16_to_cpu(ep->wMaxPacketSize);
 			break;
 		case 2:
 			direction = USB_DIR_IN;
-			dev->command_read.addr = endpoint->bEndpointAddress;
-			dev->command_read.size =
-			    le16_to_cpu(endpoint->wMaxPacketSize);
+			dev->cmd_rd.addr = ep->bEndpointAddress;
+			dev->cmd_rd.size = le16_to_cpu(ep->wMaxPacketSize);
 			break;
 		case 3:
+			/* unused write stream */
 			direction = USB_DIR_OUT;
-			dev->write_stream.addr = endpoint->bEndpointAddress;
-			dev->write_stream.size =
-			    le16_to_cpu(endpoint->wMaxPacketSize);
 			break;
 		case 4:
+			/* unused read stream */
 			direction = USB_DIR_IN;
-			dev->read_stream.addr = endpoint->bEndpointAddress;
-			dev->read_stream.size =
-			    le16_to_cpu(endpoint->wMaxPacketSize);
 			break;
 		}
-		if ((endpoint->bEndpointAddress & USB_DIR_IN) != direction) {
+		if ((ep->bEndpointAddress & USB_DIR_IN) != direction) {
 			dev_err(&interface->dev,
 				"Endpoint has wrong direction.\n");
 			retval = -ENODEV;

commit 9d231df80dbaa9918061310149c24bfc3864ca96
Author: H Hartley Sweeten <hsweeten@visionengravers.com>
Date:   Tue May 14 14:26:28 2013 -0700

    staging: comedi: dt9812: pass the comedi_device * to dt9812_analog_out()
    
    For aesthetic reasons, instead of passing the struct usb_dt9812 pointer,
    pass the comedi_device pointer to this function and rename the local
    variable 'result' to simply 'ret'.
    
    Signed-off-by: H Hartley Sweeten <hsweeten@visionengravers.com>
    Cc: Ian Abbott <abbotti@mev.co.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/drivers/dt9812.c b/drivers/staging/comedi/drivers/dt9812.c
index 965e96ddb8d1..3e471baaea0e 100644
--- a/drivers/staging/comedi/drivers/dt9812.c
+++ b/drivers/staging/comedi/drivers/dt9812.c
@@ -603,9 +603,11 @@ static int dt9812_analog_out_shadow(struct slot_dt9812 *slot, int channel,
 	return result;
 }
 
-static int dt9812_analog_out(struct slot_dt9812 *slot, int channel, u16 value)
+static int dt9812_analog_out(struct comedi_device *dev, int channel, u16 value)
 {
-	int result = -ENODEV;
+	struct dt9812_private *devpriv = dev->private;
+	struct slot_dt9812 *slot = devpriv->slot;
+	int ret = -ENODEV;
 
 	down(&slot->mutex);
 	if (slot->usb) {
@@ -648,12 +650,12 @@ static int dt9812_analog_out(struct slot_dt9812 *slot, int channel, u16 value)
 			rmw[2].or_value = (value >> 8) & 0xf;
 			break;
 		}
-		result = dt9812_rmw_multiple_registers(slot->usb, 3, rmw);
+		ret = dt9812_rmw_multiple_registers(slot->usb, 3, rmw);
 		slot->usb->analog_out_shadow[channel] = value;
 	}
 	up(&slot->mutex);
 
-	return result;
+	return ret;
 }
 
 static int dt9812_di_rinsn(struct comedi_device *dev,
@@ -727,12 +729,11 @@ static int dt9812_ao_winsn(struct comedi_device *dev,
 			   struct comedi_subdevice *s, struct comedi_insn *insn,
 			   unsigned int *data)
 {
-	struct dt9812_private *devpriv = dev->private;
 	unsigned int channel = CR_CHAN(insn->chanspec);
 	int n;
 
 	for (n = 0; n < insn->n; n++)
-		dt9812_analog_out(devpriv->slot, channel, data[n]);
+		dt9812_analog_out(dev, channel, data[n]);
 	return n;
 }
 

commit 687d84798de4c202c104db888b33e956bb5b883d
Author: H Hartley Sweeten <hsweeten@visionengravers.com>
Date:   Tue May 14 14:26:05 2013 -0700

    staging: comedi: dt9812: pass the comedi_device * to dt9812_configure_mux()
    
    For aesthetic reasons, instead of passing the struct usb_dt9812 pointer,
    pass the comedi_device pointer to this function.
    
    Signed-off-by: H Hartley Sweeten <hsweeten@visionengravers.com>
    Cc: Ian Abbott <abbotti@mev.co.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/drivers/dt9812.c b/drivers/staging/comedi/drivers/dt9812.c
index 7fb90a7c0234..965e96ddb8d1 100644
--- a/drivers/staging/comedi/drivers/dt9812.c
+++ b/drivers/staging/comedi/drivers/dt9812.c
@@ -446,10 +446,14 @@ static int dt9812_digital_out_shadow(struct comedi_device *dev, u8 *bits)
 	return ret;
 }
 
-static void dt9812_configure_mux(struct usb_dt9812 *dev,
+static void dt9812_configure_mux(struct comedi_device *dev,
 				 struct dt9812_rmw_byte *rmw, int channel)
 {
-	if (dev->device == DT9812_DEVID_DT9812_10) {
+	struct dt9812_private *devpriv = dev->private;
+	struct slot_dt9812 *slot = devpriv->slot;
+	struct usb_dt9812 *usb = slot->usb;
+
+	if (usb->device == DT9812_DEVID_DT9812_10) {
 		/* In the DT9812/10V MUX is selected by P1.5-7 */
 		rmw->address = F020_SFR_P1;
 		rmw->and_mask = 0xe0;
@@ -536,7 +540,7 @@ static int dt9812_analog_in(struct comedi_device *dev,
 	dt9812_configure_gain(dev, &rmw[0], gain);
 
 	/* 2 set the MUX to select the channel */
-	dt9812_configure_mux(slot->usb, &rmw[1], channel);
+	dt9812_configure_mux(dev, &rmw[1], channel);
 
 	/* 3 start conversion */
 	rmw[2].address = F020_SFR_ADC0CN;

commit be8f16de76cdc6440c420b90f3fab768ac50a7a5
Author: H Hartley Sweeten <hsweeten@visionengravers.com>
Date:   Tue May 14 14:25:42 2013 -0700

    staging: comedi: dt9812: pass the comedi_device * to dt9812_configure_gain()
    
    For aesthetic reasons, instead of passing the struct usb_dt9812 pointer,
    pass the comedi_device pointer to this function.
    
    Tidy up the function and use the comedi_device class_dev for the
    dev_err() message.
    
    Signed-off-by: H Hartley Sweeten <hsweeten@visionengravers.com>
    Cc: Ian Abbott <abbotti@mev.co.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/drivers/dt9812.c b/drivers/staging/comedi/drivers/dt9812.c
index a0f9d803b263..7fb90a7c0234 100644
--- a/drivers/staging/comedi/drivers/dt9812.c
+++ b/drivers/staging/comedi/drivers/dt9812.c
@@ -462,18 +462,23 @@ static void dt9812_configure_mux(struct usb_dt9812 *dev,
 	}
 }
 
-static void dt9812_configure_gain(struct usb_dt9812 *dev,
+static void dt9812_configure_gain(struct comedi_device *dev,
 				  struct dt9812_rmw_byte *rmw,
 				  enum dt9812_gain gain)
 {
-	if (dev->device == DT9812_DEVID_DT9812_10) {
-		/* In the DT9812/10V, there is an external gain of 0.5 */
+	struct dt9812_private *devpriv = dev->private;
+	struct slot_dt9812 *slot = devpriv->slot;
+	struct usb_dt9812 *usb = slot->usb;
+
+	/* In the DT9812/10V, there is an external gain of 0.5 */
+	if (usb->device == DT9812_DEVID_DT9812_10)
 		gain <<= 1;
-	}
 
 	rmw->address = F020_SFR_ADC0CF;
 	rmw->and_mask = F020_MASK_ADC0CF_AMP0GN2 |
-	    F020_MASK_ADC0CF_AMP0GN1 | F020_MASK_ADC0CF_AMP0GN0;
+			F020_MASK_ADC0CF_AMP0GN1 |
+			F020_MASK_ADC0CF_AMP0GN0;
+
 	switch (gain) {
 		/*
 		 * 000 -> Gain =  1
@@ -485,7 +490,7 @@ static void dt9812_configure_gain(struct usb_dt9812 *dev,
 		 */
 	case DT9812_GAIN_0PT5:
 		rmw->or_value = F020_MASK_ADC0CF_AMP0GN2 |
-		    F020_MASK_ADC0CF_AMP0GN1;
+				F020_MASK_ADC0CF_AMP0GN1;
 		break;
 	case DT9812_GAIN_1:
 		rmw->or_value = 0x00;
@@ -498,14 +503,14 @@ static void dt9812_configure_gain(struct usb_dt9812 *dev,
 		break;
 	case DT9812_GAIN_8:
 		rmw->or_value = F020_MASK_ADC0CF_AMP0GN1 |
-		    F020_MASK_ADC0CF_AMP0GN0;
+				F020_MASK_ADC0CF_AMP0GN0;
 		break;
 	case DT9812_GAIN_16:
 		rmw->or_value = F020_MASK_ADC0CF_AMP0GN2;
 		break;
 	default:
-		dev_err(&dev->interface->dev, "Illegal gain %d\n", gain);
-
+		dev_err(dev->class_dev, "Illegal gain %d\n", gain);
+		break;
 	}
 }
 
@@ -528,7 +533,7 @@ static int dt9812_analog_in(struct comedi_device *dev,
 		goto exit;
 
 	/* 1 select the gain */
-	dt9812_configure_gain(slot->usb, &rmw[0], gain);
+	dt9812_configure_gain(dev, &rmw[0], gain);
 
 	/* 2 set the MUX to select the channel */
 	dt9812_configure_mux(slot->usb, &rmw[1], channel);

commit c13626a2467b153f0f499c30d85722725c129881
Author: H Hartley Sweeten <hsweeten@visionengravers.com>
Date:   Tue May 14 14:24:21 2013 -0700

    staging: comedi: dt9812: pass the comedi_device * to dt9812_analog_in()
    
    For aesthetic reasons, instead of passing the 'slot' pointer, pass the
    comedi_device pointer to this function and rename the local var 'result'
    to simply 'ret'.
    
    Signed-off-by: H Hartley Sweeten <hsweeten@visionengravers.com>
    Cc: Ian Abbott <abbotti@mev.co.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/drivers/dt9812.c b/drivers/staging/comedi/drivers/dt9812.c
index 59a2e9b4bd44..a0f9d803b263 100644
--- a/drivers/staging/comedi/drivers/dt9812.c
+++ b/drivers/staging/comedi/drivers/dt9812.c
@@ -509,9 +509,11 @@ static void dt9812_configure_gain(struct usb_dt9812 *dev,
 	}
 }
 
-static int dt9812_analog_in(struct slot_dt9812 *slot, int channel, u16 *value,
-			    enum dt9812_gain gain)
+static int dt9812_analog_in(struct comedi_device *dev,
+			    int channel, u16 *value, enum dt9812_gain gain)
 {
+	struct dt9812_private *devpriv = dev->private;
+	struct slot_dt9812 *slot = devpriv->slot;
 	struct dt9812_rmw_byte rmw[3];
 	u8 reg[3] = {
 		F020_SFR_ADC0CN,
@@ -519,7 +521,7 @@ static int dt9812_analog_in(struct slot_dt9812 *slot, int channel, u16 *value,
 		F020_SFR_ADC0L
 	};
 	u8 val[3];
-	int result = -ENODEV;
+	int ret = -ENODEV;
 
 	down(&slot->mutex);
 	if (!slot->usb)
@@ -536,14 +538,15 @@ static int dt9812_analog_in(struct slot_dt9812 *slot, int channel, u16 *value,
 	rmw[2].and_mask = 0xff;
 	rmw[2].or_value = F020_MASK_ADC0CN_AD0EN | F020_MASK_ADC0CN_AD0BUSY;
 
-	result = dt9812_rmw_multiple_registers(slot->usb, 3, rmw);
-	if (result)
+	ret = dt9812_rmw_multiple_registers(slot->usb, 3, rmw);
+	if (ret)
 		goto exit;
 
 	/* read the status and ADC */
-	result = dt9812_read_multiple_registers(slot->usb, 3, reg, val);
-	if (result)
+	ret = dt9812_read_multiple_registers(slot->usb, 3, reg, val);
+	if (ret)
 		goto exit;
+
 	/*
 	 * An ADC conversion takes 16 SAR clocks cycles, i.e. about 9us.
 	 * Therefore, between the instant that AD0BUSY was set via
@@ -572,7 +575,8 @@ static int dt9812_analog_in(struct slot_dt9812 *slot, int channel, u16 *value,
 
 exit:
 	up(&slot->mutex);
-	return result;
+
+	return ret;
 }
 
 static int dt9812_analog_out_shadow(struct slot_dt9812 *slot, int channel,
@@ -681,14 +685,13 @@ static int dt9812_ai_rinsn(struct comedi_device *dev,
 			   struct comedi_subdevice *s, struct comedi_insn *insn,
 			   unsigned int *data)
 {
-	struct dt9812_private *devpriv = dev->private;
 	unsigned int channel = CR_CHAN(insn->chanspec);
 	int n;
 
 	for (n = 0; n < insn->n; n++) {
 		u16 value = 0;
 
-		dt9812_analog_in(devpriv->slot, channel, &value, DT9812_GAIN_1);
+		dt9812_analog_in(dev, channel, &value, DT9812_GAIN_1);
 		data[n] = value;
 	}
 	return n;

commit 1c1f1d06a1ff6a2ab97cd849d7c0b4b613825fef
Author: H Hartley Sweeten <hsweeten@visionengravers.com>
Date:   Tue May 14 14:23:57 2013 -0700

    staging: comedi: dt9812: pass the comedi_device * to dt9812_digital_out_shadow()
    
    For aesthetic reasons, instead of passing the 'slot' pointer, pass the
    comedi_device pointer to this function and rename the local var 'result'
    to simply 'ret'.
    
    Signed-off-by: H Hartley Sweeten <hsweeten@visionengravers.com>
    Cc: Ian Abbott <abbotti@mev.co.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/drivers/dt9812.c b/drivers/staging/comedi/drivers/dt9812.c
index 96a1d860c1eb..59a2e9b4bd44 100644
--- a/drivers/staging/comedi/drivers/dt9812.c
+++ b/drivers/staging/comedi/drivers/dt9812.c
@@ -430,17 +430,20 @@ static int dt9812_digital_out(struct comedi_device *dev, u8 bits)
 	return ret;
 }
 
-static int dt9812_digital_out_shadow(struct slot_dt9812 *slot, u8 *bits)
+static int dt9812_digital_out_shadow(struct comedi_device *dev, u8 *bits)
 {
-	int result = -ENODEV;
+	struct dt9812_private *devpriv = dev->private;
+	struct slot_dt9812 *slot = devpriv->slot;
+	int ret = -ENODEV;
 
 	down(&slot->mutex);
 	if (slot->usb) {
 		*bits = slot->usb->digital_out_shadow;
-		result = 0;
+		ret = 0;
 	}
 	up(&slot->mutex);
-	return result;
+
+	return ret;
 }
 
 static void dt9812_configure_mux(struct usb_dt9812 *dev,
@@ -658,12 +661,11 @@ static int dt9812_do_winsn(struct comedi_device *dev,
 			   struct comedi_subdevice *s, struct comedi_insn *insn,
 			   unsigned int *data)
 {
-	struct dt9812_private *devpriv = dev->private;
 	unsigned int channel = CR_CHAN(insn->chanspec);
 	int n;
 	u8 bits = 0;
 
-	dt9812_digital_out_shadow(devpriv->slot, &bits);
+	dt9812_digital_out_shadow(dev, &bits);
 	for (n = 0; n < insn->n; n++) {
 		u8 mask = 1 << channel;
 

commit 51af6fa15e83f88fdd7de235db353f6a8b35513f
Author: H Hartley Sweeten <hsweeten@visionengravers.com>
Date:   Tue May 14 14:23:35 2013 -0700

    staging: comedi: dt9812: pass the comedi_device * to dt9812_digital_out()
    
    For aesthetic reasons, instead of passing the 'slot' pointer, pass the
    comedi_device pointer to this function and rename the local var 'result'
    to simply 'ret'.
    
    Also, initialize the 'reg', and 'value' when they are declared.
    
    Signed-off-by: H Hartley Sweeten <hsweeten@visionengravers.com>
    Cc: Ian Abbott <abbotti@mev.co.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/drivers/dt9812.c b/drivers/staging/comedi/drivers/dt9812.c
index 8bd773a15496..96a1d860c1eb 100644
--- a/drivers/staging/comedi/drivers/dt9812.c
+++ b/drivers/staging/comedi/drivers/dt9812.c
@@ -411,23 +411,23 @@ static int dt9812_digital_in(struct comedi_device *dev, u8 *bits)
 	return ret;
 }
 
-static int dt9812_digital_out(struct slot_dt9812 *slot, u8 bits)
+static int dt9812_digital_out(struct comedi_device *dev, u8 bits)
 {
-	int result = -ENODEV;
+	struct dt9812_private *devpriv = dev->private;
+	struct slot_dt9812 *slot = devpriv->slot;
+	int ret = -ENODEV;
 
 	down(&slot->mutex);
 	if (slot->usb) {
-		u8 reg[1];
-		u8 value[1];
+		u8 reg[1] = { F020_SFR_P2 };
+		u8 value[1] = { bits };
 
-		reg[0] = F020_SFR_P2;
-		value[0] = bits;
-		result = dt9812_write_multiple_registers(slot->usb, 1, reg,
-							 value);
+		ret = dt9812_write_multiple_registers(slot->usb, 1, reg, value);
 		slot->usb->digital_out_shadow = bits;
 	}
 	up(&slot->mutex);
-	return result;
+
+	return ret;
 }
 
 static int dt9812_digital_out_shadow(struct slot_dt9812 *slot, u8 *bits)
@@ -671,7 +671,7 @@ static int dt9812_do_winsn(struct comedi_device *dev,
 		if (data[n])
 			bits |= mask;
 	}
-	dt9812_digital_out(devpriv->slot, bits);
+	dt9812_digital_out(dev, bits);
 	return n;
 }
 

commit 4bc839f25044f75d7b59d5481c404ce20563ef86
Author: H Hartley Sweeten <hsweeten@visionengravers.com>
Date:   Tue May 14 14:23:12 2013 -0700

    staging: comedi: dt9812: pass the comedi_device * to dt9812_digital_in()
    
    For aesthetic reasons, instead of passing the 'slot' pointer, pass the
    comedi_device pointer to this function and rename the local var 'result'
    to simply 'ret'.
    
    Remove the commented out printk().
    
    Signed-off-by: H Hartley Sweeten <hsweeten@visionengravers.com>
    Cc: Ian Abbott <abbotti@mev.co.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/drivers/dt9812.c b/drivers/staging/comedi/drivers/dt9812.c
index 17a738c86b88..8bd773a15496 100644
--- a/drivers/staging/comedi/drivers/dt9812.c
+++ b/drivers/staging/comedi/drivers/dt9812.c
@@ -385,31 +385,30 @@ static int dt9812_rmw_multiple_registers(struct usb_dt9812 *dev, int reg_count,
 			    &cmd, 32, &count, HZ * 1);
 }
 
-static int dt9812_digital_in(struct slot_dt9812 *slot, u8 *bits)
+static int dt9812_digital_in(struct comedi_device *dev, u8 *bits)
 {
-	int result = -ENODEV;
+	struct dt9812_private *devpriv = dev->private;
+	struct slot_dt9812 *slot = devpriv->slot;
+	int ret = -ENODEV;
 
 	down(&slot->mutex);
 	if (slot->usb) {
 		u8 reg[2] = { F020_SFR_P3, F020_SFR_P1 };
 		u8 value[2];
 
-		result = dt9812_read_multiple_registers(slot->usb, 2, reg,
-							value);
-		if (result == 0) {
+		ret = dt9812_read_multiple_registers(slot->usb, 2, reg, value);
+		if (ret == 0) {
 			/*
 			 * bits 0-6 in F020_SFR_P3 are bits 0-6 in the digital
 			 * input port bit 3 in F020_SFR_P1 is bit 7 in the
 			 * digital input port
 			 */
 			*bits = (value[0] & 0x7f) | ((value[1] & 0x08) << 4);
-			/* printk("%2.2x, %2.2x -> %2.2x\n",
-			   value[0], value[1], *bits); */
 		}
 	}
 	up(&slot->mutex);
 
-	return result;
+	return ret;
 }
 
 static int dt9812_digital_out(struct slot_dt9812 *slot, u8 bits)
@@ -645,12 +644,11 @@ static int dt9812_di_rinsn(struct comedi_device *dev,
 			   struct comedi_subdevice *s, struct comedi_insn *insn,
 			   unsigned int *data)
 {
-	struct dt9812_private *devpriv = dev->private;
 	unsigned int channel = CR_CHAN(insn->chanspec);
 	int n;
 	u8 bits = 0;
 
-	dt9812_digital_in(devpriv->slot, &bits);
+	dt9812_digital_in(dev, &bits);
 	for (n = 0; n < insn->n; n++)
 		data[n] = ((1 << channel) & bits) != 0;
 	return n;

commit 0ec77d3499b10c75b279080a79a79e35e51b70a6
Author: H Hartley Sweeten <hsweeten@visionengravers.com>
Date:   Tue May 14 14:22:39 2013 -0700

    staging: comedi: dt9812: tidy up usb_bulk_msg() calls
    
    To clarify the code, add a local variable for the struct usb_device
    pointer used in the usb_blk_msg() calls.
    
    It's not necessary to initialize the 'count' when writing to the
    usb device. The 'count' variable is used to get back the number
    of bytes actually sent.
    
    Just return the usb_blk_msg() result when it is the last operation
    in a function.
    
    Signed-off-by: H Hartley Sweeten <hsweeten@visionengravers.com>
    Cc: Ian Abbott <abbotti@mev.co.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/drivers/dt9812.c b/drivers/staging/comedi/drivers/dt9812.c
index b797517e2ddb..17a738c86b88 100644
--- a/drivers/staging/comedi/drivers/dt9812.c
+++ b/drivers/staging/comedi/drivers/dt9812.c
@@ -307,8 +307,9 @@ static void dt9812_delete(struct kref *kref)
 static int dt9812_read_info(struct usb_dt9812 *dev, int offset, void *buf,
 			    size_t buf_size)
 {
+	struct usb_device *usb = dev->udev;
 	struct dt9812_usb_cmd cmd;
-	int count, retval;
+	int count, ret;
 
 	cmd.cmd = cpu_to_le32(DT9812_R_FLASH_DATA);
 	cmd.u.flash_data_info.address =
@@ -316,25 +317,21 @@ static int dt9812_read_info(struct usb_dt9812 *dev, int offset, void *buf,
 	cmd.u.flash_data_info.numbytes = cpu_to_le16(buf_size);
 
 	/* DT9812 only responds to 32 byte writes!! */
-	count = 32;
-	retval = usb_bulk_msg(dev->udev,
-			      usb_sndbulkpipe(dev->udev,
-					      dev->command_write.addr),
-			      &cmd, 32, &count, HZ * 1);
-	if (retval)
-		return retval;
-	retval = usb_bulk_msg(dev->udev,
-			      usb_rcvbulkpipe(dev->udev,
-					      dev->command_read.addr),
-			      buf, buf_size, &count, HZ * 1);
-	return retval;
+	ret = usb_bulk_msg(usb, usb_sndbulkpipe(usb, dev->command_write.addr),
+			   &cmd, 32, &count, HZ * 1);
+	if (ret)
+		return ret;
+
+	return usb_bulk_msg(usb, usb_rcvbulkpipe(usb, dev->command_read.addr),
+			    buf, buf_size, &count, HZ * 1);
 }
 
 static int dt9812_read_multiple_registers(struct usb_dt9812 *dev, int reg_count,
 					  u8 *address, u8 *value)
 {
+	struct usb_device *usb = dev->udev;
 	struct dt9812_usb_cmd cmd;
-	int i, count, retval;
+	int i, count, ret;
 
 	cmd.cmd = cpu_to_le32(DT9812_R_MULTI_BYTE_REG);
 	cmd.u.read_multi_info.count = reg_count;
@@ -342,26 +339,22 @@ static int dt9812_read_multiple_registers(struct usb_dt9812 *dev, int reg_count,
 		cmd.u.read_multi_info.address[i] = address[i];
 
 	/* DT9812 only responds to 32 byte writes!! */
-	count = 32;
-	retval = usb_bulk_msg(dev->udev,
-			      usb_sndbulkpipe(dev->udev,
-					      dev->command_write.addr),
-			      &cmd, 32, &count, HZ * 1);
-	if (retval)
-		return retval;
-	retval = usb_bulk_msg(dev->udev,
-			      usb_rcvbulkpipe(dev->udev,
-					      dev->command_read.addr),
-			      value, reg_count, &count, HZ * 1);
-	return retval;
+	ret = usb_bulk_msg(usb, usb_sndbulkpipe(usb, dev->command_write.addr),
+			   &cmd, 32, &count, HZ * 1);
+	if (ret)
+		return ret;
+
+	return usb_bulk_msg(usb, usb_rcvbulkpipe(usb, dev->command_read.addr),
+			    value, reg_count, &count, HZ * 1);
 }
 
 static int dt9812_write_multiple_registers(struct usb_dt9812 *dev,
 					   int reg_count, u8 *address,
 					   u8 *value)
 {
+	struct usb_device *usb = dev->udev;
 	struct dt9812_usb_cmd cmd;
-	int i, count, retval;
+	int i, count;
 
 	cmd.cmd = cpu_to_le32(DT9812_W_MULTI_BYTE_REG);
 	cmd.u.read_multi_info.count = reg_count;
@@ -369,19 +362,18 @@ static int dt9812_write_multiple_registers(struct usb_dt9812 *dev,
 		cmd.u.write_multi_info.write[i].address = address[i];
 		cmd.u.write_multi_info.write[i].value = value[i];
 	}
+
 	/* DT9812 only responds to 32 byte writes!! */
-	retval = usb_bulk_msg(dev->udev,
-			      usb_sndbulkpipe(dev->udev,
-					      dev->command_write.addr),
-			      &cmd, 32, &count, HZ * 1);
-	return retval;
+	return usb_bulk_msg(usb, usb_sndbulkpipe(usb, dev->command_write.addr),
+			    &cmd, 32, &count, HZ * 1);
 }
 
 static int dt9812_rmw_multiple_registers(struct usb_dt9812 *dev, int reg_count,
 					 struct dt9812_rmw_byte *rmw)
 {
+	struct usb_device *usb = dev->udev;
 	struct dt9812_usb_cmd cmd;
-	int i, count, retval;
+	int i, count;
 
 	cmd.cmd = cpu_to_le32(DT9812_RMW_MULTI_BYTE_REG);
 	cmd.u.rmw_multi_info.count = reg_count;
@@ -389,11 +381,8 @@ static int dt9812_rmw_multiple_registers(struct usb_dt9812 *dev, int reg_count,
 		cmd.u.rmw_multi_info.rmw[i] = rmw[i];
 
 	/* DT9812 only responds to 32 byte writes!! */
-	retval = usb_bulk_msg(dev->udev,
-			      usb_sndbulkpipe(dev->udev,
-					      dev->command_write.addr),
-			      &cmd, 32, &count, HZ * 1);
-	return retval;
+	return usb_bulk_msg(usb, usb_sndbulkpipe(usb, dev->command_write.addr),
+			    &cmd, 32, &count, HZ * 1);
 }
 
 static int dt9812_digital_in(struct slot_dt9812 *slot, u8 *bits)

commit 1415003fe6015575ed00f85bacd948b93d7ca78c
Author: H Hartley Sweeten <hsweeten@visionengravers.com>
Date:   Tue May 14 14:22:11 2013 -0700

    staging: comedi: dt9812: remove attaching by serial number
    
    Currently this driver supports attaching 16 usb devices to 16
    comedi devices. The user can pass the 32-bit serial number of
    the usb device when attaching to force a comedi device to attach
    to a specific usb device.
    
    It's also possible to attach a comedi device without having an
    attached usb device. When the device is first opened the
    comedi_device (*open) function in this driver then checks to
    see if a usb device has been attached. If so the subdevice
    information is updated based on the usb device and the comedi
    device is then operational. If a usb device is not attached
    the (*open) returns -ENODEV.
    
    To simplify converting this driver to the comedi (*auto_attach)
    mechanism, remove the attaching by serial number option.
    
    Modify the usb (*probe) so that the first available slot is used.
    If all the slots are used return -ENODEV.
    
    Modify the comedi (*attach) so that the first unused slot that
    has an attached usb device is used. If all the slots are used
    return -ENODEV.
    
    Since this ensures that the comedi device has an attached usb
    device, remove the (*open) function and fully initialize the
    subdevices during the (*attach).
    
    Fix the comedi (*detach) so that the slot is made available
    after detaching.
    
    Signed-off-by: H Hartley Sweeten <hsweeten@visionengravers.com>
    Cc: Ian Abbott <abbotti@mev.co.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/drivers/dt9812.c b/drivers/staging/comedi/drivers/dt9812.c
index 1fda98cc6ad8..b797517e2ddb 100644
--- a/drivers/staging/comedi/drivers/dt9812.c
+++ b/drivers/staging/comedi/drivers/dt9812.c
@@ -281,12 +281,10 @@ struct usb_dt9812 {
 
 struct dt9812_private {
 	struct slot_dt9812 *slot;
-	u32 serial;
 };
 
 struct slot_dt9812 {
 	struct semaphore mutex;
-	u32 serial;
 	struct usb_dt9812 *usb;
 	struct dt9812_private *devpriv;
 };
@@ -654,63 +652,6 @@ static int dt9812_analog_out(struct slot_dt9812 *slot, int channel, u16 value)
 	return result;
 }
 
-/*
- * Comedi functions
- */
-
-static int dt9812_comedi_open(struct comedi_device *dev)
-{
-	struct dt9812_private *devpriv = dev->private;
-	int result = -ENODEV;
-
-	down(&devpriv->slot->mutex);
-	if (devpriv->slot->usb) {
-		/* We have an attached device, fill in current range info */
-		struct comedi_subdevice *s;
-
-		s = &dev->subdevices[0];
-		s->n_chan = 8;
-		s->maxdata = 1;
-
-		s = &dev->subdevices[1];
-		s->n_chan = 8;
-		s->maxdata = 1;
-
-		s = &dev->subdevices[2];
-		s->n_chan = 8;
-		switch (devpriv->slot->usb->device) {
-		case 0:{
-				s->maxdata = 4095;
-				s->range_table = &range_bipolar10;
-			}
-			break;
-		case 1:{
-				s->maxdata = 4095;
-				s->range_table = &range_unipolar2_5;
-			}
-			break;
-		}
-
-		s = &dev->subdevices[3];
-		s->n_chan = 2;
-		switch (devpriv->slot->usb->device) {
-		case 0:{
-				s->maxdata = 4095;
-				s->range_table = &range_bipolar10;
-			}
-			break;
-		case 1:{
-				s->maxdata = 4095;
-				s->range_table = &range_unipolar2_5;
-			}
-			break;
-		}
-		result = 0;
-	}
-	up(&devpriv->slot->mutex);
-	return result;
-}
-
 static int dt9812_di_rinsn(struct comedi_device *dev,
 			   struct comedi_subdevice *s, struct comedi_insn *insn,
 			   unsigned int *data)
@@ -796,9 +737,11 @@ static int dt9812_ao_winsn(struct comedi_device *dev,
 
 static int dt9812_attach(struct comedi_device *dev, struct comedi_devconfig *it)
 {
+	struct slot_dt9812 *slot = NULL;
 	struct dt9812_private *devpriv;
 	int i;
 	struct comedi_subdevice *s;
+	bool range_2_5;
 	int ret;
 
 	devpriv = kzalloc(sizeof(*devpriv), GFP_KERNEL);
@@ -806,13 +749,30 @@ static int dt9812_attach(struct comedi_device *dev, struct comedi_devconfig *it)
 		return -ENOMEM;
 	dev->private = devpriv;
 
+	down(&dt9812_mutex);
+
 	/*
-	 * Special open routine, since USB unit may be unattached at
-	 * comedi_config time, hence range can not be determined
+	 * Find the first unused slot for the comedi device
+	 * that has a usb device connected.
 	 */
-	dev->open = dt9812_comedi_open;
+	for (i = 0; i < DT9812_NUM_SLOTS; i++) {
+		if (dt9812[i].usb && !dt9812[i].devpriv) {
+			slot = &dt9812[i];
+			break;
+		}
+	}
+	if (!slot) {
+		up(&dt9812_mutex);
+		return -ENODEV;
+	}
 
-	devpriv->serial = it->options[0];
+	down(&slot->mutex);
+	slot->devpriv = devpriv;
+	devpriv->slot = slot;
+	range_2_5 = (slot->usb->device == DT9812_DEVID_DT9812_2PT5);
+	up(&slot->mutex);
+
+	up(&dt9812_mutex);
 
 	ret = comedi_alloc_subdevices(dev, 4);
 	if (ret)
@@ -822,7 +782,7 @@ static int dt9812_attach(struct comedi_device *dev, struct comedi_devconfig *it)
 	s = &dev->subdevices[0];
 	s->type = COMEDI_SUBD_DI;
 	s->subdev_flags = SDF_READABLE;
-	s->n_chan = 0;
+	s->n_chan = 8;
 	s->maxdata = 1;
 	s->range_table = &range_digital;
 	s->insn_read = &dt9812_di_rinsn;
@@ -831,7 +791,7 @@ static int dt9812_attach(struct comedi_device *dev, struct comedi_devconfig *it)
 	s = &dev->subdevices[1];
 	s->type = COMEDI_SUBD_DO;
 	s->subdev_flags = SDF_WRITEABLE;
-	s->n_chan = 0;
+	s->n_chan = 8;
 	s->maxdata = 1;
 	s->range_table = &range_digital;
 	s->insn_write = &dt9812_do_winsn;
@@ -840,9 +800,9 @@ static int dt9812_attach(struct comedi_device *dev, struct comedi_devconfig *it)
 	s = &dev->subdevices[2];
 	s->type = COMEDI_SUBD_AI;
 	s->subdev_flags = SDF_READABLE | SDF_GROUND;
-	s->n_chan = 0;
-	s->maxdata = 1;
-	s->range_table = NULL;
+	s->n_chan = 8;
+	s->maxdata = 4095;
+	s->range_table = range_2_5 ? &range_unipolar2_5 : &range_bipolar10;
 	s->insn_read = &dt9812_ai_rinsn;
 
 	/* analog output subdevice */
@@ -850,48 +810,22 @@ static int dt9812_attach(struct comedi_device *dev, struct comedi_devconfig *it)
 	s->type = COMEDI_SUBD_AO;
 	s->subdev_flags = SDF_WRITEABLE;
 	s->n_chan = 0;
-	s->maxdata = 1;
-	s->range_table = NULL;
+	s->maxdata = 4095;
+	s->range_table = range_2_5 ? &range_unipolar2_5 : &range_bipolar10;
 	s->insn_write = &dt9812_ao_winsn;
 	s->insn_read = &dt9812_ao_rinsn;
 
 	dev_info(dev->class_dev, "successfully attached to dt9812.\n");
 
-	down(&dt9812_mutex);
-	/* Find a slot for the comedi device */
-	{
-		struct slot_dt9812 *first = NULL;
-		struct slot_dt9812 *best = NULL;
-		for (i = 0; i < DT9812_NUM_SLOTS; i++) {
-			if (!first && !dt9812[i].devpriv) {
-				/* First free slot from comedi side */
-				first = &dt9812[i];
-			}
-			if (!best &&
-			    dt9812[i].usb &&
-			    dt9812[i].usb->serial == devpriv->serial) {
-				/* We have an attaced device with matching ID */
-				best = &dt9812[i];
-			}
-		}
-		if (!best)
-			best = first;
-		if (best) {
-			down(&best->mutex);
-			best->devpriv = devpriv;
-			best->serial = devpriv->serial;
-			devpriv->slot = best;
-			up(&best->mutex);
-		}
-	}
-	up(&dt9812_mutex);
-
 	return 0;
 }
 
 static void dt9812_detach(struct comedi_device *dev)
 {
-	/* Nothing to cleanup */
+	struct dt9812_private *devpriv = dev->private;
+
+	if (devpriv && devpriv->slot)
+		devpriv->slot = NULL;
 }
 
 static struct comedi_driver dt9812_comedi_driver = {
@@ -904,10 +838,11 @@ static struct comedi_driver dt9812_comedi_driver = {
 static int dt9812_probe(struct usb_interface *interface,
 			const struct usb_device_id *id)
 {
-	int retval = -ENOMEM;
+	struct slot_dt9812 *slot = NULL;
 	struct usb_dt9812 *dev = NULL;
 	struct usb_host_interface *iface_desc;
 	struct usb_endpoint_descriptor *endpoint;
+	int retval = -ENOMEM;
 	int i;
 	u8 fw;
 
@@ -918,6 +853,28 @@ static int dt9812_probe(struct usb_interface *interface,
 
 	kref_init(&dev->kref);
 
+	down(&dt9812_mutex);
+
+	/* Find an empty slot for the usb device */
+	for (i = 0; i < DT9812_NUM_SLOTS; i++) {
+		if (!dt9812[i].usb) {
+			slot = &dt9812[i];
+			break;
+		}
+	}
+	if (!slot) {
+		up(&dt9812_mutex);
+		retval = -ENODEV;
+		goto error;
+	}
+
+	down(&slot->mutex);
+	slot->usb = dev;
+	dev->slot = slot;
+	up(&slot->mutex);
+
+	up(&dt9812_mutex);
+
 	dev->udev = usb_get_dev(interface_to_usbdev(interface));
 	dev->interface = interface;
 
@@ -1034,31 +991,6 @@ static int dt9812_probe(struct usb_interface *interface,
 	dev_info(&interface->dev, "USB DT9812 (%4.4x.%4.4x.%4.4x) #0x%8.8x\n",
 		 dev->vendor, dev->product, dev->device, dev->serial);
 
-	down(&dt9812_mutex);
-	{
-		/* Find a slot for the USB device */
-		struct slot_dt9812 *first = NULL;
-		struct slot_dt9812 *best = NULL;
-
-		for (i = 0; i < DT9812_NUM_SLOTS; i++) {
-			if (!first && !dt9812[i].usb && dt9812[i].serial == 0)
-				first = &dt9812[i];
-			if (!best && dt9812[i].serial == dev->serial)
-				best = &dt9812[i];
-		}
-
-		if (!best)
-			best = first;
-
-		if (best) {
-			down(&best->mutex);
-			best->usb = dev;
-			dev->slot = best;
-			up(&best->mutex);
-		}
-	}
-	up(&dt9812_mutex);
-
 	return 0;
 
 error:
@@ -1109,11 +1041,9 @@ static int __init usb_dt9812_init(void)
 	/* Initialize all driver slots */
 	for (i = 0; i < DT9812_NUM_SLOTS; i++) {
 		sema_init(&dt9812[i].mutex, 1);
-		dt9812[i].serial = 0;
 		dt9812[i].usb = NULL;
 		dt9812[i].devpriv = NULL;
 	}
-	dt9812[12].serial = 0x0;
 
 	return comedi_usb_driver_register(&dt9812_comedi_driver,
 						&dt9812_usb_driver);

commit 98c83cfac3a6c410497ac16a88e1424e0a57e265
Author: H Hartley Sweeten <hsweeten@visionengravers.com>
Date:   Tue May 14 14:21:39 2013 -0700

    staging: comedi: dt9812: rename 'comedi' variable in struct slot_dt9812
    
    Because of the usb (*probe) and comedi (*attach) disconnect, the struct
    slot_dt9812 is used to pass the device data between the usb_driver and
    the comedi_driver. The variable 'comedi' in this struct is used during
    the comedi (*attach) to indicate if a slot is currently being used.
    
    For aesthetic reasons, rename the variable to 'devpriv' since that is
    what is actually saved in the pointer.
    
    Signed-off-by: H Hartley Sweeten <hsweeten@visionengravers.com>
    Cc: Ian Abbott <abbotti@mev.co.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/drivers/dt9812.c b/drivers/staging/comedi/drivers/dt9812.c
index 316843d5d6b4..1fda98cc6ad8 100644
--- a/drivers/staging/comedi/drivers/dt9812.c
+++ b/drivers/staging/comedi/drivers/dt9812.c
@@ -288,7 +288,7 @@ struct slot_dt9812 {
 	struct semaphore mutex;
 	u32 serial;
 	struct usb_dt9812 *usb;
-	struct dt9812_private *comedi;
+	struct dt9812_private *devpriv;
 };
 
 static struct slot_dt9812 dt9812[DT9812_NUM_SLOTS];
@@ -863,7 +863,7 @@ static int dt9812_attach(struct comedi_device *dev, struct comedi_devconfig *it)
 		struct slot_dt9812 *first = NULL;
 		struct slot_dt9812 *best = NULL;
 		for (i = 0; i < DT9812_NUM_SLOTS; i++) {
-			if (!first && !dt9812[i].comedi) {
+			if (!first && !dt9812[i].devpriv) {
 				/* First free slot from comedi side */
 				first = &dt9812[i];
 			}
@@ -878,7 +878,7 @@ static int dt9812_attach(struct comedi_device *dev, struct comedi_devconfig *it)
 			best = first;
 		if (best) {
 			down(&best->mutex);
-			best->comedi = devpriv;
+			best->devpriv = devpriv;
 			best->serial = devpriv->serial;
 			devpriv->slot = best;
 			up(&best->mutex);
@@ -1111,7 +1111,7 @@ static int __init usb_dt9812_init(void)
 		sema_init(&dt9812[i].mutex, 1);
 		dt9812[i].serial = 0;
 		dt9812[i].usb = NULL;
-		dt9812[i].comedi = NULL;
+		dt9812[i].devpriv = NULL;
 	}
 	dt9812[12].serial = 0x0;
 

commit 415227c130db90d5b3db8aff5782af21deba78c5
Author: H Hartley Sweeten <hsweeten@visionengravers.com>
Date:   Tue May 14 14:21:08 2013 -0700

    staging: comedi: dt9812: rename the private data struct
    
    The comedi private data (dev->private) for this driver is stored
    in a 'struct comedi_dt9812' that is allocated during the comedi
    (*attach).
    
    For aesthetic reasons, rename this struct to help make its use
    clearer.
    
    Signed-off-by: H Hartley Sweeten <hsweeten@visionengravers.com>
    Cc: Ian Abbott <abbotti@mev.co.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/drivers/dt9812.c b/drivers/staging/comedi/drivers/dt9812.c
index f187925a180a..316843d5d6b4 100644
--- a/drivers/staging/comedi/drivers/dt9812.c
+++ b/drivers/staging/comedi/drivers/dt9812.c
@@ -279,7 +279,7 @@ struct usb_dt9812 {
 	u8 digital_out_shadow;
 };
 
-struct comedi_dt9812 {
+struct dt9812_private {
 	struct slot_dt9812 *slot;
 	u32 serial;
 };
@@ -288,7 +288,7 @@ struct slot_dt9812 {
 	struct semaphore mutex;
 	u32 serial;
 	struct usb_dt9812 *usb;
-	struct comedi_dt9812 *comedi;
+	struct dt9812_private *comedi;
 };
 
 static struct slot_dt9812 dt9812[DT9812_NUM_SLOTS];
@@ -660,7 +660,7 @@ static int dt9812_analog_out(struct slot_dt9812 *slot, int channel, u16 value)
 
 static int dt9812_comedi_open(struct comedi_device *dev)
 {
-	struct comedi_dt9812 *devpriv = dev->private;
+	struct dt9812_private *devpriv = dev->private;
 	int result = -ENODEV;
 
 	down(&devpriv->slot->mutex);
@@ -715,7 +715,7 @@ static int dt9812_di_rinsn(struct comedi_device *dev,
 			   struct comedi_subdevice *s, struct comedi_insn *insn,
 			   unsigned int *data)
 {
-	struct comedi_dt9812 *devpriv = dev->private;
+	struct dt9812_private *devpriv = dev->private;
 	unsigned int channel = CR_CHAN(insn->chanspec);
 	int n;
 	u8 bits = 0;
@@ -730,7 +730,7 @@ static int dt9812_do_winsn(struct comedi_device *dev,
 			   struct comedi_subdevice *s, struct comedi_insn *insn,
 			   unsigned int *data)
 {
-	struct comedi_dt9812 *devpriv = dev->private;
+	struct dt9812_private *devpriv = dev->private;
 	unsigned int channel = CR_CHAN(insn->chanspec);
 	int n;
 	u8 bits = 0;
@@ -751,7 +751,7 @@ static int dt9812_ai_rinsn(struct comedi_device *dev,
 			   struct comedi_subdevice *s, struct comedi_insn *insn,
 			   unsigned int *data)
 {
-	struct comedi_dt9812 *devpriv = dev->private;
+	struct dt9812_private *devpriv = dev->private;
 	unsigned int channel = CR_CHAN(insn->chanspec);
 	int n;
 
@@ -768,7 +768,7 @@ static int dt9812_ao_rinsn(struct comedi_device *dev,
 			   struct comedi_subdevice *s, struct comedi_insn *insn,
 			   unsigned int *data)
 {
-	struct comedi_dt9812 *devpriv = dev->private;
+	struct dt9812_private *devpriv = dev->private;
 	unsigned int channel = CR_CHAN(insn->chanspec);
 	int n;
 	u16 value;
@@ -785,7 +785,7 @@ static int dt9812_ao_winsn(struct comedi_device *dev,
 			   struct comedi_subdevice *s, struct comedi_insn *insn,
 			   unsigned int *data)
 {
-	struct comedi_dt9812 *devpriv = dev->private;
+	struct dt9812_private *devpriv = dev->private;
 	unsigned int channel = CR_CHAN(insn->chanspec);
 	int n;
 
@@ -796,7 +796,7 @@ static int dt9812_ao_winsn(struct comedi_device *dev,
 
 static int dt9812_attach(struct comedi_device *dev, struct comedi_devconfig *it)
 {
-	struct comedi_dt9812 *devpriv;
+	struct dt9812_private *devpriv;
 	int i;
 	struct comedi_subdevice *s;
 	int ret;

commit df785c7a1cc478ee16ce3fe2008fda5a55dfe801
Author: H Hartley Sweeten <hsweeten@visionengravers.com>
Date:   Tue May 14 14:20:43 2013 -0700

    staging: comedi: dt9812: move the usb framework functions to EOF
    
    In preparation of converting this manually attached comedi driver
    into an auto attached comedi usb driver, move the usb framework
    functions to the end of the file.
    
    Signed-off-by: H Hartley Sweeten <hsweeten@visionengravers.com>
    Cc: Ian Abbott <abbotti@mev.co.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/drivers/dt9812.c b/drivers/staging/comedi/drivers/dt9812.c
index 6d9bf254d7ed..f187925a180a 100644
--- a/drivers/staging/comedi/drivers/dt9812.c
+++ b/drivers/staging/comedi/drivers/dt9812.c
@@ -262,13 +262,6 @@ struct dt9812_usb_cmd {
 
 static DEFINE_SEMAPHORE(dt9812_mutex);
 
-static const struct usb_device_id dt9812_table[] = {
-	{USB_DEVICE(0x0867, 0x9812)},
-	{}			/* Terminating entry */
-};
-
-MODULE_DEVICE_TABLE(usb, dt9812_table);
-
 struct usb_dt9812 {
 	struct slot_dt9812 *slot;
 	struct usb_device *udev;
@@ -661,205 +654,6 @@ static int dt9812_analog_out(struct slot_dt9812 *slot, int channel, u16 value)
 	return result;
 }
 
-/*
- * USB framework functions
- */
-
-static int dt9812_probe(struct usb_interface *interface,
-			const struct usb_device_id *id)
-{
-	int retval = -ENOMEM;
-	struct usb_dt9812 *dev = NULL;
-	struct usb_host_interface *iface_desc;
-	struct usb_endpoint_descriptor *endpoint;
-	int i;
-	u8 fw;
-
-	/* allocate memory for our device state and initialize it */
-	dev = kzalloc(sizeof(*dev), GFP_KERNEL);
-	if (dev == NULL)
-		goto error;
-
-	kref_init(&dev->kref);
-
-	dev->udev = usb_get_dev(interface_to_usbdev(interface));
-	dev->interface = interface;
-
-	/* Check endpoints */
-	iface_desc = interface->cur_altsetting;
-
-	if (iface_desc->desc.bNumEndpoints != 5) {
-		dev_err(&interface->dev, "Wrong number of endpoints.\n");
-		retval = -ENODEV;
-		goto error;
-	}
-
-	for (i = 0; i < iface_desc->desc.bNumEndpoints; ++i) {
-		int direction = -1;
-		endpoint = &iface_desc->endpoint[i].desc;
-		switch (i) {
-		case 0:
-			direction = USB_DIR_IN;
-			dev->message_pipe.addr = endpoint->bEndpointAddress;
-			dev->message_pipe.size =
-			    le16_to_cpu(endpoint->wMaxPacketSize);
-
-			break;
-		case 1:
-			direction = USB_DIR_OUT;
-			dev->command_write.addr = endpoint->bEndpointAddress;
-			dev->command_write.size =
-			    le16_to_cpu(endpoint->wMaxPacketSize);
-			break;
-		case 2:
-			direction = USB_DIR_IN;
-			dev->command_read.addr = endpoint->bEndpointAddress;
-			dev->command_read.size =
-			    le16_to_cpu(endpoint->wMaxPacketSize);
-			break;
-		case 3:
-			direction = USB_DIR_OUT;
-			dev->write_stream.addr = endpoint->bEndpointAddress;
-			dev->write_stream.size =
-			    le16_to_cpu(endpoint->wMaxPacketSize);
-			break;
-		case 4:
-			direction = USB_DIR_IN;
-			dev->read_stream.addr = endpoint->bEndpointAddress;
-			dev->read_stream.size =
-			    le16_to_cpu(endpoint->wMaxPacketSize);
-			break;
-		}
-		if ((endpoint->bEndpointAddress & USB_DIR_IN) != direction) {
-			dev_err(&interface->dev,
-				"Endpoint has wrong direction.\n");
-			retval = -ENODEV;
-			goto error;
-		}
-	}
-	if (dt9812_read_info(dev, 0, &fw, sizeof(fw)) != 0) {
-		/*
-		 * Seems like a configuration reset is necessary if driver is
-		 * reloaded while device is attached
-		 */
-		usb_reset_configuration(dev->udev);
-		for (i = 0; i < 10; i++) {
-			retval = dt9812_read_info(dev, 1, &fw, sizeof(fw));
-			if (retval == 0) {
-				dev_info(&interface->dev,
-					 "usb_reset_configuration succeeded "
-					 "after %d iterations\n", i);
-				break;
-			}
-		}
-	}
-
-	if (dt9812_read_info(dev, 1, &dev->vendor, sizeof(dev->vendor)) != 0) {
-		dev_err(&interface->dev, "Failed to read vendor.\n");
-		retval = -ENODEV;
-		goto error;
-	}
-	if (dt9812_read_info(dev, 3, &dev->product, sizeof(dev->product)) != 0) {
-		dev_err(&interface->dev, "Failed to read product.\n");
-		retval = -ENODEV;
-		goto error;
-	}
-	if (dt9812_read_info(dev, 5, &dev->device, sizeof(dev->device)) != 0) {
-		dev_err(&interface->dev, "Failed to read device.\n");
-		retval = -ENODEV;
-		goto error;
-	}
-	if (dt9812_read_info(dev, 7, &dev->serial, sizeof(dev->serial)) != 0) {
-		dev_err(&interface->dev, "Failed to read serial.\n");
-		retval = -ENODEV;
-		goto error;
-	}
-
-	dev->vendor = le16_to_cpu(dev->vendor);
-	dev->product = le16_to_cpu(dev->product);
-	dev->device = le16_to_cpu(dev->device);
-	dev->serial = le32_to_cpu(dev->serial);
-	switch (dev->device) {
-	case DT9812_DEVID_DT9812_10:
-		dev->analog_out_shadow[0] = 0x0800;
-		dev->analog_out_shadow[1] = 0x800;
-		break;
-	case DT9812_DEVID_DT9812_2PT5:
-		dev->analog_out_shadow[0] = 0x0000;
-		dev->analog_out_shadow[1] = 0x0000;
-		break;
-	}
-	dev->digital_out_shadow = 0;
-
-	/* save our data pointer in this interface device */
-	usb_set_intfdata(interface, dev);
-
-	/* let the user know what node this device is now attached to */
-	dev_info(&interface->dev, "USB DT9812 (%4.4x.%4.4x.%4.4x) #0x%8.8x\n",
-		 dev->vendor, dev->product, dev->device, dev->serial);
-
-	down(&dt9812_mutex);
-	{
-		/* Find a slot for the USB device */
-		struct slot_dt9812 *first = NULL;
-		struct slot_dt9812 *best = NULL;
-
-		for (i = 0; i < DT9812_NUM_SLOTS; i++) {
-			if (!first && !dt9812[i].usb && dt9812[i].serial == 0)
-				first = &dt9812[i];
-			if (!best && dt9812[i].serial == dev->serial)
-				best = &dt9812[i];
-		}
-
-		if (!best)
-			best = first;
-
-		if (best) {
-			down(&best->mutex);
-			best->usb = dev;
-			dev->slot = best;
-			up(&best->mutex);
-		}
-	}
-	up(&dt9812_mutex);
-
-	return 0;
-
-error:
-	if (dev)
-		kref_put(&dev->kref, dt9812_delete);
-	return retval;
-}
-
-static void dt9812_disconnect(struct usb_interface *interface)
-{
-	struct usb_dt9812 *dev;
-	int minor = interface->minor;
-
-	down(&dt9812_mutex);
-	dev = usb_get_intfdata(interface);
-	if (dev->slot) {
-		down(&dev->slot->mutex);
-		dev->slot->usb = NULL;
-		up(&dev->slot->mutex);
-		dev->slot = NULL;
-	}
-	usb_set_intfdata(interface, NULL);
-	up(&dt9812_mutex);
-
-	/* queue final destruction */
-	kref_put(&dev->kref, dt9812_delete);
-
-	dev_info(&interface->dev, "USB Dt9812 #%d now disconnected\n", minor);
-}
-
-static struct usb_driver dt9812_usb_driver = {
-	.name = "dt9812",
-	.probe = dt9812_probe,
-	.disconnect = dt9812_disconnect,
-	.id_table = dt9812_table,
-};
-
 /*
  * Comedi functions
  */
@@ -1107,6 +901,207 @@ static struct comedi_driver dt9812_comedi_driver = {
 	.detach = dt9812_detach,
 };
 
+static int dt9812_probe(struct usb_interface *interface,
+			const struct usb_device_id *id)
+{
+	int retval = -ENOMEM;
+	struct usb_dt9812 *dev = NULL;
+	struct usb_host_interface *iface_desc;
+	struct usb_endpoint_descriptor *endpoint;
+	int i;
+	u8 fw;
+
+	/* allocate memory for our device state and initialize it */
+	dev = kzalloc(sizeof(*dev), GFP_KERNEL);
+	if (dev == NULL)
+		goto error;
+
+	kref_init(&dev->kref);
+
+	dev->udev = usb_get_dev(interface_to_usbdev(interface));
+	dev->interface = interface;
+
+	/* Check endpoints */
+	iface_desc = interface->cur_altsetting;
+
+	if (iface_desc->desc.bNumEndpoints != 5) {
+		dev_err(&interface->dev, "Wrong number of endpoints.\n");
+		retval = -ENODEV;
+		goto error;
+	}
+
+	for (i = 0; i < iface_desc->desc.bNumEndpoints; ++i) {
+		int direction = -1;
+		endpoint = &iface_desc->endpoint[i].desc;
+		switch (i) {
+		case 0:
+			direction = USB_DIR_IN;
+			dev->message_pipe.addr = endpoint->bEndpointAddress;
+			dev->message_pipe.size =
+			    le16_to_cpu(endpoint->wMaxPacketSize);
+
+			break;
+		case 1:
+			direction = USB_DIR_OUT;
+			dev->command_write.addr = endpoint->bEndpointAddress;
+			dev->command_write.size =
+			    le16_to_cpu(endpoint->wMaxPacketSize);
+			break;
+		case 2:
+			direction = USB_DIR_IN;
+			dev->command_read.addr = endpoint->bEndpointAddress;
+			dev->command_read.size =
+			    le16_to_cpu(endpoint->wMaxPacketSize);
+			break;
+		case 3:
+			direction = USB_DIR_OUT;
+			dev->write_stream.addr = endpoint->bEndpointAddress;
+			dev->write_stream.size =
+			    le16_to_cpu(endpoint->wMaxPacketSize);
+			break;
+		case 4:
+			direction = USB_DIR_IN;
+			dev->read_stream.addr = endpoint->bEndpointAddress;
+			dev->read_stream.size =
+			    le16_to_cpu(endpoint->wMaxPacketSize);
+			break;
+		}
+		if ((endpoint->bEndpointAddress & USB_DIR_IN) != direction) {
+			dev_err(&interface->dev,
+				"Endpoint has wrong direction.\n");
+			retval = -ENODEV;
+			goto error;
+		}
+	}
+	if (dt9812_read_info(dev, 0, &fw, sizeof(fw)) != 0) {
+		/*
+		 * Seems like a configuration reset is necessary if driver is
+		 * reloaded while device is attached
+		 */
+		usb_reset_configuration(dev->udev);
+		for (i = 0; i < 10; i++) {
+			retval = dt9812_read_info(dev, 1, &fw, sizeof(fw));
+			if (retval == 0) {
+				dev_info(&interface->dev,
+					 "usb_reset_configuration succeeded "
+					 "after %d iterations\n", i);
+				break;
+			}
+		}
+	}
+
+	if (dt9812_read_info(dev, 1, &dev->vendor, sizeof(dev->vendor)) != 0) {
+		dev_err(&interface->dev, "Failed to read vendor.\n");
+		retval = -ENODEV;
+		goto error;
+	}
+	if (dt9812_read_info(dev, 3, &dev->product, sizeof(dev->product)) != 0) {
+		dev_err(&interface->dev, "Failed to read product.\n");
+		retval = -ENODEV;
+		goto error;
+	}
+	if (dt9812_read_info(dev, 5, &dev->device, sizeof(dev->device)) != 0) {
+		dev_err(&interface->dev, "Failed to read device.\n");
+		retval = -ENODEV;
+		goto error;
+	}
+	if (dt9812_read_info(dev, 7, &dev->serial, sizeof(dev->serial)) != 0) {
+		dev_err(&interface->dev, "Failed to read serial.\n");
+		retval = -ENODEV;
+		goto error;
+	}
+
+	dev->vendor = le16_to_cpu(dev->vendor);
+	dev->product = le16_to_cpu(dev->product);
+	dev->device = le16_to_cpu(dev->device);
+	dev->serial = le32_to_cpu(dev->serial);
+	switch (dev->device) {
+	case DT9812_DEVID_DT9812_10:
+		dev->analog_out_shadow[0] = 0x0800;
+		dev->analog_out_shadow[1] = 0x800;
+		break;
+	case DT9812_DEVID_DT9812_2PT5:
+		dev->analog_out_shadow[0] = 0x0000;
+		dev->analog_out_shadow[1] = 0x0000;
+		break;
+	}
+	dev->digital_out_shadow = 0;
+
+	/* save our data pointer in this interface device */
+	usb_set_intfdata(interface, dev);
+
+	/* let the user know what node this device is now attached to */
+	dev_info(&interface->dev, "USB DT9812 (%4.4x.%4.4x.%4.4x) #0x%8.8x\n",
+		 dev->vendor, dev->product, dev->device, dev->serial);
+
+	down(&dt9812_mutex);
+	{
+		/* Find a slot for the USB device */
+		struct slot_dt9812 *first = NULL;
+		struct slot_dt9812 *best = NULL;
+
+		for (i = 0; i < DT9812_NUM_SLOTS; i++) {
+			if (!first && !dt9812[i].usb && dt9812[i].serial == 0)
+				first = &dt9812[i];
+			if (!best && dt9812[i].serial == dev->serial)
+				best = &dt9812[i];
+		}
+
+		if (!best)
+			best = first;
+
+		if (best) {
+			down(&best->mutex);
+			best->usb = dev;
+			dev->slot = best;
+			up(&best->mutex);
+		}
+	}
+	up(&dt9812_mutex);
+
+	return 0;
+
+error:
+	if (dev)
+		kref_put(&dev->kref, dt9812_delete);
+	return retval;
+}
+
+static void dt9812_disconnect(struct usb_interface *interface)
+{
+	struct usb_dt9812 *dev;
+	int minor = interface->minor;
+
+	down(&dt9812_mutex);
+	dev = usb_get_intfdata(interface);
+	if (dev->slot) {
+		down(&dev->slot->mutex);
+		dev->slot->usb = NULL;
+		up(&dev->slot->mutex);
+		dev->slot = NULL;
+	}
+	usb_set_intfdata(interface, NULL);
+	up(&dt9812_mutex);
+
+	/* queue final destruction */
+	kref_put(&dev->kref, dt9812_delete);
+
+	dev_info(&interface->dev, "USB Dt9812 #%d now disconnected\n", minor);
+}
+
+static const struct usb_device_id dt9812_table[] = {
+	{ USB_DEVICE(0x0867, 0x9812) },
+	{ }
+};
+MODULE_DEVICE_TABLE(usb, dt9812_table);
+
+static struct usb_driver dt9812_usb_driver = {
+	.name		= "dt9812",
+	.id_table	= dt9812_table,
+	.probe		= dt9812_probe,
+	.disconnect	= dt9812_disconnect,
+};
+
 static int __init usb_dt9812_init(void)
 {
 	int i;

commit 641f064e5df6fb3aaeb6256031a153a5efb16ca6
Author: H Hartley Sweeten <hsweeten@visionengravers.com>
Date:   Wed Apr 24 18:13:24 2013 -0700

    staging: comedi: remove FSF address from boilerplate text
    
    Addresses change...
    
    Remove the paragraph with the FSF address from all the comedi source
    files.
    
    Also, remove the paragraph about the finding the complete GPL in the
    COPYING file since it's unnecessary.
    
    Signed-off-by: H Hartley Sweeten <hsweeten@visionengravers.com>
    Cc: Ian Abbott <abbotti@mev.co.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/drivers/dt9812.c b/drivers/staging/comedi/drivers/dt9812.c
index 81eb5ed6ec97..6d9bf254d7ed 100644
--- a/drivers/staging/comedi/drivers/dt9812.c
+++ b/drivers/staging/comedi/drivers/dt9812.c
@@ -15,11 +15,6 @@
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
- *
  */
 
 /*

commit 5993f3a2692eed3c74c86882155b8703a0060ad5
Author: H Hartley Sweeten <hsweeten@visionengravers.com>
Date:   Mon Apr 8 10:57:35 2013 -0700

    staging: comedi: remove unnecessary dev->board_name initialization
    
    The dev->board_name is now initialized by the comedi core before calling
    the(*attach) or (*auto_attach) function in a driver. As long as the driver
    does no additional probing, it's no longer necessary initialize the board_name.
    
    Signed-off-by: H Hartley Sweeten <hsweeten@visionengravers.com>
    Reviewed-by: Ian Abbott <abbotti@mev.co.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/drivers/dt9812.c b/drivers/staging/comedi/drivers/dt9812.c
index 9ca3488da4df..81eb5ed6ec97 100644
--- a/drivers/staging/comedi/drivers/dt9812.c
+++ b/drivers/staging/comedi/drivers/dt9812.c
@@ -1012,8 +1012,6 @@ static int dt9812_attach(struct comedi_device *dev, struct comedi_devconfig *it)
 	struct comedi_subdevice *s;
 	int ret;
 
-	dev->board_name = "dt9812";
-
 	devpriv = kzalloc(sizeof(*devpriv), GFP_KERNEL);
 	if (!devpriv)
 		return -ENOMEM;

commit 165f90ed3f56d9031a7b98a0b30f5a9d412a521f
Author: H Hartley Sweeten <hsweeten@visionengravers.com>
Date:   Wed Apr 3 13:38:54 2013 -0700

    staging: comedi: dt9812: use comedi provided range_unipolar2_5
    
    Remove the private ranges, dt9812_2pt5_a{in,out}_range, in this
    driver and use the comedi provided range_unipolar2_5 instead.
    
    Signed-off-by: H Hartley Sweeten <hsweeten@visionengravers.com>
    Cc: Ian Abbott <abbotti@mev.co.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/drivers/dt9812.c b/drivers/staging/comedi/drivers/dt9812.c
index 9a0fb0a0bd71..9ca3488da4df 100644
--- a/drivers/staging/comedi/drivers/dt9812.c
+++ b/drivers/staging/comedi/drivers/dt9812.c
@@ -303,16 +303,6 @@ struct slot_dt9812 {
 	struct comedi_dt9812 *comedi;
 };
 
-static const struct comedi_lrange dt9812_2pt5_ain_range = { 1, {
-								UNI_RANGE(2.5),
-								}
-};
-
-static const struct comedi_lrange dt9812_2pt5_aout_range = { 1, {
-								 UNI_RANGE(2.5),
-								 }
-};
-
 static struct slot_dt9812 dt9812[DT9812_NUM_SLOTS];
 
 static inline struct usb_dt9812 *to_dt9812_dev(struct kref *d)
@@ -907,7 +897,7 @@ static int dt9812_comedi_open(struct comedi_device *dev)
 			break;
 		case 1:{
 				s->maxdata = 4095;
-				s->range_table = &dt9812_2pt5_ain_range;
+				s->range_table = &range_unipolar2_5;
 			}
 			break;
 		}
@@ -922,7 +912,7 @@ static int dt9812_comedi_open(struct comedi_device *dev)
 			break;
 		case 1:{
 				s->maxdata = 4095;
-				s->range_table = &dt9812_2pt5_aout_range;
+				s->range_table = &range_unipolar2_5;
 			}
 			break;
 		}

commit ff0f7ad58fcd614b990d0ce649a918bfeb644cde
Author: H Hartley Sweeten <hsweeten@visionengravers.com>
Date:   Wed Apr 3 13:37:46 2013 -0700

    staging: comedi: dt9812: use comedi provided range_bipolar10
    
    Remove the private ranges, dt9812_10_a{in,out}_range, in this driver
    and use the comedi provided range_bipolar10 instead.
    
    Signed-off-by: H Hartley Sweeten <hsweeten@visionengravers.com>
    Cc: Ian Abbott <abbotti@mev.co.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/drivers/dt9812.c b/drivers/staging/comedi/drivers/dt9812.c
index 57b451904791..9a0fb0a0bd71 100644
--- a/drivers/staging/comedi/drivers/dt9812.c
+++ b/drivers/staging/comedi/drivers/dt9812.c
@@ -303,21 +303,11 @@ struct slot_dt9812 {
 	struct comedi_dt9812 *comedi;
 };
 
-static const struct comedi_lrange dt9812_10_ain_range = { 1, {
-							      BIP_RANGE(10),
-							      }
-};
-
 static const struct comedi_lrange dt9812_2pt5_ain_range = { 1, {
 								UNI_RANGE(2.5),
 								}
 };
 
-static const struct comedi_lrange dt9812_10_aout_range = { 1, {
-							       BIP_RANGE(10),
-							       }
-};
-
 static const struct comedi_lrange dt9812_2pt5_aout_range = { 1, {
 								 UNI_RANGE(2.5),
 								 }
@@ -912,7 +902,7 @@ static int dt9812_comedi_open(struct comedi_device *dev)
 		switch (devpriv->slot->usb->device) {
 		case 0:{
 				s->maxdata = 4095;
-				s->range_table = &dt9812_10_ain_range;
+				s->range_table = &range_bipolar10;
 			}
 			break;
 		case 1:{
@@ -927,7 +917,7 @@ static int dt9812_comedi_open(struct comedi_device *dev)
 		switch (devpriv->slot->usb->device) {
 		case 0:{
 				s->maxdata = 4095;
-				s->range_table = &dt9812_10_aout_range;
+				s->range_table = &range_bipolar10;
 			}
 			break;
 		case 1:{

commit 564c526a1bed5e42b5cd52cfe1752c4296ef17a6
Author: Ian Abbott <abbotti@mev.co.uk>
Date:   Tue Mar 5 13:13:44 2013 +0000

    staging: comedi: dt9812: use CR_CHAN() for channel number
    
    As pointed out by Dan Carpenper in
    <http://driverdev.linuxdriverproject.org/pipermail/devel/2013-February/036025.html>,
    the dt9812 comedi driver's use of the `chanspec` member of `struct
    comedi_insn` as a channel number is incorrect.  Change it to use
    `CR_CHAN(insn->chanspec)` as the channel number (where `insn` is a
    pointer to the `struct comedi_insn` being processed).
    
    Reported-by: Dan Carpenter <dan.carpenter@oracle.com>
    Cc: stable <stable@vger.kernel.org> # 3.8 onwards
    Cc: Anders Blomdell <anders.blomdell@control.lth.se>
    Signed-off-by: Ian Abbott <abbotti@mev.co.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/drivers/dt9812.c b/drivers/staging/comedi/drivers/dt9812.c
index 192cf088f834..57b451904791 100644
--- a/drivers/staging/comedi/drivers/dt9812.c
+++ b/drivers/staging/comedi/drivers/dt9812.c
@@ -947,12 +947,13 @@ static int dt9812_di_rinsn(struct comedi_device *dev,
 			   unsigned int *data)
 {
 	struct comedi_dt9812 *devpriv = dev->private;
+	unsigned int channel = CR_CHAN(insn->chanspec);
 	int n;
 	u8 bits = 0;
 
 	dt9812_digital_in(devpriv->slot, &bits);
 	for (n = 0; n < insn->n; n++)
-		data[n] = ((1 << insn->chanspec) & bits) != 0;
+		data[n] = ((1 << channel) & bits) != 0;
 	return n;
 }
 
@@ -961,12 +962,13 @@ static int dt9812_do_winsn(struct comedi_device *dev,
 			   unsigned int *data)
 {
 	struct comedi_dt9812 *devpriv = dev->private;
+	unsigned int channel = CR_CHAN(insn->chanspec);
 	int n;
 	u8 bits = 0;
 
 	dt9812_digital_out_shadow(devpriv->slot, &bits);
 	for (n = 0; n < insn->n; n++) {
-		u8 mask = 1 << insn->chanspec;
+		u8 mask = 1 << channel;
 
 		bits &= ~mask;
 		if (data[n])
@@ -981,13 +983,13 @@ static int dt9812_ai_rinsn(struct comedi_device *dev,
 			   unsigned int *data)
 {
 	struct comedi_dt9812 *devpriv = dev->private;
+	unsigned int channel = CR_CHAN(insn->chanspec);
 	int n;
 
 	for (n = 0; n < insn->n; n++) {
 		u16 value = 0;
 
-		dt9812_analog_in(devpriv->slot, insn->chanspec, &value,
-				 DT9812_GAIN_1);
+		dt9812_analog_in(devpriv->slot, channel, &value, DT9812_GAIN_1);
 		data[n] = value;
 	}
 	return n;
@@ -998,12 +1000,13 @@ static int dt9812_ao_rinsn(struct comedi_device *dev,
 			   unsigned int *data)
 {
 	struct comedi_dt9812 *devpriv = dev->private;
+	unsigned int channel = CR_CHAN(insn->chanspec);
 	int n;
 	u16 value;
 
 	for (n = 0; n < insn->n; n++) {
 		value = 0;
-		dt9812_analog_out_shadow(devpriv->slot, insn->chanspec, &value);
+		dt9812_analog_out_shadow(devpriv->slot, channel, &value);
 		data[n] = value;
 	}
 	return n;
@@ -1014,10 +1017,11 @@ static int dt9812_ao_winsn(struct comedi_device *dev,
 			   unsigned int *data)
 {
 	struct comedi_dt9812 *devpriv = dev->private;
+	unsigned int channel = CR_CHAN(insn->chanspec);
 	int n;
 
 	for (n = 0; n < insn->n; n++)
-		dt9812_analog_out(devpriv->slot, insn->chanspec, data[n]);
+		dt9812_analog_out(devpriv->slot, channel, data[n]);
 	return n;
 }
 

commit 78110bb8dc4a7ff331bfa3cfe7d4e287cfb3f22b
Author: Joe Perches <joe@perches.com>
Date:   Mon Feb 11 09:41:29 2013 -0800

    staging: Remove unnecessary OOM messages
    
    alloc failures already get standardized OOM
    messages and a dump_stack.
    
    For the affected mallocs around these OOM messages:
    
    Converted kzallocs with multiplies to kcalloc.
    Converted kmallocs with multiplies to kmalloc_array.
    Converted a kmalloc/strlen/strncpy to kstrdup.
    Moved a spin_lock below a removed OOM message and
    removed a now unnecessary spin_unlock.
    Neatened alignment and whitespace.
    
    Signed-off-by: Joe Perches <joe@perches.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/drivers/dt9812.c b/drivers/staging/comedi/drivers/dt9812.c
index fc5b30c70737..192cf088f834 100644
--- a/drivers/staging/comedi/drivers/dt9812.c
+++ b/drivers/staging/comedi/drivers/dt9812.c
@@ -702,10 +702,9 @@ static int dt9812_probe(struct usb_interface *interface,
 
 	/* allocate memory for our device state and initialize it */
 	dev = kzalloc(sizeof(*dev), GFP_KERNEL);
-	if (dev == NULL) {
-		dev_err(&interface->dev, "Out of memory\n");
+	if (dev == NULL)
 		goto error;
-	}
+
 	kref_init(&dev->kref);
 
 	dev->udev = usb_get_dev(interface_to_usbdev(interface));

commit ae59ecfd3ff45833c23913877d8c8d94eeb930d0
Author: Peter Huewe <peterhuewe@gmx.de>
Date:   Tue Jan 22 21:07:32 2013 +0100

    staging/comedi: use comedi_usb_driver_(un)register for init/deinit
    
    Instead of coding calling comedi_driver_(un)register and
    usb_(de)register directly we can use the comedi_usb_driver_(un)register
    wrapper.
    This removes some boilerplate and is less error prone.
    
    Signed-off-by: Peter Huewe <peterhuewe@gmx.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/drivers/dt9812.c b/drivers/staging/comedi/drivers/dt9812.c
index 176799849d20..fc5b30c70737 100644
--- a/drivers/staging/comedi/drivers/dt9812.c
+++ b/drivers/staging/comedi/drivers/dt9812.c
@@ -1133,7 +1133,7 @@ static struct comedi_driver dt9812_comedi_driver = {
 
 static int __init usb_dt9812_init(void)
 {
-	int result, i;
+	int i;
 
 	/* Initialize all driver slots */
 	for (i = 0; i < DT9812_NUM_SLOTS; i++) {
@@ -1144,30 +1144,13 @@ static int __init usb_dt9812_init(void)
 	}
 	dt9812[12].serial = 0x0;
 
-	/* register with the USB subsystem */
-	result = usb_register(&dt9812_usb_driver);
-	if (result) {
-		pr_err("usb_register failed. Error number %d\n", result);
-		return result;
-	}
-	/* register with comedi */
-	result = comedi_driver_register(&dt9812_comedi_driver);
-	if (result) {
-		usb_deregister(&dt9812_usb_driver);
-		pr_err("comedi_driver_register failed. Error number %d\n",
-		       result);
-	}
-
-	return result;
+	return comedi_usb_driver_register(&dt9812_comedi_driver,
+						&dt9812_usb_driver);
 }
 
 static void __exit usb_dt9812_exit(void)
 {
-	/* unregister with comedi */
-	comedi_driver_unregister(&dt9812_comedi_driver);
-
-	/* deregister this driver with the USB subsystem */
-	usb_deregister(&dt9812_usb_driver);
+	comedi_usb_driver_unregister(&dt9812_comedi_driver, &dt9812_usb_driver);
 }
 
 module_init(usb_dt9812_init);

commit c34fa261b0ac3a862ccd3f71ee55a16b920dfc83
Author: H Hartley Sweeten <hartleys@visionengravers.com>
Date:   Tue Oct 23 13:22:37 2012 -0700

    staging: comedi: remove inline alloc_private()
    
    This inline function has a very generic name and it's only a
    wrapper around a simple kzalloc(). Since the inline function
    does not save any lines-of-code, instead of renaming it just
    remove it and do the kzalloc() directly.
    
    Signed-off-by: H Hartley Sweeten <hsweeten@visionengravers.com>
    Cc: Ian Abbott <abbotti@mev.co.uk>
    Cc: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/drivers/dt9812.c b/drivers/staging/comedi/drivers/dt9812.c
index 02b5394d7bdf..176799849d20 100644
--- a/drivers/staging/comedi/drivers/dt9812.c
+++ b/drivers/staging/comedi/drivers/dt9812.c
@@ -1031,10 +1031,10 @@ static int dt9812_attach(struct comedi_device *dev, struct comedi_devconfig *it)
 
 	dev->board_name = "dt9812";
 
-	ret = alloc_private(dev, sizeof(*devpriv));
-	if (ret)
-		return ret;
-	devpriv = dev->private;
+	devpriv = kzalloc(sizeof(*devpriv), GFP_KERNEL);
+	if (!devpriv)
+		return -ENOMEM;
+	dev->private = devpriv;
 
 	/*
 	 * Special open routine, since USB unit may be unattached at

commit 509f3f78c99e89c83714f0cad40ea09e18f21d03
Author: YAMANE Toshiaki <yamanetoshi@gmail.com>
Date:   Tue Oct 9 22:07:27 2012 +0900

    staging/comedi: Use pr_ or dev_ printks in drivers/dt9812.c
    
    fixed below checkpatch warnings.
    - WARNING: Prefer netdev_err(netdev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
    - WARNING: Prefer netdev_info(netdev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
    
    and added pr_fmt.
    
    Signed-off-by: YAMANE Toshiaki <yamanetoshi@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/drivers/dt9812.c b/drivers/staging/comedi/drivers/dt9812.c
index 71d38fc5c160..02b5394d7bdf 100644
--- a/drivers/staging/comedi/drivers/dt9812.c
+++ b/drivers/staging/comedi/drivers/dt9812.c
@@ -43,6 +43,8 @@ for my needs.
  *      says P1).
  */
 
+#define pr_fmt(fmt) KBUILD_MODNAME ": " fmt
+
 #include <linux/kernel.h>
 #include <linux/errno.h>
 #include <linux/init.h>
@@ -1083,8 +1085,7 @@ static int dt9812_attach(struct comedi_device *dev, struct comedi_devconfig *it)
 	s->insn_write = &dt9812_ao_winsn;
 	s->insn_read = &dt9812_ao_rinsn;
 
-	printk(KERN_INFO "comedi%d: successfully attached to dt9812.\n",
-	       dev->minor);
+	dev_info(dev->class_dev, "successfully attached to dt9812.\n");
 
 	down(&dt9812_mutex);
 	/* Find a slot for the comedi device */
@@ -1146,17 +1147,15 @@ static int __init usb_dt9812_init(void)
 	/* register with the USB subsystem */
 	result = usb_register(&dt9812_usb_driver);
 	if (result) {
-		printk(KERN_ERR KBUILD_MODNAME
-		       ": usb_register failed. Error number %d\n", result);
+		pr_err("usb_register failed. Error number %d\n", result);
 		return result;
 	}
 	/* register with comedi */
 	result = comedi_driver_register(&dt9812_comedi_driver);
 	if (result) {
 		usb_deregister(&dt9812_usb_driver);
-		printk(KERN_ERR KBUILD_MODNAME
-			": comedi_driver_register failed. Error number %d\n",
-			result);
+		pr_err("comedi_driver_register failed. Error number %d\n",
+		       result);
 	}
 
 	return result;

commit 9a1a6cf8ae5ca58171e117335b9983e3cfa2185c
Author: H Hartley Sweeten <hartleys@visionengravers.com>
Date:   Mon Oct 15 10:15:52 2012 -0700

    staging: comedi: drivers: remove remaining devpriv macros
    
    The remaining comedi drivers that still have a devpriv macro
    are all pretty straight forward for removing the devpriv
    macro.
    
    This macro relies on a local variable having a specific name.
    Remove its use by replacing it with a local variable where
    used.
    
    The inline function alloc_private(), used to kzalloc the
    dev->private memory, returns non-zero if there is an error.
    Fix all the alloc_private() calls accordingly and remove any
    kernel messages or obvious comments that still exist in the
    drivers. Leave a comment in the skel driver.
    
    Signed-off-by: H Hartley Sweeten <hsweeten@visionengravers.com>
    Cc: Ian Abbott <abbotti@mev.co.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/drivers/dt9812.c b/drivers/staging/comedi/drivers/dt9812.c
index bc6f409b7e19..71d38fc5c160 100644
--- a/drivers/staging/comedi/drivers/dt9812.c
+++ b/drivers/staging/comedi/drivers/dt9812.c
@@ -323,9 +323,6 @@ static const struct comedi_lrange dt9812_2pt5_aout_range = { 1, {
 
 static struct slot_dt9812 dt9812[DT9812_NUM_SLOTS];
 
-/* Useful shorthand access to private data */
-#define devpriv ((struct comedi_dt9812 *)dev->private)
-
 static inline struct usb_dt9812 *to_dt9812_dev(struct kref *d)
 {
 	return container_of(d, struct usb_dt9812, kref);
@@ -893,6 +890,7 @@ static struct usb_driver dt9812_usb_driver = {
 
 static int dt9812_comedi_open(struct comedi_device *dev)
 {
+	struct comedi_dt9812 *devpriv = dev->private;
 	int result = -ENODEV;
 
 	down(&devpriv->slot->mutex);
@@ -947,6 +945,7 @@ static int dt9812_di_rinsn(struct comedi_device *dev,
 			   struct comedi_subdevice *s, struct comedi_insn *insn,
 			   unsigned int *data)
 {
+	struct comedi_dt9812 *devpriv = dev->private;
 	int n;
 	u8 bits = 0;
 
@@ -960,6 +959,7 @@ static int dt9812_do_winsn(struct comedi_device *dev,
 			   struct comedi_subdevice *s, struct comedi_insn *insn,
 			   unsigned int *data)
 {
+	struct comedi_dt9812 *devpriv = dev->private;
 	int n;
 	u8 bits = 0;
 
@@ -979,6 +979,7 @@ static int dt9812_ai_rinsn(struct comedi_device *dev,
 			   struct comedi_subdevice *s, struct comedi_insn *insn,
 			   unsigned int *data)
 {
+	struct comedi_dt9812 *devpriv = dev->private;
 	int n;
 
 	for (n = 0; n < insn->n; n++) {
@@ -995,6 +996,7 @@ static int dt9812_ao_rinsn(struct comedi_device *dev,
 			   struct comedi_subdevice *s, struct comedi_insn *insn,
 			   unsigned int *data)
 {
+	struct comedi_dt9812 *devpriv = dev->private;
 	int n;
 	u16 value;
 
@@ -1010,6 +1012,7 @@ static int dt9812_ao_winsn(struct comedi_device *dev,
 			   struct comedi_subdevice *s, struct comedi_insn *insn,
 			   unsigned int *data)
 {
+	struct comedi_dt9812 *devpriv = dev->private;
 	int n;
 
 	for (n = 0; n < insn->n; n++)
@@ -1019,14 +1022,17 @@ static int dt9812_ao_winsn(struct comedi_device *dev,
 
 static int dt9812_attach(struct comedi_device *dev, struct comedi_devconfig *it)
 {
+	struct comedi_dt9812 *devpriv;
 	int i;
 	struct comedi_subdevice *s;
 	int ret;
 
 	dev->board_name = "dt9812";
 
-	if (alloc_private(dev, sizeof(struct comedi_dt9812)) < 0)
-		return -ENOMEM;
+	ret = alloc_private(dev, sizeof(*devpriv));
+	if (ret)
+		return ret;
+	devpriv = dev->private;
 
 	/*
 	 * Special open routine, since USB unit may be unattached at

commit 3a2078914e00dff94ab132176ad9857fb6eeefb3
Author: H Hartley Sweeten <hartleys@visionengravers.com>
Date:   Wed Sep 5 18:42:02 2012 -0700

    staging: comedi: dt9812: remove subdevice pointer math
    
    Convert the comedi_subdevice access from pointer math to array
    access.
    
    Signed-off-by: H Hartley Sweeten <hsweeten@visionengravers.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/drivers/dt9812.c b/drivers/staging/comedi/drivers/dt9812.c
index 40821c7303ea..bc6f409b7e19 100644
--- a/drivers/staging/comedi/drivers/dt9812.c
+++ b/drivers/staging/comedi/drivers/dt9812.c
@@ -1041,7 +1041,7 @@ static int dt9812_attach(struct comedi_device *dev, struct comedi_devconfig *it)
 		return ret;
 
 	/* digital input subdevice */
-	s = dev->subdevices + 0;
+	s = &dev->subdevices[0];
 	s->type = COMEDI_SUBD_DI;
 	s->subdev_flags = SDF_READABLE;
 	s->n_chan = 0;
@@ -1050,7 +1050,7 @@ static int dt9812_attach(struct comedi_device *dev, struct comedi_devconfig *it)
 	s->insn_read = &dt9812_di_rinsn;
 
 	/* digital output subdevice */
-	s = dev->subdevices + 1;
+	s = &dev->subdevices[1];
 	s->type = COMEDI_SUBD_DO;
 	s->subdev_flags = SDF_WRITEABLE;
 	s->n_chan = 0;
@@ -1059,7 +1059,7 @@ static int dt9812_attach(struct comedi_device *dev, struct comedi_devconfig *it)
 	s->insn_write = &dt9812_do_winsn;
 
 	/* analog input subdevice */
-	s = dev->subdevices + 2;
+	s = &dev->subdevices[2];
 	s->type = COMEDI_SUBD_AI;
 	s->subdev_flags = SDF_READABLE | SDF_GROUND;
 	s->n_chan = 0;
@@ -1068,7 +1068,7 @@ static int dt9812_attach(struct comedi_device *dev, struct comedi_devconfig *it)
 	s->insn_read = &dt9812_ai_rinsn;
 
 	/* analog output subdevice */
-	s = dev->subdevices + 3;
+	s = &dev->subdevices[3];
 	s->type = COMEDI_SUBD_AO;
 	s->subdev_flags = SDF_WRITEABLE;
 	s->n_chan = 0;

commit 8b6c56949ffa83dbc2a6e8fa3f98b10a19372207
Author: H Hartley Sweeten <hartleys@visionengravers.com>
Date:   Tue Jun 12 11:59:33 2012 -0700

    staging: comedi: propogate error code from comedi_alloc_subdevices
    
    comedi_alloc_subdevices can fail with -EINVAL or -ENOMEM. When it
    does fail make sure to pass the proper error code back.
    
    Signed-off-by: H Hartley Sweeten <hsweeten@visionengravers.com>
    Cc: Ian Abbott <abbott@mev.co.uk>
    Cc: Frank Mori Hess <fmhess@users.sourceforge.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/drivers/dt9812.c b/drivers/staging/comedi/drivers/dt9812.c
index 678fa502a716..40821c7303ea 100644
--- a/drivers/staging/comedi/drivers/dt9812.c
+++ b/drivers/staging/comedi/drivers/dt9812.c
@@ -1021,6 +1021,7 @@ static int dt9812_attach(struct comedi_device *dev, struct comedi_devconfig *it)
 {
 	int i;
 	struct comedi_subdevice *s;
+	int ret;
 
 	dev->board_name = "dt9812";
 
@@ -1035,8 +1036,9 @@ static int dt9812_attach(struct comedi_device *dev, struct comedi_devconfig *it)
 
 	devpriv->serial = it->options[0];
 
-	if (comedi_alloc_subdevices(dev, 4) < 0)
-		return -ENOMEM;
+	ret = comedi_alloc_subdevices(dev, 4);
+	if (ret)
+		return ret;
 
 	/* digital input subdevice */
 	s = dev->subdevices + 0;

commit eea6838b1206b0ac90110f1a6f58e101aa496e99
Author: H Hartley Sweeten <hartleys@visionengravers.com>
Date:   Tue Jun 12 11:59:15 2012 -0700

    staging: comedi: remove the "Allocate the subdevice..." comments
    
    These comments are redundant. The function name 'comedi_alloc_subdevices'
    provides this information.
    
    Signed-off-by: H Hartley Sweeten <hsweeten@visionengravers.com>
    Cc: Ian Abbott <ian@mev.co.uk>
    Cc: Frank Mori Hess <fmhess@users.sourceforge.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/drivers/dt9812.c b/drivers/staging/comedi/drivers/dt9812.c
index 56af2f28f98d..678fa502a716 100644
--- a/drivers/staging/comedi/drivers/dt9812.c
+++ b/drivers/staging/comedi/drivers/dt9812.c
@@ -1035,7 +1035,6 @@ static int dt9812_attach(struct comedi_device *dev, struct comedi_devconfig *it)
 
 	devpriv->serial = it->options[0];
 
-	/* Allocate subdevices */
 	if (comedi_alloc_subdevices(dev, 4) < 0)
 		return -ENOMEM;
 

commit 2f0b9d082e5d0056a3aca4be038483a564849196
Author: H Hartley Sweeten <hartleys@visionengravers.com>
Date:   Mon Jun 11 17:45:15 2012 -0700

    staging: comedi: export alloc_subdevices as comedi_alloc_subdevices
    
    Move the inline alloc_subdevices() function from comedidev.h
    to drivers.c and rename it to comedi_alloc_subdevices(). The
    function is large enough to warrant being an exported symbol
    rather than being an inline in every driver.
    
    Signed-off-by: H Hartley Sweeten <hsweeten@visionengravers.com>
    Cc: Ian Abbott <abbotti@mev.co.uk>
    Cc: Frank Mori Hess <fmhess@users.sourceforge.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/drivers/dt9812.c b/drivers/staging/comedi/drivers/dt9812.c
index 22cda5c76ce4..56af2f28f98d 100644
--- a/drivers/staging/comedi/drivers/dt9812.c
+++ b/drivers/staging/comedi/drivers/dt9812.c
@@ -1036,7 +1036,7 @@ static int dt9812_attach(struct comedi_device *dev, struct comedi_devconfig *it)
 	devpriv->serial = it->options[0];
 
 	/* Allocate subdevices */
-	if (alloc_subdevices(dev, 4) < 0)
+	if (comedi_alloc_subdevices(dev, 4) < 0)
 		return -ENOMEM;
 
 	/* digital input subdevice */

commit 484ecc95d9cdfa8b2f7029e2f3409cf078aed4ab
Author: H Hartley Sweeten <hartleys@visionengravers.com>
Date:   Thu May 17 17:11:14 2012 -0700

    staging: comedi: cleanup all the comedi_driver 'detach' functions
    
    1. Change the return type from int to void
    
    All the detach functions, except for the comedi usb drivers, simply
    return success (0). Plus, the return code is never checked in the
    comedi core.
    
    The comedi usb drivers do return error codes but the conditions can
    never happen.
    
    The first check is:
    
            if (!dev)
                    return -EFAULT;
    
    This checks that the passed comedi_device pointer is valid. The detach
    function itself is called using this pointer so it MUST always be valid
    or there is a bug in the core:
    
            if (dev->driver)
                    dev->driver->detach(dev);
    
    And the second check:
    
            usb = dev->private;
            if (!usb)
                    return -EFAULT;
    
    The dev->private pointer is setup in the attach function to point to the
    probed usb device. This value could be NULL if the attach fails. But,
    since the comedi core is going to unload the driver anyway and does not
    check for errors there is no gain by returning one.
    
    After removing these checks from the comedi usb drivers the detach
    functions required a bit of cleanup.
    
    2. Remove all the printk noise in the detach functions
    
    All of the printk output is really just noise. The user did a rmmod to
    unload the driver, we really don't need to tell them about it.
    
    Also, some of the messages are output using:
    
            dev_dbg(dev->hw_dev, ...
    or
            dev_info(dev->hw_dev, ...
    
    Unfortunately the hw_dev value is only used by drivers that are doing
    DMA. For most drivers this variable is going to be NULL so the output
    is not going to work as expected.
    
    3. Refactor a couple static 'free_resource' functions into the detach
       functions.
    
    The 'free_resource' function is only being called by the detach and it
    makes more sense to just absorb the code.
    
    4. Remove a couple unnecessary braces for single statements.
    
    5. Remove unnecessary comments.
    
    Most of the comedi drivers appear to be based on the comedi skel driver
    and have the comments from that driver included. These comments make
    sense in the skel driver for reference but they don't need to be in any
    of the actual drivers.
    
    6. Remove all the extra whitespace.
    
    It's not needed to make the functions any more readable.
    
    7. Remove the now unused 'attached_successfully' variable in the
       cb_pcimdda driver.
    
    This variable was only used to conditionally output some driver noise
    during the detach. Since all the printk's have been removed this
    variable is no longer necessary.
    
    Signed-off-by: H Hartley Sweeten <hsweeten@visionengravers.com>
    Cc: Ian Abbott <abbotti@mev.co.uk>
    Cc: Mori Hess <fmhess@users.sourceforge.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/drivers/dt9812.c b/drivers/staging/comedi/drivers/dt9812.c
index cd3a44a0bfcc..22cda5c76ce4 100644
--- a/drivers/staging/comedi/drivers/dt9812.c
+++ b/drivers/staging/comedi/drivers/dt9812.c
@@ -1111,9 +1111,9 @@ static int dt9812_attach(struct comedi_device *dev, struct comedi_devconfig *it)
 	return 0;
 }
 
-static int dt9812_detach(struct comedi_device *dev)
+static void dt9812_detach(struct comedi_device *dev)
 {
-	return 0;
+	/* Nothing to cleanup */
 }
 
 static struct comedi_driver dt9812_comedi_driver = {

commit a7a55d4a0fe08be4df1cabde83a44824626af533
Author: Ravishankar Karkala Mallikarjunayya <ravishankarkm32@gmail.com>
Date:   Tue May 1 11:55:09 2012 +0530

    Staging: comedi: Checkpatch cleanups.
    
    drivers/staging/comedi/drivers/dt9812.c:369: ERROR: "foo * bar" should be "foo *bar"
    drivers/staging/comedi/drivers/dt9812.c:369: ERROR: "foo * bar" should be "foo *bar"
    drivers/staging/comedi/drivers/dt9812.c:395: ERROR: "foo * bar" should be "foo *bar"
    drivers/staging/comedi/drivers/dt9812.c:396: ERROR: "foo * bar" should be "foo *bar"
    drivers/staging/comedi/drivers/dt9812.c:434: ERROR: "foo * bar" should be "foo *bar"
    drivers/staging/comedi/drivers/dt9812.c:480: ERROR: "foo * bar" should be "foo *bar"
    drivers/staging/comedi/drivers/dt9812.c:556: ERROR: "foo * bar" should be "foo *bar"
    drivers/staging/comedi/drivers/dt9812.c:623: ERROR: "foo * bar" should be "foo *bar"
    
    Signed-off-by: Ravishankar Karkala Mallikarjunayya <ravishankar.km@greenturtles.in>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/drivers/dt9812.c b/drivers/staging/comedi/drivers/dt9812.c
index 72110fc87f0e..cd3a44a0bfcc 100644
--- a/drivers/staging/comedi/drivers/dt9812.c
+++ b/drivers/staging/comedi/drivers/dt9812.c
@@ -366,7 +366,7 @@ static int dt9812_read_info(struct usb_dt9812 *dev, int offset, void *buf,
 }
 
 static int dt9812_read_multiple_registers(struct usb_dt9812 *dev, int reg_count,
-					  u8 * address, u8 * value)
+					  u8 *address, u8 *value)
 {
 	struct dt9812_usb_cmd cmd;
 	int i, count, retval;
@@ -392,8 +392,8 @@ static int dt9812_read_multiple_registers(struct usb_dt9812 *dev, int reg_count,
 }
 
 static int dt9812_write_multiple_registers(struct usb_dt9812 *dev,
-					   int reg_count, u8 * address,
-					   u8 * value)
+					   int reg_count, u8 *address,
+					   u8 *value)
 {
 	struct dt9812_usb_cmd cmd;
 	int i, count, retval;
@@ -431,7 +431,7 @@ static int dt9812_rmw_multiple_registers(struct usb_dt9812 *dev, int reg_count,
 	return retval;
 }
 
-static int dt9812_digital_in(struct slot_dt9812 *slot, u8 * bits)
+static int dt9812_digital_in(struct slot_dt9812 *slot, u8 *bits)
 {
 	int result = -ENODEV;
 
@@ -477,7 +477,7 @@ static int dt9812_digital_out(struct slot_dt9812 *slot, u8 bits)
 	return result;
 }
 
-static int dt9812_digital_out_shadow(struct slot_dt9812 *slot, u8 * bits)
+static int dt9812_digital_out_shadow(struct slot_dt9812 *slot, u8 *bits)
 {
 	int result = -ENODEV;
 
@@ -553,7 +553,7 @@ static void dt9812_configure_gain(struct usb_dt9812 *dev,
 	}
 }
 
-static int dt9812_analog_in(struct slot_dt9812 *slot, int channel, u16 * value,
+static int dt9812_analog_in(struct slot_dt9812 *slot, int channel, u16 *value,
 			    enum dt9812_gain gain)
 {
 	struct dt9812_rmw_byte rmw[3];
@@ -620,7 +620,7 @@ static int dt9812_analog_in(struct slot_dt9812 *slot, int channel, u16 * value,
 }
 
 static int dt9812_analog_out_shadow(struct slot_dt9812 *slot, int channel,
-				    u16 * value)
+				    u16 *value)
 {
 	int result = -ENODEV;
 

commit 65c5cfa695fa38272e393841ee80fd53ef2ef12e
Author: Ravishankar Karkala Mallikarjunayya <ravishankarkm32@gmail.com>
Date:   Tue May 1 11:55:08 2012 +0530

    Staging: comedi: fix line indentation issue in dt9812.c
    
    Replaced the spaces with a tab.
    
    Signed-off-by: Ravishankar Karkala Mallikarjunayya <ravishankar.km@greenturtles.in>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/drivers/dt9812.c b/drivers/staging/comedi/drivers/dt9812.c
index 89a49dda4482..72110fc87f0e 100644
--- a/drivers/staging/comedi/drivers/dt9812.c
+++ b/drivers/staging/comedi/drivers/dt9812.c
@@ -196,7 +196,7 @@ struct dt9812_flash_data {
 };
 
 #define DT9812_MAX_NUM_MULTI_BYTE_RDS  \
-    ((DT9812_MAX_WRITE_CMD_PIPE_SIZE - 4 - 1) / sizeof(u8))
+	((DT9812_MAX_WRITE_CMD_PIPE_SIZE - 4 - 1) / sizeof(u8))
 
 struct dt9812_read_multi {
 	u8 count;
@@ -209,8 +209,8 @@ struct dt9812_write_byte {
 };
 
 #define DT9812_MAX_NUM_MULTI_BYTE_WRTS  \
-    ((DT9812_MAX_WRITE_CMD_PIPE_SIZE - 4 - 1) / \
-      sizeof(struct dt9812_write_byte))
+	((DT9812_MAX_WRITE_CMD_PIPE_SIZE - 4 - 1) / \
+	 sizeof(struct dt9812_write_byte))
 
 struct dt9812_write_multi {
 	u8 count;
@@ -224,7 +224,8 @@ struct dt9812_rmw_byte {
 };
 
 #define DT9812_MAX_NUM_MULTI_BYTE_RMWS  \
-    ((DT9812_MAX_WRITE_CMD_PIPE_SIZE - 4 - 1) / sizeof(struct dt9812_rmw_byte))
+	((DT9812_MAX_WRITE_CMD_PIPE_SIZE - 4 - 1) / \
+	 sizeof(struct dt9812_rmw_byte))
 
 struct dt9812_rmw_multi {
 	u8 count;

commit 923faa6a8cc80ceff89214efbccce1497118ceed
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Fri Apr 20 16:53:19 2012 -0700

    staging: comedi: dt9812.c: remove err() usage
    
    err() was a very old USB-specific macro that I thought had
    gone away.  This patch removes it from being used in the
    driver and uses dev_err() instead.
    
    CC: Ian Abbott <abbotti@mev.co.uk>
    CC: Mori Hess <fmhess@users.sourceforge.net>
    CC: Dan Carpenter <dan.carpenter@oracle.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/drivers/dt9812.c b/drivers/staging/comedi/drivers/dt9812.c
index 53953c2fb715..89a49dda4482 100644
--- a/drivers/staging/comedi/drivers/dt9812.c
+++ b/drivers/staging/comedi/drivers/dt9812.c
@@ -547,7 +547,7 @@ static void dt9812_configure_gain(struct usb_dt9812 *dev,
 		rmw->or_value = F020_MASK_ADC0CF_AMP0GN2;
 		break;
 	default:
-		err("Illegal gain %d\n", gain);
+		dev_err(&dev->interface->dev, "Illegal gain %d\n", gain);
 
 	}
 }
@@ -715,7 +715,7 @@ static int dt9812_probe(struct usb_interface *interface,
 	iface_desc = interface->cur_altsetting;
 
 	if (iface_desc->desc.bNumEndpoints != 5) {
-		err("Wrong number of endpoints.");
+		dev_err(&interface->dev, "Wrong number of endpoints.\n");
 		retval = -ENODEV;
 		goto error;
 	}
@@ -781,22 +781,22 @@ static int dt9812_probe(struct usb_interface *interface,
 	}
 
 	if (dt9812_read_info(dev, 1, &dev->vendor, sizeof(dev->vendor)) != 0) {
-		err("Failed to read vendor.");
+		dev_err(&interface->dev, "Failed to read vendor.\n");
 		retval = -ENODEV;
 		goto error;
 	}
 	if (dt9812_read_info(dev, 3, &dev->product, sizeof(dev->product)) != 0) {
-		err("Failed to read product.");
+		dev_err(&interface->dev, "Failed to read product.\n");
 		retval = -ENODEV;
 		goto error;
 	}
 	if (dt9812_read_info(dev, 5, &dev->device, sizeof(dev->device)) != 0) {
-		err("Failed to read device.");
+		dev_err(&interface->dev, "Failed to read device.\n");
 		retval = -ENODEV;
 		goto error;
 	}
 	if (dt9812_read_info(dev, 7, &dev->serial, sizeof(dev->serial)) != 0) {
-		err("Failed to read serial.");
+		dev_err(&interface->dev, "Failed to read serial.\n");
 		retval = -ENODEV;
 		goto error;
 	}
@@ -1146,7 +1146,9 @@ static int __init usb_dt9812_init(void)
 	result = comedi_driver_register(&dt9812_comedi_driver);
 	if (result) {
 		usb_deregister(&dt9812_usb_driver);
-		err("comedi_driver_register failed. Error number %d", result);
+		printk(KERN_ERR KBUILD_MODNAME
+			": comedi_driver_register failed. Error number %d\n",
+			result);
 	}
 
 	return result;

commit 73e2918990c0d0ba7866696d492a8090e4f9f396
Author: Masanari Iida <standby24x7@gmail.com>
Date:   Fri Apr 6 23:33:52 2012 +0900

    staging: Fix typo in multiple files
    
    Collect spelling typo in multiple files within staging directory.
    
    Signed-off-by: Masanari Iida <standby24x7@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/drivers/dt9812.c b/drivers/staging/comedi/drivers/dt9812.c
index e86ab5862895..53953c2fb715 100644
--- a/drivers/staging/comedi/drivers/dt9812.c
+++ b/drivers/staging/comedi/drivers/dt9812.c
@@ -715,7 +715,7 @@ static int dt9812_probe(struct usb_interface *interface,
 	iface_desc = interface->cur_altsetting;
 
 	if (iface_desc->desc.bNumEndpoints != 5) {
-		err("Wrong number of endpints.");
+		err("Wrong number of endpoints.");
 		retval = -ENODEV;
 		goto error;
 	}

commit cba2c99363beb532c29f9aebf5b22878d88bcb93
Author: Dan Carpenter <dan.carpenter@oracle.com>
Date:   Tue Jan 17 10:31:13 2012 +0300

    Staging: comedi: logical || vs bitwise |
    
    These are bitfields and the intend was to OR them together.  A logical
    OR here is simply 1.
    
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Acked-by: Ian Abbott <abbotti@mev.co.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/drivers/dt9812.c b/drivers/staging/comedi/drivers/dt9812.c
index 32d9c42e9659..e86ab5862895 100644
--- a/drivers/staging/comedi/drivers/dt9812.c
+++ b/drivers/staging/comedi/drivers/dt9812.c
@@ -527,7 +527,7 @@ static void dt9812_configure_gain(struct usb_dt9812 *dev,
 		 * 11x -> Gain =  0.5
 		 */
 	case DT9812_GAIN_0PT5:
-		rmw->or_value = F020_MASK_ADC0CF_AMP0GN2 ||
+		rmw->or_value = F020_MASK_ADC0CF_AMP0GN2 |
 		    F020_MASK_ADC0CF_AMP0GN1;
 		break;
 	case DT9812_GAIN_1:
@@ -540,7 +540,7 @@ static void dt9812_configure_gain(struct usb_dt9812 *dev,
 		rmw->or_value = F020_MASK_ADC0CF_AMP0GN1;
 		break;
 	case DT9812_GAIN_8:
-		rmw->or_value = F020_MASK_ADC0CF_AMP0GN1 ||
+		rmw->or_value = F020_MASK_ADC0CF_AMP0GN1 |
 		    F020_MASK_ADC0CF_AMP0GN0;
 		break;
 	case DT9812_GAIN_16:

commit 25985edcedea6396277003854657b5f3cb31a628
Author: Lucas De Marchi <lucas.demarchi@profusion.mobi>
Date:   Wed Mar 30 22:57:33 2011 -0300

    Fix common misspellings
    
    Fixes generated by 'codespell' and manually reviewed.
    
    Signed-off-by: Lucas De Marchi <lucas.demarchi@profusion.mobi>

diff --git a/drivers/staging/comedi/drivers/dt9812.c b/drivers/staging/comedi/drivers/dt9812.c
index 06059850dae2..32d9c42e9659 100644
--- a/drivers/staging/comedi/drivers/dt9812.c
+++ b/drivers/staging/comedi/drivers/dt9812.c
@@ -773,7 +773,7 @@ static int dt9812_probe(struct usb_interface *interface,
 			retval = dt9812_read_info(dev, 1, &fw, sizeof(fw));
 			if (retval == 0) {
 				dev_info(&interface->dev,
-					 "usb_reset_configuration succeded "
+					 "usb_reset_configuration succeeded "
 					 "after %d iterations\n", i);
 				break;
 			}

commit 45f4d0243525b6bc747c946937ced437b135a84d
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Sat Oct 30 11:06:57 2010 +0200

    staging: Final semaphore cleanup
    
    Fixup the last remaining users of DECLARE_MUTEX and init_MUTEX.
    
    Scripted conversion, resulting code is binary equivalent.
    
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Cc: Greg Kroah-Hartman <gregkh@suse.de>
    LKML-Reference: <20100907125057.278833764@linutronix.de>

diff --git a/drivers/staging/comedi/drivers/dt9812.c b/drivers/staging/comedi/drivers/dt9812.c
index 0560a7451512..06059850dae2 100644
--- a/drivers/staging/comedi/drivers/dt9812.c
+++ b/drivers/staging/comedi/drivers/dt9812.c
@@ -262,7 +262,7 @@ struct dt9812_usb_cmd {
 
 #define DT9812_NUM_SLOTS	16
 
-static DECLARE_MUTEX(dt9812_mutex);
+static DEFINE_SEMAPHORE(dt9812_mutex);
 
 static const struct usb_device_id dt9812_table[] = {
 	{USB_DEVICE(0x0867, 0x9812)},

commit 0f0800f17a60816141f138a422477dc936262c42
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Tue Sep 7 14:33:47 2010 +0000

    staging: Bulk convert the semaphore mess
    
    init_MUTEX(_LOCKED) and DECLARE_MUTEX are going away. Bulk convert
    staging users.
    
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>

diff --git a/drivers/staging/comedi/drivers/dt9812.c b/drivers/staging/comedi/drivers/dt9812.c
index d01d2dc79112..0560a7451512 100644
--- a/drivers/staging/comedi/drivers/dt9812.c
+++ b/drivers/staging/comedi/drivers/dt9812.c
@@ -1128,7 +1128,7 @@ static int __init usb_dt9812_init(void)
 
 	/* Initialize all driver slots */
 	for (i = 0; i < DT9812_NUM_SLOTS; i++) {
-		init_MUTEX(&dt9812[i].mutex);
+		sema_init(&dt9812[i].mutex, 1);
 		dt9812[i].serial = 0;
 		dt9812[i].usb = NULL;
 		dt9812[i].comedi = NULL;

commit 3c17ba0743d75f9888d905ddf9f8551c7dd36493
Author: Ian Abbott <abbotti@mev.co.uk>
Date:   Wed May 19 14:10:00 2010 +0100

    Staging: comedi: Allow 'open' driver method to fail
    
    Some comedi drivers should return an error from their 'open' method when
    something goes wrong.  Change the prototype of the 'open' method in
    'struct comedi_device' to allow this, and change the drivers that use it.
    Propagate any error to the 'open' file operation.
    
    The corresponding 'close' method won't be called when the 'open' method
    fails, so drivers failing the 'open' need to clean up any mess they
    created.
    
    The dt9812 and serial2002 drivers can now return an error on 'open'.
    The jr3_pci driver also uses the 'open' method but doesn't fail it.
    
    Signed-off-by: Ian Abbott <abbotti@mev.co.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>

diff --git a/drivers/staging/comedi/drivers/dt9812.c b/drivers/staging/comedi/drivers/dt9812.c
index 96caae36279c..d01d2dc79112 100644
--- a/drivers/staging/comedi/drivers/dt9812.c
+++ b/drivers/staging/comedi/drivers/dt9812.c
@@ -890,8 +890,10 @@ static struct usb_driver dt9812_usb_driver = {
  * Comedi functions
  */
 
-static void dt9812_comedi_open(struct comedi_device *dev)
+static int dt9812_comedi_open(struct comedi_device *dev)
 {
+	int result = -ENODEV;
+
 	down(&devpriv->slot->mutex);
 	if (devpriv->slot->usb) {
 		/* We have an attached device, fill in current range info */
@@ -934,8 +936,10 @@ static void dt9812_comedi_open(struct comedi_device *dev)
 			}
 			break;
 		}
+		result = 0;
 	}
 	up(&devpriv->slot->mutex);
+	return result;
 }
 
 static int dt9812_di_rinsn(struct comedi_device *dev,

commit a457732b836b970c82c7ba35b4cfc938c9c543f9
Author: Németh Márton <nm127@freemail.hu>
Date:   Sun Jan 10 00:18:34 2010 +0100

    staging: make USB device id constant
    
    The id_table field of the struct usb_device_id is constant in <linux/usb.h>
    so it is worth to make the initialization data also constant.
    
    The semantic match that finds this kind of pattern is as follows:
    (http://coccinelle.lip6.fr/)
    
    // <smpl>
    @r@
    disable decl_init,const_decl_init;
    identifier I1, I2, x;
    @@
            struct I1 {
              ...
              const struct I2 *x;
              ...
            };
    @s@
    identifier r.I1, y;
    identifier r.x, E;
    @@
            struct I1 y = {
              .x = E,
            };
    @c@
    identifier r.I2;
    identifier s.E;
    @@
            const struct I2 E[] = ... ;
    @depends on !c@
    identifier r.I2;
    identifier s.E;
    @@
    +       const
            struct I2 E[] = ...;
    // </smpl>
    
    Signed-off-by: Németh Márton <nm127@freemail.hu>
    Cc: Julia Lawall <julia@diku.dk>
    Cc: cocci@diku.dk
    Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>

diff --git a/drivers/staging/comedi/drivers/dt9812.c b/drivers/staging/comedi/drivers/dt9812.c
index 312f4f282bd7..96caae36279c 100644
--- a/drivers/staging/comedi/drivers/dt9812.c
+++ b/drivers/staging/comedi/drivers/dt9812.c
@@ -264,7 +264,7 @@ struct dt9812_usb_cmd {
 
 static DECLARE_MUTEX(dt9812_mutex);
 
-static struct usb_device_id dt9812_table[] = {
+static const struct usb_device_id dt9812_table[] = {
 	{USB_DEVICE(0x0867, 0x9812)},
 	{}			/* Terminating entry */
 };

commit 0a85b6f0ab0d2edb0d41b32697111ce0e4f43496
Author: Mithlesh Thukral <mithlesh@linsyssoft.com>
Date:   Mon Jun 8 21:04:41 2009 +0530

    Staging: Comedi: Lindent changes to comdi driver in staging tree
    
    Lindent changes to comdi driver in staging tree.
    This patch is followed by the checkpatch.pl error fixes.
    Did not make them part of this patch as the patch size is already huge.
    
    Signed-off-by: Mithlesh Thukral <mithlesh@linsyssoft.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>

diff --git a/drivers/staging/comedi/drivers/dt9812.c b/drivers/staging/comedi/drivers/dt9812.c
index cc4c04630086..312f4f282bd7 100644
--- a/drivers/staging/comedi/drivers/dt9812.c
+++ b/drivers/staging/comedi/drivers/dt9812.c
@@ -89,9 +89,9 @@ for my needs.
 #define F020_MASK_DACxCN_DACxEN		0x80
 
 enum {
-				/* A/D  D/A  DI  DO  CT */
+	/* A/D  D/A  DI  DO  CT */
 	DT9812_DEVID_DT9812_10,	/*  8    2   8   8   1  +/- 10V */
-	DT9812_DEVID_DT9812_2PT5,/* 8    2   8   8   1  0-2.44V */
+	DT9812_DEVID_DT9812_2PT5,	/* 8    2   8   8   1  0-2.44V */
 #if 0
 	DT9812_DEVID_DT9813,	/*  16   2   4   4   1  +/- 10V */
 	DT9812_DEVID_DT9814	/*  24   2   0   0   1  +/- 10V */
@@ -266,7 +266,7 @@ static DECLARE_MUTEX(dt9812_mutex);
 
 static struct usb_device_id dt9812_table[] = {
 	{USB_DEVICE(0x0867, 0x9812)},
-	{ }			/* Terminating entry */
+	{}			/* Terminating entry */
 };
 
 MODULE_DEVICE_TABLE(usb, dt9812_table);
@@ -301,23 +301,23 @@ struct slot_dt9812 {
 };
 
 static const struct comedi_lrange dt9812_10_ain_range = { 1, {
-			BIP_RANGE(10),
-	}
+							      BIP_RANGE(10),
+							      }
 };
 
 static const struct comedi_lrange dt9812_2pt5_ain_range = { 1, {
-			UNI_RANGE(2.5),
-	}
+								UNI_RANGE(2.5),
+								}
 };
 
 static const struct comedi_lrange dt9812_10_aout_range = { 1, {
-			BIP_RANGE(10),
-	}
+							       BIP_RANGE(10),
+							       }
 };
 
 static const struct comedi_lrange dt9812_2pt5_aout_range = { 1, {
-			UNI_RANGE(2.5),
-	}
+								 UNI_RANGE(2.5),
+								 }
 };
 
 static struct slot_dt9812 dt9812[DT9812_NUM_SLOTS];
@@ -346,7 +346,7 @@ static int dt9812_read_info(struct usb_dt9812 *dev, int offset, void *buf,
 
 	cmd.cmd = cpu_to_le32(DT9812_R_FLASH_DATA);
 	cmd.u.flash_data_info.address =
-		cpu_to_le16(DT9812_DIAGS_BOARD_INFO_ADDR + offset);
+	    cpu_to_le16(DT9812_DIAGS_BOARD_INFO_ADDR + offset);
 	cmd.u.flash_data_info.numbytes = cpu_to_le16(buf_size);
 
 	/* DT9812 only responds to 32 byte writes!! */
@@ -365,7 +365,7 @@ static int dt9812_read_info(struct usb_dt9812 *dev, int offset, void *buf,
 }
 
 static int dt9812_read_multiple_registers(struct usb_dt9812 *dev, int reg_count,
-					  u8 *address, u8 *value)
+					  u8 * address, u8 * value)
 {
 	struct dt9812_usb_cmd cmd;
 	int i, count, retval;
@@ -391,8 +391,8 @@ static int dt9812_read_multiple_registers(struct usb_dt9812 *dev, int reg_count,
 }
 
 static int dt9812_write_multiple_registers(struct usb_dt9812 *dev,
-					   int reg_count, u8 *address,
-					   u8 *value)
+					   int reg_count, u8 * address,
+					   u8 * value)
 {
 	struct dt9812_usb_cmd cmd;
 	int i, count, retval;
@@ -430,7 +430,7 @@ static int dt9812_rmw_multiple_registers(struct usb_dt9812 *dev, int reg_count,
 	return retval;
 }
 
-static int dt9812_digital_in(struct slot_dt9812 *slot, u8 *bits)
+static int dt9812_digital_in(struct slot_dt9812 *slot, u8 * bits)
 {
 	int result = -ENODEV;
 
@@ -449,7 +449,7 @@ static int dt9812_digital_in(struct slot_dt9812 *slot, u8 *bits)
 			 */
 			*bits = (value[0] & 0x7f) | ((value[1] & 0x08) << 4);
 			/* printk("%2.2x, %2.2x -> %2.2x\n",
-				  value[0], value[1], *bits); */
+			   value[0], value[1], *bits); */
 		}
 	}
 	up(&slot->mutex);
@@ -476,7 +476,7 @@ static int dt9812_digital_out(struct slot_dt9812 *slot, u8 bits)
 	return result;
 }
 
-static int dt9812_digital_out_shadow(struct slot_dt9812 *slot, u8 *bits)
+static int dt9812_digital_out_shadow(struct slot_dt9812 *slot, u8 * bits)
 {
 	int result = -ENODEV;
 
@@ -516,8 +516,7 @@ static void dt9812_configure_gain(struct usb_dt9812 *dev,
 
 	rmw->address = F020_SFR_ADC0CF;
 	rmw->and_mask = F020_MASK_ADC0CF_AMP0GN2 |
-			F020_MASK_ADC0CF_AMP0GN1 |
-			F020_MASK_ADC0CF_AMP0GN0;
+	    F020_MASK_ADC0CF_AMP0GN1 | F020_MASK_ADC0CF_AMP0GN0;
 	switch (gain) {
 		/*
 		 * 000 -> Gain =  1
@@ -529,7 +528,7 @@ static void dt9812_configure_gain(struct usb_dt9812 *dev,
 		 */
 	case DT9812_GAIN_0PT5:
 		rmw->or_value = F020_MASK_ADC0CF_AMP0GN2 ||
-				F020_MASK_ADC0CF_AMP0GN1;
+		    F020_MASK_ADC0CF_AMP0GN1;
 		break;
 	case DT9812_GAIN_1:
 		rmw->or_value = 0x00;
@@ -542,7 +541,7 @@ static void dt9812_configure_gain(struct usb_dt9812 *dev,
 		break;
 	case DT9812_GAIN_8:
 		rmw->or_value = F020_MASK_ADC0CF_AMP0GN1 ||
-				F020_MASK_ADC0CF_AMP0GN0;
+		    F020_MASK_ADC0CF_AMP0GN0;
 		break;
 	case DT9812_GAIN_16:
 		rmw->or_value = F020_MASK_ADC0CF_AMP0GN2;
@@ -553,7 +552,7 @@ static void dt9812_configure_gain(struct usb_dt9812 *dev,
 	}
 }
 
-static int dt9812_analog_in(struct slot_dt9812 *slot, int channel, u16 *value,
+static int dt9812_analog_in(struct slot_dt9812 *slot, int channel, u16 * value,
 			    enum dt9812_gain gain)
 {
 	struct dt9812_rmw_byte rmw[3];
@@ -620,7 +619,7 @@ static int dt9812_analog_in(struct slot_dt9812 *slot, int channel, u16 *value,
 }
 
 static int dt9812_analog_out_shadow(struct slot_dt9812 *slot, int channel,
-				    u16 *value)
+				    u16 * value)
 {
 	int result = -ENODEV;
 
@@ -729,32 +728,32 @@ static int dt9812_probe(struct usb_interface *interface,
 			direction = USB_DIR_IN;
 			dev->message_pipe.addr = endpoint->bEndpointAddress;
 			dev->message_pipe.size =
-					le16_to_cpu(endpoint->wMaxPacketSize);
+			    le16_to_cpu(endpoint->wMaxPacketSize);
 
 			break;
 		case 1:
 			direction = USB_DIR_OUT;
 			dev->command_write.addr = endpoint->bEndpointAddress;
 			dev->command_write.size =
-					le16_to_cpu(endpoint->wMaxPacketSize);
+			    le16_to_cpu(endpoint->wMaxPacketSize);
 			break;
 		case 2:
 			direction = USB_DIR_IN;
 			dev->command_read.addr = endpoint->bEndpointAddress;
 			dev->command_read.size =
-					le16_to_cpu(endpoint->wMaxPacketSize);
+			    le16_to_cpu(endpoint->wMaxPacketSize);
 			break;
 		case 3:
 			direction = USB_DIR_OUT;
 			dev->write_stream.addr = endpoint->bEndpointAddress;
 			dev->write_stream.size =
-					le16_to_cpu(endpoint->wMaxPacketSize);
+			    le16_to_cpu(endpoint->wMaxPacketSize);
 			break;
 		case 4:
 			direction = USB_DIR_IN;
 			dev->read_stream.addr = endpoint->bEndpointAddress;
 			dev->read_stream.size =
-					le16_to_cpu(endpoint->wMaxPacketSize);
+			    le16_to_cpu(endpoint->wMaxPacketSize);
 			break;
 		}
 		if ((endpoint->bEndpointAddress & USB_DIR_IN) != direction) {
@@ -786,8 +785,7 @@ static int dt9812_probe(struct usb_interface *interface,
 		retval = -ENODEV;
 		goto error;
 	}
-	if (dt9812_read_info(dev, 3, &dev->product,
-			     sizeof(dev->product)) != 0) {
+	if (dt9812_read_info(dev, 3, &dev->product, sizeof(dev->product)) != 0) {
 		err("Failed to read product.");
 		retval = -ENODEV;
 		goto error;
@@ -940,8 +938,9 @@ static void dt9812_comedi_open(struct comedi_device *dev)
 	up(&devpriv->slot->mutex);
 }
 
-static int dt9812_di_rinsn(struct comedi_device *dev, struct comedi_subdevice *s,
-			   struct comedi_insn *insn, unsigned int *data)
+static int dt9812_di_rinsn(struct comedi_device *dev,
+			   struct comedi_subdevice *s, struct comedi_insn *insn,
+			   unsigned int *data)
 {
 	int n;
 	u8 bits = 0;
@@ -952,8 +951,9 @@ static int dt9812_di_rinsn(struct comedi_device *dev, struct comedi_subdevice *s
 	return n;
 }
 
-static int dt9812_do_winsn(struct comedi_device *dev, struct comedi_subdevice *s,
-			   struct comedi_insn *insn, unsigned int *data)
+static int dt9812_do_winsn(struct comedi_device *dev,
+			   struct comedi_subdevice *s, struct comedi_insn *insn,
+			   unsigned int *data)
 {
 	int n;
 	u8 bits = 0;
@@ -970,8 +970,9 @@ static int dt9812_do_winsn(struct comedi_device *dev, struct comedi_subdevice *s
 	return n;
 }
 
-static int dt9812_ai_rinsn(struct comedi_device *dev, struct comedi_subdevice *s,
-			   struct comedi_insn *insn, unsigned int *data)
+static int dt9812_ai_rinsn(struct comedi_device *dev,
+			   struct comedi_subdevice *s, struct comedi_insn *insn,
+			   unsigned int *data)
 {
 	int n;
 
@@ -985,8 +986,9 @@ static int dt9812_ai_rinsn(struct comedi_device *dev, struct comedi_subdevice *s
 	return n;
 }
 
-static int dt9812_ao_rinsn(struct comedi_device *dev, struct comedi_subdevice *s,
-			   struct comedi_insn *insn, unsigned int *data)
+static int dt9812_ao_rinsn(struct comedi_device *dev,
+			   struct comedi_subdevice *s, struct comedi_insn *insn,
+			   unsigned int *data)
 {
 	int n;
 	u16 value;
@@ -999,8 +1001,9 @@ static int dt9812_ao_rinsn(struct comedi_device *dev, struct comedi_subdevice *s
 	return n;
 }
 
-static int dt9812_ao_winsn(struct comedi_device *dev, struct comedi_subdevice *s,
-			   struct comedi_insn *insn, unsigned int *data)
+static int dt9812_ao_winsn(struct comedi_device *dev,
+			   struct comedi_subdevice *s, struct comedi_insn *insn,
+			   unsigned int *data)
 {
 	int n;
 

commit 0707bb04be89b18ee83b5a997e36cc585f0b988d
Author: Bill Pemberton <wfp5p@virginia.edu>
Date:   Mon Mar 16 22:06:20 2009 -0400

    Staging: comedi: Remove comedi_devconfig typedef
    
    Signed-off-by: Bill Pemberton <wfp5p@virginia.edu>
    Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>

diff --git a/drivers/staging/comedi/drivers/dt9812.c b/drivers/staging/comedi/drivers/dt9812.c
index e2131fd4f45f..cc4c04630086 100644
--- a/drivers/staging/comedi/drivers/dt9812.c
+++ b/drivers/staging/comedi/drivers/dt9812.c
@@ -1009,7 +1009,7 @@ static int dt9812_ao_winsn(struct comedi_device *dev, struct comedi_subdevice *s
 	return n;
 }
 
-static int dt9812_attach(struct comedi_device *dev, comedi_devconfig *it)
+static int dt9812_attach(struct comedi_device *dev, struct comedi_devconfig *it)
 {
 	int i;
 	struct comedi_subdevice *s;

commit 90035c0886b256d75bced13b3b3cea5234aff136
Author: Bill Pemberton <wfp5p@virginia.edu>
Date:   Mon Mar 16 22:05:53 2009 -0400

    Staging: comedi: Remove comedi_insn typedef
    
    Signed-off-by: Bill Pemberton <wfp5p@virginia.edu>
    Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>

diff --git a/drivers/staging/comedi/drivers/dt9812.c b/drivers/staging/comedi/drivers/dt9812.c
index a3d4afc60421..e2131fd4f45f 100644
--- a/drivers/staging/comedi/drivers/dt9812.c
+++ b/drivers/staging/comedi/drivers/dt9812.c
@@ -941,7 +941,7 @@ static void dt9812_comedi_open(struct comedi_device *dev)
 }
 
 static int dt9812_di_rinsn(struct comedi_device *dev, struct comedi_subdevice *s,
-			   comedi_insn *insn, unsigned int *data)
+			   struct comedi_insn *insn, unsigned int *data)
 {
 	int n;
 	u8 bits = 0;
@@ -953,7 +953,7 @@ static int dt9812_di_rinsn(struct comedi_device *dev, struct comedi_subdevice *s
 }
 
 static int dt9812_do_winsn(struct comedi_device *dev, struct comedi_subdevice *s,
-			   comedi_insn *insn, unsigned int *data)
+			   struct comedi_insn *insn, unsigned int *data)
 {
 	int n;
 	u8 bits = 0;
@@ -971,7 +971,7 @@ static int dt9812_do_winsn(struct comedi_device *dev, struct comedi_subdevice *s
 }
 
 static int dt9812_ai_rinsn(struct comedi_device *dev, struct comedi_subdevice *s,
-			   comedi_insn *insn, unsigned int *data)
+			   struct comedi_insn *insn, unsigned int *data)
 {
 	int n;
 
@@ -986,7 +986,7 @@ static int dt9812_ai_rinsn(struct comedi_device *dev, struct comedi_subdevice *s
 }
 
 static int dt9812_ao_rinsn(struct comedi_device *dev, struct comedi_subdevice *s,
-			   comedi_insn *insn, unsigned int *data)
+			   struct comedi_insn *insn, unsigned int *data)
 {
 	int n;
 	u16 value;
@@ -1000,7 +1000,7 @@ static int dt9812_ao_rinsn(struct comedi_device *dev, struct comedi_subdevice *s
 }
 
 static int dt9812_ao_winsn(struct comedi_device *dev, struct comedi_subdevice *s,
-			   comedi_insn *insn, unsigned int *data)
+			   struct comedi_insn *insn, unsigned int *data)
 {
 	int n;
 

commit 9ced1de69125b60f40127eddaa3be2a92bb0a1df
Author: Bill Pemberton <wfp5p@virginia.edu>
Date:   Mon Mar 16 22:05:31 2009 -0400

    Staging: comedi: Remove comedi_lrange typedef
    
    Signed-off-by: Bill Pemberton <wfp5p@virginia.edu>
    Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>

diff --git a/drivers/staging/comedi/drivers/dt9812.c b/drivers/staging/comedi/drivers/dt9812.c
index e304a614a97e..a3d4afc60421 100644
--- a/drivers/staging/comedi/drivers/dt9812.c
+++ b/drivers/staging/comedi/drivers/dt9812.c
@@ -300,22 +300,22 @@ struct slot_dt9812 {
 	struct comedi_dt9812 *comedi;
 };
 
-static const comedi_lrange dt9812_10_ain_range = { 1, {
+static const struct comedi_lrange dt9812_10_ain_range = { 1, {
 			BIP_RANGE(10),
 	}
 };
 
-static const comedi_lrange dt9812_2pt5_ain_range = { 1, {
+static const struct comedi_lrange dt9812_2pt5_ain_range = { 1, {
 			UNI_RANGE(2.5),
 	}
 };
 
-static const comedi_lrange dt9812_10_aout_range = { 1, {
+static const struct comedi_lrange dt9812_10_aout_range = { 1, {
 			BIP_RANGE(10),
 	}
 };
 
-static const comedi_lrange dt9812_2pt5_aout_range = { 1, {
+static const struct comedi_lrange dt9812_2pt5_aout_range = { 1, {
 			UNI_RANGE(2.5),
 	}
 };

commit 139dfbdfacb02e3ef3df936d2fabd1ad5f14ea88
Author: Bill Pemberton <wfp5p@virginia.edu>
Date:   Mon Mar 16 22:05:25 2009 -0400

    Staging: comedi: Remove comedi_driver typedef
    
    Signed-off-by: Bill Pemberton <wfp5p@virginia.edu>
    Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>

diff --git a/drivers/staging/comedi/drivers/dt9812.c b/drivers/staging/comedi/drivers/dt9812.c
index 3dd357336fa7..e304a614a97e 100644
--- a/drivers/staging/comedi/drivers/dt9812.c
+++ b/drivers/staging/comedi/drivers/dt9812.c
@@ -1108,7 +1108,7 @@ static int dt9812_detach(struct comedi_device *dev)
 	return 0;
 }
 
-static comedi_driver dt9812_comedi_driver = {
+static struct comedi_driver dt9812_comedi_driver = {
 	.module = THIS_MODULE,
 	.driver_name = "dt9812",
 	.attach = dt9812_attach,

commit 34c43922e62708d45e9660eee4b4f1fb7b4bf2c7
Author: Bill Pemberton <wfp5p@virginia.edu>
Date:   Mon Mar 16 22:05:14 2009 -0400

    Staging: comedi: Remove comedi_subdevice typedef
    
    Signed-off-by: Bill Pemberton <wfp5p@virginia.edu>
    Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>

diff --git a/drivers/staging/comedi/drivers/dt9812.c b/drivers/staging/comedi/drivers/dt9812.c
index 068ef2f79e5a..3dd357336fa7 100644
--- a/drivers/staging/comedi/drivers/dt9812.c
+++ b/drivers/staging/comedi/drivers/dt9812.c
@@ -897,7 +897,7 @@ static void dt9812_comedi_open(struct comedi_device *dev)
 	down(&devpriv->slot->mutex);
 	if (devpriv->slot->usb) {
 		/* We have an attached device, fill in current range info */
-		comedi_subdevice *s;
+		struct comedi_subdevice *s;
 
 		s = &dev->subdevices[0];
 		s->n_chan = 8;
@@ -940,7 +940,7 @@ static void dt9812_comedi_open(struct comedi_device *dev)
 	up(&devpriv->slot->mutex);
 }
 
-static int dt9812_di_rinsn(struct comedi_device *dev, comedi_subdevice *s,
+static int dt9812_di_rinsn(struct comedi_device *dev, struct comedi_subdevice *s,
 			   comedi_insn *insn, unsigned int *data)
 {
 	int n;
@@ -952,7 +952,7 @@ static int dt9812_di_rinsn(struct comedi_device *dev, comedi_subdevice *s,
 	return n;
 }
 
-static int dt9812_do_winsn(struct comedi_device *dev, comedi_subdevice *s,
+static int dt9812_do_winsn(struct comedi_device *dev, struct comedi_subdevice *s,
 			   comedi_insn *insn, unsigned int *data)
 {
 	int n;
@@ -970,7 +970,7 @@ static int dt9812_do_winsn(struct comedi_device *dev, comedi_subdevice *s,
 	return n;
 }
 
-static int dt9812_ai_rinsn(struct comedi_device *dev, comedi_subdevice *s,
+static int dt9812_ai_rinsn(struct comedi_device *dev, struct comedi_subdevice *s,
 			   comedi_insn *insn, unsigned int *data)
 {
 	int n;
@@ -985,7 +985,7 @@ static int dt9812_ai_rinsn(struct comedi_device *dev, comedi_subdevice *s,
 	return n;
 }
 
-static int dt9812_ao_rinsn(struct comedi_device *dev, comedi_subdevice *s,
+static int dt9812_ao_rinsn(struct comedi_device *dev, struct comedi_subdevice *s,
 			   comedi_insn *insn, unsigned int *data)
 {
 	int n;
@@ -999,7 +999,7 @@ static int dt9812_ao_rinsn(struct comedi_device *dev, comedi_subdevice *s,
 	return n;
 }
 
-static int dt9812_ao_winsn(struct comedi_device *dev, comedi_subdevice *s,
+static int dt9812_ao_winsn(struct comedi_device *dev, struct comedi_subdevice *s,
 			   comedi_insn *insn, unsigned int *data)
 {
 	int n;
@@ -1012,7 +1012,7 @@ static int dt9812_ao_winsn(struct comedi_device *dev, comedi_subdevice *s,
 static int dt9812_attach(struct comedi_device *dev, comedi_devconfig *it)
 {
 	int i;
-	comedi_subdevice *s;
+	struct comedi_subdevice *s;
 
 	dev->board_name = "dt9812";
 

commit 71b5f4f11971dea972832ad63a994c7e5b45db6b
Author: Bill Pemberton <wfp5p@virginia.edu>
Date:   Mon Mar 16 22:05:08 2009 -0400

    Staging: comedi: Remove comedi_device typedef
    
    Signed-off-by: Bill Pemberton <wfp5p@virginia.edu>
    Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>

diff --git a/drivers/staging/comedi/drivers/dt9812.c b/drivers/staging/comedi/drivers/dt9812.c
index bbb5a146a7ee..068ef2f79e5a 100644
--- a/drivers/staging/comedi/drivers/dt9812.c
+++ b/drivers/staging/comedi/drivers/dt9812.c
@@ -892,7 +892,7 @@ static struct usb_driver dt9812_usb_driver = {
  * Comedi functions
  */
 
-static void dt9812_comedi_open(comedi_device *dev)
+static void dt9812_comedi_open(struct comedi_device *dev)
 {
 	down(&devpriv->slot->mutex);
 	if (devpriv->slot->usb) {
@@ -940,7 +940,7 @@ static void dt9812_comedi_open(comedi_device *dev)
 	up(&devpriv->slot->mutex);
 }
 
-static int dt9812_di_rinsn(comedi_device *dev, comedi_subdevice *s,
+static int dt9812_di_rinsn(struct comedi_device *dev, comedi_subdevice *s,
 			   comedi_insn *insn, unsigned int *data)
 {
 	int n;
@@ -952,7 +952,7 @@ static int dt9812_di_rinsn(comedi_device *dev, comedi_subdevice *s,
 	return n;
 }
 
-static int dt9812_do_winsn(comedi_device *dev, comedi_subdevice *s,
+static int dt9812_do_winsn(struct comedi_device *dev, comedi_subdevice *s,
 			   comedi_insn *insn, unsigned int *data)
 {
 	int n;
@@ -970,7 +970,7 @@ static int dt9812_do_winsn(comedi_device *dev, comedi_subdevice *s,
 	return n;
 }
 
-static int dt9812_ai_rinsn(comedi_device *dev, comedi_subdevice *s,
+static int dt9812_ai_rinsn(struct comedi_device *dev, comedi_subdevice *s,
 			   comedi_insn *insn, unsigned int *data)
 {
 	int n;
@@ -985,7 +985,7 @@ static int dt9812_ai_rinsn(comedi_device *dev, comedi_subdevice *s,
 	return n;
 }
 
-static int dt9812_ao_rinsn(comedi_device *dev, comedi_subdevice *s,
+static int dt9812_ao_rinsn(struct comedi_device *dev, comedi_subdevice *s,
 			   comedi_insn *insn, unsigned int *data)
 {
 	int n;
@@ -999,7 +999,7 @@ static int dt9812_ao_rinsn(comedi_device *dev, comedi_subdevice *s,
 	return n;
 }
 
-static int dt9812_ao_winsn(comedi_device *dev, comedi_subdevice *s,
+static int dt9812_ao_winsn(struct comedi_device *dev, comedi_subdevice *s,
 			   comedi_insn *insn, unsigned int *data)
 {
 	int n;
@@ -1009,7 +1009,7 @@ static int dt9812_ao_winsn(comedi_device *dev, comedi_subdevice *s,
 	return n;
 }
 
-static int dt9812_attach(comedi_device *dev, comedi_devconfig *it)
+static int dt9812_attach(struct comedi_device *dev, comedi_devconfig *it)
 {
 	int i;
 	comedi_subdevice *s;
@@ -1103,7 +1103,7 @@ static int dt9812_attach(comedi_device *dev, comedi_devconfig *it)
 	return 0;
 }
 
-static int dt9812_detach(comedi_device *dev)
+static int dt9812_detach(struct comedi_device *dev)
 {
 	return 0;
 }

commit 790c55415aa31f4c732729f94d2c3a54f7d3bfc2
Author: Bill Pemberton <wfp5p@virginia.edu>
Date:   Mon Mar 16 22:05:02 2009 -0400

    Staging: comedi: Remove lsampl_t and sampl_t typedefs
    
    Signed-off-by: Bill Pemberton <wfp5p@virginia.edu>
    Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>

diff --git a/drivers/staging/comedi/drivers/dt9812.c b/drivers/staging/comedi/drivers/dt9812.c
index f2d2173d7219..bbb5a146a7ee 100644
--- a/drivers/staging/comedi/drivers/dt9812.c
+++ b/drivers/staging/comedi/drivers/dt9812.c
@@ -941,7 +941,7 @@ static void dt9812_comedi_open(comedi_device *dev)
 }
 
 static int dt9812_di_rinsn(comedi_device *dev, comedi_subdevice *s,
-			   comedi_insn *insn, lsampl_t *data)
+			   comedi_insn *insn, unsigned int *data)
 {
 	int n;
 	u8 bits = 0;
@@ -953,7 +953,7 @@ static int dt9812_di_rinsn(comedi_device *dev, comedi_subdevice *s,
 }
 
 static int dt9812_do_winsn(comedi_device *dev, comedi_subdevice *s,
-			   comedi_insn *insn, lsampl_t *data)
+			   comedi_insn *insn, unsigned int *data)
 {
 	int n;
 	u8 bits = 0;
@@ -971,7 +971,7 @@ static int dt9812_do_winsn(comedi_device *dev, comedi_subdevice *s,
 }
 
 static int dt9812_ai_rinsn(comedi_device *dev, comedi_subdevice *s,
-			   comedi_insn *insn, lsampl_t *data)
+			   comedi_insn *insn, unsigned int *data)
 {
 	int n;
 
@@ -986,7 +986,7 @@ static int dt9812_ai_rinsn(comedi_device *dev, comedi_subdevice *s,
 }
 
 static int dt9812_ao_rinsn(comedi_device *dev, comedi_subdevice *s,
-			   comedi_insn *insn, lsampl_t *data)
+			   comedi_insn *insn, unsigned int *data)
 {
 	int n;
 	u16 value;
@@ -1000,7 +1000,7 @@ static int dt9812_ao_rinsn(comedi_device *dev, comedi_subdevice *s,
 }
 
 static int dt9812_ao_winsn(comedi_device *dev, comedi_subdevice *s,
-			   comedi_insn *insn, lsampl_t *data)
+			   comedi_insn *insn, unsigned int *data)
 {
 	int n;
 

commit 9a52ef3f1d433d1c6302fbae114d48665f1c6008
Author: Greg Kroah-Hartman <gregkh@suse.de>
Date:   Tue Nov 18 17:12:15 2008 -0800

    Staging: comedi: dt9812: remove #ifdef that is not needed
    
    We don't need to set the owner field of the usb_driver structure
    in the dt9812 driver.
    
    Cc: Anders Blomdell <anders.blomdell@control.lth.se>
    Cc: David Schleef <ds@schleef.org>
    Cc: Frank Mori Hess <fmhess@users.sourceforge.net>
    Cc: Ian Abbott <abbotti@mev.co.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>

diff --git a/drivers/staging/comedi/drivers/dt9812.c b/drivers/staging/comedi/drivers/dt9812.c
index 70ea748caab3..f2d2173d7219 100644
--- a/drivers/staging/comedi/drivers/dt9812.c
+++ b/drivers/staging/comedi/drivers/dt9812.c
@@ -882,9 +882,6 @@ static void dt9812_disconnect(struct usb_interface *interface)
 }
 
 static struct usb_driver dt9812_usb_driver = {
-#ifdef COMEDI_HAVE_USB_DRIVER_OWNER
-	.owner = THIS_MODULE,
-#endif
 	.name = "dt9812",
 	.probe = dt9812_probe,
 	.disconnect = dt9812_disconnect,

commit b1853a4f28db5b532542426965198171ef8ab6a0
Author: Greg Kroah-Hartman <gregkh@suse.de>
Date:   Tue Nov 18 11:51:41 2008 -0800

    Staging: comedi: dt9812: fix sparse warnings
    
    remove all warnings that sparse complains about in the dt9812 driver
    
    Cc: Anders Blomdell <anders.blomdell@control.lth.se>
    Cc: David Schleef <ds@schleef.org>
    Cc: Frank Mori Hess <fmhess@users.sourceforge.net>
    Cc: Ian Abbott <abbotti@mev.co.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>

diff --git a/drivers/staging/comedi/drivers/dt9812.c b/drivers/staging/comedi/drivers/dt9812.c
index 369048e50ef3..70ea748caab3 100644
--- a/drivers/staging/comedi/drivers/dt9812.c
+++ b/drivers/staging/comedi/drivers/dt9812.c
@@ -769,8 +769,6 @@ static int dt9812_probe(struct usb_interface *interface,
 		 * Seems like a configuration reset is necessary if driver is
 		 * reloaded while device is attached
 		 */
-		int i;
-
 		usb_reset_configuration(dev->udev);
 		for (i = 0; i < 10; i++) {
 			retval = dt9812_read_info(dev, 1, &fw, sizeof(fw));
@@ -1060,7 +1058,7 @@ static int dt9812_attach(comedi_device *dev, comedi_devconfig *it)
 	s->subdev_flags = SDF_READABLE | SDF_GROUND;
 	s->n_chan = 0;
 	s->maxdata = 1;
-	s->range_table = 0;
+	s->range_table = NULL;
 	s->insn_read = &dt9812_ai_rinsn;
 
 	/* analog output subdevice */
@@ -1069,7 +1067,7 @@ static int dt9812_attach(comedi_device *dev, comedi_devconfig *it)
 	s->subdev_flags = SDF_WRITEABLE;
 	s->n_chan = 0;
 	s->maxdata = 1;
-	s->range_table = 0;
+	s->range_table = NULL;
 	s->insn_write = &dt9812_ao_winsn;
 	s->insn_read = &dt9812_ao_rinsn;
 

commit 98f3c672b55cd246c62b763986a494152c7f2483
Author: Greg Kroah-Hartman <gregkh@suse.de>
Date:   Tue Nov 18 11:48:57 2008 -0800

    Staging: comedi: dt9812: remove typedefs
    
    remove all typedefs from the dt9812 driver
    
    Cc: Anders Blomdell <anders.blomdell@control.lth.se>
    Cc: David Schleef <ds@schleef.org>
    Cc: Frank Mori Hess <fmhess@users.sourceforge.net>
    Cc: Ian Abbott <abbotti@mev.co.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>

diff --git a/drivers/staging/comedi/drivers/dt9812.c b/drivers/staging/comedi/drivers/dt9812.c
index 3ded199cf1b0..369048e50ef3 100644
--- a/drivers/staging/comedi/drivers/dt9812.c
+++ b/drivers/staging/comedi/drivers/dt9812.c
@@ -88,7 +88,7 @@ for my needs.
 
 #define F020_MASK_DACxCN_DACxEN		0x80
 
-typedef enum {
+enum {
 				/* A/D  D/A  DI  DO  CT */
 	DT9812_DEVID_DT9812_10,	/*  8    2   8   8   1  +/- 10V */
 	DT9812_DEVID_DT9812_2PT5,/* 8    2   8   8   1  0-2.44V */
@@ -96,9 +96,9 @@ typedef enum {
 	DT9812_DEVID_DT9813,	/*  16   2   4   4   1  +/- 10V */
 	DT9812_DEVID_DT9814	/*  24   2   0   0   1  +/- 10V */
 #endif
-} dt9812_devid_t;
+};
 
-typedef enum {
+enum dt9812_gain {
 	DT9812_GAIN_0PT25 = 1,
 	DT9812_GAIN_0PT5 = 2,
 	DT9812_GAIN_1 = 4,
@@ -106,9 +106,9 @@ typedef enum {
 	DT9812_GAIN_4 = 16,
 	DT9812_GAIN_8 = 32,
 	DT9812_GAIN_16 = 64,
-} dt9812_gain_t;
+};
 
-typedef enum {
+enum {
 	DT9812_LEAST_USB_FIRMWARE_CMD_CODE = 0,
 	/* Write Flash memory */
 	DT9812_W_FLASH_DATA = 0,
@@ -188,56 +188,56 @@ typedef enum {
 	DT9812_W_SINGLE_VALUE_CMD = 27,
 	/* Valid DT9812_USB_FIRMWARE_CMD_CODE's will be less than this number */
 	DT9812_MAX_USB_FIRMWARE_CMD_CODE,
-} dt9812_usb_firmware_cmd_t;
+};
 
-typedef struct {
+struct dt9812_flash_data {
 	u16 numbytes;
 	u16 address;
-} dt9812_flash_data_t;
+};
 
 #define DT9812_MAX_NUM_MULTI_BYTE_RDS  \
     ((DT9812_MAX_WRITE_CMD_PIPE_SIZE - 4 - 1) / sizeof(u8))
 
-typedef struct {
+struct dt9812_read_multi {
 	u8 count;
 	u8 address[DT9812_MAX_NUM_MULTI_BYTE_RDS];
-} dt9812_read_multi_t;
+};
 
-typedef struct {
+struct dt9812_write_byte {
 	u8 address;
 	u8 value;
-} dt9812_write_byte_t;
+};
 
 #define DT9812_MAX_NUM_MULTI_BYTE_WRTS  \
-    ((DT9812_MAX_WRITE_CMD_PIPE_SIZE - 4 - 1) / sizeof(dt9812_write_byte_t))
+    ((DT9812_MAX_WRITE_CMD_PIPE_SIZE - 4 - 1) / \
+      sizeof(struct dt9812_write_byte))
 
-typedef struct {
+struct dt9812_write_multi {
 	u8 count;
-	dt9812_write_byte_t write[DT9812_MAX_NUM_MULTI_BYTE_WRTS];
-} dt9812_write_multi_t;
+	struct dt9812_write_byte write[DT9812_MAX_NUM_MULTI_BYTE_WRTS];
+};
 
-typedef struct {
+struct dt9812_rmw_byte {
 	u8 address;
 	u8 and_mask;
 	u8 or_value;
-} dt9812_rmw_byte_t;
+};
 
 #define DT9812_MAX_NUM_MULTI_BYTE_RMWS  \
-    ((DT9812_MAX_WRITE_CMD_PIPE_SIZE - 4 - 1) / sizeof(dt9812_rmw_byte_t))
+    ((DT9812_MAX_WRITE_CMD_PIPE_SIZE - 4 - 1) / sizeof(struct dt9812_rmw_byte))
 
-typedef struct {
+struct dt9812_rmw_multi {
 	u8 count;
-	dt9812_rmw_byte_t rmw[DT9812_MAX_NUM_MULTI_BYTE_RMWS];
-} dt9812_rmw_multi_t;
-
-typedef struct dt9812_usb_cmd {
+	struct dt9812_rmw_byte rmw[DT9812_MAX_NUM_MULTI_BYTE_RMWS];
+};
 
+struct dt9812_usb_cmd {
 	u32 cmd;
 	union {
-		dt9812_flash_data_t flash_data_info;
-		dt9812_read_multi_t read_multi_info;
-		dt9812_write_multi_t write_multi_info;
-		dt9812_rmw_multi_t rmw_multi_info;
+		struct dt9812_flash_data flash_data_info;
+		struct dt9812_read_multi read_multi_info;
+		struct dt9812_write_multi write_multi_info;
+		struct dt9812_rmw_multi rmw_multi_info;
 	} u;
 #if 0
 	WRITE_BYTE_INFO WriteByteInfo;
@@ -258,7 +258,7 @@ typedef struct dt9812_usb_cmd {
 	READ_SINGLE_VALUE_INFO ReadSingleValueInfo;
 	WRITE_SINGLE_VALUE_INFO WriteSingleValueInfo;
 #endif
-} dt9812_usb_cmd_t;
+};
 
 #define DT9812_NUM_SLOTS	16
 
@@ -271,7 +271,7 @@ static struct usb_device_id dt9812_table[] = {
 
 MODULE_DEVICE_TABLE(usb, dt9812_table);
 
-typedef struct usb_dt9812 {
+struct usb_dt9812 {
 	struct slot_dt9812 *slot;
 	struct usb_device *udev;
 	struct usb_interface *interface;
@@ -286,19 +286,19 @@ typedef struct usb_dt9812 {
 	struct kref kref;
 	u16 analog_out_shadow[2];
 	u8 digital_out_shadow;
-} usb_dt9812_t;
+};
 
-typedef struct comedi_dt9812 {
+struct comedi_dt9812 {
 	struct slot_dt9812 *slot;
 	u32 serial;
-} comedi_dt9812_t;
+};
 
-typedef struct slot_dt9812 {
+struct slot_dt9812 {
 	struct semaphore mutex;
 	u32 serial;
-	usb_dt9812_t *usb;
-	comedi_dt9812_t *comedi;
-} slot_dt9812_t;
+	struct usb_dt9812 *usb;
+	struct comedi_dt9812 *comedi;
+};
 
 static const comedi_lrange dt9812_10_ain_range = { 1, {
 			BIP_RANGE(10),
@@ -320,28 +320,28 @@ static const comedi_lrange dt9812_2pt5_aout_range = { 1, {
 	}
 };
 
-static slot_dt9812_t dt9812[DT9812_NUM_SLOTS];
+static struct slot_dt9812 dt9812[DT9812_NUM_SLOTS];
 
 /* Useful shorthand access to private data */
-#define devpriv ((comedi_dt9812_t *)dev->private)
+#define devpriv ((struct comedi_dt9812 *)dev->private)
 
-static inline usb_dt9812_t *to_dt9812_dev(struct kref *d)
+static inline struct usb_dt9812 *to_dt9812_dev(struct kref *d)
 {
-	return container_of(d, usb_dt9812_t, kref);
+	return container_of(d, struct usb_dt9812, kref);
 }
 
 static void dt9812_delete(struct kref *kref)
 {
-	usb_dt9812_t *dev = to_dt9812_dev(kref);
+	struct usb_dt9812 *dev = to_dt9812_dev(kref);
 
 	usb_put_dev(dev->udev);
 	kfree(dev);
 }
 
-static int dt9812_read_info(usb_dt9812_t *dev, int offset, void *buf,
+static int dt9812_read_info(struct usb_dt9812 *dev, int offset, void *buf,
 			    size_t buf_size)
 {
-	dt9812_usb_cmd_t cmd;
+	struct dt9812_usb_cmd cmd;
 	int count, retval;
 
 	cmd.cmd = cpu_to_le32(DT9812_R_FLASH_DATA);
@@ -364,10 +364,10 @@ static int dt9812_read_info(usb_dt9812_t *dev, int offset, void *buf,
 	return retval;
 }
 
-static int dt9812_read_multiple_registers(usb_dt9812_t *dev, int reg_count,
+static int dt9812_read_multiple_registers(struct usb_dt9812 *dev, int reg_count,
 					  u8 *address, u8 *value)
 {
-	dt9812_usb_cmd_t cmd;
+	struct dt9812_usb_cmd cmd;
 	int i, count, retval;
 
 	cmd.cmd = cpu_to_le32(DT9812_R_MULTI_BYTE_REG);
@@ -390,10 +390,11 @@ static int dt9812_read_multiple_registers(usb_dt9812_t *dev, int reg_count,
 	return retval;
 }
 
-static int dt9812_write_multiple_registers(usb_dt9812_t *dev, int reg_count,
-					   u8 *address, u8 *value)
+static int dt9812_write_multiple_registers(struct usb_dt9812 *dev,
+					   int reg_count, u8 *address,
+					   u8 *value)
 {
-	dt9812_usb_cmd_t cmd;
+	struct dt9812_usb_cmd cmd;
 	int i, count, retval;
 
 	cmd.cmd = cpu_to_le32(DT9812_W_MULTI_BYTE_REG);
@@ -410,10 +411,10 @@ static int dt9812_write_multiple_registers(usb_dt9812_t *dev, int reg_count,
 	return retval;
 }
 
-static int dt9812_rmw_multiple_registers(usb_dt9812_t *dev, int reg_count,
-					 dt9812_rmw_byte_t rmw[])
+static int dt9812_rmw_multiple_registers(struct usb_dt9812 *dev, int reg_count,
+					 struct dt9812_rmw_byte *rmw)
 {
-	dt9812_usb_cmd_t cmd;
+	struct dt9812_usb_cmd cmd;
 	int i, count, retval;
 
 	cmd.cmd = cpu_to_le32(DT9812_RMW_MULTI_BYTE_REG);
@@ -429,7 +430,7 @@ static int dt9812_rmw_multiple_registers(usb_dt9812_t *dev, int reg_count,
 	return retval;
 }
 
-static int dt9812_digital_in(slot_dt9812_t *slot, u8 *bits)
+static int dt9812_digital_in(struct slot_dt9812 *slot, u8 *bits)
 {
 	int result = -ENODEV;
 
@@ -456,7 +457,7 @@ static int dt9812_digital_in(slot_dt9812_t *slot, u8 *bits)
 	return result;
 }
 
-static int dt9812_digital_out(slot_dt9812_t *slot, u8 bits)
+static int dt9812_digital_out(struct slot_dt9812 *slot, u8 bits)
 {
 	int result = -ENODEV;
 
@@ -475,7 +476,7 @@ static int dt9812_digital_out(slot_dt9812_t *slot, u8 bits)
 	return result;
 }
 
-static int dt9812_digital_out_shadow(slot_dt9812_t *slot, u8 *bits)
+static int dt9812_digital_out_shadow(struct slot_dt9812 *slot, u8 *bits)
 {
 	int result = -ENODEV;
 
@@ -488,8 +489,8 @@ static int dt9812_digital_out_shadow(slot_dt9812_t *slot, u8 *bits)
 	return result;
 }
 
-static void dt9812_configure_mux(usb_dt9812_t *dev, dt9812_rmw_byte_t *rmw,
-				 int channel)
+static void dt9812_configure_mux(struct usb_dt9812 *dev,
+				 struct dt9812_rmw_byte *rmw, int channel)
 {
 	if (dev->device == DT9812_DEVID_DT9812_10) {
 		/* In the DT9812/10V MUX is selected by P1.5-7 */
@@ -504,8 +505,9 @@ static void dt9812_configure_mux(usb_dt9812_t *dev, dt9812_rmw_byte_t *rmw,
 	}
 }
 
-static void dt9812_configure_gain(usb_dt9812_t *dev, dt9812_rmw_byte_t *rmw,
-				  dt9812_gain_t gain)
+static void dt9812_configure_gain(struct usb_dt9812 *dev,
+				  struct dt9812_rmw_byte *rmw,
+				  enum dt9812_gain gain)
 {
 	if (dev->device == DT9812_DEVID_DT9812_10) {
 		/* In the DT9812/10V, there is an external gain of 0.5 */
@@ -551,10 +553,10 @@ static void dt9812_configure_gain(usb_dt9812_t *dev, dt9812_rmw_byte_t *rmw,
 	}
 }
 
-static int dt9812_analog_in(slot_dt9812_t *slot, int channel, u16 *value,
-			    dt9812_gain_t gain)
+static int dt9812_analog_in(struct slot_dt9812 *slot, int channel, u16 *value,
+			    enum dt9812_gain gain)
 {
-	dt9812_rmw_byte_t rmw[3];
+	struct dt9812_rmw_byte rmw[3];
 	u8 reg[3] = {
 		F020_SFR_ADC0CN,
 		F020_SFR_ADC0H,
@@ -617,7 +619,7 @@ static int dt9812_analog_in(slot_dt9812_t *slot, int channel, u16 *value,
 	return result;
 }
 
-static int dt9812_analog_out_shadow(slot_dt9812_t *slot, int channel,
+static int dt9812_analog_out_shadow(struct slot_dt9812 *slot, int channel,
 				    u16 *value)
 {
 	int result = -ENODEV;
@@ -632,13 +634,13 @@ static int dt9812_analog_out_shadow(slot_dt9812_t *slot, int channel,
 	return result;
 }
 
-static int dt9812_analog_out(slot_dt9812_t *slot, int channel, u16 value)
+static int dt9812_analog_out(struct slot_dt9812 *slot, int channel, u16 value)
 {
 	int result = -ENODEV;
 
 	down(&slot->mutex);
 	if (slot->usb) {
-		dt9812_rmw_byte_t rmw[3];
+		struct dt9812_rmw_byte rmw[3];
 
 		switch (channel) {
 		case 0:
@@ -693,7 +695,7 @@ static int dt9812_probe(struct usb_interface *interface,
 			const struct usb_device_id *id)
 {
 	int retval = -ENOMEM;
-	usb_dt9812_t *dev = NULL;
+	struct usb_dt9812 *dev = NULL;
 	struct usb_host_interface *iface_desc;
 	struct usb_endpoint_descriptor *endpoint;
 	int i;
@@ -829,8 +831,8 @@ static int dt9812_probe(struct usb_interface *interface,
 	down(&dt9812_mutex);
 	{
 		/* Find a slot for the USB device */
-		slot_dt9812_t *first = NULL;
-		slot_dt9812_t *best = NULL;
+		struct slot_dt9812 *first = NULL;
+		struct slot_dt9812 *best = NULL;
 
 		for (i = 0; i < DT9812_NUM_SLOTS; i++) {
 			if (!first && !dt9812[i].usb && dt9812[i].serial == 0)
@@ -861,7 +863,7 @@ static int dt9812_probe(struct usb_interface *interface,
 
 static void dt9812_disconnect(struct usb_interface *interface)
 {
-	usb_dt9812_t *dev;
+	struct usb_dt9812 *dev;
 	int minor = interface->minor;
 
 	down(&dt9812_mutex);
@@ -1019,7 +1021,7 @@ static int dt9812_attach(comedi_device *dev, comedi_devconfig *it)
 
 	dev->board_name = "dt9812";
 
-	if (alloc_private(dev, sizeof(comedi_dt9812_t)) < 0)
+	if (alloc_private(dev, sizeof(struct comedi_dt9812)) < 0)
 		return -ENOMEM;
 
 	/*
@@ -1077,8 +1079,8 @@ static int dt9812_attach(comedi_device *dev, comedi_devconfig *it)
 	down(&dt9812_mutex);
 	/* Find a slot for the comedi device */
 	{
-		slot_dt9812_t *first = NULL;
-		slot_dt9812_t *best = NULL;
+		struct slot_dt9812 *first = NULL;
+		struct slot_dt9812 *best = NULL;
 		for (i = 0; i < DT9812_NUM_SLOTS; i++) {
 			if (!first && !dt9812[i].comedi) {
 				/* First free slot from comedi side */

commit c73190fa2e3ab6b441170ce23bd4bd7a44e213fd
Author: Greg Kroah-Hartman <gregkh@suse.de>
Date:   Tue Nov 18 11:11:18 2008 -0800

    Staging: comedi: dt9812: remove dt9812.h
    
    An extra .h file is not needed for the dt9812 driver so
    merge it into the .c file.
    
    Cc: Anders Blomdell <anders.blomdell@control.lth.se>
    Cc: David Schleef <ds@schleef.org>
    Cc: Frank Mori Hess <fmhess@users.sourceforge.net>
    Cc: Ian Abbott <abbotti@mev.co.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>

diff --git a/drivers/staging/comedi/drivers/dt9812.c b/drivers/staging/comedi/drivers/dt9812.c
index e93c308c8325..3ded199cf1b0 100644
--- a/drivers/staging/comedi/drivers/dt9812.c
+++ b/drivers/staging/comedi/drivers/dt9812.c
@@ -53,7 +53,212 @@ for my needs.
 #include <linux/usb.h>
 
 #include "../comedidev.h"
-#include "dt9812.h"
+
+#define DT9812_DIAGS_BOARD_INFO_ADDR	0xFBFF
+#define DT9812_MAX_WRITE_CMD_PIPE_SIZE	32
+#define DT9812_MAX_READ_CMD_PIPE_SIZE	32
+
+/*
+ * See Silican Laboratories C8051F020/1/2/3 manual
+ */
+#define F020_SFR_P4			0x84
+#define F020_SFR_P1			0x90
+#define F020_SFR_P2			0xa0
+#define F020_SFR_P3			0xb0
+#define F020_SFR_AMX0CF			0xba
+#define F020_SFR_AMX0SL			0xbb
+#define F020_SFR_ADC0CF			0xbc
+#define F020_SFR_ADC0L			0xbe
+#define F020_SFR_ADC0H			0xbf
+#define F020_SFR_DAC0L			0xd2
+#define F020_SFR_DAC0H			0xd3
+#define F020_SFR_DAC0CN			0xd4
+#define F020_SFR_DAC1L			0xd5
+#define F020_SFR_DAC1H			0xd6
+#define F020_SFR_DAC1CN			0xd7
+#define F020_SFR_ADC0CN			0xe8
+
+#define F020_MASK_ADC0CF_AMP0GN0	0x01
+#define F020_MASK_ADC0CF_AMP0GN1	0x02
+#define F020_MASK_ADC0CF_AMP0GN2	0x04
+
+#define F020_MASK_ADC0CN_AD0EN		0x80
+#define F020_MASK_ADC0CN_AD0INT		0x20
+#define F020_MASK_ADC0CN_AD0BUSY	0x10
+
+#define F020_MASK_DACxCN_DACxEN		0x80
+
+typedef enum {
+				/* A/D  D/A  DI  DO  CT */
+	DT9812_DEVID_DT9812_10,	/*  8    2   8   8   1  +/- 10V */
+	DT9812_DEVID_DT9812_2PT5,/* 8    2   8   8   1  0-2.44V */
+#if 0
+	DT9812_DEVID_DT9813,	/*  16   2   4   4   1  +/- 10V */
+	DT9812_DEVID_DT9814	/*  24   2   0   0   1  +/- 10V */
+#endif
+} dt9812_devid_t;
+
+typedef enum {
+	DT9812_GAIN_0PT25 = 1,
+	DT9812_GAIN_0PT5 = 2,
+	DT9812_GAIN_1 = 4,
+	DT9812_GAIN_2 = 8,
+	DT9812_GAIN_4 = 16,
+	DT9812_GAIN_8 = 32,
+	DT9812_GAIN_16 = 64,
+} dt9812_gain_t;
+
+typedef enum {
+	DT9812_LEAST_USB_FIRMWARE_CMD_CODE = 0,
+	/* Write Flash memory */
+	DT9812_W_FLASH_DATA = 0,
+	/* Read Flash memory misc config info */
+	DT9812_R_FLASH_DATA = 1,
+
+	/*
+	 * Register read/write commands for processor
+	 */
+
+	/* Read a single byte of USB memory */
+	DT9812_R_SINGLE_BYTE_REG = 2,
+	/* Write a single byte of USB memory */
+	DT9812_W_SINGLE_BYTE_REG = 3,
+	/* Multiple Reads of USB memory */
+	DT9812_R_MULTI_BYTE_REG = 4,
+	/* Multiple Writes of USB memory */
+	DT9812_W_MULTI_BYTE_REG = 5,
+	/* Read, (AND) with mask, OR value, then write (single) */
+	DT9812_RMW_SINGLE_BYTE_REG = 6,
+	/* Read, (AND) with mask, OR value, then write (multiple) */
+	DT9812_RMW_MULTI_BYTE_REG = 7,
+
+	/*
+	 * Register read/write commands for SMBus
+	 */
+
+	/* Read a single byte of SMBus */
+	DT9812_R_SINGLE_BYTE_SMBUS = 8,
+	/* Write a single byte of SMBus */
+	DT9812_W_SINGLE_BYTE_SMBUS = 9,
+	/* Multiple Reads of SMBus */
+	DT9812_R_MULTI_BYTE_SMBUS = 10,
+	/* Multiple Writes of SMBus */
+	DT9812_W_MULTI_BYTE_SMBUS = 11,
+
+	/*
+	 * Register read/write commands for a device
+	 */
+
+	/* Read a single byte of a device */
+	DT9812_R_SINGLE_BYTE_DEV = 12,
+	/* Write a single byte of a device */
+	DT9812_W_SINGLE_BYTE_DEV = 13,
+	/* Multiple Reads of a device */
+	DT9812_R_MULTI_BYTE_DEV = 14,
+	/* Multiple Writes of a device */
+	DT9812_W_MULTI_BYTE_DEV = 15,
+
+	/* Not sure if we'll need this */
+	DT9812_W_DAC_THRESHOLD = 16,
+
+	/* Set interrupt on change mask */
+	DT9812_W_INT_ON_CHANGE_MASK = 17,
+
+	/* Write (or Clear) the CGL for the ADC */
+	DT9812_W_CGL = 18,
+	/* Multiple Reads of USB memory */
+	DT9812_R_MULTI_BYTE_USBMEM = 19,
+	/* Multiple Writes to USB memory */
+	DT9812_W_MULTI_BYTE_USBMEM = 20,
+
+	/* Issue a start command to a given subsystem */
+	DT9812_START_SUBSYSTEM = 21,
+	/* Issue a stop command to a given subsystem */
+	DT9812_STOP_SUBSYSTEM = 22,
+
+	/* calibrate the board using CAL_POT_CMD */
+	DT9812_CALIBRATE_POT = 23,
+	/* set the DAC FIFO size */
+	DT9812_W_DAC_FIFO_SIZE = 24,
+	/* Write or Clear the CGL for the DAC */
+	DT9812_W_CGL_DAC = 25,
+	/* Read a single value from a subsystem */
+	DT9812_R_SINGLE_VALUE_CMD = 26,
+	/* Write a single value to a subsystem */
+	DT9812_W_SINGLE_VALUE_CMD = 27,
+	/* Valid DT9812_USB_FIRMWARE_CMD_CODE's will be less than this number */
+	DT9812_MAX_USB_FIRMWARE_CMD_CODE,
+} dt9812_usb_firmware_cmd_t;
+
+typedef struct {
+	u16 numbytes;
+	u16 address;
+} dt9812_flash_data_t;
+
+#define DT9812_MAX_NUM_MULTI_BYTE_RDS  \
+    ((DT9812_MAX_WRITE_CMD_PIPE_SIZE - 4 - 1) / sizeof(u8))
+
+typedef struct {
+	u8 count;
+	u8 address[DT9812_MAX_NUM_MULTI_BYTE_RDS];
+} dt9812_read_multi_t;
+
+typedef struct {
+	u8 address;
+	u8 value;
+} dt9812_write_byte_t;
+
+#define DT9812_MAX_NUM_MULTI_BYTE_WRTS  \
+    ((DT9812_MAX_WRITE_CMD_PIPE_SIZE - 4 - 1) / sizeof(dt9812_write_byte_t))
+
+typedef struct {
+	u8 count;
+	dt9812_write_byte_t write[DT9812_MAX_NUM_MULTI_BYTE_WRTS];
+} dt9812_write_multi_t;
+
+typedef struct {
+	u8 address;
+	u8 and_mask;
+	u8 or_value;
+} dt9812_rmw_byte_t;
+
+#define DT9812_MAX_NUM_MULTI_BYTE_RMWS  \
+    ((DT9812_MAX_WRITE_CMD_PIPE_SIZE - 4 - 1) / sizeof(dt9812_rmw_byte_t))
+
+typedef struct {
+	u8 count;
+	dt9812_rmw_byte_t rmw[DT9812_MAX_NUM_MULTI_BYTE_RMWS];
+} dt9812_rmw_multi_t;
+
+typedef struct dt9812_usb_cmd {
+
+	u32 cmd;
+	union {
+		dt9812_flash_data_t flash_data_info;
+		dt9812_read_multi_t read_multi_info;
+		dt9812_write_multi_t write_multi_info;
+		dt9812_rmw_multi_t rmw_multi_info;
+	} u;
+#if 0
+	WRITE_BYTE_INFO WriteByteInfo;
+	READ_BYTE_INFO ReadByteInfo;
+	WRITE_MULTI_INFO WriteMultiInfo;
+	READ_MULTI_INFO ReadMultiInfo;
+	RMW_BYTE_INFO RMWByteInfo;
+	RMW_MULTI_INFO RMWMultiInfo;
+	DAC_THRESHOLD_INFO DacThresholdInfo;
+	INT_ON_CHANGE_MASK_INFO IntOnChangeMaskInfo;
+	CGL_INFO CglInfo;
+	SUBSYSTEM_INFO SubsystemInfo;
+	CAL_POT_CMD CalPotCmd;
+	WRITE_DEV_BYTE_INFO WriteDevByteInfo;
+	READ_DEV_BYTE_INFO ReadDevByteInfo;
+	WRITE_DEV_MULTI_INFO WriteDevMultiInfo;
+	READ_DEV_MULTI_INFO ReadDevMultiInfo;
+	READ_SINGLE_VALUE_INFO ReadSingleValueInfo;
+	WRITE_SINGLE_VALUE_INFO WriteSingleValueInfo;
+#endif
+} dt9812_usb_cmd_t;
 
 #define DT9812_NUM_SLOTS	16
 

commit f52a8af70d50ffaf665862f6315352595dd94962
Author: Greg Kroah-Hartman <gregkh@suse.de>
Date:   Tue Nov 18 11:05:04 2008 -0800

    Staging: comedi: dt9812: fix up a lot of coding style issues
    
    Lots of checkpatch.pl warnings and errors resolved in the
    comedi dt9812 usb driver.
    
    Cc: Anders Blomdell <anders.blomdell@control.lth.se>
    Cc: David Schleef <ds@schleef.org>
    Cc: Frank Mori Hess <fmhess@users.sourceforge.net>
    Cc: Ian Abbott <abbotti@mev.co.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>

diff --git a/drivers/staging/comedi/drivers/dt9812.c b/drivers/staging/comedi/drivers/dt9812.c
index d6fb16240061..e93c308c8325 100644
--- a/drivers/staging/comedi/drivers/dt9812.c
+++ b/drivers/staging/comedi/drivers/dt9812.c
@@ -43,27 +43,25 @@ for my needs.
  *      says P1).
  */
 
-#include <linux/version.h>
-#if LINUX_VERSION_CODE >= KERNEL_VERSION(2,6,0)
-
 #include <linux/kernel.h>
 #include <linux/errno.h>
 #include <linux/init.h>
 #include <linux/slab.h>
 #include <linux/module.h>
 #include <linux/kref.h>
-#include <asm/uaccess.h>
+#include <linux/uaccess.h>
 #include <linux/usb.h>
+
 #include "../comedidev.h"
 #include "dt9812.h"
 
-#define DT9812_NUM_SLOTS 16
+#define DT9812_NUM_SLOTS	16
 
 static DECLARE_MUTEX(dt9812_mutex);
 
 static struct usb_device_id dt9812_table[] = {
 	{USB_DEVICE(0x0867, 0x9812)},
-	{}			/* Terminating entry */
+	{ }			/* Terminating entry */
 };
 
 MODULE_DEVICE_TABLE(usb, dt9812_table);
@@ -119,7 +117,7 @@ static const comedi_lrange dt9812_2pt5_aout_range = { 1, {
 
 static slot_dt9812_t dt9812[DT9812_NUM_SLOTS];
 
-// Useful shorthand access to private data
+/* Useful shorthand access to private data */
 #define devpriv ((comedi_dt9812_t *)dev->private)
 
 static inline usb_dt9812_t *to_dt9812_dev(struct kref *d)
@@ -135,8 +133,8 @@ static void dt9812_delete(struct kref *kref)
 	kfree(dev);
 }
 
-static int dt9812_read_info(usb_dt9812_t * dev,
-	int offset, void *buf, size_t buf_size)
+static int dt9812_read_info(usb_dt9812_t *dev, int offset, void *buf,
+			    size_t buf_size)
 {
 	dt9812_usb_cmd_t cmd;
 	int count, retval;
@@ -146,41 +144,49 @@ static int dt9812_read_info(usb_dt9812_t * dev,
 		cpu_to_le16(DT9812_DIAGS_BOARD_INFO_ADDR + offset);
 	cmd.u.flash_data_info.numbytes = cpu_to_le16(buf_size);
 
+	/* DT9812 only responds to 32 byte writes!! */
 	count = 32;
-	retval = usb_bulk_msg(dev->udev, usb_sndbulkpipe(dev->udev, dev->command_write.addr), &cmd, 32,	// DT9812 only responds to 32 byte writes!!
-		&count, HZ * 1);
-	if (retval == 0) {
-		retval = usb_bulk_msg(dev->udev,
-			usb_rcvbulkpipe(dev->udev, dev->command_read.addr),
-			buf, buf_size, &count, HZ * 1);
-	}
+	retval = usb_bulk_msg(dev->udev,
+			      usb_sndbulkpipe(dev->udev,
+					      dev->command_write.addr),
+			      &cmd, 32, &count, HZ * 1);
+	if (retval)
+		return retval;
+	retval = usb_bulk_msg(dev->udev,
+			      usb_rcvbulkpipe(dev->udev,
+					      dev->command_read.addr),
+			      buf, buf_size, &count, HZ * 1);
 	return retval;
 }
 
-static int dt9812_read_multiple_registers(usb_dt9812_t * dev,
-	int reg_count, u8 * address, u8 * value)
+static int dt9812_read_multiple_registers(usb_dt9812_t *dev, int reg_count,
+					  u8 *address, u8 *value)
 {
 	dt9812_usb_cmd_t cmd;
 	int i, count, retval;
 
 	cmd.cmd = cpu_to_le32(DT9812_R_MULTI_BYTE_REG);
 	cmd.u.read_multi_info.count = reg_count;
-	for (i = 0; i < reg_count; i++) {
+	for (i = 0; i < reg_count; i++)
 		cmd.u.read_multi_info.address[i] = address[i];
-	}
+
+	/* DT9812 only responds to 32 byte writes!! */
 	count = 32;
-	retval = usb_bulk_msg(dev->udev, usb_sndbulkpipe(dev->udev, dev->command_write.addr), &cmd, 32,	// DT9812 only responds to 32 byte writes!!
-		&count, HZ * 1);
-	if (retval == 0) {
-		retval = usb_bulk_msg(dev->udev,
-			usb_rcvbulkpipe(dev->udev, dev->command_read.addr),
-			value, reg_count, &count, HZ * 1);
-	}
+	retval = usb_bulk_msg(dev->udev,
+			      usb_sndbulkpipe(dev->udev,
+					      dev->command_write.addr),
+			      &cmd, 32, &count, HZ * 1);
+	if (retval)
+		return retval;
+	retval = usb_bulk_msg(dev->udev,
+			      usb_rcvbulkpipe(dev->udev,
+					      dev->command_read.addr),
+			      value, reg_count, &count, HZ * 1);
 	return retval;
 }
 
-static int dt9812_write_multiple_registers(usb_dt9812_t * dev,
-	int reg_count, u8 * address, u8 * value)
+static int dt9812_write_multiple_registers(usb_dt9812_t *dev, int reg_count,
+					   u8 *address, u8 *value)
 {
 	dt9812_usb_cmd_t cmd;
 	int i, count, retval;
@@ -191,28 +197,34 @@ static int dt9812_write_multiple_registers(usb_dt9812_t * dev,
 		cmd.u.write_multi_info.write[i].address = address[i];
 		cmd.u.write_multi_info.write[i].value = value[i];
 	}
-	retval = usb_bulk_msg(dev->udev, usb_sndbulkpipe(dev->udev, dev->command_write.addr), &cmd, 32,	// DT9812 only responds to 32 byte writes!!
-		&count, HZ * 1);
+	/* DT9812 only responds to 32 byte writes!! */
+	retval = usb_bulk_msg(dev->udev,
+			      usb_sndbulkpipe(dev->udev,
+					      dev->command_write.addr),
+			      &cmd, 32, &count, HZ * 1);
 	return retval;
 }
 
-static int dt9812_rmw_multiple_registers(usb_dt9812_t * dev,
-	int reg_count, dt9812_rmw_byte_t rmw[])
+static int dt9812_rmw_multiple_registers(usb_dt9812_t *dev, int reg_count,
+					 dt9812_rmw_byte_t rmw[])
 {
 	dt9812_usb_cmd_t cmd;
 	int i, count, retval;
 
 	cmd.cmd = cpu_to_le32(DT9812_RMW_MULTI_BYTE_REG);
 	cmd.u.rmw_multi_info.count = reg_count;
-	for (i = 0; i < reg_count; i++) {
+	for (i = 0; i < reg_count; i++)
 		cmd.u.rmw_multi_info.rmw[i] = rmw[i];
-	}
-	retval = usb_bulk_msg(dev->udev, usb_sndbulkpipe(dev->udev, dev->command_write.addr), &cmd, 32,	// DT9812 only responds to 32 byte writes!!
-		&count, HZ * 1);
+
+	/* DT9812 only responds to 32 byte writes!! */
+	retval = usb_bulk_msg(dev->udev,
+			      usb_sndbulkpipe(dev->udev,
+					      dev->command_write.addr),
+			      &cmd, 32, &count, HZ * 1);
 	return retval;
 }
 
-static int dt9812_digital_in(slot_dt9812_t * slot, u8 * bits)
+static int dt9812_digital_in(slot_dt9812_t *slot, u8 *bits)
 {
 	int result = -ENODEV;
 
@@ -222,12 +234,16 @@ static int dt9812_digital_in(slot_dt9812_t * slot, u8 * bits)
 		u8 value[2];
 
 		result = dt9812_read_multiple_registers(slot->usb, 2, reg,
-			value);
+							value);
 		if (result == 0) {
-			// bits 0-6 in F020_SFR_P3 are bits 0-6 in the digital input port
-			// bit 3 in F020_SFR_P1 is bit 7 in the digital input port
+			/*
+			 * bits 0-6 in F020_SFR_P3 are bits 0-6 in the digital
+			 * input port bit 3 in F020_SFR_P1 is bit 7 in the
+			 * digital input port
+			 */
 			*bits = (value[0] & 0x7f) | ((value[1] & 0x08) << 4);
-//    printk("%2.2x, %2.2x -> %2.2x\n", value[0], value[1], *bits);
+			/* printk("%2.2x, %2.2x -> %2.2x\n",
+				  value[0], value[1], *bits); */
 		}
 	}
 	up(&slot->mutex);
@@ -235,7 +251,7 @@ static int dt9812_digital_in(slot_dt9812_t * slot, u8 * bits)
 	return result;
 }
 
-static int dt9812_digital_out(slot_dt9812_t * slot, u8 bits)
+static int dt9812_digital_out(slot_dt9812_t *slot, u8 bits)
 {
 	int result = -ENODEV;
 
@@ -247,14 +263,14 @@ static int dt9812_digital_out(slot_dt9812_t * slot, u8 bits)
 		reg[0] = F020_SFR_P2;
 		value[0] = bits;
 		result = dt9812_write_multiple_registers(slot->usb, 1, reg,
-			value);
+							 value);
 		slot->usb->digital_out_shadow = bits;
 	}
 	up(&slot->mutex);
 	return result;
 }
 
-static int dt9812_digital_out_shadow(slot_dt9812_t * slot, u8 * bits)
+static int dt9812_digital_out_shadow(slot_dt9812_t *slot, u8 *bits)
 {
 	int result = -ENODEV;
 
@@ -267,139 +283,137 @@ static int dt9812_digital_out_shadow(slot_dt9812_t * slot, u8 * bits)
 	return result;
 }
 
-static void dt9812_configure_mux(usb_dt9812_t * dev,
-	dt9812_rmw_byte_t * rmw, int channel)
+static void dt9812_configure_mux(usb_dt9812_t *dev, dt9812_rmw_byte_t *rmw,
+				 int channel)
 {
 	if (dev->device == DT9812_DEVID_DT9812_10) {
-		// In the DT9812/10V MUX is selected by P1.5-7
+		/* In the DT9812/10V MUX is selected by P1.5-7 */
 		rmw->address = F020_SFR_P1;
 		rmw->and_mask = 0xe0;
 		rmw->or_value = channel << 5;
 	} else {
-		// In the DT9812/2.5V, the internal mux is selected by bits 0:2
+		/* In the DT9812/2.5V, internal mux is selected by bits 0:2 */
 		rmw->address = F020_SFR_AMX0SL;
 		rmw->and_mask = 0xff;
 		rmw->or_value = channel & 0x07;
 	}
 }
 
-static void dt9812_configure_gain(usb_dt9812_t * dev,
-	dt9812_rmw_byte_t * rmw, dt9812_gain_t gain)
+static void dt9812_configure_gain(usb_dt9812_t *dev, dt9812_rmw_byte_t *rmw,
+				  dt9812_gain_t gain)
 {
 	if (dev->device == DT9812_DEVID_DT9812_10) {
-		// In the DT9812/10V, there is an external gain of 0.5
+		/* In the DT9812/10V, there is an external gain of 0.5 */
 		gain <<= 1;
 	}
 
 	rmw->address = F020_SFR_ADC0CF;
-	rmw->and_mask =
-		F020_MASK_ADC0CF_AMP0GN2 |
-		F020_MASK_ADC0CF_AMP0GN1 | F020_MASK_ADC0CF_AMP0GN0;
+	rmw->and_mask = F020_MASK_ADC0CF_AMP0GN2 |
+			F020_MASK_ADC0CF_AMP0GN1 |
+			F020_MASK_ADC0CF_AMP0GN0;
 	switch (gain) {
-		// 000 -> Gain =  1
-		// 001 -> Gain =  2
-		// 010 -> Gain =  4
-		// 011 -> Gain =  8
-		// 10x -> Gain = 16
-		// 11x -> Gain =  0.5
-	case DT9812_GAIN_0PT5:{
-			rmw->or_value = F020_MASK_ADC0CF_AMP0GN2
-				|| F020_MASK_ADC0CF_AMP0GN1;
-		}
+		/*
+		 * 000 -> Gain =  1
+		 * 001 -> Gain =  2
+		 * 010 -> Gain =  4
+		 * 011 -> Gain =  8
+		 * 10x -> Gain = 16
+		 * 11x -> Gain =  0.5
+		 */
+	case DT9812_GAIN_0PT5:
+		rmw->or_value = F020_MASK_ADC0CF_AMP0GN2 ||
+				F020_MASK_ADC0CF_AMP0GN1;
 		break;
-	case DT9812_GAIN_1:{
-			rmw->or_value = 0x00;
-		}
+	case DT9812_GAIN_1:
+		rmw->or_value = 0x00;
 		break;
-	case DT9812_GAIN_2:{
-			rmw->or_value = F020_MASK_ADC0CF_AMP0GN0;
-		}
+	case DT9812_GAIN_2:
+		rmw->or_value = F020_MASK_ADC0CF_AMP0GN0;
 		break;
-	case DT9812_GAIN_4:{
-			rmw->or_value = F020_MASK_ADC0CF_AMP0GN1;
-		}
+	case DT9812_GAIN_4:
+		rmw->or_value = F020_MASK_ADC0CF_AMP0GN1;
 		break;
-	case DT9812_GAIN_8:{
-			rmw->or_value = F020_MASK_ADC0CF_AMP0GN1
-				|| F020_MASK_ADC0CF_AMP0GN0;
-		}
+	case DT9812_GAIN_8:
+		rmw->or_value = F020_MASK_ADC0CF_AMP0GN1 ||
+				F020_MASK_ADC0CF_AMP0GN0;
 		break;
-	case DT9812_GAIN_16:{
-			rmw->or_value = F020_MASK_ADC0CF_AMP0GN2;
-		}
+	case DT9812_GAIN_16:
+		rmw->or_value = F020_MASK_ADC0CF_AMP0GN2;
 		break;
-	default:{
-			err("Illegal gain %d\n", gain);
-		}
+	default:
+		err("Illegal gain %d\n", gain);
+
 	}
 }
 
-static int dt9812_analog_in(slot_dt9812_t * slot,
-	int channel, u16 * value, dt9812_gain_t gain)
+static int dt9812_analog_in(slot_dt9812_t *slot, int channel, u16 *value,
+			    dt9812_gain_t gain)
 {
+	dt9812_rmw_byte_t rmw[3];
+	u8 reg[3] = {
+		F020_SFR_ADC0CN,
+		F020_SFR_ADC0H,
+		F020_SFR_ADC0L
+	};
+	u8 val[3];
 	int result = -ENODEV;
 
 	down(&slot->mutex);
-	if (slot->usb) {
-		dt9812_rmw_byte_t rmw[3];
-
-		// 1 select the gain
-		dt9812_configure_gain(slot->usb, &rmw[0], gain);
-
-		// 2 set the MUX to select the channel
-		dt9812_configure_mux(slot->usb, &rmw[1], channel);
-
-		// 3 start conversion
-		rmw[2].address = F020_SFR_ADC0CN;
-		rmw[2].and_mask = 0xff;
-		rmw[2].or_value =
-			F020_MASK_ADC0CN_AD0EN | F020_MASK_ADC0CN_AD0BUSY;
-
-		result = dt9812_rmw_multiple_registers(slot->usb, 3, rmw);
-		if (result == 0) {
-			// read the status and ADC
-			u8 reg[3] = { F020_SFR_ADC0CN, F020_SFR_ADC0H,
-				F020_SFR_ADC0L
-			};
-			u8 val[3];
-			result = dt9812_read_multiple_registers(slot->usb, 3,
-				reg, val);
-			if (result == 0) {
-				// An ADC conversion takes 16 SAR clocks cycles, i.e. about 9us.
-				// Therefore, between the instant that AD0BUSY was set via
-				// dt9812_rmw_multiple_registers and the read of AD0BUSY via
-				// dt9812_read_multiple_registers, the conversion
-				// should be complete since these two operations require two USB
-				// transactions each taking at least a millisecond to complete.
-				// However, lets make sure that conversion is finished.
-				if ((val[0] & (F020_MASK_ADC0CN_AD0INT |
-							F020_MASK_ADC0CN_AD0BUSY))
-					== F020_MASK_ADC0CN_AD0INT) {
-					switch (slot->usb->device) {
-					case DT9812_DEVID_DT9812_10:{
-							// For DT9812-10V the personality module set the encoding to 2's
-							// complement. Hence, convert it before returning it
-							*value = ((val[1] << 8)
-								| val[2]) +
-								0x800;
-						}
-						break;
-					case DT9812_DEVID_DT9812_2PT5:{
-							*value = (val[1] << 8) |
-								val[2];
-						}
-						break;
-					}
-				}
-			}
+	if (!slot->usb)
+		goto exit;
+
+	/* 1 select the gain */
+	dt9812_configure_gain(slot->usb, &rmw[0], gain);
+
+	/* 2 set the MUX to select the channel */
+	dt9812_configure_mux(slot->usb, &rmw[1], channel);
+
+	/* 3 start conversion */
+	rmw[2].address = F020_SFR_ADC0CN;
+	rmw[2].and_mask = 0xff;
+	rmw[2].or_value = F020_MASK_ADC0CN_AD0EN | F020_MASK_ADC0CN_AD0BUSY;
+
+	result = dt9812_rmw_multiple_registers(slot->usb, 3, rmw);
+	if (result)
+		goto exit;
+
+	/* read the status and ADC */
+	result = dt9812_read_multiple_registers(slot->usb, 3, reg, val);
+	if (result)
+		goto exit;
+	/*
+	 * An ADC conversion takes 16 SAR clocks cycles, i.e. about 9us.
+	 * Therefore, between the instant that AD0BUSY was set via
+	 * dt9812_rmw_multiple_registers and the read of AD0BUSY via
+	 * dt9812_read_multiple_registers, the conversion should be complete
+	 * since these two operations require two USB transactions each taking
+	 * at least a millisecond to complete.  However, lets make sure that
+	 * conversion is finished.
+	 */
+	if ((val[0] & (F020_MASK_ADC0CN_AD0INT | F020_MASK_ADC0CN_AD0BUSY)) ==
+	    F020_MASK_ADC0CN_AD0INT) {
+		switch (slot->usb->device) {
+		case DT9812_DEVID_DT9812_10:
+			/*
+			 * For DT9812-10V the personality module set the
+			 * encoding to 2's complement. Hence, convert it before
+			 * returning it
+			 */
+			*value = ((val[1] << 8) | val[2]) + 0x800;
+			break;
+		case DT9812_DEVID_DT9812_2PT5:
+			*value = (val[1] << 8) | val[2];
+			break;
 		}
 	}
+
+exit:
 	up(&slot->mutex);
 	return result;
 }
 
-static int dt9812_analog_out_shadow(slot_dt9812_t * slot, int channel,
-	u16 * value)
+static int dt9812_analog_out_shadow(slot_dt9812_t *slot, int channel,
+				    u16 *value)
 {
 	int result = -ENODEV;
 
@@ -413,7 +427,7 @@ static int dt9812_analog_out_shadow(slot_dt9812_t * slot, int channel,
 	return result;
 }
 
-static int dt9812_analog_out(slot_dt9812_t * slot, int channel, u16 value)
+static int dt9812_analog_out(slot_dt9812_t *slot, int channel, u16 value)
 {
 	int result = -ENODEV;
 
@@ -422,39 +436,40 @@ static int dt9812_analog_out(slot_dt9812_t * slot, int channel, u16 value)
 		dt9812_rmw_byte_t rmw[3];
 
 		switch (channel) {
-		case 0:{
-				// 1. Set DAC mode
-				rmw[0].address = F020_SFR_DAC0CN;
-				rmw[0].and_mask = 0xff;
-				rmw[0].or_value = F020_MASK_DACxCN_DACxEN;
-
-				// 2 load low byte of DAC value first
-				rmw[1].address = F020_SFR_DAC0L;
-				rmw[1].and_mask = 0xff;
-				rmw[1].or_value = value & 0xff;
-
-				// 3 load high byte of DAC value next to latch the 12-bit value
-				rmw[2].address = F020_SFR_DAC0H;
-				rmw[2].and_mask = 0xff;
-				rmw[2].or_value = (value >> 8) & 0xf;
-			}
+		case 0:
+			/* 1. Set DAC mode */
+			rmw[0].address = F020_SFR_DAC0CN;
+			rmw[0].and_mask = 0xff;
+			rmw[0].or_value = F020_MASK_DACxCN_DACxEN;
+
+			/* 2 load low byte of DAC value first */
+			rmw[1].address = F020_SFR_DAC0L;
+			rmw[1].and_mask = 0xff;
+			rmw[1].or_value = value & 0xff;
+
+			/* 3 load high byte of DAC value next to latch the
+			   12-bit value */
+			rmw[2].address = F020_SFR_DAC0H;
+			rmw[2].and_mask = 0xff;
+			rmw[2].or_value = (value >> 8) & 0xf;
 			break;
-		case 1:{
-				// 1. Set DAC mode
-				rmw[0].address = F020_SFR_DAC1CN;
-				rmw[0].and_mask = 0xff;
-				rmw[0].or_value = F020_MASK_DACxCN_DACxEN;
-
-				// 2 load low byte of DAC value first
-				rmw[1].address = F020_SFR_DAC1L;
-				rmw[1].and_mask = 0xff;
-				rmw[1].or_value = value & 0xff;
-
-				// 3 load high byte of DAC value next to latch the 12-bit value
-				rmw[2].address = F020_SFR_DAC1H;
-				rmw[2].and_mask = 0xff;
-				rmw[2].or_value = (value >> 8) & 0xf;
-			}
+
+		case 1:
+			/* 1. Set DAC mode */
+			rmw[0].address = F020_SFR_DAC1CN;
+			rmw[0].and_mask = 0xff;
+			rmw[0].or_value = F020_MASK_DACxCN_DACxEN;
+
+			/* 2 load low byte of DAC value first */
+			rmw[1].address = F020_SFR_DAC1L;
+			rmw[1].and_mask = 0xff;
+			rmw[1].or_value = value & 0xff;
+
+			/* 3 load high byte of DAC value next to latch the
+			   12-bit value */
+			rmw[2].address = F020_SFR_DAC1H;
+			rmw[2].and_mask = 0xff;
+			rmw[2].or_value = (value >> 8) & 0xf;
 			break;
 		}
 		result = dt9812_rmw_multiple_registers(slot->usb, 3, rmw);
@@ -470,7 +485,7 @@ static int dt9812_analog_out(slot_dt9812_t * slot, int channel, u16 value)
  */
 
 static int dt9812_probe(struct usb_interface *interface,
-	const struct usb_device_id *id)
+			const struct usb_device_id *id)
 {
 	int retval = -ENOMEM;
 	usb_dt9812_t *dev = NULL;
@@ -479,10 +494,10 @@ static int dt9812_probe(struct usb_interface *interface,
 	int i;
 	u8 fw;
 
-	// allocate memory for our device state and initialize it
+	/* allocate memory for our device state and initialize it */
 	dev = kzalloc(sizeof(*dev), GFP_KERNEL);
 	if (dev == NULL) {
-		err("Out of memory");
+		dev_err(&interface->dev, "Out of memory\n");
 		goto error;
 	}
 	kref_init(&dev->kref);
@@ -490,7 +505,7 @@ static int dt9812_probe(struct usb_interface *interface,
 	dev->udev = usb_get_dev(interface_to_usbdev(interface));
 	dev->interface = interface;
 
-	// Check endpoints
+	/* Check endpoints */
 	iface_desc = interface->cur_altsetting;
 
 	if (iface_desc->desc.bNumEndpoints != 5) {
@@ -503,63 +518,59 @@ static int dt9812_probe(struct usb_interface *interface,
 		int direction = -1;
 		endpoint = &iface_desc->endpoint[i].desc;
 		switch (i) {
-		case 0:{
-				direction = USB_DIR_IN;
-				dev->message_pipe.addr =
-					endpoint->bEndpointAddress;
-				dev->message_pipe.size =
+		case 0:
+			direction = USB_DIR_IN;
+			dev->message_pipe.addr = endpoint->bEndpointAddress;
+			dev->message_pipe.size =
 					le16_to_cpu(endpoint->wMaxPacketSize);
-			}
+
 			break;
-		case 1:{
-				direction = USB_DIR_OUT;
-				dev->command_write.addr =
-					endpoint->bEndpointAddress;
-				dev->command_write.size =
+		case 1:
+			direction = USB_DIR_OUT;
+			dev->command_write.addr = endpoint->bEndpointAddress;
+			dev->command_write.size =
 					le16_to_cpu(endpoint->wMaxPacketSize);
-			}
 			break;
-		case 2:{
-				direction = USB_DIR_IN;
-				dev->command_read.addr =
-					endpoint->bEndpointAddress;
-				dev->command_read.size =
+		case 2:
+			direction = USB_DIR_IN;
+			dev->command_read.addr = endpoint->bEndpointAddress;
+			dev->command_read.size =
 					le16_to_cpu(endpoint->wMaxPacketSize);
-			}
 			break;
-		case 3:{
-				direction = USB_DIR_OUT;
-				dev->write_stream.addr =
-					endpoint->bEndpointAddress;
-				dev->write_stream.size =
+		case 3:
+			direction = USB_DIR_OUT;
+			dev->write_stream.addr = endpoint->bEndpointAddress;
+			dev->write_stream.size =
 					le16_to_cpu(endpoint->wMaxPacketSize);
-			}
 			break;
-		case 4:{
-				direction = USB_DIR_IN;
-				dev->read_stream.addr =
-					endpoint->bEndpointAddress;
-				dev->read_stream.size =
+		case 4:
+			direction = USB_DIR_IN;
+			dev->read_stream.addr = endpoint->bEndpointAddress;
+			dev->read_stream.size =
 					le16_to_cpu(endpoint->wMaxPacketSize);
-			}
 			break;
 		}
 		if ((endpoint->bEndpointAddress & USB_DIR_IN) != direction) {
-			err("Endpoint has wrong direction.");
+			dev_err(&interface->dev,
+				"Endpoint has wrong direction.\n");
 			retval = -ENODEV;
 			goto error;
 		}
 	}
 	if (dt9812_read_info(dev, 0, &fw, sizeof(fw)) != 0) {
-		// Seems like a configuration reset is necessary if driver
-		// is reloaded while device is attached
+		/*
+		 * Seems like a configuration reset is necessary if driver is
+		 * reloaded while device is attached
+		 */
 		int i;
 
 		usb_reset_configuration(dev->udev);
 		for (i = 0; i < 10; i++) {
 			retval = dt9812_read_info(dev, 1, &fw, sizeof(fw));
 			if (retval == 0) {
-				printk("usb_reset_configuration succeded after %d iterations\n", i);
+				dev_info(&interface->dev,
+					 "usb_reset_configuration succeded "
+					 "after %d iterations\n", i);
 				break;
 			}
 		}
@@ -570,7 +581,8 @@ static int dt9812_probe(struct usb_interface *interface,
 		retval = -ENODEV;
 		goto error;
 	}
-	if (dt9812_read_info(dev, 3, &dev->product, sizeof(dev->product)) != 0) {
+	if (dt9812_read_info(dev, 3, &dev->product,
+			     sizeof(dev->product)) != 0) {
 		err("Failed to read product.");
 		retval = -ENODEV;
 		goto error;
@@ -591,44 +603,39 @@ static int dt9812_probe(struct usb_interface *interface,
 	dev->device = le16_to_cpu(dev->device);
 	dev->serial = le32_to_cpu(dev->serial);
 	switch (dev->device) {
-	case DT9812_DEVID_DT9812_10:{
-			dev->analog_out_shadow[0] = 0x0800;
-			dev->analog_out_shadow[1] = 0x800;
-		}
+	case DT9812_DEVID_DT9812_10:
+		dev->analog_out_shadow[0] = 0x0800;
+		dev->analog_out_shadow[1] = 0x800;
 		break;
-	case DT9812_DEVID_DT9812_2PT5:{
-			dev->analog_out_shadow[0] = 0x0000;
-			dev->analog_out_shadow[1] = 0x0000;
-		}
+	case DT9812_DEVID_DT9812_2PT5:
+		dev->analog_out_shadow[0] = 0x0000;
+		dev->analog_out_shadow[1] = 0x0000;
 		break;
 	}
 	dev->digital_out_shadow = 0;
 
-	// save our data pointer in this interface device a
+	/* save our data pointer in this interface device */
 	usb_set_intfdata(interface, dev);
 
-	// let the user know what node this device is now attached to
+	/* let the user know what node this device is now attached to */
 	dev_info(&interface->dev, "USB DT9812 (%4.4x.%4.4x.%4.4x) #0x%8.8x\n",
 		 dev->vendor, dev->product, dev->device, dev->serial);
 
 	down(&dt9812_mutex);
 	{
-		// Find a slot for the USB device
+		/* Find a slot for the USB device */
 		slot_dt9812_t *first = NULL;
 		slot_dt9812_t *best = NULL;
 
 		for (i = 0; i < DT9812_NUM_SLOTS; i++) {
-			if (!first && !dt9812[i].usb && dt9812[i].serial == 0) {
+			if (!first && !dt9812[i].usb && dt9812[i].serial == 0)
 				first = &dt9812[i];
-			}
-			if (!best && dt9812[i].serial == dev->serial) {
+			if (!best && dt9812[i].serial == dev->serial)
 				best = &dt9812[i];
-			}
 		}
 
-		if (!best) {
+		if (!best)
 			best = first;
-		}
 
 		if (best) {
 			down(&best->mutex);
@@ -641,10 +648,9 @@ static int dt9812_probe(struct usb_interface *interface,
 
 	return 0;
 
-      error:
-	if (dev) {
+error:
+	if (dev)
 		kref_put(&dev->kref, dt9812_delete);
-	}
 	return retval;
 }
 
@@ -684,11 +690,11 @@ static struct usb_driver dt9812_usb_driver = {
  * Comedi functions
  */
 
-static void dt9812_comedi_open(comedi_device * dev)
+static void dt9812_comedi_open(comedi_device *dev)
 {
 	down(&devpriv->slot->mutex);
 	if (devpriv->slot->usb) {
-		// We have an attached device, fill in current range info
+		/* We have an attached device, fill in current range info */
 		comedi_subdevice *s;
 
 		s = &dev->subdevices[0];
@@ -732,21 +738,20 @@ static void dt9812_comedi_open(comedi_device * dev)
 	up(&devpriv->slot->mutex);
 }
 
-static int dt9812_di_rinsn(comedi_device * dev, comedi_subdevice * s,
-	comedi_insn * insn, lsampl_t * data)
+static int dt9812_di_rinsn(comedi_device *dev, comedi_subdevice *s,
+			   comedi_insn *insn, lsampl_t *data)
 {
 	int n;
 	u8 bits = 0;
 
 	dt9812_digital_in(devpriv->slot, &bits);
-	for (n = 0; n < insn->n; n++) {
+	for (n = 0; n < insn->n; n++)
 		data[n] = ((1 << insn->chanspec) & bits) != 0;
-	}
 	return n;
 }
 
-static int dt9812_do_winsn(comedi_device * dev, comedi_subdevice * s,
-	comedi_insn * insn, lsampl_t * data)
+static int dt9812_do_winsn(comedi_device *dev, comedi_subdevice *s,
+			   comedi_insn *insn, lsampl_t *data)
 {
 	int n;
 	u8 bits = 0;
@@ -756,16 +761,15 @@ static int dt9812_do_winsn(comedi_device * dev, comedi_subdevice * s,
 		u8 mask = 1 << insn->chanspec;
 
 		bits &= ~mask;
-		if (data[n]) {
+		if (data[n])
 			bits |= mask;
-		}
 	}
 	dt9812_digital_out(devpriv->slot, bits);
 	return n;
 }
 
-static int dt9812_ai_rinsn(comedi_device * dev, comedi_subdevice * s,
-	comedi_insn * insn, lsampl_t * data)
+static int dt9812_ai_rinsn(comedi_device *dev, comedi_subdevice *s,
+			   comedi_insn *insn, lsampl_t *data)
 {
 	int n;
 
@@ -773,57 +777,57 @@ static int dt9812_ai_rinsn(comedi_device * dev, comedi_subdevice * s,
 		u16 value = 0;
 
 		dt9812_analog_in(devpriv->slot, insn->chanspec, &value,
-			DT9812_GAIN_1);
+				 DT9812_GAIN_1);
 		data[n] = value;
 	}
 	return n;
 }
 
-static int dt9812_ao_rinsn(comedi_device * dev, comedi_subdevice * s,
-	comedi_insn * insn, lsampl_t * data)
+static int dt9812_ao_rinsn(comedi_device *dev, comedi_subdevice *s,
+			   comedi_insn *insn, lsampl_t *data)
 {
 	int n;
+	u16 value;
 
 	for (n = 0; n < insn->n; n++) {
-		u16 value = 0;
-
+		value = 0;
 		dt9812_analog_out_shadow(devpriv->slot, insn->chanspec, &value);
 		data[n] = value;
 	}
 	return n;
 }
 
-static int dt9812_ao_winsn(comedi_device * dev, comedi_subdevice * s,
-	comedi_insn * insn, lsampl_t * data)
+static int dt9812_ao_winsn(comedi_device *dev, comedi_subdevice *s,
+			   comedi_insn *insn, lsampl_t *data)
 {
 	int n;
 
-	for (n = 0; n < insn->n; n++) {
+	for (n = 0; n < insn->n; n++)
 		dt9812_analog_out(devpriv->slot, insn->chanspec, data[n]);
-	}
 	return n;
 }
 
-static int dt9812_attach(comedi_device * dev, comedi_devconfig * it)
+static int dt9812_attach(comedi_device *dev, comedi_devconfig *it)
 {
 	int i;
 	comedi_subdevice *s;
 
 	dev->board_name = "dt9812";
 
-	if (alloc_private(dev, sizeof(comedi_dt9812_t)) < 0) {
+	if (alloc_private(dev, sizeof(comedi_dt9812_t)) < 0)
 		return -ENOMEM;
-	}
-	// Special open routine, since USB unit may be unattached at
-	// comedi_config time, hence range can not be determined
+
+	/*
+	 * Special open routine, since USB unit may be unattached at
+	 * comedi_config time, hence range can not be determined
+	 */
 	dev->open = dt9812_comedi_open;
 
 	devpriv->serial = it->options[0];
 
-	// Allocate subdevices
-	if (alloc_subdevices(dev, 4) < 0) {
+	/* Allocate subdevices */
+	if (alloc_subdevices(dev, 4) < 0)
 		return -ENOMEM;
-	}
 
 	/* digital input subdevice */
 	s = dev->subdevices + 0;
@@ -862,28 +866,28 @@ static int dt9812_attach(comedi_device * dev, comedi_devconfig * it)
 	s->insn_write = &dt9812_ao_winsn;
 	s->insn_read = &dt9812_ao_rinsn;
 
-	printk("comedi%d: successfully attached to dt9812.\n", dev->minor);
+	printk(KERN_INFO "comedi%d: successfully attached to dt9812.\n",
+	       dev->minor);
 
 	down(&dt9812_mutex);
-	// Find a slot for the comedi device
+	/* Find a slot for the comedi device */
 	{
 		slot_dt9812_t *first = NULL;
 		slot_dt9812_t *best = NULL;
 		for (i = 0; i < DT9812_NUM_SLOTS; i++) {
 			if (!first && !dt9812[i].comedi) {
-				// First free slot from comedi side
+				/* First free slot from comedi side */
 				first = &dt9812[i];
 			}
 			if (!best &&
-				dt9812[i].usb
-				&& dt9812[i].usb->serial == devpriv->serial) {
-				// We have an attaced device with matching ID
+			    dt9812[i].usb &&
+			    dt9812[i].usb->serial == devpriv->serial) {
+				/* We have an attaced device with matching ID */
 				best = &dt9812[i];
 			}
 		}
-		if (!best) {
+		if (!best)
 			best = first;
-		}
 		if (best) {
 			down(&best->mutex);
 			best->comedi = devpriv;
@@ -897,9 +901,8 @@ static int dt9812_attach(comedi_device * dev, comedi_devconfig * it)
 	return 0;
 }
 
-static int dt9812_detach(comedi_device * dev)
+static int dt9812_detach(comedi_device *dev)
 {
-
 	return 0;
 }
 
@@ -914,7 +917,7 @@ static int __init usb_dt9812_init(void)
 {
 	int result, i;
 
-	// Initialize all driver slots
+	/* Initialize all driver slots */
 	for (i = 0; i < DT9812_NUM_SLOTS; i++) {
 		init_MUTEX(&dt9812[i].mutex);
 		dt9812[i].serial = 0;
@@ -923,12 +926,14 @@ static int __init usb_dt9812_init(void)
 	}
 	dt9812[12].serial = 0x0;
 
-	// register with the USB subsystem
+	/* register with the USB subsystem */
 	result = usb_register(&dt9812_usb_driver);
 	if (result) {
-		err("usb_register failed. Error number %d", result);
+		printk(KERN_ERR KBUILD_MODNAME
+		       ": usb_register failed. Error number %d\n", result);
+		return result;
 	}
-	// register with comedi
+	/* register with comedi */
 	result = comedi_driver_register(&dt9812_comedi_driver);
 	if (result) {
 		usb_deregister(&dt9812_usb_driver);
@@ -940,7 +945,7 @@ static int __init usb_dt9812_init(void)
 
 static void __exit usb_dt9812_exit(void)
 {
-	// unregister with comedi
+	/* unregister with comedi */
 	comedi_driver_unregister(&dt9812_comedi_driver);
 
 	/* deregister this driver with the USB subsystem */
@@ -953,5 +958,3 @@ module_exit(usb_dt9812_exit);
 MODULE_AUTHOR("Anders Blomdell <anders.blomdell@control.lth.se>");
 MODULE_DESCRIPTION("Comedi DT9812 driver");
 MODULE_LICENSE("GPL");
-
-#endif // LINUX_VERSION_CODE >= KERNEL_VERSION(2,6,0)

commit 63274cd7d38a3322d90b66a5bc976de1fb899051
Author: Anders Blomdell <anders.blomdell@control.lth.se>
Date:   Fri Nov 14 14:52:21 2008 -0800

    Staging: comedi: add usb dt9812 driver
    
    Data Translation DT9812 USB driver
    
    From: Anders Blomdell <anders.blomdell@control.lth.se>
    Cc: David Schleef <ds@schleef.org>
    Cc: Frank Mori Hess <fmhess@users.sourceforge.net>
    Cc: Ian Abbott <abbotti@mev.co.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>

diff --git a/drivers/staging/comedi/drivers/dt9812.c b/drivers/staging/comedi/drivers/dt9812.c
new file mode 100644
index 000000000000..d6fb16240061
--- /dev/null
+++ b/drivers/staging/comedi/drivers/dt9812.c
@@ -0,0 +1,957 @@
+/*
+ * comedi/drivers/dt9812.c
+ *   COMEDI driver for DataTranslation DT9812 USB module
+ *
+ * Copyright (C) 2005 Anders Blomdell <anders.blomdell@control.lth.se>
+ *
+ * COMEDI - Linux Control and Measurement Device Interface
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+
+ *  This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
+ *
+ */
+
+/*
+Driver: dt9812
+Description: Data Translation DT9812 USB module
+Author: anders.blomdell@control.lth.se (Anders Blomdell)
+Status: in development
+Devices: [Data Translation] DT9812 (dt9812)
+Updated: Sun Nov 20 20:18:34 EST 2005
+
+This driver works, but bulk transfers not implemented. Might be a starting point
+for someone else. I found out too late that USB has too high latencies (>1 ms)
+for my needs.
+*/
+
+/*
+ * Nota Bene:
+ *   1. All writes to command pipe has to be 32 bytes (ISP1181B SHRTP=0 ?)
+ *   2. The DDK source (as of sep 2005) is in error regarding the
+ *      input MUX bits (example code says P4, but firmware schematics
+ *      says P1).
+ */
+
+#include <linux/version.h>
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(2,6,0)
+
+#include <linux/kernel.h>
+#include <linux/errno.h>
+#include <linux/init.h>
+#include <linux/slab.h>
+#include <linux/module.h>
+#include <linux/kref.h>
+#include <asm/uaccess.h>
+#include <linux/usb.h>
+#include "../comedidev.h"
+#include "dt9812.h"
+
+#define DT9812_NUM_SLOTS 16
+
+static DECLARE_MUTEX(dt9812_mutex);
+
+static struct usb_device_id dt9812_table[] = {
+	{USB_DEVICE(0x0867, 0x9812)},
+	{}			/* Terminating entry */
+};
+
+MODULE_DEVICE_TABLE(usb, dt9812_table);
+
+typedef struct usb_dt9812 {
+	struct slot_dt9812 *slot;
+	struct usb_device *udev;
+	struct usb_interface *interface;
+	u16 vendor;
+	u16 product;
+	u16 device;
+	u32 serial;
+	struct {
+		__u8 addr;
+		size_t size;
+	} message_pipe, command_write, command_read, write_stream, read_stream;
+	struct kref kref;
+	u16 analog_out_shadow[2];
+	u8 digital_out_shadow;
+} usb_dt9812_t;
+
+typedef struct comedi_dt9812 {
+	struct slot_dt9812 *slot;
+	u32 serial;
+} comedi_dt9812_t;
+
+typedef struct slot_dt9812 {
+	struct semaphore mutex;
+	u32 serial;
+	usb_dt9812_t *usb;
+	comedi_dt9812_t *comedi;
+} slot_dt9812_t;
+
+static const comedi_lrange dt9812_10_ain_range = { 1, {
+			BIP_RANGE(10),
+	}
+};
+
+static const comedi_lrange dt9812_2pt5_ain_range = { 1, {
+			UNI_RANGE(2.5),
+	}
+};
+
+static const comedi_lrange dt9812_10_aout_range = { 1, {
+			BIP_RANGE(10),
+	}
+};
+
+static const comedi_lrange dt9812_2pt5_aout_range = { 1, {
+			UNI_RANGE(2.5),
+	}
+};
+
+static slot_dt9812_t dt9812[DT9812_NUM_SLOTS];
+
+// Useful shorthand access to private data
+#define devpriv ((comedi_dt9812_t *)dev->private)
+
+static inline usb_dt9812_t *to_dt9812_dev(struct kref *d)
+{
+	return container_of(d, usb_dt9812_t, kref);
+}
+
+static void dt9812_delete(struct kref *kref)
+{
+	usb_dt9812_t *dev = to_dt9812_dev(kref);
+
+	usb_put_dev(dev->udev);
+	kfree(dev);
+}
+
+static int dt9812_read_info(usb_dt9812_t * dev,
+	int offset, void *buf, size_t buf_size)
+{
+	dt9812_usb_cmd_t cmd;
+	int count, retval;
+
+	cmd.cmd = cpu_to_le32(DT9812_R_FLASH_DATA);
+	cmd.u.flash_data_info.address =
+		cpu_to_le16(DT9812_DIAGS_BOARD_INFO_ADDR + offset);
+	cmd.u.flash_data_info.numbytes = cpu_to_le16(buf_size);
+
+	count = 32;
+	retval = usb_bulk_msg(dev->udev, usb_sndbulkpipe(dev->udev, dev->command_write.addr), &cmd, 32,	// DT9812 only responds to 32 byte writes!!
+		&count, HZ * 1);
+	if (retval == 0) {
+		retval = usb_bulk_msg(dev->udev,
+			usb_rcvbulkpipe(dev->udev, dev->command_read.addr),
+			buf, buf_size, &count, HZ * 1);
+	}
+	return retval;
+}
+
+static int dt9812_read_multiple_registers(usb_dt9812_t * dev,
+	int reg_count, u8 * address, u8 * value)
+{
+	dt9812_usb_cmd_t cmd;
+	int i, count, retval;
+
+	cmd.cmd = cpu_to_le32(DT9812_R_MULTI_BYTE_REG);
+	cmd.u.read_multi_info.count = reg_count;
+	for (i = 0; i < reg_count; i++) {
+		cmd.u.read_multi_info.address[i] = address[i];
+	}
+	count = 32;
+	retval = usb_bulk_msg(dev->udev, usb_sndbulkpipe(dev->udev, dev->command_write.addr), &cmd, 32,	// DT9812 only responds to 32 byte writes!!
+		&count, HZ * 1);
+	if (retval == 0) {
+		retval = usb_bulk_msg(dev->udev,
+			usb_rcvbulkpipe(dev->udev, dev->command_read.addr),
+			value, reg_count, &count, HZ * 1);
+	}
+	return retval;
+}
+
+static int dt9812_write_multiple_registers(usb_dt9812_t * dev,
+	int reg_count, u8 * address, u8 * value)
+{
+	dt9812_usb_cmd_t cmd;
+	int i, count, retval;
+
+	cmd.cmd = cpu_to_le32(DT9812_W_MULTI_BYTE_REG);
+	cmd.u.read_multi_info.count = reg_count;
+	for (i = 0; i < reg_count; i++) {
+		cmd.u.write_multi_info.write[i].address = address[i];
+		cmd.u.write_multi_info.write[i].value = value[i];
+	}
+	retval = usb_bulk_msg(dev->udev, usb_sndbulkpipe(dev->udev, dev->command_write.addr), &cmd, 32,	// DT9812 only responds to 32 byte writes!!
+		&count, HZ * 1);
+	return retval;
+}
+
+static int dt9812_rmw_multiple_registers(usb_dt9812_t * dev,
+	int reg_count, dt9812_rmw_byte_t rmw[])
+{
+	dt9812_usb_cmd_t cmd;
+	int i, count, retval;
+
+	cmd.cmd = cpu_to_le32(DT9812_RMW_MULTI_BYTE_REG);
+	cmd.u.rmw_multi_info.count = reg_count;
+	for (i = 0; i < reg_count; i++) {
+		cmd.u.rmw_multi_info.rmw[i] = rmw[i];
+	}
+	retval = usb_bulk_msg(dev->udev, usb_sndbulkpipe(dev->udev, dev->command_write.addr), &cmd, 32,	// DT9812 only responds to 32 byte writes!!
+		&count, HZ * 1);
+	return retval;
+}
+
+static int dt9812_digital_in(slot_dt9812_t * slot, u8 * bits)
+{
+	int result = -ENODEV;
+
+	down(&slot->mutex);
+	if (slot->usb) {
+		u8 reg[2] = { F020_SFR_P3, F020_SFR_P1 };
+		u8 value[2];
+
+		result = dt9812_read_multiple_registers(slot->usb, 2, reg,
+			value);
+		if (result == 0) {
+			// bits 0-6 in F020_SFR_P3 are bits 0-6 in the digital input port
+			// bit 3 in F020_SFR_P1 is bit 7 in the digital input port
+			*bits = (value[0] & 0x7f) | ((value[1] & 0x08) << 4);
+//    printk("%2.2x, %2.2x -> %2.2x\n", value[0], value[1], *bits);
+		}
+	}
+	up(&slot->mutex);
+
+	return result;
+}
+
+static int dt9812_digital_out(slot_dt9812_t * slot, u8 bits)
+{
+	int result = -ENODEV;
+
+	down(&slot->mutex);
+	if (slot->usb) {
+		u8 reg[1];
+		u8 value[1];
+
+		reg[0] = F020_SFR_P2;
+		value[0] = bits;
+		result = dt9812_write_multiple_registers(slot->usb, 1, reg,
+			value);
+		slot->usb->digital_out_shadow = bits;
+	}
+	up(&slot->mutex);
+	return result;
+}
+
+static int dt9812_digital_out_shadow(slot_dt9812_t * slot, u8 * bits)
+{
+	int result = -ENODEV;
+
+	down(&slot->mutex);
+	if (slot->usb) {
+		*bits = slot->usb->digital_out_shadow;
+		result = 0;
+	}
+	up(&slot->mutex);
+	return result;
+}
+
+static void dt9812_configure_mux(usb_dt9812_t * dev,
+	dt9812_rmw_byte_t * rmw, int channel)
+{
+	if (dev->device == DT9812_DEVID_DT9812_10) {
+		// In the DT9812/10V MUX is selected by P1.5-7
+		rmw->address = F020_SFR_P1;
+		rmw->and_mask = 0xe0;
+		rmw->or_value = channel << 5;
+	} else {
+		// In the DT9812/2.5V, the internal mux is selected by bits 0:2
+		rmw->address = F020_SFR_AMX0SL;
+		rmw->and_mask = 0xff;
+		rmw->or_value = channel & 0x07;
+	}
+}
+
+static void dt9812_configure_gain(usb_dt9812_t * dev,
+	dt9812_rmw_byte_t * rmw, dt9812_gain_t gain)
+{
+	if (dev->device == DT9812_DEVID_DT9812_10) {
+		// In the DT9812/10V, there is an external gain of 0.5
+		gain <<= 1;
+	}
+
+	rmw->address = F020_SFR_ADC0CF;
+	rmw->and_mask =
+		F020_MASK_ADC0CF_AMP0GN2 |
+		F020_MASK_ADC0CF_AMP0GN1 | F020_MASK_ADC0CF_AMP0GN0;
+	switch (gain) {
+		// 000 -> Gain =  1
+		// 001 -> Gain =  2
+		// 010 -> Gain =  4
+		// 011 -> Gain =  8
+		// 10x -> Gain = 16
+		// 11x -> Gain =  0.5
+	case DT9812_GAIN_0PT5:{
+			rmw->or_value = F020_MASK_ADC0CF_AMP0GN2
+				|| F020_MASK_ADC0CF_AMP0GN1;
+		}
+		break;
+	case DT9812_GAIN_1:{
+			rmw->or_value = 0x00;
+		}
+		break;
+	case DT9812_GAIN_2:{
+			rmw->or_value = F020_MASK_ADC0CF_AMP0GN0;
+		}
+		break;
+	case DT9812_GAIN_4:{
+			rmw->or_value = F020_MASK_ADC0CF_AMP0GN1;
+		}
+		break;
+	case DT9812_GAIN_8:{
+			rmw->or_value = F020_MASK_ADC0CF_AMP0GN1
+				|| F020_MASK_ADC0CF_AMP0GN0;
+		}
+		break;
+	case DT9812_GAIN_16:{
+			rmw->or_value = F020_MASK_ADC0CF_AMP0GN2;
+		}
+		break;
+	default:{
+			err("Illegal gain %d\n", gain);
+		}
+	}
+}
+
+static int dt9812_analog_in(slot_dt9812_t * slot,
+	int channel, u16 * value, dt9812_gain_t gain)
+{
+	int result = -ENODEV;
+
+	down(&slot->mutex);
+	if (slot->usb) {
+		dt9812_rmw_byte_t rmw[3];
+
+		// 1 select the gain
+		dt9812_configure_gain(slot->usb, &rmw[0], gain);
+
+		// 2 set the MUX to select the channel
+		dt9812_configure_mux(slot->usb, &rmw[1], channel);
+
+		// 3 start conversion
+		rmw[2].address = F020_SFR_ADC0CN;
+		rmw[2].and_mask = 0xff;
+		rmw[2].or_value =
+			F020_MASK_ADC0CN_AD0EN | F020_MASK_ADC0CN_AD0BUSY;
+
+		result = dt9812_rmw_multiple_registers(slot->usb, 3, rmw);
+		if (result == 0) {
+			// read the status and ADC
+			u8 reg[3] = { F020_SFR_ADC0CN, F020_SFR_ADC0H,
+				F020_SFR_ADC0L
+			};
+			u8 val[3];
+			result = dt9812_read_multiple_registers(slot->usb, 3,
+				reg, val);
+			if (result == 0) {
+				// An ADC conversion takes 16 SAR clocks cycles, i.e. about 9us.
+				// Therefore, between the instant that AD0BUSY was set via
+				// dt9812_rmw_multiple_registers and the read of AD0BUSY via
+				// dt9812_read_multiple_registers, the conversion
+				// should be complete since these two operations require two USB
+				// transactions each taking at least a millisecond to complete.
+				// However, lets make sure that conversion is finished.
+				if ((val[0] & (F020_MASK_ADC0CN_AD0INT |
+							F020_MASK_ADC0CN_AD0BUSY))
+					== F020_MASK_ADC0CN_AD0INT) {
+					switch (slot->usb->device) {
+					case DT9812_DEVID_DT9812_10:{
+							// For DT9812-10V the personality module set the encoding to 2's
+							// complement. Hence, convert it before returning it
+							*value = ((val[1] << 8)
+								| val[2]) +
+								0x800;
+						}
+						break;
+					case DT9812_DEVID_DT9812_2PT5:{
+							*value = (val[1] << 8) |
+								val[2];
+						}
+						break;
+					}
+				}
+			}
+		}
+	}
+	up(&slot->mutex);
+	return result;
+}
+
+static int dt9812_analog_out_shadow(slot_dt9812_t * slot, int channel,
+	u16 * value)
+{
+	int result = -ENODEV;
+
+	down(&slot->mutex);
+	if (slot->usb) {
+		*value = slot->usb->analog_out_shadow[channel];
+		result = 0;
+	}
+	up(&slot->mutex);
+
+	return result;
+}
+
+static int dt9812_analog_out(slot_dt9812_t * slot, int channel, u16 value)
+{
+	int result = -ENODEV;
+
+	down(&slot->mutex);
+	if (slot->usb) {
+		dt9812_rmw_byte_t rmw[3];
+
+		switch (channel) {
+		case 0:{
+				// 1. Set DAC mode
+				rmw[0].address = F020_SFR_DAC0CN;
+				rmw[0].and_mask = 0xff;
+				rmw[0].or_value = F020_MASK_DACxCN_DACxEN;
+
+				// 2 load low byte of DAC value first
+				rmw[1].address = F020_SFR_DAC0L;
+				rmw[1].and_mask = 0xff;
+				rmw[1].or_value = value & 0xff;
+
+				// 3 load high byte of DAC value next to latch the 12-bit value
+				rmw[2].address = F020_SFR_DAC0H;
+				rmw[2].and_mask = 0xff;
+				rmw[2].or_value = (value >> 8) & 0xf;
+			}
+			break;
+		case 1:{
+				// 1. Set DAC mode
+				rmw[0].address = F020_SFR_DAC1CN;
+				rmw[0].and_mask = 0xff;
+				rmw[0].or_value = F020_MASK_DACxCN_DACxEN;
+
+				// 2 load low byte of DAC value first
+				rmw[1].address = F020_SFR_DAC1L;
+				rmw[1].and_mask = 0xff;
+				rmw[1].or_value = value & 0xff;
+
+				// 3 load high byte of DAC value next to latch the 12-bit value
+				rmw[2].address = F020_SFR_DAC1H;
+				rmw[2].and_mask = 0xff;
+				rmw[2].or_value = (value >> 8) & 0xf;
+			}
+			break;
+		}
+		result = dt9812_rmw_multiple_registers(slot->usb, 3, rmw);
+		slot->usb->analog_out_shadow[channel] = value;
+	}
+	up(&slot->mutex);
+
+	return result;
+}
+
+/*
+ * USB framework functions
+ */
+
+static int dt9812_probe(struct usb_interface *interface,
+	const struct usb_device_id *id)
+{
+	int retval = -ENOMEM;
+	usb_dt9812_t *dev = NULL;
+	struct usb_host_interface *iface_desc;
+	struct usb_endpoint_descriptor *endpoint;
+	int i;
+	u8 fw;
+
+	// allocate memory for our device state and initialize it
+	dev = kzalloc(sizeof(*dev), GFP_KERNEL);
+	if (dev == NULL) {
+		err("Out of memory");
+		goto error;
+	}
+	kref_init(&dev->kref);
+
+	dev->udev = usb_get_dev(interface_to_usbdev(interface));
+	dev->interface = interface;
+
+	// Check endpoints
+	iface_desc = interface->cur_altsetting;
+
+	if (iface_desc->desc.bNumEndpoints != 5) {
+		err("Wrong number of endpints.");
+		retval = -ENODEV;
+		goto error;
+	}
+
+	for (i = 0; i < iface_desc->desc.bNumEndpoints; ++i) {
+		int direction = -1;
+		endpoint = &iface_desc->endpoint[i].desc;
+		switch (i) {
+		case 0:{
+				direction = USB_DIR_IN;
+				dev->message_pipe.addr =
+					endpoint->bEndpointAddress;
+				dev->message_pipe.size =
+					le16_to_cpu(endpoint->wMaxPacketSize);
+			}
+			break;
+		case 1:{
+				direction = USB_DIR_OUT;
+				dev->command_write.addr =
+					endpoint->bEndpointAddress;
+				dev->command_write.size =
+					le16_to_cpu(endpoint->wMaxPacketSize);
+			}
+			break;
+		case 2:{
+				direction = USB_DIR_IN;
+				dev->command_read.addr =
+					endpoint->bEndpointAddress;
+				dev->command_read.size =
+					le16_to_cpu(endpoint->wMaxPacketSize);
+			}
+			break;
+		case 3:{
+				direction = USB_DIR_OUT;
+				dev->write_stream.addr =
+					endpoint->bEndpointAddress;
+				dev->write_stream.size =
+					le16_to_cpu(endpoint->wMaxPacketSize);
+			}
+			break;
+		case 4:{
+				direction = USB_DIR_IN;
+				dev->read_stream.addr =
+					endpoint->bEndpointAddress;
+				dev->read_stream.size =
+					le16_to_cpu(endpoint->wMaxPacketSize);
+			}
+			break;
+		}
+		if ((endpoint->bEndpointAddress & USB_DIR_IN) != direction) {
+			err("Endpoint has wrong direction.");
+			retval = -ENODEV;
+			goto error;
+		}
+	}
+	if (dt9812_read_info(dev, 0, &fw, sizeof(fw)) != 0) {
+		// Seems like a configuration reset is necessary if driver
+		// is reloaded while device is attached
+		int i;
+
+		usb_reset_configuration(dev->udev);
+		for (i = 0; i < 10; i++) {
+			retval = dt9812_read_info(dev, 1, &fw, sizeof(fw));
+			if (retval == 0) {
+				printk("usb_reset_configuration succeded after %d iterations\n", i);
+				break;
+			}
+		}
+	}
+
+	if (dt9812_read_info(dev, 1, &dev->vendor, sizeof(dev->vendor)) != 0) {
+		err("Failed to read vendor.");
+		retval = -ENODEV;
+		goto error;
+	}
+	if (dt9812_read_info(dev, 3, &dev->product, sizeof(dev->product)) != 0) {
+		err("Failed to read product.");
+		retval = -ENODEV;
+		goto error;
+	}
+	if (dt9812_read_info(dev, 5, &dev->device, sizeof(dev->device)) != 0) {
+		err("Failed to read device.");
+		retval = -ENODEV;
+		goto error;
+	}
+	if (dt9812_read_info(dev, 7, &dev->serial, sizeof(dev->serial)) != 0) {
+		err("Failed to read serial.");
+		retval = -ENODEV;
+		goto error;
+	}
+
+	dev->vendor = le16_to_cpu(dev->vendor);
+	dev->product = le16_to_cpu(dev->product);
+	dev->device = le16_to_cpu(dev->device);
+	dev->serial = le32_to_cpu(dev->serial);
+	switch (dev->device) {
+	case DT9812_DEVID_DT9812_10:{
+			dev->analog_out_shadow[0] = 0x0800;
+			dev->analog_out_shadow[1] = 0x800;
+		}
+		break;
+	case DT9812_DEVID_DT9812_2PT5:{
+			dev->analog_out_shadow[0] = 0x0000;
+			dev->analog_out_shadow[1] = 0x0000;
+		}
+		break;
+	}
+	dev->digital_out_shadow = 0;
+
+	// save our data pointer in this interface device a
+	usb_set_intfdata(interface, dev);
+
+	// let the user know what node this device is now attached to
+	dev_info(&interface->dev, "USB DT9812 (%4.4x.%4.4x.%4.4x) #0x%8.8x\n",
+		 dev->vendor, dev->product, dev->device, dev->serial);
+
+	down(&dt9812_mutex);
+	{
+		// Find a slot for the USB device
+		slot_dt9812_t *first = NULL;
+		slot_dt9812_t *best = NULL;
+
+		for (i = 0; i < DT9812_NUM_SLOTS; i++) {
+			if (!first && !dt9812[i].usb && dt9812[i].serial == 0) {
+				first = &dt9812[i];
+			}
+			if (!best && dt9812[i].serial == dev->serial) {
+				best = &dt9812[i];
+			}
+		}
+
+		if (!best) {
+			best = first;
+		}
+
+		if (best) {
+			down(&best->mutex);
+			best->usb = dev;
+			dev->slot = best;
+			up(&best->mutex);
+		}
+	}
+	up(&dt9812_mutex);
+
+	return 0;
+
+      error:
+	if (dev) {
+		kref_put(&dev->kref, dt9812_delete);
+	}
+	return retval;
+}
+
+static void dt9812_disconnect(struct usb_interface *interface)
+{
+	usb_dt9812_t *dev;
+	int minor = interface->minor;
+
+	down(&dt9812_mutex);
+	dev = usb_get_intfdata(interface);
+	if (dev->slot) {
+		down(&dev->slot->mutex);
+		dev->slot->usb = NULL;
+		up(&dev->slot->mutex);
+		dev->slot = NULL;
+	}
+	usb_set_intfdata(interface, NULL);
+	up(&dt9812_mutex);
+
+	/* queue final destruction */
+	kref_put(&dev->kref, dt9812_delete);
+
+	dev_info(&interface->dev, "USB Dt9812 #%d now disconnected\n", minor);
+}
+
+static struct usb_driver dt9812_usb_driver = {
+#ifdef COMEDI_HAVE_USB_DRIVER_OWNER
+	.owner = THIS_MODULE,
+#endif
+	.name = "dt9812",
+	.probe = dt9812_probe,
+	.disconnect = dt9812_disconnect,
+	.id_table = dt9812_table,
+};
+
+/*
+ * Comedi functions
+ */
+
+static void dt9812_comedi_open(comedi_device * dev)
+{
+	down(&devpriv->slot->mutex);
+	if (devpriv->slot->usb) {
+		// We have an attached device, fill in current range info
+		comedi_subdevice *s;
+
+		s = &dev->subdevices[0];
+		s->n_chan = 8;
+		s->maxdata = 1;
+
+		s = &dev->subdevices[1];
+		s->n_chan = 8;
+		s->maxdata = 1;
+
+		s = &dev->subdevices[2];
+		s->n_chan = 8;
+		switch (devpriv->slot->usb->device) {
+		case 0:{
+				s->maxdata = 4095;
+				s->range_table = &dt9812_10_ain_range;
+			}
+			break;
+		case 1:{
+				s->maxdata = 4095;
+				s->range_table = &dt9812_2pt5_ain_range;
+			}
+			break;
+		}
+
+		s = &dev->subdevices[3];
+		s->n_chan = 2;
+		switch (devpriv->slot->usb->device) {
+		case 0:{
+				s->maxdata = 4095;
+				s->range_table = &dt9812_10_aout_range;
+			}
+			break;
+		case 1:{
+				s->maxdata = 4095;
+				s->range_table = &dt9812_2pt5_aout_range;
+			}
+			break;
+		}
+	}
+	up(&devpriv->slot->mutex);
+}
+
+static int dt9812_di_rinsn(comedi_device * dev, comedi_subdevice * s,
+	comedi_insn * insn, lsampl_t * data)
+{
+	int n;
+	u8 bits = 0;
+
+	dt9812_digital_in(devpriv->slot, &bits);
+	for (n = 0; n < insn->n; n++) {
+		data[n] = ((1 << insn->chanspec) & bits) != 0;
+	}
+	return n;
+}
+
+static int dt9812_do_winsn(comedi_device * dev, comedi_subdevice * s,
+	comedi_insn * insn, lsampl_t * data)
+{
+	int n;
+	u8 bits = 0;
+
+	dt9812_digital_out_shadow(devpriv->slot, &bits);
+	for (n = 0; n < insn->n; n++) {
+		u8 mask = 1 << insn->chanspec;
+
+		bits &= ~mask;
+		if (data[n]) {
+			bits |= mask;
+		}
+	}
+	dt9812_digital_out(devpriv->slot, bits);
+	return n;
+}
+
+static int dt9812_ai_rinsn(comedi_device * dev, comedi_subdevice * s,
+	comedi_insn * insn, lsampl_t * data)
+{
+	int n;
+
+	for (n = 0; n < insn->n; n++) {
+		u16 value = 0;
+
+		dt9812_analog_in(devpriv->slot, insn->chanspec, &value,
+			DT9812_GAIN_1);
+		data[n] = value;
+	}
+	return n;
+}
+
+static int dt9812_ao_rinsn(comedi_device * dev, comedi_subdevice * s,
+	comedi_insn * insn, lsampl_t * data)
+{
+	int n;
+
+	for (n = 0; n < insn->n; n++) {
+		u16 value = 0;
+
+		dt9812_analog_out_shadow(devpriv->slot, insn->chanspec, &value);
+		data[n] = value;
+	}
+	return n;
+}
+
+static int dt9812_ao_winsn(comedi_device * dev, comedi_subdevice * s,
+	comedi_insn * insn, lsampl_t * data)
+{
+	int n;
+
+	for (n = 0; n < insn->n; n++) {
+		dt9812_analog_out(devpriv->slot, insn->chanspec, data[n]);
+	}
+	return n;
+}
+
+static int dt9812_attach(comedi_device * dev, comedi_devconfig * it)
+{
+	int i;
+	comedi_subdevice *s;
+
+	dev->board_name = "dt9812";
+
+	if (alloc_private(dev, sizeof(comedi_dt9812_t)) < 0) {
+		return -ENOMEM;
+	}
+	// Special open routine, since USB unit may be unattached at
+	// comedi_config time, hence range can not be determined
+	dev->open = dt9812_comedi_open;
+
+	devpriv->serial = it->options[0];
+
+	// Allocate subdevices
+	if (alloc_subdevices(dev, 4) < 0) {
+		return -ENOMEM;
+	}
+
+	/* digital input subdevice */
+	s = dev->subdevices + 0;
+	s->type = COMEDI_SUBD_DI;
+	s->subdev_flags = SDF_READABLE;
+	s->n_chan = 0;
+	s->maxdata = 1;
+	s->range_table = &range_digital;
+	s->insn_read = &dt9812_di_rinsn;
+
+	/* digital output subdevice */
+	s = dev->subdevices + 1;
+	s->type = COMEDI_SUBD_DO;
+	s->subdev_flags = SDF_WRITEABLE;
+	s->n_chan = 0;
+	s->maxdata = 1;
+	s->range_table = &range_digital;
+	s->insn_write = &dt9812_do_winsn;
+
+	/* analog input subdevice */
+	s = dev->subdevices + 2;
+	s->type = COMEDI_SUBD_AI;
+	s->subdev_flags = SDF_READABLE | SDF_GROUND;
+	s->n_chan = 0;
+	s->maxdata = 1;
+	s->range_table = 0;
+	s->insn_read = &dt9812_ai_rinsn;
+
+	/* analog output subdevice */
+	s = dev->subdevices + 3;
+	s->type = COMEDI_SUBD_AO;
+	s->subdev_flags = SDF_WRITEABLE;
+	s->n_chan = 0;
+	s->maxdata = 1;
+	s->range_table = 0;
+	s->insn_write = &dt9812_ao_winsn;
+	s->insn_read = &dt9812_ao_rinsn;
+
+	printk("comedi%d: successfully attached to dt9812.\n", dev->minor);
+
+	down(&dt9812_mutex);
+	// Find a slot for the comedi device
+	{
+		slot_dt9812_t *first = NULL;
+		slot_dt9812_t *best = NULL;
+		for (i = 0; i < DT9812_NUM_SLOTS; i++) {
+			if (!first && !dt9812[i].comedi) {
+				// First free slot from comedi side
+				first = &dt9812[i];
+			}
+			if (!best &&
+				dt9812[i].usb
+				&& dt9812[i].usb->serial == devpriv->serial) {
+				// We have an attaced device with matching ID
+				best = &dt9812[i];
+			}
+		}
+		if (!best) {
+			best = first;
+		}
+		if (best) {
+			down(&best->mutex);
+			best->comedi = devpriv;
+			best->serial = devpriv->serial;
+			devpriv->slot = best;
+			up(&best->mutex);
+		}
+	}
+	up(&dt9812_mutex);
+
+	return 0;
+}
+
+static int dt9812_detach(comedi_device * dev)
+{
+
+	return 0;
+}
+
+static comedi_driver dt9812_comedi_driver = {
+	.module = THIS_MODULE,
+	.driver_name = "dt9812",
+	.attach = dt9812_attach,
+	.detach = dt9812_detach,
+};
+
+static int __init usb_dt9812_init(void)
+{
+	int result, i;
+
+	// Initialize all driver slots
+	for (i = 0; i < DT9812_NUM_SLOTS; i++) {
+		init_MUTEX(&dt9812[i].mutex);
+		dt9812[i].serial = 0;
+		dt9812[i].usb = NULL;
+		dt9812[i].comedi = NULL;
+	}
+	dt9812[12].serial = 0x0;
+
+	// register with the USB subsystem
+	result = usb_register(&dt9812_usb_driver);
+	if (result) {
+		err("usb_register failed. Error number %d", result);
+	}
+	// register with comedi
+	result = comedi_driver_register(&dt9812_comedi_driver);
+	if (result) {
+		usb_deregister(&dt9812_usb_driver);
+		err("comedi_driver_register failed. Error number %d", result);
+	}
+
+	return result;
+}
+
+static void __exit usb_dt9812_exit(void)
+{
+	// unregister with comedi
+	comedi_driver_unregister(&dt9812_comedi_driver);
+
+	/* deregister this driver with the USB subsystem */
+	usb_deregister(&dt9812_usb_driver);
+}
+
+module_init(usb_dt9812_init);
+module_exit(usb_dt9812_exit);
+
+MODULE_AUTHOR("Anders Blomdell <anders.blomdell@control.lth.se>");
+MODULE_DESCRIPTION("Comedi DT9812 driver");
+MODULE_LICENSE("GPL");
+
+#endif // LINUX_VERSION_CODE >= KERNEL_VERSION(2,6,0)
