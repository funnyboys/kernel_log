commit 0bc5b2ba455f1b35c7292b393134f249afb03154
Author: Stephen Davies <davo2002@tpg.com.au>
Date:   Thu Nov 29 12:49:18 2018 +1100

    staging: comedi: drivers: Cleanup malformed licence identifier
    
    This patch fixes multiple occurences of the checkpatch.pl warning:
    WARNING: Missing or malformed SPDX-License-Identifier tag in line 1
    
    NB. This is an additional patch and does not overlap the patch sent
    yesterday for 8255.h. Should have sent them all together.
    Newb mistake.
    
    Cc: Ian Abbott <abbotti@mev.co.uk>
    Cc: H Hartley Sweeten <hsweeten@visionengravers.com>
    Signed-off-by: Stephen Davies <davo2002@tpg.com.au>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/drivers/ni_tio_internal.h b/drivers/staging/comedi/drivers/ni_tio_internal.h
index 652a28990132..20fcd60038cd 100644
--- a/drivers/staging/comedi/drivers/ni_tio_internal.h
+++ b/drivers/staging/comedi/drivers/ni_tio_internal.h
@@ -1,4 +1,4 @@
-// SPDX-License-Identifier: GPL-2.0+
+/* SPDX-License-Identifier: GPL-2.0+ */
 /*
  * Header file for NI general purpose counter support code (ni_tio.c and
  * ni_tiocmd.c)

commit 347e244884c3be1f5bce1d93730f0c32efabba99
Author: Spencer E. Olson <olsonse@umich.edu>
Date:   Wed Oct 3 14:56:08 2018 -0600

    staging: comedi: tio: implement global tio/ctr routing
    
    Adds ability to use device-global names in command args, in particular
    cmd->start_arg (for NI_CtrArmStartTrigger), and cmd->scan_begin_arg or
    cmd->convert_arg (either is used to specify NI_CtrGate, with preference
    given to cmd->scan_begin_arg, if it is set).
    
    The actual arguments of cmd->start_arg are not fully checked against known
    register values for the particular devices because these are not documented
    or currently known.  This follows the precedence of prior versions of the
    tio driver.  Should these become known, they should be annotated in the
    route_values tables and the set of lines in ni_tio_cmdtest should be
    uncommented to allow the tests to be made.
    
    This patch also adds interface functions that allow routes for particular
    counter route destinations to be made/queried/unmade.  This allows overseer
    modules to implement test_route, connect_route, and disconnect_route.  As a
    part of these changes, various functions were cleaned up and clarified.
    
    These new interface functions allow direct writing/reading of register
    values.  This is an example of exactly what the new device-global access
    was intended to solve:  the old interface was not consistent with other
    portions of the ni_* drivers--it did not allow full register values to be
    given for various MUXes.  Instead, the old interface _did_ abstract away
    some of the actual hardware from the underlying devices, but it was not
    consistent with any other NI hardware.  Allowing the device-global
    identifiers to be used, the new patch provides for consistency across all
    ni_* drivers.  One final note:  these changes provide for backwards
    compatibility by allowing the older values to still be used in through the
    pre-existing kernel interfaces--though not in the new device-global
    test/dis/connect/route interfaces.
    
    Signed-off-by: Spencer E. Olson <olsonse@umich.edu>
    Reviewed-by: Ian Abbott <abbotti@mev.co.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/drivers/ni_tio_internal.h b/drivers/staging/comedi/drivers/ni_tio_internal.h
index f4d99d78208a..652a28990132 100644
--- a/drivers/staging/comedi/drivers/ni_tio_internal.h
+++ b/drivers/staging/comedi/drivers/ni_tio_internal.h
@@ -170,5 +170,7 @@ unsigned int ni_tio_get_soft_copy(const struct ni_gpct *counter,
 int ni_tio_arm(struct ni_gpct *counter, bool arm, unsigned int start_trigger);
 int ni_tio_set_gate_src(struct ni_gpct *counter, unsigned int gate,
 			unsigned int src);
+int ni_tio_set_gate_src_raw(struct ni_gpct *counter, unsigned int gate,
+			    unsigned int src);
 
 #endif /* _COMEDI_NI_TIO_INTERNAL_H */

commit b69839391d444882d83c85a531da8b4e75a2b2e6
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Tue Nov 7 14:58:44 2017 +0100

    staging: comedi: drivers: Remove redundant license text
    
    Now that the SPDX tag is in all comedi files, that identifies the
    license in a specific and legally-defined manner.  So the extra GPL text
    wording can be removed as it is no longer needed at all.
    
    This is done on a quest to remove the 700+ different ways that files in
    the kernel describe the GPL license text.  And there's unneeded stuff
    like the address (sometimes incorrect) for the FSF which is never
    needed.
    
    No copyright headers or other non-license-description text was removed.
    
    Cc: Ian Abbott <abbotti@mev.co.uk>
    Cc: H Hartley Sweeten <hsweeten@visionengravers.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/drivers/ni_tio_internal.h b/drivers/staging/comedi/drivers/ni_tio_internal.h
index 87b9f771ac4f..f4d99d78208a 100644
--- a/drivers/staging/comedi/drivers/ni_tio_internal.h
+++ b/drivers/staging/comedi/drivers/ni_tio_internal.h
@@ -4,16 +4,6 @@
  * ni_tiocmd.c)
  *
  * COMEDI - Linux Control and Measurement Device Interface
- *
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation; either version 2 of the License, or
- * (at your option) any later version.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
  */
 
 #ifndef _COMEDI_NI_TIO_INTERNAL_H

commit e184e2bed8fc895ce930624524d319289c1f1082
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Tue Nov 7 14:58:43 2017 +0100

    staging: comedi: add SPDX identifiers to all greybus driver files
    
    It's good to have SPDX identifiers in all files to make it easier to
    audit the kernel tree for correct licenses.
    
    Update the drivers/staging/comedi files files with the correct SPDX
    license identifier based on the license text in the file itself.  The
    SPDX identifier is a legally binding shorthand, which can be used
    instead of the full boiler plate text.
    
    This work is based on a script and data from Thomas Gleixner, Philippe
    Ombredanne, and Kate Stewart.
    
    Cc: Ian Abbott <abbotti@mev.co.uk>
    Cc: H Hartley Sweeten <hsweeten@visionengravers.com>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: Kate Stewart <kstewart@linuxfoundation.org>
    Cc: Philippe Ombredanne <pombredanne@nexb.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/drivers/ni_tio_internal.h b/drivers/staging/comedi/drivers/ni_tio_internal.h
index 4e024eb5656b..87b9f771ac4f 100644
--- a/drivers/staging/comedi/drivers/ni_tio_internal.h
+++ b/drivers/staging/comedi/drivers/ni_tio_internal.h
@@ -1,3 +1,4 @@
+// SPDX-License-Identifier: GPL-2.0+
 /*
  * Header file for NI general purpose counter support code (ni_tio.c and
  * ni_tiocmd.c)

commit bef966264b39c4396b4f5a2b2d8293b907231b1b
Author: Ian Abbott <abbotti@mev.co.uk>
Date:   Thu Dec 15 13:19:46 2016 +0000

    staging: comedi: ni_tio_internal.h: add identifiers to function parameters
    
    Fix checkpatch.pl warnings of the form "function definition argument
    'foo' should also have an identifier name".
    
    Signed-off-by: Ian Abbott <abbotti@mev.co.uk>
    Reviewed-by: H Hartley Sweeten <hsweeten@visionengravers.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/drivers/ni_tio_internal.h b/drivers/staging/comedi/drivers/ni_tio_internal.h
index b15b10833c42..4e024eb5656b 100644
--- a/drivers/staging/comedi/drivers/ni_tio_internal.h
+++ b/drivers/staging/comedi/drivers/ni_tio_internal.h
@@ -160,8 +160,9 @@
 #define GI_TC_INTERRUPT_ENABLE(x)	(((x) % 2) ? BIT(9) : BIT(6))
 #define GI_GATE_INTERRUPT_ENABLE(x)	(((x) % 2) ? BIT(10) : BIT(8))
 
-void ni_tio_write(struct ni_gpct *, unsigned int value, enum ni_gpct_register);
-unsigned int ni_tio_read(struct ni_gpct *, enum ni_gpct_register);
+void ni_tio_write(struct ni_gpct *counter, unsigned int value,
+		  enum ni_gpct_register);
+unsigned int ni_tio_read(struct ni_gpct *counter, enum ni_gpct_register);
 
 static inline bool
 ni_tio_counting_mode_registers_present(const struct ni_gpct_device *counter_dev)
@@ -170,12 +171,13 @@ ni_tio_counting_mode_registers_present(const struct ni_gpct_device *counter_dev)
 	return counter_dev->variant != ni_gpct_variant_e_series;
 }
 
-void ni_tio_set_bits(struct ni_gpct *, enum ni_gpct_register reg,
+void ni_tio_set_bits(struct ni_gpct *counter, enum ni_gpct_register reg,
 		     unsigned int mask, unsigned int value);
-unsigned int ni_tio_get_soft_copy(const struct ni_gpct *,
+unsigned int ni_tio_get_soft_copy(const struct ni_gpct *counter,
 				  enum ni_gpct_register reg);
 
-int ni_tio_arm(struct ni_gpct *, bool arm, unsigned int start_trigger);
-int ni_tio_set_gate_src(struct ni_gpct *, unsigned int gate, unsigned int src);
+int ni_tio_arm(struct ni_gpct *counter, bool arm, unsigned int start_trigger);
+int ni_tio_set_gate_src(struct ni_gpct *counter, unsigned int gate,
+			unsigned int src);
 
 #endif /* _COMEDI_NI_TIO_INTERNAL_H */

commit 51f2e4eb2882209c84c2546b5a9b5c638b850f95
Author: H Hartley Sweeten <hsweeten@visionengravers.com>
Date:   Wed Mar 23 15:36:44 2016 -0700

    staging: comedi: ni_tio_internal: export {read, write)_register()
    
    Move these inline functions out of the header and export them instead.
    These functions have pretty generic names, rename them.
    
    Fix the checkpatch.pl issues:
    WARNING: Prefer 'unsigned int' to bare use of 'unsigned'
    CHECK: Avoid crashing the kernel - try using WARN_ON & recovery code
           rather than BUG() or BUG_ON()
    
    Signed-off-by: H Hartley Sweeten <hsweeten@visionengravers.com>
    Reviewed-by: Ian Abbott <abbotti@mev.co.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/drivers/ni_tio_internal.h b/drivers/staging/comedi/drivers/ni_tio_internal.h
index 1e795fd6f288..b15b10833c42 100644
--- a/drivers/staging/comedi/drivers/ni_tio_internal.h
+++ b/drivers/staging/comedi/drivers/ni_tio_internal.h
@@ -160,19 +160,8 @@
 #define GI_TC_INTERRUPT_ENABLE(x)	(((x) % 2) ? BIT(9) : BIT(6))
 #define GI_GATE_INTERRUPT_ENABLE(x)	(((x) % 2) ? BIT(10) : BIT(8))
 
-static inline void write_register(struct ni_gpct *counter, unsigned bits,
-				  enum ni_gpct_register reg)
-{
-	BUG_ON(reg >= NITIO_NUM_REGS);
-	counter->counter_dev->write_register(counter, bits, reg);
-}
-
-static inline unsigned read_register(struct ni_gpct *counter,
-				     enum ni_gpct_register reg)
-{
-	BUG_ON(reg >= NITIO_NUM_REGS);
-	return counter->counter_dev->read_register(counter, reg);
-}
+void ni_tio_write(struct ni_gpct *, unsigned int value, enum ni_gpct_register);
+unsigned int ni_tio_read(struct ni_gpct *, enum ni_gpct_register);
 
 static inline bool
 ni_tio_counting_mode_registers_present(const struct ni_gpct_device *counter_dev)

commit 73b2d13607f075ff27abbf75d57320a8b9f82461
Author: H Hartley Sweeten <hsweeten@visionengravers.com>
Date:   Wed Mar 23 15:36:43 2016 -0700

    staging: comedi: ni_tio_internal: simplify ni_tio_counting_mode_registers_present()
    
    Only the e series gpct variant does not have counting mode registers.
    Simplfy this function. For aesthetics, return bool instead of int.
    
    This fixes the checkpatch.pl issues:
    CHECK: spaces preferred around that '*' (ctx:ExV)
    CHECK: Avoid crashing the kernel - try using WARN_ON & recovery code
           rather than BUG() or BUG_ON()
    
    Signed-off-by: H Hartley Sweeten <hsweeten@visionengravers.com>
    Reviewed-by: Ian Abbott <abbotti@mev.co.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/drivers/ni_tio_internal.h b/drivers/staging/comedi/drivers/ni_tio_internal.h
index c8ad66a9237f..1e795fd6f288 100644
--- a/drivers/staging/comedi/drivers/ni_tio_internal.h
+++ b/drivers/staging/comedi/drivers/ni_tio_internal.h
@@ -174,21 +174,11 @@ static inline unsigned read_register(struct ni_gpct *counter,
 	return counter->counter_dev->read_register(counter, reg);
 }
 
-static inline int ni_tio_counting_mode_registers_present(const struct
-							 ni_gpct_device
-							 *counter_dev)
+static inline bool
+ni_tio_counting_mode_registers_present(const struct ni_gpct_device *counter_dev)
 {
-	switch (counter_dev->variant) {
-	case ni_gpct_variant_e_series:
-		return 0;
-	case ni_gpct_variant_m_series:
-	case ni_gpct_variant_660x:
-		return 1;
-	default:
-		BUG();
-		break;
-	}
-	return 0;
+	/* m series and 660x variants have counting mode registers */
+	return counter_dev->variant != ni_gpct_variant_e_series;
 }
 
 void ni_tio_set_bits(struct ni_gpct *, enum ni_gpct_register reg,

commit f4e0331f3050f051ad0e8818635fc157cf354713
Author: H Hartley Sweeten <hsweeten@visionengravers.com>
Date:   Wed Mar 23 15:36:42 2016 -0700

    staging: comedi: ni_tio: export and fix ni_tio_set_bits()
    
    Move the inline function from the header and export it instead.
    
    Fix the checkpatch.pl issue:
    WARNING: Prefer 'unsigned int' to bare use of 'unsigned'
    
    The 'unsigned' vars can safely be changed to 'unsigned int'.
    
    This allows moving ni_tio_set_bits_transient() into the driver and
    making it static.
    
    Fix the checkpatch.pl issue:
    CHECK: Avoid crashing the kernel - try using WARN_ON & recovery code
           rather than BUG() or BUG_ON()
    
    The BUG_ON() is overkill. All the drivers that call this function pass
    'register_index' values that are valid. Just check the 'register_index'
    before updating the software copy and writing the register.
    
    Signed-off-by: H Hartley Sweeten <hsweeten@visionengravers.com>
    Reviewed-by: Ian Abbott <abbotti@mev.co.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/drivers/ni_tio_internal.h b/drivers/staging/comedi/drivers/ni_tio_internal.h
index 8c9027690c36..c8ad66a9237f 100644
--- a/drivers/staging/comedi/drivers/ni_tio_internal.h
+++ b/drivers/staging/comedi/drivers/ni_tio_internal.h
@@ -191,39 +191,8 @@ static inline int ni_tio_counting_mode_registers_present(const struct
 	return 0;
 }
 
-static inline void ni_tio_set_bits_transient(struct ni_gpct *counter,
-					     enum ni_gpct_register
-					     register_index, unsigned bit_mask,
-					     unsigned bit_values,
-					     unsigned transient_bit_values)
-{
-	struct ni_gpct_device *counter_dev = counter->counter_dev;
-	unsigned long flags;
-
-	BUG_ON(register_index >= NITIO_NUM_REGS);
-	spin_lock_irqsave(&counter_dev->regs_lock, flags);
-	counter_dev->regs[register_index] &= ~bit_mask;
-	counter_dev->regs[register_index] |= (bit_values & bit_mask);
-	write_register(counter,
-		       counter_dev->regs[register_index] | transient_bit_values,
-		       register_index);
-	mmiowb();
-	spin_unlock_irqrestore(&counter_dev->regs_lock, flags);
-}
-
-/*
- * ni_tio_set_bits( ) is for safely writing to registers whose bits may be
- * twiddled in interrupt context, or whose software copy may be read in
- * interrupt context.
- */
-static inline void ni_tio_set_bits(struct ni_gpct *counter,
-				   enum ni_gpct_register register_index,
-				   unsigned bit_mask, unsigned bit_values)
-{
-	ni_tio_set_bits_transient(counter, register_index, bit_mask, bit_values,
-				  0x0);
-}
-
+void ni_tio_set_bits(struct ni_gpct *, enum ni_gpct_register reg,
+		     unsigned int mask, unsigned int value);
 unsigned int ni_tio_get_soft_copy(const struct ni_gpct *,
 				  enum ni_gpct_register reg);
 

commit 85bfafa81f8e422503d31d48ae2658675aad1929
Author: H Hartley Sweeten <hsweeten@visionengravers.com>
Date:   Wed Mar 23 15:36:41 2016 -0700

    staging: comedi: ni_tio: export and fix ni_tio_get_soft_copy()
    
    Move the inline function from the header and export it instead.
    
    For the checkpatch.pl issues:
    WARNING: Prefer 'unsigned int' to bare use of 'unsigned'
    CHECK: Avoid crashing the kernel - try using WARN_ON & recovery code
           rather than BUG() or BUG_ON()
    
    The 'unsigned' vars can safely be changed to 'unsigned int'.
    
    The BUG_ON() is overkill. All the drivers that call this function pass
    'register_index' values that are valid. Just check the 'register_index'
    and return 0 if it's not valid.
    
    Signed-off-by: H Hartley Sweeten <hsweeten@visionengravers.com>
    Reviewed-by: Ian Abbott <abbotti@mev.co.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/drivers/ni_tio_internal.h b/drivers/staging/comedi/drivers/ni_tio_internal.h
index 1e9163304692..8c9027690c36 100644
--- a/drivers/staging/comedi/drivers/ni_tio_internal.h
+++ b/drivers/staging/comedi/drivers/ni_tio_internal.h
@@ -224,25 +224,8 @@ static inline void ni_tio_set_bits(struct ni_gpct *counter,
 				  0x0);
 }
 
-/*
- * ni_tio_get_soft_copy( ) is for safely reading the software copy of a
- * register whose bits might be modified in interrupt context, or whose
- * software copy might need to be read in interrupt context.
- */
-static inline unsigned ni_tio_get_soft_copy(const struct ni_gpct *counter,
-					    enum ni_gpct_register
-					    register_index)
-{
-	struct ni_gpct_device *counter_dev = counter->counter_dev;
-	unsigned long flags;
-	unsigned value;
-
-	BUG_ON(register_index >= NITIO_NUM_REGS);
-	spin_lock_irqsave(&counter_dev->regs_lock, flags);
-	value = counter_dev->regs[register_index];
-	spin_unlock_irqrestore(&counter_dev->regs_lock, flags);
-	return value;
-}
+unsigned int ni_tio_get_soft_copy(const struct ni_gpct *,
+				  enum ni_gpct_register reg);
 
 int ni_tio_arm(struct ni_gpct *, bool arm, unsigned int start_trigger);
 int ni_tio_set_gate_src(struct ni_gpct *, unsigned int gate, unsigned int src);

commit c9813d50a514b451c4ad3acf1f5a400fff005c70
Author: H Hartley Sweeten <hsweeten@visionengravers.com>
Date:   Wed Mar 23 15:36:40 2016 -0700

    staging: comedi: ni_tio: fix ni_tio_arm() params/vars
    
    As suggested by checkpatch.pl:
    WARNING: Prefer 'unsigned int' to bare use of 'unsigned'
    
    The 'arm' parameter is really a true/false flag. For aesthetics,
    change it to a bool.
    
    Signed-off-by: H Hartley Sweeten <hsweeten@visionengravers.com>
    Reviewed-by: Ian Abbott <abbotti@mev.co.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/drivers/ni_tio_internal.h b/drivers/staging/comedi/drivers/ni_tio_internal.h
index ee02b36aa51d..1e9163304692 100644
--- a/drivers/staging/comedi/drivers/ni_tio_internal.h
+++ b/drivers/staging/comedi/drivers/ni_tio_internal.h
@@ -244,7 +244,7 @@ static inline unsigned ni_tio_get_soft_copy(const struct ni_gpct *counter,
 	return value;
 }
 
-int ni_tio_arm(struct ni_gpct *counter, int arm, unsigned start_trigger);
+int ni_tio_arm(struct ni_gpct *, bool arm, unsigned int start_trigger);
 int ni_tio_set_gate_src(struct ni_gpct *, unsigned int gate, unsigned int src);
 
 #endif /* _COMEDI_NI_TIO_INTERNAL_H */

commit a4915d543f5bbb775a5fa6d012d33606ba22389b
Author: H Hartley Sweeten <hsweeten@visionengravers.com>
Date:   Wed Mar 23 15:36:39 2016 -0700

    staging: comedi: ni_tio: fix ni_tio_set_gate_src() params/vars
    
    As suggested by checkpatch.pl:
    WARNING: Prefer 'unsigned int' to bare use of 'unsigned'
    
    Signed-off-by: H Hartley Sweeten <hsweeten@visionengravers.com>
    Reviewed-by: Ian Abbott <abbotti@mev.co.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/drivers/ni_tio_internal.h b/drivers/staging/comedi/drivers/ni_tio_internal.h
index b659f058c8dc..ee02b36aa51d 100644
--- a/drivers/staging/comedi/drivers/ni_tio_internal.h
+++ b/drivers/staging/comedi/drivers/ni_tio_internal.h
@@ -245,7 +245,6 @@ static inline unsigned ni_tio_get_soft_copy(const struct ni_gpct *counter,
 }
 
 int ni_tio_arm(struct ni_gpct *counter, int arm, unsigned start_trigger);
-int ni_tio_set_gate_src(struct ni_gpct *counter, unsigned gate_index,
-			unsigned int gate_source);
+int ni_tio_set_gate_src(struct ni_gpct *, unsigned int gate, unsigned int src);
 
 #endif /* _COMEDI_NI_TIO_INTERNAL_H */

commit f79f218ec2aa2ac761e426f54419f8d27aa46d53
Author: H Hartley Sweeten <hsweeten@visionengravers.com>
Date:   Wed Mar 23 15:36:38 2016 -0700

    staging: comedi: ni_tio_internal.h: fix block comment issues
    
    Fix the checkpatch.pl issues:
    WARNING: Block comments use * on subsequent lines
    
    Signed-off-by: H Hartley Sweeten <hsweeten@visionengravers.com>
    Reviewed-by: Ian Abbott <abbotti@mev.co.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/drivers/ni_tio_internal.h b/drivers/staging/comedi/drivers/ni_tio_internal.h
index c51e01eb3de0..b659f058c8dc 100644
--- a/drivers/staging/comedi/drivers/ni_tio_internal.h
+++ b/drivers/staging/comedi/drivers/ni_tio_internal.h
@@ -1,20 +1,19 @@
 /*
-    drivers/ni_tio_internal.h
-    Header file for NI general purpose counter support code (ni_tio.c and
-    ni_tiocmd.c)
-
-    COMEDI - Linux Control and Measurement Device Interface
-
-    This program is free software; you can redistribute it and/or modify
-    it under the terms of the GNU General Public License as published by
-    the Free Software Foundation; either version 2 of the License, or
-    (at your option) any later version.
-
-    This program is distributed in the hope that it will be useful,
-    but WITHOUT ANY WARRANTY; without even the implied warranty of
-    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-    GNU General Public License for more details.
-*/
+ * Header file for NI general purpose counter support code (ni_tio.c and
+ * ni_tiocmd.c)
+ *
+ * COMEDI - Linux Control and Measurement Device Interface
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ */
 
 #ifndef _COMEDI_NI_TIO_INTERNAL_H
 #define _COMEDI_NI_TIO_INTERNAL_H
@@ -212,7 +211,8 @@ static inline void ni_tio_set_bits_transient(struct ni_gpct *counter,
 	spin_unlock_irqrestore(&counter_dev->regs_lock, flags);
 }
 
-/* ni_tio_set_bits( ) is for safely writing to registers whose bits may be
+/*
+ * ni_tio_set_bits( ) is for safely writing to registers whose bits may be
  * twiddled in interrupt context, or whose software copy may be read in
  * interrupt context.
  */
@@ -224,10 +224,11 @@ static inline void ni_tio_set_bits(struct ni_gpct *counter,
 				  0x0);
 }
 
-/* ni_tio_get_soft_copy( ) is for safely reading the software copy of a register
-whose bits might be modified in interrupt context, or whose software copy
-might need to be read in interrupt context.
-*/
+/*
+ * ni_tio_get_soft_copy( ) is for safely reading the software copy of a
+ * register whose bits might be modified in interrupt context, or whose
+ * software copy might need to be read in interrupt context.
+ */
 static inline unsigned ni_tio_get_soft_copy(const struct ni_gpct *counter,
 					    enum ni_gpct_register
 					    register_index)

commit 12fc6688ea34bd8b378e105da46ca016177f7c84
Author: H Hartley Sweeten <hsweeten@visionengravers.com>
Date:   Wed Mar 23 15:36:37 2016 -0700

    staging: comedi: ni_tio_internal.h: tidy up bit defines
    
    Fix the checkpatch.pl issues:
    CHECK: Prefer using the BIT macro
    
    Signed-off-by: H Hartley Sweeten <hsweeten@visionengravers.com>
    Reviewed-by: Ian Abbott <abbotti@mev.co.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/drivers/ni_tio_internal.h b/drivers/staging/comedi/drivers/ni_tio_internal.h
index 2bceae493e23..c51e01eb3de0 100644
--- a/drivers/staging/comedi/drivers/ni_tio_internal.h
+++ b/drivers/staging/comedi/drivers/ni_tio_internal.h
@@ -24,68 +24,73 @@
 #define NITIO_AUTO_INC_REG(x)		(NITIO_G0_AUTO_INC + (x))
 #define GI_AUTO_INC_MASK		0xff
 #define NITIO_CMD_REG(x)		(NITIO_G0_CMD + (x))
-#define GI_ARM				(1 << 0)
-#define GI_SAVE_TRACE			(1 << 1)
-#define GI_LOAD				(1 << 2)
-#define GI_DISARM			(1 << 4)
+#define GI_ARM				BIT(0)
+#define GI_SAVE_TRACE			BIT(1)
+#define GI_LOAD				BIT(2)
+#define GI_DISARM			BIT(4)
 #define GI_CNT_DIR(x)			(((x) & 0x3) << 5)
-#define GI_CNT_DIR_MASK			(3 << 5)
-#define GI_WRITE_SWITCH			(1 << 7)
-#define GI_SYNC_GATE			(1 << 8)
-#define GI_LITTLE_BIG_ENDIAN		(1 << 9)
-#define GI_BANK_SWITCH_START		(1 << 10)
-#define GI_BANK_SWITCH_MODE		(1 << 11)
-#define GI_BANK_SWITCH_ENABLE		(1 << 12)
-#define GI_ARM_COPY			(1 << 13)
-#define GI_SAVE_TRACE_COPY		(1 << 14)
-#define GI_DISARM_COPY			(1 << 15)
+#define GI_CNT_DIR_MASK			GI_CNT_DIR(3)
+#define GI_WRITE_SWITCH			BIT(7)
+#define GI_SYNC_GATE			BIT(8)
+#define GI_LITTLE_BIG_ENDIAN		BIT(9)
+#define GI_BANK_SWITCH_START		BIT(10)
+#define GI_BANK_SWITCH_MODE		BIT(11)
+#define GI_BANK_SWITCH_ENABLE		BIT(12)
+#define GI_ARM_COPY			BIT(13)
+#define GI_SAVE_TRACE_COPY		BIT(14)
+#define GI_DISARM_COPY			BIT(15)
 #define NITIO_HW_SAVE_REG(x)		(NITIO_G0_HW_SAVE + (x))
 #define NITIO_SW_SAVE_REG(x)		(NITIO_G0_SW_SAVE + (x))
 #define NITIO_MODE_REG(x)		(NITIO_G0_MODE + (x))
-#define GI_GATING_DISABLED		(0 << 0)
-#define GI_LEVEL_GATING			(1 << 0)
-#define GI_RISING_EDGE_GATING		(2 << 0)
-#define GI_FALLING_EDGE_GATING		(3 << 0)
-#define GI_GATING_MODE_MASK		(3 << 0)
-#define GI_GATE_ON_BOTH_EDGES		(1 << 2)
-#define GI_EDGE_GATE_STARTS_STOPS	(0 << 3)
-#define GI_EDGE_GATE_STOPS_STARTS	(1 << 3)
-#define GI_EDGE_GATE_STARTS		(2 << 3)
-#define GI_EDGE_GATE_NO_STARTS_OR_STOPS	(3 << 3)
-#define GI_EDGE_GATE_MODE_MASK		(3 << 3)
-#define GI_STOP_ON_GATE			(0 << 5)
-#define GI_STOP_ON_GATE_OR_TC		(1 << 5)
-#define GI_STOP_ON_GATE_OR_SECOND_TC	(2 << 5)
-#define GI_STOP_MODE_MASK		(3 << 5)
-#define GI_LOAD_SRC_SEL			(1 << 7)
-#define GI_OUTPUT_TC_PULSE		(1 << 8)
-#define GI_OUTPUT_TC_TOGGLE		(2 << 8)
-#define GI_OUTPUT_TC_OR_GATE_TOGGLE	(3 << 8)
-#define GI_OUTPUT_MODE_MASK		(3 << 8)
-#define GI_NO_HARDWARE_DISARM		(0 << 10)
-#define GI_DISARM_AT_TC			(1 << 10)
-#define GI_DISARM_AT_GATE		(2 << 10)
-#define GI_DISARM_AT_TC_OR_GATE		(3 << 10)
-#define GI_COUNTING_ONCE_MASK		(3 << 10)
-#define GI_LOADING_ON_TC		(1 << 12)
-#define GI_GATE_POL_INVERT		(1 << 13)
-#define GI_LOADING_ON_GATE		(1 << 14)
-#define GI_RELOAD_SRC_SWITCHING		(1 << 15)
+#define GI_GATING_MODE(x)		(((x) & 0x3) << 0)
+#define GI_GATING_DISABLED		GI_GATING_MODE(0)
+#define GI_LEVEL_GATING			GI_GATING_MODE(1)
+#define GI_RISING_EDGE_GATING		GI_GATING_MODE(2)
+#define GI_FALLING_EDGE_GATING		GI_GATING_MODE(3)
+#define GI_GATING_MODE_MASK		GI_GATING_MODE(3)
+#define GI_GATE_ON_BOTH_EDGES		BIT(2)
+#define GI_EDGE_GATE_MODE(x)		(((x) & 0x3) << 3)
+#define GI_EDGE_GATE_STARTS_STOPS	GI_EDGE_GATE_MODE(0)
+#define GI_EDGE_GATE_STOPS_STARTS	GI_EDGE_GATE_MODE(1)
+#define GI_EDGE_GATE_STARTS		GI_EDGE_GATE_MODE(2)
+#define GI_EDGE_GATE_NO_STARTS_OR_STOPS	GI_EDGE_GATE_MODE(3)
+#define GI_EDGE_GATE_MODE_MASK		GI_EDGE_GATE_MODE(3)
+#define GI_STOP_MODE(x)			(((x) & 0x3) << 5)
+#define GI_STOP_ON_GATE			GI_STOP_MODE(0)
+#define GI_STOP_ON_GATE_OR_TC		GI_STOP_MODE(1)
+#define GI_STOP_ON_GATE_OR_SECOND_TC	GI_STOP_MODE(2)
+#define GI_STOP_MODE_MASK		GI_STOP_MODE(3)
+#define GI_LOAD_SRC_SEL			BIT(7)
+#define GI_OUTPUT_MODE(x)		(((x) & 0x3) << 8)
+#define GI_OUTPUT_TC_PULSE		GI_OUTPUT_MODE(1)
+#define GI_OUTPUT_TC_TOGGLE		GI_OUTPUT_MODE(2)
+#define GI_OUTPUT_TC_OR_GATE_TOGGLE	GI_OUTPUT_MODE(3)
+#define GI_OUTPUT_MODE_MASK		GI_OUTPUT_MODE(3)
+#define GI_COUNTING_ONCE(x)		(((x) & 0x3) << 10)
+#define GI_NO_HARDWARE_DISARM		GI_COUNTING_ONCE(0)
+#define GI_DISARM_AT_TC			GI_COUNTING_ONCE(1)
+#define GI_DISARM_AT_GATE		GI_COUNTING_ONCE(2)
+#define GI_DISARM_AT_TC_OR_GATE		GI_COUNTING_ONCE(3)
+#define GI_COUNTING_ONCE_MASK		GI_COUNTING_ONCE(3)
+#define GI_LOADING_ON_TC		BIT(12)
+#define GI_GATE_POL_INVERT		BIT(13)
+#define GI_LOADING_ON_GATE		BIT(14)
+#define GI_RELOAD_SRC_SWITCHING		BIT(15)
 #define NITIO_LOADA_REG(x)		(NITIO_G0_LOADA + (x))
 #define NITIO_LOADB_REG(x)		(NITIO_G0_LOADB + (x))
 #define NITIO_INPUT_SEL_REG(x)		(NITIO_G0_INPUT_SEL + (x))
-#define GI_READ_ACKS_IRQ		(1 << 0)
-#define GI_WRITE_ACKS_IRQ		(1 << 1)
+#define GI_READ_ACKS_IRQ		BIT(0)
+#define GI_WRITE_ACKS_IRQ		BIT(1)
 #define GI_BITS_TO_SRC(x)		(((x) >> 2) & 0x1f)
 #define GI_SRC_SEL(x)			(((x) & 0x1f) << 2)
-#define GI_SRC_SEL_MASK			(0x1f << 2)
+#define GI_SRC_SEL_MASK			GI_SRC_SEL(0x1f)
 #define GI_BITS_TO_GATE(x)		(((x) >> 7) & 0x1f)
 #define GI_GATE_SEL(x)			(((x) & 0x1f) << 7)
-#define GI_GATE_SEL_MASK		(0x1f << 7)
-#define GI_GATE_SEL_LOAD_SRC		(1 << 12)
-#define GI_OR_GATE			(1 << 13)
-#define GI_OUTPUT_POL_INVERT		(1 << 14)
-#define GI_SRC_POL_INVERT		(1 << 15)
+#define GI_GATE_SEL_MASK		GI_GATE_SEL(0x1f)
+#define GI_GATE_SEL_LOAD_SRC		BIT(12)
+#define GI_OR_GATE			BIT(13)
+#define GI_OUTPUT_POL_INVERT		BIT(14)
+#define GI_SRC_POL_INVERT		BIT(15)
 #define NITIO_CNT_MODE_REG(x)		(NITIO_G0_CNT_MODE + (x))
 #define GI_CNT_MODE(x)			(((x) & 0x7) << 0)
 #define GI_CNT_MODE_NORMAL		GI_CNT_MODE(0)
@@ -94,67 +99,67 @@
 #define GI_CNT_MODE_QUADX4		GI_CNT_MODE(3)
 #define GI_CNT_MODE_TWO_PULSE		GI_CNT_MODE(4)
 #define GI_CNT_MODE_SYNC_SRC		GI_CNT_MODE(6)
-#define GI_CNT_MODE_MASK		(7 << 0)
-#define GI_INDEX_MODE			(1 << 4)
+#define GI_CNT_MODE_MASK		GI_CNT_MODE(7)
+#define GI_INDEX_MODE			BIT(4)
 #define GI_INDEX_PHASE(x)		(((x) & 0x3) << 5)
-#define GI_INDEX_PHASE_MASK		(3 << 5)
-#define GI_HW_ARM_ENA			(1 << 7)
+#define GI_INDEX_PHASE_MASK		GI_INDEX_PHASE(3)
+#define GI_HW_ARM_ENA			BIT(7)
 #define GI_HW_ARM_SEL(x)		((x) << 8)
-#define GI_660X_HW_ARM_SEL_MASK		(0x7 << 8)
-#define GI_M_HW_ARM_SEL_MASK		(0x1f << 8)
-#define GI_660X_PRESCALE_X8		(1 << 12)
-#define GI_M_PRESCALE_X8		(1 << 13)
-#define GI_660X_ALT_SYNC		(1 << 13)
-#define GI_M_ALT_SYNC			(1 << 14)
-#define GI_660X_PRESCALE_X2		(1 << 14)
-#define GI_M_PRESCALE_X2		(1 << 15)
+#define GI_660X_HW_ARM_SEL_MASK		GI_HW_ARM_SEL(0x7)
+#define GI_M_HW_ARM_SEL_MASK		GI_HW_ARM_SEL(0x1f)
+#define GI_660X_PRESCALE_X8		BIT(12)
+#define GI_M_PRESCALE_X8		BIT(13)
+#define GI_660X_ALT_SYNC		BIT(13)
+#define GI_M_ALT_SYNC			BIT(14)
+#define GI_660X_PRESCALE_X2		BIT(14)
+#define GI_M_PRESCALE_X2		BIT(15)
 #define NITIO_GATE2_REG(x)		(NITIO_G0_GATE2 + (x))
-#define GI_GATE2_MODE			(1 << 0)
+#define GI_GATE2_MODE			BIT(0)
 #define GI_BITS_TO_GATE2(x)		(((x) >> 7) & 0x1f)
 #define GI_GATE2_SEL(x)			(((x) & 0x1f) << 7)
-#define GI_GATE2_SEL_MASK		(0x1f << 7)
-#define GI_GATE2_POL_INVERT		(1 << 13)
-#define GI_GATE2_SUBSEL			(1 << 14)
-#define GI_SRC_SUBSEL			(1 << 15)
+#define GI_GATE2_SEL_MASK		GI_GATE2_SEL(0x1f)
+#define GI_GATE2_POL_INVERT		BIT(13)
+#define GI_GATE2_SUBSEL			BIT(14)
+#define GI_SRC_SUBSEL			BIT(15)
 #define NITIO_SHARED_STATUS_REG(x)	(NITIO_G01_STATUS + ((x) / 2))
-#define GI_SAVE(x)			(((x) % 2) ? (1 << 1) : (1 << 0))
-#define GI_COUNTING(x)			(((x) % 2) ? (1 << 3) : (1 << 2))
-#define GI_NEXT_LOAD_SRC(x)		(((x) % 2) ? (1 << 5) : (1 << 4))
-#define GI_STALE_DATA(x)		(((x) % 2) ? (1 << 7) : (1 << 6))
-#define GI_ARMED(x)			(((x) % 2) ? (1 << 9) : (1 << 8))
-#define GI_NO_LOAD_BETWEEN_GATES(x)	(((x) % 2) ? (1 << 11) : (1 << 10))
-#define GI_TC_ERROR(x)			(((x) % 2) ? (1 << 13) : (1 << 12))
-#define GI_GATE_ERROR(x)		(((x) % 2) ? (1 << 15) : (1 << 14))
+#define GI_SAVE(x)			(((x) % 2) ? BIT(1) : BIT(0))
+#define GI_COUNTING(x)			(((x) % 2) ? BIT(3) : BIT(2))
+#define GI_NEXT_LOAD_SRC(x)		(((x) % 2) ? BIT(5) : BIT(4))
+#define GI_STALE_DATA(x)		(((x) % 2) ? BIT(7) : BIT(6))
+#define GI_ARMED(x)			(((x) % 2) ? BIT(9) : BIT(8))
+#define GI_NO_LOAD_BETWEEN_GATES(x)	(((x) % 2) ? BIT(11) : BIT(10))
+#define GI_TC_ERROR(x)			(((x) % 2) ? BIT(13) : BIT(12))
+#define GI_GATE_ERROR(x)		(((x) % 2) ? BIT(15) : BIT(14))
 #define NITIO_RESET_REG(x)		(NITIO_G01_RESET + ((x) / 2))
-#define GI_RESET(x)			(1 << (2 + ((x) % 2)))
+#define GI_RESET(x)			BIT(2 + ((x) % 2))
 #define NITIO_STATUS1_REG(x)		(NITIO_G01_STATUS1 + ((x) / 2))
 #define NITIO_STATUS2_REG(x)		(NITIO_G01_STATUS2 + ((x) / 2))
-#define GI_OUTPUT(x)			(((x) % 2) ? (1 << 1) : (1 << 0))
-#define GI_HW_SAVE(x)			(((x) % 2) ? (1 << 13) : (1 << 12))
-#define GI_PERMANENT_STALE(x)		(((x) % 2) ? (1 << 15) : (1 << 14))
+#define GI_OUTPUT(x)			(((x) % 2) ? BIT(1) : BIT(0))
+#define GI_HW_SAVE(x)			(((x) % 2) ? BIT(13) : BIT(12))
+#define GI_PERMANENT_STALE(x)		(((x) % 2) ? BIT(15) : BIT(14))
 #define NITIO_DMA_CFG_REG(x)		(NITIO_G0_DMA_CFG + (x))
-#define GI_DMA_ENABLE			(1 << 0)
-#define GI_DMA_WRITE			(1 << 1)
-#define GI_DMA_INT_ENA			(1 << 2)
-#define GI_DMA_RESET			(1 << 3)
-#define GI_DMA_BANKSW_ERROR		(1 << 4)
+#define GI_DMA_ENABLE			BIT(0)
+#define GI_DMA_WRITE			BIT(1)
+#define GI_DMA_INT_ENA			BIT(2)
+#define GI_DMA_RESET			BIT(3)
+#define GI_DMA_BANKSW_ERROR		BIT(4)
 #define NITIO_DMA_STATUS_REG(x)		(NITIO_G0_DMA_STATUS + (x))
-#define GI_DMA_READBANK			(1 << 13)
-#define GI_DRQ_ERROR			(1 << 14)
-#define GI_DRQ_STATUS			(1 << 15)
+#define GI_DMA_READBANK			BIT(13)
+#define GI_DRQ_ERROR			BIT(14)
+#define GI_DRQ_STATUS			BIT(15)
 #define NITIO_ABZ_REG(x)		(NITIO_G0_ABZ + (x))
 #define NITIO_INT_ACK_REG(x)		(NITIO_G0_INT_ACK + (x))
-#define GI_GATE_ERROR_CONFIRM(x)	(((x) % 2) ? (1 << 1) : (1 << 5))
-#define GI_TC_ERROR_CONFIRM(x)		(((x) % 2) ? (1 << 2) : (1 << 6))
-#define GI_TC_INTERRUPT_ACK		(1 << 14)
-#define GI_GATE_INTERRUPT_ACK		(1 << 15)
+#define GI_GATE_ERROR_CONFIRM(x)	(((x) % 2) ? BIT(1) : BIT(5))
+#define GI_TC_ERROR_CONFIRM(x)		(((x) % 2) ? BIT(2) : BIT(6))
+#define GI_TC_INTERRUPT_ACK		BIT(14)
+#define GI_GATE_INTERRUPT_ACK		BIT(15)
 #define NITIO_STATUS_REG(x)		(NITIO_G0_STATUS + (x))
-#define GI_GATE_INTERRUPT		(1 << 2)
-#define GI_TC				(1 << 3)
-#define GI_INTERRUPT			(1 << 15)
+#define GI_GATE_INTERRUPT		BIT(2)
+#define GI_TC				BIT(3)
+#define GI_INTERRUPT			BIT(15)
 #define NITIO_INT_ENA_REG(x)		(NITIO_G0_INT_ENA + (x))
-#define GI_TC_INTERRUPT_ENABLE(x)	(((x) % 2) ? (1 << 9) : (1 << 6))
-#define GI_GATE_INTERRUPT_ENABLE(x)	(((x) % 2) ? (1 << 10) : (1 << 8))
+#define GI_TC_INTERRUPT_ENABLE(x)	(((x) % 2) ? BIT(9) : BIT(6))
+#define GI_GATE_INTERRUPT_ENABLE(x)	(((x) % 2) ? BIT(10) : BIT(8))
 
 static inline void write_register(struct ni_gpct *counter, unsigned bits,
 				  enum ni_gpct_register reg)

commit 613117fbfe02586f4f53b83b668eab06bec6bc5f
Author: H Hartley Sweeten <hsweeten@visionengravers.com>
Date:   Mon Jul 28 10:27:00 2014 -0700

    staging: comedi: ni_tio: tidy up G{02, 12}_Interrupt_Enable_Bits
    
    Convert these enums into defines and rename the CamelCase symbols.
    
    For aesthetics, move the new defines so they are associated with
    the register define.
    
    Signed-off-by: H Hartley Sweeten <hsweeten@visionengravers.com>
    Reviewed-by: Ian Abbott <abbotti@mev.co.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/drivers/ni_tio_internal.h b/drivers/staging/comedi/drivers/ni_tio_internal.h
index 37cdb4960803..2bceae493e23 100644
--- a/drivers/staging/comedi/drivers/ni_tio_internal.h
+++ b/drivers/staging/comedi/drivers/ni_tio_internal.h
@@ -153,25 +153,8 @@
 #define GI_TC				(1 << 3)
 #define GI_INTERRUPT			(1 << 15)
 #define NITIO_INT_ENA_REG(x)		(NITIO_G0_INT_ENA + (x))
-
-enum G02_Interrupt_Enable_Bits {
-	G0_TC_Interrupt_Enable_Bit = 0x40,
-	G0_Gate_Interrupt_Enable_Bit = 0x100
-};
-enum G13_Interrupt_Enable_Bits {
-	G1_TC_Interrupt_Enable_Bit = 0x200,
-	G1_Gate_Interrupt_Enable_Bit = 0x400
-};
-static inline unsigned Gi_Gate_Interrupt_Enable_Bit(unsigned counter_index)
-{
-	unsigned bit;
-
-	if (counter_index % 2)
-		bit = G1_Gate_Interrupt_Enable_Bit;
-	else
-		bit = G0_Gate_Interrupt_Enable_Bit;
-	return bit;
-}
+#define GI_TC_INTERRUPT_ENABLE(x)	(((x) % 2) ? (1 << 9) : (1 << 6))
+#define GI_GATE_INTERRUPT_ENABLE(x)	(((x) % 2) ? (1 << 10) : (1 << 8))
 
 static inline void write_register(struct ni_gpct *counter, unsigned bits,
 				  enum ni_gpct_register reg)

commit fcf6560c52f0e29569ed5b2d41e64a1360d955a0
Author: H Hartley Sweeten <hsweeten@visionengravers.com>
Date:   Mon Jul 28 10:26:59 2014 -0700

    staging: comedi: ni_tio: tidy up Gi_Status_Bits
    
    Convert this enum into defines and rename the CamelCase symbols.
    
    For aesthetics, move the new defines so they are associated with
    the register define.
    
    Signed-off-by: H Hartley Sweeten <hsweeten@visionengravers.com>
    Reviewed-by: Ian Abbott <abbotti@mev.co.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/drivers/ni_tio_internal.h b/drivers/staging/comedi/drivers/ni_tio_internal.h
index 8d1b254c37aa..37cdb4960803 100644
--- a/drivers/staging/comedi/drivers/ni_tio_internal.h
+++ b/drivers/staging/comedi/drivers/ni_tio_internal.h
@@ -149,14 +149,11 @@
 #define GI_TC_INTERRUPT_ACK		(1 << 14)
 #define GI_GATE_INTERRUPT_ACK		(1 << 15)
 #define NITIO_STATUS_REG(x)		(NITIO_G0_STATUS + (x))
+#define GI_GATE_INTERRUPT		(1 << 2)
+#define GI_TC				(1 << 3)
+#define GI_INTERRUPT			(1 << 15)
 #define NITIO_INT_ENA_REG(x)		(NITIO_G0_INT_ENA + (x))
 
-enum Gi_Status_Bits {
-	Gi_Gate_Interrupt_Bit = 0x4,
-	Gi_TC_Bit = 0x8,
-	Gi_Interrupt_Bit = 0x8000
-};
-
 enum G02_Interrupt_Enable_Bits {
 	G0_TC_Interrupt_Enable_Bit = 0x40,
 	G0_Gate_Interrupt_Enable_Bit = 0x100

commit 4bf9d435b2e82d12f663706de32c286f423a43d4
Author: H Hartley Sweeten <hsweeten@visionengravers.com>
Date:   Mon Jul 28 10:26:58 2014 -0700

    staging: comedi: ni_tio: tidy up Gxx_Interrupt_Acknowledge_Bits
    
    Convert this enum and the others related to it into defines and
    rename the CamelCase symbols.
    
    For aesthetics, move the new defines so they are associated with
    the register define.
    
    Signed-off-by: H Hartley Sweeten <hsweeten@visionengravers.com>
    Reviewed-by: Ian Abbott <abbotti@mev.co.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/drivers/ni_tio_internal.h b/drivers/staging/comedi/drivers/ni_tio_internal.h
index db6b56307db9..8d1b254c37aa 100644
--- a/drivers/staging/comedi/drivers/ni_tio_internal.h
+++ b/drivers/staging/comedi/drivers/ni_tio_internal.h
@@ -144,37 +144,13 @@
 #define GI_DRQ_STATUS			(1 << 15)
 #define NITIO_ABZ_REG(x)		(NITIO_G0_ABZ + (x))
 #define NITIO_INT_ACK_REG(x)		(NITIO_G0_INT_ACK + (x))
+#define GI_GATE_ERROR_CONFIRM(x)	(((x) % 2) ? (1 << 1) : (1 << 5))
+#define GI_TC_ERROR_CONFIRM(x)		(((x) % 2) ? (1 << 2) : (1 << 6))
+#define GI_TC_INTERRUPT_ACK		(1 << 14)
+#define GI_GATE_INTERRUPT_ACK		(1 << 15)
 #define NITIO_STATUS_REG(x)		(NITIO_G0_STATUS + (x))
 #define NITIO_INT_ENA_REG(x)		(NITIO_G0_INT_ENA + (x))
 
-enum G02_Interrupt_Acknowledge_Bits {
-	G0_Gate_Error_Confirm_Bit = 0x20,
-	G0_TC_Error_Confirm_Bit = 0x40
-};
-enum G13_Interrupt_Acknowledge_Bits {
-	G1_Gate_Error_Confirm_Bit = 0x2,
-	G1_TC_Error_Confirm_Bit = 0x4
-};
-static inline unsigned Gi_Gate_Error_Confirm_Bit(unsigned counter_index)
-{
-	if (counter_index % 2)
-		return G1_Gate_Error_Confirm_Bit;
-	return G0_Gate_Error_Confirm_Bit;
-}
-
-static inline unsigned Gi_TC_Error_Confirm_Bit(unsigned counter_index)
-{
-	if (counter_index % 2)
-		return G1_TC_Error_Confirm_Bit;
-	return G0_TC_Error_Confirm_Bit;
-}
-
-/* bits that are the same in G0/G2 and G1/G3 interrupt acknowledge registers */
-enum Gxx_Interrupt_Acknowledge_Bits {
-	Gi_TC_Interrupt_Ack_Bit = 0x4000,
-	Gi_Gate_Interrupt_Ack_Bit = 0x8000
-};
-
 enum Gi_Status_Bits {
 	Gi_Gate_Interrupt_Bit = 0x4,
 	Gi_TC_Bit = 0x8,

commit 923de26e74a5fe944e9a2f0301342a73db05f3b4
Author: H Hartley Sweeten <hsweeten@visionengravers.com>
Date:   Mon Jul 28 10:26:57 2014 -0700

    staging: comedi: ni_tio: tidy up Gi_DMA_Status_Reg_Bits
    
    Convert this enum into defines and rename the CamelCase symbols.
    
    For aesthetics, move the new defines so they are associated with
    the register define.
    
    Signed-off-by: H Hartley Sweeten <hsweeten@visionengravers.com>
    Reviewed-by: Ian Abbott <abbotti@mev.co.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/drivers/ni_tio_internal.h b/drivers/staging/comedi/drivers/ni_tio_internal.h
index a74cec40611c..db6b56307db9 100644
--- a/drivers/staging/comedi/drivers/ni_tio_internal.h
+++ b/drivers/staging/comedi/drivers/ni_tio_internal.h
@@ -139,17 +139,14 @@
 #define GI_DMA_RESET			(1 << 3)
 #define GI_DMA_BANKSW_ERROR		(1 << 4)
 #define NITIO_DMA_STATUS_REG(x)		(NITIO_G0_DMA_STATUS + (x))
+#define GI_DMA_READBANK			(1 << 13)
+#define GI_DRQ_ERROR			(1 << 14)
+#define GI_DRQ_STATUS			(1 << 15)
 #define NITIO_ABZ_REG(x)		(NITIO_G0_ABZ + (x))
 #define NITIO_INT_ACK_REG(x)		(NITIO_G0_INT_ACK + (x))
 #define NITIO_STATUS_REG(x)		(NITIO_G0_STATUS + (x))
 #define NITIO_INT_ENA_REG(x)		(NITIO_G0_INT_ENA + (x))
 
-enum Gi_DMA_Status_Reg_Bits {
-	Gi_DMA_Readbank_Bit = 0x2000,
-	Gi_DRQ_Error_Bit = 0x4000,
-	Gi_DRQ_Status_Bit = 0x8000
-};
-
 enum G02_Interrupt_Acknowledge_Bits {
 	G0_Gate_Error_Confirm_Bit = 0x20,
 	G0_TC_Error_Confirm_Bit = 0x40

commit 150dde701f8cae00ecb0084316a9e60f5046de9c
Author: H Hartley Sweeten <hsweeten@visionengravers.com>
Date:   Mon Jul 28 10:26:56 2014 -0700

    staging: comedi: ni_tio: tidy up Gi_DMA_Config_Reg_Bits
    
    Convert this enum into defines and rename the CamelCase symbols.
    
    For aesthetics, move the new defines so they are associated with
    the register define.
    
    Signed-off-by: H Hartley Sweeten <hsweeten@visionengravers.com>
    Reviewed-by: Ian Abbott <abbotti@mev.co.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/drivers/ni_tio_internal.h b/drivers/staging/comedi/drivers/ni_tio_internal.h
index 18a1e16ba0a5..a74cec40611c 100644
--- a/drivers/staging/comedi/drivers/ni_tio_internal.h
+++ b/drivers/staging/comedi/drivers/ni_tio_internal.h
@@ -133,18 +133,17 @@
 #define GI_HW_SAVE(x)			(((x) % 2) ? (1 << 13) : (1 << 12))
 #define GI_PERMANENT_STALE(x)		(((x) % 2) ? (1 << 15) : (1 << 14))
 #define NITIO_DMA_CFG_REG(x)		(NITIO_G0_DMA_CFG + (x))
+#define GI_DMA_ENABLE			(1 << 0)
+#define GI_DMA_WRITE			(1 << 1)
+#define GI_DMA_INT_ENA			(1 << 2)
+#define GI_DMA_RESET			(1 << 3)
+#define GI_DMA_BANKSW_ERROR		(1 << 4)
 #define NITIO_DMA_STATUS_REG(x)		(NITIO_G0_DMA_STATUS + (x))
 #define NITIO_ABZ_REG(x)		(NITIO_G0_ABZ + (x))
 #define NITIO_INT_ACK_REG(x)		(NITIO_G0_INT_ACK + (x))
 #define NITIO_STATUS_REG(x)		(NITIO_G0_STATUS + (x))
 #define NITIO_INT_ENA_REG(x)		(NITIO_G0_INT_ENA + (x))
 
-enum Gi_DMA_Config_Reg_Bits {
-	Gi_DMA_Enable_Bit = 0x1,
-	Gi_DMA_Write_Bit = 0x2,
-	Gi_DMA_Int_Bit = 0x4
-};
-
 enum Gi_DMA_Status_Reg_Bits {
 	Gi_DMA_Readbank_Bit = 0x2000,
 	Gi_DRQ_Error_Bit = 0x4000,

commit 29c2003d11a57c88d99e892e9dd26b36d29ae454
Author: H Hartley Sweeten <hsweeten@visionengravers.com>
Date:   Mon Jul 28 10:26:55 2014 -0700

    staging: comedi: ni_tio: tidy up Gxx_Joint_Status2_Bits
    
    Convert this enum into defines and rename the CamelCase symbols.
    
    For aesthetics, move the new defines so they are associated with
    the register define.
    
    Signed-off-by: H Hartley Sweeten <hsweeten@visionengravers.com>
    Reviewed-by: Ian Abbott <abbotti@mev.co.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/drivers/ni_tio_internal.h b/drivers/staging/comedi/drivers/ni_tio_internal.h
index ea1c9fb269af..18a1e16ba0a5 100644
--- a/drivers/staging/comedi/drivers/ni_tio_internal.h
+++ b/drivers/staging/comedi/drivers/ni_tio_internal.h
@@ -129,6 +129,9 @@
 #define GI_RESET(x)			(1 << (2 + ((x) % 2)))
 #define NITIO_STATUS1_REG(x)		(NITIO_G01_STATUS1 + ((x) / 2))
 #define NITIO_STATUS2_REG(x)		(NITIO_G01_STATUS2 + ((x) / 2))
+#define GI_OUTPUT(x)			(((x) % 2) ? (1 << 1) : (1 << 0))
+#define GI_HW_SAVE(x)			(((x) % 2) ? (1 << 13) : (1 << 12))
+#define GI_PERMANENT_STALE(x)		(((x) % 2) ? (1 << 15) : (1 << 14))
 #define NITIO_DMA_CFG_REG(x)		(NITIO_G0_DMA_CFG + (x))
 #define NITIO_DMA_STATUS_REG(x)		(NITIO_G0_DMA_STATUS + (x))
 #define NITIO_ABZ_REG(x)		(NITIO_G0_ABZ + (x))
@@ -136,22 +139,6 @@
 #define NITIO_STATUS_REG(x)		(NITIO_G0_STATUS + (x))
 #define NITIO_INT_ENA_REG(x)		(NITIO_G0_INT_ENA + (x))
 
-enum Gxx_Joint_Status2_Bits {
-	G0_Output_Bit = 0x1,
-	G1_Output_Bit = 0x2,
-	G0_HW_Save_Bit = 0x1000,
-	G1_HW_Save_Bit = 0x2000,
-	G0_Permanent_Stale_Bit = 0x4000,
-	G1_Permanent_Stale_Bit = 0x8000
-};
-static inline enum Gxx_Joint_Status2_Bits Gi_Permanent_Stale_Bit(unsigned
-								 counter_index)
-{
-	if (counter_index % 2)
-		return G1_Permanent_Stale_Bit;
-	return G0_Permanent_Stale_Bit;
-}
-
 enum Gi_DMA_Config_Reg_Bits {
 	Gi_DMA_Enable_Bit = 0x1,
 	Gi_DMA_Write_Bit = 0x2,

commit dc613766b70db497dd3db22b1b23d19fc753497d
Author: H Hartley Sweeten <hsweeten@visionengravers.com>
Date:   Mon Jul 28 10:26:54 2014 -0700

    staging: comedi: ni_tio: tidy up Gi_Reset_Bit
    
    Convert this inline CamelCase function into a define.
    
    For aesthetics, move the new define so it is associated with the
    register define.
    
    Signed-off-by: H Hartley Sweeten <hsweeten@visionengravers.com>
    Reviewed-by: Ian Abbott <abbotti@mev.co.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/drivers/ni_tio_internal.h b/drivers/staging/comedi/drivers/ni_tio_internal.h
index 37fde62b0d6e..ea1c9fb269af 100644
--- a/drivers/staging/comedi/drivers/ni_tio_internal.h
+++ b/drivers/staging/comedi/drivers/ni_tio_internal.h
@@ -126,6 +126,7 @@
 #define GI_TC_ERROR(x)			(((x) % 2) ? (1 << 13) : (1 << 12))
 #define GI_GATE_ERROR(x)		(((x) % 2) ? (1 << 15) : (1 << 14))
 #define NITIO_RESET_REG(x)		(NITIO_G01_RESET + ((x) / 2))
+#define GI_RESET(x)			(1 << (2 + ((x) % 2)))
 #define NITIO_STATUS1_REG(x)		(NITIO_G01_STATUS1 + ((x) / 2))
 #define NITIO_STATUS2_REG(x)		(NITIO_G01_STATUS2 + ((x) / 2))
 #define NITIO_DMA_CFG_REG(x)		(NITIO_G0_DMA_CFG + (x))
@@ -135,12 +136,6 @@
 #define NITIO_STATUS_REG(x)		(NITIO_G0_STATUS + (x))
 #define NITIO_INT_ENA_REG(x)		(NITIO_G0_INT_ENA + (x))
 
-/* joint reset register bits */
-static inline unsigned Gi_Reset_Bit(unsigned counter_index)
-{
-	return 0x1 << (2 + (counter_index % 2));
-}
-
 enum Gxx_Joint_Status2_Bits {
 	G0_Output_Bit = 0x1,
 	G1_Output_Bit = 0x2,

commit 24a675c5130198fcf354325f108b4a62aa7575a5
Author: H Hartley Sweeten <hsweeten@visionengravers.com>
Date:   Mon Jul 28 10:26:53 2014 -0700

    staging: comedi: ni_tio: tidy up Gxx_Status_Bits
    
    Convert this enum into defines and rename the CamelCase symbols.
    
    For aesthetics, move the new defines so they are associated with
    the register define.
    
    Signed-off-by: H Hartley Sweeten <hsweeten@visionengravers.com>
    Reviewed-by: Ian Abbott <abbotti@mev.co.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/drivers/ni_tio_internal.h b/drivers/staging/comedi/drivers/ni_tio_internal.h
index 889bd3063c27..37fde62b0d6e 100644
--- a/drivers/staging/comedi/drivers/ni_tio_internal.h
+++ b/drivers/staging/comedi/drivers/ni_tio_internal.h
@@ -117,6 +117,14 @@
 #define GI_GATE2_SUBSEL			(1 << 14)
 #define GI_SRC_SUBSEL			(1 << 15)
 #define NITIO_SHARED_STATUS_REG(x)	(NITIO_G01_STATUS + ((x) / 2))
+#define GI_SAVE(x)			(((x) % 2) ? (1 << 1) : (1 << 0))
+#define GI_COUNTING(x)			(((x) % 2) ? (1 << 3) : (1 << 2))
+#define GI_NEXT_LOAD_SRC(x)		(((x) % 2) ? (1 << 5) : (1 << 4))
+#define GI_STALE_DATA(x)		(((x) % 2) ? (1 << 7) : (1 << 6))
+#define GI_ARMED(x)			(((x) % 2) ? (1 << 9) : (1 << 8))
+#define GI_NO_LOAD_BETWEEN_GATES(x)	(((x) % 2) ? (1 << 11) : (1 << 10))
+#define GI_TC_ERROR(x)			(((x) % 2) ? (1 << 13) : (1 << 12))
+#define GI_GATE_ERROR(x)		(((x) % 2) ? (1 << 15) : (1 << 14))
 #define NITIO_RESET_REG(x)		(NITIO_G01_RESET + ((x) / 2))
 #define NITIO_STATUS1_REG(x)		(NITIO_G01_STATUS1 + ((x) / 2))
 #define NITIO_STATUS2_REG(x)		(NITIO_G01_STATUS2 + ((x) / 2))
@@ -127,67 +135,6 @@
 #define NITIO_STATUS_REG(x)		(NITIO_G0_STATUS + (x))
 #define NITIO_INT_ENA_REG(x)		(NITIO_G0_INT_ENA + (x))
 
-enum Gxx_Status_Bits {
-	G0_Save_Bit = 0x1,
-	G1_Save_Bit = 0x2,
-	G0_Counting_Bit = 0x4,
-	G1_Counting_Bit = 0x8,
-	G0_Next_Load_Source_Bit = 0x10,
-	G1_Next_Load_Source_Bit = 0x20,
-	G0_Stale_Data_Bit = 0x40,
-	G1_Stale_Data_Bit = 0x80,
-	G0_Armed_Bit = 0x100,
-	G1_Armed_Bit = 0x200,
-	G0_No_Load_Between_Gates_Bit = 0x400,
-	G1_No_Load_Between_Gates_Bit = 0x800,
-	G0_TC_Error_Bit = 0x1000,
-	G1_TC_Error_Bit = 0x2000,
-	G0_Gate_Error_Bit = 0x4000,
-	G1_Gate_Error_Bit = 0x8000
-};
-static inline enum Gxx_Status_Bits Gi_Counting_Bit(unsigned counter_index)
-{
-	if (counter_index % 2)
-		return G1_Counting_Bit;
-	return G0_Counting_Bit;
-}
-
-static inline enum Gxx_Status_Bits Gi_Armed_Bit(unsigned counter_index)
-{
-	if (counter_index % 2)
-		return G1_Armed_Bit;
-	return G0_Armed_Bit;
-}
-
-static inline enum Gxx_Status_Bits Gi_Next_Load_Source_Bit(unsigned
-							   counter_index)
-{
-	if (counter_index % 2)
-		return G1_Next_Load_Source_Bit;
-	return G0_Next_Load_Source_Bit;
-}
-
-static inline enum Gxx_Status_Bits Gi_Stale_Data_Bit(unsigned counter_index)
-{
-	if (counter_index % 2)
-		return G1_Stale_Data_Bit;
-	return G0_Stale_Data_Bit;
-}
-
-static inline enum Gxx_Status_Bits Gi_TC_Error_Bit(unsigned counter_index)
-{
-	if (counter_index % 2)
-		return G1_TC_Error_Bit;
-	return G0_TC_Error_Bit;
-}
-
-static inline enum Gxx_Status_Bits Gi_Gate_Error_Bit(unsigned counter_index)
-{
-	if (counter_index % 2)
-		return G1_Gate_Error_Bit;
-	return G0_Gate_Error_Bit;
-}
-
 /* joint reset register bits */
 static inline unsigned Gi_Reset_Bit(unsigned counter_index)
 {

commit 4359dcf3564500e37e5da4eba7b4bd7f1847096b
Author: H Hartley Sweeten <hsweeten@visionengravers.com>
Date:   Mon Jul 28 10:26:52 2014 -0700

    staging: comedi: ni_tio: tidy up Gi_Second_Gate_Bits
    
    Convert this enum into defines and rename the CamelCase symbols.
    
    For aesthetics, move the new defines so they are associated with
    the register define.
    
    Signed-off-by: H Hartley Sweeten <hsweeten@visionengravers.com>
    Reviewed-by: Ian Abbott <abbotti@mev.co.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/drivers/ni_tio_internal.h b/drivers/staging/comedi/drivers/ni_tio_internal.h
index fbbe30c81f46..889bd3063c27 100644
--- a/drivers/staging/comedi/drivers/ni_tio_internal.h
+++ b/drivers/staging/comedi/drivers/ni_tio_internal.h
@@ -109,6 +109,13 @@
 #define GI_660X_PRESCALE_X2		(1 << 14)
 #define GI_M_PRESCALE_X2		(1 << 15)
 #define NITIO_GATE2_REG(x)		(NITIO_G0_GATE2 + (x))
+#define GI_GATE2_MODE			(1 << 0)
+#define GI_BITS_TO_GATE2(x)		(((x) >> 7) & 0x1f)
+#define GI_GATE2_SEL(x)			(((x) & 0x1f) << 7)
+#define GI_GATE2_SEL_MASK		(0x1f << 7)
+#define GI_GATE2_POL_INVERT		(1 << 13)
+#define GI_GATE2_SUBSEL			(1 << 14)
+#define GI_SRC_SUBSEL			(1 << 15)
 #define NITIO_SHARED_STATUS_REG(x)	(NITIO_G01_STATUS + ((x) / 2))
 #define NITIO_RESET_REG(x)		(NITIO_G01_RESET + ((x) / 2))
 #define NITIO_STATUS1_REG(x)		(NITIO_G01_STATUS1 + ((x) / 2))
@@ -120,22 +127,6 @@
 #define NITIO_STATUS_REG(x)		(NITIO_G0_STATUS + (x))
 #define NITIO_INT_ENA_REG(x)		(NITIO_G0_INT_ENA + (x))
 
-#define Gi_Second_Gate_Select_Shift 7
-/*FIXME: m-series has a second gate subselect bit */
-/*FIXME: m-series second gate sources are undocumented (by NI)*/
-enum Gi_Second_Gate_Bits {
-	Gi_Second_Gate_Mode_Bit = 0x1,
-	Gi_Second_Gate_Select_Mask = 0x1f << Gi_Second_Gate_Select_Shift,
-	Gi_Second_Gate_Polarity_Bit = 0x2000,
-	Gi_Second_Gate_Subselect_Bit = 0x4000,	/* m-series only */
-	Gi_Source_Subselect_Bit = 0x8000	/* m-series only */
-};
-static inline unsigned Gi_Second_Gate_Select_Bits(unsigned second_gate_select)
-{
-	return (second_gate_select << Gi_Second_Gate_Select_Shift) &
-	    Gi_Second_Gate_Select_Mask;
-}
-
 enum Gxx_Status_Bits {
 	G0_Save_Bit = 0x1,
 	G1_Save_Bit = 0x2,

commit 36d80f4a5460cae2e33b15568e572426ff976c70
Author: H Hartley Sweeten <hsweeten@visionengravers.com>
Date:   Mon Jul 28 10:26:51 2014 -0700

    staging: comedi: ni_tio: tidy up Gi_Mode_Bits
    
    Convert this enum into defines and rename the CamelCase symbols.
    
    For aesthetics, move the new defines so they are associated with
    the register define.
    
    Signed-off-by: H Hartley Sweeten <hsweeten@visionengravers.com>
    Reviewed-by: Ian Abbott <abbotti@mev.co.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/drivers/ni_tio_internal.h b/drivers/staging/comedi/drivers/ni_tio_internal.h
index d55978386e34..fbbe30c81f46 100644
--- a/drivers/staging/comedi/drivers/ni_tio_internal.h
+++ b/drivers/staging/comedi/drivers/ni_tio_internal.h
@@ -42,6 +42,35 @@
 #define NITIO_HW_SAVE_REG(x)		(NITIO_G0_HW_SAVE + (x))
 #define NITIO_SW_SAVE_REG(x)		(NITIO_G0_SW_SAVE + (x))
 #define NITIO_MODE_REG(x)		(NITIO_G0_MODE + (x))
+#define GI_GATING_DISABLED		(0 << 0)
+#define GI_LEVEL_GATING			(1 << 0)
+#define GI_RISING_EDGE_GATING		(2 << 0)
+#define GI_FALLING_EDGE_GATING		(3 << 0)
+#define GI_GATING_MODE_MASK		(3 << 0)
+#define GI_GATE_ON_BOTH_EDGES		(1 << 2)
+#define GI_EDGE_GATE_STARTS_STOPS	(0 << 3)
+#define GI_EDGE_GATE_STOPS_STARTS	(1 << 3)
+#define GI_EDGE_GATE_STARTS		(2 << 3)
+#define GI_EDGE_GATE_NO_STARTS_OR_STOPS	(3 << 3)
+#define GI_EDGE_GATE_MODE_MASK		(3 << 3)
+#define GI_STOP_ON_GATE			(0 << 5)
+#define GI_STOP_ON_GATE_OR_TC		(1 << 5)
+#define GI_STOP_ON_GATE_OR_SECOND_TC	(2 << 5)
+#define GI_STOP_MODE_MASK		(3 << 5)
+#define GI_LOAD_SRC_SEL			(1 << 7)
+#define GI_OUTPUT_TC_PULSE		(1 << 8)
+#define GI_OUTPUT_TC_TOGGLE		(2 << 8)
+#define GI_OUTPUT_TC_OR_GATE_TOGGLE	(3 << 8)
+#define GI_OUTPUT_MODE_MASK		(3 << 8)
+#define GI_NO_HARDWARE_DISARM		(0 << 10)
+#define GI_DISARM_AT_TC			(1 << 10)
+#define GI_DISARM_AT_GATE		(2 << 10)
+#define GI_DISARM_AT_TC_OR_GATE		(3 << 10)
+#define GI_COUNTING_ONCE_MASK		(3 << 10)
+#define GI_LOADING_ON_TC		(1 << 12)
+#define GI_GATE_POL_INVERT		(1 << 13)
+#define GI_LOADING_ON_GATE		(1 << 14)
+#define GI_RELOAD_SRC_SWITCHING		(1 << 15)
 #define NITIO_LOADA_REG(x)		(NITIO_G0_LOADA + (x))
 #define NITIO_LOADB_REG(x)		(NITIO_G0_LOADB + (x))
 #define NITIO_INPUT_SEL_REG(x)		(NITIO_G0_INPUT_SEL + (x))
@@ -91,39 +120,6 @@
 #define NITIO_STATUS_REG(x)		(NITIO_G0_STATUS + (x))
 #define NITIO_INT_ENA_REG(x)		(NITIO_G0_INT_ENA + (x))
 
-enum Gi_Mode_Bits {
-	Gi_Gating_Mode_Mask = 0x3,
-	Gi_Gating_Disabled_Bits = 0x0,
-	Gi_Level_Gating_Bits = 0x1,
-	Gi_Rising_Edge_Gating_Bits = 0x2,
-	Gi_Falling_Edge_Gating_Bits = 0x3,
-	Gi_Gate_On_Both_Edges_Bit = 0x4,	/* used in conjunction with
-						 * rising edge gating mode */
-	Gi_Trigger_Mode_for_Edge_Gate_Mask = 0x18,
-	Gi_Edge_Gate_Starts_Stops_Bits = 0x0,
-	Gi_Edge_Gate_Stops_Starts_Bits = 0x8,
-	Gi_Edge_Gate_Starts_Bits = 0x10,
-	Gi_Edge_Gate_No_Starts_or_Stops_Bits = 0x18,
-	Gi_Stop_Mode_Mask = 0x60,
-	Gi_Stop_on_Gate_Bits = 0x00,
-	Gi_Stop_on_Gate_or_TC_Bits = 0x20,
-	Gi_Stop_on_Gate_or_Second_TC_Bits = 0x40,
-	Gi_Load_Source_Select_Bit = 0x80,
-	Gi_Output_Mode_Mask = 0x300,
-	Gi_Output_TC_Pulse_Bits = 0x100,
-	Gi_Output_TC_Toggle_Bits = 0x200,
-	Gi_Output_TC_or_Gate_Toggle_Bits = 0x300,
-	Gi_Counting_Once_Mask = 0xc00,
-	Gi_No_Hardware_Disarm_Bits = 0x000,
-	Gi_Disarm_at_TC_Bits = 0x400,
-	Gi_Disarm_at_Gate_Bits = 0x800,
-	Gi_Disarm_at_TC_or_Gate_Bits = 0xc00,
-	Gi_Loading_On_TC_Bit = 0x1000,
-	Gi_Gate_Polarity_Bit = 0x2000,
-	Gi_Loading_On_Gate_Bit = 0x4000,
-	Gi_Reload_Source_Switching_Bit = 0x8000
-};
-
 #define Gi_Second_Gate_Select_Shift 7
 /*FIXME: m-series has a second gate subselect bit */
 /*FIXME: m-series second gate sources are undocumented (by NI)*/

commit c2c6c288f9bfa898b86c9c107af4227e022e18f1
Author: H Hartley Sweeten <hsweeten@visionengravers.com>
Date:   Mon Jul 28 10:26:50 2014 -0700

    staging: comedi: ni_tio: tidy up Gi_Input_Select_Bits
    
    Convert this enum into defines and rename the CamelCase symbols.
    
    For aesthetics, move the new defines so they are associated with
    the register define.
    
    Signed-off-by: H Hartley Sweeten <hsweeten@visionengravers.com>
    Reviewed-by: Ian Abbott <abbotti@mev.co.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/drivers/ni_tio_internal.h b/drivers/staging/comedi/drivers/ni_tio_internal.h
index 4c19149b2701..d55978386e34 100644
--- a/drivers/staging/comedi/drivers/ni_tio_internal.h
+++ b/drivers/staging/comedi/drivers/ni_tio_internal.h
@@ -45,6 +45,18 @@
 #define NITIO_LOADA_REG(x)		(NITIO_G0_LOADA + (x))
 #define NITIO_LOADB_REG(x)		(NITIO_G0_LOADB + (x))
 #define NITIO_INPUT_SEL_REG(x)		(NITIO_G0_INPUT_SEL + (x))
+#define GI_READ_ACKS_IRQ		(1 << 0)
+#define GI_WRITE_ACKS_IRQ		(1 << 1)
+#define GI_BITS_TO_SRC(x)		(((x) >> 2) & 0x1f)
+#define GI_SRC_SEL(x)			(((x) & 0x1f) << 2)
+#define GI_SRC_SEL_MASK			(0x1f << 2)
+#define GI_BITS_TO_GATE(x)		(((x) >> 7) & 0x1f)
+#define GI_GATE_SEL(x)			(((x) & 0x1f) << 7)
+#define GI_GATE_SEL_MASK		(0x1f << 7)
+#define GI_GATE_SEL_LOAD_SRC		(1 << 12)
+#define GI_OR_GATE			(1 << 13)
+#define GI_OUTPUT_POL_INVERT		(1 << 14)
+#define GI_SRC_POL_INVERT		(1 << 15)
 #define NITIO_CNT_MODE_REG(x)		(NITIO_G0_CNT_MODE + (x))
 #define GI_CNT_MODE(x)			(((x) & 0x7) << 0)
 #define GI_CNT_MODE_NORMAL		GI_CNT_MODE(0)
@@ -79,19 +91,6 @@
 #define NITIO_STATUS_REG(x)		(NITIO_G0_STATUS + (x))
 #define NITIO_INT_ENA_REG(x)		(NITIO_G0_INT_ENA + (x))
 
-#define Gi_Source_Select_Shift 2
-#define Gi_Gate_Select_Shift 7
-enum Gi_Input_Select_Bits {
-	Gi_Read_Acknowledges_Irq = 0x1,	/*  not present on 660x */
-	Gi_Write_Acknowledges_Irq = 0x2,	/*  not present on 660x */
-	Gi_Source_Select_Mask = 0x7c,
-	Gi_Gate_Select_Mask = 0x1f << Gi_Gate_Select_Shift,
-	Gi_Gate_Select_Load_Source_Bit = 0x1000,
-	Gi_Or_Gate_Bit = 0x2000,
-	Gi_Output_Polarity_Bit = 0x4000,	/* set to invert */
-	Gi_Source_Polarity_Bit = 0x8000	/* set to invert */
-};
-
 enum Gi_Mode_Bits {
 	Gi_Gating_Mode_Mask = 0x3,
 	Gi_Gating_Disabled_Bits = 0x0,

commit 12b19cf523e08155cc188fb5f4385b5225926cfa
Author: H Hartley Sweeten <hsweeten@visionengravers.com>
Date:   Mon Jul 28 10:26:49 2014 -0700

    staging: comedi: ni_tio: tidy up Gi_Auto_Increment_Reg_Bits
    
    Convert this enum into defines and rename the CamelCase symbols.
    
    For aesthetics, move the new defines so they are associated with
    the register define.
    
    Signed-off-by: H Hartley Sweeten <hsweeten@visionengravers.com>
    Reviewed-by: Ian Abbott <abbotti@mev.co.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/drivers/ni_tio_internal.h b/drivers/staging/comedi/drivers/ni_tio_internal.h
index 55f1bfc3cff8..4c19149b2701 100644
--- a/drivers/staging/comedi/drivers/ni_tio_internal.h
+++ b/drivers/staging/comedi/drivers/ni_tio_internal.h
@@ -22,6 +22,7 @@
 #include "ni_tio.h"
 
 #define NITIO_AUTO_INC_REG(x)		(NITIO_G0_AUTO_INC + (x))
+#define GI_AUTO_INC_MASK		0xff
 #define NITIO_CMD_REG(x)		(NITIO_G0_CMD + (x))
 #define GI_ARM				(1 << 0)
 #define GI_SAVE_TRACE			(1 << 1)
@@ -78,10 +79,6 @@
 #define NITIO_STATUS_REG(x)		(NITIO_G0_STATUS + (x))
 #define NITIO_INT_ENA_REG(x)		(NITIO_G0_INT_ENA + (x))
 
-enum Gi_Auto_Increment_Reg_Bits {
-	Gi_Auto_Increment_Mask = 0xff
-};
-
 #define Gi_Source_Select_Shift 2
 #define Gi_Gate_Select_Shift 7
 enum Gi_Input_Select_Bits {

commit b9a09764eeb75c3b38f99d5d4154fcb68155e65a
Author: H Hartley Sweeten <hsweeten@visionengravers.com>
Date:   Mon Jul 28 10:26:48 2014 -0700

    staging: comedi: ni_tio: tidy up Gi_Command_Reg_Bits
    
    Convert this enum into defines and rename all the CamelCase symbols.
    
    For aesthetics, move the new defines so they are associated with the
    register define.
    
    Signed-off-by: H Hartley Sweeten <hsweeten@visionengravers.com>
    Reviewed-by: Ian Abbott <abbotti@mev.co.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/drivers/ni_tio_internal.h b/drivers/staging/comedi/drivers/ni_tio_internal.h
index 03aa8956c29b..55f1bfc3cff8 100644
--- a/drivers/staging/comedi/drivers/ni_tio_internal.h
+++ b/drivers/staging/comedi/drivers/ni_tio_internal.h
@@ -23,6 +23,21 @@
 
 #define NITIO_AUTO_INC_REG(x)		(NITIO_G0_AUTO_INC + (x))
 #define NITIO_CMD_REG(x)		(NITIO_G0_CMD + (x))
+#define GI_ARM				(1 << 0)
+#define GI_SAVE_TRACE			(1 << 1)
+#define GI_LOAD				(1 << 2)
+#define GI_DISARM			(1 << 4)
+#define GI_CNT_DIR(x)			(((x) & 0x3) << 5)
+#define GI_CNT_DIR_MASK			(3 << 5)
+#define GI_WRITE_SWITCH			(1 << 7)
+#define GI_SYNC_GATE			(1 << 8)
+#define GI_LITTLE_BIG_ENDIAN		(1 << 9)
+#define GI_BANK_SWITCH_START		(1 << 10)
+#define GI_BANK_SWITCH_MODE		(1 << 11)
+#define GI_BANK_SWITCH_ENABLE		(1 << 12)
+#define GI_ARM_COPY			(1 << 13)
+#define GI_SAVE_TRACE_COPY		(1 << 14)
+#define GI_DISARM_COPY			(1 << 15)
 #define NITIO_HW_SAVE_REG(x)		(NITIO_G0_HW_SAVE + (x))
 #define NITIO_SW_SAVE_REG(x)		(NITIO_G0_SW_SAVE + (x))
 #define NITIO_MODE_REG(x)		(NITIO_G0_MODE + (x))
@@ -67,28 +82,6 @@ enum Gi_Auto_Increment_Reg_Bits {
 	Gi_Auto_Increment_Mask = 0xff
 };
 
-#define Gi_Up_Down_Shift 5
-enum Gi_Command_Reg_Bits {
-	Gi_Arm_Bit = 0x1,
-	Gi_Save_Trace_Bit = 0x2,
-	Gi_Load_Bit = 0x4,
-	Gi_Disarm_Bit = 0x10,
-	Gi_Up_Down_Mask = 0x3 << Gi_Up_Down_Shift,
-	Gi_Always_Down_Bits = 0x0 << Gi_Up_Down_Shift,
-	Gi_Always_Up_Bits = 0x1 << Gi_Up_Down_Shift,
-	Gi_Up_Down_Hardware_IO_Bits = 0x2 << Gi_Up_Down_Shift,
-	Gi_Up_Down_Hardware_Gate_Bits = 0x3 << Gi_Up_Down_Shift,
-	Gi_Write_Switch_Bit = 0x80,
-	Gi_Synchronize_Gate_Bit = 0x100,
-	Gi_Little_Big_Endian_Bit = 0x200,
-	Gi_Bank_Switch_Start_Bit = 0x400,
-	Gi_Bank_Switch_Mode_Bit = 0x800,
-	Gi_Bank_Switch_Enable_Bit = 0x1000,
-	Gi_Arm_Copy_Bit = 0x2000,
-	Gi_Save_Trace_Copy_Bit = 0x4000,
-	Gi_Disarm_Copy_Bit = 0x8000
-};
-
 #define Gi_Source_Select_Shift 2
 #define Gi_Gate_Select_Shift 7
 enum Gi_Input_Select_Bits {

commit ed40487163dd7cf0e2e9982e8cbb5427be1e1779
Author: H Hartley Sweeten <hsweeten@visionengravers.com>
Date:   Mon Jul 28 10:26:47 2014 -0700

    staging: comedi: ni_tio: tidy up Gi_Counting_Mode_Reg_Bits
    
    Convert this enum into defines and rename all the CamelCase symbols.
    
    For aesthetics, move the new defines so they are associated with the
    register define.
    
    Signed-off-by: H Hartley Sweeten <hsweeten@visionengravers.com>
    Reviewed-by: Ian Abbott <abbotti@mev.co.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/drivers/ni_tio_internal.h b/drivers/staging/comedi/drivers/ni_tio_internal.h
index 3c53958bbbbf..03aa8956c29b 100644
--- a/drivers/staging/comedi/drivers/ni_tio_internal.h
+++ b/drivers/staging/comedi/drivers/ni_tio_internal.h
@@ -30,6 +30,27 @@
 #define NITIO_LOADB_REG(x)		(NITIO_G0_LOADB + (x))
 #define NITIO_INPUT_SEL_REG(x)		(NITIO_G0_INPUT_SEL + (x))
 #define NITIO_CNT_MODE_REG(x)		(NITIO_G0_CNT_MODE + (x))
+#define GI_CNT_MODE(x)			(((x) & 0x7) << 0)
+#define GI_CNT_MODE_NORMAL		GI_CNT_MODE(0)
+#define GI_CNT_MODE_QUADX1		GI_CNT_MODE(1)
+#define GI_CNT_MODE_QUADX2		GI_CNT_MODE(2)
+#define GI_CNT_MODE_QUADX4		GI_CNT_MODE(3)
+#define GI_CNT_MODE_TWO_PULSE		GI_CNT_MODE(4)
+#define GI_CNT_MODE_SYNC_SRC		GI_CNT_MODE(6)
+#define GI_CNT_MODE_MASK		(7 << 0)
+#define GI_INDEX_MODE			(1 << 4)
+#define GI_INDEX_PHASE(x)		(((x) & 0x3) << 5)
+#define GI_INDEX_PHASE_MASK		(3 << 5)
+#define GI_HW_ARM_ENA			(1 << 7)
+#define GI_HW_ARM_SEL(x)		((x) << 8)
+#define GI_660X_HW_ARM_SEL_MASK		(0x7 << 8)
+#define GI_M_HW_ARM_SEL_MASK		(0x1f << 8)
+#define GI_660X_PRESCALE_X8		(1 << 12)
+#define GI_M_PRESCALE_X8		(1 << 13)
+#define GI_660X_ALT_SYNC		(1 << 13)
+#define GI_M_ALT_SYNC			(1 << 14)
+#define GI_660X_PRESCALE_X2		(1 << 14)
+#define GI_M_PRESCALE_X2		(1 << 15)
 #define NITIO_GATE2_REG(x)		(NITIO_G0_GATE2 + (x))
 #define NITIO_SHARED_STATUS_REG(x)	(NITIO_G01_STATUS + ((x) / 2))
 #define NITIO_RESET_REG(x)		(NITIO_G01_RESET + ((x) / 2))
@@ -68,41 +89,6 @@ enum Gi_Command_Reg_Bits {
 	Gi_Disarm_Copy_Bit = 0x8000
 };
 
-#define Gi_Index_Phase_Bitshift 5
-#define Gi_HW_Arm_Select_Shift 8
-enum Gi_Counting_Mode_Reg_Bits {
-	Gi_Counting_Mode_Mask = 0x7,
-	Gi_Counting_Mode_Normal_Bits = 0x0,
-	Gi_Counting_Mode_QuadratureX1_Bits = 0x1,
-	Gi_Counting_Mode_QuadratureX2_Bits = 0x2,
-	Gi_Counting_Mode_QuadratureX4_Bits = 0x3,
-	Gi_Counting_Mode_Two_Pulse_Bits = 0x4,
-	Gi_Counting_Mode_Sync_Source_Bits = 0x6,
-	Gi_Index_Mode_Bit = 0x10,
-	Gi_Index_Phase_Mask = 0x3 << Gi_Index_Phase_Bitshift,
-	Gi_Index_Phase_LowA_LowB = 0x0 << Gi_Index_Phase_Bitshift,
-	Gi_Index_Phase_LowA_HighB = 0x1 << Gi_Index_Phase_Bitshift,
-	Gi_Index_Phase_HighA_LowB = 0x2 << Gi_Index_Phase_Bitshift,
-	Gi_Index_Phase_HighA_HighB = 0x3 << Gi_Index_Phase_Bitshift,
-	/* from m-series example code, not documented in 660x register level
-	 * manual */
-	Gi_HW_Arm_Enable_Bit = 0x80,
-	/* from m-series example code, not documented in 660x register level
-	 * manual */
-	Gi_660x_HW_Arm_Select_Mask = 0x7 << Gi_HW_Arm_Select_Shift,
-	Gi_660x_Prescale_X8_Bit = 0x1000,
-	Gi_M_Series_Prescale_X8_Bit = 0x2000,
-	Gi_M_Series_HW_Arm_Select_Mask = 0x1f << Gi_HW_Arm_Select_Shift,
-	/* must be set for clocks over 40MHz, which includes synchronous
-	 * counting and quadrature modes */
-	Gi_660x_Alternate_Sync_Bit = 0x2000,
-	Gi_M_Series_Alternate_Sync_Bit = 0x4000,
-	/* from m-series example code, not documented in 660x register level
-	 * manual */
-	Gi_660x_Prescale_X2_Bit = 0x4000,
-	Gi_M_Series_Prescale_X2_Bit = 0x8000,
-};
-
 #define Gi_Source_Select_Shift 2
 #define Gi_Gate_Select_Shift 7
 enum Gi_Input_Select_Bits {

commit 1ba7577469e1b26704f7cdab17195a2147ee774d
Author: H Hartley Sweeten <hsweeten@visionengravers.com>
Date:   Wed Jul 16 10:43:42 2014 -0700

    staging: comedi: ni_tio_internal.c: checkpatch.pl cleanup (break is not useful)
    
    Fix the checkpatch.pl warning:
    
    WARNING: break is not useful after a goto or return
    
    Signed-off-by: H Hartley Sweeten <hsweeten@visionengravers.com>
    Cc: Ian Abbott <abbotti@mev.co.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/drivers/ni_tio_internal.h b/drivers/staging/comedi/drivers/ni_tio_internal.h
index 15b81b8fc5c4..3c53958bbbbf 100644
--- a/drivers/staging/comedi/drivers/ni_tio_internal.h
+++ b/drivers/staging/comedi/drivers/ni_tio_internal.h
@@ -334,11 +334,9 @@ static inline int ni_tio_counting_mode_registers_present(const struct
 	switch (counter_dev->variant) {
 	case ni_gpct_variant_e_series:
 		return 0;
-		break;
 	case ni_gpct_variant_m_series:
 	case ni_gpct_variant_660x:
 		return 1;
-		break;
 	default:
 		BUG();
 		break;

commit e6b1624aae473aaf81f7170cafafdc242fd76044
Author: H Hartley Sweeten <hsweeten@visionengravers.com>
Date:   Thu Dec 19 16:31:53 2013 -0700

    staging: comedi: ni_tio_internal.h: add missing NITIO_*_REG macro
    
    The "HW Save" registers are the only ones missing an access macro.
    Add one for completness.
    
    Signed-off-by: H Hartley Sweeten <hsweeten@visionengravers.com>
    Reviewed-by: Ian Abbott <abbotti@mev.co.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/drivers/ni_tio_internal.h b/drivers/staging/comedi/drivers/ni_tio_internal.h
index 4382f108a737..15b81b8fc5c4 100644
--- a/drivers/staging/comedi/drivers/ni_tio_internal.h
+++ b/drivers/staging/comedi/drivers/ni_tio_internal.h
@@ -23,6 +23,7 @@
 
 #define NITIO_AUTO_INC_REG(x)		(NITIO_G0_AUTO_INC + (x))
 #define NITIO_CMD_REG(x)		(NITIO_G0_CMD + (x))
+#define NITIO_HW_SAVE_REG(x)		(NITIO_G0_HW_SAVE + (x))
 #define NITIO_SW_SAVE_REG(x)		(NITIO_G0_SW_SAVE + (x))
 #define NITIO_MODE_REG(x)		(NITIO_G0_MODE + (x))
 #define NITIO_LOADA_REG(x)		(NITIO_G0_LOADA + (x))

commit 94baf025ba41136eb4e9e858ebdbad33a6b3c539
Author: H Hartley Sweeten <hsweeten@visionengravers.com>
Date:   Thu Dec 19 16:31:52 2013 -0700

    staging: comedi: ni_tio_internal.h: replace NITIO_Gi_Interrupt_Enable_Reg()
    
    The "Interrupt Enable" registers are sequential in the enum ni_gpct_register.
    Replace this inline CamelCase function with a simple define.
    
    Signed-off-by: H Hartley Sweeten <hsweeten@visionengravers.com>
    Reviewed-by: Ian Abbott <abbotti@mev.co.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/drivers/ni_tio_internal.h b/drivers/staging/comedi/drivers/ni_tio_internal.h
index 5bd06897d4dc..4382f108a737 100644
--- a/drivers/staging/comedi/drivers/ni_tio_internal.h
+++ b/drivers/staging/comedi/drivers/ni_tio_internal.h
@@ -39,21 +39,7 @@
 #define NITIO_ABZ_REG(x)		(NITIO_G0_ABZ + (x))
 #define NITIO_INT_ACK_REG(x)		(NITIO_G0_INT_ACK + (x))
 #define NITIO_STATUS_REG(x)		(NITIO_G0_STATUS + (x))
-
-static inline enum ni_gpct_register NITIO_Gi_Interrupt_Enable_Reg(unsigned idx)
-{
-	switch (idx) {
-	case 0:
-		return NITIO_G0_INT_ENA;
-	case 1:
-		return NITIO_G1_INT_ENA;
-	case 2:
-		return NITIO_G2_INT_ENA;
-	case 3:
-		return NITIO_G3_INT_ENA;
-	}
-	return 0;
-}
+#define NITIO_INT_ENA_REG(x)		(NITIO_G0_INT_ENA + (x))
 
 enum Gi_Auto_Increment_Reg_Bits {
 	Gi_Auto_Increment_Mask = 0xff

commit c9d766d04ab032943c0fa68ddc6434ca1fe2c9f8
Author: H Hartley Sweeten <hsweeten@visionengravers.com>
Date:   Thu Dec 19 16:31:51 2013 -0700

    staging: comedi: ni_tio_internal.h: replace NITIO_Gi_Status_Reg()
    
    The "Status" registers are sequential in the enum ni_gpct_register.
    Replace this inline CamelCase function with a simple define.
    
    Rename the define for the shared status register.
    
    Signed-off-by: H Hartley Sweeten <hsweeten@visionengravers.com>
    Reviewed-by: Ian Abbott <abbotti@mev.co.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/drivers/ni_tio_internal.h b/drivers/staging/comedi/drivers/ni_tio_internal.h
index b5b5822d9355..5bd06897d4dc 100644
--- a/drivers/staging/comedi/drivers/ni_tio_internal.h
+++ b/drivers/staging/comedi/drivers/ni_tio_internal.h
@@ -30,7 +30,7 @@
 #define NITIO_INPUT_SEL_REG(x)		(NITIO_G0_INPUT_SEL + (x))
 #define NITIO_CNT_MODE_REG(x)		(NITIO_G0_CNT_MODE + (x))
 #define NITIO_GATE2_REG(x)		(NITIO_G0_GATE2 + (x))
-#define NITIO_STATUS_REG(x)		(NITIO_G01_STATUS + ((x) / 2))
+#define NITIO_SHARED_STATUS_REG(x)	(NITIO_G01_STATUS + ((x) / 2))
 #define NITIO_RESET_REG(x)		(NITIO_G01_RESET + ((x) / 2))
 #define NITIO_STATUS1_REG(x)		(NITIO_G01_STATUS1 + ((x) / 2))
 #define NITIO_STATUS2_REG(x)		(NITIO_G01_STATUS2 + ((x) / 2))
@@ -38,21 +38,7 @@
 #define NITIO_DMA_STATUS_REG(x)		(NITIO_G0_DMA_STATUS + (x))
 #define NITIO_ABZ_REG(x)		(NITIO_G0_ABZ + (x))
 #define NITIO_INT_ACK_REG(x)		(NITIO_G0_INT_ACK + (x))
-
-static inline enum ni_gpct_register NITIO_Gi_Status_Reg(unsigned idx)
-{
-	switch (idx) {
-	case 0:
-		return NITIO_G0_STATUS;
-	case 1:
-		return NITIO_G1_STATUS;
-	case 2:
-		return NITIO_G2_STATUS;
-	case 3:
-		return NITIO_G3_STATUS;
-	}
-	return 0;
-}
+#define NITIO_STATUS_REG(x)		(NITIO_G0_STATUS + (x))
 
 static inline enum ni_gpct_register NITIO_Gi_Interrupt_Enable_Reg(unsigned idx)
 {

commit e72ccb041bc1d068ae216c7fa6513d70c075d440
Author: H Hartley Sweeten <hsweeten@visionengravers.com>
Date:   Thu Dec 19 16:31:50 2013 -0700

    staging: comedi: ni_tio_internal.h: replace NITIO_Gi_Interrupt_Acknowledge_Reg()
    
    The "Interrupt Acknowledge" registers are sequential in the enum ni_gpct_register.
    Replace this inline CamelCase function with a simple define.
    
    Signed-off-by: H Hartley Sweeten <hsweeten@visionengravers.com>
    Reviewed-by: Ian Abbott <abbotti@mev.co.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/drivers/ni_tio_internal.h b/drivers/staging/comedi/drivers/ni_tio_internal.h
index b256c94efc60..b5b5822d9355 100644
--- a/drivers/staging/comedi/drivers/ni_tio_internal.h
+++ b/drivers/staging/comedi/drivers/ni_tio_internal.h
@@ -37,21 +37,7 @@
 #define NITIO_DMA_CFG_REG(x)		(NITIO_G0_DMA_CFG + (x))
 #define NITIO_DMA_STATUS_REG(x)		(NITIO_G0_DMA_STATUS + (x))
 #define NITIO_ABZ_REG(x)		(NITIO_G0_ABZ + (x))
-
-static inline enum ni_gpct_register NITIO_Gi_Interrupt_Acknowledge_Reg(unsigned idx)
-{
-	switch (idx) {
-	case 0:
-		return NITIO_G0_INT_ACK;
-	case 1:
-		return NITIO_G1_INT_ACK;
-	case 2:
-		return NITIO_G2_INT_ACK;
-	case 3:
-		return NITIO_G3_INT_ACK;
-	}
-	return 0;
-}
+#define NITIO_INT_ACK_REG(x)		(NITIO_G0_INT_ACK + (x))
 
 static inline enum ni_gpct_register NITIO_Gi_Status_Reg(unsigned idx)
 {

commit ff157abe21e76c0d51065bd93e91051547f5d608
Author: H Hartley Sweeten <hsweeten@visionengravers.com>
Date:   Thu Dec 19 16:31:49 2013 -0700

    staging: comedi: ni_tio_internal.h: replace NITIO_Gi_ABZ_Reg()
    
    The "ABZ" registers are sequential in the enum ni_gpct_register.
    Replace this inline CamelCase function with a simple define.
    
    Signed-off-by: H Hartley Sweeten <hsweeten@visionengravers.com>
    Reviewed-by: Ian Abbott <abbotti@mev.co.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/drivers/ni_tio_internal.h b/drivers/staging/comedi/drivers/ni_tio_internal.h
index cac996b27137..b256c94efc60 100644
--- a/drivers/staging/comedi/drivers/ni_tio_internal.h
+++ b/drivers/staging/comedi/drivers/ni_tio_internal.h
@@ -36,17 +36,7 @@
 #define NITIO_STATUS2_REG(x)		(NITIO_G01_STATUS2 + ((x) / 2))
 #define NITIO_DMA_CFG_REG(x)		(NITIO_G0_DMA_CFG + (x))
 #define NITIO_DMA_STATUS_REG(x)		(NITIO_G0_DMA_STATUS + (x))
-
-static inline enum ni_gpct_register NITIO_Gi_ABZ_Reg(unsigned idx)
-{
-	switch (idx) {
-	case 0:
-		return NITIO_G0_ABZ;
-	case 1:
-		return NITIO_G1_ABZ;
-	}
-	return 0;
-}
+#define NITIO_ABZ_REG(x)		(NITIO_G0_ABZ + (x))
 
 static inline enum ni_gpct_register NITIO_Gi_Interrupt_Acknowledge_Reg(unsigned idx)
 {

commit 8cd3936e974916238a2f7e10c635c63befa5dfe6
Author: H Hartley Sweeten <hsweeten@visionengravers.com>
Date:   Thu Dec 19 16:31:48 2013 -0700

    staging: comedi: ni_tio_internal.h: replace NITIO_Gi_DMA_Status_Reg()
    
    The "DMA Status" registers are sequential in the enum ni_gpct_register.
    Replace this inline CamelCase function with a simple define.
    
    Signed-off-by: H Hartley Sweeten <hsweeten@visionengravers.com>
    Reviewed-by: Ian Abbott <abbotti@mev.co.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/drivers/ni_tio_internal.h b/drivers/staging/comedi/drivers/ni_tio_internal.h
index 2a4ae57150f3..cac996b27137 100644
--- a/drivers/staging/comedi/drivers/ni_tio_internal.h
+++ b/drivers/staging/comedi/drivers/ni_tio_internal.h
@@ -35,21 +35,7 @@
 #define NITIO_STATUS1_REG(x)		(NITIO_G01_STATUS1 + ((x) / 2))
 #define NITIO_STATUS2_REG(x)		(NITIO_G01_STATUS2 + ((x) / 2))
 #define NITIO_DMA_CFG_REG(x)		(NITIO_G0_DMA_CFG + (x))
-
-static inline enum ni_gpct_register NITIO_Gi_DMA_Status_Reg(unsigned idx)
-{
-	switch (idx) {
-	case 0:
-		return NITIO_G0_DMA_STATUS;
-	case 1:
-		return NITIO_G1_DMA_STATUS;
-	case 2:
-		return NITIO_G2_DMA_STATUS;
-	case 3:
-		return NITIO_G3_DMA_STATUS;
-	}
-	return 0;
-}
+#define NITIO_DMA_STATUS_REG(x)		(NITIO_G0_DMA_STATUS + (x))
 
 static inline enum ni_gpct_register NITIO_Gi_ABZ_Reg(unsigned idx)
 {

commit 1dd26c2152502b4521d4c7d3aad07ed4eda5705f
Author: H Hartley Sweeten <hsweeten@visionengravers.com>
Date:   Thu Dec 19 16:31:47 2013 -0700

    staging: comedi: ni_tio_internal.h: replace NITIO_Gi_DMA_Config_Reg()
    
    The "DMA Config" registers are sequential in the enum ni_gpct_register.
    Replace this inline CamelCase function with a simple define.
    
    Signed-off-by: H Hartley Sweeten <hsweeten@visionengravers.com>
    Reviewed-by: Ian Abbott <abbotti@mev.co.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/drivers/ni_tio_internal.h b/drivers/staging/comedi/drivers/ni_tio_internal.h
index 1d6efa491611..2a4ae57150f3 100644
--- a/drivers/staging/comedi/drivers/ni_tio_internal.h
+++ b/drivers/staging/comedi/drivers/ni_tio_internal.h
@@ -34,21 +34,7 @@
 #define NITIO_RESET_REG(x)		(NITIO_G01_RESET + ((x) / 2))
 #define NITIO_STATUS1_REG(x)		(NITIO_G01_STATUS1 + ((x) / 2))
 #define NITIO_STATUS2_REG(x)		(NITIO_G01_STATUS2 + ((x) / 2))
-
-static inline enum ni_gpct_register NITIO_Gi_DMA_Config_Reg(unsigned idx)
-{
-	switch (idx) {
-	case 0:
-		return NITIO_G0_DMA_CFG;
-	case 1:
-		return NITIO_G1_DMA_CFG;
-	case 2:
-		return NITIO_G2_DMA_CFG;
-	case 3:
-		return NITIO_G3_DMA_CFG;
-	}
-	return 0;
-}
+#define NITIO_DMA_CFG_REG(x)		(NITIO_G0_DMA_CFG + (x))
 
 static inline enum ni_gpct_register NITIO_Gi_DMA_Status_Reg(unsigned idx)
 {

commit 5f19efaca687de6c9f12def06b14eb6c1cd79ee8
Author: H Hartley Sweeten <hsweeten@visionengravers.com>
Date:   Thu Dec 19 16:31:46 2013 -0700

    staging: comedi: ni_tio_internal.h: replace NITIO_Gxx_Joint_Status2_Reg()
    
    The shared "Status2" registers are sequential in the enum ni_gpct_register.
    Replace this inline CamelCase function with a simple define.
    
    Signed-off-by: H Hartley Sweeten <hsweeten@visionengravers.com>
    Reviewed-by: Ian Abbott <abbotti@mev.co.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/drivers/ni_tio_internal.h b/drivers/staging/comedi/drivers/ni_tio_internal.h
index 75e622030746..1d6efa491611 100644
--- a/drivers/staging/comedi/drivers/ni_tio_internal.h
+++ b/drivers/staging/comedi/drivers/ni_tio_internal.h
@@ -33,19 +33,7 @@
 #define NITIO_STATUS_REG(x)		(NITIO_G01_STATUS + ((x) / 2))
 #define NITIO_RESET_REG(x)		(NITIO_G01_RESET + ((x) / 2))
 #define NITIO_STATUS1_REG(x)		(NITIO_G01_STATUS1 + ((x) / 2))
-
-static inline enum ni_gpct_register NITIO_Gxx_Joint_Status2_Reg(unsigned idx)
-{
-	switch (idx) {
-	case 0:
-	case 1:
-		return NITIO_G01_STATUS2;
-	case 2:
-	case 3:
-		return NITIO_G23_STATUS2;
-	}
-	return 0;
-}
+#define NITIO_STATUS2_REG(x)		(NITIO_G01_STATUS2 + ((x) / 2))
 
 static inline enum ni_gpct_register NITIO_Gi_DMA_Config_Reg(unsigned idx)
 {

commit 450a7c43e8742a176e451ff2dfc3e22eae839987
Author: H Hartley Sweeten <hsweeten@visionengravers.com>
Date:   Thu Dec 19 16:31:45 2013 -0700

    staging: comedi: ni_tio_internal.h: replace NITIO_Gxx_Joint_Status1_Reg()
    
    The shared "Status1" registers are sequential in the enum ni_gpct_register.
    Replace this inline CamelCase function with a simple define.
    
    Signed-off-by: H Hartley Sweeten <hsweeten@visionengravers.com>
    Reviewed-by: Ian Abbott <abbotti@mev.co.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/drivers/ni_tio_internal.h b/drivers/staging/comedi/drivers/ni_tio_internal.h
index f9eb2d0f6cb6..75e622030746 100644
--- a/drivers/staging/comedi/drivers/ni_tio_internal.h
+++ b/drivers/staging/comedi/drivers/ni_tio_internal.h
@@ -32,19 +32,7 @@
 #define NITIO_GATE2_REG(x)		(NITIO_G0_GATE2 + (x))
 #define NITIO_STATUS_REG(x)		(NITIO_G01_STATUS + ((x) / 2))
 #define NITIO_RESET_REG(x)		(NITIO_G01_RESET + ((x) / 2))
-
-static inline enum ni_gpct_register NITIO_Gxx_Joint_Status1_Reg(unsigned idx)
-{
-	switch (idx) {
-	case 0:
-	case 1:
-		return NITIO_G01_STATUS1;
-	case 2:
-	case 3:
-		return NITIO_G23_STATUS1;
-	}
-	return 0;
-}
+#define NITIO_STATUS1_REG(x)		(NITIO_G01_STATUS1 + ((x) / 2))
 
 static inline enum ni_gpct_register NITIO_Gxx_Joint_Status2_Reg(unsigned idx)
 {

commit fc31c52f4cfb9465ff69df881807ef1cc0730501
Author: H Hartley Sweeten <hsweeten@visionengravers.com>
Date:   Thu Dec 19 16:31:44 2013 -0700

    staging: comedi: ni_tio_internal.h: replace NITIO_Gxx_Joint_Reset_Reg()
    
    The shared "Reset" registers are sequential in the enum ni_gpct_register.
    Replace this inline CamelCase function with a simple define.
    
    Signed-off-by: H Hartley Sweeten <hsweeten@visionengravers.com>
    Reviewed-by: Ian Abbott <abbotti@mev.co.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/drivers/ni_tio_internal.h b/drivers/staging/comedi/drivers/ni_tio_internal.h
index 604fa6909f09..f9eb2d0f6cb6 100644
--- a/drivers/staging/comedi/drivers/ni_tio_internal.h
+++ b/drivers/staging/comedi/drivers/ni_tio_internal.h
@@ -31,19 +31,7 @@
 #define NITIO_CNT_MODE_REG(x)		(NITIO_G0_CNT_MODE + (x))
 #define NITIO_GATE2_REG(x)		(NITIO_G0_GATE2 + (x))
 #define NITIO_STATUS_REG(x)		(NITIO_G01_STATUS + ((x) / 2))
-
-static inline enum ni_gpct_register NITIO_Gxx_Joint_Reset_Reg(unsigned idx)
-{
-	switch (idx) {
-	case 0:
-	case 1:
-		return NITIO_G01_RESET;
-	case 2:
-	case 3:
-		return NITIO_G23_RESET;
-	}
-	return 0;
-}
+#define NITIO_RESET_REG(x)		(NITIO_G01_RESET + ((x) / 2))
 
 static inline enum ni_gpct_register NITIO_Gxx_Joint_Status1_Reg(unsigned idx)
 {

commit 96b6175aa32385db609c706f2c78b14ac515e926
Author: H Hartley Sweeten <hsweeten@visionengravers.com>
Date:   Thu Dec 19 16:31:43 2013 -0700

    staging: comedi: ni_tio_internal.h: replace NITIO_Gxx_Status_Reg()
    
    The shared "Status" registers are sequential in the enum ni_gpct_register.
    Replace this inline CamelCase function with a simple define.
    
    Signed-off-by: H Hartley Sweeten <hsweeten@visionengravers.com>
    Reviewed-by: Ian Abbott <abbotti@mev.co.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/drivers/ni_tio_internal.h b/drivers/staging/comedi/drivers/ni_tio_internal.h
index 1ef5f35f4049..604fa6909f09 100644
--- a/drivers/staging/comedi/drivers/ni_tio_internal.h
+++ b/drivers/staging/comedi/drivers/ni_tio_internal.h
@@ -30,6 +30,7 @@
 #define NITIO_INPUT_SEL_REG(x)		(NITIO_G0_INPUT_SEL + (x))
 #define NITIO_CNT_MODE_REG(x)		(NITIO_G0_CNT_MODE + (x))
 #define NITIO_GATE2_REG(x)		(NITIO_G0_GATE2 + (x))
+#define NITIO_STATUS_REG(x)		(NITIO_G01_STATUS + ((x) / 2))
 
 static inline enum ni_gpct_register NITIO_Gxx_Joint_Reset_Reg(unsigned idx)
 {
@@ -70,19 +71,6 @@ static inline enum ni_gpct_register NITIO_Gxx_Joint_Status2_Reg(unsigned idx)
 	return 0;
 }
 
-static inline enum ni_gpct_register NITIO_Gxx_Status_Reg(unsigned idx)
-{
-	switch (idx) {
-	case 0:
-	case 1:
-		return NITIO_G01_STATUS;
-	case 2:
-	case 3:
-		return NITIO_G23_STATUS;
-	}
-	return 0;
-}
-
 static inline enum ni_gpct_register NITIO_Gi_DMA_Config_Reg(unsigned idx)
 {
 	switch (idx) {

commit 7a0894e0d465a6bcf6fc3f67c75f808f0d90fa3e
Author: H Hartley Sweeten <hsweeten@visionengravers.com>
Date:   Thu Dec 19 16:31:42 2013 -0700

    staging: comedi: ni_tio_internal.h: replace NITIO_Gi_Second_Gate_Reg()
    
    The "Second Gate" registers are sequential in the enum ni_gpct_register.
    Replace this inline CamelCase function with a simple define.
    
    Signed-off-by: H Hartley Sweeten <hsweeten@visionengravers.com>
    Reviewed-by: Ian Abbott <abbotti@mev.co.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/drivers/ni_tio_internal.h b/drivers/staging/comedi/drivers/ni_tio_internal.h
index 0a4809accfe7..1ef5f35f4049 100644
--- a/drivers/staging/comedi/drivers/ni_tio_internal.h
+++ b/drivers/staging/comedi/drivers/ni_tio_internal.h
@@ -29,6 +29,7 @@
 #define NITIO_LOADB_REG(x)		(NITIO_G0_LOADB + (x))
 #define NITIO_INPUT_SEL_REG(x)		(NITIO_G0_INPUT_SEL + (x))
 #define NITIO_CNT_MODE_REG(x)		(NITIO_G0_CNT_MODE + (x))
+#define NITIO_GATE2_REG(x)		(NITIO_G0_GATE2 + (x))
 
 static inline enum ni_gpct_register NITIO_Gxx_Joint_Reset_Reg(unsigned idx)
 {
@@ -82,21 +83,6 @@ static inline enum ni_gpct_register NITIO_Gxx_Status_Reg(unsigned idx)
 	return 0;
 }
 
-static inline enum ni_gpct_register NITIO_Gi_Second_Gate_Reg(unsigned idx)
-{
-	switch (idx) {
-	case 0:
-		return NITIO_G0_GATE2;
-	case 1:
-		return NITIO_G1_GATE2;
-	case 2:
-		return NITIO_G2_GATE2;
-	case 3:
-		return NITIO_G3_GATE2;
-	}
-	return 0;
-}
-
 static inline enum ni_gpct_register NITIO_Gi_DMA_Config_Reg(unsigned idx)
 {
 	switch (idx) {

commit 0412ea4696decc35ec5f394ab7832619504c96a7
Author: H Hartley Sweeten <hsweeten@visionengravers.com>
Date:   Thu Dec 19 16:31:41 2013 -0700

    staging: comedi: ni_tio_internal.h: replace NITIO_Gi_Counting_Mode_Reg()
    
    The "Counting Mode" registers are sequential in the enum ni_gpct_register.
    Replace this inline CamelCase function with a simple define.
    
    Signed-off-by: H Hartley Sweeten <hsweeten@visionengravers.com>
    Reviewed-by: Ian Abbott <abbotti@mev.co.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/drivers/ni_tio_internal.h b/drivers/staging/comedi/drivers/ni_tio_internal.h
index b8cd43b82bb9..0a4809accfe7 100644
--- a/drivers/staging/comedi/drivers/ni_tio_internal.h
+++ b/drivers/staging/comedi/drivers/ni_tio_internal.h
@@ -28,21 +28,7 @@
 #define NITIO_LOADA_REG(x)		(NITIO_G0_LOADA + (x))
 #define NITIO_LOADB_REG(x)		(NITIO_G0_LOADB + (x))
 #define NITIO_INPUT_SEL_REG(x)		(NITIO_G0_INPUT_SEL + (x))
-
-static inline enum ni_gpct_register NITIO_Gi_Counting_Mode_Reg(unsigned idx)
-{
-	switch (idx) {
-	case 0:
-		return NITIO_G0_CNT_MODE;
-	case 1:
-		return NITIO_G1_CNT_MODE;
-	case 2:
-		return NITIO_G2_CNT_MODE;
-	case 3:
-		return NITIO_G3_CNT_MODE;
-	}
-	return 0;
-}
+#define NITIO_CNT_MODE_REG(x)		(NITIO_G0_CNT_MODE + (x))
 
 static inline enum ni_gpct_register NITIO_Gxx_Joint_Reset_Reg(unsigned idx)
 {

commit 3da68f50f2a1eaa8d9e5bf1e354eb14c0da1375d
Author: H Hartley Sweeten <hsweeten@visionengravers.com>
Date:   Thu Dec 19 16:31:40 2013 -0700

    staging: comedi: ni_tio_internal.h: replace NITIO_Gi_Input_Select_Reg()
    
    The "Input Select" registers are sequential in the enum ni_gpct_register.
    Replace this inline CamelCase function with a simple define.
    
    Signed-off-by: H Hartley Sweeten <hsweeten@visionengravers.com>
    Reviewed-by: Ian Abbott <abbotti@mev.co.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/drivers/ni_tio_internal.h b/drivers/staging/comedi/drivers/ni_tio_internal.h
index d4176bf3c53a..b8cd43b82bb9 100644
--- a/drivers/staging/comedi/drivers/ni_tio_internal.h
+++ b/drivers/staging/comedi/drivers/ni_tio_internal.h
@@ -27,6 +27,7 @@
 #define NITIO_MODE_REG(x)		(NITIO_G0_MODE + (x))
 #define NITIO_LOADA_REG(x)		(NITIO_G0_LOADA + (x))
 #define NITIO_LOADB_REG(x)		(NITIO_G0_LOADB + (x))
+#define NITIO_INPUT_SEL_REG(x)		(NITIO_G0_INPUT_SEL + (x))
 
 static inline enum ni_gpct_register NITIO_Gi_Counting_Mode_Reg(unsigned idx)
 {
@@ -43,21 +44,6 @@ static inline enum ni_gpct_register NITIO_Gi_Counting_Mode_Reg(unsigned idx)
 	return 0;
 }
 
-static inline enum ni_gpct_register NITIO_Gi_Input_Select_Reg(unsigned idx)
-{
-	switch (idx) {
-	case 0:
-		return NITIO_G0_INPUT_SEL;
-	case 1:
-		return NITIO_G1_INPUT_SEL;
-	case 2:
-		return NITIO_G2_INPUT_SEL;
-	case 3:
-		return NITIO_G3_INPUT_SEL;
-	}
-	return 0;
-}
-
 static inline enum ni_gpct_register NITIO_Gxx_Joint_Reset_Reg(unsigned idx)
 {
 	switch (idx) {

commit cc7a164b1686e233fa9d8f796e1b657379cd9278
Author: H Hartley Sweeten <hsweeten@visionengravers.com>
Date:   Thu Dec 19 16:31:39 2013 -0700

    staging: comedi: ni_tio_internal.h: replace NITIO_Gi_LoadB_Reg()
    
    The "LoadB" registers are sequential in the enum ni_gpct_register.
    Replace this inline CamelCase function with a simple define.
    
    Signed-off-by: H Hartley Sweeten <hsweeten@visionengravers.com>
    Reviewed-by: Ian Abbott <abbotti@mev.co.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/drivers/ni_tio_internal.h b/drivers/staging/comedi/drivers/ni_tio_internal.h
index 1df787054bf9..d4176bf3c53a 100644
--- a/drivers/staging/comedi/drivers/ni_tio_internal.h
+++ b/drivers/staging/comedi/drivers/ni_tio_internal.h
@@ -26,6 +26,7 @@
 #define NITIO_SW_SAVE_REG(x)		(NITIO_G0_SW_SAVE + (x))
 #define NITIO_MODE_REG(x)		(NITIO_G0_MODE + (x))
 #define NITIO_LOADA_REG(x)		(NITIO_G0_LOADA + (x))
+#define NITIO_LOADB_REG(x)		(NITIO_G0_LOADB + (x))
 
 static inline enum ni_gpct_register NITIO_Gi_Counting_Mode_Reg(unsigned idx)
 {
@@ -109,21 +110,6 @@ static inline enum ni_gpct_register NITIO_Gxx_Status_Reg(unsigned idx)
 	return 0;
 }
 
-static inline enum ni_gpct_register NITIO_Gi_LoadB_Reg(unsigned idx)
-{
-	switch (idx) {
-	case 0:
-		return NITIO_G0_LOADB;
-	case 1:
-		return NITIO_G1_LOADB;
-	case 2:
-		return NITIO_G2_LOADB;
-	case 3:
-		return NITIO_G3_LOADB;
-	}
-	return 0;
-}
-
 static inline enum ni_gpct_register NITIO_Gi_Second_Gate_Reg(unsigned idx)
 {
 	switch (idx) {

commit 720712f439b3f02bcf473efe83ece259d97ce455
Author: H Hartley Sweeten <hsweeten@visionengravers.com>
Date:   Thu Dec 19 16:31:38 2013 -0700

    staging: comedi: ni_tio_internal.h: replace NITIO_Gi_LoadA_Reg()
    
    The "LoadA" registers are sequential in the enum ni_gpct_register.
    Replace this inline CamelCase function with a simple define.
    
    Signed-off-by: H Hartley Sweeten <hsweeten@visionengravers.com>
    Reviewed-by: Ian Abbott <abbotti@mev.co.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/drivers/ni_tio_internal.h b/drivers/staging/comedi/drivers/ni_tio_internal.h
index 1f7cc423b457..1df787054bf9 100644
--- a/drivers/staging/comedi/drivers/ni_tio_internal.h
+++ b/drivers/staging/comedi/drivers/ni_tio_internal.h
@@ -25,6 +25,7 @@
 #define NITIO_CMD_REG(x)		(NITIO_G0_CMD + (x))
 #define NITIO_SW_SAVE_REG(x)		(NITIO_G0_SW_SAVE + (x))
 #define NITIO_MODE_REG(x)		(NITIO_G0_MODE + (x))
+#define NITIO_LOADA_REG(x)		(NITIO_G0_LOADA + (x))
 
 static inline enum ni_gpct_register NITIO_Gi_Counting_Mode_Reg(unsigned idx)
 {
@@ -108,21 +109,6 @@ static inline enum ni_gpct_register NITIO_Gxx_Status_Reg(unsigned idx)
 	return 0;
 }
 
-static inline enum ni_gpct_register NITIO_Gi_LoadA_Reg(unsigned idx)
-{
-	switch (idx) {
-	case 0:
-		return NITIO_G0_LOADA;
-	case 1:
-		return NITIO_G1_LOADA;
-	case 2:
-		return NITIO_G2_LOADA;
-	case 3:
-		return NITIO_G3_LOADA;
-	}
-	return 0;
-}
-
 static inline enum ni_gpct_register NITIO_Gi_LoadB_Reg(unsigned idx)
 {
 	switch (idx) {

commit 0101791e83cbd9076c34bf138d1407442dfdf95f
Author: H Hartley Sweeten <hsweeten@visionengravers.com>
Date:   Thu Dec 19 16:31:37 2013 -0700

    staging: comedi: ni_tio_internal.h: replace NITIO_Gi_Mode_Reg()
    
    The "Mode" registers are sequential in the enum ni_gpct_register.
    Replace this inline CamelCase function with a simple define.
    
    Signed-off-by: H Hartley Sweeten <hsweeten@visionengravers.com>
    Reviewed-by: Ian Abbott <abbotti@mev.co.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/drivers/ni_tio_internal.h b/drivers/staging/comedi/drivers/ni_tio_internal.h
index cda3875db0b8..1f7cc423b457 100644
--- a/drivers/staging/comedi/drivers/ni_tio_internal.h
+++ b/drivers/staging/comedi/drivers/ni_tio_internal.h
@@ -24,6 +24,7 @@
 #define NITIO_AUTO_INC_REG(x)		(NITIO_G0_AUTO_INC + (x))
 #define NITIO_CMD_REG(x)		(NITIO_G0_CMD + (x))
 #define NITIO_SW_SAVE_REG(x)		(NITIO_G0_SW_SAVE + (x))
+#define NITIO_MODE_REG(x)		(NITIO_G0_MODE + (x))
 
 static inline enum ni_gpct_register NITIO_Gi_Counting_Mode_Reg(unsigned idx)
 {
@@ -137,21 +138,6 @@ static inline enum ni_gpct_register NITIO_Gi_LoadB_Reg(unsigned idx)
 	return 0;
 }
 
-static inline enum ni_gpct_register NITIO_Gi_Mode_Reg(unsigned idx)
-{
-	switch (idx) {
-	case 0:
-		return NITIO_G0_MODE;
-	case 1:
-		return NITIO_G1_MODE;
-	case 2:
-		return NITIO_G2_MODE;
-	case 3:
-		return NITIO_G3_MODE;
-	}
-	return 0;
-}
-
 static inline enum ni_gpct_register NITIO_Gi_Second_Gate_Reg(unsigned idx)
 {
 	switch (idx) {

commit 67c68de0f13d17433b40d12ba1a8a36e4e2a0270
Author: H Hartley Sweeten <hsweeten@visionengravers.com>
Date:   Thu Dec 19 16:31:36 2013 -0700

    staging: comedi: ni_tio_internal.h: replace NITIO_Gi_SW_Save_Reg()
    
    The "SW Save" registers are sequential in the enum ni_gpct_register.
    Replace this inline CamelCase function with a simple define.
    
    Signed-off-by: H Hartley Sweeten <hsweeten@visionengravers.com>
    Reviewed-by: Ian Abbott <abbotti@mev.co.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/drivers/ni_tio_internal.h b/drivers/staging/comedi/drivers/ni_tio_internal.h
index 9587b877c116..cda3875db0b8 100644
--- a/drivers/staging/comedi/drivers/ni_tio_internal.h
+++ b/drivers/staging/comedi/drivers/ni_tio_internal.h
@@ -23,6 +23,7 @@
 
 #define NITIO_AUTO_INC_REG(x)		(NITIO_G0_AUTO_INC + (x))
 #define NITIO_CMD_REG(x)		(NITIO_G0_CMD + (x))
+#define NITIO_SW_SAVE_REG(x)		(NITIO_G0_SW_SAVE + (x))
 
 static inline enum ni_gpct_register NITIO_Gi_Counting_Mode_Reg(unsigned idx)
 {
@@ -151,21 +152,6 @@ static inline enum ni_gpct_register NITIO_Gi_Mode_Reg(unsigned idx)
 	return 0;
 }
 
-static inline enum ni_gpct_register NITIO_Gi_SW_Save_Reg(int idx)
-{
-	switch (idx) {
-	case 0:
-		return NITIO_G0_SW_SAVE;
-	case 1:
-		return NITIO_G1_SW_SAVE;
-	case 2:
-		return NITIO_G2_SW_SAVE;
-	case 3:
-		return NITIO_G3_SW_SAVE;
-	}
-	return 0;
-}
-
 static inline enum ni_gpct_register NITIO_Gi_Second_Gate_Reg(unsigned idx)
 {
 	switch (idx) {

commit e25ef744460ca114c9f4cd5178932135c760f456
Author: H Hartley Sweeten <hsweeten@visionengravers.com>
Date:   Thu Dec 19 16:31:35 2013 -0700

    staging: comedi: ni_tio_internal.h: replace NITIO_Gi_Command_Reg()
    
    The "Command" registers are sequential in the enum ni_gpct_register.
    Replace this inline CamelCase function with a simple define.
    
    Signed-off-by: H Hartley Sweeten <hsweeten@visionengravers.com>
    Reviewed-by: Ian Abbott <abbotti@mev.co.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/drivers/ni_tio_internal.h b/drivers/staging/comedi/drivers/ni_tio_internal.h
index 5d3899fb17eb..9587b877c116 100644
--- a/drivers/staging/comedi/drivers/ni_tio_internal.h
+++ b/drivers/staging/comedi/drivers/ni_tio_internal.h
@@ -22,21 +22,7 @@
 #include "ni_tio.h"
 
 #define NITIO_AUTO_INC_REG(x)		(NITIO_G0_AUTO_INC + (x))
-
-static inline enum ni_gpct_register NITIO_Gi_Command_Reg(unsigned idx)
-{
-	switch (idx) {
-	case 0:
-		return NITIO_G0_CMD;
-	case 1:
-		return NITIO_G1_CMD;
-	case 2:
-		return NITIO_G2_CMD;
-	case 3:
-		return NITIO_G3_CMD;
-	}
-	return 0;
-}
+#define NITIO_CMD_REG(x)		(NITIO_G0_CMD + (x))
 
 static inline enum ni_gpct_register NITIO_Gi_Counting_Mode_Reg(unsigned idx)
 {

commit e062f51b79062b691e81b1851b4b2871093410c3
Author: H Hartley Sweeten <hsweeten@visionengravers.com>
Date:   Thu Dec 19 16:31:34 2013 -0700

    staging: comedi: ni_tio_internal.h: replace NITIO_Gi_Autoincrement_Reg()
    
    The "AutoIncrement" registers are sequential in the enum ni_gpct_register.
    Replace this inline CamelCase function with a simple define.
    
    Signed-off-by: H Hartley Sweeten <hsweeten@visionengravers.com>
    Reviewed-by: Ian Abbott <abbotti@mev.co.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/drivers/ni_tio_internal.h b/drivers/staging/comedi/drivers/ni_tio_internal.h
index 88d51e4cdd89..5d3899fb17eb 100644
--- a/drivers/staging/comedi/drivers/ni_tio_internal.h
+++ b/drivers/staging/comedi/drivers/ni_tio_internal.h
@@ -21,20 +21,7 @@
 
 #include "ni_tio.h"
 
-static inline enum ni_gpct_register NITIO_Gi_Autoincrement_Reg(unsigned idx)
-{
-	switch (idx) {
-	case 0:
-		return NITIO_G0_AUTO_INC;
-	case 1:
-		return NITIO_G1_AUTO_INC;
-	case 2:
-		return NITIO_G2_AUTO_INC;
-	case 3:
-		return NITIO_G3_AUTO_INC;
-	}
-	return 0;
-}
+#define NITIO_AUTO_INC_REG(x)		(NITIO_G0_AUTO_INC + (x))
 
 static inline enum ni_gpct_register NITIO_Gi_Command_Reg(unsigned idx)
 {

commit 12375292ce8afebab91215539916ae6f511f3923
Author: H Hartley Sweeten <hsweeten@visionengravers.com>
Date:   Thu Dec 19 16:31:33 2013 -0700

    staging: comedi: ni_tio.h: rename the CamelCase enum ni_gpct_register labels
    
    As prefered by the CodingStyle, rename all the CamelCase labels of the
    enum ni_gpct_register.
    
    Cleanup all the helper functions in ni_tio_internal.h that used the enum.
    
    The 'counter_index' parameter to all the functions is the ni_gpct_device
    'counter_index' which is initialized when the subdevices are setup. This
    value is always < 4 so the default: BUG() cases can never happen. For
    aesthetics, rename the 'counter_idx' to simply 'idx' and fix the type in
    some of the helpers.
    
    Also, remove the unnecessary break statements after the return statements.
    
    Signed-off-by: H Hartley Sweeten <hsweeten@visionengravers.com>
    Reviewed-by: Ian Abbott <abbotti@mev.co.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/drivers/ni_tio_internal.h b/drivers/staging/comedi/drivers/ni_tio_internal.h
index b009876754a8..88d51e4cdd89 100644
--- a/drivers/staging/comedi/drivers/ni_tio_internal.h
+++ b/drivers/staging/comedi/drivers/ni_tio_internal.h
@@ -21,406 +21,275 @@
 
 #include "ni_tio.h"
 
-static inline enum ni_gpct_register NITIO_Gi_Autoincrement_Reg(unsigned
-							       counter_index)
+static inline enum ni_gpct_register NITIO_Gi_Autoincrement_Reg(unsigned idx)
 {
-	switch (counter_index) {
+	switch (idx) {
 	case 0:
-		return NITIO_G0_Autoincrement_Reg;
-		break;
+		return NITIO_G0_AUTO_INC;
 	case 1:
-		return NITIO_G1_Autoincrement_Reg;
-		break;
+		return NITIO_G1_AUTO_INC;
 	case 2:
-		return NITIO_G2_Autoincrement_Reg;
-		break;
+		return NITIO_G2_AUTO_INC;
 	case 3:
-		return NITIO_G3_Autoincrement_Reg;
-		break;
-	default:
-		BUG();
-		break;
+		return NITIO_G3_AUTO_INC;
 	}
 	return 0;
 }
 
-static inline enum ni_gpct_register NITIO_Gi_Command_Reg(unsigned counter_index)
+static inline enum ni_gpct_register NITIO_Gi_Command_Reg(unsigned idx)
 {
-	switch (counter_index) {
+	switch (idx) {
 	case 0:
-		return NITIO_G0_Command_Reg;
-		break;
+		return NITIO_G0_CMD;
 	case 1:
-		return NITIO_G1_Command_Reg;
-		break;
+		return NITIO_G1_CMD;
 	case 2:
-		return NITIO_G2_Command_Reg;
-		break;
+		return NITIO_G2_CMD;
 	case 3:
-		return NITIO_G3_Command_Reg;
-		break;
-	default:
-		BUG();
-		break;
+		return NITIO_G3_CMD;
 	}
 	return 0;
 }
 
-static inline enum ni_gpct_register NITIO_Gi_Counting_Mode_Reg(unsigned
-							       counter_index)
+static inline enum ni_gpct_register NITIO_Gi_Counting_Mode_Reg(unsigned idx)
 {
-	switch (counter_index) {
+	switch (idx) {
 	case 0:
-		return NITIO_G0_Counting_Mode_Reg;
-		break;
+		return NITIO_G0_CNT_MODE;
 	case 1:
-		return NITIO_G1_Counting_Mode_Reg;
-		break;
+		return NITIO_G1_CNT_MODE;
 	case 2:
-		return NITIO_G2_Counting_Mode_Reg;
-		break;
+		return NITIO_G2_CNT_MODE;
 	case 3:
-		return NITIO_G3_Counting_Mode_Reg;
-		break;
-	default:
-		BUG();
-		break;
+		return NITIO_G3_CNT_MODE;
 	}
 	return 0;
 }
 
-static inline enum ni_gpct_register NITIO_Gi_Input_Select_Reg(unsigned
-							      counter_index)
+static inline enum ni_gpct_register NITIO_Gi_Input_Select_Reg(unsigned idx)
 {
-	switch (counter_index) {
+	switch (idx) {
 	case 0:
-		return NITIO_G0_Input_Select_Reg;
-		break;
+		return NITIO_G0_INPUT_SEL;
 	case 1:
-		return NITIO_G1_Input_Select_Reg;
-		break;
+		return NITIO_G1_INPUT_SEL;
 	case 2:
-		return NITIO_G2_Input_Select_Reg;
-		break;
+		return NITIO_G2_INPUT_SEL;
 	case 3:
-		return NITIO_G3_Input_Select_Reg;
-		break;
-	default:
-		BUG();
-		break;
+		return NITIO_G3_INPUT_SEL;
 	}
 	return 0;
 }
 
-static inline enum ni_gpct_register NITIO_Gxx_Joint_Reset_Reg(unsigned
-							      counter_index)
+static inline enum ni_gpct_register NITIO_Gxx_Joint_Reset_Reg(unsigned idx)
 {
-	switch (counter_index) {
+	switch (idx) {
 	case 0:
 	case 1:
-		return NITIO_G01_Joint_Reset_Reg;
-		break;
+		return NITIO_G01_RESET;
 	case 2:
 	case 3:
-		return NITIO_G23_Joint_Reset_Reg;
-		break;
-	default:
-		BUG();
-		break;
+		return NITIO_G23_RESET;
 	}
 	return 0;
 }
 
-static inline enum ni_gpct_register NITIO_Gxx_Joint_Status1_Reg(unsigned
-								counter_index)
+static inline enum ni_gpct_register NITIO_Gxx_Joint_Status1_Reg(unsigned idx)
 {
-	switch (counter_index) {
+	switch (idx) {
 	case 0:
 	case 1:
-		return NITIO_G01_Joint_Status1_Reg;
-		break;
+		return NITIO_G01_STATUS1;
 	case 2:
 	case 3:
-		return NITIO_G23_Joint_Status1_Reg;
-		break;
-	default:
-		BUG();
-		break;
+		return NITIO_G23_STATUS1;
 	}
 	return 0;
 }
 
-static inline enum ni_gpct_register NITIO_Gxx_Joint_Status2_Reg(unsigned
-								counter_index)
+static inline enum ni_gpct_register NITIO_Gxx_Joint_Status2_Reg(unsigned idx)
 {
-	switch (counter_index) {
+	switch (idx) {
 	case 0:
 	case 1:
-		return NITIO_G01_Joint_Status2_Reg;
-		break;
+		return NITIO_G01_STATUS2;
 	case 2:
 	case 3:
-		return NITIO_G23_Joint_Status2_Reg;
-		break;
-	default:
-		BUG();
-		break;
+		return NITIO_G23_STATUS2;
 	}
 	return 0;
 }
 
-static inline enum ni_gpct_register NITIO_Gxx_Status_Reg(unsigned counter_index)
+static inline enum ni_gpct_register NITIO_Gxx_Status_Reg(unsigned idx)
 {
-	switch (counter_index) {
+	switch (idx) {
 	case 0:
 	case 1:
-		return NITIO_G01_Status_Reg;
-		break;
+		return NITIO_G01_STATUS;
 	case 2:
 	case 3:
-		return NITIO_G23_Status_Reg;
-		break;
-	default:
-		BUG();
-		break;
+		return NITIO_G23_STATUS;
 	}
 	return 0;
 }
 
-static inline enum ni_gpct_register NITIO_Gi_LoadA_Reg(unsigned counter_index)
+static inline enum ni_gpct_register NITIO_Gi_LoadA_Reg(unsigned idx)
 {
-	switch (counter_index) {
+	switch (idx) {
 	case 0:
-		return NITIO_G0_LoadA_Reg;
-		break;
+		return NITIO_G0_LOADA;
 	case 1:
-		return NITIO_G1_LoadA_Reg;
-		break;
+		return NITIO_G1_LOADA;
 	case 2:
-		return NITIO_G2_LoadA_Reg;
-		break;
+		return NITIO_G2_LOADA;
 	case 3:
-		return NITIO_G3_LoadA_Reg;
-		break;
-	default:
-		BUG();
-		break;
+		return NITIO_G3_LOADA;
 	}
 	return 0;
 }
 
-static inline enum ni_gpct_register NITIO_Gi_LoadB_Reg(unsigned counter_index)
+static inline enum ni_gpct_register NITIO_Gi_LoadB_Reg(unsigned idx)
 {
-	switch (counter_index) {
+	switch (idx) {
 	case 0:
-		return NITIO_G0_LoadB_Reg;
-		break;
+		return NITIO_G0_LOADB;
 	case 1:
-		return NITIO_G1_LoadB_Reg;
-		break;
+		return NITIO_G1_LOADB;
 	case 2:
-		return NITIO_G2_LoadB_Reg;
-		break;
+		return NITIO_G2_LOADB;
 	case 3:
-		return NITIO_G3_LoadB_Reg;
-		break;
-	default:
-		BUG();
-		break;
+		return NITIO_G3_LOADB;
 	}
 	return 0;
 }
 
-static inline enum ni_gpct_register NITIO_Gi_Mode_Reg(unsigned counter_index)
+static inline enum ni_gpct_register NITIO_Gi_Mode_Reg(unsigned idx)
 {
-	switch (counter_index) {
+	switch (idx) {
 	case 0:
-		return NITIO_G0_Mode_Reg;
-		break;
+		return NITIO_G0_MODE;
 	case 1:
-		return NITIO_G1_Mode_Reg;
-		break;
+		return NITIO_G1_MODE;
 	case 2:
-		return NITIO_G2_Mode_Reg;
-		break;
+		return NITIO_G2_MODE;
 	case 3:
-		return NITIO_G3_Mode_Reg;
-		break;
-	default:
-		BUG();
-		break;
+		return NITIO_G3_MODE;
 	}
 	return 0;
 }
 
-static inline enum ni_gpct_register NITIO_Gi_SW_Save_Reg(int counter_index)
+static inline enum ni_gpct_register NITIO_Gi_SW_Save_Reg(int idx)
 {
-	switch (counter_index) {
+	switch (idx) {
 	case 0:
-		return NITIO_G0_SW_Save_Reg;
-		break;
+		return NITIO_G0_SW_SAVE;
 	case 1:
-		return NITIO_G1_SW_Save_Reg;
-		break;
+		return NITIO_G1_SW_SAVE;
 	case 2:
-		return NITIO_G2_SW_Save_Reg;
-		break;
+		return NITIO_G2_SW_SAVE;
 	case 3:
-		return NITIO_G3_SW_Save_Reg;
-		break;
-	default:
-		BUG();
-		break;
+		return NITIO_G3_SW_SAVE;
 	}
 	return 0;
 }
 
-static inline enum ni_gpct_register NITIO_Gi_Second_Gate_Reg(int counter_index)
+static inline enum ni_gpct_register NITIO_Gi_Second_Gate_Reg(unsigned idx)
 {
-	switch (counter_index) {
+	switch (idx) {
 	case 0:
-		return NITIO_G0_Second_Gate_Reg;
-		break;
+		return NITIO_G0_GATE2;
 	case 1:
-		return NITIO_G1_Second_Gate_Reg;
-		break;
+		return NITIO_G1_GATE2;
 	case 2:
-		return NITIO_G2_Second_Gate_Reg;
-		break;
+		return NITIO_G2_GATE2;
 	case 3:
-		return NITIO_G3_Second_Gate_Reg;
-		break;
-	default:
-		BUG();
-		break;
+		return NITIO_G3_GATE2;
 	}
 	return 0;
 }
 
-static inline enum ni_gpct_register NITIO_Gi_DMA_Config_Reg(int counter_index)
+static inline enum ni_gpct_register NITIO_Gi_DMA_Config_Reg(unsigned idx)
 {
-	switch (counter_index) {
+	switch (idx) {
 	case 0:
-		return NITIO_G0_DMA_Config_Reg;
-		break;
+		return NITIO_G0_DMA_CFG;
 	case 1:
-		return NITIO_G1_DMA_Config_Reg;
-		break;
+		return NITIO_G1_DMA_CFG;
 	case 2:
-		return NITIO_G2_DMA_Config_Reg;
-		break;
+		return NITIO_G2_DMA_CFG;
 	case 3:
-		return NITIO_G3_DMA_Config_Reg;
-		break;
-	default:
-		BUG();
-		break;
+		return NITIO_G3_DMA_CFG;
 	}
 	return 0;
 }
 
-static inline enum ni_gpct_register NITIO_Gi_DMA_Status_Reg(int counter_index)
+static inline enum ni_gpct_register NITIO_Gi_DMA_Status_Reg(unsigned idx)
 {
-	switch (counter_index) {
+	switch (idx) {
 	case 0:
-		return NITIO_G0_DMA_Status_Reg;
-		break;
+		return NITIO_G0_DMA_STATUS;
 	case 1:
-		return NITIO_G1_DMA_Status_Reg;
-		break;
+		return NITIO_G1_DMA_STATUS;
 	case 2:
-		return NITIO_G2_DMA_Status_Reg;
-		break;
+		return NITIO_G2_DMA_STATUS;
 	case 3:
-		return NITIO_G3_DMA_Status_Reg;
-		break;
-	default:
-		BUG();
-		break;
+		return NITIO_G3_DMA_STATUS;
 	}
 	return 0;
 }
 
-static inline enum ni_gpct_register NITIO_Gi_ABZ_Reg(int counter_index)
+static inline enum ni_gpct_register NITIO_Gi_ABZ_Reg(unsigned idx)
 {
-	switch (counter_index) {
+	switch (idx) {
 	case 0:
-		return NITIO_G0_ABZ_Reg;
-		break;
+		return NITIO_G0_ABZ;
 	case 1:
-		return NITIO_G1_ABZ_Reg;
-		break;
-	default:
-		BUG();
-		break;
+		return NITIO_G1_ABZ;
 	}
 	return 0;
 }
 
-static inline enum ni_gpct_register NITIO_Gi_Interrupt_Acknowledge_Reg(
-	int counter_index)
+static inline enum ni_gpct_register NITIO_Gi_Interrupt_Acknowledge_Reg(unsigned idx)
 {
-	switch (counter_index) {
+	switch (idx) {
 	case 0:
-		return NITIO_G0_Interrupt_Acknowledge_Reg;
-		break;
+		return NITIO_G0_INT_ACK;
 	case 1:
-		return NITIO_G1_Interrupt_Acknowledge_Reg;
-		break;
+		return NITIO_G1_INT_ACK;
 	case 2:
-		return NITIO_G2_Interrupt_Acknowledge_Reg;
-		break;
+		return NITIO_G2_INT_ACK;
 	case 3:
-		return NITIO_G3_Interrupt_Acknowledge_Reg;
-		break;
-	default:
-		BUG();
-		break;
+		return NITIO_G3_INT_ACK;
 	}
 	return 0;
 }
 
-static inline enum ni_gpct_register NITIO_Gi_Status_Reg(int counter_index)
+static inline enum ni_gpct_register NITIO_Gi_Status_Reg(unsigned idx)
 {
-	switch (counter_index) {
+	switch (idx) {
 	case 0:
-		return NITIO_G0_Status_Reg;
-		break;
+		return NITIO_G0_STATUS;
 	case 1:
-		return NITIO_G1_Status_Reg;
-		break;
+		return NITIO_G1_STATUS;
 	case 2:
-		return NITIO_G2_Status_Reg;
-		break;
+		return NITIO_G2_STATUS;
 	case 3:
-		return NITIO_G3_Status_Reg;
-		break;
-	default:
-		BUG();
-		break;
+		return NITIO_G3_STATUS;
 	}
 	return 0;
 }
 
-static inline enum ni_gpct_register NITIO_Gi_Interrupt_Enable_Reg(
-	int counter_index)
+static inline enum ni_gpct_register NITIO_Gi_Interrupt_Enable_Reg(unsigned idx)
 {
-	switch (counter_index) {
+	switch (idx) {
 	case 0:
-		return NITIO_G0_Interrupt_Enable_Reg;
-		break;
+		return NITIO_G0_INT_ENA;
 	case 1:
-		return NITIO_G1_Interrupt_Enable_Reg;
-		break;
+		return NITIO_G1_INT_ENA;
 	case 2:
-		return NITIO_G2_Interrupt_Enable_Reg;
-		break;
+		return NITIO_G2_INT_ENA;
 	case 3:
-		return NITIO_G3_Interrupt_Enable_Reg;
-		break;
-	default:
-		BUG();
-		break;
+		return NITIO_G3_INT_ENA;
 	}
 	return 0;
 }
@@ -699,14 +568,14 @@ static inline unsigned Gi_Gate_Interrupt_Enable_Bit(unsigned counter_index)
 static inline void write_register(struct ni_gpct *counter, unsigned bits,
 				  enum ni_gpct_register reg)
 {
-	BUG_ON(reg >= NITIO_Num_Registers);
+	BUG_ON(reg >= NITIO_NUM_REGS);
 	counter->counter_dev->write_register(counter, bits, reg);
 }
 
 static inline unsigned read_register(struct ni_gpct *counter,
 				     enum ni_gpct_register reg)
 {
-	BUG_ON(reg >= NITIO_Num_Registers);
+	BUG_ON(reg >= NITIO_NUM_REGS);
 	return counter->counter_dev->read_register(counter, reg);
 }
 
@@ -738,7 +607,7 @@ static inline void ni_tio_set_bits_transient(struct ni_gpct *counter,
 	struct ni_gpct_device *counter_dev = counter->counter_dev;
 	unsigned long flags;
 
-	BUG_ON(register_index >= NITIO_Num_Registers);
+	BUG_ON(register_index >= NITIO_NUM_REGS);
 	spin_lock_irqsave(&counter_dev->regs_lock, flags);
 	counter_dev->regs[register_index] &= ~bit_mask;
 	counter_dev->regs[register_index] |= (bit_values & bit_mask);
@@ -773,7 +642,7 @@ static inline unsigned ni_tio_get_soft_copy(const struct ni_gpct *counter,
 	unsigned long flags;
 	unsigned value;
 
-	BUG_ON(register_index >= NITIO_Num_Registers);
+	BUG_ON(register_index >= NITIO_NUM_REGS);
 	spin_lock_irqsave(&counter_dev->regs_lock, flags);
 	value = counter_dev->regs[register_index];
 	spin_unlock_irqrestore(&counter_dev->regs_lock, flags);

commit 641f064e5df6fb3aaeb6256031a153a5efb16ca6
Author: H Hartley Sweeten <hsweeten@visionengravers.com>
Date:   Wed Apr 24 18:13:24 2013 -0700

    staging: comedi: remove FSF address from boilerplate text
    
    Addresses change...
    
    Remove the paragraph with the FSF address from all the comedi source
    files.
    
    Also, remove the paragraph about the finding the complete GPL in the
    COPYING file since it's unnecessary.
    
    Signed-off-by: H Hartley Sweeten <hsweeten@visionengravers.com>
    Cc: Ian Abbott <abbotti@mev.co.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/drivers/ni_tio_internal.h b/drivers/staging/comedi/drivers/ni_tio_internal.h
index 5e00212aa022..b009876754a8 100644
--- a/drivers/staging/comedi/drivers/ni_tio_internal.h
+++ b/drivers/staging/comedi/drivers/ni_tio_internal.h
@@ -14,11 +14,6 @@
     but WITHOUT ANY WARRANTY; without even the implied warranty of
     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
     GNU General Public License for more details.
-
-    You should have received a copy of the GNU General Public License
-    along with this program; if not, write to the Free Software
-    Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
-
 */
 
 #ifndef _COMEDI_NI_TIO_INTERNAL_H

commit 933df6599382aa41742210e4008ec550076254ee
Author: W. Trevor King <wking@tremily.us>
Date:   Wed Apr 18 21:30:28 2012 -0400

    staging: comedi: ni_tio_internal.h: checkpatch.pl cleanups
    
    * No braces for single statement blocks.
    
    Signed-off-by: W. Trevor King <wking@tremily.us>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/drivers/ni_tio_internal.h b/drivers/staging/comedi/drivers/ni_tio_internal.h
index f9295ec25e70..5e00212aa022 100644
--- a/drivers/staging/comedi/drivers/ni_tio_internal.h
+++ b/drivers/staging/comedi/drivers/ni_tio_internal.h
@@ -694,11 +694,10 @@ static inline unsigned Gi_Gate_Interrupt_Enable_Bit(unsigned counter_index)
 {
 	unsigned bit;
 
-	if (counter_index % 2) {
+	if (counter_index % 2)
 		bit = G1_Gate_Interrupt_Enable_Bit;
-	} else {
+	else
 		bit = G0_Gate_Interrupt_Enable_Bit;
-	}
 	return bit;
 }
 

commit 35c81aaa56e3e1a8eb8f86837889ed979085b1bc
Author: W. Trevor King <wking@tremily.us>
Date:   Wed Apr 18 21:30:27 2012 -0400

    staging: comedi: ni_tio_internal.h: checkpatch.pl line wrapping
    
    Signed-off-by: W. Trevor King <wking@tremily.us>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/drivers/ni_tio_internal.h b/drivers/staging/comedi/drivers/ni_tio_internal.h
index c4ca53785832..f9295ec25e70 100644
--- a/drivers/staging/comedi/drivers/ni_tio_internal.h
+++ b/drivers/staging/comedi/drivers/ni_tio_internal.h
@@ -362,8 +362,8 @@ static inline enum ni_gpct_register NITIO_Gi_ABZ_Reg(int counter_index)
 	return 0;
 }
 
-static inline enum ni_gpct_register NITIO_Gi_Interrupt_Acknowledge_Reg(int
-								       counter_index)
+static inline enum ni_gpct_register NITIO_Gi_Interrupt_Acknowledge_Reg(
+	int counter_index)
 {
 	switch (counter_index) {
 	case 0:
@@ -407,8 +407,8 @@ static inline enum ni_gpct_register NITIO_Gi_Status_Reg(int counter_index)
 	return 0;
 }
 
-static inline enum ni_gpct_register NITIO_Gi_Interrupt_Enable_Reg(int
-								  counter_index)
+static inline enum ni_gpct_register NITIO_Gi_Interrupt_Enable_Reg(
+	int counter_index)
 {
 	switch (counter_index) {
 	case 0:
@@ -472,15 +472,22 @@ enum Gi_Counting_Mode_Reg_Bits {
 	Gi_Index_Phase_LowA_HighB = 0x1 << Gi_Index_Phase_Bitshift,
 	Gi_Index_Phase_HighA_LowB = 0x2 << Gi_Index_Phase_Bitshift,
 	Gi_Index_Phase_HighA_HighB = 0x3 << Gi_Index_Phase_Bitshift,
-	Gi_HW_Arm_Enable_Bit = 0x80,	/* from m-series example code, not documented in 660x register level manual */
-	Gi_660x_HW_Arm_Select_Mask = 0x7 << Gi_HW_Arm_Select_Shift,	/* from m-series example code, not documented in 660x register level manual */
+	/* from m-series example code, not documented in 660x register level
+	 * manual */
+	Gi_HW_Arm_Enable_Bit = 0x80,
+	/* from m-series example code, not documented in 660x register level
+	 * manual */
+	Gi_660x_HW_Arm_Select_Mask = 0x7 << Gi_HW_Arm_Select_Shift,
 	Gi_660x_Prescale_X8_Bit = 0x1000,
 	Gi_M_Series_Prescale_X8_Bit = 0x2000,
 	Gi_M_Series_HW_Arm_Select_Mask = 0x1f << Gi_HW_Arm_Select_Shift,
-	/* must be set for clocks over 40MHz, which includes synchronous counting and quadrature modes */
+	/* must be set for clocks over 40MHz, which includes synchronous
+	 * counting and quadrature modes */
 	Gi_660x_Alternate_Sync_Bit = 0x2000,
 	Gi_M_Series_Alternate_Sync_Bit = 0x4000,
-	Gi_660x_Prescale_X2_Bit = 0x4000,	/* from m-series example code, not documented in 660x register level manual */
+	/* from m-series example code, not documented in 660x register level
+	 * manual */
+	Gi_660x_Prescale_X2_Bit = 0x4000,
 	Gi_M_Series_Prescale_X2_Bit = 0x8000,
 };
 
@@ -503,7 +510,8 @@ enum Gi_Mode_Bits {
 	Gi_Level_Gating_Bits = 0x1,
 	Gi_Rising_Edge_Gating_Bits = 0x2,
 	Gi_Falling_Edge_Gating_Bits = 0x3,
-	Gi_Gate_On_Both_Edges_Bit = 0x4,	/* used in conjunction with rising edge gating mode */
+	Gi_Gate_On_Both_Edges_Bit = 0x4,	/* used in conjunction with
+						 * rising edge gating mode */
 	Gi_Trigger_Mode_for_Edge_Gate_Mask = 0x18,
 	Gi_Edge_Gate_Starts_Stops_Bits = 0x0,
 	Gi_Edge_Gate_Stops_Starts_Bits = 0x8,
@@ -748,8 +756,9 @@ static inline void ni_tio_set_bits_transient(struct ni_gpct *counter,
 }
 
 /* ni_tio_set_bits( ) is for safely writing to registers whose bits may be
-twiddled in interrupt context, or whose software copy may be read in interrupt context.
-*/
+ * twiddled in interrupt context, or whose software copy may be read in
+ * interrupt context.
+ */
 static inline void ni_tio_set_bits(struct ni_gpct *counter,
 				   enum ni_gpct_register register_index,
 				   unsigned bit_mask, unsigned bit_values)

commit 0a85b6f0ab0d2edb0d41b32697111ce0e4f43496
Author: Mithlesh Thukral <mithlesh@linsyssoft.com>
Date:   Mon Jun 8 21:04:41 2009 +0530

    Staging: Comedi: Lindent changes to comdi driver in staging tree
    
    Lindent changes to comdi driver in staging tree.
    This patch is followed by the checkpatch.pl error fixes.
    Did not make them part of this patch as the patch size is already huge.
    
    Signed-off-by: Mithlesh Thukral <mithlesh@linsyssoft.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>

diff --git a/drivers/staging/comedi/drivers/ni_tio_internal.h b/drivers/staging/comedi/drivers/ni_tio_internal.h
index 920dd221da0d..c4ca53785832 100644
--- a/drivers/staging/comedi/drivers/ni_tio_internal.h
+++ b/drivers/staging/comedi/drivers/ni_tio_internal.h
@@ -27,7 +27,7 @@
 #include "ni_tio.h"
 
 static inline enum ni_gpct_register NITIO_Gi_Autoincrement_Reg(unsigned
-	counter_index)
+							       counter_index)
 {
 	switch (counter_index) {
 	case 0:
@@ -72,7 +72,7 @@ static inline enum ni_gpct_register NITIO_Gi_Command_Reg(unsigned counter_index)
 }
 
 static inline enum ni_gpct_register NITIO_Gi_Counting_Mode_Reg(unsigned
-	counter_index)
+							       counter_index)
 {
 	switch (counter_index) {
 	case 0:
@@ -95,7 +95,7 @@ static inline enum ni_gpct_register NITIO_Gi_Counting_Mode_Reg(unsigned
 }
 
 static inline enum ni_gpct_register NITIO_Gi_Input_Select_Reg(unsigned
-	counter_index)
+							      counter_index)
 {
 	switch (counter_index) {
 	case 0:
@@ -118,7 +118,7 @@ static inline enum ni_gpct_register NITIO_Gi_Input_Select_Reg(unsigned
 }
 
 static inline enum ni_gpct_register NITIO_Gxx_Joint_Reset_Reg(unsigned
-	counter_index)
+							      counter_index)
 {
 	switch (counter_index) {
 	case 0:
@@ -137,7 +137,7 @@ static inline enum ni_gpct_register NITIO_Gxx_Joint_Reset_Reg(unsigned
 }
 
 static inline enum ni_gpct_register NITIO_Gxx_Joint_Status1_Reg(unsigned
-	counter_index)
+								counter_index)
 {
 	switch (counter_index) {
 	case 0:
@@ -156,7 +156,7 @@ static inline enum ni_gpct_register NITIO_Gxx_Joint_Status1_Reg(unsigned
 }
 
 static inline enum ni_gpct_register NITIO_Gxx_Joint_Status2_Reg(unsigned
-	counter_index)
+								counter_index)
 {
 	switch (counter_index) {
 	case 0:
@@ -363,7 +363,7 @@ static inline enum ni_gpct_register NITIO_Gi_ABZ_Reg(int counter_index)
 }
 
 static inline enum ni_gpct_register NITIO_Gi_Interrupt_Acknowledge_Reg(int
-	counter_index)
+								       counter_index)
 {
 	switch (counter_index) {
 	case 0:
@@ -408,7 +408,7 @@ static inline enum ni_gpct_register NITIO_Gi_Status_Reg(int counter_index)
 }
 
 static inline enum ni_gpct_register NITIO_Gi_Interrupt_Enable_Reg(int
-	counter_index)
+								  counter_index)
 {
 	switch (counter_index) {
 	case 0:
@@ -542,7 +542,7 @@ enum Gi_Second_Gate_Bits {
 static inline unsigned Gi_Second_Gate_Select_Bits(unsigned second_gate_select)
 {
 	return (second_gate_select << Gi_Second_Gate_Select_Shift) &
-		Gi_Second_Gate_Select_Mask;
+	    Gi_Second_Gate_Select_Mask;
 }
 
 enum Gxx_Status_Bits {
@@ -569,31 +569,36 @@ static inline enum Gxx_Status_Bits Gi_Counting_Bit(unsigned counter_index)
 		return G1_Counting_Bit;
 	return G0_Counting_Bit;
 }
+
 static inline enum Gxx_Status_Bits Gi_Armed_Bit(unsigned counter_index)
 {
 	if (counter_index % 2)
 		return G1_Armed_Bit;
 	return G0_Armed_Bit;
 }
+
 static inline enum Gxx_Status_Bits Gi_Next_Load_Source_Bit(unsigned
-	counter_index)
+							   counter_index)
 {
 	if (counter_index % 2)
 		return G1_Next_Load_Source_Bit;
 	return G0_Next_Load_Source_Bit;
 }
+
 static inline enum Gxx_Status_Bits Gi_Stale_Data_Bit(unsigned counter_index)
 {
 	if (counter_index % 2)
 		return G1_Stale_Data_Bit;
 	return G0_Stale_Data_Bit;
 }
+
 static inline enum Gxx_Status_Bits Gi_TC_Error_Bit(unsigned counter_index)
 {
 	if (counter_index % 2)
 		return G1_TC_Error_Bit;
 	return G0_TC_Error_Bit;
 }
+
 static inline enum Gxx_Status_Bits Gi_Gate_Error_Bit(unsigned counter_index)
 {
 	if (counter_index % 2)
@@ -616,7 +621,7 @@ enum Gxx_Joint_Status2_Bits {
 	G1_Permanent_Stale_Bit = 0x8000
 };
 static inline enum Gxx_Joint_Status2_Bits Gi_Permanent_Stale_Bit(unsigned
-	counter_index)
+								 counter_index)
 {
 	if (counter_index % 2)
 		return G1_Permanent_Stale_Bit;
@@ -649,6 +654,7 @@ static inline unsigned Gi_Gate_Error_Confirm_Bit(unsigned counter_index)
 		return G1_Gate_Error_Confirm_Bit;
 	return G0_Gate_Error_Confirm_Bit;
 }
+
 static inline unsigned Gi_TC_Error_Confirm_Bit(unsigned counter_index)
 {
 	if (counter_index % 2)
@@ -689,21 +695,22 @@ static inline unsigned Gi_Gate_Interrupt_Enable_Bit(unsigned counter_index)
 }
 
 static inline void write_register(struct ni_gpct *counter, unsigned bits,
-	enum ni_gpct_register reg)
+				  enum ni_gpct_register reg)
 {
 	BUG_ON(reg >= NITIO_Num_Registers);
 	counter->counter_dev->write_register(counter, bits, reg);
 }
 
 static inline unsigned read_register(struct ni_gpct *counter,
-	enum ni_gpct_register reg)
+				     enum ni_gpct_register reg)
 {
 	BUG_ON(reg >= NITIO_Num_Registers);
 	return counter->counter_dev->read_register(counter, reg);
 }
 
-static inline int ni_tio_counting_mode_registers_present(
-	const struct ni_gpct_device *counter_dev)
+static inline int ni_tio_counting_mode_registers_present(const struct
+							 ni_gpct_device
+							 *counter_dev)
 {
 	switch (counter_dev->variant) {
 	case ni_gpct_variant_e_series:
@@ -721,8 +728,10 @@ static inline int ni_tio_counting_mode_registers_present(
 }
 
 static inline void ni_tio_set_bits_transient(struct ni_gpct *counter,
-	enum ni_gpct_register register_index, unsigned bit_mask,
-	unsigned bit_values, unsigned transient_bit_values)
+					     enum ni_gpct_register
+					     register_index, unsigned bit_mask,
+					     unsigned bit_values,
+					     unsigned transient_bit_values)
 {
 	struct ni_gpct_device *counter_dev = counter->counter_dev;
 	unsigned long flags;
@@ -732,8 +741,8 @@ static inline void ni_tio_set_bits_transient(struct ni_gpct *counter,
 	counter_dev->regs[register_index] &= ~bit_mask;
 	counter_dev->regs[register_index] |= (bit_values & bit_mask);
 	write_register(counter,
-		counter_dev->regs[register_index] | transient_bit_values,
-		register_index);
+		       counter_dev->regs[register_index] | transient_bit_values,
+		       register_index);
 	mmiowb();
 	spin_unlock_irqrestore(&counter_dev->regs_lock, flags);
 }
@@ -742,11 +751,11 @@ static inline void ni_tio_set_bits_transient(struct ni_gpct *counter,
 twiddled in interrupt context, or whose software copy may be read in interrupt context.
 */
 static inline void ni_tio_set_bits(struct ni_gpct *counter,
-	enum ni_gpct_register register_index, unsigned bit_mask,
-	unsigned bit_values)
+				   enum ni_gpct_register register_index,
+				   unsigned bit_mask, unsigned bit_values)
 {
 	ni_tio_set_bits_transient(counter, register_index, bit_mask, bit_values,
-		0x0);
+				  0x0);
 }
 
 /* ni_tio_get_soft_copy( ) is for safely reading the software copy of a register
@@ -754,7 +763,8 @@ whose bits might be modified in interrupt context, or whose software copy
 might need to be read in interrupt context.
 */
 static inline unsigned ni_tio_get_soft_copy(const struct ni_gpct *counter,
-	enum ni_gpct_register register_index)
+					    enum ni_gpct_register
+					    register_index)
 {
 	struct ni_gpct_device *counter_dev = counter->counter_dev;
 	unsigned long flags;
@@ -769,6 +779,6 @@ static inline unsigned ni_tio_get_soft_copy(const struct ni_gpct *counter,
 
 int ni_tio_arm(struct ni_gpct *counter, int arm, unsigned start_trigger);
 int ni_tio_set_gate_src(struct ni_gpct *counter, unsigned gate_index,
-	unsigned int gate_source);
+			unsigned int gate_source);
 
 #endif /* _COMEDI_NI_TIO_INTERNAL_H */

commit 5f74ea14c07fee91d3bdbaad88bff6264c6200e6
Author: Greg Kroah-Hartman <gregkh@suse.de>
Date:   Mon Apr 27 14:44:31 2009 -0700

    Staging: comedi: remove comedi-specific wrappers
    
    There are a number of comedi "wrappers" for some RT functions that are
    about to go away.  This patch removes all of the wrapper calls within
    the comedi drivers and core in order to prepare for removing the RT
    comedi code.
    
    Cc: Ian Abbott <abbotti@mev.co.uk>
    Cc: Frank Mori Hess <fmhess@users.sourceforge.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>

diff --git a/drivers/staging/comedi/drivers/ni_tio_internal.h b/drivers/staging/comedi/drivers/ni_tio_internal.h
index 850e1ea3ad9f..920dd221da0d 100644
--- a/drivers/staging/comedi/drivers/ni_tio_internal.h
+++ b/drivers/staging/comedi/drivers/ni_tio_internal.h
@@ -728,14 +728,14 @@ static inline void ni_tio_set_bits_transient(struct ni_gpct *counter,
 	unsigned long flags;
 
 	BUG_ON(register_index >= NITIO_Num_Registers);
-	comedi_spin_lock_irqsave(&counter_dev->regs_lock, flags);
+	spin_lock_irqsave(&counter_dev->regs_lock, flags);
 	counter_dev->regs[register_index] &= ~bit_mask;
 	counter_dev->regs[register_index] |= (bit_values & bit_mask);
 	write_register(counter,
 		counter_dev->regs[register_index] | transient_bit_values,
 		register_index);
 	mmiowb();
-	comedi_spin_unlock_irqrestore(&counter_dev->regs_lock, flags);
+	spin_unlock_irqrestore(&counter_dev->regs_lock, flags);
 }
 
 /* ni_tio_set_bits( ) is for safely writing to registers whose bits may be
@@ -761,9 +761,9 @@ static inline unsigned ni_tio_get_soft_copy(const struct ni_gpct *counter,
 	unsigned value;
 
 	BUG_ON(register_index >= NITIO_Num_Registers);
-	comedi_spin_lock_irqsave(&counter_dev->regs_lock, flags);
+	spin_lock_irqsave(&counter_dev->regs_lock, flags);
 	value = counter_dev->regs[register_index];
-	comedi_spin_unlock_irqrestore(&counter_dev->regs_lock, flags);
+	spin_unlock_irqrestore(&counter_dev->regs_lock, flags);
 	return value;
 }
 

commit 2696fb57e6af653dd8b4df41b16754579f42fc78
Author: Bill Pemberton <wfp5p@virginia.edu>
Date:   Fri Mar 27 11:29:34 2009 -0400

    Staging: comedi: Remove C99 comments
    
    Signed-off-by: Bill Pemberton <wfp5p@virginia.edu>
    Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>

diff --git a/drivers/staging/comedi/drivers/ni_tio_internal.h b/drivers/staging/comedi/drivers/ni_tio_internal.h
index ac5b171cbe18..850e1ea3ad9f 100644
--- a/drivers/staging/comedi/drivers/ni_tio_internal.h
+++ b/drivers/staging/comedi/drivers/ni_tio_internal.h
@@ -487,8 +487,8 @@ enum Gi_Counting_Mode_Reg_Bits {
 #define Gi_Source_Select_Shift 2
 #define Gi_Gate_Select_Shift 7
 enum Gi_Input_Select_Bits {
-	Gi_Read_Acknowledges_Irq = 0x1,	// not present on 660x
-	Gi_Write_Acknowledges_Irq = 0x2,	// not present on 660x
+	Gi_Read_Acknowledges_Irq = 0x1,	/*  not present on 660x */
+	Gi_Write_Acknowledges_Irq = 0x2,	/*  not present on 660x */
 	Gi_Source_Select_Mask = 0x7c,
 	Gi_Gate_Select_Mask = 0x1f << Gi_Gate_Select_Shift,
 	Gi_Gate_Select_Load_Source_Bit = 0x1000,
@@ -656,7 +656,7 @@ static inline unsigned Gi_TC_Error_Confirm_Bit(unsigned counter_index)
 	return G0_TC_Error_Confirm_Bit;
 }
 
-// bits that are the same in G0/G2 and G1/G3 interrupt acknowledge registers
+/* bits that are the same in G0/G2 and G1/G3 interrupt acknowledge registers */
 enum Gxx_Interrupt_Acknowledge_Bits {
 	Gi_TC_Interrupt_Ack_Bit = 0x4000,
 	Gi_Gate_Interrupt_Ack_Bit = 0x8000

commit 790c55415aa31f4c732729f94d2c3a54f7d3bfc2
Author: Bill Pemberton <wfp5p@virginia.edu>
Date:   Mon Mar 16 22:05:02 2009 -0400

    Staging: comedi: Remove lsampl_t and sampl_t typedefs
    
    Signed-off-by: Bill Pemberton <wfp5p@virginia.edu>
    Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>

diff --git a/drivers/staging/comedi/drivers/ni_tio_internal.h b/drivers/staging/comedi/drivers/ni_tio_internal.h
index e5aa578f6c4e..ac5b171cbe18 100644
--- a/drivers/staging/comedi/drivers/ni_tio_internal.h
+++ b/drivers/staging/comedi/drivers/ni_tio_internal.h
@@ -769,6 +769,6 @@ static inline unsigned ni_tio_get_soft_copy(const struct ni_gpct *counter,
 
 int ni_tio_arm(struct ni_gpct *counter, int arm, unsigned start_trigger);
 int ni_tio_set_gate_src(struct ni_gpct *counter, unsigned gate_index,
-	lsampl_t gate_source);
+	unsigned int gate_source);
 
 #endif /* _COMEDI_NI_TIO_INTERNAL_H */

commit cb7859a90af1c6dedcc244f4b680ee68ed607add
Author: Frank Mori Hess <fmhess@users.sourceforge.net>
Date:   Thu Feb 12 15:39:24 2009 -0800

    Staging: comedi: add National Instruments infrastructure
    
    These drivers are used to support National Instruments general purpose
    counters and commands.
    
    From: Frank Mori Hess <fmhess@users.sourceforge.net>
    Cc: David Schleef <ds@schleef.org>
    Cc: Ian Abbott <abbotti@mev.co.uk>
    Cc: J.P. Mellor <jpmellor@rose-hulman.edu>
    Cc: Herman Bruyninckx <Herman.Bruyninckx@mech.kuleuven.ac.be>
    Cc: Wim Meeussen <Wim.Meeussen@mech.kuleuven.ac.be>
    Cc: Klass Gadeyne <Klaas.Gadeyne@mech.kuleuven.ac.be>
    Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>

diff --git a/drivers/staging/comedi/drivers/ni_tio_internal.h b/drivers/staging/comedi/drivers/ni_tio_internal.h
new file mode 100644
index 000000000000..e5aa578f6c4e
--- /dev/null
+++ b/drivers/staging/comedi/drivers/ni_tio_internal.h
@@ -0,0 +1,774 @@
+/*
+    drivers/ni_tio_internal.h
+    Header file for NI general purpose counter support code (ni_tio.c and
+    ni_tiocmd.c)
+
+    COMEDI - Linux Control and Measurement Device Interface
+
+    This program is free software; you can redistribute it and/or modify
+    it under the terms of the GNU General Public License as published by
+    the Free Software Foundation; either version 2 of the License, or
+    (at your option) any later version.
+
+    This program is distributed in the hope that it will be useful,
+    but WITHOUT ANY WARRANTY; without even the implied warranty of
+    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+    GNU General Public License for more details.
+
+    You should have received a copy of the GNU General Public License
+    along with this program; if not, write to the Free Software
+    Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
+
+*/
+
+#ifndef _COMEDI_NI_TIO_INTERNAL_H
+#define _COMEDI_NI_TIO_INTERNAL_H
+
+#include "ni_tio.h"
+
+static inline enum ni_gpct_register NITIO_Gi_Autoincrement_Reg(unsigned
+	counter_index)
+{
+	switch (counter_index) {
+	case 0:
+		return NITIO_G0_Autoincrement_Reg;
+		break;
+	case 1:
+		return NITIO_G1_Autoincrement_Reg;
+		break;
+	case 2:
+		return NITIO_G2_Autoincrement_Reg;
+		break;
+	case 3:
+		return NITIO_G3_Autoincrement_Reg;
+		break;
+	default:
+		BUG();
+		break;
+	}
+	return 0;
+}
+
+static inline enum ni_gpct_register NITIO_Gi_Command_Reg(unsigned counter_index)
+{
+	switch (counter_index) {
+	case 0:
+		return NITIO_G0_Command_Reg;
+		break;
+	case 1:
+		return NITIO_G1_Command_Reg;
+		break;
+	case 2:
+		return NITIO_G2_Command_Reg;
+		break;
+	case 3:
+		return NITIO_G3_Command_Reg;
+		break;
+	default:
+		BUG();
+		break;
+	}
+	return 0;
+}
+
+static inline enum ni_gpct_register NITIO_Gi_Counting_Mode_Reg(unsigned
+	counter_index)
+{
+	switch (counter_index) {
+	case 0:
+		return NITIO_G0_Counting_Mode_Reg;
+		break;
+	case 1:
+		return NITIO_G1_Counting_Mode_Reg;
+		break;
+	case 2:
+		return NITIO_G2_Counting_Mode_Reg;
+		break;
+	case 3:
+		return NITIO_G3_Counting_Mode_Reg;
+		break;
+	default:
+		BUG();
+		break;
+	}
+	return 0;
+}
+
+static inline enum ni_gpct_register NITIO_Gi_Input_Select_Reg(unsigned
+	counter_index)
+{
+	switch (counter_index) {
+	case 0:
+		return NITIO_G0_Input_Select_Reg;
+		break;
+	case 1:
+		return NITIO_G1_Input_Select_Reg;
+		break;
+	case 2:
+		return NITIO_G2_Input_Select_Reg;
+		break;
+	case 3:
+		return NITIO_G3_Input_Select_Reg;
+		break;
+	default:
+		BUG();
+		break;
+	}
+	return 0;
+}
+
+static inline enum ni_gpct_register NITIO_Gxx_Joint_Reset_Reg(unsigned
+	counter_index)
+{
+	switch (counter_index) {
+	case 0:
+	case 1:
+		return NITIO_G01_Joint_Reset_Reg;
+		break;
+	case 2:
+	case 3:
+		return NITIO_G23_Joint_Reset_Reg;
+		break;
+	default:
+		BUG();
+		break;
+	}
+	return 0;
+}
+
+static inline enum ni_gpct_register NITIO_Gxx_Joint_Status1_Reg(unsigned
+	counter_index)
+{
+	switch (counter_index) {
+	case 0:
+	case 1:
+		return NITIO_G01_Joint_Status1_Reg;
+		break;
+	case 2:
+	case 3:
+		return NITIO_G23_Joint_Status1_Reg;
+		break;
+	default:
+		BUG();
+		break;
+	}
+	return 0;
+}
+
+static inline enum ni_gpct_register NITIO_Gxx_Joint_Status2_Reg(unsigned
+	counter_index)
+{
+	switch (counter_index) {
+	case 0:
+	case 1:
+		return NITIO_G01_Joint_Status2_Reg;
+		break;
+	case 2:
+	case 3:
+		return NITIO_G23_Joint_Status2_Reg;
+		break;
+	default:
+		BUG();
+		break;
+	}
+	return 0;
+}
+
+static inline enum ni_gpct_register NITIO_Gxx_Status_Reg(unsigned counter_index)
+{
+	switch (counter_index) {
+	case 0:
+	case 1:
+		return NITIO_G01_Status_Reg;
+		break;
+	case 2:
+	case 3:
+		return NITIO_G23_Status_Reg;
+		break;
+	default:
+		BUG();
+		break;
+	}
+	return 0;
+}
+
+static inline enum ni_gpct_register NITIO_Gi_LoadA_Reg(unsigned counter_index)
+{
+	switch (counter_index) {
+	case 0:
+		return NITIO_G0_LoadA_Reg;
+		break;
+	case 1:
+		return NITIO_G1_LoadA_Reg;
+		break;
+	case 2:
+		return NITIO_G2_LoadA_Reg;
+		break;
+	case 3:
+		return NITIO_G3_LoadA_Reg;
+		break;
+	default:
+		BUG();
+		break;
+	}
+	return 0;
+}
+
+static inline enum ni_gpct_register NITIO_Gi_LoadB_Reg(unsigned counter_index)
+{
+	switch (counter_index) {
+	case 0:
+		return NITIO_G0_LoadB_Reg;
+		break;
+	case 1:
+		return NITIO_G1_LoadB_Reg;
+		break;
+	case 2:
+		return NITIO_G2_LoadB_Reg;
+		break;
+	case 3:
+		return NITIO_G3_LoadB_Reg;
+		break;
+	default:
+		BUG();
+		break;
+	}
+	return 0;
+}
+
+static inline enum ni_gpct_register NITIO_Gi_Mode_Reg(unsigned counter_index)
+{
+	switch (counter_index) {
+	case 0:
+		return NITIO_G0_Mode_Reg;
+		break;
+	case 1:
+		return NITIO_G1_Mode_Reg;
+		break;
+	case 2:
+		return NITIO_G2_Mode_Reg;
+		break;
+	case 3:
+		return NITIO_G3_Mode_Reg;
+		break;
+	default:
+		BUG();
+		break;
+	}
+	return 0;
+}
+
+static inline enum ni_gpct_register NITIO_Gi_SW_Save_Reg(int counter_index)
+{
+	switch (counter_index) {
+	case 0:
+		return NITIO_G0_SW_Save_Reg;
+		break;
+	case 1:
+		return NITIO_G1_SW_Save_Reg;
+		break;
+	case 2:
+		return NITIO_G2_SW_Save_Reg;
+		break;
+	case 3:
+		return NITIO_G3_SW_Save_Reg;
+		break;
+	default:
+		BUG();
+		break;
+	}
+	return 0;
+}
+
+static inline enum ni_gpct_register NITIO_Gi_Second_Gate_Reg(int counter_index)
+{
+	switch (counter_index) {
+	case 0:
+		return NITIO_G0_Second_Gate_Reg;
+		break;
+	case 1:
+		return NITIO_G1_Second_Gate_Reg;
+		break;
+	case 2:
+		return NITIO_G2_Second_Gate_Reg;
+		break;
+	case 3:
+		return NITIO_G3_Second_Gate_Reg;
+		break;
+	default:
+		BUG();
+		break;
+	}
+	return 0;
+}
+
+static inline enum ni_gpct_register NITIO_Gi_DMA_Config_Reg(int counter_index)
+{
+	switch (counter_index) {
+	case 0:
+		return NITIO_G0_DMA_Config_Reg;
+		break;
+	case 1:
+		return NITIO_G1_DMA_Config_Reg;
+		break;
+	case 2:
+		return NITIO_G2_DMA_Config_Reg;
+		break;
+	case 3:
+		return NITIO_G3_DMA_Config_Reg;
+		break;
+	default:
+		BUG();
+		break;
+	}
+	return 0;
+}
+
+static inline enum ni_gpct_register NITIO_Gi_DMA_Status_Reg(int counter_index)
+{
+	switch (counter_index) {
+	case 0:
+		return NITIO_G0_DMA_Status_Reg;
+		break;
+	case 1:
+		return NITIO_G1_DMA_Status_Reg;
+		break;
+	case 2:
+		return NITIO_G2_DMA_Status_Reg;
+		break;
+	case 3:
+		return NITIO_G3_DMA_Status_Reg;
+		break;
+	default:
+		BUG();
+		break;
+	}
+	return 0;
+}
+
+static inline enum ni_gpct_register NITIO_Gi_ABZ_Reg(int counter_index)
+{
+	switch (counter_index) {
+	case 0:
+		return NITIO_G0_ABZ_Reg;
+		break;
+	case 1:
+		return NITIO_G1_ABZ_Reg;
+		break;
+	default:
+		BUG();
+		break;
+	}
+	return 0;
+}
+
+static inline enum ni_gpct_register NITIO_Gi_Interrupt_Acknowledge_Reg(int
+	counter_index)
+{
+	switch (counter_index) {
+	case 0:
+		return NITIO_G0_Interrupt_Acknowledge_Reg;
+		break;
+	case 1:
+		return NITIO_G1_Interrupt_Acknowledge_Reg;
+		break;
+	case 2:
+		return NITIO_G2_Interrupt_Acknowledge_Reg;
+		break;
+	case 3:
+		return NITIO_G3_Interrupt_Acknowledge_Reg;
+		break;
+	default:
+		BUG();
+		break;
+	}
+	return 0;
+}
+
+static inline enum ni_gpct_register NITIO_Gi_Status_Reg(int counter_index)
+{
+	switch (counter_index) {
+	case 0:
+		return NITIO_G0_Status_Reg;
+		break;
+	case 1:
+		return NITIO_G1_Status_Reg;
+		break;
+	case 2:
+		return NITIO_G2_Status_Reg;
+		break;
+	case 3:
+		return NITIO_G3_Status_Reg;
+		break;
+	default:
+		BUG();
+		break;
+	}
+	return 0;
+}
+
+static inline enum ni_gpct_register NITIO_Gi_Interrupt_Enable_Reg(int
+	counter_index)
+{
+	switch (counter_index) {
+	case 0:
+		return NITIO_G0_Interrupt_Enable_Reg;
+		break;
+	case 1:
+		return NITIO_G1_Interrupt_Enable_Reg;
+		break;
+	case 2:
+		return NITIO_G2_Interrupt_Enable_Reg;
+		break;
+	case 3:
+		return NITIO_G3_Interrupt_Enable_Reg;
+		break;
+	default:
+		BUG();
+		break;
+	}
+	return 0;
+}
+
+enum Gi_Auto_Increment_Reg_Bits {
+	Gi_Auto_Increment_Mask = 0xff
+};
+
+#define Gi_Up_Down_Shift 5
+enum Gi_Command_Reg_Bits {
+	Gi_Arm_Bit = 0x1,
+	Gi_Save_Trace_Bit = 0x2,
+	Gi_Load_Bit = 0x4,
+	Gi_Disarm_Bit = 0x10,
+	Gi_Up_Down_Mask = 0x3 << Gi_Up_Down_Shift,
+	Gi_Always_Down_Bits = 0x0 << Gi_Up_Down_Shift,
+	Gi_Always_Up_Bits = 0x1 << Gi_Up_Down_Shift,
+	Gi_Up_Down_Hardware_IO_Bits = 0x2 << Gi_Up_Down_Shift,
+	Gi_Up_Down_Hardware_Gate_Bits = 0x3 << Gi_Up_Down_Shift,
+	Gi_Write_Switch_Bit = 0x80,
+	Gi_Synchronize_Gate_Bit = 0x100,
+	Gi_Little_Big_Endian_Bit = 0x200,
+	Gi_Bank_Switch_Start_Bit = 0x400,
+	Gi_Bank_Switch_Mode_Bit = 0x800,
+	Gi_Bank_Switch_Enable_Bit = 0x1000,
+	Gi_Arm_Copy_Bit = 0x2000,
+	Gi_Save_Trace_Copy_Bit = 0x4000,
+	Gi_Disarm_Copy_Bit = 0x8000
+};
+
+#define Gi_Index_Phase_Bitshift 5
+#define Gi_HW_Arm_Select_Shift 8
+enum Gi_Counting_Mode_Reg_Bits {
+	Gi_Counting_Mode_Mask = 0x7,
+	Gi_Counting_Mode_Normal_Bits = 0x0,
+	Gi_Counting_Mode_QuadratureX1_Bits = 0x1,
+	Gi_Counting_Mode_QuadratureX2_Bits = 0x2,
+	Gi_Counting_Mode_QuadratureX4_Bits = 0x3,
+	Gi_Counting_Mode_Two_Pulse_Bits = 0x4,
+	Gi_Counting_Mode_Sync_Source_Bits = 0x6,
+	Gi_Index_Mode_Bit = 0x10,
+	Gi_Index_Phase_Mask = 0x3 << Gi_Index_Phase_Bitshift,
+	Gi_Index_Phase_LowA_LowB = 0x0 << Gi_Index_Phase_Bitshift,
+	Gi_Index_Phase_LowA_HighB = 0x1 << Gi_Index_Phase_Bitshift,
+	Gi_Index_Phase_HighA_LowB = 0x2 << Gi_Index_Phase_Bitshift,
+	Gi_Index_Phase_HighA_HighB = 0x3 << Gi_Index_Phase_Bitshift,
+	Gi_HW_Arm_Enable_Bit = 0x80,	/* from m-series example code, not documented in 660x register level manual */
+	Gi_660x_HW_Arm_Select_Mask = 0x7 << Gi_HW_Arm_Select_Shift,	/* from m-series example code, not documented in 660x register level manual */
+	Gi_660x_Prescale_X8_Bit = 0x1000,
+	Gi_M_Series_Prescale_X8_Bit = 0x2000,
+	Gi_M_Series_HW_Arm_Select_Mask = 0x1f << Gi_HW_Arm_Select_Shift,
+	/* must be set for clocks over 40MHz, which includes synchronous counting and quadrature modes */
+	Gi_660x_Alternate_Sync_Bit = 0x2000,
+	Gi_M_Series_Alternate_Sync_Bit = 0x4000,
+	Gi_660x_Prescale_X2_Bit = 0x4000,	/* from m-series example code, not documented in 660x register level manual */
+	Gi_M_Series_Prescale_X2_Bit = 0x8000,
+};
+
+#define Gi_Source_Select_Shift 2
+#define Gi_Gate_Select_Shift 7
+enum Gi_Input_Select_Bits {
+	Gi_Read_Acknowledges_Irq = 0x1,	// not present on 660x
+	Gi_Write_Acknowledges_Irq = 0x2,	// not present on 660x
+	Gi_Source_Select_Mask = 0x7c,
+	Gi_Gate_Select_Mask = 0x1f << Gi_Gate_Select_Shift,
+	Gi_Gate_Select_Load_Source_Bit = 0x1000,
+	Gi_Or_Gate_Bit = 0x2000,
+	Gi_Output_Polarity_Bit = 0x4000,	/* set to invert */
+	Gi_Source_Polarity_Bit = 0x8000	/* set to invert */
+};
+
+enum Gi_Mode_Bits {
+	Gi_Gating_Mode_Mask = 0x3,
+	Gi_Gating_Disabled_Bits = 0x0,
+	Gi_Level_Gating_Bits = 0x1,
+	Gi_Rising_Edge_Gating_Bits = 0x2,
+	Gi_Falling_Edge_Gating_Bits = 0x3,
+	Gi_Gate_On_Both_Edges_Bit = 0x4,	/* used in conjunction with rising edge gating mode */
+	Gi_Trigger_Mode_for_Edge_Gate_Mask = 0x18,
+	Gi_Edge_Gate_Starts_Stops_Bits = 0x0,
+	Gi_Edge_Gate_Stops_Starts_Bits = 0x8,
+	Gi_Edge_Gate_Starts_Bits = 0x10,
+	Gi_Edge_Gate_No_Starts_or_Stops_Bits = 0x18,
+	Gi_Stop_Mode_Mask = 0x60,
+	Gi_Stop_on_Gate_Bits = 0x00,
+	Gi_Stop_on_Gate_or_TC_Bits = 0x20,
+	Gi_Stop_on_Gate_or_Second_TC_Bits = 0x40,
+	Gi_Load_Source_Select_Bit = 0x80,
+	Gi_Output_Mode_Mask = 0x300,
+	Gi_Output_TC_Pulse_Bits = 0x100,
+	Gi_Output_TC_Toggle_Bits = 0x200,
+	Gi_Output_TC_or_Gate_Toggle_Bits = 0x300,
+	Gi_Counting_Once_Mask = 0xc00,
+	Gi_No_Hardware_Disarm_Bits = 0x000,
+	Gi_Disarm_at_TC_Bits = 0x400,
+	Gi_Disarm_at_Gate_Bits = 0x800,
+	Gi_Disarm_at_TC_or_Gate_Bits = 0xc00,
+	Gi_Loading_On_TC_Bit = 0x1000,
+	Gi_Gate_Polarity_Bit = 0x2000,
+	Gi_Loading_On_Gate_Bit = 0x4000,
+	Gi_Reload_Source_Switching_Bit = 0x8000
+};
+
+#define Gi_Second_Gate_Select_Shift 7
+/*FIXME: m-series has a second gate subselect bit */
+/*FIXME: m-series second gate sources are undocumented (by NI)*/
+enum Gi_Second_Gate_Bits {
+	Gi_Second_Gate_Mode_Bit = 0x1,
+	Gi_Second_Gate_Select_Mask = 0x1f << Gi_Second_Gate_Select_Shift,
+	Gi_Second_Gate_Polarity_Bit = 0x2000,
+	Gi_Second_Gate_Subselect_Bit = 0x4000,	/* m-series only */
+	Gi_Source_Subselect_Bit = 0x8000	/* m-series only */
+};
+static inline unsigned Gi_Second_Gate_Select_Bits(unsigned second_gate_select)
+{
+	return (second_gate_select << Gi_Second_Gate_Select_Shift) &
+		Gi_Second_Gate_Select_Mask;
+}
+
+enum Gxx_Status_Bits {
+	G0_Save_Bit = 0x1,
+	G1_Save_Bit = 0x2,
+	G0_Counting_Bit = 0x4,
+	G1_Counting_Bit = 0x8,
+	G0_Next_Load_Source_Bit = 0x10,
+	G1_Next_Load_Source_Bit = 0x20,
+	G0_Stale_Data_Bit = 0x40,
+	G1_Stale_Data_Bit = 0x80,
+	G0_Armed_Bit = 0x100,
+	G1_Armed_Bit = 0x200,
+	G0_No_Load_Between_Gates_Bit = 0x400,
+	G1_No_Load_Between_Gates_Bit = 0x800,
+	G0_TC_Error_Bit = 0x1000,
+	G1_TC_Error_Bit = 0x2000,
+	G0_Gate_Error_Bit = 0x4000,
+	G1_Gate_Error_Bit = 0x8000
+};
+static inline enum Gxx_Status_Bits Gi_Counting_Bit(unsigned counter_index)
+{
+	if (counter_index % 2)
+		return G1_Counting_Bit;
+	return G0_Counting_Bit;
+}
+static inline enum Gxx_Status_Bits Gi_Armed_Bit(unsigned counter_index)
+{
+	if (counter_index % 2)
+		return G1_Armed_Bit;
+	return G0_Armed_Bit;
+}
+static inline enum Gxx_Status_Bits Gi_Next_Load_Source_Bit(unsigned
+	counter_index)
+{
+	if (counter_index % 2)
+		return G1_Next_Load_Source_Bit;
+	return G0_Next_Load_Source_Bit;
+}
+static inline enum Gxx_Status_Bits Gi_Stale_Data_Bit(unsigned counter_index)
+{
+	if (counter_index % 2)
+		return G1_Stale_Data_Bit;
+	return G0_Stale_Data_Bit;
+}
+static inline enum Gxx_Status_Bits Gi_TC_Error_Bit(unsigned counter_index)
+{
+	if (counter_index % 2)
+		return G1_TC_Error_Bit;
+	return G0_TC_Error_Bit;
+}
+static inline enum Gxx_Status_Bits Gi_Gate_Error_Bit(unsigned counter_index)
+{
+	if (counter_index % 2)
+		return G1_Gate_Error_Bit;
+	return G0_Gate_Error_Bit;
+}
+
+/* joint reset register bits */
+static inline unsigned Gi_Reset_Bit(unsigned counter_index)
+{
+	return 0x1 << (2 + (counter_index % 2));
+}
+
+enum Gxx_Joint_Status2_Bits {
+	G0_Output_Bit = 0x1,
+	G1_Output_Bit = 0x2,
+	G0_HW_Save_Bit = 0x1000,
+	G1_HW_Save_Bit = 0x2000,
+	G0_Permanent_Stale_Bit = 0x4000,
+	G1_Permanent_Stale_Bit = 0x8000
+};
+static inline enum Gxx_Joint_Status2_Bits Gi_Permanent_Stale_Bit(unsigned
+	counter_index)
+{
+	if (counter_index % 2)
+		return G1_Permanent_Stale_Bit;
+	return G0_Permanent_Stale_Bit;
+}
+
+enum Gi_DMA_Config_Reg_Bits {
+	Gi_DMA_Enable_Bit = 0x1,
+	Gi_DMA_Write_Bit = 0x2,
+	Gi_DMA_Int_Bit = 0x4
+};
+
+enum Gi_DMA_Status_Reg_Bits {
+	Gi_DMA_Readbank_Bit = 0x2000,
+	Gi_DRQ_Error_Bit = 0x4000,
+	Gi_DRQ_Status_Bit = 0x8000
+};
+
+enum G02_Interrupt_Acknowledge_Bits {
+	G0_Gate_Error_Confirm_Bit = 0x20,
+	G0_TC_Error_Confirm_Bit = 0x40
+};
+enum G13_Interrupt_Acknowledge_Bits {
+	G1_Gate_Error_Confirm_Bit = 0x2,
+	G1_TC_Error_Confirm_Bit = 0x4
+};
+static inline unsigned Gi_Gate_Error_Confirm_Bit(unsigned counter_index)
+{
+	if (counter_index % 2)
+		return G1_Gate_Error_Confirm_Bit;
+	return G0_Gate_Error_Confirm_Bit;
+}
+static inline unsigned Gi_TC_Error_Confirm_Bit(unsigned counter_index)
+{
+	if (counter_index % 2)
+		return G1_TC_Error_Confirm_Bit;
+	return G0_TC_Error_Confirm_Bit;
+}
+
+// bits that are the same in G0/G2 and G1/G3 interrupt acknowledge registers
+enum Gxx_Interrupt_Acknowledge_Bits {
+	Gi_TC_Interrupt_Ack_Bit = 0x4000,
+	Gi_Gate_Interrupt_Ack_Bit = 0x8000
+};
+
+enum Gi_Status_Bits {
+	Gi_Gate_Interrupt_Bit = 0x4,
+	Gi_TC_Bit = 0x8,
+	Gi_Interrupt_Bit = 0x8000
+};
+
+enum G02_Interrupt_Enable_Bits {
+	G0_TC_Interrupt_Enable_Bit = 0x40,
+	G0_Gate_Interrupt_Enable_Bit = 0x100
+};
+enum G13_Interrupt_Enable_Bits {
+	G1_TC_Interrupt_Enable_Bit = 0x200,
+	G1_Gate_Interrupt_Enable_Bit = 0x400
+};
+static inline unsigned Gi_Gate_Interrupt_Enable_Bit(unsigned counter_index)
+{
+	unsigned bit;
+
+	if (counter_index % 2) {
+		bit = G1_Gate_Interrupt_Enable_Bit;
+	} else {
+		bit = G0_Gate_Interrupt_Enable_Bit;
+	}
+	return bit;
+}
+
+static inline void write_register(struct ni_gpct *counter, unsigned bits,
+	enum ni_gpct_register reg)
+{
+	BUG_ON(reg >= NITIO_Num_Registers);
+	counter->counter_dev->write_register(counter, bits, reg);
+}
+
+static inline unsigned read_register(struct ni_gpct *counter,
+	enum ni_gpct_register reg)
+{
+	BUG_ON(reg >= NITIO_Num_Registers);
+	return counter->counter_dev->read_register(counter, reg);
+}
+
+static inline int ni_tio_counting_mode_registers_present(
+	const struct ni_gpct_device *counter_dev)
+{
+	switch (counter_dev->variant) {
+	case ni_gpct_variant_e_series:
+		return 0;
+		break;
+	case ni_gpct_variant_m_series:
+	case ni_gpct_variant_660x:
+		return 1;
+		break;
+	default:
+		BUG();
+		break;
+	}
+	return 0;
+}
+
+static inline void ni_tio_set_bits_transient(struct ni_gpct *counter,
+	enum ni_gpct_register register_index, unsigned bit_mask,
+	unsigned bit_values, unsigned transient_bit_values)
+{
+	struct ni_gpct_device *counter_dev = counter->counter_dev;
+	unsigned long flags;
+
+	BUG_ON(register_index >= NITIO_Num_Registers);
+	comedi_spin_lock_irqsave(&counter_dev->regs_lock, flags);
+	counter_dev->regs[register_index] &= ~bit_mask;
+	counter_dev->regs[register_index] |= (bit_values & bit_mask);
+	write_register(counter,
+		counter_dev->regs[register_index] | transient_bit_values,
+		register_index);
+	mmiowb();
+	comedi_spin_unlock_irqrestore(&counter_dev->regs_lock, flags);
+}
+
+/* ni_tio_set_bits( ) is for safely writing to registers whose bits may be
+twiddled in interrupt context, or whose software copy may be read in interrupt context.
+*/
+static inline void ni_tio_set_bits(struct ni_gpct *counter,
+	enum ni_gpct_register register_index, unsigned bit_mask,
+	unsigned bit_values)
+{
+	ni_tio_set_bits_transient(counter, register_index, bit_mask, bit_values,
+		0x0);
+}
+
+/* ni_tio_get_soft_copy( ) is for safely reading the software copy of a register
+whose bits might be modified in interrupt context, or whose software copy
+might need to be read in interrupt context.
+*/
+static inline unsigned ni_tio_get_soft_copy(const struct ni_gpct *counter,
+	enum ni_gpct_register register_index)
+{
+	struct ni_gpct_device *counter_dev = counter->counter_dev;
+	unsigned long flags;
+	unsigned value;
+
+	BUG_ON(register_index >= NITIO_Num_Registers);
+	comedi_spin_lock_irqsave(&counter_dev->regs_lock, flags);
+	value = counter_dev->regs[register_index];
+	comedi_spin_unlock_irqrestore(&counter_dev->regs_lock, flags);
+	return value;
+}
+
+int ni_tio_arm(struct ni_gpct *counter, int arm, unsigned start_trigger);
+int ni_tio_set_gate_src(struct ni_gpct *counter, unsigned gate_index,
+	lsampl_t gate_source);
+
+#endif /* _COMEDI_NI_TIO_INTERNAL_H */
