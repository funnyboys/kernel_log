commit e3b7ce73c578b77b592bd3f2da71b90f2c581c87
Author: Ian Abbott <abbotti@mev.co.uk>
Date:   Fri Feb 7 15:13:58 2020 +0000

    staging: comedi: ni_routes: Allow alternate board name for routes
    
    We do not have or provide routing information available for all
    supported boards.  Some of the boards for which we do not currently
    provide routing information actually have identical routes to a similar
    board for which we do provide routing information.  To avoid having to
    provide duplicate routing information, add an "alternate board name"
    parameter (possibly `NULl`) to `ni_assign_device_routes()` and
    `ni_find_device_routes()`.  If the routing information cannot be found
    for the actual board name, try finding it using the alternate board
    name.
    
    Cc: Ã‰ric Piel <piel@delmic.com>
    Cc: Spencer E. Olson <olsonse@umich.edu>
    Signed-off-by: Ian Abbott <abbotti@mev.co.uk>
    Link: https://lore.kernel.org/r/20200207151400.272678-3-abbotti@mev.co.uk
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/drivers/ni_660x.c b/drivers/staging/comedi/drivers/ni_660x.c
index 4ee9b260eab0..75d5c9c24596 100644
--- a/drivers/staging/comedi/drivers/ni_660x.c
+++ b/drivers/staging/comedi/drivers/ni_660x.c
@@ -1035,7 +1035,7 @@ static int ni_660x_auto_attach(struct comedi_device *dev,
 	ni_660x_init_tio_chips(dev, board->n_chips);
 
 	/* prepare the device for globally-named routes. */
-	if (ni_assign_device_routes("ni_660x", board->name,
+	if (ni_assign_device_routes("ni_660x", board->name, NULL,
 				    &devpriv->routing_tables) < 0) {
 		dev_warn(dev->class_dev, "%s: %s device has no signal routing table.\n",
 			 __func__, board->name);

commit fb24ea52f78e0d595852e09e3a55697c8f442189
Author: Will Deacon <will.deacon@arm.com>
Date:   Fri Feb 22 17:14:59 2019 +0000

    drivers: Remove explicit invocations of mmiowb()
    
    mmiowb() is now implied by spin_unlock() on architectures that require
    it, so there is no reason to call it from driver code. This patch was
    generated using coccinelle:
    
            @mmiowb@
            @@
            - mmiowb();
    
    and invoked as:
    
    $ for d in drivers include/linux/qed sound; do \
    spatch --include-headers --sp-file mmiowb.cocci --dir $d --in-place; done
    
    NOTE: mmiowb() has only ever guaranteed ordering in conjunction with
    spin_unlock(). However, pairing each mmiowb() removal in this patch with
    the corresponding call to spin_unlock() is not at all trivial, so there
    is a small chance that this change may regress any drivers incorrectly
    relying on mmiowb() to order MMIO writes between CPUs using lock-free
    synchronisation. If you've ended up bisecting to this commit, you can
    reintroduce the mmiowb() calls using wmb() instead, which should restore
    the old behaviour on all architectures other than some esoteric ia64
    systems.
    
    Acked-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Will Deacon <will.deacon@arm.com>

diff --git a/drivers/staging/comedi/drivers/ni_660x.c b/drivers/staging/comedi/drivers/ni_660x.c
index 405573e927cf..4ee9b260eab0 100644
--- a/drivers/staging/comedi/drivers/ni_660x.c
+++ b/drivers/staging/comedi/drivers/ni_660x.c
@@ -320,7 +320,6 @@ static inline void ni_660x_set_dma_channel(struct comedi_device *dev,
 	ni_660x_write(dev, chip, devpriv->dma_cfg[chip] |
 		      NI660X_DMA_CFG_RESET(mite_channel),
 		      NI660X_DMA_CFG);
-	mmiowb();
 }
 
 static inline void ni_660x_unset_dma_channel(struct comedi_device *dev,
@@ -333,7 +332,6 @@ static inline void ni_660x_unset_dma_channel(struct comedi_device *dev,
 	devpriv->dma_cfg[chip] &= ~NI660X_DMA_CFG_SEL_MASK(mite_channel);
 	devpriv->dma_cfg[chip] |= NI660X_DMA_CFG_SEL_NONE(mite_channel);
 	ni_660x_write(dev, chip, devpriv->dma_cfg[chip], NI660X_DMA_CFG);
-	mmiowb();
 }
 
 static int ni_660x_request_mite_channel(struct comedi_device *dev,

commit 479826cc86118e0d87e5cefb3df5b748e0480924
Author: Gustavo A. R. Silva <gustavo@embeddedor.com>
Date:   Tue Feb 12 12:44:50 2019 -0600

    staging: comedi: ni_660x: fix missing break in switch statement
    
    Add missing break statement in order to prevent the code from falling
    through to the default case and return -EINVAL every time.
    
    This bug was found thanks to the ongoing efforts to enable
    -Wimplicit-fallthrough.
    
    Fixes: aa94f2888825 ("staging: comedi: ni_660x: tidy up ni_660x_set_pfi_routing()")
    Cc: stable@vger.kernel.org
    Signed-off-by: Gustavo A. R. Silva <gustavo@embeddedor.com>
    Reviewed-by: Ian Abbott <abbotti@mev.co.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/drivers/ni_660x.c b/drivers/staging/comedi/drivers/ni_660x.c
index e70a461e723f..405573e927cf 100644
--- a/drivers/staging/comedi/drivers/ni_660x.c
+++ b/drivers/staging/comedi/drivers/ni_660x.c
@@ -656,6 +656,7 @@ static int ni_660x_set_pfi_routing(struct comedi_device *dev,
 	case NI_660X_PFI_OUTPUT_DIO:
 		if (chan > 31)
 			return -EINVAL;
+		break;
 	default:
 		return -EINVAL;
 	}

commit fa86c00799ee1fb851261a0ef904200ecd9c8215
Author: Spencer E. Olson <olsonse@umich.edu>
Date:   Wed Oct 3 14:56:12 2018 -0600

    staging: comedi: ni_660x: add device-global routing
    
    Provides the device-global routing interface for ni_660x devices.  Using
    the device-global names in comedi_cmd structures for commands was already
    supported through the ni_tio module.
    
    Signed-off-by: Spencer E. Olson <olsonse@umich.edu>
    Reviewed-by: Ian Abbott <abbotti@mev.co.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/drivers/ni_660x.c b/drivers/staging/comedi/drivers/ni_660x.c
index 59055f366138..e70a461e723f 100644
--- a/drivers/staging/comedi/drivers/ni_660x.c
+++ b/drivers/staging/comedi/drivers/ni_660x.c
@@ -568,6 +568,10 @@ static void ni_660x_select_pfi_output(struct comedi_device *dev,
 	unsigned int idle_chip = 0;
 	unsigned int bits;
 
+	if (chan >= NI_PFI(0))
+		/* allow new and old names of pfi channels to work. */
+		chan -= NI_PFI(0);
+
 	if (board->n_chips > 1) {
 		if (out_sel == NI_660X_PFI_OUTPUT_COUNTER &&
 		    chan >= 8 && chan <= 23) {
@@ -603,6 +607,10 @@ static void ni_660x_set_pfi_direction(struct comedi_device *dev,
 	struct ni_660x_private *devpriv = dev->private;
 	u64 bit;
 
+	if (chan >= NI_PFI(0))
+		/* allow new and old names of pfi channels to work. */
+		chan -= NI_PFI(0);
+
 	bit = 1ULL << chan;
 
 	if (direction == COMEDI_OUTPUT) {
@@ -622,6 +630,10 @@ static unsigned int ni_660x_get_pfi_direction(struct comedi_device *dev,
 	struct ni_660x_private *devpriv = dev->private;
 	u64 bit;
 
+	if (chan >= NI_PFI(0))
+		/* allow new and old names of pfi channels to work. */
+		chan -= NI_PFI(0);
+
 	bit = 1ULL << chan;
 
 	return (devpriv->io_dir & bit) ? COMEDI_OUTPUT : COMEDI_INPUT;
@@ -632,6 +644,10 @@ static int ni_660x_set_pfi_routing(struct comedi_device *dev,
 {
 	struct ni_660x_private *devpriv = dev->private;
 
+	if (chan >= NI_PFI(0))
+		/* allow new and old names of pfi channels to work. */
+		chan -= NI_PFI(0);
+
 	switch (source) {
 	case NI_660X_PFI_OUTPUT_COUNTER:
 		if (chan < 8)
@@ -654,6 +670,10 @@ static int ni_660x_get_pfi_routing(struct comedi_device *dev, unsigned int chan)
 {
 	struct ni_660x_private *devpriv = dev->private;
 
+	if (chan >= NI_PFI(0))
+		/* allow new and old names of pfi channels to work. */
+		chan -= NI_PFI(0);
+
 	return devpriv->io_cfg[chan];
 }
 
@@ -662,6 +682,10 @@ static void ni_660x_set_pfi_filter(struct comedi_device *dev,
 {
 	unsigned int val;
 
+	if (chan >= NI_PFI(0))
+		/* allow new and old names of pfi channels to work. */
+		chan -= NI_PFI(0);
+
 	val = ni_660x_read(dev, 0, NI660X_IO_CFG(chan));
 	val &= ~NI660X_IO_CFG_IN_SEL_MASK(chan);
 	val |= NI660X_IO_CFG_IN_SEL(chan, value);
@@ -710,6 +734,240 @@ static int ni_660x_dio_insn_config(struct comedi_device *dev,
 	return insn->n;
 }
 
+static unsigned int _ni_get_valid_routes(struct comedi_device *dev,
+					 unsigned int n_pairs,
+					 unsigned int *pair_data)
+{
+	struct ni_660x_private *devpriv = dev->private;
+
+	return ni_get_valid_routes(&devpriv->routing_tables, n_pairs,
+				   pair_data);
+}
+
+/*
+ * Retrieves the current source of the output selector for the given
+ * destination.  If the terminal for the destination is not already configured
+ * as an output, this function returns -EINVAL as error.
+ *
+ * Return: The register value of the destination output selector;
+ *	   -EINVAL if terminal is not configured for output.
+ */
+static inline int get_output_select_source(int dest, struct comedi_device *dev)
+{
+	struct ni_660x_private *devpriv = dev->private;
+	int reg = -1;
+
+	if (channel_is_pfi(dest)) {
+		if (ni_660x_get_pfi_direction(dev, dest) == COMEDI_OUTPUT)
+			reg = ni_660x_get_pfi_routing(dev, dest);
+	} else if (channel_is_rtsi(dest)) {
+		dev_dbg(dev->class_dev,
+			"%s: unhandled rtsi destination (%d) queried\n",
+			__func__, dest);
+		/*
+		 * The following can be enabled when RTSI routing info is
+		 * determined (not currently documented):
+		 * if (ni_get_rtsi_direction(dev, dest) == COMEDI_OUTPUT) {
+		 *	reg = ni_get_rtsi_routing(dev, dest);
+
+		 *	if (reg == NI_RTSI_OUTPUT_RGOUT0) {
+		 *		dest = NI_RGOUT0; ** prepare for lookup below **
+		 *		reg = get_rgout0_reg(dev);
+		 *	} else if (reg >= NI_RTSI_OUTPUT_RTSI_BRD(0) &&
+		 *		   reg <= NI_RTSI_OUTPUT_RTSI_BRD(3)) {
+		 *		const int i = reg - NI_RTSI_OUTPUT_RTSI_BRD(0);
+
+		 *		dest = NI_RTSI_BRD(i); ** prepare for lookup **
+		 *		reg = get_ith_rtsi_brd_reg(i, dev);
+		 *	}
+		 * }
+		 */
+	} else if (channel_is_ctr(dest)) {
+		reg = ni_tio_get_routing(devpriv->counter_dev, dest);
+	} else {
+		dev_dbg(dev->class_dev,
+			"%s: unhandled destination (%d) queried\n",
+			__func__, dest);
+	}
+
+	if (reg >= 0)
+		return ni_find_route_source(CR_CHAN(reg), dest,
+					    &devpriv->routing_tables);
+	return -EINVAL;
+}
+
+/*
+ * Test a route:
+ *
+ * Return: -1 if not connectible;
+ *	    0 if connectible and not connected;
+ *	    1 if connectible and connected.
+ */
+static inline int test_route(unsigned int src, unsigned int dest,
+			     struct comedi_device *dev)
+{
+	struct ni_660x_private *devpriv = dev->private;
+	s8 reg = ni_route_to_register(CR_CHAN(src), dest,
+				      &devpriv->routing_tables);
+
+	if (reg < 0)
+		return -1;
+	if (get_output_select_source(dest, dev) != CR_CHAN(src))
+		return 0;
+	return 1;
+}
+
+/* Connect the actual route.  */
+static inline int connect_route(unsigned int src, unsigned int dest,
+				struct comedi_device *dev)
+{
+	struct ni_660x_private *devpriv = dev->private;
+	s8 reg = ni_route_to_register(CR_CHAN(src), dest,
+				      &devpriv->routing_tables);
+	s8 current_src;
+
+	if (reg < 0)
+		/* route is not valid */
+		return -EINVAL;
+
+	current_src = get_output_select_source(dest, dev);
+	if (current_src == CR_CHAN(src))
+		return -EALREADY;
+	if (current_src >= 0)
+		/* destination mux is already busy. complain, don't overwrite */
+		return -EBUSY;
+
+	/* The route is valid and available. Now connect... */
+	if (channel_is_pfi(CR_CHAN(dest))) {
+		/*
+		 * set routing and then direction so that the output does not
+		 * first get generated with the wrong pin
+		 */
+		ni_660x_set_pfi_routing(dev, dest, reg);
+		ni_660x_set_pfi_direction(dev, dest, COMEDI_OUTPUT);
+	} else if (channel_is_rtsi(CR_CHAN(dest))) {
+		dev_dbg(dev->class_dev, "%s: unhandled rtsi destination (%d)\n",
+			__func__, dest);
+		return -EINVAL;
+		/*
+		 * The following can be enabled when RTSI routing info is
+		 * determined (not currently documented):
+		 * if (reg == NI_RTSI_OUTPUT_RGOUT0) {
+		 *	int ret = incr_rgout0_src_use(src, dev);
+
+		 *	if (ret < 0)
+		 *		return ret;
+		 * } else if (ni_rtsi_route_requires_mux(reg)) {
+		 *	** Attempt to allocate and  route (src->brd) **
+		 *	int brd = incr_rtsi_brd_src_use(src, dev);
+
+		 *	if (brd < 0)
+		 *		return brd;
+
+		 *	** Now lookup the register value for (brd->dest) **
+		 *	reg = ni_lookup_route_register(brd, CR_CHAN(dest),
+		 *				       &devpriv->routing_tables);
+		 * }
+
+		 * ni_set_rtsi_direction(dev, dest, COMEDI_OUTPUT);
+		 * ni_set_rtsi_routing(dev, dest, reg);
+		 */
+	} else if (channel_is_ctr(CR_CHAN(dest))) {
+		/*
+		 * we are adding back the channel modifier info to set
+		 * invert/edge info passed by the user
+		 */
+		ni_tio_set_routing(devpriv->counter_dev, dest,
+				   reg | (src & ~CR_CHAN(-1)));
+	} else {
+		return -EINVAL;
+	}
+	return 0;
+}
+
+static inline int disconnect_route(unsigned int src, unsigned int dest,
+				   struct comedi_device *dev)
+{
+	struct ni_660x_private *devpriv = dev->private;
+	s8 reg = ni_route_to_register(CR_CHAN(src), CR_CHAN(dest),
+				      &devpriv->routing_tables);
+
+	if (reg < 0)
+		/* route is not valid */
+		return -EINVAL;
+	if (get_output_select_source(dest, dev) != CR_CHAN(src))
+		/* cannot disconnect something not connected */
+		return -EINVAL;
+
+	/* The route is valid and is connected.  Now disconnect... */
+	if (channel_is_pfi(CR_CHAN(dest))) {
+		unsigned int source = ((CR_CHAN(dest) - NI_PFI(0)) < 8)
+					? NI_660X_PFI_OUTPUT_DIO
+					: NI_660X_PFI_OUTPUT_COUNTER;
+
+		/* set the pfi to high impedance, and disconnect */
+		ni_660x_set_pfi_direction(dev, dest, COMEDI_INPUT);
+		ni_660x_set_pfi_routing(dev, dest, source);
+	} else if (channel_is_rtsi(CR_CHAN(dest))) {
+		dev_dbg(dev->class_dev, "%s: unhandled rtsi destination (%d)\n",
+			__func__, dest);
+		return -EINVAL;
+		/*
+		 * The following can be enabled when RTSI routing info is
+		 * determined (not currently documented):
+		 * if (reg == NI_RTSI_OUTPUT_RGOUT0) {
+		 *	int ret = decr_rgout0_src_use(src, dev);
+
+		 *	if (ret < 0)
+		 *		return ret;
+		 * } else if (ni_rtsi_route_requires_mux(reg)) {
+		 *	** find which RTSI_BRD line is source for rtsi pin **
+		 *	int brd = ni_find_route_source(
+		 *		ni_get_rtsi_routing(dev, dest), CR_CHAN(dest),
+		 *		&devpriv->routing_tables);
+
+		 *	if (brd < 0)
+		 *		return brd;
+
+		 *	** decrement/disconnect RTSI_BRD line from source **
+		 *	decr_rtsi_brd_src_use(src, brd, dev);
+		 * }
+
+		 * ** set rtsi output selector to default state **
+		 * reg = default_rtsi_routing[CR_CHAN(dest) - TRIGGER_LINE(0)];
+		 * ni_set_rtsi_direction(dev, dest, COMEDI_INPUT);
+		 * ni_set_rtsi_routing(dev, dest, reg);
+		 */
+	} else if (channel_is_ctr(CR_CHAN(dest))) {
+		ni_tio_unset_routing(devpriv->counter_dev, dest);
+	} else {
+		return -EINVAL;
+	}
+	return 0;
+}
+
+static int ni_global_insn_config(struct comedi_device *dev,
+				 struct comedi_insn *insn,
+				 unsigned int *data)
+{
+	switch (data[0]) {
+	case INSN_DEVICE_CONFIG_TEST_ROUTE:
+		data[0] = test_route(data[1], data[2], dev);
+		return 2;
+	case INSN_DEVICE_CONFIG_CONNECT_ROUTE:
+		return connect_route(data[1], data[2], dev);
+	case INSN_DEVICE_CONFIG_DISCONNECT_ROUTE:
+		return disconnect_route(data[1], data[2], dev);
+	/*
+	 * This case is already handled one level up.
+	 * case INSN_DEVICE_CONFIG_GET_ROUTES:
+	 */
+	default:
+		return -EINVAL;
+	}
+	return 1;
+}
+
 static void ni_660x_init_tio_chips(struct comedi_device *dev,
 				   unsigned int n_chips)
 {
@@ -784,6 +1042,13 @@ static int ni_660x_auto_attach(struct comedi_device *dev,
 			 __func__, board->name);
 		dev_warn(dev->class_dev, "%s: High level NI signal names will not be available for this %s board.\n",
 			 __func__, board->name);
+	} else {
+		/*
+		 * only(?) assign insn_device_config if we have global names for
+		 * this device.
+		 */
+		dev->insn_device_config = ni_global_insn_config;
+		dev->get_valid_routes = _ni_get_valid_routes;
 	}
 
 	n_counters = board->n_chips * NI660X_COUNTERS_PER_CHIP;

commit a0c5e8460011506978c833d72496ce0147d82b2f
Author: Spencer E. Olson <olsonse@umich.edu>
Date:   Wed Oct 3 14:56:11 2018 -0600

    staging: comedi: ni_660x: clean up pfi routing
    
    Cleans up the pfi routing code to make it easier to follow, read, and also
    to prepare to use this cleaned up code for enabling the device-global
    routing interface for ni_660x devices.
    
    Signed-off-by: Spencer E. Olson <olsonse@umich.edu>
    Reviewed-by: Ian Abbott <abbotti@mev.co.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/drivers/ni_660x.c b/drivers/staging/comedi/drivers/ni_660x.c
index 0dfaf8ed093d..59055f366138 100644
--- a/drivers/staging/comedi/drivers/ni_660x.c
+++ b/drivers/staging/comedi/drivers/ni_660x.c
@@ -596,6 +596,37 @@ static void ni_660x_select_pfi_output(struct comedi_device *dev,
 	ni_660x_write(dev, active_chip, bits, NI660X_IO_CFG(chan));
 }
 
+static void ni_660x_set_pfi_direction(struct comedi_device *dev,
+				      unsigned int chan,
+				      unsigned int direction)
+{
+	struct ni_660x_private *devpriv = dev->private;
+	u64 bit;
+
+	bit = 1ULL << chan;
+
+	if (direction == COMEDI_OUTPUT) {
+		devpriv->io_dir |= bit;
+		/* reset the output to currently assigned output value */
+		ni_660x_select_pfi_output(dev, chan, devpriv->io_cfg[chan]);
+	} else {
+		devpriv->io_dir &= ~bit;
+		/* set pin to high-z; do not change currently assigned route */
+		ni_660x_select_pfi_output(dev, chan, 0);
+	}
+}
+
+static unsigned int ni_660x_get_pfi_direction(struct comedi_device *dev,
+					      unsigned int chan)
+{
+	struct ni_660x_private *devpriv = dev->private;
+	u64 bit;
+
+	bit = 1ULL << chan;
+
+	return (devpriv->io_dir & bit) ? COMEDI_OUTPUT : COMEDI_INPUT;
+}
+
 static int ni_660x_set_pfi_routing(struct comedi_device *dev,
 				   unsigned int chan, unsigned int source)
 {
@@ -614,36 +645,48 @@ static int ni_660x_set_pfi_routing(struct comedi_device *dev,
 	}
 
 	devpriv->io_cfg[chan] = source;
-	if (devpriv->io_dir & (1ULL << chan))
+	if (ni_660x_get_pfi_direction(dev, chan) == COMEDI_OUTPUT)
 		ni_660x_select_pfi_output(dev, chan, devpriv->io_cfg[chan]);
 	return 0;
 }
 
+static int ni_660x_get_pfi_routing(struct comedi_device *dev, unsigned int chan)
+{
+	struct ni_660x_private *devpriv = dev->private;
+
+	return devpriv->io_cfg[chan];
+}
+
+static void ni_660x_set_pfi_filter(struct comedi_device *dev,
+				   unsigned int chan, unsigned int value)
+{
+	unsigned int val;
+
+	val = ni_660x_read(dev, 0, NI660X_IO_CFG(chan));
+	val &= ~NI660X_IO_CFG_IN_SEL_MASK(chan);
+	val |= NI660X_IO_CFG_IN_SEL(chan, value);
+	ni_660x_write(dev, 0, val, NI660X_IO_CFG(chan));
+}
+
 static int ni_660x_dio_insn_config(struct comedi_device *dev,
 				   struct comedi_subdevice *s,
 				   struct comedi_insn *insn,
 				   unsigned int *data)
 {
-	struct ni_660x_private *devpriv = dev->private;
 	unsigned int chan = CR_CHAN(insn->chanspec);
-	u64 bit = 1ULL << chan;
-	unsigned int val;
 	int ret;
 
 	switch (data[0]) {
 	case INSN_CONFIG_DIO_OUTPUT:
-		devpriv->io_dir |= bit;
-		ni_660x_select_pfi_output(dev, chan, devpriv->io_cfg[chan]);
+		ni_660x_set_pfi_direction(dev, chan, COMEDI_OUTPUT);
 		break;
 
 	case INSN_CONFIG_DIO_INPUT:
-		devpriv->io_dir &= ~bit;
-		ni_660x_select_pfi_output(dev, chan, 0);	/* high-z */
+		ni_660x_set_pfi_direction(dev, chan, COMEDI_INPUT);
 		break;
 
 	case INSN_CONFIG_DIO_QUERY:
-		data[1] = (devpriv->io_dir & bit) ? COMEDI_OUTPUT
-						  : COMEDI_INPUT;
+		data[1] = ni_660x_get_pfi_direction(dev, chan);
 		break;
 
 	case INSN_CONFIG_SET_ROUTING:
@@ -653,14 +696,11 @@ static int ni_660x_dio_insn_config(struct comedi_device *dev,
 		break;
 
 	case INSN_CONFIG_GET_ROUTING:
-		data[1] = devpriv->io_cfg[chan];
+		data[1] = ni_660x_get_pfi_routing(dev, chan);
 		break;
 
 	case INSN_CONFIG_FILTER:
-		val = ni_660x_read(dev, 0, NI660X_IO_CFG(chan));
-		val &= ~NI660X_IO_CFG_IN_SEL_MASK(chan);
-		val |= NI660X_IO_CFG_IN_SEL(chan, data[1]);
-		ni_660x_write(dev, 0, val, NI660X_IO_CFG(chan));
+		ni_660x_set_pfi_filter(dev, chan, data[1]);
 		break;
 
 	default:
@@ -840,7 +880,7 @@ static int ni_660x_auto_attach(struct comedi_device *dev,
 					      : NI_660X_PFI_OUTPUT_COUNTER;
 
 		ni_660x_set_pfi_routing(dev, i, source);
-		ni_660x_select_pfi_output(dev, i, 0);		/* high-z */
+		ni_660x_set_pfi_direction(dev, i, COMEDI_INPUT);/* high-z */
 	}
 
 	/* Counter subdevices (4 NI TIO General Purpose Counters per chip) */

commit 51c4ba6407ef9f5735bc6bf566211bb839892e4b
Author: Spencer E. Olson <olsonse@umich.edu>
Date:   Wed Oct 3 14:56:10 2018 -0600

    staging: comedi: ni_660x: Add NI PCI-6608 to list of supported devices
    
    Previously, only the PXI version of the NI-6608 board was supported.  This
    change adds support for the PCI version as well.
    
    Signed-off-by: Spencer E. Olson <olsonse@umich.edu>
    Reviewed-by: Ian Abbott <abbotti@mev.co.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/drivers/ni_660x.c b/drivers/staging/comedi/drivers/ni_660x.c
index 498b2868c957..0dfaf8ed093d 100644
--- a/drivers/staging/comedi/drivers/ni_660x.c
+++ b/drivers/staging/comedi/drivers/ni_660x.c
@@ -7,7 +7,7 @@
  * Driver: ni_660x
  * Description: National Instruments 660x counter/timer boards
  * Devices: [National Instruments] PCI-6601 (ni_660x), PCI-6602, PXI-6602,
- *   PXI-6608, PCI-6624, PXI-6624
+ *   PCI-6608, PXI-6608, PCI-6624, PXI-6624
  * Author: J.P. Mellor <jpmellor@rose-hulman.edu>,
  *   Herman.Bruyninckx@mech.kuleuven.ac.be,
  *   Wim.Meeussen@mech.kuleuven.ac.be,
@@ -202,6 +202,7 @@ enum ni_660x_boardid {
 	BOARD_PCI6601,
 	BOARD_PCI6602,
 	BOARD_PXI6602,
+	BOARD_PCI6608,
 	BOARD_PXI6608,
 	BOARD_PCI6624,
 	BOARD_PXI6624
@@ -225,6 +226,10 @@ static const struct ni_660x_board ni_660x_boards[] = {
 		.name		= "PXI-6602",
 		.n_chips	= 2,
 	},
+	[BOARD_PCI6608] = {
+		.name		= "PCI-6608",
+		.n_chips	= 2,
+	},
 	[BOARD_PXI6608] = {
 		.name		= "PXI-6608",
 		.n_chips	= 2,
@@ -925,6 +930,7 @@ static const struct pci_device_id ni_660x_pci_table[] = {
 	{ PCI_VDEVICE(NI, 0x1310), BOARD_PCI6602 },
 	{ PCI_VDEVICE(NI, 0x1360), BOARD_PXI6602 },
 	{ PCI_VDEVICE(NI, 0x2c60), BOARD_PCI6601 },
+	{ PCI_VDEVICE(NI, 0x2db0), BOARD_PCI6608 },
 	{ PCI_VDEVICE(NI, 0x2cc0), BOARD_PXI6608 },
 	{ PCI_VDEVICE(NI, 0x1e30), BOARD_PCI6624 },
 	{ PCI_VDEVICE(NI, 0x1e40), BOARD_PXI6624 },

commit 347e244884c3be1f5bce1d93730f0c32efabba99
Author: Spencer E. Olson <olsonse@umich.edu>
Date:   Wed Oct 3 14:56:08 2018 -0600

    staging: comedi: tio: implement global tio/ctr routing
    
    Adds ability to use device-global names in command args, in particular
    cmd->start_arg (for NI_CtrArmStartTrigger), and cmd->scan_begin_arg or
    cmd->convert_arg (either is used to specify NI_CtrGate, with preference
    given to cmd->scan_begin_arg, if it is set).
    
    The actual arguments of cmd->start_arg are not fully checked against known
    register values for the particular devices because these are not documented
    or currently known.  This follows the precedence of prior versions of the
    tio driver.  Should these become known, they should be annotated in the
    route_values tables and the set of lines in ni_tio_cmdtest should be
    uncommented to allow the tests to be made.
    
    This patch also adds interface functions that allow routes for particular
    counter route destinations to be made/queried/unmade.  This allows overseer
    modules to implement test_route, connect_route, and disconnect_route.  As a
    part of these changes, various functions were cleaned up and clarified.
    
    These new interface functions allow direct writing/reading of register
    values.  This is an example of exactly what the new device-global access
    was intended to solve:  the old interface was not consistent with other
    portions of the ni_* drivers--it did not allow full register values to be
    given for various MUXes.  Instead, the old interface _did_ abstract away
    some of the actual hardware from the underlying devices, but it was not
    consistent with any other NI hardware.  Allowing the device-global
    identifiers to be used, the new patch provides for consistency across all
    ni_* drivers.  One final note:  these changes provide for backwards
    compatibility by allowing the older values to still be used in through the
    pre-existing kernel interfaces--though not in the new device-global
    test/dis/connect/route interfaces.
    
    Signed-off-by: Spencer E. Olson <olsonse@umich.edu>
    Reviewed-by: Ian Abbott <abbotti@mev.co.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/drivers/ni_660x.c b/drivers/staging/comedi/drivers/ni_660x.c
index e521ed9d0887..498b2868c957 100644
--- a/drivers/staging/comedi/drivers/ni_660x.c
+++ b/drivers/staging/comedi/drivers/ni_660x.c
@@ -31,6 +31,7 @@
 
 #include "mite.h"
 #include "ni_tio.h"
+#include "ni_routes.h"
 
 /* See Register-Level Programmer Manual page 3.1 */
 enum ni_660x_register {
@@ -259,6 +260,7 @@ struct ni_660x_private {
 	unsigned int dma_cfg[NI660X_MAX_CHIPS];
 	unsigned int io_cfg[NI660X_NUM_PFI_CHANNELS];
 	u64 io_dir;
+	struct ni_route_tables routing_tables;
 };
 
 static void ni_660x_write(struct comedi_device *dev, unsigned int chip,
@@ -730,12 +732,23 @@ static int ni_660x_auto_attach(struct comedi_device *dev,
 
 	ni_660x_init_tio_chips(dev, board->n_chips);
 
+	/* prepare the device for globally-named routes. */
+	if (ni_assign_device_routes("ni_660x", board->name,
+				    &devpriv->routing_tables) < 0) {
+		dev_warn(dev->class_dev, "%s: %s device has no signal routing table.\n",
+			 __func__, board->name);
+		dev_warn(dev->class_dev, "%s: High level NI signal names will not be available for this %s board.\n",
+			 __func__, board->name);
+	}
+
 	n_counters = board->n_chips * NI660X_COUNTERS_PER_CHIP;
 	gpct_dev = ni_gpct_device_construct(dev,
 					    ni_660x_gpct_write,
 					    ni_660x_gpct_read,
 					    ni_gpct_variant_660x,
-					    n_counters);
+					    n_counters,
+					    NI660X_COUNTERS_PER_CHIP,
+					    &devpriv->routing_tables);
 	if (!gpct_dev)
 		return -ENOMEM;
 	devpriv->counter_dev = gpct_dev;
@@ -831,9 +844,6 @@ static int ni_660x_auto_attach(struct comedi_device *dev,
 		if (i < n_counters) {
 			struct ni_gpct *counter = &gpct_dev->counters[i];
 
-			counter->chip_index = i / NI660X_COUNTERS_PER_CHIP;
-			counter->counter_index = i % NI660X_COUNTERS_PER_CHIP;
-
 			s->type		= COMEDI_SUBD_COUNTER;
 			s->subdev_flags	= SDF_READABLE | SDF_WRITABLE |
 					  SDF_LSAMPL | SDF_CMD_READ;

commit b69839391d444882d83c85a531da8b4e75a2b2e6
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Tue Nov 7 14:58:44 2017 +0100

    staging: comedi: drivers: Remove redundant license text
    
    Now that the SPDX tag is in all comedi files, that identifies the
    license in a specific and legally-defined manner.  So the extra GPL text
    wording can be removed as it is no longer needed at all.
    
    This is done on a quest to remove the 700+ different ways that files in
    the kernel describe the GPL license text.  And there's unneeded stuff
    like the address (sometimes incorrect) for the FSF which is never
    needed.
    
    No copyright headers or other non-license-description text was removed.
    
    Cc: Ian Abbott <abbotti@mev.co.uk>
    Cc: H Hartley Sweeten <hsweeten@visionengravers.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/drivers/ni_660x.c b/drivers/staging/comedi/drivers/ni_660x.c
index 2253a2d69870..e521ed9d0887 100644
--- a/drivers/staging/comedi/drivers/ni_660x.c
+++ b/drivers/staging/comedi/drivers/ni_660x.c
@@ -1,16 +1,6 @@
 // SPDX-License-Identifier: GPL-2.0+
 /*
  * Hardware driver for NI 660x devices
- *
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation; either version 2 of the License, or
- * (at your option) any later version.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
  */
 
 /*

commit e184e2bed8fc895ce930624524d319289c1f1082
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Tue Nov 7 14:58:43 2017 +0100

    staging: comedi: add SPDX identifiers to all greybus driver files
    
    It's good to have SPDX identifiers in all files to make it easier to
    audit the kernel tree for correct licenses.
    
    Update the drivers/staging/comedi files files with the correct SPDX
    license identifier based on the license text in the file itself.  The
    SPDX identifier is a legally binding shorthand, which can be used
    instead of the full boiler plate text.
    
    This work is based on a script and data from Thomas Gleixner, Philippe
    Ombredanne, and Kate Stewart.
    
    Cc: Ian Abbott <abbotti@mev.co.uk>
    Cc: H Hartley Sweeten <hsweeten@visionengravers.com>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: Kate Stewart <kstewart@linuxfoundation.org>
    Cc: Philippe Ombredanne <pombredanne@nexb.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/drivers/ni_660x.c b/drivers/staging/comedi/drivers/ni_660x.c
index 6aa755ad3953..2253a2d69870 100644
--- a/drivers/staging/comedi/drivers/ni_660x.c
+++ b/drivers/staging/comedi/drivers/ni_660x.c
@@ -1,3 +1,4 @@
+// SPDX-License-Identifier: GPL-2.0+
 /*
  * Hardware driver for NI 660x devices
  *

commit 0d0ad8298d06197c58a43c8d518bd5b67a58116b
Author: Ian Abbott <abbotti@mev.co.uk>
Date:   Mon Jan 16 14:12:55 2017 +0000

    staging: comedi: ni_660x: Support PCI-6224
    
    Add support for the NI PCI-6224 board, assuming it behaves like the NI
    PXI-6224 board at the register level.
    
    The PCI device ID comes from the "nitiowv.inf" file in National
    Instrument's Windows drivers.
    
    Signed-off-by: Ian Abbott <abbotti@mev.co.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/drivers/ni_660x.c b/drivers/staging/comedi/drivers/ni_660x.c
index 0dcb826a9f1f..6aa755ad3953 100644
--- a/drivers/staging/comedi/drivers/ni_660x.c
+++ b/drivers/staging/comedi/drivers/ni_660x.c
@@ -16,13 +16,13 @@
  * Driver: ni_660x
  * Description: National Instruments 660x counter/timer boards
  * Devices: [National Instruments] PCI-6601 (ni_660x), PCI-6602, PXI-6602,
- *   PXI-6608, PXI-6624
+ *   PXI-6608, PCI-6624, PXI-6624
  * Author: J.P. Mellor <jpmellor@rose-hulman.edu>,
  *   Herman.Bruyninckx@mech.kuleuven.ac.be,
  *   Wim.Meeussen@mech.kuleuven.ac.be,
  *   Klaas.Gadeyne@mech.kuleuven.ac.be,
  *   Frank Mori Hess <fmhess@users.sourceforge.net>
- * Updated: Fri, 15 Mar 2013 10:47:56 +0000
+ * Updated: Mon, 16 Jan 2017 14:00:43 +0000
  * Status: experimental
  *
  * Encoders work.  PulseGeneration (both single pulse and pulse train)
@@ -211,6 +211,7 @@ enum ni_660x_boardid {
 	BOARD_PCI6602,
 	BOARD_PXI6602,
 	BOARD_PXI6608,
+	BOARD_PCI6624,
 	BOARD_PXI6624
 };
 
@@ -236,6 +237,10 @@ static const struct ni_660x_board ni_660x_boards[] = {
 		.name		= "PXI-6608",
 		.n_chips	= 2,
 	},
+	[BOARD_PCI6624] = {
+		.name		= "PCI-6624",
+		.n_chips	= 2,
+	},
 	[BOARD_PXI6624] = {
 		.name		= "PXI-6624",
 		.n_chips	= 2,
@@ -920,6 +925,7 @@ static const struct pci_device_id ni_660x_pci_table[] = {
 	{ PCI_VDEVICE(NI, 0x1360), BOARD_PXI6602 },
 	{ PCI_VDEVICE(NI, 0x2c60), BOARD_PCI6601 },
 	{ PCI_VDEVICE(NI, 0x2cc0), BOARD_PXI6608 },
+	{ PCI_VDEVICE(NI, 0x1e30), BOARD_PCI6624 },
 	{ PCI_VDEVICE(NI, 0x1e40), BOARD_PXI6624 },
 	{ 0 }
 };

commit 48f2c1aecfbcfe5ab4b2a003dee1a469e7c32214
Author: H Hartley Sweeten <hsweeten@visionengravers.com>
Date:   Mon May 2 10:11:45 2016 -0700

    staging: comedi: mite: do mite_steup() as part of mite_attach()
    
    Currently all the drivers that use the mite driver have to call
    mite_setup() after allocating and initializing the mite device
    with mite_attach().
    
    Move the mite_setup() call into mite_attach() to simplify the
    drivers a bit and remove the need for the additional inline and
    exported functions.
    
    For aesthetics, move mite_setup2(), and rename it to mite_setup(),
    so it's near mite_attach().
    
    Signed-off-by: H Hartley Sweeten <hsweeten@visionengravers.com>
    Reviewed-by: Ian Abbott <abbotti@mev.co.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/drivers/ni_660x.c b/drivers/staging/comedi/drivers/ni_660x.c
index de75598554f2..0dcb826a9f1f 100644
--- a/drivers/staging/comedi/drivers/ni_660x.c
+++ b/drivers/staging/comedi/drivers/ni_660x.c
@@ -724,14 +724,10 @@ static int ni_660x_auto_attach(struct comedi_device *dev,
 		return ret;
 	devpriv = dev->private;
 
-	devpriv->mite = mite_attach(dev);
+	devpriv->mite = mite_attach(dev, true);		/* use win1 */
 	if (!devpriv->mite)
 		return -ENOMEM;
 
-	ret = mite_setup2(dev, devpriv->mite, true);
-	if (ret < 0)
-		return ret;
-
 	ret = ni_660x_alloc_mite_rings(dev);
 	if (ret < 0)
 		return ret;

commit 5b329305d252834fa2a40fcb318743bcc18c8a98
Author: H Hartley Sweeten <hsweeten@visionengravers.com>
Date:   Mon May 2 10:11:44 2016 -0700

    staging: comedi: mite: document mite_alloc()/mite_detach()
    
    These functions are basically the comedi_driver (*attach)/(*detach)
    for this driver.
    
    For aesthetics, rename mite_alloc() to mite_attach() and pass the
    comedi_device pointer to it instead of the pci_dev pointer.
    
    Move the functions to the end of the file. This is typically where
    a comedi_drivers (*attach)/(*detach) are located.
    
    Add some docbook comments for these exported functions.
    
    Signed-off-by: H Hartley Sweeten <hsweeten@visionengravers.com>
    Reviewed-by: Ian Abbott <abbotti@mev.co.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/drivers/ni_660x.c b/drivers/staging/comedi/drivers/ni_660x.c
index 041ea67a913b..de75598554f2 100644
--- a/drivers/staging/comedi/drivers/ni_660x.c
+++ b/drivers/staging/comedi/drivers/ni_660x.c
@@ -724,7 +724,7 @@ static int ni_660x_auto_attach(struct comedi_device *dev,
 		return ret;
 	devpriv = dev->private;
 
-	devpriv->mite = mite_alloc(pcidev);
+	devpriv->mite = mite_attach(dev);
 	if (!devpriv->mite)
 		return -ENOMEM;
 

commit 19d9212ef93fca5be07e6b8554a00dcb82124c7d
Author: H Hartley Sweeten <hsweeten@visionengravers.com>
Date:   Mon May 2 10:11:36 2016 -0700

    staging: comedi: mite: rename 'struct mite_dma_descriptor_ring'
    
    Rename this name to 'mite_ring' to help shorten the long lines.
    
    In the ni_660x driver, also shorten the private data member 'mite_rings'
    to simply 'ring'.
    
    Signed-off-by: H Hartley Sweeten <hsweeten@visionengravers.com>
    Reviewed-by: Ian Abbott <abbotti@mev.co.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/drivers/ni_660x.c b/drivers/staging/comedi/drivers/ni_660x.c
index 7cc7e28baf92..041ea67a913b 100644
--- a/drivers/staging/comedi/drivers/ni_660x.c
+++ b/drivers/staging/comedi/drivers/ni_660x.c
@@ -255,8 +255,7 @@ static const struct ni_660x_board ni_660x_boards[] = {
 struct ni_660x_private {
 	struct mite *mite;
 	struct ni_gpct_device *counter_dev;
-	struct mite_dma_descriptor_ring
-	*mite_rings[NI660X_MAX_CHIPS][NI660X_COUNTERS_PER_CHIP];
+	struct mite_ring *ring[NI660X_MAX_CHIPS][NI660X_COUNTERS_PER_CHIP];
 	/* protects mite channel request/release */
 	spinlock_t mite_channel_lock;
 	/* prevents races between interrupt and comedi_poll */
@@ -339,12 +338,12 @@ static int ni_660x_request_mite_channel(struct comedi_device *dev,
 					enum comedi_io_direction direction)
 {
 	struct ni_660x_private *devpriv = dev->private;
-	struct mite_dma_descriptor_ring *ring;
+	struct mite_ring *ring;
 	struct mite_channel *mite_chan;
 	unsigned long flags;
 
 	spin_lock_irqsave(&devpriv->mite_channel_lock, flags);
-	ring = devpriv->mite_rings[counter->chip_index][counter->counter_index];
+	ring = devpriv->ring[counter->chip_index][counter->counter_index];
 	mite_chan = mite_request_channel(devpriv->mite, ring);
 	if (!mite_chan) {
 		spin_unlock_irqrestore(&devpriv->mite_channel_lock, flags);
@@ -470,10 +469,10 @@ static int ni_660x_buf_change(struct comedi_device *dev,
 {
 	struct ni_660x_private *devpriv = dev->private;
 	struct ni_gpct *counter = s->private;
-	struct mite_dma_descriptor_ring *ring;
+	struct mite_ring *ring;
 	int ret;
 
-	ring = devpriv->mite_rings[counter->chip_index][counter->counter_index];
+	ring = devpriv->ring[counter->chip_index][counter->counter_index];
 	ret = mite_buf_change(ring, s);
 	if (ret < 0)
 		return ret;
@@ -507,9 +506,8 @@ static int ni_660x_alloc_mite_rings(struct comedi_device *dev)
 
 	for (i = 0; i < board->n_chips; ++i) {
 		for (j = 0; j < NI660X_COUNTERS_PER_CHIP; ++j) {
-			devpriv->mite_rings[i][j] =
-			    mite_alloc_ring(devpriv->mite);
-			if (!devpriv->mite_rings[i][j])
+			devpriv->ring[i][j] = mite_alloc_ring(devpriv->mite);
+			if (!devpriv->ring[i][j])
 				return -ENOMEM;
 		}
 	}
@@ -525,7 +523,7 @@ static void ni_660x_free_mite_rings(struct comedi_device *dev)
 
 	for (i = 0; i < board->n_chips; ++i) {
 		for (j = 0; j < NI660X_COUNTERS_PER_CHIP; ++j)
-			mite_free_ring(devpriv->mite_rings[i][j]);
+			mite_free_ring(devpriv->ring[i][j]);
 	}
 }
 

commit 1a8da31b6cbca7cd0a6b6ca738fa420eb2ee899a
Author: H Hartley Sweeten <hsweeten@visionengravers.com>
Date:   Mon May 2 10:11:34 2016 -0700

    staging: comedi: mite: rename 'struct mite_struct'
    
    Rename this struct to simply 'mite'. The current name is a bit redundant.
    
    Signed-off-by: H Hartley Sweeten <hsweeten@visionengravers.com>
    Reviewed-by: Ian Abbott <abbotti@mev.co.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/drivers/ni_660x.c b/drivers/staging/comedi/drivers/ni_660x.c
index e745eb9c5fb1..7cc7e28baf92 100644
--- a/drivers/staging/comedi/drivers/ni_660x.c
+++ b/drivers/staging/comedi/drivers/ni_660x.c
@@ -253,7 +253,7 @@ static const struct ni_660x_board ni_660x_boards[] = {
 					 NI660X_COUNTERS_PER_CHIP)
 
 struct ni_660x_private {
-	struct mite_struct *mite;
+	struct mite *mite;
 	struct ni_gpct_device *counter_dev;
 	struct mite_dma_descriptor_ring
 	*mite_rings[NI660X_MAX_CHIPS][NI660X_COUNTERS_PER_CHIP];

commit 51d430056c2a695ff7ffc62ae917c413616ec6b2
Author: H Hartley Sweeten <hsweeten@visionengravers.com>
Date:   Wed Apr 20 10:36:39 2016 -0700

    staging: comedi: mite: introduce mite_sync_dma()
    
    The struct mite_channel 'dir' member specifies if the dma is input
    or output. Wrap the mite_sync_input_dma() and mite_sync_output_dma()
    functions with a single mite_sync_dma() so that the drivers don't
    have to worry about the sync direction.
    
    The functions that actually sync the input/output dma currently return
    -1 if an overflow/underrun is detected otherwise they return 0. If an
    overflow/underrun is detected the async->event COMEDI_CB_OVERFLOW is
    also set.
    
    The callers never check the return value anyway so just make the
    functions return void. The async->event can be checked if necessary
    to detect any errors.
    
    Signed-off-by: H Hartley Sweeten <hsweeten@visionengravers.com>
    Reviewed-by: Ian Abbott <abbotti@mev.co.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/drivers/ni_660x.c b/drivers/staging/comedi/drivers/ni_660x.c
index 4345bdcec68e..e745eb9c5fb1 100644
--- a/drivers/staging/comedi/drivers/ni_660x.c
+++ b/drivers/staging/comedi/drivers/ni_660x.c
@@ -460,7 +460,7 @@ static int ni_660x_input_poll(struct comedi_device *dev,
 
 	/* lock to avoid race with comedi_poll */
 	spin_lock_irqsave(&devpriv->interrupt_lock, flags);
-	mite_sync_input_dma(counter->mite_chan, s);
+	mite_sync_dma(counter->mite_chan, s);
 	spin_unlock_irqrestore(&devpriv->interrupt_lock, flags);
 	return comedi_buf_read_n_available(s);
 }

commit 47470216cc2fe413156aa44d7ae55e65712b0931
Author: H Hartley Sweeten <hsweeten@visionengravers.com>
Date:   Tue Mar 22 11:10:53 2016 -0700

    staging: comedi: ni_660x: update the MODULE_DESCRIPTION
    
    Change the generic MODULE_DESCRIPTION text to something more useful.
    
    Signed-off-by: H Hartley Sweeten <hsweeten@visionengravers.com>
    Reviewed-by: Ian Abbott <abbotti@mev.co.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/drivers/ni_660x.c b/drivers/staging/comedi/drivers/ni_660x.c
index 73ccd62eb450..4345bdcec68e 100644
--- a/drivers/staging/comedi/drivers/ni_660x.c
+++ b/drivers/staging/comedi/drivers/ni_660x.c
@@ -940,5 +940,5 @@ static struct pci_driver ni_660x_pci_driver = {
 module_comedi_pci_driver(ni_660x_driver, ni_660x_pci_driver);
 
 MODULE_AUTHOR("Comedi http://www.comedi.org");
-MODULE_DESCRIPTION("Comedi low-level driver");
+MODULE_DESCRIPTION("Comedi driver for NI 660x counter/timer boards");
 MODULE_LICENSE("GPL");

commit 8f266d508c7aa7dad84fbb0d793aa95e8af95169
Author: H Hartley Sweeten <hsweeten@visionengravers.com>
Date:   Tue Mar 22 11:10:52 2016 -0700

    staging: comedi: ni_660x: refactor GPCT_OFFSET
    
    This driver supports boards that have 1 or 2 TIO chips with base
    addresses 0x800 apart. Replace the static const array 'GPCT_OFFSET'
    with a define and calculate the base address based on the chip index.
    
    Signed-off-by: H Hartley Sweeten <hsweeten@visionengravers.com>
    Reviewed-by: Ian Abbott <abbotti@mev.co.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/drivers/ni_660x.c b/drivers/staging/comedi/drivers/ni_660x.c
index 3b57ce59273e..73ccd62eb450 100644
--- a/drivers/staging/comedi/drivers/ni_660x.c
+++ b/drivers/staging/comedi/drivers/ni_660x.c
@@ -204,9 +204,7 @@ static const struct ni_660x_register_data ni_660x_reg_data[NI660X_NUM_REGS] = {
 	[NI660X_IO_CFG_38_39]		= { 0x7a2, 2 }	/* read/write */
 };
 
-/* Offset of the GPCT chips from the base-address of the card */
-/* First chip is at base-address + 0x00, etc. */
-static const unsigned GPCT_OFFSET[2] = { 0x0, 0x800 };
+#define NI660X_CHIP_OFFSET		0x800
 
 enum ni_660x_boardid {
 	BOARD_PCI6601,
@@ -271,7 +269,8 @@ struct ni_660x_private {
 static void ni_660x_write(struct comedi_device *dev, unsigned int chip,
 			  unsigned int bits, unsigned int reg)
 {
-	unsigned int addr = GPCT_OFFSET[chip] + ni_660x_reg_data[reg].offset;
+	unsigned int addr = (chip * NI660X_CHIP_OFFSET) +
+			    ni_660x_reg_data[reg].offset;
 
 	if (ni_660x_reg_data[reg].size == 2)
 		writew(bits, dev->mmio + addr);
@@ -282,7 +281,8 @@ static void ni_660x_write(struct comedi_device *dev, unsigned int chip,
 static unsigned int ni_660x_read(struct comedi_device *dev,
 				 unsigned int chip, unsigned int reg)
 {
-	unsigned int addr = GPCT_OFFSET[chip] + ni_660x_reg_data[reg].offset;
+	unsigned int addr = (chip * NI660X_CHIP_OFFSET) +
+			    ni_660x_reg_data[reg].offset;
 
 	if (ni_660x_reg_data[reg].size == 2)
 		return readw(dev->mmio + addr);

commit 80c67b37fc27a3fc0542916798242e4af8148f28
Author: H Hartley Sweeten <hsweeten@visionengravers.com>
Date:   Tue Mar 22 11:10:51 2016 -0700

    staging: comedi: ni_660x: remove spinlock 'dma_cfg_lock'
    
    This spinlock is only used to protect changes to the private data 'dma_cfg'.
    
    Before calling any function that would change the 'dma_cfg' the spinlock
    'mite_channel_lock' is also locked. That spinlock is not unlocked until
    after the 'dma_cfg' change.
    
    Remove the redundant spinlock.
    
    Signed-off-by: H Hartley Sweeten <hsweeten@visionengravers.com>
    Reviewed-by: Ian Abbott <abbotti@mev.co.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/drivers/ni_660x.c b/drivers/staging/comedi/drivers/ni_660x.c
index 85c793a458f8..3b57ce59273e 100644
--- a/drivers/staging/comedi/drivers/ni_660x.c
+++ b/drivers/staging/comedi/drivers/ni_660x.c
@@ -263,8 +263,6 @@ struct ni_660x_private {
 	spinlock_t mite_channel_lock;
 	/* prevents races between interrupt and comedi_poll */
 	spinlock_t interrupt_lock;
-	/* protects dma_cfg changes */
-	spinlock_t dma_cfg_lock;
 	unsigned int dma_cfg[NI660X_MAX_CHIPS];
 	unsigned int io_cfg[NI660X_NUM_PFI_CHANNELS];
 	u64 io_dir;
@@ -313,9 +311,7 @@ static inline void ni_660x_set_dma_channel(struct comedi_device *dev,
 {
 	struct ni_660x_private *devpriv = dev->private;
 	unsigned int chip = counter->chip_index;
-	unsigned long flags;
 
-	spin_lock_irqsave(&devpriv->dma_cfg_lock, flags);
 	devpriv->dma_cfg[chip] &= ~NI660X_DMA_CFG_SEL_MASK(mite_channel);
 	devpriv->dma_cfg[chip] |= NI660X_DMA_CFG_SEL(mite_channel,
 						     counter->counter_index);
@@ -323,7 +319,6 @@ static inline void ni_660x_set_dma_channel(struct comedi_device *dev,
 		      NI660X_DMA_CFG_RESET(mite_channel),
 		      NI660X_DMA_CFG);
 	mmiowb();
-	spin_unlock_irqrestore(&devpriv->dma_cfg_lock, flags);
 }
 
 static inline void ni_660x_unset_dma_channel(struct comedi_device *dev,
@@ -332,14 +327,11 @@ static inline void ni_660x_unset_dma_channel(struct comedi_device *dev,
 {
 	struct ni_660x_private *devpriv = dev->private;
 	unsigned int chip = counter->chip_index;
-	unsigned long flags;
 
-	spin_lock_irqsave(&devpriv->dma_cfg_lock, flags);
 	devpriv->dma_cfg[chip] &= ~NI660X_DMA_CFG_SEL_MASK(mite_channel);
 	devpriv->dma_cfg[chip] |= NI660X_DMA_CFG_SEL_NONE(mite_channel);
 	ni_660x_write(dev, chip, devpriv->dma_cfg[chip], NI660X_DMA_CFG);
 	mmiowb();
-	spin_unlock_irqrestore(&devpriv->dma_cfg_lock, flags);
 }
 
 static int ni_660x_request_mite_channel(struct comedi_device *dev,
@@ -500,7 +492,6 @@ static int ni_660x_allocate_private(struct comedi_device *dev)
 
 	spin_lock_init(&devpriv->mite_channel_lock);
 	spin_lock_init(&devpriv->interrupt_lock);
-	spin_lock_init(&devpriv->dma_cfg_lock);
 	for (i = 0; i < NI660X_NUM_PFI_CHANNELS; ++i)
 		devpriv->io_cfg[i] = NI_660X_PFI_OUTPUT_COUNTER;
 

commit 4f2c3b2077a9bb34c7b5afe31633a1f5b1ca80b4
Author: H Hartley Sweeten <hsweeten@visionengravers.com>
Date:   Tue Mar 22 11:10:50 2016 -0700

    staging: comedi: ni_660x: remove ni_gpct_to_660x_register[]
    
    enum ni_gpct_register and enum ni_660x_register now have a 1:1
    relationship for the NITIO_* registers. The static const array
    is no longer necessary to find the proper NI660X_* register for
    a given NITIO_*. Remove it and refactor the register read/write
    functions.
    
    Use the NITIO_* values to init the ni_660x_reg_data[] array and
    remove the unnecessary NI660X_* enum values.
    
    Signed-off-by: H Hartley Sweeten <hsweeten@visionengravers.com>
    Reviewed-by: Ian Abbott <abbotti@mev.co.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/drivers/ni_660x.c b/drivers/staging/comedi/drivers/ni_660x.c
index ad67ee5ec7ff..85c793a458f8 100644
--- a/drivers/staging/comedi/drivers/ni_660x.c
+++ b/drivers/staging/comedi/drivers/ni_660x.c
@@ -43,75 +43,7 @@
 
 /* See Register-Level Programmer Manual page 3.1 */
 enum ni_660x_register {
-	NI660X_G0_AUTO_INC,
-	NI660X_G1_AUTO_INC,
-	NI660X_G2_AUTO_INC,
-	NI660X_G3_AUTO_INC,
-	NI660X_G0_CMD,
-	NI660X_G1_CMD,
-	NI660X_G2_CMD,
-	NI660X_G3_CMD,
-	NI660X_G0_HW_SAVE,
-	NI660X_G1_HW_SAVE,
-	NI660X_G2_HW_SAVE,
-	NI660X_G3_HW_SAVE,
-	NI660X_G0_SW_SAVE,
-	NI660X_G1_SW_SAVE,
-	NI660X_G2_SW_SAVE,
-	NI660X_G3_SW_SAVE,
-	NI660X_G0_MODE,
-	NI660X_G1_MODE,
-	NI660X_G2_MODE,
-	NI660X_G3_MODE,
-	NI660X_G0_LOADA,
-	NI660X_G1_LOADA,
-	NI660X_G2_LOADA,
-	NI660X_G3_LOADA,
-	NI660X_G0_LOADB,
-	NI660X_G1_LOADB,
-	NI660X_G2_LOADB,
-	NI660X_G3_LOADB,
-	NI660X_G0_INPUT_SEL,
-	NI660X_G1_INPUT_SEL,
-	NI660X_G2_INPUT_SEL,
-	NI660X_G3_INPUT_SEL,
-	NI660X_G0_CNT_MODE,
-	NI660X_G1_CNT_MODE,
-	NI660X_G2_CNT_MODE,
-	NI660X_G3_CNT_MODE,
-	NI660X_G0_GATE2,
-	NI660X_G1_GATE2,
-	NI660X_G2_GATE2,
-	NI660X_G3_GATE2,
-	NI660X_G01_STATUS,
-	NI660X_G23_STATUS,
-	NI660X_G01_RESET,
-	NI660X_G23_RESET,
-	NI660X_G01_STATUS1,
-	NI660X_G23_STATUS1,
-	NI660X_G01_STATUS2,
-	NI660X_G23_STATUS2,
-	NI660X_G0_DMA_CFG,
-	NI660X_G1_DMA_CFG,
-	NI660X_G2_DMA_CFG,
-	NI660X_G3_DMA_CFG,
-	NI660X_G0_DMA_STATUS,
-	NI660X_G1_DMA_STATUS,
-	NI660X_G2_DMA_STATUS,
-	NI660X_G3_DMA_STATUS,
-	NI660X_G0_INT_ACK,
-	NI660X_G1_INT_ACK,
-	NI660X_G2_INT_ACK,
-	NI660X_G3_INT_ACK,
-	NI660X_G0_STATUS,
-	NI660X_G1_STATUS,
-	NI660X_G2_STATUS,
-	NI660X_G3_STATUS,
-	NI660X_G0_INT_ENA,
-	NI660X_G1_INT_ENA,
-	NI660X_G2_INT_ENA,
-	NI660X_G3_INT_ENA,
-
+	/* see enum ni_gpct_register */
 	NI660X_STC_DIO_PARALLEL_INPUT = NITIO_NUM_REGS,
 	NI660X_STC_DIO_OUTPUT,
 	NI660X_STC_DIO_CONTROL,
@@ -172,78 +104,78 @@ struct ni_660x_register_data {
 };
 
 static const struct ni_660x_register_data ni_660x_reg_data[NI660X_NUM_REGS] = {
-	[NI660X_G0_INT_ACK]		= { 0x004, 2 },	/* write */
-	[NI660X_G0_STATUS]		= { 0x004, 2 },	/* read */
-	[NI660X_G1_INT_ACK]		= { 0x006, 2 },	/* write */
-	[NI660X_G1_STATUS]		= { 0x006, 2 },	/* read */
-	[NI660X_G01_STATUS]		= { 0x008, 2 },	/* read */
-	[NI660X_G0_CMD]			= { 0x00c, 2 },	/* write */
+	[NITIO_G0_INT_ACK]		= { 0x004, 2 },	/* write */
+	[NITIO_G0_STATUS]		= { 0x004, 2 },	/* read */
+	[NITIO_G1_INT_ACK]		= { 0x006, 2 },	/* write */
+	[NITIO_G1_STATUS]		= { 0x006, 2 },	/* read */
+	[NITIO_G01_STATUS]		= { 0x008, 2 },	/* read */
+	[NITIO_G0_CMD]			= { 0x00c, 2 },	/* write */
 	[NI660X_STC_DIO_PARALLEL_INPUT]	= { 0x00e, 2 },	/* read */
-	[NI660X_G1_CMD]			= { 0x00e, 2 },	/* write */
-	[NI660X_G0_HW_SAVE]		= { 0x010, 4 },	/* read */
-	[NI660X_G1_HW_SAVE]		= { 0x014, 4 },	/* read */
+	[NITIO_G1_CMD]			= { 0x00e, 2 },	/* write */
+	[NITIO_G0_HW_SAVE]		= { 0x010, 4 },	/* read */
+	[NITIO_G1_HW_SAVE]		= { 0x014, 4 },	/* read */
 	[NI660X_STC_DIO_OUTPUT]		= { 0x014, 2 },	/* write */
 	[NI660X_STC_DIO_CONTROL]	= { 0x016, 2 },	/* write */
-	[NI660X_G0_SW_SAVE]		= { 0x018, 4 },	/* read */
-	[NI660X_G1_SW_SAVE]		= { 0x01c, 4 },	/* read */
-	[NI660X_G0_MODE]		= { 0x034, 2 },	/* write */
-	[NI660X_G01_STATUS1]		= { 0x036, 2 },	/* read */
-	[NI660X_G1_MODE]		= { 0x036, 2 },	/* write */
+	[NITIO_G0_SW_SAVE]		= { 0x018, 4 },	/* read */
+	[NITIO_G1_SW_SAVE]		= { 0x01c, 4 },	/* read */
+	[NITIO_G0_MODE]			= { 0x034, 2 },	/* write */
+	[NITIO_G01_STATUS1]		= { 0x036, 2 },	/* read */
+	[NITIO_G1_MODE]			= { 0x036, 2 },	/* write */
 	[NI660X_STC_DIO_SERIAL_INPUT]	= { 0x038, 2 },	/* read */
-	[NI660X_G0_LOADA]		= { 0x038, 4 },	/* write */
-	[NI660X_G01_STATUS2]		= { 0x03a, 2 },	/* read */
-	[NI660X_G0_LOADB]		= { 0x03c, 4 },	/* write */
-	[NI660X_G1_LOADA]		= { 0x040, 4 },	/* write */
-	[NI660X_G1_LOADB]		= { 0x044, 4 },	/* write */
-	[NI660X_G0_INPUT_SEL]		= { 0x048, 2 },	/* write */
-	[NI660X_G1_INPUT_SEL]		= { 0x04a, 2 },	/* write */
-	[NI660X_G0_AUTO_INC]		= { 0x088, 2 },	/* write */
-	[NI660X_G1_AUTO_INC]		= { 0x08a, 2 },	/* write */
-	[NI660X_G01_RESET]		= { 0x090, 2 },	/* write */
-	[NI660X_G0_INT_ENA]		= { 0x092, 2 },	/* write */
-	[NI660X_G1_INT_ENA]		= { 0x096, 2 },	/* write */
-	[NI660X_G0_CNT_MODE]		= { 0x0b0, 2 },	/* write */
-	[NI660X_G1_CNT_MODE]		= { 0x0b2, 2 },	/* write */
-	[NI660X_G0_GATE2]		= { 0x0b4, 2 },	/* write */
-	[NI660X_G1_GATE2]		= { 0x0b6, 2 },	/* write */
-	[NI660X_G0_DMA_CFG]		= { 0x0b8, 2 },	/* write */
-	[NI660X_G0_DMA_STATUS]		= { 0x0b8, 2 },	/* read */
-	[NI660X_G1_DMA_CFG]		= { 0x0ba, 2 },	/* write */
-	[NI660X_G1_DMA_STATUS]		= { 0x0ba, 2 },	/* read */
-	[NI660X_G2_INT_ACK]		= { 0x104, 2 },	/* write */
-	[NI660X_G2_STATUS]		= { 0x104, 2 },	/* read */
-	[NI660X_G3_INT_ACK]		= { 0x106, 2 },	/* write */
-	[NI660X_G3_STATUS]		= { 0x106, 2 },	/* read */
-	[NI660X_G23_STATUS]		= { 0x108, 2 },	/* read */
-	[NI660X_G2_CMD]			= { 0x10c, 2 },	/* write */
-	[NI660X_G3_CMD]			= { 0x10e, 2 },	/* write */
-	[NI660X_G2_HW_SAVE]		= { 0x110, 4 },	/* read */
-	[NI660X_G3_HW_SAVE]		= { 0x114, 4 },	/* read */
-	[NI660X_G2_SW_SAVE]		= { 0x118, 4 },	/* read */
-	[NI660X_G3_SW_SAVE]		= { 0x11c, 4 },	/* read */
-	[NI660X_G2_MODE]		= { 0x134, 2 },	/* write */
-	[NI660X_G23_STATUS1]		= { 0x136, 2 },	/* read */
-	[NI660X_G3_MODE]		= { 0x136, 2 },	/* write */
-	[NI660X_G2_LOADA]		= { 0x138, 4 },	/* write */
-	[NI660X_G23_STATUS2]		= { 0x13a, 2 },	/* read */
-	[NI660X_G2_LOADB]		= { 0x13c, 4 },	/* write */
-	[NI660X_G3_LOADA]		= { 0x140, 4 },	/* write */
-	[NI660X_G3_LOADB]		= { 0x144, 4 },	/* write */
-	[NI660X_G2_INPUT_SEL]		= { 0x148, 2 },	/* write */
-	[NI660X_G3_INPUT_SEL]		= { 0x14a, 2 },	/* write */
-	[NI660X_G2_AUTO_INC]		= { 0x188, 2 },	/* write */
-	[NI660X_G3_AUTO_INC]		= { 0x18a, 2 },	/* write */
-	[NI660X_G23_RESET]		= { 0x190, 2 },	/* write */
-	[NI660X_G2_INT_ENA]		= { 0x192, 2 },	/* write */
-	[NI660X_G3_INT_ENA]		= { 0x196, 2 },	/* write */
-	[NI660X_G2_CNT_MODE]		= { 0x1b0, 2 },	/* write */
-	[NI660X_G3_CNT_MODE]		= { 0x1b2, 2 },	/* write */
-	[NI660X_G3_GATE2]		= { 0x1b6, 2 },	/* write */
-	[NI660X_G2_GATE2]		= { 0x1b4, 2 },	/* write */
-	[NI660X_G2_DMA_CFG]		= { 0x1b8, 2 },	/* write */
-	[NI660X_G2_DMA_STATUS]		= { 0x1b8, 2 },	/* read */
-	[NI660X_G3_DMA_CFG]		= { 0x1ba, 2 },	/* write */
-	[NI660X_G3_DMA_STATUS]		= { 0x1ba, 2 },	/* read */
+	[NITIO_G0_LOADA]		= { 0x038, 4 },	/* write */
+	[NITIO_G01_STATUS2]		= { 0x03a, 2 },	/* read */
+	[NITIO_G0_LOADB]		= { 0x03c, 4 },	/* write */
+	[NITIO_G1_LOADA]		= { 0x040, 4 },	/* write */
+	[NITIO_G1_LOADB]		= { 0x044, 4 },	/* write */
+	[NITIO_G0_INPUT_SEL]		= { 0x048, 2 },	/* write */
+	[NITIO_G1_INPUT_SEL]		= { 0x04a, 2 },	/* write */
+	[NITIO_G0_AUTO_INC]		= { 0x088, 2 },	/* write */
+	[NITIO_G1_AUTO_INC]		= { 0x08a, 2 },	/* write */
+	[NITIO_G01_RESET]		= { 0x090, 2 },	/* write */
+	[NITIO_G0_INT_ENA]		= { 0x092, 2 },	/* write */
+	[NITIO_G1_INT_ENA]		= { 0x096, 2 },	/* write */
+	[NITIO_G0_CNT_MODE]		= { 0x0b0, 2 },	/* write */
+	[NITIO_G1_CNT_MODE]		= { 0x0b2, 2 },	/* write */
+	[NITIO_G0_GATE2]		= { 0x0b4, 2 },	/* write */
+	[NITIO_G1_GATE2]		= { 0x0b6, 2 },	/* write */
+	[NITIO_G0_DMA_CFG]		= { 0x0b8, 2 },	/* write */
+	[NITIO_G0_DMA_STATUS]		= { 0x0b8, 2 },	/* read */
+	[NITIO_G1_DMA_CFG]		= { 0x0ba, 2 },	/* write */
+	[NITIO_G1_DMA_STATUS]		= { 0x0ba, 2 },	/* read */
+	[NITIO_G2_INT_ACK]		= { 0x104, 2 },	/* write */
+	[NITIO_G2_STATUS]		= { 0x104, 2 },	/* read */
+	[NITIO_G3_INT_ACK]		= { 0x106, 2 },	/* write */
+	[NITIO_G3_STATUS]		= { 0x106, 2 },	/* read */
+	[NITIO_G23_STATUS]		= { 0x108, 2 },	/* read */
+	[NITIO_G2_CMD]			= { 0x10c, 2 },	/* write */
+	[NITIO_G3_CMD]			= { 0x10e, 2 },	/* write */
+	[NITIO_G2_HW_SAVE]		= { 0x110, 4 },	/* read */
+	[NITIO_G3_HW_SAVE]		= { 0x114, 4 },	/* read */
+	[NITIO_G2_SW_SAVE]		= { 0x118, 4 },	/* read */
+	[NITIO_G3_SW_SAVE]		= { 0x11c, 4 },	/* read */
+	[NITIO_G2_MODE]			= { 0x134, 2 },	/* write */
+	[NITIO_G23_STATUS1]		= { 0x136, 2 },	/* read */
+	[NITIO_G3_MODE]			= { 0x136, 2 },	/* write */
+	[NITIO_G2_LOADA]		= { 0x138, 4 },	/* write */
+	[NITIO_G23_STATUS2]		= { 0x13a, 2 },	/* read */
+	[NITIO_G2_LOADB]		= { 0x13c, 4 },	/* write */
+	[NITIO_G3_LOADA]		= { 0x140, 4 },	/* write */
+	[NITIO_G3_LOADB]		= { 0x144, 4 },	/* write */
+	[NITIO_G2_INPUT_SEL]		= { 0x148, 2 },	/* write */
+	[NITIO_G3_INPUT_SEL]		= { 0x14a, 2 },	/* write */
+	[NITIO_G2_AUTO_INC]		= { 0x188, 2 },	/* write */
+	[NITIO_G3_AUTO_INC]		= { 0x18a, 2 },	/* write */
+	[NITIO_G23_RESET]		= { 0x190, 2 },	/* write */
+	[NITIO_G2_INT_ENA]		= { 0x192, 2 },	/* write */
+	[NITIO_G3_INT_ENA]		= { 0x196, 2 },	/* write */
+	[NITIO_G2_CNT_MODE]		= { 0x1b0, 2 },	/* write */
+	[NITIO_G3_CNT_MODE]		= { 0x1b2, 2 },	/* write */
+	[NITIO_G2_GATE2]		= { 0x1b4, 2 },	/* write */
+	[NITIO_G3_GATE2]		= { 0x1b6, 2 },	/* write */
+	[NITIO_G2_DMA_CFG]		= { 0x1b8, 2 },	/* write */
+	[NITIO_G2_DMA_STATUS]		= { 0x1b8, 2 },	/* read */
+	[NITIO_G3_DMA_CFG]		= { 0x1ba, 2 },	/* write */
+	[NITIO_G3_DMA_STATUS]		= { 0x1ba, 2 },	/* read */
 	[NI660X_DIO32_INPUT]		= { 0x414, 4 },	/* read */
 	[NI660X_DIO32_OUTPUT]		= { 0x510, 4 },	/* write */
 	[NI660X_CLK_CFG]		= { 0x73c, 4 },	/* write */
@@ -272,77 +204,6 @@ static const struct ni_660x_register_data ni_660x_reg_data[NI660X_NUM_REGS] = {
 	[NI660X_IO_CFG_38_39]		= { 0x7a2, 2 }	/* read/write */
 };
 
-static const enum ni_660x_register ni_gpct_to_660x_register[] = {
-	[NITIO_G0_AUTO_INC]		= NI660X_G0_AUTO_INC,
-	[NITIO_G1_AUTO_INC]		= NI660X_G1_AUTO_INC,
-	[NITIO_G2_AUTO_INC]		= NI660X_G2_AUTO_INC,
-	[NITIO_G3_AUTO_INC]		= NI660X_G3_AUTO_INC,
-	[NITIO_G0_CMD]			= NI660X_G0_CMD,
-	[NITIO_G1_CMD]			= NI660X_G1_CMD,
-	[NITIO_G2_CMD]			= NI660X_G2_CMD,
-	[NITIO_G3_CMD]			= NI660X_G3_CMD,
-	[NITIO_G0_HW_SAVE]		= NI660X_G0_HW_SAVE,
-	[NITIO_G1_HW_SAVE]		= NI660X_G1_HW_SAVE,
-	[NITIO_G2_HW_SAVE]		= NI660X_G2_HW_SAVE,
-	[NITIO_G3_HW_SAVE]		= NI660X_G3_HW_SAVE,
-	[NITIO_G0_SW_SAVE]		= NI660X_G0_SW_SAVE,
-	[NITIO_G1_SW_SAVE]		= NI660X_G1_SW_SAVE,
-	[NITIO_G2_SW_SAVE]		= NI660X_G2_SW_SAVE,
-	[NITIO_G3_SW_SAVE]		= NI660X_G3_SW_SAVE,
-	[NITIO_G0_MODE]			= NI660X_G0_MODE,
-	[NITIO_G1_MODE]			= NI660X_G1_MODE,
-	[NITIO_G2_MODE]			= NI660X_G2_MODE,
-	[NITIO_G3_MODE]			= NI660X_G3_MODE,
-	[NITIO_G0_LOADA]		= NI660X_G0_LOADA,
-	[NITIO_G1_LOADA]		= NI660X_G1_LOADA,
-	[NITIO_G2_LOADA]		= NI660X_G2_LOADA,
-	[NITIO_G3_LOADA]		= NI660X_G3_LOADA,
-	[NITIO_G0_LOADB]		= NI660X_G0_LOADB,
-	[NITIO_G1_LOADB]		= NI660X_G1_LOADB,
-	[NITIO_G2_LOADB]		= NI660X_G2_LOADB,
-	[NITIO_G3_LOADB]		= NI660X_G3_LOADB,
-	[NITIO_G0_INPUT_SEL]		= NI660X_G0_INPUT_SEL,
-	[NITIO_G1_INPUT_SEL]		= NI660X_G1_INPUT_SEL,
-	[NITIO_G2_INPUT_SEL]		= NI660X_G2_INPUT_SEL,
-	[NITIO_G3_INPUT_SEL]		= NI660X_G3_INPUT_SEL,
-	[NITIO_G0_CNT_MODE]		= NI660X_G0_CNT_MODE,
-	[NITIO_G1_CNT_MODE]		= NI660X_G1_CNT_MODE,
-	[NITIO_G2_CNT_MODE]		= NI660X_G2_CNT_MODE,
-	[NITIO_G3_CNT_MODE]		= NI660X_G3_CNT_MODE,
-	[NITIO_G0_GATE2]		= NI660X_G0_GATE2,
-	[NITIO_G1_GATE2]		= NI660X_G1_GATE2,
-	[NITIO_G2_GATE2]		= NI660X_G2_GATE2,
-	[NITIO_G3_GATE2]		= NI660X_G3_GATE2,
-	[NITIO_G01_STATUS]		= NI660X_G01_STATUS,
-	[NITIO_G23_STATUS]		= NI660X_G23_STATUS,
-	[NITIO_G01_RESET]		= NI660X_G01_RESET,
-	[NITIO_G23_RESET]		= NI660X_G23_RESET,
-	[NITIO_G01_STATUS1]		= NI660X_G01_STATUS1,
-	[NITIO_G23_STATUS1]		= NI660X_G23_STATUS1,
-	[NITIO_G01_STATUS2]		= NI660X_G01_STATUS2,
-	[NITIO_G23_STATUS2]		= NI660X_G23_STATUS2,
-	[NITIO_G0_DMA_CFG]		= NI660X_G0_DMA_CFG,
-	[NITIO_G1_DMA_CFG]		= NI660X_G1_DMA_CFG,
-	[NITIO_G2_DMA_CFG]		= NI660X_G2_DMA_CFG,
-	[NITIO_G3_DMA_CFG]		= NI660X_G3_DMA_CFG,
-	[NITIO_G0_DMA_STATUS]		= NI660X_G0_DMA_STATUS,
-	[NITIO_G1_DMA_STATUS]		= NI660X_G1_DMA_STATUS,
-	[NITIO_G2_DMA_STATUS]		= NI660X_G2_DMA_STATUS,
-	[NITIO_G3_DMA_STATUS]		= NI660X_G3_DMA_STATUS,
-	[NITIO_G0_INT_ACK]		= NI660X_G0_INT_ACK,
-	[NITIO_G1_INT_ACK]		= NI660X_G1_INT_ACK,
-	[NITIO_G2_INT_ACK]		= NI660X_G2_INT_ACK,
-	[NITIO_G3_INT_ACK]		= NI660X_G3_INT_ACK,
-	[NITIO_G0_STATUS]		= NI660X_G0_STATUS,
-	[NITIO_G1_STATUS]		= NI660X_G1_STATUS,
-	[NITIO_G2_STATUS]		= NI660X_G2_STATUS,
-	[NITIO_G3_STATUS]		= NI660X_G3_STATUS,
-	[NITIO_G0_INT_ENA]		= NI660X_G0_INT_ENA,
-	[NITIO_G1_INT_ENA]		= NI660X_G1_INT_ENA,
-	[NITIO_G2_INT_ENA]		= NI660X_G2_INT_ENA,
-	[NITIO_G3_INT_ENA]		= NI660X_G3_INT_ENA,
-};
-
 /* Offset of the GPCT chips from the base-address of the card */
 /* First chip is at base-address + 0x00, etc. */
 static const unsigned GPCT_OFFSET[2] = { 0x0, 0x800 };
@@ -409,9 +270,8 @@ struct ni_660x_private {
 	u64 io_dir;
 };
 
-static void ni_660x_write(struct comedi_device *dev,
-			  unsigned int chip, unsigned int bits,
-			  enum ni_660x_register reg)
+static void ni_660x_write(struct comedi_device *dev, unsigned int chip,
+			  unsigned int bits, unsigned int reg)
 {
 	unsigned int addr = GPCT_OFFSET[chip] + ni_660x_reg_data[reg].offset;
 
@@ -422,8 +282,7 @@ static void ni_660x_write(struct comedi_device *dev,
 }
 
 static unsigned int ni_660x_read(struct comedi_device *dev,
-				 unsigned int chip,
-				 enum ni_660x_register reg)
+				 unsigned int chip, unsigned int reg)
 {
 	unsigned int addr = GPCT_OFFSET[chip] + ni_660x_reg_data[reg].offset;
 
@@ -436,34 +295,16 @@ static void ni_660x_gpct_write(struct ni_gpct *counter, unsigned int bits,
 			       enum ni_gpct_register reg)
 {
 	struct comedi_device *dev = counter->counter_dev->dev;
-	enum ni_660x_register ni_660x_register;
-
-	if (reg < ARRAY_SIZE(ni_gpct_to_660x_register)) {
-		ni_660x_register = ni_gpct_to_660x_register[reg];
-	} else {
-		dev_warn(dev->class_dev, "%s: unhandled register=0x%x\n",
-			 __func__, reg);
-		return;
-	}
 
-	ni_660x_write(dev, counter->chip_index, bits, ni_660x_register);
+	ni_660x_write(dev, counter->chip_index, bits, reg);
 }
 
 static unsigned int ni_660x_gpct_read(struct ni_gpct *counter,
 				      enum ni_gpct_register reg)
 {
 	struct comedi_device *dev = counter->counter_dev->dev;
-	enum ni_660x_register ni_660x_register;
-
-	if (reg < ARRAY_SIZE(ni_gpct_to_660x_register)) {
-		ni_660x_register = ni_gpct_to_660x_register[reg];
-	} else {
-		dev_warn(dev->class_dev, "%s: unhandled register=0x%x\n",
-			 __func__, reg);
-		return 0;
-	}
 
-	return ni_660x_read(dev, counter->chip_index, ni_660x_register);
+	return ni_660x_read(dev, counter->chip_index, reg);
 }
 
 static inline void ni_660x_set_dma_channel(struct comedi_device *dev,

commit 242311d1a9e5cebde39855e064dcc4ac0dabde93
Author: H Hartley Sweeten <hsweeten@visionengravers.com>
Date:   Tue Mar 22 11:10:49 2016 -0700

    staging: comedi: ni_660x: sort enum ni_660x_register
    
    Sort this enum so that it has a 1:1 relationship with the ni_tio.h
    enum ni_gpct_register.
    
    Signed-off-by: H Hartley Sweeten <hsweeten@visionengravers.com>
    Reviewed-by: Ian Abbott <abbotti@mev.co.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/drivers/ni_660x.c b/drivers/staging/comedi/drivers/ni_660x.c
index 1cca9ea5cdd2..ad67ee5ec7ff 100644
--- a/drivers/staging/comedi/drivers/ni_660x.c
+++ b/drivers/staging/comedi/drivers/ni_660x.c
@@ -43,78 +43,79 @@
 
 /* See Register-Level Programmer Manual page 3.1 */
 enum ni_660x_register {
-	NI660X_G0_INT_ACK,
-	NI660X_G0_STATUS,
-	NI660X_G1_INT_ACK,
-	NI660X_G1_STATUS,
-	NI660X_G01_STATUS,
+	NI660X_G0_AUTO_INC,
+	NI660X_G1_AUTO_INC,
+	NI660X_G2_AUTO_INC,
+	NI660X_G3_AUTO_INC,
 	NI660X_G0_CMD,
-	NI660X_STC_DIO_PARALLEL_INPUT,
 	NI660X_G1_CMD,
+	NI660X_G2_CMD,
+	NI660X_G3_CMD,
 	NI660X_G0_HW_SAVE,
 	NI660X_G1_HW_SAVE,
-	NI660X_STC_DIO_OUTPUT,
-	NI660X_STC_DIO_CONTROL,
+	NI660X_G2_HW_SAVE,
+	NI660X_G3_HW_SAVE,
 	NI660X_G0_SW_SAVE,
 	NI660X_G1_SW_SAVE,
+	NI660X_G2_SW_SAVE,
+	NI660X_G3_SW_SAVE,
 	NI660X_G0_MODE,
-	NI660X_G01_STATUS1,
 	NI660X_G1_MODE,
-	NI660X_STC_DIO_SERIAL_INPUT,
+	NI660X_G2_MODE,
+	NI660X_G3_MODE,
 	NI660X_G0_LOADA,
-	NI660X_G01_STATUS2,
-	NI660X_G0_LOADB,
 	NI660X_G1_LOADA,
+	NI660X_G2_LOADA,
+	NI660X_G3_LOADA,
+	NI660X_G0_LOADB,
 	NI660X_G1_LOADB,
+	NI660X_G2_LOADB,
+	NI660X_G3_LOADB,
 	NI660X_G0_INPUT_SEL,
 	NI660X_G1_INPUT_SEL,
-	NI660X_G0_AUTO_INC,
-	NI660X_G1_AUTO_INC,
-	NI660X_G01_RESET,
-	NI660X_G0_INT_ENA,
-	NI660X_G1_INT_ENA,
+	NI660X_G2_INPUT_SEL,
+	NI660X_G3_INPUT_SEL,
 	NI660X_G0_CNT_MODE,
 	NI660X_G1_CNT_MODE,
+	NI660X_G2_CNT_MODE,
+	NI660X_G3_CNT_MODE,
 	NI660X_G0_GATE2,
 	NI660X_G1_GATE2,
+	NI660X_G2_GATE2,
+	NI660X_G3_GATE2,
+	NI660X_G01_STATUS,
+	NI660X_G23_STATUS,
+	NI660X_G01_RESET,
+	NI660X_G23_RESET,
+	NI660X_G01_STATUS1,
+	NI660X_G23_STATUS1,
+	NI660X_G01_STATUS2,
+	NI660X_G23_STATUS2,
 	NI660X_G0_DMA_CFG,
-	NI660X_G0_DMA_STATUS,
 	NI660X_G1_DMA_CFG,
+	NI660X_G2_DMA_CFG,
+	NI660X_G3_DMA_CFG,
+	NI660X_G0_DMA_STATUS,
 	NI660X_G1_DMA_STATUS,
+	NI660X_G2_DMA_STATUS,
+	NI660X_G3_DMA_STATUS,
+	NI660X_G0_INT_ACK,
+	NI660X_G1_INT_ACK,
 	NI660X_G2_INT_ACK,
-	NI660X_G2_STATUS,
 	NI660X_G3_INT_ACK,
+	NI660X_G0_STATUS,
+	NI660X_G1_STATUS,
+	NI660X_G2_STATUS,
 	NI660X_G3_STATUS,
-	NI660X_G23_STATUS,
-	NI660X_G2_CMD,
-	NI660X_G3_CMD,
-	NI660X_G2_HW_SAVE,
-	NI660X_G3_HW_SAVE,
-	NI660X_G2_SW_SAVE,
-	NI660X_G3_SW_SAVE,
-	NI660X_G2_MODE,
-	NI660X_G23_STATUS1,
-	NI660X_G3_MODE,
-	NI660X_G2_LOADA,
-	NI660X_G23_STATUS2,
-	NI660X_G2_LOADB,
-	NI660X_G3_LOADA,
-	NI660X_G3_LOADB,
-	NI660X_G2_INPUT_SEL,
-	NI660X_G3_INPUT_SEL,
-	NI660X_G2_AUTO_INC,
-	NI660X_G3_AUTO_INC,
-	NI660X_G23_RESET,
+	NI660X_G0_INT_ENA,
+	NI660X_G1_INT_ENA,
 	NI660X_G2_INT_ENA,
 	NI660X_G3_INT_ENA,
-	NI660X_G2_CNT_MODE,
-	NI660X_G3_CNT_MODE,
-	NI660X_G3_GATE2,
-	NI660X_G2_GATE2,
-	NI660X_G2_DMA_CFG,
-	NI660X_G2_DMA_STATUS,
-	NI660X_G3_DMA_CFG,
-	NI660X_G3_DMA_STATUS,
+
+	NI660X_STC_DIO_PARALLEL_INPUT = NITIO_NUM_REGS,
+	NI660X_STC_DIO_OUTPUT,
+	NI660X_STC_DIO_CONTROL,
+	NI660X_STC_DIO_SERIAL_INPUT,
 	NI660X_DIO32_INPUT,
 	NI660X_DIO32_OUTPUT,
 	NI660X_CLK_CFG,

commit 515b5e6b8afdd32a3b528a331f23b852fe083c26
Author: H Hartley Sweeten <hsweeten@visionengravers.com>
Date:   Tue Mar 22 11:10:48 2016 -0700

    staging: comedi: ni_660x: remove inline mite_ring()
    
    This fuction just returns a pointer from the private data. The name
    might provide some confusion since it appears to be an exported
    function from the mite driver.
    
    Just remove it and get the pointer directly where needed.
    
    Signed-off-by: H Hartley Sweeten <hsweeten@visionengravers.com>
    Reviewed-by: Ian Abbott <abbotti@mev.co.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/drivers/ni_660x.c b/drivers/staging/comedi/drivers/ni_660x.c
index cf25892d92b2..1cca9ea5cdd2 100644
--- a/drivers/staging/comedi/drivers/ni_660x.c
+++ b/drivers/staging/comedi/drivers/ni_660x.c
@@ -465,16 +465,6 @@ static unsigned int ni_660x_gpct_read(struct ni_gpct *counter,
 	return ni_660x_read(dev, counter->chip_index, ni_660x_register);
 }
 
-static inline struct mite_dma_descriptor_ring *mite_ring(struct ni_660x_private
-							 *priv,
-							 struct ni_gpct
-							 *counter)
-{
-	unsigned int chip = counter->chip_index;
-
-	return priv->mite_rings[chip][counter->counter_index];
-}
-
 static inline void ni_660x_set_dma_channel(struct comedi_device *dev,
 					   unsigned int mite_channel,
 					   struct ni_gpct *counter)
@@ -515,12 +505,13 @@ static int ni_660x_request_mite_channel(struct comedi_device *dev,
 					enum comedi_io_direction direction)
 {
 	struct ni_660x_private *devpriv = dev->private;
-	unsigned long flags;
+	struct mite_dma_descriptor_ring *ring;
 	struct mite_channel *mite_chan;
+	unsigned long flags;
 
 	spin_lock_irqsave(&devpriv->mite_channel_lock, flags);
-	mite_chan = mite_request_channel(devpriv->mite,
-					 mite_ring(devpriv, counter));
+	ring = devpriv->mite_rings[counter->chip_index][counter->counter_index];
+	mite_chan = mite_request_channel(devpriv->mite, ring);
 	if (!mite_chan) {
 		spin_unlock_irqrestore(&devpriv->mite_channel_lock, flags);
 		dev_err(dev->class_dev,
@@ -645,9 +636,11 @@ static int ni_660x_buf_change(struct comedi_device *dev,
 {
 	struct ni_660x_private *devpriv = dev->private;
 	struct ni_gpct *counter = s->private;
+	struct mite_dma_descriptor_ring *ring;
 	int ret;
 
-	ret = mite_buf_change(mite_ring(devpriv, counter), s);
+	ring = devpriv->mite_rings[counter->chip_index][counter->counter_index];
+	ret = mite_buf_change(ring, s);
 	if (ret < 0)
 		return ret;
 

commit 34b7f1f8194da6600eda6bb7c26659de19047a39
Author: H Hartley Sweeten <hsweeten@visionengravers.com>
Date:   Tue Mar 22 11:10:47 2016 -0700

    staging: comedi: ni_660x: default DIO channels with subdevice init
    
    For aesthetics, move the initialization of the default routing for the
    DIO channels so it happens when the subdevice is initialized.
    
    Signed-off-by: H Hartley Sweeten <hsweeten@visionengravers.com>
    Reviewed-by: Ian Abbott <abbotti@mev.co.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/drivers/ni_660x.c b/drivers/staging/comedi/drivers/ni_660x.c
index 5969723b6167..cf25892d92b2 100644
--- a/drivers/staging/comedi/drivers/ni_660x.c
+++ b/drivers/staging/comedi/drivers/ni_660x.c
@@ -996,6 +996,19 @@ static int ni_660x_auto_attach(struct comedi_device *dev,
 	s->insn_bits	= ni_660x_dio_insn_bits;
 	s->insn_config	= ni_660x_dio_insn_config;
 
+	 /*
+	  * Default the DIO channels as:
+	  *   chan 0-7:  DIO inputs
+	  *   chan 8-39: counter signal inputs
+	  */
+	for (i = 0; i < s->n_chan; ++i) {
+		unsigned int source = (i < 8) ? NI_660X_PFI_OUTPUT_DIO
+					      : NI_660X_PFI_OUTPUT_COUNTER;
+
+		ni_660x_set_pfi_routing(dev, i, source);
+		ni_660x_select_pfi_output(dev, i, 0);		/* high-z */
+	}
+
 	/* Counter subdevices (4 NI TIO General Purpose Counters per chip) */
 	for (i = 0; i < NI660X_MAX_COUNTERS; ++i) {
 		s = &dev->subdevices[subdev++];
@@ -1028,20 +1041,6 @@ static int ni_660x_auto_attach(struct comedi_device *dev,
 		}
 	}
 
-	 /*
-	  * Default the DIO channels as:
-	  *   chan 0-7:  DIO inputs
-	  *   chan 8-39: counter signal inputs
-	  */
-	for (i = 0; i < NI660X_NUM_PFI_CHANNELS; ++i) {
-		if (i < 8)
-			ni_660x_set_pfi_routing(dev, i, NI_660X_PFI_OUTPUT_DIO);
-		else
-			ni_660x_set_pfi_routing(dev, i,
-						NI_660X_PFI_OUTPUT_COUNTER);
-		ni_660x_select_pfi_output(dev, i, 0);		/* high-z */
-	}
-
 	/*
 	 * To be safe, set counterswap bits on tio chips after all the counter
 	 * outputs have been set to high impedance mode.

commit 90ad57be6be10e7084ca677d6eddfba612b55a62
Author: H Hartley Sweeten <hsweeten@visionengravers.com>
Date:   Tue Mar 22 11:10:46 2016 -0700

    staging: comedi: ni_660x: initialize the counter with the subdevice init
    
    Remove the extra for loop and just initialize the counter as the subdevices
    are created.
    
    Signed-off-by: H Hartley Sweeten <hsweeten@visionengravers.com>
    Reviewed-by: Ian Abbott <abbotti@mev.co.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/drivers/ni_660x.c b/drivers/staging/comedi/drivers/ni_660x.c
index 636630380100..5969723b6167 100644
--- a/drivers/staging/comedi/drivers/ni_660x.c
+++ b/drivers/staging/comedi/drivers/ni_660x.c
@@ -1021,14 +1021,13 @@ static int ni_660x_auto_attach(struct comedi_device *dev,
 			s->buf_change	= ni_660x_buf_change;
 			s->async_dma_dir = DMA_BIDIRECTIONAL;
 			s->private	= counter;
+
+			ni_tio_init_counter(counter);
 		} else {
 			s->type		= COMEDI_SUBD_UNUSED;
 		}
 	}
 
-	for (i = 0; i < n_counters; ++i)
-		ni_tio_init_counter(&gpct_dev->counters[i]);
-
 	 /*
 	  * Default the DIO channels as:
 	  *   chan 0-7:  DIO inputs

commit f229594a327720c0761e7307a5472aea780268c3
Author: H Hartley Sweeten <hsweeten@visionengravers.com>
Date:   Tue Mar 22 11:10:45 2016 -0700

    staging: comedi: ni_660x: allocate counters early in (*auto_attach)
    
    The ni_gpct_device_construct() could fail allocating the memory for
    device and its counters. For aesthetics, call the function before
    initializing the subdevices.
    
    Signed-off-by: H Hartley Sweeten <hsweeten@visionengravers.com>
    Reviewed-by: Ian Abbott <abbotti@mev.co.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/drivers/ni_660x.c b/drivers/staging/comedi/drivers/ni_660x.c
index afe62bf2de8b..636630380100 100644
--- a/drivers/staging/comedi/drivers/ni_660x.c
+++ b/drivers/staging/comedi/drivers/ni_660x.c
@@ -914,6 +914,16 @@ static int ni_660x_auto_attach(struct comedi_device *dev,
 
 	ni_660x_init_tio_chips(dev, board->n_chips);
 
+	n_counters = board->n_chips * NI660X_COUNTERS_PER_CHIP;
+	gpct_dev = ni_gpct_device_construct(dev,
+					    ni_660x_gpct_write,
+					    ni_660x_gpct_read,
+					    ni_gpct_variant_660x,
+					    n_counters);
+	if (!gpct_dev)
+		return -ENOMEM;
+	devpriv->counter_dev = gpct_dev;
+
 	ret = comedi_alloc_subdevices(dev, 2 + NI660X_MAX_COUNTERS);
 	if (ret)
 		return ret;
@@ -986,16 +996,6 @@ static int ni_660x_auto_attach(struct comedi_device *dev,
 	s->insn_bits	= ni_660x_dio_insn_bits;
 	s->insn_config	= ni_660x_dio_insn_config;
 
-	n_counters = board->n_chips * NI660X_COUNTERS_PER_CHIP;
-	gpct_dev = ni_gpct_device_construct(dev,
-					    ni_660x_gpct_write,
-					    ni_660x_gpct_read,
-					    ni_gpct_variant_660x,
-					    n_counters);
-	if (!gpct_dev)
-		return -ENOMEM;
-	devpriv->counter_dev = gpct_dev;
-
 	/* Counter subdevices (4 NI TIO General Purpose Counters per chip) */
 	for (i = 0; i < NI660X_MAX_COUNTERS; ++i) {
 		s = &dev->subdevices[subdev++];

commit 2363cbf073225537016aceb6bf122bbee6a0caa0
Author: H Hartley Sweeten <hsweeten@visionengravers.com>
Date:   Tue Mar 22 11:10:44 2016 -0700

    staging: comedi: ni_660x: init TIO chips before subdevice init
    
    For aesthetics, initialize the TIO chips before the subdevices are
    allocated and initialized.
    
    Refactor the function to initialize all the TIO chips and move it
    to a better place in the driver.
    
    Signed-off-by: H Hartley Sweeten <hsweeten@visionengravers.com>
    Reviewed-by: Ian Abbott <abbotti@mev.co.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/drivers/ni_660x.c b/drivers/staging/comedi/drivers/ni_660x.c
index c71dae8da804..afe62bf2de8b 100644
--- a/drivers/staging/comedi/drivers/ni_660x.c
+++ b/drivers/staging/comedi/drivers/ni_660x.c
@@ -703,20 +703,6 @@ static void ni_660x_free_mite_rings(struct comedi_device *dev)
 	}
 }
 
-static void init_tio_chip(struct comedi_device *dev, int chipset)
-{
-	struct ni_660x_private *devpriv = dev->private;
-	unsigned int i;
-
-	/*  init dma configuration register */
-	devpriv->dma_cfg[chipset] = 0;
-	for (i = 0; i < NI660X_MAX_DMA_CHANNEL; ++i)
-		devpriv->dma_cfg[chipset] |= NI660X_DMA_CFG_SEL_NONE(i);
-	ni_660x_write(dev, chipset, devpriv->dma_cfg[chipset], NI660X_DMA_CFG);
-	for (i = 0; i < NI660X_NUM_PFI_CHANNELS; ++i)
-		ni_660x_write(dev, chipset, 0, NI660X_IO_CFG(i));
-}
-
 static int ni_660x_dio_insn_bits(struct comedi_device *dev,
 				 struct comedi_subdevice *s,
 				 struct comedi_insn *insn,
@@ -857,6 +843,33 @@ static int ni_660x_dio_insn_config(struct comedi_device *dev,
 	return insn->n;
 }
 
+static void ni_660x_init_tio_chips(struct comedi_device *dev,
+				   unsigned int n_chips)
+{
+	struct ni_660x_private *devpriv = dev->private;
+	unsigned int chip;
+	unsigned int chan;
+
+	/*
+	 * We use the ioconfig registers to control dio direction, so zero
+	 * output enables in stc dio control reg.
+	 */
+	ni_660x_write(dev, 0, 0, NI660X_STC_DIO_CONTROL);
+
+	for (chip = 0; chip < n_chips; ++chip) {
+		/* init dma configuration register */
+		devpriv->dma_cfg[chip] = 0;
+		for (chan = 0; chan < NI660X_MAX_DMA_CHANNEL; ++chan)
+			devpriv->dma_cfg[chip] |= NI660X_DMA_CFG_SEL_NONE(chan);
+		ni_660x_write(dev, chip, devpriv->dma_cfg[chip],
+			      NI660X_DMA_CFG);
+
+		/* init ioconfig registers */
+		for (chan = 0; chan < NI660X_NUM_PFI_CHANNELS; ++chan)
+			ni_660x_write(dev, chip, 0, NI660X_IO_CFG(chan));
+	}
+}
+
 static int ni_660x_auto_attach(struct comedi_device *dev,
 			       unsigned long context)
 {
@@ -899,6 +912,8 @@ static int ni_660x_auto_attach(struct comedi_device *dev,
 	if (ret < 0)
 		return ret;
 
+	ni_660x_init_tio_chips(dev, board->n_chips);
+
 	ret = comedi_alloc_subdevices(dev, 2 + NI660X_MAX_COUNTERS);
 	if (ret)
 		return ret;
@@ -971,12 +986,6 @@ static int ni_660x_auto_attach(struct comedi_device *dev,
 	s->insn_bits	= ni_660x_dio_insn_bits;
 	s->insn_config	= ni_660x_dio_insn_config;
 
-	/*
-	 * We use the ioconfig registers to control dio direction, so zero
-	 * output enables in stc dio control reg.
-	 */
-	ni_660x_write(dev, 0, 0, NI660X_STC_DIO_CONTROL);
-
 	n_counters = board->n_chips * NI660X_COUNTERS_PER_CHIP;
 	gpct_dev = ni_gpct_device_construct(dev,
 					    ni_660x_gpct_write,
@@ -1017,9 +1026,6 @@ static int ni_660x_auto_attach(struct comedi_device *dev,
 		}
 	}
 
-	for (i = 0; i < board->n_chips; ++i)
-		init_tio_chip(dev, i);
-
 	for (i = 0; i < n_counters; ++i)
 		ni_tio_init_counter(&gpct_dev->counters[i]);
 

commit 78d514fa4cc0f195e060b7918d3548b63d27050f
Author: H Hartley Sweeten <hsweeten@visionengravers.com>
Date:   Tue Mar 22 11:10:43 2016 -0700

    staging: comedi: ni_660x: disable interrupts when detaching driver
    
    Make sure the interrupts are disabled before freeing the irq.
    
    Signed-off-by: H Hartley Sweeten <hsweeten@visionengravers.com>
    Reviewed-by: Ian Abbott <abbotti@mev.co.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/drivers/ni_660x.c b/drivers/staging/comedi/drivers/ni_660x.c
index 2440cb6a72c7..c71dae8da804 100644
--- a/drivers/staging/comedi/drivers/ni_660x.c
+++ b/drivers/staging/comedi/drivers/ni_660x.c
@@ -1064,8 +1064,10 @@ static void ni_660x_detach(struct comedi_device *dev)
 {
 	struct ni_660x_private *devpriv = dev->private;
 
-	if (dev->irq)
+	if (dev->irq) {
+		ni_660x_write(dev, 0, 0, NI660X_GLOBAL_INT_CFG);
 		free_irq(dev->irq, dev);
+	}
 	if (devpriv) {
 		ni_gpct_device_destroy(devpriv->counter_dev);
 		ni_660x_free_mite_rings(dev);

commit 26a0fe3ffa24c63a99b1fb314e03723c1e470ba0
Author: H Hartley Sweeten <hsweeten@visionengravers.com>
Date:   Tue Mar 22 11:10:41 2016 -0700

    staging: comedi: ni_660x: ni_gpct_device_destroy() can handle a NULL pointer
    
    Remove the unnecessary NULL pointer check.
    
    Signed-off-by: H Hartley Sweeten <hsweeten@visionengravers.com>
    Reviewed-by: Ian Abbott <abbotti@mev.co.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/drivers/ni_660x.c b/drivers/staging/comedi/drivers/ni_660x.c
index 35602cc7af61..2440cb6a72c7 100644
--- a/drivers/staging/comedi/drivers/ni_660x.c
+++ b/drivers/staging/comedi/drivers/ni_660x.c
@@ -1067,8 +1067,7 @@ static void ni_660x_detach(struct comedi_device *dev)
 	if (dev->irq)
 		free_irq(dev->irq, dev);
 	if (devpriv) {
-		if (devpriv->counter_dev)
-			ni_gpct_device_destroy(devpriv->counter_dev);
+		ni_gpct_device_destroy(devpriv->counter_dev);
 		ni_660x_free_mite_rings(dev);
 		mite_detach(devpriv->mite);
 	}

commit 32f89d8e70106f2b636c716a7cfb7fe53cfc5ebf
Author: H Hartley Sweeten <hsweeten@visionengravers.com>
Date:   Tue Mar 22 11:10:39 2016 -0700

    staging: comedi: ni_660x: tidy up the counter subdevices init
    
    For aesthetics, add some whitespace to the subdevice init and use
    a couple local variables to make the code easier to follow.
    
    Signed-off-by: H Hartley Sweeten <hsweeten@visionengravers.com>
    Reviewed-by: Ian Abbott <abbotti@mev.co.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/drivers/ni_660x.c b/drivers/staging/comedi/drivers/ni_660x.c
index 80499d6de44b..35602cc7af61 100644
--- a/drivers/staging/comedi/drivers/ni_660x.c
+++ b/drivers/staging/comedi/drivers/ni_660x.c
@@ -864,6 +864,7 @@ static int ni_660x_auto_attach(struct comedi_device *dev,
 	const struct ni_660x_board *board = NULL;
 	struct ni_660x_private *devpriv;
 	struct comedi_subdevice *s;
+	struct ni_gpct_device *gpct_dev;
 	unsigned int n_counters;
 	int subdev;
 	int ret;
@@ -977,46 +978,50 @@ static int ni_660x_auto_attach(struct comedi_device *dev,
 	ni_660x_write(dev, 0, 0, NI660X_STC_DIO_CONTROL);
 
 	n_counters = board->n_chips * NI660X_COUNTERS_PER_CHIP;
-	devpriv->counter_dev = ni_gpct_device_construct(dev,
-						     ni_660x_gpct_write,
-						     ni_660x_gpct_read,
-						     ni_gpct_variant_660x,
-						     n_counters);
-	if (!devpriv->counter_dev)
+	gpct_dev = ni_gpct_device_construct(dev,
+					    ni_660x_gpct_write,
+					    ni_660x_gpct_read,
+					    ni_gpct_variant_660x,
+					    n_counters);
+	if (!gpct_dev)
 		return -ENOMEM;
+	devpriv->counter_dev = gpct_dev;
+
+	/* Counter subdevices (4 NI TIO General Purpose Counters per chip) */
 	for (i = 0; i < NI660X_MAX_COUNTERS; ++i) {
 		s = &dev->subdevices[subdev++];
 		if (i < n_counters) {
-			s->type = COMEDI_SUBD_COUNTER;
-			s->subdev_flags = SDF_READABLE | SDF_WRITABLE |
+			struct ni_gpct *counter = &gpct_dev->counters[i];
+
+			counter->chip_index = i / NI660X_COUNTERS_PER_CHIP;
+			counter->counter_index = i % NI660X_COUNTERS_PER_CHIP;
+
+			s->type		= COMEDI_SUBD_COUNTER;
+			s->subdev_flags	= SDF_READABLE | SDF_WRITABLE |
 					  SDF_LSAMPL | SDF_CMD_READ;
-			s->n_chan = 3;
-			s->maxdata = 0xffffffff;
-			s->insn_read = ni_tio_insn_read;
-			s->insn_write = ni_tio_insn_write;
-			s->insn_config = ni_tio_insn_config;
-			s->do_cmd = &ni_660x_cmd;
-			s->len_chanlist = 1;
-			s->do_cmdtest = ni_tio_cmdtest;
-			s->cancel = &ni_660x_cancel;
-			s->poll = &ni_660x_input_poll;
+			s->n_chan	= 3;
+			s->maxdata	= 0xffffffff;
+			s->insn_read	= ni_tio_insn_read;
+			s->insn_write	= ni_tio_insn_write;
+			s->insn_config	= ni_tio_insn_config;
+			s->len_chanlist	= 1;
+			s->do_cmd	= ni_660x_cmd;
+			s->do_cmdtest	= ni_tio_cmdtest;
+			s->cancel	= ni_660x_cancel;
+			s->poll		= ni_660x_input_poll;
+			s->buf_change	= ni_660x_buf_change;
 			s->async_dma_dir = DMA_BIDIRECTIONAL;
-			s->buf_change = &ni_660x_buf_change;
-			s->private = &devpriv->counter_dev->counters[i];
-
-			devpriv->counter_dev->counters[i].chip_index =
-			    i / NI660X_COUNTERS_PER_CHIP;
-			devpriv->counter_dev->counters[i].counter_index =
-			    i % NI660X_COUNTERS_PER_CHIP;
+			s->private	= counter;
 		} else {
-			s->type = COMEDI_SUBD_UNUSED;
+			s->type		= COMEDI_SUBD_UNUSED;
 		}
 	}
+
 	for (i = 0; i < board->n_chips; ++i)
 		init_tio_chip(dev, i);
 
 	for (i = 0; i < n_counters; ++i)
-		ni_tio_init_counter(&devpriv->counter_dev->counters[i]);
+		ni_tio_init_counter(&gpct_dev->counters[i]);
 
 	 /*
 	  * Default the DIO channels as:

commit ccef0da819dd7fa716b90e584a7793a8849b06f1
Author: H Hartley Sweeten <hsweeten@visionengravers.com>
Date:   Tue Mar 22 11:10:38 2016 -0700

    staging: comedi: ni_660x: tidy up the misc. constants
    
    Remove enum ni_660x_constants and just #define the value.
    
    Move all the constant #defines so they are in one place and rename
    them so they are more conesistent.
    
    Signed-off-by: H Hartley Sweeten <hsweeten@visionengravers.com>
    Reviewed-by: Ian Abbott <abbotti@mev.co.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/drivers/ni_660x.c b/drivers/staging/comedi/drivers/ni_660x.c
index bb5b5ff4e32f..80499d6de44b 100644
--- a/drivers/staging/comedi/drivers/ni_660x.c
+++ b/drivers/staging/comedi/drivers/ni_660x.c
@@ -41,14 +41,6 @@
 #include "mite.h"
 #include "ni_tio.h"
 
-enum ni_660x_constants {
-	counters_per_chip = 4
-};
-
-#define NUM_PFI_CHANNELS 40
-/* there are only up to 3 dma channels, but the register layout allows for 4 */
-#define MAX_DMA_CHANNEL 4
-
 /* See Register-Level Programmer Manual page 3.1 */
 enum ni_660x_register {
 	NI660X_G0_INT_ACK,
@@ -390,22 +382,29 @@ static const struct ni_660x_board ni_660x_boards[] = {
 	},
 };
 
-#define NI_660X_MAX_NUM_CHIPS 2
-#define NI_660X_MAX_NUM_COUNTERS (NI_660X_MAX_NUM_CHIPS * counters_per_chip)
+#define NI660X_NUM_PFI_CHANNELS		40
+
+/* there are only up to 3 dma channels, but the register layout allows for 4 */
+#define NI660X_MAX_DMA_CHANNEL		4
+
+#define NI660X_COUNTERS_PER_CHIP	4
+#define NI660X_MAX_CHIPS		2
+#define NI660X_MAX_COUNTERS		(NI660X_MAX_CHIPS *	\
+					 NI660X_COUNTERS_PER_CHIP)
 
 struct ni_660x_private {
 	struct mite_struct *mite;
 	struct ni_gpct_device *counter_dev;
 	struct mite_dma_descriptor_ring
-	*mite_rings[NI_660X_MAX_NUM_CHIPS][counters_per_chip];
+	*mite_rings[NI660X_MAX_CHIPS][NI660X_COUNTERS_PER_CHIP];
 	/* protects mite channel request/release */
 	spinlock_t mite_channel_lock;
 	/* prevents races between interrupt and comedi_poll */
 	spinlock_t interrupt_lock;
 	/* protects dma_cfg changes */
 	spinlock_t dma_cfg_lock;
-	unsigned int dma_cfg[NI_660X_MAX_NUM_CHIPS];
-	unsigned int io_cfg[NUM_PFI_CHANNELS];
+	unsigned int dma_cfg[NI660X_MAX_CHIPS];
+	unsigned int io_cfg[NI660X_NUM_PFI_CHANNELS];
 	u64 io_dir;
 };
 
@@ -667,7 +666,7 @@ static int ni_660x_allocate_private(struct comedi_device *dev)
 	spin_lock_init(&devpriv->mite_channel_lock);
 	spin_lock_init(&devpriv->interrupt_lock);
 	spin_lock_init(&devpriv->dma_cfg_lock);
-	for (i = 0; i < NUM_PFI_CHANNELS; ++i)
+	for (i = 0; i < NI660X_NUM_PFI_CHANNELS; ++i)
 		devpriv->io_cfg[i] = NI_660X_PFI_OUTPUT_COUNTER;
 
 	return 0;
@@ -681,7 +680,7 @@ static int ni_660x_alloc_mite_rings(struct comedi_device *dev)
 	unsigned int j;
 
 	for (i = 0; i < board->n_chips; ++i) {
-		for (j = 0; j < counters_per_chip; ++j) {
+		for (j = 0; j < NI660X_COUNTERS_PER_CHIP; ++j) {
 			devpriv->mite_rings[i][j] =
 			    mite_alloc_ring(devpriv->mite);
 			if (!devpriv->mite_rings[i][j])
@@ -699,7 +698,7 @@ static void ni_660x_free_mite_rings(struct comedi_device *dev)
 	unsigned int j;
 
 	for (i = 0; i < board->n_chips; ++i) {
-		for (j = 0; j < counters_per_chip; ++j)
+		for (j = 0; j < NI660X_COUNTERS_PER_CHIP; ++j)
 			mite_free_ring(devpriv->mite_rings[i][j]);
 	}
 }
@@ -711,10 +710,10 @@ static void init_tio_chip(struct comedi_device *dev, int chipset)
 
 	/*  init dma configuration register */
 	devpriv->dma_cfg[chipset] = 0;
-	for (i = 0; i < MAX_DMA_CHANNEL; ++i)
+	for (i = 0; i < NI660X_MAX_DMA_CHANNEL; ++i)
 		devpriv->dma_cfg[chipset] |= NI660X_DMA_CFG_SEL_NONE(i);
 	ni_660x_write(dev, chipset, devpriv->dma_cfg[chipset], NI660X_DMA_CFG);
-	for (i = 0; i < NUM_PFI_CHANNELS; ++i)
+	for (i = 0; i < NI660X_NUM_PFI_CHANNELS; ++i)
 		ni_660x_write(dev, chipset, 0, NI660X_IO_CFG(i));
 }
 
@@ -899,7 +898,7 @@ static int ni_660x_auto_attach(struct comedi_device *dev,
 	if (ret < 0)
 		return ret;
 
-	ret = comedi_alloc_subdevices(dev, 2 + NI_660X_MAX_NUM_COUNTERS);
+	ret = comedi_alloc_subdevices(dev, 2 + NI660X_MAX_COUNTERS);
 	if (ret)
 		return ret;
 
@@ -965,7 +964,7 @@ static int ni_660x_auto_attach(struct comedi_device *dev,
 	s = &dev->subdevices[subdev++];
 	s->type		= COMEDI_SUBD_DIO;
 	s->subdev_flags	= SDF_READABLE | SDF_WRITABLE;
-	s->n_chan	= NUM_PFI_CHANNELS;
+	s->n_chan	= NI660X_NUM_PFI_CHANNELS;
 	s->maxdata	= 1;
 	s->range_table	= &range_digital;
 	s->insn_bits	= ni_660x_dio_insn_bits;
@@ -977,7 +976,7 @@ static int ni_660x_auto_attach(struct comedi_device *dev,
 	 */
 	ni_660x_write(dev, 0, 0, NI660X_STC_DIO_CONTROL);
 
-	n_counters = board->n_chips * counters_per_chip;
+	n_counters = board->n_chips * NI660X_COUNTERS_PER_CHIP;
 	devpriv->counter_dev = ni_gpct_device_construct(dev,
 						     ni_660x_gpct_write,
 						     ni_660x_gpct_read,
@@ -985,7 +984,7 @@ static int ni_660x_auto_attach(struct comedi_device *dev,
 						     n_counters);
 	if (!devpriv->counter_dev)
 		return -ENOMEM;
-	for (i = 0; i < NI_660X_MAX_NUM_COUNTERS; ++i) {
+	for (i = 0; i < NI660X_MAX_COUNTERS; ++i) {
 		s = &dev->subdevices[subdev++];
 		if (i < n_counters) {
 			s->type = COMEDI_SUBD_COUNTER;
@@ -1006,9 +1005,9 @@ static int ni_660x_auto_attach(struct comedi_device *dev,
 			s->private = &devpriv->counter_dev->counters[i];
 
 			devpriv->counter_dev->counters[i].chip_index =
-			    i / counters_per_chip;
+			    i / NI660X_COUNTERS_PER_CHIP;
 			devpriv->counter_dev->counters[i].counter_index =
-			    i % counters_per_chip;
+			    i % NI660X_COUNTERS_PER_CHIP;
 		} else {
 			s->type = COMEDI_SUBD_UNUSED;
 		}
@@ -1024,7 +1023,7 @@ static int ni_660x_auto_attach(struct comedi_device *dev,
 	  *   chan 0-7:  DIO inputs
 	  *   chan 8-39: counter signal inputs
 	  */
-	for (i = 0; i < NUM_PFI_CHANNELS; ++i) {
+	for (i = 0; i < NI660X_NUM_PFI_CHANNELS; ++i) {
 		if (i < 8)
 			ni_660x_set_pfi_routing(dev, i, NI_660X_PFI_OUTPUT_DIO);
 		else

commit 5262d035ef260c3417254b2309892bba013dcab7
Author: H Hartley Sweeten <hsweeten@visionengravers.com>
Date:   Tue Mar 22 11:10:37 2016 -0700

    staging: comedi: ni_660x: fix memory barrier without comment
    
    Fix the checkpatch.pl issue. Move the memory barrier to a better place.
    
    Signed-off-by: H Hartley Sweeten <hsweeten@visionengravers.com>
    Reviewed-by: Ian Abbott <abbotti@mev.co.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/drivers/ni_660x.c b/drivers/staging/comedi/drivers/ni_660x.c
index 2926d265f0bd..bb5b5ff4e32f 100644
--- a/drivers/staging/comedi/drivers/ni_660x.c
+++ b/drivers/staging/comedi/drivers/ni_660x.c
@@ -613,9 +613,11 @@ static irqreturn_t ni_660x_interrupt(int irq, void *d)
 
 	if (!dev->attached)
 		return IRQ_NONE;
+	/* make sure dev->attached is checked before doing anything else */
+	smp_mb();
+
 	/* lock to avoid race with comedi_poll */
 	spin_lock_irqsave(&devpriv->interrupt_lock, flags);
-	smp_mb();
 	for (i = 0; i < dev->n_subdevices; ++i) {
 		s = &dev->subdevices[i];
 		if (s->type == COMEDI_SUBD_COUNTER)

commit e8f6e2b98d164d94bc29bb488413301d26cc5b3c
Author: H Hartley Sweeten <hsweeten@visionengravers.com>
Date:   Tue Mar 22 11:10:36 2016 -0700

    staging: comedi: ni_660x: add comments for the spinlock_t definitions
    
    Fix the checkpatch.pl issues:
    
    CHECK: spinlock_t definition without comment
    
    For aesthetics, rename the 'soft_reg_copy_lock' to clarify what it's
    used for.
    
    Signed-off-by: H Hartley Sweeten <hsweeten@visionengravers.com>
    Reviewed-by: Ian Abbott <abbotti@mev.co.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/drivers/ni_660x.c b/drivers/staging/comedi/drivers/ni_660x.c
index 3edea9928b09..2926d265f0bd 100644
--- a/drivers/staging/comedi/drivers/ni_660x.c
+++ b/drivers/staging/comedi/drivers/ni_660x.c
@@ -398,11 +398,13 @@ struct ni_660x_private {
 	struct ni_gpct_device *counter_dev;
 	struct mite_dma_descriptor_ring
 	*mite_rings[NI_660X_MAX_NUM_CHIPS][counters_per_chip];
+	/* protects mite channel request/release */
 	spinlock_t mite_channel_lock;
-	/* interrupt_lock prevents races between interrupt and comedi_poll */
+	/* prevents races between interrupt and comedi_poll */
 	spinlock_t interrupt_lock;
+	/* protects dma_cfg changes */
+	spinlock_t dma_cfg_lock;
 	unsigned int dma_cfg[NI_660X_MAX_NUM_CHIPS];
-	spinlock_t soft_reg_copy_lock;
 	unsigned int io_cfg[NUM_PFI_CHANNELS];
 	u64 io_dir;
 };
@@ -482,7 +484,7 @@ static inline void ni_660x_set_dma_channel(struct comedi_device *dev,
 	unsigned int chip = counter->chip_index;
 	unsigned long flags;
 
-	spin_lock_irqsave(&devpriv->soft_reg_copy_lock, flags);
+	spin_lock_irqsave(&devpriv->dma_cfg_lock, flags);
 	devpriv->dma_cfg[chip] &= ~NI660X_DMA_CFG_SEL_MASK(mite_channel);
 	devpriv->dma_cfg[chip] |= NI660X_DMA_CFG_SEL(mite_channel,
 						     counter->counter_index);
@@ -490,7 +492,7 @@ static inline void ni_660x_set_dma_channel(struct comedi_device *dev,
 		      NI660X_DMA_CFG_RESET(mite_channel),
 		      NI660X_DMA_CFG);
 	mmiowb();
-	spin_unlock_irqrestore(&devpriv->soft_reg_copy_lock, flags);
+	spin_unlock_irqrestore(&devpriv->dma_cfg_lock, flags);
 }
 
 static inline void ni_660x_unset_dma_channel(struct comedi_device *dev,
@@ -501,12 +503,12 @@ static inline void ni_660x_unset_dma_channel(struct comedi_device *dev,
 	unsigned int chip = counter->chip_index;
 	unsigned long flags;
 
-	spin_lock_irqsave(&devpriv->soft_reg_copy_lock, flags);
+	spin_lock_irqsave(&devpriv->dma_cfg_lock, flags);
 	devpriv->dma_cfg[chip] &= ~NI660X_DMA_CFG_SEL_MASK(mite_channel);
 	devpriv->dma_cfg[chip] |= NI660X_DMA_CFG_SEL_NONE(mite_channel);
 	ni_660x_write(dev, chip, devpriv->dma_cfg[chip], NI660X_DMA_CFG);
 	mmiowb();
-	spin_unlock_irqrestore(&devpriv->soft_reg_copy_lock, flags);
+	spin_unlock_irqrestore(&devpriv->dma_cfg_lock, flags);
 }
 
 static int ni_660x_request_mite_channel(struct comedi_device *dev,
@@ -662,7 +664,7 @@ static int ni_660x_allocate_private(struct comedi_device *dev)
 
 	spin_lock_init(&devpriv->mite_channel_lock);
 	spin_lock_init(&devpriv->interrupt_lock);
-	spin_lock_init(&devpriv->soft_reg_copy_lock);
+	spin_lock_init(&devpriv->dma_cfg_lock);
 	for (i = 0; i < NUM_PFI_CHANNELS; ++i)
 		devpriv->io_cfg[i] = NI_660X_PFI_OUTPUT_COUNTER;
 

commit 0c9434e352d0ae9ddb84a89716e1d1e82f3185f1
Author: H Hartley Sweeten <hsweeten@visionengravers.com>
Date:   Tue Mar 22 11:10:35 2016 -0700

    staging: comedi: ni_660x: refactor ni_gpct_to_660x_register()
    
    Convert this big switch into an array and refactor ni_660x_gpct_{write,read}()
    functions to use the array to find the register offset.
    
    All the TIO (GPCT) registers are included in the array except for NITIO_G0_ABZ
    and NITIO_G1_ABZ. These registers only exist on the ni_pcimio m-series boards
    and this driver will never read/write them.
    
    Just in case someone adds a new entry to the enum ni_gpct_register in ni_tio.h,
    add a dev_warn() for any unhandled registers.
    
    Signed-off-by: H Hartley Sweeten <hsweeten@visionengravers.com>
    Reviewed-by: Ian Abbott <abbotti@mev.co.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/drivers/ni_660x.c b/drivers/staging/comedi/drivers/ni_660x.c
index 6f84946ea9a4..3edea9928b09 100644
--- a/drivers/staging/comedi/drivers/ni_660x.c
+++ b/drivers/staging/comedi/drivers/ni_660x.c
@@ -279,6 +279,77 @@ static const struct ni_660x_register_data ni_660x_reg_data[NI660X_NUM_REGS] = {
 	[NI660X_IO_CFG_38_39]		= { 0x7a2, 2 }	/* read/write */
 };
 
+static const enum ni_660x_register ni_gpct_to_660x_register[] = {
+	[NITIO_G0_AUTO_INC]		= NI660X_G0_AUTO_INC,
+	[NITIO_G1_AUTO_INC]		= NI660X_G1_AUTO_INC,
+	[NITIO_G2_AUTO_INC]		= NI660X_G2_AUTO_INC,
+	[NITIO_G3_AUTO_INC]		= NI660X_G3_AUTO_INC,
+	[NITIO_G0_CMD]			= NI660X_G0_CMD,
+	[NITIO_G1_CMD]			= NI660X_G1_CMD,
+	[NITIO_G2_CMD]			= NI660X_G2_CMD,
+	[NITIO_G3_CMD]			= NI660X_G3_CMD,
+	[NITIO_G0_HW_SAVE]		= NI660X_G0_HW_SAVE,
+	[NITIO_G1_HW_SAVE]		= NI660X_G1_HW_SAVE,
+	[NITIO_G2_HW_SAVE]		= NI660X_G2_HW_SAVE,
+	[NITIO_G3_HW_SAVE]		= NI660X_G3_HW_SAVE,
+	[NITIO_G0_SW_SAVE]		= NI660X_G0_SW_SAVE,
+	[NITIO_G1_SW_SAVE]		= NI660X_G1_SW_SAVE,
+	[NITIO_G2_SW_SAVE]		= NI660X_G2_SW_SAVE,
+	[NITIO_G3_SW_SAVE]		= NI660X_G3_SW_SAVE,
+	[NITIO_G0_MODE]			= NI660X_G0_MODE,
+	[NITIO_G1_MODE]			= NI660X_G1_MODE,
+	[NITIO_G2_MODE]			= NI660X_G2_MODE,
+	[NITIO_G3_MODE]			= NI660X_G3_MODE,
+	[NITIO_G0_LOADA]		= NI660X_G0_LOADA,
+	[NITIO_G1_LOADA]		= NI660X_G1_LOADA,
+	[NITIO_G2_LOADA]		= NI660X_G2_LOADA,
+	[NITIO_G3_LOADA]		= NI660X_G3_LOADA,
+	[NITIO_G0_LOADB]		= NI660X_G0_LOADB,
+	[NITIO_G1_LOADB]		= NI660X_G1_LOADB,
+	[NITIO_G2_LOADB]		= NI660X_G2_LOADB,
+	[NITIO_G3_LOADB]		= NI660X_G3_LOADB,
+	[NITIO_G0_INPUT_SEL]		= NI660X_G0_INPUT_SEL,
+	[NITIO_G1_INPUT_SEL]		= NI660X_G1_INPUT_SEL,
+	[NITIO_G2_INPUT_SEL]		= NI660X_G2_INPUT_SEL,
+	[NITIO_G3_INPUT_SEL]		= NI660X_G3_INPUT_SEL,
+	[NITIO_G0_CNT_MODE]		= NI660X_G0_CNT_MODE,
+	[NITIO_G1_CNT_MODE]		= NI660X_G1_CNT_MODE,
+	[NITIO_G2_CNT_MODE]		= NI660X_G2_CNT_MODE,
+	[NITIO_G3_CNT_MODE]		= NI660X_G3_CNT_MODE,
+	[NITIO_G0_GATE2]		= NI660X_G0_GATE2,
+	[NITIO_G1_GATE2]		= NI660X_G1_GATE2,
+	[NITIO_G2_GATE2]		= NI660X_G2_GATE2,
+	[NITIO_G3_GATE2]		= NI660X_G3_GATE2,
+	[NITIO_G01_STATUS]		= NI660X_G01_STATUS,
+	[NITIO_G23_STATUS]		= NI660X_G23_STATUS,
+	[NITIO_G01_RESET]		= NI660X_G01_RESET,
+	[NITIO_G23_RESET]		= NI660X_G23_RESET,
+	[NITIO_G01_STATUS1]		= NI660X_G01_STATUS1,
+	[NITIO_G23_STATUS1]		= NI660X_G23_STATUS1,
+	[NITIO_G01_STATUS2]		= NI660X_G01_STATUS2,
+	[NITIO_G23_STATUS2]		= NI660X_G23_STATUS2,
+	[NITIO_G0_DMA_CFG]		= NI660X_G0_DMA_CFG,
+	[NITIO_G1_DMA_CFG]		= NI660X_G1_DMA_CFG,
+	[NITIO_G2_DMA_CFG]		= NI660X_G2_DMA_CFG,
+	[NITIO_G3_DMA_CFG]		= NI660X_G3_DMA_CFG,
+	[NITIO_G0_DMA_STATUS]		= NI660X_G0_DMA_STATUS,
+	[NITIO_G1_DMA_STATUS]		= NI660X_G1_DMA_STATUS,
+	[NITIO_G2_DMA_STATUS]		= NI660X_G2_DMA_STATUS,
+	[NITIO_G3_DMA_STATUS]		= NI660X_G3_DMA_STATUS,
+	[NITIO_G0_INT_ACK]		= NI660X_G0_INT_ACK,
+	[NITIO_G1_INT_ACK]		= NI660X_G1_INT_ACK,
+	[NITIO_G2_INT_ACK]		= NI660X_G2_INT_ACK,
+	[NITIO_G3_INT_ACK]		= NI660X_G3_INT_ACK,
+	[NITIO_G0_STATUS]		= NI660X_G0_STATUS,
+	[NITIO_G1_STATUS]		= NI660X_G1_STATUS,
+	[NITIO_G2_STATUS]		= NI660X_G2_STATUS,
+	[NITIO_G3_STATUS]		= NI660X_G3_STATUS,
+	[NITIO_G0_INT_ENA]		= NI660X_G0_INT_ENA,
+	[NITIO_G1_INT_ENA]		= NI660X_G1_INT_ENA,
+	[NITIO_G2_INT_ENA]		= NI660X_G2_INT_ENA,
+	[NITIO_G3_INT_ENA]		= NI660X_G3_INT_ENA,
+};
+
 /* Offset of the GPCT chips from the base-address of the card */
 /* First chip is at base-address + 0x00, etc. */
 static const unsigned GPCT_OFFSET[2] = { 0x0, 0x800 };
@@ -336,151 +407,6 @@ struct ni_660x_private {
 	u64 io_dir;
 };
 
-static enum ni_660x_register ni_gpct_to_660x_register(enum ni_gpct_register reg)
-{
-	switch (reg) {
-	case NITIO_G0_AUTO_INC:
-		return NI660X_G0_AUTO_INC;
-	case NITIO_G1_AUTO_INC:
-		return NI660X_G1_AUTO_INC;
-	case NITIO_G2_AUTO_INC:
-		return NI660X_G2_AUTO_INC;
-	case NITIO_G3_AUTO_INC:
-		return NI660X_G3_AUTO_INC;
-	case NITIO_G0_CMD:
-		return NI660X_G0_CMD;
-	case NITIO_G1_CMD:
-		return NI660X_G1_CMD;
-	case NITIO_G2_CMD:
-		return NI660X_G2_CMD;
-	case NITIO_G3_CMD:
-		return NI660X_G3_CMD;
-	case NITIO_G0_HW_SAVE:
-		return NI660X_G0_HW_SAVE;
-	case NITIO_G1_HW_SAVE:
-		return NI660X_G1_HW_SAVE;
-	case NITIO_G2_HW_SAVE:
-		return NI660X_G2_HW_SAVE;
-	case NITIO_G3_HW_SAVE:
-		return NI660X_G3_HW_SAVE;
-	case NITIO_G0_SW_SAVE:
-		return NI660X_G0_SW_SAVE;
-	case NITIO_G1_SW_SAVE:
-		return NI660X_G1_SW_SAVE;
-	case NITIO_G2_SW_SAVE:
-		return NI660X_G2_SW_SAVE;
-	case NITIO_G3_SW_SAVE:
-		return NI660X_G3_SW_SAVE;
-	case NITIO_G0_MODE:
-		return NI660X_G0_MODE;
-	case NITIO_G1_MODE:
-		return NI660X_G1_MODE;
-	case NITIO_G2_MODE:
-		return NI660X_G2_MODE;
-	case NITIO_G3_MODE:
-		return NI660X_G3_MODE;
-	case NITIO_G0_LOADA:
-		return NI660X_G0_LOADA;
-	case NITIO_G1_LOADA:
-		return NI660X_G1_LOADA;
-	case NITIO_G2_LOADA:
-		return NI660X_G2_LOADA;
-	case NITIO_G3_LOADA:
-		return NI660X_G3_LOADA;
-	case NITIO_G0_LOADB:
-		return NI660X_G0_LOADB;
-	case NITIO_G1_LOADB:
-		return NI660X_G1_LOADB;
-	case NITIO_G2_LOADB:
-		return NI660X_G2_LOADB;
-	case NITIO_G3_LOADB:
-		return NI660X_G3_LOADB;
-	case NITIO_G0_INPUT_SEL:
-		return NI660X_G0_INPUT_SEL;
-	case NITIO_G1_INPUT_SEL:
-		return NI660X_G1_INPUT_SEL;
-	case NITIO_G2_INPUT_SEL:
-		return NI660X_G2_INPUT_SEL;
-	case NITIO_G3_INPUT_SEL:
-		return NI660X_G3_INPUT_SEL;
-	case NITIO_G01_STATUS:
-		return NI660X_G01_STATUS;
-	case NITIO_G23_STATUS:
-		return NI660X_G23_STATUS;
-	case NITIO_G01_RESET:
-		return NI660X_G01_RESET;
-	case NITIO_G23_RESET:
-		return NI660X_G23_RESET;
-	case NITIO_G01_STATUS1:
-		return NI660X_G01_STATUS1;
-	case NITIO_G23_STATUS1:
-		return NI660X_G23_STATUS1;
-	case NITIO_G01_STATUS2:
-		return NI660X_G01_STATUS2;
-	case NITIO_G23_STATUS2:
-		return NI660X_G23_STATUS2;
-	case NITIO_G0_CNT_MODE:
-		return NI660X_G0_CNT_MODE;
-	case NITIO_G1_CNT_MODE:
-		return NI660X_G1_CNT_MODE;
-	case NITIO_G2_CNT_MODE:
-		return NI660X_G2_CNT_MODE;
-	case NITIO_G3_CNT_MODE:
-		return NI660X_G3_CNT_MODE;
-	case NITIO_G0_GATE2:
-		return NI660X_G0_GATE2;
-	case NITIO_G1_GATE2:
-		return NI660X_G1_GATE2;
-	case NITIO_G2_GATE2:
-		return NI660X_G2_GATE2;
-	case NITIO_G3_GATE2:
-		return NI660X_G3_GATE2;
-	case NITIO_G0_DMA_CFG:
-		return NI660X_G0_DMA_CFG;
-	case NITIO_G0_DMA_STATUS:
-		return NI660X_G0_DMA_STATUS;
-	case NITIO_G1_DMA_CFG:
-		return NI660X_G1_DMA_CFG;
-	case NITIO_G1_DMA_STATUS:
-		return NI660X_G1_DMA_STATUS;
-	case NITIO_G2_DMA_CFG:
-		return NI660X_G2_DMA_CFG;
-	case NITIO_G2_DMA_STATUS:
-		return NI660X_G2_DMA_STATUS;
-	case NITIO_G3_DMA_CFG:
-		return NI660X_G3_DMA_CFG;
-	case NITIO_G3_DMA_STATUS:
-		return NI660X_G3_DMA_STATUS;
-	case NITIO_G0_INT_ACK:
-		return NI660X_G0_INT_ACK;
-	case NITIO_G1_INT_ACK:
-		return NI660X_G1_INT_ACK;
-	case NITIO_G2_INT_ACK:
-		return NI660X_G2_INT_ACK;
-	case NITIO_G3_INT_ACK:
-		return NI660X_G3_INT_ACK;
-	case NITIO_G0_STATUS:
-		return NI660X_G0_STATUS;
-	case NITIO_G1_STATUS:
-		return NI660X_G1_STATUS;
-	case NITIO_G2_STATUS:
-		return NI660X_G2_STATUS;
-	case NITIO_G3_STATUS:
-		return NI660X_G3_STATUS;
-	case NITIO_G0_INT_ENA:
-		return NI660X_G0_INT_ENA;
-	case NITIO_G1_INT_ENA:
-		return NI660X_G1_INT_ENA;
-	case NITIO_G2_INT_ENA:
-		return NI660X_G2_INT_ENA;
-	case NITIO_G3_INT_ENA:
-		return NI660X_G3_INT_ENA;
-	default:
-		BUG();
-		return 0;
-	}
-}
-
 static void ni_660x_write(struct comedi_device *dev,
 			  unsigned int chip, unsigned int bits,
 			  enum ni_660x_register reg)
@@ -508,7 +434,15 @@ static void ni_660x_gpct_write(struct ni_gpct *counter, unsigned int bits,
 			       enum ni_gpct_register reg)
 {
 	struct comedi_device *dev = counter->counter_dev->dev;
-	enum ni_660x_register ni_660x_register = ni_gpct_to_660x_register(reg);
+	enum ni_660x_register ni_660x_register;
+
+	if (reg < ARRAY_SIZE(ni_gpct_to_660x_register)) {
+		ni_660x_register = ni_gpct_to_660x_register[reg];
+	} else {
+		dev_warn(dev->class_dev, "%s: unhandled register=0x%x\n",
+			 __func__, reg);
+		return;
+	}
 
 	ni_660x_write(dev, counter->chip_index, bits, ni_660x_register);
 }
@@ -517,7 +451,15 @@ static unsigned int ni_660x_gpct_read(struct ni_gpct *counter,
 				      enum ni_gpct_register reg)
 {
 	struct comedi_device *dev = counter->counter_dev->dev;
-	enum ni_660x_register ni_660x_register = ni_gpct_to_660x_register(reg);
+	enum ni_660x_register ni_660x_register;
+
+	if (reg < ARRAY_SIZE(ni_gpct_to_660x_register)) {
+		ni_660x_register = ni_gpct_to_660x_register[reg];
+	} else {
+		dev_warn(dev->class_dev, "%s: unhandled register=0x%x\n",
+			 __func__, reg);
+		return 0;
+	}
 
 	return ni_660x_read(dev, counter->chip_index, ni_660x_register);
 }

commit f0c9305ede52b42021ea53a33b3a2878e0c5d51e
Author: H Hartley Sweeten <hsweeten@visionengravers.com>
Date:   Tue Mar 22 11:10:34 2016 -0700

    staging: comedi: ni_660x: add a comment about the initial DIO state
    
    The (*auto_attach) initializes all the DIO channels to a default state.
    Add a comment for clarity.
    
    Signed-off-by: H Hartley Sweeten <hsweeten@visionengravers.com>
    Reviewed-by: Ian Abbott <abbotti@mev.co.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/drivers/ni_660x.c b/drivers/staging/comedi/drivers/ni_660x.c
index 3415a15650fe..6f84946ea9a4 100644
--- a/drivers/staging/comedi/drivers/ni_660x.c
+++ b/drivers/staging/comedi/drivers/ni_660x.c
@@ -1073,6 +1073,11 @@ static int ni_660x_auto_attach(struct comedi_device *dev,
 	for (i = 0; i < n_counters; ++i)
 		ni_tio_init_counter(&devpriv->counter_dev->counters[i]);
 
+	 /*
+	  * Default the DIO channels as:
+	  *   chan 0-7:  DIO inputs
+	  *   chan 8-39: counter signal inputs
+	  */
 	for (i = 0; i < NUM_PFI_CHANNELS; ++i) {
 		if (i < 8)
 			ni_660x_set_pfi_routing(dev, i, NI_660X_PFI_OUTPUT_DIO);

commit aa94f288882583fb2a214110ad021a75e78ff809
Author: H Hartley Sweeten <hsweeten@visionengravers.com>
Date:   Tue Mar 22 11:10:33 2016 -0700

    staging: comedi: ni_660x: tidy up ni_660x_set_pfi_routing()
    
    Use the comedi.h provided constants (enum ni_660x_pfi_routing) instead
    of defining new ones for the output sources.
    
    Use a switch to clarify the channel/source validation.
    
    For aesthetics, rename the private data members 'pfi_output_selects' and
    'pfi_direction_bits'.
    
    Remove the 'min_counter_pfi_chan' and 'max_dio_pfi_chan' from
    enum ni_660x_constants. The open coded values make the code easier
    to follow.
    
    Signed-off-by: H Hartley Sweeten <hsweeten@visionengravers.com>
    Reviewed-by: Ian Abbott <abbotti@mev.co.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/drivers/ni_660x.c b/drivers/staging/comedi/drivers/ni_660x.c
index f614927411cb..3415a15650fe 100644
--- a/drivers/staging/comedi/drivers/ni_660x.c
+++ b/drivers/staging/comedi/drivers/ni_660x.c
@@ -42,8 +42,6 @@
 #include "ni_tio.h"
 
 enum ni_660x_constants {
-	min_counter_pfi_chan = 8,
-	max_dio_pfi_chan = 31,
 	counters_per_chip = 4
 };
 
@@ -172,10 +170,6 @@ enum ni_660x_register {
 #define NI660X_IO_CFG(x)		(NI660X_IO_CFG_0_1 + ((x) / 2))
 #define NI660X_IO_CFG_OUT_SEL(_c, _s)	(((_s) & 0x3) << (((_c) % 2) ? 0 : 8))
 #define NI660X_IO_CFG_OUT_SEL_MASK(_c)	NI660X_IO_CFG_OUT_SEL((_c), 0x3)
-#define NI660X_IO_CFG_OUT_SEL_HIGH_Z	0
-#define NI660X_IO_CFG_OUT_SEL_COUNTER	1
-#define NI660X_IO_CFG_OUT_SEL_DO	2
-#define NI660X_IO_CFG_OUT_SEL_MAX	3
 #define NI660X_IO_CFG_IN_SEL(_c, _s)	(((_s) & 0x7) << (((_c) % 2) ? 4 : 12))
 #define NI660X_IO_CFG_IN_SEL_MASK(_c)	NI660X_IO_CFG_IN_SEL((_c), 0x7)
 
@@ -331,7 +325,6 @@ static const struct ni_660x_board ni_660x_boards[] = {
 struct ni_660x_private {
 	struct mite_struct *mite;
 	struct ni_gpct_device *counter_dev;
-	u64 pfi_direction_bits;
 	struct mite_dma_descriptor_ring
 	*mite_rings[NI_660X_MAX_NUM_CHIPS][counters_per_chip];
 	spinlock_t mite_channel_lock;
@@ -339,7 +332,8 @@ struct ni_660x_private {
 	spinlock_t interrupt_lock;
 	unsigned int dma_cfg[NI_660X_MAX_NUM_CHIPS];
 	spinlock_t soft_reg_copy_lock;
-	unsigned short pfi_output_selects[NUM_PFI_CHANNELS];
+	unsigned int io_cfg[NUM_PFI_CHANNELS];
+	u64 io_dir;
 };
 
 static enum ni_660x_register ni_gpct_to_660x_register(enum ni_gpct_register reg)
@@ -728,7 +722,7 @@ static int ni_660x_allocate_private(struct comedi_device *dev)
 	spin_lock_init(&devpriv->interrupt_lock);
 	spin_lock_init(&devpriv->soft_reg_copy_lock);
 	for (i = 0; i < NUM_PFI_CHANNELS; ++i)
-		devpriv->pfi_output_selects[i] = NI660X_IO_CFG_OUT_SEL_COUNTER;
+		devpriv->io_cfg[i] = NI_660X_PFI_OUTPUT_COUNTER;
 
 	return 0;
 }
@@ -817,7 +811,7 @@ static void ni_660x_select_pfi_output(struct comedi_device *dev,
 	unsigned int bits;
 
 	if (board->n_chips > 1) {
-		if (out_sel == NI660X_IO_CFG_OUT_SEL_COUNTER &&
+		if (out_sel == NI_660X_PFI_OUTPUT_COUNTER &&
 		    chan >= 8 && chan <= 23) {
 			/* counters 4-7 pfi channels */
 			active_chip = 1;
@@ -833,8 +827,7 @@ static void ni_660x_select_pfi_output(struct comedi_device *dev,
 		/* set the pfi channel to high-z on the inactive chip */
 		bits = ni_660x_read(dev, idle_chip, NI660X_IO_CFG(chan));
 		bits &= ~NI660X_IO_CFG_OUT_SEL_MASK(chan);
-		bits |= NI660X_IO_CFG_OUT_SEL(chan,
-					      NI660X_IO_CFG_OUT_SEL_HIGH_Z);
+		bits |= NI660X_IO_CFG_OUT_SEL(chan, 0);		/* high-z */
 		ni_660x_write(dev, idle_chip, bits, NI660X_IO_CFG(chan));
 	}
 
@@ -850,22 +843,21 @@ static int ni_660x_set_pfi_routing(struct comedi_device *dev,
 {
 	struct ni_660x_private *devpriv = dev->private;
 
-	if (source > NI660X_IO_CFG_OUT_SEL_MAX)
-		return -EINVAL;
-	if (source == NI660X_IO_CFG_OUT_SEL_HIGH_Z)
-		return -EINVAL;
-	if (chan < min_counter_pfi_chan) {
-		if (source == NI660X_IO_CFG_OUT_SEL_COUNTER)
+	switch (source) {
+	case NI_660X_PFI_OUTPUT_COUNTER:
+		if (chan < 8)
 			return -EINVAL;
-	} else if (chan > max_dio_pfi_chan) {
-		if (source == NI660X_IO_CFG_OUT_SEL_DO)
+		break;
+	case NI_660X_PFI_OUTPUT_DIO:
+		if (chan > 31)
 			return -EINVAL;
+	default:
+		return -EINVAL;
 	}
 
-	devpriv->pfi_output_selects[chan] = source;
-	if (devpriv->pfi_direction_bits & (1ULL << chan))
-		ni_660x_select_pfi_output(dev, chan,
-					  devpriv->pfi_output_selects[chan]);
+	devpriv->io_cfg[chan] = source;
+	if (devpriv->io_dir & (1ULL << chan))
+		ni_660x_select_pfi_output(dev, chan, devpriv->io_cfg[chan]);
 	return 0;
 }
 
@@ -882,20 +874,18 @@ static int ni_660x_dio_insn_config(struct comedi_device *dev,
 
 	switch (data[0]) {
 	case INSN_CONFIG_DIO_OUTPUT:
-		devpriv->pfi_direction_bits |= bit;
-		ni_660x_select_pfi_output(dev, chan,
-					  devpriv->pfi_output_selects[chan]);
+		devpriv->io_dir |= bit;
+		ni_660x_select_pfi_output(dev, chan, devpriv->io_cfg[chan]);
 		break;
 
 	case INSN_CONFIG_DIO_INPUT:
-		devpriv->pfi_direction_bits &= ~bit;
-		ni_660x_select_pfi_output(dev, chan,
-					  NI660X_IO_CFG_OUT_SEL_HIGH_Z);
+		devpriv->io_dir &= ~bit;
+		ni_660x_select_pfi_output(dev, chan, 0);	/* high-z */
 		break;
 
 	case INSN_CONFIG_DIO_QUERY:
-		data[1] = (devpriv->pfi_direction_bits & bit) ? COMEDI_OUTPUT
-							      : COMEDI_INPUT;
+		data[1] = (devpriv->io_dir & bit) ? COMEDI_OUTPUT
+						  : COMEDI_INPUT;
 		break;
 
 	case INSN_CONFIG_SET_ROUTING:
@@ -905,7 +895,7 @@ static int ni_660x_dio_insn_config(struct comedi_device *dev,
 		break;
 
 	case INSN_CONFIG_GET_ROUTING:
-		data[1] = devpriv->pfi_output_selects[chan];
+		data[1] = devpriv->io_cfg[chan];
 		break;
 
 	case INSN_CONFIG_FILTER:
@@ -1084,13 +1074,12 @@ static int ni_660x_auto_attach(struct comedi_device *dev,
 		ni_tio_init_counter(&devpriv->counter_dev->counters[i]);
 
 	for (i = 0; i < NUM_PFI_CHANNELS; ++i) {
-		if (i < min_counter_pfi_chan)
-			ni_660x_set_pfi_routing(dev, i,
-						NI660X_IO_CFG_OUT_SEL_DO);
+		if (i < 8)
+			ni_660x_set_pfi_routing(dev, i, NI_660X_PFI_OUTPUT_DIO);
 		else
 			ni_660x_set_pfi_routing(dev, i,
-						NI660X_IO_CFG_OUT_SEL_COUNTER);
-		ni_660x_select_pfi_output(dev, i, NI660X_IO_CFG_OUT_SEL_HIGH_Z);
+						NI_660X_PFI_OUTPUT_COUNTER);
+		ni_660x_select_pfi_output(dev, i, 0);		/* high-z */
 	}
 
 	/*

commit 826f783a0eb15c6860d03af6d88eea3eaea34ff4
Author: H Hartley Sweeten <hsweeten@visionengravers.com>
Date:   Tue Mar 22 11:10:32 2016 -0700

    staging: comedi: ni_660x: tidy up ni_660x_dio_insn_bits()
    
    Use some local variables to clarify this function.
    
    This (*insn_bits) function is a bit different from most comedi drivers.
    Add some comments to clarify why the shifts are used.
    
    Signed-off-by: H Hartley Sweeten <hsweeten@visionengravers.com>
    Reviewed-by: Ian Abbott <abbotti@mev.co.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/drivers/ni_660x.c b/drivers/staging/comedi/drivers/ni_660x.c
index f24009c98e0a..f614927411cb 100644
--- a/drivers/staging/comedi/drivers/ni_660x.c
+++ b/drivers/staging/comedi/drivers/ni_660x.c
@@ -780,21 +780,30 @@ static void init_tio_chip(struct comedi_device *dev, int chipset)
 
 static int ni_660x_dio_insn_bits(struct comedi_device *dev,
 				 struct comedi_subdevice *s,
-				 struct comedi_insn *insn, unsigned int *data)
+				 struct comedi_insn *insn,
+				 unsigned int *data)
 {
-	unsigned int base_bitfield_channel = CR_CHAN(insn->chanspec);
+	unsigned int shift = CR_CHAN(insn->chanspec);
+	unsigned int mask = data[0] << shift;
+	unsigned int bits = data[1] << shift;
 
-	/*  Check if we have to write some bits */
-	if (data[0]) {
-		s->state &= ~(data[0] << base_bitfield_channel);
-		s->state |= (data[0] & data[1]) << base_bitfield_channel;
-		/* Write out the new digital output lines */
+	/*
+	 * There are 40 channels in this subdevice but only 32 are usable
+	 * as DIO. The shift adjusts the mask/bits to account for the base
+	 * channel in insn->chanspec. The state update can then be handled
+	 * normally for the 32 usable channels.
+	 */
+	if (mask) {
+		s->state &= ~mask;
+		s->state |= (bits & mask);
 		ni_660x_write(dev, 0, s->state, NI660X_DIO32_OUTPUT);
 	}
-	/* on return, data[1] contains the value of the digital
-	 * input and output lines. */
-	data[1] = (ni_660x_read(dev, 0, NI660X_DIO32_INPUT) >>
-			base_bitfield_channel);
+
+	/*
+	 * Return the input channels, shifted back to account for the base
+	 * channel.
+	 */
+	data[1] = ni_660x_read(dev, 0, NI660X_DIO32_INPUT) >> shift;
 
 	return insn->n;
 }

commit 7e9061869435dbeefff970b032d2b8141ce9e301
Author: H Hartley Sweeten <hsweeten@visionengravers.com>
Date:   Tue Mar 22 11:10:31 2016 -0700

    staging: comedi: ni_660x: tidy up Digital I/O subdevice init
    
    Add some whitespace to the Digital I/O subdevice init and add a
    comment about the channels. This driver is a bit goofy, only 32 of
    the 40 channels can actually be used for Digital I/Os and 32 of
    them can be routed to the counters for alternate use.
    
    Signed-off-by: H Hartley Sweeten <hsweeten@visionengravers.com>
    Reviewed-by: Ian Abbott <abbotti@mev.co.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/drivers/ni_660x.c b/drivers/staging/comedi/drivers/ni_660x.c
index 4f7f5ca01e97..f24009c98e0a 100644
--- a/drivers/staging/comedi/drivers/ni_660x.c
+++ b/drivers/staging/comedi/drivers/ni_660x.c
@@ -964,15 +964,67 @@ static int ni_660x_auto_attach(struct comedi_device *dev,
 	/* Old GENERAL-PURPOSE COUNTER/TIME (GPCT) subdevice, no longer used */
 	s->type = COMEDI_SUBD_UNUSED;
 
+	/*
+	 * Digital I/O subdevice
+	 *
+	 * There are 40 channels but only the first 32 can be digital I/Os.
+	 * The last 8 are dedicated to counters 0 and 1.
+	 *
+	 * Counter 0-3 signals are from the first TIO chip.
+	 * Counter 4-7 signals are from the second TIO chip.
+	 *
+	 * Comedi	External
+	 * PFI Chan	DIO Chan        Counter Signal
+	 * -------	--------	--------------
+	 *     0	    0
+	 *     1	    1
+	 *     2	    2
+	 *     3	    3
+	 *     4	    4
+	 *     5	    5
+	 *     6	    6
+	 *     7	    7
+	 *     8	    8		CTR 7 OUT
+	 *     9	    9		CTR 7 AUX
+	 *    10	   10		CTR 7 GATE
+	 *    11	   11		CTR 7 SOURCE
+	 *    12	   12		CTR 6 OUT
+	 *    13	   13		CTR 6 AUX
+	 *    14	   14		CTR 6 GATE
+	 *    15	   15		CTR 6 SOURCE
+	 *    16	   16		CTR 5 OUT
+	 *    17	   17		CTR 5 AUX
+	 *    18	   18		CTR 5 GATE
+	 *    19	   19		CTR 5 SOURCE
+	 *    20	   20		CTR 4 OUT
+	 *    21	   21		CTR 4 AUX
+	 *    22	   22		CTR 4 GATE
+	 *    23	   23		CTR 4 SOURCE
+	 *    24	   24		CTR 3 OUT
+	 *    25	   25		CTR 3 AUX
+	 *    26	   26		CTR 3 GATE
+	 *    27	   27		CTR 3 SOURCE
+	 *    28	   28		CTR 2 OUT
+	 *    29	   29		CTR 2 AUX
+	 *    30	   30		CTR 2 GATE
+	 *    31	   31		CTR 2 SOURCE
+	 *    32			CTR 1 OUT
+	 *    33			CTR 1 AUX
+	 *    34			CTR 1 GATE
+	 *    35			CTR 1 SOURCE
+	 *    36			CTR 0 OUT
+	 *    37			CTR 0 AUX
+	 *    38			CTR 0 GATE
+	 *    39			CTR 0 SOURCE
+	 */
 	s = &dev->subdevices[subdev++];
-	/* DIGITAL I/O SUBDEVICE */
-	s->type = COMEDI_SUBD_DIO;
-	s->subdev_flags = SDF_READABLE | SDF_WRITABLE;
-	s->n_chan = NUM_PFI_CHANNELS;
-	s->maxdata = 1;
-	s->range_table = &range_digital;
-	s->insn_bits = ni_660x_dio_insn_bits;
-	s->insn_config = ni_660x_dio_insn_config;
+	s->type		= COMEDI_SUBD_DIO;
+	s->subdev_flags	= SDF_READABLE | SDF_WRITABLE;
+	s->n_chan	= NUM_PFI_CHANNELS;
+	s->maxdata	= 1;
+	s->range_table	= &range_digital;
+	s->insn_bits	= ni_660x_dio_insn_bits;
+	s->insn_config	= ni_660x_dio_insn_config;
 
 	/*
 	 * We use the ioconfig registers to control dio direction, so zero

commit cded944fa90cf8105eedb5766ecaee82a2f86b3a
Author: H Hartley Sweeten <hsweeten@visionengravers.com>
Date:   Tue Mar 22 11:10:30 2016 -0700

    staging: comedi: ni_660x: Prefer kernel type 'u64' over 'uint64_t'
    
    Fix the checkpatch.pl issues.
    
    Signed-off-by: H Hartley Sweeten <hsweeten@visionengravers.com>
    Reviewed-by: Ian Abbott <abbotti@mev.co.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/drivers/ni_660x.c b/drivers/staging/comedi/drivers/ni_660x.c
index 6ca5c67b1a80..4f7f5ca01e97 100644
--- a/drivers/staging/comedi/drivers/ni_660x.c
+++ b/drivers/staging/comedi/drivers/ni_660x.c
@@ -331,7 +331,7 @@ static const struct ni_660x_board ni_660x_boards[] = {
 struct ni_660x_private {
 	struct mite_struct *mite;
 	struct ni_gpct_device *counter_dev;
-	uint64_t pfi_direction_bits;
+	u64 pfi_direction_bits;
 	struct mite_dma_descriptor_ring
 	*mite_rings[NI_660X_MAX_NUM_CHIPS][counters_per_chip];
 	spinlock_t mite_channel_lock;
@@ -854,7 +854,7 @@ static int ni_660x_set_pfi_routing(struct comedi_device *dev,
 	}
 
 	devpriv->pfi_output_selects[chan] = source;
-	if (devpriv->pfi_direction_bits & (((uint64_t) 1) << chan))
+	if (devpriv->pfi_direction_bits & (1ULL << chan))
 		ni_660x_select_pfi_output(dev, chan,
 					  devpriv->pfi_output_selects[chan]);
 	return 0;
@@ -867,7 +867,7 @@ static int ni_660x_dio_insn_config(struct comedi_device *dev,
 {
 	struct ni_660x_private *devpriv = dev->private;
 	unsigned int chan = CR_CHAN(insn->chanspec);
-	uint64_t bit = 1ULL << chan;
+	u64 bit = 1ULL << chan;
 	unsigned int val;
 	int ret;
 

commit 2225320ec8cc7f99c05ff217343eb63d5319c314
Author: H Hartley Sweeten <hsweeten@visionengravers.com>
Date:   Tue Mar 22 11:10:29 2016 -0700

    staging: comedi: ni_660x: Prefer 'unsigned int' to bare use of 'unsigned'
    
    Fix the checkpatch.pl issues.
    
    Signed-off-by: H Hartley Sweeten <hsweeten@visionengravers.com>
    Reviewed-by: Ian Abbott <abbotti@mev.co.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/drivers/ni_660x.c b/drivers/staging/comedi/drivers/ni_660x.c
index 6a3a12e03a21..6ca5c67b1a80 100644
--- a/drivers/staging/comedi/drivers/ni_660x.c
+++ b/drivers/staging/comedi/drivers/ni_660x.c
@@ -299,7 +299,7 @@ enum ni_660x_boardid {
 
 struct ni_660x_board {
 	const char *name;
-	unsigned n_chips;	/* total number of TIO chips */
+	unsigned int n_chips;	/* total number of TIO chips */
 };
 
 static const struct ni_660x_board ni_660x_boards[] = {
@@ -337,7 +337,7 @@ struct ni_660x_private {
 	spinlock_t mite_channel_lock;
 	/* interrupt_lock prevents races between interrupt and comedi_poll */
 	spinlock_t interrupt_lock;
-	unsigned dma_cfg[NI_660X_MAX_NUM_CHIPS];
+	unsigned int dma_cfg[NI_660X_MAX_NUM_CHIPS];
 	spinlock_t soft_reg_copy_lock;
 	unsigned short pfi_output_selects[NUM_PFI_CHANNELS];
 };
@@ -533,17 +533,17 @@ static inline struct mite_dma_descriptor_ring *mite_ring(struct ni_660x_private
 							 struct ni_gpct
 							 *counter)
 {
-	unsigned chip = counter->chip_index;
+	unsigned int chip = counter->chip_index;
 
 	return priv->mite_rings[chip][counter->counter_index];
 }
 
 static inline void ni_660x_set_dma_channel(struct comedi_device *dev,
-					   unsigned mite_channel,
+					   unsigned int mite_channel,
 					   struct ni_gpct *counter)
 {
 	struct ni_660x_private *devpriv = dev->private;
-	unsigned chip = counter->chip_index;
+	unsigned int chip = counter->chip_index;
 	unsigned long flags;
 
 	spin_lock_irqsave(&devpriv->soft_reg_copy_lock, flags);
@@ -558,11 +558,11 @@ static inline void ni_660x_set_dma_channel(struct comedi_device *dev,
 }
 
 static inline void ni_660x_unset_dma_channel(struct comedi_device *dev,
-					     unsigned mite_channel,
+					     unsigned int mite_channel,
 					     struct ni_gpct *counter)
 {
 	struct ni_660x_private *devpriv = dev->private;
-	unsigned chip = counter->chip_index;
+	unsigned int chip = counter->chip_index;
 	unsigned long flags;
 
 	spin_lock_irqsave(&devpriv->soft_reg_copy_lock, flags);
@@ -642,7 +642,7 @@ static int ni_660x_cancel(struct comedi_device *dev, struct comedi_subdevice *s)
 
 static void set_tio_counterswap(struct comedi_device *dev, int chip)
 {
-	unsigned bits = 0;
+	unsigned int bits = 0;
 
 	/*
 	 * See P. 3.5 of the Register-Level Programming manual.
@@ -670,7 +670,7 @@ static irqreturn_t ni_660x_interrupt(int irq, void *d)
 	struct comedi_device *dev = d;
 	struct ni_660x_private *devpriv = dev->private;
 	struct comedi_subdevice *s;
-	unsigned i;
+	unsigned int i;
 	unsigned long flags;
 
 	if (!dev->attached)
@@ -718,7 +718,7 @@ static int ni_660x_buf_change(struct comedi_device *dev,
 static int ni_660x_allocate_private(struct comedi_device *dev)
 {
 	struct ni_660x_private *devpriv;
-	unsigned i;
+	unsigned int i;
 
 	devpriv = comedi_alloc_devpriv(dev, sizeof(*devpriv));
 	if (!devpriv)
@@ -737,8 +737,8 @@ static int ni_660x_alloc_mite_rings(struct comedi_device *dev)
 {
 	const struct ni_660x_board *board = dev->board_ptr;
 	struct ni_660x_private *devpriv = dev->private;
-	unsigned i;
-	unsigned j;
+	unsigned int i;
+	unsigned int j;
 
 	for (i = 0; i < board->n_chips; ++i) {
 		for (j = 0; j < counters_per_chip; ++j) {
@@ -755,8 +755,8 @@ static void ni_660x_free_mite_rings(struct comedi_device *dev)
 {
 	const struct ni_660x_board *board = dev->board_ptr;
 	struct ni_660x_private *devpriv = dev->private;
-	unsigned i;
-	unsigned j;
+	unsigned int i;
+	unsigned int j;
 
 	for (i = 0; i < board->n_chips; ++i) {
 		for (j = 0; j < counters_per_chip; ++j)
@@ -767,7 +767,7 @@ static void ni_660x_free_mite_rings(struct comedi_device *dev)
 static void init_tio_chip(struct comedi_device *dev, int chipset)
 {
 	struct ni_660x_private *devpriv = dev->private;
-	unsigned i;
+	unsigned int i;
 
 	/*  init dma configuration register */
 	devpriv->dma_cfg[chipset] = 0;
@@ -782,7 +782,7 @@ static int ni_660x_dio_insn_bits(struct comedi_device *dev,
 				 struct comedi_subdevice *s,
 				 struct comedi_insn *insn, unsigned int *data)
 {
-	unsigned base_bitfield_channel = CR_CHAN(insn->chanspec);
+	unsigned int base_bitfield_channel = CR_CHAN(insn->chanspec);
 
 	/*  Check if we have to write some bits */
 	if (data[0]) {
@@ -836,8 +836,8 @@ static void ni_660x_select_pfi_output(struct comedi_device *dev,
 	ni_660x_write(dev, active_chip, bits, NI660X_IO_CFG(chan));
 }
 
-static int ni_660x_set_pfi_routing(struct comedi_device *dev, unsigned chan,
-				   unsigned source)
+static int ni_660x_set_pfi_routing(struct comedi_device *dev,
+				   unsigned int chan, unsigned int source)
 {
 	struct ni_660x_private *devpriv = dev->private;
 
@@ -923,8 +923,8 @@ static int ni_660x_auto_attach(struct comedi_device *dev,
 	unsigned int n_counters;
 	int subdev;
 	int ret;
-	unsigned i;
-	unsigned global_interrupt_config_bits;
+	unsigned int i;
+	unsigned int global_interrupt_config_bits;
 
 	if (context < ARRAY_SIZE(ni_660x_boards))
 		board = &ni_660x_boards[context];

commit b15f5069087128d42d2e00b6b1c666fd3ec42bfe
Author: H Hartley Sweeten <hsweeten@visionengravers.com>
Date:   Tue Mar 22 11:10:28 2016 -0700

    staging: comedi: ni_660x: remove ni_660x_num_counters()
    
    This inline function is only used by the (*auto_attach). Remove it
    and just use a local variable for the calculation.
    
    Signed-off-by: H Hartley Sweeten <hsweeten@visionengravers.com>
    Reviewed-by: Ian Abbott <abbotti@mev.co.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/drivers/ni_660x.c b/drivers/staging/comedi/drivers/ni_660x.c
index 595c862f236b..6a3a12e03a21 100644
--- a/drivers/staging/comedi/drivers/ni_660x.c
+++ b/drivers/staging/comedi/drivers/ni_660x.c
@@ -342,13 +342,6 @@ struct ni_660x_private {
 	unsigned short pfi_output_selects[NUM_PFI_CHANNELS];
 };
 
-static inline unsigned ni_660x_num_counters(struct comedi_device *dev)
-{
-	const struct ni_660x_board *board = dev->board_ptr;
-
-	return board->n_chips * counters_per_chip;
-}
-
 static enum ni_660x_register ni_gpct_to_660x_register(enum ni_gpct_register reg)
 {
 	switch (reg) {
@@ -927,6 +920,7 @@ static int ni_660x_auto_attach(struct comedi_device *dev,
 	const struct ni_660x_board *board = NULL;
 	struct ni_660x_private *devpriv;
 	struct comedi_subdevice *s;
+	unsigned int n_counters;
 	int subdev;
 	int ret;
 	unsigned i;
@@ -986,17 +980,17 @@ static int ni_660x_auto_attach(struct comedi_device *dev,
 	 */
 	ni_660x_write(dev, 0, 0, NI660X_STC_DIO_CONTROL);
 
+	n_counters = board->n_chips * counters_per_chip;
 	devpriv->counter_dev = ni_gpct_device_construct(dev,
 						     ni_660x_gpct_write,
 						     ni_660x_gpct_read,
 						     ni_gpct_variant_660x,
-						     ni_660x_num_counters
-						     (dev));
+						     n_counters);
 	if (!devpriv->counter_dev)
 		return -ENOMEM;
 	for (i = 0; i < NI_660X_MAX_NUM_COUNTERS; ++i) {
 		s = &dev->subdevices[subdev++];
-		if (i < ni_660x_num_counters(dev)) {
+		if (i < n_counters) {
 			s->type = COMEDI_SUBD_COUNTER;
 			s->subdev_flags = SDF_READABLE | SDF_WRITABLE |
 					  SDF_LSAMPL | SDF_CMD_READ;
@@ -1025,7 +1019,7 @@ static int ni_660x_auto_attach(struct comedi_device *dev,
 	for (i = 0; i < board->n_chips; ++i)
 		init_tio_chip(dev, i);
 
-	for (i = 0; i < ni_660x_num_counters(dev); ++i)
+	for (i = 0; i < n_counters; ++i)
 		ni_tio_init_counter(&devpriv->counter_dev->counters[i]);
 
 	for (i = 0; i < NUM_PFI_CHANNELS; ++i) {

commit 520e61915186e0538a8fc46e5e268a2000141545
Author: H Hartley Sweeten <hsweeten@visionengravers.com>
Date:   Tue Mar 22 11:10:27 2016 -0700

    staging: comedi: ni_660x: remove enum ni_660x_subdevices
    
    Hard-coding the subdevice order is normally a bad idea. If a new subdevice
    is added, or removed, it could potentially break pretty badly.
    
    Remove the enum and associated NI_660X_GPCT_SUBDEV() helper that hard-code
    the subdevice order.
    
    Fix the (*auto_attach) so it initializes all the subdevices without depending
    on the hard-coded order.
    
    Change the interrupt handler so that all the counter subdevices are handled
    without depending on the hard-coded order.
    
    Signed-off-by: H Hartley Sweeten <hsweeten@visionengravers.com>
    Reviewed-by: Ian Abbott <abbotti@mev.co.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/drivers/ni_660x.c b/drivers/staging/comedi/drivers/ni_660x.c
index 018349707947..595c862f236b 100644
--- a/drivers/staging/comedi/drivers/ni_660x.c
+++ b/drivers/staging/comedi/drivers/ni_660x.c
@@ -179,15 +179,6 @@ enum ni_660x_register {
 #define NI660X_IO_CFG_IN_SEL(_c, _s)	(((_s) & 0x7) << (((_c) % 2) ? 4 : 12))
 #define NI660X_IO_CFG_IN_SEL_MASK(_c)	NI660X_IO_CFG_IN_SEL((_c), 0x7)
 
-enum ni_660x_subdevices {
-	NI_660X_DIO_SUBDEV = 1,
-	NI_660X_GPCT_SUBDEV_0 = 2
-};
-static inline unsigned NI_660X_GPCT_SUBDEV(unsigned index)
-{
-	return NI_660X_GPCT_SUBDEV_0 + index;
-}
-
 struct ni_660x_register_data {
 	int offset;		/*  Offset from base address from GPCT chip */
 	char size;		/* 2 or 4 bytes */
@@ -694,9 +685,10 @@ static irqreturn_t ni_660x_interrupt(int irq, void *d)
 	/* lock to avoid race with comedi_poll */
 	spin_lock_irqsave(&devpriv->interrupt_lock, flags);
 	smp_mb();
-	for (i = 0; i < ni_660x_num_counters(dev); ++i) {
-		s = &dev->subdevices[NI_660X_GPCT_SUBDEV(i)];
-		ni_660x_handle_gpct_interrupt(dev, s);
+	for (i = 0; i < dev->n_subdevices; ++i) {
+		s = &dev->subdevices[i];
+		if (s->type == COMEDI_SUBD_COUNTER)
+			ni_660x_handle_gpct_interrupt(dev, s);
 	}
 	spin_unlock_irqrestore(&devpriv->interrupt_lock, flags);
 	return IRQ_HANDLED;
@@ -935,6 +927,7 @@ static int ni_660x_auto_attach(struct comedi_device *dev,
 	const struct ni_660x_board *board = NULL;
 	struct ni_660x_private *devpriv;
 	struct comedi_subdevice *s;
+	int subdev;
 	int ret;
 	unsigned i;
 	unsigned global_interrupt_config_bits;
@@ -971,11 +964,13 @@ static int ni_660x_auto_attach(struct comedi_device *dev,
 	if (ret)
 		return ret;
 
-	s = &dev->subdevices[0];
+	subdev = 0;
+
+	s = &dev->subdevices[subdev++];
 	/* Old GENERAL-PURPOSE COUNTER/TIME (GPCT) subdevice, no longer used */
 	s->type = COMEDI_SUBD_UNUSED;
 
-	s = &dev->subdevices[NI_660X_DIO_SUBDEV];
+	s = &dev->subdevices[subdev++];
 	/* DIGITAL I/O SUBDEVICE */
 	s->type = COMEDI_SUBD_DIO;
 	s->subdev_flags = SDF_READABLE | SDF_WRITABLE;
@@ -1000,7 +995,7 @@ static int ni_660x_auto_attach(struct comedi_device *dev,
 	if (!devpriv->counter_dev)
 		return -ENOMEM;
 	for (i = 0; i < NI_660X_MAX_NUM_COUNTERS; ++i) {
-		s = &dev->subdevices[NI_660X_GPCT_SUBDEV(i)];
+		s = &dev->subdevices[subdev++];
 		if (i < ni_660x_num_counters(dev)) {
 			s->type = COMEDI_SUBD_COUNTER;
 			s->subdev_flags = SDF_READABLE | SDF_WRITABLE |

commit 6d40805b0b4e4392e68fea0028edcafa5fcdc04a
Author: H Hartley Sweeten <hsweeten@visionengravers.com>
Date:   Tue Mar 22 11:10:26 2016 -0700

    staging: comedi: ni_660x: fix block comment issues
    
    Fix the checkpatch.pl issues about:
    
    WARNING: Block comments use * on subsequent lines
    WARNING: Block comments use a trailing */ on a separate line
    
    Signed-off-by: H Hartley Sweeten <hsweeten@visionengravers.com>
    Reviewed-by: Ian Abbott <abbotti@mev.co.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/drivers/ni_660x.c b/drivers/staging/comedi/drivers/ni_660x.c
index 232c89767da8..018349707947 100644
--- a/drivers/staging/comedi/drivers/ni_660x.c
+++ b/drivers/staging/comedi/drivers/ni_660x.c
@@ -48,8 +48,7 @@ enum ni_660x_constants {
 };
 
 #define NUM_PFI_CHANNELS 40
-/* really there are only up to 3 dma channels, but the register layout allows
-for 4 */
+/* there are only up to 3 dma channels, but the register layout allows for 4 */
 #define MAX_DMA_CHANNEL 4
 
 /* See Register-Level Programmer Manual page 3.1 */
@@ -985,8 +984,11 @@ static int ni_660x_auto_attach(struct comedi_device *dev,
 	s->range_table = &range_digital;
 	s->insn_bits = ni_660x_dio_insn_bits;
 	s->insn_config = ni_660x_dio_insn_config;
-	/*  we use the ioconfig registers to control dio direction, so zero
-	output enables in stc dio control reg */
+
+	/*
+	 * We use the ioconfig registers to control dio direction, so zero
+	 * output enables in stc dio control reg.
+	 */
 	ni_660x_write(dev, 0, 0, NI660X_STC_DIO_CONTROL);
 
 	devpriv->counter_dev = ni_gpct_device_construct(dev,
@@ -1040,8 +1042,11 @@ static int ni_660x_auto_attach(struct comedi_device *dev,
 						NI660X_IO_CFG_OUT_SEL_COUNTER);
 		ni_660x_select_pfi_output(dev, i, NI660X_IO_CFG_OUT_SEL_HIGH_Z);
 	}
-	/* to be safe, set counterswap bits on tio chips after all the counter
-	   outputs have been set to high impedance mode */
+
+	/*
+	 * To be safe, set counterswap bits on tio chips after all the counter
+	 * outputs have been set to high impedance mode.
+	 */
 	for (i = 0; i < board->n_chips; ++i)
 		set_tio_counterswap(dev, i);
 

commit ff1e71be56d6c493084eac86afa0aeb59bca9c53
Author: H Hartley Sweeten <hsweeten@visionengravers.com>
Date:   Tue Mar 22 11:10:25 2016 -0700

    staging: comedi: ni_660x: remove BUG_ON() in ni_660x_request_mite_channel()
    
    This BUG_ON() happens if a mite DMA channel is already requested when an
    ansynchronous command is started for one of the counter subdevices.
    
    The comedi core will only call the (*do_cmd) if the subdevice is not busy.
    In this driver, the (*cancel) for the subdevice will always release any
    requested mite DMA channel.
    
    Remove the BUG_ON() which can never occur.
    
    Signed-off-by: H Hartley Sweeten <hsweeten@visionengravers.com>
    Reviewed-by: Ian Abbott <abbotti@mev.co.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/drivers/ni_660x.c b/drivers/staging/comedi/drivers/ni_660x.c
index 79678af8e02c..232c89767da8 100644
--- a/drivers/staging/comedi/drivers/ni_660x.c
+++ b/drivers/staging/comedi/drivers/ni_660x.c
@@ -599,7 +599,6 @@ static int ni_660x_request_mite_channel(struct comedi_device *dev,
 	struct mite_channel *mite_chan;
 
 	spin_lock_irqsave(&devpriv->mite_channel_lock, flags);
-	BUG_ON(counter->mite_chan);
 	mite_chan = mite_request_channel(devpriv->mite,
 					 mite_ring(devpriv, counter));
 	if (!mite_chan) {

commit 518d38423b48ad23b2f4b13dd9a027aa37423f1d
Author: H Hartley Sweeten <hsweeten@visionengravers.com>
Date:   Tue Mar 22 11:10:24 2016 -0700

    staging: comedi: ni_660x: tidy up ni_660x_select_pfi_output()
    
    Tidy up this function to fix the checkpatch.pl issues:
    
    WARNING: Prefer 'unsigned int' to bare use of 'unsigned'
    
    For aesthetics, remove the static const local variables.
    
    Signed-off-by: H Hartley Sweeten <hsweeten@visionengravers.com>
    Reviewed-by: Ian Abbott <abbotti@mev.co.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/drivers/ni_660x.c b/drivers/staging/comedi/drivers/ni_660x.c
index e0532f4d6bc7..79678af8e02c 100644
--- a/drivers/staging/comedi/drivers/ni_660x.c
+++ b/drivers/staging/comedi/drivers/ni_660x.c
@@ -817,46 +817,40 @@ static int ni_660x_dio_insn_bits(struct comedi_device *dev,
 }
 
 static void ni_660x_select_pfi_output(struct comedi_device *dev,
-				      unsigned pfi_channel,
-				      unsigned output_select)
+				      unsigned int chan, unsigned int out_sel)
 {
 	const struct ni_660x_board *board = dev->board_ptr;
-	static const unsigned counter_4_7_first_pfi = 8;
-	static const unsigned counter_4_7_last_pfi = 23;
-	unsigned active_chipset = 0;
-	unsigned idle_chipset = 0;
-	unsigned active_bits;
-	unsigned idle_bits;
+	unsigned int active_chip = 0;
+	unsigned int idle_chip = 0;
+	unsigned int bits;
 
 	if (board->n_chips > 1) {
-		if (output_select == NI660X_IO_CFG_OUT_SEL_COUNTER &&
-		    pfi_channel >= counter_4_7_first_pfi &&
-		    pfi_channel <= counter_4_7_last_pfi) {
-			active_chipset = 1;
-			idle_chipset = 0;
+		if (out_sel == NI660X_IO_CFG_OUT_SEL_COUNTER &&
+		    chan >= 8 && chan <= 23) {
+			/* counters 4-7 pfi channels */
+			active_chip = 1;
+			idle_chip = 0;
 		} else {
-			active_chipset = 0;
-			idle_chipset = 1;
+			/* counters 0-3 pfi channels */
+			active_chip = 0;
+			idle_chip = 1;
 		}
 	}
 
-	if (idle_chipset != active_chipset) {
-		idle_bits = ni_660x_read(dev, idle_chipset,
-					 NI660X_IO_CFG(pfi_channel));
-		idle_bits &= ~NI660X_IO_CFG_OUT_SEL_MASK(pfi_channel);
-		idle_bits |=
-		    NI660X_IO_CFG_OUT_SEL(pfi_channel,
-					  NI660X_IO_CFG_OUT_SEL_HIGH_Z);
-		ni_660x_write(dev, idle_chipset, idle_bits,
-			      NI660X_IO_CFG(pfi_channel));
+	if (idle_chip != active_chip) {
+		/* set the pfi channel to high-z on the inactive chip */
+		bits = ni_660x_read(dev, idle_chip, NI660X_IO_CFG(chan));
+		bits &= ~NI660X_IO_CFG_OUT_SEL_MASK(chan);
+		bits |= NI660X_IO_CFG_OUT_SEL(chan,
+					      NI660X_IO_CFG_OUT_SEL_HIGH_Z);
+		ni_660x_write(dev, idle_chip, bits, NI660X_IO_CFG(chan));
 	}
 
-	active_bits = ni_660x_read(dev, active_chipset,
-				   NI660X_IO_CFG(pfi_channel));
-	active_bits &= ~NI660X_IO_CFG_OUT_SEL_MASK(pfi_channel);
-	active_bits |= NI660X_IO_CFG_OUT_SEL(pfi_channel, output_select);
-	ni_660x_write(dev, active_chipset, active_bits,
-		      NI660X_IO_CFG(pfi_channel));
+	/* set the pfi channel output on the active chip */
+	bits = ni_660x_read(dev, active_chip, NI660X_IO_CFG(chan));
+	bits &= ~NI660X_IO_CFG_OUT_SEL_MASK(chan);
+	bits |= NI660X_IO_CFG_OUT_SEL(chan, out_sel);
+	ni_660x_write(dev, active_chip, bits, NI660X_IO_CFG(chan));
 }
 
 static int ni_660x_set_pfi_routing(struct comedi_device *dev, unsigned chan,

commit dc285820cc19a666aea45ac74e9737c2afcf8189
Author: H Hartley Sweeten <hsweeten@visionengravers.com>
Date:   Tue Mar 22 11:10:23 2016 -0700

    staging: comedi: ni_660x: tidy up ni_gpct_{write, read}_register()
    
    Rename these functions so they have namespace associated with the
    driver.
    
    Fix the checkpatch.pl issues:
    
    WARNING: Prefer 'unsigned int' to bare use of 'unsigned'
    
    Signed-off-by: H Hartley Sweeten <hsweeten@visionengravers.com>
    Reviewed-by: Ian Abbott <abbotti@mev.co.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/drivers/ni_660x.c b/drivers/staging/comedi/drivers/ni_660x.c
index cd101bb66bad..e0532f4d6bc7 100644
--- a/drivers/staging/comedi/drivers/ni_660x.c
+++ b/drivers/staging/comedi/drivers/ni_660x.c
@@ -527,24 +527,22 @@ static unsigned int ni_660x_read(struct comedi_device *dev,
 	return readl(dev->mmio + addr);
 }
 
-static void ni_gpct_write_register(struct ni_gpct *counter, unsigned bits,
-				   enum ni_gpct_register reg)
+static void ni_660x_gpct_write(struct ni_gpct *counter, unsigned int bits,
+			       enum ni_gpct_register reg)
 {
 	struct comedi_device *dev = counter->counter_dev->dev;
 	enum ni_660x_register ni_660x_register = ni_gpct_to_660x_register(reg);
-	unsigned chip = counter->chip_index;
 
-	ni_660x_write(dev, chip, bits, ni_660x_register);
+	ni_660x_write(dev, counter->chip_index, bits, ni_660x_register);
 }
 
-static unsigned ni_gpct_read_register(struct ni_gpct *counter,
+static unsigned int ni_660x_gpct_read(struct ni_gpct *counter,
 				      enum ni_gpct_register reg)
 {
 	struct comedi_device *dev = counter->counter_dev->dev;
 	enum ni_660x_register ni_660x_register = ni_gpct_to_660x_register(reg);
-	unsigned chip = counter->chip_index;
 
-	return ni_660x_read(dev, chip, ni_660x_register);
+	return ni_660x_read(dev, counter->chip_index, ni_660x_register);
 }
 
 static inline struct mite_dma_descriptor_ring *mite_ring(struct ni_660x_private
@@ -999,8 +997,8 @@ static int ni_660x_auto_attach(struct comedi_device *dev,
 	ni_660x_write(dev, 0, 0, NI660X_STC_DIO_CONTROL);
 
 	devpriv->counter_dev = ni_gpct_device_construct(dev,
-						     &ni_gpct_write_register,
-						     &ni_gpct_read_register,
+						     ni_660x_gpct_write,
+						     ni_660x_gpct_read,
 						     ni_gpct_variant_660x,
 						     ni_660x_num_counters
 						     (dev));

commit ad98c18cb9de633d1023114842d1e895766b99b2
Author: H Hartley Sweeten <hsweeten@visionengravers.com>
Date:   Tue Mar 22 11:10:22 2016 -0700

    staging: comedi: ni_660x: tidy up ni_660x_read_register()
    
    Rename this function to help shorten some of the long lines.
    
    Remove the inline, let the compiler figure it out.
    
    Change the 'unsigned' parameters to 'unsigned int' to fix the
    checkpatch.pl issues:
    
    WARNING: Prefer 'unsigned int' to bare use of 'unsigned'
    
    Signed-off-by: H Hartley Sweeten <hsweeten@visionengravers.com>
    Reviewed-by: Ian Abbott <abbotti@mev.co.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/drivers/ni_660x.c b/drivers/staging/comedi/drivers/ni_660x.c
index aa40ab6f02fa..cd101bb66bad 100644
--- a/drivers/staging/comedi/drivers/ni_660x.c
+++ b/drivers/staging/comedi/drivers/ni_660x.c
@@ -516,9 +516,9 @@ static void ni_660x_write(struct comedi_device *dev,
 		writel(bits, dev->mmio + addr);
 }
 
-static inline unsigned ni_660x_read_register(struct comedi_device *dev,
-					     unsigned chip,
-					     enum ni_660x_register reg)
+static unsigned int ni_660x_read(struct comedi_device *dev,
+				 unsigned int chip,
+				 enum ni_660x_register reg)
 {
 	unsigned int addr = GPCT_OFFSET[chip] + ni_660x_reg_data[reg].offset;
 
@@ -544,7 +544,7 @@ static unsigned ni_gpct_read_register(struct ni_gpct *counter,
 	enum ni_660x_register ni_660x_register = ni_gpct_to_660x_register(reg);
 	unsigned chip = counter->chip_index;
 
-	return ni_660x_read_register(dev, chip, ni_660x_register);
+	return ni_660x_read(dev, chip, ni_660x_register);
 }
 
 static inline struct mite_dma_descriptor_ring *mite_ring(struct ni_660x_private
@@ -812,7 +812,7 @@ static int ni_660x_dio_insn_bits(struct comedi_device *dev,
 	}
 	/* on return, data[1] contains the value of the digital
 	 * input and output lines. */
-	data[1] = (ni_660x_read_register(dev, 0, NI660X_DIO32_INPUT) >>
+	data[1] = (ni_660x_read(dev, 0, NI660X_DIO32_INPUT) >>
 			base_bitfield_channel);
 
 	return insn->n;
@@ -843,9 +843,8 @@ static void ni_660x_select_pfi_output(struct comedi_device *dev,
 	}
 
 	if (idle_chipset != active_chipset) {
-		idle_bits =
-		    ni_660x_read_register(dev, idle_chipset,
-					  NI660X_IO_CFG(pfi_channel));
+		idle_bits = ni_660x_read(dev, idle_chipset,
+					 NI660X_IO_CFG(pfi_channel));
 		idle_bits &= ~NI660X_IO_CFG_OUT_SEL_MASK(pfi_channel);
 		idle_bits |=
 		    NI660X_IO_CFG_OUT_SEL(pfi_channel,
@@ -854,9 +853,8 @@ static void ni_660x_select_pfi_output(struct comedi_device *dev,
 			      NI660X_IO_CFG(pfi_channel));
 	}
 
-	active_bits =
-	    ni_660x_read_register(dev, active_chipset,
-				  NI660X_IO_CFG(pfi_channel));
+	active_bits = ni_660x_read(dev, active_chipset,
+				   NI660X_IO_CFG(pfi_channel));
 	active_bits &= ~NI660X_IO_CFG_OUT_SEL_MASK(pfi_channel);
 	active_bits |= NI660X_IO_CFG_OUT_SEL(pfi_channel, output_select);
 	ni_660x_write(dev, active_chipset, active_bits,
@@ -927,7 +925,7 @@ static int ni_660x_dio_insn_config(struct comedi_device *dev,
 		break;
 
 	case INSN_CONFIG_FILTER:
-		val = ni_660x_read_register(dev, 0, NI660X_IO_CFG(chan));
+		val = ni_660x_read(dev, 0, NI660X_IO_CFG(chan));
 		val &= ~NI660X_IO_CFG_IN_SEL_MASK(chan);
 		val |= NI660X_IO_CFG_IN_SEL(chan, data[1]);
 		ni_660x_write(dev, 0, val, NI660X_IO_CFG(chan));

commit 9678b73e273abcd5ab13b7ecc44521f501529ca4
Author: H Hartley Sweeten <hsweeten@visionengravers.com>
Date:   Tue Mar 22 11:10:21 2016 -0700

    staging: comedi: ni_660x: tidy up ni_660x_write_register()
    
    Rename this function to help shorten some of the long lines.
    
    Remove the inline, let the compiler figure it out.
    
    Change the 'unsigned' parameters to 'unsigned int' to fix the
    checkpatch.pl issues:
    
    WARNING: Prefer 'unsigned int' to bare use of 'unsigned'
    
    Signed-off-by: H Hartley Sweeten <hsweeten@visionengravers.com>
    Reviewed-by: Ian Abbott <abbotti@mev.co.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/drivers/ni_660x.c b/drivers/staging/comedi/drivers/ni_660x.c
index 773147af4137..aa40ab6f02fa 100644
--- a/drivers/staging/comedi/drivers/ni_660x.c
+++ b/drivers/staging/comedi/drivers/ni_660x.c
@@ -504,9 +504,9 @@ static enum ni_660x_register ni_gpct_to_660x_register(enum ni_gpct_register reg)
 	}
 }
 
-static inline void ni_660x_write_register(struct comedi_device *dev,
-					  unsigned chip, unsigned bits,
-					  enum ni_660x_register reg)
+static void ni_660x_write(struct comedi_device *dev,
+			  unsigned int chip, unsigned int bits,
+			  enum ni_660x_register reg)
 {
 	unsigned int addr = GPCT_OFFSET[chip] + ni_660x_reg_data[reg].offset;
 
@@ -534,7 +534,7 @@ static void ni_gpct_write_register(struct ni_gpct *counter, unsigned bits,
 	enum ni_660x_register ni_660x_register = ni_gpct_to_660x_register(reg);
 	unsigned chip = counter->chip_index;
 
-	ni_660x_write_register(dev, chip, bits, ni_660x_register);
+	ni_660x_write(dev, chip, bits, ni_660x_register);
 }
 
 static unsigned ni_gpct_read_register(struct ni_gpct *counter,
@@ -569,9 +569,9 @@ static inline void ni_660x_set_dma_channel(struct comedi_device *dev,
 	devpriv->dma_cfg[chip] &= ~NI660X_DMA_CFG_SEL_MASK(mite_channel);
 	devpriv->dma_cfg[chip] |= NI660X_DMA_CFG_SEL(mite_channel,
 						     counter->counter_index);
-	ni_660x_write_register(dev, chip, devpriv->dma_cfg[chip] |
-			       NI660X_DMA_CFG_RESET(mite_channel),
-			       NI660X_DMA_CFG);
+	ni_660x_write(dev, chip, devpriv->dma_cfg[chip] |
+		      NI660X_DMA_CFG_RESET(mite_channel),
+		      NI660X_DMA_CFG);
 	mmiowb();
 	spin_unlock_irqrestore(&devpriv->soft_reg_copy_lock, flags);
 }
@@ -587,8 +587,7 @@ static inline void ni_660x_unset_dma_channel(struct comedi_device *dev,
 	spin_lock_irqsave(&devpriv->soft_reg_copy_lock, flags);
 	devpriv->dma_cfg[chip] &= ~NI660X_DMA_CFG_SEL_MASK(mite_channel);
 	devpriv->dma_cfg[chip] |= NI660X_DMA_CFG_SEL_NONE(mite_channel);
-	ni_660x_write_register(dev, chip, devpriv->dma_cfg[chip],
-			       NI660X_DMA_CFG);
+	ni_660x_write(dev, chip, devpriv->dma_cfg[chip], NI660X_DMA_CFG);
 	mmiowb();
 	spin_unlock_irqrestore(&devpriv->soft_reg_copy_lock, flags);
 }
@@ -674,7 +673,7 @@ static void set_tio_counterswap(struct comedi_device *dev, int chip)
 	if (chip)
 		bits = NI660X_CLK_CFG_COUNTER_SWAP;
 
-	ni_660x_write_register(dev, chip, bits, NI660X_CLK_CFG);
+	ni_660x_write(dev, chip, bits, NI660X_CLK_CFG);
 }
 
 static void ni_660x_handle_gpct_interrupt(struct comedi_device *dev,
@@ -793,10 +792,9 @@ static void init_tio_chip(struct comedi_device *dev, int chipset)
 	devpriv->dma_cfg[chipset] = 0;
 	for (i = 0; i < MAX_DMA_CHANNEL; ++i)
 		devpriv->dma_cfg[chipset] |= NI660X_DMA_CFG_SEL_NONE(i);
-	ni_660x_write_register(dev, chipset, devpriv->dma_cfg[chipset],
-			       NI660X_DMA_CFG);
+	ni_660x_write(dev, chipset, devpriv->dma_cfg[chipset], NI660X_DMA_CFG);
 	for (i = 0; i < NUM_PFI_CHANNELS; ++i)
-		ni_660x_write_register(dev, chipset, 0, NI660X_IO_CFG(i));
+		ni_660x_write(dev, chipset, 0, NI660X_IO_CFG(i));
 }
 
 static int ni_660x_dio_insn_bits(struct comedi_device *dev,
@@ -810,7 +808,7 @@ static int ni_660x_dio_insn_bits(struct comedi_device *dev,
 		s->state &= ~(data[0] << base_bitfield_channel);
 		s->state |= (data[0] & data[1]) << base_bitfield_channel;
 		/* Write out the new digital output lines */
-		ni_660x_write_register(dev, 0, s->state, NI660X_DIO32_OUTPUT);
+		ni_660x_write(dev, 0, s->state, NI660X_DIO32_OUTPUT);
 	}
 	/* on return, data[1] contains the value of the digital
 	 * input and output lines. */
@@ -852,8 +850,8 @@ static void ni_660x_select_pfi_output(struct comedi_device *dev,
 		idle_bits |=
 		    NI660X_IO_CFG_OUT_SEL(pfi_channel,
 					  NI660X_IO_CFG_OUT_SEL_HIGH_Z);
-		ni_660x_write_register(dev, idle_chipset, idle_bits,
-				       NI660X_IO_CFG(pfi_channel));
+		ni_660x_write(dev, idle_chipset, idle_bits,
+			      NI660X_IO_CFG(pfi_channel));
 	}
 
 	active_bits =
@@ -861,8 +859,8 @@ static void ni_660x_select_pfi_output(struct comedi_device *dev,
 				  NI660X_IO_CFG(pfi_channel));
 	active_bits &= ~NI660X_IO_CFG_OUT_SEL_MASK(pfi_channel);
 	active_bits |= NI660X_IO_CFG_OUT_SEL(pfi_channel, output_select);
-	ni_660x_write_register(dev, active_chipset, active_bits,
-			       NI660X_IO_CFG(pfi_channel));
+	ni_660x_write(dev, active_chipset, active_bits,
+		      NI660X_IO_CFG(pfi_channel));
 }
 
 static int ni_660x_set_pfi_routing(struct comedi_device *dev, unsigned chan,
@@ -932,7 +930,7 @@ static int ni_660x_dio_insn_config(struct comedi_device *dev,
 		val = ni_660x_read_register(dev, 0, NI660X_IO_CFG(chan));
 		val &= ~NI660X_IO_CFG_IN_SEL_MASK(chan);
 		val |= NI660X_IO_CFG_IN_SEL(chan, data[1]);
-		ni_660x_write_register(dev, 0, val, NI660X_IO_CFG(chan));
+		ni_660x_write(dev, 0, val, NI660X_IO_CFG(chan));
 		break;
 
 	default:
@@ -1000,7 +998,7 @@ static int ni_660x_auto_attach(struct comedi_device *dev,
 	s->insn_config = ni_660x_dio_insn_config;
 	/*  we use the ioconfig registers to control dio direction, so zero
 	output enables in stc dio control reg */
-	ni_660x_write_register(dev, 0, 0, NI660X_STC_DIO_CONTROL);
+	ni_660x_write(dev, 0, 0, NI660X_STC_DIO_CONTROL);
 
 	devpriv->counter_dev = ni_gpct_device_construct(dev,
 						     &ni_gpct_write_register,
@@ -1068,8 +1066,8 @@ static int ni_660x_auto_attach(struct comedi_device *dev,
 	global_interrupt_config_bits = NI660X_GLOBAL_INT_GLOBAL;
 	if (board->n_chips > 1)
 		global_interrupt_config_bits |= NI660X_GLOBAL_INT_CASCADE;
-	ni_660x_write_register(dev, 0, global_interrupt_config_bits,
-			       NI660X_GLOBAL_INT_CFG);
+	ni_660x_write(dev, 0, global_interrupt_config_bits,
+		      NI660X_GLOBAL_INT_CFG);
 
 	return 0;
 }

commit 41014593caebadec2f022d96d3326816599d439d
Author: H Hartley Sweeten <hsweeten@visionengravers.com>
Date:   Tue Mar 22 11:10:20 2016 -0700

    staging: comedi: ni_660x: cleanup the NI660X_GLOBAL_INT_{STATUS, CFG}
    
    Remove the enums global_interrupt_{status,config}_register_bits and
    add defines for the CamelCase values.
    
    Signed-off-by: H Hartley Sweeten <hsweeten@visionengravers.com>
    Reviewed-by: Ian Abbott <abbotti@mev.co.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/drivers/ni_660x.c b/drivers/staging/comedi/drivers/ni_660x.c
index 0b37982f021e..773147af4137 100644
--- a/drivers/staging/comedi/drivers/ni_660x.c
+++ b/drivers/staging/comedi/drivers/ni_660x.c
@@ -157,6 +157,14 @@ enum ni_660x_register {
 
 #define NI660X_CLK_CFG_COUNTER_SWAP	BIT(21)
 
+#define NI660X_GLOBAL_INT_COUNTER0	BIT(8)
+#define NI660X_GLOBAL_INT_COUNTER1	BIT(9)
+#define NI660X_GLOBAL_INT_COUNTER2	BIT(10)
+#define NI660X_GLOBAL_INT_COUNTER3	BIT(11)
+#define NI660X_GLOBAL_INT_CASCADE	BIT(29)
+#define NI660X_GLOBAL_INT_GLOBAL_POL	BIT(30)
+#define NI660X_GLOBAL_INT_GLOBAL	BIT(31)
+
 #define NI660X_DMA_CFG_SEL(_c, _s)	(((_s) & 0x1f) << (8 * (_c)))
 #define NI660X_DMA_CFG_SEL_MASK(_c)	NI660X_DMA_CFG_SEL((_c), 0x1f)
 #define NI660X_DMA_CFG_SEL_NONE(_c)	NI660X_DMA_CFG_SEL((_c), 0x1f)
@@ -287,21 +295,6 @@ static const struct ni_660x_register_data ni_660x_reg_data[NI660X_NUM_REGS] = {
 	[NI660X_IO_CFG_38_39]		= { 0x7a2, 2 }	/* read/write */
 };
 
-enum global_interrupt_status_register_bits {
-	Counter_0_Int_Bit = 0x100,
-	Counter_1_Int_Bit = 0x200,
-	Counter_2_Int_Bit = 0x400,
-	Counter_3_Int_Bit = 0x800,
-	Cascade_Int_Bit = 0x20000000,
-	Global_Int_Bit = 0x80000000
-};
-
-enum global_interrupt_config_register_bits {
-	Cascade_Int_Enable_Bit = 0x20000000,
-	Global_Int_Polarity_Bit = 0x40000000,
-	Global_Int_Enable_Bit = 0x80000000
-};
-
 /* Offset of the GPCT chips from the base-address of the card */
 /* First chip is at base-address + 0x00, etc. */
 static const unsigned GPCT_OFFSET[2] = { 0x0, 0x800 };
@@ -1072,9 +1065,9 @@ static int ni_660x_auto_attach(struct comedi_device *dev,
 		return ret;
 	}
 	dev->irq = pcidev->irq;
-	global_interrupt_config_bits = Global_Int_Enable_Bit;
+	global_interrupt_config_bits = NI660X_GLOBAL_INT_GLOBAL;
 	if (board->n_chips > 1)
-		global_interrupt_config_bits |= Cascade_Int_Enable_Bit;
+		global_interrupt_config_bits |= NI660X_GLOBAL_INT_CASCADE;
 	ni_660x_write_register(dev, 0, global_interrupt_config_bits,
 			       NI660X_GLOBAL_INT_CFG);
 

commit fecf4cce0021aebd587f7bbd970806c24988ef26
Author: H Hartley Sweeten <hsweeten@visionengravers.com>
Date:   Tue Mar 22 11:10:19 2016 -0700

    staging: comedi: ni_660x: cleanup the NI660X_DMA_CFG register helpers
    
    The BUG_ON() checks in the helper functions are not necessary. The mite
    driver quiries the PCI chip to determine the number of DMA channels.
    This is then used when a DMA channel is requested so the channel will
    always be in range.
    
    Convert the inline functions used to set the bits in the NI600X_DMA_CFG
    register into macros. Also convert the associated enum dma_selection.
    This clarifies the association with the register.
    
    Rename the associated 'dma_configuration_soft_copies' member of the
    private data to allow shorting some of the ugly long lines in the
    driver.
    
    This also fixes a number of checkpatch.pl issues about:
    
    WARNING: Prefer 'unsigned int' to bare use of 'unsigned'
    
    Signed-off-by: H Hartley Sweeten <hsweeten@visionengravers.com>
    Reviewed-by: Ian Abbott <abbotti@mev.co.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/drivers/ni_660x.c b/drivers/staging/comedi/drivers/ni_660x.c
index 30089cd7f89b..0b37982f021e 100644
--- a/drivers/staging/comedi/drivers/ni_660x.c
+++ b/drivers/staging/comedi/drivers/ni_660x.c
@@ -157,6 +157,11 @@ enum ni_660x_register {
 
 #define NI660X_CLK_CFG_COUNTER_SWAP	BIT(21)
 
+#define NI660X_DMA_CFG_SEL(_c, _s)	(((_s) & 0x1f) << (8 * (_c)))
+#define NI660X_DMA_CFG_SEL_MASK(_c)	NI660X_DMA_CFG_SEL((_c), 0x1f)
+#define NI660X_DMA_CFG_SEL_NONE(_c)	NI660X_DMA_CFG_SEL((_c), 0x1f)
+#define NI660X_DMA_CFG_RESET(_c)	NI660X_DMA_CFG_SEL((_c), 0x80)
+
 #define NI660X_IO_CFG(x)		(NI660X_IO_CFG_0_1 + ((x) / 2))
 #define NI660X_IO_CFG_OUT_SEL(_c, _s)	(((_s) & 0x3) << (((_c) % 2) ? 0 : 8))
 #define NI660X_IO_CFG_OUT_SEL_MASK(_c)	NI660X_IO_CFG_OUT_SEL((_c), 0x3)
@@ -282,29 +287,6 @@ static const struct ni_660x_register_data ni_660x_reg_data[NI660X_NUM_REGS] = {
 	[NI660X_IO_CFG_38_39]		= { 0x7a2, 2 }	/* read/write */
 };
 
-/* dma configuration register bits */
-static inline unsigned dma_select_mask(unsigned dma_channel)
-{
-	BUG_ON(dma_channel >= MAX_DMA_CHANNEL);
-	return 0x1f << (8 * dma_channel);
-}
-
-enum dma_selection {
-	dma_selection_none = 0x1f,
-};
-
-static inline unsigned dma_select_bits(unsigned dma_channel, unsigned selection)
-{
-	BUG_ON(dma_channel >= MAX_DMA_CHANNEL);
-	return (selection << (8 * dma_channel)) & dma_select_mask(dma_channel);
-}
-
-static inline unsigned dma_reset_bit(unsigned dma_channel)
-{
-	BUG_ON(dma_channel >= MAX_DMA_CHANNEL);
-	return 0x80 << (8 * dma_channel);
-}
-
 enum global_interrupt_status_register_bits {
 	Counter_0_Int_Bit = 0x100,
 	Counter_1_Int_Bit = 0x200,
@@ -372,7 +354,7 @@ struct ni_660x_private {
 	spinlock_t mite_channel_lock;
 	/* interrupt_lock prevents races between interrupt and comedi_poll */
 	spinlock_t interrupt_lock;
-	unsigned dma_configuration_soft_copies[NI_660X_MAX_NUM_CHIPS];
+	unsigned dma_cfg[NI_660X_MAX_NUM_CHIPS];
 	spinlock_t soft_reg_copy_lock;
 	unsigned short pfi_output_selects[NUM_PFI_CHANNELS];
 };
@@ -591,13 +573,12 @@ static inline void ni_660x_set_dma_channel(struct comedi_device *dev,
 	unsigned long flags;
 
 	spin_lock_irqsave(&devpriv->soft_reg_copy_lock, flags);
-	devpriv->dma_configuration_soft_copies[chip] &=
-		~dma_select_mask(mite_channel);
-	devpriv->dma_configuration_soft_copies[chip] |=
-		dma_select_bits(mite_channel, counter->counter_index);
-	ni_660x_write_register(dev, chip,
-			       devpriv->dma_configuration_soft_copies[chip] |
-			       dma_reset_bit(mite_channel), NI660X_DMA_CFG);
+	devpriv->dma_cfg[chip] &= ~NI660X_DMA_CFG_SEL_MASK(mite_channel);
+	devpriv->dma_cfg[chip] |= NI660X_DMA_CFG_SEL(mite_channel,
+						     counter->counter_index);
+	ni_660x_write_register(dev, chip, devpriv->dma_cfg[chip] |
+			       NI660X_DMA_CFG_RESET(mite_channel),
+			       NI660X_DMA_CFG);
 	mmiowb();
 	spin_unlock_irqrestore(&devpriv->soft_reg_copy_lock, flags);
 }
@@ -611,12 +592,9 @@ static inline void ni_660x_unset_dma_channel(struct comedi_device *dev,
 	unsigned long flags;
 
 	spin_lock_irqsave(&devpriv->soft_reg_copy_lock, flags);
-	devpriv->dma_configuration_soft_copies[chip] &=
-	    ~dma_select_mask(mite_channel);
-	devpriv->dma_configuration_soft_copies[chip] |=
-	    dma_select_bits(mite_channel, dma_selection_none);
-	ni_660x_write_register(dev, chip,
-			       devpriv->dma_configuration_soft_copies[chip],
+	devpriv->dma_cfg[chip] &= ~NI660X_DMA_CFG_SEL_MASK(mite_channel);
+	devpriv->dma_cfg[chip] |= NI660X_DMA_CFG_SEL_NONE(mite_channel);
+	ni_660x_write_register(dev, chip, devpriv->dma_cfg[chip],
 			       NI660X_DMA_CFG);
 	mmiowb();
 	spin_unlock_irqrestore(&devpriv->soft_reg_copy_lock, flags);
@@ -819,13 +797,10 @@ static void init_tio_chip(struct comedi_device *dev, int chipset)
 	unsigned i;
 
 	/*  init dma configuration register */
-	devpriv->dma_configuration_soft_copies[chipset] = 0;
-	for (i = 0; i < MAX_DMA_CHANNEL; ++i) {
-		devpriv->dma_configuration_soft_copies[chipset] |=
-		    dma_select_bits(i, dma_selection_none) & dma_select_mask(i);
-	}
-	ni_660x_write_register(dev, chipset,
-			       devpriv->dma_configuration_soft_copies[chipset],
+	devpriv->dma_cfg[chipset] = 0;
+	for (i = 0; i < MAX_DMA_CHANNEL; ++i)
+		devpriv->dma_cfg[chipset] |= NI660X_DMA_CFG_SEL_NONE(i);
+	ni_660x_write_register(dev, chipset, devpriv->dma_cfg[chipset],
 			       NI660X_DMA_CFG);
 	for (i = 0; i < NUM_PFI_CHANNELS; ++i)
 		ni_660x_write_register(dev, chipset, 0, NI660X_IO_CFG(i));

commit 502552e161aee965026f9b5cc0da3dfb3775a8c7
Author: H Hartley Sweeten <hsweeten@visionengravers.com>
Date:   Tue Mar 22 11:10:18 2016 -0700

    staging: comedi: ni_660x: remove enum clock_config_register_bits
    
    Remove this enum and add a define for the bit.
    
    Signed-off-by: H Hartley Sweeten <hsweeten@visionengravers.com>
    Reviewed-by: Ian Abbott <abbotti@mev.co.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/drivers/ni_660x.c b/drivers/staging/comedi/drivers/ni_660x.c
index ab761aa040d7..30089cd7f89b 100644
--- a/drivers/staging/comedi/drivers/ni_660x.c
+++ b/drivers/staging/comedi/drivers/ni_660x.c
@@ -155,6 +155,8 @@ enum ni_660x_register {
 	NI660X_NUM_REGS,
 };
 
+#define NI660X_CLK_CFG_COUNTER_SWAP	BIT(21)
+
 #define NI660X_IO_CFG(x)		(NI660X_IO_CFG_0_1 + ((x) / 2))
 #define NI660X_IO_CFG_OUT_SEL(_c, _s)	(((_s) & 0x3) << (((_c) % 2) ? 0 : 8))
 #define NI660X_IO_CFG_OUT_SEL_MASK(_c)	NI660X_IO_CFG_OUT_SEL((_c), 0x3)
@@ -280,11 +282,6 @@ static const struct ni_660x_register_data ni_660x_reg_data[NI660X_NUM_REGS] = {
 	[NI660X_IO_CFG_38_39]		= { 0x7a2, 2 }	/* read/write */
 };
 
-/* kind of ENABLE for the second counter */
-enum clock_config_register_bits {
-	CounterSwap = 0x1 << 21
-};
-
 /* dma configuration register bits */
 static inline unsigned dma_select_mask(unsigned dma_channel)
 {
@@ -704,7 +701,7 @@ static void set_tio_counterswap(struct comedi_device *dev, int chip)
 	 * first chip.
 	 */
 	if (chip)
-		bits = CounterSwap;
+		bits = NI660X_CLK_CFG_COUNTER_SWAP;
 
 	ni_660x_write_register(dev, chip, bits, NI660X_CLK_CFG);
 }

commit aa36af205e4e7fd94842be73c1f8a5bb5b12d302
Author: H Hartley Sweeten <hsweeten@visionengravers.com>
Date:   Tue Mar 22 11:10:17 2016 -0700

    staging: comedi: ni_660x: tidy up multi-line comment
    
    Reformat the multi-line comment in the kernel CodingStyle.
    
    Signed-off-by: H Hartley Sweeten <hsweeten@visionengravers.com>
    Reviewed-by: Ian Abbott <abbotti@mev.co.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/drivers/ni_660x.c b/drivers/staging/comedi/drivers/ni_660x.c
index 75c60322a05d..ab761aa040d7 100644
--- a/drivers/staging/comedi/drivers/ni_660x.c
+++ b/drivers/staging/comedi/drivers/ni_660x.c
@@ -1,17 +1,16 @@
 /*
-  comedi/drivers/ni_660x.c
-  Hardware driver for NI 660x devices
-
-  This program is free software; you can redistribute it and/or modify
-  it under the terms of the GNU General Public License as published by
-  the Free Software Foundation; either version 2 of the License, or
-  (at your option) any later version.
-
-  This program is distributed in the hope that it will be useful,
-  but WITHOUT ANY WARRANTY; without even the implied warranty of
-  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-  GNU General Public License for more details.
-*/
+ * Hardware driver for NI 660x devices
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ */
 
 /*
  * Driver: ni_660x

commit 01ead0ded315d660b07baccb68ca36c2a7f3da0a
Author: H Hartley Sweeten <hsweeten@visionengravers.com>
Date:   Tue Mar 22 11:10:16 2016 -0700

    staging: comedi: ni_660x: cleanup the NI660X_IO_CFG register helpers
    
    Convert the inline functions used to set the bits in the NI600X_IO_CFG
    registers into macros. Also convert the enum ni_660x_pfi_output_select
    into defines. This clarifies the association with the register.
    
    This also fixes a number of checkpatch.pl issues about:
    
    WARNING: Prefer 'unsigned int' to bare use of 'unsigned'
    
    Signed-off-by: H Hartley Sweeten <hsweeten@visionengravers.com>
    Reviewed-by: Ian Abbott <abbotti@mev.co.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/drivers/ni_660x.c b/drivers/staging/comedi/drivers/ni_660x.c
index d76a5b026b91..75c60322a05d 100644
--- a/drivers/staging/comedi/drivers/ni_660x.c
+++ b/drivers/staging/comedi/drivers/ni_660x.c
@@ -156,14 +156,15 @@ enum ni_660x_register {
 	NI660X_NUM_REGS,
 };
 
-#define NI660X_IO_CFG(x)	(NI660X_IO_CFG_0_1 + ((x) / 2))
-
-enum ni_660x_pfi_output_select {
-	pfi_output_select_high_Z = 0,
-	pfi_output_select_counter = 1,
-	pfi_output_select_do = 2,
-	num_pfi_output_selects
-};
+#define NI660X_IO_CFG(x)		(NI660X_IO_CFG_0_1 + ((x) / 2))
+#define NI660X_IO_CFG_OUT_SEL(_c, _s)	(((_s) & 0x3) << (((_c) % 2) ? 0 : 8))
+#define NI660X_IO_CFG_OUT_SEL_MASK(_c)	NI660X_IO_CFG_OUT_SEL((_c), 0x3)
+#define NI660X_IO_CFG_OUT_SEL_HIGH_Z	0
+#define NI660X_IO_CFG_OUT_SEL_COUNTER	1
+#define NI660X_IO_CFG_OUT_SEL_DO	2
+#define NI660X_IO_CFG_OUT_SEL_MAX	3
+#define NI660X_IO_CFG_IN_SEL(_c, _s)	(((_s) & 0x7) << (((_c) % 2) ? 4 : 12))
+#define NI660X_IO_CFG_IN_SEL_MASK(_c)	NI660X_IO_CFG_IN_SEL((_c), 0x7)
 
 enum ni_660x_subdevices {
 	NI_660X_DIO_SUBDEV = 1,
@@ -285,34 +286,6 @@ enum clock_config_register_bits {
 	CounterSwap = 0x1 << 21
 };
 
-/* ioconfigreg */
-static inline unsigned ioconfig_bitshift(unsigned pfi_channel)
-{
-	return (pfi_channel % 2) ? 0 : 8;
-}
-
-static inline unsigned pfi_output_select_mask(unsigned pfi_channel)
-{
-	return 0x3 << ioconfig_bitshift(pfi_channel);
-}
-
-static inline unsigned pfi_output_select_bits(unsigned pfi_channel,
-					      unsigned output_select)
-{
-	return (output_select & 0x3) << ioconfig_bitshift(pfi_channel);
-}
-
-static inline unsigned pfi_input_select_mask(unsigned pfi_channel)
-{
-	return 0x7 << (4 + ioconfig_bitshift(pfi_channel));
-}
-
-static inline unsigned pfi_input_select_bits(unsigned pfi_channel,
-					     unsigned input_select)
-{
-	return (input_select & 0x7) << (4 + ioconfig_bitshift(pfi_channel));
-}
-
 /* dma configuration register bits */
 static inline unsigned dma_select_mask(unsigned dma_channel)
 {
@@ -808,7 +781,7 @@ static int ni_660x_allocate_private(struct comedi_device *dev)
 	spin_lock_init(&devpriv->interrupt_lock);
 	spin_lock_init(&devpriv->soft_reg_copy_lock);
 	for (i = 0; i < NUM_PFI_CHANNELS; ++i)
-		devpriv->pfi_output_selects[i] = pfi_output_select_counter;
+		devpriv->pfi_output_selects[i] = NI660X_IO_CFG_OUT_SEL_COUNTER;
 
 	return 0;
 }
@@ -896,7 +869,7 @@ static void ni_660x_select_pfi_output(struct comedi_device *dev,
 	unsigned idle_bits;
 
 	if (board->n_chips > 1) {
-		if (output_select == pfi_output_select_counter &&
+		if (output_select == NI660X_IO_CFG_OUT_SEL_COUNTER &&
 		    pfi_channel >= counter_4_7_first_pfi &&
 		    pfi_channel <= counter_4_7_last_pfi) {
 			active_chipset = 1;
@@ -911,10 +884,10 @@ static void ni_660x_select_pfi_output(struct comedi_device *dev,
 		idle_bits =
 		    ni_660x_read_register(dev, idle_chipset,
 					  NI660X_IO_CFG(pfi_channel));
-		idle_bits &= ~pfi_output_select_mask(pfi_channel);
+		idle_bits &= ~NI660X_IO_CFG_OUT_SEL_MASK(pfi_channel);
 		idle_bits |=
-		    pfi_output_select_bits(pfi_channel,
-					   pfi_output_select_high_Z);
+		    NI660X_IO_CFG_OUT_SEL(pfi_channel,
+					  NI660X_IO_CFG_OUT_SEL_HIGH_Z);
 		ni_660x_write_register(dev, idle_chipset, idle_bits,
 				       NI660X_IO_CFG(pfi_channel));
 	}
@@ -922,8 +895,8 @@ static void ni_660x_select_pfi_output(struct comedi_device *dev,
 	active_bits =
 	    ni_660x_read_register(dev, active_chipset,
 				  NI660X_IO_CFG(pfi_channel));
-	active_bits &= ~pfi_output_select_mask(pfi_channel);
-	active_bits |= pfi_output_select_bits(pfi_channel, output_select);
+	active_bits &= ~NI660X_IO_CFG_OUT_SEL_MASK(pfi_channel);
+	active_bits |= NI660X_IO_CFG_OUT_SEL(pfi_channel, output_select);
 	ni_660x_write_register(dev, active_chipset, active_bits,
 			       NI660X_IO_CFG(pfi_channel));
 }
@@ -933,15 +906,15 @@ static int ni_660x_set_pfi_routing(struct comedi_device *dev, unsigned chan,
 {
 	struct ni_660x_private *devpriv = dev->private;
 
-	if (source > num_pfi_output_selects)
+	if (source > NI660X_IO_CFG_OUT_SEL_MAX)
 		return -EINVAL;
-	if (source == pfi_output_select_high_Z)
+	if (source == NI660X_IO_CFG_OUT_SEL_HIGH_Z)
 		return -EINVAL;
 	if (chan < min_counter_pfi_chan) {
-		if (source == pfi_output_select_counter)
+		if (source == NI660X_IO_CFG_OUT_SEL_COUNTER)
 			return -EINVAL;
 	} else if (chan > max_dio_pfi_chan) {
-		if (source == pfi_output_select_do)
+		if (source == NI660X_IO_CFG_OUT_SEL_DO)
 			return -EINVAL;
 	}
 
@@ -972,7 +945,8 @@ static int ni_660x_dio_insn_config(struct comedi_device *dev,
 
 	case INSN_CONFIG_DIO_INPUT:
 		devpriv->pfi_direction_bits &= ~bit;
-		ni_660x_select_pfi_output(dev, chan, pfi_output_select_high_Z);
+		ni_660x_select_pfi_output(dev, chan,
+					  NI660X_IO_CFG_OUT_SEL_HIGH_Z);
 		break;
 
 	case INSN_CONFIG_DIO_QUERY:
@@ -992,8 +966,8 @@ static int ni_660x_dio_insn_config(struct comedi_device *dev,
 
 	case INSN_CONFIG_FILTER:
 		val = ni_660x_read_register(dev, 0, NI660X_IO_CFG(chan));
-		val &= ~pfi_input_select_mask(chan);
-		val |= pfi_input_select_bits(chan, data[1]);
+		val &= ~NI660X_IO_CFG_IN_SEL_MASK(chan);
+		val |= NI660X_IO_CFG_IN_SEL(chan, data[1]);
 		ni_660x_write_register(dev, 0, val, NI660X_IO_CFG(chan));
 		break;
 
@@ -1108,11 +1082,12 @@ static int ni_660x_auto_attach(struct comedi_device *dev,
 
 	for (i = 0; i < NUM_PFI_CHANNELS; ++i) {
 		if (i < min_counter_pfi_chan)
-			ni_660x_set_pfi_routing(dev, i, pfi_output_select_do);
+			ni_660x_set_pfi_routing(dev, i,
+						NI660X_IO_CFG_OUT_SEL_DO);
 		else
 			ni_660x_set_pfi_routing(dev, i,
-						pfi_output_select_counter);
-		ni_660x_select_pfi_output(dev, i, pfi_output_select_high_Z);
+						NI660X_IO_CFG_OUT_SEL_COUNTER);
+		ni_660x_select_pfi_output(dev, i, NI660X_IO_CFG_OUT_SEL_HIGH_Z);
 	}
 	/* to be safe, set counterswap bits on tio chips after all the counter
 	   outputs have been set to high impedance mode */

commit b38700a22a62aaaff04e644a7f1c6b2733249294
Author: H Hartley Sweeten <hsweeten@visionengravers.com>
Date:   Tue Mar 22 11:10:15 2016 -0700

    staging: comedi: ni_660x: rename CamelCase 'NI_660xRegisterData'
    
    Rename this CamelCase struct and the associated 'registerData' variable.
    
    Signed-off-by: H Hartley Sweeten <hsweeten@visionengravers.com>
    Reviewed-by: Ian Abbott <abbotti@mev.co.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/drivers/ni_660x.c b/drivers/staging/comedi/drivers/ni_660x.c
index 409a776caac7..d76a5b026b91 100644
--- a/drivers/staging/comedi/drivers/ni_660x.c
+++ b/drivers/staging/comedi/drivers/ni_660x.c
@@ -174,12 +174,12 @@ static inline unsigned NI_660X_GPCT_SUBDEV(unsigned index)
 	return NI_660X_GPCT_SUBDEV_0 + index;
 }
 
-struct NI_660xRegisterData {
+struct ni_660x_register_data {
 	int offset;		/*  Offset from base address from GPCT chip */
 	char size;		/* 2 or 4 bytes */
 };
 
-static const struct NI_660xRegisterData registerData[NI660X_NUM_REGS] = {
+static const struct ni_660x_register_data ni_660x_reg_data[NI660X_NUM_REGS] = {
 	[NI660X_G0_INT_ACK]		= { 0x004, 2 },	/* write */
 	[NI660X_G0_STATUS]		= { 0x004, 2 },	/* read */
 	[NI660X_G1_INT_ACK]		= { 0x006, 2 },	/* write */
@@ -564,9 +564,9 @@ static inline void ni_660x_write_register(struct comedi_device *dev,
 					  unsigned chip, unsigned bits,
 					  enum ni_660x_register reg)
 {
-	unsigned int addr = GPCT_OFFSET[chip] + registerData[reg].offset;
+	unsigned int addr = GPCT_OFFSET[chip] + ni_660x_reg_data[reg].offset;
 
-	if (registerData[reg].size == 2)
+	if (ni_660x_reg_data[reg].size == 2)
 		writew(bits, dev->mmio + addr);
 	else
 		writel(bits, dev->mmio + addr);
@@ -576,9 +576,9 @@ static inline unsigned ni_660x_read_register(struct comedi_device *dev,
 					     unsigned chip,
 					     enum ni_660x_register reg)
 {
-	unsigned int addr = GPCT_OFFSET[chip] + registerData[reg].offset;
+	unsigned int addr = GPCT_OFFSET[chip] + ni_660x_reg_data[reg].offset;
 
-	if (registerData[reg].size == 2)
+	if (ni_660x_reg_data[reg].size == 2)
 		return readw(dev->mmio + addr);
 	return readl(dev->mmio + addr);
 }

commit 9392e5dde2652ec335f48f28db3c0433cbdc9d92
Author: H Hartley Sweeten <hsweeten@visionengravers.com>
Date:   Tue Mar 22 11:10:14 2016 -0700

    staging: comedi: ni_660x: remove enum ni_660x_register_direction
    
    This enum is used to define the, unused, 'direction' of each register
    in struct NI_660xRegisterData. Remove the unused member, as well as
    the enum.
    
    Signed-off-by: H Hartley Sweeten <hsweeten@visionengravers.com>
    Reviewed-by: Ian Abbott <abbotti@mev.co.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/drivers/ni_660x.c b/drivers/staging/comedi/drivers/ni_660x.c
index dbbeb968ae59..409a776caac7 100644
--- a/drivers/staging/comedi/drivers/ni_660x.c
+++ b/drivers/staging/comedi/drivers/ni_660x.c
@@ -158,12 +158,6 @@ enum ni_660x_register {
 
 #define NI660X_IO_CFG(x)	(NI660X_IO_CFG_0_1 + ((x) / 2))
 
-enum ni_660x_register_direction {
-	NI_660x_READ,
-	NI_660x_WRITE,
-	NI_660x_READ_WRITE
-};
-
 enum ni_660x_pfi_output_select {
 	pfi_output_select_high_Z = 0,
 	pfi_output_select_counter = 1,
@@ -182,109 +176,108 @@ static inline unsigned NI_660X_GPCT_SUBDEV(unsigned index)
 
 struct NI_660xRegisterData {
 	int offset;		/*  Offset from base address from GPCT chip */
-	enum ni_660x_register_direction direction;
 	char size;		/* 2 or 4 bytes */
 };
 
 static const struct NI_660xRegisterData registerData[NI660X_NUM_REGS] = {
-	[NI660X_G0_INT_ACK]		= { 0x004, NI_660x_WRITE, 2 },
-	[NI660X_G0_STATUS]		= { 0x004, NI_660x_READ, 2 },
-	[NI660X_G1_INT_ACK]		= { 0x006, NI_660x_WRITE, 2 },
-	[NI660X_G1_STATUS]		= { 0x006, NI_660x_READ, 2 },
-	[NI660X_G01_STATUS]		= { 0x008, NI_660x_READ, 2 },
-	[NI660X_G0_CMD]			= { 0x00c, NI_660x_WRITE, 2 },
-	[NI660X_STC_DIO_PARALLEL_INPUT]	= { 0x00e, NI_660x_READ, 2 },
-	[NI660X_G1_CMD]			= { 0x00e, NI_660x_WRITE, 2 },
-	[NI660X_G0_HW_SAVE]		= { 0x010, NI_660x_READ, 4 },
-	[NI660X_G1_HW_SAVE]		= { 0x014, NI_660x_READ, 4 },
-	[NI660X_STC_DIO_OUTPUT]		= { 0x014, NI_660x_WRITE, 2 },
-	[NI660X_STC_DIO_CONTROL]	= { 0x016, NI_660x_WRITE, 2 },
-	[NI660X_G0_SW_SAVE]		= { 0x018, NI_660x_READ, 4 },
-	[NI660X_G1_SW_SAVE]		= { 0x01c, NI_660x_READ, 4 },
-	[NI660X_G0_MODE]		= { 0x034, NI_660x_WRITE, 2 },
-	[NI660X_G01_STATUS1]		= { 0x036, NI_660x_READ, 2 },
-	[NI660X_G1_MODE]		= { 0x036, NI_660x_WRITE, 2 },
-	[NI660X_STC_DIO_SERIAL_INPUT]	= { 0x038, NI_660x_READ, 2 },
-	[NI660X_G0_LOADA]		= { 0x038, NI_660x_WRITE, 4 },
-	[NI660X_G01_STATUS2]		= { 0x03a, NI_660x_READ, 2 },
-	[NI660X_G0_LOADB]		= { 0x03c, NI_660x_WRITE, 4 },
-	[NI660X_G1_LOADA]		= { 0x040, NI_660x_WRITE, 4 },
-	[NI660X_G1_LOADB]		= { 0x044, NI_660x_WRITE, 4 },
-	[NI660X_G0_INPUT_SEL]		= { 0x048, NI_660x_WRITE, 2 },
-	[NI660X_G1_INPUT_SEL]		= { 0x04a, NI_660x_WRITE, 2 },
-	[NI660X_G0_AUTO_INC]		= { 0x088, NI_660x_WRITE, 2 },
-	[NI660X_G1_AUTO_INC]		= { 0x08a, NI_660x_WRITE, 2 },
-	[NI660X_G01_RESET]		= { 0x090, NI_660x_WRITE, 2 },
-	[NI660X_G0_INT_ENA]		= { 0x092, NI_660x_WRITE, 2 },
-	[NI660X_G1_INT_ENA]		= { 0x096, NI_660x_WRITE, 2 },
-	[NI660X_G0_CNT_MODE]		= { 0x0b0, NI_660x_WRITE, 2 },
-	[NI660X_G1_CNT_MODE]		= { 0x0b2, NI_660x_WRITE, 2 },
-	[NI660X_G0_GATE2]		= { 0x0b4, NI_660x_WRITE, 2 },
-	[NI660X_G1_GATE2]		= { 0x0b6, NI_660x_WRITE, 2 },
-	[NI660X_G0_DMA_CFG]		= { 0x0b8, NI_660x_WRITE, 2 },
-	[NI660X_G0_DMA_STATUS]		= { 0x0b8, NI_660x_READ, 2 },
-	[NI660X_G1_DMA_CFG]		= { 0x0ba, NI_660x_WRITE, 2 },
-	[NI660X_G1_DMA_STATUS]		= { 0x0ba, NI_660x_READ, 2 },
-	[NI660X_G2_INT_ACK]		= { 0x104, NI_660x_WRITE, 2 },
-	[NI660X_G2_STATUS]		= { 0x104, NI_660x_READ, 2 },
-	[NI660X_G3_INT_ACK]		= { 0x106, NI_660x_WRITE, 2 },
-	[NI660X_G3_STATUS]		= { 0x106, NI_660x_READ, 2 },
-	[NI660X_G23_STATUS]		= { 0x108, NI_660x_READ, 2 },
-	[NI660X_G2_CMD]			= { 0x10c, NI_660x_WRITE, 2 },
-	[NI660X_G3_CMD]			= { 0x10e, NI_660x_WRITE, 2 },
-	[NI660X_G2_HW_SAVE]		= { 0x110, NI_660x_READ, 4 },
-	[NI660X_G3_HW_SAVE]		= { 0x114, NI_660x_READ, 4 },
-	[NI660X_G2_SW_SAVE]		= { 0x118, NI_660x_READ, 4 },
-	[NI660X_G3_SW_SAVE]		= { 0x11c, NI_660x_READ, 4 },
-	[NI660X_G2_MODE]		= { 0x134, NI_660x_WRITE, 2 },
-	[NI660X_G23_STATUS1]		= { 0x136, NI_660x_READ, 2 },
-	[NI660X_G3_MODE]		= { 0x136, NI_660x_WRITE, 2 },
-	[NI660X_G2_LOADA]		= { 0x138, NI_660x_WRITE, 4 },
-	[NI660X_G23_STATUS2]		= { 0x13a, NI_660x_READ, 2 },
-	[NI660X_G2_LOADB]		= { 0x13c, NI_660x_WRITE, 4 },
-	[NI660X_G3_LOADA]		= { 0x140, NI_660x_WRITE, 4 },
-	[NI660X_G3_LOADB]		= { 0x144, NI_660x_WRITE, 4 },
-	[NI660X_G2_INPUT_SEL]		= { 0x148, NI_660x_WRITE, 2 },
-	[NI660X_G3_INPUT_SEL]		= { 0x14a, NI_660x_WRITE, 2 },
-	[NI660X_G2_AUTO_INC]		= { 0x188, NI_660x_WRITE, 2 },
-	[NI660X_G3_AUTO_INC]		= { 0x18a, NI_660x_WRITE, 2 },
-	[NI660X_G23_RESET]		= { 0x190, NI_660x_WRITE, 2 },
-	[NI660X_G2_INT_ENA]		= { 0x192, NI_660x_WRITE, 2 },
-	[NI660X_G3_INT_ENA]		= { 0x196, NI_660x_WRITE, 2 },
-	[NI660X_G2_CNT_MODE]		= { 0x1b0, NI_660x_WRITE, 2 },
-	[NI660X_G3_CNT_MODE]		= { 0x1b2, NI_660x_WRITE, 2 },
-	[NI660X_G3_GATE2]		= { 0x1b6, NI_660x_WRITE, 2 },
-	[NI660X_G2_GATE2]		= { 0x1b4, NI_660x_WRITE, 2 },
-	[NI660X_G2_DMA_CFG]		= { 0x1b8, NI_660x_WRITE, 2 },
-	[NI660X_G2_DMA_STATUS]		= { 0x1b8, NI_660x_READ, 2 },
-	[NI660X_G3_DMA_CFG]		= { 0x1ba, NI_660x_WRITE, 2 },
-	[NI660X_G3_DMA_STATUS]		= { 0x1ba, NI_660x_READ, 2 },
-	[NI660X_DIO32_INPUT]		= { 0x414, NI_660x_READ, 4 },
-	[NI660X_DIO32_OUTPUT]		= { 0x510, NI_660x_WRITE, 4 },
-	[NI660X_CLK_CFG]		= { 0x73c, NI_660x_WRITE, 4 },
-	[NI660X_GLOBAL_INT_STATUS]	= { 0x754, NI_660x_READ, 4 },
-	[NI660X_DMA_CFG]		= { 0x76c, NI_660x_WRITE, 4 },
-	[NI660X_GLOBAL_INT_CFG]		= { 0x770, NI_660x_WRITE, 4 },
-	[NI660X_IO_CFG_0_1]		= { 0x77c, NI_660x_READ_WRITE, 2 },
-	[NI660X_IO_CFG_2_3]		= { 0x77e, NI_660x_READ_WRITE, 2 },
-	[NI660X_IO_CFG_4_5]		= { 0x780, NI_660x_READ_WRITE, 2 },
-	[NI660X_IO_CFG_6_7]		= { 0x782, NI_660x_READ_WRITE, 2 },
-	[NI660X_IO_CFG_8_9]		= { 0x784, NI_660x_READ_WRITE, 2 },
-	[NI660X_IO_CFG_10_11]		= { 0x786, NI_660x_READ_WRITE, 2 },
-	[NI660X_IO_CFG_12_13]		= { 0x788, NI_660x_READ_WRITE, 2 },
-	[NI660X_IO_CFG_14_15]		= { 0x78a, NI_660x_READ_WRITE, 2 },
-	[NI660X_IO_CFG_16_17]		= { 0x78c, NI_660x_READ_WRITE, 2 },
-	[NI660X_IO_CFG_18_19]		= { 0x78e, NI_660x_READ_WRITE, 2 },
-	[NI660X_IO_CFG_20_21]		= { 0x790, NI_660x_READ_WRITE, 2 },
-	[NI660X_IO_CFG_22_23]		= { 0x792, NI_660x_READ_WRITE, 2 },
-	[NI660X_IO_CFG_24_25]		= { 0x794, NI_660x_READ_WRITE, 2 },
-	[NI660X_IO_CFG_26_27]		= { 0x796, NI_660x_READ_WRITE, 2 },
-	[NI660X_IO_CFG_28_29]		= { 0x798, NI_660x_READ_WRITE, 2 },
-	[NI660X_IO_CFG_30_31]		= { 0x79a, NI_660x_READ_WRITE, 2 },
-	[NI660X_IO_CFG_32_33]		= { 0x79c, NI_660x_READ_WRITE, 2 },
-	[NI660X_IO_CFG_34_35]		= { 0x79e, NI_660x_READ_WRITE, 2 },
-	[NI660X_IO_CFG_36_37]		= { 0x7a0, NI_660x_READ_WRITE, 2 },
-	[NI660X_IO_CFG_38_39]		= { 0x7a2, NI_660x_READ_WRITE, 2 }
+	[NI660X_G0_INT_ACK]		= { 0x004, 2 },	/* write */
+	[NI660X_G0_STATUS]		= { 0x004, 2 },	/* read */
+	[NI660X_G1_INT_ACK]		= { 0x006, 2 },	/* write */
+	[NI660X_G1_STATUS]		= { 0x006, 2 },	/* read */
+	[NI660X_G01_STATUS]		= { 0x008, 2 },	/* read */
+	[NI660X_G0_CMD]			= { 0x00c, 2 },	/* write */
+	[NI660X_STC_DIO_PARALLEL_INPUT]	= { 0x00e, 2 },	/* read */
+	[NI660X_G1_CMD]			= { 0x00e, 2 },	/* write */
+	[NI660X_G0_HW_SAVE]		= { 0x010, 4 },	/* read */
+	[NI660X_G1_HW_SAVE]		= { 0x014, 4 },	/* read */
+	[NI660X_STC_DIO_OUTPUT]		= { 0x014, 2 },	/* write */
+	[NI660X_STC_DIO_CONTROL]	= { 0x016, 2 },	/* write */
+	[NI660X_G0_SW_SAVE]		= { 0x018, 4 },	/* read */
+	[NI660X_G1_SW_SAVE]		= { 0x01c, 4 },	/* read */
+	[NI660X_G0_MODE]		= { 0x034, 2 },	/* write */
+	[NI660X_G01_STATUS1]		= { 0x036, 2 },	/* read */
+	[NI660X_G1_MODE]		= { 0x036, 2 },	/* write */
+	[NI660X_STC_DIO_SERIAL_INPUT]	= { 0x038, 2 },	/* read */
+	[NI660X_G0_LOADA]		= { 0x038, 4 },	/* write */
+	[NI660X_G01_STATUS2]		= { 0x03a, 2 },	/* read */
+	[NI660X_G0_LOADB]		= { 0x03c, 4 },	/* write */
+	[NI660X_G1_LOADA]		= { 0x040, 4 },	/* write */
+	[NI660X_G1_LOADB]		= { 0x044, 4 },	/* write */
+	[NI660X_G0_INPUT_SEL]		= { 0x048, 2 },	/* write */
+	[NI660X_G1_INPUT_SEL]		= { 0x04a, 2 },	/* write */
+	[NI660X_G0_AUTO_INC]		= { 0x088, 2 },	/* write */
+	[NI660X_G1_AUTO_INC]		= { 0x08a, 2 },	/* write */
+	[NI660X_G01_RESET]		= { 0x090, 2 },	/* write */
+	[NI660X_G0_INT_ENA]		= { 0x092, 2 },	/* write */
+	[NI660X_G1_INT_ENA]		= { 0x096, 2 },	/* write */
+	[NI660X_G0_CNT_MODE]		= { 0x0b0, 2 },	/* write */
+	[NI660X_G1_CNT_MODE]		= { 0x0b2, 2 },	/* write */
+	[NI660X_G0_GATE2]		= { 0x0b4, 2 },	/* write */
+	[NI660X_G1_GATE2]		= { 0x0b6, 2 },	/* write */
+	[NI660X_G0_DMA_CFG]		= { 0x0b8, 2 },	/* write */
+	[NI660X_G0_DMA_STATUS]		= { 0x0b8, 2 },	/* read */
+	[NI660X_G1_DMA_CFG]		= { 0x0ba, 2 },	/* write */
+	[NI660X_G1_DMA_STATUS]		= { 0x0ba, 2 },	/* read */
+	[NI660X_G2_INT_ACK]		= { 0x104, 2 },	/* write */
+	[NI660X_G2_STATUS]		= { 0x104, 2 },	/* read */
+	[NI660X_G3_INT_ACK]		= { 0x106, 2 },	/* write */
+	[NI660X_G3_STATUS]		= { 0x106, 2 },	/* read */
+	[NI660X_G23_STATUS]		= { 0x108, 2 },	/* read */
+	[NI660X_G2_CMD]			= { 0x10c, 2 },	/* write */
+	[NI660X_G3_CMD]			= { 0x10e, 2 },	/* write */
+	[NI660X_G2_HW_SAVE]		= { 0x110, 4 },	/* read */
+	[NI660X_G3_HW_SAVE]		= { 0x114, 4 },	/* read */
+	[NI660X_G2_SW_SAVE]		= { 0x118, 4 },	/* read */
+	[NI660X_G3_SW_SAVE]		= { 0x11c, 4 },	/* read */
+	[NI660X_G2_MODE]		= { 0x134, 2 },	/* write */
+	[NI660X_G23_STATUS1]		= { 0x136, 2 },	/* read */
+	[NI660X_G3_MODE]		= { 0x136, 2 },	/* write */
+	[NI660X_G2_LOADA]		= { 0x138, 4 },	/* write */
+	[NI660X_G23_STATUS2]		= { 0x13a, 2 },	/* read */
+	[NI660X_G2_LOADB]		= { 0x13c, 4 },	/* write */
+	[NI660X_G3_LOADA]		= { 0x140, 4 },	/* write */
+	[NI660X_G3_LOADB]		= { 0x144, 4 },	/* write */
+	[NI660X_G2_INPUT_SEL]		= { 0x148, 2 },	/* write */
+	[NI660X_G3_INPUT_SEL]		= { 0x14a, 2 },	/* write */
+	[NI660X_G2_AUTO_INC]		= { 0x188, 2 },	/* write */
+	[NI660X_G3_AUTO_INC]		= { 0x18a, 2 },	/* write */
+	[NI660X_G23_RESET]		= { 0x190, 2 },	/* write */
+	[NI660X_G2_INT_ENA]		= { 0x192, 2 },	/* write */
+	[NI660X_G3_INT_ENA]		= { 0x196, 2 },	/* write */
+	[NI660X_G2_CNT_MODE]		= { 0x1b0, 2 },	/* write */
+	[NI660X_G3_CNT_MODE]		= { 0x1b2, 2 },	/* write */
+	[NI660X_G3_GATE2]		= { 0x1b6, 2 },	/* write */
+	[NI660X_G2_GATE2]		= { 0x1b4, 2 },	/* write */
+	[NI660X_G2_DMA_CFG]		= { 0x1b8, 2 },	/* write */
+	[NI660X_G2_DMA_STATUS]		= { 0x1b8, 2 },	/* read */
+	[NI660X_G3_DMA_CFG]		= { 0x1ba, 2 },	/* write */
+	[NI660X_G3_DMA_STATUS]		= { 0x1ba, 2 },	/* read */
+	[NI660X_DIO32_INPUT]		= { 0x414, 4 },	/* read */
+	[NI660X_DIO32_OUTPUT]		= { 0x510, 4 },	/* write */
+	[NI660X_CLK_CFG]		= { 0x73c, 4 },	/* write */
+	[NI660X_GLOBAL_INT_STATUS]	= { 0x754, 4 },	/* read */
+	[NI660X_DMA_CFG]		= { 0x76c, 4 },	/* write */
+	[NI660X_GLOBAL_INT_CFG]		= { 0x770, 4 },	/* write */
+	[NI660X_IO_CFG_0_1]		= { 0x77c, 2 },	/* read/write */
+	[NI660X_IO_CFG_2_3]		= { 0x77e, 2 },	/* read/write */
+	[NI660X_IO_CFG_4_5]		= { 0x780, 2 },	/* read/write */
+	[NI660X_IO_CFG_6_7]		= { 0x782, 2 },	/* read/write */
+	[NI660X_IO_CFG_8_9]		= { 0x784, 2 },	/* read/write */
+	[NI660X_IO_CFG_10_11]		= { 0x786, 2 },	/* read/write */
+	[NI660X_IO_CFG_12_13]		= { 0x788, 2 },	/* read/write */
+	[NI660X_IO_CFG_14_15]		= { 0x78a, 2 },	/* read/write */
+	[NI660X_IO_CFG_16_17]		= { 0x78c, 2 },	/* read/write */
+	[NI660X_IO_CFG_18_19]		= { 0x78e, 2 },	/* read/write */
+	[NI660X_IO_CFG_20_21]		= { 0x790, 2 },	/* read/write */
+	[NI660X_IO_CFG_22_23]		= { 0x792, 2 },	/* read/write */
+	[NI660X_IO_CFG_24_25]		= { 0x794, 2 },	/* read/write */
+	[NI660X_IO_CFG_26_27]		= { 0x796, 2 },	/* read/write */
+	[NI660X_IO_CFG_28_29]		= { 0x798, 2 },	/* read/write */
+	[NI660X_IO_CFG_30_31]		= { 0x79a, 2 },	/* read/write */
+	[NI660X_IO_CFG_32_33]		= { 0x79c, 2 },	/* read/write */
+	[NI660X_IO_CFG_34_35]		= { 0x79e, 2 },	/* read/write */
+	[NI660X_IO_CFG_36_37]		= { 0x7a0, 2 },	/* read/write */
+	[NI660X_IO_CFG_38_39]		= { 0x7a2, 2 }	/* read/write */
 };
 
 /* kind of ENABLE for the second counter */

commit 87090141749ad320d937375dcec6d5b925f728c7
Author: H Hartley Sweeten <hsweeten@visionengravers.com>
Date:   Tue Mar 22 11:10:13 2016 -0700

    staging: comedi: ni_660x: remove enum ni_register_width
    
    All the registers are defined struct NI_660xRegisterData and they are
    either 2 or 4 bytes in size. Remove the enum and just use a char member
    to define the size as 2 or 4 bytes.
    
    Simplify the ni_660x_{write,read}_register() functions and remove the
    unnecessary BUG() in each.
    
    Signed-off-by: H Hartley Sweeten <hsweeten@visionengravers.com>
    Reviewed-by: Ian Abbott <abbotti@mev.co.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/drivers/ni_660x.c b/drivers/staging/comedi/drivers/ni_660x.c
index 10bb8394fd99..dbbeb968ae59 100644
--- a/drivers/staging/comedi/drivers/ni_660x.c
+++ b/drivers/staging/comedi/drivers/ni_660x.c
@@ -158,12 +158,6 @@ enum ni_660x_register {
 
 #define NI660X_IO_CFG(x)	(NI660X_IO_CFG_0_1 + ((x) / 2))
 
-enum ni_660x_register_width {
-	DATA_1B,
-	DATA_2B,
-	DATA_4B
-};
-
 enum ni_660x_register_direction {
 	NI_660x_READ,
 	NI_660x_WRITE,
@@ -189,108 +183,108 @@ static inline unsigned NI_660X_GPCT_SUBDEV(unsigned index)
 struct NI_660xRegisterData {
 	int offset;		/*  Offset from base address from GPCT chip */
 	enum ni_660x_register_direction direction;
-	enum ni_660x_register_width size; /* 1 byte, 2 bytes, or 4 bytes */
+	char size;		/* 2 or 4 bytes */
 };
 
 static const struct NI_660xRegisterData registerData[NI660X_NUM_REGS] = {
-	[NI660X_G0_INT_ACK]		= {0x004, NI_660x_WRITE, DATA_2B},
-	[NI660X_G0_STATUS]		= {0x004, NI_660x_READ, DATA_2B},
-	[NI660X_G1_INT_ACK]		= {0x006, NI_660x_WRITE, DATA_2B},
-	[NI660X_G1_STATUS]		= {0x006, NI_660x_READ, DATA_2B},
-	[NI660X_G01_STATUS]		= {0x008, NI_660x_READ, DATA_2B},
-	[NI660X_G0_CMD]			= {0x00c, NI_660x_WRITE, DATA_2B},
-	[NI660X_STC_DIO_PARALLEL_INPUT]	= {0x00e, NI_660x_READ, DATA_2B},
-	[NI660X_G1_CMD]			= {0x00e, NI_660x_WRITE, DATA_2B},
-	[NI660X_G0_HW_SAVE]		= {0x010, NI_660x_READ, DATA_4B},
-	[NI660X_G1_HW_SAVE]		= {0x014, NI_660x_READ, DATA_4B},
-	[NI660X_STC_DIO_OUTPUT]		= {0x014, NI_660x_WRITE, DATA_2B},
-	[NI660X_STC_DIO_CONTROL]	= {0x016, NI_660x_WRITE, DATA_2B},
-	[NI660X_G0_SW_SAVE]		= {0x018, NI_660x_READ, DATA_4B},
-	[NI660X_G1_SW_SAVE]		= {0x01c, NI_660x_READ, DATA_4B},
-	[NI660X_G0_MODE]		= {0x034, NI_660x_WRITE, DATA_2B},
-	[NI660X_G01_STATUS1]		= {0x036, NI_660x_READ, DATA_2B},
-	[NI660X_G1_MODE]		= {0x036, NI_660x_WRITE, DATA_2B},
-	[NI660X_STC_DIO_SERIAL_INPUT]	= {0x038, NI_660x_READ, DATA_2B},
-	[NI660X_G0_LOADA]		= {0x038, NI_660x_WRITE, DATA_4B},
-	[NI660X_G01_STATUS2]		= {0x03a, NI_660x_READ, DATA_2B},
-	[NI660X_G0_LOADB]		= {0x03c, NI_660x_WRITE, DATA_4B},
-	[NI660X_G1_LOADA]		= {0x040, NI_660x_WRITE, DATA_4B},
-	[NI660X_G1_LOADB]		= {0x044, NI_660x_WRITE, DATA_4B},
-	[NI660X_G0_INPUT_SEL]		= {0x048, NI_660x_WRITE, DATA_2B},
-	[NI660X_G1_INPUT_SEL]		= {0x04a, NI_660x_WRITE, DATA_2B},
-	[NI660X_G0_AUTO_INC]		= {0x088, NI_660x_WRITE, DATA_2B},
-	[NI660X_G1_AUTO_INC]		= {0x08a, NI_660x_WRITE, DATA_2B},
-	[NI660X_G01_RESET]		= {0x090, NI_660x_WRITE, DATA_2B},
-	[NI660X_G0_INT_ENA]		= {0x092, NI_660x_WRITE, DATA_2B},
-	[NI660X_G1_INT_ENA]		= {0x096, NI_660x_WRITE, DATA_2B},
-	[NI660X_G0_CNT_MODE]		= {0x0b0, NI_660x_WRITE, DATA_2B},
-	[NI660X_G1_CNT_MODE]		= {0x0b2, NI_660x_WRITE, DATA_2B},
-	[NI660X_G0_GATE2]		= {0x0b4, NI_660x_WRITE, DATA_2B},
-	[NI660X_G1_GATE2]		= {0x0b6, NI_660x_WRITE, DATA_2B},
-	[NI660X_G0_DMA_CFG]		= {0x0b8, NI_660x_WRITE, DATA_2B},
-	[NI660X_G0_DMA_STATUS]		= {0x0b8, NI_660x_READ, DATA_2B},
-	[NI660X_G1_DMA_CFG]		= {0x0ba, NI_660x_WRITE, DATA_2B},
-	[NI660X_G1_DMA_STATUS]		= {0x0ba, NI_660x_READ, DATA_2B},
-	[NI660X_G2_INT_ACK]		= {0x104, NI_660x_WRITE, DATA_2B},
-	[NI660X_G2_STATUS]		= {0x104, NI_660x_READ, DATA_2B},
-	[NI660X_G3_INT_ACK]		= {0x106, NI_660x_WRITE, DATA_2B},
-	[NI660X_G3_STATUS]		= {0x106, NI_660x_READ, DATA_2B},
-	[NI660X_G23_STATUS]		= {0x108, NI_660x_READ, DATA_2B},
-	[NI660X_G2_CMD]			= {0x10c, NI_660x_WRITE, DATA_2B},
-	[NI660X_G3_CMD]			= {0x10e, NI_660x_WRITE, DATA_2B},
-	[NI660X_G2_HW_SAVE]		= {0x110, NI_660x_READ, DATA_4B},
-	[NI660X_G3_HW_SAVE]		= {0x114, NI_660x_READ, DATA_4B},
-	[NI660X_G2_SW_SAVE]		= {0x118, NI_660x_READ, DATA_4B},
-	[NI660X_G3_SW_SAVE]		= {0x11c, NI_660x_READ, DATA_4B},
-	[NI660X_G2_MODE]		= {0x134, NI_660x_WRITE, DATA_2B},
-	[NI660X_G23_STATUS1]		= {0x136, NI_660x_READ, DATA_2B},
-	[NI660X_G3_MODE]		= {0x136, NI_660x_WRITE, DATA_2B},
-	[NI660X_G2_LOADA]		= {0x138, NI_660x_WRITE, DATA_4B},
-	[NI660X_G23_STATUS2]		= {0x13a, NI_660x_READ, DATA_2B},
-	[NI660X_G2_LOADB]		= {0x13c, NI_660x_WRITE, DATA_4B},
-	[NI660X_G3_LOADA]		= {0x140, NI_660x_WRITE, DATA_4B},
-	[NI660X_G3_LOADB]		= {0x144, NI_660x_WRITE, DATA_4B},
-	[NI660X_G2_INPUT_SEL]		= {0x148, NI_660x_WRITE, DATA_2B},
-	[NI660X_G3_INPUT_SEL]		= {0x14a, NI_660x_WRITE, DATA_2B},
-	[NI660X_G2_AUTO_INC]		= {0x188, NI_660x_WRITE, DATA_2B},
-	[NI660X_G3_AUTO_INC]		= {0x18a, NI_660x_WRITE, DATA_2B},
-	[NI660X_G23_RESET]		= {0x190, NI_660x_WRITE, DATA_2B},
-	[NI660X_G2_INT_ENA]		= {0x192, NI_660x_WRITE, DATA_2B},
-	[NI660X_G3_INT_ENA]		= {0x196, NI_660x_WRITE, DATA_2B},
-	[NI660X_G2_CNT_MODE]		= {0x1b0, NI_660x_WRITE, DATA_2B},
-	[NI660X_G3_CNT_MODE]		= {0x1b2, NI_660x_WRITE, DATA_2B},
-	[NI660X_G3_GATE2]		= {0x1b6, NI_660x_WRITE, DATA_2B},
-	[NI660X_G2_GATE2]		= {0x1b4, NI_660x_WRITE, DATA_2B},
-	[NI660X_G2_DMA_CFG]		= {0x1b8, NI_660x_WRITE, DATA_2B},
-	[NI660X_G2_DMA_STATUS]		= {0x1b8, NI_660x_READ, DATA_2B},
-	[NI660X_G3_DMA_CFG]		= {0x1ba, NI_660x_WRITE, DATA_2B},
-	[NI660X_G3_DMA_STATUS]		= {0x1ba, NI_660x_READ, DATA_2B},
-	[NI660X_DIO32_INPUT]		= {0x414, NI_660x_READ, DATA_4B},
-	[NI660X_DIO32_OUTPUT]		= {0x510, NI_660x_WRITE, DATA_4B},
-	[NI660X_CLK_CFG]		= {0x73c, NI_660x_WRITE, DATA_4B},
-	[NI660X_GLOBAL_INT_STATUS]	= {0x754, NI_660x_READ, DATA_4B},
-	[NI660X_DMA_CFG]		= {0x76c, NI_660x_WRITE, DATA_4B},
-	[NI660X_GLOBAL_INT_CFG]		= {0x770, NI_660x_WRITE, DATA_4B},
-	[NI660X_IO_CFG_0_1]		= {0x77c, NI_660x_READ_WRITE, DATA_2B},
-	[NI660X_IO_CFG_2_3]		= {0x77e, NI_660x_READ_WRITE, DATA_2B},
-	[NI660X_IO_CFG_4_5]		= {0x780, NI_660x_READ_WRITE, DATA_2B},
-	[NI660X_IO_CFG_6_7]		= {0x782, NI_660x_READ_WRITE, DATA_2B},
-	[NI660X_IO_CFG_8_9]		= {0x784, NI_660x_READ_WRITE, DATA_2B},
-	[NI660X_IO_CFG_10_11]		= {0x786, NI_660x_READ_WRITE, DATA_2B},
-	[NI660X_IO_CFG_12_13]		= {0x788, NI_660x_READ_WRITE, DATA_2B},
-	[NI660X_IO_CFG_14_15]		= {0x78a, NI_660x_READ_WRITE, DATA_2B},
-	[NI660X_IO_CFG_16_17]		= {0x78c, NI_660x_READ_WRITE, DATA_2B},
-	[NI660X_IO_CFG_18_19]		= {0x78e, NI_660x_READ_WRITE, DATA_2B},
-	[NI660X_IO_CFG_20_21]		= {0x790, NI_660x_READ_WRITE, DATA_2B},
-	[NI660X_IO_CFG_22_23]		= {0x792, NI_660x_READ_WRITE, DATA_2B},
-	[NI660X_IO_CFG_24_25]		= {0x794, NI_660x_READ_WRITE, DATA_2B},
-	[NI660X_IO_CFG_26_27]		= {0x796, NI_660x_READ_WRITE, DATA_2B},
-	[NI660X_IO_CFG_28_29]		= {0x798, NI_660x_READ_WRITE, DATA_2B},
-	[NI660X_IO_CFG_30_31]		= {0x79a, NI_660x_READ_WRITE, DATA_2B},
-	[NI660X_IO_CFG_32_33]		= {0x79c, NI_660x_READ_WRITE, DATA_2B},
-	[NI660X_IO_CFG_34_35]		= {0x79e, NI_660x_READ_WRITE, DATA_2B},
-	[NI660X_IO_CFG_36_37]		= {0x7a0, NI_660x_READ_WRITE, DATA_2B},
-	[NI660X_IO_CFG_38_39]		= {0x7a2, NI_660x_READ_WRITE, DATA_2B}
+	[NI660X_G0_INT_ACK]		= { 0x004, NI_660x_WRITE, 2 },
+	[NI660X_G0_STATUS]		= { 0x004, NI_660x_READ, 2 },
+	[NI660X_G1_INT_ACK]		= { 0x006, NI_660x_WRITE, 2 },
+	[NI660X_G1_STATUS]		= { 0x006, NI_660x_READ, 2 },
+	[NI660X_G01_STATUS]		= { 0x008, NI_660x_READ, 2 },
+	[NI660X_G0_CMD]			= { 0x00c, NI_660x_WRITE, 2 },
+	[NI660X_STC_DIO_PARALLEL_INPUT]	= { 0x00e, NI_660x_READ, 2 },
+	[NI660X_G1_CMD]			= { 0x00e, NI_660x_WRITE, 2 },
+	[NI660X_G0_HW_SAVE]		= { 0x010, NI_660x_READ, 4 },
+	[NI660X_G1_HW_SAVE]		= { 0x014, NI_660x_READ, 4 },
+	[NI660X_STC_DIO_OUTPUT]		= { 0x014, NI_660x_WRITE, 2 },
+	[NI660X_STC_DIO_CONTROL]	= { 0x016, NI_660x_WRITE, 2 },
+	[NI660X_G0_SW_SAVE]		= { 0x018, NI_660x_READ, 4 },
+	[NI660X_G1_SW_SAVE]		= { 0x01c, NI_660x_READ, 4 },
+	[NI660X_G0_MODE]		= { 0x034, NI_660x_WRITE, 2 },
+	[NI660X_G01_STATUS1]		= { 0x036, NI_660x_READ, 2 },
+	[NI660X_G1_MODE]		= { 0x036, NI_660x_WRITE, 2 },
+	[NI660X_STC_DIO_SERIAL_INPUT]	= { 0x038, NI_660x_READ, 2 },
+	[NI660X_G0_LOADA]		= { 0x038, NI_660x_WRITE, 4 },
+	[NI660X_G01_STATUS2]		= { 0x03a, NI_660x_READ, 2 },
+	[NI660X_G0_LOADB]		= { 0x03c, NI_660x_WRITE, 4 },
+	[NI660X_G1_LOADA]		= { 0x040, NI_660x_WRITE, 4 },
+	[NI660X_G1_LOADB]		= { 0x044, NI_660x_WRITE, 4 },
+	[NI660X_G0_INPUT_SEL]		= { 0x048, NI_660x_WRITE, 2 },
+	[NI660X_G1_INPUT_SEL]		= { 0x04a, NI_660x_WRITE, 2 },
+	[NI660X_G0_AUTO_INC]		= { 0x088, NI_660x_WRITE, 2 },
+	[NI660X_G1_AUTO_INC]		= { 0x08a, NI_660x_WRITE, 2 },
+	[NI660X_G01_RESET]		= { 0x090, NI_660x_WRITE, 2 },
+	[NI660X_G0_INT_ENA]		= { 0x092, NI_660x_WRITE, 2 },
+	[NI660X_G1_INT_ENA]		= { 0x096, NI_660x_WRITE, 2 },
+	[NI660X_G0_CNT_MODE]		= { 0x0b0, NI_660x_WRITE, 2 },
+	[NI660X_G1_CNT_MODE]		= { 0x0b2, NI_660x_WRITE, 2 },
+	[NI660X_G0_GATE2]		= { 0x0b4, NI_660x_WRITE, 2 },
+	[NI660X_G1_GATE2]		= { 0x0b6, NI_660x_WRITE, 2 },
+	[NI660X_G0_DMA_CFG]		= { 0x0b8, NI_660x_WRITE, 2 },
+	[NI660X_G0_DMA_STATUS]		= { 0x0b8, NI_660x_READ, 2 },
+	[NI660X_G1_DMA_CFG]		= { 0x0ba, NI_660x_WRITE, 2 },
+	[NI660X_G1_DMA_STATUS]		= { 0x0ba, NI_660x_READ, 2 },
+	[NI660X_G2_INT_ACK]		= { 0x104, NI_660x_WRITE, 2 },
+	[NI660X_G2_STATUS]		= { 0x104, NI_660x_READ, 2 },
+	[NI660X_G3_INT_ACK]		= { 0x106, NI_660x_WRITE, 2 },
+	[NI660X_G3_STATUS]		= { 0x106, NI_660x_READ, 2 },
+	[NI660X_G23_STATUS]		= { 0x108, NI_660x_READ, 2 },
+	[NI660X_G2_CMD]			= { 0x10c, NI_660x_WRITE, 2 },
+	[NI660X_G3_CMD]			= { 0x10e, NI_660x_WRITE, 2 },
+	[NI660X_G2_HW_SAVE]		= { 0x110, NI_660x_READ, 4 },
+	[NI660X_G3_HW_SAVE]		= { 0x114, NI_660x_READ, 4 },
+	[NI660X_G2_SW_SAVE]		= { 0x118, NI_660x_READ, 4 },
+	[NI660X_G3_SW_SAVE]		= { 0x11c, NI_660x_READ, 4 },
+	[NI660X_G2_MODE]		= { 0x134, NI_660x_WRITE, 2 },
+	[NI660X_G23_STATUS1]		= { 0x136, NI_660x_READ, 2 },
+	[NI660X_G3_MODE]		= { 0x136, NI_660x_WRITE, 2 },
+	[NI660X_G2_LOADA]		= { 0x138, NI_660x_WRITE, 4 },
+	[NI660X_G23_STATUS2]		= { 0x13a, NI_660x_READ, 2 },
+	[NI660X_G2_LOADB]		= { 0x13c, NI_660x_WRITE, 4 },
+	[NI660X_G3_LOADA]		= { 0x140, NI_660x_WRITE, 4 },
+	[NI660X_G3_LOADB]		= { 0x144, NI_660x_WRITE, 4 },
+	[NI660X_G2_INPUT_SEL]		= { 0x148, NI_660x_WRITE, 2 },
+	[NI660X_G3_INPUT_SEL]		= { 0x14a, NI_660x_WRITE, 2 },
+	[NI660X_G2_AUTO_INC]		= { 0x188, NI_660x_WRITE, 2 },
+	[NI660X_G3_AUTO_INC]		= { 0x18a, NI_660x_WRITE, 2 },
+	[NI660X_G23_RESET]		= { 0x190, NI_660x_WRITE, 2 },
+	[NI660X_G2_INT_ENA]		= { 0x192, NI_660x_WRITE, 2 },
+	[NI660X_G3_INT_ENA]		= { 0x196, NI_660x_WRITE, 2 },
+	[NI660X_G2_CNT_MODE]		= { 0x1b0, NI_660x_WRITE, 2 },
+	[NI660X_G3_CNT_MODE]		= { 0x1b2, NI_660x_WRITE, 2 },
+	[NI660X_G3_GATE2]		= { 0x1b6, NI_660x_WRITE, 2 },
+	[NI660X_G2_GATE2]		= { 0x1b4, NI_660x_WRITE, 2 },
+	[NI660X_G2_DMA_CFG]		= { 0x1b8, NI_660x_WRITE, 2 },
+	[NI660X_G2_DMA_STATUS]		= { 0x1b8, NI_660x_READ, 2 },
+	[NI660X_G3_DMA_CFG]		= { 0x1ba, NI_660x_WRITE, 2 },
+	[NI660X_G3_DMA_STATUS]		= { 0x1ba, NI_660x_READ, 2 },
+	[NI660X_DIO32_INPUT]		= { 0x414, NI_660x_READ, 4 },
+	[NI660X_DIO32_OUTPUT]		= { 0x510, NI_660x_WRITE, 4 },
+	[NI660X_CLK_CFG]		= { 0x73c, NI_660x_WRITE, 4 },
+	[NI660X_GLOBAL_INT_STATUS]	= { 0x754, NI_660x_READ, 4 },
+	[NI660X_DMA_CFG]		= { 0x76c, NI_660x_WRITE, 4 },
+	[NI660X_GLOBAL_INT_CFG]		= { 0x770, NI_660x_WRITE, 4 },
+	[NI660X_IO_CFG_0_1]		= { 0x77c, NI_660x_READ_WRITE, 2 },
+	[NI660X_IO_CFG_2_3]		= { 0x77e, NI_660x_READ_WRITE, 2 },
+	[NI660X_IO_CFG_4_5]		= { 0x780, NI_660x_READ_WRITE, 2 },
+	[NI660X_IO_CFG_6_7]		= { 0x782, NI_660x_READ_WRITE, 2 },
+	[NI660X_IO_CFG_8_9]		= { 0x784, NI_660x_READ_WRITE, 2 },
+	[NI660X_IO_CFG_10_11]		= { 0x786, NI_660x_READ_WRITE, 2 },
+	[NI660X_IO_CFG_12_13]		= { 0x788, NI_660x_READ_WRITE, 2 },
+	[NI660X_IO_CFG_14_15]		= { 0x78a, NI_660x_READ_WRITE, 2 },
+	[NI660X_IO_CFG_16_17]		= { 0x78c, NI_660x_READ_WRITE, 2 },
+	[NI660X_IO_CFG_18_19]		= { 0x78e, NI_660x_READ_WRITE, 2 },
+	[NI660X_IO_CFG_20_21]		= { 0x790, NI_660x_READ_WRITE, 2 },
+	[NI660X_IO_CFG_22_23]		= { 0x792, NI_660x_READ_WRITE, 2 },
+	[NI660X_IO_CFG_24_25]		= { 0x794, NI_660x_READ_WRITE, 2 },
+	[NI660X_IO_CFG_26_27]		= { 0x796, NI_660x_READ_WRITE, 2 },
+	[NI660X_IO_CFG_28_29]		= { 0x798, NI_660x_READ_WRITE, 2 },
+	[NI660X_IO_CFG_30_31]		= { 0x79a, NI_660x_READ_WRITE, 2 },
+	[NI660X_IO_CFG_32_33]		= { 0x79c, NI_660x_READ_WRITE, 2 },
+	[NI660X_IO_CFG_34_35]		= { 0x79e, NI_660x_READ_WRITE, 2 },
+	[NI660X_IO_CFG_36_37]		= { 0x7a0, NI_660x_READ_WRITE, 2 },
+	[NI660X_IO_CFG_38_39]		= { 0x7a2, NI_660x_READ_WRITE, 2 }
 };
 
 /* kind of ENABLE for the second counter */
@@ -579,17 +573,10 @@ static inline void ni_660x_write_register(struct comedi_device *dev,
 {
 	unsigned int addr = GPCT_OFFSET[chip] + registerData[reg].offset;
 
-	switch (registerData[reg].size) {
-	case DATA_2B:
+	if (registerData[reg].size == 2)
 		writew(bits, dev->mmio + addr);
-		break;
-	case DATA_4B:
+	else
 		writel(bits, dev->mmio + addr);
-		break;
-	default:
-		BUG();
-		break;
-	}
 }
 
 static inline unsigned ni_660x_read_register(struct comedi_device *dev,
@@ -598,16 +585,9 @@ static inline unsigned ni_660x_read_register(struct comedi_device *dev,
 {
 	unsigned int addr = GPCT_OFFSET[chip] + registerData[reg].offset;
 
-	switch (registerData[reg].size) {
-	case DATA_2B:
+	if (registerData[reg].size == 2)
 		return readw(dev->mmio + addr);
-	case DATA_4B:
-		return readl(dev->mmio + addr);
-	default:
-		BUG();
-		break;
-	}
-	return 0;
+	return readl(dev->mmio + addr);
 }
 
 static void ni_gpct_write_register(struct ni_gpct *counter, unsigned bits,

commit f9565977bf488bd4bf9ef7322728970c20bbc908
Author: H Hartley Sweeten <hsweeten@visionengravers.com>
Date:   Tue Mar 22 11:10:12 2016 -0700

    staging: comedi: ni_660x: remove struct NI_660xRegisterData 'name'
    
    This member of the struct is not used, and just takes up space. Remove it.
    Instead, add the enum ni_660x_register indexes to the table to clarify, and
    document, the entries.
    
    Signed-off-by: H Hartley Sweeten <hsweeten@visionengravers.com>
    Reviewed-by: Ian Abbott <abbotti@mev.co.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/drivers/ni_660x.c b/drivers/staging/comedi/drivers/ni_660x.c
index 10db2fff899e..10bb8394fd99 100644
--- a/drivers/staging/comedi/drivers/ni_660x.c
+++ b/drivers/staging/comedi/drivers/ni_660x.c
@@ -187,111 +187,110 @@ static inline unsigned NI_660X_GPCT_SUBDEV(unsigned index)
 }
 
 struct NI_660xRegisterData {
-	const char *name;	/*  Register Name */
 	int offset;		/*  Offset from base address from GPCT chip */
 	enum ni_660x_register_direction direction;
 	enum ni_660x_register_width size; /* 1 byte, 2 bytes, or 4 bytes */
 };
 
 static const struct NI_660xRegisterData registerData[NI660X_NUM_REGS] = {
-	{"G0 Interrupt Acknowledge", 0x004, NI_660x_WRITE, DATA_2B},
-	{"G0 Status Register", 0x004, NI_660x_READ, DATA_2B},
-	{"G1 Interrupt Acknowledge", 0x006, NI_660x_WRITE, DATA_2B},
-	{"G1 Status Register", 0x006, NI_660x_READ, DATA_2B},
-	{"G01 Status Register ", 0x008, NI_660x_READ, DATA_2B},
-	{"G0 Command Register", 0x00C, NI_660x_WRITE, DATA_2B},
-	{"STC DIO Parallel Input", 0x00E, NI_660x_READ, DATA_2B},
-	{"G1 Command Register", 0x00E, NI_660x_WRITE, DATA_2B},
-	{"G0 HW Save Register", 0x010, NI_660x_READ, DATA_4B},
-	{"G1 HW Save Register", 0x014, NI_660x_READ, DATA_4B},
-	{"STC DIO Output", 0x014, NI_660x_WRITE, DATA_2B},
-	{"STC DIO Control", 0x016, NI_660x_WRITE, DATA_2B},
-	{"G0 SW Save Register", 0x018, NI_660x_READ, DATA_4B},
-	{"G1 SW Save Register", 0x01C, NI_660x_READ, DATA_4B},
-	{"G0 Mode Register", 0x034, NI_660x_WRITE, DATA_2B},
-	{"G01 Joint Status 1 Register", 0x036, NI_660x_READ, DATA_2B},
-	{"G1 Mode Register", 0x036, NI_660x_WRITE, DATA_2B},
-	{"STC DIO Serial Input", 0x038, NI_660x_READ, DATA_2B},
-	{"G0 Load A Register", 0x038, NI_660x_WRITE, DATA_4B},
-	{"G01 Joint Status 2 Register", 0x03A, NI_660x_READ, DATA_2B},
-	{"G0 Load B Register", 0x03C, NI_660x_WRITE, DATA_4B},
-	{"G1 Load A Register", 0x040, NI_660x_WRITE, DATA_4B},
-	{"G1 Load B Register", 0x044, NI_660x_WRITE, DATA_4B},
-	{"G0 Input Select Register", 0x048, NI_660x_WRITE, DATA_2B},
-	{"G1 Input Select Register", 0x04A, NI_660x_WRITE, DATA_2B},
-	{"G0 Autoincrement Register", 0x088, NI_660x_WRITE, DATA_2B},
-	{"G1 Autoincrement Register", 0x08A, NI_660x_WRITE, DATA_2B},
-	{"G01 Joint Reset Register", 0x090, NI_660x_WRITE, DATA_2B},
-	{"G0 Interrupt Enable", 0x092, NI_660x_WRITE, DATA_2B},
-	{"G1 Interrupt Enable", 0x096, NI_660x_WRITE, DATA_2B},
-	{"G0 Counting Mode Register", 0x0B0, NI_660x_WRITE, DATA_2B},
-	{"G1 Counting Mode Register", 0x0B2, NI_660x_WRITE, DATA_2B},
-	{"G0 Second Gate Register", 0x0B4, NI_660x_WRITE, DATA_2B},
-	{"G1 Second Gate Register", 0x0B6, NI_660x_WRITE, DATA_2B},
-	{"G0 DMA Config Register", 0x0B8, NI_660x_WRITE, DATA_2B},
-	{"G0 DMA Status Register", 0x0B8, NI_660x_READ, DATA_2B},
-	{"G1 DMA Config Register", 0x0BA, NI_660x_WRITE, DATA_2B},
-	{"G1 DMA Status Register", 0x0BA, NI_660x_READ, DATA_2B},
-	{"G2 Interrupt Acknowledge", 0x104, NI_660x_WRITE, DATA_2B},
-	{"G2 Status Register", 0x104, NI_660x_READ, DATA_2B},
-	{"G3 Interrupt Acknowledge", 0x106, NI_660x_WRITE, DATA_2B},
-	{"G3 Status Register", 0x106, NI_660x_READ, DATA_2B},
-	{"G23 Status Register", 0x108, NI_660x_READ, DATA_2B},
-	{"G2 Command Register", 0x10C, NI_660x_WRITE, DATA_2B},
-	{"G3 Command Register", 0x10E, NI_660x_WRITE, DATA_2B},
-	{"G2 HW Save Register", 0x110, NI_660x_READ, DATA_4B},
-	{"G3 HW Save Register", 0x114, NI_660x_READ, DATA_4B},
-	{"G2 SW Save Register", 0x118, NI_660x_READ, DATA_4B},
-	{"G3 SW Save Register", 0x11C, NI_660x_READ, DATA_4B},
-	{"G2 Mode Register", 0x134, NI_660x_WRITE, DATA_2B},
-	{"G23 Joint Status 1 Register", 0x136, NI_660x_READ, DATA_2B},
-	{"G3 Mode Register", 0x136, NI_660x_WRITE, DATA_2B},
-	{"G2 Load A Register", 0x138, NI_660x_WRITE, DATA_4B},
-	{"G23 Joint Status 2 Register", 0x13A, NI_660x_READ, DATA_2B},
-	{"G2 Load B Register", 0x13C, NI_660x_WRITE, DATA_4B},
-	{"G3 Load A Register", 0x140, NI_660x_WRITE, DATA_4B},
-	{"G3 Load B Register", 0x144, NI_660x_WRITE, DATA_4B},
-	{"G2 Input Select Register", 0x148, NI_660x_WRITE, DATA_2B},
-	{"G3 Input Select Register", 0x14A, NI_660x_WRITE, DATA_2B},
-	{"G2 Autoincrement Register", 0x188, NI_660x_WRITE, DATA_2B},
-	{"G3 Autoincrement Register", 0x18A, NI_660x_WRITE, DATA_2B},
-	{"G23 Joint Reset Register", 0x190, NI_660x_WRITE, DATA_2B},
-	{"G2 Interrupt Enable", 0x192, NI_660x_WRITE, DATA_2B},
-	{"G3 Interrupt Enable", 0x196, NI_660x_WRITE, DATA_2B},
-	{"G2 Counting Mode Register", 0x1B0, NI_660x_WRITE, DATA_2B},
-	{"G3 Counting Mode Register", 0x1B2, NI_660x_WRITE, DATA_2B},
-	{"G3 Second Gate Register", 0x1B6, NI_660x_WRITE, DATA_2B},
-	{"G2 Second Gate Register", 0x1B4, NI_660x_WRITE, DATA_2B},
-	{"G2 DMA Config Register", 0x1B8, NI_660x_WRITE, DATA_2B},
-	{"G2 DMA Status Register", 0x1B8, NI_660x_READ, DATA_2B},
-	{"G3 DMA Config Register", 0x1BA, NI_660x_WRITE, DATA_2B},
-	{"G3 DMA Status Register", 0x1BA, NI_660x_READ, DATA_2B},
-	{"32 bit Digital Input", 0x414, NI_660x_READ, DATA_4B},
-	{"32 bit Digital Output", 0x510, NI_660x_WRITE, DATA_4B},
-	{"Clock Config Register", 0x73C, NI_660x_WRITE, DATA_4B},
-	{"Global Interrupt Status Register", 0x754, NI_660x_READ, DATA_4B},
-	{"DMA Configuration Register", 0x76C, NI_660x_WRITE, DATA_4B},
-	{"Global Interrupt Config Register", 0x770, NI_660x_WRITE, DATA_4B},
-	{"IO Config Register 0-1", 0x77C, NI_660x_READ_WRITE, DATA_2B},
-	{"IO Config Register 2-3", 0x77E, NI_660x_READ_WRITE, DATA_2B},
-	{"IO Config Register 4-5", 0x780, NI_660x_READ_WRITE, DATA_2B},
-	{"IO Config Register 6-7", 0x782, NI_660x_READ_WRITE, DATA_2B},
-	{"IO Config Register 8-9", 0x784, NI_660x_READ_WRITE, DATA_2B},
-	{"IO Config Register 10-11", 0x786, NI_660x_READ_WRITE, DATA_2B},
-	{"IO Config Register 12-13", 0x788, NI_660x_READ_WRITE, DATA_2B},
-	{"IO Config Register 14-15", 0x78A, NI_660x_READ_WRITE, DATA_2B},
-	{"IO Config Register 16-17", 0x78C, NI_660x_READ_WRITE, DATA_2B},
-	{"IO Config Register 18-19", 0x78E, NI_660x_READ_WRITE, DATA_2B},
-	{"IO Config Register 20-21", 0x790, NI_660x_READ_WRITE, DATA_2B},
-	{"IO Config Register 22-23", 0x792, NI_660x_READ_WRITE, DATA_2B},
-	{"IO Config Register 24-25", 0x794, NI_660x_READ_WRITE, DATA_2B},
-	{"IO Config Register 26-27", 0x796, NI_660x_READ_WRITE, DATA_2B},
-	{"IO Config Register 28-29", 0x798, NI_660x_READ_WRITE, DATA_2B},
-	{"IO Config Register 30-31", 0x79A, NI_660x_READ_WRITE, DATA_2B},
-	{"IO Config Register 32-33", 0x79C, NI_660x_READ_WRITE, DATA_2B},
-	{"IO Config Register 34-35", 0x79E, NI_660x_READ_WRITE, DATA_2B},
-	{"IO Config Register 36-37", 0x7A0, NI_660x_READ_WRITE, DATA_2B},
-	{"IO Config Register 38-39", 0x7A2, NI_660x_READ_WRITE, DATA_2B}
+	[NI660X_G0_INT_ACK]		= {0x004, NI_660x_WRITE, DATA_2B},
+	[NI660X_G0_STATUS]		= {0x004, NI_660x_READ, DATA_2B},
+	[NI660X_G1_INT_ACK]		= {0x006, NI_660x_WRITE, DATA_2B},
+	[NI660X_G1_STATUS]		= {0x006, NI_660x_READ, DATA_2B},
+	[NI660X_G01_STATUS]		= {0x008, NI_660x_READ, DATA_2B},
+	[NI660X_G0_CMD]			= {0x00c, NI_660x_WRITE, DATA_2B},
+	[NI660X_STC_DIO_PARALLEL_INPUT]	= {0x00e, NI_660x_READ, DATA_2B},
+	[NI660X_G1_CMD]			= {0x00e, NI_660x_WRITE, DATA_2B},
+	[NI660X_G0_HW_SAVE]		= {0x010, NI_660x_READ, DATA_4B},
+	[NI660X_G1_HW_SAVE]		= {0x014, NI_660x_READ, DATA_4B},
+	[NI660X_STC_DIO_OUTPUT]		= {0x014, NI_660x_WRITE, DATA_2B},
+	[NI660X_STC_DIO_CONTROL]	= {0x016, NI_660x_WRITE, DATA_2B},
+	[NI660X_G0_SW_SAVE]		= {0x018, NI_660x_READ, DATA_4B},
+	[NI660X_G1_SW_SAVE]		= {0x01c, NI_660x_READ, DATA_4B},
+	[NI660X_G0_MODE]		= {0x034, NI_660x_WRITE, DATA_2B},
+	[NI660X_G01_STATUS1]		= {0x036, NI_660x_READ, DATA_2B},
+	[NI660X_G1_MODE]		= {0x036, NI_660x_WRITE, DATA_2B},
+	[NI660X_STC_DIO_SERIAL_INPUT]	= {0x038, NI_660x_READ, DATA_2B},
+	[NI660X_G0_LOADA]		= {0x038, NI_660x_WRITE, DATA_4B},
+	[NI660X_G01_STATUS2]		= {0x03a, NI_660x_READ, DATA_2B},
+	[NI660X_G0_LOADB]		= {0x03c, NI_660x_WRITE, DATA_4B},
+	[NI660X_G1_LOADA]		= {0x040, NI_660x_WRITE, DATA_4B},
+	[NI660X_G1_LOADB]		= {0x044, NI_660x_WRITE, DATA_4B},
+	[NI660X_G0_INPUT_SEL]		= {0x048, NI_660x_WRITE, DATA_2B},
+	[NI660X_G1_INPUT_SEL]		= {0x04a, NI_660x_WRITE, DATA_2B},
+	[NI660X_G0_AUTO_INC]		= {0x088, NI_660x_WRITE, DATA_2B},
+	[NI660X_G1_AUTO_INC]		= {0x08a, NI_660x_WRITE, DATA_2B},
+	[NI660X_G01_RESET]		= {0x090, NI_660x_WRITE, DATA_2B},
+	[NI660X_G0_INT_ENA]		= {0x092, NI_660x_WRITE, DATA_2B},
+	[NI660X_G1_INT_ENA]		= {0x096, NI_660x_WRITE, DATA_2B},
+	[NI660X_G0_CNT_MODE]		= {0x0b0, NI_660x_WRITE, DATA_2B},
+	[NI660X_G1_CNT_MODE]		= {0x0b2, NI_660x_WRITE, DATA_2B},
+	[NI660X_G0_GATE2]		= {0x0b4, NI_660x_WRITE, DATA_2B},
+	[NI660X_G1_GATE2]		= {0x0b6, NI_660x_WRITE, DATA_2B},
+	[NI660X_G0_DMA_CFG]		= {0x0b8, NI_660x_WRITE, DATA_2B},
+	[NI660X_G0_DMA_STATUS]		= {0x0b8, NI_660x_READ, DATA_2B},
+	[NI660X_G1_DMA_CFG]		= {0x0ba, NI_660x_WRITE, DATA_2B},
+	[NI660X_G1_DMA_STATUS]		= {0x0ba, NI_660x_READ, DATA_2B},
+	[NI660X_G2_INT_ACK]		= {0x104, NI_660x_WRITE, DATA_2B},
+	[NI660X_G2_STATUS]		= {0x104, NI_660x_READ, DATA_2B},
+	[NI660X_G3_INT_ACK]		= {0x106, NI_660x_WRITE, DATA_2B},
+	[NI660X_G3_STATUS]		= {0x106, NI_660x_READ, DATA_2B},
+	[NI660X_G23_STATUS]		= {0x108, NI_660x_READ, DATA_2B},
+	[NI660X_G2_CMD]			= {0x10c, NI_660x_WRITE, DATA_2B},
+	[NI660X_G3_CMD]			= {0x10e, NI_660x_WRITE, DATA_2B},
+	[NI660X_G2_HW_SAVE]		= {0x110, NI_660x_READ, DATA_4B},
+	[NI660X_G3_HW_SAVE]		= {0x114, NI_660x_READ, DATA_4B},
+	[NI660X_G2_SW_SAVE]		= {0x118, NI_660x_READ, DATA_4B},
+	[NI660X_G3_SW_SAVE]		= {0x11c, NI_660x_READ, DATA_4B},
+	[NI660X_G2_MODE]		= {0x134, NI_660x_WRITE, DATA_2B},
+	[NI660X_G23_STATUS1]		= {0x136, NI_660x_READ, DATA_2B},
+	[NI660X_G3_MODE]		= {0x136, NI_660x_WRITE, DATA_2B},
+	[NI660X_G2_LOADA]		= {0x138, NI_660x_WRITE, DATA_4B},
+	[NI660X_G23_STATUS2]		= {0x13a, NI_660x_READ, DATA_2B},
+	[NI660X_G2_LOADB]		= {0x13c, NI_660x_WRITE, DATA_4B},
+	[NI660X_G3_LOADA]		= {0x140, NI_660x_WRITE, DATA_4B},
+	[NI660X_G3_LOADB]		= {0x144, NI_660x_WRITE, DATA_4B},
+	[NI660X_G2_INPUT_SEL]		= {0x148, NI_660x_WRITE, DATA_2B},
+	[NI660X_G3_INPUT_SEL]		= {0x14a, NI_660x_WRITE, DATA_2B},
+	[NI660X_G2_AUTO_INC]		= {0x188, NI_660x_WRITE, DATA_2B},
+	[NI660X_G3_AUTO_INC]		= {0x18a, NI_660x_WRITE, DATA_2B},
+	[NI660X_G23_RESET]		= {0x190, NI_660x_WRITE, DATA_2B},
+	[NI660X_G2_INT_ENA]		= {0x192, NI_660x_WRITE, DATA_2B},
+	[NI660X_G3_INT_ENA]		= {0x196, NI_660x_WRITE, DATA_2B},
+	[NI660X_G2_CNT_MODE]		= {0x1b0, NI_660x_WRITE, DATA_2B},
+	[NI660X_G3_CNT_MODE]		= {0x1b2, NI_660x_WRITE, DATA_2B},
+	[NI660X_G3_GATE2]		= {0x1b6, NI_660x_WRITE, DATA_2B},
+	[NI660X_G2_GATE2]		= {0x1b4, NI_660x_WRITE, DATA_2B},
+	[NI660X_G2_DMA_CFG]		= {0x1b8, NI_660x_WRITE, DATA_2B},
+	[NI660X_G2_DMA_STATUS]		= {0x1b8, NI_660x_READ, DATA_2B},
+	[NI660X_G3_DMA_CFG]		= {0x1ba, NI_660x_WRITE, DATA_2B},
+	[NI660X_G3_DMA_STATUS]		= {0x1ba, NI_660x_READ, DATA_2B},
+	[NI660X_DIO32_INPUT]		= {0x414, NI_660x_READ, DATA_4B},
+	[NI660X_DIO32_OUTPUT]		= {0x510, NI_660x_WRITE, DATA_4B},
+	[NI660X_CLK_CFG]		= {0x73c, NI_660x_WRITE, DATA_4B},
+	[NI660X_GLOBAL_INT_STATUS]	= {0x754, NI_660x_READ, DATA_4B},
+	[NI660X_DMA_CFG]		= {0x76c, NI_660x_WRITE, DATA_4B},
+	[NI660X_GLOBAL_INT_CFG]		= {0x770, NI_660x_WRITE, DATA_4B},
+	[NI660X_IO_CFG_0_1]		= {0x77c, NI_660x_READ_WRITE, DATA_2B},
+	[NI660X_IO_CFG_2_3]		= {0x77e, NI_660x_READ_WRITE, DATA_2B},
+	[NI660X_IO_CFG_4_5]		= {0x780, NI_660x_READ_WRITE, DATA_2B},
+	[NI660X_IO_CFG_6_7]		= {0x782, NI_660x_READ_WRITE, DATA_2B},
+	[NI660X_IO_CFG_8_9]		= {0x784, NI_660x_READ_WRITE, DATA_2B},
+	[NI660X_IO_CFG_10_11]		= {0x786, NI_660x_READ_WRITE, DATA_2B},
+	[NI660X_IO_CFG_12_13]		= {0x788, NI_660x_READ_WRITE, DATA_2B},
+	[NI660X_IO_CFG_14_15]		= {0x78a, NI_660x_READ_WRITE, DATA_2B},
+	[NI660X_IO_CFG_16_17]		= {0x78c, NI_660x_READ_WRITE, DATA_2B},
+	[NI660X_IO_CFG_18_19]		= {0x78e, NI_660x_READ_WRITE, DATA_2B},
+	[NI660X_IO_CFG_20_21]		= {0x790, NI_660x_READ_WRITE, DATA_2B},
+	[NI660X_IO_CFG_22_23]		= {0x792, NI_660x_READ_WRITE, DATA_2B},
+	[NI660X_IO_CFG_24_25]		= {0x794, NI_660x_READ_WRITE, DATA_2B},
+	[NI660X_IO_CFG_26_27]		= {0x796, NI_660x_READ_WRITE, DATA_2B},
+	[NI660X_IO_CFG_28_29]		= {0x798, NI_660x_READ_WRITE, DATA_2B},
+	[NI660X_IO_CFG_30_31]		= {0x79a, NI_660x_READ_WRITE, DATA_2B},
+	[NI660X_IO_CFG_32_33]		= {0x79c, NI_660x_READ_WRITE, DATA_2B},
+	[NI660X_IO_CFG_34_35]		= {0x79e, NI_660x_READ_WRITE, DATA_2B},
+	[NI660X_IO_CFG_36_37]		= {0x7a0, NI_660x_READ_WRITE, DATA_2B},
+	[NI660X_IO_CFG_38_39]		= {0x7a2, NI_660x_READ_WRITE, DATA_2B}
 };
 
 /* kind of ENABLE for the second counter */

commit 22acd860137ad6952fec8f6041efa9a30e49c22d
Author: H Hartley Sweeten <hsweeten@visionengravers.com>
Date:   Tue Mar 22 11:10:11 2016 -0700

    staging: comedi: ni_660x: change IOConfigReg() into a macro
    
    The BUG_ON() in this function is unnecessary. The 'pfi_channel' will
    always be in range of the subdevice 'n_chan' (NUM_PFI_CHANNELS) which
    will return a valid 'reg'.
    
    Convert the inline function into a simple macro.
    
    Signed-off-by: H Hartley Sweeten <hsweeten@visionengravers.com>
    Reviewed-by: Ian Abbott <abbotti@mev.co.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/drivers/ni_660x.c b/drivers/staging/comedi/drivers/ni_660x.c
index 46647c64f369..10db2fff899e 100644
--- a/drivers/staging/comedi/drivers/ni_660x.c
+++ b/drivers/staging/comedi/drivers/ni_660x.c
@@ -156,13 +156,7 @@ enum ni_660x_register {
 	NI660X_NUM_REGS,
 };
 
-static inline unsigned IOConfigReg(unsigned pfi_channel)
-{
-	unsigned reg = NI660X_IO_CFG_0_1 + pfi_channel / 2;
-
-	BUG_ON(reg > NI660X_IO_CFG_38_39);
-	return reg;
-}
+#define NI660X_IO_CFG(x)	(NI660X_IO_CFG_0_1 + ((x) / 2))
 
 enum ni_660x_register_width {
 	DATA_1B,
@@ -893,7 +887,7 @@ static void init_tio_chip(struct comedi_device *dev, int chipset)
 			       devpriv->dma_configuration_soft_copies[chipset],
 			       NI660X_DMA_CFG);
 	for (i = 0; i < NUM_PFI_CHANNELS; ++i)
-		ni_660x_write_register(dev, chipset, 0, IOConfigReg(i));
+		ni_660x_write_register(dev, chipset, 0, NI660X_IO_CFG(i));
 }
 
 static int ni_660x_dio_insn_bits(struct comedi_device *dev,
@@ -944,22 +938,22 @@ static void ni_660x_select_pfi_output(struct comedi_device *dev,
 	if (idle_chipset != active_chipset) {
 		idle_bits =
 		    ni_660x_read_register(dev, idle_chipset,
-					  IOConfigReg(pfi_channel));
+					  NI660X_IO_CFG(pfi_channel));
 		idle_bits &= ~pfi_output_select_mask(pfi_channel);
 		idle_bits |=
 		    pfi_output_select_bits(pfi_channel,
 					   pfi_output_select_high_Z);
 		ni_660x_write_register(dev, idle_chipset, idle_bits,
-				       IOConfigReg(pfi_channel));
+				       NI660X_IO_CFG(pfi_channel));
 	}
 
 	active_bits =
 	    ni_660x_read_register(dev, active_chipset,
-				  IOConfigReg(pfi_channel));
+				  NI660X_IO_CFG(pfi_channel));
 	active_bits &= ~pfi_output_select_mask(pfi_channel);
 	active_bits |= pfi_output_select_bits(pfi_channel, output_select);
 	ni_660x_write_register(dev, active_chipset, active_bits,
-			       IOConfigReg(pfi_channel));
+			       NI660X_IO_CFG(pfi_channel));
 }
 
 static int ni_660x_set_pfi_routing(struct comedi_device *dev, unsigned chan,
@@ -1025,10 +1019,10 @@ static int ni_660x_dio_insn_config(struct comedi_device *dev,
 		break;
 
 	case INSN_CONFIG_FILTER:
-		val = ni_660x_read_register(dev, 0, IOConfigReg(chan));
+		val = ni_660x_read_register(dev, 0, NI660X_IO_CFG(chan));
 		val &= ~pfi_input_select_mask(chan);
 		val |= pfi_input_select_bits(chan, data[1]);
-		ni_660x_write_register(dev, 0, val, IOConfigReg(chan));
+		ni_660x_write_register(dev, 0, val, NI660X_IO_CFG(chan));
 		break;
 
 	default:

commit e3baeea2848e939c55a6d8ff0c8e2375c52e6e90
Author: Ian Abbott <abbotti@mev.co.uk>
Date:   Fri Mar 27 19:13:48 2015 +0000

    staging: comedi: ni_660x: remove #include "comedi_fc.h"
    
    "ni_660x.c" doesn't use anything from "comedi_fc.h".
    
    Signed-off-by: Ian Abbott <abbotti@mev.co.uk>
    Reviewed-by: H Hartley Sweeten <hsweeten@visionengravers.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/drivers/ni_660x.c b/drivers/staging/comedi/drivers/ni_660x.c
index b913158e5706..46647c64f369 100644
--- a/drivers/staging/comedi/drivers/ni_660x.c
+++ b/drivers/staging/comedi/drivers/ni_660x.c
@@ -39,7 +39,6 @@
 
 #include "../comedi_pci.h"
 
-#include "comedi_fc.h"
 #include "mite.h"
 #include "ni_tio.h"
 

commit a6c760b1a715c18e7599d6848bb120e8f9032273
Author: Ian Abbott <abbotti@mev.co.uk>
Date:   Tue Mar 10 16:11:08 2015 +0000

    staging: comedi: ni_660x: include new "comedi_pci.h" header
    
    Include the new "../comedi_pci.h" header instead of <linux/pci.h> and
    "../comedidev.h", which will now get included indirectly.
    
    Signed-off-by: Ian Abbott <abbotti@mev.co.uk>
    Reviewed-by: H Hartley Sweeten <hsweeten@visionengravers.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/drivers/ni_660x.c b/drivers/staging/comedi/drivers/ni_660x.c
index 660dc6fc777e..b913158e5706 100644
--- a/drivers/staging/comedi/drivers/ni_660x.c
+++ b/drivers/staging/comedi/drivers/ni_660x.c
@@ -35,10 +35,9 @@
  */
 
 #include <linux/module.h>
-#include <linux/pci.h>
 #include <linux/interrupt.h>
 
-#include "../comedidev.h"
+#include "../comedi_pci.h"
 
 #include "comedi_fc.h"
 #include "mite.h"

commit c8f4b98f47e498a823d1b82b8f3848d81183ea22
Author: H Hartley Sweeten <hsweeten@visionengravers.com>
Date:   Thu Mar 5 13:21:17 2015 -0700

    staging: comedi: drivers/*.c: remove unnecessary blank lines
    
    Blank lines are not needed before a close brace '}' or after an
    open brace '{'. Also remove any multiple blank lines.
    
    Signed-off-by: H Hartley Sweeten <hsweeten@visionengravers.com>
    Reviewed-by: Ian Abbott <abbotti@mev.co.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/drivers/ni_660x.c b/drivers/staging/comedi/drivers/ni_660x.c
index 9d7567bf1ce3..660dc6fc777e 100644
--- a/drivers/staging/comedi/drivers/ni_660x.c
+++ b/drivers/staging/comedi/drivers/ni_660x.c
@@ -195,7 +195,6 @@ static inline unsigned NI_660X_GPCT_SUBDEV(unsigned index)
 }
 
 struct NI_660xRegisterData {
-
 	const char *name;	/*  Register Name */
 	int offset;		/*  Offset from base address from GPCT chip */
 	enum ni_660x_register_direction direction;

commit 307da4b2e89c388d2e44efdd6899d4d1d8429806
Author: H Hartley Sweeten <hsweeten@visionengravers.com>
Date:   Wed Mar 4 12:15:34 2015 -0700

    staging: comedi: ni_660x: (!foo) preferred over (foo == NULL)
    
    Signed-off-by: H Hartley Sweeten <hsweeten@visionengravers.com>
    Reviewed-by: Ian Abbott <abbotti@mev.co.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/drivers/ni_660x.c b/drivers/staging/comedi/drivers/ni_660x.c
index 1e4dd82b12ea..9d7567bf1ce3 100644
--- a/drivers/staging/comedi/drivers/ni_660x.c
+++ b/drivers/staging/comedi/drivers/ni_660x.c
@@ -702,7 +702,7 @@ static int ni_660x_request_mite_channel(struct comedi_device *dev,
 	BUG_ON(counter->mite_chan);
 	mite_chan = mite_request_channel(devpriv->mite,
 					 mite_ring(devpriv, counter));
-	if (mite_chan == NULL) {
+	if (!mite_chan) {
 		spin_unlock_irqrestore(&devpriv->mite_channel_lock, flags);
 		dev_err(dev->class_dev,
 			"failed to reserve mite dma channel for counter\n");
@@ -861,7 +861,7 @@ static int ni_660x_alloc_mite_rings(struct comedi_device *dev)
 		for (j = 0; j < counters_per_chip; ++j) {
 			devpriv->mite_rings[i][j] =
 			    mite_alloc_ring(devpriv->mite);
-			if (devpriv->mite_rings[i][j] == NULL)
+			if (!devpriv->mite_rings[i][j])
 				return -ENOMEM;
 		}
 	}
@@ -1107,7 +1107,7 @@ static int ni_660x_auto_attach(struct comedi_device *dev,
 						     ni_gpct_variant_660x,
 						     ni_660x_num_counters
 						     (dev));
-	if (devpriv->counter_dev == NULL)
+	if (!devpriv->counter_dev)
 		return -ENOMEM;
 	for (i = 0; i < NI_660X_MAX_NUM_COUNTERS; ++i) {
 		s = &dev->subdevices[NI_660X_GPCT_SUBDEV(i)];

commit 9e1a0824cb02ce376c5315028e54a2eef61b1d31
Author: H Hartley Sweeten <hsweeten@visionengravers.com>
Date:   Thu Sep 18 11:11:27 2014 -0700

    staging: comedi: ni_660x: use comedi_handle_events()
    
    cfc_handle_events() is just a wrapper around comedi_handle_events().
    
    Signed-off-by: H Hartley Sweeten <hsweeten@visionengravers.com>
    Reviewed-by: Ian Abbott <abbotti@mev.co.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/drivers/ni_660x.c b/drivers/staging/comedi/drivers/ni_660x.c
index 5b6794c8232e..1e4dd82b12ea 100644
--- a/drivers/staging/comedi/drivers/ni_660x.c
+++ b/drivers/staging/comedi/drivers/ni_660x.c
@@ -780,7 +780,7 @@ static void ni_660x_handle_gpct_interrupt(struct comedi_device *dev,
 	struct ni_gpct *counter = s->private;
 
 	ni_tio_handle_interrupt(counter, s);
-	cfc_handle_events(dev, s);
+	comedi_handle_events(dev, s);
 }
 
 static irqreturn_t ni_660x_interrupt(int irq, void *d)

commit da8e2a52bed99beca82e3d69566e6d31f0f020f0
Author: Ian Abbott <abbotti@mev.co.uk>
Date:   Tue Sep 9 11:26:37 2014 +0100

    staging: comedi: ni_660x: replace comedi_board() calls
    
    The `comedi_board(dev)` inline function calls just return
    `dev->board_ptr`.  Expand the inline function calls.
    
    Signed-off-by: Ian Abbott <abbotti@mev.co.uk>
    Reviewed-by: H Hartley Sweeten <hsweeten@visionengravers.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/drivers/ni_660x.c b/drivers/staging/comedi/drivers/ni_660x.c
index b0b03d4d6081..5b6794c8232e 100644
--- a/drivers/staging/comedi/drivers/ni_660x.c
+++ b/drivers/staging/comedi/drivers/ni_660x.c
@@ -433,7 +433,7 @@ struct ni_660x_private {
 
 static inline unsigned ni_660x_num_counters(struct comedi_device *dev)
 {
-	const struct ni_660x_board *board = comedi_board(dev);
+	const struct ni_660x_board *board = dev->board_ptr;
 
 	return board->n_chips * counters_per_chip;
 }
@@ -852,7 +852,7 @@ static int ni_660x_allocate_private(struct comedi_device *dev)
 
 static int ni_660x_alloc_mite_rings(struct comedi_device *dev)
 {
-	const struct ni_660x_board *board = comedi_board(dev);
+	const struct ni_660x_board *board = dev->board_ptr;
 	struct ni_660x_private *devpriv = dev->private;
 	unsigned i;
 	unsigned j;
@@ -870,7 +870,7 @@ static int ni_660x_alloc_mite_rings(struct comedi_device *dev)
 
 static void ni_660x_free_mite_rings(struct comedi_device *dev)
 {
-	const struct ni_660x_board *board = comedi_board(dev);
+	const struct ni_660x_board *board = dev->board_ptr;
 	struct ni_660x_private *devpriv = dev->private;
 	unsigned i;
 	unsigned j;
@@ -924,7 +924,7 @@ static void ni_660x_select_pfi_output(struct comedi_device *dev,
 				      unsigned pfi_channel,
 				      unsigned output_select)
 {
-	const struct ni_660x_board *board = comedi_board(dev);
+	const struct ni_660x_board *board = dev->board_ptr;
 	static const unsigned counter_4_7_first_pfi = 8;
 	static const unsigned counter_4_7_last_pfi = 23;
 	unsigned active_chipset = 0;

commit 5f8a5f4fa4c2c3fa7e66c7b002039a8046e4d99d
Author: H Hartley Sweeten <hsweeten@visionengravers.com>
Date:   Tue Jul 29 15:01:38 2014 -0700

    staging: comedi: mite: use the comedi_device 'mmio' member
    
    Use the new 'mmio' member in the comedi_device for the ioremap'ed
    'daq_io_addr'.
    
    Move the iounmap of this address from mite_detach() to the drivers
    that use the mite module.
    
    Signed-off-by: H Hartley Sweeten <hsweeten@visionengravers.com>
    Reviewed-by: Ian Abbott <abbotti@mev.co.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/drivers/ni_660x.c b/drivers/staging/comedi/drivers/ni_660x.c
index fa19a8e7627d..b0b03d4d6081 100644
--- a/drivers/staging/comedi/drivers/ni_660x.c
+++ b/drivers/staging/comedi/drivers/ni_660x.c
@@ -587,17 +587,14 @@ static inline void ni_660x_write_register(struct comedi_device *dev,
 					  unsigned chip, unsigned bits,
 					  enum ni_660x_register reg)
 {
-	struct ni_660x_private *devpriv = dev->private;
-	void __iomem *write_address =
-	    devpriv->mite->daq_io_addr + GPCT_OFFSET[chip] +
-	    registerData[reg].offset;
+	unsigned int addr = GPCT_OFFSET[chip] + registerData[reg].offset;
 
 	switch (registerData[reg].size) {
 	case DATA_2B:
-		writew(bits, write_address);
+		writew(bits, dev->mmio + addr);
 		break;
 	case DATA_4B:
-		writel(bits, write_address);
+		writel(bits, dev->mmio + addr);
 		break;
 	default:
 		BUG();
@@ -609,16 +606,13 @@ static inline unsigned ni_660x_read_register(struct comedi_device *dev,
 					     unsigned chip,
 					     enum ni_660x_register reg)
 {
-	struct ni_660x_private *devpriv = dev->private;
-	void __iomem *read_address =
-	    devpriv->mite->daq_io_addr + GPCT_OFFSET[chip] +
-	    registerData[reg].offset;
+	unsigned int addr = GPCT_OFFSET[chip] + registerData[reg].offset;
 
 	switch (registerData[reg].size) {
 	case DATA_2B:
-		return readw(read_address);
+		return readw(dev->mmio + addr);
 	case DATA_4B:
-		return readl(read_address);
+		return readl(dev->mmio + addr);
 	default:
 		BUG();
 		break;
@@ -1190,6 +1184,8 @@ static void ni_660x_detach(struct comedi_device *dev)
 		ni_660x_free_mite_rings(dev);
 		mite_detach(devpriv->mite);
 	}
+	if (dev->mmio)
+		iounmap(dev->mmio);
 	comedi_pci_disable(dev);
 }
 

commit 3bb7c3abe34349a5f3615159d80aaee25c34e2a7
Author: H Hartley Sweeten <hsweeten@visionengravers.com>
Date:   Tue Jul 29 15:01:37 2014 -0700

    staging: comedi: mite: pass comedi_device to mite_setup()
    
    For aesthetics, pass the comedi_device to mite_setup() and mite_setup2()
    so that the dev->class_dev can be used in the dev_{level} message to make
    the messages have consistancy with the other comedi drivers.
    
    Remove the extra dev_warn() noise in the drivers when mite_setup() fails.
    
    Rename the 'use_iodwbsr_1' parameter and change it to a bool.
    
    Signed-off-by: H Hartley Sweeten <hsweeten@visionengravers.com>
    Reviewed-by: Ian Abbott <abbotti@mev.co.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/drivers/ni_660x.c b/drivers/staging/comedi/drivers/ni_660x.c
index ef4a8f0fb29c..fa19a8e7627d 100644
--- a/drivers/staging/comedi/drivers/ni_660x.c
+++ b/drivers/staging/comedi/drivers/ni_660x.c
@@ -1078,11 +1078,9 @@ static int ni_660x_auto_attach(struct comedi_device *dev,
 	if (!devpriv->mite)
 		return -ENOMEM;
 
-	ret = mite_setup2(devpriv->mite, 1);
-	if (ret < 0) {
-		dev_warn(dev->class_dev, "error setting up mite\n");
+	ret = mite_setup2(dev, devpriv->mite, true);
+	if (ret < 0)
 		return ret;
-	}
 
 	ret = ni_660x_alloc_mite_rings(dev);
 	if (ret < 0)

commit f8cfd0eb3c11337844215c5e93937c561858eb13
Author: H Hartley Sweeten <hsweeten@visionengravers.com>
Date:   Mon Jul 28 10:27:04 2014 -0700

    staging: comedi: ni_tiocmd: introduce ni_tio_acknowledge()
    
    The external callers of ni_tio_acknowledge_and_confirm() only call
    this function to ack any pending errors or interrupts before starting
    a new async command. Only the internal code in ni_tiocmd uses the
    data that is optionally returned by this function.
    
    Remove the export from ni_tio_acknowledge_and_confirm() and introduce
    a new exported function that handles passing the NULL params.
    
    Signed-off-by: H Hartley Sweeten <hsweeten@visionengravers.com>
    Reviewed-by: Ian Abbott <abbotti@mev.co.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/drivers/ni_660x.c b/drivers/staging/comedi/drivers/ni_660x.c
index 20fe692fd8f0..ef4a8f0fb29c 100644
--- a/drivers/staging/comedi/drivers/ni_660x.c
+++ b/drivers/staging/comedi/drivers/ni_660x.c
@@ -749,7 +749,7 @@ static int ni_660x_cmd(struct comedi_device *dev, struct comedi_subdevice *s)
 			"no dma channel available for use by counter\n");
 		return retval;
 	}
-	ni_tio_acknowledge_and_confirm(counter, NULL, NULL, NULL, NULL);
+	ni_tio_acknowledge(counter);
 
 	return ni_tio_cmd(dev, s);
 }

commit d546b8966e66b114809d4af14e2d837adeeec2fc
Author: H Hartley Sweeten <hsweeten@visionengravers.com>
Date:   Mon Jul 21 11:48:32 2014 -0700

    staging: comedi: comedidev.h: remove 'new_size' param from subdevice (*buf_change)
    
    This parameter is never used by any of the comedi drivers that provide a
    (*buf_change) callback. If the 'new_size' is needed in the callback it can
    be found from the 's->async->prealloc_bufsz' as done in the ni_pcidio driver.
    
    Remove the unused parameter.
    
    Signed-off-by: H Hartley Sweeten <hsweeten@visionengravers.com>
    Reviewed-by: Ian Abbott <abbotti@mev.co.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/drivers/ni_660x.c b/drivers/staging/comedi/drivers/ni_660x.c
index 6b8c702f2008..20fe692fd8f0 100644
--- a/drivers/staging/comedi/drivers/ni_660x.c
+++ b/drivers/staging/comedi/drivers/ni_660x.c
@@ -825,8 +825,7 @@ static int ni_660x_input_poll(struct comedi_device *dev,
 }
 
 static int ni_660x_buf_change(struct comedi_device *dev,
-			      struct comedi_subdevice *s,
-			      unsigned long new_size)
+			      struct comedi_subdevice *s)
 {
 	struct ni_660x_private *devpriv = dev->private;
 	struct ni_gpct *counter = s->private;

commit 71e068743a5e4061a7a3c42cc3ac6dbda7a7f76e
Author: H Hartley Sweeten <hsweeten@visionengravers.com>
Date:   Fri Jul 18 17:01:24 2014 -0700

    staging: comedi: drivers: use dev->board_name in request_irq()
    
    Most of the comedi drivers use the dev->board_name for the id string
    passed to request_irq(). Fix the couple that still pass something
    else.
    
    Also, propogate the errno from request_irq().
    
    Signed-off-by: H Hartley Sweeten <hsweeten@visionengravers.com>
    Reviewed-by: Ian Abbott <abbotti@mev.co.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/drivers/ni_660x.c b/drivers/staging/comedi/drivers/ni_660x.c
index f0580568d53a..6b8c702f2008 100644
--- a/drivers/staging/comedi/drivers/ni_660x.c
+++ b/drivers/staging/comedi/drivers/ni_660x.c
@@ -1165,8 +1165,8 @@ static int ni_660x_auto_attach(struct comedi_device *dev,
 	for (i = 0; i < board->n_chips; ++i)
 		set_tio_counterswap(dev, i);
 
-	ret = request_irq(pcidev->irq, ni_660x_interrupt,
-			  IRQF_SHARED, "ni_660x", dev);
+	ret = request_irq(pcidev->irq, ni_660x_interrupt, IRQF_SHARED,
+			  dev->board_name, dev);
 	if (ret < 0) {
 		dev_warn(dev->class_dev, " irq not available\n");
 		return ret;

commit 22bc059eb4bf9c416c97e69251258a261454d0ce
Author: H Hartley Sweeten <hsweeten@visionengravers.com>
Date:   Thu Jul 17 11:57:36 2014 -0700

    staging: comedi: ni_660x: remove use of comedi_error()
    
    The comedi_error() function is just a wrapper around dev_err() that adds
    the dev->driver->driver_name prefix to the message and a terminating
    new-line character. The addition of the driver_name is just added noise
    and some of the users of comedi_error() add unnecessary additional new-line
    characters.
    
    Use dev_err() directly instead of comedi_error() to avoid any confusion
    and so that all the comedi generated kernel messages have the same format.
    
    Signed-off-by: H Hartley Sweeten <hsweeten@visionengravers.com>
    Cc: Ian Abbott <abbotti@mev.co.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/drivers/ni_660x.c b/drivers/staging/comedi/drivers/ni_660x.c
index 673fa52c5cf3..f0580568d53a 100644
--- a/drivers/staging/comedi/drivers/ni_660x.c
+++ b/drivers/staging/comedi/drivers/ni_660x.c
@@ -710,8 +710,8 @@ static int ni_660x_request_mite_channel(struct comedi_device *dev,
 					 mite_ring(devpriv, counter));
 	if (mite_chan == NULL) {
 		spin_unlock_irqrestore(&devpriv->mite_channel_lock, flags);
-		comedi_error(dev,
-			     "failed to reserve mite dma channel for counter.");
+		dev_err(dev->class_dev,
+			"failed to reserve mite dma channel for counter\n");
 		return -EBUSY;
 	}
 	mite_chan->dir = direction;
@@ -745,8 +745,8 @@ static int ni_660x_cmd(struct comedi_device *dev, struct comedi_subdevice *s)
 
 	retval = ni_660x_request_mite_channel(dev, counter, COMEDI_INPUT);
 	if (retval) {
-		comedi_error(dev,
-			     "no dma channel available for use by counter");
+		dev_err(dev->class_dev,
+			"no dma channel available for use by counter\n");
 		return retval;
 	}
 	ni_tio_acknowledge_and_confirm(counter, NULL, NULL, NULL, NULL);

commit 56e9bef541aef1a15f9c84310641e6fe100a28e4
Author: H Hartley Sweeten <hsweeten@visionengravers.com>
Date:   Wed Jul 16 11:22:55 2014 -0700

    staging: comedi: ni_660x: checkpatch.pl cleanup (space prohibited)
    
    Fix the checkpatch.pl warning:
    
    WARNING: space prohibited before semicolon
    
    Signed-off-by: H Hartley Sweeten <hsweeten@visionengravers.com>
    Cc: Ian Abbott <abbotti@mev.co.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/drivers/ni_660x.c b/drivers/staging/comedi/drivers/ni_660x.c
index 3e01978f822b..673fa52c5cf3 100644
--- a/drivers/staging/comedi/drivers/ni_660x.c
+++ b/drivers/staging/comedi/drivers/ni_660x.c
@@ -1122,9 +1122,8 @@ static int ni_660x_auto_attach(struct comedi_device *dev,
 		s = &dev->subdevices[NI_660X_GPCT_SUBDEV(i)];
 		if (i < ni_660x_num_counters(dev)) {
 			s->type = COMEDI_SUBD_COUNTER;
-			s->subdev_flags =
-			    SDF_READABLE | SDF_WRITABLE | SDF_LSAMPL |
-			    SDF_CMD_READ /* | SDF_CMD_WRITE */ ;
+			s->subdev_flags = SDF_READABLE | SDF_WRITABLE |
+					  SDF_LSAMPL | SDF_CMD_READ;
 			s->n_chan = 3;
 			s->maxdata = 0xffffffff;
 			s->insn_read = ni_tio_insn_read;

commit c8c8ff887cafb03c8660f81671f11c1d62dcc857
Author: H Hartley Sweeten <hsweeten@visionengravers.com>
Date:   Wed Jul 16 11:22:54 2014 -0700

    staging: comedi: ni_660x: checkpatch.pl cleanup (trailing whitespace)
    
    Fix the checkpatch.pl error:
    
    ERROR: trailing whitespace
    
    Signed-off-by: H Hartley Sweeten <hsweeten@visionengravers.com>
    Cc: Ian Abbott <abbotti@mev.co.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/drivers/ni_660x.c b/drivers/staging/comedi/drivers/ni_660x.c
index 7755f119744d..3e01978f822b 100644
--- a/drivers/staging/comedi/drivers/ni_660x.c
+++ b/drivers/staging/comedi/drivers/ni_660x.c
@@ -28,7 +28,7 @@
  *
  * Encoders work.  PulseGeneration (both single pulse and pulse train)
  * works.  Buffered commands work for input but not output.
- * 
+ *
  * References:
  * DAQ 660x Register-Level Programmer Manual  (NI 370505A-01)
  * DAQ 6601/6602 User Manual (NI 322137B-01)

commit c4c2c67a7af2a25545e060c8d386d1f0d9f06e15
Author: H Hartley Sweeten <hsweeten@visionengravers.com>
Date:   Wed Jul 16 11:02:06 2014 -0700

    staging: comedi: ni_660x: checkpatch.pl cleanup (missing blank line)
    
    Fix the checkpatch.pl warning:
    
    WARNING: Missing a blank line after declarations
    
    Signed-off-by: H Hartley Sweeten <hsweeten@visionengravers.com>
    Cc: Ian Abbott <abbotti@mev.co.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/drivers/ni_660x.c b/drivers/staging/comedi/drivers/ni_660x.c
index 72805e9a2798..7755f119744d 100644
--- a/drivers/staging/comedi/drivers/ni_660x.c
+++ b/drivers/staging/comedi/drivers/ni_660x.c
@@ -161,6 +161,7 @@ enum ni_660x_register {
 static inline unsigned IOConfigReg(unsigned pfi_channel)
 {
 	unsigned reg = NI660X_IO_CFG_0_1 + pfi_channel / 2;
+
 	BUG_ON(reg > NI660X_IO_CFG_38_39);
 	return reg;
 }

commit f9558b49dc2acabb95fb40b7486b7b41d317215e
Author: H Hartley Sweeten <hsweeten@visionengravers.com>
Date:   Wed Jul 16 10:43:31 2014 -0700

    staging: comedi: ni_660x: checkpatch.pl cleanup (else not useful)
    
    Fix the checkpatch.pl warning:
    
    WARNING: else is not generally useful after a break or return
    
    Signed-off-by: H Hartley Sweeten <hsweeten@visionengravers.com>
    Cc: Ian Abbott <abbotti@mev.co.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/drivers/ni_660x.c b/drivers/staging/comedi/drivers/ni_660x.c
index d09b8667cd42..72805e9a2798 100644
--- a/drivers/staging/comedi/drivers/ni_660x.c
+++ b/drivers/staging/comedi/drivers/ni_660x.c
@@ -310,10 +310,7 @@ enum clock_config_register_bits {
 /* ioconfigreg */
 static inline unsigned ioconfig_bitshift(unsigned pfi_channel)
 {
-	if (pfi_channel % 2)
-		return 0;
-	else
-		return 8;
+	return (pfi_channel % 2) ? 0 : 8;
 }
 
 static inline unsigned pfi_output_select_mask(unsigned pfi_channel)

commit eb8051d73ccd0c3b3dfbd03ca764e6b1c7fb9a6b
Author: H Hartley Sweeten <hsweeten@visionengravers.com>
Date:   Wed Jul 16 10:43:30 2014 -0700

    staging: comedi: ni_660x: checkpatch.pl cleanup (break not useful)
    
    Fix the checkpatch.pl warnings:
    
    WARNING: break is not useful after a goto or return
    
    Signed-off-by: H Hartley Sweeten <hsweeten@visionengravers.com>
    Cc: Ian Abbott <abbotti@mev.co.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/drivers/ni_660x.c b/drivers/staging/comedi/drivers/ni_660x.c
index 27d435f2565b..d09b8667cd42 100644
--- a/drivers/staging/comedi/drivers/ni_660x.c
+++ b/drivers/staging/comedi/drivers/ni_660x.c
@@ -619,10 +619,8 @@ static inline unsigned ni_660x_read_register(struct comedi_device *dev,
 	switch (registerData[reg].size) {
 	case DATA_2B:
 		return readw(read_address);
-		break;
 	case DATA_4B:
 		return readl(read_address);
-		break;
 	default:
 		BUG();
 		break;

commit b876e985c2273b7bd2d5539f2147ef69f7701129
Author: H Hartley Sweeten <hsweeten@visionengravers.com>
Date:   Fri Jun 20 11:10:35 2014 -0700

    staging: comedi: mite: cleanup mite_unsetup()
    
    This function is only called by comedi drivers during the (*detach) of the
    driver. After it is called mite_free() is always called to kfree the allocated
    mite_struct pointer.
    
    Rename this function to mite_detach() and merge the kfree() from mite_free()
    into it.
    
    Remove the unnecessary clearing of the mite variables since the mite pointer
    is going to be kfree()'d anyway.
    
    The mite_detach() function checks if the pointer is valid so remove the
    unnecessary checks in the callers.
    
    The check can also be removed in ni_660x since the ni_660x_free_mite_rings()
    function does not actually need the 'mite' pointer.
    
    Signed-off-by: H Hartley Sweeten <hsweeten@visionengravers.com>
    Reviewed-by: Ian Abbott <abbotti@mev.co.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/drivers/ni_660x.c b/drivers/staging/comedi/drivers/ni_660x.c
index 5f80bcabd40d..27d435f2565b 100644
--- a/drivers/staging/comedi/drivers/ni_660x.c
+++ b/drivers/staging/comedi/drivers/ni_660x.c
@@ -1195,11 +1195,8 @@ static void ni_660x_detach(struct comedi_device *dev)
 	if (devpriv) {
 		if (devpriv->counter_dev)
 			ni_gpct_device_destroy(devpriv->counter_dev);
-		if (devpriv->mite) {
-			ni_660x_free_mite_rings(dev);
-			mite_unsetup(devpriv->mite);
-			mite_free(devpriv->mite);
-		}
+		ni_660x_free_mite_rings(dev);
+		mite_detach(devpriv->mite);
 	}
 	comedi_pci_disable(dev);
 }

commit ba9d29fe102d4b4e388ba510f4a71b8b737144b9
Author: H Hartley Sweeten <hsweeten@visionengravers.com>
Date:   Fri Jun 20 11:10:33 2014 -0700

    staging: comedi: mite.h: remove mite_irq()
    
    This inline function simply returns the 'irq' of the struct pci_dev pointer
    that is stored in struct mite_struct. This pci_dev pointer is the same as
    the one that is already available in the (*auto_attach) functions where
    mite_irq() is used.
    
    Use the pci_dev pointer directly to get the irq and remove the unnecessary
    inline function to remove the indirection.
    
    Signed-off-by: H Hartley Sweeten <hsweeten@visionengravers.com>
    Reviewed-by: Ian Abbott <abbotti@mev.co.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/drivers/ni_660x.c b/drivers/staging/comedi/drivers/ni_660x.c
index 634cde83a02b..5f80bcabd40d 100644
--- a/drivers/staging/comedi/drivers/ni_660x.c
+++ b/drivers/staging/comedi/drivers/ni_660x.c
@@ -1170,13 +1170,13 @@ static int ni_660x_auto_attach(struct comedi_device *dev,
 	for (i = 0; i < board->n_chips; ++i)
 		set_tio_counterswap(dev, i);
 
-	ret = request_irq(mite_irq(devpriv->mite), ni_660x_interrupt,
+	ret = request_irq(pcidev->irq, ni_660x_interrupt,
 			  IRQF_SHARED, "ni_660x", dev);
 	if (ret < 0) {
 		dev_warn(dev->class_dev, " irq not available\n");
 		return ret;
 	}
-	dev->irq = mite_irq(devpriv->mite);
+	dev->irq = pcidev->irq;
 	global_interrupt_config_bits = Global_Int_Enable_Bit;
 	if (board->n_chips > 1)
 		global_interrupt_config_bits |= Cascade_Int_Enable_Bit;

commit 74f63db7ae614aee8370df6152c0da76e14b6ff0
Author: Ian Abbott <abbotti@mev.co.uk>
Date:   Tue May 6 13:12:16 2014 +0100

    staging: comedi: mite: pass subdevice to mite_sync_input_dma()
    
    `mite_sync_input_dma()` in the "mite" module currently takes a pointer
    to a `struct comedi_async` and gets a pointer to the owning `struct
    comedi_subdevice` from the `subdevice` member.  Change it to take a
    pointer to a `struct comedi_subdevice` and use the `async` member.
    
    The motivation for this is to eliminate the `subdevice` member of
    `struct comedi_async`.
    
    Signed-off-by: Ian Abbott <abbotti@mev.co.uk>
    Reviewed-by: H Hartley Sweeten <hsweeten@visionengravers.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/drivers/ni_660x.c b/drivers/staging/comedi/drivers/ni_660x.c
index 3901e3b5ba51..634cde83a02b 100644
--- a/drivers/staging/comedi/drivers/ni_660x.c
+++ b/drivers/staging/comedi/drivers/ni_660x.c
@@ -823,7 +823,7 @@ static int ni_660x_input_poll(struct comedi_device *dev,
 
 	/* lock to avoid race with comedi_poll */
 	spin_lock_irqsave(&devpriv->interrupt_lock, flags);
-	mite_sync_input_dma(counter->mite_chan, s->async);
+	mite_sync_input_dma(counter->mite_chan, s);
 	spin_unlock_irqrestore(&devpriv->interrupt_lock, flags);
 	return comedi_buf_read_n_available(s);
 }

commit b74e635d1c00b2532d32de4173115b08047229ed
Author: Ian Abbott <abbotti@mev.co.uk>
Date:   Tue May 6 13:12:15 2014 +0100

    staging: comedi: mite: pass subdevice to mite_buf_change()
    
    `mite_buf_change()` in the "mite" module currently takes a pointer to a
    `struct comedi_async` and gets a pointer to the owning `struct
    comedi_subdevice` from the `subdevice` member.  Change it to take a
    pointer to a `struct comedi_subdevice` and use the `async` member.
    
    The motivation for this is to eliminate the `subdevice` member of
    `struct comedi_async`.
    
    Signed-off-by: Ian Abbott <abbotti@mev.co.uk>
    Reviewed-by: H Hartley Sweeten <hsweeten@visionengravers.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/drivers/ni_660x.c b/drivers/staging/comedi/drivers/ni_660x.c
index 2858b3d559c1..3901e3b5ba51 100644
--- a/drivers/staging/comedi/drivers/ni_660x.c
+++ b/drivers/staging/comedi/drivers/ni_660x.c
@@ -836,7 +836,7 @@ static int ni_660x_buf_change(struct comedi_device *dev,
 	struct ni_gpct *counter = s->private;
 	int ret;
 
-	ret = mite_buf_change(mite_ring(devpriv, counter), s->async);
+	ret = mite_buf_change(mite_ring(devpriv, counter), s);
 	if (ret < 0)
 		return ret;
 

commit e9edef3a5454a19fd0d0c342cc88b6310b871a48
Author: Ian Abbott <abbotti@mev.co.uk>
Date:   Tue May 6 13:12:09 2014 +0100

    staging: comedi: pass subdevice to comedi_buf_read_n_available()
    
    Change the parameters of `comedi_buf_read_n_available()` to pass a
    pointer to the comedi subdevice instead of a pointer to the "async"
    structure belonging to the subdevice.
    
    The main aim at the moment is to replace all the `struct comedi_async *`
    parameters with `struct comedi_subdevice *` parameters in the comedi
    driver API.
    
    Signed-off-by: Ian Abbott <abbotti@mev.co.uk>
    Reviewed-by: H Hartley Sweeten <hsweeten@visionengravers.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/drivers/ni_660x.c b/drivers/staging/comedi/drivers/ni_660x.c
index 0d4b9019f76a..2858b3d559c1 100644
--- a/drivers/staging/comedi/drivers/ni_660x.c
+++ b/drivers/staging/comedi/drivers/ni_660x.c
@@ -825,7 +825,7 @@ static int ni_660x_input_poll(struct comedi_device *dev,
 	spin_lock_irqsave(&devpriv->interrupt_lock, flags);
 	mite_sync_input_dma(counter->mite_chan, s->async);
 	spin_unlock_irqrestore(&devpriv->interrupt_lock, flags);
-	return comedi_buf_read_n_available(s->async);
+	return comedi_buf_read_n_available(s);
 }
 
 static int ni_660x_buf_change(struct comedi_device *dev,

commit 199c3536dd38e7e3491534d418fb41e55dd613a4
Author: H Hartley Sweeten <hsweeten@visionengravers.com>
Date:   Fri Mar 7 17:31:41 2014 -0700

    staging: comedi: ni_660x: use cfc_handle_events()
    
    Use the comedi_fc helper function instead of duplicating the code.
    
    In the Kconfig, COMEDI_NI_660X selects COMEDI_FC indirectly by selecting
    COMEDI_NI_TIOCMD which selects COMEDI_MITE which selects COMEDI_FC.
    
    Signed-off-by: H Hartley Sweeten <hsweeten@visionengravers.com>
    Reviewed-by: Ian Abbott <abbotti@mev.co.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/drivers/ni_660x.c b/drivers/staging/comedi/drivers/ni_660x.c
index b8c3fbe25b21..0d4b9019f76a 100644
--- a/drivers/staging/comedi/drivers/ni_660x.c
+++ b/drivers/staging/comedi/drivers/ni_660x.c
@@ -40,6 +40,7 @@
 
 #include "../comedidev.h"
 
+#include "comedi_fc.h"
 #include "mite.h"
 #include "ni_tio.h"
 
@@ -789,13 +790,7 @@ static void ni_660x_handle_gpct_interrupt(struct comedi_device *dev,
 	struct ni_gpct *counter = s->private;
 
 	ni_tio_handle_interrupt(counter, s);
-	if (s->async->events) {
-		if (s->async->events & (COMEDI_CB_EOA | COMEDI_CB_ERROR |
-					COMEDI_CB_OVERFLOW)) {
-			ni_660x_cancel(dev, s);
-		}
-		comedi_event(dev, s);
-	}
+	cfc_handle_events(dev, s);
 }
 
 static irqreturn_t ni_660x_interrupt(int irq, void *d)

commit c93999c21319439c4fe2da85f2ec40ed477379ac
Author: H Hartley Sweeten <hsweeten@visionengravers.com>
Date:   Mon Feb 3 11:26:50 2014 -0700

    staging: comedi: drivers: remove final 'attach' messages
    
    These messages are just added noise. Remove them.
    
    Signed-off-by: H Hartley Sweeten <hsweeten@visionengravers.com>
    Reviewed-by: Ian Abbott <abbotti@mev.co.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/drivers/ni_660x.c b/drivers/staging/comedi/drivers/ni_660x.c
index df42e3906171..b8c3fbe25b21 100644
--- a/drivers/staging/comedi/drivers/ni_660x.c
+++ b/drivers/staging/comedi/drivers/ni_660x.c
@@ -1187,7 +1187,7 @@ static int ni_660x_auto_attach(struct comedi_device *dev,
 		global_interrupt_config_bits |= Cascade_Int_Enable_Bit;
 	ni_660x_write_register(dev, 0, global_interrupt_config_bits,
 			       NI660X_GLOBAL_INT_CFG);
-	dev_info(dev->class_dev, "ni_660x: %s attached\n", dev->board_name);
+
 	return 0;
 }
 

commit 01b6442b4639a0165880aefeec5342df37e02aa8
Author: H Hartley Sweeten <hsweeten@visionengravers.com>
Date:   Thu Dec 19 16:32:08 2013 -0700

    staging: comedi: ni_660x: tidy up set_tio_counterswap()
    
    Clean up the multi-line comment and tidy the function a bit.
    
    Signed-off-by: H Hartley Sweeten <hsweeten@visionengravers.com>
    Reviewed-by: Ian Abbott <abbotti@mev.co.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/drivers/ni_660x.c b/drivers/staging/comedi/drivers/ni_660x.c
index 40402c14ba93..df42e3906171 100644
--- a/drivers/staging/comedi/drivers/ni_660x.c
+++ b/drivers/staging/comedi/drivers/ni_660x.c
@@ -767,17 +767,20 @@ static int ni_660x_cancel(struct comedi_device *dev, struct comedi_subdevice *s)
 	return retval;
 }
 
-static void set_tio_counterswap(struct comedi_device *dev, int chipset)
+static void set_tio_counterswap(struct comedi_device *dev, int chip)
 {
-	/* See P. 3.5 of the Register-Level Programming manual.  The
-	   CounterSwap bit has to be set on the second chip, otherwise
-	   it will try to use the same pins as the first chip.
+	unsigned bits = 0;
+
+	/*
+	 * See P. 3.5 of the Register-Level Programming manual.
+	 * The CounterSwap bit has to be set on the second chip,
+	 * otherwise it will try to use the same pins as the
+	 * first chip.
 	 */
-	if (chipset)
-		ni_660x_write_register(dev, chipset, CounterSwap,
-				       NI660X_CLK_CFG);
-	else
-		ni_660x_write_register(dev, chipset, 0, NI660X_CLK_CFG);
+	if (chip)
+		bits = CounterSwap;
+
+	ni_660x_write_register(dev, chip, bits, NI660X_CLK_CFG);
 }
 
 static void ni_660x_handle_gpct_interrupt(struct comedi_device *dev,

commit d783a20e8f2ada1b0b443ddf09e7e700d20b18dc
Author: H Hartley Sweeten <hsweeten@visionengravers.com>
Date:   Thu Dec 19 16:32:07 2013 -0700

    staging: comedi: ni_660x: remove dma_selection_counter()
    
    The counter->chip_index will always be < counters_per_chip due to the
    initialization of the subdevices during the attach of the board.
    
    The dma_selection_counter() helper just does a BUG_ON() check before
    returning the original value. Just use the original value directly
    in the caller and remove the helper function.
    
    Signed-off-by: H Hartley Sweeten <hsweeten@visionengravers.com>
    Reviewed-by: Ian Abbott <abbotti@mev.co.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/drivers/ni_660x.c b/drivers/staging/comedi/drivers/ni_660x.c
index 9437e9440d04..40402c14ba93 100644
--- a/drivers/staging/comedi/drivers/ni_660x.c
+++ b/drivers/staging/comedi/drivers/ni_660x.c
@@ -347,11 +347,6 @@ static inline unsigned dma_select_mask(unsigned dma_channel)
 enum dma_selection {
 	dma_selection_none = 0x1f,
 };
-static inline unsigned dma_selection_counter(unsigned counter_index)
-{
-	BUG_ON(counter_index >= counters_per_chip);
-	return counter_index;
-}
 
 static inline unsigned dma_select_bits(unsigned dma_channel, unsigned selection)
 {
@@ -674,10 +669,9 @@ static inline void ni_660x_set_dma_channel(struct comedi_device *dev,
 
 	spin_lock_irqsave(&devpriv->soft_reg_copy_lock, flags);
 	devpriv->dma_configuration_soft_copies[chip] &=
-	    ~dma_select_mask(mite_channel);
+		~dma_select_mask(mite_channel);
 	devpriv->dma_configuration_soft_copies[chip] |=
-	    dma_select_bits(mite_channel,
-			    dma_selection_counter(counter->counter_index));
+		dma_select_bits(mite_channel, counter->counter_index);
 	ni_660x_write_register(dev, chip,
 			       devpriv->dma_configuration_soft_copies[chip] |
 			       dma_reset_bit(mite_channel), NI660X_DMA_CFG);

commit 0c26c7ed7621b103419f1f23b52ff78af5ca44a3
Author: H Hartley Sweeten <hsweeten@visionengravers.com>
Date:   Thu Dec 19 16:32:06 2013 -0700

    staging: comedi: ni_660x: use a local var for the 'chip_index'
    
    Use a local variable for the 'counter->chip_index' to help shorten the
    long lines and clarify the code.
    
    Signed-off-by: H Hartley Sweeten <hsweeten@visionengravers.com>
    Reviewed-by: Ian Abbott <abbotti@mev.co.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/drivers/ni_660x.c b/drivers/staging/comedi/drivers/ni_660x.c
index 11cde507b927..9437e9440d04 100644
--- a/drivers/staging/comedi/drivers/ni_660x.c
+++ b/drivers/staging/comedi/drivers/ni_660x.c
@@ -590,12 +590,12 @@ static enum ni_660x_register ni_gpct_to_660x_register(enum ni_gpct_register reg)
 }
 
 static inline void ni_660x_write_register(struct comedi_device *dev,
-					  unsigned chip_index, unsigned bits,
+					  unsigned chip, unsigned bits,
 					  enum ni_660x_register reg)
 {
 	struct ni_660x_private *devpriv = dev->private;
 	void __iomem *write_address =
-	    devpriv->mite->daq_io_addr + GPCT_OFFSET[chip_index] +
+	    devpriv->mite->daq_io_addr + GPCT_OFFSET[chip] +
 	    registerData[reg].offset;
 
 	switch (registerData[reg].size) {
@@ -612,12 +612,12 @@ static inline void ni_660x_write_register(struct comedi_device *dev,
 }
 
 static inline unsigned ni_660x_read_register(struct comedi_device *dev,
-					     unsigned chip_index,
+					     unsigned chip,
 					     enum ni_660x_register reg)
 {
 	struct ni_660x_private *devpriv = dev->private;
 	void __iomem *read_address =
-	    devpriv->mite->daq_io_addr + GPCT_OFFSET[chip_index] +
+	    devpriv->mite->daq_io_addr + GPCT_OFFSET[chip] +
 	    registerData[reg].offset;
 
 	switch (registerData[reg].size) {
@@ -639,8 +639,9 @@ static void ni_gpct_write_register(struct ni_gpct *counter, unsigned bits,
 {
 	struct comedi_device *dev = counter->counter_dev->dev;
 	enum ni_660x_register ni_660x_register = ni_gpct_to_660x_register(reg);
-	ni_660x_write_register(dev, counter->chip_index, bits,
-			       ni_660x_register);
+	unsigned chip = counter->chip_index;
+
+	ni_660x_write_register(dev, chip, bits, ni_660x_register);
 }
 
 static unsigned ni_gpct_read_register(struct ni_gpct *counter,
@@ -648,8 +649,9 @@ static unsigned ni_gpct_read_register(struct ni_gpct *counter,
 {
 	struct comedi_device *dev = counter->counter_dev->dev;
 	enum ni_660x_register ni_660x_register = ni_gpct_to_660x_register(reg);
-	return ni_660x_read_register(dev, counter->chip_index,
-				     ni_660x_register);
+	unsigned chip = counter->chip_index;
+
+	return ni_660x_read_register(dev, chip, ni_660x_register);
 }
 
 static inline struct mite_dma_descriptor_ring *mite_ring(struct ni_660x_private
@@ -657,7 +659,9 @@ static inline struct mite_dma_descriptor_ring *mite_ring(struct ni_660x_private
 							 struct ni_gpct
 							 *counter)
 {
-	return priv->mite_rings[counter->chip_index][counter->counter_index];
+	unsigned chip = counter->chip_index;
+
+	return priv->mite_rings[chip][counter->counter_index];
 }
 
 static inline void ni_660x_set_dma_channel(struct comedi_device *dev,
@@ -665,17 +669,17 @@ static inline void ni_660x_set_dma_channel(struct comedi_device *dev,
 					   struct ni_gpct *counter)
 {
 	struct ni_660x_private *devpriv = dev->private;
+	unsigned chip = counter->chip_index;
 	unsigned long flags;
 
 	spin_lock_irqsave(&devpriv->soft_reg_copy_lock, flags);
-	devpriv->dma_configuration_soft_copies[counter->chip_index] &=
+	devpriv->dma_configuration_soft_copies[chip] &=
 	    ~dma_select_mask(mite_channel);
-	devpriv->dma_configuration_soft_copies[counter->chip_index] |=
+	devpriv->dma_configuration_soft_copies[chip] |=
 	    dma_select_bits(mite_channel,
 			    dma_selection_counter(counter->counter_index));
-	ni_660x_write_register(dev, counter->chip_index,
-			       devpriv->dma_configuration_soft_copies
-			       [counter->chip_index] |
+	ni_660x_write_register(dev, chip,
+			       devpriv->dma_configuration_soft_copies[chip] |
 			       dma_reset_bit(mite_channel), NI660X_DMA_CFG);
 	mmiowb();
 	spin_unlock_irqrestore(&devpriv->soft_reg_copy_lock, flags);
@@ -686,16 +690,17 @@ static inline void ni_660x_unset_dma_channel(struct comedi_device *dev,
 					     struct ni_gpct *counter)
 {
 	struct ni_660x_private *devpriv = dev->private;
+	unsigned chip = counter->chip_index;
 	unsigned long flags;
 
 	spin_lock_irqsave(&devpriv->soft_reg_copy_lock, flags);
-	devpriv->dma_configuration_soft_copies[counter->chip_index] &=
+	devpriv->dma_configuration_soft_copies[chip] &=
 	    ~dma_select_mask(mite_channel);
-	devpriv->dma_configuration_soft_copies[counter->chip_index] |=
+	devpriv->dma_configuration_soft_copies[chip] |=
 	    dma_select_bits(mite_channel, dma_selection_none);
-	ni_660x_write_register(dev, counter->chip_index,
-			       devpriv->dma_configuration_soft_copies
-			       [counter->chip_index], NI660X_DMA_CFG);
+	ni_660x_write_register(dev, chip,
+			       devpriv->dma_configuration_soft_copies[chip],
+			       NI660X_DMA_CFG);
 	mmiowb();
 	spin_unlock_irqrestore(&devpriv->soft_reg_copy_lock, flags);
 }

commit 1246f05baa1d0c573802b79092666c38c3671fbd
Author: H Hartley Sweeten <hsweeten@visionengravers.com>
Date:   Thu Dec 19 16:32:05 2013 -0700

    staging: comedi: ni_660x: rename the CamelCase enum NI_660x_Register and labels
    
    As prefered by the CodingStyle, rename this CamelCase enum and its labels.
    
    Also, cleanup the ni_gpct_to_660x_register() helper function. Just return the
    ni_660x_register for each ni_gpct_register and remove the unnecessary break
    statements after the return statements.
    
    Signed-off-by: H Hartley Sweeten <hsweeten@visionengravers.com>
    Reviewed-by: Ian Abbott <abbotti@mev.co.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/drivers/ni_660x.c b/drivers/staging/comedi/drivers/ni_660x.c
index 3de2467c90ad..11cde507b927 100644
--- a/drivers/staging/comedi/drivers/ni_660x.c
+++ b/drivers/staging/comedi/drivers/ni_660x.c
@@ -55,112 +55,112 @@ for 4 */
 #define MAX_DMA_CHANNEL 4
 
 /* See Register-Level Programmer Manual page 3.1 */
-enum NI_660x_Register {
-	G0InterruptAcknowledge,
-	G0StatusRegister,
-	G1InterruptAcknowledge,
-	G1StatusRegister,
-	G01StatusRegister,
-	G0CommandRegister,
-	STCDIOParallelInput,
-	G1CommandRegister,
-	G0HWSaveRegister,
-	G1HWSaveRegister,
-	STCDIOOutput,
-	STCDIOControl,
-	G0SWSaveRegister,
-	G1SWSaveRegister,
-	G0ModeRegister,
-	G01JointStatus1Register,
-	G1ModeRegister,
-	STCDIOSerialInput,
-	G0LoadARegister,
-	G01JointStatus2Register,
-	G0LoadBRegister,
-	G1LoadARegister,
-	G1LoadBRegister,
-	G0InputSelectRegister,
-	G1InputSelectRegister,
-	G0AutoincrementRegister,
-	G1AutoincrementRegister,
-	G01JointResetRegister,
-	G0InterruptEnable,
-	G1InterruptEnable,
-	G0CountingModeRegister,
-	G1CountingModeRegister,
-	G0SecondGateRegister,
-	G1SecondGateRegister,
-	G0DMAConfigRegister,
-	G0DMAStatusRegister,
-	G1DMAConfigRegister,
-	G1DMAStatusRegister,
-	G2InterruptAcknowledge,
-	G2StatusRegister,
-	G3InterruptAcknowledge,
-	G3StatusRegister,
-	G23StatusRegister,
-	G2CommandRegister,
-	G3CommandRegister,
-	G2HWSaveRegister,
-	G3HWSaveRegister,
-	G2SWSaveRegister,
-	G3SWSaveRegister,
-	G2ModeRegister,
-	G23JointStatus1Register,
-	G3ModeRegister,
-	G2LoadARegister,
-	G23JointStatus2Register,
-	G2LoadBRegister,
-	G3LoadARegister,
-	G3LoadBRegister,
-	G2InputSelectRegister,
-	G3InputSelectRegister,
-	G2AutoincrementRegister,
-	G3AutoincrementRegister,
-	G23JointResetRegister,
-	G2InterruptEnable,
-	G3InterruptEnable,
-	G2CountingModeRegister,
-	G3CountingModeRegister,
-	G3SecondGateRegister,
-	G2SecondGateRegister,
-	G2DMAConfigRegister,
-	G2DMAStatusRegister,
-	G3DMAConfigRegister,
-	G3DMAStatusRegister,
-	DIO32Input,
-	DIO32Output,
-	ClockConfigRegister,
-	GlobalInterruptStatusRegister,
-	DMAConfigRegister,
-	GlobalInterruptConfigRegister,
-	IOConfigReg0_1,
-	IOConfigReg2_3,
-	IOConfigReg4_5,
-	IOConfigReg6_7,
-	IOConfigReg8_9,
-	IOConfigReg10_11,
-	IOConfigReg12_13,
-	IOConfigReg14_15,
-	IOConfigReg16_17,
-	IOConfigReg18_19,
-	IOConfigReg20_21,
-	IOConfigReg22_23,
-	IOConfigReg24_25,
-	IOConfigReg26_27,
-	IOConfigReg28_29,
-	IOConfigReg30_31,
-	IOConfigReg32_33,
-	IOConfigReg34_35,
-	IOConfigReg36_37,
-	IOConfigReg38_39,
-	NumRegisters,
+enum ni_660x_register {
+	NI660X_G0_INT_ACK,
+	NI660X_G0_STATUS,
+	NI660X_G1_INT_ACK,
+	NI660X_G1_STATUS,
+	NI660X_G01_STATUS,
+	NI660X_G0_CMD,
+	NI660X_STC_DIO_PARALLEL_INPUT,
+	NI660X_G1_CMD,
+	NI660X_G0_HW_SAVE,
+	NI660X_G1_HW_SAVE,
+	NI660X_STC_DIO_OUTPUT,
+	NI660X_STC_DIO_CONTROL,
+	NI660X_G0_SW_SAVE,
+	NI660X_G1_SW_SAVE,
+	NI660X_G0_MODE,
+	NI660X_G01_STATUS1,
+	NI660X_G1_MODE,
+	NI660X_STC_DIO_SERIAL_INPUT,
+	NI660X_G0_LOADA,
+	NI660X_G01_STATUS2,
+	NI660X_G0_LOADB,
+	NI660X_G1_LOADA,
+	NI660X_G1_LOADB,
+	NI660X_G0_INPUT_SEL,
+	NI660X_G1_INPUT_SEL,
+	NI660X_G0_AUTO_INC,
+	NI660X_G1_AUTO_INC,
+	NI660X_G01_RESET,
+	NI660X_G0_INT_ENA,
+	NI660X_G1_INT_ENA,
+	NI660X_G0_CNT_MODE,
+	NI660X_G1_CNT_MODE,
+	NI660X_G0_GATE2,
+	NI660X_G1_GATE2,
+	NI660X_G0_DMA_CFG,
+	NI660X_G0_DMA_STATUS,
+	NI660X_G1_DMA_CFG,
+	NI660X_G1_DMA_STATUS,
+	NI660X_G2_INT_ACK,
+	NI660X_G2_STATUS,
+	NI660X_G3_INT_ACK,
+	NI660X_G3_STATUS,
+	NI660X_G23_STATUS,
+	NI660X_G2_CMD,
+	NI660X_G3_CMD,
+	NI660X_G2_HW_SAVE,
+	NI660X_G3_HW_SAVE,
+	NI660X_G2_SW_SAVE,
+	NI660X_G3_SW_SAVE,
+	NI660X_G2_MODE,
+	NI660X_G23_STATUS1,
+	NI660X_G3_MODE,
+	NI660X_G2_LOADA,
+	NI660X_G23_STATUS2,
+	NI660X_G2_LOADB,
+	NI660X_G3_LOADA,
+	NI660X_G3_LOADB,
+	NI660X_G2_INPUT_SEL,
+	NI660X_G3_INPUT_SEL,
+	NI660X_G2_AUTO_INC,
+	NI660X_G3_AUTO_INC,
+	NI660X_G23_RESET,
+	NI660X_G2_INT_ENA,
+	NI660X_G3_INT_ENA,
+	NI660X_G2_CNT_MODE,
+	NI660X_G3_CNT_MODE,
+	NI660X_G3_GATE2,
+	NI660X_G2_GATE2,
+	NI660X_G2_DMA_CFG,
+	NI660X_G2_DMA_STATUS,
+	NI660X_G3_DMA_CFG,
+	NI660X_G3_DMA_STATUS,
+	NI660X_DIO32_INPUT,
+	NI660X_DIO32_OUTPUT,
+	NI660X_CLK_CFG,
+	NI660X_GLOBAL_INT_STATUS,
+	NI660X_DMA_CFG,
+	NI660X_GLOBAL_INT_CFG,
+	NI660X_IO_CFG_0_1,
+	NI660X_IO_CFG_2_3,
+	NI660X_IO_CFG_4_5,
+	NI660X_IO_CFG_6_7,
+	NI660X_IO_CFG_8_9,
+	NI660X_IO_CFG_10_11,
+	NI660X_IO_CFG_12_13,
+	NI660X_IO_CFG_14_15,
+	NI660X_IO_CFG_16_17,
+	NI660X_IO_CFG_18_19,
+	NI660X_IO_CFG_20_21,
+	NI660X_IO_CFG_22_23,
+	NI660X_IO_CFG_24_25,
+	NI660X_IO_CFG_26_27,
+	NI660X_IO_CFG_28_29,
+	NI660X_IO_CFG_30_31,
+	NI660X_IO_CFG_32_33,
+	NI660X_IO_CFG_34_35,
+	NI660X_IO_CFG_36_37,
+	NI660X_IO_CFG_38_39,
+	NI660X_NUM_REGS,
 };
 
 static inline unsigned IOConfigReg(unsigned pfi_channel)
 {
-	unsigned reg = IOConfigReg0_1 + pfi_channel / 2;
-	BUG_ON(reg > IOConfigReg38_39);
+	unsigned reg = NI660X_IO_CFG_0_1 + pfi_channel / 2;
+	BUG_ON(reg > NI660X_IO_CFG_38_39);
 	return reg;
 }
 
@@ -200,7 +200,7 @@ struct NI_660xRegisterData {
 	enum ni_660x_register_width size; /* 1 byte, 2 bytes, or 4 bytes */
 };
 
-static const struct NI_660xRegisterData registerData[NumRegisters] = {
+static const struct NI_660xRegisterData registerData[NI660X_NUM_REGS] = {
 	{"G0 Interrupt Acknowledge", 0x004, NI_660x_WRITE, DATA_2B},
 	{"G0 Status Register", 0x004, NI_660x_READ, DATA_2B},
 	{"G1 Interrupt Acknowledge", 0x006, NI_660x_WRITE, DATA_2B},
@@ -444,225 +444,154 @@ static inline unsigned ni_660x_num_counters(struct comedi_device *dev)
 	return board->n_chips * counters_per_chip;
 }
 
-static enum NI_660x_Register ni_gpct_to_660x_register(enum ni_gpct_register reg)
+static enum ni_660x_register ni_gpct_to_660x_register(enum ni_gpct_register reg)
 {
-	enum NI_660x_Register ni_660x_register;
 	switch (reg) {
 	case NITIO_G0_AUTO_INC:
-		ni_660x_register = G0AutoincrementRegister;
-		break;
+		return NI660X_G0_AUTO_INC;
 	case NITIO_G1_AUTO_INC:
-		ni_660x_register = G1AutoincrementRegister;
-		break;
+		return NI660X_G1_AUTO_INC;
 	case NITIO_G2_AUTO_INC:
-		ni_660x_register = G2AutoincrementRegister;
-		break;
+		return NI660X_G2_AUTO_INC;
 	case NITIO_G3_AUTO_INC:
-		ni_660x_register = G3AutoincrementRegister;
-		break;
+		return NI660X_G3_AUTO_INC;
 	case NITIO_G0_CMD:
-		ni_660x_register = G0CommandRegister;
-		break;
+		return NI660X_G0_CMD;
 	case NITIO_G1_CMD:
-		ni_660x_register = G1CommandRegister;
-		break;
+		return NI660X_G1_CMD;
 	case NITIO_G2_CMD:
-		ni_660x_register = G2CommandRegister;
-		break;
+		return NI660X_G2_CMD;
 	case NITIO_G3_CMD:
-		ni_660x_register = G3CommandRegister;
-		break;
+		return NI660X_G3_CMD;
 	case NITIO_G0_HW_SAVE:
-		ni_660x_register = G0HWSaveRegister;
-		break;
+		return NI660X_G0_HW_SAVE;
 	case NITIO_G1_HW_SAVE:
-		ni_660x_register = G1HWSaveRegister;
-		break;
+		return NI660X_G1_HW_SAVE;
 	case NITIO_G2_HW_SAVE:
-		ni_660x_register = G2HWSaveRegister;
-		break;
+		return NI660X_G2_HW_SAVE;
 	case NITIO_G3_HW_SAVE:
-		ni_660x_register = G3HWSaveRegister;
-		break;
+		return NI660X_G3_HW_SAVE;
 	case NITIO_G0_SW_SAVE:
-		ni_660x_register = G0SWSaveRegister;
-		break;
+		return NI660X_G0_SW_SAVE;
 	case NITIO_G1_SW_SAVE:
-		ni_660x_register = G1SWSaveRegister;
-		break;
+		return NI660X_G1_SW_SAVE;
 	case NITIO_G2_SW_SAVE:
-		ni_660x_register = G2SWSaveRegister;
-		break;
+		return NI660X_G2_SW_SAVE;
 	case NITIO_G3_SW_SAVE:
-		ni_660x_register = G3SWSaveRegister;
-		break;
+		return NI660X_G3_SW_SAVE;
 	case NITIO_G0_MODE:
-		ni_660x_register = G0ModeRegister;
-		break;
+		return NI660X_G0_MODE;
 	case NITIO_G1_MODE:
-		ni_660x_register = G1ModeRegister;
-		break;
+		return NI660X_G1_MODE;
 	case NITIO_G2_MODE:
-		ni_660x_register = G2ModeRegister;
-		break;
+		return NI660X_G2_MODE;
 	case NITIO_G3_MODE:
-		ni_660x_register = G3ModeRegister;
-		break;
+		return NI660X_G3_MODE;
 	case NITIO_G0_LOADA:
-		ni_660x_register = G0LoadARegister;
-		break;
+		return NI660X_G0_LOADA;
 	case NITIO_G1_LOADA:
-		ni_660x_register = G1LoadARegister;
-		break;
+		return NI660X_G1_LOADA;
 	case NITIO_G2_LOADA:
-		ni_660x_register = G2LoadARegister;
-		break;
+		return NI660X_G2_LOADA;
 	case NITIO_G3_LOADA:
-		ni_660x_register = G3LoadARegister;
-		break;
+		return NI660X_G3_LOADA;
 	case NITIO_G0_LOADB:
-		ni_660x_register = G0LoadBRegister;
-		break;
+		return NI660X_G0_LOADB;
 	case NITIO_G1_LOADB:
-		ni_660x_register = G1LoadBRegister;
-		break;
+		return NI660X_G1_LOADB;
 	case NITIO_G2_LOADB:
-		ni_660x_register = G2LoadBRegister;
-		break;
+		return NI660X_G2_LOADB;
 	case NITIO_G3_LOADB:
-		ni_660x_register = G3LoadBRegister;
-		break;
+		return NI660X_G3_LOADB;
 	case NITIO_G0_INPUT_SEL:
-		ni_660x_register = G0InputSelectRegister;
-		break;
+		return NI660X_G0_INPUT_SEL;
 	case NITIO_G1_INPUT_SEL:
-		ni_660x_register = G1InputSelectRegister;
-		break;
+		return NI660X_G1_INPUT_SEL;
 	case NITIO_G2_INPUT_SEL:
-		ni_660x_register = G2InputSelectRegister;
-		break;
+		return NI660X_G2_INPUT_SEL;
 	case NITIO_G3_INPUT_SEL:
-		ni_660x_register = G3InputSelectRegister;
-		break;
+		return NI660X_G3_INPUT_SEL;
 	case NITIO_G01_STATUS:
-		ni_660x_register = G01StatusRegister;
-		break;
+		return NI660X_G01_STATUS;
 	case NITIO_G23_STATUS:
-		ni_660x_register = G23StatusRegister;
-		break;
+		return NI660X_G23_STATUS;
 	case NITIO_G01_RESET:
-		ni_660x_register = G01JointResetRegister;
-		break;
+		return NI660X_G01_RESET;
 	case NITIO_G23_RESET:
-		ni_660x_register = G23JointResetRegister;
-		break;
+		return NI660X_G23_RESET;
 	case NITIO_G01_STATUS1:
-		ni_660x_register = G01JointStatus1Register;
-		break;
+		return NI660X_G01_STATUS1;
 	case NITIO_G23_STATUS1:
-		ni_660x_register = G23JointStatus1Register;
-		break;
+		return NI660X_G23_STATUS1;
 	case NITIO_G01_STATUS2:
-		ni_660x_register = G01JointStatus2Register;
-		break;
+		return NI660X_G01_STATUS2;
 	case NITIO_G23_STATUS2:
-		ni_660x_register = G23JointStatus2Register;
-		break;
+		return NI660X_G23_STATUS2;
 	case NITIO_G0_CNT_MODE:
-		ni_660x_register = G0CountingModeRegister;
-		break;
+		return NI660X_G0_CNT_MODE;
 	case NITIO_G1_CNT_MODE:
-		ni_660x_register = G1CountingModeRegister;
-		break;
+		return NI660X_G1_CNT_MODE;
 	case NITIO_G2_CNT_MODE:
-		ni_660x_register = G2CountingModeRegister;
-		break;
+		return NI660X_G2_CNT_MODE;
 	case NITIO_G3_CNT_MODE:
-		ni_660x_register = G3CountingModeRegister;
-		break;
+		return NI660X_G3_CNT_MODE;
 	case NITIO_G0_GATE2:
-		ni_660x_register = G0SecondGateRegister;
-		break;
+		return NI660X_G0_GATE2;
 	case NITIO_G1_GATE2:
-		ni_660x_register = G1SecondGateRegister;
-		break;
+		return NI660X_G1_GATE2;
 	case NITIO_G2_GATE2:
-		ni_660x_register = G2SecondGateRegister;
-		break;
+		return NI660X_G2_GATE2;
 	case NITIO_G3_GATE2:
-		ni_660x_register = G3SecondGateRegister;
-		break;
+		return NI660X_G3_GATE2;
 	case NITIO_G0_DMA_CFG:
-		ni_660x_register = G0DMAConfigRegister;
-		break;
+		return NI660X_G0_DMA_CFG;
 	case NITIO_G0_DMA_STATUS:
-		ni_660x_register = G0DMAStatusRegister;
-		break;
+		return NI660X_G0_DMA_STATUS;
 	case NITIO_G1_DMA_CFG:
-		ni_660x_register = G1DMAConfigRegister;
-		break;
+		return NI660X_G1_DMA_CFG;
 	case NITIO_G1_DMA_STATUS:
-		ni_660x_register = G1DMAStatusRegister;
-		break;
+		return NI660X_G1_DMA_STATUS;
 	case NITIO_G2_DMA_CFG:
-		ni_660x_register = G2DMAConfigRegister;
-		break;
+		return NI660X_G2_DMA_CFG;
 	case NITIO_G2_DMA_STATUS:
-		ni_660x_register = G2DMAStatusRegister;
-		break;
+		return NI660X_G2_DMA_STATUS;
 	case NITIO_G3_DMA_CFG:
-		ni_660x_register = G3DMAConfigRegister;
-		break;
+		return NI660X_G3_DMA_CFG;
 	case NITIO_G3_DMA_STATUS:
-		ni_660x_register = G3DMAStatusRegister;
-		break;
+		return NI660X_G3_DMA_STATUS;
 	case NITIO_G0_INT_ACK:
-		ni_660x_register = G0InterruptAcknowledge;
-		break;
+		return NI660X_G0_INT_ACK;
 	case NITIO_G1_INT_ACK:
-		ni_660x_register = G1InterruptAcknowledge;
-		break;
+		return NI660X_G1_INT_ACK;
 	case NITIO_G2_INT_ACK:
-		ni_660x_register = G2InterruptAcknowledge;
-		break;
+		return NI660X_G2_INT_ACK;
 	case NITIO_G3_INT_ACK:
-		ni_660x_register = G3InterruptAcknowledge;
-		break;
+		return NI660X_G3_INT_ACK;
 	case NITIO_G0_STATUS:
-		ni_660x_register = G0StatusRegister;
-		break;
+		return NI660X_G0_STATUS;
 	case NITIO_G1_STATUS:
-		ni_660x_register = G1StatusRegister;
-		break;
+		return NI660X_G1_STATUS;
 	case NITIO_G2_STATUS:
-		ni_660x_register = G2StatusRegister;
-		break;
+		return NI660X_G2_STATUS;
 	case NITIO_G3_STATUS:
-		ni_660x_register = G3StatusRegister;
-		break;
+		return NI660X_G3_STATUS;
 	case NITIO_G0_INT_ENA:
-		ni_660x_register = G0InterruptEnable;
-		break;
+		return NI660X_G0_INT_ENA;
 	case NITIO_G1_INT_ENA:
-		ni_660x_register = G1InterruptEnable;
-		break;
+		return NI660X_G1_INT_ENA;
 	case NITIO_G2_INT_ENA:
-		ni_660x_register = G2InterruptEnable;
-		break;
+		return NI660X_G2_INT_ENA;
 	case NITIO_G3_INT_ENA:
-		ni_660x_register = G3InterruptEnable;
-		break;
+		return NI660X_G3_INT_ENA;
 	default:
 		BUG();
 		return 0;
-		break;
 	}
-	return ni_660x_register;
 }
 
 static inline void ni_660x_write_register(struct comedi_device *dev,
 					  unsigned chip_index, unsigned bits,
-					  enum NI_660x_Register reg)
+					  enum ni_660x_register reg)
 {
 	struct ni_660x_private *devpriv = dev->private;
 	void __iomem *write_address =
@@ -684,7 +613,7 @@ static inline void ni_660x_write_register(struct comedi_device *dev,
 
 static inline unsigned ni_660x_read_register(struct comedi_device *dev,
 					     unsigned chip_index,
-					     enum NI_660x_Register reg)
+					     enum ni_660x_register reg)
 {
 	struct ni_660x_private *devpriv = dev->private;
 	void __iomem *read_address =
@@ -709,7 +638,7 @@ static void ni_gpct_write_register(struct ni_gpct *counter, unsigned bits,
 				   enum ni_gpct_register reg)
 {
 	struct comedi_device *dev = counter->counter_dev->dev;
-	enum NI_660x_Register ni_660x_register = ni_gpct_to_660x_register(reg);
+	enum ni_660x_register ni_660x_register = ni_gpct_to_660x_register(reg);
 	ni_660x_write_register(dev, counter->chip_index, bits,
 			       ni_660x_register);
 }
@@ -718,7 +647,7 @@ static unsigned ni_gpct_read_register(struct ni_gpct *counter,
 				      enum ni_gpct_register reg)
 {
 	struct comedi_device *dev = counter->counter_dev->dev;
-	enum NI_660x_Register ni_660x_register = ni_gpct_to_660x_register(reg);
+	enum ni_660x_register ni_660x_register = ni_gpct_to_660x_register(reg);
 	return ni_660x_read_register(dev, counter->chip_index,
 				     ni_660x_register);
 }
@@ -747,7 +676,7 @@ static inline void ni_660x_set_dma_channel(struct comedi_device *dev,
 	ni_660x_write_register(dev, counter->chip_index,
 			       devpriv->dma_configuration_soft_copies
 			       [counter->chip_index] |
-			       dma_reset_bit(mite_channel), DMAConfigRegister);
+			       dma_reset_bit(mite_channel), NI660X_DMA_CFG);
 	mmiowb();
 	spin_unlock_irqrestore(&devpriv->soft_reg_copy_lock, flags);
 }
@@ -766,7 +695,7 @@ static inline void ni_660x_unset_dma_channel(struct comedi_device *dev,
 	    dma_select_bits(mite_channel, dma_selection_none);
 	ni_660x_write_register(dev, counter->chip_index,
 			       devpriv->dma_configuration_soft_copies
-			       [counter->chip_index], DMAConfigRegister);
+			       [counter->chip_index], NI660X_DMA_CFG);
 	mmiowb();
 	spin_unlock_irqrestore(&devpriv->soft_reg_copy_lock, flags);
 }
@@ -847,9 +776,9 @@ static void set_tio_counterswap(struct comedi_device *dev, int chipset)
 	 */
 	if (chipset)
 		ni_660x_write_register(dev, chipset, CounterSwap,
-				       ClockConfigRegister);
+				       NI660X_CLK_CFG);
 	else
-		ni_660x_write_register(dev, chipset, 0, ClockConfigRegister);
+		ni_660x_write_register(dev, chipset, 0, NI660X_CLK_CFG);
 }
 
 static void ni_660x_handle_gpct_interrupt(struct comedi_device *dev,
@@ -979,7 +908,7 @@ static void init_tio_chip(struct comedi_device *dev, int chipset)
 	}
 	ni_660x_write_register(dev, chipset,
 			       devpriv->dma_configuration_soft_copies[chipset],
-			       DMAConfigRegister);
+			       NI660X_DMA_CFG);
 	for (i = 0; i < NUM_PFI_CHANNELS; ++i)
 		ni_660x_write_register(dev, chipset, 0, IOConfigReg(i));
 }
@@ -995,13 +924,13 @@ static int ni_660x_dio_insn_bits(struct comedi_device *dev,
 		s->state &= ~(data[0] << base_bitfield_channel);
 		s->state |= (data[0] & data[1]) << base_bitfield_channel;
 		/* Write out the new digital output lines */
-		ni_660x_write_register(dev, 0, s->state, DIO32Output);
+		ni_660x_write_register(dev, 0, s->state, NI660X_DIO32_OUTPUT);
 	}
 	/* on return, data[1] contains the value of the digital
 	 * input and output lines. */
-	data[1] =
-	    (ni_660x_read_register(dev, 0,
-				   DIO32Input) >> base_bitfield_channel);
+	data[1] = (ni_660x_read_register(dev, 0, NI660X_DIO32_INPUT) >>
+			base_bitfield_channel);
+
 	return insn->n;
 }
 
@@ -1186,7 +1115,7 @@ static int ni_660x_auto_attach(struct comedi_device *dev,
 	s->insn_config = ni_660x_dio_insn_config;
 	/*  we use the ioconfig registers to control dio direction, so zero
 	output enables in stc dio control reg */
-	ni_660x_write_register(dev, 0, 0, STCDIOControl);
+	ni_660x_write_register(dev, 0, 0, NI660X_STC_DIO_CONTROL);
 
 	devpriv->counter_dev = ni_gpct_device_construct(dev,
 						     &ni_gpct_write_register,
@@ -1255,7 +1184,7 @@ static int ni_660x_auto_attach(struct comedi_device *dev,
 	if (board->n_chips > 1)
 		global_interrupt_config_bits |= Cascade_Int_Enable_Bit;
 	ni_660x_write_register(dev, 0, global_interrupt_config_bits,
-			       GlobalInterruptConfigRegister);
+			       NI660X_GLOBAL_INT_CFG);
 	dev_info(dev->class_dev, "ni_660x: %s attached\n", dev->board_name);
 	return 0;
 }

commit 16cc181d630db4bd75b36979ffaef5d76017cd70
Author: H Hartley Sweeten <hsweeten@visionengravers.com>
Date:   Thu Dec 19 16:32:04 2013 -0700

    staging: comedi: ni_tiocmd: make ni_tio_cmd() a proper comedi (*do_cmd)
    
    Change the parameters to ni_tio_cmd() to make it a proper comedi
    (*do_cmd) function.
    
    The wrappers in the ni_660x and ni_mio_common modules are still needed
    to request the mite channel and setup the device before actually doing
    the command.
    
    Signed-off-by: H Hartley Sweeten <hsweeten@visionengravers.com>
    Reviewed-by: Ian Abbott <abbotti@mev.co.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/drivers/ni_660x.c b/drivers/staging/comedi/drivers/ni_660x.c
index 46b6904f750f..3de2467c90ad 100644
--- a/drivers/staging/comedi/drivers/ni_660x.c
+++ b/drivers/staging/comedi/drivers/ni_660x.c
@@ -825,9 +825,8 @@ static int ni_660x_cmd(struct comedi_device *dev, struct comedi_subdevice *s)
 		return retval;
 	}
 	ni_tio_acknowledge_and_confirm(counter, NULL, NULL, NULL, NULL);
-	retval = ni_tio_cmd(counter, s->async);
 
-	return retval;
+	return ni_tio_cmd(dev, s);
 }
 
 static int ni_660x_cancel(struct comedi_device *dev, struct comedi_subdevice *s)

commit c3f3b431dec0de741e35a93d506e439bef0bbb26
Author: H Hartley Sweeten <hsweeten@visionengravers.com>
Date:   Thu Dec 19 16:32:03 2013 -0700

    staging: comedi: ni_tiocmd: make ni_tio_cmdtest() a proper comedi (*do_cmdtest)
    
    Change the parameters to ni_tio_cmdtest() to make it a proper comedi
    (*do_cmdtest) function. This allows using it directly and removing the
    wrapper functions in the ni_660x and ni_mio_common modules.
    
    Signed-off-by: H Hartley Sweeten <hsweeten@visionengravers.com>
    Reviewed-by: Ian Abbott <abbotti@mev.co.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/drivers/ni_660x.c b/drivers/staging/comedi/drivers/ni_660x.c
index 0b328c39ef1c..46b6904f750f 100644
--- a/drivers/staging/comedi/drivers/ni_660x.c
+++ b/drivers/staging/comedi/drivers/ni_660x.c
@@ -830,14 +830,6 @@ static int ni_660x_cmd(struct comedi_device *dev, struct comedi_subdevice *s)
 	return retval;
 }
 
-static int ni_660x_cmdtest(struct comedi_device *dev,
-			   struct comedi_subdevice *s, struct comedi_cmd *cmd)
-{
-	struct ni_gpct *counter = s->private;
-
-	return ni_tio_cmdtest(counter, cmd);
-}
-
 static int ni_660x_cancel(struct comedi_device *dev, struct comedi_subdevice *s)
 {
 	struct ni_gpct *counter = s->private;
@@ -1219,7 +1211,7 @@ static int ni_660x_auto_attach(struct comedi_device *dev,
 			s->insn_config = ni_tio_insn_config;
 			s->do_cmd = &ni_660x_cmd;
 			s->len_chanlist = 1;
-			s->do_cmdtest = &ni_660x_cmdtest;
+			s->do_cmdtest = ni_tio_cmdtest;
 			s->cancel = &ni_660x_cancel;
 			s->poll = &ni_660x_input_poll;
 			s->async_dma_dir = DMA_BIDIRECTIONAL;

commit cac04c0f68a2d1c4ebf505f9b7626e194d40c0c0
Author: H Hartley Sweeten <hsweeten@visionengravers.com>
Date:   Thu Dec 19 16:32:02 2013 -0700

    staging: comedi: ni_tio: make ni_tio_insn_config() a proper comedi (*insn_config)
    
    Change the parameters to ni_tio_insn_config() to make it a proper comedi
    (*insn_config) function. This allows using it directly and removing the
    wrapper functions in the ni_660x and ni_mio_common modules.
    
    Signed-off-by: H Hartley Sweeten <hsweeten@visionengravers.com>
    Reviewed-by: Ian Abbott <abbotti@mev.co.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/drivers/ni_660x.c b/drivers/staging/comedi/drivers/ni_660x.c
index a62920fd96ac..0b328c39ef1c 100644
--- a/drivers/staging/comedi/drivers/ni_660x.c
+++ b/drivers/staging/comedi/drivers/ni_660x.c
@@ -993,15 +993,6 @@ static void init_tio_chip(struct comedi_device *dev, int chipset)
 		ni_660x_write_register(dev, chipset, 0, IOConfigReg(i));
 }
 
-static int
-ni_660x_GPCT_insn_config(struct comedi_device *dev, struct comedi_subdevice *s,
-			 struct comedi_insn *insn, unsigned int *data)
-{
-	struct ni_gpct *counter = s->private;
-
-	return ni_tio_insn_config(counter, insn, data);
-}
-
 static int ni_660x_dio_insn_bits(struct comedi_device *dev,
 				 struct comedi_subdevice *s,
 				 struct comedi_insn *insn, unsigned int *data)
@@ -1225,7 +1216,7 @@ static int ni_660x_auto_attach(struct comedi_device *dev,
 			s->maxdata = 0xffffffff;
 			s->insn_read = ni_tio_insn_read;
 			s->insn_write = ni_tio_insn_write;
-			s->insn_config = ni_660x_GPCT_insn_config;
+			s->insn_config = ni_tio_insn_config;
 			s->do_cmd = &ni_660x_cmd;
 			s->len_chanlist = 1;
 			s->do_cmdtest = &ni_660x_cmdtest;

commit 10f74377eec3318a63a3693e6e6d13af55c25624
Author: H Hartley Sweeten <hsweeten@visionengravers.com>
Date:   Thu Dec 19 16:32:01 2013 -0700

    staging: comedi: ni_tio: make ni_tio_winsn() a proper comedi (*insn_write)
    
    Change the parameters to ni_tio_winsn() to make it a proper comedi
    (*insn_write) function. This allows using it directly and removing the
    wrapper functions in the ni_660x and ni_mio_common modules.
    
    For aesthetics, rename the function.
    
    Signed-off-by: H Hartley Sweeten <hsweeten@visionengravers.com>
    Reviewed-by: Ian Abbott <abbotti@mev.co.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/drivers/ni_660x.c b/drivers/staging/comedi/drivers/ni_660x.c
index 303aa2f0b4bd..a62920fd96ac 100644
--- a/drivers/staging/comedi/drivers/ni_660x.c
+++ b/drivers/staging/comedi/drivers/ni_660x.c
@@ -1002,15 +1002,6 @@ ni_660x_GPCT_insn_config(struct comedi_device *dev, struct comedi_subdevice *s,
 	return ni_tio_insn_config(counter, insn, data);
 }
 
-static int ni_660x_GPCT_winsn(struct comedi_device *dev,
-			      struct comedi_subdevice *s,
-			      struct comedi_insn *insn, unsigned int *data)
-{
-	struct ni_gpct *counter = s->private;
-
-	return ni_tio_winsn(counter, insn, data);
-}
-
 static int ni_660x_dio_insn_bits(struct comedi_device *dev,
 				 struct comedi_subdevice *s,
 				 struct comedi_insn *insn, unsigned int *data)
@@ -1233,7 +1224,7 @@ static int ni_660x_auto_attach(struct comedi_device *dev,
 			s->n_chan = 3;
 			s->maxdata = 0xffffffff;
 			s->insn_read = ni_tio_insn_read;
-			s->insn_write = ni_660x_GPCT_winsn;
+			s->insn_write = ni_tio_insn_write;
 			s->insn_config = ni_660x_GPCT_insn_config;
 			s->do_cmd = &ni_660x_cmd;
 			s->len_chanlist = 1;

commit 9014d816e549d562a3566f8eed6e537500f2cfd1
Author: H Hartley Sweeten <hsweeten@visionengravers.com>
Date:   Thu Dec 19 16:32:00 2013 -0700

    staging: comedi: ni_tio: make ni_tio_rinsn() a proper comedi (*insn_read)
    
    Change the parameters to ni_tio_rinsn() to make is a proper comedi
    (*insn_read) function. This allows using it directly and removing the
    wrapper functions in the ni_660x and ni_mio_common modules.
    
    For aesthetics, rename the function.
    
    Signed-off-by: H Hartley Sweeten <hsweeten@visionengravers.com>
    Reviewed-by: Ian Abbott <abbotti@mev.co.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/drivers/ni_660x.c b/drivers/staging/comedi/drivers/ni_660x.c
index f7a95652497d..303aa2f0b4bd 100644
--- a/drivers/staging/comedi/drivers/ni_660x.c
+++ b/drivers/staging/comedi/drivers/ni_660x.c
@@ -975,15 +975,6 @@ static void ni_660x_free_mite_rings(struct comedi_device *dev)
 	}
 }
 
-static int
-ni_660x_GPCT_rinsn(struct comedi_device *dev, struct comedi_subdevice *s,
-		   struct comedi_insn *insn, unsigned int *data)
-{
-	struct ni_gpct *counter = s->private;
-
-	return ni_tio_rinsn(counter, insn, data);
-}
-
 static void init_tio_chip(struct comedi_device *dev, int chipset)
 {
 	struct ni_660x_private *devpriv = dev->private;
@@ -1241,7 +1232,7 @@ static int ni_660x_auto_attach(struct comedi_device *dev,
 			    SDF_CMD_READ /* | SDF_CMD_WRITE */ ;
 			s->n_chan = 3;
 			s->maxdata = 0xffffffff;
-			s->insn_read = ni_660x_GPCT_rinsn;
+			s->insn_read = ni_tio_insn_read;
 			s->insn_write = ni_660x_GPCT_winsn;
 			s->insn_config = ni_660x_GPCT_insn_config;
 			s->do_cmd = &ni_660x_cmd;

commit 00edbc31d8f6c84870041d5841663e72b449b170
Author: H Hartley Sweeten <hsweeten@visionengravers.com>
Date:   Thu Dec 19 16:31:59 2013 -0700

    staging: comedi: ni_tio.h: remove subdev_to_counter()
    
    This inline helper function simply returns the s->private void *.
    Remove the helper and just get the s->private void * directly where
    needed.
    
    Signed-off-by: H Hartley Sweeten <hsweeten@visionengravers.com>
    Reviewed-by: Ian Abbott <abbotti@mev.co.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/drivers/ni_660x.c b/drivers/staging/comedi/drivers/ni_660x.c
index 0a7790bea913..f7a95652497d 100644
--- a/drivers/staging/comedi/drivers/ni_660x.c
+++ b/drivers/staging/comedi/drivers/ni_660x.c
@@ -815,11 +815,9 @@ static void ni_660x_release_mite_channel(struct comedi_device *dev,
 
 static int ni_660x_cmd(struct comedi_device *dev, struct comedi_subdevice *s)
 {
+	struct ni_gpct *counter = s->private;
 	int retval;
 
-	struct ni_gpct *counter = subdev_to_counter(s);
-/* const struct comedi_cmd *cmd = &s->async->cmd; */
-
 	retval = ni_660x_request_mite_channel(dev, counter, COMEDI_INPUT);
 	if (retval) {
 		comedi_error(dev,
@@ -835,14 +833,14 @@ static int ni_660x_cmd(struct comedi_device *dev, struct comedi_subdevice *s)
 static int ni_660x_cmdtest(struct comedi_device *dev,
 			   struct comedi_subdevice *s, struct comedi_cmd *cmd)
 {
-	struct ni_gpct *counter = subdev_to_counter(s);
+	struct ni_gpct *counter = s->private;
 
 	return ni_tio_cmdtest(counter, cmd);
 }
 
 static int ni_660x_cancel(struct comedi_device *dev, struct comedi_subdevice *s)
 {
-	struct ni_gpct *counter = subdev_to_counter(s);
+	struct ni_gpct *counter = s->private;
 	int retval;
 
 	retval = ni_tio_cancel(counter);
@@ -866,7 +864,9 @@ static void set_tio_counterswap(struct comedi_device *dev, int chipset)
 static void ni_660x_handle_gpct_interrupt(struct comedi_device *dev,
 					  struct comedi_subdevice *s)
 {
-	ni_tio_handle_interrupt(subdev_to_counter(s), s);
+	struct ni_gpct *counter = s->private;
+
+	ni_tio_handle_interrupt(counter, s);
 	if (s->async->events) {
 		if (s->async->events & (COMEDI_CB_EOA | COMEDI_CB_ERROR |
 					COMEDI_CB_OVERFLOW)) {
@@ -901,11 +901,12 @@ static int ni_660x_input_poll(struct comedi_device *dev,
 			      struct comedi_subdevice *s)
 {
 	struct ni_660x_private *devpriv = dev->private;
+	struct ni_gpct *counter = s->private;
 	unsigned long flags;
 
 	/* lock to avoid race with comedi_poll */
 	spin_lock_irqsave(&devpriv->interrupt_lock, flags);
-	mite_sync_input_dma(subdev_to_counter(s)->mite_chan, s->async);
+	mite_sync_input_dma(counter->mite_chan, s->async);
 	spin_unlock_irqrestore(&devpriv->interrupt_lock, flags);
 	return comedi_buf_read_n_available(s->async);
 }
@@ -915,10 +916,10 @@ static int ni_660x_buf_change(struct comedi_device *dev,
 			      unsigned long new_size)
 {
 	struct ni_660x_private *devpriv = dev->private;
+	struct ni_gpct *counter = s->private;
 	int ret;
 
-	ret = mite_buf_change(mite_ring(devpriv, subdev_to_counter(s)),
-			      s->async);
+	ret = mite_buf_change(mite_ring(devpriv, counter), s->async);
 	if (ret < 0)
 		return ret;
 
@@ -978,7 +979,9 @@ static int
 ni_660x_GPCT_rinsn(struct comedi_device *dev, struct comedi_subdevice *s,
 		   struct comedi_insn *insn, unsigned int *data)
 {
-	return ni_tio_rinsn(subdev_to_counter(s), insn, data);
+	struct ni_gpct *counter = s->private;
+
+	return ni_tio_rinsn(counter, insn, data);
 }
 
 static void init_tio_chip(struct comedi_device *dev, int chipset)
@@ -1003,14 +1006,18 @@ static int
 ni_660x_GPCT_insn_config(struct comedi_device *dev, struct comedi_subdevice *s,
 			 struct comedi_insn *insn, unsigned int *data)
 {
-	return ni_tio_insn_config(subdev_to_counter(s), insn, data);
+	struct ni_gpct *counter = s->private;
+
+	return ni_tio_insn_config(counter, insn, data);
 }
 
 static int ni_660x_GPCT_winsn(struct comedi_device *dev,
 			      struct comedi_subdevice *s,
 			      struct comedi_insn *insn, unsigned int *data)
 {
-	return ni_tio_winsn(subdev_to_counter(s), insn, data);
+	struct ni_gpct *counter = s->private;
+
+	return ni_tio_winsn(counter, insn, data);
 }
 
 static int ni_660x_dio_insn_bits(struct comedi_device *dev,

commit 12375292ce8afebab91215539916ae6f511f3923
Author: H Hartley Sweeten <hsweeten@visionengravers.com>
Date:   Thu Dec 19 16:31:33 2013 -0700

    staging: comedi: ni_tio.h: rename the CamelCase enum ni_gpct_register labels
    
    As prefered by the CodingStyle, rename all the CamelCase labels of the
    enum ni_gpct_register.
    
    Cleanup all the helper functions in ni_tio_internal.h that used the enum.
    
    The 'counter_index' parameter to all the functions is the ni_gpct_device
    'counter_index' which is initialized when the subdevices are setup. This
    value is always < 4 so the default: BUG() cases can never happen. For
    aesthetics, rename the 'counter_idx' to simply 'idx' and fix the type in
    some of the helpers.
    
    Also, remove the unnecessary break statements after the return statements.
    
    Signed-off-by: H Hartley Sweeten <hsweeten@visionengravers.com>
    Reviewed-by: Ian Abbott <abbotti@mev.co.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/drivers/ni_660x.c b/drivers/staging/comedi/drivers/ni_660x.c
index 61c64a9e3c30..0a7790bea913 100644
--- a/drivers/staging/comedi/drivers/ni_660x.c
+++ b/drivers/staging/comedi/drivers/ni_660x.c
@@ -448,208 +448,208 @@ static enum NI_660x_Register ni_gpct_to_660x_register(enum ni_gpct_register reg)
 {
 	enum NI_660x_Register ni_660x_register;
 	switch (reg) {
-	case NITIO_G0_Autoincrement_Reg:
+	case NITIO_G0_AUTO_INC:
 		ni_660x_register = G0AutoincrementRegister;
 		break;
-	case NITIO_G1_Autoincrement_Reg:
+	case NITIO_G1_AUTO_INC:
 		ni_660x_register = G1AutoincrementRegister;
 		break;
-	case NITIO_G2_Autoincrement_Reg:
+	case NITIO_G2_AUTO_INC:
 		ni_660x_register = G2AutoincrementRegister;
 		break;
-	case NITIO_G3_Autoincrement_Reg:
+	case NITIO_G3_AUTO_INC:
 		ni_660x_register = G3AutoincrementRegister;
 		break;
-	case NITIO_G0_Command_Reg:
+	case NITIO_G0_CMD:
 		ni_660x_register = G0CommandRegister;
 		break;
-	case NITIO_G1_Command_Reg:
+	case NITIO_G1_CMD:
 		ni_660x_register = G1CommandRegister;
 		break;
-	case NITIO_G2_Command_Reg:
+	case NITIO_G2_CMD:
 		ni_660x_register = G2CommandRegister;
 		break;
-	case NITIO_G3_Command_Reg:
+	case NITIO_G3_CMD:
 		ni_660x_register = G3CommandRegister;
 		break;
-	case NITIO_G0_HW_Save_Reg:
+	case NITIO_G0_HW_SAVE:
 		ni_660x_register = G0HWSaveRegister;
 		break;
-	case NITIO_G1_HW_Save_Reg:
+	case NITIO_G1_HW_SAVE:
 		ni_660x_register = G1HWSaveRegister;
 		break;
-	case NITIO_G2_HW_Save_Reg:
+	case NITIO_G2_HW_SAVE:
 		ni_660x_register = G2HWSaveRegister;
 		break;
-	case NITIO_G3_HW_Save_Reg:
+	case NITIO_G3_HW_SAVE:
 		ni_660x_register = G3HWSaveRegister;
 		break;
-	case NITIO_G0_SW_Save_Reg:
+	case NITIO_G0_SW_SAVE:
 		ni_660x_register = G0SWSaveRegister;
 		break;
-	case NITIO_G1_SW_Save_Reg:
+	case NITIO_G1_SW_SAVE:
 		ni_660x_register = G1SWSaveRegister;
 		break;
-	case NITIO_G2_SW_Save_Reg:
+	case NITIO_G2_SW_SAVE:
 		ni_660x_register = G2SWSaveRegister;
 		break;
-	case NITIO_G3_SW_Save_Reg:
+	case NITIO_G3_SW_SAVE:
 		ni_660x_register = G3SWSaveRegister;
 		break;
-	case NITIO_G0_Mode_Reg:
+	case NITIO_G0_MODE:
 		ni_660x_register = G0ModeRegister;
 		break;
-	case NITIO_G1_Mode_Reg:
+	case NITIO_G1_MODE:
 		ni_660x_register = G1ModeRegister;
 		break;
-	case NITIO_G2_Mode_Reg:
+	case NITIO_G2_MODE:
 		ni_660x_register = G2ModeRegister;
 		break;
-	case NITIO_G3_Mode_Reg:
+	case NITIO_G3_MODE:
 		ni_660x_register = G3ModeRegister;
 		break;
-	case NITIO_G0_LoadA_Reg:
+	case NITIO_G0_LOADA:
 		ni_660x_register = G0LoadARegister;
 		break;
-	case NITIO_G1_LoadA_Reg:
+	case NITIO_G1_LOADA:
 		ni_660x_register = G1LoadARegister;
 		break;
-	case NITIO_G2_LoadA_Reg:
+	case NITIO_G2_LOADA:
 		ni_660x_register = G2LoadARegister;
 		break;
-	case NITIO_G3_LoadA_Reg:
+	case NITIO_G3_LOADA:
 		ni_660x_register = G3LoadARegister;
 		break;
-	case NITIO_G0_LoadB_Reg:
+	case NITIO_G0_LOADB:
 		ni_660x_register = G0LoadBRegister;
 		break;
-	case NITIO_G1_LoadB_Reg:
+	case NITIO_G1_LOADB:
 		ni_660x_register = G1LoadBRegister;
 		break;
-	case NITIO_G2_LoadB_Reg:
+	case NITIO_G2_LOADB:
 		ni_660x_register = G2LoadBRegister;
 		break;
-	case NITIO_G3_LoadB_Reg:
+	case NITIO_G3_LOADB:
 		ni_660x_register = G3LoadBRegister;
 		break;
-	case NITIO_G0_Input_Select_Reg:
+	case NITIO_G0_INPUT_SEL:
 		ni_660x_register = G0InputSelectRegister;
 		break;
-	case NITIO_G1_Input_Select_Reg:
+	case NITIO_G1_INPUT_SEL:
 		ni_660x_register = G1InputSelectRegister;
 		break;
-	case NITIO_G2_Input_Select_Reg:
+	case NITIO_G2_INPUT_SEL:
 		ni_660x_register = G2InputSelectRegister;
 		break;
-	case NITIO_G3_Input_Select_Reg:
+	case NITIO_G3_INPUT_SEL:
 		ni_660x_register = G3InputSelectRegister;
 		break;
-	case NITIO_G01_Status_Reg:
+	case NITIO_G01_STATUS:
 		ni_660x_register = G01StatusRegister;
 		break;
-	case NITIO_G23_Status_Reg:
+	case NITIO_G23_STATUS:
 		ni_660x_register = G23StatusRegister;
 		break;
-	case NITIO_G01_Joint_Reset_Reg:
+	case NITIO_G01_RESET:
 		ni_660x_register = G01JointResetRegister;
 		break;
-	case NITIO_G23_Joint_Reset_Reg:
+	case NITIO_G23_RESET:
 		ni_660x_register = G23JointResetRegister;
 		break;
-	case NITIO_G01_Joint_Status1_Reg:
+	case NITIO_G01_STATUS1:
 		ni_660x_register = G01JointStatus1Register;
 		break;
-	case NITIO_G23_Joint_Status1_Reg:
+	case NITIO_G23_STATUS1:
 		ni_660x_register = G23JointStatus1Register;
 		break;
-	case NITIO_G01_Joint_Status2_Reg:
+	case NITIO_G01_STATUS2:
 		ni_660x_register = G01JointStatus2Register;
 		break;
-	case NITIO_G23_Joint_Status2_Reg:
+	case NITIO_G23_STATUS2:
 		ni_660x_register = G23JointStatus2Register;
 		break;
-	case NITIO_G0_Counting_Mode_Reg:
+	case NITIO_G0_CNT_MODE:
 		ni_660x_register = G0CountingModeRegister;
 		break;
-	case NITIO_G1_Counting_Mode_Reg:
+	case NITIO_G1_CNT_MODE:
 		ni_660x_register = G1CountingModeRegister;
 		break;
-	case NITIO_G2_Counting_Mode_Reg:
+	case NITIO_G2_CNT_MODE:
 		ni_660x_register = G2CountingModeRegister;
 		break;
-	case NITIO_G3_Counting_Mode_Reg:
+	case NITIO_G3_CNT_MODE:
 		ni_660x_register = G3CountingModeRegister;
 		break;
-	case NITIO_G0_Second_Gate_Reg:
+	case NITIO_G0_GATE2:
 		ni_660x_register = G0SecondGateRegister;
 		break;
-	case NITIO_G1_Second_Gate_Reg:
+	case NITIO_G1_GATE2:
 		ni_660x_register = G1SecondGateRegister;
 		break;
-	case NITIO_G2_Second_Gate_Reg:
+	case NITIO_G2_GATE2:
 		ni_660x_register = G2SecondGateRegister;
 		break;
-	case NITIO_G3_Second_Gate_Reg:
+	case NITIO_G3_GATE2:
 		ni_660x_register = G3SecondGateRegister;
 		break;
-	case NITIO_G0_DMA_Config_Reg:
+	case NITIO_G0_DMA_CFG:
 		ni_660x_register = G0DMAConfigRegister;
 		break;
-	case NITIO_G0_DMA_Status_Reg:
+	case NITIO_G0_DMA_STATUS:
 		ni_660x_register = G0DMAStatusRegister;
 		break;
-	case NITIO_G1_DMA_Config_Reg:
+	case NITIO_G1_DMA_CFG:
 		ni_660x_register = G1DMAConfigRegister;
 		break;
-	case NITIO_G1_DMA_Status_Reg:
+	case NITIO_G1_DMA_STATUS:
 		ni_660x_register = G1DMAStatusRegister;
 		break;
-	case NITIO_G2_DMA_Config_Reg:
+	case NITIO_G2_DMA_CFG:
 		ni_660x_register = G2DMAConfigRegister;
 		break;
-	case NITIO_G2_DMA_Status_Reg:
+	case NITIO_G2_DMA_STATUS:
 		ni_660x_register = G2DMAStatusRegister;
 		break;
-	case NITIO_G3_DMA_Config_Reg:
+	case NITIO_G3_DMA_CFG:
 		ni_660x_register = G3DMAConfigRegister;
 		break;
-	case NITIO_G3_DMA_Status_Reg:
+	case NITIO_G3_DMA_STATUS:
 		ni_660x_register = G3DMAStatusRegister;
 		break;
-	case NITIO_G0_Interrupt_Acknowledge_Reg:
+	case NITIO_G0_INT_ACK:
 		ni_660x_register = G0InterruptAcknowledge;
 		break;
-	case NITIO_G1_Interrupt_Acknowledge_Reg:
+	case NITIO_G1_INT_ACK:
 		ni_660x_register = G1InterruptAcknowledge;
 		break;
-	case NITIO_G2_Interrupt_Acknowledge_Reg:
+	case NITIO_G2_INT_ACK:
 		ni_660x_register = G2InterruptAcknowledge;
 		break;
-	case NITIO_G3_Interrupt_Acknowledge_Reg:
+	case NITIO_G3_INT_ACK:
 		ni_660x_register = G3InterruptAcknowledge;
 		break;
-	case NITIO_G0_Status_Reg:
+	case NITIO_G0_STATUS:
 		ni_660x_register = G0StatusRegister;
 		break;
-	case NITIO_G1_Status_Reg:
+	case NITIO_G1_STATUS:
 		ni_660x_register = G1StatusRegister;
 		break;
-	case NITIO_G2_Status_Reg:
+	case NITIO_G2_STATUS:
 		ni_660x_register = G2StatusRegister;
 		break;
-	case NITIO_G3_Status_Reg:
+	case NITIO_G3_STATUS:
 		ni_660x_register = G3StatusRegister;
 		break;
-	case NITIO_G0_Interrupt_Enable_Reg:
+	case NITIO_G0_INT_ENA:
 		ni_660x_register = G0InterruptEnable;
 		break;
-	case NITIO_G1_Interrupt_Enable_Reg:
+	case NITIO_G1_INT_ENA:
 		ni_660x_register = G1InterruptEnable;
 		break;
-	case NITIO_G2_Interrupt_Enable_Reg:
+	case NITIO_G2_INT_ENA:
 		ni_660x_register = G2InterruptEnable;
 		break;
-	case NITIO_G3_Interrupt_Enable_Reg:
+	case NITIO_G3_INT_ENA:
 		ni_660x_register = G3InterruptEnable;
 		break;
 	default:

commit 41e043fcfa2236bb2c4a8335eb09f4c8cee224b3
Author: Jingoo Han <jg1.han@samsung.com>
Date:   Tue Dec 3 08:26:00 2013 +0900

    staging: remove DEFINE_PCI_DEVICE_TABLE macro
    
    Don't use DEFINE_PCI_DEVICE_TABLE macro, because this macro
    is not preferred.
    
    Signed-off-by: Jingoo Han <jg1.han@samsung.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/drivers/ni_660x.c b/drivers/staging/comedi/drivers/ni_660x.c
index 8a991dcab24a..61c64a9e3c30 100644
--- a/drivers/staging/comedi/drivers/ni_660x.c
+++ b/drivers/staging/comedi/drivers/ni_660x.c
@@ -1320,7 +1320,7 @@ static int ni_660x_pci_probe(struct pci_dev *dev,
 	return comedi_pci_auto_config(dev, &ni_660x_driver, id->driver_data);
 }
 
-static DEFINE_PCI_DEVICE_TABLE(ni_660x_pci_table) = {
+static const struct pci_device_id ni_660x_pci_table[] = {
 	{ PCI_VDEVICE(NI, 0x1310), BOARD_PCI6602 },
 	{ PCI_VDEVICE(NI, 0x1360), BOARD_PXI6602 },
 	{ PCI_VDEVICE(NI, 0x2c60), BOARD_PCI6601 },

commit 09567cb4373e962a3079bb06352e1e5452d9a340
Author: H Hartley Sweeten <hsweeten@visionengravers.com>
Date:   Fri Aug 30 10:47:03 2013 -0700

    staging: comedi: initialize subdevice s->io_bits in postconfig
    
    The subdevice 'io_bits' is a bit mask of the i/o configuration for
    digital subdevices. '0' values indicate that a channel is configured
    as an input and '1' values that the channel is an output. Since the
    subdevice data is kzalloc()'d, all channels default as inputs.
    
    Modify __comedi_device_postconfig() so that 'io_bits' is correctly
    initialized for Digital Output subdevices.
    
    Remove all the unnecessary initializations of 's->io_bits' from the
    drivers. Also, remove the unnecessary initialization of the 's->state'.
    
    Signed-off-by: H Hartley Sweeten <hsweeten@visionengravers.com>
    Reviewed-by: Ian Abbott <abbotti@mev.co.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/drivers/ni_660x.c b/drivers/staging/comedi/drivers/ni_660x.c
index 3607336dafe2..8a991dcab24a 100644
--- a/drivers/staging/comedi/drivers/ni_660x.c
+++ b/drivers/staging/comedi/drivers/ni_660x.c
@@ -1213,7 +1213,6 @@ static int ni_660x_auto_attach(struct comedi_device *dev,
 	s->range_table = &range_digital;
 	s->insn_bits = ni_660x_dio_insn_bits;
 	s->insn_config = ni_660x_dio_insn_config;
-	s->io_bits = 0;		/* all bits default to input */
 	/*  we use the ioconfig registers to control dio direction, so zero
 	output enables in stc dio control reg */
 	ni_660x_write_register(dev, 0, 0, STCDIOControl);

commit ce157f8032bbd46d9427034c335b0afd751da25d
Author: H Hartley Sweeten <hsweeten@visionengravers.com>
Date:   Mon Jun 24 17:04:43 2013 -0700

    staging: comedi: don't rely on comedidev.h to include headers
    
    comedidev.h is the main kernel header for comedi. Every comedi
    driver includes this header which then includes a number of
    <linux/*> headers. All the drivers need <linux/module.h> and some
    of them need <linux/delay.h>. The rest are not needed by any of
    the drivers.
    
    Remove all the includes in comedidev.h except for <linux/dma-mapping.h>,
    which is needed to pick up the enum dma_data_direction for the
    comedi_subdevice definition, and "comedi.h", which is the uapi
    header for comedi.
    
    Add <linux/module.h> to all the comedi drivers and <linux/delay.h>
    to the couple that need it.
    
    Signed-off-by: H Hartley Sweeten <hsweeten@visionengravers.com>
    Cc: Ian Abbott <abbotti@mev.co.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/drivers/ni_660x.c b/drivers/staging/comedi/drivers/ni_660x.c
index d90d4a09ba4c..3607336dafe2 100644
--- a/drivers/staging/comedi/drivers/ni_660x.c
+++ b/drivers/staging/comedi/drivers/ni_660x.c
@@ -34,6 +34,7 @@
  * DAQ 6601/6602 User Manual (NI 322137B-01)
  */
 
+#include <linux/module.h>
 #include <linux/pci.h>
 #include <linux/interrupt.h>
 

commit 0bdab509bf9c6d838dc0a3b1d68bbf841fc20b5a
Author: H Hartley Sweeten <hsweeten@visionengravers.com>
Date:   Mon Jun 24 16:55:44 2013 -0700

    staging: comedi: use comedi_alloc_devpriv()
    
    Use the helper function to allocate memory and set the comedi_device
    private data pointer.
    
    This removes the dependency on slab.h from most of the drivers so
    remove the global #include in comedidev.h and the local #include
    in some of the drivers.
    
    Signed-off-by: H Hartley Sweeten <hsweeten@visionengravers.com>
    Reviewed-by: Ian Abbott <abbotti@mev.co.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/drivers/ni_660x.c b/drivers/staging/comedi/drivers/ni_660x.c
index a9e000461ec7..d90d4a09ba4c 100644
--- a/drivers/staging/comedi/drivers/ni_660x.c
+++ b/drivers/staging/comedi/drivers/ni_660x.c
@@ -929,10 +929,9 @@ static int ni_660x_allocate_private(struct comedi_device *dev)
 	struct ni_660x_private *devpriv;
 	unsigned i;
 
-	devpriv = kzalloc(sizeof(*devpriv), GFP_KERNEL);
+	devpriv = comedi_alloc_devpriv(dev, sizeof(*devpriv));
 	if (!devpriv)
 		return -ENOMEM;
-	dev->private = devpriv;
 
 	spin_lock_init(&devpriv->mite_channel_lock);
 	spin_lock_init(&devpriv->interrupt_lock);

commit 641f064e5df6fb3aaeb6256031a153a5efb16ca6
Author: H Hartley Sweeten <hsweeten@visionengravers.com>
Date:   Wed Apr 24 18:13:24 2013 -0700

    staging: comedi: remove FSF address from boilerplate text
    
    Addresses change...
    
    Remove the paragraph with the FSF address from all the comedi source
    files.
    
    Also, remove the paragraph about the finding the complete GPL in the
    COPYING file since it's unnecessary.
    
    Signed-off-by: H Hartley Sweeten <hsweeten@visionengravers.com>
    Cc: Ian Abbott <abbotti@mev.co.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/drivers/ni_660x.c b/drivers/staging/comedi/drivers/ni_660x.c
index 5cdda7fe97a7..a9e000461ec7 100644
--- a/drivers/staging/comedi/drivers/ni_660x.c
+++ b/drivers/staging/comedi/drivers/ni_660x.c
@@ -11,10 +11,6 @@
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.
-
-  You should have received a copy of the GNU General Public License
-  along with this program; if not, write to the Free Software
-  Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */
 
 /*

commit 84b44d08993ffe762d9a86ee2243239350b871a4
Author: Ian Abbott <abbotti@mev.co.uk>
Date:   Fri Mar 15 13:15:36 2013 +0000

    staging: comedi: remove unneeded settings of `dev->iobase`
    
    Some PCI drivers use the "spare" `iobase` member of `struct
    comedi_device` as a flag to indicate that the call to
    `comedi_pci_enable()` was successful.  This is no longer necessary now
    that `comedi_pci_enable()` and `comedi_pci_disable()` use the
    `ioenabled` member of `struct comedi_device` themselves to keep track of
    what needs to be done.
    
    Remove the unnecessary assignments to the `iobase` member in the
    relevant drivers.
    
    Signed-off-by: Ian Abbott <abbotti@mev.co.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/drivers/ni_660x.c b/drivers/staging/comedi/drivers/ni_660x.c
index 440cfd17ee3a..5cdda7fe97a7 100644
--- a/drivers/staging/comedi/drivers/ni_660x.c
+++ b/drivers/staging/comedi/drivers/ni_660x.c
@@ -1180,7 +1180,6 @@ static int ni_660x_auto_attach(struct comedi_device *dev,
 	ret = comedi_pci_enable(dev);
 	if (ret)
 		return ret;
-	dev->iobase = 1;
 
 	ret = ni_660x_allocate_private(dev);
 	if (ret < 0)

commit a7401cddcdf739d3cb9598c9b3787a732fc87809
Author: Ian Abbott <abbotti@mev.co.uk>
Date:   Fri Mar 15 13:15:33 2013 +0000

    staging: comedi: make 'dev->attached' a bool bit-field
    
    Change the `attached` member of `struct comedi_device` to a 1-bit
    bit-field of type `bool`.  Change assigned values to `true` and `false`
    and replace or remove comparison operations with simple boolean tests.
    
    We'll put some extra bit-fields in the gap later to save space.
    
    Signed-off-by: Ian Abbott <abbotti@mev.co.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/drivers/ni_660x.c b/drivers/staging/comedi/drivers/ni_660x.c
index 43b7ea8970a6..440cfd17ee3a 100644
--- a/drivers/staging/comedi/drivers/ni_660x.c
+++ b/drivers/staging/comedi/drivers/ni_660x.c
@@ -887,7 +887,7 @@ static irqreturn_t ni_660x_interrupt(int irq, void *d)
 	unsigned i;
 	unsigned long flags;
 
-	if (dev->attached == 0)
+	if (!dev->attached)
 		return IRQ_NONE;
 	/* lock to avoid race with comedi_poll */
 	spin_lock_irqsave(&devpriv->interrupt_lock, flags);

commit 8bdfefb7849c563e05aa60a4649cf4d0987b97b4
Author: Ian Abbott <abbotti@mev.co.uk>
Date:   Fri Mar 15 11:16:36 2013 +0000

    staging: comedi: ni_660x: support NI PXI-6624
    
    Florent Boudet reports success using a NI PXI-6624 board with a
    trivially modified version of the "ni_660x" driver (addition to the PCI
    device ID table and comedi board table).  He did this with the
    out-of-tree Comedi drivers at www.comedi.org, but it applies equally to
    the in-tree "staging" drivers.
    
    He reports the PXI-6624 is basically the same as the PXI-6602, but with
    isolated channels and external voltage source.
    
    Add support for NI PXI-6224 to the "ni_660x" driver.
    
    (Maybe the driver should be renamed to "ni_66xx"?)
    
    Signed-off-by: Ian Abbott <abbotti@mev.co.uk>
    Cc: Florent Boudet <flboudet@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/drivers/ni_660x.c b/drivers/staging/comedi/drivers/ni_660x.c
index 0b6547ef7268..43b7ea8970a6 100644
--- a/drivers/staging/comedi/drivers/ni_660x.c
+++ b/drivers/staging/comedi/drivers/ni_660x.c
@@ -21,13 +21,13 @@
  * Driver: ni_660x
  * Description: National Instruments 660x counter/timer boards
  * Devices: [National Instruments] PCI-6601 (ni_660x), PCI-6602, PXI-6602,
- *   PXI-6608
+ *   PXI-6608, PXI-6624
  * Author: J.P. Mellor <jpmellor@rose-hulman.edu>,
  *   Herman.Bruyninckx@mech.kuleuven.ac.be,
  *   Wim.Meeussen@mech.kuleuven.ac.be,
  *   Klaas.Gadeyne@mech.kuleuven.ac.be,
  *   Frank Mori Hess <fmhess@users.sourceforge.net>
- * Updated: Thu Oct 18 12:56:06 EDT 2007
+ * Updated: Fri, 15 Mar 2013 10:47:56 +0000
  * Status: experimental
  *
  * Encoders work.  PulseGeneration (both single pulse and pulse train)
@@ -392,6 +392,7 @@ enum ni_660x_boardid {
 	BOARD_PCI6602,
 	BOARD_PXI6602,
 	BOARD_PXI6608,
+	BOARD_PXI6624
 };
 
 struct ni_660x_board {
@@ -416,6 +417,10 @@ static const struct ni_660x_board ni_660x_boards[] = {
 		.name		= "PXI-6608",
 		.n_chips	= 2,
 	},
+	[BOARD_PXI6624] = {
+		.name		= "PXI-6624",
+		.n_chips	= 2,
+	},
 };
 
 #define NI_660X_MAX_NUM_CHIPS 2
@@ -1326,6 +1331,7 @@ static DEFINE_PCI_DEVICE_TABLE(ni_660x_pci_table) = {
 	{ PCI_VDEVICE(NI, 0x1360), BOARD_PXI6602 },
 	{ PCI_VDEVICE(NI, 0x2c60), BOARD_PCI6601 },
 	{ PCI_VDEVICE(NI, 0x2cc0), BOARD_PXI6608 },
+	{ PCI_VDEVICE(NI, 0x1e40), BOARD_PXI6624 },
 	{ 0 }
 };
 MODULE_DEVICE_TABLE(pci, ni_660x_pci_table);

commit 71d92face4d7c0f292b089f0806bceddd6a1768e
Author: Ian Abbott <abbotti@mev.co.uk>
Date:   Fri Mar 15 11:16:35 2013 +0000

    staging: comedi: ni_660x: reformat driver description comment
    
    Convert to preferred block comment style.
    
    Signed-off-by: Ian Abbott <abbotti@mev.co.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/drivers/ni_660x.c b/drivers/staging/comedi/drivers/ni_660x.c
index f97a668143d8..0b6547ef7268 100644
--- a/drivers/staging/comedi/drivers/ni_660x.c
+++ b/drivers/staging/comedi/drivers/ni_660x.c
@@ -18,27 +18,25 @@
 */
 
 /*
-Driver: ni_660x
-Description: National Instruments 660x counter/timer boards
-Devices:
-[National Instruments] PCI-6601 (ni_660x), PCI-6602, PXI-6602,
-	PXI-6608
-Author: J.P. Mellor <jpmellor@rose-hulman.edu>,
-	Herman.Bruyninckx@mech.kuleuven.ac.be,
-	Wim.Meeussen@mech.kuleuven.ac.be,
-	Klaas.Gadeyne@mech.kuleuven.ac.be,
-	Frank Mori Hess <fmhess@users.sourceforge.net>
-Updated: Thu Oct 18 12:56:06 EDT 2007
-Status: experimental
-
-Encoders work.  PulseGeneration (both single pulse and pulse train)
-works. Buffered commands work for input but not output.
-
-References:
-DAQ 660x Register-Level Programmer Manual  (NI 370505A-01)
-DAQ 6601/6602 User Manual (NI 322137B-01)
-
-*/
+ * Driver: ni_660x
+ * Description: National Instruments 660x counter/timer boards
+ * Devices: [National Instruments] PCI-6601 (ni_660x), PCI-6602, PXI-6602,
+ *   PXI-6608
+ * Author: J.P. Mellor <jpmellor@rose-hulman.edu>,
+ *   Herman.Bruyninckx@mech.kuleuven.ac.be,
+ *   Wim.Meeussen@mech.kuleuven.ac.be,
+ *   Klaas.Gadeyne@mech.kuleuven.ac.be,
+ *   Frank Mori Hess <fmhess@users.sourceforge.net>
+ * Updated: Thu Oct 18 12:56:06 EDT 2007
+ * Status: experimental
+ *
+ * Encoders work.  PulseGeneration (both single pulse and pulse train)
+ * works.  Buffered commands work for input but not output.
+ * 
+ * References:
+ * DAQ 660x Register-Level Programmer Manual  (NI 370505A-01)
+ * DAQ 6601/6602 User Manual (NI 322137B-01)
+ */
 
 #include <linux/pci.h>
 #include <linux/interrupt.h>

commit 818f569fe930c5b8a05d1a44ece3c63c99c13c88
Author: H Hartley Sweeten <hsweeten@visionengravers.com>
Date:   Wed Mar 13 10:36:31 2013 -0700

    staging: comedi_pci: pass comedi_device to comedi_pci_enable()
    
    Make comedi_pci_enable() use the same parameter type as
    comedi_pci_disable(). This also allows comedi_pci_enable
    to automatically determine the resource name passed to
    pci_request_regions().
    
    Make sure the errno value returned is passed on instead of
    assuming an errno. Also, remove any kernel noise that is
    generated when the call fails.
    
    The National Instruments drivers that use the mite module
    currently enable the PCI device in the mite module. For
    those drivers move the call to comedi_pci_enable into the
    driver.
    
    Signed-off-by: H Hartley Sweeten <hsweeten@visionengravers.com>
    Cc: Ian Abbott <abbotti@mev.co.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/drivers/ni_660x.c b/drivers/staging/comedi/drivers/ni_660x.c
index cc82106af7f0..f97a668143d8 100644
--- a/drivers/staging/comedi/drivers/ni_660x.c
+++ b/drivers/staging/comedi/drivers/ni_660x.c
@@ -1174,6 +1174,11 @@ static int ni_660x_auto_attach(struct comedi_device *dev,
 	dev->board_ptr = board;
 	dev->board_name = board->name;
 
+	ret = comedi_pci_enable(dev);
+	if (ret)
+		return ret;
+	dev->iobase = 1;
+
 	ret = ni_660x_allocate_private(dev);
 	if (ret < 0)
 		return ret;
@@ -1188,7 +1193,6 @@ static int ni_660x_auto_attach(struct comedi_device *dev,
 		dev_warn(dev->class_dev, "error setting up mite\n");
 		return ret;
 	}
-	dev->iobase = 1;
 
 	ret = ni_660x_alloc_mite_rings(dev);
 	if (ret < 0)

commit 7f072f54ae5dc9965cbe450419b1389d13e2b849
Author: H Hartley Sweeten <hsweeten@visionengravers.com>
Date:   Wed Mar 13 10:35:51 2013 -0700

    staging: comedi_pci: make comedi_pci_disable() safe to call
    
    Currently all the comedi PCI drivers need to do some checking in
    their (*detach) before calling comedi_pci_disable() in order to
    make sure the PCI device has actually be enabled.
    
    Change the parameter passed to comedi_pci_disable() from a struct
    pci_dev pointer to a comedi_device pointer and have comedi_pci_disable()
    handle all the checking.
    
    For most comedi PCI drivers this also allows removing the local
    variable holding the pointer to the pci_dev. For some of the drivers
    comedi_pci_disable can now be used directly as the (*detach) function.
    
    The National Instruments drivers that use the mite module currently
    enable/disable the PCI device in the mite module. For those drivers
    move the call to comedi_pci_disable into the driver and make sure
    dev->iobase is set to a non-zero value.
    
    Signed-off-by: H Hartley Sweeten <hsweeten@visionengravers.com>
    Cc: Ian Abbott <abbotti@mev.co.uk>
    Cc: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/drivers/ni_660x.c b/drivers/staging/comedi/drivers/ni_660x.c
index d2e061a195d0..cc82106af7f0 100644
--- a/drivers/staging/comedi/drivers/ni_660x.c
+++ b/drivers/staging/comedi/drivers/ni_660x.c
@@ -1188,6 +1188,7 @@ static int ni_660x_auto_attach(struct comedi_device *dev,
 		dev_warn(dev->class_dev, "error setting up mite\n");
 		return ret;
 	}
+	dev->iobase = 1;
 
 	ret = ni_660x_alloc_mite_rings(dev);
 	if (ret < 0)
@@ -1302,6 +1303,7 @@ static void ni_660x_detach(struct comedi_device *dev)
 			mite_free(devpriv->mite);
 		}
 	}
+	comedi_pci_disable(dev);
 }
 
 static struct comedi_driver ni_660x_driver = {

commit e2b8360fd13cd5e211e2bd2ba0f04d97bf6e409b
Author: H Hartley Sweeten <hsweeten@visionengravers.com>
Date:   Tue Mar 5 10:16:42 2013 -0700

    staging: comedi: ni_660x: cleanup the boardinfo
    
    For aesthetic reasons, add some whitespace to the boardinfo.
    
    Signed-off-by: H Hartley Sweeten <hsweeten@visionengravers.com>
    Cc: Ian Abbott <abbotti@mev.co.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/drivers/ni_660x.c b/drivers/staging/comedi/drivers/ni_660x.c
index eae0e4acc053..d2e061a195d0 100644
--- a/drivers/staging/comedi/drivers/ni_660x.c
+++ b/drivers/staging/comedi/drivers/ni_660x.c
@@ -403,21 +403,21 @@ struct ni_660x_board {
 
 static const struct ni_660x_board ni_660x_boards[] = {
 	[BOARD_PCI6601] = {
-	 .name = "PCI-6601",
-	 .n_chips = 1,
-	 },
+		.name		= "PCI-6601",
+		.n_chips	= 1,
+	},
 	[BOARD_PCI6602] = {
-	 .name = "PCI-6602",
-	 .n_chips = 2,
-	 },
+		.name		= "PCI-6602",
+		.n_chips	= 2,
+	},
 	[BOARD_PXI6602] = {
-	 .name = "PXI-6602",
-	 .n_chips = 2,
-	 },
+		.name		= "PXI-6602",
+		.n_chips	= 2,
+	},
 	[BOARD_PXI6608] = {
-	 .name = "PXI-6608",
-	 .n_chips = 2,
-	 },
+		.name		= "PXI-6608",
+		.n_chips	= 2,
+	},
 };
 
 #define NI_660X_MAX_NUM_CHIPS 2

commit 97bcce5a4cf420986670c43923aa4bc5efa9bc2e
Author: H Hartley Sweeten <hsweeten@visionengravers.com>
Date:   Tue Mar 5 10:16:16 2013 -0700

    staging: comedi: ni_660x: use the pci id_table 'driver_data'
    
    Create an enum to the boardinfo and pass that enum in the pci_driver
    id_table as the driver_data.
    
    Change the macro used to fill in the device table from PCI_DEVICE() to
    PCI_VDEVICE(). This allows passing the enum as the next field.
    
    This allows removing the 'dev_id' data from the boardinfo as well the
    search function that was used to locate the boardinfo for the PCI device.
    
    Signed-off-by: H Hartley Sweeten <hsweeten@visionengravers.com>
    Cc: Ian Abbott <abbotti@mev.co.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/drivers/ni_660x.c b/drivers/staging/comedi/drivers/ni_660x.c
index cf05d665ba9e..eae0e4acc053 100644
--- a/drivers/staging/comedi/drivers/ni_660x.c
+++ b/drivers/staging/comedi/drivers/ni_660x.c
@@ -389,31 +389,32 @@ enum global_interrupt_config_register_bits {
 /* First chip is at base-address + 0x00, etc. */
 static const unsigned GPCT_OFFSET[2] = { 0x0, 0x800 };
 
-/* Board description*/
+enum ni_660x_boardid {
+	BOARD_PCI6601,
+	BOARD_PCI6602,
+	BOARD_PXI6602,
+	BOARD_PXI6608,
+};
+
 struct ni_660x_board {
-	unsigned short dev_id;	/* `lspci` will show you this */
 	const char *name;
 	unsigned n_chips;	/* total number of TIO chips */
 };
 
 static const struct ni_660x_board ni_660x_boards[] = {
-	{
-	 .dev_id = 0x2c60,
+	[BOARD_PCI6601] = {
 	 .name = "PCI-6601",
 	 .n_chips = 1,
 	 },
-	{
-	 .dev_id = 0x1310,
+	[BOARD_PCI6602] = {
 	 .name = "PCI-6602",
 	 .n_chips = 2,
 	 },
-	{
-	 .dev_id = 0x1360,
+	[BOARD_PXI6602] = {
 	 .name = "PXI-6602",
 	 .n_chips = 2,
 	 },
-	{
-	 .dev_id = 0x2cc0,
+	[BOARD_PXI6608] = {
 	 .name = "PXI-6608",
 	 .n_chips = 2,
 	 },
@@ -974,20 +975,6 @@ static void ni_660x_free_mite_rings(struct comedi_device *dev)
 	}
 }
 
-static const struct ni_660x_board *
-ni_660x_find_boardinfo(struct pci_dev *pcidev)
-{
-	unsigned int dev_id = pcidev->device;
-	unsigned int n;
-
-	for (n = 0; n < ARRAY_SIZE(ni_660x_boards); n++) {
-		const struct ni_660x_board *board = &ni_660x_boards[n];
-		if (board->dev_id == dev_id)
-			return board;
-	}
-	return NULL;
-}
-
 static int
 ni_660x_GPCT_rinsn(struct comedi_device *dev, struct comedi_subdevice *s,
 		   struct comedi_insn *insn, unsigned int *data)
@@ -1170,32 +1157,32 @@ static int ni_660x_dio_insn_config(struct comedi_device *dev,
 }
 
 static int ni_660x_auto_attach(struct comedi_device *dev,
-					 unsigned long context_unused)
+			       unsigned long context)
 {
 	struct pci_dev *pcidev = comedi_to_pci_dev(dev);
-	const struct ni_660x_board *board;
+	const struct ni_660x_board *board = NULL;
 	struct ni_660x_private *devpriv;
 	struct comedi_subdevice *s;
 	int ret;
 	unsigned i;
 	unsigned global_interrupt_config_bits;
 
+	if (context < ARRAY_SIZE(ni_660x_boards))
+		board = &ni_660x_boards[context];
+	if (!board)
+		return -ENODEV;
+	dev->board_ptr = board;
+	dev->board_name = board->name;
+
 	ret = ni_660x_allocate_private(dev);
 	if (ret < 0)
 		return ret;
 	devpriv = dev->private;
 
-	dev->board_ptr = ni_660x_find_boardinfo(pcidev);
-	if (!dev->board_ptr)
-		return -ENODEV;
-	board = comedi_board(dev);
-
 	devpriv->mite = mite_alloc(pcidev);
 	if (!devpriv->mite)
 		return -ENOMEM;
 
-	dev->board_name = board->name;
-
 	ret = mite_setup2(devpriv->mite, 1);
 	if (ret < 0) {
 		dev_warn(dev->class_dev, "error setting up mite\n");
@@ -1331,11 +1318,11 @@ static int ni_660x_pci_probe(struct pci_dev *dev,
 }
 
 static DEFINE_PCI_DEVICE_TABLE(ni_660x_pci_table) = {
-	{PCI_DEVICE(PCI_VENDOR_ID_NI, 0x2c60)},
-	{PCI_DEVICE(PCI_VENDOR_ID_NI, 0x1310)},
-	{PCI_DEVICE(PCI_VENDOR_ID_NI, 0x1360)},
-	{PCI_DEVICE(PCI_VENDOR_ID_NI, 0x2cc0)},
-	{0}
+	{ PCI_VDEVICE(NI, 0x1310), BOARD_PCI6602 },
+	{ PCI_VDEVICE(NI, 0x1360), BOARD_PXI6602 },
+	{ PCI_VDEVICE(NI, 0x2c60), BOARD_PCI6601 },
+	{ PCI_VDEVICE(NI, 0x2cc0), BOARD_PXI6608 },
+	{ 0 }
 };
 MODULE_DEVICE_TABLE(pci, ni_660x_pci_table);
 

commit b8f4ac237e382accd4b30c75043939f7ed9e79a6
Author: H Hartley Sweeten <hsweeten@visionengravers.com>
Date:   Tue Mar 5 09:53:41 2013 -0700

    staging: comedi: comedi_pci: change the comedi_pci_auto_config() 'context'
    
    The comedi_pci_auto_config() function is used to allow the PCI driver
    (*probe) function to automatically call the comedi driver (*auto_attach).
    This allows the comedi driver to be part of the PnP process when the
    PCI device is detected.
    
    Currently the comedi_pci_auto_config() always passes a 'context' of '0'
    to comedi_auto_config(). This makes the 'context' a bit useless.
    
    Modify comedi_pci_auto_config() to allow the comedi pci drivers to pass
    a 'context' from the PCI driver.
    
    Make all the comedi pci drivers pass the pci_device_id 'driver_data' as
    the 'context'. Since none of the comedi pci drivers currently set the
    'driver_data' the 'context' will still be '0'.
    
    Signed-off-by: H Hartley Sweeten <hsweeten@visionengravers.com>
    Cc: Ian Abbott <abbotti@mev.co.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/drivers/ni_660x.c b/drivers/staging/comedi/drivers/ni_660x.c
index e46dd7a1a724..cf05d665ba9e 100644
--- a/drivers/staging/comedi/drivers/ni_660x.c
+++ b/drivers/staging/comedi/drivers/ni_660x.c
@@ -1325,9 +1325,9 @@ static struct comedi_driver ni_660x_driver = {
 };
 
 static int ni_660x_pci_probe(struct pci_dev *dev,
-				       const struct pci_device_id *ent)
+			     const struct pci_device_id *id)
 {
-	return comedi_pci_auto_config(dev, &ni_660x_driver);
+	return comedi_pci_auto_config(dev, &ni_660x_driver, id->driver_data);
 }
 
 static DEFINE_PCI_DEVICE_TABLE(ni_660x_pci_table) = {

commit 33782dd5edf8db3cdb7c81a3523bf743dd0209b7
Author: H Hartley Sweeten <hsweeten@visionengravers.com>
Date:   Wed Jan 30 15:22:21 2013 -0700

    staging: comedi: conditionally build in PCI driver support
    
    Separate the comedi_pci_* functions out of drivers.c into a new
    source file, comedi_pci.c. This allows conditionally building
    support for comedi PCI drivers into the comedi core. Fix the
    Kconfig and Makefile appropriately.
    
    Group all the comedi_pci_* prototypes and related defines into one
    place in comedidev.h. Protect these prototypes with an #ifdef and
    provide some dummy functions so that the mixed ISA/PCI comedi
    drivers will still build correctly.
    
    Remove the #include <linux/pci.h> from comedidev.h and drivers.c. This
    include is only needed by the comedi PCI driver support code and the
    PCI drivers. The include should occur in those files.
    
    Also, remove the #include <linux/pci.h> from a couple non-PCI drivers
    since it's not needed.
    
    Signed-off-by: H Hartley Sweeten <hsweeten@visionengravers.com>
    Cc: Ian Abbott <abbotti@mev.co.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/drivers/ni_660x.c b/drivers/staging/comedi/drivers/ni_660x.c
index bdef2e4dd3db..e46dd7a1a724 100644
--- a/drivers/staging/comedi/drivers/ni_660x.c
+++ b/drivers/staging/comedi/drivers/ni_660x.c
@@ -40,8 +40,11 @@ DAQ 6601/6602 User Manual (NI 322137B-01)
 
 */
 
+#include <linux/pci.h>
 #include <linux/interrupt.h>
+
 #include "../comedidev.h"
+
 #include "mite.h"
 #include "ni_tio.h"
 

commit 9901a4d75d007686e8f6473189cafc4b216b7449
Author: Peter Huewe <peterhuewe@gmx.de>
Date:   Tue Jan 22 23:40:03 2013 +0100

    staging/comedi: Use comedi_pci_auto_unconfig directly for pci_driver.remove
    
    (Almost) all comedi pci drivers have some wrapper for their
    pci_driver.remove function which simply calls comedi_pci_auto_unconfig
    which has the same function prototype as the wrapper.
    
    -> we can remove these wrappers and call comedi_pci_auto_unconfig
    directly. This removes a lot some boilerplate code and saves some bytes.
    
    Signed-off-by: Peter Huewe <peterhuewe@gmx.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/drivers/ni_660x.c b/drivers/staging/comedi/drivers/ni_660x.c
index 26baf9c96fff..bdef2e4dd3db 100644
--- a/drivers/staging/comedi/drivers/ni_660x.c
+++ b/drivers/staging/comedi/drivers/ni_660x.c
@@ -1327,11 +1327,6 @@ static int ni_660x_pci_probe(struct pci_dev *dev,
 	return comedi_pci_auto_config(dev, &ni_660x_driver);
 }
 
-static void ni_660x_pci_remove(struct pci_dev *dev)
-{
-	comedi_pci_auto_unconfig(dev);
-}
-
 static DEFINE_PCI_DEVICE_TABLE(ni_660x_pci_table) = {
 	{PCI_DEVICE(PCI_VENDOR_ID_NI, 0x2c60)},
 	{PCI_DEVICE(PCI_VENDOR_ID_NI, 0x1310)},
@@ -1345,7 +1340,7 @@ static struct pci_driver ni_660x_pci_driver = {
 	.name		= "ni_660x",
 	.id_table	= ni_660x_pci_table,
 	.probe		= ni_660x_pci_probe,
-	.remove		= ni_660x_pci_remove,
+	.remove		= comedi_pci_auto_unconfig,
 };
 module_comedi_pci_driver(ni_660x_driver, ni_660x_pci_driver);
 

commit 53b800198592b0ff96577ecc5f116f7d902a4362
Author: Bill Pemberton <wfp5p@virginia.edu>
Date:   Mon Nov 19 13:26:36 2012 -0500

    staging: comedi: remove use of __devexit
    
    CONFIG_HOTPLUG is going away as an option so __devexit is no
    longer needed.
    
    Signed-off-by: Bill Pemberton <wfp5p@virginia.edu>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/drivers/ni_660x.c b/drivers/staging/comedi/drivers/ni_660x.c
index 58c9341fe2cf..26baf9c96fff 100644
--- a/drivers/staging/comedi/drivers/ni_660x.c
+++ b/drivers/staging/comedi/drivers/ni_660x.c
@@ -1327,7 +1327,7 @@ static int ni_660x_pci_probe(struct pci_dev *dev,
 	return comedi_pci_auto_config(dev, &ni_660x_driver);
 }
 
-static void __devexit ni_660x_pci_remove(struct pci_dev *dev)
+static void ni_660x_pci_remove(struct pci_dev *dev)
 {
 	comedi_pci_auto_unconfig(dev);
 }

commit a690b7e535f2f97a3a05ee570715abeb60a8910f
Author: Bill Pemberton <wfp5p@virginia.edu>
Date:   Mon Nov 19 13:21:58 2012 -0500

    staging: comedi: remove use of __devinit
    
    CONFIG_HOTPLUG is going away as an option so __devinit is no longer
    needed.
    
    Signed-off-by: Bill Pemberton <wfp5p@virginia.edu>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/drivers/ni_660x.c b/drivers/staging/comedi/drivers/ni_660x.c
index aaf4fe771eec..58c9341fe2cf 100644
--- a/drivers/staging/comedi/drivers/ni_660x.c
+++ b/drivers/staging/comedi/drivers/ni_660x.c
@@ -1166,7 +1166,7 @@ static int ni_660x_dio_insn_config(struct comedi_device *dev,
 	return insn->n;
 }
 
-static int __devinit ni_660x_auto_attach(struct comedi_device *dev,
+static int ni_660x_auto_attach(struct comedi_device *dev,
 					 unsigned long context_unused)
 {
 	struct pci_dev *pcidev = comedi_to_pci_dev(dev);
@@ -1321,7 +1321,7 @@ static struct comedi_driver ni_660x_driver = {
 	.detach		= ni_660x_detach,
 };
 
-static int __devinit ni_660x_pci_probe(struct pci_dev *dev,
+static int ni_660x_pci_probe(struct pci_dev *dev,
 				       const struct pci_device_id *ent)
 {
 	return comedi_pci_auto_config(dev, &ni_660x_driver);

commit a471eace7baa40cdf16d3f26b2f78ddce613ca8f
Author: Bill Pemberton <wfp5p@virginia.edu>
Date:   Mon Nov 19 13:21:37 2012 -0500

    staging: comedi: remove use of __devexit_p
    
    CONFIG_HOTPLUG is going away as an option so __devexit_p is no longer
    needed.
    
    Signed-off-by: Bill Pemberton <wfp5p@virginia.edu>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/drivers/ni_660x.c b/drivers/staging/comedi/drivers/ni_660x.c
index d1561c72e2d3..aaf4fe771eec 100644
--- a/drivers/staging/comedi/drivers/ni_660x.c
+++ b/drivers/staging/comedi/drivers/ni_660x.c
@@ -1345,7 +1345,7 @@ static struct pci_driver ni_660x_pci_driver = {
 	.name		= "ni_660x",
 	.id_table	= ni_660x_pci_table,
 	.probe		= ni_660x_pci_probe,
-	.remove		= __devexit_p(ni_660x_pci_remove),
+	.remove		= ni_660x_pci_remove,
 };
 module_comedi_pci_driver(ni_660x_driver, ni_660x_pci_driver);
 

commit 750af5e568d060ec6994cdcb4e86cdddfcd473c0
Author: Ian Abbott <abbotti@mev.co.uk>
Date:   Tue Oct 30 13:30:04 2012 +0000

    staging: comedi/drivers: use auto_attach instead of attach_pci
    
    Change comedi drivers for PCI boards to use the new `auto_attach()`
    method instead of the `attach_pci()` method.  I plan to remove the
    `attach_pci()` and `attach_usb()` methods from `struct comedi_driver`
    once nothing is using them.
    
    Tag the functions with `__devinit` where they are not already so tagged,
    as they are only called during PCI probe.
    
    Signed-off-by: Ian Abbott <abbotti@mev.co.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/drivers/ni_660x.c b/drivers/staging/comedi/drivers/ni_660x.c
index 318057546485..d1561c72e2d3 100644
--- a/drivers/staging/comedi/drivers/ni_660x.c
+++ b/drivers/staging/comedi/drivers/ni_660x.c
@@ -1166,9 +1166,10 @@ static int ni_660x_dio_insn_config(struct comedi_device *dev,
 	return insn->n;
 }
 
-static int __devinit ni_660x_attach_pci(struct comedi_device *dev,
-					struct pci_dev *pcidev)
+static int __devinit ni_660x_auto_attach(struct comedi_device *dev,
+					 unsigned long context_unused)
 {
+	struct pci_dev *pcidev = comedi_to_pci_dev(dev);
 	const struct ni_660x_board *board;
 	struct ni_660x_private *devpriv;
 	struct comedi_subdevice *s;
@@ -1316,7 +1317,7 @@ static void ni_660x_detach(struct comedi_device *dev)
 static struct comedi_driver ni_660x_driver = {
 	.driver_name	= "ni_660x",
 	.module		= THIS_MODULE,
-	.attach_pci	= ni_660x_attach_pci,
+	.auto_attach	= ni_660x_auto_attach,
 	.detach		= ni_660x_detach,
 };
 

commit 56c645ff7f1d57781a2231071be858cba5107678
Author: H Hartley Sweeten <hartleys@visionengravers.com>
Date:   Tue Oct 23 16:29:07 2012 -0700

    staging: comedi: ni_660x: cleanup ni_660x_dio_insn_config()
    
    This function handles all the insn_config instructions for the
    digital i/o subdevice. These functions are supposed to return
    the number of instruction parameters used (insn->n) or an -errno.
    Fix the switch() so that the correct result is returned for all
    INSN_CONFIG_* cases.
    
    To clarify the code, add a local variable for the 'bit' used with
    the instructions used to configure and query the input/output setting
    of a channel.
    
    For aesthetic reasons, add a whitespace between each case to improve
    readability.
    
    Signed-off-by: H Hartley Sweeten <hsweeten@visionengravers.com>
    Cc: Ian Abbott <abbotti@mev.co.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/drivers/ni_660x.c b/drivers/staging/comedi/drivers/ni_660x.c
index 360d873e57ef..318057546485 100644
--- a/drivers/staging/comedi/drivers/ni_660x.c
+++ b/drivers/staging/comedi/drivers/ni_660x.c
@@ -1116,49 +1116,54 @@ static int ni_660x_set_pfi_routing(struct comedi_device *dev, unsigned chan,
 
 static int ni_660x_dio_insn_config(struct comedi_device *dev,
 				   struct comedi_subdevice *s,
-				   struct comedi_insn *insn, unsigned int *data)
+				   struct comedi_insn *insn,
+				   unsigned int *data)
 {
 	struct ni_660x_private *devpriv = dev->private;
-	int chan = CR_CHAN(insn->chanspec);
+	unsigned int chan = CR_CHAN(insn->chanspec);
+	uint64_t bit = 1ULL << chan;
 	unsigned int val;
-
-	/* The input or output configuration of each digital line is
-	 * configured by a special insn_config instruction.  chanspec
-	 * contains the channel to be changed, and data[0] contains the
-	 * value COMEDI_INPUT or COMEDI_OUTPUT. */
+	int ret;
 
 	switch (data[0]) {
 	case INSN_CONFIG_DIO_OUTPUT:
-		devpriv->pfi_direction_bits |= ((uint64_t) 1) << chan;
+		devpriv->pfi_direction_bits |= bit;
 		ni_660x_select_pfi_output(dev, chan,
 					  devpriv->pfi_output_selects[chan]);
 		break;
+
 	case INSN_CONFIG_DIO_INPUT:
-		devpriv->pfi_direction_bits &= ~(((uint64_t) 1) << chan);
+		devpriv->pfi_direction_bits &= ~bit;
 		ni_660x_select_pfi_output(dev, chan, pfi_output_select_high_Z);
 		break;
+
 	case INSN_CONFIG_DIO_QUERY:
-		data[1] =
-		    (devpriv->pfi_direction_bits &
-		     (((uint64_t) 1) << chan)) ? COMEDI_OUTPUT : COMEDI_INPUT;
-		return 0;
+		data[1] = (devpriv->pfi_direction_bits & bit) ? COMEDI_OUTPUT
+							      : COMEDI_INPUT;
+		break;
+
 	case INSN_CONFIG_SET_ROUTING:
-		return ni_660x_set_pfi_routing(dev, chan, data[1]);
+		ret = ni_660x_set_pfi_routing(dev, chan, data[1]);
+		if (ret)
+			return ret;
 		break;
+
 	case INSN_CONFIG_GET_ROUTING:
 		data[1] = devpriv->pfi_output_selects[chan];
 		break;
+
 	case INSN_CONFIG_FILTER:
 		val = ni_660x_read_register(dev, 0, IOConfigReg(chan));
 		val &= ~pfi_input_select_mask(chan);
 		val |= pfi_input_select_bits(chan, data[1]);
 		ni_660x_write_register(dev, 0, val, IOConfigReg(chan));
 		break;
+
 	default:
 		return -EINVAL;
-		break;
 	}
-	return 0;
+
+	return insn->n;
 }
 
 static int __devinit ni_660x_attach_pci(struct comedi_device *dev,

commit 82327aaf2e9fada01c972b296cbfc46a2ca9d85c
Author: H Hartley Sweeten <hartleys@visionengravers.com>
Date:   Tue Oct 23 16:28:45 2012 -0700

    staging: comedi: ni_660x: remove ni660x_config_filter()
    
    This simple function is only called by ni_660x_dio_insn_config().
    
    Signed-off-by: H Hartley Sweeten <hsweeten@visionengravers.com>
    Cc: Ian Abbott <abbotti@mev.co.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/drivers/ni_660x.c b/drivers/staging/comedi/drivers/ni_660x.c
index cdadc0be9626..360d873e57ef 100644
--- a/drivers/staging/comedi/drivers/ni_660x.c
+++ b/drivers/staging/comedi/drivers/ni_660x.c
@@ -1114,22 +1114,13 @@ static int ni_660x_set_pfi_routing(struct comedi_device *dev, unsigned chan,
 	return 0;
 }
 
-static void ni660x_config_filter(struct comedi_device *dev,
-				 unsigned pfi_channel,
-				 enum ni_gpct_filter_select filter)
-{
-	unsigned bits = ni_660x_read_register(dev, 0, IOConfigReg(pfi_channel));
-	bits &= ~pfi_input_select_mask(pfi_channel);
-	bits |= pfi_input_select_bits(pfi_channel, filter);
-	ni_660x_write_register(dev, 0, bits, IOConfigReg(pfi_channel));
-}
-
 static int ni_660x_dio_insn_config(struct comedi_device *dev,
 				   struct comedi_subdevice *s,
 				   struct comedi_insn *insn, unsigned int *data)
 {
 	struct ni_660x_private *devpriv = dev->private;
 	int chan = CR_CHAN(insn->chanspec);
+	unsigned int val;
 
 	/* The input or output configuration of each digital line is
 	 * configured by a special insn_config instruction.  chanspec
@@ -1158,7 +1149,10 @@ static int ni_660x_dio_insn_config(struct comedi_device *dev,
 		data[1] = devpriv->pfi_output_selects[chan];
 		break;
 	case INSN_CONFIG_FILTER:
-		ni660x_config_filter(dev, chan, data[1]);
+		val = ni_660x_read_register(dev, 0, IOConfigReg(chan));
+		val &= ~pfi_input_select_mask(chan);
+		val |= pfi_input_select_bits(chan, data[1]);
+		ni_660x_write_register(dev, 0, val, IOConfigReg(chan));
 		break;
 	default:
 		return -EINVAL;

commit 32bd027dd700744b29b89c38353b5597e70ce802
Author: H Hartley Sweeten <hartleys@visionengravers.com>
Date:   Tue Oct 23 16:28:30 2012 -0700

    staging: comedi: ni_660x: remove ni_660x_get_pfi_routing()
    
    This simple function is only called by ni_660x_dio_insn_config().
    
    Signed-off-by: H Hartley Sweeten <hsweeten@visionengravers.com>
    Cc: Ian Abbott <abbotti@mev.co.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/drivers/ni_660x.c b/drivers/staging/comedi/drivers/ni_660x.c
index 3f8ac5668252..cdadc0be9626 100644
--- a/drivers/staging/comedi/drivers/ni_660x.c
+++ b/drivers/staging/comedi/drivers/ni_660x.c
@@ -1114,14 +1114,6 @@ static int ni_660x_set_pfi_routing(struct comedi_device *dev, unsigned chan,
 	return 0;
 }
 
-static unsigned ni_660x_get_pfi_routing(struct comedi_device *dev,
-					unsigned chan)
-{
-	struct ni_660x_private *devpriv = dev->private;
-
-	return devpriv->pfi_output_selects[chan];
-}
-
 static void ni660x_config_filter(struct comedi_device *dev,
 				 unsigned pfi_channel,
 				 enum ni_gpct_filter_select filter)
@@ -1163,7 +1155,7 @@ static int ni_660x_dio_insn_config(struct comedi_device *dev,
 		return ni_660x_set_pfi_routing(dev, chan, data[1]);
 		break;
 	case INSN_CONFIG_GET_ROUTING:
-		data[1] = ni_660x_get_pfi_routing(dev, chan);
+		data[1] = devpriv->pfi_output_selects[chan];
 		break;
 	case INSN_CONFIG_FILTER:
 		ni660x_config_filter(dev, chan, data[1]);

commit e0f6959fbb318c1fb08c79503815b2cdd79d7554
Author: H Hartley Sweeten <hartleys@visionengravers.com>
Date:   Tue Oct 23 16:28:14 2012 -0700

    staging: comedi: ni_660x: remove BUG_ON(chan >= NUM_PFI_CHANNELS)
    
    This BUG_ON can never happen. The 'chan' value comes from the comedi
    core in the insn->chanspec and will always be in range for the subdevice
    number of channels (s->n_chan = NUM_PFI_CHANNELS).
    
    Signed-off-by: H Hartley Sweeten <hsweeten@visionengravers.com>
    Cc: Ian Abbott <abbotti@mev.co.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/drivers/ni_660x.c b/drivers/staging/comedi/drivers/ni_660x.c
index 25459860b46a..3f8ac5668252 100644
--- a/drivers/staging/comedi/drivers/ni_660x.c
+++ b/drivers/staging/comedi/drivers/ni_660x.c
@@ -1106,7 +1106,6 @@ static int ni_660x_set_pfi_routing(struct comedi_device *dev, unsigned chan,
 		if (source == pfi_output_select_do)
 			return -EINVAL;
 	}
-	BUG_ON(chan >= NUM_PFI_CHANNELS);
 
 	devpriv->pfi_output_selects[chan] = source;
 	if (devpriv->pfi_direction_bits & (((uint64_t) 1) << chan))
@@ -1120,7 +1119,6 @@ static unsigned ni_660x_get_pfi_routing(struct comedi_device *dev,
 {
 	struct ni_660x_private *devpriv = dev->private;
 
-	BUG_ON(chan >= NUM_PFI_CHANNELS);
 	return devpriv->pfi_output_selects[chan];
 }
 

commit 9186ccdec5b60220e9f10b0ee68f13156d099a10
Author: H Hartley Sweeten <hartleys@visionengravers.com>
Date:   Tue Oct 23 16:27:57 2012 -0700

    staging: comedi: ni_660x: remove inline function board()
    
    This function is used to get the dev->board_ptr from the
    comedi_device. Remove the function and use a local variable
    to hold the pointer where used. Use the comedi_board() helper
    to get the pointer.
    
    Signed-off-by: H Hartley Sweeten <hsweeten@visionengravers.com>
    Cc: Ian Abbott <abbotti@mev.co.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/drivers/ni_660x.c b/drivers/staging/comedi/drivers/ni_660x.c
index 2cd7e10a8ca5..25459860b46a 100644
--- a/drivers/staging/comedi/drivers/ni_660x.c
+++ b/drivers/staging/comedi/drivers/ni_660x.c
@@ -433,15 +433,11 @@ struct ni_660x_private {
 	unsigned short pfi_output_selects[NUM_PFI_CHANNELS];
 };
 
-/* initialized in ni_660x_attach_pci() */
-static inline const struct ni_660x_board *board(struct comedi_device *dev)
-{
-	return dev->board_ptr;
-}
-
 static inline unsigned ni_660x_num_counters(struct comedi_device *dev)
 {
-	return board(dev)->n_chips * counters_per_chip;
+	const struct ni_660x_board *board = comedi_board(dev);
+
+	return board->n_chips * counters_per_chip;
 }
 
 static enum NI_660x_Register ni_gpct_to_660x_register(enum ni_gpct_register reg)
@@ -946,11 +942,12 @@ static int ni_660x_allocate_private(struct comedi_device *dev)
 
 static int ni_660x_alloc_mite_rings(struct comedi_device *dev)
 {
+	const struct ni_660x_board *board = comedi_board(dev);
 	struct ni_660x_private *devpriv = dev->private;
 	unsigned i;
 	unsigned j;
 
-	for (i = 0; i < board(dev)->n_chips; ++i) {
+	for (i = 0; i < board->n_chips; ++i) {
 		for (j = 0; j < counters_per_chip; ++j) {
 			devpriv->mite_rings[i][j] =
 			    mite_alloc_ring(devpriv->mite);
@@ -963,11 +960,12 @@ static int ni_660x_alloc_mite_rings(struct comedi_device *dev)
 
 static void ni_660x_free_mite_rings(struct comedi_device *dev)
 {
+	const struct ni_660x_board *board = comedi_board(dev);
 	struct ni_660x_private *devpriv = dev->private;
 	unsigned i;
 	unsigned j;
 
-	for (i = 0; i < board(dev)->n_chips; ++i) {
+	for (i = 0; i < board->n_chips; ++i) {
 		for (j = 0; j < counters_per_chip; ++j)
 			mite_free_ring(devpriv->mite_rings[i][j]);
 	}
@@ -1051,6 +1049,7 @@ static void ni_660x_select_pfi_output(struct comedi_device *dev,
 				      unsigned pfi_channel,
 				      unsigned output_select)
 {
+	const struct ni_660x_board *board = comedi_board(dev);
 	static const unsigned counter_4_7_first_pfi = 8;
 	static const unsigned counter_4_7_last_pfi = 23;
 	unsigned active_chipset = 0;
@@ -1058,7 +1057,7 @@ static void ni_660x_select_pfi_output(struct comedi_device *dev,
 	unsigned active_bits;
 	unsigned idle_bits;
 
-	if (board(dev)->n_chips > 1) {
+	if (board->n_chips > 1) {
 		if (output_select == pfi_output_select_counter &&
 		    pfi_channel >= counter_4_7_first_pfi &&
 		    pfi_channel <= counter_4_7_last_pfi) {
@@ -1181,6 +1180,7 @@ static int ni_660x_dio_insn_config(struct comedi_device *dev,
 static int __devinit ni_660x_attach_pci(struct comedi_device *dev,
 					struct pci_dev *pcidev)
 {
+	const struct ni_660x_board *board;
 	struct ni_660x_private *devpriv;
 	struct comedi_subdevice *s;
 	int ret;
@@ -1195,11 +1195,13 @@ static int __devinit ni_660x_attach_pci(struct comedi_device *dev,
 	dev->board_ptr = ni_660x_find_boardinfo(pcidev);
 	if (!dev->board_ptr)
 		return -ENODEV;
+	board = comedi_board(dev);
+
 	devpriv->mite = mite_alloc(pcidev);
 	if (!devpriv->mite)
 		return -ENOMEM;
 
-	dev->board_name = board(dev)->name;
+	dev->board_name = board->name;
 
 	ret = mite_setup2(devpriv->mite, 1);
 	if (ret < 0) {
@@ -1270,7 +1272,7 @@ static int __devinit ni_660x_attach_pci(struct comedi_device *dev,
 			s->type = COMEDI_SUBD_UNUSED;
 		}
 	}
-	for (i = 0; i < board(dev)->n_chips; ++i)
+	for (i = 0; i < board->n_chips; ++i)
 		init_tio_chip(dev, i);
 
 	for (i = 0; i < ni_660x_num_counters(dev); ++i)
@@ -1286,7 +1288,7 @@ static int __devinit ni_660x_attach_pci(struct comedi_device *dev,
 	}
 	/* to be safe, set counterswap bits on tio chips after all the counter
 	   outputs have been set to high impedance mode */
-	for (i = 0; i < board(dev)->n_chips; ++i)
+	for (i = 0; i < board->n_chips; ++i)
 		set_tio_counterswap(dev, i);
 
 	ret = request_irq(mite_irq(devpriv->mite), ni_660x_interrupt,
@@ -1297,7 +1299,7 @@ static int __devinit ni_660x_attach_pci(struct comedi_device *dev,
 	}
 	dev->irq = mite_irq(devpriv->mite);
 	global_interrupt_config_bits = Global_Int_Enable_Bit;
-	if (board(dev)->n_chips > 1)
+	if (board->n_chips > 1)
 		global_interrupt_config_bits |= Cascade_Int_Enable_Bit;
 	ni_660x_write_register(dev, 0, global_interrupt_config_bits,
 			       GlobalInterruptConfigRegister);

commit 990b9eeda07b3f0c72dd2afa28e25067752e5222
Author: H Hartley Sweeten <hartleys@visionengravers.com>
Date:   Tue Oct 23 16:27:42 2012 -0700

    staging: comedi: ni_660x: move module init code to EOF
    
    Move the module init code to the end of the file. This removes
    the need for all the forward declarations.
    
    Signed-off-by: H Hartley Sweeten <hsweeten@visionengravers.com>
    Cc: Ian Abbott <abbotti@mev.co.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/drivers/ni_660x.c b/drivers/staging/comedi/drivers/ni_660x.c
index 5e1d8308faa9..2cd7e10a8ca5 100644
--- a/drivers/staging/comedi/drivers/ni_660x.c
+++ b/drivers/staging/comedi/drivers/ni_660x.c
@@ -419,16 +419,6 @@ static const struct ni_660x_board ni_660x_boards[] = {
 #define NI_660X_MAX_NUM_CHIPS 2
 #define NI_660X_MAX_NUM_COUNTERS (NI_660X_MAX_NUM_CHIPS * counters_per_chip)
 
-static DEFINE_PCI_DEVICE_TABLE(ni_660x_pci_table) = {
-	{PCI_DEVICE(PCI_VENDOR_ID_NI, 0x2c60)},
-	{PCI_DEVICE(PCI_VENDOR_ID_NI, 0x1310)},
-	{PCI_DEVICE(PCI_VENDOR_ID_NI, 0x1360)},
-	{PCI_DEVICE(PCI_VENDOR_ID_NI, 0x2cc0)},
-	{0}
-};
-
-MODULE_DEVICE_TABLE(pci, ni_660x_pci_table);
-
 struct ni_660x_private {
 	struct mite_struct *mite;
 	struct ni_gpct_device *counter_dev;
@@ -449,64 +439,6 @@ static inline const struct ni_660x_board *board(struct comedi_device *dev)
 	return dev->board_ptr;
 }
 
-static int ni_660x_attach_pci(struct comedi_device *dev,
-			      struct pci_dev *pcidev);
-static void ni_660x_detach(struct comedi_device *dev);
-static void init_tio_chip(struct comedi_device *dev, int chipset);
-static void ni_660x_select_pfi_output(struct comedi_device *dev,
-				      unsigned pfi_channel,
-				      unsigned output_select);
-
-static struct comedi_driver ni_660x_driver = {
-	.driver_name = "ni_660x",
-	.module = THIS_MODULE,
-	.attach_pci = ni_660x_attach_pci,
-	.detach = ni_660x_detach,
-};
-
-static int __devinit ni_660x_pci_probe(struct pci_dev *dev,
-				       const struct pci_device_id *ent)
-{
-	return comedi_pci_auto_config(dev, &ni_660x_driver);
-}
-
-static void __devexit ni_660x_pci_remove(struct pci_dev *dev)
-{
-	comedi_pci_auto_unconfig(dev);
-}
-
-static struct pci_driver ni_660x_pci_driver = {
-	.name = "ni_660x",
-	.id_table = ni_660x_pci_table,
-	.probe = ni_660x_pci_probe,
-	.remove = __devexit_p(ni_660x_pci_remove)
-};
-module_comedi_pci_driver(ni_660x_driver, ni_660x_pci_driver);
-
-static int ni_660x_set_pfi_routing(struct comedi_device *dev, unsigned chan,
-				   unsigned source);
-
-/* Possible instructions for a GPCT */
-static int ni_660x_GPCT_rinsn(struct comedi_device *dev,
-			      struct comedi_subdevice *s,
-			      struct comedi_insn *insn, unsigned int *data);
-static int ni_660x_GPCT_insn_config(struct comedi_device *dev,
-				    struct comedi_subdevice *s,
-				    struct comedi_insn *insn,
-				    unsigned int *data);
-static int ni_660x_GPCT_winsn(struct comedi_device *dev,
-			      struct comedi_subdevice *s,
-			      struct comedi_insn *insn, unsigned int *data);
-
-/* Possible instructions for Digital IO */
-static int ni_660x_dio_insn_config(struct comedi_device *dev,
-				   struct comedi_subdevice *s,
-				   struct comedi_insn *insn,
-				   unsigned int *data);
-static int ni_660x_dio_insn_bits(struct comedi_device *dev,
-				 struct comedi_subdevice *s,
-				 struct comedi_insn *insn, unsigned int *data);
-
 static inline unsigned ni_660x_num_counters(struct comedi_device *dev)
 {
 	return board(dev)->n_chips * counters_per_chip;
@@ -1055,150 +987,6 @@ ni_660x_find_boardinfo(struct pci_dev *pcidev)
 	return NULL;
 }
 
-static int __devinit ni_660x_attach_pci(struct comedi_device *dev,
-					struct pci_dev *pcidev)
-{
-	struct ni_660x_private *devpriv;
-	struct comedi_subdevice *s;
-	int ret;
-	unsigned i;
-	unsigned global_interrupt_config_bits;
-
-	ret = ni_660x_allocate_private(dev);
-	if (ret < 0)
-		return ret;
-	devpriv = dev->private;
-
-	dev->board_ptr = ni_660x_find_boardinfo(pcidev);
-	if (!dev->board_ptr)
-		return -ENODEV;
-	devpriv->mite = mite_alloc(pcidev);
-	if (!devpriv->mite)
-		return -ENOMEM;
-
-	dev->board_name = board(dev)->name;
-
-	ret = mite_setup2(devpriv->mite, 1);
-	if (ret < 0) {
-		dev_warn(dev->class_dev, "error setting up mite\n");
-		return ret;
-	}
-
-	ret = ni_660x_alloc_mite_rings(dev);
-	if (ret < 0)
-		return ret;
-
-	ret = comedi_alloc_subdevices(dev, 2 + NI_660X_MAX_NUM_COUNTERS);
-	if (ret)
-		return ret;
-
-	s = &dev->subdevices[0];
-	/* Old GENERAL-PURPOSE COUNTER/TIME (GPCT) subdevice, no longer used */
-	s->type = COMEDI_SUBD_UNUSED;
-
-	s = &dev->subdevices[NI_660X_DIO_SUBDEV];
-	/* DIGITAL I/O SUBDEVICE */
-	s->type = COMEDI_SUBD_DIO;
-	s->subdev_flags = SDF_READABLE | SDF_WRITABLE;
-	s->n_chan = NUM_PFI_CHANNELS;
-	s->maxdata = 1;
-	s->range_table = &range_digital;
-	s->insn_bits = ni_660x_dio_insn_bits;
-	s->insn_config = ni_660x_dio_insn_config;
-	s->io_bits = 0;		/* all bits default to input */
-	/*  we use the ioconfig registers to control dio direction, so zero
-	output enables in stc dio control reg */
-	ni_660x_write_register(dev, 0, 0, STCDIOControl);
-
-	devpriv->counter_dev = ni_gpct_device_construct(dev,
-						     &ni_gpct_write_register,
-						     &ni_gpct_read_register,
-						     ni_gpct_variant_660x,
-						     ni_660x_num_counters
-						     (dev));
-	if (devpriv->counter_dev == NULL)
-		return -ENOMEM;
-	for (i = 0; i < NI_660X_MAX_NUM_COUNTERS; ++i) {
-		s = &dev->subdevices[NI_660X_GPCT_SUBDEV(i)];
-		if (i < ni_660x_num_counters(dev)) {
-			s->type = COMEDI_SUBD_COUNTER;
-			s->subdev_flags =
-			    SDF_READABLE | SDF_WRITABLE | SDF_LSAMPL |
-			    SDF_CMD_READ /* | SDF_CMD_WRITE */ ;
-			s->n_chan = 3;
-			s->maxdata = 0xffffffff;
-			s->insn_read = ni_660x_GPCT_rinsn;
-			s->insn_write = ni_660x_GPCT_winsn;
-			s->insn_config = ni_660x_GPCT_insn_config;
-			s->do_cmd = &ni_660x_cmd;
-			s->len_chanlist = 1;
-			s->do_cmdtest = &ni_660x_cmdtest;
-			s->cancel = &ni_660x_cancel;
-			s->poll = &ni_660x_input_poll;
-			s->async_dma_dir = DMA_BIDIRECTIONAL;
-			s->buf_change = &ni_660x_buf_change;
-			s->private = &devpriv->counter_dev->counters[i];
-
-			devpriv->counter_dev->counters[i].chip_index =
-			    i / counters_per_chip;
-			devpriv->counter_dev->counters[i].counter_index =
-			    i % counters_per_chip;
-		} else {
-			s->type = COMEDI_SUBD_UNUSED;
-		}
-	}
-	for (i = 0; i < board(dev)->n_chips; ++i)
-		init_tio_chip(dev, i);
-
-	for (i = 0; i < ni_660x_num_counters(dev); ++i)
-		ni_tio_init_counter(&devpriv->counter_dev->counters[i]);
-
-	for (i = 0; i < NUM_PFI_CHANNELS; ++i) {
-		if (i < min_counter_pfi_chan)
-			ni_660x_set_pfi_routing(dev, i, pfi_output_select_do);
-		else
-			ni_660x_set_pfi_routing(dev, i,
-						pfi_output_select_counter);
-		ni_660x_select_pfi_output(dev, i, pfi_output_select_high_Z);
-	}
-	/* to be safe, set counterswap bits on tio chips after all the counter
-	   outputs have been set to high impedance mode */
-	for (i = 0; i < board(dev)->n_chips; ++i)
-		set_tio_counterswap(dev, i);
-
-	ret = request_irq(mite_irq(devpriv->mite), ni_660x_interrupt,
-			  IRQF_SHARED, "ni_660x", dev);
-	if (ret < 0) {
-		dev_warn(dev->class_dev, " irq not available\n");
-		return ret;
-	}
-	dev->irq = mite_irq(devpriv->mite);
-	global_interrupt_config_bits = Global_Int_Enable_Bit;
-	if (board(dev)->n_chips > 1)
-		global_interrupt_config_bits |= Cascade_Int_Enable_Bit;
-	ni_660x_write_register(dev, 0, global_interrupt_config_bits,
-			       GlobalInterruptConfigRegister);
-	dev_info(dev->class_dev, "ni_660x: %s attached\n", dev->board_name);
-	return 0;
-}
-
-static void ni_660x_detach(struct comedi_device *dev)
-{
-	struct ni_660x_private *devpriv = dev->private;
-
-	if (dev->irq)
-		free_irq(dev->irq, dev);
-	if (devpriv) {
-		if (devpriv->counter_dev)
-			ni_gpct_device_destroy(devpriv->counter_dev);
-		if (devpriv->mite) {
-			ni_660x_free_mite_rings(dev);
-			mite_unsetup(devpriv->mite);
-			mite_free(devpriv->mite);
-		}
-	}
-}
-
 static int
 ni_660x_GPCT_rinsn(struct comedi_device *dev, struct comedi_subdevice *s,
 		   struct comedi_insn *insn, unsigned int *data)
@@ -1390,6 +1178,185 @@ static int ni_660x_dio_insn_config(struct comedi_device *dev,
 	return 0;
 }
 
+static int __devinit ni_660x_attach_pci(struct comedi_device *dev,
+					struct pci_dev *pcidev)
+{
+	struct ni_660x_private *devpriv;
+	struct comedi_subdevice *s;
+	int ret;
+	unsigned i;
+	unsigned global_interrupt_config_bits;
+
+	ret = ni_660x_allocate_private(dev);
+	if (ret < 0)
+		return ret;
+	devpriv = dev->private;
+
+	dev->board_ptr = ni_660x_find_boardinfo(pcidev);
+	if (!dev->board_ptr)
+		return -ENODEV;
+	devpriv->mite = mite_alloc(pcidev);
+	if (!devpriv->mite)
+		return -ENOMEM;
+
+	dev->board_name = board(dev)->name;
+
+	ret = mite_setup2(devpriv->mite, 1);
+	if (ret < 0) {
+		dev_warn(dev->class_dev, "error setting up mite\n");
+		return ret;
+	}
+
+	ret = ni_660x_alloc_mite_rings(dev);
+	if (ret < 0)
+		return ret;
+
+	ret = comedi_alloc_subdevices(dev, 2 + NI_660X_MAX_NUM_COUNTERS);
+	if (ret)
+		return ret;
+
+	s = &dev->subdevices[0];
+	/* Old GENERAL-PURPOSE COUNTER/TIME (GPCT) subdevice, no longer used */
+	s->type = COMEDI_SUBD_UNUSED;
+
+	s = &dev->subdevices[NI_660X_DIO_SUBDEV];
+	/* DIGITAL I/O SUBDEVICE */
+	s->type = COMEDI_SUBD_DIO;
+	s->subdev_flags = SDF_READABLE | SDF_WRITABLE;
+	s->n_chan = NUM_PFI_CHANNELS;
+	s->maxdata = 1;
+	s->range_table = &range_digital;
+	s->insn_bits = ni_660x_dio_insn_bits;
+	s->insn_config = ni_660x_dio_insn_config;
+	s->io_bits = 0;		/* all bits default to input */
+	/*  we use the ioconfig registers to control dio direction, so zero
+	output enables in stc dio control reg */
+	ni_660x_write_register(dev, 0, 0, STCDIOControl);
+
+	devpriv->counter_dev = ni_gpct_device_construct(dev,
+						     &ni_gpct_write_register,
+						     &ni_gpct_read_register,
+						     ni_gpct_variant_660x,
+						     ni_660x_num_counters
+						     (dev));
+	if (devpriv->counter_dev == NULL)
+		return -ENOMEM;
+	for (i = 0; i < NI_660X_MAX_NUM_COUNTERS; ++i) {
+		s = &dev->subdevices[NI_660X_GPCT_SUBDEV(i)];
+		if (i < ni_660x_num_counters(dev)) {
+			s->type = COMEDI_SUBD_COUNTER;
+			s->subdev_flags =
+			    SDF_READABLE | SDF_WRITABLE | SDF_LSAMPL |
+			    SDF_CMD_READ /* | SDF_CMD_WRITE */ ;
+			s->n_chan = 3;
+			s->maxdata = 0xffffffff;
+			s->insn_read = ni_660x_GPCT_rinsn;
+			s->insn_write = ni_660x_GPCT_winsn;
+			s->insn_config = ni_660x_GPCT_insn_config;
+			s->do_cmd = &ni_660x_cmd;
+			s->len_chanlist = 1;
+			s->do_cmdtest = &ni_660x_cmdtest;
+			s->cancel = &ni_660x_cancel;
+			s->poll = &ni_660x_input_poll;
+			s->async_dma_dir = DMA_BIDIRECTIONAL;
+			s->buf_change = &ni_660x_buf_change;
+			s->private = &devpriv->counter_dev->counters[i];
+
+			devpriv->counter_dev->counters[i].chip_index =
+			    i / counters_per_chip;
+			devpriv->counter_dev->counters[i].counter_index =
+			    i % counters_per_chip;
+		} else {
+			s->type = COMEDI_SUBD_UNUSED;
+		}
+	}
+	for (i = 0; i < board(dev)->n_chips; ++i)
+		init_tio_chip(dev, i);
+
+	for (i = 0; i < ni_660x_num_counters(dev); ++i)
+		ni_tio_init_counter(&devpriv->counter_dev->counters[i]);
+
+	for (i = 0; i < NUM_PFI_CHANNELS; ++i) {
+		if (i < min_counter_pfi_chan)
+			ni_660x_set_pfi_routing(dev, i, pfi_output_select_do);
+		else
+			ni_660x_set_pfi_routing(dev, i,
+						pfi_output_select_counter);
+		ni_660x_select_pfi_output(dev, i, pfi_output_select_high_Z);
+	}
+	/* to be safe, set counterswap bits on tio chips after all the counter
+	   outputs have been set to high impedance mode */
+	for (i = 0; i < board(dev)->n_chips; ++i)
+		set_tio_counterswap(dev, i);
+
+	ret = request_irq(mite_irq(devpriv->mite), ni_660x_interrupt,
+			  IRQF_SHARED, "ni_660x", dev);
+	if (ret < 0) {
+		dev_warn(dev->class_dev, " irq not available\n");
+		return ret;
+	}
+	dev->irq = mite_irq(devpriv->mite);
+	global_interrupt_config_bits = Global_Int_Enable_Bit;
+	if (board(dev)->n_chips > 1)
+		global_interrupt_config_bits |= Cascade_Int_Enable_Bit;
+	ni_660x_write_register(dev, 0, global_interrupt_config_bits,
+			       GlobalInterruptConfigRegister);
+	dev_info(dev->class_dev, "ni_660x: %s attached\n", dev->board_name);
+	return 0;
+}
+
+static void ni_660x_detach(struct comedi_device *dev)
+{
+	struct ni_660x_private *devpriv = dev->private;
+
+	if (dev->irq)
+		free_irq(dev->irq, dev);
+	if (devpriv) {
+		if (devpriv->counter_dev)
+			ni_gpct_device_destroy(devpriv->counter_dev);
+		if (devpriv->mite) {
+			ni_660x_free_mite_rings(dev);
+			mite_unsetup(devpriv->mite);
+			mite_free(devpriv->mite);
+		}
+	}
+}
+
+static struct comedi_driver ni_660x_driver = {
+	.driver_name	= "ni_660x",
+	.module		= THIS_MODULE,
+	.attach_pci	= ni_660x_attach_pci,
+	.detach		= ni_660x_detach,
+};
+
+static int __devinit ni_660x_pci_probe(struct pci_dev *dev,
+				       const struct pci_device_id *ent)
+{
+	return comedi_pci_auto_config(dev, &ni_660x_driver);
+}
+
+static void __devexit ni_660x_pci_remove(struct pci_dev *dev)
+{
+	comedi_pci_auto_unconfig(dev);
+}
+
+static DEFINE_PCI_DEVICE_TABLE(ni_660x_pci_table) = {
+	{PCI_DEVICE(PCI_VENDOR_ID_NI, 0x2c60)},
+	{PCI_DEVICE(PCI_VENDOR_ID_NI, 0x1310)},
+	{PCI_DEVICE(PCI_VENDOR_ID_NI, 0x1360)},
+	{PCI_DEVICE(PCI_VENDOR_ID_NI, 0x2cc0)},
+	{0}
+};
+MODULE_DEVICE_TABLE(pci, ni_660x_pci_table);
+
+static struct pci_driver ni_660x_pci_driver = {
+	.name		= "ni_660x",
+	.id_table	= ni_660x_pci_table,
+	.probe		= ni_660x_pci_probe,
+	.remove		= __devexit_p(ni_660x_pci_remove),
+};
+module_comedi_pci_driver(ni_660x_driver, ni_660x_pci_driver);
+
 MODULE_AUTHOR("Comedi http://www.comedi.org");
 MODULE_DESCRIPTION("Comedi low-level driver");
 MODULE_LICENSE("GPL");

commit 7fc465b106b40a598d83a0c98d0e8c2a1b4653ff
Author: H Hartley Sweeten <hartleys@visionengravers.com>
Date:   Tue Oct 23 13:43:11 2012 -0700

    staging: comedi: auto-config drivers do not need to set hw_dev
    
    The comedi core now sets the 'hw_dev' pointer in the function
    comedi_auto_config_helper() before calling the auto attach
    function in the driver.
    
    Remove the now unnecessary call to comedi_set_hw_dev() in the
    drivers that use the auto-config attach mechanism.
    
    Signed-off-by: H Hartley Sweeten <hsweeten@visionengravers.com>
    Cc: Ian Abbott <abbotti@mev.co.uk>
    Cc: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/drivers/ni_660x.c b/drivers/staging/comedi/drivers/ni_660x.c
index 3cff208de8a3..5e1d8308faa9 100644
--- a/drivers/staging/comedi/drivers/ni_660x.c
+++ b/drivers/staging/comedi/drivers/ni_660x.c
@@ -1083,7 +1083,7 @@ static int __devinit ni_660x_attach_pci(struct comedi_device *dev,
 		dev_warn(dev->class_dev, "error setting up mite\n");
 		return ret;
 	}
-	comedi_set_hw_dev(dev, &devpriv->mite->pcidev->dev);
+
 	ret = ni_660x_alloc_mite_rings(dev);
 	if (ret < 0)
 		return ret;

commit c34fa261b0ac3a862ccd3f71ee55a16b920dfc83
Author: H Hartley Sweeten <hartleys@visionengravers.com>
Date:   Tue Oct 23 13:22:37 2012 -0700

    staging: comedi: remove inline alloc_private()
    
    This inline function has a very generic name and it's only a
    wrapper around a simple kzalloc(). Since the inline function
    does not save any lines-of-code, instead of renaming it just
    remove it and do the kzalloc() directly.
    
    Signed-off-by: H Hartley Sweeten <hsweeten@visionengravers.com>
    Cc: Ian Abbott <abbotti@mev.co.uk>
    Cc: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/drivers/ni_660x.c b/drivers/staging/comedi/drivers/ni_660x.c
index d86840727449..3cff208de8a3 100644
--- a/drivers/staging/comedi/drivers/ni_660x.c
+++ b/drivers/staging/comedi/drivers/ni_660x.c
@@ -996,13 +996,12 @@ static int ni_660x_buf_change(struct comedi_device *dev,
 static int ni_660x_allocate_private(struct comedi_device *dev)
 {
 	struct ni_660x_private *devpriv;
-	int retval;
 	unsigned i;
 
-	retval = alloc_private(dev, sizeof(*devpriv));
-	if (retval)
-		return retval;
-	devpriv = dev->private;
+	devpriv = kzalloc(sizeof(*devpriv), GFP_KERNEL);
+	if (!devpriv)
+		return -ENOMEM;
+	dev->private = devpriv;
 
 	spin_lock_init(&devpriv->mite_channel_lock);
 	spin_lock_init(&devpriv->interrupt_lock);

commit 8c12ec2616d18e9c6f6a6884a8738586be5a15d9
Author: H Hartley Sweeten <hartleys@visionengravers.com>
Date:   Mon Oct 15 10:14:32 2012 -0700

    staging: comedi: ni_660x: remove inline private() function
    
    The inline private() function simply returns the dev->private pointer
    to the private data.
    
    Remove the inline function and just use a local variable where the
    private data is used.
    
    Signed-off-by: H Hartley Sweeten <hsweeten@visionengravers.com>
    Cc: Ian Abbott <abbotti@mev.co.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/drivers/ni_660x.c b/drivers/staging/comedi/drivers/ni_660x.c
index df2f3b0bab48..d86840727449 100644
--- a/drivers/staging/comedi/drivers/ni_660x.c
+++ b/drivers/staging/comedi/drivers/ni_660x.c
@@ -443,11 +443,6 @@ struct ni_660x_private {
 	unsigned short pfi_output_selects[NUM_PFI_CHANNELS];
 };
 
-static inline struct ni_660x_private *private(struct comedi_device *dev)
-{
-	return dev->private;
-}
-
 /* initialized in ni_660x_attach_pci() */
 static inline const struct ni_660x_board *board(struct comedi_device *dev)
 {
@@ -737,8 +732,9 @@ static inline void ni_660x_write_register(struct comedi_device *dev,
 					  unsigned chip_index, unsigned bits,
 					  enum NI_660x_Register reg)
 {
+	struct ni_660x_private *devpriv = dev->private;
 	void __iomem *write_address =
-	    private(dev)->mite->daq_io_addr + GPCT_OFFSET[chip_index] +
+	    devpriv->mite->daq_io_addr + GPCT_OFFSET[chip_index] +
 	    registerData[reg].offset;
 
 	switch (registerData[reg].size) {
@@ -758,8 +754,9 @@ static inline unsigned ni_660x_read_register(struct comedi_device *dev,
 					     unsigned chip_index,
 					     enum NI_660x_Register reg)
 {
+	struct ni_660x_private *devpriv = dev->private;
 	void __iomem *read_address =
-	    private(dev)->mite->daq_io_addr + GPCT_OFFSET[chip_index] +
+	    devpriv->mite->daq_io_addr + GPCT_OFFSET[chip_index] +
 	    registerData[reg].offset;
 
 	switch (registerData[reg].size) {
@@ -806,54 +803,56 @@ static inline void ni_660x_set_dma_channel(struct comedi_device *dev,
 					   unsigned mite_channel,
 					   struct ni_gpct *counter)
 {
+	struct ni_660x_private *devpriv = dev->private;
 	unsigned long flags;
-	spin_lock_irqsave(&private(dev)->soft_reg_copy_lock, flags);
-	private(dev)->dma_configuration_soft_copies[counter->chip_index] &=
+
+	spin_lock_irqsave(&devpriv->soft_reg_copy_lock, flags);
+	devpriv->dma_configuration_soft_copies[counter->chip_index] &=
 	    ~dma_select_mask(mite_channel);
-	private(dev)->dma_configuration_soft_copies[counter->chip_index] |=
+	devpriv->dma_configuration_soft_copies[counter->chip_index] |=
 	    dma_select_bits(mite_channel,
 			    dma_selection_counter(counter->counter_index));
 	ni_660x_write_register(dev, counter->chip_index,
-			       private(dev)->
-			       dma_configuration_soft_copies
+			       devpriv->dma_configuration_soft_copies
 			       [counter->chip_index] |
 			       dma_reset_bit(mite_channel), DMAConfigRegister);
 	mmiowb();
-	spin_unlock_irqrestore(&private(dev)->soft_reg_copy_lock, flags);
+	spin_unlock_irqrestore(&devpriv->soft_reg_copy_lock, flags);
 }
 
 static inline void ni_660x_unset_dma_channel(struct comedi_device *dev,
 					     unsigned mite_channel,
 					     struct ni_gpct *counter)
 {
+	struct ni_660x_private *devpriv = dev->private;
 	unsigned long flags;
-	spin_lock_irqsave(&private(dev)->soft_reg_copy_lock, flags);
-	private(dev)->dma_configuration_soft_copies[counter->chip_index] &=
+
+	spin_lock_irqsave(&devpriv->soft_reg_copy_lock, flags);
+	devpriv->dma_configuration_soft_copies[counter->chip_index] &=
 	    ~dma_select_mask(mite_channel);
-	private(dev)->dma_configuration_soft_copies[counter->chip_index] |=
+	devpriv->dma_configuration_soft_copies[counter->chip_index] |=
 	    dma_select_bits(mite_channel, dma_selection_none);
 	ni_660x_write_register(dev, counter->chip_index,
-			       private(dev)->
-			       dma_configuration_soft_copies
+			       devpriv->dma_configuration_soft_copies
 			       [counter->chip_index], DMAConfigRegister);
 	mmiowb();
-	spin_unlock_irqrestore(&private(dev)->soft_reg_copy_lock, flags);
+	spin_unlock_irqrestore(&devpriv->soft_reg_copy_lock, flags);
 }
 
 static int ni_660x_request_mite_channel(struct comedi_device *dev,
 					struct ni_gpct *counter,
 					enum comedi_io_direction direction)
 {
+	struct ni_660x_private *devpriv = dev->private;
 	unsigned long flags;
 	struct mite_channel *mite_chan;
 
-	spin_lock_irqsave(&private(dev)->mite_channel_lock, flags);
+	spin_lock_irqsave(&devpriv->mite_channel_lock, flags);
 	BUG_ON(counter->mite_chan);
-	mite_chan =
-	    mite_request_channel(private(dev)->mite, mite_ring(private(dev),
-							       counter));
+	mite_chan = mite_request_channel(devpriv->mite,
+					 mite_ring(devpriv, counter));
 	if (mite_chan == NULL) {
-		spin_unlock_irqrestore(&private(dev)->mite_channel_lock, flags);
+		spin_unlock_irqrestore(&devpriv->mite_channel_lock, flags);
 		comedi_error(dev,
 			     "failed to reserve mite dma channel for counter.");
 		return -EBUSY;
@@ -861,16 +860,17 @@ static int ni_660x_request_mite_channel(struct comedi_device *dev,
 	mite_chan->dir = direction;
 	ni_tio_set_mite_channel(counter, mite_chan);
 	ni_660x_set_dma_channel(dev, mite_chan->channel, counter);
-	spin_unlock_irqrestore(&private(dev)->mite_channel_lock, flags);
+	spin_unlock_irqrestore(&devpriv->mite_channel_lock, flags);
 	return 0;
 }
 
 static void ni_660x_release_mite_channel(struct comedi_device *dev,
 					 struct ni_gpct *counter)
 {
+	struct ni_660x_private *devpriv = dev->private;
 	unsigned long flags;
 
-	spin_lock_irqsave(&private(dev)->mite_channel_lock, flags);
+	spin_lock_irqsave(&devpriv->mite_channel_lock, flags);
 	if (counter->mite_chan) {
 		struct mite_channel *mite_chan = counter->mite_chan;
 
@@ -878,7 +878,7 @@ static void ni_660x_release_mite_channel(struct comedi_device *dev,
 		ni_tio_set_mite_channel(counter, NULL);
 		mite_release_channel(mite_chan);
 	}
-	spin_unlock_irqrestore(&private(dev)->mite_channel_lock, flags);
+	spin_unlock_irqrestore(&devpriv->mite_channel_lock, flags);
 }
 
 static int ni_660x_cmd(struct comedi_device *dev, struct comedi_subdevice *s)
@@ -947,6 +947,7 @@ static void ni_660x_handle_gpct_interrupt(struct comedi_device *dev,
 static irqreturn_t ni_660x_interrupt(int irq, void *d)
 {
 	struct comedi_device *dev = d;
+	struct ni_660x_private *devpriv = dev->private;
 	struct comedi_subdevice *s;
 	unsigned i;
 	unsigned long flags;
@@ -954,24 +955,26 @@ static irqreturn_t ni_660x_interrupt(int irq, void *d)
 	if (dev->attached == 0)
 		return IRQ_NONE;
 	/* lock to avoid race with comedi_poll */
-	spin_lock_irqsave(&private(dev)->interrupt_lock, flags);
+	spin_lock_irqsave(&devpriv->interrupt_lock, flags);
 	smp_mb();
 	for (i = 0; i < ni_660x_num_counters(dev); ++i) {
 		s = &dev->subdevices[NI_660X_GPCT_SUBDEV(i)];
 		ni_660x_handle_gpct_interrupt(dev, s);
 	}
-	spin_unlock_irqrestore(&private(dev)->interrupt_lock, flags);
+	spin_unlock_irqrestore(&devpriv->interrupt_lock, flags);
 	return IRQ_HANDLED;
 }
 
 static int ni_660x_input_poll(struct comedi_device *dev,
 			      struct comedi_subdevice *s)
 {
+	struct ni_660x_private *devpriv = dev->private;
 	unsigned long flags;
+
 	/* lock to avoid race with comedi_poll */
-	spin_lock_irqsave(&private(dev)->interrupt_lock, flags);
+	spin_lock_irqsave(&devpriv->interrupt_lock, flags);
 	mite_sync_input_dma(subdev_to_counter(s)->mite_chan, s->async);
-	spin_unlock_irqrestore(&private(dev)->interrupt_lock, flags);
+	spin_unlock_irqrestore(&devpriv->interrupt_lock, flags);
 	return comedi_buf_read_n_available(s->async);
 }
 
@@ -979,9 +982,10 @@ static int ni_660x_buf_change(struct comedi_device *dev,
 			      struct comedi_subdevice *s,
 			      unsigned long new_size)
 {
+	struct ni_660x_private *devpriv = dev->private;
 	int ret;
 
-	ret = mite_buf_change(mite_ring(private(dev), subdev_to_counter(s)),
+	ret = mite_buf_change(mite_ring(devpriv, subdev_to_counter(s)),
 			      s->async);
 	if (ret < 0)
 		return ret;
@@ -991,32 +995,35 @@ static int ni_660x_buf_change(struct comedi_device *dev,
 
 static int ni_660x_allocate_private(struct comedi_device *dev)
 {
+	struct ni_660x_private *devpriv;
 	int retval;
 	unsigned i;
 
-	retval = alloc_private(dev, sizeof(struct ni_660x_private));
-	if (retval < 0)
+	retval = alloc_private(dev, sizeof(*devpriv));
+	if (retval)
 		return retval;
+	devpriv = dev->private;
 
-	spin_lock_init(&private(dev)->mite_channel_lock);
-	spin_lock_init(&private(dev)->interrupt_lock);
-	spin_lock_init(&private(dev)->soft_reg_copy_lock);
+	spin_lock_init(&devpriv->mite_channel_lock);
+	spin_lock_init(&devpriv->interrupt_lock);
+	spin_lock_init(&devpriv->soft_reg_copy_lock);
 	for (i = 0; i < NUM_PFI_CHANNELS; ++i)
-		private(dev)->pfi_output_selects[i] = pfi_output_select_counter;
+		devpriv->pfi_output_selects[i] = pfi_output_select_counter;
 
 	return 0;
 }
 
 static int ni_660x_alloc_mite_rings(struct comedi_device *dev)
 {
+	struct ni_660x_private *devpriv = dev->private;
 	unsigned i;
 	unsigned j;
 
 	for (i = 0; i < board(dev)->n_chips; ++i) {
 		for (j = 0; j < counters_per_chip; ++j) {
-			private(dev)->mite_rings[i][j] =
-			    mite_alloc_ring(private(dev)->mite);
-			if (private(dev)->mite_rings[i][j] == NULL)
+			devpriv->mite_rings[i][j] =
+			    mite_alloc_ring(devpriv->mite);
+			if (devpriv->mite_rings[i][j] == NULL)
 				return -ENOMEM;
 		}
 	}
@@ -1025,12 +1032,13 @@ static int ni_660x_alloc_mite_rings(struct comedi_device *dev)
 
 static void ni_660x_free_mite_rings(struct comedi_device *dev)
 {
+	struct ni_660x_private *devpriv = dev->private;
 	unsigned i;
 	unsigned j;
 
 	for (i = 0; i < board(dev)->n_chips; ++i) {
 		for (j = 0; j < counters_per_chip; ++j)
-			mite_free_ring(private(dev)->mite_rings[i][j]);
+			mite_free_ring(devpriv->mite_rings[i][j]);
 	}
 }
 
@@ -1051,6 +1059,7 @@ ni_660x_find_boardinfo(struct pci_dev *pcidev)
 static int __devinit ni_660x_attach_pci(struct comedi_device *dev,
 					struct pci_dev *pcidev)
 {
+	struct ni_660x_private *devpriv;
 	struct comedi_subdevice *s;
 	int ret;
 	unsigned i;
@@ -1059,21 +1068,23 @@ static int __devinit ni_660x_attach_pci(struct comedi_device *dev,
 	ret = ni_660x_allocate_private(dev);
 	if (ret < 0)
 		return ret;
+	devpriv = dev->private;
+
 	dev->board_ptr = ni_660x_find_boardinfo(pcidev);
 	if (!dev->board_ptr)
 		return -ENODEV;
-	private(dev)->mite = mite_alloc(pcidev);
-	if (!private(dev)->mite)
+	devpriv->mite = mite_alloc(pcidev);
+	if (!devpriv->mite)
 		return -ENOMEM;
 
 	dev->board_name = board(dev)->name;
 
-	ret = mite_setup2(private(dev)->mite, 1);
+	ret = mite_setup2(devpriv->mite, 1);
 	if (ret < 0) {
 		dev_warn(dev->class_dev, "error setting up mite\n");
 		return ret;
 	}
-	comedi_set_hw_dev(dev, &private(dev)->mite->pcidev->dev);
+	comedi_set_hw_dev(dev, &devpriv->mite->pcidev->dev);
 	ret = ni_660x_alloc_mite_rings(dev);
 	if (ret < 0)
 		return ret;
@@ -1100,13 +1111,13 @@ static int __devinit ni_660x_attach_pci(struct comedi_device *dev,
 	output enables in stc dio control reg */
 	ni_660x_write_register(dev, 0, 0, STCDIOControl);
 
-	private(dev)->counter_dev = ni_gpct_device_construct(dev,
+	devpriv->counter_dev = ni_gpct_device_construct(dev,
 						     &ni_gpct_write_register,
 						     &ni_gpct_read_register,
 						     ni_gpct_variant_660x,
 						     ni_660x_num_counters
 						     (dev));
-	if (private(dev)->counter_dev == NULL)
+	if (devpriv->counter_dev == NULL)
 		return -ENOMEM;
 	for (i = 0; i < NI_660X_MAX_NUM_COUNTERS; ++i) {
 		s = &dev->subdevices[NI_660X_GPCT_SUBDEV(i)];
@@ -1127,11 +1138,11 @@ static int __devinit ni_660x_attach_pci(struct comedi_device *dev,
 			s->poll = &ni_660x_input_poll;
 			s->async_dma_dir = DMA_BIDIRECTIONAL;
 			s->buf_change = &ni_660x_buf_change;
-			s->private = &private(dev)->counter_dev->counters[i];
+			s->private = &devpriv->counter_dev->counters[i];
 
-			private(dev)->counter_dev->counters[i].chip_index =
+			devpriv->counter_dev->counters[i].chip_index =
 			    i / counters_per_chip;
-			private(dev)->counter_dev->counters[i].counter_index =
+			devpriv->counter_dev->counters[i].counter_index =
 			    i % counters_per_chip;
 		} else {
 			s->type = COMEDI_SUBD_UNUSED;
@@ -1141,7 +1152,7 @@ static int __devinit ni_660x_attach_pci(struct comedi_device *dev,
 		init_tio_chip(dev, i);
 
 	for (i = 0; i < ni_660x_num_counters(dev); ++i)
-		ni_tio_init_counter(&private(dev)->counter_dev->counters[i]);
+		ni_tio_init_counter(&devpriv->counter_dev->counters[i]);
 
 	for (i = 0; i < NUM_PFI_CHANNELS; ++i) {
 		if (i < min_counter_pfi_chan)
@@ -1156,13 +1167,13 @@ static int __devinit ni_660x_attach_pci(struct comedi_device *dev,
 	for (i = 0; i < board(dev)->n_chips; ++i)
 		set_tio_counterswap(dev, i);
 
-	ret = request_irq(mite_irq(private(dev)->mite), ni_660x_interrupt,
+	ret = request_irq(mite_irq(devpriv->mite), ni_660x_interrupt,
 			  IRQF_SHARED, "ni_660x", dev);
 	if (ret < 0) {
 		dev_warn(dev->class_dev, " irq not available\n");
 		return ret;
 	}
-	dev->irq = mite_irq(private(dev)->mite);
+	dev->irq = mite_irq(devpriv->mite);
 	global_interrupt_config_bits = Global_Int_Enable_Bit;
 	if (board(dev)->n_chips > 1)
 		global_interrupt_config_bits |= Cascade_Int_Enable_Bit;
@@ -1174,15 +1185,17 @@ static int __devinit ni_660x_attach_pci(struct comedi_device *dev,
 
 static void ni_660x_detach(struct comedi_device *dev)
 {
+	struct ni_660x_private *devpriv = dev->private;
+
 	if (dev->irq)
 		free_irq(dev->irq, dev);
-	if (dev->private) {
-		if (private(dev)->counter_dev)
-			ni_gpct_device_destroy(private(dev)->counter_dev);
-		if (private(dev)->mite) {
+	if (devpriv) {
+		if (devpriv->counter_dev)
+			ni_gpct_device_destroy(devpriv->counter_dev);
+		if (devpriv->mite) {
 			ni_660x_free_mite_rings(dev);
-			mite_unsetup(private(dev)->mite);
-			mite_free(private(dev)->mite);
+			mite_unsetup(devpriv->mite);
+			mite_free(devpriv->mite);
 		}
 	}
 }
@@ -1196,17 +1209,17 @@ ni_660x_GPCT_rinsn(struct comedi_device *dev, struct comedi_subdevice *s,
 
 static void init_tio_chip(struct comedi_device *dev, int chipset)
 {
+	struct ni_660x_private *devpriv = dev->private;
 	unsigned i;
 
 	/*  init dma configuration register */
-	private(dev)->dma_configuration_soft_copies[chipset] = 0;
+	devpriv->dma_configuration_soft_copies[chipset] = 0;
 	for (i = 0; i < MAX_DMA_CHANNEL; ++i) {
-		private(dev)->dma_configuration_soft_copies[chipset] |=
+		devpriv->dma_configuration_soft_copies[chipset] |=
 		    dma_select_bits(i, dma_selection_none) & dma_select_mask(i);
 	}
 	ni_660x_write_register(dev, chipset,
-			       private(dev)->
-			       dma_configuration_soft_copies[chipset],
+			       devpriv->dma_configuration_soft_copies[chipset],
 			       DMAConfigRegister);
 	for (i = 0; i < NUM_PFI_CHANNELS; ++i)
 		ni_660x_write_register(dev, chipset, 0, IOConfigReg(i));
@@ -1294,6 +1307,8 @@ static void ni_660x_select_pfi_output(struct comedi_device *dev,
 static int ni_660x_set_pfi_routing(struct comedi_device *dev, unsigned chan,
 				   unsigned source)
 {
+	struct ni_660x_private *devpriv = dev->private;
+
 	if (source > num_pfi_output_selects)
 		return -EINVAL;
 	if (source == pfi_output_select_high_Z)
@@ -1307,19 +1322,20 @@ static int ni_660x_set_pfi_routing(struct comedi_device *dev, unsigned chan,
 	}
 	BUG_ON(chan >= NUM_PFI_CHANNELS);
 
-	private(dev)->pfi_output_selects[chan] = source;
-	if (private(dev)->pfi_direction_bits & (((uint64_t) 1) << chan))
+	devpriv->pfi_output_selects[chan] = source;
+	if (devpriv->pfi_direction_bits & (((uint64_t) 1) << chan))
 		ni_660x_select_pfi_output(dev, chan,
-					  private(dev)->
-					  pfi_output_selects[chan]);
+					  devpriv->pfi_output_selects[chan]);
 	return 0;
 }
 
 static unsigned ni_660x_get_pfi_routing(struct comedi_device *dev,
 					unsigned chan)
 {
+	struct ni_660x_private *devpriv = dev->private;
+
 	BUG_ON(chan >= NUM_PFI_CHANNELS);
-	return private(dev)->pfi_output_selects[chan];
+	return devpriv->pfi_output_selects[chan];
 }
 
 static void ni660x_config_filter(struct comedi_device *dev,
@@ -1336,6 +1352,7 @@ static int ni_660x_dio_insn_config(struct comedi_device *dev,
 				   struct comedi_subdevice *s,
 				   struct comedi_insn *insn, unsigned int *data)
 {
+	struct ni_660x_private *devpriv = dev->private;
 	int chan = CR_CHAN(insn->chanspec);
 
 	/* The input or output configuration of each digital line is
@@ -1345,18 +1362,17 @@ static int ni_660x_dio_insn_config(struct comedi_device *dev,
 
 	switch (data[0]) {
 	case INSN_CONFIG_DIO_OUTPUT:
-		private(dev)->pfi_direction_bits |= ((uint64_t) 1) << chan;
+		devpriv->pfi_direction_bits |= ((uint64_t) 1) << chan;
 		ni_660x_select_pfi_output(dev, chan,
-					  private(dev)->
-					  pfi_output_selects[chan]);
+					  devpriv->pfi_output_selects[chan]);
 		break;
 	case INSN_CONFIG_DIO_INPUT:
-		private(dev)->pfi_direction_bits &= ~(((uint64_t) 1) << chan);
+		devpriv->pfi_direction_bits &= ~(((uint64_t) 1) << chan);
 		ni_660x_select_pfi_output(dev, chan, pfi_output_select_high_Z);
 		break;
 	case INSN_CONFIG_DIO_QUERY:
 		data[1] =
-		    (private(dev)->pfi_direction_bits &
+		    (devpriv->pfi_direction_bits &
 		     (((uint64_t) 1) << chan)) ? COMEDI_OUTPUT : COMEDI_INPUT;
 		return 0;
 	case INSN_CONFIG_SET_ROUTING:

commit ce48a91139eaafba2ed0f917e5ca744f20c28c47
Author: H Hartley Sweeten <hartleys@visionengravers.com>
Date:   Mon Sep 17 13:14:24 2012 -0700

    staging: comedi: ni_660x: local functions should not be exported
    
    The function ni_660x_release_mite_channel() is only referenced in
    this file. Make it static.
    
    Signed-off-by: H Hartley Sweeten <hsweeten@visionengravers.com>
    Cc: Ian Abbott <abbotti@mev.co.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/drivers/ni_660x.c b/drivers/staging/comedi/drivers/ni_660x.c
index d3c8e6a513ea..df2f3b0bab48 100644
--- a/drivers/staging/comedi/drivers/ni_660x.c
+++ b/drivers/staging/comedi/drivers/ni_660x.c
@@ -865,8 +865,8 @@ static int ni_660x_request_mite_channel(struct comedi_device *dev,
 	return 0;
 }
 
-void ni_660x_release_mite_channel(struct comedi_device *dev,
-				  struct ni_gpct *counter)
+static void ni_660x_release_mite_channel(struct comedi_device *dev,
+					 struct ni_gpct *counter)
 {
 	unsigned long flags;
 

commit 05ac0635a52836face9acadbc4ffe25ed2f6828a
Author: Ian Abbott <abbotti@mev.co.uk>
Date:   Fri Sep 14 17:34:28 2012 +0100

    staging: comedi: ni_660x: use mite_alloc()
    
    Allocate `struct mite_device` dynamically instead of searching for
    one on the `mite_devices` list constructed by the "mite" module.
    
    Signed-off-by: Ian Abbott <abbotti@mev.co.uk>
    Reviewed-by: H Hartley Sweeten <hsweeten@visionengravers.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/drivers/ni_660x.c b/drivers/staging/comedi/drivers/ni_660x.c
index 3b125a6c9fb6..d3c8e6a513ea 100644
--- a/drivers/staging/comedi/drivers/ni_660x.c
+++ b/drivers/staging/comedi/drivers/ni_660x.c
@@ -1034,20 +1034,6 @@ static void ni_660x_free_mite_rings(struct comedi_device *dev)
 	}
 }
 
-/* FIXME: remove this when dynamic MITE allocation implemented. */
-static struct mite_struct *ni_660x_find_mite(struct pci_dev *pcidev)
-{
-	struct mite_struct *mite;
-
-	for (mite = mite_devices; mite; mite = mite->next) {
-		if (mite->used)
-			continue;
-		if (mite->pcidev == pcidev)
-			return mite;
-	}
-	return NULL;
-}
-
 static const struct ni_660x_board *
 ni_660x_find_boardinfo(struct pci_dev *pcidev)
 {
@@ -1076,9 +1062,9 @@ static int __devinit ni_660x_attach_pci(struct comedi_device *dev,
 	dev->board_ptr = ni_660x_find_boardinfo(pcidev);
 	if (!dev->board_ptr)
 		return -ENODEV;
-	private(dev)->mite = ni_660x_find_mite(pcidev);
+	private(dev)->mite = mite_alloc(pcidev);
 	if (!private(dev)->mite)
-		return -ENODEV;
+		return -ENOMEM;
 
 	dev->board_name = board(dev)->name;
 
@@ -1196,6 +1182,7 @@ static void ni_660x_detach(struct comedi_device *dev)
 		if (private(dev)->mite) {
 			ni_660x_free_mite_rings(dev);
 			mite_unsetup(private(dev)->mite);
+			mite_free(private(dev)->mite);
 		}
 	}
 }

commit b64c0f51cbf5e38ffad8e2624a3416a6fa10223b
Author: Ian Abbott <abbotti@mev.co.uk>
Date:   Fri Sep 14 17:34:09 2012 +0100

    staging: comedi: ni_660x: use comedi attach_pci callback
    
    Convert this PCI driver to use the comedi `attach_pci` callback instead
    of the `attach` callback for PCI auto-configuration.  There is no need
    to support manual attachment of PCI devices supported by this driver, so
    remove the `attach` callback altogether.
    
    Note that this driver still uses the list of PCI "mite" devices created
    by the "mite" module.  This will be dealt with by a later patch once
    dynamic allocation of "mite" structures has been implemented.
    
    Signed-off-by: Ian Abbott <abbotti@mev.co.uk>
    Reviewed-by: H Hartley Sweeten <hsweeten@visionengravers.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/drivers/ni_660x.c b/drivers/staging/comedi/drivers/ni_660x.c
index 54738c9529d6..3b125a6c9fb6 100644
--- a/drivers/staging/comedi/drivers/ni_660x.c
+++ b/drivers/staging/comedi/drivers/ni_660x.c
@@ -448,16 +448,14 @@ static inline struct ni_660x_private *private(struct comedi_device *dev)
 	return dev->private;
 }
 
-/* initialized in ni_660x_find_device() */
+/* initialized in ni_660x_attach_pci() */
 static inline const struct ni_660x_board *board(struct comedi_device *dev)
 {
 	return dev->board_ptr;
 }
 
-#define n_ni_660x_boards ARRAY_SIZE(ni_660x_boards)
-
-static int ni_660x_attach(struct comedi_device *dev,
-			  struct comedi_devconfig *it);
+static int ni_660x_attach_pci(struct comedi_device *dev,
+			      struct pci_dev *pcidev);
 static void ni_660x_detach(struct comedi_device *dev);
 static void init_tio_chip(struct comedi_device *dev, int chipset);
 static void ni_660x_select_pfi_output(struct comedi_device *dev,
@@ -467,7 +465,7 @@ static void ni_660x_select_pfi_output(struct comedi_device *dev,
 static struct comedi_driver ni_660x_driver = {
 	.driver_name = "ni_660x",
 	.module = THIS_MODULE,
-	.attach = ni_660x_attach,
+	.attach_pci = ni_660x_attach_pci,
 	.detach = ni_660x_detach,
 };
 
@@ -490,7 +488,6 @@ static struct pci_driver ni_660x_pci_driver = {
 };
 module_comedi_pci_driver(ni_660x_driver, ni_660x_pci_driver);
 
-static int ni_660x_find_device(struct comedi_device *dev, int bus, int slot);
 static int ni_660x_set_pfi_routing(struct comedi_device *dev, unsigned chan,
 				   unsigned source);
 
@@ -1037,8 +1034,36 @@ static void ni_660x_free_mite_rings(struct comedi_device *dev)
 	}
 }
 
-static int ni_660x_attach(struct comedi_device *dev,
-			  struct comedi_devconfig *it)
+/* FIXME: remove this when dynamic MITE allocation implemented. */
+static struct mite_struct *ni_660x_find_mite(struct pci_dev *pcidev)
+{
+	struct mite_struct *mite;
+
+	for (mite = mite_devices; mite; mite = mite->next) {
+		if (mite->used)
+			continue;
+		if (mite->pcidev == pcidev)
+			return mite;
+	}
+	return NULL;
+}
+
+static const struct ni_660x_board *
+ni_660x_find_boardinfo(struct pci_dev *pcidev)
+{
+	unsigned int dev_id = pcidev->device;
+	unsigned int n;
+
+	for (n = 0; n < ARRAY_SIZE(ni_660x_boards); n++) {
+		const struct ni_660x_board *board = &ni_660x_boards[n];
+		if (board->dev_id == dev_id)
+			return board;
+	}
+	return NULL;
+}
+
+static int __devinit ni_660x_attach_pci(struct comedi_device *dev,
+					struct pci_dev *pcidev)
 {
 	struct comedi_subdevice *s;
 	int ret;
@@ -1048,9 +1073,12 @@ static int ni_660x_attach(struct comedi_device *dev,
 	ret = ni_660x_allocate_private(dev);
 	if (ret < 0)
 		return ret;
-	ret = ni_660x_find_device(dev, it->options[0], it->options[1]);
-	if (ret < 0)
-		return ret;
+	dev->board_ptr = ni_660x_find_boardinfo(pcidev);
+	if (!dev->board_ptr)
+		return -ENODEV;
+	private(dev)->mite = ni_660x_find_mite(pcidev);
+	if (!private(dev)->mite)
+		return -ENODEV;
 
 	dev->board_name = board(dev)->name;
 
@@ -1211,33 +1239,6 @@ static int ni_660x_GPCT_winsn(struct comedi_device *dev,
 	return ni_tio_winsn(subdev_to_counter(s), insn, data);
 }
 
-static int ni_660x_find_device(struct comedi_device *dev, int bus, int slot)
-{
-	struct mite_struct *mite;
-	int i;
-
-	for (mite = mite_devices; mite; mite = mite->next) {
-		if (mite->used)
-			continue;
-		if (bus || slot) {
-			if (bus != mite->pcidev->bus->number ||
-			    slot != PCI_SLOT(mite->pcidev->devfn))
-				continue;
-		}
-
-		for (i = 0; i < n_ni_660x_boards; i++) {
-			if (mite_device_id(mite) == ni_660x_boards[i].dev_id) {
-				dev->board_ptr = ni_660x_boards + i;
-				private(dev)->mite = mite;
-				return 0;
-			}
-		}
-	}
-	dev_warn(dev->class_dev, "no device found\n");
-	mite_list_devices();
-	return -EIO;
-}
-
 static int ni_660x_dio_insn_bits(struct comedi_device *dev,
 				 struct comedi_subdevice *s,
 				 struct comedi_insn *insn, unsigned int *data)

commit b4c9a598a7d858bbb845b9b4067c065f63abc10a
Author: Ian Abbott <abbotti@mev.co.uk>
Date:   Fri Sep 14 17:34:08 2012 +0100

    staging: comedi: ni_660x: use module_comedi_pci_driver()
    
    Use the macro `module_comedi_pci_driver(comedi_driver, pci_driver)` to
    register the module as a Comedi PCI driver.  Rename variables and
    functions that have prefix `driver_` for consistency.  Set the `name`
    member of the `struct pci_driver` variable in its initializer instead of
    initializing it in the module initialization function.
    
    Signed-off-by: Ian Abbott <abbotti@mev.co.uk>
    Reviewed-by: H Hartley Sweeten <hsweeten@visionengravers.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/drivers/ni_660x.c b/drivers/staging/comedi/drivers/ni_660x.c
index 43254cc79482..54738c9529d6 100644
--- a/drivers/staging/comedi/drivers/ni_660x.c
+++ b/drivers/staging/comedi/drivers/ni_660x.c
@@ -464,50 +464,31 @@ static void ni_660x_select_pfi_output(struct comedi_device *dev,
 				      unsigned pfi_channel,
 				      unsigned output_select);
 
-static struct comedi_driver driver_ni_660x = {
+static struct comedi_driver ni_660x_driver = {
 	.driver_name = "ni_660x",
 	.module = THIS_MODULE,
 	.attach = ni_660x_attach,
 	.detach = ni_660x_detach,
 };
 
-static int __devinit driver_ni_660x_pci_probe(struct pci_dev *dev,
-					      const struct pci_device_id *ent)
+static int __devinit ni_660x_pci_probe(struct pci_dev *dev,
+				       const struct pci_device_id *ent)
 {
-	return comedi_pci_auto_config(dev, &driver_ni_660x);
+	return comedi_pci_auto_config(dev, &ni_660x_driver);
 }
 
-static void __devexit driver_ni_660x_pci_remove(struct pci_dev *dev)
+static void __devexit ni_660x_pci_remove(struct pci_dev *dev)
 {
 	comedi_pci_auto_unconfig(dev);
 }
 
-static struct pci_driver driver_ni_660x_pci_driver = {
+static struct pci_driver ni_660x_pci_driver = {
+	.name = "ni_660x",
 	.id_table = ni_660x_pci_table,
-	.probe = &driver_ni_660x_pci_probe,
-	.remove = __devexit_p(&driver_ni_660x_pci_remove)
+	.probe = ni_660x_pci_probe,
+	.remove = __devexit_p(ni_660x_pci_remove)
 };
-
-static int __init driver_ni_660x_init_module(void)
-{
-	int retval;
-
-	retval = comedi_driver_register(&driver_ni_660x);
-	if (retval < 0)
-		return retval;
-
-	driver_ni_660x_pci_driver.name = (char *)driver_ni_660x.driver_name;
-	return pci_register_driver(&driver_ni_660x_pci_driver);
-}
-
-static void __exit driver_ni_660x_cleanup_module(void)
-{
-	pci_unregister_driver(&driver_ni_660x_pci_driver);
-	comedi_driver_unregister(&driver_ni_660x);
-}
-
-module_init(driver_ni_660x_init_module);
-module_exit(driver_ni_660x_cleanup_module);
+module_comedi_pci_driver(ni_660x_driver, ni_660x_pci_driver);
 
 static int ni_660x_find_device(struct comedi_device *dev, int bus, int slot);
 static int ni_660x_set_pfi_routing(struct comedi_device *dev, unsigned chan,

commit a8adadee9427e23fe7513fc214fe29f7307e7aa1
Author: Ian Abbott <abbotti@mev.co.uk>
Date:   Fri Sep 14 17:34:07 2012 +0100

    staging: comedi: ni_660x: convert printk() to dev_...()
    
    Convert the `printk()` calls in this drivers to use the `dev_...()`
    calls instead.  Replace some `printk()` calls in the comedi `attach()`
    handler (`ni_660x_attach()`) with a single `dev_info()` at the end.
    Remove some `printk()` calls before `BUG()` calls.
    
    Signed-off-by: Ian Abbott <abbotti@mev.co.uk>
    Reviewed-by: H Hartley Sweeten <hsweeten@visionengravers.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/drivers/ni_660x.c b/drivers/staging/comedi/drivers/ni_660x.c
index 6bd5b5514408..43254cc79482 100644
--- a/drivers/staging/comedi/drivers/ni_660x.c
+++ b/drivers/staging/comedi/drivers/ni_660x.c
@@ -748,8 +748,6 @@ static enum NI_660x_Register ni_gpct_to_660x_register(enum ni_gpct_register reg)
 		ni_660x_register = G3InterruptEnable;
 		break;
 	default:
-		printk(KERN_WARNING "%s: unhandled register 0x%x in switch.\n",
-		       __func__, reg);
 		BUG();
 		return 0;
 		break;
@@ -773,8 +771,6 @@ static inline void ni_660x_write_register(struct comedi_device *dev,
 		writel(bits, write_address);
 		break;
 	default:
-		printk(KERN_WARNING "%s: %s: bug! unhandled case (reg=0x%x) in switch.\n",
-		       __FILE__, __func__, reg);
 		BUG();
 		break;
 	}
@@ -796,8 +792,6 @@ static inline unsigned ni_660x_read_register(struct comedi_device *dev,
 		return readl(read_address);
 		break;
 	default:
-		printk(KERN_WARNING "%s: %s: bug! unhandled case (reg=0x%x) in switch.\n",
-		       __FILE__, __func__, reg);
 		BUG();
 		break;
 	}
@@ -1070,8 +1064,6 @@ static int ni_660x_attach(struct comedi_device *dev,
 	unsigned i;
 	unsigned global_interrupt_config_bits;
 
-	printk(KERN_INFO "comedi%d: ni_660x: ", dev->minor);
-
 	ret = ni_660x_allocate_private(dev);
 	if (ret < 0)
 		return ret;
@@ -1083,7 +1075,7 @@ static int ni_660x_attach(struct comedi_device *dev,
 
 	ret = mite_setup2(private(dev)->mite, 1);
 	if (ret < 0) {
-		printk(KERN_WARNING "error setting up mite\n");
+		dev_warn(dev->class_dev, "error setting up mite\n");
 		return ret;
 	}
 	comedi_set_hw_dev(dev, &private(dev)->mite->pcidev->dev);
@@ -1091,8 +1083,6 @@ static int ni_660x_attach(struct comedi_device *dev,
 	if (ret < 0)
 		return ret;
 
-	printk(KERN_INFO " %s ", dev->board_name);
-
 	ret = comedi_alloc_subdevices(dev, 2 + NI_660X_MAX_NUM_COUNTERS);
 	if (ret)
 		return ret;
@@ -1174,7 +1164,7 @@ static int ni_660x_attach(struct comedi_device *dev,
 	ret = request_irq(mite_irq(private(dev)->mite), ni_660x_interrupt,
 			  IRQF_SHARED, "ni_660x", dev);
 	if (ret < 0) {
-		printk(KERN_WARNING " irq not available\n");
+		dev_warn(dev->class_dev, " irq not available\n");
 		return ret;
 	}
 	dev->irq = mite_irq(private(dev)->mite);
@@ -1183,7 +1173,7 @@ static int ni_660x_attach(struct comedi_device *dev,
 		global_interrupt_config_bits |= Cascade_Int_Enable_Bit;
 	ni_660x_write_register(dev, 0, global_interrupt_config_bits,
 			       GlobalInterruptConfigRegister);
-	printk(KERN_INFO "attached\n");
+	dev_info(dev->class_dev, "ni_660x: %s attached\n", dev->board_name);
 	return 0;
 }
 
@@ -1262,7 +1252,7 @@ static int ni_660x_find_device(struct comedi_device *dev, int bus, int slot)
 			}
 		}
 	}
-	printk(KERN_WARNING "no device found\n");
+	dev_warn(dev->class_dev, "no device found\n");
 	mite_list_devices();
 	return -EIO;
 }

commit 41e862f3ab234349023e90bf2461977f31073a32
Author: H Hartley Sweeten <hartleys@visionengravers.com>
Date:   Wed Sep 5 18:47:44 2012 -0700

    staging: comedi: ni_660x: remove subdevice pointer math
    
    Convert the comedi_subdevice access from pointer math to array
    access.
    
    Signed-off-by: H Hartley Sweeten <hsweeten@visionengravers.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/drivers/ni_660x.c b/drivers/staging/comedi/drivers/ni_660x.c
index 5e863ff343dd..6bd5b5514408 100644
--- a/drivers/staging/comedi/drivers/ni_660x.c
+++ b/drivers/staging/comedi/drivers/ni_660x.c
@@ -985,7 +985,7 @@ static irqreturn_t ni_660x_interrupt(int irq, void *d)
 	spin_lock_irqsave(&private(dev)->interrupt_lock, flags);
 	smp_mb();
 	for (i = 0; i < ni_660x_num_counters(dev); ++i) {
-		s = dev->subdevices + NI_660X_GPCT_SUBDEV(i);
+		s = &dev->subdevices[NI_660X_GPCT_SUBDEV(i)];
 		ni_660x_handle_gpct_interrupt(dev, s);
 	}
 	spin_unlock_irqrestore(&private(dev)->interrupt_lock, flags);
@@ -1097,11 +1097,11 @@ static int ni_660x_attach(struct comedi_device *dev,
 	if (ret)
 		return ret;
 
-	s = dev->subdevices + 0;
+	s = &dev->subdevices[0];
 	/* Old GENERAL-PURPOSE COUNTER/TIME (GPCT) subdevice, no longer used */
 	s->type = COMEDI_SUBD_UNUSED;
 
-	s = dev->subdevices + NI_660X_DIO_SUBDEV;
+	s = &dev->subdevices[NI_660X_DIO_SUBDEV];
 	/* DIGITAL I/O SUBDEVICE */
 	s->type = COMEDI_SUBD_DIO;
 	s->subdev_flags = SDF_READABLE | SDF_WRITABLE;
@@ -1124,7 +1124,7 @@ static int ni_660x_attach(struct comedi_device *dev,
 	if (private(dev)->counter_dev == NULL)
 		return -ENOMEM;
 	for (i = 0; i < NI_660X_MAX_NUM_COUNTERS; ++i) {
-		s = dev->subdevices + NI_660X_GPCT_SUBDEV(i);
+		s = &dev->subdevices[NI_660X_GPCT_SUBDEV(i)];
 		if (i < ni_660x_num_counters(dev)) {
 			s->type = COMEDI_SUBD_COUNTER;
 			s->subdev_flags =

commit a2714e3e42e746d6c8525c35fdcc58fb60c2830d
Author: H Hartley Sweeten <hartleys@visionengravers.com>
Date:   Mon Jun 18 13:16:35 2012 -0700

    staging: comedi: fix return value for insn_bits functions
    
    The comedi_subdevice 'insn_bits' functions return the number of data
    elements used to perform the command. Most of the insn_bits functions
    return an open coded '2' to indicate this. The same value is available
    as 'insn->n'. Return that instead to better indicate what the return
    means.
    
    Signed-off-by: H Hartley Sweeten <hsweeten@visionengravers.com>
    Cc: Ian Abbott <abbotti@mev.co.uk>
    Cc: Frank Mori Hess <fmhess@users.sourceforge.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/drivers/ni_660x.c b/drivers/staging/comedi/drivers/ni_660x.c
index 5391a3949da1..5e863ff343dd 100644
--- a/drivers/staging/comedi/drivers/ni_660x.c
+++ b/drivers/staging/comedi/drivers/ni_660x.c
@@ -1285,7 +1285,7 @@ static int ni_660x_dio_insn_bits(struct comedi_device *dev,
 	data[1] =
 	    (ni_660x_read_register(dev, 0,
 				   DIO32Input) >> base_bitfield_channel);
-	return 2;
+	return insn->n;
 }
 
 static void ni_660x_select_pfi_output(struct comedi_device *dev,

commit 8b6c56949ffa83dbc2a6e8fa3f98b10a19372207
Author: H Hartley Sweeten <hartleys@visionengravers.com>
Date:   Tue Jun 12 11:59:33 2012 -0700

    staging: comedi: propogate error code from comedi_alloc_subdevices
    
    comedi_alloc_subdevices can fail with -EINVAL or -ENOMEM. When it
    does fail make sure to pass the proper error code back.
    
    Signed-off-by: H Hartley Sweeten <hsweeten@visionengravers.com>
    Cc: Ian Abbott <abbott@mev.co.uk>
    Cc: Frank Mori Hess <fmhess@users.sourceforge.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/drivers/ni_660x.c b/drivers/staging/comedi/drivers/ni_660x.c
index 8c6a6ba9d4b9..5391a3949da1 100644
--- a/drivers/staging/comedi/drivers/ni_660x.c
+++ b/drivers/staging/comedi/drivers/ni_660x.c
@@ -1093,8 +1093,9 @@ static int ni_660x_attach(struct comedi_device *dev,
 
 	printk(KERN_INFO " %s ", dev->board_name);
 
-	if (comedi_alloc_subdevices(dev, 2 + NI_660X_MAX_NUM_COUNTERS) < 0)
-		return -ENOMEM;
+	ret = comedi_alloc_subdevices(dev, 2 + NI_660X_MAX_NUM_COUNTERS);
+	if (ret)
+		return ret;
 
 	s = dev->subdevices + 0;
 	/* Old GENERAL-PURPOSE COUNTER/TIME (GPCT) subdevice, no longer used */

commit fba1d0faf726b442ab8771d5e9fbaf5f5a4c624c
Author: H Hartley Sweeten <hartleys@visionengravers.com>
Date:   Tue Jun 12 11:58:27 2012 -0700

    staging: comedi: only set dev->n_subdevices when kcalloc succeedes
    
    It's possible for the kcalloc in comedi_alloc_subdevices to fail.
    Only set the dev->n_subdevices variable if the allocation is
    successful.
    
    Since the core sets dev->n_subdevices, remove all the places in the
    drivers where this variable was getting set.
    
    Signed-off-by: H Hartley Sweeten <hsweeten@visionengravers.com>
    Cc: Ian Abbott <abbott@mev.co.uk>
    Cc: Frank Mori Hess <fmhess@users.sourceforge.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/drivers/ni_660x.c b/drivers/staging/comedi/drivers/ni_660x.c
index 5827debd3366..8c6a6ba9d4b9 100644
--- a/drivers/staging/comedi/drivers/ni_660x.c
+++ b/drivers/staging/comedi/drivers/ni_660x.c
@@ -1093,9 +1093,7 @@ static int ni_660x_attach(struct comedi_device *dev,
 
 	printk(KERN_INFO " %s ", dev->board_name);
 
-	dev->n_subdevices = 2 + NI_660X_MAX_NUM_COUNTERS;
-
-	if (comedi_alloc_subdevices(dev, dev->n_subdevices) < 0)
+	if (comedi_alloc_subdevices(dev, 2 + NI_660X_MAX_NUM_COUNTERS) < 0)
 		return -ENOMEM;
 
 	s = dev->subdevices + 0;

commit 2f0b9d082e5d0056a3aca4be038483a564849196
Author: H Hartley Sweeten <hartleys@visionengravers.com>
Date:   Mon Jun 11 17:45:15 2012 -0700

    staging: comedi: export alloc_subdevices as comedi_alloc_subdevices
    
    Move the inline alloc_subdevices() function from comedidev.h
    to drivers.c and rename it to comedi_alloc_subdevices(). The
    function is large enough to warrant being an exported symbol
    rather than being an inline in every driver.
    
    Signed-off-by: H Hartley Sweeten <hsweeten@visionengravers.com>
    Cc: Ian Abbott <abbotti@mev.co.uk>
    Cc: Frank Mori Hess <fmhess@users.sourceforge.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/drivers/ni_660x.c b/drivers/staging/comedi/drivers/ni_660x.c
index 8c40730e296a..5827debd3366 100644
--- a/drivers/staging/comedi/drivers/ni_660x.c
+++ b/drivers/staging/comedi/drivers/ni_660x.c
@@ -1095,7 +1095,7 @@ static int ni_660x_attach(struct comedi_device *dev,
 
 	dev->n_subdevices = 2 + NI_660X_MAX_NUM_COUNTERS;
 
-	if (alloc_subdevices(dev, dev->n_subdevices) < 0)
+	if (comedi_alloc_subdevices(dev, dev->n_subdevices) < 0)
 		return -ENOMEM;
 
 	s = dev->subdevices + 0;

commit 484ecc95d9cdfa8b2f7029e2f3409cf078aed4ab
Author: H Hartley Sweeten <hartleys@visionengravers.com>
Date:   Thu May 17 17:11:14 2012 -0700

    staging: comedi: cleanup all the comedi_driver 'detach' functions
    
    1. Change the return type from int to void
    
    All the detach functions, except for the comedi usb drivers, simply
    return success (0). Plus, the return code is never checked in the
    comedi core.
    
    The comedi usb drivers do return error codes but the conditions can
    never happen.
    
    The first check is:
    
            if (!dev)
                    return -EFAULT;
    
    This checks that the passed comedi_device pointer is valid. The detach
    function itself is called using this pointer so it MUST always be valid
    or there is a bug in the core:
    
            if (dev->driver)
                    dev->driver->detach(dev);
    
    And the second check:
    
            usb = dev->private;
            if (!usb)
                    return -EFAULT;
    
    The dev->private pointer is setup in the attach function to point to the
    probed usb device. This value could be NULL if the attach fails. But,
    since the comedi core is going to unload the driver anyway and does not
    check for errors there is no gain by returning one.
    
    After removing these checks from the comedi usb drivers the detach
    functions required a bit of cleanup.
    
    2. Remove all the printk noise in the detach functions
    
    All of the printk output is really just noise. The user did a rmmod to
    unload the driver, we really don't need to tell them about it.
    
    Also, some of the messages are output using:
    
            dev_dbg(dev->hw_dev, ...
    or
            dev_info(dev->hw_dev, ...
    
    Unfortunately the hw_dev value is only used by drivers that are doing
    DMA. For most drivers this variable is going to be NULL so the output
    is not going to work as expected.
    
    3. Refactor a couple static 'free_resource' functions into the detach
       functions.
    
    The 'free_resource' function is only being called by the detach and it
    makes more sense to just absorb the code.
    
    4. Remove a couple unnecessary braces for single statements.
    
    5. Remove unnecessary comments.
    
    Most of the comedi drivers appear to be based on the comedi skel driver
    and have the comments from that driver included. These comments make
    sense in the skel driver for reference but they don't need to be in any
    of the actual drivers.
    
    6. Remove all the extra whitespace.
    
    It's not needed to make the functions any more readable.
    
    7. Remove the now unused 'attached_successfully' variable in the
       cb_pcimdda driver.
    
    This variable was only used to conditionally output some driver noise
    during the detach. Since all the printk's have been removed this
    variable is no longer necessary.
    
    Signed-off-by: H Hartley Sweeten <hsweeten@visionengravers.com>
    Cc: Ian Abbott <abbotti@mev.co.uk>
    Cc: Mori Hess <fmhess@users.sourceforge.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/drivers/ni_660x.c b/drivers/staging/comedi/drivers/ni_660x.c
index 21eb7fb5c42c..8c40730e296a 100644
--- a/drivers/staging/comedi/drivers/ni_660x.c
+++ b/drivers/staging/comedi/drivers/ni_660x.c
@@ -458,7 +458,7 @@ static inline const struct ni_660x_board *board(struct comedi_device *dev)
 
 static int ni_660x_attach(struct comedi_device *dev,
 			  struct comedi_devconfig *it);
-static int ni_660x_detach(struct comedi_device *dev);
+static void ni_660x_detach(struct comedi_device *dev);
 static void init_tio_chip(struct comedi_device *dev, int chipset);
 static void ni_660x_select_pfi_output(struct comedi_device *dev,
 				      unsigned pfi_channel,
@@ -1188,14 +1188,10 @@ static int ni_660x_attach(struct comedi_device *dev,
 	return 0;
 }
 
-static int ni_660x_detach(struct comedi_device *dev)
+static void ni_660x_detach(struct comedi_device *dev)
 {
-	printk(KERN_INFO "comedi%d: ni_660x: remove\n", dev->minor);
-
-	/* Free irq */
 	if (dev->irq)
 		free_irq(dev->irq, dev);
-
 	if (dev->private) {
 		if (private(dev)->counter_dev)
 			ni_gpct_device_destroy(private(dev)->counter_dev);
@@ -1204,7 +1200,6 @@ static int ni_660x_detach(struct comedi_device *dev)
 			mite_unsetup(private(dev)->mite);
 		}
 	}
-	return 0;
 }
 
 static int

commit 2b7a521b121ebc16b9137f07ded7874105c9486a
Author: H Hartley Sweeten <hartleys@visionengravers.com>
Date:   Tue May 8 16:19:34 2012 -0700

    staging: comedi: mite: mite_io_addr and daq_io_addr are void __iomem *
    
    The mite_io_addr and daq_io_addr variables in struct mite_struct
    are both ioremap'ed pci resources and should be void __iomem *
    not void *.
    
    This quiets a lot of sparse warings for the write[lwb],read[lwb]
    calls in the comedi mite drives like:
    
    warning: incorrect type in argument 1 (different address spaces)
       expected void const volatile [noderef] <asn:2>*addr
       got void *<noident>
    
    warning: incorrect type in argument 2 (different address spaces)
       expected void volatile [noderef] <asn:2>*addr
       got void *
    
    It also exposed some warnings in the mite ni_660x driver where
    the daq_io_address was getting cast as a void *const.
    
    Signed-off-by: H Hartley Sweeten <hsweeten@visionengravers.com>
    Cc: Ian Abbott <abbotti@mev.co.uk>
    Cc: Mori Hess <fmhess@users.sourceforge.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/drivers/ni_660x.c b/drivers/staging/comedi/drivers/ni_660x.c
index eea7047f6eac..21eb7fb5c42c 100644
--- a/drivers/staging/comedi/drivers/ni_660x.c
+++ b/drivers/staging/comedi/drivers/ni_660x.c
@@ -761,7 +761,7 @@ static inline void ni_660x_write_register(struct comedi_device *dev,
 					  unsigned chip_index, unsigned bits,
 					  enum NI_660x_Register reg)
 {
-	void *const write_address =
+	void __iomem *write_address =
 	    private(dev)->mite->daq_io_addr + GPCT_OFFSET[chip_index] +
 	    registerData[reg].offset;
 
@@ -784,7 +784,7 @@ static inline unsigned ni_660x_read_register(struct comedi_device *dev,
 					     unsigned chip_index,
 					     enum NI_660x_Register reg)
 {
-	void *const read_address =
+	void __iomem *read_address =
 	    private(dev)->mite->daq_io_addr + GPCT_OFFSET[chip_index] +
 	    registerData[reg].offset;
 

commit 4c093a6dc2240fd54d71a25b284e02d51509e430
Author: Ian Abbott <abbotti@mev.co.uk>
Date:   Fri Mar 30 17:14:56 2012 +0100

    staging: comedi: pass 'struct comedi_driver *' to comedi_..._auto_config
    
    The comedi_pci_auto_config() and comedi_usb_auto_config() functions
    currently take a board name parameter which is actually a driver name
    parameter.  Replace it with a pointer to the struct comedi_driver.  This
    will allow comedi_pci_auto_config() and comedi_usb_auto_config() to call
    bus-type-specific auto-configuration hooks in the struct comedi_driver
    if they exist (they don't yet).  The idea is that these
    bus-type-specific auto-configuration hooks won't have to search the bus
    for the device being auto-configured like 'attach()' hook has to.
    
    Signed-off-by: Ian Abbott <abbotti@mev.co.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/comedi/drivers/ni_660x.c b/drivers/staging/comedi/drivers/ni_660x.c
index 35f3a4749825..eea7047f6eac 100644
--- a/drivers/staging/comedi/drivers/ni_660x.c
+++ b/drivers/staging/comedi/drivers/ni_660x.c
@@ -474,7 +474,7 @@ static struct comedi_driver driver_ni_660x = {
 static int __devinit driver_ni_660x_pci_probe(struct pci_dev *dev,
 					      const struct pci_device_id *ent)
 {
-	return comedi_pci_auto_config(dev, driver_ni_660x.driver_name);
+	return comedi_pci_auto_config(dev, &driver_ni_660x);
 }
 
 static void __devexit driver_ni_660x_pci_remove(struct pci_dev *dev)

commit 95cd17c9f3734091a5811fabbd778e3f7b1f0789
Author: Joe Perches <joe@perches.com>
Date:   Sun Apr 10 14:31:35 2011 -0700

    staging: Remove unnecessary semicolons when switch (foo) {...};
    
    Done via perl script:
    
    $ cat remove_semi_switch.pl
    my $match_balanced_parentheses = qr/(\((?:[^\(\)]++|(?-1))*\))/;
    my $match_balanced_braces      = qr/(\{(?:[^\{\}]++|(?-1))*\})/;
    
    foreach my $file (@ARGV) {
        my $f;
        my $text;
        my $oldtext;
    
        next if ((-d $file));
    
        open($f, '<', $file)
            or die "$P: Can't open $file for read\n";
        $oldtext = do { local($/) ; <$f> };
        close($f);
    
        next if ($oldtext eq "");
    
        $text = $oldtext;
    
        my $count = 0;
        do {
            $count = 0;
            $count += $text =~ s@\b(switch\s*${match_balanced_parentheses}\s*)${match_balanced_braces}\s*;@"$1$3"@egx;
        } while ($count > 0);
    
        if ($text ne $oldtext) {
            my $newfile = $file;
    
            open($f, '>', $newfile)
                or die "$P: Can't open $newfile for write\n";
            print $f $text;
            close($f);
        }
    }
    
    $
    
    Signed-off-by: Joe Perches <joe@perches.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>

diff --git a/drivers/staging/comedi/drivers/ni_660x.c b/drivers/staging/comedi/drivers/ni_660x.c
index ca2aeaa9449c..35f3a4749825 100644
--- a/drivers/staging/comedi/drivers/ni_660x.c
+++ b/drivers/staging/comedi/drivers/ni_660x.c
@@ -1418,7 +1418,7 @@ static int ni_660x_dio_insn_config(struct comedi_device *dev,
 	default:
 		return -EINVAL;
 		break;
-	};
+	}
 	return 0;
 }
 

commit 3c323c01b6bd5fd01be21a8f0cdc11e55997aa06
Author: Ian Abbott <abbotti@mev.co.uk>
Date:   Mon Feb 7 13:39:52 2011 +0000

    Staging: comedi: Add MODULE_LICENSE and similar to NI modules
    
    As mentioned by W. Trevor King on the devel@linuxdriverproject.org list
    on "Thu, 27 Jan 2011 18:52:15 -0500", "Message-ID:
    <20110127235214.GA5107@thialfi.dhcp.drexel.edu>", the ni_pcimio module
    is missing module metadata, including a license.
    
    This patch adds module metadata to all the NI comedi driver modules.  It
    also removes a duplicate MODULE_LICENSE("GPL") line from the "mite"
    module.
    
    Signed-off-by: Ian Abbott <abbotti@mev.co.uk>
    Cc: W. Trevor King <wking@drexel.edu>
    Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>

diff --git a/drivers/staging/comedi/drivers/ni_660x.c b/drivers/staging/comedi/drivers/ni_660x.c
index 6612b085c4ef..ca2aeaa9449c 100644
--- a/drivers/staging/comedi/drivers/ni_660x.c
+++ b/drivers/staging/comedi/drivers/ni_660x.c
@@ -1421,3 +1421,7 @@ static int ni_660x_dio_insn_config(struct comedi_device *dev,
 	};
 	return 0;
 }
+
+MODULE_AUTHOR("Comedi http://www.comedi.org");
+MODULE_DESCRIPTION("Comedi low-level driver");
+MODULE_LICENSE("GPL");

commit f69b0d6451679f1466381a46ac7ab671a7b5668c
Author: Uwe Kleine-KÃ¶nig <u.kleine-koenig@pengutronix.de>
Date:   Mon Jul 12 17:15:46 2010 +0200

    Staging: fix typos concerning "address"
    
    Signed-off-by: Uwe Kleine-KÃ¶nig <u.kleine-koenig@pengutronix.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>

diff --git a/drivers/staging/comedi/drivers/ni_660x.c b/drivers/staging/comedi/drivers/ni_660x.c
index 523cb2973373..6612b085c4ef 100644
--- a/drivers/staging/comedi/drivers/ni_660x.c
+++ b/drivers/staging/comedi/drivers/ni_660x.c
@@ -382,7 +382,7 @@ enum global_interrupt_config_register_bits {
 	Global_Int_Enable_Bit = 0x80000000
 };
 
-/* Offset of the GPCT chips from the base-adress of the card */
+/* Offset of the GPCT chips from the base-address of the card */
 /* First chip is at base-address + 0x00, etc. */
 static const unsigned GPCT_OFFSET[2] = { 0x0, 0x800 };
 

commit 727b286b44ea359d66f47d241cc2cdad36ed7bdc
Author: Arun Thomas <arun.thomas@gmail.com>
Date:   Sun Jun 6 22:23:31 2010 +0200

    Staging: comedi: Remove COMEDI_PCI_INITCLEANUP macro
    
    Move the PCI devinit/devexit routines to the respective C source files
    instead of calling COMEDI_PCI_INITCLEANUP
    
    Signed-off-by: Arun Thomas <arun.thomas@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>

diff --git a/drivers/staging/comedi/drivers/ni_660x.c b/drivers/staging/comedi/drivers/ni_660x.c
index 6a6fae53ea0b..523cb2973373 100644
--- a/drivers/staging/comedi/drivers/ni_660x.c
+++ b/drivers/staging/comedi/drivers/ni_660x.c
@@ -471,7 +471,43 @@ static struct comedi_driver driver_ni_660x = {
 	.detach = ni_660x_detach,
 };
 
-COMEDI_PCI_INITCLEANUP(driver_ni_660x, ni_660x_pci_table);
+static int __devinit driver_ni_660x_pci_probe(struct pci_dev *dev,
+					      const struct pci_device_id *ent)
+{
+	return comedi_pci_auto_config(dev, driver_ni_660x.driver_name);
+}
+
+static void __devexit driver_ni_660x_pci_remove(struct pci_dev *dev)
+{
+	comedi_pci_auto_unconfig(dev);
+}
+
+static struct pci_driver driver_ni_660x_pci_driver = {
+	.id_table = ni_660x_pci_table,
+	.probe = &driver_ni_660x_pci_probe,
+	.remove = __devexit_p(&driver_ni_660x_pci_remove)
+};
+
+static int __init driver_ni_660x_init_module(void)
+{
+	int retval;
+
+	retval = comedi_driver_register(&driver_ni_660x);
+	if (retval < 0)
+		return retval;
+
+	driver_ni_660x_pci_driver.name = (char *)driver_ni_660x.driver_name;
+	return pci_register_driver(&driver_ni_660x_pci_driver);
+}
+
+static void __exit driver_ni_660x_cleanup_module(void)
+{
+	pci_unregister_driver(&driver_ni_660x_pci_driver);
+	comedi_driver_unregister(&driver_ni_660x);
+}
+
+module_init(driver_ni_660x_init_module);
+module_exit(driver_ni_660x_cleanup_module);
 
 static int ni_660x_find_device(struct comedi_device *dev, int bus, int slot);
 static int ni_660x_set_pfi_routing(struct comedi_device *dev, unsigned chan,

commit 4e40cee9c8a46d4231d28ae7ae6d9938cf0526d5
Author: Greg Kroah-Hartman <gregkh@suse.de>
Date:   Fri Apr 30 16:52:52 2010 -0700

    Staging: comedi: use the standard NI pci device id
    
    Don't redefine something that we already have in the core
    kernel.  Also move to use PCI_DEVICE() macros to make things
    a bit simpler when changing the define.
    
    Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>

diff --git a/drivers/staging/comedi/drivers/ni_660x.c b/drivers/staging/comedi/drivers/ni_660x.c
index 017630fb2424..6a6fae53ea0b 100644
--- a/drivers/staging/comedi/drivers/ni_660x.c
+++ b/drivers/staging/comedi/drivers/ni_660x.c
@@ -420,12 +420,11 @@ static const struct ni_660x_board ni_660x_boards[] = {
 #define NI_660X_MAX_NUM_COUNTERS (NI_660X_MAX_NUM_CHIPS * counters_per_chip)
 
 static DEFINE_PCI_DEVICE_TABLE(ni_660x_pci_table) = {
-	{
-	PCI_VENDOR_ID_NATINST, 0x2c60, PCI_ANY_ID, PCI_ANY_ID, 0, 0, 0}, {
-	PCI_VENDOR_ID_NATINST, 0x1310, PCI_ANY_ID, PCI_ANY_ID, 0, 0, 0}, {
-	PCI_VENDOR_ID_NATINST, 0x1360, PCI_ANY_ID, PCI_ANY_ID, 0, 0, 0}, {
-	PCI_VENDOR_ID_NATINST, 0x2cc0, PCI_ANY_ID, PCI_ANY_ID, 0, 0, 0}, {
-	0}
+	{PCI_DEVICE(PCI_VENDOR_ID_NI, 0x2c60)},
+	{PCI_DEVICE(PCI_VENDOR_ID_NI, 0x1310)},
+	{PCI_DEVICE(PCI_VENDOR_ID_NI, 0x1360)},
+	{PCI_DEVICE(PCI_VENDOR_ID_NI, 0x2cc0)},
+	{0}
 };
 
 MODULE_DEVICE_TABLE(pci, ni_660x_pci_table);

commit b02957d58a27525499ab10d272d3b44682a7ae50
Merge: 3a8954e8f22c b94c765ac31f
Author: Greg Kroah-Hartman <gregkh@suse.de>
Date:   Thu Mar 4 08:14:54 2010 -0800

    Staging: Merge two branches of coding style fixes together
    
    Turns out that multiple people sent pretty much the same patch
    for the same staging drivers.  Commit these in two different
    branches and merge them together to get a more complete coverage
    of the cleanup and properly credit everyone for the work that they
    did.
    
    Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>

commit 0054a361e44bf71b8bb79b863bcf00e04dc4a464
Author: Graham M Howe <gman.1352@googlemail.com>
Date:   Wed Feb 10 18:11:47 2010 +0000

    Staging: comedi: fix bracing coding style and 80 character issues in ni_660x.c
    
    This is a patch to the ni_660x.c file that fixes up the brace and 80
    character issues found by the checkpatch tool
    
    Signed-off-by: Graham M Howe <gmhowe@btopenworld.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>

diff --git a/drivers/staging/comedi/drivers/ni_660x.c b/drivers/staging/comedi/drivers/ni_660x.c
index 404d3c516ed1..df61e5a03ae1 100644
--- a/drivers/staging/comedi/drivers/ni_660x.c
+++ b/drivers/staging/comedi/drivers/ni_660x.c
@@ -52,7 +52,8 @@ enum ni_660x_constants {
 };
 
 #define NUM_PFI_CHANNELS 40
-/* really there are only up to 3 dma channels, but the register layout allows for 4 */
+/* really there are only up to 3 dma channels, but the register layout allows
+for 4 */
 #define MAX_DMA_CHANNEL 4
 
 /* See Register-Level Programmer Manual page 3.1 */
@@ -198,7 +199,7 @@ struct NI_660xRegisterData {
 	const char *name;	/*  Register Name */
 	int offset;		/*  Offset from base address from GPCT chip */
 	enum ni_660x_register_direction direction;
-	enum ni_660x_register_width size;	/*  1 byte, 2 bytes, or 4 bytes */
+	enum ni_660x_register_width size;	/*1 byte, 2 bytes, or 4 bytes*/
 };
 
 static const struct NI_660xRegisterData registerData[NumRegisters] = {
@@ -382,8 +383,8 @@ enum global_interrupt_config_register_bits {
 };
 
 /* Offset of the GPCT chips from the base-adress of the card */
-static const unsigned GPCT_OFFSET[2] = { 0x0, 0x800 };	/* First chip is at base-address +
-							   0x00, etc. */
+/* First chip is at base-address + 0x00, etc. */
+static const unsigned GPCT_OFFSET[2] = { 0x0, 0x800 };
 
 /* Board description*/
 struct ni_660x_board {
@@ -993,9 +994,9 @@ static int ni_660x_allocate_private(struct comedi_device *dev)
 	spin_lock_init(&private(dev)->mite_channel_lock);
 	spin_lock_init(&private(dev)->interrupt_lock);
 	spin_lock_init(&private(dev)->soft_reg_copy_lock);
-	for (i = 0; i < NUM_PFI_CHANNELS; ++i) {
+	for (i = 0; i < NUM_PFI_CHANNELS; ++i)
 		private(dev)->pfi_output_selects[i] = pfi_output_select_counter;
-	}
+
 	return 0;
 }
 
@@ -1008,9 +1009,8 @@ static int ni_660x_alloc_mite_rings(struct comedi_device *dev)
 		for (j = 0; j < counters_per_chip; ++j) {
 			private(dev)->mite_rings[i][j] =
 			    mite_alloc_ring(private(dev)->mite);
-			if (private(dev)->mite_rings[i][j] == NULL) {
+			if (private(dev)->mite_rings[i][j] == NULL)
 				return -ENOMEM;
-			}
 		}
 	}
 	return 0;
@@ -1022,9 +1022,8 @@ static void ni_660x_free_mite_rings(struct comedi_device *dev)
 	unsigned j;
 
 	for (i = 0; i < board(dev)->n_chips; ++i) {
-		for (j = 0; j < counters_per_chip; ++j) {
+		for (j = 0; j < counters_per_chip; ++j)
 			mite_free_ring(private(dev)->mite_rings[i][j]);
-		}
 	}
 }
 
@@ -1078,15 +1077,16 @@ static int ni_660x_attach(struct comedi_device *dev,
 	s->insn_bits = ni_660x_dio_insn_bits;
 	s->insn_config = ni_660x_dio_insn_config;
 	s->io_bits = 0;		/* all bits default to input */
-	/*  we use the ioconfig registers to control dio direction, so zero output enables in stc dio control reg */
+	/*  we use the ioconfig registers to control dio direction, so zero
+	output enables in stc dio control reg */
 	ni_660x_write_register(dev, 0, 0, STCDIOControl);
 
 	private(dev)->counter_dev = ni_gpct_device_construct(dev,
-							     &ni_gpct_write_register,
-							     &ni_gpct_read_register,
-							     ni_gpct_variant_660x,
-							     ni_660x_num_counters
-							     (dev));
+						     &ni_gpct_write_register,
+						     &ni_gpct_read_register,
+						     ni_gpct_variant_660x,
+						     ni_660x_num_counters
+						     (dev));
 	if (private(dev)->counter_dev == NULL)
 		return -ENOMEM;
 	for (i = 0; i < NI_660X_MAX_NUM_COUNTERS; ++i) {
@@ -1118,12 +1118,12 @@ static int ni_660x_attach(struct comedi_device *dev,
 			s->type = COMEDI_SUBD_UNUSED;
 		}
 	}
-	for (i = 0; i < board(dev)->n_chips; ++i) {
+	for (i = 0; i < board(dev)->n_chips; ++i)
 		init_tio_chip(dev, i);
-	}
-	for (i = 0; i < ni_660x_num_counters(dev); ++i) {
+
+	for (i = 0; i < ni_660x_num_counters(dev); ++i)
 		ni_tio_init_counter(&private(dev)->counter_dev->counters[i]);
-	}
+
 	for (i = 0; i < NUM_PFI_CHANNELS; ++i) {
 		if (i < min_counter_pfi_chan)
 			ni_660x_set_pfi_routing(dev, i, pfi_output_select_do);
@@ -1134,9 +1134,9 @@ static int ni_660x_attach(struct comedi_device *dev,
 	}
 	/* to be safe, set counterswap bits on tio chips after all the counter
 	   outputs have been set to high impedance mode */
-	for (i = 0; i < board(dev)->n_chips; ++i) {
+	for (i = 0; i < board(dev)->n_chips; ++i)
 		set_tio_counterswap(dev, i);
-	}
+
 	ret = request_irq(mite_irq(private(dev)->mite), ni_660x_interrupt,
 			  IRQF_SHARED, "ni_660x", dev);
 	if (ret < 0) {
@@ -1193,9 +1193,9 @@ static void init_tio_chip(struct comedi_device *dev, int chipset)
 			       private(dev)->
 			       dma_configuration_soft_copies[chipset],
 			       DMAConfigRegister);
-	for (i = 0; i < NUM_PFI_CHANNELS; ++i) {
+	for (i = 0; i < NUM_PFI_CHANNELS; ++i)
 		ni_660x_write_register(dev, chipset, 0, IOConfigReg(i));
-	}
+
 }
 
 static int

commit 900b78088567d2033c58d4e2433c3d2558f56b76
Author: Benjamin Adolphi <b.adolphi@googlemail.com>
Date:   Fri Jan 29 00:42:30 2010 +0100

    Staging: comedi: ni_660x: Checkpatch cleanups
    
    This fixes all checkpatch issues in the ni_660x comedi driver.
    
    Signed-off-by: Benjamin Adolphi <b.adolphi@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>

diff --git a/drivers/staging/comedi/drivers/ni_660x.c b/drivers/staging/comedi/drivers/ni_660x.c
index 1e2041447667..f74fc5e6ba20 100644
--- a/drivers/staging/comedi/drivers/ni_660x.c
+++ b/drivers/staging/comedi/drivers/ni_660x.c
@@ -52,7 +52,9 @@ enum ni_660x_constants {
 };
 
 #define NUM_PFI_CHANNELS 40
-/* really there are only up to 3 dma channels, but the register layout allows for 4 */
+/* really there are only up to 3 dma channels, but the register layout allows
+for 4 */
+
 #define MAX_DMA_CHANNEL 4
 
 /* See Register-Level Programmer Manual page 3.1 */
@@ -198,7 +200,7 @@ struct NI_660xRegisterData {
 	const char *name;	/*  Register Name */
 	int offset;		/*  Offset from base address from GPCT chip */
 	enum ni_660x_register_direction direction;
-	enum ni_660x_register_width size;	/*  1 byte, 2 bytes, or 4 bytes */
+	enum ni_660x_register_width size; /*  1 byte, 2 bytes, or 4 bytes */
 };
 
 static const struct NI_660xRegisterData registerData[NumRegisters] = {
@@ -382,8 +384,8 @@ enum global_interrupt_config_register_bits {
 };
 
 /* Offset of the GPCT chips from the base-adress of the card */
-static const unsigned GPCT_OFFSET[2] = { 0x0, 0x800 };	/* First chip is at base-address +
-							   0x00, etc. */
+/* First chip is at base-address + 0x00, etc. */
+static const unsigned GPCT_OFFSET[2] = { 0x0, 0x800 };
 
 /* Board description*/
 struct ni_660x_board {
@@ -712,7 +714,7 @@ static enum NI_660x_Register ni_gpct_to_660x_register(enum ni_gpct_register reg)
 		ni_660x_register = G3InterruptEnable;
 		break;
 	default:
-		printk("%s: unhandled register 0x%x in switch.\n",
+		printk(KERN_WARNING "%s: unhandled register 0x%x in switch.\n",
 		       __func__, reg);
 		BUG();
 		return 0;
@@ -737,7 +739,7 @@ static inline void ni_660x_write_register(struct comedi_device *dev,
 		writel(bits, write_address);
 		break;
 	default:
-		printk("%s: %s: bug! unhandled case (reg=0x%x) in switch.\n",
+		printk(KERN_WARNING "%s: %s: bug! unhandled case (reg=0x%x) in switch.\n",
 		       __FILE__, __func__, reg);
 		BUG();
 		break;
@@ -760,7 +762,7 @@ static inline unsigned ni_660x_read_register(struct comedi_device *dev,
 		return readl(read_address);
 		break;
 	default:
-		printk("%s: %s: bug! unhandled case (reg=0x%x) in switch.\n",
+		printk(KERN_WARNING "%s: %s: bug! unhandled case (reg=0x%x) in switch.\n",
 		       __FILE__, __func__, reg);
 		BUG();
 		break;
@@ -993,9 +995,9 @@ static int ni_660x_allocate_private(struct comedi_device *dev)
 	spin_lock_init(&private(dev)->mite_channel_lock);
 	spin_lock_init(&private(dev)->interrupt_lock);
 	spin_lock_init(&private(dev)->soft_reg_copy_lock);
-	for (i = 0; i < NUM_PFI_CHANNELS; ++i) {
+	for (i = 0; i < NUM_PFI_CHANNELS; ++i)
 		private(dev)->pfi_output_selects[i] = pfi_output_select_counter;
-	}
+
 	return 0;
 }
 
@@ -1008,9 +1010,8 @@ static int ni_660x_alloc_mite_rings(struct comedi_device *dev)
 		for (j = 0; j < counters_per_chip; ++j) {
 			private(dev)->mite_rings[i][j] =
 			    mite_alloc_ring(private(dev)->mite);
-			if (private(dev)->mite_rings[i][j] == NULL) {
+			if (private(dev)->mite_rings[i][j] == NULL)
 				return -ENOMEM;
-			}
 		}
 	}
 	return 0;
@@ -1022,9 +1023,8 @@ static void ni_660x_free_mite_rings(struct comedi_device *dev)
 	unsigned j;
 
 	for (i = 0; i < board(dev)->n_chips; ++i) {
-		for (j = 0; j < counters_per_chip; ++j) {
+		for (j = 0; j < counters_per_chip; ++j)
 			mite_free_ring(private(dev)->mite_rings[i][j]);
-		}
 	}
 }
 
@@ -1036,7 +1036,7 @@ static int ni_660x_attach(struct comedi_device *dev,
 	unsigned i;
 	unsigned global_interrupt_config_bits;
 
-	printk("comedi%d: ni_660x: ", dev->minor);
+	printk(KERN_INFO "comedi%d: ni_660x: ", dev->minor);
 
 	ret = ni_660x_allocate_private(dev);
 	if (ret < 0)
@@ -1049,7 +1049,7 @@ static int ni_660x_attach(struct comedi_device *dev,
 
 	ret = mite_setup2(private(dev)->mite, 1);
 	if (ret < 0) {
-		printk("error setting up mite\n");
+		printk(KERN_WARNING "error setting up mite\n");
 		return ret;
 	}
 	comedi_set_hw_dev(dev, &private(dev)->mite->pcidev->dev);
@@ -1057,7 +1057,7 @@ static int ni_660x_attach(struct comedi_device *dev,
 	if (ret < 0)
 		return ret;
 
-	printk(" %s ", dev->board_name);
+	printk(KERN_INFO " %s ", dev->board_name);
 
 	dev->n_subdevices = 2 + NI_660X_MAX_NUM_COUNTERS;
 
@@ -1078,15 +1078,17 @@ static int ni_660x_attach(struct comedi_device *dev,
 	s->insn_bits = ni_660x_dio_insn_bits;
 	s->insn_config = ni_660x_dio_insn_config;
 	s->io_bits = 0;		/* all bits default to input */
-	/*  we use the ioconfig registers to control dio direction, so zero output enables in stc dio control reg */
+	/*  we use the ioconfig registers to control dio direction, so zero
+	output enables in stc dio control reg */
 	ni_660x_write_register(dev, 0, 0, STCDIOControl);
 
-	private(dev)->counter_dev = ni_gpct_device_construct(dev,
-							     &ni_gpct_write_register,
-							     &ni_gpct_read_register,
-							     ni_gpct_variant_660x,
-							     ni_660x_num_counters
-							     (dev));
+	private(dev)->counter_dev
+		= ni_gpct_device_construct(dev,
+					   &ni_gpct_write_register,
+					   &ni_gpct_read_register,
+					   ni_gpct_variant_660x,
+					   ni_660x_num_counters
+					   (dev));
 	if (private(dev)->counter_dev == NULL)
 		return -ENOMEM;
 	for (i = 0; i < NI_660X_MAX_NUM_COUNTERS; ++i) {
@@ -1118,12 +1120,12 @@ static int ni_660x_attach(struct comedi_device *dev,
 			s->type = COMEDI_SUBD_UNUSED;
 		}
 	}
-	for (i = 0; i < board(dev)->n_chips; ++i) {
+	for (i = 0; i < board(dev)->n_chips; ++i)
 		init_tio_chip(dev, i);
-	}
-	for (i = 0; i < ni_660x_num_counters(dev); ++i) {
+
+	for (i = 0; i < ni_660x_num_counters(dev); ++i)
 		ni_tio_init_counter(&private(dev)->counter_dev->counters[i]);
-	}
+
 	for (i = 0; i < NUM_PFI_CHANNELS; ++i) {
 		if (i < min_counter_pfi_chan)
 			ni_660x_set_pfi_routing(dev, i, pfi_output_select_do);
@@ -1134,13 +1136,13 @@ static int ni_660x_attach(struct comedi_device *dev,
 	}
 	/* to be safe, set counterswap bits on tio chips after all the counter
 	   outputs have been set to high impedance mode */
-	for (i = 0; i < board(dev)->n_chips; ++i) {
+	for (i = 0; i < board(dev)->n_chips; ++i)
 		set_tio_counterswap(dev, i);
-	}
+
 	ret = request_irq(mite_irq(private(dev)->mite), ni_660x_interrupt,
 			  IRQF_SHARED, "ni_660x", dev);
 	if (ret < 0) {
-		printk(" irq not available\n");
+		printk(KERN_WARNING " irq not available\n");
 		return ret;
 	}
 	dev->irq = mite_irq(private(dev)->mite);
@@ -1149,13 +1151,13 @@ static int ni_660x_attach(struct comedi_device *dev,
 		global_interrupt_config_bits |= Cascade_Int_Enable_Bit;
 	ni_660x_write_register(dev, 0, global_interrupt_config_bits,
 			       GlobalInterruptConfigRegister);
-	printk("attached\n");
+	printk(KERN_INFO "attached\n");
 	return 0;
 }
 
 static int ni_660x_detach(struct comedi_device *dev)
 {
-	printk("comedi%d: ni_660x: remove\n", dev->minor);
+	printk(KERN_INFO "comedi%d: ni_660x: remove\n", dev->minor);
 
 	/* Free irq */
 	if (dev->irq)
@@ -1193,9 +1195,8 @@ static void init_tio_chip(struct comedi_device *dev, int chipset)
 			       private(dev)->
 			       dma_configuration_soft_copies[chipset],
 			       DMAConfigRegister);
-	for (i = 0; i < NUM_PFI_CHANNELS; ++i) {
+	for (i = 0; i < NUM_PFI_CHANNELS; ++i)
 		ni_660x_write_register(dev, chipset, 0, IOConfigReg(i));
-	}
 }
 
 static int
@@ -1234,7 +1235,7 @@ static int ni_660x_find_device(struct comedi_device *dev, int bus, int slot)
 			}
 		}
 	}
-	printk("no device found\n");
+	printk(KERN_WARNING "no device found\n");
 	mite_list_devices();
 	return -EIO;
 }

commit 6c381c5775ea5eb799bdc790dd6d6d43fe966134
Author: Roel Kluin <roel.kluin@gmail.com>
Date:   Tue Jan 19 21:46:48 2010 +0100

    Staging: Comedi: G1-3 status registers not read in ni_gpct_to_660x_register()
    
    Read from the right status register
    
    Signed-off-by: Roel Kluin <roel.kluin@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>

diff --git a/drivers/staging/comedi/drivers/ni_660x.c b/drivers/staging/comedi/drivers/ni_660x.c
index 404d3c516ed1..1e2041447667 100644
--- a/drivers/staging/comedi/drivers/ni_660x.c
+++ b/drivers/staging/comedi/drivers/ni_660x.c
@@ -691,13 +691,13 @@ static enum NI_660x_Register ni_gpct_to_660x_register(enum ni_gpct_register reg)
 		ni_660x_register = G0StatusRegister;
 		break;
 	case NITIO_G1_Status_Reg:
-		ni_660x_register = G0StatusRegister;
+		ni_660x_register = G1StatusRegister;
 		break;
 	case NITIO_G2_Status_Reg:
-		ni_660x_register = G0StatusRegister;
+		ni_660x_register = G2StatusRegister;
 		break;
 	case NITIO_G3_Status_Reg:
-		ni_660x_register = G0StatusRegister;
+		ni_660x_register = G3StatusRegister;
 		break;
 	case NITIO_G0_Interrupt_Enable_Reg:
 		ni_660x_register = G0InterruptEnable;

commit b6ac161364eccce1bea4a23a9de395883e90d7ab
Author: Stoyan Gaydarov <sgayda2@uiuc.edu>
Date:   Tue Jul 21 22:02:27 2009 -0500

    Staging: ARRAY_SIZE changes
    
    These changes were a direct result of using a semantic patch
    More information can be found at http://www.emn.fr/x-info/coccinelle/
    
    Signed-off-by: Stoyan Gaydarov <sgayda2@uiuc.edu>
    Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>

diff --git a/drivers/staging/comedi/drivers/ni_660x.c b/drivers/staging/comedi/drivers/ni_660x.c
index 772c9372e435..404d3c516ed1 100644
--- a/drivers/staging/comedi/drivers/ni_660x.c
+++ b/drivers/staging/comedi/drivers/ni_660x.c
@@ -454,7 +454,7 @@ static inline const struct ni_660x_board *board(struct comedi_device *dev)
 	return dev->board_ptr;
 }
 
-#define n_ni_660x_boards (sizeof(ni_660x_boards)/sizeof(ni_660x_boards[0]))
+#define n_ni_660x_boards ARRAY_SIZE(ni_660x_boards)
 
 static int ni_660x_attach(struct comedi_device *dev,
 			  struct comedi_devconfig *it);

commit 0a85b6f0ab0d2edb0d41b32697111ce0e4f43496
Author: Mithlesh Thukral <mithlesh@linsyssoft.com>
Date:   Mon Jun 8 21:04:41 2009 +0530

    Staging: Comedi: Lindent changes to comdi driver in staging tree
    
    Lindent changes to comdi driver in staging tree.
    This patch is followed by the checkpatch.pl error fixes.
    Did not make them part of this patch as the patch size is already huge.
    
    Signed-off-by: Mithlesh Thukral <mithlesh@linsyssoft.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>

diff --git a/drivers/staging/comedi/drivers/ni_660x.c b/drivers/staging/comedi/drivers/ni_660x.c
index 11e9b0411805..772c9372e435 100644
--- a/drivers/staging/comedi/drivers/ni_660x.c
+++ b/drivers/staging/comedi/drivers/ni_660x.c
@@ -201,7 +201,6 @@ struct NI_660xRegisterData {
 	enum ni_660x_register_width size;	/*  1 byte, 2 bytes, or 4 bytes */
 };
 
-
 static const struct NI_660xRegisterData registerData[NumRegisters] = {
 	{"G0 Interrupt Acknowledge", 0x004, NI_660x_WRITE, DATA_2B},
 	{"G0 Status Register", 0x004, NI_660x_READ, DATA_2B},
@@ -316,21 +315,25 @@ static inline unsigned ioconfig_bitshift(unsigned pfi_channel)
 	else
 		return 8;
 }
+
 static inline unsigned pfi_output_select_mask(unsigned pfi_channel)
 {
 	return 0x3 << ioconfig_bitshift(pfi_channel);
 }
+
 static inline unsigned pfi_output_select_bits(unsigned pfi_channel,
-	unsigned output_select)
+					      unsigned output_select)
 {
 	return (output_select & 0x3) << ioconfig_bitshift(pfi_channel);
 }
+
 static inline unsigned pfi_input_select_mask(unsigned pfi_channel)
 {
 	return 0x7 << (4 + ioconfig_bitshift(pfi_channel));
 }
+
 static inline unsigned pfi_input_select_bits(unsigned pfi_channel,
-	unsigned input_select)
+					     unsigned input_select)
 {
 	return (input_select & 0x7) << (4 + ioconfig_bitshift(pfi_channel));
 }
@@ -341,6 +344,7 @@ static inline unsigned dma_select_mask(unsigned dma_channel)
 	BUG_ON(dma_channel >= MAX_DMA_CHANNEL);
 	return 0x1f << (8 * dma_channel);
 }
+
 enum dma_selection {
 	dma_selection_none = 0x1f,
 };
@@ -349,11 +353,13 @@ static inline unsigned dma_selection_counter(unsigned counter_index)
 	BUG_ON(counter_index >= counters_per_chip);
 	return counter_index;
 }
+
 static inline unsigned dma_select_bits(unsigned dma_channel, unsigned selection)
 {
 	BUG_ON(dma_channel >= MAX_DMA_CHANNEL);
 	return (selection << (8 * dma_channel)) & dma_select_mask(dma_channel);
 }
+
 static inline unsigned dma_reset_bit(unsigned dma_channel)
 {
 	BUG_ON(dma_channel >= MAX_DMA_CHANNEL);
@@ -388,36 +394,37 @@ struct ni_660x_board {
 
 static const struct ni_660x_board ni_660x_boards[] = {
 	{
-	.dev_id = 0x2c60,
-	.name = "PCI-6601",
-	.n_chips = 1,
-		},
+	 .dev_id = 0x2c60,
+	 .name = "PCI-6601",
+	 .n_chips = 1,
+	 },
 	{
-	.dev_id = 0x1310,
-	.name = "PCI-6602",
-	.n_chips = 2,
-		},
+	 .dev_id = 0x1310,
+	 .name = "PCI-6602",
+	 .n_chips = 2,
+	 },
 	{
-	.dev_id = 0x1360,
-	.name = "PXI-6602",
-	.n_chips = 2,
-		},
+	 .dev_id = 0x1360,
+	 .name = "PXI-6602",
+	 .n_chips = 2,
+	 },
 	{
-	.dev_id = 0x2cc0,
-	.name = "PXI-6608",
-	.n_chips = 2,
-		},
+	 .dev_id = 0x2cc0,
+	 .name = "PXI-6608",
+	 .n_chips = 2,
+	 },
 };
 
 #define NI_660X_MAX_NUM_CHIPS 2
 #define NI_660X_MAX_NUM_COUNTERS (NI_660X_MAX_NUM_CHIPS * counters_per_chip)
 
 static DEFINE_PCI_DEVICE_TABLE(ni_660x_pci_table) = {
-	{PCI_VENDOR_ID_NATINST, 0x2c60, PCI_ANY_ID, PCI_ANY_ID, 0, 0, 0},
-	{PCI_VENDOR_ID_NATINST, 0x1310, PCI_ANY_ID, PCI_ANY_ID, 0, 0, 0},
-	{PCI_VENDOR_ID_NATINST, 0x1360, PCI_ANY_ID, PCI_ANY_ID, 0, 0, 0},
-	{PCI_VENDOR_ID_NATINST, 0x2cc0, PCI_ANY_ID, PCI_ANY_ID, 0, 0, 0},
-	{0}
+	{
+	PCI_VENDOR_ID_NATINST, 0x2c60, PCI_ANY_ID, PCI_ANY_ID, 0, 0, 0}, {
+	PCI_VENDOR_ID_NATINST, 0x1310, PCI_ANY_ID, PCI_ANY_ID, 0, 0, 0}, {
+	PCI_VENDOR_ID_NATINST, 0x1360, PCI_ANY_ID, PCI_ANY_ID, 0, 0, 0}, {
+	PCI_VENDOR_ID_NATINST, 0x2cc0, PCI_ANY_ID, PCI_ANY_ID, 0, 0, 0}, {
+	0}
 };
 
 MODULE_DEVICE_TABLE(pci, ni_660x_pci_table);
@@ -436,24 +443,26 @@ struct ni_660x_private {
 	unsigned short pfi_output_selects[NUM_PFI_CHANNELS];
 };
 
-static inline struct ni_660x_private *private(struct comedi_device * dev)
+static inline struct ni_660x_private *private(struct comedi_device *dev)
 {
 	return dev->private;
 }
 
 /* initialized in ni_660x_find_device() */
-static inline const struct ni_660x_board *board(struct comedi_device * dev)
+static inline const struct ni_660x_board *board(struct comedi_device *dev)
 {
 	return dev->board_ptr;
 }
 
 #define n_ni_660x_boards (sizeof(ni_660x_boards)/sizeof(ni_660x_boards[0]))
 
-static int ni_660x_attach(struct comedi_device *dev, struct comedi_devconfig *it);
+static int ni_660x_attach(struct comedi_device *dev,
+			  struct comedi_devconfig *it);
 static int ni_660x_detach(struct comedi_device *dev);
 static void init_tio_chip(struct comedi_device *dev, int chipset);
-static void ni_660x_select_pfi_output(struct comedi_device *dev, unsigned pfi_channel,
-	unsigned output_select);
+static void ni_660x_select_pfi_output(struct comedi_device *dev,
+				      unsigned pfi_channel,
+				      unsigned output_select);
 
 static struct comedi_driver driver_ni_660x = {
 	.driver_name = "ni_660x",
@@ -466,21 +475,28 @@ COMEDI_PCI_INITCLEANUP(driver_ni_660x, ni_660x_pci_table);
 
 static int ni_660x_find_device(struct comedi_device *dev, int bus, int slot);
 static int ni_660x_set_pfi_routing(struct comedi_device *dev, unsigned chan,
-	unsigned source);
+				   unsigned source);
 
 /* Possible instructions for a GPCT */
 static int ni_660x_GPCT_rinsn(struct comedi_device *dev,
-	struct comedi_subdevice *s, struct comedi_insn *insn, unsigned int *data);
+			      struct comedi_subdevice *s,
+			      struct comedi_insn *insn, unsigned int *data);
 static int ni_660x_GPCT_insn_config(struct comedi_device *dev,
-	struct comedi_subdevice *s, struct comedi_insn *insn, unsigned int *data);
+				    struct comedi_subdevice *s,
+				    struct comedi_insn *insn,
+				    unsigned int *data);
 static int ni_660x_GPCT_winsn(struct comedi_device *dev,
-	struct comedi_subdevice *s, struct comedi_insn *insn, unsigned int *data);
+			      struct comedi_subdevice *s,
+			      struct comedi_insn *insn, unsigned int *data);
 
 /* Possible instructions for Digital IO */
 static int ni_660x_dio_insn_config(struct comedi_device *dev,
-	struct comedi_subdevice *s, struct comedi_insn *insn, unsigned int *data);
+				   struct comedi_subdevice *s,
+				   struct comedi_insn *insn,
+				   unsigned int *data);
 static int ni_660x_dio_insn_bits(struct comedi_device *dev,
-	struct comedi_subdevice *s, struct comedi_insn *insn, unsigned int *data);
+				 struct comedi_subdevice *s,
+				 struct comedi_insn *insn, unsigned int *data);
 
 static inline unsigned ni_660x_num_counters(struct comedi_device *dev)
 {
@@ -697,7 +713,7 @@ static enum NI_660x_Register ni_gpct_to_660x_register(enum ni_gpct_register reg)
 		break;
 	default:
 		printk("%s: unhandled register 0x%x in switch.\n",
-			__func__, reg);
+		       __func__, reg);
 		BUG();
 		return 0;
 		break;
@@ -706,11 +722,12 @@ static enum NI_660x_Register ni_gpct_to_660x_register(enum ni_gpct_register reg)
 }
 
 static inline void ni_660x_write_register(struct comedi_device *dev,
-	unsigned chip_index, unsigned bits, enum NI_660x_Register reg)
+					  unsigned chip_index, unsigned bits,
+					  enum NI_660x_Register reg)
 {
 	void *const write_address =
-		private(dev)->mite->daq_io_addr + GPCT_OFFSET[chip_index] +
-		registerData[reg].offset;
+	    private(dev)->mite->daq_io_addr + GPCT_OFFSET[chip_index] +
+	    registerData[reg].offset;
 
 	switch (registerData[reg].size) {
 	case DATA_2B:
@@ -721,18 +738,19 @@ static inline void ni_660x_write_register(struct comedi_device *dev,
 		break;
 	default:
 		printk("%s: %s: bug! unhandled case (reg=0x%x) in switch.\n",
-			__FILE__, __func__, reg);
+		       __FILE__, __func__, reg);
 		BUG();
 		break;
 	}
 }
 
 static inline unsigned ni_660x_read_register(struct comedi_device *dev,
-	unsigned chip_index, enum NI_660x_Register reg)
+					     unsigned chip_index,
+					     enum NI_660x_Register reg)
 {
 	void *const read_address =
-		private(dev)->mite->daq_io_addr + GPCT_OFFSET[chip_index] +
-		registerData[reg].offset;
+	    private(dev)->mite->daq_io_addr + GPCT_OFFSET[chip_index] +
+	    registerData[reg].offset;
 
 	switch (registerData[reg].size) {
 	case DATA_2B:
@@ -743,7 +761,7 @@ static inline unsigned ni_660x_read_register(struct comedi_device *dev,
 		break;
 	default:
 		printk("%s: %s: bug! unhandled case (reg=0x%x) in switch.\n",
-			__FILE__, __func__, reg);
+		       __FILE__, __func__, reg);
 		BUG();
 		break;
 	}
@@ -751,65 +769,72 @@ static inline unsigned ni_660x_read_register(struct comedi_device *dev,
 }
 
 static void ni_gpct_write_register(struct ni_gpct *counter, unsigned bits,
-	enum ni_gpct_register reg)
+				   enum ni_gpct_register reg)
 {
 	struct comedi_device *dev = counter->counter_dev->dev;
 	enum NI_660x_Register ni_660x_register = ni_gpct_to_660x_register(reg);
 	ni_660x_write_register(dev, counter->chip_index, bits,
-		ni_660x_register);
+			       ni_660x_register);
 }
 
 static unsigned ni_gpct_read_register(struct ni_gpct *counter,
-	enum ni_gpct_register reg)
+				      enum ni_gpct_register reg)
 {
 	struct comedi_device *dev = counter->counter_dev->dev;
 	enum NI_660x_Register ni_660x_register = ni_gpct_to_660x_register(reg);
 	return ni_660x_read_register(dev, counter->chip_index,
-		ni_660x_register);
+				     ni_660x_register);
 }
 
-static inline struct mite_dma_descriptor_ring *mite_ring(struct ni_660x_private * priv,
-	struct ni_gpct *counter)
+static inline struct mite_dma_descriptor_ring *mite_ring(struct ni_660x_private
+							 *priv,
+							 struct ni_gpct
+							 *counter)
 {
 	return priv->mite_rings[counter->chip_index][counter->counter_index];
 }
 
 static inline void ni_660x_set_dma_channel(struct comedi_device *dev,
-	unsigned mite_channel, struct ni_gpct *counter)
+					   unsigned mite_channel,
+					   struct ni_gpct *counter)
 {
 	unsigned long flags;
 	spin_lock_irqsave(&private(dev)->soft_reg_copy_lock, flags);
 	private(dev)->dma_configuration_soft_copies[counter->chip_index] &=
-		~dma_select_mask(mite_channel);
+	    ~dma_select_mask(mite_channel);
 	private(dev)->dma_configuration_soft_copies[counter->chip_index] |=
-		dma_select_bits(mite_channel,
-		dma_selection_counter(counter->counter_index));
+	    dma_select_bits(mite_channel,
+			    dma_selection_counter(counter->counter_index));
 	ni_660x_write_register(dev, counter->chip_index,
-		private(dev)->dma_configuration_soft_copies[counter->
-			chip_index] | dma_reset_bit(mite_channel),
-		DMAConfigRegister);
+			       private(dev)->
+			       dma_configuration_soft_copies
+			       [counter->chip_index] |
+			       dma_reset_bit(mite_channel), DMAConfigRegister);
 	mmiowb();
 	spin_unlock_irqrestore(&private(dev)->soft_reg_copy_lock, flags);
 }
 
 static inline void ni_660x_unset_dma_channel(struct comedi_device *dev,
-	unsigned mite_channel, struct ni_gpct *counter)
+					     unsigned mite_channel,
+					     struct ni_gpct *counter)
 {
 	unsigned long flags;
 	spin_lock_irqsave(&private(dev)->soft_reg_copy_lock, flags);
 	private(dev)->dma_configuration_soft_copies[counter->chip_index] &=
-		~dma_select_mask(mite_channel);
+	    ~dma_select_mask(mite_channel);
 	private(dev)->dma_configuration_soft_copies[counter->chip_index] |=
-		dma_select_bits(mite_channel, dma_selection_none);
+	    dma_select_bits(mite_channel, dma_selection_none);
 	ni_660x_write_register(dev, counter->chip_index,
-		private(dev)->dma_configuration_soft_copies[counter->
-			chip_index], DMAConfigRegister);
+			       private(dev)->
+			       dma_configuration_soft_copies
+			       [counter->chip_index], DMAConfigRegister);
 	mmiowb();
 	spin_unlock_irqrestore(&private(dev)->soft_reg_copy_lock, flags);
 }
 
 static int ni_660x_request_mite_channel(struct comedi_device *dev,
-	struct ni_gpct *counter, enum comedi_io_direction direction)
+					struct ni_gpct *counter,
+					enum comedi_io_direction direction)
 {
 	unsigned long flags;
 	struct mite_channel *mite_chan;
@@ -817,13 +842,12 @@ static int ni_660x_request_mite_channel(struct comedi_device *dev,
 	spin_lock_irqsave(&private(dev)->mite_channel_lock, flags);
 	BUG_ON(counter->mite_chan);
 	mite_chan =
-		mite_request_channel(private(dev)->mite, mite_ring(private(dev),
-			counter));
+	    mite_request_channel(private(dev)->mite, mite_ring(private(dev),
+							       counter));
 	if (mite_chan == NULL) {
-		spin_unlock_irqrestore(&private(dev)->mite_channel_lock,
-			flags);
+		spin_unlock_irqrestore(&private(dev)->mite_channel_lock, flags);
 		comedi_error(dev,
-			"failed to reserve mite dma channel for counter.");
+			     "failed to reserve mite dma channel for counter.");
 		return -EBUSY;
 	}
 	mite_chan->dir = direction;
@@ -833,7 +857,8 @@ static int ni_660x_request_mite_channel(struct comedi_device *dev,
 	return 0;
 }
 
-void ni_660x_release_mite_channel(struct comedi_device *dev, struct ni_gpct *counter)
+void ni_660x_release_mite_channel(struct comedi_device *dev,
+				  struct ni_gpct *counter)
 {
 	unsigned long flags;
 
@@ -858,7 +883,7 @@ static int ni_660x_cmd(struct comedi_device *dev, struct comedi_subdevice *s)
 	retval = ni_660x_request_mite_channel(dev, counter, COMEDI_INPUT);
 	if (retval) {
 		comedi_error(dev,
-			"no dma channel available for use by counter");
+			     "no dma channel available for use by counter");
 		return retval;
 	}
 	ni_tio_acknowledge_and_confirm(counter, NULL, NULL, NULL, NULL);
@@ -867,8 +892,8 @@ static int ni_660x_cmd(struct comedi_device *dev, struct comedi_subdevice *s)
 	return retval;
 }
 
-static int ni_660x_cmdtest(struct comedi_device *dev, struct comedi_subdevice *s,
-	struct comedi_cmd *cmd)
+static int ni_660x_cmdtest(struct comedi_device *dev,
+			   struct comedi_subdevice *s, struct comedi_cmd *cmd)
 {
 	struct ni_gpct *counter = subdev_to_counter(s);
 
@@ -893,19 +918,18 @@ static void set_tio_counterswap(struct comedi_device *dev, int chipset)
 	 */
 	if (chipset)
 		ni_660x_write_register(dev, chipset, CounterSwap,
-			ClockConfigRegister);
+				       ClockConfigRegister);
 	else
 		ni_660x_write_register(dev, chipset, 0, ClockConfigRegister);
 }
 
 static void ni_660x_handle_gpct_interrupt(struct comedi_device *dev,
-	struct comedi_subdevice *s)
+					  struct comedi_subdevice *s)
 {
 	ni_tio_handle_interrupt(subdev_to_counter(s), s);
 	if (s->async->events) {
-		if (s->async->
-			events & (COMEDI_CB_EOA | COMEDI_CB_ERROR |
-				COMEDI_CB_OVERFLOW)) {
+		if (s->async->events & (COMEDI_CB_EOA | COMEDI_CB_ERROR |
+					COMEDI_CB_OVERFLOW)) {
 			ni_660x_cancel(dev, s);
 		}
 		comedi_event(dev, s);
@@ -943,13 +967,14 @@ static int ni_660x_input_poll(struct comedi_device *dev,
 	return comedi_buf_read_n_available(s->async);
 }
 
-static int ni_660x_buf_change(struct comedi_device *dev, struct comedi_subdevice *s,
-	unsigned long new_size)
+static int ni_660x_buf_change(struct comedi_device *dev,
+			      struct comedi_subdevice *s,
+			      unsigned long new_size)
 {
 	int ret;
 
 	ret = mite_buf_change(mite_ring(private(dev), subdev_to_counter(s)),
-		s->async);
+			      s->async);
 	if (ret < 0)
 		return ret;
 
@@ -982,7 +1007,7 @@ static int ni_660x_alloc_mite_rings(struct comedi_device *dev)
 	for (i = 0; i < board(dev)->n_chips; ++i) {
 		for (j = 0; j < counters_per_chip; ++j) {
 			private(dev)->mite_rings[i][j] =
-				mite_alloc_ring(private(dev)->mite);
+			    mite_alloc_ring(private(dev)->mite);
 			if (private(dev)->mite_rings[i][j] == NULL) {
 				return -ENOMEM;
 			}
@@ -1003,7 +1028,8 @@ static void ni_660x_free_mite_rings(struct comedi_device *dev)
 	}
 }
 
-static int ni_660x_attach(struct comedi_device *dev, struct comedi_devconfig *it)
+static int ni_660x_attach(struct comedi_device *dev,
+			  struct comedi_devconfig *it)
 {
 	struct comedi_subdevice *s;
 	int ret;
@@ -1056,8 +1082,11 @@ static int ni_660x_attach(struct comedi_device *dev, struct comedi_devconfig *it
 	ni_660x_write_register(dev, 0, 0, STCDIOControl);
 
 	private(dev)->counter_dev = ni_gpct_device_construct(dev,
-		&ni_gpct_write_register, &ni_gpct_read_register,
-		ni_gpct_variant_660x, ni_660x_num_counters(dev));
+							     &ni_gpct_write_register,
+							     &ni_gpct_read_register,
+							     ni_gpct_variant_660x,
+							     ni_660x_num_counters
+							     (dev));
 	if (private(dev)->counter_dev == NULL)
 		return -ENOMEM;
 	for (i = 0; i < NI_660X_MAX_NUM_COUNTERS; ++i) {
@@ -1065,8 +1094,8 @@ static int ni_660x_attach(struct comedi_device *dev, struct comedi_devconfig *it
 		if (i < ni_660x_num_counters(dev)) {
 			s->type = COMEDI_SUBD_COUNTER;
 			s->subdev_flags =
-				SDF_READABLE | SDF_WRITABLE | SDF_LSAMPL |
-				SDF_CMD_READ /* | SDF_CMD_WRITE */ ;
+			    SDF_READABLE | SDF_WRITABLE | SDF_LSAMPL |
+			    SDF_CMD_READ /* | SDF_CMD_WRITE */ ;
 			s->n_chan = 3;
 			s->maxdata = 0xffffffff;
 			s->insn_read = ni_660x_GPCT_rinsn;
@@ -1082,9 +1111,9 @@ static int ni_660x_attach(struct comedi_device *dev, struct comedi_devconfig *it
 			s->private = &private(dev)->counter_dev->counters[i];
 
 			private(dev)->counter_dev->counters[i].chip_index =
-				i / counters_per_chip;
+			    i / counters_per_chip;
 			private(dev)->counter_dev->counters[i].counter_index =
-				i % counters_per_chip;
+			    i % counters_per_chip;
 		} else {
 			s->type = COMEDI_SUBD_UNUSED;
 		}
@@ -1100,7 +1129,7 @@ static int ni_660x_attach(struct comedi_device *dev, struct comedi_devconfig *it
 			ni_660x_set_pfi_routing(dev, i, pfi_output_select_do);
 		else
 			ni_660x_set_pfi_routing(dev, i,
-				pfi_output_select_counter);
+						pfi_output_select_counter);
 		ni_660x_select_pfi_output(dev, i, pfi_output_select_high_Z);
 	}
 	/* to be safe, set counterswap bits on tio chips after all the counter
@@ -1119,7 +1148,7 @@ static int ni_660x_attach(struct comedi_device *dev, struct comedi_devconfig *it
 	if (board(dev)->n_chips > 1)
 		global_interrupt_config_bits |= Cascade_Int_Enable_Bit;
 	ni_660x_write_register(dev, 0, global_interrupt_config_bits,
-		GlobalInterruptConfigRegister);
+			       GlobalInterruptConfigRegister);
 	printk("attached\n");
 	return 0;
 }
@@ -1145,7 +1174,7 @@ static int ni_660x_detach(struct comedi_device *dev)
 
 static int
 ni_660x_GPCT_rinsn(struct comedi_device *dev, struct comedi_subdevice *s,
-	struct comedi_insn *insn, unsigned int *data)
+		   struct comedi_insn *insn, unsigned int *data)
 {
 	return ni_tio_rinsn(subdev_to_counter(s), insn, data);
 }
@@ -1158,27 +1187,27 @@ static void init_tio_chip(struct comedi_device *dev, int chipset)
 	private(dev)->dma_configuration_soft_copies[chipset] = 0;
 	for (i = 0; i < MAX_DMA_CHANNEL; ++i) {
 		private(dev)->dma_configuration_soft_copies[chipset] |=
-			dma_select_bits(i,
-			dma_selection_none) & dma_select_mask(i);
+		    dma_select_bits(i, dma_selection_none) & dma_select_mask(i);
 	}
 	ni_660x_write_register(dev, chipset,
-		private(dev)->dma_configuration_soft_copies[chipset],
-		DMAConfigRegister);
-	for (i = 0; i < NUM_PFI_CHANNELS; ++i)
-	{
+			       private(dev)->
+			       dma_configuration_soft_copies[chipset],
+			       DMAConfigRegister);
+	for (i = 0; i < NUM_PFI_CHANNELS; ++i) {
 		ni_660x_write_register(dev, chipset, 0, IOConfigReg(i));
 	}
 }
 
 static int
 ni_660x_GPCT_insn_config(struct comedi_device *dev, struct comedi_subdevice *s,
-	struct comedi_insn *insn, unsigned int *data)
+			 struct comedi_insn *insn, unsigned int *data)
 {
 	return ni_tio_insn_config(subdev_to_counter(s), insn, data);
 }
 
 static int ni_660x_GPCT_winsn(struct comedi_device *dev,
-	struct comedi_subdevice *s, struct comedi_insn *insn, unsigned int *data)
+			      struct comedi_subdevice *s,
+			      struct comedi_insn *insn, unsigned int *data)
 {
 	return ni_tio_winsn(subdev_to_counter(s), insn, data);
 }
@@ -1193,7 +1222,7 @@ static int ni_660x_find_device(struct comedi_device *dev, int bus, int slot)
 			continue;
 		if (bus || slot) {
 			if (bus != mite->pcidev->bus->number ||
-				slot != PCI_SLOT(mite->pcidev->devfn))
+			    slot != PCI_SLOT(mite->pcidev->devfn))
 				continue;
 		}
 
@@ -1211,7 +1240,8 @@ static int ni_660x_find_device(struct comedi_device *dev, int bus, int slot)
 }
 
 static int ni_660x_dio_insn_bits(struct comedi_device *dev,
-	struct comedi_subdevice *s, struct comedi_insn *insn, unsigned int *data)
+				 struct comedi_subdevice *s,
+				 struct comedi_insn *insn, unsigned int *data)
 {
 	unsigned base_bitfield_channel = CR_CHAN(insn->chanspec);
 
@@ -1225,13 +1255,14 @@ static int ni_660x_dio_insn_bits(struct comedi_device *dev,
 	/* on return, data[1] contains the value of the digital
 	 * input and output lines. */
 	data[1] =
-		(ni_660x_read_register(dev, 0,
-			DIO32Input) >> base_bitfield_channel);
+	    (ni_660x_read_register(dev, 0,
+				   DIO32Input) >> base_bitfield_channel);
 	return 2;
 }
 
-static void ni_660x_select_pfi_output(struct comedi_device *dev, unsigned pfi_channel,
-	unsigned output_select)
+static void ni_660x_select_pfi_output(struct comedi_device *dev,
+				      unsigned pfi_channel,
+				      unsigned output_select)
 {
 	static const unsigned counter_4_7_first_pfi = 8;
 	static const unsigned counter_4_7_last_pfi = 23;
@@ -1240,33 +1271,41 @@ static void ni_660x_select_pfi_output(struct comedi_device *dev, unsigned pfi_ch
 	unsigned active_bits;
 	unsigned idle_bits;
 
-	if (board (dev)->n_chips > 1) {
+	if (board(dev)->n_chips > 1) {
 		if (output_select == pfi_output_select_counter &&
-			pfi_channel >= counter_4_7_first_pfi &&
-			pfi_channel <= counter_4_7_last_pfi) {
+		    pfi_channel >= counter_4_7_first_pfi &&
+		    pfi_channel <= counter_4_7_last_pfi) {
 			active_chipset = 1;
 			idle_chipset = 0;
-		}else {
+		} else {
 			active_chipset = 0;
 			idle_chipset = 1;
 		}
 	}
 
 	if (idle_chipset != active_chipset) {
-		idle_bits = ni_660x_read_register(dev, idle_chipset, IOConfigReg(pfi_channel));
+		idle_bits =
+		    ni_660x_read_register(dev, idle_chipset,
+					  IOConfigReg(pfi_channel));
 		idle_bits &= ~pfi_output_select_mask(pfi_channel);
-		idle_bits |= pfi_output_select_bits(pfi_channel, pfi_output_select_high_Z);
-		ni_660x_write_register(dev, idle_chipset, idle_bits, IOConfigReg(pfi_channel));
+		idle_bits |=
+		    pfi_output_select_bits(pfi_channel,
+					   pfi_output_select_high_Z);
+		ni_660x_write_register(dev, idle_chipset, idle_bits,
+				       IOConfigReg(pfi_channel));
 	}
 
-	active_bits = ni_660x_read_register(dev, active_chipset, IOConfigReg(pfi_channel));
+	active_bits =
+	    ni_660x_read_register(dev, active_chipset,
+				  IOConfigReg(pfi_channel));
 	active_bits &= ~pfi_output_select_mask(pfi_channel);
 	active_bits |= pfi_output_select_bits(pfi_channel, output_select);
-	ni_660x_write_register(dev, active_chipset, active_bits, IOConfigReg(pfi_channel));
+	ni_660x_write_register(dev, active_chipset, active_bits,
+			       IOConfigReg(pfi_channel));
 }
 
 static int ni_660x_set_pfi_routing(struct comedi_device *dev, unsigned chan,
-	unsigned source)
+				   unsigned source)
 {
 	if (source > num_pfi_output_selects)
 		return -EINVAL;
@@ -1284,18 +1323,21 @@ static int ni_660x_set_pfi_routing(struct comedi_device *dev, unsigned chan,
 	private(dev)->pfi_output_selects[chan] = source;
 	if (private(dev)->pfi_direction_bits & (((uint64_t) 1) << chan))
 		ni_660x_select_pfi_output(dev, chan,
-			private(dev)->pfi_output_selects[chan]);
+					  private(dev)->
+					  pfi_output_selects[chan]);
 	return 0;
 }
 
-static unsigned ni_660x_get_pfi_routing(struct comedi_device *dev, unsigned chan)
+static unsigned ni_660x_get_pfi_routing(struct comedi_device *dev,
+					unsigned chan)
 {
 	BUG_ON(chan >= NUM_PFI_CHANNELS);
 	return private(dev)->pfi_output_selects[chan];
 }
 
-static void ni660x_config_filter(struct comedi_device *dev, unsigned pfi_channel,
-	enum ni_gpct_filter_select filter)
+static void ni660x_config_filter(struct comedi_device *dev,
+				 unsigned pfi_channel,
+				 enum ni_gpct_filter_select filter)
 {
 	unsigned bits = ni_660x_read_register(dev, 0, IOConfigReg(pfi_channel));
 	bits &= ~pfi_input_select_mask(pfi_channel);
@@ -1304,7 +1346,8 @@ static void ni660x_config_filter(struct comedi_device *dev, unsigned pfi_channel
 }
 
 static int ni_660x_dio_insn_config(struct comedi_device *dev,
-	struct comedi_subdevice *s, struct comedi_insn *insn, unsigned int *data)
+				   struct comedi_subdevice *s,
+				   struct comedi_insn *insn, unsigned int *data)
 {
 	int chan = CR_CHAN(insn->chanspec);
 
@@ -1317,7 +1360,8 @@ static int ni_660x_dio_insn_config(struct comedi_device *dev,
 	case INSN_CONFIG_DIO_OUTPUT:
 		private(dev)->pfi_direction_bits |= ((uint64_t) 1) << chan;
 		ni_660x_select_pfi_output(dev, chan,
-			private(dev)->pfi_output_selects[chan]);
+					  private(dev)->
+					  pfi_output_selects[chan]);
 		break;
 	case INSN_CONFIG_DIO_INPUT:
 		private(dev)->pfi_direction_bits &= ~(((uint64_t) 1) << chan);
@@ -1325,9 +1369,8 @@ static int ni_660x_dio_insn_config(struct comedi_device *dev,
 		break;
 	case INSN_CONFIG_DIO_QUERY:
 		data[1] =
-			(private(dev)->
-			pfi_direction_bits & (((uint64_t) 1) << chan)) ?
-			COMEDI_OUTPUT : COMEDI_INPUT;
+		    (private(dev)->pfi_direction_bits &
+		     (((uint64_t) 1) << chan)) ? COMEDI_OUTPUT : COMEDI_INPUT;
 		return 0;
 	case INSN_CONFIG_SET_ROUTING:
 		return ni_660x_set_pfi_routing(dev, chan, data[1]);

commit 25436dc9d84f1be60ff549c9ab712bba2835f284
Author: Greg Kroah-Hartman <gregkh@suse.de>
Date:   Mon Apr 27 15:14:34 2009 -0700

    Staging: comedi: remove RT code
    
    This removes the unused RT code from the comedi subsystem.
    
    A lot of drivers needed to then include interrupt.h on their own, as they
    were picking it up through the comedi_rt.h inclusion.
    
    Cc: Ian Abbott <abbotti@mev.co.uk>
    Cc: Frank Mori Hess <fmhess@users.sourceforge.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>

diff --git a/drivers/staging/comedi/drivers/ni_660x.c b/drivers/staging/comedi/drivers/ni_660x.c
index 68a6ec8fd1a0..11e9b0411805 100644
--- a/drivers/staging/comedi/drivers/ni_660x.c
+++ b/drivers/staging/comedi/drivers/ni_660x.c
@@ -40,6 +40,7 @@ DAQ 6601/6602 User Manual (NI 322137B-01)
 
 */
 
+#include <linux/interrupt.h>
 #include "../comedidev.h"
 #include "mite.h"
 #include "ni_tio.h"

commit 5f74ea14c07fee91d3bdbaad88bff6264c6200e6
Author: Greg Kroah-Hartman <gregkh@suse.de>
Date:   Mon Apr 27 14:44:31 2009 -0700

    Staging: comedi: remove comedi-specific wrappers
    
    There are a number of comedi "wrappers" for some RT functions that are
    about to go away.  This patch removes all of the wrapper calls within
    the comedi drivers and core in order to prepare for removing the RT
    comedi code.
    
    Cc: Ian Abbott <abbotti@mev.co.uk>
    Cc: Frank Mori Hess <fmhess@users.sourceforge.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>

diff --git a/drivers/staging/comedi/drivers/ni_660x.c b/drivers/staging/comedi/drivers/ni_660x.c
index 78c106ce5fa5..68a6ec8fd1a0 100644
--- a/drivers/staging/comedi/drivers/ni_660x.c
+++ b/drivers/staging/comedi/drivers/ni_660x.c
@@ -695,7 +695,7 @@ static enum NI_660x_Register ni_gpct_to_660x_register(enum ni_gpct_register reg)
 		ni_660x_register = G3InterruptEnable;
 		break;
 	default:
-		rt_printk("%s: unhandled register 0x%x in switch.\n",
+		printk("%s: unhandled register 0x%x in switch.\n",
 			__func__, reg);
 		BUG();
 		return 0;
@@ -719,7 +719,7 @@ static inline void ni_660x_write_register(struct comedi_device *dev,
 		writel(bits, write_address);
 		break;
 	default:
-		rt_printk("%s: %s: bug! unhandled case (reg=0x%x) in switch.\n",
+		printk("%s: %s: bug! unhandled case (reg=0x%x) in switch.\n",
 			__FILE__, __func__, reg);
 		BUG();
 		break;
@@ -741,7 +741,7 @@ static inline unsigned ni_660x_read_register(struct comedi_device *dev,
 		return readl(read_address);
 		break;
 	default:
-		rt_printk("%s: %s: bug! unhandled case (reg=0x%x) in switch.\n",
+		printk("%s: %s: bug! unhandled case (reg=0x%x) in switch.\n",
 			__FILE__, __func__, reg);
 		BUG();
 		break;
@@ -777,7 +777,7 @@ static inline void ni_660x_set_dma_channel(struct comedi_device *dev,
 	unsigned mite_channel, struct ni_gpct *counter)
 {
 	unsigned long flags;
-	comedi_spin_lock_irqsave(&private(dev)->soft_reg_copy_lock, flags);
+	spin_lock_irqsave(&private(dev)->soft_reg_copy_lock, flags);
 	private(dev)->dma_configuration_soft_copies[counter->chip_index] &=
 		~dma_select_mask(mite_channel);
 	private(dev)->dma_configuration_soft_copies[counter->chip_index] |=
@@ -788,14 +788,14 @@ static inline void ni_660x_set_dma_channel(struct comedi_device *dev,
 			chip_index] | dma_reset_bit(mite_channel),
 		DMAConfigRegister);
 	mmiowb();
-	comedi_spin_unlock_irqrestore(&private(dev)->soft_reg_copy_lock, flags);
+	spin_unlock_irqrestore(&private(dev)->soft_reg_copy_lock, flags);
 }
 
 static inline void ni_660x_unset_dma_channel(struct comedi_device *dev,
 	unsigned mite_channel, struct ni_gpct *counter)
 {
 	unsigned long flags;
-	comedi_spin_lock_irqsave(&private(dev)->soft_reg_copy_lock, flags);
+	spin_lock_irqsave(&private(dev)->soft_reg_copy_lock, flags);
 	private(dev)->dma_configuration_soft_copies[counter->chip_index] &=
 		~dma_select_mask(mite_channel);
 	private(dev)->dma_configuration_soft_copies[counter->chip_index] |=
@@ -804,7 +804,7 @@ static inline void ni_660x_unset_dma_channel(struct comedi_device *dev,
 		private(dev)->dma_configuration_soft_copies[counter->
 			chip_index], DMAConfigRegister);
 	mmiowb();
-	comedi_spin_unlock_irqrestore(&private(dev)->soft_reg_copy_lock, flags);
+	spin_unlock_irqrestore(&private(dev)->soft_reg_copy_lock, flags);
 }
 
 static int ni_660x_request_mite_channel(struct comedi_device *dev,
@@ -813,13 +813,13 @@ static int ni_660x_request_mite_channel(struct comedi_device *dev,
 	unsigned long flags;
 	struct mite_channel *mite_chan;
 
-	comedi_spin_lock_irqsave(&private(dev)->mite_channel_lock, flags);
+	spin_lock_irqsave(&private(dev)->mite_channel_lock, flags);
 	BUG_ON(counter->mite_chan);
 	mite_chan =
 		mite_request_channel(private(dev)->mite, mite_ring(private(dev),
 			counter));
 	if (mite_chan == NULL) {
-		comedi_spin_unlock_irqrestore(&private(dev)->mite_channel_lock,
+		spin_unlock_irqrestore(&private(dev)->mite_channel_lock,
 			flags);
 		comedi_error(dev,
 			"failed to reserve mite dma channel for counter.");
@@ -828,7 +828,7 @@ static int ni_660x_request_mite_channel(struct comedi_device *dev,
 	mite_chan->dir = direction;
 	ni_tio_set_mite_channel(counter, mite_chan);
 	ni_660x_set_dma_channel(dev, mite_chan->channel, counter);
-	comedi_spin_unlock_irqrestore(&private(dev)->mite_channel_lock, flags);
+	spin_unlock_irqrestore(&private(dev)->mite_channel_lock, flags);
 	return 0;
 }
 
@@ -836,7 +836,7 @@ void ni_660x_release_mite_channel(struct comedi_device *dev, struct ni_gpct *cou
 {
 	unsigned long flags;
 
-	comedi_spin_lock_irqsave(&private(dev)->mite_channel_lock, flags);
+	spin_lock_irqsave(&private(dev)->mite_channel_lock, flags);
 	if (counter->mite_chan) {
 		struct mite_channel *mite_chan = counter->mite_chan;
 
@@ -844,7 +844,7 @@ void ni_660x_release_mite_channel(struct comedi_device *dev, struct ni_gpct *cou
 		ni_tio_set_mite_channel(counter, NULL);
 		mite_release_channel(mite_chan);
 	}
-	comedi_spin_unlock_irqrestore(&private(dev)->mite_channel_lock, flags);
+	spin_unlock_irqrestore(&private(dev)->mite_channel_lock, flags);
 }
 
 static int ni_660x_cmd(struct comedi_device *dev, struct comedi_subdevice *s)
@@ -921,13 +921,13 @@ static irqreturn_t ni_660x_interrupt(int irq, void *d)
 	if (dev->attached == 0)
 		return IRQ_NONE;
 	/* lock to avoid race with comedi_poll */
-	comedi_spin_lock_irqsave(&private(dev)->interrupt_lock, flags);
+	spin_lock_irqsave(&private(dev)->interrupt_lock, flags);
 	smp_mb();
 	for (i = 0; i < ni_660x_num_counters(dev); ++i) {
 		s = dev->subdevices + NI_660X_GPCT_SUBDEV(i);
 		ni_660x_handle_gpct_interrupt(dev, s);
 	}
-	comedi_spin_unlock_irqrestore(&private(dev)->interrupt_lock, flags);
+	spin_unlock_irqrestore(&private(dev)->interrupt_lock, flags);
 	return IRQ_HANDLED;
 }
 
@@ -936,9 +936,9 @@ static int ni_660x_input_poll(struct comedi_device *dev,
 {
 	unsigned long flags;
 	/* lock to avoid race with comedi_poll */
-	comedi_spin_lock_irqsave(&private(dev)->interrupt_lock, flags);
+	spin_lock_irqsave(&private(dev)->interrupt_lock, flags);
 	mite_sync_input_dma(subdev_to_counter(s)->mite_chan, s->async);
-	comedi_spin_unlock_irqrestore(&private(dev)->interrupt_lock, flags);
+	spin_unlock_irqrestore(&private(dev)->interrupt_lock, flags);
 	return comedi_buf_read_n_available(s->async);
 }
 
@@ -1107,10 +1107,8 @@ static int ni_660x_attach(struct comedi_device *dev, struct comedi_devconfig *it
 	for (i = 0; i < board(dev)->n_chips; ++i) {
 		set_tio_counterswap(dev, i);
 	}
-	ret = comedi_request_irq(mite_irq(private(dev)->mite),
-				 ni_660x_interrupt, IRQF_SHARED, "ni_660x",
-				 dev);
-
+	ret = request_irq(mite_irq(private(dev)->mite), ni_660x_interrupt,
+			  IRQF_SHARED, "ni_660x", dev);
 	if (ret < 0) {
 		printk(" irq not available\n");
 		return ret;
@@ -1131,7 +1129,7 @@ static int ni_660x_detach(struct comedi_device *dev)
 
 	/* Free irq */
 	if (dev->irq)
-		comedi_free_irq(dev->irq, dev);
+		free_irq(dev->irq, dev);
 
 	if (dev->private) {
 		if (private(dev)->counter_dev)

commit 68c3dbff9fc9f25872408d0e95980d41733d48d0
Author: Bill Pemberton <wfp5p@virginia.edu>
Date:   Wed Apr 22 21:11:49 2009 -0400

    Staging: comedi: fix the way structs are initialized.
    
    Change from the foo: bar format to the .foo = bar format.
    
    Signed-off-by: Bill Pemberton <wfp5p@virginia.edu>
    Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>

diff --git a/drivers/staging/comedi/drivers/ni_660x.c b/drivers/staging/comedi/drivers/ni_660x.c
index 3c35dab02796..78c106ce5fa5 100644
--- a/drivers/staging/comedi/drivers/ni_660x.c
+++ b/drivers/staging/comedi/drivers/ni_660x.c
@@ -387,24 +387,24 @@ struct ni_660x_board {
 
 static const struct ni_660x_board ni_660x_boards[] = {
 	{
-	      dev_id:	0x2c60,
-	      name:	"PCI-6601",
-	      n_chips:	1,
+	.dev_id = 0x2c60,
+	.name = "PCI-6601",
+	.n_chips = 1,
 		},
 	{
-	      dev_id:	0x1310,
-	      name:	"PCI-6602",
-	      n_chips:	2,
+	.dev_id = 0x1310,
+	.name = "PCI-6602",
+	.n_chips = 2,
 		},
 	{
-	      dev_id:	0x1360,
-	      name:	"PXI-6602",
-	      n_chips:	2,
+	.dev_id = 0x1360,
+	.name = "PXI-6602",
+	.n_chips = 2,
 		},
 	{
-	      dev_id:	0x2cc0,
-	      name:	"PXI-6608",
-	      n_chips:	2,
+	.dev_id = 0x2cc0,
+	.name = "PXI-6608",
+	.n_chips = 2,
 		},
 };
 
@@ -455,10 +455,10 @@ static void ni_660x_select_pfi_output(struct comedi_device *dev, unsigned pfi_ch
 	unsigned output_select);
 
 static struct comedi_driver driver_ni_660x = {
-      driver_name:"ni_660x",
-      module:THIS_MODULE,
-      attach:ni_660x_attach,
-      detach:ni_660x_detach,
+	.driver_name = "ni_660x",
+	.module = THIS_MODULE,
+	.attach = ni_660x_attach,
+	.detach = ni_660x_detach,
 };
 
 COMEDI_PCI_INITCLEANUP(driver_ni_660x, ni_660x_pci_table);

commit c3744138715045adb316284ee7a1e608f0278f6c
Author: Bill Pemberton <wfp5p@virginia.edu>
Date:   Wed Apr 22 21:11:47 2009 -0400

    Staging: comedi: remove assignment in conditionals
    
    Signed-off-by: Bill Pemberton <wfp5p@virginia.edu>
    Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>

diff --git a/drivers/staging/comedi/drivers/ni_660x.c b/drivers/staging/comedi/drivers/ni_660x.c
index b11f134e8c70..3c35dab02796 100644
--- a/drivers/staging/comedi/drivers/ni_660x.c
+++ b/drivers/staging/comedi/drivers/ni_660x.c
@@ -960,8 +960,10 @@ static int ni_660x_allocate_private(struct comedi_device *dev)
 	int retval;
 	unsigned i;
 
-	if ((retval = alloc_private(dev, sizeof(struct ni_660x_private))) < 0)
+	retval = alloc_private(dev, sizeof(struct ni_660x_private));
+	if (retval < 0)
 		return retval;
+
 	spin_lock_init(&private(dev)->mite_channel_lock);
 	spin_lock_init(&private(dev)->interrupt_lock);
 	spin_lock_init(&private(dev)->soft_reg_copy_lock);
@@ -1105,9 +1107,11 @@ static int ni_660x_attach(struct comedi_device *dev, struct comedi_devconfig *it
 	for (i = 0; i < board(dev)->n_chips; ++i) {
 		set_tio_counterswap(dev, i);
 	}
-	if ((ret = comedi_request_irq(mite_irq(private(dev)->mite),
-				&ni_660x_interrupt, IRQF_SHARED, "ni_660x",
-				dev)) < 0) {
+	ret = comedi_request_irq(mite_irq(private(dev)->mite),
+				 ni_660x_interrupt, IRQF_SHARED, "ni_660x",
+				 dev);
+
+	if (ret < 0) {
 		printk(" irq not available\n");
 		return ret;
 	}

commit 53106ae68acf6eda9593150a25fc44e30fd5ff68
Author: Bill Pemberton <wfp5p@virginia.edu>
Date:   Thu Apr 9 16:07:21 2009 -0400

    Staging Comedi: fix spacing around parens
    
    Signed-off-by: Bill Pemberton <wfp5p@virginia.edu>
    Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>

diff --git a/drivers/staging/comedi/drivers/ni_660x.c b/drivers/staging/comedi/drivers/ni_660x.c
index d4a6cf3dde67..b11f134e8c70 100644
--- a/drivers/staging/comedi/drivers/ni_660x.c
+++ b/drivers/staging/comedi/drivers/ni_660x.c
@@ -1161,7 +1161,7 @@ static void init_tio_chip(struct comedi_device *dev, int chipset)
 	ni_660x_write_register(dev, chipset,
 		private(dev)->dma_configuration_soft_copies[chipset],
 		DMAConfigRegister);
-	for(i = 0; i < NUM_PFI_CHANNELS; ++i)
+	for (i = 0; i < NUM_PFI_CHANNELS; ++i)
 	{
 		ni_660x_write_register(dev, chipset, 0, IOConfigReg(i));
 	}
@@ -1237,8 +1237,8 @@ static void ni_660x_select_pfi_output(struct comedi_device *dev, unsigned pfi_ch
 	unsigned active_bits;
 	unsigned idle_bits;
 
-	if(board(dev)->n_chips > 1) {
-		if(output_select == pfi_output_select_counter &&
+	if (board (dev)->n_chips > 1) {
+		if (output_select == pfi_output_select_counter &&
 			pfi_channel >= counter_4_7_first_pfi &&
 			pfi_channel <= counter_4_7_last_pfi) {
 			active_chipset = 1;
@@ -1249,7 +1249,7 @@ static void ni_660x_select_pfi_output(struct comedi_device *dev, unsigned pfi_ch
 		}
 	}
 
-	if(idle_chipset != active_chipset) {
+	if (idle_chipset != active_chipset) {
 		idle_bits = ni_660x_read_register(dev, idle_chipset, IOConfigReg(pfi_channel));
 		idle_bits &= ~pfi_output_select_mask(pfi_channel);
 		idle_bits |= pfi_output_select_bits(pfi_channel, pfi_output_select_high_Z);

commit da91b2692e0939b307f9047192d2b9fe07793e7a
Author: Bill Pemberton <wfp5p@virginia.edu>
Date:   Thu Apr 9 16:07:03 2009 -0400

    Staging: comedi: fix "foo * bar" should be "foo *bar"
    
    Signed-off-by: Bill Pemberton <wfp5p@virginia.edu>
    Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>

diff --git a/drivers/staging/comedi/drivers/ni_660x.c b/drivers/staging/comedi/drivers/ni_660x.c
index 6b0fe5c4022e..d4a6cf3dde67 100644
--- a/drivers/staging/comedi/drivers/ni_660x.c
+++ b/drivers/staging/comedi/drivers/ni_660x.c
@@ -448,10 +448,10 @@ static inline const struct ni_660x_board *board(struct comedi_device * dev)
 
 #define n_ni_660x_boards (sizeof(ni_660x_boards)/sizeof(ni_660x_boards[0]))
 
-static int ni_660x_attach(struct comedi_device * dev, struct comedi_devconfig * it);
-static int ni_660x_detach(struct comedi_device * dev);
-static void init_tio_chip(struct comedi_device * dev, int chipset);
-static void ni_660x_select_pfi_output(struct comedi_device * dev, unsigned pfi_channel,
+static int ni_660x_attach(struct comedi_device *dev, struct comedi_devconfig *it);
+static int ni_660x_detach(struct comedi_device *dev);
+static void init_tio_chip(struct comedi_device *dev, int chipset);
+static void ni_660x_select_pfi_output(struct comedi_device *dev, unsigned pfi_channel,
 	unsigned output_select);
 
 static struct comedi_driver driver_ni_660x = {
@@ -463,25 +463,25 @@ static struct comedi_driver driver_ni_660x = {
 
 COMEDI_PCI_INITCLEANUP(driver_ni_660x, ni_660x_pci_table);
 
-static int ni_660x_find_device(struct comedi_device * dev, int bus, int slot);
-static int ni_660x_set_pfi_routing(struct comedi_device * dev, unsigned chan,
+static int ni_660x_find_device(struct comedi_device *dev, int bus, int slot);
+static int ni_660x_set_pfi_routing(struct comedi_device *dev, unsigned chan,
 	unsigned source);
 
 /* Possible instructions for a GPCT */
-static int ni_660x_GPCT_rinsn(struct comedi_device * dev,
-	struct comedi_subdevice * s, struct comedi_insn * insn, unsigned int * data);
-static int ni_660x_GPCT_insn_config(struct comedi_device * dev,
-	struct comedi_subdevice * s, struct comedi_insn * insn, unsigned int * data);
-static int ni_660x_GPCT_winsn(struct comedi_device * dev,
-	struct comedi_subdevice * s, struct comedi_insn * insn, unsigned int * data);
+static int ni_660x_GPCT_rinsn(struct comedi_device *dev,
+	struct comedi_subdevice *s, struct comedi_insn *insn, unsigned int *data);
+static int ni_660x_GPCT_insn_config(struct comedi_device *dev,
+	struct comedi_subdevice *s, struct comedi_insn *insn, unsigned int *data);
+static int ni_660x_GPCT_winsn(struct comedi_device *dev,
+	struct comedi_subdevice *s, struct comedi_insn *insn, unsigned int *data);
 
 /* Possible instructions for Digital IO */
-static int ni_660x_dio_insn_config(struct comedi_device * dev,
-	struct comedi_subdevice * s, struct comedi_insn * insn, unsigned int * data);
-static int ni_660x_dio_insn_bits(struct comedi_device * dev,
-	struct comedi_subdevice * s, struct comedi_insn * insn, unsigned int * data);
+static int ni_660x_dio_insn_config(struct comedi_device *dev,
+	struct comedi_subdevice *s, struct comedi_insn *insn, unsigned int *data);
+static int ni_660x_dio_insn_bits(struct comedi_device *dev,
+	struct comedi_subdevice *s, struct comedi_insn *insn, unsigned int *data);
 
-static inline unsigned ni_660x_num_counters(struct comedi_device * dev)
+static inline unsigned ni_660x_num_counters(struct comedi_device *dev)
 {
 	return board(dev)->n_chips * counters_per_chip;
 }
@@ -704,7 +704,7 @@ static enum NI_660x_Register ni_gpct_to_660x_register(enum ni_gpct_register reg)
 	return ni_660x_register;
 }
 
-static inline void ni_660x_write_register(struct comedi_device * dev,
+static inline void ni_660x_write_register(struct comedi_device *dev,
 	unsigned chip_index, unsigned bits, enum NI_660x_Register reg)
 {
 	void *const write_address =
@@ -726,7 +726,7 @@ static inline void ni_660x_write_register(struct comedi_device * dev,
 	}
 }
 
-static inline unsigned ni_660x_read_register(struct comedi_device * dev,
+static inline unsigned ni_660x_read_register(struct comedi_device *dev,
 	unsigned chip_index, enum NI_660x_Register reg)
 {
 	void *const read_address =
@@ -773,7 +773,7 @@ static inline struct mite_dma_descriptor_ring *mite_ring(struct ni_660x_private
 	return priv->mite_rings[counter->chip_index][counter->counter_index];
 }
 
-static inline void ni_660x_set_dma_channel(struct comedi_device * dev,
+static inline void ni_660x_set_dma_channel(struct comedi_device *dev,
 	unsigned mite_channel, struct ni_gpct *counter)
 {
 	unsigned long flags;
@@ -791,7 +791,7 @@ static inline void ni_660x_set_dma_channel(struct comedi_device * dev,
 	comedi_spin_unlock_irqrestore(&private(dev)->soft_reg_copy_lock, flags);
 }
 
-static inline void ni_660x_unset_dma_channel(struct comedi_device * dev,
+static inline void ni_660x_unset_dma_channel(struct comedi_device *dev,
 	unsigned mite_channel, struct ni_gpct *counter)
 {
 	unsigned long flags;
@@ -807,7 +807,7 @@ static inline void ni_660x_unset_dma_channel(struct comedi_device * dev,
 	comedi_spin_unlock_irqrestore(&private(dev)->soft_reg_copy_lock, flags);
 }
 
-static int ni_660x_request_mite_channel(struct comedi_device * dev,
+static int ni_660x_request_mite_channel(struct comedi_device *dev,
 	struct ni_gpct *counter, enum comedi_io_direction direction)
 {
 	unsigned long flags;
@@ -832,7 +832,7 @@ static int ni_660x_request_mite_channel(struct comedi_device * dev,
 	return 0;
 }
 
-void ni_660x_release_mite_channel(struct comedi_device * dev, struct ni_gpct *counter)
+void ni_660x_release_mite_channel(struct comedi_device *dev, struct ni_gpct *counter)
 {
 	unsigned long flags;
 
@@ -847,7 +847,7 @@ void ni_660x_release_mite_channel(struct comedi_device * dev, struct ni_gpct *co
 	comedi_spin_unlock_irqrestore(&private(dev)->mite_channel_lock, flags);
 }
 
-static int ni_660x_cmd(struct comedi_device * dev, struct comedi_subdevice * s)
+static int ni_660x_cmd(struct comedi_device *dev, struct comedi_subdevice *s)
 {
 	int retval;
 
@@ -866,15 +866,15 @@ static int ni_660x_cmd(struct comedi_device * dev, struct comedi_subdevice * s)
 	return retval;
 }
 
-static int ni_660x_cmdtest(struct comedi_device * dev, struct comedi_subdevice * s,
-	struct comedi_cmd * cmd)
+static int ni_660x_cmdtest(struct comedi_device *dev, struct comedi_subdevice *s,
+	struct comedi_cmd *cmd)
 {
 	struct ni_gpct *counter = subdev_to_counter(s);
 
 	return ni_tio_cmdtest(counter, cmd);
 }
 
-static int ni_660x_cancel(struct comedi_device * dev, struct comedi_subdevice * s)
+static int ni_660x_cancel(struct comedi_device *dev, struct comedi_subdevice *s)
 {
 	struct ni_gpct *counter = subdev_to_counter(s);
 	int retval;
@@ -884,7 +884,7 @@ static int ni_660x_cancel(struct comedi_device * dev, struct comedi_subdevice *
 	return retval;
 }
 
-static void set_tio_counterswap(struct comedi_device * dev, int chipset)
+static void set_tio_counterswap(struct comedi_device *dev, int chipset)
 {
 	/* See P. 3.5 of the Register-Level Programming manual.  The
 	   CounterSwap bit has to be set on the second chip, otherwise
@@ -897,8 +897,8 @@ static void set_tio_counterswap(struct comedi_device * dev, int chipset)
 		ni_660x_write_register(dev, chipset, 0, ClockConfigRegister);
 }
 
-static void ni_660x_handle_gpct_interrupt(struct comedi_device * dev,
-	struct comedi_subdevice * s)
+static void ni_660x_handle_gpct_interrupt(struct comedi_device *dev,
+	struct comedi_subdevice *s)
 {
 	ni_tio_handle_interrupt(subdev_to_counter(s), s);
 	if (s->async->events) {
@@ -942,7 +942,7 @@ static int ni_660x_input_poll(struct comedi_device *dev,
 	return comedi_buf_read_n_available(s->async);
 }
 
-static int ni_660x_buf_change(struct comedi_device * dev, struct comedi_subdevice * s,
+static int ni_660x_buf_change(struct comedi_device *dev, struct comedi_subdevice *s,
 	unsigned long new_size)
 {
 	int ret;
@@ -955,7 +955,7 @@ static int ni_660x_buf_change(struct comedi_device * dev, struct comedi_subdevic
 	return 0;
 }
 
-static int ni_660x_allocate_private(struct comedi_device * dev)
+static int ni_660x_allocate_private(struct comedi_device *dev)
 {
 	int retval;
 	unsigned i;
@@ -971,7 +971,7 @@ static int ni_660x_allocate_private(struct comedi_device * dev)
 	return 0;
 }
 
-static int ni_660x_alloc_mite_rings(struct comedi_device * dev)
+static int ni_660x_alloc_mite_rings(struct comedi_device *dev)
 {
 	unsigned i;
 	unsigned j;
@@ -988,7 +988,7 @@ static int ni_660x_alloc_mite_rings(struct comedi_device * dev)
 	return 0;
 }
 
-static void ni_660x_free_mite_rings(struct comedi_device * dev)
+static void ni_660x_free_mite_rings(struct comedi_device *dev)
 {
 	unsigned i;
 	unsigned j;
@@ -1000,7 +1000,7 @@ static void ni_660x_free_mite_rings(struct comedi_device * dev)
 	}
 }
 
-static int ni_660x_attach(struct comedi_device * dev, struct comedi_devconfig * it)
+static int ni_660x_attach(struct comedi_device *dev, struct comedi_devconfig *it)
 {
 	struct comedi_subdevice *s;
 	int ret;
@@ -1121,7 +1121,7 @@ static int ni_660x_attach(struct comedi_device * dev, struct comedi_devconfig *
 	return 0;
 }
 
-static int ni_660x_detach(struct comedi_device * dev)
+static int ni_660x_detach(struct comedi_device *dev)
 {
 	printk("comedi%d: ni_660x: remove\n", dev->minor);
 
@@ -1141,13 +1141,13 @@ static int ni_660x_detach(struct comedi_device * dev)
 }
 
 static int
-ni_660x_GPCT_rinsn(struct comedi_device * dev, struct comedi_subdevice * s,
-	struct comedi_insn * insn, unsigned int * data)
+ni_660x_GPCT_rinsn(struct comedi_device *dev, struct comedi_subdevice *s,
+	struct comedi_insn *insn, unsigned int *data)
 {
 	return ni_tio_rinsn(subdev_to_counter(s), insn, data);
 }
 
-static void init_tio_chip(struct comedi_device * dev, int chipset)
+static void init_tio_chip(struct comedi_device *dev, int chipset)
 {
 	unsigned i;
 
@@ -1168,19 +1168,19 @@ static void init_tio_chip(struct comedi_device * dev, int chipset)
 }
 
 static int
-ni_660x_GPCT_insn_config(struct comedi_device * dev, struct comedi_subdevice * s,
-	struct comedi_insn * insn, unsigned int * data)
+ni_660x_GPCT_insn_config(struct comedi_device *dev, struct comedi_subdevice *s,
+	struct comedi_insn *insn, unsigned int *data)
 {
 	return ni_tio_insn_config(subdev_to_counter(s), insn, data);
 }
 
-static int ni_660x_GPCT_winsn(struct comedi_device * dev,
-	struct comedi_subdevice * s, struct comedi_insn * insn, unsigned int * data)
+static int ni_660x_GPCT_winsn(struct comedi_device *dev,
+	struct comedi_subdevice *s, struct comedi_insn *insn, unsigned int *data)
 {
 	return ni_tio_winsn(subdev_to_counter(s), insn, data);
 }
 
-static int ni_660x_find_device(struct comedi_device * dev, int bus, int slot)
+static int ni_660x_find_device(struct comedi_device *dev, int bus, int slot)
 {
 	struct mite_struct *mite;
 	int i;
@@ -1207,8 +1207,8 @@ static int ni_660x_find_device(struct comedi_device * dev, int bus, int slot)
 	return -EIO;
 }
 
-static int ni_660x_dio_insn_bits(struct comedi_device * dev,
-	struct comedi_subdevice * s, struct comedi_insn * insn, unsigned int * data)
+static int ni_660x_dio_insn_bits(struct comedi_device *dev,
+	struct comedi_subdevice *s, struct comedi_insn *insn, unsigned int *data)
 {
 	unsigned base_bitfield_channel = CR_CHAN(insn->chanspec);
 
@@ -1227,7 +1227,7 @@ static int ni_660x_dio_insn_bits(struct comedi_device * dev,
 	return 2;
 }
 
-static void ni_660x_select_pfi_output(struct comedi_device * dev, unsigned pfi_channel,
+static void ni_660x_select_pfi_output(struct comedi_device *dev, unsigned pfi_channel,
 	unsigned output_select)
 {
 	static const unsigned counter_4_7_first_pfi = 8;
@@ -1262,7 +1262,7 @@ static void ni_660x_select_pfi_output(struct comedi_device * dev, unsigned pfi_c
 	ni_660x_write_register(dev, active_chipset, active_bits, IOConfigReg(pfi_channel));
 }
 
-static int ni_660x_set_pfi_routing(struct comedi_device * dev, unsigned chan,
+static int ni_660x_set_pfi_routing(struct comedi_device *dev, unsigned chan,
 	unsigned source)
 {
 	if (source > num_pfi_output_selects)
@@ -1285,13 +1285,13 @@ static int ni_660x_set_pfi_routing(struct comedi_device * dev, unsigned chan,
 	return 0;
 }
 
-static unsigned ni_660x_get_pfi_routing(struct comedi_device * dev, unsigned chan)
+static unsigned ni_660x_get_pfi_routing(struct comedi_device *dev, unsigned chan)
 {
 	BUG_ON(chan >= NUM_PFI_CHANNELS);
 	return private(dev)->pfi_output_selects[chan];
 }
 
-static void ni660x_config_filter(struct comedi_device * dev, unsigned pfi_channel,
+static void ni660x_config_filter(struct comedi_device *dev, unsigned pfi_channel,
 	enum ni_gpct_filter_select filter)
 {
 	unsigned bits = ni_660x_read_register(dev, 0, IOConfigReg(pfi_channel));
@@ -1300,8 +1300,8 @@ static void ni660x_config_filter(struct comedi_device * dev, unsigned pfi_channe
 	ni_660x_write_register(dev, 0, bits, IOConfigReg(pfi_channel));
 }
 
-static int ni_660x_dio_insn_config(struct comedi_device * dev,
-	struct comedi_subdevice * s, struct comedi_insn * insn, unsigned int * data)
+static int ni_660x_dio_insn_config(struct comedi_device *dev,
+	struct comedi_subdevice *s, struct comedi_insn *insn, unsigned int *data)
 {
 	int chan = CR_CHAN(insn->chanspec);
 

commit ddcb01d458e8cbe33c76e4af11636257e8a14cb0
Author: Alessio Igor Bogani <abogani@texware.it>
Date:   Tue Mar 24 19:30:57 2009 +0100

    Staging: comedi: replace __FUNCTION__ usages
    
    __FUNCTION__ is gcc-specific, use __func__
    
    Signed-off-by: Alessio Igor Bogani <abogani@texware.it>
    Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>

diff --git a/drivers/staging/comedi/drivers/ni_660x.c b/drivers/staging/comedi/drivers/ni_660x.c
index 43aab610f326..6b0fe5c4022e 100644
--- a/drivers/staging/comedi/drivers/ni_660x.c
+++ b/drivers/staging/comedi/drivers/ni_660x.c
@@ -696,7 +696,7 @@ static enum NI_660x_Register ni_gpct_to_660x_register(enum ni_gpct_register reg)
 		break;
 	default:
 		rt_printk("%s: unhandled register 0x%x in switch.\n",
-			__FUNCTION__, reg);
+			__func__, reg);
 		BUG();
 		return 0;
 		break;
@@ -720,7 +720,7 @@ static inline void ni_660x_write_register(struct comedi_device * dev,
 		break;
 	default:
 		rt_printk("%s: %s: bug! unhandled case (reg=0x%x) in switch.\n",
-			__FILE__, __FUNCTION__, reg);
+			__FILE__, __func__, reg);
 		BUG();
 		break;
 	}
@@ -742,7 +742,7 @@ static inline unsigned ni_660x_read_register(struct comedi_device * dev,
 		break;
 	default:
 		rt_printk("%s: %s: bug! unhandled case (reg=0x%x) in switch.\n",
-			__FILE__, __FUNCTION__, reg);
+			__FILE__, __func__, reg);
 		BUG();
 		break;
 	}

commit 894db119734772c3694233bf2c9f7440a70d7736
Author: Frank Mori Hess <fmhess@users.sourceforge.net>
Date:   Tue Apr 14 10:55:09 2009 -0400

    Staging: Comedi: ni_600x: Added support for comedi_poll.
    
    Signed-off-by: Frank Mori Hess <fmhess@users.sourceforge.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>

diff --git a/drivers/staging/comedi/drivers/ni_660x.c b/drivers/staging/comedi/drivers/ni_660x.c
index 377a78afc1eb..43aab610f326 100644
--- a/drivers/staging/comedi/drivers/ni_660x.c
+++ b/drivers/staging/comedi/drivers/ni_660x.c
@@ -428,6 +428,8 @@ struct ni_660x_private {
 	struct mite_dma_descriptor_ring
 	*mite_rings[NI_660X_MAX_NUM_CHIPS][counters_per_chip];
 	spinlock_t mite_channel_lock;
+	/* interrupt_lock prevents races between interrupt and comedi_poll */
+	spinlock_t interrupt_lock;
 	unsigned dma_configuration_soft_copies[NI_660X_MAX_NUM_CHIPS];
 	spinlock_t soft_reg_copy_lock;
 	unsigned short pfi_output_selects[NUM_PFI_CHANNELS];
@@ -914,17 +916,32 @@ static irqreturn_t ni_660x_interrupt(int irq, void *d)
 	struct comedi_device *dev = d;
 	struct comedi_subdevice *s;
 	unsigned i;
+	unsigned long flags;
 
 	if (dev->attached == 0)
 		return IRQ_NONE;
+	/* lock to avoid race with comedi_poll */
+	comedi_spin_lock_irqsave(&private(dev)->interrupt_lock, flags);
 	smp_mb();
 	for (i = 0; i < ni_660x_num_counters(dev); ++i) {
 		s = dev->subdevices + NI_660X_GPCT_SUBDEV(i);
 		ni_660x_handle_gpct_interrupt(dev, s);
 	}
+	comedi_spin_unlock_irqrestore(&private(dev)->interrupt_lock, flags);
 	return IRQ_HANDLED;
 }
 
+static int ni_660x_input_poll(struct comedi_device *dev,
+			      struct comedi_subdevice *s)
+{
+	unsigned long flags;
+	/* lock to avoid race with comedi_poll */
+	comedi_spin_lock_irqsave(&private(dev)->interrupt_lock, flags);
+	mite_sync_input_dma(subdev_to_counter(s)->mite_chan, s->async);
+	comedi_spin_unlock_irqrestore(&private(dev)->interrupt_lock, flags);
+	return comedi_buf_read_n_available(s->async);
+}
+
 static int ni_660x_buf_change(struct comedi_device * dev, struct comedi_subdevice * s,
 	unsigned long new_size)
 {
@@ -946,6 +963,7 @@ static int ni_660x_allocate_private(struct comedi_device * dev)
 	if ((retval = alloc_private(dev, sizeof(struct ni_660x_private))) < 0)
 		return retval;
 	spin_lock_init(&private(dev)->mite_channel_lock);
+	spin_lock_init(&private(dev)->interrupt_lock);
 	spin_lock_init(&private(dev)->soft_reg_copy_lock);
 	for (i = 0; i < NUM_PFI_CHANNELS; ++i) {
 		private(dev)->pfi_output_selects[i] = pfi_output_select_counter;
@@ -1055,6 +1073,7 @@ static int ni_660x_attach(struct comedi_device * dev, struct comedi_devconfig *
 			s->len_chanlist = 1;
 			s->do_cmdtest = &ni_660x_cmdtest;
 			s->cancel = &ni_660x_cancel;
+			s->poll = &ni_660x_input_poll;
 			s->async_dma_dir = DMA_BIDIRECTIONAL;
 			s->buf_change = &ni_660x_buf_change;
 			s->private = &private(dev)->counter_dev->counters[i];

commit 2696fb57e6af653dd8b4df41b16754579f42fc78
Author: Bill Pemberton <wfp5p@virginia.edu>
Date:   Fri Mar 27 11:29:34 2009 -0400

    Staging: comedi: Remove C99 comments
    
    Signed-off-by: Bill Pemberton <wfp5p@virginia.edu>
    Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>

diff --git a/drivers/staging/comedi/drivers/ni_660x.c b/drivers/staging/comedi/drivers/ni_660x.c
index b75ea44c3307..377a78afc1eb 100644
--- a/drivers/staging/comedi/drivers/ni_660x.c
+++ b/drivers/staging/comedi/drivers/ni_660x.c
@@ -51,7 +51,7 @@ enum ni_660x_constants {
 };
 
 #define NUM_PFI_CHANNELS 40
-// really there are only up to 3 dma channels, but the register layout allows for 4
+/* really there are only up to 3 dma channels, but the register layout allows for 4 */
 #define MAX_DMA_CHANNEL 4
 
 /* See Register-Level Programmer Manual page 3.1 */
@@ -194,10 +194,10 @@ static inline unsigned NI_660X_GPCT_SUBDEV(unsigned index)
 
 struct NI_660xRegisterData {
 
-	const char *name;	// Register Name
-	int offset;		// Offset from base address from GPCT chip
+	const char *name;	/*  Register Name */
+	int offset;		/*  Offset from base address from GPCT chip */
 	enum ni_660x_register_direction direction;
-	enum ni_660x_register_width size;	// 1 byte, 2 bytes, or 4 bytes
+	enum ni_660x_register_width size;	/*  1 byte, 2 bytes, or 4 bytes */
 };
 
 
@@ -302,12 +302,12 @@ static const struct NI_660xRegisterData registerData[NumRegisters] = {
 	{"IO Config Register 38-39", 0x7A2, NI_660x_READ_WRITE, DATA_2B}
 };
 
-// kind of ENABLE for the second counter
+/* kind of ENABLE for the second counter */
 enum clock_config_register_bits {
 	CounterSwap = 0x1 << 21
 };
 
-// ioconfigreg
+/* ioconfigreg */
 static inline unsigned ioconfig_bitshift(unsigned pfi_channel)
 {
 	if (pfi_channel % 2)
@@ -334,7 +334,7 @@ static inline unsigned pfi_input_select_bits(unsigned pfi_channel,
 	return (input_select & 0x7) << (4 + ioconfig_bitshift(pfi_channel));
 }
 
-// dma configuration register bits
+/* dma configuration register bits */
 static inline unsigned dma_select_mask(unsigned dma_channel)
 {
 	BUG_ON(dma_channel >= MAX_DMA_CHANNEL);
@@ -374,7 +374,7 @@ enum global_interrupt_config_register_bits {
 	Global_Int_Enable_Bit = 0x80000000
 };
 
-// Offset of the GPCT chips from the base-adress of the card
+/* Offset of the GPCT chips from the base-adress of the card */
 static const unsigned GPCT_OFFSET[2] = { 0x0, 0x800 };	/* First chip is at base-address +
 							   0x00, etc. */
 
@@ -850,7 +850,7 @@ static int ni_660x_cmd(struct comedi_device * dev, struct comedi_subdevice * s)
 	int retval;
 
 	struct ni_gpct *counter = subdev_to_counter(s);
-//      const struct comedi_cmd *cmd = &s->async->cmd;
+/* const struct comedi_cmd *cmd = &s->async->cmd; */
 
 	retval = ni_660x_request_mite_channel(dev, counter, COMEDI_INPUT);
 	if (retval) {
@@ -1031,7 +1031,7 @@ static int ni_660x_attach(struct comedi_device * dev, struct comedi_devconfig *
 	s->insn_bits = ni_660x_dio_insn_bits;
 	s->insn_config = ni_660x_dio_insn_config;
 	s->io_bits = 0;		/* all bits default to input */
-	// we use the ioconfig registers to control dio direction, so zero output enables in stc dio control reg
+	/*  we use the ioconfig registers to control dio direction, so zero output enables in stc dio control reg */
 	ni_660x_write_register(dev, 0, 0, STCDIOControl);
 
 	private(dev)->counter_dev = ni_gpct_device_construct(dev,
@@ -1132,7 +1132,7 @@ static void init_tio_chip(struct comedi_device * dev, int chipset)
 {
 	unsigned i;
 
-	// init dma configuration register
+	/*  init dma configuration register */
 	private(dev)->dma_configuration_soft_copies[chipset] = 0;
 	for (i = 0; i < MAX_DMA_CHANNEL; ++i) {
 		private(dev)->dma_configuration_soft_copies[chipset] |=
@@ -1193,7 +1193,7 @@ static int ni_660x_dio_insn_bits(struct comedi_device * dev,
 {
 	unsigned base_bitfield_channel = CR_CHAN(insn->chanspec);
 
-	// Check if we have to write some bits
+	/*  Check if we have to write some bits */
 	if (data[0]) {
 		s->state &= ~(data[0] << base_bitfield_channel);
 		s->state |= (data[0] & data[1]) << base_bitfield_channel;

commit 70265d24e3404fe798b6edd55a02016b1edb49d7
Author: Jiri Slaby <jirislaby@gmail.com>
Date:   Thu Mar 26 09:34:06 2009 +0100

    staging: comedi, remove interrupt.h
    
    Remove interrupt wraparound. Use defines from linux/interrupt.h
    instead.
    
    Change also parameter types of functions taking ISR to irq_handler_t.
    
    Signed-off-by: Jiri Slaby <jirislaby@gmail.com>
    Cc: Ian Abbott <abbotti@mev.co.uk>
    Cc: Frank Mori Hess <fmhess@users.sourceforge.net>
    Cc: David Schleef <ds@schleef.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>

diff --git a/drivers/staging/comedi/drivers/ni_660x.c b/drivers/staging/comedi/drivers/ni_660x.c
index 14e35ba721e9..b75ea44c3307 100644
--- a/drivers/staging/comedi/drivers/ni_660x.c
+++ b/drivers/staging/comedi/drivers/ni_660x.c
@@ -909,7 +909,7 @@ static void ni_660x_handle_gpct_interrupt(struct comedi_device * dev,
 	}
 }
 
-static irqreturn_t ni_660x_interrupt(int irq, void *d PT_REGS_ARG)
+static irqreturn_t ni_660x_interrupt(int irq, void *d)
 {
 	struct comedi_device *dev = d;
 	struct comedi_subdevice *s;

commit b3be94eade6d07270e2a89599f99d42bbcfd6e84
Author: Bill Pemberton <wfp5p@virginia.edu>
Date:   Thu Mar 19 17:59:07 2009 -0400

    Staging: comedi: Remove ni_660x_private typedef
    
    Signed-off-by: Bill Pemberton <wfp5p@virginia.edu>
    Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>

diff --git a/drivers/staging/comedi/drivers/ni_660x.c b/drivers/staging/comedi/drivers/ni_660x.c
index dabafa641e7e..14e35ba721e9 100644
--- a/drivers/staging/comedi/drivers/ni_660x.c
+++ b/drivers/staging/comedi/drivers/ni_660x.c
@@ -421,7 +421,7 @@ static DEFINE_PCI_DEVICE_TABLE(ni_660x_pci_table) = {
 
 MODULE_DEVICE_TABLE(pci, ni_660x_pci_table);
 
-typedef struct {
+struct ni_660x_private {
 	struct mite_struct *mite;
 	struct ni_gpct_device *counter_dev;
 	uint64_t pfi_direction_bits;
@@ -431,9 +431,9 @@ typedef struct {
 	unsigned dma_configuration_soft_copies[NI_660X_MAX_NUM_CHIPS];
 	spinlock_t soft_reg_copy_lock;
 	unsigned short pfi_output_selects[NUM_PFI_CHANNELS];
-} ni_660x_private;
+};
 
-static inline ni_660x_private *private(struct comedi_device * dev)
+static inline struct ni_660x_private *private(struct comedi_device * dev)
 {
 	return dev->private;
 }
@@ -765,7 +765,7 @@ static unsigned ni_gpct_read_register(struct ni_gpct *counter,
 		ni_660x_register);
 }
 
-static inline struct mite_dma_descriptor_ring *mite_ring(ni_660x_private * priv,
+static inline struct mite_dma_descriptor_ring *mite_ring(struct ni_660x_private * priv,
 	struct ni_gpct *counter)
 {
 	return priv->mite_rings[counter->chip_index][counter->counter_index];
@@ -943,7 +943,7 @@ static int ni_660x_allocate_private(struct comedi_device * dev)
 	int retval;
 	unsigned i;
 
-	if ((retval = alloc_private(dev, sizeof(ni_660x_private))) < 0)
+	if ((retval = alloc_private(dev, sizeof(struct ni_660x_private))) < 0)
 		return retval;
 	spin_lock_init(&private(dev)->mite_channel_lock);
 	spin_lock_init(&private(dev)->soft_reg_copy_lock);

commit 50792813130b94a64e34b89cd2cbfddeb85b7518
Author: Bill Pemberton <wfp5p@virginia.edu>
Date:   Thu Mar 19 17:59:02 2009 -0400

    Staging: comedi: Remove ni_660x_board typedef
    
    Signed-off-by: Bill Pemberton <wfp5p@virginia.edu>
    Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>

diff --git a/drivers/staging/comedi/drivers/ni_660x.c b/drivers/staging/comedi/drivers/ni_660x.c
index 44036069a548..dabafa641e7e 100644
--- a/drivers/staging/comedi/drivers/ni_660x.c
+++ b/drivers/staging/comedi/drivers/ni_660x.c
@@ -379,13 +379,13 @@ static const unsigned GPCT_OFFSET[2] = { 0x0, 0x800 };	/* First chip is at base-
 							   0x00, etc. */
 
 /* Board description*/
-typedef struct {
+struct ni_660x_board {
 	unsigned short dev_id;	/* `lspci` will show you this */
 	const char *name;
 	unsigned n_chips;	/* total number of TIO chips */
-} ni_660x_board;
+};
 
-static const ni_660x_board ni_660x_boards[] = {
+static const struct ni_660x_board ni_660x_boards[] = {
 	{
 	      dev_id:	0x2c60,
 	      name:	"PCI-6601",
@@ -439,7 +439,7 @@ static inline ni_660x_private *private(struct comedi_device * dev)
 }
 
 /* initialized in ni_660x_find_device() */
-static inline const ni_660x_board *board(struct comedi_device * dev)
+static inline const struct ni_660x_board *board(struct comedi_device * dev)
 {
 	return dev->board_ptr;
 }

commit 251411cf05f3e7630f600a89f51fe9a82da967f8
Author: Bill Pemberton <wfp5p@virginia.edu>
Date:   Thu Mar 19 17:58:57 2009 -0400

    Staging: comedi: Remove NI_660x_Register typedef
    
    Signed-off-by: Bill Pemberton <wfp5p@virginia.edu>
    Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>

diff --git a/drivers/staging/comedi/drivers/ni_660x.c b/drivers/staging/comedi/drivers/ni_660x.c
index 2a3c1302d620..44036069a548 100644
--- a/drivers/staging/comedi/drivers/ni_660x.c
+++ b/drivers/staging/comedi/drivers/ni_660x.c
@@ -55,7 +55,7 @@ enum ni_660x_constants {
 #define MAX_DMA_CHANNEL 4
 
 /* See Register-Level Programmer Manual page 3.1 */
-typedef enum {
+enum NI_660x_Register {
 	G0InterruptAcknowledge,
 	G0StatusRegister,
 	G1InterruptAcknowledge,
@@ -155,7 +155,7 @@ typedef enum {
 	IOConfigReg36_37,
 	IOConfigReg38_39,
 	NumRegisters,
-} NI_660x_Register;
+};
 
 static inline unsigned IOConfigReg(unsigned pfi_channel)
 {
@@ -484,9 +484,9 @@ static inline unsigned ni_660x_num_counters(struct comedi_device * dev)
 	return board(dev)->n_chips * counters_per_chip;
 }
 
-static NI_660x_Register ni_gpct_to_660x_register(enum ni_gpct_register reg)
+static enum NI_660x_Register ni_gpct_to_660x_register(enum ni_gpct_register reg)
 {
-	NI_660x_Register ni_660x_register;
+	enum NI_660x_Register ni_660x_register;
 	switch (reg) {
 	case NITIO_G0_Autoincrement_Reg:
 		ni_660x_register = G0AutoincrementRegister;
@@ -703,7 +703,7 @@ static NI_660x_Register ni_gpct_to_660x_register(enum ni_gpct_register reg)
 }
 
 static inline void ni_660x_write_register(struct comedi_device * dev,
-	unsigned chip_index, unsigned bits, NI_660x_Register reg)
+	unsigned chip_index, unsigned bits, enum NI_660x_Register reg)
 {
 	void *const write_address =
 		private(dev)->mite->daq_io_addr + GPCT_OFFSET[chip_index] +
@@ -725,7 +725,7 @@ static inline void ni_660x_write_register(struct comedi_device * dev,
 }
 
 static inline unsigned ni_660x_read_register(struct comedi_device * dev,
-	unsigned chip_index, NI_660x_Register reg)
+	unsigned chip_index, enum NI_660x_Register reg)
 {
 	void *const read_address =
 		private(dev)->mite->daq_io_addr + GPCT_OFFSET[chip_index] +
@@ -751,7 +751,7 @@ static void ni_gpct_write_register(struct ni_gpct *counter, unsigned bits,
 	enum ni_gpct_register reg)
 {
 	struct comedi_device *dev = counter->counter_dev->dev;
-	NI_660x_Register ni_660x_register = ni_gpct_to_660x_register(reg);
+	enum NI_660x_Register ni_660x_register = ni_gpct_to_660x_register(reg);
 	ni_660x_write_register(dev, counter->chip_index, bits,
 		ni_660x_register);
 }
@@ -760,7 +760,7 @@ static unsigned ni_gpct_read_register(struct ni_gpct *counter,
 	enum ni_gpct_register reg)
 {
 	struct comedi_device *dev = counter->counter_dev->dev;
-	NI_660x_Register ni_660x_register = ni_gpct_to_660x_register(reg);
+	enum NI_660x_Register ni_660x_register = ni_gpct_to_660x_register(reg);
 	return ni_660x_read_register(dev, counter->chip_index,
 		ni_660x_register);
 }

commit 0cb5e8ff4502d60967177038e2d740dae759e4b2
Author: Bill Pemberton <wfp5p@virginia.edu>
Date:   Mon Mar 16 22:15:56 2009 -0400

    Staging: comedi: Remove NI_660xRegisterData typedef
    
    Signed-off-by: Bill Pemberton <wfp5p@virginia.edu>
    Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>

diff --git a/drivers/staging/comedi/drivers/ni_660x.c b/drivers/staging/comedi/drivers/ni_660x.c
index 0af2049feb99..2a3c1302d620 100644
--- a/drivers/staging/comedi/drivers/ni_660x.c
+++ b/drivers/staging/comedi/drivers/ni_660x.c
@@ -192,14 +192,16 @@ static inline unsigned NI_660X_GPCT_SUBDEV(unsigned index)
 	return NI_660X_GPCT_SUBDEV_0 + index;
 }
 
-typedef struct {
+struct NI_660xRegisterData {
+
 	const char *name;	// Register Name
 	int offset;		// Offset from base address from GPCT chip
 	enum ni_660x_register_direction direction;
 	enum ni_660x_register_width size;	// 1 byte, 2 bytes, or 4 bytes
-} NI_660xRegisterData;
+};
+
 
-static const NI_660xRegisterData registerData[NumRegisters] = {
+static const struct NI_660xRegisterData registerData[NumRegisters] = {
 	{"G0 Interrupt Acknowledge", 0x004, NI_660x_WRITE, DATA_2B},
 	{"G0 Status Register", 0x004, NI_660x_READ, DATA_2B},
 	{"G1 Interrupt Acknowledge", 0x006, NI_660x_WRITE, DATA_2B},

commit 0707bb04be89b18ee83b5a997e36cc585f0b988d
Author: Bill Pemberton <wfp5p@virginia.edu>
Date:   Mon Mar 16 22:06:20 2009 -0400

    Staging: comedi: Remove comedi_devconfig typedef
    
    Signed-off-by: Bill Pemberton <wfp5p@virginia.edu>
    Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>

diff --git a/drivers/staging/comedi/drivers/ni_660x.c b/drivers/staging/comedi/drivers/ni_660x.c
index 7760df604359..0af2049feb99 100644
--- a/drivers/staging/comedi/drivers/ni_660x.c
+++ b/drivers/staging/comedi/drivers/ni_660x.c
@@ -444,7 +444,7 @@ static inline const ni_660x_board *board(struct comedi_device * dev)
 
 #define n_ni_660x_boards (sizeof(ni_660x_boards)/sizeof(ni_660x_boards[0]))
 
-static int ni_660x_attach(struct comedi_device * dev, comedi_devconfig * it);
+static int ni_660x_attach(struct comedi_device * dev, struct comedi_devconfig * it);
 static int ni_660x_detach(struct comedi_device * dev);
 static void init_tio_chip(struct comedi_device * dev, int chipset);
 static void ni_660x_select_pfi_output(struct comedi_device * dev, unsigned pfi_channel,
@@ -980,7 +980,7 @@ static void ni_660x_free_mite_rings(struct comedi_device * dev)
 	}
 }
 
-static int ni_660x_attach(struct comedi_device * dev, comedi_devconfig * it)
+static int ni_660x_attach(struct comedi_device * dev, struct comedi_devconfig * it)
 {
 	struct comedi_subdevice *s;
 	int ret;

commit 90035c0886b256d75bced13b3b3cea5234aff136
Author: Bill Pemberton <wfp5p@virginia.edu>
Date:   Mon Mar 16 22:05:53 2009 -0400

    Staging: comedi: Remove comedi_insn typedef
    
    Signed-off-by: Bill Pemberton <wfp5p@virginia.edu>
    Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>

diff --git a/drivers/staging/comedi/drivers/ni_660x.c b/drivers/staging/comedi/drivers/ni_660x.c
index c347c9b3c2fa..7760df604359 100644
--- a/drivers/staging/comedi/drivers/ni_660x.c
+++ b/drivers/staging/comedi/drivers/ni_660x.c
@@ -465,17 +465,17 @@ static int ni_660x_set_pfi_routing(struct comedi_device * dev, unsigned chan,
 
 /* Possible instructions for a GPCT */
 static int ni_660x_GPCT_rinsn(struct comedi_device * dev,
-	struct comedi_subdevice * s, comedi_insn * insn, unsigned int * data);
+	struct comedi_subdevice * s, struct comedi_insn * insn, unsigned int * data);
 static int ni_660x_GPCT_insn_config(struct comedi_device * dev,
-	struct comedi_subdevice * s, comedi_insn * insn, unsigned int * data);
+	struct comedi_subdevice * s, struct comedi_insn * insn, unsigned int * data);
 static int ni_660x_GPCT_winsn(struct comedi_device * dev,
-	struct comedi_subdevice * s, comedi_insn * insn, unsigned int * data);
+	struct comedi_subdevice * s, struct comedi_insn * insn, unsigned int * data);
 
 /* Possible instructions for Digital IO */
 static int ni_660x_dio_insn_config(struct comedi_device * dev,
-	struct comedi_subdevice * s, comedi_insn * insn, unsigned int * data);
+	struct comedi_subdevice * s, struct comedi_insn * insn, unsigned int * data);
 static int ni_660x_dio_insn_bits(struct comedi_device * dev,
-	struct comedi_subdevice * s, comedi_insn * insn, unsigned int * data);
+	struct comedi_subdevice * s, struct comedi_insn * insn, unsigned int * data);
 
 static inline unsigned ni_660x_num_counters(struct comedi_device * dev)
 {
@@ -1121,7 +1121,7 @@ static int ni_660x_detach(struct comedi_device * dev)
 
 static int
 ni_660x_GPCT_rinsn(struct comedi_device * dev, struct comedi_subdevice * s,
-	comedi_insn * insn, unsigned int * data)
+	struct comedi_insn * insn, unsigned int * data)
 {
 	return ni_tio_rinsn(subdev_to_counter(s), insn, data);
 }
@@ -1148,13 +1148,13 @@ static void init_tio_chip(struct comedi_device * dev, int chipset)
 
 static int
 ni_660x_GPCT_insn_config(struct comedi_device * dev, struct comedi_subdevice * s,
-	comedi_insn * insn, unsigned int * data)
+	struct comedi_insn * insn, unsigned int * data)
 {
 	return ni_tio_insn_config(subdev_to_counter(s), insn, data);
 }
 
 static int ni_660x_GPCT_winsn(struct comedi_device * dev,
-	struct comedi_subdevice * s, comedi_insn * insn, unsigned int * data)
+	struct comedi_subdevice * s, struct comedi_insn * insn, unsigned int * data)
 {
 	return ni_tio_winsn(subdev_to_counter(s), insn, data);
 }
@@ -1187,7 +1187,7 @@ static int ni_660x_find_device(struct comedi_device * dev, int bus, int slot)
 }
 
 static int ni_660x_dio_insn_bits(struct comedi_device * dev,
-	struct comedi_subdevice * s, comedi_insn * insn, unsigned int * data)
+	struct comedi_subdevice * s, struct comedi_insn * insn, unsigned int * data)
 {
 	unsigned base_bitfield_channel = CR_CHAN(insn->chanspec);
 
@@ -1280,7 +1280,7 @@ static void ni660x_config_filter(struct comedi_device * dev, unsigned pfi_channe
 }
 
 static int ni_660x_dio_insn_config(struct comedi_device * dev,
-	struct comedi_subdevice * s, comedi_insn * insn, unsigned int * data)
+	struct comedi_subdevice * s, struct comedi_insn * insn, unsigned int * data)
 {
 	int chan = CR_CHAN(insn->chanspec);
 

commit ea6d0d4cab4f4f2d6a88f3bce4707fe92696fd3f
Author: Bill Pemberton <wfp5p@virginia.edu>
Date:   Mon Mar 16 22:05:47 2009 -0400

    Staging: comedi: Remove comedi_cmd typedef
    
    Signed-off-by: Bill Pemberton <wfp5p@virginia.edu>
    Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>

diff --git a/drivers/staging/comedi/drivers/ni_660x.c b/drivers/staging/comedi/drivers/ni_660x.c
index 469f9553f034..c347c9b3c2fa 100644
--- a/drivers/staging/comedi/drivers/ni_660x.c
+++ b/drivers/staging/comedi/drivers/ni_660x.c
@@ -848,7 +848,7 @@ static int ni_660x_cmd(struct comedi_device * dev, struct comedi_subdevice * s)
 	int retval;
 
 	struct ni_gpct *counter = subdev_to_counter(s);
-//      const comedi_cmd *cmd = &s->async->cmd;
+//      const struct comedi_cmd *cmd = &s->async->cmd;
 
 	retval = ni_660x_request_mite_channel(dev, counter, COMEDI_INPUT);
 	if (retval) {
@@ -863,7 +863,7 @@ static int ni_660x_cmd(struct comedi_device * dev, struct comedi_subdevice * s)
 }
 
 static int ni_660x_cmdtest(struct comedi_device * dev, struct comedi_subdevice * s,
-	comedi_cmd * cmd)
+	struct comedi_cmd * cmd)
 {
 	struct ni_gpct *counter = subdev_to_counter(s);
 

commit 139dfbdfacb02e3ef3df936d2fabd1ad5f14ea88
Author: Bill Pemberton <wfp5p@virginia.edu>
Date:   Mon Mar 16 22:05:25 2009 -0400

    Staging: comedi: Remove comedi_driver typedef
    
    Signed-off-by: Bill Pemberton <wfp5p@virginia.edu>
    Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>

diff --git a/drivers/staging/comedi/drivers/ni_660x.c b/drivers/staging/comedi/drivers/ni_660x.c
index 3304472d0a76..469f9553f034 100644
--- a/drivers/staging/comedi/drivers/ni_660x.c
+++ b/drivers/staging/comedi/drivers/ni_660x.c
@@ -450,7 +450,7 @@ static void init_tio_chip(struct comedi_device * dev, int chipset);
 static void ni_660x_select_pfi_output(struct comedi_device * dev, unsigned pfi_channel,
 	unsigned output_select);
 
-static comedi_driver driver_ni_660x = {
+static struct comedi_driver driver_ni_660x = {
       driver_name:"ni_660x",
       module:THIS_MODULE,
       attach:ni_660x_attach,

commit 34c43922e62708d45e9660eee4b4f1fb7b4bf2c7
Author: Bill Pemberton <wfp5p@virginia.edu>
Date:   Mon Mar 16 22:05:14 2009 -0400

    Staging: comedi: Remove comedi_subdevice typedef
    
    Signed-off-by: Bill Pemberton <wfp5p@virginia.edu>
    Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>

diff --git a/drivers/staging/comedi/drivers/ni_660x.c b/drivers/staging/comedi/drivers/ni_660x.c
index 531709724b75..3304472d0a76 100644
--- a/drivers/staging/comedi/drivers/ni_660x.c
+++ b/drivers/staging/comedi/drivers/ni_660x.c
@@ -465,17 +465,17 @@ static int ni_660x_set_pfi_routing(struct comedi_device * dev, unsigned chan,
 
 /* Possible instructions for a GPCT */
 static int ni_660x_GPCT_rinsn(struct comedi_device * dev,
-	comedi_subdevice * s, comedi_insn * insn, unsigned int * data);
+	struct comedi_subdevice * s, comedi_insn * insn, unsigned int * data);
 static int ni_660x_GPCT_insn_config(struct comedi_device * dev,
-	comedi_subdevice * s, comedi_insn * insn, unsigned int * data);
+	struct comedi_subdevice * s, comedi_insn * insn, unsigned int * data);
 static int ni_660x_GPCT_winsn(struct comedi_device * dev,
-	comedi_subdevice * s, comedi_insn * insn, unsigned int * data);
+	struct comedi_subdevice * s, comedi_insn * insn, unsigned int * data);
 
 /* Possible instructions for Digital IO */
 static int ni_660x_dio_insn_config(struct comedi_device * dev,
-	comedi_subdevice * s, comedi_insn * insn, unsigned int * data);
+	struct comedi_subdevice * s, comedi_insn * insn, unsigned int * data);
 static int ni_660x_dio_insn_bits(struct comedi_device * dev,
-	comedi_subdevice * s, comedi_insn * insn, unsigned int * data);
+	struct comedi_subdevice * s, comedi_insn * insn, unsigned int * data);
 
 static inline unsigned ni_660x_num_counters(struct comedi_device * dev)
 {
@@ -843,7 +843,7 @@ void ni_660x_release_mite_channel(struct comedi_device * dev, struct ni_gpct *co
 	comedi_spin_unlock_irqrestore(&private(dev)->mite_channel_lock, flags);
 }
 
-static int ni_660x_cmd(struct comedi_device * dev, comedi_subdevice * s)
+static int ni_660x_cmd(struct comedi_device * dev, struct comedi_subdevice * s)
 {
 	int retval;
 
@@ -862,7 +862,7 @@ static int ni_660x_cmd(struct comedi_device * dev, comedi_subdevice * s)
 	return retval;
 }
 
-static int ni_660x_cmdtest(struct comedi_device * dev, comedi_subdevice * s,
+static int ni_660x_cmdtest(struct comedi_device * dev, struct comedi_subdevice * s,
 	comedi_cmd * cmd)
 {
 	struct ni_gpct *counter = subdev_to_counter(s);
@@ -870,7 +870,7 @@ static int ni_660x_cmdtest(struct comedi_device * dev, comedi_subdevice * s,
 	return ni_tio_cmdtest(counter, cmd);
 }
 
-static int ni_660x_cancel(struct comedi_device * dev, comedi_subdevice * s)
+static int ni_660x_cancel(struct comedi_device * dev, struct comedi_subdevice * s)
 {
 	struct ni_gpct *counter = subdev_to_counter(s);
 	int retval;
@@ -894,7 +894,7 @@ static void set_tio_counterswap(struct comedi_device * dev, int chipset)
 }
 
 static void ni_660x_handle_gpct_interrupt(struct comedi_device * dev,
-	comedi_subdevice * s)
+	struct comedi_subdevice * s)
 {
 	ni_tio_handle_interrupt(subdev_to_counter(s), s);
 	if (s->async->events) {
@@ -910,7 +910,7 @@ static void ni_660x_handle_gpct_interrupt(struct comedi_device * dev,
 static irqreturn_t ni_660x_interrupt(int irq, void *d PT_REGS_ARG)
 {
 	struct comedi_device *dev = d;
-	comedi_subdevice *s;
+	struct comedi_subdevice *s;
 	unsigned i;
 
 	if (dev->attached == 0)
@@ -923,7 +923,7 @@ static irqreturn_t ni_660x_interrupt(int irq, void *d PT_REGS_ARG)
 	return IRQ_HANDLED;
 }
 
-static int ni_660x_buf_change(struct comedi_device * dev, comedi_subdevice * s,
+static int ni_660x_buf_change(struct comedi_device * dev, struct comedi_subdevice * s,
 	unsigned long new_size)
 {
 	int ret;
@@ -982,7 +982,7 @@ static void ni_660x_free_mite_rings(struct comedi_device * dev)
 
 static int ni_660x_attach(struct comedi_device * dev, comedi_devconfig * it)
 {
-	comedi_subdevice *s;
+	struct comedi_subdevice *s;
 	int ret;
 	unsigned i;
 	unsigned global_interrupt_config_bits;
@@ -1120,7 +1120,7 @@ static int ni_660x_detach(struct comedi_device * dev)
 }
 
 static int
-ni_660x_GPCT_rinsn(struct comedi_device * dev, comedi_subdevice * s,
+ni_660x_GPCT_rinsn(struct comedi_device * dev, struct comedi_subdevice * s,
 	comedi_insn * insn, unsigned int * data)
 {
 	return ni_tio_rinsn(subdev_to_counter(s), insn, data);
@@ -1147,14 +1147,14 @@ static void init_tio_chip(struct comedi_device * dev, int chipset)
 }
 
 static int
-ni_660x_GPCT_insn_config(struct comedi_device * dev, comedi_subdevice * s,
+ni_660x_GPCT_insn_config(struct comedi_device * dev, struct comedi_subdevice * s,
 	comedi_insn * insn, unsigned int * data)
 {
 	return ni_tio_insn_config(subdev_to_counter(s), insn, data);
 }
 
 static int ni_660x_GPCT_winsn(struct comedi_device * dev,
-	comedi_subdevice * s, comedi_insn * insn, unsigned int * data)
+	struct comedi_subdevice * s, comedi_insn * insn, unsigned int * data)
 {
 	return ni_tio_winsn(subdev_to_counter(s), insn, data);
 }
@@ -1187,7 +1187,7 @@ static int ni_660x_find_device(struct comedi_device * dev, int bus, int slot)
 }
 
 static int ni_660x_dio_insn_bits(struct comedi_device * dev,
-	comedi_subdevice * s, comedi_insn * insn, unsigned int * data)
+	struct comedi_subdevice * s, comedi_insn * insn, unsigned int * data)
 {
 	unsigned base_bitfield_channel = CR_CHAN(insn->chanspec);
 
@@ -1280,7 +1280,7 @@ static void ni660x_config_filter(struct comedi_device * dev, unsigned pfi_channe
 }
 
 static int ni_660x_dio_insn_config(struct comedi_device * dev,
-	comedi_subdevice * s, comedi_insn * insn, unsigned int * data)
+	struct comedi_subdevice * s, comedi_insn * insn, unsigned int * data)
 {
 	int chan = CR_CHAN(insn->chanspec);
 

commit 71b5f4f11971dea972832ad63a994c7e5b45db6b
Author: Bill Pemberton <wfp5p@virginia.edu>
Date:   Mon Mar 16 22:05:08 2009 -0400

    Staging: comedi: Remove comedi_device typedef
    
    Signed-off-by: Bill Pemberton <wfp5p@virginia.edu>
    Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>

diff --git a/drivers/staging/comedi/drivers/ni_660x.c b/drivers/staging/comedi/drivers/ni_660x.c
index 896e2ea4b04d..531709724b75 100644
--- a/drivers/staging/comedi/drivers/ni_660x.c
+++ b/drivers/staging/comedi/drivers/ni_660x.c
@@ -431,23 +431,23 @@ typedef struct {
 	unsigned short pfi_output_selects[NUM_PFI_CHANNELS];
 } ni_660x_private;
 
-static inline ni_660x_private *private(comedi_device * dev)
+static inline ni_660x_private *private(struct comedi_device * dev)
 {
 	return dev->private;
 }
 
 /* initialized in ni_660x_find_device() */
-static inline const ni_660x_board *board(comedi_device * dev)
+static inline const ni_660x_board *board(struct comedi_device * dev)
 {
 	return dev->board_ptr;
 }
 
 #define n_ni_660x_boards (sizeof(ni_660x_boards)/sizeof(ni_660x_boards[0]))
 
-static int ni_660x_attach(comedi_device * dev, comedi_devconfig * it);
-static int ni_660x_detach(comedi_device * dev);
-static void init_tio_chip(comedi_device * dev, int chipset);
-static void ni_660x_select_pfi_output(comedi_device * dev, unsigned pfi_channel,
+static int ni_660x_attach(struct comedi_device * dev, comedi_devconfig * it);
+static int ni_660x_detach(struct comedi_device * dev);
+static void init_tio_chip(struct comedi_device * dev, int chipset);
+static void ni_660x_select_pfi_output(struct comedi_device * dev, unsigned pfi_channel,
 	unsigned output_select);
 
 static comedi_driver driver_ni_660x = {
@@ -459,25 +459,25 @@ static comedi_driver driver_ni_660x = {
 
 COMEDI_PCI_INITCLEANUP(driver_ni_660x, ni_660x_pci_table);
 
-static int ni_660x_find_device(comedi_device * dev, int bus, int slot);
-static int ni_660x_set_pfi_routing(comedi_device * dev, unsigned chan,
+static int ni_660x_find_device(struct comedi_device * dev, int bus, int slot);
+static int ni_660x_set_pfi_routing(struct comedi_device * dev, unsigned chan,
 	unsigned source);
 
 /* Possible instructions for a GPCT */
-static int ni_660x_GPCT_rinsn(comedi_device * dev,
+static int ni_660x_GPCT_rinsn(struct comedi_device * dev,
 	comedi_subdevice * s, comedi_insn * insn, unsigned int * data);
-static int ni_660x_GPCT_insn_config(comedi_device * dev,
+static int ni_660x_GPCT_insn_config(struct comedi_device * dev,
 	comedi_subdevice * s, comedi_insn * insn, unsigned int * data);
-static int ni_660x_GPCT_winsn(comedi_device * dev,
+static int ni_660x_GPCT_winsn(struct comedi_device * dev,
 	comedi_subdevice * s, comedi_insn * insn, unsigned int * data);
 
 /* Possible instructions for Digital IO */
-static int ni_660x_dio_insn_config(comedi_device * dev,
+static int ni_660x_dio_insn_config(struct comedi_device * dev,
 	comedi_subdevice * s, comedi_insn * insn, unsigned int * data);
-static int ni_660x_dio_insn_bits(comedi_device * dev,
+static int ni_660x_dio_insn_bits(struct comedi_device * dev,
 	comedi_subdevice * s, comedi_insn * insn, unsigned int * data);
 
-static inline unsigned ni_660x_num_counters(comedi_device * dev)
+static inline unsigned ni_660x_num_counters(struct comedi_device * dev)
 {
 	return board(dev)->n_chips * counters_per_chip;
 }
@@ -700,7 +700,7 @@ static NI_660x_Register ni_gpct_to_660x_register(enum ni_gpct_register reg)
 	return ni_660x_register;
 }
 
-static inline void ni_660x_write_register(comedi_device * dev,
+static inline void ni_660x_write_register(struct comedi_device * dev,
 	unsigned chip_index, unsigned bits, NI_660x_Register reg)
 {
 	void *const write_address =
@@ -722,7 +722,7 @@ static inline void ni_660x_write_register(comedi_device * dev,
 	}
 }
 
-static inline unsigned ni_660x_read_register(comedi_device * dev,
+static inline unsigned ni_660x_read_register(struct comedi_device * dev,
 	unsigned chip_index, NI_660x_Register reg)
 {
 	void *const read_address =
@@ -748,7 +748,7 @@ static inline unsigned ni_660x_read_register(comedi_device * dev,
 static void ni_gpct_write_register(struct ni_gpct *counter, unsigned bits,
 	enum ni_gpct_register reg)
 {
-	comedi_device *dev = counter->counter_dev->dev;
+	struct comedi_device *dev = counter->counter_dev->dev;
 	NI_660x_Register ni_660x_register = ni_gpct_to_660x_register(reg);
 	ni_660x_write_register(dev, counter->chip_index, bits,
 		ni_660x_register);
@@ -757,7 +757,7 @@ static void ni_gpct_write_register(struct ni_gpct *counter, unsigned bits,
 static unsigned ni_gpct_read_register(struct ni_gpct *counter,
 	enum ni_gpct_register reg)
 {
-	comedi_device *dev = counter->counter_dev->dev;
+	struct comedi_device *dev = counter->counter_dev->dev;
 	NI_660x_Register ni_660x_register = ni_gpct_to_660x_register(reg);
 	return ni_660x_read_register(dev, counter->chip_index,
 		ni_660x_register);
@@ -769,7 +769,7 @@ static inline struct mite_dma_descriptor_ring *mite_ring(ni_660x_private * priv,
 	return priv->mite_rings[counter->chip_index][counter->counter_index];
 }
 
-static inline void ni_660x_set_dma_channel(comedi_device * dev,
+static inline void ni_660x_set_dma_channel(struct comedi_device * dev,
 	unsigned mite_channel, struct ni_gpct *counter)
 {
 	unsigned long flags;
@@ -787,7 +787,7 @@ static inline void ni_660x_set_dma_channel(comedi_device * dev,
 	comedi_spin_unlock_irqrestore(&private(dev)->soft_reg_copy_lock, flags);
 }
 
-static inline void ni_660x_unset_dma_channel(comedi_device * dev,
+static inline void ni_660x_unset_dma_channel(struct comedi_device * dev,
 	unsigned mite_channel, struct ni_gpct *counter)
 {
 	unsigned long flags;
@@ -803,7 +803,7 @@ static inline void ni_660x_unset_dma_channel(comedi_device * dev,
 	comedi_spin_unlock_irqrestore(&private(dev)->soft_reg_copy_lock, flags);
 }
 
-static int ni_660x_request_mite_channel(comedi_device * dev,
+static int ni_660x_request_mite_channel(struct comedi_device * dev,
 	struct ni_gpct *counter, enum comedi_io_direction direction)
 {
 	unsigned long flags;
@@ -828,7 +828,7 @@ static int ni_660x_request_mite_channel(comedi_device * dev,
 	return 0;
 }
 
-void ni_660x_release_mite_channel(comedi_device * dev, struct ni_gpct *counter)
+void ni_660x_release_mite_channel(struct comedi_device * dev, struct ni_gpct *counter)
 {
 	unsigned long flags;
 
@@ -843,7 +843,7 @@ void ni_660x_release_mite_channel(comedi_device * dev, struct ni_gpct *counter)
 	comedi_spin_unlock_irqrestore(&private(dev)->mite_channel_lock, flags);
 }
 
-static int ni_660x_cmd(comedi_device * dev, comedi_subdevice * s)
+static int ni_660x_cmd(struct comedi_device * dev, comedi_subdevice * s)
 {
 	int retval;
 
@@ -862,7 +862,7 @@ static int ni_660x_cmd(comedi_device * dev, comedi_subdevice * s)
 	return retval;
 }
 
-static int ni_660x_cmdtest(comedi_device * dev, comedi_subdevice * s,
+static int ni_660x_cmdtest(struct comedi_device * dev, comedi_subdevice * s,
 	comedi_cmd * cmd)
 {
 	struct ni_gpct *counter = subdev_to_counter(s);
@@ -870,7 +870,7 @@ static int ni_660x_cmdtest(comedi_device * dev, comedi_subdevice * s,
 	return ni_tio_cmdtest(counter, cmd);
 }
 
-static int ni_660x_cancel(comedi_device * dev, comedi_subdevice * s)
+static int ni_660x_cancel(struct comedi_device * dev, comedi_subdevice * s)
 {
 	struct ni_gpct *counter = subdev_to_counter(s);
 	int retval;
@@ -880,7 +880,7 @@ static int ni_660x_cancel(comedi_device * dev, comedi_subdevice * s)
 	return retval;
 }
 
-static void set_tio_counterswap(comedi_device * dev, int chipset)
+static void set_tio_counterswap(struct comedi_device * dev, int chipset)
 {
 	/* See P. 3.5 of the Register-Level Programming manual.  The
 	   CounterSwap bit has to be set on the second chip, otherwise
@@ -893,7 +893,7 @@ static void set_tio_counterswap(comedi_device * dev, int chipset)
 		ni_660x_write_register(dev, chipset, 0, ClockConfigRegister);
 }
 
-static void ni_660x_handle_gpct_interrupt(comedi_device * dev,
+static void ni_660x_handle_gpct_interrupt(struct comedi_device * dev,
 	comedi_subdevice * s)
 {
 	ni_tio_handle_interrupt(subdev_to_counter(s), s);
@@ -909,7 +909,7 @@ static void ni_660x_handle_gpct_interrupt(comedi_device * dev,
 
 static irqreturn_t ni_660x_interrupt(int irq, void *d PT_REGS_ARG)
 {
-	comedi_device *dev = d;
+	struct comedi_device *dev = d;
 	comedi_subdevice *s;
 	unsigned i;
 
@@ -923,7 +923,7 @@ static irqreturn_t ni_660x_interrupt(int irq, void *d PT_REGS_ARG)
 	return IRQ_HANDLED;
 }
 
-static int ni_660x_buf_change(comedi_device * dev, comedi_subdevice * s,
+static int ni_660x_buf_change(struct comedi_device * dev, comedi_subdevice * s,
 	unsigned long new_size)
 {
 	int ret;
@@ -936,7 +936,7 @@ static int ni_660x_buf_change(comedi_device * dev, comedi_subdevice * s,
 	return 0;
 }
 
-static int ni_660x_allocate_private(comedi_device * dev)
+static int ni_660x_allocate_private(struct comedi_device * dev)
 {
 	int retval;
 	unsigned i;
@@ -951,7 +951,7 @@ static int ni_660x_allocate_private(comedi_device * dev)
 	return 0;
 }
 
-static int ni_660x_alloc_mite_rings(comedi_device * dev)
+static int ni_660x_alloc_mite_rings(struct comedi_device * dev)
 {
 	unsigned i;
 	unsigned j;
@@ -968,7 +968,7 @@ static int ni_660x_alloc_mite_rings(comedi_device * dev)
 	return 0;
 }
 
-static void ni_660x_free_mite_rings(comedi_device * dev)
+static void ni_660x_free_mite_rings(struct comedi_device * dev)
 {
 	unsigned i;
 	unsigned j;
@@ -980,7 +980,7 @@ static void ni_660x_free_mite_rings(comedi_device * dev)
 	}
 }
 
-static int ni_660x_attach(comedi_device * dev, comedi_devconfig * it)
+static int ni_660x_attach(struct comedi_device * dev, comedi_devconfig * it)
 {
 	comedi_subdevice *s;
 	int ret;
@@ -1100,7 +1100,7 @@ static int ni_660x_attach(comedi_device * dev, comedi_devconfig * it)
 	return 0;
 }
 
-static int ni_660x_detach(comedi_device * dev)
+static int ni_660x_detach(struct comedi_device * dev)
 {
 	printk("comedi%d: ni_660x: remove\n", dev->minor);
 
@@ -1120,13 +1120,13 @@ static int ni_660x_detach(comedi_device * dev)
 }
 
 static int
-ni_660x_GPCT_rinsn(comedi_device * dev, comedi_subdevice * s,
+ni_660x_GPCT_rinsn(struct comedi_device * dev, comedi_subdevice * s,
 	comedi_insn * insn, unsigned int * data)
 {
 	return ni_tio_rinsn(subdev_to_counter(s), insn, data);
 }
 
-static void init_tio_chip(comedi_device * dev, int chipset)
+static void init_tio_chip(struct comedi_device * dev, int chipset)
 {
 	unsigned i;
 
@@ -1147,19 +1147,19 @@ static void init_tio_chip(comedi_device * dev, int chipset)
 }
 
 static int
-ni_660x_GPCT_insn_config(comedi_device * dev, comedi_subdevice * s,
+ni_660x_GPCT_insn_config(struct comedi_device * dev, comedi_subdevice * s,
 	comedi_insn * insn, unsigned int * data)
 {
 	return ni_tio_insn_config(subdev_to_counter(s), insn, data);
 }
 
-static int ni_660x_GPCT_winsn(comedi_device * dev,
+static int ni_660x_GPCT_winsn(struct comedi_device * dev,
 	comedi_subdevice * s, comedi_insn * insn, unsigned int * data)
 {
 	return ni_tio_winsn(subdev_to_counter(s), insn, data);
 }
 
-static int ni_660x_find_device(comedi_device * dev, int bus, int slot)
+static int ni_660x_find_device(struct comedi_device * dev, int bus, int slot)
 {
 	struct mite_struct *mite;
 	int i;
@@ -1186,7 +1186,7 @@ static int ni_660x_find_device(comedi_device * dev, int bus, int slot)
 	return -EIO;
 }
 
-static int ni_660x_dio_insn_bits(comedi_device * dev,
+static int ni_660x_dio_insn_bits(struct comedi_device * dev,
 	comedi_subdevice * s, comedi_insn * insn, unsigned int * data)
 {
 	unsigned base_bitfield_channel = CR_CHAN(insn->chanspec);
@@ -1206,7 +1206,7 @@ static int ni_660x_dio_insn_bits(comedi_device * dev,
 	return 2;
 }
 
-static void ni_660x_select_pfi_output(comedi_device * dev, unsigned pfi_channel,
+static void ni_660x_select_pfi_output(struct comedi_device * dev, unsigned pfi_channel,
 	unsigned output_select)
 {
 	static const unsigned counter_4_7_first_pfi = 8;
@@ -1241,7 +1241,7 @@ static void ni_660x_select_pfi_output(comedi_device * dev, unsigned pfi_channel,
 	ni_660x_write_register(dev, active_chipset, active_bits, IOConfigReg(pfi_channel));
 }
 
-static int ni_660x_set_pfi_routing(comedi_device * dev, unsigned chan,
+static int ni_660x_set_pfi_routing(struct comedi_device * dev, unsigned chan,
 	unsigned source)
 {
 	if (source > num_pfi_output_selects)
@@ -1264,13 +1264,13 @@ static int ni_660x_set_pfi_routing(comedi_device * dev, unsigned chan,
 	return 0;
 }
 
-static unsigned ni_660x_get_pfi_routing(comedi_device * dev, unsigned chan)
+static unsigned ni_660x_get_pfi_routing(struct comedi_device * dev, unsigned chan)
 {
 	BUG_ON(chan >= NUM_PFI_CHANNELS);
 	return private(dev)->pfi_output_selects[chan];
 }
 
-static void ni660x_config_filter(comedi_device * dev, unsigned pfi_channel,
+static void ni660x_config_filter(struct comedi_device * dev, unsigned pfi_channel,
 	enum ni_gpct_filter_select filter)
 {
 	unsigned bits = ni_660x_read_register(dev, 0, IOConfigReg(pfi_channel));
@@ -1279,7 +1279,7 @@ static void ni660x_config_filter(comedi_device * dev, unsigned pfi_channel,
 	ni_660x_write_register(dev, 0, bits, IOConfigReg(pfi_channel));
 }
 
-static int ni_660x_dio_insn_config(comedi_device * dev,
+static int ni_660x_dio_insn_config(struct comedi_device * dev,
 	comedi_subdevice * s, comedi_insn * insn, unsigned int * data)
 {
 	int chan = CR_CHAN(insn->chanspec);

commit 790c55415aa31f4c732729f94d2c3a54f7d3bfc2
Author: Bill Pemberton <wfp5p@virginia.edu>
Date:   Mon Mar 16 22:05:02 2009 -0400

    Staging: comedi: Remove lsampl_t and sampl_t typedefs
    
    Signed-off-by: Bill Pemberton <wfp5p@virginia.edu>
    Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>

diff --git a/drivers/staging/comedi/drivers/ni_660x.c b/drivers/staging/comedi/drivers/ni_660x.c
index e646e98f3082..896e2ea4b04d 100644
--- a/drivers/staging/comedi/drivers/ni_660x.c
+++ b/drivers/staging/comedi/drivers/ni_660x.c
@@ -465,17 +465,17 @@ static int ni_660x_set_pfi_routing(comedi_device * dev, unsigned chan,
 
 /* Possible instructions for a GPCT */
 static int ni_660x_GPCT_rinsn(comedi_device * dev,
-	comedi_subdevice * s, comedi_insn * insn, lsampl_t * data);
+	comedi_subdevice * s, comedi_insn * insn, unsigned int * data);
 static int ni_660x_GPCT_insn_config(comedi_device * dev,
-	comedi_subdevice * s, comedi_insn * insn, lsampl_t * data);
+	comedi_subdevice * s, comedi_insn * insn, unsigned int * data);
 static int ni_660x_GPCT_winsn(comedi_device * dev,
-	comedi_subdevice * s, comedi_insn * insn, lsampl_t * data);
+	comedi_subdevice * s, comedi_insn * insn, unsigned int * data);
 
 /* Possible instructions for Digital IO */
 static int ni_660x_dio_insn_config(comedi_device * dev,
-	comedi_subdevice * s, comedi_insn * insn, lsampl_t * data);
+	comedi_subdevice * s, comedi_insn * insn, unsigned int * data);
 static int ni_660x_dio_insn_bits(comedi_device * dev,
-	comedi_subdevice * s, comedi_insn * insn, lsampl_t * data);
+	comedi_subdevice * s, comedi_insn * insn, unsigned int * data);
 
 static inline unsigned ni_660x_num_counters(comedi_device * dev)
 {
@@ -1121,7 +1121,7 @@ static int ni_660x_detach(comedi_device * dev)
 
 static int
 ni_660x_GPCT_rinsn(comedi_device * dev, comedi_subdevice * s,
-	comedi_insn * insn, lsampl_t * data)
+	comedi_insn * insn, unsigned int * data)
 {
 	return ni_tio_rinsn(subdev_to_counter(s), insn, data);
 }
@@ -1148,13 +1148,13 @@ static void init_tio_chip(comedi_device * dev, int chipset)
 
 static int
 ni_660x_GPCT_insn_config(comedi_device * dev, comedi_subdevice * s,
-	comedi_insn * insn, lsampl_t * data)
+	comedi_insn * insn, unsigned int * data)
 {
 	return ni_tio_insn_config(subdev_to_counter(s), insn, data);
 }
 
 static int ni_660x_GPCT_winsn(comedi_device * dev,
-	comedi_subdevice * s, comedi_insn * insn, lsampl_t * data)
+	comedi_subdevice * s, comedi_insn * insn, unsigned int * data)
 {
 	return ni_tio_winsn(subdev_to_counter(s), insn, data);
 }
@@ -1187,7 +1187,7 @@ static int ni_660x_find_device(comedi_device * dev, int bus, int slot)
 }
 
 static int ni_660x_dio_insn_bits(comedi_device * dev,
-	comedi_subdevice * s, comedi_insn * insn, lsampl_t * data)
+	comedi_subdevice * s, comedi_insn * insn, unsigned int * data)
 {
 	unsigned base_bitfield_channel = CR_CHAN(insn->chanspec);
 
@@ -1280,7 +1280,7 @@ static void ni660x_config_filter(comedi_device * dev, unsigned pfi_channel,
 }
 
 static int ni_660x_dio_insn_config(comedi_device * dev,
-	comedi_subdevice * s, comedi_insn * insn, lsampl_t * data)
+	comedi_subdevice * s, comedi_insn * insn, unsigned int * data)
 {
 	int chan = CR_CHAN(insn->chanspec);
 

commit 58dd7c0a2a6e76aab156aef625c7b53a6eaaace3
Author: J.P. Mellor <jpmellor@rose-hulman.edu>
Date:   Thu Feb 19 09:42:53 2009 -0800

    Staging: comedi: add ni_660x driver
    
    Driver for National Instruments 660x counter/timer boards (PCI-6601,
    PCI-6602, PXI-6602, and PXI-6608)
    
    From: J.P. Mellor <jpmellor@rose-hulman.edu>
    Cc: Herman Bruyninckx <Herman.Bruyninckx@mech.kuleuven.ac.be>
    Cc: Wim Meeussen <Wim.Meeussen@mech.kuleuven.ac.be>
    Cc: Klass Gadeyne <Klaas.Gadeyne@mech.kuleuven.ac.be>
    Cc: David Schleef <ds@schleef.org>
    Cc: Ian Abbott <abbotti@mev.co.uk>
    Cc: Frank Mori Hess <fmhess@users.sourceforge.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>

diff --git a/drivers/staging/comedi/drivers/ni_660x.c b/drivers/staging/comedi/drivers/ni_660x.c
new file mode 100644
index 000000000000..e646e98f3082
--- /dev/null
+++ b/drivers/staging/comedi/drivers/ni_660x.c
@@ -0,0 +1,1322 @@
+/*
+  comedi/drivers/ni_660x.c
+  Hardware driver for NI 660x devices
+
+  This program is free software; you can redistribute it and/or modify
+  it under the terms of the GNU General Public License as published by
+  the Free Software Foundation; either version 2 of the License, or
+  (at your option) any later version.
+
+  This program is distributed in the hope that it will be useful,
+  but WITHOUT ANY WARRANTY; without even the implied warranty of
+  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+  GNU General Public License for more details.
+
+  You should have received a copy of the GNU General Public License
+  along with this program; if not, write to the Free Software
+  Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
+*/
+
+/*
+Driver: ni_660x
+Description: National Instruments 660x counter/timer boards
+Devices:
+[National Instruments] PCI-6601 (ni_660x), PCI-6602, PXI-6602,
+	PXI-6608
+Author: J.P. Mellor <jpmellor@rose-hulman.edu>,
+	Herman.Bruyninckx@mech.kuleuven.ac.be,
+	Wim.Meeussen@mech.kuleuven.ac.be,
+	Klaas.Gadeyne@mech.kuleuven.ac.be,
+	Frank Mori Hess <fmhess@users.sourceforge.net>
+Updated: Thu Oct 18 12:56:06 EDT 2007
+Status: experimental
+
+Encoders work.  PulseGeneration (both single pulse and pulse train)
+works. Buffered commands work for input but not output.
+
+References:
+DAQ 660x Register-Level Programmer Manual  (NI 370505A-01)
+DAQ 6601/6602 User Manual (NI 322137B-01)
+
+*/
+
+#include "../comedidev.h"
+#include "mite.h"
+#include "ni_tio.h"
+
+enum ni_660x_constants {
+	min_counter_pfi_chan = 8,
+	max_dio_pfi_chan = 31,
+	counters_per_chip = 4
+};
+
+#define NUM_PFI_CHANNELS 40
+// really there are only up to 3 dma channels, but the register layout allows for 4
+#define MAX_DMA_CHANNEL 4
+
+/* See Register-Level Programmer Manual page 3.1 */
+typedef enum {
+	G0InterruptAcknowledge,
+	G0StatusRegister,
+	G1InterruptAcknowledge,
+	G1StatusRegister,
+	G01StatusRegister,
+	G0CommandRegister,
+	STCDIOParallelInput,
+	G1CommandRegister,
+	G0HWSaveRegister,
+	G1HWSaveRegister,
+	STCDIOOutput,
+	STCDIOControl,
+	G0SWSaveRegister,
+	G1SWSaveRegister,
+	G0ModeRegister,
+	G01JointStatus1Register,
+	G1ModeRegister,
+	STCDIOSerialInput,
+	G0LoadARegister,
+	G01JointStatus2Register,
+	G0LoadBRegister,
+	G1LoadARegister,
+	G1LoadBRegister,
+	G0InputSelectRegister,
+	G1InputSelectRegister,
+	G0AutoincrementRegister,
+	G1AutoincrementRegister,
+	G01JointResetRegister,
+	G0InterruptEnable,
+	G1InterruptEnable,
+	G0CountingModeRegister,
+	G1CountingModeRegister,
+	G0SecondGateRegister,
+	G1SecondGateRegister,
+	G0DMAConfigRegister,
+	G0DMAStatusRegister,
+	G1DMAConfigRegister,
+	G1DMAStatusRegister,
+	G2InterruptAcknowledge,
+	G2StatusRegister,
+	G3InterruptAcknowledge,
+	G3StatusRegister,
+	G23StatusRegister,
+	G2CommandRegister,
+	G3CommandRegister,
+	G2HWSaveRegister,
+	G3HWSaveRegister,
+	G2SWSaveRegister,
+	G3SWSaveRegister,
+	G2ModeRegister,
+	G23JointStatus1Register,
+	G3ModeRegister,
+	G2LoadARegister,
+	G23JointStatus2Register,
+	G2LoadBRegister,
+	G3LoadARegister,
+	G3LoadBRegister,
+	G2InputSelectRegister,
+	G3InputSelectRegister,
+	G2AutoincrementRegister,
+	G3AutoincrementRegister,
+	G23JointResetRegister,
+	G2InterruptEnable,
+	G3InterruptEnable,
+	G2CountingModeRegister,
+	G3CountingModeRegister,
+	G3SecondGateRegister,
+	G2SecondGateRegister,
+	G2DMAConfigRegister,
+	G2DMAStatusRegister,
+	G3DMAConfigRegister,
+	G3DMAStatusRegister,
+	DIO32Input,
+	DIO32Output,
+	ClockConfigRegister,
+	GlobalInterruptStatusRegister,
+	DMAConfigRegister,
+	GlobalInterruptConfigRegister,
+	IOConfigReg0_1,
+	IOConfigReg2_3,
+	IOConfigReg4_5,
+	IOConfigReg6_7,
+	IOConfigReg8_9,
+	IOConfigReg10_11,
+	IOConfigReg12_13,
+	IOConfigReg14_15,
+	IOConfigReg16_17,
+	IOConfigReg18_19,
+	IOConfigReg20_21,
+	IOConfigReg22_23,
+	IOConfigReg24_25,
+	IOConfigReg26_27,
+	IOConfigReg28_29,
+	IOConfigReg30_31,
+	IOConfigReg32_33,
+	IOConfigReg34_35,
+	IOConfigReg36_37,
+	IOConfigReg38_39,
+	NumRegisters,
+} NI_660x_Register;
+
+static inline unsigned IOConfigReg(unsigned pfi_channel)
+{
+	unsigned reg = IOConfigReg0_1 + pfi_channel / 2;
+	BUG_ON(reg > IOConfigReg38_39);
+	return reg;
+}
+
+enum ni_660x_register_width {
+	DATA_1B,
+	DATA_2B,
+	DATA_4B
+};
+
+enum ni_660x_register_direction {
+	NI_660x_READ,
+	NI_660x_WRITE,
+	NI_660x_READ_WRITE
+};
+
+enum ni_660x_pfi_output_select {
+	pfi_output_select_high_Z = 0,
+	pfi_output_select_counter = 1,
+	pfi_output_select_do = 2,
+	num_pfi_output_selects
+};
+
+enum ni_660x_subdevices {
+	NI_660X_DIO_SUBDEV = 1,
+	NI_660X_GPCT_SUBDEV_0 = 2
+};
+static inline unsigned NI_660X_GPCT_SUBDEV(unsigned index)
+{
+	return NI_660X_GPCT_SUBDEV_0 + index;
+}
+
+typedef struct {
+	const char *name;	// Register Name
+	int offset;		// Offset from base address from GPCT chip
+	enum ni_660x_register_direction direction;
+	enum ni_660x_register_width size;	// 1 byte, 2 bytes, or 4 bytes
+} NI_660xRegisterData;
+
+static const NI_660xRegisterData registerData[NumRegisters] = {
+	{"G0 Interrupt Acknowledge", 0x004, NI_660x_WRITE, DATA_2B},
+	{"G0 Status Register", 0x004, NI_660x_READ, DATA_2B},
+	{"G1 Interrupt Acknowledge", 0x006, NI_660x_WRITE, DATA_2B},
+	{"G1 Status Register", 0x006, NI_660x_READ, DATA_2B},
+	{"G01 Status Register ", 0x008, NI_660x_READ, DATA_2B},
+	{"G0 Command Register", 0x00C, NI_660x_WRITE, DATA_2B},
+	{"STC DIO Parallel Input", 0x00E, NI_660x_READ, DATA_2B},
+	{"G1 Command Register", 0x00E, NI_660x_WRITE, DATA_2B},
+	{"G0 HW Save Register", 0x010, NI_660x_READ, DATA_4B},
+	{"G1 HW Save Register", 0x014, NI_660x_READ, DATA_4B},
+	{"STC DIO Output", 0x014, NI_660x_WRITE, DATA_2B},
+	{"STC DIO Control", 0x016, NI_660x_WRITE, DATA_2B},
+	{"G0 SW Save Register", 0x018, NI_660x_READ, DATA_4B},
+	{"G1 SW Save Register", 0x01C, NI_660x_READ, DATA_4B},
+	{"G0 Mode Register", 0x034, NI_660x_WRITE, DATA_2B},
+	{"G01 Joint Status 1 Register", 0x036, NI_660x_READ, DATA_2B},
+	{"G1 Mode Register", 0x036, NI_660x_WRITE, DATA_2B},
+	{"STC DIO Serial Input", 0x038, NI_660x_READ, DATA_2B},
+	{"G0 Load A Register", 0x038, NI_660x_WRITE, DATA_4B},
+	{"G01 Joint Status 2 Register", 0x03A, NI_660x_READ, DATA_2B},
+	{"G0 Load B Register", 0x03C, NI_660x_WRITE, DATA_4B},
+	{"G1 Load A Register", 0x040, NI_660x_WRITE, DATA_4B},
+	{"G1 Load B Register", 0x044, NI_660x_WRITE, DATA_4B},
+	{"G0 Input Select Register", 0x048, NI_660x_WRITE, DATA_2B},
+	{"G1 Input Select Register", 0x04A, NI_660x_WRITE, DATA_2B},
+	{"G0 Autoincrement Register", 0x088, NI_660x_WRITE, DATA_2B},
+	{"G1 Autoincrement Register", 0x08A, NI_660x_WRITE, DATA_2B},
+	{"G01 Joint Reset Register", 0x090, NI_660x_WRITE, DATA_2B},
+	{"G0 Interrupt Enable", 0x092, NI_660x_WRITE, DATA_2B},
+	{"G1 Interrupt Enable", 0x096, NI_660x_WRITE, DATA_2B},
+	{"G0 Counting Mode Register", 0x0B0, NI_660x_WRITE, DATA_2B},
+	{"G1 Counting Mode Register", 0x0B2, NI_660x_WRITE, DATA_2B},
+	{"G0 Second Gate Register", 0x0B4, NI_660x_WRITE, DATA_2B},
+	{"G1 Second Gate Register", 0x0B6, NI_660x_WRITE, DATA_2B},
+	{"G0 DMA Config Register", 0x0B8, NI_660x_WRITE, DATA_2B},
+	{"G0 DMA Status Register", 0x0B8, NI_660x_READ, DATA_2B},
+	{"G1 DMA Config Register", 0x0BA, NI_660x_WRITE, DATA_2B},
+	{"G1 DMA Status Register", 0x0BA, NI_660x_READ, DATA_2B},
+	{"G2 Interrupt Acknowledge", 0x104, NI_660x_WRITE, DATA_2B},
+	{"G2 Status Register", 0x104, NI_660x_READ, DATA_2B},
+	{"G3 Interrupt Acknowledge", 0x106, NI_660x_WRITE, DATA_2B},
+	{"G3 Status Register", 0x106, NI_660x_READ, DATA_2B},
+	{"G23 Status Register", 0x108, NI_660x_READ, DATA_2B},
+	{"G2 Command Register", 0x10C, NI_660x_WRITE, DATA_2B},
+	{"G3 Command Register", 0x10E, NI_660x_WRITE, DATA_2B},
+	{"G2 HW Save Register", 0x110, NI_660x_READ, DATA_4B},
+	{"G3 HW Save Register", 0x114, NI_660x_READ, DATA_4B},
+	{"G2 SW Save Register", 0x118, NI_660x_READ, DATA_4B},
+	{"G3 SW Save Register", 0x11C, NI_660x_READ, DATA_4B},
+	{"G2 Mode Register", 0x134, NI_660x_WRITE, DATA_2B},
+	{"G23 Joint Status 1 Register", 0x136, NI_660x_READ, DATA_2B},
+	{"G3 Mode Register", 0x136, NI_660x_WRITE, DATA_2B},
+	{"G2 Load A Register", 0x138, NI_660x_WRITE, DATA_4B},
+	{"G23 Joint Status 2 Register", 0x13A, NI_660x_READ, DATA_2B},
+	{"G2 Load B Register", 0x13C, NI_660x_WRITE, DATA_4B},
+	{"G3 Load A Register", 0x140, NI_660x_WRITE, DATA_4B},
+	{"G3 Load B Register", 0x144, NI_660x_WRITE, DATA_4B},
+	{"G2 Input Select Register", 0x148, NI_660x_WRITE, DATA_2B},
+	{"G3 Input Select Register", 0x14A, NI_660x_WRITE, DATA_2B},
+	{"G2 Autoincrement Register", 0x188, NI_660x_WRITE, DATA_2B},
+	{"G3 Autoincrement Register", 0x18A, NI_660x_WRITE, DATA_2B},
+	{"G23 Joint Reset Register", 0x190, NI_660x_WRITE, DATA_2B},
+	{"G2 Interrupt Enable", 0x192, NI_660x_WRITE, DATA_2B},
+	{"G3 Interrupt Enable", 0x196, NI_660x_WRITE, DATA_2B},
+	{"G2 Counting Mode Register", 0x1B0, NI_660x_WRITE, DATA_2B},
+	{"G3 Counting Mode Register", 0x1B2, NI_660x_WRITE, DATA_2B},
+	{"G3 Second Gate Register", 0x1B6, NI_660x_WRITE, DATA_2B},
+	{"G2 Second Gate Register", 0x1B4, NI_660x_WRITE, DATA_2B},
+	{"G2 DMA Config Register", 0x1B8, NI_660x_WRITE, DATA_2B},
+	{"G2 DMA Status Register", 0x1B8, NI_660x_READ, DATA_2B},
+	{"G3 DMA Config Register", 0x1BA, NI_660x_WRITE, DATA_2B},
+	{"G3 DMA Status Register", 0x1BA, NI_660x_READ, DATA_2B},
+	{"32 bit Digital Input", 0x414, NI_660x_READ, DATA_4B},
+	{"32 bit Digital Output", 0x510, NI_660x_WRITE, DATA_4B},
+	{"Clock Config Register", 0x73C, NI_660x_WRITE, DATA_4B},
+	{"Global Interrupt Status Register", 0x754, NI_660x_READ, DATA_4B},
+	{"DMA Configuration Register", 0x76C, NI_660x_WRITE, DATA_4B},
+	{"Global Interrupt Config Register", 0x770, NI_660x_WRITE, DATA_4B},
+	{"IO Config Register 0-1", 0x77C, NI_660x_READ_WRITE, DATA_2B},
+	{"IO Config Register 2-3", 0x77E, NI_660x_READ_WRITE, DATA_2B},
+	{"IO Config Register 4-5", 0x780, NI_660x_READ_WRITE, DATA_2B},
+	{"IO Config Register 6-7", 0x782, NI_660x_READ_WRITE, DATA_2B},
+	{"IO Config Register 8-9", 0x784, NI_660x_READ_WRITE, DATA_2B},
+	{"IO Config Register 10-11", 0x786, NI_660x_READ_WRITE, DATA_2B},
+	{"IO Config Register 12-13", 0x788, NI_660x_READ_WRITE, DATA_2B},
+	{"IO Config Register 14-15", 0x78A, NI_660x_READ_WRITE, DATA_2B},
+	{"IO Config Register 16-17", 0x78C, NI_660x_READ_WRITE, DATA_2B},
+	{"IO Config Register 18-19", 0x78E, NI_660x_READ_WRITE, DATA_2B},
+	{"IO Config Register 20-21", 0x790, NI_660x_READ_WRITE, DATA_2B},
+	{"IO Config Register 22-23", 0x792, NI_660x_READ_WRITE, DATA_2B},
+	{"IO Config Register 24-25", 0x794, NI_660x_READ_WRITE, DATA_2B},
+	{"IO Config Register 26-27", 0x796, NI_660x_READ_WRITE, DATA_2B},
+	{"IO Config Register 28-29", 0x798, NI_660x_READ_WRITE, DATA_2B},
+	{"IO Config Register 30-31", 0x79A, NI_660x_READ_WRITE, DATA_2B},
+	{"IO Config Register 32-33", 0x79C, NI_660x_READ_WRITE, DATA_2B},
+	{"IO Config Register 34-35", 0x79E, NI_660x_READ_WRITE, DATA_2B},
+	{"IO Config Register 36-37", 0x7A0, NI_660x_READ_WRITE, DATA_2B},
+	{"IO Config Register 38-39", 0x7A2, NI_660x_READ_WRITE, DATA_2B}
+};
+
+// kind of ENABLE for the second counter
+enum clock_config_register_bits {
+	CounterSwap = 0x1 << 21
+};
+
+// ioconfigreg
+static inline unsigned ioconfig_bitshift(unsigned pfi_channel)
+{
+	if (pfi_channel % 2)
+		return 0;
+	else
+		return 8;
+}
+static inline unsigned pfi_output_select_mask(unsigned pfi_channel)
+{
+	return 0x3 << ioconfig_bitshift(pfi_channel);
+}
+static inline unsigned pfi_output_select_bits(unsigned pfi_channel,
+	unsigned output_select)
+{
+	return (output_select & 0x3) << ioconfig_bitshift(pfi_channel);
+}
+static inline unsigned pfi_input_select_mask(unsigned pfi_channel)
+{
+	return 0x7 << (4 + ioconfig_bitshift(pfi_channel));
+}
+static inline unsigned pfi_input_select_bits(unsigned pfi_channel,
+	unsigned input_select)
+{
+	return (input_select & 0x7) << (4 + ioconfig_bitshift(pfi_channel));
+}
+
+// dma configuration register bits
+static inline unsigned dma_select_mask(unsigned dma_channel)
+{
+	BUG_ON(dma_channel >= MAX_DMA_CHANNEL);
+	return 0x1f << (8 * dma_channel);
+}
+enum dma_selection {
+	dma_selection_none = 0x1f,
+};
+static inline unsigned dma_selection_counter(unsigned counter_index)
+{
+	BUG_ON(counter_index >= counters_per_chip);
+	return counter_index;
+}
+static inline unsigned dma_select_bits(unsigned dma_channel, unsigned selection)
+{
+	BUG_ON(dma_channel >= MAX_DMA_CHANNEL);
+	return (selection << (8 * dma_channel)) & dma_select_mask(dma_channel);
+}
+static inline unsigned dma_reset_bit(unsigned dma_channel)
+{
+	BUG_ON(dma_channel >= MAX_DMA_CHANNEL);
+	return 0x80 << (8 * dma_channel);
+}
+
+enum global_interrupt_status_register_bits {
+	Counter_0_Int_Bit = 0x100,
+	Counter_1_Int_Bit = 0x200,
+	Counter_2_Int_Bit = 0x400,
+	Counter_3_Int_Bit = 0x800,
+	Cascade_Int_Bit = 0x20000000,
+	Global_Int_Bit = 0x80000000
+};
+
+enum global_interrupt_config_register_bits {
+	Cascade_Int_Enable_Bit = 0x20000000,
+	Global_Int_Polarity_Bit = 0x40000000,
+	Global_Int_Enable_Bit = 0x80000000
+};
+
+// Offset of the GPCT chips from the base-adress of the card
+static const unsigned GPCT_OFFSET[2] = { 0x0, 0x800 };	/* First chip is at base-address +
+							   0x00, etc. */
+
+/* Board description*/
+typedef struct {
+	unsigned short dev_id;	/* `lspci` will show you this */
+	const char *name;
+	unsigned n_chips;	/* total number of TIO chips */
+} ni_660x_board;
+
+static const ni_660x_board ni_660x_boards[] = {
+	{
+	      dev_id:	0x2c60,
+	      name:	"PCI-6601",
+	      n_chips:	1,
+		},
+	{
+	      dev_id:	0x1310,
+	      name:	"PCI-6602",
+	      n_chips:	2,
+		},
+	{
+	      dev_id:	0x1360,
+	      name:	"PXI-6602",
+	      n_chips:	2,
+		},
+	{
+	      dev_id:	0x2cc0,
+	      name:	"PXI-6608",
+	      n_chips:	2,
+		},
+};
+
+#define NI_660X_MAX_NUM_CHIPS 2
+#define NI_660X_MAX_NUM_COUNTERS (NI_660X_MAX_NUM_CHIPS * counters_per_chip)
+
+static DEFINE_PCI_DEVICE_TABLE(ni_660x_pci_table) = {
+	{PCI_VENDOR_ID_NATINST, 0x2c60, PCI_ANY_ID, PCI_ANY_ID, 0, 0, 0},
+	{PCI_VENDOR_ID_NATINST, 0x1310, PCI_ANY_ID, PCI_ANY_ID, 0, 0, 0},
+	{PCI_VENDOR_ID_NATINST, 0x1360, PCI_ANY_ID, PCI_ANY_ID, 0, 0, 0},
+	{PCI_VENDOR_ID_NATINST, 0x2cc0, PCI_ANY_ID, PCI_ANY_ID, 0, 0, 0},
+	{0}
+};
+
+MODULE_DEVICE_TABLE(pci, ni_660x_pci_table);
+
+typedef struct {
+	struct mite_struct *mite;
+	struct ni_gpct_device *counter_dev;
+	uint64_t pfi_direction_bits;
+	struct mite_dma_descriptor_ring
+	*mite_rings[NI_660X_MAX_NUM_CHIPS][counters_per_chip];
+	spinlock_t mite_channel_lock;
+	unsigned dma_configuration_soft_copies[NI_660X_MAX_NUM_CHIPS];
+	spinlock_t soft_reg_copy_lock;
+	unsigned short pfi_output_selects[NUM_PFI_CHANNELS];
+} ni_660x_private;
+
+static inline ni_660x_private *private(comedi_device * dev)
+{
+	return dev->private;
+}
+
+/* initialized in ni_660x_find_device() */
+static inline const ni_660x_board *board(comedi_device * dev)
+{
+	return dev->board_ptr;
+}
+
+#define n_ni_660x_boards (sizeof(ni_660x_boards)/sizeof(ni_660x_boards[0]))
+
+static int ni_660x_attach(comedi_device * dev, comedi_devconfig * it);
+static int ni_660x_detach(comedi_device * dev);
+static void init_tio_chip(comedi_device * dev, int chipset);
+static void ni_660x_select_pfi_output(comedi_device * dev, unsigned pfi_channel,
+	unsigned output_select);
+
+static comedi_driver driver_ni_660x = {
+      driver_name:"ni_660x",
+      module:THIS_MODULE,
+      attach:ni_660x_attach,
+      detach:ni_660x_detach,
+};
+
+COMEDI_PCI_INITCLEANUP(driver_ni_660x, ni_660x_pci_table);
+
+static int ni_660x_find_device(comedi_device * dev, int bus, int slot);
+static int ni_660x_set_pfi_routing(comedi_device * dev, unsigned chan,
+	unsigned source);
+
+/* Possible instructions for a GPCT */
+static int ni_660x_GPCT_rinsn(comedi_device * dev,
+	comedi_subdevice * s, comedi_insn * insn, lsampl_t * data);
+static int ni_660x_GPCT_insn_config(comedi_device * dev,
+	comedi_subdevice * s, comedi_insn * insn, lsampl_t * data);
+static int ni_660x_GPCT_winsn(comedi_device * dev,
+	comedi_subdevice * s, comedi_insn * insn, lsampl_t * data);
+
+/* Possible instructions for Digital IO */
+static int ni_660x_dio_insn_config(comedi_device * dev,
+	comedi_subdevice * s, comedi_insn * insn, lsampl_t * data);
+static int ni_660x_dio_insn_bits(comedi_device * dev,
+	comedi_subdevice * s, comedi_insn * insn, lsampl_t * data);
+
+static inline unsigned ni_660x_num_counters(comedi_device * dev)
+{
+	return board(dev)->n_chips * counters_per_chip;
+}
+
+static NI_660x_Register ni_gpct_to_660x_register(enum ni_gpct_register reg)
+{
+	NI_660x_Register ni_660x_register;
+	switch (reg) {
+	case NITIO_G0_Autoincrement_Reg:
+		ni_660x_register = G0AutoincrementRegister;
+		break;
+	case NITIO_G1_Autoincrement_Reg:
+		ni_660x_register = G1AutoincrementRegister;
+		break;
+	case NITIO_G2_Autoincrement_Reg:
+		ni_660x_register = G2AutoincrementRegister;
+		break;
+	case NITIO_G3_Autoincrement_Reg:
+		ni_660x_register = G3AutoincrementRegister;
+		break;
+	case NITIO_G0_Command_Reg:
+		ni_660x_register = G0CommandRegister;
+		break;
+	case NITIO_G1_Command_Reg:
+		ni_660x_register = G1CommandRegister;
+		break;
+	case NITIO_G2_Command_Reg:
+		ni_660x_register = G2CommandRegister;
+		break;
+	case NITIO_G3_Command_Reg:
+		ni_660x_register = G3CommandRegister;
+		break;
+	case NITIO_G0_HW_Save_Reg:
+		ni_660x_register = G0HWSaveRegister;
+		break;
+	case NITIO_G1_HW_Save_Reg:
+		ni_660x_register = G1HWSaveRegister;
+		break;
+	case NITIO_G2_HW_Save_Reg:
+		ni_660x_register = G2HWSaveRegister;
+		break;
+	case NITIO_G3_HW_Save_Reg:
+		ni_660x_register = G3HWSaveRegister;
+		break;
+	case NITIO_G0_SW_Save_Reg:
+		ni_660x_register = G0SWSaveRegister;
+		break;
+	case NITIO_G1_SW_Save_Reg:
+		ni_660x_register = G1SWSaveRegister;
+		break;
+	case NITIO_G2_SW_Save_Reg:
+		ni_660x_register = G2SWSaveRegister;
+		break;
+	case NITIO_G3_SW_Save_Reg:
+		ni_660x_register = G3SWSaveRegister;
+		break;
+	case NITIO_G0_Mode_Reg:
+		ni_660x_register = G0ModeRegister;
+		break;
+	case NITIO_G1_Mode_Reg:
+		ni_660x_register = G1ModeRegister;
+		break;
+	case NITIO_G2_Mode_Reg:
+		ni_660x_register = G2ModeRegister;
+		break;
+	case NITIO_G3_Mode_Reg:
+		ni_660x_register = G3ModeRegister;
+		break;
+	case NITIO_G0_LoadA_Reg:
+		ni_660x_register = G0LoadARegister;
+		break;
+	case NITIO_G1_LoadA_Reg:
+		ni_660x_register = G1LoadARegister;
+		break;
+	case NITIO_G2_LoadA_Reg:
+		ni_660x_register = G2LoadARegister;
+		break;
+	case NITIO_G3_LoadA_Reg:
+		ni_660x_register = G3LoadARegister;
+		break;
+	case NITIO_G0_LoadB_Reg:
+		ni_660x_register = G0LoadBRegister;
+		break;
+	case NITIO_G1_LoadB_Reg:
+		ni_660x_register = G1LoadBRegister;
+		break;
+	case NITIO_G2_LoadB_Reg:
+		ni_660x_register = G2LoadBRegister;
+		break;
+	case NITIO_G3_LoadB_Reg:
+		ni_660x_register = G3LoadBRegister;
+		break;
+	case NITIO_G0_Input_Select_Reg:
+		ni_660x_register = G0InputSelectRegister;
+		break;
+	case NITIO_G1_Input_Select_Reg:
+		ni_660x_register = G1InputSelectRegister;
+		break;
+	case NITIO_G2_Input_Select_Reg:
+		ni_660x_register = G2InputSelectRegister;
+		break;
+	case NITIO_G3_Input_Select_Reg:
+		ni_660x_register = G3InputSelectRegister;
+		break;
+	case NITIO_G01_Status_Reg:
+		ni_660x_register = G01StatusRegister;
+		break;
+	case NITIO_G23_Status_Reg:
+		ni_660x_register = G23StatusRegister;
+		break;
+	case NITIO_G01_Joint_Reset_Reg:
+		ni_660x_register = G01JointResetRegister;
+		break;
+	case NITIO_G23_Joint_Reset_Reg:
+		ni_660x_register = G23JointResetRegister;
+		break;
+	case NITIO_G01_Joint_Status1_Reg:
+		ni_660x_register = G01JointStatus1Register;
+		break;
+	case NITIO_G23_Joint_Status1_Reg:
+		ni_660x_register = G23JointStatus1Register;
+		break;
+	case NITIO_G01_Joint_Status2_Reg:
+		ni_660x_register = G01JointStatus2Register;
+		break;
+	case NITIO_G23_Joint_Status2_Reg:
+		ni_660x_register = G23JointStatus2Register;
+		break;
+	case NITIO_G0_Counting_Mode_Reg:
+		ni_660x_register = G0CountingModeRegister;
+		break;
+	case NITIO_G1_Counting_Mode_Reg:
+		ni_660x_register = G1CountingModeRegister;
+		break;
+	case NITIO_G2_Counting_Mode_Reg:
+		ni_660x_register = G2CountingModeRegister;
+		break;
+	case NITIO_G3_Counting_Mode_Reg:
+		ni_660x_register = G3CountingModeRegister;
+		break;
+	case NITIO_G0_Second_Gate_Reg:
+		ni_660x_register = G0SecondGateRegister;
+		break;
+	case NITIO_G1_Second_Gate_Reg:
+		ni_660x_register = G1SecondGateRegister;
+		break;
+	case NITIO_G2_Second_Gate_Reg:
+		ni_660x_register = G2SecondGateRegister;
+		break;
+	case NITIO_G3_Second_Gate_Reg:
+		ni_660x_register = G3SecondGateRegister;
+		break;
+	case NITIO_G0_DMA_Config_Reg:
+		ni_660x_register = G0DMAConfigRegister;
+		break;
+	case NITIO_G0_DMA_Status_Reg:
+		ni_660x_register = G0DMAStatusRegister;
+		break;
+	case NITIO_G1_DMA_Config_Reg:
+		ni_660x_register = G1DMAConfigRegister;
+		break;
+	case NITIO_G1_DMA_Status_Reg:
+		ni_660x_register = G1DMAStatusRegister;
+		break;
+	case NITIO_G2_DMA_Config_Reg:
+		ni_660x_register = G2DMAConfigRegister;
+		break;
+	case NITIO_G2_DMA_Status_Reg:
+		ni_660x_register = G2DMAStatusRegister;
+		break;
+	case NITIO_G3_DMA_Config_Reg:
+		ni_660x_register = G3DMAConfigRegister;
+		break;
+	case NITIO_G3_DMA_Status_Reg:
+		ni_660x_register = G3DMAStatusRegister;
+		break;
+	case NITIO_G0_Interrupt_Acknowledge_Reg:
+		ni_660x_register = G0InterruptAcknowledge;
+		break;
+	case NITIO_G1_Interrupt_Acknowledge_Reg:
+		ni_660x_register = G1InterruptAcknowledge;
+		break;
+	case NITIO_G2_Interrupt_Acknowledge_Reg:
+		ni_660x_register = G2InterruptAcknowledge;
+		break;
+	case NITIO_G3_Interrupt_Acknowledge_Reg:
+		ni_660x_register = G3InterruptAcknowledge;
+		break;
+	case NITIO_G0_Status_Reg:
+		ni_660x_register = G0StatusRegister;
+		break;
+	case NITIO_G1_Status_Reg:
+		ni_660x_register = G0StatusRegister;
+		break;
+	case NITIO_G2_Status_Reg:
+		ni_660x_register = G0StatusRegister;
+		break;
+	case NITIO_G3_Status_Reg:
+		ni_660x_register = G0StatusRegister;
+		break;
+	case NITIO_G0_Interrupt_Enable_Reg:
+		ni_660x_register = G0InterruptEnable;
+		break;
+	case NITIO_G1_Interrupt_Enable_Reg:
+		ni_660x_register = G1InterruptEnable;
+		break;
+	case NITIO_G2_Interrupt_Enable_Reg:
+		ni_660x_register = G2InterruptEnable;
+		break;
+	case NITIO_G3_Interrupt_Enable_Reg:
+		ni_660x_register = G3InterruptEnable;
+		break;
+	default:
+		rt_printk("%s: unhandled register 0x%x in switch.\n",
+			__FUNCTION__, reg);
+		BUG();
+		return 0;
+		break;
+	}
+	return ni_660x_register;
+}
+
+static inline void ni_660x_write_register(comedi_device * dev,
+	unsigned chip_index, unsigned bits, NI_660x_Register reg)
+{
+	void *const write_address =
+		private(dev)->mite->daq_io_addr + GPCT_OFFSET[chip_index] +
+		registerData[reg].offset;
+
+	switch (registerData[reg].size) {
+	case DATA_2B:
+		writew(bits, write_address);
+		break;
+	case DATA_4B:
+		writel(bits, write_address);
+		break;
+	default:
+		rt_printk("%s: %s: bug! unhandled case (reg=0x%x) in switch.\n",
+			__FILE__, __FUNCTION__, reg);
+		BUG();
+		break;
+	}
+}
+
+static inline unsigned ni_660x_read_register(comedi_device * dev,
+	unsigned chip_index, NI_660x_Register reg)
+{
+	void *const read_address =
+		private(dev)->mite->daq_io_addr + GPCT_OFFSET[chip_index] +
+		registerData[reg].offset;
+
+	switch (registerData[reg].size) {
+	case DATA_2B:
+		return readw(read_address);
+		break;
+	case DATA_4B:
+		return readl(read_address);
+		break;
+	default:
+		rt_printk("%s: %s: bug! unhandled case (reg=0x%x) in switch.\n",
+			__FILE__, __FUNCTION__, reg);
+		BUG();
+		break;
+	}
+	return 0;
+}
+
+static void ni_gpct_write_register(struct ni_gpct *counter, unsigned bits,
+	enum ni_gpct_register reg)
+{
+	comedi_device *dev = counter->counter_dev->dev;
+	NI_660x_Register ni_660x_register = ni_gpct_to_660x_register(reg);
+	ni_660x_write_register(dev, counter->chip_index, bits,
+		ni_660x_register);
+}
+
+static unsigned ni_gpct_read_register(struct ni_gpct *counter,
+	enum ni_gpct_register reg)
+{
+	comedi_device *dev = counter->counter_dev->dev;
+	NI_660x_Register ni_660x_register = ni_gpct_to_660x_register(reg);
+	return ni_660x_read_register(dev, counter->chip_index,
+		ni_660x_register);
+}
+
+static inline struct mite_dma_descriptor_ring *mite_ring(ni_660x_private * priv,
+	struct ni_gpct *counter)
+{
+	return priv->mite_rings[counter->chip_index][counter->counter_index];
+}
+
+static inline void ni_660x_set_dma_channel(comedi_device * dev,
+	unsigned mite_channel, struct ni_gpct *counter)
+{
+	unsigned long flags;
+	comedi_spin_lock_irqsave(&private(dev)->soft_reg_copy_lock, flags);
+	private(dev)->dma_configuration_soft_copies[counter->chip_index] &=
+		~dma_select_mask(mite_channel);
+	private(dev)->dma_configuration_soft_copies[counter->chip_index] |=
+		dma_select_bits(mite_channel,
+		dma_selection_counter(counter->counter_index));
+	ni_660x_write_register(dev, counter->chip_index,
+		private(dev)->dma_configuration_soft_copies[counter->
+			chip_index] | dma_reset_bit(mite_channel),
+		DMAConfigRegister);
+	mmiowb();
+	comedi_spin_unlock_irqrestore(&private(dev)->soft_reg_copy_lock, flags);
+}
+
+static inline void ni_660x_unset_dma_channel(comedi_device * dev,
+	unsigned mite_channel, struct ni_gpct *counter)
+{
+	unsigned long flags;
+	comedi_spin_lock_irqsave(&private(dev)->soft_reg_copy_lock, flags);
+	private(dev)->dma_configuration_soft_copies[counter->chip_index] &=
+		~dma_select_mask(mite_channel);
+	private(dev)->dma_configuration_soft_copies[counter->chip_index] |=
+		dma_select_bits(mite_channel, dma_selection_none);
+	ni_660x_write_register(dev, counter->chip_index,
+		private(dev)->dma_configuration_soft_copies[counter->
+			chip_index], DMAConfigRegister);
+	mmiowb();
+	comedi_spin_unlock_irqrestore(&private(dev)->soft_reg_copy_lock, flags);
+}
+
+static int ni_660x_request_mite_channel(comedi_device * dev,
+	struct ni_gpct *counter, enum comedi_io_direction direction)
+{
+	unsigned long flags;
+	struct mite_channel *mite_chan;
+
+	comedi_spin_lock_irqsave(&private(dev)->mite_channel_lock, flags);
+	BUG_ON(counter->mite_chan);
+	mite_chan =
+		mite_request_channel(private(dev)->mite, mite_ring(private(dev),
+			counter));
+	if (mite_chan == NULL) {
+		comedi_spin_unlock_irqrestore(&private(dev)->mite_channel_lock,
+			flags);
+		comedi_error(dev,
+			"failed to reserve mite dma channel for counter.");
+		return -EBUSY;
+	}
+	mite_chan->dir = direction;
+	ni_tio_set_mite_channel(counter, mite_chan);
+	ni_660x_set_dma_channel(dev, mite_chan->channel, counter);
+	comedi_spin_unlock_irqrestore(&private(dev)->mite_channel_lock, flags);
+	return 0;
+}
+
+void ni_660x_release_mite_channel(comedi_device * dev, struct ni_gpct *counter)
+{
+	unsigned long flags;
+
+	comedi_spin_lock_irqsave(&private(dev)->mite_channel_lock, flags);
+	if (counter->mite_chan) {
+		struct mite_channel *mite_chan = counter->mite_chan;
+
+		ni_660x_unset_dma_channel(dev, mite_chan->channel, counter);
+		ni_tio_set_mite_channel(counter, NULL);
+		mite_release_channel(mite_chan);
+	}
+	comedi_spin_unlock_irqrestore(&private(dev)->mite_channel_lock, flags);
+}
+
+static int ni_660x_cmd(comedi_device * dev, comedi_subdevice * s)
+{
+	int retval;
+
+	struct ni_gpct *counter = subdev_to_counter(s);
+//      const comedi_cmd *cmd = &s->async->cmd;
+
+	retval = ni_660x_request_mite_channel(dev, counter, COMEDI_INPUT);
+	if (retval) {
+		comedi_error(dev,
+			"no dma channel available for use by counter");
+		return retval;
+	}
+	ni_tio_acknowledge_and_confirm(counter, NULL, NULL, NULL, NULL);
+	retval = ni_tio_cmd(counter, s->async);
+
+	return retval;
+}
+
+static int ni_660x_cmdtest(comedi_device * dev, comedi_subdevice * s,
+	comedi_cmd * cmd)
+{
+	struct ni_gpct *counter = subdev_to_counter(s);
+
+	return ni_tio_cmdtest(counter, cmd);
+}
+
+static int ni_660x_cancel(comedi_device * dev, comedi_subdevice * s)
+{
+	struct ni_gpct *counter = subdev_to_counter(s);
+	int retval;
+
+	retval = ni_tio_cancel(counter);
+	ni_660x_release_mite_channel(dev, counter);
+	return retval;
+}
+
+static void set_tio_counterswap(comedi_device * dev, int chipset)
+{
+	/* See P. 3.5 of the Register-Level Programming manual.  The
+	   CounterSwap bit has to be set on the second chip, otherwise
+	   it will try to use the same pins as the first chip.
+	 */
+	if (chipset)
+		ni_660x_write_register(dev, chipset, CounterSwap,
+			ClockConfigRegister);
+	else
+		ni_660x_write_register(dev, chipset, 0, ClockConfigRegister);
+}
+
+static void ni_660x_handle_gpct_interrupt(comedi_device * dev,
+	comedi_subdevice * s)
+{
+	ni_tio_handle_interrupt(subdev_to_counter(s), s);
+	if (s->async->events) {
+		if (s->async->
+			events & (COMEDI_CB_EOA | COMEDI_CB_ERROR |
+				COMEDI_CB_OVERFLOW)) {
+			ni_660x_cancel(dev, s);
+		}
+		comedi_event(dev, s);
+	}
+}
+
+static irqreturn_t ni_660x_interrupt(int irq, void *d PT_REGS_ARG)
+{
+	comedi_device *dev = d;
+	comedi_subdevice *s;
+	unsigned i;
+
+	if (dev->attached == 0)
+		return IRQ_NONE;
+	smp_mb();
+	for (i = 0; i < ni_660x_num_counters(dev); ++i) {
+		s = dev->subdevices + NI_660X_GPCT_SUBDEV(i);
+		ni_660x_handle_gpct_interrupt(dev, s);
+	}
+	return IRQ_HANDLED;
+}
+
+static int ni_660x_buf_change(comedi_device * dev, comedi_subdevice * s,
+	unsigned long new_size)
+{
+	int ret;
+
+	ret = mite_buf_change(mite_ring(private(dev), subdev_to_counter(s)),
+		s->async);
+	if (ret < 0)
+		return ret;
+
+	return 0;
+}
+
+static int ni_660x_allocate_private(comedi_device * dev)
+{
+	int retval;
+	unsigned i;
+
+	if ((retval = alloc_private(dev, sizeof(ni_660x_private))) < 0)
+		return retval;
+	spin_lock_init(&private(dev)->mite_channel_lock);
+	spin_lock_init(&private(dev)->soft_reg_copy_lock);
+	for (i = 0; i < NUM_PFI_CHANNELS; ++i) {
+		private(dev)->pfi_output_selects[i] = pfi_output_select_counter;
+	}
+	return 0;
+}
+
+static int ni_660x_alloc_mite_rings(comedi_device * dev)
+{
+	unsigned i;
+	unsigned j;
+
+	for (i = 0; i < board(dev)->n_chips; ++i) {
+		for (j = 0; j < counters_per_chip; ++j) {
+			private(dev)->mite_rings[i][j] =
+				mite_alloc_ring(private(dev)->mite);
+			if (private(dev)->mite_rings[i][j] == NULL) {
+				return -ENOMEM;
+			}
+		}
+	}
+	return 0;
+}
+
+static void ni_660x_free_mite_rings(comedi_device * dev)
+{
+	unsigned i;
+	unsigned j;
+
+	for (i = 0; i < board(dev)->n_chips; ++i) {
+		for (j = 0; j < counters_per_chip; ++j) {
+			mite_free_ring(private(dev)->mite_rings[i][j]);
+		}
+	}
+}
+
+static int ni_660x_attach(comedi_device * dev, comedi_devconfig * it)
+{
+	comedi_subdevice *s;
+	int ret;
+	unsigned i;
+	unsigned global_interrupt_config_bits;
+
+	printk("comedi%d: ni_660x: ", dev->minor);
+
+	ret = ni_660x_allocate_private(dev);
+	if (ret < 0)
+		return ret;
+	ret = ni_660x_find_device(dev, it->options[0], it->options[1]);
+	if (ret < 0)
+		return ret;
+
+	dev->board_name = board(dev)->name;
+
+	ret = mite_setup2(private(dev)->mite, 1);
+	if (ret < 0) {
+		printk("error setting up mite\n");
+		return ret;
+	}
+	comedi_set_hw_dev(dev, &private(dev)->mite->pcidev->dev);
+	ret = ni_660x_alloc_mite_rings(dev);
+	if (ret < 0)
+		return ret;
+
+	printk(" %s ", dev->board_name);
+
+	dev->n_subdevices = 2 + NI_660X_MAX_NUM_COUNTERS;
+
+	if (alloc_subdevices(dev, dev->n_subdevices) < 0)
+		return -ENOMEM;
+
+	s = dev->subdevices + 0;
+	/* Old GENERAL-PURPOSE COUNTER/TIME (GPCT) subdevice, no longer used */
+	s->type = COMEDI_SUBD_UNUSED;
+
+	s = dev->subdevices + NI_660X_DIO_SUBDEV;
+	/* DIGITAL I/O SUBDEVICE */
+	s->type = COMEDI_SUBD_DIO;
+	s->subdev_flags = SDF_READABLE | SDF_WRITABLE;
+	s->n_chan = NUM_PFI_CHANNELS;
+	s->maxdata = 1;
+	s->range_table = &range_digital;
+	s->insn_bits = ni_660x_dio_insn_bits;
+	s->insn_config = ni_660x_dio_insn_config;
+	s->io_bits = 0;		/* all bits default to input */
+	// we use the ioconfig registers to control dio direction, so zero output enables in stc dio control reg
+	ni_660x_write_register(dev, 0, 0, STCDIOControl);
+
+	private(dev)->counter_dev = ni_gpct_device_construct(dev,
+		&ni_gpct_write_register, &ni_gpct_read_register,
+		ni_gpct_variant_660x, ni_660x_num_counters(dev));
+	if (private(dev)->counter_dev == NULL)
+		return -ENOMEM;
+	for (i = 0; i < NI_660X_MAX_NUM_COUNTERS; ++i) {
+		s = dev->subdevices + NI_660X_GPCT_SUBDEV(i);
+		if (i < ni_660x_num_counters(dev)) {
+			s->type = COMEDI_SUBD_COUNTER;
+			s->subdev_flags =
+				SDF_READABLE | SDF_WRITABLE | SDF_LSAMPL |
+				SDF_CMD_READ /* | SDF_CMD_WRITE */ ;
+			s->n_chan = 3;
+			s->maxdata = 0xffffffff;
+			s->insn_read = ni_660x_GPCT_rinsn;
+			s->insn_write = ni_660x_GPCT_winsn;
+			s->insn_config = ni_660x_GPCT_insn_config;
+			s->do_cmd = &ni_660x_cmd;
+			s->len_chanlist = 1;
+			s->do_cmdtest = &ni_660x_cmdtest;
+			s->cancel = &ni_660x_cancel;
+			s->async_dma_dir = DMA_BIDIRECTIONAL;
+			s->buf_change = &ni_660x_buf_change;
+			s->private = &private(dev)->counter_dev->counters[i];
+
+			private(dev)->counter_dev->counters[i].chip_index =
+				i / counters_per_chip;
+			private(dev)->counter_dev->counters[i].counter_index =
+				i % counters_per_chip;
+		} else {
+			s->type = COMEDI_SUBD_UNUSED;
+		}
+	}
+	for (i = 0; i < board(dev)->n_chips; ++i) {
+		init_tio_chip(dev, i);
+	}
+	for (i = 0; i < ni_660x_num_counters(dev); ++i) {
+		ni_tio_init_counter(&private(dev)->counter_dev->counters[i]);
+	}
+	for (i = 0; i < NUM_PFI_CHANNELS; ++i) {
+		if (i < min_counter_pfi_chan)
+			ni_660x_set_pfi_routing(dev, i, pfi_output_select_do);
+		else
+			ni_660x_set_pfi_routing(dev, i,
+				pfi_output_select_counter);
+		ni_660x_select_pfi_output(dev, i, pfi_output_select_high_Z);
+	}
+	/* to be safe, set counterswap bits on tio chips after all the counter
+	   outputs have been set to high impedance mode */
+	for (i = 0; i < board(dev)->n_chips; ++i) {
+		set_tio_counterswap(dev, i);
+	}
+	if ((ret = comedi_request_irq(mite_irq(private(dev)->mite),
+				&ni_660x_interrupt, IRQF_SHARED, "ni_660x",
+				dev)) < 0) {
+		printk(" irq not available\n");
+		return ret;
+	}
+	dev->irq = mite_irq(private(dev)->mite);
+	global_interrupt_config_bits = Global_Int_Enable_Bit;
+	if (board(dev)->n_chips > 1)
+		global_interrupt_config_bits |= Cascade_Int_Enable_Bit;
+	ni_660x_write_register(dev, 0, global_interrupt_config_bits,
+		GlobalInterruptConfigRegister);
+	printk("attached\n");
+	return 0;
+}
+
+static int ni_660x_detach(comedi_device * dev)
+{
+	printk("comedi%d: ni_660x: remove\n", dev->minor);
+
+	/* Free irq */
+	if (dev->irq)
+		comedi_free_irq(dev->irq, dev);
+
+	if (dev->private) {
+		if (private(dev)->counter_dev)
+			ni_gpct_device_destroy(private(dev)->counter_dev);
+		if (private(dev)->mite) {
+			ni_660x_free_mite_rings(dev);
+			mite_unsetup(private(dev)->mite);
+		}
+	}
+	return 0;
+}
+
+static int
+ni_660x_GPCT_rinsn(comedi_device * dev, comedi_subdevice * s,
+	comedi_insn * insn, lsampl_t * data)
+{
+	return ni_tio_rinsn(subdev_to_counter(s), insn, data);
+}
+
+static void init_tio_chip(comedi_device * dev, int chipset)
+{
+	unsigned i;
+
+	// init dma configuration register
+	private(dev)->dma_configuration_soft_copies[chipset] = 0;
+	for (i = 0; i < MAX_DMA_CHANNEL; ++i) {
+		private(dev)->dma_configuration_soft_copies[chipset] |=
+			dma_select_bits(i,
+			dma_selection_none) & dma_select_mask(i);
+	}
+	ni_660x_write_register(dev, chipset,
+		private(dev)->dma_configuration_soft_copies[chipset],
+		DMAConfigRegister);
+	for(i = 0; i < NUM_PFI_CHANNELS; ++i)
+	{
+		ni_660x_write_register(dev, chipset, 0, IOConfigReg(i));
+	}
+}
+
+static int
+ni_660x_GPCT_insn_config(comedi_device * dev, comedi_subdevice * s,
+	comedi_insn * insn, lsampl_t * data)
+{
+	return ni_tio_insn_config(subdev_to_counter(s), insn, data);
+}
+
+static int ni_660x_GPCT_winsn(comedi_device * dev,
+	comedi_subdevice * s, comedi_insn * insn, lsampl_t * data)
+{
+	return ni_tio_winsn(subdev_to_counter(s), insn, data);
+}
+
+static int ni_660x_find_device(comedi_device * dev, int bus, int slot)
+{
+	struct mite_struct *mite;
+	int i;
+
+	for (mite = mite_devices; mite; mite = mite->next) {
+		if (mite->used)
+			continue;
+		if (bus || slot) {
+			if (bus != mite->pcidev->bus->number ||
+				slot != PCI_SLOT(mite->pcidev->devfn))
+				continue;
+		}
+
+		for (i = 0; i < n_ni_660x_boards; i++) {
+			if (mite_device_id(mite) == ni_660x_boards[i].dev_id) {
+				dev->board_ptr = ni_660x_boards + i;
+				private(dev)->mite = mite;
+				return 0;
+			}
+		}
+	}
+	printk("no device found\n");
+	mite_list_devices();
+	return -EIO;
+}
+
+static int ni_660x_dio_insn_bits(comedi_device * dev,
+	comedi_subdevice * s, comedi_insn * insn, lsampl_t * data)
+{
+	unsigned base_bitfield_channel = CR_CHAN(insn->chanspec);
+
+	// Check if we have to write some bits
+	if (data[0]) {
+		s->state &= ~(data[0] << base_bitfield_channel);
+		s->state |= (data[0] & data[1]) << base_bitfield_channel;
+		/* Write out the new digital output lines */
+		ni_660x_write_register(dev, 0, s->state, DIO32Output);
+	}
+	/* on return, data[1] contains the value of the digital
+	 * input and output lines. */
+	data[1] =
+		(ni_660x_read_register(dev, 0,
+			DIO32Input) >> base_bitfield_channel);
+	return 2;
+}
+
+static void ni_660x_select_pfi_output(comedi_device * dev, unsigned pfi_channel,
+	unsigned output_select)
+{
+	static const unsigned counter_4_7_first_pfi = 8;
+	static const unsigned counter_4_7_last_pfi = 23;
+	unsigned active_chipset = 0;
+	unsigned idle_chipset = 0;
+	unsigned active_bits;
+	unsigned idle_bits;
+
+	if(board(dev)->n_chips > 1) {
+		if(output_select == pfi_output_select_counter &&
+			pfi_channel >= counter_4_7_first_pfi &&
+			pfi_channel <= counter_4_7_last_pfi) {
+			active_chipset = 1;
+			idle_chipset = 0;
+		}else {
+			active_chipset = 0;
+			idle_chipset = 1;
+		}
+	}
+
+	if(idle_chipset != active_chipset) {
+		idle_bits = ni_660x_read_register(dev, idle_chipset, IOConfigReg(pfi_channel));
+		idle_bits &= ~pfi_output_select_mask(pfi_channel);
+		idle_bits |= pfi_output_select_bits(pfi_channel, pfi_output_select_high_Z);
+		ni_660x_write_register(dev, idle_chipset, idle_bits, IOConfigReg(pfi_channel));
+	}
+
+	active_bits = ni_660x_read_register(dev, active_chipset, IOConfigReg(pfi_channel));
+	active_bits &= ~pfi_output_select_mask(pfi_channel);
+	active_bits |= pfi_output_select_bits(pfi_channel, output_select);
+	ni_660x_write_register(dev, active_chipset, active_bits, IOConfigReg(pfi_channel));
+}
+
+static int ni_660x_set_pfi_routing(comedi_device * dev, unsigned chan,
+	unsigned source)
+{
+	if (source > num_pfi_output_selects)
+		return -EINVAL;
+	if (source == pfi_output_select_high_Z)
+		return -EINVAL;
+	if (chan < min_counter_pfi_chan) {
+		if (source == pfi_output_select_counter)
+			return -EINVAL;
+	} else if (chan > max_dio_pfi_chan) {
+		if (source == pfi_output_select_do)
+			return -EINVAL;
+	}
+	BUG_ON(chan >= NUM_PFI_CHANNELS);
+
+	private(dev)->pfi_output_selects[chan] = source;
+	if (private(dev)->pfi_direction_bits & (((uint64_t) 1) << chan))
+		ni_660x_select_pfi_output(dev, chan,
+			private(dev)->pfi_output_selects[chan]);
+	return 0;
+}
+
+static unsigned ni_660x_get_pfi_routing(comedi_device * dev, unsigned chan)
+{
+	BUG_ON(chan >= NUM_PFI_CHANNELS);
+	return private(dev)->pfi_output_selects[chan];
+}
+
+static void ni660x_config_filter(comedi_device * dev, unsigned pfi_channel,
+	enum ni_gpct_filter_select filter)
+{
+	unsigned bits = ni_660x_read_register(dev, 0, IOConfigReg(pfi_channel));
+	bits &= ~pfi_input_select_mask(pfi_channel);
+	bits |= pfi_input_select_bits(pfi_channel, filter);
+	ni_660x_write_register(dev, 0, bits, IOConfigReg(pfi_channel));
+}
+
+static int ni_660x_dio_insn_config(comedi_device * dev,
+	comedi_subdevice * s, comedi_insn * insn, lsampl_t * data)
+{
+	int chan = CR_CHAN(insn->chanspec);
+
+	/* The input or output configuration of each digital line is
+	 * configured by a special insn_config instruction.  chanspec
+	 * contains the channel to be changed, and data[0] contains the
+	 * value COMEDI_INPUT or COMEDI_OUTPUT. */
+
+	switch (data[0]) {
+	case INSN_CONFIG_DIO_OUTPUT:
+		private(dev)->pfi_direction_bits |= ((uint64_t) 1) << chan;
+		ni_660x_select_pfi_output(dev, chan,
+			private(dev)->pfi_output_selects[chan]);
+		break;
+	case INSN_CONFIG_DIO_INPUT:
+		private(dev)->pfi_direction_bits &= ~(((uint64_t) 1) << chan);
+		ni_660x_select_pfi_output(dev, chan, pfi_output_select_high_Z);
+		break;
+	case INSN_CONFIG_DIO_QUERY:
+		data[1] =
+			(private(dev)->
+			pfi_direction_bits & (((uint64_t) 1) << chan)) ?
+			COMEDI_OUTPUT : COMEDI_INPUT;
+		return 0;
+	case INSN_CONFIG_SET_ROUTING:
+		return ni_660x_set_pfi_routing(dev, chan, data[1]);
+		break;
+	case INSN_CONFIG_GET_ROUTING:
+		data[1] = ni_660x_get_pfi_routing(dev, chan);
+		break;
+	case INSN_CONFIG_FILTER:
+		ni660x_config_filter(dev, chan, data[1]);
+		break;
+	default:
+		return -EINVAL;
+		break;
+	};
+	return 0;
+}
