commit 9cc05ed4df03a60c8119b49e66f8b47436d89c27
Author: Sven Van Asbroeck <thesven73@gmail.com>
Date:   Wed Sep 18 14:35:49 2019 -0400

    staging: fieldbus: move "offline mode" definition to fieldbus core
    
    anybus-s cards use the "offline mode" property to determine if
    process memory should be clear, set, or frozen when the card
    is offline.
    
    Move this property to the fieldbus core, so that it can become
    part of the future fieldbus config interface.
    
    Signed-off-by: Sven Van Asbroeck <TheSven73@gmail.com>
    Link: https://lore.kernel.org/r/20190918183552.28959-3-TheSven73@gmail.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/fieldbus/anybuss/anybuss-client.h b/drivers/staging/fieldbus/anybuss/anybuss-client.h
index 0c4b6a1ffe10..8ee1f1baccf1 100644
--- a/drivers/staging/fieldbus/anybuss/anybuss-client.h
+++ b/drivers/staging/fieldbus/anybuss/anybuss-client.h
@@ -12,6 +12,9 @@
 #include <linux/types.h>
 #include <linux/poll.h>
 
+/* move to <linux/fieldbus_dev.h> when taking this out of staging */
+#include "../fieldbus_dev.h"
+
 struct anybuss_host;
 
 struct anybuss_client {
@@ -61,12 +64,6 @@ anybuss_set_drvdata(struct anybuss_client *client, void *data)
 
 int anybuss_set_power(struct anybuss_client *client, bool power_on);
 
-enum anybuss_offl_mode {
-	AB_OFFL_MODE_CLEAR = 0,
-	AB_OFFL_MODE_FREEZE,
-	AB_OFFL_MODE_SET
-};
-
 struct anybuss_memcfg {
 	u16 input_io;
 	u16 input_dpram;
@@ -76,7 +73,7 @@ struct anybuss_memcfg {
 	u16 output_dpram;
 	u16 output_total;
 
-	enum anybuss_offl_mode offl_mode;
+	enum fieldbus_dev_offl_mode offl_mode;
 };
 
 int anybuss_start_init(struct anybuss_client *client,

commit 39e8046240e2b1a4c2e431e08a3356abce93cf35
Author: Sven Van Asbroeck <thesven73@gmail.com>
Date:   Tue Apr 30 11:25:15 2019 -0400

    staging: fieldbus: anybus-s: rename bus id field to avoid confusion
    
    Rename the anybus-s bus id from fieldbus_type to anybus_id, to
    avoid confusion with an identically named variable in the
    fieldbus_dev framework.
    
    Although this value is called fieldbus_type in the anybus-s docs,
    it acts like a bus id, so the name change is appropriate.
    
    Signed-off-by: Sven Van Asbroeck <TheSven73@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/fieldbus/anybuss/anybuss-client.h b/drivers/staging/fieldbus/anybuss/anybuss-client.h
index dce60f86c16f..0c4b6a1ffe10 100644
--- a/drivers/staging/fieldbus/anybuss/anybuss-client.h
+++ b/drivers/staging/fieldbus/anybuss/anybuss-client.h
@@ -17,7 +17,7 @@ struct anybuss_host;
 struct anybuss_client {
 	struct device dev;
 	struct anybuss_host *host;
-	__be16 fieldbus_type;
+	__be16 anybus_id;
 	/*
 	 * these can be optionally set by the client to receive event
 	 * notifications from the host.
@@ -30,7 +30,7 @@ struct anybuss_client_driver {
 	struct device_driver driver;
 	int (*probe)(struct anybuss_client *adev);
 	int (*remove)(struct anybuss_client *adev);
-	u16 fieldbus_type;
+	u16 anybus_id;
 };
 
 int anybuss_client_driver_register(struct anybuss_client_driver *drv);

commit be7d6b03602eb0d3dccae0bbce4c796526c51661
Author: Sven Van Asbroeck <thesven73@gmail.com>
Date:   Tue Apr 30 11:25:14 2019 -0400

    staging: fieldbus: anybus-s: keep device bus id in bus endianness
    
    "Normal" bus structures such as USB or PCI keep device bus ids
    in bus endinanness, and driver bus ids in host endianness.
    Endianness conversion happens each time bus_match() is called.
    
    Modify anybus-s to conform to this pattern. As a pleasant side-
    effect, sparse warnings will now disappear.
    
    This was suggested by Al Viro.
    
    Link: https://lkml.org/lkml/2019/4/30/834
    Signed-off-by: Sven Van Asbroeck <TheSven73@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/fieldbus/anybuss/anybuss-client.h b/drivers/staging/fieldbus/anybuss/anybuss-client.h
index 2e48fb8f0209..dce60f86c16f 100644
--- a/drivers/staging/fieldbus/anybuss/anybuss-client.h
+++ b/drivers/staging/fieldbus/anybuss/anybuss-client.h
@@ -17,7 +17,7 @@ struct anybuss_host;
 struct anybuss_client {
 	struct device dev;
 	struct anybuss_host *host;
-	u16 fieldbus_type;
+	__be16 fieldbus_type;
 	/*
 	 * these can be optionally set by the client to receive event
 	 * notifications from the host.

commit 308ee87a2f1ea7e83c5da49e4359cb133a93217f
Author: Sven Van Asbroeck <thesven73@gmail.com>
Date:   Tue Apr 16 11:56:13 2019 -0400

    staging: fieldbus: anybus-s: support HMS Anybus-S bus
    
    The Anybus-S/Anybus-M is a series of interchangeable fieldbus communication
    modules featuring on board memory and processing power. All software and
    hardware functionality required to communicate on the fieldbus is
    incorporated in the module itself, allowing the application to focus on
    other tasks.
    
    Typical applications are frequency inverters, HMI and visualization
    devices, instruments, scales, robotics, PLCâ€™s and intelligent measuring
    devices.
    
    Official documentation:
    https://www.anybus.com/docs/librariesprovider7/default-document-library/
    manuals-design-guides/hms-hmsi-27-275.pdf
    
    Signed-off-by: Sven Van Asbroeck <TheSven73@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/fieldbus/anybuss/anybuss-client.h b/drivers/staging/fieldbus/anybuss/anybuss-client.h
new file mode 100644
index 000000000000..2e48fb8f0209
--- /dev/null
+++ b/drivers/staging/fieldbus/anybuss/anybuss-client.h
@@ -0,0 +1,102 @@
+/* SPDX-License-Identifier: GPL-2.0 */
+/*
+ * Anybus-S client adapter definitions
+ *
+ * Copyright 2018 Arcx Inc
+ */
+
+#ifndef __LINUX_ANYBUSS_CLIENT_H__
+#define __LINUX_ANYBUSS_CLIENT_H__
+
+#include <linux/device.h>
+#include <linux/types.h>
+#include <linux/poll.h>
+
+struct anybuss_host;
+
+struct anybuss_client {
+	struct device dev;
+	struct anybuss_host *host;
+	u16 fieldbus_type;
+	/*
+	 * these can be optionally set by the client to receive event
+	 * notifications from the host.
+	 */
+	void (*on_area_updated)(struct anybuss_client *client);
+	void (*on_online_changed)(struct anybuss_client *client, bool online);
+};
+
+struct anybuss_client_driver {
+	struct device_driver driver;
+	int (*probe)(struct anybuss_client *adev);
+	int (*remove)(struct anybuss_client *adev);
+	u16 fieldbus_type;
+};
+
+int anybuss_client_driver_register(struct anybuss_client_driver *drv);
+void anybuss_client_driver_unregister(struct anybuss_client_driver *drv);
+
+static inline struct anybuss_client *to_anybuss_client(struct device *dev)
+{
+	return container_of(dev, struct anybuss_client, dev);
+}
+
+static inline struct anybuss_client_driver *
+to_anybuss_client_driver(struct device_driver *drv)
+{
+	return container_of(drv, struct anybuss_client_driver, driver);
+}
+
+static inline void *
+anybuss_get_drvdata(const struct anybuss_client *client)
+{
+	return dev_get_drvdata(&client->dev);
+}
+
+static inline void
+anybuss_set_drvdata(struct anybuss_client *client, void *data)
+{
+	dev_set_drvdata(&client->dev, data);
+}
+
+int anybuss_set_power(struct anybuss_client *client, bool power_on);
+
+enum anybuss_offl_mode {
+	AB_OFFL_MODE_CLEAR = 0,
+	AB_OFFL_MODE_FREEZE,
+	AB_OFFL_MODE_SET
+};
+
+struct anybuss_memcfg {
+	u16 input_io;
+	u16 input_dpram;
+	u16 input_total;
+
+	u16 output_io;
+	u16 output_dpram;
+	u16 output_total;
+
+	enum anybuss_offl_mode offl_mode;
+};
+
+int anybuss_start_init(struct anybuss_client *client,
+		       const struct anybuss_memcfg *cfg);
+int anybuss_finish_init(struct anybuss_client *client);
+int anybuss_read_fbctrl(struct anybuss_client *client, u16 addr,
+			void *buf, size_t count);
+int anybuss_send_msg(struct anybuss_client *client, u16 cmd_num,
+		     const void *buf, size_t count);
+int anybuss_send_ext(struct anybuss_client *client, u16 cmd_num,
+		     const void *buf, size_t count);
+int anybuss_recv_msg(struct anybuss_client *client, u16 cmd_num,
+		     void *buf, size_t count);
+
+/* these help clients make a struct file_operations */
+int anybuss_write_input(struct anybuss_client *client,
+			const char __user *buf, size_t size,
+				loff_t *offset);
+int anybuss_read_output(struct anybuss_client *client,
+			char __user *buf, size_t size,
+				loff_t *offset);
+
+#endif /* __LINUX_ANYBUSS_CLIENT_H__ */
