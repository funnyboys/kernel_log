commit c791f746c88f9d4ac7171807f15d4eaa724855a5
Author: Jérôme Pouiller <jerome.pouiller@silabs.com>
Date:   Tue May 26 19:18:15 2020 +0200

    staging: wfx: add support for tx_power_loop
    
    During the calibration of the RF amplifier, the device is able to provide
    some data about the status of the amplifier.
    
    Record these data and expose them in debugfs.
    
    Signed-off-by: Jérôme Pouiller <jerome.pouiller@silabs.com>
    Link: https://lore.kernel.org/r/20200526171821.934581-5-Jerome.Pouiller@silabs.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/wfx/wfx.h b/drivers/staging/wfx/wfx.h
index cc9f7d16ee8b..73e216733ce4 100644
--- a/drivers/staging/wfx/wfx.h
+++ b/drivers/staging/wfx/wfx.h
@@ -58,6 +58,8 @@ struct wfx_dev {
 
 	struct hif_rx_stats	rx_stats;
 	struct mutex		rx_stats_lock;
+	struct hif_tx_power_loop_info tx_power_loop_info;
+	struct mutex		tx_power_loop_info_lock;
 };
 
 struct wfx_vif {

commit f214b7b6e7c959b4306df8e5c687887c547e38b6
Author: Jérôme Pouiller <jerome.pouiller@silabs.com>
Date:   Fri May 15 10:33:19 2020 +0200

    staging: wfx: fix potential dead lock between join and scan
    
    The device disallows to start a scan request between hif_join() and
    hif_set_bss_params(). The driver is not protected against that. The
    worst case happens when association is aborted and hif_set_bss_params()
    never happens.
    
    mac80211 would never ask for scan during the association process. So,
    this patch just aborts the association in progress when scan is
    requested.
    
    Signed-off-by: Jérôme Pouiller <jerome.pouiller@silabs.com>
    Link: https://lore.kernel.org/r/20200515083325.378539-14-Jerome.Pouiller@silabs.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/wfx/wfx.h b/drivers/staging/wfx/wfx.h
index 09a24561f092..cc9f7d16ee8b 100644
--- a/drivers/staging/wfx/wfx.h
+++ b/drivers/staging/wfx/wfx.h
@@ -69,6 +69,8 @@ struct wfx_vif {
 	u32			link_id_map;
 
 	bool			after_dtim_tx_allowed;
+	bool			join_in_progress;
+
 	struct delayed_work	beacon_loss_work;
 
 	struct tx_policy_cache	tx_policy_cache;

commit 525f469f7f9ce657b35dae2a9f555be1e71e16a6
Author: Jérôme Pouiller <jerome.pouiller@silabs.com>
Date:   Tue May 5 14:37:54 2020 +0200

    staging: wfx: remove useless header inclusions
    
    In order to keep the compilation times reasonable, we try to only
    include the necessary headers (especially header included from other
    headers).
    
    This patch clean up unnecessary headers inclusions.
    
    Signed-off-by: Jérôme Pouiller <jerome.pouiller@silabs.com>
    Link: https://lore.kernel.org/r/20200505123757.39506-13-Jerome.Pouiller@silabs.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/wfx/wfx.h b/drivers/staging/wfx/wfx.h
index 4eb7762142fc..09a24561f092 100644
--- a/drivers/staging/wfx/wfx.h
+++ b/drivers/staging/wfx/wfx.h
@@ -21,10 +21,7 @@
 #include "main.h"
 #include "queue.h"
 #include "secure_link.h"
-#include "sta.h"
-#include "scan.h"
 #include "hif_tx.h"
-#include "hif_api_general.h"
 
 #define USEC_PER_TXOP 32 // see struct ieee80211_tx_queue_params
 #define USEC_PER_TU 1024

commit f00dc1d789e1caab0e154d0b2bf581fa1be87b2b
Author: Jérôme Pouiller <jerome.pouiller@silabs.com>
Date:   Tue May 5 14:37:50 2020 +0200

    staging: wfx: poll IRQ during init
    
    When the chip starts in SDIO mode, the external IRQ (aka Out-Of-Band
    IRQ) cannot be used before to configure it. Therefore, the first
    exchanges with the chip have to be done without the OOB IRQ.
    
    This patch allow to poll the data until the OOB IRQ is correctly setup.
    In order to keep the code simpler, this patch also poll data even if OOB
    IRQ is not used.
    
    Signed-off-by: Jérôme Pouiller <jerome.pouiller@silabs.com>
    Link: https://lore.kernel.org/r/20200505123757.39506-9-Jerome.Pouiller@silabs.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/wfx/wfx.h b/drivers/staging/wfx/wfx.h
index 09bbb5da4f06..4eb7762142fc 100644
--- a/drivers/staging/wfx/wfx.h
+++ b/drivers/staging/wfx/wfx.h
@@ -46,6 +46,7 @@ struct wfx_dev {
 	struct wfx_hif		hif;
 	struct sl_context	sl;
 	struct delayed_work	cooling_timeout_work;
+	bool			poll_irq;
 	bool			chip_frozen;
 	struct mutex		conf_mutex;
 

commit 1d52d29983e5daa18c441feed94259aaf03c582c
Author: Jérôme Pouiller <jerome.pouiller@silabs.com>
Date:   Mon Apr 27 15:40:20 2020 +0200

    staging: wfx: add support for 'device too hot' indication
    
    Device is able to detect a high temperature. In this case, the traffic
    is not allowed to be sent until the temperature decrease.
    
    This patch detects the warnings raised by the device and stop the
    traffic accordingly. It also add a delayed task as safeguard in case the
    chip would never send the indication that the temperature decrease.
    
    Signed-off-by: Jérôme Pouiller <jerome.pouiller@silabs.com>
    Link: https://lore.kernel.org/r/20200427134031.323403-7-Jerome.Pouiller@silabs.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/wfx/wfx.h b/drivers/staging/wfx/wfx.h
index c7a58ab3beaa..09bbb5da4f06 100644
--- a/drivers/staging/wfx/wfx.h
+++ b/drivers/staging/wfx/wfx.h
@@ -45,6 +45,7 @@ struct wfx_dev {
 	struct hif_ind_startup	hw_caps;
 	struct wfx_hif		hif;
 	struct sl_context	sl;
+	struct delayed_work	cooling_timeout_work;
 	bool			chip_frozen;
 	struct mutex		conf_mutex;
 

commit dd5eba1bb5b4f944a8fa4031645cbb2f854fdc92
Author: Jérôme Pouiller <jerome.pouiller@silabs.com>
Date:   Mon Apr 27 15:40:18 2020 +0200

    staging: wfx: fix support for AP that do not support PS-Poll
    
    When multiple virtual interfaces (on different channels) are in use, the
    device ask to activate Power Save on station interfaces. The device
    developers recommends to use legacy PS-Poll in this case since it is the
    mode that disturb the less the other interface. However, some AP start
    to not answer anymore to PS-Poll. The device is able to detect this case
    and return a special warning in this case.
    
    So, this commit catch the warning and force usage of FastPS in this
    case.
    
    In order to confuse the less possible the other interface a small FastPS
    period is used (30ms).
    
    Signed-off-by: Jérôme Pouiller <jerome.pouiller@silabs.com>
    Link: https://lore.kernel.org/r/20200427134031.323403-5-Jerome.Pouiller@silabs.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/wfx/wfx.h b/drivers/staging/wfx/wfx.h
index 77bb6c617546..c7a58ab3beaa 100644
--- a/drivers/staging/wfx/wfx.h
+++ b/drivers/staging/wfx/wfx.h
@@ -89,6 +89,8 @@ struct wfx_vif {
 	bool			scan_abort;
 	struct ieee80211_scan_request *scan_req;
 
+	bool			bss_not_support_ps_poll;
+	struct work_struct	update_pm_work;
 	struct completion	set_pm_mode_complete;
 };
 

commit 18f0dddf1fe1d16405bb845da96c03cb4b340ad0
Author: Jérôme Pouiller <jerome.pouiller@silabs.com>
Date:   Mon Apr 27 15:40:16 2020 +0200

    staging: wfx: change the field chip_frozen into a boolean
    
    The field chip_frozen is declared as an integer, but it is only used as
    a boolean. So, convert it into a boolean.
    
    Signed-off-by: Jérôme Pouiller <jerome.pouiller@silabs.com>
    Link: https://lore.kernel.org/r/20200427134031.323403-3-Jerome.Pouiller@silabs.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/wfx/wfx.h b/drivers/staging/wfx/wfx.h
index 706e95cd1092..77bb6c617546 100644
--- a/drivers/staging/wfx/wfx.h
+++ b/drivers/staging/wfx/wfx.h
@@ -45,7 +45,7 @@ struct wfx_dev {
 	struct hif_ind_startup	hw_caps;
 	struct wfx_hif		hif;
 	struct sl_context	sl;
-	int			chip_frozen;
+	bool			chip_frozen;
 	struct mutex		conf_mutex;
 
 	struct wfx_hif_cmd	hif_cmd;

commit 6ac29cc5af297098b7066e0eb3b6b9732a532f59
Author: Jérôme Pouiller <jerome.pouiller@silabs.com>
Date:   Mon Apr 20 18:03:11 2020 +0200

    staging: wfx: drop unused attribute 'join_complete_status'
    
    The field join_complete_status is never read. Drop it.
    
    Signed-off-by: Jérôme Pouiller <jerome.pouiller@silabs.com>
    Link: https://lore.kernel.org/r/20200420160311.57323-17-Jerome.Pouiller@silabs.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/wfx/wfx.h b/drivers/staging/wfx/wfx.h
index 8d29bf77cfed..706e95cd1092 100644
--- a/drivers/staging/wfx/wfx.h
+++ b/drivers/staging/wfx/wfx.h
@@ -82,8 +82,6 @@ struct wfx_vif {
 
 	unsigned long		uapsd_mask;
 
-	int			join_complete_status;
-
 	/* avoid some operations in parallel with scan */
 	struct mutex		scan_lock;
 	struct work_struct	scan_work;

commit 4b815a9da5e24a86264cedad15ee6c2d94716c8f
Author: Jérôme Pouiller <jerome.pouiller@silabs.com>
Date:   Mon Apr 20 18:03:10 2020 +0200

    staging: wfx: drop unused enum wfx_state
    
    In former code, the field wvif->state was more or less redundant with
    vif->type. With the lasts change it has become unused. It is now time to
    drop it.
    
    Signed-off-by: Jérôme Pouiller <jerome.pouiller@silabs.com>
    Link: https://lore.kernel.org/r/20200420160311.57323-16-Jerome.Pouiller@silabs.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/wfx/wfx.h b/drivers/staging/wfx/wfx.h
index 354a62394db0..8d29bf77cfed 100644
--- a/drivers/staging/wfx/wfx.h
+++ b/drivers/staging/wfx/wfx.h
@@ -66,7 +66,6 @@ struct wfx_vif {
 	struct ieee80211_vif	*vif;
 	struct ieee80211_channel *channel;
 	int			id;
-	enum wfx_state		state;
 
 	u32			link_id_map;
 

commit 9da38fd5a90655c308e59398d169f4d3efd16377
Author: Jérôme Pouiller <jerome.pouiller@silabs.com>
Date:   Mon Apr 20 18:03:06 2020 +0200

    staging: wfx: keys are kept during whole firmware life
    
    Keys sent to the firmware are never reset. So, it is not necessary to
    re-upload them after hif_reset(). Thus, it is no more necessary to keep
    a copy of the keys in struct wfx_dev.
    
    Signed-off-by: Jérôme Pouiller <jerome.pouiller@silabs.com>
    Link: https://lore.kernel.org/r/20200420160311.57323-12-Jerome.Pouiller@silabs.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/wfx/wfx.h b/drivers/staging/wfx/wfx.h
index 0fa88de64907..354a62394db0 100644
--- a/drivers/staging/wfx/wfx.h
+++ b/drivers/staging/wfx/wfx.h
@@ -56,7 +56,6 @@ struct wfx_dev {
 
 	atomic_t		packet_id;
 	u32			key_map;
-	struct hif_req_add_key	keys[MAX_KEY_ENTRIES];
 
 	struct hif_rx_stats	rx_stats;
 	struct mutex		rx_stats_lock;

commit 7a44644c9379eb1bbb03ce8054a0b0179f470146
Author: Jérôme Pouiller <jerome.pouiller@silabs.com>
Date:   Mon Apr 20 18:03:05 2020 +0200

    staging: wfx: introduce wfx_set_default_unicast_key()
    
    Currently code handle WEP keys manually. It is far easier to use
    the set_default_unicast_key() callback provided by mac80211.
    
    Signed-off-by: Jérôme Pouiller <jerome.pouiller@silabs.com>
    Link: https://lore.kernel.org/r/20200420160311.57323-11-Jerome.Pouiller@silabs.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/wfx/wfx.h b/drivers/staging/wfx/wfx.h
index 913b80d024a3..0fa88de64907 100644
--- a/drivers/staging/wfx/wfx.h
+++ b/drivers/staging/wfx/wfx.h
@@ -74,10 +74,6 @@ struct wfx_vif {
 	bool			after_dtim_tx_allowed;
 	struct delayed_work	beacon_loss_work;
 
-	s8			wep_default_key_id;
-	struct sk_buff		*wep_pending_skb;
-	struct work_struct	wep_key_work;
-
 	struct tx_policy_cache	tx_policy_cache;
 	struct work_struct	tx_policy_upload_work;
 

commit 988cf07bb9a0f3c296e38124ab7e7f5d2f2d28a4
Author: Jérôme Pouiller <jerome.pouiller@silabs.com>
Date:   Mon Apr 20 18:02:59 2020 +0200

    staging: wfx: handle firmware events synchronously
    
    Currently, events from firmware are handled in a work queue with a
    complex event queue mechanism. It is probably overkill since there is
    only two events to handle: bss_loss and CQM events. Handling these
    events synchronously is sufficient.
    
    Signed-off-by: Jérôme Pouiller <jerome.pouiller@silabs.com>
    Link: https://lore.kernel.org/r/20200420160311.57323-5-Jerome.Pouiller@silabs.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/wfx/wfx.h b/drivers/staging/wfx/wfx.h
index 5484e7c64c3c..913b80d024a3 100644
--- a/drivers/staging/wfx/wfx.h
+++ b/drivers/staging/wfx/wfx.h
@@ -98,10 +98,6 @@ struct wfx_vif {
 	struct ieee80211_scan_request *scan_req;
 
 	struct completion	set_pm_mode_complete;
-
-	struct list_head	event_queue;
-	spinlock_t		event_queue_lock;
-	struct work_struct	event_handler_work;
 };
 
 static inline struct wfx_vif *wdev_to_wvif(struct wfx_dev *wdev, int vif_id)

commit 5c442b6a39e112539144abbfd5e75fe486c3dfab
Author: Jérôme Pouiller <jerome.pouiller@silabs.com>
Date:   Mon Apr 20 18:02:58 2020 +0200

    staging: wfx: drop useless attribute 'bss_params'
    
    Since wfx_bss_params_work() does not exist anymore, there is no more
    reason to keep a copy of bss_params in struct wfx_dev. A local instance
    in wfx_join_finalize() is sufficient.
    
    Signed-off-by: Jérôme Pouiller <jerome.pouiller@silabs.com>
    Link: https://lore.kernel.org/r/20200420160311.57323-4-Jerome.Pouiller@silabs.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/wfx/wfx.h b/drivers/staging/wfx/wfx.h
index 2747c7cdf4d1..5484e7c64c3c 100644
--- a/drivers/staging/wfx/wfx.h
+++ b/drivers/staging/wfx/wfx.h
@@ -87,7 +87,6 @@ struct wfx_vif {
 	u8			filter_mcast_addr[8][ETH_ALEN];
 
 	unsigned long		uapsd_mask;
-	struct hif_req_set_bss_params bss_params;
 
 	int			join_complete_status;
 

commit 5a0af69888488d2b873f55bcba4cd17b162e4bea
Author: Jérôme Pouiller <jerome.pouiller@silabs.com>
Date:   Mon Apr 20 18:02:57 2020 +0200

    staging: wfx: use ieee80211_beacon_loss() provided by mac80211
    
    The firmware is able to filter beacons and send a notification if one or
    multiple beacons are not received. Note that it send this notification
    only once. Only if it receive beacons gain, it send a new notification.
    
    Currently, the driver handle the connection loss itself (see
    wfx_cqm_bssloss_sm()). It send null frames and watch the answers.
    
    This patch fixes all this mess:
      - settle firmware to send a notification on the first beacon loss
      - call ieee80211_beacon_loss() and let mac80211 handle all the process
      - since we do have notification for each beacon loss, add a period
        task that call ieee80211_beacon_loss() until we receive "REGAIN"
        notification.
    
    Thus, we can drop the ugly wfx_cqm_bssloss_sm() and
    wfx_bss_params_work().
    
    Signed-off-by: Jérôme Pouiller <jerome.pouiller@silabs.com>
    Link: https://lore.kernel.org/r/20200420160311.57323-3-Jerome.Pouiller@silabs.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/wfx/wfx.h b/drivers/staging/wfx/wfx.h
index b5d2d0f07740..2747c7cdf4d1 100644
--- a/drivers/staging/wfx/wfx.h
+++ b/drivers/staging/wfx/wfx.h
@@ -69,14 +69,10 @@ struct wfx_vif {
 	int			id;
 	enum wfx_state		state;
 
-	int			bss_loss_state;
-	u32			bss_loss_confirm_id;
-	struct mutex		bss_loss_lock;
-	struct delayed_work	bss_loss_work;
-
 	u32			link_id_map;
 
 	bool			after_dtim_tx_allowed;
+	struct delayed_work	beacon_loss_work;
 
 	s8			wep_default_key_id;
 	struct sk_buff		*wep_pending_skb;
@@ -92,7 +88,6 @@ struct wfx_vif {
 
 	unsigned long		uapsd_mask;
 	struct hif_req_set_bss_params bss_params;
-	struct work_struct	bss_params_work;
 
 	int			join_complete_status;
 

commit c801351a9d4587aab131d018330d4b35a0b3cdcf
Author: Jérôme Pouiller <jerome.pouiller@silabs.com>
Date:   Wed Apr 15 18:11:46 2020 +0200

    staging: wfx: drop useless attribute 'filter_mcast'
    
    Currently, wfx_update_filtering() apply the value of wvif->filter_mcast
    to the hardware. But an attentive reader will note that
    wfx_update_filtering() is always called after set wvif->filter_mcast.
    Thus, it not necessary to store filter_mcast in the struct wfx_vif. We
    can just pass it as parameter.
    
    Also rename wfx_update_filtering() in wfx_filter_mcast() to reflect this
    change.
    
    Signed-off-by: Jérôme Pouiller <jerome.pouiller@silabs.com>
    Link: https://lore.kernel.org/r/20200415161147.69738-20-Jerome.Pouiller@silabs.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/wfx/wfx.h b/drivers/staging/wfx/wfx.h
index c30e6984aec1..b5d2d0f07740 100644
--- a/drivers/staging/wfx/wfx.h
+++ b/drivers/staging/wfx/wfx.h
@@ -89,7 +89,6 @@ struct wfx_vif {
 
 	int			filter_mcast_count;
 	u8			filter_mcast_addr[8][ETH_ALEN];
-	bool			filter_mcast;
 
 	unsigned long		uapsd_mask;
 	struct hif_req_set_bss_params bss_params;

commit 2c69b2da37824307b4c73cbf7ad98ae82a6a52fe
Author: Jérôme Pouiller <jerome.pouiller@silabs.com>
Date:   Wed Apr 15 18:11:44 2020 +0200

    staging: wfx: split out wfx_filter_beacon()
    
    Currently, wfx_update_filtering() is sometime called only to apply the
    value of wvif->filter_beacon to the hardware. It is nicer to have a
    specific function for beacon filtering.
    
    In add, an attentive reader would note that wfx_update_filtering() is
    always called after change of wvif->filter_beacon. Thus, it not
    necessary to store filter_beacon in the struct wfx_vif. We can just pass
    it as parameter.
    
    Signed-off-by: Jérôme Pouiller <jerome.pouiller@silabs.com>
    Link: https://lore.kernel.org/r/20200415161147.69738-18-Jerome.Pouiller@silabs.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/wfx/wfx.h b/drivers/staging/wfx/wfx.h
index 310d95478824..c30e6984aec1 100644
--- a/drivers/staging/wfx/wfx.h
+++ b/drivers/staging/wfx/wfx.h
@@ -90,7 +90,6 @@ struct wfx_vif {
 	int			filter_mcast_count;
 	u8			filter_mcast_addr[8][ETH_ALEN];
 	bool			filter_mcast;
-	bool			filter_beacon;
 
 	unsigned long		uapsd_mask;
 	struct hif_req_set_bss_params bss_params;

commit a558395d4ce328d39772ffd88422aaad5d572449
Author: Jérôme Pouiller <jerome.pouiller@silabs.com>
Date:   Wed Apr 15 18:11:43 2020 +0200

    staging: wfx: drop useless attributes 'filter_prbreq' and 'filter_bssid'
    
    It is now useless to store filter_prbreq and filter_bssid in struct
    wfx_vif. We can just pass them as parameters to hif_set_rx_filter().
    
    Signed-off-by: Jérôme Pouiller <jerome.pouiller@silabs.com>
    Link: https://lore.kernel.org/r/20200415161147.69738-17-Jerome.Pouiller@silabs.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/wfx/wfx.h b/drivers/staging/wfx/wfx.h
index 53184fe2da4b..310d95478824 100644
--- a/drivers/staging/wfx/wfx.h
+++ b/drivers/staging/wfx/wfx.h
@@ -90,8 +90,6 @@ struct wfx_vif {
 	int			filter_mcast_count;
 	u8			filter_mcast_addr[8][ETH_ALEN];
 	bool			filter_mcast;
-	bool			filter_bssid;
-	bool			filter_prbreq;
 	bool			filter_beacon;
 
 	unsigned long		uapsd_mask;

commit 981132aa039d90456abf2bed7a2f6472c9dc3f98
Author: Jérôme Pouiller <jerome.pouiller@silabs.com>
Date:   Wed Apr 15 18:11:41 2020 +0200

    staging: wfx: drop struct wfx_grp_addr_table
    
    The struct wfx_grp_addr_table is only instantiated on one place. There
    is no justifiation for this struct. Moreover, it is not consistent with
    other fields related to filtering (filter_bssid, etc...).
    
    Signed-off-by: Jérôme Pouiller <jerome.pouiller@silabs.com>
    Link: https://lore.kernel.org/r/20200415161147.69738-15-Jerome.Pouiller@silabs.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/wfx/wfx.h b/drivers/staging/wfx/wfx.h
index 3941462097a4..53184fe2da4b 100644
--- a/drivers/staging/wfx/wfx.h
+++ b/drivers/staging/wfx/wfx.h
@@ -77,7 +77,6 @@ struct wfx_vif {
 	u32			link_id_map;
 
 	bool			after_dtim_tx_allowed;
-	struct wfx_grp_addr_table mcast_filter;
 
 	s8			wep_default_key_id;
 	struct sk_buff		*wep_pending_skb;
@@ -88,6 +87,9 @@ struct wfx_vif {
 
 	struct work_struct	update_tim_work;
 
+	int			filter_mcast_count;
+	u8			filter_mcast_addr[8][ETH_ALEN];
+	bool			filter_mcast;
 	bool			filter_bssid;
 	bool			filter_prbreq;
 	bool			filter_beacon;

commit 6273691fbd50534982e864ccce482f8da6f2afac
Author: Jérôme Pouiller <jerome.pouiller@silabs.com>
Date:   Wed Apr 15 18:11:40 2020 +0200

    staging: wfx: align semantic of probe request filter with other filters
    
    Filters provided by HIF API are sometime inclusive, sometime exclusive.
    
    This patch align the behavior and name of the probe request filter with
    the other filters.
    
    Signed-off-by: Jérôme Pouiller <jerome.pouiller@silabs.com>
    Link: https://lore.kernel.org/r/20200415161147.69738-14-Jerome.Pouiller@silabs.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/wfx/wfx.h b/drivers/staging/wfx/wfx.h
index 53ed4c137b19..3941462097a4 100644
--- a/drivers/staging/wfx/wfx.h
+++ b/drivers/staging/wfx/wfx.h
@@ -89,7 +89,7 @@ struct wfx_vif {
 	struct work_struct	update_tim_work;
 
 	bool			filter_bssid;
-	bool			fwd_probe_req;
+	bool			filter_prbreq;
 	bool			filter_beacon;
 
 	unsigned long		uapsd_mask;

commit b07357e02749b0858adf0314ff67abf5d523f03a
Author: Jérôme Pouiller <jerome.pouiller@silabs.com>
Date:   Wed Apr 15 18:11:39 2020 +0200

    staging: wfx: align semantic of beacon filter with other filters
    
    Filters provided by HIF API are sometime inclusive, sometime exclusive.
    
    This patch align the behavior and name of the beacon filter with the
    other filters. Also avoid double negation: "disable filter"
    
    Signed-off-by: Jérôme Pouiller <jerome.pouiller@silabs.com>
    Link: https://lore.kernel.org/r/20200415161147.69738-13-Jerome.Pouiller@silabs.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/wfx/wfx.h b/drivers/staging/wfx/wfx.h
index a69d9c9c37b6..53ed4c137b19 100644
--- a/drivers/staging/wfx/wfx.h
+++ b/drivers/staging/wfx/wfx.h
@@ -90,7 +90,7 @@ struct wfx_vif {
 
 	bool			filter_bssid;
 	bool			fwd_probe_req;
-	bool			disable_beacon_filter;
+	bool			filter_beacon;
 
 	unsigned long		uapsd_mask;
 	struct hif_req_set_bss_params bss_params;

commit b3919d9bbcde6c27f2072dd4242c54e076bb17b7
Author: Jérôme Pouiller <jerome.pouiller@silabs.com>
Date:   Wed Apr 15 18:11:32 2020 +0200

    staging: wfx: wfx_update_filtering_work() is no more used
    
    Since we had simplified the join process, update_filtering_work is no
    more used. Drop it.
    
    Signed-off-by: Jérôme Pouiller <jerome.pouiller@silabs.com>
    Link: https://lore.kernel.org/r/20200415161147.69738-6-Jerome.Pouiller@silabs.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/wfx/wfx.h b/drivers/staging/wfx/wfx.h
index 41d67dc091a6..a69d9c9c37b6 100644
--- a/drivers/staging/wfx/wfx.h
+++ b/drivers/staging/wfx/wfx.h
@@ -91,7 +91,6 @@ struct wfx_vif {
 	bool			filter_bssid;
 	bool			fwd_probe_req;
 	bool			disable_beacon_filter;
-	struct work_struct	update_filtering_work;
 
 	unsigned long		uapsd_mask;
 	struct hif_req_set_bss_params bss_params;

commit 790241e92847c93f1bd7772299e6c58fb8f185e8
Author: Jérôme Pouiller <jerome.pouiller@silabs.com>
Date:   Fri Apr 10 15:32:38 2020 +0200

    staging: wfx: drop unused attribute 'beacon_int'
    
    The field beacon_int is never read. Drop it.
    
    Signed-off-by: Jérôme Pouiller <jerome.pouiller@silabs.com>
    Link: https://lore.kernel.org/r/20200410133239.438347-19-Jerome.Pouiller@silabs.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/wfx/wfx.h b/drivers/staging/wfx/wfx.h
index 619e6f5c1345..41d67dc091a6 100644
--- a/drivers/staging/wfx/wfx.h
+++ b/drivers/staging/wfx/wfx.h
@@ -88,7 +88,6 @@ struct wfx_vif {
 
 	struct work_struct	update_tim_work;
 
-	int			beacon_int;
 	bool			filter_bssid;
 	bool			fwd_probe_req;
 	bool			disable_beacon_filter;

commit 836a8fc3f5073b204135a088908b15d868030c4c
Author: Jérôme Pouiller <jerome.pouiller@silabs.com>
Date:   Fri Apr 10 15:32:23 2020 +0200

    staging: wfx: call wfx_do_unjoin() synchronously
    
    Currently, wfx_do_unjoin() are called by the mean of work queues.
    However, the contexts from where they are called are not atomic. So
    there is no reason to not call it synchronously.
    
    This change will simplify the code. Notice two main changes:
       - There no more reason to lock tx queue before to run
         wfx_do_unjoin(). We can lock the tx queue directly from
         wfx_do_unjoin().
       - Most of the time, wfx_do_unjoin_work() was called with conf_mutex
         held. This patch remove lock of conf_mutex in wfx_do_unjoin_work()
         and ensure that conf_mutex is always held whatever the context.
    
    Signed-off-by: Jérôme Pouiller <jerome.pouiller@silabs.com>
    Link: https://lore.kernel.org/r/20200410133239.438347-4-Jerome.Pouiller@silabs.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/wfx/wfx.h b/drivers/staging/wfx/wfx.h
index af4c93af81be..619e6f5c1345 100644
--- a/drivers/staging/wfx/wfx.h
+++ b/drivers/staging/wfx/wfx.h
@@ -99,7 +99,6 @@ struct wfx_vif {
 	struct work_struct	bss_params_work;
 
 	int			join_complete_status;
-	struct work_struct	unjoin_work;
 
 	/* avoid some operations in parallel with scan */
 	struct mutex		scan_lock;

commit d32cedbec0a64e24548986a0159ab86cfe6a4097
Author: Jérôme Pouiller <jerome.pouiller@silabs.com>
Date:   Wed Apr 1 13:03:57 2020 +0200

    staging: wfx: drop struct wfx_queue_stats
    
    There is no reason to keep the intermediate struct wfx_queue_stats.
    Relocate its members to struct wfx_dev.
    
    Reviewed-by: Dan Carpenter <dan.carpenter@oracle.com>
    Signed-off-by: Jérôme Pouiller <jerome.pouiller@silabs.com>
    Link: https://lore.kernel.org/r/20200401110405.80282-25-Jerome.Pouiller@silabs.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/wfx/wfx.h b/drivers/staging/wfx/wfx.h
index 6b5b95a45e60..af4c93af81be 100644
--- a/drivers/staging/wfx/wfx.h
+++ b/drivers/staging/wfx/wfx.h
@@ -50,7 +50,8 @@ struct wfx_dev {
 
 	struct wfx_hif_cmd	hif_cmd;
 	struct wfx_queue	tx_queue[4];
-	struct wfx_queue_stats	tx_queue_stats;
+	struct sk_buff_head	tx_pending;
+	wait_queue_head_t	tx_dequeue;
 	atomic_t		tx_lock;
 
 	atomic_t		packet_id;

commit 41c5dfcdbc75e7ee75ec376e93742882ac92afca
Author: Jérôme Pouiller <jerome.pouiller@silabs.com>
Date:   Wed Apr 1 13:03:56 2020 +0200

    staging: wfx: drop now useless field edca_params
    
    Since we do not rely in QoS parameters to choose which frame to send, it
    is no more necessary to keep a copy of EDCA parameters.
    
    Reviewed-by: Dan Carpenter <dan.carpenter@oracle.com>
    Signed-off-by: Jérôme Pouiller <jerome.pouiller@silabs.com>
    Link: https://lore.kernel.org/r/20200401110405.80282-24-Jerome.Pouiller@silabs.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/wfx/wfx.h b/drivers/staging/wfx/wfx.h
index 61899cd7942b..6b5b95a45e60 100644
--- a/drivers/staging/wfx/wfx.h
+++ b/drivers/staging/wfx/wfx.h
@@ -94,7 +94,6 @@ struct wfx_vif {
 	struct work_struct	update_filtering_work;
 
 	unsigned long		uapsd_mask;
-	struct ieee80211_tx_queue_params edca_params[IEEE80211_NUM_ACS];
 	struct hif_req_set_bss_params bss_params;
 	struct work_struct	bss_params_work;
 

commit 062a6c410258ca2e66f377e54ee229c937504e22
Author: Jérôme Pouiller <jerome.pouiller@silabs.com>
Date:   Wed Apr 1 13:03:45 2020 +0200

    staging: wfx: drop useless sta_asleep_mask
    
    Currently, the driver tracks power save state of the stations with the
    variable sta_asleep_mask. Then, it takes care to not sent data to asleep
    stations.
    
    However, this work is already done by mac80211. Normally, there are no
    frames for asleep stations in our queues. So, driver do not have to
    filter frames in its queues (apart the frames marked "AFTER_DTIM").
    
    Notice that there is a risk of race between state of the station and
    data send to the firmware. However, this risk is limited since the
    number of frame in queues are small. In add, this race also exists with
    the current code. Anyway, the firmware is able to detect the problem and
    driver will receive a 'REQUEUE' status (translated in
    TX_STAT_TX_FILTERED for mac80211).
    
    Reviewed-by: Dan Carpenter <dan.carpenter@oracle.com>
    Signed-off-by: Jérôme Pouiller <jerome.pouiller@silabs.com>
    Link: https://lore.kernel.org/r/20200401110405.80282-13-Jerome.Pouiller@silabs.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/wfx/wfx.h b/drivers/staging/wfx/wfx.h
index 116f456a5da2..61899cd7942b 100644
--- a/drivers/staging/wfx/wfx.h
+++ b/drivers/staging/wfx/wfx.h
@@ -85,8 +85,6 @@ struct wfx_vif {
 	struct tx_policy_cache	tx_policy_cache;
 	struct work_struct	tx_policy_upload_work;
 
-	u32			sta_asleep_mask;
-	spinlock_t		ps_state_lock;
 	struct work_struct	update_tim_work;
 
 	int			beacon_int;

commit 57c5222004d39e8d914d7b6190593f31e3554892
Author: Jérôme Pouiller <jerome.pouiller@silabs.com>
Date:   Wed Apr 1 13:03:37 2020 +0200

    staging: wfx: remove "burst" mechanism
    
    In the old days, the driver tried to reorder frames in order to send
    frames from the same queue grouped to the firmware. However, the
    firmware is able to do the job internally for a long time. There is no
    reasons to keep this mechanism.
    
    Reviewed-by: Dan Carpenter <dan.carpenter@oracle.com>
    Signed-off-by: Jérôme Pouiller <jerome.pouiller@silabs.com>
    Link: https://lore.kernel.org/r/20200401110405.80282-5-Jerome.Pouiller@silabs.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/wfx/wfx.h b/drivers/staging/wfx/wfx.h
index 8b85bb1abb9c..116f456a5da2 100644
--- a/drivers/staging/wfx/wfx.h
+++ b/drivers/staging/wfx/wfx.h
@@ -51,7 +51,6 @@ struct wfx_dev {
 	struct wfx_hif_cmd	hif_cmd;
 	struct wfx_queue	tx_queue[4];
 	struct wfx_queue_stats	tx_queue_stats;
-	int			tx_burst_idx;
 	atomic_t		tx_lock;
 
 	atomic_t		packet_id;

commit 1b38e0d042c87389209596cae91271f47ad72499
Author: Jérôme Pouiller <jerome.pouiller@silabs.com>
Date:   Wed Jan 15 13:55:28 2020 +0000

    staging: wfx: ensure that packet_id is unique
    
    In current code, packet_id is derivated from mac802.11 packet sequence
    number, but this number is only unique for a station. It is not
    sufficient.
    
    Signed-off-by: Jérôme Pouiller <jerome.pouiller@silabs.com>
    Link: https://lore.kernel.org/r/20200115135338.14374-60-Jerome.Pouiller@silabs.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/wfx/wfx.h b/drivers/staging/wfx/wfx.h
index 5d61946e33e0..8b85bb1abb9c 100644
--- a/drivers/staging/wfx/wfx.h
+++ b/drivers/staging/wfx/wfx.h
@@ -54,6 +54,7 @@ struct wfx_dev {
 	int			tx_burst_idx;
 	atomic_t		tx_lock;
 
+	atomic_t		packet_id;
 	u32			key_map;
 	struct hif_req_add_key	keys[MAX_KEY_ENTRIES];
 

commit a3c529a835890b0eecd324d9f0c37c67345f84e2
Author: Jérôme Pouiller <jerome.pouiller@silabs.com>
Date:   Wed Jan 15 13:55:25 2020 +0000

    staging: wfx: simplify handling of IEEE80211_TX_CTL_SEND_AFTER_DTIM
    
    When mac80211 ask for a frame to be sent after a DTIM, driver should:
      1. Update TIM with multicast bit set (using update_ie). This function
         can be called whenever.
      2. Keep buffered all frames marked "after dtim"
      3. When it receive a suspend_resume indication (see
         wfx_suspend_resume_mc()), send all the buffered frames. This
         indication is sent by the firmware 4ms before the dtim.
      4. If one of the frames returns status "REQUEUE", it means that the
         DTIM period was ended before to be able to send the frame.
      5. When all the buffered frames were sent or if DTIM period was ended,
         driver should update the TIM with multicast bit reset.
    
    All the mess with the asynchronous works can be dropped.
    
    Signed-off-by: Jérôme Pouiller <jerome.pouiller@silabs.com>
    Link: https://lore.kernel.org/r/20200115135338.14374-58-Jerome.Pouiller@silabs.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/wfx/wfx.h b/drivers/staging/wfx/wfx.h
index 8491f050478d..5d61946e33e0 100644
--- a/drivers/staging/wfx/wfx.h
+++ b/drivers/staging/wfx/wfx.h
@@ -75,13 +75,8 @@ struct wfx_vif {
 
 	u32			link_id_map;
 
-	bool			aid0_bit_set;
-	bool			mcast_tx;
-	bool			mcast_buffered;
+	bool			after_dtim_tx_allowed;
 	struct wfx_grp_addr_table mcast_filter;
-	struct timer_list	mcast_timeout;
-	struct work_struct	mcast_start_work;
-	struct work_struct	mcast_stop_work;
 
 	s8			wep_default_key_id;
 	struct sk_buff		*wep_pending_skb;

commit 2e57865e79cfe82afcefff553300bb0eea07c1c2
Author: Jérôme Pouiller <jerome.pouiller@silabs.com>
Date:   Wed Jan 15 13:55:19 2020 +0000

    staging: wfx: pspoll_mask make no sense
    
    pspoll_mask is here to send data buffered in driver. But since station
    is marked buffered, TIM for this station is 1 and mac80211 will call
    sta_notify when a ps-poll is received. So pspoll_mask is useless and
    sta_alseep_mask is sufficient.
    
    Signed-off-by: Jérôme Pouiller <jerome.pouiller@silabs.com>
    Link: https://lore.kernel.org/r/20200115135338.14374-54-Jerome.Pouiller@silabs.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/wfx/wfx.h b/drivers/staging/wfx/wfx.h
index 365aacc073fb..8491f050478d 100644
--- a/drivers/staging/wfx/wfx.h
+++ b/drivers/staging/wfx/wfx.h
@@ -91,7 +91,6 @@ struct wfx_vif {
 	struct work_struct	tx_policy_upload_work;
 
 	u32			sta_asleep_mask;
-	u32			pspoll_mask;
 	spinlock_t		ps_state_lock;
 	struct work_struct	update_tim_work;
 

commit d6aeba575f277104a95125584981d37c8f7cf762
Author: Jérôme Pouiller <jerome.pouiller@silabs.com>
Date:   Wed Jan 15 13:55:15 2020 +0000

    staging: wfx: simplify the link-id allocation
    
    The "link-id" is a slot number provided to the chip. A link-id is
    allocated to every station associated with the chip (mainly when the
    chip is in AP mode). It is more or less the same thing than the
    association ID, but it is limited to 14 values.
    
    Firmware uses the link-id to track the power save status of the
    stations.
    
    The current code try to associate a link-id as soon as data are
    exchanged with station. It is far easier to rely on sta_add() and
    sta_remove().
    
    Until now the value WFX_LINK_ID_NO_ASSOC, was only used when no more
    link-id was available. Now, we also use this value for
    not-yet-associated stations (that was its primary behavior).
    
    Signed-off-by: Jérôme Pouiller <jerome.pouiller@silabs.com>
    Link: https://lore.kernel.org/r/20200115135338.14374-51-Jerome.Pouiller@silabs.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/wfx/wfx.h b/drivers/staging/wfx/wfx.h
index cb359150e2ad..365aacc073fb 100644
--- a/drivers/staging/wfx/wfx.h
+++ b/drivers/staging/wfx/wfx.h
@@ -74,9 +74,6 @@ struct wfx_vif {
 	struct delayed_work	bss_loss_work;
 
 	u32			link_id_map;
-	struct wfx_link_entry	link_id_db[WFX_MAX_STA_IN_AP_MODE];
-	struct delayed_work	link_id_gc_work;
-	struct work_struct	link_id_work;
 
 	bool			aid0_bit_set;
 	bool			mcast_tx;

commit 36cbb5d2a7db063879fc92e8496db9c0b7f84d7d
Author: Jérôme Pouiller <jerome.pouiller@silabs.com>
Date:   Wed Jan 15 13:55:13 2020 +0000

    staging: wfx: simplify wfx_set_tim_impl()
    
    Argument provided to wfx_set_tim_impl() is always wvif->aid0_bit_set and
    there is no reason to provide another argument.
    
    Also rename wfx_set_tim_impl() into wfx_update_tim() to reflect the new
    behavior.
    
    Signed-off-by: Jérôme Pouiller <jerome.pouiller@silabs.com>
    Link: https://lore.kernel.org/r/20200115135338.14374-50-Jerome.Pouiller@silabs.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/wfx/wfx.h b/drivers/staging/wfx/wfx.h
index f56a91ea082d..cb359150e2ad 100644
--- a/drivers/staging/wfx/wfx.h
+++ b/drivers/staging/wfx/wfx.h
@@ -96,7 +96,7 @@ struct wfx_vif {
 	u32			sta_asleep_mask;
 	u32			pspoll_mask;
 	spinlock_t		ps_state_lock;
-	struct work_struct	set_tim_work;
+	struct work_struct	update_tim_work;
 
 	int			beacon_int;
 	bool			filter_bssid;

commit deb7734ea984ec6909f4dc86b4707f91301c9ddc
Author: Jérôme Pouiller <jerome.pouiller@silabs.com>
Date:   Wed Jan 15 13:54:40 2020 +0000

    staging: wfx: drop wfx_set_cts_work()
    
    wfx_bss_info_changed() is not called from atomic contexts. So, it is not
    necessary to raise an asynchronous work to change ERP. Thus
    wfx_set_cts_work() become useless.
    
    Signed-off-by: Jérôme Pouiller <jerome.pouiller@silabs.com>
    Link: https://lore.kernel.org/r/20200115135338.14374-27-Jerome.Pouiller@silabs.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/wfx/wfx.h b/drivers/staging/wfx/wfx.h
index 5e1a763eb4b5..f56a91ea082d 100644
--- a/drivers/staging/wfx/wfx.h
+++ b/drivers/staging/wfx/wfx.h
@@ -104,12 +104,10 @@ struct wfx_vif {
 	bool			disable_beacon_filter;
 	struct work_struct	update_filtering_work;
 
-	u32			erp_info;
 	unsigned long		uapsd_mask;
 	struct ieee80211_tx_queue_params edca_params[IEEE80211_NUM_ACS];
 	struct hif_req_set_bss_params bss_params;
 	struct work_struct	bss_params_work;
-	struct work_struct	set_cts_work;
 
 	int			join_complete_status;
 	struct work_struct	unjoin_work;

commit 963aff5728a0295fe90146289c2a9251024575a4
Author: Jérôme Pouiller <jerome.pouiller@silabs.com>
Date:   Wed Jan 15 13:54:38 2020 +0000

    staging: wfx: drop wvif->setbssparams_done
    
    setbssparams_done was here to ensure that the firmware does not enable
    powersave before to get the first beacon. However, mac80211 already
    ensures it gets a beacon before to associate to the BSS. And even, if
    it won't, the firmware wake up at least on every DTIM, which is
    sufficient to finalize the association.
    
    Signed-off-by: Jérôme Pouiller <jerome.pouiller@silabs.com>
    Link: https://lore.kernel.org/r/20200115135338.14374-26-Jerome.Pouiller@silabs.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/wfx/wfx.h b/drivers/staging/wfx/wfx.h
index 1b487d96eca2..5e1a763eb4b5 100644
--- a/drivers/staging/wfx/wfx.h
+++ b/drivers/staging/wfx/wfx.h
@@ -105,7 +105,6 @@ struct wfx_vif {
 	struct work_struct	update_filtering_work;
 
 	u32			erp_info;
-	bool			setbssparams_done;
 	unsigned long		uapsd_mask;
 	struct ieee80211_tx_queue_params edca_params[IEEE80211_NUM_ACS];
 	struct hif_req_set_bss_params bss_params;

commit ba366b9268263f7f86cf8e53e00bda84e238d29b
Author: Jérôme Pouiller <jerome.pouiller@silabs.com>
Date:   Wed Jan 15 13:54:37 2020 +0000

    staging: wfx: drop wvif->cqm_rssi_thold
    
    Current code keeps a copy of bss_conf->cqm_rssi_thold in wfx_vif. There
    is no sane reason for that.
    
    Signed-off-by: Jérôme Pouiller <jerome.pouiller@silabs.com>
    Link: https://lore.kernel.org/r/20200115135338.14374-25-Jerome.Pouiller@silabs.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/wfx/wfx.h b/drivers/staging/wfx/wfx.h
index 84cb3a83e5d9..1b487d96eca2 100644
--- a/drivers/staging/wfx/wfx.h
+++ b/drivers/staging/wfx/wfx.h
@@ -105,7 +105,6 @@ struct wfx_vif {
 	struct work_struct	update_filtering_work;
 
 	u32			erp_info;
-	int			cqm_rssi_thold;
 	bool			setbssparams_done;
 	unsigned long		uapsd_mask;
 	struct ieee80211_tx_queue_params edca_params[IEEE80211_NUM_ACS];

commit 9d443ffc588bbee103eddecd6b1994cf7d0b0ee8
Author: Jérôme Pouiller <jerome.pouiller@silabs.com>
Date:   Wed Jan 15 13:54:35 2020 +0000

    staging: wfx: drop wvif->enable_beacon
    
    It seems that current code try to save calls to hif_beacon_transmit() by
    keeping a copy of the previous value of bss_conf->enable_beacon.
    However, hif_beacon_transmit() does not cost so much and mac80211
    already take care to not send useless events.
    
    Signed-off-by: Jérôme Pouiller <jerome.pouiller@silabs.com>
    Link: https://lore.kernel.org/r/20200115135338.14374-24-Jerome.Pouiller@silabs.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/wfx/wfx.h b/drivers/staging/wfx/wfx.h
index bd4b55e07c73..84cb3a83e5d9 100644
--- a/drivers/staging/wfx/wfx.h
+++ b/drivers/staging/wfx/wfx.h
@@ -99,7 +99,6 @@ struct wfx_vif {
 	struct work_struct	set_tim_work;
 
 	int			beacon_int;
-	bool			enable_beacon;
 	bool			filter_bssid;
 	bool			fwd_probe_req;
 	bool			disable_beacon_filter;

commit 249802e8e226b869ad065bc56811410f83cbfcd6
Author: Jérôme Pouiller <jerome.pouiller@silabs.com>
Date:   Wed Jan 15 13:54:34 2020 +0000

    staging: wfx: drop wvif->dtim_period
    
    It is not necessary to keep a copy of dtim_period in wfx_vif. Prefer to
    just rely on bss_conf->dtim_period.
    
    Signed-off-by: Jérôme Pouiller <jerome.pouiller@silabs.com>
    Link: https://lore.kernel.org/r/20200115135338.14374-23-Jerome.Pouiller@silabs.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/wfx/wfx.h b/drivers/staging/wfx/wfx.h
index d201cceec1ab..bd4b55e07c73 100644
--- a/drivers/staging/wfx/wfx.h
+++ b/drivers/staging/wfx/wfx.h
@@ -98,7 +98,6 @@ struct wfx_vif {
 	spinlock_t		ps_state_lock;
 	struct work_struct	set_tim_work;
 
-	int			dtim_period;
 	int			beacon_int;
 	bool			enable_beacon;
 	bool			filter_bssid;

commit b0674e0675520beeca7a52ae7e610d751996e8ed
Author: Jérôme Pouiller <jerome.pouiller@silabs.com>
Date:   Wed Jan 15 13:54:32 2020 +0000

    staging: wfx: simplify update of DTIM period
    
    Current code parse the TIM and retrieve the DTIM period. It is far
    easier to rely on bss_info_changed() for this job.
    
    It is no more necessary to run task asynchronously. So
    set_beacon_wakeup_period_work is now useless.
    
    Signed-off-by: Jérôme Pouiller <jerome.pouiller@silabs.com>
    Link: https://lore.kernel.org/r/20200115135338.14374-22-Jerome.Pouiller@silabs.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/wfx/wfx.h b/drivers/staging/wfx/wfx.h
index 155dbe5704c9..d201cceec1ab 100644
--- a/drivers/staging/wfx/wfx.h
+++ b/drivers/staging/wfx/wfx.h
@@ -101,8 +101,6 @@ struct wfx_vif {
 	int			dtim_period;
 	int			beacon_int;
 	bool			enable_beacon;
-	struct work_struct	set_beacon_wakeup_period_work;
-
 	bool			filter_bssid;
 	bool			fwd_probe_req;
 	bool			disable_beacon_filter;

commit f050f3dac6686903f001862cc7b67bd2dcaeaea1
Author: Jérôme Pouiller <jerome.pouiller@silabs.com>
Date:   Wed Jan 15 13:54:21 2020 +0000

    staging: wfx: drop wdev->output_power
    
    mac80211 and the device are both able to control tx power per vif. But,
    the current code retrieve tx power from wfx_config(). So, it does not
    allow to setup the tx power independently for each vif. Driver just has
    to rely on bss_conf->txpower to get the correct information.
    
    In add, it is no more necessary to protect access to wdev->output_power
    with scan_lock.
    
    Signed-off-by: Jérôme Pouiller <jerome.pouiller@silabs.com>
    Link: https://lore.kernel.org/r/20200115135338.14374-15-Jerome.Pouiller@silabs.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/wfx/wfx.h b/drivers/staging/wfx/wfx.h
index ba6e0e923f4b..155dbe5704c9 100644
--- a/drivers/staging/wfx/wfx.h
+++ b/drivers/staging/wfx/wfx.h
@@ -59,8 +59,6 @@ struct wfx_dev {
 
 	struct hif_rx_stats	rx_stats;
 	struct mutex		rx_stats_lock;
-
-	int			output_power;
 };
 
 struct wfx_vif {

commit 811ed3e2aba3ca6d99b13704a406e518efa832d1
Author: Jérôme Pouiller <jerome.pouiller@silabs.com>
Date:   Wed Jan 15 13:54:20 2020 +0000

    staging: wfx: drop struct wfx_ht_info
    
    This struct is no more used.
    
    Signed-off-by: Jérôme Pouiller <jerome.pouiller@silabs.com>
    Link: https://lore.kernel.org/r/20200115135338.14374-14-Jerome.Pouiller@silabs.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/wfx/wfx.h b/drivers/staging/wfx/wfx.h
index 0a3df382af03..ba6e0e923f4b 100644
--- a/drivers/staging/wfx/wfx.h
+++ b/drivers/staging/wfx/wfx.h
@@ -113,7 +113,6 @@ struct wfx_vif {
 	u32			erp_info;
 	int			cqm_rssi_thold;
 	bool			setbssparams_done;
-	struct wfx_ht_info	ht_info;
 	unsigned long		uapsd_mask;
 	struct ieee80211_tx_queue_params edca_params[IEEE80211_NUM_ACS];
 	struct hif_req_set_bss_params bss_params;

commit 4337074be76d853e3677461dd19bd7c1759c55f6
Author: Jérôme Pouiller <jerome.pouiller@silabs.com>
Date:   Tue Dec 17 16:15:41 2019 +0000

    staging: wfx: implement cancel_hw_scan()
    
    The device provides an API to abort a scan request. Expose this feature
    to mac80211.
    
    Signed-off-by: Jérôme Pouiller <jerome.pouiller@silabs.com>
    Link: https://lore.kernel.org/r/20191217161318.31402-55-Jerome.Pouiller@silabs.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/wfx/wfx.h b/drivers/staging/wfx/wfx.h
index db433bee87af..0a3df382af03 100644
--- a/drivers/staging/wfx/wfx.h
+++ b/drivers/staging/wfx/wfx.h
@@ -127,6 +127,7 @@ struct wfx_vif {
 	struct mutex		scan_lock;
 	struct work_struct	scan_work;
 	struct completion	scan_complete;
+	bool			scan_abort;
 	struct ieee80211_scan_request *scan_req;
 
 	struct completion	set_pm_mode_complete;

commit 3dc67854dfa95f7d3f132988536ace282828378a
Author: Jérôme Pouiller <jerome.pouiller@silabs.com>
Date:   Tue Dec 17 16:15:39 2019 +0000

    staging: wfx: delayed_link_loss cannot happen
    
    Original code allows to detect an BSS loss during a scan and delaying
    the handling of BSS loss. However, there it is no real problem to just
    make these two events mutually exclusive (there is just a performance
    penalty).
    
    Signed-off-by: Jérôme Pouiller <jerome.pouiller@silabs.com>
    Link: https://lore.kernel.org/r/20191217161318.31402-54-Jerome.Pouiller@silabs.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/wfx/wfx.h b/drivers/staging/wfx/wfx.h
index 5e7c911db024..db433bee87af 100644
--- a/drivers/staging/wfx/wfx.h
+++ b/drivers/staging/wfx/wfx.h
@@ -70,7 +70,6 @@ struct wfx_vif {
 	int			id;
 	enum wfx_state		state;
 
-	int			delayed_link_loss;
 	int			bss_loss_state;
 	u32			bss_loss_confirm_id;
 	struct mutex		bss_loss_lock;

commit 9699c88a4427d592655977a8cbeae46864df7700
Author: Jérôme Pouiller <jerome.pouiller@silabs.com>
Date:   Tue Dec 17 16:15:38 2019 +0000

    staging: wfx: delayed_unjoin cannot happen
    
    Original code allows to detect an unjoin request during a scan and
    delaying the unjoin request. However, it is far easier to just block the
    unjoin request until the end of the scan request.
    
    In fact, it is already the case since scan and unjoin are protected by
    conf_mutex. So, currently, the handling of delayed_unjoin is just dead
    code.
    
    Signed-off-by: Jérôme Pouiller <jerome.pouiller@silabs.com>
    Link: https://lore.kernel.org/r/20191217161318.31402-53-Jerome.Pouiller@silabs.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/wfx/wfx.h b/drivers/staging/wfx/wfx.h
index b5f763c3fac7..5e7c911db024 100644
--- a/drivers/staging/wfx/wfx.h
+++ b/drivers/staging/wfx/wfx.h
@@ -122,7 +122,6 @@ struct wfx_vif {
 	struct work_struct	set_cts_work;
 
 	int			join_complete_status;
-	bool			delayed_unjoin;
 	struct work_struct	unjoin_work;
 
 	/* avoid some operations in parallel with scan */

commit 3827e33d371ed2f4024fd42a4409e1b7af8e0938
Author: Jérôme Pouiller <jerome.pouiller@silabs.com>
Date:   Tue Dec 17 16:15:37 2019 +0000

    staging: wfx: workaround bug with "iw scan"
    
    mac80211 specification does not forbid hw_scan() to call
    ieee80211_scan_completed(). However, from userspace point of view, not
    all applications support this behavior. In particular, the code of iw
    contains a big fat warning:
    
       /*
        * This code has a bug, which requires creating a separate
        * nl80211 socket to fix:
        * It is possible for a NL80211_CMD_NEW_SCAN_RESULTS or
        * NL80211_CMD_SCAN_ABORTED message to be sent by the kernel
        * before (!) we listen to it, because we only start listening
        * after we send our scan request.
        [...]
        * Alas, the kernel doesn't do that (yet).
        */
    
    So, we have to avoid to call ieee80211_scan_completed() from hw_scan()
    (it's a kind of unwritten rule).
    
    This patch relocates the hw_scan() process to a work_struct to fix the
    problem.
    
    Signed-off-by: Jérôme Pouiller <jerome.pouiller@silabs.com>
    Link: https://lore.kernel.org/r/20191217161318.31402-52-Jerome.Pouiller@silabs.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/wfx/wfx.h b/drivers/staging/wfx/wfx.h
index 3356d0cbf7af..b5f763c3fac7 100644
--- a/drivers/staging/wfx/wfx.h
+++ b/drivers/staging/wfx/wfx.h
@@ -127,7 +127,9 @@ struct wfx_vif {
 
 	/* avoid some operations in parallel with scan */
 	struct mutex		scan_lock;
+	struct work_struct	scan_work;
 	struct completion	scan_complete;
+	struct ieee80211_scan_request *scan_req;
 
 	struct completion	set_pm_mode_complete;
 

commit d1c015b4ef6f2ab74b19c216cfff07742b7665cf
Author: Jérôme Pouiller <jerome.pouiller@silabs.com>
Date:   Tue Dec 17 16:15:35 2019 +0000

    staging: wfx: rewrite wfx_hw_scan()
    
    Scan requests from mac80211 must be splitted in a few hardware requests
    (it is necessary to split channels with active scan and channels with
    passive scan). Current code schedules a work_struct for each hardware
    request and one delayed_work to handle scan timeout.
    
    It is far simpler to run send all the hardware requests synchronously
    and replace delayed_work with a simple wait_for_completion_timeout().
    
    Signed-off-by: Jérôme Pouiller <jerome.pouiller@silabs.com>
    Link: https://lore.kernel.org/r/20191217161318.31402-51-Jerome.Pouiller@silabs.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/wfx/wfx.h b/drivers/staging/wfx/wfx.h
index 35f5ddc2eeb3..3356d0cbf7af 100644
--- a/drivers/staging/wfx/wfx.h
+++ b/drivers/staging/wfx/wfx.h
@@ -125,7 +125,9 @@ struct wfx_vif {
 	bool			delayed_unjoin;
 	struct work_struct	unjoin_work;
 
-	struct wfx_scan		scan;
+	/* avoid some operations in parallel with scan */
+	struct mutex		scan_lock;
+	struct completion	scan_complete;
 
 	struct completion	set_pm_mode_complete;
 

commit 945ce30aa52beec7eb01f3bcaf564ef60c46554a
Author: Jérôme Pouiller <jerome.pouiller@silabs.com>
Date:   Tue Dec 17 16:15:32 2019 +0000

    staging: wfx: simplify hif_scan() usage
    
    The structures hif_req_start_scan and hif_ssid_def come from hardware
    API. It is not intended to be manipulated in upper layers of the driver.
    
    So, this patch relocate handling of theses structures to hif_scan()
    (the low level function). This change also allows to drop struct
    wfx_scan_params.
    
    Signed-off-by: Jérôme Pouiller <jerome.pouiller@silabs.com>
    Link: https://lore.kernel.org/r/20191217161318.31402-48-Jerome.Pouiller@silabs.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/wfx/wfx.h b/drivers/staging/wfx/wfx.h
index 97373d047f58..35f5ddc2eeb3 100644
--- a/drivers/staging/wfx/wfx.h
+++ b/drivers/staging/wfx/wfx.h
@@ -27,6 +27,7 @@
 #include "hif_api_general.h"
 
 #define USEC_PER_TXOP 32 // see struct ieee80211_tx_queue_params
+#define USEC_PER_TU 1024
 
 struct hwbus_ops;
 

commit 7ceb4753ef58185b5a90ccbd3a55373b01a38219
Author: Jérôme Pouiller <jerome.pouiller@silabs.com>
Date:   Tue Dec 17 16:15:29 2019 +0000

    staging: wfx: device already handle sleep mode during scan
    
    The device is not allowed to enter in sleep mode during scan. However,
    this is already handled by the device. So driver does not have to care
    about it.
    
    Signed-off-by: Jérôme Pouiller <jerome.pouiller@silabs.com>
    Link: https://lore.kernel.org/r/20191217161318.31402-46-Jerome.Pouiller@silabs.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/wfx/wfx.h b/drivers/staging/wfx/wfx.h
index f396a502283e..97373d047f58 100644
--- a/drivers/staging/wfx/wfx.h
+++ b/drivers/staging/wfx/wfx.h
@@ -60,7 +60,6 @@ struct wfx_dev {
 	struct mutex		rx_stats_lock;
 
 	int			output_power;
-	atomic_t		scan_in_progress;
 };
 
 struct wfx_vif {

commit 871341db220ab0b63153daf295946137f73e727a
Author: Jérôme Pouiller <jerome.pouiller@silabs.com>
Date:   Tue Dec 17 16:15:27 2019 +0000

    staging: wfx: simplify hif_set_edca_queue_params() usage
    
    The struct hif_req_edca_queue_params comes from hardware API. It is not
    intended to be manipulated in upper layers of the driver.
    
    So, this patch:
      1. relocate the handling of this struct in hif_set_edca_queue_params()
         (the low level function)
      2. replace it in wfx_vif by the mac80211 equivalent: struct
         ieee80211_tx_queue_params
    
    Signed-off-by: Jérôme Pouiller <jerome.pouiller@silabs.com>
    Link: https://lore.kernel.org/r/20191217161318.31402-44-Jerome.Pouiller@silabs.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/wfx/wfx.h b/drivers/staging/wfx/wfx.h
index 5a2f8af17eb7..f396a502283e 100644
--- a/drivers/staging/wfx/wfx.h
+++ b/drivers/staging/wfx/wfx.h
@@ -26,6 +26,8 @@
 #include "hif_tx.h"
 #include "hif_api_general.h"
 
+#define USEC_PER_TXOP 32 // see struct ieee80211_tx_queue_params
+
 struct hwbus_ops;
 
 struct wfx_dev {
@@ -114,7 +116,7 @@ struct wfx_vif {
 	bool			setbssparams_done;
 	struct wfx_ht_info	ht_info;
 	unsigned long		uapsd_mask;
-	struct hif_req_edca_queue_params edca_params[IEEE80211_NUM_ACS];
+	struct ieee80211_tx_queue_params edca_params[IEEE80211_NUM_ACS];
 	struct hif_req_set_bss_params bss_params;
 	struct work_struct	bss_params_work;
 	struct work_struct	set_cts_work;

commit 7e2b32f54f61cc5ebc9c18d605ee84cef53eb60d
Author: Jérôme Pouiller <jerome.pouiller@silabs.com>
Date:   Tue Dec 17 16:15:24 2019 +0000

    staging: wfx: drop struct wfx_edca_params
    
    Intermediate structure wfx_edca_params does not help. This patch
    relocates its members directly in struct wfx_vif.
    
    Signed-off-by: Jérôme Pouiller <jerome.pouiller@silabs.com>
    Link: https://lore.kernel.org/r/20191217161318.31402-42-Jerome.Pouiller@silabs.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/wfx/wfx.h b/drivers/staging/wfx/wfx.h
index ff29163436b6..5a2f8af17eb7 100644
--- a/drivers/staging/wfx/wfx.h
+++ b/drivers/staging/wfx/wfx.h
@@ -113,7 +113,8 @@ struct wfx_vif {
 	int			cqm_rssi_thold;
 	bool			setbssparams_done;
 	struct wfx_ht_info	ht_info;
-	struct wfx_edca_params	edca;
+	unsigned long		uapsd_mask;
+	struct hif_req_edca_queue_params edca_params[IEEE80211_NUM_ACS];
 	struct hif_req_set_bss_params bss_params;
 	struct work_struct	bss_params_work;
 	struct work_struct	set_cts_work;

commit d74d60c3a1784b6333cdfbf919316d353c934352
Author: Jérôme Pouiller <jerome.pouiller@silabs.com>
Date:   Tue Dec 17 16:15:21 2019 +0000

    staging: wfx: simplify hif_set_uapsd_info() usage
    
    It is useless to keep uapsd_info in struct wfx_vif. This structure can
    be rebuilt just before to be sent.
    
    In add, the struct hif_mib_set_uapsd_information comes from hardware
    API. It is not intended to be manipulated in upper layers of the driver.
    So, this patch relocates the handling of this struct to
    hif_set_uapsd_info() (the low level function).
    
    Signed-off-by: Jérôme Pouiller <jerome.pouiller@silabs.com>
    Link: https://lore.kernel.org/r/20191217161318.31402-40-Jerome.Pouiller@silabs.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/wfx/wfx.h b/drivers/staging/wfx/wfx.h
index c82d29764d66..ff29163436b6 100644
--- a/drivers/staging/wfx/wfx.h
+++ b/drivers/staging/wfx/wfx.h
@@ -114,7 +114,6 @@ struct wfx_vif {
 	bool			setbssparams_done;
 	struct wfx_ht_info	ht_info;
 	struct wfx_edca_params	edca;
-	struct hif_mib_set_uapsd_information uapsd_info;
 	struct hif_req_set_bss_params bss_params;
 	struct work_struct	bss_params_work;
 	struct work_struct	set_cts_work;

commit 50ad848cc6d6c6290a38b62ea60abefb903396d3
Author: Jérôme Pouiller <jerome.pouiller@silabs.com>
Date:   Tue Dec 17 16:15:15 2019 +0000

    staging: wfx: drop unnecessary wvif->powersave_mode
    
    Power save status is already available in bss_conf. So there is no
    reason to keep information duplicated in wvif->powersave_mode.
    
    In add, type of wvif->powersave_mode is low level struct made to
    communicate with device. We would like to limit usage of this kind of
    struct in upper layers of the driver.
    
    Signed-off-by: Jérôme Pouiller <jerome.pouiller@silabs.com>
    Link: https://lore.kernel.org/r/20191217161318.31402-35-Jerome.Pouiller@silabs.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/wfx/wfx.h b/drivers/staging/wfx/wfx.h
index 781a8c8ba982..c82d29764d66 100644
--- a/drivers/staging/wfx/wfx.h
+++ b/drivers/staging/wfx/wfx.h
@@ -125,7 +125,6 @@ struct wfx_vif {
 
 	struct wfx_scan		scan;
 
-	struct hif_req_set_pm_mode powersave_mode;
 	struct completion	set_pm_mode_complete;
 
 	struct list_head	event_queue;

commit 8c7128c4cf4e0e6eb67bd65b4dbe619c3d297bb6
Author: Jules Irenge <jbi.octave@gmail.com>
Date:   Wed Nov 13 11:00:52 2019 +0000

    staging: align to fix warnings of line over 80 characters
    
    Align to fix multiple warnings of line over 80 characters.
    Issue detected by checkpatch tool.
    
    Signed-off-by: Jules Irenge <jbi.octave@gmail.com>
    Link: https://lore.kernel.org/r/20191113110052.14855-1-jbi.octave@gmail.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/wfx/wfx.h b/drivers/staging/wfx/wfx.h
index 44e580a07c91..781a8c8ba982 100644
--- a/drivers/staging/wfx/wfx.h
+++ b/drivers/staging/wfx/wfx.h
@@ -141,13 +141,15 @@ static inline struct wfx_vif *wdev_to_wvif(struct wfx_dev *wdev, int vif_id)
 	}
 	vif_id = array_index_nospec(vif_id, ARRAY_SIZE(wdev->vif));
 	if (!wdev->vif[vif_id]) {
-		dev_dbg(wdev->dev, "requesting non-allocated vif: %d\n", vif_id);
+		dev_dbg(wdev->dev, "requesting non-allocated vif: %d\n",
+			vif_id);
 		return NULL;
 	}
 	return (struct wfx_vif *) wdev->vif[vif_id]->drv_priv;
 }
 
-static inline struct wfx_vif *wvif_iterate(struct wfx_dev *wdev, struct wfx_vif *cur)
+static inline struct wfx_vif *wvif_iterate(struct wfx_dev *wdev,
+					   struct wfx_vif *cur)
 {
 	int i;
 	int mark = 0;

commit 5cd382b2693358be99b9ae1c524854f5715b5dc2
Author: Jules Irenge <jbi.octave@gmail.com>
Date:   Mon Nov 11 13:30:53 2019 +0000

    staging: wfx: replace uintXX_t to uXX and intXX_t to sXX
    
    Replace uint8_t to u8, uint16_t to u16, uint32_t to u32
    int8_t to s8,int16_t to s16 and int32_t to s32
    As per recommendation of checkpatch tool.
    
    Signed-off-by: Jules Irenge <jbi.octave@gmail.com>
    Link: https://lore.kernel.org/r/20191111133055.214410-1-jbi.octave@gmail.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/wfx/wfx.h b/drivers/staging/wfx/wfx.h
index d678b5a08873..44e580a07c91 100644
--- a/drivers/staging/wfx/wfx.h
+++ b/drivers/staging/wfx/wfx.h
@@ -179,11 +179,11 @@ static inline int wvif_count(struct wfx_dev *wdev)
 	return ret;
 }
 
-static inline void memreverse(uint8_t *src, uint8_t length)
+static inline void memreverse(u8 *src, u8 length)
 {
-	uint8_t *lo = src;
-	uint8_t *hi = src + length - 1;
-	uint8_t swap;
+	u8 *lo = src;
+	u8 *hi = src + length - 1;
+	u8 swap;
 
 	while (lo < hi) {
 		swap = *lo;
@@ -194,7 +194,7 @@ static inline void memreverse(uint8_t *src, uint8_t length)
 
 static inline int memzcmp(void *src, unsigned int size)
 {
-	uint8_t *buf = src;
+	u8 *buf = src;
 
 	if (!size)
 		return 0;

commit 88d0facf186c6c652c2203536fecd77089b43a4e
Author: Jérôme Pouiller <jerome.pouiller@silabs.com>
Date:   Fri Oct 11 16:47:51 2019 +0000

    staging: wfx: fix potential vulnerability to spectre
    
    array_index_nospec() should be applied after a bound check.
    
    Fixes: 9bca45f3d692 ("staging: wfx: allow to send 802.11 frames")
    Reported-by: kbuild test robot <lkp@intel.com>
    Reported-by: Dan Carpenter <dan.carpenter@oracle.com>
    Signed-off-by: Jérôme Pouiller <jerome.pouiller@silabs.com>
    Link: https://lore.kernel.org/r/20191011164746.2518-1-Jerome.Pouiller@silabs.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/wfx/wfx.h b/drivers/staging/wfx/wfx.h
index 489836837b0a..d678b5a08873 100644
--- a/drivers/staging/wfx/wfx.h
+++ b/drivers/staging/wfx/wfx.h
@@ -13,6 +13,7 @@
 #include <linux/completion.h>
 #include <linux/workqueue.h>
 #include <linux/mutex.h>
+#include <linux/nospec.h>
 #include <net/mac80211.h>
 
 #include "bh.h"
@@ -138,6 +139,7 @@ static inline struct wfx_vif *wdev_to_wvif(struct wfx_dev *wdev, int vif_id)
 		dev_dbg(wdev->dev, "requesting non-existent vif: %d\n", vif_id);
 		return NULL;
 	}
+	vif_id = array_index_nospec(vif_id, ARRAY_SIZE(wdev->vif));
 	if (!wdev->vif[vif_id]) {
 		dev_dbg(wdev->dev, "requesting non-allocated vif: %d\n", vif_id);
 		return NULL;

commit 40115bbc40e2fd2de0e01ef2a28e0d09a1b5d0d1
Author: Jérôme Pouiller <jerome.pouiller@silabs.com>
Date:   Thu Sep 19 14:25:48 2019 +0000

    staging: wfx: implement the rest of mac80211 API
    
    Finish to fill struct ieee80211_ops with necessary callbacks. Driver is
    now ready to be registered to mac80211.
    
    Signed-off-by: Jérôme Pouiller <jerome.pouiller@silabs.com>
    Link: https://lore.kernel.org/r/20190919142527.31797-21-Jerome.Pouiller@silabs.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/wfx/wfx.h b/drivers/staging/wfx/wfx.h
index a86ddfaed825..489836837b0a 100644
--- a/drivers/staging/wfx/wfx.h
+++ b/drivers/staging/wfx/wfx.h
@@ -11,6 +11,8 @@
 #define WFX_H
 
 #include <linux/completion.h>
+#include <linux/workqueue.h>
+#include <linux/mutex.h>
 #include <net/mac80211.h>
 
 #include "bh.h"
@@ -61,8 +63,15 @@ struct wfx_dev {
 struct wfx_vif {
 	struct wfx_dev		*wdev;
 	struct ieee80211_vif	*vif;
+	struct ieee80211_channel *channel;
 	int			id;
+	enum wfx_state		state;
 
+	int			delayed_link_loss;
+	int			bss_loss_state;
+	u32			bss_loss_confirm_id;
+	struct mutex		bss_loss_lock;
+	struct delayed_work	bss_loss_work;
 
 	u32			link_id_map;
 	struct wfx_link_entry	link_id_db[WFX_MAX_STA_IN_AP_MODE];
@@ -72,6 +81,7 @@ struct wfx_vif {
 	bool			aid0_bit_set;
 	bool			mcast_tx;
 	bool			mcast_buffered;
+	struct wfx_grp_addr_table mcast_filter;
 	struct timer_list	mcast_timeout;
 	struct work_struct	mcast_start_work;
 	struct work_struct	mcast_stop_work;
@@ -86,13 +96,40 @@ struct wfx_vif {
 	u32			sta_asleep_mask;
 	u32			pspoll_mask;
 	spinlock_t		ps_state_lock;
+	struct work_struct	set_tim_work;
+
+	int			dtim_period;
+	int			beacon_int;
+	bool			enable_beacon;
+	struct work_struct	set_beacon_wakeup_period_work;
 
 	bool			filter_bssid;
 	bool			fwd_probe_req;
+	bool			disable_beacon_filter;
+	struct work_struct	update_filtering_work;
 
+	u32			erp_info;
+	int			cqm_rssi_thold;
+	bool			setbssparams_done;
+	struct wfx_ht_info	ht_info;
 	struct wfx_edca_params	edca;
+	struct hif_mib_set_uapsd_information uapsd_info;
+	struct hif_req_set_bss_params bss_params;
+	struct work_struct	bss_params_work;
+	struct work_struct	set_cts_work;
+
+	int			join_complete_status;
+	bool			delayed_unjoin;
+	struct work_struct	unjoin_work;
 
 	struct wfx_scan		scan;
+
+	struct hif_req_set_pm_mode powersave_mode;
+	struct completion	set_pm_mode_complete;
+
+	struct list_head	event_queue;
+	spinlock_t		event_queue_lock;
+	struct work_struct	event_handler_work;
 };
 
 static inline struct wfx_vif *wdev_to_wvif(struct wfx_dev *wdev, int vif_id)
@@ -126,6 +163,20 @@ static inline struct wfx_vif *wvif_iterate(struct wfx_dev *wdev, struct wfx_vif
 	return NULL;
 }
 
+static inline int wvif_count(struct wfx_dev *wdev)
+{
+	int i;
+	int ret = 0;
+	struct wfx_vif *wvif;
+
+	for (i = 0; i < ARRAY_SIZE(wdev->vif); i++) {
+		wvif = wdev_to_wvif(wdev, i);
+		if (wvif)
+			ret++;
+	}
+	return ret;
+}
+
 static inline void memreverse(uint8_t *src, uint8_t length)
 {
 	uint8_t *lo = src;

commit fb2490f693ee0151c0d847d1e4c575313a46b13b
Author: Jérôme Pouiller <jerome.pouiller@silabs.com>
Date:   Thu Sep 19 14:25:47 2019 +0000

    staging: wfx: implement 802.11 key handling
    
    wfx_set_key() mostly copy bytes on correct offsets. A big piece of code
    for a simple work. Unfortunately, I did not found any way to factorize
    it.
    
    Signed-off-by: Jérôme Pouiller <jerome.pouiller@silabs.com>
    Link: https://lore.kernel.org/r/20190919142527.31797-20-Jerome.Pouiller@silabs.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/wfx/wfx.h b/drivers/staging/wfx/wfx.h
index 50c0d9c0e528..a86ddfaed825 100644
--- a/drivers/staging/wfx/wfx.h
+++ b/drivers/staging/wfx/wfx.h
@@ -48,6 +48,9 @@ struct wfx_dev {
 	int			tx_burst_idx;
 	atomic_t		tx_lock;
 
+	u32			key_map;
+	struct hif_req_add_key	keys[MAX_KEY_ENTRIES];
+
 	struct hif_rx_stats	rx_stats;
 	struct mutex		rx_stats_lock;
 
@@ -73,6 +76,9 @@ struct wfx_vif {
 	struct work_struct	mcast_start_work;
 	struct work_struct	mcast_stop_work;
 
+	s8			wep_default_key_id;
+	struct sk_buff		*wep_pending_skb;
+	struct work_struct	wep_key_work;
 
 	struct tx_policy_cache	tx_policy_cache;
 	struct work_struct	tx_policy_upload_work;
@@ -120,6 +126,19 @@ static inline struct wfx_vif *wvif_iterate(struct wfx_dev *wdev, struct wfx_vif
 	return NULL;
 }
 
+static inline void memreverse(uint8_t *src, uint8_t length)
+{
+	uint8_t *lo = src;
+	uint8_t *hi = src + length - 1;
+	uint8_t swap;
+
+	while (lo < hi) {
+		swap = *lo;
+		*lo++ = *hi;
+		*hi-- = swap;
+	}
+}
+
 static inline int memzcmp(void *src, unsigned int size)
 {
 	uint8_t *buf = src;

commit 1a61af0f8cbecd1610c6fc380d0fb00f57fd43f2
Author: Jérôme Pouiller <jerome.pouiller@silabs.com>
Date:   Thu Sep 19 14:25:47 2019 +0000

    staging: wfx: allow to scan networks
    
    Chip can make foreground scan or background, but both can't be mixed in
    same request. So, we need to split each mac80211 requests into multiple
    HIF requests.
    
    Signed-off-by: Jérôme Pouiller <jerome.pouiller@silabs.com>
    Link: https://lore.kernel.org/r/20190919142527.31797-19-Jerome.Pouiller@silabs.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/wfx/wfx.h b/drivers/staging/wfx/wfx.h
index 11775b1e06ef..50c0d9c0e528 100644
--- a/drivers/staging/wfx/wfx.h
+++ b/drivers/staging/wfx/wfx.h
@@ -19,6 +19,7 @@
 #include "queue.h"
 #include "secure_link.h"
 #include "sta.h"
+#include "scan.h"
 #include "hif_tx.h"
 #include "hif_api_general.h"
 
@@ -39,6 +40,7 @@ struct wfx_dev {
 	struct wfx_hif		hif;
 	struct sl_context	sl;
 	int			chip_frozen;
+	struct mutex		conf_mutex;
 
 	struct wfx_hif_cmd	hif_cmd;
 	struct wfx_queue	tx_queue[4];
@@ -48,6 +50,9 @@ struct wfx_dev {
 
 	struct hif_rx_stats	rx_stats;
 	struct mutex		rx_stats_lock;
+
+	int			output_power;
+	atomic_t		scan_in_progress;
 };
 
 struct wfx_vif {
@@ -71,11 +76,17 @@ struct wfx_vif {
 
 	struct tx_policy_cache	tx_policy_cache;
 	struct work_struct	tx_policy_upload_work;
+
 	u32			sta_asleep_mask;
 	u32			pspoll_mask;
 	spinlock_t		ps_state_lock;
 
+	bool			filter_bssid;
+	bool			fwd_probe_req;
+
 	struct wfx_edca_params	edca;
+
+	struct wfx_scan		scan;
 };
 
 static inline struct wfx_vif *wdev_to_wvif(struct wfx_dev *wdev, int vif_id)

commit 9bca45f3d6924f19f29c0d019e961af3f41bdc9e
Author: Jérôme Pouiller <jerome.pouiller@silabs.com>
Date:   Thu Sep 19 14:25:45 2019 +0000

    staging: wfx: allow to send 802.11 frames
    
    Three things make this task more complex than it should:
      - Chip necessitate to associate a link-id to each station. It is same
        thing than association ID but, using 8 bits only.
      - Rate policy is sent separately from Tx frames
      - Driver try to handle itself power saving of stations and multicast
        data
    
    Signed-off-by: Jérôme Pouiller <jerome.pouiller@silabs.com>
    Link: https://lore.kernel.org/r/20190919142527.31797-17-Jerome.Pouiller@silabs.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/wfx/wfx.h b/drivers/staging/wfx/wfx.h
index 49b776a07515..11775b1e06ef 100644
--- a/drivers/staging/wfx/wfx.h
+++ b/drivers/staging/wfx/wfx.h
@@ -14,8 +14,11 @@
 #include <net/mac80211.h>
 
 #include "bh.h"
+#include "data_tx.h"
 #include "main.h"
+#include "queue.h"
 #include "secure_link.h"
+#include "sta.h"
 #include "hif_tx.h"
 #include "hif_api_general.h"
 
@@ -38,6 +41,10 @@ struct wfx_dev {
 	int			chip_frozen;
 
 	struct wfx_hif_cmd	hif_cmd;
+	struct wfx_queue	tx_queue[4];
+	struct wfx_queue_stats	tx_queue_stats;
+	int			tx_burst_idx;
+	atomic_t		tx_lock;
 
 	struct hif_rx_stats	rx_stats;
 	struct mutex		rx_stats_lock;
@@ -47,6 +54,28 @@ struct wfx_vif {
 	struct wfx_dev		*wdev;
 	struct ieee80211_vif	*vif;
 	int			id;
+
+
+	u32			link_id_map;
+	struct wfx_link_entry	link_id_db[WFX_MAX_STA_IN_AP_MODE];
+	struct delayed_work	link_id_gc_work;
+	struct work_struct	link_id_work;
+
+	bool			aid0_bit_set;
+	bool			mcast_tx;
+	bool			mcast_buffered;
+	struct timer_list	mcast_timeout;
+	struct work_struct	mcast_start_work;
+	struct work_struct	mcast_stop_work;
+
+
+	struct tx_policy_cache	tx_policy_cache;
+	struct work_struct	tx_policy_upload_work;
+	u32			sta_asleep_mask;
+	u32			pspoll_mask;
+	spinlock_t		ps_state_lock;
+
+	struct wfx_edca_params	edca;
 };
 
 static inline struct wfx_vif *wdev_to_wvif(struct wfx_dev *wdev, int vif_id)
@@ -62,4 +91,33 @@ static inline struct wfx_vif *wdev_to_wvif(struct wfx_dev *wdev, int vif_id)
 	return (struct wfx_vif *) wdev->vif[vif_id]->drv_priv;
 }
 
+static inline struct wfx_vif *wvif_iterate(struct wfx_dev *wdev, struct wfx_vif *cur)
+{
+	int i;
+	int mark = 0;
+	struct wfx_vif *tmp;
+
+	if (!cur)
+		mark = 1;
+	for (i = 0; i < ARRAY_SIZE(wdev->vif); i++) {
+		tmp = wdev_to_wvif(wdev, i);
+		if (mark && tmp)
+			return tmp;
+		if (tmp == cur)
+			mark = 1;
+	}
+	return NULL;
+}
+
+static inline int memzcmp(void *src, unsigned int size)
+{
+	uint8_t *buf = src;
+
+	if (!size)
+		return 0;
+	if (*buf)
+		return 1;
+	return memcmp(buf, buf + 1, size - 1);
+}
+
 #endif /* WFX_H */

commit f4a71ba8753d94cc5c1e73746352274a598a25ee
Author: Jérôme Pouiller <jerome.pouiller@silabs.com>
Date:   Thu Sep 19 14:25:44 2019 +0000

    staging: wfx: add debug files and trace debug events
    
    Add traces when debug events happen and allow to ask internal
    information to chip.
    
    These features work independently from mac80211.
    
    Signed-off-by: Jérôme Pouiller <jerome.pouiller@silabs.com>
    Link: https://lore.kernel.org/r/20190919142527.31797-16-Jerome.Pouiller@silabs.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/wfx/wfx.h b/drivers/staging/wfx/wfx.h
index 7adb5bf67e90..49b776a07515 100644
--- a/drivers/staging/wfx/wfx.h
+++ b/drivers/staging/wfx/wfx.h
@@ -38,6 +38,9 @@ struct wfx_dev {
 	int			chip_frozen;
 
 	struct wfx_hif_cmd	hif_cmd;
+
+	struct hif_rx_stats	rx_stats;
+	struct mutex		rx_stats_lock;
 };
 
 struct wfx_vif {
@@ -46,4 +49,17 @@ struct wfx_vif {
 	int			id;
 };
 
+static inline struct wfx_vif *wdev_to_wvif(struct wfx_dev *wdev, int vif_id)
+{
+	if (vif_id >= ARRAY_SIZE(wdev->vif)) {
+		dev_dbg(wdev->dev, "requesting non-existent vif: %d\n", vif_id);
+		return NULL;
+	}
+	if (!wdev->vif[vif_id]) {
+		dev_dbg(wdev->dev, "requesting non-allocated vif: %d\n", vif_id);
+		return NULL;
+	}
+	return (struct wfx_vif *) wdev->vif[vif_id]->drv_priv;
+}
+
 #endif /* WFX_H */

commit 846239f641db5af8dd952575a65808281f2d849e
Author: Jérôme Pouiller <jerome.pouiller@silabs.com>
Date:   Thu Sep 19 14:25:43 2019 +0000

    staging: wfx: introduce "secure link"
    
    Chip support encryption of the link between host and chip. This feature
    is called "secure link". Driver code on github[1] support it. However,
    it relies on mbedtls for cryptographic functions. So, I decided to not
    import this feature in current patch. However, in order to keep code
    synchronized between github and kernel, I imported all code related to
    this feature, even if most of it is just no-op.
    
    [1]: https://github.com/SiliconLabs/wfx-linux-driver/
    
    Signed-off-by: Jérôme Pouiller <jerome.pouiller@silabs.com>
    Link: https://lore.kernel.org/r/20190919142527.31797-14-Jerome.Pouiller@silabs.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/wfx/wfx.h b/drivers/staging/wfx/wfx.h
index bf9de11f8896..7adb5bf67e90 100644
--- a/drivers/staging/wfx/wfx.h
+++ b/drivers/staging/wfx/wfx.h
@@ -15,6 +15,7 @@
 
 #include "bh.h"
 #include "main.h"
+#include "secure_link.h"
 #include "hif_tx.h"
 #include "hif_api_general.h"
 
@@ -33,6 +34,7 @@ struct wfx_dev {
 	struct completion	firmware_ready;
 	struct hif_ind_startup	hw_caps;
 	struct wfx_hif		hif;
+	struct sl_context	sl;
 	int			chip_frozen;
 
 	struct wfx_hif_cmd	hif_cmd;

commit 4f8b7fabb15df3658564a98971fc67029be1815d
Author: Jérôme Pouiller <jerome.pouiller@silabs.com>
Date:   Thu Sep 19 14:25:42 2019 +0000

    staging: wfx: allow to send commands to chip
    
    Chip has multiple input buffers and can handle multiple 802.11 frames
    in parallel. However, other HIF command must be sent sequentially.
    wsm_send_cmd() handles these requests.
    
    This commit also add send_hif_cmd in debugfs. This file allows to send
    arbitrary commands to chip. It can be used for debug and testing.
    
    Signed-off-by: Jérôme Pouiller <jerome.pouiller@silabs.com>
    Link: https://lore.kernel.org/r/20190919142527.31797-12-Jerome.Pouiller@silabs.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/wfx/wfx.h b/drivers/staging/wfx/wfx.h
index a7e571e0da30..bf9de11f8896 100644
--- a/drivers/staging/wfx/wfx.h
+++ b/drivers/staging/wfx/wfx.h
@@ -15,6 +15,7 @@
 
 #include "bh.h"
 #include "main.h"
+#include "hif_tx.h"
 #include "hif_api_general.h"
 
 struct hwbus_ops;
@@ -32,6 +33,9 @@ struct wfx_dev {
 	struct completion	firmware_ready;
 	struct hif_ind_startup	hw_caps;
 	struct wfx_hif		hif;
+	int			chip_frozen;
+
+	struct wfx_hif_cmd	hif_cmd;
 };
 
 struct wfx_vif {

commit e16e7f0716a6ba9a690fc5229a6e35e00e03b805
Author: Jérôme Pouiller <jerome.pouiller@silabs.com>
Date:   Thu Sep 19 14:25:41 2019 +0000

    staging: wfx: instantiate mac80211 data
    
    Allocate a struct ieee80211_hw but do not yet register it.
    
    Signed-off-by: Jérôme Pouiller <jerome.pouiller@silabs.com>
    Link: https://lore.kernel.org/r/20190919142527.31797-11-Jerome.Pouiller@silabs.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/wfx/wfx.h b/drivers/staging/wfx/wfx.h
index f5f9a337d828..a7e571e0da30 100644
--- a/drivers/staging/wfx/wfx.h
+++ b/drivers/staging/wfx/wfx.h
@@ -22,6 +22,8 @@ struct hwbus_ops;
 struct wfx_dev {
 	struct wfx_platform_data pdata;
 	struct device		*dev;
+	struct ieee80211_hw	*hw;
+	struct ieee80211_vif	*vif[2];
 	struct mac_address	addresses[2];
 	const struct hwbus_ops	*hwbus_ops;
 	void			*hwbus_priv;
@@ -32,4 +34,10 @@ struct wfx_dev {
 	struct wfx_hif		hif;
 };
 
+struct wfx_vif {
+	struct wfx_dev		*wdev;
+	struct ieee80211_vif	*vif;
+	int			id;
+};
+
 #endif /* WFX_H */

commit 185c106f79bf2714e86316057948b8c2853b0666
Author: Jérôme Pouiller <jerome.pouiller@silabs.com>
Date:   Thu Sep 19 14:25:41 2019 +0000

    staging: wfx: add support for start-up indication
    
    Once firmware is loaded, it send a first indication to host. This
    indication signalize that host can start to communicate with firmware.
    In add, it contains information about chip and firmware (MAC addresses,
    firmware version, etc...).
    
    Signed-off-by: Jérôme Pouiller <jerome.pouiller@silabs.com>
    Link: https://lore.kernel.org/r/20190919142527.31797-10-Jerome.Pouiller@silabs.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/wfx/wfx.h b/drivers/staging/wfx/wfx.h
index 4f28938fa3a6..f5f9a337d828 100644
--- a/drivers/staging/wfx/wfx.h
+++ b/drivers/staging/wfx/wfx.h
@@ -10,6 +10,9 @@
 #ifndef WFX_H
 #define WFX_H
 
+#include <linux/completion.h>
+#include <net/mac80211.h>
+
 #include "bh.h"
 #include "main.h"
 #include "hif_api_general.h"
@@ -19,10 +22,12 @@ struct hwbus_ops;
 struct wfx_dev {
 	struct wfx_platform_data pdata;
 	struct device		*dev;
+	struct mac_address	addresses[2];
 	const struct hwbus_ops	*hwbus_ops;
 	void			*hwbus_priv;
 
 	u8			keyset;
+	struct completion	firmware_ready;
 	struct hif_ind_startup	hw_caps;
 	struct wfx_hif		hif;
 };

commit b0998f0c040daf798d2f847d9588d57f2e2ade69
Author: Jérôme Pouiller <jerome.pouiller@silabs.com>
Date:   Thu Sep 19 14:25:40 2019 +0000

    staging: wfx: add IRQ handling
    
    bh_work() is in charge to schedule all HIF message from/to chip.
    
    On normal operation, when an IRQ is received, driver can get size of
    next message in control register. In order to save control register
    access, when chip send a message, it also appends a copy of control
    register after the message (this register is not accounted in message
    length declared in message header, but must accounted in bus request).
    This copy of control register is called "piggyback".
    
    It also handles a power saving mechanism specific to WFxxx series. This
    mechanism is based on a GPIO called "wakeup" GPIO. Obviously, this gpio
    is not part of SPI/SDIO standard buses and must be declared
    independently (this is the main reason for why SDIO mode try to get
    parameters from DT).
    
    When wakeup is enabled, host can communicate with chip only if it is
    awake. To wake up chip, there are two cases:
        - host receive an IRQ from chip (chip initiate communication): host
          just have to set wakeup GPIO before reading data
        - host want to send data to chip: host set wakeup GPIO, then wait
          for an IRQ (in fact, wait for an empty message) and finally send data
    
    bh_work() is also in charge to track usage of chip buffers. Normally
    each request expect a confirmation. However, you can notice that special
    "multi tx" confirmation can acknowledge multiple requests at time.
    
    Finally, note that wfx_bh_request_rx() is not atomic (because of
    control_reg_read()). So, in SPI mode, hard-irq handler only postpone all
    processing to wfx_spi_request_rx().
    
    Signed-off-by: Jérôme Pouiller <jerome.pouiller@silabs.com>
    Link: https://lore.kernel.org/r/20190919142527.31797-8-Jerome.Pouiller@silabs.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/wfx/wfx.h b/drivers/staging/wfx/wfx.h
index 56aed33291ae..4f28938fa3a6 100644
--- a/drivers/staging/wfx/wfx.h
+++ b/drivers/staging/wfx/wfx.h
@@ -10,7 +10,9 @@
 #ifndef WFX_H
 #define WFX_H
 
+#include "bh.h"
 #include "main.h"
+#include "hif_api_general.h"
 
 struct hwbus_ops;
 
@@ -21,6 +23,8 @@ struct wfx_dev {
 	void			*hwbus_priv;
 
 	u8			keyset;
+	struct hif_ind_startup	hw_caps;
+	struct wfx_hif		hif;
 };
 
 #endif /* WFX_H */

commit 652b4afb240e5dc196995597942309e89e89c767
Author: Jérôme Pouiller <jerome.pouiller@silabs.com>
Date:   Thu Sep 19 14:25:38 2019 +0000

    staging: wfx: load firmware
    
    A firmware is necessary to run the chip. wfx_init_device() is in charge
    of loading firmware on chip and doing low level initialization.
    
    Firmwares for WF200 are available here:
    
      https://github.com/SiliconLabs/wfx-firmware/
    
    Note that firmware are encrypted. Driver checks that key used to encrypt
    firmware match with key burned into chip.
    
    Currently, "C0" key is used for production chips.
    
    Signed-off-by: Jérôme Pouiller <jerome.pouiller@silabs.com>
    Link: https://lore.kernel.org/r/20190919142527.31797-6-Jerome.Pouiller@silabs.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/wfx/wfx.h b/drivers/staging/wfx/wfx.h
index 9716acc981df..56aed33291ae 100644
--- a/drivers/staging/wfx/wfx.h
+++ b/drivers/staging/wfx/wfx.h
@@ -19,6 +19,8 @@ struct wfx_dev {
 	struct device		*dev;
 	const struct hwbus_ops	*hwbus_ops;
 	void			*hwbus_priv;
+
+	u8			keyset;
 };
 
 #endif /* WFX_H */

commit 0096214a59a72b3c3c943e27bd03307324d3ce0f
Author: Jérôme Pouiller <jerome.pouiller@silabs.com>
Date:   Thu Sep 19 14:25:37 2019 +0000

    staging: wfx: add support for I/O access
    
    Introduce bus level communication layer. At this level, 7 registers can
    be addressed.
    
    Notice that SPI driver is able to manage chip reset. SDIO mode relies
    on an external driver (`mmc-pwrseq`) to reset chip.
    
    Signed-off-by: Jérôme Pouiller <jerome.pouiller@silabs.com>
    Link: https://lore.kernel.org/r/20190919142527.31797-3-Jerome.Pouiller@silabs.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/wfx/wfx.h b/drivers/staging/wfx/wfx.h
new file mode 100644
index 000000000000..9716acc981df
--- /dev/null
+++ b/drivers/staging/wfx/wfx.h
@@ -0,0 +1,24 @@
+/* SPDX-License-Identifier: GPL-2.0-only */
+/*
+ * Common private data for Silicon Labs WFx chips.
+ *
+ * Copyright (c) 2017-2019, Silicon Laboratories, Inc.
+ * Copyright (c) 2010, ST-Ericsson
+ * Copyright (c) 2006, Michael Wu <flamingice@sourmilk.net>
+ * Copyright 2004-2006 Jean-Baptiste Note <jbnote@gmail.com>, et al.
+ */
+#ifndef WFX_H
+#define WFX_H
+
+#include "main.h"
+
+struct hwbus_ops;
+
+struct wfx_dev {
+	struct wfx_platform_data pdata;
+	struct device		*dev;
+	const struct hwbus_ops	*hwbus_ops;
+	void			*hwbus_priv;
+};
+
+#endif /* WFX_H */
