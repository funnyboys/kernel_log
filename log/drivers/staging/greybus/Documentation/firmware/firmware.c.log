commit 137bfbd006b2aad72fa90b6fbe096f3a1db5b32a
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Sun Aug 25 07:54:22 2019 +0200

    staging: greybus: remove license "boilerplate"
    
    When the greybus drivers were converted to SPDX identifiers for the
    license text, some license boilerplate was not removed.  Clean this up
    by removing this unneeded text now.
    
    Cc: Johan Hovold <johan@kernel.org>
    Cc: Vaibhav Agarwal <vaibhav.sr@gmail.com>
    Cc: "Bryan O'Donoghue" <pure.logic@nexus-software.ie>
    Cc: greybus-dev@lists.linaro.org
    Cc: devel@driverdev.osuosl.org
    Acked-by: Mark Greer <mgreer@animalcreekk.com>
    Acked-by: Viresh Kumar <viresh.kumar@linaro.org>
    Acked-by: Alex Elder <elder@kernel.org>
    Link: https://lore.kernel.org/r/20190825055429.18547-3-gregkh@linuxfoundation.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/greybus/Documentation/firmware/firmware.c b/drivers/staging/greybus/Documentation/firmware/firmware.c
index 31d9c23e2eeb..765d69faa9cc 100644
--- a/drivers/staging/greybus/Documentation/firmware/firmware.c
+++ b/drivers/staging/greybus/Documentation/firmware/firmware.c
@@ -2,54 +2,8 @@
 /*
  * Sample code to test firmware-management protocol
  *
- * This file is provided under a dual BSD/GPLv2 license.  When using or
- * redistributing this file, you may do so under either license.
- *
- * GPL LICENSE SUMMARY
- *
  * Copyright(c) 2016 Google Inc. All rights reserved.
  * Copyright(c) 2016 Linaro Ltd. All rights reserved.
- *
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of version 2 of the GNU General Public License as
- * published by the Free Software Foundation.
- *
- * This program is distributed in the hope that it will be useful, but
- * WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
- * General Public License version 2 for more details.
- *
- * BSD LICENSE
- *
- * Copyright(c) 2016 Google Inc. All rights reserved.
- * Copyright(c) 2016 Linaro Ltd. All rights reserved.
- *
- * Redistribution and use in source and binary forms, with or without
- * modification, are permitted provided that the following conditions
- * are met:
- *
- *  * Redistributions of source code must retain the above copyright
- *    notice, this list of conditions and the following disclaimer.
- *  * Redistributions in binary form must reproduce the above copyright
- *    notice, this list of conditions and the following disclaimer in
- *    the documentation and/or other materials provided with the
- *    distribution.
- *  * Neither the name of Google Inc. or Linaro Ltd. nor the names of
- *    its contributors may be used to endorse or promote products
- *    derived from this software without specific prior written
- *    permission.
- *
- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
- * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
- * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
- * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL GOOGLE INC. OR
- * LINARO LTD. BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
- * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
- * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
- * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
- * OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
- * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
- * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  */
 
 #include <stdio.h>

commit eb50fd3a22c770f36be275295b782f3ea52e3215
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Tue Nov 7 14:58:41 2017 +0100

    staging: greybus: add SPDX identifiers to all greybus driver files
    
    It's good to have SPDX identifiers in all files to make it easier to
    audit the kernel tree for correct licenses.
    
    Update the drivers/staging/greybus files files with the correct SPDX
    license identifier based on the license text in the file itself.  The
    SPDX identifier is a legally binding shorthand, which can be used
    instead of the full boiler plate text.
    
    This work is based on a script and data from Thomas Gleixner, Philippe
    Ombredanne, and Kate Stewart.
    
    Cc: Vaibhav Hiremath <hvaibhav.linux@gmail.com>
    Cc: "Bryan O'Donoghue" <pure.logic@nexus-software.ie>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: Kate Stewart <kstewart@linuxfoundation.org>
    Cc: Philippe Ombredanne <pombredanne@nexb.com>
    Acked-by: Vaibhav Agarwal <vaibhav.sr@gmail.com>
    Acked-by: David Lin <dtwlin@gmail.com>
    Reviewed-by: Alex Elder <elder@linaro.org>
    Acked-by: Johan Hovold <johan@kernel.org>
    Acked-by: Viresh Kumar <viresh.kumar@linaro.org>
    Acked-by: Mark Greer <mgreer@animalcreek.com>
    Acked-by: Rui Miguel Silva <rmfrfs@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/greybus/Documentation/firmware/firmware.c b/drivers/staging/greybus/Documentation/firmware/firmware.c
index c73dee9d13c1..31d9c23e2eeb 100644
--- a/drivers/staging/greybus/Documentation/firmware/firmware.c
+++ b/drivers/staging/greybus/Documentation/firmware/firmware.c
@@ -1,3 +1,4 @@
+// SPDX-License-Identifier: (GPL-2.0 OR BSD-3-Clause)
 /*
  * Sample code to test firmware-management protocol
  *

commit 4da14d5922e99dbbd609a85b18f84c32d1c27a57
Author: Michael Sartain <mikesart@fastmail.com>
Date:   Thu Mar 9 09:58:06 2017 -0700

    staging: greybus: firmware: Convert sscanf calls to strtoul
    
    Also convert the fw_update_type and fw_timeout variables to
    unsigned and update the printf specifier to %u.
    
    The FW_MGMT_IOC_SET_TIMEOUT_MS ioctl takes an unsigned int
    and checkpatch was complaining about not checking the sscanf
    return values.
    
    Signed-off-by: Michael Sartain <mikesart@fastmail.com>
    Acked-by: Viresh Kumar <viresh.kumar at linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/greybus/Documentation/firmware/firmware.c b/drivers/staging/greybus/Documentation/firmware/firmware.c
index 70b7fcbba5ad..c73dee9d13c1 100644
--- a/drivers/staging/greybus/Documentation/firmware/firmware.c
+++ b/drivers/staging/greybus/Documentation/firmware/firmware.c
@@ -52,6 +52,7 @@
  */
 
 #include <stdio.h>
+#include <stdlib.h>
 #include <string.h>
 #include <unistd.h>
 #include <sys/ioctl.h>
@@ -68,8 +69,8 @@
 
 static const char *firmware_tag;
 static const char *fwdev = FW_DEV_DEFAULT;
-static int fw_update_type = FW_UPDATE_TYPE_DEFAULT;
-static int fw_timeout = FW_TIMEOUT_DEFAULT;
+static unsigned int fw_update_type = FW_UPDATE_TYPE_DEFAULT;
+static unsigned int fw_timeout = FW_TIMEOUT_DEFAULT;
 
 static struct fw_mgmt_ioc_get_intf_version intf_fw_info;
 static struct fw_mgmt_ioc_get_backend_version backend_fw_info;
@@ -204,6 +205,7 @@ static int update_backend_firmware(int fd)
 int main(int argc, char *argv[])
 {
 	int fd, ret;
+	char *endptr;
 
 	if (argc > 1 &&
 	    (!strcmp(argv[1], "-h") || !strcmp(argv[1], "--help"))) {
@@ -215,7 +217,7 @@ int main(int argc, char *argv[])
 		fwdev = argv[1];
 
 	if (argc > 2)
-		sscanf(argv[2], "%u", &fw_update_type);
+		fw_update_type = strtoul(argv[2], &endptr, 10);
 
 	if (argc > 3)
 		firmware_tag = argv[3];
@@ -225,9 +227,9 @@ int main(int argc, char *argv[])
 		firmware_tag = FW_TAG_BCND_DEFAULT;
 
 	if (argc > 4)
-		sscanf(argv[4], "%u", &fw_timeout);
+		fw_timeout = strtoul(argv[4], &endptr, 10);
 
-	printf("Trying Firmware update: fwdev: %s, type: %s, tag: %s, timeout: %d\n",
+	printf("Trying Firmware update: fwdev: %s, type: %s, tag: %s, timeout: %u\n",
 		fwdev, fw_update_type == 0 ? "interface" : "backend",
 		firmware_tag, fw_timeout);
 

commit 5099c4c4a6edca35a50d27016091f37002e86d4a
Author: Michael Sartain <mikesart@fastmail.com>
Date:   Thu Mar 9 09:58:04 2017 -0700

    staging: greybus: firmware: Remove extra braces from single line if
    
    Fixes checkpatch warning:
      braces {} are not necessary for any arm of this statement
    
    Signed-off-by: Michael Sartain <mikesart@fastmail.com>
    Acked-by: Viresh Kumar <viresh.kumar at linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/greybus/Documentation/firmware/firmware.c b/drivers/staging/greybus/Documentation/firmware/firmware.c
index 10ef86120815..70b7fcbba5ad 100644
--- a/drivers/staging/greybus/Documentation/firmware/firmware.c
+++ b/drivers/staging/greybus/Documentation/firmware/firmware.c
@@ -217,13 +217,12 @@ int main(int argc, char *argv[])
 	if (argc > 2)
 		sscanf(argv[2], "%u", &fw_update_type);
 
-	if (argc > 3) {
+	if (argc > 3)
 		firmware_tag = argv[3];
-	} else if (!fw_update_type) {
+	else if (!fw_update_type)
 		firmware_tag = FW_TAG_INT_DEFAULT;
-	} else {
+	else
 		firmware_tag = FW_TAG_BCND_DEFAULT;
-	}
 
 	if (argc > 4)
 		sscanf(argv[4], "%u", &fw_timeout);

commit 0c3801875c526b16fcd4719cd728e45ed092f9dd
Author: Michael Sartain <mikesart@fastmail.com>
Date:   Thu Mar 9 09:58:03 2017 -0700

    staging: greybus: firmware: Remove trailing semicolon from FW_TIMEOUT_DEFAULT
    
    Fixes checkpatch warning:
      macros should not use a trailing semicolon
    
    Signed-off-by: Michael Sartain <mikesart@fastmail.com>
    Acked-by: Viresh Kumar <viresh.kumar at linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/greybus/Documentation/firmware/firmware.c b/drivers/staging/greybus/Documentation/firmware/firmware.c
index ff9382401030..10ef86120815 100644
--- a/drivers/staging/greybus/Documentation/firmware/firmware.c
+++ b/drivers/staging/greybus/Documentation/firmware/firmware.c
@@ -64,7 +64,7 @@
 #define FW_TAG_INT_DEFAULT	"s3f"
 #define FW_TAG_BCND_DEFAULT	"bf_01"
 #define FW_UPDATE_TYPE_DEFAULT	0
-#define FW_TIMEOUT_DEFAULT	10000;
+#define FW_TIMEOUT_DEFAULT	10000
 
 static const char *firmware_tag;
 static const char *fwdev = FW_DEV_DEFAULT;

commit b2abeaa10d5711e7730bb07120dd60ae27d7b930
Author: Viresh Kumar <viresh.kumar@linaro.org>
Date:   Thu Aug 11 13:27:23 2016 -0700

    greybus: firmware: s/_LEN/_SIZE
    
    Alex Elder pointed out that the macros also count the trailing NULL
    ('\0') character and so it should be using SIZE instead of LEN.
    
    This patch makes that change.
    
    Reported-by: Alex Elder <alex.elder@linaro.org>
    Signed-off-by: Viresh Kumar <viresh.kumar@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@google.com>

diff --git a/drivers/staging/greybus/Documentation/firmware/firmware.c b/drivers/staging/greybus/Documentation/firmware/firmware.c
index 5170886f8afb..ff9382401030 100644
--- a/drivers/staging/greybus/Documentation/firmware/firmware.c
+++ b/drivers/staging/greybus/Documentation/firmware/firmware.c
@@ -108,7 +108,7 @@ static int update_intf_firmware(int fd)
 	intf_load.minor = 0;
 
 	strncpy((char *)&intf_load.firmware_tag, firmware_tag,
-		GB_FIRMWARE_U_TAG_MAX_LEN);
+		GB_FIRMWARE_U_TAG_MAX_SIZE);
 
 	ret = ioctl(fd, FW_MGMT_IOC_INTF_LOAD_AND_VALIDATE, &intf_load);
 	if (ret < 0) {
@@ -146,7 +146,7 @@ static int update_backend_firmware(int fd)
 	printf("Getting Backend Firmware Version\n");
 
 	strncpy((char *)&backend_fw_info.firmware_tag, firmware_tag,
-		GB_FIRMWARE_U_TAG_MAX_LEN);
+		GB_FIRMWARE_U_TAG_MAX_SIZE);
 
 retry_fw_version:
 	ret = ioctl(fd, FW_MGMT_IOC_GET_BACKEND_FW, &backend_fw_info);
@@ -174,7 +174,7 @@ static int update_backend_firmware(int fd)
 	printf("Updating Backend Firmware\n");
 
 	strncpy((char *)&backend_update.firmware_tag, firmware_tag,
-		GB_FIRMWARE_U_TAG_MAX_LEN);
+		GB_FIRMWARE_U_TAG_MAX_SIZE);
 
 retry_fw_update:
 	backend_update.status = 0;

commit 6136cce89ca5d344d5183d36e887f0ff46896f1c
Author: Viresh Kumar <viresh.kumar@linaro.org>
Date:   Mon Jul 25 14:38:09 2016 -0700

    greybus: firmware: Update Documentation and sample application
    
    Update documentation and sample application to capture the 'status' byte
    in backend version operation and new error types in backend firmware
    update operation.
    
    Signed-off-by: Viresh Kumar <viresh.kumar@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@google.com>

diff --git a/drivers/staging/greybus/Documentation/firmware/firmware.c b/drivers/staging/greybus/Documentation/firmware/firmware.c
index c557bf1ec493..5170886f8afb 100644
--- a/drivers/staging/greybus/Documentation/firmware/firmware.c
+++ b/drivers/staging/greybus/Documentation/firmware/firmware.c
@@ -71,7 +71,8 @@ static const char *fwdev = FW_DEV_DEFAULT;
 static int fw_update_type = FW_UPDATE_TYPE_DEFAULT;
 static int fw_timeout = FW_TIMEOUT_DEFAULT;
 
-static struct fw_mgmt_ioc_get_fw fw_info;
+static struct fw_mgmt_ioc_get_intf_version intf_fw_info;
+static struct fw_mgmt_ioc_get_backend_version backend_fw_info;
 static struct fw_mgmt_ioc_intf_load_and_validate intf_load;
 static struct fw_mgmt_ioc_backend_fw_update backend_update;
 
@@ -87,7 +88,7 @@ static int update_intf_firmware(int fd)
 	/* Get Interface Firmware Version */
 	printf("Get Interface Firmware Version\n");
 
-	ret = ioctl(fd, FW_MGMT_IOC_GET_INTF_FW, &fw_info);
+	ret = ioctl(fd, FW_MGMT_IOC_GET_INTF_FW, &intf_fw_info);
 	if (ret < 0) {
 		printf("Failed to get interface firmware version: %s (%d)\n",
 			fwdev, ret);
@@ -95,7 +96,8 @@ static int update_intf_firmware(int fd)
 	}
 
 	printf("Interface Firmware tag (%s), major (%d), minor (%d)\n",
-		fw_info.firmware_tag, fw_info.major, fw_info.minor);
+		intf_fw_info.firmware_tag, intf_fw_info.major,
+		intf_fw_info.minor);
 
 	/* Try Interface Firmware load over Unipro */
 	printf("Loading Interface Firmware\n");
@@ -143,34 +145,51 @@ static int update_backend_firmware(int fd)
 	/* Get Backend Firmware Version */
 	printf("Getting Backend Firmware Version\n");
 
-	fw_info.major = 0;
-	fw_info.minor = 0;
-	strncpy((char *)&fw_info.firmware_tag, firmware_tag,
+	strncpy((char *)&backend_fw_info.firmware_tag, firmware_tag,
 		GB_FIRMWARE_U_TAG_MAX_LEN);
 
-	ret = ioctl(fd, FW_MGMT_IOC_GET_BACKEND_FW, &fw_info);
+retry_fw_version:
+	ret = ioctl(fd, FW_MGMT_IOC_GET_BACKEND_FW, &backend_fw_info);
 	if (ret < 0) {
 		printf("Failed to get backend firmware version: %s (%d)\n",
 			fwdev, ret);
 		return -1;
 	}
 
-	printf("Backend Firmware tag (%s), major (%d), minor (%d)\n",
-		fw_info.firmware_tag, fw_info.major, fw_info.minor);
+	printf("Backend Firmware tag (%s), major (%d), minor (%d), status (%d)\n",
+		backend_fw_info.firmware_tag, backend_fw_info.major,
+		backend_fw_info.minor, backend_fw_info.status);
+
+	if (backend_fw_info.status == GB_FW_U_BACKEND_VERSION_STATUS_RETRY)
+		goto retry_fw_version;
+
+	if ((backend_fw_info.status != GB_FW_U_BACKEND_VERSION_STATUS_SUCCESS)
+	    && (backend_fw_info.status != GB_FW_U_BACKEND_VERSION_STATUS_NOT_AVAILABLE)) {
+		printf("Failed to get backend firmware version: %s (%d)\n",
+			fwdev, backend_fw_info.status);
+		return -1;
+	}
 
 	/* Try Backend Firmware Update over Unipro */
 	printf("Updating Backend Firmware\n");
 
-	backend_update.status = 0;
 	strncpy((char *)&backend_update.firmware_tag, firmware_tag,
 		GB_FIRMWARE_U_TAG_MAX_LEN);
 
+retry_fw_update:
+	backend_update.status = 0;
+
 	ret = ioctl(fd, FW_MGMT_IOC_INTF_BACKEND_FW_UPDATE, &backend_update);
 	if (ret < 0) {
 		printf("Failed to load backend firmware: %s (%d)\n", fwdev, ret);
 		return -1;
 	}
 
+	if (backend_update.status == GB_FW_U_BACKEND_FW_STATUS_RETRY) {
+		printf("Retrying firmware update: %d\n", backend_update.status);
+		goto retry_fw_update;
+	}
+
 	if (backend_update.status != GB_FW_U_BACKEND_FW_STATUS_SUCCESS) {
 		printf("Load status says loading failed: %d\n",
 			backend_update.status);

commit adac4b95941189ca301759a67da4a132fc2804d5
Author: Viresh Kumar <viresh.kumar@linaro.org>
Date:   Wed Jul 20 16:39:00 2016 -0700

    greybus: firmware: Improve test application
    
    It can take arguments not and we can perform all the operations with a
    single binary, sorry for missing that initially.
    
    Usage: ./firmware <gb-fw-mgmt-X> <type: interface/backend> <firmware-tag> <timeout>
    
    And all of them have default values, etc.
    
    Tested with a semco 13 MP module.
    
    Signed-off-by: Viresh Kumar <viresh.kumar@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@google.com>

diff --git a/drivers/staging/greybus/Documentation/firmware/firmware.c b/drivers/staging/greybus/Documentation/firmware/firmware.c
index 3c305f774939..c557bf1ec493 100644
--- a/drivers/staging/greybus/Documentation/firmware/firmware.c
+++ b/drivers/staging/greybus/Documentation/firmware/firmware.c
@@ -60,44 +60,29 @@
 
 #include "../../greybus_firmware.h"
 
-static const char *firmware_tag = "03";	/* S3 firmware */
+#define FW_DEV_DEFAULT		"/dev/gb-fw-mgmt-0"
+#define FW_TAG_INT_DEFAULT	"s3f"
+#define FW_TAG_BCND_DEFAULT	"bf_01"
+#define FW_UPDATE_TYPE_DEFAULT	0
+#define FW_TIMEOUT_DEFAULT	10000;
+
+static const char *firmware_tag;
+static const char *fwdev = FW_DEV_DEFAULT;
+static int fw_update_type = FW_UPDATE_TYPE_DEFAULT;
+static int fw_timeout = FW_TIMEOUT_DEFAULT;
 
 static struct fw_mgmt_ioc_get_fw fw_info;
 static struct fw_mgmt_ioc_intf_load_and_validate intf_load;
 static struct fw_mgmt_ioc_backend_fw_update backend_update;
 
-int main(int argc, char *argv[])
+static void usage(void)
 {
-	unsigned int timeout = 10000;
-	char *fwdev;
-	int fd, ret;
-
-	/* Make sure arguments are correct */
-	if (argc != 2) {
-		printf("\nUsage: ./firmware <Path of the gb-fw-mgmt-X dev>\n");
-		return 0;
-	}
-
-	fwdev = argv[1];
-
-	printf("Opening %s firmware management device\n", fwdev);
-
-	fd = open(fwdev, O_RDWR);
-	if (fd < 0) {
-		printf("Failed to open: %s\n", fwdev);
-		ret = -1;
-		goto close_fd;
-	}
-
-	/* Set Timeout */
-	printf("Setting timeout to %u ms\n", timeout);
+	printf("\nUsage: ./firmware <gb-fw-mgmt-X (default: gb-fw-mgmt-0)> <interface: 0, backend: 1 (default: 0)> <firmware-tag> (default: \"s3f\"/\"bf_01\") <timeout (default: 10000 ms)>\n");
+}
 
-	ret = ioctl(fd, FW_MGMT_IOC_SET_TIMEOUT_MS, &timeout);
-	if (ret < 0) {
-		printf("Failed to set timeout: %s (%d)\n", fwdev, ret);
-		ret = -1;
-		goto close_fd;
-	}
+static int update_intf_firmware(int fd)
+{
+	int ret;
 
 	/* Get Interface Firmware Version */
 	printf("Get Interface Firmware Version\n");
@@ -106,8 +91,7 @@ int main(int argc, char *argv[])
 	if (ret < 0) {
 		printf("Failed to get interface firmware version: %s (%d)\n",
 			fwdev, ret);
-		ret = -1;
-		goto close_fd;
+		return -1;
 	}
 
 	printf("Interface Firmware tag (%s), major (%d), minor (%d)\n",
@@ -120,6 +104,7 @@ int main(int argc, char *argv[])
 	intf_load.status = 0;
 	intf_load.major = 0;
 	intf_load.minor = 0;
+
 	strncpy((char *)&intf_load.firmware_tag, firmware_tag,
 		GB_FIRMWARE_U_TAG_MAX_LEN);
 
@@ -127,35 +112,47 @@ int main(int argc, char *argv[])
 	if (ret < 0) {
 		printf("Failed to load interface firmware: %s (%d)\n", fwdev,
 			ret);
-		ret = -1;
-		goto close_fd;
+		return -1;
 	}
 
 	if (intf_load.status != GB_FW_U_LOAD_STATUS_VALIDATED &&
 	    intf_load.status != GB_FW_U_LOAD_STATUS_UNVALIDATED) {
 		printf("Load status says loading failed: %d\n",
 			intf_load.status);
-		ret = -1;
-		goto close_fd;
+		return -1;
 	}
 
 	printf("Interface Firmware (%s) Load done: major: %d, minor: %d, status: %d\n",
 		firmware_tag, intf_load.major, intf_load.minor,
 		intf_load.status);
 
+	/* Initiate Mode-switch to the newly loaded firmware */
+	printf("Initiate Mode switch\n");
+
+	ret = ioctl(fd, FW_MGMT_IOC_MODE_SWITCH);
+	if (ret < 0)
+		printf("Failed to initiate mode-switch (%d)\n", ret);
+
+	return ret;
+}
+
+static int update_backend_firmware(int fd)
+{
+	int ret;
+
 	/* Get Backend Firmware Version */
 	printf("Getting Backend Firmware Version\n");
 
-	strncpy((char *)&fw_info.firmware_tag, firmware_tag,
-		GB_FIRMWARE_U_TAG_MAX_LEN);
 	fw_info.major = 0;
 	fw_info.minor = 0;
+	strncpy((char *)&fw_info.firmware_tag, firmware_tag,
+		GB_FIRMWARE_U_TAG_MAX_LEN);
 
 	ret = ioctl(fd, FW_MGMT_IOC_GET_BACKEND_FW, &fw_info);
 	if (ret < 0) {
 		printf("Failed to get backend firmware version: %s (%d)\n",
 			fwdev, ret);
-		goto mode_switch;
+		return -1;
 	}
 
 	printf("Backend Firmware tag (%s), major (%d), minor (%d)\n",
@@ -171,24 +168,73 @@ int main(int argc, char *argv[])
 	ret = ioctl(fd, FW_MGMT_IOC_INTF_BACKEND_FW_UPDATE, &backend_update);
 	if (ret < 0) {
 		printf("Failed to load backend firmware: %s (%d)\n", fwdev, ret);
-		goto mode_switch;
+		return -1;
 	}
 
-	printf("Backend Firmware (%s) Load done: status: %d\n",
-		firmware_tag, backend_update.status);
-
 	if (backend_update.status != GB_FW_U_BACKEND_FW_STATUS_SUCCESS) {
 		printf("Load status says loading failed: %d\n",
 			backend_update.status);
+	} else {
+		printf("Backend Firmware (%s) Load done: status: %d\n",
+				firmware_tag, backend_update.status);
 	}
 
-mode_switch:
-	/* Initiate Mode-switch to the newly loaded firmware */
-	printf("Initiate Mode switch\n");
+	return 0;
+}
 
-	ret = ioctl(fd, FW_MGMT_IOC_MODE_SWITCH);
-	if (ret < 0)
-		printf("Failed to initiate mode-switch (%d)\n", ret);
+int main(int argc, char *argv[])
+{
+	int fd, ret;
+
+	if (argc > 1 &&
+	    (!strcmp(argv[1], "-h") || !strcmp(argv[1], "--help"))) {
+		usage();
+		return -1;
+	}
+
+	if (argc > 1)
+		fwdev = argv[1];
+
+	if (argc > 2)
+		sscanf(argv[2], "%u", &fw_update_type);
+
+	if (argc > 3) {
+		firmware_tag = argv[3];
+	} else if (!fw_update_type) {
+		firmware_tag = FW_TAG_INT_DEFAULT;
+	} else {
+		firmware_tag = FW_TAG_BCND_DEFAULT;
+	}
+
+	if (argc > 4)
+		sscanf(argv[4], "%u", &fw_timeout);
+
+	printf("Trying Firmware update: fwdev: %s, type: %s, tag: %s, timeout: %d\n",
+		fwdev, fw_update_type == 0 ? "interface" : "backend",
+		firmware_tag, fw_timeout);
+
+	printf("Opening %s firmware management device\n", fwdev);
+
+	fd = open(fwdev, O_RDWR);
+	if (fd < 0) {
+		printf("Failed to open: %s\n", fwdev);
+		return -1;
+	}
+
+	/* Set Timeout */
+	printf("Setting timeout to %u ms\n", fw_timeout);
+
+	ret = ioctl(fd, FW_MGMT_IOC_SET_TIMEOUT_MS, &fw_timeout);
+	if (ret < 0) {
+		printf("Failed to set timeout: %s (%d)\n", fwdev, ret);
+		ret = -1;
+		goto close_fd;
+	}
+
+	if (!fw_update_type)
+		ret = update_intf_firmware(fd);
+	else
+		ret = update_backend_firmware(fd);
 
 close_fd:
 	close(fd);

commit 4ee48a5ecb7a3af272ac2c6cd6a0865b95a3d5f2
Author: Viresh Kumar <viresh.kumar@linaro.org>
Date:   Wed Jun 15 15:58:22 2016 +0530

    greybus: firmware: prefix char-device with 'gb-'
    
    This will make it consistent with any other character devices we have
    for greybus and let us identify greybus character devices easily.
    
    Compiled tested only.
    
    Signed-off-by: Viresh Kumar <viresh.kumar@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@google.com>

diff --git a/drivers/staging/greybus/Documentation/firmware/firmware.c b/drivers/staging/greybus/Documentation/firmware/firmware.c
index 4a3782e07d71..3c305f774939 100644
--- a/drivers/staging/greybus/Documentation/firmware/firmware.c
+++ b/drivers/staging/greybus/Documentation/firmware/firmware.c
@@ -74,7 +74,7 @@ int main(int argc, char *argv[])
 
 	/* Make sure arguments are correct */
 	if (argc != 2) {
-		printf("\nUsage: ./firmware <Path of the fw-mgmt-X dev>\n");
+		printf("\nUsage: ./firmware <Path of the gb-fw-mgmt-X dev>\n");
 		return 0;
 	}
 

commit df124299d1d3e64175c79f83b4ecf2710d202e49
Author: Viresh Kumar <viresh.kumar@linaro.org>
Date:   Thu Jun 16 10:03:57 2016 +0530

    greybus: firmware: Add license and copyright header to application
    
    Add license and copyright header to the firmware.c test application.
    
    Signed-off-by: Viresh Kumar <viresh.kumar@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@google.com>

diff --git a/drivers/staging/greybus/Documentation/firmware/firmware.c b/drivers/staging/greybus/Documentation/firmware/firmware.c
index e36786013ead..4a3782e07d71 100644
--- a/drivers/staging/greybus/Documentation/firmware/firmware.c
+++ b/drivers/staging/greybus/Documentation/firmware/firmware.c
@@ -1,4 +1,55 @@
-/* Sample code to test firmware-management protocol */
+/*
+ * Sample code to test firmware-management protocol
+ *
+ * This file is provided under a dual BSD/GPLv2 license.  When using or
+ * redistributing this file, you may do so under either license.
+ *
+ * GPL LICENSE SUMMARY
+ *
+ * Copyright(c) 2016 Google Inc. All rights reserved.
+ * Copyright(c) 2016 Linaro Ltd. All rights reserved.
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of version 2 of the GNU General Public License as
+ * published by the Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful, but
+ * WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * General Public License version 2 for more details.
+ *
+ * BSD LICENSE
+ *
+ * Copyright(c) 2016 Google Inc. All rights reserved.
+ * Copyright(c) 2016 Linaro Ltd. All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ *  * Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ *  * Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in
+ *    the documentation and/or other materials provided with the
+ *    distribution.
+ *  * Neither the name of Google Inc. or Linaro Ltd. nor the names of
+ *    its contributors may be used to endorse or promote products
+ *    derived from this software without specific prior written
+ *    permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+ * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL GOOGLE INC. OR
+ * LINARO LTD. BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
+ * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
+ * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
+ * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
+ * OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+ * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
 
 #include <stdio.h>
 #include <string.h>

commit 7bf7fa12fcb24fccb99d7957e44b8be6e0b82986
Author: Viresh Kumar <viresh.kumar@linaro.org>
Date:   Sat May 14 23:42:25 2016 +0530

    greybus: Documentation: Document firmware-management interfaces
    
    This patch adds a new 'firmware' folder in Documentation, which contains
    two files:
    
    - firmware-management: This describes the userspace interface for
      interacting with firmware-management bundle.
    
    - firmware.c: Sample application to test firmware load for Interface
      Firmware and firmware updates to Backend Interface Firmware.
    
    Signed-off-by: Viresh Kumar <viresh.kumar@linaro.org>
    Reviewed-by: Jun Li <li_jun@projectara.com>
    Tested-by: Karthik Ravi Shankar <karthikrs@google.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@google.com>

diff --git a/drivers/staging/greybus/Documentation/firmware/firmware.c b/drivers/staging/greybus/Documentation/firmware/firmware.c
new file mode 100644
index 000000000000..e36786013ead
--- /dev/null
+++ b/drivers/staging/greybus/Documentation/firmware/firmware.c
@@ -0,0 +1,146 @@
+/* Sample code to test firmware-management protocol */
+
+#include <stdio.h>
+#include <string.h>
+#include <unistd.h>
+#include <sys/ioctl.h>
+#include <sys/stat.h>
+#include <fcntl.h>
+
+#include "../../greybus_firmware.h"
+
+static const char *firmware_tag = "03";	/* S3 firmware */
+
+static struct fw_mgmt_ioc_get_fw fw_info;
+static struct fw_mgmt_ioc_intf_load_and_validate intf_load;
+static struct fw_mgmt_ioc_backend_fw_update backend_update;
+
+int main(int argc, char *argv[])
+{
+	unsigned int timeout = 10000;
+	char *fwdev;
+	int fd, ret;
+
+	/* Make sure arguments are correct */
+	if (argc != 2) {
+		printf("\nUsage: ./firmware <Path of the fw-mgmt-X dev>\n");
+		return 0;
+	}
+
+	fwdev = argv[1];
+
+	printf("Opening %s firmware management device\n", fwdev);
+
+	fd = open(fwdev, O_RDWR);
+	if (fd < 0) {
+		printf("Failed to open: %s\n", fwdev);
+		ret = -1;
+		goto close_fd;
+	}
+
+	/* Set Timeout */
+	printf("Setting timeout to %u ms\n", timeout);
+
+	ret = ioctl(fd, FW_MGMT_IOC_SET_TIMEOUT_MS, &timeout);
+	if (ret < 0) {
+		printf("Failed to set timeout: %s (%d)\n", fwdev, ret);
+		ret = -1;
+		goto close_fd;
+	}
+
+	/* Get Interface Firmware Version */
+	printf("Get Interface Firmware Version\n");
+
+	ret = ioctl(fd, FW_MGMT_IOC_GET_INTF_FW, &fw_info);
+	if (ret < 0) {
+		printf("Failed to get interface firmware version: %s (%d)\n",
+			fwdev, ret);
+		ret = -1;
+		goto close_fd;
+	}
+
+	printf("Interface Firmware tag (%s), major (%d), minor (%d)\n",
+		fw_info.firmware_tag, fw_info.major, fw_info.minor);
+
+	/* Try Interface Firmware load over Unipro */
+	printf("Loading Interface Firmware\n");
+
+	intf_load.load_method = GB_FW_U_LOAD_METHOD_UNIPRO;
+	intf_load.status = 0;
+	intf_load.major = 0;
+	intf_load.minor = 0;
+	strncpy((char *)&intf_load.firmware_tag, firmware_tag,
+		GB_FIRMWARE_U_TAG_MAX_LEN);
+
+	ret = ioctl(fd, FW_MGMT_IOC_INTF_LOAD_AND_VALIDATE, &intf_load);
+	if (ret < 0) {
+		printf("Failed to load interface firmware: %s (%d)\n", fwdev,
+			ret);
+		ret = -1;
+		goto close_fd;
+	}
+
+	if (intf_load.status != GB_FW_U_LOAD_STATUS_VALIDATED &&
+	    intf_load.status != GB_FW_U_LOAD_STATUS_UNVALIDATED) {
+		printf("Load status says loading failed: %d\n",
+			intf_load.status);
+		ret = -1;
+		goto close_fd;
+	}
+
+	printf("Interface Firmware (%s) Load done: major: %d, minor: %d, status: %d\n",
+		firmware_tag, intf_load.major, intf_load.minor,
+		intf_load.status);
+
+	/* Get Backend Firmware Version */
+	printf("Getting Backend Firmware Version\n");
+
+	strncpy((char *)&fw_info.firmware_tag, firmware_tag,
+		GB_FIRMWARE_U_TAG_MAX_LEN);
+	fw_info.major = 0;
+	fw_info.minor = 0;
+
+	ret = ioctl(fd, FW_MGMT_IOC_GET_BACKEND_FW, &fw_info);
+	if (ret < 0) {
+		printf("Failed to get backend firmware version: %s (%d)\n",
+			fwdev, ret);
+		goto mode_switch;
+	}
+
+	printf("Backend Firmware tag (%s), major (%d), minor (%d)\n",
+		fw_info.firmware_tag, fw_info.major, fw_info.minor);
+
+	/* Try Backend Firmware Update over Unipro */
+	printf("Updating Backend Firmware\n");
+
+	backend_update.status = 0;
+	strncpy((char *)&backend_update.firmware_tag, firmware_tag,
+		GB_FIRMWARE_U_TAG_MAX_LEN);
+
+	ret = ioctl(fd, FW_MGMT_IOC_INTF_BACKEND_FW_UPDATE, &backend_update);
+	if (ret < 0) {
+		printf("Failed to load backend firmware: %s (%d)\n", fwdev, ret);
+		goto mode_switch;
+	}
+
+	printf("Backend Firmware (%s) Load done: status: %d\n",
+		firmware_tag, backend_update.status);
+
+	if (backend_update.status != GB_FW_U_BACKEND_FW_STATUS_SUCCESS) {
+		printf("Load status says loading failed: %d\n",
+			backend_update.status);
+	}
+
+mode_switch:
+	/* Initiate Mode-switch to the newly loaded firmware */
+	printf("Initiate Mode switch\n");
+
+	ret = ioctl(fd, FW_MGMT_IOC_MODE_SWITCH);
+	if (ret < 0)
+		printf("Failed to initiate mode-switch (%d)\n", ret);
+
+close_fd:
+	close(fd);
+
+	return ret;
+}
