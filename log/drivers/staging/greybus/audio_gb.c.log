commit ec0ad868173da8a75121f9dc116a5d5478ff614d
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Sun Aug 25 07:54:27 2019 +0200

    staging: greybus: move core include files to include/linux/greybus/
    
    With the goal of moving the core of the greybus code out of staging, the
    include files need to be moved to include/linux/greybus.h and
    include/linux/greybus/
    
    Cc: Vaibhav Hiremath <hvaibhav.linux@gmail.com>
    Cc: Johan Hovold <johan@kernel.org>
    Cc: Vaibhav Agarwal <vaibhav.sr@gmail.com>
    Cc: Rui Miguel Silva <rmfrfs@gmail.com>
    Cc: David Lin <dtwlin@gmail.com>
    Cc: "Bryan O'Donoghue" <pure.logic@nexus-software.ie>
    Cc: greybus-dev@lists.linaro.org
    Cc: devel@driverdev.osuosl.org
    Acked-by: Mark Greer <mgreer@animalcreek.com>
    Acked-by: Viresh Kumar <viresh.kumar@linaro.org>
    Acked-by: Alex Elder <elder@kernel.org>
    Link: https://lore.kernel.org/r/20190825055429.18547-8-gregkh@linuxfoundation.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/greybus/audio_gb.c b/drivers/staging/greybus/audio_gb.c
index 8894f1c87d48..9d8994fdb41a 100644
--- a/drivers/staging/greybus/audio_gb.c
+++ b/drivers/staging/greybus/audio_gb.c
@@ -5,9 +5,7 @@
  * Copyright 2015-2016 Google Inc.
  */
 
-#include "greybus.h"
-#include "greybus_protocols.h"
-#include "operation.h"
+#include <linux/greybus.h>
 #include "audio_codec.h"
 
 /* TODO: Split into separate calls */

commit 863dbc52e7f0e5acd7b4883f3933543a81c474c7
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Tue Nov 7 14:58:42 2017 +0100

    staging: greybus: Remove redundant license text
    
    Now that the SPDX tag is in all greybus files, that identifies the
    license in a specific and legally-defined manner.  So the extra GPL text
    wording can be removed as it is no longer needed at all.
    
    This is done on a quest to remove the 700+ different ways that files in
    the kernel describe the GPL license text.  And there's unneeded stuff
    like the address (sometimes incorrect) for the FSF which is never
    needed.
    
    No copyright headers or other non-license-description text was removed.
    
    Cc: Vaibhav Hiremath <hvaibhav.linux@gmail.com>
    Reviewed-by: Alex Elder <elder@linaro.org>
    Acked-by: Vaibhav Agarwal <vaibhav.sr@gmail.com>
    Acked-by: David Lin <dtwlin@gmail.com>
    Acked-by: Johan Hovold <johan@kernel.org>
    Acked-by: Viresh Kumar <viresh.kumar@linaro.org>
    Acked-by: Mark Greer <mgreer@animalcreek.com>
    Acked-by: Rui Miguel Silva <rmfrfs@gmail.com>
    Acked-by: "Bryan O'Donoghue" <pure.logic@nexus-software.ie>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/greybus/audio_gb.c b/drivers/staging/greybus/audio_gb.c
index fde86b45ef06..8894f1c87d48 100644
--- a/drivers/staging/greybus/audio_gb.c
+++ b/drivers/staging/greybus/audio_gb.c
@@ -3,8 +3,6 @@
  * Greybus Audio Device Class Protocol helpers
  *
  * Copyright 2015-2016 Google Inc.
- *
- * Released under the GPLv2 only.
  */
 
 #include "greybus.h"

commit eb50fd3a22c770f36be275295b782f3ea52e3215
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Tue Nov 7 14:58:41 2017 +0100

    staging: greybus: add SPDX identifiers to all greybus driver files
    
    It's good to have SPDX identifiers in all files to make it easier to
    audit the kernel tree for correct licenses.
    
    Update the drivers/staging/greybus files files with the correct SPDX
    license identifier based on the license text in the file itself.  The
    SPDX identifier is a legally binding shorthand, which can be used
    instead of the full boiler plate text.
    
    This work is based on a script and data from Thomas Gleixner, Philippe
    Ombredanne, and Kate Stewart.
    
    Cc: Vaibhav Hiremath <hvaibhav.linux@gmail.com>
    Cc: "Bryan O'Donoghue" <pure.logic@nexus-software.ie>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: Kate Stewart <kstewart@linuxfoundation.org>
    Cc: Philippe Ombredanne <pombredanne@nexb.com>
    Acked-by: Vaibhav Agarwal <vaibhav.sr@gmail.com>
    Acked-by: David Lin <dtwlin@gmail.com>
    Reviewed-by: Alex Elder <elder@linaro.org>
    Acked-by: Johan Hovold <johan@kernel.org>
    Acked-by: Viresh Kumar <viresh.kumar@linaro.org>
    Acked-by: Mark Greer <mgreer@animalcreek.com>
    Acked-by: Rui Miguel Silva <rmfrfs@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/greybus/audio_gb.c b/drivers/staging/greybus/audio_gb.c
index 7884d8482dc0..fde86b45ef06 100644
--- a/drivers/staging/greybus/audio_gb.c
+++ b/drivers/staging/greybus/audio_gb.c
@@ -1,3 +1,4 @@
+// SPDX-License-Identifier: GPL-2.0
 /*
  * Greybus Audio Device Class Protocol helpers
  *

commit 41a5d7c0085379c6f147ade7c9e1e15ed6bd9d36
Author: Marcos Paulo de Souza <marcos.souza.org@gmail.com>
Date:   Sun Jan 22 15:49:21 2017 -0200

    staging: greybus: audio_gb.c: Change uint32_t to u32
    
    Change uint32_t to u32, solved the issue reported by checkpatch.pl:
    
    CHECK: Prefer kernel type 'u32' over 'uint32_t'
    +                       uint32_t *format, uint32_t *rate, u8 *channels,
    
    CHECK: Prefer kernel type 'u32' over 'uint32_t'
    +                       uint32_t format, uint32_t rate, u8 channels,
    
    Signed-off-by: Marcos Paulo de Souza <marcos.souza.org@gmail.com>
    Acked-by: Mark Greer <mgreer@animalcreek.com>
    Acked-by: Vaibhav Agarwal <vaibhav.sr@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/greybus/audio_gb.c b/drivers/staging/greybus/audio_gb.c
index 42f287dd7b84..7884d8482dc0 100644
--- a/drivers/staging/greybus/audio_gb.c
+++ b/drivers/staging/greybus/audio_gb.c
@@ -108,7 +108,7 @@ int gb_audio_gb_disable_widget(struct gb_connection *connection,
 EXPORT_SYMBOL_GPL(gb_audio_gb_disable_widget);
 
 int gb_audio_gb_get_pcm(struct gb_connection *connection, u16 data_cport,
-			uint32_t *format, uint32_t *rate, u8 *channels,
+			u32 *format, u32 *rate, u8 *channels,
 			u8 *sig_bits)
 {
 	struct gb_audio_get_pcm_request req;
@@ -132,7 +132,7 @@ int gb_audio_gb_get_pcm(struct gb_connection *connection, u16 data_cport,
 EXPORT_SYMBOL_GPL(gb_audio_gb_get_pcm);
 
 int gb_audio_gb_set_pcm(struct gb_connection *connection, u16 data_cport,
-			uint32_t format, uint32_t rate, u8 channels,
+			u32 format, u32 rate, u8 channels,
 			u8 sig_bits)
 {
 	struct gb_audio_set_pcm_request req;

commit 79cb2b26f54e8831342f3598393bb894e15c01f6
Author: Chaehyun Lim <chaehyun.lim@gmail.com>
Date:   Tue Sep 20 09:47:30 2016 +0900

    staging: greybus: use preferred kernel type u16
    
    As suggested by checkpatch.pl:
    
    CHECK: Prefer kernel type 'u16' over 'uint16_t'
    
    Signed-off-by: Chaehyun Lim <chaehyun.lim@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/greybus/audio_gb.c b/drivers/staging/greybus/audio_gb.c
index c386cd83ca9b..42f287dd7b84 100644
--- a/drivers/staging/greybus/audio_gb.c
+++ b/drivers/staging/greybus/audio_gb.c
@@ -17,7 +17,7 @@ int gb_audio_gb_get_topology(struct gb_connection *connection,
 {
 	struct gb_audio_get_topology_size_response size_resp;
 	struct gb_audio_topology *topo;
-	uint16_t size;
+	u16 size;
 	int ret;
 
 	ret = gb_operation_sync(connection, GB_AUDIO_TYPE_GET_TOPOLOGY_SIZE,
@@ -107,7 +107,7 @@ int gb_audio_gb_disable_widget(struct gb_connection *connection,
 }
 EXPORT_SYMBOL_GPL(gb_audio_gb_disable_widget);
 
-int gb_audio_gb_get_pcm(struct gb_connection *connection, uint16_t data_cport,
+int gb_audio_gb_get_pcm(struct gb_connection *connection, u16 data_cport,
 			uint32_t *format, uint32_t *rate, u8 *channels,
 			u8 *sig_bits)
 {
@@ -131,7 +131,7 @@ int gb_audio_gb_get_pcm(struct gb_connection *connection, uint16_t data_cport,
 }
 EXPORT_SYMBOL_GPL(gb_audio_gb_get_pcm);
 
-int gb_audio_gb_set_pcm(struct gb_connection *connection, uint16_t data_cport,
+int gb_audio_gb_set_pcm(struct gb_connection *connection, u16 data_cport,
 			uint32_t format, uint32_t rate, u8 channels,
 			u8 sig_bits)
 {
@@ -149,7 +149,7 @@ int gb_audio_gb_set_pcm(struct gb_connection *connection, uint16_t data_cport,
 EXPORT_SYMBOL_GPL(gb_audio_gb_set_pcm);
 
 int gb_audio_gb_set_tx_data_size(struct gb_connection *connection,
-				 uint16_t data_cport, uint16_t size)
+				 u16 data_cport, u16 size)
 {
 	struct gb_audio_set_tx_data_size_request req;
 
@@ -162,7 +162,7 @@ int gb_audio_gb_set_tx_data_size(struct gb_connection *connection,
 EXPORT_SYMBOL_GPL(gb_audio_gb_set_tx_data_size);
 
 int gb_audio_gb_activate_tx(struct gb_connection *connection,
-			    uint16_t data_cport)
+			    u16 data_cport)
 {
 	struct gb_audio_activate_tx_request req;
 
@@ -174,7 +174,7 @@ int gb_audio_gb_activate_tx(struct gb_connection *connection,
 EXPORT_SYMBOL_GPL(gb_audio_gb_activate_tx);
 
 int gb_audio_gb_deactivate_tx(struct gb_connection *connection,
-			      uint16_t data_cport)
+			      u16 data_cport)
 {
 	struct gb_audio_deactivate_tx_request req;
 
@@ -186,7 +186,7 @@ int gb_audio_gb_deactivate_tx(struct gb_connection *connection,
 EXPORT_SYMBOL_GPL(gb_audio_gb_deactivate_tx);
 
 int gb_audio_gb_set_rx_data_size(struct gb_connection *connection,
-				 uint16_t data_cport, uint16_t size)
+				 u16 data_cport, u16 size)
 {
 	struct gb_audio_set_rx_data_size_request req;
 
@@ -199,7 +199,7 @@ int gb_audio_gb_set_rx_data_size(struct gb_connection *connection,
 EXPORT_SYMBOL_GPL(gb_audio_gb_set_rx_data_size);
 
 int gb_audio_gb_activate_rx(struct gb_connection *connection,
-			    uint16_t data_cport)
+			    u16 data_cport)
 {
 	struct gb_audio_activate_rx_request req;
 
@@ -211,7 +211,7 @@ int gb_audio_gb_activate_rx(struct gb_connection *connection,
 EXPORT_SYMBOL_GPL(gb_audio_gb_activate_rx);
 
 int gb_audio_gb_deactivate_rx(struct gb_connection *connection,
-			      uint16_t data_cport)
+			      u16 data_cport)
 {
 	struct gb_audio_deactivate_rx_request req;
 

commit 31959392c7db09c13af07dcdc409d306aaa03d4f
Author: Chaehyun Lim <chaehyun.lim@gmail.com>
Date:   Tue Sep 20 09:47:29 2016 +0900

    staging: greybus: use preferred kernel type u8
    
    As suggested by checkpatch.pl:
    
    CHECK: Prefer kernel type 'u8' over 'uint8_t'
    
    Signed-off-by: Chaehyun Lim <chaehyun.lim@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/greybus/audio_gb.c b/drivers/staging/greybus/audio_gb.c
index a2f1c92e7445..c386cd83ca9b 100644
--- a/drivers/staging/greybus/audio_gb.c
+++ b/drivers/staging/greybus/audio_gb.c
@@ -47,7 +47,7 @@ int gb_audio_gb_get_topology(struct gb_connection *connection,
 EXPORT_SYMBOL_GPL(gb_audio_gb_get_topology);
 
 int gb_audio_gb_get_control(struct gb_connection *connection,
-			    uint8_t control_id, uint8_t index,
+			    u8 control_id, u8 index,
 			    struct gb_audio_ctl_elem_value *value)
 {
 	struct gb_audio_get_control_request req;
@@ -69,7 +69,7 @@ int gb_audio_gb_get_control(struct gb_connection *connection,
 EXPORT_SYMBOL_GPL(gb_audio_gb_get_control);
 
 int gb_audio_gb_set_control(struct gb_connection *connection,
-			    uint8_t control_id, uint8_t index,
+			    u8 control_id, u8 index,
 			    struct gb_audio_ctl_elem_value *value)
 {
 	struct gb_audio_set_control_request req;
@@ -84,7 +84,7 @@ int gb_audio_gb_set_control(struct gb_connection *connection,
 EXPORT_SYMBOL_GPL(gb_audio_gb_set_control);
 
 int gb_audio_gb_enable_widget(struct gb_connection *connection,
-			      uint8_t widget_id)
+			      u8 widget_id)
 {
 	struct gb_audio_enable_widget_request req;
 
@@ -96,7 +96,7 @@ int gb_audio_gb_enable_widget(struct gb_connection *connection,
 EXPORT_SYMBOL_GPL(gb_audio_gb_enable_widget);
 
 int gb_audio_gb_disable_widget(struct gb_connection *connection,
-			       uint8_t widget_id)
+			       u8 widget_id)
 {
 	struct gb_audio_disable_widget_request req;
 
@@ -108,8 +108,8 @@ int gb_audio_gb_disable_widget(struct gb_connection *connection,
 EXPORT_SYMBOL_GPL(gb_audio_gb_disable_widget);
 
 int gb_audio_gb_get_pcm(struct gb_connection *connection, uint16_t data_cport,
-			uint32_t *format, uint32_t *rate, uint8_t *channels,
-			uint8_t *sig_bits)
+			uint32_t *format, uint32_t *rate, u8 *channels,
+			u8 *sig_bits)
 {
 	struct gb_audio_get_pcm_request req;
 	struct gb_audio_get_pcm_response resp;
@@ -132,8 +132,8 @@ int gb_audio_gb_get_pcm(struct gb_connection *connection, uint16_t data_cport,
 EXPORT_SYMBOL_GPL(gb_audio_gb_get_pcm);
 
 int gb_audio_gb_set_pcm(struct gb_connection *connection, uint16_t data_cport,
-			uint32_t format, uint32_t rate, uint8_t channels,
-			uint8_t sig_bits)
+			uint32_t format, uint32_t rate, u8 channels,
+			u8 sig_bits)
 {
 	struct gb_audio_set_pcm_request req;
 

commit 8f60ce76a4eb0911ddd5833badd0d27bb5dfb894
Author: Mark Greer <mgreer@animalcreek.com>
Date:   Tue Aug 2 20:30:28 2016 -0700

    greybus: audio: Remove GET_TX/RX_DELAY message types
    
    The 'GB_AUDIO_TYPE_GET_TX_DELAY' and 'GB_AUDIO_TYPE_GET_RX_DELAY'
    are no longer a part of the Greybus Audio Device Class Protocol
    so remove support for them.  The message numbers are not coalesced
    to prevent compatibility issues between the AP and the module.
    
    Testing Done: Played music using a speaker module
    
    Signed-off-by: Mark Greer <mgreer@animalcreek.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@google.com>

diff --git a/drivers/staging/greybus/audio_gb.c b/drivers/staging/greybus/audio_gb.c
index 167683d74f1a..a2f1c92e7445 100644
--- a/drivers/staging/greybus/audio_gb.c
+++ b/drivers/staging/greybus/audio_gb.c
@@ -161,26 +161,6 @@ int gb_audio_gb_set_tx_data_size(struct gb_connection *connection,
 }
 EXPORT_SYMBOL_GPL(gb_audio_gb_set_tx_data_size);
 
-int gb_audio_gb_get_tx_delay(struct gb_connection *connection,
-			     uint16_t data_cport, uint32_t *delay)
-{
-	struct gb_audio_get_tx_delay_request req;
-	struct gb_audio_get_tx_delay_response resp;
-	int ret;
-
-	req.data_cport = cpu_to_le16(data_cport);
-
-	ret = gb_operation_sync(connection, GB_AUDIO_TYPE_GET_TX_DELAY,
-				&req, sizeof(req), &resp, sizeof(resp));
-	if (ret)
-		return ret;
-
-	*delay = le32_to_cpu(resp.delay);
-
-	return 0;
-}
-EXPORT_SYMBOL_GPL(gb_audio_gb_get_tx_delay);
-
 int gb_audio_gb_activate_tx(struct gb_connection *connection,
 			    uint16_t data_cport)
 {
@@ -218,26 +198,6 @@ int gb_audio_gb_set_rx_data_size(struct gb_connection *connection,
 }
 EXPORT_SYMBOL_GPL(gb_audio_gb_set_rx_data_size);
 
-int gb_audio_gb_get_rx_delay(struct gb_connection *connection,
-			     uint16_t data_cport, uint32_t *delay)
-{
-	struct gb_audio_get_rx_delay_request req;
-	struct gb_audio_get_rx_delay_response resp;
-	int ret;
-
-	req.data_cport = cpu_to_le16(data_cport);
-
-	ret = gb_operation_sync(connection, GB_AUDIO_TYPE_GET_RX_DELAY,
-				&req, sizeof(req), &resp, sizeof(resp));
-	if (ret)
-		return ret;
-
-	*delay = le32_to_cpu(resp.delay);
-
-	return 0;
-}
-EXPORT_SYMBOL_GPL(gb_audio_gb_get_rx_delay);
-
 int gb_audio_gb_activate_rx(struct gb_connection *connection,
 			    uint16_t data_cport)
 {

commit 1045451f8abbfe3628af9bc1ce53da4d57723626
Author: Viresh Kumar <viresh.kumar@linaro.org>
Date:   Thu Jan 28 15:50:47 2016 +0530

    greybus: audio: Fix sparse warnings
    
    greybus/audio_apbridgea.c:13:5: warning: symbol 'gb_audio_apbridgea_set_config' was not declared. Should it be static?
    greybus/audio_apbridgea.c:30:5: warning: symbol 'gb_audio_apbridgea_register_cport' was not declared. Should it be static?
    greybus/audio_apbridgea.c:44:5: warning: symbol 'gb_audio_apbridgea_unregister_cport' was not declared. Should it be static?
    greybus/audio_apbridgea.c:58:5: warning: symbol 'gb_audio_apbridgea_set_tx_data_size' was not declared. Should it be static?
    greybus/audio_apbridgea.c:72:5: warning: symbol 'gb_audio_apbridgea_get_tx_delay' was not declared. Should it be static?
    greybus/audio_apbridgea.c:80:5: warning: symbol 'gb_audio_apbridgea_start_tx' was not declared. Should it be static?
    greybus/audio_apbridgea.c:94:5: warning: symbol 'gb_audio_apbridgea_stop_tx' was not declared. Should it be static?
    greybus/audio_apbridgea.c:106:5: warning: symbol 'gb_audio_apbridgea_set_rx_data_size' was not declared. Should it be static?
    greybus/audio_apbridgea.c:120:5: warning: symbol 'gb_audio_apbridgea_get_rx_delay' was not declared. Should it be static?
    greybus/audio_apbridgea.c:128:5: warning: symbol 'gb_audio_apbridgea_start_rx' was not declared. Should it be static?
    greybus/audio_apbridgea.c:141:5: warning: symbol 'gb_audio_apbridgea_stop_rx' was not declared. Should it be static?
    greybus/audio_gb.c:14:5: warning: symbol 'gb_audio_gb_get_topology' was not declared. Should it be static?
    greybus/audio_gb.c:48:5: warning: symbol 'gb_audio_gb_get_control' was not declared. Should it be static?
    greybus/audio_gb.c:70:5: warning: symbol 'gb_audio_gb_set_control' was not declared. Should it be static?
    greybus/audio_gb.c:85:5: warning: symbol 'gb_audio_gb_enable_widget' was not declared. Should it be static?
    greybus/audio_gb.c:97:5: warning: symbol 'gb_audio_gb_disable_widget' was not declared. Should it be static?
    greybus/audio_gb.c:109:5: warning: symbol 'gb_audio_gb_get_pcm' was not declared. Should it be static?
    greybus/audio_gb.c:133:5: warning: symbol 'gb_audio_gb_set_pcm' was not declared. Should it be static?
    greybus/audio_gb.c:150:5: warning: symbol 'gb_audio_gb_set_tx_data_size' was not declared. Should it be static?
    greybus/audio_gb.c:163:5: warning: symbol 'gb_audio_gb_get_tx_delay' was not declared. Should it be static?
    greybus/audio_gb.c:183:5: warning: symbol 'gb_audio_gb_activate_tx' was not declared. Should it be static?
    greybus/audio_gb.c:195:5: warning: symbol 'gb_audio_gb_deactivate_tx' was not declared. Should it be static?
    greybus/audio_gb.c:207:5: warning: symbol 'gb_audio_gb_set_rx_data_size' was not declared. Should it be static?
    greybus/audio_gb.c:220:5: warning: symbol 'gb_audio_gb_get_rx_delay' was not declared. Should it be static?
    greybus/audio_gb.c:240:5: warning: symbol 'gb_audio_gb_activate_rx' was not declared. Should it be static?
    greybus/audio_gb.c:252:5: warning: symbol 'gb_audio_gb_deactivate_rx' was not declared. Should it be static?
    
    Fix them by including the header that declares the exported routines.
    
    Signed-off-by: Viresh Kumar <viresh.kumar@linaro.org>
    Reviewed-by: Alex Elder <elder@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@google.com>

diff --git a/drivers/staging/greybus/audio_gb.c b/drivers/staging/greybus/audio_gb.c
index 08bfdeb87a61..167683d74f1a 100644
--- a/drivers/staging/greybus/audio_gb.c
+++ b/drivers/staging/greybus/audio_gb.c
@@ -9,6 +9,7 @@
 #include "greybus.h"
 #include "greybus_protocols.h"
 #include "operation.h"
+#include "audio_codec.h"
 
 /* TODO: Split into separate calls */
 int gb_audio_gb_get_topology(struct gb_connection *connection,

commit 184992e305f1de3a3d5fa446da3a2bc76be7c54a
Author: Mark Greer <mgreer@animalcreek.com>
Date:   Wed Jan 13 14:07:46 2016 -0700

    greybus: audio: Add Greybus Audio Device Class Protocol helper routines
    
    Add helper routines to make communicating with audio modules easier.
    
    Signed-off-by: Mark Greer <mgreer@animalcreek.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@google.com>

diff --git a/drivers/staging/greybus/audio_gb.c b/drivers/staging/greybus/audio_gb.c
new file mode 100644
index 000000000000..08bfdeb87a61
--- /dev/null
+++ b/drivers/staging/greybus/audio_gb.c
@@ -0,0 +1,267 @@
+/*
+ * Greybus Audio Device Class Protocol helpers
+ *
+ * Copyright 2015-2016 Google Inc.
+ *
+ * Released under the GPLv2 only.
+ */
+
+#include "greybus.h"
+#include "greybus_protocols.h"
+#include "operation.h"
+
+/* TODO: Split into separate calls */
+int gb_audio_gb_get_topology(struct gb_connection *connection,
+			     struct gb_audio_topology **topology)
+{
+	struct gb_audio_get_topology_size_response size_resp;
+	struct gb_audio_topology *topo;
+	uint16_t size;
+	int ret;
+
+	ret = gb_operation_sync(connection, GB_AUDIO_TYPE_GET_TOPOLOGY_SIZE,
+				NULL, 0, &size_resp, sizeof(size_resp));
+	if (ret)
+		return ret;
+
+	size = le16_to_cpu(size_resp.size);
+	if (size < sizeof(*topo))
+		return -ENODATA;
+
+	topo = kzalloc(size, GFP_KERNEL);
+	if (!topo)
+		return -ENOMEM;
+
+	ret = gb_operation_sync(connection, GB_AUDIO_TYPE_GET_TOPOLOGY, NULL, 0,
+				topo, size);
+	if (ret) {
+		kfree(topo);
+		return ret;
+	}
+
+	*topology = topo;
+
+	return 0;
+}
+EXPORT_SYMBOL_GPL(gb_audio_gb_get_topology);
+
+int gb_audio_gb_get_control(struct gb_connection *connection,
+			    uint8_t control_id, uint8_t index,
+			    struct gb_audio_ctl_elem_value *value)
+{
+	struct gb_audio_get_control_request req;
+	struct gb_audio_get_control_response resp;
+	int ret;
+
+	req.control_id = control_id;
+	req.index = index;
+
+	ret = gb_operation_sync(connection, GB_AUDIO_TYPE_GET_CONTROL,
+				&req, sizeof(req), &resp, sizeof(resp));
+	if (ret)
+		return ret;
+
+	memcpy(value, &resp.value, sizeof(*value));
+
+	return 0;
+}
+EXPORT_SYMBOL_GPL(gb_audio_gb_get_control);
+
+int gb_audio_gb_set_control(struct gb_connection *connection,
+			    uint8_t control_id, uint8_t index,
+			    struct gb_audio_ctl_elem_value *value)
+{
+	struct gb_audio_set_control_request req;
+
+	req.control_id = control_id;
+	req.index = index;
+	memcpy(&req.value, value, sizeof(req.value));
+
+	return gb_operation_sync(connection, GB_AUDIO_TYPE_SET_CONTROL,
+				 &req, sizeof(req), NULL, 0);
+}
+EXPORT_SYMBOL_GPL(gb_audio_gb_set_control);
+
+int gb_audio_gb_enable_widget(struct gb_connection *connection,
+			      uint8_t widget_id)
+{
+	struct gb_audio_enable_widget_request req;
+
+	req.widget_id = widget_id;
+
+	return gb_operation_sync(connection, GB_AUDIO_TYPE_ENABLE_WIDGET,
+				 &req, sizeof(req), NULL, 0);
+}
+EXPORT_SYMBOL_GPL(gb_audio_gb_enable_widget);
+
+int gb_audio_gb_disable_widget(struct gb_connection *connection,
+			       uint8_t widget_id)
+{
+	struct gb_audio_disable_widget_request req;
+
+	req.widget_id = widget_id;
+
+	return gb_operation_sync(connection, GB_AUDIO_TYPE_DISABLE_WIDGET,
+				 &req, sizeof(req), NULL, 0);
+}
+EXPORT_SYMBOL_GPL(gb_audio_gb_disable_widget);
+
+int gb_audio_gb_get_pcm(struct gb_connection *connection, uint16_t data_cport,
+			uint32_t *format, uint32_t *rate, uint8_t *channels,
+			uint8_t *sig_bits)
+{
+	struct gb_audio_get_pcm_request req;
+	struct gb_audio_get_pcm_response resp;
+	int ret;
+
+	req.data_cport = cpu_to_le16(data_cport);
+
+	ret = gb_operation_sync(connection, GB_AUDIO_TYPE_GET_PCM,
+				&req, sizeof(req), &resp, sizeof(resp));
+	if (ret)
+		return ret;
+
+	*format = le32_to_cpu(resp.format);
+	*rate = le32_to_cpu(resp.rate);
+	*channels = resp.channels;
+	*sig_bits = resp.sig_bits;
+
+	return 0;
+}
+EXPORT_SYMBOL_GPL(gb_audio_gb_get_pcm);
+
+int gb_audio_gb_set_pcm(struct gb_connection *connection, uint16_t data_cport,
+			uint32_t format, uint32_t rate, uint8_t channels,
+			uint8_t sig_bits)
+{
+	struct gb_audio_set_pcm_request req;
+
+	req.data_cport = cpu_to_le16(data_cport);
+	req.format = cpu_to_le32(format);
+	req.rate = cpu_to_le32(rate);
+	req.channels = channels;
+	req.sig_bits = sig_bits;
+
+	return gb_operation_sync(connection, GB_AUDIO_TYPE_SET_PCM,
+				 &req, sizeof(req), NULL, 0);
+}
+EXPORT_SYMBOL_GPL(gb_audio_gb_set_pcm);
+
+int gb_audio_gb_set_tx_data_size(struct gb_connection *connection,
+				 uint16_t data_cport, uint16_t size)
+{
+	struct gb_audio_set_tx_data_size_request req;
+
+	req.data_cport = cpu_to_le16(data_cport);
+	req.size = cpu_to_le16(size);
+
+	return gb_operation_sync(connection, GB_AUDIO_TYPE_SET_TX_DATA_SIZE,
+				 &req, sizeof(req), NULL, 0);
+}
+EXPORT_SYMBOL_GPL(gb_audio_gb_set_tx_data_size);
+
+int gb_audio_gb_get_tx_delay(struct gb_connection *connection,
+			     uint16_t data_cport, uint32_t *delay)
+{
+	struct gb_audio_get_tx_delay_request req;
+	struct gb_audio_get_tx_delay_response resp;
+	int ret;
+
+	req.data_cport = cpu_to_le16(data_cport);
+
+	ret = gb_operation_sync(connection, GB_AUDIO_TYPE_GET_TX_DELAY,
+				&req, sizeof(req), &resp, sizeof(resp));
+	if (ret)
+		return ret;
+
+	*delay = le32_to_cpu(resp.delay);
+
+	return 0;
+}
+EXPORT_SYMBOL_GPL(gb_audio_gb_get_tx_delay);
+
+int gb_audio_gb_activate_tx(struct gb_connection *connection,
+			    uint16_t data_cport)
+{
+	struct gb_audio_activate_tx_request req;
+
+	req.data_cport = cpu_to_le16(data_cport);
+
+	return gb_operation_sync(connection, GB_AUDIO_TYPE_ACTIVATE_TX,
+				 &req, sizeof(req), NULL, 0);
+}
+EXPORT_SYMBOL_GPL(gb_audio_gb_activate_tx);
+
+int gb_audio_gb_deactivate_tx(struct gb_connection *connection,
+			      uint16_t data_cport)
+{
+	struct gb_audio_deactivate_tx_request req;
+
+	req.data_cport = cpu_to_le16(data_cport);
+
+	return gb_operation_sync(connection, GB_AUDIO_TYPE_DEACTIVATE_TX,
+				 &req, sizeof(req), NULL, 0);
+}
+EXPORT_SYMBOL_GPL(gb_audio_gb_deactivate_tx);
+
+int gb_audio_gb_set_rx_data_size(struct gb_connection *connection,
+				 uint16_t data_cport, uint16_t size)
+{
+	struct gb_audio_set_rx_data_size_request req;
+
+	req.data_cport = cpu_to_le16(data_cport);
+	req.size = cpu_to_le16(size);
+
+	return gb_operation_sync(connection, GB_AUDIO_TYPE_SET_RX_DATA_SIZE,
+				 &req, sizeof(req), NULL, 0);
+}
+EXPORT_SYMBOL_GPL(gb_audio_gb_set_rx_data_size);
+
+int gb_audio_gb_get_rx_delay(struct gb_connection *connection,
+			     uint16_t data_cport, uint32_t *delay)
+{
+	struct gb_audio_get_rx_delay_request req;
+	struct gb_audio_get_rx_delay_response resp;
+	int ret;
+
+	req.data_cport = cpu_to_le16(data_cport);
+
+	ret = gb_operation_sync(connection, GB_AUDIO_TYPE_GET_RX_DELAY,
+				&req, sizeof(req), &resp, sizeof(resp));
+	if (ret)
+		return ret;
+
+	*delay = le32_to_cpu(resp.delay);
+
+	return 0;
+}
+EXPORT_SYMBOL_GPL(gb_audio_gb_get_rx_delay);
+
+int gb_audio_gb_activate_rx(struct gb_connection *connection,
+			    uint16_t data_cport)
+{
+	struct gb_audio_activate_rx_request req;
+
+	req.data_cport = cpu_to_le16(data_cport);
+
+	return gb_operation_sync(connection, GB_AUDIO_TYPE_ACTIVATE_RX,
+				 &req, sizeof(req), NULL, 0);
+}
+EXPORT_SYMBOL_GPL(gb_audio_gb_activate_rx);
+
+int gb_audio_gb_deactivate_rx(struct gb_connection *connection,
+			      uint16_t data_cport)
+{
+	struct gb_audio_deactivate_rx_request req;
+
+	req.data_cport = cpu_to_le16(data_cport);
+
+	return gb_operation_sync(connection, GB_AUDIO_TYPE_DEACTIVATE_RX,
+				 &req, sizeof(req), NULL, 0);
+}
+EXPORT_SYMBOL_GPL(gb_audio_gb_deactivate_rx);
+
+MODULE_LICENSE("GPL v2");
+MODULE_ALIAS("greybus:audio-gb");
+MODULE_DESCRIPTION("Greybus Audio Device Class Protocol library");
+MODULE_AUTHOR("Mark Greer <mgreer@animalcreek.com>");
