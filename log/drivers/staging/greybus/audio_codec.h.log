commit ec0ad868173da8a75121f9dc116a5d5478ff614d
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Sun Aug 25 07:54:27 2019 +0200

    staging: greybus: move core include files to include/linux/greybus/
    
    With the goal of moving the core of the greybus code out of staging, the
    include files need to be moved to include/linux/greybus.h and
    include/linux/greybus/
    
    Cc: Vaibhav Hiremath <hvaibhav.linux@gmail.com>
    Cc: Johan Hovold <johan@kernel.org>
    Cc: Vaibhav Agarwal <vaibhav.sr@gmail.com>
    Cc: Rui Miguel Silva <rmfrfs@gmail.com>
    Cc: David Lin <dtwlin@gmail.com>
    Cc: "Bryan O'Donoghue" <pure.logic@nexus-software.ie>
    Cc: greybus-dev@lists.linaro.org
    Cc: devel@driverdev.osuosl.org
    Acked-by: Mark Greer <mgreer@animalcreek.com>
    Acked-by: Viresh Kumar <viresh.kumar@linaro.org>
    Acked-by: Alex Elder <elder@kernel.org>
    Link: https://lore.kernel.org/r/20190825055429.18547-8-gregkh@linuxfoundation.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/greybus/audio_codec.h b/drivers/staging/greybus/audio_codec.h
index 9ba09ea9c2fc..cb5d271da1a5 100644
--- a/drivers/staging/greybus/audio_codec.h
+++ b/drivers/staging/greybus/audio_codec.h
@@ -8,12 +8,10 @@
 #ifndef __LINUX_GBAUDIO_CODEC_H
 #define __LINUX_GBAUDIO_CODEC_H
 
+#include <linux/greybus.h>
 #include <sound/soc.h>
 #include <sound/jack.h>
 
-#include "greybus.h"
-#include "greybus_protocols.h"
-
 #define NAME_SIZE	32
 #define MAX_DAIS	2	/* APB1, APB2 */
 

commit ce2439ec8356b21994391ecb3ce45d089a495dc3
Author: Payal Kshirsagar <payal.s.kshirsagar.98@gmail.com>
Date:   Mon Mar 18 00:06:55 2019 +0530

    staging: greybus: remove extern prototypes
    
    Functions are implicitly declared with "extern". The compiler doesn't
    need it.  extern removed from drivers/staging/greybus/audio_codec.h
    file.
    
    Signed-off-by: Payal Kshirsagar <payal.s.kshirsagar.98@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/greybus/audio_codec.h b/drivers/staging/greybus/audio_codec.h
index d36f8cd35e06..9ba09ea9c2fc 100644
--- a/drivers/staging/greybus/audio_codec.h
+++ b/drivers/staging/greybus/audio_codec.h
@@ -173,66 +173,66 @@ int gbaudio_register_module(struct gbaudio_module_info *module);
 void gbaudio_unregister_module(struct gbaudio_module_info *module);
 
 /* protocol related */
-extern int gb_audio_gb_get_topology(struct gb_connection *connection,
-				    struct gb_audio_topology **topology);
-extern int gb_audio_gb_get_control(struct gb_connection *connection,
-				   u8 control_id, u8 index,
-				   struct gb_audio_ctl_elem_value *value);
-extern int gb_audio_gb_set_control(struct gb_connection *connection,
-				   u8 control_id, u8 index,
-				   struct gb_audio_ctl_elem_value *value);
-extern int gb_audio_gb_enable_widget(struct gb_connection *connection,
-				     u8 widget_id);
-extern int gb_audio_gb_disable_widget(struct gb_connection *connection,
-				      u8 widget_id);
-extern int gb_audio_gb_get_pcm(struct gb_connection *connection,
-			       u16 data_cport, u32 *format,
-			       u32 *rate, u8 *channels,
-			       u8 *sig_bits);
-extern int gb_audio_gb_set_pcm(struct gb_connection *connection,
-			       u16 data_cport, u32 format,
-			       u32 rate, u8 channels,
-			       u8 sig_bits);
-extern int gb_audio_gb_set_tx_data_size(struct gb_connection *connection,
-					u16 data_cport, u16 size);
-extern int gb_audio_gb_activate_tx(struct gb_connection *connection,
-				   u16 data_cport);
-extern int gb_audio_gb_deactivate_tx(struct gb_connection *connection,
-				     u16 data_cport);
-extern int gb_audio_gb_set_rx_data_size(struct gb_connection *connection,
-					u16 data_cport, u16 size);
-extern int gb_audio_gb_activate_rx(struct gb_connection *connection,
-				   u16 data_cport);
-extern int gb_audio_gb_deactivate_rx(struct gb_connection *connection,
-				     u16 data_cport);
-extern int gb_audio_apbridgea_set_config(struct gb_connection *connection,
-					 __u16 i2s_port, __u32 format,
-					 __u32 rate, __u32 mclk_freq);
-extern int gb_audio_apbridgea_register_cport(struct gb_connection *connection,
-					     __u16 i2s_port, __u16 cportid,
-					     __u8 direction);
-extern int gb_audio_apbridgea_unregister_cport(struct gb_connection *connection,
-					       __u16 i2s_port, __u16 cportid,
-					       __u8 direction);
-extern int gb_audio_apbridgea_set_tx_data_size(struct gb_connection *connection,
-					       __u16 i2s_port, __u16 size);
-extern int gb_audio_apbridgea_prepare_tx(struct gb_connection *connection,
-					 __u16 i2s_port);
-extern int gb_audio_apbridgea_start_tx(struct gb_connection *connection,
-				       __u16 i2s_port, __u64 timestamp);
-extern int gb_audio_apbridgea_stop_tx(struct gb_connection *connection,
-				      __u16 i2s_port);
-extern int gb_audio_apbridgea_shutdown_tx(struct gb_connection *connection,
-					  __u16 i2s_port);
-extern int gb_audio_apbridgea_set_rx_data_size(struct gb_connection *connection,
-					       __u16 i2s_port, __u16 size);
-extern int gb_audio_apbridgea_prepare_rx(struct gb_connection *connection,
-					 __u16 i2s_port);
-extern int gb_audio_apbridgea_start_rx(struct gb_connection *connection,
-				       __u16 i2s_port);
-extern int gb_audio_apbridgea_stop_rx(struct gb_connection *connection,
-				      __u16 i2s_port);
-extern int gb_audio_apbridgea_shutdown_rx(struct gb_connection *connection,
-					  __u16 i2s_port);
+int gb_audio_gb_get_topology(struct gb_connection *connection,
+			     struct gb_audio_topology **topology);
+int gb_audio_gb_get_control(struct gb_connection *connection,
+			    u8 control_id, u8 index,
+			    struct gb_audio_ctl_elem_value *value);
+int gb_audio_gb_set_control(struct gb_connection *connection,
+			    u8 control_id, u8 index,
+			    struct gb_audio_ctl_elem_value *value);
+int gb_audio_gb_enable_widget(struct gb_connection *connection,
+			      u8 widget_id);
+int gb_audio_gb_disable_widget(struct gb_connection *connection,
+			       u8 widget_id);
+int gb_audio_gb_get_pcm(struct gb_connection *connection,
+			u16 data_cport, u32 *format,
+			u32 *rate, u8 *channels,
+			u8 *sig_bits);
+int gb_audio_gb_set_pcm(struct gb_connection *connection,
+			u16 data_cport, u32 format,
+			u32 rate, u8 channels,
+			u8 sig_bits);
+int gb_audio_gb_set_tx_data_size(struct gb_connection *connection,
+				 u16 data_cport, u16 size);
+int gb_audio_gb_activate_tx(struct gb_connection *connection,
+			    u16 data_cport);
+int gb_audio_gb_deactivate_tx(struct gb_connection *connection,
+			      u16 data_cport);
+int gb_audio_gb_set_rx_data_size(struct gb_connection *connection,
+				 u16 data_cport, u16 size);
+int gb_audio_gb_activate_rx(struct gb_connection *connection,
+			    u16 data_cport);
+int gb_audio_gb_deactivate_rx(struct gb_connection *connection,
+			      u16 data_cport);
+int gb_audio_apbridgea_set_config(struct gb_connection *connection,
+				  __u16 i2s_port, __u32 format,
+				  __u32 rate, __u32 mclk_freq);
+int gb_audio_apbridgea_register_cport(struct gb_connection *connection,
+				      __u16 i2s_port, __u16 cportid,
+				      __u8 direction);
+int gb_audio_apbridgea_unregister_cport(struct gb_connection *connection,
+					__u16 i2s_port, __u16 cportid,
+					__u8 direction);
+int gb_audio_apbridgea_set_tx_data_size(struct gb_connection *connection,
+					__u16 i2s_port, __u16 size);
+int gb_audio_apbridgea_prepare_tx(struct gb_connection *connection,
+				  __u16 i2s_port);
+int gb_audio_apbridgea_start_tx(struct gb_connection *connection,
+				__u16 i2s_port, __u64 timestamp);
+int gb_audio_apbridgea_stop_tx(struct gb_connection *connection,
+			       __u16 i2s_port);
+int gb_audio_apbridgea_shutdown_tx(struct gb_connection *connection,
+				   __u16 i2s_port);
+int gb_audio_apbridgea_set_rx_data_size(struct gb_connection *connection,
+					__u16 i2s_port, __u16 size);
+int gb_audio_apbridgea_prepare_rx(struct gb_connection *connection,
+				  __u16 i2s_port);
+int gb_audio_apbridgea_start_rx(struct gb_connection *connection,
+				__u16 i2s_port);
+int gb_audio_apbridgea_stop_rx(struct gb_connection *connection,
+			       __u16 i2s_port);
+int gb_audio_apbridgea_shutdown_rx(struct gb_connection *connection,
+				   __u16 i2s_port);
 
 #endif /* __LINUX_GBAUDIO_CODEC_H */

commit f5e4e5e7ae9cab22d62bc870be78c9daf38ab645
Author: Ioannis Valasakis <code@wizofe.uk>
Date:   Fri Nov 9 13:54:00 2018 +0000

    staging: greybus: correct SPDX License Identifier
    
    Replace SPDX License Identifier comments with C comments.
    Reported by checkpatch.
    
    Signed-off-by: Ioannis Valasakis <code@wizofe.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/greybus/audio_codec.h b/drivers/staging/greybus/audio_codec.h
index 4efd8b3ebe07..d36f8cd35e06 100644
--- a/drivers/staging/greybus/audio_codec.h
+++ b/drivers/staging/greybus/audio_codec.h
@@ -1,4 +1,4 @@
-// SPDX-License-Identifier: GPL-2.0
+/* SPDX-License-Identifier: GPL-2.0 */
 /*
  * Greybus audio driver
  * Copyright 2015 Google Inc.

commit dc9dc74986cf4900d393c7185121f82c66418ee1
Author: Gaurav Dhingra <gauravdhingra.gxyd@gmail.com>
Date:   Fri Apr 6 16:39:22 2018 +0530

    staging: greybus: Fix warning to limit chars per line
    
    Wrap comment to fix warning "prefer a maximum 75 chars per line"
    
    Signed-off-by: Gaurav Dhingra <gauravdhingra.gxyd@gmail.com>
    Acked-by: Vaibhav Agarwal <vaibhav.sr@gmail.com>
    Reviewed-by: Mark Greer <mgreer@animalcreek.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/greybus/audio_codec.h b/drivers/staging/greybus/audio_codec.h
index a1d5440552d4..4efd8b3ebe07 100644
--- a/drivers/staging/greybus/audio_codec.h
+++ b/drivers/staging/greybus/audio_codec.h
@@ -23,7 +23,10 @@ enum {
 	NUM_CODEC_DAIS,
 };
 
-/* device_type should be same as defined in audio.h (Android media layer) */
+/*
+ * device_type should be same as defined in audio.h
+ * (Android media layer)
+ */
 enum {
 	GBAUDIO_DEVICE_NONE                     = 0x0,
 	/* reserved bits */

commit adb77ab0a121a801e50f32d6f7d5d2c7b5aee4fa
Author: Kamal Heib <kamalheib1@gmail.com>
Date:   Wed Jan 17 16:52:31 2018 +0200

    staging: greybus: audio_codec.h Fix alignment should match open parenthesis
    
    Fix "Alignment should match open parenthesis" checkpatch.pl errors.
    
    Signed-off-by: Kamal Heib <kamalheib1@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/greybus/audio_codec.h b/drivers/staging/greybus/audio_codec.h
index fd7b8936cb95..a1d5440552d4 100644
--- a/drivers/staging/greybus/audio_codec.h
+++ b/drivers/staging/greybus/audio_codec.h
@@ -159,7 +159,7 @@ struct gbaudio_module_info {
 };
 
 int gbaudio_tplg_parse_data(struct gbaudio_module_info *module,
-			       struct gb_audio_topology *tplg_data);
+			    struct gb_audio_topology *tplg_data);
 void gbaudio_tplg_release(struct gbaudio_module_info *module);
 
 int gbaudio_module_update(struct gbaudio_codec_info *codec,

commit b822e33af0371c81d63aa446b59b04123cc8cd58
Author: Kamal Heib <kamalheib1@gmail.com>
Date:   Wed Jan 17 16:52:30 2018 +0200

    staging: greybus: audio_codec.h: Prefer kernel type 'u32' over 'uint32_t'
    
    Fix the following errors found by checkpatch.pl:
    CHECK: Prefer kernel type 'u32' over 'uint32_t'
    
    Signed-off-by: Kamal Heib <kamalheib1@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/greybus/audio_codec.h b/drivers/staging/greybus/audio_codec.h
index 161b37c8ef17..fd7b8936cb95 100644
--- a/drivers/staging/greybus/audio_codec.h
+++ b/drivers/staging/greybus/audio_codec.h
@@ -53,7 +53,7 @@ enum gbaudio_codec_state {
 struct gbaudio_stream_params {
 	int state;
 	u8 sig_bits, channels;
-	uint32_t format, rate;
+	u32 format, rate;
 };
 
 struct gbaudio_codec_dai {
@@ -183,12 +183,12 @@ extern int gb_audio_gb_enable_widget(struct gb_connection *connection,
 extern int gb_audio_gb_disable_widget(struct gb_connection *connection,
 				      u8 widget_id);
 extern int gb_audio_gb_get_pcm(struct gb_connection *connection,
-			       u16 data_cport, uint32_t *format,
-			       uint32_t *rate, u8 *channels,
+			       u16 data_cport, u32 *format,
+			       u32 *rate, u8 *channels,
 			       u8 *sig_bits);
 extern int gb_audio_gb_set_pcm(struct gb_connection *connection,
-			       u16 data_cport, uint32_t format,
-			       uint32_t rate, u8 channels,
+			       u16 data_cport, u32 format,
+			       u32 rate, u8 channels,
 			       u8 sig_bits);
 extern int gb_audio_gb_set_tx_data_size(struct gb_connection *connection,
 					u16 data_cport, u16 size);

commit 863dbc52e7f0e5acd7b4883f3933543a81c474c7
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Tue Nov 7 14:58:42 2017 +0100

    staging: greybus: Remove redundant license text
    
    Now that the SPDX tag is in all greybus files, that identifies the
    license in a specific and legally-defined manner.  So the extra GPL text
    wording can be removed as it is no longer needed at all.
    
    This is done on a quest to remove the 700+ different ways that files in
    the kernel describe the GPL license text.  And there's unneeded stuff
    like the address (sometimes incorrect) for the FSF which is never
    needed.
    
    No copyright headers or other non-license-description text was removed.
    
    Cc: Vaibhav Hiremath <hvaibhav.linux@gmail.com>
    Reviewed-by: Alex Elder <elder@linaro.org>
    Acked-by: Vaibhav Agarwal <vaibhav.sr@gmail.com>
    Acked-by: David Lin <dtwlin@gmail.com>
    Acked-by: Johan Hovold <johan@kernel.org>
    Acked-by: Viresh Kumar <viresh.kumar@linaro.org>
    Acked-by: Mark Greer <mgreer@animalcreek.com>
    Acked-by: Rui Miguel Silva <rmfrfs@gmail.com>
    Acked-by: "Bryan O'Donoghue" <pure.logic@nexus-software.ie>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/greybus/audio_codec.h b/drivers/staging/greybus/audio_codec.h
index 4f0f2a042746..161b37c8ef17 100644
--- a/drivers/staging/greybus/audio_codec.h
+++ b/drivers/staging/greybus/audio_codec.h
@@ -3,8 +3,6 @@
  * Greybus audio driver
  * Copyright 2015 Google Inc.
  * Copyright 2015 Linaro Ltd.
- *
- * Released under the GPLv2 only.
  */
 
 #ifndef __LINUX_GBAUDIO_CODEC_H

commit eb50fd3a22c770f36be275295b782f3ea52e3215
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Tue Nov 7 14:58:41 2017 +0100

    staging: greybus: add SPDX identifiers to all greybus driver files
    
    It's good to have SPDX identifiers in all files to make it easier to
    audit the kernel tree for correct licenses.
    
    Update the drivers/staging/greybus files files with the correct SPDX
    license identifier based on the license text in the file itself.  The
    SPDX identifier is a legally binding shorthand, which can be used
    instead of the full boiler plate text.
    
    This work is based on a script and data from Thomas Gleixner, Philippe
    Ombredanne, and Kate Stewart.
    
    Cc: Vaibhav Hiremath <hvaibhav.linux@gmail.com>
    Cc: "Bryan O'Donoghue" <pure.logic@nexus-software.ie>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: Kate Stewart <kstewart@linuxfoundation.org>
    Cc: Philippe Ombredanne <pombredanne@nexb.com>
    Acked-by: Vaibhav Agarwal <vaibhav.sr@gmail.com>
    Acked-by: David Lin <dtwlin@gmail.com>
    Reviewed-by: Alex Elder <elder@linaro.org>
    Acked-by: Johan Hovold <johan@kernel.org>
    Acked-by: Viresh Kumar <viresh.kumar@linaro.org>
    Acked-by: Mark Greer <mgreer@animalcreek.com>
    Acked-by: Rui Miguel Silva <rmfrfs@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/greybus/audio_codec.h b/drivers/staging/greybus/audio_codec.h
index 6fb064c69a36..4f0f2a042746 100644
--- a/drivers/staging/greybus/audio_codec.h
+++ b/drivers/staging/greybus/audio_codec.h
@@ -1,3 +1,4 @@
+// SPDX-License-Identifier: GPL-2.0
 /*
  * Greybus audio driver
  * Copyright 2015 Google Inc.

commit 96249da9ce2f33e16eb6b2ef812ea590d734057d
Author: Vaibhav Agarwal <vaibhav.agarwal@linaro.org>
Date:   Wed Jan 18 22:51:52 2017 +0530

    staging: greybus: audio: Cleanup junk codec registers
    
    Dummy codec register were initially added while populating dummy codec
    mixer controls until module topology parser was available. Now, these
    dummy registers are nowhere used and thus can be safely removed.
    
    Since ASoC framework requires a valid callback for both read & write
    register APIS, currently empty placeholders are kept to avoid panic.
    
    Later, register mapping logic can be defined:
    1. Assuming fixed number of maximum modules connected and register bits
    corresponds to basic info of each module OR
    2. With a logic to dynamically grow register_cache_size based on codec
    modules added/removed.
    
    Signed-off-by: Vaibhav Agarwal <vaibhav.agarwal@linaro.org>
    Signed-off-by: Vaibhav Agarwal <vaibhav.sr@gmail.com>
    Acked-by: Mark Greer <mgreer@animalcreek.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/greybus/audio_codec.h b/drivers/staging/greybus/audio_codec.h
index 62fd93939a1f..6fb064c69a36 100644
--- a/drivers/staging/greybus/audio_codec.h
+++ b/drivers/staging/greybus/audio_codec.h
@@ -24,18 +24,6 @@ enum {
 	NUM_CODEC_DAIS,
 };
 
-enum gbcodec_reg_index {
-	GBCODEC_CTL_REG,
-	GBCODEC_MUTE_REG,
-	GBCODEC_PB_LVOL_REG,
-	GBCODEC_PB_RVOL_REG,
-	GBCODEC_CAP_LVOL_REG,
-	GBCODEC_CAP_RVOL_REG,
-	GBCODEC_APB1_MUX_REG,
-	GBCODEC_APB2_MUX_REG,
-	GBCODEC_REG_COUNT
-};
-
 /* device_type should be same as defined in audio.h (Android media layer) */
 enum {
 	GBAUDIO_DEVICE_NONE                     = 0x0,
@@ -51,42 +39,9 @@ enum {
 	GBAUDIO_DEVICE_IN_WIRED_HEADSET         = GBAUDIO_DEVICE_BIT_IN | 0x10,
 };
 
-/* bit 0-SPK, 1-HP, 2-DAC,
- * 4-MIC, 5-HSMIC, 6-MIC2
- */
-#define GBCODEC_CTL_REG_DEFAULT		0x00
-
-/* bit 0,1 - APB1-PB-L/R
- * bit 2,3 - APB2-PB-L/R
- * bit 4,5 - APB1-Cap-L/R
- * bit 6,7 - APB2-Cap-L/R
- */
-#define	GBCODEC_MUTE_REG_DEFAULT	0x00
-
-/* 0-127 steps */
-#define	GBCODEC_PB_VOL_REG_DEFAULT	0x00
-#define	GBCODEC_CAP_VOL_REG_DEFAULT	0x00
-
-/* bit 0,1,2 - PB stereo, left, right
- * bit 8,9,10 - Cap stereo, left, right
- */
-#define GBCODEC_APB1_MUX_REG_DEFAULT	0x00
-#define GBCODEC_APB2_MUX_REG_DEFAULT	0x00
-
 #define GBCODEC_JACK_MASK		0x0000FFFF
 #define GBCODEC_JACK_BUTTON_MASK	0xFFFF0000
 
-static const u8 gbcodec_reg_defaults[GBCODEC_REG_COUNT] = {
-	GBCODEC_CTL_REG_DEFAULT,
-	GBCODEC_MUTE_REG_DEFAULT,
-	GBCODEC_PB_VOL_REG_DEFAULT,
-	GBCODEC_PB_VOL_REG_DEFAULT,
-	GBCODEC_CAP_VOL_REG_DEFAULT,
-	GBCODEC_CAP_VOL_REG_DEFAULT,
-	GBCODEC_APB1_MUX_REG_DEFAULT,
-	GBCODEC_APB2_MUX_REG_DEFAULT,
-};
-
 enum gbaudio_codec_state {
 	GBAUDIO_CODEC_SHUTDOWN = 0,
 	GBAUDIO_CODEC_STARTUP,
@@ -116,7 +71,6 @@ struct gbaudio_codec_info {
 	/* to maintain runtime stream params for each DAI */
 	struct list_head dai_list;
 	struct mutex lock;
-	u8 reg[GBCODEC_REG_COUNT];
 };
 
 struct gbaudio_widget {

commit 49b9137a6002a06f7e44e59ece9b34fd1e4fca4c
Author: Pankaj Bharadiya <pankaj.bharadiya@gmail.com>
Date:   Mon Oct 17 14:42:36 2016 +0530

    staging: greybus: audio: remove redundant slot field
    
    gb_audio_manager_module_descriptor's intf_id field maintains the
    information about the interface on which module is connected hence
    having an extra slot field is redundant.
    
    Thus remove the slot field and its associated code.
    
    Signed-off-by: Pankaj Bharadiya <pankaj.bharadiya@gmail.com>
    Acked-by: Viresh Kumar <viresh.kumar@linaro.org>
    Reviewed-by: Vaibhav Agarwal <vaibhav.sr@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/greybus/audio_codec.h b/drivers/staging/greybus/audio_codec.h
index ca027bd99ad7..62fd93939a1f 100644
--- a/drivers/staging/greybus/audio_codec.h
+++ b/drivers/staging/greybus/audio_codec.h
@@ -158,7 +158,6 @@ struct gbaudio_module_info {
 	int dev_id;	/* check if it should be bundle_id/hd_cport_id */
 	int vid;
 	int pid;
-	int slot;
 	int type;
 	int set_uevent;
 	char vstr[NAME_SIZE];

commit 79cb2b26f54e8831342f3598393bb894e15c01f6
Author: Chaehyun Lim <chaehyun.lim@gmail.com>
Date:   Tue Sep 20 09:47:30 2016 +0900

    staging: greybus: use preferred kernel type u16
    
    As suggested by checkpatch.pl:
    
    CHECK: Prefer kernel type 'u16' over 'uint16_t'
    
    Signed-off-by: Chaehyun Lim <chaehyun.lim@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/greybus/audio_codec.h b/drivers/staging/greybus/audio_codec.h
index fabaccc86834..ca027bd99ad7 100644
--- a/drivers/staging/greybus/audio_codec.h
+++ b/drivers/staging/greybus/audio_codec.h
@@ -231,25 +231,25 @@ extern int gb_audio_gb_enable_widget(struct gb_connection *connection,
 extern int gb_audio_gb_disable_widget(struct gb_connection *connection,
 				      u8 widget_id);
 extern int gb_audio_gb_get_pcm(struct gb_connection *connection,
-			       uint16_t data_cport, uint32_t *format,
+			       u16 data_cport, uint32_t *format,
 			       uint32_t *rate, u8 *channels,
 			       u8 *sig_bits);
 extern int gb_audio_gb_set_pcm(struct gb_connection *connection,
-			       uint16_t data_cport, uint32_t format,
+			       u16 data_cport, uint32_t format,
 			       uint32_t rate, u8 channels,
 			       u8 sig_bits);
 extern int gb_audio_gb_set_tx_data_size(struct gb_connection *connection,
-					uint16_t data_cport, uint16_t size);
+					u16 data_cport, u16 size);
 extern int gb_audio_gb_activate_tx(struct gb_connection *connection,
-				   uint16_t data_cport);
+				   u16 data_cport);
 extern int gb_audio_gb_deactivate_tx(struct gb_connection *connection,
-				     uint16_t data_cport);
+				     u16 data_cport);
 extern int gb_audio_gb_set_rx_data_size(struct gb_connection *connection,
-					uint16_t data_cport, uint16_t size);
+					u16 data_cport, u16 size);
 extern int gb_audio_gb_activate_rx(struct gb_connection *connection,
-				   uint16_t data_cport);
+				   u16 data_cport);
 extern int gb_audio_gb_deactivate_rx(struct gb_connection *connection,
-				     uint16_t data_cport);
+				     u16 data_cport);
 extern int gb_audio_apbridgea_set_config(struct gb_connection *connection,
 					 __u16 i2s_port, __u32 format,
 					 __u32 rate, __u32 mclk_freq);

commit 31959392c7db09c13af07dcdc409d306aaa03d4f
Author: Chaehyun Lim <chaehyun.lim@gmail.com>
Date:   Tue Sep 20 09:47:29 2016 +0900

    staging: greybus: use preferred kernel type u8
    
    As suggested by checkpatch.pl:
    
    CHECK: Prefer kernel type 'u8' over 'uint8_t'
    
    Signed-off-by: Chaehyun Lim <chaehyun.lim@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/greybus/audio_codec.h b/drivers/staging/greybus/audio_codec.h
index 0a864592560f..fabaccc86834 100644
--- a/drivers/staging/greybus/audio_codec.h
+++ b/drivers/staging/greybus/audio_codec.h
@@ -98,7 +98,7 @@ enum gbaudio_codec_state {
 
 struct gbaudio_stream_params {
 	int state;
-	uint8_t sig_bits, channels;
+	u8 sig_bits, channels;
 	uint32_t format, rate;
 };
 
@@ -221,23 +221,23 @@ void gbaudio_unregister_module(struct gbaudio_module_info *module);
 extern int gb_audio_gb_get_topology(struct gb_connection *connection,
 				    struct gb_audio_topology **topology);
 extern int gb_audio_gb_get_control(struct gb_connection *connection,
-				   uint8_t control_id, uint8_t index,
+				   u8 control_id, u8 index,
 				   struct gb_audio_ctl_elem_value *value);
 extern int gb_audio_gb_set_control(struct gb_connection *connection,
-				   uint8_t control_id, uint8_t index,
+				   u8 control_id, u8 index,
 				   struct gb_audio_ctl_elem_value *value);
 extern int gb_audio_gb_enable_widget(struct gb_connection *connection,
-				     uint8_t widget_id);
+				     u8 widget_id);
 extern int gb_audio_gb_disable_widget(struct gb_connection *connection,
-				      uint8_t widget_id);
+				      u8 widget_id);
 extern int gb_audio_gb_get_pcm(struct gb_connection *connection,
 			       uint16_t data_cport, uint32_t *format,
-			       uint32_t *rate, uint8_t *channels,
-			       uint8_t *sig_bits);
+			       uint32_t *rate, u8 *channels,
+			       u8 *sig_bits);
 extern int gb_audio_gb_set_pcm(struct gb_connection *connection,
 			       uint16_t data_cport, uint32_t format,
-			       uint32_t rate, uint8_t channels,
-			       uint8_t sig_bits);
+			       uint32_t rate, u8 channels,
+			       u8 sig_bits);
 extern int gb_audio_gb_set_tx_data_size(struct gb_connection *connection,
 					uint16_t data_cport, uint16_t size);
 extern int gb_audio_gb_activate_tx(struct gb_connection *connection,

commit 847175e8e660045f9366e7efd091969e8f32cc0c
Author: Vaibhav Agarwal <vaibhav.agarwal@linaro.org>
Date:   Thu Sep 1 11:38:40 2016 +0530

    greybus: audio: Fetch jack_mask, button_mask from module's topology data
    
    Added extra fields namely jack_mask & button_mask for each module_info.
    These fields are required while registering jack & reporting jack
    events.
    
    Earlier, these were hard coded values assuming fixed capabilities say
    HEADSET, LINEOUT, etc. supported by GB-codec driver. Now these are
    computed dynamically based on module's jack capability shared via
    topology data.
    
    Signed-off-by: Vaibhav Agarwal <vaibhav.agarwal@linaro.org>
    Reviewed-by: Mark Greer <mgreer@animalcreek.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@google.com>

diff --git a/drivers/staging/greybus/audio_codec.h b/drivers/staging/greybus/audio_codec.h
index 5a397b0a1886..0a864592560f 100644
--- a/drivers/staging/greybus/audio_codec.h
+++ b/drivers/staging/greybus/audio_codec.h
@@ -73,10 +73,8 @@ enum {
 #define GBCODEC_APB1_MUX_REG_DEFAULT	0x00
 #define GBCODEC_APB2_MUX_REG_DEFAULT	0x00
 
-#define GBCODEC_JACK_MASK (SND_JACK_HEADSET | SND_JACK_LINEOUT | \
-			   SND_JACK_LINEIN | SND_JACK_UNSUPPORTED)
-#define GBCODEC_JACK_BUTTON_MASK (SND_JACK_BTN_0 | SND_JACK_BTN_1 | \
-				  SND_JACK_BTN_2 | SND_JACK_BTN_3)
+#define GBCODEC_JACK_MASK		0x0000FFFF
+#define GBCODEC_JACK_BUTTON_MASK	0xFFFF0000
 
 static const u8 gbcodec_reg_defaults[GBCODEC_REG_COUNT] = {
 	GBCODEC_CTL_REG_DEFAULT,
@@ -176,6 +174,8 @@ struct gbaudio_module_info {
 	char jack_name[NAME_SIZE];
 	char button_name[NAME_SIZE];
 	int jack_type;
+	int jack_mask;
+	int button_mask;
 	int button_status;
 	struct snd_soc_jack headset_jack;
 	struct snd_soc_jack button_jack;

commit 79c222bcb72789456076a26a9bad2acc62cb2cdc
Author: Vaibhav Agarwal <vaibhav.agarwal@linaro.org>
Date:   Thu Sep 1 11:38:38 2016 +0530

    greybus: audio: Remove unnecessary num_jack field from module_info
    
    snd_jack will be registered based on real capabilities shared by
    module's FW instead of parsing widgets and register it with fixed
    capabilities. Remove module_info->num_jack, since it is no more
    required.
    
    Signed-off-by: Vaibhav Agarwal <vaibhav.agarwal@linaro.org>
    Reviewed-by: Mark Greer <mgreer@animalcreek.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@google.com>

diff --git a/drivers/staging/greybus/audio_codec.h b/drivers/staging/greybus/audio_codec.h
index 0153809e72ab..5a397b0a1886 100644
--- a/drivers/staging/greybus/audio_codec.h
+++ b/drivers/staging/greybus/audio_codec.h
@@ -175,7 +175,6 @@ struct gbaudio_module_info {
 	/* jack related */
 	char jack_name[NAME_SIZE];
 	char button_name[NAME_SIZE];
-	int num_jacks;
 	int jack_type;
 	int button_status;
 	struct snd_soc_jack headset_jack;

commit 15c726ea5218b4e40d2331bd8b25b85848f73c42
Author: Vaibhav Agarwal <vaibhav.agarwal@linaro.org>
Date:   Tue Aug 16 12:36:50 2016 +0530

    greybus: audio: Add check for invalid index while mapping control
    
    While mapping control id to define DAPM routes, invalid control index
    may cause kernel oops. Add extra check to validate index while mapping
    names to control_id.
    
    Signed-off-by: Vaibhav Agarwal <vaibhav.agarwal@linaro.org>
    Reviewed-by: Mark Greer <mgreer@animalcreek.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@google.com>

diff --git a/drivers/staging/greybus/audio_codec.h b/drivers/staging/greybus/audio_codec.h
index 0de2ad99003b..0153809e72ab 100644
--- a/drivers/staging/greybus/audio_codec.h
+++ b/drivers/staging/greybus/audio_codec.h
@@ -132,6 +132,7 @@ struct gbaudio_control {
 	char *name;
 	char *wname;
 	const char * const *texts;
+	int items;
 	struct list_head list;
 };
 

commit 591c45227a77505f111dd42347b2ad09b60ed131
Author: Vaibhav Agarwal <vaibhav.agarwal@linaro.org>
Date:   Thu Aug 4 15:14:39 2016 +0530

    greybus: audio: Maintain module stream state for each data connection
    
    For SPK module, each data connection corresponds to codec DAI. Now
    stream state is maintained for each DAI. So, need to maintain stream
    state for each DAI/data connection for individual module as well.
    
    Signed-off-by: Vaibhav Agarwal <vaibhav.agarwal@linaro.org>
    Reviewed-by: Mark Greer <mgreer@animalcreek.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@google.com>

diff --git a/drivers/staging/greybus/audio_codec.h b/drivers/staging/greybus/audio_codec.h
index 40c39b30d951..0de2ad99003b 100644
--- a/drivers/staging/greybus/audio_codec.h
+++ b/drivers/staging/greybus/audio_codec.h
@@ -140,6 +140,8 @@ struct gbaudio_data_connection {
 	__le16 data_cport;
 	struct gb_connection *connection;
 	struct list_head list;
+	/* maintain runtime state for playback/capture stream */
+	int state[2];
 };
 
 /* stream direction */
@@ -178,9 +180,6 @@ struct gbaudio_module_info {
 	struct snd_soc_jack headset_jack;
 	struct snd_soc_jack button_jack;
 
-	/* used by codec_ops */
-	int ctrlstate[2];	/* PB/CAP */
-
 	/* connection info */
 	struct gb_connection *mgmt_connection;
 	size_t num_data_connections;

commit 19866603be2ad58735f82511f3d5f680e61479ea
Author: Vaibhav Agarwal <vaibhav.agarwal@linaro.org>
Date:   Thu Aug 4 15:14:38 2016 +0530

    greybus: audio: Maintain runtime stream params for each DAI
    
    Runtime streams are required while configuring GB module plugged-in
    during active stream. Currently, it is maintained for single stream.
    However, this should be maintained for a stream corresponding to each
    DAI. Fix this!
    
    Signed-off-by: Vaibhav Agarwal <vaibhav.agarwal@linaro.org>
    Reviewed-by: Mark Greer <mgreer@animalcreek.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@google.com>

diff --git a/drivers/staging/greybus/audio_codec.h b/drivers/staging/greybus/audio_codec.h
index 7a2dbc517663..40c39b30d951 100644
--- a/drivers/staging/greybus/audio_codec.h
+++ b/drivers/staging/greybus/audio_codec.h
@@ -98,18 +98,25 @@ enum gbaudio_codec_state {
 	GBAUDIO_CODEC_STOP,
 };
 
-struct gbaudio_stream {
-	const char *dai_name;
+struct gbaudio_stream_params {
 	int state;
 	uint8_t sig_bits, channels;
 	uint32_t format, rate;
 };
 
+struct gbaudio_codec_dai {
+	int id;
+	/* runtime params for playback/capture streams */
+	struct gbaudio_stream_params params[2];
+	struct list_head list;
+};
+
 struct gbaudio_codec_info {
 	struct device *dev;
 	struct snd_soc_codec *codec;
 	struct list_head module_list;
-	struct gbaudio_stream stream[2];	/* PB/CAP */
+	/* to maintain runtime stream params for each DAI */
+	struct list_head dai_list;
 	struct mutex lock;
 	u8 reg[GBCODEC_REG_COUNT];
 };

commit 956adf749d697decd9fb5f46aa0fbbc889f4dfe1
Author: Vaibhav Agarwal <vaibhav.agarwal@linaro.org>
Date:   Thu Aug 4 15:14:36 2016 +0530

    greybus: Remove unused field from data_connection
    
    Audio codec driver internally maintains a struct containing info about
    module's data connection. Remove unused field from this struct.
    
    Signed-off-by: Vaibhav Agarwal <vaibhav.agarwal@linaro.org>
    Reviewed-by: Mark Greer <mgreer@animalcreek.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@google.com>

diff --git a/drivers/staging/greybus/audio_codec.h b/drivers/staging/greybus/audio_codec.h
index 8cd5bd7a6c31..7a2dbc517663 100644
--- a/drivers/staging/greybus/audio_codec.h
+++ b/drivers/staging/greybus/audio_codec.h
@@ -131,8 +131,6 @@ struct gbaudio_control {
 struct gbaudio_data_connection {
 	int id;
 	__le16 data_cport;
-	int cport_configured;
-	char name[NAME_SIZE];
 	struct gb_connection *connection;
 	struct list_head list;
 };

commit b7e7dc0083d662c061dcd547c7dde4db24331ebc
Author: Vaibhav Agarwal <vaibhav.agarwal@linaro.org>
Date:   Thu Aug 4 15:14:34 2016 +0530

    greybus: audio: Add id to identify data connection
    
    Added id field to data connection struct. This is used to identify which
    data connection to use while enabling interface between module & APB.
    
    Signed-off-by: Vaibhav Agarwal <vaibhav.agarwal@linaro.org>
    Reviewed-by: Mark Greer <mgreer@animalcreek.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@google.com>

diff --git a/drivers/staging/greybus/audio_codec.h b/drivers/staging/greybus/audio_codec.h
index c5a8808108db..8cd5bd7a6c31 100644
--- a/drivers/staging/greybus/audio_codec.h
+++ b/drivers/staging/greybus/audio_codec.h
@@ -129,6 +129,7 @@ struct gbaudio_control {
 };
 
 struct gbaudio_data_connection {
+	int id;
 	__le16 data_cport;
 	int cport_configured;
 	char name[NAME_SIZE];

commit 4ffca62a051c3e1722bcaf6a367b419e6e5e40e0
Author: Vaibhav Agarwal <vaibhav.agarwal@linaro.org>
Date:   Thu Aug 4 15:14:32 2016 +0530

    greybus: audio: Update parameters for gbaudio_module_update API
    
    Earlier, module path was enabled based on module's control switch e.g.
    'SPK Amp switch'.  Thus widget's name was sufficient to parse and
    identify the direction. Now individual modules' path will be enabled
    based on AIF widget status. So, it is required to get complete widget
    details, say w->type is used to identify direction (playback/capture)
    and w->sname is used to identify module's DATA connection used for
    communication via greybus.
    
    Signed-off-by: Vaibhav Agarwal <vaibhav.agarwal@linaro.org>
    Reviewed-by: Mark Greer <mgreer@animalcreek.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@google.com>

diff --git a/drivers/staging/greybus/audio_codec.h b/drivers/staging/greybus/audio_codec.h
index 1646b2ca0f0d..c5a8808108db 100644
--- a/drivers/staging/greybus/audio_codec.h
+++ b/drivers/staging/greybus/audio_codec.h
@@ -206,9 +206,9 @@ int gbaudio_tplg_parse_data(struct gbaudio_module_info *module,
 void gbaudio_tplg_release(struct gbaudio_module_info *module);
 
 int gbaudio_module_update(struct gbaudio_codec_info *codec,
-				 const char *w_name,
-				 struct gbaudio_module_info *module,
-				 int enable);
+			  struct snd_soc_dapm_widget *w,
+			  struct gbaudio_module_info *module,
+			  int enable);
 int gbaudio_register_module(struct gbaudio_module_info *module);
 void gbaudio_unregister_module(struct gbaudio_module_info *module);
 

commit 8f60ce76a4eb0911ddd5833badd0d27bb5dfb894
Author: Mark Greer <mgreer@animalcreek.com>
Date:   Tue Aug 2 20:30:28 2016 -0700

    greybus: audio: Remove GET_TX/RX_DELAY message types
    
    The 'GB_AUDIO_TYPE_GET_TX_DELAY' and 'GB_AUDIO_TYPE_GET_RX_DELAY'
    are no longer a part of the Greybus Audio Device Class Protocol
    so remove support for them.  The message numbers are not coalesced
    to prevent compatibility issues between the AP and the module.
    
    Testing Done: Played music using a speaker module
    
    Signed-off-by: Mark Greer <mgreer@animalcreek.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@google.com>

diff --git a/drivers/staging/greybus/audio_codec.h b/drivers/staging/greybus/audio_codec.h
index 40de7e736fa8..1646b2ca0f0d 100644
--- a/drivers/staging/greybus/audio_codec.h
+++ b/drivers/staging/greybus/audio_codec.h
@@ -235,16 +235,12 @@ extern int gb_audio_gb_set_pcm(struct gb_connection *connection,
 			       uint8_t sig_bits);
 extern int gb_audio_gb_set_tx_data_size(struct gb_connection *connection,
 					uint16_t data_cport, uint16_t size);
-extern int gb_audio_gb_get_tx_delay(struct gb_connection *connection,
-				    uint16_t data_cport, uint32_t *delay);
 extern int gb_audio_gb_activate_tx(struct gb_connection *connection,
 				   uint16_t data_cport);
 extern int gb_audio_gb_deactivate_tx(struct gb_connection *connection,
 				     uint16_t data_cport);
 extern int gb_audio_gb_set_rx_data_size(struct gb_connection *connection,
 					uint16_t data_cport, uint16_t size);
-extern int gb_audio_gb_get_rx_delay(struct gb_connection *connection,
-				    uint16_t data_cport, uint32_t *delay);
 extern int gb_audio_gb_activate_rx(struct gb_connection *connection,
 				   uint16_t data_cport);
 extern int gb_audio_gb_deactivate_rx(struct gb_connection *connection,

commit ccc57e20d1cc54b6536a4e63f6da91f42b65000f
Author: Mark Greer <mgreer@animalcreek.com>
Date:   Tue Aug 2 20:36:07 2016 -0700

    greybus: audio: apbridgea: Remove GET_TX/RX_DELAY message types
    
    The 'AUDIO_APBRIDGEA_TYPE_GET_TX_DELAY' and
    'AUDIO_APBRIDGEA_TYPE_GET_RX_DELAY' message types have been
    removed from the AP <-> APBrigdeA Audio Protocol so remove
    them from the code.  Do not coalesce the message type numbers
    to prevent compatibility issues between the AP and APBridgeA.
    
    Testing Done: Played music using a speaker module
    
    Signed-off-by: Mark Greer <mgreer@animalcreek.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@google.com>

diff --git a/drivers/staging/greybus/audio_codec.h b/drivers/staging/greybus/audio_codec.h
index f4936f18647b..40de7e736fa8 100644
--- a/drivers/staging/greybus/audio_codec.h
+++ b/drivers/staging/greybus/audio_codec.h
@@ -260,8 +260,6 @@ extern int gb_audio_apbridgea_unregister_cport(struct gb_connection *connection,
 					       __u8 direction);
 extern int gb_audio_apbridgea_set_tx_data_size(struct gb_connection *connection,
 					       __u16 i2s_port, __u16 size);
-extern int gb_audio_apbridgea_get_tx_delay(struct gb_connection *connection,
-					   __u16 i2s_port, __u32 *delay);
 extern int gb_audio_apbridgea_prepare_tx(struct gb_connection *connection,
 					 __u16 i2s_port);
 extern int gb_audio_apbridgea_start_tx(struct gb_connection *connection,
@@ -272,8 +270,6 @@ extern int gb_audio_apbridgea_shutdown_tx(struct gb_connection *connection,
 					  __u16 i2s_port);
 extern int gb_audio_apbridgea_set_rx_data_size(struct gb_connection *connection,
 					       __u16 i2s_port, __u16 size);
-extern int gb_audio_apbridgea_get_rx_delay(struct gb_connection *connection,
-					   __u16 i2s_port, __u32 *delay);
 extern int gb_audio_apbridgea_prepare_rx(struct gb_connection *connection,
 					 __u16 i2s_port);
 extern int gb_audio_apbridgea_start_rx(struct gb_connection *connection,

commit 0c15a9e0f3f7174718351fcb1c16be944f3b8a57
Author: Vaibhav Agarwal <vaibhav.agarwal@linaro.org>
Date:   Tue Jul 5 17:09:20 2016 -0500

    greybus: audio: topology: Add helper API to map controlid with widget name
    
    This API is used by enumerated controls .get/.set callback functions to
    fetch control id associated with a widget.
    
    Signed-off-by: Vaibhav Agarwal <vaibhav.agarwal@linaro.org>
    Reviewed-by: Mark Greer <mark.greer@animalcreek.com>
    Signed-off-by: Alex Elder <elder@linaro.org>

diff --git a/drivers/staging/greybus/audio_codec.h b/drivers/staging/greybus/audio_codec.h
index 5a19467c1623..f4936f18647b 100644
--- a/drivers/staging/greybus/audio_codec.h
+++ b/drivers/staging/greybus/audio_codec.h
@@ -123,6 +123,7 @@ struct gbaudio_widget {
 struct gbaudio_control {
 	__u8 id;
 	char *name;
+	char *wname;
 	const char * const *texts;
 	struct list_head list;
 };

commit 852859ab8186e7a492fdec5db5ef219bf625c21a
Author: Vaibhav Agarwal <vaibhav.agarwal@linaro.org>
Date:   Wed May 4 16:29:21 2016 +0530

    greybus: audio: Remove redundant lock protection & is_connected field
    
    Each module maintains connected status & a lock to protect it.
    Using codec->lock we can safely serialize ASoC specific callbacks
    (in response to mixer_ctl update or dai_ops) and gb module
    disconnect. Thus is_connected field can be removed.
    
    Signed-off-by: Vaibhav Agarwal <vaibhav.agarwal@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@google.com>

diff --git a/drivers/staging/greybus/audio_codec.h b/drivers/staging/greybus/audio_codec.h
index 6182b20c5a27..5a19467c1623 100644
--- a/drivers/staging/greybus/audio_codec.h
+++ b/drivers/staging/greybus/audio_codec.h
@@ -172,8 +172,6 @@ struct gbaudio_module_info {
 	struct snd_soc_jack button_jack;
 
 	/* used by codec_ops */
-	struct mutex lock;
-	int is_connected;
 	int ctrlstate[2];	/* PB/CAP */
 
 	/* connection info */

commit 89de9a06213240b9266f9f368a867cf90d0024bf
Author: Vaibhav Agarwal <vaibhav.agarwal@linaro.org>
Date:   Wed Mar 30 13:23:56 2016 +0530

    greybus: audio: Update device type based on widget types
    
    Device type info shared to above HAL is currently hard coded
    to SPK only. Actual device type is identifed while parsing
    widget types from topology FW shared by codec module.
    
    Signed-off-by: Vaibhav Agarwal <vaibhav.agarwal@linaro.org>
    Reviewed-by: Mark Greer <mgreer@animalcreek.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@google.com>

diff --git a/drivers/staging/greybus/audio_codec.h b/drivers/staging/greybus/audio_codec.h
index 165b3595dae9..6182b20c5a27 100644
--- a/drivers/staging/greybus/audio_codec.h
+++ b/drivers/staging/greybus/audio_codec.h
@@ -36,6 +36,21 @@ enum gbcodec_reg_index {
 	GBCODEC_REG_COUNT
 };
 
+/* device_type should be same as defined in audio.h (Android media layer) */
+enum {
+	GBAUDIO_DEVICE_NONE                     = 0x0,
+	/* reserved bits */
+	GBAUDIO_DEVICE_BIT_IN                   = 0x80000000,
+	GBAUDIO_DEVICE_BIT_DEFAULT              = 0x40000000,
+	/* output devices */
+	GBAUDIO_DEVICE_OUT_SPEAKER              = 0x2,
+	GBAUDIO_DEVICE_OUT_WIRED_HEADSET        = 0x4,
+	GBAUDIO_DEVICE_OUT_WIRED_HEADPHONE      = 0x8,
+	/* input devices */
+	GBAUDIO_DEVICE_IN_BUILTIN_MIC           = GBAUDIO_DEVICE_BIT_IN | 0x4,
+	GBAUDIO_DEVICE_IN_WIRED_HEADSET         = GBAUDIO_DEVICE_BIT_IN | 0x10,
+};
+
 /* bit 0-SPK, 1-HP, 2-DAC,
  * 4-MIC, 5-HSMIC, 6-MIC2
  */
@@ -144,6 +159,8 @@ struct gbaudio_module_info {
 	/* need to share this info to above user space */
 	int manager_id;
 	char name[NAME_SIZE];
+	unsigned int ip_devices;
+	unsigned int op_devices;
 
 	/* jack related */
 	char jack_name[NAME_SIZE];

commit 64a7e2cceb75ccabaec713944a95511605751b29
Author: Vaibhav Agarwal <vaibhav.agarwal@linaro.org>
Date:   Tue Mar 29 16:32:36 2016 +0530

    greybus: audio: Added jack support to audio module
    
    Register jack with ASoC sound card in case audio module
    populates it via codec FW. Currently, only a single jack
    with 4 buttons can be registered for each module.
    
    Signed-off-by: Vaibhav Agarwal <vaibhav.agarwal@linaro.org>
    Reviewed-by: Mark Greer <mgreer@animalcreek.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@google.com>

diff --git a/drivers/staging/greybus/audio_codec.h b/drivers/staging/greybus/audio_codec.h
index a2697dd62949..165b3595dae9 100644
--- a/drivers/staging/greybus/audio_codec.h
+++ b/drivers/staging/greybus/audio_codec.h
@@ -10,6 +10,7 @@
 #define __LINUX_GBAUDIO_CODEC_H
 
 #include <sound/soc.h>
+#include <sound/jack.h>
 
 #include "greybus.h"
 #include "greybus_protocols.h"
@@ -57,6 +58,11 @@ enum gbcodec_reg_index {
 #define GBCODEC_APB1_MUX_REG_DEFAULT	0x00
 #define GBCODEC_APB2_MUX_REG_DEFAULT	0x00
 
+#define GBCODEC_JACK_MASK (SND_JACK_HEADSET | SND_JACK_LINEOUT | \
+			   SND_JACK_LINEIN | SND_JACK_UNSUPPORTED)
+#define GBCODEC_JACK_BUTTON_MASK (SND_JACK_BTN_0 | SND_JACK_BTN_1 | \
+				  SND_JACK_BTN_2 | SND_JACK_BTN_3)
+
 static const u8 gbcodec_reg_defaults[GBCODEC_REG_COUNT] = {
 	GBCODEC_CTL_REG_DEFAULT,
 	GBCODEC_MUTE_REG_DEFAULT,
@@ -139,6 +145,15 @@ struct gbaudio_module_info {
 	int manager_id;
 	char name[NAME_SIZE];
 
+	/* jack related */
+	char jack_name[NAME_SIZE];
+	char button_name[NAME_SIZE];
+	int num_jacks;
+	int jack_type;
+	int button_status;
+	struct snd_soc_jack headset_jack;
+	struct snd_soc_jack button_jack;
+
 	/* used by codec_ops */
 	struct mutex lock;
 	int is_connected;

commit 6dd67645f22cfeb55a32e9a08c92deb297d06935
Author: Vaibhav Agarwal <vaibhav.agarwal@linaro.org>
Date:   Tue Mar 29 23:31:41 2016 +0530

    greybus: audio: Use single codec driver registration
    
    We have single I2S port via APB1 for communication with all
    audio modules. Thus, we should register single codec driver
    and manage all individual audio modules internally within
    this driver.
    
    Signed-off-by: Vaibhav Agarwal <vaibhav.agarwal@linaro.org>
    Reviewed-by: Mark Greer <mark.greer@animalcreek.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@google.com>

diff --git a/drivers/staging/greybus/audio_codec.h b/drivers/staging/greybus/audio_codec.h
index 9197adcbc32e..a2697dd62949 100644
--- a/drivers/staging/greybus/audio_codec.h
+++ b/drivers/staging/greybus/audio_codec.h
@@ -68,6 +68,31 @@ static const u8 gbcodec_reg_defaults[GBCODEC_REG_COUNT] = {
 	GBCODEC_APB2_MUX_REG_DEFAULT,
 };
 
+enum gbaudio_codec_state {
+	GBAUDIO_CODEC_SHUTDOWN = 0,
+	GBAUDIO_CODEC_STARTUP,
+	GBAUDIO_CODEC_HWPARAMS,
+	GBAUDIO_CODEC_PREPARE,
+	GBAUDIO_CODEC_START,
+	GBAUDIO_CODEC_STOP,
+};
+
+struct gbaudio_stream {
+	const char *dai_name;
+	int state;
+	uint8_t sig_bits, channels;
+	uint32_t format, rate;
+};
+
+struct gbaudio_codec_info {
+	struct device *dev;
+	struct snd_soc_codec *codec;
+	struct list_head module_list;
+	struct gbaudio_stream stream[2];	/* PB/CAP */
+	struct mutex lock;
+	u8 reg[GBCODEC_REG_COUNT];
+};
+
 struct gbaudio_widget {
 	__u8 id;
 	const char *name;
@@ -81,81 +106,80 @@ struct gbaudio_control {
 	struct list_head list;
 };
 
-struct gbaudio_dai {
+struct gbaudio_data_connection {
 	__le16 data_cport;
+	int cport_configured;
 	char name[NAME_SIZE];
-	/* DAI users */
-	atomic_t users;
 	struct gb_connection *connection;
 	struct list_head list;
-	wait_queue_head_t wait_queue;
 };
 
-struct gbaudio_codec_info {
+/* stream direction */
+#define GB_PLAYBACK	BIT(0)
+#define GB_CAPTURE	BIT(1)
+
+enum gbaudio_module_state {
+	GBAUDIO_MODULE_OFF = 0,
+	GBAUDIO_MODULE_ON,
+};
+
+struct gbaudio_module_info {
 	/* module info */
+	struct device *dev;
 	int dev_id;	/* check if it should be bundle_id/hd_cport_id */
 	int vid;
 	int pid;
 	int slot;
 	int type;
-	int dai_added;
-	int codec_registered;
 	int set_uevent;
 	char vstr[NAME_SIZE];
 	char pstr[NAME_SIZE];
 	struct list_head list;
-	struct gb_audio_topology *topology;
 	/* need to share this info to above user space */
 	int manager_id;
 	char name[NAME_SIZE];
 
-	/*
-	 * there can be a rece condition between gb_audio_disconnect()
-	 * and dai->trigger from above ASoC layer.
-	 * To avoid any deadlock over codec_info->lock, atomic variable
-	 * is used.
-	 */
-	atomic_t is_connected;
+	/* used by codec_ops */
 	struct mutex lock;
+	int is_connected;
+	int ctrlstate[2];	/* PB/CAP */
 
-	/* soc related data */
-	struct snd_soc_codec *codec;
-	struct device *dev;
-	u8 reg[GBCODEC_REG_COUNT];
-
-	/* dai_link related */
-	char card_name[NAME_SIZE];
-	char *dailink_name[MAX_DAIS];
-	int num_dai_links;
-
+	/* connection info */
 	struct gb_connection *mgmt_connection;
 	size_t num_data_connections;
+	struct list_head data_list;
+
 	/* topology related */
 	int num_dais;
-	int num_kcontrols;
+	int num_controls;
 	int num_dapm_widgets;
 	int num_dapm_routes;
 	unsigned long dai_offset;
 	unsigned long widget_offset;
 	unsigned long control_offset;
 	unsigned long route_offset;
-	struct snd_kcontrol_new *kctls;
-	struct snd_soc_dapm_widget *widgets;
-	struct snd_soc_dapm_route *routes;
+	struct snd_kcontrol_new *controls;
+	struct snd_soc_dapm_widget *dapm_widgets;
+	struct snd_soc_dapm_route *dapm_routes;
 	struct snd_soc_dai_driver *dais;
 
-	/* lists */
-	struct list_head dai_list;
 	struct list_head widget_list;
-	struct list_head codec_ctl_list;
+	struct list_head ctl_list;
 	struct list_head widget_ctl_list;
+
+	struct gb_audio_topology *topology;
 };
 
-struct gbaudio_dai *gbaudio_find_dai(struct gbaudio_codec_info *gbcodec,
-				     int data_cport, const char *name);
-int gbaudio_tplg_parse_data(struct gbaudio_codec_info *gbcodec,
+int gbaudio_tplg_parse_data(struct gbaudio_module_info *module,
 			       struct gb_audio_topology *tplg_data);
-void gbaudio_tplg_release(struct gbaudio_codec_info *gbcodec);
+void gbaudio_tplg_release(struct gbaudio_module_info *module);
+
+int gbaudio_module_update(struct gbaudio_codec_info *codec,
+				 const char *w_name,
+				 struct gbaudio_module_info *module,
+				 int enable);
+int gbaudio_register_module(struct gbaudio_module_info *module);
+void gbaudio_unregister_module(struct gbaudio_module_info *module);
 
 /* protocol related */
 extern int gb_audio_gb_get_topology(struct gb_connection *connection,

commit 5bbe14b7acc2a00f51b23812ffc596577d94e80b
Author: Mark Greer <mgreer@animalcreek.com>
Date:   Mon Feb 29 15:31:02 2016 -0700

    greybus: audio: Split start and stop APBridgeA requests
    
    Provide finer-grained control of the audio streaming on APB1 by
    splitting the transmit/receive start and stop requests into prepare,
    start, stop, and shutdown.
    
    CC: Vaibhav Agarwal <vaibhav.agarwal@linaro.org>
    Signed-off-by: Mark Greer <mgreer@animalcreek.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@google.com>

diff --git a/drivers/staging/greybus/audio_codec.h b/drivers/staging/greybus/audio_codec.h
index 06312031af35..9197adcbc32e 100644
--- a/drivers/staging/greybus/audio_codec.h
+++ b/drivers/staging/greybus/audio_codec.h
@@ -207,17 +207,25 @@ extern int gb_audio_apbridgea_set_tx_data_size(struct gb_connection *connection,
 					       __u16 i2s_port, __u16 size);
 extern int gb_audio_apbridgea_get_tx_delay(struct gb_connection *connection,
 					   __u16 i2s_port, __u32 *delay);
+extern int gb_audio_apbridgea_prepare_tx(struct gb_connection *connection,
+					 __u16 i2s_port);
 extern int gb_audio_apbridgea_start_tx(struct gb_connection *connection,
 				       __u16 i2s_port, __u64 timestamp);
 extern int gb_audio_apbridgea_stop_tx(struct gb_connection *connection,
 				      __u16 i2s_port);
+extern int gb_audio_apbridgea_shutdown_tx(struct gb_connection *connection,
+					  __u16 i2s_port);
 extern int gb_audio_apbridgea_set_rx_data_size(struct gb_connection *connection,
 					       __u16 i2s_port, __u16 size);
 extern int gb_audio_apbridgea_get_rx_delay(struct gb_connection *connection,
 					   __u16 i2s_port, __u32 *delay);
+extern int gb_audio_apbridgea_prepare_rx(struct gb_connection *connection,
+					 __u16 i2s_port);
 extern int gb_audio_apbridgea_start_rx(struct gb_connection *connection,
 				       __u16 i2s_port);
 extern int gb_audio_apbridgea_stop_rx(struct gb_connection *connection,
 				      __u16 i2s_port);
+extern int gb_audio_apbridgea_shutdown_rx(struct gb_connection *connection,
+					  __u16 i2s_port);
 
 #endif /* __LINUX_GBAUDIO_CODEC_H */

commit 4a8e519902e73c833fb57f69bc194c2274dcdc30
Author: Mark Greer <mgreer@animalcreek.com>
Date:   Fri Feb 26 17:04:36 2016 -0700

    greybus: audio: Register CPorts for specific directions
    
    Currently, it is assumed that all audio data CPorts registered on
    APB1 are used for transmitting audio data.  That may not always be
    true like when a microphone is connected but no speakers.  Also,
    the current special protocol lacks a way to tell APB1 whether the CPort
    being registered is for transmitting, receiving, or both.
    
    Fix by adding a 'direction' field to the register and unregister CPort
    requests and define bits indicating which direction (or both) audio
    data will go on that CPort.
    
    Signed-off-by: Mark Greer <mgreer@animalcreek.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@google.com>

diff --git a/drivers/staging/greybus/audio_codec.h b/drivers/staging/greybus/audio_codec.h
index fc60c36aa040..06312031af35 100644
--- a/drivers/staging/greybus/audio_codec.h
+++ b/drivers/staging/greybus/audio_codec.h
@@ -198,9 +198,11 @@ extern int gb_audio_apbridgea_set_config(struct gb_connection *connection,
 					 __u16 i2s_port, __u32 format,
 					 __u32 rate, __u32 mclk_freq);
 extern int gb_audio_apbridgea_register_cport(struct gb_connection *connection,
-					     __u16 i2s_port, __u16 cportid);
+					     __u16 i2s_port, __u16 cportid,
+					     __u8 direction);
 extern int gb_audio_apbridgea_unregister_cport(struct gb_connection *connection,
-					       __u16 i2s_port, __u16 cportid);
+					       __u16 i2s_port, __u16 cportid,
+					       __u8 direction);
 extern int gb_audio_apbridgea_set_tx_data_size(struct gb_connection *connection,
 					       __u16 i2s_port, __u16 size);
 extern int gb_audio_apbridgea_get_tx_delay(struct gb_connection *connection,

commit 29386f058a758f5ef6e8a522101fcbfd0ef07a19
Author: Vaibhav Agarwal <vaibhav.agarwal@linaro.org>
Date:   Tue Feb 16 00:27:28 2016 +0530

    greybus: audio: schedule workqueue to perform codec cleanup on module removal
    
    In response to codec module removal, user space is reported about
    the event. In response to this, ALSA layer will update DAPM route
    and cleanup DAPM states.
    As a fallback mechanism, kernel can cleanup the DAPM state for codec
    module. But, this would cause immediate playback (first trial) to fail,
    since DSP is still in inconsistent state.
    To avoid such situation, a workqueue is scheduled for codec cleanup
    with timeout=50ms.
    Thus, normally it is expected from above layers to update routes and
    perform cleanup. However, fallback mechanism still holds good after
    50ms.
    
    Signed-off-by: Vaibhav Agarwal <vaibhav.agarwal@linaro.org>
    Reviewed-by: Mark Greer <mgreer@animalcreek.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@google.com>

diff --git a/drivers/staging/greybus/audio_codec.h b/drivers/staging/greybus/audio_codec.h
index 4c19bd884488..fc60c36aa040 100644
--- a/drivers/staging/greybus/audio_codec.h
+++ b/drivers/staging/greybus/audio_codec.h
@@ -88,6 +88,7 @@ struct gbaudio_dai {
 	atomic_t users;
 	struct gb_connection *connection;
 	struct list_head list;
+	wait_queue_head_t wait_queue;
 };
 
 struct gbaudio_codec_info {

commit 3994e0b139c709047cdeb44b6c28cfb39f89f3f2
Author: Vaibhav Agarwal <vaibhav.agarwal@linaro.org>
Date:   Thu Jan 28 21:15:40 2016 +0530

    greybus: audio: use variable 'is_connected' to maintain module state
    
    there is race condition between _disconnect() request &
    stop_trigger() in case of abrupt module removal.
    And sometimes this can lead to deadlock while acquiring
    codec_info->lock.
    To avoid such situation, atomic variable is used to maintain
    codec connected state.
    During dai operations (trigger, shutdown, etc.), 'is_connected'
    variable is validated to avoid unnecessary lock acquire in
    case module already removed.
    
    Signed-off-by: Vaibhav Agarwal <vaibhav.agarwal@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@google.com>

diff --git a/drivers/staging/greybus/audio_codec.h b/drivers/staging/greybus/audio_codec.h
index 56110913b70e..4c19bd884488 100644
--- a/drivers/staging/greybus/audio_codec.h
+++ b/drivers/staging/greybus/audio_codec.h
@@ -108,6 +108,15 @@ struct gbaudio_codec_info {
 	int manager_id;
 	char name[NAME_SIZE];
 
+	/*
+	 * there can be a rece condition between gb_audio_disconnect()
+	 * and dai->trigger from above ASoC layer.
+	 * To avoid any deadlock over codec_info->lock, atomic variable
+	 * is used.
+	 */
+	atomic_t is_connected;
+	struct mutex lock;
+
 	/* soc related data */
 	struct snd_soc_codec *codec;
 	struct device *dev;
@@ -139,7 +148,6 @@ struct gbaudio_codec_info {
 	struct list_head widget_list;
 	struct list_head codec_ctl_list;
 	struct list_head widget_ctl_list;
-	struct mutex lock;
 };
 
 struct gbaudio_dai *gbaudio_find_dai(struct gbaudio_codec_info *gbcodec,

commit 796fad441cb248c1eac88bfb3a5929bb1a10fabb
Author: Vaibhav Agarwal <vaibhav.agarwal@linaro.org>
Date:   Thu Jan 28 21:15:39 2016 +0530

    greybus: audio: codec driver cleanup
    
    audio codec driver is now moved to bundle driver approach.
    This resolved many race conditions related to audio mgmt &
    data connection init/exit sequence.
    Thus, a lot of helper functions can now be safely removed.
    
    Signed-off-by: Vaibhav Agarwal <vaibhav.agarwal@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@google.com>

diff --git a/drivers/staging/greybus/audio_codec.h b/drivers/staging/greybus/audio_codec.h
index bba48a59bf4d..56110913b70e 100644
--- a/drivers/staging/greybus/audio_codec.h
+++ b/drivers/staging/greybus/audio_codec.h
@@ -84,6 +84,8 @@ struct gbaudio_control {
 struct gbaudio_dai {
 	__le16 data_cport;
 	char name[NAME_SIZE];
+	/* DAI users */
+	atomic_t users;
 	struct gb_connection *connection;
 	struct list_head list;
 };
@@ -116,8 +118,9 @@ struct gbaudio_codec_info {
 	char *dailink_name[MAX_DAIS];
 	int num_dai_links;
 
-	/* topology related */
 	struct gb_connection *mgmt_connection;
+	size_t num_data_connections;
+	/* topology related */
 	int num_dais;
 	int num_kcontrols;
 	int num_dapm_widgets;
@@ -131,9 +134,6 @@ struct gbaudio_codec_info {
 	struct snd_soc_dapm_route *routes;
 	struct snd_soc_dai_driver *dais;
 
-	/* codec users */
-	atomic_t users;
-
 	/* lists */
 	struct list_head dai_list;
 	struct list_head widget_list;
@@ -142,17 +142,8 @@ struct gbaudio_codec_info {
 	struct mutex lock;
 };
 
-struct gb_audio {
-	struct gb_connection		*mgmt_connection;
-	size_t				num_data_connections;
-	struct gbaudio_codec_info	*gbcodec;
-	struct gb_connection		*data_connection[0];
-};
-
-struct gbaudio_dai *gbaudio_add_dai(struct gbaudio_codec_info *gbcodec,
-				    int data_cport,
-				    struct gb_connection *connection,
-				    const char *name);
+struct gbaudio_dai *gbaudio_find_dai(struct gbaudio_codec_info *gbcodec,
+				     int data_cport, const char *name);
 int gbaudio_tplg_parse_data(struct gbaudio_codec_info *gbcodec,
 			       struct gb_audio_topology *tplg_data);
 void gbaudio_tplg_release(struct gbaudio_codec_info *gbcodec);

commit 35e28794dcddf2eab1d53b9f3bf5a0eeee82e3c9
Author: Viresh Kumar <viresh.kumar@linaro.org>
Date:   Wed Jan 27 16:57:48 2016 +0530

    greybus: audio_codec: convert to bundle driver
    
    Convert the legacy audio management and data protocol drivers to a
    bundle driver.
    
    The Audio bundle driver can support a single management and any number
    of data cports, and so we expect multiple data cports to be present for
    the bundle during initialization.
    
    Signed-off-by: Viresh Kumar <viresh.kumar@linaro.org>
    Reviewed-by: Johan Hovold <johan@hovoldconsulting.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@google.com>

diff --git a/drivers/staging/greybus/audio_codec.h b/drivers/staging/greybus/audio_codec.h
index 0b587ef74d16..bba48a59bf4d 100644
--- a/drivers/staging/greybus/audio_codec.h
+++ b/drivers/staging/greybus/audio_codec.h
@@ -142,6 +142,13 @@ struct gbaudio_codec_info {
 	struct mutex lock;
 };
 
+struct gb_audio {
+	struct gb_connection		*mgmt_connection;
+	size_t				num_data_connections;
+	struct gbaudio_codec_info	*gbcodec;
+	struct gb_connection		*data_connection[0];
+};
+
 struct gbaudio_dai *gbaudio_add_dai(struct gbaudio_codec_info *gbcodec,
 				    int data_cport,
 				    struct gb_connection *connection,

commit 25de3491f11064845a45606fa5828a200ecf8c53
Author: Vaibhav Agarwal <vaibhav.agarwal@linaro.org>
Date:   Wed Jan 13 14:07:55 2016 -0700

    greybus: audio: Cleanup GB protocol connections in case of abrupt codec removal
    
    We need to clean up GB protocl connections, otherwise successive
    codec insertions fails repeatedly.
    
    NOTE: As per suggestion, since codec is already removed, one should
    not trigger any GB command. It'll cause a delay of atleast TIMEOUT
    value.
    HOwever, failing to cleanup GB protocol, causes successive module
    insertion to fail
    
    Signed-off-by: Vaibhav Agarwal <vaibhav.agarwal@linaro.org>
    Signed-off-by: Mark Greer <mgreer@animalcreek.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@google.com>

diff --git a/drivers/staging/greybus/audio_codec.h b/drivers/staging/greybus/audio_codec.h
index fcf3a0602176..0b587ef74d16 100644
--- a/drivers/staging/greybus/audio_codec.h
+++ b/drivers/staging/greybus/audio_codec.h
@@ -131,6 +131,9 @@ struct gbaudio_codec_info {
 	struct snd_soc_dapm_route *routes;
 	struct snd_soc_dai_driver *dais;
 
+	/* codec users */
+	atomic_t users;
+
 	/* lists */
 	struct list_head dai_list;
 	struct list_head widget_list;

commit 17247da52ee8694429e089f452dd14f4dbda9f06
Author: Vaibhav Agarwal <vaibhav.agarwal@linaro.org>
Date:   Wed Jan 13 14:07:53 2016 -0700

    greybus: audio: Report uevent on GB codec module insertion/removal
    
    GB-Audio-manager module is currently used to report uevent
    to above layer in response to any codec module inserted or
    removed.
    
    Signed-off-by: Vaibhav Agarwal <vaibhav.agarwal@linaro.org>
    Signed-off-by: Mark Greer <mgreer@animalcreek.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@google.com>

diff --git a/drivers/staging/greybus/audio_codec.h b/drivers/staging/greybus/audio_codec.h
index 5051e06dfff6..fcf3a0602176 100644
--- a/drivers/staging/greybus/audio_codec.h
+++ b/drivers/staging/greybus/audio_codec.h
@@ -97,10 +97,13 @@ struct gbaudio_codec_info {
 	int type;
 	int dai_added;
 	int codec_registered;
+	int set_uevent;
 	char vstr[NAME_SIZE];
 	char pstr[NAME_SIZE];
 	struct list_head list;
 	struct gb_audio_topology *topology;
+	/* need to share this info to above user space */
+	int manager_id;
 	char name[NAME_SIZE];
 
 	/* soc related data */

commit 6339d2322c47f4b8ebabf9daf0130328ed72648b
Author: Vaibhav Agarwal <vaibhav.agarwal@linaro.org>
Date:   Wed Jan 13 14:07:51 2016 -0700

    greybus: audio: Add topology parser for GB codec
    
    For each GB codec module inserted, DAPM widgets, kcontrols, routes
    and DAIs can be fetched through greybus in a binary chunk and parsed
    locally to create & populate DAPM graph for the specific module.
    
    It is required by each codec module to populate a minimum set of
    kcontrols with fixed names to support basic audio usecase.
    To support advanced features of codec module, the same can be polpulated
    with existing topology parser. However, to use them for different usecase
    separate mechanism (may be via MSP) is required to inform userspace about
    their configuration value & enable/disable sequence.
    
    ToDos:
    Currently, support for enumerated kcontrol/dapm control is hardcoded.
    Need to add complete logic within the parser.
    
    Signed-off-by: Vaibhav Agarwal <vaibhav.agarwal@linaro.org>
    Signed-off-by: Mark Greer <mgreer@animalcreek.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@google.com>

diff --git a/drivers/staging/greybus/audio_codec.h b/drivers/staging/greybus/audio_codec.h
index 39bd995719c2..5051e06dfff6 100644
--- a/drivers/staging/greybus/audio_codec.h
+++ b/drivers/staging/greybus/audio_codec.h
@@ -68,6 +68,19 @@ static const u8 gbcodec_reg_defaults[GBCODEC_REG_COUNT] = {
 	GBCODEC_APB2_MUX_REG_DEFAULT,
 };
 
+struct gbaudio_widget {
+	__u8 id;
+	const char *name;
+	struct list_head list;
+};
+
+struct gbaudio_control {
+	__u8 id;
+	char *name;
+	const char * const *texts;
+	struct list_head list;
+};
+
 struct gbaudio_dai {
 	__le16 data_cport;
 	char name[NAME_SIZE];
@@ -87,6 +100,7 @@ struct gbaudio_codec_info {
 	char vstr[NAME_SIZE];
 	char pstr[NAME_SIZE];
 	struct list_head list;
+	struct gb_audio_topology *topology;
 	char name[NAME_SIZE];
 
 	/* soc related data */
@@ -105,6 +119,10 @@ struct gbaudio_codec_info {
 	int num_kcontrols;
 	int num_dapm_widgets;
 	int num_dapm_routes;
+	unsigned long dai_offset;
+	unsigned long widget_offset;
+	unsigned long control_offset;
+	unsigned long route_offset;
 	struct snd_kcontrol_new *kctls;
 	struct snd_soc_dapm_widget *widgets;
 	struct snd_soc_dapm_route *routes;
@@ -112,10 +130,23 @@ struct gbaudio_codec_info {
 
 	/* lists */
 	struct list_head dai_list;
+	struct list_head widget_list;
+	struct list_head codec_ctl_list;
+	struct list_head widget_ctl_list;
 	struct mutex lock;
 };
 
+struct gbaudio_dai *gbaudio_add_dai(struct gbaudio_codec_info *gbcodec,
+				    int data_cport,
+				    struct gb_connection *connection,
+				    const char *name);
+int gbaudio_tplg_parse_data(struct gbaudio_codec_info *gbcodec,
+			       struct gb_audio_topology *tplg_data);
+void gbaudio_tplg_release(struct gbaudio_codec_info *gbcodec);
+
 /* protocol related */
+extern int gb_audio_gb_get_topology(struct gb_connection *connection,
+				    struct gb_audio_topology **topology);
 extern int gb_audio_gb_get_control(struct gb_connection *connection,
 				   uint8_t control_id, uint8_t index,
 				   struct gb_audio_ctl_elem_value *value);

commit 2a70e49f9183d72287e84ac4d6a4080e3f2a6475
Author: Vaibhav Agarwal <vaibhav.agarwal@linaro.org>
Date:   Wed Jan 13 14:07:50 2016 -0700

    greybus: audio: Use greybus connection device for codec registration
    
    Use GB Audio mgmt, data protocol ids to register codec module with
    GB protocol. And in response to mgmt->connection_init(), register
    GB codec driver with ASoC.
    
    Now, using msm8994  machine to register DAI link dynamically on
    codec insertion.
    
    ToDos:
    - snd_soc_register_codec() uses driver->name to identify device id.
      However, for GB device, .driver{} is not yet populated by GB core.
      Thus, defining dummy structure within codec driver. This should
      come from GB core itself.
      Even existing .driver{} may cause problem in case of multiple
      modules inserted or inserted at a different slot.
    - Fix logic for gbcodec->dais & gbcodec->dailinks. Current
      implementation contains some hard coded data with assumption of
      count=1.
    - Evaluate definition of 'gbaudio_dailink.be_id' in case of multiple
      DAI links.
    
    Signed-off-by: Vaibhav Agarwal <vaibhav.agarwal@linaro.org>
    Signed-off-by: Mark Greer <mgreer@animalcreek.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@google.com>

diff --git a/drivers/staging/greybus/audio_codec.h b/drivers/staging/greybus/audio_codec.h
index f8597b3de808..39bd995719c2 100644
--- a/drivers/staging/greybus/audio_codec.h
+++ b/drivers/staging/greybus/audio_codec.h
@@ -15,6 +15,7 @@
 #include "greybus_protocols.h"
 
 #define NAME_SIZE	32
+#define MAX_DAIS	2	/* APB1, APB2 */
 
 enum {
 	APB1_PCM = 0,
@@ -67,24 +68,54 @@ static const u8 gbcodec_reg_defaults[GBCODEC_REG_COUNT] = {
 	GBCODEC_APB2_MUX_REG_DEFAULT,
 };
 
+struct gbaudio_dai {
+	__le16 data_cport;
+	char name[NAME_SIZE];
+	struct gb_connection *connection;
+	struct list_head list;
+};
+
 struct gbaudio_codec_info {
+	/* module info */
+	int dev_id;	/* check if it should be bundle_id/hd_cport_id */
+	int vid;
+	int pid;
+	int slot;
+	int type;
+	int dai_added;
+	int codec_registered;
+	char vstr[NAME_SIZE];
+	char pstr[NAME_SIZE];
+	struct list_head list;
+	char name[NAME_SIZE];
+
+	/* soc related data */
 	struct snd_soc_codec *codec;
-
-	bool usable;
+	struct device *dev;
 	u8 reg[GBCODEC_REG_COUNT];
-	int registered;
 
+	/* dai_link related */
+	char card_name[NAME_SIZE];
+	char *dailink_name[MAX_DAIS];
+	int num_dai_links;
+
+	/* topology related */
+	struct gb_connection *mgmt_connection;
+	int num_dais;
 	int num_kcontrols;
 	int num_dapm_widgets;
 	int num_dapm_routes;
 	struct snd_kcontrol_new *kctls;
 	struct snd_soc_dapm_widget *widgets;
 	struct snd_soc_dapm_route *routes;
+	struct snd_soc_dai_driver *dais;
+
+	/* lists */
+	struct list_head dai_list;
 	struct mutex lock;
 };
 
-extern int gb_audio_gb_get_topology(struct gb_connection *connection,
-				    struct gb_audio_topology **topology);
+/* protocol related */
 extern int gb_audio_gb_get_control(struct gb_connection *connection,
 				   uint8_t control_id, uint8_t index,
 				   struct gb_audio_ctl_elem_value *value);

commit 7885342cc2727e2e9acae1597ebc88bedfea8464
Author: Vaibhav Agarwal <vaibhav.agarwal@linaro.org>
Date:   Wed Jan 13 14:07:49 2016 -0700

    greybus: audio: Build audio module conditionally
    
    Added CONFIG_XXX flag check before compiling audio module.
    Once we add dynamic DAI link registration from audio driver,
    this check wil be required to avoid compilation failures with
    other kernel revisions.
    
    Also, renamed header file to better align with .c file name.
    
    Signed-off-by: Vaibhav Agarwal <vaibhav.agarwal@linaro.org>
    Signed-off-by: Mark Greer <mgreer@animalcreek.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@google.com>

diff --git a/drivers/staging/greybus/audio_codec.h b/drivers/staging/greybus/audio_codec.h
new file mode 100644
index 000000000000..f8597b3de808
--- /dev/null
+++ b/drivers/staging/greybus/audio_codec.h
@@ -0,0 +1,146 @@
+/*
+ * Greybus audio driver
+ * Copyright 2015 Google Inc.
+ * Copyright 2015 Linaro Ltd.
+ *
+ * Released under the GPLv2 only.
+ */
+
+#ifndef __LINUX_GBAUDIO_CODEC_H
+#define __LINUX_GBAUDIO_CODEC_H
+
+#include <sound/soc.h>
+
+#include "greybus.h"
+#include "greybus_protocols.h"
+
+#define NAME_SIZE	32
+
+enum {
+	APB1_PCM = 0,
+	APB2_PCM,
+	NUM_CODEC_DAIS,
+};
+
+enum gbcodec_reg_index {
+	GBCODEC_CTL_REG,
+	GBCODEC_MUTE_REG,
+	GBCODEC_PB_LVOL_REG,
+	GBCODEC_PB_RVOL_REG,
+	GBCODEC_CAP_LVOL_REG,
+	GBCODEC_CAP_RVOL_REG,
+	GBCODEC_APB1_MUX_REG,
+	GBCODEC_APB2_MUX_REG,
+	GBCODEC_REG_COUNT
+};
+
+/* bit 0-SPK, 1-HP, 2-DAC,
+ * 4-MIC, 5-HSMIC, 6-MIC2
+ */
+#define GBCODEC_CTL_REG_DEFAULT		0x00
+
+/* bit 0,1 - APB1-PB-L/R
+ * bit 2,3 - APB2-PB-L/R
+ * bit 4,5 - APB1-Cap-L/R
+ * bit 6,7 - APB2-Cap-L/R
+ */
+#define	GBCODEC_MUTE_REG_DEFAULT	0x00
+
+/* 0-127 steps */
+#define	GBCODEC_PB_VOL_REG_DEFAULT	0x00
+#define	GBCODEC_CAP_VOL_REG_DEFAULT	0x00
+
+/* bit 0,1,2 - PB stereo, left, right
+ * bit 8,9,10 - Cap stereo, left, right
+ */
+#define GBCODEC_APB1_MUX_REG_DEFAULT	0x00
+#define GBCODEC_APB2_MUX_REG_DEFAULT	0x00
+
+static const u8 gbcodec_reg_defaults[GBCODEC_REG_COUNT] = {
+	GBCODEC_CTL_REG_DEFAULT,
+	GBCODEC_MUTE_REG_DEFAULT,
+	GBCODEC_PB_VOL_REG_DEFAULT,
+	GBCODEC_PB_VOL_REG_DEFAULT,
+	GBCODEC_CAP_VOL_REG_DEFAULT,
+	GBCODEC_CAP_VOL_REG_DEFAULT,
+	GBCODEC_APB1_MUX_REG_DEFAULT,
+	GBCODEC_APB2_MUX_REG_DEFAULT,
+};
+
+struct gbaudio_codec_info {
+	struct snd_soc_codec *codec;
+
+	bool usable;
+	u8 reg[GBCODEC_REG_COUNT];
+	int registered;
+
+	int num_kcontrols;
+	int num_dapm_widgets;
+	int num_dapm_routes;
+	struct snd_kcontrol_new *kctls;
+	struct snd_soc_dapm_widget *widgets;
+	struct snd_soc_dapm_route *routes;
+	struct mutex lock;
+};
+
+extern int gb_audio_gb_get_topology(struct gb_connection *connection,
+				    struct gb_audio_topology **topology);
+extern int gb_audio_gb_get_control(struct gb_connection *connection,
+				   uint8_t control_id, uint8_t index,
+				   struct gb_audio_ctl_elem_value *value);
+extern int gb_audio_gb_set_control(struct gb_connection *connection,
+				   uint8_t control_id, uint8_t index,
+				   struct gb_audio_ctl_elem_value *value);
+extern int gb_audio_gb_enable_widget(struct gb_connection *connection,
+				     uint8_t widget_id);
+extern int gb_audio_gb_disable_widget(struct gb_connection *connection,
+				      uint8_t widget_id);
+extern int gb_audio_gb_get_pcm(struct gb_connection *connection,
+			       uint16_t data_cport, uint32_t *format,
+			       uint32_t *rate, uint8_t *channels,
+			       uint8_t *sig_bits);
+extern int gb_audio_gb_set_pcm(struct gb_connection *connection,
+			       uint16_t data_cport, uint32_t format,
+			       uint32_t rate, uint8_t channels,
+			       uint8_t sig_bits);
+extern int gb_audio_gb_set_tx_data_size(struct gb_connection *connection,
+					uint16_t data_cport, uint16_t size);
+extern int gb_audio_gb_get_tx_delay(struct gb_connection *connection,
+				    uint16_t data_cport, uint32_t *delay);
+extern int gb_audio_gb_activate_tx(struct gb_connection *connection,
+				   uint16_t data_cport);
+extern int gb_audio_gb_deactivate_tx(struct gb_connection *connection,
+				     uint16_t data_cport);
+extern int gb_audio_gb_set_rx_data_size(struct gb_connection *connection,
+					uint16_t data_cport, uint16_t size);
+extern int gb_audio_gb_get_rx_delay(struct gb_connection *connection,
+				    uint16_t data_cport, uint32_t *delay);
+extern int gb_audio_gb_activate_rx(struct gb_connection *connection,
+				   uint16_t data_cport);
+extern int gb_audio_gb_deactivate_rx(struct gb_connection *connection,
+				     uint16_t data_cport);
+extern int gb_audio_apbridgea_set_config(struct gb_connection *connection,
+					 __u16 i2s_port, __u32 format,
+					 __u32 rate, __u32 mclk_freq);
+extern int gb_audio_apbridgea_register_cport(struct gb_connection *connection,
+					     __u16 i2s_port, __u16 cportid);
+extern int gb_audio_apbridgea_unregister_cport(struct gb_connection *connection,
+					       __u16 i2s_port, __u16 cportid);
+extern int gb_audio_apbridgea_set_tx_data_size(struct gb_connection *connection,
+					       __u16 i2s_port, __u16 size);
+extern int gb_audio_apbridgea_get_tx_delay(struct gb_connection *connection,
+					   __u16 i2s_port, __u32 *delay);
+extern int gb_audio_apbridgea_start_tx(struct gb_connection *connection,
+				       __u16 i2s_port, __u64 timestamp);
+extern int gb_audio_apbridgea_stop_tx(struct gb_connection *connection,
+				      __u16 i2s_port);
+extern int gb_audio_apbridgea_set_rx_data_size(struct gb_connection *connection,
+					       __u16 i2s_port, __u16 size);
+extern int gb_audio_apbridgea_get_rx_delay(struct gb_connection *connection,
+					   __u16 i2s_port, __u32 *delay);
+extern int gb_audio_apbridgea_start_rx(struct gb_connection *connection,
+				       __u16 i2s_port);
+extern int gb_audio_apbridgea_stop_rx(struct gb_connection *connection,
+				      __u16 i2s_port);
+
+#endif /* __LINUX_GBAUDIO_CODEC_H */
