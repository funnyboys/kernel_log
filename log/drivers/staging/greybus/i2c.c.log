commit 2587768a511a419e04b45fe8ce7be94f7d037e16
Author: Lourdes Pedrajas <lu@pplo.net>
Date:   Thu Mar 12 20:03:49 2020 +0100

    staging: greybus: i2c: remove unused pointers
    
    Remove unused pointers in gb_i2c_algorithm structure and gb_i2c_probe()
    function, as they are not touched since 2014.
    
    Suggested-by: Johan Hovold <johan@kernel.org>
    Signed-off-by: Lourdes Pedrajas <lu@pplo.net>
    Acked-by: Viresh Kumar <viresh.kumar@linaro.org>
    Link: https://lore.kernel.org/r/20200312190349.7892-1-lu@pplo.net
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/greybus/i2c.c b/drivers/staging/greybus/i2c.c
index c48fa1de89b0..de2f6516da09 100644
--- a/drivers/staging/greybus/i2c.c
+++ b/drivers/staging/greybus/i2c.c
@@ -224,7 +224,6 @@ static u32 gb_i2c_functionality(struct i2c_adapter *adap)
 
 static const struct i2c_algorithm gb_i2c_algorithm = {
 	.master_xfer	= gb_i2c_master_xfer,
-	/* .smbus_xfer	= gb_i2c_smbus_xfer, */
 	.functionality	= gb_i2c_functionality,
 };
 
@@ -267,7 +266,6 @@ static int gb_i2c_probe(struct gbphy_device *gbphy_dev,
 	adapter->owner = THIS_MODULE;
 	adapter->class = I2C_CLASS_HWMON | I2C_CLASS_SPD;
 	adapter->algo = &gb_i2c_algorithm;
-	/* adapter->algo_data = what? */
 
 	adapter->dev.parent = &gbphy_dev->dev;
 	snprintf(adapter->name, sizeof(adapter->name), "Greybus i2c adapter");

commit add1a2faba5dc6320a1f6e2167530c9174feb718
Author: Lourdes Pedrajas <lu@pplo.net>
Date:   Mon Mar 9 18:06:43 2020 +0100

    staging: greybus: i2c.c: remove commented out function
    
    Remove function gb_i2c_smbus_xfer() which is unused.
    
    Signed-off-by: Lourdes Pedrajas <lu@pplo.net>
    Link: https://lore.kernel.org/r/20200309170643.4947-1-lu@pplo.net
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/greybus/i2c.c b/drivers/staging/greybus/i2c.c
index ab06fc3b9e7e..c48fa1de89b0 100644
--- a/drivers/staging/greybus/i2c.c
+++ b/drivers/staging/greybus/i2c.c
@@ -215,20 +215,6 @@ static int gb_i2c_master_xfer(struct i2c_adapter *adap, struct i2c_msg *msgs,
 	return gb_i2c_transfer_operation(gb_i2c_dev, msgs, msg_count);
 }
 
-#if 0
-/* Later */
-static int gb_i2c_smbus_xfer(struct i2c_adapter *adap,
-			     u16 addr, unsigned short flags, char read_write,
-			     u8 command, int size, union i2c_smbus_data *data)
-{
-	struct gb_i2c_device *gb_i2c_dev;
-
-	gb_i2c_dev = i2c_get_adapdata(adap);
-
-	return 0;
-}
-#endif
-
 static u32 gb_i2c_functionality(struct i2c_adapter *adap)
 {
 	struct gb_i2c_device *gb_i2c_dev = i2c_get_adapdata(adap);

commit ec0ad868173da8a75121f9dc116a5d5478ff614d
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Sun Aug 25 07:54:27 2019 +0200

    staging: greybus: move core include files to include/linux/greybus/
    
    With the goal of moving the core of the greybus code out of staging, the
    include files need to be moved to include/linux/greybus.h and
    include/linux/greybus/
    
    Cc: Vaibhav Hiremath <hvaibhav.linux@gmail.com>
    Cc: Johan Hovold <johan@kernel.org>
    Cc: Vaibhav Agarwal <vaibhav.sr@gmail.com>
    Cc: Rui Miguel Silva <rmfrfs@gmail.com>
    Cc: David Lin <dtwlin@gmail.com>
    Cc: "Bryan O'Donoghue" <pure.logic@nexus-software.ie>
    Cc: greybus-dev@lists.linaro.org
    Cc: devel@driverdev.osuosl.org
    Acked-by: Mark Greer <mgreer@animalcreek.com>
    Acked-by: Viresh Kumar <viresh.kumar@linaro.org>
    Acked-by: Alex Elder <elder@kernel.org>
    Link: https://lore.kernel.org/r/20190825055429.18547-8-gregkh@linuxfoundation.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/greybus/i2c.c b/drivers/staging/greybus/i2c.c
index b2522043a1a4..ab06fc3b9e7e 100644
--- a/drivers/staging/greybus/i2c.c
+++ b/drivers/staging/greybus/i2c.c
@@ -10,8 +10,8 @@
 #include <linux/module.h>
 #include <linux/slab.h>
 #include <linux/i2c.h>
+#include <linux/greybus.h>
 
-#include "greybus.h"
 #include "gbphy.h"
 
 struct gb_i2c_device {

commit baacd53a3b72d1dc74a340d16b8cf560dfe24717
Author: Nishka Dasgupta <nishkadg.linux@gmail.com>
Date:   Fri Jul 5 18:41:31 2019 +0530

    staging: greybus: Replace function gb_i2c_device_setup()
    
    Remove function gb_i2c_device_setup as all it does is call
    gb_i2c_functionality_operation.
    Rename gb_i2c_functionality_operation to gb_i2c_device_setup to maintain
    compatibility with call sites.
    Issue found with Coccinelle.
    
    Signed-off-by: Nishka Dasgupta <nishkadg.linux@gmail.com>
    Link: https://lore.kernel.org/r/20190705131131.27354-1-nishkadg.linux@gmail.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/greybus/i2c.c b/drivers/staging/greybus/i2c.c
index 7bb85a75d3b1..b2522043a1a4 100644
--- a/drivers/staging/greybus/i2c.c
+++ b/drivers/staging/greybus/i2c.c
@@ -31,7 +31,14 @@ static u32 gb_i2c_functionality_map(u32 gb_i2c_functionality)
 	return gb_i2c_functionality;	/* All bits the same for now */
 }
 
-static int gb_i2c_functionality_operation(struct gb_i2c_device *gb_i2c_dev)
+/*
+ * Do initial setup of the i2c device.  This includes verifying we
+ * can support it (based on the protocol version it advertises).
+ * If that's OK, we get and cached its functionality bits.
+ *
+ * Note: gb_i2c_dev->connection is assumed to have been valid.
+ */
+static int gb_i2c_device_setup(struct gb_i2c_device *gb_i2c_dev)
 {
 	struct gb_i2c_functionality_response response;
 	u32 functionality;
@@ -235,19 +242,6 @@ static const struct i2c_algorithm gb_i2c_algorithm = {
 	.functionality	= gb_i2c_functionality,
 };
 
-/*
- * Do initial setup of the i2c device.  This includes verifying we
- * can support it (based on the protocol version it advertises).
- * If that's OK, we get and cached its functionality bits.
- *
- * Note: gb_i2c_dev->connection is assumed to have been valid.
- */
-static int gb_i2c_device_setup(struct gb_i2c_device *gb_i2c_dev)
-{
-	/* Assume the functionality never changes, just get it once */
-	return gb_i2c_functionality_operation(gb_i2c_dev);
-}
-
 static int gb_i2c_probe(struct gbphy_device *gbphy_dev,
 			const struct gbphy_device_id *id)
 {

commit 8478c35a858c75bf2b00917009ba1b46c1b9b7b4
Author: Cristian Sicilia <sicilia.cristian@gmail.com>
Date:   Sun Nov 25 17:58:15 2018 +0100

    staging: greybus: Parenthesis alignment
    
    Some parameters are aligned with parentheses.
    Some parentheses was opened at end of line.
    
    Signed-off-by: Cristian Sicilia <sicilia.cristian@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/greybus/i2c.c b/drivers/staging/greybus/i2c.c
index 58a37deb6579..7bb85a75d3b1 100644
--- a/drivers/staging/greybus/i2c.c
+++ b/drivers/staging/greybus/i2c.c
@@ -107,7 +107,7 @@ gb_i2c_operation_create(struct gb_connection *connection,
 
 	/* Response consists only of incoming data */
 	operation = gb_operation_create(connection, GB_I2C_TYPE_TRANSFER,
-				request_size, data_in_size, GFP_KERNEL);
+					request_size, data_in_size, GFP_KERNEL);
 	if (!operation)
 		return NULL;
 
@@ -137,7 +137,7 @@ gb_i2c_operation_create(struct gb_connection *connection,
 }
 
 static void gb_i2c_decode_response(struct i2c_msg *msgs, u32 msg_count,
-				struct gb_i2c_transfer_response *response)
+				   struct gb_i2c_transfer_response *response)
 {
 	struct i2c_msg *msg = msgs;
 	u8 *data;
@@ -164,7 +164,7 @@ static bool gb_i2c_expected_transfer_error(int errno)
 }
 
 static int gb_i2c_transfer_operation(struct gb_i2c_device *gb_i2c_dev,
-					struct i2c_msg *msgs, u32 msg_count)
+				     struct i2c_msg *msgs, u32 msg_count)
 {
 	struct gb_connection *connection = gb_i2c_dev->connection;
 	struct device *dev = &gb_i2c_dev->gbphy_dev->dev;
@@ -199,7 +199,7 @@ static int gb_i2c_transfer_operation(struct gb_i2c_device *gb_i2c_dev,
 }
 
 static int gb_i2c_master_xfer(struct i2c_adapter *adap, struct i2c_msg *msgs,
-		int msg_count)
+			      int msg_count)
 {
 	struct gb_i2c_device *gb_i2c_dev;
 
@@ -211,8 +211,8 @@ static int gb_i2c_master_xfer(struct i2c_adapter *adap, struct i2c_msg *msgs,
 #if 0
 /* Later */
 static int gb_i2c_smbus_xfer(struct i2c_adapter *adap,
-			u16 addr, unsigned short flags, char read_write,
-			u8 command, int size, union i2c_smbus_data *data)
+			     u16 addr, unsigned short flags, char read_write,
+			     u8 command, int size, union i2c_smbus_data *data)
 {
 	struct gb_i2c_device *gb_i2c_dev;
 
@@ -249,7 +249,7 @@ static int gb_i2c_device_setup(struct gb_i2c_device *gb_i2c_dev)
 }
 
 static int gb_i2c_probe(struct gbphy_device *gbphy_dev,
-			 const struct gbphy_device_id *id)
+			const struct gbphy_device_id *id)
 {
 	struct gb_connection *connection;
 	struct gb_i2c_device *gb_i2c_dev;
@@ -260,9 +260,10 @@ static int gb_i2c_probe(struct gbphy_device *gbphy_dev,
 	if (!gb_i2c_dev)
 		return -ENOMEM;
 
-	connection = gb_connection_create(gbphy_dev->bundle,
-					  le16_to_cpu(gbphy_dev->cport_desc->id),
-					  NULL);
+	connection =
+		gb_connection_create(gbphy_dev->bundle,
+				     le16_to_cpu(gbphy_dev->cport_desc->id),
+				     NULL);
 	if (IS_ERR(connection)) {
 		ret = PTR_ERR(connection);
 		goto exit_i2cdev_free;

commit 863dbc52e7f0e5acd7b4883f3933543a81c474c7
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Tue Nov 7 14:58:42 2017 +0100

    staging: greybus: Remove redundant license text
    
    Now that the SPDX tag is in all greybus files, that identifies the
    license in a specific and legally-defined manner.  So the extra GPL text
    wording can be removed as it is no longer needed at all.
    
    This is done on a quest to remove the 700+ different ways that files in
    the kernel describe the GPL license text.  And there's unneeded stuff
    like the address (sometimes incorrect) for the FSF which is never
    needed.
    
    No copyright headers or other non-license-description text was removed.
    
    Cc: Vaibhav Hiremath <hvaibhav.linux@gmail.com>
    Reviewed-by: Alex Elder <elder@linaro.org>
    Acked-by: Vaibhav Agarwal <vaibhav.sr@gmail.com>
    Acked-by: David Lin <dtwlin@gmail.com>
    Acked-by: Johan Hovold <johan@kernel.org>
    Acked-by: Viresh Kumar <viresh.kumar@linaro.org>
    Acked-by: Mark Greer <mgreer@animalcreek.com>
    Acked-by: Rui Miguel Silva <rmfrfs@gmail.com>
    Acked-by: "Bryan O'Donoghue" <pure.logic@nexus-software.ie>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/greybus/i2c.c b/drivers/staging/greybus/i2c.c
index 02fd168ed014..58a37deb6579 100644
--- a/drivers/staging/greybus/i2c.c
+++ b/drivers/staging/greybus/i2c.c
@@ -4,8 +4,6 @@
  *
  * Copyright 2014 Google Inc.
  * Copyright 2014 Linaro Ltd.
- *
- * Released under the GPLv2 only.
  */
 
 #include <linux/kernel.h>

commit eb50fd3a22c770f36be275295b782f3ea52e3215
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Tue Nov 7 14:58:41 2017 +0100

    staging: greybus: add SPDX identifiers to all greybus driver files
    
    It's good to have SPDX identifiers in all files to make it easier to
    audit the kernel tree for correct licenses.
    
    Update the drivers/staging/greybus files files with the correct SPDX
    license identifier based on the license text in the file itself.  The
    SPDX identifier is a legally binding shorthand, which can be used
    instead of the full boiler plate text.
    
    This work is based on a script and data from Thomas Gleixner, Philippe
    Ombredanne, and Kate Stewart.
    
    Cc: Vaibhav Hiremath <hvaibhav.linux@gmail.com>
    Cc: "Bryan O'Donoghue" <pure.logic@nexus-software.ie>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: Kate Stewart <kstewart@linuxfoundation.org>
    Cc: Philippe Ombredanne <pombredanne@nexb.com>
    Acked-by: Vaibhav Agarwal <vaibhav.sr@gmail.com>
    Acked-by: David Lin <dtwlin@gmail.com>
    Reviewed-by: Alex Elder <elder@linaro.org>
    Acked-by: Johan Hovold <johan@kernel.org>
    Acked-by: Viresh Kumar <viresh.kumar@linaro.org>
    Acked-by: Mark Greer <mgreer@animalcreek.com>
    Acked-by: Rui Miguel Silva <rmfrfs@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/greybus/i2c.c b/drivers/staging/greybus/i2c.c
index c2a50087000c..02fd168ed014 100644
--- a/drivers/staging/greybus/i2c.c
+++ b/drivers/staging/greybus/i2c.c
@@ -1,3 +1,4 @@
+// SPDX-License-Identifier: GPL-2.0
 /*
  * I2C bridge driver for the Greybus "generic" I2C module.
  *

commit c0e72f6af7363de8868e2847450a828f27e96c81
Author: David Lin <dtwlin@google.com>
Date:   Thu Jul 14 15:13:00 2016 -0500

    greybus: i2c: add runtime pm support
    
    Add runtime pm support to camera i2c bridged phy device class driver
    
    Testing Done:
     - Passed #gb_test.sh -v -t i2c
    
    Signed-off-by: David Lin <dtwlin@google.com>
    Signed-off-by: Axel Haslam <haslam_axel@projectara.com>
    Reviewed-by: Johan Hovold <johan@hovoldconsulting.com>
    Signed-off-by: Alex Elder <elder@linaro.org>

diff --git a/drivers/staging/greybus/i2c.c b/drivers/staging/greybus/i2c.c
index 2541bdbb9dd9..c2a50087000c 100644
--- a/drivers/staging/greybus/i2c.c
+++ b/drivers/staging/greybus/i2c.c
@@ -176,6 +176,10 @@ static int gb_i2c_transfer_operation(struct gb_i2c_device *gb_i2c_dev,
 	if (!operation)
 		return -ENOMEM;
 
+	ret = gbphy_runtime_get_sync(gb_i2c_dev->gbphy_dev);
+	if (ret)
+		goto exit_operation_put;
+
 	ret = gb_operation_request_send_sync(operation);
 	if (!ret) {
 		struct gb_i2c_transfer_response *response;
@@ -187,6 +191,9 @@ static int gb_i2c_transfer_operation(struct gb_i2c_device *gb_i2c_dev,
 		dev_err(dev, "transfer operation failed (%d)\n", ret);
 	}
 
+	gbphy_runtime_put_autosuspend(gb_i2c_dev->gbphy_dev);
+
+exit_operation_put:
 	gb_operation_put(operation);
 
 	return ret;
@@ -290,6 +297,7 @@ static int gb_i2c_probe(struct gbphy_device *gbphy_dev,
 	if (ret)
 		goto exit_connection_disable;
 
+	gbphy_runtime_put_autosuspend(gbphy_dev);
 	return 0;
 
 exit_connection_disable:
@@ -306,6 +314,11 @@ static void gb_i2c_remove(struct gbphy_device *gbphy_dev)
 {
 	struct gb_i2c_device *gb_i2c_dev = gb_gbphy_get_data(gbphy_dev);
 	struct gb_connection *connection = gb_i2c_dev->connection;
+	int ret;
+
+	ret = gbphy_runtime_get_sync(gbphy_dev);
+	if (ret)
+		gbphy_runtime_get_noresume(gbphy_dev);
 
 	i2c_del_adapter(&gb_i2c_dev->adapter);
 	gb_connection_disable(connection);

commit 64060fe95458f22bac7327b2ee8dc5ce9e488d44
Author: Viresh Kumar <viresh.kumar@linaro.org>
Date:   Mon May 30 11:31:53 2016 +0530

    greybus: gbphy: Remove protocol specific version handling
    
    We should be using the generic version handling at bundle level, instead
    of at protocol level for bridged PHY devices as well.
    
    The bundle version handling is already in place, though it is *not* used
    today as we haven't bumped the version of control protocol yet.
    
    Remove protocol specific handling for bridged PHY devices.
    
    Tested on EVT 1.5 with gpbridge-test module. No nuttx changes are
    required with this.
    
    Signed-off-by: Viresh Kumar <viresh.kumar@linaro.org>
    Reviewed-by: Johan Hovold <johan@hovoldconsulting.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@google.com>

diff --git a/drivers/staging/greybus/i2c.c b/drivers/staging/greybus/i2c.c
index 6c14e6776adf..2541bdbb9dd9 100644
--- a/drivers/staging/greybus/i2c.c
+++ b/drivers/staging/greybus/i2c.c
@@ -271,10 +271,6 @@ static int gb_i2c_probe(struct gbphy_device *gbphy_dev,
 	if (ret)
 		goto exit_connection_destroy;
 
-	ret = gb_gbphy_get_version(connection);
-	if (ret)
-		goto exit_connection_disable;
-
 	ret = gb_i2c_device_setup(gb_i2c_dev);
 	if (ret)
 		goto exit_connection_disable;

commit e54b106dd1be50377fe8365392466e080b659ab6
Author: Sandeep Patil <patil_sandeep@projectara.com>
Date:   Thu May 19 08:52:39 2016 -0700

    greybus: gpbridge: rename 'gpbridge' to 'gbphy' everywhere
    
    The 'gpbridge' name didn't relaly reflect what the bus is; which
    is a bus for bridged-phy devices. So, rename all instances
    of 'gpbridge' to more appropriate 'gbphy'
    
    Testing Done:
    Build and boot tested. 'lsgb' will stop displaying 'GPBridge' devices
    until I change the library to reflect this change.
    
    Signed-off-by: Sandeep Patil <patil_sandeep@projectara.com>
    Suggested-by: Greg Kroah-Hartman <gregkh@google.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@google.com>

diff --git a/drivers/staging/greybus/i2c.c b/drivers/staging/greybus/i2c.c
index 69d6f07c0822..6c14e6776adf 100644
--- a/drivers/staging/greybus/i2c.c
+++ b/drivers/staging/greybus/i2c.c
@@ -13,11 +13,11 @@
 #include <linux/i2c.h>
 
 #include "greybus.h"
-#include "gpbridge.h"
+#include "gbphy.h"
 
 struct gb_i2c_device {
 	struct gb_connection	*connection;
-	struct gpbridge_device	*gpbdev;
+	struct gbphy_device	*gbphy_dev;
 
 	u32			functionality;
 
@@ -85,7 +85,7 @@ gb_i2c_operation_create(struct gb_connection *connection,
 	u32 i;
 
 	if (msg_count > (u32)U16_MAX) {
-		dev_err(&gb_i2c_dev->gpbdev->dev, "msg_count (%u) too big\n",
+		dev_err(&gb_i2c_dev->gbphy_dev->dev, "msg_count (%u) too big\n",
 			msg_count);
 		return NULL;
 	}
@@ -168,7 +168,7 @@ static int gb_i2c_transfer_operation(struct gb_i2c_device *gb_i2c_dev,
 					struct i2c_msg *msgs, u32 msg_count)
 {
 	struct gb_connection *connection = gb_i2c_dev->connection;
-	struct device *dev = &gb_i2c_dev->gpbdev->dev;
+	struct device *dev = &gb_i2c_dev->gbphy_dev->dev;
 	struct gb_operation *operation;
 	int ret;
 
@@ -242,8 +242,8 @@ static int gb_i2c_device_setup(struct gb_i2c_device *gb_i2c_dev)
 	return gb_i2c_functionality_operation(gb_i2c_dev);
 }
 
-static int gb_i2c_probe(struct gpbridge_device *gpbdev,
-			 const struct gpbridge_device_id *id)
+static int gb_i2c_probe(struct gbphy_device *gbphy_dev,
+			 const struct gbphy_device_id *id)
 {
 	struct gb_connection *connection;
 	struct gb_i2c_device *gb_i2c_dev;
@@ -254,8 +254,8 @@ static int gb_i2c_probe(struct gpbridge_device *gpbdev,
 	if (!gb_i2c_dev)
 		return -ENOMEM;
 
-	connection = gb_connection_create(gpbdev->bundle,
-					  le16_to_cpu(gpbdev->cport_desc->id),
+	connection = gb_connection_create(gbphy_dev->bundle,
+					  le16_to_cpu(gbphy_dev->cport_desc->id),
 					  NULL);
 	if (IS_ERR(connection)) {
 		ret = PTR_ERR(connection);
@@ -264,14 +264,14 @@ static int gb_i2c_probe(struct gpbridge_device *gpbdev,
 
 	gb_i2c_dev->connection = connection;
 	gb_connection_set_data(connection, gb_i2c_dev);
-	gb_i2c_dev->gpbdev = gpbdev;
-	gb_gpbridge_set_data(gpbdev, gb_i2c_dev);
+	gb_i2c_dev->gbphy_dev = gbphy_dev;
+	gb_gbphy_set_data(gbphy_dev, gb_i2c_dev);
 
 	ret = gb_connection_enable(connection);
 	if (ret)
 		goto exit_connection_destroy;
 
-	ret = gb_gpbridge_get_version(connection);
+	ret = gb_gbphy_get_version(connection);
 	if (ret)
 		goto exit_connection_disable;
 
@@ -286,7 +286,7 @@ static int gb_i2c_probe(struct gpbridge_device *gpbdev,
 	adapter->algo = &gb_i2c_algorithm;
 	/* adapter->algo_data = what? */
 
-	adapter->dev.parent = &gpbdev->dev;
+	adapter->dev.parent = &gbphy_dev->dev;
 	snprintf(adapter->name, sizeof(adapter->name), "Greybus i2c adapter");
 	i2c_set_adapdata(adapter, gb_i2c_dev);
 
@@ -306,9 +306,9 @@ static int gb_i2c_probe(struct gpbridge_device *gpbdev,
 	return ret;
 }
 
-static void gb_i2c_remove(struct gpbridge_device *gpbdev)
+static void gb_i2c_remove(struct gbphy_device *gbphy_dev)
 {
-	struct gb_i2c_device *gb_i2c_dev = gb_gpbridge_get_data(gpbdev);
+	struct gb_i2c_device *gb_i2c_dev = gb_gbphy_get_data(gbphy_dev);
 	struct gb_connection *connection = gb_i2c_dev->connection;
 
 	i2c_del_adapter(&gb_i2c_dev->adapter);
@@ -317,18 +317,18 @@ static void gb_i2c_remove(struct gpbridge_device *gpbdev)
 	kfree(gb_i2c_dev);
 }
 
-static const struct gpbridge_device_id gb_i2c_id_table[] = {
-	{ GPBRIDGE_PROTOCOL(GREYBUS_PROTOCOL_I2C) },
+static const struct gbphy_device_id gb_i2c_id_table[] = {
+	{ GBPHY_PROTOCOL(GREYBUS_PROTOCOL_I2C) },
 	{ },
 };
-MODULE_DEVICE_TABLE(gpbridge, gb_i2c_id_table);
+MODULE_DEVICE_TABLE(gbphy, gb_i2c_id_table);
 
-static struct gpbridge_driver i2c_driver = {
+static struct gbphy_driver i2c_driver = {
 	.name		= "i2c",
 	.probe		= gb_i2c_probe,
 	.remove		= gb_i2c_remove,
 	.id_table	= gb_i2c_id_table,
 };
 
-module_gpbridge_driver(i2c_driver);
+module_gbphy_driver(i2c_driver);
 MODULE_LICENSE("GPL v2");

commit d6046b44a5663865a316f9d73a44d64c99aa9fb2
Author: Viresh Kumar <viresh.kumar@linaro.org>
Date:   Mon May 9 18:15:07 2016 +0530

    greybus: i2c : Create separate module
    
    Create separate module for i2c gpbridge driver.
    
    Tested on EVT 1.5 by inserting GP test module, all the devices were
    enumerated correctly.
    
    Signed-off-by: Viresh Kumar <viresh.kumar@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@google.com>

diff --git a/drivers/staging/greybus/i2c.c b/drivers/staging/greybus/i2c.c
index b49e8b455ab1..69d6f07c0822 100644
--- a/drivers/staging/greybus/i2c.c
+++ b/drivers/staging/greybus/i2c.c
@@ -321,6 +321,7 @@ static const struct gpbridge_device_id gb_i2c_id_table[] = {
 	{ GPBRIDGE_PROTOCOL(GREYBUS_PROTOCOL_I2C) },
 	{ },
 };
+MODULE_DEVICE_TABLE(gpbridge, gb_i2c_id_table);
 
 static struct gpbridge_driver i2c_driver = {
 	.name		= "i2c",
@@ -328,4 +329,6 @@ static struct gpbridge_driver i2c_driver = {
 	.remove		= gb_i2c_remove,
 	.id_table	= gb_i2c_id_table,
 };
-gb_gpbridge_builtin_driver(i2c_driver);
+
+module_gpbridge_driver(i2c_driver);
+MODULE_LICENSE("GPL v2");

commit cf1d8bee59aa995fcc6514be7a67e9575bbe5498
Author: Greg Kroah-Hartman <gregkh@google.com>
Date:   Thu May 5 14:32:32 2016 +0530

    greybus: I2C: convert to a gpbridge driver
    
    This converts the I2C driver to be a gpbridge driver, moving it away
    from the "legacy" interface.
    
    Testing Done: Tested on gbsim.
    
    Signed-off-by: Greg Kroah-Hartman <gregkh@google.com>
    Signed-off-by: Vaibhav Hiremath <vaibhav.hiremath@linaro.org>
    [vaibhav.hiremath@linaro.org: 1.Changed code to retain init/exit fns of
    drivers. 2.Exit path fix. 3. Fixed review comments]
    Reviewed-by: Viresh Kumar <viresh.kumar@linaro.org>
    Tested-by: Viresh Kumar <viresh.kumar@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@google.com>

diff --git a/drivers/staging/greybus/i2c.c b/drivers/staging/greybus/i2c.c
index 73b85815d1eb..b49e8b455ab1 100644
--- a/drivers/staging/greybus/i2c.c
+++ b/drivers/staging/greybus/i2c.c
@@ -17,6 +17,7 @@
 
 struct gb_i2c_device {
 	struct gb_connection	*connection;
+	struct gpbridge_device	*gpbdev;
 
 	u32			functionality;
 
@@ -71,6 +72,7 @@ static struct gb_operation *
 gb_i2c_operation_create(struct gb_connection *connection,
 			struct i2c_msg *msgs, u32 msg_count)
 {
+	struct gb_i2c_device *gb_i2c_dev = gb_connection_get_data(connection);
 	struct gb_i2c_transfer_request *request;
 	struct gb_operation *operation;
 	struct gb_i2c_transfer_op *op;
@@ -83,7 +85,7 @@ gb_i2c_operation_create(struct gb_connection *connection,
 	u32 i;
 
 	if (msg_count > (u32)U16_MAX) {
-		dev_err(&connection->bundle->dev, "msg_count (%u) too big\n",
+		dev_err(&gb_i2c_dev->gpbdev->dev, "msg_count (%u) too big\n",
 			msg_count);
 		return NULL;
 	}
@@ -166,7 +168,7 @@ static int gb_i2c_transfer_operation(struct gb_i2c_device *gb_i2c_dev,
 					struct i2c_msg *msgs, u32 msg_count)
 {
 	struct gb_connection *connection = gb_i2c_dev->connection;
-	struct device *dev = &connection->bundle->dev;
+	struct device *dev = &gb_i2c_dev->gpbdev->dev;
 	struct gb_operation *operation;
 	int ret;
 
@@ -240,8 +242,10 @@ static int gb_i2c_device_setup(struct gb_i2c_device *gb_i2c_dev)
 	return gb_i2c_functionality_operation(gb_i2c_dev);
 }
 
-static int gb_i2c_connection_init(struct gb_connection *connection)
+static int gb_i2c_probe(struct gpbridge_device *gpbdev,
+			 const struct gpbridge_device_id *id)
 {
+	struct gb_connection *connection;
 	struct gb_i2c_device *gb_i2c_dev;
 	struct i2c_adapter *adapter;
 	int ret;
@@ -250,12 +254,30 @@ static int gb_i2c_connection_init(struct gb_connection *connection)
 	if (!gb_i2c_dev)
 		return -ENOMEM;
 
-	gb_i2c_dev->connection = connection;	/* refcount? */
+	connection = gb_connection_create(gpbdev->bundle,
+					  le16_to_cpu(gpbdev->cport_desc->id),
+					  NULL);
+	if (IS_ERR(connection)) {
+		ret = PTR_ERR(connection);
+		goto exit_i2cdev_free;
+	}
+
+	gb_i2c_dev->connection = connection;
 	gb_connection_set_data(connection, gb_i2c_dev);
+	gb_i2c_dev->gpbdev = gpbdev;
+	gb_gpbridge_set_data(gpbdev, gb_i2c_dev);
+
+	ret = gb_connection_enable(connection);
+	if (ret)
+		goto exit_connection_destroy;
+
+	ret = gb_gpbridge_get_version(connection);
+	if (ret)
+		goto exit_connection_disable;
 
 	ret = gb_i2c_device_setup(gb_i2c_dev);
 	if (ret)
-		goto out_err;
+		goto exit_connection_disable;
 
 	/* Looks good; up our i2c adapter */
 	adapter = &gb_i2c_dev->adapter;
@@ -264,39 +286,46 @@ static int gb_i2c_connection_init(struct gb_connection *connection)
 	adapter->algo = &gb_i2c_algorithm;
 	/* adapter->algo_data = what? */
 
-	adapter->dev.parent = &connection->bundle->dev;
+	adapter->dev.parent = &gpbdev->dev;
 	snprintf(adapter->name, sizeof(adapter->name), "Greybus i2c adapter");
 	i2c_set_adapdata(adapter, gb_i2c_dev);
 
 	ret = i2c_add_adapter(adapter);
 	if (ret)
-		goto out_err;
+		goto exit_connection_disable;
 
 	return 0;
-out_err:
-	/* kref_put(gb_i2c_dev->connection) */
+
+exit_connection_disable:
+	gb_connection_disable(connection);
+exit_connection_destroy:
+	gb_connection_destroy(connection);
+exit_i2cdev_free:
 	kfree(gb_i2c_dev);
 
 	return ret;
 }
 
-static void gb_i2c_connection_exit(struct gb_connection *connection)
+static void gb_i2c_remove(struct gpbridge_device *gpbdev)
 {
-	struct gb_i2c_device *gb_i2c_dev = gb_connection_get_data(connection);
+	struct gb_i2c_device *gb_i2c_dev = gb_gpbridge_get_data(gpbdev);
+	struct gb_connection *connection = gb_i2c_dev->connection;
 
 	i2c_del_adapter(&gb_i2c_dev->adapter);
-	/* kref_put(gb_i2c_dev->connection) */
+	gb_connection_disable(connection);
+	gb_connection_destroy(connection);
 	kfree(gb_i2c_dev);
 }
 
-static struct gb_protocol i2c_protocol = {
-	.name			= "i2c",
-	.id			= GREYBUS_PROTOCOL_I2C,
-	.major			= GB_I2C_VERSION_MAJOR,
-	.minor			= GB_I2C_VERSION_MINOR,
-	.connection_init	= gb_i2c_connection_init,
-	.connection_exit	= gb_i2c_connection_exit,
-	.request_recv		= NULL,	/* no incoming requests */
+static const struct gpbridge_device_id gb_i2c_id_table[] = {
+	{ GPBRIDGE_PROTOCOL(GREYBUS_PROTOCOL_I2C) },
+	{ },
 };
 
-gb_builtin_protocol_driver(i2c_protocol);
+static struct gpbridge_driver i2c_driver = {
+	.name		= "i2c",
+	.probe		= gb_i2c_probe,
+	.remove		= gb_i2c_remove,
+	.id_table	= gb_i2c_id_table,
+};
+gb_gpbridge_builtin_driver(i2c_driver);

commit 0ec306324423444d3ee0222708ef9de7f5586b93
Author: Greg Kroah-Hartman <gregkh@google.com>
Date:   Tue Mar 22 14:30:35 2016 -0400

    greybus: convert drivers to use connection->private set/get
    
    This converts all drivers to use the gb_connection_get_data() and
    gb_connection_set_data() functions to make it a bit more explicit as to
    what is going on.
    
    Signed-off-by: Greg Kroah-Hartman <gregkh@google.com>
    Reviewed-by: Alex Elder <elder@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@google.com>

diff --git a/drivers/staging/greybus/i2c.c b/drivers/staging/greybus/i2c.c
index 4b96f69318bd..73b85815d1eb 100644
--- a/drivers/staging/greybus/i2c.c
+++ b/drivers/staging/greybus/i2c.c
@@ -251,7 +251,7 @@ static int gb_i2c_connection_init(struct gb_connection *connection)
 		return -ENOMEM;
 
 	gb_i2c_dev->connection = connection;	/* refcount? */
-	connection->private = gb_i2c_dev;
+	gb_connection_set_data(connection, gb_i2c_dev);
 
 	ret = gb_i2c_device_setup(gb_i2c_dev);
 	if (ret)
@@ -282,7 +282,7 @@ static int gb_i2c_connection_init(struct gb_connection *connection)
 
 static void gb_i2c_connection_exit(struct gb_connection *connection)
 {
-	struct gb_i2c_device *gb_i2c_dev = connection->private;
+	struct gb_i2c_device *gb_i2c_dev = gb_connection_get_data(connection);
 
 	i2c_del_adapter(&gb_i2c_dev->adapter);
 	/* kref_put(gb_i2c_dev->connection) */

commit c7b07265046b5db56778dc8c2cfc9056413ec5ba
Author: Greg Kroah-Hartman <gregkh@google.com>
Date:   Sun Feb 28 14:42:54 2016 -0800

    greybus: gpbridge.h: move protocol init/exit prototypes
    
    Create gpbridge.h for the gpbridge-specific function prototypes, the
    rest of the greybus drivers don't care about them.
    
    Signed-off-by: Greg Kroah-Hartman <gregkh@google.com>
    Reviewed-by: Viresh Kumar <viresh.kumar@linaro.org>
    Reviewed-by: Johan Hovold <johan@hovoldconsulting.com>

diff --git a/drivers/staging/greybus/i2c.c b/drivers/staging/greybus/i2c.c
index cb68b455f833..4b96f69318bd 100644
--- a/drivers/staging/greybus/i2c.c
+++ b/drivers/staging/greybus/i2c.c
@@ -13,6 +13,7 @@
 #include <linux/i2c.h>
 
 #include "greybus.h"
+#include "gpbridge.h"
 
 struct gb_i2c_device {
 	struct gb_connection	*connection;

commit 3522a09fa7df45b49c27997b419a20d9dcff8919
Author: Michael Mogenson <michael.mogenson@leaflabs.com>
Date:   Thu Mar 3 16:23:12 2016 -0500

    greybus: remove gb_i2c_retries_operation
    
    Set retries operation was removed from the Greybus specification. Remove
    gb_i2c_retries_operation and all other no longer necessary code bits from the
    Greybus kernel code.
    
    Signed-off-by: Michael Mogenson <michael.mogenson@leaflabs.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@google.com>

diff --git a/drivers/staging/greybus/i2c.c b/drivers/staging/greybus/i2c.c
index d9d483dc1c85..cb68b455f833 100644
--- a/drivers/staging/greybus/i2c.c
+++ b/drivers/staging/greybus/i2c.c
@@ -18,7 +18,6 @@ struct gb_i2c_device {
 	struct gb_connection	*connection;
 
 	u32			functionality;
-	u8			retries;
 
 	struct i2c_adapter	adapter;
 };
@@ -49,25 +48,6 @@ static int gb_i2c_functionality_operation(struct gb_i2c_device *gb_i2c_dev)
 	return 0;
 }
 
-static int gb_i2c_retries_operation(struct gb_i2c_device *gb_i2c_dev,
-				u8 retries)
-{
-	struct device *dev = &gb_i2c_dev->connection->bundle->dev;
-	struct gb_i2c_retries_request request;
-	int ret;
-
-	request.retries = retries;
-	ret = gb_operation_sync(gb_i2c_dev->connection, GB_I2C_TYPE_RETRIES,
-				&request, sizeof(request), NULL, 0);
-	if (ret)
-		dev_err(dev, "retries operation failed (%d)\n", ret);
-	else
-		gb_i2c_dev->retries = retries;
-
-	return ret;
-}
-
-
 /*
  * Map Linux i2c_msg flags into Greybus i2c transfer op flags.
  */
@@ -249,22 +229,14 @@ static const struct i2c_algorithm gb_i2c_algorithm = {
 /*
  * Do initial setup of the i2c device.  This includes verifying we
  * can support it (based on the protocol version it advertises).
- * If that's OK, we get and cached its functionality bits and
- * set up the retry count.
+ * If that's OK, we get and cached its functionality bits.
  *
  * Note: gb_i2c_dev->connection is assumed to have been valid.
  */
 static int gb_i2c_device_setup(struct gb_i2c_device *gb_i2c_dev)
 {
-	int ret;
-
 	/* Assume the functionality never changes, just get it once */
-	ret = gb_i2c_functionality_operation(gb_i2c_dev);
-	if (ret)
-		return ret;
-
-	/* Set up our default retry count */
-	return gb_i2c_retries_operation(gb_i2c_dev, GB_I2C_RETRIES_DEFAULT);
+	return gb_i2c_functionality_operation(gb_i2c_dev);
 }
 
 static int gb_i2c_connection_init(struct gb_connection *connection)
@@ -290,7 +262,6 @@ static int gb_i2c_connection_init(struct gb_connection *connection)
 	adapter->class = I2C_CLASS_HWMON | I2C_CLASS_SPD;
 	adapter->algo = &gb_i2c_algorithm;
 	/* adapter->algo_data = what? */
-	adapter->retries = gb_i2c_dev->retries;
 
 	adapter->dev.parent = &connection->bundle->dev;
 	snprintf(adapter->name, sizeof(adapter->name), "Greybus i2c adapter");

commit e494b580ea23a98f2f3b3507157c2d573240486c
Author: Michael Mogenson <michael.mogenson@leaflabs.com>
Date:   Thu Mar 3 16:23:11 2016 -0500

    greybus: remove gb_i2c_timeout_operation
    
    Set timeout operation was removed from the Greybus specification. Remove
    gb_i2c_timeout_operation and all other no longer necessary code bits from the
    Greybus kernel code.
    
    Signed-off-by: Michael Mogenson <michael.mogenson@leaflabs.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@google.com>

diff --git a/drivers/staging/greybus/i2c.c b/drivers/staging/greybus/i2c.c
index ec74e870d76e..d9d483dc1c85 100644
--- a/drivers/staging/greybus/i2c.c
+++ b/drivers/staging/greybus/i2c.c
@@ -18,7 +18,6 @@ struct gb_i2c_device {
 	struct gb_connection	*connection;
 
 	u32			functionality;
-	u16			timeout_msec;
 	u8			retries;
 
 	struct i2c_adapter	adapter;
@@ -50,23 +49,6 @@ static int gb_i2c_functionality_operation(struct gb_i2c_device *gb_i2c_dev)
 	return 0;
 }
 
-static int gb_i2c_timeout_operation(struct gb_i2c_device *gb_i2c_dev, u16 msec)
-{
-	struct device *dev = &gb_i2c_dev->connection->bundle->dev;
-	struct gb_i2c_timeout_request request;
-	int ret;
-
-	request.msec = cpu_to_le16(msec);
-	ret = gb_operation_sync(gb_i2c_dev->connection, GB_I2C_TYPE_TIMEOUT,
-				&request, sizeof(request), NULL, 0);
-	if (ret)
-		dev_err(dev, "timeout operation failed (%d)\n", ret);
-	else
-		gb_i2c_dev->timeout_msec = msec;
-
-	return ret;
-}
-
 static int gb_i2c_retries_operation(struct gb_i2c_device *gb_i2c_dev,
 				u8 retries)
 {
@@ -267,8 +249,8 @@ static const struct i2c_algorithm gb_i2c_algorithm = {
 /*
  * Do initial setup of the i2c device.  This includes verifying we
  * can support it (based on the protocol version it advertises).
- * If that's OK, we get and cached its functionality bits, and
- * set up the retry count and timeout.
+ * If that's OK, we get and cached its functionality bits and
+ * set up the retry count.
  *
  * Note: gb_i2c_dev->connection is assumed to have been valid.
  */
@@ -281,12 +263,8 @@ static int gb_i2c_device_setup(struct gb_i2c_device *gb_i2c_dev)
 	if (ret)
 		return ret;
 
-	/* Set up our default retry count and timeout */
-	ret = gb_i2c_retries_operation(gb_i2c_dev, GB_I2C_RETRIES_DEFAULT);
-	if (ret)
-		return ret;
-
-	return gb_i2c_timeout_operation(gb_i2c_dev, GB_I2C_TIMEOUT_DEFAULT);
+	/* Set up our default retry count */
+	return gb_i2c_retries_operation(gb_i2c_dev, GB_I2C_RETRIES_DEFAULT);
 }
 
 static int gb_i2c_connection_init(struct gb_connection *connection)
@@ -312,7 +290,6 @@ static int gb_i2c_connection_init(struct gb_connection *connection)
 	adapter->class = I2C_CLASS_HWMON | I2C_CLASS_SPD;
 	adapter->algo = &gb_i2c_algorithm;
 	/* adapter->algo_data = what? */
-	adapter->timeout = gb_i2c_dev->timeout_msec * HZ / 1000;
 	adapter->retries = gb_i2c_dev->retries;
 
 	adapter->dev.parent = &connection->bundle->dev;

commit 6d6fb2549f23d5d7d3494574b49e35df8e737645
Author: Johan Hovold <johan@hovoldconsulting.com>
Date:   Thu Feb 11 13:52:48 2016 +0100

    greybus: i2c: add bundle-device prefix to error messages
    
    Replace all pr_err with dev_err so we can tell what device (and driver)
    a message was for.
    
    Testing Done: Compiled
    
    Signed-off-by: Johan Hovold <johan@hovoldconsulting.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@google.com>

diff --git a/drivers/staging/greybus/i2c.c b/drivers/staging/greybus/i2c.c
index 5a5af36570c8..ec74e870d76e 100644
--- a/drivers/staging/greybus/i2c.c
+++ b/drivers/staging/greybus/i2c.c
@@ -52,6 +52,7 @@ static int gb_i2c_functionality_operation(struct gb_i2c_device *gb_i2c_dev)
 
 static int gb_i2c_timeout_operation(struct gb_i2c_device *gb_i2c_dev, u16 msec)
 {
+	struct device *dev = &gb_i2c_dev->connection->bundle->dev;
 	struct gb_i2c_timeout_request request;
 	int ret;
 
@@ -59,7 +60,7 @@ static int gb_i2c_timeout_operation(struct gb_i2c_device *gb_i2c_dev, u16 msec)
 	ret = gb_operation_sync(gb_i2c_dev->connection, GB_I2C_TYPE_TIMEOUT,
 				&request, sizeof(request), NULL, 0);
 	if (ret)
-		pr_err("timeout operation failed (%d)\n", ret);
+		dev_err(dev, "timeout operation failed (%d)\n", ret);
 	else
 		gb_i2c_dev->timeout_msec = msec;
 
@@ -69,6 +70,7 @@ static int gb_i2c_timeout_operation(struct gb_i2c_device *gb_i2c_dev, u16 msec)
 static int gb_i2c_retries_operation(struct gb_i2c_device *gb_i2c_dev,
 				u8 retries)
 {
+	struct device *dev = &gb_i2c_dev->connection->bundle->dev;
 	struct gb_i2c_retries_request request;
 	int ret;
 
@@ -76,7 +78,7 @@ static int gb_i2c_retries_operation(struct gb_i2c_device *gb_i2c_dev,
 	ret = gb_operation_sync(gb_i2c_dev->connection, GB_I2C_TYPE_RETRIES,
 				&request, sizeof(request), NULL, 0);
 	if (ret)
-		pr_err("retries operation failed (%d)\n", ret);
+		dev_err(dev, "retries operation failed (%d)\n", ret);
 	else
 		gb_i2c_dev->retries = retries;
 
@@ -201,6 +203,7 @@ static int gb_i2c_transfer_operation(struct gb_i2c_device *gb_i2c_dev,
 					struct i2c_msg *msgs, u32 msg_count)
 {
 	struct gb_connection *connection = gb_i2c_dev->connection;
+	struct device *dev = &connection->bundle->dev;
 	struct gb_operation *operation;
 	int ret;
 
@@ -216,7 +219,7 @@ static int gb_i2c_transfer_operation(struct gb_i2c_device *gb_i2c_dev,
 		gb_i2c_decode_response(msgs, msg_count, response);
 		ret = msg_count;
 	} else if (!gb_i2c_expected_transfer_error(ret)) {
-		pr_err("transfer operation failed (%d)\n", ret);
+		dev_err(dev, "transfer operation failed (%d)\n", ret);
 	}
 
 	gb_operation_put(operation);

commit c01e16e3cb120938db87af91248e91f3552a1b73
Author: Greg Kroah-Hartman <gregkh@google.com>
Date:   Wed Oct 14 11:18:32 2015 -0700

    greybus: i2c: use the bundle struct device instead of the connector
    
    We are removing struct device from the gb_connection structure in the
    near future.  The gb_bundle structure's struct device should be used as
    a replacement.
    
    This patch moves the i2c driver to use the bundle pointer instead of the
    connection pointer.
    
    Signed-off-by: Greg Kroah-Hartman <gregkh@google.com>
    Reviewed-by: Alex Elder <elder@linaro.org>

diff --git a/drivers/staging/greybus/i2c.c b/drivers/staging/greybus/i2c.c
index bf6d11b36b83..5a5af36570c8 100644
--- a/drivers/staging/greybus/i2c.c
+++ b/drivers/staging/greybus/i2c.c
@@ -118,7 +118,7 @@ gb_i2c_operation_create(struct gb_connection *connection,
 	u32 i;
 
 	if (msg_count > (u32)U16_MAX) {
-		dev_err(&connection->dev, "msg_count (%u) too big\n",
+		dev_err(&connection->bundle->dev, "msg_count (%u) too big\n",
 			msg_count);
 		return NULL;
 	}
@@ -312,7 +312,7 @@ static int gb_i2c_connection_init(struct gb_connection *connection)
 	adapter->timeout = gb_i2c_dev->timeout_msec * HZ / 1000;
 	adapter->retries = gb_i2c_dev->retries;
 
-	adapter->dev.parent = &connection->dev;
+	adapter->dev.parent = &connection->bundle->dev;
 	snprintf(adapter->name, sizeof(adapter->name), "Greybus i2c adapter");
 	i2c_set_adapdata(adapter, gb_i2c_dev);
 

commit 6ab1ce4d542ea1b5ffa40321e021d95de47880ea
Author: Johan Hovold <johan@hovoldconsulting.com>
Date:   Sat Sep 26 17:59:15 2015 -0700

    greybus: operation: remove gb_operation_destroy
    
    Remove legacy interface to "destroy" operations, which is now just a
    wrapper for gb_operation_put.
    
    The old interface name hides the fact that all operations are refcounted
    and may live on even after having "destroyed" them.
    
    Signed-off-by: Johan Hovold <johan@hovoldconsulting.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@google.com>

diff --git a/drivers/staging/greybus/i2c.c b/drivers/staging/greybus/i2c.c
index 75b92d683036..bf6d11b36b83 100644
--- a/drivers/staging/greybus/i2c.c
+++ b/drivers/staging/greybus/i2c.c
@@ -218,7 +218,8 @@ static int gb_i2c_transfer_operation(struct gb_i2c_device *gb_i2c_dev,
 	} else if (!gb_i2c_expected_transfer_error(ret)) {
 		pr_err("transfer operation failed (%d)\n", ret);
 	}
-	gb_operation_destroy(operation);
+
+	gb_operation_put(operation);
 
 	return ret;
 }

commit d8886f4a06593fd1849a5076e08488c0ebaf74a3
Author: Viresh Kumar <viresh.kumar@linaro.org>
Date:   Tue Aug 11 07:36:05 2015 +0530

    greybus: i2c: Drop get_version support
    
    This is done from a common place now, no need to replicate it.
    
    Signed-off-by: Viresh Kumar <viresh.kumar@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@google.com>

diff --git a/drivers/staging/greybus/i2c.c b/drivers/staging/greybus/i2c.c
index edb675384a71..75b92d683036 100644
--- a/drivers/staging/greybus/i2c.c
+++ b/drivers/staging/greybus/i2c.c
@@ -16,8 +16,6 @@
 
 struct gb_i2c_device {
 	struct gb_connection	*connection;
-	u8			version_major;
-	u8			version_minor;
 
 	u32			functionality;
 	u16			timeout_msec;
@@ -26,9 +24,6 @@ struct gb_i2c_device {
 	struct i2c_adapter	adapter;
 };
 
-/* Define get_version() routine */
-define_get_version(gb_i2c_device, I2C);
-
 /*
  * Map Greybus i2c functionality bits into Linux ones
  */
@@ -277,11 +272,6 @@ static int gb_i2c_device_setup(struct gb_i2c_device *gb_i2c_dev)
 {
 	int ret;
 
-	/* First thing we need to do is check the version */
-	ret = get_version(gb_i2c_dev);
-	if (ret)
-		return ret;
-
 	/* Assume the functionality never changes, just get it once */
 	ret = gb_i2c_functionality_operation(gb_i2c_dev);
 	if (ret)

commit bbd80cc166dc841f6bab7fe721da157c6371e84b
Author: Viresh Kumar <viresh.kumar@linaro.org>
Date:   Sat Aug 8 10:25:36 2015 +0530

    greybus: i2c: Use (already defined) major/minor macros
    
    We already have macros for these, use them instead of writing fixed
    values.
    
    Signed-off-by: Viresh Kumar <viresh.kumar@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@google.com>

diff --git a/drivers/staging/greybus/i2c.c b/drivers/staging/greybus/i2c.c
index 9514e69d0d4b..edb675384a71 100644
--- a/drivers/staging/greybus/i2c.c
+++ b/drivers/staging/greybus/i2c.c
@@ -349,8 +349,8 @@ static void gb_i2c_connection_exit(struct gb_connection *connection)
 static struct gb_protocol i2c_protocol = {
 	.name			= "i2c",
 	.id			= GREYBUS_PROTOCOL_I2C,
-	.major			= 0,
-	.minor			= 1,
+	.major			= GB_I2C_VERSION_MAJOR,
+	.minor			= GB_I2C_VERSION_MINOR,
 	.connection_init	= gb_i2c_connection_init,
 	.connection_exit	= gb_i2c_connection_exit,
 	.request_recv		= NULL,	/* no incoming requests */

commit e420721b47ef5b0d521584d4efc89ff64bd0cd74
Author: Johan Hovold <johan@hovoldconsulting.com>
Date:   Wed Jul 1 12:37:22 2015 +0200

    greybus: operation: allow atomic operation allocations
    
    Add gfp mask argument to gb_operation_create to allow operations to be
    allocated in atomic context.
    
    Signed-off-by: Johan Hovold <johan@hovoldconsulting.com>
    Reviewed-by: Bryan O'Donoghue <bryan.odonoghue@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@google.com>

diff --git a/drivers/staging/greybus/i2c.c b/drivers/staging/greybus/i2c.c
index 5eb7703599d6..9514e69d0d4b 100644
--- a/drivers/staging/greybus/i2c.c
+++ b/drivers/staging/greybus/i2c.c
@@ -146,7 +146,7 @@ gb_i2c_operation_create(struct gb_connection *connection,
 
 	/* Response consists only of incoming data */
 	operation = gb_operation_create(connection, GB_I2C_TYPE_TRANSFER,
-				request_size, data_in_size);
+				request_size, data_in_size, GFP_KERNEL);
 	if (!operation)
 		return NULL;
 

commit e18822e3d02c8f296fe42e0e8bda7e2e626a4714
Author: Viresh Kumar <viresh.kumar@linaro.org>
Date:   Wed Jul 1 12:13:52 2015 +0530

    greybus: Rename gb_gpbridge_protocol_driver() as gb_builtin_protocol_driver()
    
    This macro is also required by core protocols like control and svc, and
    hence the 'gpbridge' name doesn't fit anymore.
    
    Lets call this macro gb_builtin_protocol_driver().
    
    Signed-off-by: Viresh Kumar <viresh.kumar@linaro.org>
    Reviewed-by: Alex Elder <elder@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@google.com>

diff --git a/drivers/staging/greybus/i2c.c b/drivers/staging/greybus/i2c.c
index 01afca8408a0..5eb7703599d6 100644
--- a/drivers/staging/greybus/i2c.c
+++ b/drivers/staging/greybus/i2c.c
@@ -356,4 +356,4 @@ static struct gb_protocol i2c_protocol = {
 	.request_recv		= NULL,	/* no incoming requests */
 };
 
-gb_gpbridge_protocol_driver(i2c_protocol);
+gb_builtin_protocol_driver(i2c_protocol);

commit e9385e5d5ab64a0d05758d84f2980943d3f5f12d
Author: Alex Elder <elder@linaro.org>
Date:   Fri May 22 12:35:31 2015 -0500

    greybus: include "gpbridge.h" from "greybus.h"
    
    Avoid the need for all the source files to include "gpbridge.h"
    by just having "greybus.h" include it.
    
    Signed-off-by: Alex Elder <elder@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@google.com>

diff --git a/drivers/staging/greybus/i2c.c b/drivers/staging/greybus/i2c.c
index 14fdea184c39..01afca8408a0 100644
--- a/drivers/staging/greybus/i2c.c
+++ b/drivers/staging/greybus/i2c.c
@@ -13,8 +13,6 @@
 #include <linux/i2c.h>
 
 #include "greybus.h"
-#include "gpbridge.h"
-
 
 struct gb_i2c_device {
 	struct gb_connection	*connection;

commit bdac599c70409bbf48e77971e2b9ecc2a66ef151
Author: Viresh Kumar <viresh.kumar@linaro.org>
Date:   Wed May 20 17:20:10 2015 +0530

    greybus: Use gb_gpbridge_protocol_init()
    
    Start using gb_gpbridge_protocol_init() in gpbridge drivers.
    
    Signed-off-by: Viresh Kumar <viresh.kumar@linaro.org>
    Reviewed-by: Alex Elder <elder@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@google.com>

diff --git a/drivers/staging/greybus/i2c.c b/drivers/staging/greybus/i2c.c
index 6fdbf1167ecb..14fdea184c39 100644
--- a/drivers/staging/greybus/i2c.c
+++ b/drivers/staging/greybus/i2c.c
@@ -358,12 +358,4 @@ static struct gb_protocol i2c_protocol = {
 	.request_recv		= NULL,	/* no incoming requests */
 };
 
-int gb_i2c_protocol_init(void)
-{
-	return gb_protocol_register(&i2c_protocol);
-}
-
-void gb_i2c_protocol_exit(void)
-{
-	gb_protocol_deregister(&i2c_protocol);
-}
+gb_gpbridge_protocol_driver(i2c_protocol);

commit 453bbea807345db3faab8f4a432b4b1b2b245a27
Author: John Stultz <john.stultz@linaro.org>
Date:   Thu Apr 9 16:01:31 2015 -0700

    greybus: Move briged phy structure definitions into gpbridge.h
    
    In order to facilitate re-use of the gpio, i2c, pwm and i2s
    structures, split them out of independent files and add
    them into a shared gpbridge.h
    
    This will be a prereq to sharing these headers w/ gbsim.
    
    Cc: Alex Elder <alex.elder@linaro.org>
    Cc: Greg Kroah-Hartman <gregkh@google.com>
    CC: Johan Hovold <johan@hovoldconsulting.com>
    Signed-off-by: John Stultz <john.stultz@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@google.com>

diff --git a/drivers/staging/greybus/i2c.c b/drivers/staging/greybus/i2c.c
index 84d20e54ae9b..6fdbf1167ecb 100644
--- a/drivers/staging/greybus/i2c.c
+++ b/drivers/staging/greybus/i2c.c
@@ -13,6 +13,8 @@
 #include <linux/i2c.h>
 
 #include "greybus.h"
+#include "gpbridge.h"
+
 
 struct gb_i2c_device {
 	struct gb_connection	*connection;
@@ -26,61 +28,6 @@ struct gb_i2c_device {
 	struct i2c_adapter	adapter;
 };
 
-/* Version of the Greybus i2c protocol we support */
-#define	GB_I2C_VERSION_MAJOR		0x00
-#define	GB_I2C_VERSION_MINOR		0x01
-
-/* Greybus i2c request types */
-#define	GB_I2C_TYPE_INVALID		0x00
-#define	GB_I2C_TYPE_PROTOCOL_VERSION	0x01
-#define	GB_I2C_TYPE_FUNCTIONALITY	0x02
-#define	GB_I2C_TYPE_TIMEOUT		0x03
-#define	GB_I2C_TYPE_RETRIES		0x04
-#define	GB_I2C_TYPE_TRANSFER		0x05
-#define	GB_I2C_TYPE_RESPONSE		0x80	/* OR'd with rest */
-
-#define	GB_I2C_RETRIES_DEFAULT		3
-#define	GB_I2C_TIMEOUT_DEFAULT		1000	/* milliseconds */
-
-/* functionality request has no payload */
-struct gb_i2c_functionality_response {
-	__le32	functionality;
-};
-
-struct gb_i2c_timeout_request {
-	__le16	msec;
-};
-/* timeout response has no payload */
-
-struct gb_i2c_retries_request {
-	__u8	retries;
-};
-/* retries response has no payload */
-
-/*
- * Outgoing data immediately follows the op count and ops array.
- * The data for each write (master -> slave) op in the array is sent
- * in order, with no (e.g. pad) bytes separating them.
- *
- * Short reads cause the entire transfer request to fail So response
- * payload consists only of bytes read, and the number of bytes is
- * exactly what was specified in the corresponding op.  Like
- * outgoing data, the incoming data is in order and contiguous.
- */
-struct gb_i2c_transfer_op {
-	__le16	addr;
-	__le16	flags;
-	__le16	size;
-};
-
-struct gb_i2c_transfer_request {
-	__le16				op_count;
-	struct gb_i2c_transfer_op	ops[0];		/* op_count of these */
-};
-struct gb_i2c_transfer_response {
-	__u8				data[0];	/* inbound data */
-};
-
 /* Define get_version() routine */
 define_get_version(gb_i2c_device, I2C);
 

commit 25eb732954ee656edd92770f498d28f87086511b
Author: Johan Hovold <johan@hovoldconsulting.com>
Date:   Thu Mar 19 16:46:17 2015 +0100

    greybus: connection: replace custom error function with dev_err
    
    Remove custom connection error function and replace it with dev_err.
    
    The standard error function provides more information in the message
    prefix (e.g. includes the interface id), has a well-known semantics
    (e.g. does does not add newlines to messages), and is even somewhat
    shorter to type.
    
    Note that some uses of the custom function were already adding double
    newlines due to the non-standard semantics.
    
    Signed-off-by: Johan Hovold <johan@hovoldconsulting.com>
    Signed-off-by: Greg Kroah-Hartman <greg@kroah.com>

diff --git a/drivers/staging/greybus/i2c.c b/drivers/staging/greybus/i2c.c
index 0bcd7a9b0e12..84d20e54ae9b 100644
--- a/drivers/staging/greybus/i2c.c
+++ b/drivers/staging/greybus/i2c.c
@@ -178,8 +178,8 @@ gb_i2c_operation_create(struct gb_connection *connection,
 	u32 i;
 
 	if (msg_count > (u32)U16_MAX) {
-		gb_connection_err(connection, "msg_count (%u) too big",
-					msg_count);
+		dev_err(&connection->dev, "msg_count (%u) too big\n",
+			msg_count);
 		return NULL;
 	}
 	op_count = (u16)msg_count;

commit 62aadeeafa1585d6acf3e9b378eb554f57f3bc84
Author: Viresh Kumar <viresh.kumar@linaro.org>
Date:   Thu Jan 22 12:10:38 2015 +0530

    greybus: i2c: fix name conflict between function and struct: gb_i2c_transfer_request
    
    'gb_i2c_transfer_request' is the name given to a function and a struct. Though
    we don't get any compilation errors/warnings about it, but the names should be
    unique.
    
    Signed-off-by: Viresh Kumar <viresh.kumar@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <greg@kroah.com>

diff --git a/drivers/staging/greybus/i2c.c b/drivers/staging/greybus/i2c.c
index 31528afe9533..0bcd7a9b0e12 100644
--- a/drivers/staging/greybus/i2c.c
+++ b/drivers/staging/greybus/i2c.c
@@ -163,8 +163,8 @@ gb_i2c_fill_transfer_op(struct gb_i2c_transfer_op *op, struct i2c_msg *msg)
 }
 
 static struct gb_operation *
-gb_i2c_transfer_request(struct gb_connection *connection,
-				struct i2c_msg *msgs, u32 msg_count)
+gb_i2c_operation_create(struct gb_connection *connection,
+			struct i2c_msg *msgs, u32 msg_count)
 {
 	struct gb_i2c_transfer_request *request;
 	struct gb_operation *operation;
@@ -264,7 +264,7 @@ static int gb_i2c_transfer_operation(struct gb_i2c_device *gb_i2c_dev,
 	struct gb_operation *operation;
 	int ret;
 
-	operation = gb_i2c_transfer_request(connection, msgs, msg_count);
+	operation = gb_i2c_operation_create(connection, msgs, msg_count);
 	if (!operation)
 		return -ENOMEM;
 

commit f281f2dec14231b5da8ca44100b4e2887724e5fd
Author: Viresh Kumar <viresh.kumar@linaro.org>
Date:   Thu Jan 22 12:42:39 2015 +0530

    greybus: i2c: fix name conflict between function and struct: gb_i2c_transfer_response
    
    'gb_i2c_transfer_response' is the name given to a function and a struct. Though
    we don't get any compilation errors/warnings about it, but the names should be
    unique.
    
    Signed-off-by: Viresh Kumar <viresh.kumar@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <greg@kroah.com>

diff --git a/drivers/staging/greybus/i2c.c b/drivers/staging/greybus/i2c.c
index ca8891413c0e..31528afe9533 100644
--- a/drivers/staging/greybus/i2c.c
+++ b/drivers/staging/greybus/i2c.c
@@ -230,7 +230,7 @@ gb_i2c_transfer_request(struct gb_connection *connection,
 	return operation;
 }
 
-static void gb_i2c_transfer_response(struct i2c_msg *msgs, u32 msg_count,
+static void gb_i2c_decode_response(struct i2c_msg *msgs, u32 msg_count,
 				struct gb_i2c_transfer_response *response)
 {
 	struct i2c_msg *msg = msgs;
@@ -273,7 +273,7 @@ static int gb_i2c_transfer_operation(struct gb_i2c_device *gb_i2c_dev,
 		struct gb_i2c_transfer_response *response;
 
 		response = operation->response->payload;
-		gb_i2c_transfer_response(msgs, msg_count, response);
+		gb_i2c_decode_response(msgs, msg_count, response);
 		ret = msg_count;
 	} else if (!gb_i2c_expected_transfer_error(ret)) {
 		pr_err("transfer operation failed (%d)\n", ret);

commit 89210f64bae6bd6bba90d9e08d1b88b4ba103f59
Author: Viresh Kumar <viresh.kumar@linaro.org>
Date:   Wed Jan 21 18:12:37 2015 +0530

    greybus: remove unused version-response structs
    
    These aren't used anymore and so can be removed.
    
    Signed-off-by: Viresh Kumar <viresh.kumar@linaro.org>
    Reviewed-by: Alex Elder <elder@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <greg@kroah.com>

diff --git a/drivers/staging/greybus/i2c.c b/drivers/staging/greybus/i2c.c
index 589691d05750..ca8891413c0e 100644
--- a/drivers/staging/greybus/i2c.c
+++ b/drivers/staging/greybus/i2c.c
@@ -42,12 +42,6 @@ struct gb_i2c_device {
 #define	GB_I2C_RETRIES_DEFAULT		3
 #define	GB_I2C_TIMEOUT_DEFAULT		1000	/* milliseconds */
 
-/* version request has no payload */
-struct gb_i2c_proto_version_response {
-	__u8	major;
-	__u8	minor;
-};
-
 /* functionality request has no payload */
 struct gb_i2c_functionality_response {
 	__le32	functionality;

commit 36e79dec96f652110ae2b06bfcf9e67e1b770787
Author: Viresh Kumar <viresh.kumar@linaro.org>
Date:   Wed Jan 21 18:12:36 2015 +0530

    greybus: create get_version() routines with the help of a macro
    
    This gets rid of lots of duplication of code.
    
    Signed-off-by: Viresh Kumar <viresh.kumar@linaro.org>
    Reviewed-by: Alex Elder <elder@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <greg@kroah.com>

diff --git a/drivers/staging/greybus/i2c.c b/drivers/staging/greybus/i2c.c
index c967ae3161c5..589691d05750 100644
--- a/drivers/staging/greybus/i2c.c
+++ b/drivers/staging/greybus/i2c.c
@@ -87,30 +87,8 @@ struct gb_i2c_transfer_response {
 	__u8				data[0];	/* inbound data */
 };
 
-/*
- * This request only uses the connection field, and if successful,
- * fills in the major and minor protocol version of the target.
- */
-static int gb_i2c_proto_version_operation(struct gb_i2c_device *gb_i2c_dev)
-{
-	struct gb_i2c_proto_version_response response;
-	int ret;
-
-	ret = gb_operation_sync(gb_i2c_dev->connection,
-				GB_I2C_TYPE_PROTOCOL_VERSION,
-				NULL, 0, &response, sizeof(response));
-	if (ret)
-		return ret;
-
-	if (response.major > GB_I2C_VERSION_MAJOR) {
-		pr_err("unsupported major version (%hhu > %hhu)\n",
-			response.major, GB_I2C_VERSION_MAJOR);
-		return -ENOTSUPP;
-	}
-	gb_i2c_dev->version_major = response.major;
-	gb_i2c_dev->version_minor = response.minor;
-	return 0;
-}
+/* Define get_version() routine */
+define_get_version(gb_i2c_device, I2C);
 
 /*
  * Map Greybus i2c functionality bits into Linux ones
@@ -361,7 +339,7 @@ static int gb_i2c_device_setup(struct gb_i2c_device *gb_i2c_dev)
 	int ret;
 
 	/* First thing we need to do is check the version */
-	ret = gb_i2c_proto_version_operation(gb_i2c_dev);
+	ret = get_version(gb_i2c_dev);
 	if (ret)
 		return ret;
 

commit 5357cf323110ee4a3f4a12870618eca28672c7b9
Author: Viresh Kumar <viresh.kumar@linaro.org>
Date:   Wed Jan 21 16:10:40 2015 +0530

    greybus: Remove "-gb" suffix from .c files
    
    Some files are prefixed with "gb-" and some are suffixed with "-gb". The
    rationale behind the first one is that the modules would be named so, i.e.
    gb-*.ko. But there is no reason to keep the "-gb" suffix in the second case.
    
    Remove the unnecessary suffix.
    
    Signed-off-by: Viresh Kumar <viresh.kumar@linaro.org>
    Reviewed-by: Alex Elder <elder@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <greg@kroah.com>

diff --git a/drivers/staging/greybus/i2c.c b/drivers/staging/greybus/i2c.c
new file mode 100644
index 000000000000..c967ae3161c5
--- /dev/null
+++ b/drivers/staging/greybus/i2c.c
@@ -0,0 +1,450 @@
+/*
+ * I2C bridge driver for the Greybus "generic" I2C module.
+ *
+ * Copyright 2014 Google Inc.
+ * Copyright 2014 Linaro Ltd.
+ *
+ * Released under the GPLv2 only.
+ */
+
+#include <linux/kernel.h>
+#include <linux/module.h>
+#include <linux/slab.h>
+#include <linux/i2c.h>
+
+#include "greybus.h"
+
+struct gb_i2c_device {
+	struct gb_connection	*connection;
+	u8			version_major;
+	u8			version_minor;
+
+	u32			functionality;
+	u16			timeout_msec;
+	u8			retries;
+
+	struct i2c_adapter	adapter;
+};
+
+/* Version of the Greybus i2c protocol we support */
+#define	GB_I2C_VERSION_MAJOR		0x00
+#define	GB_I2C_VERSION_MINOR		0x01
+
+/* Greybus i2c request types */
+#define	GB_I2C_TYPE_INVALID		0x00
+#define	GB_I2C_TYPE_PROTOCOL_VERSION	0x01
+#define	GB_I2C_TYPE_FUNCTIONALITY	0x02
+#define	GB_I2C_TYPE_TIMEOUT		0x03
+#define	GB_I2C_TYPE_RETRIES		0x04
+#define	GB_I2C_TYPE_TRANSFER		0x05
+#define	GB_I2C_TYPE_RESPONSE		0x80	/* OR'd with rest */
+
+#define	GB_I2C_RETRIES_DEFAULT		3
+#define	GB_I2C_TIMEOUT_DEFAULT		1000	/* milliseconds */
+
+/* version request has no payload */
+struct gb_i2c_proto_version_response {
+	__u8	major;
+	__u8	minor;
+};
+
+/* functionality request has no payload */
+struct gb_i2c_functionality_response {
+	__le32	functionality;
+};
+
+struct gb_i2c_timeout_request {
+	__le16	msec;
+};
+/* timeout response has no payload */
+
+struct gb_i2c_retries_request {
+	__u8	retries;
+};
+/* retries response has no payload */
+
+/*
+ * Outgoing data immediately follows the op count and ops array.
+ * The data for each write (master -> slave) op in the array is sent
+ * in order, with no (e.g. pad) bytes separating them.
+ *
+ * Short reads cause the entire transfer request to fail So response
+ * payload consists only of bytes read, and the number of bytes is
+ * exactly what was specified in the corresponding op.  Like
+ * outgoing data, the incoming data is in order and contiguous.
+ */
+struct gb_i2c_transfer_op {
+	__le16	addr;
+	__le16	flags;
+	__le16	size;
+};
+
+struct gb_i2c_transfer_request {
+	__le16				op_count;
+	struct gb_i2c_transfer_op	ops[0];		/* op_count of these */
+};
+struct gb_i2c_transfer_response {
+	__u8				data[0];	/* inbound data */
+};
+
+/*
+ * This request only uses the connection field, and if successful,
+ * fills in the major and minor protocol version of the target.
+ */
+static int gb_i2c_proto_version_operation(struct gb_i2c_device *gb_i2c_dev)
+{
+	struct gb_i2c_proto_version_response response;
+	int ret;
+
+	ret = gb_operation_sync(gb_i2c_dev->connection,
+				GB_I2C_TYPE_PROTOCOL_VERSION,
+				NULL, 0, &response, sizeof(response));
+	if (ret)
+		return ret;
+
+	if (response.major > GB_I2C_VERSION_MAJOR) {
+		pr_err("unsupported major version (%hhu > %hhu)\n",
+			response.major, GB_I2C_VERSION_MAJOR);
+		return -ENOTSUPP;
+	}
+	gb_i2c_dev->version_major = response.major;
+	gb_i2c_dev->version_minor = response.minor;
+	return 0;
+}
+
+/*
+ * Map Greybus i2c functionality bits into Linux ones
+ */
+static u32 gb_i2c_functionality_map(u32 gb_i2c_functionality)
+{
+	return gb_i2c_functionality;	/* All bits the same for now */
+}
+
+static int gb_i2c_functionality_operation(struct gb_i2c_device *gb_i2c_dev)
+{
+	struct gb_i2c_functionality_response response;
+	u32 functionality;
+	int ret;
+
+	ret = gb_operation_sync(gb_i2c_dev->connection,
+				GB_I2C_TYPE_FUNCTIONALITY,
+				NULL, 0, &response, sizeof(response));
+	if (ret)
+		return ret;
+
+	functionality = le32_to_cpu(response.functionality);
+	gb_i2c_dev->functionality = gb_i2c_functionality_map(functionality);
+
+	return 0;
+}
+
+static int gb_i2c_timeout_operation(struct gb_i2c_device *gb_i2c_dev, u16 msec)
+{
+	struct gb_i2c_timeout_request request;
+	int ret;
+
+	request.msec = cpu_to_le16(msec);
+	ret = gb_operation_sync(gb_i2c_dev->connection, GB_I2C_TYPE_TIMEOUT,
+				&request, sizeof(request), NULL, 0);
+	if (ret)
+		pr_err("timeout operation failed (%d)\n", ret);
+	else
+		gb_i2c_dev->timeout_msec = msec;
+
+	return ret;
+}
+
+static int gb_i2c_retries_operation(struct gb_i2c_device *gb_i2c_dev,
+				u8 retries)
+{
+	struct gb_i2c_retries_request request;
+	int ret;
+
+	request.retries = retries;
+	ret = gb_operation_sync(gb_i2c_dev->connection, GB_I2C_TYPE_RETRIES,
+				&request, sizeof(request), NULL, 0);
+	if (ret)
+		pr_err("retries operation failed (%d)\n", ret);
+	else
+		gb_i2c_dev->retries = retries;
+
+	return ret;
+}
+
+
+/*
+ * Map Linux i2c_msg flags into Greybus i2c transfer op flags.
+ */
+static u16 gb_i2c_transfer_op_flags_map(u16 flags)
+{
+	return flags;	/* All flags the same for now */
+}
+
+static void
+gb_i2c_fill_transfer_op(struct gb_i2c_transfer_op *op, struct i2c_msg *msg)
+{
+	u16 flags = gb_i2c_transfer_op_flags_map(msg->flags);
+
+	op->addr = cpu_to_le16(msg->addr);
+	op->flags = cpu_to_le16(flags);
+	op->size = cpu_to_le16(msg->len);
+}
+
+static struct gb_operation *
+gb_i2c_transfer_request(struct gb_connection *connection,
+				struct i2c_msg *msgs, u32 msg_count)
+{
+	struct gb_i2c_transfer_request *request;
+	struct gb_operation *operation;
+	struct gb_i2c_transfer_op *op;
+	struct i2c_msg *msg;
+	u32 data_out_size = 0;
+	u32 data_in_size = 0;
+	size_t request_size;
+	void *data;
+	u16 op_count;
+	u32 i;
+
+	if (msg_count > (u32)U16_MAX) {
+		gb_connection_err(connection, "msg_count (%u) too big",
+					msg_count);
+		return NULL;
+	}
+	op_count = (u16)msg_count;
+
+	/*
+	 * In addition to space for all message descriptors we need
+	 * to have enough to hold all outbound message data.
+	 */
+	msg = msgs;
+	for (i = 0; i < msg_count; i++, msg++)
+		if (msg->flags & I2C_M_RD)
+			data_in_size += (u32)msg->len;
+		else
+			data_out_size += (u32)msg->len;
+
+	request_size = sizeof(*request);
+	request_size += msg_count * sizeof(*op);
+	request_size += data_out_size;
+
+	/* Response consists only of incoming data */
+	operation = gb_operation_create(connection, GB_I2C_TYPE_TRANSFER,
+				request_size, data_in_size);
+	if (!operation)
+		return NULL;
+
+	request = operation->request->payload;
+	request->op_count = cpu_to_le16(op_count);
+	/* Fill in the ops array */
+	op = &request->ops[0];
+	msg = msgs;
+	for (i = 0; i < msg_count; i++)
+		gb_i2c_fill_transfer_op(op++, msg++);
+
+	if (!data_out_size)
+		return operation;
+
+	/* Copy over the outgoing data; it starts after the last op */
+	data = op;
+	msg = msgs;
+	for (i = 0; i < msg_count; i++) {
+		if (!(msg->flags & I2C_M_RD)) {
+			memcpy(data, msg->buf, msg->len);
+			data += msg->len;
+		}
+		msg++;
+	}
+
+	return operation;
+}
+
+static void gb_i2c_transfer_response(struct i2c_msg *msgs, u32 msg_count,
+				struct gb_i2c_transfer_response *response)
+{
+	struct i2c_msg *msg = msgs;
+	u8 *data;
+	u32 i;
+
+	if (!response)
+		return;
+	data = response->data;
+	for (i = 0; i < msg_count; i++) {
+		if (msg->flags & I2C_M_RD) {
+			memcpy(msg->buf, data, msg->len);
+			data += msg->len;
+		}
+		msg++;
+	}
+}
+
+/*
+ * Some i2c transfer operations return results that are expected.
+ */
+static bool gb_i2c_expected_transfer_error(int errno)
+{
+	return errno == -EAGAIN || errno == -ENODEV;
+}
+
+static int gb_i2c_transfer_operation(struct gb_i2c_device *gb_i2c_dev,
+					struct i2c_msg *msgs, u32 msg_count)
+{
+	struct gb_connection *connection = gb_i2c_dev->connection;
+	struct gb_operation *operation;
+	int ret;
+
+	operation = gb_i2c_transfer_request(connection, msgs, msg_count);
+	if (!operation)
+		return -ENOMEM;
+
+	ret = gb_operation_request_send_sync(operation);
+	if (!ret) {
+		struct gb_i2c_transfer_response *response;
+
+		response = operation->response->payload;
+		gb_i2c_transfer_response(msgs, msg_count, response);
+		ret = msg_count;
+	} else if (!gb_i2c_expected_transfer_error(ret)) {
+		pr_err("transfer operation failed (%d)\n", ret);
+	}
+	gb_operation_destroy(operation);
+
+	return ret;
+}
+
+static int gb_i2c_master_xfer(struct i2c_adapter *adap, struct i2c_msg *msgs,
+		int msg_count)
+{
+	struct gb_i2c_device *gb_i2c_dev;
+
+	gb_i2c_dev = i2c_get_adapdata(adap);
+
+	return gb_i2c_transfer_operation(gb_i2c_dev, msgs, msg_count);
+}
+
+#if 0
+/* Later */
+static int gb_i2c_smbus_xfer(struct i2c_adapter *adap,
+			u16 addr, unsigned short flags, char read_write,
+			u8 command, int size, union i2c_smbus_data *data)
+{
+	struct gb_i2c_device *gb_i2c_dev;
+
+	gb_i2c_dev = i2c_get_adapdata(adap);
+
+	return 0;
+}
+#endif
+
+static u32 gb_i2c_functionality(struct i2c_adapter *adap)
+{
+	struct gb_i2c_device *gb_i2c_dev = i2c_get_adapdata(adap);
+
+	return gb_i2c_dev->functionality;
+}
+
+static const struct i2c_algorithm gb_i2c_algorithm = {
+	.master_xfer	= gb_i2c_master_xfer,
+	/* .smbus_xfer	= gb_i2c_smbus_xfer, */
+	.functionality	= gb_i2c_functionality,
+};
+
+/*
+ * Do initial setup of the i2c device.  This includes verifying we
+ * can support it (based on the protocol version it advertises).
+ * If that's OK, we get and cached its functionality bits, and
+ * set up the retry count and timeout.
+ *
+ * Note: gb_i2c_dev->connection is assumed to have been valid.
+ */
+static int gb_i2c_device_setup(struct gb_i2c_device *gb_i2c_dev)
+{
+	int ret;
+
+	/* First thing we need to do is check the version */
+	ret = gb_i2c_proto_version_operation(gb_i2c_dev);
+	if (ret)
+		return ret;
+
+	/* Assume the functionality never changes, just get it once */
+	ret = gb_i2c_functionality_operation(gb_i2c_dev);
+	if (ret)
+		return ret;
+
+	/* Set up our default retry count and timeout */
+	ret = gb_i2c_retries_operation(gb_i2c_dev, GB_I2C_RETRIES_DEFAULT);
+	if (ret)
+		return ret;
+
+	return gb_i2c_timeout_operation(gb_i2c_dev, GB_I2C_TIMEOUT_DEFAULT);
+}
+
+static int gb_i2c_connection_init(struct gb_connection *connection)
+{
+	struct gb_i2c_device *gb_i2c_dev;
+	struct i2c_adapter *adapter;
+	int ret;
+
+	gb_i2c_dev = kzalloc(sizeof(*gb_i2c_dev), GFP_KERNEL);
+	if (!gb_i2c_dev)
+		return -ENOMEM;
+
+	gb_i2c_dev->connection = connection;	/* refcount? */
+	connection->private = gb_i2c_dev;
+
+	ret = gb_i2c_device_setup(gb_i2c_dev);
+	if (ret)
+		goto out_err;
+
+	/* Looks good; up our i2c adapter */
+	adapter = &gb_i2c_dev->adapter;
+	adapter->owner = THIS_MODULE;
+	adapter->class = I2C_CLASS_HWMON | I2C_CLASS_SPD;
+	adapter->algo = &gb_i2c_algorithm;
+	/* adapter->algo_data = what? */
+	adapter->timeout = gb_i2c_dev->timeout_msec * HZ / 1000;
+	adapter->retries = gb_i2c_dev->retries;
+
+	adapter->dev.parent = &connection->dev;
+	snprintf(adapter->name, sizeof(adapter->name), "Greybus i2c adapter");
+	i2c_set_adapdata(adapter, gb_i2c_dev);
+
+	ret = i2c_add_adapter(adapter);
+	if (ret)
+		goto out_err;
+
+	return 0;
+out_err:
+	/* kref_put(gb_i2c_dev->connection) */
+	kfree(gb_i2c_dev);
+
+	return ret;
+}
+
+static void gb_i2c_connection_exit(struct gb_connection *connection)
+{
+	struct gb_i2c_device *gb_i2c_dev = connection->private;
+
+	i2c_del_adapter(&gb_i2c_dev->adapter);
+	/* kref_put(gb_i2c_dev->connection) */
+	kfree(gb_i2c_dev);
+}
+
+static struct gb_protocol i2c_protocol = {
+	.name			= "i2c",
+	.id			= GREYBUS_PROTOCOL_I2C,
+	.major			= 0,
+	.minor			= 1,
+	.connection_init	= gb_i2c_connection_init,
+	.connection_exit	= gb_i2c_connection_exit,
+	.request_recv		= NULL,	/* no incoming requests */
+};
+
+int gb_i2c_protocol_init(void)
+{
+	return gb_protocol_register(&i2c_protocol);
+}
+
+void gb_i2c_protocol_exit(void)
+{
+	gb_protocol_deregister(&i2c_protocol);
+}
