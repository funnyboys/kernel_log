commit baeeb02ccd704e3a6cdff95a78a41916e6a85b21
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Sun Aug 25 07:54:21 2019 +0200

    staging: greybus: fix up SPDX comment in .h files
    
    When these files originally got an SPDX tag, I used // instead of /* */
    for the .h files.  Fix this up to use // properly.
    
    Cc: Johan Hovold <johan@kernel.org>
    Cc: greybus-dev@lists.linaro.org
    Cc: devel@driverdev.osuosl.org
    Acked-by: Viresh Kumar <viresh.kumar@linaro.org>
    Acked-by: Alex Elder <elder@kernel.org>
    Link: https://lore.kernel.org/r/20190825055429.18547-2-gregkh@linuxfoundation.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/greybus/gb-camera.h b/drivers/staging/greybus/gb-camera.h
index ee293e461fc3..5fc469101fc1 100644
--- a/drivers/staging/greybus/gb-camera.h
+++ b/drivers/staging/greybus/gb-camera.h
@@ -1,4 +1,4 @@
-// SPDX-License-Identifier: GPL-2.0
+/* SPDX-License-Identifier: GPL-2.0 */
 /*
  * Greybus Camera protocol driver.
  *

commit 863dbc52e7f0e5acd7b4883f3933543a81c474c7
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Tue Nov 7 14:58:42 2017 +0100

    staging: greybus: Remove redundant license text
    
    Now that the SPDX tag is in all greybus files, that identifies the
    license in a specific and legally-defined manner.  So the extra GPL text
    wording can be removed as it is no longer needed at all.
    
    This is done on a quest to remove the 700+ different ways that files in
    the kernel describe the GPL license text.  And there's unneeded stuff
    like the address (sometimes incorrect) for the FSF which is never
    needed.
    
    No copyright headers or other non-license-description text was removed.
    
    Cc: Vaibhav Hiremath <hvaibhav.linux@gmail.com>
    Reviewed-by: Alex Elder <elder@linaro.org>
    Acked-by: Vaibhav Agarwal <vaibhav.sr@gmail.com>
    Acked-by: David Lin <dtwlin@gmail.com>
    Acked-by: Johan Hovold <johan@kernel.org>
    Acked-by: Viresh Kumar <viresh.kumar@linaro.org>
    Acked-by: Mark Greer <mgreer@animalcreek.com>
    Acked-by: Rui Miguel Silva <rmfrfs@gmail.com>
    Acked-by: "Bryan O'Donoghue" <pure.logic@nexus-software.ie>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/greybus/gb-camera.h b/drivers/staging/greybus/gb-camera.h
index ff7e739304d6..ee293e461fc3 100644
--- a/drivers/staging/greybus/gb-camera.h
+++ b/drivers/staging/greybus/gb-camera.h
@@ -3,8 +3,6 @@
  * Greybus Camera protocol driver.
  *
  * Copyright 2015 Google Inc.
- *
- * Released under the GPLv2 only.
  */
 #ifndef __GB_CAMERA_H
 #define __GB_CAMERA_H

commit eb50fd3a22c770f36be275295b782f3ea52e3215
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Tue Nov 7 14:58:41 2017 +0100

    staging: greybus: add SPDX identifiers to all greybus driver files
    
    It's good to have SPDX identifiers in all files to make it easier to
    audit the kernel tree for correct licenses.
    
    Update the drivers/staging/greybus files files with the correct SPDX
    license identifier based on the license text in the file itself.  The
    SPDX identifier is a legally binding shorthand, which can be used
    instead of the full boiler plate text.
    
    This work is based on a script and data from Thomas Gleixner, Philippe
    Ombredanne, and Kate Stewart.
    
    Cc: Vaibhav Hiremath <hvaibhav.linux@gmail.com>
    Cc: "Bryan O'Donoghue" <pure.logic@nexus-software.ie>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: Kate Stewart <kstewart@linuxfoundation.org>
    Cc: Philippe Ombredanne <pombredanne@nexb.com>
    Acked-by: Vaibhav Agarwal <vaibhav.sr@gmail.com>
    Acked-by: David Lin <dtwlin@gmail.com>
    Reviewed-by: Alex Elder <elder@linaro.org>
    Acked-by: Johan Hovold <johan@kernel.org>
    Acked-by: Viresh Kumar <viresh.kumar@linaro.org>
    Acked-by: Mark Greer <mgreer@animalcreek.com>
    Acked-by: Rui Miguel Silva <rmfrfs@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/greybus/gb-camera.h b/drivers/staging/greybus/gb-camera.h
index d45dabc5b367..ff7e739304d6 100644
--- a/drivers/staging/greybus/gb-camera.h
+++ b/drivers/staging/greybus/gb-camera.h
@@ -1,3 +1,4 @@
+// SPDX-License-Identifier: GPL-2.0
 /*
  * Greybus Camera protocol driver.
  *

commit 433aa123f51b85b5ad8fb2f088a6365d54e2763b
Author: Jacopo Mondi <jacopo.mondi@linaro.org>
Date:   Fri Jul 15 11:03:46 2016 +0200

    greybus: camera: Update CSI config parameters
    
    Remove lines_per_second parameter from csi configuration
    structure as VFE driver dropped dependency on it
    
    Signed-off-by: Jacopo Mondi <jacopo.mondi@linaro.org>
    Reviewed-by: Laurent Pinchart <laurent.pinchart@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@google.com>

diff --git a/drivers/staging/greybus/gb-camera.h b/drivers/staging/greybus/gb-camera.h
index b8651ed05244..d45dabc5b367 100644
--- a/drivers/staging/greybus/gb-camera.h
+++ b/drivers/staging/greybus/gb-camera.h
@@ -41,13 +41,10 @@ struct gb_camera_stream {
  * struct gb_camera_csi_params - CSI configuration parameters
  * @num_lanes: number of CSI data lanes
  * @clk_freq: CSI clock frequency in Hz
- * @lines_per_second: Total number of lines in a second of transmission
- *                    (blanking included)
  */
 struct gb_camera_csi_params {
 	unsigned int num_lanes;
 	unsigned int clk_freq;
-	unsigned int lines_per_second;
 };
 
 /**

commit 6c5ce637db01c33712db996a78a74b25f3a5e0e3
Author: Evgeniy Borisov <borisov_evgeniy@projectara.com>
Date:   Tue May 31 11:33:10 2016 +0300

    greybus: camera-gb: Extend gb camera module structure
    
    Add additional information in gb camera module.
     - interface ID
     - reference count
     - release handle
    
    Signed-off-by: Evgeniy Borisov <eborisov@mm-sol.com>
    Reviewed-by: Gjorgji Rosikopulos <grosikopulos@mm-sol.com>
    Reviewed-by: Laurent Pinchart <laurent.pinchart@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@google.com>

diff --git a/drivers/staging/greybus/gb-camera.h b/drivers/staging/greybus/gb-camera.h
index 63f8c922fa9a..b8651ed05244 100644
--- a/drivers/staging/greybus/gb-camera.h
+++ b/drivers/staging/greybus/gb-camera.h
@@ -105,12 +105,18 @@ struct gb_camera_ops {
  * struct gb_camera_module - Represents greybus camera module.
  * @priv: Module private data, passed to all camera operations.
  * @ops: Greybus camera operation callbacks.
+ * @interface_id: Interface id of the module.
+ * @refcount: Reference counting object.
+ * @release: Module release function.
  * @list: List entry in the camera modules list.
  */
 struct gb_camera_module {
 	void *priv;
 	const struct gb_camera_ops *ops;
 
+	unsigned int interface_id;
+	struct kref refcount;
+	void (*release)(struct kref *kref);
 	struct list_head list; /* Global list */
 };
 

commit 07f91c75b490f67b1684a3a4d2b708a19ab93676
Author: Evgeniy Borisov <borisov_evgeniy@projectara.com>
Date:   Tue May 31 11:33:09 2016 +0300

    greybus: camera-gb: Add description of interface header
    
    Add description for all interface structures in
    gb-camera.h.
    
    Signed-off-by: Evgeniy Borisov <eborisov@mm-sol.com>
    Reviewed-by: Gjorgji Rosikopulos <grosikopulos@mm-sol.com>
    Reviewed-by: Laurent Pinchart <laurent.pinchart@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@google.com>

diff --git a/drivers/staging/greybus/gb-camera.h b/drivers/staging/greybus/gb-camera.h
index cc9c012249e2..63f8c922fa9a 100644
--- a/drivers/staging/greybus/gb-camera.h
+++ b/drivers/staging/greybus/gb-camera.h
@@ -15,6 +15,19 @@
 /* Output flags returned */
 #define GB_CAMERA_OUT_FLAG_ADJUSTED	(1 << 0)
 
+/**
+ * struct gb_camera_stream - Represents greybus camera stream.
+ * @width: Stream width in pixels.
+ * @height: Stream height in pixels.
+ * @pixel_code: Media bus pixel code.
+ * @vc: MIPI CSI virtual channel.
+ * @dt: MIPI CSI data types. Most formats use a single data type, in which case
+ *      the second element will be ignored.
+ * @max_size: Maximum size of a frame in bytes. The camera module guarantees
+ *            that all data between the Frame Start and Frame End packet for
+ *            the associated virtual channel and data type(s) will not exceed
+ *            this size.
+ */
 struct gb_camera_stream {
 	unsigned int width;
 	unsigned int height;
@@ -26,10 +39,10 @@ struct gb_camera_stream {
 
 /**
  * struct gb_camera_csi_params - CSI configuration parameters
- * @num_lanes:		number of CSI data lanes
- * @clk_freq:		CSI clock frequency in Hz
- * @lines_per_second:	total number of lines in a second of transmission
- *			(blanking included)
+ * @num_lanes: number of CSI data lanes
+ * @clk_freq: CSI clock frequency in Hz
+ * @lines_per_second: Total number of lines in a second of transmission
+ *                    (blanking included)
  */
 struct gb_camera_csi_params {
 	unsigned int num_lanes;
@@ -37,6 +50,46 @@ struct gb_camera_csi_params {
 	unsigned int lines_per_second;
 };
 
+/**
+ * struct gb_camera_ops - Greybus camera operations, used by the Greybus camera
+ *                        driver to expose operations to the host camera driver.
+ * @capabilities: Retrieve camera capabilities and store them in the buffer
+ *                'buf' capabilities. The buffer maximum size is specified by
+ *                the caller in the 'size' parameter, and the effective
+ *                capabilities size is returned from the function. If the buffer
+ *                size is too small to hold the capabilities an error is
+ *                returned and the buffer is left untouched.
+ *
+ * @configure_streams: Negotiate configuration and prepare the module for video
+ *                     capture. The caller specifies the number of streams it
+ *                     requests in the 'nstreams' argument and the associated
+ *                     streams configurations in the 'streams' argument. The
+ *                     GB_CAMERA_IN_FLAG_TEST 'flag' can be set to test a
+ *                     configuration without applying it, otherwise the
+ *                     configuration is applied by the module. The module can
+ *                     decide to modify the requested configuration, including
+ *                     using a different number of streams. In that case the
+ *                     modified configuration won't be applied, the
+ *                     GB_CAMERA_OUT_FLAG_ADJUSTED 'flag' will be set upon
+ *                     return, and the modified configuration and number of
+ *                     streams stored in 'streams' and 'array'. The module
+ *                     returns its CSI-2 bus parameters in the 'csi_params'
+ *                     structure in all cases.
+ *
+ * @capture: Submit a capture request. The supplied 'request_id' must be unique
+ *           and higher than the IDs of all the previously submitted requests.
+ *           The 'streams' argument specifies which streams are affected by the
+ *           request in the form of a bitmask, with bits corresponding to the
+ *           configured streams indexes. If the request contains settings, the
+ *           'settings' argument points to the settings buffer and its size is
+ *           specified by the 'settings_size' argument. Otherwise the 'settings'
+ *           argument should be set to NULL and 'settings_size' to 0.
+ *
+ * @flush: Flush the capture requests queue. Return the ID of the last request
+ *         that will processed by the device before it stops transmitting video
+ *         frames. All queued capture requests with IDs higher than the returned
+ *         ID will be dropped without being processed.
+ */
 struct gb_camera_ops {
 	ssize_t (*capabilities)(void *priv, char *buf, size_t len);
 	int (*configure_streams)(void *priv, unsigned int *nstreams,
@@ -48,6 +101,12 @@ struct gb_camera_ops {
 	int (*flush)(void *priv, u32 *request_id);
 };
 
+/**
+ * struct gb_camera_module - Represents greybus camera module.
+ * @priv: Module private data, passed to all camera operations.
+ * @ops: Greybus camera operation callbacks.
+ * @list: List entry in the camera modules list.
+ */
 struct gb_camera_module {
 	void *priv;
 	const struct gb_camera_ops *ops;

commit b4905038965fb986d8496e47cc52a08428408ae5
Author: Evgeniy Borisov <borisov_evgeniy@projectara.com>
Date:   Wed Apr 6 15:22:45 2016 +0300

    greybus: camera-gb: Extend the configure streams interface
    
    Extending the configure streams interface with CSI params.
    Getting CSI frequency data form configure streams response.
     * num_lanes - Number of CSI data lanes
     * clk_freq - CSI clock frequency in Hz
     * lines_per_second - Total number of lines in a second of
    transmission (blanking included)
    
    From the AP side we need to know for the CSI speed
    configuration. This information is needed for dynamically
    bandwidth calculations.
    
    NOTE: Change should be along merged with corresponding
          interface change in kernel:
          "camera: Extend the configure streams
          interface with CSI params"
    
    Signed-off-by: Evgeniy Borisov <eborisov@mm-sol.com>
    Reviewed-by: Gjorgji Rosikopulos <grosikopulos@mm-sol.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@google.com>

diff --git a/drivers/staging/greybus/gb-camera.h b/drivers/staging/greybus/gb-camera.h
index 273b4fa6dd4f..cc9c012249e2 100644
--- a/drivers/staging/greybus/gb-camera.h
+++ b/drivers/staging/greybus/gb-camera.h
@@ -24,10 +24,24 @@ struct gb_camera_stream {
 	unsigned int max_size;
 };
 
+/**
+ * struct gb_camera_csi_params - CSI configuration parameters
+ * @num_lanes:		number of CSI data lanes
+ * @clk_freq:		CSI clock frequency in Hz
+ * @lines_per_second:	total number of lines in a second of transmission
+ *			(blanking included)
+ */
+struct gb_camera_csi_params {
+	unsigned int num_lanes;
+	unsigned int clk_freq;
+	unsigned int lines_per_second;
+};
+
 struct gb_camera_ops {
 	ssize_t (*capabilities)(void *priv, char *buf, size_t len);
 	int (*configure_streams)(void *priv, unsigned int *nstreams,
-			unsigned int *flags, struct gb_camera_stream *streams);
+			unsigned int *flags, struct gb_camera_stream *streams,
+			struct gb_camera_csi_params *csi_params);
 	int (*capture)(void *priv, u32 request_id,
 			unsigned int streams, unsigned int num_frames,
 			size_t settings_size, const void *settings);

commit 1472ec67f734d9707d4758fddd4787113fe0b0b2
Author: Gjorgji Rosikopulos <grosikopulos@mm-sol.com>
Date:   Thu Mar 31 14:12:45 2016 +0300

    greybus: camera: Use pointer for gb camera module ops
    
    No need to duplicate module ops on every registration.
    
    NOTE: Change should be along merged with:
    "msm: camera: Change gb_camera_module ops to pointer"
    
    Signed-off-by: Gjorgji Rosikopulos <grosikopulos@mm-sol.com>
    Reviewed-by: Laurent Pinchart <laurent.pinchart@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@google.com>

diff --git a/drivers/staging/greybus/gb-camera.h b/drivers/staging/greybus/gb-camera.h
index 0a48a16b675e..273b4fa6dd4f 100644
--- a/drivers/staging/greybus/gb-camera.h
+++ b/drivers/staging/greybus/gb-camera.h
@@ -36,14 +36,14 @@ struct gb_camera_ops {
 
 struct gb_camera_module {
 	void *priv;
-	struct gb_camera_ops ops;
+	const struct gb_camera_ops *ops;
 
 	struct list_head list; /* Global list */
 };
 
 #define gb_camera_call(f, op, args...)      \
-	((!(f) ? -ENODEV : ((f)->ops.op) ?  \
-	(f)->ops.op((f)->priv, ##args) : -ENOIOCTLCMD))
+	(!(f) ? -ENODEV : (((f)->ops->op) ?  \
+	(f)->ops->op((f)->priv, ##args) : -ENOIOCTLCMD))
 
 int gb_camera_register(struct gb_camera_module *module);
 int gb_camera_unregister(struct gb_camera_module *module);

commit c3d77f71308e38ef98909c317c57d906f4d51cb9
Author: Gjorgji Rosikopulos <grosikopulos@mm-sol.com>
Date:   Mon Mar 14 18:44:53 2016 +0200

    greybus: camera: Improve module registration mechanism
    
    Registering more then one module at same time was not
    possible with previous implementation. Also unregistering
    of the module was missing leading to many instability issues
    when camera module is ejected when camera is still active.
    
    Signed-off-by: Gjorgji Rosikopulos <grosikopulos@mm-sol.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@google.com>

diff --git a/drivers/staging/greybus/gb-camera.h b/drivers/staging/greybus/gb-camera.h
index 50af0573737b..0a48a16b675e 100644
--- a/drivers/staging/greybus/gb-camera.h
+++ b/drivers/staging/greybus/gb-camera.h
@@ -34,9 +34,18 @@ struct gb_camera_ops {
 	int (*flush)(void *priv, u32 *request_id);
 };
 
-#define gb_camera_call(f, p, op, args...)             \
-	(((f)->op) ? (f)->op(p, ##args) : -ENOIOCTLCMD)
+struct gb_camera_module {
+	void *priv;
+	struct gb_camera_ops ops;
 
-int gb_camera_register(struct gb_camera_ops *ops, void *priv);
+	struct list_head list; /* Global list */
+};
+
+#define gb_camera_call(f, op, args...)      \
+	((!(f) ? -ENODEV : ((f)->ops.op) ?  \
+	(f)->ops.op((f)->priv, ##args) : -ENOIOCTLCMD))
+
+int gb_camera_register(struct gb_camera_module *module);
+int gb_camera_unregister(struct gb_camera_module *module);
 
 #endif /* __GB_CAMERA_H */

commit 24ac4fa490bf105c202b843280eb67b2327c337f
Author: Gjorgji Rosikopulos <grosikopulos@mm-sol.com>
Date:   Sun Jan 17 19:52:20 2016 +0200

    greybus: camera: Add support for configure streams flag in gb interface
    
    Update gb interface and export flags needed for latest
    protocol version. Number of streams also can be changed
    based on operation result.
    Caller sets input flags, end fucntion return output
    flags
    
    Input flags supported:
    - GB_CAMERA_IN_FLAG_TEST - Need to be set when operation
    is not actually applied.
    
    Output flags supported:
    - GB_CAMERA_OUT_FLAG_ADJUSTED - This is result of the operation
    if this flag is set, result is adjusted and operation
    need to be repeat.
    
    Signed-off-by: Gjorgji Rosikopulos <grosikopulos@mm-sol.com>
    Acked-by: Laurent Pinchart <laurent.pinchart@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@google.com>

diff --git a/drivers/staging/greybus/gb-camera.h b/drivers/staging/greybus/gb-camera.h
index a1824740ef83..50af0573737b 100644
--- a/drivers/staging/greybus/gb-camera.h
+++ b/drivers/staging/greybus/gb-camera.h
@@ -10,6 +10,11 @@
 
 #include <linux/v4l2-mediabus.h>
 
+/* Input flags need to be set from the caller */
+#define GB_CAMERA_IN_FLAG_TEST		(1 << 0)
+/* Output flags returned */
+#define GB_CAMERA_OUT_FLAG_ADJUSTED	(1 << 0)
+
 struct gb_camera_stream {
 	unsigned int width;
 	unsigned int height;
@@ -21,8 +26,8 @@ struct gb_camera_stream {
 
 struct gb_camera_ops {
 	ssize_t (*capabilities)(void *priv, char *buf, size_t len);
-	int (*configure_streams)(void *priv, unsigned int nstreams,
-				struct gb_camera_stream *streams);
+	int (*configure_streams)(void *priv, unsigned int *nstreams,
+			unsigned int *flags, struct gb_camera_stream *streams);
 	int (*capture)(void *priv, u32 request_id,
 			unsigned int streams, unsigned int num_frames,
 			size_t settings_size, const void *settings);

commit fc0ddf5adbc2636365b1f8c3c21cd3adf0a8c252
Author: Gjorgji Rosikopulos <grosikopulos@mm-sol.com>
Date:   Wed Jan 13 21:52:37 2016 +0200

    greybus: camera: HACK: Export GB camera interface
    
    Gb camera need to communicate with HOST driver.
    as temporary solution there will be shared header
    between gb camera HOST camera.
    Both need to be in sync since gb drivers are compiled
    out of the kernel tree.
    
    Gb camera register camera operation functions when is created.
    Currently unregister is not supported.
    
    Signed-off-by: Gjorgji Rosikopulos <grosikopulos@mm-sol.com>
    Acked-by: Laurent Pinchart <laurent.pinchart@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@google.com>

diff --git a/drivers/staging/greybus/gb-camera.h b/drivers/staging/greybus/gb-camera.h
new file mode 100644
index 000000000000..a1824740ef83
--- /dev/null
+++ b/drivers/staging/greybus/gb-camera.h
@@ -0,0 +1,37 @@
+/*
+ * Greybus Camera protocol driver.
+ *
+ * Copyright 2015 Google Inc.
+ *
+ * Released under the GPLv2 only.
+ */
+#ifndef __GB_CAMERA_H
+#define __GB_CAMERA_H
+
+#include <linux/v4l2-mediabus.h>
+
+struct gb_camera_stream {
+	unsigned int width;
+	unsigned int height;
+	enum v4l2_mbus_pixelcode pixel_code;
+	unsigned int vc;
+	unsigned int dt[2];
+	unsigned int max_size;
+};
+
+struct gb_camera_ops {
+	ssize_t (*capabilities)(void *priv, char *buf, size_t len);
+	int (*configure_streams)(void *priv, unsigned int nstreams,
+				struct gb_camera_stream *streams);
+	int (*capture)(void *priv, u32 request_id,
+			unsigned int streams, unsigned int num_frames,
+			size_t settings_size, const void *settings);
+	int (*flush)(void *priv, u32 *request_id);
+};
+
+#define gb_camera_call(f, p, op, args...)             \
+	(((f)->op) ? (f)->op(p, ##args) : -ENOIOCTLCMD)
+
+int gb_camera_register(struct gb_camera_ops *ops, void *priv);
+
+#endif /* __GB_CAMERA_H */
