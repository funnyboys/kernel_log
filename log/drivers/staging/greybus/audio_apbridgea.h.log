commit 5979afa2c4d1c8acce28a176ebe27ea13265626a
Author: Gustavo A. R. Silva <gustavo@embeddedor.com>
Date:   Thu Feb 20 07:29:08 2020 -0600

    staging: Replace zero-length array with flexible-array member
    
    The current codebase makes use of the zero-length array language
    extension to the C90 standard, but the preferred mechanism to declare
    variable-length types such as these ones is a flexible array member[1][2],
    introduced in C99:
    
    struct foo {
            int stuff;
            struct boo array[];
    };
    
    By making use of the mechanism above, we will get a compiler warning
    in case the flexible array does not occur last in the structure, which
    will help us prevent some kind of undefined behavior bugs from being
    inadvertently introduced[3] to the codebase from now on.
    
    Also, notice that, dynamic memory allocations won't be affected by
    this change:
    
    "Flexible array members have incomplete type, and so the sizeof operator
    may not be applied. As a quirk of the original implementation of
    zero-length arrays, sizeof evaluates to zero."[1]
    
    This issue was found with the help of Coccinelle.
    
    [1] https://gcc.gnu.org/onlinedocs/gcc/Zero-Length.html
    [2] https://github.com/KSPP/linux/issues/21
    [3] commit 76497732932f ("cxgb3/l2t: Fix undefined behaviour")
    
    Signed-off-by: Gustavo A. R. Silva <gustavo@embeddedor.com>
    Link: https://lore.kernel.org/r/20200220132908.GA30501@embeddedor
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/greybus/audio_apbridgea.h b/drivers/staging/greybus/audio_apbridgea.h
index 3f1f4dd2c61a..efec0f815efd 100644
--- a/drivers/staging/greybus/audio_apbridgea.h
+++ b/drivers/staging/greybus/audio_apbridgea.h
@@ -65,7 +65,7 @@
 struct audio_apbridgea_hdr {
 	__u8	type;
 	__le16	i2s_port;
-	__u8	data[0];
+	__u8	data[];
 } __packed;
 
 struct audio_apbridgea_set_config_request {

commit 137bfbd006b2aad72fa90b6fbe096f3a1db5b32a
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Sun Aug 25 07:54:22 2019 +0200

    staging: greybus: remove license "boilerplate"
    
    When the greybus drivers were converted to SPDX identifiers for the
    license text, some license boilerplate was not removed.  Clean this up
    by removing this unneeded text now.
    
    Cc: Johan Hovold <johan@kernel.org>
    Cc: Vaibhav Agarwal <vaibhav.sr@gmail.com>
    Cc: "Bryan O'Donoghue" <pure.logic@nexus-software.ie>
    Cc: greybus-dev@lists.linaro.org
    Cc: devel@driverdev.osuosl.org
    Acked-by: Mark Greer <mgreer@animalcreekk.com>
    Acked-by: Viresh Kumar <viresh.kumar@linaro.org>
    Acked-by: Alex Elder <elder@kernel.org>
    Link: https://lore.kernel.org/r/20190825055429.18547-3-gregkh@linuxfoundation.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/greybus/audio_apbridgea.h b/drivers/staging/greybus/audio_apbridgea.h
index 330fc7a397eb..3f1f4dd2c61a 100644
--- a/drivers/staging/greybus/audio_apbridgea.h
+++ b/drivers/staging/greybus/audio_apbridgea.h
@@ -1,30 +1,6 @@
 /* SPDX-License-Identifier: BSD-3-Clause */
-/**
+/*
  * Copyright (c) 2015-2016 Google Inc.
- * All rights reserved.
- *
- * Redistribution and use in source and binary forms, with or without
- * modification, are permitted provided that the following conditions are met:
- * 1. Redistributions of source code must retain the above copyright notice,
- * this list of conditions and the following disclaimer.
- * 2. Redistributions in binary form must reproduce the above copyright notice,
- * this list of conditions and the following disclaimer in the documentation
- * and/or other materials provided with the distribution.
- * 3. Neither the name of the copyright holder nor the names of its
- * contributors may be used to endorse or promote products derived from this
- * software without specific prior written permission.
- *
- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
- * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
- * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
- * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
- * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
- * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
- * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
- * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
- * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
- * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
- * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  */
 /*
  * This is a special protocol for configuring communication over the

commit f5e4e5e7ae9cab22d62bc870be78c9daf38ab645
Author: Ioannis Valasakis <code@wizofe.uk>
Date:   Fri Nov 9 13:54:00 2018 +0000

    staging: greybus: correct SPDX License Identifier
    
    Replace SPDX License Identifier comments with C comments.
    Reported by checkpatch.
    
    Signed-off-by: Ioannis Valasakis <code@wizofe.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/greybus/audio_apbridgea.h b/drivers/staging/greybus/audio_apbridgea.h
index 42ac6059bfc7..330fc7a397eb 100644
--- a/drivers/staging/greybus/audio_apbridgea.h
+++ b/drivers/staging/greybus/audio_apbridgea.h
@@ -1,4 +1,4 @@
-// SPDX-License-Identifier: BSD-3-Clause
+/* SPDX-License-Identifier: BSD-3-Clause */
 /**
  * Copyright (c) 2015-2016 Google Inc.
  * All rights reserved.

commit eb50fd3a22c770f36be275295b782f3ea52e3215
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Tue Nov 7 14:58:41 2017 +0100

    staging: greybus: add SPDX identifiers to all greybus driver files
    
    It's good to have SPDX identifiers in all files to make it easier to
    audit the kernel tree for correct licenses.
    
    Update the drivers/staging/greybus files files with the correct SPDX
    license identifier based on the license text in the file itself.  The
    SPDX identifier is a legally binding shorthand, which can be used
    instead of the full boiler plate text.
    
    This work is based on a script and data from Thomas Gleixner, Philippe
    Ombredanne, and Kate Stewart.
    
    Cc: Vaibhav Hiremath <hvaibhav.linux@gmail.com>
    Cc: "Bryan O'Donoghue" <pure.logic@nexus-software.ie>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: Kate Stewart <kstewart@linuxfoundation.org>
    Cc: Philippe Ombredanne <pombredanne@nexb.com>
    Acked-by: Vaibhav Agarwal <vaibhav.sr@gmail.com>
    Acked-by: David Lin <dtwlin@gmail.com>
    Reviewed-by: Alex Elder <elder@linaro.org>
    Acked-by: Johan Hovold <johan@kernel.org>
    Acked-by: Viresh Kumar <viresh.kumar@linaro.org>
    Acked-by: Mark Greer <mgreer@animalcreek.com>
    Acked-by: Rui Miguel Silva <rmfrfs@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/greybus/audio_apbridgea.h b/drivers/staging/greybus/audio_apbridgea.h
index b94cb05c89e4..42ac6059bfc7 100644
--- a/drivers/staging/greybus/audio_apbridgea.h
+++ b/drivers/staging/greybus/audio_apbridgea.h
@@ -1,3 +1,4 @@
+// SPDX-License-Identifier: BSD-3-Clause
 /**
  * Copyright (c) 2015-2016 Google Inc.
  * All rights reserved.

commit ccc57e20d1cc54b6536a4e63f6da91f42b65000f
Author: Mark Greer <mgreer@animalcreek.com>
Date:   Tue Aug 2 20:36:07 2016 -0700

    greybus: audio: apbridgea: Remove GET_TX/RX_DELAY message types
    
    The 'AUDIO_APBRIDGEA_TYPE_GET_TX_DELAY' and
    'AUDIO_APBRIDGEA_TYPE_GET_RX_DELAY' message types have been
    removed from the AP <-> APBrigdeA Audio Protocol so remove
    them from the code.  Do not coalesce the message type numbers
    to prevent compatibility issues between the AP and APBridgeA.
    
    Testing Done: Played music using a speaker module
    
    Signed-off-by: Mark Greer <mgreer@animalcreek.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@google.com>

diff --git a/drivers/staging/greybus/audio_apbridgea.h b/drivers/staging/greybus/audio_apbridgea.h
index a48f815bc56b..b94cb05c89e4 100644
--- a/drivers/staging/greybus/audio_apbridgea.h
+++ b/drivers/staging/greybus/audio_apbridgea.h
@@ -47,13 +47,13 @@
 #define AUDIO_APBRIDGEA_TYPE_REGISTER_CPORT		0x02
 #define AUDIO_APBRIDGEA_TYPE_UNREGISTER_CPORT		0x03
 #define AUDIO_APBRIDGEA_TYPE_SET_TX_DATA_SIZE		0x04
-#define AUDIO_APBRIDGEA_TYPE_GET_TX_DELAY		0x05
+							/* 0x05 unused */
 #define AUDIO_APBRIDGEA_TYPE_PREPARE_TX			0x06
 #define AUDIO_APBRIDGEA_TYPE_START_TX			0x07
 #define AUDIO_APBRIDGEA_TYPE_STOP_TX			0x08
 #define AUDIO_APBRIDGEA_TYPE_SHUTDOWN_TX		0x09
 #define AUDIO_APBRIDGEA_TYPE_SET_RX_DATA_SIZE		0x0a
-#define AUDIO_APBRIDGEA_TYPE_GET_RX_DELAY		0x0b
+							/* 0x0b unused */
 #define AUDIO_APBRIDGEA_TYPE_PREPARE_RX			0x0c
 #define AUDIO_APBRIDGEA_TYPE_START_RX			0x0d
 #define AUDIO_APBRIDGEA_TYPE_STOP_RX			0x0e
@@ -115,15 +115,6 @@ struct audio_apbridgea_set_tx_data_size_request {
 	__le16				size;
 } __packed;
 
-struct audio_apbridgea_get_tx_delay_request {
-	struct audio_apbridgea_hdr	hdr;
-} __packed;
-
-struct audio_apbridgea_get_tx_delay_response {
-	struct audio_apbridgea_hdr	hdr;
-	__le16				delay;
-} __packed;
-
 struct audio_apbridgea_prepare_tx_request {
 	struct audio_apbridgea_hdr	hdr;
 } __packed;
@@ -146,15 +137,6 @@ struct audio_apbridgea_set_rx_data_size_request {
 	__le16				size;
 } __packed;
 
-struct audio_apbridgea_get_rx_delay_request {
-	struct audio_apbridgea_hdr	hdr;
-} __packed;
-
-struct audio_apbridgea_get_rx_delay_response {
-	struct audio_apbridgea_hdr	hdr;
-	__le16				delay;
-} __packed;
-
 struct audio_apbridgea_prepare_rx_request {
 	struct audio_apbridgea_hdr	hdr;
 } __packed;

commit 5bbe14b7acc2a00f51b23812ffc596577d94e80b
Author: Mark Greer <mgreer@animalcreek.com>
Date:   Mon Feb 29 15:31:02 2016 -0700

    greybus: audio: Split start and stop APBridgeA requests
    
    Provide finer-grained control of the audio streaming on APB1 by
    splitting the transmit/receive start and stop requests into prepare,
    start, stop, and shutdown.
    
    CC: Vaibhav Agarwal <vaibhav.agarwal@linaro.org>
    Signed-off-by: Mark Greer <mgreer@animalcreek.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@google.com>

diff --git a/drivers/staging/greybus/audio_apbridgea.h b/drivers/staging/greybus/audio_apbridgea.h
index c543e399ca04..a48f815bc56b 100644
--- a/drivers/staging/greybus/audio_apbridgea.h
+++ b/drivers/staging/greybus/audio_apbridgea.h
@@ -48,12 +48,16 @@
 #define AUDIO_APBRIDGEA_TYPE_UNREGISTER_CPORT		0x03
 #define AUDIO_APBRIDGEA_TYPE_SET_TX_DATA_SIZE		0x04
 #define AUDIO_APBRIDGEA_TYPE_GET_TX_DELAY		0x05
-#define AUDIO_APBRIDGEA_TYPE_START_TX			0x06
-#define AUDIO_APBRIDGEA_TYPE_STOP_TX			0x07
-#define AUDIO_APBRIDGEA_TYPE_SET_RX_DATA_SIZE		0x08
-#define AUDIO_APBRIDGEA_TYPE_GET_RX_DELAY		0x09
-#define AUDIO_APBRIDGEA_TYPE_START_RX			0x0a
-#define AUDIO_APBRIDGEA_TYPE_STOP_RX			0x0b
+#define AUDIO_APBRIDGEA_TYPE_PREPARE_TX			0x06
+#define AUDIO_APBRIDGEA_TYPE_START_TX			0x07
+#define AUDIO_APBRIDGEA_TYPE_STOP_TX			0x08
+#define AUDIO_APBRIDGEA_TYPE_SHUTDOWN_TX		0x09
+#define AUDIO_APBRIDGEA_TYPE_SET_RX_DATA_SIZE		0x0a
+#define AUDIO_APBRIDGEA_TYPE_GET_RX_DELAY		0x0b
+#define AUDIO_APBRIDGEA_TYPE_PREPARE_RX			0x0c
+#define AUDIO_APBRIDGEA_TYPE_START_RX			0x0d
+#define AUDIO_APBRIDGEA_TYPE_STOP_RX			0x0e
+#define AUDIO_APBRIDGEA_TYPE_SHUTDOWN_RX		0x0f
 
 #define AUDIO_APBRIDGEA_PCM_FMT_8			BIT(0)
 #define AUDIO_APBRIDGEA_PCM_FMT_16			BIT(1)
@@ -120,6 +124,10 @@ struct audio_apbridgea_get_tx_delay_response {
 	__le16				delay;
 } __packed;
 
+struct audio_apbridgea_prepare_tx_request {
+	struct audio_apbridgea_hdr	hdr;
+} __packed;
+
 struct audio_apbridgea_start_tx_request {
 	struct audio_apbridgea_hdr	hdr;
 	__le64				timestamp;
@@ -129,6 +137,10 @@ struct audio_apbridgea_stop_tx_request {
 	struct audio_apbridgea_hdr	hdr;
 } __packed;
 
+struct audio_apbridgea_shutdown_tx_request {
+	struct audio_apbridgea_hdr	hdr;
+} __packed;
+
 struct audio_apbridgea_set_rx_data_size_request {
 	struct audio_apbridgea_hdr	hdr;
 	__le16				size;
@@ -143,6 +155,10 @@ struct audio_apbridgea_get_rx_delay_response {
 	__le16				delay;
 } __packed;
 
+struct audio_apbridgea_prepare_rx_request {
+	struct audio_apbridgea_hdr	hdr;
+} __packed;
+
 struct audio_apbridgea_start_rx_request {
 	struct audio_apbridgea_hdr	hdr;
 } __packed;
@@ -151,4 +167,8 @@ struct audio_apbridgea_stop_rx_request {
 	struct audio_apbridgea_hdr	hdr;
 } __packed;
 
+struct audio_apbridgea_shutdown_rx_request {
+	struct audio_apbridgea_hdr	hdr;
+} __packed;
+
 #endif /*__AUDIO_APBRIDGEA_H */

commit 4a8e519902e73c833fb57f69bc194c2274dcdc30
Author: Mark Greer <mgreer@animalcreek.com>
Date:   Fri Feb 26 17:04:36 2016 -0700

    greybus: audio: Register CPorts for specific directions
    
    Currently, it is assumed that all audio data CPorts registered on
    APB1 are used for transmitting audio data.  That may not always be
    true like when a microphone is connected but no speakers.  Also,
    the current special protocol lacks a way to tell APB1 whether the CPort
    being registered is for transmitting, receiving, or both.
    
    Fix by adding a 'direction' field to the register and unregister CPort
    requests and define bits indicating which direction (or both) audio
    data will go on that CPort.
    
    Signed-off-by: Mark Greer <mgreer@animalcreek.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@google.com>

diff --git a/drivers/staging/greybus/audio_apbridgea.h b/drivers/staging/greybus/audio_apbridgea.h
index d1d56b7c1a75..c543e399ca04 100644
--- a/drivers/staging/greybus/audio_apbridgea.h
+++ b/drivers/staging/greybus/audio_apbridgea.h
@@ -75,6 +75,9 @@
 #define AUDIO_APBRIDGEA_PCM_RATE_176400			BIT(11)
 #define AUDIO_APBRIDGEA_PCM_RATE_192000			BIT(12)
 
+#define AUDIO_APBRIDGEA_DIRECTION_TX			BIT(0)
+#define AUDIO_APBRIDGEA_DIRECTION_RX			BIT(1)
+
 /* The I2S port is passed in the 'index' parameter of the USB request */
 /* The CPort is passed in the 'value' parameter of the USB request */
 
@@ -94,11 +97,13 @@ struct audio_apbridgea_set_config_request {
 struct audio_apbridgea_register_cport_request {
 	struct audio_apbridgea_hdr	hdr;
 	__le16				cport;
+	__u8				direction;
 } __packed;
 
 struct audio_apbridgea_unregister_cport_request {
 	struct audio_apbridgea_hdr	hdr;
 	__le16				cport;
+	__u8				direction;
 } __packed;
 
 struct audio_apbridgea_set_tx_data_size_request {

commit 4dbf5056405ad3c0ead370f0f3254c17b81b1e04
Author: Mark Greer <mgreer@animalcreek.com>
Date:   Wed Jan 13 14:07:47 2016 -0700

    greybus: audio: Add direct audio streaming control for APBridgeA
    
    The latest audio architecture does not stream audio data over the
    USB link between the AP and APBridgeA.  Instead, audio data is
    streamed directly over the I2S link between the two.
    
    To support the Greybus audio driver in setting up the I2S port and
    controling packeting/depacketizing of audio data to/from Greybus
    audio messages, define a set of commands and their parameters.
    These commands and parameters will be placed into a request and sent
    over the USB control channel to APBridgeA.  A corresponding driver
    on APBridgeA will receive and process the requests.
    
    Signed-off-by: Mark Greer <mgreer@animalcreek.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@google.com>

diff --git a/drivers/staging/greybus/audio_apbridgea.h b/drivers/staging/greybus/audio_apbridgea.h
new file mode 100644
index 000000000000..d1d56b7c1a75
--- /dev/null
+++ b/drivers/staging/greybus/audio_apbridgea.h
@@ -0,0 +1,149 @@
+/**
+ * Copyright (c) 2015-2016 Google Inc.
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are met:
+ * 1. Redistributions of source code must retain the above copyright notice,
+ * this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright notice,
+ * this list of conditions and the following disclaimer in the documentation
+ * and/or other materials provided with the distribution.
+ * 3. Neither the name of the copyright holder nor the names of its
+ * contributors may be used to endorse or promote products derived from this
+ * software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
+ * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
+ * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
+ * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
+ * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
+ * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
+ * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
+ * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
+ * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+/*
+ * This is a special protocol for configuring communication over the
+ * I2S bus between the DSP on the MSM8994 and APBridgeA.  Therefore,
+ * we can predefine several low-level attributes of the communication
+ * because we know that they are supported.  In particular, the following
+ * assumptions are made:
+ *	- there are two channels (i.e., stereo)
+ *	- the low-level protocol is I2S as defined by Philips/NXP
+ *	- the DSP on the MSM8994 is the clock master for MCLK, BCLK, and WCLK
+ *	- WCLK changes on the falling edge of BCLK
+ *	- WCLK low for left channel; high for right channel
+ *	- TX data is sent on the falling edge of BCLK
+ *	- RX data is received/latched on the rising edge of BCLK
+ */
+
+#ifndef __AUDIO_APBRIDGEA_H
+#define __AUDIO_APBRIDGEA_H
+
+#define AUDIO_APBRIDGEA_TYPE_SET_CONFIG			0x01
+#define AUDIO_APBRIDGEA_TYPE_REGISTER_CPORT		0x02
+#define AUDIO_APBRIDGEA_TYPE_UNREGISTER_CPORT		0x03
+#define AUDIO_APBRIDGEA_TYPE_SET_TX_DATA_SIZE		0x04
+#define AUDIO_APBRIDGEA_TYPE_GET_TX_DELAY		0x05
+#define AUDIO_APBRIDGEA_TYPE_START_TX			0x06
+#define AUDIO_APBRIDGEA_TYPE_STOP_TX			0x07
+#define AUDIO_APBRIDGEA_TYPE_SET_RX_DATA_SIZE		0x08
+#define AUDIO_APBRIDGEA_TYPE_GET_RX_DELAY		0x09
+#define AUDIO_APBRIDGEA_TYPE_START_RX			0x0a
+#define AUDIO_APBRIDGEA_TYPE_STOP_RX			0x0b
+
+#define AUDIO_APBRIDGEA_PCM_FMT_8			BIT(0)
+#define AUDIO_APBRIDGEA_PCM_FMT_16			BIT(1)
+#define AUDIO_APBRIDGEA_PCM_FMT_24			BIT(2)
+#define AUDIO_APBRIDGEA_PCM_FMT_32			BIT(3)
+#define AUDIO_APBRIDGEA_PCM_FMT_64			BIT(4)
+
+#define AUDIO_APBRIDGEA_PCM_RATE_5512			BIT(0)
+#define AUDIO_APBRIDGEA_PCM_RATE_8000			BIT(1)
+#define AUDIO_APBRIDGEA_PCM_RATE_11025			BIT(2)
+#define AUDIO_APBRIDGEA_PCM_RATE_16000			BIT(3)
+#define AUDIO_APBRIDGEA_PCM_RATE_22050			BIT(4)
+#define AUDIO_APBRIDGEA_PCM_RATE_32000			BIT(5)
+#define AUDIO_APBRIDGEA_PCM_RATE_44100			BIT(6)
+#define AUDIO_APBRIDGEA_PCM_RATE_48000			BIT(7)
+#define AUDIO_APBRIDGEA_PCM_RATE_64000			BIT(8)
+#define AUDIO_APBRIDGEA_PCM_RATE_88200			BIT(9)
+#define AUDIO_APBRIDGEA_PCM_RATE_96000			BIT(10)
+#define AUDIO_APBRIDGEA_PCM_RATE_176400			BIT(11)
+#define AUDIO_APBRIDGEA_PCM_RATE_192000			BIT(12)
+
+/* The I2S port is passed in the 'index' parameter of the USB request */
+/* The CPort is passed in the 'value' parameter of the USB request */
+
+struct audio_apbridgea_hdr {
+	__u8	type;
+	__le16	i2s_port;
+	__u8	data[0];
+} __packed;
+
+struct audio_apbridgea_set_config_request {
+	struct audio_apbridgea_hdr	hdr;
+	__le32				format;	/* AUDIO_APBRIDGEA_PCM_FMT_* */
+	__le32				rate;	/* AUDIO_APBRIDGEA_PCM_RATE_* */
+	__le32				mclk_freq; /* XXX Remove? */
+} __packed;
+
+struct audio_apbridgea_register_cport_request {
+	struct audio_apbridgea_hdr	hdr;
+	__le16				cport;
+} __packed;
+
+struct audio_apbridgea_unregister_cport_request {
+	struct audio_apbridgea_hdr	hdr;
+	__le16				cport;
+} __packed;
+
+struct audio_apbridgea_set_tx_data_size_request {
+	struct audio_apbridgea_hdr	hdr;
+	__le16				size;
+} __packed;
+
+struct audio_apbridgea_get_tx_delay_request {
+	struct audio_apbridgea_hdr	hdr;
+} __packed;
+
+struct audio_apbridgea_get_tx_delay_response {
+	struct audio_apbridgea_hdr	hdr;
+	__le16				delay;
+} __packed;
+
+struct audio_apbridgea_start_tx_request {
+	struct audio_apbridgea_hdr	hdr;
+	__le64				timestamp;
+} __packed;
+
+struct audio_apbridgea_stop_tx_request {
+	struct audio_apbridgea_hdr	hdr;
+} __packed;
+
+struct audio_apbridgea_set_rx_data_size_request {
+	struct audio_apbridgea_hdr	hdr;
+	__le16				size;
+} __packed;
+
+struct audio_apbridgea_get_rx_delay_request {
+	struct audio_apbridgea_hdr	hdr;
+} __packed;
+
+struct audio_apbridgea_get_rx_delay_response {
+	struct audio_apbridgea_hdr	hdr;
+	__le16				delay;
+} __packed;
+
+struct audio_apbridgea_start_rx_request {
+	struct audio_apbridgea_hdr	hdr;
+} __packed;
+
+struct audio_apbridgea_stop_rx_request {
+	struct audio_apbridgea_hdr	hdr;
+} __packed;
+
+#endif /*__AUDIO_APBRIDGEA_H */
