commit b7db58105b80fa9232719c8329b995b3addfab55
Author: Dan Carpenter <dan.carpenter@oracle.com>
Date:   Wed Feb 5 15:32:17 2020 +0300

    staging: greybus: use after free in gb_audio_manager_remove_all()
    
    When we call kobject_put() and it's the last reference to the kobject
    then it calls gb_audio_module_release() and frees module.  We dereference
    "module" on the next line which is a use after free.
    
    Fixes: c77f85bbc91a ("greybus: audio: Fix incorrect counting of 'ida'")
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Acked-by: Viresh Kumar <viresh.kumar@linaro.org>
    Reviewed-by: Vaibhav Agarwal <vaibhav.sr@gmail.com>
    Link: https://lore.kernel.org/r/20200205123217.jreendkyxulqsool@kili.mountain
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/greybus/audio_manager.c b/drivers/staging/greybus/audio_manager.c
index 9b19ea9d3fa1..9a3f7c034ab4 100644
--- a/drivers/staging/greybus/audio_manager.c
+++ b/drivers/staging/greybus/audio_manager.c
@@ -92,8 +92,8 @@ void gb_audio_manager_remove_all(void)
 
 	list_for_each_entry_safe(module, next, &modules_list, list) {
 		list_del(&module->list);
-		kobject_put(&module->kobj);
 		ida_simple_remove(&module_id, module->id);
+		kobject_put(&module->kobj);
 	}
 
 	is_empty = list_empty(&modules_list);

commit e1928327353d5ddd00b7d4d46f46961ea5c2dc34
Author: Colin Ian King <colin.king@canonical.com>
Date:   Thu Jul 4 14:30:31 2019 +0100

    staging: greybus: remove redundant assignment to variable is_empty
    
    The variable is_empty is being initialized with a value that is never
    read and it is being updated later with a new value. The
    initialization is redundant and can be removed.
    
    Addresses-Coverity: ("Unused value")
    Signed-off-by: Colin Ian King <colin.king@canonical.com>
    Reviewed-by: Vaibhav Agarwal <vaibhav.sr@gmail.com>
    Reviewed-by: Mark Greer <mgreer@animalcreek.com>
    Link: https://lore.kernel.org/r/20190704133031.28809-1-colin.king@canonical.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/greybus/audio_manager.c b/drivers/staging/greybus/audio_manager.c
index c2a4af4c1d06..9b19ea9d3fa1 100644
--- a/drivers/staging/greybus/audio_manager.c
+++ b/drivers/staging/greybus/audio_manager.c
@@ -86,7 +86,7 @@ EXPORT_SYMBOL_GPL(gb_audio_manager_remove);
 void gb_audio_manager_remove_all(void)
 {
 	struct gb_audio_manager_module *module, *next;
-	int is_empty = 1;
+	int is_empty;
 
 	down_write(&modules_rwsem);
 

commit b5af36e3e5aa074605a4d90a89dd8f714b30909b
Author: Kangjie Lu <kjlu@umn.edu>
Date:   Thu Mar 14 01:45:24 2019 -0500

    staging: greybus: audio_manager: fix a missing check of ida_simple_get
    
    ida_simple_get could fail. The fix inserts a check for its
    return value.
    
    Signed-off-by: Kangjie Lu <kjlu@umn.edu>
    Reviewed-by: Vaibhav Agarwal <vaibhav.sr@gmail.com>
    Acked-by: Viresh Kumar <viresh.kumar@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/greybus/audio_manager.c b/drivers/staging/greybus/audio_manager.c
index d44b070d8862..c2a4af4c1d06 100644
--- a/drivers/staging/greybus/audio_manager.c
+++ b/drivers/staging/greybus/audio_manager.c
@@ -45,6 +45,9 @@ int gb_audio_manager_add(struct gb_audio_manager_module_descriptor *desc)
 	int err;
 
 	id = ida_simple_get(&module_id, 0, 0, GFP_KERNEL);
+	if (id < 0)
+		return id;
+
 	err = gb_audio_manager_module_create(&module, manager_kset,
 					     id, desc);
 	if (err) {

commit 863dbc52e7f0e5acd7b4883f3933543a81c474c7
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Tue Nov 7 14:58:42 2017 +0100

    staging: greybus: Remove redundant license text
    
    Now that the SPDX tag is in all greybus files, that identifies the
    license in a specific and legally-defined manner.  So the extra GPL text
    wording can be removed as it is no longer needed at all.
    
    This is done on a quest to remove the 700+ different ways that files in
    the kernel describe the GPL license text.  And there's unneeded stuff
    like the address (sometimes incorrect) for the FSF which is never
    needed.
    
    No copyright headers or other non-license-description text was removed.
    
    Cc: Vaibhav Hiremath <hvaibhav.linux@gmail.com>
    Reviewed-by: Alex Elder <elder@linaro.org>
    Acked-by: Vaibhav Agarwal <vaibhav.sr@gmail.com>
    Acked-by: David Lin <dtwlin@gmail.com>
    Acked-by: Johan Hovold <johan@kernel.org>
    Acked-by: Viresh Kumar <viresh.kumar@linaro.org>
    Acked-by: Mark Greer <mgreer@animalcreek.com>
    Acked-by: Rui Miguel Silva <rmfrfs@gmail.com>
    Acked-by: "Bryan O'Donoghue" <pure.logic@nexus-software.ie>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/greybus/audio_manager.c b/drivers/staging/greybus/audio_manager.c
index f5ef376467bc..d44b070d8862 100644
--- a/drivers/staging/greybus/audio_manager.c
+++ b/drivers/staging/greybus/audio_manager.c
@@ -3,8 +3,6 @@
  * Greybus operations
  *
  * Copyright 2015-2016 Google Inc.
- *
- * Released under the GPLv2 only.
  */
 
 #include <linux/string.h>

commit eb50fd3a22c770f36be275295b782f3ea52e3215
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Tue Nov 7 14:58:41 2017 +0100

    staging: greybus: add SPDX identifiers to all greybus driver files
    
    It's good to have SPDX identifiers in all files to make it easier to
    audit the kernel tree for correct licenses.
    
    Update the drivers/staging/greybus files files with the correct SPDX
    license identifier based on the license text in the file itself.  The
    SPDX identifier is a legally binding shorthand, which can be used
    instead of the full boiler plate text.
    
    This work is based on a script and data from Thomas Gleixner, Philippe
    Ombredanne, and Kate Stewart.
    
    Cc: Vaibhav Hiremath <hvaibhav.linux@gmail.com>
    Cc: "Bryan O'Donoghue" <pure.logic@nexus-software.ie>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: Kate Stewart <kstewart@linuxfoundation.org>
    Cc: Philippe Ombredanne <pombredanne@nexb.com>
    Acked-by: Vaibhav Agarwal <vaibhav.sr@gmail.com>
    Acked-by: David Lin <dtwlin@gmail.com>
    Reviewed-by: Alex Elder <elder@linaro.org>
    Acked-by: Johan Hovold <johan@kernel.org>
    Acked-by: Viresh Kumar <viresh.kumar@linaro.org>
    Acked-by: Mark Greer <mgreer@animalcreek.com>
    Acked-by: Rui Miguel Silva <rmfrfs@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/greybus/audio_manager.c b/drivers/staging/greybus/audio_manager.c
index 045696ce85c7..f5ef376467bc 100644
--- a/drivers/staging/greybus/audio_manager.c
+++ b/drivers/staging/greybus/audio_manager.c
@@ -1,3 +1,4 @@
+// SPDX-License-Identifier: GPL-2.0
 /*
  * Greybus operations
  *

commit 2d10b8570416fd079c23f9d62fb7b88131938013
Author: Sebastian Andrzej Siewior <bigeasy@linutronix.de>
Date:   Thu Oct 5 14:56:54 2017 +0200

    greybus: audio: don't inclide rwlock.h directly.
    
    rwlock.h should not be included directly. Instead linux/splinlock.h
    should be included. One thing it does is to break the RT build.
    
    Cc: Vaibhav Agarwal <vaibhav.sr@gmail.com>
    Cc: Johan Hovold <johan@kernel.org>
    Cc: Alex Elder <elder@kernel.org>
    Cc: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Cc: greybus-dev@lists.linaro.org
    Cc: devel@driverdev.osuosl.org
    Signed-off-by: Sebastian Andrzej Siewior <bigeasy@linutronix.de>
    Reviewed-by: Mark Greer <mgreer@animalcreek.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/greybus/audio_manager.c b/drivers/staging/greybus/audio_manager.c
index aa6508b44fab..045696ce85c7 100644
--- a/drivers/staging/greybus/audio_manager.c
+++ b/drivers/staging/greybus/audio_manager.c
@@ -10,7 +10,7 @@
 #include <linux/sysfs.h>
 #include <linux/module.h>
 #include <linux/init.h>
-#include <linux/rwlock.h>
+#include <linux/spinlock.h>
 #include <linux/idr.h>
 
 #include "audio_manager.h"

commit ac00154a7c6a8f3b2a98c1cf3cef893af2b0abac
Author: Vaibhav Agarwal <vaibhav.agarwal@linaro.org>
Date:   Tue May 17 22:29:08 2016 +0530

    greybus: audio: gb_manager: Use valid argument while removing ida allocated id.
    
    module->id is used as an argument to ida_simple_remove(). Since module
    is already dereferenced, module->id might contain invalid data. So fix
    this.
    
    Fixes: da4cc2d0b066 ("audio:gb_manager: Use proper locking around kobject_xxx")
    Signed-off-by: Vaibhav Agarwal <vaibhav.agarwal@linaro.org>
    Reviewed-by: Mark Greer <mgreer@animalcreek.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@google.com>

diff --git a/drivers/staging/greybus/audio_manager.c b/drivers/staging/greybus/audio_manager.c
index 9def014cd47c..aa6508b44fab 100644
--- a/drivers/staging/greybus/audio_manager.c
+++ b/drivers/staging/greybus/audio_manager.c
@@ -76,7 +76,7 @@ int gb_audio_manager_remove(int id)
 	list_del(&module->list);
 	kobject_put(&module->kobj);
 	up_write(&modules_rwsem);
-	ida_simple_remove(&module_id, module->id);
+	ida_simple_remove(&module_id, id);
 	return 0;
 }
 EXPORT_SYMBOL_GPL(gb_audio_manager_remove);

commit c77f85bbc91acafeafd4143a23a225fe81c7e294
Author: Dinko Mironov <dmironov@mm-sol.com>
Date:   Thu May 5 19:58:22 2016 +0300

    greybus: audio: Fix incorrect counting of 'ida'
    
    Function gb_audio_manager_remove_all() to remove all audio modules,
    doesn't control correctly 'ida' counting.
    
    Signed-off-by: Dinko Mironov <dmironov@mm-sol.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@google.com>

diff --git a/drivers/staging/greybus/audio_manager.c b/drivers/staging/greybus/audio_manager.c
index 619bdee46ee5..9def014cd47c 100644
--- a/drivers/staging/greybus/audio_manager.c
+++ b/drivers/staging/greybus/audio_manager.c
@@ -91,6 +91,7 @@ void gb_audio_manager_remove_all(void)
 	list_for_each_entry_safe(module, next, &modules_list, list) {
 		list_del(&module->list);
 		kobject_put(&module->kobj);
+		ida_simple_remove(&module_id, module->id);
 	}
 
 	is_empty = list_empty(&modules_list);

commit 84e0e38744c5d814650e4acec34cea585d04cc96
Author: Vaibhav Agarwal <vaibhav.agarwal@linaro.org>
Date:   Wed May 4 16:29:19 2016 +0530

    greybus: audio:gb_manager: Use proper locking around kobject_xxx
    
    read/write_lock_irqsave mechanism was used to protect modules
    list & kobject_xxx() in gb_audio_manager. Since kobject_xxx calls
    can sleep spin_lock variants can't be used there. So use rw_sem
    for protecting modules_list.
    
    Signed-off-by: Vaibhav Agarwal <vaibhav.agarwal@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@google.com>

diff --git a/drivers/staging/greybus/audio_manager.c b/drivers/staging/greybus/audio_manager.c
index bc5be4907c81..619bdee46ee5 100644
--- a/drivers/staging/greybus/audio_manager.c
+++ b/drivers/staging/greybus/audio_manager.c
@@ -19,7 +19,7 @@
 static struct kset *manager_kset;
 
 static LIST_HEAD(modules_list);
-static DEFINE_RWLOCK(modules_lock);
+static DECLARE_RWSEM(modules_rwsem);
 static DEFINE_IDA(module_id);
 
 /* helpers */
@@ -42,7 +42,6 @@ static struct gb_audio_manager_module *gb_audio_manager_get_locked(int id)
 int gb_audio_manager_add(struct gb_audio_manager_module_descriptor *desc)
 {
 	struct gb_audio_manager_module *module;
-	unsigned long flags;
 	int id;
 	int err;
 
@@ -55,9 +54,9 @@ int gb_audio_manager_add(struct gb_audio_manager_module_descriptor *desc)
 	}
 
 	/* Add it to the list */
-	write_lock_irqsave(&modules_lock, flags);
+	down_write(&modules_rwsem);
 	list_add_tail(&module->list, &modules_list);
-	write_unlock_irqrestore(&modules_lock, flags);
+	up_write(&modules_rwsem);
 
 	return module->id;
 }
@@ -66,20 +65,18 @@ EXPORT_SYMBOL_GPL(gb_audio_manager_add);
 int gb_audio_manager_remove(int id)
 {
 	struct gb_audio_manager_module *module;
-	unsigned long flags;
 
-	write_lock_irqsave(&modules_lock, flags);
+	down_write(&modules_rwsem);
 
 	module = gb_audio_manager_get_locked(id);
 	if (!module) {
-		write_unlock_irqrestore(&modules_lock, flags);
+		up_write(&modules_rwsem);
 		return -EINVAL;
 	}
-
-	ida_simple_remove(&module_id, module->id);
 	list_del(&module->list);
 	kobject_put(&module->kobj);
-	write_unlock_irqrestore(&modules_lock, flags);
+	up_write(&modules_rwsem);
+	ida_simple_remove(&module_id, module->id);
 	return 0;
 }
 EXPORT_SYMBOL_GPL(gb_audio_manager_remove);
@@ -88,9 +85,8 @@ void gb_audio_manager_remove_all(void)
 {
 	struct gb_audio_manager_module *module, *next;
 	int is_empty = 1;
-	unsigned long flags;
 
-	write_lock_irqsave(&modules_lock, flags);
+	down_write(&modules_rwsem);
 
 	list_for_each_entry_safe(module, next, &modules_list, list) {
 		list_del(&module->list);
@@ -99,7 +95,7 @@ void gb_audio_manager_remove_all(void)
 
 	is_empty = list_empty(&modules_list);
 
-	write_unlock_irqrestore(&modules_lock, flags);
+	up_write(&modules_rwsem);
 
 	if (!is_empty)
 		pr_warn("Not all nodes were deleted\n");
@@ -109,12 +105,11 @@ EXPORT_SYMBOL_GPL(gb_audio_manager_remove_all);
 struct gb_audio_manager_module *gb_audio_manager_get_module(int id)
 {
 	struct gb_audio_manager_module *module;
-	unsigned long flags;
 
-	read_lock_irqsave(&modules_lock, flags);
+	down_read(&modules_rwsem);
 	module = gb_audio_manager_get_locked(id);
 	kobject_get(&module->kobj);
-	read_unlock_irqrestore(&modules_lock, flags);
+	up_read(&modules_rwsem);
 	return module;
 }
 EXPORT_SYMBOL_GPL(gb_audio_manager_get_module);
@@ -128,11 +123,10 @@ EXPORT_SYMBOL_GPL(gb_audio_manager_put_module);
 int gb_audio_manager_dump_module(int id)
 {
 	struct gb_audio_manager_module *module;
-	unsigned long flags;
 
-	read_lock_irqsave(&modules_lock, flags);
+	down_read(&modules_rwsem);
 	module = gb_audio_manager_get_locked(id);
-	read_unlock_irqrestore(&modules_lock, flags);
+	up_read(&modules_rwsem);
 
 	if (!module)
 		return -EINVAL;
@@ -146,14 +140,13 @@ void gb_audio_manager_dump_all(void)
 {
 	struct gb_audio_manager_module *module;
 	int count = 0;
-	unsigned long flags;
 
-	read_lock_irqsave(&modules_lock, flags);
+	down_read(&modules_rwsem);
 	list_for_each_entry(module, &modules_list, list) {
 		gb_audio_manager_module_dump(module);
 		count++;
 	}
-	read_unlock_irqrestore(&modules_lock, flags);
+	up_read(&modules_rwsem);
 
 	pr_info("Number of connected modules: %d\n", count);
 }

commit ec413566e819ad19be929ab38d2b5911cbf096c2
Author: Bartosz Golaszewski <bgolaszewski@baylibre.com>
Date:   Wed Feb 3 12:53:40 2016 +0100

    greybus: audio_manager: add missing header
    
    There's a definition missing in audio_manager causing the kernel build
    to fail:
    
      CC [M]  ./greybus/audio_manager.o
    ./greybus/audio_manager.c:22:8: warning: type defaults to 'int' in declaration of 'DEFINE_IDA' [-Wimplicit-int]
    error, forbidden warning: audio_manager.c:22
    ./kernel/scripts/Makefile.build:308: recipe for target './greybus/audio_manager.o' failed
    
    Including linux/idr.h fixes the issue.
    
    Signed-off-by: Bartosz Golaszewski <bgolaszewski@baylibre.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@google.com>

diff --git a/drivers/staging/greybus/audio_manager.c b/drivers/staging/greybus/audio_manager.c
index 05af441be162..bc5be4907c81 100644
--- a/drivers/staging/greybus/audio_manager.c
+++ b/drivers/staging/greybus/audio_manager.c
@@ -11,6 +11,7 @@
 #include <linux/module.h>
 #include <linux/init.h>
 #include <linux/rwlock.h>
+#include <linux/idr.h>
 
 #include "audio_manager.h"
 #include "audio_manager_private.h"

commit 3c5de59473f88aeb12420f142d42801d4d389759
Author: Greg Kroah-Hartman <gregkh@google.com>
Date:   Mon Jan 25 16:52:17 2016 -0800

    greybus: audio_manager: use an 'ida' for the module id
    
    Every time we hotplug an audio module, we get a new audio module id.  We
    should recycle them instead of just constantly incrementing the number
    so we don't see things like:
            [178016.832580] Created audio module #6124
    in the kernel logs.
    
    Signed-off-by: Greg Kroah-Hartman <gregkh@google.com>

diff --git a/drivers/staging/greybus/audio_manager.c b/drivers/staging/greybus/audio_manager.c
index 117676314daf..05af441be162 100644
--- a/drivers/staging/greybus/audio_manager.c
+++ b/drivers/staging/greybus/audio_manager.c
@@ -19,8 +19,7 @@ static struct kset *manager_kset;
 
 static LIST_HEAD(modules_list);
 static DEFINE_RWLOCK(modules_lock);
-
-static int current_module_id;
+static DEFINE_IDA(module_id);
 
 /* helpers */
 static struct gb_audio_manager_module *gb_audio_manager_get_locked(int id)
@@ -43,12 +42,16 @@ int gb_audio_manager_add(struct gb_audio_manager_module_descriptor *desc)
 {
 	struct gb_audio_manager_module *module;
 	unsigned long flags;
+	int id;
 	int err;
 
+	id = ida_simple_get(&module_id, 0, 0, GFP_KERNEL);
 	err = gb_audio_manager_module_create(&module, manager_kset,
-					     current_module_id++, desc);
-	if (err)
+					     id, desc);
+	if (err) {
+		ida_simple_remove(&module_id, id);
 		return err;
+	}
 
 	/* Add it to the list */
 	write_lock_irqsave(&modules_lock, flags);
@@ -72,6 +75,7 @@ int gb_audio_manager_remove(int id)
 		return -EINVAL;
 	}
 
+	ida_simple_remove(&module_id, module->id);
 	list_del(&module->list);
 	kobject_put(&module->kobj);
 	write_unlock_irqrestore(&modules_lock, flags);
@@ -175,6 +179,7 @@ static void __exit manager_exit(void)
 {
 	gb_audio_manager_remove_all();
 	kset_unregister(manager_kset);
+	ida_destroy(&module_id);
 }
 
 module_init(manager_init);

commit 8db00736d365b75d6af5dfd4a2673a1453fff4b7
Author: Svetlin Ankov <ankov_svetlin@projectara.com>
Date:   Wed Jan 13 14:07:48 2016 -0700

    greybus: audio: Add Audio Manager
    
    This is a simple module that keeps a list of connected GB audio
    modules.
    
    Whenever a device is attached, an appropriate uevent is sent to
    userspace:
    
        UDEV  [4941.803215] add      /kernel/gb_audio_manager/0 (gb_audio_manager)
        ACTION=add
        CPORT=99
        DEVICES=0x10
        DEVPATH=/kernel/gb_audio_manager/0
        NAME=naim
        PID=64
        SEQNUM=1828
        SLOT=2
        SUBSYSTEM=gb_audio_manager
        USEC_INITIALIZED=802416
        VID=128
    
    And whenever removed:
    
        UDEV  [4941.836588] remove   /kernel/gb_audio_manager/0 (gb_audio_manager)
        ACTION=remove
        DEVPATH=/kernel/gb_audio_manager/0
        SEQNUM=1833
        SUBSYSTEM=gb_audio_manager
        USEC_INITIALIZED=835681
    
    The API consists of functions for adding, removing and inspecting
    added device module descriptions (struct gb_audio_module):
    
        int                         gb_audio_manager_add(struct gb_audio_module_descriptor *desc);
        int                         gb_audio_manager_remove(int id);
        int                         gb_audio_manager_remove_all(void);
        struct  gb_audio_module*    gb_audio_manager_get_module(int id);
        void                        gb_audio_manager_put_module(struct gb_audio_module *module);
        int                         gb_audio_manager_dump_module(int id);
        void                        gb_audio_manager_dump_all(void);
    
    Devices can be inspected through sysfs in /sys/kernel/gb_audio_manager/{id}/*
    
    If GB_AUDIO_MANAGER_SYSFS is exported as 'true', managing devices can be done
    via the SYSFS as well. For instance:
    
        echo name=naim slot=2 vid=128 pid=64 cport=99 devices=0x10 > /sys/kernel/gb_audio_manager/add
        echo all > /sys/kernel/gb_audio_manager/dump
        echo 2 > /sys/kernel/gb_audio_manager/dump
        echo 2 > /sys/kernel/gb_audio_manager/remove
    
    Signed-off-by: Svetlin Ankov <ankov_svetlin@projectara.com>
    Signed-off-by: Mark Greer <mgreer@animalcreek.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@google.com>

diff --git a/drivers/staging/greybus/audio_manager.c b/drivers/staging/greybus/audio_manager.c
new file mode 100644
index 000000000000..117676314daf
--- /dev/null
+++ b/drivers/staging/greybus/audio_manager.c
@@ -0,0 +1,184 @@
+/*
+ * Greybus operations
+ *
+ * Copyright 2015-2016 Google Inc.
+ *
+ * Released under the GPLv2 only.
+ */
+
+#include <linux/string.h>
+#include <linux/sysfs.h>
+#include <linux/module.h>
+#include <linux/init.h>
+#include <linux/rwlock.h>
+
+#include "audio_manager.h"
+#include "audio_manager_private.h"
+
+static struct kset *manager_kset;
+
+static LIST_HEAD(modules_list);
+static DEFINE_RWLOCK(modules_lock);
+
+static int current_module_id;
+
+/* helpers */
+static struct gb_audio_manager_module *gb_audio_manager_get_locked(int id)
+{
+	struct gb_audio_manager_module *module;
+
+	if (id < 0)
+		return NULL;
+
+	list_for_each_entry(module, &modules_list, list) {
+		if (module->id == id)
+			return module;
+	}
+
+	return NULL;
+}
+
+/* public API */
+int gb_audio_manager_add(struct gb_audio_manager_module_descriptor *desc)
+{
+	struct gb_audio_manager_module *module;
+	unsigned long flags;
+	int err;
+
+	err = gb_audio_manager_module_create(&module, manager_kset,
+					     current_module_id++, desc);
+	if (err)
+		return err;
+
+	/* Add it to the list */
+	write_lock_irqsave(&modules_lock, flags);
+	list_add_tail(&module->list, &modules_list);
+	write_unlock_irqrestore(&modules_lock, flags);
+
+	return module->id;
+}
+EXPORT_SYMBOL_GPL(gb_audio_manager_add);
+
+int gb_audio_manager_remove(int id)
+{
+	struct gb_audio_manager_module *module;
+	unsigned long flags;
+
+	write_lock_irqsave(&modules_lock, flags);
+
+	module = gb_audio_manager_get_locked(id);
+	if (!module) {
+		write_unlock_irqrestore(&modules_lock, flags);
+		return -EINVAL;
+	}
+
+	list_del(&module->list);
+	kobject_put(&module->kobj);
+	write_unlock_irqrestore(&modules_lock, flags);
+	return 0;
+}
+EXPORT_SYMBOL_GPL(gb_audio_manager_remove);
+
+void gb_audio_manager_remove_all(void)
+{
+	struct gb_audio_manager_module *module, *next;
+	int is_empty = 1;
+	unsigned long flags;
+
+	write_lock_irqsave(&modules_lock, flags);
+
+	list_for_each_entry_safe(module, next, &modules_list, list) {
+		list_del(&module->list);
+		kobject_put(&module->kobj);
+	}
+
+	is_empty = list_empty(&modules_list);
+
+	write_unlock_irqrestore(&modules_lock, flags);
+
+	if (!is_empty)
+		pr_warn("Not all nodes were deleted\n");
+}
+EXPORT_SYMBOL_GPL(gb_audio_manager_remove_all);
+
+struct gb_audio_manager_module *gb_audio_manager_get_module(int id)
+{
+	struct gb_audio_manager_module *module;
+	unsigned long flags;
+
+	read_lock_irqsave(&modules_lock, flags);
+	module = gb_audio_manager_get_locked(id);
+	kobject_get(&module->kobj);
+	read_unlock_irqrestore(&modules_lock, flags);
+	return module;
+}
+EXPORT_SYMBOL_GPL(gb_audio_manager_get_module);
+
+void gb_audio_manager_put_module(struct gb_audio_manager_module *module)
+{
+	kobject_put(&module->kobj);
+}
+EXPORT_SYMBOL_GPL(gb_audio_manager_put_module);
+
+int gb_audio_manager_dump_module(int id)
+{
+	struct gb_audio_manager_module *module;
+	unsigned long flags;
+
+	read_lock_irqsave(&modules_lock, flags);
+	module = gb_audio_manager_get_locked(id);
+	read_unlock_irqrestore(&modules_lock, flags);
+
+	if (!module)
+		return -EINVAL;
+
+	gb_audio_manager_module_dump(module);
+	return 0;
+}
+EXPORT_SYMBOL_GPL(gb_audio_manager_dump_module);
+
+void gb_audio_manager_dump_all(void)
+{
+	struct gb_audio_manager_module *module;
+	int count = 0;
+	unsigned long flags;
+
+	read_lock_irqsave(&modules_lock, flags);
+	list_for_each_entry(module, &modules_list, list) {
+		gb_audio_manager_module_dump(module);
+		count++;
+	}
+	read_unlock_irqrestore(&modules_lock, flags);
+
+	pr_info("Number of connected modules: %d\n", count);
+}
+EXPORT_SYMBOL_GPL(gb_audio_manager_dump_all);
+
+/*
+ * module init/deinit
+ */
+static int __init manager_init(void)
+{
+	manager_kset = kset_create_and_add(GB_AUDIO_MANAGER_NAME, NULL,
+					   kernel_kobj);
+	if (!manager_kset)
+		return -ENOMEM;
+
+#ifdef GB_AUDIO_MANAGER_SYSFS
+	gb_audio_manager_sysfs_init(&manager_kset->kobj);
+#endif
+
+	return 0;
+}
+
+static void __exit manager_exit(void)
+{
+	gb_audio_manager_remove_all();
+	kset_unregister(manager_kset);
+}
+
+module_init(manager_init);
+module_exit(manager_exit);
+
+MODULE_LICENSE("GPL");
+MODULE_AUTHOR("Svetlin Ankov <ankov_svetlin@projectara.com>");
