commit ec0ad868173da8a75121f9dc116a5d5478ff614d
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Sun Aug 25 07:54:27 2019 +0200

    staging: greybus: move core include files to include/linux/greybus/
    
    With the goal of moving the core of the greybus code out of staging, the
    include files need to be moved to include/linux/greybus.h and
    include/linux/greybus/
    
    Cc: Vaibhav Hiremath <hvaibhav.linux@gmail.com>
    Cc: Johan Hovold <johan@kernel.org>
    Cc: Vaibhav Agarwal <vaibhav.sr@gmail.com>
    Cc: Rui Miguel Silva <rmfrfs@gmail.com>
    Cc: David Lin <dtwlin@gmail.com>
    Cc: "Bryan O'Donoghue" <pure.logic@nexus-software.ie>
    Cc: greybus-dev@lists.linaro.org
    Cc: devel@driverdev.osuosl.org
    Acked-by: Mark Greer <mgreer@animalcreek.com>
    Acked-by: Viresh Kumar <viresh.kumar@linaro.org>
    Acked-by: Alex Elder <elder@kernel.org>
    Link: https://lore.kernel.org/r/20190825055429.18547-8-gregkh@linuxfoundation.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/greybus/pwm.c b/drivers/staging/greybus/pwm.c
index 4a6d394b6c44..891a6a672378 100644
--- a/drivers/staging/greybus/pwm.c
+++ b/drivers/staging/greybus/pwm.c
@@ -10,8 +10,8 @@
 #include <linux/module.h>
 #include <linux/slab.h>
 #include <linux/pwm.h>
+#include <linux/greybus.h>
 
-#include "greybus.h"
 #include "gbphy.h"
 
 struct gb_pwm_chip {

commit 863dbc52e7f0e5acd7b4883f3933543a81c474c7
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Tue Nov 7 14:58:42 2017 +0100

    staging: greybus: Remove redundant license text
    
    Now that the SPDX tag is in all greybus files, that identifies the
    license in a specific and legally-defined manner.  So the extra GPL text
    wording can be removed as it is no longer needed at all.
    
    This is done on a quest to remove the 700+ different ways that files in
    the kernel describe the GPL license text.  And there's unneeded stuff
    like the address (sometimes incorrect) for the FSF which is never
    needed.
    
    No copyright headers or other non-license-description text was removed.
    
    Cc: Vaibhav Hiremath <hvaibhav.linux@gmail.com>
    Reviewed-by: Alex Elder <elder@linaro.org>
    Acked-by: Vaibhav Agarwal <vaibhav.sr@gmail.com>
    Acked-by: David Lin <dtwlin@gmail.com>
    Acked-by: Johan Hovold <johan@kernel.org>
    Acked-by: Viresh Kumar <viresh.kumar@linaro.org>
    Acked-by: Mark Greer <mgreer@animalcreek.com>
    Acked-by: Rui Miguel Silva <rmfrfs@gmail.com>
    Acked-by: "Bryan O'Donoghue" <pure.logic@nexus-software.ie>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/greybus/pwm.c b/drivers/staging/greybus/pwm.c
index f71ffd2248e0..4a6d394b6c44 100644
--- a/drivers/staging/greybus/pwm.c
+++ b/drivers/staging/greybus/pwm.c
@@ -4,8 +4,6 @@
  *
  * Copyright 2014 Google Inc.
  * Copyright 2014 Linaro Ltd.
- *
- * Released under the GPLv2 only.
  */
 
 #include <linux/kernel.h>

commit eb50fd3a22c770f36be275295b782f3ea52e3215
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Tue Nov 7 14:58:41 2017 +0100

    staging: greybus: add SPDX identifiers to all greybus driver files
    
    It's good to have SPDX identifiers in all files to make it easier to
    audit the kernel tree for correct licenses.
    
    Update the drivers/staging/greybus files files with the correct SPDX
    license identifier based on the license text in the file itself.  The
    SPDX identifier is a legally binding shorthand, which can be used
    instead of the full boiler plate text.
    
    This work is based on a script and data from Thomas Gleixner, Philippe
    Ombredanne, and Kate Stewart.
    
    Cc: Vaibhav Hiremath <hvaibhav.linux@gmail.com>
    Cc: "Bryan O'Donoghue" <pure.logic@nexus-software.ie>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: Kate Stewart <kstewart@linuxfoundation.org>
    Cc: Philippe Ombredanne <pombredanne@nexb.com>
    Acked-by: Vaibhav Agarwal <vaibhav.sr@gmail.com>
    Acked-by: David Lin <dtwlin@gmail.com>
    Reviewed-by: Alex Elder <elder@linaro.org>
    Acked-by: Johan Hovold <johan@kernel.org>
    Acked-by: Viresh Kumar <viresh.kumar@linaro.org>
    Acked-by: Mark Greer <mgreer@animalcreek.com>
    Acked-by: Rui Miguel Silva <rmfrfs@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/greybus/pwm.c b/drivers/staging/greybus/pwm.c
index f0404bc37123..f71ffd2248e0 100644
--- a/drivers/staging/greybus/pwm.c
+++ b/drivers/staging/greybus/pwm.c
@@ -1,3 +1,4 @@
+// SPDX-License-Identifier: GPL-2.0
 /*
  * PWM Greybus driver.
  *

commit 8c0216f377406c7613b67bd18755889026284192
Author: Thierry Reding <thierry.reding@gmail.com>
Date:   Wed Jan 4 09:40:54 2017 +0100

    pwm: Remove .can_sleep from struct pwm_chip
    
    All PWM devices have been marked as "might sleep" since v4.5, there is
    no longer a need to differentiate on a per-chip basis.
    
    Signed-off-by: Thierry Reding <thierry.reding@gmail.com>

diff --git a/drivers/staging/greybus/pwm.c b/drivers/staging/greybus/pwm.c
index c4bf3298ba07..f0404bc37123 100644
--- a/drivers/staging/greybus/pwm.c
+++ b/drivers/staging/greybus/pwm.c
@@ -284,7 +284,6 @@ static int gb_pwm_probe(struct gbphy_device *gbphy_dev,
 	pwm->ops = &gb_pwm_ops;
 	pwm->base = -1;			/* Allocate base dynamically */
 	pwm->npwm = pwmc->pwm_max + 1;
-	pwm->can_sleep = true;		/* FIXME */
 
 	ret = pwmchip_add(pwm);
 	if (ret) {

commit afa807b8ba23952b471abb70716076bb3c98657c
Author: Axel Haslam <haslam_axel@projectara.com>
Date:   Thu Jul 14 15:13:00 2016 -0500

    greybus: pwm: Add runtime_pm support
    
    Add runtime pm support for the pmw driver.
    
    Testing Done: Set the parameters of pwm0, and enable.
    Disable pwm0 and let the module enter standby.
    Enable pwm0, and observe that with an oscilloscope
    that the wave form is the same as before.
    
    Signed-off-by: Axel Haslam <haslam_axel@projectara.com>
    Signed-off-by: David Lin <dtwlin@google.com>
    Reviewed-by: Johan Hovold <johan@hovoldconsulting.com>
    Signed-off-by: Alex Elder <elder@linaro.org>

diff --git a/drivers/staging/greybus/pwm.c b/drivers/staging/greybus/pwm.c
index 1438b2e12cee..c4bf3298ba07 100644
--- a/drivers/staging/greybus/pwm.c
+++ b/drivers/staging/greybus/pwm.c
@@ -43,32 +43,58 @@ static int gb_pwm_activate_operation(struct gb_pwm_chip *pwmc,
 				     u8 which)
 {
 	struct gb_pwm_activate_request request;
+	struct gbphy_device *gbphy_dev;
+	int ret;
 
 	if (which > pwmc->pwm_max)
 		return -EINVAL;
 
 	request.which = which;
-	return gb_operation_sync(pwmc->connection, GB_PWM_TYPE_ACTIVATE,
-				 &request, sizeof(request), NULL, 0);
+
+	gbphy_dev = to_gbphy_dev(pwmc->chip.dev);
+	ret = gbphy_runtime_get_sync(gbphy_dev);
+	if (ret)
+		return ret;
+
+	ret = gb_operation_sync(pwmc->connection, GB_PWM_TYPE_ACTIVATE,
+				&request, sizeof(request), NULL, 0);
+
+	gbphy_runtime_put_autosuspend(gbphy_dev);
+
+	return ret;
 }
 
 static int gb_pwm_deactivate_operation(struct gb_pwm_chip *pwmc,
 				       u8 which)
 {
 	struct gb_pwm_deactivate_request request;
+	struct gbphy_device *gbphy_dev;
+	int ret;
 
 	if (which > pwmc->pwm_max)
 		return -EINVAL;
 
 	request.which = which;
-	return gb_operation_sync(pwmc->connection, GB_PWM_TYPE_DEACTIVATE,
-				 &request, sizeof(request), NULL, 0);
+
+	gbphy_dev = to_gbphy_dev(pwmc->chip.dev);
+	ret = gbphy_runtime_get_sync(gbphy_dev);
+	if (ret)
+		return ret;
+
+	ret = gb_operation_sync(pwmc->connection, GB_PWM_TYPE_DEACTIVATE,
+				&request, sizeof(request), NULL, 0);
+
+	gbphy_runtime_put_autosuspend(gbphy_dev);
+
+	return ret;
 }
 
 static int gb_pwm_config_operation(struct gb_pwm_chip *pwmc,
 				   u8 which, u32 duty, u32 period)
 {
 	struct gb_pwm_config_request request;
+	struct gbphy_device *gbphy_dev;
+	int ret;
 
 	if (which > pwmc->pwm_max)
 		return -EINVAL;
@@ -76,48 +102,90 @@ static int gb_pwm_config_operation(struct gb_pwm_chip *pwmc,
 	request.which = which;
 	request.duty = cpu_to_le32(duty);
 	request.period = cpu_to_le32(period);
-	return gb_operation_sync(pwmc->connection, GB_PWM_TYPE_CONFIG,
-				 &request, sizeof(request), NULL, 0);
+
+	gbphy_dev = to_gbphy_dev(pwmc->chip.dev);
+	ret = gbphy_runtime_get_sync(gbphy_dev);
+	if (ret)
+		return ret;
+
+	ret = gb_operation_sync(pwmc->connection, GB_PWM_TYPE_CONFIG,
+				&request, sizeof(request), NULL, 0);
+
+	gbphy_runtime_put_autosuspend(gbphy_dev);
+
+	return ret;
 }
 
 static int gb_pwm_set_polarity_operation(struct gb_pwm_chip *pwmc,
 					 u8 which, u8 polarity)
 {
 	struct gb_pwm_polarity_request request;
+	struct gbphy_device *gbphy_dev;
+	int ret;
 
 	if (which > pwmc->pwm_max)
 		return -EINVAL;
 
 	request.which = which;
 	request.polarity = polarity;
-	return gb_operation_sync(pwmc->connection, GB_PWM_TYPE_POLARITY,
-				 &request, sizeof(request), NULL, 0);
+
+	gbphy_dev = to_gbphy_dev(pwmc->chip.dev);
+	ret = gbphy_runtime_get_sync(gbphy_dev);
+	if (ret)
+		return ret;
+
+	ret = gb_operation_sync(pwmc->connection, GB_PWM_TYPE_POLARITY,
+				&request, sizeof(request), NULL, 0);
+
+	gbphy_runtime_put_autosuspend(gbphy_dev);
+
+	return ret;
 }
 
 static int gb_pwm_enable_operation(struct gb_pwm_chip *pwmc,
 				   u8 which)
 {
 	struct gb_pwm_enable_request request;
+	struct gbphy_device *gbphy_dev;
+	int ret;
 
 	if (which > pwmc->pwm_max)
 		return -EINVAL;
 
 	request.which = which;
-	return gb_operation_sync(pwmc->connection, GB_PWM_TYPE_ENABLE,
-				 &request, sizeof(request), NULL, 0);
+
+	gbphy_dev = to_gbphy_dev(pwmc->chip.dev);
+	ret = gbphy_runtime_get_sync(gbphy_dev);
+	if (ret)
+		return ret;
+
+	ret = gb_operation_sync(pwmc->connection, GB_PWM_TYPE_ENABLE,
+				&request, sizeof(request), NULL, 0);
+	if (ret)
+		gbphy_runtime_put_autosuspend(gbphy_dev);
+
+	return ret;
 }
 
 static int gb_pwm_disable_operation(struct gb_pwm_chip *pwmc,
 				    u8 which)
 {
 	struct gb_pwm_disable_request request;
+	struct gbphy_device *gbphy_dev;
+	int ret;
 
 	if (which > pwmc->pwm_max)
 		return -EINVAL;
 
 	request.which = which;
-	return gb_operation_sync(pwmc->connection, GB_PWM_TYPE_DISABLE,
-				 &request, sizeof(request), NULL, 0);
+
+	ret = gb_operation_sync(pwmc->connection, GB_PWM_TYPE_DISABLE,
+				&request, sizeof(request), NULL, 0);
+
+	gbphy_dev = to_gbphy_dev(pwmc->chip.dev);
+	gbphy_runtime_put_autosuspend(gbphy_dev);
+
+	return ret;
 }
 
 static int gb_pwm_request(struct pwm_chip *chip, struct pwm_device *pwm)
@@ -225,6 +293,7 @@ static int gb_pwm_probe(struct gbphy_device *gbphy_dev,
 		goto exit_connection_disable;
 	}
 
+	gbphy_runtime_put_autosuspend(gbphy_dev);
 	return 0;
 
 exit_connection_disable:
@@ -240,6 +309,11 @@ static void gb_pwm_remove(struct gbphy_device *gbphy_dev)
 {
 	struct gb_pwm_chip *pwmc = gb_gbphy_get_data(gbphy_dev);
 	struct gb_connection *connection = pwmc->connection;
+	int ret;
+
+	ret = gbphy_runtime_get_sync(gbphy_dev);
+	if (ret)
+		gbphy_runtime_get_noresume(gbphy_dev);
 
 	pwmchip_remove(&pwmc->chip);
 	gb_connection_disable(connection);

commit 60fb3405c73ea0bbab942c699496123f9e987c04
Author: Viresh Kumar <viresh.kumar@linaro.org>
Date:   Fri Jun 10 14:59:07 2016 +0530

    greybus: Remove extra blank lines
    
    This patch removes few blank lines across the repository at places where
    two blank lines were present together or when a blank line is present at
    the start or end of a routine.
    
    Note that this doesn't remove most of them from greybus_protocols.h as
    they were added on purpose.
    
    Signed-off-by: Viresh Kumar <viresh.kumar@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@google.com>

diff --git a/drivers/staging/greybus/pwm.c b/drivers/staging/greybus/pwm.c
index 713123231251..1438b2e12cee 100644
--- a/drivers/staging/greybus/pwm.c
+++ b/drivers/staging/greybus/pwm.c
@@ -80,7 +80,6 @@ static int gb_pwm_config_operation(struct gb_pwm_chip *pwmc,
 				 &request, sizeof(request), NULL, 0);
 }
 
-
 static int gb_pwm_set_polarity_operation(struct gb_pwm_chip *pwmc,
 					 u8 which, u8 polarity)
 {

commit 44d6449350b866cbea613aabe5aba4aa640791cd
Author: Greg Kroah-Hartman <gregkh@google.com>
Date:   Tue Jun 7 21:33:54 2016 -0700

    greybus: kernel_ver.h: provide pwm_is_enabled()
    
    In the 4.7-rc1 kernel release, PWMF_ENABLED is removed and
    pwm_is_enabled() is the correct way to test if a pwm device is enabled,
    so provide a version of that function that will work on all older
    kernels and change the pwm.c driver to use it so that it will work on
    newer kernels as well.
    
    Tested:
            Tree now builds successfully against 3.14.y, 4.4.y, 4.5.y,
            4.6.y, and 4.7-rc2 kernels
    
    Signed-off-by: Greg Kroah-Hartman <gregkh@google.com>
    Reviewed-by: Viresh Kumar <viresh.kumar@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@google.com>

diff --git a/drivers/staging/greybus/pwm.c b/drivers/staging/greybus/pwm.c
index b941cb5b5063..713123231251 100644
--- a/drivers/staging/greybus/pwm.c
+++ b/drivers/staging/greybus/pwm.c
@@ -132,7 +132,7 @@ static void gb_pwm_free(struct pwm_chip *chip, struct pwm_device *pwm)
 {
 	struct gb_pwm_chip *pwmc = pwm_chip_to_gb_pwm_chip(chip);
 
-	if (test_bit(PWMF_ENABLED, &pwm->flags))
+	if (pwm_is_enabled(pwm))
 		dev_warn(chip->dev, "freeing PWM device without disabling\n");
 
 	gb_pwm_deactivate_operation(pwmc, pwm->hwpwm);

commit 64060fe95458f22bac7327b2ee8dc5ce9e488d44
Author: Viresh Kumar <viresh.kumar@linaro.org>
Date:   Mon May 30 11:31:53 2016 +0530

    greybus: gbphy: Remove protocol specific version handling
    
    We should be using the generic version handling at bundle level, instead
    of at protocol level for bridged PHY devices as well.
    
    The bundle version handling is already in place, though it is *not* used
    today as we haven't bumped the version of control protocol yet.
    
    Remove protocol specific handling for bridged PHY devices.
    
    Tested on EVT 1.5 with gpbridge-test module. No nuttx changes are
    required with this.
    
    Signed-off-by: Viresh Kumar <viresh.kumar@linaro.org>
    Reviewed-by: Johan Hovold <johan@hovoldconsulting.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@google.com>

diff --git a/drivers/staging/greybus/pwm.c b/drivers/staging/greybus/pwm.c
index 77b05e895550..b941cb5b5063 100644
--- a/drivers/staging/greybus/pwm.c
+++ b/drivers/staging/greybus/pwm.c
@@ -206,10 +206,6 @@ static int gb_pwm_probe(struct gbphy_device *gbphy_dev,
 	if (ret)
 		goto exit_connection_destroy;
 
-	ret = gb_gbphy_get_version(connection);
-	if (ret)
-		goto exit_connection_disable;
-
 	/* Query number of pwms present */
 	ret = gb_pwm_count_operation(pwmc);
 	if (ret)

commit e54b106dd1be50377fe8365392466e080b659ab6
Author: Sandeep Patil <patil_sandeep@projectara.com>
Date:   Thu May 19 08:52:39 2016 -0700

    greybus: gpbridge: rename 'gpbridge' to 'gbphy' everywhere
    
    The 'gpbridge' name didn't relaly reflect what the bus is; which
    is a bus for bridged-phy devices. So, rename all instances
    of 'gpbridge' to more appropriate 'gbphy'
    
    Testing Done:
    Build and boot tested. 'lsgb' will stop displaying 'GPBridge' devices
    until I change the library to reflect this change.
    
    Signed-off-by: Sandeep Patil <patil_sandeep@projectara.com>
    Suggested-by: Greg Kroah-Hartman <gregkh@google.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@google.com>

diff --git a/drivers/staging/greybus/pwm.c b/drivers/staging/greybus/pwm.c
index 1c4ffb9a0ae1..77b05e895550 100644
--- a/drivers/staging/greybus/pwm.c
+++ b/drivers/staging/greybus/pwm.c
@@ -13,7 +13,7 @@
 #include <linux/pwm.h>
 
 #include "greybus.h"
-#include "gpbridge.h"
+#include "gbphy.h"
 
 struct gb_pwm_chip {
 	struct gb_connection	*connection;
@@ -178,8 +178,8 @@ static const struct pwm_ops gb_pwm_ops = {
 	.owner = THIS_MODULE,
 };
 
-static int gb_pwm_probe(struct gpbridge_device *gpbdev,
-			const struct gpbridge_device_id *id)
+static int gb_pwm_probe(struct gbphy_device *gbphy_dev,
+			const struct gbphy_device_id *id)
 {
 	struct gb_connection *connection;
 	struct gb_pwm_chip *pwmc;
@@ -190,8 +190,8 @@ static int gb_pwm_probe(struct gpbridge_device *gpbdev,
 	if (!pwmc)
 		return -ENOMEM;
 
-	connection = gb_connection_create(gpbdev->bundle,
-					  le16_to_cpu(gpbdev->cport_desc->id),
+	connection = gb_connection_create(gbphy_dev->bundle,
+					  le16_to_cpu(gbphy_dev->cport_desc->id),
 					  NULL);
 	if (IS_ERR(connection)) {
 		ret = PTR_ERR(connection);
@@ -200,13 +200,13 @@ static int gb_pwm_probe(struct gpbridge_device *gpbdev,
 
 	pwmc->connection = connection;
 	gb_connection_set_data(connection, pwmc);
-	gb_gpbridge_set_data(gpbdev, pwmc);
+	gb_gbphy_set_data(gbphy_dev, pwmc);
 
 	ret = gb_connection_enable(connection);
 	if (ret)
 		goto exit_connection_destroy;
 
-	ret = gb_gpbridge_get_version(connection);
+	ret = gb_gbphy_get_version(connection);
 	if (ret)
 		goto exit_connection_disable;
 
@@ -217,7 +217,7 @@ static int gb_pwm_probe(struct gpbridge_device *gpbdev,
 
 	pwm = &pwmc->chip;
 
-	pwm->dev = &gpbdev->dev;
+	pwm->dev = &gbphy_dev->dev;
 	pwm->ops = &gb_pwm_ops;
 	pwm->base = -1;			/* Allocate base dynamically */
 	pwm->npwm = pwmc->pwm_max + 1;
@@ -225,7 +225,7 @@ static int gb_pwm_probe(struct gpbridge_device *gpbdev,
 
 	ret = pwmchip_add(pwm);
 	if (ret) {
-		dev_err(&gpbdev->dev,
+		dev_err(&gbphy_dev->dev,
 			"failed to register PWM: %d\n", ret);
 		goto exit_connection_disable;
 	}
@@ -241,9 +241,9 @@ static int gb_pwm_probe(struct gpbridge_device *gpbdev,
 	return ret;
 }
 
-static void gb_pwm_remove(struct gpbridge_device *gpbdev)
+static void gb_pwm_remove(struct gbphy_device *gbphy_dev)
 {
-	struct gb_pwm_chip *pwmc = gb_gpbridge_get_data(gpbdev);
+	struct gb_pwm_chip *pwmc = gb_gbphy_get_data(gbphy_dev);
 	struct gb_connection *connection = pwmc->connection;
 
 	pwmchip_remove(&pwmc->chip);
@@ -252,18 +252,18 @@ static void gb_pwm_remove(struct gpbridge_device *gpbdev)
 	kfree(pwmc);
 }
 
-static const struct gpbridge_device_id gb_pwm_id_table[] = {
-	{ GPBRIDGE_PROTOCOL(GREYBUS_PROTOCOL_PWM) },
+static const struct gbphy_device_id gb_pwm_id_table[] = {
+	{ GBPHY_PROTOCOL(GREYBUS_PROTOCOL_PWM) },
 	{ },
 };
-MODULE_DEVICE_TABLE(gpbridge, gb_pwm_id_table);
+MODULE_DEVICE_TABLE(gbphy, gb_pwm_id_table);
 
-static struct gpbridge_driver pwm_driver = {
+static struct gbphy_driver pwm_driver = {
 	.name		= "pwm",
 	.probe		= gb_pwm_probe,
 	.remove		= gb_pwm_remove,
 	.id_table	= gb_pwm_id_table,
 };
 
-module_gpbridge_driver(pwm_driver);
+module_gbphy_driver(pwm_driver);
 MODULE_LICENSE("GPL v2");

commit dca8060db87bd851d77a64ef70b822ce3a82b3b5
Author: Viresh Kumar <viresh.kumar@linaro.org>
Date:   Mon May 9 18:15:08 2016 +0530

    greybus: pwm: Create separate module
    
    Create separate module for pwm gpbridge driver.
    
    Tested on EVT 1.5 by inserting GP test module, all the devices were
    enumerated correctly.
    
    Signed-off-by: Viresh Kumar <viresh.kumar@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@google.com>

diff --git a/drivers/staging/greybus/pwm.c b/drivers/staging/greybus/pwm.c
index b11e77df4a6c..1c4ffb9a0ae1 100644
--- a/drivers/staging/greybus/pwm.c
+++ b/drivers/staging/greybus/pwm.c
@@ -256,6 +256,7 @@ static const struct gpbridge_device_id gb_pwm_id_table[] = {
 	{ GPBRIDGE_PROTOCOL(GREYBUS_PROTOCOL_PWM) },
 	{ },
 };
+MODULE_DEVICE_TABLE(gpbridge, gb_pwm_id_table);
 
 static struct gpbridge_driver pwm_driver = {
 	.name		= "pwm",
@@ -263,4 +264,6 @@ static struct gpbridge_driver pwm_driver = {
 	.remove		= gb_pwm_remove,
 	.id_table	= gb_pwm_id_table,
 };
-gb_gpbridge_builtin_driver(pwm_driver);
+
+module_gpbridge_driver(pwm_driver);
+MODULE_LICENSE("GPL v2");

commit 320549086d1e985c09fd6635075ab45a3421038e
Author: Greg Kroah-Hartman <gregkh@google.com>
Date:   Thu May 5 14:32:31 2016 +0530

    greybus: PWM: convert to a gpbridge driver
    
    This converts the PWM driver to be a gpbridge driver, moving it away
    from the "legacy" interface.
    
    Testing Done: Tested on gbsim.
    
    Signed-off-by: Greg Kroah-Hartman <gregkh@google.com>
    Signed-off-by: Vaibhav Hiremath <vaibhav.hiremath@linaro.org>
    [vaibhav.hiremath@linaro.org: 1.Changed code to retain init/exit fns of
    drivers. 2.Exit path fix. 3. Fixed review comments]
    Reviewed-by: Viresh Kumar <viresh.kumar@linaro.org>
    Tested-by: Viresh Kumar <viresh.kumar@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@google.com>

diff --git a/drivers/staging/greybus/pwm.c b/drivers/staging/greybus/pwm.c
index 176301a49865..b11e77df4a6c 100644
--- a/drivers/staging/greybus/pwm.c
+++ b/drivers/staging/greybus/pwm.c
@@ -178,8 +178,10 @@ static const struct pwm_ops gb_pwm_ops = {
 	.owner = THIS_MODULE,
 };
 
-static int gb_pwm_connection_init(struct gb_connection *connection)
+static int gb_pwm_probe(struct gpbridge_device *gpbdev,
+			const struct gpbridge_device_id *id)
 {
+	struct gb_connection *connection;
 	struct gb_pwm_chip *pwmc;
 	struct pwm_chip *pwm;
 	int ret;
@@ -187,17 +189,35 @@ static int gb_pwm_connection_init(struct gb_connection *connection)
 	pwmc = kzalloc(sizeof(*pwmc), GFP_KERNEL);
 	if (!pwmc)
 		return -ENOMEM;
+
+	connection = gb_connection_create(gpbdev->bundle,
+					  le16_to_cpu(gpbdev->cport_desc->id),
+					  NULL);
+	if (IS_ERR(connection)) {
+		ret = PTR_ERR(connection);
+		goto exit_pwmc_free;
+	}
+
 	pwmc->connection = connection;
 	gb_connection_set_data(connection, pwmc);
+	gb_gpbridge_set_data(gpbdev, pwmc);
+
+	ret = gb_connection_enable(connection);
+	if (ret)
+		goto exit_connection_destroy;
+
+	ret = gb_gpbridge_get_version(connection);
+	if (ret)
+		goto exit_connection_disable;
 
 	/* Query number of pwms present */
 	ret = gb_pwm_count_operation(pwmc);
 	if (ret)
-		goto out_err;
+		goto exit_connection_disable;
 
 	pwm = &pwmc->chip;
 
-	pwm->dev = &connection->bundle->dev;
+	pwm->dev = &gpbdev->dev;
 	pwm->ops = &gb_pwm_ops;
 	pwm->base = -1;			/* Allocate base dynamically */
 	pwm->npwm = pwmc->pwm_max + 1;
@@ -205,36 +225,42 @@ static int gb_pwm_connection_init(struct gb_connection *connection)
 
 	ret = pwmchip_add(pwm);
 	if (ret) {
-		dev_err(&connection->bundle->dev,
+		dev_err(&gpbdev->dev,
 			"failed to register PWM: %d\n", ret);
-		goto out_err;
+		goto exit_connection_disable;
 	}
 
 	return 0;
-out_err:
+
+exit_connection_disable:
+	gb_connection_disable(connection);
+exit_connection_destroy:
+	gb_connection_destroy(connection);
+exit_pwmc_free:
 	kfree(pwmc);
 	return ret;
 }
 
-static void gb_pwm_connection_exit(struct gb_connection *connection)
+static void gb_pwm_remove(struct gpbridge_device *gpbdev)
 {
-	struct gb_pwm_chip *pwmc = gb_connection_get_data(connection);
-	if (!pwmc)
-		return;
+	struct gb_pwm_chip *pwmc = gb_gpbridge_get_data(gpbdev);
+	struct gb_connection *connection = pwmc->connection;
 
 	pwmchip_remove(&pwmc->chip);
-	/* kref_put(pwmc->connection) */
+	gb_connection_disable(connection);
+	gb_connection_destroy(connection);
 	kfree(pwmc);
 }
 
-static struct gb_protocol pwm_protocol = {
-	.name			= "pwm",
-	.id			= GREYBUS_PROTOCOL_PWM,
-	.major			= GB_PWM_VERSION_MAJOR,
-	.minor			= GB_PWM_VERSION_MINOR,
-	.connection_init	= gb_pwm_connection_init,
-	.connection_exit	= gb_pwm_connection_exit,
-	.request_recv		= NULL, /* no incoming requests */
+static const struct gpbridge_device_id gb_pwm_id_table[] = {
+	{ GPBRIDGE_PROTOCOL(GREYBUS_PROTOCOL_PWM) },
+	{ },
 };
 
-gb_builtin_protocol_driver(pwm_protocol);
+static struct gpbridge_driver pwm_driver = {
+	.name		= "pwm",
+	.probe		= gb_pwm_probe,
+	.remove		= gb_pwm_remove,
+	.id_table	= gb_pwm_id_table,
+};
+gb_gpbridge_builtin_driver(pwm_driver);

commit 0ec306324423444d3ee0222708ef9de7f5586b93
Author: Greg Kroah-Hartman <gregkh@google.com>
Date:   Tue Mar 22 14:30:35 2016 -0400

    greybus: convert drivers to use connection->private set/get
    
    This converts all drivers to use the gb_connection_get_data() and
    gb_connection_set_data() functions to make it a bit more explicit as to
    what is going on.
    
    Signed-off-by: Greg Kroah-Hartman <gregkh@google.com>
    Reviewed-by: Alex Elder <elder@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@google.com>

diff --git a/drivers/staging/greybus/pwm.c b/drivers/staging/greybus/pwm.c
index 018d5c229070..176301a49865 100644
--- a/drivers/staging/greybus/pwm.c
+++ b/drivers/staging/greybus/pwm.c
@@ -188,7 +188,7 @@ static int gb_pwm_connection_init(struct gb_connection *connection)
 	if (!pwmc)
 		return -ENOMEM;
 	pwmc->connection = connection;
-	connection->private = pwmc;
+	gb_connection_set_data(connection, pwmc);
 
 	/* Query number of pwms present */
 	ret = gb_pwm_count_operation(pwmc);
@@ -218,8 +218,7 @@ static int gb_pwm_connection_init(struct gb_connection *connection)
 
 static void gb_pwm_connection_exit(struct gb_connection *connection)
 {
-	struct gb_pwm_chip *pwmc = connection->private;
-
+	struct gb_pwm_chip *pwmc = gb_connection_get_data(connection);
 	if (!pwmc)
 		return;
 

commit c7b07265046b5db56778dc8c2cfc9056413ec5ba
Author: Greg Kroah-Hartman <gregkh@google.com>
Date:   Sun Feb 28 14:42:54 2016 -0800

    greybus: gpbridge.h: move protocol init/exit prototypes
    
    Create gpbridge.h for the gpbridge-specific function prototypes, the
    rest of the greybus drivers don't care about them.
    
    Signed-off-by: Greg Kroah-Hartman <gregkh@google.com>
    Reviewed-by: Viresh Kumar <viresh.kumar@linaro.org>
    Reviewed-by: Johan Hovold <johan@hovoldconsulting.com>

diff --git a/drivers/staging/greybus/pwm.c b/drivers/staging/greybus/pwm.c
index c3a3a9dfc6b4..018d5c229070 100644
--- a/drivers/staging/greybus/pwm.c
+++ b/drivers/staging/greybus/pwm.c
@@ -13,6 +13,7 @@
 #include <linux/pwm.h>
 
 #include "greybus.h"
+#include "gpbridge.h"
 
 struct gb_pwm_chip {
 	struct gb_connection	*connection;

commit 8d5732f4be9411ddf9e6dc6b4d761f3b06999d94
Author: Greg Kroah-Hartman <gregkh@google.com>
Date:   Wed Oct 14 11:18:50 2015 -0700

    greybus: pwm: use the bundle struct device instead of the connector
    
    We are removing struct device from the gb_connection structure in the
    near future.  The gb_bundle structure's struct device should be used as
    a replacement.
    
    This patch moves the pwm driver to use the bundle pointer instead of the
    connection pointer.
    
    Signed-off-by: Greg Kroah-Hartman <gregkh@google.com>
    Reviewed-by: Alex Elder <elder@linaro.org>

diff --git a/drivers/staging/greybus/pwm.c b/drivers/staging/greybus/pwm.c
index d91905f0f7b3..c3a3a9dfc6b4 100644
--- a/drivers/staging/greybus/pwm.c
+++ b/drivers/staging/greybus/pwm.c
@@ -196,7 +196,7 @@ static int gb_pwm_connection_init(struct gb_connection *connection)
 
 	pwm = &pwmc->chip;
 
-	pwm->dev = &connection->dev;
+	pwm->dev = &connection->bundle->dev;
 	pwm->ops = &gb_pwm_ops;
 	pwm->base = -1;			/* Allocate base dynamically */
 	pwm->npwm = pwmc->pwm_max + 1;
@@ -204,7 +204,8 @@ static int gb_pwm_connection_init(struct gb_connection *connection)
 
 	ret = pwmchip_add(pwm);
 	if (ret) {
-		dev_err(&connection->dev, "failed to register PWM: %d\n", ret);
+		dev_err(&connection->bundle->dev,
+			"failed to register PWM: %d\n", ret);
 		goto out_err;
 	}
 

commit 2630fbf828ed921bd52cfe1fbacc9ad16aa2f47a
Author: Johan Hovold <johan@hovoldconsulting.com>
Date:   Tue Sep 1 12:25:28 2015 +0200

    greybus: pwm: replace pr_err with dev_err
    
    Replace pr_err with the more descriptive dev_err. Also include the error
    code on failure to register the PWM chip.
    
    Signed-off-by: Johan Hovold <johan@hovoldconsulting.com>
    Reviewed-by: Viresh Kumar <viresh.kumar@linaro.org>

diff --git a/drivers/staging/greybus/pwm.c b/drivers/staging/greybus/pwm.c
index 5f335895d230..d91905f0f7b3 100644
--- a/drivers/staging/greybus/pwm.c
+++ b/drivers/staging/greybus/pwm.c
@@ -204,7 +204,7 @@ static int gb_pwm_connection_init(struct gb_connection *connection)
 
 	ret = pwmchip_add(pwm);
 	if (ret) {
-		pr_err("Failed to register PWM\n");
+		dev_err(&connection->dev, "failed to register PWM: %d\n", ret);
 		goto out_err;
 	}
 

commit 2e93d02c18ce39430a0cf0c591f067067bad2181
Author: Viresh Kumar <viresh.kumar@linaro.org>
Date:   Tue Aug 11 07:36:07 2015 +0530

    greybus: pwm: Drop get_version support
    
    This is done from a common place now, no need to replicate it.
    
    Signed-off-by: Viresh Kumar <viresh.kumar@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@google.com>

diff --git a/drivers/staging/greybus/pwm.c b/drivers/staging/greybus/pwm.c
index c7f8c6338801..5f335895d230 100644
--- a/drivers/staging/greybus/pwm.c
+++ b/drivers/staging/greybus/pwm.c
@@ -16,8 +16,6 @@
 
 struct gb_pwm_chip {
 	struct gb_connection	*connection;
-	u8			version_major;
-	u8			version_minor;
 	u8			pwm_max;	/* max pwm number */
 
 	struct pwm_chip		chip;
@@ -27,9 +25,6 @@ struct gb_pwm_chip {
 	container_of(chip, struct gb_pwm_chip, chip)
 
 
-/* Define get_version() routine */
-define_get_version(gb_pwm_chip, PWM);
-
 static int gb_pwm_count_operation(struct gb_pwm_chip *pwmc)
 {
 	struct gb_pwm_count_response response;
@@ -194,11 +189,6 @@ static int gb_pwm_connection_init(struct gb_connection *connection)
 	pwmc->connection = connection;
 	connection->private = pwmc;
 
-	/* Check for compatible protocol version */
-	ret = get_version(pwmc);
-	if (ret)
-		goto out_err;
-
 	/* Query number of pwms present */
 	ret = gb_pwm_count_operation(pwmc);
 	if (ret)

commit 3fb97e43ba4ab094a72d9b9fe165e476e756c4ed
Author: Viresh Kumar <viresh.kumar@linaro.org>
Date:   Sat Aug 8 10:25:37 2015 +0530

    greybus: pwm: Use (already defined) major/minor macros
    
    We already have macros for these, use them instead of writing fixed
    values.
    
    Signed-off-by: Viresh Kumar <viresh.kumar@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@google.com>

diff --git a/drivers/staging/greybus/pwm.c b/drivers/staging/greybus/pwm.c
index be7131a41a97..c7f8c6338801 100644
--- a/drivers/staging/greybus/pwm.c
+++ b/drivers/staging/greybus/pwm.c
@@ -239,8 +239,8 @@ static void gb_pwm_connection_exit(struct gb_connection *connection)
 static struct gb_protocol pwm_protocol = {
 	.name			= "pwm",
 	.id			= GREYBUS_PROTOCOL_PWM,
-	.major			= 0,
-	.minor			= 1,
+	.major			= GB_PWM_VERSION_MAJOR,
+	.minor			= GB_PWM_VERSION_MINOR,
 	.connection_init	= gb_pwm_connection_init,
 	.connection_exit	= gb_pwm_connection_exit,
 	.request_recv		= NULL, /* no incoming requests */

commit e18822e3d02c8f296fe42e0e8bda7e2e626a4714
Author: Viresh Kumar <viresh.kumar@linaro.org>
Date:   Wed Jul 1 12:13:52 2015 +0530

    greybus: Rename gb_gpbridge_protocol_driver() as gb_builtin_protocol_driver()
    
    This macro is also required by core protocols like control and svc, and
    hence the 'gpbridge' name doesn't fit anymore.
    
    Lets call this macro gb_builtin_protocol_driver().
    
    Signed-off-by: Viresh Kumar <viresh.kumar@linaro.org>
    Reviewed-by: Alex Elder <elder@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@google.com>

diff --git a/drivers/staging/greybus/pwm.c b/drivers/staging/greybus/pwm.c
index 5dfeb0e761c1..be7131a41a97 100644
--- a/drivers/staging/greybus/pwm.c
+++ b/drivers/staging/greybus/pwm.c
@@ -246,4 +246,4 @@ static struct gb_protocol pwm_protocol = {
 	.request_recv		= NULL, /* no incoming requests */
 };
 
-gb_gpbridge_protocol_driver(pwm_protocol);
+gb_builtin_protocol_driver(pwm_protocol);

commit e9385e5d5ab64a0d05758d84f2980943d3f5f12d
Author: Alex Elder <elder@linaro.org>
Date:   Fri May 22 12:35:31 2015 -0500

    greybus: include "gpbridge.h" from "greybus.h"
    
    Avoid the need for all the source files to include "gpbridge.h"
    by just having "greybus.h" include it.
    
    Signed-off-by: Alex Elder <elder@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@google.com>

diff --git a/drivers/staging/greybus/pwm.c b/drivers/staging/greybus/pwm.c
index 7f675bfed1d7..5dfeb0e761c1 100644
--- a/drivers/staging/greybus/pwm.c
+++ b/drivers/staging/greybus/pwm.c
@@ -11,8 +11,8 @@
 #include <linux/module.h>
 #include <linux/slab.h>
 #include <linux/pwm.h>
+
 #include "greybus.h"
-#include "gpbridge.h"
 
 struct gb_pwm_chip {
 	struct gb_connection	*connection;

commit bdac599c70409bbf48e77971e2b9ecc2a66ef151
Author: Viresh Kumar <viresh.kumar@linaro.org>
Date:   Wed May 20 17:20:10 2015 +0530

    greybus: Use gb_gpbridge_protocol_init()
    
    Start using gb_gpbridge_protocol_init() in gpbridge drivers.
    
    Signed-off-by: Viresh Kumar <viresh.kumar@linaro.org>
    Reviewed-by: Alex Elder <elder@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@google.com>

diff --git a/drivers/staging/greybus/pwm.c b/drivers/staging/greybus/pwm.c
index 7495716070c7..7f675bfed1d7 100644
--- a/drivers/staging/greybus/pwm.c
+++ b/drivers/staging/greybus/pwm.c
@@ -246,12 +246,4 @@ static struct gb_protocol pwm_protocol = {
 	.request_recv		= NULL, /* no incoming requests */
 };
 
-int gb_pwm_protocol_init(void)
-{
-	return gb_protocol_register(&pwm_protocol);
-}
-
-void gb_pwm_protocol_exit(void)
-{
-	gb_protocol_deregister(&pwm_protocol);
-}
+gb_gpbridge_protocol_driver(pwm_protocol);

commit 453bbea807345db3faab8f4a432b4b1b2b245a27
Author: John Stultz <john.stultz@linaro.org>
Date:   Thu Apr 9 16:01:31 2015 -0700

    greybus: Move briged phy structure definitions into gpbridge.h
    
    In order to facilitate re-use of the gpio, i2c, pwm and i2s
    structures, split them out of independent files and add
    them into a shared gpbridge.h
    
    This will be a prereq to sharing these headers w/ gbsim.
    
    Cc: Alex Elder <alex.elder@linaro.org>
    Cc: Greg Kroah-Hartman <gregkh@google.com>
    CC: Johan Hovold <johan@hovoldconsulting.com>
    Signed-off-by: John Stultz <john.stultz@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@google.com>

diff --git a/drivers/staging/greybus/pwm.c b/drivers/staging/greybus/pwm.c
index 4e38b8a4624e..7495716070c7 100644
--- a/drivers/staging/greybus/pwm.c
+++ b/drivers/staging/greybus/pwm.c
@@ -12,6 +12,7 @@
 #include <linux/slab.h>
 #include <linux/pwm.h>
 #include "greybus.h"
+#include "gpbridge.h"
 
 struct gb_pwm_chip {
 	struct gb_connection	*connection;
@@ -25,53 +26,6 @@ struct gb_pwm_chip {
 #define pwm_chip_to_gb_pwm_chip(chip) \
 	container_of(chip, struct gb_pwm_chip, chip)
 
-/* Version of the Greybus PWM protocol we support */
-#define	GB_PWM_VERSION_MAJOR		0x00
-#define	GB_PWM_VERSION_MINOR		0x01
-
-/* Greybus PWM request types */
-#define	GB_PWM_TYPE_INVALID		0x00
-#define	GB_PWM_TYPE_PROTOCOL_VERSION	0x01
-#define	GB_PWM_TYPE_PWM_COUNT		0x02
-#define	GB_PWM_TYPE_ACTIVATE		0x03
-#define	GB_PWM_TYPE_DEACTIVATE		0x04
-#define	GB_PWM_TYPE_CONFIG		0x05
-#define	GB_PWM_TYPE_POLARITY		0x06
-#define	GB_PWM_TYPE_ENABLE		0x07
-#define	GB_PWM_TYPE_DISABLE		0x08
-#define	GB_PWM_TYPE_RESPONSE		0x80	/* OR'd with rest */
-
-/* pwm count request has no payload */
-struct gb_pwm_count_response {
-	__u8	count;
-};
-
-struct gb_pwm_activate_request {
-	__u8	which;
-};
-
-struct gb_pwm_deactivate_request {
-	__u8	which;
-};
-
-struct gb_pwm_config_request {
-	__u8	which;
-	__le32	duty __packed;
-	__le32	period __packed;
-};
-
-struct gb_pwm_polarity_request {
-	__u8	which;
-	__u8	polarity;
-};
-
-struct gb_pwm_enable_request {
-	__u8	which;
-};
-
-struct gb_pwm_disable_request {
-	__u8	which;
-};
 
 /* Define get_version() routine */
 define_get_version(gb_pwm_chip, PWM);

commit b41caa99a25f62326be451592c493de29347d142
Author: Johan Hovold <johan@hovoldconsulting.com>
Date:   Tue Mar 17 18:24:29 2015 +0100

    greybus: pwm: fix config-request alignment
    
    Fix alignment of the duty and period-fields in the config request,
    which should follow the which-field without any inserted padding.
    
    Signed-off-by: Johan Hovold <johan@hovoldconsulting.com>
    Signed-off-by: Greg Kroah-Hartman <greg@kroah.com>

diff --git a/drivers/staging/greybus/pwm.c b/drivers/staging/greybus/pwm.c
index 3f508bf66ec0..4e38b8a4624e 100644
--- a/drivers/staging/greybus/pwm.c
+++ b/drivers/staging/greybus/pwm.c
@@ -56,8 +56,8 @@ struct gb_pwm_deactivate_request {
 
 struct gb_pwm_config_request {
 	__u8	which;
-	__le32	duty;
-	__le32	period;
+	__le32	duty __packed;
+	__le32	period __packed;
 };
 
 struct gb_pwm_polarity_request {

commit 6a80ed4d2c26b5934f3bfb9beafe73a9c7946d34
Author: Johan Hovold <johan@hovoldconsulting.com>
Date:   Tue Mar 17 10:55:50 2015 +0100

    greybus: pwm: fix memory leak in error path
    
    Fix memory leak in connection_init error path.
    
    Signed-off-by: Johan Hovold <johan@hovoldconsulting.com>
    Reviewed-by: Viresh Kumar <viresh.kumar@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <greg@kroah.com>

diff --git a/drivers/staging/greybus/pwm.c b/drivers/staging/greybus/pwm.c
index e2ab6f5f610e..3f508bf66ec0 100644
--- a/drivers/staging/greybus/pwm.c
+++ b/drivers/staging/greybus/pwm.c
@@ -261,7 +261,7 @@ static int gb_pwm_connection_init(struct gb_connection *connection)
 	ret = pwmchip_add(pwm);
 	if (ret) {
 		pr_err("Failed to register PWM\n");
-		return ret;
+		goto out_err;
 	}
 
 	return 0;

commit 89210f64bae6bd6bba90d9e08d1b88b4ba103f59
Author: Viresh Kumar <viresh.kumar@linaro.org>
Date:   Wed Jan 21 18:12:37 2015 +0530

    greybus: remove unused version-response structs
    
    These aren't used anymore and so can be removed.
    
    Signed-off-by: Viresh Kumar <viresh.kumar@linaro.org>
    Reviewed-by: Alex Elder <elder@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <greg@kroah.com>

diff --git a/drivers/staging/greybus/pwm.c b/drivers/staging/greybus/pwm.c
index 7b7252358575..e2ab6f5f610e 100644
--- a/drivers/staging/greybus/pwm.c
+++ b/drivers/staging/greybus/pwm.c
@@ -41,12 +41,6 @@ struct gb_pwm_chip {
 #define	GB_PWM_TYPE_DISABLE		0x08
 #define	GB_PWM_TYPE_RESPONSE		0x80	/* OR'd with rest */
 
-/* version request has no payload */
-struct gb_pwm_proto_version_response {
-	__u8	major;
-	__u8	minor;
-};
-
 /* pwm count request has no payload */
 struct gb_pwm_count_response {
 	__u8	count;

commit 36e79dec96f652110ae2b06bfcf9e67e1b770787
Author: Viresh Kumar <viresh.kumar@linaro.org>
Date:   Wed Jan 21 18:12:36 2015 +0530

    greybus: create get_version() routines with the help of a macro
    
    This gets rid of lots of duplication of code.
    
    Signed-off-by: Viresh Kumar <viresh.kumar@linaro.org>
    Reviewed-by: Alex Elder <elder@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <greg@kroah.com>

diff --git a/drivers/staging/greybus/pwm.c b/drivers/staging/greybus/pwm.c
index 91f7b87a1cae..7b7252358575 100644
--- a/drivers/staging/greybus/pwm.c
+++ b/drivers/staging/greybus/pwm.c
@@ -79,30 +79,8 @@ struct gb_pwm_disable_request {
 	__u8	which;
 };
 
-/*
- * This request only uses the connection field, and if successful,
- * fills in the major and minor protocol version of the target.
- */
-static int gb_pwm_proto_version_operation(struct gb_pwm_chip *pwmc)
-{
-	struct gb_pwm_proto_version_response response;
-	int ret;
-
-	ret = gb_operation_sync(pwmc->connection, GB_PWM_TYPE_PROTOCOL_VERSION,
-				NULL, 0, &response, sizeof(response));
-
-	if (ret)
-		return ret;
-
-	if (response.major > GB_PWM_VERSION_MAJOR) {
-		pr_err("unsupported major version (%hhu > %hhu)\n",
-			response.major, GB_PWM_VERSION_MAJOR);
-		return -ENOTSUPP;
-	}
-	pwmc->version_major = response.major;
-	pwmc->version_minor = response.minor;
-	return 0;
-}
+/* Define get_version() routine */
+define_get_version(gb_pwm_chip, PWM);
 
 static int gb_pwm_count_operation(struct gb_pwm_chip *pwmc)
 {
@@ -269,7 +247,7 @@ static int gb_pwm_connection_init(struct gb_connection *connection)
 	connection->private = pwmc;
 
 	/* Check for compatible protocol version */
-	ret = gb_pwm_proto_version_operation(pwmc);
+	ret = get_version(pwmc);
 	if (ret)
 		goto out_err;
 

commit 5357cf323110ee4a3f4a12870618eca28672c7b9
Author: Viresh Kumar <viresh.kumar@linaro.org>
Date:   Wed Jan 21 16:10:40 2015 +0530

    greybus: Remove "-gb" suffix from .c files
    
    Some files are prefixed with "gb-" and some are suffixed with "-gb". The
    rationale behind the first one is that the modules would be named so, i.e.
    gb-*.ko. But there is no reason to keep the "-gb" suffix in the second case.
    
    Remove the unnecessary suffix.
    
    Signed-off-by: Viresh Kumar <viresh.kumar@linaro.org>
    Reviewed-by: Alex Elder <elder@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <greg@kroah.com>

diff --git a/drivers/staging/greybus/pwm.c b/drivers/staging/greybus/pwm.c
new file mode 100644
index 000000000000..91f7b87a1cae
--- /dev/null
+++ b/drivers/staging/greybus/pwm.c
@@ -0,0 +1,331 @@
+/*
+ * PWM Greybus driver.
+ *
+ * Copyright 2014 Google Inc.
+ * Copyright 2014 Linaro Ltd.
+ *
+ * Released under the GPLv2 only.
+ */
+
+#include <linux/kernel.h>
+#include <linux/module.h>
+#include <linux/slab.h>
+#include <linux/pwm.h>
+#include "greybus.h"
+
+struct gb_pwm_chip {
+	struct gb_connection	*connection;
+	u8			version_major;
+	u8			version_minor;
+	u8			pwm_max;	/* max pwm number */
+
+	struct pwm_chip		chip;
+	struct pwm_chip		*pwm;
+};
+#define pwm_chip_to_gb_pwm_chip(chip) \
+	container_of(chip, struct gb_pwm_chip, chip)
+
+/* Version of the Greybus PWM protocol we support */
+#define	GB_PWM_VERSION_MAJOR		0x00
+#define	GB_PWM_VERSION_MINOR		0x01
+
+/* Greybus PWM request types */
+#define	GB_PWM_TYPE_INVALID		0x00
+#define	GB_PWM_TYPE_PROTOCOL_VERSION	0x01
+#define	GB_PWM_TYPE_PWM_COUNT		0x02
+#define	GB_PWM_TYPE_ACTIVATE		0x03
+#define	GB_PWM_TYPE_DEACTIVATE		0x04
+#define	GB_PWM_TYPE_CONFIG		0x05
+#define	GB_PWM_TYPE_POLARITY		0x06
+#define	GB_PWM_TYPE_ENABLE		0x07
+#define	GB_PWM_TYPE_DISABLE		0x08
+#define	GB_PWM_TYPE_RESPONSE		0x80	/* OR'd with rest */
+
+/* version request has no payload */
+struct gb_pwm_proto_version_response {
+	__u8	major;
+	__u8	minor;
+};
+
+/* pwm count request has no payload */
+struct gb_pwm_count_response {
+	__u8	count;
+};
+
+struct gb_pwm_activate_request {
+	__u8	which;
+};
+
+struct gb_pwm_deactivate_request {
+	__u8	which;
+};
+
+struct gb_pwm_config_request {
+	__u8	which;
+	__le32	duty;
+	__le32	period;
+};
+
+struct gb_pwm_polarity_request {
+	__u8	which;
+	__u8	polarity;
+};
+
+struct gb_pwm_enable_request {
+	__u8	which;
+};
+
+struct gb_pwm_disable_request {
+	__u8	which;
+};
+
+/*
+ * This request only uses the connection field, and if successful,
+ * fills in the major and minor protocol version of the target.
+ */
+static int gb_pwm_proto_version_operation(struct gb_pwm_chip *pwmc)
+{
+	struct gb_pwm_proto_version_response response;
+	int ret;
+
+	ret = gb_operation_sync(pwmc->connection, GB_PWM_TYPE_PROTOCOL_VERSION,
+				NULL, 0, &response, sizeof(response));
+
+	if (ret)
+		return ret;
+
+	if (response.major > GB_PWM_VERSION_MAJOR) {
+		pr_err("unsupported major version (%hhu > %hhu)\n",
+			response.major, GB_PWM_VERSION_MAJOR);
+		return -ENOTSUPP;
+	}
+	pwmc->version_major = response.major;
+	pwmc->version_minor = response.minor;
+	return 0;
+}
+
+static int gb_pwm_count_operation(struct gb_pwm_chip *pwmc)
+{
+	struct gb_pwm_count_response response;
+	int ret;
+
+	ret = gb_operation_sync(pwmc->connection, GB_PWM_TYPE_PWM_COUNT,
+				NULL, 0, &response, sizeof(response));
+	if (ret)
+		return ret;
+	pwmc->pwm_max = response.count;
+	return 0;
+}
+
+static int gb_pwm_activate_operation(struct gb_pwm_chip *pwmc,
+				     u8 which)
+{
+	struct gb_pwm_activate_request request;
+
+	if (which > pwmc->pwm_max)
+		return -EINVAL;
+
+	request.which = which;
+	return gb_operation_sync(pwmc->connection, GB_PWM_TYPE_ACTIVATE,
+				 &request, sizeof(request), NULL, 0);
+}
+
+static int gb_pwm_deactivate_operation(struct gb_pwm_chip *pwmc,
+				       u8 which)
+{
+	struct gb_pwm_deactivate_request request;
+
+	if (which > pwmc->pwm_max)
+		return -EINVAL;
+
+	request.which = which;
+	return gb_operation_sync(pwmc->connection, GB_PWM_TYPE_DEACTIVATE,
+				 &request, sizeof(request), NULL, 0);
+}
+
+static int gb_pwm_config_operation(struct gb_pwm_chip *pwmc,
+				   u8 which, u32 duty, u32 period)
+{
+	struct gb_pwm_config_request request;
+
+	if (which > pwmc->pwm_max)
+		return -EINVAL;
+
+	request.which = which;
+	request.duty = cpu_to_le32(duty);
+	request.period = cpu_to_le32(period);
+	return gb_operation_sync(pwmc->connection, GB_PWM_TYPE_CONFIG,
+				 &request, sizeof(request), NULL, 0);
+}
+
+
+static int gb_pwm_set_polarity_operation(struct gb_pwm_chip *pwmc,
+					 u8 which, u8 polarity)
+{
+	struct gb_pwm_polarity_request request;
+
+	if (which > pwmc->pwm_max)
+		return -EINVAL;
+
+	request.which = which;
+	request.polarity = polarity;
+	return gb_operation_sync(pwmc->connection, GB_PWM_TYPE_POLARITY,
+				 &request, sizeof(request), NULL, 0);
+}
+
+static int gb_pwm_enable_operation(struct gb_pwm_chip *pwmc,
+				   u8 which)
+{
+	struct gb_pwm_enable_request request;
+
+	if (which > pwmc->pwm_max)
+		return -EINVAL;
+
+	request.which = which;
+	return gb_operation_sync(pwmc->connection, GB_PWM_TYPE_ENABLE,
+				 &request, sizeof(request), NULL, 0);
+}
+
+static int gb_pwm_disable_operation(struct gb_pwm_chip *pwmc,
+				    u8 which)
+{
+	struct gb_pwm_disable_request request;
+
+	if (which > pwmc->pwm_max)
+		return -EINVAL;
+
+	request.which = which;
+	return gb_operation_sync(pwmc->connection, GB_PWM_TYPE_DISABLE,
+				 &request, sizeof(request), NULL, 0);
+}
+
+static int gb_pwm_request(struct pwm_chip *chip, struct pwm_device *pwm)
+{
+	struct gb_pwm_chip *pwmc = pwm_chip_to_gb_pwm_chip(chip);
+
+	return gb_pwm_activate_operation(pwmc, pwm->hwpwm);
+};
+
+static void gb_pwm_free(struct pwm_chip *chip, struct pwm_device *pwm)
+{
+	struct gb_pwm_chip *pwmc = pwm_chip_to_gb_pwm_chip(chip);
+
+	if (test_bit(PWMF_ENABLED, &pwm->flags))
+		dev_warn(chip->dev, "freeing PWM device without disabling\n");
+
+	gb_pwm_deactivate_operation(pwmc, pwm->hwpwm);
+}
+
+static int gb_pwm_config(struct pwm_chip *chip, struct pwm_device *pwm,
+			 int duty_ns, int period_ns)
+{
+	struct gb_pwm_chip *pwmc = pwm_chip_to_gb_pwm_chip(chip);
+
+	return gb_pwm_config_operation(pwmc, pwm->hwpwm, duty_ns, period_ns);
+};
+
+static int gb_pwm_set_polarity(struct pwm_chip *chip, struct pwm_device *pwm,
+			       enum pwm_polarity polarity)
+{
+	struct gb_pwm_chip *pwmc = pwm_chip_to_gb_pwm_chip(chip);
+
+	return gb_pwm_set_polarity_operation(pwmc, pwm->hwpwm, polarity);
+};
+
+static int gb_pwm_enable(struct pwm_chip *chip, struct pwm_device *pwm)
+{
+	struct gb_pwm_chip *pwmc = pwm_chip_to_gb_pwm_chip(chip);
+
+	return gb_pwm_enable_operation(pwmc, pwm->hwpwm);
+};
+
+static void gb_pwm_disable(struct pwm_chip *chip, struct pwm_device *pwm)
+{
+	struct gb_pwm_chip *pwmc = pwm_chip_to_gb_pwm_chip(chip);
+
+	gb_pwm_disable_operation(pwmc, pwm->hwpwm);
+};
+
+static const struct pwm_ops gb_pwm_ops = {
+	.request = gb_pwm_request,
+	.free = gb_pwm_free,
+	.config = gb_pwm_config,
+	.set_polarity = gb_pwm_set_polarity,
+	.enable = gb_pwm_enable,
+	.disable = gb_pwm_disable,
+	.owner = THIS_MODULE,
+};
+
+static int gb_pwm_connection_init(struct gb_connection *connection)
+{
+	struct gb_pwm_chip *pwmc;
+	struct pwm_chip *pwm;
+	int ret;
+
+	pwmc = kzalloc(sizeof(*pwmc), GFP_KERNEL);
+	if (!pwmc)
+		return -ENOMEM;
+	pwmc->connection = connection;
+	connection->private = pwmc;
+
+	/* Check for compatible protocol version */
+	ret = gb_pwm_proto_version_operation(pwmc);
+	if (ret)
+		goto out_err;
+
+	/* Query number of pwms present */
+	ret = gb_pwm_count_operation(pwmc);
+	if (ret)
+		goto out_err;
+
+	pwm = &pwmc->chip;
+
+	pwm->dev = &connection->dev;
+	pwm->ops = &gb_pwm_ops;
+	pwm->base = -1;			/* Allocate base dynamically */
+	pwm->npwm = pwmc->pwm_max + 1;
+	pwm->can_sleep = true;		/* FIXME */
+
+	ret = pwmchip_add(pwm);
+	if (ret) {
+		pr_err("Failed to register PWM\n");
+		return ret;
+	}
+
+	return 0;
+out_err:
+	kfree(pwmc);
+	return ret;
+}
+
+static void gb_pwm_connection_exit(struct gb_connection *connection)
+{
+	struct gb_pwm_chip *pwmc = connection->private;
+
+	if (!pwmc)
+		return;
+
+	pwmchip_remove(&pwmc->chip);
+	/* kref_put(pwmc->connection) */
+	kfree(pwmc);
+}
+
+static struct gb_protocol pwm_protocol = {
+	.name			= "pwm",
+	.id			= GREYBUS_PROTOCOL_PWM,
+	.major			= 0,
+	.minor			= 1,
+	.connection_init	= gb_pwm_connection_init,
+	.connection_exit	= gb_pwm_connection_exit,
+	.request_recv		= NULL, /* no incoming requests */
+};
+
+int gb_pwm_protocol_init(void)
+{
+	return gb_protocol_register(&pwm_protocol);
+}
+
+void gb_pwm_protocol_exit(void)
+{
+	gb_protocol_deregister(&pwm_protocol);
+}
