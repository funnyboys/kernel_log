commit ec0ad868173da8a75121f9dc116a5d5478ff614d
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Sun Aug 25 07:54:27 2019 +0200

    staging: greybus: move core include files to include/linux/greybus/
    
    With the goal of moving the core of the greybus code out of staging, the
    include files need to be moved to include/linux/greybus.h and
    include/linux/greybus/
    
    Cc: Vaibhav Hiremath <hvaibhav.linux@gmail.com>
    Cc: Johan Hovold <johan@kernel.org>
    Cc: Vaibhav Agarwal <vaibhav.sr@gmail.com>
    Cc: Rui Miguel Silva <rmfrfs@gmail.com>
    Cc: David Lin <dtwlin@gmail.com>
    Cc: "Bryan O'Donoghue" <pure.logic@nexus-software.ie>
    Cc: greybus-dev@lists.linaro.org
    Cc: devel@driverdev.osuosl.org
    Acked-by: Mark Greer <mgreer@animalcreek.com>
    Acked-by: Viresh Kumar <viresh.kumar@linaro.org>
    Acked-by: Alex Elder <elder@kernel.org>
    Link: https://lore.kernel.org/r/20190825055429.18547-8-gregkh@linuxfoundation.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/greybus/vibrator.c b/drivers/staging/greybus/vibrator.c
index 3e5dedeacd5c..0e2b188e5ca3 100644
--- a/drivers/staging/greybus/vibrator.c
+++ b/drivers/staging/greybus/vibrator.c
@@ -13,8 +13,7 @@
 #include <linux/kdev_t.h>
 #include <linux/idr.h>
 #include <linux/pm_runtime.h>
-
-#include "greybus.h"
+#include <linux/greybus.h>
 
 struct gb_vibrator_device {
 	struct gb_connection	*connection;

commit 863dbc52e7f0e5acd7b4883f3933543a81c474c7
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Tue Nov 7 14:58:42 2017 +0100

    staging: greybus: Remove redundant license text
    
    Now that the SPDX tag is in all greybus files, that identifies the
    license in a specific and legally-defined manner.  So the extra GPL text
    wording can be removed as it is no longer needed at all.
    
    This is done on a quest to remove the 700+ different ways that files in
    the kernel describe the GPL license text.  And there's unneeded stuff
    like the address (sometimes incorrect) for the FSF which is never
    needed.
    
    No copyright headers or other non-license-description text was removed.
    
    Cc: Vaibhav Hiremath <hvaibhav.linux@gmail.com>
    Reviewed-by: Alex Elder <elder@linaro.org>
    Acked-by: Vaibhav Agarwal <vaibhav.sr@gmail.com>
    Acked-by: David Lin <dtwlin@gmail.com>
    Acked-by: Johan Hovold <johan@kernel.org>
    Acked-by: Viresh Kumar <viresh.kumar@linaro.org>
    Acked-by: Mark Greer <mgreer@animalcreek.com>
    Acked-by: Rui Miguel Silva <rmfrfs@gmail.com>
    Acked-by: "Bryan O'Donoghue" <pure.logic@nexus-software.ie>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/greybus/vibrator.c b/drivers/staging/greybus/vibrator.c
index 111501643af2..3e5dedeacd5c 100644
--- a/drivers/staging/greybus/vibrator.c
+++ b/drivers/staging/greybus/vibrator.c
@@ -4,8 +4,6 @@
  *
  * Copyright 2014 Google Inc.
  * Copyright 2014 Linaro Ltd.
- *
- * Released under the GPLv2 only.
  */
 
 #include <linux/kernel.h>

commit eb50fd3a22c770f36be275295b782f3ea52e3215
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Tue Nov 7 14:58:41 2017 +0100

    staging: greybus: add SPDX identifiers to all greybus driver files
    
    It's good to have SPDX identifiers in all files to make it easier to
    audit the kernel tree for correct licenses.
    
    Update the drivers/staging/greybus files files with the correct SPDX
    license identifier based on the license text in the file itself.  The
    SPDX identifier is a legally binding shorthand, which can be used
    instead of the full boiler plate text.
    
    This work is based on a script and data from Thomas Gleixner, Philippe
    Ombredanne, and Kate Stewart.
    
    Cc: Vaibhav Hiremath <hvaibhav.linux@gmail.com>
    Cc: "Bryan O'Donoghue" <pure.logic@nexus-software.ie>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: Kate Stewart <kstewart@linuxfoundation.org>
    Cc: Philippe Ombredanne <pombredanne@nexb.com>
    Acked-by: Vaibhav Agarwal <vaibhav.sr@gmail.com>
    Acked-by: David Lin <dtwlin@gmail.com>
    Reviewed-by: Alex Elder <elder@linaro.org>
    Acked-by: Johan Hovold <johan@kernel.org>
    Acked-by: Viresh Kumar <viresh.kumar@linaro.org>
    Acked-by: Mark Greer <mgreer@animalcreek.com>
    Acked-by: Rui Miguel Silva <rmfrfs@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/greybus/vibrator.c b/drivers/staging/greybus/vibrator.c
index 5cd8a50d41ad..111501643af2 100644
--- a/drivers/staging/greybus/vibrator.c
+++ b/drivers/staging/greybus/vibrator.c
@@ -1,3 +1,4 @@
+// SPDX-License-Identifier: GPL-2.0
 /*
  * Greybus Vibrator protocol driver.
  *

commit 2c5b7943a96df6b8a1031d18823a3c6a5d2275b0
Author: Srishti Sharma <srishtishar@gmail.com>
Date:   Sat Aug 19 14:12:50 2017 +0530

    Staging: greybus: vibrator.c: Fixed alignment to match open parenthesis.
    
    Fixed alignment so that it matched open parenthesis
    
    Signed-off-by: Srishti Sharma <srishtishar@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/greybus/vibrator.c b/drivers/staging/greybus/vibrator.c
index 77a2365a55e6..5cd8a50d41ad 100644
--- a/drivers/staging/greybus/vibrator.c
+++ b/drivers/staging/greybus/vibrator.c
@@ -34,7 +34,7 @@ static int turn_off(struct gb_vibrator_device *vib)
 	int ret;
 
 	ret = gb_operation_sync(vib->connection, GB_VIBRATOR_TYPE_OFF,
-			NULL, 0, NULL, 0);
+				NULL, 0, NULL, 0);
 
 	gb_pm_runtime_put_autosuspend(bundle);
 
@@ -55,7 +55,7 @@ static int turn_on(struct gb_vibrator_device *vib, u16 timeout_ms)
 		turn_off(vib);
 
 	ret = gb_operation_sync(vib->connection, GB_VIBRATOR_TYPE_ON,
-			NULL, 0, NULL, 0);
+				NULL, 0, NULL, 0);
 	if (ret) {
 		gb_pm_runtime_put_autosuspend(bundle);
 		return ret;
@@ -116,7 +116,7 @@ static struct class vibrator_class = {
 static DEFINE_IDA(minors);
 
 static int gb_vibrator_probe(struct gb_bundle *bundle,
-					const struct greybus_bundle_id *id)
+			     const struct greybus_bundle_id *id)
 {
 	struct greybus_descriptor_cport *cport_desc;
 	struct gb_connection *connection;
@@ -136,7 +136,7 @@ static int gb_vibrator_probe(struct gb_bundle *bundle,
 		return -ENOMEM;
 
 	connection = gb_connection_create(bundle, le16_to_cpu(cport_desc->id),
-						NULL);
+					  NULL);
 	if (IS_ERR(connection)) {
 		retval = PTR_ERR(connection);
 		goto err_free_vib;

commit 461ab8077d573d4a35529572c774a71e5a898a84
Author: Gioh Kim <gi-oh.kim@profitbricks.com>
Date:   Thu Feb 9 17:30:11 2017 +0100

    staging: greybus: fix "line over 80 characters" coding style issues
    
    This patch fixes only obvious lines.
    There are still more issues.
    
    Signed-off-by: Gioh Kim <gi-oh.kim@profitbricks.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/staging/greybus/vibrator.c b/drivers/staging/greybus/vibrator.c
index 4ba0e168930f..77a2365a55e6 100644
--- a/drivers/staging/greybus/vibrator.c
+++ b/drivers/staging/greybus/vibrator.c
@@ -70,7 +70,9 @@ static void gb_vibrator_worker(struct work_struct *work)
 {
 	struct delayed_work *delayed_work = to_delayed_work(work);
 	struct gb_vibrator_device *vib =
-		container_of(delayed_work, struct gb_vibrator_device, delayed_work);
+		container_of(delayed_work,
+			     struct gb_vibrator_device,
+			     delayed_work);
 
 	turn_off(vib);
 }

commit 06000c03174988b4e8167d03ad0a36c6792686cb
Author: Greg Kroah-Hartman <gregkh@google.com>
Date:   Thu Sep 8 15:47:30 2016 +0200

    staging: greybus: vibrator: remove KERNEL_VERSION checks
    
    No need to support older kernel versions in the Greybus Vibrator driver,
    so remove the checks as needed, we can now rely on all of the correct
    driver core apis being present.
    
    Signed-off-by: Greg Kroah-Hartman <gregkh@google.com>

diff --git a/drivers/staging/greybus/vibrator.c b/drivers/staging/greybus/vibrator.c
index 7296a4dd0a0c..4ba0e168930f 100644
--- a/drivers/staging/greybus/vibrator.c
+++ b/drivers/staging/greybus/vibrator.c
@@ -108,9 +108,7 @@ ATTRIBUTE_GROUPS(vibrator);
 static struct class vibrator_class = {
 	.name		= "vibrator",
 	.owner		= THIS_MODULE,
-#if LINUX_VERSION_CODE >= KERNEL_VERSION(3,11,0)
 	.dev_groups	= vibrator_groups,
-#endif
 };
 
 static DEFINE_IDA(minors);
@@ -169,19 +167,6 @@ static int gb_vibrator_probe(struct gb_bundle *bundle,
 	}
 	vib->dev = dev;
 
-#if LINUX_VERSION_CODE <= KERNEL_VERSION(3,11,0)
-	/*
-	 * Newer kernels handle this in a race-free manner, by the dev_groups
-	 * field in the struct class up above.  But for older kernels, we need
-	 * to "open code this :(
-	 */
-	retval = sysfs_create_group(&dev->kobj, vibrator_groups[0]);
-	if (retval) {
-		device_unregister(dev);
-		goto err_ida_remove;
-	}
-#endif
-
 	INIT_DELAYED_WORK(&vib->delayed_work, gb_vibrator_worker);
 
 	gb_pm_runtime_put_autosuspend(bundle);
@@ -212,9 +197,6 @@ static void gb_vibrator_disconnect(struct gb_bundle *bundle)
 	if (cancel_delayed_work_sync(&vib->delayed_work))
 		turn_off(vib);
 
-#if LINUX_VERSION_CODE <= KERNEL_VERSION(3,11,0)
-	sysfs_remove_group(&vib->dev->kobj, vibrator_groups[0]);
-#endif
 	device_unregister(vib->dev);
 	ida_simple_remove(&minors, vib->minor);
 	gb_connection_disable(vib->connection);

commit 0900845ab741dd7b0b8b3f03ded0ffc6a348dd90
Author: Ann Chen <chen_ann@projectara.com>
Date:   Wed Aug 17 16:38:56 2016 +0800

    greybus: Add workqueue to handle vibrator timeout
    
    In the beginning, module side can control the vibrator timeout value,
    it can disable vibrator until timeout. But after Runtime PM control added
    in, AP side didn't know when module can be suspended, the vibrator
    task will be interrupted by suspending event.
    
    Because of this problem, the module can not be in charge of counting down
    the timeout value, it is now up to the AP to manage this. So add workqueue
    to handle the vibrator timeout.
    
    Signed-off-by: Ann Chen <chen_ann@projectara.com>
    Reviewed-by: Viresh Kumar <viresh.kumar@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@google.com>

diff --git a/drivers/staging/greybus/vibrator.c b/drivers/staging/greybus/vibrator.c
index db5583962101..7296a4dd0a0c 100644
--- a/drivers/staging/greybus/vibrator.c
+++ b/drivers/staging/greybus/vibrator.c
@@ -21,36 +21,27 @@ struct gb_vibrator_device {
 	struct gb_connection	*connection;
 	struct device		*dev;
 	int			minor;		/* vibrator minor number */
+	struct delayed_work     delayed_work;
 };
 
 /* Greybus Vibrator operation types */
 #define	GB_VIBRATOR_TYPE_ON			0x02
 #define	GB_VIBRATOR_TYPE_OFF			0x03
 
-struct gb_vibrator_on_request {
-	__le16	timeout_ms;
-};
-
-static int turn_on(struct gb_vibrator_device *vib, u16 timeout_ms)
+static int turn_off(struct gb_vibrator_device *vib)
 {
-	struct gb_vibrator_on_request request;
 	struct gb_bundle *bundle = vib->connection->bundle;
 	int ret;
 
-	ret = gb_pm_runtime_get_sync(bundle);
-	if (ret)
-		return ret;
-
-	request.timeout_ms = cpu_to_le16(timeout_ms);
-	ret = gb_operation_sync(vib->connection, GB_VIBRATOR_TYPE_ON,
-			&request, sizeof(request), NULL, 0);
+	ret = gb_operation_sync(vib->connection, GB_VIBRATOR_TYPE_OFF,
+			NULL, 0, NULL, 0);
 
 	gb_pm_runtime_put_autosuspend(bundle);
 
 	return ret;
 }
 
-static int turn_off(struct gb_vibrator_device *vib)
+static int turn_on(struct gb_vibrator_device *vib, u16 timeout_ms)
 {
 	struct gb_bundle *bundle = vib->connection->bundle;
 	int ret;
@@ -59,12 +50,29 @@ static int turn_off(struct gb_vibrator_device *vib)
 	if (ret)
 		return ret;
 
-	ret = gb_operation_sync(vib->connection, GB_VIBRATOR_TYPE_OFF,
+	/* Vibrator was switched ON earlier */
+	if (cancel_delayed_work_sync(&vib->delayed_work))
+		turn_off(vib);
+
+	ret = gb_operation_sync(vib->connection, GB_VIBRATOR_TYPE_ON,
 			NULL, 0, NULL, 0);
+	if (ret) {
+		gb_pm_runtime_put_autosuspend(bundle);
+		return ret;
+	}
 
-	gb_pm_runtime_put_autosuspend(bundle);
+	schedule_delayed_work(&vib->delayed_work, msecs_to_jiffies(timeout_ms));
 
-	return ret;
+	return 0;
+}
+
+static void gb_vibrator_worker(struct work_struct *work)
+{
+	struct delayed_work *delayed_work = to_delayed_work(work);
+	struct gb_vibrator_device *vib =
+		container_of(delayed_work, struct gb_vibrator_device, delayed_work);
+
+	turn_off(vib);
 }
 
 static ssize_t timeout_store(struct device *dev, struct device_attribute *attr,
@@ -174,6 +182,8 @@ static int gb_vibrator_probe(struct gb_bundle *bundle,
 	}
 #endif
 
+	INIT_DELAYED_WORK(&vib->delayed_work, gb_vibrator_worker);
+
 	gb_pm_runtime_put_autosuspend(bundle);
 
 	return 0;
@@ -199,6 +209,9 @@ static void gb_vibrator_disconnect(struct gb_bundle *bundle)
 	if (ret)
 		gb_pm_runtime_get_noresume(bundle);
 
+	if (cancel_delayed_work_sync(&vib->delayed_work))
+		turn_off(vib);
+
 #if LINUX_VERSION_CODE <= KERNEL_VERSION(3,11,0)
 	sysfs_remove_group(&vib->dev->kobj, vibrator_groups[0]);
 #endif

commit 633e45eaac40406739baae960d2c8abac40dbb83
Author: Ann Chen <chen_ann@projectara.com>
Date:   Fri Jul 22 15:33:55 2016 +0800

    greybus: vibrator: integrate runtime pm
    
    Integrate greybus drivers with the Linux Kernel RuntimePM framework
    for vibrator driver.
    
    Testing Done: AP side (kernel) can control the vibrator driver with
    suspend and resume.
    
    Signed-off-by: Ann Chen <chen_ann@projectara.com>
    Reviewed-by: David Lin <dtwlin@google.com>
    Reviewed-by: Viresh Kumar <viresh.kumar@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@google.com>

diff --git a/drivers/staging/greybus/vibrator.c b/drivers/staging/greybus/vibrator.c
index 33b2bf9c16c8..db5583962101 100644
--- a/drivers/staging/greybus/vibrator.c
+++ b/drivers/staging/greybus/vibrator.c
@@ -13,6 +13,8 @@
 #include <linux/device.h>
 #include <linux/kdev_t.h>
 #include <linux/idr.h>
+#include <linux/pm_runtime.h>
+
 #include "greybus.h"
 
 struct gb_vibrator_device {
@@ -32,16 +34,37 @@ struct gb_vibrator_on_request {
 static int turn_on(struct gb_vibrator_device *vib, u16 timeout_ms)
 {
 	struct gb_vibrator_on_request request;
+	struct gb_bundle *bundle = vib->connection->bundle;
+	int ret;
+
+	ret = gb_pm_runtime_get_sync(bundle);
+	if (ret)
+		return ret;
 
 	request.timeout_ms = cpu_to_le16(timeout_ms);
-	return gb_operation_sync(vib->connection, GB_VIBRATOR_TYPE_ON,
-				 &request, sizeof(request), NULL, 0);
+	ret = gb_operation_sync(vib->connection, GB_VIBRATOR_TYPE_ON,
+			&request, sizeof(request), NULL, 0);
+
+	gb_pm_runtime_put_autosuspend(bundle);
+
+	return ret;
 }
 
 static int turn_off(struct gb_vibrator_device *vib)
 {
-	return gb_operation_sync(vib->connection, GB_VIBRATOR_TYPE_OFF,
-				 NULL, 0, NULL, 0);
+	struct gb_bundle *bundle = vib->connection->bundle;
+	int ret;
+
+	ret = gb_pm_runtime_get_sync(bundle);
+	if (ret)
+		return ret;
+
+	ret = gb_operation_sync(vib->connection, GB_VIBRATOR_TYPE_OFF,
+			NULL, 0, NULL, 0);
+
+	gb_pm_runtime_put_autosuspend(bundle);
+
+	return ret;
 }
 
 static ssize_t timeout_store(struct device *dev, struct device_attribute *attr,
@@ -151,6 +174,8 @@ static int gb_vibrator_probe(struct gb_bundle *bundle,
 	}
 #endif
 
+	gb_pm_runtime_put_autosuspend(bundle);
+
 	return 0;
 
 err_ida_remove:
@@ -168,6 +193,11 @@ static int gb_vibrator_probe(struct gb_bundle *bundle,
 static void gb_vibrator_disconnect(struct gb_bundle *bundle)
 {
 	struct gb_vibrator_device *vib = greybus_get_drvdata(bundle);
+	int ret;
+
+	ret = gb_pm_runtime_get_sync(bundle);
+	if (ret)
+		gb_pm_runtime_get_noresume(bundle);
 
 #if LINUX_VERSION_CODE <= KERNEL_VERSION(3,11,0)
 	sysfs_remove_group(&vib->dev->kobj, vibrator_groups[0]);

commit 5e569115e9b9d4af631589b9d9cc5227a660b008
Author: Viresh Kumar <viresh.kumar@linaro.org>
Date:   Mon May 30 11:31:52 2016 +0530

    greybus: Remove unused VERSION specific macros
    
    We don't use these anymore. Drop them.
    
    Note that some macro's specific to bridged PHY devices aren't removed in
    the patch, as gbsim will break otherwise. They will be removed
    separately.
    
    Compile tested.
    
    Signed-off-by: Viresh Kumar <viresh.kumar@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@google.com>

diff --git a/drivers/staging/greybus/vibrator.c b/drivers/staging/greybus/vibrator.c
index 5afcb2784a32..33b2bf9c16c8 100644
--- a/drivers/staging/greybus/vibrator.c
+++ b/drivers/staging/greybus/vibrator.c
@@ -21,10 +21,6 @@ struct gb_vibrator_device {
 	int			minor;		/* vibrator minor number */
 };
 
-/* Version of the Greybus vibrator protocol we support */
-#define	GB_VIBRATOR_VERSION_MAJOR		0x00
-#define	GB_VIBRATOR_VERSION_MINOR		0x01
-
 /* Greybus Vibrator operation types */
 #define	GB_VIBRATOR_TYPE_ON			0x02
 #define	GB_VIBRATOR_TYPE_OFF			0x03

commit 0ec306324423444d3ee0222708ef9de7f5586b93
Author: Greg Kroah-Hartman <gregkh@google.com>
Date:   Tue Mar 22 14:30:35 2016 -0400

    greybus: convert drivers to use connection->private set/get
    
    This converts all drivers to use the gb_connection_get_data() and
    gb_connection_set_data() functions to make it a bit more explicit as to
    what is going on.
    
    Signed-off-by: Greg Kroah-Hartman <gregkh@google.com>
    Reviewed-by: Alex Elder <elder@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@google.com>

diff --git a/drivers/staging/greybus/vibrator.c b/drivers/staging/greybus/vibrator.c
index 8c0df99b9f8d..5afcb2784a32 100644
--- a/drivers/staging/greybus/vibrator.c
+++ b/drivers/staging/greybus/vibrator.c
@@ -114,7 +114,7 @@ static int gb_vibrator_probe(struct gb_bundle *bundle,
 		retval = PTR_ERR(connection);
 		goto err_free_vib;
 	}
-	connection->private = vib;
+	gb_connection_set_data(connection, vib);
 
 	vib->connection = connection;
 

commit e0deb079edc9bd403acdb1ecada0879786cc0fe3
Author: Johan Hovold <johan@hovoldconsulting.com>
Date:   Thu Jan 21 17:34:24 2016 +0100

    greybus: vibrator: convert to bundle driver
    
    Convert the legacy vibrator protocol driver to a bundle driver.
    
    Reviewed-by: Viresh Kumar <viresh.kumar@linaro.org>
    Signed-off-by: Johan Hovold <johan@hovoldconsulting.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@google.com>

diff --git a/drivers/staging/greybus/vibrator.c b/drivers/staging/greybus/vibrator.c
index 04737c80496d..8c0df99b9f8d 100644
--- a/drivers/staging/greybus/vibrator.c
+++ b/drivers/staging/greybus/vibrator.c
@@ -88,19 +88,42 @@ static struct class vibrator_class = {
 
 static DEFINE_IDA(minors);
 
-static int gb_vibrator_connection_init(struct gb_connection *connection)
+static int gb_vibrator_probe(struct gb_bundle *bundle,
+					const struct greybus_bundle_id *id)
 {
+	struct greybus_descriptor_cport *cport_desc;
+	struct gb_connection *connection;
 	struct gb_vibrator_device *vib;
 	struct device *dev;
 	int retval;
 
+	if (bundle->num_cports != 1)
+		return -ENODEV;
+
+	cport_desc = &bundle->cport_desc[0];
+	if (cport_desc->protocol_id != GREYBUS_PROTOCOL_VIBRATOR)
+		return -ENODEV;
+
 	vib = kzalloc(sizeof(*vib), GFP_KERNEL);
 	if (!vib)
 		return -ENOMEM;
 
-	vib->connection = connection;
+	connection = gb_connection_create(bundle, le16_to_cpu(cport_desc->id),
+						NULL);
+	if (IS_ERR(connection)) {
+		retval = PTR_ERR(connection);
+		goto err_free_vib;
+	}
 	connection->private = vib;
 
+	vib->connection = connection;
+
+	greybus_set_drvdata(bundle, vib);
+
+	retval = gb_connection_enable(connection);
+	if (retval)
+		goto err_connection_destroy;
+
 	/*
 	 * For now we create a device in sysfs for the vibrator, but odds are
 	 * there is a "real" device somewhere in the kernel for this, but I
@@ -109,9 +132,9 @@ static int gb_vibrator_connection_init(struct gb_connection *connection)
 	vib->minor = ida_simple_get(&minors, 0, 0, GFP_KERNEL);
 	if (vib->minor < 0) {
 		retval = vib->minor;
-		goto error;
+		goto err_connection_disable;
 	}
-	dev = device_create(&vibrator_class, &connection->bundle->dev,
+	dev = device_create(&vibrator_class, &bundle->dev,
 			    MKDEV(0, 0), vib, "vibrator%d", vib->minor);
 	if (IS_ERR(dev)) {
 		retval = -EINVAL;
@@ -136,34 +159,44 @@ static int gb_vibrator_connection_init(struct gb_connection *connection)
 
 err_ida_remove:
 	ida_simple_remove(&minors, vib->minor);
-error:
+err_connection_disable:
+	gb_connection_disable(connection);
+err_connection_destroy:
+	gb_connection_destroy(connection);
+err_free_vib:
 	kfree(vib);
+
 	return retval;
 }
 
-static void gb_vibrator_connection_exit(struct gb_connection *connection)
+static void gb_vibrator_disconnect(struct gb_bundle *bundle)
 {
-	struct gb_vibrator_device *vib = connection->private;
+	struct gb_vibrator_device *vib = greybus_get_drvdata(bundle);
 
 #if LINUX_VERSION_CODE <= KERNEL_VERSION(3,11,0)
 	sysfs_remove_group(&vib->dev->kobj, vibrator_groups[0]);
 #endif
 	device_unregister(vib->dev);
 	ida_simple_remove(&minors, vib->minor);
+	gb_connection_disable(vib->connection);
+	gb_connection_destroy(vib->connection);
 	kfree(vib);
 }
 
-static struct gb_protocol vibrator_protocol = {
-	.name			= "vibrator",
-	.id			= GREYBUS_PROTOCOL_VIBRATOR,
-	.major			= GB_VIBRATOR_VERSION_MAJOR,
-	.minor			= GB_VIBRATOR_VERSION_MINOR,
-	.connection_init	= gb_vibrator_connection_init,
-	.connection_exit	= gb_vibrator_connection_exit,
-	.request_recv		= NULL,	/* no incoming requests */
+static const struct greybus_bundle_id gb_vibrator_id_table[] = {
+	{ GREYBUS_DEVICE_CLASS(GREYBUS_CLASS_VIBRATOR) },
+	{ }
+};
+MODULE_DEVICE_TABLE(greybus, gb_vibrator_id_table);
+
+static struct greybus_driver gb_vibrator_driver = {
+	.name		= "vibrator",
+	.probe		= gb_vibrator_probe,
+	.disconnect	= gb_vibrator_disconnect,
+	.id_table	= gb_vibrator_id_table,
 };
 
-static __init int protocol_init(void)
+static __init int gb_vibrator_init(void)
 {
 	int retval;
 
@@ -171,7 +204,7 @@ static __init int protocol_init(void)
 	if (retval)
 		return retval;
 
-	retval = gb_protocol_register(&vibrator_protocol);
+	retval = greybus_register(&gb_vibrator_driver);
 	if (retval)
 		goto err_class_unregister;
 
@@ -182,14 +215,14 @@ static __init int protocol_init(void)
 
 	return retval;
 }
-module_init(protocol_init);
+module_init(gb_vibrator_init);
 
-static __exit void protocol_exit(void)
+static __exit void gb_vibrator_exit(void)
 {
-	gb_protocol_deregister(&vibrator_protocol);
+	greybus_deregister(&gb_vibrator_driver);
 	class_unregister(&vibrator_class);
 	ida_destroy(&minors);
 }
-module_exit(protocol_exit);
+module_exit(gb_vibrator_exit);
 
 MODULE_LICENSE("GPL v2");

commit 5ae2f55b3571408caa6ee0dc908dc60131da7cf6
Author: Greg Kroah-Hartman <gregkh@google.com>
Date:   Wed Oct 14 11:12:06 2015 -0700

    greybus: vibrator: use the bundle struct device instead of the connector
    
    We are removing struct device from the gb_connection structure in the
    near future.  The gb_bundle structure's struct device should be used as
    a replacement.
    
    This patch moves the vibrator driver to use the bundle pointer instead
    of the connection pointer.
    
    Signed-off-by: Greg Kroah-Hartman <gregkh@google.com>
    Reviewed-by: Alex Elder <elder@linaro.org>

diff --git a/drivers/staging/greybus/vibrator.c b/drivers/staging/greybus/vibrator.c
index 2b8032653f55..04737c80496d 100644
--- a/drivers/staging/greybus/vibrator.c
+++ b/drivers/staging/greybus/vibrator.c
@@ -111,8 +111,8 @@ static int gb_vibrator_connection_init(struct gb_connection *connection)
 		retval = vib->minor;
 		goto error;
 	}
-	dev = device_create(&vibrator_class, &connection->dev, MKDEV(0, 0), vib,
-			    "vibrator%d", vib->minor);
+	dev = device_create(&vibrator_class, &connection->bundle->dev,
+			    MKDEV(0, 0), vib, "vibrator%d", vib->minor);
 	if (IS_ERR(dev)) {
 		retval = -EINVAL;
 		goto err_ida_remove;

commit d4efa68803667ab9d3ff6786462d2702b89e58de
Author: Johan Hovold <johan@hovoldconsulting.com>
Date:   Tue Oct 13 19:10:27 2015 +0200

    greybus: vibrator: add missing protocol-register error handling
    
    Add missing error handling when registering the vibrator protocol during
    module init.
    
    Signed-off-by: Johan Hovold <johan@hovoldconsulting.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@google.com>

diff --git a/drivers/staging/greybus/vibrator.c b/drivers/staging/greybus/vibrator.c
index fd40cda565e4..2b8032653f55 100644
--- a/drivers/staging/greybus/vibrator.c
+++ b/drivers/staging/greybus/vibrator.c
@@ -171,7 +171,16 @@ static __init int protocol_init(void)
 	if (retval)
 		return retval;
 
-	return gb_protocol_register(&vibrator_protocol);
+	retval = gb_protocol_register(&vibrator_protocol);
+	if (retval)
+		goto err_class_unregister;
+
+	return 0;
+
+err_class_unregister:
+	class_unregister(&vibrator_class);
+
+	return retval;
 }
 module_init(protocol_init);
 

commit d7849bffc622b3405ef226364d67bb81af48c152
Author: Johan Hovold <johan@hovoldconsulting.com>
Date:   Mon Sep 14 20:19:02 2015 +0200

    greybus: vibrator: fix tear-down race
    
    Do not release the minor number until after the device has been
    deregistered.
    
    Signed-off-by: Johan Hovold <johan@hovoldconsulting.com>
    Reviewed-by: Viresh Kumar <viresh.kumar@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@google.com>

diff --git a/drivers/staging/greybus/vibrator.c b/drivers/staging/greybus/vibrator.c
index 96d649acf122..fd40cda565e4 100644
--- a/drivers/staging/greybus/vibrator.c
+++ b/drivers/staging/greybus/vibrator.c
@@ -148,8 +148,8 @@ static void gb_vibrator_connection_exit(struct gb_connection *connection)
 #if LINUX_VERSION_CODE <= KERNEL_VERSION(3,11,0)
 	sysfs_remove_group(&vib->dev->kobj, vibrator_groups[0]);
 #endif
-	ida_simple_remove(&minors, vib->minor);
 	device_unregister(vib->dev);
+	ida_simple_remove(&minors, vib->minor);
 	kfree(vib);
 }
 

commit a404504a8651250b2632cf62356de6c77a923430
Author: Viresh Kumar <viresh.kumar@linaro.org>
Date:   Tue Aug 11 07:36:13 2015 +0530

    greybus: vibrator: Drop get_version support
    
    This is done from a common place now, no need to replicate it.
    
    Signed-off-by: Viresh Kumar <viresh.kumar@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@google.com>

diff --git a/drivers/staging/greybus/vibrator.c b/drivers/staging/greybus/vibrator.c
index df9c4b14c707..96d649acf122 100644
--- a/drivers/staging/greybus/vibrator.c
+++ b/drivers/staging/greybus/vibrator.c
@@ -19,8 +19,6 @@ struct gb_vibrator_device {
 	struct gb_connection	*connection;
 	struct device		*dev;
 	int			minor;		/* vibrator minor number */
-	u8			version_major;
-	u8			version_minor;
 };
 
 /* Version of the Greybus vibrator protocol we support */
@@ -28,8 +26,6 @@ struct gb_vibrator_device {
 #define	GB_VIBRATOR_VERSION_MINOR		0x01
 
 /* Greybus Vibrator operation types */
-#define	GB_VIBRATOR_TYPE_INVALID		0x00
-#define	GB_VIBRATOR_TYPE_PROTOCOL_VERSION	0x01
 #define	GB_VIBRATOR_TYPE_ON			0x02
 #define	GB_VIBRATOR_TYPE_OFF			0x03
 
@@ -37,9 +33,6 @@ struct gb_vibrator_on_request {
 	__le16	timeout_ms;
 };
 
-/* Define get_version() routine */
-define_get_version(gb_vibrator_device, VIBRATOR);
-
 static int turn_on(struct gb_vibrator_device *vib, u16 timeout_ms)
 {
 	struct gb_vibrator_on_request request;
@@ -108,10 +101,6 @@ static int gb_vibrator_connection_init(struct gb_connection *connection)
 	vib->connection = connection;
 	connection->private = vib;
 
-	retval = get_version(vib);
-	if (retval)
-		goto error;
-
 	/*
 	 * For now we create a device in sysfs for the vibrator, but odds are
 	 * there is a "real" device somewhere in the kernel for this, but I

commit f0a1698f18722fccb920448285b8fc87f793870a
Author: Viresh Kumar <viresh.kumar@linaro.org>
Date:   Sat Aug 8 10:25:41 2015 +0530

    greybus: vibrator: Use (already defined) major/minor macros
    
    We already have macros for these, use them instead of writing fixed
    values.
    
    Signed-off-by: Viresh Kumar <viresh.kumar@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@google.com>

diff --git a/drivers/staging/greybus/vibrator.c b/drivers/staging/greybus/vibrator.c
index 62b3552006fc..df9c4b14c707 100644
--- a/drivers/staging/greybus/vibrator.c
+++ b/drivers/staging/greybus/vibrator.c
@@ -167,8 +167,8 @@ static void gb_vibrator_connection_exit(struct gb_connection *connection)
 static struct gb_protocol vibrator_protocol = {
 	.name			= "vibrator",
 	.id			= GREYBUS_PROTOCOL_VIBRATOR,
-	.major			= 0,
-	.minor			= 1,
+	.major			= GB_VIBRATOR_VERSION_MAJOR,
+	.minor			= GB_VIBRATOR_VERSION_MINOR,
 	.connection_init	= gb_vibrator_connection_init,
 	.connection_exit	= gb_vibrator_connection_exit,
 	.request_recv		= NULL,	/* no incoming requests */

commit 5c1ac6945526c76258869c8c04632ab5ae61bdab
Author: Greg Kroah-Hartman <gregkh@google.com>
Date:   Wed Jul 8 10:44:09 2015 -0700

    greybus: properly cleanup ida and idr structures when shutting down
    
    idr and ida structures have internal memory allocated that needs to be
    freed when modules are removed.  So call the proper idr_destroy() or
    ida_destroy() functions on the module exit path to free the memory.
    
    Signed-off-by: Greg Kroah-Hartman <gregkh@google.com>
    Reviewed-by: Alex Elder <elder@linaro.org>

diff --git a/drivers/staging/greybus/vibrator.c b/drivers/staging/greybus/vibrator.c
index 20f09bba5fac..62b3552006fc 100644
--- a/drivers/staging/greybus/vibrator.c
+++ b/drivers/staging/greybus/vibrator.c
@@ -190,6 +190,7 @@ static __exit void protocol_exit(void)
 {
 	gb_protocol_deregister(&vibrator_protocol);
 	class_unregister(&vibrator_class);
+	ida_destroy(&minors);
 }
 module_exit(protocol_exit);
 

commit 6b17492eee00cbaac20b8431e8fa63f137a9ca5c
Author: Greg Kroah-Hartman <gregkh@google.com>
Date:   Thu May 14 10:39:35 2015 -0700

    greybus: vibrator: convert idr to be an ida
    
    All we need is a simple ida, so use that interface instead of the more
    "complex" idr one.  Bonus is we don't need to fix the locking issue I
    forgot about when using an idr, as ida has one built-in.
    
    Signed-off-by: Greg Kroah-Hartman <gregkh@google.com>
    Reviewed-by: Alex Elder <elder@linaro.org>

diff --git a/drivers/staging/greybus/vibrator.c b/drivers/staging/greybus/vibrator.c
index aefd2cd3f18e..20f09bba5fac 100644
--- a/drivers/staging/greybus/vibrator.c
+++ b/drivers/staging/greybus/vibrator.c
@@ -93,7 +93,7 @@ static struct class vibrator_class = {
 #endif
 };
 
-static DEFINE_IDR(minors);
+static DEFINE_IDA(minors);
 
 static int gb_vibrator_connection_init(struct gb_connection *connection)
 {
@@ -117,7 +117,7 @@ static int gb_vibrator_connection_init(struct gb_connection *connection)
 	 * there is a "real" device somewhere in the kernel for this, but I
 	 * can't find it at the moment...
 	 */
-	vib->minor = idr_alloc(&minors, vib, 0, 0, GFP_KERNEL);
+	vib->minor = ida_simple_get(&minors, 0, 0, GFP_KERNEL);
 	if (vib->minor < 0) {
 		retval = vib->minor;
 		goto error;
@@ -126,7 +126,7 @@ static int gb_vibrator_connection_init(struct gb_connection *connection)
 			    "vibrator%d", vib->minor);
 	if (IS_ERR(dev)) {
 		retval = -EINVAL;
-		goto err_idr_remove;
+		goto err_ida_remove;
 	}
 	vib->dev = dev;
 
@@ -139,14 +139,14 @@ static int gb_vibrator_connection_init(struct gb_connection *connection)
 	retval = sysfs_create_group(&dev->kobj, vibrator_groups[0]);
 	if (retval) {
 		device_unregister(dev);
-		goto err_idr_remove;
+		goto err_ida_remove;
 	}
 #endif
 
 	return 0;
 
-err_idr_remove:
-	idr_remove(&minors, vib->minor);
+err_ida_remove:
+	ida_simple_remove(&minors, vib->minor);
 error:
 	kfree(vib);
 	return retval;
@@ -159,7 +159,7 @@ static void gb_vibrator_connection_exit(struct gb_connection *connection)
 #if LINUX_VERSION_CODE <= KERNEL_VERSION(3,11,0)
 	sysfs_remove_group(&vib->dev->kobj, vibrator_groups[0]);
 #endif
-	idr_remove(&minors, vib->minor);
+	ida_simple_remove(&minors, vib->minor);
 	device_unregister(vib->dev);
 	kfree(vib);
 }

commit 6d653370c0a67ff9b9b0d8249182d537859b528c
Author: Alex Elder <elder@linaro.org>
Date:   Thu May 7 13:03:52 2015 -0500

    greybus: eliminate extra response flag definitions
    
    All protocols use the same value to distinguish between request and
    response message types.  This is a requirement.
    
    Use GB_MESSAGE_TYPE_RESPONSE rather than GB_OPERATION_TYPE_RESPONSE
    for the name of the flag used to distiguish between request and
    response messages.
    
    Get rid of the redundant response flag definitions that are
    associated with specific protocols.
    
    Describe the symbolic values as "operation types" rather than
    "message types" where they are defined.  The message type for a
    request is the same as the operation type; the message type for a
    response is the operation type OR'd with GB_MESSAGE_TYPE_RESPONSE.
    
    Signed-off-by: Alex Elder <elder@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@google.com>

diff --git a/drivers/staging/greybus/vibrator.c b/drivers/staging/greybus/vibrator.c
index 2943a9b381c6..aefd2cd3f18e 100644
--- a/drivers/staging/greybus/vibrator.c
+++ b/drivers/staging/greybus/vibrator.c
@@ -27,12 +27,11 @@ struct gb_vibrator_device {
 #define	GB_VIBRATOR_VERSION_MAJOR		0x00
 #define	GB_VIBRATOR_VERSION_MINOR		0x01
 
-/* Greybus Vibrator request types */
+/* Greybus Vibrator operation types */
 #define	GB_VIBRATOR_TYPE_INVALID		0x00
 #define	GB_VIBRATOR_TYPE_PROTOCOL_VERSION	0x01
 #define	GB_VIBRATOR_TYPE_ON			0x02
 #define	GB_VIBRATOR_TYPE_OFF			0x03
-#define	GB_VIBRATOR_TYPE_RESPONSE		0x80	/* OR'd with rest */
 
 struct gb_vibrator_on_request {
 	__le16	timeout_ms;

commit 0d34be75878093bef5055311c254ae3ff459fd8f
Author: Viresh Kumar <viresh.kumar@linaro.org>
Date:   Tue Mar 24 20:14:28 2015 +0530

    greybus: Greybus: Place module_init/exit() right after respective routines
    
    As mentioned in kernel coding guidelines.
    
    Signed-off-by: Viresh Kumar <viresh.kumar@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <greg@kroah.com>

diff --git a/drivers/staging/greybus/vibrator.c b/drivers/staging/greybus/vibrator.c
index c92c69ef3025..2943a9b381c6 100644
--- a/drivers/staging/greybus/vibrator.c
+++ b/drivers/staging/greybus/vibrator.c
@@ -185,14 +185,13 @@ static __init int protocol_init(void)
 
 	return gb_protocol_register(&vibrator_protocol);
 }
+module_init(protocol_init);
 
 static __exit void protocol_exit(void)
 {
 	gb_protocol_deregister(&vibrator_protocol);
 	class_unregister(&vibrator_class);
 }
-
-module_init(protocol_init);
 module_exit(protocol_exit);
 
 MODULE_LICENSE("GPL v2");

commit deeb57f5bd990f747815216ab772e92413848f6e
Author: Johan Hovold <johan@hovoldconsulting.com>
Date:   Tue Mar 17 10:55:51 2015 +0100

    greybus: vibrator: fix memory leak in error path
    
    Fix memory leak in connection_init error path.
    
    Signed-off-by: Johan Hovold <johan@hovoldconsulting.com>
    Reviewed-by: Viresh Kumar <viresh.kumar@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <greg@kroah.com>

diff --git a/drivers/staging/greybus/vibrator.c b/drivers/staging/greybus/vibrator.c
index b6ec9f2373bb..c92c69ef3025 100644
--- a/drivers/staging/greybus/vibrator.c
+++ b/drivers/staging/greybus/vibrator.c
@@ -127,7 +127,7 @@ static int gb_vibrator_connection_init(struct gb_connection *connection)
 			    "vibrator%d", vib->minor);
 	if (IS_ERR(dev)) {
 		retval = -EINVAL;
-		goto error;
+		goto err_idr_remove;
 	}
 	vib->dev = dev;
 
@@ -140,12 +140,14 @@ static int gb_vibrator_connection_init(struct gb_connection *connection)
 	retval = sysfs_create_group(&dev->kobj, vibrator_groups[0]);
 	if (retval) {
 		device_unregister(dev);
-		goto error;
+		goto err_idr_remove;
 	}
 #endif
 
 	return 0;
 
+err_idr_remove:
+	idr_remove(&minors, vib->minor);
 error:
 	kfree(vib);
 	return retval;

commit 89210f64bae6bd6bba90d9e08d1b88b4ba103f59
Author: Viresh Kumar <viresh.kumar@linaro.org>
Date:   Wed Jan 21 18:12:37 2015 +0530

    greybus: remove unused version-response structs
    
    These aren't used anymore and so can be removed.
    
    Signed-off-by: Viresh Kumar <viresh.kumar@linaro.org>
    Reviewed-by: Alex Elder <elder@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <greg@kroah.com>

diff --git a/drivers/staging/greybus/vibrator.c b/drivers/staging/greybus/vibrator.c
index 141ccdbf7b64..b6ec9f2373bb 100644
--- a/drivers/staging/greybus/vibrator.c
+++ b/drivers/staging/greybus/vibrator.c
@@ -34,11 +34,6 @@ struct gb_vibrator_device {
 #define	GB_VIBRATOR_TYPE_OFF			0x03
 #define	GB_VIBRATOR_TYPE_RESPONSE		0x80	/* OR'd with rest */
 
-struct gb_vibrator_proto_version_response {
-	__u8	major;
-	__u8	minor;
-};
-
 struct gb_vibrator_on_request {
 	__le16	timeout_ms;
 };

commit 36e79dec96f652110ae2b06bfcf9e67e1b770787
Author: Viresh Kumar <viresh.kumar@linaro.org>
Date:   Wed Jan 21 18:12:36 2015 +0530

    greybus: create get_version() routines with the help of a macro
    
    This gets rid of lots of duplication of code.
    
    Signed-off-by: Viresh Kumar <viresh.kumar@linaro.org>
    Reviewed-by: Alex Elder <elder@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <greg@kroah.com>

diff --git a/drivers/staging/greybus/vibrator.c b/drivers/staging/greybus/vibrator.c
index b5332df7039c..141ccdbf7b64 100644
--- a/drivers/staging/greybus/vibrator.c
+++ b/drivers/staging/greybus/vibrator.c
@@ -43,34 +43,8 @@ struct gb_vibrator_on_request {
 	__le16	timeout_ms;
 };
 
-/*
- * This request only uses the connection field, and if successful,
- * fills in the major and minor protocol version of the target.
- */
-static int get_version(struct gb_vibrator_device *vib)
-{
-	struct gb_connection *connection = vib->connection;
-	struct gb_vibrator_proto_version_response version_response;
-	int retval;
-
-	retval = gb_operation_sync(connection,
-				   GB_VIBRATOR_TYPE_PROTOCOL_VERSION,
-				   NULL, 0,
-				   &version_response, sizeof(version_response));
-	if (retval)
-		return retval;
-
-	if (version_response.major > GB_VIBRATOR_VERSION_MAJOR) {
-		dev_err(&connection->dev,
-			"unsupported major version (%hhu > %hhu)\n",
-			version_response.major, GB_VIBRATOR_VERSION_MAJOR);
-		return -ENOTSUPP;
-	}
-
-	vib->version_major = version_response.major;
-	vib->version_minor = version_response.minor;
-	return 0;
-}
+/* Define get_version() routine */
+define_get_version(gb_vibrator_device, VIBRATOR);
 
 static int turn_on(struct gb_vibrator_device *vib, u16 timeout_ms)
 {

commit 98abb4146ed31f1ec97145ef808d864096d31c4b
Author: Viresh Kumar <viresh.kumar@linaro.org>
Date:   Wed Jan 21 16:10:41 2015 +0530

    greybus: Remove "gb-" prefix from .c files
    
    Some files are still prefixed with "gb-" with the reasoning that the modules
    would be named so, i.e.  gb-*.ko. But this can be done by playing a bit in
    Makefile instead and keep uniform naming of .c files.
    
    Lets try it.
    
    Signed-off-by: Viresh Kumar <viresh.kumar@linaro.org>
    Reviewed-by: Alex Elder <elder@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <greg@kroah.com>

diff --git a/drivers/staging/greybus/vibrator.c b/drivers/staging/greybus/vibrator.c
new file mode 100644
index 000000000000..b5332df7039c
--- /dev/null
+++ b/drivers/staging/greybus/vibrator.c
@@ -0,0 +1,227 @@
+/*
+ * Greybus Vibrator protocol driver.
+ *
+ * Copyright 2014 Google Inc.
+ * Copyright 2014 Linaro Ltd.
+ *
+ * Released under the GPLv2 only.
+ */
+
+#include <linux/kernel.h>
+#include <linux/module.h>
+#include <linux/slab.h>
+#include <linux/device.h>
+#include <linux/kdev_t.h>
+#include <linux/idr.h>
+#include "greybus.h"
+
+struct gb_vibrator_device {
+	struct gb_connection	*connection;
+	struct device		*dev;
+	int			minor;		/* vibrator minor number */
+	u8			version_major;
+	u8			version_minor;
+};
+
+/* Version of the Greybus vibrator protocol we support */
+#define	GB_VIBRATOR_VERSION_MAJOR		0x00
+#define	GB_VIBRATOR_VERSION_MINOR		0x01
+
+/* Greybus Vibrator request types */
+#define	GB_VIBRATOR_TYPE_INVALID		0x00
+#define	GB_VIBRATOR_TYPE_PROTOCOL_VERSION	0x01
+#define	GB_VIBRATOR_TYPE_ON			0x02
+#define	GB_VIBRATOR_TYPE_OFF			0x03
+#define	GB_VIBRATOR_TYPE_RESPONSE		0x80	/* OR'd with rest */
+
+struct gb_vibrator_proto_version_response {
+	__u8	major;
+	__u8	minor;
+};
+
+struct gb_vibrator_on_request {
+	__le16	timeout_ms;
+};
+
+/*
+ * This request only uses the connection field, and if successful,
+ * fills in the major and minor protocol version of the target.
+ */
+static int get_version(struct gb_vibrator_device *vib)
+{
+	struct gb_connection *connection = vib->connection;
+	struct gb_vibrator_proto_version_response version_response;
+	int retval;
+
+	retval = gb_operation_sync(connection,
+				   GB_VIBRATOR_TYPE_PROTOCOL_VERSION,
+				   NULL, 0,
+				   &version_response, sizeof(version_response));
+	if (retval)
+		return retval;
+
+	if (version_response.major > GB_VIBRATOR_VERSION_MAJOR) {
+		dev_err(&connection->dev,
+			"unsupported major version (%hhu > %hhu)\n",
+			version_response.major, GB_VIBRATOR_VERSION_MAJOR);
+		return -ENOTSUPP;
+	}
+
+	vib->version_major = version_response.major;
+	vib->version_minor = version_response.minor;
+	return 0;
+}
+
+static int turn_on(struct gb_vibrator_device *vib, u16 timeout_ms)
+{
+	struct gb_vibrator_on_request request;
+
+	request.timeout_ms = cpu_to_le16(timeout_ms);
+	return gb_operation_sync(vib->connection, GB_VIBRATOR_TYPE_ON,
+				 &request, sizeof(request), NULL, 0);
+}
+
+static int turn_off(struct gb_vibrator_device *vib)
+{
+	return gb_operation_sync(vib->connection, GB_VIBRATOR_TYPE_OFF,
+				 NULL, 0, NULL, 0);
+}
+
+static ssize_t timeout_store(struct device *dev, struct device_attribute *attr,
+			     const char *buf, size_t count)
+{
+	struct gb_vibrator_device *vib = dev_get_drvdata(dev);
+	unsigned long val;
+	int retval;
+
+	retval = kstrtoul(buf, 10, &val);
+	if (retval < 0) {
+		dev_err(dev, "could not parse timeout value %d\n", retval);
+		return retval;
+	}
+
+	if (val)
+		retval = turn_on(vib, (u16)val);
+	else
+		retval = turn_off(vib);
+	if (retval)
+		return retval;
+
+	return count;
+}
+static DEVICE_ATTR_WO(timeout);
+
+static struct attribute *vibrator_attrs[] = {
+	&dev_attr_timeout.attr,
+	NULL,
+};
+ATTRIBUTE_GROUPS(vibrator);
+
+static struct class vibrator_class = {
+	.name		= "vibrator",
+	.owner		= THIS_MODULE,
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(3,11,0)
+	.dev_groups	= vibrator_groups,
+#endif
+};
+
+static DEFINE_IDR(minors);
+
+static int gb_vibrator_connection_init(struct gb_connection *connection)
+{
+	struct gb_vibrator_device *vib;
+	struct device *dev;
+	int retval;
+
+	vib = kzalloc(sizeof(*vib), GFP_KERNEL);
+	if (!vib)
+		return -ENOMEM;
+
+	vib->connection = connection;
+	connection->private = vib;
+
+	retval = get_version(vib);
+	if (retval)
+		goto error;
+
+	/*
+	 * For now we create a device in sysfs for the vibrator, but odds are
+	 * there is a "real" device somewhere in the kernel for this, but I
+	 * can't find it at the moment...
+	 */
+	vib->minor = idr_alloc(&minors, vib, 0, 0, GFP_KERNEL);
+	if (vib->minor < 0) {
+		retval = vib->minor;
+		goto error;
+	}
+	dev = device_create(&vibrator_class, &connection->dev, MKDEV(0, 0), vib,
+			    "vibrator%d", vib->minor);
+	if (IS_ERR(dev)) {
+		retval = -EINVAL;
+		goto error;
+	}
+	vib->dev = dev;
+
+#if LINUX_VERSION_CODE <= KERNEL_VERSION(3,11,0)
+	/*
+	 * Newer kernels handle this in a race-free manner, by the dev_groups
+	 * field in the struct class up above.  But for older kernels, we need
+	 * to "open code this :(
+	 */
+	retval = sysfs_create_group(&dev->kobj, vibrator_groups[0]);
+	if (retval) {
+		device_unregister(dev);
+		goto error;
+	}
+#endif
+
+	return 0;
+
+error:
+	kfree(vib);
+	return retval;
+}
+
+static void gb_vibrator_connection_exit(struct gb_connection *connection)
+{
+	struct gb_vibrator_device *vib = connection->private;
+
+#if LINUX_VERSION_CODE <= KERNEL_VERSION(3,11,0)
+	sysfs_remove_group(&vib->dev->kobj, vibrator_groups[0]);
+#endif
+	idr_remove(&minors, vib->minor);
+	device_unregister(vib->dev);
+	kfree(vib);
+}
+
+static struct gb_protocol vibrator_protocol = {
+	.name			= "vibrator",
+	.id			= GREYBUS_PROTOCOL_VIBRATOR,
+	.major			= 0,
+	.minor			= 1,
+	.connection_init	= gb_vibrator_connection_init,
+	.connection_exit	= gb_vibrator_connection_exit,
+	.request_recv		= NULL,	/* no incoming requests */
+};
+
+static __init int protocol_init(void)
+{
+	int retval;
+
+	retval = class_register(&vibrator_class);
+	if (retval)
+		return retval;
+
+	return gb_protocol_register(&vibrator_protocol);
+}
+
+static __exit void protocol_exit(void)
+{
+	gb_protocol_deregister(&vibrator_protocol);
+	class_unregister(&vibrator_class);
+}
+
+module_init(protocol_init);
+module_exit(protocol_exit);
+
+MODULE_LICENSE("GPL v2");
