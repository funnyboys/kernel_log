commit 6f48844e3f16b7d8a1f9a1a11bd9a11089a5292f
Author: Jeff Skirvin <jeffrey.d.skirvin@intel.com>
Date:   Thu Mar 8 22:41:48 2012 -0800

    isci: Manage the link layer hang detect timer for RNC suspensions.
    
    For STP devices under certain protocol conditions, an RNC will not
    suspend until the current transfer state is broken with a SYNC/ESC
    sequence from the SCU.  The SYNC/ESC driven by expiration of the
    SCU link layer hang detect timer, which has too small a dynamic
    range to support slow SATA devices, so normally it is disabled.
    
    This change enables the timer with the minimum period at the point
    when the suspension is requested.
    
    Note that there is potential collateral damage to other open
    connections to slow SATA devices on the same port, since there
    is no alternative but to enable the LLHANG timer on every phy in
    the port for the current suspension request - there is no way to
    tell on which phy the RNC in question is currently active.
    
    Signed-off-by: Jeff Skirvin <jeffrey.d.skirvin@intel.com>
    Signed-off-by: Dan Williams <dan.j.williams@intel.com>

diff --git a/drivers/scsi/isci/port.h b/drivers/scsi/isci/port.h
index f8bd1e8dbfea..861e8f72811b 100644
--- a/drivers/scsi/isci/port.h
+++ b/drivers/scsi/isci/port.h
@@ -111,6 +111,7 @@ struct isci_port {
 	u16 reserved_tag;
 	u32 started_request_count;
 	u32 assigned_device_count;
+	u32 hang_detect_users;
 	u32 not_ready_reason;
 	struct isci_phy *phy_table[SCI_MAX_PHYS];
 	struct isci_host *owning_controller;
@@ -269,6 +270,10 @@ void sci_port_get_attached_sas_address(
 	struct isci_port *iport,
 	struct sci_sas_address *sas_address);
 
+void sci_port_set_hang_detection_timeout(
+	struct isci_port *isci_port,
+	u32 timeout);
+
 void isci_port_formed(struct asd_sas_phy *);
 void isci_port_deformed(struct asd_sas_phy *);
 

commit ae904d15cf344bcb426f63982016f6bacc45825b
Author: Dan Williams <dan.j.williams@intel.com>
Date:   Fri Feb 17 16:30:47 2012 -0800

    isci: kill isci_port.domain_dev_list
    
    Another unused field, and isci_port_init is overkill.
    
    Signed-off-by: Dan Williams <dan.j.williams@intel.com>

diff --git a/drivers/scsi/isci/port.h b/drivers/scsi/isci/port.h
index 6b56240c2051..f8bd1e8dbfea 100644
--- a/drivers/scsi/isci/port.h
+++ b/drivers/scsi/isci/port.h
@@ -97,7 +97,6 @@ enum isci_status {
 struct isci_port {
 	struct isci_host *isci_host;
 	struct list_head remote_dev_list;
-	struct list_head domain_dev_list;
 	#define IPORT_RESET_PENDING 0
 	unsigned long state;
 	enum sci_status hard_reset_status;
@@ -273,11 +272,6 @@ void sci_port_get_attached_sas_address(
 void isci_port_formed(struct asd_sas_phy *);
 void isci_port_deformed(struct asd_sas_phy *);
 
-void isci_port_init(
-	struct isci_port *port,
-	struct isci_host *host,
-	int index);
-
 int isci_port_perform_hard_reset(struct isci_host *ihost, struct isci_port *iport,
 				 struct isci_phy *iphy);
 int isci_ata_check_ready(struct domain_device *dev);

commit d7a0ccdd9bd78b5b74d2963ec7ab67c9d896902a
Author: Dan Williams <dan.j.williams@intel.com>
Date:   Fri Feb 10 01:18:44 2012 -0800

    [SCSI] isci: debug, provide state-enum-to-string conversions
    
    Debugging the driver requires tracing the state transtions and tracing
    state names is less work than decoding numbers.
    
    Signed-off-by: Dan Williams <dan.j.williams@intel.com>
    Signed-off-by: James Bottomley <JBottomley@Parallels.com>

diff --git a/drivers/scsi/isci/port.h b/drivers/scsi/isci/port.h
index 321b987d582f..6b56240c2051 100644
--- a/drivers/scsi/isci/port.h
+++ b/drivers/scsi/isci/port.h
@@ -144,70 +144,47 @@ struct sci_port_properties {
 };
 
 /**
- * enum sci_port_states - This enumeration depicts all the states for the
- *    common port state machine.
- *
- *
+ * enum sci_port_states - port state machine states
+ * @SCI_PORT_STOPPED: port has successfully been stopped.  In this state
+ *		      no new IO operations are permitted.  This state is
+ *		      entered from the STOPPING state.
+ * @SCI_PORT_STOPPING: port is in the process of stopping.  In this
+ *		       state no new IO operations are permitted, but
+ *		       existing IO operations are allowed to complete.
+ *		       This state is entered from the READY state.
+ * @SCI_PORT_READY: port is now ready.  Thus, the user is able to
+ *		    perform IO operations on this port. This state is
+ *		    entered from the STARTING state.
+ * @SCI_PORT_SUB_WAITING: port is started and ready but has no active
+ *			  phys.
+ * @SCI_PORT_SUB_OPERATIONAL: port is started and ready and there is at
+ *			      least one phy operational.
+ * @SCI_PORT_SUB_CONFIGURING: port is started and there was an
+ *			      add/remove phy event.  This state is only
+ *			      used in Automatic Port Configuration Mode
+ *			      (APC)
+ * @SCI_PORT_RESETTING: port is in the process of performing a hard
+ *			reset.  Thus, the user is unable to perform IO
+ *			operations on this port.  This state is entered
+ *			from the READY state.
+ * @SCI_PORT_FAILED: port has failed a reset request.  This state is
+ *		     entered when a port reset request times out. This
+ *		     state is entered from the RESETTING state.
  */
-enum sci_port_states {
-	/**
-	 * This state indicates that the port has successfully been stopped.
-	 * In this state no new IO operations are permitted.
-	 * This state is entered from the STOPPING state.
-	 */
-	SCI_PORT_STOPPED,
-
-	/**
-	 * This state indicates that the port is in the process of stopping.
-	 * In this state no new IO operations are permitted, but existing IO
-	 * operations are allowed to complete.
-	 * This state is entered from the READY state.
-	 */
-	SCI_PORT_STOPPING,
-
-	/**
-	 * This state indicates the port is now ready.  Thus, the user is
-	 * able to perform IO operations on this port.
-	 * This state is entered from the STARTING state.
-	 */
-	SCI_PORT_READY,
-
-	/**
-	 * The substate where the port is started and ready but has no
-	 * active phys.
-	 */
-	SCI_PORT_SUB_WAITING,
-
-	/**
-	 * The substate where the port is started and ready and there is
-	 * at least one phy operational.
-	 */
-	SCI_PORT_SUB_OPERATIONAL,
-
-	/**
-	 * The substate where the port is started and there was an
-	 * add/remove phy event.  This state is only used in Automatic
-	 * Port Configuration Mode (APC)
-	 */
-	SCI_PORT_SUB_CONFIGURING,
-
-	/**
-	 * This state indicates the port is in the process of performing a hard
-	 * reset.  Thus, the user is unable to perform IO operations on this
-	 * port.
-	 * This state is entered from the READY state.
-	 */
-	SCI_PORT_RESETTING,
-
-	/**
-	 * This state indicates the port has failed a reset request.  This state
-	 * is entered when a port reset request times out.
-	 * This state is entered from the RESETTING state.
-	 */
-	SCI_PORT_FAILED,
-
-
-};
+#define PORT_STATES {\
+	C(PORT_STOPPED),\
+	C(PORT_STOPPING),\
+	C(PORT_READY),\
+	C(PORT_SUB_WAITING),\
+	C(PORT_SUB_OPERATIONAL),\
+	C(PORT_SUB_CONFIGURING),\
+	C(PORT_RESETTING),\
+	C(PORT_FAILED),\
+	}
+#undef C
+#define C(a) SCI_##a
+enum sci_port_states PORT_STATES;
+#undef C
 
 static inline void sci_port_decrement_request_count(struct isci_port *iport)
 {

commit 687833a03baae8308900486fa6499ef955fd07a9
Author: Dan Williams <dan.j.williams@intel.com>
Date:   Thu Nov 17 18:01:38 2011 -0800

    [SCSI] isci: ->lldd_ata_check_ready handler
    
    Report to libata whether the link to the given domain_device is up and the
    signature fis has been received.
    
    Signed-off-by: Dan Williams <dan.j.williams@intel.com>
    Signed-off-by: James Bottomley <JBottomley@Parallels.com>

diff --git a/drivers/scsi/isci/port.h b/drivers/scsi/isci/port.h
index a0dcdaeac3b2..321b987d582f 100644
--- a/drivers/scsi/isci/port.h
+++ b/drivers/scsi/isci/port.h
@@ -303,4 +303,5 @@ void isci_port_init(
 
 int isci_port_perform_hard_reset(struct isci_host *ihost, struct isci_port *iport,
 				 struct isci_phy *iphy);
+int isci_ata_check_ready(struct domain_device *dev);
 #endif /* !defined(_ISCI_PORT_H_) */

commit 9277699121b81891e303ada0a53fa1d04b7ffe72
Author: Dan Williams <dan.j.williams@intel.com>
Date:   Wed Nov 30 11:57:34 2011 -0800

    [SCSI] isci: fix interpretation of "hard" reset
    
    A hard reset to isci in the direct-attached case is one where the driver
    internally manages debouncing the link.  In the sas-expander-attached
    case a hard reset is one that clears affiliations.  The driver should
    not be prematurely dropping affiliations at run time, that decision (to
    force expander hard resets to ata devices) is left to userspace to
    manage.  So, arrange for I_T_nexus resets to be sas-link-resets in the
    expander-attached case and isci-hard-resets in the direct-attached case.
    
    Signed-off-by: Dan Williams <dan.j.williams@intel.com>
    Signed-off-by: James Bottomley <JBottomley@Parallels.com>

diff --git a/drivers/scsi/isci/port.h b/drivers/scsi/isci/port.h
index 265972939e3a..a0dcdaeac3b2 100644
--- a/drivers/scsi/isci/port.h
+++ b/drivers/scsi/isci/port.h
@@ -98,7 +98,8 @@ struct isci_port {
 	struct isci_host *isci_host;
 	struct list_head remote_dev_list;
 	struct list_head domain_dev_list;
-	struct completion hard_reset_complete;
+	#define IPORT_RESET_PENDING 0
+	unsigned long state;
 	enum sci_status hard_reset_status;
 	struct sci_base_state_machine sm;
 	bool ready_exit;

commit fca4ecbdc440337b3c257b38c2f4cc8d0ca0286c
Author: Dan Williams <dan.j.williams@intel.com>
Date:   Tue Jan 3 23:26:15 2012 -0800

    [SCSI] isci: kill isci_port->status
    
    It only tracks whether the port is stopping in order to gate new devices
    being discovered while the port is stopping.  However, since the check
    and subsequent handling is unlocked there is nothing to stop the port
    from going down immediately after the check.
    
    Driver is already prepared to handle devices arriving on stale ports,
    and those will be cleaned up by an eventual ->lldd_dev_gone()
    notification.
    
    Signed-off-by: Dan Williams <dan.j.williams@intel.com>
    Signed-off-by: James Bottomley <JBottomley@Parallels.com>

diff --git a/drivers/scsi/isci/port.h b/drivers/scsi/isci/port.h
index 6b42e84b6955..265972939e3a 100644
--- a/drivers/scsi/isci/port.h
+++ b/drivers/scsi/isci/port.h
@@ -95,10 +95,8 @@ enum isci_status {
  * @timer: timeout start/stop operations
  */
 struct isci_port {
-	enum isci_status status;
 	struct isci_host *isci_host;
 	struct list_head remote_dev_list;
-	spinlock_t state_lock;
 	struct list_head domain_dev_list;
 	struct completion hard_reset_complete;
 	enum sci_status hard_reset_status;
@@ -294,9 +292,6 @@ void sci_port_get_attached_sas_address(
 	struct isci_port *iport,
 	struct sci_sas_address *sas_address);
 
-enum isci_status isci_port_get_state(
-	struct isci_port *isci_port);
-
 void isci_port_formed(struct asd_sas_phy *);
 void isci_port_deformed(struct asd_sas_phy *);
 

commit c132f692085ac624d7c8123df781846c8dcb3166
Author: Dan Williams <dan.j.williams@intel.com>
Date:   Tue Jan 3 23:26:08 2012 -0800

    [SCSI] isci: kill iphy->isci_port lookups
    
    This field is a holdover from the OS abstraction conversion.  The stable
    phy to port lookups are done via iphy->ownining_port under scic_lock.
    After this conversion to use port->lldd_port the only volatile lookup is
    the initial lookup in isci_port_formed().  After that point any lookup
    via a successfully notified domain_device is guaranteed to be valid
    until the domain_device is destroyed.
    
    Delete ->start_complete as it is only set once and is set as a
    consequence of the port going link up, by definition of getting a port
    formed event the port is "ready".
    
    While we are correcting port lookups also move the asd_sas_port table
    out from under the isci_port.  This is to preclude any temptation to use
    container_of() to convert an asd_sas_port to an isci_port, the
    association is dynamic and under libsas control.
    
    Tested-by: Maciej Trela <maciej.trela@intel.com>
    [dmilburn@redhat.com: fix i686 compile error]
    Signed-off-by: Dan Williams <dan.j.williams@intel.com>
    Signed-off-by: James Bottomley <JBottomley@Parallels.com>

diff --git a/drivers/scsi/isci/port.h b/drivers/scsi/isci/port.h
index 08116090eb70..6b42e84b6955 100644
--- a/drivers/scsi/isci/port.h
+++ b/drivers/scsi/isci/port.h
@@ -97,11 +97,9 @@ enum isci_status {
 struct isci_port {
 	enum isci_status status;
 	struct isci_host *isci_host;
-	struct asd_sas_port sas_port;
 	struct list_head remote_dev_list;
 	spinlock_t state_lock;
 	struct list_head domain_dev_list;
-	struct completion start_complete;
 	struct completion hard_reset_complete;
 	enum sci_status hard_reset_status;
 	struct sci_base_state_machine sm;

commit 05b080fc933bb068b32fa119db00e8efcc10e3bd
Author: Marcin Tomczak <marcin.tomczak@intel.com>
Date:   Wed Jan 4 01:33:41 2012 -0800

    [SCSI] isci: fix, prevent port from getting stuck in the 'configuring' state
    
    When expander connected in x2 or x4 mode and with IO runnning, if
    a cable from wideport is plugged out from the phy, IO's start failing
    on all the targets.
    
    Observed that when cable is pulled with IO running, cominit is
    happening on all the links and IO's start dropping to 0 and eventually
    the whole IO fails. Second observation, target is trying to open and
    SCU is responding with "Open reject no destination".
    
    A cause of the problem is when the port went from the "ready
    configuring substate" back to "ready configuring substate" as a result
    of phy being pulled off, scic suspended the port task scheduler
    register. As a result no IO was allowed and in the "substate
    configuring enter" routine the IO never goes back to 0. As a result
    the port never comes out of "ready substate configuring".
    
    The patch adds a mechanism of activate and deactivate phy when a port
    link up, which fixes the problem.
    
    Signed-off-by: Bartek Nowakowski <bartek.nowakowski@intel.com>
    Signed-off-by: Maciej Trela <maciej.trela@intel.com>
    Signed-off-by: Marcin Tomczak <marcin.tomczak@intel.com>
    Signed-off-by: Dan Williams <dan.j.williams@intel.com>
    Signed-off-by: James Bottomley <JBottomley@Parallels.com>

diff --git a/drivers/scsi/isci/port.h b/drivers/scsi/isci/port.h
index b3a7f12803f5..08116090eb70 100644
--- a/drivers/scsi/isci/port.h
+++ b/drivers/scsi/isci/port.h
@@ -63,6 +63,9 @@
 
 #define SCIC_SDS_DUMMY_PORT   0xFF
 
+#define PF_NOTIFY (1 << 0)
+#define PF_RESUME (1 << 1)
+
 struct isci_phy;
 struct isci_host;
 
@@ -83,6 +86,8 @@ enum isci_status {
  * @logical_port_index: software port index
  * @physical_port_index: hardware port index
  * @active_phy_mask: identifies phy members
+ * @enabled_phy_mask: phy mask for the port
+ *                    that are already part of the port
  * @reserved_tag:
  * @reserved_rni: reserver for port task scheduler workaround
  * @started_request_count: reference count for outstanding commands
@@ -104,6 +109,7 @@ struct isci_port {
 	u8 logical_port_index;
 	u8 physical_port_index;
 	u8 active_phy_mask;
+	u8 enabled_phy_mask;
 	u8 last_active_phy;
 	u16 reserved_rni;
 	u16 reserved_tag;

commit 7e629841b8f8f7bc84d74de994d748b0a3282225
Author: Bartek Nowakowski <bartek.nowakowski@intel.com>
Date:   Wed Jan 4 01:33:20 2012 -0800

    [SCSI] isci: enable wide port targets
    
    Arrange for task_contexts prepared for the wide targets to account for
    all the attached phys in the port.
    
    Signed-off-by: Bartek Nowakowski <bartek.nowakowski@intel.com>
    Signed-off-by: Dan Williams <dan.j.williams@intel.com>
    Signed-off-by: James Bottomley <JBottomley@Parallels.com>

diff --git a/drivers/scsi/isci/port.h b/drivers/scsi/isci/port.h
index cb5ffbc38603..b3a7f12803f5 100644
--- a/drivers/scsi/isci/port.h
+++ b/drivers/scsi/isci/port.h
@@ -250,6 +250,10 @@ bool sci_port_link_detected(
 	struct isci_port *iport,
 	struct isci_phy *iphy);
 
+enum sci_status sci_port_get_properties(
+	struct isci_port *iport,
+	struct sci_port_properties *prop);
+
 enum sci_status sci_port_link_up(struct isci_port *iport,
 				      struct isci_phy *iphy);
 enum sci_status sci_port_link_down(struct isci_port *iport,

commit 52d74634335dfc0984ed955ed3c6ad6488495f96
Author: Dan Williams <dan.j.williams@intel.com>
Date:   Thu Oct 27 15:05:37 2011 -0700

    [SCSI] isci: revert bcn filtering
    
    The initial bcn filtering implementation was validated on a kernel
    baseline that predated the switch to new libata error handling.  Also,
    prior to that conversion we borrowed the mvsas MVS_DEV_EH approach to
    prevent the unwanted extra ap->ops->phy_reset(ap) that occurred in the
    ata_bus_probe() path.
    
    After the conversion to new libata eh resets at discovery are more
    frequent and get filtered prematurely by IDEV_EH.  The result is that
    our bcn filtering has been blocked from running and at discovery and it
    appears to stall discovery completion to the point of triggering hung
    task timeouts.  So, revert the implementation for now.  When it returns
    it will go into libsas proper.
    
    The domain rediscovery that takes place due to ->lldd_I_T_nexus_reset()
    events should now be properly waited for by the ata_port_wait_eh() call
    in ata_port_probe().  So the hard coded delay in the isci
    ->lldd_I_T_nexus_reset() and other libsas drivers should help debounce
    the libsas thread from seeing temporary device removals.
    
    Signed-off-by: Dan Williams <dan.j.williams@intel.com>
    Signed-off-by: James Bottomley <JBottomley@Parallels.com>

diff --git a/drivers/scsi/isci/port.h b/drivers/scsi/isci/port.h
index e84d22a309e3..cb5ffbc38603 100644
--- a/drivers/scsi/isci/port.h
+++ b/drivers/scsi/isci/port.h
@@ -77,7 +77,6 @@ enum isci_status {
 
 /**
  * struct isci_port - isci direct attached sas port object
- * @event: counts bcns and port stop events (for bcn filtering)
  * @ready_exit: several states constitute 'ready'. When exiting ready we
  *              need to take extra port-teardown actions that are
  *              skipped when exiting to another 'ready' state.
@@ -92,10 +91,6 @@ enum isci_status {
  */
 struct isci_port {
 	enum isci_status status;
-	#define IPORT_BCN_BLOCKED 0
-	#define IPORT_BCN_PENDING 1
-	unsigned long flags;
-	atomic_t event;
 	struct isci_host *isci_host;
 	struct asd_sas_port sas_port;
 	struct list_head remote_dev_list;

commit 8e35a1398c5db981cd1a2d7635de9c15dd648527
Author: Jeff Skirvin <jeffrey.d.skirvin@intel.com>
Date:   Thu Oct 27 15:05:32 2011 -0700

    [SCSI] isci: Fix hard reset timeout conditions.
    
    A hard reset can timeout before or after the last phy in the
    port goes away.  If after, then notify the OS that the last
    phy has failed.
    
    The recovery for the failed hard reset has been removed.
    This recovery code was unecessary in that the link would
    recover from the failure normally by a new link reset sequence
    or hotplug of the remote device.
    
    Signed-off-by: Jeff Skirvin <jeffrey.d.skirvin@intel.com>
    Signed-off-by: Dan Williams <dan.j.williams@intel.com>
    Signed-off-by: James Bottomley <JBottomley@Parallels.com>

diff --git a/drivers/scsi/isci/port.h b/drivers/scsi/isci/port.h
index b50ecd4e8f9c..e84d22a309e3 100644
--- a/drivers/scsi/isci/port.h
+++ b/drivers/scsi/isci/port.h
@@ -109,6 +109,7 @@ struct isci_port {
 	u8 logical_port_index;
 	u8 physical_port_index;
 	u8 active_phy_mask;
+	u8 last_active_phy;
 	u16 reserved_rni;
 	u16 reserved_tag;
 	u32 started_request_count;

commit 34a991587a5cc9f78960c2c9beea217866458c41
Author: Dan Williams <dan.j.williams@intel.com>
Date:   Fri Jul 1 02:25:15 2011 -0700

    isci: kill 'get/set' macros
    
    Most of these simple dereference macros are longer than their open coded
    equivalent.  Deleting enum sci_controller_mode is thrown in for good
    measure.
    
    Reported-by: Christoph Hellwig <hch@lst.de>
    Signed-off-by: Dan Williams <dan.j.williams@intel.com>

diff --git a/drivers/scsi/isci/port.h b/drivers/scsi/isci/port.h
index 4c4ab8126d9f..b50ecd4e8f9c 100644
--- a/drivers/scsi/isci/port.h
+++ b/drivers/scsi/isci/port.h
@@ -210,23 +210,6 @@ enum sci_port_states {
 
 };
 
-/**
- * sci_port_get_controller() -
- *
- * Helper macro to get the owning controller of this port
- */
-#define sci_port_get_controller(this_port)	\
-	((this_port)->owning_controller)
-
-/**
- * sci_port_get_index() -
- *
- * This macro returns the physical port index for this port object
- */
-#define sci_port_get_index(this_port) \
-	((this_port)->physical_port_index)
-
-
 static inline void sci_port_decrement_request_count(struct isci_port *iport)
 {
 	if (WARN_ONCE(iport->started_request_count == 0,

commit 89a7301f21fb00e753089671eb9e4132aab8ea08
Author: Dan Williams <dan.j.williams@intel.com>
Date:   Thu Jun 30 19:14:33 2011 -0700

    isci: retire scic_sds_ and scic_ prefixes
    
    The distinction between scic_sds_ scic_ and sci_ are no longer relevant
    so just unify the prefixes on sci_.  The distinction between isci_ and
    sci_ is historically significant, and useful for comparing the old
    'core' to the current Linux driver. 'sci_' represents the former core as
    well as the routines that are closer to the hardware and protocol than
    their 'isci_' brethren. sci == sas controller interface.
    
    Also unwind the 'sds1' out of the parameter structs.
    
    Reported-by: Christoph Hellwig <hch@lst.de>
    Signed-off-by: Dan Williams <dan.j.williams@intel.com>

diff --git a/drivers/scsi/isci/port.h b/drivers/scsi/isci/port.h
index 9a9be7b47b4a..4c4ab8126d9f 100644
--- a/drivers/scsi/isci/port.h
+++ b/drivers/scsi/isci/port.h
@@ -123,7 +123,7 @@ struct isci_port {
 	struct scu_viit_entry __iomem *viit_registers;
 };
 
-enum scic_port_not_ready_reason_code {
+enum sci_port_not_ready_reason_code {
 	SCIC_PORT_NOT_READY_NO_ACTIVE_PHYS,
 	SCIC_PORT_NOT_READY_HARD_RESET_REQUESTED,
 	SCIC_PORT_NOT_READY_INVALID_PORT_CONFIGURATION,
@@ -132,25 +132,25 @@ enum scic_port_not_ready_reason_code {
 	SCIC_PORT_NOT_READY_REASON_CODE_MAX
 };
 
-struct scic_port_end_point_properties {
+struct sci_port_end_point_properties {
 	struct sci_sas_address sas_address;
-	struct scic_phy_proto protocols;
+	struct sci_phy_proto protocols;
 };
 
-struct scic_port_properties {
+struct sci_port_properties {
 	u32 index;
-	struct scic_port_end_point_properties local;
-	struct scic_port_end_point_properties remote;
+	struct sci_port_end_point_properties local;
+	struct sci_port_end_point_properties remote;
 	u32 phy_mask;
 };
 
 /**
- * enum scic_sds_port_states - This enumeration depicts all the states for the
+ * enum sci_port_states - This enumeration depicts all the states for the
  *    common port state machine.
  *
  *
  */
-enum scic_sds_port_states {
+enum sci_port_states {
 	/**
 	 * This state indicates that the port has successfully been stopped.
 	 * In this state no new IO operations are permitted.
@@ -211,23 +211,23 @@ enum scic_sds_port_states {
 };
 
 /**
- * scic_sds_port_get_controller() -
+ * sci_port_get_controller() -
  *
  * Helper macro to get the owning controller of this port
  */
-#define scic_sds_port_get_controller(this_port)	\
+#define sci_port_get_controller(this_port)	\
 	((this_port)->owning_controller)
 
 /**
- * scic_sds_port_get_index() -
+ * sci_port_get_index() -
  *
  * This macro returns the physical port index for this port object
  */
-#define scic_sds_port_get_index(this_port) \
+#define sci_port_get_index(this_port) \
 	((this_port)->physical_port_index)
 
 
-static inline void scic_sds_port_decrement_request_count(struct isci_port *iport)
+static inline void sci_port_decrement_request_count(struct isci_port *iport)
 {
 	if (WARN_ONCE(iport->started_request_count == 0,
 		       "%s: tried to decrement started_request_count past 0!?",
@@ -237,79 +237,73 @@ static inline void scic_sds_port_decrement_request_count(struct isci_port *iport
 		iport->started_request_count--;
 }
 
-#define scic_sds_port_active_phy(port, phy) \
+#define sci_port_active_phy(port, phy) \
 	(((port)->active_phy_mask & (1 << (phy)->phy_index)) != 0)
 
-void scic_sds_port_construct(
+void sci_port_construct(
 	struct isci_port *iport,
 	u8 port_index,
 	struct isci_host *ihost);
 
-enum sci_status scic_sds_port_initialize(
-	struct isci_port *iport,
-	void __iomem *port_task_scheduler_registers,
-	void __iomem *port_configuration_regsiter,
-	void __iomem *viit_registers);
-
-enum sci_status scic_sds_port_start(struct isci_port *iport);
-enum sci_status scic_sds_port_stop(struct isci_port *iport);
+enum sci_status sci_port_start(struct isci_port *iport);
+enum sci_status sci_port_stop(struct isci_port *iport);
 
-enum sci_status scic_sds_port_add_phy(
+enum sci_status sci_port_add_phy(
 	struct isci_port *iport,
 	struct isci_phy *iphy);
 
-enum sci_status scic_sds_port_remove_phy(
+enum sci_status sci_port_remove_phy(
 	struct isci_port *iport,
 	struct isci_phy *iphy);
 
-void scic_sds_port_setup_transports(
+void sci_port_setup_transports(
 	struct isci_port *iport,
 	u32 device_id);
 
 void isci_port_bcn_enable(struct isci_host *, struct isci_port *);
 
-void scic_sds_port_deactivate_phy(
+void sci_port_deactivate_phy(
 	struct isci_port *iport,
 	struct isci_phy *iphy,
 	bool do_notify_user);
 
-bool scic_sds_port_link_detected(
+bool sci_port_link_detected(
 	struct isci_port *iport,
 	struct isci_phy *iphy);
 
-enum sci_status scic_sds_port_link_up(struct isci_port *iport,
+enum sci_status sci_port_link_up(struct isci_port *iport,
 				      struct isci_phy *iphy);
-enum sci_status scic_sds_port_link_down(struct isci_port *iport,
+enum sci_status sci_port_link_down(struct isci_port *iport,
 					struct isci_phy *iphy);
 
 struct isci_request;
 struct isci_remote_device;
-enum sci_status scic_sds_port_start_io(
+enum sci_status sci_port_start_io(
 	struct isci_port *iport,
 	struct isci_remote_device *idev,
 	struct isci_request *ireq);
 
-enum sci_status scic_sds_port_complete_io(
+enum sci_status sci_port_complete_io(
 	struct isci_port *iport,
 	struct isci_remote_device *idev,
 	struct isci_request *ireq);
 
-enum sas_linkrate scic_sds_port_get_max_allowed_speed(
+enum sas_linkrate sci_port_get_max_allowed_speed(
 	struct isci_port *iport);
 
-void scic_sds_port_broadcast_change_received(
+void sci_port_broadcast_change_received(
 	struct isci_port *iport,
 	struct isci_phy *iphy);
 
-bool scic_sds_port_is_valid_phy_assignment(
+bool sci_port_is_valid_phy_assignment(
 	struct isci_port *iport,
 	u32 phy_index);
 
-void scic_sds_port_get_sas_address(
+void sci_port_get_sas_address(
 	struct isci_port *iport,
 	struct sci_sas_address *sas_address);
 
-void scic_sds_port_get_attached_sas_address(
+void sci_port_get_attached_sas_address(
 	struct isci_port *iport,
 	struct sci_sas_address *sas_address);
 

commit d9dcb4ba791de2a06b19ac47cd61601cf3d4e208
Author: Dan Williams <dan.j.williams@intel.com>
Date:   Thu Jun 30 17:38:32 2011 -0700

    isci: unify isci_host and scic_sds_controller
    
    Remove the distinction between these two implementations and unify on
    isci_host (local instances named ihost).  Hmmm, we had two
    'oem_parameters' instances, one was unused... nice.
    
    Reported-by: Christoph Hellwig <hch@lst.de>
    Signed-off-by: Dan Williams <dan.j.williams@intel.com>

diff --git a/drivers/scsi/isci/port.h b/drivers/scsi/isci/port.h
index b9bc89bf6519..9a9be7b47b4a 100644
--- a/drivers/scsi/isci/port.h
+++ b/drivers/scsi/isci/port.h
@@ -115,7 +115,7 @@ struct isci_port {
 	u32 assigned_device_count;
 	u32 not_ready_reason;
 	struct isci_phy *phy_table[SCI_MAX_PHYS];
-	struct scic_sds_controller *owning_controller;
+	struct isci_host *owning_controller;
 	struct sci_timer timer;
 	struct scu_port_task_scheduler_registers __iomem *port_task_scheduler_registers;
 	/* XXX rework: only one register, no need to replicate per-port */
@@ -243,7 +243,7 @@ static inline void scic_sds_port_decrement_request_count(struct isci_port *iport
 void scic_sds_port_construct(
 	struct isci_port *iport,
 	u8 port_index,
-	struct scic_sds_controller *scic);
+	struct isci_host *ihost);
 
 enum sci_status scic_sds_port_initialize(
 	struct isci_port *iport,

commit 78a6f06e0e82125787d7aa308fe28c2c8381540c
Author: Dan Williams <dan.j.williams@intel.com>
Date:   Thu Jun 30 16:31:37 2011 -0700

    isci: unify isci_remote_device and scic_sds_remote_device
    
    Remove the distinction between these two implementations and unify on
    isci_remote_device (local instances named idev).
    
    Reported-by: Christoph Hellwig <hch@lst.de>
    Signed-off-by: Dan Williams <dan.j.williams@intel.com>

diff --git a/drivers/scsi/isci/port.h b/drivers/scsi/isci/port.h
index cdea48ece005..b9bc89bf6519 100644
--- a/drivers/scsi/isci/port.h
+++ b/drivers/scsi/isci/port.h
@@ -283,15 +283,15 @@ enum sci_status scic_sds_port_link_down(struct isci_port *iport,
 					struct isci_phy *iphy);
 
 struct isci_request;
-struct scic_sds_remote_device;
+struct isci_remote_device;
 enum sci_status scic_sds_port_start_io(
 	struct isci_port *iport,
-	struct scic_sds_remote_device *sci_dev,
+	struct isci_remote_device *idev,
 	struct isci_request *ireq);
 
 enum sci_status scic_sds_port_complete_io(
 	struct isci_port *iport,
-	struct scic_sds_remote_device *sci_dev,
+	struct isci_remote_device *idev,
 	struct isci_request *ireq);
 
 enum sas_linkrate scic_sds_port_get_max_allowed_speed(

commit ffe191c92ff195d73f9130b1490045ca2dd4c5e0
Author: Dan Williams <dan.j.williams@intel.com>
Date:   Wed Jun 29 13:09:25 2011 -0700

    isci: unify isci_port and scic_sds_port
    
    Remove the distinction between these two implementations and unify on
    isci_port (local instances named iport).  The duplicate '->owning_port' and
    '->isci_port' in both isci_phy and isci_remote_device will be fixed in a later
    patch... this is just the straightforward rename/unification.
    
    Reported-by: Christoph Hellwig <hch@lst.de>
    Signed-off-by: Dan Williams <dan.j.williams@intel.com>

diff --git a/drivers/scsi/isci/port.h b/drivers/scsi/isci/port.h
index b6ce56a6c11d..cdea48ece005 100644
--- a/drivers/scsi/isci/port.h
+++ b/drivers/scsi/isci/port.h
@@ -76,100 +76,19 @@ enum isci_status {
 };
 
 /**
- * struct scic_sds_port
- *
- * The core port object provides the the abstraction for an SCU port.
- */
-struct scic_sds_port {
-	/**
-	 * This field contains the information for the base port state machine.
-	 */
-	struct sci_base_state_machine sm;
-
-	bool ready_exit;
-
-	/**
-	 * This field is the port index that is reported to the SCI USER.
-	 * This allows the actual hardware physical port to change without
-	 * the SCI USER getting a different answer for the get port index.
-	 */
-	u8 logical_port_index;
-
-	/**
-	 * This field is the port index used to program the SCU hardware.
-	 */
-	u8 physical_port_index;
-
-	/**
-	 * This field contains the active phy mask for the port.
-	 * This mask is used in conjunction with the phy state to determine
-	 * which phy to select for some port operations.
-	 */
-	u8 active_phy_mask;
-
-	u16 reserved_rni;
-	u16 reserved_tag;
-
-	/**
-	 * This field contains the count of the io requests started on this port
-	 * object.  It is used to control controller shutdown.
-	 */
-	u32 started_request_count;
-
-	/**
-	 * This field contains the number of devices assigned to this port.
-	 * It is used to control port start requests.
-	 */
-	u32 assigned_device_count;
-
-	/**
-	 * This field contains the reason for the port not going ready.  It is
-	 * assigned in the state handlers and used in the state transition.
-	 */
-	u32 not_ready_reason;
-
-	/**
-	 * This field is the table of phys assigned to the port.
-	 */
-	struct isci_phy *phy_table[SCI_MAX_PHYS];
-
-	/**
-	 * This field is a pointer back to the controller that owns this
-	 * port object.
-	 */
-	struct scic_sds_controller *owning_controller;
-
-	/* timer used for port start/stop operations */
-	struct sci_timer	timer;
-
-	/**
-	 * This field is the pointer to the port task scheduler registers
-	 * for the SCU hardware.
-	 */
-	struct scu_port_task_scheduler_registers __iomem
-		*port_task_scheduler_registers;
-
-	/**
-	 * This field is identical for all port objects and points to the port
-	 * task scheduler group PE configuration registers.
-	 * It is used to assign PEs to a port.
-	 */
-	u32 __iomem *port_pe_configuration_register;
-
-	/**
-	 * This field is the VIIT register space for ths port object.
-	 */
-	struct scu_viit_entry __iomem *viit_registers;
-};
-
-
-
-/**
- * struct isci_port - This class represents the port object used to internally
- *    represent libsas port objects. It also keeps a list of remote device
- *    objects.
- *
- *
+ * struct isci_port - isci direct attached sas port object
+ * @event: counts bcns and port stop events (for bcn filtering)
+ * @ready_exit: several states constitute 'ready'. When exiting ready we
+ *              need to take extra port-teardown actions that are
+ *              skipped when exiting to another 'ready' state.
+ * @logical_port_index: software port index
+ * @physical_port_index: hardware port index
+ * @active_phy_mask: identifies phy members
+ * @reserved_tag:
+ * @reserved_rni: reserver for port task scheduler workaround
+ * @started_request_count: reference count for outstanding commands
+ * @not_ready_reason: set during state transitions and notified
+ * @timer: timeout start/stop operations
  */
 struct isci_port {
 	enum isci_status status;
@@ -185,16 +104,25 @@ struct isci_port {
 	struct completion start_complete;
 	struct completion hard_reset_complete;
 	enum sci_status hard_reset_status;
-	struct scic_sds_port sci;
+	struct sci_base_state_machine sm;
+	bool ready_exit;
+	u8 logical_port_index;
+	u8 physical_port_index;
+	u8 active_phy_mask;
+	u16 reserved_rni;
+	u16 reserved_tag;
+	u32 started_request_count;
+	u32 assigned_device_count;
+	u32 not_ready_reason;
+	struct isci_phy *phy_table[SCI_MAX_PHYS];
+	struct scic_sds_controller *owning_controller;
+	struct sci_timer timer;
+	struct scu_port_task_scheduler_registers __iomem *port_task_scheduler_registers;
+	/* XXX rework: only one register, no need to replicate per-port */
+	u32 __iomem *port_pe_configuration_register;
+	struct scu_viit_entry __iomem *viit_registers;
 };
 
-static inline struct isci_port *sci_port_to_iport(struct scic_sds_port *sci_port)
-{
-	struct isci_port *iport = container_of(sci_port, typeof(*iport), sci);
-
-	return iport;
-}
-
 enum scic_port_not_ready_reason_code {
 	SCIC_PORT_NOT_READY_NO_ACTIVE_PHYS,
 	SCIC_PORT_NOT_READY_HARD_RESET_REQUESTED,
@@ -299,90 +227,90 @@ enum scic_sds_port_states {
 	((this_port)->physical_port_index)
 
 
-static inline void scic_sds_port_decrement_request_count(struct scic_sds_port *sci_port)
+static inline void scic_sds_port_decrement_request_count(struct isci_port *iport)
 {
-	if (WARN_ONCE(sci_port->started_request_count == 0,
+	if (WARN_ONCE(iport->started_request_count == 0,
 		       "%s: tried to decrement started_request_count past 0!?",
 			__func__))
 		/* pass */;
 	else
-		sci_port->started_request_count--;
+		iport->started_request_count--;
 }
 
 #define scic_sds_port_active_phy(port, phy) \
 	(((port)->active_phy_mask & (1 << (phy)->phy_index)) != 0)
 
 void scic_sds_port_construct(
-	struct scic_sds_port *sci_port,
+	struct isci_port *iport,
 	u8 port_index,
 	struct scic_sds_controller *scic);
 
 enum sci_status scic_sds_port_initialize(
-	struct scic_sds_port *sci_port,
+	struct isci_port *iport,
 	void __iomem *port_task_scheduler_registers,
 	void __iomem *port_configuration_regsiter,
 	void __iomem *viit_registers);
 
-enum sci_status scic_sds_port_start(struct scic_sds_port *sci_port);
-enum sci_status scic_sds_port_stop(struct scic_sds_port *sci_port);
+enum sci_status scic_sds_port_start(struct isci_port *iport);
+enum sci_status scic_sds_port_stop(struct isci_port *iport);
 
 enum sci_status scic_sds_port_add_phy(
-	struct scic_sds_port *sci_port,
+	struct isci_port *iport,
 	struct isci_phy *iphy);
 
 enum sci_status scic_sds_port_remove_phy(
-	struct scic_sds_port *sci_port,
+	struct isci_port *iport,
 	struct isci_phy *iphy);
 
 void scic_sds_port_setup_transports(
-	struct scic_sds_port *sci_port,
+	struct isci_port *iport,
 	u32 device_id);
 
 void isci_port_bcn_enable(struct isci_host *, struct isci_port *);
 
 void scic_sds_port_deactivate_phy(
-	struct scic_sds_port *sci_port,
+	struct isci_port *iport,
 	struct isci_phy *iphy,
 	bool do_notify_user);
 
 bool scic_sds_port_link_detected(
-	struct scic_sds_port *sci_port,
+	struct isci_port *iport,
 	struct isci_phy *iphy);
 
-enum sci_status scic_sds_port_link_up(struct scic_sds_port *sci_port,
+enum sci_status scic_sds_port_link_up(struct isci_port *iport,
 				      struct isci_phy *iphy);
-enum sci_status scic_sds_port_link_down(struct scic_sds_port *sci_port,
+enum sci_status scic_sds_port_link_down(struct isci_port *iport,
 					struct isci_phy *iphy);
 
 struct isci_request;
 struct scic_sds_remote_device;
 enum sci_status scic_sds_port_start_io(
-	struct scic_sds_port *sci_port,
+	struct isci_port *iport,
 	struct scic_sds_remote_device *sci_dev,
 	struct isci_request *ireq);
 
 enum sci_status scic_sds_port_complete_io(
-	struct scic_sds_port *sci_port,
+	struct isci_port *iport,
 	struct scic_sds_remote_device *sci_dev,
 	struct isci_request *ireq);
 
 enum sas_linkrate scic_sds_port_get_max_allowed_speed(
-	struct scic_sds_port *sci_port);
+	struct isci_port *iport);
 
 void scic_sds_port_broadcast_change_received(
-	struct scic_sds_port *sci_port,
+	struct isci_port *iport,
 	struct isci_phy *iphy);
 
 bool scic_sds_port_is_valid_phy_assignment(
-	struct scic_sds_port *sci_port,
+	struct isci_port *iport,
 	u32 phy_index);
 
 void scic_sds_port_get_sas_address(
-	struct scic_sds_port *sci_port,
+	struct isci_port *iport,
 	struct sci_sas_address *sas_address);
 
 void scic_sds_port_get_attached_sas_address(
-	struct scic_sds_port *sci_port,
+	struct isci_port *iport,
 	struct sci_sas_address *sas_address);
 
 enum isci_status isci_port_get_state(

commit 852809559e4680ba4768262a6c3d21454fcd460e
Author: Dan Williams <dan.j.williams@intel.com>
Date:   Tue Jun 28 15:05:53 2011 -0700

    isci: unify isci_phy and scic_sds_phy
    
    They are one in the same object so remove the distinction.  The near
    duplicate fields (owning_port, and isci_port) will be cleaned up
    after the scic_sds_port isci_port unification.
    
    Reported-by: Christoph Hellwig <hch@lst.de>
    Signed-off-by: Dan Williams <dan.j.williams@intel.com>

diff --git a/drivers/scsi/isci/port.h b/drivers/scsi/isci/port.h
index 668f3a14cd70..b6ce56a6c11d 100644
--- a/drivers/scsi/isci/port.h
+++ b/drivers/scsi/isci/port.h
@@ -131,7 +131,7 @@ struct scic_sds_port {
 	/**
 	 * This field is the table of phys assigned to the port.
 	 */
-	struct scic_sds_phy *phy_table[SCI_MAX_PHYS];
+	struct isci_phy *phy_table[SCI_MAX_PHYS];
 
 	/**
 	 * This field is a pointer back to the controller that owns this
@@ -328,11 +328,11 @@ enum sci_status scic_sds_port_stop(struct scic_sds_port *sci_port);
 
 enum sci_status scic_sds_port_add_phy(
 	struct scic_sds_port *sci_port,
-	struct scic_sds_phy *sci_phy);
+	struct isci_phy *iphy);
 
 enum sci_status scic_sds_port_remove_phy(
 	struct scic_sds_port *sci_port,
-	struct scic_sds_phy *sci_phy);
+	struct isci_phy *iphy);
 
 void scic_sds_port_setup_transports(
 	struct scic_sds_port *sci_port,
@@ -342,17 +342,17 @@ void isci_port_bcn_enable(struct isci_host *, struct isci_port *);
 
 void scic_sds_port_deactivate_phy(
 	struct scic_sds_port *sci_port,
-	struct scic_sds_phy *sci_phy,
+	struct isci_phy *iphy,
 	bool do_notify_user);
 
 bool scic_sds_port_link_detected(
 	struct scic_sds_port *sci_port,
-	struct scic_sds_phy *sci_phy);
+	struct isci_phy *iphy);
 
 enum sci_status scic_sds_port_link_up(struct scic_sds_port *sci_port,
-				      struct scic_sds_phy *sci_phy);
+				      struct isci_phy *iphy);
 enum sci_status scic_sds_port_link_down(struct scic_sds_port *sci_port,
-					struct scic_sds_phy *sci_phy);
+					struct isci_phy *iphy);
 
 struct isci_request;
 struct scic_sds_remote_device;
@@ -371,7 +371,7 @@ enum sas_linkrate scic_sds_port_get_max_allowed_speed(
 
 void scic_sds_port_broadcast_change_received(
 	struct scic_sds_port *sci_port,
-	struct scic_sds_phy *sci_phy);
+	struct isci_phy *iphy);
 
 bool scic_sds_port_is_valid_phy_assignment(
 	struct scic_sds_port *sci_port,

commit 5076a1a97e2fa61c847a5fdd4b1991faf7716da6
Author: Dan Williams <dan.j.williams@intel.com>
Date:   Mon Jun 27 14:57:03 2011 -0700

    isci: unify isci_request and scic_sds_request
    
    They are one in the same object so remove the distinction.  The near
    duplicate fields (owning_controller, and isci_host) will be cleaned up
    after the scic_sds_contoller isci_host unification.
    
    Reported-by: Christoph Hellwig <hch@lst.de>
    Signed-off-by: Dan Williams <dan.j.williams@intel.com>

diff --git a/drivers/scsi/isci/port.h b/drivers/scsi/isci/port.h
index a44e541914f5..668f3a14cd70 100644
--- a/drivers/scsi/isci/port.h
+++ b/drivers/scsi/isci/port.h
@@ -354,17 +354,17 @@ enum sci_status scic_sds_port_link_up(struct scic_sds_port *sci_port,
 enum sci_status scic_sds_port_link_down(struct scic_sds_port *sci_port,
 					struct scic_sds_phy *sci_phy);
 
-struct scic_sds_request;
+struct isci_request;
 struct scic_sds_remote_device;
 enum sci_status scic_sds_port_start_io(
 	struct scic_sds_port *sci_port,
 	struct scic_sds_remote_device *sci_dev,
-	struct scic_sds_request *sci_req);
+	struct isci_request *ireq);
 
 enum sci_status scic_sds_port_complete_io(
 	struct scic_sds_port *sci_port,
 	struct scic_sds_remote_device *sci_dev,
-	struct scic_sds_request *sci_req);
+	struct isci_request *ireq);
 
 enum sas_linkrate scic_sds_port_get_max_allowed_speed(
 	struct scic_sds_port *sci_port);

commit 312e0c2455c18716cf640d4336dcb1e9e5053818
Author: Dan Williams <dan.j.williams@intel.com>
Date:   Tue Jun 28 13:47:09 2011 -0700

    isci: unify can_queue tracking on the tci_pool, uplevel tag assignment
    
    The tci_pool tracks our outstanding command slots which are also the 'index'
    portion of our tags.  Grabbing the tag early in ->lldd_execute_task let's us
    drop the isci_host_can_queue() and ->was_tag_assigned_by_user infrastructure.
    ->was_tag_assigned_by_user required the task context to be duplicated in
    request-local buffer.  With the tci established early we can build the
    task_context directly into its final location and skip a memcpy.
    
    With the task context buffer at a known address at request construction we
    have the opportunity/obligation to also fix sgl handling.  This rework feels
    like it belongs in another patch but the sgl handling and task_context are too
    intertwined.
    1/ fix the 'ab' pair embedded in the task context to point to the 'cd' pair in
       the task context (previously we were prematurely linking to the staging
       buffer).
    2/ fix the broken iteration of pio sgls that assumes all sgls are relative to
       the request, and does a dangerous looking reverse lookup of physical
       address to virtual address.
    
    Signed-off-by: Dan Williams <dan.j.williams@intel.com>

diff --git a/drivers/scsi/isci/port.h b/drivers/scsi/isci/port.h
index 45c01f80bf83..a44e541914f5 100644
--- a/drivers/scsi/isci/port.h
+++ b/drivers/scsi/isci/port.h
@@ -108,7 +108,7 @@ struct scic_sds_port {
 	u8 active_phy_mask;
 
 	u16 reserved_rni;
-	u16 reserved_tci;
+	u16 reserved_tag;
 
 	/**
 	 * This field contains the count of the io requests started on this port

commit 61aaff49e20fdb700f1300a49962bc76effc77fc
Author: Jeff Skirvin <jeffrey.d.skirvin@intel.com>
Date:   Tue Jun 21 12:16:33 2011 -0700

    isci: filter broadcast change notifications during SMP phy resets
    
    When resetting a sata device in the domain we have seen occasions where
    libsas prematurely marks a device gone in the time it takes for the
    device to re-establish the link.  This plays badly with software raid
    arrays.  Other libsas drivers have non-uniform delays in their reset
    handlers to try to cover this condition, but not sufficient to close the
    hole.  Given that a sata device can take many seconds to recover we
    filter bcns and poll for the device reattach state before notifying
    libsas that the port needs the domain to be rediscovered.  Once this has
    been proven out at the lldd level we can think about uplevelling this
    feature to a common implementation in libsas.
    
    Signed-off-by: Jeff Skirvin <jeffrey.d.skirvin@intel.com>
    [ use kzalloc instead of kmem_cache ]
    Signed-off-by: Dave Jiang <dave.jiang@intel.com>
    [ use eventq and time macros ]
    Signed-off-by: Dan Williams <dan.j.williams@intel.com>

diff --git a/drivers/scsi/isci/port.h b/drivers/scsi/isci/port.h
index fee6d80df769..45c01f80bf83 100644
--- a/drivers/scsi/isci/port.h
+++ b/drivers/scsi/isci/port.h
@@ -173,6 +173,10 @@ struct scic_sds_port {
  */
 struct isci_port {
 	enum isci_status status;
+	#define IPORT_BCN_BLOCKED 0
+	#define IPORT_BCN_PENDING 1
+	unsigned long flags;
+	atomic_t event;
 	struct isci_host *isci_host;
 	struct asd_sas_port sas_port;
 	struct list_head remote_dev_list;
@@ -334,6 +338,7 @@ void scic_sds_port_setup_transports(
 	struct scic_sds_port *sci_port,
 	u32 device_id);
 
+void isci_port_bcn_enable(struct isci_host *, struct isci_port *);
 
 void scic_sds_port_deactivate_phy(
 	struct scic_sds_port *sci_port,

commit e301370ac553a9a0ac0d1d25e769b86cf60395b3
Author: Edmund Nadolski <edmund.nadolski@intel.com>
Date:   Thu Jun 2 00:10:43 2011 +0000

    isci: state machine cleanup
    
    This cleans up several areas of the state machine mechanism:
    
     o Rename sci_base_state_machine_change_state to sci_change_state
     o Remove sci_base_state_machine_get_state function
     o Rename 'state_machine' struct member to 'sm' in client structs
     o Shorten the name of request states
     o Shorten state machine state names as follows:
            SCI_BASE_CONTROLLER_STATE_xxx to SCIC_xxx
            SCI_BASE_PHY_STATE_xxx to SCI_PHY_xxx
            SCIC_SDS_PHY_STARTING_SUBSTATE_xxx to SCI_PHY_SUB_xxx
            SCI_BASE_PORT_STATE_xxx to SCI_PORT_xxx and
            SCIC_SDS_PORT_READY_SUBSTATE_xxx to SCI_PORT_SUB_xxx
            SCI_BASE_REMOTE_DEVICE_STATE_xxx to SCI_DEV_xxx
            SCIC_SDS_STP_REMOTE_DEVICE_READY_SUBSTATE_xxx to SCI_STP_DEV_xxx
            SCIC_SDS_SMP_REMOTE_DEVICE_READY_SUBSTATE_xxx to SCI_SMP_DEV_xxx
            SCIC_SDS_REMOTE_NODE_CONTEXT_xxx_STATE to SCI_RNC_xxx
    
    Signed-off-by: Edmund Nadolski <edmund.nadolski@intel.com>
    Signed-off-by: Dave Jiang <dave.jiang@intel.com>
    Signed-off-by: Dan Williams <dan.j.williams@intel.com>

diff --git a/drivers/scsi/isci/port.h b/drivers/scsi/isci/port.h
index 9a6912855fc1..fee6d80df769 100644
--- a/drivers/scsi/isci/port.h
+++ b/drivers/scsi/isci/port.h
@@ -84,7 +84,7 @@ struct scic_sds_port {
 	/**
 	 * This field contains the information for the base port state machine.
 	 */
-	struct sci_base_state_machine state_machine;
+	struct sci_base_state_machine sm;
 
 	bool ready_exit;
 
@@ -224,7 +224,7 @@ enum scic_sds_port_states {
 	 * In this state no new IO operations are permitted.
 	 * This state is entered from the STOPPING state.
 	 */
-	SCI_BASE_PORT_STATE_STOPPED,
+	SCI_PORT_STOPPED,
 
 	/**
 	 * This state indicates that the port is in the process of stopping.
@@ -232,33 +232,33 @@ enum scic_sds_port_states {
 	 * operations are allowed to complete.
 	 * This state is entered from the READY state.
 	 */
-	SCI_BASE_PORT_STATE_STOPPING,
+	SCI_PORT_STOPPING,
 
 	/**
 	 * This state indicates the port is now ready.  Thus, the user is
 	 * able to perform IO operations on this port.
 	 * This state is entered from the STARTING state.
 	 */
-	SCI_BASE_PORT_STATE_READY,
+	SCI_PORT_READY,
 
 	/**
 	 * The substate where the port is started and ready but has no
 	 * active phys.
 	 */
-	SCIC_SDS_PORT_READY_SUBSTATE_WAITING,
+	SCI_PORT_SUB_WAITING,
 
 	/**
 	 * The substate where the port is started and ready and there is
 	 * at least one phy operational.
 	 */
-	SCIC_SDS_PORT_READY_SUBSTATE_OPERATIONAL,
+	SCI_PORT_SUB_OPERATIONAL,
 
 	/**
 	 * The substate where the port is started and there was an
 	 * add/remove phy event.  This state is only used in Automatic
 	 * Port Configuration Mode (APC)
 	 */
-	SCIC_SDS_PORT_READY_SUBSTATE_CONFIGURING,
+	SCI_PORT_SUB_CONFIGURING,
 
 	/**
 	 * This state indicates the port is in the process of performing a hard
@@ -266,14 +266,14 @@ enum scic_sds_port_states {
 	 * port.
 	 * This state is entered from the READY state.
 	 */
-	SCI_BASE_PORT_STATE_RESETTING,
+	SCI_PORT_RESETTING,
 
 	/**
 	 * This state indicates the port has failed a reset request.  This state
 	 * is entered when a port reset request times out.
 	 * This state is entered from the RESETTING state.
 	 */
-	SCI_BASE_PORT_STATE_FAILED,
+	SCI_PORT_FAILED,
 
 
 };

commit 5553ba2be0f3e3741e1a885a33d2b89921f9fd48
Author: Edmund Nadolski <edmund.nadolski@intel.com>
Date:   Thu May 19 11:59:10 2011 +0000

    isci: replace isci_timer list with proper embedded timers
    
    Rather than preallocating a list of timers and doling them out at runtime,
    embed a struct timerlist in each object that needs one.  A struct sci_timer
    interface is introduced to manage the timer cancellation semantics which
    currently need to guarantee the timer is cancelled while holding
    spin_lock(ihost->scic_lock).  Since the timeout functions also need to acquire
    the lock it currently prevents the driver from using del_timer_sync() for
    runtime cancellations.
    
    del_timer_sync() is used however before the objects go out of scope.
    
    Signed-off-by: Edmund Nadolski <edmund.nadolski@intel.com>
    Signed-off-by: Dan Williams <dan.j.williams@intel.com>

diff --git a/drivers/scsi/isci/port.h b/drivers/scsi/isci/port.h
index af540e5c03a0..9a6912855fc1 100644
--- a/drivers/scsi/isci/port.h
+++ b/drivers/scsi/isci/port.h
@@ -139,10 +139,8 @@ struct scic_sds_port {
 	 */
 	struct scic_sds_controller *owning_controller;
 
-	/**
-	 * This field contains the port start/stop timer handle.
-	 */
-	void *timer_handle;
+	/* timer used for port start/stop operations */
+	struct sci_timer	timer;
 
 	/**
 	 * This field is the pointer to the port task scheduler registers

commit 6813820c7b892e1a5c2306808a5ccc8a27b7946d
Author: Dan Williams <dan.j.williams@intel.com>
Date:   Thu May 12 07:16:06 2011 -0700

    isci: unify port start_io and complete_io handlers
    
    Unify the handlers and kill the state handler infrastructure.
    
    Reported-by: Christoph Hellwig <hch@lst.de>
    Signed-off-by: Dan Williams <dan.j.williams@intel.com>

diff --git a/drivers/scsi/isci/port.h b/drivers/scsi/isci/port.h
index bbce0ec583a9..af540e5c03a0 100644
--- a/drivers/scsi/isci/port.h
+++ b/drivers/scsi/isci/port.h
@@ -144,15 +144,6 @@ struct scic_sds_port {
 	 */
 	void *timer_handle;
 
-	/**
-	 * This field points to the current set of state handlers for this port
-	 * object.  These state handlers are assigned at each enter state of
-	 * the state machine.
-	 */
-	struct scic_sds_port_state_handler *state_handlers;
-
-	/* / Memory mapped hardware register space */
-
 	/**
 	 * This field is the pointer to the port task scheduler registers
 	 * for the SCU hardware.
@@ -286,34 +277,7 @@ enum scic_sds_port_states {
 	 */
 	SCI_BASE_PORT_STATE_FAILED,
 
-	SCI_BASE_PORT_MAX_STATES
-
-};
-
-struct scic_sds_remote_device;
-struct scic_sds_request;
-
-typedef enum sci_status (*scic_sds_port_handler_t)(struct scic_sds_port *);
-
-typedef enum sci_status (*scic_sds_port_phy_handler_t)(struct scic_sds_port *,
-						       struct scic_sds_phy *);
-
-typedef enum sci_status (*scic_sds_port_reset_handler_t)(struct scic_sds_port *,
-							 u32 timeout);
-
-typedef enum sci_status (*scic_sds_port_event_handler_t)(struct scic_sds_port *, u32);
 
-typedef enum sci_status (*scic_sds_port_frame_handler_t)(struct scic_sds_port *, u32);
-
-typedef void (*scic_sds_port_link_handler_t)(struct scic_sds_port *, struct scic_sds_phy *);
-
-typedef enum sci_status (*scic_sds_port_io_request_handler_t)(struct scic_sds_port *,
-							      struct scic_sds_remote_device *,
-							      struct scic_sds_request *);
-
-struct scic_sds_port_state_handler {
-	scic_sds_port_io_request_handler_t start_io_handler;
-	scic_sds_port_io_request_handler_t complete_io_handler;
 };
 
 /**
@@ -324,23 +288,6 @@ struct scic_sds_port_state_handler {
 #define scic_sds_port_get_controller(this_port)	\
 	((this_port)->owning_controller)
 
-/**
- * scic_sds_port_set_base_state_handlers() -
- *
- * This macro will change the state handlers to those of the specified state id
- */
-#define scic_sds_port_set_base_state_handlers(this_port, state_id) \
-	scic_sds_port_set_state_handlers(\
-		(this_port), &scic_sds_port_state_handler_table[(state_id)])
-
-/**
- * scic_sds_port_set_state_handlers() -
- *
- * Helper macro to set the port object state handlers
- */
-#define scic_sds_port_set_state_handlers(this_port, handlers) \
-	((this_port)->state_handlers = (handlers))
-
 /**
  * scic_sds_port_get_index() -
  *
@@ -404,6 +351,8 @@ enum sci_status scic_sds_port_link_up(struct scic_sds_port *sci_port,
 enum sci_status scic_sds_port_link_down(struct scic_sds_port *sci_port,
 					struct scic_sds_phy *sci_phy);
 
+struct scic_sds_request;
+struct scic_sds_remote_device;
 enum sci_status scic_sds_port_start_io(
 	struct scic_sds_port *sci_port,
 	struct scic_sds_remote_device *sci_dev,

commit 051266caaeb15719553c5316e3d43b533d3cd5a0
Author: Piotr Sawicki <piotr.sawicki@intel.com>
Date:   Thu May 12 19:10:14 2011 +0000

    isci: unify port link_up and link_down handlers
    
    Unify the handlers and kill the state handler implementations.
    
    Reported-by: Christoph Hellwig <hch@lst.de>
    Signed-off-by: Piotr Sawicki <piotr.sawicki@intel.com>
    Signed-off-by: Dan Williams <dan.j.williams@intel.com>

diff --git a/drivers/scsi/isci/port.h b/drivers/scsi/isci/port.h
index 20f99263fa0a..bbce0ec583a9 100644
--- a/drivers/scsi/isci/port.h
+++ b/drivers/scsi/isci/port.h
@@ -312,9 +312,6 @@ typedef enum sci_status (*scic_sds_port_io_request_handler_t)(struct scic_sds_po
 							      struct scic_sds_request *);
 
 struct scic_sds_port_state_handler {
-	scic_sds_port_link_handler_t link_up_handler;
-	scic_sds_port_link_handler_t link_down_handler;
-
 	scic_sds_port_io_request_handler_t start_io_handler;
 	scic_sds_port_io_request_handler_t complete_io_handler;
 };
@@ -402,13 +399,10 @@ bool scic_sds_port_link_detected(
 	struct scic_sds_port *sci_port,
 	struct scic_sds_phy *sci_phy);
 
-void scic_sds_port_link_up(
-	struct scic_sds_port *sci_port,
-	struct scic_sds_phy *sci_phy);
-
-void scic_sds_port_link_down(
-	struct scic_sds_port *sci_port,
-	struct scic_sds_phy *sci_phy);
+enum sci_status scic_sds_port_link_up(struct scic_sds_port *sci_port,
+				      struct scic_sds_phy *sci_phy);
+enum sci_status scic_sds_port_link_down(struct scic_sds_port *sci_port,
+					struct scic_sds_phy *sci_phy);
 
 enum sci_status scic_sds_port_start_io(
 	struct scic_sds_port *sci_port,

commit 13721e186fd31cd8475e635a89383853871fdbf1
Author: Piotr Sawicki <piotr.sawicki@intel.com>
Date:   Thu May 12 19:10:08 2011 +0000

    isci: remove port frame and event handlers
    
    Unused infrastructure.
    
    Reported-by: Christoph Hellwig <hch@lst.de>
    Signed-off-by: Piotr Sawicki <piotr.sawicki@intel.com>
    Signed-off-by: Dan Williams <dan.j.williams@intel.com>

diff --git a/drivers/scsi/isci/port.h b/drivers/scsi/isci/port.h
index 326279a194ab..20f99263fa0a 100644
--- a/drivers/scsi/isci/port.h
+++ b/drivers/scsi/isci/port.h
@@ -312,9 +312,6 @@ typedef enum sci_status (*scic_sds_port_io_request_handler_t)(struct scic_sds_po
 							      struct scic_sds_request *);
 
 struct scic_sds_port_state_handler {
-	scic_sds_port_frame_handler_t frame_handler;
-	scic_sds_port_event_handler_t event_handler;
-
 	scic_sds_port_link_handler_t link_up_handler;
 	scic_sds_port_link_handler_t link_down_handler;
 

commit bd6713b416bbfc7d7180114f7cc543b152cc1725
Author: Piotr Sawicki <piotr.sawicki@intel.com>
Date:   Thu May 12 19:10:03 2011 +0000

    isci: unify port reset, add_phy, and remove_phy handlers
    
    Unify the implementations and remove the state handlers.
    
    Reported-by: Christoph Hellwig <hch@lst.de>
    Signed-off-by: Piotr Sawicki <piotr.sawicki@intel.com>
    Signed-off-by: Dan Williams <dan.j.williams@intel.com>

diff --git a/drivers/scsi/isci/port.h b/drivers/scsi/isci/port.h
index 70163710988c..326279a194ab 100644
--- a/drivers/scsi/isci/port.h
+++ b/drivers/scsi/isci/port.h
@@ -312,24 +312,6 @@ typedef enum sci_status (*scic_sds_port_io_request_handler_t)(struct scic_sds_po
 							      struct scic_sds_request *);
 
 struct scic_sds_port_state_handler {
-	/**
-	 * The reset_handler specifies the method invoked when a user
-	 * attempts to hard reset a port.
-	 */
-	scic_sds_port_reset_handler_t reset_handler;
-
-	/**
-	 * The add_phy_handler specifies the method invoked when a user
-	 * attempts to add another phy into the port.
-	 */
-	scic_sds_port_phy_handler_t add_phy_handler;
-
-	/**
-	 * The remove_phy_handler specifies the method invoked when a user
-	 * attempts to remove a phy from the port.
-	 */
-	scic_sds_port_phy_handler_t remove_phy_handler;
-
 	scic_sds_port_frame_handler_t frame_handler;
 	scic_sds_port_event_handler_t event_handler;
 
@@ -338,7 +320,6 @@ struct scic_sds_port_state_handler {
 
 	scic_sds_port_io_request_handler_t start_io_handler;
 	scic_sds_port_io_request_handler_t complete_io_handler;
-
 };
 
 /**

commit e6ec5afde9794f50e60788bd10760fcd0d609252
Author: Piotr Sawicki <piotr.sawicki@intel.com>
Date:   Wed May 11 23:52:37 2011 +0000

    isci: remove port destruct handler
    
    The handler was never used.
    
    Signed-off-by: Piotr Sawicki <piotr.sawicki@intel.com>
    Signed-off-by: Dan Williams <dan.j.williams@intel.com>

diff --git a/drivers/scsi/isci/port.h b/drivers/scsi/isci/port.h
index 843eb62a3090..70163710988c 100644
--- a/drivers/scsi/isci/port.h
+++ b/drivers/scsi/isci/port.h
@@ -312,12 +312,6 @@ typedef enum sci_status (*scic_sds_port_io_request_handler_t)(struct scic_sds_po
 							      struct scic_sds_request *);
 
 struct scic_sds_port_state_handler {
-	/**
-	 * The destruct_handler specifies the method invoked when attempting to
-	 * destruct a port.
-	 */
-	scic_sds_port_handler_t destruct_handler;
-
 	/**
 	 * The reset_handler specifies the method invoked when a user
 	 * attempts to hard reset a port.

commit 8bc80d303063d9540493be623df1c9a8dee9ccb8
Author: Piotr Sawicki <piotr.sawicki@intel.com>
Date:   Wed May 11 23:52:31 2011 +0000

    isci: unify port stop handlers
    
    Implement the stop handlers directly in scic_sds_port_stop()
    
    Reported-by: Christoph Hellwig <hch@lst.de>
    Signed-off-by: Piotr Sawicki <piotr.sawicki@intel.com>
    Signed-off-by: Dan Williams <dan.j.williams@intel.com>

diff --git a/drivers/scsi/isci/port.h b/drivers/scsi/isci/port.h
index 2ad205100f25..843eb62a3090 100644
--- a/drivers/scsi/isci/port.h
+++ b/drivers/scsi/isci/port.h
@@ -312,12 +312,6 @@ typedef enum sci_status (*scic_sds_port_io_request_handler_t)(struct scic_sds_po
 							      struct scic_sds_request *);
 
 struct scic_sds_port_state_handler {
-	/**
-	 * The stop_handler specifies the method invoked when a user
-	 * attempts to stop a port.
-	 */
-	scic_sds_port_handler_t stop_handler;
-
 	/**
 	 * The destruct_handler specifies the method invoked when attempting to
 	 * destruct a port.
@@ -412,6 +406,7 @@ enum sci_status scic_sds_port_initialize(
 	void __iomem *viit_registers);
 
 enum sci_status scic_sds_port_start(struct scic_sds_port *sci_port);
+enum sci_status scic_sds_port_stop(struct scic_sds_port *sci_port);
 
 enum sci_status scic_sds_port_add_phy(
 	struct scic_sds_port *sci_port,

commit d76f71d988ef48384593ad97ebc762d9257d96a8
Author: Piotr Sawicki <piotr.sawicki@intel.com>
Date:   Wed May 11 23:52:26 2011 +0000

    isci: remove port start handler
    
    remove the handler from the port state handler table and implement the
    logic directly in scic_sds_port_start().
    
    Signed-off-by: Piotr Sawicki <piotr.sawicki@intel.com>
    [remove a level of indirection]
    Signed-off-by: Dan Williams <dan.j.williams@intel.com>

diff --git a/drivers/scsi/isci/port.h b/drivers/scsi/isci/port.h
index e63c34d02b7d..2ad205100f25 100644
--- a/drivers/scsi/isci/port.h
+++ b/drivers/scsi/isci/port.h
@@ -312,12 +312,6 @@ typedef enum sci_status (*scic_sds_port_io_request_handler_t)(struct scic_sds_po
 							      struct scic_sds_request *);
 
 struct scic_sds_port_state_handler {
-	/**
-	 * The start_handler specifies the method invoked when a user
-	 * attempts to start a port.
-	 */
-	scic_sds_port_handler_t start_handler;
-
 	/**
 	 * The stop_handler specifies the method invoked when a user
 	 * attempts to stop a port.
@@ -417,6 +411,8 @@ enum sci_status scic_sds_port_initialize(
 	void __iomem *port_configuration_regsiter,
 	void __iomem *viit_registers);
 
+enum sci_status scic_sds_port_start(struct scic_sds_port *sci_port);
+
 enum sci_status scic_sds_port_add_phy(
 	struct scic_sds_port *sci_port,
 	struct scic_sds_phy *sci_phy);

commit e91f41ef809a2d1b8cdba52ac380aecd706c93dd
Author: Piotr Sawicki <piotr.sawicki@intel.com>
Date:   Wed May 11 23:52:21 2011 +0000

    isci: merge port ready substates into primary state machine
    
    This conversion was complicated by the fact that the ready state exit routine
    took unconditional action beyond just stopping the substate machine (like in
    previous conversions).  In order to ensure identical behaviour every state
    transition needs to be instrumented to catch ready-->!ready transitions and
    execute scic_sds_port_invalidate_dummy_remote_node()
    
    Reported-by: Christoph Hellwig <hch@lst.de>
    Signed-off-by: Piotr Sawicki <piotr.sawicki@intel.com>
    [fix ready state exit handling]
    Signed-off-by: Dan Williams <dan.j.williams@intel.com>

diff --git a/drivers/scsi/isci/port.h b/drivers/scsi/isci/port.h
index ea41dcead3ae..e63c34d02b7d 100644
--- a/drivers/scsi/isci/port.h
+++ b/drivers/scsi/isci/port.h
@@ -81,12 +81,13 @@ enum isci_status {
  * The core port object provides the the abstraction for an SCU port.
  */
 struct scic_sds_port {
-
 	/**
 	 * This field contains the information for the base port state machine.
 	 */
 	struct sci_base_state_machine state_machine;
 
+	bool ready_exit;
+
 	/**
 	 * This field is the port index that is reported to the SCI USER.
 	 * This allows the actual hardware physical port to change without
@@ -150,11 +151,6 @@ struct scic_sds_port {
 	 */
 	struct scic_sds_port_state_handler *state_handlers;
 
-	/**
-	 * This field is the ready substate machine for the port.
-	 */
-	struct sci_base_state_machine ready_substate_machine;
-
 	/* / Memory mapped hardware register space */
 
 	/**
@@ -175,7 +171,6 @@ struct scic_sds_port {
 	 * This field is the VIIT register space for ths port object.
 	 */
 	struct scu_viit_entry __iomem *viit_registers;
-
 };
 
 
@@ -228,35 +223,6 @@ struct scic_port_properties {
 	u32 phy_mask;
 };
 
-/**
- * enum SCIC_SDS_PORT_READY_SUBSTATES -
- *
- * This enumeration depicts all of the states for the core port ready substate
- * machine.
- */
-enum scic_sds_port_ready_substates {
-	/**
-	 * The substate where the port is started and ready but has no
-	 * active phys.
-	 */
-	SCIC_SDS_PORT_READY_SUBSTATE_WAITING,
-
-	/**
-	 * The substate where the port is started and ready and there is
-	 * at least one phy operational.
-	 */
-	SCIC_SDS_PORT_READY_SUBSTATE_OPERATIONAL,
-
-	/**
-	 * The substate where the port is started and there was an
-	 * add/remove phy event.  This state is only used in Automatic
-	 * Port Configuration Mode (APC)
-	 */
-	SCIC_SDS_PORT_READY_SUBSTATE_CONFIGURING,
-
-	SCIC_SDS_PORT_READY_MAX_SUBSTATES
-};
-
 /**
  * enum scic_sds_port_states - This enumeration depicts all the states for the
  *    common port state machine.
@@ -286,6 +252,25 @@ enum scic_sds_port_states {
 	 */
 	SCI_BASE_PORT_STATE_READY,
 
+	/**
+	 * The substate where the port is started and ready but has no
+	 * active phys.
+	 */
+	SCIC_SDS_PORT_READY_SUBSTATE_WAITING,
+
+	/**
+	 * The substate where the port is started and ready and there is
+	 * at least one phy operational.
+	 */
+	SCIC_SDS_PORT_READY_SUBSTATE_OPERATIONAL,
+
+	/**
+	 * The substate where the port is started and there was an
+	 * add/remove phy event.  This state is only used in Automatic
+	 * Port Configuration Mode (APC)
+	 */
+	SCIC_SDS_PORT_READY_SUBSTATE_CONFIGURING,
+
 	/**
 	 * This state indicates the port is in the process of performing a hard
 	 * reset.  Thus, the user is unable to perform IO operations on this

commit e2f8db509fdd354bb7a68c86515e9d2d8909ccc9
Author: Dan Williams <dan.j.williams@intel.com>
Date:   Tue May 10 02:28:46 2011 -0700

    isci: uplevel port infrastructure
    
    * Move port configuration agent implementation
    * Merge core/scic_sds_port.[ch] into port.[ch]
    
    Reported-by: Christoph Hellwig <hch@lst.de>
    Signed-off-by: Dan Williams <dan.j.williams@intel.com>

diff --git a/drivers/scsi/isci/port.h b/drivers/scsi/isci/port.h
index 59505cbf2bb3..ea41dcead3ae 100644
--- a/drivers/scsi/isci/port.h
+++ b/drivers/scsi/isci/port.h
@@ -58,7 +58,10 @@
 
 #include <scsi/libsas.h>
 #include "isci.h"
-#include "scic_sds_port.h"
+#include "sas.h"
+#include "phy.h"
+
+#define SCIC_SDS_DUMMY_PORT   0xFF
 
 struct isci_phy;
 struct isci_host;
@@ -72,6 +75,111 @@ enum isci_status {
 	isci_stopped      = 0x05,
 };
 
+/**
+ * struct scic_sds_port
+ *
+ * The core port object provides the the abstraction for an SCU port.
+ */
+struct scic_sds_port {
+
+	/**
+	 * This field contains the information for the base port state machine.
+	 */
+	struct sci_base_state_machine state_machine;
+
+	/**
+	 * This field is the port index that is reported to the SCI USER.
+	 * This allows the actual hardware physical port to change without
+	 * the SCI USER getting a different answer for the get port index.
+	 */
+	u8 logical_port_index;
+
+	/**
+	 * This field is the port index used to program the SCU hardware.
+	 */
+	u8 physical_port_index;
+
+	/**
+	 * This field contains the active phy mask for the port.
+	 * This mask is used in conjunction with the phy state to determine
+	 * which phy to select for some port operations.
+	 */
+	u8 active_phy_mask;
+
+	u16 reserved_rni;
+	u16 reserved_tci;
+
+	/**
+	 * This field contains the count of the io requests started on this port
+	 * object.  It is used to control controller shutdown.
+	 */
+	u32 started_request_count;
+
+	/**
+	 * This field contains the number of devices assigned to this port.
+	 * It is used to control port start requests.
+	 */
+	u32 assigned_device_count;
+
+	/**
+	 * This field contains the reason for the port not going ready.  It is
+	 * assigned in the state handlers and used in the state transition.
+	 */
+	u32 not_ready_reason;
+
+	/**
+	 * This field is the table of phys assigned to the port.
+	 */
+	struct scic_sds_phy *phy_table[SCI_MAX_PHYS];
+
+	/**
+	 * This field is a pointer back to the controller that owns this
+	 * port object.
+	 */
+	struct scic_sds_controller *owning_controller;
+
+	/**
+	 * This field contains the port start/stop timer handle.
+	 */
+	void *timer_handle;
+
+	/**
+	 * This field points to the current set of state handlers for this port
+	 * object.  These state handlers are assigned at each enter state of
+	 * the state machine.
+	 */
+	struct scic_sds_port_state_handler *state_handlers;
+
+	/**
+	 * This field is the ready substate machine for the port.
+	 */
+	struct sci_base_state_machine ready_substate_machine;
+
+	/* / Memory mapped hardware register space */
+
+	/**
+	 * This field is the pointer to the port task scheduler registers
+	 * for the SCU hardware.
+	 */
+	struct scu_port_task_scheduler_registers __iomem
+		*port_task_scheduler_registers;
+
+	/**
+	 * This field is identical for all port objects and points to the port
+	 * task scheduler group PE configuration registers.
+	 * It is used to assign PEs to a port.
+	 */
+	u32 __iomem *port_pe_configuration_register;
+
+	/**
+	 * This field is the VIIT register space for ths port object.
+	 */
+	struct scu_viit_entry __iomem *viit_registers;
+
+};
+
+
+
 /**
  * struct isci_port - This class represents the port object used to internally
  *    represent libsas port objects. It also keeps a list of remote device
@@ -99,54 +207,301 @@ static inline struct isci_port *sci_port_to_iport(struct scic_sds_port *sci_port
 	return iport;
 }
 
-enum isci_status isci_port_get_state(
-	struct isci_port *isci_port);
+enum scic_port_not_ready_reason_code {
+	SCIC_PORT_NOT_READY_NO_ACTIVE_PHYS,
+	SCIC_PORT_NOT_READY_HARD_RESET_REQUESTED,
+	SCIC_PORT_NOT_READY_INVALID_PORT_CONFIGURATION,
+	SCIC_PORT_NOT_READY_RECONFIGURING,
+
+	SCIC_PORT_NOT_READY_REASON_CODE_MAX
+};
+
+struct scic_port_end_point_properties {
+	struct sci_sas_address sas_address;
+	struct scic_phy_proto protocols;
+};
+
+struct scic_port_properties {
+	u32 index;
+	struct scic_port_end_point_properties local;
+	struct scic_port_end_point_properties remote;
+	u32 phy_mask;
+};
+
+/**
+ * enum SCIC_SDS_PORT_READY_SUBSTATES -
+ *
+ * This enumeration depicts all of the states for the core port ready substate
+ * machine.
+ */
+enum scic_sds_port_ready_substates {
+	/**
+	 * The substate where the port is started and ready but has no
+	 * active phys.
+	 */
+	SCIC_SDS_PORT_READY_SUBSTATE_WAITING,
+
+	/**
+	 * The substate where the port is started and ready and there is
+	 * at least one phy operational.
+	 */
+	SCIC_SDS_PORT_READY_SUBSTATE_OPERATIONAL,
+
+	/**
+	 * The substate where the port is started and there was an
+	 * add/remove phy event.  This state is only used in Automatic
+	 * Port Configuration Mode (APC)
+	 */
+	SCIC_SDS_PORT_READY_SUBSTATE_CONFIGURING,
+
+	SCIC_SDS_PORT_READY_MAX_SUBSTATES
+};
+
+/**
+ * enum scic_sds_port_states - This enumeration depicts all the states for the
+ *    common port state machine.
+ *
+ *
+ */
+enum scic_sds_port_states {
+	/**
+	 * This state indicates that the port has successfully been stopped.
+	 * In this state no new IO operations are permitted.
+	 * This state is entered from the STOPPING state.
+	 */
+	SCI_BASE_PORT_STATE_STOPPED,
+
+	/**
+	 * This state indicates that the port is in the process of stopping.
+	 * In this state no new IO operations are permitted, but existing IO
+	 * operations are allowed to complete.
+	 * This state is entered from the READY state.
+	 */
+	SCI_BASE_PORT_STATE_STOPPING,
+
+	/**
+	 * This state indicates the port is now ready.  Thus, the user is
+	 * able to perform IO operations on this port.
+	 * This state is entered from the STARTING state.
+	 */
+	SCI_BASE_PORT_STATE_READY,
+
+	/**
+	 * This state indicates the port is in the process of performing a hard
+	 * reset.  Thus, the user is unable to perform IO operations on this
+	 * port.
+	 * This state is entered from the READY state.
+	 */
+	SCI_BASE_PORT_STATE_RESETTING,
+
+	/**
+	 * This state indicates the port has failed a reset request.  This state
+	 * is entered when a port reset request times out.
+	 * This state is entered from the RESETTING state.
+	 */
+	SCI_BASE_PORT_STATE_FAILED,
+
+	SCI_BASE_PORT_MAX_STATES
+
+};
+
+struct scic_sds_remote_device;
+struct scic_sds_request;
+
+typedef enum sci_status (*scic_sds_port_handler_t)(struct scic_sds_port *);
 
-void isci_port_formed(
-	struct asd_sas_phy *);
+typedef enum sci_status (*scic_sds_port_phy_handler_t)(struct scic_sds_port *,
+						       struct scic_sds_phy *);
 
-void isci_port_deformed(
-	struct asd_sas_phy *);
+typedef enum sci_status (*scic_sds_port_reset_handler_t)(struct scic_sds_port *,
+							 u32 timeout);
 
-void isci_port_bc_change_received(
-	struct isci_host *isci_host,
-	struct scic_sds_port *port,
-	struct scic_sds_phy *phy);
+typedef enum sci_status (*scic_sds_port_event_handler_t)(struct scic_sds_port *, u32);
 
-void isci_port_link_up(
-	struct isci_host *isci_host,
-	struct scic_sds_port *port,
-	struct scic_sds_phy *phy);
+typedef enum sci_status (*scic_sds_port_frame_handler_t)(struct scic_sds_port *, u32);
 
-void isci_port_link_down(
-	struct isci_host *isci_host,
-	struct isci_phy *isci_phy,
-	struct isci_port *port);
+typedef void (*scic_sds_port_link_handler_t)(struct scic_sds_port *, struct scic_sds_phy *);
 
-void isci_port_ready(
-	struct isci_host *isci_host,
+typedef enum sci_status (*scic_sds_port_io_request_handler_t)(struct scic_sds_port *,
+							      struct scic_sds_remote_device *,
+							      struct scic_sds_request *);
+
+struct scic_sds_port_state_handler {
+	/**
+	 * The start_handler specifies the method invoked when a user
+	 * attempts to start a port.
+	 */
+	scic_sds_port_handler_t start_handler;
+
+	/**
+	 * The stop_handler specifies the method invoked when a user
+	 * attempts to stop a port.
+	 */
+	scic_sds_port_handler_t stop_handler;
+
+	/**
+	 * The destruct_handler specifies the method invoked when attempting to
+	 * destruct a port.
+	 */
+	scic_sds_port_handler_t destruct_handler;
+
+	/**
+	 * The reset_handler specifies the method invoked when a user
+	 * attempts to hard reset a port.
+	 */
+	scic_sds_port_reset_handler_t reset_handler;
+
+	/**
+	 * The add_phy_handler specifies the method invoked when a user
+	 * attempts to add another phy into the port.
+	 */
+	scic_sds_port_phy_handler_t add_phy_handler;
+
+	/**
+	 * The remove_phy_handler specifies the method invoked when a user
+	 * attempts to remove a phy from the port.
+	 */
+	scic_sds_port_phy_handler_t remove_phy_handler;
+
+	scic_sds_port_frame_handler_t frame_handler;
+	scic_sds_port_event_handler_t event_handler;
+
+	scic_sds_port_link_handler_t link_up_handler;
+	scic_sds_port_link_handler_t link_down_handler;
+
+	scic_sds_port_io_request_handler_t start_io_handler;
+	scic_sds_port_io_request_handler_t complete_io_handler;
+
+};
+
+/**
+ * scic_sds_port_get_controller() -
+ *
+ * Helper macro to get the owning controller of this port
+ */
+#define scic_sds_port_get_controller(this_port)	\
+	((this_port)->owning_controller)
+
+/**
+ * scic_sds_port_set_base_state_handlers() -
+ *
+ * This macro will change the state handlers to those of the specified state id
+ */
+#define scic_sds_port_set_base_state_handlers(this_port, state_id) \
+	scic_sds_port_set_state_handlers(\
+		(this_port), &scic_sds_port_state_handler_table[(state_id)])
+
+/**
+ * scic_sds_port_set_state_handlers() -
+ *
+ * Helper macro to set the port object state handlers
+ */
+#define scic_sds_port_set_state_handlers(this_port, handlers) \
+	((this_port)->state_handlers = (handlers))
+
+/**
+ * scic_sds_port_get_index() -
+ *
+ * This macro returns the physical port index for this port object
+ */
+#define scic_sds_port_get_index(this_port) \
+	((this_port)->physical_port_index)
+
+
+static inline void scic_sds_port_decrement_request_count(struct scic_sds_port *sci_port)
+{
+	if (WARN_ONCE(sci_port->started_request_count == 0,
+		       "%s: tried to decrement started_request_count past 0!?",
+			__func__))
+		/* pass */;
+	else
+		sci_port->started_request_count--;
+}
+
+#define scic_sds_port_active_phy(port, phy) \
+	(((port)->active_phy_mask & (1 << (phy)->phy_index)) != 0)
+
+void scic_sds_port_construct(
+	struct scic_sds_port *sci_port,
+	u8 port_index,
+	struct scic_sds_controller *scic);
+
+enum sci_status scic_sds_port_initialize(
+	struct scic_sds_port *sci_port,
+	void __iomem *port_task_scheduler_registers,
+	void __iomem *port_configuration_regsiter,
+	void __iomem *viit_registers);
+
+enum sci_status scic_sds_port_add_phy(
+	struct scic_sds_port *sci_port,
+	struct scic_sds_phy *sci_phy);
+
+enum sci_status scic_sds_port_remove_phy(
+	struct scic_sds_port *sci_port,
+	struct scic_sds_phy *sci_phy);
+
+void scic_sds_port_setup_transports(
+	struct scic_sds_port *sci_port,
+	u32 device_id);
+
+
+void scic_sds_port_deactivate_phy(
+	struct scic_sds_port *sci_port,
+	struct scic_sds_phy *sci_phy,
+	bool do_notify_user);
+
+bool scic_sds_port_link_detected(
+	struct scic_sds_port *sci_port,
+	struct scic_sds_phy *sci_phy);
+
+void scic_sds_port_link_up(
+	struct scic_sds_port *sci_port,
+	struct scic_sds_phy *sci_phy);
+
+void scic_sds_port_link_down(
+	struct scic_sds_port *sci_port,
+	struct scic_sds_phy *sci_phy);
+
+enum sci_status scic_sds_port_start_io(
+	struct scic_sds_port *sci_port,
+	struct scic_sds_remote_device *sci_dev,
+	struct scic_sds_request *sci_req);
+
+enum sci_status scic_sds_port_complete_io(
+	struct scic_sds_port *sci_port,
+	struct scic_sds_remote_device *sci_dev,
+	struct scic_sds_request *sci_req);
+
+enum sas_linkrate scic_sds_port_get_max_allowed_speed(
+	struct scic_sds_port *sci_port);
+
+void scic_sds_port_broadcast_change_received(
+	struct scic_sds_port *sci_port,
+	struct scic_sds_phy *sci_phy);
+
+bool scic_sds_port_is_valid_phy_assignment(
+	struct scic_sds_port *sci_port,
+	u32 phy_index);
+
+void scic_sds_port_get_sas_address(
+	struct scic_sds_port *sci_port,
+	struct sci_sas_address *sas_address);
+
+void scic_sds_port_get_attached_sas_address(
+	struct scic_sds_port *sci_port,
+	struct sci_sas_address *sas_address);
+
+enum isci_status isci_port_get_state(
 	struct isci_port *isci_port);
 
-void isci_port_not_ready(
-	struct isci_host *isci_host,
-	struct isci_port *port);
+void isci_port_formed(struct asd_sas_phy *);
+void isci_port_deformed(struct asd_sas_phy *);
 
 void isci_port_init(
 	struct isci_port *port,
 	struct isci_host *host,
 	int index);
 
-void isci_port_hard_reset_complete(
-	struct isci_port *isci_port,
-	enum sci_status completion_status);
-
 int isci_port_perform_hard_reset(struct isci_host *ihost, struct isci_port *iport,
 				 struct isci_phy *iphy);
-
-void isci_port_stop_complete(
-		struct scic_sds_controller *scic,
-		struct scic_sds_port *sci_port,
-		enum sci_status completion_status);
-
 #endif /* !defined(_ISCI_PORT_H_) */
-

commit ce2b3261b6765c3b80fda95426c73e8d3bb1b035
Author: Dan Williams <dan.j.williams@intel.com>
Date:   Sun May 8 15:49:15 2011 -0700

    isci: unify constants
    
    cross driver constants are spread out over multiple header files, consolidate
    them into isci.h, and push some includes out to the source files that need
    them.
    
    TODO: remove SCI_MODE_SIZE infrastructure.
    TODO: task.h is full of inlines that are too large
    
    Signed-off-by: Dan Williams <dan.j.williams@intel.com>

diff --git a/drivers/scsi/isci/port.h b/drivers/scsi/isci/port.h
index 355034542e4c..59505cbf2bb3 100644
--- a/drivers/scsi/isci/port.h
+++ b/drivers/scsi/isci/port.h
@@ -55,6 +55,9 @@
 
 #ifndef _ISCI_PORT_H_
 #define _ISCI_PORT_H_
+
+#include <scsi/libsas.h>
+#include "isci.h"
 #include "scic_sds_port.h"
 
 struct isci_phy;

commit e531381e2f8a68b8737c63c7bb890ad80b2470bd
Author: Dan Williams <dan.j.williams@intel.com>
Date:   Sat May 7 10:11:43 2011 -0700

    isci: unify port data structures
    
    Make scic_sds_port a member of isci_port and merge their lifetimes which
    means removing the port table from scic_sds_controller in favor of the
    one at the isci_host level.  Merge ihost->sas_ports into ihost->ports.
    _
    Reported-by: Christoph Hellwig <hch@lst.de>
    Signed-off-by: Dan Williams <dan.j.williams@intel.com>

diff --git a/drivers/scsi/isci/port.h b/drivers/scsi/isci/port.h
index ac1ac86ead6f..355034542e4c 100644
--- a/drivers/scsi/isci/port.h
+++ b/drivers/scsi/isci/port.h
@@ -53,19 +53,12 @@
  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  */
 
-/**
- * This file contains the isci_port object definition.
- *
- * port.h
- */
-
-#if !defined(_ISCI_PORT_H_)
+#ifndef _ISCI_PORT_H_
 #define _ISCI_PORT_H_
+#include "scic_sds_port.h"
 
 struct isci_phy;
 struct isci_host;
-struct scic_sds_phy;
-
 
 enum isci_status {
 	isci_freed        = 0x00,
@@ -84,9 +77,6 @@ enum isci_status {
  *
  */
 struct isci_port {
-
-	struct scic_sds_port *sci_port_handle;
-
 	enum isci_status status;
 	struct isci_host *isci_host;
 	struct asd_sas_port sas_port;
@@ -96,16 +86,19 @@ struct isci_port {
 	struct completion start_complete;
 	struct completion hard_reset_complete;
 	enum sci_status hard_reset_status;
+	struct scic_sds_port sci;
 };
 
-#define to_isci_port(p)	\
-	container_of(p, struct isci_port, sas_port);
+static inline struct isci_port *sci_port_to_iport(struct scic_sds_port *sci_port)
+{
+	struct isci_port *iport = container_of(sci_port, typeof(*iport), sci);
+
+	return iport;
+}
 
 enum isci_status isci_port_get_state(
 	struct isci_port *isci_port);
 
-
-
 void isci_port_formed(
 	struct asd_sas_phy *);
 

commit cc3dbd0a9178865d4444f8e28b51715808e9ac85
Author: Artur Wojcik <artur.wojcik@intel.com>
Date:   Wed May 4 07:58:16 2011 +0000

    isci: unify isci_host data structures
    
    Make it explicit that isci_host and scic_sds_controller are one in the same
    object.
    
    Signed-off-by: Artur Wojcik <artur.wojcik@intel.com>
    [removed ->ihost back pointer]
    Signed-off-by: Dan Williams <dan.j.williams@intel.com>

diff --git a/drivers/scsi/isci/port.h b/drivers/scsi/isci/port.h
index eeac7bbc9430..ac1ac86ead6f 100644
--- a/drivers/scsi/isci/port.h
+++ b/drivers/scsi/isci/port.h
@@ -147,11 +147,6 @@ void isci_port_hard_reset_complete(
 int isci_port_perform_hard_reset(struct isci_host *ihost, struct isci_port *iport,
 				 struct isci_phy *iphy);
 
-void isci_port_invalid_link_up(
-		struct scic_sds_controller *scic,
-		struct scic_sds_port *sci_port,
-		struct scic_sds_phy *phy);
-
 void isci_port_stop_complete(
 		struct scic_sds_controller *scic,
 		struct scic_sds_port *sci_port,

commit 88f3b62ac131e2549b6c262cacbd47e8cca42d6e
Author: Dan Williams <dan.j.williams@intel.com>
Date:   Fri Apr 22 19:18:03 2011 -0700

    isci: move remote_device handling out of the core
    
    Now that the core/lldd remote_device data structures are nominally unified
    merge the corresponding sources into the top-level directory.  Also move the
    remote_node_context infrastructure which has no analog at the lldd level.
    
    Signed-off-by: Dan Williams <dan.j.williams@intel.com>

diff --git a/drivers/scsi/isci/port.h b/drivers/scsi/isci/port.h
index 76546fd5b7d0..eeac7bbc9430 100644
--- a/drivers/scsi/isci/port.h
+++ b/drivers/scsi/isci/port.h
@@ -64,6 +64,7 @@
 
 struct isci_phy;
 struct isci_host;
+struct scic_sds_phy;
 
 
 enum isci_status {

commit 4393aa4e6b9517a666f0ef6b774fd421a9dc4c68
Author: Dan Williams <dan.j.williams@intel.com>
Date:   Thu Mar 31 13:10:44 2011 -0700

    isci: fix fragile/conditional isci_host lookups
    
    A domain_device can always reference back to ->lldd_ha unlike local lldd
    structures.  Fix up cases where the driver uses local objects to look up the
    isci_host.  This also changes the calling conventions of some routines to
    expect a valid isci_host parameter rather than re-lookup the pointer on entry.
    
    Incidentally cleans up some macros that are longer to type than the open-coded
    equivalent:
      isci_host_from_sas_ha
      isci_dev_from_domain_dev
    
    Signed-off-by: Dan Williams <dan.j.williams@intel.com>

diff --git a/drivers/scsi/isci/port.h b/drivers/scsi/isci/port.h
index dfdd12a0f68e..76546fd5b7d0 100644
--- a/drivers/scsi/isci/port.h
+++ b/drivers/scsi/isci/port.h
@@ -143,9 +143,8 @@ void isci_port_hard_reset_complete(
 	struct isci_port *isci_port,
 	enum sci_status completion_status);
 
-int isci_port_perform_hard_reset(
-	struct isci_port *isci_port_ptr,
-	struct isci_phy *isci_phy_ptr);
+int isci_port_perform_hard_reset(struct isci_host *ihost, struct isci_port *iport,
+				 struct isci_phy *iphy);
 
 void isci_port_invalid_link_up(
 		struct scic_sds_controller *scic,

commit 09d7da135b34bc74a7996b5db373521557ddf3d4
Author: Dave Jiang <dave.jiang@intel.com>
Date:   Sat Mar 26 16:11:51 2011 -0700

    isci: Remove event_* calls as they are just wrappers
    
    Removed isci_event_* calls and call those functions directly.
    
    Reported-by: Christoph Hellwig <hch@infradead.org>
    Signed-off-by: Dave Jiang <dave.jiang@intel.com>
    Signed-off-by: Dan Williams <dan.j.williams@intel.com>

diff --git a/drivers/scsi/isci/port.h b/drivers/scsi/isci/port.h
index b7a7dd7dca69..dfdd12a0f68e 100644
--- a/drivers/scsi/isci/port.h
+++ b/drivers/scsi/isci/port.h
@@ -147,5 +147,15 @@ int isci_port_perform_hard_reset(
 	struct isci_port *isci_port_ptr,
 	struct isci_phy *isci_phy_ptr);
 
+void isci_port_invalid_link_up(
+		struct scic_sds_controller *scic,
+		struct scic_sds_port *sci_port,
+		struct scic_sds_phy *phy);
+
+void isci_port_stop_complete(
+		struct scic_sds_controller *scic,
+		struct scic_sds_port *sci_port,
+		enum sci_status completion_status);
+
 #endif /* !defined(_ISCI_PORT_H_) */
 

commit 1a38045ba88ed3bee6c57444670fb639c8b61be7
Author: Dan Williams <dan.j.williams@intel.com>
Date:   Thu Mar 3 18:01:43 2011 -0800

    isci: replace remote_device_lock  with scic_lock
    
    The remote_device_lock is currently used to protect a controller global
    resource (RNCs), but the remote_device_lock is per-port.
    
    Signed-off-by: Dan Williams <dan.j.williams@intel.com>

diff --git a/drivers/scsi/isci/port.h b/drivers/scsi/isci/port.h
index b864d70363e7..b7a7dd7dca69 100644
--- a/drivers/scsi/isci/port.h
+++ b/drivers/scsi/isci/port.h
@@ -90,7 +90,6 @@ struct isci_port {
 	struct isci_host *isci_host;
 	struct asd_sas_port sas_port;
 	struct list_head remote_dev_list;
-	spinlock_t remote_device_lock;
 	spinlock_t state_lock;
 	struct list_head domain_dev_list;
 	struct completion start_complete;

commit 8acaec1593526f922ff46812d99abf9aab5c8b43
Author: Dan Williams <dan.j.williams@intel.com>
Date:   Mon Mar 7 14:47:35 2011 -0800

    isci: kill "host quiesce" mechanism
    
    The midlayer is already throttling i/o in the places where host_quiesce
    was trying to prevent further i/o to the device.  It's also problematic
    in that it holds a lock over GFP_KERNEL allocations.
    
    Signed-off-by: Dan Williams <dan.j.williams@intel.com>

diff --git a/drivers/scsi/isci/port.h b/drivers/scsi/isci/port.h
index b01b0c63e53f..b864d70363e7 100644
--- a/drivers/scsi/isci/port.h
+++ b/drivers/scsi/isci/port.h
@@ -73,7 +73,6 @@ enum isci_status {
 	isci_ready_for_io = 0x03,
 	isci_stopping     = 0x04,
 	isci_stopped      = 0x05,
-	isci_host_quiesce = 0x06
 };
 
 /**

commit 6f231dda68080759f1aed3769896e94c73099f0f
Author: Dan Williams <dan.j.williams@intel.com>
Date:   Sat Jul 2 22:56:22 2011 -0700

    isci: Intel(R) C600 Series Chipset Storage Control Unit Driver
    
    Support for the up to 2x4-port 6Gb/s SAS controllers embedded in the
    chipset.
    
    This is a snapshot of the first publicly available version of the driver,
    commit 4c1db2d0 in the 'historical' branch.
    
       git://git.kernel.org/pub/scm/linux/kernel/git/djbw/isci.git historical
    
    Signed-off-by: Maciej Trela <maciej.trela@intel.com>
    Signed-off-by: Dave Jiang <dave.jiang@intel.com>
    Signed-off-by: Edmund Nadolski <edmund.nadolski@intel.com>
    Signed-off-by: Dan Williams <dan.j.williams@intel.com>

diff --git a/drivers/scsi/isci/port.h b/drivers/scsi/isci/port.h
new file mode 100644
index 000000000000..b01b0c63e53f
--- /dev/null
+++ b/drivers/scsi/isci/port.h
@@ -0,0 +1,153 @@
+/*
+ * This file is provided under a dual BSD/GPLv2 license.  When using or
+ * redistributing this file, you may do so under either license.
+ *
+ * GPL LICENSE SUMMARY
+ *
+ * Copyright(c) 2008 - 2011 Intel Corporation. All rights reserved.
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of version 2 of the GNU General Public License as
+ * published by the Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful, but
+ * WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin St - Fifth Floor, Boston, MA 02110-1301 USA.
+ * The full GNU General Public License is included in this distribution
+ * in the file called LICENSE.GPL.
+ *
+ * BSD LICENSE
+ *
+ * Copyright(c) 2008 - 2011 Intel Corporation. All rights reserved.
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ *   * Redistributions of source code must retain the above copyright
+ *     notice, this list of conditions and the following disclaimer.
+ *   * Redistributions in binary form must reproduce the above copyright
+ *     notice, this list of conditions and the following disclaimer in
+ *     the documentation and/or other materials provided with the
+ *     distribution.
+ *   * Neither the name of Intel Corporation nor the names of its
+ *     contributors may be used to endorse or promote products derived
+ *     from this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+ * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+ * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+ * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+
+/**
+ * This file contains the isci_port object definition.
+ *
+ * port.h
+ */
+
+#if !defined(_ISCI_PORT_H_)
+#define _ISCI_PORT_H_
+
+struct isci_phy;
+struct isci_host;
+
+
+enum isci_status {
+	isci_freed        = 0x00,
+	isci_starting     = 0x01,
+	isci_ready        = 0x02,
+	isci_ready_for_io = 0x03,
+	isci_stopping     = 0x04,
+	isci_stopped      = 0x05,
+	isci_host_quiesce = 0x06
+};
+
+/**
+ * struct isci_port - This class represents the port object used to internally
+ *    represent libsas port objects. It also keeps a list of remote device
+ *    objects.
+ *
+ *
+ */
+struct isci_port {
+
+	struct scic_sds_port *sci_port_handle;
+
+	enum isci_status status;
+	struct isci_host *isci_host;
+	struct asd_sas_port sas_port;
+	struct list_head remote_dev_list;
+	spinlock_t remote_device_lock;
+	spinlock_t state_lock;
+	struct list_head domain_dev_list;
+	struct completion start_complete;
+	struct completion hard_reset_complete;
+	enum sci_status hard_reset_status;
+};
+
+#define to_isci_port(p)	\
+	container_of(p, struct isci_port, sas_port);
+
+enum isci_status isci_port_get_state(
+	struct isci_port *isci_port);
+
+
+
+void isci_port_formed(
+	struct asd_sas_phy *);
+
+void isci_port_deformed(
+	struct asd_sas_phy *);
+
+void isci_port_bc_change_received(
+	struct isci_host *isci_host,
+	struct scic_sds_port *port,
+	struct scic_sds_phy *phy);
+
+void isci_port_link_up(
+	struct isci_host *isci_host,
+	struct scic_sds_port *port,
+	struct scic_sds_phy *phy);
+
+void isci_port_link_down(
+	struct isci_host *isci_host,
+	struct isci_phy *isci_phy,
+	struct isci_port *port);
+
+void isci_port_ready(
+	struct isci_host *isci_host,
+	struct isci_port *isci_port);
+
+void isci_port_not_ready(
+	struct isci_host *isci_host,
+	struct isci_port *port);
+
+void isci_port_init(
+	struct isci_port *port,
+	struct isci_host *host,
+	int index);
+
+void isci_port_hard_reset_complete(
+	struct isci_port *isci_port,
+	enum sci_status completion_status);
+
+int isci_port_perform_hard_reset(
+	struct isci_port *isci_port_ptr,
+	struct isci_phy *isci_phy_ptr);
+
+#endif /* !defined(_ISCI_PORT_H_) */
+
