commit a61127c2130236168321cc76c5a58e15c00ad154
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Wed May 29 16:57:49 2019 -0700

    treewide: Replace GPLv2 boilerplate/reference with SPDX - rule 335
    
    Based on 1 normalized pattern(s):
    
      this program is free software you can redistribute it and or modify
      it under the terms and conditions of the gnu general public license
      version 2 as published by the free software foundation this program
      is distributed in the hope it will be useful but without any
      warranty without even the implied warranty of merchantability or
      fitness for a particular purpose see the gnu general public license
      for more details you should have received a copy of the gnu general
      public license along with this program if not write to the free
      software foundation inc 51 franklin st fifth floor boston ma 02110
      1301 usa
    
    extracted by the scancode license scanner the SPDX license identifier
    
      GPL-2.0-only
    
    has been chosen to replace the boilerplate/reference in 111 file(s).
    
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Reviewed-by: Alexios Zavras <alexios.zavras@intel.com>
    Reviewed-by: Allison Randal <allison@lohutok.net>
    Cc: linux-spdx@vger.kernel.org
    Link: https://lkml.kernel.org/r/20190530000436.567572064@linutronix.de
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/scsi/fcoe/fcoe.h b/drivers/scsi/fcoe/fcoe.h
index 6aa4820f6cc0..520c53512925 100644
--- a/drivers/scsi/fcoe/fcoe.h
+++ b/drivers/scsi/fcoe/fcoe.h
@@ -1,19 +1,7 @@
+/* SPDX-License-Identifier: GPL-2.0-only */
 /*
  * Copyright(c) 2009 Intel Corporation. All rights reserved.
  *
- * This program is free software; you can redistribute it and/or modify it
- * under the terms and conditions of the GNU General Public License,
- * version 2, as published by the Free Software Foundation.
- *
- * This program is distributed in the hope it will be useful, but WITHOUT
- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
- * more details.
- *
- * You should have received a copy of the GNU General Public License along with
- * this program; if not, write to the Free Software Foundation, Inc.,
- * 51 Franklin St - Fifth Floor, Boston, MA 02110-1301 USA.
- *
  * Maintained at www.Open-FCoE.org
  */
 

commit d242e6680e81cea0343bd93ba862efa70a91a56c
Author: Hannes Reinecke <hare@suse.de>
Date:   Mon Jul 4 10:29:23 2016 +0200

    fcoe: Use default VLAN for FIP VLAN discovery
    
    FC-BB-6 states: FIP protocols shall be performed on a per-VLAN basis. It
    is recommended to use the FIP VLAN discovery protocol on the default
    VLAN.
    
    Signed-off-by: Hannes Reinecke <hare@suse.com>
    Acked-by: Johannes Thumshirn <jth@kernel.org>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>

diff --git a/drivers/scsi/fcoe/fcoe.h b/drivers/scsi/fcoe/fcoe.h
index 2b53672bf932..6aa4820f6cc0 100644
--- a/drivers/scsi/fcoe/fcoe.h
+++ b/drivers/scsi/fcoe/fcoe.h
@@ -80,6 +80,7 @@ struct fcoe_interface {
 	struct net_device  *realdev;
 	struct packet_type fcoe_packet_type;
 	struct packet_type fip_packet_type;
+	struct packet_type fip_vlan_packet_type;
 	struct fc_exch_mgr *oem;
 	u8	removed;
 	u8	priority;

commit 8e6c5363dc52afbc60011c2c079bf4c4d26b1272
Author: Robert Love <robert.w.love@intel.com>
Date:   Tue Dec 4 02:14:53 2012 +0000

    libfc, libfcoe, fcoe: Convert debug_logging macros to pr_info
    
    Convert libfc, libfcoe and fcoe's debug_logging macros
    to use pr_info() instead of printk(KERN_INFO, ...). checkpatch.pl
    now complains about this, so convert libfcoe to preferred
    method.
    
    Signed-off-by: Robert Love <robert.w.love@intel.com>
    Tested-by: Marcus Dennis <marcusx.e.dennis@intel.com>

diff --git a/drivers/scsi/fcoe/fcoe.h b/drivers/scsi/fcoe/fcoe.h
index b42dc32cb5eb..2b53672bf932 100644
--- a/drivers/scsi/fcoe/fcoe.h
+++ b/drivers/scsi/fcoe/fcoe.h
@@ -55,12 +55,12 @@ do {                                                            	\
 
 #define FCOE_DBG(fmt, args...)						\
 	FCOE_CHECK_LOGGING(FCOE_LOGGING,				\
-			   printk(KERN_INFO "fcoe: " fmt, ##args);)
+			   pr_info("fcoe: " fmt, ##args);)
 
 #define FCOE_NETDEV_DBG(netdev, fmt, args...)			\
 	FCOE_CHECK_LOGGING(FCOE_NETDEV_LOGGING,			\
-			   printk(KERN_INFO "fcoe: %s: " fmt,	\
-				  netdev->name, ##args);)
+			   pr_info("fcoe: %s: " fmt,		\
+				   netdev->name, ##args);)
 
 /**
  * struct fcoe_interface - A FCoE interface

commit 31c37a6f21d86e6bca095b71d603ed543ae070ad
Author: Neerav Parikh <Neerav.Parikh@intel.com>
Date:   Mon Sep 24 11:52:45 2012 -0700

    [SCSI] fcoe: Fix write errors on NPIV ports
    
    SCSI errors were generated while writing to LUNs
    connected via NPIV ports.
    
    Debugging this it was found that the FCoE packets
    transmitted via the NPIV ports were not tagged with
    correct user priority as negotiated with peer by DCB
    agent. This resulted in FCoE traffic going with priority
    zero(0) that did not have priority flow control (PFC)
    enabled for it. The initiator after transferring data
    to the target never saw any reply indicating the transfer
    was complete. This resulted in error recovery (ABTS) and
    SCSI command retries by the scsi-mid layer; eventually
    resulting in I/O errors.
    
    This patch fixes this issue by keeping the FCoE user
    priority information in the fcoe_interface instance
    that is common for both the physical port as well as
    NPIV ports connected to that physical port; instead
    of storing it in fcoe_port structure that has a per
    port instance.
    
    Signed-off-by: Neerav Parikh <Neerav.Parikh@intel.com>
    Acked-by: Yi Zou <yi.zou@intel.com>
    Acked-by: John Fastabend <john.r.fastabend@intel.com>
    Tested-by: Marcus Dennis <marcusx.e.dennis@intel.com>
    Signed-off-by: Robert Love <robert.w.love@intel.com>
    Signed-off-by: James Bottomley <JBottomley@Parallels.com>

diff --git a/drivers/scsi/fcoe/fcoe.h b/drivers/scsi/fcoe/fcoe.h
index a624add4f8ec..b42dc32cb5eb 100644
--- a/drivers/scsi/fcoe/fcoe.h
+++ b/drivers/scsi/fcoe/fcoe.h
@@ -71,6 +71,7 @@ do {                                                            	\
  * @oem:	      The offload exchange manager for all local port
  *		      instances associated with this port
  * @removed:	      Indicates fcoe interface removed from net device
+ * @priority:	      Priority for the FCoE packet (DCB)
  * This structure is 1:1 with a net device.
  */
 struct fcoe_interface {
@@ -81,6 +82,7 @@ struct fcoe_interface {
 	struct packet_type fip_packet_type;
 	struct fc_exch_mgr *oem;
 	u8	removed;
+	u8	priority;
 };
 
 #define fcoe_to_ctlr(x)						\

commit 619fe4bed415e5d8a4749937f42b6a8a9031d4aa
Author: Robert Love <robert.w.love@intel.com>
Date:   Tue May 22 19:06:10 2012 -0700

    [SCSI] fcoe: Allocate fcoe_ctlr with fcoe_interface, not as a member
    
    Currently the fcoe_ctlr associated with an interface is allocated
    as a member of struct fcoe_interface. This causes problems when
    attempting to use the new fcoe_sysfs APIs which allow us to allocate
    the fcoe_interface as private data to the fcoe_ctlr_device instance.
    The problem is that libfcoe wants to be able use pointer math to find a
    fcoe_ctlr's fcoe_ctlr_device as well as finding a fcoe_ctlr_device's
    assocated fcoe_ctlr. To do this we need to allocate the
    fcoe_ctlr_device, with private data for the LLD. The private data
    contains the fcoe_ctlr and its private data is the fcoe_interface.
    This patch only allocates the fcoe_interface with the fcoe_ctlr, the
    fcoe_ctlr_device will be added in a later patch, which will complete
    the below diagram-
    
    +------------------+
    | fcoe_ctlr_device |
    +------------------+
    | fcoe_ctlr        |
    +------------------+
    | fcoe_interface   |
    +------------------+
    
    This prep work will allow us to go from a fcoe_ctlr_device instance
    to its fcoe_ctlr as well as from a fcoe_ctlr to its fcoe_ctlr_device
    once the fcoe_sysfs API is in use (later patches in this series).
    
    Signed-off-by: Robert Love <robert.w.love@intel.com>
    Tested-by: Ross Brattain <ross.b.brattain@intel.com>
    Signed-off-by: James Bottomley <JBottomley@Parallels.com>

diff --git a/drivers/scsi/fcoe/fcoe.h b/drivers/scsi/fcoe/fcoe.h
index 96ac938d39cc..a624add4f8ec 100644
--- a/drivers/scsi/fcoe/fcoe.h
+++ b/drivers/scsi/fcoe/fcoe.h
@@ -68,7 +68,6 @@ do {                                                            	\
  * @netdev:	      The associated net device
  * @fcoe_packet_type: FCoE packet type
  * @fip_packet_type:  FIP packet type
- * @ctlr:	      The FCoE controller (for FIP)
  * @oem:	      The offload exchange manager for all local port
  *		      instances associated with this port
  * @removed:	      Indicates fcoe interface removed from net device
@@ -80,12 +79,15 @@ struct fcoe_interface {
 	struct net_device  *realdev;
 	struct packet_type fcoe_packet_type;
 	struct packet_type fip_packet_type;
-	struct fcoe_ctlr   ctlr;
 	struct fc_exch_mgr *oem;
 	u8	removed;
 };
 
-#define fcoe_from_ctlr(fip) container_of(fip, struct fcoe_interface, ctlr)
+#define fcoe_to_ctlr(x)						\
+	(struct fcoe_ctlr *)(((struct fcoe_ctlr *)(x)) - 1)
+
+#define fcoe_from_ctlr(x)			\
+	((struct fcoe_interface *)((x) + 1))
 
 /**
  * fcoe_netdev() - Return the net device associated with a local port

commit 433eba04c2cb53e0bbd2fb6da22d18f725bbf33f
Author: Vasu Dev <vasu.dev@intel.com>
Date:   Fri Apr 20 12:16:27 2012 -0700

    [SCSI] fcoe: remove lport from net device before doing per cpu rx thread cleanup
    
    Remove lport from net device and then do synchronize net device to flush
    inflight rx frames for the lport before doing fcoe_percpu_clean.
    
    In case of master lport, remove all rx packet handlers completely and
    then only do fcoe_percpu_clean. This required splitting fcoe_interface_cleanup
    to do remove part separately and for that added func fcoe_interface_remove
    and then  call it from fcoe_if_destory before doing fcoe_percpu_clean.
    However if fcoe_interface_remove() is already called then
    don't call again from fcoe_interface_cleanup() to preserve its
    existing flows.
    
    This patch along with Neil's other patch to avoid soft irq context
    on ingress will avoid passing up frames on disabled lport as
    discussed in this mail thread:-
    http://lists.open-fcoe.org/pipermail/devel/2012-February/011947.html
    
    Signed-off-by: Vasu Dev <vasu.dev@intel.com>
    Acked-by: Neil Horman <nhorman@tuxdriver.com>
    Tested-by: Ross Brattain <ross.b.brattain@intel.com>
    Signed-off-by: Robert Love <robert.w.love@intel.com>
    Signed-off-by: James Bottomley <JBottomley@Parallels.com>

diff --git a/drivers/scsi/fcoe/fcoe.h b/drivers/scsi/fcoe/fcoe.h
index 3c2733a12aa1..96ac938d39cc 100644
--- a/drivers/scsi/fcoe/fcoe.h
+++ b/drivers/scsi/fcoe/fcoe.h
@@ -71,7 +71,8 @@ do {                                                            	\
  * @ctlr:	      The FCoE controller (for FIP)
  * @oem:	      The offload exchange manager for all local port
  *		      instances associated with this port
- * This structure is 1:1 with a net devive.
+ * @removed:	      Indicates fcoe interface removed from net device
+ * This structure is 1:1 with a net device.
  */
 struct fcoe_interface {
 	struct list_head   list;
@@ -81,6 +82,7 @@ struct fcoe_interface {
 	struct packet_type fip_packet_type;
 	struct fcoe_ctlr   ctlr;
 	struct fc_exch_mgr *oem;
+	u8	removed;
 };
 
 #define fcoe_from_ctlr(fip) container_of(fip, struct fcoe_interface, ctlr)

commit 1a8ef414d97bf3f293e286f02002f8db768f9867
Author: Robert Love <robert.w.love@intel.com>
Date:   Fri Feb 10 17:18:46 2012 -0800

    [SCSI] fcoe: Remove reference counting on 'stuct fcoe_interface'
    
    The reference counting was necessary on these instances
    because it was possible for NPIV ports to be destroyed
    after the N_Port. A previous patch ensures that all NPIV
    ports are destroyed before the N_Port making the need to
    track references on the interface unnecessary.
    
    Signed-off-by: Robert Love <robert.w.love@intel.com>
    Tested-by: Ross Brattain <ross.b.brattain@intel.com>
    Signed-off-by: James Bottomley <JBottomley@Parallels.com>

diff --git a/drivers/scsi/fcoe/fcoe.h b/drivers/scsi/fcoe/fcoe.h
index bcc89e639495..3c2733a12aa1 100644
--- a/drivers/scsi/fcoe/fcoe.h
+++ b/drivers/scsi/fcoe/fcoe.h
@@ -71,8 +71,6 @@ do {                                                            	\
  * @ctlr:	      The FCoE controller (for FIP)
  * @oem:	      The offload exchange manager for all local port
  *		      instances associated with this port
- * @kref:	      The kernel reference
- *
  * This structure is 1:1 with a net devive.
  */
 struct fcoe_interface {
@@ -83,7 +81,6 @@ struct fcoe_interface {
 	struct packet_type fip_packet_type;
 	struct fcoe_ctlr   ctlr;
 	struct fc_exch_mgr *oem;
-	struct kref	   kref;
 };
 
 #define fcoe_from_ctlr(fip) container_of(fip, struct fcoe_interface, ctlr)

commit 7c9c684160bc2c6668abbd2701b440e18bb9ef35
Author: Bart Van Assche <bvanassche@acm.org>
Date:   Fri Jan 13 17:26:25 2012 -0800

    [SCSI] fcoe: Move fcoe_debug_logging from fcoe.h to fcoe.c
    
    Move the definition of the global variable fcoe_debug_logging
    from fcoe.h to fcoe.c. Avoid that sparse complains about missing
    declarations for local functions or variables by declaring these
    static.
    
    Signed-off-by: Bart Van Assche <bvanassche@acm.org>
    Reviewed-by: Yi Zou <yi.zou@intel.com>
    Signed-off-by: Robert Love <robert.w.love@intel.com>
    Signed-off-by: James Bottomley <JBottomley@Parallels.com>

diff --git a/drivers/scsi/fcoe/fcoe.h b/drivers/scsi/fcoe/fcoe.h
index 6c6884bcf840..bcc89e639495 100644
--- a/drivers/scsi/fcoe/fcoe.h
+++ b/drivers/scsi/fcoe/fcoe.h
@@ -40,9 +40,7 @@
 #define FCOE_MIN_XID		0x0000	/* the min xid supported by fcoe_sw */
 #define FCOE_MAX_XID		0x0FFF	/* the max xid supported by fcoe_sw */
 
-unsigned int fcoe_debug_logging;
-module_param_named(debug_logging, fcoe_debug_logging, int, S_IRUGO|S_IWUSR);
-MODULE_PARM_DESC(debug_logging, "a bit mask of logging levels");
+extern unsigned int fcoe_debug_logging;
 
 #define FCOE_LOGGING	    0x01 /* General logging, not categorized */
 #define FCOE_NETDEV_LOGGING 0x02 /* Netdevice logging */

commit d1483bb90a01ec68c2f6dc8842ce2d449cd6d6d0
Author: Vasu Dev <vasu.dev@intel.com>
Date:   Tue Sep 27 21:38:13 2011 -0700

    [SCSI] fcoe: use real dev in case of HW vlan acceleration
    
    Use real dev in case it has HW vlan acceleration
    support since in this case the real dev would
    do needed vlan processing, this way unnecessary
    vlan layer processing avoided and it gives
    slightly better IOPS with 512B size IOs.
    
    Signed-off-by: Vasu Dev <vasu.dev@intel.com>
    Tested-by: Ross Brattain <ross.b.brattain@intel.com>
    Signed-off-by: Yi Zou <yi.zou@intel.com>
    Signed-off-by: James Bottomley <JBottomley@Parallels.com>

diff --git a/drivers/scsi/fcoe/fcoe.h b/drivers/scsi/fcoe/fcoe.h
index 408a6fd78fb4..6c6884bcf840 100644
--- a/drivers/scsi/fcoe/fcoe.h
+++ b/drivers/scsi/fcoe/fcoe.h
@@ -80,6 +80,7 @@ do {                                                            	\
 struct fcoe_interface {
 	struct list_head   list;
 	struct net_device  *netdev;
+	struct net_device  *realdev;
 	struct packet_type fcoe_packet_type;
 	struct packet_type fip_packet_type;
 	struct fcoe_ctlr   ctlr;

commit d834895c41d34b64a1923fa631e6a64f763ed31c
Author: Bhanu Prakash Gollapudi <bprakash@broadcom.com>
Date:   Thu Aug 4 17:38:49 2011 -0700

    [SCSI] fcoe: Move common functions to fcoe_transport library
    
    Export fcoe_get_wwn, fcoe_validate_vport_create and fcoe_wwn_to_str so that all
    LLDs can use these common function.
    
    Signed-off-by: Bhanu Prakash Gollapudi <bprakash@broadcom.com>
    Signed-off-by: James Bottomley <JBottomley@Parallels.com>

diff --git a/drivers/scsi/fcoe/fcoe.h b/drivers/scsi/fcoe/fcoe.h
index c4a93993c0cf..408a6fd78fb4 100644
--- a/drivers/scsi/fcoe/fcoe.h
+++ b/drivers/scsi/fcoe/fcoe.h
@@ -99,14 +99,4 @@ static inline struct net_device *fcoe_netdev(const struct fc_lport *lport)
 			((struct fcoe_port *)lport_priv(lport))->priv)->netdev;
 }
 
-static inline void wwn_to_str(u64 wwn, char *buf, int len)
-{
-	u8 wwpn[8];
-
-	u64_to_wwn(wwn, wwpn);
-	snprintf(buf, len, "%02x%02x%02x%02x%02x%02x%02x%02x",
-		wwpn[0], wwpn[1], wwpn[2], wwpn[3],
-		wwpn[4], wwpn[5], wwpn[6], wwpn[7]);
-}
-
 #endif /* _FCOE_H_ */

commit bdf252183e58654fcceedbf3fdcfd878b9e4f2d6
Author: Neerav Parikh <Neerav.Parikh@intel.com>
Date:   Mon May 16 16:45:29 2011 -0700

    [SCSI] fcoe: Prevent creation of an NPIV port with duplicate WWPN
    
    This patch adds a validation step before allowing creation of a new NPIV port.
    It checks whether the WWPN passed for the new NPIV port to be created is unique
    for the given physical port.
    
    Signed-off-by: Neerav Parikh <Neerav.Parikh@intel.com>
    Tested-by: Ross Brattain <ross.b.brattain@intel.com>
    Signed-off-by: Robert Love <robert.w.love@intel.com>
    Signed-off-by: James Bottomley <jbottomley@parallels.com>

diff --git a/drivers/scsi/fcoe/fcoe.h b/drivers/scsi/fcoe/fcoe.h
index 408a6fd78fb4..c4a93993c0cf 100644
--- a/drivers/scsi/fcoe/fcoe.h
+++ b/drivers/scsi/fcoe/fcoe.h
@@ -99,4 +99,14 @@ static inline struct net_device *fcoe_netdev(const struct fc_lport *lport)
 			((struct fcoe_port *)lport_priv(lport))->priv)->netdev;
 }
 
+static inline void wwn_to_str(u64 wwn, char *buf, int len)
+{
+	u8 wwpn[8];
+
+	u64_to_wwn(wwn, wwpn);
+	snprintf(buf, len, "%02x%02x%02x%02x%02x%02x%02x%02x",
+		wwpn[0], wwpn[1], wwpn[2], wwpn[3],
+		wwpn[4], wwpn[5], wwpn[6], wwpn[7]);
+}
+
 #endif /* _FCOE_H_ */

commit f4d2b2b6ea8abd0df72a31b4724522a277af6a6c
Author: Bhanu Prakash Gollapudi <bprakash@broadcom.com>
Date:   Fri Feb 25 15:03:12 2011 -0800

    [SCSI] libfcoe: Move FCOE_MTU definition from fcoe.h to libfcoe.h
    
    both fcoe and bnx2fc drivers can access the common definition of
    FCOE_MTU.
    
    Signed-off-by: Bhanu Prakash Gollapudi <bprakash@broadcom.com>
    Signed-off-by: Robert Love <robert.w.love@intel.com>
    Signed-off-by: James Bottomley <James.Bottomley@suse.de>

diff --git a/drivers/scsi/fcoe/fcoe.h b/drivers/scsi/fcoe/fcoe.h
index d775128398e9..408a6fd78fb4 100644
--- a/drivers/scsi/fcoe/fcoe.h
+++ b/drivers/scsi/fcoe/fcoe.h
@@ -40,12 +40,6 @@
 #define FCOE_MIN_XID		0x0000	/* the min xid supported by fcoe_sw */
 #define FCOE_MAX_XID		0x0FFF	/* the max xid supported by fcoe_sw */
 
-/*
- * Max MTU for FCoE: 14 (FCoE header) + 24 (FC header) + 2112 (max FC payload)
- * + 4 (FC CRC) + 4 (FCoE trailer) =  2158 bytes
- */
-#define FCOE_MTU	2158
-
 unsigned int fcoe_debug_logging;
 module_param_named(debug_logging, fcoe_debug_logging, int, S_IRUGO|S_IWUSR);
 MODULE_PARM_DESC(debug_logging, "a bit mask of logging levels");

commit 8597ae8bfe35f5e438b00ba5df852e97ebe1ac23
Author: Bhanu Prakash Gollapudi <bprakash@broadcom.com>
Date:   Fri Jan 28 16:05:37 2011 -0800

    [SCSI] libfcoe: Move common code from fcoe to libfcoe module
    
    To facilitate LLDDs to reuse the code, skb queue related functions are moved to
    libfcoe, so that both fcoe and bnx2fc drivers can use them. The common structures
    fcoe_port, fcoe_percpu_s are moved to libfcoe. fcoe_port will now have an
    opaque pointer that points to corresponding driver's interface structure.
    Also, fcoe_start_io and fcoe_fc_crc are moved to libfcoe.
    
    As part of this change, fixed fcoe_start_io to return ENOMEM if
    skb_clone fails.
    
    Signed-off-by: Bhanu Prakash Gollapudi <bprakash@broadcom.com>
    Signed-off-by: Robert Love <robert.w.love@intel.com>
    Signed-off-by: James Bottomley <James.Bottomley@suse.de>

diff --git a/drivers/scsi/fcoe/fcoe.h b/drivers/scsi/fcoe/fcoe.h
index c69b2c56c2d1..d775128398e9 100644
--- a/drivers/scsi/fcoe/fcoe.h
+++ b/drivers/scsi/fcoe/fcoe.h
@@ -24,7 +24,7 @@
 #include <linux/kthread.h>
 
 #define FCOE_MAX_QUEUE_DEPTH	256
-#define FCOE_LOW_QUEUE_DEPTH	32
+#define FCOE_MIN_QUEUE_DEPTH	32
 
 #define FCOE_WORD_TO_BYTE	4
 
@@ -70,21 +70,6 @@ do {                                                            	\
 			   printk(KERN_INFO "fcoe: %s: " fmt,	\
 				  netdev->name, ##args);)
 
-/**
- * struct fcoe_percpu_s - The per-CPU context for FCoE receive threads
- * @thread:	    The thread context
- * @fcoe_rx_list:   The queue of pending packets to process
- * @page:	    The memory page for calculating frame trailer CRCs
- * @crc_eof_offset: The offset into the CRC page pointing to available
- *		    memory for a new trailer
- */
-struct fcoe_percpu_s {
-	struct task_struct *thread;
-	struct sk_buff_head fcoe_rx_list;
-	struct page *crc_eof_page;
-	int crc_eof_offset;
-};
-
 /**
  * struct fcoe_interface - A FCoE interface
  * @list:	      Handle for a list of FCoE interfaces
@@ -108,30 +93,6 @@ struct fcoe_interface {
 	struct kref	   kref;
 };
 
-/**
- * struct fcoe_port - The FCoE private structure
- * @fcoe:		       The associated fcoe interface
- * @lport:		       The associated local port
- * @fcoe_pending_queue:	       The pending Rx queue of skbs
- * @fcoe_pending_queue_active: Indicates if the pending queue is active
- * @timer:		       The queue timer
- * @destroy_work:	       Handle for work context
- *			       (to prevent RTNL deadlocks)
- * @data_srt_addr:	       Source address for data
- *
- * An instance of this structure is to be allocated along with the
- * Scsi_Host and libfc fc_lport structures.
- */
-struct fcoe_port {
-	struct fcoe_interface *fcoe;
-	struct fc_lport	      *lport;
-	struct sk_buff_head   fcoe_pending_queue;
-	u8		      fcoe_pending_queue_active;
-	struct timer_list     timer;
-	struct work_struct    destroy_work;
-	u8		      data_src_addr[ETH_ALEN];
-};
-
 #define fcoe_from_ctlr(fip) container_of(fip, struct fcoe_interface, ctlr)
 
 /**
@@ -140,7 +101,8 @@ struct fcoe_port {
  */
 static inline struct net_device *fcoe_netdev(const struct fc_lport *lport)
 {
-	return ((struct fcoe_port *)lport_priv(lport))->fcoe->netdev;
+	return ((struct fcoe_interface *)
+			((struct fcoe_port *)lport_priv(lport))->priv)->netdev;
 }
 
 #endif /* _FCOE_H_ */

commit 1875f27e291d05711f15a8a3d486abfeaf385931
Author: Robert Love <robert.w.love@intel.com>
Date:   Tue Nov 3 11:47:50 2009 -0800

    [SCSI] fcoe: Formatting cleanups and commenting
    
    Added kernel-doc comment blocks to all structures and functions.
    
    Renamed fc_lport instances rom lp to lport to be inline with our
    naming convention.
    
    Renamed all misnamed net_device instances to netdev to be inline
    with our naming convention.
    
    Signed-off-by: Robert Love <robert.w.love@intel.com>
    Signed-off-by: James Bottomley <James.Bottomley@suse.de>

diff --git a/drivers/scsi/fcoe/fcoe.h b/drivers/scsi/fcoe/fcoe.h
index 99dfa7c2aeaa..c69b2c56c2d1 100644
--- a/drivers/scsi/fcoe/fcoe.h
+++ b/drivers/scsi/fcoe/fcoe.h
@@ -50,7 +50,7 @@ unsigned int fcoe_debug_logging;
 module_param_named(debug_logging, fcoe_debug_logging, int, S_IRUGO|S_IWUSR);
 MODULE_PARM_DESC(debug_logging, "a bit mask of logging levels");
 
-#define FCOE_LOGGING        0x01 /* General logging, not categorized */
+#define FCOE_LOGGING	    0x01 /* General logging, not categorized */
 #define FCOE_NETDEV_LOGGING 0x02 /* Netdevice logging */
 
 #define FCOE_CHECK_LOGGING(LEVEL, CMD)					\
@@ -70,8 +70,13 @@ do {                                                            	\
 			   printk(KERN_INFO "fcoe: %s: " fmt,	\
 				  netdev->name, ##args);)
 
-/*
- * this percpu struct for fcoe
+/**
+ * struct fcoe_percpu_s - The per-CPU context for FCoE receive threads
+ * @thread:	    The thread context
+ * @fcoe_rx_list:   The queue of pending packets to process
+ * @page:	    The memory page for calculating frame trailer CRCs
+ * @crc_eof_offset: The offset into the CRC page pointing to available
+ *		    memory for a new trailer
  */
 struct fcoe_percpu_s {
 	struct task_struct *thread;
@@ -80,38 +85,62 @@ struct fcoe_percpu_s {
 	int crc_eof_offset;
 };
 
-/*
- * an FCoE interface, 1:1 with netdev
+/**
+ * struct fcoe_interface - A FCoE interface
+ * @list:	      Handle for a list of FCoE interfaces
+ * @netdev:	      The associated net device
+ * @fcoe_packet_type: FCoE packet type
+ * @fip_packet_type:  FIP packet type
+ * @ctlr:	      The FCoE controller (for FIP)
+ * @oem:	      The offload exchange manager for all local port
+ *		      instances associated with this port
+ * @kref:	      The kernel reference
+ *
+ * This structure is 1:1 with a net devive.
  */
 struct fcoe_interface {
-	struct list_head list;
-	struct net_device *netdev;
-	struct packet_type  fcoe_packet_type;
-	struct packet_type  fip_packet_type;
-	struct fcoe_ctlr ctlr;
-	struct fc_exch_mgr *oem;		/* offload exchange manager */
-	struct kref kref;
+	struct list_head   list;
+	struct net_device  *netdev;
+	struct packet_type fcoe_packet_type;
+	struct packet_type fip_packet_type;
+	struct fcoe_ctlr   ctlr;
+	struct fc_exch_mgr *oem;
+	struct kref	   kref;
 };
 
-/*
- * the FCoE private structure that's allocated along with the
- * Scsi_Host and libfc fc_lport structures
+/**
+ * struct fcoe_port - The FCoE private structure
+ * @fcoe:		       The associated fcoe interface
+ * @lport:		       The associated local port
+ * @fcoe_pending_queue:	       The pending Rx queue of skbs
+ * @fcoe_pending_queue_active: Indicates if the pending queue is active
+ * @timer:		       The queue timer
+ * @destroy_work:	       Handle for work context
+ *			       (to prevent RTNL deadlocks)
+ * @data_srt_addr:	       Source address for data
+ *
+ * An instance of this structure is to be allocated along with the
+ * Scsi_Host and libfc fc_lport structures.
  */
 struct fcoe_port {
 	struct fcoe_interface *fcoe;
-	struct fc_lport *lport;
-	struct sk_buff_head fcoe_pending_queue;
-	u8	fcoe_pending_queue_active;
-	struct timer_list timer;		/* queue timer */
-	struct work_struct destroy_work;	/* to prevent rtnl deadlocks */
-	u8 data_src_addr[ETH_ALEN];
+	struct fc_lport	      *lport;
+	struct sk_buff_head   fcoe_pending_queue;
+	u8		      fcoe_pending_queue_active;
+	struct timer_list     timer;
+	struct work_struct    destroy_work;
+	u8		      data_src_addr[ETH_ALEN];
 };
 
 #define fcoe_from_ctlr(fip) container_of(fip, struct fcoe_interface, ctlr)
 
-static inline struct net_device *fcoe_netdev(const struct fc_lport *lp)
+/**
+ * fcoe_netdev() - Return the net device associated with a local port
+ * @lport: The local port to get the net device from
+ */
+static inline struct net_device *fcoe_netdev(const struct fc_lport *lport)
 {
-	return ((struct fcoe_port *)lport_priv(lp))->fcoe->netdev;
+	return ((struct fcoe_port *)lport_priv(lport))->fcoe->netdev;
 }
 
 #endif /* _FCOE_H_ */

commit 11b561886643d4e23d0fd58c205d830a448dd0a2
Author: Chris Leech <christopher.leech@intel.com>
Date:   Tue Nov 3 11:46:29 2009 -0800

    [SCSI] libfcoe, fcoe: libfcoe NPIV support
    
    The FIP code in libfcoe needed several changes to support NPIV
    
    1) dst_src_addr needs to be managed per-n_port-ID for FPMA fabrics with NPIV
       enabled.  Managing the MAC address is now handled in fcoe, with some slight
       changes to update_mac() and a new get_src_addr() function pointer.
    
    2) The libfc elsct_send() hook is used to setup FCoE specific response
       handlers for FIP encapsulated ELS exchanges.  This lets the FCoE specific
       handling know which VN_Port the exchange is for, and doesn't require
       tracking OX_IDs.  It might be possible to roll back to the full FIP frame
       in these, but for now I've just stashed the contents of the MAC address
       descriptor in the skb context block for later use.  Also, because
       fcoe_elsct_send() just passes control on to fc_elsct_send(), all transmits
       still come through the normal frame_send() path.
    
    3) The NPIV changes added a mutex hold in the keep alive sending, the lport
       mutex is protecting the vport list.  We can't take a mutex from a timer,
       so move the FIP keep alive logic to the link work struct.
    
    Signed-off-by: Chris Leech <christopher.leech@intel.com>
    Signed-off-by: Robert Love <robert.w.love@intel.com>
    Signed-off-by: James Bottomley <James.Bottomley@suse.de>

diff --git a/drivers/scsi/fcoe/fcoe.h b/drivers/scsi/fcoe/fcoe.h
index a123552847e5..99dfa7c2aeaa 100644
--- a/drivers/scsi/fcoe/fcoe.h
+++ b/drivers/scsi/fcoe/fcoe.h
@@ -104,6 +104,7 @@ struct fcoe_port {
 	u8	fcoe_pending_queue_active;
 	struct timer_list timer;		/* queue timer */
 	struct work_struct destroy_work;	/* to prevent rtnl deadlocks */
+	u8 data_src_addr[ETH_ALEN];
 };
 
 #define fcoe_from_ctlr(fip) container_of(fip, struct fcoe_interface, ctlr)

commit 2171c225f641c5402e4c47180d791a612278040e
Author: Robert Love <robert.w.love@intel.com>
Date:   Tue Nov 3 11:45:42 2009 -0800

    [SCSI] fcoe: Increase FCOE_MAX_LUN to 0xFFFF (65535)
    
    The maximum number of LUNs was far too low. This value is
    what most other FC HBAs are using.
    
    Signed-off-by: Robert Love <robert.w.love@intel.com>
    Signed-off-by: James Bottomley <James.Bottomley@suse.de>

diff --git a/drivers/scsi/fcoe/fcoe.h b/drivers/scsi/fcoe/fcoe.h
index c578082aef8b..a123552847e5 100644
--- a/drivers/scsi/fcoe/fcoe.h
+++ b/drivers/scsi/fcoe/fcoe.h
@@ -32,7 +32,7 @@
 #define FCOE_NAME	"fcoe"
 #define FCOE_VENDOR	"Open-FCoE.org"
 
-#define FCOE_MAX_LUN		255
+#define FCOE_MAX_LUN		0xFFFF
 #define FCOE_MAX_FCP_TARGET	256
 
 #define FCOE_MAX_OUTSTANDING_COMMANDS	1024

commit 7221d7e59d1c675828b6de50b757cd8282011a5d
Author: Yi Zou <yi.zou@intel.com>
Date:   Wed Oct 21 16:27:52 2009 -0700

    [SCSI] fcoe: Use NETIF_F_FCOE_MTU flag to set up max frame size (lport->mfs)
    
    Add a define of FCOE_MTU as 2158 bytes and use FCOE_MTU when the LLD is found
    to support NETIF_F_FCOE_MTU. The lport->mfs is then calculated out of the
    2158 FCOE_MTU. Otherwise, we stick with the netdev->mtu, i.e., LAN MTU. Also,
    change the notification on NETDEV_CHANGEMTU event to bypass changing mfs when
    LAN MTU is changed if NETIF_F_FCOE_MTU is supported.
    
    Signed-off-by: Yi Zou <yi.zou@intel.com>
    Signed-off-by: Robert Love <robert.w.love@intel.com>
    Signed-off-by: James Bottomley <James.Bottomley@suse.de>

diff --git a/drivers/scsi/fcoe/fcoe.h b/drivers/scsi/fcoe/fcoe.h
index ce7f60fb1bc0..c578082aef8b 100644
--- a/drivers/scsi/fcoe/fcoe.h
+++ b/drivers/scsi/fcoe/fcoe.h
@@ -40,6 +40,12 @@
 #define FCOE_MIN_XID		0x0000	/* the min xid supported by fcoe_sw */
 #define FCOE_MAX_XID		0x0FFF	/* the max xid supported by fcoe_sw */
 
+/*
+ * Max MTU for FCoE: 14 (FCoE header) + 24 (FC header) + 2112 (max FC payload)
+ * + 4 (FC CRC) + 4 (FCoE trailer) =  2158 bytes
+ */
+#define FCOE_MTU	2158
+
 unsigned int fcoe_debug_logging;
 module_param_named(debug_logging, fcoe_debug_logging, int, S_IRUGO|S_IWUSR);
 MODULE_PARM_DESC(debug_logging, "a bit mask of logging levels");

commit 2e70e2415193b84c1b79ec373af15c3f280ad7c4
Author: Chris Leech <christopher.leech@intel.com>
Date:   Tue Aug 25 14:00:23 2009 -0700

    [SCSI] fcoe: Fix module ref count bug by adding NETDEV UNREGISTER handling
    
    Fixes reference counting on fcoe_instance and net_device, and adds
    NETDEV_UNREGISTER notifier handling so that you can unload network drivers.
    FCoE no longer increments the module use count for the network driver.
    
    On an NETDEV_UNREGISTER event, destroying the FCoE instance is deferred to a
    workqueue context to avoid RTNL deadlocks.
    
    Based in part by an earlier patch from John Fastabend
    
    John's patch description:
    Currently, the netdev module ref count is not decremented with module_put()
    when the module is unloaded while fcoe instances are present. To fix this
    removed reference count on netdev module completely and added functionality to
    netdev event handling for NETDEV_UNREGISTER events.
    
    This allows fcoe to remove devices cleanly when the netdev module is unloaded
    so we no longer need to hold a reference count for the netdev module.
    
    Signed-off-by: Chris Leech <christopher.leech@intel.com>
    Signed-off-by: Robert Love <robert.w.love@intel.com>
    Signed-off-by: James Bottomley <James.Bottomley@suse.de>

diff --git a/drivers/scsi/fcoe/fcoe.h b/drivers/scsi/fcoe/fcoe.h
index ff229288b7f0..ce7f60fb1bc0 100644
--- a/drivers/scsi/fcoe/fcoe.h
+++ b/drivers/scsi/fcoe/fcoe.h
@@ -93,9 +93,11 @@ struct fcoe_interface {
  */
 struct fcoe_port {
 	struct fcoe_interface *fcoe;
+	struct fc_lport *lport;
 	struct sk_buff_head fcoe_pending_queue;
 	u8	fcoe_pending_queue_active;
 	struct timer_list timer;		/* queue timer */
+	struct work_struct destroy_work;	/* to prevent rtnl deadlocks */
 };
 
 #define fcoe_from_ctlr(fip) container_of(fip, struct fcoe_interface, ctlr)

commit 030f4e001f13e0ee80bac1e756013341b1674d10
Author: Chris Leech <christopher.leech@intel.com>
Date:   Tue Aug 25 14:00:02 2009 -0700

    [SCSI] fcoe: fcoe_interface create, destroy and refcounting
    
    Up to this point the fcoe_instance structure was simply kzalloc/kfreed.  This
    patch introduces create and destroy functions as well as kref based reference
    counting.  The create function will grow as the initialization code is moved
    there.
    
    Signed-off-by: Chris Leech <christopher.leech@intel.com>
    Signed-off-by: Robert Love <robert.w.love@intel.com>
    Signed-off-by: James Bottomley <James.Bottomley@suse.de>

diff --git a/drivers/scsi/fcoe/fcoe.h b/drivers/scsi/fcoe/fcoe.h
index 673e70e1f8bb..ff229288b7f0 100644
--- a/drivers/scsi/fcoe/fcoe.h
+++ b/drivers/scsi/fcoe/fcoe.h
@@ -84,6 +84,7 @@ struct fcoe_interface {
 	struct packet_type  fip_packet_type;
 	struct fcoe_ctlr ctlr;
 	struct fc_exch_mgr *oem;		/* offload exchange manager */
+	struct kref kref;
 };
 
 /*

commit cb0a6ca81439a9f113d3b46de0953da168a06f6a
Author: Chris Leech <christopher.leech@intel.com>
Date:   Tue Aug 25 13:59:56 2009 -0700

    [SCSI] fcoe: remove fcoe_interface->priv pointer
    
    The priv pointer is no longer needed, and once NPIV is enabled
    fcoe_interface:fc_lport becomes a one-to-many relationship.
    
    Remove the single pointer.
    
    Signed-off-by: Chris Leech <christopher.leech@intel.com>
    Signed-off-by: Robert Love <robert.w.love@intel.com>
    Signed-off-by: James Bottomley <James.Bottomley@suse.de>

diff --git a/drivers/scsi/fcoe/fcoe.h b/drivers/scsi/fcoe/fcoe.h
index 26e859574604..673e70e1f8bb 100644
--- a/drivers/scsi/fcoe/fcoe.h
+++ b/drivers/scsi/fcoe/fcoe.h
@@ -79,9 +79,6 @@ struct fcoe_percpu_s {
  */
 struct fcoe_interface {
 	struct list_head list;
-	/* This will be removed once all the shared values are
-	 * moved out of fcoe_port */
-	struct fcoe_port *priv;
 	struct net_device *netdev;
 	struct packet_type  fcoe_packet_type;
 	struct packet_type  fip_packet_type;

commit 991cbb6082db3025bd82908eb9ee2d2920be2114
Author: Chris Leech <christopher.leech@intel.com>
Date:   Tue Aug 25 13:59:51 2009 -0700

    [SCSI] fcoe: move offload exchange manager pointer from fcoe_port to fcoe_interface
    
    The offload EM pointer is only used when setting up a new libfc instance, but
    as it's designed to be shared among NPIV VN_Ports it should be tracked in
    fcoe_interface.
    
    With the host-list changed to track fcoe_interfaces as well, this is needed
    before we can remove the priv pointer from that structure (which is only there
    to help in the transition, and stops making sense once NPIV is enabled).
    
    Signed-off-by: Chris Leech <christopher.leech@intel.com>
    Signed-off-by: Robert Love <robert.w.love@intel.com>
    Signed-off-by: James Bottomley <James.Bottomley@suse.de>

diff --git a/drivers/scsi/fcoe/fcoe.h b/drivers/scsi/fcoe/fcoe.h
index 5b190b5fea3f..26e859574604 100644
--- a/drivers/scsi/fcoe/fcoe.h
+++ b/drivers/scsi/fcoe/fcoe.h
@@ -86,6 +86,7 @@ struct fcoe_interface {
 	struct packet_type  fcoe_packet_type;
 	struct packet_type  fip_packet_type;
 	struct fcoe_ctlr ctlr;
+	struct fc_exch_mgr *oem;		/* offload exchange manager */
 };
 
 /*
@@ -94,7 +95,6 @@ struct fcoe_interface {
  */
 struct fcoe_port {
 	struct fcoe_interface *fcoe;
-	struct fc_exch_mgr *oem;		/* offload exchange manger */
 	struct sk_buff_head fcoe_pending_queue;
 	u8	fcoe_pending_queue_active;
 	struct timer_list timer;		/* queue timer */

commit 3fe9a0badae7fa2eb35eff4f07e851fbd25e3d4f
Author: Chris Leech <christopher.leech@intel.com>
Date:   Tue Aug 25 13:59:46 2009 -0700

    [SCSI] fcoe: move FIP controller from fcoe_port to fcoe_interface
    
    There is only one FIP state per net_device, so the FIP controller needs to be
    moved from the per-SCSI-host fcoe_port to the per-net_device fcoe_interface
    structure.
    
    Signed-off-by: Chris Leech <christopher.leech@intel.com>
    Signed-off-by: Robert Love <robert.w.love@intel.com>
    Signed-off-by: James Bottomley <James.Bottomley@suse.de>

diff --git a/drivers/scsi/fcoe/fcoe.h b/drivers/scsi/fcoe/fcoe.h
index 685aa9d02226..5b190b5fea3f 100644
--- a/drivers/scsi/fcoe/fcoe.h
+++ b/drivers/scsi/fcoe/fcoe.h
@@ -85,6 +85,7 @@ struct fcoe_interface {
 	struct net_device *netdev;
 	struct packet_type  fcoe_packet_type;
 	struct packet_type  fip_packet_type;
+	struct fcoe_ctlr ctlr;
 };
 
 /*
@@ -97,10 +98,9 @@ struct fcoe_port {
 	struct sk_buff_head fcoe_pending_queue;
 	u8	fcoe_pending_queue_active;
 	struct timer_list timer;		/* queue timer */
-	struct fcoe_ctlr ctlr;
 };
 
-#define fcoe_from_ctlr(fip) container_of(fip, struct fcoe_port, ctlr)
+#define fcoe_from_ctlr(fip) container_of(fip, struct fcoe_interface, ctlr)
 
 static inline struct net_device *fcoe_netdev(const struct fc_lport *lp)
 {

commit 259ad85d8dbbcd508e3dad29a36e3e76365853b7
Author: Chris Leech <christopher.leech@intel.com>
Date:   Tue Aug 25 13:59:41 2009 -0700

    [SCSI] fcoe: move packet handlers from fcoe_port to fcoe_interface
    
    The packet handlers need to be tracked in fcoe_interface so there is only one
    set per net_device.  When NPIV is enabled there will be multiple SCSI hosts
    and multiple fcoe_port structures on a single net_device.
    
    The packet handlers match by ethertype and netdev.  If the same handler gets
    registered on a single netdev multiple times, the receive function will be
    called multiple times for each frame.
    
    Signed-off-by: Chris Leech <christopher.leech@intel.com>
    Signed-off-by: Robert Love <robert.w.love@intel.com>
    Signed-off-by: James Bottomley <James.Bottomley@suse.de>

diff --git a/drivers/scsi/fcoe/fcoe.h b/drivers/scsi/fcoe/fcoe.h
index 3b3886e99b48..685aa9d02226 100644
--- a/drivers/scsi/fcoe/fcoe.h
+++ b/drivers/scsi/fcoe/fcoe.h
@@ -83,6 +83,8 @@ struct fcoe_interface {
 	 * moved out of fcoe_port */
 	struct fcoe_port *priv;
 	struct net_device *netdev;
+	struct packet_type  fcoe_packet_type;
+	struct packet_type  fip_packet_type;
 };
 
 /*
@@ -92,8 +94,6 @@ struct fcoe_interface {
 struct fcoe_port {
 	struct fcoe_interface *fcoe;
 	struct fc_exch_mgr *oem;		/* offload exchange manger */
-	struct packet_type  fcoe_packet_type;
-	struct packet_type  fip_packet_type;
 	struct sk_buff_head fcoe_pending_queue;
 	u8	fcoe_pending_queue_active;
 	struct timer_list timer;		/* queue timer */

commit 250249898a92a1228050f40fbe3c05deb1392da8
Author: Chris Leech <christopher.leech@intel.com>
Date:   Tue Aug 25 13:59:35 2009 -0700

    [SCSI] fcoe: move netdev to fcoe_interface
    
    The network interface needs to be shared between all NPIV VN_Ports, therefor
    it should be tracked in the fcoe_interface and not for each SCSI host in
    fcoe_port.
    
    Signed-off-by: Chris Leech <christopher.leech@intel.com>
    Signed-off-by: Robert Love <robert.w.love@intel.com>
    Signed-off-by: James Bottomley <James.Bottomley@suse.de>

diff --git a/drivers/scsi/fcoe/fcoe.h b/drivers/scsi/fcoe/fcoe.h
index 060a6dce6580..3b3886e99b48 100644
--- a/drivers/scsi/fcoe/fcoe.h
+++ b/drivers/scsi/fcoe/fcoe.h
@@ -82,6 +82,7 @@ struct fcoe_interface {
 	/* This will be removed once all the shared values are
 	 * moved out of fcoe_port */
 	struct fcoe_port *priv;
+	struct net_device *netdev;
 };
 
 /*
@@ -90,7 +91,6 @@ struct fcoe_interface {
  */
 struct fcoe_port {
 	struct fcoe_interface *fcoe;
-	struct net_device *netdev;
 	struct fc_exch_mgr *oem;		/* offload exchange manger */
 	struct packet_type  fcoe_packet_type;
 	struct packet_type  fip_packet_type;
@@ -100,12 +100,11 @@ struct fcoe_port {
 	struct fcoe_ctlr ctlr;
 };
 
-#define fcoe_from_ctlr(port) container_of(port, struct fcoe_port, ctlr)
+#define fcoe_from_ctlr(fip) container_of(fip, struct fcoe_port, ctlr)
 
-static inline struct net_device *fcoe_netdev(
-	const struct fc_lport *lp)
+static inline struct net_device *fcoe_netdev(const struct fc_lport *lp)
 {
-	return ((struct fcoe_port *)lport_priv(lp))->netdev;
+	return ((struct fcoe_port *)lport_priv(lp))->fcoe->netdev;
 }
 
 #endif /* _FCOE_H_ */

commit 014f5c3f560a336cb8ad5b9f828c85de0398e7bb
Author: Chris Leech <christopher.leech@intel.com>
Date:   Tue Aug 25 13:59:30 2009 -0700

    [SCSI] fcoe: Introduce and allocate fcoe_interface structure, 1:1 with net_device
    
    In preparation for NPIV support, I'm splitting the fcoe instance structure
    into two to remove the assumptions about it being 1:1 with the net_device.
    There will now be two structures, one which is 1:1 with the underlying
    net_device and one which is allocated per virtual SCSI/FC host.
    
    fcoe_softc is renamed to fcoe_port for the per Scsi_Host FCoE private data.
    
    Later patches with start moving shared stuff from fcoe_port to fcoe_interface
    
    Signed-off-by: Chris Leech <christopher.leech@intel.com>
    Signed-off-by: Robert Love <robert.w.love@intel.com>
    Signed-off-by: James Bottomley <James.Bottomley@suse.de>

diff --git a/drivers/scsi/fcoe/fcoe.h b/drivers/scsi/fcoe/fcoe.h
index 550d1e49d1a3..060a6dce6580 100644
--- a/drivers/scsi/fcoe/fcoe.h
+++ b/drivers/scsi/fcoe/fcoe.h
@@ -75,10 +75,21 @@ struct fcoe_percpu_s {
 };
 
 /*
- * the fcoe sw transport private data
+ * an FCoE interface, 1:1 with netdev
  */
-struct fcoe_softc {
+struct fcoe_interface {
 	struct list_head list;
+	/* This will be removed once all the shared values are
+	 * moved out of fcoe_port */
+	struct fcoe_port *priv;
+};
+
+/*
+ * the FCoE private structure that's allocated along with the
+ * Scsi_Host and libfc fc_lport structures
+ */
+struct fcoe_port {
+	struct fcoe_interface *fcoe;
 	struct net_device *netdev;
 	struct fc_exch_mgr *oem;		/* offload exchange manger */
 	struct packet_type  fcoe_packet_type;
@@ -89,12 +100,12 @@ struct fcoe_softc {
 	struct fcoe_ctlr ctlr;
 };
 
-#define fcoe_from_ctlr(fc) container_of(fc, struct fcoe_softc, ctlr)
+#define fcoe_from_ctlr(port) container_of(port, struct fcoe_port, ctlr)
 
 static inline struct net_device *fcoe_netdev(
 	const struct fc_lport *lp)
 {
-	return ((struct fcoe_softc *)lport_priv(lp))->netdev;
+	return ((struct fcoe_port *)lport_priv(lp))->netdev;
 }
 
 #endif /* _FCOE_H_ */

commit e4bc50bedf0dd6c63f20a7bc0a2b46667664fba1
Author: Vasu Dev <vasu.dev@intel.com>
Date:   Tue Aug 25 13:58:47 2009 -0700

    [SCSI] fcoe, libfc: adds per cpu exch pool within exchange manager(EM)
    
    Adds per cpu exch pool for these reasons:-
    
     1. Currently an EM instance is shared across all cpus to manage
        all exches for all cpus. This required em_lock across all
        cpus for an exch alloc, free, lookup and reset each frame
        and that made em_lock expensive, so instead having per cpu
        exch pool with their own per cpu pool lock will likely reduce
        locking contention in fast path for an exch alloc, free and
        lookup.
    
     2. Per cpu exch pool will likely improve cache hit ratio since
        all frames of an exch will be processed on the same cpu on
        which exch originated.
    
    This patch is only prep work to help in keeping complexity of next
    patch low, so this patch only sets up per cpu exch pool and related
    helper funcs to be used by next patch. The next patch fully makes
    use of per cpu exch pool in all code paths ie. tx, rx and reset.
    
    Divides per EM exch id range equally across all cpus to setup per
    cpu exch pool. This division is such that lower bits of exch id
    carries cpu number info on which exch originated, later a simple
    bitwise AND operation on exch id of incoming frame with fc_cpu_mask
    retrieves cpu number info to direct all frames to same cpu on which
    exch originated. This required a global fc_cpu_mask and fc_cpu_order
    initialized to max possible cpus number nr_cpu_ids rounded up to 2's
    power, this will be used in mapping exch id and exch ptr array
    index in pool during exch allocation, find or reset code paths.
    
    Adds a check in fc_exch_mgr_alloc() to ensure specified min_xid
    lower bits are zero since these bits are used to carry cpu info.
    
    Adds and initializes struct fc_exch_pool with all required fields
    to manage exches in pool.
    
    Allocates per cpu struct fc_exch_pool with memory for exches array
    for range of exches per pool. The exches array memory is followed
    by struct fc_exch_pool.
    
    Adds fc_exch_ptr_get/set() helper functions to get/set exch ptr in
    pool exches array at specified array index.
    
    Increases default FCOE_MAX_XID to 0x0FFF from 0x07EF, so that more
    exches are available per cpu after above described exch id range
    division across all cpus to each pool.
    
    Signed-off-by: Vasu Dev <vasu.dev@intel.com>
    Signed-off-by: Robert Love <robert.w.love@intel.com>
    Signed-off-by: James Bottomley <James.Bottomley@suse.de>

diff --git a/drivers/scsi/fcoe/fcoe.h b/drivers/scsi/fcoe/fcoe.h
index 65120e21f5c4..550d1e49d1a3 100644
--- a/drivers/scsi/fcoe/fcoe.h
+++ b/drivers/scsi/fcoe/fcoe.h
@@ -38,7 +38,7 @@
 #define FCOE_MAX_OUTSTANDING_COMMANDS	1024
 
 #define FCOE_MIN_XID		0x0000	/* the min xid supported by fcoe_sw */
-#define FCOE_MAX_XID		0x07ef	/* the max xid supported by fcoe_sw */
+#define FCOE_MAX_XID		0x0FFF	/* the max xid supported by fcoe_sw */
 
 unsigned int fcoe_debug_logging;
 module_param_named(debug_logging, fcoe_debug_logging, int, S_IRUGO|S_IWUSR);

commit a69b06bc5e7b153043db8984564b731f99e014fc
Author: Joe Eykholt <jeykholt@cisco.com>
Date:   Tue Aug 25 13:58:42 2009 -0700

    [SCSI] fcoe: libfcoe: extra semicolon in CHECK_LOGGING macros causes compile error
    
    If using code like this:
            if (foo)
                    FCOE_DBG("foo\n);
            else
                    FCOE_DBG("bar\n");
    
    one gets compile errors because FCOE_DBG expands with its own semicolon,
    making one too many for the if-statement.
    
    Remove the offending semicolon in fcoe.h and also a similar case
    in libfcoe.c.
    
    Signed-off-by: Joe Eykholt <jeykholt@cisco.com>
    Signed-off-by: Robert Love <robert.w.love@intel.com>
    Signed-off-by: James Bottomley <James.Bottomley@suse.de>

diff --git a/drivers/scsi/fcoe/fcoe.h b/drivers/scsi/fcoe/fcoe.h
index 68b9f855073b..65120e21f5c4 100644
--- a/drivers/scsi/fcoe/fcoe.h
+++ b/drivers/scsi/fcoe/fcoe.h
@@ -53,7 +53,7 @@ do {                                                            	\
 		do {							\
 			CMD;						\
 		} while (0);						\
-} while (0);
+} while (0)
 
 #define FCOE_DBG(fmt, args...)						\
 	FCOE_CHECK_LOGGING(FCOE_LOGGING,				\

commit ee610c6701875525d5c61fa6e56ddbf3e645b8df
Author: Robert Love <robert.w.love@intel.com>
Date:   Tue Aug 25 13:58:31 2009 -0700

    [SCSI] fcoe: Add format spacing to FCOE_NETDEV_DBG debug macro
    
    There's currently no space between the interface name and the
    user specified format/string. This patch adds a space and a colon
    to the output to separate the interface name and the user
    specified string.
    
    So, instead of "ethXfoo" it will read "ethX: foo".
    
    Signed-off-by: Robert Love <robert.w.love@intel.com>
    Signed-off-by: James Bottomley <James.Bottomley@suse.de>

diff --git a/drivers/scsi/fcoe/fcoe.h b/drivers/scsi/fcoe/fcoe.h
index 5ae8ca71afcb..68b9f855073b 100644
--- a/drivers/scsi/fcoe/fcoe.h
+++ b/drivers/scsi/fcoe/fcoe.h
@@ -61,7 +61,7 @@ do {                                                            	\
 
 #define FCOE_NETDEV_DBG(netdev, fmt, args...)			\
 	FCOE_CHECK_LOGGING(FCOE_NETDEV_LOGGING,			\
-			   printk(KERN_INFO "fcoe: %s" fmt,	\
+			   printk(KERN_INFO "fcoe: %s: " fmt,	\
 				  netdev->name, ##args);)
 
 /*

commit 1d1b88dc01e5fd2b3e2abb7aa42d0f1eca4c33ea
Author: Vasu Dev <vasu.dev@intel.com>
Date:   Wed Jul 29 17:05:45 2009 -0700

    [SCSI] fcoe: removes phys_dev and renames real_dev to netdev.
    
    The phys_dev was used only to locate common offload EM instance for all
    FCoE instances on a eth devices in function fcoe_em_config, so just updated
    fcoe_em_config to look for actual real eth device in locating common offload
    EM instance and then no need to store phys_dev in fcoe_softc, so removes
    phys_dev from fcoe_softc also.
    
    Renames fcoe_softc real_dev to netdev and updates all its uses to use netdev.
    
    So effectively no functional change, use of single netdev instead phys_dev
    and real_dev saves one pointer memory in fcoe_softc, also real_dev used here
    was confusing with vlan driver terminology since real_dev in vlan driver is
    referred to physical eth device.
    
    Signed-off-by: Vasu Dev <vasu.dev@intel.com>
    Signed-off-by: Robert Love <robert.w.love@intel.com>
    Signed-off-by: James Bottomley <James.Bottomley@HansenPartnership.com>
    Signed-off-by: James Bottomley <James.Bottomley@suse.de>

diff --git a/drivers/scsi/fcoe/fcoe.h b/drivers/scsi/fcoe/fcoe.h
index 6905efc166bf..5ae8ca71afcb 100644
--- a/drivers/scsi/fcoe/fcoe.h
+++ b/drivers/scsi/fcoe/fcoe.h
@@ -79,8 +79,7 @@ struct fcoe_percpu_s {
  */
 struct fcoe_softc {
 	struct list_head list;
-	struct net_device *real_dev;
-	struct net_device *phys_dev;		/* device with ethtool_ops */
+	struct net_device *netdev;
 	struct fc_exch_mgr *oem;		/* offload exchange manger */
 	struct packet_type  fcoe_packet_type;
 	struct packet_type  fip_packet_type;
@@ -95,7 +94,7 @@ struct fcoe_softc {
 static inline struct net_device *fcoe_netdev(
 	const struct fc_lport *lp)
 {
-	return ((struct fcoe_softc *)lport_priv(lp))->real_dev;
+	return ((struct fcoe_softc *)lport_priv(lp))->netdev;
 }
 
 #endif /* _FCOE_H_ */

commit d7179680d04f1e196b7a5f70e7f93bb1850407c6
Author: Vasu Dev <vasu.dev@intel.com>
Date:   Wed Jul 29 17:05:21 2009 -0700

    [SCSI] fcoe, libfc: adds offload EM per eth device with only single xid range per EM
    
    Updates fcoe_em_config to allocate a single instance of sharable offload
    EM for supported lp->lro_xid per eth device, and then share this EM
    for subsequently more lports creation on same eth device (e.g when using
    VLAN).
    
    Adds tiny fcoe_oem_match function for offload EM to return true for read
    types IO to have read IO exchanges allocated from offload shared EM.
    
    Removes fc_em_alloc_xid function completely which was needed to manage
    two xid ranges within a EM, this is not needed any more with allocation
    of separate sharable offload EM per eth device. Instead this patch adds
    simple xid allocation logic to manage single xid range.
    
    Adds fc_exch_em_alloc with mp->next_xid as cursor to allocate new xid
    from single xid range of EM, uses mp->next_xid instead removed mp->last_xid
    which slightly increase probability of finding empty xid on exch allocation.
    
    Removes restriction of not allowing use of xid zero along with changing
    two xid range change to single xid range.
    
    Makes fc_fcp_ddp_setup calling conditional to only xid allocated from
    shared offload EM.
    
    Signed-off-by: Vasu Dev <vasu.dev@intel.com>
    Signed-off-by: Robert Love <robert.w.love@intel.com>
    Signed-off-by: James Bottomley <James.Bottomley@HansenPartnership.com>
    Signed-off-by: James Bottomley <James.Bottomley@suse.de>

diff --git a/drivers/scsi/fcoe/fcoe.h b/drivers/scsi/fcoe/fcoe.h
index 0d724fa0898f..6905efc166bf 100644
--- a/drivers/scsi/fcoe/fcoe.h
+++ b/drivers/scsi/fcoe/fcoe.h
@@ -37,7 +37,7 @@
 
 #define FCOE_MAX_OUTSTANDING_COMMANDS	1024
 
-#define FCOE_MIN_XID		0x0001	/* the min xid supported by fcoe_sw */
+#define FCOE_MIN_XID		0x0000	/* the min xid supported by fcoe_sw */
 #define FCOE_MAX_XID		0x07ef	/* the max xid supported by fcoe_sw */
 
 unsigned int fcoe_debug_logging;
@@ -81,6 +81,7 @@ struct fcoe_softc {
 	struct list_head list;
 	struct net_device *real_dev;
 	struct net_device *phys_dev;		/* device with ethtool_ops */
+	struct fc_exch_mgr *oem;		/* offload exchange manger */
 	struct packet_type  fcoe_packet_type;
 	struct packet_type  fip_packet_type;
 	struct sk_buff_head fcoe_pending_queue;

commit d5488eb9cd2b06f7dcca7053274edb337987c67c
Author: Robert Love <robert.w.love@intel.com>
Date:   Wed Jun 10 15:30:59 2009 -0700

    fcoe: Add runtime debug logging with module parameter debug_logging
    
    This patch converts all FC_DBG statements to use new runtime tunable
    debug macros. The fcoe.ko module now has a debug_logging module
    parameter.
    
    fcoe_debug_logging is an unsigned integer representing a bitmask of all
    available logging levels. Currently only two logging levels are
    supported-
    
       bit
    LSB 0 = general fcoe logging
        1 = netdevice related logging
    
    This patch also attempts to clean up some debug statement formatting
    so it's more readable.
    
    Signed-off-by: Robert Love <robert.w.love@intel.com>
    Signed-off-by: James Bottomley <James.Bottomley@HansenPartnership.com>

diff --git a/drivers/scsi/fcoe/fcoe.h b/drivers/scsi/fcoe/fcoe.h
index a1eb8c1988b0..0d724fa0898f 100644
--- a/drivers/scsi/fcoe/fcoe.h
+++ b/drivers/scsi/fcoe/fcoe.h
@@ -40,6 +40,30 @@
 #define FCOE_MIN_XID		0x0001	/* the min xid supported by fcoe_sw */
 #define FCOE_MAX_XID		0x07ef	/* the max xid supported by fcoe_sw */
 
+unsigned int fcoe_debug_logging;
+module_param_named(debug_logging, fcoe_debug_logging, int, S_IRUGO|S_IWUSR);
+MODULE_PARM_DESC(debug_logging, "a bit mask of logging levels");
+
+#define FCOE_LOGGING        0x01 /* General logging, not categorized */
+#define FCOE_NETDEV_LOGGING 0x02 /* Netdevice logging */
+
+#define FCOE_CHECK_LOGGING(LEVEL, CMD)					\
+do {                                                            	\
+	if (unlikely(fcoe_debug_logging & LEVEL))			\
+		do {							\
+			CMD;						\
+		} while (0);						\
+} while (0);
+
+#define FCOE_DBG(fmt, args...)						\
+	FCOE_CHECK_LOGGING(FCOE_LOGGING,				\
+			   printk(KERN_INFO "fcoe: " fmt, ##args);)
+
+#define FCOE_NETDEV_DBG(netdev, fmt, args...)			\
+	FCOE_CHECK_LOGGING(FCOE_NETDEV_LOGGING,			\
+			   printk(KERN_INFO "fcoe: %s" fmt,	\
+				  netdev->name, ##args);)
+
 /*
  * this percpu struct for fcoe
  */

commit 1047f22108bd9bfedefd3ff014cb56691dfbaa3f
Author: Vasu Dev <vasu.dev@intel.com>
Date:   Wed May 6 10:52:40 2009 -0700

    [SCSI] fcoe: removes fcoe_watchdog
    
    Removes periodic fcoe_watchdog timer used across all fcoe interface
    maintained in fcoe_hostlist instead added new fcoe_queue_timer
    per fcoe interface.
    
    Added timer is armed only when some pending skb need to be flushed
    as oppose to periodic 1 second fcoe_watchdog, since now
    fcoe_queue_timer is used on demand thus set this to 2 jiffies.
    
    Now fcoe_queue_timer is much simple than fcoe_watchdog using lock to
    process all fcoe interface from fcoe_hostlist.
    
    I noticed +ve performance result with using 2 jiffies timer as
    this helps flushing fcoe_pending_queue quickly.
    
    Signed-off-by: Vasu Dev <vasu.dev@intel.com>
    Signed-off-by: James Bottomley <James.Bottomley@HansenPartnership.com>

diff --git a/drivers/scsi/fcoe/fcoe.h b/drivers/scsi/fcoe/fcoe.h
index 917aae886897..a1eb8c1988b0 100644
--- a/drivers/scsi/fcoe/fcoe.h
+++ b/drivers/scsi/fcoe/fcoe.h
@@ -61,6 +61,7 @@ struct fcoe_softc {
 	struct packet_type  fip_packet_type;
 	struct sk_buff_head fcoe_pending_queue;
 	u8	fcoe_pending_queue_active;
+	struct timer_list timer;		/* queue timer */
 	struct fcoe_ctlr ctlr;
 };
 

commit 97c8389d54b9665c38105ea72a428a44b97ff2f6
Author: Joe Eykholt <jeykholt@cisco.com>
Date:   Tue Mar 17 11:42:40 2009 -0700

    [SCSI] fcoe, libfcoe: Add support for FIP. FCoE discovery and keep-alive.
    
    FIP is the new standard way to discover Fibre-Channel Forwarders (FCFs)
    by sending solicitations and listening for advertisements from FCFs.
    
    It also provides for keep-alives and period advertisements so that both
    parties know they have connectivity.  If the FCF loses connectivity to
    the storage fabric, it can send a Link Reset to inform the E_node.
    
    This version is also compatible with pre-FIP implementations, so no
    configured selection between FIP mode and non-FIP mode is required.
    
    We wait a couple seconds after sending the initial solicitation
    and then send an old-style FLOGI.  If we receive any FIP frames,
    we use FIP only mode.  If the old FLOGI receives a response,
    we disable FIP mode.  After every reset or link up, this
    determination is repeated.
    
    Signed-off-by: Joe Eykholt <jeykholt@cisco.com>
    Signed-off-by: Vasu Dev <vasu.dev@intel.com>
    Signed-off-by: Robert Love <robert.w.love@intel.com>
    Signed-off-by: James Bottomley <James.Bottomley@HansenPartnership.com>

diff --git a/drivers/scsi/fcoe/fcoe.h b/drivers/scsi/fcoe/fcoe.h
index 4a9611f5a589..917aae886897 100644
--- a/drivers/scsi/fcoe/fcoe.h
+++ b/drivers/scsi/fcoe/fcoe.h
@@ -26,10 +26,6 @@
 #define FCOE_MAX_QUEUE_DEPTH	256
 #define FCOE_LOW_QUEUE_DEPTH	32
 
-/* destination address mode */
-#define FCOE_GW_ADDR_MODE	0x00
-#define FCOE_FCOUI_ADDR_MODE	0x01
-
 #define FCOE_WORD_TO_BYTE	4
 
 #define FCOE_VERSION	"0.1"
@@ -59,24 +55,17 @@ struct fcoe_percpu_s {
  */
 struct fcoe_softc {
 	struct list_head list;
-	struct fc_lport *lp;
 	struct net_device *real_dev;
 	struct net_device *phys_dev;		/* device with ethtool_ops */
 	struct packet_type  fcoe_packet_type;
+	struct packet_type  fip_packet_type;
 	struct sk_buff_head fcoe_pending_queue;
 	u8	fcoe_pending_queue_active;
-
-	u8 dest_addr[ETH_ALEN];
-	u8 ctl_src_addr[ETH_ALEN];
-	u8 data_src_addr[ETH_ALEN];
-	/*
-	 * fcoe protocol address learning related stuff
-	 */
-	u16 flogi_oxid;
-	u8 flogi_progress;
-	u8 address_mode;
+	struct fcoe_ctlr ctlr;
 };
 
+#define fcoe_from_ctlr(fc) container_of(fc, struct fcoe_softc, ctlr)
+
 static inline struct net_device *fcoe_netdev(
 	const struct fc_lport *lp)
 {

commit fdd78027fd472351783fb6110a72d991c1a07402
Author: Vasu Dev <vasu.dev@intel.com>
Date:   Tue Mar 17 11:42:24 2009 -0700

    [SCSI] fcoe: cleans up libfcoe.h and adds fcoe.h for fcoe module
    
    Removes no where used several inline functions prefixed with skb_*
    and be16_to_cpu.
    
    Moves fcoe module specific func prototypes to fcoe.c from libfcoe.h,
    moved only need for build.
    
    Adds fcoe module header file fcoe.h and then moves fcoe module
    specific fcoe_percpu_s and fcoe_softc to fcoe.h from libfcoe.h.
    
    Moves all defines from fcoe.c to fcoe.h since now fcoe module
    has its own header file fcoe.h.
    
    [jejb: removed EXPORT_SYMBOL_GPL(fcoe_fc_crc) which caused a section mismatch]
    Signed-off-by: Vasu Dev <vasu.dev@intel.com>
    Signed-off-by: Robert Love <robert.w.love@intel.com>
    Signed-off-by: James Bottomley <James.Bottomley@HansenPartnership.com>

diff --git a/drivers/scsi/fcoe/fcoe.h b/drivers/scsi/fcoe/fcoe.h
new file mode 100644
index 000000000000..4a9611f5a589
--- /dev/null
+++ b/drivers/scsi/fcoe/fcoe.h
@@ -0,0 +1,86 @@
+/*
+ * Copyright(c) 2009 Intel Corporation. All rights reserved.
+ *
+ * This program is free software; you can redistribute it and/or modify it
+ * under the terms and conditions of the GNU General Public License,
+ * version 2, as published by the Free Software Foundation.
+ *
+ * This program is distributed in the hope it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
+ * more details.
+ *
+ * You should have received a copy of the GNU General Public License along with
+ * this program; if not, write to the Free Software Foundation, Inc.,
+ * 51 Franklin St - Fifth Floor, Boston, MA 02110-1301 USA.
+ *
+ * Maintained at www.Open-FCoE.org
+ */
+
+#ifndef _FCOE_H_
+#define _FCOE_H_
+
+#include <linux/skbuff.h>
+#include <linux/kthread.h>
+
+#define FCOE_MAX_QUEUE_DEPTH	256
+#define FCOE_LOW_QUEUE_DEPTH	32
+
+/* destination address mode */
+#define FCOE_GW_ADDR_MODE	0x00
+#define FCOE_FCOUI_ADDR_MODE	0x01
+
+#define FCOE_WORD_TO_BYTE	4
+
+#define FCOE_VERSION	"0.1"
+#define FCOE_NAME	"fcoe"
+#define FCOE_VENDOR	"Open-FCoE.org"
+
+#define FCOE_MAX_LUN		255
+#define FCOE_MAX_FCP_TARGET	256
+
+#define FCOE_MAX_OUTSTANDING_COMMANDS	1024
+
+#define FCOE_MIN_XID		0x0001	/* the min xid supported by fcoe_sw */
+#define FCOE_MAX_XID		0x07ef	/* the max xid supported by fcoe_sw */
+
+/*
+ * this percpu struct for fcoe
+ */
+struct fcoe_percpu_s {
+	struct task_struct *thread;
+	struct sk_buff_head fcoe_rx_list;
+	struct page *crc_eof_page;
+	int crc_eof_offset;
+};
+
+/*
+ * the fcoe sw transport private data
+ */
+struct fcoe_softc {
+	struct list_head list;
+	struct fc_lport *lp;
+	struct net_device *real_dev;
+	struct net_device *phys_dev;		/* device with ethtool_ops */
+	struct packet_type  fcoe_packet_type;
+	struct sk_buff_head fcoe_pending_queue;
+	u8	fcoe_pending_queue_active;
+
+	u8 dest_addr[ETH_ALEN];
+	u8 ctl_src_addr[ETH_ALEN];
+	u8 data_src_addr[ETH_ALEN];
+	/*
+	 * fcoe protocol address learning related stuff
+	 */
+	u16 flogi_oxid;
+	u8 flogi_progress;
+	u8 address_mode;
+};
+
+static inline struct net_device *fcoe_netdev(
+	const struct fc_lport *lp)
+{
+	return ((struct fcoe_softc *)lport_priv(lp))->real_dev;
+}
+
+#endif /* _FCOE_H_ */
