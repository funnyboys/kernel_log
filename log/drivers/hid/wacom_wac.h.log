commit 74acee309fb2a434dce215d44014e6f8e06975ae
Merge: 4c12954965fd cca478617465 eca0f0a6c3fb dbcbabf7da92 6e2abc68585b
Author: Jiri Kosina <jkosina@suse.cz>
Date:   Wed Jul 10 01:39:57 2019 +0200

    Merge branches 'for-5.2/fixes', 'for-5.3/doc', 'for-5.3/ish', 'for-5.3/logitech' and 'for-5.3/wacom' into for-linus

commit f4e11d599610a61e978f722f6ade660872a43816
Author: Aaron Armstrong Skomra <skomra@gmail.com>
Date:   Wed Jun 12 14:19:30 2019 -0700

    HID: wacom: generic: support the 'report valid' usage for touch
    
    Finger data is separated into chunks in our Bluetooth report,
    where each report contains the same number of chunks. Those chunks
    are not aligned in any particular way to a set of finger touches.
    That is, the first half of a group of simultaneous touches may
    be in one chunk at the end of a report and the second half could
    be at the beginning of the next report.
    
    Also some chunks contain no data and potentially some chunks could
    contain leftover (bad) data.
    
    Introduce and process the WACOM_HID_WT_REPORT_VALID usage that the
    device uses to let us know if we should process a chunk of data.
    
    Signed-off-by: Aaron Armstrong Skomra <aaron.skomra@wacom.com>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>

diff --git a/drivers/hid/wacom_wac.h b/drivers/hid/wacom_wac.h
index 48f08f8a556d..1cb63a4a0a41 100644
--- a/drivers/hid/wacom_wac.h
+++ b/drivers/hid/wacom_wac.h
@@ -159,6 +159,7 @@
 #define WACOM_HID_WT_SERIALNUMBER       (WACOM_HID_UP_WACOMTOUCH | 0x5b)
 #define WACOM_HID_WT_X                  (WACOM_HID_UP_WACOMTOUCH | 0x130)
 #define WACOM_HID_WT_Y                  (WACOM_HID_UP_WACOMTOUCH | 0x131)
+#define WACOM_HID_WT_REPORT_VALID       (WACOM_HID_UP_WACOMTOUCH | 0x1d0)
 
 #define WACOM_BATTERY_USAGE(f)	(((f)->hid == HID_DG_BATTERYSTRENGTH) || \
 				 ((f)->hid == WACOM_HID_WD_BATTERY_CHARGING) || \

commit 912c6aa67ad4252dc92e6569cfcb32ee44575183
Author: Aaron Armstrong Skomra <skomra@gmail.com>
Date:   Wed Jun 12 14:19:28 2019 -0700

    HID: wacom: Add 2nd gen Intuos Pro Small support
    
    The existing INTUOSP2_BT device class supports LEDs and this device
    does not. A new device class enum entry, "INTUOSP2S_BT", is created
    to avoid the INTUOSP2_BT LED code.
    
    Signed-off-by: Aaron Armstrong Skomra <aaron.skomra@wacom.com>
    Reviewed-by: Jason Gerecke <jason.gerecke@wacom.com>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>

diff --git a/drivers/hid/wacom_wac.h b/drivers/hid/wacom_wac.h
index f67d871841c0..48f08f8a556d 100644
--- a/drivers/hid/wacom_wac.h
+++ b/drivers/hid/wacom_wac.h
@@ -215,6 +215,7 @@ enum {
 	INTUOSPM,
 	INTUOSPL,
 	INTUOSP2_BT,
+	INTUOSP2S_BT,
 	INTUOSHT3_BT,
 	WACOM_21UX2,
 	WACOM_22HD,

commit 2874c5fd284268364ece81a7bd936f3c8168e567
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Mon May 27 08:55:01 2019 +0200

    treewide: Replace GPLv2 boilerplate/reference with SPDX - rule 152
    
    Based on 1 normalized pattern(s):
    
      this program is free software you can redistribute it and or modify
      it under the terms of the gnu general public license as published by
      the free software foundation either version 2 of the license or at
      your option any later version
    
    extracted by the scancode license scanner the SPDX license identifier
    
      GPL-2.0-or-later
    
    has been chosen to replace the boilerplate/reference in 3029 file(s).
    
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Reviewed-by: Allison Randal <allison@lohutok.net>
    Cc: linux-spdx@vger.kernel.org
    Link: https://lkml.kernel.org/r/20190527070032.746973796@linutronix.de
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/hid/wacom_wac.h b/drivers/hid/wacom_wac.h
index 295fd3718caa..cac68d1c20c5 100644
--- a/drivers/hid/wacom_wac.h
+++ b/drivers/hid/wacom_wac.h
@@ -1,10 +1,6 @@
+/* SPDX-License-Identifier: GPL-2.0-or-later */
 /*
  * drivers/input/tablet/wacom_wac.h
- *
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation; either version 2 of the License, or
- * (at your option) any later version.
  */
 #ifndef WACOM_WAC_H
 #define WACOM_WAC_H

commit d8e9806005f28bbb49899dab2068e3359e22ba35
Author: Aaron Armstrong Skomra <skomra@gmail.com>
Date:   Fri May 10 15:31:16 2019 -0700

    HID: wacom: generic: only switch the mode on devices with LEDs
    
    Currently, the driver will attempt to set the mode on all
    devices with a center button, but some devices with a center
    button lack LEDs, and attempting to set the LEDs on devices
    without LEDs results in the kernel error message of the form:
    
    "leds input8::wacom-0.1: Setting an LED's brightness failed (-32)"
    
    This is because the generic codepath erroneously assumes that the
    BUTTON_CENTER usage indicates that the device has LEDs, the
    previously ignored TOUCH_RING_SETTING usage is a more accurate
    indication of the existence of LEDs on the device.
    
    Fixes: 10c55cacb8b2 ("HID: wacom: generic: support LEDs")
    Cc: <stable@vger.kernel.org> # v4.11+
    Signed-off-by: Aaron Armstrong Skomra <aaron.skomra@wacom.com>
    Reviewed-by: Jason Gerecke <jason.gerecke@wacom.com>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>

diff --git a/drivers/hid/wacom_wac.h b/drivers/hid/wacom_wac.h
index 295fd3718caa..f67d871841c0 100644
--- a/drivers/hid/wacom_wac.h
+++ b/drivers/hid/wacom_wac.h
@@ -145,6 +145,7 @@
 #define WACOM_HID_WD_OFFSETBOTTOM       (WACOM_HID_UP_WACOMDIGITIZER | 0x0d33)
 #define WACOM_HID_WD_DATAMODE           (WACOM_HID_UP_WACOMDIGITIZER | 0x1002)
 #define WACOM_HID_WD_DIGITIZERINFO      (WACOM_HID_UP_WACOMDIGITIZER | 0x1013)
+#define WACOM_HID_WD_TOUCH_RING_SETTING (WACOM_HID_UP_WACOMDIGITIZER | 0x1032)
 #define WACOM_HID_UP_G9                 0xff090000
 #define WACOM_HID_G9_PEN                (WACOM_HID_UP_G9 | 0x02)
 #define WACOM_HID_G9_TOUCHSCREEN        (WACOM_HID_UP_G9 | 0x11)

commit b1f466a90c516d54bd8bea7fb142a807d7800304
Author: Aaron Armstrong Skomra <skomra@gmail.com>
Date:   Tue Mar 6 10:48:35 2018 -0800

    HID: wacom: generic: add the "Report Valid" usage
    
    Wacom Bluetooth reports contain multiple pen frames per report.
    Each frame contains a flag indicating if the frame is valid.
    Future Wacom devices with this type of report may contain HID
    descriptors, add support for this usage to the generic codepath
    of the Wacom driver.
    
    Signed-off-by: Aaron Armstrong Skomra <skomra@gmail.com>
    Reviewed-by: Ping Cheng <ping.cheng@wacom.com>
    Reviewed-by: Jason Gerecke <jason.gerecke@wacom.com>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>

diff --git a/drivers/hid/wacom_wac.h b/drivers/hid/wacom_wac.h
index 827d8fc4a3f2..295fd3718caa 100644
--- a/drivers/hid/wacom_wac.h
+++ b/drivers/hid/wacom_wac.h
@@ -118,6 +118,7 @@
 #define WACOM_HID_WD_TOUCHSTRIP2        (WACOM_HID_UP_WACOMDIGITIZER | 0x0137)
 #define WACOM_HID_WD_TOUCHRING          (WACOM_HID_UP_WACOMDIGITIZER | 0x0138)
 #define WACOM_HID_WD_TOUCHRINGSTATUS    (WACOM_HID_UP_WACOMDIGITIZER | 0x0139)
+#define WACOM_HID_WD_REPORT_VALID       (WACOM_HID_UP_WACOMDIGITIZER | 0x01d0)
 #define WACOM_HID_WD_ACCELEROMETER_X    (WACOM_HID_UP_WACOMDIGITIZER | 0x0401)
 #define WACOM_HID_WD_ACCELEROMETER_Y    (WACOM_HID_UP_WACOMDIGITIZER | 0x0402)
 #define WACOM_HID_WD_ACCELEROMETER_Z    (WACOM_HID_UP_WACOMDIGITIZER | 0x0403)
@@ -353,7 +354,7 @@ struct wacom_wac {
 	bool has_mute_touch_switch;
 	bool has_mode_change;
 	bool is_direct_mode;
-
+	bool is_invalid_bt_frame;
 };
 
 #endif

commit 87046b6c995c50c11c8bd4a71877df83f99b3516
Author: Aaron Armstrong Skomra <skomra@gmail.com>
Date:   Tue Mar 6 10:48:33 2018 -0800

    HID: wacom: Add support for 3rd generation Intuos BT
    
    Use the code path that predates generic device support.
    
    Signed-off-by: Aaron Armstrong Skomra <skomra@gmail.com>
    Reviewed-by: Ping Cheng <ping.cheng@wacom.com>
    Reviewed-by: Jason Gerecke <jason.gerecke@wacom.com>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>

diff --git a/drivers/hid/wacom_wac.h b/drivers/hid/wacom_wac.h
index 15d9c14fbdf7..827d8fc4a3f2 100644
--- a/drivers/hid/wacom_wac.h
+++ b/drivers/hid/wacom_wac.h
@@ -213,6 +213,7 @@ enum {
 	INTUOSPM,
 	INTUOSPL,
 	INTUOSP2_BT,
+	INTUOSHT3_BT,
 	WACOM_21UX2,
 	WACOM_22HD,
 	DTK,

commit 83417206427bdf0fef9fa69957807194f25923c3
Author: Jason Gerecke <killertofu@gmail.com>
Date:   Fri Nov 10 11:50:01 2017 -0800

    HID: wacom: Queue events with missing type/serial data for later processing
    
    Userspace expects to receive tool type and serial number information
    for the active pen in the very first kernel report, if such data is
    supported by the hardware. While this expectation is not an issue for
    EMR devices, AES sensors will often send several packets worth of in-
    range data before relaying type/serial data to the kernel. Sending this
    data "late" can result in proximity-tracking issues by xf86-input-wacom,
    or an inability to distinguish different pens by input-wacom.
    
    Options for dealing with this situation include ignoring reports from
    the tablet until we get the necessary data, or using the information
    from the last-seen pen instead of the (eventual) real data. Neither
    option is particularly attractive: the former results in truncated
    strokes and the latter causes issues with switching between pens.
    
    This commit instead opts to queue up events with missing information
    until we receive a report which contains it. At that point, we can
    update the driver's state variables (id[0] and serial[0]) and replay
    the queued events.
    
    Signed-off-by: Jason Gerecke <jason.gerecke@wacom.com>
    Reviewed-by: Benjamin Tissoires <benjamin.tissoires@redhat.com>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>

diff --git a/drivers/hid/wacom_wac.h b/drivers/hid/wacom_wac.h
index 6fe6d60f9ab5..15d9c14fbdf7 100644
--- a/drivers/hid/wacom_wac.h
+++ b/drivers/hid/wacom_wac.h
@@ -11,6 +11,7 @@
 
 #include <linux/types.h>
 #include <linux/hid.h>
+#include <linux/kfifo.h>
 
 /* maximum packet length for USB/BT devices */
 #define WACOM_PKGLEN_MAX	361
@@ -88,6 +89,7 @@
 #define WACOM_QUIRK_SENSE		0x0002
 #define WACOM_QUIRK_AESPEN		0x0004
 #define WACOM_QUIRK_BATTERY		0x0008
+#define WACOM_QUIRK_TOOLSERIAL		0x0010
 
 /* device types */
 #define WACOM_DEVICETYPE_NONE           0x0000
@@ -339,6 +341,7 @@ struct wacom_wac {
 	struct input_dev *pen_input;
 	struct input_dev *touch_input;
 	struct input_dev *pad_input;
+	struct kfifo_rec_ptr_2 pen_fifo;
 	int pid;
 	int num_contacts_left;
 	u8 bt_features;

commit 99acedadde157a02b21761fd406ef7adc7615533
Author: Jason Gerecke <killertofu@gmail.com>
Date:   Fri Nov 10 11:50:00 2017 -0800

    HID: wacom: Properly handle AES serial number and tool type
    
    Current AES sensors relay tool type and serial number information with
    a different set of usages than those prescribed by the modern (i.e.
    MobileStudio Pro and newer) EMR tablet standard. To ensure the driver
    properly understands these usages, we modify them to be compatible.
    The identifying information is split across three consecutive fields:
    a 16-bit WACOM_HID_WT_SERIALNUMBER (which is more accurately described
    as WACOM_HID_WD_TOOLTYPE), a 32-bit HID_DG_TOOLSERIALNUMBER, and an
    8-bit 0xFF000000 (which should be WACOM_HID_WD_SERIALHI). While we're
    at it, we also define proper min/max values since may may be undefined
    on some devices.
    
    Signed-off-by: Jason Gerecke <jason.gerecke@wacom.com>
    Reviewed-by: Benjamin Tissoires <benjamin.tissoires@redhat.com>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>

diff --git a/drivers/hid/wacom_wac.h b/drivers/hid/wacom_wac.h
index 64d8f014602e..6fe6d60f9ab5 100644
--- a/drivers/hid/wacom_wac.h
+++ b/drivers/hid/wacom_wac.h
@@ -86,6 +86,7 @@
 /* device quirks */
 #define WACOM_QUIRK_BBTOUCH_LOWRES	0x0001
 #define WACOM_QUIRK_SENSE		0x0002
+#define WACOM_QUIRK_AESPEN		0x0004
 #define WACOM_QUIRK_BATTERY		0x0008
 
 /* device types */
@@ -107,6 +108,7 @@
 #define WACOM_HID_WD_PEN                (WACOM_HID_UP_WACOMDIGITIZER | 0x02)
 #define WACOM_HID_WD_SENSE              (WACOM_HID_UP_WACOMDIGITIZER | 0x36)
 #define WACOM_HID_WD_DIGITIZERFNKEYS    (WACOM_HID_UP_WACOMDIGITIZER | 0x39)
+#define WACOM_HID_WD_SERIALNUMBER       (WACOM_HID_UP_WACOMDIGITIZER | 0x5b)
 #define WACOM_HID_WD_SERIALHI           (WACOM_HID_UP_WACOMDIGITIZER | 0x5c)
 #define WACOM_HID_WD_TOOLTYPE           (WACOM_HID_UP_WACOMDIGITIZER | 0x77)
 #define WACOM_HID_WD_DISTANCE           (WACOM_HID_UP_WACOMDIGITIZER | 0x0132)
@@ -150,6 +152,7 @@
 #define WACOM_HID_WT_TOUCHSCREEN        (WACOM_HID_UP_WACOMTOUCH | 0x04)
 #define WACOM_HID_WT_TOUCHPAD           (WACOM_HID_UP_WACOMTOUCH | 0x05)
 #define WACOM_HID_WT_CONTACTMAX         (WACOM_HID_UP_WACOMTOUCH | 0x55)
+#define WACOM_HID_WT_SERIALNUMBER       (WACOM_HID_UP_WACOMTOUCH | 0x5b)
 #define WACOM_HID_WT_X                  (WACOM_HID_UP_WACOMTOUCH | 0x130)
 #define WACOM_HID_WT_Y                  (WACOM_HID_UP_WACOMTOUCH | 0x131)
 

commit 01125b2d1fe9d691333cc90b17a4e2fd5bb908a2
Merge: 4b5453049471 5b01b3b8b122
Author: Jiri Kosina <jkosina@suse.cz>
Date:   Wed Nov 15 11:14:23 2017 +0100

    Merge branch 'for-4.15/wacom' into for-linus
    
    - High resolution mode for DEll canvas support, from Benjamin Tissoires
    - A lot of improvements to pen handling in the Wacom driver, from Jason Gerecke
    
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>

commit 9e429d564926d3bca49907fa03031da705ad6f2c
Author: Jason Gerecke <killertofu@gmail.com>
Date:   Tue Nov 7 08:25:17 2017 -0800

    HID: wacom: generic: Send BTN_STYLUS3 when both barrel switches are set
    
    The Wacom Pro Pen 3D includes a third barrel switch which is intended to
    be particularly useful in applications where one frequency uses pan, zoom,
    and rotate to navigate around a scene or model. The pen is compatible with
    the MobileStudio Pro, 2nd-gen Intuos Pro, and Cintiq Pro. When the third
    button is pressed, these devices set both the HID_DG_BARRELSWITCH and
    HID_DG_BARRELSWITCH2 usages since their HID descriptors do not include a
    usage specific to the button.
    
    Rather than send both BTN_STYLUS and BTN_STYLUS2 when the third button is
    pressed, userspace (libinput) has requested that we detect this condition
    and report a newly-defined BTN_STYLUS3 event instead. We could define a
    quirk specific to devices compatible with the Pro Pen 3D, but the liklihood
    of seeing both barrel switch bits set with other pens/devices is low enough
    to not worry about (pens mechanically prevent accidental activation of
    multiple switches).
    
    Signed-off-by: Jason Gerecke <jason.gerecke@wacom.com>
    Acked-by: Dmitry Torokhov <dmitry.torokhov@gmail.com>
    Acked-by: Peter Hutterer <peter.hutterer@who-t.net>
    Acked-by: Benjamin Tissoires <benjamin.tissoires@redhat.com>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>

diff --git a/drivers/hid/wacom_wac.h b/drivers/hid/wacom_wac.h
index 8a03654048bf..69dda27e8dde 100644
--- a/drivers/hid/wacom_wac.h
+++ b/drivers/hid/wacom_wac.h
@@ -291,6 +291,8 @@ struct hid_data {
 	bool inrange_state;
 	bool invert_state;
 	bool tipswitch;
+	bool barrelswitch;
+	bool barrelswitch2;
 	int x;
 	int y;
 	int pressure;

commit 885e89f601a52cc6fb025b009df58ba83d142734
Author: Jason Gerecke <killertofu@gmail.com>
Date:   Wed Oct 18 08:27:13 2017 -0700

    HID: wacom: generic: Recognize WACOM_HID_WD_PEN as a type of pen collection
    
    The WACOM_PEN_FIELD macro is used to determine if a given HID field should be
    associated with pen input. This field includes several known collection types
    that Wacom pen data is contained in, but the WACOM_HID_WD_PEN application
    collection type is notably missing. This can result in fields within this
    kind of collection being completely ignored by the `wacom_usage_mapping`
    function, preventing the later '*_event' functions from being notified about
    changes to their value.
    
    Fixes: c9c095874a ("HID: wacom: generic: Support and use 'Custom HID' mode and usages")
    Fixes: ac2423c975 ("HID: wacom: generic: add vendor defined touch")
    Cc: stable@vger.kernel.org
    Reviewed-by: Ping Cheng <ping.cheng@wacom.com>
    Reviewed-by: Benjamin Tissoires <benjamin.tissoires@redhat.com>
    Signed-off-by: Jason Gerecke <jason.gerecke@wacom.com>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>

diff --git a/drivers/hid/wacom_wac.h b/drivers/hid/wacom_wac.h
index 8a03654048bf..feb62fd4dfc3 100644
--- a/drivers/hid/wacom_wac.h
+++ b/drivers/hid/wacom_wac.h
@@ -166,6 +166,7 @@
 				 ((f)->physical == HID_DG_PEN) || \
 				 ((f)->application == HID_DG_PEN) || \
 				 ((f)->application == HID_DG_DIGITIZER) || \
+				 ((f)->application == WACOM_HID_WD_PEN) || \
 				 ((f)->application == WACOM_HID_WD_DIGITIZER) || \
 				 ((f)->application == WACOM_HID_G9_PEN) || \
 				 ((f)->application == WACOM_HID_G11_PEN))

commit 5ac3d4ae58050f451a4fd868028f25258ea0a628
Author: Jason Gerecke <killertofu@gmail.com>
Date:   Fri Apr 28 09:25:34 2017 -0700

    HID: wacom: generic: Refactor generic battery handling
    
    Generic battery handling code is spread between the pen and pad codepaths
    since battery usages may appear in reports for either. This makes it
    difficult to concisely see the logic involved. Since battery data is
    not treated like other data (i.e., we report it through the power_supply
    subsystem rather than through the input subsystem), it makes reasonable
    sense to split the functionality out into its own functions.
    
    This commit has the generic battery handling duplicate the same pattern
    that is used by the pen, pad, and touch interfaces. A "mapping" function
    is provided to set up the battery, an "event" function is provided to
    update the battery data, and a "report" function is provided to notify
    the power_supply subsystem after all the data has been read. We look at
    the usage itself rather than its collection to determine if one of the
    battery functions should handle it. Additionally, we unconditionally
    call the "report" function since there is no particularly good way to
    know if a report contained a battery usage; 'wacom_notify_battery()'
    will filter out any duplicate updates, however.
    
    Signed-off-by: Jason Gerecke <jason.gerecke@wacom.com>
    Reviewed-by: Ping Cheng <ping.cheng@wacom.com>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>

diff --git a/drivers/hid/wacom_wac.h b/drivers/hid/wacom_wac.h
index 1824b530bcb5..8a03654048bf 100644
--- a/drivers/hid/wacom_wac.h
+++ b/drivers/hid/wacom_wac.h
@@ -153,6 +153,10 @@
 #define WACOM_HID_WT_X                  (WACOM_HID_UP_WACOMTOUCH | 0x130)
 #define WACOM_HID_WT_Y                  (WACOM_HID_UP_WACOMTOUCH | 0x131)
 
+#define WACOM_BATTERY_USAGE(f)	(((f)->hid == HID_DG_BATTERYSTRENGTH) || \
+				 ((f)->hid == WACOM_HID_WD_BATTERY_CHARGING) || \
+				 ((f)->hid == WACOM_HID_WD_BATTERY_LEVEL))
+
 #define WACOM_PAD_FIELD(f)	(((f)->physical == HID_DG_TABLETFUNCTIONKEY) || \
 				 ((f)->physical == WACOM_HID_WD_DIGITIZERFNKEYS) || \
 				 ((f)->physical == WACOM_HID_WD_DIGITIZERINFO))

commit 16e4598905a9d7793350ffad2f627b3dfdb7b595
Author: Jason Gerecke <killertofu@gmail.com>
Date:   Fri Apr 28 09:25:33 2017 -0700

    HID: wacom: Add ability to provide explicit battery status info
    
    At the moment, our driver relies on 'wacom_battery_get_property()' to
    determine the most likely battery state (e.g charging, discharging, or
    full) based on the information available. It is not always possible
    for the function to properly determine this, however. For instance,
    whenever an AES pen leaves proximity the battery state becomes
    indeterminite. This commit adds the ability to provide it with explict
    state information if desired. Whenever explicit state is not required
    (the majority of circumstances), WACOM_POWER_SUPPLY_STATUS_AUTO can
    be used in its place.
    
    Three uses of explicit battery status are added: two wireless disconnect
    paths and the AES case mentioned above.
    
    Signed-off-by: Jason Gerecke <jason.gerecke@wacom.com>
    Reviewed-by: Ping Cheng <ping.cheng@wacom.com>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>

diff --git a/drivers/hid/wacom_wac.h b/drivers/hid/wacom_wac.h
index 570d29582b82..1824b530bcb5 100644
--- a/drivers/hid/wacom_wac.h
+++ b/drivers/hid/wacom_wac.h
@@ -96,6 +96,8 @@
 #define WACOM_DEVICETYPE_WL_MONITOR     0x0008
 #define WACOM_DEVICETYPE_DIRECT         0x0010
 
+#define WACOM_POWER_SUPPLY_STATUS_AUTO  -1
+
 #define WACOM_HID_UP_WACOMDIGITIZER     0xff0d0000
 #define WACOM_HID_SP_PAD                0x00040000
 #define WACOM_HID_SP_BUTTON             0x00090000
@@ -297,6 +299,7 @@ struct hid_data {
 	int last_slot_field;
 	int num_expected;
 	int num_received;
+	int bat_status;
 	int battery_capacity;
 	int bat_charging;
 	int bat_connected;

commit ed1fa736839eb97b1d066e36150df28251095eef
Author: Ping Cheng <pinglinux@gmail.com>
Date:   Tue Apr 4 12:31:07 2017 -0700

    HID: wacom: generic: sync pad events only for actual packets
    
    Commits d793ff8 and 4082da8 introduced two pad usages which do not
    actually send pad input events. To make sure we do not post empty
    pad packets, pad_input_event_flag is introduced. Turn on the flag
    for real pad input events so we can synchronize them properly.
    
    Signed-off-by: Ping Cheng <ping.cheng@wacom.com>
    Reviewed-by: Benjamin Tissoires <benjamin.tissoires@redhat.com>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>

diff --git a/drivers/hid/wacom_wac.h b/drivers/hid/wacom_wac.h
index 839bd4b6388c..570d29582b82 100644
--- a/drivers/hid/wacom_wac.h
+++ b/drivers/hid/wacom_wac.h
@@ -301,6 +301,7 @@ struct hid_data {
 	int bat_charging;
 	int bat_connected;
 	int ps_connected;
+	bool pad_input_event_flag;
 };
 
 struct wacom_remote_data {

commit d793ff81879a5747109f3106bd18e77662cb5187
Author: Ping Cheng <pinglinux@gmail.com>
Date:   Tue Feb 14 21:27:45 2017 -0800

    HID: wacom: generic: support touch on/off softkey
    
    Wacom Cintiq Pro has a softkey to turn touch on/off. Since it is
    a softkey, hardware/firmware still reports touch events no matter
    what state the softkey is. We need to ignore touch events when
    the key is in off mode.
    
    Signed-off-by: Ping Cheng <ping.cheng@wacom.com>
    Reviewed-by: Benjamin Tissoires <benjamin.tissoires@redhat.com>
    Tested-by: Aaron Armstrong Skomra <aaron.skomra@wacom.com>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>

diff --git a/drivers/hid/wacom_wac.h b/drivers/hid/wacom_wac.h
index d9669c6116b7..839bd4b6388c 100644
--- a/drivers/hid/wacom_wac.h
+++ b/drivers/hid/wacom_wac.h
@@ -121,6 +121,7 @@
 #define WACOM_HID_WD_EXPRESSKEY00       (WACOM_HID_UP_WACOMDIGITIZER | 0x0910)
 #define WACOM_HID_WD_EXPRESSKEYCAP00    (WACOM_HID_UP_WACOMDIGITIZER | 0x0950)
 #define WACOM_HID_WD_MODE_CHANGE        (WACOM_HID_UP_WACOMDIGITIZER | 0x0980)
+#define WACOM_HID_WD_MUTE_DEVICE        (WACOM_HID_UP_WACOMDIGITIZER | 0x0981)
 #define WACOM_HID_WD_CONTROLPANEL       (WACOM_HID_UP_WACOMDIGITIZER | 0x0982)
 #define WACOM_HID_WD_ONSCREEN_KEYBOARD  (WACOM_HID_UP_WACOMDIGITIZER | 0x0983)
 #define WACOM_HID_WD_BUTTONCONFIG       (WACOM_HID_UP_WACOMDIGITIZER | 0x0986)
@@ -274,6 +275,7 @@ struct wacom_shared {
 	struct hid_device *pen;
 	struct hid_device *touch;
 	bool has_mute_touch_switch;
+	bool is_touch_on;
 };
 
 struct hid_data {

commit 4082da80f46a6683439bb0357faadb18f0f5b2a6
Author: Benjamin Tissoires <benjamin.tissoires@redhat.com>
Date:   Tue Feb 14 21:27:18 2017 -0800

    HID: wacom: generic: add mode change touch key
    
    Wacom Cintiq Pro added a touch key to switch the tablet between
    display and opaque mode. This patch informs the change by removing
    the old devices and creating new ones with proper properties.
    
    Signed-off-by: Benjamin Tissoires <benjamin.tissoires@redhat.com>
    Signed-off-by: Ping Cheng <ping.cheng@wacom.com>
    Tested-by: Aaron Armstrong Skomra <aaron.skomra@wacom.com>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>

diff --git a/drivers/hid/wacom_wac.h b/drivers/hid/wacom_wac.h
index 5eba31d6c46a..d9669c6116b7 100644
--- a/drivers/hid/wacom_wac.h
+++ b/drivers/hid/wacom_wac.h
@@ -120,6 +120,7 @@
 #define WACOM_HID_WD_BATTERY_LEVEL      (WACOM_HID_UP_WACOMDIGITIZER | 0x043b)
 #define WACOM_HID_WD_EXPRESSKEY00       (WACOM_HID_UP_WACOMDIGITIZER | 0x0910)
 #define WACOM_HID_WD_EXPRESSKEYCAP00    (WACOM_HID_UP_WACOMDIGITIZER | 0x0950)
+#define WACOM_HID_WD_MODE_CHANGE        (WACOM_HID_UP_WACOMDIGITIZER | 0x0980)
 #define WACOM_HID_WD_CONTROLPANEL       (WACOM_HID_UP_WACOMDIGITIZER | 0x0982)
 #define WACOM_HID_WD_ONSCREEN_KEYBOARD  (WACOM_HID_UP_WACOMDIGITIZER | 0x0983)
 #define WACOM_HID_WD_BUTTONCONFIG       (WACOM_HID_UP_WACOMDIGITIZER | 0x0986)
@@ -330,6 +331,9 @@ struct wacom_wac {
 	int mode_value;
 	struct hid_data hid_data;
 	bool has_mute_touch_switch;
+	bool has_mode_change;
+	bool is_direct_mode;
+
 };
 
 #endif

commit 4eb220cb35a9c4f69a2438b987bb3d509d56cc80
Author: Ping Cheng <pinglinux@gmail.com>
Date:   Tue Feb 14 21:26:21 2017 -0800

    HID: wacom: generic: add 3 tablet touch keys
    
    This patch add support to the 3 touch keys on Wacom Cintiq Pro.  These touch
    keys are in the middle of the other two keys on the top edge of the tablet.
    
    Signed-off-by: Ping Cheng <ping.cheng@wacom.com>
    Reviewed-by: Benjamin Tissoires <benjamin.tissoires@redhat.com>
    Tested-by: Aaron Armstrong Skomra <aaron.skomra@wacom.com>
    Acked-by: Dmitry Torokhov <dmitry.torokhov@gmail.com>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>

diff --git a/drivers/hid/wacom_wac.h b/drivers/hid/wacom_wac.h
index 857ccee16f38..5eba31d6c46a 100644
--- a/drivers/hid/wacom_wac.h
+++ b/drivers/hid/wacom_wac.h
@@ -120,6 +120,9 @@
 #define WACOM_HID_WD_BATTERY_LEVEL      (WACOM_HID_UP_WACOMDIGITIZER | 0x043b)
 #define WACOM_HID_WD_EXPRESSKEY00       (WACOM_HID_UP_WACOMDIGITIZER | 0x0910)
 #define WACOM_HID_WD_EXPRESSKEYCAP00    (WACOM_HID_UP_WACOMDIGITIZER | 0x0950)
+#define WACOM_HID_WD_CONTROLPANEL       (WACOM_HID_UP_WACOMDIGITIZER | 0x0982)
+#define WACOM_HID_WD_ONSCREEN_KEYBOARD  (WACOM_HID_UP_WACOMDIGITIZER | 0x0983)
+#define WACOM_HID_WD_BUTTONCONFIG       (WACOM_HID_UP_WACOMDIGITIZER | 0x0986)
 #define WACOM_HID_WD_BUTTONHOME         (WACOM_HID_UP_WACOMDIGITIZER | 0x0990)
 #define WACOM_HID_WD_BUTTONUP           (WACOM_HID_UP_WACOMDIGITIZER | 0x0991)
 #define WACOM_HID_WD_BUTTONDOWN         (WACOM_HID_UP_WACOMDIGITIZER | 0x0992)

commit 10c55cacb8b20518fddf92de43fbfb198f288eb2
Author: Aaron Armstrong Skomra <skomra@gmail.com>
Date:   Wed Jan 25 12:08:42 2017 -0800

    HID: wacom: generic: support LEDs
    
    Add support for the LEDs around the mode switch to the generic code path in
    support of the second generation Intuos Pro.
    
    Signed-off-by: Aaron Skomra <aaron.skomra@wacom.com>
    Reviewed-by: Ping Cheng <pingc@wacom.com>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>

diff --git a/drivers/hid/wacom_wac.h b/drivers/hid/wacom_wac.h
index 4feaf94fb08b..857ccee16f38 100644
--- a/drivers/hid/wacom_wac.h
+++ b/drivers/hid/wacom_wac.h
@@ -79,6 +79,7 @@
 #define WAC_CMD_ICON_XFER               0x23
 #define WAC_CMD_ICON_BT_XFER            0x26
 #define WAC_CMD_DELETE_PAIRING          0x20
+#define WAC_CMD_LED_CONTROL_GENERIC     0x32
 #define WAC_CMD_UNPAIR_ALL              0xFF
 #define WAC_CMD_WL_INTUOSP2             0x82
 

commit d2ec58aee8b1d68d309656a0561c81c12197a987
Author: Aaron Armstrong Skomra <skomra@gmail.com>
Date:   Wed Jan 25 12:08:41 2017 -0800

    HID: wacom: generic: support generic touch switch
    
    The second generation Intuos Pro is the first device in the generic codepath
    which has a touchswitch. We utilize a flag in wacom_shared in order to report
    this switch event received from the pad on the touch input.
    
    Signed-off-by: Aaron Skomra <aaron.skomra@wacom.com>
    Reviewed-by: Ping Cheng <pingc@wacom.com>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>

diff --git a/drivers/hid/wacom_wac.h b/drivers/hid/wacom_wac.h
index da38f7736a7a..4feaf94fb08b 100644
--- a/drivers/hid/wacom_wac.h
+++ b/drivers/hid/wacom_wac.h
@@ -115,6 +115,7 @@
 #define WACOM_HID_WD_ACCELEROMETER_Y    (WACOM_HID_UP_WACOMDIGITIZER | 0x0402)
 #define WACOM_HID_WD_ACCELEROMETER_Z    (WACOM_HID_UP_WACOMDIGITIZER | 0x0403)
 #define WACOM_HID_WD_BATTERY_CHARGING   (WACOM_HID_UP_WACOMDIGITIZER | 0x0404)
+#define WACOM_HID_WD_TOUCHONOFF         (WACOM_HID_UP_WACOMDIGITIZER | 0x0454)
 #define WACOM_HID_WD_BATTERY_LEVEL      (WACOM_HID_UP_WACOMDIGITIZER | 0x043b)
 #define WACOM_HID_WD_EXPRESSKEY00       (WACOM_HID_UP_WACOMDIGITIZER | 0x0910)
 #define WACOM_HID_WD_EXPRESSKEYCAP00    (WACOM_HID_UP_WACOMDIGITIZER | 0x0950)
@@ -124,7 +125,6 @@
 #define WACOM_HID_WD_BUTTONLEFT         (WACOM_HID_UP_WACOMDIGITIZER | 0x0993)
 #define WACOM_HID_WD_BUTTONRIGHT        (WACOM_HID_UP_WACOMDIGITIZER | 0x0994)
 #define WACOM_HID_WD_BUTTONCENTER       (WACOM_HID_UP_WACOMDIGITIZER | 0x0995)
-#define WACOM_HID_WD_TOUCHONOFF         (WACOM_HID_UP_WACOMDIGITIZER | 0x0996)
 #define WACOM_HID_WD_FINGERWHEEL        (WACOM_HID_UP_WACOMDIGITIZER | 0x0d03)
 #define WACOM_HID_WD_OFFSETLEFT         (WACOM_HID_UP_WACOMDIGITIZER | 0x0d30)
 #define WACOM_HID_WD_OFFSETTOP          (WACOM_HID_UP_WACOMDIGITIZER | 0x0d31)
@@ -268,6 +268,7 @@ struct wacom_shared {
 	struct input_dev *touch_input;
 	struct hid_device *pen;
 	struct hid_device *touch;
+	bool has_mute_touch_switch;
 };
 
 struct hid_data {
@@ -324,6 +325,7 @@ struct wacom_wac {
 	int mode_report;
 	int mode_value;
 	struct hid_data hid_data;
+	bool has_mute_touch_switch;
 };
 
 #endif

commit ac2423c975dbd3e8c2afc6dec53ee25be38f723b
Author: Aaron Armstrong Skomra <skomra@gmail.com>
Date:   Wed Jan 25 12:08:40 2017 -0800

    HID: wacom: generic: add vendor defined touch
    
    Add vendor defined touch to support the second generation Intuos Pro.
    Previously all generic Wacom devices used true HID to report their touch.
    
    Signed-off-by: Aaron Skomra <aaron.skomra@wacom.com>
    Reviewed-by: Ping Cheng <pingc@wacom.com>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>

diff --git a/drivers/hid/wacom_wac.h b/drivers/hid/wacom_wac.h
index dac95ba49888..da38f7736a7a 100644
--- a/drivers/hid/wacom_wac.h
+++ b/drivers/hid/wacom_wac.h
@@ -101,6 +101,7 @@
 #define WACOM_HID_SP_DIGITIZER          0x000d0000
 #define WACOM_HID_SP_DIGITIZERINFO      0x00100000
 #define WACOM_HID_WD_DIGITIZER          (WACOM_HID_UP_WACOMDIGITIZER | 0x01)
+#define WACOM_HID_WD_PEN                (WACOM_HID_UP_WACOMDIGITIZER | 0x02)
 #define WACOM_HID_WD_SENSE              (WACOM_HID_UP_WACOMDIGITIZER | 0x36)
 #define WACOM_HID_WD_DIGITIZERFNKEYS    (WACOM_HID_UP_WACOMDIGITIZER | 0x39)
 #define WACOM_HID_WD_SERIALHI           (WACOM_HID_UP_WACOMDIGITIZER | 0x5c)
@@ -137,6 +138,12 @@
 #define WACOM_HID_UP_G11                0xff110000
 #define WACOM_HID_G11_PEN               (WACOM_HID_UP_G11 | 0x02)
 #define WACOM_HID_G11_TOUCHSCREEN       (WACOM_HID_UP_G11 | 0x11)
+#define WACOM_HID_UP_WACOMTOUCH         0xff000000
+#define WACOM_HID_WT_TOUCHSCREEN        (WACOM_HID_UP_WACOMTOUCH | 0x04)
+#define WACOM_HID_WT_TOUCHPAD           (WACOM_HID_UP_WACOMTOUCH | 0x05)
+#define WACOM_HID_WT_CONTACTMAX         (WACOM_HID_UP_WACOMTOUCH | 0x55)
+#define WACOM_HID_WT_X                  (WACOM_HID_UP_WACOMTOUCH | 0x130)
+#define WACOM_HID_WT_Y                  (WACOM_HID_UP_WACOMTOUCH | 0x131)
 
 #define WACOM_PAD_FIELD(f)	(((f)->physical == HID_DG_TABLETFUNCTIONKEY) || \
 				 ((f)->physical == WACOM_HID_WD_DIGITIZERFNKEYS) || \
@@ -154,7 +161,14 @@
 				 ((f)->physical == HID_DG_FINGER) || \
 				 ((f)->application == HID_DG_TOUCHSCREEN) || \
 				 ((f)->application == WACOM_HID_G9_TOUCHSCREEN) || \
-				 ((f)->application == WACOM_HID_G11_TOUCHSCREEN))
+				 ((f)->application == WACOM_HID_G11_TOUCHSCREEN) || \
+				 ((f)->application == WACOM_HID_WT_TOUCHPAD) || \
+				 ((f)->application == HID_DG_TOUCHPAD))
+
+#define WACOM_DIRECT_DEVICE(f)	(((f)->application == HID_DG_TOUCHSCREEN) || \
+				 ((f)->application == WACOM_HID_WT_TOUCHSCREEN) || \
+				 ((f)->application == HID_DG_PEN) || \
+				 ((f)->application == WACOM_HID_WD_PEN))
 
 enum {
 	PENPARTNER = 0,

commit 65ef4c1e98b73176a64fb6e9829e4166249392ec
Author: Aaron Armstrong Skomra <skomra@gmail.com>
Date:   Wed Jan 25 12:08:38 2017 -0800

    HID: wacom: generic: remove input_event_flag
    
    Input_event_flag duplicates the information we track in
    wacom_wac->hid_data.inrange_state for the pad.
    
    Signed-off-by: Aaron Skomra <aaron.skomra@wacom.com>
    Reviewed-by: Ping Cheng <pingc@wacom.com>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>

diff --git a/drivers/hid/wacom_wac.h b/drivers/hid/wacom_wac.h
index d3482debae8a..dac95ba49888 100644
--- a/drivers/hid/wacom_wac.h
+++ b/drivers/hid/wacom_wac.h
@@ -243,7 +243,6 @@ struct wacom_features {
 	int pktlen;
 	bool check_for_hid_type;
 	int hid_type;
-	bool input_event_flag;
 };
 
 struct wacom_shared {

commit 4922cd26f03c1c71bf7dd6cbdb638e7e36a4a50b
Author: Jason Gerecke <killertofu@gmail.com>
Date:   Wed Jan 25 12:08:37 2017 -0800

    HID: wacom: Support 2nd-gen Intuos Pro's Bluetooth classic interface
    
    In addition to its USB interface, the second-generation Intuos Pro
    includes a Bluetooth radio that offers two pairing interfaces: classic
    and low-energy. The classic interface functions just like the earlier
    Bluetooth-enabled Intuos4 and Graphire4 tablets, appearing as a HID device
    that our driver can work with. The low-energy interface is intented to
    be used by userspace applications that make use of its paper-to-digital
    capabilities.
    
    Despite the USB interface using Wacom's new vendor-defined HID usages,
    the Bluetooth interface provides us with useless black-box "blob"
    report descriptors like past devices. We thus have to explicitly add
    support for the PIDs and reports used.
    
    These devices pack a /lot/ of information into a single Bluetooth
    input report. Each report contains up to seven snapshots of the pen
    state, four snapshots of the touch state (of five touches each), pad
    state, and battery data. Thankfully this isn't too hard for the driver
    to report -- it just takes a fair amount of code to extract!
    
    Signed-off-by: Jason Gerecke <jason.gerecke@wacom.com>
    Reviewed-by: Ping Cheng <pingc@wacom.com>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>

diff --git a/drivers/hid/wacom_wac.h b/drivers/hid/wacom_wac.h
index 804fda3e192a..d3482debae8a 100644
--- a/drivers/hid/wacom_wac.h
+++ b/drivers/hid/wacom_wac.h
@@ -12,8 +12,8 @@
 #include <linux/types.h>
 #include <linux/hid.h>
 
-/* maximum packet length for USB devices */
-#define WACOM_PKGLEN_MAX	192
+/* maximum packet length for USB/BT devices */
+#define WACOM_PKGLEN_MAX	361
 
 #define WACOM_NAME_MAX		64
 #define WACOM_MAX_REMOTES	5
@@ -80,6 +80,7 @@
 #define WAC_CMD_ICON_BT_XFER            0x26
 #define WAC_CMD_DELETE_PAIRING          0x20
 #define WAC_CMD_UNPAIR_ALL              0xFF
+#define WAC_CMD_WL_INTUOSP2             0x82
 
 /* device quirks */
 #define WACOM_QUIRK_BBTOUCH_LOWRES	0x0001
@@ -179,6 +180,7 @@ enum {
 	INTUOSPS,
 	INTUOSPM,
 	INTUOSPL,
+	INTUOSP2_BT,
 	WACOM_21UX2,
 	WACOM_22HD,
 	DTK,

commit 5ba13c6495010cd39e0ecb89ce1e546189bd6006
Author: Jason Gerecke <killertofu@gmail.com>
Date:   Wed Jan 25 12:08:36 2017 -0800

    HID: wacom: Move WAC_CMD_* into wacom_wac.h
    
    Centralize our definition of report IDs by moving those for device commands
    into wacom_wac.h alongside those for input reports.
    
    Signed-off-by: Jason Gerecke <jason.gerecke@wacom.com>
    Reviewed-by: Ping Cheng <pingc@wacom.com>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>

diff --git a/drivers/hid/wacom_wac.h b/drivers/hid/wacom_wac.h
index fb0e50acb10d..804fda3e192a 100644
--- a/drivers/hid/wacom_wac.h
+++ b/drivers/hid/wacom_wac.h
@@ -72,6 +72,15 @@
 #define WACOM_REPORT_REMOTE		17
 #define WACOM_REPORT_INTUOSHT2_ID	8
 
+/* wacom command report ids */
+#define WAC_CMD_WL_LED_CONTROL          0x03
+#define WAC_CMD_LED_CONTROL             0x20
+#define WAC_CMD_ICON_START              0x21
+#define WAC_CMD_ICON_XFER               0x23
+#define WAC_CMD_ICON_BT_XFER            0x26
+#define WAC_CMD_DELETE_PAIRING          0x20
+#define WAC_CMD_UNPAIR_ALL              0xFF
+
 /* device quirks */
 #define WACOM_QUIRK_BBTOUCH_LOWRES	0x0001
 #define WACOM_QUIRK_SENSE		0x0002

commit c9cfb2aca26505729fc37716038c692208b2a8c9
Author: Ping Cheng <pinglinux@gmail.com>
Date:   Thu Dec 8 22:06:15 2016 -0800

    HID: wacom: generic: Don't sync input on empty input packets
    
    post input_sync only when there are input events posted
    
    Signed-off-by: Ping Cheng <ping.cheng@wacom.com>
    Reviewed-By: Jason Gerecke <jason.gerecke@wacom.com>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>

diff --git a/drivers/hid/wacom_wac.h b/drivers/hid/wacom_wac.h
index a54a3017a23f..fb0e50acb10d 100644
--- a/drivers/hid/wacom_wac.h
+++ b/drivers/hid/wacom_wac.h
@@ -232,6 +232,7 @@ struct wacom_features {
 	int pktlen;
 	bool check_for_hid_type;
 	int hid_type;
+	bool input_event_flag;
 };
 
 struct wacom_shared {

commit bf78adcb6dc681624015a4390f0e5f656cb0270b
Author: Jason Gerecke <killertofu@gmail.com>
Date:   Wed Oct 19 18:03:53 2016 -0700

    HID: wacom: generic: Extend pad support
    
    The HID specification that the MobileStudio Pro follows includes usages
    for several values that would be good to support so that future devices
    "just work" out of the box. Extend the HID_GENERIC pad codepath to handle
    these usages.
    
    Signed-off-by: Jason Gerecke <jason.gerecke@wacom.com>
    Reviewed-by: Benjamin Tissoires <benjamin.tissoires@redhat.com>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>

diff --git a/drivers/hid/wacom_wac.h b/drivers/hid/wacom_wac.h
index 7418c9715d31..a54a3017a23f 100644
--- a/drivers/hid/wacom_wac.h
+++ b/drivers/hid/wacom_wac.h
@@ -96,6 +96,8 @@
 #define WACOM_HID_WD_SERIALHI           (WACOM_HID_UP_WACOMDIGITIZER | 0x5c)
 #define WACOM_HID_WD_TOOLTYPE           (WACOM_HID_UP_WACOMDIGITIZER | 0x77)
 #define WACOM_HID_WD_DISTANCE           (WACOM_HID_UP_WACOMDIGITIZER | 0x0132)
+#define WACOM_HID_WD_TOUCHSTRIP         (WACOM_HID_UP_WACOMDIGITIZER | 0x0136)
+#define WACOM_HID_WD_TOUCHSTRIP2        (WACOM_HID_UP_WACOMDIGITIZER | 0x0137)
 #define WACOM_HID_WD_TOUCHRING          (WACOM_HID_UP_WACOMDIGITIZER | 0x0138)
 #define WACOM_HID_WD_TOUCHRINGSTATUS    (WACOM_HID_UP_WACOMDIGITIZER | 0x0139)
 #define WACOM_HID_WD_ACCELEROMETER_X    (WACOM_HID_UP_WACOMDIGITIZER | 0x0401)
@@ -104,11 +106,14 @@
 #define WACOM_HID_WD_BATTERY_CHARGING   (WACOM_HID_UP_WACOMDIGITIZER | 0x0404)
 #define WACOM_HID_WD_BATTERY_LEVEL      (WACOM_HID_UP_WACOMDIGITIZER | 0x043b)
 #define WACOM_HID_WD_EXPRESSKEY00       (WACOM_HID_UP_WACOMDIGITIZER | 0x0910)
+#define WACOM_HID_WD_EXPRESSKEYCAP00    (WACOM_HID_UP_WACOMDIGITIZER | 0x0950)
 #define WACOM_HID_WD_BUTTONHOME         (WACOM_HID_UP_WACOMDIGITIZER | 0x0990)
 #define WACOM_HID_WD_BUTTONUP           (WACOM_HID_UP_WACOMDIGITIZER | 0x0991)
 #define WACOM_HID_WD_BUTTONDOWN         (WACOM_HID_UP_WACOMDIGITIZER | 0x0992)
 #define WACOM_HID_WD_BUTTONLEFT         (WACOM_HID_UP_WACOMDIGITIZER | 0x0993)
 #define WACOM_HID_WD_BUTTONRIGHT        (WACOM_HID_UP_WACOMDIGITIZER | 0x0994)
+#define WACOM_HID_WD_BUTTONCENTER       (WACOM_HID_UP_WACOMDIGITIZER | 0x0995)
+#define WACOM_HID_WD_TOUCHONOFF         (WACOM_HID_UP_WACOMDIGITIZER | 0x0996)
 #define WACOM_HID_WD_FINGERWHEEL        (WACOM_HID_UP_WACOMDIGITIZER | 0x0d03)
 #define WACOM_HID_WD_OFFSETLEFT         (WACOM_HID_UP_WACOMDIGITIZER | 0x0d30)
 #define WACOM_HID_WD_OFFSETTOP          (WACOM_HID_UP_WACOMDIGITIZER | 0x0d31)

commit 93aab7fa4f8091d8fe2aed7e79a650fc1c084512
Author: Jason Gerecke <killertofu@gmail.com>
Date:   Wed Oct 19 18:03:52 2016 -0700

    HID: wacom: generic: Add support for battery status on pen and pad interfaces
    
    Adds support for usages that may appear on the pen or pad interface which
    report the state of the tablet battery.
    
    Signed-off-by: Jason Gerecke <jason.gerecke@wacom.com>
    Reviewed-by: Benjamin Tissoires <benjamin.tissoires@redhat.com>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>

diff --git a/drivers/hid/wacom_wac.h b/drivers/hid/wacom_wac.h
index 1f7c4a86d91b..7418c9715d31 100644
--- a/drivers/hid/wacom_wac.h
+++ b/drivers/hid/wacom_wac.h
@@ -101,6 +101,8 @@
 #define WACOM_HID_WD_ACCELEROMETER_X    (WACOM_HID_UP_WACOMDIGITIZER | 0x0401)
 #define WACOM_HID_WD_ACCELEROMETER_Y    (WACOM_HID_UP_WACOMDIGITIZER | 0x0402)
 #define WACOM_HID_WD_ACCELEROMETER_Z    (WACOM_HID_UP_WACOMDIGITIZER | 0x0403)
+#define WACOM_HID_WD_BATTERY_CHARGING   (WACOM_HID_UP_WACOMDIGITIZER | 0x0404)
+#define WACOM_HID_WD_BATTERY_LEVEL      (WACOM_HID_UP_WACOMDIGITIZER | 0x043b)
 #define WACOM_HID_WD_EXPRESSKEY00       (WACOM_HID_UP_WACOMDIGITIZER | 0x0910)
 #define WACOM_HID_WD_BUTTONHOME         (WACOM_HID_UP_WACOMDIGITIZER | 0x0990)
 #define WACOM_HID_WD_BUTTONUP           (WACOM_HID_UP_WACOMDIGITIZER | 0x0991)
@@ -257,6 +259,10 @@ struct hid_data {
 	int last_slot_field;
 	int num_expected;
 	int num_received;
+	int battery_capacity;
+	int bat_charging;
+	int bat_connected;
+	int ps_connected;
 };
 
 struct wacom_remote_data {

commit 5922e613256f159f8d53d99b17379f362e544541
Author: Jason Gerecke <killertofu@gmail.com>
Date:   Wed Oct 19 18:03:51 2016 -0700

    HID: wacom: generic: Introduce pad support
    
    As with usages for the pen, the Custom HID specificiation includes
    usages for the pad. Here we add functions to map and handle most
    of the pad usages present on the MobileStudio Pro.
    
    Signed-off-by: Jason Gerecke <jason.gerecke@wacom.com>
    Reviewed-by: Benjamin Tissoires <benjamin.tissoires@redhat.com>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>

diff --git a/drivers/hid/wacom_wac.h b/drivers/hid/wacom_wac.h
index b4c3c6425b85..1f7c4a86d91b 100644
--- a/drivers/hid/wacom_wac.h
+++ b/drivers/hid/wacom_wac.h
@@ -86,19 +86,34 @@
 #define WACOM_DEVICETYPE_DIRECT         0x0010
 
 #define WACOM_HID_UP_WACOMDIGITIZER     0xff0d0000
+#define WACOM_HID_SP_PAD                0x00040000
+#define WACOM_HID_SP_BUTTON             0x00090000
 #define WACOM_HID_SP_DIGITIZER          0x000d0000
 #define WACOM_HID_SP_DIGITIZERINFO      0x00100000
 #define WACOM_HID_WD_DIGITIZER          (WACOM_HID_UP_WACOMDIGITIZER | 0x01)
 #define WACOM_HID_WD_SENSE              (WACOM_HID_UP_WACOMDIGITIZER | 0x36)
+#define WACOM_HID_WD_DIGITIZERFNKEYS    (WACOM_HID_UP_WACOMDIGITIZER | 0x39)
 #define WACOM_HID_WD_SERIALHI           (WACOM_HID_UP_WACOMDIGITIZER | 0x5c)
 #define WACOM_HID_WD_TOOLTYPE           (WACOM_HID_UP_WACOMDIGITIZER | 0x77)
 #define WACOM_HID_WD_DISTANCE           (WACOM_HID_UP_WACOMDIGITIZER | 0x0132)
+#define WACOM_HID_WD_TOUCHRING          (WACOM_HID_UP_WACOMDIGITIZER | 0x0138)
+#define WACOM_HID_WD_TOUCHRINGSTATUS    (WACOM_HID_UP_WACOMDIGITIZER | 0x0139)
+#define WACOM_HID_WD_ACCELEROMETER_X    (WACOM_HID_UP_WACOMDIGITIZER | 0x0401)
+#define WACOM_HID_WD_ACCELEROMETER_Y    (WACOM_HID_UP_WACOMDIGITIZER | 0x0402)
+#define WACOM_HID_WD_ACCELEROMETER_Z    (WACOM_HID_UP_WACOMDIGITIZER | 0x0403)
+#define WACOM_HID_WD_EXPRESSKEY00       (WACOM_HID_UP_WACOMDIGITIZER | 0x0910)
+#define WACOM_HID_WD_BUTTONHOME         (WACOM_HID_UP_WACOMDIGITIZER | 0x0990)
+#define WACOM_HID_WD_BUTTONUP           (WACOM_HID_UP_WACOMDIGITIZER | 0x0991)
+#define WACOM_HID_WD_BUTTONDOWN         (WACOM_HID_UP_WACOMDIGITIZER | 0x0992)
+#define WACOM_HID_WD_BUTTONLEFT         (WACOM_HID_UP_WACOMDIGITIZER | 0x0993)
+#define WACOM_HID_WD_BUTTONRIGHT        (WACOM_HID_UP_WACOMDIGITIZER | 0x0994)
 #define WACOM_HID_WD_FINGERWHEEL        (WACOM_HID_UP_WACOMDIGITIZER | 0x0d03)
 #define WACOM_HID_WD_OFFSETLEFT         (WACOM_HID_UP_WACOMDIGITIZER | 0x0d30)
 #define WACOM_HID_WD_OFFSETTOP          (WACOM_HID_UP_WACOMDIGITIZER | 0x0d31)
 #define WACOM_HID_WD_OFFSETRIGHT        (WACOM_HID_UP_WACOMDIGITIZER | 0x0d32)
 #define WACOM_HID_WD_OFFSETBOTTOM       (WACOM_HID_UP_WACOMDIGITIZER | 0x0d33)
 #define WACOM_HID_WD_DATAMODE           (WACOM_HID_UP_WACOMDIGITIZER | 0x1002)
+#define WACOM_HID_WD_DIGITIZERINFO      (WACOM_HID_UP_WACOMDIGITIZER | 0x1013)
 #define WACOM_HID_UP_G9                 0xff090000
 #define WACOM_HID_G9_PEN                (WACOM_HID_UP_G9 | 0x02)
 #define WACOM_HID_G9_TOUCHSCREEN        (WACOM_HID_UP_G9 | 0x11)
@@ -106,6 +121,10 @@
 #define WACOM_HID_G11_PEN               (WACOM_HID_UP_G11 | 0x02)
 #define WACOM_HID_G11_TOUCHSCREEN       (WACOM_HID_UP_G11 | 0x11)
 
+#define WACOM_PAD_FIELD(f)	(((f)->physical == HID_DG_TABLETFUNCTIONKEY) || \
+				 ((f)->physical == WACOM_HID_WD_DIGITIZERFNKEYS) || \
+				 ((f)->physical == WACOM_HID_WD_DIGITIZERINFO))
+
 #define WACOM_PEN_FIELD(f)	(((f)->logical == HID_DG_STYLUS) || \
 				 ((f)->physical == HID_DG_STYLUS) || \
 				 ((f)->physical == HID_DG_PEN) || \

commit 345857bb493fbff15632a6bdf04713163ccd6fe6
Author: Jason Gerecke <killertofu@gmail.com>
Date:   Wed Oct 19 18:03:50 2016 -0700

    HID: wacom: generic: Add support for sensor offsets
    
    Many of Wacom's display tablets include an "outbound" area where pen
    digitizing is possible but outside of the display area. To accommodate
    such sensors in the HID_GENERIC codepath, we add support for the
    necessary vendor-defined HID feature usages and adjust the min/max
    values of the X and Y axes accordingly, similar to what is done in
    the non-generic codepath.
    
    Signed-off-by: Jason Gerecke <jason.gerecke@wacom.com>
    Reviewed-by: Benjamin Tissoires <benjamin.tissoires@redhat.com>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>

diff --git a/drivers/hid/wacom_wac.h b/drivers/hid/wacom_wac.h
index 5c5c6891b832..b4c3c6425b85 100644
--- a/drivers/hid/wacom_wac.h
+++ b/drivers/hid/wacom_wac.h
@@ -94,6 +94,10 @@
 #define WACOM_HID_WD_TOOLTYPE           (WACOM_HID_UP_WACOMDIGITIZER | 0x77)
 #define WACOM_HID_WD_DISTANCE           (WACOM_HID_UP_WACOMDIGITIZER | 0x0132)
 #define WACOM_HID_WD_FINGERWHEEL        (WACOM_HID_UP_WACOMDIGITIZER | 0x0d03)
+#define WACOM_HID_WD_OFFSETLEFT         (WACOM_HID_UP_WACOMDIGITIZER | 0x0d30)
+#define WACOM_HID_WD_OFFSETTOP          (WACOM_HID_UP_WACOMDIGITIZER | 0x0d31)
+#define WACOM_HID_WD_OFFSETRIGHT        (WACOM_HID_UP_WACOMDIGITIZER | 0x0d32)
+#define WACOM_HID_WD_OFFSETBOTTOM       (WACOM_HID_UP_WACOMDIGITIZER | 0x0d33)
 #define WACOM_HID_WD_DATAMODE           (WACOM_HID_UP_WACOMDIGITIZER | 0x1002)
 #define WACOM_HID_UP_G9                 0xff090000
 #define WACOM_HID_G9_PEN                (WACOM_HID_UP_G9 | 0x02)

commit e779ef23104869d74f56fbd199a90e76699eb699
Author: Jason Gerecke <killertofu@gmail.com>
Date:   Wed Oct 19 18:03:49 2016 -0700

    HID: wacom: Fix sensor outbounds and redefine as offsets from each edge
    
    Many of Wacom's display tablets include an "outbound" area where pen
    digitizing is possible but outside of the display area. To ensure that
    pen coordinates are mapped to the correct on-screen location, the driver
    sets the minimum and maximum axis values of X and Y to those coordinates
    which coincide with the screen edge. These values are simply the
    hardware minimum/maximum plus/minus the outbound size for a particular
    edge.
    
    When outbound support was added/updated in ac414da, fa77034, and
    ecd618d, we decided to have the wacom_features structs store the desired
    minimum and maximum values directly. In hindsight, this was perhaps not
    the best choice since it has allowed minor errors to crop up unnoticed.
    Some tablets have had their coordinates over-corrected (e.g. most of the
    devices "fixed" in ecd618d were already adjusted in ac414da), while
    others never had a correction applied (e.g. the ISDv5 325, whose
    declared maximum the hardware maximum instead of the outbound maximum).
    
    A less error-prone method of handling the outbound is to let the driver
    calculate the correct minimum/maximum values by providing it with both
    the actual hardware maximums and the size of the outbound on each edge.
    These values are more easy to verify as correct since the values can be
    trivially compared against specifications.
    
    This patch reverts the declared maximum values to the actual hardware
    maximums, e.g. as declared prior to ac414da (values for these and other
    display tablets that were subsuquently introduced have been verified
    against specs). Per-edge outbound sizes are stored in the wacom_features
    struct as offset_{left,right,top,bottom} and used in combination with
    the hardware ranges to calculate effective axis ranges for ABS_X and
    ABS_Y.
    
    Signed-off-by: Jason Gerecke <jason.gerecke@wacom.com>
    Reviewed-by: Benjamin Tissoires <benjamin.tissoires@redhat.com>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>

diff --git a/drivers/hid/wacom_wac.h b/drivers/hid/wacom_wac.h
index 83ddb2a062a1..5c5c6891b832 100644
--- a/drivers/hid/wacom_wac.h
+++ b/drivers/hid/wacom_wac.h
@@ -181,8 +181,10 @@ struct wacom_features {
 	int x_resolution;
 	int y_resolution;
 	int numbered_buttons;
-	int x_min;
-	int y_min;
+	int offset_left;
+	int offset_right;
+	int offset_top;
+	int offset_bottom;
 	int device_type;
 	int x_phy;
 	int y_phy;

commit f85c9dc678a5e17f49805035f5b327ed134c4237
Author: Jason Gerecke <killertofu@gmail.com>
Date:   Wed Oct 19 18:03:48 2016 -0700

    HID: wacom: generic: Support tool ID and additional tool types
    
    Devices following the new Custom HID mode specification (as well as even
    some recent component sensors which use the same standard HID usage)
    are capable of reporting tool ID information that we need to relay to
    userspace. This patch adds support for reading and relaying the tool
    type information, which is (unfortunately) split across two usages.
    We also advertise the existence of tool types beyond BTN_TOOL_PEN
    that might be available.
    
    Signed-off-by: Jason Gerecke <jason.gerecke@wacom.com>
    Reviewed-by: Benjamin Tissoires <benjamin.tissoires@redhat.com>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>

diff --git a/drivers/hid/wacom_wac.h b/drivers/hid/wacom_wac.h
index c27b7b40092e..83ddb2a062a1 100644
--- a/drivers/hid/wacom_wac.h
+++ b/drivers/hid/wacom_wac.h
@@ -90,6 +90,8 @@
 #define WACOM_HID_SP_DIGITIZERINFO      0x00100000
 #define WACOM_HID_WD_DIGITIZER          (WACOM_HID_UP_WACOMDIGITIZER | 0x01)
 #define WACOM_HID_WD_SENSE              (WACOM_HID_UP_WACOMDIGITIZER | 0x36)
+#define WACOM_HID_WD_SERIALHI           (WACOM_HID_UP_WACOMDIGITIZER | 0x5c)
+#define WACOM_HID_WD_TOOLTYPE           (WACOM_HID_UP_WACOMDIGITIZER | 0x77)
 #define WACOM_HID_WD_DISTANCE           (WACOM_HID_UP_WACOMDIGITIZER | 0x0132)
 #define WACOM_HID_WD_FINGERWHEEL        (WACOM_HID_UP_WACOMDIGITIZER | 0x0d03)
 #define WACOM_HID_WD_DATAMODE           (WACOM_HID_UP_WACOMDIGITIZER | 0x1002)
@@ -247,7 +249,7 @@ struct wacom_wac {
 	unsigned char data[WACOM_PKGLEN_MAX];
 	int tool[2];
 	int id[2];
-	__u32 serial[2];
+	__u64 serial[2];
 	bool reporting_data;
 	struct wacom_features features;
 	struct wacom_shared *shared;

commit 61ce346a21a74cc106e76bbaf6a2319d1d74fa6d
Author: Jason Gerecke <killertofu@gmail.com>
Date:   Wed Oct 19 18:03:46 2016 -0700

    HID: wacom: generic: Add support for vendor-defined "Sense" usage
    
    Wacom's professional tablets beginning with the Intuos4 are capable of
    reporting an intermediate degree of proximity where the pen is no longer
    close enough to communicate with ("in prox"), but still close enough to
    be sensed ("in range"). This additional state is particularly useful for
    performing palm rejection as it allows the driver to disable the touch
    sensor while the pen is a greater distance from the tablet.
    
    Like other professional tablets, the new MobileStudio Pro also reports
    this intermeidate "in range" proximity state. Its descriptor assigns
    usage 0xff0d0036 to this bit. Normally 'wacom_equivalent_usage' would
    translate this to the standard HID "Quality" usage, but since this has
    a different meaning we have it explicitly ignore the usage and define
    it ourselves as "Sense" (since "In Range" is already defined by the
    HID standard and interpreted by our driver as meaning "in prox").
    
    Signed-off-by: Jason Gerecke <jason.gerecke@wacom.com>
    Reviewed-by: Benjamin Tissoires <benjamin.tissoires@redhat.com>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>

diff --git a/drivers/hid/wacom_wac.h b/drivers/hid/wacom_wac.h
index 544755929c2f..c27b7b40092e 100644
--- a/drivers/hid/wacom_wac.h
+++ b/drivers/hid/wacom_wac.h
@@ -74,6 +74,7 @@
 
 /* device quirks */
 #define WACOM_QUIRK_BBTOUCH_LOWRES	0x0001
+#define WACOM_QUIRK_SENSE		0x0002
 #define WACOM_QUIRK_BATTERY		0x0008
 
 /* device types */
@@ -88,6 +89,7 @@
 #define WACOM_HID_SP_DIGITIZER          0x000d0000
 #define WACOM_HID_SP_DIGITIZERINFO      0x00100000
 #define WACOM_HID_WD_DIGITIZER          (WACOM_HID_UP_WACOMDIGITIZER | 0x01)
+#define WACOM_HID_WD_SENSE              (WACOM_HID_UP_WACOMDIGITIZER | 0x36)
 #define WACOM_HID_WD_DISTANCE           (WACOM_HID_UP_WACOMDIGITIZER | 0x0132)
 #define WACOM_HID_WD_FINGERWHEEL        (WACOM_HID_UP_WACOMDIGITIZER | 0x0d03)
 #define WACOM_HID_WD_DATAMODE           (WACOM_HID_UP_WACOMDIGITIZER | 0x1002)
@@ -212,6 +214,7 @@ struct wacom_shared {
 struct hid_data {
 	__s16 inputmode;	/* InputMode HID feature, -1 if non-existent */
 	__s16 inputmode_index;	/* InputMode HID feature index in the report */
+	bool sense_state;
 	bool inrange_state;
 	bool invert_state;
 	bool tipswitch;

commit 929d6d5d22761fca1100e519cebe66f0fb11828d
Author: Jason Gerecke <killertofu@gmail.com>
Date:   Wed Oct 19 18:03:45 2016 -0700

    HID: wacom: generic: Add support for vendor-defined "Fingerwheel" usage
    
    The airbrush fingerwheel does not have a usage that corresponds cleanly
    with a standard HID usage, so we add explicit support for it via its
    vendor-defined usage.
    
    Signed-off-by: Jason Gerecke <jason.gerecke@wacom.com>
    Reviewed-by: Benjamin Tissoires <benjamin.tissoires@redhat.com>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>

diff --git a/drivers/hid/wacom_wac.h b/drivers/hid/wacom_wac.h
index 63a5a2586707..544755929c2f 100644
--- a/drivers/hid/wacom_wac.h
+++ b/drivers/hid/wacom_wac.h
@@ -89,6 +89,7 @@
 #define WACOM_HID_SP_DIGITIZERINFO      0x00100000
 #define WACOM_HID_WD_DIGITIZER          (WACOM_HID_UP_WACOMDIGITIZER | 0x01)
 #define WACOM_HID_WD_DISTANCE           (WACOM_HID_UP_WACOMDIGITIZER | 0x0132)
+#define WACOM_HID_WD_FINGERWHEEL        (WACOM_HID_UP_WACOMDIGITIZER | 0x0d03)
 #define WACOM_HID_WD_DATAMODE           (WACOM_HID_UP_WACOMDIGITIZER | 0x1002)
 #define WACOM_HID_UP_G9                 0xff090000
 #define WACOM_HID_G9_PEN                (WACOM_HID_UP_G9 | 0x02)

commit b5c921e6c3916cdadd6e605d792f811abf7a5f82
Author: Jason Gerecke <killertofu@gmail.com>
Date:   Wed Oct 19 18:03:44 2016 -0700

    HID: wacom: generic: Add support for vendor-defined "Distance" usage
    
    The vendor-defined 0xFF0D01032 ("Distance") usage is nearly equivalent to
    HID_GD_Z, except that the axis direction is inverted. Unlike HID_GD_Z which
    increases in value as the pen-to-surface distance is decreased, this usage
    decreases. Treat this usage as a special case to ensure we don't invert the
    scale to be ABS_DISTANCE compatible like we do for HID_GD_Z.
    
    Signed-off-by: Jason Gerecke <jason.gerecke@wacom.com>
    Reviewed-by: Benjamin Tissoires <benjamin.tissoires@redhat.com>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>

diff --git a/drivers/hid/wacom_wac.h b/drivers/hid/wacom_wac.h
index ba914bad971f..63a5a2586707 100644
--- a/drivers/hid/wacom_wac.h
+++ b/drivers/hid/wacom_wac.h
@@ -88,6 +88,7 @@
 #define WACOM_HID_SP_DIGITIZER          0x000d0000
 #define WACOM_HID_SP_DIGITIZERINFO      0x00100000
 #define WACOM_HID_WD_DIGITIZER          (WACOM_HID_UP_WACOMDIGITIZER | 0x01)
+#define WACOM_HID_WD_DISTANCE           (WACOM_HID_UP_WACOMDIGITIZER | 0x0132)
 #define WACOM_HID_WD_DATAMODE           (WACOM_HID_UP_WACOMDIGITIZER | 0x1002)
 #define WACOM_HID_UP_G9                 0xff090000
 #define WACOM_HID_G9_PEN                (WACOM_HID_UP_G9 | 0x02)

commit c9c095874ab4446be6dec6755d8f68862fdeae48
Author: Jason Gerecke <killertofu@gmail.com>
Date:   Wed Oct 19 18:03:43 2016 -0700

    HID: wacom: generic: Support and use 'Custom HID' mode and usages
    
    Wacom's new "MobileStudio Pro" tablets are the first devices in their
    branded product line-up to include a usable HID descriptor for the pen
    interface. Like prior branded products, the device can operate in one
    of two modes: 'Standard HID', and 'Wacom Custom HID'. Although the
    first mode is usable by the HID_GENERIC codepath as-is (huzzah!), it is
    subject to some restrictions -- most notably pressure being limited
    to 2048 levels instead of 8192. To ensure tablets that include support
    for Custom HID mode work optimally, we add support for its usages and
    switch the device to Custom HID mode if possible.
    
    The usages defined for Custom HID mode are often numerically similar to
    their standard HID equivalents, allowing us to write a simple translation
    function that takes arbitrary HID usages as input and which returns
    the corresponding standard HID usage as output (if one exists). Switching
    on this translated usage instead of the actual usage allows the existing
    cases to apply to both modes of operation without having to explicitly
    define every Custom HID usage.
    
    Signed-off-by: Jason Gerecke <jason.gerecke@wacom.com>
    Reviewed-by: Benjamin Tissoires <benjamin.tissoires@redhat.com>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>

diff --git a/drivers/hid/wacom_wac.h b/drivers/hid/wacom_wac.h
index d2629c81c51a..ba914bad971f 100644
--- a/drivers/hid/wacom_wac.h
+++ b/drivers/hid/wacom_wac.h
@@ -85,7 +85,10 @@
 #define WACOM_DEVICETYPE_DIRECT         0x0010
 
 #define WACOM_HID_UP_WACOMDIGITIZER     0xff0d0000
+#define WACOM_HID_SP_DIGITIZER          0x000d0000
+#define WACOM_HID_SP_DIGITIZERINFO      0x00100000
 #define WACOM_HID_WD_DIGITIZER          (WACOM_HID_UP_WACOMDIGITIZER | 0x01)
+#define WACOM_HID_WD_DATAMODE           (WACOM_HID_UP_WACOMDIGITIZER | 0x1002)
 #define WACOM_HID_UP_G9                 0xff090000
 #define WACOM_HID_G9_PEN                (WACOM_HID_UP_G9 | 0x02)
 #define WACOM_HID_G9_TOUCHSCREEN        (WACOM_HID_UP_G9 | 0x11)

commit 1b18b75c7e2452fc6f4cd1bb701efc4438532a07
Author: Jason Gerecke <killertofu@gmail.com>
Date:   Wed Oct 19 18:03:38 2016 -0700

    HID: wacom: Have WACOM_PEN_FIELD and WACOM_FINGER_FIELD recgonize more fields
    
    We've defined several new usages (e.g. WACOM_G9_PEN and WACOM_G9_TOUCHSCREEN)
    which aren't checked by the WACOM_PEN_FIELD and WACOM_FINGER_FIELD macros but
    probably should be.
    
    Signed-off-by: Jason Gerecke <jason.gerecke@wacom.com>
    Reviewed-by: Benjamin Tissoires <benjamin.tissoires@redhat.com>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>

diff --git a/drivers/hid/wacom_wac.h b/drivers/hid/wacom_wac.h
index f58bbd18209c..d2629c81c51a 100644
--- a/drivers/hid/wacom_wac.h
+++ b/drivers/hid/wacom_wac.h
@@ -98,10 +98,14 @@
 				 ((f)->physical == HID_DG_PEN) || \
 				 ((f)->application == HID_DG_PEN) || \
 				 ((f)->application == HID_DG_DIGITIZER) || \
-				 ((f)->application == WACOM_HID_WD_DIGITIZER))
+				 ((f)->application == WACOM_HID_WD_DIGITIZER) || \
+				 ((f)->application == WACOM_HID_G9_PEN) || \
+				 ((f)->application == WACOM_HID_G11_PEN))
 #define WACOM_FINGER_FIELD(f)	(((f)->logical == HID_DG_FINGER) || \
 				 ((f)->physical == HID_DG_FINGER) || \
-				 ((f)->application == HID_DG_TOUCHSCREEN))
+				 ((f)->application == HID_DG_TOUCHSCREEN) || \
+				 ((f)->application == WACOM_HID_G9_TOUCHSCREEN) || \
+				 ((f)->application == WACOM_HID_G11_TOUCHSCREEN))
 
 enum {
 	PENPARTNER = 0,

commit 8de82280e3f5c4569505f475ce1a0b9ccfbd8de8
Author: Jason Gerecke <killertofu@gmail.com>
Date:   Wed Oct 19 18:03:37 2016 -0700

    HID: wacom: Update vendor-defined usage names to better match standards
    
    Our loose use of "pen" and "digitizer" in the naming of several of our
    vendor-defined usages may be a source of confusion given that the terms
    have specific meaning within the HID specification. "Pen" specifically
    refers to "an integrated display that allows the use of a stylus" (e.g.
    something like a tablet PC or Cintiq) wheras "Digitizer" is a better
    fit for opaque tablets like an Intuos.
    
    While we're at it, go ahead and rename the definitions to make them more
    distinct and better match up with the convention used by HID (e.g. the use
    of '_UP_' for usage pages) and make them more distinct.
    
    Signed-off-by: Jason Gerecke <jason.gerecke@wacom.com>
    Reviewed-by: Benjamin Tissoires <benjamin.tissoires@redhat.com>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>

diff --git a/drivers/hid/wacom_wac.h b/drivers/hid/wacom_wac.h
index 324c40b0c119..f58bbd18209c 100644
--- a/drivers/hid/wacom_wac.h
+++ b/drivers/hid/wacom_wac.h
@@ -84,20 +84,21 @@
 #define WACOM_DEVICETYPE_WL_MONITOR     0x0008
 #define WACOM_DEVICETYPE_DIRECT         0x0010
 
-#define WACOM_VENDORDEFINED_PEN		0xff0d0001
-#define WACOM_G9_PAGE			0xff090000
-#define WACOM_G9_DIGITIZER		(WACOM_G9_PAGE | 0x02)
-#define WACOM_G9_TOUCHSCREEN		(WACOM_G9_PAGE | 0x11)
-#define WACOM_G11_PAGE			0xff110000
-#define WACOM_G11_DIGITIZER		(WACOM_G11_PAGE | 0x02)
-#define WACOM_G11_TOUCHSCREEN		(WACOM_G11_PAGE | 0x11)
+#define WACOM_HID_UP_WACOMDIGITIZER     0xff0d0000
+#define WACOM_HID_WD_DIGITIZER          (WACOM_HID_UP_WACOMDIGITIZER | 0x01)
+#define WACOM_HID_UP_G9                 0xff090000
+#define WACOM_HID_G9_PEN                (WACOM_HID_UP_G9 | 0x02)
+#define WACOM_HID_G9_TOUCHSCREEN        (WACOM_HID_UP_G9 | 0x11)
+#define WACOM_HID_UP_G11                0xff110000
+#define WACOM_HID_G11_PEN               (WACOM_HID_UP_G11 | 0x02)
+#define WACOM_HID_G11_TOUCHSCREEN       (WACOM_HID_UP_G11 | 0x11)
 
 #define WACOM_PEN_FIELD(f)	(((f)->logical == HID_DG_STYLUS) || \
 				 ((f)->physical == HID_DG_STYLUS) || \
 				 ((f)->physical == HID_DG_PEN) || \
 				 ((f)->application == HID_DG_PEN) || \
 				 ((f)->application == HID_DG_DIGITIZER) || \
-				 ((f)->application == WACOM_VENDORDEFINED_PEN))
+				 ((f)->application == WACOM_HID_WD_DIGITIZER))
 #define WACOM_FINGER_FIELD(f)	(((f)->logical == HID_DG_FINGER) || \
 				 ((f)->physical == HID_DG_FINGER) || \
 				 ((f)->application == HID_DG_TOUCHSCREEN))

commit 179023e6af0c608ffb505821223f5580853ef6b8
Merge: 04fd4cb0b098 9a54cf462d6f 52dc085a50c6 814cb72e25af 3202bb7fb021 f777a3a7bd44 c4425c8f26aa 6c3f70ac7c6b 1924e05e6014
Author: Jiri Kosina <jkosina@suse.cz>
Date:   Fri Oct 7 09:59:48 2016 +0200

    Merge branches 'for-4.8/upstream-fixes', 'for-4.9/alps', 'for-4.9/hid-input', 'for-4.9/intel-ish', 'for-4.9/kye-uclogic-waltop-fixes', 'for-4.9/logitech', 'for-4.9/sony', 'for-4.9/upstream' and 'for-4.9/wacom' into for-linus

commit 003f50ab673c241a5596c05c88fd25ba71db086d
Author: Jason Gerecke <killertofu@gmail.com>
Date:   Thu Jul 21 09:10:46 2016 -0700

    HID: wacom: Update last_slot_field during pre_report phase
    
    If a touchscreen contains both multitouch and single-touch reports in its
    descriptor in that order, the driver may overwrite information it saved
    about the format of the multitouch report. This can cause the report
    processing code to get tripped up and send an incorrect event stream to
    userspace.
    
    In particular, this can cause last_slot_field to be overwritten with the
    result that the driver prematurely assumes it has finished processing a
    slot and sending the ABS_MT_SLOT event at the wrong point in time,
    associating events for the current contact with the following contact
    instead.
    
    To prevent this from occurring, we update the value of last_slot_field
    durring the pre_report phase to ensure that it is correct for the report
    that is to be processed.
    
    Signed-off-by: Jason Gerecke <jason.gerecke@wacom.com>
    Reviewed-by: Ping Cheng <pingc@wacom.com>
    Reviewed-by: Benjamin Tissoires <benjamin.tissoires@redhat.com>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>

diff --git a/drivers/hid/wacom_wac.h b/drivers/hid/wacom_wac.h
index 53d16537fd2a..b794e80aa72a 100644
--- a/drivers/hid/wacom_wac.h
+++ b/drivers/hid/wacom_wac.h
@@ -185,7 +185,6 @@ struct wacom_features {
 	int pktlen;
 	bool check_for_hid_type;
 	int hid_type;
-	int last_slot_field;
 };
 
 struct wacom_shared {
@@ -214,6 +213,7 @@ struct hid_data {
 	int cc_report;
 	int cc_index;
 	int cc_value_index;
+	int last_slot_field;
 	int num_expected;
 	int num_received;
 };

commit e5bc8eb1b02244be4e97e9654d394275e615923a
Author: Jason Gerecke <killertofu@gmail.com>
Date:   Mon Aug 8 12:06:29 2016 -0700

    HID: wacom: Add WACOM_DEVICETYPE_DIRECT for Cintiqs and similar
    
    "Direct" input devices like Cintiqs and Tablet PCs set the INPUT_PROP_DIRECT
    property to notify userspace that the sensor and screen are overlaid. This
    information can also be useful elsewhere within the kernel driver, however,
    so we introduce a new WACOM_DEVICETYPE_DIRECT that signals this to other
    kernel code.
    
    Signed-off-by: Jason Gerecke <jason.gerecke@wacom.com>
    Reviewed-by: Benjamin Tissoires <benjamin.tissoires@redhat.com>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>

diff --git a/drivers/hid/wacom_wac.h b/drivers/hid/wacom_wac.h
index 745e2c91cb55..de5d1adafc6b 100644
--- a/drivers/hid/wacom_wac.h
+++ b/drivers/hid/wacom_wac.h
@@ -82,6 +82,7 @@
 #define WACOM_DEVICETYPE_TOUCH          0x0002
 #define WACOM_DEVICETYPE_PAD            0x0004
 #define WACOM_DEVICETYPE_WL_MONITOR     0x0008
+#define WACOM_DEVICETYPE_DIRECT         0x0010
 
 #define WACOM_VENDORDEFINED_PEN		0xff0d0001
 #define WACOM_G9_PAGE			0xff090000

commit 9956953ec082e9353ee0828538ff37b149cc91c9
Author: Benjamin Tissoires <benjamin.tissoires@redhat.com>
Date:   Wed Jul 13 18:06:17 2016 +0200

    HID: wacom: power_supply: provide the actual model_name
    
    Instead of displaying a generic "tablet", now g-c-c shows a pretty
    "Wacom Intuos Pro S (WL)".
    
    Signed-off-by: Benjamin Tissoires <benjamin.tissoires@redhat.com>
    Acked-by: Ping Cheng <pingc@wacom.com>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>

diff --git a/drivers/hid/wacom_wac.h b/drivers/hid/wacom_wac.h
index 8a8974c901cb..745e2c91cb55 100644
--- a/drivers/hid/wacom_wac.h
+++ b/drivers/hid/wacom_wac.h
@@ -226,6 +226,7 @@ struct wacom_remote_data {
 };
 
 struct wacom_wac {
+	char name[WACOM_NAME_MAX];
 	char pen_name[WACOM_NAME_MAX];
 	char touch_name[WACOM_NAME_MAX];
 	char pad_name[WACOM_NAME_MAX];

commit 59d69bc8215478af6b89d4ae9ab0baf6d91eb870
Author: Benjamin Tissoires <benjamin.tissoires@redhat.com>
Date:   Wed Jul 13 18:06:08 2016 +0200

    HID: wacom: EKR: have one power_supply per remote
    
    Previously, all the remotes attached to the same receiver would share the
    same power_supply. That's not good as the remotes will constantly change
    the battery information according to their own state.
    
    To have something generic enough, we introduce struct wacom_battery
    which regroups all the information we need for a battery.
    
    Signed-off-by: Benjamin Tissoires <benjamin.tissoires@redhat.com>
    Acked-by: Ping Cheng <pingc@wacom.com>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>

diff --git a/drivers/hid/wacom_wac.h b/drivers/hid/wacom_wac.h
index 6be6cae0d093..8a8974c901cb 100644
--- a/drivers/hid/wacom_wac.h
+++ b/drivers/hid/wacom_wac.h
@@ -229,8 +229,6 @@ struct wacom_wac {
 	char pen_name[WACOM_NAME_MAX];
 	char touch_name[WACOM_NAME_MAX];
 	char pad_name[WACOM_NAME_MAX];
-	char bat_name[WACOM_NAME_MAX];
-	char ac_name[WACOM_NAME_MAX];
 	unsigned char data[WACOM_PKGLEN_MAX];
 	int tool[2];
 	int id[2];
@@ -242,11 +240,7 @@ struct wacom_wac {
 	struct input_dev *touch_input;
 	struct input_dev *pad_input;
 	int pid;
-	int battery_capacity;
 	int num_contacts_left;
-	int bat_charging;
-	int bat_connected;
-	int ps_connected;
 	u8 bt_features;
 	u8 bt_high_speed;
 	int mode_report;

commit 83e6b40e2de6f8416ce6c8c3ca6c4bc8acfa8b32
Author: Benjamin Tissoires <benjamin.tissoires@redhat.com>
Date:   Wed Jul 13 18:06:02 2016 +0200

    HID: wacom: EKR: have the wacom resources dynamically allocated
    
    If we want to have one input device per remote, it's better to have our
    own struct wacom_remote which is dynamically allocated.
    
    Signed-off-by: Benjamin Tissoires <benjamin.tissoires@redhat.com>
    Acked-by: Ping Cheng <pingc@wacom.com>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>

diff --git a/drivers/hid/wacom_wac.h b/drivers/hid/wacom_wac.h
index c2c65b8c71c1..6be6cae0d093 100644
--- a/drivers/hid/wacom_wac.h
+++ b/drivers/hid/wacom_wac.h
@@ -234,7 +234,7 @@ struct wacom_wac {
 	unsigned char data[WACOM_PKGLEN_MAX];
 	int tool[2];
 	int id[2];
-	__u32 serial[5];
+	__u32 serial[2];
 	bool reporting_data;
 	struct wacom_features features;
 	struct wacom_shared *shared;

commit e6f2813a6d3fd924a399f8b19bcd8b11487155bc
Author: Benjamin Tissoires <benjamin.tissoires@redhat.com>
Date:   Wed Jul 13 18:06:01 2016 +0200

    HID: wacom: EKR: add a worker to add/remove resources on addition/removal
    
    wacom_remote_status_irq() sends information of addition/removal of EKR.
    We want to allocate one input node per remote, so better having this
    in a separate worker, not handled in the IRQ directly.
    
    Signed-off-by: Benjamin Tissoires <benjamin.tissoires@redhat.com>
    Acked-by: Ping Cheng <pingc@wacom.com>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>

diff --git a/drivers/hid/wacom_wac.h b/drivers/hid/wacom_wac.h
index d5b973d0567c..c2c65b8c71c1 100644
--- a/drivers/hid/wacom_wac.h
+++ b/drivers/hid/wacom_wac.h
@@ -218,6 +218,13 @@ struct hid_data {
 	int num_received;
 };
 
+struct wacom_remote_data {
+	struct {
+		u32 serial;
+		bool connected;
+	} remote[WACOM_MAX_REMOTES];
+};
+
 struct wacom_wac {
 	char pen_name[WACOM_NAME_MAX];
 	char touch_name[WACOM_NAME_MAX];

commit 84dfbd7f2a58c8c79ba7947159fc5f2c521348f6
Author: Benjamin Tissoires <benjamin.tissoires@redhat.com>
Date:   Wed Jul 13 18:05:55 2016 +0200

    HID: wacom: put the managed resources in a group
    
    We currently have a complex clean_inputs() function while this can be
    handled all by devres. Set a group that we can destroy in wireless_work().
    
    Signed-off-by: Benjamin Tissoires <benjamin.tissoires@redhat.com>
    Acked-by: Ping Cheng <pingc@wacom.com>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>

diff --git a/drivers/hid/wacom_wac.h b/drivers/hid/wacom_wac.h
index 53d16537fd2a..d5b973d0567c 100644
--- a/drivers/hid/wacom_wac.h
+++ b/drivers/hid/wacom_wac.h
@@ -234,9 +234,6 @@ struct wacom_wac {
 	struct input_dev *pen_input;
 	struct input_dev *touch_input;
 	struct input_dev *pad_input;
-	bool pen_registered;
-	bool touch_registered;
-	bool pad_registered;
 	int pid;
 	int battery_capacity;
 	int num_contacts_left;

commit bef7e200065086e2ceef091f6853f3b053ad2ba9
Author: Jason Gerecke <killertofu@gmail.com>
Date:   Fri Apr 22 14:30:53 2016 -0700

    HID: wacom: Add fuzz factor to distance and tilt axes
    
    The fuzz present on the distance and tilt axes is noticable when a puck is
    present, and userspace (specifically libinput) would like the ability to
    filter out the noise. To facilitate this, we assign a fuzz value of '1'
    for the distance and tilt axes. This is large enough to cover most of the
    natural variation in distance value as the puck is moved around, and
    enough to cover the jitter in rotation (reported through tilt axes) when
    the puck is left alone.
    
    Signed-off-by: Jason Gerecke <jason.gerecke@wacom.com>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>

diff --git a/drivers/hid/wacom_wac.h b/drivers/hid/wacom_wac.h
index e2084d914c14..53d16537fd2a 100644
--- a/drivers/hid/wacom_wac.h
+++ b/drivers/hid/wacom_wac.h
@@ -177,6 +177,7 @@ struct wacom_features {
 	int y_fuzz;
 	int pressure_fuzz;
 	int distance_fuzz;
+	int tilt_fuzz;
 	unsigned quirks;
 	unsigned touch_max;
 	int oVid;

commit 326ea2a90500fe4add86c5fb95d914d46910e780
Author: Jason Gerecke <killertofu@gmail.com>
Date:   Mon Apr 4 11:26:52 2016 -0700

    HID: wacom: Support switching from vendor-defined device mode on G9 and G11
    
    A tablet PC booted into Windows may have its pen/touch hardware switched
    into "Wacom mode" similar to what we do with explicitly-supported hardware.
    Some devices appear to maintain this state across reboots, preventing their
    use with the generic HID driver. This patch adds support for detecting the
    presence of the mode switch feature report used by devices based on the G9
    and G11 chips and has the HID codepath always attempt to reset the device
    back to sending standard HID reports.
    
    Fixes: https://sourceforge.net/p/linuxwacom/bugs/307/
    Fixes: https://sourceforge.net/p/linuxwacom/bugs/310/
    Fixes: https://github.com/linuxwacom/input-wacom/issues/15
    
    Co-authored-by: Benjamin Tissoires <benjamin.tissoires@redhat.com>
    Signed-off-by: Jason Gerecke <jason.gerecke@wacom.com>
    Reviewed-by: Benjamin Tissoires <benjamin.tissoires@redhat.com>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>

diff --git a/drivers/hid/wacom_wac.h b/drivers/hid/wacom_wac.h
index 25baa7f29599..e2084d914c14 100644
--- a/drivers/hid/wacom_wac.h
+++ b/drivers/hid/wacom_wac.h
@@ -84,6 +84,12 @@
 #define WACOM_DEVICETYPE_WL_MONITOR     0x0008
 
 #define WACOM_VENDORDEFINED_PEN		0xff0d0001
+#define WACOM_G9_PAGE			0xff090000
+#define WACOM_G9_DIGITIZER		(WACOM_G9_PAGE | 0x02)
+#define WACOM_G9_TOUCHSCREEN		(WACOM_G9_PAGE | 0x11)
+#define WACOM_G11_PAGE			0xff110000
+#define WACOM_G11_DIGITIZER		(WACOM_G11_PAGE | 0x02)
+#define WACOM_G11_TOUCHSCREEN		(WACOM_G11_PAGE | 0x11)
 
 #define WACOM_PEN_FIELD(f)	(((f)->logical == HID_DG_STYLUS) || \
 				 ((f)->physical == HID_DG_STYLUS) || \
@@ -238,6 +244,8 @@ struct wacom_wac {
 	int ps_connected;
 	u8 bt_features;
 	u8 bt_high_speed;
+	int mode_report;
+	int mode_value;
 	struct hid_data hid_data;
 };
 

commit 0bbfe28ad0fdc11dddae5fe6f6e4e91b7be06395
Author: Jason Gerecke <killertofu@gmail.com>
Date:   Wed Jan 6 13:25:53 2016 -0800

    HID: wacom: Use correct report to query pen ID from INTUOSHT2 devices
    
    Unlike other tablets which are compatible with the wacom_intuos_irq handler,
    INTUOSHT2 devices provide pen ID with report ID 8 instead of 5. To ensure
    wacom_intuos_schedule_prox_event works as intended for these tablets, we
    must be sure it uses the correct report ID in this case.
    
    Signed-off-by: Jason Gerecke <jason.gerecke@wacom.com>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>

diff --git a/drivers/hid/wacom_wac.h b/drivers/hid/wacom_wac.h
index 3f60192e9272..25baa7f29599 100644
--- a/drivers/hid/wacom_wac.h
+++ b/drivers/hid/wacom_wac.h
@@ -70,6 +70,7 @@
 #define WACOM_REPORT_DEVICE_LIST	16
 #define WACOM_REPORT_INTUOS_PEN		16
 #define WACOM_REPORT_REMOTE		17
+#define WACOM_REPORT_INTUOSHT2_ID	8
 
 /* device quirks */
 #define WACOM_QUIRK_BBTOUCH_LOWRES	0x0001

commit 061099936a724cdd8dd0d69deea5b064b4f7122b
Author: Jason Gerecke <killertofu@gmail.com>
Date:   Mon Nov 30 17:13:52 2015 -0800

    HID: wacom: Rename wacom ID report ID macros
    
    "INTUOSREAD" and "INTUOSWRITE" are poorly named. These are report IDs
    for pen ID (proximity) packets. It should be noted that the latter is
    only used on Intuos/Intuos2 for a second stylus when DualTrack is in use.
    
    Signed-off-by: Jason Gerecke <jason.gerecke@wacom.com>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>

diff --git a/drivers/hid/wacom_wac.h b/drivers/hid/wacom_wac.h
index 877c24a5df94..3f60192e9272 100644
--- a/drivers/hid/wacom_wac.h
+++ b/drivers/hid/wacom_wac.h
@@ -47,8 +47,8 @@
 /* wacom data packet report IDs */
 #define WACOM_REPORT_PENABLED		2
 #define WACOM_REPORT_PENABLED_BT	3
-#define WACOM_REPORT_INTUOSREAD		5
-#define WACOM_REPORT_INTUOSWRITE	6
+#define WACOM_REPORT_INTUOS_ID1		5
+#define WACOM_REPORT_INTUOS_ID2		6
 #define WACOM_REPORT_INTUOSPAD		12
 #define WACOM_REPORT_INTUOS5PAD		3
 #define WACOM_REPORT_DTUSPAD		21

commit d64e19db030dadb1c9d2747ace919fd952be359c
Merge: df7079380554 937804f3c706 18339f59c3a6 f3984edc171c 29fae1c85166 c6956eb70e25 6d4f5440a3a2 8d2f8479da3c 636a89d43e39 86e88f0e7068
Author: Jiri Kosina <jkosina@suse.cz>
Date:   Fri Nov 6 21:45:15 2015 +0100

    Merge branches 'for-4.3/upstream-fixes', 'for-4.4/corsair', 'for-4.4/dragonrise', 'for-4.4/i2c-hid', 'for-4.4/logitech', 'for-4.4/microsoft', 'for-4.4/multitouch', 'for-4.4/roccat-sysfs-deprecation', 'for-4.4/upstream' and 'for-4.4/wacom' into for-linus

commit 7adb91bd78a5e00209c56068dc0ad53d4cf4348f
Author: Ping Cheng <pinglinux@gmail.com>
Date:   Mon Oct 26 14:29:12 2015 -0700

    HID: wacom: fix Intuos wireless report id issue
    
    Intuos Pen in wireless mode does not have the same report id (2) as
    when it is in USB mode (17).
    
    This patch also moves WIRELESS next to REMOTE in type enum so we
    can group devices with similar features easily.
    
    Reported-by: Dale Brewe <dlbrewe@hotmail.com>
    Tested-by: Dale Brewe <dlbrewe@hotmail.com>
    Signed-off-by: Ping Cheng <pingc@wacom.com>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>

diff --git a/drivers/hid/wacom_wac.h b/drivers/hid/wacom_wac.h
index 95ee92b807e9..d9e9515fd149 100644
--- a/drivers/hid/wacom_wac.h
+++ b/drivers/hid/wacom_wac.h
@@ -129,7 +129,6 @@ enum {
 	WACOM_BEE,
 	WACOM_13HD,
 	WACOM_MO,
-	WIRELESS,
 	BAMBOO_PEN,
 	INTUOSHT,
 	INTUOSHT2,
@@ -138,6 +137,7 @@ enum {
 	WACOM_24HDT,
 	WACOM_27QHDT,
 	BAMBOO_PAD,
+	WIRELESS,
 	REMOTE,
 	TABLETPC,   /* add new TPC below */
 	TABLETPCE,

commit 499522c8c015de995aabce3d0f0bf4b9b17f44c3
Author: Jason Gerecke <killertofu@gmail.com>
Date:   Wed Oct 7 16:54:21 2015 -0700

    HID: wacom: Tie cached HID_DG_CONTACTCOUNT indices to report ID
    
    The cached indicies 'cc_index' and 'cc_value_index' introduced in 1b5d514
    are only valid for a single report ID. If a touchscreen has multiple
    reports with a HID_DG_CONTACTCOUNT usage, its possible that the values
    will not be correct for the report we're handling, resulting in an
    incorrect value for 'num_expected'. This has been observed with the Cintiq
    Companion 2.
    
    To address this, we store the ID of the report those indicies are valid
    for in a new  'cc_report' variable. Before using them to get the expected
    contact count, we first check if the ID of the report we're processing
    matches 'cc_report'. If it doesn't, we update the indicies to point to
    the HID_DG_CONTACTCOUNT usage of the current report (if it has one).
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Jason Gerecke <jason.gerecke@wacom.com>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>

diff --git a/drivers/hid/wacom_wac.h b/drivers/hid/wacom_wac.h
index 1e270d401e18..809c03e34f74 100644
--- a/drivers/hid/wacom_wac.h
+++ b/drivers/hid/wacom_wac.h
@@ -198,6 +198,7 @@ struct hid_data {
 	int width;
 	int height;
 	int id;
+	int cc_report;
 	int cc_index;
 	int cc_value_index;
 	int num_expected;

commit f7acb55cf1b414f8f515697f2a7bb324ba009062
Author: Jason Gerecke <killertofu@gmail.com>
Date:   Tue Oct 13 10:03:49 2015 -0700

    HID: wacom: Add support for Cintiq Companion 2
    
    Adds support for the EMR (pen+pad) and touchscreen devices used by the
    Wacom Cintiq Companion 2. This applies both to using the device as a
    standalone system, as well as when operating in "Cintiq mode" (where
    the EMR/touchscreen are simply exposed as USB devices to the system
    its connected to).
    
    Signed-off-by: Jason Gerecke <jason.gerecke@wacom.com>
    Signed-off-by: Clifford Jolly <expiredpopsicle@gmail.com>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>

diff --git a/drivers/hid/wacom_wac.h b/drivers/hid/wacom_wac.h
index 1a30e4407a46..95ee92b807e9 100644
--- a/drivers/hid/wacom_wac.h
+++ b/drivers/hid/wacom_wac.h
@@ -124,6 +124,7 @@ enum {
 	WACOM_24HD,
 	WACOM_27QHD,
 	CINTIQ_HYBRID,
+	CINTIQ_COMPANION_2,
 	CINTIQ,
 	WACOM_BEE,
 	WACOM_13HD,

commit eda01dab53b1126a20da98b5d691f3e55d79f21d
Author: Ping Cheng <pinglinux@gmail.com>
Date:   Wed Sep 23 13:51:15 2015 -0700

    HID: wacom: Add four new Intuos devices
    
    This series of devices supports both pen and touch. It reports
    touch data in Bamboo3 format and pen data in Intuos pro format.
    
    Signed-off-by: Ping Cheng <pingc@wacom.com>
    Tested-By: Aaron Skomra <aaron.skomra@wacom.com>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>

diff --git a/drivers/hid/wacom_wac.h b/drivers/hid/wacom_wac.h
index 3f2452029d2b..1a30e4407a46 100644
--- a/drivers/hid/wacom_wac.h
+++ b/drivers/hid/wacom_wac.h
@@ -68,6 +68,7 @@
 #define WACOM_REPORT_BPAD_PEN		3
 #define WACOM_REPORT_BPAD_TOUCH		16
 #define WACOM_REPORT_DEVICE_LIST	16
+#define WACOM_REPORT_INTUOS_PEN		16
 #define WACOM_REPORT_REMOTE		17
 
 /* device quirks */
@@ -130,6 +131,7 @@ enum {
 	WIRELESS,
 	BAMBOO_PEN,
 	INTUOSHT,
+	INTUOSHT2,
 	BAMBOO_TOUCH,
 	BAMBOO_PT,
 	WACOM_24HDT,

commit 3b164a00a9fc0e8df88291a671bb3de37aa3340f
Author: Ping Cheng <pinglinux@gmail.com>
Date:   Wed Sep 23 09:59:10 2015 -0700

    HID: wacom: Cleanup unsupported device_type for BAMBOO_PT
    
    Not all Bamboo support both pen and touch. Make sure we deal with
    pen only and touch only devices properly.
    
    Signed-off-by: Ping Cheng <pingc@wacom.com>
    Tested-By: Aaron Skomra <aaron.skomra@wacom.com>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>

diff --git a/drivers/hid/wacom_wac.h b/drivers/hid/wacom_wac.h
index 1e270d401e18..3f2452029d2b 100644
--- a/drivers/hid/wacom_wac.h
+++ b/drivers/hid/wacom_wac.h
@@ -117,7 +117,6 @@ enum {
 	INTUOSPS,
 	INTUOSPM,
 	INTUOSPL,
-	INTUOSHT,
 	WACOM_21UX2,
 	WACOM_22HD,
 	DTK,
@@ -129,6 +128,9 @@ enum {
 	WACOM_13HD,
 	WACOM_MO,
 	WIRELESS,
+	BAMBOO_PEN,
+	INTUOSHT,
+	BAMBOO_TOUCH,
 	BAMBOO_PT,
 	WACOM_24HDT,
 	WACOM_27QHDT,

commit 72b236d60218fe211a8e1210be31c31e81684b86
Author: Aaron Skomra <skomra@gmail.com>
Date:   Thu Aug 20 16:05:17 2015 -0700

    HID: wacom: Add support for Express Key Remote.
    
    This device is pad (buttons) only, there is no stylus or touch. Up to
    five remotes can pair with the device's associated USB dongle.
    
    Signed-off-by: Aaron Skomra <aaron.skomra@wacom.com>
    Reviewed-by: Jason Gerecke <jason.gerecke@wacom.com>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>

diff --git a/drivers/hid/wacom_wac.h b/drivers/hid/wacom_wac.h
index 4ee5c13b4e75..1e270d401e18 100644
--- a/drivers/hid/wacom_wac.h
+++ b/drivers/hid/wacom_wac.h
@@ -16,6 +16,8 @@
 #define WACOM_PKGLEN_MAX	192
 
 #define WACOM_NAME_MAX		64
+#define WACOM_MAX_REMOTES	5
+#define WACOM_STATUS_UNKNOWN	255
 
 /* packet length for individual models */
 #define WACOM_PKGLEN_BBFUN	 9
@@ -65,6 +67,8 @@
 #define WACOM_REPORT_USB		192
 #define WACOM_REPORT_BPAD_PEN		3
 #define WACOM_REPORT_BPAD_TOUCH		16
+#define WACOM_REPORT_DEVICE_LIST	16
+#define WACOM_REPORT_REMOTE		17
 
 /* device quirks */
 #define WACOM_QUIRK_BBTOUCH_LOWRES	0x0001
@@ -129,6 +133,7 @@ enum {
 	WACOM_24HDT,
 	WACOM_27QHDT,
 	BAMBOO_PAD,
+	REMOTE,
 	TABLETPC,   /* add new TPC below */
 	TABLETPCE,
 	TABLETPC2FG,
@@ -208,7 +213,7 @@ struct wacom_wac {
 	unsigned char data[WACOM_PKGLEN_MAX];
 	int tool[2];
 	int id[2];
-	__u32 serial[2];
+	__u32 serial[5];
 	bool reporting_data;
 	struct wacom_features features;
 	struct wacom_shared *shared;

commit 70ee06c5f447b9d50747b29d3e8d48ae7ef1cabe
Author: Aaron Skomra <skomra@gmail.com>
Date:   Thu Aug 20 16:05:16 2015 -0700

    HID: wacom: Set button bits based on a new numbered_buttons
    
    Prior to this commit, numbered button bit setting was done separately
    for each device type in wacom_setup_pad_capabilities(). Here we add a
    numbered_buttons property to the wacom_features struct and extract the
    repeated bit setting code to a new function:
    wacom_settup_numbered_buttons().
    
    Signed-off-by: Aaron Skomra <aaron.skomra@wacom.com>
    Reviewed-by: Jason Gerecke <jason.gerecke@wacom.com>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>

diff --git a/drivers/hid/wacom_wac.h b/drivers/hid/wacom_wac.h
index 6233eeab028d..4ee5c13b4e75 100644
--- a/drivers/hid/wacom_wac.h
+++ b/drivers/hid/wacom_wac.h
@@ -148,6 +148,7 @@ struct wacom_features {
 	int type;
 	int x_resolution;
 	int y_resolution;
+	int numbered_buttons;
 	int x_min;
 	int y_min;
 	int device_type;

commit 3f14a63a544374225c17221a5058748360428dc3
Author: Jason Gerecke <killertofu@gmail.com>
Date:   Mon Aug 3 10:17:05 2015 -0700

    HID: wacom: Remove WACOM_QUIRK_NO_INPUT
    
    WACOM_QUIRK_NO_INPUT is a signal to the driver that input devices
    should not be created for a particular device. This quirk was used by
    the wireless receiver to prevent any devices from being created during
    the initial probe (defering it instead until we got a tablet connection
    event in 'wacom_wireless_work').
    
    This quirk is not necessary now that a device_type is associated with each
    device. Any input device allocated by 'wacom_allocate_inputs' which is
    not necessary for a particular device is freed in 'wacom_register_inputs'.
    In particular, none of the wireless receivers devices have the pen, pad,
    or touch device types set so the same effect is achieved without the need
    to be explicit.
    
    We now return early in wacom_retrieve_hid_descriptor for wireless devices
    (to prevent the device_type from being overridden) but since we ignore the
    HID descriptor for the wireless reciever anyway, this is not an issue.
    
    Signed-off-by: Jason Gerecke <jason.gerecke@wacom.com>
    Reviewed-by: Benjamin Tissoires <benjamin.tissoires@redhat.com>
    Signed-off-by: Jiri Kosina <jkosina@suse.com>

diff --git a/drivers/hid/wacom_wac.h b/drivers/hid/wacom_wac.h
index 87df674e210c..6233eeab028d 100644
--- a/drivers/hid/wacom_wac.h
+++ b/drivers/hid/wacom_wac.h
@@ -68,7 +68,6 @@
 
 /* device quirks */
 #define WACOM_QUIRK_BBTOUCH_LOWRES	0x0001
-#define WACOM_QUIRK_NO_INPUT		0x0002
 #define WACOM_QUIRK_BATTERY		0x0008
 
 /* device types */

commit ccad85cc1ee34509840e5af80a436ceaf0b71edb
Author: Jason Gerecke <killertofu@gmail.com>
Date:   Mon Aug 3 10:17:04 2015 -0700

    HID: wacom: Replace WACOM_QUIRK_MONITOR with WACOM_DEVICETYPE_WL_MONITOR
    
    The monitor interface on the wireless receiver is more logically expressed
    as a type of device instead of a quirk.
    
    Signed-off-by: Jason Gerecke <jason.gerecke@wacom.com>
    Reviewed-by: Benjamin Tissoires <benjamin.tissoires@redhat.com>
    Signed-off-by: Jiri Kosina <jkosina@suse.com>

diff --git a/drivers/hid/wacom_wac.h b/drivers/hid/wacom_wac.h
index c245a6628224..87df674e210c 100644
--- a/drivers/hid/wacom_wac.h
+++ b/drivers/hid/wacom_wac.h
@@ -69,7 +69,6 @@
 /* device quirks */
 #define WACOM_QUIRK_BBTOUCH_LOWRES	0x0001
 #define WACOM_QUIRK_NO_INPUT		0x0002
-#define WACOM_QUIRK_MONITOR		0x0004
 #define WACOM_QUIRK_BATTERY		0x0008
 
 /* device types */
@@ -77,6 +76,7 @@
 #define WACOM_DEVICETYPE_PEN            0x0001
 #define WACOM_DEVICETYPE_TOUCH          0x0002
 #define WACOM_DEVICETYPE_PAD            0x0004
+#define WACOM_DEVICETYPE_WL_MONITOR     0x0008
 
 #define WACOM_VENDORDEFINED_PEN		0xff0d0001
 

commit 1b5d514a3d24996ddbe7c75685af9dfdeff125b5
Author: Jason Gerecke <killertofu@gmail.com>
Date:   Tue Jul 21 11:07:24 2015 -0700

    HID: wacom: Ignore contacts in excess of declared contact count
    
    The reports sent from some touch devices (e.g. the Cintiq 24HDT) contain
    junk data in the contact slots which follow the final "valid" contact.
    To avoid forwarding it to usrspace, we store the reported contact count
    during the pre-process phase and then only process that many contacts.
    If a device sends its contacts across multiple reports (what Microsoft
    refers to as "hybrid" mode) then the contact count will be zero for
    reports other than the first.
    
    Signed-off-by: Jason Gerecke <jason.gerecke@wacom.com>
    Signed-off-by: Jiri Kosina <jkosina@suse.com>

diff --git a/drivers/hid/wacom_wac.h b/drivers/hid/wacom_wac.h
index 2978c303909d..c245a6628224 100644
--- a/drivers/hid/wacom_wac.h
+++ b/drivers/hid/wacom_wac.h
@@ -193,6 +193,10 @@ struct hid_data {
 	int width;
 	int height;
 	int id;
+	int cc_index;
+	int cc_value_index;
+	int num_expected;
+	int num_received;
 };
 
 struct wacom_wac {

commit 2a6cdbdd4cc0da0b0190b9a43648dff7b44adc0a
Author: Jason Gerecke <killertofu@gmail.com>
Date:   Mon Jun 15 18:01:45 2015 -0700

    HID: wacom: Introduce new 'touch_input' device
    
    Instead of having a single 'input_dev' device that will take either pen
    or touch data depending on the type of the device, create seperate devices
    devices for each. By splitting things like this, we can support devices
    (e.g. the I2C "AES" sensors in some newer tablet PCs) that send both pen
    and touch reports from a single endpoint.
    
    Signed-off-by: Jason Gerecke <jason.gerecke@wacom.com>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>

diff --git a/drivers/hid/wacom_wac.h b/drivers/hid/wacom_wac.h
index c873c9f5b562..2978c303909d 100644
--- a/drivers/hid/wacom_wac.h
+++ b/drivers/hid/wacom_wac.h
@@ -196,7 +196,8 @@ struct hid_data {
 };
 
 struct wacom_wac {
-	char name[WACOM_NAME_MAX];
+	char pen_name[WACOM_NAME_MAX];
+	char touch_name[WACOM_NAME_MAX];
 	char pad_name[WACOM_NAME_MAX];
 	char bat_name[WACOM_NAME_MAX];
 	char ac_name[WACOM_NAME_MAX];
@@ -207,9 +208,11 @@ struct wacom_wac {
 	bool reporting_data;
 	struct wacom_features features;
 	struct wacom_shared *shared;
-	struct input_dev *input;
+	struct input_dev *pen_input;
+	struct input_dev *touch_input;
 	struct input_dev *pad_input;
-	bool input_registered;
+	bool pen_registered;
+	bool touch_registered;
 	bool pad_registered;
 	int pid;
 	int battery_capacity;

commit 862cf5535c0cf4b39ce71a3b7e9a1c22ae4f70ae
Author: Jason Gerecke <killertofu@gmail.com>
Date:   Mon Jun 15 18:01:43 2015 -0700

    HID: wacom: Introduce a new WACOM_DEVICETYPE_PAD device_type
    
    Historically, both the touch and pad tools would have shared the
    'BTN_TOOL_FINGER' type. Any time you needed to distinguish the two, you
    had to use some other bit of knowledge (e.g. that the pad was on the same
    interface as the pen, and thus 'touch_max' would be zero).
    
    To make these checks more readable, we introduce WACOM_DEVICETYPE_PAD.
    Although we still have to rely on other bits of knowledge to set this
    bit on the right interface (since it cannot be detected from the HID
    descriptor), it can be done just once inside 'wacom_setup_device_quirks'.
    
    This patch introduces no functional changes.
    
    Signed-off-by: Jason Gerecke <jason.gerecke@wacom.com>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>

diff --git a/drivers/hid/wacom_wac.h b/drivers/hid/wacom_wac.h
index da2b3095c2f8..c873c9f5b562 100644
--- a/drivers/hid/wacom_wac.h
+++ b/drivers/hid/wacom_wac.h
@@ -76,6 +76,7 @@
 #define WACOM_DEVICETYPE_NONE           0x0000
 #define WACOM_DEVICETYPE_PEN            0x0001
 #define WACOM_DEVICETYPE_TOUCH          0x0002
+#define WACOM_DEVICETYPE_PAD            0x0004
 
 #define WACOM_VENDORDEFINED_PEN		0xff0d0001
 

commit aa86b18cc9cd147b40412a2d57b383a5e16fe3b5
Author: Jason Gerecke <killertofu@gmail.com>
Date:   Mon Jun 15 18:01:42 2015 -0700

    HID: wacom: Treat features->device_type values as flags
    
    The USB devices that this driver has historically supported segregate the
    pen and touch portions of the tablet. Oftentimes the segregation would be
    done at the interface level, though on occasion (e.g. Cintiq 24HDT) the
    tablet would combine two totally independent USB devices behind an internal
    USB hub. Because pen and touch never shared the same interface, it made
    sense for the 'device_type' to store a single value: "pen" or "touch".
    
    Recently, however, some I2C devices have been created which combine the
    two. A first step to accomodating this is to expand 'device_type' so that
    it can represent two (or potentially more) types simultaneously. To do
    this, we treat it as a bitfield and set/check individual bits rather
    than using the '=' and '==' operators.
    
    This should not result in any functional change since no supported devices
    (that I'm aware of, at least) have HID descriptors that indicate both
    pen and touch reports on a single interface.
    
    Signed-off-by: Jason Gerecke <jason.gerecke@wacom.com>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>

diff --git a/drivers/hid/wacom_wac.h b/drivers/hid/wacom_wac.h
index 9a5ee623cb44..da2b3095c2f8 100644
--- a/drivers/hid/wacom_wac.h
+++ b/drivers/hid/wacom_wac.h
@@ -72,6 +72,11 @@
 #define WACOM_QUIRK_MONITOR		0x0004
 #define WACOM_QUIRK_BATTERY		0x0008
 
+/* device types */
+#define WACOM_DEVICETYPE_NONE           0x0000
+#define WACOM_DEVICETYPE_PEN            0x0001
+#define WACOM_DEVICETYPE_TOUCH          0x0002
+
 #define WACOM_VENDORDEFINED_PEN		0xff0d0001
 
 #define WACOM_PEN_FIELD(f)	(((f)->logical == HID_DG_STYLUS) || \

commit 042628abd59c9a034797bd3083f806fa17cda62d
Author: Jason Gerecke <killertofu@gmail.com>
Date:   Thu Apr 30 17:51:54 2015 -0700

    HID: wacom: Discover device_type from HID descriptor for all devices
    
    Currently, we assume a device_type of BTN_TOOL_PEN before scanning the
    HID descriptor and then change the device_type if what we discover
    proves that assumption wrong. This way of doing things makes it more
    difficult to figure out if a device (particularly a HID_GENERIC device)
    actually does tablet/touch input or is something completley different.
    
    This patch leaves device_type at its initial value of 0 and then calls
    'wacom_parse_hid' for every device (not just those that have touch).
    As we map the usages, we can set the device_type as before. After we're
    finished, we can then check if the value is still zero and do whatever
    is most appropriate.
    
    Detecting the pen can be a little tricky on most Wacom devices because
    the descriptors describe opaque blobs. Fortunately, older Wacom tablets
    have the HID_DG_DIGITIZER usage on the pen's application collection and
    newer tablets seem to have a similar vendor-defined usage that we can
    trigger on.
    
    Signed-off-by: Jason Gerecke <jason.gerecke@wacom.com>
    Reviewed-by: Ping Cheng <pingc@wacom.com>
    Reviewed-by: Benjamin Tissoires <benjamin.tissoires@redhat.com>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>

diff --git a/drivers/hid/wacom_wac.h b/drivers/hid/wacom_wac.h
index f5a5f686bc98..9a5ee623cb44 100644
--- a/drivers/hid/wacom_wac.h
+++ b/drivers/hid/wacom_wac.h
@@ -72,10 +72,14 @@
 #define WACOM_QUIRK_MONITOR		0x0004
 #define WACOM_QUIRK_BATTERY		0x0008
 
+#define WACOM_VENDORDEFINED_PEN		0xff0d0001
+
 #define WACOM_PEN_FIELD(f)	(((f)->logical == HID_DG_STYLUS) || \
 				 ((f)->physical == HID_DG_STYLUS) || \
 				 ((f)->physical == HID_DG_PEN) || \
-				 ((f)->application == HID_DG_PEN))
+				 ((f)->application == HID_DG_PEN) || \
+				 ((f)->application == HID_DG_DIGITIZER) || \
+				 ((f)->application == WACOM_VENDORDEFINED_PEN))
 #define WACOM_FINGER_FIELD(f)	(((f)->logical == HID_DG_FINGER) || \
 				 ((f)->physical == HID_DG_FINGER) || \
 				 ((f)->application == HID_DG_TOUCHSCREEN))

commit e48151a3a456b38b1029a8a7380246b53c768400
Author: Ping Cheng <pinglinux@gmail.com>
Date:   Wed Apr 15 16:54:58 2015 -0700

    HID: wacom: remove unused packet lengths
    
    We use generic hid_report_len() to get individual packet length now.
    
    Signed-off-by: Ping Cheng <pingc@wacom.com>
    Reviewed-by: Jason Gerecke <jason.gerecke@wacom.com>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>

diff --git a/drivers/hid/wacom_wac.h b/drivers/hid/wacom_wac.h
index 4700ac994a3b..f5a5f686bc98 100644
--- a/drivers/hid/wacom_wac.h
+++ b/drivers/hid/wacom_wac.h
@@ -18,10 +18,7 @@
 #define WACOM_NAME_MAX		64
 
 /* packet length for individual models */
-#define WACOM_PKGLEN_PENPRTN	 7
-#define WACOM_PKGLEN_GRAPHIRE	 8
 #define WACOM_PKGLEN_BBFUN	 9
-#define WACOM_PKGLEN_INTUOS	10
 #define WACOM_PKGLEN_TPC1FG	 5
 #define WACOM_PKGLEN_TPC1FG_B	10
 #define WACOM_PKGLEN_TPC2FG	14
@@ -29,9 +26,6 @@
 #define WACOM_PKGLEN_BBTOUCH3	64
 #define WACOM_PKGLEN_BBPEN	10
 #define WACOM_PKGLEN_WIRELESS	32
-#define WACOM_PKGLEN_MTOUCH	62
-#define WACOM_PKGLEN_MTTPC	40
-#define WACOM_PKGLEN_DTUS	68
 #define WACOM_PKGLEN_PENABLED	 8
 #define WACOM_PKGLEN_BPAD_TOUCH	32
 #define WACOM_PKGLEN_BPAD_TOUCH_USB	64

commit f3586d2f819af6dbe5b08d2a6f1d22b1a97e2b64
Author: Ping Cheng <pinglinux@gmail.com>
Date:   Fri Mar 20 14:57:00 2015 -0700

    HID: wacom: remove hardcoded WACOM_QUIRK_MULTI_INPUT
    
    The quirk was added for devices that support both pen and touch.  It decides if
    a device supports multiple inputs by hardcoded feature type. However, for some
    devices, we do not know if they support both before accessing their HID
    descriptors.
    
    This patch relies on dynamically assigned device_type to make the decision.
    Also, we make it certain that wacom_wac->shared is always created. That is, the
    driver will not be loaded if it fails to create wacom_wac->shared.
    
    Signed-off-by: Ping Cheng <pingc@wacom.com>
    Reviewed-by: Jason Gerecke <jason.gerecke@wacom.com>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>

diff --git a/drivers/hid/wacom_wac.h b/drivers/hid/wacom_wac.h
index 1c7d8931f1fa..4700ac994a3b 100644
--- a/drivers/hid/wacom_wac.h
+++ b/drivers/hid/wacom_wac.h
@@ -73,11 +73,10 @@
 #define WACOM_REPORT_BPAD_TOUCH		16
 
 /* device quirks */
-#define WACOM_QUIRK_MULTI_INPUT		0x0001
-#define WACOM_QUIRK_BBTOUCH_LOWRES	0x0002
-#define WACOM_QUIRK_NO_INPUT		0x0004
-#define WACOM_QUIRK_MONITOR		0x0008
-#define WACOM_QUIRK_BATTERY		0x0010
+#define WACOM_QUIRK_BBTOUCH_LOWRES	0x0001
+#define WACOM_QUIRK_NO_INPUT		0x0002
+#define WACOM_QUIRK_MONITOR		0x0004
+#define WACOM_QUIRK_BATTERY		0x0008
 
 #define WACOM_PEN_FIELD(f)	(((f)->logical == HID_DG_STYLUS) || \
 				 ((f)->physical == HID_DG_STYLUS) || \

commit 71fa641ebbfd2402bdb76d3c6ba7e4a2d1eb2dfc
Author: Jason Gerecke <killertofu@gmail.com>
Date:   Wed Mar 11 10:25:41 2015 -0700

    HID: wacom: Add battery presence indicator to wireless tablets
    
    Declare the POWER_SUPPLY_PROP_PRESENT property to provide userspace
    with a way to determine if the battery on a wireless tablet is plugged
    in. Although current wireless tablets do not explicitly report this
    information, it can be inferred from other state information. In
    particular, a battery is assumed to be present if any of the following
    are true: a non-zero battery level reported, the battery is reported as
    charging, or the tablet is operating wirelessly.
    
    Note: The last condition above may not strictly hold for the Graphire
    Wireless (it charges from a DC barrel jack instead of a USB port), but I
    do not know what is reported in the no-battery condition.
    
    Signed-off-by: Jason Gerecke <killertofu@gmail.com>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>

diff --git a/drivers/hid/wacom_wac.h b/drivers/hid/wacom_wac.h
index a3d0828ff8b1..1c7d8931f1fa 100644
--- a/drivers/hid/wacom_wac.h
+++ b/drivers/hid/wacom_wac.h
@@ -212,6 +212,7 @@ struct wacom_wac {
 	int battery_capacity;
 	int num_contacts_left;
 	int bat_charging;
+	int bat_connected;
 	int ps_connected;
 	u8 bt_features;
 	u8 bt_high_speed;

commit 8fac1722140019d6a53f7b280f8b785707a16f66
Author: Jiri Kosina <jkosina@suse.cz>
Date:   Wed Mar 11 11:48:11 2015 -0400

    HID: wacom: drop WACOM_PKGLEN_STATUS
    
    The constant is not used (leftover from previous patch versions
    that never got merged).
    
    Reported-by: Ping Cheng <pingc@wacom.com>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>

diff --git a/drivers/hid/wacom_wac.h b/drivers/hid/wacom_wac.h
index ee6a545d5869..a3d0828ff8b1 100644
--- a/drivers/hid/wacom_wac.h
+++ b/drivers/hid/wacom_wac.h
@@ -71,7 +71,6 @@
 #define WACOM_REPORT_USB		192
 #define WACOM_REPORT_BPAD_PEN		3
 #define WACOM_REPORT_BPAD_TOUCH		16
-#define WACOM_PKGLEN_STATUS		10
 
 /* device quirks */
 #define WACOM_QUIRK_MULTI_INPUT		0x0001

commit 4ca4ec71c84e4ede2b34d2dcf49e7935c735ad6c
Author: Jason Gerecke <killertofu@gmail.com>
Date:   Fri Mar 6 11:47:38 2015 -0800

    HID: wacom: Move handling of Intuos status packets to seperate function
    
    In addition to the touchswitch state for "Intuos", these packets are
    also sent by the Intuos Pro, Intuos5, and last-generation Bamboo
    tablets when using a wired connection. They contain, among other
    things, information about the optional wireless module and battery
    charge state (to be supported in subsuquent patches).
    
    Signed-off-by: Jason Gerecke <killertofu@gmail.com>
    Acked-by: Ping Cheng <pingc@wacom.com>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>

diff --git a/drivers/hid/wacom_wac.h b/drivers/hid/wacom_wac.h
index a3d0828ff8b1..ee6a545d5869 100644
--- a/drivers/hid/wacom_wac.h
+++ b/drivers/hid/wacom_wac.h
@@ -71,6 +71,7 @@
 #define WACOM_REPORT_USB		192
 #define WACOM_REPORT_BPAD_PEN		3
 #define WACOM_REPORT_BPAD_TOUCH		16
+#define WACOM_PKGLEN_STATUS		10
 
 /* device quirks */
 #define WACOM_QUIRK_MULTI_INPUT		0x0001

commit 8c97a765467c5d58682e85f103899ec2355fc393
Author: Benjamin Tissoires <benjamin.tissoires@redhat.com>
Date:   Thu Feb 26 11:28:50 2015 -0500

    HID: wacom: add full support of the Wacom Bamboo PAD
    
    The stylus of this device works just fine out of the box.
    The touch is seen by default as a mouse with relative events and some
    gestures.
    The wireless and the wired version have slightly different firmwares, but
    the debug mode 2 on the feature 2 is common to the 2 devices. In this mode,
    all the reports are emitted through the debug interface (pen, raw touch
    and mouse emulation), so we have to re-route manually the events.
    
    We keep the Pen interface as a HID_GENERIC one because it works, and only
    parse the raw touches while discarding the mouse emulation & gestures.
    
    Switching the default in raw mode allows us to have a consistent user
    experience accross all the multitouch touchpads (and enable the touch part
    of the devices).
    
    Note that the buttons of this devices are reported through the touch
    interface. There is no 'Pad' interface. It seemed more natural to have
    the BTN_LEFT and BTN_RIGHT reported with the touch because they are
    placed under the touch interface and it looks like they belong to the
    touch part.
    
    Tested-by: Josep Sanchez Ferreres <josep.sanchez.ferreres@est.fib.upc.edu>
    Signed-off-by: Benjamin Tissoires <benjamin.tissoires@redhat.com>
    Acked-by: Ping Cheng <pingc@wacom.com>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>

diff --git a/drivers/hid/wacom_wac.h b/drivers/hid/wacom_wac.h
index e42efbe3338c..a3d0828ff8b1 100644
--- a/drivers/hid/wacom_wac.h
+++ b/drivers/hid/wacom_wac.h
@@ -33,6 +33,8 @@
 #define WACOM_PKGLEN_MTTPC	40
 #define WACOM_PKGLEN_DTUS	68
 #define WACOM_PKGLEN_PENABLED	 8
+#define WACOM_PKGLEN_BPAD_TOUCH	32
+#define WACOM_PKGLEN_BPAD_TOUCH_USB	64
 
 /* wacom data size per MT contact */
 #define WACOM_BYTES_PER_MT_PACKET	11
@@ -67,6 +69,8 @@
 #define WACOM_REPORT_24HDT		1
 #define WACOM_REPORT_WL			128
 #define WACOM_REPORT_USB		192
+#define WACOM_REPORT_BPAD_PEN		3
+#define WACOM_REPORT_BPAD_TOUCH		16
 
 /* device quirks */
 #define WACOM_QUIRK_MULTI_INPUT		0x0001
@@ -122,6 +126,7 @@ enum {
 	BAMBOO_PT,
 	WACOM_24HDT,
 	WACOM_27QHDT,
+	BAMBOO_PAD,
 	TABLETPC,   /* add new TPC below */
 	TABLETPCE,
 	TABLETPC2FG,

commit a97ac10401fe86fa30ef73315241e31d8594a651
Author: Benjamin Tissoires <benjamin.tissoires@redhat.com>
Date:   Wed Feb 25 11:43:39 2015 -0500

    HID: wacom: store the hid_device pointers of the sibling devices
    
    The Bamboo PAD in debug mode needs to re-route events from the debug
    interface to the Pen interface. This can be easily done with
    hid_input_report(), but that means that we need to keep a reference to
    the various hid_devices.
    
    There should be only one touch and one pen interface per physical tablet,
    so there is no need to keep a list of hid-devices, plain pointers are
    sufficient.
    
    Tested-by: Josep Sanchez Ferreres <josep.sanchez.ferreres@est.fib.upc.edu>
    Signed-off-by: Benjamin Tissoires <benjamin.tissoires@redhat.com>
    Acked-by: Ping Cheng <pingc@wacom.com>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>

diff --git a/drivers/hid/wacom_wac.h b/drivers/hid/wacom_wac.h
index 021ee1c1980a..e42efbe3338c 100644
--- a/drivers/hid/wacom_wac.h
+++ b/drivers/hid/wacom_wac.h
@@ -169,6 +169,8 @@ struct wacom_shared {
 	unsigned touch_max;
 	int type;
 	struct input_dev *touch_input;
+	struct hid_device *pen;
+	struct hid_device *touch;
 };
 
 struct hid_data {

commit 500d4160abe9a2e88b12e319c13ae3ebd1e18108
Author: Ping Cheng <pinglinux@gmail.com>
Date:   Tue Jan 27 13:30:03 2015 -0800

    HID: wacom: add support for Cintiq 27QHD and 27QHD touch
    
    These devices have accelerometers. To report accelerometer coordinates, a new
    property, INPUT_PROP_ACCELEROMETER, is added.
    
    Signed-off-by: Ping Cheng <pingc@wacom.com>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>

diff --git a/drivers/hid/wacom_wac.h b/drivers/hid/wacom_wac.h
index 72e78cc18933..021ee1c1980a 100644
--- a/drivers/hid/wacom_wac.h
+++ b/drivers/hid/wacom_wac.h
@@ -13,7 +13,7 @@
 #include <linux/hid.h>
 
 /* maximum packet length for USB devices */
-#define WACOM_PKGLEN_MAX	68
+#define WACOM_PKGLEN_MAX	192
 
 #define WACOM_NAME_MAX		64
 
@@ -37,6 +37,7 @@
 /* wacom data size per MT contact */
 #define WACOM_BYTES_PER_MT_PACKET	11
 #define WACOM_BYTES_PER_24HDT_PACKET	14
+#define WACOM_BYTES_PER_QHDTHID_PACKET	 6
 
 /* device IDs */
 #define STYLUS_DEVICE_ID	0x02
@@ -58,6 +59,8 @@
 #define WACOM_REPORT_TPCMT		13
 #define WACOM_REPORT_TPCMT2		3
 #define WACOM_REPORT_TPCHID		15
+#define WACOM_REPORT_CINTIQ		16
+#define WACOM_REPORT_CINTIQPAD		17
 #define WACOM_REPORT_TPCST		16
 #define WACOM_REPORT_DTUS		17
 #define WACOM_REPORT_TPC1FGE		18
@@ -109,6 +112,7 @@ enum {
 	WACOM_22HD,
 	DTK,
 	WACOM_24HD,
+	WACOM_27QHD,
 	CINTIQ_HYBRID,
 	CINTIQ,
 	WACOM_BEE,
@@ -117,6 +121,7 @@ enum {
 	WIRELESS,
 	BAMBOO_PT,
 	WACOM_24HDT,
+	WACOM_27QHDT,
 	TABLETPC,   /* add new TPC below */
 	TABLETPCE,
 	TABLETPC2FG,

commit b3bd7ef397a6031f5398c76a9a0b0695a38f6587
Author: Ping Cheng <pinglinux@gmail.com>
Date:   Fri Jan 9 11:05:13 2015 -0800

    HID: wacom: peport In Range event according to the spec
    
    Some Cintiq and Intuos tablets report In Range event. This event is sent before
    valid data is reported when tool enters proximity; or before out of proximity
    event is reported when tool exits.
    
    While entering proximity, In Range means a pen is detected. This information
    can be used for palm/touch rejection on both pen and touch enabled devices.
    While exiting, it means the tool has reached its maximum detectable distance.
    
    Signed-off-by: Ping Cheng <pingc@wacom.com>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>

diff --git a/drivers/hid/wacom_wac.h b/drivers/hid/wacom_wac.h
index 7afd9294927a..72e78cc18933 100644
--- a/drivers/hid/wacom_wac.h
+++ b/drivers/hid/wacom_wac.h
@@ -189,6 +189,7 @@ struct wacom_wac {
 	int tool[2];
 	int id[2];
 	__u32 serial[2];
+	bool reporting_data;
 	struct wacom_features features;
 	struct wacom_shared *shared;
 	struct input_dev *input;

commit 61e9e7e40a93cfb4a70180beefbbb5bd0c860aeb
Author: Benjamin Tissoires <benjamin.tissoires@redhat.com>
Date:   Mon Jan 5 16:32:13 2015 -0500

    HID: wacom: add support of the Pen of the Bamboo Pad
    
    Bamboo Pads are using the generic processing but their report descriptors
    differ from the ISDv* line. The pen fields are marked with the .physical
    as Digitizer_Pen, which makes also sense.
    
    Add this field to the checks and enable for free Bamboo Pads.
    
    Reported-by: Josep Sanchez Ferreres <josep.sanchez.ferreres@est.fib.upc.edu>
    Signed-off-by: Benjamin Tissoires <benjamin.tissoires@redhat.com>
    Reviewed-by: Jason Gerecke <killertofu@gmail.com>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>

diff --git a/drivers/hid/wacom_wac.h b/drivers/hid/wacom_wac.h
index 7436f2be433d..7afd9294927a 100644
--- a/drivers/hid/wacom_wac.h
+++ b/drivers/hid/wacom_wac.h
@@ -74,6 +74,7 @@
 
 #define WACOM_PEN_FIELD(f)	(((f)->logical == HID_DG_STYLUS) || \
 				 ((f)->physical == HID_DG_STYLUS) || \
+				 ((f)->physical == HID_DG_PEN) || \
 				 ((f)->application == HID_DG_PEN))
 #define WACOM_FINGER_FIELD(f)	(((f)->logical == HID_DG_FINGER) || \
 				 ((f)->physical == HID_DG_FINGER) || \

commit d97a552210320d3bec8ee22b8ccdb1d6d189482a
Author: Benjamin Tissoires <benjamin.tissoires@redhat.com>
Date:   Mon Jan 5 16:32:12 2015 -0500

    HID: wacom: use WACOM_*_FIELD macros in wacom_usage_mapping()
    
    We introduced nice macros in wacom_wac.c to check whether a field is
    a pen or a touch one.
    
    wacom_usage_mapping() still uses it's own tests, which are not in sync with
    the wacom_wac tests (.application is not checked).
    
    That means that some legitimate fields might be filtered out from the
    usage mapping, and thus will not be used properly while receiving the
    events.
    
    Signed-off-by: Benjamin Tissoires <benjamin.tissoires@redhat.com>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>

diff --git a/drivers/hid/wacom_wac.h b/drivers/hid/wacom_wac.h
index bfad815cda8a..7436f2be433d 100644
--- a/drivers/hid/wacom_wac.h
+++ b/drivers/hid/wacom_wac.h
@@ -10,6 +10,7 @@
 #define WACOM_WAC_H
 
 #include <linux/types.h>
+#include <linux/hid.h>
 
 /* maximum packet length for USB devices */
 #define WACOM_PKGLEN_MAX	68
@@ -71,6 +72,13 @@
 #define WACOM_QUIRK_MONITOR		0x0008
 #define WACOM_QUIRK_BATTERY		0x0010
 
+#define WACOM_PEN_FIELD(f)	(((f)->logical == HID_DG_STYLUS) || \
+				 ((f)->physical == HID_DG_STYLUS) || \
+				 ((f)->application == HID_DG_PEN))
+#define WACOM_FINGER_FIELD(f)	(((f)->logical == HID_DG_FINGER) || \
+				 ((f)->physical == HID_DG_FINGER) || \
+				 ((f)->application == HID_DG_TOUCHSCREEN))
+
 enum {
 	PENPARTNER = 0,
 	GRAPHIRE,

commit 601a22f3791473baa2923e4a3125e840279f8bba
Author: Jason Gerecke <killertofu@gmail.com>
Date:   Wed Dec 10 16:26:04 2014 -0800

    HID: wacom: Report input events for each finger on generic devices
    
    The existing generic touch code only reports events after reading an
    entire HID report, which practically means that only data about the last
    contact in a report will ever be provided to userspace. This patch uses
    a trick from hid-multitouch.c to discover what type of field is at the
    end of each contact; when such a field is encountered all the stored
    contact data will be reported.
    
    Signed-off-by: Jason Gerecke <killertofu@gmail.com>
    Reviewed-by: Benjamin Tissoires <benjamin.tissoires@redhat.com>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>

diff --git a/drivers/hid/wacom_wac.h b/drivers/hid/wacom_wac.h
index 5384043778fc..bfad815cda8a 100644
--- a/drivers/hid/wacom_wac.h
+++ b/drivers/hid/wacom_wac.h
@@ -145,6 +145,7 @@ struct wacom_features {
 	int pktlen;
 	bool check_for_hid_type;
 	int hid_type;
+	int last_slot_field;
 };
 
 struct wacom_shared {

commit fff00bf8cc8d98aa3b84d9c7daea0af418b6aa69
Author: Ping Cheng <pinglinux@gmail.com>
Date:   Thu Dec 4 18:23:04 2014 -0800

    HID: wacom: Add support for DTU-1031X
    
    Signed-off-by: Ping Cheng <pingc@wacom.com>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>

diff --git a/drivers/hid/wacom_wac.h b/drivers/hid/wacom_wac.h
index 128cbb337ff6..5384043778fc 100644
--- a/drivers/hid/wacom_wac.h
+++ b/drivers/hid/wacom_wac.h
@@ -80,6 +80,7 @@ enum {
 	PL,
 	DTU,
 	DTUS,
+	DTUSX,
 	INTUOS,
 	INTUOS3S,
 	INTUOS3,

commit 954df6ad00ea2ba732e2e7ae6a68b3111eee4e09
Author: Ping Cheng <pinglinux@gmail.com>
Date:   Thu Nov 20 16:31:12 2014 -0800

    HID: wacom: PAD is independent with pen/touch
    
    PAD can be on pen interface (Intuos Pro and Cintiq series) or touch
    interface (Bamboo PT and Intuos PT series) or its own interface
    (Bamboo pen-only and Intuos Pen M/S). We need to mark it independently.
    
    Signed-off-by: Ping Cheng <pingc@wacom.com>
    Reviewed-by:  Benjamin Tissoires <benjamin.tissoires@redhat.com>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>

diff --git a/drivers/hid/wacom_wac.h b/drivers/hid/wacom_wac.h
index 0f0b85ec1322..128cbb337ff6 100644
--- a/drivers/hid/wacom_wac.h
+++ b/drivers/hid/wacom_wac.h
@@ -183,6 +183,7 @@ struct wacom_wac {
 	struct input_dev *input;
 	struct input_dev *pad_input;
 	bool input_registered;
+	bool pad_registered;
 	int pid;
 	int battery_capacity;
 	int num_contacts_left;

commit 5ae6e89f7409cb5d218bb728326eba9c650d9700
Author: Benjamin Tissoires <benjamin.tissoires@redhat.com>
Date:   Tue Sep 23 12:08:09 2014 -0400

    HID: wacom: implement the finger part of the HID generic handling
    
    Signed-off-by: Benjamin Tissoires <benjamin.tissoires@redhat.com>
    Acked-by: Jason Gerecke <killertofu@gmail.com>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>

diff --git a/drivers/hid/wacom_wac.h b/drivers/hid/wacom_wac.h
index f472eac292d5..0f0b85ec1322 100644
--- a/drivers/hid/wacom_wac.h
+++ b/drivers/hid/wacom_wac.h
@@ -156,9 +156,17 @@ struct wacom_shared {
 };
 
 struct hid_data {
+	__s16 inputmode;	/* InputMode HID feature, -1 if non-existent */
+	__s16 inputmode_index;	/* InputMode HID feature index in the report */
 	bool inrange_state;
 	bool invert_state;
 	bool tipswitch;
+	int x;
+	int y;
+	int pressure;
+	int width;
+	int height;
+	int id;
 };
 
 struct wacom_wac {

commit 7704ac937345d4b502062952657027234aa86a37
Author: Benjamin Tissoires <benjamin.tissoires@redhat.com>
Date:   Tue Sep 23 12:08:08 2014 -0400

    HID: wacom: implement generic HID handling for pen generic devices
    
    ISDv4 and v5 are plain HID devices. We can directly implement a generic
    HID parsing/handling and remove the need to manually add those PID in
    the list of supported devices.
    
    This patch implements the pen support only. The finger part will come in
    a later patch.
    
    To be properly notified of an .event() and a .report(), we need to force
    hid-core to go through the HID parsing. By default, wacom.ko binds only
    hidraw, so the hid parsing is not done by hid-core. When a true HID device
    is there, we add the flag HID_CLAIMED_DRIVER to hid->claimed which will
    force hid-core to parse the incoming reports.
    (Note that this can be easily backported by directly setting the .claimed
    flag to HID_CLAIMED_DRIVER even if hid-core does not support
    HID_CONNECT_DRIVER)
    
    Signed-off-by: Benjamin Tissoires <benjamin.tissoires@redhat.com>
    Acked-by: Jason Gerecke <killertofu@gmail.com>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>

diff --git a/drivers/hid/wacom_wac.h b/drivers/hid/wacom_wac.h
index 72f9ca8e5cd4..f472eac292d5 100644
--- a/drivers/hid/wacom_wac.h
+++ b/drivers/hid/wacom_wac.h
@@ -113,6 +113,7 @@ enum {
 	MTSCREEN,
 	MTTPC,
 	MTTPC_B,
+	HID_GENERIC,
 	MAX_TYPE
 };
 
@@ -154,6 +155,12 @@ struct wacom_shared {
 	struct input_dev *touch_input;
 };
 
+struct hid_data {
+	bool inrange_state;
+	bool invert_state;
+	bool tipswitch;
+};
+
 struct wacom_wac {
 	char name[WACOM_NAME_MAX];
 	char pad_name[WACOM_NAME_MAX];
@@ -175,6 +182,7 @@ struct wacom_wac {
 	int ps_connected;
 	u8 bt_features;
 	u8 bt_high_speed;
+	struct hid_data hid_data;
 };
 
 #endif

commit 2546dacd3e0e48c40bbb99caf01455f1ade9bb24
Author: Benjamin Tissoires <benjamin.tissoires@redhat.com>
Date:   Tue Sep 23 12:08:06 2014 -0400

    HID: wacom: split out input allocation and registration
    
    If the input can be created earlier during probe, we can already populate
    them while reading the report descriptor. This way, we can rely on the
    hid subsystem directly for tablets which already provide a meaningful
    report descriptor (like ISDv4-5).
    
    This patch only splits the allocation and registration, but do not
    change where we allocate the input. This will come in a later patch.
    
    Signed-off-by: Benjamin Tissoires <benjamin.tissoires@redhat.com>
    Acked-by: Jason Gerecke <killertofu@gmail.com>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>

diff --git a/drivers/hid/wacom_wac.h b/drivers/hid/wacom_wac.h
index 339ab5d81a2d..72f9ca8e5cd4 100644
--- a/drivers/hid/wacom_wac.h
+++ b/drivers/hid/wacom_wac.h
@@ -167,6 +167,7 @@ struct wacom_wac {
 	struct wacom_shared *shared;
 	struct input_dev *input;
 	struct input_dev *pad_input;
+	bool input_registered;
 	int pid;
 	int battery_capacity;
 	int num_contacts_left;

commit 81af7e61a774e687ed4a7f37992ef75da57c5ddf
Author: Benjamin Tissoires <benjamin.tissoires@redhat.com>
Date:   Wed Aug 6 13:55:56 2014 -0700

    Input: wacom - handle Intuos 4 BT in wacom.ko
    
    A good point of this change is that now, the Intuos4 bluetooth can handle
    the different tools (artpen, airbrush, mice), and we get a common interface
    between USB and BT for accessing the LEDs/OLEDs.
    
    Signed-off-by: Benjamin Tissoires <benjamin.tissoires@redhat.com>
    Reviewed-by: Ping Cheng <pingc@wacom.com>
    Tested-by: Przemo Firszt <przemo@firszt.eu>
    Signed-off-by: Dmitry Torokhov <dmitry.torokhov@gmail.com>

diff --git a/drivers/hid/wacom_wac.h b/drivers/hid/wacom_wac.h
index 4f0178b9a789..339ab5d81a2d 100644
--- a/drivers/hid/wacom_wac.h
+++ b/drivers/hid/wacom_wac.h
@@ -86,6 +86,7 @@ enum {
 	INTUOS3L,
 	INTUOS4S,
 	INTUOS4,
+	INTUOS4WL,
 	INTUOS4L,
 	INTUOS5S,
 	INTUOS5,

commit 387142bb8fcb263771e1fa6b1a96e6a7ca36e820
Author: Benjamin Tissoires <benjamin.tissoires@redhat.com>
Date:   Wed Aug 6 13:52:56 2014 -0700

    Input: wacom - handle Graphire BT tablets in wacom.ko
    
    First, merge the Graphire BT tablet.
    
    Signed-off-by: Benjamin Tissoires <benjamin.tissoires@redhat.com>
    Reviewed-by: Ping Cheng <pingc@wacom.com>
    Tested-by: Przemo Firszt <przemo@firszt.eu>
    Signed-off-by: Dmitry Torokhov <dmitry.torokhov@gmail.com>

diff --git a/drivers/hid/wacom_wac.h b/drivers/hid/wacom_wac.h
index 6cefa1e8c14b..4f0178b9a789 100644
--- a/drivers/hid/wacom_wac.h
+++ b/drivers/hid/wacom_wac.h
@@ -46,6 +46,7 @@
 
 /* wacom data packet report IDs */
 #define WACOM_REPORT_PENABLED		2
+#define WACOM_REPORT_PENABLED_BT	3
 #define WACOM_REPORT_INTUOSREAD		5
 #define WACOM_REPORT_INTUOSWRITE	6
 #define WACOM_REPORT_INTUOSPAD		12
@@ -73,6 +74,7 @@
 enum {
 	PENPARTNER = 0,
 	GRAPHIRE,
+	GRAPHIRE_BT,
 	WACOM_G4,
 	PTU,
 	PL,

commit f81a1295cd9b6d3d3d7d7126e522d80917134b41
Author: Benjamin Tissoires <benjamin.tissoires@redhat.com>
Date:   Wed Aug 6 13:48:01 2014 -0700

    Input: wacom - prepare the driver to include BT devices
    
    Now that wacom is a hid driver, there is no point in having a separate
    driver for bluetooth devices. This patch prepares the common paths of
    Bluetooth devices in the common wacom driver. It also adds the sysfs file
    "speed" used by Bluetooth devices.
    
    Signed-off-by: Benjamin Tissoires <benjamin.tissoires@redhat.com>
    Reviewed-by: Ping Cheng <pingc@wacom.com>
    Tested-by: Przemo Firszt <przemo@firszt.eu>
    Signed-off-by: Dmitry Torokhov <dmitry.torokhov@gmail.com>

diff --git a/drivers/hid/wacom_wac.h b/drivers/hid/wacom_wac.h
index 3433a0e28bb4..6cefa1e8c14b 100644
--- a/drivers/hid/wacom_wac.h
+++ b/drivers/hid/wacom_wac.h
@@ -169,6 +169,8 @@ struct wacom_wac {
 	int num_contacts_left;
 	int bat_charging;
 	int ps_connected;
+	u8 bt_features;
+	u8 bt_high_speed;
 };
 
 #endif

commit 7dbd229e10603b3759f366007df2068dc2acfe46
Author: Benjamin Tissoires <benjamin.tissoires@redhat.com>
Date:   Fri Jul 25 17:32:41 2014 -0700

    Input: wacom - register an ac power supply for wireless devices
    
    This is used by HID Bluetooth devices but also add some more information
    to the USB Wireless Receiver.
    We are just porting the bits from hid-wacom.c to the common driver here.
    
    Signed-off-by: Benjamin Tissoires <benjamin.tissoires@redhat.com>
    Acked-by: Przemo Firszt <przemo@firszt.eu>
    Acked-by: Ping Cheng <pingc@wacom.com>
    Signed-off-by: Dmitry Torokhov <dmitry.torokhov@gmail.com>

diff --git a/drivers/hid/wacom_wac.h b/drivers/hid/wacom_wac.h
index 6cdf707821cd..3433a0e28bb4 100644
--- a/drivers/hid/wacom_wac.h
+++ b/drivers/hid/wacom_wac.h
@@ -155,6 +155,7 @@ struct wacom_wac {
 	char name[WACOM_NAME_MAX];
 	char pad_name[WACOM_NAME_MAX];
 	char bat_name[WACOM_NAME_MAX];
+	char ac_name[WACOM_NAME_MAX];
 	unsigned char data[WACOM_PKGLEN_MAX];
 	int tool[2];
 	int id[2];

commit d70420b914c98a3758674c6e9858810e0ab4ea30
Author: Benjamin Tissoires <benjamin.tissoires@redhat.com>
Date:   Fri Jul 25 17:31:51 2014 -0700

    Input: wacom - use a uniq name for the battery device
    
    The current implementation uses "wacom_battery" as a generic name for
    batteries. This prevents us to have two Wacom devices with a battery
    attached as the power system will complain about the name which is already
    registered.
    
    Use an incremental name for each battery attached.
    
    Related bug:
    https://sourceforge.net/p/linuxwacom/bugs/248/
    
    Signed-off-by: Benjamin Tissoires <benjamin.tissoires@redhat.com>
    Acked-by: Przemo Firszt <przemo@firszt.eu>
    Acked-by: Ping Cheng <pingc@wacom.com>
    Signed-off-by: Dmitry Torokhov <dmitry.torokhov@gmail.com>

diff --git a/drivers/hid/wacom_wac.h b/drivers/hid/wacom_wac.h
index 8a042ac0114e..6cdf707821cd 100644
--- a/drivers/hid/wacom_wac.h
+++ b/drivers/hid/wacom_wac.h
@@ -154,6 +154,7 @@ struct wacom_shared {
 struct wacom_wac {
 	char name[WACOM_NAME_MAX];
 	char pad_name[WACOM_NAME_MAX];
+	char bat_name[WACOM_NAME_MAX];
 	unsigned char data[WACOM_PKGLEN_MAX];
 	int tool[2];
 	int id[2];

commit ac8d10101b0e3a0a1478f8bb51bbbb0a56fe0956
Author: Benjamin Tissoires <benjamin.tissoires@redhat.com>
Date:   Fri Jul 25 17:29:48 2014 -0700

    Input: wacom - enhance Wireless Receiver battery reporting
    
    - Reports the current status of the battery (discharging, charging, full).
    - Also notify the upower daemon when there is a change in the battery
      value.
    - keep the battery value as a percentage, not the raw value
    - add WACOM_QUIRK_BATTERY to easily add a battery to a device (required
      for Bluetooth devices)
    
    Signed-off-by: Benjamin Tissoires <benjamin.tissoires@redhat.com>
    Acked-by: Przemo Firszt <przemo@firszt.eu>
    Acked-by: Ping Cheng <pingc@wacom.com>
    Signed-off-by: Dmitry Torokhov <dmitry.torokhov@gmail.com>

diff --git a/drivers/hid/wacom_wac.h b/drivers/hid/wacom_wac.h
index 4c592475b237..8a042ac0114e 100644
--- a/drivers/hid/wacom_wac.h
+++ b/drivers/hid/wacom_wac.h
@@ -68,6 +68,7 @@
 #define WACOM_QUIRK_BBTOUCH_LOWRES	0x0002
 #define WACOM_QUIRK_NO_INPUT		0x0004
 #define WACOM_QUIRK_MONITOR		0x0008
+#define WACOM_QUIRK_BATTERY		0x0010
 
 enum {
 	PENPARTNER = 0,
@@ -164,6 +165,8 @@ struct wacom_wac {
 	int pid;
 	int battery_capacity;
 	int num_contacts_left;
+	int bat_charging;
+	int ps_connected;
 };
 
 #endif

commit 471d17148c8b4174ac5f5283a73316d12c4379bc
Author: Benjamin Tissoires <benjamin.tissoires@redhat.com>
Date:   Thu Jul 24 13:10:09 2014 -0700

    Input: wacom - move the USB (now hid) Wacom driver in drivers/hid
    
    wacom.ko is now a full HID driver, we have to move it into the proper
    subdirectory: drivers/hid.
    
    Signed-off-by: Benjamin Tissoires <benjamin.tissoires@redhat.com>
    Signed-off-by: Dmitry Torokhov <dmitry.torokhov@gmail.com>

diff --git a/drivers/hid/wacom_wac.h b/drivers/hid/wacom_wac.h
new file mode 100644
index 000000000000..4c592475b237
--- /dev/null
+++ b/drivers/hid/wacom_wac.h
@@ -0,0 +1,169 @@
+/*
+ * drivers/input/tablet/wacom_wac.h
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ */
+#ifndef WACOM_WAC_H
+#define WACOM_WAC_H
+
+#include <linux/types.h>
+
+/* maximum packet length for USB devices */
+#define WACOM_PKGLEN_MAX	68
+
+#define WACOM_NAME_MAX		64
+
+/* packet length for individual models */
+#define WACOM_PKGLEN_PENPRTN	 7
+#define WACOM_PKGLEN_GRAPHIRE	 8
+#define WACOM_PKGLEN_BBFUN	 9
+#define WACOM_PKGLEN_INTUOS	10
+#define WACOM_PKGLEN_TPC1FG	 5
+#define WACOM_PKGLEN_TPC1FG_B	10
+#define WACOM_PKGLEN_TPC2FG	14
+#define WACOM_PKGLEN_BBTOUCH	20
+#define WACOM_PKGLEN_BBTOUCH3	64
+#define WACOM_PKGLEN_BBPEN	10
+#define WACOM_PKGLEN_WIRELESS	32
+#define WACOM_PKGLEN_MTOUCH	62
+#define WACOM_PKGLEN_MTTPC	40
+#define WACOM_PKGLEN_DTUS	68
+#define WACOM_PKGLEN_PENABLED	 8
+
+/* wacom data size per MT contact */
+#define WACOM_BYTES_PER_MT_PACKET	11
+#define WACOM_BYTES_PER_24HDT_PACKET	14
+
+/* device IDs */
+#define STYLUS_DEVICE_ID	0x02
+#define TOUCH_DEVICE_ID		0x03
+#define CURSOR_DEVICE_ID	0x06
+#define ERASER_DEVICE_ID	0x0A
+#define PAD_DEVICE_ID		0x0F
+
+/* wacom data packet report IDs */
+#define WACOM_REPORT_PENABLED		2
+#define WACOM_REPORT_INTUOSREAD		5
+#define WACOM_REPORT_INTUOSWRITE	6
+#define WACOM_REPORT_INTUOSPAD		12
+#define WACOM_REPORT_INTUOS5PAD		3
+#define WACOM_REPORT_DTUSPAD		21
+#define WACOM_REPORT_TPC1FG		6
+#define WACOM_REPORT_TPC2FG		13
+#define WACOM_REPORT_TPCMT		13
+#define WACOM_REPORT_TPCMT2		3
+#define WACOM_REPORT_TPCHID		15
+#define WACOM_REPORT_TPCST		16
+#define WACOM_REPORT_DTUS		17
+#define WACOM_REPORT_TPC1FGE		18
+#define WACOM_REPORT_24HDT		1
+#define WACOM_REPORT_WL			128
+#define WACOM_REPORT_USB		192
+
+/* device quirks */
+#define WACOM_QUIRK_MULTI_INPUT		0x0001
+#define WACOM_QUIRK_BBTOUCH_LOWRES	0x0002
+#define WACOM_QUIRK_NO_INPUT		0x0004
+#define WACOM_QUIRK_MONITOR		0x0008
+
+enum {
+	PENPARTNER = 0,
+	GRAPHIRE,
+	WACOM_G4,
+	PTU,
+	PL,
+	DTU,
+	DTUS,
+	INTUOS,
+	INTUOS3S,
+	INTUOS3,
+	INTUOS3L,
+	INTUOS4S,
+	INTUOS4,
+	INTUOS4L,
+	INTUOS5S,
+	INTUOS5,
+	INTUOS5L,
+	INTUOSPS,
+	INTUOSPM,
+	INTUOSPL,
+	INTUOSHT,
+	WACOM_21UX2,
+	WACOM_22HD,
+	DTK,
+	WACOM_24HD,
+	CINTIQ_HYBRID,
+	CINTIQ,
+	WACOM_BEE,
+	WACOM_13HD,
+	WACOM_MO,
+	WIRELESS,
+	BAMBOO_PT,
+	WACOM_24HDT,
+	TABLETPC,   /* add new TPC below */
+	TABLETPCE,
+	TABLETPC2FG,
+	MTSCREEN,
+	MTTPC,
+	MTTPC_B,
+	MAX_TYPE
+};
+
+struct wacom_features {
+	const char *name;
+	int x_max;
+	int y_max;
+	int pressure_max;
+	int distance_max;
+	int type;
+	int x_resolution;
+	int y_resolution;
+	int x_min;
+	int y_min;
+	int device_type;
+	int x_phy;
+	int y_phy;
+	unsigned unit;
+	int unitExpo;
+	int x_fuzz;
+	int y_fuzz;
+	int pressure_fuzz;
+	int distance_fuzz;
+	unsigned quirks;
+	unsigned touch_max;
+	int oVid;
+	int oPid;
+	int pktlen;
+	bool check_for_hid_type;
+	int hid_type;
+};
+
+struct wacom_shared {
+	bool stylus_in_proximity;
+	bool touch_down;
+	/* for wireless device to access USB interfaces */
+	unsigned touch_max;
+	int type;
+	struct input_dev *touch_input;
+};
+
+struct wacom_wac {
+	char name[WACOM_NAME_MAX];
+	char pad_name[WACOM_NAME_MAX];
+	unsigned char data[WACOM_PKGLEN_MAX];
+	int tool[2];
+	int id[2];
+	__u32 serial[2];
+	struct wacom_features features;
+	struct wacom_shared *shared;
+	struct input_dev *input;
+	struct input_dev *pad_input;
+	int pid;
+	int battery_capacity;
+	int num_contacts_left;
+};
+
+#endif
