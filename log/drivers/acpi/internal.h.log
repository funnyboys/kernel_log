commit 7b301750f7f8f6503e11f1af4a03832525f58c66
Author: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
Date:   Sat May 9 10:44:41 2020 +0200

    ACPI: EC: PM: Avoid premature returns from acpi_s2idle_wake()
    
    If the EC GPE status is not set after checking all of the other GPEs,
    acpi_s2idle_wake() returns 'false', to indicate that the SCI event
    that has just triggered is not a system wakeup one, but it does that
    without canceling the pending wakeup and re-arming the SCI for system
    wakeup which is a mistake, because it may cause s2idle_loop() to busy
    spin until the next valid wakeup event.  [If that happens, the first
    spurious wakeup is still pending after acpi_s2idle_wake() has
    returned, so s2idle_enter() does nothing, acpi_s2idle_wake()
    is called again and it sees that the SCI has triggered, but no GPEs
    are active, so 'false' is returned again, and so on.]
    
    Fix that by moving all of the GPE checking logic from
    acpi_s2idle_wake() to acpi_ec_dispatch_gpe() and making the
    latter return 'true' only if a non-EC GPE has triggered and
    'false' otherwise, which will cause acpi_s2idle_wake() to
    cancel the pending SCI wakeup and re-arm the SCI for system
    wakeup regardless of the EC GPE status.
    
    This also addresses a lockup observed on an Elitegroup EF20EA laptop
    after attempting to wake it up from suspend-to-idle by a key press.
    
    Fixes: d5406284ff80 ("ACPI: PM: s2idle: Refine active GPEs check")
    Link: https://bugzilla.kernel.org/show_bug.cgi?id=207603
    Reported-by: Todd Brandt <todd.e.brandt@linux.intel.com>
    Fixes: fdde0ff8590b ("ACPI: PM: s2idle: Prevent spurious SCIs from waking up the system")
    Link: https://lore.kernel.org/linux-acpi/CAB4CAwdqo7=MvyG_PE+PGVfeA17AHF5i5JucgaKqqMX6mjArbQ@mail.gmail.com/
    Reported-by: Chris Chiu <chiu@endlessm.com>
    Tested-by: Chris Chiu <chiu@endlessm.com>
    Cc: 5.4+ <stable@vger.kernel.org> # 5.4+
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>

diff --git a/drivers/acpi/internal.h b/drivers/acpi/internal.h
index e387517d3354..43411a7457cd 100644
--- a/drivers/acpi/internal.h
+++ b/drivers/acpi/internal.h
@@ -202,7 +202,6 @@ void acpi_ec_remove_query_handler(struct acpi_ec *ec, u8 query_bit);
 
 #ifdef CONFIG_PM_SLEEP
 void acpi_ec_flush_work(void);
-bool acpi_ec_other_gpes_active(void);
 bool acpi_ec_dispatch_gpe(void);
 #endif
 

commit 6d90508121fd0c92c276ec731ad6109bf2986cc6
Merge: 49835c15a552 1da28f032305
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Mon Mar 30 15:17:04 2020 -0700

    Merge tag 'acpi-5.7-rc1' of git://git.kernel.org/pub/scm/linux/kernel/git/rafael/linux-pm
    
    Pull ACPI updates from Rafael Wysocki:
    
       - Update the ACPICA code in the kernel to the 20200214 upstream
         release including:
    
           * Fix to re-enable the sleep button after wakeup (Anchal
             Agarwal).
    
           * Fixes for mistakes in comments and typos (Bob Moore).
    
           * ASL-ASL+ converter updates (Erik Kaneda).
    
           * Type casting cleanups (Sven Barth).
    
       - Clean up the intialization of the EC driver and eliminate some dead
         code from it (Rafael Wysocki).
    
       - Clean up the quirk tables in the AC and battery drivers (Hans de
         Goede).
    
       - Fix the global lock handling on x86 to ignore unspecified bit
         positions in the global lock field (Jan Engelhardt).
    
       - Add a new "tiny" driver for ACPI button devices exposed by VMs to
         guest kernels to send signals directly to init (Josh Triplett).
    
       - Add a kernel parameter to disable ACPI BGRT on x86 (Alex Hung).
    
       - Make the ACPI PCI host bridge and fan drivers use scnprintf() to
         avoid potential buffer overflows (Takashi Iwai).
    
       - Clean up assorted pieces of code:
    
           * Reorder "asmlinkage" to make g++ happy (Alexey Dobriyan).
    
           * Drop unneeded variable initialization (Colin Ian King).
    
           * Add missing __acquires/__releases annotations (Jules Irenge).
    
           * Replace list_for_each_safe() with list_for_each_entry_safe()
             (chenqiwu)"
    
    * tag 'acpi-5.7-rc1' of git://git.kernel.org/pub/scm/linux/kernel/git/rafael/linux-pm: (31 commits)
      ACPICA: Update version to 20200214
      ACPI: PCI: Use scnprintf() for avoiding potential buffer overflow
      ACPI: fan: Use scnprintf() for avoiding potential buffer overflow
      ACPI: EC: Eliminate EC_FLAGS_QUERY_HANDSHAKE
      ACPI: EC: Do not clear boot_ec_is_ecdt in acpi_ec_add()
      ACPI: EC: Simplify acpi_ec_ecdt_start() and acpi_ec_init()
      ACPI: EC: Consolidate event handler installation code
      acpi/x86: ignore unspecified bit positions in the ACPI global lock field
      acpi/x86: add a kernel parameter to disable ACPI BGRT
      x86/acpi: make "asmlinkage" part first thing in the function definition
      ACPI: list_for_each_safe() -> list_for_each_entry_safe()
      ACPI: video: remove redundant assignments to variable result
      ACPI: OSL: Add missing __acquires/__releases annotations
      ACPI / battery: Cleanup Lenovo Ideapad Miix 320 DMI table entry
      ACPI / AC: Cleanup DMI quirk table
      ACPI: EC: Use fast path in acpi_ec_add() for DSDT boot EC
      ACPI: EC: Simplify acpi_ec_add()
      ACPI: EC: Drop AE_NOT_FOUND special case from ec_install_handlers()
      ACPI: EC: Avoid passing redundant argument to functions
      ACPI: EC: Avoid printing confusing messages in acpi_ec_setup()
      ...

commit d5406284ff803a578ca503373624312770319054
Author: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
Date:   Wed Mar 25 11:55:48 2020 +0100

    ACPI: PM: s2idle: Refine active GPEs check
    
    The check for any active GPEs added by commit fdde0ff8590b ("ACPI:
    PM: s2idle: Prevent spurious SCIs from waking up the system") turns
    out to be insufficiently precise to prevent some systems from
    resuming prematurely due to a spurious EC wakeup, so refine it
    by first checking if any GPEs other than the EC GPE are active
    and skipping all of the SCIs coming from the EC that do not produce
    any genuine wakeup events after processing.
    
    Link: https://bugzilla.kernel.org/show_bug.cgi?id=206629
    Fixes: fdde0ff8590b ("ACPI: PM: s2idle: Prevent spurious SCIs from waking up the system")
    Reported-by: Ondřej Caletka <ondrej@caletka.cz>
    Tested-by: Ondřej Caletka <ondrej@caletka.cz>
    Cc: 5.4+ <stable@vger.kernel.org> # 5.4+
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>

diff --git a/drivers/acpi/internal.h b/drivers/acpi/internal.h
index 3616daec650b..d44c591c4ee4 100644
--- a/drivers/acpi/internal.h
+++ b/drivers/acpi/internal.h
@@ -202,6 +202,7 @@ void acpi_ec_remove_query_handler(struct acpi_ec *ec, u8 query_bit);
 
 #ifdef CONFIG_PM_SLEEP
 void acpi_ec_flush_work(void);
+bool acpi_ec_other_gpes_active(void);
 bool acpi_ec_dispatch_gpe(void);
 #endif
 

commit 98ada3c59d05e6c41f35fe1f7e5a550c1536be45
Author: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
Date:   Fri Mar 6 00:14:35 2020 +0100

    ACPI: EC: Simplify acpi_ec_ecdt_start() and acpi_ec_init()
    
    Notice that the return value of acpi_ec_init() is discarded anyway,
    so it can be void and it doesn't need to check the return values of
    acpi_bus_register_driver() and acpi_ec_ecdt_start() called by it.
    Thus the latter can be void too and it really has nothing to do
    if acpi_ec_add() has already found an EC matching the boot one in the
    namespace.  Also, acpi_ec_ecdt_get_handle() can be folded into it.
    
    Modify the code accordingly and while at it create a propoer kerneldoc
    comment to document acpi_ec_ecdt_start() and move the remark regarding
    ASUS X550ZE along with the related bug URL from acpi_ec_init() into
    that comment.
    
    Additionally, fix up a stale comment in acpi_ec_init().
    
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>

diff --git a/drivers/acpi/internal.h b/drivers/acpi/internal.h
index 3616daec650b..43411a7457cd 100644
--- a/drivers/acpi/internal.h
+++ b/drivers/acpi/internal.h
@@ -190,7 +190,7 @@ extern struct acpi_ec *first_ec;
 /* External interfaces use first EC only, so remember */
 typedef int (*acpi_ec_query_func) (void *data);
 
-int acpi_ec_init(void);
+void acpi_ec_init(void);
 void acpi_ec_ecdt_probe(void);
 void acpi_ec_dsdt_probe(void);
 void acpi_ec_block_transactions(void);

commit 406857f773b082bc88edfd24967facf4ed07ac85
Author: Daniel Drake <drake@endlessm.com>
Date:   Mon Oct 14 16:56:02 2019 +0800

    ACPI: EC: add support for hardware-reduced systems
    
    As defined in the ACPI spec section 12.11, ACPI hardware-reduced
    platforms define the EC SCI interrupt as a GpioInt in the _CRS object.
    
    This replaces the previous way of using a GPE for this interrupt;
    GPE blocks are not available on reduced hardware platforms.
    
    Add support for handling this interrupt as an EC event source, and
    avoid GPE usage on reduced hardware platforms.
    
    This enables the use of several media keys (e.g. screen brightness
    up/down) on Asus UX434DA.
    
    Signed-off-by: Daniel Drake <drake@endlessm.com>
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>

diff --git a/drivers/acpi/internal.h b/drivers/acpi/internal.h
index afe6636f9ad3..3616daec650b 100644
--- a/drivers/acpi/internal.h
+++ b/drivers/acpi/internal.h
@@ -165,7 +165,8 @@ static inline void acpi_early_processor_osc(void) {}
    -------------------------------------------------------------------------- */
 struct acpi_ec {
 	acpi_handle handle;
-	u32 gpe;
+	int gpe;
+	int irq;
 	unsigned long command_addr;
 	unsigned long data_addr;
 	bool global_lock;

commit d7589404932be148fabe696b56b7c391bad6bdb1
Author: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
Date:   Wed Jul 31 11:05:52 2019 +0200

    ACPI: EC: PM: Consolidate some code depending on PM_SLEEP
    
    Move some routines, including acpi_ec_dispatch_gpe(), that are only
    used if CONFIG_PM_SLEEP is set to the #ifdef block containing the EC
    suspend and resume callbacks, to make the "full EC PM picture" easier
    to follow.
    
    While at it, move the header of acpi_ec_dispatch_gpe() in the
    header file to a CONFIG_PM_SLEEP #ifdef block.
    
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Tested-by: Kai-Heng Feng <kai.heng.feng@canonical.com>

diff --git a/drivers/acpi/internal.h b/drivers/acpi/internal.h
index 8c9cd3733f07..afe6636f9ad3 100644
--- a/drivers/acpi/internal.h
+++ b/drivers/acpi/internal.h
@@ -194,7 +194,6 @@ void acpi_ec_ecdt_probe(void);
 void acpi_ec_dsdt_probe(void);
 void acpi_ec_block_transactions(void);
 void acpi_ec_unblock_transactions(void);
-bool acpi_ec_dispatch_gpe(void);
 int acpi_ec_add_query_handler(struct acpi_ec *ec, u8 query_bit,
 			      acpi_handle handle, acpi_ec_query_func func,
 			      void *data);
@@ -202,6 +201,7 @@ void acpi_ec_remove_query_handler(struct acpi_ec *ec, u8 query_bit);
 
 #ifdef CONFIG_PM_SLEEP
 void acpi_ec_flush_work(void);
+bool acpi_ec_dispatch_gpe(void);
 #endif
 
 

commit 6e86633a791fdf631617ef3a9af3263141d34bc9
Author: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
Date:   Wed Jul 31 11:05:42 2019 +0200

    ACPI: PM: s2idle: Eliminate acpi_sleep_no_ec_events()
    
    Change acpi_ec_suspend() to use pm_suspend_no_platform() instead of
    acpi_sleep_no_ec_events(), which allows the latter to be eliminated
    along with the s2idle_in_progress variable which is only used by it.
    
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Tested-by: Kai-Heng Feng <kai.heng.feng@canonical.com>

diff --git a/drivers/acpi/internal.h b/drivers/acpi/internal.h
index bcc080511197..8c9cd3733f07 100644
--- a/drivers/acpi/internal.h
+++ b/drivers/acpi/internal.h
@@ -210,11 +210,9 @@ void acpi_ec_flush_work(void);
   -------------------------------------------------------------------------- */
 #ifdef CONFIG_ACPI_SYSTEM_POWER_STATES_SUPPORT
 extern bool acpi_s2idle_wakeup(void);
-extern bool acpi_sleep_no_ec_events(void);
 extern int acpi_sleep_init(void);
 #else
 static inline bool acpi_s2idle_wakeup(void) { return false; }
-static inline bool acpi_sleep_no_ec_events(void) { return true; }
 static inline int acpi_sleep_init(void) { return -ENXIO; }
 #endif
 

commit 10a08fd65ec1a68ccd86b19ec822ed5f2e50113f
Author: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
Date:   Tue Jul 30 11:55:59 2019 +0200

    ACPI: PM: Set up EC GPE for system wakeup from drivers that need it
    
    The EC GPE needs to be set up for system wakeup only if there is a
    driver depending on it, either intel-hid or intel-vbtn, bound to a
    button device that is expected to wake up the system from sleep (such
    as the power button on some Dell systems, like the XPS13 9360).  It
    doesn't need to be set up for waking up the system from sleep in any
    other cases and whether or not it is expected to wake up the system
    from sleep doesn't depend on whether or not the LPS0 device is
    present in the ACPI namespace.
    
    For this reason, rearrange the ACPI suspend-to-idle code to make the
    drivers depending on the EC GPE wakeup take care of setting it up and
    decouple that from the LPS0 device handling.
    
    While at it, make intel-hid and intel-vbtn prepare for system wakeup
    only if they are allowed to wake up the system from sleep by user
    space (via sysfs).
    
    [Note that acpi_ec_mark_gpe_for_wake() and acpi_ec_set_gpe_wake_mask()
     are there to prevent the EC GPE from being disabled by the
     acpi_enable_all_wakeup_gpes() call in acpi_s2idle_prepare(), so on
     systems with either intel-hid or intel-vbtn this change doesn't
     affect any interactions with the hardware or platform firmware.]
    
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Reviewed-by: Andy Shevchenko <andy.shevchenko@gmail.com>

diff --git a/drivers/acpi/internal.h b/drivers/acpi/internal.h
index 1b5f9ac06ea8..bcc080511197 100644
--- a/drivers/acpi/internal.h
+++ b/drivers/acpi/internal.h
@@ -194,8 +194,6 @@ void acpi_ec_ecdt_probe(void);
 void acpi_ec_dsdt_probe(void);
 void acpi_ec_block_transactions(void);
 void acpi_ec_unblock_transactions(void);
-void acpi_ec_mark_gpe_for_wake(void);
-void acpi_ec_set_gpe_wake_mask(u8 action);
 bool acpi_ec_dispatch_gpe(void);
 int acpi_ec_add_query_handler(struct acpi_ec *ec, u8 query_bit,
 			      acpi_handle handle, acpi_ec_query_func func,

commit 9089f16e053afc5e18feaeb9f64cc7c90d6bd687
Author: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
Date:   Mon Jul 15 13:03:39 2019 +0200

    ACPI: EC: Return bool from acpi_ec_dispatch_gpe()
    
    On some systems, if suspend-to-idle is used, the EC may signal system
    wakeup events (power button events, for example) as well as events
    that should not cause the system to resume and acpi_ec_dispatch_gpe()
    needs to be called to determine whether or not the system should
    resume then.  In particular, if acpi_ec_dispatch_gpe() doesn't detect
    any EC events at all, the system should remain suspended, so it is
    useful to know when that is the case.
    
    For this reason, make acpi_ec_dispatch_gpe() return a bool value
    indicating whether or not any EC events have been detected by it.
    
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Acked-by: Thomas Gleixner <tglx@linutronix.de>

diff --git a/drivers/acpi/internal.h b/drivers/acpi/internal.h
index f4c2fe6be4f2..1b5f9ac06ea8 100644
--- a/drivers/acpi/internal.h
+++ b/drivers/acpi/internal.h
@@ -196,7 +196,7 @@ void acpi_ec_block_transactions(void);
 void acpi_ec_unblock_transactions(void);
 void acpi_ec_mark_gpe_for_wake(void);
 void acpi_ec_set_gpe_wake_mask(u8 action);
-void acpi_ec_dispatch_gpe(void);
+bool acpi_ec_dispatch_gpe(void);
 int acpi_ec_add_query_handler(struct acpi_ec *ec, u8 query_bit,
 			      acpi_handle handle, acpi_ec_query_func func,
 			      void *data);

commit 9ed411c06dd1cdf6171b992f68c37bc2d66054f9
Author: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
Date:   Thu Jul 4 01:02:49 2019 +0200

    ACPI: PM: Unexport acpi_device_get_power()
    
    Using acpi_device_get_power() outside of ACPI device initialization
    and ACPI sysfs is problematic due to the way in which power resources
    are handled by it, so unexport it and add a paragraph explaining the
    pitfalls to its kerneldoc comment.
    
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Reviewed-by: Mika Westerberg <mika.westerberg@linux.intel.com>

diff --git a/drivers/acpi/internal.h b/drivers/acpi/internal.h
index f6157d4d637a..f4c2fe6be4f2 100644
--- a/drivers/acpi/internal.h
+++ b/drivers/acpi/internal.h
@@ -139,8 +139,15 @@ int acpi_power_get_inferred_state(struct acpi_device *device, int *state);
 int acpi_power_on_resources(struct acpi_device *device, int state);
 int acpi_power_transition(struct acpi_device *device, int state);
 
+/* --------------------------------------------------------------------------
+                              Device Power Management
+   -------------------------------------------------------------------------- */
+int acpi_device_get_power(struct acpi_device *device, int *state);
 int acpi_wakeup_device_init(void);
 
+/* --------------------------------------------------------------------------
+                                  Processor
+   -------------------------------------------------------------------------- */
 #ifdef CONFIG_ARCH_MIGHT_HAVE_ACPI_PDC
 void acpi_early_processor_set_pdc(void);
 #else

commit 2025cf9e193de05b0654570dd639acb49ebd3adf
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Wed May 29 07:18:02 2019 -0700

    treewide: Replace GPLv2 boilerplate/reference with SPDX - rule 288
    
    Based on 1 normalized pattern(s):
    
      this program is free software you can redistribute it and or modify
      it under the terms and conditions of the gnu general public license
      version 2 as published by the free software foundation this program
      is distributed in the hope it will be useful but without any
      warranty without even the implied warranty of merchantability or
      fitness for a particular purpose see the gnu general public license
      for more details
    
    extracted by the scancode license scanner the SPDX license identifier
    
      GPL-2.0-only
    
    has been chosen to replace the boilerplate/reference in 263 file(s).
    
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Reviewed-by: Allison Randal <allison@lohutok.net>
    Reviewed-by: Alexios Zavras <alexios.zavras@intel.com>
    Cc: linux-spdx@vger.kernel.org
    Link: https://lkml.kernel.org/r/20190529141901.208660670@linutronix.de
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/acpi/internal.h b/drivers/acpi/internal.h
index 6eaf06db7752..f6157d4d637a 100644
--- a/drivers/acpi/internal.h
+++ b/drivers/acpi/internal.h
@@ -1,18 +1,9 @@
+/* SPDX-License-Identifier: GPL-2.0-only */
 /*
  * acpi/internal.h
  * For use by Linux/ACPI infrastructure, not drivers
  *
  * Copyright (c) 2009, Intel Corporation.
- *
- * This program is free software; you can redistribute it and/or modify it
- * under the terms and conditions of the GNU General Public License,
- * version 2, as published by the Free Software Foundation.
- *
- * This program is distributed in the hope it will be useful, but WITHOUT
- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
- * more details.
- *
  */
 
 #ifndef _ACPI_INTERNAL_H_

commit fdb3c177657033bfeff5652891bb67ff6e86b557
Author: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
Date:   Mon Jan 21 13:07:50 2019 +0100

    ACPI: EC: Clean up probing for early EC
    
    Both acpi_ec_dsdt_probe() and acpi_ec_ecdt_probe() may be void as
    their return values are ignored anyway.  This allows a couple of
    gotos and labels to go away from there.
    
    Moreover, acpi_ec_ecdt_probe() only needs to allocate the ec
    object after getting the ECDT pointer and checking it, so the
    pointless memory allocation and release on systems without the
    ECDT can be avoided by reordering it.
    
    No intentional functional impact.
    
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>

diff --git a/drivers/acpi/internal.h b/drivers/acpi/internal.h
index 6a9e1fb8913a..6eaf06db7752 100644
--- a/drivers/acpi/internal.h
+++ b/drivers/acpi/internal.h
@@ -192,8 +192,8 @@ extern struct acpi_ec *first_ec;
 typedef int (*acpi_ec_query_func) (void *data);
 
 int acpi_ec_init(void);
-int acpi_ec_ecdt_probe(void);
-int acpi_ec_dsdt_probe(void);
+void acpi_ec_ecdt_probe(void);
+void acpi_ec_dsdt_probe(void);
 void acpi_ec_block_transactions(void);
 void acpi_ec_unblock_transactions(void);
 void acpi_ec_mark_gpe_for_wake(void);

commit 1622745551db05071ed7263abf768007f7cbd3ae
Author: Sinan Kaya <okaya@kernel.org>
Date:   Sat Jan 5 10:05:56 2019 +0000

    ACPI / LPSS: Make PCI dependency explicit
    
    After commit 5d32a66541c4 (PCI/ACPI: Allow ACPI to be built without
    CONFIG_PCI set), it is possible to build ACPI without any PCI support.
    
    This code depends on PCI. Compile only when PCI is present.
    
    Fixes: 5d32a66541c46 ("PCI/ACPI: Allow ACPI to be built without CONFIG_PCI set")
    Signed-off-by: Sinan Kaya <okaya@kernel.org>
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>

diff --git a/drivers/acpi/internal.h b/drivers/acpi/internal.h
index 7e6952edb5b0..6a9e1fb8913a 100644
--- a/drivers/acpi/internal.h
+++ b/drivers/acpi/internal.h
@@ -81,7 +81,11 @@ void acpi_debugfs_init(void);
 #else
 static inline void acpi_debugfs_init(void) { return; }
 #endif
+#ifdef CONFIG_PCI
 void acpi_lpss_init(void);
+#else
+static inline void acpi_lpss_init(void) {}
+#endif
 
 void acpi_apd_init(void);
 

commit d8924c0d76aaa52e4811b5c64115d9a7f36cc73a
Merge: 1fbb2dc6f0ce f569da8c994c
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Tue Dec 25 15:01:46 2018 -0800

    Merge tag 'devprop-4.21-rc1' of git://git.kernel.org/pub/scm/linux/kernel/git/rafael/linux-pm
    
    Pull device properties framework updates from Rafael Wysocki:
     "This introduces 'software nodes' that are analogous to the DT and ACPI
      firmware nodes except that they can be created by drivers themselves
      and do a couple of assorted cleanups.
    
      Specifics:
    
       - Introduce "software nodes", analogous to the DT and ACPI firmware
         nodes except that they can be created by kernel code, in order to
         complement fwnodes representing real firmware nodes when they are
         incomplete (for example missing device properties) and to supply
         the primary fwnode when the firmware lacks hardware description for
         a device completely, and replace the "property_set" struct
         fwnode_handle type with software nodes (Heikki Krogerus).
    
       - Clean up the just introduced software nodes support and fix a
         commet in the graph-handling code (Colin Ian King, Marco Felsch)"
    
    * tag 'devprop-4.21-rc1' of git://git.kernel.org/pub/scm/linux/kernel/git/rafael/linux-pm:
      device property: fix fwnode_graph_get_next_endpoint() documentation
      drivers: base: swnode: remove need for a temporary string for the node name
      device property: Remove struct property_set
      device property: Move device_add_properties() to swnode.c
      drivers: base: Introducing software nodes to the firmware node framework
      ACPI / glue: Add acpi_platform_notify() function
      drivers core: Prepare support for multiple platform notifications
      driver core: platform: Remove duplicated device_remove_properties() call

commit e6d1315006383e525595bb3337d08bccec373ccc
Merge: 1e2af254ef13 3eb85368460d
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Tue Dec 25 14:21:18 2018 -0800

    Merge tag 'acpi-4.21-rc1' of git://git.kernel.org/pub/scm/linux/kernel/git/rafael/linux-pm
    
    Pull ACPI updates from Rafael Wysocki:
     "These update the ACPICA code in the kernel to the 20181213 upstream
      revision, make it possible to build the ACPI subsystem without PCI
      support, and a new OEM _OSI string, add a new device support to the
      ACPI driver for AMD SoCs and fix PM handling in the ACPI driver for
      Intel SoCs, fix the SPCR table handling and do some assorted fixes and
      cleanups.
    
      Specifics:
    
       - Update the ACPICA code in the kernel to the 20181213 upstream
         revision including:
          * New Windows _OSI strings (Bob Moore, Jung-uk Kim).
          * Buffers-to-string conversions update (Bob Moore).
          * Removal of support for expressions in package elements (Bob
            Moore).
          * New option to display method/object evaluation in debug output
            (Bob Moore).
          * Compiler improvements (Bob Moore, Erik Schmauss).
          * Minor debugger fix (Erik Schmauss).
          * Disassembler improvement (Erik Schmauss).
          * Assorted cleanups (Bob Moore, Colin Ian King, Erik Schmauss).
    
       - Add support for a new OEM _OSI string to indicate special handling
         of secondary graphics adapters on some systems (Alex Hung).
    
       - Make it possible to build the ACPI subystem without PCI support
         (Sinan Kaya).
    
       - Make the SPCR table handling regard baud rate 0 in accordance with
         the specification of it and make the DSDT override code support
         DSDT code names generated by recent ACPICA (Andy Shevchenko, Wang
         Dongsheng, Nathan Chancellor).
    
       - Add clock frequency for Hisilicon Hip08 SPI controller to the ACPI
         driver for AMD SoCs (APD) (Jay Fang).
    
       - Fix the PM handling during device init in the ACPI driver for Intel
         SoCs (LPSS) (Hans de Goede).
    
       - Avoid double panic()s by clearing the APEI GHES block_status before
         panic() (Lenny Szubowicz).
    
       - Clean up a function invocation in the ACPI core and get rid of some
         code duplication by using the DEFINE_SHOW_ATTRIBUTE macro in the
         APEI support code (Alexey Dobriyan, Yangtao Li)"
    
    * tag 'acpi-4.21-rc1' of git://git.kernel.org/pub/scm/linux/kernel/git/rafael/linux-pm: (31 commits)
      ACPI / tables: Add an ifdef around amlcode and dsdt_amlcode
      ACPI/APEI: Clear GHES block_status before panic()
      ACPI: Make PCI slot detection driver depend on PCI
      ACPI/IORT: Stub out ACS functions when CONFIG_PCI is not set
      arm64: select ACPI PCI code only when both features are enabled
      PCI/ACPI: Allow ACPI to be built without CONFIG_PCI set
      ACPICA: Remove PCI bits from ACPICA when CONFIG_PCI is unset
      ACPI: Allow CONFIG_PCI to be unset for reboot
      ACPI: Move PCI reset to a separate function
      ACPI / OSI: Add OEM _OSI string to enable dGPU direct output
      ACPI / tables: add DSDT AmlCode new declaration name support
      ACPICA: Update version to 20181213
      ACPICA: change coding style to match ACPICA, no functional change
      ACPICA: Debug output: Add option to display method/object evaluation
      ACPICA: disassembler: disassemble OEMx tables as AML
      ACPICA: Add "Windows 2018.2" string in the _OSI support
      ACPICA: Expressions in package elements are not supported
      ACPICA: Update buffer-to-string conversions
      ACPICA: add comments, no functional change
      ACPICA: Remove defines that use deprecated flag
      ...

commit 5d32a66541c4683456507481a0944ed2985e75c7
Author: Sinan Kaya <okaya@kernel.org>
Date:   Wed Dec 19 22:46:56 2018 +0000

    PCI/ACPI: Allow ACPI to be built without CONFIG_PCI set
    
    We are compiling PCI code today for systems with ACPI and no PCI
    device present. Remove the useless code and reduce the tight
    dependency.
    
    Signed-off-by: Sinan Kaya <okaya@kernel.org>
    Acked-by: Bjorn Helgaas <bhelgaas@google.com> # PCI parts
    Acked-by: Ingo Molnar <mingo@kernel.org>
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>

diff --git a/drivers/acpi/internal.h b/drivers/acpi/internal.h
index 530a3f675490..b7060dae2789 100644
--- a/drivers/acpi/internal.h
+++ b/drivers/acpi/internal.h
@@ -25,8 +25,13 @@ int acpi_osi_init(void);
 acpi_status acpi_os_initialize1(void);
 void init_acpi_device_notify(void);
 int acpi_scan_init(void);
+#ifdef CONFIG_PCI
 void acpi_pci_root_init(void);
 void acpi_pci_link_init(void);
+#else
+static inline void acpi_pci_root_init(void) {}
+static inline void acpi_pci_link_init(void) {}
+#endif
 void acpi_processor_init(void);
 void acpi_platform_init(void);
 void acpi_pnp_init(void);

commit f941d3e41da7f86bdb9dcc1977c2bcc6b89bfe47
Author: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
Date:   Mon Dec 17 12:21:55 2018 +0100

    ACPI: EC / PM: Disable non-wakeup GPEs for suspend-to-idle
    
    There are systems in which non-wakeup GPEs fire during the "noirq"
    suspend stage of suspending devices and that effectively prevents the
    system that tries to suspend to idle from entering any low-power
    state at all.  If the offending GPE fires regularly and often enough,
    the system appears to be suspended, but in fact it is in a tight loop
    over "noirq" suspend and "noirq" resume of devices all the time.
    
    To prevent that from happening, disable all non-wakeup GPEs except
    for the EC GPE for suspend-to-idle (the EC GPE is special, because
    on some systems it has to be enabled for power button wakeup events
    to be generated as expected).
    
    Fixes: 147a7d9d25ca (ACPI / PM: Do not reconfigure GPEs for suspend-to-idle)
    Link: https://bugzilla.kernel.org/show_bug.cgi?id=201987
    Reported-by: Zhang Rui <rui.zhang@intel.com>
    Tested-by: Mika Westerberg <mika.westerberg@linux.intel.com>
    Tested-by: Zhang Rui <rui.zhang@intel.com>
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>

diff --git a/drivers/acpi/internal.h b/drivers/acpi/internal.h
index 530a3f675490..f59d0b9e2683 100644
--- a/drivers/acpi/internal.h
+++ b/drivers/acpi/internal.h
@@ -188,6 +188,8 @@ int acpi_ec_ecdt_probe(void);
 int acpi_ec_dsdt_probe(void);
 void acpi_ec_block_transactions(void);
 void acpi_ec_unblock_transactions(void);
+void acpi_ec_mark_gpe_for_wake(void);
+void acpi_ec_set_gpe_wake_mask(u8 action);
 void acpi_ec_dispatch_gpe(void);
 int acpi_ec_add_query_handler(struct acpi_ec *ec, u8 query_bit,
 			      acpi_handle handle, acpi_ec_query_func func,

commit 7847a1455fc4574d53e349d60feb1e1106cdc012
Author: Heikki Krogerus <heikki.krogerus@linux.intel.com>
Date:   Fri Nov 9 17:21:35 2018 +0300

    ACPI / glue: Add acpi_platform_notify() function
    
    Instead of relying on the "platform_notify" callback hook,
    introducing separate notification function
    acpi_platform_notify() and calling that directly from
    drivers core when device entries are added and removed.
    
    Signed-off-by: Heikki Krogerus <heikki.krogerus@linux.intel.com>
    Acked-by: Linus Walleij <linus.walleij@linaro.org>
    Reviewed-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>

diff --git a/drivers/acpi/internal.h b/drivers/acpi/internal.h
index 530a3f675490..83a7dfb7d1cf 100644
--- a/drivers/acpi/internal.h
+++ b/drivers/acpi/internal.h
@@ -23,7 +23,6 @@
 int early_acpi_osi_init(void);
 int acpi_osi_init(void);
 acpi_status acpi_os_initialize1(void);
-void init_acpi_device_notify(void);
 int acpi_scan_init(void);
 void acpi_pci_root_init(void);
 void acpi_pci_link_init(void);

commit 68e22011856f036bd9b0328b9b62d953e668a7ae
Author: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
Date:   Wed May 16 14:13:21 2018 +0200

    ACPI: EC: Dispatch the EC GPE directly on s2idle wake
    
    On platforms where the Low Power S0 Idle _DSM interface is used,
    on wakeup from suspend-to-idle, when it is known that the ACPI SCI
    has triggered while suspended, dispatch the EC GPE in order to catch
    all EC events that may have triggered the wakeup before carrying out
    the noirq phase of device resume.
    
    That is needed to handle power button wakeup on some platforms where
    the EC goes into a low-power mode during suspend-to-idle and while in
    that mode it will discard events after a timeout.  If that timeout is
    shorter than the time it takes to complete the noirq resume of
    devices, looking for EC events after the latter is too late.
    
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Reported-by: Zhang Rui <rui.zhang@intel.com>
    Tested-by: Wendy Wang <wendy.wang@intel.com>

diff --git a/drivers/acpi/internal.h b/drivers/acpi/internal.h
index 1d0a501bc7f0..530a3f675490 100644
--- a/drivers/acpi/internal.h
+++ b/drivers/acpi/internal.h
@@ -188,6 +188,7 @@ int acpi_ec_ecdt_probe(void);
 int acpi_ec_dsdt_probe(void);
 void acpi_ec_block_transactions(void);
 void acpi_ec_unblock_transactions(void);
+void acpi_ec_dispatch_gpe(void);
 int acpi_ec_add_query_handler(struct acpi_ec *ec, u8 query_bit,
 			      acpi_handle handle, acpi_ec_query_func func,
 			      void *data);

commit 3522f867c13b63cf62acdf1b8ca5664c549a716a
Author: Geert Uytterhoeven <geert+renesas@glider.be>
Date:   Tue Jan 2 16:26:31 2018 +0100

    ACPI: EC: Fix debugfs_create_*() usage
    
    acpi_ec.gpe is "unsigned long", hence treating it as "u32" would expose
    the wrong half on big-endian 64-bit systems.  Fix this by changing its
    type to "u32" and removing the cast, as all other code already uses u32
    or sometimes even only u8.
    
    Fixes: 1195a098168fcacf (ACPI: Provide /sys/kernel/debug/ec/...)
    Signed-off-by: Geert Uytterhoeven <geert+renesas@glider.be>
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>

diff --git a/drivers/acpi/internal.h b/drivers/acpi/internal.h
index 7f43423de43c..1d0a501bc7f0 100644
--- a/drivers/acpi/internal.h
+++ b/drivers/acpi/internal.h
@@ -159,7 +159,7 @@ static inline void acpi_early_processor_osc(void) {}
    -------------------------------------------------------------------------- */
 struct acpi_ec {
 	acpi_handle handle;
-	unsigned long gpe;
+	u32 gpe;
 	unsigned long command_addr;
 	unsigned long data_addr;
 	bool global_lock;

commit b6c70268723bc89743b8aaaa7d17f6889d72497a
Merge: 10809bb97664 a64a62ce9a38
Author: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
Date:   Thu Nov 30 13:37:29 2017 +0100

    Merge branch 'acpi-ec' into acpi
    
    * acpi-ec:
      ACPI / EC: Fix regression related to PM ops support in ECDT device

commit a64a62ce9a380213dc9e192f762266d70c9b40ec
Author: Lv Zheng <lv.zheng@intel.com>
Date:   Tue Sep 26 16:54:09 2017 +0800

    ACPI / EC: Fix regression related to PM ops support in ECDT device
    
    On platforms (ASUS X550ZE and possibly all ASUS X series) with valid ECDT
    EC but invalid DSDT EC, EC PM ops won't be invoked as ECDT EC is not an
    ACPI device. Thus the following commit actually removed post-resume
    acpi_ec_enable_event() invocation for such platforms, and triggered a
    regression on them that after being resumed, EC (actually should be ECDT)
    driver stops handling EC events:
    
     Commit: c2b46d679b30c5c0d7eb47a21085943242bdd8dc
     Subject: ACPI / EC: Add PM operations to improve event handling for resume process
    
    Notice that the root cause actually is "ECDT is not an ACPI device" rather
    than "the timing of acpi_ec_enable_event() invocation", this patch fixes
    this issue by enumerating ECDT EC as an ACPI device. Due to the existence
    of the noirq stage, the ability of tuning the timing of
    acpi_ec_enable_event() invocation is still meaningful.
    
    This patch is a little bit different from the posted fix by moving
    acpi_config_boot_ec() from acpi_ec_ecdt_start() to acpi_ec_add() to make
    sure that EC event handling won't be stopped as long as the ACPI EC driver
    is bound. Thus the following sequence shouldn't disable EC event handling:
    unbind,suspend,resume,bind.
    
    Fixes: c2b46d679b30 (ACPI / EC: Add PM operations to improve event handling for resume process)
    Link: https://bugzilla.kernel.org/show_bug.cgi?id=196847
    Reported-by: Luya Tshimbalanga <luya@fedoraproject.org>
    Tested-by: Luya Tshimbalanga <luya@fedoraproject.org>
    Cc: 4.9+ <stable@vger.kernel.org> # 4.9+
    Signed-off-by: Lv Zheng <lv.zheng@intel.com>
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>

diff --git a/drivers/acpi/internal.h b/drivers/acpi/internal.h
index 4361c4415b4f..ede83d38beed 100644
--- a/drivers/acpi/internal.h
+++ b/drivers/acpi/internal.h
@@ -115,6 +115,7 @@ bool acpi_device_is_present(const struct acpi_device *adev);
 bool acpi_device_is_battery(struct acpi_device *adev);
 bool acpi_device_is_first_physical_node(struct acpi_device *adev,
 					const struct device *dev);
+int acpi_bus_register_early_device(int type);
 
 /* --------------------------------------------------------------------------
                      Device Matching and Notification

commit eeb2d80d502af28e5660ff4bbe00f90ceb82c2db
Author: Srinivas Pandruvada <srinivas.pandruvada@linux.intel.com>
Date:   Thu Oct 5 16:24:03 2017 -0700

    ACPI / LPIT: Add Low Power Idle Table (LPIT) support
    
    Add functionality to read LPIT table, which provides:
    
     - Sysfs interface to read residency counters via
       /sys/devices/system/cpu/cpuidle/low_power_idle_cpu_residency_us
       /sys/devices/system/cpu/cpuidle/low_power_idle_system_residency_us
    
    Here the count "low_power_idle_cpu_residency_us" shows the time spent
    by CPU package in low power state.  This is read via MSR interface,
    which points to MSR for PKG C10.
    
    Here the count "low_power_idle_system_residency_us" show the count the
    system was in low power state. This is read via MMIO interface. This
    is mapped to SLP_S0 residency on modern Intel systems. This residency
    is achieved only when CPU is in PKG C10 and all functional blocks are
    in low power state.
    
    It is possible that none of the above counters present or anyone of the
    counter present or all counters present.
    
    For example: On my Kabylake system both of the above counters present.
    After suspend to idle these counts updated and prints:
    
     6916179
     6998564
    
    This counter can be read by tools like turbostat to display. Or it can
    be used to debug, if modern systems are reaching desired low power state.
    
     - Provides an interface to read residency counter memory address
    
       This address can be used to get the base address of PMC memory
       mapped IO.  This is utilized by intel_pmc_core driver to print
       more debug information.
    
    In addition, to avoid code duplication to read iomem, removed the read of
    iomem from acpi_os_read_memory() in osl.c and made a common function
    acpi_os_read_iomem(). This new function is used for reading iomem in
    in both osl.c and acpi_lpit.c.
    
    Link: http://www.uefi.org/sites/default/files/resources/Intel_ACPI_Low_Power_S0_Idle.pdf
    Signed-off-by: Srinivas Pandruvada <srinivas.pandruvada@linux.intel.com>
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>

diff --git a/drivers/acpi/internal.h b/drivers/acpi/internal.h
index 4361c4415b4f..fc8c43e76707 100644
--- a/drivers/acpi/internal.h
+++ b/drivers/acpi/internal.h
@@ -248,4 +248,10 @@ void acpi_watchdog_init(void);
 static inline void acpi_watchdog_init(void) {}
 #endif
 
+#ifdef CONFIG_ACPI_LPIT
+void acpi_init_lpit(void);
+#else
+static inline void acpi_init_lpit(void) { }
+#endif
+
 #endif /* _ACPI_INTERNAL_H_ */

commit 01d2f105a428bb2ebc248e71b8c86df569288b95
Merge: f928a49027ed 42d516ce3414 a4bb2b493355 58eefe2f3f53 8a2e487e6fc1
Author: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
Date:   Sun Sep 3 23:54:03 2017 +0200

    Merge branches 'acpi-x86', 'acpi-soc', 'acpi-pmic' and 'acpi-apple'
    
    * acpi-x86:
      ACPI / boot: Add number of legacy IRQs to debug output
      ACPI / boot: Correct address space of __acpi_map_table()
      ACPI / boot: Don't define unused variables
    
    * acpi-soc:
      ACPI / LPSS: Don't abort ACPI scan on missing mem resource
    
    * acpi-pmic:
      ACPI / PMIC: xpower: Do pinswitch magic when reading GPADC
    
    * acpi-apple:
      spi: Use Apple device properties in absence of ACPI resources
      ACPI / scan: Recognize Apple SPI and I2C slaves
      ACPI / property: Support Apple _DSM properties
      ACPI / property: Don't evaluate objects for devices w/o handle
      treewide: Consolidate Apple DMI checks

commit 98529b9272e06a7767034fb8a32e43cdecda240a
Author: Lv Zheng <lv.zheng@intel.com>
Date:   Wed Aug 16 15:29:49 2017 +0800

    ACPI: EC: Fix regression related to wrong ECDT initialization order
    
    Commit 2a5708409e4e (ACPI / EC: Fix a gap that ECDT EC cannot handle
    EC events) introduced acpi_ec_ecdt_start(), but that function is
    invoked before acpi_ec_query_init(), which is too early.  This causes
    the kernel to crash if an EC event occurs after boot, when ec_query_wq
    is not valid:
    
     BUG: unable to handle kernel NULL pointer dereference at 0000000000000102
     ...
     Workqueue: events acpi_ec_event_handler
     task: ffff9f539790dac0 task.stack: ffffb437c0e10000
     RIP: 0010:__queue_work+0x32/0x430
    
    Normally, the DSDT EC should always be valid, so acpi_ec_ecdt_start()
    is actually a no-op in the majority of cases.  However, commit
    c712bb58d827 (ACPI / EC: Add support to skip boot stage DSDT probe)
    caused the probing of the DSDT EC as the "boot EC" to be skipped when
    the ECDT EC is valid and uncovered the bug.
    
    Fix this issue by invoking acpi_ec_ecdt_start() after acpi_ec_query_init()
    in acpi_ec_init().
    
    Link: https://jira01.devtools.intel.com/browse/LCK-4348
    Fixes: 2a5708409e4e (ACPI / EC: Fix a gap that ECDT EC cannot handle EC events)
    Fixes: c712bb58d827 (ACPI / EC: Add support to skip boot stage DSDT probe)
    Reported-by: Wang Wendy <wendy.wang@intel.com>
    Tested-by: Feng Chenzhou <chenzhoux.feng@intel.com>
    Signed-off-by: Lv Zheng <lv.zheng@intel.com>
    [ rjw: Changelog ]
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>

diff --git a/drivers/acpi/internal.h b/drivers/acpi/internal.h
index 58dd7ab3c653..3f5af4d7a739 100644
--- a/drivers/acpi/internal.h
+++ b/drivers/acpi/internal.h
@@ -185,7 +185,6 @@ typedef int (*acpi_ec_query_func) (void *data);
 int acpi_ec_init(void);
 int acpi_ec_ecdt_probe(void);
 int acpi_ec_dsdt_probe(void);
-int acpi_ec_ecdt_start(void);
 void acpi_ec_block_transactions(void);
 void acpi_ec_unblock_transactions(void);
 int acpi_ec_add_query_handler(struct acpi_ec *ec, u8 query_bit,

commit 899596e090ea21918c55cbccea594be840af44ea
Author: Lukas Wunner <lukas@wunner.de>
Date:   Tue Aug 1 14:10:41 2017 +0200

    ACPI / property: Support Apple _DSM properties
    
    While the rest of the world has standardized on _DSD as the way to store
    device properties in AML (introduced with ACPI 5.1 in 2014), Apple has
    been using a custom _DSM to achieve the same for much longer (ever since
    they switched from DeviceTree-based PowerPC to Intel in 2005, verified
    with MacOS X 10.4.11).
    
    The theory of operation on macOS is as follows:  AppleACPIPlatform.kext
    invokes mergeEFIproperties() and mergeDSMproperties() for each device to
    merge properties conveyed by EFI drivers as well as properties stored in
    AML into the I/O Kit registry from which they can be retrieved by
    drivers.  We've been supporting EFI properties since commit 58c5475aba67
    ("x86/efi: Retrieve and assign Apple device properties").  The present
    commit adds support for _DSM properties, thereby completing our support
    for Apple device properties.  The _DSM properties are made available
    under the primary fwnode, the EFI properties under the secondary fwnode.
    So for devices which possess both property types, they can all be
    elegantly accessed with the uniform API in <linux/property.h>.
    
    Until recently we had no need to support _DSM properties, they contained
    only uninteresting garbage.  The situation has changed with MacBooks and
    MacBook Pros introduced since 2015:  Their keyboard is attached with SPI
    instead of USB and the _CRS data which is necessary to initialize the
    spi driver only contains valid information if OSPM responds "false" to
    _OSI("Darwin").  If OSPM responds "true", _CRS is empty and the spi
    driver fails to initialize.  The rationale is very simple, Apple only
    cares about macOS and Windows:  On Windows, _CRS contains valid data,
    whereas on macOS it is empty.  Instead, macOS gleans the necessary data
    from the _DSM properties.
    
    Since Linux deliberately defaults to responding "true" to _OSI("Darwin"),
    we need to emulate macOS' behaviour by initializing the spi driver with
    data returned by the _DSM.
    
    An out-of-tree driver for the SPI keyboard exists which currently binds
    to the ACPI device, invokes the _DSM, parses the returned package and
    instantiates an SPI device with the data gleaned from the _DSM:
    https://github.com/cb22/macbook12-spi-driver/commit/9a416d699ef4
    https://github.com/cb22/macbook12-spi-driver/commit/0c34936ed9a1
    
    By adding support for Apple's _DSM properties in generic ACPI code, the
    out-of-tree driver will be able to register as a regular SPI driver,
    significantly reducing its amount of code and improving its chances to
    be mainlined.
    
    The SPI keyboard will not be the only user of this commit:  E.g. on the
    MacBook8,1, the UART-attached Bluetooth device likewise returns empty
    _CRS data if OSPM returns "true" to _OSI("Darwin").
    
    The _DSM returns a Package whose format unfortunately deviates slightly
    from the _DSD spec:  The properties are marshalled up in a single Package
    as alternating key/value elements, unlike _DSD which stores them as a
    Package of 2-element Packages.  The present commit therefore converts
    the Package to _DSD format and the ACPI core can then treat the data as
    if Apple would follow the standard.
    
    Well, except for one small annoyance:  The properties returned by the
    _DSM only ever have one of two types, Integer or Buffer.  The former is
    retrievable as usual with device_property_read_u64(), but the latter is
    not part of the _DSD spec and it is not possible to retrieve Buffer
    properties with the device_property_read_*() functions due to the type
    checking performed in drivers/acpi/property.c.  It is however possible
    to retrieve them with acpi_dev_get_property().  Apple is using the
    Buffer type somewhat sloppily to store null-terminated strings but also
    integers.  The real data type is not distinguishable by the ACPI core
    and the onus is on the caller to use the contents of the Buffer in an
    appropriate way.
    
    In case Apple moves to _DSD in the future, this commit first checks for
    _DSD and falls back to _DSM only if _DSD is not found.
    
    Tested-by: Ronald Tschalär <ronald@innovation.ch>
    Acked-by: Mika Westerberg <mika.westerberg@linux.intel.com>
    Reviewed-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    Signed-off-by: Lukas Wunner <lukas@wunner.de>
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>

diff --git a/drivers/acpi/internal.h b/drivers/acpi/internal.h
index 58dd7ab3c653..ee066d74f5bf 100644
--- a/drivers/acpi/internal.h
+++ b/drivers/acpi/internal.h
@@ -233,6 +233,12 @@ static inline void suspend_nvs_restore(void) {}
 void acpi_init_properties(struct acpi_device *adev);
 void acpi_free_properties(struct acpi_device *adev);
 
+#ifdef CONFIG_X86
+void acpi_extract_apple_properties(struct acpi_device *adev);
+#else
+static inline void acpi_extract_apple_properties(struct acpi_device *adev) {}
+#endif
+
 /*--------------------------------------------------------------------------
 				Watchdog
   -------------------------------------------------------------------------- */

commit 880a66275ef4d1e08e5d4dcf4cec768de18c68ef
Author: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
Date:   Thu Jul 20 03:43:12 2017 +0200

    ACPI / PM / EC: Flush all EC work in acpi_freeze_sync()
    
    Commit eed4d47efe95 (ACPI / sleep: Ignore spurious SCI wakeups from
    suspend-to-idle) introduced acpi_freeze_sync() whose purpose is to
    flush all of the processing of possible wakeup events signaled via
    the ACPI SCI.  However, it doesn't flush the query workqueue used
    by the EC driver, so the events generated by the EC may not be
    processed timely which leads to issues (increased overhead at least,
    lost events possibly).
    
    To fix that introduce acpi_ec_flush_work() that will flush all of
    the outstanding EC work and call it from acpi_freeze_sync().
    
    Fixes: eed4d47efe95 (ACPI / sleep: Ignore spurious SCI wakeups from suspend-to-idle)
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>

diff --git a/drivers/acpi/internal.h b/drivers/acpi/internal.h
index 9531d3276f65..58dd7ab3c653 100644
--- a/drivers/acpi/internal.h
+++ b/drivers/acpi/internal.h
@@ -193,6 +193,10 @@ int acpi_ec_add_query_handler(struct acpi_ec *ec, u8 query_bit,
 			      void *data);
 void acpi_ec_remove_query_handler(struct acpi_ec *ec, u8 query_bit);
 
+#ifdef CONFIG_PM_SLEEP
+void acpi_ec_flush_work(void);
+#endif
+
 
 /*--------------------------------------------------------------------------
                                   Suspend/Resume

commit 548aa0e3c516d906dae5edb1fc9a1ad2e490120a
Merge: 322618684353 6a71d8d77795
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Mon Jul 10 15:23:45 2017 -0700

    Merge tag 'devprop-4.13-rc1' of git://git.kernel.org/pub/scm/linux/kernel/git/rafael/linux-pm
    
    Pull device properties framework updates from Rafael Wysocki:
     "These mostly rearrange the device properties core code and add a few
      helper functions to it as a foundation for future work.
    
      Specifics:
    
       - Rearrange the core device properties code by moving the code
         specific to each supported platform configuration framework (ACPI,
         DT and build-in) into a separate file (Sakari Ailus).
    
       - Add helper functions for accessing device properties in a
         firmware-agnostic way (Sakari Ailus, Kieran Bingham)"
    
    * tag 'devprop-4.13-rc1' of git://git.kernel.org/pub/scm/linux/kernel/git/rafael/linux-pm:
      device property: Add fwnode_graph_get_port_parent
      device property: Add FW type agnostic fwnode_graph_get_remote_node
      device property: Introduce fwnode_device_is_available()
      device property: Move fwnode graph ops to firmware specific locations
      device property: Move FW type specific functionality to FW specific files
      ACPI: Constify argument to acpi_device_is_present()

commit 8110dd281e155e5010ffd657bba4742ebef7a93f
Author: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
Date:   Fri Jun 23 15:24:32 2017 +0200

    ACPI / sleep: EC-based wakeup from suspend-to-idle on recent systems
    
    Some recent Dell laptops, including the XPS13 model numbers 9360 and
    9365, cannot be woken up from suspend-to-idle by pressing the power
    button which is unexpected and makes that feature less usable on
    those systems.  Moreover, on the 9365 ACPI S3 (suspend-to-RAM) is
    not expected to be used at all (the OS these systems ship with never
    exercises the ACPI S3 path in the firmware) and suspend-to-idle is
    the only viable system suspend mechanism there.
    
    The reason why the power button wakeup from suspend-to-idle doesn't
    work on those systems is because their power button events are
    signaled by the EC (Embedded Controller), whose GPE (General Purpose
    Event) line is disabled during suspend-to-idle transitions in Linux.
    That is done on purpose, because in general the EC tends to be noisy
    for various reasons (battery and thermal updates and similar, for
    example) and all events signaled by it would kick the CPUs out of
    deep idle states while in suspend-to-idle, which effectively might
    defeat its purpose.
    
    Of course, on the Dell systems in question the EC GPE must be enabled
    during suspend-to-idle transitions for the button press events to
    be signaled while suspended at all, but fortunately there is a way
    out of this puzzle.
    
    First of all, those systems have the ACPI_FADT_LOW_POWER_S0 flag set
    in their ACPI tables, which means that the OS is expected to prefer
    the "low power S0 idle" system state over ACPI S3 on them.  That
    causes the most recent versions of other OSes to simply ignore ACPI
    S3 on those systems, so it is reasonable to expect that it should not
    be necessary to block GPEs during suspend-to-idle on them.
    
    Second, in addition to that, the systems in question provide a special
    firmware interface that can be used to indicate to the platform that
    the OS is transitioning into a system-wide low-power state in which
    certain types of activity are not desirable or that it is leaving
    such a state and that (in principle) should allow the platform to
    adjust its operation mode accordingly.
    
    That interface is a special _DSM object under a System Power
    Management Controller device (PNP0D80).  The expected way to use it
    is to invoke function 0 from it on system initialization, functions
    3 and 5 during suspend transitions and functions 4 and 6 during
    resume transitions (to reverse the actions carried out by the
    former).  In particular, function 5 from the "Low-Power S0" device
    _DSM is expected to cause the platform to put itself into a low-power
    operation mode which should include making the EC less verbose (so to
    speak).  Next, on resume, function 6 switches the platform back to
    the "working-state" operation mode.
    
    In accordance with the above, modify the ACPI suspend-to-idle code
    to look for the "Low-Power S0" _DSM interface on platforms with the
    ACPI_FADT_LOW_POWER_S0 flag set in the ACPI tables.  If it's there,
    use it during suspend-to-idle transitions as prescribed and avoid
    changing the GPE configuration in that case.  [That should reflect
    what the most recent versions of other OSes do.]
    
    Also modify the ACPI EC driver to make it handle events during
    suspend-to-idle in the usual way if the "Low-Power S0" _DSM interface
    is going to be used to make the power button events work while
    suspended on the Dell machines mentioned above
    
    Link: http://www.uefi.org/sites/default/files/resources/Intel_ACPI_Low_Power_S0_Idle.pdf
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>

diff --git a/drivers/acpi/internal.h b/drivers/acpi/internal.h
index 75924ea69071..be79f7db1850 100644
--- a/drivers/acpi/internal.h
+++ b/drivers/acpi/internal.h
@@ -199,9 +199,11 @@ void acpi_ec_remove_query_handler(struct acpi_ec *ec, u8 query_bit);
   -------------------------------------------------------------------------- */
 #ifdef CONFIG_ACPI_SYSTEM_POWER_STATES_SUPPORT
 extern bool acpi_s2idle_wakeup(void);
+extern bool acpi_sleep_no_ec_events(void);
 extern int acpi_sleep_init(void);
 #else
 static inline bool acpi_s2idle_wakeup(void) { return false; }
+static inline bool acpi_sleep_no_ec_events(void) { return true; }
 static inline int acpi_sleep_init(void) { return -ENXIO; }
 #endif
 

commit cde1f95f407a593ad6baf1b7b01daa2c6cbd34fd
Author: Sakari Ailus <sakari.ailus@linux.intel.com>
Date:   Tue Jun 6 12:37:36 2017 +0300

    ACPI: Constify argument to acpi_device_is_present()
    
    This will be needed in constifying the fwnode API.
    
    The side effects the function had have been moved to the callers.
    
    Signed-off-by: Sakari Ailus <sakari.ailus@linux.intel.com>
    Reviewed-by: Mika Westerberg <mika.westerberg@linux.intel.com>
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>

diff --git a/drivers/acpi/internal.h b/drivers/acpi/internal.h
index 66229ffa909b..73002402c461 100644
--- a/drivers/acpi/internal.h
+++ b/drivers/acpi/internal.h
@@ -111,7 +111,7 @@ int acpi_device_setup_files(struct acpi_device *dev);
 void acpi_device_remove_files(struct acpi_device *dev);
 void acpi_device_add_finalize(struct acpi_device *device);
 void acpi_free_pnp_ids(struct acpi_device_pnp *pnp);
-bool acpi_device_is_present(struct acpi_device *adev);
+bool acpi_device_is_present(const struct acpi_device *adev);
 bool acpi_device_is_battery(struct acpi_device *adev);
 bool acpi_device_is_first_physical_node(struct acpi_device *adev,
 					const struct device *dev);

commit 33e4f80ee69b5168badf37edbfed796eb48434b9
Author: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
Date:   Mon Jun 12 22:56:34 2017 +0200

    ACPI / PM: Ignore spurious SCI wakeups from suspend-to-idle
    
    The ACPI SCI (System Control Interrupt) is set up as a wakeup IRQ
    during suspend-to-idle transitions and, consequently, any events
    signaled through it wake up the system from that state.  However,
    on some systems some of the events signaled via the ACPI SCI while
    suspended to idle should not cause the system to wake up.  In fact,
    quite often they should just be discarded.
    
    Arguably, systems should not resume entirely on such events, but in
    order to decide which events really should cause the system to resume
    and which are spurious, it is necessary to resume up to the point
    when ACPI SCIs are actually handled and processed, which is after
    executing dpm_resume_noirq() in the system resume path.
    
    For this reasons, add a loop around freeze_enter() in which the
    platforms can process events signaled via multiplexed IRQ lines
    like the ACPI SCI and add suspend-to-idle hooks that can be
    used for this purpose to struct platform_freeze_ops.
    
    In the ACPI case, the ->wake hook is used for checking if the SCI
    has triggered while suspended and deferring the interrupt-induced
    system wakeup until the events signaled through it are actually
    processed sufficiently to decide whether or not the system should
    resume.  In turn, the ->sync hook allows all of the relevant event
    queues to be flushed so as to prevent events from being missed due
    to race conditions.
    
    In addition to that, some ACPI code processing wakeup events needs
    to be modified to use the "hard" version of wakeup triggers, so that
    it will cause a system resume to happen on device-induced wakeup
    events even if the "soft" mechanism to prevent the system from
    suspending is not enabled.  However, to preserve the existing
    behavior with respect to suspend-to-RAM, this only is done in
    the suspend-to-idle case and only if an SCI has occurred while
    suspended.
    
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>

diff --git a/drivers/acpi/internal.h b/drivers/acpi/internal.h
index 66229ffa909b..75924ea69071 100644
--- a/drivers/acpi/internal.h
+++ b/drivers/acpi/internal.h
@@ -198,8 +198,10 @@ void acpi_ec_remove_query_handler(struct acpi_ec *ec, u8 query_bit);
                                   Suspend/Resume
   -------------------------------------------------------------------------- */
 #ifdef CONFIG_ACPI_SYSTEM_POWER_STATES_SUPPORT
+extern bool acpi_s2idle_wakeup(void);
 extern int acpi_sleep_init(void);
 #else
+static inline bool acpi_s2idle_wakeup(void) { return false; }
 static inline int acpi_sleep_init(void) { return -ENXIO; }
 #endif
 

commit ffc10d82ff5df7087a9b737de55a69ac4f89bf56
Author: Michal Hocko <mhocko@suse.com>
Date:   Mon Apr 3 09:40:23 2017 +0200

    ACPI / scan: Drop support for force_remove
    
    /sys/firmware/acpi/hotplug/force_remove was presumably added to support
    auto offlining in the past. This is, however, inherently dangerous for
    some hotplugable resources like memory. The memory offlining fails when
    the memory is still in use and cannot be dropped or migrated. If we
    ignore the failure we are basically allowing for subtle memory
    corruption or a crash.
    
    We have actually noticed the later while hitting BUG() during the memory
    hotremove (remove_memory):
            ret = walk_memory_range(PFN_DOWN(start), PFN_UP(start + size - 1), NULL,
                            check_memblock_offlined_cb);
            if (ret)
                    BUG();
    
    it took us quite non-trivial time realize that the customer had
    force_remove enabled. Even if the BUG was removed here and we could
    propagate the error up the call chain it wouldn't help at all because
    then we would hit a crash or a memory corruption later and harder to
    debug. So force_remove is unfixable for the memory hotremove. We haven't
    checked other hotplugable resources to be prone to a similar problems.
    
    Remove the force_remove functionality because it is not fixable currently.
    Keep the sysfs file and report an error if somebody tries to enable it.
    Encourage users to report about the missing functionality and work with
    them with an alternative solution.
    
    Reviewed-by: Lee, Chun-Yi <jlee@suse.com>
    Signed-off-by: Michal Hocko <mhocko@suse.com>
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>

diff --git a/drivers/acpi/internal.h b/drivers/acpi/internal.h
index f15900132912..66229ffa909b 100644
--- a/drivers/acpi/internal.h
+++ b/drivers/acpi/internal.h
@@ -65,8 +65,6 @@ static inline void acpi_cmos_rtc_init(void) {}
 #endif
 int acpi_rev_override_setup(char *str);
 
-extern bool acpi_force_hot_remove;
-
 void acpi_sysfs_add_hotplug_profile(struct acpi_hotplug_profile *hotplug,
 				    const char *name);
 int acpi_scan_add_handler_with_hotplug(struct acpi_scan_handler *handler,

commit f2ae5da726172fcf82f7be801489dd585f6a38eb
Author: Rui Wang <rui.y.wang@intel.com>
Date:   Tue Feb 28 21:34:29 2017 +0800

    x86/ioapic: Split IOAPIC hot-removal into two steps
    
    The hot removal of IOAPIC is handling PCI and ACPI removal in one go. That
    only works when the PCI drivers released the interrupt resources, but
    breaks when a IOAPIC interrupt is still associated to a PCI device.
    
    The new pcibios_release_device() callback allows to solve that problem by
    splitting the removal into two steps:
    
    1) PCI removal:
    
       Release all PCI resources including eventually not yet released IOAPIC
       interrupts via the new pcibios_release_device() callback.
    
    2) ACPI removal:
    
       After release of all PCI resources the ACPI resources can be released
       without issue.
    
    [ tglx: Rewrote changelog ]
    
    Signed-off-by: Rui Wang <rui.y.wang@intel.com>
    Cc: tony.luck@intel.com
    Cc: linux-pci@vger.kernel.org
    Cc: rjw@rjwysocki.net
    Cc: linux-acpi@vger.kernel.org
    Cc: fengguang.wu@intel.com
    Cc: helgaas@kernel.org
    Cc: kbuild-all@01.org
    Cc: bhelgaas@google.com
    Link: http://lkml.kernel.org/r/1488288869-31290-3-git-send-email-rui.y.wang@intel.com
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>

diff --git a/drivers/acpi/internal.h b/drivers/acpi/internal.h
index 219b90bc0922..f15900132912 100644
--- a/drivers/acpi/internal.h
+++ b/drivers/acpi/internal.h
@@ -41,8 +41,10 @@ void acpi_gpe_apply_masked_gpes(void);
 void acpi_container_init(void);
 void acpi_memory_hotplug_init(void);
 #ifdef	CONFIG_ACPI_HOTPLUG_IOAPIC
+void pci_ioapic_remove(struct acpi_pci_root *root);
 int acpi_ioapic_remove(struct acpi_pci_root *root);
 #else
+static inline void pci_ioapic_remove(struct acpi_pci_root *root) { return; }
 static inline int acpi_ioapic_remove(struct acpi_pci_root *root) { return 0; }
 #endif
 #ifdef CONFIG_ACPI_DOCK

commit c3a696b6e8f8f75f9f75e556a9f9f6472eae2655
Author: Lv Zheng <lv.zheng@intel.com>
Date:   Fri Jan 20 16:42:48 2017 +0800

    ACPI / EC: Use busy polling mode when GPE is not enabled
    
    When GPE is not enabled, it is not efficient to use the wait polling mode
    as it introduces an unexpected scheduler delay.
    So before the GPE handler is installed, this patch uses busy polling mode
    for all EC(s) and the logic can be applied to non boot EC(s) during the
    suspend/resume process.
    
    Link: https://bugzilla.kernel.org/show_bug.cgi?id=191561
    Tested-by: Jakobus Schurz <jakobus.schurz@gmail.com>
    Tested-by: Chen Yu <yu.c.chen@intel.com>
    Signed-off-by: Lv Zheng <lv.zheng@intel.com>
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>

diff --git a/drivers/acpi/internal.h b/drivers/acpi/internal.h
index 0c452265c111..219b90bc0922 100644
--- a/drivers/acpi/internal.h
+++ b/drivers/acpi/internal.h
@@ -172,8 +172,8 @@ struct acpi_ec {
 	struct work_struct work;
 	unsigned long timestamp;
 	unsigned long nr_pending_queries;
-	bool saved_busy_polling;
-	unsigned int saved_polling_guard;
+	bool busy_polling;
+	unsigned int polling_guard;
 };
 
 extern struct acpi_ec *first_ec;

commit 9c4aa1eecb48cfac18ed5e3aca9d9ae58fbafc11
Author: Lv Zheng <lv.zheng@intel.com>
Date:   Fri Dec 16 12:07:57 2016 +0800

    ACPI / sysfs: Provide quirk mechanism to prevent GPE flooding
    
    Sometimes, the users may require a quirk to be provided from ACPI subsystem
    core to prevent a GPE from flooding.
    Normally, if a GPE cannot be dispatched, ACPICA core automatically prevents
    the GPE from firing. But there are cases the GPE is dispatched by _Lxx/_Exx
    provided via AML table, and OSPM is lacking of the knowledge to get
    _Lxx/_Exx correctly executed to handle the GPE, thus the GPE flooding may
    still occur.
    
    The existing quirk mechanism can be enabled/disabled using the following
    commands to prevent such kind of GPE flooding during runtime:
     # echo mask > /sys/firmware/acpi/interrupts/gpe00
     # echo unmask > /sys/firmware/acpi/interrupts/gpe00
    To avoid GPE flooding during boot, we need a boot stage mechanism.
    
    This patch provides such a boot stage quirk mechanism to stop this kind of
    GPE flooding. This patch doesn't fix any feature gap but since the new
    feature gaps could be found in the future endlessly, and can disappear if
    the feature gaps are filled, providing a boot parameter rather than a DMI
    table should suffice.
    
    Link: https://bugzilla.kernel.org/show_bug.cgi?id=53071
    Link: https://bugzilla.kernel.org/show_bug.cgi?id=117481
    Link: https://bugs.launchpad.net/ubuntu/+source/linux/+bug/887793
    Signed-off-by: Lv Zheng <lv.zheng@intel.com>
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>

diff --git a/drivers/acpi/internal.h b/drivers/acpi/internal.h
index 1b41a2739dac..0c452265c111 100644
--- a/drivers/acpi/internal.h
+++ b/drivers/acpi/internal.h
@@ -37,6 +37,7 @@ void acpi_amba_init(void);
 static inline void acpi_amba_init(void) {}
 #endif
 int acpi_sysfs_init(void);
+void acpi_gpe_apply_masked_gpes(void);
 void acpi_container_init(void);
 void acpi_memory_hotplug_init(void);
 #ifdef	CONFIG_ACPI_HOTPLUG_IOAPIC

commit 110a9e42b68719f584879c5c5c727bbae90d15f9
Merge: af79ad2b1f33 eb6296dec19f
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Mon Oct 3 15:36:06 2016 -0700

    Merge branch 'x86-apic-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip
    
    Pull x86 apic updates from Ingo Molnar:
     "The main changes are:
    
       - Persistent CPU/node numbering across CPU hotplug/unplug events.
         This is a pretty involved series of changes that first fetches all
         the information during bootup and then uses it for the various
         hotplug/unplug methods. (Gu Zheng, Dou Liyang)
    
       - IO-APIC hot-add/remove fixes and enhancements. (Rui Wang)
    
       - ... various fixes, cleanups and enhancements"
    
    * 'x86-apic-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip: (22 commits)
      x86/apic: Fix silent & fatal merge conflict in __generic_processor_info()
      acpi: Fix broken error check in map_processor()
      acpi: Validate processor id when mapping the processor
      acpi: Provide mechanism to validate processors in the ACPI tables
      x86/acpi: Set persistent cpuid <-> nodeid mapping when booting
      x86/acpi: Enable MADT APIs to return disabled apicids
      x86/acpi: Introduce persistent storage for cpuid <-> apicid mapping
      x86/acpi: Enable acpi to register all possible cpus at boot time
      x86/numa: Online memory-less nodes at boot time
      x86/apic: Get rid of apic_version[] array
      x86/apic: Order irq_enter/exit() calls correctly vs. ack_APIC_irq()
      x86/ioapic: Ignore root bridges without a companion ACPI device
      x86/apic: Update comment about disabling processor focus
      x86/smpboot: Check APIC ID before setting up default routing
      x86/ioapic: Fix IOAPIC failing to request resource
      x86/ioapic: Fix lost IOAPIC resource after hot-removal and hotadd
      x86/ioapic: Fix setup_res() failing to get resource
      x86/ioapic: Support hot-removal of IOAPICs present during boot
      x86/ioapic: Change prototype of acpi_ioapic_add()
      x86/apic, ACPI: Fix incorrect assignment when handling apic/x2apic entries
      ...

commit 0137a337d7760c265a7d126964297e41ba9a1cb3
Merge: 0d573c6a0101 cda3b9178510 97cb159fd91d
Author: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
Date:   Sun Oct 2 01:40:07 2016 +0200

    Merge branches 'acpi-wdat' and 'acpi-ec'
    
    * acpi-wdat:
      watchdog: wdat_wdt: Fix warning for using 0 as NULL
      watchdog: wdat_wdt: fix return value check in wdat_wdt_probe()
      platform/x86: intel_pmc_ipc: Do not create iTCO watchdog when WDAT table exists
      i2c: i801: Do not create iTCO watchdog when WDAT table exists
      mfd: lpc_ich: Do not create iTCO watchdog when WDAT table exists
      ACPI / watchdog: Add support for WDAT hardware watchdog
    
    * acpi-ec:
      ACPI / EC: Fix issues related to boot_ec
      ACPI / EC: Fix a gap that ECDT EC cannot handle EC events
      ACPI / EC: Fix a memory leakage issue in acpi_ec_add()
      ACPI / EC: Cleanup first_ec/boot_ec code
      ACPI / EC: Enable event freeze mode to improve event handling for suspend process
      ACPI / EC: Add PM operations to improve event handling for suspend process
      ACPI / EC: Add PM operations to improve event handling for resume process
      ACPI / EC: Fix an issue that SCI_EVT cannot be detected after event is enabled
      ACPI / EC: Add EC_FLAGS_QUERY_ENABLED to reveal a hidden logic
      ACPI / EC: Add PM operations for suspend/resume noirq stage

commit 058dfc7670086edda8d34f0dbe93c596db5d4a6b
Author: Mika Westerberg <mika.westerberg@linux.intel.com>
Date:   Tue Sep 20 15:30:51 2016 +0300

    ACPI / watchdog: Add support for WDAT hardware watchdog
    
    Starting from Intel Skylake the iTCO watchdog timer registers were moved to
    reside in the same register space with SMBus host controller.  Not all
    needed registers are available though and we need to unhide P2SB (Primary
    to Sideband) device briefly to be able to read status of required NO_REBOOT
    bit. The i2c-i801.c SMBus driver used to handle this and creation of the
    iTCO watchdog platform device.
    
    Windows, on the other hand, does not use the iTCO watchdog hardware
    directly even if it is available. Instead it relies on ACPI Watchdog Action
    Table (WDAT) table to describe the watchdog hardware to the OS. This table
    contains necessary information about the the hardware and also set of
    actions which are executed by a driver as needed.
    
    This patch implements a new watchdog driver that takes advantage of the
    ACPI WDAT table. We split the functionality into two parts: first part
    enumerates the WDAT table and if found, populates resources and creates
    platform device for the actual driver. The second part is the driver
    itself.
    
    The reason for the split is that this way we can make the driver itself to
    be a module and loaded automatically if the WDAT table is found. Otherwise
    the module is not loaded.
    
    Signed-off-by: Mika Westerberg <mika.westerberg@linux.intel.com>
    Reviewed-by: Guenter Roeck <linux@roeck-us.net>
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>

diff --git a/drivers/acpi/internal.h b/drivers/acpi/internal.h
index 940218ff0193..fb9a7ad96756 100644
--- a/drivers/acpi/internal.h
+++ b/drivers/acpi/internal.h
@@ -225,4 +225,14 @@ static inline void suspend_nvs_restore(void) {}
 void acpi_init_properties(struct acpi_device *adev);
 void acpi_free_properties(struct acpi_device *adev);
 
+/*--------------------------------------------------------------------------
+				Watchdog
+  -------------------------------------------------------------------------- */
+
+#ifdef CONFIG_ACPI_WATCHDOG
+void acpi_watchdog_init(void);
+#else
+static inline void acpi_watchdog_init(void) {}
+#endif
+
 #endif /* _ACPI_INTERNAL_H_ */

commit 2a5708409e4e05446eb1a89ecb48641d6fd5d5a9
Author: Lv Zheng <lv.zheng@intel.com>
Date:   Wed Sep 7 16:50:21 2016 +0800

    ACPI / EC: Fix a gap that ECDT EC cannot handle EC events
    
    It is possible to register _Qxx from namespace and use the ECDT EC to
    perform event handling. The reported bug reveals that Windows is using ECDT
    in this way in case the namespace EC is not present. This patch facilitates
    Linux to support ECDT in this way.
    
    Link: https://bugzilla.kernel.org/show_bug.cgi?id=115021
    Reported-and-tested-by: Luya Tshimbalanga <luya@fedoraproject.org>
    Tested-by: Jonh Henderson <jw.hendy@gmail.com>
    Reviewed-by: Peter Wu <peter@lekensteyn.nl>
    Signed-off-by: Lv Zheng <lv.zheng@intel.com>
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>

diff --git a/drivers/acpi/internal.h b/drivers/acpi/internal.h
index 29f206318d3d..73bee2cbe41f 100644
--- a/drivers/acpi/internal.h
+++ b/drivers/acpi/internal.h
@@ -187,6 +187,7 @@ typedef int (*acpi_ec_query_func) (void *data);
 int acpi_ec_init(void);
 int acpi_ec_ecdt_probe(void);
 int acpi_ec_dsdt_probe(void);
+int acpi_ec_ecdt_start(void);
 void acpi_ec_block_transactions(void);
 void acpi_ec_unblock_transactions(void);
 int acpi_ec_add_query_handler(struct acpi_ec *ec, u8 query_bit,

commit c2b46d679b30c5c0d7eb47a21085943242bdd8dc
Author: Lv Zheng <lv.zheng@intel.com>
Date:   Wed Aug 3 16:01:36 2016 +0800

    ACPI / EC: Add PM operations to improve event handling for resume process
    
    This patch makes 2 changes:
    
    1. Restore old behavior
    Originally, EC driver stops handling both events and transactions in
    acpi_ec_block_transactions(), and restarts to handle transactions in
    acpi_ec_unblock_transactions_early(), restarts to handle both events and
    transactions in acpi_ec_unblock_transactions().
    While currently, EC driver still stops handling both events and
    transactions in acpi_ec_block_transactions(), but restarts to handle both
    events and transactions in acpi_ec_unblock_transactions_early().
    This patch tries to restore the old behavior by dropping
    __acpi_ec_enable_event() from acpi_unblock_transactions_early().
    
    2. Improve old behavior
    However this still cannot fix the real issue as both of the
    acpi_ec_unblock_xxx() functions are invoked in the noirq stage. Since the
    EC driver actually doesn't implement the event handling in the polling
    mode, re-enabling the event handling too early in the noirq stage could
    result in the problem that if there is no triggering source causing
    advance_transaction() to be invoked, pending SCI_EVT cannot be detected by
    the EC driver and _Qxx cannot be triggered.
    It actually makes sense to restart the event handling in any point during
    resuming after the noirq stage. Just like the boot stage where the event
    handling is enabled in .add(), this patch further moves
    acpi_ec_enable_event() to .resume(). After doing that, the following 2
    functions can be combined:
    acpi_ec_unblock_transactions_early()/acpi_ec_unblock_transactions().
    
    The differences of the event handling availability between the old behavior
    (this patch isn't applied) and the new behavior (this patch is applied) are
    as follows:
                            !Applied        Applied
    before suspend          Y               Y
    suspend before EC       Y               Y
    suspend after EC        Y               Y
    suspend_late            Y               Y
    suspend_noirq           Y (actually N)  Y (actually N)
    resume_noirq            Y (actually N)  Y (actually N)
    resume_late             Y (actually N)  Y (actually N)
    resume before EC        Y (actually N)  Y (actually N)
    resume after EC         Y (actually N)  Y
    after resume            Y (actually N)  Y
    Where "actually N" means if there is no triggering source, the EC driver
    is actually not able to notice the pending SCI_EVT occurred in the noirq
    stage. So we can clearly see that this patch has improved the situation.
    
    Signed-off-by: Lv Zheng <lv.zheng@intel.com>
    Tested-by: Todd E Brandt <todd.e.brandt@linux.intel.com>
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>

diff --git a/drivers/acpi/internal.h b/drivers/acpi/internal.h
index 6996121ee003..29f206318d3d 100644
--- a/drivers/acpi/internal.h
+++ b/drivers/acpi/internal.h
@@ -189,7 +189,6 @@ int acpi_ec_ecdt_probe(void);
 int acpi_ec_dsdt_probe(void);
 void acpi_ec_block_transactions(void);
 void acpi_ec_unblock_transactions(void);
-void acpi_ec_unblock_transactions_early(void);
 int acpi_ec_add_query_handler(struct acpi_ec *ec, u8 query_bit,
 			      acpi_handle handle, acpi_ec_query_func func,
 			      void *data);

commit daae45caf5a042a0c7d147749ed1e4c970fc86d8
Author: Lukas Wunner <lukas@wunner.de>
Date:   Thu Jul 28 02:25:41 2016 +0200

    ACPI / bus: Make acpi_get_first_physical_node() public
    
    Following the fwnode of a device is currently a one-way road: We provide
    ACPI_COMPANION() to obtain the fwnode but there's no (public) method to
    do the reverse. Granted, there may be multiple physical_nodes, but often
    the first one in the list is sufficient.
    
    A handy function to obtain it was introduced with commit 3b95bd160547
    ("ACPI: introduce a function to find the first physical device"), but
    currently it's only available internally.
    
    We're about to add an EFI Device Path parser which needs this function.
    Consider the following device path: ACPI(PNP0A03,0)/PCI(28,2)/PCI(0,0)
    The PCI root is encoded as an ACPI device in the path, so the parser
    has to find the corresponding ACPI device, then find its physical node,
    find the PCI bridge in slot 1c (decimal 28), function 2 below it and
    finally find the PCI device in slot 0, function 0.
    
    To this end, make acpi_get_first_physical_node() public.
    
    Signed-off-by: Lukas Wunner <lukas@wunner.de>
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>

diff --git a/drivers/acpi/internal.h b/drivers/acpi/internal.h
index 940218ff0193..bd7c52dd883a 100644
--- a/drivers/acpi/internal.h
+++ b/drivers/acpi/internal.h
@@ -116,7 +116,6 @@ bool acpi_device_is_present(struct acpi_device *adev);
 bool acpi_device_is_battery(struct acpi_device *adev);
 bool acpi_device_is_first_physical_node(struct acpi_device *adev,
 					const struct device *dev);
-struct device *acpi_get_first_physical_node(struct acpi_device *adev);
 
 /* --------------------------------------------------------------------------
                      Device Matching and Notification

commit fe7bd58f5d25d5d655b1da4a084cc4ef6f085fee
Author: Rui Wang <rui.y.wang@intel.com>
Date:   Wed Aug 17 16:00:33 2016 +0800

    x86/ioapic: Change prototype of acpi_ioapic_add()
    
    Change the argument of acpi_ioapic_add() to a generic ACPI handle, and
    move its prototype from drivers/acpi/internal.h to include/linux/acpi.h
    so that it can be called from outside the pci_root driver.
    
    Signed-off-by: Rui Wang <rui.y.wang@intel.com>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: bhelgaas@google.com
    Cc: helgaas@kernel.org
    Cc: linux-acpi@vger.kernel.org
    Cc: linux-pci@vger.kernel.org
    Cc: rjw@rjwysocki.net
    Cc: tony.luck@intel.com
    Link: http://lkml.kernel.org/r/1471420837-31003-2-git-send-email-rui.y.wang@intel.com
    Signed-off-by: Ingo Molnar <mingo@kernel.org>

diff --git a/drivers/acpi/internal.h b/drivers/acpi/internal.h
index 940218ff0193..f26fc1d7cfea 100644
--- a/drivers/acpi/internal.h
+++ b/drivers/acpi/internal.h
@@ -40,10 +40,8 @@ int acpi_sysfs_init(void);
 void acpi_container_init(void);
 void acpi_memory_hotplug_init(void);
 #ifdef	CONFIG_ACPI_HOTPLUG_IOAPIC
-int acpi_ioapic_add(struct acpi_pci_root *root);
 int acpi_ioapic_remove(struct acpi_pci_root *root);
 #else
-static inline int acpi_ioapic_add(struct acpi_pci_root *root) { return 0; }
 static inline int acpi_ioapic_remove(struct acpi_pci_root *root) { return 0; }
 #endif
 #ifdef CONFIG_ACPI_DOCK

commit df45db6177f8dde380d44149cca46ad800a00575
Author: Lv Zheng <lv.zheng@intel.com>
Date:   Wed Aug 3 09:07:58 2016 +0800

    ACPI / EC: Add PM operations for suspend/resume noirq stage
    
    It is reported that on some platforms, resume speed is not fast. The cause
    is: in noirq stage, EC driver is working in polling mode, and each state
    machine advancement requires a context switch.
    
    The context switch is not necessary to the EC driver's polling mode. This
    patch implements PM hooks to automatically switch the driver to/from the
    busy polling mode to eliminate the overhead caused by the context switch.
    
    This finally contributes to the tuning result: acpi_pm_finish() execution
    time is improved from 192ms to 6ms.
    
    Signed-off-by: Lv Zheng <lv.zheng@intel.com>
    Reported-and-tested-by: Todd E Brandt <todd.e.brandt@linux.intel.com>
    [ rjw: Subject ]
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>

diff --git a/drivers/acpi/internal.h b/drivers/acpi/internal.h
index 940218ff0193..6996121ee003 100644
--- a/drivers/acpi/internal.h
+++ b/drivers/acpi/internal.h
@@ -174,6 +174,8 @@ struct acpi_ec {
 	struct work_struct work;
 	unsigned long timestamp;
 	unsigned long nr_pending_queries;
+	bool saved_busy_polling;
+	unsigned int saved_polling_guard;
 };
 
 extern struct acpi_ec *first_ec;

commit 68bdb6773289f8c9a36633f9f6525b127c093258
Author: Octavian Purdila <octavian.purdila@intel.com>
Date:   Fri Jul 8 19:13:09 2016 +0300

    ACPI: add support for ACPI reconfiguration notifiers
    
    Add support for ACPI reconfiguration notifiers to allow subsystems
    to react to changes in the ACPI tables that happen after the initial
    enumeration. This is similar with the way dynamic device tree
    notifications work.
    
    The reconfigure notifications supported for now are device add and
    device remove.
    
    Since ACPICA allows only one table notification handler, this patch
    makes the table notifier function generic and moves it out of the
    sysfs specific code.
    
    Signed-off-by: Octavian Purdila <octavian.purdila@intel.com>
    Reviewed-by: Mika Westerberg <mika.westerberg@linux.intel.com>
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>

diff --git a/drivers/acpi/internal.h b/drivers/acpi/internal.h
index 27cc7feabfe4..940218ff0193 100644
--- a/drivers/acpi/internal.h
+++ b/drivers/acpi/internal.h
@@ -87,6 +87,9 @@ bool acpi_queue_hotplug_work(struct work_struct *work);
 void acpi_device_hotplug(struct acpi_device *adev, u32 src);
 bool acpi_scan_is_offline(struct acpi_device *adev, bool uevent);
 
+acpi_status acpi_sysfs_table_handler(u32 event, void *table, void *context);
+void acpi_scan_table_handler(u32 event, void *table, void *context);
+
 /* --------------------------------------------------------------------------
                      Device Node Initialization / Removal
    -------------------------------------------------------------------------- */

commit bd6ac2abc9937eb7613aa194195fd98fe9312b38
Merge: af8c34ce6ae3 dcf15cbded65
Author: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
Date:   Thu Jun 9 23:48:54 2016 +0200

    Merge branch 'acpi-ec'
    
    * acpi-ec:
      ACPI / EC: Fix a boot EC regresion by restoring boot EC support for the DSDT EC

commit dcf15cbded656a12335bc4151f3f75f10080a375
Author: Lv Zheng <lv.zheng@intel.com>
Date:   Fri Jun 3 10:26:12 2016 +0800

    ACPI / EC: Fix a boot EC regresion by restoring boot EC support for the DSDT EC
    
    According to the Windows probing result, during the table loading, the EC
    device described in the ECDT should be used. And the ECDT EC is also
    effective during the period the namespace objects are initialized (we can
    see a separate process executing _STA/_INI on Windows before executing
    other device specific control methods, for example, EC._REG). During the
    device enumration, the EC device described in the DSDT should be used. But
    there are differences between Linux and Windows around the device probing
    order. Thus in Linux, we should enable the DSDT EC as early as possible
    before enumerating devices in order not to trigger issues related to the
    device enumeration order differences.
    
    This patch thus converts acpi_boot_ec_enable() into acpi_ec_dsdt_probe() to
    fix the gap. This also fixes a user reported regression triggered after we
    switched the "table loading"/"ECDT support" to be ACPI spec 2.0 compliant.
    
    Fixes: 59f0aa9480cf (ACPI 2.0 / ECDT: Remove early namespace reference from EC)
    Link: https://bugzilla.kernel.org/show_bug.cgi?id=119261
    Reported-and-tested-by: Gabriele Mazzotta <gabriele.mzt@gmail.com>
    Signed-off-by: Lv Zheng <lv.zheng@intel.com>
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>

diff --git a/drivers/acpi/internal.h b/drivers/acpi/internal.h
index 7c188472d9c2..b4733b56fed1 100644
--- a/drivers/acpi/internal.h
+++ b/drivers/acpi/internal.h
@@ -180,7 +180,7 @@ typedef int (*acpi_ec_query_func) (void *data);
 
 int acpi_ec_init(void);
 int acpi_ec_ecdt_probe(void);
-int acpi_boot_ec_enable(void);
+int acpi_ec_dsdt_probe(void);
 void acpi_ec_block_transactions(void);
 void acpi_ec_unblock_transactions(void);
 void acpi_ec_unblock_transactions_early(void);

commit efc499f9807bfc179c66b7c3524e30370c6fd1b1
Merge: a6becfbaba80 702b07fcc9b2 74216699ddcc e5f660ebef68
Author: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
Date:   Mon May 16 16:45:25 2016 +0200

    Merge branches 'acpi-numa', 'acpi-tables' and 'acpi-osi'
    
    * acpi-numa:
      ACPI / SRAT: fix SRAT parsing order with both LAPIC and X2APIC present
    
    * acpi-tables:
      ACPI / tables: Fix DSDT override mechanism
      ACPI / tables: Convert initrd table override to table upgrade mechanism
      ACPI / x86: Cleanup initrd related code
      ACPI / tables: Move table override mechanisms to tables.c
    
    * acpi-osi:
      ACPI / osi: Collect _OSI handling into one single file
      ACPI / osi: Cleanup coding style issues before creating a separate OSI source file
      ACPI / osi: Cleanup OSI handling code to use bool
      ACPI / osi: Fix default _OSI(Darwin) support
      ACPI / osi: Add acpi_osi=!! to allow reverting acpi_osi=!
      ACPI / osi: Cleanup _OSI("Linux") related code before introducing new support
      ACPI / osi: Fix an issue that acpi_osi=!* cannot disable ACPICA internal strings
    
    Conflicts:
            drivers/acpi/internal.h

commit e5f660ebef68e3ed1a988ad06ba23562153cee5c
Author: Lv Zheng <lv.zheng@intel.com>
Date:   Tue May 3 16:49:01 2016 +0800

    ACPI / osi: Collect _OSI handling into one single file
    
    _OSI handling code grows giant and it's time to move them into one file.
    
    This patch collects all _OSI handling code into one single file.
    So that we only have the following functions to be used externally:
    
     early_acpi_osi_init(): Used by DMI detections;
     acpi_osi_init(): Used to initialize OSI command line settings and install
                      Linux specific _OSI handler;
     acpi_osi_setup(): The API that should be used by the external quirks.
     acpi_osi_is_win8(): The API is used by the external drivers to determine
                         if BIOS supports Win8.
    
    CONFIG_DMI is not useful as stub dmi_check_system() can make everything
    stub because of strip.
    
    No functional changes.
    
    Tested-by: Lukas Wunner <lukas@wunner.de>
    Tested-by: Chen Yu <yu.c.chen@intel.com>
    Signed-off-by: Lv Zheng <lv.zheng@intel.com>
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>

diff --git a/drivers/acpi/internal.h b/drivers/acpi/internal.h
index 7c188472d9c2..a8780a2e1975 100644
--- a/drivers/acpi/internal.h
+++ b/drivers/acpi/internal.h
@@ -20,6 +20,8 @@
 
 #define PREFIX "ACPI: "
 
+int early_acpi_osi_init(void);
+int acpi_osi_init(void);
 void acpi_initrd_initialize_tables(void);
 acpi_status acpi_os_initialize1(void);
 void init_acpi_device_notify(void);

commit 5ae74f2cc2f150c1a5cee54cabbd71dd0661285a
Author: Lv Zheng <lv.zheng@intel.com>
Date:   Mon Apr 11 10:13:18 2016 +0800

    ACPI / tables: Move table override mechanisms to tables.c
    
    This patch moves acpi_os_table_override() and
    acpi_os_physical_table_override() to tables.c.
    
    Along with the mechanisms, acpi_initrd_initialize_tables() is also moved to
    tables.c to form a static function. The following functions are renamed
    according to this change:
     1. acpi_initrd_override() -> renamed to early_acpi_table_init(), which
        invokes acpi_table_initrd_init()
     2. acpi_os_physical_table_override() -> which invokes
        acpi_table_initrd_override()
     3. acpi_initialize_initrd_tables() -> renamed to acpi_table_initrd_scan()
    
    Signed-off-by: Lv Zheng <lv.zheng@intel.com>
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>

diff --git a/drivers/acpi/internal.h b/drivers/acpi/internal.h
index 7c188472d9c2..1b0e6fd6b280 100644
--- a/drivers/acpi/internal.h
+++ b/drivers/acpi/internal.h
@@ -20,7 +20,6 @@
 
 #define PREFIX "ACPI: "
 
-void acpi_initrd_initialize_tables(void);
 acpi_status acpi_os_initialize1(void);
 void init_acpi_device_notify(void);
 int acpi_scan_init(void);

commit 8fbd4ade93dc67f035914cd4030f1c58797d9e59
Merge: f55532a0c0b8 a21211672c9a
Author: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
Date:   Sat Apr 2 01:17:36 2016 +0200

    Merge branch 'acpi-processor'
    
    * acpi-processor:
      ACPI / processor: Request native thermal interrupt handling via _OSC

commit a21211672c9a1d730a39aa65d4a5b3414700adfb
Author: Srinivas Pandruvada <srinivas.pandruvada@linux.intel.com>
Date:   Wed Mar 23 21:07:39 2016 -0700

    ACPI / processor: Request native thermal interrupt handling via _OSC
    
    There are several reports of freeze on enabling HWP (Hardware PStates)
    feature on Skylake-based systems by the Intel P-states driver. The root
    cause is identified as the HWP interrupts causing BIOS code to freeze.
    
    HWP interrupts use the thermal LVT which can be handled by Linux
    natively, but on the affected Skylake-based systems SMM will respond
    to it by default.  This is a problem for several reasons:
     - On the affected systems the SMM thermal LVT handler is broken (it
       will crash when invoked) and a BIOS update is necessary to fix it.
     - With thermal interrupt handled in SMM we lose all of the reporting
       features of the arch/x86/kernel/cpu/mcheck/therm_throt driver.
     - Some thermal drivers like x86-package-temp depend on the thermal
       threshold interrupts signaled via the thermal LVT.
     - The HWP interrupts are useful for debugging and tuning
       performance (if the kernel can handle them).
    The native handling of thermal interrupts needs to be enabled
    because of that.
    
    This requires some way to tell SMM that the OS can handle thermal
    interrupts.  That can be done by using _OSC/_PDC in processor
    scope very early during ACPI initialization.
    
    The meaning of _OSC/_PDC bit 12 in processor scope is whether or
    not the OS supports native handling of interrupts for Collaborative
    Processor Performance Control (CPPC) notifications.  Since on
    HWP-capable systems CPPC is a firmware interface to HWP, setting
    this bit effectively tells the firmware that the OS will handle
    thermal interrupts natively going forward.
    
    For details on _OSC/_PDC refer to:
    http://www.intel.com/content/www/us/en/standards/processor-vendor-specific-acpi-specification.html
    
    To implement the _OSC/_PDC handshake as described, introduce a new
    function, acpi_early_processor_osc(), that walks the ACPI
    namespace looking for ACPI processor objects and invokes _OSC for
    them with bit 12 in the capabilities buffer set and terminates the
    namespace walk on the first success.
    
    Also modify intel_thermal_interrupt() to clear HWP status bits in
    the HWP_STATUS MSR to acknowledge HWP interrupts (which prevents
    them from firing continuously).
    
    Signed-off-by: Srinivas Pandruvada <srinivas.pandruvada@linux.intel.com>
    [ rjw: Subject & changelog, function rename ]
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>

diff --git a/drivers/acpi/internal.h b/drivers/acpi/internal.h
index 1e6833a5cd44..6f41c73f82bb 100644
--- a/drivers/acpi/internal.h
+++ b/drivers/acpi/internal.h
@@ -138,6 +138,12 @@ void acpi_early_processor_set_pdc(void);
 static inline void acpi_early_processor_set_pdc(void) {}
 #endif
 
+#ifdef CONFIG_X86
+void acpi_early_processor_osc(void);
+#else
+static inline void acpi_early_processor_osc(void) {}
+#endif
+
 /* --------------------------------------------------------------------------
                                   Embedded Controller
    -------------------------------------------------------------------------- */

commit caf5aa19f76cfefede07b70c669db58111db408d
Merge: 255a60fcfc34 6ce2e188a6ae c85cc817e5b6 3a03d126ece4
Author: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
Date:   Mon Mar 14 14:20:13 2016 +0100

    Merge branches 'acpi-scan', 'acpi-osl' and 'acpi-apei'
    
    * acpi-scan:
      ACPI / scan: AMBA bus probing support
      ACPI: introduce a function to find the first physical device
    
    * acpi-osl:
      ACPI / OSL: Add support to install tables via initrd
      ACPI / OSL: Clean up initrd table override code
    
    * acpi-apei:
      ACPI / APEI: ERST: Fixed leaked resources in erst_init
      ACPI / APEI: Fix leaked resources

commit c85cc817e5b6c45a78c3b34170dfeb6469b56d82
Author: Lv Zheng <lv.zheng@intel.com>
Date:   Wed Mar 2 14:16:25 2016 +0800

    ACPI / OSL: Add support to install tables via initrd
    
    This patch adds support to install tables from initrd.
    
    If a table in the initrd wasn't used by the override mechanism,
    the table would be installed after initializing all RSDT/XSDT
    tables.
    
    Link: https://lkml.org/lkml/2014/2/28/368
    Reported-by: Thomas Renninger <trenn@suse.de>
    Signed-off-by: Lv Zheng <lv.zheng@intel.com>
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>

diff --git a/drivers/acpi/internal.h b/drivers/acpi/internal.h
index 1e6833a5cd44..27c2cb90e8e4 100644
--- a/drivers/acpi/internal.h
+++ b/drivers/acpi/internal.h
@@ -20,6 +20,7 @@
 
 #define PREFIX "ACPI: "
 
+void acpi_initrd_initialize_tables(void);
 acpi_status acpi_os_initialize1(void);
 void init_acpi_device_notify(void);
 int acpi_scan_init(void);

commit 6ce2e188a6ae339340d9bbf5bb0b81db20454353
Author: Graeme Gregory <graeme.gregory@linaro.org>
Date:   Wed Jan 20 20:29:27 2016 +0600

    ACPI / scan: AMBA bus probing support
    
    On ARM64 some devices use the AMBA device and not the platform bus for
    probing so add support for this. Uses a dummy clock for apb_pclk as ACPI
    does not have a suitable clock representation and to keep the core
    AMBA bus code unchanged between probing methods.
    
    Acked-by: Russell King <rmk+kernel@arm.linux.org.uk>
    Signed-off-by: Graeme Gregory <graeme.gregory@linaro.org>
    Signed-off-by: Aleksey Makarov <aleksey.makarov@linaro.org>
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>

diff --git a/drivers/acpi/internal.h b/drivers/acpi/internal.h
index 8668891cb1fa..9860df04b7c2 100644
--- a/drivers/acpi/internal.h
+++ b/drivers/acpi/internal.h
@@ -29,6 +29,11 @@ void acpi_processor_init(void);
 void acpi_platform_init(void);
 void acpi_pnp_init(void);
 void acpi_int340x_thermal_init(void);
+#ifdef CONFIG_ARM_AMBA
+void acpi_amba_init(void);
+#else
+static inline void acpi_amba_init(void) {}
+#endif
 int acpi_sysfs_init(void);
 void acpi_container_init(void);
 void acpi_memory_hotplug_init(void);

commit 3b95bd160547f56a68aeb972c33ae9511e7a8380
Author: Aleksey Makarov <aleksey.makarov@linaro.org>
Date:   Tue Feb 16 15:52:38 2016 +0300

    ACPI: introduce a function to find the first physical device
    
    Factor out the code that finds the first physical device
    of a given ACPI device.  It is used in several places.
    
    Signed-off-by: Aleksey Makarov <aleksey.makarov@linaro.org>
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>

diff --git a/drivers/acpi/internal.h b/drivers/acpi/internal.h
index 1e6833a5cd44..8668891cb1fa 100644
--- a/drivers/acpi/internal.h
+++ b/drivers/acpi/internal.h
@@ -106,6 +106,7 @@ bool acpi_device_is_present(struct acpi_device *adev);
 bool acpi_device_is_battery(struct acpi_device *adev);
 bool acpi_device_is_first_physical_node(struct acpi_device *adev,
 					const struct device *dev);
+struct device *acpi_get_first_physical_node(struct acpi_device *adev);
 
 /* --------------------------------------------------------------------------
                      Device Matching and Notification

commit edc345d88462c78cd43d44e38efc9cadae4266f1
Author: Lukas Wunner <lukas@wunner.de>
Date:   Fri Jan 1 22:52:15 2016 +0100

    ACPI: Fix white space in a structure definition
    
    Add a missing space in the definition of struct acpi_device_bus_id.
    
    Signed-off-by: Lukas Wunner <lukas@wunner.de>
    [ rjw: Subject and changelog ]
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>

diff --git a/drivers/acpi/internal.h b/drivers/acpi/internal.h
index 60bda0d2cf9a..1e6833a5cd44 100644
--- a/drivers/acpi/internal.h
+++ b/drivers/acpi/internal.h
@@ -88,7 +88,7 @@ bool acpi_scan_is_offline(struct acpi_device *adev, bool uevent);
 
 extern struct list_head acpi_bus_id_list;
 
-struct acpi_device_bus_id{
+struct acpi_device_bus_id {
 	char bus_id[15];
 	unsigned int instance_no;
 	struct list_head node;

commit 2d12b6b381ba059d5f92798f5ea739672a2f5fcf
Author: Lukas Wunner <lukas@wunner.de>
Date:   Wed Nov 25 21:19:55 2015 +0100

    ACPI / utils: Add acpi_dev_present()
    
    There's an idiom in use by 7 Linux drivers to detect the presence of a
    particular ACPI HID by walking the namespace with acpi_get_devices().
    The callback passed to acpi_get_devices() is mostly identical across
    the drivers, leading to lots of duplicate code.
    
    Add acpi_dev_present(), the ACPI equivalent to pci_dev_present(),
    allowing us to deduplicate all that boilerplate in the drivers.
    
    Signed-off-by: Lukas Wunner <lukas@wunner.de>
    Reviewed-by: Hanjun Guo <hanjun.guo@linaro.org>
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>

diff --git a/drivers/acpi/internal.h b/drivers/acpi/internal.h
index 11d87bf67e73..60bda0d2cf9a 100644
--- a/drivers/acpi/internal.h
+++ b/drivers/acpi/internal.h
@@ -86,6 +86,14 @@ bool acpi_scan_is_offline(struct acpi_device *adev, bool uevent);
 #define ACPI_STA_DEFAULT (ACPI_STA_DEVICE_PRESENT | ACPI_STA_DEVICE_ENABLED | \
 			  ACPI_STA_DEVICE_UI | ACPI_STA_DEVICE_FUNCTIONING)
 
+extern struct list_head acpi_bus_id_list;
+
+struct acpi_device_bus_id{
+	char bus_id[15];
+	unsigned int instance_no;
+	struct list_head node;
+};
+
 int acpi_device_add(struct acpi_device *device,
 		    void (*release)(struct device *));
 void acpi_init_device_object(struct acpi_device *device, acpi_handle handle,

commit e880e87488d5bbf630dd716e6de8a53585614568
Merge: 118c216e16c5 c23fe83138ed
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Wed Nov 4 21:50:37 2015 -0800

    Merge tag 'driver-core-4.4-rc1' of git://git.kernel.org/pub/scm/linux/kernel/git/gregkh/driver-core
    
    Pull driver core updates from Greg KH:
     "Here's the "big" driver core updates for 4.4-rc1.  Primarily a bunch
      of debugfs updates, with a smattering of minor driver core fixes and
      updates as well.
    
      All have been in linux-next for a long time"
    
    * tag 'driver-core-4.4-rc1' of git://git.kernel.org/pub/scm/linux/kernel/git/gregkh/driver-core:
      debugfs: Add debugfs_create_ulong()
      of: to support binding numa node to specified device in devicetree
      debugfs: Add read-only/write-only bool file ops
      debugfs: Add read-only/write-only size_t file ops
      debugfs: Add read-only/write-only x64 file ops
      debugfs: Consolidate file mode checks in debugfs_create_*()
      Revert "mm: Check if section present during memory block (un)registering"
      driver-core: platform: Provide helpers for multi-driver modules
      mm: Check if section present during memory block (un)registering
      devres: fix a for loop bounds check
      CMA: fix CONFIG_CMA_SIZE_MBYTES overflow in 64bit
      base/platform: assert that dev_pm_domain callbacks are called unconditionally
      sysfs: correctly handle short reads on PREALLOC attrs.
      base: soc: siplify ida usage
      kobject: move EXPORT_SYMBOL() macros next to corresponding definitions
      kobject: explain what kobject's sd field is
      debugfs: document that debugfs_remove*() accepts NULL and error values
      debugfs: Pass bool pointer to debugfs_create_bool()
      ACPI / EC: Fix broken 64bit big-endian users of 'global_lock'

commit 621a5f7ad9cd1ce7933f1d302067cbd58354173c
Author: Viresh Kumar <viresh.kumar@linaro.org>
Date:   Sat Sep 26 15:04:07 2015 -0700

    debugfs: Pass bool pointer to debugfs_create_bool()
    
    Its a bit odd that debugfs_create_bool() takes 'u32 *' as an argument,
    when all it needs is a boolean pointer.
    
    It would be better to update this API to make it accept 'bool *'
    instead, as that will make it more consistent and often more convenient.
    Over that bool takes just a byte.
    
    That required updates to all user sites as well, in the same commit
    updating the API. regmap core was also using
    debugfs_{read|write}_file_bool(), directly and variable types were
    updated for that to be bool as well.
    
    Signed-off-by: Viresh Kumar <viresh.kumar@linaro.org>
    Acked-by: Mark Brown <broonie@kernel.org>
    Acked-by: Charles Keepax <ckeepax@opensource.wolfsonmicro.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/acpi/internal.h b/drivers/acpi/internal.h
index 9db196de003c..5a72e2b140fc 100644
--- a/drivers/acpi/internal.h
+++ b/drivers/acpi/internal.h
@@ -138,7 +138,7 @@ struct acpi_ec {
 	unsigned long gpe;
 	unsigned long command_addr;
 	unsigned long data_addr;
-	u32 global_lock;
+	bool global_lock;
 	unsigned long flags;
 	unsigned long reference_count;
 	struct mutex mutex;

commit 6e58f752a6502b43e039fd7df2c7c5cde8dde437
Author: Viresh Kumar <viresh.kumar@linaro.org>
Date:   Sat Sep 26 15:04:06 2015 -0700

    ACPI / EC: Fix broken 64bit big-endian users of 'global_lock'
    
    global_lock is defined as an unsigned long and accessing only its lower
    32 bits from sysfs is incorrect, as we need to consider other 32 bits
    for big endian 64-bit systems. There are no such platforms yet, but the
    code needs to be robust for such a case.
    
    Fix that by changing type of 'global_lock' to u32.
    
    Signed-off-by: Viresh Kumar <viresh.kumar@linaro.org>
    Acked-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/acpi/internal.h b/drivers/acpi/internal.h
index 9e426210c2a8..9db196de003c 100644
--- a/drivers/acpi/internal.h
+++ b/drivers/acpi/internal.h
@@ -138,7 +138,7 @@ struct acpi_ec {
 	unsigned long gpe;
 	unsigned long command_addr;
 	unsigned long data_addr;
-	unsigned long global_lock;
+	u32 global_lock;
 	unsigned long flags;
 	unsigned long reference_count;
 	struct mutex mutex;

commit f934c745079ea3a15e8619350faf681dad42cc91
Author: Rami Rosen <ramirose@gmail.com>
Date:   Fri Sep 11 17:49:22 2015 +0300

    ACPI: change acpi_sleep_proc_init() to return void
    
    This patch changes the type of the return value of the acpi_sleep_proc_init()
    method to be void, as this method never fails and its return value is never
    used.
    
    Signed-off-by: Rami Rosen <ramirose@gmail.com>\
    [ rjw : Fixed up the static inline stub ]
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>

diff --git a/drivers/acpi/internal.h b/drivers/acpi/internal.h
index e72c6a67201f..c31787bef2d3 100644
--- a/drivers/acpi/internal.h
+++ b/drivers/acpi/internal.h
@@ -179,13 +179,13 @@ static inline int acpi_sleep_init(void) { return -ENXIO; }
 #endif
 
 #ifdef CONFIG_ACPI_SLEEP
-int acpi_sleep_proc_init(void);
+void acpi_sleep_proc_init(void);
 int suspend_nvs_alloc(void);
 void suspend_nvs_free(void);
 int suspend_nvs_save(void);
 void suspend_nvs_restore(void);
 #else
-static inline int acpi_sleep_proc_init(void) { return 0; }
+static inline void acpi_sleep_proc_init(void) {}
 static inline int suspend_nvs_alloc(void) { return 0; }
 static inline void suspend_nvs_free(void) {}
 static inline int suspend_nvs_save(void) { return 0; }

commit c33cab60bc0e05ddf1ef1b2cba8d16dd010f600a
Author: Rami Rosen <ramirose@gmail.com>
Date:   Thu Sep 10 23:48:09 2015 +0300

    ACPI: change init_acpi_device_notify() to return void
    
    This patch changes the type of the return value of the init_acpi_device_notify()
    method to be void, as this method never fails and its return value is never
    used.
    
    Signed-off-by: Rami Rosen <ramirose@gmail.com>
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>

diff --git a/drivers/acpi/internal.h b/drivers/acpi/internal.h
index 9e426210c2a8..e72c6a67201f 100644
--- a/drivers/acpi/internal.h
+++ b/drivers/acpi/internal.h
@@ -21,7 +21,7 @@
 #define PREFIX "ACPI: "
 
 acpi_status acpi_os_initialize1(void);
-int init_acpi_device_notify(void);
+void init_acpi_device_notify(void);
 int acpi_scan_init(void);
 void acpi_pci_root_init(void);
 void acpi_pci_link_init(void);

commit ef5f5de069bd9081a7ddf6998269b58fc65e27ef
Merge: 73990fc810bf e91a398c31ce
Author: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
Date:   Tue Sep 1 03:38:43 2015 +0200

    Merge branch 'acpi-pm'
    
    * acpi-pm:
      ACPI / bus: Move duplicate code to a separate new function
      mfd: Add support for Intel Sunrisepoint LPSS devices
      dmaengine: add a driver for Intel integrated DMA 64-bit
      mfd: make mfd_remove_devices() iterate in reverse order
      driver core: implement device_for_each_child_reverse()
      klist: implement klist_prev()
      Driver core: wakeup the parent device before trying probe
      ACPI / PM: Attach ACPI power domain only once
      PM / QoS: Make it possible to expose device latency tolerance to userspace
      ACPI / PM: Update the copyright notice and description of power.c

commit 73990fc810bf84c5338d9596f8af8d70fe90ac72
Merge: 94f2bb9b599f 1dcc3d3362b0 b6fc6072b126 10742619ac63
Author: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
Date:   Tue Sep 1 03:38:22 2015 +0200

    Merge branches 'acpi-scan', 'acpi-processor' and 'acpi-assorted'
    
    * acpi-scan:
      ACPI / bus: Move ACPI bus type registration
      ACPI / scan: Move bus operations and notification routines to bus.c
      ACPI / scan: Move device matching code to bus.c
      ACPI / scan: Move sysfs-related device code to a separate file
    
    * acpi-processor:
      PCC: Disable compilation by default
      ACPI: Decouple ACPI idle and ACPI processor drivers
      ACPI: Split out ACPI PSS from ACPI Processor driver
      PCC: Initialize PCC Mailbox earlier at boot
      ACPI / processor: remove leftover __refdata annotations
    
    * acpi-assorted:
      ACPI: fix acpi_debugfs_init prototype
      ACPI: Remove FSF mailing addresses

commit 10742619ac63641bcce0a7c07f0dc7509201ed72
Author: Nicolas Iooss <nicolas.iooss_linux@m4x.org>
Date:   Sat Aug 1 21:32:17 2015 +0800

    ACPI: fix acpi_debugfs_init prototype
    
    acpi_debugfs_init function is declared with return type int in
    drivers/acpi/internal.h when CONFIG_DEBUG_FS is enabled, but its
    definition in drivers/acpi/debugfs.c has return type void. This is due
    to commit aecad432fd68 ("ACPI: Cleanup custom_method debug stuff"),
    which changed the return type from int to void without updating the
    declaration.
    
    Fix this inconsistency by updating acpi_debugfs_init prototype.  While
    at it, include internal.h in debugfs.c so that the compiler can check
    that the declaration and definition remain compatible.
    
    Signed-off-by: Nicolas Iooss <nicolas.iooss_linux@m4x.org>
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>

diff --git a/drivers/acpi/internal.h b/drivers/acpi/internal.h
index 8c71cb8335c0..daf0974d863c 100644
--- a/drivers/acpi/internal.h
+++ b/drivers/acpi/internal.h
@@ -67,7 +67,7 @@ void acpi_scan_hotplug_enabled(struct acpi_hotplug_profile *hotplug, bool val);
 
 #ifdef CONFIG_DEBUG_FS
 extern struct dentry *acpi_debugfs_dir;
-int acpi_debugfs_init(void);
+void acpi_debugfs_init(void);
 #else
 static inline void acpi_debugfs_init(void) { return; }
 #endif

commit 3431e490b50356b56084305a2e93b3a980802b22
Merge: 5af310a8ee70 1dcc3d3362b0
Author: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
Date:   Wed Jul 29 23:57:51 2015 +0200

    Merge branch 'acpi-scan' into acpi-pm
    
    Conflicts:
            drivers/acpi/scan.c
    
    The conflict is resolved by moving the just introduced
    acpi_device_is_first_physical_node() to bus.c and using
    the existing acpi_companion_match() from there.
    
    There will be an additional commit to combine the two.

commit 712e960f0ee9337f3473ba3de2bcfc7e87b7c5a4
Author: Mika Westerberg <mika.westerberg@linux.intel.com>
Date:   Mon Jul 27 18:03:57 2015 +0300

    ACPI / PM: Attach ACPI power domain only once
    
    Some devices, like MFD subdevices, share a single ACPI companion device so
    that they are able to access their resources and children. However,
    currently all these subdevices are attached to the ACPI power domain and
    this might cause that the power methods for the companion device get called
    more than once.
    
    In order to solve this we attach the ACPI power domain only to the first
    physical device that is bound to the ACPI companion device. In case of MFD
    devices, this is the parent MFD device itself.
    
    Acked-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Signed-off-by: Mika Westerberg <mika.westerberg@linux.intel.com>
    Signed-off-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    Signed-off-by: Lee Jones <lee.jones@linaro.org>

diff --git a/drivers/acpi/internal.h b/drivers/acpi/internal.h
index 4683a96932b9..f6aefe984941 100644
--- a/drivers/acpi/internal.h
+++ b/drivers/acpi/internal.h
@@ -97,6 +97,8 @@ void acpi_device_add_finalize(struct acpi_device *device);
 void acpi_free_pnp_ids(struct acpi_device_pnp *pnp);
 bool acpi_device_is_present(struct acpi_device *adev);
 bool acpi_device_is_battery(struct acpi_device *adev);
+bool acpi_device_is_first_physical_node(struct acpi_device *adev,
+					const struct device *dev);
 
 /* --------------------------------------------------------------------------
                                   Power Resource

commit c2efefb33abfb245395199137ece3c1e3df47f51
Author: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
Date:   Fri Jul 17 22:53:43 2015 +0200

    ACPI / scan: Move sysfs-related device code to a separate file
    
    To reduce the size of scan.c and improve the readability of it, move
    all code related to device sysfs, modalias creation etc. to a new
    file called device_sysfs.c.
    
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>

diff --git a/drivers/acpi/internal.h b/drivers/acpi/internal.h
index 4683a96932b9..c529454532dc 100644
--- a/drivers/acpi/internal.h
+++ b/drivers/acpi/internal.h
@@ -93,11 +93,20 @@ int acpi_device_add(struct acpi_device *device,
 		    void (*release)(struct device *));
 void acpi_init_device_object(struct acpi_device *device, acpi_handle handle,
 			     int type, unsigned long long sta);
+int acpi_device_setup_files(struct acpi_device *dev);
+void acpi_device_remove_files(struct acpi_device *dev);
 void acpi_device_add_finalize(struct acpi_device *device);
 void acpi_free_pnp_ids(struct acpi_device_pnp *pnp);
 bool acpi_device_is_present(struct acpi_device *adev);
 bool acpi_device_is_battery(struct acpi_device *adev);
 
+/* --------------------------------------------------------------------------
+                     Device Matching and Notification
+   -------------------------------------------------------------------------- */
+struct acpi_device *acpi_companion_match(const struct device *dev);
+int __acpi_device_uevent_modalias(struct acpi_device *adev,
+				  struct kobj_uevent_env *env);
+
 /* --------------------------------------------------------------------------
                                   Power Resource
    -------------------------------------------------------------------------- */

commit 4c62dbbce902cf2afa88cac89ec67c828160f431
Author: Jarkko Nikula <jarkko.nikula@linux.intel.com>
Date:   Fri Jun 26 11:27:41 2015 +0300

    ACPI: Remove FSF mailing addresses
    
    There is no need to carry potentially outdated Free Software Foundation
    mailing address in file headers since the COPYING file includes it.
    
    Signed-off-by: Jarkko Nikula <jarkko.nikula@linux.intel.com>
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>

diff --git a/drivers/acpi/internal.h b/drivers/acpi/internal.h
index 4683a96932b9..8c71cb8335c0 100644
--- a/drivers/acpi/internal.h
+++ b/drivers/acpi/internal.h
@@ -13,9 +13,6 @@
  * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
  * more details.
  *
- * You should have received a copy of the GNU General Public License along with
- * this program; if not, write to the Free Software Foundation, Inc.,
- * 51 Franklin St - Fifth Floor, Boston, MA 02110-1301 USA.
  */
 
 #ifndef _ACPI_INTERNAL_H_

commit 9bdc771f2c29a11920f477fba05a58e23ee42554
Merge: 7df9ab845ce5 ea7d521569a7
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Thu Jul 2 17:11:28 2015 -0700

    Merge tag 'acpica-4.2-rc1' of git://git.kernel.org/pub/scm/linux/kernel/git/rafael/linux-pm
    
    Pull ACPICA updates from Rafael Wysocki:
     "Additional ACPICA material for v4.2-rc1
    
      This will update the ACPICA code in the kernel to upstream revision
      20150619 (a bug-fix release mostly including stable-candidate fixes)
      and restore an earlier ACPICA commit that had to be reverted due to a
      regression introduced by it (the regression is addressed by
      blacklisting the only known system affected by it to date).
    
      The only new feature added by this update is the support for
      overriding objects in the ACPI namespace and a new ACPI table that can
      be used for that called the Override System Definition Table (OSDT).
      That should allow us to "patch" the ACPI namespace built from
      incomplete or incorrect ACPI System Definition tables (DSDT, SSDT)
      during system startup without the need to provide replacements for all
      of those tables in the future.
    
      Specifics:
    
       - Fix system resume problems related to 32-bit and 64-bit versions of
         the Firmware ACPI Control Structure (FACS) in the firmare (Lv
         Zheng)
    
       - Fix double initialization of the FACS (Lv Zheng)
    
       - Add _CLS object processing code to ACPICA (Suravee Suthikulpanit)
    
       - Add support for the (currently missing) new GIC version field in
         the Multiple APIC Description Table (MADT) (Hanjun Guo)
    
       - Add support for overriding objects in the ACPI namespace to ACPICA
         and OSDT support (Lv Zheng, Bob Moore, Zhang Rui)
    
       - Updates related to the TCPA and TPM2 ACPI tables (Bob Moore)
    
       - Restore the commit modifying _REV to always return "2" (as required
         by ACPI 6) and add a blacklisting mechanism for systems that may be
         affected by that change (Rafael J Wysocki)
    
       - Assorted fixes and cleanups (Bob Moore, Lv Zheng, Sascha Wildner)"
    
    * tag 'acpica-4.2-rc1' of git://git.kernel.org/pub/scm/linux/kernel/git/rafael/linux-pm: (28 commits)
      Revert 'Revert "ACPICA: Permanently set _REV to the value '2'."'
      ACPI / init: Make it possible to override _REV
      ACPICA: Update version to 20150619
      ACPICA: Comment update, no functional change
      ACPICA: Update TPM2 ACPI table
      ACPICA: Update definitions for the TCPA and TPM2 ACPI tables
      ACPICA: Split C library prototypes to new header
      ACPICA: De-macroize calls to standard C library functions
      ACPI / acpidump: Update acpidump manual
      ACPICA: acpidump: Convert the default behavior to dump from /sys/firmware/acpi/tables
      ACPICA: acpidump: Allow customized tables to be dumped without accessing /dev/mem
      ACPICA: Cleanup output for the ASL Debug object
      ACPICA: Update for acpi_install_table memory types
      ACPICA: Namespace: Change namespace override to avoid node deletion
      ACPICA: Namespace: Add support of OSDT table
      ACPICA: Namespace: Add support to allow overriding objects
      ACPICA: ACPI 6.0: Add values for MADT GIC version field
      ACPICA: Utilities: Add _CLS processing
      ACPICA: Add dragon_fly support to unix file mapping file
      ACPICA: EFI: Add EFI interface definitions to eliminate dependency of GNU EFI
      ...

commit 18d78b64fddc11eb336f01e46ad3303a3f55d039
Author: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
Date:   Fri Jul 3 01:06:00 2015 +0200

    ACPI / init: Make it possible to override _REV
    
    The platform firmware on some systems expects Linux to return "5" as
    the supported ACPI revision which makes it expose system configuration
    information in a special way.
    
    For example, based on what ACPI exports as the supported revision,
    Dell XPS 13 (2015) configures its audio device to either work in HDA
    mode or in I2S mode, where the former is supposed to be used on Linux
    until the latter is fully supported (in the kernel as well as in user
    space).
    
    Since ACPI 6 mandates that _REV should return "2" if ACPI 2 or later
    is supported by the OS, a subsequent change will make that happen, so
    make it possible to override that on systems where "5" is expected to
    be returned for Linux to work correctly one them (such as the Dell
    machine mentioned above).
    
    Original-by: Dominik Brodowski <linux@dominikbrodowski.net>
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>

diff --git a/drivers/acpi/internal.h b/drivers/acpi/internal.h
index ba4a61e964be..42f304288829 100644
--- a/drivers/acpi/internal.h
+++ b/drivers/acpi/internal.h
@@ -58,6 +58,7 @@ void acpi_cmos_rtc_init(void);
 #else
 static inline void acpi_cmos_rtc_init(void) {}
 #endif
+int acpi_rev_override_setup(char *str);
 
 extern bool acpi_force_hot_remove;
 

commit 4def8a360fc6119e09916708cca0977a1495ccf4
Merge: 763d949581ed e7d024c00a4a
Author: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
Date:   Fri Jun 19 01:17:26 2015 +0200

    Merge branch 'acpi-video'
    
    * acpi-video: (38 commits)
      ACPI / video: Make acpi_video_unregister_backlight() private
      acpi-video-detect: Remove old API
      toshiba-acpi: Port to new backlight interface selection API
      thinkpad-acpi: Port to new backlight interface selection API
      sony-laptop: Port to new backlight interface selection API
      samsung-laptop: Port to new backlight interface selection API
      msi-wmi: Port to new backlight interface selection API
      msi-laptop: Port to new backlight interface selection API
      intel-oaktrail: Port to new backlight interface selection API
      ideapad-laptop: Port to new backlight interface selection API
      fujitsu-laptop: Port to new backlight interface selection API
      eeepc-laptop: Port to new backlight interface selection API
      dell-wmi: Port to new backlight interface selection API
      dell-laptop: Port to new backlight interface selection API
      compal-laptop: Port to new backlight interface selection API
      asus-wmi: Port to new backlight interface selection API
      asus-laptop: Port to new backlight interface selection API
      apple-gmux: Port to new backlight interface selection API
      acer-wmi: Port to new backlight interface selection API
      ACPI / video: Fix acpi_video _register vs _unregister_backlight race
      ...

commit feabe392ed8d15896e3a0900ffc75810fe0c0b65
Merge: 4f1fd900c2bd 66db383439b5
Author: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
Date:   Fri Jun 19 01:16:45 2015 +0200

    Merge branch 'acpi-ec'
    
    * acpi-ec:
      ACPI / EC: Fix a code coverity issue when QR_EC transactions are failed.
      ACPI / EC: Fix EC_FLAGS_QUERY_HANDSHAKE platforms using new event clearing timing.
      ACPI / EC: Add event clearing variation support.
      ACPI / EC: Convert event handling work queue into loop style.
      ACPI / EC: Cleanup transaction state transition.
      ACPI / EC: Remove non-root-caused busy polling quirks.
      ACPI / EC: Add module params for polling modes.
      ACPI / EC: Fix and clean up register access guarding logics.
      ACPI / EC: Remove irqs_disabled() check.
      ACPI / EC: Remove storming threashold enlarging quirk.
      ACPI / EC: Update acpi_ec_is_gpe_raised() with new GPE status flag.

commit a87878bafa1f82c20eddaf2d23780b194c35ccf5
Author: Hans de Goede <hdegoede@redhat.com>
Date:   Tue Jun 16 16:27:46 2015 +0200

    acpi-video-detect: Move acpi_osi_is_win8 to osl.c
    
    acpi_osi_is_win8 needs access to acpi_gbl_osi_data which is not exported,
    so move it to osl.c. Alternatively we could export acpi_gbl_osi_data but
    that seems undesirable.
    
    This allows video_detect.c to be build as a module, besides that
    acpi_osi_is_win8() is something which does not really belong in
    video_detect.c in the first place.
    
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Acked-by: Darren Hart <dvhart@linux.intel.com>
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>

diff --git a/drivers/acpi/internal.h b/drivers/acpi/internal.h
index d93628c65661..a637497217f0 100644
--- a/drivers/acpi/internal.h
+++ b/drivers/acpi/internal.h
@@ -181,13 +181,6 @@ static inline int suspend_nvs_save(void) { return 0; }
 static inline void suspend_nvs_restore(void) {}
 #endif
 
-/*--------------------------------------------------------------------------
-					Video
-  -------------------------------------------------------------------------- */
-#if defined(CONFIG_ACPI_VIDEO) || defined(CONFIG_ACPI_VIDEO_MODULE)
-bool acpi_osi_is_win8(void);
-#endif
-
 /*--------------------------------------------------------------------------
 				Device properties
   -------------------------------------------------------------------------- */

commit 9d8993be2d9149bc8b3132dad030ff5960f5abcc
Author: Lv Zheng <lv.zheng@intel.com>
Date:   Thu Jun 11 13:21:32 2015 +0800

    ACPI / EC: Convert event handling work queue into loop style.
    
    During the period that a work queue is scheduled (queued up for run) but
    hasn't been run, second schedule_work() could fail. This may not lead to
    the loss of queries because QR_EC is always ensured to be submitted after
    the work queue has been in the running state.
    
    The event handling work queue can be changed into the loop style to allow
    us to control the code in a more flexible way:
    1. Makes it possible to add event=0x00 termination condition in the loop.
    2. Increases the thoughput of the QR_EC transactions as the 2nd+ QR_EC
       transactions may be handled in the same work item used for the 1st QR_EC
       transaction, thus the delay caused by the 2nd+ work item scheduling can
       be eliminated.
    
    Except the logging message changes and the throughput improvement, this
    patch is just a funcitonal no-op.
    
    Signed-off-by: Lv Zheng <lv.zheng@intel.com>
    Tested-by: Gabriele Mazzotta <gabriele.mzt@gmail.com>
    Tested-by: Tigran Gabrielyan <tigrangab@gmail.com>
    Tested-by: Adrien D <ghbdtn@openmailbox.org>
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>

diff --git a/drivers/acpi/internal.h b/drivers/acpi/internal.h
index 61cb50674359..b09756abc6e8 100644
--- a/drivers/acpi/internal.h
+++ b/drivers/acpi/internal.h
@@ -139,6 +139,7 @@ struct acpi_ec {
 	spinlock_t lock;
 	struct work_struct work;
 	unsigned long timestamp;
+	unsigned long nr_pending_queries;
 };
 
 extern struct acpi_ec *first_ec;

commit ee89209402e0b9a733169901063afdf0ae7909db
Author: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
Date:   Fri May 22 04:24:34 2015 +0200

    ACPI / property: Define a symbol for PRP0001
    
    Use a #defined symbol ACPI_DT_NAMESPACE_HID instead of the PRP0001
    string.
    
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Acked-by: Mika Westerberg <mika.westerberg@linux.intel.com>
    Reviewed-by: Hanjun Guo <hanjun.guo@linaro.org>

diff --git a/drivers/acpi/internal.h b/drivers/acpi/internal.h
index ba4a61e964be..d93628c65661 100644
--- a/drivers/acpi/internal.h
+++ b/drivers/acpi/internal.h
@@ -191,6 +191,8 @@ bool acpi_osi_is_win8(void);
 /*--------------------------------------------------------------------------
 				Device properties
   -------------------------------------------------------------------------- */
+#define ACPI_DT_NAMESPACE_HID	"PRP0001"
+
 void acpi_init_properties(struct acpi_device *adev);
 void acpi_free_properties(struct acpi_device *adev);
 

commit d8d031a605bff183b76611e0d18e2ca7021fb99f
Author: Lv Zheng <lv.zheng@intel.com>
Date:   Fri May 15 14:16:42 2015 +0800

    ACPI / EC: Fix and clean up register access guarding logics.
    
    In the polling mode, EC driver shouldn't access the EC registers too
    frequently. Though this statement is concluded from the non-root caused
    bugs (see links below), we've maintained the register access guarding
    logics in the current EC driver. The guarding logics can be found here and
    there, makes it hard to root cause real timing issues. This patch collects
    the guarding logics into one single function so that all hidden logics
    related to this can be seen clearly.
    
    The current guarding related code also has several issues:
    1. Per-transaction timestamp prevents inter-transaction guarding from being
       implemented in the same place. We have an inter-transaction udelay() in
       acpi_ec_transaction_unblocked(), this logic can be merged into ec_poll()
       if we can use per-device timestamp. This patch completes such merge to
       form a new ec_guard() function and collects all guarding related hidden
       logics in it.
       One hidden logic is: there is no inter-transaction guarding performed
       for non MSI quirk (wait polling mode), this patch skips
       inter-transaction guarding before wait_event_timeout() for the wait
       polling mode to reveal the hidden logic.
       The other hidden logic is: there is msleep() inter-transaction guarding
       performed when the GPE storming is observed. As after merging this
       commit:
         Commit: e1d4d90fc0313d3d58cbd7912c90f8ef24df45ff
         Subject: ACPI / EC: Refine command storm prevention support
       EC_FLAGS_COMMAND_STORM is ensured to be cleared after invoking
       acpi_ec_transaction_unlocked(), the msleep() guard logic will never
       happen now. Since no one complains such change, this logic is likely
       added during the old times where the EC race issues are not fixed and
       the bugs are false root-caused to the timing issue. This patch simply
       removes the out-dated logic. We can restore it by stop skipping
       inter-transaction guarding for wait polling mode.
       Two different delay values are defined for msleep() and udelay() while
       they are merged in this patch to 550us.
    2. time_after() causes additional delay in the polling mode (can only be
       observed in noirq suspend/resume processes where polling mode is always
       used) before advance_transaction() is invoked ("wait polling" log is
       added before wait_event_timeout()). We can see 2 wait_event_timeout()
       invocations. This is because time_after() ensures a ">" validation while
       we only need a ">=" validation here:
       [   86.739909] ACPI: Waking up from system sleep state S3
       [   86.742857] ACPI : EC: 2: Increase command
       [   86.742859] ACPI : EC: ***** Command(RD_EC) started *****
       [   86.742861] ACPI : EC: ===== TASK (0) =====
       [   86.742871] ACPI : EC: EC_SC(R) = 0x20 SCI_EVT=1 BURST=0 CMD=0 IBF=0 OBF=0
       [   86.742873] ACPI : EC: EC_SC(W) = 0x80
       [   86.742876] ACPI : EC: ***** Event started *****
       [   86.742880] ACPI : EC: ~~~~~ wait polling ~~~~~
       [   86.743972] ACPI : EC: ~~~~~ wait polling ~~~~~
       [   86.747966] ACPI : EC: ===== TASK (0) =====
       [   86.747977] ACPI : EC: EC_SC(R) = 0x20 SCI_EVT=1 BURST=0 CMD=0 IBF=0 OBF=0
       [   86.747978] ACPI : EC: EC_DATA(W) = 0x06
       [   86.747981] ACPI : EC: ~~~~~ wait polling ~~~~~
       [   86.751971] ACPI : EC: ~~~~~ wait polling ~~~~~
       [   86.755969] ACPI : EC: ===== TASK (0) =====
       [   86.755991] ACPI : EC: EC_SC(R) = 0x21 SCI_EVT=1 BURST=0 CMD=0 IBF=0 OBF=1
       [   86.755993] ACPI : EC: EC_DATA(R) = 0x03
       [   86.755994] ACPI : EC: ~~~~~ wait polling ~~~~~
       [   86.755995] ACPI : EC: ***** Command(RD_EC) stopped *****
       [   86.755996] ACPI : EC: 1: Decrease command
       This patch corrects this by using time_before() instead in ec_guard():
       [   54.283146] ACPI: Waking up from system sleep state S3
       [   54.285414] ACPI : EC: 2: Increase command
       [   54.285415] ACPI : EC: ***** Command(RD_EC) started *****
       [   54.285416] ACPI : EC: ~~~~~ wait polling ~~~~~
       [   54.285417] ACPI : EC: ===== TASK (0) =====
       [   54.285424] ACPI : EC: EC_SC(R) = 0x20 SCI_EVT=1 BURST=0 CMD=0 IBF=0 OBF=0
       [   54.285425] ACPI : EC: EC_SC(W) = 0x80
       [   54.285427] ACPI : EC: ***** Event started *****
       [   54.285429] ACPI : EC: ~~~~~ wait polling ~~~~~
       [   54.287209] ACPI : EC: ===== TASK (0) =====
       [   54.287218] ACPI : EC: EC_SC(R) = 0x20 SCI_EVT=1 BURST=0 CMD=0 IBF=0 OBF=0
       [   54.287219] ACPI : EC: EC_DATA(W) = 0x06
       [   54.287222] ACPI : EC: ~~~~~ wait polling ~~~~~
       [   54.291190] ACPI : EC: ===== TASK (0) =====
       [   54.291210] ACPI : EC: EC_SC(R) = 0x21 SCI_EVT=1 BURST=0 CMD=0 IBF=0 OBF=1
       [   54.291213] ACPI : EC: EC_DATA(R) = 0x03
       [   54.291214] ACPI : EC: ~~~~~ wait polling ~~~~~
       [   54.291215] ACPI : EC: ***** Command(RD_EC) stopped *****
       [   54.291216] ACPI : EC: 1: Decrease command
    
    After cleaning up all guarding logics, we have one single function
    ec_guard() collecting all old, non-root-caused, hidden logics. Then we can
    easily tune the logics in one place to respond to the bug reports.
    
    Except the time_before() change, all other changes do not change the
    behavior of the EC driver.
    
    Link: https://bugzilla.kernel.org/show_bug.cgi?id=12011
    Link: https://bugzilla.kernel.org/show_bug.cgi?id=20242
    Link: https://bugzilla.kernel.org/show_bug.cgi?id=77431
    Signed-off-by: Lv Zheng <lv.zheng@intel.com>
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>

diff --git a/drivers/acpi/internal.h b/drivers/acpi/internal.h
index ba4a61e964be..61cb50674359 100644
--- a/drivers/acpi/internal.h
+++ b/drivers/acpi/internal.h
@@ -138,6 +138,7 @@ struct acpi_ec {
 	struct transaction *curr;
 	spinlock_t lock;
 	struct work_struct work;
+	unsigned long timestamp;
 };
 
 extern struct acpi_ec *first_ec;

commit 6e0a0ea12962a2175a9f47621f9fe7a4c866cb12
Author: Graeme Gregory <graeme.gregory@linaro.org>
Date:   Tue Mar 24 14:02:39 2015 +0000

    ACPI / sleep: Introduce CONFIG_ACPI_SYSTEM_POWER_STATES_SUPPORT
    
    ACPI 5.1 does not currently support S states for ARM64 hardware but
    ACPI code will call acpi_target_system_state() and acpi_sleep_init()
    for device power management, so introduce
    CONFIG_ACPI_SYSTEM_POWER_STATES_SUPPORT and select it for x86 and
    ia64 only to make sleep functions available, and also introduce stub
    function to allow other drivers to function until S states are defined
    for ARM64.
    
    It will be no functional change for x86 and IA64.
    
    Suggested-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Acked-by: Lorenzo Pieralisi <lorenzo.pieralisi@arm.com>
    Acked-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Signed-off-by: Graeme Gregory <graeme.gregory@linaro.org>
    Signed-off-by: Tomasz Nowicki <tomasz.nowicki@linaro.org>
    Signed-off-by: Hanjun Guo <hanjun.guo@linaro.org>
    Signed-off-by: Will Deacon <will.deacon@arm.com>

diff --git a/drivers/acpi/internal.h b/drivers/acpi/internal.h
index 56b321aa2b1c..ba4a61e964be 100644
--- a/drivers/acpi/internal.h
+++ b/drivers/acpi/internal.h
@@ -161,7 +161,11 @@ void acpi_ec_remove_query_handler(struct acpi_ec *ec, u8 query_bit);
 /*--------------------------------------------------------------------------
                                   Suspend/Resume
   -------------------------------------------------------------------------- */
+#ifdef CONFIG_ACPI_SYSTEM_POWER_STATES_SUPPORT
 extern int acpi_sleep_init(void);
+#else
+static inline int acpi_sleep_init(void) { return -ENXIO; }
+#endif
 
 #ifdef CONFIG_ACPI_SLEEP
 int acpi_sleep_proc_init(void);

commit 8fbcf5ecb336eb6da560f08d60e95b51d318795c
Merge: d23209680291 5c493df25a0d
Author: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
Date:   Tue Feb 10 16:05:16 2015 +0100

    Merge branch 'acpi-resources'
    
    * acpi-resources: (23 commits)
      Merge branch 'pci/host-generic' of git://git.kernel.org/pub/scm/linux/kernel/git/helgaas/pci into acpi-resources
      x86/irq, ACPI: Implement ACPI driver to support IOAPIC hotplug
      ACPI: Add interfaces to parse IOAPIC ID for IOAPIC hotplug
      x86/PCI: Refine the way to release PCI IRQ resources
      x86/PCI/ACPI: Use common ACPI resource interfaces to simplify implementation
      x86/PCI: Fix the range check for IO resources
      PCI: Use common resource list management code instead of private implementation
      resources: Move struct resource_list_entry from ACPI into resource core
      ACPI: Introduce helper function acpi_dev_filter_resource_type()
      ACPI: Add field offset to struct resource_list_entry
      ACPI: Translate resource into master side address for bridge window resources
      ACPI: Return translation offset when parsing ACPI address space resources
      ACPI: Enforce stricter checks for address space descriptors
      ACPI: Set flag IORESOURCE_UNSET for unassigned resources
      ACPI: Normalize return value of resource parser functions
      ACPI: Fix a bug in parsing ACPI Memory24 resource
      ACPI: Add prefetch decoding to the address space parser
      ACPI: Move the window flag logic to the combined parser
      ACPI: Unify the parsing of address_space and ext_address_space
      ACPI: Let the parser return false for disabled resources
      ...

commit 99e4d89afc75d7bec31420c5aa2fba53e0411f95
Merge: 716bc4132aa0 e77a16355a29 92082a8886f3
Author: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
Date:   Tue Feb 10 16:04:01 2015 +0100

    Merge branches 'acpi-video' and 'acpi-soc'
    
    * acpi-video:
      ACPI / video: Add disable_native_backlight quirk for Samsung 510R
      ACPI / video: Add disable_native_backlight quirk for Samsung 730U3E/740U3E
    
    * acpi-soc:
      ACPI: add AMD ACPI2Platform device support for x86 system
      ACPI / LPSS: Remove non-existing clock control from Intel Lynxpoint I2C
      ACPI / LPSS: check the result of ioremap()

commit 9887d22add48f24ca3a7605c89b0a21ed337f185
Author: Lv Zheng <lv.zheng@intel.com>
Date:   Fri Feb 6 08:57:59 2015 +0800

    ACPI / EC: Add command flushing support.
    
    This patch implements the EC command flushing support.
    
    During the grace period indicated by EC_FLAGS_STARTED and EC_FLAGS_STOPPED,
    all submitted EC command transactions can be completed and new submissions
    are prevented before suspending so that the EC hardware can be ensured to
    be in the idle state when the system is resumed.
    
    There is a good indicator for flush support:
    All acpi_ec_submit_request() is invoked after checking driver state with
    acpi_ec_started() except the first one. This means all code paths can be
    flushed as fast as possible by discarding the requests occurred after the
    flush operation. The reference increased for such kind of code path is
    wrapped by acpi_ec_submit_flushable_request().
    
    Signed-off-by: Lv Zheng <lv.zheng@intel.com>
    Tested-by: Ortwin Glück <odi@odi.ch>
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>

diff --git a/drivers/acpi/internal.h b/drivers/acpi/internal.h
index dc420787ffcd..7dc69d82f658 100644
--- a/drivers/acpi/internal.h
+++ b/drivers/acpi/internal.h
@@ -122,6 +122,7 @@ struct acpi_ec {
 	unsigned long data_addr;
 	unsigned long global_lock;
 	unsigned long flags;
+	unsigned long reference_count;
 	struct mutex mutex;
 	wait_queue_head_t wait;
 	struct list_head list;

commit 92082a8886f30a1c492a31ac4b5a4966bb64b1a6
Author: Ken Xue <Ken.Xue@amd.com>
Date:   Fri Feb 6 08:27:51 2015 +0800

    ACPI: add AMD ACPI2Platform device support for x86 system
    
    This new feature is to interpret AMD specific ACPI device to
    platform device such as I2C, UART, GPIO found on AMD CZ and
    later chipsets. It based on example intel LPSS. Now, it can
    support AMD I2C, UART and GPIO.
    
    Signed-off-by: Ken Xue <Ken.Xue@amd.com>
    Acked-by: Mika Westerberg <mika.westerberg@linux.intel.com>
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>

diff --git a/drivers/acpi/internal.h b/drivers/acpi/internal.h
index 163e82f536fa..c24ae9d7fdcb 100644
--- a/drivers/acpi/internal.h
+++ b/drivers/acpi/internal.h
@@ -68,6 +68,8 @@ static inline void acpi_debugfs_init(void) { return; }
 #endif
 void acpi_lpss_init(void);
 
+void acpi_apd_init(void);
+
 acpi_status acpi_hotplug_schedule(struct acpi_device *adev, u32 src);
 bool acpi_queue_hotplug_work(struct work_struct *work);
 void acpi_device_hotplug(struct acpi_device *adev, u32 src);

commit c183619b63ec934110e3a173a34b414e26869f96
Author: Jiang Liu <jiang.liu@linux.intel.com>
Date:   Thu Feb 5 13:44:49 2015 +0800

    x86/irq, ACPI: Implement ACPI driver to support IOAPIC hotplug
    
    Enable support of IOAPIC hotplug by:
    1) reintroducing ACPI based IOAPIC driver
    2) enhance pci_root driver to hook hotplug events
    
    The ACPI IOAPIC driver is always enabled if all of ACPI, PCI and IOAPIC
    are enabled.
    
    Signed-off-by: Jiang Liu <jiang.liu@linux.intel.com>
    Cc: Konrad Rzeszutek Wilk <konrad.wilk@oracle.com>
    Cc: Tony Luck <tony.luck@intel.com>
    Cc: Joerg Roedel <joro@8bytes.org>
    Cc: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Cc: Benjamin Herrenschmidt <benh@kernel.crashing.org>
    Cc: Rafael J. Wysocki <rjw@rjwysocki.net>
    Cc: Bjorn Helgaas <bhelgaas@google.com>
    Cc: Randy Dunlap <rdunlap@infradead.org>
    Cc: Yinghai Lu <yinghai@kernel.org>
    Cc: Borislav Petkov <bp@alien8.de>
    Cc: Len Brown <lenb@kernel.org>
    Link: http://lkml.kernel.org/r/1414387308-27148-19-git-send-email-jiang.liu@linux.intel.com
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>

diff --git a/drivers/acpi/internal.h b/drivers/acpi/internal.h
index 163e82f536fa..caca2805536d 100644
--- a/drivers/acpi/internal.h
+++ b/drivers/acpi/internal.h
@@ -35,6 +35,13 @@ void acpi_int340x_thermal_init(void);
 int acpi_sysfs_init(void);
 void acpi_container_init(void);
 void acpi_memory_hotplug_init(void);
+#ifdef	CONFIG_ACPI_HOTPLUG_IOAPIC
+int acpi_ioapic_add(struct acpi_pci_root *root);
+int acpi_ioapic_remove(struct acpi_pci_root *root);
+#else
+static inline int acpi_ioapic_add(struct acpi_pci_root *root) { return 0; }
+static inline int acpi_ioapic_remove(struct acpi_pci_root *root) { return 0; }
+#endif
 #ifdef CONFIG_ACPI_DOCK
 void register_dock_dependent_device(struct acpi_device *adev,
 				    acpi_handle dshandle);

commit 74443bbed72ab22ee005ecb6ecdc657a8018e1db
Author: Lv Zheng <lv.zheng@intel.com>
Date:   Wed Jan 14 19:28:47 2015 +0800

    ACPI / EC: Fix issues related to the SCI_EVT handling
    
    This patch fixes 2 issues related to the draining behavior. But it doesn't
    implement the draining support, it only cleans up code so that further
    draining support is possible.
    
    The draining behavior is expected by some platforms (for example, Samsung)
    where SCI_EVT is set only once for a set of events and might be cleared for
    the very first QR_EC command issued after SCI_EVT is set. EC firmware on
    such platforms will return 0x00 to indicate "no outstanding event". Thus
    after seeing an SCI_EVT indication, EC driver need to fetch events until
    0x00 returned (see acpi_ec_clear()).
    
    Issue 1 - acpi_ec_submit_query():
    It's reported on Samsung laptops that SCI_EVT isn't checked when the
    transactions are advanced in ec_poll(), which leads to SCI_EVT triggering
    source lost:
     If no EC GPE IRQs are arrived after that, EC driver cannot detect this
     event and handle it.
    See comment 244/247 for kernel bugzilla 44161.
    This patch fixes this issue by moving SCI_EVT checks into
    advance_transaction(). So that SCI_EVT is checked each time we are going to
    handle the EC firmware indications. And this check will happen for both IRQ
    context and task context.
    Since after doing that, SCI_EVT is also checked after completing a
    transaction, ec_check_sci() and ec_check_sci_sync() can be removed.
    
    Issue 2 - acpi_ec_complete_query():
    We expect to clear EC_FLAGS_QUERY_PENDING to allow queuing another draining
    QR_EC after writing a QR_EC command and before reading the event. After
    reading the event, SCI_EVT might be cleared by the firmware, thus it may
    not be possible to queue such a draining QR_EC at that time.
    But putting the EC_FLAGS_QUERY_PENDING clearing code after
    start_transaction() is wrong as there are chances that after
    start_transaction(), QR_EC can fail to be sent. If this happens,
    EC_FLAG_QUERY_PENDING will be cleared earlier. As a consequence, the
    draining QR_EC will also be queued earlier than expected.
    This patch also moves this code into advance_transaction() where QR_EC is
    just sent (ACPI_EC_COMMAND_POLL flagged) to fix this issue.
    
    Notes:
    1. After introducing the 2 SCI_EVT related handlings into
       advance_transaction(), a next QR_EC can be queued right after writing
       the current QR_EC command and before reading the event. But this still
       hasn't implemented the draining behavior as the draining support
       requires:
         If a previous returned event value isn't 0x00, a draining QR_EC need
         to be issued even when SCI_EVT isn't set.
    2. In this patch, acpi_os_execute() is also converted into a seperate work
       item to avoid invoking kmalloc() in the atomic context. We can do this
       because of the previous global lock fix.
    3. Originally, EC_FLAGS_EVENT_PENDING is also used to avoid queuing up
       multiple work items (created by acpi_os_execute()), this can be covered
       by only using a single work item. But this patch still keeps this flag
       as there are different usages in the driver initialization steps relying
       on this flag.
    
    Link: https://bugzilla.kernel.org/show_bug.cgi?id=44161
    Reported-by: Kieran Clancy <clancy.kieran@gmail.com>
    Signed-off-by: Lv Zheng <lv.zheng@intel.com>
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>

diff --git a/drivers/acpi/internal.h b/drivers/acpi/internal.h
index 163e82f536fa..dc420787ffcd 100644
--- a/drivers/acpi/internal.h
+++ b/drivers/acpi/internal.h
@@ -127,6 +127,7 @@ struct acpi_ec {
 	struct list_head list;
 	struct transaction *curr;
 	spinlock_t lock;
+	struct work_struct work;
 };
 
 extern struct acpi_ec *first_ec;

commit ffdcd955c3078af3ce117edcfce80fde1a512bed
Author: Mika Westerberg <mika.westerberg@linux.intel.com>
Date:   Tue Oct 21 13:33:55 2014 +0200

    ACPI: Add support for device specific properties
    
    Device Tree is used in many embedded systems to describe the system
    configuration to the OS. It supports attaching properties or name-value
    pairs to the devices it describe. With these properties one can pass
    additional information to the drivers that would not be available
    otherwise.
    
    ACPI is another configuration mechanism (among other things) typically
    seen, but not limited to, x86 machines. ACPI allows passing arbitrary
    data from methods but there has not been mechanism equivalent to Device
    Tree until the introduction of _DSD in the recent publication of the
    ACPI 5.1 specification.
    
    In order to facilitate ACPI usage in systems where Device Tree is
    typically used, it would be beneficial to standardize a way to retrieve
    Device Tree style properties from ACPI devices, which is what we do in
    this patch.
    
    If a given device described in ACPI namespace wants to export properties it
    must implement _DSD method (Device Specific Data, introduced with ACPI 5.1)
    that returns the properties in a package of packages. For example:
    
            Name (_DSD, Package () {
                    ToUUID("daffd814-6eba-4d8c-8a91-bc9bbf4aa301"),
                    Package () {
                            Package () {"name1", <VALUE1>},
                            Package () {"name2", <VALUE2>},
                            ...
                    }
            })
    
    The UUID reserved for properties is daffd814-6eba-4d8c-8a91-bc9bbf4aa301
    and is documented in the ACPI 5.1 companion document called "_DSD
    Implementation Guide" [1], [2].
    
    We add several helper functions that can be used to extract these
    properties and convert them to different Linux data types.
    
    The ultimate goal is that we only have one device property API that
    retrieves the requested properties from Device Tree or from ACPI
    transparent to the caller.
    
    [1] http://www.uefi.org/sites/default/files/resources/_DSD-implementation-guide-toplevel.htm
    [2] http://www.uefi.org/sites/default/files/resources/_DSD-device-properties-UUID.pdf
    
    Reviewed-by: Hanjun Guo <hanjun.guo@linaro.org>
    Reviewed-by: Josh Triplett <josh@joshtriplett.org>
    Reviewed-by: Grant Likely <grant.likely@linaro.org>
    Signed-off-by: Darren Hart <dvhart@linux.intel.com>
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Signed-off-by: Mika Westerberg <mika.westerberg@linux.intel.com>
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>

diff --git a/drivers/acpi/internal.h b/drivers/acpi/internal.h
index 447f6d679b29..163e82f536fa 100644
--- a/drivers/acpi/internal.h
+++ b/drivers/acpi/internal.h
@@ -173,4 +173,10 @@ static inline void suspend_nvs_restore(void) {}
 bool acpi_osi_is_win8(void);
 #endif
 
+/*--------------------------------------------------------------------------
+				Device properties
+  -------------------------------------------------------------------------- */
+void acpi_init_properties(struct acpi_device *adev);
+void acpi_free_properties(struct acpi_device *adev);
+
 #endif /* _ACPI_INTERNAL_H_ */

commit 2bb3a2bf9939f3361e25045f4ef7b136b864c3b8
Author: Aaron Lu <aaron.lu@intel.com>
Date:   Tue Nov 19 15:43:52 2013 +0800

    ACPI / fan: use acpi_device_xxx_power instead of acpi_bus equivelant
    
    When we have the acpi_device pointer, there is no need to pass the
    device's handle to the acpi_bus_xxx_power functions to get/set/update
    the device's power state, instead, use the acpi_device_xxx_power
    functions directly.
    
    To make this happen for fan module, export acpi_device_update_power.
    
    Signed-off-by: Aaron Lu <aaron.lu@intel.com>
    Signed-off-by: Zhang Rui <rui.zhang@intel.com>

diff --git a/drivers/acpi/internal.h b/drivers/acpi/internal.h
index f221d1eb594a..447f6d679b29 100644
--- a/drivers/acpi/internal.h
+++ b/drivers/acpi/internal.h
@@ -104,8 +104,6 @@ int acpi_power_get_inferred_state(struct acpi_device *device, int *state);
 int acpi_power_on_resources(struct acpi_device *device, int state);
 int acpi_power_transition(struct acpi_device *device, int state);
 
-int acpi_device_update_power(struct acpi_device *device, int *state_p);
-
 int acpi_wakeup_device_init(void);
 
 #ifdef CONFIG_ARCH_MIGHT_HAVE_ACPI_PDC

commit 083bf668cb70e47b84db64856606e94beac87f01
Author: Zhang Rui <rui.zhang@intel.com>
Date:   Fri Mar 14 14:06:25 2014 +0800

    ACPI: make acpi_create_platform_device() an external API
    
    Signed-off-by: Zhang Rui <rui.zhang@intel.com>

diff --git a/drivers/acpi/internal.h b/drivers/acpi/internal.h
index de47f9f746c9..f221d1eb594a 100644
--- a/drivers/acpi/internal.h
+++ b/drivers/acpi/internal.h
@@ -168,13 +168,6 @@ static inline int suspend_nvs_save(void) { return 0; }
 static inline void suspend_nvs_restore(void) {}
 #endif
 
-/*--------------------------------------------------------------------------
-				Platform bus support
-  -------------------------------------------------------------------------- */
-struct platform_device;
-
-struct platform_device *acpi_create_platform_device(struct acpi_device *adev);
-
 /*--------------------------------------------------------------------------
 					Video
   -------------------------------------------------------------------------- */

commit 3230bbfce8a9270acc77fafd0d9ff90e94f28993
Author: Zhang Rui <rui.zhang@intel.com>
Date:   Fri Mar 14 00:34:05 2014 +0800

    ACPI: introduce ACPI int340x thermal scan handler
    
    Newer laptops and tablets that use ACPI may have thermal sensors and
    other devices with thermal control capabilities outside the core CPU/SOC,
    for thermal safety reasons.
    They are exposed for the OS to use via
    1) INT3400 ACPI device object as the master.
    2) INT3401 ~ INT340B ACPI device objects as the slaves.
    
    This patch introduces a scan handler to enumerate the INT3400
    ACPI device object to platform bus, and prevent its slaves
    from being enumerated before the controller driver being probed.
    
    Signed-off-by: Zhang Rui <rui.zhang@intel.com>

diff --git a/drivers/acpi/internal.h b/drivers/acpi/internal.h
index 4c5cf77e7576..de47f9f746c9 100644
--- a/drivers/acpi/internal.h
+++ b/drivers/acpi/internal.h
@@ -31,6 +31,7 @@ void acpi_pci_link_init(void);
 void acpi_processor_init(void);
 void acpi_platform_init(void);
 void acpi_pnp_init(void);
+void acpi_int340x_thermal_init(void);
 int acpi_sysfs_init(void);
 void acpi_container_init(void);
 void acpi_memory_hotplug_init(void);

commit 91af125c33af02340355b96a6ed0761e5132cde0
Merge: 805c52815825 e70dba6020ea 85dbb3d05ec6
Author: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
Date:   Sun Jul 27 23:55:35 2014 +0200

    Merge branches 'acpi-pnp' and 'acpi-pci'
    
    * acpi-pnp:
      ACPI / PNP: Use ACPI_COMPANION() instead of ACPI_HANDLE()
      ACPI / PNP: do ACPI binding directly
    
    * acpi-pci:
      ACPI / PCI: Use ACPI_COMPANION() instead of ACPI_HANDLE()

commit 46ba51ea8f8639da32c55744b35479fdfb4e7232
Author: Hanjun Guo <hanjun.guo@linaro.org>
Date:   Fri Jul 18 18:02:54 2014 +0800

    ACPI / processor: Introduce ARCH_MIGHT_HAVE_ACPI_PDC
    
    The use of _PDC is deprecated in ACPI 3.0 in favor of _OSC,
    as ARM platform is supported only in ACPI 5.0 or higher version,
    _PDC will not be used in ARM platform, so make Make _PDC only for
    platforms with Intel CPUs.
    
    Introduce ARCH_MIGHT_HAVE_ACPI_PDC and move _PDC related code in
    ACPI processor driver into a single file processor_pdc.c, make x86
    and ia64 select it when ACPI is enabled.
    
    This patch also use pr_* to replace printk to fix the checkpatch
    warning and factor acpi_processor_alloc_pdc() a little bit to
    avoid duplicate pr_err() code.
    
    Suggested-by: Robert Richter <rric@kernel.org>
    Signed-off-by: Hanjun Guo <hanjun.guo@linaro.org>
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>

diff --git a/drivers/acpi/internal.h b/drivers/acpi/internal.h
index 7de5b603f272..64ee3eed18de 100644
--- a/drivers/acpi/internal.h
+++ b/drivers/acpi/internal.h
@@ -108,7 +108,12 @@ int acpi_power_transition(struct acpi_device *device, int state);
 int acpi_device_update_power(struct acpi_device *device, int *state_p);
 
 int acpi_wakeup_device_init(void);
+
+#ifdef CONFIG_ARCH_MIGHT_HAVE_ACPI_PDC
 void acpi_early_processor_set_pdc(void);
+#else
+static inline void acpi_early_processor_set_pdc(void) {}
+#endif
 
 /* --------------------------------------------------------------------------
                                   Embedded Controller

commit f1b1dc845cb1418b2b0de35491b0da87498ea6a8
Author: Zhang Rui <rui.zhang@intel.com>
Date:   Mon Jul 7 14:07:38 2014 +0200

    ACPI / PNP: do ACPI binding directly
    
    PNPACPI uses acpi_bus_type to do ACPI binding for the PNPACPI devices.
    
    This is overkill because PNPACPI code already knows which ACPI
    device object to bind during PNPACPI device enumeration.
    
    This patch removes acpi_pnp_bus and does the binding by invoking
    acpi_bind_one() directly after device enumerated.
    
    This also fixes a bug in the previous code that some PNPACPI devices failed
    to be bound because
     1. the ACPI device _HID is not pnpid, e.g. "MSFT0001", but its _CID is,
        e.g. "PNP0303", thus ACPI _CID is used as the pnp device device id.
     2. device is bound only if the pnp device id matches the ACPI device _HID.
    
    Tested-by: Prigent Christophe <christophe.prigent@intel.com>
    Signed-off-by: Zhang Rui <rui.zhang@intel.com>
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>

diff --git a/drivers/acpi/internal.h b/drivers/acpi/internal.h
index 7de5b603f272..151f3e76d47a 100644
--- a/drivers/acpi/internal.h
+++ b/drivers/acpi/internal.h
@@ -84,8 +84,6 @@ void acpi_init_device_object(struct acpi_device *device, acpi_handle handle,
 			     int type, unsigned long long sta);
 void acpi_device_add_finalize(struct acpi_device *device);
 void acpi_free_pnp_ids(struct acpi_device_pnp *pnp);
-int acpi_bind_one(struct device *dev, struct acpi_device *adev);
-int acpi_unbind_one(struct device *dev);
 bool acpi_device_is_present(struct acpi_device *adev);
 bool acpi_device_is_battery(struct acpi_device *adev);
 

commit d6ddaaac8f5c37ad84db3e6e019981f392389cf0
Author: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
Date:   Fri May 30 14:34:05 2014 +0200

    ACPI / scan: always register ACPI LPSS scan handler
    
    Prevent platform devices from being created for ACPI LPSS devices
    if CONFIG_X86_INTEL_LPSS is unset by compiling out the LPSS scan
    handler's callbacks only in that case and still compiling its device
    ID list in and registering the scan handler in either case.
    
    This change is based on a prototype from Zhang Rui.
    
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Reviewed-by: Mika Westerberg <mika.westerberg@linux.intel.com>

diff --git a/drivers/acpi/internal.h b/drivers/acpi/internal.h
index 5ad27bf8e4bd..7de5b603f272 100644
--- a/drivers/acpi/internal.h
+++ b/drivers/acpi/internal.h
@@ -65,11 +65,7 @@ int acpi_debugfs_init(void);
 #else
 static inline void acpi_debugfs_init(void) { return; }
 #endif
-#ifdef CONFIG_X86_INTEL_LPSS
 void acpi_lpss_init(void);
-#else
-static inline void acpi_lpss_init(void) {}
-#endif
 
 acpi_status acpi_hotplug_schedule(struct acpi_device *adev, u32 src);
 bool acpi_queue_hotplug_work(struct work_struct *work);

commit cccd420859a419756bc4ed25d52989a47d702561
Author: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
Date:   Fri May 30 04:29:14 2014 +0200

    ACPI / scan: always register memory hotplug scan handler
    
    Prevent platform devices from being created for ACPI memory device
    objects if CONFIG_ACPI_HOTPLUG_MEMORY is unset by compiling out the
    memory hotplug scan handler's callbacks only in that case and still
    compiling its device ID list in and registering the scan handler in
    either case.
    
    Also unset the memory hotplug scan handler's .attach() callback
    if acpi_no_memhotplug is set, but still register the scan handler to
    avoid creating platform devices for ACPI memory devices in that case
    too.
    
    This change is based on a prototype from Zhang Rui.
    
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Reviewed-by: Mika Westerberg <mika.westerberg@linux.intel.com>

diff --git a/drivers/acpi/internal.h b/drivers/acpi/internal.h
index cc93efd22a24..5ad27bf8e4bd 100644
--- a/drivers/acpi/internal.h
+++ b/drivers/acpi/internal.h
@@ -33,6 +33,7 @@ void acpi_platform_init(void);
 void acpi_pnp_init(void);
 int acpi_sysfs_init(void);
 void acpi_container_init(void);
+void acpi_memory_hotplug_init(void);
 #ifdef CONFIG_ACPI_DOCK
 void register_dock_dependent_device(struct acpi_device *adev,
 				    acpi_handle dshandle);
@@ -44,11 +45,6 @@ static inline void register_dock_dependent_device(struct acpi_device *adev,
 static inline int dock_notify(struct acpi_device *adev, u32 event) { return -ENODEV; }
 static inline void acpi_dock_add(struct acpi_device *adev) {}
 #endif
-#ifdef CONFIG_ACPI_HOTPLUG_MEMORY
-void acpi_memory_hotplug_init(void);
-#else
-static inline void acpi_memory_hotplug_init(void) {}
-#endif
 #ifdef CONFIG_X86
 void acpi_cmos_rtc_init(void);
 #else

commit a1ec657213b4abb00e59385171554a3e11eec27c
Author: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
Date:   Fri May 30 04:28:20 2014 +0200

    ACPI / scan: always register container scan handler
    
    Prevent platform devices from being created for ACPI containers
    if CONFIG_ACPI_CONTAINER is unset by compiling out the container
    scan handler's callbacks only in that case and still compiling
    its device ID list in and registering the scan handler in either
    case.
    
    This change is based on a prototype from Zhang Rui.
    
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Reviewed-by: Mika Westerberg <mika.westerberg@linux.intel.com>

diff --git a/drivers/acpi/internal.h b/drivers/acpi/internal.h
index 5c16cb6bc76d..cc93efd22a24 100644
--- a/drivers/acpi/internal.h
+++ b/drivers/acpi/internal.h
@@ -32,11 +32,7 @@ void acpi_processor_init(void);
 void acpi_platform_init(void);
 void acpi_pnp_init(void);
 int acpi_sysfs_init(void);
-#ifdef CONFIG_ACPI_CONTAINER
 void acpi_container_init(void);
-#else
-static inline void acpi_container_init(void) {}
-#endif
 #ifdef CONFIG_ACPI_DOCK
 void register_dock_dependent_device(struct acpi_device *adev,
 				    acpi_handle dshandle);

commit eec15edbb0e14485998635ea7c62e30911b465f0
Author: Zhang Rui <rui.zhang@intel.com>
Date:   Fri May 30 04:23:01 2014 +0200

    ACPI / PNP: use device ID list for PNPACPI device enumeration
    
    ACPI can be used to enumerate PNP devices, but the code does not
    handle this in the right way currently.  Namely, if an ACPI device
    object
     1. Has a _CRS method,
     2. Has an identification of
        "three capital characters followed by four hex digits",
     3. Is not in the excluded IDs list,
    it will be enumerated to PNP bus (that is, a PNP device object will
    be create for it).  This means that, actually, the PNP bus type is
    used as the default bus type for enumerating _HID devices in ACPI.
    
    However, more and more _HID devices need to be enumerated to the
    platform bus instead (that is, platform device objects need to be
    created for them).  As a result, the device ID list in acpi_platform.c
    is used to enforce creating platform device objects rather than PNP
    device objects for matching devices.  That list has been continuously
    growing recently, unfortunately, and it is pretty much guaranteed to
    grow even more in the future.
    
    To address that problem it is better to enumerate _HID devices
    as platform devices by default.  To this end, change the way of
    enumerating PNP devices by adding a PNP ACPI scan handler that
    will use a device ID list to create PNP devices for the ACPI
    device objects whose device IDs are present in that list.
    
    The initial device ID list in the PNP ACPI scan handler contains
    all of the pnp_device_id strings from all the existing PNP drivers,
    so this change should be transparent to the PNP core and all of the
    PNP drivers.  Still, in the future it should be possible to reduce
    its size by converting PNP drivers that need not be PNP for any
    technical reasons into platform drivers.
    
    Signed-off-by: Zhang Rui <rui.zhang@intel.com>
    [rjw: Rewrote the changelog, modified the PNP ACPI scan handler code]
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Reviewed-by: Mika Westerberg <mika.westerberg@linux.intel.com>

diff --git a/drivers/acpi/internal.h b/drivers/acpi/internal.h
index bb7de413d06d..5c16cb6bc76d 100644
--- a/drivers/acpi/internal.h
+++ b/drivers/acpi/internal.h
@@ -30,6 +30,7 @@ void acpi_pci_root_init(void);
 void acpi_pci_link_init(void);
 void acpi_processor_init(void);
 void acpi_platform_init(void);
+void acpi_pnp_init(void);
 int acpi_sysfs_init(void);
 #ifdef CONFIG_ACPI_CONTAINER
 void acpi_container_init(void);

commit 8ce62f85a81f57e86bc120ab690facc612223188
Author: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
Date:   Sun May 25 14:38:52 2014 +0200

    ACPI / platform / LPSS: Enable async suspend/resume of LPSS devices
    
    To seed up suspend and resume of devices included into Intel SoCs
    handled by the ACPI LPSS driver during system suspend, make
    acpi_lpss_create_device() call device_enable_async_suspend() for
    every device created by it.
    
    This requires acpi_create_platform_device() to be modified to return
    a pointer to struct platform_device instead of an int.  As a result,
    acpi_create_platform_device() cannot be pointed to by the .attach
    pointer in platform_handler directly any more, so a simple wrapper
    around it is necessary for this purpose.  That, in turn, allows the
    second unused argument of acpi_create_platform_device() to be
    dropped, which is an improvement.
    
    Tested-by: Heikki Krogerus <heikki.krogerus@linux.intel.com>
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>

diff --git a/drivers/acpi/internal.h b/drivers/acpi/internal.h
index 957391306cbf..bb7de413d06d 100644
--- a/drivers/acpi/internal.h
+++ b/drivers/acpi/internal.h
@@ -180,8 +180,7 @@ static inline void suspend_nvs_restore(void) {}
   -------------------------------------------------------------------------- */
 struct platform_device;
 
-int acpi_create_platform_device(struct acpi_device *adev,
-				const struct acpi_device_id *id);
+struct platform_device *acpi_create_platform_device(struct acpi_device *adev);
 
 /*--------------------------------------------------------------------------
 					Video

commit 1e3bcb596c6b1cf6db93f8f506e2de260e771bad
Author: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
Date:   Mon Mar 3 00:40:38 2014 +0100

    ACPI / hotplug: Rework deferred execution of acpi_device_hotplug()
    
    Since the only function executed by acpi_hotplug_execute() is
    acpi_device_hotplug() and it only is called by the ACPI core,
    simplify its definition so that it only takes two arguments, the
    ACPI device object pointer and event code, rename it to
    acpi_hotplug_schedule() and move its header from acpi_bus.h to
    the ACPI core's internal header file internal.h.  Modify the
    definition of acpi_device_hotplug() so that its first argument is
    an ACPI device object pointer and modify the definition of
    struct acpi_hp_work accordingly.
    
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Acked-by: Toshi Kani <toshi.kani@hp.com>

diff --git a/drivers/acpi/internal.h b/drivers/acpi/internal.h
index 4d081fc1aa24..957391306cbf 100644
--- a/drivers/acpi/internal.h
+++ b/drivers/acpi/internal.h
@@ -78,8 +78,9 @@ void acpi_lpss_init(void);
 static inline void acpi_lpss_init(void) {}
 #endif
 
+acpi_status acpi_hotplug_schedule(struct acpi_device *adev, u32 src);
 bool acpi_queue_hotplug_work(struct work_struct *work);
-void acpi_device_hotplug(void *data, u32 src);
+void acpi_device_hotplug(struct acpi_device *adev, u32 src);
 bool acpi_scan_is_offline(struct acpi_device *adev, bool uevent);
 
 /* --------------------------------------------------------------------------

commit b43109fa466e6e29091b3e62e6a6c8a0bd099beb
Author: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
Date:   Sun Feb 16 00:09:34 2014 +0100

    ACPI / dock: Pass ACPI device pointer to acpi_device_is_battery()
    
    Since we already know what the device's PNP IDs are when
    acpi_device_is_battery() is called, it is not necessary to run
    acpi_get_object_info() for the device in that function.  Instead, if
    acpi_device_is_battery() is passed a pointer to a struct acpi_device
    object, it can use the list of PNP IDs from that object, so make that
    happen and modify the function's header accordingly
    
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>

diff --git a/drivers/acpi/internal.h b/drivers/acpi/internal.h
index 00e3220febda..4d081fc1aa24 100644
--- a/drivers/acpi/internal.h
+++ b/drivers/acpi/internal.h
@@ -97,7 +97,7 @@ void acpi_free_pnp_ids(struct acpi_device_pnp *pnp);
 int acpi_bind_one(struct device *dev, struct acpi_device *adev);
 int acpi_unbind_one(struct device *dev);
 bool acpi_device_is_present(struct acpi_device *adev);
-bool acpi_device_is_battery(acpi_handle handle);
+bool acpi_device_is_battery(struct acpi_device *adev);
 
 /* --------------------------------------------------------------------------
                                   Power Resource

commit 1e2380cd144f6a9619f72f80ad9a93268f63b8dc
Author: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
Date:   Sun Feb 16 01:51:01 2014 +0100

    ACPI / dock: Dispatch dock notifications from the global notify handler
    
    The ACPI dock station code carries out an extra namespace scan
    before the main one in order to find and register all of the dock
    device objects.  Then, it registers a notify handler for each of
    them for handling dock events.
    
    However, dock device objects need not be scanned for upfront.  They
    very well can be enumerated and registered during the first phase
    of the main namespace scan, before attaching scan handlers and ACPI
    drivers to ACPI device objects.  Then, the dependent devices can be
    added to the in the second phase.  That makes it possible to drop
    the extra namespace scan, so do it.
    
    Moreover, it is not necessary to register notify handlers for all
    of the dock stations' namespace nodes, becuase notifications may
    be dispatched from the global notify handler for them.  Do that and
    drop two functions used for dock notify handling, acpi_dock_deferred_cb()
    and dock_notify_handler(), that aren't necessary any more.
    
    Finally, some dock station objects have _HID objects matching the
    ACPI container scan handler which causes it to claim those objects
    and try to handle their hotplug, but that is not a good idea,
    because those objects have their own special hotplug handling anyway.
    For this reason, the hotplug_notify flag should not be set for ACPI
    device objects representing dock stations and the container scan
    handler should be made ignore those objects, so make that happen.
    
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>

diff --git a/drivers/acpi/internal.h b/drivers/acpi/internal.h
index 143d5df5ec32..00e3220febda 100644
--- a/drivers/acpi/internal.h
+++ b/drivers/acpi/internal.h
@@ -37,9 +37,15 @@ void acpi_container_init(void);
 static inline void acpi_container_init(void) {}
 #endif
 #ifdef CONFIG_ACPI_DOCK
-void acpi_dock_init(void);
+void register_dock_dependent_device(struct acpi_device *adev,
+				    acpi_handle dshandle);
+int dock_notify(struct acpi_device *adev, u32 event);
+void acpi_dock_add(struct acpi_device *adev);
 #else
-static inline void acpi_dock_init(void) {}
+static inline void register_dock_dependent_device(struct acpi_device *adev,
+						  acpi_handle dshandle) {}
+static inline int dock_notify(struct acpi_device *adev, u32 event) { return -ENODEV; }
+static inline void acpi_dock_add(struct acpi_device *adev) {}
 #endif
 #ifdef CONFIG_ACPI_HOTPLUG_MEMORY
 void acpi_memory_hotplug_init(void);
@@ -91,6 +97,7 @@ void acpi_free_pnp_ids(struct acpi_device_pnp *pnp);
 int acpi_bind_one(struct device *dev, struct acpi_device *adev);
 int acpi_unbind_one(struct device *dev);
 bool acpi_device_is_present(struct acpi_device *adev);
+bool acpi_device_is_battery(acpi_handle handle);
 
 /* --------------------------------------------------------------------------
                                   Power Resource

commit 1a699476e25814343766342672c655fb135224cc
Author: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
Date:   Thu Feb 6 13:58:13 2014 +0100

    ACPI / hotplug / PCI: Hotplug notifications from acpi_bus_notify()
    
    Since acpi_bus_notify() is executed on all notifications for all
    devices anyway, make it execute acpi_device_hotplug() for all
    hotplug events instead of installing notify handlers pointing to
    the same function for all hotplug devices.
    
    This change reduces both the size and complexity of ACPI-based device
    hotplug code.  Moreover, since acpi_device_hotplug() only does
    significant things for devices that have either an ACPI scan handler,
    or a hotplug context with .eject() defined, and those devices
    had notify handlers pointing to acpi_hotplug_notify_cb() installed
    before anyway, this modification shouldn't change functionality.
    
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>

diff --git a/drivers/acpi/internal.h b/drivers/acpi/internal.h
index dedbb2d802f1..143d5df5ec32 100644
--- a/drivers/acpi/internal.h
+++ b/drivers/acpi/internal.h
@@ -73,6 +73,7 @@ static inline void acpi_lpss_init(void) {}
 #endif
 
 bool acpi_queue_hotplug_work(struct work_struct *work);
+void acpi_device_hotplug(void *data, u32 src);
 bool acpi_scan_is_offline(struct acpi_device *adev, bool uevent);
 
 /* --------------------------------------------------------------------------

commit 25d412d932fb3289ae5b510845d523330b80bb71
Merge: 98feb7cc61c5 c713cd7f2d79
Author: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
Date:   Sun Jan 12 23:45:04 2014 +0100

    Merge branch 'acpi-hotplug'
    
    * acpi-hotplug:
      ACPI / scan: ACPI device object sysfs attribute for _STA evaluation
      ACPI / hotplug / driver core: Handle containers in a special way
      ACPI / hotplug: Add demand_offline hotplug profile flag
      ACPI / bind: Move acpi_get_child() to drivers/ide/ide-acpi.c
      ACPI / bind: Pass struct acpi_device pointer to acpi_bind_one()
      ACPI / bind: Rework struct acpi_bus_type
      ACPI / bind: Redefine acpi_preset_companion()
      ACPI / bind: Redefine acpi_get_child()
      PCI / ACPI: Use acpi_find_child_device() for child devices lookup
      ACPI / bind: Simplify child device lookups
      ACPI / scan: Use direct recurrence for device hierarchy walks
      ACPI: Introduce acpi_set_device_status()
      ACPI / hotplug: Drop unfinished global notification handling routines
      ACPI / hotplug: Rework generic code to handle suprise removals
      ACPI / hotplug: Move container-specific code out of the core
      ACPI / hotplug: Make ACPI PCI root hotplug use common hotplug code
      ACPI / hotplug: Introduce common hotplug function acpi_device_hotplug()
      ACPI / hotplug: Do not fail bus and device checks for disabled hotplug
      ACPI / scan: Add acpi_device objects for all device nodes in the namespace
      ACPI / scan: Define non-empty device removal handler

commit b8a0b0d199307eca0e99c30a06c9ed85a7f49678
Author: Rashika <rashika.kheria@gmail.com>
Date:   Tue Dec 17 15:02:14 2013 +0530

    ACPI / EC: Remove unused functions and add prototype declaration in internal.h
    
    Adds the prototype declarations of functions acpi_ec_add_query_handler()
    and acpi_ec_remove_query_handler() in header file internal.h and removes
    unused functions ec_burst_enable() and ec_burst_disable() in ec.c.
    
    This eliminates the following warnings in ec.c:
    drivers/acpi/ec.c:393:5: warning: no previous prototype for ‘ec_burst_enable’ [-Wmissing-prototypes]
    drivers/acpi/ec.c:402:5: warning: no previous prototype for ‘ec_burst_disable’ [-Wmissing-prototypes]
    drivers/acpi/ec.c:531:5: warning: no previous prototype for ‘acpi_ec_add_query_handler’ [-Wmissing-prototypes]
    drivers/acpi/ec.c:552:6: warning: no previous prototype for ‘acpi_ec_remove_query_handler’ [-Wmissing-prototypes]
    
    Signed-off-by: Rashika Kheria <rashika.kheria@gmail.com>
    Reviewed-by: Josh Triplett <josh@joshtriplett.org>
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>

diff --git a/drivers/acpi/internal.h b/drivers/acpi/internal.h
index a29739c0ba79..8ef9787dead4 100644
--- a/drivers/acpi/internal.h
+++ b/drivers/acpi/internal.h
@@ -127,12 +127,21 @@ struct acpi_ec {
 
 extern struct acpi_ec *first_ec;
 
+/* If we find an EC via the ECDT, we need to keep a ptr to its context */
+/* External interfaces use first EC only, so remember */
+typedef int (*acpi_ec_query_func) (void *data);
+
 int acpi_ec_init(void);
 int acpi_ec_ecdt_probe(void);
 int acpi_boot_ec_enable(void);
 void acpi_ec_block_transactions(void);
 void acpi_ec_unblock_transactions(void);
 void acpi_ec_unblock_transactions_early(void);
+int acpi_ec_add_query_handler(struct acpi_ec *ec, u8 query_bit,
+			      acpi_handle handle, acpi_ec_query_func func,
+			      void *data);
+void acpi_ec_remove_query_handler(struct acpi_ec *ec, u8 query_bit);
+
 
 /*--------------------------------------------------------------------------
                                   Suspend/Resume

commit caa73ea158de9419f08e456f2716c71d1f06012a
Author: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
Date:   Sun Dec 29 15:25:48 2013 +0100

    ACPI / hotplug / driver core: Handle containers in a special way
    
    ACPI container devices require special hotplug handling, at least
    on some systems, since generally user space needs to carry out
    system-specific cleanup before it makes sense to offline devices in
    the container.  However, the current ACPI hotplug code for containers
    first attempts to offline devices in the container and only then it
    notifies user space of the container offline.
    
    Moreover, after commit 202317a573b2 (ACPI / scan: Add acpi_device
    objects for all device nodes in the namespace), ACPI device objects
    representing containers are present as long as the ACPI namespace
    nodes corresponding to them are present, which may be forever, even
    if the container devices are physically detached from the system (the
    return values of the corresponding _STA methods change in those
    cases, but generally the namespace nodes themselves are still there).
    Thus it is useful to introduce entities representing containers that
    will go away during container hot-unplug.
    
    The goal of this change is to address both the above issues.
    
    The idea is to create a "companion" container system device for each
    of the ACPI container device objects during the initial namespace
    scan or on a hotplug event making the container present.  That system
    device will be unregistered on container removal.  A new bus type
    for container devices is added for this purpose, because device
    offline and online operations need to be defined for them.  The
    online operation is a trivial function that is always successful
    and the offline uses a callback pointed to by the container device's
    offline member.
    
    For ACPI containers that callback simply walks the list of ACPI
    device objects right below the container object (its children) and
    checks if all of their physical companion devices are offline.  If
    that's not the case, it returns -EBUSY and the container system
    devivce cannot be put offline.  Consequently, to put the container
    system device offline, it is necessary to put all of the physical
    devices depending on its ACPI companion object offline beforehand.
    
    Container system devices created for ACPI container objects are
    initially online.  They are created by the container ACPI scan
    handler whose hotplug.demand_offline flag is set.  That causes
    acpi_scan_hot_remove() to check if the companion container system
    device is offline before attempting to remove an ACPI container or
    any devices below it.  If the check fails, a KOBJ_CHANGE uevent is
    emitted for the container system device in question and user space
    is expected to offline all devices below the container and the
    container itself in response to it.  Then, user space can finalize
    the removal of the container with the help of its ACPI device
    object's eject attribute in sysfs.
    
    Tested-by: Yasuaki Ishimatsu <isimatu.yasuaki@jp.fujitsu.com>
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Acked-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/acpi/internal.h b/drivers/acpi/internal.h
index b125fdb0b30c..3375129bb5b7 100644
--- a/drivers/acpi/internal.h
+++ b/drivers/acpi/internal.h
@@ -73,6 +73,7 @@ static inline void acpi_lpss_init(void) {}
 #endif
 
 bool acpi_queue_hotplug_work(struct work_struct *work);
+bool acpi_scan_is_offline(struct acpi_device *adev, bool uevent);
 
 /* --------------------------------------------------------------------------
                      Device Node Initialization / Removal

commit 24dee1fc99fd6d38fc859d7f6dda1dab21493bef
Author: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
Date:   Fri Nov 29 16:27:43 2013 +0100

    ACPI / bind: Pass struct acpi_device pointer to acpi_bind_one()
    
    There is no reason to pass an ACPI handle to acpi_bind_one() instead
    of a struct acpi_device pointer to the target device object, so
    modify that function to take a struct acpi_device pointer as its
    second argument and update all code depending on it accordingly.
    
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Tested-by: Lan Tianyu <tianyu.lan@intel.com> # for USB/ACPI

diff --git a/drivers/acpi/internal.h b/drivers/acpi/internal.h
index f4aa467c407e..b125fdb0b30c 100644
--- a/drivers/acpi/internal.h
+++ b/drivers/acpi/internal.h
@@ -86,7 +86,7 @@ void acpi_init_device_object(struct acpi_device *device, acpi_handle handle,
 			     int type, unsigned long long sta);
 void acpi_device_add_finalize(struct acpi_device *device);
 void acpi_free_pnp_ids(struct acpi_device_pnp *pnp);
-int acpi_bind_one(struct device *dev, acpi_handle handle);
+int acpi_bind_one(struct device *dev, struct acpi_device *adev);
 int acpi_unbind_one(struct device *dev);
 bool acpi_device_is_present(struct acpi_device *adev);
 

commit 3338db0057ed9f554050bd06863731c515d79672
Author: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
Date:   Fri Nov 22 21:55:20 2013 +0100

    ACPI / hotplug: Make ACPI PCI root hotplug use common hotplug code
    
    Rework the common ACPI device hotplug code so that it is suitable
    for PCI host bridge hotplug and switch the PCI host bridge scan
    handler to using the common hotplug code.
    
    This allows quite a few lines of code that are not necessary any more
    to be dropped from the PCI host bridge scan handler and removes
    arbitrary differences in behavior between PCI host bridge hotplug
    and ACPI-based hotplug of other components, like CPUs and memory.
    
    Also acpi_device_hotplug() can be static now.
    
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Tested-by: Mika Westerberg <mika.westerberg@linux.intel.com>

diff --git a/drivers/acpi/internal.h b/drivers/acpi/internal.h
index a0d42cf5b0c5..f4aa467c407e 100644
--- a/drivers/acpi/internal.h
+++ b/drivers/acpi/internal.h
@@ -28,7 +28,6 @@ int init_acpi_device_notify(void);
 int acpi_scan_init(void);
 void acpi_pci_root_init(void);
 void acpi_pci_link_init(void);
-void acpi_pci_root_hp_init(void);
 void acpi_processor_init(void);
 void acpi_platform_init(void);
 int acpi_sysfs_init(void);
@@ -89,7 +88,6 @@ void acpi_device_add_finalize(struct acpi_device *device);
 void acpi_free_pnp_ids(struct acpi_device_pnp *pnp);
 int acpi_bind_one(struct device *dev, acpi_handle handle);
 int acpi_unbind_one(struct device *dev);
-void acpi_device_hotplug(void *data, u32 ost_src);
 bool acpi_device_is_present(struct acpi_device *adev);
 
 /* --------------------------------------------------------------------------

commit c27b2c33b6215eeb3d5c290ac889ab6d543f6207
Author: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
Date:   Fri Nov 22 21:55:07 2013 +0100

    ACPI / hotplug: Introduce common hotplug function acpi_device_hotplug()
    
    Modify the common ACPI device hotplug code to always queue up the
    same function, acpi_device_hotplug(), using acpi_hotplug_execute()
    and make the PCI host bridge hotplug code use that function too for
    device hot removal.
    
    This allows some code duplication to be reduced and a race condition
    where the relevant ACPI handle may become invalid between the
    notification handler and the function queued up by it via
    acpi_hotplug_execute() to be avoided.
    
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Tested-by: Mika Westerberg <mika.westerberg@linux.intel.com>

diff --git a/drivers/acpi/internal.h b/drivers/acpi/internal.h
index 809b8082c134..a0d42cf5b0c5 100644
--- a/drivers/acpi/internal.h
+++ b/drivers/acpi/internal.h
@@ -89,7 +89,7 @@ void acpi_device_add_finalize(struct acpi_device *device);
 void acpi_free_pnp_ids(struct acpi_device_pnp *pnp);
 int acpi_bind_one(struct device *dev, acpi_handle handle);
 int acpi_unbind_one(struct device *dev);
-void acpi_bus_device_eject(void *data, u32 ost_src);
+void acpi_device_hotplug(void *data, u32 ost_src);
 bool acpi_device_is_present(struct acpi_device *adev);
 
 /* --------------------------------------------------------------------------

commit 202317a573b20d77a9abb7c16a3fd5b40cef3d9d
Author: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
Date:   Fri Nov 22 21:54:37 2013 +0100

    ACPI / scan: Add acpi_device objects for all device nodes in the namespace
    
    Modify the ACPI namespace scanning code to register a struct
    acpi_device object for every namespace node representing a device,
    processor and so on, even if the device represented by that namespace
    node is reported to be not present and not functional by _STA.
    
    There are multiple reasons to do that.  First of all, it avoids
    quite a lot of overhead when struct acpi_device objects are
    deleted every time acpi_bus_trim() is run and then added again
    by a subsequent acpi_bus_scan() for the same scope, although the
    namespace objects they correspond to stay in memory all the time
    (which always is the case on a vast majority of systems).
    
    Second, it will allow user space to see that there are namespace
    nodes representing devices that are not present at the moment and may
    be added to the system.  It will also allow user space to evaluate
    _SUN for those nodes to check what physical slots the "missing"
    devices may be put into and it will make sense to add a sysfs
    attribute for _STA evaluation after this change (that will be
    useful for thermal management on some systems).
    
    Next, it will help to consolidate the ACPI hotplug handling among
    subsystems by making it possible to store hotplug-related information
    in struct acpi_device objects in a standard common way.
    
    Finally, it will help to avoid a race condition related to the
    deletion of ACPI namespace nodes.  Namely, namespace nodes may be
    deleted as a result of a table unload triggered by _EJ0 or _DCK.
    If a hotplug notification for one of those nodes is triggered
    right before the deletion and it executes a hotplug callback
    via acpi_hotplug_execute(), the ACPI handle passed to that
    callback may be stale when the callback actually runs.  One way
    to work around that is to always pass struct acpi_device pointers
    to hotplug callbacks after doing a get_device() on the objects in
    question which eliminates the use-after-free possibility (the ACPI
    handles in those objects are invalidated by acpi_scan_drop_device(),
    so they will trigger ACPICA errors on attempts to use them).
    
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Tested-by: Mika Westerberg <mika.westerberg@linux.intel.com>

diff --git a/drivers/acpi/internal.h b/drivers/acpi/internal.h
index d8606498bf6f..809b8082c134 100644
--- a/drivers/acpi/internal.h
+++ b/drivers/acpi/internal.h
@@ -90,6 +90,7 @@ void acpi_free_pnp_ids(struct acpi_device_pnp *pnp);
 int acpi_bind_one(struct device *dev, acpi_handle handle);
 int acpi_unbind_one(struct device *dev);
 void acpi_bus_device_eject(void *data, u32 ost_src);
+bool acpi_device_is_present(struct acpi_device *adev);
 
 /* --------------------------------------------------------------------------
                                   Power Resource
@@ -107,6 +108,8 @@ int acpi_power_get_inferred_state(struct acpi_device *device, int *state);
 int acpi_power_on_resources(struct acpi_device *device, int state);
 int acpi_power_transition(struct acpi_device *device, int state);
 
+int acpi_device_update_power(struct acpi_device *device, int *state_p);
+
 int acpi_wakeup_device_init(void);
 void acpi_early_processor_set_pdc(void);
 

commit d783156ea38431b20af0d4f910a6f9f9054d33b9
Author: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
Date:   Fri Nov 22 21:52:12 2013 +0100

    ACPI / scan: Define non-empty device removal handler
    
    If an ACPI namespace node is removed (usually, as a result of a
    table unload), and there is a data object attached to that node,
    acpi_ns_delete_node() executes the removal handler submitted to
    acpi_attach_data() for that object.  That handler is currently empty
    for struct acpi_device objects, so it is necessary to detach those
    objects from the corresponding ACPI namespace nodes in advance every
    time a table unload may happen.  That is cumbersome and inefficient
    and leads to some design constraints that turn out to be quite
    inconvenient (in particular, struct acpi_device objects cannot be
    registered for namespace nodes representing devices that are not
    reported as present or functional by _STA).
    
    For this reason, introduce a non-empty removal handler for ACPI
    device objects that will unregister them when their ACPI namespace
    nodes go away.
    
    This code modification alone should not change functionality except
    for the ordering of the ACPI hotplug workqueue which should not
    matter (without subsequent code changes).
    
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Tested-by: Mika Westerberg <mika.westerberg@linux.intel.com>

diff --git a/drivers/acpi/internal.h b/drivers/acpi/internal.h
index a29739c0ba79..d8606498bf6f 100644
--- a/drivers/acpi/internal.h
+++ b/drivers/acpi/internal.h
@@ -73,6 +73,8 @@ void acpi_lpss_init(void);
 static inline void acpi_lpss_init(void) {}
 #endif
 
+bool acpi_queue_hotplug_work(struct work_struct *work);
+
 /* --------------------------------------------------------------------------
                      Device Node Initialization / Removal
    -------------------------------------------------------------------------- */

commit 63ff4d0765a4e30afa659edbf09006987fc62499
Merge: 679d9980f991 7b98118aaa5d
Author: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
Date:   Thu Nov 7 19:31:15 2013 +0100

    Merge branch 'acpi-hotplug'
    
    * acpi-hotplug:
      ACPI / hotplug: Consolidate deferred execution of ACPI hotplug routines
      ACPI / hotplug: Do not execute "insert in progress" _OST
      ACPI / hotplug: Carry out PCI root eject directly
      ACPI / hotplug: Merge device hot-removal routines
      ACPI / hotplug: Make acpi_bus_hot_remove_device() internal
      ACPI / hotplug: Simplify device ejection routines
      ACPI / hotplug: Fix handle_root_bridge_removal()
      ACPI / hotplug: Refuse to hot-remove all objects with disabled hotplug
      ACPI / scan: Start matching drivers after trying scan handlers
      ACPI: Remove acpi_pci_slot_init() headers from internal.h
    
    Conflicts:
            include/acpi/acpiosxf.h (with the 'acpica' branch)

commit 7b98118aaa5d75644c48f41fc5d0cc181e478383
Author: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
Date:   Thu Nov 7 01:45:40 2013 +0100

    ACPI / hotplug: Consolidate deferred execution of ACPI hotplug routines
    
    There are two different interfaces for queuing up work items on the
    ACPI hotplug workqueue, alloc_acpi_hp_work() used by PCI and PCI host
    bridge hotplug code and acpi_os_hotplug_execute() used by the common
    ACPI hotplug code and docking stations.  They both are somewhat
    cumbersome to use and work slightly differently.
    
    The users of alloc_acpi_hp_work() have to submit a work function that
    will extract the necessary data items from a struct acpi_hp_work
    object allocated by alloc_acpi_hp_work() and then will free that
    object, while it would be more straightforward to simply use a work
    function with one more argument and let the interface take care of
    the execution details.
    
    The users of acpi_os_hotplug_execute() also have to deal with the
    fact that it takes only one argument in addition to the work function
    pointer, although acpi_os_execute_deferred() actually takes care of
    the allocation and freeing of memory, so it would have been able to
    pass more arguments to the work function if it hadn't been
    constrained by the connection with acpi_os_execute().
    
    Moreover, while alloc_acpi_hp_work() makes GFP_KERNEL memory
    allocations, which is correct, because hotplug work items are
    always queued up from process context, acpi_os_hotplug_execute()
    uses GFP_ATOMIC, as that is needed by acpi_os_execute().  Also,
    acpi_os_execute_deferred() queued up by it waits for the ACPI event
    workqueues to flush before executing the work function, whereas
    alloc_acpi_hp_work() can't do anything similar.  That leads to
    somewhat arbitrary differences in behavior between various ACPI
    hotplug code paths and has to be straightened up.
    
    For this reason, replace both alloc_acpi_hp_work() and
    acpi_os_hotplug_execute() with a single interface,
    acpi_hotplug_execute(), combining their behavior and being more
    friendly to its users than any of the two.
    
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Tested-by: Mika Westerberg <mika.westerberg@linux.intel.com>

diff --git a/drivers/acpi/internal.h b/drivers/acpi/internal.h
index 80cd1a10c4c3..c6db680c826c 100644
--- a/drivers/acpi/internal.h
+++ b/drivers/acpi/internal.h
@@ -87,7 +87,7 @@ void acpi_device_add_finalize(struct acpi_device *device);
 void acpi_free_pnp_ids(struct acpi_device_pnp *pnp);
 int acpi_bind_one(struct device *dev, acpi_handle handle);
 int acpi_unbind_one(struct device *dev);
-void acpi_bus_device_eject(struct acpi_device *device, u32 ost_src);
+void acpi_bus_device_eject(void *data, u32 ost_src);
 
 /* --------------------------------------------------------------------------
                                   Power Resource

commit 43d388832bd3e413e9b5e6f3caef4b0844b901af
Author: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
Date:   Thu Nov 7 01:42:09 2013 +0100

    ACPI / hotplug: Carry out PCI root eject directly
    
    Since _handle_hotplug_event_root() is run from the ACPI hotplug
    workqueue, it doesn't need to queue up a work item to eject a PCI
    host bridge on the same workqueue.  Instead, it can just carry out
    the eject by calling acpi_bus_device_eject() directly, so make that
    happen.
    
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>

diff --git a/drivers/acpi/internal.h b/drivers/acpi/internal.h
index 6c79ae69d344..80cd1a10c4c3 100644
--- a/drivers/acpi/internal.h
+++ b/drivers/acpi/internal.h
@@ -87,7 +87,7 @@ void acpi_device_add_finalize(struct acpi_device *device);
 void acpi_free_pnp_ids(struct acpi_device_pnp *pnp);
 int acpi_bind_one(struct device *dev, acpi_handle handle);
 int acpi_unbind_one(struct device *dev);
-void acpi_bus_hot_remove_device(void *context);
+void acpi_bus_device_eject(struct acpi_device *device, u32 ost_src);
 
 /* --------------------------------------------------------------------------
                                   Power Resource

commit ace8238b00eafd493b8dbcc7db813ed72b8b6e87
Author: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
Date:   Thu Nov 7 01:41:48 2013 +0100

    ACPI / hotplug: Make acpi_bus_hot_remove_device() internal
    
    Notice that handle_root_bridge_removal() is the only user of
    acpi_bus_hot_remove_device(), so it doesn't have to be exported
    any more and can be made internal to the ACPI core.
    
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Acked-by: Toshi Kani <toshi.kani@hp.com>

diff --git a/drivers/acpi/internal.h b/drivers/acpi/internal.h
index ebc3ad0a188d..6c79ae69d344 100644
--- a/drivers/acpi/internal.h
+++ b/drivers/acpi/internal.h
@@ -87,6 +87,7 @@ void acpi_device_add_finalize(struct acpi_device *device);
 void acpi_free_pnp_ids(struct acpi_device_pnp *pnp);
 int acpi_bind_one(struct device *dev, acpi_handle handle);
 int acpi_unbind_one(struct device *dev);
+void acpi_bus_hot_remove_device(void *context);
 
 /* --------------------------------------------------------------------------
                                   Power Resource

commit 71bba8fafac8975dbb684df4098d2dd6baac1fda
Author: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
Date:   Thu Nov 7 01:40:50 2013 +0100

    ACPI: Remove acpi_pci_slot_init() headers from internal.h
    
    Since acpi_pci_slot_init() is now called from acpi_pci_init()
    and pci-acpi.h contains its header, remove that header (and the
    empty definition of that function for CONFIG_ACPI_PCI_SLOT unset)
    from internal.h as it doesn't have to be there any more.  That also
    avoids a build warning about duplicate function definitions for
    CONFIG_ACPI_PCI_SLOT unset.
    
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>

diff --git a/drivers/acpi/internal.h b/drivers/acpi/internal.h
index 20f423337e1f..ebc3ad0a188d 100644
--- a/drivers/acpi/internal.h
+++ b/drivers/acpi/internal.h
@@ -26,11 +26,6 @@
 acpi_status acpi_os_initialize1(void);
 int init_acpi_device_notify(void);
 int acpi_scan_init(void);
-#ifdef	CONFIG_ACPI_PCI_SLOT
-void acpi_pci_slot_init(void);
-#else
-static inline void acpi_pci_slot_init(void) { }
-#endif
 void acpi_pci_root_init(void);
 void acpi_pci_link_init(void);
 void acpi_pci_root_hp_init(void);

commit fbc9fe1b4f222a7c575e3bd8e9defe59c6190a04
Author: Aaron Lu <aaron.lu@intel.com>
Date:   Fri Oct 11 21:27:45 2013 +0800

    ACPI / video: Do not register backlight if win8 and native interface exists
    
    According to Matthew Garrett, "Windows 8 leaves backlight control up
    to individual graphics drivers rather than making ACPI calls itself.
    There's plenty of evidence to suggest that the Intel driver for
    Windows [8] doesn't use the ACPI interface, including the fact that
    it's broken on a bunch of machines when the OS claims to support
    Windows 8.  The simplest thing to do appears to be to disable the
    ACPI backlight interface on these systems".
    
    So for Win8 systems, if there is native backlight control interface
    registered by GPU driver, ACPI video does not need to register its own.
    Since there are systems that don't work well with this approach, a
    parameter for video module named use_native_backlight is introduced and
    has the value of false by default. For users who have a broken ACPI
    video backlight interface, video.use_native_backlight=1 is needed in
    kernel cmdline.
    
    Signed-off-by: Aaron Lu <aaron.lu@intel.com>
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>

diff --git a/drivers/acpi/internal.h b/drivers/acpi/internal.h
index 20f423337e1f..e9304dc7ebfa 100644
--- a/drivers/acpi/internal.h
+++ b/drivers/acpi/internal.h
@@ -169,9 +169,7 @@ int acpi_create_platform_device(struct acpi_device *adev,
 					Video
   -------------------------------------------------------------------------- */
 #if defined(CONFIG_ACPI_VIDEO) || defined(CONFIG_ACPI_VIDEO_MODULE)
-bool acpi_video_backlight_quirks(void);
-#else
-static inline bool acpi_video_backlight_quirks(void) { return false; }
+bool acpi_osi_is_win8(void);
 #endif
 
 #endif /* _ACPI_INTERNAL_H_ */

commit f3ce717e60572421f56d89c9a85ac42e634d16e7
Merge: d4e4ab86bcba e73d3136355f
Author: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
Date:   Wed Aug 14 23:22:45 2013 +0200

    Merge back earlier 'acpi-assorted' material

commit 8e5c2b776ae4c35f54547c017e0a943429f5748a
Author: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
Date:   Thu Jul 25 21:43:39 2013 +0200

    Revert "ACPI / video / i915: No ACPI backlight if firmware expects Windows 8"
    
    We attempted to address a regression introduced by commit a57f7f9
    (ACPICA: Add Windows8/Server2012 string for _OSI method.) after which
    ACPI video backlight support doesn't work on a number of systems,
    because the relevant AML methods in the ACPI tables in their BIOSes
    become useless after the BIOS has been told that the OS is compatible
    with Windows 8.  That problem is tracked by the bug entry at:
    
    https://bugzilla.kernel.org/show_bug.cgi?id=51231
    
    Commit 8c5bd7a (ACPI / video / i915: No ACPI backlight if firmware
    expects Windows 8) introduced for this purpose essentially prevented
    the ACPI backlight support from being used if the BIOS had been told
    that the OS was compatible with Windows 8 and the i915 driver was
    loaded, in which case the backlight would always be handled by i915.
    Unfortunately, however, that turned out to cause problems with
    backlight to appear on multiple systems with symptoms indicating that
    i915 was unable to control the backlight on those systems as
    expected.
    
    For this reason, revert commit 8c5bd7a, but leave the function
    acpi_video_backlight_quirks() introduced by it, because another
    commit on top of it uses that function.
    
    References: https://lkml.org/lkml/2013/7/21/119
    References: https://lkml.org/lkml/2013/7/22/261
    References: https://lkml.org/lkml/2013/7/23/429
    References: https://lkml.org/lkml/2013/7/23/459
    References: https://lkml.org/lkml/2013/7/23/81
    References: https://lkml.org/lkml/2013/7/24/27
    Reported-and-tested-by: James Hogan <james@albanarts.com>
    Reported-and-tested-by: Kamal Mostafa <kamal@canonical.com>
    Reported-and-tested-by: Jörg Otte <jrg.otte@gmail.com>
    Reported-and-tested-by: Steven Newbury <steve@snewbury.org.uk>
    Reported-by: Martin Steigerwald <Martin@lichtvoll.de>
    Reported-by: Kalle Valo <kvalo@adurom.com>
    Tested-by: Joerg Platte <jplatte@naasa.net>
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>

diff --git a/drivers/acpi/internal.h b/drivers/acpi/internal.h
index 227aca77ee1e..5da44e81dd4d 100644
--- a/drivers/acpi/internal.h
+++ b/drivers/acpi/internal.h
@@ -169,10 +169,8 @@ int acpi_create_platform_device(struct acpi_device *adev,
   -------------------------------------------------------------------------- */
 #if defined(CONFIG_ACPI_VIDEO) || defined(CONFIG_ACPI_VIDEO_MODULE)
 bool acpi_video_backlight_quirks(void);
-bool acpi_video_verify_backlight_support(void);
 #else
 static inline bool acpi_video_backlight_quirks(void) { return false; }
-static inline bool acpi_video_verify_backlight_support(void) { return false; }
 #endif
 
 #endif /* _ACPI_INTERNAL_H_ */

commit 1129c92faa069581bf3acf34cae92477bd6161d8
Author: Lv Zheng <lv.zheng@intel.com>
Date:   Tue Jul 23 16:11:55 2013 +0800

    ACPI: Cleanup sparse warning on acpi_os_initialize1()
    
    This patch cleans up the following sparse warning:
    
    # make C=2 drivers/acpi/osl.o
    ...
    drivers/acpi/osl.c:1775:20: warning: symbol 'acpi_os_initialize1' was not declared. Should it be static?
    ...
      CC      drivers/acpi/osl.o
    
    Signed-off-by: Lv Zheng <lv.zheng@intel.com>
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>

diff --git a/drivers/acpi/internal.h b/drivers/acpi/internal.h
index 3a50a34fe176..b636b7481f31 100644
--- a/drivers/acpi/internal.h
+++ b/drivers/acpi/internal.h
@@ -23,6 +23,7 @@
 
 #define PREFIX "ACPI: "
 
+acpi_status acpi_os_initialize1(void);
 int init_acpi_device_notify(void);
 int acpi_scan_init(void);
 #ifdef	CONFIG_ACPI_PCI_SLOT

commit 8c5bd7adb2ce47e6aa39d17b2375f69b0c0aa255
Author: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
Date:   Thu Jul 18 02:08:06 2013 +0200

    ACPI / video / i915: No ACPI backlight if firmware expects Windows 8
    
    According to Matthew Garrett, "Windows 8 leaves backlight control up
    to individual graphics drivers rather than making ACPI calls itself.
    There's plenty of evidence to suggest that the Intel driver for
    Windows [8] doesn't use the ACPI interface, including the fact that
    it's broken on a bunch of machines when the OS claims to support
    Windows 8.  The simplest thing to do appears to be to disable the
    ACPI backlight interface on these systems".
    
    There's a problem with that approach, however, because simply
    avoiding to register the ACPI backlight interface if the firmware
    calls _OSI for Windows 8 may not work in the following situations:
     (1) The ACPI backlight interface actually works on the given system
         and the i915 driver is not loaded (e.g. another graphics driver
         is used).
     (2) The ACPI backlight interface doesn't work on the given system,
         but there is a vendor platform driver that will register its
         own, equally broken, backlight interface if not prevented from
         doing so by the ACPI subsystem.
    Therefore we need to allow the ACPI backlight interface to be
    registered until the i915 driver is loaded which then will unregister
    it if the firmware has called _OSI for Windows 8 (or will register
    the ACPI video driver without backlight support if not already
    present).
    
    For this reason, introduce an alternative function for registering
    ACPI video, acpi_video_register_with_quirks(), that will check
    whether or not the ACPI video driver has already been registered
    and whether or not the backlight Windows 8 quirk has to be applied.
    If the quirk has to be applied, it will block the ACPI backlight
    support and either unregister the backlight interface if the ACPI
    video driver has already been registered, or register the ACPI
    video driver without the backlight interface otherwise.  Make
    the i915 driver use acpi_video_register_with_quirks() instead of
    acpi_video_register() in i915_driver_load().
    
    This change is based on earlier patches from Matthew Garrett,
    Chun-Yi Lee and Seth Forshee and includes a fix from Aaron Lu's.
    
    References: https://bugzilla.kernel.org/show_bug.cgi?id=51231
    Tested-by: Aaron Lu <aaron.lu@intel.com>
    Tested-by: Igor Gnatenko <i.gnatenko.brain@gmail.com>
    Tested-by: Yves-Alexis Perez <corsac@debian.org>
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Reviewed-by: Aaron Lu <aaron.lu@intel.com>
    Acked-by: Matthew Garrett <matthew.garrett@nebula.com>

diff --git a/drivers/acpi/internal.h b/drivers/acpi/internal.h
index 3a50a34fe176..227aca77ee1e 100644
--- a/drivers/acpi/internal.h
+++ b/drivers/acpi/internal.h
@@ -164,4 +164,15 @@ struct platform_device;
 int acpi_create_platform_device(struct acpi_device *adev,
 				const struct acpi_device_id *id);
 
+/*--------------------------------------------------------------------------
+					Video
+  -------------------------------------------------------------------------- */
+#if defined(CONFIG_ACPI_VIDEO) || defined(CONFIG_ACPI_VIDEO_MODULE)
+bool acpi_video_backlight_quirks(void);
+bool acpi_video_verify_backlight_support(void);
+#else
+static inline bool acpi_video_backlight_quirks(void) { return false; }
+static inline bool acpi_video_verify_backlight_support(void) { return false; }
+#endif
+
 #endif /* _ACPI_INTERNAL_H_ */

commit bdc8f09685a25a12f2f5282f56672ba663ecb88c
Merge: f4c9f4023899 eff9a4b62b14
Author: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
Date:   Fri Jun 28 13:00:38 2013 +0200

    Merge branch 'acpi-assorted'
    
    * acpi-assorted:
      ACPI / EC: Add HP Folio 13 to ec_dmi_table in order to skip DSDT scan
      ACPI: Add CMOS RTC Operation Region handler support
      ACPI: Remove unused flags in acpi_device_flags
      ACPI: Remove useless initializers
      ACPI / battery: Make sure all spaces are in correct places
      ACPI: add _STA evaluation at do_acpi_find_child()
      ACPI / EC: access user space with get_user()/put_user()

commit a204dbc61b7f4cb1a7e2cb3ad057b135164782da
Merge: 45e00374db94 08f502c1c343
Author: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
Date:   Fri Jun 28 12:58:05 2013 +0200

    Merge branch 'acpi-hotplug'
    
    * acpi-hotplug:
      ACPI: Do not use CONFIG_ACPI_HOTPLUG_MEMORY_MODULE
      ACPI / cpufreq: Add ACPI processor device IDs to acpi-cpufreq
      Memory hotplug: Move alternative function definitions to header
      ACPI / processor: Fix potential NULL pointer dereference in acpi_processor_add()
      Memory hotplug / ACPI: Simplify memory removal
      ACPI / scan: Add second pass of companion offlining to hot-remove code
      Driver core / MM: Drop offline_memory_block()
      ACPI / processor: Pass processor object handle to acpi_bind_one()
      ACPI: Drop removal_type field from struct acpi_device
      Driver core / memory: Simplify __memory_block_change_state()
      ACPI / processor: Initialize per_cpu(processors, pr->id) properly
      CPU: Fix sysfs cpu/online of offlined CPUs
      Driver core: Introduce offline/online callbacks for memory blocks
      ACPI / memhotplug: Bind removable memory blocks to ACPI device nodes
      ACPI / processor: Use common hotplug infrastructure
      ACPI / hotplug: Use device offline/online for graceful hot-removal
      Driver core: Use generic offline/online for CPU offline/online
      Driver core: Add offline/online device operations

commit 2fa97feb4406c546b52e35b6b6c50cb8f63425d2
Author: Lan Tianyu <tianyu.lan@intel.com>
Date:   Wed Jun 5 02:27:50 2013 +0000

    ACPI: Add CMOS RTC Operation Region handler support
    
    On HP Folio 13-2000, the BIOS defines a CMOS RTC Operation Region and
    the EC's _REG methord accesses that region.  Thus an appropriate
    address space handler must be registered for that region before the
    EC driver is loaded.
    
    Introduce a mechanism for adding CMOS RTC address space handlers.
    Register an ACPI scan handler for CMOS RTC devices such that, when
    a device of that kind is detected during an ACPI namespace scan, a
    common CMOS RTC operation region address space handler will be
    installed for it.
    
    References: https://bugzilla.kernel.org/show_bug.cgi?id=54621
    Reported-and-tested-by: Stefan Nagy <public@stefan-nagy.at>
    Signed-off-by: Lan Tianyu <tianyu.lan@intel.com>
    Cc: 3.9+ <stable@vger.kernel.org>
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>

diff --git a/drivers/acpi/internal.h b/drivers/acpi/internal.h
index 297cbf456f86..4163d4ba0175 100644
--- a/drivers/acpi/internal.h
+++ b/drivers/acpi/internal.h
@@ -45,6 +45,11 @@ void acpi_memory_hotplug_init(void);
 #else
 static inline void acpi_memory_hotplug_init(void) {}
 #endif
+#ifdef CONFIG_X86
+void acpi_cmos_rtc_init(void);
+#else
+static inline void acpi_cmos_rtc_init(void) {}
+#endif
 
 void acpi_sysfs_add_hotplug_profile(struct acpi_hotplug_profile *hotplug,
 				    const char *name);

commit 94add0f82469fa3c4ff978d03a34da90813c819d
Author: Jiang Liu <jiang.liu@huawei.com>
Date:   Sun Jun 23 00:59:55 2013 +0200

    ACPI / dock: Initialize ACPI dock subsystem upfront
    
    Commit 3b63aaa70e1 (PCI: acpiphp: Do not use ACPI PCI subdriver
    mechanism) introduced an ACPI dock support regression, because it
    changed the relative initialization order of the ACPI dock subsystem
    and the ACPI-based PCI hotplug (acpiphp).
    
    Namely, the ACPI dock subsystem has to be initialized before
    acpiphp_enumerate_slots() is first run, which after commit
    3b63aaa70e1 happens during the initial enumeration of the PCI
    hierarchy triggered by the initial ACPI namespace scan in
    acpi_scan_init().  For this reason, the dock subsystem has to be
    initialized before the initial ACPI namespace scan in
    acpi_scan_init().
    
    To make that happen, modify the ACPI dock subsystem to be
    non-modular and add the invocation of its initialization routine,
    acpi_dock_init(), to acpi_scan_init() directly before the initial
    namespace scan.
    
    [rjw: Changelog, removal of dock_exit().]
    References: https://bugzilla.kernel.org/show_bug.cgi?id=59501
    Reported-and-tested-by: Alexander E. Patrakov <patrakov@gmail.com>
    Tested-by: Illya Klymov <xanf@xanf.me>
    Signed-off-by: Jiang Liu <jiang.liu@huawei.com>
    Acked-by: Yinghai Lu <yinghai@kernel.org>
    Cc: 3.9+ <stable@vger.kernel.org>
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>

diff --git a/drivers/acpi/internal.h b/drivers/acpi/internal.h
index 297cbf456f86..c610a76d92c4 100644
--- a/drivers/acpi/internal.h
+++ b/drivers/acpi/internal.h
@@ -40,6 +40,11 @@ void acpi_container_init(void);
 #else
 static inline void acpi_container_init(void) {}
 #endif
+#ifdef CONFIG_ACPI_DOCK
+void acpi_dock_init(void);
+#else
+static inline void acpi_dock_init(void) {}
+#endif
 #ifdef CONFIG_ACPI_HOTPLUG_MEMORY
 void acpi_memory_hotplug_init(void);
 #else

commit ee8209fd026b074bb8eb75bece516a338a281b1b
Author: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
Date:   Wed May 8 11:55:48 2013 +0300

    dma: acpi-dma: parse CSRT to extract additional resources
    
    Since we have CSRT only to get additional DMA controller resources, let's get
    rid of drivers/acpi/csrt.c and move its logic inside ACPI DMA helpers code.
    
    Signed-off-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    Signed-off-by: Mika Westerberg <mika.westerberg@linux.intel.com>
    Acked-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Signed-off-by: Vinod Koul <vinod.koul@intel.com>

diff --git a/drivers/acpi/internal.h b/drivers/acpi/internal.h
index 6f1afd9118c8..297cbf456f86 100644
--- a/drivers/acpi/internal.h
+++ b/drivers/acpi/internal.h
@@ -35,7 +35,6 @@ void acpi_pci_link_init(void);
 void acpi_pci_root_hp_init(void);
 void acpi_platform_init(void);
 int acpi_sysfs_init(void);
-void acpi_csrt_init(void);
 #ifdef CONFIG_ACPI_CONTAINER
 void acpi_container_init(void);
 #else

commit ac212b6980d8d5eda705864fc5a8ecddc6d6eacc
Author: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
Date:   Fri May 3 00:26:22 2013 +0200

    ACPI / processor: Use common hotplug infrastructure
    
    Split the ACPI processor driver into two parts, one that is
    non-modular, resides in the ACPI core and handles the enumeration
    and hotplug of processors and one that implements the rest of the
    existing processor driver functionality.
    
    The non-modular part uses an ACPI scan handler object to enumerate
    processors on the basis of information provided by the ACPI namespace
    and to hook up with the common ACPI hotplug infrastructure.  It also
    populates the ACPI handle of each processor device having a
    corresponding object in the ACPI namespace, which allows the driver
    proper to bind to those devices, and makes the driver bind to them
    if it is readily available (i.e. loaded) when the scan handler's
    .attach() routine is running.
    
    There are a few reasons to make this change.
    
    First, switching the ACPI processor driver to using the common ACPI
    hotplug infrastructure reduces code duplication and size considerably,
    even though a new file is created along with a header comment etc.
    
    Second, since the common hotplug code attempts to offline devices
    before starting the (non-reversible) removal procedure, it will abort
    (and possibly roll back) hot-remove operations involving processors
    if cpu_down() returns an error code for one of them instead of
    continuing them blindly (if /sys/firmware/acpi/hotplug/force_remove
    is unset).  That is a more desirable behavior than what the current
    code does.
    
    Finally, the separation of the scan/hotplug part from the driver
    proper makes it possible to simplify the driver's .remove() routine,
    because it doesn't need to worry about the possible cleanup related
    to processor removal any more (the scan/hotplug part is responsible
    for that now) and can handle device removal and driver removal
    symmetricaly (i.e. as appropriate).
    
    Some user-visible changes in sysfs are made (for example, the
    'sysdev' link from the ACPI device node to the processor device's
    directory is gone and a 'physical_node' link is present instead
    and a corresponding 'firmware_node' is present in the processor
    device's directory, the processor driver is now visible under
    /sys/bus/cpu/drivers/ and bound to the processor device), but
    that shouldn't affect the functionality that users care about
    (frequency scaling, C-states and thermal management).
    
    Tested on my venerable Toshiba Portege R500.
    
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Acked-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Reviewed-by: Toshi Kani <toshi.kani@hp.com>

diff --git a/drivers/acpi/internal.h b/drivers/acpi/internal.h
index 4548f0a114ce..bf792595132c 100644
--- a/drivers/acpi/internal.h
+++ b/drivers/acpi/internal.h
@@ -33,6 +33,7 @@ static inline void acpi_pci_slot_init(void) { }
 void acpi_pci_root_init(void);
 void acpi_pci_link_init(void);
 void acpi_pci_root_hp_init(void);
+void acpi_processor_init(void);
 void acpi_platform_init(void);
 int acpi_sysfs_init(void);
 void acpi_csrt_init(void);
@@ -79,6 +80,8 @@ void acpi_init_device_object(struct acpi_device *device, acpi_handle handle,
 			     int type, unsigned long long sta);
 void acpi_device_add_finalize(struct acpi_device *device);
 void acpi_free_pnp_ids(struct acpi_device_pnp *pnp);
+int acpi_bind_one(struct device *dev, acpi_handle handle);
+int acpi_unbind_one(struct device *dev);
 
 /* --------------------------------------------------------------------------
                                   Power Resource

commit 683058e315f00a216fd6c79df4f63bc9945ca434
Author: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
Date:   Fri May 3 00:26:16 2013 +0200

    ACPI / hotplug: Use device offline/online for graceful hot-removal
    
    Modify the generic ACPI hotplug code to be able to check if devices
    scheduled for hot-removal may be gracefully removed from the system
    using the device offline/online mechanism introduced previously.
    
    Namely, make acpi_scan_hot_remove() handling device hot-removal call
    device_offline() for all physical companions of the ACPI device nodes
    involved in the operation and check the results.  If any of the
    device_offline() calls fails, the function will not progress to the
    removal phase (which cannot be aborted), unless its (new) force
    argument is set (in case of a failing offline it will put the devices
    offlined by it back online).
    
    In support of 'forced' device hot-removal, add a new sysfs attribute
    'force_remove' that will reside under /sys/firmware/acpi/hotplug/.
    
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Reviewed-by: Toshi Kani <toshi.kani@hp.com>

diff --git a/drivers/acpi/internal.h b/drivers/acpi/internal.h
index 6f1afd9118c8..4548f0a114ce 100644
--- a/drivers/acpi/internal.h
+++ b/drivers/acpi/internal.h
@@ -47,6 +47,8 @@ void acpi_memory_hotplug_init(void);
 static inline void acpi_memory_hotplug_init(void) {}
 #endif
 
+extern bool acpi_force_hot_remove;
+
 void acpi_sysfs_add_hotplug_profile(struct acpi_hotplug_profile *hotplug,
 				    const char *name);
 int acpi_scan_add_handler_with_hotplug(struct acpi_scan_handler *handler,

commit 2467d7b7037438f2d1fed826fc5217dddf4b37fb
Merge: 929c6dd4195f cf8df962aa83
Author: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
Date:   Sun Apr 28 01:53:41 2013 +0200

    Merge branch 'acpi-lpss'
    
    * acpi-lpss:
      ACPI / LPSS: make code less confusing for reader
      ACPI / LPSS: Add support for exposing LTR registers to user space
      ACPI / scan: Add special handler for Intel Lynxpoint LPSS devices

commit c0af41757f406651cdd32de3e915753746c2948a
Author: Toshi Kani <toshi.kani@hp.com>
Date:   Mon Mar 4 21:30:42 2013 +0000

    ACPI: Update PNPID set/free interfaces
    
    This patch introduces acpi_set_pnp_ids() and acpi_free_pnp_ids(),
    which are updated from acpi_device_set_id() and acpi_free_ids(),
    to setup and free acpi_device_pnp for a given acpi_handle.  They
    can be called without acpi_device.
    
    Signed-off-by: Toshi Kani <toshi.kani@hp.com>
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>

diff --git a/drivers/acpi/internal.h b/drivers/acpi/internal.h
index 7215821ccb25..7f094adfe05a 100644
--- a/drivers/acpi/internal.h
+++ b/drivers/acpi/internal.h
@@ -71,7 +71,7 @@ int acpi_device_add(struct acpi_device *device,
 void acpi_init_device_object(struct acpi_device *device, acpi_handle handle,
 			     int type, unsigned long long sta);
 void acpi_device_add_finalize(struct acpi_device *device);
-void acpi_free_ids(struct acpi_device *device);
+void acpi_free_pnp_ids(struct acpi_device_pnp *pnp);
 
 /* --------------------------------------------------------------------------
                                   Power Resource

commit f58b082aed43400c03e53beacc50a9f9eb23ac91
Author: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
Date:   Wed Mar 6 23:46:20 2013 +0100

    ACPI / scan: Add special handler for Intel Lynxpoint LPSS devices
    
    Devices on the Intel Lynxpoint Low Power Subsystem (LPSS) have some
    common features that aren't shared with any other platform devices,
    including the clock and LTR (Latency Tolerance Reporting) registers.
    It is better to handle those features in common code than to bother
    device drivers with doing that (I/O functionality-wise the LPSS
    devices are generally compatible with other devices that don't
    have those special registers and may be handled by the same drivers).
    
    The clock registers of the LPSS devices are now taken care of by
    the special clk-x86-lpss driver, but the MMIO mappings used for
    accessing those registers can also be used for accessing the LTR
    registers on those devices (LTR support for the Lynxpoint LPSS is
    going to be added by a subsequent patch).  Thus it is convenient
    to add a special ACPI scan handler for the Lynxpoint LPSS devices
    that will create the MMIO mappings for accessing the clock (and
    LTR in the future) registers and will register the LPSS devices'
    clocks, so the clk-x86-lpss driver will only need to take care of
    the main Lynxpoint LPSS clock.
    
    Introduce a special ACPI scan handler for Intel Lynxpoint LPSS
    devices as described above.  This also reduces overhead related to
    browsing the ACPI namespace in search of the LPSS devices before the
    registration of their clocks, removes some LPSS-specific (and
    somewhat ugly) code from acpi_platform.c and shrinks the overall code
    size slightly.
    
    Signed-off-by: Mika Westerberg <mika.westerberg@linux.intel.com>
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Acked-by: Mike Turquette <mturquette@linaro.org>

diff --git a/drivers/acpi/internal.h b/drivers/acpi/internal.h
index 3c94a732b4b3..e227819217fb 100644
--- a/drivers/acpi/internal.h
+++ b/drivers/acpi/internal.h
@@ -48,6 +48,11 @@ int acpi_debugfs_init(void);
 #else
 static inline void acpi_debugfs_init(void) { return; }
 #endif
+#ifdef CONFIG_X86_INTEL_LPSS
+void acpi_lpss_init(void);
+#else
+static inline void acpi_lpss_init(void) {}
+#endif
 
 /* --------------------------------------------------------------------------
                      Device Node Initialization / Removal
@@ -131,4 +136,7 @@ static inline void suspend_nvs_restore(void) {}
   -------------------------------------------------------------------------- */
 struct platform_device;
 
+int acpi_create_platform_device(struct acpi_device *adev,
+				const struct acpi_device_id *id);
+
 #endif /* _ACPI_INTERNAL_H_ */

commit 0a34764411aaab0114aa3f3656fda33a69a46d10
Author: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
Date:   Sun Mar 3 23:18:03 2013 +0100

    ACPI / scan: Make memory hotplug driver use struct acpi_scan_handler
    
    Make the ACPI memory hotplug driver use struct acpi_scan_handler
    for representing the object used to set up ACPI memory hotplug
    functionality and to remove hotplug memory ranges and data
    structures used by the driver before unregistering ACPI device
    nodes representing memory.  Register the new struct acpi_scan_handler
    object with the help of acpi_scan_add_handler_with_hotplug() to allow
    user space to manipulate the attributes of the memory hotplug
    profile.
    
    This results in a significant reduction of the drvier's code size
    and removes some ACPI hotplug code duplication.
    
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Acked-by: Toshi Kani <toshi.kani@hp.com>
    Tested-by: Toshi Kani <toshi.kani@hp.com>

diff --git a/drivers/acpi/internal.h b/drivers/acpi/internal.h
index c708e4bad967..7215821ccb25 100644
--- a/drivers/acpi/internal.h
+++ b/drivers/acpi/internal.h
@@ -41,6 +41,11 @@ void acpi_container_init(void);
 #else
 static inline void acpi_container_init(void) {}
 #endif
+#ifdef CONFIG_ACPI_HOTPLUG_MEMORY
+void acpi_memory_hotplug_init(void);
+#else
+static inline void acpi_memory_hotplug_init(void) {}
+#endif
 
 void acpi_sysfs_add_hotplug_profile(struct acpi_hotplug_profile *hotplug,
 				    const char *name);

commit 3f8055c3583640ed3e4c81864dd76e06a7faa505
Author: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
Date:   Sun Mar 3 23:08:16 2013 +0100

    ACPI / hotplug: Introduce user space interface for hotplug profiles
    
    Introduce user space interface for manipulating hotplug profiles
    associated with ACPI scan handlers.
    
    The interface consists of sysfs directories under
    /sys/firmware/acpi/hotplug/, one for each hotplug profile, containing
    an attribute allowing user space to manipulate the enabled field of
    the corresponding profile.  Namely, switching the enabled attribute
    from '0' to '1' will cause the common hotplug notify handler to be
    installed for all ACPI namespace objects representing devices matching
    the scan handler associated with the given hotplug profile (and
    analogously for the converse switch).
    
    Drivers willing to use the new user space interface should add their
    ACPI scan handlers with the help of new funtion
    acpi_scan_add_handler_with_hotplug().
    
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Acked-by: Toshi Kani <toshi.kani@hp.com>
    Tested-by: Toshi Kani <toshi.kani@hp.com>

diff --git a/drivers/acpi/internal.h b/drivers/acpi/internal.h
index 3c94a732b4b3..c708e4bad967 100644
--- a/drivers/acpi/internal.h
+++ b/drivers/acpi/internal.h
@@ -42,6 +42,12 @@ void acpi_container_init(void);
 static inline void acpi_container_init(void) {}
 #endif
 
+void acpi_sysfs_add_hotplug_profile(struct acpi_hotplug_profile *hotplug,
+				    const char *name);
+int acpi_scan_add_handler_with_hotplug(struct acpi_scan_handler *handler,
+				       const char *hotplug_profile_name);
+void acpi_scan_hotplug_enabled(struct acpi_hotplug_profile *hotplug, bool val);
+
 #ifdef CONFIG_DEBUG_FS
 extern struct dentry *acpi_debugfs_dir;
 int acpi_debugfs_init(void);

commit c41b3810c09e60664433548c5218cc6ece6a8903
Merge: 556f12f602ac 4383822020c5
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Mon Feb 25 21:25:17 2013 -0800

    Merge tag 'pm+acpi-fixes-3.9-rc1' of git://git.kernel.org/pub/scm/linux/kernel/git/rafael/linux-pm
    
    Pull ACPI and power management fixes from Rafael Wysocki:
    
     - Fixes for blackfin and microblaze build problems introduced by the
       removal of global pm_idle.  From Lars-Peter Clausen.
    
     - OPP core build fix from Shawn Guo.
    
     - Error condition check fix for the new imx6q-cpufreq driver from Wei
       Yongjun.
    
     - Fix for an AER driver crash related to the lack of APEI
       initialization for acpi=off.  From Rafael J Wysocki.
    
     - Fix for a USB breakage on Thinkpad T430 related to ACPI power
       resources and PCI wakeup from Rafael J.  Wysocki.
    
    * tag 'pm+acpi-fixes-3.9-rc1' of git://git.kernel.org/pub/scm/linux/kernel/git/rafael/linux-pm:
      ACPI / PM: Take unusual configurations of power resources into account
      imx6q-cpufreq: fix return value check in imx6q_cpufreq_probe()
      PM / OPP: fix condition for empty of_init_opp_table()
      ACPI / APEI: Fix crash in apei_hest_parse() for acpi=off
      microblaze idle: Fix compile error
      blackfin idle: Fix compile error

commit 556f12f602ac0a18a82ca83e9f8e8547688fc633
Merge: fffddfd6c8e0 018ba0a6efad
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Mon Feb 25 21:18:18 2013 -0800

    Merge tag 'pci-v3.9-changes' of git://git.kernel.org/pub/scm/linux/kernel/git/helgaas/pci
    
    Pull PCI changes from Bjorn Helgaas:
     "Host bridge hotplug
        - Major overhaul of ACPI host bridge add/start (Rafael Wysocki, Yinghai Lu)
        - Major overhaul of PCI/ACPI binding (Rafael Wysocki, Yinghai Lu)
        - Split out ACPI host bridge and ACPI PCI device hotplug (Yinghai Lu)
        - Stop caching _PRT and make independent of bus numbers (Yinghai Lu)
    
      PCI device hotplug
        - Clean up cpqphp dead code (Sasha Levin)
        - Disable ARI unless device and upstream bridge support it (Yijing Wang)
        - Initialize all hot-added devices (not functions 0-7) (Yijing Wang)
    
      Power management
        - Don't touch ASPM if disabled (Joe Lawrence)
        - Fix ASPM link state management (Myron Stowe)
    
      Miscellaneous
        - Fix PCI_EXP_FLAGS accessor (Alex Williamson)
        - Disable Bus Master in pci_device_shutdown (Konstantin Khlebnikov)
        - Document hotplug resource and MPS parameters (Yijing Wang)
        - Add accessor for PCIe capabilities (Myron Stowe)
        - Drop pciehp suspend/resume messages (Paul Bolle)
        - Make pci_slot built-in only (not a module) (Jiang Liu)
        - Remove unused PCI/ACPI bind ops (Jiang Liu)
        - Removed used pci_root_bus (Bjorn Helgaas)"
    
    * tag 'pci-v3.9-changes' of git://git.kernel.org/pub/scm/linux/kernel/git/helgaas/pci: (51 commits)
      PCI/ACPI: Don't cache _PRT, and don't associate them with bus numbers
      PCI: Fix PCI Express Capability accessors for PCI_EXP_FLAGS
      ACPI / PCI: Make pci_slot built-in only, not a module
      PCI/PM: Clear state_saved during suspend
      PCI: Use atomic_inc_return() rather than atomic_add_return()
      PCI: Catch attempts to disable already-disabled devices
      PCI: Disable Bus Master unconditionally in pci_device_shutdown()
      PCI: acpiphp: Remove dead code for PCI host bridge hotplug
      PCI: acpiphp: Create companion ACPI devices before creating PCI devices
      PCI: Remove unused "rc" in virtfn_add_bus()
      PCI: pciehp: Drop suspend/resume ENTRY messages
      PCI/ASPM: Don't touch ASPM if forcibly disabled
      PCI/ASPM: Deallocate upstream link state even if device is not PCIe
      PCI: Document MPS parameters pci=pcie_bus_safe, pci=pcie_bus_perf, etc
      PCI: Document hpiosize= and hpmemsize= resource reservation parameters
      PCI: Use PCI Express Capability accessor
      PCI: Introduce accessor to retrieve PCIe Capabilities Register
      PCI: Put pci_dev in device tree as early as possible
      PCI: Skip attaching driver in device_add()
      PCI: acpiphp: Keep driver loaded even if no slots found
      ...

commit 4383822020c54c21eb2eb939a3233b44a51e8ca0
Merge: bf900afba96b b5d667eb392e
Author: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
Date:   Sat Feb 23 23:15:43 2013 +0100

    Merge branch 'acpi-pm' into fixes
    
    * acpi-pm:
      ACPI / PM: Take unusual configurations of power resources into account

commit b5d667eb392ed901fc7ae76869c7a130559e193c
Author: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
Date:   Sat Feb 23 23:15:21 2013 +0100

    ACPI / PM: Take unusual configurations of power resources into account
    
    Commit d2e5f0c (ACPI / PCI: Rework the setup and cleanup of device
    wakeup) moved the initial disabling of system wakeup for PCI devices
    into a place where it can actually work and that exposed a hidden old
    issue with crap^Wunusual system designs where the same power
    resources are used for both wakeup power and device power control at
    run time.
    
    Namely, say there is one power resource such that the ACPI power
    state D0 of a PCI device depends on that power resource (i.e. the
    device is in D0 when that power resource is "on") and it is used
    as a wakeup power resource for the same device.  Then, calling
    acpi_pci_sleep_wake(pci_dev, false) for the device in question will
    cause the reference counter of that power resource to drop to 0,
    which in turn will cause it to be turned off.  As a result, the
    device will go into D3cold at that point, although it should have
    stayed in D0.
    
    As it turns out, that happens to USB controllers on some laptops
    and USB becomes unusable on those machines as a result, which is
    a major regression from v3.8.
    
    To fix this problem, (1) increment the reference counters of wakup
    power resources during their initialization if they are "on"
    initially, (2) prevent acpi_disable_wakeup_device_power() from
    decrementing the reference counters of wakeup power resources that
    were not enabled for wakeup power previously, and (3) prevent
    acpi_enable_wakeup_device_power() from incrementing the reference
    counters of wakeup power resources that already are enabled for
    wakeup power.
    
    In addition to that, if it is impossible to determine the initial
    states of wakeup power resources, avoid enabling wakeup for devices
    whose wakeup power depends on those power resources.
    
    Reported-by: Dave Jones <davej@redhat.com>
    Reported-by: Fabio Baltieri <fabio.baltieri@linaro.org>
    Tested-by: Fabio Baltieri <fabio.baltieri@linaro.org>
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>

diff --git a/drivers/acpi/internal.h b/drivers/acpi/internal.h
index c5a61cd6c1a5..6306d2ecb428 100644
--- a/drivers/acpi/internal.h
+++ b/drivers/acpi/internal.h
@@ -56,7 +56,7 @@ int acpi_extract_power_resources(union acpi_object *package, unsigned int start,
 				 struct list_head *list);
 int acpi_add_power_resource(acpi_handle handle);
 void acpi_power_add_remove_device(struct acpi_device *adev, bool add);
-int acpi_power_min_system_level(struct list_head *list);
+int acpi_power_wakeup_list_init(struct list_head *list, int *system_level);
 int acpi_device_sleep_wake(struct acpi_device *dev,
                            int enable, int sleep_state, int dev_state);
 int acpi_power_get_inferred_state(struct acpi_device *device, int *state);

commit ad06bff31fbf0aba4e5faae936e12292a7972b05
Merge: 20f24208f631 ab1a2e038ff2
Author: Bjorn Helgaas <bhelgaas@google.com>
Date:   Fri Feb 15 17:44:01 2013 -0700

    Merge branch 'pci/jiang-pci_slot-kconfig' into next
    
    * pci/jiang-pci_slot-kconfig:
      ACPI / PCI: Make pci_slot built-in only, not a module

commit ab1a2e038ff2336502e95ec6492c0364a9fc70d0
Author: Jiang Liu <liuj97@gmail.com>
Date:   Sat Jan 19 00:07:42 2013 +0800

    ACPI / PCI: Make pci_slot built-in only, not a module
    
    As discussed in thread at https://patchwork.kernel.org/patch/1946851/,
    there's no value in supporting CONFIG_ACPI_PCI_SLOT=m any more.
    So change Kconfig and code to only support building pci_slot as
    built-in driver.
    
    Signed-off-by: Jiang Liu <jiang.liu@huawei.com>
    Signed-off-by: Bjorn Helgaas <bhelgaas@google.com>

diff --git a/drivers/acpi/internal.h b/drivers/acpi/internal.h
index e050254ae143..7374cfc5917a 100644
--- a/drivers/acpi/internal.h
+++ b/drivers/acpi/internal.h
@@ -67,6 +67,11 @@ struct acpi_ec {
 
 extern struct acpi_ec *first_ec;
 
+#ifdef	CONFIG_ACPI_PCI_SLOT
+void acpi_pci_slot_init(void);
+#else
+static inline void acpi_pci_slot_init(void) { }
+#endif
 int acpi_pci_root_init(void);
 int acpi_ec_init(void);
 int acpi_ec_ecdt_probe(void);

commit 737f1a9f808280c481681b1f46254fd67023ec2f
Author: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
Date:   Fri Feb 8 23:52:39 2013 +0100

    ACPI / scan: Make container driver use struct acpi_scan_handler
    
    Make the ACPI container driver use struct acpi_scan_handler for
    representing the object used to initialize ACPI containers and remove
    the ACPI driver structure used previously and the data structures
    created by it, since in fact they were not used for any purpose.
    
    This simplifies the code and reduces the kernel's memory footprint by
    avoiding the registration of a struct device_driver object with the
    driver core and creation of its sysfs directory which is unnecessary.
    
    In addition to that, make the namespace walk callback used for
    installing the notify handlers for ACPI containers more
    straightforward.
    
    This change includes fixes from Toshi Kani.
    
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Acked-by: Yinghai Lu <yinghai@kernel.org>
    Acked-by: Yasuaki Ishimatsu <isimatu.yasuaki@jp.fujitsu.com>
    Tested-by: Yasuaki Ishimatsu <isimatu.yasuaki@jp.fujitsu.com>
    Reviewed-by: Toshi Kani <toshi.kani@hp.com>
    Tested-by: Toshi Kani <toshi.kani@hp.com>

diff --git a/drivers/acpi/internal.h b/drivers/acpi/internal.h
index 0d1397dc7003..79092328cf06 100644
--- a/drivers/acpi/internal.h
+++ b/drivers/acpi/internal.h
@@ -30,6 +30,11 @@ void acpi_pci_link_init(void);
 void acpi_platform_init(void);
 int acpi_sysfs_init(void);
 void acpi_csrt_init(void);
+#ifdef CONFIG_ACPI_CONTAINER
+void acpi_container_init(void);
+#else
+static inline void acpi_container_init(void) {}
+#endif
 
 #ifdef CONFIG_DEBUG_FS
 extern struct dentry *acpi_debugfs_dir;

commit 141a297bd02e8ddc5ab625cc3a1a5926b1ff929a
Author: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
Date:   Wed Jan 30 14:27:40 2013 +0100

    ACPI / platform: Use struct acpi_scan_handler for creating devices
    
    Currently, the ACPI namespace scanning code creates platform device
    objects for ACPI device nodes whose IDs match the contents of the
    acpi_platform_device_ids[] table.  However, this adds a superfluous
    special case into acpi_bus_device_attach() and makes it more
    difficult to follow than it has to be.  It also will make it more
    difficult to implement removal code for those platform device objects
    in the future.
    
    For the above reasons, introduce a struct acpi_scan_handler object
    for creating platform devices and move the code related to that from
    acpi_bus_device_attach() to the .attach() callback of that object.
    Also move the acpi_platform_device_ids[] table to acpi_platform.c.
    
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Acked-by: Yinghai Lu <yinghai@kernel.org>
    Acked-by: Yasuaki Ishimatsu <isimatu.yasuaki@jp.fujitsu.com>
    Acked-by: Toshi Kani <toshi.kani@hp.com>
    Reviewed-by: Mika Westerberg <mika.westerberg@linux.intel.com>
    Tested-by: Mika Westerberg <mika.westerberg@linux.intel.com>

diff --git a/drivers/acpi/internal.h b/drivers/acpi/internal.h
index e5a65217e480..0d1397dc7003 100644
--- a/drivers/acpi/internal.h
+++ b/drivers/acpi/internal.h
@@ -27,6 +27,7 @@ int init_acpi_device_notify(void);
 int acpi_scan_init(void);
 void acpi_pci_root_init(void);
 void acpi_pci_link_init(void);
+void acpi_platform_init(void);
 int acpi_sysfs_init(void);
 void acpi_csrt_init(void);
 
@@ -119,10 +120,4 @@ static inline void suspend_nvs_restore(void) {}
   -------------------------------------------------------------------------- */
 struct platform_device;
 
-/* Flags for acpi_create_platform_device */
-#define ACPI_PLATFORM_CLK	BIT(0)
-
-struct platform_device *acpi_create_platform_device(struct acpi_device *adev,
-						    unsigned long flags);
-
 #endif /* _ACPI_INTERNAL_H_ */

commit 4daeaf68379f75dedd120582add5206c7c5ad72e
Author: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
Date:   Wed Jan 30 14:27:37 2013 +0100

    ACPI / PCI: Make PCI IRQ link driver use struct acpi_scan_handler
    
    Make the ACPI PCI IRQ link driver use struct acpi_scan_handler
    for representing the object used to set up ACPI interrupt links and
    to remove data structures used for this purpose before unregistering
    the corresponding ACPI device nodes.
    
    This simplifies the code slightly and reduces the kernel's memory
    footprint by avoiding the registration of a struct device_driver
    object with the driver core and creation of its sysfs directory
    which is unnecessary.
    
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Acked-by: Yinghai Lu <yinghai@kernel.org>
    Acked-by: Toshi Kani <toshi.kani@hp.com>

diff --git a/drivers/acpi/internal.h b/drivers/acpi/internal.h
index 8310ba010176..e5a65217e480 100644
--- a/drivers/acpi/internal.h
+++ b/drivers/acpi/internal.h
@@ -26,6 +26,7 @@
 int init_acpi_device_notify(void);
 int acpi_scan_init(void);
 void acpi_pci_root_init(void);
+void acpi_pci_link_init(void);
 int acpi_sysfs_init(void);
 void acpi_csrt_init(void);
 

commit 00c43b9682507dc622c03172fde1032e2a216e9d
Author: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
Date:   Wed Jan 30 14:27:33 2013 +0100

    ACPI / PCI: Make PCI root driver use struct acpi_scan_handler
    
    Make the ACPI PCI root bridge driver use struct acpi_scan_handler
    for representing the object used to enumerate the PCI busses under
    PCI host bridges found in the ACPI namespace (and to tear down data
    structures representing the bus and devices on it before
    unregistering the host bridges' ACPI device nodes).
    
    This simplifies the code slightly and reduces the kernel's memory
    footprint by avoiding the registration of a struct device_driver
    object with the driver core and creation of its sysfs directory
    which is unnecessary.
    
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Acked-by: Yinghai Lu <yinghai@kernel.org>
    Acked-by: Toshi Kani <toshi.kani@hp.com>

diff --git a/drivers/acpi/internal.h b/drivers/acpi/internal.h
index da233477d260..8310ba010176 100644
--- a/drivers/acpi/internal.h
+++ b/drivers/acpi/internal.h
@@ -25,6 +25,7 @@
 
 int init_acpi_device_notify(void);
 int acpi_scan_init(void);
+void acpi_pci_root_init(void);
 int acpi_sysfs_init(void);
 void acpi_csrt_init(void);
 
@@ -86,7 +87,6 @@ struct acpi_ec {
 
 extern struct acpi_ec *first_ec;
 
-int acpi_pci_root_init(void);
 int acpi_ec_init(void);
 int acpi_ec_ecdt_probe(void);
 int acpi_boot_ec_enable(void);

commit 8b4e2fa4ff72ba2c9f01af8def15d4c4eeeeed64
Merge: 64e94e7e0ffb e375325ce55e
Author: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
Date:   Tue Jan 29 13:59:00 2013 +0100

    Merge branch 'acpi-lpss' into acpi-cleanup
    
    The following commits depend on the 'acpi-lpss' material.

commit 668192b678201d2fff27c6cc76bb003c1ec4a52a
Author: Yinghai Lu <yinghai@kernel.org>
Date:   Mon Jan 21 13:20:48 2013 -0800

    PCI: acpiphp: Move host bridge hotplug to pci_root.c
    
    The acpiphp driver is confusing because it contains partial support for PCI
    host bridge hotplug as well as support for hotplug of PCI devices.
    
    This patch moves the host bridge hot-add support to pci_root.c and adds
    hot-remove support in pci_root.c.
    
    How to test it: if sci_emu patch is applied, find out root bus number to
    ACPI root name mapping from dmesg or /sys.  To remove root bus:
    
      echo "\_SB.PCIB 3" > /sys/kernel/debug/acpi/sci_notify
    
    To add back root bus:
    
      echo "\_SB.PCIB 1" > /sys/kernel/debug/acpi/sci_notify
    
    Signed-off-by: Yinghai Lu <yinghai@kernel.org>
    Signed-off-by: Bjorn Helgaas <bhelgaas@google.com>
    Acked-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>

diff --git a/drivers/acpi/internal.h b/drivers/acpi/internal.h
index e050254ae143..0f24148a2b2a 100644
--- a/drivers/acpi/internal.h
+++ b/drivers/acpi/internal.h
@@ -68,6 +68,7 @@ struct acpi_ec {
 extern struct acpi_ec *first_ec;
 
 int acpi_pci_root_init(void);
+void acpi_pci_root_hp_init(void);
 int acpi_ec_init(void);
 int acpi_ec_ecdt_probe(void);
 int acpi_boot_ec_enable(void);

commit cf860be639d86ed77af179c925085ae0721ae602
Author: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
Date:   Thu Jan 24 12:49:49 2013 +0100

    ACPI / scan: Prevent device add uevents from racing with user space
    
    ACPI core adds sysfs device files after the given devices have been
    registered with device_register(), which is not appropriate, because
    it may lead to race conditions with user space tools using those
    files.
    
    Fix the problem by delaying the KOBJ_ADD uevent for ACPI devices
    until after all of the devices' sysfs files have been created.
    
    This also fixes a use-after-free in acpi_device_unregister().
    
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Acked-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/acpi/internal.h b/drivers/acpi/internal.h
index 1f004f35bc67..c5a61cd6c1a5 100644
--- a/drivers/acpi/internal.h
+++ b/drivers/acpi/internal.h
@@ -40,10 +40,11 @@ static inline void acpi_debugfs_init(void) { return; }
 #define ACPI_STA_DEFAULT (ACPI_STA_DEVICE_PRESENT | ACPI_STA_DEVICE_ENABLED | \
 			  ACPI_STA_DEVICE_UI | ACPI_STA_DEVICE_FUNCTIONING)
 
-int acpi_device_register(struct acpi_device *device,
-			 void (*release)(struct device *));
+int acpi_device_add(struct acpi_device *device,
+		    void (*release)(struct device *));
 void acpi_init_device_object(struct acpi_device *device, acpi_handle handle,
 			     int type, unsigned long long sta);
+void acpi_device_add_finalize(struct acpi_device *device);
 void acpi_free_ids(struct acpi_device *device);
 
 /* --------------------------------------------------------------------------

commit e375325ce55eb841ccda54a4472cf3b0139ea5f2
Author: Mika Westerberg <mika.westerberg@linux.intel.com>
Date:   Fri Jan 18 13:46:01 2013 +0000

    ACPI / platform: create LPSS clocks if Lynxpoint devices are found during scan
    
    Intel Lynxpoint LPSS peripheral drivers depend on LPSS clock tree being
    created in order to function properly. The clock tree is exposed as a
    platform driver that binds to a device named 'clk-lpt'.
    
    To support this we modify the acpi_create_platform_device() to take one
    additional parameter called flags. This is passed from
    acpi_platform_device_ids[] array when acpi_create_platform_device() is
    called.
    
    We then introduce a new flag ACPI_PLATFORM_CLK which is used to tell
    acpi_create_platform_device() to create the platform clocks as well.
    
    Finally we set the ACPI_PLATFORM_CLK flags for all the Lynxpoint LPSS
    devices and make sure that when this flag is set we create the
    corresponding clock tree platform device.
    
    Signed-off-by: Mika Westerberg <mika.westerberg@linux.intel.com>
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>

diff --git a/drivers/acpi/internal.h b/drivers/acpi/internal.h
index 4d2e4bf5f88d..4b68373473de 100644
--- a/drivers/acpi/internal.h
+++ b/drivers/acpi/internal.h
@@ -100,6 +100,10 @@ static inline void suspend_nvs_restore(void) {}
   -------------------------------------------------------------------------- */
 struct platform_device;
 
-struct platform_device *acpi_create_platform_device(struct acpi_device *adev);
+/* Flags for acpi_create_platform_device */
+#define ACPI_PLATFORM_CLK	BIT(0)
+
+struct platform_device *acpi_create_platform_device(struct acpi_device *adev,
+						    unsigned long flags);
 
 #endif /* _ACPI_INTERNAL_H_ */

commit 13176bbf183c82281a0e65519780ffebff5abc9d
Author: Mika Westerberg <mika.westerberg@linux.intel.com>
Date:   Thu Jan 17 09:59:33 2013 +0000

    ACPI: add support for CSRT table
    
    Core System Resources Table (CSRT) is a proprietary ACPI table that
    contains resources for certain devices that are not found in the DSDT
    table. Typically a shared DMA controller might be found here.
    
    This patch adds support for this table. We go through all entries in the
    table and make platform devices of them. The resources from the table are
    passed with the platform device.
    
    There is one special resource in the table and it is the DMA request line
    base and number of request lines. This information might be needed by the
    DMA controller driver as it needs to map the ACPI DMA request line number
    to the actual request line understood by the hardware. This range is passed
    as IORESOURCE_DMA resource.
    
    Signed-off-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    Signed-off-by: Mika Westerberg <mika.westerberg@linux.intel.com>
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>

diff --git a/drivers/acpi/internal.h b/drivers/acpi/internal.h
index e050254ae143..4d2e4bf5f88d 100644
--- a/drivers/acpi/internal.h
+++ b/drivers/acpi/internal.h
@@ -26,6 +26,7 @@
 int init_acpi_device_notify(void);
 int acpi_scan_init(void);
 int acpi_sysfs_init(void);
+void acpi_csrt_init(void);
 
 #ifdef CONFIG_DEBUG_FS
 extern struct dentry *acpi_debugfs_dir;

commit 9ce4e607111764673f7a59d7bc87a16ade5c7bba
Author: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
Date:   Thu Jan 17 14:11:08 2013 +0100

    ACPI / PM: Move device power management functions to device_pm.c
    
    Move ACPI device power management functions from drivers/acpi/bus.c
    to drivers/acpi/device_pm.c.
    
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>

diff --git a/drivers/acpi/internal.h b/drivers/acpi/internal.h
index 07f61dbd8136..1f004f35bc67 100644
--- a/drivers/acpi/internal.h
+++ b/drivers/acpi/internal.h
@@ -61,7 +61,6 @@ int acpi_device_sleep_wake(struct acpi_device *dev,
 int acpi_power_get_inferred_state(struct acpi_device *device, int *state);
 int acpi_power_on_resources(struct acpi_device *device, int state);
 int acpi_power_transition(struct acpi_device *device, int state);
-int acpi_bus_init_power(struct acpi_device *device);
 
 int acpi_wakeup_device_init(void);
 void acpi_early_processor_set_pdc(void);

commit 0596a52b8357b25185e06af32973225baeb7196a
Author: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
Date:   Thu Jan 17 14:11:07 2013 +0100

    ACPI: Use system level attribute of wakeup power resources
    
    The system level attribute of ACPI power resources is the lowest
    system sleep level (S0, S2 etc.) in which the given resource can be
    "on" (ACPI 5.0, Section 7.1).  On the other hand, wakeup power
    resources have to be "on" for devices depending on them to be able to
    signal wakeup.  Therefore devices cannot wake up the system from
    sleep states higher than the minimum of the system level attributes
    of their wakeup power resources.
    
    Use the wakeup power resources' system level values to get the
    deepest system sleep state (highest system sleep level) the given
    device can wake up the system from.
    
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>

diff --git a/drivers/acpi/internal.h b/drivers/acpi/internal.h
index 8a6c67c9da42..07f61dbd8136 100644
--- a/drivers/acpi/internal.h
+++ b/drivers/acpi/internal.h
@@ -55,6 +55,7 @@ int acpi_extract_power_resources(union acpi_object *package, unsigned int start,
 				 struct list_head *list);
 int acpi_add_power_resource(acpi_handle handle);
 void acpi_power_add_remove_device(struct acpi_device *adev, bool add);
+int acpi_power_min_system_level(struct list_head *list);
 int acpi_device_sleep_wake(struct acpi_device *dev,
                            int enable, int sleep_state, int dev_state);
 int acpi_power_get_inferred_state(struct acpi_device *device, int *state);

commit e88c9c603b2ad0cd0fbe90afedba3f1becbbeb79
Author: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
Date:   Thu Jan 17 14:11:07 2013 +0100

    ACPI: Take power resource initialization errors into account
    
    Some ACPI power resource initialization errors, like memory
    allocation errors, are not taken into account appropriately in some
    cases, which may lead to a device having an incomplete list of power
    resources that one of its power states depends on, for one example.
    
    Rework the power resource initialization and namespace scanning code
    so that power resource initialization errors are treated more
    seriously.
    
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>

diff --git a/drivers/acpi/internal.h b/drivers/acpi/internal.h
index c35435e3d760..8a6c67c9da42 100644
--- a/drivers/acpi/internal.h
+++ b/drivers/acpi/internal.h
@@ -51,10 +51,9 @@ void acpi_free_ids(struct acpi_device *device);
    -------------------------------------------------------------------------- */
 int acpi_power_init(void);
 void acpi_power_resources_list_free(struct list_head *list);
-acpi_status acpi_extract_power_resources(union acpi_object *package,
-					 unsigned int start,
-					 struct list_head *list);
-void acpi_add_power_resource(acpi_handle handle);
+int acpi_extract_power_resources(union acpi_object *package, unsigned int start,
+				 struct list_head *list);
+int acpi_add_power_resource(acpi_handle handle);
 void acpi_power_add_remove_device(struct acpi_device *adev, bool add);
 int acpi_device_sleep_wake(struct acpi_device *dev,
                            int enable, int sleep_state, int dev_state);

commit ef85bdbec444b42775a18580c6bfe1307a63ef0f
Author: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
Date:   Thu Jan 17 14:11:07 2013 +0100

    ACPI / scan: Consolidate extraction of power resources lists
    
    The lists of ACPI power resources are currently extracted in two
    different ways, one for wakeup power resources and one for power
    resources that device power states depend on.  There is no reason
    why it should be done differently in those two cases, so introduce
    a common routine for extracting power resources lists from data
    returned by AML, acpi_extract_power_resources(), and make the
    namespace scanning code use it for both wakeup and device power
    states power resources.
    
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>

diff --git a/drivers/acpi/internal.h b/drivers/acpi/internal.h
index e28068a765a9..c35435e3d760 100644
--- a/drivers/acpi/internal.h
+++ b/drivers/acpi/internal.h
@@ -50,8 +50,10 @@ void acpi_free_ids(struct acpi_device *device);
                                   Power Resource
    -------------------------------------------------------------------------- */
 int acpi_power_init(void);
-void acpi_power_resources_list_add(acpi_handle handle, struct list_head *list);
 void acpi_power_resources_list_free(struct list_head *list);
+acpi_status acpi_extract_power_resources(union acpi_object *package,
+					 unsigned int start,
+					 struct list_head *list);
 void acpi_add_power_resource(acpi_handle handle);
 void acpi_power_add_remove_device(struct acpi_device *adev, bool add);
 int acpi_device_sleep_wake(struct acpi_device *dev,

commit 0b224527323669c66e0a37ae05b04034bfcdce14
Author: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
Date:   Thu Jan 17 14:11:06 2013 +0100

    ACPI / PM: Take order attribute of power resources into account
    
    ACPI power resources have an order attribute that should be taken
    into account when turning them on and off, but it is not used now.
    
    Modify the power resources management code to preserve the
    spec-compliant ordering of power resources that power states of
    devices depend on (analogous changes will be done separately for
    power resources used for wakeup).
    
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>

diff --git a/drivers/acpi/internal.h b/drivers/acpi/internal.h
index ce6cb24de8c7..e28068a765a9 100644
--- a/drivers/acpi/internal.h
+++ b/drivers/acpi/internal.h
@@ -50,6 +50,8 @@ void acpi_free_ids(struct acpi_device *device);
                                   Power Resource
    -------------------------------------------------------------------------- */
 int acpi_power_init(void);
+void acpi_power_resources_list_add(acpi_handle handle, struct list_head *list);
+void acpi_power_resources_list_free(struct list_head *list);
 void acpi_add_power_resource(acpi_handle handle);
 void acpi_power_add_remove_device(struct acpi_device *adev, bool add);
 int acpi_device_sleep_wake(struct acpi_device *dev,

commit 82c7d5efaadf99fb4a26500cd5b59b6fd7659772
Author: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
Date:   Thu Jan 17 14:11:05 2013 +0100

    ACPI / scan: Treat power resources in a special way
    
    ACPI power resources need to be treated in a special way by the
    namespace scanning code, because they need to be ready to use as
    soon as they have been discovered (even before registering ACPI
    device nodes using them for power management).
    
    For this reason, it doesn't make sense to separate the preparation
    of struct acpi_device objects representing them in the device
    hierarchy from the creation of struct acpi_power_resource objects
    actually used for power resource manipulation.  Accordingly, it
    doesn't make sense to define non-empty .add() and .remove() callbacks
    in the power resources "driver" (in fact, it is questionable whether
    or not it is useful to register such a "driver" at all).
    
    Rearrange the code in scan.c and power.c so that power resources are
    initialized entirely by one routine, acpi_add_power_resource(), that
    also prepares their struct acpi_device objects and registers them
    with the driver core, telling it to use a special release routine,
    acpi_release_power_resource(), for removing objects that represent
    power resources from memory.  Make the ACPI namespace scanning code
    in scan.c always use acpi_add_power_resource() for preparing and
    registering objects that represent power resources.
    
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>

diff --git a/drivers/acpi/internal.h b/drivers/acpi/internal.h
index b79b4258bd6b..ce6cb24de8c7 100644
--- a/drivers/acpi/internal.h
+++ b/drivers/acpi/internal.h
@@ -34,10 +34,23 @@ int acpi_debugfs_init(void);
 static inline void acpi_debugfs_init(void) { return; }
 #endif
 
+/* --------------------------------------------------------------------------
+                     Device Node Initialization / Removal
+   -------------------------------------------------------------------------- */
+#define ACPI_STA_DEFAULT (ACPI_STA_DEVICE_PRESENT | ACPI_STA_DEVICE_ENABLED | \
+			  ACPI_STA_DEVICE_UI | ACPI_STA_DEVICE_FUNCTIONING)
+
+int acpi_device_register(struct acpi_device *device,
+			 void (*release)(struct device *));
+void acpi_init_device_object(struct acpi_device *device, acpi_handle handle,
+			     int type, unsigned long long sta);
+void acpi_free_ids(struct acpi_device *device);
+
 /* --------------------------------------------------------------------------
                                   Power Resource
    -------------------------------------------------------------------------- */
 int acpi_power_init(void);
+void acpi_add_power_resource(acpi_handle handle);
 void acpi_power_add_remove_device(struct acpi_device *adev, bool add);
 int acpi_device_sleep_wake(struct acpi_device *dev,
                            int enable, int sleep_state, int dev_state);

commit bc9b6407bd6df3ab7189e5622816bbc11ae9d2d8
Author: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
Date:   Thu Jan 17 14:11:05 2013 +0100

    ACPI / PM: Rework the handling of devices depending on power resources
    
    Commit 0090def6 (ACPI: Add interface to register/unregister device
    to/from power resources) made it possible to indicate to the ACPI
    core that if the given device depends on any power resources, then
    it should be resumed as soon as all of the power resources required
    by it to transition to the D0 power state have been turned on.
    
    Unfortunately, however, this was a mistake, because all devices
    depending on power resources should be treated this way (i.e. they
    should be resumed when all power resources required by their D0
    state have been turned on) and for the majority of those devices
    the ACPI core can figure out by itself which (physical) devices
    depend on what power resources.
    
    For this reason, replace the code added by commit 0090def6 with a
    new, much more straightforward, mechanism that will be used
    internally by the ACPI core and remove all references to that code
    from kernel subsystems using ACPI.
    
    For the cases when there are (physical) devices that should be
    resumed whenever a not directly related ACPI device node goes into
    D0 as a result of power resources configuration changes, like in
    the SATA case, add two new routines, acpi_dev_pm_add_dependent()
    and acpi_dev_pm_remove_dependent(), allowing subsystems to manage
    such dependencies.  Convert the SATA subsystem to use the new
    functions accordingly.
    
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>

diff --git a/drivers/acpi/internal.h b/drivers/acpi/internal.h
index e050254ae143..b79b4258bd6b 100644
--- a/drivers/acpi/internal.h
+++ b/drivers/acpi/internal.h
@@ -38,6 +38,7 @@ static inline void acpi_debugfs_init(void) { return; }
                                   Power Resource
    -------------------------------------------------------------------------- */
 int acpi_power_init(void);
+void acpi_power_add_remove_device(struct acpi_device *adev, bool add);
 int acpi_device_sleep_wake(struct acpi_device *dev,
                            int enable, int sleep_state, int dev_state);
 int acpi_power_get_inferred_state(struct acpi_device *device, int *state);

commit 92ef2a25c763338905dce8344a0584606f842920
Author: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
Date:   Fri Dec 21 00:36:40 2012 +0100

    ACPI: Change the ordering of PCI root bridge driver registrarion
    
    Instead of running acpi_pci_root_init() from a separate subsys
    initcall, call it directly from acpi_scan_init() before scanning the
    ACPI namespace for the first time, so that the PCI root bridge
    driver's .add() routine, acpi_pci_root_start(), is always run
    before binding ACPI drivers or attaching "companion" device objects
    to struct acpi_device objects below the root bridge's device node in
    the ACPI namespace.
    
    The first, simpler reason for doing this is that it makes the
    situation during boot more similar to the situation during hotplug,
    in which the ACPI PCI root bridge driver is always present.
    
    The second reason is that acpi_pci_root_init() causes struct pci_dev
    objects to be created for all PCI devices below the bridge and
    these objects may be necessary for whatever is done with the other
    ACPI device nodes in that namespace scope.  For example, devices
    created by acpi_create_platform_device() sometimes may need to be
    added to the device hierarchy as children of PCI bridges.  For this
    purpose, however, the struct pci_dev objects representing those
    bridges need to exist before the platform devices in question are
    registered.
    
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Acked-by: Yinghai Lu <yinghai@kernel.org>
    Acked-by: Toshi Kani <toshi.kani@hp.com>

diff --git a/drivers/acpi/internal.h b/drivers/acpi/internal.h
index 3c407cdc1ec1..e050254ae143 100644
--- a/drivers/acpi/internal.h
+++ b/drivers/acpi/internal.h
@@ -67,6 +67,7 @@ struct acpi_ec {
 
 extern struct acpi_ec *first_ec;
 
+int acpi_pci_root_init(void);
 int acpi_ec_init(void);
 int acpi_ec_ecdt_probe(void);
 int acpi_boot_ec_enable(void);

commit d4c091f13dc4d30e4af43c0ccf8c82b3277574ca
Merge: 08ab72980a77 261cba2deb7d
Author: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
Date:   Thu Nov 29 21:43:06 2012 +0100

    Merge branch 'acpi-general'
    
    * acpi-general: (38 commits)
      ACPI / thermal: _TMP and _CRT/_HOT/_PSV/_ACx dependency fix
      ACPI: drop unnecessary local variable from acpi_system_write_wakeup_device()
      ACPI: Fix logging when no pci_irq is allocated
      ACPI: Update Dock hotplug error messages
      ACPI: Update Container hotplug error messages
      ACPI: Update Memory hotplug error messages
      ACPI: Update CPU hotplug error messages
      ACPI: Add acpi_handle_<level>() interfaces
      ACPI: remove use of __devexit
      ACPI / PM: Add Sony Vaio VPCEB1S1E to nonvs blacklist.
      ACPI / battery: Correct battery capacity values on Thinkpads
      Revert "ACPI / x86: Add quirk for "CheckPoint P-20-00" to not use bridge _CRS_ info"
      ACPI: create _SUN sysfs file
      ACPI / memhotplug: bind the memory device when the driver is being loaded
      ACPI / memhotplug: don't allow to eject the memory device if it is being used
      ACPI / memhotplug: free memory device if acpi_memory_enable_device() failed
      ACPI / memhotplug: fix memory leak when memory device is unbound from acpi_memhotplug
      ACPI / memhotplug: deal with eject request in hotplug queue
      ACPI / memory-hotplug: add memory offline code to acpi_memory_device_remove()
      ACPI / memory-hotplug: call acpi_bus_trim() to remove memory device
      ...
    
    Conflicts:
            include/linux/acpi.h (two additions at the end of the same file)

commit 91e5687805885f9fceb60b95e950a3d3bdcf4764
Author: Mika Westerberg <mika.westerberg@linux.intel.com>
Date:   Wed Oct 31 22:45:02 2012 +0100

    ACPI: Add support for platform bus type
    
    With ACPI 5 it is now possible to enumerate traditional SoC
    peripherals, like serial bus controllers and slave devices behind
    them.  These devices are typically based on IP-blocks used in many
    existing SoC platforms and platform drivers for them may already
    be present in the kernel tree.
    
    To make driver "porting" more straightforward, add ACPI support to
    the platform bus type.  Instead of writing ACPI "glue" drivers for
    the existing platform drivers, register the platform bus type with
    ACPI to create platform device objects for the drivers and bind the
    corresponding ACPI handles to those platform devices.
    
    This should allow us to reuse the existing platform drivers for the
    devices in question with the minimum amount of modifications.
    
    This changeset is based on Mika Westerberg's and Mathias Nyman's
    work.
    
    Signed-off-by: Mathias Nyman <mathias.nyman@linux.intel.com>
    Signed-off-by: Mika Westerberg <mika.westerberg@linux.intel.com>
    Acked-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Acked-by: H. Peter Anvin <hpa@zytor.com>
    Acked-by: Tony Luck <tony.luck@intel.com>
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>

diff --git a/drivers/acpi/internal.h b/drivers/acpi/internal.h
index ca75b9ce0489..57d41f6e1441 100644
--- a/drivers/acpi/internal.h
+++ b/drivers/acpi/internal.h
@@ -93,4 +93,11 @@ static inline int suspend_nvs_save(void) { return 0; }
 static inline void suspend_nvs_restore(void) {}
 #endif
 
+/*--------------------------------------------------------------------------
+				Platform bus support
+  -------------------------------------------------------------------------- */
+struct platform_device;
+
+struct platform_device *acpi_create_platform_device(struct acpi_device *adev);
+
 #endif /* _ACPI_INTERNAL_H_ */

commit f351d027eea545a7996af54fce99f5668a67fec5
Author: Feng Tang <feng.tang@intel.com>
Date:   Tue Oct 23 01:29:27 2012 +0200

    ACPI / EC: Cleanup the member name for spinlock/mutex in struct
    
    Current member names for mutex/spinlock are a little confusing.
    
    Change the
    {
            struct mutex lock;
            spinlock_t curr_lock;
    }
    to
    {
            struct mutex mutex;
            spinlock_t lock;
    }
    
    So that the code is cleaner and easier to read.
    
    Signed-off-by: Feng Tang <feng.tang@intel.com>
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>

diff --git a/drivers/acpi/internal.h b/drivers/acpi/internal.h
index ca75b9ce0489..509dcaa17555 100644
--- a/drivers/acpi/internal.h
+++ b/drivers/acpi/internal.h
@@ -58,11 +58,11 @@ struct acpi_ec {
 	unsigned long data_addr;
 	unsigned long global_lock;
 	unsigned long flags;
-	struct mutex lock;
+	struct mutex mutex;
 	wait_queue_head_t wait;
 	struct list_head list;
 	struct transaction *curr;
-	spinlock_t curr_lock;
+	spinlock_t lock;
 };
 
 extern struct acpi_ec *first_ec;

commit aecad432fd68dafa5b3b497c4816fbfce6fd4066
Author: Thomas Renninger <trenn@suse.de>
Date:   Thu May 26 12:26:23 2011 +0200

    ACPI: Cleanup custom_method debug stuff
    
    - Move param aml_debug_output to other params into sysfs.c
    - Split acpi_debugfs_init to prepare custom_method to be
      an own .config option and driver.
    
    Signed-off-by: Thomas Renninger <trenn@suse.de>
    Acked-by: Rafael J. Wysocki <rjw@sisk.pl>
    Acked-by: rui.zhang@intel.com
    Signed-off-by: Len Brown <len.brown@intel.com>

diff --git a/drivers/acpi/internal.h b/drivers/acpi/internal.h
index 4bfb759deb10..ca75b9ce0489 100644
--- a/drivers/acpi/internal.h
+++ b/drivers/acpi/internal.h
@@ -28,9 +28,10 @@ int acpi_scan_init(void);
 int acpi_sysfs_init(void);
 
 #ifdef CONFIG_DEBUG_FS
+extern struct dentry *acpi_debugfs_dir;
 int acpi_debugfs_init(void);
 #else
-static inline int acpi_debugfs_init(void) { return 0; }
+static inline void acpi_debugfs_init(void) { return; }
 #endif
 
 /* --------------------------------------------------------------------------

commit 4d3fbff26c8e91474e30e575c2b7476be11afd83
Author: Rafael J. Wysocki <rjw@sisk.pl>
Date:   Thu Mar 10 21:21:23 2011 +0100

    ACPI: Remove the unused EC sysdev class
    
    The ACPI EC driver defines a sysdev class, but it doesn't use it, so
    it can be removed.
    
    Signed-off-by: Rafael J. Wysocki <rjw@sisk.pl>
    Signed-off-by: Len Brown <len.brown@intel.com>

diff --git a/drivers/acpi/internal.h b/drivers/acpi/internal.h
index b1cc81a0431b..4bfb759deb10 100644
--- a/drivers/acpi/internal.h
+++ b/drivers/acpi/internal.h
@@ -21,8 +21,6 @@
 #ifndef _ACPI_INTERNAL_H_
 #define _ACPI_INTERNAL_H_
 
-#include <linux/sysdev.h>
-
 #define PREFIX "ACPI: "
 
 int init_acpi_device_notify(void);
@@ -64,7 +62,6 @@ struct acpi_ec {
 	struct list_head list;
 	struct transaction *curr;
 	spinlock_t curr_lock;
-	struct sys_device sysdev;
 };
 
 extern struct acpi_ec *first_ec;

commit 4263d9a3ae4d15785897d0543bb59316c84ee605
Merge: eab001bf88f6 6fed05c9c981
Author: Len Brown <len.brown@intel.com>
Date:   Wed Jan 12 16:11:46 2011 -0500

    Merge branch 'suspend-ioremap-cache' into release

commit 6fed05c9c9812b5882bc708f4da4fa8d5df2875c
Author: Rafael J. Wysocki <rjw@sisk.pl>
Date:   Wed Jan 12 22:03:20 2011 +0100

    ACPI / PM: Fix build problems for !CONFIG_ACPI related to NVS rework
    
    The recent rework of the NVS saving/restoring code introduced two
    build issues for !CONFIG_ACPI, a warning in drivers/acpi/internal.h
    and an error in arch/x86/kernel/e820.c.
    
    Fix them by providing suitable static inline definitions of the
    relevant functions.
    
    Signed-off-by: Rafael J. Wysocki <rjw@sisk.pl>
    Acked-by: Randy Dunlap <randy.dunlap@oracle.com>
    Signed-off-by: Len Brown <len.brown@intel.com>

diff --git a/drivers/acpi/internal.h b/drivers/acpi/internal.h
index 7c23b76e8eca..6d69bbedf97a 100644
--- a/drivers/acpi/internal.h
+++ b/drivers/acpi/internal.h
@@ -90,7 +90,7 @@ void suspend_nvs_restore(void);
 static inline int acpi_sleep_proc_init(void) { return 0; }
 static inline int suspend_nvs_alloc(void) { return 0; }
 static inline void suspend_nvs_free(void) {}
-static inline int suspend_nvs_save(void) {}
+static inline int suspend_nvs_save(void) { return 0; }
 static inline void suspend_nvs_restore(void) {}
 #endif
 

commit d16675e1f1de98cc73ae77c6df26154ffae6230a
Merge: fb4af417cce9 6d5bbf00d251
Author: Len Brown <len.brown@intel.com>
Date:   Wed Jan 12 04:56:08 2011 -0500

    Merge branch 'suspend-ioremap-cache' into release

commit 53eac700b0df1fef8c957b9eedfd7f48120425e3
Author: Rafael J. Wysocki <rjw@sisk.pl>
Date:   Sat Dec 11 23:45:30 2010 +0100

    ACPI / PM: Drop acpi_power_nocheck
    
    Since acpi_bus_set_power() should not use __acpi_bus_get_power() to
    update the device's device->power.state field before changing its
    power state (this may cause device->power.state to be inconsistent
    with the device power resources' reference counters), remove this
    call from it.  In consequence, the acpi_power_nocheck variable is not
    necessary any more, so it can be dropped along with the DMI table
    used for setting that variable for HP Pavilion 05.
    
    Signed-off-by: Rafael J. Wysocki <rjw@sisk.pl>
    Signed-off-by: Len Brown <len.brown@intel.com>

diff --git a/drivers/acpi/internal.h b/drivers/acpi/internal.h
index 7493e6c7a003..8df5d7061a45 100644
--- a/drivers/acpi/internal.h
+++ b/drivers/acpi/internal.h
@@ -45,7 +45,6 @@ int acpi_power_get_inferred_state(struct acpi_device *device, int *state);
 int acpi_power_on_resources(struct acpi_device *device, int state);
 int acpi_power_transition(struct acpi_device *device, int state);
 int acpi_bus_init_power(struct acpi_device *device);
-extern int acpi_power_nocheck;
 
 int acpi_wakeup_device_init(void);
 void acpi_early_processor_set_pdc(void);

commit ade3e7fef794781c0798d0cf0f046123842ba550
Author: Rafael J. Wysocki <rjw@sisk.pl>
Date:   Thu Nov 25 00:08:36 2010 +0100

    ACPI / PM: Add function for device power state initialization
    
    Add function acpi_bus_init_power() for getting the initial power
    state of an ACPI device and reference counting its power resources
    as appropriate.
    
    Make acpi_bus_get_power_flags() use the new function instead of
    acpi_bus_get_power() that updates device->power.state without
    reference counting the device's power resources.
    
    Signed-off-by: Rafael J. Wysocki <rjw@sisk.pl>
    Signed-off-by: Len Brown <len.brown@intel.com>

diff --git a/drivers/acpi/internal.h b/drivers/acpi/internal.h
index 433a8ee8ac2c..7493e6c7a003 100644
--- a/drivers/acpi/internal.h
+++ b/drivers/acpi/internal.h
@@ -44,6 +44,7 @@ int acpi_device_sleep_wake(struct acpi_device *dev,
 int acpi_power_get_inferred_state(struct acpi_device *device, int *state);
 int acpi_power_on_resources(struct acpi_device *device, int state);
 int acpi_power_transition(struct acpi_device *device, int state);
+int acpi_bus_init_power(struct acpi_device *device);
 extern int acpi_power_nocheck;
 
 int acpi_wakeup_device_init(void);

commit 30d3df41b32b1ea63d3ebc52ef5644cbe41520f4
Author: Rafael J. Wysocki <rjw@sisk.pl>
Date:   Thu Nov 25 00:06:55 2010 +0100

    ACPI / PM: Introduce function for refcounting device power resources
    
    Introduce function acpi_power_on_resources() that reference counts
    and possibly turns on ACPI power resources for a given device and
    a given power state of it.
    
    This function will be used for reference counting device power
    resources during initialization.
    
    Signed-off-by: Rafael J. Wysocki <rjw@sisk.pl>
    Signed-off-by: Len Brown <len.brown@intel.com>

diff --git a/drivers/acpi/internal.h b/drivers/acpi/internal.h
index 2cc01489dccf..433a8ee8ac2c 100644
--- a/drivers/acpi/internal.h
+++ b/drivers/acpi/internal.h
@@ -42,6 +42,7 @@ int acpi_power_init(void);
 int acpi_device_sleep_wake(struct acpi_device *dev,
                            int enable, int sleep_state, int dev_state);
 int acpi_power_get_inferred_state(struct acpi_device *device, int *state);
+int acpi_power_on_resources(struct acpi_device *device, int state);
 int acpi_power_transition(struct acpi_device *device, int state);
 extern int acpi_power_nocheck;
 

commit 32a00d274e877eab3ea7ab196b75c9be5170d25e
Author: Rafael J. Wysocki <rjw@sisk.pl>
Date:   Thu Nov 25 00:05:17 2010 +0100

    ACPI / PM: Prevent acpi_power_get_inferred_state() from making changes
    
    acpi_power_get_inferred_state() should not update
    device->power.state behind the back of its caller, so make it return
    the state via a pointer instead.
    
    Signed-off-by: Rafael J. Wysocki <rjw@sisk.pl>
    Signed-off-by: Len Brown <len.brown@intel.com>

diff --git a/drivers/acpi/internal.h b/drivers/acpi/internal.h
index a212bfeddf8c..2cc01489dccf 100644
--- a/drivers/acpi/internal.h
+++ b/drivers/acpi/internal.h
@@ -41,7 +41,7 @@ static inline int acpi_debugfs_init(void) { return 0; }
 int acpi_power_init(void);
 int acpi_device_sleep_wake(struct acpi_device *dev,
                            int enable, int sleep_state, int dev_state);
-int acpi_power_get_inferred_state(struct acpi_device *device);
+int acpi_power_get_inferred_state(struct acpi_device *device, int *state);
 int acpi_power_transition(struct acpi_device *device, int state);
 extern int acpi_power_nocheck;
 

commit 976513dbfc1547c7b1822566923058655f0c32fd
Author: Rafael J. Wysocki <rjw@sisk.pl>
Date:   Fri Jan 7 01:43:44 2011 +0100

    PM / ACPI: Move NVS saving and restoring code to drivers/acpi
    
    The saving of the ACPI NVS area during hibernation and suspend and
    restoring it during the subsequent resume is entirely specific to
    ACPI, so move it to drivers/acpi and drop the CONFIG_SUSPEND_NVS
    configuration option which is redundant.
    
    Signed-off-by: Rafael J. Wysocki <rjw@sisk.pl>
    Signed-off-by: Len Brown <len.brown@intel.com>

diff --git a/drivers/acpi/internal.h b/drivers/acpi/internal.h
index a212bfeddf8c..7c23b76e8eca 100644
--- a/drivers/acpi/internal.h
+++ b/drivers/acpi/internal.h
@@ -82,8 +82,16 @@ extern int acpi_sleep_init(void);
 
 #ifdef CONFIG_ACPI_SLEEP
 int acpi_sleep_proc_init(void);
+int suspend_nvs_alloc(void);
+void suspend_nvs_free(void);
+int suspend_nvs_save(void);
+void suspend_nvs_restore(void);
 #else
 static inline int acpi_sleep_proc_init(void) { return 0; }
+static inline int suspend_nvs_alloc(void) { return 0; }
+static inline void suspend_nvs_free(void) {}
+static inline int suspend_nvs_save(void) {}
+static inline void suspend_nvs_restore(void) {}
 #endif
 
 #endif /* _ACPI_INTERNAL_H_ */

commit 95ee46aa8698f2000647dfb362400fadbb5807cf
Merge: cfa806f05980 92fa5bd9a946
Author: Len Brown <len.brown@intel.com>
Date:   Sun Aug 15 01:06:31 2010 -0400

    Merge branch 'linus' into release
    
    Conflicts:
            drivers/acpi/debug.c
    
    Signed-off-by: Len Brown <len.brown@intel.com>

commit 47f5c892b06797336a34f1096b4b617623aa1960
Author: Zhang Rui <rui.zhang@intel.com>
Date:   Thu Jul 15 10:46:33 2010 +0800

    ACPI: remove deprecated ACPI procfs I/F
    
    Rmove deprecated ACPI procfs I/F, including
    /proc/acpi/debug_layer
    /proc/acpi/debug_level
    /proc/acpi/info
    /proc/acpi/dsdt
    /proc/acpi/fadt
    /proc/acpi/sleep
    
    because the sysfs I/F is already available
    and has been working well for years.
    
    Signed-off-by: Zhang Rui <rui.zhang@intel.com>
    Signed-off-by: Len Brown <len.brown@intel.com>

diff --git a/drivers/acpi/internal.h b/drivers/acpi/internal.h
index eed823418559..e37964439d66 100644
--- a/drivers/acpi/internal.h
+++ b/drivers/acpi/internal.h
@@ -22,15 +22,8 @@
 
 int init_acpi_device_notify(void);
 int acpi_scan_init(void);
-int acpi_system_init(void);
 int acpi_sysfs_init(void);
 
-#ifdef CONFIG_ACPI_DEBUG
-int acpi_debug_init(void);
-#else
-static inline int acpi_debug_init(void) { return 0; }
-#endif
-
 #ifdef CONFIG_DEBUG_FS
 int acpi_debugfs_init(void);
 #else

commit 1c8fce27e275fd7c6b75bc6455745f02d3903ee6
Author: Zhang Rui <rui.zhang@intel.com>
Date:   Thu Jul 15 10:46:30 2010 +0800

    ACPI: introduce drivers/acpi/sysfs.c
    
    Introduce drivers/acpi/sysfs.c.
    
    code for ACPI sysfs I/F, including
    #ifdef ACPI_DEBUG
    /sys/module/acpi/parameters/debug_layer
    /sys/module/acpi/parameters/debug_level
    /sys/module/acpi/parameters/trace_method_name
    /sys/module/acpi/parameters/trace_debug_layer
    /sys/module/acpi/parameters/trace_debug_level
    /sys/module/acpi/parameters/trace_state
    #endif
    /sys/module/acpi/parameters/acpica_version
    /sys/firmware/acpi/tables/
    /sys/firmware/acpi/interrupts/
    is moved to this file.
    
    No function change in this patch.
    
    Signed-off-by: Zhang Rui <rui.zhang@intel.com>
    Signed-off-by: Len Brown <len.brown@intel.com>

diff --git a/drivers/acpi/internal.h b/drivers/acpi/internal.h
index 0650e343867e..eed823418559 100644
--- a/drivers/acpi/internal.h
+++ b/drivers/acpi/internal.h
@@ -23,6 +23,7 @@
 int init_acpi_device_notify(void);
 int acpi_scan_init(void);
 int acpi_system_init(void);
+int acpi_sysfs_init(void);
 
 #ifdef CONFIG_ACPI_DEBUG
 int acpi_debug_init(void);

commit a25ee9200eef07377e1703697afbb5d81f89e500
Author: Zhang Rui <rui.zhang@intel.com>
Date:   Thu Jul 15 10:46:15 2010 +0800

    ACPI: introduce drivers/acpi/debugfs.c
    
    Introduce drivers/acpi/debugfs.c.
    
    Code for ACPI debugfs I/F,
    i.e. /sys/kernel/debug/acpi/custom_method,
    is moved to this file.
    
    And make ACPI debugfs always built in,
    even if CONFIG_ACPI_DEBUG is cleared.
    
    BTW:this adds about 400bytes code to ACPI, when
    CONFIG_ACPI_DEBUG is cleared.
    
    [uaccess.h build fix from Andrew Morton <akpm@linux-foundation.org>]
    
    Signed-off-by: Zhang Rui <rui.zhang@intel.com>
    Signed-off-by: Len Brown <len.brown@intel.com>

diff --git a/drivers/acpi/internal.h b/drivers/acpi/internal.h
index f8f190ec066e..0650e343867e 100644
--- a/drivers/acpi/internal.h
+++ b/drivers/acpi/internal.h
@@ -30,6 +30,12 @@ int acpi_debug_init(void);
 static inline int acpi_debug_init(void) { return 0; }
 #endif
 
+#ifdef CONFIG_DEBUG_FS
+int acpi_debugfs_init(void);
+#else
+static inline int acpi_debugfs_init(void) { return 0; }
+#endif
+
 /* --------------------------------------------------------------------------
                                   Power Resource
    -------------------------------------------------------------------------- */

commit 1195a098168fcacfef1cd80d05358e52fb366bf6
Author: Thomas Renninger <trenn@suse.de>
Date:   Fri Jul 16 13:11:31 2010 +0200

    ACPI: Provide /sys/kernel/debug/ec/...
    
    This patch provides the same information through debugfs, which previously was
    provided through /proc/acpi/embedded_controller/*/info
    
    This is the gpe the EC is connected to and whether the global lock
    gets used.
    The io ports used are added to /proc/ioports in another patch.
    Beside the fact that /proc/acpi is deprecated for quite some time,
    this info is not needed for applications and thus can be moved
    to debugfs instead of a public interface like /sys.
    
    Signed-off-by: Thomas Renninger <trenn@suse.de>
    
    CC: Alexey Starikovskiy <astarikovskiy@suse.de>
    CC: Len Brown <lenb@kernel.org>
    CC: linux-kernel@vger.kernel.org
    CC: linux-acpi@vger.kernel.org
    CC: Bjorn Helgaas <bjorn.helgaas@hp.com>
    CC: platform-driver-x86@vger.kernel.org
    Signed-off-by: Matthew Garrett <mjg@redhat.com>

diff --git a/drivers/acpi/internal.h b/drivers/acpi/internal.h
index f8f190ec066e..8ae27264a00e 100644
--- a/drivers/acpi/internal.h
+++ b/drivers/acpi/internal.h
@@ -18,6 +18,11 @@
  * 51 Franklin St - Fifth Floor, Boston, MA 02110-1301 USA.
  */
 
+#ifndef _ACPI_INTERNAL_H_
+#define _ACPI_INTERNAL_H_
+
+#include <linux/sysdev.h>
+
 #define PREFIX "ACPI: "
 
 int init_acpi_device_notify(void);
@@ -46,6 +51,23 @@ void acpi_early_processor_set_pdc(void);
 /* --------------------------------------------------------------------------
                                   Embedded Controller
    -------------------------------------------------------------------------- */
+struct acpi_ec {
+	acpi_handle handle;
+	unsigned long gpe;
+	unsigned long command_addr;
+	unsigned long data_addr;
+	unsigned long global_lock;
+	unsigned long flags;
+	struct mutex lock;
+	wait_queue_head_t wait;
+	struct list_head list;
+	struct transaction *curr;
+	spinlock_t curr_lock;
+	struct sys_device sysdev;
+};
+
+extern struct acpi_ec *first_ec;
+
 int acpi_ec_init(void);
 int acpi_ec_ecdt_probe(void);
 int acpi_boot_ec_enable(void);
@@ -63,3 +85,5 @@ int acpi_sleep_proc_init(void);
 #else
 static inline int acpi_sleep_proc_init(void) { return 0; }
 #endif
+
+#endif /* _ACPI_INTERNAL_H_ */

commit fe955682d2153b35dffcf1673dff0491096a3f0a
Author: Rafael J. Wysocki <rjw@sisk.pl>
Date:   Fri Apr 9 01:40:38 2010 +0200

    ACPI / EC / PM: Fix names of functions that block/unblock EC transactions
    
    The names of the functions used for blocking/unblocking EC
    transactions during suspend/hibernation suggest that the transactions
    are suspended and resumed by them, while in fact they are disabled
    and enabled.  Rename the functions (and the flag used by them) to
    better reflect what they really do.
    
    Signed-off-by: Rafael J. Wysocki <rjw@sisk.pl>
    Signed-off-by: Len Brown <len.brown@intel.com>

diff --git a/drivers/acpi/internal.h b/drivers/acpi/internal.h
index 0ec48c7efa9b..f8f190ec066e 100644
--- a/drivers/acpi/internal.h
+++ b/drivers/acpi/internal.h
@@ -49,9 +49,9 @@ void acpi_early_processor_set_pdc(void);
 int acpi_ec_init(void);
 int acpi_ec_ecdt_probe(void);
 int acpi_boot_ec_enable(void);
-void acpi_ec_suspend_transactions(void);
-void acpi_ec_resume_transactions(void);
-void acpi_ec_resume_transactions_early(void);
+void acpi_ec_block_transactions(void);
+void acpi_ec_unblock_transactions(void);
+void acpi_ec_unblock_transactions_early(void);
 
 /*--------------------------------------------------------------------------
                                   Suspend/Resume

commit d5a64513c6a171262082c250592c062e97a2c693
Author: Rafael J. Wysocki <rjw@sisk.pl>
Date:   Fri Apr 9 01:39:40 2010 +0200

    ACPI / EC / PM: Fix race between EC transactions and system suspend
    
    There still is a race that may result in suspending the system in
    the middle of an EC transaction in progress, which leads to problems
    (like the kernel thinking that the ACPI global lock is held during
    resume while in fact it's not).
    
    To remove the race condition, modify the ACPI platform suspend and
    hibernate callbacks so that EC transactions are blocked right after
    executing the _PTS global control method and are allowed to happen
    again right after the low-level wakeup.
    
    Introduce acpi_pm_freeze() that will disable GPEs, wait until the
    event queues are empty and block EC transactions.  Use it wherever
    GPEs are disabled in preparation for switching local interrupts off.
    Introduce acpi_pm_thaw() that will allow EC transactions to happen
    again and enable runtime GPEs.  Use it to balance acpi_pm_freeze()
    wherever necessary.
    
    In addition to that use acpi_ec_resume_transactions_early() to
    unblock EC transactions as early as reasonably possible during
    resume.  Also unblock EC transactions in acpi_hibernation_finish()
    and in the analogous suspend routine to make sure that the EC
    transactions are enabled in all error paths.
    
    Fixes https://bugzilla.kernel.org/show_bug.cgi?id=14668
    
    Signed-off-by: Rafael J. Wysocki <rjw@sisk.pl>
    Reported-and-tested-by: Maxim Levitsky <maximlevitsky@gmail.com>
    Signed-off-by: Len Brown <len.brown@intel.com>

diff --git a/drivers/acpi/internal.h b/drivers/acpi/internal.h
index e28411367239..0ec48c7efa9b 100644
--- a/drivers/acpi/internal.h
+++ b/drivers/acpi/internal.h
@@ -51,6 +51,7 @@ int acpi_ec_ecdt_probe(void);
 int acpi_boot_ec_enable(void);
 void acpi_ec_suspend_transactions(void);
 void acpi_ec_resume_transactions(void);
+void acpi_ec_resume_transactions_early(void);
 
 /*--------------------------------------------------------------------------
                                   Suspend/Resume

commit ec28dcc6b4c00b78ad269ad5b85ebd5c2d504825
Merge: c67fcd670b55 d06070509147 f6bb13aa1ea3 0c99c5288eb9 4c81ba4900ab 7e0e9c042790 149fe9c293f7 cffdde993a01 fa80945269f3 8b7ef6d8f162 70287db87cfc 38bcb37a6f63
Author: Len Brown <len.brown@intel.com>
Date:   Sun Mar 14 21:30:17 2010 -0400

    Merge branches 'battery-2.6.34', 'bugzilla-10805', 'bugzilla-14668', 'bugzilla-531916-power-state', 'ht-warn-2.6.34', 'pnp', 'processor-rename', 'sony-2.6.34', 'suse-bugzilla-531547', 'tz-check', 'video' and 'misc-2.6.34' into release

commit f6bb13aa1ea3bb26a4c783822347873f085b9000
Author: Rafael J. Wysocki <rjw@sisk.pl>
Date:   Thu Mar 4 01:52:58 2010 +0100

    ACPI / EC / PM: Close race between EC and resume from hibernation
    
    There is a race between resume from hibernation and the EC driver
    that may result in restoring the hibernation image in the middle of
    an EC transaction in progress, which in turn may lead to
    unpredictable behavior of the platform.
    
    To remove that race condition, add a helpers for suspending and
    resuming EC transactions in a safe way to be executed by the ACPI
    platform hibernate pre-restore and restore cleanup callbacks.
    
    http://bugzilla.kernel.org/show_bug.cgi?id=14668
    
    Signed-off-by: Rafael J. Wysocki <rjw@sisk.pl>
    Reported-and-tested-by: Maxim Levitsky <maximlevitsky@gmail.com>
    Signed-off-by: Len Brown <len.brown@intel.com>

diff --git a/drivers/acpi/internal.h b/drivers/acpi/internal.h
index cb28e0502acc..78742460f1fc 100644
--- a/drivers/acpi/internal.h
+++ b/drivers/acpi/internal.h
@@ -51,6 +51,8 @@ void acpi_early_processor_set_pdc(void);
 int acpi_ec_init(void);
 int acpi_ec_ecdt_probe(void);
 int acpi_boot_ec_enable(void);
+void acpi_ec_suspend_transactions(void);
+void acpi_ec_resume_transactions(void);
 
 /*--------------------------------------------------------------------------
                                   Suspend/Resume

commit b67ea76172d4b1922c4b3c46c8ea8e9fec1ff38c
Author: Rafael J. Wysocki <rjw@sisk.pl>
Date:   Wed Feb 17 23:44:09 2010 +0100

    PCI / ACPI / PM: Platform support for PCI PME wake-up
    
    Although the majority of PCI devices can generate PMEs that in
    principle may be used to wake up devices suspended at run time,
    platform support is generally necessary to convert PMEs into wake-up
    events that can be delivered to the kernel.  If ACPI is used for this
    purpose, PME signals generated by a PCI device will trigger the ACPI
    GPE associated with the device to generate an ACPI wake-up event that
    we can set up a handler for, provided that everything is configured
    correctly.
    
    Unfortunately, the subset of PCI devices that have GPEs associated
    with them is quite limited.  The devices without dedicated GPEs have
    to rely on the GPEs associated with other devices (in the majority of
    cases their upstream bridges and, possibly, the root bridge) to
    generate ACPI wake-up events in response to PME signals from them.
    
    Add ACPI platform support for PCI PME wake-up:
    o Add a framework making is possible to use ACPI system notify
      handlers for run-time PM.
    o Add new PCI platform callback ->run_wake() to struct
      pci_platform_pm_ops allowing us to enable/disable the platform to
      generate wake-up events for given device.  Implemet this callback
      for the ACPI platform.
    o Define ACPI wake-up handlers for PCI devices and PCI root buses and
      make the PCI-ACPI binding code register wake-up notifiers for all
      PCI devices present in the ACPI tables.
    o Add function pci_dev_run_wake() which can be used by PCI drivers to
      check if given device is capable of generating wake-up events at
      run time.
    
    Developed in cooperation with Matthew Garrett <mjg@redhat.com>.
    
    Signed-off-by: Rafael J. Wysocki <rjw@sisk.pl>
    Signed-off-by: Jesse Barnes <jbarnes@virtuousgeek.org>

diff --git a/drivers/acpi/internal.h b/drivers/acpi/internal.h
index cb28e0502acc..9c4c962e46e3 100644
--- a/drivers/acpi/internal.h
+++ b/drivers/acpi/internal.h
@@ -36,8 +36,6 @@ static inline int acpi_debug_init(void) { return 0; }
 int acpi_power_init(void);
 int acpi_device_sleep_wake(struct acpi_device *dev,
                            int enable, int sleep_state, int dev_state);
-int acpi_enable_wakeup_device_power(struct acpi_device *dev, int sleep_state);
-int acpi_disable_wakeup_device_power(struct acpi_device *dev);
 int acpi_power_get_inferred_state(struct acpi_device *device);
 int acpi_power_transition(struct acpi_device *device, int state);
 extern int acpi_power_nocheck;

commit 78f1699659963fff97975df44db6d5dbe7218e55
Author: Alex Chiang <achiang@hp.com>
Date:   Sun Dec 20 12:19:09 2009 -0700

    ACPI: processor: call _PDC early
    
    We discovered that at least one machine (HP Envy), methods in the DSDT
    attempt to call external methods defined in a dynamically loaded SSDT.
    
    Unfortunately, the DSDT methods we are trying to call are part of the
    EC initialization, which happens very early, and the the dynamic SSDT
    is only loaded when a processor _PDC method runs much later.
    
    This results in namespace lookup errors for the (as of yet) undefined
    methods.
    
    Since Windows doesn't have any issues with this machine, we take it
    as a hint that they must be evaluating _PDC much earlier than we are.
    
    Thus, the proper thing for Linux to do should be to match the Windows
    implementation more closely.
    
    Provide a mechanism to call _PDC before we enable the EC. Doing so loads
    the dynamic tables, and allows the EC to be enabled correctly.
    
    The ACPI processor driver will still evaluate _PDC in its .add() method
    to cover the hotplug case.
    
    Resolves: http://bugzilla.kernel.org/show_bug.cgi?id=14824
    
    Cc: ming.m.lin@intel.com
    Signed-off-by: Alex Chiang <achiang@hp.com>
    Signed-off-by: Len Brown <len.brown@intel.com>

diff --git a/drivers/acpi/internal.h b/drivers/acpi/internal.h
index 074cf8682d52..cb28e0502acc 100644
--- a/drivers/acpi/internal.h
+++ b/drivers/acpi/internal.h
@@ -43,6 +43,7 @@ int acpi_power_transition(struct acpi_device *device, int state);
 extern int acpi_power_nocheck;
 
 int acpi_wakeup_device_init(void);
+void acpi_early_processor_set_pdc(void);
 
 /* --------------------------------------------------------------------------
                                   Embedded Controller

commit a192a9580bcc41692be1f36b77c3b681827f566a
Author: Len Brown <len.brown@intel.com>
Date:   Tue Jul 28 16:45:54 2009 -0400

    ACPI: Move definition of PREFIX from acpi_bus.h to internal..h
    
    Linux/ACPI core files using internal.h all PREFIX "ACPI: ",
    however, not all ACPI drivers use/want it -- and they
    should not have to #undef PREFIX to define their own.
    
    Add GPL commment to internal.h while we are there.
    
    This does not change any actual console output,
    asside from a whitespace fix.
    
    Signed-off-by: Len Brown <len.brown@intel.com>

diff --git a/drivers/acpi/internal.h b/drivers/acpi/internal.h
index 11a69b53004e..074cf8682d52 100644
--- a/drivers/acpi/internal.h
+++ b/drivers/acpi/internal.h
@@ -1,4 +1,24 @@
-/* For use by Linux/ACPI infrastructure, not drivers */
+/*
+ * acpi/internal.h
+ * For use by Linux/ACPI infrastructure, not drivers
+ *
+ * Copyright (c) 2009, Intel Corporation.
+ *
+ * This program is free software; you can redistribute it and/or modify it
+ * under the terms and conditions of the GNU General Public License,
+ * version 2, as published by the Free Software Foundation.
+ *
+ * This program is distributed in the hope it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
+ * more details.
+ *
+ * You should have received a copy of the GNU General Public License along with
+ * this program; if not, write to the Free Software Foundation, Inc.,
+ * 51 Franklin St - Fifth Floor, Boston, MA 02110-1301 USA.
+ */
+
+#define PREFIX "ACPI: "
 
 int init_acpi_device_notify(void);
 int acpi_scan_init(void);

commit 201b8c655f7a48563f6a0b66f9e388460a1ea611
Author: Bjorn Helgaas <bjorn.helgaas@hp.com>
Date:   Tue Mar 24 16:50:19 2009 -0600

    ACPI: call acpi_wakeup_device_init() explicitly rather than as initcall
    
    This patch makes acpi_init() call acpi_wakeup_device_init() directly.
    Previously, acpi_wakeup_device_init() was a late_initcall (sequence 7).
    
    acpi_wakeup_device_init() depends on acpi_wakeup_device_list, which
    is populated when ACPI devices are enumerated by acpi_init() ->
    acpi_scan_init().  Using late_initcall is certainly enough to make
    sure acpi_wakeup_device_list is populated, but it is more than
    necessary.  We can just as easily call acpi_wakeup_device_init()
    directly from acpi_init(), which avoids the initcall magic.
    
    Signed-off-by: Bjorn Helgaas <bjorn.helgaas@hp.com>
    CC: Li Shaohua <shaohua.li@intel.com>
    Signed-off-by: Len Brown <len.brown@intel.com>

diff --git a/drivers/acpi/internal.h b/drivers/acpi/internal.h
index 8870e5fd8494..11a69b53004e 100644
--- a/drivers/acpi/internal.h
+++ b/drivers/acpi/internal.h
@@ -22,6 +22,8 @@ int acpi_power_get_inferred_state(struct acpi_device *device);
 int acpi_power_transition(struct acpi_device *device, int state);
 extern int acpi_power_nocheck;
 
+int acpi_wakeup_device_init(void);
+
 /* --------------------------------------------------------------------------
                                   Embedded Controller
    -------------------------------------------------------------------------- */

commit 9cee43e07940bee13462e63bd75ce4430b155886
Author: Bjorn Helgaas <bjorn.helgaas@hp.com>
Date:   Tue Mar 24 16:50:14 2009 -0600

    ACPI: call acpi_sleep_proc_init() explicitly rather than as initcall
    
    This patch makes acpi_init() call acpi_sleep_proc_init() directly.
    Previously, acpi_sleep_proc_init() was a late_initcall (sequence 7),
    apparently to make sure that the /proc hierarchy already exists:
    
        2003/02/13 12:38:03-06:00 mochel
        acpi sleep: demote sleep proc file creation.
    
        - Make acpi_sleep_proc_init() a late_initcall(), and not called from
          acpi_sleep_init(). This guarantees that the acpi proc hierarchy is at
          least there when we create the dang file.
    
    This should no longer be an issue because acpi_bus_init() (called early
    in acpi_init()) creates acpi_root_dir (/proc/acpi).
    
    Signed-off-by: Bjorn Helgaas <bjorn.helgaas@hp.com>
    Signed-off-by: Len Brown <len.brown@intel.com>

diff --git a/drivers/acpi/internal.h b/drivers/acpi/internal.h
index 8a45dd8e03b5..8870e5fd8494 100644
--- a/drivers/acpi/internal.h
+++ b/drivers/acpi/internal.h
@@ -33,3 +33,9 @@ int acpi_boot_ec_enable(void);
                                   Suspend/Resume
   -------------------------------------------------------------------------- */
 extern int acpi_sleep_init(void);
+
+#ifdef CONFIG_ACPI_SLEEP
+int acpi_sleep_proc_init(void);
+#else
+static inline int acpi_sleep_proc_init(void) { return 0; }
+#endif

commit 0e46517d9660ee6ae0a0c5d8a4e50451bc84d61d
Author: Bjorn Helgaas <bjorn.helgaas@hp.com>
Date:   Tue Mar 24 16:50:09 2009 -0600

    ACPI: call init_acpi_device_notify() explicitly rather than as initcall
    
    This patch makes acpi_init() call init_acpi_device_notify() directly.
    Previously, init_acpi_device_notify() was an arch_initcall (sequence 3),
    so it was called before acpi_init() (a subsys_initcall at sequence 4).
    
    init_acpi_device_notify() sets the platform_notify and
    platform_notify_remove function pointers.  These pointers
    are not used until acpi_init() enumerates ACPI devices in
    this path:
    
        acpi_init()
                acpi_scan_init()
                    acpi_bus_scan()
                        acpi_add_single_object()
                            acpi_device_register()
                                device_add()
                                    <use platform_notify>
    
    So it is sufficient to have acpi_init() call init_acpi_device_notify()
    directly before it enumerates devices.
    
    Signed-off-by: Bjorn Helgaas <bjorn.helgaas@hp.com>
    Signed-off-by: Len Brown <len.brown@intel.com>

diff --git a/drivers/acpi/internal.h b/drivers/acpi/internal.h
index 44b84021d84d..8a45dd8e03b5 100644
--- a/drivers/acpi/internal.h
+++ b/drivers/acpi/internal.h
@@ -1,5 +1,6 @@
 /* For use by Linux/ACPI infrastructure, not drivers */
 
+int init_acpi_device_notify(void);
 int acpi_scan_init(void);
 int acpi_system_init(void);
 

commit 84f810c33f695e020776ce66c903e0b41872f1b2
Author: Bjorn Helgaas <bjorn.helgaas@hp.com>
Date:   Tue Mar 24 16:50:03 2009 -0600

    ACPI: call acpi_debug_init() explicitly rather than as initcall
    
    This patch makes acpi_init() call acpi_debug_init() directly.
    Previously, both were subsys_initcalls.  acpi_debug_init()
    must happen after acpi_init(), and it's better to call it
    explicitly rather than rely on link ordering.
    
    Signed-off-by: Bjorn Helgaas <bjorn.helgaas@hp.com>
    Signed-off-by: Len Brown <len.brown@intel.com>

diff --git a/drivers/acpi/internal.h b/drivers/acpi/internal.h
index 4a35f6e819d3..44b84021d84d 100644
--- a/drivers/acpi/internal.h
+++ b/drivers/acpi/internal.h
@@ -3,6 +3,12 @@
 int acpi_scan_init(void);
 int acpi_system_init(void);
 
+#ifdef CONFIG_ACPI_DEBUG
+int acpi_debug_init(void);
+#else
+static inline int acpi_debug_init(void) { return 0; }
+#endif
+
 /* --------------------------------------------------------------------------
                                   Power Resource
    -------------------------------------------------------------------------- */

commit 141a0af3cab7de690816b17aad1682050219f774
Author: Bjorn Helgaas <bjorn.helgaas@hp.com>
Date:   Tue Mar 24 16:49:58 2009 -0600

    ACPI: call acpi_system_init() explicitly rather than as initcall
    
    This patch makes acpi_init() call acpi_system_init() directly.
    Previously, both were subsys_initcalls.  acpi_system_init()
    must happen after acpi_init(), and it's better to call it
    explicitly rather than rely on link ordering.
    
    Signed-off-by: Bjorn Helgaas <bjorn.helgaas@hp.com>
    Signed-off-by: Len Brown <len.brown@intel.com>

diff --git a/drivers/acpi/internal.h b/drivers/acpi/internal.h
index a8178add7fd1..4a35f6e819d3 100644
--- a/drivers/acpi/internal.h
+++ b/drivers/acpi/internal.h
@@ -1,6 +1,7 @@
 /* For use by Linux/ACPI infrastructure, not drivers */
 
 int acpi_scan_init(void);
+int acpi_system_init(void);
 
 /* --------------------------------------------------------------------------
                                   Power Resource

commit 44515374cba9e46d5622256b43eb06b9c349cee1
Author: Bjorn Helgaas <bjorn.helgaas@hp.com>
Date:   Tue Mar 24 16:49:53 2009 -0600

    ACPI: call acpi_power_init() explicitly rather than as initcall
    
    This patch makes acpi_init() call acpi_power_init() directly.
    Previously, both were subsys_initcalls.  acpi_power_init()
    must happen after acpi_init(), and it's better to call it
    explicitly rather than rely on link ordering.
    
    Signed-off-by: Bjorn Helgaas <bjorn.helgaas@hp.com>
    CC: Zhao Yakui <yakui.zhao@intel.com>
    Signed-off-by: Len Brown <len.brown@intel.com>

diff --git a/drivers/acpi/internal.h b/drivers/acpi/internal.h
index fad8e38ed271..a8178add7fd1 100644
--- a/drivers/acpi/internal.h
+++ b/drivers/acpi/internal.h
@@ -5,7 +5,7 @@ int acpi_scan_init(void);
 /* --------------------------------------------------------------------------
                                   Power Resource
    -------------------------------------------------------------------------- */
-
+int acpi_power_init(void);
 int acpi_device_sleep_wake(struct acpi_device *dev,
                            int enable, int sleep_state, int dev_state);
 int acpi_enable_wakeup_device_power(struct acpi_device *dev, int sleep_state);

commit a5f820feb54a59fcdaf4a67a6381ea1ddb36cc6e
Author: Bjorn Helgaas <bjorn.helgaas@hp.com>
Date:   Tue Mar 24 16:49:48 2009 -0600

    ACPI: call acpi_ec_init() explicitly rather than as initcall
    
    This patch makes acpi_init() call acpi_ec_init() directly.
    Previously, both were subsys_initcalls.  acpi_ec_init()
    must happen after acpi_init(), and it's better to call it
    explicitly rather than rely on link ordering.
    
    Signed-off-by: Bjorn Helgaas <bjorn.helgaas@hp.com>
    CC: Alexey Starikovskiy <astarikovskiy@suse.de>
    Signed-off-by: Len Brown <len.brown@intel.com>

diff --git a/drivers/acpi/internal.h b/drivers/acpi/internal.h
index 28042c0f2fff..fad8e38ed271 100644
--- a/drivers/acpi/internal.h
+++ b/drivers/acpi/internal.h
@@ -17,6 +17,7 @@ extern int acpi_power_nocheck;
 /* --------------------------------------------------------------------------
                                   Embedded Controller
    -------------------------------------------------------------------------- */
+int acpi_ec_init(void);
 int acpi_ec_ecdt_probe(void);
 int acpi_boot_ec_enable(void);
 

commit e747f274951507b5a0850155c3d709e26d20de5b
Author: Bjorn Helgaas <bjorn.helgaas@hp.com>
Date:   Tue Mar 24 16:49:43 2009 -0600

    ACPI: call acpi_scan_init() explicitly rather than as initcall
    
    This patch makes acpi_init() call acpi_scan_init() directly.
    
    Previously, both acpi_init() and acpi_scan_init() were subsys_initcalls,
    and acpi_init() was called first based on the link order from the
    makefile (bus.o before scan.o).
    
    acpi_scan_init() registers the ACPI bus type, creates the root device,
    and enumerates fixed-feature and namespace devices.  All of this must
    be done after acpi_init(), and it's better to call acpi_scan_init()
    explicitly rather than rely on the link ordering.
    
    Signed-off-by: Bjorn Helgaas <bjorn.helgaas@hp.com>
    Signed-off-by: Len Brown <len.brown@intel.com>

diff --git a/drivers/acpi/internal.h b/drivers/acpi/internal.h
index 4aee4a236fc9..28042c0f2fff 100644
--- a/drivers/acpi/internal.h
+++ b/drivers/acpi/internal.h
@@ -1,5 +1,7 @@
 /* For use by Linux/ACPI infrastructure, not drivers */
 
+int acpi_scan_init(void);
+
 /* --------------------------------------------------------------------------
                                   Power Resource
    -------------------------------------------------------------------------- */

commit e60cc7a6f02598fc23c68a656fe9c263d6531ca0
Author: Bjorn Helgaas <bjorn.helgaas@hp.com>
Date:   Fri Mar 13 12:08:26 2009 -0600

    ACPI: move private declarations to internal.h
    
    A number of things that shouldn't be exposed outside the ACPI core
    were declared in include/acpi/acpi_drivers.h, where anybody can
    see them.  This patch moves those declarations to a new "internal.h"
    inside drivers/acpi.
    
    Signed-off-by: Bjorn Helgaas <bjorn.helgaas@hp.com>
    Signed-off-by: Len Brown <len.brown@intel.com>

diff --git a/drivers/acpi/internal.h b/drivers/acpi/internal.h
new file mode 100644
index 000000000000..4aee4a236fc9
--- /dev/null
+++ b/drivers/acpi/internal.h
@@ -0,0 +1,24 @@
+/* For use by Linux/ACPI infrastructure, not drivers */
+
+/* --------------------------------------------------------------------------
+                                  Power Resource
+   -------------------------------------------------------------------------- */
+
+int acpi_device_sleep_wake(struct acpi_device *dev,
+                           int enable, int sleep_state, int dev_state);
+int acpi_enable_wakeup_device_power(struct acpi_device *dev, int sleep_state);
+int acpi_disable_wakeup_device_power(struct acpi_device *dev);
+int acpi_power_get_inferred_state(struct acpi_device *device);
+int acpi_power_transition(struct acpi_device *device, int state);
+extern int acpi_power_nocheck;
+
+/* --------------------------------------------------------------------------
+                                  Embedded Controller
+   -------------------------------------------------------------------------- */
+int acpi_ec_ecdt_probe(void);
+int acpi_boot_ec_enable(void);
+
+/*--------------------------------------------------------------------------
+                                  Suspend/Resume
+  -------------------------------------------------------------------------- */
+extern int acpi_sleep_init(void);
