commit d2912cb15bdda8ba4a5dd73396ad62641af2f520
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Tue Jun 4 10:11:33 2019 +0200

    treewide: Replace GPLv2 boilerplate/reference with SPDX - rule 500
    
    Based on 2 normalized pattern(s):
    
      this program is free software you can redistribute it and or modify
      it under the terms of the gnu general public license version 2 as
      published by the free software foundation
    
      this program is free software you can redistribute it and or modify
      it under the terms of the gnu general public license version 2 as
      published by the free software foundation #
    
    extracted by the scancode license scanner the SPDX license identifier
    
      GPL-2.0-only
    
    has been chosen to replace the boilerplate/reference in 4122 file(s).
    
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Reviewed-by: Enrico Weigelt <info@metux.net>
    Reviewed-by: Kate Stewart <kstewart@linuxfoundation.org>
    Reviewed-by: Allison Randal <allison@lohutok.net>
    Cc: linux-spdx@vger.kernel.org
    Link: https://lkml.kernel.org/r/20190604081206.933168790@linutronix.de
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/leds/leds-lp55xx-common.h b/drivers/leds/leds-lp55xx-common.h
index abf1fb5da37d..783ed5103ce5 100644
--- a/drivers/leds/leds-lp55xx-common.h
+++ b/drivers/leds/leds-lp55xx-common.h
@@ -1,3 +1,4 @@
+/* SPDX-License-Identifier: GPL-2.0-only */
 /*
  * LP55XX Common Driver Header
  *
@@ -5,10 +6,6 @@
  *
  * Author: Milo(Woogyom) Kim <milo.kim@ti.com>
  *
- * This program is free software; you can redistribute it and/or
- * modify it under the terms of the GNU General Public License
- * version 2 as published by the Free Software Foundation.
- *
  * Derived from leds-lp5521.c, leds-lp5523.c
  */
 

commit 95b2af637e283e3d549c8a6af9f182b0bd972a2e
Author: Andrew Lunn <andrew@lunn.ch>
Date:   Thu Aug 20 12:22:57 2015 +0200

    leds: lp55xx: Remove work queue
    
    Now the core implements the work queue, remove it from the drivers,
    and switch to using brightness_set_blocking op.
    
    Signed-off-by: Andrew Lunn <andrew@lunn.ch>
    Signed-off-by: Jacek Anaszewski <j.anaszewski@samsung.com>
    Cc: Milo Kim <milo.kim@ti.com>

diff --git a/drivers/leds/leds-lp55xx-common.h b/drivers/leds/leds-lp55xx-common.h
index c7f1e6155001..abf1fb5da37d 100644
--- a/drivers/leds/leds-lp55xx-common.h
+++ b/drivers/leds/leds-lp55xx-common.h
@@ -95,7 +95,7 @@ struct lp55xx_reg {
  * @enable             : Chip specific enable command
  * @max_channel        : Maximum number of channels
  * @post_init_device   : Chip specific initialization code
- * @brightness_work_fn : Brightness work function
+ * @brightness_fn      : Brightness function
  * @set_led_current    : LED current set function
  * @firmware_cb        : Call function when the firmware is loaded
  * @run_engine         : Run internal engine for pattern
@@ -110,7 +110,7 @@ struct lp55xx_device_config {
 	int (*post_init_device) (struct lp55xx_chip *chip);
 
 	/* access brightness register */
-	void (*brightness_work_fn)(struct work_struct *work);
+	int (*brightness_fn)(struct lp55xx_led *led);
 
 	/* current setting function */
 	void (*set_led_current) (struct lp55xx_led *led, u8 led_current);
@@ -164,7 +164,6 @@ struct lp55xx_chip {
  * @cdev            : LED class device
  * @led_current     : Current setting at each led channel
  * @max_current     : Maximun current at each led channel
- * @brightness_work : Workqueue for brightness control
  * @brightness      : Brightness value
  * @chip            : The lp55xx chip data
  */
@@ -173,7 +172,6 @@ struct lp55xx_led {
 	struct led_classdev cdev;
 	u8 led_current;
 	u8 max_current;
-	struct work_struct brightness_work;
 	u8 brightness;
 	struct lp55xx_chip *chip;
 };

commit ed133352047e46687afd98c299ec8ce7f6ea07bd
Author: Milo Kim <milo.kim@ti.com>
Date:   Mon Aug 24 16:09:55 2015 +0900

    leds:lp55xx: use the private data instead of updating I2C device platform data
    
    Currently, lp55xx_of_populate_pdata() allocates lp55xx_platform_data if
    it's null. And it parses the DT and copies values into the
    'client->dev.platform_data'. This may have architectural issue.
    Platform data is configurable through the DT or I2C board info inside the
    platform area. However, lp55xx common driver changes this configuration
    when it is loaded. So 'client->dev.platform_data' is not null anymore.
    Eventually, the driver initialization is not identical when it's unloaded
    and loaded again.
    The lp55xx common driver should use the private data, 'lp55xx_chip->pdata'
    instead of changing the original platform data.
    
    So, lp55xx_of_populate_pdata() is modified as follows.
    * Do not update 'dev->platform_data'. Return the pointer of new allocated
       lp55xx_platform_data. Then the driver points it to private data,
       'lp55xx_chip->pdata'.
    * Each lp55xx driver checks the pointer and handles an error case.
    
    Then, original platform data configuration will be kept regardless of
    loading or unloading the driver.
    The driver allocates the memory and copies them from the DT if it's NULL.
    After the driver is loaded again, 'client->dev.platform_data' is same as
    initial load, so the driver is initialized identically.
    
    Cc: Toshi Kikuchi <toshik@chromium.org>
    Cc: linux-leds@vger.kernel.org
    Signed-off-by: Milo Kim <milo.kim@ti.com>
    Signed-off-by: Jacek Anaszewski <j.anaszewski@samsung.com>

diff --git a/drivers/leds/leds-lp55xx-common.h b/drivers/leds/leds-lp55xx-common.h
index cceab483edd0..c7f1e6155001 100644
--- a/drivers/leds/leds-lp55xx-common.h
+++ b/drivers/leds/leds-lp55xx-common.h
@@ -202,7 +202,7 @@ extern int lp55xx_register_sysfs(struct lp55xx_chip *chip);
 extern void lp55xx_unregister_sysfs(struct lp55xx_chip *chip);
 
 /* common device tree population function */
-extern int lp55xx_of_populate_pdata(struct device *dev,
-				    struct device_node *np);
+extern struct lp55xx_platform_data
+*lp55xx_of_populate_pdata(struct device *dev, struct device_node *np);
 
 #endif /* _LEDS_LP55XX_COMMON_H */

commit 36030978f51b596c30188187ffcc8a436cce16f0
Author: Milo Kim <milo.kim@ti.com>
Date:   Thu Aug 8 12:46:43 2013 +0900

    leds: lp55xx: add common macros for device attributes
    
    This patch provides common macros for LP5521 and LP5523 device attributes and
    functions.
    
    (Device attributes)
    LP5521: 'mode', 'load' and 'selftest'
    LP5523: 'mode', 'load', 'leds' and 'selftest'
    
    (Permissions)
    mode: R/W
    load: Write-only
    leds: R/W
    selftest: Read-only
    
    Couple of lines are duplicate, so use these macros for adding device attributes
    in LP5521 and LP5523 drivers.
    
    Signed-off-by: Milo Kim <milo.kim@ti.com>
    Signed-off-by: Bryan Wu <cooloney@gmail.com>

diff --git a/drivers/leds/leds-lp55xx-common.h b/drivers/leds/leds-lp55xx-common.h
index 04c1d4fc18c0..cceab483edd0 100644
--- a/drivers/leds/leds-lp55xx-common.h
+++ b/drivers/leds/leds-lp55xx-common.h
@@ -29,6 +29,53 @@ enum lp55xx_engine_mode {
 	LP55XX_ENGINE_RUN,
 };
 
+#define LP55XX_DEV_ATTR_RW(name, show, store)	\
+	DEVICE_ATTR(name, S_IRUGO | S_IWUSR, show, store)
+#define LP55XX_DEV_ATTR_RO(name, show)		\
+	DEVICE_ATTR(name, S_IRUGO, show, NULL)
+#define LP55XX_DEV_ATTR_WO(name, store)		\
+	DEVICE_ATTR(name, S_IWUSR, NULL, store)
+
+#define show_mode(nr)							\
+static ssize_t show_engine##nr##_mode(struct device *dev,		\
+				    struct device_attribute *attr,	\
+				    char *buf)				\
+{									\
+	return show_engine_mode(dev, attr, buf, nr);			\
+}
+
+#define store_mode(nr)							\
+static ssize_t store_engine##nr##_mode(struct device *dev,		\
+				     struct device_attribute *attr,	\
+				     const char *buf, size_t len)	\
+{									\
+	return store_engine_mode(dev, attr, buf, len, nr);		\
+}
+
+#define show_leds(nr)							\
+static ssize_t show_engine##nr##_leds(struct device *dev,		\
+			    struct device_attribute *attr,		\
+			    char *buf)					\
+{									\
+	return show_engine_leds(dev, attr, buf, nr);			\
+}
+
+#define store_leds(nr)						\
+static ssize_t store_engine##nr##_leds(struct device *dev,	\
+			     struct device_attribute *attr,	\
+			     const char *buf, size_t len)	\
+{								\
+	return store_engine_leds(dev, attr, buf, len, nr);	\
+}
+
+#define store_load(nr)							\
+static ssize_t store_engine##nr##_load(struct device *dev,		\
+				     struct device_attribute *attr,	\
+				     const char *buf, size_t len)	\
+{									\
+	return store_engine_load(dev, attr, buf, len, nr);		\
+}
+
 struct lp55xx_led;
 struct lp55xx_chip;
 

commit 6841a91dc5cfcb02b99413fa4199d9a8ce5ae770
Author: Milo Kim <milo.kim@ti.com>
Date:   Thu Aug 8 12:45:41 2013 +0900

    leds: lp55xx: add common data structure for program
    
    LP55xx family devices have internal three program engines which are used for
    loading LED patterns. To maintain legacy device attributes, specific data
    structure is used, 'mode' and 'led_mux'. The mode is used for showing/storing
    current engine mode such like disabled, load and run. Then led_mux is used for
    showing/storing current output LED selection.
    
    This is only for LP5523/55231.
    
    Signed-off-by: Milo Kim <milo.kim@ti.com>
    Signed-off-by: Bryan Wu <cooloney@gmail.com>

diff --git a/drivers/leds/leds-lp55xx-common.h b/drivers/leds/leds-lp55xx-common.h
index dbbf86df0f1f..04c1d4fc18c0 100644
--- a/drivers/leds/leds-lp55xx-common.h
+++ b/drivers/leds/leds-lp55xx-common.h
@@ -20,6 +20,13 @@ enum lp55xx_engine_index {
 	LP55XX_ENGINE_1,
 	LP55XX_ENGINE_2,
 	LP55XX_ENGINE_3,
+	LP55XX_ENGINE_MAX = LP55XX_ENGINE_3,
+};
+
+enum lp55xx_engine_mode {
+	LP55XX_ENGINE_DISABLED,
+	LP55XX_ENGINE_LOAD,
+	LP55XX_ENGINE_RUN,
 };
 
 struct lp55xx_led;
@@ -71,6 +78,16 @@ struct lp55xx_device_config {
 	const struct attribute_group *dev_attr_group;
 };
 
+/*
+ * struct lp55xx_engine
+ * @mode       : Engine mode
+ * @led_mux    : Mux bits for LED selection. Only used in LP5523
+ */
+struct lp55xx_engine {
+	enum lp55xx_engine_mode mode;
+	u16 led_mux;
+};
+
 /*
  * struct lp55xx_chip
  * @cl         : I2C communication for access registers
@@ -79,6 +96,7 @@ struct lp55xx_device_config {
  * @num_leds   : Number of registered LEDs
  * @cfg        : Device specific configuration data
  * @engine_idx : Selected engine number
+ * @engines    : Engine structure for the device attribute R/W interface
  * @fw         : Firmware data for running a LED pattern
  */
 struct lp55xx_chip {
@@ -89,6 +107,7 @@ struct lp55xx_chip {
 	int num_leds;
 	struct lp55xx_device_config *cfg;
 	enum lp55xx_engine_index engine_idx;
+	struct lp55xx_engine engines[LP55XX_ENGINE_MAX];
 	const struct firmware *fw;
 };
 

commit 7542a04b1515f0f878b267beb233c4ef067243fb
Author: Linus Walleij <linus.walleij@linaro.org>
Date:   Tue Apr 23 04:52:59 2013 -0700

    leds: lp55xx: add support for Device Tree bindings
    
    This patch allows the lp5521 driver to be successfully probed and
    initialised when Device Tree support is enabled.
    
    Based on a patch by Gabriel Fernandez, rewritten in accordance
    with review feedback.
    
    Cc: Gabriel Fernandez <gabriel.fernandez@stericsson.com>
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>
    Acked-by: Milo Kim <milo.kim@ti.com>
    Signed-off-by: Bryan Wu <cooloney@gmail.com>

diff --git a/drivers/leds/leds-lp55xx-common.h b/drivers/leds/leds-lp55xx-common.h
index fa6a078bf547..dbbf86df0f1f 100644
--- a/drivers/leds/leds-lp55xx-common.h
+++ b/drivers/leds/leds-lp55xx-common.h
@@ -135,4 +135,8 @@ extern void lp55xx_unregister_leds(struct lp55xx_led *led,
 extern int lp55xx_register_sysfs(struct lp55xx_chip *chip);
 extern void lp55xx_unregister_sysfs(struct lp55xx_chip *chip);
 
+/* common device tree population function */
+extern int lp55xx_of_populate_pdata(struct device *dev,
+				    struct device_node *np);
+
 #endif /* _LEDS_LP55XX_COMMON_H */

commit 53b4192266436e75dea96c8ef495eadd6f3df981
Author: Kim, Milo <Milo.Kim@ti.com>
Date:   Wed Mar 20 17:37:00 2013 -0700

    leds: lp55xx: use common clock framework when external clock is used
    
    Program execution is timed with 32768Hz clock in the LP55xx family devices.
    To run LED functionalities, LP55xx devices provide two options.
    One is using internal clock. The other is using external clock.
    This patch enables external clock detection automatically.
    If external clock is not detected, then the internal clock will be used in the
    LP55xx driver.
    
    Valid clock rate is 32768Hz in LP55xx devices.
    
    This new API is used in each LP55xx driver like LP5521 and LP5562.
    
    Signed-off-by: Milo(Woogyom) Kim <milo.kim@ti.com>
    Signed-off-by: Bryan Wu <cooloney@gmail.com>

diff --git a/drivers/leds/leds-lp55xx-common.h b/drivers/leds/leds-lp55xx-common.h
index ece4761a1302..fa6a078bf547 100644
--- a/drivers/leds/leds-lp55xx-common.h
+++ b/drivers/leds/leds-lp55xx-common.h
@@ -83,6 +83,7 @@ struct lp55xx_device_config {
  */
 struct lp55xx_chip {
 	struct i2c_client *cl;
+	struct clk *clk;
 	struct lp55xx_platform_data *pdata;
 	struct mutex lock;	/* lock for user-space interface */
 	int num_leds;
@@ -117,6 +118,9 @@ extern int lp55xx_read(struct lp55xx_chip *chip, u8 reg, u8 *val);
 extern int lp55xx_update_bits(struct lp55xx_chip *chip, u8 reg,
 			u8 mask, u8 val);
 
+/* external clock detection */
+extern bool lp55xx_is_extclk_used(struct lp55xx_chip *chip);
+
 /* common device init/deinit functions */
 extern int lp55xx_init_device(struct lp55xx_chip *chip);
 extern void lp55xx_deinit_device(struct lp55xx_chip *chip);

commit ba6fa84651ff9a609e0ceb8265e3335ab6ed656d
Author: Milo(Woogyom) Kim <milo.kim@ti.com>
Date:   Tue Feb 5 19:23:04 2013 +0900

    leds-lp55xx: add new function for removing device attribtues
    
     lp55xx_unregister_sysfs() is used for removing lp55xx device attributes.
     Chip specific and engine attributes are removed on unloading the driver.
    
    Signed-off-by: Milo(Woogyom) Kim <milo.kim@ti.com>
    Signed-off-by: Bryan Wu <cooloney@gmail.com>

diff --git a/drivers/leds/leds-lp55xx-common.h b/drivers/leds/leds-lp55xx-common.h
index 64eb78da1c4b..ece4761a1302 100644
--- a/drivers/leds/leds-lp55xx-common.h
+++ b/drivers/leds/leds-lp55xx-common.h
@@ -129,5 +129,6 @@ extern void lp55xx_unregister_leds(struct lp55xx_led *led,
 
 /* common device attributes functions */
 extern int lp55xx_register_sysfs(struct lp55xx_chip *chip);
+extern void lp55xx_unregister_sysfs(struct lp55xx_chip *chip);
 
 #endif /* _LEDS_LP55XX_COMMON_H */

commit 240085e255cd2818aff2ccde3066b7db1f29076a
Author: Milo(Woogyom) Kim <milo.kim@ti.com>
Date:   Tue Feb 5 19:20:01 2013 +0900

    leds-lp55xx: support device specific attributes
    
     To support device specific attributes, new common driver function is added.
     Eventually those are created on registering the sysfs with common dev attrs.
     Furthermore, this patch makes adding device attributes simple in each driver.
    
    Signed-off-by: Milo(Woogyom) Kim <milo.kim@ti.com>
    Signed-off-by: Bryan Wu <cooloney@gmail.com>

diff --git a/drivers/leds/leds-lp55xx-common.h b/drivers/leds/leds-lp55xx-common.h
index 8473abf9830c..64eb78da1c4b 100644
--- a/drivers/leds/leds-lp55xx-common.h
+++ b/drivers/leds/leds-lp55xx-common.h
@@ -45,6 +45,7 @@ struct lp55xx_reg {
  * @set_led_current    : LED current set function
  * @firmware_cb        : Call function when the firmware is loaded
  * @run_engine         : Run internal engine for pattern
+ * @dev_attr_group     : Device specific attributes
  */
 struct lp55xx_device_config {
 	const struct lp55xx_reg reset;
@@ -65,6 +66,9 @@ struct lp55xx_device_config {
 
 	/* used for running firmware LED patterns */
 	void (*run_engine) (struct lp55xx_chip *chip, bool start);
+
+	/* additional device specific attributes */
+	const struct attribute_group *dev_attr_group;
 };
 
 /*

commit 10c06d178df11b0b2b746321a80ea14241997127
Author: Milo(Woogyom) Kim <milo.kim@ti.com>
Date:   Tue Feb 5 19:17:20 2013 +0900

    leds-lp55xx: support firmware interface
    
     This patch provides additional device attributes which enable
     loading the firmware. ('select_engine' and 'run_engine')
     To run a LED pattern, two parts of driver should be enabled.
    
     Common features : lp55xx-common
     ===============================
     Firmware interface for loading LED patterns
    
     Chip specific features : leds-lp5521, leds-lp5523
     =================================================
     Register addresses for loading firmware data
     Register addresses for running selected engine
    
     Pattern programming sequence
     ============================
     LP55xx chips have three program engines.
     To load and run a LED pattern, the programming sequence is as follows.
     (1) Select an engine number (1/2/3)
     (2) Set engine mode to load
     (3) Write pattern data into selected area
     (4) Set engine mode to run
    
     This sequence is almost same as the firmware interface.
     (1) Select an engine number               : 'select_engine' dev attribute
     (2) Mode change to load                   : 'loading' of firmware class
     (3) Write pattern data into selected area : 'data' of firmware class
     (4) Mode change to run                    : 'run_engine' dev attribute
    
     (1) and (4) are device specific features which provide callback functions
     (2) and (3) are common features.
    
     For example,
     echo 1 or 2 or 3 > /sys/bus/i2c/devices/xxxx/select_engine
     echo 1 > /sys/class/firmware/lp5521/loading
     echo "4000600040FF6000" > /sys/class/firmware/lp5521/data
     echo 0 > /sys/class/firmware/lp5521/loading
     echo 1 > /sys/bus/i2c/devices/xxxx/run_engine
    
     As soon as 'loading' is set to 0, registered callback is called.
     Inside the callback, the selected engine is loaded and memory is updated.
     To run programmed pattern, 'run_engine' attribute should be enabled.
    
     Device specific data structure
     ==============================
     o Firmware callback
       load selected engine and update program memory
     o Run engine
       change the engine mode
     o 'engine_idx' and firmware data, 'fw'
       Those are used in the driver internally with callback functions
    
    Signed-off-by: Milo(Woogyom) Kim <milo.kim@ti.com>
    Signed-off-by: Bryan Wu <cooloney@gmail.com>

diff --git a/drivers/leds/leds-lp55xx-common.h b/drivers/leds/leds-lp55xx-common.h
index d0be837643f0..8473abf9830c 100644
--- a/drivers/leds/leds-lp55xx-common.h
+++ b/drivers/leds/leds-lp55xx-common.h
@@ -15,6 +15,13 @@
 #ifndef _LEDS_LP55XX_COMMON_H
 #define _LEDS_LP55XX_COMMON_H
 
+enum lp55xx_engine_index {
+	LP55XX_ENGINE_INVALID,
+	LP55XX_ENGINE_1,
+	LP55XX_ENGINE_2,
+	LP55XX_ENGINE_3,
+};
+
 struct lp55xx_led;
 struct lp55xx_chip;
 
@@ -36,6 +43,8 @@ struct lp55xx_reg {
  * @post_init_device   : Chip specific initialization code
  * @brightness_work_fn : Brightness work function
  * @set_led_current    : LED current set function
+ * @firmware_cb        : Call function when the firmware is loaded
+ * @run_engine         : Run internal engine for pattern
  */
 struct lp55xx_device_config {
 	const struct lp55xx_reg reset;
@@ -50,6 +59,12 @@ struct lp55xx_device_config {
 
 	/* current setting function */
 	void (*set_led_current) (struct lp55xx_led *led, u8 led_current);
+
+	/* access program memory when the firmware is loaded */
+	void (*firmware_cb)(struct lp55xx_chip *chip);
+
+	/* used for running firmware LED patterns */
+	void (*run_engine) (struct lp55xx_chip *chip, bool start);
 };
 
 /*
@@ -59,6 +74,8 @@ struct lp55xx_device_config {
  * @lock       : Lock for user-space interface
  * @num_leds   : Number of registered LEDs
  * @cfg        : Device specific configuration data
+ * @engine_idx : Selected engine number
+ * @fw         : Firmware data for running a LED pattern
  */
 struct lp55xx_chip {
 	struct i2c_client *cl;
@@ -66,6 +83,8 @@ struct lp55xx_chip {
 	struct mutex lock;	/* lock for user-space interface */
 	int num_leds;
 	struct lp55xx_device_config *cfg;
+	enum lp55xx_engine_index engine_idx;
+	const struct firmware *fw;
 };
 
 /*

commit b3b6f8119d752c969c6394314dc7ab80e6611111
Author: Milo(Woogyom) Kim <milo.kim@ti.com>
Date:   Tue Feb 5 19:15:27 2013 +0900

    leds-lp55xx: add new lp55xx_register_sysfs() for the firmware interface
    
     LP55xx family chips have internal program memory which run various patterns.
     Using this memory, LEDs continue on blinking/dimming without continuous I2C
     commands. That means the I2C HOST can be entered into sleep once the memory
     is updated.
    
     An application can get hex data from a file and write them into
     the program memory through the I2C. This is general firwmare interface.
    
     This patch is the initial step for adding the firmware interface.
    
    Signed-off-by: Milo(Woogyom) Kim <milo.kim@ti.com>
    Signed-off-by: Bryan Wu <cooloney@gmail.com>

diff --git a/drivers/leds/leds-lp55xx-common.h b/drivers/leds/leds-lp55xx-common.h
index 32d96828cbc6..d0be837643f0 100644
--- a/drivers/leds/leds-lp55xx-common.h
+++ b/drivers/leds/leds-lp55xx-common.h
@@ -103,4 +103,8 @@ extern int lp55xx_register_leds(struct lp55xx_led *led,
 				struct lp55xx_chip *chip);
 extern void lp55xx_unregister_leds(struct lp55xx_led *led,
 				struct lp55xx_chip *chip);
+
+/* common device attributes functions */
+extern int lp55xx_register_sysfs(struct lp55xx_chip *chip);
+
 #endif /* _LEDS_LP55XX_COMMON_H */

commit c3a68ebfcd22abc186f2328149732c801449b297
Author: Milo(Woogyom) Kim <milo.kim@ti.com>
Date:   Tue Feb 5 19:11:18 2013 +0900

    leds-lp55xx: use lp55xx_unregister_leds()
    
     To unregister led class devices and sysfs attributes,
     LP5521 and LP5523 have each driver function.
     This patch makes both drivers simple using common driver function,
     lp55xx_unregister_leds().
    
     And some unused variables are removed.
    
    Signed-off-by: Milo(Woogyom) Kim <milo.kim@ti.com>
    Signed-off-by: Bryan Wu <cooloney@gmail.com>

diff --git a/drivers/leds/leds-lp55xx-common.h b/drivers/leds/leds-lp55xx-common.h
index 70d2bdf54b8e..32d96828cbc6 100644
--- a/drivers/leds/leds-lp55xx-common.h
+++ b/drivers/leds/leds-lp55xx-common.h
@@ -101,4 +101,6 @@ extern void lp55xx_deinit_device(struct lp55xx_chip *chip);
 /* common LED class device functions */
 extern int lp55xx_register_leds(struct lp55xx_led *led,
 				struct lp55xx_chip *chip);
+extern void lp55xx_unregister_leds(struct lp55xx_led *led,
+				struct lp55xx_chip *chip);
 #endif /* _LEDS_LP55XX_COMMON_H */

commit 0e2023463a3c9412728cb2c36c79aca0bb731cc8
Author: Milo(Woogyom) Kim <milo.kim@ti.com>
Date:   Tue Feb 5 19:07:34 2013 +0900

    leds-lp55xx: use lp55xx_init_led() common function
    
     lp5521_init_led() and lp5523_init_led() are replaced with one common function,
     lp55xx_init_led().
     Max channels is configurable, so it's used in lp55xx_init_led().
    
     'LP5523_LEDS' are changed to 'LP5523_MAX_LEDS'.
    
     lp55xx_set_brightness, lp55xx_led_attributes: skeleton
     Will be filled in next patches.
    
    Signed-off-by: Milo(Woogyom) Kim <milo.kim@ti.com>
    Signed-off-by: Bryan Wu <cooloney@gmail.com>

diff --git a/drivers/leds/leds-lp55xx-common.h b/drivers/leds/leds-lp55xx-common.h
index 219780a2d4eb..70d2bdf54b8e 100644
--- a/drivers/leds/leds-lp55xx-common.h
+++ b/drivers/leds/leds-lp55xx-common.h
@@ -32,6 +32,7 @@ struct lp55xx_reg {
  * struct lp55xx_device_config
  * @reset              : Chip specific reset command
  * @enable             : Chip specific enable command
+ * @max_channel        : Maximum number of channels
  * @post_init_device   : Chip specific initialization code
  * @brightness_work_fn : Brightness work function
  * @set_led_current    : LED current set function
@@ -39,6 +40,7 @@ struct lp55xx_reg {
 struct lp55xx_device_config {
 	const struct lp55xx_reg reset;
 	const struct lp55xx_reg enable;
+	const int max_channel;
 
 	/* define if the device has specific initialization process */
 	int (*post_init_device) (struct lp55xx_chip *chip);

commit 9e9b3db1b2f725bacaf1b7e8708a0c78265bde97
Author: Milo(Woogyom) Kim <milo.kim@ti.com>
Date:   Tue Feb 5 19:06:27 2013 +0900

    leds-lp55xx: use lp55xx common led registration function
    
     LED class devices are registered in lp5521_register_leds() and
     lp5523_register_leds().
     Two separate functions are merged into consolidated lp55xx function,
     lp55xx_register_leds().
    
     Error handling fix:
     Unregistering LEDS are handled in lp55xx_register_leds() when LED registration
     failure occurs. So each driver error handler is changed to 'err_register_leds'
    
     Chip dependency: 'brightness_work_fn' and 'set_led_current'
     To make the structure abstract, both functions are configured in each driver.
     Those functions should be done by each driver because register control is
     chip-dependant work.
    
     lp55xx_init_led: skeleton
     Will be filled in next patch
    
    Signed-off-by: Milo(Woogyom) Kim <milo.kim@ti.com>
    Signed-off-by: Bryan Wu <cooloney@gmail.com>

diff --git a/drivers/leds/leds-lp55xx-common.h b/drivers/leds/leds-lp55xx-common.h
index 908b00a56b7e..219780a2d4eb 100644
--- a/drivers/leds/leds-lp55xx-common.h
+++ b/drivers/leds/leds-lp55xx-common.h
@@ -33,6 +33,8 @@ struct lp55xx_reg {
  * @reset              : Chip specific reset command
  * @enable             : Chip specific enable command
  * @post_init_device   : Chip specific initialization code
+ * @brightness_work_fn : Brightness work function
+ * @set_led_current    : LED current set function
  */
 struct lp55xx_device_config {
 	const struct lp55xx_reg reset;
@@ -40,6 +42,12 @@ struct lp55xx_device_config {
 
 	/* define if the device has specific initialization process */
 	int (*post_init_device) (struct lp55xx_chip *chip);
+
+	/* access brightness register */
+	void (*brightness_work_fn)(struct work_struct *work);
+
+	/* current setting function */
+	void (*set_led_current) (struct lp55xx_led *led, u8 led_current);
 };
 
 /*
@@ -88,4 +96,7 @@ extern int lp55xx_update_bits(struct lp55xx_chip *chip, u8 reg,
 extern int lp55xx_init_device(struct lp55xx_chip *chip);
 extern void lp55xx_deinit_device(struct lp55xx_chip *chip);
 
+/* common LED class device functions */
+extern int lp55xx_register_leds(struct lp55xx_led *led,
+				struct lp55xx_chip *chip);
 #endif /* _LEDS_LP55XX_COMMON_H */

commit 6ce6176263393dd80b9a537c1e1462b8529f240b
Author: Milo(Woogyom) Kim <milo.kim@ti.com>
Date:   Tue Feb 5 19:03:02 2013 +0900

    leds-lp55xx: use lp55xx common deinit function
    
     Two separate de-init functions are merged into one common function.
     And it is used in err_post_init of lp55xx_init_device().
    
    Signed-off-by: Milo(Woogyom) Kim <milo.kim@ti.com>
    Signed-off-by: Bryan Wu <cooloney@gmail.com>

diff --git a/drivers/leds/leds-lp55xx-common.h b/drivers/leds/leds-lp55xx-common.h
index ffedc7723d84..908b00a56b7e 100644
--- a/drivers/leds/leds-lp55xx-common.h
+++ b/drivers/leds/leds-lp55xx-common.h
@@ -84,7 +84,8 @@ extern int lp55xx_read(struct lp55xx_chip *chip, u8 reg, u8 *val);
 extern int lp55xx_update_bits(struct lp55xx_chip *chip, u8 reg,
 			u8 mask, u8 val);
 
-/* common device init functions */
+/* common device init/deinit functions */
 extern int lp55xx_init_device(struct lp55xx_chip *chip);
+extern void lp55xx_deinit_device(struct lp55xx_chip *chip);
 
 #endif /* _LEDS_LP55XX_COMMON_H */

commit ffbdccdbbaee814963a09d25b1cc598cfe131366
Author: Milo(Woogyom) Kim <milo.kim@ti.com>
Date:   Tue Feb 5 18:57:36 2013 +0900

    leds-lp55xx: use lp55xx common init function - post int
    
     LP5521/5523 chip configuration is replaced with lp55xx common function,
     lp55xx_post_init_device().
    
     Name change:
     lp5521/5523_configure() to lp5521/5523_post_init_device()
     These are called in init function.
    
     Register access function
     Argument type is changed from 'i2c_client' to 'lp55xx_chip'.
     Use exported R/W functions of lp55xx common driver.
    
     Temporary variables in lp5521/5523_init_device()
     These functions will be removed but temporary variables are needed for
     blocking build warnings - incompatible pointer.
    
    Signed-off-by: Milo(Woogyom) Kim <milo.kim@ti.com>
    Signed-off-by: Bryan Wu <cooloney@gmail.com>

diff --git a/drivers/leds/leds-lp55xx-common.h b/drivers/leds/leds-lp55xx-common.h
index 81753012ba27..ffedc7723d84 100644
--- a/drivers/leds/leds-lp55xx-common.h
+++ b/drivers/leds/leds-lp55xx-common.h
@@ -32,10 +32,14 @@ struct lp55xx_reg {
  * struct lp55xx_device_config
  * @reset              : Chip specific reset command
  * @enable             : Chip specific enable command
+ * @post_init_device   : Chip specific initialization code
  */
 struct lp55xx_device_config {
 	const struct lp55xx_reg reset;
 	const struct lp55xx_reg enable;
+
+	/* define if the device has specific initialization process */
+	int (*post_init_device) (struct lp55xx_chip *chip);
 };
 
 /*

commit e3a700d8aae190e09fb06abe0ddd2e172a682508
Author: Milo(Woogyom) Kim <milo.kim@ti.com>
Date:   Tue Feb 5 18:09:56 2013 +0900

    leds-lp55xx: use lp55xx common init function - detect
    
     LP5521/5523 chip detection functions are replaced with lp55xx common function,
     lp55xx_detect_device().
     Chip dependent address and values are configurable in each driver.
     In init function, chip detection is executed.
    
    Signed-off-by: Milo(Woogyom) Kim <milo.kim@ti.com>
    Signed-off-by: Bryan Wu <cooloney@gmail.com>

diff --git a/drivers/leds/leds-lp55xx-common.h b/drivers/leds/leds-lp55xx-common.h
index a73ee0b9a0bd..81753012ba27 100644
--- a/drivers/leds/leds-lp55xx-common.h
+++ b/drivers/leds/leds-lp55xx-common.h
@@ -31,9 +31,11 @@ struct lp55xx_reg {
 /*
  * struct lp55xx_device_config
  * @reset              : Chip specific reset command
+ * @enable             : Chip specific enable command
  */
 struct lp55xx_device_config {
 	const struct lp55xx_reg reset;
+	const struct lp55xx_reg enable;
 };
 
 /*

commit 48068d5de16c23c256c085b2cd3ff03bec393900
Author: Milo(Woogyom) Kim <milo.kim@ti.com>
Date:   Tue Feb 5 18:08:49 2013 +0900

    leds-lp55xx: use lp55xx common init function - reset
    
     LP5521/5523 reset device functions are moved to lp55xx common driver.
     Value of register address and value are chip dependent.
     Those are configured in each driver.
     In init function, reset command is executed.
    
    Signed-off-by: Milo(Woogyom) Kim <milo.kim@ti.com>
    Signed-off-by: Bryan Wu <cooloney@gmail.com>

diff --git a/drivers/leds/leds-lp55xx-common.h b/drivers/leds/leds-lp55xx-common.h
index 09d1882ce58e..a73ee0b9a0bd 100644
--- a/drivers/leds/leds-lp55xx-common.h
+++ b/drivers/leds/leds-lp55xx-common.h
@@ -18,18 +18,38 @@
 struct lp55xx_led;
 struct lp55xx_chip;
 
+/*
+ * struct lp55xx_reg
+ * @addr : Register address
+ * @val  : Register value
+ */
+struct lp55xx_reg {
+	u8 addr;
+	u8 val;
+};
+
+/*
+ * struct lp55xx_device_config
+ * @reset              : Chip specific reset command
+ */
+struct lp55xx_device_config {
+	const struct lp55xx_reg reset;
+};
+
 /*
  * struct lp55xx_chip
  * @cl         : I2C communication for access registers
  * @pdata      : Platform specific data
  * @lock       : Lock for user-space interface
  * @num_leds   : Number of registered LEDs
+ * @cfg        : Device specific configuration data
  */
 struct lp55xx_chip {
 	struct i2c_client *cl;
 	struct lp55xx_platform_data *pdata;
 	struct mutex lock;	/* lock for user-space interface */
 	int num_leds;
+	struct lp55xx_device_config *cfg;
 };
 
 /*

commit a85908dd7799e4fa242812ce27a8f774c721d1fb
Author: Milo(Woogyom) Kim <milo.kim@ti.com>
Date:   Tue Feb 5 18:07:20 2013 +0900

    leds-lp55xx: use lp55xx common init function - platform data
    
     LP5521/5523 platform data functions are moved to lp55xx common driver.
     New init function, lp55xx_init_device() is created.
    
    Signed-off-by: Milo(Woogyom) Kim <milo.kim@ti.com>
    Signed-off-by: Bryan Wu <cooloney@gmail.com>

diff --git a/drivers/leds/leds-lp55xx-common.h b/drivers/leds/leds-lp55xx-common.h
index 369cb9c91f17..09d1882ce58e 100644
--- a/drivers/leds/leds-lp55xx-common.h
+++ b/drivers/leds/leds-lp55xx-common.h
@@ -58,4 +58,7 @@ extern int lp55xx_read(struct lp55xx_chip *chip, u8 reg, u8 *val);
 extern int lp55xx_update_bits(struct lp55xx_chip *chip, u8 reg,
 			u8 mask, u8 val);
 
+/* common device init functions */
+extern int lp55xx_init_device(struct lp55xx_chip *chip);
+
 #endif /* _LEDS_LP55XX_COMMON_H */

commit c93d08fa75020835741c7b1d0523ff854e8acde1
Author: Milo(Woogyom) Kim <milo.kim@ti.com>
Date:   Tue Feb 5 18:01:23 2013 +0900

    leds-lp55xx: add new common driver for lp5521/5523
    
     This patch supports basic common driver code for LP5521, LP5523/55231 devices.
    
     ( Driver Structure Data )
    
     lp55xx_led and lp55xx_chip
     In lp55xx common driver, two different data structure is used.
     o lp55xx_led
       control multi output LED channels such as led current, channel index.
     o lp55xx_chip
       general chip control such like the I2C and platform data.
    
     For example, LP5521 has maximum 3 LED channels.
     LP5523/55231 has 9 output channels.
    
     lp55xx_chip for LP5521 ... lp55xx_led #1
                                lp55xx_led #2
                                lp55xx_led #3
    
     lp55xx_chip for LP5523 ... lp55xx_led #1
                                lp55xx_led #2
                                .
                                .
                                lp55xx_led #9
    
     ( Platform Data )
    
     LP5521 and LP5523/55231 have own specific platform data.
     However, this data can be handled with just one platform data structure.
     The lp55xx platform data is declared in the header.
     This structure is derived from leds-lp5521.h and leds-lp5523.h
    
    Signed-off-by: Milo(Woogyom) Kim <milo.kim@ti.com>
    Signed-off-by: Bryan Wu <cooloney@gmail.com>

diff --git a/drivers/leds/leds-lp55xx-common.h b/drivers/leds/leds-lp55xx-common.h
new file mode 100644
index 000000000000..369cb9c91f17
--- /dev/null
+++ b/drivers/leds/leds-lp55xx-common.h
@@ -0,0 +1,61 @@
+/*
+ * LP55XX Common Driver Header
+ *
+ * Copyright (C) 2012 Texas Instruments
+ *
+ * Author: Milo(Woogyom) Kim <milo.kim@ti.com>
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License
+ * version 2 as published by the Free Software Foundation.
+ *
+ * Derived from leds-lp5521.c, leds-lp5523.c
+ */
+
+#ifndef _LEDS_LP55XX_COMMON_H
+#define _LEDS_LP55XX_COMMON_H
+
+struct lp55xx_led;
+struct lp55xx_chip;
+
+/*
+ * struct lp55xx_chip
+ * @cl         : I2C communication for access registers
+ * @pdata      : Platform specific data
+ * @lock       : Lock for user-space interface
+ * @num_leds   : Number of registered LEDs
+ */
+struct lp55xx_chip {
+	struct i2c_client *cl;
+	struct lp55xx_platform_data *pdata;
+	struct mutex lock;	/* lock for user-space interface */
+	int num_leds;
+};
+
+/*
+ * struct lp55xx_led
+ * @chan_nr         : Channel number
+ * @cdev            : LED class device
+ * @led_current     : Current setting at each led channel
+ * @max_current     : Maximun current at each led channel
+ * @brightness_work : Workqueue for brightness control
+ * @brightness      : Brightness value
+ * @chip            : The lp55xx chip data
+ */
+struct lp55xx_led {
+	int chan_nr;
+	struct led_classdev cdev;
+	u8 led_current;
+	u8 max_current;
+	struct work_struct brightness_work;
+	u8 brightness;
+	struct lp55xx_chip *chip;
+};
+
+/* register access */
+extern int lp55xx_write(struct lp55xx_chip *chip, u8 reg, u8 val);
+extern int lp55xx_read(struct lp55xx_chip *chip, u8 reg, u8 *val);
+extern int lp55xx_update_bits(struct lp55xx_chip *chip, u8 reg,
+			u8 mask, u8 val);
+
+#endif /* _LEDS_LP55XX_COMMON_H */
