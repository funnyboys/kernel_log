commit e611c0fe318c6d6827ee2bba660fbc23cf73f7dc
Merge: 3b69e8b45711 347052e3bf1b
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Sun Jun 7 09:42:16 2020 -0700

    Merge tag 'usb-5.8-rc1' of git://git.kernel.org/pub/scm/linux/kernel/git/gregkh/usb
    
    Pull USB/PHY driver updates from Greg KH:
     "Here are the large set of USB and PHY driver updates for 5.8-rc1.
    
      Nothing huge, just lots of little things:
    
       - USB gadget fixes and additions all over the place
    
       - new PHY drivers
    
       - PHY driver fixes and updates
    
       - XHCI driver updates
    
       - musb driver updates
    
       - more USB-serial driver ids added
    
       - various USB quirks added
    
       - thunderbolt minor updates and fixes
    
       - typec updates and additions
    
      All of these have been in linux-next for a while with no reported
      issues"
    
    * tag 'usb-5.8-rc1' of git://git.kernel.org/pub/scm/linux/kernel/git/gregkh/usb: (245 commits)
      usb: dwc3: meson-g12a: fix USB2 PHY initialization on G12A and A1 SoCs
      usb: dwc3: meson-g12a: fix error path when fetching the reset line fails
      Revert "dt-bindings: usb: qcom,dwc3: Convert USB DWC3 bindings"
      Revert "dt-bindings: usb: qcom,dwc3: Add compatible for SC7180"
      Revert "dt-bindings: usb: qcom,dwc3: Introduce interconnect properties for Qualcomm DWC3 driver"
      USB: serial: ch341: fix lockup of devices with limited prescaler
      USB: serial: ch341: add basis for quirk detection
      CDC-ACM: heed quirk also in error handling
      USB: serial: option: add Telit LE910C1-EUX compositions
      usb: musb: Fix runtime PM imbalance on error
      usb: musb: jz4740: Prevent lockup when CONFIG_SMP is set
      usb: musb: mediatek: add reset FADDR to zero in reset interrupt handle
      usb: musb: use true for 'use_dma'
      usb: musb: start session in resume for host port
      usb: musb: return -ESHUTDOWN in urb when three-strikes error happened
      USB: serial: qcserial: add DW5816e QDL support
      thunderbolt: Add trivial .shutdown
      usb: dwc3: keystone: Turn on USB3 PHY before controller
      dt-bindings: usb: ti,keystone-dwc3.yaml: Add USB3.0 PHY property
      dt-bindings: usb: convert keystone-usb.txt to YAML
      ...

commit 6e24826d2c51a0e005ecf3ed74ea48688fca0306
Author: Linus Walleij <linus.walleij@linaro.org>
Date:   Wed Apr 15 21:24:48 2020 +0200

    usb: fusb302: Convert to use GPIO descriptors
    
    This converts the FUSB302 driver to use GPIO descriptors.
    The conversion to descriptors per se is pretty straight-forward.
    
    In the process I discovered that:
    
    1. The driver uses a completely undocumented device tree binding
       for the interrupt GPIO line, "fcs,int_n". Ooops.
    
    2. The undocumented binding, presumably since it has not seen
       review, is just "fcs,int_n", lacking the compulsory "-gpios"
       suffix and also something that is not a good name because
       the "_n" implies the line is inverted which is something we
       handle with flags in the device tree. Ooops.
    
    3. Possibly the driver should not be requesting the line as a
       GPIO and request the corresponding interrupt line by open
       coding, the GPIO chip is very likely doubleing as an IRQ
       controller and can probably provide an interrupt directly
       for this line with interrupts-extended = <&gpio0 ...>;
    
    4. Possibly the IRQ should just be tagged on the I2C client node
       in the device tree like apparently ACPI does, as it overrides
       this IRQ with client->irq if that exists.
    
    But now it is too late to do much about that and as I can see
    this is used like this in the Pinebook which is a shipping product
    so let'a just contain the mess and move on.
    
    The property currently appears in:
    arch/arm64/boot/dts/rockchip/rk3399-pinebook-pro.dts
    
    Create a quirk in the GPIO OF library to allow this property
    specifically to be specified without the "-gpios" suffix, we have
    other such bindings already.
    
    Cc: Tobias Schramm <t.schramm@manjaro.org>
    Cc: Heikki Krogerus <heikki.krogerus@linux.intel.com>
    Cc: Yueyao Zhu <yueyao@google.com>
    Cc: Guenter Roeck <linux@roeck-us.net>
    Cc: devicetree@vger.kernel.org
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>
    Link: https://lore.kernel.org/r/20200415192448.305257-1-linus.walleij@linaro.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/gpio/gpiolib-of.c b/drivers/gpio/gpiolib-of.c
index ccc449df3792..20c2c428168e 100644
--- a/drivers/gpio/gpiolib-of.c
+++ b/drivers/gpio/gpiolib-of.c
@@ -460,6 +460,24 @@ static struct gpio_desc *of_find_arizona_gpio(struct device *dev,
 	return of_get_named_gpiod_flags(dev->of_node, con_id, 0, of_flags);
 }
 
+static struct gpio_desc *of_find_usb_gpio(struct device *dev,
+					  const char *con_id,
+					  enum of_gpio_flags *of_flags)
+{
+	/*
+	 * Currently this USB quirk is only for the Fairchild FUSB302 host which is using
+	 * an undocumented DT GPIO line named "fcs,int_n" without the compulsory "-gpios"
+	 * suffix.
+	 */
+	if (!IS_ENABLED(CONFIG_TYPEC_FUSB302))
+		return ERR_PTR(-ENOENT);
+
+	if (!con_id || strcmp(con_id, "fcs,int_n"))
+		return ERR_PTR(-ENOENT);
+
+	return of_get_named_gpiod_flags(dev->of_node, con_id, 0, of_flags);
+}
+
 struct gpio_desc *of_find_gpio(struct device *dev, const char *con_id,
 			       unsigned int idx, unsigned long *flags)
 {
@@ -504,6 +522,9 @@ struct gpio_desc *of_find_gpio(struct device *dev, const char *con_id,
 	if (PTR_ERR(desc) == -ENOENT)
 		desc = of_find_arizona_gpio(dev, con_id, &of_flags);
 
+	if (PTR_ERR(desc) == -ENOENT)
+		desc = of_find_usb_gpio(dev, con_id, &of_flags);
+
 	if (IS_ERR(desc))
 		return desc;
 

commit ea06a482a47c41f5d04565dffbc21156bcfdd3e8
Author: Adam Ford <aford173@gmail.com>
Date:   Sat Apr 11 20:33:51 2020 -0500

    gpiolib: of: improve gpiolib-of support of pull up/down on expanders
    
    When using GPIO expanders attached to I2C ports, their set_config function
    needs to be passed a config setting which contains options to enable pull
    up or pull down bias feature.  In order to set this config properly,
    the gpio parser needs to handle GPIO_PULL_UP and GPIO_PULL_DOWN.
    
    This patch enables the flags corresponding to GPIO_PULL_UP and
    GPIO_PULL_DOWN.
    
    Signed-off-by: Adam Ford <aford173@gmail.com>
    Signed-off-by: Bartosz Golaszewski <bgolaszewski@baylibre.com>

diff --git a/drivers/gpio/gpiolib-of.c b/drivers/gpio/gpiolib-of.c
index ccc449df3792..2c5dd1349f16 100644
--- a/drivers/gpio/gpiolib-of.c
+++ b/drivers/gpio/gpiolib-of.c
@@ -344,6 +344,12 @@ struct gpio_desc *gpiod_get_from_of_node(struct device_node *node,
 	if (transitory)
 		lflags |= GPIO_TRANSITORY;
 
+	if (flags & OF_GPIO_PULL_UP)
+		lflags |= GPIO_PULL_UP;
+
+	if (flags & OF_GPIO_PULL_DOWN)
+		lflags |= GPIO_PULL_DOWN;
+
 	ret = gpiod_configure_flags(desc, propname, lflags, dflags);
 	if (ret < 0) {
 		gpiod_put(desc);
@@ -585,6 +591,10 @@ static struct gpio_desc *of_parse_own_gpio(struct device_node *np,
 		*lflags |= GPIO_ACTIVE_LOW;
 	if (xlate_flags & OF_GPIO_TRANSITORY)
 		*lflags |= GPIO_TRANSITORY;
+	if (xlate_flags & OF_GPIO_PULL_UP)
+		*lflags |= GPIO_PULL_UP;
+	if (xlate_flags & OF_GPIO_PULL_DOWN)
+		*lflags |= GPIO_PULL_DOWN;
 
 	if (of_property_read_bool(np, "input"))
 		*dflags |= GPIOD_IN;

commit 63636d956c455c0fbe2118078a03f563ddd6bf6e
Author: Geert Uytterhoeven <geert+renesas@glider.be>
Date:   Thu Feb 20 14:01:49 2020 +0100

    gpio: of: Add DT overlay support for GPIO hogs
    
    As GPIO hogs are configured at GPIO controller initialization time,
    adding/removing GPIO hogs in DT overlays does not work.
    
    Add support for GPIO hogs described in DT overlays by registering an OF
    reconfiguration notifier, to handle the addition and removal of GPIO hog
    subnodes to/from a GPIO controller device node.
    
    Note that when a GPIO hog device node is being removed, its "gpios"
    properties is no longer available, so we have to keep track of which
    node a hog belongs to, which is done by adding a pointer to the hog's
    device node to struct gpio_desc.
    
    Signed-off-by: Geert Uytterhoeven <geert+renesas@glider.be>
    Link: https://lore.kernel.org/r/20200220130149.26283-3-geert+renesas@glider.be
    Reviewed-by: Frank Rowand <frank.rowand@sony.com>
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>

diff --git a/drivers/gpio/gpiolib-of.c b/drivers/gpio/gpiolib-of.c
index 2b47f9388607..ccc449df3792 100644
--- a/drivers/gpio/gpiolib-of.c
+++ b/drivers/gpio/gpiolib-of.c
@@ -628,6 +628,10 @@ static int of_gpiochip_add_hog(struct gpio_chip *chip, struct device_node *hog)
 		ret = gpiod_hog(desc, name, lflags, dflags);
 		if (ret < 0)
 			return ret;
+
+#ifdef CONFIG_OF_DYNAMIC
+		desc->hog = hog;
+#endif
 	}
 
 	return 0;
@@ -655,11 +659,97 @@ static int of_gpiochip_scan_gpios(struct gpio_chip *chip)
 			of_node_put(np);
 			return ret;
 		}
+
+		of_node_set_flag(np, OF_POPULATED);
 	}
 
 	return 0;
 }
 
+#ifdef CONFIG_OF_DYNAMIC
+/**
+ * of_gpiochip_remove_hog - Remove all hogs in a hog device node
+ * @chip:	gpio chip to act on
+ * @hog:	device node describing the hogs
+ */
+static void of_gpiochip_remove_hog(struct gpio_chip *chip,
+				   struct device_node *hog)
+{
+	struct gpio_desc *descs = chip->gpiodev->descs;
+	unsigned int i;
+
+	for (i = 0; i < chip->ngpio; i++) {
+		if (test_bit(FLAG_IS_HOGGED, &descs[i].flags) &&
+		    descs[i].hog == hog)
+			gpiochip_free_own_desc(&descs[i]);
+	}
+}
+
+static int of_gpiochip_match_node(struct gpio_chip *chip, void *data)
+{
+	return chip->gpiodev->dev.of_node == data;
+}
+
+static struct gpio_chip *of_find_gpiochip_by_node(struct device_node *np)
+{
+	return gpiochip_find(np, of_gpiochip_match_node);
+}
+
+static int of_gpio_notify(struct notifier_block *nb, unsigned long action,
+			  void *arg)
+{
+	struct of_reconfig_data *rd = arg;
+	struct gpio_chip *chip;
+	int ret;
+
+	/*
+	 * This only supports adding and removing complete gpio-hog nodes.
+	 * Modifying an existing gpio-hog node is not supported (except for
+	 * changing its "status" property, which is treated the same as
+	 * addition/removal).
+	 */
+	switch (of_reconfig_get_state_change(action, arg)) {
+	case OF_RECONFIG_CHANGE_ADD:
+		if (!of_property_read_bool(rd->dn, "gpio-hog"))
+			return NOTIFY_OK;	/* not for us */
+
+		if (of_node_test_and_set_flag(rd->dn, OF_POPULATED))
+			return NOTIFY_OK;
+
+		chip = of_find_gpiochip_by_node(rd->dn->parent);
+		if (chip == NULL)
+			return NOTIFY_OK;	/* not for us */
+
+		ret = of_gpiochip_add_hog(chip, rd->dn);
+		if (ret < 0) {
+			pr_err("%s: failed to add hogs for %pOF\n", __func__,
+			       rd->dn);
+			of_node_clear_flag(rd->dn, OF_POPULATED);
+			return notifier_from_errno(ret);
+		}
+		break;
+
+	case OF_RECONFIG_CHANGE_REMOVE:
+		if (!of_node_check_flag(rd->dn, OF_POPULATED))
+			return NOTIFY_OK;	/* already depopulated */
+
+		chip = of_find_gpiochip_by_node(rd->dn->parent);
+		if (chip == NULL)
+			return NOTIFY_OK;	/* not for us */
+
+		of_gpiochip_remove_hog(chip, rd->dn);
+		of_node_clear_flag(rd->dn, OF_POPULATED);
+		break;
+	}
+
+	return NOTIFY_OK;
+}
+
+struct notifier_block gpio_of_notifier = {
+	.notifier_call = of_gpio_notify,
+};
+#endif /* CONFIG_OF_DYNAMIC */
+
 /**
  * of_gpio_simple_xlate - translate gpiospec to the GPIO number and flags
  * @gc:		pointer to the gpio_chip structure

commit bc21077e084b80c22072a40d32beb24ea33938ec
Author: Geert Uytterhoeven <geert+renesas@glider.be>
Date:   Thu Feb 20 14:01:48 2020 +0100

    gpio: of: Extract of_gpiochip_add_hog()
    
    Extract the code to add all GPIO hogs of a gpio-hog node into its own
    function, so it can be reused.
    
    Signed-off-by: Geert Uytterhoeven <geert+renesas@glider.be>
    Link: https://lore.kernel.org/r/20200220130149.26283-2-geert+renesas@glider.be
    Reviewed-by: Frank Rowand <frank.rowand@sony.com>
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>

diff --git a/drivers/gpio/gpiolib-of.c b/drivers/gpio/gpiolib-of.c
index c6d30f73df07..2b47f9388607 100644
--- a/drivers/gpio/gpiolib-of.c
+++ b/drivers/gpio/gpiolib-of.c
@@ -604,6 +604,35 @@ static struct gpio_desc *of_parse_own_gpio(struct device_node *np,
 	return desc;
 }
 
+/**
+ * of_gpiochip_add_hog - Add all hogs in a hog device node
+ * @chip:	gpio chip to act on
+ * @hog:	device node describing the hogs
+ *
+ * Returns error if it fails otherwise 0 on success.
+ */
+static int of_gpiochip_add_hog(struct gpio_chip *chip, struct device_node *hog)
+{
+	enum gpiod_flags dflags;
+	struct gpio_desc *desc;
+	unsigned long lflags;
+	const char *name;
+	unsigned int i;
+	int ret;
+
+	for (i = 0;; i++) {
+		desc = of_parse_own_gpio(hog, chip, i, &name, &lflags, &dflags);
+		if (IS_ERR(desc))
+			break;
+
+		ret = gpiod_hog(desc, name, lflags, dflags);
+		if (ret < 0)
+			return ret;
+	}
+
+	return 0;
+}
+
 /**
  * of_gpiochip_scan_gpios - Scan gpio-controller for gpio definitions
  * @chip:	gpio chip to act on
@@ -614,29 +643,17 @@ static struct gpio_desc *of_parse_own_gpio(struct device_node *np,
  */
 static int of_gpiochip_scan_gpios(struct gpio_chip *chip)
 {
-	struct gpio_desc *desc = NULL;
 	struct device_node *np;
-	const char *name;
-	unsigned long lflags;
-	enum gpiod_flags dflags;
-	unsigned int i;
 	int ret;
 
 	for_each_available_child_of_node(chip->of_node, np) {
 		if (!of_property_read_bool(np, "gpio-hog"))
 			continue;
 
-		for (i = 0;; i++) {
-			desc = of_parse_own_gpio(np, chip, i, &name, &lflags,
-						 &dflags);
-			if (IS_ERR(desc))
-				break;
-
-			ret = gpiod_hog(desc, name, lflags, dflags);
-			if (ret < 0) {
-				of_node_put(np);
-				return ret;
-			}
+		ret = of_gpiochip_add_hog(chip, np);
+		if (ret < 0) {
+			of_node_put(np);
+			return ret;
 		}
 	}
 

commit 45586c7078d42b932c5399953d21746800083691
Author: Masahiro Yamada <masahiroy@kernel.org>
Date:   Mon Feb 3 17:37:45 2020 -0800

    treewide: remove redundant IS_ERR() before error code check
    
    'PTR_ERR(p) == -E*' is a stronger condition than IS_ERR(p).
    Hence, IS_ERR(p) is unneeded.
    
    The semantic patch that generates this commit is as follows:
    
    // <smpl>
    @@
    expression ptr;
    constant error_code;
    @@
    -IS_ERR(ptr) && (PTR_ERR(ptr) == - error_code)
    +PTR_ERR(ptr) == - error_code
    // </smpl>
    
    Link: http://lkml.kernel.org/r/20200106045833.1725-1-masahiroy@kernel.org
    Signed-off-by: Masahiro Yamada <masahiroy@kernel.org>
    Cc: Julia Lawall <julia.lawall@lip6.fr>
    Acked-by: Stephen Boyd <sboyd@kernel.org> [drivers/clk/clk.c]
    Acked-by: Bartosz Golaszewski <bgolaszewski@baylibre.com> [GPIO]
    Acked-by: Wolfram Sang <wsa@the-dreams.de> [drivers/i2c]
    Acked-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com> [acpi/scan.c]
    Acked-by: Rob Herring <robh@kernel.org>
    Cc: Eric Biggers <ebiggers@kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

diff --git a/drivers/gpio/gpiolib-of.c b/drivers/gpio/gpiolib-of.c
index 1b3f217a35e2..c6d30f73df07 100644
--- a/drivers/gpio/gpiolib-of.c
+++ b/drivers/gpio/gpiolib-of.c
@@ -484,24 +484,24 @@ struct gpio_desc *of_find_gpio(struct device *dev, const char *con_id,
 			break;
 	}
 
-	if (IS_ERR(desc) && PTR_ERR(desc) == -ENOENT) {
+	if (PTR_ERR(desc) == -ENOENT) {
 		/* Special handling for SPI GPIOs if used */
 		desc = of_find_spi_gpio(dev, con_id, &of_flags);
 	}
 
-	if (IS_ERR(desc) && PTR_ERR(desc) == -ENOENT) {
+	if (PTR_ERR(desc) == -ENOENT) {
 		/* This quirk looks up flags and all */
 		desc = of_find_spi_cs_gpio(dev, con_id, idx, flags);
 		if (!IS_ERR(desc))
 			return desc;
 	}
 
-	if (IS_ERR(desc) && PTR_ERR(desc) == -ENOENT) {
+	if (PTR_ERR(desc) == -ENOENT) {
 		/* Special handling for regulator GPIOs if used */
 		desc = of_find_regulator_gpio(dev, con_id, &of_flags);
 	}
 
-	if (IS_ERR(desc) && PTR_ERR(desc) == -ENOENT)
+	if (PTR_ERR(desc) == -ENOENT)
 		desc = of_find_arizona_gpio(dev, con_id, &of_flags);
 
 	if (IS_ERR(desc))

commit 9e1af7567b266dc6c3c8fd434ea807b3206bfdc1
Merge: b9b627a44988 533a6cfe08f9
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Mon Jan 27 10:30:42 2020 -0800

    Merge tag 'mmc-v5.6' of git://git.kernel.org/pub/scm/linux/kernel/git/ulfh/mmc
    
    Pull MMC updates from Ulf Hansson:
     "There are no updates for the MEMSTICK subsystem this time. But note
      that I am also carrying a patch from the pinctrl tree, which has been
      shared through an immutable branch.
    
      Summary:
    
      MMC core:
       - Convert to reasonable timeouts for all CMD6 commands (updates for
         BKOPS, CACHE_FLUSH and INAND_CMD38_ARG_EXT_CSD) for eMMC
       - Respect f_max clock rate at card initialization
       - Add gpiod_toggle_active_low() API
       - Consolidate slot-gpio code by using gpiod_toggle_active_low()
    
      MMC host:
       - Add pinctrl_select_default_state() API
       - Consolidate pintctrl code by using pinctrl_select_default_state()
       - mmci: Support any block sizes for SDIO for some variants
       - mmci: Enable reset control for stm32_sdmmc
       - mmc_spi: Toggle SPI_CS_HIGH polarity rather than hard-coding it
       - renesas_sdhi: Add support for the r8a77961 variant
       - renesas_sdhi: A few minor improvements
       - rockchip-dw-mshc: Add support for the rk3308 variant
       - sdhci: Enable support for external DMA controllers
       - sdhci: Fixup error path when sending CMD12
       - sdhci-brcmstb: Add support for 7216b0 variant
       - sdhci-brcmstb: Add support for command queuing (CQHCI)
       - sdhci-brcmstb: Add support for eMMC HS400ES mode
       - sdhci-msm: Add support for the sc7180 variant
       - sdhci-msm: Add support for command queuing (CQHCI)
       - sdhci-of-at91: Add support for the SAM9x60 variant
       - sdhci-of-at91: Improve support for tunings
       - sdhci-of-esdhc: A few fixups for some clock related issues
       - sdhci-omap: Add support for the am335x and the am437x variants
       - sdhci-omap: Improve support for erase operations
       - sdhci-omap: Add support for external DMA"
    
    * tag 'mmc-v5.6' of git://git.kernel.org/pub/scm/linux/kernel/git/ulfh/mmc: (89 commits)
      mmc: core: Default to generic_cmd6_time as timeout in __mmc_switch()
      mmc: block: Use generic_cmd6_time when modifying INAND_CMD38_ARG_EXT_CSD
      mmc: core: Specify timeouts for BKOPS and CACHE_FLUSH for eMMC
      mmc: sdhci-cadence: remove unneeded 'inline' marker
      dt-bindings: mmc: rockchip-dw-mshc: add description for rk3308
      dt-bindings: mmc: convert rockchip dw-mshc bindings to yaml
      dt-bindings: mmc: convert synopsys dw-mshc bindings to yaml
      mmc: sdhci-msm: Add CQHCI support for sdhci-msm
      mmc: sdhci: Let a vendor driver supply and update ADMA descriptor size
      mmc: sdhci-of-esdhc: fix serious issue clock is always disabled
      mmc: sdhci-of-esdhc: fix transfer mode register reading
      mmc: sdhci-brcmstb: Fix incorrect switch to HS mode
      mmc: sdhci-brcmstb: Add support for Command Queuing (CQE)
      mmc: sdhci-brcmstb: Add shutdown callback
      mmc: sdhci-brcmstb: Fix driver to defer on clk_get defer
      mmc: sdhci-brcmstb: Add ability to use HS400ES transfer mode
      dt-bindings: mmc: brcm,sdhci-brcmstb: Add support for 7216b0
      mmc: core: limit probe clock frequency to configured f_max
      mmc: sdhci-milbeaut: Remove redundant platform_get_irq error message
      mmc: sdhci: fix an issue of mixing different types
      ...

commit 0f7c815d83a20dbae8b736331eb1ffd0bc0497d7
Author: Michał Mirosław <mirq-linux@rere.qmqm.pl>
Date:   Wed Dec 11 03:40:56 2019 +0100

    mmc: core: Rework cd-gpio handling
    
    There are a few places around the code that invert inverted and possibly
    inverted CD line. That's really confusing. Squash them all into one place
    in mmc_gpiod_request_cd(). MMC_CAP2_CD_ACTIVE_HIGH is used analogously to
    WP line: in GPIO mode it is used only at probe time to switch polarity, for
    native mode it is left as is.
    
    Signed-off-by: Michał Mirosław <mirq-linux@rere.qmqm.pl>
    Link: https://lore.kernel.org/r/db189b715596d63caf8c6a088bddc71dd69a879b.1576031637.git.mirq-linux@rere.qmqm.pl
    Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>

diff --git a/drivers/gpio/gpiolib-of.c b/drivers/gpio/gpiolib-of.c
index b0b77e52e261..8310da48ba01 100644
--- a/drivers/gpio/gpiolib-of.c
+++ b/drivers/gpio/gpiolib-of.c
@@ -104,23 +104,6 @@ static void of_gpio_flags_quirks(struct device_node *np,
 				 enum of_gpio_flags *flags,
 				 int index)
 {
-	/*
-	 * Handle MMC "cd-inverted" and "wp-inverted" semantics.
-	 */
-	if (IS_ENABLED(CONFIG_MMC)) {
-		/*
-		 * Active low is the default according to the
-		 * SDHCI specification and the device tree
-		 * bindings. However the code in the current
-		 * kernel was written such that the phandle
-		 * flags were always respected, and "cd-inverted"
-		 * would invert the flag from the device phandle.
-		 */
-		if (!strcmp(propname, "cd-gpios")) {
-			if (of_property_read_bool(np, "cd-inverted"))
-				*flags ^= OF_GPIO_ACTIVE_LOW;
-		}
-	}
 	/*
 	 * Some GPIO fixed regulator quirks.
 	 * Note that active low is the default.

commit 9073d10b098973519044f5fcdc25586810b435da
Author: Michał Mirosław <mirq-linux@rere.qmqm.pl>
Date:   Wed Dec 11 03:40:55 2019 +0100

    mmc: core: Rework wp-gpio handling
    
    Use MMC_CAP2_RO_ACTIVE_HIGH flag as indicator if GPIO line is to be
    inverted compared to DT/platform-specified polarity. The flag is not used
    after init in GPIO mode anyway. No functional changes intended.
    
    Signed-off-by: Michał Mirosław <mirq-linux@rere.qmqm.pl>
    Link: https://lore.kernel.org/r/a60f563f11bbff821da2fa2949ca82922b144860.1576031637.git.mirq-linux@rere.qmqm.pl
    Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>

diff --git a/drivers/gpio/gpiolib-of.c b/drivers/gpio/gpiolib-of.c
index dc27b1a88e93..b0b77e52e261 100644
--- a/drivers/gpio/gpiolib-of.c
+++ b/drivers/gpio/gpiolib-of.c
@@ -120,10 +120,6 @@ static void of_gpio_flags_quirks(struct device_node *np,
 			if (of_property_read_bool(np, "cd-inverted"))
 				*flags ^= OF_GPIO_ACTIVE_LOW;
 		}
-		if (!strcmp(propname, "wp-gpios")) {
-			if (of_property_read_bool(np, "wp-inverted"))
-				*flags ^= OF_GPIO_ACTIVE_LOW;
-		}
 	}
 	/*
 	 * Some GPIO fixed regulator quirks.

commit a922f1a9aec1102a94505622290c0ecf4ef79cec
Merge: 9065e0636036 63aa6a692595
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Tue Dec 17 13:06:31 2019 -0800

    Merge tag 'spi-fix-v5.5-rc2' of git://git.kernel.org/pub/scm/linux/kernel/git/broonie/spi
    
    Pull spi fixes from Mark Brown:
     "A relatively large set of fixes here, the biggest part of it is for
      fallout from the GPIO descriptor rework that affected several of the
      devices with usable native chip select support. There's also some new
      PCI IDs for Intel Jasper Lake devices.
    
      The conversion to platform_get_irq() in the fsl driver is an
      incremental fix for build errors introduced on SPARC by the earlier
      fix for error handling in probe in that driver"
    
    * tag 'spi-fix-v5.5-rc2' of git://git.kernel.org/pub/scm/linux/kernel/git/broonie/spi:
      spi: fsl: use platform_get_irq() instead of of_irq_to_resource()
      spi: nxp-fspi: Ensure width is respected in spi-mem operations
      spi: spi-ti-qspi: Fix a bug when accessing non default CS
      spi: fsl: don't map irq during probe
      spi: spi-cavium-thunderx: Add missing pci_release_regions()
      spi: sprd: Fix the incorrect SPI register
      gpiolib: of: Make of_gpio_spi_cs_get_count static
      spi: fsl: Handle the single hardwired chipselect case
      gpio: Handle counting of Freescale chipselects
      spi: fsl: Fix GPIO descriptor support
      spi: dw: Correct handling of native chipselect
      spi: cadence: Correct handling of native chipselect
      spi: pxa2xx: Add support for Intel Jasper Lake

commit a1f4c96b799b80118b50bd47320deb9013b7ff40
Author: YueHaibing <yuehaibing@huawei.com>
Date:   Sat Nov 30 09:28:28 2019 +0800

    gpiolib: of: Make of_gpio_spi_cs_get_count static
    
    Fix sparse warning:
    
    drivers/gpio/gpiolib-of.c:35:5: warning:
     symbol 'of_gpio_spi_cs_get_count' was not declared. Should it be static?
    
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Signed-off-by: YueHaibing <yuehaibing@huawei.com>
    Reviewed-by: Linus Walleij <linus.walleij@linaro.org>
    Link: https://lore.kernel.org/r/20191130012828.14504-1-yuehaibing@huawei.com
    Signed-off-by: Mark Brown <broonie@kernel.org>

diff --git a/drivers/gpio/gpiolib-of.c b/drivers/gpio/gpiolib-of.c
index 4b19e7e26b90..f90a161ca97a 100644
--- a/drivers/gpio/gpiolib-of.c
+++ b/drivers/gpio/gpiolib-of.c
@@ -32,7 +32,7 @@
  * the counting of "cs-gpios" to count "gpios" transparent to the
  * driver.
  */
-int of_gpio_spi_cs_get_count(struct device *dev, const char *con_id)
+static int of_gpio_spi_cs_get_count(struct device *dev, const char *con_id)
 {
 	struct device_node *np = dev->of_node;
 

commit 71b8f600b034c7f5780f6fb311dabfe331c64feb
Author: Linus Walleij <linus.walleij@linaro.org>
Date:   Thu Nov 28 09:37:17 2019 +0100

    gpio: Handle counting of Freescale chipselects
    
    We have a special quirk to handle the Freescale
    nonstandard SPI chipselect GPIOs in the gpiolib-of.c
    file, but it currently only handles the case where
    the GPIOs are actually requested (gpiod_*get()).
    
    We also need to handle that the SPI core attempts
    to count the GPIOs before use, and that needs a
    similar quirk in the OF part of the library.
    
    Cc: Christophe Leroy <christophe.leroy@c-s.fr>
    Reported-by: Christophe Leroy <christophe.leroy@c-s.fr>
    Fixes: 0f0581b24bd0 ("spi: fsl: Convert to use CS GPIO descriptors")
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>
    Tested-by: Christophe Leroy <christophe.leroy@c-s.fr>
    Link: https://lore.kernel.org/r/20191128083718.39177-2-linus.walleij@linaro.org
    Signed-off-by: Mark Brown <broonie@kernel.org>

diff --git a/drivers/gpio/gpiolib-of.c b/drivers/gpio/gpiolib-of.c
index 1eea2c6c2e1d..4b19e7e26b90 100644
--- a/drivers/gpio/gpiolib-of.c
+++ b/drivers/gpio/gpiolib-of.c
@@ -23,6 +23,29 @@
 #include "gpiolib.h"
 #include "gpiolib-of.h"
 
+/**
+ * of_gpio_spi_cs_get_count() - special GPIO counting for SPI
+ * Some elder GPIO controllers need special quirks. Currently we handle
+ * the Freescale GPIO controller with bindings that doesn't use the
+ * established "cs-gpios" for chip selects but instead rely on
+ * "gpios" for the chip select lines. If we detect this, we redirect
+ * the counting of "cs-gpios" to count "gpios" transparent to the
+ * driver.
+ */
+int of_gpio_spi_cs_get_count(struct device *dev, const char *con_id)
+{
+	struct device_node *np = dev->of_node;
+
+	if (!IS_ENABLED(CONFIG_SPI_MASTER))
+		return 0;
+	if (!con_id || strcmp(con_id, "cs"))
+		return 0;
+	if (!of_device_is_compatible(np, "fsl,spi") &&
+	    !of_device_is_compatible(np, "aeroflexgaisler,spictrl"))
+		return 0;
+	return of_gpio_named_count(np, "gpios");
+}
+
 /*
  * This is used by external users of of_gpio_count() from <linux/of_gpio.h>
  *
@@ -35,6 +58,10 @@ int of_gpio_get_count(struct device *dev, const char *con_id)
 	char propname[32];
 	unsigned int i;
 
+	ret = of_gpio_spi_cs_get_count(dev, con_id);
+	if (ret > 0)
+		return ret;
+
 	for (i = 0; i < ARRAY_SIZE(gpio_suffixes); i++) {
 		if (con_id)
 			snprintf(propname, sizeof(propname), "%s-%s",

commit 808b9931d5a06760315c0dd02519da78cb944d8e
Author: Geert Uytterhoeven <geert+renesas@glider.be>
Date:   Wed Nov 20 16:45:21 2019 +0100

    gpio: of: Fix bogus reference to gpiod_get_count()
    
    The recommended function is called gpiod_count(), not gpiod_get_count().
    
    Fixes: f626d6dfb7098525 ("gpio: of: Break out OF-only code")
    Signed-off-by: Geert Uytterhoeven <geert+renesas@glider.be>
    Link: https://lore.kernel.org/r/20191120154521.16273-1-geert+renesas@glider.be
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>

diff --git a/drivers/gpio/gpiolib-of.c b/drivers/gpio/gpiolib-of.c
index bd06743a5d7c..dc27b1a88e93 100644
--- a/drivers/gpio/gpiolib-of.c
+++ b/drivers/gpio/gpiolib-of.c
@@ -27,7 +27,7 @@
  * This is used by external users of of_gpio_count() from <linux/of_gpio.h>
  *
  * FIXME: get rid of those external users by converting them to GPIO
- * descriptors and let them all use gpiod_get_count()
+ * descriptors and let them all use gpiod_count()
  */
 int of_gpio_get_count(struct device *dev, const char *con_id)
 {

commit 2f4133bb5f14f49a99acf0cc55b84996dbfb4dff
Author: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
Date:   Tue Nov 5 20:06:54 2019 +0200

    gpiolib: No need to call gpiochip_remove_pin_ranges() twice
    
    of_gpiochip_add(), when fails, calls gpiochip_remove_pin_ranges().
    
    ADD:
      gpiochip_add_data_with_key() ->
        of_gpiochip_add() -> (ERROR path)
          gpiochip_remove_pin_ranges()
    
    At the same time of_gpiochip_remove() calls exactly the above mentioned
    function unconditionally and so does gpiochip_remove().
    
    REMOVE:
      gpiochip_remove() ->
        gpiochip_remove_pin_ranges()
        of_gpiochip_remove() ->
          gpiochip_remove_pin_ranges()
    
    Since gpiochip_remove() calls gpiochip_remove_pin_ranges() unconditionally,
    we have duplicate call to the same function when it's not necessary.
    
    Move gpiochip_remove_pin_ranges() from of_gpiochip_add() to gpiochip_add()
    to avoid duplicate calls and be consistent with the explicit call in
    gpiochip_remove().
    
    Fixes: e93fa3f24353 ("gpiolib: remove duplicate pin range code")
    Depends-on: f7299d441a4d ("gpio: of: Fix of_gpiochip_add() error path")
    Cc: Geert Uytterhoeven <geert+renesas@glider.be>
    Signed-off-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>

diff --git a/drivers/gpio/gpiolib-of.c b/drivers/gpio/gpiolib-of.c
index 0380a1d6b660..bd06743a5d7c 100644
--- a/drivers/gpio/gpiolib-of.c
+++ b/drivers/gpio/gpiolib-of.c
@@ -885,16 +885,13 @@ int of_gpiochip_add(struct gpio_chip *chip)
 	of_node_get(chip->of_node);
 
 	ret = of_gpiochip_scan_gpios(chip);
-	if (ret) {
+	if (ret)
 		of_node_put(chip->of_node);
-		gpiochip_remove_pin_ranges(chip);
-	}
 
 	return ret;
 }
 
 void of_gpiochip_remove(struct gpio_chip *chip)
 {
-	gpiochip_remove_pin_ranges(chip);
 	of_node_put(chip->of_node);
 }

commit c196924277ea82200d4c4fd9537c71390b96f247
Merge: 6a41b6c5fc20 a99d8080aaf3
Author: Linus Walleij <linus.walleij@linaro.org>
Date:   Tue Nov 5 11:00:40 2019 +0100

    Merge tag 'v5.4-rc6' into devel
    
    Linux 5.4-rc6

commit fe12e94375da34d62f7d5556161ce7629212ff80
Merge: 698b8eeaed72 228fc0104070
Author: Linus Walleij <linus.walleij@linaro.org>
Date:   Wed Oct 23 13:31:36 2019 +0200

    Merge tag 'gpio-v5.5-updates-for-linus-part-1' of git://git.kernel.org/pub/scm/linux/kernel/git/brgl/linux into devel
    
    gpio updates for v5.5
    
    - only get the second IRQ when there is more than one IRQ in mxc
    - move the code around in lineevent_create() for some shrinkage
    - fix formatting for GPIO docs
    - add DT binding for r8a774b1
    - convert drivers that prevously used nocache ioremap() to using regular
      devm_platform_ioremap_resource()
    - remove some redundant error messages
    - shrink object code in 104-idi-48e
    - drop an unneeded warning from gpiolib-of

commit 228fc01040704f55fd884ab41daf3eafd2644b54
Author: Lucas Stach <l.stach@pengutronix.de>
Date:   Fri Oct 18 12:05:38 2019 +0200

    gpio: of: don't warn if ignored GPIO flag matches the behavior
    
    Some devicetrees specify the ACTIVE_LOW flag in the fixed regulator GPIO
    handle. While this has always been ignored, it's consistent with the
    behavior of the regulator binding in the absence of the
    "enable-active-high" DT property. It doesn't make much sense to print a
    user visible warning for a configuration which is consistent, so only
    print the warning if the GPIO flag contradicts the behavior dictated by
    by the enable-active-high property.
    
    Signed-off-by: Lucas Stach <l.stach@pengutronix.de>
    [Bartosz: coding style tweak]
    Signed-off-by: Bartosz Golaszewski <bgolaszewski@baylibre.com>

diff --git a/drivers/gpio/gpiolib-of.c b/drivers/gpio/gpiolib-of.c
index 1eea2c6c2e1d..576c7419bbc1 100644
--- a/drivers/gpio/gpiolib-of.c
+++ b/drivers/gpio/gpiolib-of.c
@@ -134,18 +134,20 @@ static void of_gpio_flags_quirks(struct device_node *np,
 	     (!(strcmp(propname, "enable-gpio") &&
 		strcmp(propname, "enable-gpios")) &&
 	      of_device_is_compatible(np, "regulator-gpio")))) {
+		bool active_low = !of_property_read_bool(np,
+							 "enable-active-high");
 		/*
 		 * The regulator GPIO handles are specified such that the
 		 * presence or absence of "enable-active-high" solely controls
 		 * the polarity of the GPIO line. Any phandle flags must
 		 * be actively ignored.
 		 */
-		if (*flags & OF_GPIO_ACTIVE_LOW) {
+		if ((*flags & OF_GPIO_ACTIVE_LOW) && !active_low) {
 			pr_warn("%s GPIO handle specifies active low - ignored\n",
 				of_node_full_name(np));
 			*flags &= ~OF_GPIO_ACTIVE_LOW;
 		}
-		if (!of_property_read_bool(np, "enable-active-high"))
+		if (active_low)
 			*flags |= OF_GPIO_ACTIVE_LOW;
 	}
 	/*

commit 14e8c535ff684876d1be9dae475fe666b97c04a9
Author: Randy Dunlap <rdunlap@infradead.org>
Date:   Tue Oct 8 13:40:21 2019 -0700

    gpio: fix kernel-doc for of_gpio_need_valid_mask()
    
    Fix kernel-doc for of_gpio_need_valid_mask().
    Fixes this warning and uses correct Return: format.
    
    ../drivers/gpio/gpiolib-of.c:92: warning: Excess function parameter 'dev' description in 'of_gpio_need_valid_mask'
    
    Fixes: f626d6dfb709 ("gpio: of: Break out OF-only code")
    Signed-off-by: Randy Dunlap <rdunlap@infradead.org>
    Cc: Linus Walleij <linus.walleij@linaro.org>
    Cc: Bartosz Golaszewski <bgolaszewski@baylibre.com>
    Cc: linux-gpio@vger.kernel.org
    Link: https://lore.kernel.org/r/6c5d22c8-6e27-3314-9c46-701d932b11a6@infradead.org
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>

diff --git a/drivers/gpio/gpiolib-of.c b/drivers/gpio/gpiolib-of.c
index 1eea2c6c2e1d..3f50c433b7b1 100644
--- a/drivers/gpio/gpiolib-of.c
+++ b/drivers/gpio/gpiolib-of.c
@@ -84,8 +84,9 @@ static struct gpio_desc *of_xlate_and_get_gpiod_flags(struct gpio_chip *chip,
 /**
  * of_gpio_need_valid_mask() - figure out if the OF GPIO driver needs
  * to set the .valid_mask
- * @dev: the device for the GPIO provider
- * @return: true if the valid mask needs to be set
+ * @gc: the target gpio_chip
+ *
+ * Return: true if the valid mask needs to be set
  */
 bool of_gpio_need_valid_mask(const struct gpio_chip *gc)
 {

commit be7ae45cfea97e787234e00e1a9eb341acacd84e
Author: Marco Felsch <m.felsch@pengutronix.de>
Date:   Tue Oct 1 11:49:21 2019 +0200

    gpio: fix getting nonexclusive gpiods from DT
    
    Since commit ec757001c818 ("gpio: Enable nonexclusive gpiods from DT
    nodes") we are able to get GPIOD_FLAGS_BIT_NONEXCLUSIVE marked gpios.
    Currently the gpiolib uses the wrong flags variable for the check. We
    need to check the gpiod_flags instead of the of_gpio_flags else we
    return -EBUSY for GPIOD_FLAGS_BIT_NONEXCLUSIVE marked and requested
    gpiod's.
    
    Fixes: ec757001c818 gpio: Enable nonexclusive gpiods from DT nodes
    Cc: stable@vger.kernel.org
    Signed-off-by: Marco Felsch <m.felsch@pengutronix.de>
    [Bartosz: the function was moved to gpiolib-of.c so updated the patch]
    Signed-off-by: Bartosz Golaszewski <bgolaszewski@baylibre.com>

diff --git a/drivers/gpio/gpiolib-of.c b/drivers/gpio/gpiolib-of.c
index 1eea2c6c2e1d..80ea49f570f4 100644
--- a/drivers/gpio/gpiolib-of.c
+++ b/drivers/gpio/gpiolib-of.c
@@ -317,7 +317,7 @@ struct gpio_desc *gpiod_get_from_of_node(struct device_node *node,
 	transitory = flags & OF_GPIO_TRANSITORY;
 
 	ret = gpiod_request(desc, label);
-	if (ret == -EBUSY && (flags & GPIOD_FLAGS_BIT_NONEXCLUSIVE))
+	if (ret == -EBUSY && (dflags & GPIOD_FLAGS_BIT_NONEXCLUSIVE))
 		return desc;
 	if (ret)
 		return ERR_PTR(ret);

commit bbfe0d6b8b730af4954a0e0e741217eb3e1c58bc
Merge: 31dda85e49da 11c43bb022b3
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Mon Sep 16 14:06:50 2019 -0700

    Merge tag 'gpio-v5.4-1' of git://git.kernel.org/pub/scm/linux/kernel/git/linusw/linux-gpio
    
    Pull GPIO updates from Linus Walleij:
     "This is the bulk of changes in the GPIO subsystem for the v5.4 kernel
      cycle.
    
      Core changes:
    
       - Support hierarchical GPIO irqchips.
    
         We now have three consumers that can use this: Intel IXP4xx,
         ThunderX and Qualcomm SPMI GPIO (in the pinctrl subsystem).
    
         The support code has been long in the making and hashed out so it
         should be easily adaptable for all hierarchical irqchip parents.
         The code only gets compiled in if hierarchical irqchip is used at
         the topmost irq controller at least, as the hierarchical irqchip
         requires strict hierarchy all the way up in the system.
    
       - Determine the need for a "valid_mask" for GPIO lines on the
         gpio_chip and conversely for the "valid_mask" for the GPIO
         interrupt chip interrupt lines by looking for a .init_valid_mask()
         callback in the main chip or GPIO interrupt chip respectively.
         Allocate it with bitmap_alloc().
    
       - Isolate the device tree/open firmware GPIO description code out in
         its own file properly.
    
       - Isolate the ACPI GPIO description code out in its own file
         properly.
    
       - Drop a whole lot of #ifdef:s in the main includes: it does not hurt
         to keep the include items around, and we get quicker and clearer
         compile failures if the appropriate kernel symbols are not selected
         for drivers.
    
      New/deleted drivers:
    
       - New driver for Aspeed SGPIO.
    
       - The KS8695 driver is deleted as the platform gets deleted from
         arch/arm in this kernel cycle.
    
       - The Cirrus Logic Madera driver now supports CS47L92 and CS47L15.
    
       - The Freescale MPC8xxx now supports LS1028A and LS1088A.
    
      Driver improvements:
    
       - We pass the GPIO irqchip intialization by directly filling in the
         struct instead of using set-up functions (the new way) for Intel
         MID, Lynxpoint, Merrifield, XLP, HLWD, Aspeed, ZX, VF610, TQMX86,
         MT7621, Zynq and EP93xx.
    
      Out-of-band changes:
    
       - Fix a GPIO header inclusion in Unicore - no response from
         maintainer.
    
       - Drop FMC subsystem from MAINTAINERS - was deleted in the GPIO tree
         last cycle so let's mop up the shards"
    
    * tag 'gpio-v5.4-1' of git://git.kernel.org/pub/scm/linux/kernel/git/linusw/linux-gpio: (82 commits)
      gpiolib: of: add a fallback for wlf,reset GPIO name
      gpio: htc-egpio: Remove unused exported htc_egpio_get_wakeup_irq()
      gpio: remove explicit comparison with 0
      gpio: creg-snps: use devm_platform_ioremap_resource() to simplify code
      gpio: devres: Switch to EXPORT_SYMBOL_GPL()
      gpio: of: Switch to EXPORT_SYMBOL_GPL()
      gpio: of: Make of_gpio_simple_xlate() private
      gpio: of: Make of_get_named_gpiod_flags() private
      gpio: aspeed: Add in ast2600 details to Aspeed driver
      gpio: aspeed: Use ngpio property from device tree if available
      gpio: aspeed: Setup irqchip dynamically
      gpio/aspeed: Fix incorrect number of banks
      gpio: aspeed: Update documentation with ast2600 controllers
      gpio: Initialize the irqchip valid_mask with a callback
      gpiolib: acpi: make acpi_can_fallback_to_crs() static
      gpio: Fix further merge errors
      gpio: Fix up merge collision in include file
      gpio: of: Normalize return code variable name
      gpio: gpiolib: Normalize return code variable name
      gpio: ep93xx: Pass irqchip when adding gpiochip
      ...

commit 11c43bb022b373d2fdb84950ebf1911362f3f010
Author: Dmitry Torokhov <dmitry.torokhov@gmail.com>
Date:   Wed Sep 11 00:52:05 2019 -0700

    gpiolib: of: add a fallback for wlf,reset GPIO name
    
    The old Arizona binding did not use -gpio or -gpios suffix, so
    devm_gpiod_get() does not work for it. As it is the one of a few users
    of devm_gpiod_get_from_of_node() API that I want to remove, I'd rather
    have a small quirk in the gpiolib OF handler, and switch Arizona
    driver to devm_gpiod_get().
    
    Signed-off-by: Dmitry Torokhov <dmitry.torokhov@gmail.com>
    Link: https://lore.kernel.org/r/20190911075215.78047-2-dmitry.torokhov@gmail.com
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>

diff --git a/drivers/gpio/gpiolib-of.c b/drivers/gpio/gpiolib-of.c
index d5b98b48eb5d..3b18240acb0a 100644
--- a/drivers/gpio/gpiolib-of.c
+++ b/drivers/gpio/gpiolib-of.c
@@ -438,6 +438,19 @@ static struct gpio_desc *of_find_regulator_gpio(struct device *dev, const char *
 	return desc;
 }
 
+static struct gpio_desc *of_find_arizona_gpio(struct device *dev,
+					      const char *con_id,
+					      enum of_gpio_flags *of_flags)
+{
+	if (!IS_ENABLED(CONFIG_MFD_ARIZONA))
+		return ERR_PTR(-ENOENT);
+
+	if (!con_id || strcmp(con_id, "wlf,reset"))
+		return ERR_PTR(-ENOENT);
+
+	return of_get_named_gpiod_flags(dev->of_node, con_id, 0, of_flags);
+}
+
 struct gpio_desc *of_find_gpio(struct device *dev, const char *con_id,
 			       unsigned int idx, unsigned long *flags)
 {
@@ -488,6 +501,9 @@ struct gpio_desc *of_find_gpio(struct device *dev, const char *con_id,
 	if (IS_ERR(desc) && PTR_ERR(desc) != -EPROBE_DEFER)
 		desc = of_find_regulator_gpio(dev, con_id, &of_flags);
 
+	if (IS_ERR(desc) && PTR_ERR(desc) == -ENOENT)
+		desc = of_find_arizona_gpio(dev, con_id, &of_flags);
+
 	if (IS_ERR(desc))
 		return desc;
 

commit 6d6624554da4a623fd047d15790157a0572ab091
Author: Geert Uytterhoeven <geert+renesas@glider.be>
Date:   Fri Sep 6 10:45:38 2019 +0200

    gpio: of: Switch to EXPORT_SYMBOL_GPL()
    
    All exported functions provide genuine Linux-specific functionality.
    
    Signed-off-by: Geert Uytterhoeven <geert+renesas@glider.be>
    Link: https://lore.kernel.org/r/20190906084539.21838-4-geert+renesas@glider.be
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>

diff --git a/drivers/gpio/gpiolib-of.c b/drivers/gpio/gpiolib-of.c
index add7e6f8819e..d5b98b48eb5d 100644
--- a/drivers/gpio/gpiolib-of.c
+++ b/drivers/gpio/gpiolib-of.c
@@ -274,7 +274,7 @@ int of_get_named_gpio_flags(struct device_node *np, const char *list_name,
 	else
 		return desc_to_gpio(desc);
 }
-EXPORT_SYMBOL(of_get_named_gpio_flags);
+EXPORT_SYMBOL_GPL(of_get_named_gpio_flags);
 
 /**
  * gpiod_get_from_of_node() - obtain a GPIO from an OF node
@@ -343,7 +343,7 @@ struct gpio_desc *gpiod_get_from_of_node(struct device_node *node,
 
 	return desc;
 }
-EXPORT_SYMBOL(gpiod_get_from_of_node);
+EXPORT_SYMBOL_GPL(gpiod_get_from_of_node);
 
 /*
  * The SPI GPIO bindings happened before we managed to establish that GPIO
@@ -719,7 +719,7 @@ int of_mm_gpiochip_add_data(struct device_node *np,
 	pr_err("%pOF: GPIO chip registration failed with status %d\n", np, ret);
 	return ret;
 }
-EXPORT_SYMBOL(of_mm_gpiochip_add_data);
+EXPORT_SYMBOL_GPL(of_mm_gpiochip_add_data);
 
 /**
  * of_mm_gpiochip_remove - Remove memory mapped GPIO chip (bank)
@@ -736,7 +736,7 @@ void of_mm_gpiochip_remove(struct of_mm_gpio_chip *mm_gc)
 	iounmap(mm_gc->regs);
 	kfree(gc->label);
 }
-EXPORT_SYMBOL(of_mm_gpiochip_remove);
+EXPORT_SYMBOL_GPL(of_mm_gpiochip_remove);
 
 static void of_gpiochip_init_valid_mask(struct gpio_chip *chip)
 {

commit b0c7e73b51dcdc8980a245f89278815ce1837d06
Author: Geert Uytterhoeven <geert+renesas@glider.be>
Date:   Fri Sep 6 10:45:37 2019 +0200

    gpio: of: Make of_gpio_simple_xlate() private
    
    Since commit 9a95e8d25a140ba9 ("gpio: remove etraxfs driver"), there are
    no more users of of_gpio_simple_xlate() outside gpiolib-of.c.
    All GPIO drivers that need it now rely on of_gpiochip_add() setting it
    up as the default translate function.
    
    Signed-off-by: Geert Uytterhoeven <geert+renesas@glider.be>
    Link: https://lore.kernel.org/r/20190906084539.21838-3-geert+renesas@glider.be
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>

diff --git a/drivers/gpio/gpiolib-of.c b/drivers/gpio/gpiolib-of.c
index 142033574f70..add7e6f8819e 100644
--- a/drivers/gpio/gpiolib-of.c
+++ b/drivers/gpio/gpiolib-of.c
@@ -637,8 +637,9 @@ static int of_gpiochip_scan_gpios(struct gpio_chip *chip)
  * GPIO chips. This function performs only one sanity check: whether GPIO
  * is less than ngpios (that is specified in the gpio_chip).
  */
-int of_gpio_simple_xlate(struct gpio_chip *gc,
-			 const struct of_phandle_args *gpiospec, u32 *flags)
+static int of_gpio_simple_xlate(struct gpio_chip *gc,
+				const struct of_phandle_args *gpiospec,
+				u32 *flags)
 {
 	/*
 	 * We're discouraging gpio_cells < 2, since that way you'll have to
@@ -662,7 +663,6 @@ int of_gpio_simple_xlate(struct gpio_chip *gc,
 
 	return gpiospec->args[0];
 }
-EXPORT_SYMBOL(of_gpio_simple_xlate);
 
 /**
  * of_mm_gpiochip_add_data - Add memory mapped GPIO chip (bank)

commit c83d3c77332e264ec77ceced614fe9630c7bfaad
Author: Geert Uytterhoeven <geert+renesas@glider.be>
Date:   Fri Sep 6 10:45:36 2019 +0200

    gpio: of: Make of_get_named_gpiod_flags() private
    
    Since commit f626d6dfb7098525 ("gpio: of: Break out OF-only code"),
    there are no more users of of_get_named_gpiod_flags() outside
    gpiolib-of.c.
    
    Signed-off-by: Geert Uytterhoeven <geert+renesas@glider.be>
    Link: https://lore.kernel.org/r/20190906084539.21838-2-geert+renesas@glider.be
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>

diff --git a/drivers/gpio/gpiolib-of.c b/drivers/gpio/gpiolib-of.c
index 5c38ede43c7a..142033574f70 100644
--- a/drivers/gpio/gpiolib-of.c
+++ b/drivers/gpio/gpiolib-of.c
@@ -223,7 +223,7 @@ static void of_gpio_flags_quirks(struct device_node *np,
  * value on the error condition. If @flags is not NULL the function also fills
  * in flags for the GPIO.
  */
-struct gpio_desc *of_get_named_gpiod_flags(struct device_node *np,
+static struct gpio_desc *of_get_named_gpiod_flags(struct device_node *np,
 		     const char *propname, int index, enum of_gpio_flags *flags)
 {
 	struct of_phandle_args gpiospec;

commit 1dea33e84d33a5220aeda4ca9e918de0fd77c078
Author: Dmitry Torokhov <dmitry.torokhov@gmail.com>
Date:   Tue Sep 3 16:18:56 2019 -0700

    gpiolib: of: fix fallback quirks handling
    
    We should only try to execute fallback quirks handling when previous
    call returned -ENOENT, and not when we did not get -EPROBE_DEFER.
    The other errors should be treated as hard errors: we did find the GPIO
    description, but for some reason we failed to handle it properly.
    
    The fallbacks should only be executed when previous handlers returned
    -ENOENT, which means the mapping/description was not found.
    
    Also let's remove the explicit deferral handling when iterating through
    GPIO suffixes: it is not needed anymore as we will not be calling
    fallbacks for anything but -ENOENT.
    
    Fixes: df451f83e1fc ("gpio: of: fix Freescale SPI CS quirk handling")
    Signed-off-by: Dmitry Torokhov <dmitry.torokhov@gmail.com>
    Link: https://lore.kernel.org/r/20190903231856.GA165165@dtor-ws
    Reviewed-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>

diff --git a/drivers/gpio/gpiolib-of.c b/drivers/gpio/gpiolib-of.c
index 9762dd6d99fa..9b44c49a9227 100644
--- a/drivers/gpio/gpiolib-of.c
+++ b/drivers/gpio/gpiolib-of.c
@@ -343,36 +343,27 @@ struct gpio_desc *of_find_gpio(struct device *dev, const char *con_id,
 
 		desc = of_get_named_gpiod_flags(dev->of_node, prop_name, idx,
 						&of_flags);
-		/*
-		 * -EPROBE_DEFER in our case means that we found a
-		 * valid GPIO property, but no controller has been
-		 * registered so far.
-		 *
-		 * This means we don't need to look any further for
-		 * alternate name conventions, and we should really
-		 * preserve the return code for our user to be able to
-		 * retry probing later.
-		 */
-		if (IS_ERR(desc) && PTR_ERR(desc) == -EPROBE_DEFER)
-			return desc;
 
-		if (!IS_ERR(desc) || (PTR_ERR(desc) != -ENOENT))
+		if (!IS_ERR(desc) || PTR_ERR(desc) != -ENOENT)
 			break;
 	}
 
-	/* Special handling for SPI GPIOs if used */
-	if (IS_ERR(desc))
+	if (IS_ERR(desc) && PTR_ERR(desc) == -ENOENT) {
+		/* Special handling for SPI GPIOs if used */
 		desc = of_find_spi_gpio(dev, con_id, &of_flags);
-	if (IS_ERR(desc) && PTR_ERR(desc) != -EPROBE_DEFER) {
+	}
+
+	if (IS_ERR(desc) && PTR_ERR(desc) == -ENOENT) {
 		/* This quirk looks up flags and all */
 		desc = of_find_spi_cs_gpio(dev, con_id, idx, flags);
 		if (!IS_ERR(desc))
 			return desc;
 	}
 
-	/* Special handling for regulator GPIOs if used */
-	if (IS_ERR(desc) && PTR_ERR(desc) != -EPROBE_DEFER)
+	if (IS_ERR(desc) && PTR_ERR(desc) == -ENOENT) {
+		/* Special handling for regulator GPIOs if used */
 		desc = of_find_regulator_gpio(dev, con_id, &of_flags);
+	}
 
 	if (IS_ERR(desc))
 		return desc;

commit 151a41014bff92f353263cadc051435dc9c3258e
Merge: ae0755b56da9 089cf7f6ecb2
Author: Linus Walleij <linus.walleij@linaro.org>
Date:   Thu Sep 5 11:40:54 2019 +0200

    Merge tag 'v5.3-rc7' into devel
    
    Linux 5.3-rc7

commit f0d1ab0526408c28f40836254a5e7be794074b6d
Author: Linus Walleij <linus.walleij@linaro.org>
Date:   Tue Jul 16 13:58:54 2019 +0200

    gpio: of: Normalize return code variable name
    
    It is confusing to name return variables mixedly "status",
    "err" or "ret". I just changed them all to "ret", by personal
    preference, to lower cognitive stress.
    
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>
    Link: https://lore.kernel.org/r/20190716115854.12098-1-linus.walleij@linaro.org

diff --git a/drivers/gpio/gpiolib-of.c b/drivers/gpio/gpiolib-of.c
index e39b4290b80c..28233d3772f4 100644
--- a/drivers/gpio/gpiolib-of.c
+++ b/drivers/gpio/gpiolib-of.c
@@ -848,7 +848,7 @@ static int of_gpiochip_add_pin_range(struct gpio_chip *chip) { return 0; }
 
 int of_gpiochip_add(struct gpio_chip *chip)
 {
-	int status;
+	int ret;
 
 	if (!chip->of_node)
 		return 0;
@@ -863,9 +863,9 @@ int of_gpiochip_add(struct gpio_chip *chip)
 
 	of_gpiochip_init_valid_mask(chip);
 
-	status = of_gpiochip_add_pin_range(chip);
-	if (status)
-		return status;
+	ret = of_gpiochip_add_pin_range(chip);
+	if (ret)
+		return ret;
 
 	/* If the chip defines names itself, these take precedence */
 	if (!chip->names)
@@ -874,13 +874,13 @@ int of_gpiochip_add(struct gpio_chip *chip)
 
 	of_node_get(chip->of_node);
 
-	status = of_gpiochip_scan_gpios(chip);
-	if (status) {
+	ret = of_gpiochip_scan_gpios(chip);
+	if (ret) {
 		of_node_put(chip->of_node);
 		gpiochip_remove_pin_ranges(chip);
 	}
 
-	return status;
+	return ret;
 }
 
 void of_gpiochip_remove(struct gpio_chip *chip)

commit df451f83e1fc0fa3764a2724b0faaaf9d07ab1b6
Author: Andreas Kemnade <andreas@kemnade.info>
Date:   Fri Aug 16 18:50:00 2019 +0200

    gpio: of: fix Freescale SPI CS quirk handling
    
    On the gta04 we see:
    spi_gpio: probe of spi_lcd failed with error -2
    
    The quirk introduced in
    commit e3023bf80639 ("gpio: of: Handle the Freescale SPI CS")
    can also be triggered by a temporary -EPROBE_DEFER and
    so "convert" it to a hard -ENOENT.
    
    Disable that conversion by checking for -EPROBE_DEFER.
    
    Fixes: e3023bf80639 ("gpio: of: Handle the Freescale SPI CS")
    Suggested-by: H. Nikolaus Schaller <hns@goldelico.com>
    Signed-off-by: Andreas Kemnade <andreas@kemnade.info>
    Link: https://lore.kernel.org/r/20190816165000.32334-1-andreas@kemnade.info
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>

diff --git a/drivers/gpio/gpiolib-of.c b/drivers/gpio/gpiolib-of.c
index 567fb98c0892..9762dd6d99fa 100644
--- a/drivers/gpio/gpiolib-of.c
+++ b/drivers/gpio/gpiolib-of.c
@@ -363,7 +363,7 @@ struct gpio_desc *of_find_gpio(struct device *dev, const char *con_id,
 	/* Special handling for SPI GPIOs if used */
 	if (IS_ERR(desc))
 		desc = of_find_spi_gpio(dev, con_id, &of_flags);
-	if (IS_ERR(desc)) {
+	if (IS_ERR(desc) && PTR_ERR(desc) != -EPROBE_DEFER) {
 		/* This quirk looks up flags and all */
 		desc = of_find_spi_cs_gpio(dev, con_id, idx, flags);
 		if (!IS_ERR(desc))

commit 49281a222ac42724b94f6c874f43a284ec58d37e
Author: Stephen Boyd <swboyd@chromium.org>
Date:   Thu Aug 1 00:28:26 2019 +0200

    gpio: of: Fix hard-assigned valid_mask for OF case
    
    The recent refactoring to break out OF code to its own file
    contained a bug letting the need_valid_mask
    be overridden by the need of the device tree range check,
    and if there were no ranges, but device tree was active
    and the reserved GPIO used in another way, things likely
    crash.
    
    Cc: Mark Brown <broonie@kernel.org>
    Cc: Bjorn Andersson <bjorn.andersson@linaro.org>
    Cc: Stephen Boyd <swboyd@chromium.org>
    Fixes: f626d6dfb709 ("gpio: of: Break out OF-only code")
    Reported-by: Mark Brown <broonie@kernel.org>
    Suggested-by: Stephen Boyd <swboyd@chromium.org>
    Signed-off-by: Stephen Boyd <swboyd@chromium.org>
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>

diff --git a/drivers/gpio/gpiolib-of.c b/drivers/gpio/gpiolib-of.c
index b10d04dd9296..e39b4290b80c 100644
--- a/drivers/gpio/gpiolib-of.c
+++ b/drivers/gpio/gpiolib-of.c
@@ -87,7 +87,7 @@ static struct gpio_desc *of_xlate_and_get_gpiod_flags(struct gpio_chip *chip,
  * @dev: the device for the GPIO provider
  * @return: true if the valid mask needs to be set
  */
-bool of_gpio_need_valid_mask(struct gpio_chip *gc)
+bool of_gpio_need_valid_mask(const struct gpio_chip *gc)
 {
 	int size;
 	struct device_node *np = gc->of_node;

commit f626d6dfb709852595e6fb24710819f9d21bc5ae
Author: Linus Walleij <linus.walleij@linaro.org>
Date:   Wed Jul 17 09:10:01 2019 +0200

    gpio: of: Break out OF-only code
    
    The core gpiolib should not contain any OF/device tree-only
    code. Try to break out the main part of it and push it down
    into the optional gpiolib-of.c part of the library.
    
    Create a local gpiolib-of.h header and move stuff around a
    bit to get a clean cut.
    
    Reviewed-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>
    Link: https://lore.kernel.org/r/20190717071001.3858-1-linus.walleij@linaro.org

diff --git a/drivers/gpio/gpiolib-of.c b/drivers/gpio/gpiolib-of.c
index 567fb98c0892..b10d04dd9296 100644
--- a/drivers/gpio/gpiolib-of.c
+++ b/drivers/gpio/gpiolib-of.c
@@ -21,6 +21,34 @@
 #include <linux/gpio/machine.h>
 
 #include "gpiolib.h"
+#include "gpiolib-of.h"
+
+/*
+ * This is used by external users of of_gpio_count() from <linux/of_gpio.h>
+ *
+ * FIXME: get rid of those external users by converting them to GPIO
+ * descriptors and let them all use gpiod_get_count()
+ */
+int of_gpio_get_count(struct device *dev, const char *con_id)
+{
+	int ret;
+	char propname[32];
+	unsigned int i;
+
+	for (i = 0; i < ARRAY_SIZE(gpio_suffixes); i++) {
+		if (con_id)
+			snprintf(propname, sizeof(propname), "%s-%s",
+				 con_id, gpio_suffixes[i]);
+		else
+			snprintf(propname, sizeof(propname), "%s",
+				 gpio_suffixes[i]);
+
+		ret = of_gpio_named_count(dev->of_node, propname);
+		if (ret > 0)
+			break;
+	}
+	return ret ? ret : -ENOENT;
+}
 
 static int of_gpiochip_match_node_and_xlate(struct gpio_chip *chip, void *data)
 {
@@ -53,6 +81,23 @@ static struct gpio_desc *of_xlate_and_get_gpiod_flags(struct gpio_chip *chip,
 	return gpiochip_get_desc(chip, ret);
 }
 
+/**
+ * of_gpio_need_valid_mask() - figure out if the OF GPIO driver needs
+ * to set the .valid_mask
+ * @dev: the device for the GPIO provider
+ * @return: true if the valid mask needs to be set
+ */
+bool of_gpio_need_valid_mask(struct gpio_chip *gc)
+{
+	int size;
+	struct device_node *np = gc->of_node;
+
+	size = of_property_count_u32_elems(np,  "gpio-reserved-ranges");
+	if (size > 0 && size % 2 == 0)
+		return true;
+	return false;
+}
+
 static void of_gpio_flags_quirks(struct device_node *np,
 				 const char *propname,
 				 enum of_gpio_flags *flags,
@@ -231,6 +276,75 @@ int of_get_named_gpio_flags(struct device_node *np, const char *list_name,
 }
 EXPORT_SYMBOL(of_get_named_gpio_flags);
 
+/**
+ * gpiod_get_from_of_node() - obtain a GPIO from an OF node
+ * @node:	handle of the OF node
+ * @propname:	name of the DT property representing the GPIO
+ * @index:	index of the GPIO to obtain for the consumer
+ * @dflags:	GPIO initialization flags
+ * @label:	label to attach to the requested GPIO
+ *
+ * Returns:
+ * On successful request the GPIO pin is configured in accordance with
+ * provided @dflags.
+ *
+ * In case of error an ERR_PTR() is returned.
+ */
+struct gpio_desc *gpiod_get_from_of_node(struct device_node *node,
+					 const char *propname, int index,
+					 enum gpiod_flags dflags,
+					 const char *label)
+{
+	unsigned long lflags = GPIO_LOOKUP_FLAGS_DEFAULT;
+	struct gpio_desc *desc;
+	enum of_gpio_flags flags;
+	bool active_low = false;
+	bool single_ended = false;
+	bool open_drain = false;
+	bool transitory = false;
+	int ret;
+
+	desc = of_get_named_gpiod_flags(node, propname,
+					index, &flags);
+
+	if (!desc || IS_ERR(desc)) {
+		return desc;
+	}
+
+	active_low = flags & OF_GPIO_ACTIVE_LOW;
+	single_ended = flags & OF_GPIO_SINGLE_ENDED;
+	open_drain = flags & OF_GPIO_OPEN_DRAIN;
+	transitory = flags & OF_GPIO_TRANSITORY;
+
+	ret = gpiod_request(desc, label);
+	if (ret == -EBUSY && (flags & GPIOD_FLAGS_BIT_NONEXCLUSIVE))
+		return desc;
+	if (ret)
+		return ERR_PTR(ret);
+
+	if (active_low)
+		lflags |= GPIO_ACTIVE_LOW;
+
+	if (single_ended) {
+		if (open_drain)
+			lflags |= GPIO_OPEN_DRAIN;
+		else
+			lflags |= GPIO_OPEN_SOURCE;
+	}
+
+	if (transitory)
+		lflags |= GPIO_TRANSITORY;
+
+	ret = gpiod_configure_flags(desc, propname, lflags, dflags);
+	if (ret < 0) {
+		gpiod_put(desc);
+		return ERR_PTR(ret);
+	}
+
+	return desc;
+}
+EXPORT_SYMBOL(gpiod_get_from_of_node);
+
 /*
  * The SPI GPIO bindings happened before we managed to establish that GPIO
  * properties should be named "foo-gpios" so we have this special kludge for

commit 88785b7fa74ae2dc52f879140b976984b5374c79
Merge: da7f134972f4 19ec11a2233d
Author: Linus Walleij <linus.walleij@linaro.org>
Date:   Tue Jul 16 11:12:14 2019 +0200

    Merge tag 'gpio-v5.3-rc1-fixes-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/brgl/linux into fixes
    
    GPIO fixes for v5.3-rc1
    
    - silence error messages on probe deferral in gpio-davinci
    - fix a memory leak in gpiolib-of
    - fix a potential use-after-free error in gpio-em

commit da7f134972f473053ea9d721a1d8397546476dc4
Author: Linus Walleij <linus.walleij@linaro.org>
Date:   Mon Jul 15 22:45:29 2019 +0200

    Revert "gpio/spi: Fix spi-gpio regression on active high CS"
    
    This reverts commit fbbf145a0e0a0177e089c52275fbfa55763e7d1d.
    
    It seems I was misguided in my fixup, which was working at the
    time but did not work on the final v5.2.
    
    The patch tried to avoid a quirk the gpiolib code not to treat
    "spi-gpio" CS gpios "special" by enforcing them to be active
    low, in the belief that since the "spi-gpio" driver was
    parsing the device tree on its own, it did not care to inspect
    the "spi-cs-high" attribute on the device nodes.
    
    That's wrong. The SPI core was inspecting them inside the
    of_spi_parse_dt() funtion and setting SPI_CS_HIGH on the
    nodes, and the driver inspected this flag when driving the
    line.
    
    As of now, the core handles the GPIO and it will consistently
    set the GPIO descriptor to 1 to enable CS, strictly requireing
    the gpiolib to invert it. And the gpiolib should indeed
    enforce active low on the CS line.
    
    Device trees should of course put the right flag on the GPIO
    handles, but it used to not matter. If we don't enforce active
    low on "gpio-gpio" we may run into ABI backward compatibility
    issues, so revert this.
    
    Cc: linux-spi@vger.kernel.org
    Cc: stable@vger.kernel.org
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>
    Link: https://lore.kernel.org/r/20190715204529.9539-1-linus.walleij@linaro.org

diff --git a/drivers/gpio/gpiolib-of.c b/drivers/gpio/gpiolib-of.c
index f974075ff00e..a8f02f551d6b 100644
--- a/drivers/gpio/gpiolib-of.c
+++ b/drivers/gpio/gpiolib-of.c
@@ -118,15 +118,8 @@ static void of_gpio_flags_quirks(struct device_node *np,
 	 * Legacy handling of SPI active high chip select. If we have a
 	 * property named "cs-gpios" we need to inspect the child node
 	 * to determine if the flags should have inverted semantics.
-	 *
-	 * This does not apply to an SPI device named "spi-gpio", because
-	 * these have traditionally obtained their own GPIOs by parsing
-	 * the device tree directly and did not respect any "spi-cs-high"
-	 * property on the SPI bus children.
 	 */
-	if (IS_ENABLED(CONFIG_SPI_MASTER) &&
-	    !strcmp(propname, "cs-gpios") &&
-	    !of_device_is_compatible(np, "spi-gpio") &&
+	if (IS_ENABLED(CONFIG_SPI_MASTER) && !strcmp(propname, "cs-gpios") &&
 	    of_property_read_bool(np, "cs-gpios")) {
 		struct device_node *child;
 		u32 cs;

commit 89fea04c85e85f21ef4937611055abce82330d48
Author: Nishka Dasgupta <nishkadg.linux@gmail.com>
Date:   Sat Jul 6 19:04:22 2019 +0530

    gpiolib: of: fix a memory leak in of_gpio_flags_quirks()
    
    Each iteration of for_each_child_of_node puts the previous node, but in
    the case of a break from the middle of the loop, there is no put, thus
    causing a memory leak. Hence add an of_node_put before the break.
    Issue found with Coccinelle.
    
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Nishka Dasgupta <nishkadg.linux@gmail.com>
    [Bartosz: tweaked the commit message]
    Signed-off-by: Bartosz Golaszewski <bgolaszewski@baylibre.com>

diff --git a/drivers/gpio/gpiolib-of.c b/drivers/gpio/gpiolib-of.c
index f974075ff00e..81ed50da3e9e 100644
--- a/drivers/gpio/gpiolib-of.c
+++ b/drivers/gpio/gpiolib-of.c
@@ -161,6 +161,7 @@ static void of_gpio_flags_quirks(struct device_node *np,
 							of_node_full_name(child));
 					*flags |= OF_GPIO_ACTIVE_LOW;
 				}
+				of_node_put(child);
 				break;
 			}
 		}

commit 2ec98f567888501df0140c858af5f5ea10216a6f
Merge: 96407298ff6e 9b3b623804a6
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Tue Jul 9 09:07:00 2019 -0700

    Merge tag 'gpio-v5.3-1' of git://git.kernel.org/pub/scm/linux/kernel/git/linusw/linux-gpio
    
    Pull GPIO updates from Linus Walleij:
     "This is the big slew of GPIO changes for the v5.3 kernel cycle. This
      is mostly incremental work this time.
    
      Three important things:
    
       - The FMC subsystem is deleted through my tree. This happens through
         GPIO as its demise was discussed in relation to a patch decoupling
         its GPIO implementation from the standard way of handling GPIO. As
         it turns out, that is not the only subsystem it reimplements and
         the authors think it is better do scratch it and start over using
         the proper kernel subsystems than try to polish the rust shiny. See
         the commit (ACKed by the maintainers) for details.
    
       - Arnd made a small devres patch that was ACKed by Greg and goes into
         the device core.
    
       - SPDX header change colissions may happen, because at times I've
         seen that quite a lot changed during the -rc:s in regards to SPDX.
         (It is good stuff, tglx has me convinced, and it is worth the
         occasional pain.)
    
      Apart from this is is nothing controversial or problematic.
    
      Summary:
    
      Core:
    
       - When a gpio_chip request GPIOs from itself, it can now fully
         control the line characteristics, both machine and consumer flags.
         This makes a lot of sense, but took some time before I figured out
         that this is how it has to work.
    
       - Several smallish documentation fixes.
    
      New drivers:
    
       - The PCA953x driver now supports the TI TCA9539.
    
       - The DaVinci driver now supports the K3 AM654 SoCs.
    
      Driver improvements:
    
       - Major overhaul and hardening of the OMAP driver by Russell King.
    
       - Starting to move some drivers to the new API passing irq_chip along
         with the gpio_chip when adding the gpio_chip instead of adding it
         separately.
    
      Unrelated:
    
       - Delete the FMC subsystem"
    
    * tag 'gpio-v5.3-1' of git://git.kernel.org/pub/scm/linux/kernel/git/linusw/linux-gpio: (87 commits)
      Revert "gpio: tegra: Clean-up debugfs initialisation"
      gpiolib: Use spinlock_t instead of struct spinlock
      gpio: stp-xway: allow compile-testing
      gpio: stp-xway: get rid of the #include <lantiq_soc.h> dependency
      gpio: stp-xway: improve module clock error handling
      gpio: stp-xway: simplify error handling in xway_stp_probe()
      gpiolib: Clarify use of non-sleeping functions
      gpiolib: Fix references to gpiod_[gs]et_*value_cansleep() variants
      gpiolib: Document new gpio_chip.init_valid_mask field
      Documentation: gpio: Fix reference to gpiod_get_array()
      gpio: pl061: drop duplicate printing of device name
      gpio: altera: Pass irqchip when adding gpiochip
      gpio: siox: Use devm_ managed gpiochip
      gpio: siox: Add struct device *dev helper variable
      gpio: siox: Pass irqchip when adding gpiochip
      drivers: gpio: amd-fch: make resource struct const
      devres: allow const resource arguments
      gpio: ath79: Pass irqchip when adding gpiochip
      gpio: tegra: Clean-up debugfs initialisation
      gpio: siox: Switch to IRQ_TYPE_NONE
      ...

commit fbbf145a0e0a0177e089c52275fbfa55763e7d1d
Author: Linus Walleij <linus.walleij@linaro.org>
Date:   Tue Jul 2 21:39:59 2019 +0200

    gpio/spi: Fix spi-gpio regression on active high CS
    
    I ran into an intriguing bug caused by
    commit ""spi: gpio: Don't request CS GPIO in DT use-case"
    affecting all SPI GPIO devices with an active high
    chip select line.
    
    The commit switches the CS gpio handling over to the GPIO
    core, which will parse and handle "cs-gpios" from the OF
    node without even calling down to the driver to get the
    job done.
    
    However the GPIO core handles the standard bindings in
    Documentation/devicetree/bindings/spi/spi-controller.yaml
    that specifies that active high CS needs to be specified
    using "spi-cs-high" in the DT node.
    
    The code in drivers/spi/spi-gpio.c never respected this
    and never tried to inspect subnodes to see if they contained
    "spi-cs-high" like the gpiolib OF quirks does. Instead the
    only way to get an active high CS was to tag it in the
    device tree using the flags cell such as
    cs-gpios = <&gpio 4 GPIO_ACTIVE_HIGH>;
    
    This alters the quirks to not inspect the subnodes of SPI
    masters on "spi-gpio" for the standard attribute "spi-cs-high",
    making old device trees work as expected.
    
    This semantic is a bit ambigous, but just allowing the
    flags on the GPIO descriptor to modify polarity is what
    the kernel at large mostly uses so let's encourage that.
    
    Fixes: 249e2632dcd0 ("spi: gpio: Don't request CS GPIO in DT use-case")
    Cc: Andrey Smirnov <andrew.smirnov@gmail.com>
    Cc: linux-gpio@vger.kernel.org
    Cc: linux-spi@vger.kernel.org
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>

diff --git a/drivers/gpio/gpiolib-of.c b/drivers/gpio/gpiolib-of.c
index aec7bd86ae7e..9c9b965d7d6d 100644
--- a/drivers/gpio/gpiolib-of.c
+++ b/drivers/gpio/gpiolib-of.c
@@ -118,8 +118,15 @@ static void of_gpio_flags_quirks(struct device_node *np,
 	 * Legacy handling of SPI active high chip select. If we have a
 	 * property named "cs-gpios" we need to inspect the child node
 	 * to determine if the flags should have inverted semantics.
+	 *
+	 * This does not apply to an SPI device named "spi-gpio", because
+	 * these have traditionally obtained their own GPIOs by parsing
+	 * the device tree directly and did not respect any "spi-cs-high"
+	 * property on the SPI bus children.
 	 */
-	if (IS_ENABLED(CONFIG_SPI_MASTER) && !strcmp(propname, "cs-gpios") &&
+	if (IS_ENABLED(CONFIG_SPI_MASTER) &&
+	    !strcmp(propname, "cs-gpios") &&
+	    !of_device_is_compatible(np, "spi-gpio") &&
 	    of_property_read_bool(np, "cs-gpios")) {
 		struct device_node *child;
 		u32 cs;

commit 74a36e4a038b417bb579e86bb769fddf674ca1a1
Merge: 9d373acadaf6 edc1ef3ff342
Author: Linus Walleij <linus.walleij@linaro.org>
Date:   Wed Jun 12 09:47:15 2019 +0200

    Merge branch 'ib-snps-reset-gpio' into devel

commit edc1ef3ff34202e6ffdd51644356bca033d729f8
Author: Martin Blumenstingl <martin.blumenstingl@googlemail.com>
Date:   Mon Jun 10 19:05:23 2019 +0200

    gpio: of: parse stmmac PHY reset line specific active-low property
    
    The stmmac driver currently ignores the GPIO flags which are passed via
    devicetree because it operates with legacy GPIO numbers instead of GPIO
    descriptors. stmmac assumes that the GPIO is "active HIGH" by default.
    This can be overwritten by setting "snps,reset-active-low" to make the
    reset line "active LOW".
    
    Recent Amlogic SoCs (G12A which includes S905X2 and S905D2 as well as
    G12B which includes S922X) use GPIOZ_14 or GPIOZ_15 for the PHY reset
    line. These GPIOs are special because they are marked as "3.3V input
    tolerant open drain" pins which means they can only drive the pin output
    LOW (to reset the PHY) or to switch to input mode (to take the PHY out
    of reset).
    The GPIO subsystem already supports this with the GPIO_OPEN_DRAIN and
    GPIO_OPEN_SOURCE flags in the devicetree bindings.
    
    Add the stmmac PHY reset line specific active low parsing to gpiolib-of
    so stmmac can be ported to GPIO descriptors while being backwards
    compatible with device trees which use the "old" way of specifying the
    polarity.
    
    Signed-off-by: Martin Blumenstingl <martin.blumenstingl@googlemail.com>
    Reviewed-by: Linus Walleij <linus.walleij@linaro.org>
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>

diff --git a/drivers/gpio/gpiolib-of.c b/drivers/gpio/gpiolib-of.c
index aec7bd86ae7e..2533f2471821 100644
--- a/drivers/gpio/gpiolib-of.c
+++ b/drivers/gpio/gpiolib-of.c
@@ -158,6 +158,12 @@ static void of_gpio_flags_quirks(struct device_node *np,
 			}
 		}
 	}
+
+	/* Legacy handling of stmmac's active-low PHY reset line */
+	if (IS_ENABLED(CONFIG_STMMAC_ETH) &&
+	    !strcmp(propname, "snps,reset-gpio") &&
+	    of_property_read_bool(np, "snps,reset-active-low"))
+		*flags |= OF_GPIO_ACTIVE_LOW;
 }
 
 /**

commit e3023bf80639afc6603f9633eb301845421b8917
Author: Linus Walleij <linus.walleij@linaro.org>
Date:   Thu Dec 13 15:22:47 2018 +0100

    gpio: of: Handle the Freescale SPI CS
    
    The Freescale SPI chipselects are special: while everyone else
    is using "cs-gpios" the Freescale platforms just use "gpios".
    Fix this by responding with "gpios" when asking for "cs-gpios"
    in a freescale device node, so we hide this pecularity from
    the SPI core.
    
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>

diff --git a/drivers/gpio/gpiolib-of.c b/drivers/gpio/gpiolib-of.c
index aec7bd86ae7e..00deb885409c 100644
--- a/drivers/gpio/gpiolib-of.c
+++ b/drivers/gpio/gpiolib-of.c
@@ -254,6 +254,37 @@ static struct gpio_desc *of_find_spi_gpio(struct device *dev, const char *con_id
 	return desc;
 }
 
+/*
+ * The old Freescale bindings use simply "gpios" as name for the chip select
+ * lines rather than "cs-gpios" like all other SPI hardware. Account for this
+ * with a special quirk.
+ */
+static struct gpio_desc *of_find_spi_cs_gpio(struct device *dev,
+					     const char *con_id,
+					     unsigned int idx,
+					     unsigned long *flags)
+{
+	struct device_node *np = dev->of_node;
+
+	if (!IS_ENABLED(CONFIG_SPI_MASTER))
+		return ERR_PTR(-ENOENT);
+
+	/* Allow this specifically for Freescale devices */
+	if (!of_device_is_compatible(np, "fsl,spi") &&
+	    !of_device_is_compatible(np, "aeroflexgaisler,spictrl"))
+		return ERR_PTR(-ENOENT);
+	/* Allow only if asking for "cs-gpios" */
+	if (!con_id || strcmp(con_id, "cs"))
+		return ERR_PTR(-ENOENT);
+
+	/*
+	 * While all other SPI controllers use "cs-gpios" the Freescale
+	 * uses just "gpios" so translate to that when "cs-gpios" is
+	 * requested.
+	 */
+	return of_find_gpio(dev, NULL, idx, flags);
+}
+
 /*
  * Some regulator bindings happened before we managed to establish that GPIO
  * properties should be named "foo-gpios" so we have this special kludge for
@@ -325,6 +356,12 @@ struct gpio_desc *of_find_gpio(struct device *dev, const char *con_id,
 	/* Special handling for SPI GPIOs if used */
 	if (IS_ERR(desc))
 		desc = of_find_spi_gpio(dev, con_id, &of_flags);
+	if (IS_ERR(desc)) {
+		/* This quirk looks up flags and all */
+		desc = of_find_spi_cs_gpio(dev, con_id, idx, flags);
+		if (!IS_ERR(desc))
+			return desc;
+	}
 
 	/* Special handling for regulator GPIOs if used */
 	if (IS_ERR(desc) && PTR_ERR(desc) != -EPROBE_DEFER)

commit 2d6c06f5a4094ab4ea15b63af72d2dab74e9415a
Author: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
Date:   Wed Apr 10 18:39:17 2019 +0300

    gpiolib: Introduce GPIO_LOOKUP_FLAGS_DEFAULT
    
    Since GPIO library operates with enumerator when it's subject to handle
    the GPIO lookup flags, it will be better to clearly see what default means.
    
    Thus, introduce GPIO_LOOKUP_FLAGS_DEFAULT entry to describe
    the default assumptions.
    
    While here, replace 0 by newly introduced constant.
    
    Signed-off-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    Reviewed-by: Mika Westerberg <mika.westerberg@linux.intel.com>
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>

diff --git a/drivers/gpio/gpiolib-of.c b/drivers/gpio/gpiolib-of.c
index c5547df4f6cd..aec7bd86ae7e 100644
--- a/drivers/gpio/gpiolib-of.c
+++ b/drivers/gpio/gpiolib-of.c
@@ -386,7 +386,7 @@ static struct gpio_desc *of_parse_own_gpio(struct device_node *np,
 		return ERR_PTR(-EINVAL);
 
 	xlate_flags = 0;
-	*lflags = 0;
+	*lflags = GPIO_LOOKUP_FLAGS_DEFAULT;
 	*dflags = 0;
 
 	ret = of_property_read_u32(chip_np, "#gpio-cells", &tmp);

commit fed7026adc7c3a67f992d28d7a5309ff749d3776
Author: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
Date:   Wed Apr 10 18:39:16 2019 +0300

    gpiolib: Make use of enum gpio_lookup_flags consistent
    
    The library uses enum gpio_lookup_flags to define the possible
    characteristics of GPIO pin. Since enumerator listed only individual
    bits the common use of it is in a form of a bitmask of
    gpio_lookup_flags GPIO_* values. The more correct type for this is
    unsigned long.
    
    Due to above convert all users to use unsigned long instead of
    enum gpio_lookup_flags except enumerator definition.
    
    While here, make field and parameter descriptions consistent as well.
    
    Suggested-by: Mika Westerberg <mika.westerberg@linux.intel.com>
    Signed-off-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    Reviewed-by: Mika Westerberg <mika.westerberg@linux.intel.com>
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>

diff --git a/drivers/gpio/gpiolib-of.c b/drivers/gpio/gpiolib-of.c
index 3a6bb53d89df..c5547df4f6cd 100644
--- a/drivers/gpio/gpiolib-of.c
+++ b/drivers/gpio/gpiolib-of.c
@@ -287,8 +287,7 @@ static struct gpio_desc *of_find_regulator_gpio(struct device *dev, const char *
 }
 
 struct gpio_desc *of_find_gpio(struct device *dev, const char *con_id,
-			       unsigned int idx,
-			       enum gpio_lookup_flags *flags)
+			       unsigned int idx, unsigned long *flags)
 {
 	char prop_name[32]; /* 32 is max size of property name */
 	enum of_gpio_flags of_flags;
@@ -361,8 +360,8 @@ struct gpio_desc *of_find_gpio(struct device *dev, const char *con_id,
  * @chip:	GPIO chip whose hog is parsed
  * @idx:	Index of the GPIO to parse
  * @name:	GPIO line name
- * @lflags:	gpio_lookup_flags - returned from of_find_gpio() or
- *		of_parse_own_gpio()
+ * @lflags:	bitmask of gpio_lookup_flags GPIO_* values - returned from
+ *		of_find_gpio() or of_parse_own_gpio()
  * @dflags:	gpiod_flags - optional GPIO initialization flags
  *
  * Returns GPIO descriptor to use with Linux GPIO API, or one of the errno
@@ -371,7 +370,7 @@ struct gpio_desc *of_find_gpio(struct device *dev, const char *con_id,
 static struct gpio_desc *of_parse_own_gpio(struct device_node *np,
 					   struct gpio_chip *chip,
 					   unsigned int idx, const char **name,
-					   enum gpio_lookup_flags *lflags,
+					   unsigned long *lflags,
 					   enum gpiod_flags *dflags)
 {
 	struct device_node *chip_np;
@@ -444,7 +443,7 @@ static int of_gpiochip_scan_gpios(struct gpio_chip *chip)
 	struct gpio_desc *desc = NULL;
 	struct device_node *np;
 	const char *name;
-	enum gpio_lookup_flags lflags;
+	unsigned long lflags;
 	enum gpiod_flags dflags;
 	unsigned int i;
 	int ret;

commit a71a81e7975843504170e69fe52605478f3c8e04
Author: Geert Uytterhoeven <geert+renesas@glider.be>
Date:   Fri Mar 29 09:42:29 2019 +0100

    gpio: of: Optimize quirk checks
    
    Simple string comparisons are cheaper than DT lookups, as the latter
    involve taking a spinlock and traversing properties.
    Hence optimize quirk checks by postponing DT lookups after string
    comparisons.
    
    Signed-off-by: Geert Uytterhoeven <geert+renesas@glider.be>
    Reviewed-by: Mukesh Ojha <mojha@codeaurora.org>
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>

diff --git a/drivers/gpio/gpiolib-of.c b/drivers/gpio/gpiolib-of.c
index 6a3ec575a404..3a6bb53d89df 100644
--- a/drivers/gpio/gpiolib-of.c
+++ b/drivers/gpio/gpiolib-of.c
@@ -86,9 +86,9 @@ static void of_gpio_flags_quirks(struct device_node *np,
 	if (IS_ENABLED(CONFIG_REGULATOR) &&
 	    (of_device_is_compatible(np, "regulator-fixed") ||
 	     of_device_is_compatible(np, "reg-fixed-voltage") ||
-	     (of_device_is_compatible(np, "regulator-gpio") &&
-	      !(strcmp(propname, "enable-gpio") &&
-	        strcmp(propname, "enable-gpios"))))) {
+	     (!(strcmp(propname, "enable-gpio") &&
+		strcmp(propname, "enable-gpios")) &&
+	      of_device_is_compatible(np, "regulator-gpio")))) {
 		/*
 		 * The regulator GPIO handles are specified such that the
 		 * presence or absence of "enable-active-high" solely controls
@@ -119,9 +119,8 @@ static void of_gpio_flags_quirks(struct device_node *np,
 	 * property named "cs-gpios" we need to inspect the child node
 	 * to determine if the flags should have inverted semantics.
 	 */
-	if (IS_ENABLED(CONFIG_SPI_MASTER) &&
-	    of_property_read_bool(np, "cs-gpios") &&
-	    !strcmp(propname, "cs-gpios")) {
+	if (IS_ENABLED(CONFIG_SPI_MASTER) && !strcmp(propname, "cs-gpios") &&
+	    of_property_read_bool(np, "cs-gpios")) {
 		struct device_node *child;
 		u32 cs;
 		int ret;

commit f7299d441a4da8a5088e651ea55023525a793a13
Author: Geert Uytterhoeven <geert+renesas@glider.be>
Date:   Thu Mar 28 14:13:47 2019 +0100

    gpio: of: Fix of_gpiochip_add() error path
    
    If the call to of_gpiochip_scan_gpios() in of_gpiochip_add() fails, no
    error handling is performed.  This lead to the need of callers to call
    of_gpiochip_remove() on failure, which causes "BAD of_node_put() on ..."
    if the failure happened before the call to of_node_get().
    
    Fix this by adding proper error handling.
    
    Note that calling gpiochip_remove_pin_ranges() multiple times causes no
    harm: subsequent calls are a no-op.
    
    Fixes: dfbd379ba9b7431e ("gpio: of: Return error if gpio hog configuration failed")
    Signed-off-by: Geert Uytterhoeven <geert+renesas@glider.be>
    Reviewed-by: Mukesh Ojha <mojha@codeaurora.org>
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>

diff --git a/drivers/gpio/gpiolib-of.c b/drivers/gpio/gpiolib-of.c
index 0220dd6d64ed..6a3ec575a404 100644
--- a/drivers/gpio/gpiolib-of.c
+++ b/drivers/gpio/gpiolib-of.c
@@ -718,7 +718,13 @@ int of_gpiochip_add(struct gpio_chip *chip)
 
 	of_node_get(chip->of_node);
 
-	return of_gpiochip_scan_gpios(chip);
+	status = of_gpiochip_scan_gpios(chip);
+	if (status) {
+		of_node_put(chip->of_node);
+		gpiochip_remove_pin_ranges(chip);
+	}
+
+	return status;
 }
 
 void of_gpiochip_remove(struct gpio_chip *chip)

commit 7ce40277bf848391705011ba37eac2e377cbd9e6
Author: Andrey Smirnov <andrew.smirnov@gmail.com>
Date:   Mon Mar 25 23:32:09 2019 -0700

    gpio: of: Check for "spi-cs-high" in child instead of parent node
    
    "spi-cs-high" is going to be specified in child node of an SPI
    controller's representing attached SPI device, so change the code to
    look for it there, instead of checking parent node.
    
    Signed-off-by: Andrey Smirnov <andrew.smirnov@gmail.com>
    Cc: Linus Walleij <linus.walleij@linaro.org>
    Cc: Bartosz Golaszewski <bgolaszewski@baylibre.com>
    Cc: Chris Healy <cphealy@gmail.com>
    Cc: linux-gpio@vger.kernel.org
    Cc: linux-kernel@vger.kernel.org
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>

diff --git a/drivers/gpio/gpiolib-of.c b/drivers/gpio/gpiolib-of.c
index ee7f08386a72..0220dd6d64ed 100644
--- a/drivers/gpio/gpiolib-of.c
+++ b/drivers/gpio/gpiolib-of.c
@@ -143,16 +143,16 @@ static void of_gpio_flags_quirks(struct device_node *np,
 				 * conflict and the "spi-cs-high" flag will
 				 * take precedence.
 				 */
-				if (of_property_read_bool(np, "spi-cs-high")) {
+				if (of_property_read_bool(child, "spi-cs-high")) {
 					if (*flags & OF_GPIO_ACTIVE_LOW) {
 						pr_warn("%s GPIO handle specifies active low - ignored\n",
-							of_node_full_name(np));
+							of_node_full_name(child));
 						*flags &= ~OF_GPIO_ACTIVE_LOW;
 					}
 				} else {
 					if (!(*flags & OF_GPIO_ACTIVE_LOW))
 						pr_info("%s enforce active low on chipselect handle\n",
-							of_node_full_name(np));
+							of_node_full_name(child));
 					*flags |= OF_GPIO_ACTIVE_LOW;
 				}
 				break;

commit e5545c94e43b8f6599ffc01df8d1aedf18ee912a
Author: Andrey Smirnov <andrew.smirnov@gmail.com>
Date:   Mon Mar 25 23:32:08 2019 -0700

    gpio: of: Check propname before applying "cs-gpios" quirks
    
    SPI GPIO device has more than just "cs-gpio" property in its node and
    would request those GPIOs as a part of its initialization. To avoid
    applying CS-specific quirk to all of them add a check to make sure
    that propname is "cs-gpios".
    
    Signed-off-by: Andrey Smirnov <andrew.smirnov@gmail.com>
    Cc: Linus Walleij <linus.walleij@linaro.org>
    Cc: Bartosz Golaszewski <bgolaszewski@baylibre.com>
    Cc: Chris Healy <cphealy@gmail.com>
    Cc: linux-gpio@vger.kernel.org
    Cc: linux-kernel@vger.kernel.org
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>

diff --git a/drivers/gpio/gpiolib-of.c b/drivers/gpio/gpiolib-of.c
index 8b9c3ab70f6e..ee7f08386a72 100644
--- a/drivers/gpio/gpiolib-of.c
+++ b/drivers/gpio/gpiolib-of.c
@@ -120,7 +120,8 @@ static void of_gpio_flags_quirks(struct device_node *np,
 	 * to determine if the flags should have inverted semantics.
 	 */
 	if (IS_ENABLED(CONFIG_SPI_MASTER) &&
-	    of_property_read_bool(np, "cs-gpios")) {
+	    of_property_read_bool(np, "cs-gpios") &&
+	    !strcmp(propname, "cs-gpios")) {
 		struct device_node *child;
 		u32 cs;
 		int ret;

commit 3601fe43e8164f67a8de3de8e988bfcb3a94af46
Merge: cf2e8c544cd3 d01849f7deba
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Fri Mar 8 10:09:53 2019 -0800

    Merge tag 'gpio-v5.1-1' of git://git.kernel.org/pub/scm/linux/kernel/git/linusw/linux-gpio
    
    Pull GPIO updates from Linus Walleij:
     "This is the bulk of GPIO changes for the v5.1 cycle:
    
      Core changes:
    
       - The big change this time around is the irqchip handling in the
         qualcomm pin controllers, closely coupled with the gpiochip. This
         rework, in a classic fall-between-the-chairs fashion has been
         sidestepped for too long.
    
         The Qualcomm IRQchips using the SPMI and SSBI transport mechanisms
         have been rewritten to use hierarchical irqchip. This creates the
         base from which I intend to gradually pull support for hierarchical
         irqchips into the gpiolib irqchip helpers to cut down on duplicate
         code.
    
         We have too many hacks in the kernel because people have been
         working around the missing hierarchical irqchip for years, and once
         it was there, noone understood it for a while. We are now slowly
         adapting to using it.
    
         This is why this pull requests include changes to MFD, SPMI,
         IRQchip core and some ARM Device Trees pertaining to the Qualcomm
         chip family. Since Qualcomm have so many chips and such large
         deployments it is paramount that this platform gets this right, and
         now it (hopefully) does.
    
       - Core support for pull-up and pull-down configuration, also from the
         device tree. When a simple GPIO chip supports an "off or on" pull-up
         or pull-down resistor, we provide a way to set this up using
         machine descriptors or device tree.
    
         If more elaborate control of pull up/down (such as resistance shunt
         setting) is required, drivers should be phased over to use pin
         control. We do not yet provide a userspace ABI for this pull
         up-down setting but I suspect the makers are going to ask for it
         soon enough. PCA953x is the first user of this new API.
    
       - The GPIO mockup driver has been revamped after some discussion
         improving the IRQ simulator in the process.
    
         The idea is to make it possible to use the mockup for both testing
         and virtual prototyping, e.g. when you do not yet have a GPIO
         expander to play with but really want to get something to develop
         code around before hardware is available. It's neat. The blackbox
         testing usecase is currently making its way into kernelci.
    
       - ACPI GPIO core preserves non direction flags when updating flags.
    
       - A new device core helper for devm_platform_ioremap_resource() is
         funneled through the GPIO tree with Greg's ACK.
    
      New drivers:
    
       - TQ-Systems QTMX86 GPIO controllers (using port-mapped I/O)
    
       - Gateworks PLD GPIO driver (vaccumed up from OpenWrt)
    
       - AMD G-Series PCH (Platform Controller Hub) GPIO driver.
    
       - Fintek F81804 & F81966 subvariants.
    
       - PCA953x now supports NXP PCAL6416.
    
      Driver improvements:
    
       - IRQ support on the Nintendo Wii (Hollywood) GPIO.
    
       - get_direction() support for the MVEBU driver.
    
       - Set the right output level on SAMA5D2.
    
       - Drop the unused irq trigger setting on the Spreadtrum driver.
    
       - Wakeup support for PCA953x.
    
       - A slew of cleanups in the various Intel drivers"
    
    * tag 'gpio-v5.1-1' of git://git.kernel.org/pub/scm/linux/kernel/git/linusw/linux-gpio: (110 commits)
      gpio: gpio-omap: fix level interrupt idling
      gpio: amd-fch: Set proper output level for direction_output
      x86: apuv2: remove unused variable
      gpio: pca953x: Use PCA_LATCH_INT
      platform/x86: fix PCENGINES_APU2 Kconfig warning
      gpio: pca953x: Fix dereference of irq data in shutdown
      gpio: amd-fch: Fix type error found by sparse
      gpio: amd-fch: Drop const from resource
      gpio: mxc: add check to return defer probe if clock tree NOT ready
      gpio: ftgpio: Register per-instance irqchip
      gpio: ixp4xx: Add DT bindings
      x86: pcengines apuv2 gpio/leds/keys platform driver
      gpio: AMD G-Series PCH gpio driver
      drivers: depend on HAS_IOMEM for devm_platform_ioremap_resource()
      gpio: tqmx86: Set proper output level for direction_output
      gpio: sprd: Change to use SoC compatible string
      gpio: sprd: Use SoC compatible string instead of wildcard string
      gpio: of: Handle both enable-gpio{,s}
      gpio: of: Restrict enable-gpio quirk to regulator-gpio
      gpio: davinci: use devm_platform_ioremap_resource()
      ...

commit 21b4ab8f9e7100286c380a13e0e46ca6bf35e692
Author: Marek Vasut <marek.vasut+renesas@gmail.com>
Date:   Wed Feb 20 12:24:30 2019 +0100

    gpio: of: Handle both enable-gpio{,s}
    
    Handle both enable-gpio and enable-gpios properties of the GPIO
    regulator in the quirk. The later is the preferred modern name
    of the property.
    
    Signed-off-by: Marek Vasut <marek.vasut+renesas@gmail.com>
    Cc: Geert Uytterhoeven <geert+renesas@glider.be>
    Cc: Jan Kotas <jank@cadence.com>
    Cc: Linus Walleij <linus.walleij@linaro.org>
    Cc: Mark Brown <broonie@kernel.org>
    Cc: Thierry Reding <treding@nvidia.com>
    Cc: Wolfram Sang <wsa+renesas@sang-engineering.com>
    Cc: linux-renesas-soc@vger.kernel.org
    To: linux-gpio@vger.kernel.org
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>

diff --git a/drivers/gpio/gpiolib-of.c b/drivers/gpio/gpiolib-of.c
index 950d3d6b2b7f..662c6f363ac2 100644
--- a/drivers/gpio/gpiolib-of.c
+++ b/drivers/gpio/gpiolib-of.c
@@ -87,7 +87,8 @@ static void of_gpio_flags_quirks(struct device_node *np,
 	    (of_device_is_compatible(np, "regulator-fixed") ||
 	     of_device_is_compatible(np, "reg-fixed-voltage") ||
 	     (of_device_is_compatible(np, "regulator-gpio") &&
-	      strcmp(propname, "enable-gpio") == 0))) {
+	      !(strcmp(propname, "enable-gpio") &&
+	        strcmp(propname, "enable-gpios"))))) {
 		/*
 		 * The regulator GPIO handles are specified such that the
 		 * presence or absence of "enable-active-high" solely controls

commit 692ef26e72fcce0c1e73c41683fd3512f3719d55
Author: Thierry Reding <treding@nvidia.com>
Date:   Wed Feb 20 11:52:14 2019 +0100

    gpio: of: Restrict enable-gpio quirk to regulator-gpio
    
    Commit 0e7d6f940164 ("gpio: of: Apply regulator-gpio quirk only to
    enable-gpios") breaks the device tree ABI specified in the device tree
    bindings for fixed regulators (compatible "regulator-fixed"). According
    to these bindings the polarity of the GPIO is exclusively controlled by
    the presence or absence of the enable-active-high property. As such the
    polarity quirk implemented in of_gpio_flags_quirks() must be applied to
    the GPIO specified for fixed regulators.
    
    However, commit 0e7d6f940164 ("gpio: of: Apply regulator-gpio quirk only
    to enable-gpios") restricted the quirk to the enable-gpios property for
    fixed regulators as well, whereas according to the commit message itself
    it should only apply to "regulator-gpio" compatible device tree nodes.
    
    Fix this by actually implementing what the offending commit intended,
    which is to ensure that the quirk is applied to the GPIO specified by
    the "enable-gpio" property for the "regulator-gpio" bindings only.
    
    This fixes a regression on Jetson TX1 where the fixed regulator for the
    HDMI +5V pin relies on the flags quirk for the proper polarity.
    
    Fixes: 0e7d6f940164 ("gpio: of: Apply regulator-gpio quirk only to enable-gpios")
    Signed-off-by: Thierry Reding <treding@nvidia.com>
    Tested-by: Marek Vasut <marek.vasut@gmail.com>
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>

diff --git a/drivers/gpio/gpiolib-of.c b/drivers/gpio/gpiolib-of.c
index 4547dba19956..950d3d6b2b7f 100644
--- a/drivers/gpio/gpiolib-of.c
+++ b/drivers/gpio/gpiolib-of.c
@@ -84,10 +84,10 @@ static void of_gpio_flags_quirks(struct device_node *np,
 	 * Note that active low is the default.
 	 */
 	if (IS_ENABLED(CONFIG_REGULATOR) &&
-	    !strcmp(propname, "enable-gpio") &&
 	    (of_device_is_compatible(np, "regulator-fixed") ||
 	     of_device_is_compatible(np, "reg-fixed-voltage") ||
-	     of_device_is_compatible(np, "regulator-gpio"))) {
+	     (of_device_is_compatible(np, "regulator-gpio") &&
+	      strcmp(propname, "enable-gpio") == 0))) {
 		/*
 		 * The regulator GPIO handles are specified such that the
 		 * presence or absence of "enable-active-high" solely controls

commit 0e7d6f94016407fd7e1ae472e254d64d4454e9c8
Author: Marek Vasut <marek.vasut+renesas@gmail.com>
Date:   Sat Feb 16 14:46:27 2019 +0100

    gpio: of: Apply regulator-gpio quirk only to enable-gpios
    
    Since commit d6cd33ad7102 ("regulator: gpio: Convert to use descriptors")
    the GPIO regulator had inverted the polarity of the control GPIO. This
    problem manifested itself on systems with DT containing the following
    description (snippet from salvator-common.dtsi):
    
            gpios = <&gpio5 1 GPIO_ACTIVE_HIGH>;
            gpios-states = <1>;
            states = <3300000 1
                      1800000 0>;
    
    Prior to the aforementioned commit, the gpio-regulator code used
    gpio_request_array() to claim the GPIO(s) specified in the "gpios"
    DT node, while the commit changed that to devm_gpiod_get_index().
    
    The legacy gpio_request_array() calls gpio_request_one() and then
    gpiod_request(), which parses the DT flags of the "gpios" node and
    populates the GPIO descriptor flags field accordingly.
    
    The new devm_gpiod_get_index() calls gpiod_get_index(), then
    of_find_gpio(), of_get_named_gpiod_flags() with flags != NULL,
    and then of_gpio_flags_quirks(). Since commit a603a2b8d86e
    ("gpio: of: Add special quirk to parse regulator flags"),
    of_gpio_flags_quirks() contains a quirk for regulator-gpio
    which was never triggered by the legacy gpio_request_array()
    code path, but is triggered by devm_gpiod_get_index() code
    path.
    
    This quirk checks whether a GPIO is associated with a fixed
    or gpio-regulator and if so, checks two additional conditions.
    First, whether such GPIO is active-low, and if so, ignores the
    active-low flag. Second, whether the regulator DT node does
    have an "enable-active-high" property and if the property is
    NOT present, sets the GPIO flags as active-low.
    
    The second check triggers a problem, since it is applied to all
    GPIOs associated with a gpio-regulator, rather than only on the
    "enable" GPIOs, as the old code did. This changes the way the
    gpio-regulator interprets the DT description of the control
    GPIOs.
    
    The old code using gpio_request_array() explicitly parsed the
    "enable-active-high" DT property and only applied it to the
    GPIOs described in the "enable-gpios" DT node, and only if
    those were present.
    
    This patch fixes the quirk code by only applying the quirk
    to "enable-gpios", thus restoring the old behavior.
    
    Signed-off-by: Marek Vasut <marek.vasut+renesas@gmail.com>
    Cc: Geert Uytterhoeven <geert+renesas@glider.be>
    Cc: Jan Kotas <jank@cadence.com>
    Cc: Linus Walleij <linus.walleij@linaro.org>
    Cc: Mark Brown <broonie@kernel.org>
    Cc: Wolfram Sang <wsa+renesas@sang-engineering.com>
    Cc: linux-renesas-soc@vger.kernel.org
    To: linux-gpio@vger.kernel.org
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>

diff --git a/drivers/gpio/gpiolib-of.c b/drivers/gpio/gpiolib-of.c
index 9a8b78477f79..4547dba19956 100644
--- a/drivers/gpio/gpiolib-of.c
+++ b/drivers/gpio/gpiolib-of.c
@@ -84,6 +84,7 @@ static void of_gpio_flags_quirks(struct device_node *np,
 	 * Note that active low is the default.
 	 */
 	if (IS_ENABLED(CONFIG_REGULATOR) &&
+	    !strcmp(propname, "enable-gpio") &&
 	    (of_device_is_compatible(np, "regulator-fixed") ||
 	     of_device_is_compatible(np, "reg-fixed-voltage") ||
 	     of_device_is_compatible(np, "regulator-gpio"))) {

commit d449991c4d1d0663b42db7648510a9911de21298
Author: Thomas Petazzoni <thomas.petazzoni@bootlin.com>
Date:   Thu Feb 7 17:28:58 2019 +0100

    gpio: add core support for pull-up/pull-down configuration
    
    This commit adds support for configuring the pull-up and pull-down
    resistors available in some GPIO controllers. While configuring
    pull-up/pull-down is already possible through the pinctrl subsystem,
    some GPIO controllers, especially simple ones such as GPIO expanders
    on I2C, don't have any pinmuxing capability and therefore do not use
    the pinctrl subsystem.
    
    This commit implements the GPIO_PULL_UP and GPIO_PULL_DOWN flags,
    which can be used from the Device Tree, to enable a pull-up or
    pull-down resistor on a given GPIO.
    
    The flag is simply propagated all the way to the core GPIO subsystem,
    where it is used to call the gpio_chip ->set_config callback with the
    appropriate existing PIN_CONFIG_BIAS_* values.
    
    Signed-off-by: Thomas Petazzoni <thomas.petazzoni@bootlin.com>
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>

diff --git a/drivers/gpio/gpiolib-of.c b/drivers/gpio/gpiolib-of.c
index a6e1891217e2..9a8b78477f79 100644
--- a/drivers/gpio/gpiolib-of.c
+++ b/drivers/gpio/gpiolib-of.c
@@ -345,6 +345,11 @@ struct gpio_desc *of_find_gpio(struct device *dev, const char *con_id,
 	if (of_flags & OF_GPIO_TRANSITORY)
 		*flags |= GPIO_TRANSITORY;
 
+	if (of_flags & OF_GPIO_PULL_UP)
+		*flags |= GPIO_PULL_UP;
+	if (of_flags & OF_GPIO_PULL_DOWN)
+		*flags |= GPIO_PULL_DOWN;
+
 	return desc;
 }
 

commit c1c04cea13dc234ce9a4504879ddd36ea524d880
Author: Linus Walleij <linus.walleij@linaro.org>
Date:   Wed Jan 16 09:21:10 2019 +0100

    gpio: of: Fix logic inversion
    
    The SPI chip selects were not properly inspected due to
    a logic inversion. This made SPI GPIOs not work.
    
    Cc: Jan Kotas <jank@cadence.com>
    Reported-by: Jan Kotas <jank@cadence.com>
    Tested-by: Jan Kotas <jank@cadence.com>
    Fixes: f3186dd87669 ("spi: Optionally use GPIO descriptors for CS GPIOs")
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>
    Signed-off-by: Mark Brown <broonie@kernel.org>

diff --git a/drivers/gpio/gpiolib-of.c b/drivers/gpio/gpiolib-of.c
index a6e1891217e2..c34eb9d9c59a 100644
--- a/drivers/gpio/gpiolib-of.c
+++ b/drivers/gpio/gpiolib-of.c
@@ -125,7 +125,7 @@ static void of_gpio_flags_quirks(struct device_node *np,
 
 		for_each_child_of_node(np, child) {
 			ret = of_property_read_u32(child, "reg", &cs);
-			if (!ret)
+			if (ret)
 				continue;
 			if (cs == index) {
 				/*

commit 89a5e15bcba87df5120d4656e0ff33d4f7cd6152
Author: Linus Walleij <linus.walleij@linaro.org>
Date:   Mon Dec 17 22:36:25 2018 +0100

    gpio/mmc/of: Respect polarity in the device tree
    
    The device tree bindings for the MMC card detect and
    write protect lines specify that these should be active
    low unless "cd-inverted" or "wp-inverted" has been
    specified.
    
    However that is not how the kernel code has worked. It
    has always respected the flags passed to the phandle in
    the device tree, but respected the "cd-inverted" and
    "wp-inverted" flags such that if those are set, the
    polarity will be the inverse of that specified in the
    device tree.
    
    Switch to behaving like the old code did and fix the
    regression.
    
    Fixes: 81c85ec15a19 ("gpio: OF: Parse MMC-specific CD and WP properties")
    Cc: Bartosz Golaszewski <bgolaszewski@baylibre.com>
    Cc: Guenter Roeck <linux@roeck-us.net>
    Reported-by: Guenter Roeck <linux@roeck-us.net>
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>

diff --git a/drivers/gpio/gpiolib-of.c b/drivers/gpio/gpiolib-of.c
index fa8044228f0e..a6e1891217e2 100644
--- a/drivers/gpio/gpiolib-of.c
+++ b/drivers/gpio/gpiolib-of.c
@@ -54,6 +54,7 @@ static struct gpio_desc *of_xlate_and_get_gpiod_flags(struct gpio_chip *chip,
 }
 
 static void of_gpio_flags_quirks(struct device_node *np,
+				 const char *propname,
 				 enum of_gpio_flags *flags,
 				 int index)
 {
@@ -61,39 +62,21 @@ static void of_gpio_flags_quirks(struct device_node *np,
 	 * Handle MMC "cd-inverted" and "wp-inverted" semantics.
 	 */
 	if (IS_ENABLED(CONFIG_MMC)) {
-		if (of_property_read_bool(np, "cd-gpios")) {
-			if (of_property_read_bool(np, "cd-inverted")) {
-				if (*flags & OF_GPIO_ACTIVE_LOW) {
-					/* "cd-inverted" takes precedence */
-					*flags &= ~OF_GPIO_ACTIVE_LOW;
-					pr_warn("%s GPIO handle specifies CD active low - ignored\n",
-						of_node_full_name(np));
-				}
-			} else {
-				/*
-				 * Active low is the default according to the
-				 * SDHCI specification. If the GPIO handle
-				 * specifies the same thing - good.
-				 */
-				*flags |= OF_GPIO_ACTIVE_LOW;
-			}
+		/*
+		 * Active low is the default according to the
+		 * SDHCI specification and the device tree
+		 * bindings. However the code in the current
+		 * kernel was written such that the phandle
+		 * flags were always respected, and "cd-inverted"
+		 * would invert the flag from the device phandle.
+		 */
+		if (!strcmp(propname, "cd-gpios")) {
+			if (of_property_read_bool(np, "cd-inverted"))
+				*flags ^= OF_GPIO_ACTIVE_LOW;
 		}
-		if (of_property_read_bool(np, "wp-gpios")) {
-			if (of_property_read_bool(np, "wp-inverted")) {
-				/* "wp-inverted" takes precedence */
-				if (*flags & OF_GPIO_ACTIVE_LOW) {
-					*flags &= ~OF_GPIO_ACTIVE_LOW;
-					pr_warn("%s GPIO handle specifies WP active low - ignored\n",
-						of_node_full_name(np));
-				}
-			} else {
-				/*
-				 * Active low is the default according to the
-				 * SDHCI specification. If the GPIO handle
-				 * specifies the same thing - good.
-				 */
-				*flags |= OF_GPIO_ACTIVE_LOW;
-			}
+		if (!strcmp(propname, "wp-gpios")) {
+			if (of_property_read_bool(np, "wp-inverted"))
+				*flags ^= OF_GPIO_ACTIVE_LOW;
 		}
 	}
 	/*
@@ -213,7 +196,7 @@ struct gpio_desc *of_get_named_gpiod_flags(struct device_node *np,
 		goto out;
 
 	if (flags)
-		of_gpio_flags_quirks(np, flags, index);
+		of_gpio_flags_quirks(np, propname, flags, index);
 
 	pr_debug("%s: parsed '%s' property of node '%pOF[%d]' - status (%d)\n",
 		 __func__, propname, np, index,

commit 81c85ec15a1946f2e347ec0bf66936121eb97ce7
Author: Linus Walleij <linus.walleij@linaro.org>
Date:   Mon Nov 26 14:51:23 2018 +0100

    gpio: OF: Parse MMC-specific CD and WP properties
    
    When retrieveing CD (card detect) and WP (write protect)
    GPIO handles from the device tree, make sure to assign
    them active low by default unless the "cd-inverted" or
    "wp-inverted" properties are set. These properties mean
    that respective signal is active HIGH since the SDHCI
    specification stipulates that this kind of signals
    should be treated as active LOW.
    
    If the twocell GPIO flag is also specified as active
    low, well that's nice and we will silently ignore the
    tautological specification.
    
    If however the GPIO line is specified as active low
    in the GPIO flasg cell and "cd-inverted" or "wp-inverted"
    is also specified, the latter takes precedence and we
    print a warning.
    
    The current effect on the MMC slot-gpio core are as
    follows:
    
    For CD GPIOs: no effect. The current code in
    mmc/core/host.c calls mmc_gpiod_request_cd() with
    the "override_active_level" argument set to true,
    which means that whatever the GPIO descriptor
    thinks about active low/high will be ignored, the
    core will use the MMC_CAP2_CD_ACTIVE_HIGH to keep
    track of this and reads the raw value from the
    GPIO descriptor, totally bypassing gpiolibs inversion
    semantics. I plan to clean this up at a later point
    passing the handling of inversion semantics over
    to gpiolib, so this patch prepares the ground for
    that.
    
    Fow WP GPIOs: this is probably fixing a bug, because
    the code in mmc/core/host.c calls mmc_gpiod_request_ro()
    with the "override_active_level" argument set to false,
    which means it will respect the inversion semantics of
    the gpiolib and ignore the MMC_CAP2_RO_ACTIVE_HIGH
    flag for everyone using this through device tree.
    However the code in host.c confusingly goes to great
    lengths setting up the MMC_CAP2_RO_ACTIVE_HIGH flag
    from the GPIO descriptor and by reading the "wp-inverted"
    property of the node. As far as I can tell this is all
    in vain and the inversion is broken: device trees that
    use "wp-inverted" do not work as intended, instead the
    only way to actually get inversion on a line is by
    setting the second cell flag to GPIO_ACTIVE_HIGH (which
    will be the default) or GPIO_ACTIVE_LOW if they want
    the proper MMC semantics. Presumably all device trees do
    this right but we need to parse and handle this properly.
    
    Cc: linux-mmc@vger.kernel.org
    Cc: linux-gpio@vger.kernel.org
    Cc: Bartosz Golaszewski <bgolaszewski@baylibre.com>
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>

diff --git a/drivers/gpio/gpiolib-of.c b/drivers/gpio/gpiolib-of.c
index 59cb87325179..fa8044228f0e 100644
--- a/drivers/gpio/gpiolib-of.c
+++ b/drivers/gpio/gpiolib-of.c
@@ -57,6 +57,45 @@ static void of_gpio_flags_quirks(struct device_node *np,
 				 enum of_gpio_flags *flags,
 				 int index)
 {
+	/*
+	 * Handle MMC "cd-inverted" and "wp-inverted" semantics.
+	 */
+	if (IS_ENABLED(CONFIG_MMC)) {
+		if (of_property_read_bool(np, "cd-gpios")) {
+			if (of_property_read_bool(np, "cd-inverted")) {
+				if (*flags & OF_GPIO_ACTIVE_LOW) {
+					/* "cd-inverted" takes precedence */
+					*flags &= ~OF_GPIO_ACTIVE_LOW;
+					pr_warn("%s GPIO handle specifies CD active low - ignored\n",
+						of_node_full_name(np));
+				}
+			} else {
+				/*
+				 * Active low is the default according to the
+				 * SDHCI specification. If the GPIO handle
+				 * specifies the same thing - good.
+				 */
+				*flags |= OF_GPIO_ACTIVE_LOW;
+			}
+		}
+		if (of_property_read_bool(np, "wp-gpios")) {
+			if (of_property_read_bool(np, "wp-inverted")) {
+				/* "wp-inverted" takes precedence */
+				if (*flags & OF_GPIO_ACTIVE_LOW) {
+					*flags &= ~OF_GPIO_ACTIVE_LOW;
+					pr_warn("%s GPIO handle specifies WP active low - ignored\n",
+						of_node_full_name(np));
+				}
+			} else {
+				/*
+				 * Active low is the default according to the
+				 * SDHCI specification. If the GPIO handle
+				 * specifies the same thing - good.
+				 */
+				*flags |= OF_GPIO_ACTIVE_LOW;
+			}
+		}
+	}
 	/*
 	 * Some GPIO fixed regulator quirks.
 	 * Note that active low is the default.

commit 27038c3e1f140a9c3f0e514db6db82495f78bbc9
Author: Vladimir Zapolskiy <vz@mleia.com>
Date:   Thu Nov 22 15:59:01 2018 +0200

    gpio: restore original GPLv2+ license of gpiolib-of.c sources
    
    It's easy to verify that the change of drivers/gpio/gpiolib-of.c license
    header to SPDX standard changes the license from GPLv2+ to GPLv2, and
    this change corrects it.
    
    Fixes: dae5f0afcfc3 ("gpio: Use SPDX header for core library")
    Signed-off-by: Vladimir Zapolskiy <vz@mleia.com>
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>

diff --git a/drivers/gpio/gpiolib-of.c b/drivers/gpio/gpiolib-of.c
index 7f1260c78270..59cb87325179 100644
--- a/drivers/gpio/gpiolib-of.c
+++ b/drivers/gpio/gpiolib-of.c
@@ -1,4 +1,4 @@
-// SPDX-License-Identifier: GPL-2.0
+// SPDX-License-Identifier: GPL-2.0+
 /*
  * OF helpers for the GPIO API
  *

commit 114b5f8f7efc036dd7dd16efb0f218a88e6c6c02
Merge: b0b6a28bc4b2 40f5ff4f9f23
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Tue Oct 23 08:45:05 2018 +0100

    Merge tag 'gpio-v4.20-1' of git://git.kernel.org/pub/scm/linux/kernel/git/linusw/linux-gpio
    
    Pull GPIO updates from Linus Walleij:
     "This is the bulk of GPIO changes for the v4.20 series:
    
      Core changes:
    
       - A patch series from Hans Verkuil to make it possible to
         enable/disable IRQs on a GPIO line at runtime and drive GPIO lines
         as output without having to put/get them from scratch.
    
         The irqchip callbacks have been improved so that they can use only
         the fastpatch callbacks to enable/disable irqs like any normal
         irqchip, especially the gpiod_lock_as_irq() has been improved to be
         callable in fastpath context.
    
         A bunch of rework had to be done to achieve this but it is a big
         win since I never liked to restrict this to slowpath. The only call
         requireing slowpath was try_module_get() and this is kept at the
         .request_resources() slowpath callback. In the GPIO CEC driver this
         is a big win sine a single line is used for both outgoing and
         incoming traffic, and this needs to use IRQs for incoming traffic
         while actively driving the line for outgoing traffic.
    
       - Janusz Krzysztofik improved the GPIO array API to pass a "cookie"
         (struct gpio_array) and a bitmap for setting or getting multiple
         GPIO lines at once.
    
         This improvement orginated in a specific need to speed up an OMAP1
         driver and has led to a much better API and real performance gains
         when the state of the array can be used to bypass a lot of checks
         and code when we want things to go really fast.
    
         The previous code would minimize the number of calls down to the
         driver callbacks assuming the CPU speed was orders of magnitude
         faster than the I/O latency, but this assumption was wrong on
         several platforms: what we needed to do was to profile and improve
         the speed on the hot path of the array functions and this change is
         now completed.
    
       - Clean out the painful and hard to grasp BNF experiments from the
         device tree bindings. Future approaches are looking into using JSON
         schema for this purpose. (Rob Herring is floating a patch series.)
    
      New drivers:
    
       - The RCAR driver now supports r8a774a1 (RZ/G2M).
    
       - Synopsys GPIO via CREGs driver.
    
      Major improvements:
    
       - Modernization of the EP93xx driver to use irqdomain and other
         contemporary concepts.
    
       - The ingenic driver has been merged into the Ingenic pin control
         driver and removed from the GPIO subsystem.
    
       - Debounce support in the ftgpio010 driver"
    
    * tag 'gpio-v4.20-1' of git://git.kernel.org/pub/scm/linux/kernel/git/linusw/linux-gpio: (116 commits)
      gpio: Clarify kerneldoc on gpiochip_set_chained_irqchip()
      gpio: Remove unused 'irqchip' argument to gpiochip_set_cascaded_irqchip()
      gpio: Drop parent irq assignment during cascade setup
      mmc: pwrseq_simple: Fix incorrect handling of GPIO bitmap
      gpio: fix SNPS_CREG kconfig dependency warning
      gpiolib: Initialize gdev field before is used
      gpio: fix kernel-doc after devres.c file rename
      gpio: fix doc string for devm_gpiochip_add_data() to not talk about irq_chip
      gpio: syscon: Fix possible NULL ptr usage
      gpiolib: Show correct direction from the beginning
      pinctrl: msm: Use init_valid_mask exported function
      gpiolib: Add init_valid_mask exported function
      GPIO: add single-register GPIO via CREG driver
      dt-bindings: Document the Synopsys GPIO via CREG bindings
      gpio: mockup: use device properties instead of platform_data
      gpio: Slightly more helpful debugfs
      gpio: omap: Remove set but not used variable 'dev'
      gpio: omap: drop omap_gpio_list
      Accept partial 'gpio-line-names' property.
      gpio: omap: get rid of the conditional PM runtime calls
      ...

commit dae5f0afcfc35ff64dfb65cddc6842ceeeca68c4
Author: Linus Walleij <linus.walleij@linaro.org>
Date:   Tue Sep 25 09:08:48 2018 +0200

    gpio: Use SPDX header for core library
    
    Use the SPDX headers and cut down on boilerplate to indicate the
    license in the core gpiolib implementation.
    
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>

diff --git a/drivers/gpio/gpiolib-of.c b/drivers/gpio/gpiolib-of.c
index 9985b748b14d..cb8ceddf05ac 100644
--- a/drivers/gpio/gpiolib-of.c
+++ b/drivers/gpio/gpiolib-of.c
@@ -1,14 +1,10 @@
+// SPDX-License-Identifier: GPL-2.0
 /*
  * OF helpers for the GPIO API
  *
  * Copyright (c) 2007-2008  MontaVista Software, Inc.
  *
  * Author: Anton Vorontsov <avorontsov@ru.mvista.com>
- *
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation; either version 2 of the License, or
- * (at your option) any later version.
  */
 
 #include <linux/device.h>

commit 6953c57ab1721ce57914fc5741d0ce0568756bb0
Author: Linus Walleij <linus.walleij@linaro.org>
Date:   Tue Sep 4 11:01:58 2018 +0200

    gpio: of: Handle SPI chipselect legacy bindings
    
    The SPI chipselects are assumed to be active low in the current
    binding, so when we want to use GPIO descriptors and handle
    the active low/high semantics in gpiolib, we need a special
    parsing quirk to deal with this.
    
    We check for the property "spi-cs-high" and if that is
    NOT present we assume the CS line is active low.
    
    If the line is tagged as active low in the device tree and
    has no "spi-cs-high" property all is fine, the device
    tree and the SPI bindings are in agreement.
    
    If the line is tagged as active high in the device tree with
    the second cell flag and has no "spi-cs-high" property we
    enforce active low semantics (as this is the exception we can
    just tag on the flag).
    
    If the line is tagged as active low with the second cell flag
    AND tagged with "spi-cs-high" the SPI active high property
    takes precedence and we print a warning.
    
    Cc: Mark Brown <broonie@kernel.org>
    Cc: linux-spi@vger.kernel.org
    Cc: Geert Uytterhoeven <geert@linux-m68k.org>
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>

diff --git a/drivers/gpio/gpiolib-of.c b/drivers/gpio/gpiolib-of.c
index 089783b11e87..9985b748b14d 100644
--- a/drivers/gpio/gpiolib-of.c
+++ b/drivers/gpio/gpiolib-of.c
@@ -57,7 +57,8 @@ static struct gpio_desc *of_xlate_and_get_gpiod_flags(struct gpio_chip *chip,
 }
 
 static void of_gpio_flags_quirks(struct device_node *np,
-				 enum of_gpio_flags *flags)
+				 enum of_gpio_flags *flags,
+				 int index)
 {
 	/*
 	 * Some GPIO fixed regulator quirks.
@@ -91,6 +92,51 @@ static void of_gpio_flags_quirks(struct device_node *np,
 		pr_info("%s uses legacy open drain flag - update the DTS if you can\n",
 			of_node_full_name(np));
 	}
+
+	/*
+	 * Legacy handling of SPI active high chip select. If we have a
+	 * property named "cs-gpios" we need to inspect the child node
+	 * to determine if the flags should have inverted semantics.
+	 */
+	if (IS_ENABLED(CONFIG_SPI_MASTER) &&
+	    of_property_read_bool(np, "cs-gpios")) {
+		struct device_node *child;
+		u32 cs;
+		int ret;
+
+		for_each_child_of_node(np, child) {
+			ret = of_property_read_u32(child, "reg", &cs);
+			if (!ret)
+				continue;
+			if (cs == index) {
+				/*
+				 * SPI children have active low chip selects
+				 * by default. This can be specified negatively
+				 * by just omitting "spi-cs-high" in the
+				 * device node, or actively by tagging on
+				 * GPIO_ACTIVE_LOW as flag in the device
+				 * tree. If the line is simultaneously
+				 * tagged as active low in the device tree
+				 * and has the "spi-cs-high" set, we get a
+				 * conflict and the "spi-cs-high" flag will
+				 * take precedence.
+				 */
+				if (of_property_read_bool(np, "spi-cs-high")) {
+					if (*flags & OF_GPIO_ACTIVE_LOW) {
+						pr_warn("%s GPIO handle specifies active low - ignored\n",
+							of_node_full_name(np));
+						*flags &= ~OF_GPIO_ACTIVE_LOW;
+					}
+				} else {
+					if (!(*flags & OF_GPIO_ACTIVE_LOW))
+						pr_info("%s enforce active low on chipselect handle\n",
+							of_node_full_name(np));
+					*flags |= OF_GPIO_ACTIVE_LOW;
+				}
+				break;
+			}
+		}
+	}
 }
 
 /**
@@ -131,7 +177,7 @@ struct gpio_desc *of_get_named_gpiod_flags(struct device_node *np,
 		goto out;
 
 	if (flags)
-		of_gpio_flags_quirks(np, flags);
+		of_gpio_flags_quirks(np, flags, index);
 
 	pr_debug("%s: parsed '%s' property of node '%pOF[%d]' - status (%d)\n",
 		 __func__, propname, np, index,

commit d49b48f088c323dbacae44dfbe56d9c985c8a2a1
Author: Vincent Whitchurch <vincent.whitchurch@axis.com>
Date:   Fri Aug 31 09:04:18 2018 +0200

    gpio: Fix crash due to registration race
    
    gpiochip_add_data_with_key() adds the gpiochip to the gpio_devices list
    before of_gpiochip_add() is called, but it's only the latter which sets
    the ->of_xlate function pointer.  gpiochip_find() can be called by
    someone else between these two actions, and it can find the chip and
    call of_gpiochip_match_node_and_xlate() which leads to the following
    crash due to a NULL ->of_xlate().
    
     Unhandled prefetch abort: page domain fault (0x01b) at 0x00000000
     Modules linked in: leds_gpio(+) gpio_generic(+)
     CPU: 0 PID: 830 Comm: insmod Not tainted 4.18.0+ #43
     Hardware name: ARM-Versatile Express
     PC is at   (null)
     LR is at of_gpiochip_match_node_and_xlate+0x2c/0x38
     Process insmod (pid: 830, stack limit = 0x(ptrval))
      (of_gpiochip_match_node_and_xlate) from  (gpiochip_find+0x48/0x84)
      (gpiochip_find) from  (of_get_named_gpiod_flags+0xa8/0x238)
      (of_get_named_gpiod_flags) from  (gpiod_get_from_of_node+0x2c/0xc8)
      (gpiod_get_from_of_node) from  (devm_fwnode_get_index_gpiod_from_child+0xb8/0x144)
      (devm_fwnode_get_index_gpiod_from_child) from  (gpio_led_probe+0x208/0x3c4 [leds_gpio])
      (gpio_led_probe [leds_gpio]) from  (platform_drv_probe+0x48/0x9c)
      (platform_drv_probe) from  (really_probe+0x1d0/0x3d4)
      (really_probe) from  (driver_probe_device+0x78/0x1c0)
      (driver_probe_device) from  (__driver_attach+0x120/0x13c)
      (__driver_attach) from  (bus_for_each_dev+0x68/0xb4)
      (bus_for_each_dev) from  (bus_add_driver+0x1a8/0x268)
      (bus_add_driver) from  (driver_register+0x78/0x10c)
      (driver_register) from  (do_one_initcall+0x54/0x1fc)
      (do_one_initcall) from  (do_init_module+0x64/0x1f4)
      (do_init_module) from  (load_module+0x2198/0x26ac)
      (load_module) from  (sys_finit_module+0xe0/0x110)
      (sys_finit_module) from  (ret_fast_syscall+0x0/0x54)
    
    One way to fix this would be to rework the hairy registration sequence
    in gpiochip_add_data_with_key(), but since I'd probably introduce a
    couple of new bugs if I attempted that, simply add a check for a
    non-NULL of_xlate function pointer in
    of_gpiochip_match_node_and_xlate().  This works since the driver looking
    for the gpio will simply fail to find the gpio and defer its probe and
    be reprobed when the driver which is registering the gpiochip has fully
    completed its probe.
    
    Signed-off-by: Vincent Whitchurch <vincent.whitchurch@axis.com>
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>

diff --git a/drivers/gpio/gpiolib-of.c b/drivers/gpio/gpiolib-of.c
index a4f1157d6aa0..d4e7a09598fa 100644
--- a/drivers/gpio/gpiolib-of.c
+++ b/drivers/gpio/gpiolib-of.c
@@ -31,6 +31,7 @@ static int of_gpiochip_match_node_and_xlate(struct gpio_chip *chip, void *data)
 	struct of_phandle_args *gpiospec = data;
 
 	return chip->gpiodev->dev.of_node == gpiospec->np &&
+				chip->of_xlate &&
 				chip->of_xlate(chip, gpiospec, NULL) >= 0;
 }
 

commit 62cdcb6c572ef0f55f4d6c06f008289f50eb516a
Author: Rob Herring <robh@kernel.org>
Date:   Mon Aug 27 20:52:19 2018 -0500

    gpio: Convert to using %pOFn instead of device_node.name
    
    In preparation to remove the node name pointer from struct device_node,
    convert printf users to use the %pOFn format specifier.
    
    Cc: Linus Walleij <linus.walleij@linaro.org>
    Cc: linux-gpio@vger.kernel.org
    Signed-off-by: Rob Herring <robh@kernel.org>
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>

diff --git a/drivers/gpio/gpiolib-of.c b/drivers/gpio/gpiolib-of.c
index a4f1157d6aa0..089783b11e87 100644
--- a/drivers/gpio/gpiolib-of.c
+++ b/drivers/gpio/gpiolib-of.c
@@ -348,8 +348,8 @@ static struct gpio_desc *of_parse_own_gpio(struct device_node *np,
 	else if (of_property_read_bool(np, "output-high"))
 		*dflags |= GPIOD_OUT_HIGH;
 	else {
-		pr_warn("GPIO line %d (%s): no hogging state specified, bailing out\n",
-			desc_to_gpio(desc), np->name);
+		pr_warn("GPIO line %d (%pOFn): no hogging state specified, bailing out\n",
+			desc_to_gpio(desc), np);
 		return ERR_PTR(-EINVAL);
 	}
 

commit 6de4c691eab8f421e34c5250f63bf3f477d30eec
Merge: c1c2ad82c772 a5ec96ddfd55
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Wed Aug 15 21:35:38 2018 -0700

    Merge tag 'gpio-v4.19-1' of git://git.kernel.org/pub/scm/linux/kernel/git/linusw/linux-gpio
    
    Pull GPIO updates from Linus Walleij:
     "This is the bulk of GPIO changes for the v4.19 kernel cycle.
    
      I don't know if anything in particular stands out. Maybe the Aspeed
      coprocessor thing from Benji: Aspeed is doing baseboard management
      chips (BMC's) for servers etc.
    
      These Aspeed's are ARM processors that exist inside (I guess) Intel
      servers, and they are moving forward to using mainline Linux in those.
      This is one of the pieces of the puzzle to achive that. They are doing
      OpenBMC, it's pretty cool: https://lwn.net/Articles/683320/
    
      Summary:
    
      Core changes:
    
       - Add a new API for explicitly naming GPIO consumers, when needed.
    
       - Don't let userspace set values on input lines. While we do not
         think anyone would do this crazy thing we better plug the hole
         before someone uses it and think it's a nifty feature.
    
       - Avoid calling chip->request() for unused GPIOs.
    
      New drivers/subdrivers:
    
       - The Mediatek MT7621 is supported which is a big win for OpenWRT and
         similar router distributions using this chip, as it seems every
         major router manufacturer on the planet has made products using
         this chip: https://wikidevi.com/wiki/MediaTek_MT7621
    
       - The Tegra 194 is now supported.
    
       - The IT87 driver now supports IT8786E and IT8718F super-IO chips.
    
       - Add support for Rockchip RK3328 in the syscon GPIO driver.
    
      Driver changes:
    
       - Handle the get/set_multiple() properly on MMIO chips with inverted
         direction registers. We didn't have this problem until a new chip
         appear that has get/set registers AND inverted direction bits, OK
         now we handle it.
    
       - A patch series making more error codes percolate upward properly
         for different errors on gpiochip_lock_as_irq().
    
       - Get/set multiple for the OMAP driver, accelerating these multiple
         line operations if possible.
    
       - A coprocessor interface for the Aspeed driver. Sometimes a few GPIO
         lines need to be grabbed by a co-processor for doing automated
         tasks, sometimes they are available as GPIO lines. By adding an
         explicit API in this driver we make it possible for the two line
         consumers to coexist. (This work was made available on the
         ib-aspeed branch, which may be appearing in other pull requests.)
    
       - Implemented .get_direction() and open drain in the SCH311x driver.
    
       - Continuing cleanup of included headers in GPIO drivers"
    
    * tag 'gpio-v4.19-1' of git://git.kernel.org/pub/scm/linux/kernel/git/linusw/linux-gpio: (80 commits)
      gpio: it87: Add support for IT8613
      gpio: it87: add support for IT8718F Super I/O.
      gpiolib: Avoid calling chip->request() for unused gpios
      gpio: tegra: Include the right header
      gpio: mmio: Fix up inverted direction registers
      gpio: xilinx: Use the right include
      gpio: timberdale: Include the right header
      gpio: tb10x: Use the right include
      gpiolib: Fix of_node inconsistency
      gpio: vr41xx: Bail out on gpiochip_lock_as_irq() error
      gpio: uniphier: Bail out on gpiochip_lock_as_irq() error
      gpio: xgene-sb: Don't shadow error code of gpiochip_lock_as_irq()
      gpio: em: Don't shadow error code of gpiochip_lock_as_irq()
      gpio: dwapb: Don't shadow error code of gpiochip_lock_as_irq()
      gpio: bcm-kona: Don't shadow error code of gpiochip_lock_as_irq()
      gpiolib: Don't shadow error code of gpiochip_lock_as_irq()
      gpio: syscon: rockchip: add GRF GPIO support for rk3328
      gpio: omap: Add get/set_multiple() callbacks
      gpio: pxa: remove set but not used variable 'gpio_offset'
      gpio-it87: add support for IT8786E Super I/O
      ...

commit 6ff0497402ef7269ee6a72f62eb85adaa7a4768e
Author: Biju Das <biju.das@bp.renesas.com>
Date:   Mon Aug 6 10:48:01 2018 +0100

    gpiolib: Fix of_node inconsistency
    
    Some platforms are not setting of_node in the driver. On these platforms
    defining gpio-reserved-ranges on device tree leads to kernel crash.
    
    It is due to some parts of the gpio core relying on the driver to set up
    of_node,while other parts do themselves.This inconsistent behaviour leads
    to a crash.
    
    gpiochip_add_data_with_key() calls gpiochip_init_valid_mask() with of_node
    as NULL. of_gpiochip_add() fills "of_node" and calls
    of_gpiochip_init_valid_mask().
    
    The fix is to move the assignment to chip->of_node from of_gpiochip_add()
    to gpiochip_add_data_with_key().
    
    Signed-off-by: Biju Das <biju.das@bp.renesas.com>
    Reviewed-by: Geert Uytterhoeven <geert+renesas@glider.be>
    Tested-by: Geert Uytterhoeven <geert+renesas@glider.be>
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>

diff --git a/drivers/gpio/gpiolib-of.c b/drivers/gpio/gpiolib-of.c
index 28d968088131..91174bf15cf3 100644
--- a/drivers/gpio/gpiolib-of.c
+++ b/drivers/gpio/gpiolib-of.c
@@ -620,9 +620,6 @@ int of_gpiochip_add(struct gpio_chip *chip)
 {
 	int status;
 
-	if ((!chip->of_node) && (chip->parent))
-		chip->of_node = chip->parent->of_node;
-
 	if (!chip->of_node)
 		return 0;
 

commit 906402a44b5d090e9c330c562b8aa65c80790ccc
Author: Linus Walleij <linus.walleij@linaro.org>
Date:   Mon Jun 11 15:11:41 2018 +0200

    gpio: of: Handle fixed regulator flags properly
    
    This fixes up the handling of fixed regulator polarity
    inversion flags: while I remembered to fix it for the
    undocumented "reg-fixed-voltage" I forgot about the
    official "regulator-fixed" binding, there are two ways
    to do a fixed regulator.
    
    The error was noticed and fixed.
    
    Fixes: a603a2b8d86e ("gpio: of: Add special quirk to parse regulator flags")
    Cc: Mark Brown <broonie@kernel.org>
    Cc: Thierry Reding <thierry.reding@gmail.com>
    Reported-by: Thierry Reding <thierry.reding@gmail.com>
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>

diff --git a/drivers/gpio/gpiolib-of.c b/drivers/gpio/gpiolib-of.c
index 28d968088131..53a14ee8ad6d 100644
--- a/drivers/gpio/gpiolib-of.c
+++ b/drivers/gpio/gpiolib-of.c
@@ -64,7 +64,8 @@ static void of_gpio_flags_quirks(struct device_node *np,
 	 * Note that active low is the default.
 	 */
 	if (IS_ENABLED(CONFIG_REGULATOR) &&
-	    (of_device_is_compatible(np, "reg-fixed-voltage") ||
+	    (of_device_is_compatible(np, "regulator-fixed") ||
+	     of_device_is_compatible(np, "reg-fixed-voltage") ||
 	     of_device_is_compatible(np, "regulator-gpio"))) {
 		/*
 		 * The regulator GPIO handles are specified such that the

commit 4b21f94a3001ba5326425d6b6d93bc63ddebdc97
Author: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
Date:   Thu May 3 20:14:46 2018 +0300

    gpio: Convert to use match_string() helper
    
    The new helper returns index of the matching string in an array.
    We are going to use it here.
    
    Signed-off-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>

diff --git a/drivers/gpio/gpiolib-of.c b/drivers/gpio/gpiolib-of.c
index 586d15137c03..28d968088131 100644
--- a/drivers/gpio/gpiolib-of.c
+++ b/drivers/gpio/gpiolib-of.c
@@ -210,11 +210,8 @@ static struct gpio_desc *of_find_regulator_gpio(struct device *dev, const char *
 	if (!con_id)
 		return ERR_PTR(-ENOENT);
 
-	for (i = 0; i < ARRAY_SIZE(whitelist); i++)
-		if (!strcmp(con_id, whitelist[i]))
-			break;
-
-	if (i == ARRAY_SIZE(whitelist))
+	i = match_string(whitelist, ARRAY_SIZE(whitelist), con_id);
+	if (i < 0)
 		return ERR_PTR(-ENOENT);
 
 	desc = of_get_named_gpiod_flags(np, con_id, 0, of_flags);

commit 9c2dd8405c0cc2288d6098df40c19569d17553e4
Merge: d66db9f6e427 827473268ee4
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Thu Apr 5 21:03:42 2018 -0700

    Merge tag 'devicetree-for-4.17' of git://git.kernel.org/pub/scm/linux/kernel/git/robh/linux
    
    Pull DeviceTree updates from Rob Herring:
    
     - Sync dtc to upstream version v1.4.6-9-gaadd0b65c987. This adds a
       bunch more warnings (hidden behind W=1).
    
     - Build dtc lexer and parser files instead of using shipped versions.
    
     - Rework overlay apply API to take an FDT as input and apply overlays
       in a single step.
    
     - Add a phandle lookup cache. This improves boot time by hundreds of
       msec on systems with large DT.
    
     - Add trivial mcp4017/18/19 potentiometers bindings.
    
     - Remove VLA stack usage in DT code.
    
    * tag 'devicetree-for-4.17' of git://git.kernel.org/pub/scm/linux/kernel/git/robh/linux: (26 commits)
      of: unittest: fix an error code in of_unittest_apply_overlay()
      of: unittest: move misplaced function declaration
      of: unittest: Remove VLA stack usage
      of: overlay: Fix forgotten reference to of_overlay_apply()
      of: Documentation: Fix forgotten reference to of_overlay_apply()
      of: unittest: local return value variable related cleanups
      of: unittest: remove unneeded local return value variables
      dt-bindings: trivial: add various mcp4017/18/19 potentiometers
      of: unittest: fix an error test in of_unittest_overlay_8()
      of: cache phandle nodes to reduce cost of of_find_node_by_phandle()
      dt-bindings: rockchip-dw-mshc: use consistent clock names
      MAINTAINERS: Add linux/of_*.h headers to appropriate subsystems
      scripts: turn off some new dtc warnings by default
      scripts/dtc: Update to upstream version v1.4.6-9-gaadd0b65c987
      scripts/dtc: generate lexer and parser during build instead of shipping
      powerpc: boot: add strrchr function
      of: overlay: do not include path in full_name of added nodes
      of: unittest: clean up changeset test
      arm64/efi: Make strrchr() available to the EFI namespace
      ARM: boot: add strrchr function
      ...

commit 726cb3ba49692bdae6caff457755e7cdb432efa4
Author: Stephen Boyd <sboyd@codeaurora.org>
Date:   Fri Mar 23 09:34:52 2018 -0700

    gpiolib: Support 'gpio-reserved-ranges' property
    
    Some qcom platforms make some GPIOs or pins unavailable for use by
    non-secure operating systems, and thus reading or writing the registers
    for those pins will cause access control issues. Add support for a DT
    property to describe the set of GPIOs that are available for use so that
    higher level OSes are able to know what pins to avoid reading/writing.
    Non-DT platforms can add support by directly updating the
    chip->valid_mask.
    
    Signed-off-by: Stephen Boyd <sboyd@codeaurora.org>
    Signed-off-by: Stephen Boyd <swboyd@chromium.org>
    Tested-by: Timur Tabi <timur@codeaurora.org>
    Reviewed-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>

diff --git a/drivers/gpio/gpiolib-of.c b/drivers/gpio/gpiolib-of.c
index 84e5a9df2344..ed81d9a6316f 100644
--- a/drivers/gpio/gpiolib-of.c
+++ b/drivers/gpio/gpiolib-of.c
@@ -511,6 +511,28 @@ void of_mm_gpiochip_remove(struct of_mm_gpio_chip *mm_gc)
 }
 EXPORT_SYMBOL(of_mm_gpiochip_remove);
 
+static void of_gpiochip_init_valid_mask(struct gpio_chip *chip)
+{
+	int len, i;
+	u32 start, count;
+	struct device_node *np = chip->of_node;
+
+	len = of_property_count_u32_elems(np,  "gpio-reserved-ranges");
+	if (len < 0 || len % 2 != 0)
+		return;
+
+	for (i = 0; i < len; i += 2) {
+		of_property_read_u32_index(np, "gpio-reserved-ranges",
+					   i, &start);
+		of_property_read_u32_index(np, "gpio-reserved-ranges",
+					   i + 1, &count);
+		if (start >= chip->ngpio || start + count >= chip->ngpio)
+			continue;
+
+		bitmap_clear(chip->valid_mask, start, count);
+	}
+};
+
 #ifdef CONFIG_PINCTRL
 static int of_gpiochip_add_pin_range(struct gpio_chip *chip)
 {
@@ -615,6 +637,8 @@ int of_gpiochip_add(struct gpio_chip *chip)
 	if (chip->of_gpio_n_cells > MAX_PHANDLE_ARGS)
 		return -EINVAL;
 
+	of_gpiochip_init_valid_mask(chip);
+
 	status = of_gpiochip_add_pin_range(chip);
 	if (status)
 		return status;

commit ce27fb2c56db6ccfe8099343bb4afdab15e77e7b
Author: Chen-Yu Tsai <wens@csie.org>
Date:   Tue Feb 13 14:08:14 2018 +0800

    gpio: Handle deferred probing in of_find_gpio() properly
    
    of_get_named_gpiod_flags() used directly in of_find_gpio() or indirectly
    through of_find_spi_gpio() or of_find_regulator_gpio() can return
    -EPROBE_DEFER. This gets overwritten by the subsequent of_find_*_gpio()
    calls.
    
    This patch fixes this by trying of_find_spi_gpio() or
    of_find_regulator_gpio() only if deferred probing was not requested by
    the previous of_get_named_gpiod_flags() call.
    
    Fixes: 6a537d48461d ("gpio: of: Support regulator nonstandard GPIO properties")
    Fixes: c85823390215 ("gpio: of: Support SPI nonstandard GPIO properties")
    Signed-off-by: Chen-Yu Tsai <wens@csie.org>
    [Augmented to fit with Maxime's patch]
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>

diff --git a/drivers/gpio/gpiolib-of.c b/drivers/gpio/gpiolib-of.c
index 0ee5dc70268a..84e5a9df2344 100644
--- a/drivers/gpio/gpiolib-of.c
+++ b/drivers/gpio/gpiolib-of.c
@@ -263,7 +263,7 @@ struct gpio_desc *of_find_gpio(struct device *dev, const char *con_id,
 		desc = of_find_spi_gpio(dev, con_id, &of_flags);
 
 	/* Special handling for regulator GPIOs if used */
-	if (IS_ERR(desc))
+	if (IS_ERR(desc) && PTR_ERR(desc) != -EPROBE_DEFER)
 		desc = of_find_regulator_gpio(dev, con_id, &of_flags);
 
 	if (IS_ERR(desc))

commit 6662ae6af82df10259a70c7569b4c12ea7f3ba93
Author: Maxime Ripard <maxime.ripard@bootlin.com>
Date:   Wed Feb 21 09:11:00 2018 +0100

    gpiolib: Keep returning EPROBE_DEFER when we should
    
    Commits c85823390215 ("gpio: of: Support SPI nonstandard GPIO properties")
    and 6a537d48461d ("gpio: of: Support regulator nonstandard GPIO
    properties") have introduced a regression in the way error codes from
    of_get_named_gpiod_flags are handled.
    
    Previously, those errors codes were returned immediately, but the two
    commits mentioned above are now overwriting the error pointer, meaning that
    whatever value has been returned will be dropped in favor of whatever the
    two new functions will return.
    
    This might not be a big deal except for EPROBE_DEFER, on which GPIOlib
    customers will depend on, and that will now be returned as an hard error
    which means that they will not probe anymore, instead of gently deferring
    their probe.
    
    Since EPROBE_DEFER basically means that we have found a valid property but
    there was no GPIO controller registered to handle it, fix this issues by
    returning it as soon as we encounter it.
    
    Fixes: c85823390215 ("gpio: of: Support SPI nonstandard GPIO properties")
    Fixes: 6a537d48461d ("gpio: of: Support regulator nonstandard GPIO properties")
    Signed-off-by: Maxime Ripard <maxime.ripard@bootlin.com>
    [Fold in fix to the fix]
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>

diff --git a/drivers/gpio/gpiolib-of.c b/drivers/gpio/gpiolib-of.c
index 564bb7a31da4..0ee5dc70268a 100644
--- a/drivers/gpio/gpiolib-of.c
+++ b/drivers/gpio/gpiolib-of.c
@@ -241,6 +241,19 @@ struct gpio_desc *of_find_gpio(struct device *dev, const char *con_id,
 
 		desc = of_get_named_gpiod_flags(dev->of_node, prop_name, idx,
 						&of_flags);
+		/*
+		 * -EPROBE_DEFER in our case means that we found a
+		 * valid GPIO property, but no controller has been
+		 * registered so far.
+		 *
+		 * This means we don't need to look any further for
+		 * alternate name conventions, and we should really
+		 * preserve the return code for our user to be able to
+		 * retry probing later.
+		 */
+		if (IS_ERR(desc) && PTR_ERR(desc) == -EPROBE_DEFER)
+			return desc;
+
 		if (!IS_ERR(desc) || (PTR_ERR(desc) != -ENOENT))
 			break;
 	}

commit c11e6f0f04dbc5e0384e7d530b024b2e3ae4bb17
Author: Stephen Boyd <stephen.boyd@linaro.org>
Date:   Tue Jan 30 18:36:18 2018 -0800

    gpio: Support gpio nexus dt bindings
    
    Platforms like 96boards have a standardized connector/expansion
    slot that exposes signals like GPIOs to expansion boards in an
    SoC agnostic way. We'd like the DT overlays for the expansion
    boards to be written once without knowledge of the SoC on the
    other side of the connector. This avoids the unscalable
    combinatorial explosion of a different DT overlay for each
    expansion board and SoC pair.
    
    Now that we have nexus support in the OF core let's change the
    function call here that parses the phandle lists of gpios to use
    the nexus variant. This allows us to remap phandles and their
    arguments through any number of nexus nodes and end up with the
    actual gpio provider being used.
    
    Cc: Pantelis Antoniou <pantelis.antoniou@konsulko.com>
    Acked-by: Linus Walleij <linus.walleij@linaro.org>
    Cc: Mark Brown <broonie@kernel.org>
    Signed-off-by: Stephen Boyd <stephen.boyd@linaro.org>
    Signed-off-by: Rob Herring <robh@kernel.org>

diff --git a/drivers/gpio/gpiolib-of.c b/drivers/gpio/gpiolib-of.c
index 564bb7a31da4..1856ee5e70bb 100644
--- a/drivers/gpio/gpiolib-of.c
+++ b/drivers/gpio/gpiolib-of.c
@@ -111,8 +111,8 @@ struct gpio_desc *of_get_named_gpiod_flags(struct device_node *np,
 	struct gpio_desc *desc;
 	int ret;
 
-	ret = of_parse_phandle_with_args(np, propname, "#gpio-cells", index,
-					 &gpiospec);
+	ret = of_parse_phandle_with_args_map(np, propname, "gpio", index,
+					     &gpiospec);
 	if (ret) {
 		pr_debug("%s: can't parse '%s' property of node '%pOF[%d]'\n",
 			__func__, propname, np, index);

commit 9798f5178f5791f964562eccedcf4dabe02fd825
Merge: 50081e437872 d58f2bf261fd
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Wed Jan 31 12:25:27 2018 -0800

    Merge tag 'gpio-v4.16-1' of git://git.kernel.org/pub/scm/linux/kernel/git/linusw/linux-gpio
    
    Pull GPIO updates from Linus Walleij:
     "The is the bulk of GPIO changes for the v4.16 kernel cycle. It is
      pretty calm this time around I think. I even got time to get to things
      like starting to clean up header includes.
    
      Core changes:
    
       - Disallow open drain and open source flags to be set simultaneously.
         This doesn't make electrical sense, and would the hardware actually
         respond to this setting, the result would be short circuit.
    
       - ACPI GPIO has a new core infrastructure for handling quirks. The
         quirks are there to deal with broken ACPI tables centrally instead
         of pushing the work to individual drivers. In the world of BIOS
         writers, the ACPI tables are perfect. Until they find a mistake in
         it. When such a mistake is found, we can patch it with a quirk. It
         should never happen, the problem is that it happens. So we
         accomodate for it.
    
       - Several documentation updates.
    
       - Revert the patch setting up initial direction state from reading
         the device. This was causing bad things for drivers that can't read
         status on all its pins. It is only affecting debugfs information
         quality.
    
       - Label descriptors with the device name if no explicit label is
         passed in.
    
       - Pave the ground for transitioning SPI and regulators to use GPIO
         descriptors by implementing some quirks in the device tree GPIO
         parsing code.
    
      New drivers:
    
       - New driver for the Access PCIe IDIO 24 family.
    
      Other:
    
       - Major refactorings and improvements to the GPIO mockup driver used
         for test and verification.
    
       - Moved the AXP209 driver over to pin control since it gained a pin
         control back-end. These patches will appear (with the same hashes)
         in the pin control pull request as well.
    
       - Convert the onewire GPIO driver w1-gpio to use descriptors. This is
         merged here since the W1 maintainers send very few pull requests
         and he ACKed it.
    
       - Start to clean up driver headers using <linux/gpio.h> to just use
         <linux/gpio/driver.h> as appropriate"
    
    * tag 'gpio-v4.16-1' of git://git.kernel.org/pub/scm/linux/kernel/git/linusw/linux-gpio: (103 commits)
      gpio: Timestamp events in hardirq handler
      gpio: Fix kernel stack leak to userspace
      gpio: Fix a documentation spelling mistake
      gpio: Documentation update
      gpiolib: remove redundant initialization of pointer desc
      gpio: of: Fix NPE from OF flags
      gpio: stmpe: Delete an unnecessary variable initialisation in stmpe_gpio_probe()
      gpio: stmpe: Move an assignment in stmpe_gpio_probe()
      gpio: stmpe: Improve a size determination in stmpe_gpio_probe()
      gpio: stmpe: Use seq_putc() in stmpe_dbg_show()
      gpio: No NULL owner
      gpio: stmpe: i2c transfer are forbiden in atomic context
      gpio: davinci: Include proper header
      gpio: da905x: Include proper header
      gpio: cs5535: Include proper header
      gpio: crystalcove: Include proper header
      gpio: bt8xx: Include proper header
      gpio: bcm-kona: Include proper header
      gpio: arizona: Include proper header
      gpio: amd8111: Include proper header
      ...

commit 605f2d34ea52a14744fe3c6b43708bce7e2eb690
Author: Linus Walleij <linus.walleij@linaro.org>
Date:   Tue Jan 16 23:44:46 2018 +0100

    gpio: of: Fix NPE from OF flags
    
    Some calls to of_get_named_gpio() calls sets the flags
    argument to NULL because they are not interested in the
    flags. This caused a null pointer exception since we were
    unconditionally using these flags. Fix it.
    
    Fixes: 6a537d48461d ("gpio: of: Support regulator nonstandard GPIO properties")
    Cc: Heiner Kallweit <hkallweit1@gmail.com>
    Reported-by: Heiner Kallweit <hkallweit1@gmail.com>
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>

diff --git a/drivers/gpio/gpiolib-of.c b/drivers/gpio/gpiolib-of.c
index 71ba008b7f46..27e8a339310c 100644
--- a/drivers/gpio/gpiolib-of.c
+++ b/drivers/gpio/gpiolib-of.c
@@ -129,7 +129,8 @@ struct gpio_desc *of_get_named_gpiod_flags(struct device_node *np,
 	if (IS_ERR(desc))
 		goto out;
 
-	of_gpio_flags_quirks(np, flags);
+	if (flags)
+		of_gpio_flags_quirks(np, flags);
 
 	pr_debug("%s: parsed '%s' property of node '%pOF[%d]' - status (%d)\n",
 		 __func__, propname, np, index,

commit a603a2b8d86ee93ee2107da8ca75fd854fd4ff32
Author: Linus Walleij <linus.walleij@linaro.org>
Date:   Sat Dec 30 16:26:36 2017 +0100

    gpio: of: Add special quirk to parse regulator flags
    
    While most GPIOs are indicated to be active low or open drain using
    their twocell flags, we have legacy regulator bindings to take into
    account.
    
    Add a quirk respecting the special boolean active-high and open
    drain flags when parsing regulator nodes for GPIOs.
    
    This makes it possible to get rid of duplicated inversion semantics
    handling in the regulator core and any regulator drivers parsing
    and handling this separately.
    
    Unfortunately the old regulator inversion semantics are specified
    such that the presence or absence of "enable-active-high" solely
    controls the semantics, so we cannot deprecate this in favor
    of the phandle-provided inversion flag, instead any such phandle
    inversion flag provided in the second cell of a GPIO handle must be
    actively ignored, so we print a warning to contain the situation
    and make things easy for the users.
    
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>

diff --git a/drivers/gpio/gpiolib-of.c b/drivers/gpio/gpiolib-of.c
index d2a6656b82cb..71ba008b7f46 100644
--- a/drivers/gpio/gpiolib-of.c
+++ b/drivers/gpio/gpiolib-of.c
@@ -56,6 +56,42 @@ static struct gpio_desc *of_xlate_and_get_gpiod_flags(struct gpio_chip *chip,
 	return gpiochip_get_desc(chip, ret);
 }
 
+static void of_gpio_flags_quirks(struct device_node *np,
+				 enum of_gpio_flags *flags)
+{
+	/*
+	 * Some GPIO fixed regulator quirks.
+	 * Note that active low is the default.
+	 */
+	if (IS_ENABLED(CONFIG_REGULATOR) &&
+	    (of_device_is_compatible(np, "reg-fixed-voltage") ||
+	     of_device_is_compatible(np, "regulator-gpio"))) {
+		/*
+		 * The regulator GPIO handles are specified such that the
+		 * presence or absence of "enable-active-high" solely controls
+		 * the polarity of the GPIO line. Any phandle flags must
+		 * be actively ignored.
+		 */
+		if (*flags & OF_GPIO_ACTIVE_LOW) {
+			pr_warn("%s GPIO handle specifies active low - ignored\n",
+				of_node_full_name(np));
+			*flags &= ~OF_GPIO_ACTIVE_LOW;
+		}
+		if (!of_property_read_bool(np, "enable-active-high"))
+			*flags |= OF_GPIO_ACTIVE_LOW;
+	}
+	/*
+	 * Legacy open drain handling for fixed voltage regulators.
+	 */
+	if (IS_ENABLED(CONFIG_REGULATOR) &&
+	    of_device_is_compatible(np, "reg-fixed-voltage") &&
+	    of_property_read_bool(np, "gpio-open-drain")) {
+		*flags |= (OF_GPIO_SINGLE_ENDED | OF_GPIO_OPEN_DRAIN);
+		pr_info("%s uses legacy open drain flag - update the DTS if you can\n",
+			of_node_full_name(np));
+	}
+}
+
 /**
  * of_get_named_gpiod_flags() - Get a GPIO descriptor and flags for GPIO API
  * @np:		device node to get GPIO from
@@ -93,6 +129,8 @@ struct gpio_desc *of_get_named_gpiod_flags(struct device_node *np,
 	if (IS_ERR(desc))
 		goto out;
 
+	of_gpio_flags_quirks(np, flags);
+
 	pr_debug("%s: parsed '%s' property of node '%pOF[%d]' - status (%d)\n",
 		 __func__, propname, np, index,
 		 PTR_ERR_OR_ZERO(desc));

commit 6a537d48461deacc57c07ed86d9915e5aa4b3539
Author: Linus Walleij <linus.walleij@linaro.org>
Date:   Wed Dec 27 16:37:44 2017 +0100

    gpio: of: Support regulator nonstandard GPIO properties
    
    Before it was clearly established that all GPIO properties in the
    device tree shall be named "foo-gpios" (with the deprecated variant
    "foo-gpio" for single lines) we unfortunately merged a few bindings
    for regulators with random phandle names.
    
    As we want to switch the GPIO regulator driver to using descriptors,
    we need devm_gpiod_get() to return something reasonable when looking
    up these in the device tree.
    
    Put in a special #ifdef:ed kludge to do this special lookup only
    for the regulator case and gets compiled out if we're not enabling
    regulators. Supply a whitelist with properties we accept.
    
    Cc: Rob Herring <robh@kernel.org>
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>

diff --git a/drivers/gpio/gpiolib-of.c b/drivers/gpio/gpiolib-of.c
index 13acd0378884..d2a6656b82cb 100644
--- a/drivers/gpio/gpiolib-of.c
+++ b/drivers/gpio/gpiolib-of.c
@@ -147,6 +147,41 @@ static struct gpio_desc *of_find_spi_gpio(struct device *dev, const char *con_id
 	return desc;
 }
 
+/*
+ * Some regulator bindings happened before we managed to establish that GPIO
+ * properties should be named "foo-gpios" so we have this special kludge for
+ * them.
+ */
+static struct gpio_desc *of_find_regulator_gpio(struct device *dev, const char *con_id,
+						enum of_gpio_flags *of_flags)
+{
+	/* These are the connection IDs we accept as legacy GPIO phandles */
+	const char *whitelist[] = {
+		"wlf,ldoena", /* Arizona */
+		"wlf,ldo1ena", /* WM8994 */
+		"wlf,ldo2ena", /* WM8994 */
+	};
+	struct device_node *np = dev->of_node;
+	struct gpio_desc *desc;
+	int i;
+
+	if (!IS_ENABLED(CONFIG_REGULATOR))
+		return ERR_PTR(-ENOENT);
+
+	if (!con_id)
+		return ERR_PTR(-ENOENT);
+
+	for (i = 0; i < ARRAY_SIZE(whitelist); i++)
+		if (!strcmp(con_id, whitelist[i]))
+			break;
+
+	if (i == ARRAY_SIZE(whitelist))
+		return ERR_PTR(-ENOENT);
+
+	desc = of_get_named_gpiod_flags(np, con_id, 0, of_flags);
+	return desc;
+}
+
 struct gpio_desc *of_find_gpio(struct device *dev, const char *con_id,
 			       unsigned int idx,
 			       enum gpio_lookup_flags *flags)
@@ -175,6 +210,10 @@ struct gpio_desc *of_find_gpio(struct device *dev, const char *con_id,
 	if (IS_ERR(desc))
 		desc = of_find_spi_gpio(dev, con_id, &of_flags);
 
+	/* Special handling for regulator GPIOs if used */
+	if (IS_ERR(desc))
+		desc = of_find_regulator_gpio(dev, con_id, &of_flags);
+
 	if (IS_ERR(desc))
 		return desc;
 

commit c85823390215e52d68d3826df92a447ed31e5c80
Author: Linus Walleij <linus.walleij@linaro.org>
Date:   Wed Dec 27 16:37:44 2017 +0100

    gpio: of: Support SPI nonstandard GPIO properties
    
    Before it was clearly established that all GPIO properties in the
    device tree shall be named "foo-gpios" (with the deprecated variant
    "foo-gpio" for single lines) we unfortunately merged a few bindings
    which named the lines "gpio-foo" instead.
    
    This is most prominent in the GPIO SPI driver in Linux which names
    the lines "gpio-sck", "gpio-mosi" and "gpio-miso".
    
    As we want to switch the GPIO SPI driver to using descriptors, we
    need devm_gpiod_get() to return something reasonable when looking
    up these in the device tree.
    
    Put in a special #ifdef:ed kludge to do this special lookup only
    for the SPI case and gets compiled out if we're not enabling SPI.
    If we have more oddly defined legacy GPIOs like this, they can be
    handled in a similar manner.
    
    Reviewed-by: Rob Herring <robh@kernel.org>
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>

diff --git a/drivers/gpio/gpiolib-of.c b/drivers/gpio/gpiolib-of.c
index 4a2b8d3397c7..13acd0378884 100644
--- a/drivers/gpio/gpiolib-of.c
+++ b/drivers/gpio/gpiolib-of.c
@@ -117,6 +117,36 @@ int of_get_named_gpio_flags(struct device_node *np, const char *list_name,
 }
 EXPORT_SYMBOL(of_get_named_gpio_flags);
 
+/*
+ * The SPI GPIO bindings happened before we managed to establish that GPIO
+ * properties should be named "foo-gpios" so we have this special kludge for
+ * them.
+ */
+static struct gpio_desc *of_find_spi_gpio(struct device *dev, const char *con_id,
+					  enum of_gpio_flags *of_flags)
+{
+	char prop_name[32]; /* 32 is max size of property name */
+	struct device_node *np = dev->of_node;
+	struct gpio_desc *desc;
+
+	/*
+	 * Hopefully the compiler stubs the rest of the function if this
+	 * is false.
+	 */
+	if (!IS_ENABLED(CONFIG_SPI_MASTER))
+		return ERR_PTR(-ENOENT);
+
+	/* Allow this specifically for "spi-gpio" devices */
+	if (!of_device_is_compatible(np, "spi-gpio") || !con_id)
+		return ERR_PTR(-ENOENT);
+
+	/* Will be "gpio-sck", "gpio-mosi" or "gpio-miso" */
+	snprintf(prop_name, sizeof(prop_name), "%s-%s", "gpio", con_id);
+
+	desc = of_get_named_gpiod_flags(np, prop_name, 0, of_flags);
+	return desc;
+}
+
 struct gpio_desc *of_find_gpio(struct device *dev, const char *con_id,
 			       unsigned int idx,
 			       enum gpio_lookup_flags *flags)
@@ -126,6 +156,7 @@ struct gpio_desc *of_find_gpio(struct device *dev, const char *con_id,
 	struct gpio_desc *desc;
 	unsigned int i;
 
+	/* Try GPIO property "foo-gpios" and "foo-gpio" */
 	for (i = 0; i < ARRAY_SIZE(gpio_suffixes); i++) {
 		if (con_id)
 			snprintf(prop_name, sizeof(prop_name), "%s-%s", con_id,
@@ -140,6 +171,10 @@ struct gpio_desc *of_find_gpio(struct device *dev, const char *con_id,
 			break;
 	}
 
+	/* Special handling for SPI GPIOs if used */
+	if (IS_ERR(desc))
+		desc = of_find_spi_gpio(dev, con_id, &of_flags);
+
 	if (IS_ERR(desc))
 		return desc;
 

commit 822703354774ec935169cbbc8d503236bcb54fda
Author: Christophe Leroy <christophe.leroy@c-s.fr>
Date:   Fri Dec 15 15:02:33 2017 +0100

    gpio: fix "gpio-line-names" property retrieval
    
    Following commit 9427ecbed46cc ("gpio: Rework of_gpiochip_set_names()
    to use device property accessors"), "gpio-line-names" DT property is
    not retrieved anymore when chip->parent is not set by the driver.
    This is due to OF based property reads having been replaced by device
    based property reads.
    
    This patch fixes that by making use of
    fwnode_property_read_string_array() instead of
    device_property_read_string_array() and handing over either
    of_fwnode_handle(chip->of_node) or dev_fwnode(chip->parent)
    to that function.
    
    Fixes: 9427ecbed46cc ("gpio: Rework of_gpiochip_set_names() to use device property accessors")
    Cc: stable@vger.kernel.org
    Signed-off-by: Christophe Leroy <christophe.leroy@c-s.fr>
    Acked-by: Mika Westerberg <mika.westerberg@linux.intel.com>
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>

diff --git a/drivers/gpio/gpiolib-of.c b/drivers/gpio/gpiolib-of.c
index e0d59e61b52f..72a0695d2ac3 100644
--- a/drivers/gpio/gpiolib-of.c
+++ b/drivers/gpio/gpiolib-of.c
@@ -493,7 +493,8 @@ int of_gpiochip_add(struct gpio_chip *chip)
 
 	/* If the chip defines names itself, these take precedence */
 	if (!chip->names)
-		devprop_gpiochip_set_names(chip);
+		devprop_gpiochip_set_names(chip,
+					   of_fwnode_handle(chip->of_node));
 
 	of_node_get(chip->of_node);
 

commit e10f72bf4b3e8885c1915a119141481e7fc45ca8
Author: Andrew Jeffery <andrew@aj.id.au>
Date:   Thu Nov 30 14:25:24 2017 +1030

    gpio: gpiolib: Generalise state persistence beyond sleep
    
    General support for state persistence is added to gpiolib with the
    introduction of a new pinconf parameter to propagate the request to
    hardware. The existing persistence support for sleep is adapted to
    include hardware support if the GPIO driver provides it. Persistence
    continues to be enabled by default; in-kernel consumers can opt out, but
    userspace (currently) does not have a choice.
    
    The *_SLEEP_MAY_LOSE_VALUE and *_SLEEP_MAINTAIN_VALUE symbols are
    renamed, dropping the SLEEP prefix to reflect that the concept is no
    longer sleep-specific.  I feel that renaming to just *_MAY_LOSE_VALUE
    could initially be misinterpreted, so I've further changed the symbols
    to *_TRANSITORY and *_PERSISTENT to address this.
    
    The sysfs interface is modified only to keep consistency with the
    chardev interface in enforcing persistence for userspace exports.
    
    Signed-off-by: Andrew Jeffery <andrew@aj.id.au>
    Reviewed-by: Charles Keepax <ckeepax@opensource.cirrus.com>
    Acked-by: Rob Herring <robh@kernel.org>
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>

diff --git a/drivers/gpio/gpiolib-of.c b/drivers/gpio/gpiolib-of.c
index e0d59e61b52f..4a2b8d3397c7 100644
--- a/drivers/gpio/gpiolib-of.c
+++ b/drivers/gpio/gpiolib-of.c
@@ -153,8 +153,8 @@ struct gpio_desc *of_find_gpio(struct device *dev, const char *con_id,
 			*flags |= GPIO_OPEN_SOURCE;
 	}
 
-	if (of_flags & OF_GPIO_SLEEP_MAY_LOSE_VALUE)
-		*flags |= GPIO_SLEEP_MAY_LOSE_VALUE;
+	if (of_flags & OF_GPIO_TRANSITORY)
+		*flags |= GPIO_TRANSITORY;
 
 	return desc;
 }
@@ -214,6 +214,8 @@ static struct gpio_desc *of_parse_own_gpio(struct device_node *np,
 
 	if (xlate_flags & OF_GPIO_ACTIVE_LOW)
 		*lflags |= GPIO_ACTIVE_LOW;
+	if (xlate_flags & OF_GPIO_TRANSITORY)
+		*lflags |= GPIO_TRANSITORY;
 
 	if (of_property_read_bool(np, "input"))
 		*dflags |= GPIOD_IN;

commit 2cbfca66ba5e00606bb0f24aba1e9cd8efe58849
Author: Andrew Jeffery <andrew@aj.id.au>
Date:   Fri Oct 20 13:27:58 2017 +1030

    gpio: Fix loose spelling
    
    Literally.
    
    I expect "lose" was meant here, rather than "loose", though you could feasibly
    use a somewhat uncommon definition of "loose" to mean what would be meant by
    "lose": "Loose the hounds" for instance, as in "Release the hounds".
    Substituting in "value" for "hounds" gives "release the value", and makes some
    sense, but futher substituting back to loose gives "loose the value" which
    overall just seems a bit anachronistic.
    
    Instead, use modern, pragmatic English and save a character.
    
    Cc: Russell Currey <ruscur@russell.cc>
    Signed-off-by: Andrew Jeffery <andrew@aj.id.au>
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>

diff --git a/drivers/gpio/gpiolib-of.c b/drivers/gpio/gpiolib-of.c
index bfcd20699ec8..e0d59e61b52f 100644
--- a/drivers/gpio/gpiolib-of.c
+++ b/drivers/gpio/gpiolib-of.c
@@ -153,8 +153,8 @@ struct gpio_desc *of_find_gpio(struct device *dev, const char *con_id,
 			*flags |= GPIO_OPEN_SOURCE;
 	}
 
-	if (of_flags & OF_GPIO_SLEEP_MAY_LOOSE_VALUE)
-		*flags |= GPIO_SLEEP_MAY_LOOSE_VALUE;
+	if (of_flags & OF_GPIO_SLEEP_MAY_LOSE_VALUE)
+		*flags |= GPIO_SLEEP_MAY_LOSE_VALUE;
 
 	return desc;
 }

commit 67049c505017d7b380e16aa4f4b02344c2be0d55
Author: Thierry Reding <treding@nvidia.com>
Date:   Mon Jul 24 16:57:23 2017 +0200

    gpio: of: Improve kerneldoc
    
    Add descriptions for missing fields and fix up some parameter references
    to match the code.
    
    Signed-off-by: Thierry Reding <treding@nvidia.com>
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>

diff --git a/drivers/gpio/gpiolib-of.c b/drivers/gpio/gpiolib-of.c
index 8cde02ed5fd5..bfcd20699ec8 100644
--- a/drivers/gpio/gpiolib-of.c
+++ b/drivers/gpio/gpiolib-of.c
@@ -273,14 +273,13 @@ static int of_gpiochip_scan_gpios(struct gpio_chip *chip)
 }
 
 /**
- * of_gpio_simple_xlate - translate gpio_spec to the GPIO number and flags
+ * of_gpio_simple_xlate - translate gpiospec to the GPIO number and flags
  * @gc:		pointer to the gpio_chip structure
- * @np:		device node of the GPIO chip
- * @gpio_spec:	gpio specifier as found in the device tree
+ * @gpiospec:	GPIO specifier as found in the device tree
  * @flags:	a flags pointer to fill in
  *
  * This is simple translation function, suitable for the most 1:1 mapped
- * gpio chips. This function performs only one sanity check: whether gpio
+ * GPIO chips. This function performs only one sanity check: whether GPIO
  * is less than ngpios (that is specified in the gpio_chip).
  */
 int of_gpio_simple_xlate(struct gpio_chip *gc,

commit 7eb6ce2f272336ff8337f40fa8668fa04dc2d684
Author: Rob Herring <robh@kernel.org>
Date:   Tue Jul 18 16:43:03 2017 -0500

    gpio: Convert to using %pOF instead of full_name
    
    Now that we have a custom printf format specifier, convert users of
    full_name to use %pOF instead. This is preparation to remove storing
    of the full path string for each node.
    
    Signed-off-by: Rob Herring <robh@kernel.org>
    Cc: Tien Hock Loh <thloh@altera.com>
    Cc: Linus Walleij <linus.walleij@linaro.org>
    Cc: Alexandre Courbot <gnurou@gmail.com>
    Cc: Brian Norris <computersforpeace@gmail.com>
    Cc: Florian Fainelli <f.fainelli@gmail.com>
    Cc: bcm-kernel-feedback-list@broadcom.com
    Cc: Michal Simek <michal.simek@xilinx.com>
    Cc: "Sören Brinkmann" <soren.brinkmann@xilinx.com>
    Cc: linux-gpio@vger.kernel.org
    Cc: linux-arm-kernel@lists.infradead.org
    Acked-by: Gregory Fong <gregory.0xf0@gmail.com>
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>

diff --git a/drivers/gpio/gpiolib-of.c b/drivers/gpio/gpiolib-of.c
index 54ce8dc58ad0..8cde02ed5fd5 100644
--- a/drivers/gpio/gpiolib-of.c
+++ b/drivers/gpio/gpiolib-of.c
@@ -78,8 +78,8 @@ struct gpio_desc *of_get_named_gpiod_flags(struct device_node *np,
 	ret = of_parse_phandle_with_args(np, propname, "#gpio-cells", index,
 					 &gpiospec);
 	if (ret) {
-		pr_debug("%s: can't parse '%s' property of node '%s[%d]'\n",
-			__func__, propname, np->full_name, index);
+		pr_debug("%s: can't parse '%s' property of node '%pOF[%d]'\n",
+			__func__, propname, np, index);
 		return ERR_PTR(ret);
 	}
 
@@ -93,8 +93,8 @@ struct gpio_desc *of_get_named_gpiod_flags(struct device_node *np,
 	if (IS_ERR(desc))
 		goto out;
 
-	pr_debug("%s: parsed '%s' property of node '%s[%d]' - status (%d)\n",
-		 __func__, propname, np->full_name, index,
+	pr_debug("%s: parsed '%s' property of node '%pOF[%d]' - status (%d)\n",
+		 __func__, propname, np, index,
 		 PTR_ERR_OR_ZERO(desc));
 
 out:
@@ -337,7 +337,7 @@ int of_mm_gpiochip_add_data(struct device_node *np,
 	int ret = -ENOMEM;
 	struct gpio_chip *gc = &mm_gc->gc;
 
-	gc->label = kstrdup(np->full_name, GFP_KERNEL);
+	gc->label = kasprintf(GFP_KERNEL, "%pOF", np);
 	if (!gc->label)
 		goto err0;
 
@@ -362,8 +362,7 @@ int of_mm_gpiochip_add_data(struct device_node *np,
 err1:
 	kfree(gc->label);
 err0:
-	pr_err("%s: GPIO chip registration failed with status %d\n",
-	       np->full_name, ret);
+	pr_err("%pOF: GPIO chip registration failed with status %d\n", np, ret);
 	return ret;
 }
 EXPORT_SYMBOL(of_mm_gpiochip_add_data);
@@ -418,8 +417,8 @@ static int of_gpiochip_add_pin_range(struct gpio_chip *chip)
 						group_names_propname,
 						index, &name);
 				if (strlen(name)) {
-					pr_err("%s: Group name of numeric GPIO ranges must be the empty string.\n",
-						np->full_name);
+					pr_err("%pOF: Group name of numeric GPIO ranges must be the empty string.\n",
+						np);
 					break;
 				}
 			}
@@ -434,14 +433,14 @@ static int of_gpiochip_add_pin_range(struct gpio_chip *chip)
 		} else {
 			/* npins == 0: special range */
 			if (pinspec.args[1]) {
-				pr_err("%s: Illegal gpio-range format.\n",
-					np->full_name);
+				pr_err("%pOF: Illegal gpio-range format.\n",
+					np);
 				break;
 			}
 
 			if (!group_names) {
-				pr_err("%s: GPIO group range requested but no %s property.\n",
-					np->full_name, group_names_propname);
+				pr_err("%pOF: GPIO group range requested but no %s property.\n",
+					np, group_names_propname);
 				break;
 			}
 
@@ -452,8 +451,8 @@ static int of_gpiochip_add_pin_range(struct gpio_chip *chip)
 				break;
 
 			if (!strlen(name)) {
-				pr_err("%s: Group name of GPIO group range cannot be the empty string.\n",
-				np->full_name);
+				pr_err("%pOF: Group name of GPIO group range cannot be the empty string.\n",
+				np);
 				break;
 			}
 

commit ead066e682af74d8bca000da90e05b5dafa6fbeb
Author: Geert Uytterhoeven <geert+renesas@glider.be>
Date:   Thu Jun 1 12:30:01 2017 +0200

    gpio: of: Spelling: s/retures/returns/
    
    Signed-off-by: Geert Uytterhoeven <geert+renesas@glider.be>
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>

diff --git a/drivers/gpio/gpiolib-of.c b/drivers/gpio/gpiolib-of.c
index e2abf0eabaf8..54ce8dc58ad0 100644
--- a/drivers/gpio/gpiolib-of.c
+++ b/drivers/gpio/gpiolib-of.c
@@ -239,7 +239,7 @@ static struct gpio_desc *of_parse_own_gpio(struct device_node *np,
  *
  * This is only used by of_gpiochip_add to request/set GPIO initial
  * configuration.
- * It retures error if it fails otherwise 0 on success.
+ * It returns error if it fails otherwise 0 on success.
  */
 static int of_gpiochip_scan_gpios(struct gpio_chip *chip)
 {

commit 05f479bf7d239f01ff6546f2bdeb14ad0fe65601
Author: Charles Keepax <ckeepax@opensource.wolfsonmicro.com>
Date:   Tue May 23 15:47:29 2017 +0100

    gpio: Add new flags to control sleep status of GPIOs
    
    Add new flags to allow users to specify that they are not concerned with
    the status of GPIOs whilst in a sleep/low power state.
    
    Signed-off-by: Charles Keepax <ckeepax@opensource.wolfsonmicro.com>
    Acked-by: Rob Herring <robh@kernel.org>
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>

diff --git a/drivers/gpio/gpiolib-of.c b/drivers/gpio/gpiolib-of.c
index b13b7c7c335f..e2abf0eabaf8 100644
--- a/drivers/gpio/gpiolib-of.c
+++ b/drivers/gpio/gpiolib-of.c
@@ -153,6 +153,9 @@ struct gpio_desc *of_find_gpio(struct device *dev, const char *con_id,
 			*flags |= GPIO_OPEN_SOURCE;
 	}
 
+	if (of_flags & OF_GPIO_SLEEP_MAY_LOOSE_VALUE)
+		*flags |= GPIO_SLEEP_MAY_LOOSE_VALUE;
+
 	return desc;
 }
 

commit 4c0facddb7d88c78c8bd977c16faa647f079ccda
Author: Laxman Dewangan <ldewangan@nvidia.com>
Date:   Thu Apr 6 19:05:52 2017 +0530

    gpio: core: Decouple open drain/source flag with active low/high
    
    Currently, the GPIO interface is said to Open Drain if it is Single
    Ended and active LOW. Similarly, it is said as Open Source if it is
    Single Ended and active HIGH.
    
    The active HIGH/LOW is used in the interface for setting the pin
    state to HIGH or LOW when enabling/disabling the interface.
    
    In Open Drain interface, pin is set to HIGH by putting pin in
    high impedance and LOW by driving to the LOW.
    
    In Open Source interface, pin is set to HIGH by driving pin to
    HIGH and set to LOW by putting pin in high impedance.
    
    With above, the Open Drain/Source is unrelated to the active LOW/HIGH
    in interface. There is interface where the enable/disable of interface
    is ether active LOW or HIGH but it is Open Drain type.
    
    Hence decouple the Open Drain with Single Ended + Active LOW and
    Open Source with Single Ended + Active HIGH.
    
    Adding different flag for the Open Drain/Open Source which is valid
    only when Single ended flag is enabled.
    
    Signed-off-by: Laxman Dewangan <ldewangan@nvidia.com>
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>

diff --git a/drivers/gpio/gpiolib-of.c b/drivers/gpio/gpiolib-of.c
index 975b9f6cf408..b13b7c7c335f 100644
--- a/drivers/gpio/gpiolib-of.c
+++ b/drivers/gpio/gpiolib-of.c
@@ -147,7 +147,7 @@ struct gpio_desc *of_find_gpio(struct device *dev, const char *con_id,
 		*flags |= GPIO_ACTIVE_LOW;
 
 	if (of_flags & OF_GPIO_SINGLE_ENDED) {
-		if (of_flags & OF_GPIO_ACTIVE_LOW)
+		if (of_flags & OF_GPIO_OPEN_DRAIN)
 			*flags |= GPIO_OPEN_DRAIN;
 		else
 			*flags |= GPIO_OPEN_SOURCE;

commit a79fead50f06886311f37777d03b20b058749ce1
Author: Geert Uytterhoeven <geert@linux-m68k.org>
Date:   Mon Dec 19 19:21:34 2016 +0100

    gpio: of: Add support for multiple GPIOs in a single GPIO hog
    
    When listing multiple GPIOs in the "gpios" property of a GPIO hog, only
    the first GPIO is affected.  The user is left clueless about the
    dysfunctioning of the other GPIOs specified.
    
    Fix this by adding and documenting support for specifying multiple
    GPIOs in a single GPIO hog.
    
    Signed-off-by: Geert Uytterhoeven <geert@linux-m68k.org>
    Acked-by: Rob Herring <robh@kernel.org>
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>

diff --git a/drivers/gpio/gpiolib-of.c b/drivers/gpio/gpiolib-of.c
index 92b185f19232..975b9f6cf408 100644
--- a/drivers/gpio/gpiolib-of.c
+++ b/drivers/gpio/gpiolib-of.c
@@ -160,6 +160,7 @@ struct gpio_desc *of_find_gpio(struct device *dev, const char *con_id,
  * of_parse_own_gpio() - Get a GPIO hog descriptor, names and flags for GPIO API
  * @np:		device node to get GPIO from
  * @chip:	GPIO chip whose hog is parsed
+ * @idx:	Index of the GPIO to parse
  * @name:	GPIO line name
  * @lflags:	gpio_lookup_flags - returned from of_find_gpio() or
  *		of_parse_own_gpio()
@@ -170,7 +171,7 @@ struct gpio_desc *of_find_gpio(struct device *dev, const char *con_id,
  */
 static struct gpio_desc *of_parse_own_gpio(struct device_node *np,
 					   struct gpio_chip *chip,
-					   const char **name,
+					   unsigned int idx, const char **name,
 					   enum gpio_lookup_flags *lflags,
 					   enum gpiod_flags *dflags)
 {
@@ -178,6 +179,7 @@ static struct gpio_desc *of_parse_own_gpio(struct device_node *np,
 	enum of_gpio_flags xlate_flags;
 	struct of_phandle_args gpiospec;
 	struct gpio_desc *desc;
+	unsigned int i;
 	u32 tmp;
 	int ret;
 
@@ -196,9 +198,12 @@ static struct gpio_desc *of_parse_own_gpio(struct device_node *np,
 	gpiospec.np = chip_np;
 	gpiospec.args_count = tmp;
 
-	ret = of_property_read_u32_array(np, "gpios", gpiospec.args, tmp);
-	if (ret)
-		return ERR_PTR(ret);
+	for (i = 0; i < tmp; i++) {
+		ret = of_property_read_u32_index(np, "gpios", idx * tmp + i,
+						 &gpiospec.args[i]);
+		if (ret)
+			return ERR_PTR(ret);
+	}
 
 	desc = of_xlate_and_get_gpiod_flags(chip, &gpiospec, &xlate_flags);
 	if (IS_ERR(desc))
@@ -240,20 +245,24 @@ static int of_gpiochip_scan_gpios(struct gpio_chip *chip)
 	const char *name;
 	enum gpio_lookup_flags lflags;
 	enum gpiod_flags dflags;
+	unsigned int i;
 	int ret;
 
 	for_each_available_child_of_node(chip->of_node, np) {
 		if (!of_property_read_bool(np, "gpio-hog"))
 			continue;
 
-		desc = of_parse_own_gpio(np, chip, &name, &lflags, &dflags);
-		if (IS_ERR(desc))
-			continue;
+		for (i = 0;; i++) {
+			desc = of_parse_own_gpio(np, chip, i, &name, &lflags,
+						 &dflags);
+			if (IS_ERR(desc))
+				break;
 
-		ret = gpiod_hog(desc, name, lflags, dflags);
-		if (ret < 0) {
-			of_node_put(np);
-			return ret;
+			ret = gpiod_hog(desc, name, lflags, dflags);
+			if (ret < 0) {
+				of_node_put(np);
+				return ret;
+			}
 		}
 	}
 

commit 061ad5038ca5ac75419204b216bddc2806008ead
Merge: e7aa8c2eb11b acf1fcf77247
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Tue Dec 13 07:54:57 2016 -0800

    Merge tag 'gpio-v4.10-1' of git://git.kernel.org/pub/scm/linux/kernel/git/linusw/linux-gpio
    
    Pull GPIO updates from Luinus Walleij:
     "Bulk GPIO changes for the v4.10 kernel cycle:
    
      Core changes:
    
       - Simplify threaded interrupt handling: instead of passing numbed
         parameters to gpiochip_irqchip_add_chained() we create a new call:
         gpiochip_irqchip_add_nested() so the two types are clearly
         semantically different. Also make sure that all nested chips call
         gpiochip_set_nested_irqchip() which is necessary for IRQ resend to
         work properly if it happens.
    
       - Return error on seek operations for the chardev.
    
       - Clamp values set as part of gpio[d]_direction_output() so that
         anything != 0 will be send down to the driver as "1" not the value
         passed in.
    
       - ACPI can now support naming of GPIO lines, hogs and holes in the
         GPIO lists.
    
      New drivers:
    
       - The SX150x driver was deemed unfit for the GPIO subsystem and was
         moved over to a combined GPIO+pinctrl driver in the pinctrl
         subsystem.
    
      New features:
    
       - Various cleanups to various drivers"
    
    * tag 'gpio-v4.10-1' of git://git.kernel.org/pub/scm/linux/kernel/git/linusw/linux-gpio: (49 commits)
      gpio: merrifield: Implement gpio_get_direction callback
      gpio: merrifield: Add support for hardware debouncer
      gpio: chardev: Return error for seek operations
      gpio: arizona: Tidy up probe error path
      gpio: arizona: Remove pointless set of platform drvdata
      gpio: pl061: delete platform data handling
      gpio: pl061: move platform data into driver
      gpio: pl061: rename variable from chip to pl061
      gpio: pl061: rename state container struct
      gpio: pl061: use local state for parent IRQ storage
      gpio: set explicit nesting on drivers
      gpio: simplify adding threaded interrupts
      gpio: vf610: use builtin_platform_driver
      gpio: axp209: use correct register for GPIO input status
      gpio: stmpe: fix interrupt handling bug
      gpio: em: depnd on ARCH_SHMOBILE
      gpio: zx: depend on ARCH_ZX
      gpio: x86: update config dependencies for x86 specific hardware
      gpio: mb86s7x: use builtin_platform_driver
      gpio: etraxfs: use builtin_platform_driver
      ...

commit c7e9d39831a31682285cc31ddf7dd06c0fe59138
Author: Masahiro Yamada <yamada.masahiro@socionext.com>
Date:   Tue Oct 25 10:47:44 2016 +0900

    gpio: of: fix GPIO drivers with multiple gpio_chip for a single node
    
    Sylvain Lemieux reports the LPC32xx GPIO driver is broken since
    commit 762c2e46c059 ("gpio: of: remove of_gpiochip_and_xlate() and
    struct gg_data").  Probably, gpio-etraxfs.c and gpio-davinci.c are
    broken too.
    
    Those drivers register multiple gpio_chip that are associated to a
    single OF node, and their own .of_xlate() checks if the passed
    gpio_chip is valid.
    
    Now, the problem is of_find_gpiochip_by_node() returns the first
    gpio_chip found to match the given node.  So, .of_xlate() fails,
    except for the first GPIO bank.
    
    Reverting the commit could be a solution, but I do not want to go
    back to the mess of struct gg_data.  Another solution here is to
    take the match by a node pointer and the success of .of_xlate().
    It is a bit clumsy to call .of_xlate twice; for gpio_chip matching
    and for really getting the gpio_desc index.  Perhaps, our long-term
    goal might be to convert the drivers to single chip registration,
    but this commit will solve the problem until then.
    
    Fixes: 762c2e46c059 ("gpio: of: remove of_gpiochip_and_xlate() and struct gg_data")
    Signed-off-by: Masahiro Yamada <yamada.masahiro@socionext.com>
    Reported-by: Sylvain Lemieux <slemieux.tyco@gmail.com>
    Tested-by: David Lechner <david@lechnology.com>
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>

diff --git a/drivers/gpio/gpiolib-of.c b/drivers/gpio/gpiolib-of.c
index ecad3f0e3b77..193f15d50bba 100644
--- a/drivers/gpio/gpiolib-of.c
+++ b/drivers/gpio/gpiolib-of.c
@@ -26,14 +26,18 @@
 
 #include "gpiolib.h"
 
-static int of_gpiochip_match_node(struct gpio_chip *chip, void *data)
+static int of_gpiochip_match_node_and_xlate(struct gpio_chip *chip, void *data)
 {
-	return chip->gpiodev->dev.of_node == data;
+	struct of_phandle_args *gpiospec = data;
+
+	return chip->gpiodev->dev.of_node == gpiospec->np &&
+				chip->of_xlate(chip, gpiospec, NULL) >= 0;
 }
 
-static struct gpio_chip *of_find_gpiochip_by_node(struct device_node *np)
+static struct gpio_chip *of_find_gpiochip_by_xlate(
+					struct of_phandle_args *gpiospec)
 {
-	return gpiochip_find(np, of_gpiochip_match_node);
+	return gpiochip_find(gpiospec, of_gpiochip_match_node_and_xlate);
 }
 
 static struct gpio_desc *of_xlate_and_get_gpiod_flags(struct gpio_chip *chip,
@@ -79,7 +83,7 @@ struct gpio_desc *of_get_named_gpiod_flags(struct device_node *np,
 		return ERR_PTR(ret);
 	}
 
-	chip = of_find_gpiochip_by_node(gpiospec.np);
+	chip = of_find_gpiochip_by_xlate(&gpiospec);
 	if (!chip) {
 		desc = ERR_PTR(-EPROBE_DEFER);
 		goto out;

commit 09e258af4edaa10ee9aa3164923ee07d5863d637
Author: Wei Yongjun <weiyongjun1@huawei.com>
Date:   Sat Oct 29 16:13:52 2016 +0000

    gpio: of: add missing of_node_put() in of_gpiochip_scan_gpios()
    
    When terminating for_each_available_child_of_node() iteration
    with break or return, of_node_put() should be used to prevent
    stale device node references from being left behind.
    
    This is detected by Coccinelle semantic patch.
    
    Signed-off-by: Wei Yongjun <weiyongjun1@huawei.com>
    Reviewed-by: Vladimir Zapolskiy <vladimir_zapolskiy@mentor.com>
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>

diff --git a/drivers/gpio/gpiolib-of.c b/drivers/gpio/gpiolib-of.c
index 3fa4e84b4327..5236966b1bdf 100644
--- a/drivers/gpio/gpiolib-of.c
+++ b/drivers/gpio/gpiolib-of.c
@@ -247,8 +247,10 @@ static int of_gpiochip_scan_gpios(struct gpio_chip *chip)
 			continue;
 
 		ret = gpiod_hog(desc, name, lflags, dflags);
-		if (ret < 0)
+		if (ret < 0) {
+			of_node_put(np);
 			return ret;
+		}
 	}
 
 	return 0;

commit 9427ecbed46cc8425338084ae42ce8749566586f
Author: Mika Westerberg <mika.westerberg@linux.intel.com>
Date:   Fri Oct 21 17:21:31 2016 +0300

    gpio: Rework of_gpiochip_set_names() to use device property accessors
    
    In order to use "gpio-line-names" property in systems not having DT as
    their boot firmware, rework of_gpiochip_set_names() to use device property
    accessors. This reworked function is placed in a separate file making it
    clear it deals with universal device properties.
    
    Signed-off-by: Mika Westerberg <mika.westerberg@linux.intel.com>
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>

diff --git a/drivers/gpio/gpiolib-of.c b/drivers/gpio/gpiolib-of.c
index ecad3f0e3b77..3fa4e84b4327 100644
--- a/drivers/gpio/gpiolib-of.c
+++ b/drivers/gpio/gpiolib-of.c
@@ -221,51 +221,6 @@ static struct gpio_desc *of_parse_own_gpio(struct device_node *np,
 	return desc;
 }
 
-/**
- * of_gpiochip_set_names() - set up the names of the lines
- * @chip: GPIO chip whose lines should be named, if possible
- */
-static void of_gpiochip_set_names(struct gpio_chip *gc)
-{
-	struct gpio_device *gdev = gc->gpiodev;
-	struct device_node *np = gc->of_node;
-	int i;
-	int nstrings;
-
-	nstrings = of_property_count_strings(np, "gpio-line-names");
-	if (nstrings <= 0)
-		/* Lines names not present */
-		return;
-
-	/* This is normally not what you want */
-	if (gdev->ngpio != nstrings)
-		dev_info(&gdev->dev, "gpio-line-names specifies %d line "
-			 "names but there are %d lines on the chip\n",
-			 nstrings, gdev->ngpio);
-
-	/*
-	 * Make sure to not index beyond the end of the number of descriptors
-	 * of the GPIO device.
-	 */
-	for (i = 0; i < gdev->ngpio; i++) {
-		const char *name;
-		int ret;
-
-		ret = of_property_read_string_index(np,
-						    "gpio-line-names",
-						    i,
-						    &name);
-		if (ret) {
-			if (ret != -ENODATA)
-                                dev_err(&gdev->dev,
-                                        "unable to name line %d: %d\n",
-                                        i, ret);
-			break;
-		}
-		gdev->descs[i].name = name;
-	}
-}
-
 /**
  * of_gpiochip_scan_gpios - Scan gpio-controller for gpio definitions
  * @chip:	gpio chip to act on
@@ -522,7 +477,7 @@ int of_gpiochip_add(struct gpio_chip *chip)
 
 	/* If the chip defines names itself, these take precedence */
 	if (!chip->names)
-		of_gpiochip_set_names(chip);
+		devprop_gpiochip_set_names(chip);
 
 	of_node_get(chip->of_node);
 

commit 6a497e9d5828120cf55c2aea508176d94cf7f5ba
Merge: d268dbe76a53 e08529406623
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Wed Oct 5 11:49:09 2016 -0700

    Merge tag 'gpio-v4.9-1' of git://git.kernel.org/pub/scm/linux/kernel/git/linusw/linux-gpio
    
    Pull GPIO updates from Linus Walleij:
     "This is the bulk of GPIO changes for the v4.9 series:
    
      Subsystem improvements:
    
       - do away with the last users of the obsolete Kconfig options
         ARCH_REQUIRE_GPIOLIB and ARCH_WANT_OPTIONAL_GPIOLIB (the latter
         always sounded like an item on a wishlist to Santa Claus to me). We
         can now select GPIOLIB and be done with it, for all archs. After
         some struggle it even work on UM. Not that it has GPIO, but if it
         wants to, it can select the library.
    
       - continued efforts to make drivers properly either tristate or bool.
    
       - introduce a warning for drivers assigning default triggers to their
         irqchip lines when probed from device tree, so we find and fix
         these ambigous drivers. It is agreed that in the OF config path,
         the device tree defines trigger characteristics.
    
       - the same warning, mutatis mutandis, for ACPI-probed GPIO irqchips.
    
       - we introduce the ability to mark certain IRQ lines as "unusable" as
         they can be taken by BIOS/firmware, unrouted in silicon and
         generally nasty if you use them, and such things. This is put to
         good use in the STMPE driver and also in the Cherryview pin control
         driver.
    
       - a new "mockup" virtual GPIO device that can be used for testing.
         The plan is to add unit tests under tools/* for exercising this
         device and verify that the kernel code paths are working as they
         should.
    
       - make memory-mapped I/O-drivers depend on HAS_IOMEM. This was
         implicit all the time, but when people started building UM with
         allyesconfig or allmodconfig it exploded in their face.
    
       - move some stray bits of device tree and ACPI HW description
         callbacks down into their respective implementation silo. These
         were causing issues when compiling on !HAS_IOMEM as well, so now
         eventually UM compiles the GPIOLIB library if it wants to.
    
      New drivers:
    
       - new driver for the Aspeed GPIO front-end companion to the pin
         controller merged through the pin control tree.
    
       - new driver for the LP873x PMIC GPIO portions.
    
       - new driver for Technologic Systems' I2C FPGA GPIO such as TS4900,
         TS-7970, TS-7990 and TS-4100.
    
       - new driver for the Broadcom BCM63xx series including BCM6338 and
         BCM6345.
    
       - new driver for the Intel WhiskeyCove PMIC GPIO.
    
       - new driver for the Allwinner AXP209 PMIC GPIO portions.
    
       - new driver for Diamond Systems 48 line GPIO-MM, another of these
         port-mapped I/O expansion cards.
    
       - support the STMicroelectronics STMPE1600 variant in the STMPE
         driver.
    
      Driver improvements:
    
       - the STMPE driver now supports rising/falling edge detection
         properly for IRQs.
    
       - the PCA954x will now fetch and enable its VCC regulator properly.
    
       - major rework of the PCA953x driver with the goal of eventually
         switching it over to use regmap and thus modernize it even more.
    
       - switch the IOP driver to use the generic MMIO GPIO library.
    
       - move the ages old HTC EGPIO (extended GPIO) GPIO expander driver
         over to this subsystem from MFD, achieveing some separation of
         concerns"
    
    * tag 'gpio-v4.9-1' of git://git.kernel.org/pub/scm/linux/kernel/git/linusw/linux-gpio: (81 commits)
      gpio: add missing static inline
      gpio: OF: localize some gpiochip init functions
      gpio: acpi: separation of concerns
      gpio: OF: separation of concerns
      gpio: make memory-mapped drivers depend on HAS_IOMEM
      gpio: stmpe: use BIT() macro
      gpio: stmpe: forbid unused lines to be mapped as IRQs
      mfd/gpio: Move HTC GPIO driver to GPIO subsystem
      gpio: MAINTAINERS: Add an entry for GPIO mockup driver
      gpio/mockup: add virtual gpio device
      gpio: Added zynq specific check for special pins on bank zero
      gpio: axp209: Implement get_direction
      gpio: aspeed: remove redundant return value check
      gpio: loongson1: remove redundant return value check
      ARM: omap2: fix missing include
      gpio: tc3589x: fix up complaints on unsigned
      gpio: tc3589x: add .get_direction() and small cleanup
      gpio: f7188x: use gpiochip_get_data instead of container_of
      gpio: tps65218: use devm_gpiochip_add_data() for gpio registration
      gpio: aspeed: fix return value check in aspeed_gpio_probe()
      ...

commit ea713bc450054aed3114da74bf76cfda64b698d0
Author: Linus Walleij <linus.walleij@linaro.org>
Date:   Mon Oct 3 10:09:40 2016 +0200

    gpio: OF: separation of concerns
    
    The generic GPIO library directly implement code for of_find_gpio()
    which is only used with CONFIG_OF and causes compilation problems
    on archs that do not even have stubs for OF functions, especially
    on UM that does not implement any IO remap functions.
    
    Move the function to gpiolib-of.c, implement a static inline stub
    in gpiolib.h returning PTR_ERR(-ENOENT) if CONFIG_OF_GPIO is not
    set and be done with it.
    
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>

diff --git a/drivers/gpio/gpiolib-of.c b/drivers/gpio/gpiolib-of.c
index 75e7b3919ea7..33b05c8de42f 100644
--- a/drivers/gpio/gpiolib-of.c
+++ b/drivers/gpio/gpiolib-of.c
@@ -114,6 +114,45 @@ int of_get_named_gpio_flags(struct device_node *np, const char *list_name,
 }
 EXPORT_SYMBOL(of_get_named_gpio_flags);
 
+struct gpio_desc *of_find_gpio(struct device *dev, const char *con_id,
+			       unsigned int idx,
+			       enum gpio_lookup_flags *flags)
+{
+	char prop_name[32]; /* 32 is max size of property name */
+	enum of_gpio_flags of_flags;
+	struct gpio_desc *desc;
+	unsigned int i;
+
+	for (i = 0; i < ARRAY_SIZE(gpio_suffixes); i++) {
+		if (con_id)
+			snprintf(prop_name, sizeof(prop_name), "%s-%s", con_id,
+				 gpio_suffixes[i]);
+		else
+			snprintf(prop_name, sizeof(prop_name), "%s",
+				 gpio_suffixes[i]);
+
+		desc = of_get_named_gpiod_flags(dev->of_node, prop_name, idx,
+						&of_flags);
+		if (!IS_ERR(desc) || (PTR_ERR(desc) != -ENOENT))
+			break;
+	}
+
+	if (IS_ERR(desc))
+		return desc;
+
+	if (of_flags & OF_GPIO_ACTIVE_LOW)
+		*flags |= GPIO_ACTIVE_LOW;
+
+	if (of_flags & OF_GPIO_SINGLE_ENDED) {
+		if (of_flags & OF_GPIO_ACTIVE_LOW)
+			*flags |= GPIO_OPEN_DRAIN;
+		else
+			*flags |= GPIO_OPEN_SOURCE;
+	}
+
+	return desc;
+}
+
 /**
  * of_parse_own_gpio() - Get a GPIO hog descriptor, names and flags for GPIO API
  * @np:		device node to get GPIO from

commit c6c864993d9a20f8d7cacb4feaac5c46a2f2e4db
Author: Linus Walleij <linus.walleij@linaro.org>
Date:   Wed Aug 24 13:51:33 2016 +0200

    Revert "gpio: include <linux/io-mapping.h> in gpiolib-of"
    
    This reverts commit 7d4defe21c682c934a19fce1ba8b54b7bde61b08.
    
    The commit was pointless, manically trembling in the dark for
    a solution. The real fixes are:
    
    commit 048c28c91e56
    ("gpio: make any OF dependent driver depend on OF_GPIO")
    commit 2527ecc9195e
    ("gpio: Fix OF build problem on UM")
    
    Reported-by: Chris Wilson <chris@chris-wilson.co.uk>
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>

diff --git a/drivers/gpio/gpiolib-of.c b/drivers/gpio/gpiolib-of.c
index 75e7b3919ea7..a28feb3edf33 100644
--- a/drivers/gpio/gpiolib-of.c
+++ b/drivers/gpio/gpiolib-of.c
@@ -16,7 +16,6 @@
 #include <linux/errno.h>
 #include <linux/module.h>
 #include <linux/io.h>
-#include <linux/io-mapping.h>
 #include <linux/gpio/consumer.h>
 #include <linux/of.h>
 #include <linux/of_address.h>

commit 1cd04d293c818687795b83cd8f2626bd4662feeb
Merge: 9c1958fc326a 224f9e6d538c
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Tue Jul 26 19:16:01 2016 -0700

    Merge tag 'gpio-v4.8-1' of git://git.kernel.org/pub/scm/linux/kernel/git/linusw/linux-gpio
    
    Pull GPIO updates from Linus Walleij:
     "This is the bulk of GPIO changes for the v4.8 kernel cycle.  The big
      news is the completion of the chardev ABI which I'm very happy about
      and apart from that it's an ordinary, quite busy cycle.  The details
      are below.
    
      The patches are tested in linux-next for some time, patches to other
      subsystem mostly have ACKs.
    
      I got overly ambitious with configureing lines as input for IRQ lines
      but it turns out that some controllers have their interrupt-enable and
      input-enabling in orthogonal settings so the assumption that all IRQ
      lines are input lines does not hold.  Oh well, revert and back to the
      drawing board with that.
    
      Core changes:
    
       - The big item is of course the completion of the character device
         ABI.  It has now replaced and surpassed the former unmaintainable
         sysfs ABI: we can now hammer (bitbang) individual lines or sets of
         lines and read individual lines or sets of lines from userspace,
         and we can also register to listen to GPIO events from userspace.
    
         As a tie-in we have two new tools in tools/gpio: gpio-hammer and
         gpio-event-mon that illustrate the proper use of the new ABI.  As
         someone said: the wild west days of GPIO are now over.
    
       - Continued to remove the pointless ARCH_[WANT_OPTIONAL|REQUIRE]_GPIOLIB
         Kconfig symbols.  I'm patching hexagon, openrisc, powerpc, sh,
         unicore, ia64 and microblaze.  These are either ACKed by their
         maintainers or patched anyways after a grace period and no response
         from maintainers.
    
         Some archs (ARM) come in from their trees, and others (x86) are
         still not fixed, so I might send a second pull request to root it
         out later in this merge window, or just defer to v4.9.
    
       - The GPIO tools are moved to the tools build system.
    
      New drivers:
    
       - New driver for the MAX77620/MAX20024.
    
       - New driver for the Intel Merrifield.
    
       - Enabled PCA953x for the TI PCA9536.
    
       - Enabled PCA953x for the Intel Edison.
    
       - Enabled R8A7792 in the RCAR driver.
    
      Driver improvements:
    
       - The STMPE and F7188x now supports the .get_direction() callback.
    
       - The Xilinx driver supports setting multiple lines at once.
    
       - ACPI support for the Vulcan GPIO controller.
    
       - The MMIO GPIO driver supports device tree probing.
    
       - The Acer One 10 is supported through the _DEP ACPI attribute.
    
      Cleanups:
    
       - A major cleanup of the OF/DT support code.  It is way easier to
         read and understand now, probably this improves performance too.
    
       - Drop a few redundant .owner assignments.
    
       - Remove CLPS711x boardfile support: we are 100% DT"
    
    * tag 'gpio-v4.8-1' of git://git.kernel.org/pub/scm/linux/kernel/git/linusw/linux-gpio: (67 commits)
      MAINTAINERS: Add INTEL MERRIFIELD GPIO entry
      gpio: dwapb: add missing fwnode_handle_put() in dwapb_gpio_get_pdata()
      gpio: merrifield: Protect irq_ack() and gpio_set() by lock
      gpio: merrifield: Introduce GPIO driver to support Merrifield
      gpio: intel-mid: Make it depend to X86_INTEL_MID
      gpio: intel-mid: Sort header block alphabetically
      gpio: intel-mid: Remove potentially harmful code
      gpio: rcar: add R8A7792 support
      gpiolib: remove duplicated include from gpiolib.c
      Revert "gpio: convince line to become input in irq helper"
      gpiolib: of_find_gpio(): Don't discard errors
      gpio: of: Allow overriding the device node
      gpio: free handles in fringe cases
      gpio: tps65218: Add platform_device_id table
      gpio: max77620: get gpio value based on direction
      gpio: lynxpoint: avoid potential warning on error path
      tools/gpio: add install section
      tools/gpio: move to tools buildsystem
      gpio: intel-mid: switch to devm_gpiochip_add_data()
      gpio: 74x164: Use spi_write() helper instead of open coding
      ...

commit 99468c1af913bb5662c223b68e783b4bf9200184
Author: Masahiro Yamada <yamada.masahiro@socionext.com>
Date:   Tue Jun 14 19:07:07 2016 +0900

    gpio: of: factor out common code to a new helper function
    
    The conversion from a DT spec to struct gpio_desc is common between
    of_get_named_gpiod_flags() and of_parse_own_gpio().  Factor out the
    common code to a new helper, of_xlate_and_get_gpiod_flags().
    
    Signed-off-by: Masahiro Yamada <yamada.masahiro@socionext.com>
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>

diff --git a/drivers/gpio/gpiolib-of.c b/drivers/gpio/gpiolib-of.c
index 9f86275a57b5..a28feb3edf33 100644
--- a/drivers/gpio/gpiolib-of.c
+++ b/drivers/gpio/gpiolib-of.c
@@ -36,6 +36,22 @@ static struct gpio_chip *of_find_gpiochip_by_node(struct device_node *np)
 	return gpiochip_find(np, of_gpiochip_match_node);
 }
 
+static struct gpio_desc *of_xlate_and_get_gpiod_flags(struct gpio_chip *chip,
+					struct of_phandle_args *gpiospec,
+					enum of_gpio_flags *flags)
+{
+	int ret;
+
+	if (chip->of_gpio_n_cells != gpiospec->args_count)
+		return ERR_PTR(-EINVAL);
+
+	ret = chip->of_xlate(chip, gpiospec, flags);
+	if (ret < 0)
+		return ERR_PTR(ret);
+
+	return gpiochip_get_desc(chip, ret);
+}
+
 /**
  * of_get_named_gpiod_flags() - Get a GPIO descriptor and flags for GPIO API
  * @np:		device node to get GPIO from
@@ -68,18 +84,8 @@ struct gpio_desc *of_get_named_gpiod_flags(struct device_node *np,
 		desc = ERR_PTR(-EPROBE_DEFER);
 		goto out;
 	}
-	if (chip->of_gpio_n_cells != gpiospec.args_count) {
-		desc = ERR_PTR(-EINVAL);
-		goto out;
-	}
-
-	ret = chip->of_xlate(chip, &gpiospec, flags);
-	if (ret < 0) {
-		desc = ERR_PTR(ret);
-		goto out;
-	}
 
-	desc = gpiochip_get_desc(chip, ret);
+	desc = of_xlate_and_get_gpiod_flags(chip, &gpiospec, flags);
 	if (IS_ERR(desc))
 		goto out;
 
@@ -144,9 +150,6 @@ static struct gpio_desc *of_parse_own_gpio(struct device_node *np,
 	if (ret)
 		return ERR_PTR(ret);
 
-	if (tmp != chip->of_gpio_n_cells)
-		return ERR_PTR(-EINVAL);
-
 	gpiospec.np = chip_np;
 	gpiospec.args_count = tmp;
 
@@ -154,11 +157,7 @@ static struct gpio_desc *of_parse_own_gpio(struct device_node *np,
 	if (ret)
 		return ERR_PTR(ret);
 
-	ret = chip->of_xlate(chip, &gpiospec, &xlate_flags);
-	if (ret < 0)
-		return ERR_PTR(ret);
-
-	desc = gpiochip_get_desc(chip, ret);
+	desc = of_xlate_and_get_gpiod_flags(chip, &gpiospec, &xlate_flags);
 	if (IS_ERR(desc))
 		return desc;
 

commit 762c2e46c0591d207289105c8718e4adf29b2b34
Author: Masahiro Yamada <yamada.masahiro@socionext.com>
Date:   Tue Jun 14 19:07:06 2016 +0900

    gpio: of: remove of_gpiochip_and_xlate() and struct gg_data
    
    The usage of gpiochip_find(&gg_data, of_gpiochip_and_xlate) is odd.
    
    Usually gpiochip_find() is used to find a gpio_chip.  Here, however,
    the return value from gpiochip_find() is just discarded.  Instead,
    gpiochip_find(&gg_data, of_gpiochip_and_xlate) is called for the
    side-effect of the match function.
    
    The match function, of_gpiochip_find_and_xlate(), fills the given
    struct gg_data, but a match function should be simply called to
    judge the matching.
    
    This commit fixes this distortion and makes the code more readable.
    Remove of_gpiochip_find_and_xlate() and struct gg_data.  Instead,
    this adds a very simple helper function of_find_gpiochip_by_node().
    Now, of_get_named_gpiod_flags() is implemented more straight-forward.
    
    Signed-off-by: Masahiro Yamada <yamada.masahiro@socionext.com>
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>

diff --git a/drivers/gpio/gpiolib-of.c b/drivers/gpio/gpiolib-of.c
index a68e42dcce0a..9f86275a57b5 100644
--- a/drivers/gpio/gpiolib-of.c
+++ b/drivers/gpio/gpiolib-of.c
@@ -26,38 +26,14 @@
 
 #include "gpiolib.h"
 
-/* Private data structure for of_gpiochip_find_and_xlate */
-struct gg_data {
-	enum of_gpio_flags *flags;
-	struct of_phandle_args gpiospec;
-
-	struct gpio_desc *out_gpio;
-};
-
-/* Private function for resolving node pointer to gpio_chip */
-static int of_gpiochip_find_and_xlate(struct gpio_chip *gc, void *data)
+static int of_gpiochip_match_node(struct gpio_chip *chip, void *data)
 {
-	struct gg_data *gg_data = data;
-	int ret;
-
-	if ((gc->of_node != gg_data->gpiospec.np) ||
-	    (gc->of_gpio_n_cells != gg_data->gpiospec.args_count) ||
-	    (!gc->of_xlate))
-		return false;
+	return chip->gpiodev->dev.of_node == data;
+}
 
-	ret = gc->of_xlate(gc, &gg_data->gpiospec, gg_data->flags);
-	if (ret < 0) {
-		/* We've found a gpio chip, but the translation failed.
-		 * Store translation error in out_gpio.
-		 * Return false to keep looking, as more than one gpio chip
-		 * could be registered per of-node.
-		 */
-		gg_data->out_gpio = ERR_PTR(ret);
-		return false;
-	 }
-
-	gg_data->out_gpio = gpiochip_get_desc(gc, ret);
-	return true;
+static struct gpio_chip *of_find_gpiochip_by_node(struct device_node *np)
+{
+	return gpiochip_find(np, of_gpiochip_match_node);
 }
 
 /**
@@ -74,34 +50,47 @@ static int of_gpiochip_find_and_xlate(struct gpio_chip *gc, void *data)
 struct gpio_desc *of_get_named_gpiod_flags(struct device_node *np,
 		     const char *propname, int index, enum of_gpio_flags *flags)
 {
-	/* Return -EPROBE_DEFER to support probe() functions to be called
-	 * later when the GPIO actually becomes available
-	 */
-	struct gg_data gg_data = {
-		.flags = flags,
-		.out_gpio = ERR_PTR(-EPROBE_DEFER)
-	};
+	struct of_phandle_args gpiospec;
+	struct gpio_chip *chip;
+	struct gpio_desc *desc;
 	int ret;
 
-	/* .of_xlate might decide to not fill in the flags, so clear it. */
-	if (flags)
-		*flags = 0;
-
 	ret = of_parse_phandle_with_args(np, propname, "#gpio-cells", index,
-					 &gg_data.gpiospec);
+					 &gpiospec);
 	if (ret) {
 		pr_debug("%s: can't parse '%s' property of node '%s[%d]'\n",
 			__func__, propname, np->full_name, index);
 		return ERR_PTR(ret);
 	}
 
-	gpiochip_find(&gg_data, of_gpiochip_find_and_xlate);
+	chip = of_find_gpiochip_by_node(gpiospec.np);
+	if (!chip) {
+		desc = ERR_PTR(-EPROBE_DEFER);
+		goto out;
+	}
+	if (chip->of_gpio_n_cells != gpiospec.args_count) {
+		desc = ERR_PTR(-EINVAL);
+		goto out;
+	}
+
+	ret = chip->of_xlate(chip, &gpiospec, flags);
+	if (ret < 0) {
+		desc = ERR_PTR(ret);
+		goto out;
+	}
+
+	desc = gpiochip_get_desc(chip, ret);
+	if (IS_ERR(desc))
+		goto out;
 
-	of_node_put(gg_data.gpiospec.np);
 	pr_debug("%s: parsed '%s' property of node '%s[%d]' - status (%d)\n",
 		 __func__, propname, np->full_name, index,
-		 PTR_ERR_OR_ZERO(gg_data.out_gpio));
-	return gg_data.out_gpio;
+		 PTR_ERR_OR_ZERO(desc));
+
+out:
+	of_node_put(gpiospec.np);
+
+	return desc;
 }
 
 int of_get_named_gpio_flags(struct device_node *np, const char *list_name,

commit 1020dfd15b2363bf652851c490a27a550070346e
Author: Masahiro Yamada <yamada.masahiro@socionext.com>
Date:   Tue Jun 14 19:07:05 2016 +0900

    gpio: of: move chip->of_gpio_n_cells checking to of_gpiochip_add()
    
    Do this sanity check only once when the gpio_chip is added
    rather than every time gpio-hog is handled.
    
    Signed-off-by: Masahiro Yamada <yamada.masahiro@socionext.com>
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>

diff --git a/drivers/gpio/gpiolib-of.c b/drivers/gpio/gpiolib-of.c
index 37a3221d67dc..a68e42dcce0a 100644
--- a/drivers/gpio/gpiolib-of.c
+++ b/drivers/gpio/gpiolib-of.c
@@ -155,7 +155,7 @@ static struct gpio_desc *of_parse_own_gpio(struct device_node *np,
 	if (ret)
 		return ERR_PTR(ret);
 
-	if (tmp > MAX_PHANDLE_ARGS || tmp != chip->of_gpio_n_cells)
+	if (tmp != chip->of_gpio_n_cells)
 		return ERR_PTR(-EINVAL);
 
 	gpiospec.np = chip_np;
@@ -486,6 +486,9 @@ int of_gpiochip_add(struct gpio_chip *chip)
 		chip->of_xlate = of_gpio_simple_xlate;
 	}
 
+	if (chip->of_gpio_n_cells > MAX_PHANDLE_ARGS)
+		return -EINVAL;
+
 	status = of_gpiochip_add_pin_range(chip);
 	if (status)
 		return status;

commit be715343011b80a8da71ff978b50981984f037b9
Author: Masahiro Yamada <yamada.masahiro@socionext.com>
Date:   Tue Jun 14 19:07:04 2016 +0900

    gpio: of: drop needless gpio_chip look-up in of_parse_own_gpio()
    
    This function is doing more complicated than needed.  The caller of
    this function, of_gpiochip_scan_gpios() already knows the pointer to
    the gpio_chip.  It can pass it to of_parse_own_gpio() instead of
    looking up the gpio_chip by gpiochip_find().
    
    Signed-off-by: Masahiro Yamada <yamada.masahiro@socionext.com>
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>

diff --git a/drivers/gpio/gpiolib-of.c b/drivers/gpio/gpiolib-of.c
index 6b866fc4657d..37a3221d67dc 100644
--- a/drivers/gpio/gpiolib-of.c
+++ b/drivers/gpio/gpiolib-of.c
@@ -121,6 +121,7 @@ EXPORT_SYMBOL(of_get_named_gpio_flags);
 /**
  * of_parse_own_gpio() - Get a GPIO hog descriptor, names and flags for GPIO API
  * @np:		device node to get GPIO from
+ * @chip:	GPIO chip whose hog is parsed
  * @name:	GPIO line name
  * @lflags:	gpio_lookup_flags - returned from of_find_gpio() or
  *		of_parse_own_gpio()
@@ -130,19 +131,19 @@ EXPORT_SYMBOL(of_get_named_gpio_flags);
  * value on the error condition.
  */
 static struct gpio_desc *of_parse_own_gpio(struct device_node *np,
+					   struct gpio_chip *chip,
 					   const char **name,
 					   enum gpio_lookup_flags *lflags,
 					   enum gpiod_flags *dflags)
 {
 	struct device_node *chip_np;
 	enum of_gpio_flags xlate_flags;
-	struct gg_data gg_data = {
-		.flags = &xlate_flags,
-	};
+	struct of_phandle_args gpiospec;
+	struct gpio_desc *desc;
 	u32 tmp;
 	int ret;
 
-	chip_np = np->parent;
+	chip_np = chip->of_node;
 	if (!chip_np)
 		return ERR_PTR(-EINVAL);
 
@@ -154,23 +155,23 @@ static struct gpio_desc *of_parse_own_gpio(struct device_node *np,
 	if (ret)
 		return ERR_PTR(ret);
 
-	if (tmp > MAX_PHANDLE_ARGS)
+	if (tmp > MAX_PHANDLE_ARGS || tmp != chip->of_gpio_n_cells)
 		return ERR_PTR(-EINVAL);
 
-	gg_data.gpiospec.args_count = tmp;
-	gg_data.gpiospec.np = chip_np;
-	ret = of_property_read_u32_array(np, "gpios", gg_data.gpiospec.args,
-					 tmp);
+	gpiospec.np = chip_np;
+	gpiospec.args_count = tmp;
+
+	ret = of_property_read_u32_array(np, "gpios", gpiospec.args, tmp);
 	if (ret)
 		return ERR_PTR(ret);
 
-	gpiochip_find(&gg_data, of_gpiochip_find_and_xlate);
-	if (!gg_data.out_gpio) {
-		if (np->parent == np)
-			return ERR_PTR(-ENXIO);
-		else
-			return ERR_PTR(-EINVAL);
-	}
+	ret = chip->of_xlate(chip, &gpiospec, &xlate_flags);
+	if (ret < 0)
+		return ERR_PTR(ret);
+
+	desc = gpiochip_get_desc(chip, ret);
+	if (IS_ERR(desc))
+		return desc;
 
 	if (xlate_flags & OF_GPIO_ACTIVE_LOW)
 		*lflags |= GPIO_ACTIVE_LOW;
@@ -183,14 +184,14 @@ static struct gpio_desc *of_parse_own_gpio(struct device_node *np,
 		*dflags |= GPIOD_OUT_HIGH;
 	else {
 		pr_warn("GPIO line %d (%s): no hogging state specified, bailing out\n",
-			desc_to_gpio(gg_data.out_gpio), np->name);
+			desc_to_gpio(desc), np->name);
 		return ERR_PTR(-EINVAL);
 	}
 
 	if (name && of_property_read_string(np, "line-name", name))
 		*name = np->name;
 
-	return gg_data.out_gpio;
+	return desc;
 }
 
 /**
@@ -259,7 +260,7 @@ static int of_gpiochip_scan_gpios(struct gpio_chip *chip)
 		if (!of_property_read_bool(np, "gpio-hog"))
 			continue;
 
-		desc = of_parse_own_gpio(np, &name, &lflags, &dflags);
+		desc = of_parse_own_gpio(np, chip, &name, &lflags, &dflags);
 		if (IS_ERR(desc))
 			continue;
 

commit 3f9547e1c9f06219c5788668ea2f7495d3b13f60
Author: Masahiro Yamada <yamada.masahiro@socionext.com>
Date:   Tue Jun 14 19:07:03 2016 +0900

    gpio: of: optimize "gpios" property parsing of of_parse_own_gpio()
    
    Call of_property_read_u32_array() only once rather than iterating
    of_property_read_u32_index().
    
    Signed-off-by: Masahiro Yamada <yamada.masahiro@socionext.com>
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>

diff --git a/drivers/gpio/gpiolib-of.c b/drivers/gpio/gpiolib-of.c
index d8c36c1bf850..6b866fc4657d 100644
--- a/drivers/gpio/gpiolib-of.c
+++ b/drivers/gpio/gpiolib-of.c
@@ -140,7 +140,7 @@ static struct gpio_desc *of_parse_own_gpio(struct device_node *np,
 		.flags = &xlate_flags,
 	};
 	u32 tmp;
-	int i, ret;
+	int ret;
 
 	chip_np = np->parent;
 	if (!chip_np)
@@ -159,12 +159,10 @@ static struct gpio_desc *of_parse_own_gpio(struct device_node *np,
 
 	gg_data.gpiospec.args_count = tmp;
 	gg_data.gpiospec.np = chip_np;
-	for (i = 0; i < tmp; i++) {
-		ret = of_property_read_u32_index(np, "gpios", i,
-					   &gg_data.gpiospec.args[i]);
-		if (ret)
-			return ERR_PTR(ret);
-	}
+	ret = of_property_read_u32_array(np, "gpios", gg_data.gpiospec.args,
+					 tmp);
+	if (ret)
+		return ERR_PTR(ret);
 
 	gpiochip_find(&gg_data, of_gpiochip_find_and_xlate);
 	if (!gg_data.out_gpio) {

commit 7d4defe21c682c934a19fce1ba8b54b7bde61b08
Author: Linus Walleij <linus.walleij@linaro.org>
Date:   Wed Jun 8 10:58:20 2016 +0200

    gpio: include <linux/io-mapping.h> in gpiolib-of
    
    When enabling the gpiolib for all archs a build robot came
    up with this:
    
    All errors (new ones prefixed by >>):
    
       drivers/gpio/gpiolib-of.c: In function 'of_mm_gpiochip_add_data':
    >> drivers/gpio/gpiolib-of.c:317:2: error: implicit declaration of
       function 'iounmap' [-Werror=implicit-function-declaration]
         iounmap(mm_gc->regs);
         ^~~~~~~
       cc1: some warnings being treated as errors
    
    Fix this by including <linux/io-mapping.h> explicitly.
    
    Fixes: 296ad4acb8ef ("gpio: remove deps on ARCH_[WANT_OPTIONAL|REQUIRE]_GPIOLIB")
    Reported-by: kbuild test robot <fengguang.wu@intel.com>
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>

diff --git a/drivers/gpio/gpiolib-of.c b/drivers/gpio/gpiolib-of.c
index d22dcc38179d..4aabddb38b59 100644
--- a/drivers/gpio/gpiolib-of.c
+++ b/drivers/gpio/gpiolib-of.c
@@ -16,6 +16,7 @@
 #include <linux/errno.h>
 #include <linux/module.h>
 #include <linux/io.h>
+#include <linux/io-mapping.h>
 #include <linux/gpio/consumer.h>
 #include <linux/of.h>
 #include <linux/of_address.h>

commit 602cf63875f73f3faaa8b3b21a6ba8d1aa32424a
Author: Masahiro Yamada <yamada.masahiro@socionext.com>
Date:   Mon May 23 10:52:09 2016 +0900

    gpio: of: add missing of_node_put() to of_gpiochip_add_pin_range()
    
    As the comment block of of_parse_phandle_with_fixed_args() says,
    the caller is responsible to call of_node_put() on the returned
    node when done.
    
    Signed-off-by: Masahiro Yamada <yamada.masahiro@socionext.com>
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>

diff --git a/drivers/gpio/gpiolib-of.c b/drivers/gpio/gpiolib-of.c
index d22dcc38179d..d8c36c1bf850 100644
--- a/drivers/gpio/gpiolib-of.c
+++ b/drivers/gpio/gpiolib-of.c
@@ -409,6 +409,7 @@ static int of_gpiochip_add_pin_range(struct gpio_chip *chip)
 			break;
 
 		pctldev = of_pinctrl_get(pinspec.np);
+		of_node_put(pinspec.np);
 		if (!pctldev)
 			return -EPROBE_DEFER;
 

commit fd9c55315db9bc89c54bb644a0f8b1f9306010d4
Author: Linus Walleij <linus.walleij@linaro.org>
Date:   Tue Apr 19 15:26:26 2016 +0200

    gpio: of: make it possible to name GPIO lines
    
    Make it possible to name the producer side of a GPIO line using
    a "gpio-line-names" property array, modeled on the
    "clock-output-names" property from the clock bindings.
    
    This naming is especially useful for:
    
    - Debugging: lines are named after function, not just opaque
      offset numbers.
    
    - Exploration: systems where some or all GPIO lines are available
      to end users, such as prototyping, one-off's "makerspace usecases"
      users are helped by the names of the GPIO lines when tinkering.
      This usecase has been surfacing recently.
    
    The gpio-line-names attribute is completely optional.
    
    Example output from lsgpio on a patched Snowball tree:
    
    GPIO chip: gpiochip6, "8000e180.gpio", 32 GPIO lines
            line  0: unnamed unused
            line  1: "AP_GPIO161" "extkb3" [kernel]
            line  2: "AP_GPIO162" "extkb4" [kernel]
            line  3: "ACCELEROMETER_INT1_RDY" unused [kernel]
            line  4: "ACCELEROMETER_INT2" unused
            line  5: "MAG_DRDY" unused [kernel]
            line  6: "GYRO_DRDY" unused [kernel]
            line  7: "RSTn_MLC" unused
            line  8: "RSTn_SLC" unused
            line  9: "GYRO_INT" unused
            line 10: "UART_WAKE" unused
            line 11: "GBF_RESET" unused
            line 12: unnamed unused
    
    Cc: Grant Likely <grant.likely@linaro.org>
    Cc: Amit Kucheria <amit.kucheria@linaro.org>
    Cc: David Mandala <david.mandala@linaro.org>
    Cc: Lee Campbell <leecam@google.com>
    Cc: devicetree@vger.kernel.org
    Acked-by: Rob Herring <robh@kernel.org>
    Reviewed-by: Michael Welling <mwelling@ieee.org>
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>

diff --git a/drivers/gpio/gpiolib-of.c b/drivers/gpio/gpiolib-of.c
index d81dbd8e90d9..d22dcc38179d 100644
--- a/drivers/gpio/gpiolib-of.c
+++ b/drivers/gpio/gpiolib-of.c
@@ -195,6 +195,51 @@ static struct gpio_desc *of_parse_own_gpio(struct device_node *np,
 	return gg_data.out_gpio;
 }
 
+/**
+ * of_gpiochip_set_names() - set up the names of the lines
+ * @chip: GPIO chip whose lines should be named, if possible
+ */
+static void of_gpiochip_set_names(struct gpio_chip *gc)
+{
+	struct gpio_device *gdev = gc->gpiodev;
+	struct device_node *np = gc->of_node;
+	int i;
+	int nstrings;
+
+	nstrings = of_property_count_strings(np, "gpio-line-names");
+	if (nstrings <= 0)
+		/* Lines names not present */
+		return;
+
+	/* This is normally not what you want */
+	if (gdev->ngpio != nstrings)
+		dev_info(&gdev->dev, "gpio-line-names specifies %d line "
+			 "names but there are %d lines on the chip\n",
+			 nstrings, gdev->ngpio);
+
+	/*
+	 * Make sure to not index beyond the end of the number of descriptors
+	 * of the GPIO device.
+	 */
+	for (i = 0; i < gdev->ngpio; i++) {
+		const char *name;
+		int ret;
+
+		ret = of_property_read_string_index(np,
+						    "gpio-line-names",
+						    i,
+						    &name);
+		if (ret) {
+			if (ret != -ENODATA)
+                                dev_err(&gdev->dev,
+                                        "unable to name line %d: %d\n",
+                                        i, ret);
+			break;
+		}
+		gdev->descs[i].name = name;
+	}
+}
+
 /**
  * of_gpiochip_scan_gpios - Scan gpio-controller for gpio definitions
  * @chip:	gpio chip to act on
@@ -445,6 +490,10 @@ int of_gpiochip_add(struct gpio_chip *chip)
 	if (status)
 		return status;
 
+	/* If the chip defines names itself, these take precedence */
+	if (!chip->names)
+		of_gpiochip_set_names(chip);
+
 	of_node_get(chip->of_node);
 
 	return of_gpiochip_scan_gpios(chip);

commit d1279d94b4e47c3684f936ed6b6c89d3dd2cd5b9
Author: Laxman Dewangan <ldewangan@nvidia.com>
Date:   Fri Mar 11 19:13:20 2016 +0530

    gpio: of: Scan available child node for gpio-hog
    
    Look for child node which are available when iterating for
    gpio hog node for request/set GPIO initial configuration
    during OF gpio chip registration.
    
    All it really does is make it possible to set
    status = "disabled"; in the hog nodes, and then they will
    not be applied.
    
    Signed-off-by: Laxman Dewangan <ldewangan@nvidia.com>
    Reviewed-by: Thierry Reding <treding@nvidia.com>
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>

diff --git a/drivers/gpio/gpiolib-of.c b/drivers/gpio/gpiolib-of.c
index a2485093d10d..d81dbd8e90d9 100644
--- a/drivers/gpio/gpiolib-of.c
+++ b/drivers/gpio/gpiolib-of.c
@@ -212,7 +212,7 @@ static int of_gpiochip_scan_gpios(struct gpio_chip *chip)
 	enum gpiod_flags dflags;
 	int ret;
 
-	for_each_child_of_node(chip->of_node, np) {
+	for_each_available_child_of_node(chip->of_node, np) {
 		if (!of_property_read_bool(np, "gpio-hog"))
 			continue;
 

commit dfbd379ba9b7431eec46f1dbc2603491be98619a
Author: Laxman Dewangan <ldewangan@nvidia.com>
Date:   Fri Mar 11 19:13:22 2016 +0530

    gpio: of: Return error if gpio hog configuration failed
    
    If GPIO hog configuration failed while adding OF based
    gpiochip() then return the error instead of ignoring it.
    
    This helps of properly handling the gpio driver dependency.
    
    When adding the gpio hog nodes for NVIDIA's Tegra210 platforms,
    the gpio_hogd() fails with EPROBE_DEFER because pinctrl is not
    ready at this time and gpio_request() for Tegra GPIO driver
    returns error. The error was not causing the Tegra GPIO driver
    to fail as the error was getting ignored.
    
    Signed-off-by: Laxman Dewangan <ldewangan@nvidia.com>
    Cc: Benoit Parrot <bparrot@ti.com>
    Cc: Alexandre Courbot <acourbot@nvidia.com>
    Reviewed-by: Thierry Reding <treding@nvidia.com>
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>

diff --git a/drivers/gpio/gpiolib-of.c b/drivers/gpio/gpiolib-of.c
index 42a4bb7cf49a..a2485093d10d 100644
--- a/drivers/gpio/gpiolib-of.c
+++ b/drivers/gpio/gpiolib-of.c
@@ -201,14 +201,16 @@ static struct gpio_desc *of_parse_own_gpio(struct device_node *np,
  *
  * This is only used by of_gpiochip_add to request/set GPIO initial
  * configuration.
+ * It retures error if it fails otherwise 0 on success.
  */
-static void of_gpiochip_scan_gpios(struct gpio_chip *chip)
+static int of_gpiochip_scan_gpios(struct gpio_chip *chip)
 {
 	struct gpio_desc *desc = NULL;
 	struct device_node *np;
 	const char *name;
 	enum gpio_lookup_flags lflags;
 	enum gpiod_flags dflags;
+	int ret;
 
 	for_each_child_of_node(chip->of_node, np) {
 		if (!of_property_read_bool(np, "gpio-hog"))
@@ -218,9 +220,12 @@ static void of_gpiochip_scan_gpios(struct gpio_chip *chip)
 		if (IS_ERR(desc))
 			continue;
 
-		if (gpiod_hog(desc, name, lflags, dflags))
-			continue;
+		ret = gpiod_hog(desc, name, lflags, dflags);
+		if (ret < 0)
+			return ret;
 	}
+
+	return 0;
 }
 
 /**
@@ -442,9 +447,7 @@ int of_gpiochip_add(struct gpio_chip *chip)
 
 	of_node_get(chip->of_node);
 
-	of_gpiochip_scan_gpios(chip);
-
-	return 0;
+	return of_gpiochip_scan_gpios(chip);
 }
 
 void of_gpiochip_remove(struct gpio_chip *chip)

commit 3208b0f0c010b26e4d461a3bca59989d03ed9087
Author: Linus Walleij <linus.walleij@linaro.org>
Date:   Fri Dec 4 15:13:53 2015 +0100

    gpio: of: provide optional of_mm_gpiochip_add_data() function
    
    In the same spirit as we add an optional void *data argument
    to the gpiochip_add_data() call, we need this also for
    of_mm_gpiochip_add().
    
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>

diff --git a/drivers/gpio/gpiolib-of.c b/drivers/gpio/gpiolib-of.c
index 6ed465ea2e12..42a4bb7cf49a 100644
--- a/drivers/gpio/gpiolib-of.c
+++ b/drivers/gpio/gpiolib-of.c
@@ -262,9 +262,10 @@ int of_gpio_simple_xlate(struct gpio_chip *gc,
 EXPORT_SYMBOL(of_gpio_simple_xlate);
 
 /**
- * of_mm_gpiochip_add - Add memory mapped GPIO chip (bank)
+ * of_mm_gpiochip_add_data - Add memory mapped GPIO chip (bank)
  * @np:		device node of the GPIO chip
  * @mm_gc:	pointer to the of_mm_gpio_chip allocated structure
+ * @data:	driver data to store in the struct gpio_chip
  *
  * To use this function you should allocate and fill mm_gc with:
  *
@@ -280,8 +281,9 @@ EXPORT_SYMBOL(of_gpio_simple_xlate);
  * do all necessary work for you. Then you'll able to use .regs
  * to manage GPIOs from the callbacks.
  */
-int of_mm_gpiochip_add(struct device_node *np,
-		       struct of_mm_gpio_chip *mm_gc)
+int of_mm_gpiochip_add_data(struct device_node *np,
+			    struct of_mm_gpio_chip *mm_gc,
+			    void *data)
 {
 	int ret = -ENOMEM;
 	struct gpio_chip *gc = &mm_gc->gc;
@@ -301,7 +303,7 @@ int of_mm_gpiochip_add(struct device_node *np,
 
 	mm_gc->gc.of_node = np;
 
-	ret = gpiochip_add(gc);
+	ret = gpiochip_add_data(gc, data);
 	if (ret)
 		goto err2;
 
@@ -315,7 +317,7 @@ int of_mm_gpiochip_add(struct device_node *np,
 	       np->full_name, ret);
 	return ret;
 }
-EXPORT_SYMBOL(of_mm_gpiochip_add);
+EXPORT_SYMBOL(of_mm_gpiochip_add_data);
 
 /**
  * of_mm_gpiochip_remove - Remove memory mapped GPIO chip (bank)

commit 58383c78425e4ee1c077253cf297b641c861c02e
Author: Linus Walleij <linus.walleij@linaro.org>
Date:   Wed Nov 4 09:56:26 2015 +0100

    gpio: change member .dev to .parent
    
    The name .dev in a struct is normally reserved for a struct device
    that is let us say a superclass to the thing described by the struct.
    struct gpio_chip stands out by confusingly using a struct device *dev
    to point to the parent device (such as a platform_device) that
    represents the hardware. As we want to give gpio_chip:s real devices,
    this is not working. We need to rename this member to parent.
    
    This was done by two coccinelle scripts, I guess it is possible to
    combine them into one, but I don't know such stuff. They look like
    this:
    
    @@
    struct gpio_chip *var;
    @@
    -var->dev
    +var->parent
    
    and:
    
    @@
    struct gpio_chip var;
    @@
    -var.dev
    +var.parent
    
    and:
    
    @@
    struct bgpio_chip *var;
    @@
    -var->gc.dev
    +var->gc.parent
    
    Plus a few instances of bgpio that I couldn't figure out how
    to teach Coccinelle to rewrite.
    
    This patch hits all over the place, but I *strongly* prefer this
    solution to any piecemal approaches that just exercise patch
    mechanics all over the place. It mainly hits drivers/gpio and
    drivers/pinctrl which is my own backyard anyway.
    
    Cc: Haavard Skinnemoen <hskinnemoen@gmail.com>
    Cc: Rafał Miłecki <zajec5@gmail.com>
    Cc: Richard Purdie <rpurdie@rpsys.net>
    Cc: Mauro Carvalho Chehab <mchehab@osg.samsung.com>
    Cc: Alek Du <alek.du@intel.com>
    Cc: Jaroslav Kysela <perex@perex.cz>
    Cc: Takashi Iwai <tiwai@suse.com>
    Acked-by: Dmitry Torokhov <dmitry.torokhov@gmail.com>
    Acked-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Acked-by: Lee Jones <lee.jones@linaro.org>
    Acked-by: Jiri Kosina <jkosina@suse.cz>
    Acked-by: Hans-Christian Egtvedt <egtvedt@samfundet.no>
    Acked-by: Jacek Anaszewski <j.anaszewski@samsung.com>
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>

diff --git a/drivers/gpio/gpiolib-of.c b/drivers/gpio/gpiolib-of.c
index 5fe34a9df3e6..6ed465ea2e12 100644
--- a/drivers/gpio/gpiolib-of.c
+++ b/drivers/gpio/gpiolib-of.c
@@ -423,8 +423,8 @@ int of_gpiochip_add(struct gpio_chip *chip)
 {
 	int status;
 
-	if ((!chip->of_node) && (chip->dev))
-		chip->of_node = chip->dev->of_node;
+	if ((!chip->of_node) && (chip->parent))
+		chip->of_node = chip->parent->of_node;
 
 	if (!chip->of_node)
 		return 0;

commit fd7337fdb9bce420033c28af4c07b73e34e692c1
Author: Markus Pargmann <mpa@pengutronix.de>
Date:   Fri Aug 14 16:10:58 2015 +0200

    gpiolib-of: Rename gpio_hog functions to be generic
    
    The gpio hogging functions are currently only used for gpio-hogging. But
    these functions are widely generic ones which parse gpio device nodes in
    the DT.
    
    Signed-off-by: Markus Pargmann <mpa@pengutronix.de>
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>

diff --git a/drivers/gpio/gpiolib-of.c b/drivers/gpio/gpiolib-of.c
index fa6e3c8823d6..5fe34a9df3e6 100644
--- a/drivers/gpio/gpiolib-of.c
+++ b/drivers/gpio/gpiolib-of.c
@@ -119,20 +119,20 @@ int of_get_named_gpio_flags(struct device_node *np, const char *list_name,
 EXPORT_SYMBOL(of_get_named_gpio_flags);
 
 /**
- * of_get_gpio_hog() - Get a GPIO hog descriptor, names and flags for GPIO API
+ * of_parse_own_gpio() - Get a GPIO hog descriptor, names and flags for GPIO API
  * @np:		device node to get GPIO from
  * @name:	GPIO line name
  * @lflags:	gpio_lookup_flags - returned from of_find_gpio() or
- *		of_get_gpio_hog()
+ *		of_parse_own_gpio()
  * @dflags:	gpiod_flags - optional GPIO initialization flags
  *
  * Returns GPIO descriptor to use with Linux GPIO API, or one of the errno
  * value on the error condition.
  */
-static struct gpio_desc *of_get_gpio_hog(struct device_node *np,
-				  const char **name,
-				  enum gpio_lookup_flags *lflags,
-				  enum gpiod_flags *dflags)
+static struct gpio_desc *of_parse_own_gpio(struct device_node *np,
+					   const char **name,
+					   enum gpio_lookup_flags *lflags,
+					   enum gpiod_flags *dflags)
 {
 	struct device_node *chip_np;
 	enum of_gpio_flags xlate_flags;
@@ -196,13 +196,13 @@ static struct gpio_desc *of_get_gpio_hog(struct device_node *np,
 }
 
 /**
- * of_gpiochip_scan_hogs - Scan gpio-controller and apply GPIO hog as requested
+ * of_gpiochip_scan_gpios - Scan gpio-controller for gpio definitions
  * @chip:	gpio chip to act on
  *
  * This is only used by of_gpiochip_add to request/set GPIO initial
  * configuration.
  */
-static void of_gpiochip_scan_hogs(struct gpio_chip *chip)
+static void of_gpiochip_scan_gpios(struct gpio_chip *chip)
 {
 	struct gpio_desc *desc = NULL;
 	struct device_node *np;
@@ -214,7 +214,7 @@ static void of_gpiochip_scan_hogs(struct gpio_chip *chip)
 		if (!of_property_read_bool(np, "gpio-hog"))
 			continue;
 
-		desc = of_get_gpio_hog(np, &name, &lflags, &dflags);
+		desc = of_parse_own_gpio(np, &name, &lflags, &dflags);
 		if (IS_ERR(desc))
 			continue;
 
@@ -440,7 +440,7 @@ int of_gpiochip_add(struct gpio_chip *chip)
 
 	of_node_get(chip->of_node);
 
-	of_gpiochip_scan_hogs(chip);
+	of_gpiochip_scan_gpios(chip);
 
 	return 0;
 }

commit 28355f81969962cf01aef5b13d7de5b4ab0c5f13
Author: Tomeu Vizoso <tomeu.vizoso@collabora.com>
Date:   Tue Jul 14 10:29:54 2015 +0200

    gpio: defer probe if pinctrl cannot be found
    
    When an OF node has a pin range for its GPIOs, return -EPROBE_DEFER if
    the pin controller isn't available.
    
    Otherwise, the GPIO range wouldn't be set at all unless the pin
    controller probed always before the GPIO chip.
    
    With this change, the probe of the GPIO chip will be deferred and will
    be retried at a later point, hopefully once the pin controller has been
    registered and probed already.
    
    Signed-off-by: Tomeu Vizoso <tomeu.vizoso@collabora.com>
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>

diff --git a/drivers/gpio/gpiolib-of.c b/drivers/gpio/gpiolib-of.c
index 1e36ec5e2e0c..fa6e3c8823d6 100644
--- a/drivers/gpio/gpiolib-of.c
+++ b/drivers/gpio/gpiolib-of.c
@@ -335,7 +335,7 @@ void of_mm_gpiochip_remove(struct of_mm_gpio_chip *mm_gc)
 EXPORT_SYMBOL(of_mm_gpiochip_remove);
 
 #ifdef CONFIG_PINCTRL
-static void of_gpiochip_add_pin_range(struct gpio_chip *chip)
+static int of_gpiochip_add_pin_range(struct gpio_chip *chip)
 {
 	struct device_node *np = chip->of_node;
 	struct of_phandle_args pinspec;
@@ -346,7 +346,7 @@ static void of_gpiochip_add_pin_range(struct gpio_chip *chip)
 	struct property *group_names;
 
 	if (!np)
-		return;
+		return 0;
 
 	group_names = of_find_property(np, group_names_propname, NULL);
 
@@ -358,7 +358,7 @@ static void of_gpiochip_add_pin_range(struct gpio_chip *chip)
 
 		pctldev = of_pinctrl_get(pinspec.np);
 		if (!pctldev)
-			break;
+			return -EPROBE_DEFER;
 
 		if (pinspec.args[2]) {
 			if (group_names) {
@@ -378,7 +378,7 @@ static void of_gpiochip_add_pin_range(struct gpio_chip *chip)
 					pinspec.args[1],
 					pinspec.args[2]);
 			if (ret)
-				break;
+				return ret;
 		} else {
 			/* npins == 0: special range */
 			if (pinspec.args[1]) {
@@ -408,32 +408,41 @@ static void of_gpiochip_add_pin_range(struct gpio_chip *chip)
 			ret = gpiochip_add_pingroup_range(chip, pctldev,
 						pinspec.args[0], name);
 			if (ret)
-				break;
+				return ret;
 		}
 	}
+
+	return 0;
 }
 
 #else
-static void of_gpiochip_add_pin_range(struct gpio_chip *chip) {}
+static int of_gpiochip_add_pin_range(struct gpio_chip *chip) { return 0; }
 #endif
 
-void of_gpiochip_add(struct gpio_chip *chip)
+int of_gpiochip_add(struct gpio_chip *chip)
 {
+	int status;
+
 	if ((!chip->of_node) && (chip->dev))
 		chip->of_node = chip->dev->of_node;
 
 	if (!chip->of_node)
-		return;
+		return 0;
 
 	if (!chip->of_xlate) {
 		chip->of_gpio_n_cells = 2;
 		chip->of_xlate = of_gpio_simple_xlate;
 	}
 
-	of_gpiochip_add_pin_range(chip);
+	status = of_gpiochip_add_pin_range(chip);
+	if (status)
+		return status;
+
 	of_node_get(chip->of_node);
 
 	of_gpiochip_scan_hogs(chip);
+
+	return 0;
 }
 
 void of_gpiochip_remove(struct gpio_chip *chip)

commit 72858602e167ea2d7487337bac279beec7a99c84
Author: Laurent Navet <laurent.navet@gmail.com>
Date:   Tue Jul 7 22:22:15 2015 +0200

    gpiolib: remove unneeded assignation
    
    ret is assigned value from of_property_read_string_index but is
    overwritten before being used so remove it.
    Also fix coverity CID 1309759
    
    Reported-by: coverity (CID 1309759)
    Signed-off-by: Laurent Navet <laurent.navet@gmail.com>
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>

diff --git a/drivers/gpio/gpiolib-of.c b/drivers/gpio/gpiolib-of.c
index fd2db4b3a709..1e36ec5e2e0c 100644
--- a/drivers/gpio/gpiolib-of.c
+++ b/drivers/gpio/gpiolib-of.c
@@ -362,7 +362,7 @@ static void of_gpiochip_add_pin_range(struct gpio_chip *chip)
 
 		if (pinspec.args[2]) {
 			if (group_names) {
-				ret = of_property_read_string_index(np,
+				of_property_read_string_index(np,
 						group_names_propname,
 						index, &name);
 				if (strlen(name)) {

commit 39561e8bbb49752092b6afd9764d3f3aeef4e1d2
Author: Masahiro Yamada <yamada.masahiro@socionext.com>
Date:   Tue Jul 14 10:01:44 2015 +0900

    gpio: of: remove unnecessary variable in of_get_gpio_hog()
    
    The variable "desc" is only used for storing the return value at the
    end of the function.  It is unneeded.
    
    Signed-off-by: Masahiro Yamada <yamada.masahiro@socionext.com>
    Acked-by: Alexandre Courbot <acourbot@nvidia.com>
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>

diff --git a/drivers/gpio/gpiolib-of.c b/drivers/gpio/gpiolib-of.c
index 9a0ec48a4737..fd2db4b3a709 100644
--- a/drivers/gpio/gpiolib-of.c
+++ b/drivers/gpio/gpiolib-of.c
@@ -136,7 +136,6 @@ static struct gpio_desc *of_get_gpio_hog(struct device_node *np,
 {
 	struct device_node *chip_np;
 	enum of_gpio_flags xlate_flags;
-	struct gpio_desc *desc;
 	struct gg_data gg_data = {
 		.flags = &xlate_flags,
 	};
@@ -193,9 +192,7 @@ static struct gpio_desc *of_get_gpio_hog(struct device_node *np,
 	if (name && of_property_read_string(np, "line-name", name))
 		*name = np->name;
 
-	desc = gg_data.out_gpio;
-
-	return desc;
+	return gg_data.out_gpio;
 }
 
 /**

commit 20a8a96873f69dc915e872e291f4376f436b295a
Author: Colin Cronin <colinpatrickcronin@gmail.com>
Date:   Mon May 18 11:41:43 2015 -0700

    Drivers: gpio: Fix spelling errors
    
    Fixed several spelling errors in gpio-lynxpoint, gpio-pca953x,
    gpio-tegra, gpio-zynq, gpiolib-of, gpiolib.
    
    Signed-off-by: Colin Cronin <colinpatrickcronin@gmail.com>
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>

diff --git a/drivers/gpio/gpiolib-of.c b/drivers/gpio/gpiolib-of.c
index a6c67c6b4680..9a0ec48a4737 100644
--- a/drivers/gpio/gpiolib-of.c
+++ b/drivers/gpio/gpiolib-of.c
@@ -242,7 +242,7 @@ int of_gpio_simple_xlate(struct gpio_chip *gc,
 {
 	/*
 	 * We're discouraging gpio_cells < 2, since that way you'll have to
-	 * write your own xlate function (that will have to retrive the GPIO
+	 * write your own xlate function (that will have to retrieve the GPIO
 	 * number and the flags from a single gpio cell -- this is possible,
 	 * but not recommended).
 	 */

commit 510965dd4a0a59504ba38455f77339ea8b4c6a70
Merge: 40d7839879b4 03daa6f82f2b
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Sat Apr 18 08:22:10 2015 -0400

    Merge tag 'gpio-v4.1-1' of git://git.kernel.org/pub/scm/linux/kernel/git/linusw/linux-gpio
    
    Pull GPIO updates from Linus Walleij:
     "This is the bulk of GPIO changes for the v4.1 development cycle:
    
       - A new GPIO hogging mechanism has been added.  This can be used on
         boards that want to drive some GPIO line high, low, or set it as
         input on boot and then never touch it again.  For some embedded
         systems this is bliss and simplifies things to a great extent.
    
       - Some API cleanup and closure: gpiod_get_array() and
         gpiod_put_array() has been added to get and put GPIOs in bulk as
         was possible with the non-descriptor API.
    
       - Encapsulate cross-calls to the pin control subsystem in
         <linux/gpio/driver.h>.  Now this should be the only header any GPIO
         driver needs to include or something is wrong.  Cleanups
         restricting drivers to this include are welcomed if tested.
    
       - Sort the GPIO Kconfig and split it into submenus, as it was
         becoming and unstructured, illogical and unnavigatable mess.  I
         hope this is easier to follow.  Menus that require a certain
         subsystem like I2C can now be hidden nicely for example, still
         working on others.
    
       - New drivers:
    
           - New driver for the Altera Soft GPIO.
    
           - The F7188x driver now handles the F71869 and F71869A variants.
    
           - The MIPS Loongson driver has been moved to drivers/gpio for
             consolidation and cleanup.
    
       - Cleanups:
    
           - The MAX732x is converted to use the GPIOLIB_IRQCHIP
             infrastructure.
    
           - The PCF857x is converted to use the GPIOLIB_IRQCHIP
             infrastructure.
    
           - Radical cleanup of the OMAP driver.
    
       - Misc:
    
           - Enable the DWAPB GPIO for all architectures.  This is a "hard
             IP" block from Synopsys which has started to turn up in so
             diverse architectures as X86 Quark, ARC and a slew of ARM
             systems.  So even though it's not an expander, it's generic
             enough to be available for all.
    
           - We add a mock GPIO on Crystalcove PMIC after a long discussion
             with Daniel Vetter et al, tracing back to the shootout at the
             kernel summit where DRM drivers and sub-componentization was
             discussed.  In this case a mock GPIO is assumed to be the best
             compromise gaining some reuse of infrastructure without making
             DRM drivers overly complex at the same time.  Let's see"
    
    * tag 'gpio-v4.1-1' of git://git.kernel.org/pub/scm/linux/kernel/git/linusw/linux-gpio: (62 commits)
      Revert "gpio: sch: use uapi/linux/pci_ids.h directly"
      gpio: dwapb: remove dependencies
      gpio: dwapb: enable for ARC
      gpio: removing kfree remove functionality
      gpio: mvebu: Fix mask/unmask managment per irq chip type
      gpio: split GPIO drivers in submenus
      gpio: move MFD GPIO drivers under their own comment
      gpio: move BCM Kona Kconfig option
      gpio: arrange SPI Kconfig symbols alphabetically
      gpio: arrange PCI GPIO controllers alphabetically
      gpio: arrange I2C Kconfig symbols alphabetically
      gpio: arrange Kconfig symbols alphabetically
      gpio: ich: Implement get_direction function
      gpio: use (!foo) instead of (foo == NULL)
      gpio: arizona: drop owner assignment from platform_drivers
      gpio: max7300: remove 'ret' variable
      gpio: use devm_kzalloc
      gpio: sch: use uapi/linux/pci_ids.h directly
      gpio: x-gene: fix devm_ioremap_resource() check
      gpio: loongson: Add Loongson-3A/3B GPIO driver support
      ...

commit f625d4601759f1cf1fd3ae58abeb0e203b8993b1
Author: Benoit Parrot <bparrot@ti.com>
Date:   Mon Feb 2 11:44:44 2015 -0600

    gpio: add GPIO hogging mechanism
    
    Based on Boris Brezillion's work this is a reworked patch
    of his initial GPIO hogging mechanism.
    This patch provides a way to initially configure specific GPIO
    when the GPIO controller is probed.
    
    The actual DT scanning to collect the GPIO specific data is performed
    as part of gpiochip_add().
    
    The purpose of this is to allow specific GPIOs to be configured
    without any driver specific code.
    This is particularly useful because board design are getting
    increasingly complex and given SoC pins can now have more
    than 10 mux values, a lot of connections are now dependent on
    external IO muxes to switch various modes.
    
    Specific drivers should not necessarily need to be aware of
    what accounts to a specific board implementation. This board level
    "description" should be best kept as part of the dts file.
    
    Signed-off-by: Benoit Parrot <bparrot@ti.com>
    Reviewed-by: Alexandre Courbot <acourbot@nvidia.com>
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>

diff --git a/drivers/gpio/gpiolib-of.c b/drivers/gpio/gpiolib-of.c
index 8cad8e400b44..468d76ac1e84 100644
--- a/drivers/gpio/gpiolib-of.c
+++ b/drivers/gpio/gpiolib-of.c
@@ -22,6 +22,7 @@
 #include <linux/of_gpio.h>
 #include <linux/pinctrl/pinctrl.h>
 #include <linux/slab.h>
+#include <linux/gpio/machine.h>
 
 #include "gpiolib.h"
 
@@ -116,6 +117,114 @@ int of_get_named_gpio_flags(struct device_node *np, const char *list_name,
 }
 EXPORT_SYMBOL(of_get_named_gpio_flags);
 
+/**
+ * of_get_gpio_hog() - Get a GPIO hog descriptor, names and flags for GPIO API
+ * @np:		device node to get GPIO from
+ * @name:	GPIO line name
+ * @lflags:	gpio_lookup_flags - returned from of_find_gpio() or
+ *		of_get_gpio_hog()
+ * @dflags:	gpiod_flags - optional GPIO initialization flags
+ *
+ * Returns GPIO descriptor to use with Linux GPIO API, or one of the errno
+ * value on the error condition.
+ */
+static struct gpio_desc *of_get_gpio_hog(struct device_node *np,
+				  const char **name,
+				  enum gpio_lookup_flags *lflags,
+				  enum gpiod_flags *dflags)
+{
+	struct device_node *chip_np;
+	enum of_gpio_flags xlate_flags;
+	struct gpio_desc *desc;
+	struct gg_data gg_data = {
+		.flags = &xlate_flags,
+	};
+	u32 tmp;
+	int i, ret;
+
+	chip_np = np->parent;
+	if (!chip_np)
+		return ERR_PTR(-EINVAL);
+
+	xlate_flags = 0;
+	*lflags = 0;
+	*dflags = 0;
+
+	ret = of_property_read_u32(chip_np, "#gpio-cells", &tmp);
+	if (ret)
+		return ERR_PTR(ret);
+
+	if (tmp > MAX_PHANDLE_ARGS)
+		return ERR_PTR(-EINVAL);
+
+	gg_data.gpiospec.args_count = tmp;
+	gg_data.gpiospec.np = chip_np;
+	for (i = 0; i < tmp; i++) {
+		ret = of_property_read_u32_index(np, "gpios", i,
+					   &gg_data.gpiospec.args[i]);
+		if (ret)
+			return ERR_PTR(ret);
+	}
+
+	gpiochip_find(&gg_data, of_gpiochip_find_and_xlate);
+	if (!gg_data.out_gpio) {
+		if (np->parent == np)
+			return ERR_PTR(-ENXIO);
+		else
+			return ERR_PTR(-EINVAL);
+	}
+
+	if (xlate_flags & OF_GPIO_ACTIVE_LOW)
+		*lflags |= GPIO_ACTIVE_LOW;
+
+	if (of_property_read_bool(np, "input"))
+		*dflags |= GPIOD_IN;
+	else if (of_property_read_bool(np, "output-low"))
+		*dflags |= GPIOD_OUT_LOW;
+	else if (of_property_read_bool(np, "output-high"))
+		*dflags |= GPIOD_OUT_HIGH;
+	else {
+		pr_warn("GPIO line %d (%s): no hogging state specified, bailing out\n",
+			desc_to_gpio(gg_data.out_gpio), np->name);
+		return ERR_PTR(-EINVAL);
+	}
+
+	if (name && of_property_read_string(np, "line-name", name))
+		*name = np->name;
+
+	desc = gg_data.out_gpio;
+
+	return desc;
+}
+
+/**
+ * of_gpiochip_scan_hogs - Scan gpio-controller and apply GPIO hog as requested
+ * @chip:	gpio chip to act on
+ *
+ * This is only used by of_gpiochip_add to request/set GPIO initial
+ * configuration.
+ */
+static void of_gpiochip_scan_hogs(struct gpio_chip *chip)
+{
+	struct gpio_desc *desc = NULL;
+	struct device_node *np;
+	const char *name;
+	enum gpio_lookup_flags lflags;
+	enum gpiod_flags dflags;
+
+	for_each_child_of_node(chip->of_node, np) {
+		if (!of_property_read_bool(np, "gpio-hog"))
+			continue;
+
+		desc = of_get_gpio_hog(np, &name, &lflags, &dflags);
+		if (IS_ERR(desc))
+			continue;
+
+		if (gpiod_hog(desc, name, lflags, dflags))
+			continue;
+	}
+}
+
 /**
  * of_gpio_simple_xlate - translate gpio_spec to the GPIO number and flags
  * @gc:		pointer to the gpio_chip structure
@@ -325,6 +434,8 @@ void of_gpiochip_add(struct gpio_chip *chip)
 
 	of_gpiochip_add_pin_range(chip);
 	of_node_get(chip->of_node);
+
+	of_gpiochip_scan_hogs(chip);
 }
 
 void of_gpiochip_remove(struct gpio_chip *chip)

commit 9cf75e9e4ddd587ac12e88e8751c358b7b27e95f
Author: Hans Holmberg <hans.holmberg@intel.com>
Date:   Tue Feb 10 09:48:27 2015 +0100

    gpiolib: of: allow of_gpiochip_find_and_xlate to find more than one chip per node
    
    The change:
    
    7b8792bbdffdff3abda704f89c6a45ea97afdc62
    gpiolib: of: Correct error handling in of_get_named_gpiod_flags
    
    assumed that only one gpio-chip is registred per of-node.
    Some drivers register more than one chip per of-node, so
    adjust the matching function of_gpiochip_find_and_xlate to
    not stop looking for chips if a node-match is found and
    the translation fails.
    
    Cc: Stable <stable@vger.kernel.org>
    Fixes: 7b8792bbdffd ("gpiolib: of: Correct error handling in of_get_named_gpiod_flags")
    Signed-off-by: Hans Holmberg <hans.holmberg@intel.com>
    Acked-by: Alexandre Courbot <acourbot@nvidia.com>
    Tested-by: Robert Jarzmik <robert.jarzmik@free.fr>
    Tested-by: Tyler Hall <tylerwhall@gmail.com>
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>

diff --git a/drivers/gpio/gpiolib-of.c b/drivers/gpio/gpiolib-of.c
index 8cad8e400b44..4650bf830d6b 100644
--- a/drivers/gpio/gpiolib-of.c
+++ b/drivers/gpio/gpiolib-of.c
@@ -46,12 +46,13 @@ static int of_gpiochip_find_and_xlate(struct gpio_chip *gc, void *data)
 
 	ret = gc->of_xlate(gc, &gg_data->gpiospec, gg_data->flags);
 	if (ret < 0) {
-		/* We've found the gpio chip, but the translation failed.
-		 * Return true to stop looking and return the translation
-		 * error via out_gpio
+		/* We've found a gpio chip, but the translation failed.
+		 * Store translation error in out_gpio.
+		 * Return false to keep looking, as more than one gpio chip
+		 * could be registered per of-node.
 		 */
 		gg_data->out_gpio = ERR_PTR(ret);
-		return true;
+		return false;
 	 }
 
 	gg_data->out_gpio = gpiochip_get_desc(gc, ret);

commit a1df7efedab047a8ea4d5850737f03d3679726a7
Merge: aa7ed01f93ff 0a4a3529df40
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Wed Feb 11 11:17:34 2015 -0800

    Merge tag 'gpio-v3.20-1' of git://git.kernel.org/pub/scm/linux/kernel/git/linusw/linux-gpio
    
    Pull GPIO changes from Linus Walleij:
     "This is the GPIO bulk changes for the v3.20 series:
    
      GPIOLIB core changes:
       - Create and use of_mm_gpiochip_remove() for removing memory-mapped
         OF GPIO chips
       - GPIO MMIO library suppports bgpio_set_multiple for switching
         several lines at once, a feature merged in the last cycle.
    
      New drivers:
       - New driver for the APM X-gene standby GPIO controller
       - New driver for the Fujitsu MB86S7x GPIO controller
    
      Cleanups:
       - Moved rcar driver to use gpiolib irqchip
       - Moxart converted to the GPIO MMIO library
       - GE driver converted to GPIO MMIO library
       - Move sx150x to irqdomain
       - Move max732x to irqdomain
       - Move vx855 to use managed resources
       - Move dwapb to use managed resources
       - Clean tc3589x from platform data
       - Clean stmpe driver to use device tree only probe
    
      New subtypes:
       - sx1506 support in the sx150x driver
       - Quark 1000 SoC support in the SCH driver
       - Support X86 in the Xilinx driver
       - Support PXA1928 in the PXA driver
    
      Extended drivers:
       - max732x supports device tree probe
       - sx150x supports device tree probe
    
      Various minor cleanups and bug fixes"
    
    * tag 'gpio-v3.20-1' of git://git.kernel.org/pub/scm/linux/kernel/git/linusw/linux-gpio: (61 commits)
      gpio: kconfig: replace PPC_OF with PPC
      gpio: pxa: add PXA1928 gpio type support
      dt/bindings: gpio: add compatible string for marvell,pxa1928-gpio
      gpio: pxa: remove mach IRQ includes
      gpio: max732x: use an inline function for container cast
      gpio: use sizeof() instead of hardcoded values
      gpio: max732x: add set_multiple function
      gpio: sch: Consolidate similar algorithms
      gpio: tz1090-pdc: Use resource_size to fix off-by-one resource size calculation
      gpio: ge: Convert to use devm_kstrdup
      gpio: correctly use const char * const
      gpio: sx150x: fixup OF support
      gpio: mpc8xxx: Use of_mm_gpiochip_remove
      gpio: Add Fujitsu MB86S7x GPIO driver
      gpio: mpc8xxx: Convert to platform device interface.
      gpio: zevio: Use of_mm_gpiochip_remove
      gpio: gpio-mm-lantiq: Use of_mm_gpiochip_remove
      gpio: gpio-mm-lantiq: Use of_property_read_u32
      gpio: gpio-mm-lantiq: Do not replicate code
      gpio :gpio-mm-lantiq: Use devm_kzalloc
      ...

commit 7b8792bbdffdff3abda704f89c6a45ea97afdc62
Author: Hans Holmberg <hans.holmberg@intel.com>
Date:   Fri Jan 9 09:40:43 2015 +0100

    gpiolib: of: Correct error handling in of_get_named_gpiod_flags
    
    of_get_named_gpiod_flags fails with -EPROBE_DEFER in cases
    where the gpio chip is available and the GPIO translation fails.
    
    This causes drivers to be re-probed erroneusly, and hides the
    real problem(i.e. the GPIO number being out of range).
    
    Cc: Stable <stable@vger.kernel.org>
    Signed-off-by: Hans Holmberg <hans.holmberg@intel.com>
    Reviewed-by: Alexandre Courbot <acourbot@nvidia.com>
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>

diff --git a/drivers/gpio/gpiolib-of.c b/drivers/gpio/gpiolib-of.c
index 604dbe60bdee..08261f2b3a82 100644
--- a/drivers/gpio/gpiolib-of.c
+++ b/drivers/gpio/gpiolib-of.c
@@ -45,8 +45,14 @@ static int of_gpiochip_find_and_xlate(struct gpio_chip *gc, void *data)
 		return false;
 
 	ret = gc->of_xlate(gc, &gg_data->gpiospec, gg_data->flags);
-	if (ret < 0)
-		return false;
+	if (ret < 0) {
+		/* We've found the gpio chip, but the translation failed.
+		 * Return true to stop looking and return the translation
+		 * error via out_gpio
+		 */
+		gg_data->out_gpio = ERR_PTR(ret);
+		return true;
+	 }
 
 	gg_data->out_gpio = gpiochip_get_desc(gc, ret);
 	return true;

commit d621e8bae5ac9c67de4de90c5cded12adc8ee1e1
Author: Ricardo Ribalda Delgado <ricardo.ribalda@gmail.com>
Date:   Wed Dec 17 16:51:13 2014 +0100

    gpio/gpiolib-of: Create of_mm_gpiochip_remove
    
    Create counterpart of of_mm_gpiochip_add(). This way the modules that
    can be removable do not duplicate the cleanup code.
    
    Suggested-by: Alexandre Courbot <gnurou@gmail.com>
    Signed-off-by: Ricardo Ribalda Delgado <ricardo.ribalda@gmail.com>
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>

diff --git a/drivers/gpio/gpiolib-of.c b/drivers/gpio/gpiolib-of.c
index 604dbe60bdee..3e2c6afeab11 100644
--- a/drivers/gpio/gpiolib-of.c
+++ b/drivers/gpio/gpiolib-of.c
@@ -204,6 +204,23 @@ int of_mm_gpiochip_add(struct device_node *np,
 }
 EXPORT_SYMBOL(of_mm_gpiochip_add);
 
+/**
+ * of_mm_gpiochip_remove - Remove memory mapped GPIO chip (bank)
+ * @mm_gc:	pointer to the of_mm_gpio_chip allocated structure
+ */
+void of_mm_gpiochip_remove(struct of_mm_gpio_chip *mm_gc)
+{
+	struct gpio_chip *gc = &mm_gc->gc;
+
+	if (!mm_gc)
+		return;
+
+	gpiochip_remove(gc);
+	iounmap(mm_gc->regs);
+	kfree(gc->label);
+}
+EXPORT_SYMBOL(of_mm_gpiochip_remove);
+
 #ifdef CONFIG_PINCTRL
 static void of_gpiochip_add_pin_range(struct gpio_chip *chip)
 {

commit 8a69155040bf8745a9a95da8cbaab2940b4093d5
Author: Julia Lawall <Julia.Lawall@lip6.fr>
Date:   Fri Aug 8 12:07:51 2014 +0200

    gpio: delete unneeded test before of_node_put
    
    Of_node_put supports NULL as its argument, so the initial test is not
    necessary.
    
    Suggested by Uwe Kleine-KÃ¶nig.
    
    The semantic patch that fixes this problem is as follows:
    (http://coccinelle.lip6.fr/)
    
    // <smpl>
    @@
    expression e;
    @@
    
    -if (e)
       of_node_put(e);
    // </smpl>
    
    Signed-off-by: Julia Lawall <Julia.Lawall@lip6.fr>
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>

diff --git a/drivers/gpio/gpiolib-of.c b/drivers/gpio/gpiolib-of.c
index 7cfdc2278905..604dbe60bdee 100644
--- a/drivers/gpio/gpiolib-of.c
+++ b/drivers/gpio/gpiolib-of.c
@@ -307,7 +307,5 @@ void of_gpiochip_add(struct gpio_chip *chip)
 void of_gpiochip_remove(struct gpio_chip *chip)
 {
 	gpiochip_remove_pin_ranges(chip);
-
-	if (chip->of_node)
-		of_node_put(chip->of_node);
+	of_node_put(chip->of_node);
 }

commit 1bd6b601fe196b6fbce2c93536ce0f3f53577cec
Author: Alexandre Courbot <acourbot@nvidia.com>
Date:   Tue Jul 22 16:17:41 2014 +0900

    gpio: make gpiochip_get_desc() gpiolib-private
    
    As GPIO descriptors are not going to remain unique anymore, having this
    function public is not safe. Restrain its use to gpiolib since we have
    no user outside of it.
    
    Signed-off-by: Alexandre Courbot <acourbot@nvidia.com>
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>

diff --git a/drivers/gpio/gpiolib-of.c b/drivers/gpio/gpiolib-of.c
index 3e2fae205bee..7cfdc2278905 100644
--- a/drivers/gpio/gpiolib-of.c
+++ b/drivers/gpio/gpiolib-of.c
@@ -23,7 +23,7 @@
 #include <linux/pinctrl/pinctrl.h>
 #include <linux/slab.h>
 
-struct gpio_desc;
+#include "gpiolib.h"
 
 /* Private data structure for of_gpiochip_find_and_xlate */
 struct gg_data {

commit f63ad7ed71e525b74fe486d25cdc788d6531f4a9
Author: Alexandre Courbot <acourbot@nvidia.com>
Date:   Tue Jul 22 16:17:39 2014 +0900

    gpio: remove export of private of_get_named_gpio_flags()
    
    of_get_named_gpio_flags() has been made gpiolib-private by commit
    f01d907582, but its EXPORT statement has not been removed. Fix this.
    
    Signed-off-by: Alexandre Courbot <acourbot@nvidia.com>
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>

diff --git a/drivers/gpio/gpiolib-of.c b/drivers/gpio/gpiolib-of.c
index e60cdab1d15e..3e2fae205bee 100644
--- a/drivers/gpio/gpiolib-of.c
+++ b/drivers/gpio/gpiolib-of.c
@@ -95,7 +95,6 @@ struct gpio_desc *of_get_named_gpiod_flags(struct device_node *np,
 		 PTR_ERR_OR_ZERO(gg_data.out_gpio));
 	return gg_data.out_gpio;
 }
-EXPORT_SYMBOL(of_get_named_gpiod_flags);
 
 int of_get_named_gpio_flags(struct device_node *np, const char *list_name,
 			    int index, enum of_gpio_flags *flags)

commit 85ea29ac1c4838a720e6fcde2805ddb33451f21b
Author: Tushar Behera <tushar.b@samsung.com>
Date:   Fri Jul 4 15:22:09 2014 +0530

    gpiolib: of: Update debug messages for of_get_named_gpiod_flags
    
    Following is the debug output (only a few examples) before and after
    the patch.
    
    $ dmesg | grep of_get_named_gpiod_flags
    
    Before:
    of_get_named_gpiod_flags: can't parse gpios property
     of node '/mmc@12220000[0]'
    of_get_named_gpiod_flags exited with status 0
    
    After:
    of_get_named_gpiod_flags: can't parse 'wp-gpios' property
     of node '/mmc@12220000[0]'
    of_get_named_gpiod_flags: parsed 'gpios' property of node
     '/gpio-keys/power[0]' - status (0)
    
    Signed-off-by: Tushar Behera <tushar.b@samsung.com>
    Reviewed-by: Alexandre Courbot <acourbot@nvidia.com>
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>

diff --git a/drivers/gpio/gpiolib-of.c b/drivers/gpio/gpiolib-of.c
index af7e25c9a9ae..e60cdab1d15e 100644
--- a/drivers/gpio/gpiolib-of.c
+++ b/drivers/gpio/gpiolib-of.c
@@ -82,15 +82,16 @@ struct gpio_desc *of_get_named_gpiod_flags(struct device_node *np,
 	ret = of_parse_phandle_with_args(np, propname, "#gpio-cells", index,
 					 &gg_data.gpiospec);
 	if (ret) {
-		pr_debug("%s: can't parse gpios property of node '%s[%d]'\n",
-			__func__, np->full_name, index);
+		pr_debug("%s: can't parse '%s' property of node '%s[%d]'\n",
+			__func__, propname, np->full_name, index);
 		return ERR_PTR(ret);
 	}
 
 	gpiochip_find(&gg_data, of_gpiochip_find_and_xlate);
 
 	of_node_put(gg_data.gpiospec.np);
-	pr_debug("%s exited with status %d\n", __func__,
+	pr_debug("%s: parsed '%s' property of node '%s[%d]' - status (%d)\n",
+		 __func__, propname, np->full_name, index,
 		 PTR_ERR_OR_ZERO(gg_data.out_gpio));
 	return gg_data.out_gpio;
 }

commit f01d907582f8461546379aa415a7c6d5cfb8e5fd
Author: Alexandre Courbot <acourbot@nvidia.com>
Date:   Sat May 17 14:54:50 2014 +0900

    gpio: make of_get_named_gpiod_flags() private
    
    of_get_named_gpiod_flags() is visible and directly usable by GPIO
    consumers, but it really should not as the gpiod interface relies
    on the simpler gpiod_get() to provide properly-configured GPIOs.
    
    of_get_named_gpiod_flags() is just used internally by gpiolib to
    implement gpiod_get(), and by the old of_get_named_gpio_flags()
    function, therefore it makes sense to make it gpiolib-private.
    
    As a side-effect, the unused (and unneeded) of_get_gpiod_flags()
    inline function is also removed, and of_get_named_gpio_flags() is moved
    from a static inline function to a regular one in gpiolib-of.c
    
    This results in all references to gpiod_* functions in of_gpio.h being
    gone, which is the way it should be since this file is part of the old
    integer GPIO interface.
    
    Changes since v1:
    - Fixed compilation error when CONFIG_OF_GPIO is not defined
    - Fixed warning due to of_gpio_flags enum not being declared
      in private gpiolib.h header
    
    Signed-off-by: Alexandre Courbot <acourbot@nvidia.com>
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>

diff --git a/drivers/gpio/gpiolib-of.c b/drivers/gpio/gpiolib-of.c
index db98d3a12f70..af7e25c9a9ae 100644
--- a/drivers/gpio/gpiolib-of.c
+++ b/drivers/gpio/gpiolib-of.c
@@ -96,6 +96,20 @@ struct gpio_desc *of_get_named_gpiod_flags(struct device_node *np,
 }
 EXPORT_SYMBOL(of_get_named_gpiod_flags);
 
+int of_get_named_gpio_flags(struct device_node *np, const char *list_name,
+			    int index, enum of_gpio_flags *flags)
+{
+	struct gpio_desc *desc;
+
+	desc = of_get_named_gpiod_flags(np, list_name, index, flags);
+
+	if (IS_ERR(desc))
+		return PTR_ERR(desc);
+	else
+		return desc_to_gpio(desc);
+}
+EXPORT_SYMBOL(of_get_named_gpio_flags);
+
 /**
  * of_gpio_simple_xlate - translate gpio_spec to the GPIO number and flags
  * @gc:		pointer to the gpio_chip structure

commit ccd9726e05f0b181016db1adcff633cf9baf5c4e
Author: Linus Walleij <linus.walleij@linaro.org>
Date:   Tue Apr 22 14:38:21 2014 +0200

    gpiolib: of: remove gpio_to_desc() usage
    
    As demonstrated by commit
    390d82e312c56b75407a3606cbcde8c4bc7f10ae
    "gpiolib: ACPI: remove gpio_to_desc() usage"
    
    gpio_to_desc() must die. Replace one of its usage by the
    newly-introduced gpiochip_get_desc() function.
    
    Reviewed-by: Alexandre Courbot <acourbot@nvidia.com>
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>

diff --git a/drivers/gpio/gpiolib-of.c b/drivers/gpio/gpiolib-of.c
index 2024d45e5503..db98d3a12f70 100644
--- a/drivers/gpio/gpiolib-of.c
+++ b/drivers/gpio/gpiolib-of.c
@@ -48,7 +48,7 @@ static int of_gpiochip_find_and_xlate(struct gpio_chip *gc, void *data)
 	if (ret < 0)
 		return false;
 
-	gg_data->out_gpio = gpio_to_desc(ret + gc->base);
+	gg_data->out_gpio = gpiochip_get_desc(gc, ret);
 	return true;
 }
 

commit bea4dbee952ac7a03885646de3247685dabad972
Author: Sachin Kamat <sachin.kamat@linaro.org>
Date:   Mon Jan 27 12:15:08 2014 +0530

    gpio: gpiolib-of: Use PTR_ERR_OR_ZERO
    
    PTR_RET is deprecated. Use PTR_ERR_OR_ZERO instead. While at it
    also include missing err.h header.
    
    Signed-off-by: Sachin Kamat <sachin.kamat@linaro.org>
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>

diff --git a/drivers/gpio/gpiolib-of.c b/drivers/gpio/gpiolib-of.c
index e0a98f581f58..2024d45e5503 100644
--- a/drivers/gpio/gpiolib-of.c
+++ b/drivers/gpio/gpiolib-of.c
@@ -12,6 +12,7 @@
  */
 
 #include <linux/device.h>
+#include <linux/err.h>
 #include <linux/errno.h>
 #include <linux/module.h>
 #include <linux/io.h>
@@ -90,7 +91,7 @@ struct gpio_desc *of_get_named_gpiod_flags(struct device_node *np,
 
 	of_node_put(gg_data.gpiospec.np);
 	pr_debug("%s exited with status %d\n", __func__,
-		 PTR_RET(gg_data.out_gpio));
+		 PTR_ERR_OR_ZERO(gg_data.out_gpio));
 	return gg_data.out_gpio;
 }
 EXPORT_SYMBOL(of_get_named_gpiod_flags);

commit c2d33069915d1f9b3b1dcc2199af11d4e072b037
Merge: 8a5dc585d500 993571273275
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Tue Nov 12 15:50:46 2013 +0900

    Merge tag 'gpio-v3.13-1' of git://git.kernel.org/pub/scm/linux/kernel/git/linusw/linux-gpio
    
    Pull GPIO changes from Linus Walleij:
     "Here is the bulk of GPIO changes for the v3.13 development cycle.
    
      I've got ACKs for the things that affect other subsystems (or it's my
      own subsystem, like pinctrl).  Most of that pertain to an attempt from
      my side to consolidate and get rid of custom GPIO implementations in
      the ARM tree.  I will continue doing this.
    
      The main change this time is the new GPIO descriptor API, background
      for this can be found in Corbet's summary from this january in LWN:
    
        http://lwn.net/Articles/533632/
    
      Summary:
    
       - Merged the GPIO descriptor API from Alexandre Courbot.  This is a
         first step toward trying to get rid of the global GPIO numberspace
         for the future.
    
       - Add an API so that driver can flag that a certain GPIO line is
         being used by a irqchip backend for generating IRQs, so that we can
         enforce checks, like not allowing users to switch that line to an
         output at runtime, since this makes no sense.  Implemented
         corresponding calls in a few select drivers.
    
       - ACPI GPIO cleanups, refactorings and switch to using the
         descriptor-based interface.
    
       - Support for the TPS80036 Palmas GPIO variant.
    
       - A new driver for the Broadcom Kona GPIO SoC IP block.
    
       - Device tree support for the PCF857x driver.
    
       - A set of ARM GPIO refactorings with the goal of getting rid of a
         bunch of custom GPIO implementations from the arch/arm/* tree:
    
         * Move the IOP GPIO driver to the GPIO subsystem and fix all users
           to use the gpiolib API for accessing GPIOs.  Delete the old
           custom GPIO implementation.
    
         * Delete the unused custom PXA GPIO implemention.
    
         * Convert all users of the IXP4 custom GPIO implementation to use
           gpiolib and delete the custom implementation.
    
         * Delete the custom Gemini GPIO implementation, also completely
           unused.
    
       - Various cleanups and renamings"
    
    * tag 'gpio-v3.13-1' of git://git.kernel.org/pub/scm/linux/kernel/git/linusw/linux-gpio: (85 commits)
      gpio: gpio-mxs: Remove unneeded dt checks
      gpio: pl061: don't depend on CONFIG_ARM
      gpio: bcm-kona: add missing .owner to struct gpio_chip
      gpiolib: provide a declaration of seq_file in gpio/driver.h
      gpiolib: include gpio/consumer.h in of_gpio.h for desc_to_gpio()
      gpio: provide stubs for devres gpio functions
      gpiolib: devres: add missing headers
      gpiolib: make GPIO_DEVRES depend on GPIOLIB
      gpiolib: devres: fix devm_gpiod_get_index()
      gpiolib / ACPI: document the GPIO descriptor based interface
      gpiolib / ACPI: allow passing GPIOF_ACTIVE_LOW for GpioInt resources
      gpiolib / ACPI: add ACPI support for gpiod_get_index()
      gpiolib / ACPI: convert to gpiod interfaces
      gpiolib: add gpiod_get() and gpiod_put() functions
      gpiolib: port of_ functions to use gpiod
      gpiolib: export descriptor-based GPIO interface
      Fixup "MAINTAINERS: GPIO-INTEL-MID: add maintainer"
      gpio: bcm281xx: Don't print addresses of GPIO area in probe()
      gpio: tegra: use new gpio_lock_as_irq() API
      gpio: rcar: Include linux/of.h header
      ...

commit af8b6375a8291fe2cf77707f3edec86b98a999cc
Author: Alexandre Courbot <acourbot@nvidia.com>
Date:   Thu Oct 17 10:21:37 2013 -0700

    gpiolib: port of_ functions to use gpiod
    
    Refactor the of_ functions of gpiolib to use the now public gpiod
    interface, and export of_get_named_gpiod_flags() and
    of_get_gpiod_flags() functions.
    
    Signed-off-by: Alexandre Courbot <acourbot@nvidia.com>
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>

diff --git a/drivers/gpio/gpiolib-of.c b/drivers/gpio/gpiolib-of.c
index 0dfaf20e4dad..32a396d891be 100644
--- a/drivers/gpio/gpiolib-of.c
+++ b/drivers/gpio/gpiolib-of.c
@@ -15,19 +15,21 @@
 #include <linux/errno.h>
 #include <linux/module.h>
 #include <linux/io.h>
-#include <linux/gpio.h>
+#include <linux/gpio/consumer.h>
 #include <linux/of.h>
 #include <linux/of_address.h>
 #include <linux/of_gpio.h>
 #include <linux/pinctrl/pinctrl.h>
 #include <linux/slab.h>
 
+struct gpio_desc;
+
 /* Private data structure for of_gpiochip_find_and_xlate */
 struct gg_data {
 	enum of_gpio_flags *flags;
 	struct of_phandle_args gpiospec;
 
-	int out_gpio;
+	struct gpio_desc *out_gpio;
 };
 
 /* Private function for resolving node pointer to gpio_chip */
@@ -45,28 +47,31 @@ static int of_gpiochip_find_and_xlate(struct gpio_chip *gc, void *data)
 	if (ret < 0)
 		return false;
 
-	gg_data->out_gpio = ret + gc->base;
+	gg_data->out_gpio = gpio_to_desc(ret + gc->base);
 	return true;
 }
 
 /**
- * of_get_named_gpio_flags() - Get a GPIO number and flags to use with GPIO API
+ * of_get_named_gpiod_flags() - Get a GPIO descriptor and flags for GPIO API
  * @np:		device node to get GPIO from
  * @propname:	property name containing gpio specifier(s)
  * @index:	index of the GPIO
  * @flags:	a flags pointer to fill in
  *
- * Returns GPIO number to use with Linux generic GPIO API, or one of the errno
+ * Returns GPIO descriptor to use with Linux GPIO API, or one of the errno
  * value on the error condition. If @flags is not NULL the function also fills
  * in flags for the GPIO.
  */
-int of_get_named_gpio_flags(struct device_node *np, const char *propname,
-			   int index, enum of_gpio_flags *flags)
+struct gpio_desc *of_get_named_gpiod_flags(struct device_node *np,
+		     const char *propname, int index, enum of_gpio_flags *flags)
 {
 	/* Return -EPROBE_DEFER to support probe() functions to be called
 	 * later when the GPIO actually becomes available
 	 */
-	struct gg_data gg_data = { .flags = flags, .out_gpio = -EPROBE_DEFER };
+	struct gg_data gg_data = {
+		.flags = flags,
+		.out_gpio = ERR_PTR(-EPROBE_DEFER)
+	};
 	int ret;
 
 	/* .of_xlate might decide to not fill in the flags, so clear it. */
@@ -78,16 +83,17 @@ int of_get_named_gpio_flags(struct device_node *np, const char *propname,
 	if (ret) {
 		pr_debug("%s: can't parse gpios property of node '%s[%d]'\n",
 			__func__, np->full_name, index);
-		return ret;
+		return ERR_PTR(ret);
 	}
 
 	gpiochip_find(&gg_data, of_gpiochip_find_and_xlate);
 
 	of_node_put(gg_data.gpiospec.np);
-	pr_debug("%s exited with status %d\n", __func__, gg_data.out_gpio);
+	pr_debug("%s exited with status %d\n", __func__,
+		 PTR_RET(gg_data.out_gpio));
 	return gg_data.out_gpio;
 }
-EXPORT_SYMBOL(of_get_named_gpio_flags);
+EXPORT_SYMBOL(of_get_named_gpiod_flags);
 
 /**
  * of_gpio_simple_xlate - translate gpio_spec to the GPIO number and flags

commit 586a87e6edc936d6d3c3585af504b33b9c3f0a06
Author: Christian Ruppert <christian.ruppert@abilis.com>
Date:   Tue Oct 15 15:37:54 2013 +0200

    pinctrl/gpio: non-linear GPIO ranges accesible from gpiolib
    
    This patch adds the infrastructure required to register non-linear gpio
    ranges through gpiolib and the standard GPIO device tree bindings.
    
    Signed-off-by: Christian Ruppert <christian.ruppert@abilis.com>
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>

diff --git a/drivers/gpio/gpiolib-of.c b/drivers/gpio/gpiolib-of.c
index 0dfaf20e4dad..e78760921bd7 100644
--- a/drivers/gpio/gpiolib-of.c
+++ b/drivers/gpio/gpiolib-of.c
@@ -190,10 +190,15 @@ static void of_gpiochip_add_pin_range(struct gpio_chip *chip)
 	struct of_phandle_args pinspec;
 	struct pinctrl_dev *pctldev;
 	int index = 0, ret;
+	const char *name;
+	static const char group_names_propname[] = "gpio-ranges-group-names";
+	struct property *group_names;
 
 	if (!np)
 		return;
 
+	group_names = of_find_property(np, group_names_propname, NULL);
+
 	for (;; index++) {
 		ret = of_parse_phandle_with_fixed_args(np, "gpio-ranges", 3,
 				index, &pinspec);
@@ -204,14 +209,56 @@ static void of_gpiochip_add_pin_range(struct gpio_chip *chip)
 		if (!pctldev)
 			break;
 
-		ret = gpiochip_add_pin_range(chip,
-					     pinctrl_dev_get_devname(pctldev),
-					     pinspec.args[0],
-					     pinspec.args[1],
-					     pinspec.args[2]);
-
-		if (ret)
-			break;
+		if (pinspec.args[2]) {
+			if (group_names) {
+				ret = of_property_read_string_index(np,
+						group_names_propname,
+						index, &name);
+				if (strlen(name)) {
+					pr_err("%s: Group name of numeric GPIO ranges must be the empty string.\n",
+						np->full_name);
+					break;
+				}
+			}
+			/* npins != 0: linear range */
+			ret = gpiochip_add_pin_range(chip,
+					pinctrl_dev_get_devname(pctldev),
+					pinspec.args[0],
+					pinspec.args[1],
+					pinspec.args[2]);
+			if (ret)
+				break;
+		} else {
+			/* npins == 0: special range */
+			if (pinspec.args[1]) {
+				pr_err("%s: Illegal gpio-range format.\n",
+					np->full_name);
+				break;
+			}
+
+			if (!group_names) {
+				pr_err("%s: GPIO group range requested but no %s property.\n",
+					np->full_name, group_names_propname);
+				break;
+			}
+
+			ret = of_property_read_string_index(np,
+						group_names_propname,
+						index, &name);
+			if (ret)
+				break;
+
+			if (!strlen(name)) {
+				pr_err("%s: Group name of GPIO group range cannot be the empty string.\n",
+				np->full_name);
+				break;
+			}
+
+			ret = gpiochip_add_pingroup_range(chip, pctldev,
+						pinspec.args[0], name);
+			if (ret)
+				break;
+		}
 	}
 }
 

commit 31f7c3a688f75bceaf2fd009efc489659ad6aa61
Merge: ec5b103ecfde 2bc552df76d8
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Tue Sep 10 13:53:52 2013 -0700

    Merge tag 'devicetree-for-linus' of git://git.secretlab.ca/git/linux
    
    Pull device tree core updates from Grant Likely:
     "Generally minor changes.  A bunch of bug fixes, particularly for
      initialization and some refactoring.  Most notable change if feeding
      the entire flattened tree into the random pool at boot.  May not be
      significant, but shouldn't hurt either"
    
    Tim Bird questions whether the boot time cost of the random feeding may
    be noticeable.  And "add_device_randomness()" is definitely not some
    speed deamon of a function.
    
    * tag 'devicetree-for-linus' of git://git.secretlab.ca/git/linux:
      of/platform: add error reporting to of_amba_device_create()
      irq/of: Fix comment typo for irq_of_parse_and_map
      of: Feed entire flattened device tree into the random pool
      of/fdt: Clean up casting in unflattening path
      of/fdt: Remove duplicate memory clearing on FDT unflattening
      gpio: implement gpio-ranges binding document fix
      of: call __of_parse_phandle_with_args from of_parse_phandle
      of: introduce of_parse_phandle_with_fixed_args
      of: move of_parse_phandle()
      of: move documentation of of_parse_phandle_with_args
      of: Fix missing memory initialization on FDT unflattening
      of: consolidate definition of early_init_dt_alloc_memory_arch()
      of: Make of_get_phy_mode() return int i.s.o. const int
      include: dt-binding: input: create a DT header defining key codes.
      of/platform: Staticize of_platform_device_create_pdata()
      of: Specify initrd location using 64-bit
      dt: Typo fix
      OF: make of_property_for_each_{u32|string}() use parameters if OF is not enabled

commit d9fe0039c4247383c2783923a3860227813b4d82
Author: Stephen Warren <swarren@nvidia.com>
Date:   Wed Aug 14 15:27:12 2013 -0600

    gpio: implement gpio-ranges binding document fix
    
    Use the new of_parse_phandle_with_fixed_args() to implement the
    corrected gpio-ranges DT property definition.
    
    Signed-off-by: Stephen Warren <swarren@nvidia.com>
    Acked-by: Mark Rutland <mark.rutland@arm.com>
    Acked-by: Linus Walleij <linus.walleij@linaro.org>
    Signed-off-by: Grant Likely <grant.likely@linaro.org>

diff --git a/drivers/gpio/gpiolib-of.c b/drivers/gpio/gpiolib-of.c
index 665f9530c950..48cda3c9ee94 100644
--- a/drivers/gpio/gpiolib-of.c
+++ b/drivers/gpio/gpiolib-of.c
@@ -194,8 +194,8 @@ static void of_gpiochip_add_pin_range(struct gpio_chip *chip)
 		return;
 
 	for (;; index++) {
-		ret = of_parse_phandle_with_args(np, "gpio-ranges",
-				"#gpio-range-cells", index, &pinspec);
+		ret = of_parse_phandle_with_fixed_args(np, "gpio-ranges", 3,
+				index, &pinspec);
 		if (ret)
 			break;
 

commit eddf8176b57ddb8f960b188eb8796b9d13e4efc0
Author: Lothar Waßmann <LW@KARO-electronics.de>
Date:   Wed Jul 31 16:12:54 2013 +0200

    gpio: gpiolib-of.c: make error message more meaningful by adding the node name and index
    
    Signed-off-by: Lothar Waßmann <LW@KARO-electronics.de>
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>

diff --git a/drivers/gpio/gpiolib-of.c b/drivers/gpio/gpiolib-of.c
index 665f9530c950..ba9876ffb017 100644
--- a/drivers/gpio/gpiolib-of.c
+++ b/drivers/gpio/gpiolib-of.c
@@ -76,7 +76,8 @@ int of_get_named_gpio_flags(struct device_node *np, const char *propname,
 	ret = of_parse_phandle_with_args(np, propname, "#gpio-cells", index,
 					 &gg_data.gpiospec);
 	if (ret) {
-		pr_debug("%s: can't parse gpios property\n", __func__);
+		pr_debug("%s: can't parse gpios property of node '%s[%d]'\n",
+			__func__, np->full_name, index);
 		return ret;
 	}
 

commit 30c67e93c526639aaac90fa873800104b7c16d16
Merge: f87bb9ee6270 08ffb2229faf
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Mon May 6 15:40:55 2013 -0700

    Merge tag 'gpio-for-linus' of git://git.secretlab.ca/git/linux
    
    Pull GPIO changes from Grant Likely:
     "The usual selection of bug fixes and driver updates for GPIO.  Nothing
      really stands out except the addition of the GRGPIO driver and some
      enhacements to ACPI support"
    
    I'm pulling this despite the earlier mess.  Let's hope it compiles these
    days.
    
    * tag 'gpio-for-linus' of git://git.secretlab.ca/git/linux: (46 commits)
      gpio: grgpio: Add irq support
      gpio: grgpio: Add device driver for GRGPIO cores
      gpiolib-acpi: introduce acpi_get_gpio_by_index() helper
      GPIO: gpio-generic: remove kfree() from bgpio_remove call
      gpio / ACPI: Handle ACPI events in accordance with the spec
      gpio: lpc32xx: Fix off-by-one valid range checking for bank
      gpio: mcp23s08: convert driver to DT
      gpio/omap: force restore if context loss is not detectable
      gpio/omap: optimise interrupt service routine
      gpio/omap: remove extra context restores in *_runtime_resume()
      gpio/omap: free irq domain in probe() failure paths
      gpio: gpio-generic: Add 16 and 32 bit big endian byte order support
      gpio: samsung: Add terminating entry for exynos_pinctrl_ids
      gpio: mvebu: add dbg_show function
      MAX7301 GPIO: Do not force SPI speed when using OF Platform
      gpio: gpio-tps65910.c: fix checkpatch error
      gpio: gpio-timberdale.c: fix checkpatch error
      gpio: gpio-tc3589x.c: fix checkpatch errors
      gpio: gpio-stp-xway.c: fix checkpatch error
      gpio: gpio-sch.c: fix checkpatch error
      ...

commit 6a7b3e970426f4bc2a8d52f81a4fda6595a9f052
Merge: 661462f4c6d3 07961ac7c0ee
Author: Linus Walleij <linus.walleij@linaro.org>
Date:   Wed Apr 3 22:18:36 2013 +0200

    Merge tag 'v3.9-rc5' into devel
    
    Linux 3.9-rc5
    
    Conflicts:
            drivers/pinctrl/pinconf.c

commit 9ccb1a26cedf0a03a59f70f270565f3884ec08f6
Author: Laurent Navet <laurent.navet@gmail.com>
Date:   Wed Mar 20 13:15:55 2013 +0100

    gpio: gpiolib-of.c: fix checkpatch error
    
    Fix :
     gpio/gpiolib-of.c:64: ERROR: code indent should use tabs where possible
    
    Signed-off-by: Laurent Navet <laurent.navet@gmail.com>
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>

diff --git a/drivers/gpio/gpiolib-of.c b/drivers/gpio/gpiolib-of.c
index a71a54a3e3f7..8940793912d9 100644
--- a/drivers/gpio/gpiolib-of.c
+++ b/drivers/gpio/gpiolib-of.c
@@ -61,7 +61,7 @@ static int of_gpiochip_find_and_xlate(struct gpio_chip *gc, void *data)
  * in flags for the GPIO.
  */
 int of_get_named_gpio_flags(struct device_node *np, const char *propname,
-                           int index, enum of_gpio_flags *flags)
+			   int index, enum of_gpio_flags *flags)
 {
 	/* Return -EPROBE_DEFER to support probe() functions to be called
 	 * later when the GPIO actually becomes available

commit 86853c83e33738397564e9377ceeff94d4bc041c
Author: Haojian Zhuang <haojian.zhuang@linaro.org>
Date:   Sun Feb 17 19:42:47 2013 +0800

    gpio: add gpio offset in gpio range cells property
    
    Add gpio offset into "gpio-range-cells" property. It's used to support
    sparse pinctrl range in gpio chip.
    
    Signed-off-by: Haojian Zhuang <haojian.zhuang@linaro.org>
    Acked-by: Viresh Kumar <viresh.kumar@linaro.org>
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>

diff --git a/drivers/gpio/gpiolib-of.c b/drivers/gpio/gpiolib-of.c
index a71a54a3e3f7..892040ad0095 100644
--- a/drivers/gpio/gpiolib-of.c
+++ b/drivers/gpio/gpiolib-of.c
@@ -203,22 +203,11 @@ static void of_gpiochip_add_pin_range(struct gpio_chip *chip)
 		if (!pctldev)
 			break;
 
-		/*
-		 * This assumes that the n GPIO pins are consecutive in the
-		 * GPIO number space, and that the pins are also consecutive
-		 * in their local number space. Currently it is not possible
-		 * to add different ranges for one and the same GPIO chip,
-		 * as the code assumes that we have one consecutive range
-		 * on both, mapping 1-to-1.
-		 *
-		 * TODO: make the OF bindings handle multiple sparse ranges
-		 * on the same GPIO chip.
-		 */
 		ret = gpiochip_add_pin_range(chip,
 					     pinctrl_dev_get_devname(pctldev),
-					     0, /* offset in gpiochip */
 					     pinspec.args[0],
-					     pinspec.args[1]);
+					     pinspec.args[1],
+					     pinspec.args[2]);
 
 		if (ret)
 			break;

commit ad4e1a7caf937ad395ced585ca85a7d14395dc80
Author: Haojian Zhuang <haojian.zhuang@linaro.org>
Date:   Sun Feb 17 19:42:48 2013 +0800

    gpio: fix wrong checking condition for gpio range
    
    If index++ calculates from 0, the checking condition of "while
    (index++)" fails & it doesn't check any more. It doesn't follow
    the loop that used at here.
    
    Replace it by endless loop at here. Then it keeps parsing
    "gpio-ranges" property until it ends.
    
    Signed-off-by: Haojian Zhuang <haojian.zhuang@linaro.org>
    Reviewed-by: Linus Walleij <linus.walleij@linaro.org>
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>

diff --git a/drivers/gpio/gpiolib-of.c b/drivers/gpio/gpiolib-of.c
index a71a54a3e3f7..5150df6cba08 100644
--- a/drivers/gpio/gpiolib-of.c
+++ b/drivers/gpio/gpiolib-of.c
@@ -193,7 +193,7 @@ static void of_gpiochip_add_pin_range(struct gpio_chip *chip)
 	if (!np)
 		return;
 
-	do {
+	for (;; index++) {
 		ret = of_parse_phandle_with_args(np, "gpio-ranges",
 				"#gpio-range-cells", index, &pinspec);
 		if (ret)
@@ -222,8 +222,7 @@ static void of_gpiochip_add_pin_range(struct gpio_chip *chip)
 
 		if (ret)
 			break;
-
-	} while (index++);
+	}
 }
 
 #else

commit b3cdda2b4f541439ca4205793040aa2e1c852e3b
Merge: 3aad3f03b2b6 02bbde7849e6
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Wed Feb 20 11:04:46 2013 -0800

    Merge tag 'dt-for-linus' of git://git.secretlab.ca/git/linux
    
    Pull device tree changes from Grant Likely:
     "All around device tree changes destined for v3.8.  Aside from the
      documentation updates the highlights in this branch include:
    
       - Kbuild changes for using CPP with .dts files
       - locking fix from preempt_rt patchset
       - include DT alias names in device uevent
       - Selftest bugfixes and improvements
       - New function for counting phandles stanzas in a property
       - constify argument to of_node_full_name()
       - Various bug fixes
    
      This tree did also contain a commit to use platform_device_add instead
      of open-coding the device add code, but it caused problems with amba
      devices and needed to be reverted."
    
    * tag 'dt-for-linus' of git://git.secretlab.ca/git/linux: (23 commits)
      Revert "of: use platform_device_add"
      kbuild: limit dtc+cpp include path
      gpio: Make of_count_named_gpios() use new of_count_phandle_with_args()
      of: Create function for counting number of phandles in a property
      of/base: Clean up exit paths for of_parse_phandle_with_args()
      of/selftest: Use selftest() macro throughout
      of/selftest: Fix GPIOs selftest to cover the 7th case
      of: fix recursive locking in of_get_next_available_child()
      documentation/devicetree: Fix a typo in exynos-dw-mshc.txt
      OF: convert devtree lock from rw_lock to raw spinlock
      of/exynos_g2d: Add Bindings for exynos G2D driver
      kbuild: create a rule to run the pre-processor on *.dts files
      input: Extend matrix-keypad device tree binding
      devicetree: Move NS2 LEDs binding into LEDs directory
      of: use platform_device_add
      powerpc/5200: Fix size to request_mem_region() call
      documentation/devicetree: Fix typos
      of: add 'const' to of_node_full_name parameter
      of: Output devicetree alias names in uevent
      DT: add vendor prefixes for Renesas and Toshiba
      ...

commit e80beb27d2f81a1c3c8887e0e0a82d77bb392d28
Author: Grant Likely <grant.likely@secretlab.ca>
Date:   Tue Feb 12 17:48:37 2013 +0000

    gpio: Make of_count_named_gpios() use new of_count_phandle_with_args()
    
    This patch replaces the horribly coded of_count_named_gpios() with a
    call to of_count_phandle_with_args() which is far more efficient. This
    also changes the return value of of_gpio_count() & of_gpio_named_count()
    from 'unsigned int' to 'int' so that it can return an error code. All
    the users of that function are fixed up to correctly handle a negative
    return value.
    
    v2: Split GPIO portion into a separate patch
    
    Tested-by: Andreas Larsson <andreas@gaisler.com>
    Signed-off-by: Grant Likely <grant.likely@secretlab.ca>
    Cc: Linus Walleij <linus.walleij@linaro.org>
    Cc: Rob Herring <rob.herring@calxeda.com>

diff --git a/drivers/gpio/gpiolib-of.c b/drivers/gpio/gpiolib-of.c
index d542a141811a..dd8a2129222f 100644
--- a/drivers/gpio/gpiolib-of.c
+++ b/drivers/gpio/gpiolib-of.c
@@ -88,41 +88,6 @@ int of_get_named_gpio_flags(struct device_node *np, const char *propname,
 }
 EXPORT_SYMBOL(of_get_named_gpio_flags);
 
-/**
- * of_gpio_named_count - Count GPIOs for a device
- * @np:		device node to count GPIOs for
- * @propname:	property name containing gpio specifier(s)
- *
- * The function returns the count of GPIOs specified for a node.
- *
- * Note that the empty GPIO specifiers counts too. For example,
- *
- * gpios = <0
- *          &pio1 1 2
- *          0
- *          &pio2 3 4>;
- *
- * defines four GPIOs (so this function will return 4), two of which
- * are not specified.
- */
-unsigned int of_gpio_named_count(struct device_node *np, const char* propname)
-{
-	unsigned int cnt = 0;
-
-	do {
-		int ret;
-
-		ret = of_parse_phandle_with_args(np, propname, "#gpio-cells",
-						 cnt, NULL);
-		/* A hole in the gpios = <> counts anyway. */
-		if (ret < 0 && ret != -EEXIST)
-			break;
-	} while (++cnt);
-
-	return cnt;
-}
-EXPORT_SYMBOL(of_gpio_named_count);
-
 /**
  * of_gpio_simple_xlate - translate gpio_spec to the GPIO number and flags
  * @gc:		pointer to the gpio_chip structure

commit ef5e3eef6b6b22eb4ad7a893d2299418808667ba
Author: Haojian Zhuang <haojian.zhuang@linaro.org>
Date:   Fri Jan 18 15:31:07 2013 +0800

    gpio: use pinctrl device name for add range
    
    gpiochip_add_pin_range() needs pinctrl device name as parameter.
    Currently the parameter is pinctrl description name. So fix it.
    
    Signed-off-by: Haojian Zhuang <haojian.zhuang@linaro.org>
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>

diff --git a/drivers/gpio/gpiolib-of.c b/drivers/gpio/gpiolib-of.c
index d542a141811a..25b1dbe8921d 100644
--- a/drivers/gpio/gpiolib-of.c
+++ b/drivers/gpio/gpiolib-of.c
@@ -250,7 +250,7 @@ static void of_gpiochip_add_pin_range(struct gpio_chip *chip)
 		 * on the same GPIO chip.
 		 */
 		ret = gpiochip_add_pin_range(chip,
-					     pinctrl_dev_get_name(pctldev),
+					     pinctrl_dev_get_devname(pctldev),
 					     0, /* offset in gpiochip */
 					     pinspec.args[0],
 					     pinspec.args[1]);

commit 3f0f8670608766ef26a178d4e80cad3ce030fecc
Author: Linus Walleij <linus.walleij@linaro.org>
Date:   Tue Nov 20 12:40:15 2012 +0100

    gpiolib: let gpiochip_add_pin_range() specify offset
    
    Like with commit 3c739ad0df5eb41cd7adad879eda6aa09879eb76
    it is not always enough to specify all the pins of a gpio_chip
    from offset zero to be added to a pin map range, since the
    mapping from GPIO to pin controller may not be linear at all,
    but need to be broken into a few consecutive sub-ranges or
    1-pin entries for complicated cases. The ranges may also be
    sparse.
    
    This alters the signature of the function to accept offsets
    into both the GPIO-chip local pinspace and the pin controller
    local pinspace.
    
    Reviewed-by: Stephen Warren <swarren@nvidia.com>
    Reviewed-by: Viresh Kumar <viresh.kumar@linaro.org>
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>

diff --git a/drivers/gpio/gpiolib-of.c b/drivers/gpio/gpiolib-of.c
index a40cd84c5c10..d542a141811a 100644
--- a/drivers/gpio/gpiolib-of.c
+++ b/drivers/gpio/gpiolib-of.c
@@ -238,8 +238,20 @@ static void of_gpiochip_add_pin_range(struct gpio_chip *chip)
 		if (!pctldev)
 			break;
 
+		/*
+		 * This assumes that the n GPIO pins are consecutive in the
+		 * GPIO number space, and that the pins are also consecutive
+		 * in their local number space. Currently it is not possible
+		 * to add different ranges for one and the same GPIO chip,
+		 * as the code assumes that we have one consecutive range
+		 * on both, mapping 1-to-1.
+		 *
+		 * TODO: make the OF bindings handle multiple sparse ranges
+		 * on the same GPIO chip.
+		 */
 		ret = gpiochip_add_pin_range(chip,
 					     pinctrl_dev_get_name(pctldev),
+					     0, /* offset in gpiochip */
 					     pinspec.args[0],
 					     pinspec.args[1]);
 

commit 1e63d7b9363f0c57d00991f9f2e0af374dfc591a
Author: Linus Walleij <linus.walleij@linaro.org>
Date:   Tue Nov 6 16:03:35 2012 +0100

    gpiolib: separation of pin concerns
    
    The fact that of_gpiochip_add_pin_range() and
    gpiochip_add_pin_range() share too much code is fragile and
    will invariably mean that bugs need to be fixed in two places
    instead of one.
    
    So separate the concerns of gpiolib.c and gpiolib-of.c and
    have the latter call the former as back-end. This is necessary
    also when going forward with other device descriptions such
    as ACPI.
    
    This is done by:
    
    - Adding a return code to gpiochip_add_pin_range() so we can
      reliably check whether this succeeds.
    
    - Get rid of the custom of_pinctrl_add_gpio_range() from
      pinctrl. Instead create of_pinctrl_get() to just retrive the
      pin controller per se from an OF node. This composite
      function was just begging to be deleted, it was way to
      purpose-specific.
    
    - Use pinctrl_dev_get_name() to get the name of the retrieved
      pin controller and use that to call back into the generic
      gpiochip_add_pin_range().
    
    Now the pin range is only allocated and tied to a pin
    controller from the core implementation in gpiolib.c.
    
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>

diff --git a/drivers/gpio/gpiolib-of.c b/drivers/gpio/gpiolib-of.c
index 67403e47e4dc..a40cd84c5c10 100644
--- a/drivers/gpio/gpiolib-of.c
+++ b/drivers/gpio/gpiolib-of.c
@@ -221,8 +221,8 @@ EXPORT_SYMBOL(of_mm_gpiochip_add);
 static void of_gpiochip_add_pin_range(struct gpio_chip *chip)
 {
 	struct device_node *np = chip->of_node;
-	struct gpio_pin_range *pin_range;
 	struct of_phandle_args pinspec;
+	struct pinctrl_dev *pctldev;
 	int index = 0, ret;
 
 	if (!np)
@@ -234,22 +234,17 @@ static void of_gpiochip_add_pin_range(struct gpio_chip *chip)
 		if (ret)
 			break;
 
-		pin_range = devm_kzalloc(chip->dev, sizeof(*pin_range),
-				GFP_KERNEL);
-		if (!pin_range) {
-			pr_err("%s: GPIO chip: failed to allocate pin ranges\n",
-					chip->label);
+		pctldev = of_pinctrl_get(pinspec.np);
+		if (!pctldev)
 			break;
-		}
 
-		pin_range->range.name = chip->label;
-		pin_range->range.base = chip->base;
-		pin_range->range.pin_base = pinspec.args[0];
-		pin_range->range.npins = pinspec.args[1];
-		pin_range->pctldev = of_pinctrl_add_gpio_range(pinspec.np,
-				&pin_range->range);
+		ret = gpiochip_add_pin_range(chip,
+					     pinctrl_dev_get_name(pctldev),
+					     pinspec.args[0],
+					     pinspec.args[1]);
 
-		list_add_tail(&pin_range->node, &chip->pin_ranges);
+		if (ret)
+			break;
 
 	} while (index++);
 }

commit e93fa3f24353e45b189bae656ba000d0533777a3
Author: Linus Walleij <linus.walleij@linaro.org>
Date:   Tue Nov 6 15:03:47 2012 +0100

    gpiolib: remove duplicate pin range code
    
    Commit 69e1601bca88809dc118abd1becb02c15a02ec71
    "gpiolib: provide provision to register pin ranges"
    
    Introduced both of_gpiochip_remove_pin_range() and
    gpiochip_remove_pin_ranges(). But the contents are exactly
    the same so remove the OF one and rely on the range deletion
    in the core.
    
    Reviewed-by: Stephen Warren <swarren@nvidia.com>
    Reviewed-by: Viresh Kumar <viresh.kumar@linaro.org>
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>

diff --git a/drivers/gpio/gpiolib-of.c b/drivers/gpio/gpiolib-of.c
index 220caa5978f7..67403e47e4dc 100644
--- a/drivers/gpio/gpiolib-of.c
+++ b/drivers/gpio/gpiolib-of.c
@@ -254,19 +254,8 @@ static void of_gpiochip_add_pin_range(struct gpio_chip *chip)
 	} while (index++);
 }
 
-static void of_gpiochip_remove_pin_range(struct gpio_chip *chip)
-{
-	struct gpio_pin_range *pin_range, *tmp;
-
-	list_for_each_entry_safe(pin_range, tmp, &chip->pin_ranges, node) {
-		list_del(&pin_range->node);
-		pinctrl_remove_gpio_range(pin_range->pctldev,
-				&pin_range->range);
-	}
-}
 #else
 static void of_gpiochip_add_pin_range(struct gpio_chip *chip) {}
-static void of_gpiochip_remove_pin_range(struct gpio_chip *chip) {}
 #endif
 
 void of_gpiochip_add(struct gpio_chip *chip)
@@ -288,7 +277,7 @@ void of_gpiochip_add(struct gpio_chip *chip)
 
 void of_gpiochip_remove(struct gpio_chip *chip)
 {
-	of_gpiochip_remove_pin_range(chip);
+	gpiochip_remove_pin_ranges(chip);
 
 	if (chip->of_node)
 		of_node_put(chip->of_node);

commit 167c1af9443757bb9d27ceff8ba4304302cb0651
Author: Linus Walleij <linus.walleij@linaro.org>
Date:   Tue Nov 6 14:58:55 2012 +0100

    gpiolib-of: staticize the pin range calls
    
    Commit 69e1601bca88809dc118abd1becb02c15a02ec71
    "gpiolib: provide provision to register pin ranges"
    
    Declared the of_gpiochip_[add|remove]_pin_range() global
    while they should be static as they are only ever used in
    this file. Let's convert them to static.
    
    Reviewed-by: Stephen Warren <swarren@nvidia.com>
    Reviewed-by: Viresh Kumar <viresh.kumar@linaro.org>
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>

diff --git a/drivers/gpio/gpiolib-of.c b/drivers/gpio/gpiolib-of.c
index a5b90c8e9844..220caa5978f7 100644
--- a/drivers/gpio/gpiolib-of.c
+++ b/drivers/gpio/gpiolib-of.c
@@ -218,7 +218,7 @@ int of_mm_gpiochip_add(struct device_node *np,
 EXPORT_SYMBOL(of_mm_gpiochip_add);
 
 #ifdef CONFIG_PINCTRL
-void of_gpiochip_add_pin_range(struct gpio_chip *chip)
+static void of_gpiochip_add_pin_range(struct gpio_chip *chip)
 {
 	struct device_node *np = chip->of_node;
 	struct gpio_pin_range *pin_range;
@@ -254,7 +254,7 @@ void of_gpiochip_add_pin_range(struct gpio_chip *chip)
 	} while (index++);
 }
 
-void of_gpiochip_remove_pin_range(struct gpio_chip *chip)
+static void of_gpiochip_remove_pin_range(struct gpio_chip *chip)
 {
 	struct gpio_pin_range *pin_range, *tmp;
 
@@ -265,8 +265,8 @@ void of_gpiochip_remove_pin_range(struct gpio_chip *chip)
 	}
 }
 #else
-void of_gpiochip_add_pin_range(struct gpio_chip *chip) {}
-void of_gpiochip_remove_pin_range(struct gpio_chip *chip) {}
+static void of_gpiochip_add_pin_range(struct gpio_chip *chip) {}
+static void of_gpiochip_remove_pin_range(struct gpio_chip *chip) {}
 #endif
 
 void of_gpiochip_add(struct gpio_chip *chip)

commit f23f1516b6757c326cc638bed8c402c77e2a596e
Author: Shiraz Hashim <shiraz.hashim@st.com>
Date:   Sat Oct 27 15:21:36 2012 +0530

    gpiolib: provide provision to register pin ranges
    
    pinctrl subsystem needs gpio chip base to prepare set of gpio
    pin ranges, which a given pinctrl driver can handle. This is
    important to handle pinctrl gpio request calls in order to
    program a given pin properly for gpio operation.
    
    As gpio base is allocated dynamically during gpiochip
    registration, presently there exists no clean way to pass this
    information to the pinctrl subsystem.
    
    After few discussions from [1], it was concluded that may be
    gpio controller reporting the pin range it supports, is a
    better way than pinctrl subsystem directly registering it.
    
    [1] http://comments.gmane.org/gmane.linux.ports.arm.kernel/184816
    
    Cc: Grant Likely <grant.likely@secretlab.ca>
    Signed-off-by: Viresh Kumar <viresh.kumar@linaro.org>
    Signed-off-by: Shiraz Hashim <shiraz.hashim@st.com>
    [Edited documentation a bit]
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>

diff --git a/drivers/gpio/gpiolib-of.c b/drivers/gpio/gpiolib-of.c
index f1a45997aea8..a5b90c8e9844 100644
--- a/drivers/gpio/gpiolib-of.c
+++ b/drivers/gpio/gpiolib-of.c
@@ -19,6 +19,7 @@
 #include <linux/of.h>
 #include <linux/of_address.h>
 #include <linux/of_gpio.h>
+#include <linux/pinctrl/pinctrl.h>
 #include <linux/slab.h>
 
 /* Private data structure for of_gpiochip_find_and_xlate */
@@ -216,6 +217,58 @@ int of_mm_gpiochip_add(struct device_node *np,
 }
 EXPORT_SYMBOL(of_mm_gpiochip_add);
 
+#ifdef CONFIG_PINCTRL
+void of_gpiochip_add_pin_range(struct gpio_chip *chip)
+{
+	struct device_node *np = chip->of_node;
+	struct gpio_pin_range *pin_range;
+	struct of_phandle_args pinspec;
+	int index = 0, ret;
+
+	if (!np)
+		return;
+
+	do {
+		ret = of_parse_phandle_with_args(np, "gpio-ranges",
+				"#gpio-range-cells", index, &pinspec);
+		if (ret)
+			break;
+
+		pin_range = devm_kzalloc(chip->dev, sizeof(*pin_range),
+				GFP_KERNEL);
+		if (!pin_range) {
+			pr_err("%s: GPIO chip: failed to allocate pin ranges\n",
+					chip->label);
+			break;
+		}
+
+		pin_range->range.name = chip->label;
+		pin_range->range.base = chip->base;
+		pin_range->range.pin_base = pinspec.args[0];
+		pin_range->range.npins = pinspec.args[1];
+		pin_range->pctldev = of_pinctrl_add_gpio_range(pinspec.np,
+				&pin_range->range);
+
+		list_add_tail(&pin_range->node, &chip->pin_ranges);
+
+	} while (index++);
+}
+
+void of_gpiochip_remove_pin_range(struct gpio_chip *chip)
+{
+	struct gpio_pin_range *pin_range, *tmp;
+
+	list_for_each_entry_safe(pin_range, tmp, &chip->pin_ranges, node) {
+		list_del(&pin_range->node);
+		pinctrl_remove_gpio_range(pin_range->pctldev,
+				&pin_range->range);
+	}
+}
+#else
+void of_gpiochip_add_pin_range(struct gpio_chip *chip) {}
+void of_gpiochip_remove_pin_range(struct gpio_chip *chip) {}
+#endif
+
 void of_gpiochip_add(struct gpio_chip *chip)
 {
 	if ((!chip->of_node) && (chip->dev))
@@ -229,11 +282,14 @@ void of_gpiochip_add(struct gpio_chip *chip)
 		chip->of_xlate = of_gpio_simple_xlate;
 	}
 
+	of_gpiochip_add_pin_range(chip);
 	of_node_get(chip->of_node);
 }
 
 void of_gpiochip_remove(struct gpio_chip *chip)
 {
+	of_gpiochip_remove_pin_range(chip);
+
 	if (chip->of_node)
 		of_node_put(chip->of_node);
 }

commit c61307a7cc1be87b6785dad0885492b6ca7998db
Author: Thierry Reding <thierry.reding@avionic-design.de>
Date:   Thu Aug 9 08:38:43 2012 +0200

    gpio: Fix debug message in of_get_named_gpio_flags()
    
    This was probably missed in the conversion done in commit 3d0f7cf
    ("gpio: Adjust of_xlate API to support multiple GPIO chips").
    
    Signed-off-by: Thierry Reding <thierry.reding@avionic-design.de>
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>

diff --git a/drivers/gpio/gpiolib-of.c b/drivers/gpio/gpiolib-of.c
index a18c4aa68b1e..f1a45997aea8 100644
--- a/drivers/gpio/gpiolib-of.c
+++ b/drivers/gpio/gpiolib-of.c
@@ -82,7 +82,7 @@ int of_get_named_gpio_flags(struct device_node *np, const char *propname,
 	gpiochip_find(&gg_data, of_gpiochip_find_and_xlate);
 
 	of_node_put(gg_data.gpiospec.np);
-	pr_debug("%s exited with status %d\n", __func__, ret);
+	pr_debug("%s exited with status %d\n", __func__, gg_data.out_gpio);
 	return gg_data.out_gpio;
 }
 EXPORT_SYMBOL(of_get_named_gpio_flags);

commit 4fbb0022cba37eef4a263183fdb7dbee89b299f2
Author: Roland Stigge <stigge@antcom.de>
Date:   Thu Jun 28 00:32:14 2012 +0200

    gpio: of_get_named_gpio_flags() return -EPROBE_DEFER if GPIO not yet available
    
    of_get_named_gpio_flags() and of_get_named_gpio() return -EPROBE_DEFER if the
    respective GPIO is not (yet) available. This is useful if driver's probe()
    functions try to get a GPIO whose controller isn't probed yet. Thus, the driver
    can be probed again later on.
    
    The function still returns -EINVAL on other errors (parse error or node doesn't
    exist). This way, the case of an optional/intentionally missing GPIO is handled
    appropriately.
    
    Signed-off-by: Roland Stigge <stigge@antcom.de>
    Acked-by: Alexandre Pereira da Silva <aletes.xgr@gmail.com>
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>

diff --git a/drivers/gpio/gpiolib-of.c b/drivers/gpio/gpiolib-of.c
index a71aecac451f..a18c4aa68b1e 100644
--- a/drivers/gpio/gpiolib-of.c
+++ b/drivers/gpio/gpiolib-of.c
@@ -62,7 +62,10 @@ static int of_gpiochip_find_and_xlate(struct gpio_chip *gc, void *data)
 int of_get_named_gpio_flags(struct device_node *np, const char *propname,
                            int index, enum of_gpio_flags *flags)
 {
-	struct gg_data gg_data = { .flags = flags, .out_gpio = -ENODEV };
+	/* Return -EPROBE_DEFER to support probe() functions to be called
+	 * later when the GPIO actually becomes available
+	 */
+	struct gg_data gg_data = { .flags = flags, .out_gpio = -EPROBE_DEFER };
 	int ret;
 
 	/* .of_xlate might decide to not fill in the flags, so clear it. */

commit 41920d16360ebc8c482911078a17d9994fb77612
Author: Alexandre Courbot <acourbot@nvidia.com>
Date:   Fri Jun 29 13:57:59 2012 +0900

    gpio: propagate of_parse_phandle_with_args errors
    
    Make of_get_named_gpio_flags propagate any error it receives from
    of_parse_phandle_with_args instead of inconditionally returning -EINVAL.
    
    Signed-off-by: Alexandre Courbot <acourbot@nvidia.com>
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>

diff --git a/drivers/gpio/gpiolib-of.c b/drivers/gpio/gpiolib-of.c
index 8389d4a0ec45..a71aecac451f 100644
--- a/drivers/gpio/gpiolib-of.c
+++ b/drivers/gpio/gpiolib-of.c
@@ -73,7 +73,7 @@ int of_get_named_gpio_flags(struct device_node *np, const char *propname,
 					 &gg_data.gpiospec);
 	if (ret) {
 		pr_debug("%s: can't parse gpios property\n", __func__);
-		return -EINVAL;
+		return ret;
 	}
 
 	gpiochip_find(&gg_data, of_gpiochip_find_and_xlate);

commit 0df2c999f748c9528f6629f45baaa86118d60cd1
Author: Dong Aisheng <dong.aisheng@linaro.org>
Date:   Fri May 25 21:36:15 2012 +0800

    gpio/of: fix a typo of comment message
    
    Signed-off-by: Dong Aisheng <dong.aisheng@linaro.org>
    Signed-off-by: Grant Likely <grant.likely@secretlab.ca>

diff --git a/drivers/gpio/gpiolib-of.c b/drivers/gpio/gpiolib-of.c
index d18068a9f3ec..8389d4a0ec45 100644
--- a/drivers/gpio/gpiolib-of.c
+++ b/drivers/gpio/gpiolib-of.c
@@ -21,7 +21,7 @@
 #include <linux/of_gpio.h>
 #include <linux/slab.h>
 
-/* Private data structure for of_gpiochip_is_match */
+/* Private data structure for of_gpiochip_find_and_xlate */
 struct gg_data {
 	enum of_gpio_flags *flags;
 	struct of_phandle_args gpiospec;

commit 3d0f7cf0f3633f92ddeb767eb59cab73963d4dee
Author: Grant Likely <grant.likely@secretlab.ca>
Date:   Thu May 17 13:54:40 2012 -0600

    gpio: Adjust of_xlate API to support multiple GPIO chips
    
    This patch changes the of_xlate API to make it possible for multiple
    gpio_chips to refer to the same device tree node.  This is useful for
    banked GPIO controllers that use multiple gpio_chips for a single
    device.  With this change the core code will try calling of_xlate on
    each gpio_chip that references the device_node and will return the
    gpio number for the first one to return 'true'.
    
    Tested-by: Roland Stigge <stigge@antcom.de>
    Acked-by: Arnd Bergmann <arnd@arndb.de>
    Signed-off-by: Grant Likely <grant.likely@secretlab.ca>

diff --git a/drivers/gpio/gpiolib-of.c b/drivers/gpio/gpiolib-of.c
index bf984b6dc477..d18068a9f3ec 100644
--- a/drivers/gpio/gpiolib-of.c
+++ b/drivers/gpio/gpiolib-of.c
@@ -15,11 +15,39 @@
 #include <linux/errno.h>
 #include <linux/module.h>
 #include <linux/io.h>
+#include <linux/gpio.h>
 #include <linux/of.h>
 #include <linux/of_address.h>
 #include <linux/of_gpio.h>
 #include <linux/slab.h>
 
+/* Private data structure for of_gpiochip_is_match */
+struct gg_data {
+	enum of_gpio_flags *flags;
+	struct of_phandle_args gpiospec;
+
+	int out_gpio;
+};
+
+/* Private function for resolving node pointer to gpio_chip */
+static int of_gpiochip_find_and_xlate(struct gpio_chip *gc, void *data)
+{
+	struct gg_data *gg_data = data;
+	int ret;
+
+	if ((gc->of_node != gg_data->gpiospec.np) ||
+	    (gc->of_gpio_n_cells != gg_data->gpiospec.args_count) ||
+	    (!gc->of_xlate))
+		return false;
+
+	ret = gc->of_xlate(gc, &gg_data->gpiospec, gg_data->flags);
+	if (ret < 0)
+		return false;
+
+	gg_data->out_gpio = ret + gc->base;
+	return true;
+}
+
 /**
  * of_get_named_gpio_flags() - Get a GPIO number and flags to use with GPIO API
  * @np:		device node to get GPIO from
@@ -34,46 +62,25 @@
 int of_get_named_gpio_flags(struct device_node *np, const char *propname,
                            int index, enum of_gpio_flags *flags)
 {
+	struct gg_data gg_data = { .flags = flags, .out_gpio = -ENODEV };
 	int ret;
-	struct gpio_chip *gc;
-	struct of_phandle_args gpiospec;
+
+	/* .of_xlate might decide to not fill in the flags, so clear it. */
+	if (flags)
+		*flags = 0;
 
 	ret = of_parse_phandle_with_args(np, propname, "#gpio-cells", index,
-					 &gpiospec);
+					 &gg_data.gpiospec);
 	if (ret) {
 		pr_debug("%s: can't parse gpios property\n", __func__);
-		goto err0;
-	}
-
-	gc = of_node_to_gpiochip(gpiospec.np);
-	if (!gc) {
-		pr_debug("%s: gpio controller %s isn't registered\n",
-			 np->full_name, gpiospec.np->full_name);
-		ret = -ENODEV;
-		goto err1;
-	}
-
-	if (gpiospec.args_count != gc->of_gpio_n_cells) {
-		pr_debug("%s: wrong #gpio-cells for %s\n",
-			 np->full_name, gpiospec.np->full_name);
-		ret = -EINVAL;
-		goto err1;
+		return -EINVAL;
 	}
 
-	/* .xlate might decide to not fill in the flags, so clear it. */
-	if (flags)
-		*flags = 0;
-
-	ret = gc->of_xlate(gc, &gpiospec, flags);
-	if (ret < 0)
-		goto err1;
+	gpiochip_find(&gg_data, of_gpiochip_find_and_xlate);
 
-	ret += gc->base;
-err1:
-	of_node_put(gpiospec.np);
-err0:
+	of_node_put(gg_data.gpiospec.np);
 	pr_debug("%s exited with status %d\n", __func__, ret);
-	return ret;
+	return gg_data.out_gpio;
 }
 EXPORT_SYMBOL(of_get_named_gpio_flags);
 
@@ -227,14 +234,3 @@ void of_gpiochip_remove(struct gpio_chip *chip)
 	if (chip->of_node)
 		of_node_put(chip->of_node);
 }
-
-/* Private function for resolving node pointer to gpio_chip */
-static int of_gpiochip_is_match(struct gpio_chip *chip, const void *data)
-{
-	return chip->of_node == data;
-}
-
-struct gpio_chip *of_node_to_gpiochip(struct device_node *np)
-{
-	return gpiochip_find(np, of_gpiochip_is_match);
-}

commit 7b96c686223a5c902d6a59c7d178f3904f0ab757
Merge: f141ed65f256 d48b97b403d2
Author: Grant Likely <grant.likely@secretlab.ca>
Date:   Tue May 8 11:35:37 2012 -0600

    Merge tag 'v3.4-rc6' into gpio/next
    
    Linux 3.4-rc6

commit f141ed65f256ec036c7fba604da6b7c448096ef9
Author: Grant Likely <grant.likely@secretlab.ca>
Date:   Sat Apr 7 14:31:33 2012 -0600

    gpio: Move DT support code into drivers/gpio
    
    The code in drivers/of/gpio.c isn't shared by any other subsystem since it
    is all gpiolib specific.  drivers/gpio is a better place to maintain these
    functions.
    
    Signed-off-by: Grant Likely <grant.likely@secretlab.ca>
    Cc: Rob Herring <rob.herring@calxeda.com>
    Cc: Linus Walleij <linus.walleij@stericsson.com>

diff --git a/drivers/gpio/gpiolib-of.c b/drivers/gpio/gpiolib-of.c
new file mode 100644
index 000000000000..bba81216b4db
--- /dev/null
+++ b/drivers/gpio/gpiolib-of.c
@@ -0,0 +1,240 @@
+/*
+ * OF helpers for the GPIO API
+ *
+ * Copyright (c) 2007-2008  MontaVista Software, Inc.
+ *
+ * Author: Anton Vorontsov <avorontsov@ru.mvista.com>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ */
+
+#include <linux/device.h>
+#include <linux/errno.h>
+#include <linux/module.h>
+#include <linux/io.h>
+#include <linux/of.h>
+#include <linux/of_address.h>
+#include <linux/of_gpio.h>
+#include <linux/slab.h>
+
+/**
+ * of_get_named_gpio_flags() - Get a GPIO number and flags to use with GPIO API
+ * @np:		device node to get GPIO from
+ * @propname:	property name containing gpio specifier(s)
+ * @index:	index of the GPIO
+ * @flags:	a flags pointer to fill in
+ *
+ * Returns GPIO number to use with Linux generic GPIO API, or one of the errno
+ * value on the error condition. If @flags is not NULL the function also fills
+ * in flags for the GPIO.
+ */
+int of_get_named_gpio_flags(struct device_node *np, const char *propname,
+                           int index, enum of_gpio_flags *flags)
+{
+	int ret;
+	struct gpio_chip *gc;
+	struct of_phandle_args gpiospec;
+
+	ret = of_parse_phandle_with_args(np, propname, "#gpio-cells", index,
+					 &gpiospec);
+	if (ret) {
+		pr_debug("%s: can't parse gpios property\n", __func__);
+		goto err0;
+	}
+
+	gc = of_node_to_gpiochip(gpiospec.np);
+	if (!gc) {
+		pr_debug("%s: gpio controller %s isn't registered\n",
+			 np->full_name, gpiospec.np->full_name);
+		ret = -ENODEV;
+		goto err1;
+	}
+
+	if (gpiospec.args_count != gc->of_gpio_n_cells) {
+		pr_debug("%s: wrong #gpio-cells for %s\n",
+			 np->full_name, gpiospec.np->full_name);
+		ret = -EINVAL;
+		goto err1;
+	}
+
+	/* .xlate might decide to not fill in the flags, so clear it. */
+	if (flags)
+		*flags = 0;
+
+	ret = gc->of_xlate(gc, &gpiospec, flags);
+	if (ret < 0)
+		goto err1;
+
+	ret += gc->base;
+err1:
+	of_node_put(gpiospec.np);
+err0:
+	pr_debug("%s exited with status %d\n", __func__, ret);
+	return ret;
+}
+EXPORT_SYMBOL(of_get_named_gpio_flags);
+
+/**
+ * of_gpio_named_count - Count GPIOs for a device
+ * @np:		device node to count GPIOs for
+ * @propname:	property name containing gpio specifier(s)
+ *
+ * The function returns the count of GPIOs specified for a node.
+ *
+ * Note that the empty GPIO specifiers counts too. For example,
+ *
+ * gpios = <0
+ *          &pio1 1 2
+ *          0
+ *          &pio2 3 4>;
+ *
+ * defines four GPIOs (so this function will return 4), two of which
+ * are not specified.
+ */
+unsigned int of_gpio_named_count(struct device_node *np, const char* propname)
+{
+	unsigned int cnt = 0;
+
+	do {
+		int ret;
+
+		ret = of_parse_phandle_with_args(np, propname, "#gpio-cells",
+						 cnt, NULL);
+		/* A hole in the gpios = <> counts anyway. */
+		if (ret < 0 && ret != -EEXIST)
+			break;
+	} while (++cnt);
+
+	return cnt;
+}
+EXPORT_SYMBOL(of_gpio_named_count);
+
+/**
+ * of_gpio_simple_xlate - translate gpio_spec to the GPIO number and flags
+ * @gc:		pointer to the gpio_chip structure
+ * @np:		device node of the GPIO chip
+ * @gpio_spec:	gpio specifier as found in the device tree
+ * @flags:	a flags pointer to fill in
+ *
+ * This is simple translation function, suitable for the most 1:1 mapped
+ * gpio chips. This function performs only one sanity check: whether gpio
+ * is less than ngpios (that is specified in the gpio_chip).
+ */
+int of_gpio_simple_xlate(struct gpio_chip *gc,
+			 const struct of_phandle_args *gpiospec, u32 *flags)
+{
+	/*
+	 * We're discouraging gpio_cells < 2, since that way you'll have to
+	 * write your own xlate function (that will have to retrive the GPIO
+	 * number and the flags from a single gpio cell -- this is possible,
+	 * but not recommended).
+	 */
+	if (gc->of_gpio_n_cells < 2) {
+		WARN_ON(1);
+		return -EINVAL;
+	}
+
+	if (WARN_ON(gpiospec->args_count < gc->of_gpio_n_cells))
+		return -EINVAL;
+
+	if (gpiospec->args[0] > gc->ngpio)
+		return -EINVAL;
+
+	if (flags)
+		*flags = gpiospec->args[1];
+
+	return gpiospec->args[0];
+}
+EXPORT_SYMBOL(of_gpio_simple_xlate);
+
+/**
+ * of_mm_gpiochip_add - Add memory mapped GPIO chip (bank)
+ * @np:		device node of the GPIO chip
+ * @mm_gc:	pointer to the of_mm_gpio_chip allocated structure
+ *
+ * To use this function you should allocate and fill mm_gc with:
+ *
+ * 1) In the gpio_chip structure:
+ *    - all the callbacks
+ *    - of_gpio_n_cells
+ *    - of_xlate callback (optional)
+ *
+ * 3) In the of_mm_gpio_chip structure:
+ *    - save_regs callback (optional)
+ *
+ * If succeeded, this function will map bank's memory and will
+ * do all necessary work for you. Then you'll able to use .regs
+ * to manage GPIOs from the callbacks.
+ */
+int of_mm_gpiochip_add(struct device_node *np,
+		       struct of_mm_gpio_chip *mm_gc)
+{
+	int ret = -ENOMEM;
+	struct gpio_chip *gc = &mm_gc->gc;
+
+	gc->label = kstrdup(np->full_name, GFP_KERNEL);
+	if (!gc->label)
+		goto err0;
+
+	mm_gc->regs = of_iomap(np, 0);
+	if (!mm_gc->regs)
+		goto err1;
+
+	gc->base = -1;
+
+	if (mm_gc->save_regs)
+		mm_gc->save_regs(mm_gc);
+
+	mm_gc->gc.of_node = np;
+
+	ret = gpiochip_add(gc);
+	if (ret)
+		goto err2;
+
+	return 0;
+err2:
+	iounmap(mm_gc->regs);
+err1:
+	kfree(gc->label);
+err0:
+	pr_err("%s: GPIO chip registration failed with status %d\n",
+	       np->full_name, ret);
+	return ret;
+}
+EXPORT_SYMBOL(of_mm_gpiochip_add);
+
+void of_gpiochip_add(struct gpio_chip *chip)
+{
+	if ((!chip->of_node) && (chip->dev))
+		chip->of_node = chip->dev->of_node;
+
+	if (!chip->of_node)
+		return;
+
+	if (!chip->of_xlate) {
+		chip->of_gpio_n_cells = 2;
+		chip->of_xlate = of_gpio_simple_xlate;
+	}
+
+	of_node_get(chip->of_node);
+}
+
+void of_gpiochip_remove(struct gpio_chip *chip)
+{
+	if (chip->of_node)
+		of_node_put(chip->of_node);
+}
+
+/* Private function for resolving node pointer to gpio_chip */
+static int of_gpiochip_is_match(struct gpio_chip *chip, const void *data)
+{
+	return chip->of_node == data;
+}
+
+struct gpio_chip *of_node_to_gpiochip(struct device_node *np)
+{
+	return gpiochip_find(np, of_gpiochip_is_match);
+}
