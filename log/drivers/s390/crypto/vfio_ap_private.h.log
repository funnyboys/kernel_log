commit ec89b55e3bce7c8a4bc6b1203280e81342d6745c
Author: Pierre Morel <pmorel@linux.ibm.com>
Date:   Tue May 21 17:34:36 2019 +0200

    s390: ap: implement PAPQ AQIC interception in kernel
    
    We register a AP PQAP instruction hook during the open
    of the mediated device. And unregister it on release.
    
    During the probe of the AP device, we allocate a vfio_ap_queue
    structure to keep track of the information we need for the
    PQAP/AQIC instruction interception.
    
    In the AP PQAP instruction hook, if we receive a demand to
    enable IRQs,
    - we retrieve the vfio_ap_queue based on the APQN we receive
      in REG1,
    - we retrieve the page of the guest address, (NIB), from
      register REG2
    - we retrieve the mediated device to use the VFIO pinning
      infrastructure to pin the page of the guest address,
    - we retrieve the pointer to KVM to register the guest ISC
      and retrieve the host ISC
    - finaly we activate GISA
    
    If we receive a demand to disable IRQs,
    - we deactivate GISA
    - unregister from the GIB
    - unpin the NIB
    
    When removing the AP device from the driver the device is
    reseted and this process unregisters the GISA from the GIB,
    and unpins the NIB address then we free the vfio_ap_queue
    structure.
    
    Signed-off-by: Pierre Morel <pmorel@linux.ibm.com>
    Acked-by: Tony Krowiak <akrowiak@linux.ibm.com>
    Acked-by: Harald Freudenberger <freude@linux.ibm.com>
    Signed-off-by: Halil Pasic <pasic@linux.ibm.com>
    Signed-off-by: Vasily Gorbik <gor@linux.ibm.com>

diff --git a/drivers/s390/crypto/vfio_ap_private.h b/drivers/s390/crypto/vfio_ap_private.h
index 18dcc4d769cc..f46dde56b464 100644
--- a/drivers/s390/crypto/vfio_ap_private.h
+++ b/drivers/s390/crypto/vfio_ap_private.h
@@ -4,6 +4,7 @@
  *
  * Author(s): Tony Krowiak <akrowiak@linux.ibm.com>
  *	      Halil Pasic <pasic@linux.ibm.com>
+ *	      Pierre Morel <pmorel@linux.ibm.com>
  *
  * Copyright IBM Corp. 2018
  */
@@ -89,5 +90,15 @@ struct ap_matrix_mdev {
 
 extern int vfio_ap_mdev_register(void);
 extern void vfio_ap_mdev_unregister(void);
+int vfio_ap_mdev_reset_queue(unsigned int apid, unsigned int apqi,
+			     unsigned int retry);
 
+struct vfio_ap_queue {
+	struct ap_matrix_mdev *matrix_mdev;
+	unsigned long saved_pfn;
+	int	apqn;
+#define VFIO_AP_ISC_INVALID 0xff
+	unsigned char saved_isc;
+};
+struct ap_queue_status vfio_ap_irq_disable(struct vfio_ap_queue *q);
 #endif /* _VFIO_AP_PRIVATE_H_ */

commit 62e358ce586b53562a5efcfdbaddc5bd285e6484
Author: Pierre Morel <pmorel@linux.ibm.com>
Date:   Tue May 21 17:34:35 2019 +0200

    vfio: ap: register IOMMU VFIO notifier
    
    To be able to use the VFIO interface to facilitate the
    mediated device memory pinning/unpinning we need to register
    a notifier for IOMMU.
    
    While we will start to pin one guest page for the interrupt indicator
    byte, this is still ok with ballooning as this page will never be
    used by the guest virtio-balloon driver.
    So the pinned page will never be freed. And even a broken guest does
    so, that would not impact the host as the original page is still
    in control by vfio.
    
    Signed-off-by: Pierre Morel <pmorel@linux.ibm.com>
    Reviewed-by: Cornelia Huck <cohuck@redhat.com>
    Reviewed-by: Tony Krowiak <akrowiak@linux.ibm.com>
    Acked-by: Harald Freudenberger <freude@linux.ibm.com>
    Signed-off-by: Halil Pasic <pasic@linux.ibm.com>
    Signed-off-by: Vasily Gorbik <gor@linux.ibm.com>

diff --git a/drivers/s390/crypto/vfio_ap_private.h b/drivers/s390/crypto/vfio_ap_private.h
index a910be124595..18dcc4d769cc 100644
--- a/drivers/s390/crypto/vfio_ap_private.h
+++ b/drivers/s390/crypto/vfio_ap_private.h
@@ -81,8 +81,10 @@ struct ap_matrix_mdev {
 	struct list_head node;
 	struct ap_matrix matrix;
 	struct notifier_block group_notifier;
+	struct notifier_block iommu_notifier;
 	struct kvm *kvm;
 	struct kvm_s390_module_hook pqap_hook;
+	struct mdev_device *mdev;
 };
 
 extern int vfio_ap_mdev_register(void);

commit e5282de931057e2baa4bd73235a0773fde6e9649
Author: Pierre Morel <pmorel@linux.ibm.com>
Date:   Tue May 21 17:34:34 2019 +0200

    s390: ap: kvm: add PQAP interception for AQIC
    
    We prepare the interception of the PQAP/AQIC instruction for
    the case the AQIC facility is enabled in the guest.
    
    First of all we do not want to change existing behavior when
    intercepting AP instructions without the SIE allowing the guest
    to use AP instructions.
    
    In this patch we only handle the AQIC interception allowed by
    facility 65 which will be enabled when the complete interception
    infrastructure will be present.
    
    We add a callback inside the KVM arch structure for s390 for
    a VFIO driver to handle a specific response to the PQAP
    instruction with the AQIC command and only this command.
    
    But we want to be able to return a correct answer to the guest
    even there is no VFIO AP driver in the kernel.
    Therefor, we inject the correct exceptions from inside KVM for the
    case the callback is not initialized, which happens when the vfio_ap
    driver is not loaded.
    
    We do consider the responsibility of the driver to always initialize
    the PQAP callback if it defines queues by initializing the CRYCB for
    a guest.
    If the callback has been setup we call it.
    If not we setup an answer considering that no queue is available
    for the guest when no callback has been setup.
    
    Signed-off-by: Pierre Morel <pmorel@linux.ibm.com>
    Reviewed-by: Tony Krowiak <akrowiak@linux.ibm.com>
    Acked-by: Harald Freudenberger <freude@linux.ibm.com>
    Acked-by: Christian Borntraeger <borntraeger@de.ibm.com>
    Signed-off-by: Halil Pasic <pasic@linux.ibm.com>
    Signed-off-by: Vasily Gorbik <gor@linux.ibm.com>

diff --git a/drivers/s390/crypto/vfio_ap_private.h b/drivers/s390/crypto/vfio_ap_private.h
index 76b7f98e47e9..a910be124595 100644
--- a/drivers/s390/crypto/vfio_ap_private.h
+++ b/drivers/s390/crypto/vfio_ap_private.h
@@ -16,6 +16,7 @@
 #include <linux/mdev.h>
 #include <linux/delay.h>
 #include <linux/mutex.h>
+#include <linux/kvm_host.h>
 
 #include "ap_bus.h"
 
@@ -81,6 +82,7 @@ struct ap_matrix_mdev {
 	struct ap_matrix matrix;
 	struct notifier_block group_notifier;
 	struct kvm *kvm;
+	struct kvm_s390_module_hook pqap_hook;
 };
 
 extern int vfio_ap_mdev_register(void);

commit 36360658eb5a6cf04bb9f2704d1e4ce54037ec99
Author: Pierre Morel <pmorel@linux.ibm.com>
Date:   Tue Feb 12 16:53:45 2019 +0100

    s390: vfio_ap: link the vfio_ap devices to the vfio_ap bus subsystem
    
    Libudev relies on having a subsystem link for non-root devices. To
    avoid libudev (and potentially other userspace tools) choking on the
    matrix device let us introduce a matrix bus and with it the matrix
    bus subsytem. Also make the matrix device reside within the matrix
    bus.
    
    Doing this we remove the forced link from the matrix device to the
    vfio_ap driver and the device_type we do not need anymore.
    
    Since the associated matrix driver is not the vfio_ap driver any more,
    we have to change the search for the devices on the vfio_ap driver in
    the function vfio_ap_verify_queue_reserved.
    Fixes: 1fde573413b5 ("s390: vfio-ap: base implementation of VFIO AP device driver")
    Cc: stable@vger.kernel.org
    
    Reported-by: Marc Hartmayer <mhartmay@linux.ibm.com>
    Reported-by: Christian Borntraeger <borntraeger@de.ibm.com>
    Signed-off-by: Pierre Morel <pmorel@linux.ibm.com>
    Tested-by: Christian Borntraeger <borntraeger@de.ibm.com>
    Reviewed-by: Cornelia Huck <cohuck@redhat.com>
    Reviewed-by: Tony Krowiak <akrowiak@linux.ibm.com>
    Acked-by: Halil Pasic <pasic@linux.ibm.com>
    Signed-off-by: Martin Schwidefsky <schwidefsky@de.ibm.com>

diff --git a/drivers/s390/crypto/vfio_ap_private.h b/drivers/s390/crypto/vfio_ap_private.h
index 5675492233c7..76b7f98e47e9 100644
--- a/drivers/s390/crypto/vfio_ap_private.h
+++ b/drivers/s390/crypto/vfio_ap_private.h
@@ -40,6 +40,7 @@ struct ap_matrix_dev {
 	struct ap_config_info info;
 	struct list_head mdev_list;
 	struct mutex lock;
+	struct ap_driver  *vfio_ap_drv;
 };
 
 extern struct ap_matrix_dev *matrix_dev;

commit 258287c994de8f2f52430b8d79b4fdf2c95f8c91
Author: Tony Krowiak <akrowiak@linux.ibm.com>
Date:   Tue Sep 25 19:16:26 2018 -0400

    s390: vfio-ap: implement mediated device open callback
    
    Implements the open callback on the mediated matrix device.
    The function registers a group notifier to receive notification
    of the VFIO_GROUP_NOTIFY_SET_KVM event. When notified,
    the vfio_ap device driver will get access to the guest's
    kvm structure. The open callback must ensure that only one
    mediated device shall be opened per guest.
    
    Signed-off-by: Tony Krowiak <akrowiak@linux.ibm.com>
    Acked-by: Halil Pasic <pasic@linux.ibm.com>
    Tested-by: Michael Mueller <mimu@linux.ibm.com>
    Tested-by: Farhan Ali <alifm@linux.ibm.com>
    Tested-by: Pierre Morel <pmorel@linux.ibm.com>
    Acked-by: Pierre Morel <pmorel@linux.ibm.com>
    Reviewed-by: Cornelia Huck <cohuck@redhat.com>
    Message-Id: <20180925231641.4954-12-akrowiak@linux.vnet.ibm.com>
    Signed-off-by: Christian Borntraeger <borntraeger@de.ibm.com>

diff --git a/drivers/s390/crypto/vfio_ap_private.h b/drivers/s390/crypto/vfio_ap_private.h
index 9f197ffab7ad..5675492233c7 100644
--- a/drivers/s390/crypto/vfio_ap_private.h
+++ b/drivers/s390/crypto/vfio_ap_private.h
@@ -71,10 +71,15 @@ struct ap_matrix {
  * @list:	allows the ap_matrix_mdev struct to be added to a list
  * @matrix:	the adapters, usage domains and control domains assigned to the
  *		mediated matrix device.
+ * @group_notifier: notifier block used for specifying callback function for
+ *		    handling the VFIO_GROUP_NOTIFY_SET_KVM event
+ * @kvm:	the struct holding guest's state
  */
 struct ap_matrix_mdev {
 	struct list_head node;
 	struct ap_matrix matrix;
+	struct notifier_block group_notifier;
+	struct kvm *kvm;
 };
 
 extern int vfio_ap_mdev_register(void);

commit 65f06713d3fa0e4125f59ad5b9d6239109b1d7fc
Author: Tony Krowiak <akrowiak@linux.ibm.com>
Date:   Tue Sep 25 19:16:20 2018 -0400

    s390: vfio-ap: register matrix device with VFIO mdev framework
    
    Registers the matrix device created by the VFIO AP device
    driver with the VFIO mediated device framework.
    Registering the matrix device will create the sysfs
    structures needed to create mediated matrix devices
    each of which will be used to configure the AP matrix
    for a guest and connect it to the VFIO AP device driver.
    
    Registering the matrix device with the VFIO mediated device
    framework will create the following sysfs structures:
    
    /sys/devices/vfio_ap/matrix/
    ...... [mdev_supported_types]
    ......... [vfio_ap-passthrough]
    ............ create
    
    To create a mediated device for the AP matrix device, write a UUID
    to the create file:
    
            uuidgen > create
    
    A symbolic link to the mediated device's directory will be created in the
    devices subdirectory named after the generated $uuid:
    
    /sys/devices/vfio_ap/matrix/
    ...... [mdev_supported_types]
    ......... [vfio_ap-passthrough]
    ............ [devices]
    ............... [$uuid]
    
    A symbolic link to the mediated device will also be created
    in the vfio_ap matrix's directory:
    
    /sys/devices/vfio_ap/matrix/[$uuid]
    
    Signed-off-by: Tony Krowiak <akrowiak@linux.ibm.com>
    Reviewed-by: Halil Pasic <pasic@linux.ibm.com>
    Reviewed-by: Cornelia Huck <cohuck@redhat.com>
    Tested-by: Michael Mueller <mimu@linux.ibm.com>
    Tested-by: Farhan Ali <alifm@linux.ibm.com>
    Message-Id: <20180925231641.4954-6-akrowiak@linux.vnet.ibm.com>
    Signed-off-by: Christian Borntraeger <borntraeger@de.ibm.com>

diff --git a/drivers/s390/crypto/vfio_ap_private.h b/drivers/s390/crypto/vfio_ap_private.h
index 6141420c8bb0..9f197ffab7ad 100644
--- a/drivers/s390/crypto/vfio_ap_private.h
+++ b/drivers/s390/crypto/vfio_ap_private.h
@@ -3,6 +3,7 @@
  * Private data and functions for adjunct processor VFIO matrix driver.
  *
  * Author(s): Tony Krowiak <akrowiak@linux.ibm.com>
+ *	      Halil Pasic <pasic@linux.ibm.com>
  *
  * Copyright IBM Corp. 2018
  */
@@ -24,11 +25,59 @@
 /**
  * ap_matrix_dev - the AP matrix device structure
  * @device:	generic device structure associated with the AP matrix device
+ * @available_instances: number of mediated matrix devices that can be created
+ * @info:	the struct containing the output from the PQAP(QCI) instruction
+ * mdev_list:	the list of mediated matrix devices created
+ * lock:	mutex for locking the AP matrix device. This lock will be
+ *		taken every time we fiddle with state managed by the vfio_ap
+ *		driver, be it using @mdev_list or writing the state of a
+ *		single ap_matrix_mdev device. It's quite coarse but we don't
+ *		expect much contention.
  */
 struct ap_matrix_dev {
 	struct device device;
+	atomic_t available_instances;
+	struct ap_config_info info;
+	struct list_head mdev_list;
+	struct mutex lock;
 };
 
 extern struct ap_matrix_dev *matrix_dev;
 
+/**
+ * The AP matrix is comprised of three bit masks identifying the adapters,
+ * queues (domains) and control domains that belong to an AP matrix. The bits i
+ * each mask, from least significant to most significant bit, correspond to IDs
+ * 0 to 255. When a bit is set, the corresponding ID belongs to the matrix.
+ *
+ * @apm_max: max adapter number in @apm
+ * @apm identifies the AP adapters in the matrix
+ * @aqm_max: max domain number in @aqm
+ * @aqm identifies the AP queues (domains) in the matrix
+ * @adm_max: max domain number in @adm
+ * @adm identifies the AP control domains in the matrix
+ */
+struct ap_matrix {
+	unsigned long apm_max;
+	DECLARE_BITMAP(apm, 256);
+	unsigned long aqm_max;
+	DECLARE_BITMAP(aqm, 256);
+	unsigned long adm_max;
+	DECLARE_BITMAP(adm, 256);
+};
+
+/**
+ * struct ap_matrix_mdev - the mediated matrix device structure
+ * @list:	allows the ap_matrix_mdev struct to be added to a list
+ * @matrix:	the adapters, usage domains and control domains assigned to the
+ *		mediated matrix device.
+ */
+struct ap_matrix_mdev {
+	struct list_head node;
+	struct ap_matrix matrix;
+};
+
+extern int vfio_ap_mdev_register(void);
+extern void vfio_ap_mdev_unregister(void);
+
 #endif /* _VFIO_AP_PRIVATE_H_ */

commit 1fde573413b549d52183382e639c1d6ce88f5959
Author: Tony Krowiak <akrowiak@linux.ibm.com>
Date:   Tue Sep 25 19:16:19 2018 -0400

    s390: vfio-ap: base implementation of VFIO AP device driver
    
    Introduces a new AP device driver. This device driver
    is built on the VFIO mediated device framework. The framework
    provides sysfs interfaces that facilitate passthrough
    access by guests to devices installed on the linux host.
    
    The VFIO AP device driver will serve two purposes:
    
    1. Provide the interfaces to reserve AP devices for exclusive
       use by KVM guests. This is accomplished by unbinding the
       devices to be reserved for guest usage from the zcrypt
       device driver and binding them to the VFIO AP device driver.
    
    2. Implements the functions, callbacks and sysfs attribute
       interfaces required to create one or more VFIO mediated
       devices each of which will be used to configure the AP
       matrix for a guest and serve as a file descriptor
       for facilitating communication between QEMU and the
       VFIO AP device driver.
    
    When the VFIO AP device driver is initialized:
    
    * It registers with the AP bus for control of type 10 (CEX4
      and newer) AP queue devices. This limitation was imposed
      due to:
    
      1. A desire to keep the code as simple as possible;
    
      2. Some older models are no longer supported by the kernel
         and others are getting close to end of service.
    
      3. A lack of older systems on which to test older devices.
    
      The probe and remove callbacks will be provided to support
      the binding/unbinding of AP queue devices to/from the VFIO
      AP device driver.
    
    * Creates a matrix device, /sys/devices/vfio_ap/matrix,
      to serve as the parent of the mediated devices created, one
      for each guest, and to hold the APQNs of the AP devices bound to
      the VFIO AP device driver.
    
    Signed-off-by: Tony Krowiak <akrowiak@linux.ibm.com>
    Reviewed-by: Halil Pasic <pasic@linux.ibm.com>
    Tested-by: Michael Mueller <mimu@linux.ibm.com>
    Tested-by: Farhan Ali <alifm@linux.ibm.com>
    Acked-by: David Hildenbrand <david@redhat.com>
    Reviewed-by: Cornelia Huck <cohuck@redhat.com>
    Message-Id: <20180925231641.4954-5-akrowiak@linux.vnet.ibm.com>
    Signed-off-by: Christian Borntraeger <borntraeger@de.ibm.com>

diff --git a/drivers/s390/crypto/vfio_ap_private.h b/drivers/s390/crypto/vfio_ap_private.h
new file mode 100644
index 000000000000..6141420c8bb0
--- /dev/null
+++ b/drivers/s390/crypto/vfio_ap_private.h
@@ -0,0 +1,34 @@
+/* SPDX-License-Identifier: GPL-2.0 */
+/*
+ * Private data and functions for adjunct processor VFIO matrix driver.
+ *
+ * Author(s): Tony Krowiak <akrowiak@linux.ibm.com>
+ *
+ * Copyright IBM Corp. 2018
+ */
+
+#ifndef _VFIO_AP_PRIVATE_H_
+#define _VFIO_AP_PRIVATE_H_
+
+#include <linux/types.h>
+#include <linux/device.h>
+#include <linux/mdev.h>
+#include <linux/delay.h>
+#include <linux/mutex.h>
+
+#include "ap_bus.h"
+
+#define VFIO_AP_MODULE_NAME "vfio_ap"
+#define VFIO_AP_DRV_NAME "vfio_ap"
+
+/**
+ * ap_matrix_dev - the AP matrix device structure
+ * @device:	generic device structure associated with the AP matrix device
+ */
+struct ap_matrix_dev {
+	struct device device;
+};
+
+extern struct ap_matrix_dev *matrix_dev;
+
+#endif /* _VFIO_AP_PRIVATE_H_ */
