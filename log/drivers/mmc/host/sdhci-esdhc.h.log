commit 30e1028dcef9ac981c20df83983e0e77a4df2dc4
Author: Wolfram Sang <wsa@kernel.org>
Date:   Sat May 2 16:28:25 2020 +0200

    mmc: sdhci-esdhc: update contact email
    
    The 'pengutronix' address is defunct for years. Use the proper contact
    address.
    
    Signed-off-by: Wolfram Sang <wsa@kernel.org>
    Acked-by: Adrian Hunter <adrian.hunter@intel.com>
    Link: https://lore.kernel.org/r/20200502142840.19418-1-wsa@kernel.org
    Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>

diff --git a/drivers/mmc/host/sdhci-esdhc.h b/drivers/mmc/host/sdhci-esdhc.h
index 947212f16bc6..a30796e79b1c 100644
--- a/drivers/mmc/host/sdhci-esdhc.h
+++ b/drivers/mmc/host/sdhci-esdhc.h
@@ -5,7 +5,7 @@
  * Copyright (c) 2007 Freescale Semiconductor, Inc.
  * Copyright (c) 2009 MontaVista Software, Inc.
  * Copyright (c) 2010 Pengutronix e.K.
- *   Author: Wolfram Sang <w.sang@pengutronix.de>
+ *   Author: Wolfram Sang <kernel@pengutronix.de>
  */
 
 #ifndef _DRIVERS_MMC_SDHCI_ESDHC_H

commit f581e9093aa2820c315273fc0cbf7cb0294fd005
Author: Haibo Chen <haibo.chen@nxp.com>
Date:   Wed Feb 19 16:25:50 2020 +0800

    mmc: sdhci-esdhc-imx: optimize the clock setting
    
    When force clock off, check the SDOFF of register PRSSTAT to make sure
    the clock is gate off. Before force clock on, check the SDSTB of register
    PRSSTAT to make sure the clock is stable, this will eliminate the clock
    glitch.
    
    Signed-off-by: Haibo Chen <haibo.chen@nxp.com>
    Acked-by: Adrian Hunter <adrian.hunter@intel.com>
    Link: https://lore.kernel.org/r/1582100757-20683-2-git-send-email-haibo.chen@nxp.com
    Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>

diff --git a/drivers/mmc/host/sdhci-esdhc.h b/drivers/mmc/host/sdhci-esdhc.h
index 9289bb4d633e..947212f16bc6 100644
--- a/drivers/mmc/host/sdhci-esdhc.h
+++ b/drivers/mmc/host/sdhci-esdhc.h
@@ -31,6 +31,7 @@
 
 /* Present State Register */
 #define ESDHC_PRSSTAT			0x24
+#define ESDHC_CLOCK_GATE_OFF		0x00000080
 #define ESDHC_CLOCK_STABLE		0x00000008
 
 /* Protocol Control Register */

commit 22dc132d5448db1b1c021de0c34aa8033ca7d98f
Author: Yangbo Lu <yangbo.lu@nxp.com>
Date:   Wed Oct 9 15:41:40 2019 +0800

    mmc: sdhci-of-esdhc: fix up erratum A-008171 workaround
    
    A previous patch implemented an incomplete workaround of erratum
    A-008171. The complete workaround is as below. This patch is to
    implement the complete workaround which uses SW tuning if HW tuning
    fails, and retries both HW/SW tuning once with reduced clock if
    workaround fails. This is suggested by hardware team, and the patch
    had been verified on LS1046A eSDHC + Phison 32G eMMC which could
    trigger the erratum.
    
    Workaround:
    /* For T1040, T2080, LS1021A, T1023 Rev 1: */
    1. Program TBPTR[TB_WNDW_END_PTR] = 3*DIV_RATIO.
    2. Program TBPTR[TB_WNDW_START_PTR] = 5*DIV_RATIO.
    3. Program the software tuning mode by setting TBCTL[TB_MODE] = 2'h3.
    4. Set SYSCTL2[EXTN] and SYSCTL2[SAMPCLKSEL].
    5. Issue SEND_TUNING_BLK Command (CMD19 for SD, CMD21 for MMC).
    6. Wait for IRQSTAT[BRR], buffer read ready, to be set.
    7. Clear IRQSTAT[BRR].
    8. Check SYSCTL2[EXTN] to be cleared.
    9. Check SYSCTL2[SAMPCLKSEL], Sampling Clock Select. It's set value
       indicate tuning procedure success, and clear indicate failure.
       In case of tuning failure, fixed sampling scheme could be used by
       clearing TBCTL[TB_EN].
    /* For LS1080A Rev 1, LS2088A Rev 1.0, LA1575A Rev 1.0: */
    1. Read the TBCTL[31:0] register. Write TBCTL[11:8]=4'h8 and wait for
       1ms.
    2. Read the TBCTL[31:0] register and rewrite again. Wait for 1ms second.
    3. Read the TBSTAT[31:0] register twice.
    3.1 Reset data lines by setting ESDHCCTL[RSTD] bit.
    3.2 Check ESDHCCTL[RSTD] bit.
    3.3 If ESDHCCTL[RSTD] is 0, go to step 3.4 else go to step 3.2.
    3.4 Write 32'hFFFF_FFFF to IRQSTAT register.
    4. if TBSTAT[15:8]-TBSTAT[7:0] > 4*DIV_RATIO or TBSTAT[7:0]-TBSTAT[15:8]
       > 4*DIV_RATIO , then program TBPTR[TB_WNDW_END_PTR] = 4*DIV_RATIO and
       program TBPTR[TB_WNDW_START_PTR] = 8*DIV_RATIO.
    /* For LS1012A Rev1, LS1043A Rev 1.x, LS1046A 1.0: */
    1. Read the TBCTL[0:31] register. Write TBCTL[20:23]=4'h8 and wait for
       1ms.
    2. Read the TBCTL[0:31] register and rewrite again. Wait for 1ms second.
    3. Read the TBSTAT[0:31] register twice.
    3.1 Reset data lines by setting ESDHCCTL[RSTD] bit.
    3.2 Check ESDHCCTL[RSTD] bit.
    3.3 If ESDHCCTL[RSTD] is 0, go to step 3.4 else go to step 3.2.
    3.4 Write 32'hFFFF_FFFF to IRQSTAT register.
    4. if TBSTAT[16:23]-TBSTAT[24:31] > 4*DIV_RATIO or TBSTAT[24:31]-
       TBSTAT[16:23] > 4* DIV_RATIO , then program TBPTR[TB_WNDW_END_PTR] =
       4*DIV_RATIO and program TBPTR[TB_WNDW_START_PTR] = 8*DIV_RATIO.
    /* For LS1080A Rev 1, LS2088A Rev 1.0, LA1575A Rev 1.0 LS1012A Rev1,
     * LS1043A Rev 1.x, LS1046A 1.0:
     */
    5. else program TBPTR[TB_WNDW_END_PTR] = 3*DIV_RATIO and program
       TBPTR[TB_WNDW_START_PTR] = 5*DIV_RATIO.
    6. Program the software tuning mode by setting TBCTL[TB_MODE] = 2'h3.
    7. Set SYSCTL2[EXTN], wait 1us and SYSCTL2[SAMPCLKSEL].
    8. Issue SEND_TUNING_BLK Command (CMD19 for SD, CMD21 for MMC).
    9. Wait for IRQSTAT[BRR], buffer read ready, to be set.
    10. Clear IRQSTAT[BRR].
    11. Check SYSCTL2[EXTN] to be cleared.
    12. Check SYSCTL2[SAMPCLKSEL], Sampling Clock Select. It's set value
        indicate tuning procedure success, and clear indicate failure.
        In case of tuning failure, fixed sampling scheme could be used by
        clearing TBCTL[TB_EN].
    
    Fixes: b1f378ab5334 ("mmc: sdhci-of-esdhc: add erratum A008171 support")
    Signed-off-by: Yinbo Zhu <yinbo.zhu@nxp.com>
    Signed-off-by: Yangbo Lu <yangbo.lu@nxp.com>
    Acked-by: Adrian Hunter <adrian.hunter@intel.com>
    Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>

diff --git a/drivers/mmc/host/sdhci-esdhc.h b/drivers/mmc/host/sdhci-esdhc.h
index 57b582bf73d9..9289bb4d633e 100644
--- a/drivers/mmc/host/sdhci-esdhc.h
+++ b/drivers/mmc/host/sdhci-esdhc.h
@@ -51,6 +51,11 @@
 #define ESDHC_CLOCK_HCKEN		0x00000002
 #define ESDHC_CLOCK_IPGEN		0x00000001
 
+/* System Control 2 Register */
+#define ESDHC_SYSTEM_CONTROL_2		0x3c
+#define ESDHC_SMPCLKSEL			0x00800000
+#define ESDHC_EXTN			0x00400000
+
 /* Host Controller Capabilities Register 2 */
 #define ESDHC_CAPABILITIES_1		0x114
 
@@ -59,7 +64,16 @@
 #define ESDHC_HS400_WNDW_ADJUST		0x00000040
 #define ESDHC_HS400_MODE		0x00000010
 #define ESDHC_TB_EN			0x00000004
+#define ESDHC_TB_MODE_MASK		0x00000003
+#define ESDHC_TB_MODE_SW		0x00000003
+#define ESDHC_TB_MODE_3			0x00000002
+
+#define ESDHC_TBSTAT			0x124
+
 #define ESDHC_TBPTR			0x128
+#define ESDHC_WNDW_STRT_PTR_SHIFT	8
+#define ESDHC_WNDW_STRT_PTR_MASK	(0x7f << 8)
+#define ESDHC_WNDW_END_PTR_MASK		0x7f
 
 /* SD Clock Control Register */
 #define ESDHC_SDCLKCTL			0x144

commit 84a14ae8c44fb4828a05f363a09c3261472de00e
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Tue May 28 09:57:07 2019 -0700

    treewide: Replace GPLv2 boilerplate/reference with SPDX - rule 178
    
    Based on 1 normalized pattern(s):
    
      this program is free software you can redistribute it and or modify
      it under the terms of the gnu general public license as published by
      the free software foundation either version 2 of the license
    
    extracted by the scancode license scanner the SPDX license identifier
    
      GPL-2.0-only
    
    has been chosen to replace the boilerplate/reference in 24 file(s).
    
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Reviewed-by: Alexios Zavras <alexios.zavras@intel.com>
    Reviewed-by: Steve Winslow <swinslow@gmail.com>
    Reviewed-by: Allison Randal <allison@lohutok.net>
    Reviewed-by: Richard Fontana <rfontana@redhat.com>
    Cc: linux-spdx@vger.kernel.org
    Link: https://lkml.kernel.org/r/20190528170026.162703968@linutronix.de
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/mmc/host/sdhci-esdhc.h b/drivers/mmc/host/sdhci-esdhc.h
index 39dbbd6eaf28..57b582bf73d9 100644
--- a/drivers/mmc/host/sdhci-esdhc.h
+++ b/drivers/mmc/host/sdhci-esdhc.h
@@ -1,3 +1,4 @@
+/* SPDX-License-Identifier: GPL-2.0-only */
 /*
  * Freescale eSDHC controller driver generics for OF and pltfm.
  *
@@ -5,10 +6,6 @@
  * Copyright (c) 2009 MontaVista Software, Inc.
  * Copyright (c) 2010 Pengutronix e.K.
  *   Author: Wolfram Sang <w.sang@pengutronix.de>
- *
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation; either version 2 of the License.
  */
 
 #ifndef _DRIVERS_MMC_SDHCI_ESDHC_H

commit 48e304cc1970b65f43c0d2f82aaf48285f0eccd2
Author: Yangbo Lu <yangbo.lu@nxp.com>
Date:   Fri Nov 23 11:15:37 2018 +0800

    mmc: sdhci-of-esdhc: workaround for unreliable pulse width detection
    
    This was a SoC issue on LX2160A Rev1.0.
    eSDHC_DLLCFG1[DLL_PD_PULSE_STRETCH_SEL] must be set to 0 to
    get 4 delay cells in the pulse width detection logic for eMMC
    HS400 mode. Otherwise it would cause unexpected HS400 issue.
    This patch is to clear this bit always for affected SoC when
    reset for all, since this bit doesn't affect other speed modes.
    
    Signed-off-by: Yangbo Lu <yangbo.lu@nxp.com>
    Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>

diff --git a/drivers/mmc/host/sdhci-esdhc.h b/drivers/mmc/host/sdhci-esdhc.h
index 721a635b10e7..39dbbd6eaf28 100644
--- a/drivers/mmc/host/sdhci-esdhc.h
+++ b/drivers/mmc/host/sdhci-esdhc.h
@@ -78,6 +78,10 @@
 #define ESDHC_DLL_ENABLE		0x80000000
 #define ESDHC_DLL_FREQ_SEL		0x08000000
 
+/* DLL Config 1 Register */
+#define ESDHC_DLLCFG1			0x164
+#define ESDHC_DLL_PD_PULSE_STRETCH_SEL	0x80000000
+
 /* DLL Status 0 Register */
 #define ESDHC_DLLSTAT0			0x170
 #define ESDHC_DLL_STS_SLV_LOCK		0x08000000

commit 54e08d9a95ca54a192a9aef76742a4f7e81f6780
Author: Yangbo Lu <yangbo.lu@nxp.com>
Date:   Fri Nov 23 11:15:34 2018 +0800

    mmc: sdhci-of-esdhc: add hs400 mode support
    
    1.  Perform the Tuning Process at the HS400 target operating frequency.
        Latched the clock division value.
    2.  if read transaction, then set the SDTIMNGCTL[FLW_CTL_BG].
    3.  Switch to High Speed mode and then set the card clock frequency to
        a value not greater than 52Mhz
    4.  Clear TBCTL[TB_EN],tuning block enable bit.
    5.  Change to 8 bit DDR Mode
    6.  Switch the card to HS400 mode.
    7.  Set TBCTL[TB_EN], tuning block enable bit.
    8.  Clear SYSCTL[SDCLKEN]
    9.  Wait for PRSSTAT[SDSTB] to be set
    10. Change the clock division to latched value.Set TBCTL[HS 400 mode]
        and Set SDCLKCTL[CMD_CLK_CTRL]
    11. Set SYSCTL[SDCLKEN]
    12. Wait for PRSSTAT[SDSTB] to be set
    13. Set DLLCFG0[DLL_ENABLE] and DLLCFG0[DLL_FREQ_SEL].
    14. Wait for delay chain to lock.
    15. Set TBCTL[HS400_WNDW_ADJUST]
    16. Again clear SYSCTL[SDCLKEN]
    17. Wait for PRSSTAT[SDSTB] to be set
    18. Set ESDHCCTL[FAF]
    19. Wait for ESDHCCTL[FAF] to be cleared
    20. Set SYSCTL[SDCLKEN]
    21. Wait for PRSSTAT[SDSTB] to be set.
    
    Signed-off-by: Yangbo Lu <yangbo.lu@nxp.com>
    Signed-off-by: Yinbo Zhu <yinbo.zhu@nxp.com>
    Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>

diff --git a/drivers/mmc/host/sdhci-esdhc.h b/drivers/mmc/host/sdhci-esdhc.h
index 3f16d9c90ba2..721a635b10e7 100644
--- a/drivers/mmc/host/sdhci-esdhc.h
+++ b/drivers/mmc/host/sdhci-esdhc.h
@@ -59,9 +59,29 @@
 
 /* Tuning Block Control Register */
 #define ESDHC_TBCTL			0x120
+#define ESDHC_HS400_WNDW_ADJUST		0x00000040
+#define ESDHC_HS400_MODE		0x00000010
 #define ESDHC_TB_EN			0x00000004
 #define ESDHC_TBPTR			0x128
 
+/* SD Clock Control Register */
+#define ESDHC_SDCLKCTL			0x144
+#define ESDHC_LPBK_CLK_SEL		0x80000000
+#define ESDHC_CMD_CLK_CTL		0x00008000
+
+/* SD Timing Control Register */
+#define ESDHC_SDTIMNGCTL		0x148
+#define ESDHC_FLW_CTL_BG		0x00008000
+
+/* DLL Config 0 Register */
+#define ESDHC_DLLCFG0			0x160
+#define ESDHC_DLL_ENABLE		0x80000000
+#define ESDHC_DLL_FREQ_SEL		0x08000000
+
+/* DLL Status 0 Register */
+#define ESDHC_DLLSTAT0			0x170
+#define ESDHC_DLL_STS_SLV_LOCK		0x08000000
+
 /* Control Register for DMA transfer */
 #define ESDHC_DMA_SYSCTL		0x40c
 #define ESDHC_PERIPHERAL_CLK_SEL	0x00080000

commit b1f378ab5334d96e661dd74586210a476b498802
Author: Yinbo Zhu <yinbo.zhu@nxp.com>
Date:   Thu Aug 23 16:48:32 2018 +0800

    mmc: sdhci-of-esdhc: add erratum A008171 support
    
    In tuning mode of operation, when TBCTL[TB_EN] is set, eSDHC may report
    one of the following errors :
    1)Tuning error while running tuning operation where SYSCTL2[SAMPCLKSEL]
    will not get set even when SYSCTL2[EXTN] is reset. OR
    2)Data transaction error (e.g. IRQSTAT[DCE], IRQSTAT[DEBE]) during data
    transaction errors.
    This issue occurs when the data window sampled within eSDHC is in full
    cycle. So, in that case, eSDHC is not able to find out the start and
    end points of the data window and sets the sampling pointer at default
    location (which is middle of the internal SD clock). If this sampling
    point coincides with the data eye boundary, then it can result in the
    above mentioned errors. Impact: Tuning mode of operation for SDR50,
    SDR104 or HS200 speed modes may not work properly
    Workaround: In case eSDHC reports tuning error or data errors in tuning
    mode of operation, by add the erratum A008171 support to fix the issue.
    
    Signed-off-by: Yinbo Zhu <yinbo.zhu@nxp.com>
    Acked-by: Adrian Hunter <adrian.hunter@intel.com>
    Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>

diff --git a/drivers/mmc/host/sdhci-esdhc.h b/drivers/mmc/host/sdhci-esdhc.h
index dfa58f8b8dfa..3f16d9c90ba2 100644
--- a/drivers/mmc/host/sdhci-esdhc.h
+++ b/drivers/mmc/host/sdhci-esdhc.h
@@ -60,6 +60,7 @@
 /* Tuning Block Control Register */
 #define ESDHC_TBCTL			0x120
 #define ESDHC_TB_EN			0x00000004
+#define ESDHC_TBPTR			0x128
 
 /* Control Register for DMA transfer */
 #define ESDHC_DMA_SYSCTL		0x40c

commit 2f3110cc89c29a790c8b31c7983603d60b9ede49
Author: yangbo lu <yangbo.lu@nxp.com>
Date:   Tue Aug 15 10:17:03 2017 +0800

    mmc: sdhci-of-esdhc: support ESDHC_CAPABILITIES_1 accessing
    
    eSDHC is not a standard SD host controller. SDHCI_CAPABILITIES_1
    register address is 0x44 while it's 0x114 (ESDHC_CAPABILITIES_1)
    for eSDHC.
    
    Signed-off-by: Yangbo Lu <yangbo.lu@nxp.com>
    Acked-by: Adrian Hunter <adrian.hunter@intel.com>
    Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>

diff --git a/drivers/mmc/host/sdhci-esdhc.h b/drivers/mmc/host/sdhci-esdhc.h
index e7893f21b65e..dfa58f8b8dfa 100644
--- a/drivers/mmc/host/sdhci-esdhc.h
+++ b/drivers/mmc/host/sdhci-esdhc.h
@@ -54,6 +54,9 @@
 #define ESDHC_CLOCK_HCKEN		0x00000002
 #define ESDHC_CLOCK_IPGEN		0x00000001
 
+/* Host Controller Capabilities Register 2 */
+#define ESDHC_CAPABILITIES_1		0x114
+
 /* Tuning Block Control Register */
 #define ESDHC_TBCTL			0x120
 #define ESDHC_TB_EN			0x00000004

commit cbb4509374963bea440c15ff26e2501d15e7927a
Author: Benoît Thébaudeau <benoit@wsystem.com>
Date:   Tue May 30 11:14:08 2017 +0200

    mmc: sdhci-esdhc: Add SDHCI_QUIRK_32BIT_DMA_ADDR
    
    The eSDHC can only DMA from 32-bit-aligned addresses.
    
    This fixes the following test cases of mmc_test:
      11:   Badly aligned write
      12:   Badly aligned read
      13:   Badly aligned multi-block write
      14:   Badly aligned multi-block read
    
    Signed-off-by: Benoît Thébaudeau <benoit@wsystem.com>
    Acked-by: Adrian Hunter <adrian.hunter@intel.com>
    Reviewed-by: Fabio Estevam <fabio.estevam@nxp.com>
    Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>

diff --git a/drivers/mmc/host/sdhci-esdhc.h b/drivers/mmc/host/sdhci-esdhc.h
index c4bbd7485987..e7893f21b65e 100644
--- a/drivers/mmc/host/sdhci-esdhc.h
+++ b/drivers/mmc/host/sdhci-esdhc.h
@@ -19,6 +19,7 @@
  */
 
 #define ESDHC_DEFAULT_QUIRKS	(SDHCI_QUIRK_FORCE_BLK_SZ_2048 | \
+				SDHCI_QUIRK_32BIT_DMA_ADDR | \
 				SDHCI_QUIRK_NO_BUSY_IRQ | \
 				SDHCI_QUIRK_DATA_TIMEOUT_USES_SDCLK | \
 				SDHCI_QUIRK_PIO_NEEDS_DELAY | \

commit ba49cbd0936e12eac245c0fb420a291e8505f639
Author: yangbo lu <yangbo.lu@nxp.com>
Date:   Thu Apr 20 16:14:42 2017 +0800

    mmc: sdhci-of-esdhc: add tuning support
    
    eSDHC uses tuning block for tuning procedure. So the tuning
    block control register must be configured properly before tuning.
    
    Signed-off-by: Yangbo Lu <yangbo.lu@nxp.com>
    Acked-by: Adrian Hunter <adrian.hunter@intel.com>
    Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>

diff --git a/drivers/mmc/host/sdhci-esdhc.h b/drivers/mmc/host/sdhci-esdhc.h
index 68695679fed5..c4bbd7485987 100644
--- a/drivers/mmc/host/sdhci-esdhc.h
+++ b/drivers/mmc/host/sdhci-esdhc.h
@@ -53,9 +53,14 @@
 #define ESDHC_CLOCK_HCKEN		0x00000002
 #define ESDHC_CLOCK_IPGEN		0x00000001
 
+/* Tuning Block Control Register */
+#define ESDHC_TBCTL			0x120
+#define ESDHC_TB_EN			0x00000004
+
 /* Control Register for DMA transfer */
 #define ESDHC_DMA_SYSCTL		0x40c
 #define ESDHC_PERIPHERAL_CLK_SEL	0x00080000
+#define ESDHC_FLUSH_ASYNC_FIFO		0x00040000
 #define ESDHC_DMA_SNOOP			0x00000040
 
 #endif /* _DRIVERS_MMC_SDHCI_ESDHC_H */

commit ea35645a3c66a74af92d3bbb4eb131220fc3e58a
Author: yangbo lu <yangbo.lu@nxp.com>
Date:   Thu Apr 20 16:14:41 2017 +0800

    mmc: sdhci-of-esdhc: add support for signal voltage switch
    
    eSDHC supports signal voltage switch from 3.3v to 1.8v by
    eSDHC_PROCTL[VOLT_SEL] bit. This bit changes the value of output
    signal SDHC_VS, and there must be a control circuit out of eSDHC
    to change the signal voltage according to SDHC_VS output signal.
    
    Signed-off-by: Yangbo Lu <yangbo.lu@nxp.com>
    Acked-by: Adrian Hunter <adrian.hunter@intel.com>
    Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>

diff --git a/drivers/mmc/host/sdhci-esdhc.h b/drivers/mmc/host/sdhci-esdhc.h
index 5343fc062e22..68695679fed5 100644
--- a/drivers/mmc/host/sdhci-esdhc.h
+++ b/drivers/mmc/host/sdhci-esdhc.h
@@ -37,6 +37,7 @@
 
 /* Protocol Control Register */
 #define ESDHC_PROCTL			0x28
+#define ESDHC_VOLT_SEL			0x00000400
 #define ESDHC_CTRL_4BITBUS		(0x1 << 1)
 #define ESDHC_CTRL_8BITBUS		(0x2 << 1)
 #define ESDHC_CTRL_BUSWIDTH_MASK	(0x3 << 1)

commit 19c3a0ef65adf090cb592dfe3e575f40322c88d8
Author: yangbo lu <yangbo.lu@nxp.com>
Date:   Thu Apr 20 16:14:40 2017 +0800

    mmc: sdhci-of-esdhc: add peripheral clock support
    
    eSDHC could select peripheral clock or platform clock as clock source by
    the PCS bit of eSDHC Control Register, and this bit couldn't be reset by
    software reset for all. In default, the platform clock is used. But we have
    to use peripheral clock since it has a higher frequency to support eMMC
    HS200 mode and SD UHS-I mode. This patch is to add peripheral clock support
    and use it instead of platform clock if it's declared in eSDHC dts node.
    
    Signed-off-by: Yangbo Lu <yangbo.lu@nxp.com>
    Acked-by: Adrian Hunter <adrian.hunter@intel.com>
    Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>

diff --git a/drivers/mmc/host/sdhci-esdhc.h b/drivers/mmc/host/sdhci-esdhc.h
index ece8b37e51dd..5343fc062e22 100644
--- a/drivers/mmc/host/sdhci-esdhc.h
+++ b/drivers/mmc/host/sdhci-esdhc.h
@@ -54,6 +54,7 @@
 
 /* Control Register for DMA transfer */
 #define ESDHC_DMA_SYSCTL		0x40c
+#define ESDHC_PERIPHERAL_CLK_SEL	0x00080000
 #define ESDHC_DMA_SNOOP			0x00000040
 
 #endif /* _DRIVERS_MMC_SDHCI_ESDHC_H */

commit e87d2db2a2b534dad7ac0000c597b561c160880d
Author: yangbo lu <yangbo.lu@nxp.com>
Date:   Mon Dec 26 17:46:30 2016 +0800

    mmc: sdhci-of-esdhc: avoid clock glitch when frequency is changing
    
    The eSDHC_PRSSTAT[SDSTB] bit indicates whether the internal card clock is
    stable. This bit is for the host driver to poll clock status when changing
    the clock frequency. It is recommended to clear eSDHC_SYSCTL[SDCLKEN]
    to remove glitch on the card clock when the frequency is changing. This
    patch is to disable SDCLKEN bit before changing frequency and enable it
    after SDSTB bit is set.
    
    Signed-off-by: Yangbo Lu <yangbo.lu@nxp.com>
    Acked-by: Adrian Hunter <adrian.hunter@intel.com>
    Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>

diff --git a/drivers/mmc/host/sdhci-esdhc.h b/drivers/mmc/host/sdhci-esdhc.h
index 8cd8449c7bc5..ece8b37e51dd 100644
--- a/drivers/mmc/host/sdhci-esdhc.h
+++ b/drivers/mmc/host/sdhci-esdhc.h
@@ -31,6 +31,10 @@
  * eSDHC register definition
  */
 
+/* Present State Register */
+#define ESDHC_PRSSTAT			0x24
+#define ESDHC_CLOCK_STABLE		0x00000008
+
 /* Protocol Control Register */
 #define ESDHC_PROCTL			0x28
 #define ESDHC_CTRL_4BITBUS		(0x1 << 1)
@@ -43,6 +47,7 @@
 #define ESDHC_CLOCK_MASK		0x0000fff0
 #define ESDHC_PREDIV_SHIFT		8
 #define ESDHC_DIVIDER_SHIFT		4
+#define ESDHC_CLOCK_SDCLKEN		0x00000008
 #define ESDHC_CLOCK_PEREN		0x00000004
 #define ESDHC_CLOCK_HCKEN		0x00000002
 #define ESDHC_CLOCK_IPGEN		0x00000001

commit a6b448884a5f8eed5fec888f918aef26be338912
Author: yangbo lu <yangbo.lu@nxp.com>
Date:   Mon Dec 26 17:46:29 2016 +0800

    mmc: sdhci-esdhc: clean up register definitions
    
    The eSDHC register definitions in header file were messy and confusing.
    This patch is to clean up these definitions.
    
    Signed-off-by: Yangbo Lu <yangbo.lu@nxp.com>
    Acked-by: Adrian Hunter <adrian.hunter@intel.com>
    Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>

diff --git a/drivers/mmc/host/sdhci-esdhc.h b/drivers/mmc/host/sdhci-esdhc.h
index de132e281753..8cd8449c7bc5 100644
--- a/drivers/mmc/host/sdhci-esdhc.h
+++ b/drivers/mmc/host/sdhci-esdhc.h
@@ -24,30 +24,31 @@
 				SDHCI_QUIRK_PIO_NEEDS_DELAY | \
 				SDHCI_QUIRK_NO_HISPD_BIT)
 
-#define ESDHC_PROCTL		0x28
-
-#define ESDHC_SYSTEM_CONTROL	0x2c
-#define ESDHC_CLOCK_MASK	0x0000fff0
-#define ESDHC_PREDIV_SHIFT	8
-#define ESDHC_DIVIDER_SHIFT	4
-#define ESDHC_CLOCK_PEREN	0x00000004
-#define ESDHC_CLOCK_HCKEN	0x00000002
-#define ESDHC_CLOCK_IPGEN	0x00000001
-
 /* pltfm-specific */
 #define ESDHC_HOST_CONTROL_LE	0x20
 
 /*
- * P2020 interpretation of the SDHCI_HOST_CONTROL register
+ * eSDHC register definition
  */
-#define ESDHC_CTRL_4BITBUS          (0x1 << 1)
-#define ESDHC_CTRL_8BITBUS          (0x2 << 1)
-#define ESDHC_CTRL_BUSWIDTH_MASK    (0x3 << 1)
-
-/* OF-specific */
-#define ESDHC_DMA_SYSCTL	0x40c
-#define ESDHC_DMA_SNOOP		0x00000040
 
-#define ESDHC_HOST_CONTROL_RES	0x01
+/* Protocol Control Register */
+#define ESDHC_PROCTL			0x28
+#define ESDHC_CTRL_4BITBUS		(0x1 << 1)
+#define ESDHC_CTRL_8BITBUS		(0x2 << 1)
+#define ESDHC_CTRL_BUSWIDTH_MASK	(0x3 << 1)
+#define ESDHC_HOST_CONTROL_RES		0x01
+
+/* System Control Register */
+#define ESDHC_SYSTEM_CONTROL		0x2c
+#define ESDHC_CLOCK_MASK		0x0000fff0
+#define ESDHC_PREDIV_SHIFT		8
+#define ESDHC_DIVIDER_SHIFT		4
+#define ESDHC_CLOCK_PEREN		0x00000004
+#define ESDHC_CLOCK_HCKEN		0x00000002
+#define ESDHC_CLOCK_IPGEN		0x00000001
+
+/* Control Register for DMA transfer */
+#define ESDHC_DMA_SYSCTL		0x40c
+#define ESDHC_DMA_SNOOP			0x00000040
 
 #endif /* _DRIVERS_MMC_SDHCI_ESDHC_H */

commit f4932cfd22f151af19d552c0ee607b2fb9c41b53
Author: yangbo lu <yangbo.lu@freescale.com>
Date:   Thu Oct 8 18:36:36 2015 +0800

    mmc: sdhci-of-esdhc: support both BE and LE host controller
    
    To support little endian eSDHC controller, we redefine both BE and
    LE IO accessors. In the new accessors, use ioread*/iowrite* instead
    of in_be32/out_be32 and will select accessors according to endian
    mode in probe function.
    
    Signed-off-by: Yangbo Lu <yangbo.lu@freescale.com>
    Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>

diff --git a/drivers/mmc/host/sdhci-esdhc.h b/drivers/mmc/host/sdhci-esdhc.h
index 163ac9974d91..de132e281753 100644
--- a/drivers/mmc/host/sdhci-esdhc.h
+++ b/drivers/mmc/host/sdhci-esdhc.h
@@ -24,6 +24,8 @@
 				SDHCI_QUIRK_PIO_NEEDS_DELAY | \
 				SDHCI_QUIRK_NO_HISPD_BIT)
 
+#define ESDHC_PROCTL		0x28
+
 #define ESDHC_SYSTEM_CONTROL	0x2c
 #define ESDHC_CLOCK_MASK	0x0000fff0
 #define ESDHC_PREDIV_SHIFT	8

commit 67b589a2ebe3f9705e8a70275cedec78447f803a
Author: Yangbo Lu <yangbo.lu@freescale.com>
Date:   Fri Jul 10 11:42:37 2015 +0800

    mmc: sdhci-esdhc: add default quirk SDHCI_QUIRK_NO_HISPD_BIT
    
    eSDHC supports high speed mode, but has no enabling bit for it.
    Add this quirk to avoid writing to eSDHC_PROCTL[DTW] by mistake.
    
    Signed-off-by: Yangbo Lu <yangbo.lu@freescale.com>
    Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>

diff --git a/drivers/mmc/host/sdhci-esdhc.h b/drivers/mmc/host/sdhci-esdhc.h
index a870c42731d7..163ac9974d91 100644
--- a/drivers/mmc/host/sdhci-esdhc.h
+++ b/drivers/mmc/host/sdhci-esdhc.h
@@ -21,7 +21,8 @@
 #define ESDHC_DEFAULT_QUIRKS	(SDHCI_QUIRK_FORCE_BLK_SZ_2048 | \
 				SDHCI_QUIRK_NO_BUSY_IRQ | \
 				SDHCI_QUIRK_DATA_TIMEOUT_USES_SDCLK | \
-				SDHCI_QUIRK_PIO_NEEDS_DELAY)
+				SDHCI_QUIRK_PIO_NEEDS_DELAY | \
+				SDHCI_QUIRK_NO_HISPD_BIT)
 
 #define ESDHC_SYSTEM_CONTROL	0x2c
 #define ESDHC_CLOCK_MASK	0x0000fff0

commit 8e91125ff3f57f15c6568e2a6d32743b3f7815e4
Author: Joakim Tjernlund <Joakim.Tjernlund@transmode.se>
Date:   Wed Jul 22 16:44:26 2015 +0200

    mmc: sdhci-esdhc: Make 8BIT bus work
    
    Support for 8BIT bus with was added some time ago to sdhci-esdhc but
    then missed to remove the 8BIT from the reserved bit mask which made
    8BIT non functional.
    
    Fixes: 66b50a00992d ("mmc: esdhc: Add support for 8-bit bus width and..")
    Signed-off-by: Joakim Tjernlund <joakim.tjernlund@transmode.se>
    Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>

diff --git a/drivers/mmc/host/sdhci-esdhc.h b/drivers/mmc/host/sdhci-esdhc.h
index 3497cfaf683c..a870c42731d7 100644
--- a/drivers/mmc/host/sdhci-esdhc.h
+++ b/drivers/mmc/host/sdhci-esdhc.h
@@ -45,6 +45,6 @@
 #define ESDHC_DMA_SYSCTL	0x40c
 #define ESDHC_DMA_SNOOP		0x00000040
 
-#define ESDHC_HOST_CONTROL_RES	0x05
+#define ESDHC_HOST_CONTROL_RES	0x01
 
 #endif /* _DRIVERS_MMC_SDHCI_ESDHC_H */

commit 1771059cf5f9c09e37ef6315df8acf120f2642fc
Author: Russell King <rmk+kernel@arm.linux.org.uk>
Date:   Fri Apr 25 12:58:55 2014 +0100

    mmc: sdhci: convert sdhci_set_clock() into a library function
    
    Signed-off-by: Russell King <rmk+kernel@arm.linux.org.uk>
    Tested-by: Markus Pargmann <mpa@pengutronix.de>
    Tested-by: Stephen Warren <swarren@nvidia.com>
    Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>
    Signed-off-by: Chris Ball <chris@printf.net>

diff --git a/drivers/mmc/host/sdhci-esdhc.h b/drivers/mmc/host/sdhci-esdhc.h
index de69bddc3afc..3497cfaf683c 100644
--- a/drivers/mmc/host/sdhci-esdhc.h
+++ b/drivers/mmc/host/sdhci-esdhc.h
@@ -20,7 +20,6 @@
 
 #define ESDHC_DEFAULT_QUIRKS	(SDHCI_QUIRK_FORCE_BLK_SZ_2048 | \
 				SDHCI_QUIRK_NO_BUSY_IRQ | \
-				SDHCI_QUIRK_NONSTANDARD_CLOCK | \
 				SDHCI_QUIRK_DATA_TIMEOUT_USES_SDCLK | \
 				SDHCI_QUIRK_PIO_NEEDS_DELAY)
 

commit 0718e59ae259f7c48155b4e852d8b0632d59028e
Author: Russell King <rmk+kernel@arm.linux.org.uk>
Date:   Fri Apr 25 12:57:18 2014 +0100

    mmc: sdhci: move FSL ESDHC reset handling quirk into esdhc code
    
    The Freescale esdhc driver is the only driver which needs the interrupt
    registers restored after a reset.  Move this quirk to be part of the
    ESDHC driver implementation.
    
    Signed-off-by: Russell King <rmk+kernel@arm.linux.org.uk>
    Tested-by: Markus Pargmann <mpa@pengutronix.de>
    Tested-by: Stephen Warren <swarren@nvidia.com>
    Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>
    Signed-off-by: Chris Ball <chris@printf.net>

diff --git a/drivers/mmc/host/sdhci-esdhc.h b/drivers/mmc/host/sdhci-esdhc.h
index a7d9f95a7b03..de69bddc3afc 100644
--- a/drivers/mmc/host/sdhci-esdhc.h
+++ b/drivers/mmc/host/sdhci-esdhc.h
@@ -22,8 +22,7 @@
 				SDHCI_QUIRK_NO_BUSY_IRQ | \
 				SDHCI_QUIRK_NONSTANDARD_CLOCK | \
 				SDHCI_QUIRK_DATA_TIMEOUT_USES_SDCLK | \
-				SDHCI_QUIRK_PIO_NEEDS_DELAY | \
-				SDHCI_QUIRK_RESTORE_IRQS_AFTER_RESET)
+				SDHCI_QUIRK_PIO_NEEDS_DELAY)
 
 #define ESDHC_SYSTEM_CONTROL	0x2c
 #define ESDHC_CLOCK_MASK	0x0000fff0

commit d31fc00a71b4f3a52d23c5a995ccd63e50a2c877
Author: Dong Aisheng <b29396@freescale.com>
Date:   Fri Sep 13 19:11:32 2013 +0800

    mmc: sdhci-esdhc: move common esdhc_set_clock to platform driver
    
    We need a lot of imx6 specific things into common esdhc_set_clock
    for support SD3.0 and eMMC DDR mode which is not needed for power pc
    platforms, so esdhc_set_clock seems not so common anymore.
    
    Instead of keeping add platform specfics things into this common API,
    we choose to move that code into platform driver itself to handle.
    This can also exclude the dependency between imx and power pc on this
    headfile and is easy for maintain in the future.
    
    Signed-off-by: Dong Aisheng <b29396@freescale.com>
    Acked-by: Shawn Guo <shawn.guo@linaro.org>
    Signed-off-by: Chris Ball <cjb@laptop.org>

diff --git a/drivers/mmc/host/sdhci-esdhc.h b/drivers/mmc/host/sdhci-esdhc.h
index a2a06420e463..a7d9f95a7b03 100644
--- a/drivers/mmc/host/sdhci-esdhc.h
+++ b/drivers/mmc/host/sdhci-esdhc.h
@@ -49,41 +49,4 @@
 
 #define ESDHC_HOST_CONTROL_RES	0x05
 
-static inline void esdhc_set_clock(struct sdhci_host *host, unsigned int clock,
-				   unsigned int host_clock)
-{
-	int pre_div = 2;
-	int div = 1;
-	u32 temp;
-
-	if (clock == 0)
-		goto out;
-
-	temp = sdhci_readl(host, ESDHC_SYSTEM_CONTROL);
-	temp &= ~(ESDHC_CLOCK_IPGEN | ESDHC_CLOCK_HCKEN | ESDHC_CLOCK_PEREN
-		| ESDHC_CLOCK_MASK);
-	sdhci_writel(host, temp, ESDHC_SYSTEM_CONTROL);
-
-	while (host_clock / pre_div / 16 > clock && pre_div < 256)
-		pre_div *= 2;
-
-	while (host_clock / pre_div / div > clock && div < 16)
-		div++;
-
-	dev_dbg(mmc_dev(host->mmc), "desired SD clock: %d, actual: %d\n",
-		clock, host_clock / pre_div / div);
-
-	pre_div >>= 1;
-	div--;
-
-	temp = sdhci_readl(host, ESDHC_SYSTEM_CONTROL);
-	temp |= (ESDHC_CLOCK_IPGEN | ESDHC_CLOCK_HCKEN | ESDHC_CLOCK_PEREN
-		| (div << ESDHC_DIVIDER_SHIFT)
-		| (pre_div << ESDHC_PREDIV_SHIFT));
-	sdhci_writel(host, temp, ESDHC_SYSTEM_CONTROL);
-	mdelay(1);
-out:
-	host->clock = clock;
-}
-
 #endif /* _DRIVERS_MMC_SDHCI_ESDHC_H */

commit 66b50a00992dca97b442e016a9b2dba892e2df61
Author: Oded Gabbay <ogabbay@advaoptical.com>
Date:   Thu Jun 27 12:00:05 2013 -0400

    mmc: esdhc: Add support for 8-bit bus width and non-removable card
    
    This patch adds support of connecting an MMC media using an 8-bit
    bus width connection to Freescale's P2020 H/W SDHC controller. During
    the probe function, the generic function mmc_of_parse is called to
    detect whether the controller is configured with 8-bit bus width.
    
    Also, the generic function detects if the non-removable property is
    set in the device tree.  The function esdhc_pltfm_bus_width was added
    because the bus width configuration is platform specific.
    
    Signed-off-by: Oded Gabbay <ogabbay@advaoptical.com>
    Reviewed-by: Anton Vorontsov <anton@enomsg.org>
    Signed-off-by: Chris Ball <cjb@laptop.org>

diff --git a/drivers/mmc/host/sdhci-esdhc.h b/drivers/mmc/host/sdhci-esdhc.h
index 6f16406c37cd..a2a06420e463 100644
--- a/drivers/mmc/host/sdhci-esdhc.h
+++ b/drivers/mmc/host/sdhci-esdhc.h
@@ -36,6 +36,13 @@
 /* pltfm-specific */
 #define ESDHC_HOST_CONTROL_LE	0x20
 
+/*
+ * P2020 interpretation of the SDHCI_HOST_CONTROL register
+ */
+#define ESDHC_CTRL_4BITBUS          (0x1 << 1)
+#define ESDHC_CTRL_8BITBUS          (0x2 << 1)
+#define ESDHC_CTRL_BUSWIDTH_MASK    (0x3 << 1)
+
 /* OF-specific */
 #define ESDHC_DMA_SYSCTL	0x40c
 #define ESDHC_DMA_SNOOP		0x00000040

commit 8ba9580a8045b6d5fed66e13b77599f3d8a77fed
Author: Lucas Stach <l.stach@pengutronix.de>
Date:   Wed Jun 5 15:13:25 2013 +0200

    mmc: sdhci-esdhc: calculate sdclk divider from controller clock
    
    The SDCLK is divided down from the host controller clock. Host
    controller clock may be different from the maximum SDCLK, so
    get it from the platform, instead of just using the max SDCLK.
    
    Signed-off-by: Lucas Stach <l.stach@pengutronix.de>
    Acked-by: Shawn Guo <shawn.guo@linaro.org>
    Signed-off-by: Chris Ball <cjb@laptop.org>

diff --git a/drivers/mmc/host/sdhci-esdhc.h b/drivers/mmc/host/sdhci-esdhc.h
index d25f9ab9a54d..6f16406c37cd 100644
--- a/drivers/mmc/host/sdhci-esdhc.h
+++ b/drivers/mmc/host/sdhci-esdhc.h
@@ -42,7 +42,8 @@
 
 #define ESDHC_HOST_CONTROL_RES	0x05
 
-static inline void esdhc_set_clock(struct sdhci_host *host, unsigned int clock)
+static inline void esdhc_set_clock(struct sdhci_host *host, unsigned int clock,
+				   unsigned int host_clock)
 {
 	int pre_div = 2;
 	int div = 1;
@@ -56,14 +57,14 @@ static inline void esdhc_set_clock(struct sdhci_host *host, unsigned int clock)
 		| ESDHC_CLOCK_MASK);
 	sdhci_writel(host, temp, ESDHC_SYSTEM_CONTROL);
 
-	while (host->max_clk / pre_div / 16 > clock && pre_div < 256)
+	while (host_clock / pre_div / 16 > clock && pre_div < 256)
 		pre_div *= 2;
 
-	while (host->max_clk / pre_div / div > clock && div < 16)
+	while (host_clock / pre_div / div > clock && div < 16)
 		div++;
 
 	dev_dbg(mmc_dev(host->mmc), "desired SD clock: %d, actual: %d\n",
-		clock, host->max_clk / pre_div / div);
+		clock, host_clock / pre_div / div);
 
 	pre_div >>= 1;
 	div--;

commit 74f330bceaa7b88d06062e1cac3d519a3dfc041e
Author: Shawn Guo <shawn.guo@linaro.org>
Date:   Wed Aug 22 23:10:01 2012 +0800

    mmc: sdhci-esdhc: break out early if clock is 0
    
    Since commit 30832ab56 ("mmc: sdhci: Always pass clock request value
    zero to set_clock host op") was merged, esdhc_set_clock starts hitting
    "if (clock == 0)" where ESDHC_SYSTEM_CONTROL has been operated.  This
    causes SDHCI card-detection function being broken.  Fix the regression
    by moving "if (clock == 0)" above ESDHC_SYSTEM_CONTROL operation.
    
    Signed-off-by: Shawn Guo <shawn.guo@linaro.org>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Chris Ball <cjb@laptop.org>

diff --git a/drivers/mmc/host/sdhci-esdhc.h b/drivers/mmc/host/sdhci-esdhc.h
index b97b2f5dafdb..d25f9ab9a54d 100644
--- a/drivers/mmc/host/sdhci-esdhc.h
+++ b/drivers/mmc/host/sdhci-esdhc.h
@@ -48,14 +48,14 @@ static inline void esdhc_set_clock(struct sdhci_host *host, unsigned int clock)
 	int div = 1;
 	u32 temp;
 
+	if (clock == 0)
+		goto out;
+
 	temp = sdhci_readl(host, ESDHC_SYSTEM_CONTROL);
 	temp &= ~(ESDHC_CLOCK_IPGEN | ESDHC_CLOCK_HCKEN | ESDHC_CLOCK_PEREN
 		| ESDHC_CLOCK_MASK);
 	sdhci_writel(host, temp, ESDHC_SYSTEM_CONTROL);
 
-	if (clock == 0)
-		goto out;
-
 	while (host->max_clk / pre_div / 16 > clock && pre_div < 256)
 		pre_div *= 2;
 

commit 4ee5ebaf74ba1b3e2e3f9aad442bf38db96c20d2
Author: Tony Lin <tony.lin@freescale.com>
Date:   Tue Nov 22 14:42:30 2011 +0800

    mmc: sdhci-esdhc: Change delay after setting clock from 100ms to 1ms
    
    1ms is enough for hardware to change the clock to stable.
    100ms is too long in the tasklet.
    
    Signed-off-by: Tony Lin <tony.lin@freescale.com>
    CC: Xiaobo Xie <X.Xie@freescale.com>
    CC: Anton Vorontsov <avorontsov@ru.mvista.com>
    Signed-off-by: Chris Ball <cjb@laptop.org>

diff --git a/drivers/mmc/host/sdhci-esdhc.h b/drivers/mmc/host/sdhci-esdhc.h
index c3b08f111942..b97b2f5dafdb 100644
--- a/drivers/mmc/host/sdhci-esdhc.h
+++ b/drivers/mmc/host/sdhci-esdhc.h
@@ -73,7 +73,7 @@ static inline void esdhc_set_clock(struct sdhci_host *host, unsigned int clock)
 		| (div << ESDHC_DIVIDER_SHIFT)
 		| (pre_div << ESDHC_PREDIV_SHIFT));
 	sdhci_writel(host, temp, ESDHC_SYSTEM_CONTROL);
-	mdelay(100);
+	mdelay(1);
 out:
 	host->clock = clock;
 }

commit e481e45df754cbb01630e308f9baeb1c066ef1f9
Author: Richard Zhu <Hong-Xing.Zhu@freescale.com>
Date:   Mon Mar 21 13:22:13 2011 +0800

    mmc: sdhci-esdhc: remove SDHCI_QUIRK_NO_CARD_NO_RESET from esdhc
    
    sdhci-esdhc-imx does not need SDHCI_QUIRK_NO_CARD_NO_RESET.
    Make it OF-specific.
    
    Signed-off-by: Richard Zhu <Hong-Xing.Zhu@freescale.com>
    Tested-by: Wolfram Sang <w.sang@pengutronix.de>
    Signed-off-by: Chris Ball <cjb@laptop.org>

diff --git a/drivers/mmc/host/sdhci-esdhc.h b/drivers/mmc/host/sdhci-esdhc.h
index c55aae828aac..c3b08f111942 100644
--- a/drivers/mmc/host/sdhci-esdhc.h
+++ b/drivers/mmc/host/sdhci-esdhc.h
@@ -23,8 +23,7 @@
 				SDHCI_QUIRK_NONSTANDARD_CLOCK | \
 				SDHCI_QUIRK_DATA_TIMEOUT_USES_SDCLK | \
 				SDHCI_QUIRK_PIO_NEEDS_DELAY | \
-				SDHCI_QUIRK_RESTORE_IRQS_AFTER_RESET | \
-				SDHCI_QUIRK_NO_CARD_NO_RESET)
+				SDHCI_QUIRK_RESTORE_IRQS_AFTER_RESET)
 
 #define ESDHC_SYSTEM_CONTROL	0x2c
 #define ESDHC_CLOCK_MASK	0x0000fff0

commit 3bb2a9f6a7c0887a7f79b59c5b9bff349a03247e
Author: Wolfram Sang <w.sang@pengutronix.de>
Date:   Sat Feb 26 14:44:40 2011 +0100

    mmc: sdhci-esdhc: broken card detection is not a default quirk
    
    It can be worked around using a GPIO which will be done for i.MX later.
    
    Signed-off-by: Wolfram Sang <w.sang@pengutronix.de>
    Acked-by: Anton Vorontsov <cbouatmailru@gmail.com>
    Tested-by: Marc Reilly <marc@cpdesign.com.au>
    Tested-by: Eric Benard <eric@eukrea.com>
    Signed-off-by: Chris Ball <cjb@laptop.org>

diff --git a/drivers/mmc/host/sdhci-esdhc.h b/drivers/mmc/host/sdhci-esdhc.h
index afaf1bc4913a..c55aae828aac 100644
--- a/drivers/mmc/host/sdhci-esdhc.h
+++ b/drivers/mmc/host/sdhci-esdhc.h
@@ -19,7 +19,6 @@
  */
 
 #define ESDHC_DEFAULT_QUIRKS	(SDHCI_QUIRK_FORCE_BLK_SZ_2048 | \
-				SDHCI_QUIRK_BROKEN_CARD_DETECTION | \
 				SDHCI_QUIRK_NO_BUSY_IRQ | \
 				SDHCI_QUIRK_NONSTANDARD_CLOCK | \
 				SDHCI_QUIRK_DATA_TIMEOUT_USES_SDCLK | \

commit 80872e21b0263f016f2edb7b72dd8be5636d7ca7
Author: Wolfram Sang <w.sang@pengutronix.de>
Date:   Fri Oct 15 12:21:03 2010 +0200

    mmc: sdhci-of-esdhc: factor out common stuff
    
    Put everything which can be shared between the OF and platform version
    of this driver into a local .h file.
    
    Signed-off-by: Wolfram Sang <w.sang@pengutronix.de>
    Tested-by: Eric Bénard <eric@eukrea.com>
    [cjb: fix compile error: sdhci-esdhc.c->sdhci-esdhc.h]
    Signed-off-by: Chris Ball <cjb@laptop.org>

diff --git a/drivers/mmc/host/sdhci-esdhc.h b/drivers/mmc/host/sdhci-esdhc.h
new file mode 100644
index 000000000000..afaf1bc4913a
--- /dev/null
+++ b/drivers/mmc/host/sdhci-esdhc.h
@@ -0,0 +1,83 @@
+/*
+ * Freescale eSDHC controller driver generics for OF and pltfm.
+ *
+ * Copyright (c) 2007 Freescale Semiconductor, Inc.
+ * Copyright (c) 2009 MontaVista Software, Inc.
+ * Copyright (c) 2010 Pengutronix e.K.
+ *   Author: Wolfram Sang <w.sang@pengutronix.de>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License.
+ */
+
+#ifndef _DRIVERS_MMC_SDHCI_ESDHC_H
+#define _DRIVERS_MMC_SDHCI_ESDHC_H
+
+/*
+ * Ops and quirks for the Freescale eSDHC controller.
+ */
+
+#define ESDHC_DEFAULT_QUIRKS	(SDHCI_QUIRK_FORCE_BLK_SZ_2048 | \
+				SDHCI_QUIRK_BROKEN_CARD_DETECTION | \
+				SDHCI_QUIRK_NO_BUSY_IRQ | \
+				SDHCI_QUIRK_NONSTANDARD_CLOCK | \
+				SDHCI_QUIRK_DATA_TIMEOUT_USES_SDCLK | \
+				SDHCI_QUIRK_PIO_NEEDS_DELAY | \
+				SDHCI_QUIRK_RESTORE_IRQS_AFTER_RESET | \
+				SDHCI_QUIRK_NO_CARD_NO_RESET)
+
+#define ESDHC_SYSTEM_CONTROL	0x2c
+#define ESDHC_CLOCK_MASK	0x0000fff0
+#define ESDHC_PREDIV_SHIFT	8
+#define ESDHC_DIVIDER_SHIFT	4
+#define ESDHC_CLOCK_PEREN	0x00000004
+#define ESDHC_CLOCK_HCKEN	0x00000002
+#define ESDHC_CLOCK_IPGEN	0x00000001
+
+/* pltfm-specific */
+#define ESDHC_HOST_CONTROL_LE	0x20
+
+/* OF-specific */
+#define ESDHC_DMA_SYSCTL	0x40c
+#define ESDHC_DMA_SNOOP		0x00000040
+
+#define ESDHC_HOST_CONTROL_RES	0x05
+
+static inline void esdhc_set_clock(struct sdhci_host *host, unsigned int clock)
+{
+	int pre_div = 2;
+	int div = 1;
+	u32 temp;
+
+	temp = sdhci_readl(host, ESDHC_SYSTEM_CONTROL);
+	temp &= ~(ESDHC_CLOCK_IPGEN | ESDHC_CLOCK_HCKEN | ESDHC_CLOCK_PEREN
+		| ESDHC_CLOCK_MASK);
+	sdhci_writel(host, temp, ESDHC_SYSTEM_CONTROL);
+
+	if (clock == 0)
+		goto out;
+
+	while (host->max_clk / pre_div / 16 > clock && pre_div < 256)
+		pre_div *= 2;
+
+	while (host->max_clk / pre_div / div > clock && div < 16)
+		div++;
+
+	dev_dbg(mmc_dev(host->mmc), "desired SD clock: %d, actual: %d\n",
+		clock, host->max_clk / pre_div / div);
+
+	pre_div >>= 1;
+	div--;
+
+	temp = sdhci_readl(host, ESDHC_SYSTEM_CONTROL);
+	temp |= (ESDHC_CLOCK_IPGEN | ESDHC_CLOCK_HCKEN | ESDHC_CLOCK_PEREN
+		| (div << ESDHC_DIVIDER_SHIFT)
+		| (pre_div << ESDHC_PREDIV_SHIFT));
+	sdhci_writel(host, temp, ESDHC_SYSTEM_CONTROL);
+	mdelay(100);
+out:
+	host->clock = clock;
+}
+
+#endif /* _DRIVERS_MMC_SDHCI_ESDHC_H */
