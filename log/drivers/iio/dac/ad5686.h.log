commit 0b2884ef7fcad881556b79828a96f359c7f1fab6
Author: Sergiu Cuciurean <sergiu.cuciurean@analog.com>
Date:   Thu May 14 12:19:38 2020 +0300

    iio: dac: ad5686: Replace indio_dev->mlock with own device lock
    
    As part of the general cleanup of indio_dev->mlock, this change replaces
    it with a local lock on the device's state structure.
    
    Signed-off-by: Sergiu Cuciurean <sergiu.cuciurean@analog.com>
    Signed-off-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>

diff --git a/drivers/iio/dac/ad5686.h b/drivers/iio/dac/ad5686.h
index 70a779939ddb..52009b5eef88 100644
--- a/drivers/iio/dac/ad5686.h
+++ b/drivers/iio/dac/ad5686.h
@@ -117,6 +117,7 @@ struct ad5686_chip_info {
  * @pwr_down_mask:	power down mask
  * @pwr_down_mode:	current power down mode
  * @use_internal_vref:	set to true if the internal reference voltage is used
+ * @lock		lock to protect the data buffer during regmap ops
  * @data:		spi transfer buffers
  */
 
@@ -130,6 +131,7 @@ struct ad5686_state {
 	ad5686_write_func		write;
 	ad5686_read_func		read;
 	bool				use_internal_vref;
+	struct mutex			lock;
 
 	/*
 	 * DMA (thus cache coherency maintenance) requires the

commit cbd5dd387afab8511e055d0487e1ef747e7f72b5
Author: Stefan Popa <stefan.popa@analog.com>
Date:   Mon Feb 4 11:19:35 2019 +0200

    drivers: iio: dac: Fix wrong license for ADI drivers
    
    Analog Devices drivers are typically GPL v2 only. This patch fixes the
    inconsistencies between the module license and SPDX.
    
    Signed-off-by: Stefan Popa <stefan.popa@analog.com>
    Signed-off-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>

diff --git a/drivers/iio/dac/ad5686.h b/drivers/iio/dac/ad5686.h
index 4c3e171ce0cc..70a779939ddb 100644
--- a/drivers/iio/dac/ad5686.h
+++ b/drivers/iio/dac/ad5686.h
@@ -1,4 +1,4 @@
-/* SPDX-License-Identifier: GPL-2.0+ */
+/* SPDX-License-Identifier: GPL-2.0 */
 /*
  * This file is part of AD5686 DAC driver
  *

commit 192778fb969c2b9bc33d559b9c7aecdd1498c1ba
Author: Mircea Caprioru <mircea.caprioru@analog.com>
Date:   Wed Jan 9 11:14:16 2019 +0200

    iio: dac: ad5686: Add support for AD5674R/AD5679R
    
    The AD5674R/AD5679R are low power, 16-channel, 12-/16-bit buffered voltage
    output digital-to-analog converters (DACs). They include a 2.5 V internal
    reference (enabled by default).
    
    These devices are very similar to AD5684R/AD5686R, except that they have 16
    channels.
    
    Signed-off-by: Mircea Caprioru <mircea.caprioru@analog.com>
    Signed-off-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>

diff --git a/drivers/iio/dac/ad5686.h b/drivers/iio/dac/ad5686.h
index 19f6917d4738..4c3e171ce0cc 100644
--- a/drivers/iio/dac/ad5686.h
+++ b/drivers/iio/dac/ad5686.h
@@ -54,9 +54,11 @@ enum ad5686_supported_device_ids {
 	ID_AD5311R,
 	ID_AD5671R,
 	ID_AD5672R,
+	ID_AD5674R,
 	ID_AD5675R,
 	ID_AD5676,
 	ID_AD5676R,
+	ID_AD5679R,
 	ID_AD5681R,
 	ID_AD5682R,
 	ID_AD5683,

commit 12d323cf6dd558b442fa3f03af3c7703617eed81
Author: Stefan Popa <stefan.popa@analog.com>
Date:   Thu Dec 6 15:38:30 2018 +0200

    iio:dac:ad5686: Add AD5310R support
    
    The AD5310R is a single channel DAC with 10-bit precision, which is
    part of the same family as AD5311R, except that it uses the spi interface
    instead of i2c. The device has a built-in 2.5V reference which is enabled
    by default.
    
    Another important difference is that the SPI write command operation is
    16 bits long. The first four bits represent the command, while the
    remaining 12 bits are for data. In the control reg, DB9 and DB10 are used
    for power-down modes, while DB8 is the REF bit. In order to accommodate
    this change, a new regmap type was defined and checked accordingly.
    
    Because AD5310R does not have a readback register, the read_raw operation
    will return "Operation is not supported".
    
    Datasheet:
    Link: http://www.analog.com/media/en/technical-documentation/data-sheets/AD5310R_5311R.pdf
    
    Signed-off-by: Stefan Popa <stefan.popa@analog.com>
    Signed-off-by: Mircea Caprioru <mircea.caprioru@analog.com>
    Signed-off-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>

diff --git a/drivers/iio/dac/ad5686.h b/drivers/iio/dac/ad5686.h
index 57b3c61bfb91..19f6917d4738 100644
--- a/drivers/iio/dac/ad5686.h
+++ b/drivers/iio/dac/ad5686.h
@@ -13,7 +13,10 @@
 #include <linux/mutex.h>
 #include <linux/kernel.h>
 
+#define AD5310_CMD(x)				((x) << 12)
+
 #define AD5683_DATA(x)				((x) << 4)
+
 #define AD5686_ADDR(x)				((x) << 16)
 #define AD5686_CMD(x)				((x) << 20)
 
@@ -38,6 +41,8 @@
 
 #define AD5686_CMD_CONTROL_REG			0x4
 #define AD5686_CMD_READBACK_ENABLE_V2		0x5
+
+#define AD5310_REF_BIT_MSK			BIT(8)
 #define AD5683_REF_BIT_MSK			BIT(12)
 #define AD5693_REF_BIT_MSK			BIT(12)
 
@@ -45,6 +50,7 @@
  * ad5686_supported_device_ids:
  */
 enum ad5686_supported_device_ids {
+	ID_AD5310R,
 	ID_AD5311R,
 	ID_AD5671R,
 	ID_AD5672R,
@@ -72,6 +78,7 @@ enum ad5686_supported_device_ids {
 };
 
 enum ad5686_regmap_type {
+	AD5310_REGMAP,
 	AD5683_REGMAP,
 	AD5686_REGMAP,
 	AD5693_REGMAP

commit d8084a048cca85e3316c685415fd15234665b160
Author: Stefan Popa <stefan.popa@analog.com>
Date:   Mon Jun 4 17:22:07 2018 +0300

    iio:dac:ad5686: Add AD5311R support
    
    AD5311R is a single channel DAC with 10-bit precision and i2c interface.
    The device includes a 2.5V internal reference which is enabled by default.
    
    This device is similar to AD5691R/AD5692R/AD5693/AD5693R, the only
    difference is that it has 10-bit precision.
    
    Datasheet:
    http://www.analog.com/media/en/technical-documentation/data-sheets/AD5310R_5311R.pdf
    
    Signed-off-by: Stefan Popa <stefan.popa@analog.com>
    Signed-off-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>

diff --git a/drivers/iio/dac/ad5686.h b/drivers/iio/dac/ad5686.h
index d05cda9f1edd..57b3c61bfb91 100644
--- a/drivers/iio/dac/ad5686.h
+++ b/drivers/iio/dac/ad5686.h
@@ -45,6 +45,7 @@
  * ad5686_supported_device_ids:
  */
 enum ad5686_supported_device_ids {
+	ID_AD5311R,
 	ID_AD5671R,
 	ID_AD5672R,
 	ID_AD5675R,

commit 1dbae4c6cdeccf87767003a9d3b6d24b40446100
Author: Stefan Popa <stefan.popa@analog.com>
Date:   Fri May 18 18:23:34 2018 +0300

    iio:dac:ad5686: Add AD5681R/AD5682R/AD5683/AD5683R support
    
    The AD5681R/AD5682R/AD5683/AD5683R are a family of one channel DACs with
    12-bit, 14-bit and 16-bit precision respectively. The devices have either
    no built-in reference, or built-in 2.5V reference.
    
    These devices are similar to AD5691R/AD5692R/AD5693/AD5693R except
    with a few notable differences:
     * they use the SPI interface instead of I2C
     * in the write control register, DB18 and DB17 are used for setting the
       power mode, while DB16 is the REF bit. This is why a new regmap type
       was defined and checked accordingly.
     * the shift register is 24 bits wide, the first four bits are the command
       bits followed by the data bits. As the data comprises of 20-bit, 18-bit
       or 16-bit input code, this means that 4 LSB bits are don't care. This is
       why the data needs to be shifted on the left with four bits. Therefore,
       AD5683_REGMAP is checked inside a switch case in the ad5686_spi_write()
       function. On the other hand, similar devices such as AD5693R family,
       have the 4 MSB command bits followed by 4 don't care bits.
    
    Datasheet:
    http://www.analog.com/media/en/technical-documentation/data-sheets/AD5683R_5682R_5681R_5683.pdf
    
    Signed-off-by: Stefan Popa <stefan.popa@analog.com>
    Signed-off-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>

diff --git a/drivers/iio/dac/ad5686.h b/drivers/iio/dac/ad5686.h
index 6c6879db60e4..d05cda9f1edd 100644
--- a/drivers/iio/dac/ad5686.h
+++ b/drivers/iio/dac/ad5686.h
@@ -13,6 +13,7 @@
 #include <linux/mutex.h>
 #include <linux/kernel.h>
 
+#define AD5683_DATA(x)				((x) << 4)
 #define AD5686_ADDR(x)				((x) << 16)
 #define AD5686_CMD(x)				((x) << 20)
 
@@ -36,6 +37,8 @@
 #define AD5686_LDAC_PWRDN_3STATE		0x3
 
 #define AD5686_CMD_CONTROL_REG			0x4
+#define AD5686_CMD_READBACK_ENABLE_V2		0x5
+#define AD5683_REF_BIT_MSK			BIT(12)
 #define AD5693_REF_BIT_MSK			BIT(12)
 
 /**
@@ -47,6 +50,10 @@ enum ad5686_supported_device_ids {
 	ID_AD5675R,
 	ID_AD5676,
 	ID_AD5676R,
+	ID_AD5681R,
+	ID_AD5682R,
+	ID_AD5683,
+	ID_AD5683R,
 	ID_AD5684,
 	ID_AD5684R,
 	ID_AD5685R,
@@ -64,6 +71,7 @@ enum ad5686_supported_device_ids {
 };
 
 enum ad5686_regmap_type {
+	AD5683_REGMAP,
 	AD5686_REGMAP,
 	AD5693_REGMAP
 };

commit be1b24d2454117113260f2fe59a427d01de4e131
Author: Stefan Popa <stefan.popa@analog.com>
Date:   Fri May 18 18:22:50 2018 +0300

    iio:dac:ad5686: Add AD5691R/AD5692R/AD5693/AD5693R support
    
    The AD5691R/AD5692R/AD5693/AD5693R are a family of one channel DACs with
    12-bit, 14-bit and 16-bit precision respectively. The devices have either
    no built-in reference, or built-in 2.5V reference.
    
    These devices are pretty similar to AD5671R/AD5675R and
    AD5694/AD5694R/AD5695R/AD5696/AD5696R, except that they have one channel.
    Another difference is that they use a write control register(addr 0x04) for
    setting the power down modes and the internal reference instead of separate
    registers for each function.
    
    Datasheet:
    http://www.analog.com/media/en/technical-documentation/data-sheets/AD5693R_5692R_5691R_5693.pdf
    
    Signed-off-by: Stefan Popa <stefan.popa@analog.com>
    Signed-off-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>

diff --git a/drivers/iio/dac/ad5686.h b/drivers/iio/dac/ad5686.h
index 05f0ce9d2de1..6c6879db60e4 100644
--- a/drivers/iio/dac/ad5686.h
+++ b/drivers/iio/dac/ad5686.h
@@ -35,6 +35,9 @@
 #define AD5686_LDAC_PWRDN_100K			0x2
 #define AD5686_LDAC_PWRDN_3STATE		0x3
 
+#define AD5686_CMD_CONTROL_REG			0x4
+#define AD5693_REF_BIT_MSK			BIT(12)
+
 /**
  * ad5686_supported_device_ids:
  */
@@ -49,6 +52,10 @@ enum ad5686_supported_device_ids {
 	ID_AD5685R,
 	ID_AD5686,
 	ID_AD5686R,
+	ID_AD5691R,
+	ID_AD5692R,
+	ID_AD5693,
+	ID_AD5693R,
 	ID_AD5694,
 	ID_AD5694R,
 	ID_AD5695R,
@@ -56,6 +63,11 @@ enum ad5686_supported_device_ids {
 	ID_AD5696R,
 };
 
+enum ad5686_regmap_type {
+	AD5686_REGMAP,
+	AD5693_REGMAP
+};
+
 struct ad5686_state;
 
 typedef int (*ad5686_write_func)(struct ad5686_state *st,
@@ -68,12 +80,14 @@ typedef int (*ad5686_read_func)(struct ad5686_state *st, u8 addr);
  * @int_vref_mv:	AD5620/40/60: the internal reference voltage
  * @num_channels:	number of channels
  * @channel:		channel specification
+ * @regmap_type:	register map layout variant
  */
 
 struct ad5686_chip_info {
 	u16				int_vref_mv;
 	unsigned int			num_channels;
 	struct iio_chan_spec		*channels;
+	enum ad5686_regmap_type		regmap_type;
 };
 
 /**
@@ -84,6 +98,7 @@ struct ad5686_chip_info {
  * @vref_mv:		actual reference voltage used
  * @pwr_down_mask:	power down mask
  * @pwr_down_mode:	current power down mode
+ * @use_internal_vref:	set to true if the internal reference voltage is used
  * @data:		spi transfer buffers
  */
 
@@ -96,6 +111,7 @@ struct ad5686_state {
 	unsigned int			pwr_down_mode;
 	ad5686_write_func		write;
 	ad5686_read_func		read;
+	bool				use_internal_vref;
 
 	/*
 	 * DMA (thus cache coherency maintenance) requires the

commit 4177381b440130ccb686712aaa09b45539114698
Author: Stefan Popa <stefan.popa@analog.com>
Date:   Wed Apr 11 14:53:39 2018 +0300

    iio:dac:ad5686: Add AD5671R/75R/94/94R/95R/96/96R support
    
    The AD5694/AD5694R/AD5695R/AD5696/AD5696R are a family of 4 channel DACs
    with 12-bit, 14-bit and 16-bit precision respectively. The devices have
    either no built-in reference, or built-in 2.5V reference.
    
    The AD5671R/AD5675R are similar, except that they have 8 instead of 4
    channels.
    
    These devices are similar to AD5672R/AD5676/AD5676R and
    AD5684/AD5684R/AD5684/AD5685R/AD5686/AD5686R, except that they use i2c
    instead of spi.
    
    Datasheets:
    http://www.analog.com/media/en/technical-documentation/data-sheets/AD5671R_5675R.pdf
    http://www.analog.com/media/en/technical-documentation/data-sheets/AD5696R_5695R_5694R.pdf
    
    Signed-off-by: Stefan Popa <stefan.popa@analog.com>
    Signed-off-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>

diff --git a/drivers/iio/dac/ad5686.h b/drivers/iio/dac/ad5686.h
index c8e1565391ca..05f0ce9d2de1 100644
--- a/drivers/iio/dac/ad5686.h
+++ b/drivers/iio/dac/ad5686.h
@@ -39,7 +39,9 @@
  * ad5686_supported_device_ids:
  */
 enum ad5686_supported_device_ids {
+	ID_AD5671R,
 	ID_AD5672R,
+	ID_AD5675R,
 	ID_AD5676,
 	ID_AD5676R,
 	ID_AD5684,
@@ -47,6 +49,11 @@ enum ad5686_supported_device_ids {
 	ID_AD5685R,
 	ID_AD5686,
 	ID_AD5686R,
+	ID_AD5694,
+	ID_AD5694R,
+	ID_AD5695R,
+	ID_AD5696,
+	ID_AD5696R,
 };
 
 struct ad5686_state;

commit 0357e488b825313db3d574137337557f404e59ed
Author: Stefan Popa <stefan.popa@analog.com>
Date:   Wed Apr 11 14:53:17 2018 +0300

    iio:dac:ad5686: Refactor the driver
    
    In this patch restructures the existing ad5686 driver by adding a module
    for SPI and a header file, while the baseline module deals with the
    chip-logic.
    
    This is a necessary step, as this driver should support in the future
    similar devices which differ only in the type of interface used (I2C
    instead of SPI).
    
    Signed-off-by: Stefan Popa <stefan.popa@analog.com>
    Signed-off-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>

diff --git a/drivers/iio/dac/ad5686.h b/drivers/iio/dac/ad5686.h
new file mode 100644
index 000000000000..c8e1565391ca
--- /dev/null
+++ b/drivers/iio/dac/ad5686.h
@@ -0,0 +1,114 @@
+/* SPDX-License-Identifier: GPL-2.0+ */
+/*
+ * This file is part of AD5686 DAC driver
+ *
+ * Copyright 2018 Analog Devices Inc.
+ */
+
+#ifndef __DRIVERS_IIO_DAC_AD5686_H__
+#define __DRIVERS_IIO_DAC_AD5686_H__
+
+#include <linux/types.h>
+#include <linux/cache.h>
+#include <linux/mutex.h>
+#include <linux/kernel.h>
+
+#define AD5686_ADDR(x)				((x) << 16)
+#define AD5686_CMD(x)				((x) << 20)
+
+#define AD5686_ADDR_DAC(chan)			(0x1 << (chan))
+#define AD5686_ADDR_ALL_DAC			0xF
+
+#define AD5686_CMD_NOOP				0x0
+#define AD5686_CMD_WRITE_INPUT_N		0x1
+#define AD5686_CMD_UPDATE_DAC_N			0x2
+#define AD5686_CMD_WRITE_INPUT_N_UPDATE_N	0x3
+#define AD5686_CMD_POWERDOWN_DAC		0x4
+#define AD5686_CMD_LDAC_MASK			0x5
+#define AD5686_CMD_RESET			0x6
+#define AD5686_CMD_INTERNAL_REFER_SETUP		0x7
+#define AD5686_CMD_DAISY_CHAIN_ENABLE		0x8
+#define AD5686_CMD_READBACK_ENABLE		0x9
+
+#define AD5686_LDAC_PWRDN_NONE			0x0
+#define AD5686_LDAC_PWRDN_1K			0x1
+#define AD5686_LDAC_PWRDN_100K			0x2
+#define AD5686_LDAC_PWRDN_3STATE		0x3
+
+/**
+ * ad5686_supported_device_ids:
+ */
+enum ad5686_supported_device_ids {
+	ID_AD5672R,
+	ID_AD5676,
+	ID_AD5676R,
+	ID_AD5684,
+	ID_AD5684R,
+	ID_AD5685R,
+	ID_AD5686,
+	ID_AD5686R,
+};
+
+struct ad5686_state;
+
+typedef int (*ad5686_write_func)(struct ad5686_state *st,
+				 u8 cmd, u8 addr, u16 val);
+
+typedef int (*ad5686_read_func)(struct ad5686_state *st, u8 addr);
+
+/**
+ * struct ad5686_chip_info - chip specific information
+ * @int_vref_mv:	AD5620/40/60: the internal reference voltage
+ * @num_channels:	number of channels
+ * @channel:		channel specification
+ */
+
+struct ad5686_chip_info {
+	u16				int_vref_mv;
+	unsigned int			num_channels;
+	struct iio_chan_spec		*channels;
+};
+
+/**
+ * struct ad5446_state - driver instance specific data
+ * @spi:		spi_device
+ * @chip_info:		chip model specific constants, available modes etc
+ * @reg:		supply regulator
+ * @vref_mv:		actual reference voltage used
+ * @pwr_down_mask:	power down mask
+ * @pwr_down_mode:	current power down mode
+ * @data:		spi transfer buffers
+ */
+
+struct ad5686_state {
+	struct device			*dev;
+	const struct ad5686_chip_info	*chip_info;
+	struct regulator		*reg;
+	unsigned short			vref_mv;
+	unsigned int			pwr_down_mask;
+	unsigned int			pwr_down_mode;
+	ad5686_write_func		write;
+	ad5686_read_func		read;
+
+	/*
+	 * DMA (thus cache coherency maintenance) requires the
+	 * transfer buffers to live in their own cache lines.
+	 */
+
+	union {
+		__be32 d32;
+		__be16 d16;
+		u8 d8[4];
+	} data[3] ____cacheline_aligned;
+};
+
+
+int ad5686_probe(struct device *dev,
+		 enum ad5686_supported_device_ids chip_type,
+		 const char *name, ad5686_write_func write,
+		 ad5686_read_func read);
+
+int ad5686_remove(struct device *dev);
+
+
+#endif /* __DRIVERS_IIO_DAC_AD5686_H__ */
