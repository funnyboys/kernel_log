commit 0e5fd387657abfed7da96edd8a313babb7f6a66a
Author: Nishant Malpani <nish.malpani25@gmail.com>
Date:   Sun Mar 22 22:53:08 2020 +0530

    iio: gyro: mpu3050: Use vsprintf extension %pe for symbolic error name
    
    Utilize %pe format specifier from vsprintf while printing error logs
    with dev_err(). Discards the use of unnecessary explicit casting and
    prints symbolic error name which might prove to be convenient during
    debugging.
    
    Signed-off-by: Nishant Malpani <nish.malpani25@gmail.com>
    Signed-off-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>

diff --git a/drivers/iio/gyro/mpu3050-i2c.c b/drivers/iio/gyro/mpu3050-i2c.c
index afa8018b9238..ef5bcbc4b45b 100644
--- a/drivers/iio/gyro/mpu3050-i2c.c
+++ b/drivers/iio/gyro/mpu3050-i2c.c
@@ -51,8 +51,8 @@ static int mpu3050_i2c_probe(struct i2c_client *client,
 
 	regmap = devm_regmap_init_i2c(client, &mpu3050_i2c_regmap_config);
 	if (IS_ERR(regmap)) {
-		dev_err(&client->dev, "Failed to register i2c regmap %d\n",
-			(int)PTR_ERR(regmap));
+		dev_err(&client->dev, "Failed to register i2c regmap: %pe\n",
+			regmap);
 		return PTR_ERR(regmap);
 	}
 

commit 09c434b8a0047c69e48499de0107de312901e798
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Sun May 19 13:08:20 2019 +0100

    treewide: Add SPDX license identifier for more missed files
    
    Add SPDX license identifiers to all files which:
    
     - Have no license information of any form
    
     - Have MODULE_LICENCE("GPL*") inside which was used in the initial
       scan/conversion to ignore the file
    
    These files fall under the project license, GPL v2 only. The resulting SPDX
    license identifier is:
    
      GPL-2.0-only
    
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/iio/gyro/mpu3050-i2c.c b/drivers/iio/gyro/mpu3050-i2c.c
index 93f08b304a63..afa8018b9238 100644
--- a/drivers/iio/gyro/mpu3050-i2c.c
+++ b/drivers/iio/gyro/mpu3050-i2c.c
@@ -1,3 +1,4 @@
+// SPDX-License-Identifier: GPL-2.0-only
 #include <linux/err.h>
 #include <linux/i2c.h>
 #include <linux/i2c-mux.h>

commit 6a95d825f6a407fb214e92e8c63c905fceaea81b
Author: Peter Rosin <peda@axentia.se>
Date:   Mon Apr 3 10:38:37 2017 +0200

    iio: gyro: mpu3050: stop double error reporting
    
    i2c_mux_add_adapter already logs a message on failure.
    
    Signed-off-by: Peter Rosin <peda@axentia.se>
    Reviewed-by: Linus Walleij <linus.walleij@linaro.org>
    Signed-off-by: Jonathan Cameron <jic23@kernel.org>

diff --git a/drivers/iio/gyro/mpu3050-i2c.c b/drivers/iio/gyro/mpu3050-i2c.c
index 06007200bf49..93f08b304a63 100644
--- a/drivers/iio/gyro/mpu3050-i2c.c
+++ b/drivers/iio/gyro/mpu3050-i2c.c
@@ -70,9 +70,8 @@ static int mpu3050_i2c_probe(struct i2c_client *client,
 		dev_err(&client->dev, "failed to allocate I2C mux\n");
 	else {
 		mpu3050->i2cmux->priv = mpu3050;
-		ret = i2c_mux_add_adapter(mpu3050->i2cmux, 0, 0, 0);
-		if (ret)
-			dev_err(&client->dev, "failed to add I2C mux\n");
+		/* Ignore failure, not critical */
+		i2c_mux_add_adapter(mpu3050->i2cmux, 0, 0, 0);
 	}
 
 	return 0;

commit 3904b28efb2c780c23dcddfb87e07fe0230661e5
Author: Linus Walleij <linus.walleij@linaro.org>
Date:   Tue Oct 25 16:15:54 2016 +0200

    iio: gyro: Add driver for the MPU-3050 gyroscope
    
    This adds a new driver for the Invensense MPU-3050 gyroscope.
    This driver is based on information from the rough input driver
    in drivers/input/misc/mpu3050.c and the scratch misc driver
    posted by Nathan Royer in 2011. Some years have passed but this
    is finally a fully-fledged driver for this gyroscope. It was
    developed and tested on the Qualcomm APQ8060 Dragonboard.
    
    The driver supports both raw and buffered input. It also
    supports the internal trigger mechanism by registering a trigger
    that can fire in response to the internal sample engine of the
    component. In addition to reading out the gyroscope sensor
    values, the driver also supports reading the temperature from
    the sensor.
    
    The driver currently only supports I2C but the MPU-3050 can
    also be used from SPI, so the I2C portions are split in their
    own file and we just use regmap to access all registers, so
    it will be trivial to plug in SPI support if/when someone has
    a system requiring this.
    
    To conserve power, the driver utilizes the runtime PM
    framework and will put the sensor in off mode and disable the
    regulators when unused, after a timeout of 10 seconds.
    
    The fullscale can be set for the sensor to 250, 500, 1000 or
    2000 deg/s. This corresponds to scale values of rougly 0.000122,
    0.000275, 0.000512 or 0.001068. By writing such values (or close
    to these) into "in_anglevel_scale", the corresponding fullscale
    can be chosen. It will default to 2000 deg/s (~35 rad/s).
    
    The gyro component can have DC offsets on all axes. These can be
    compensated using the standard sysfs ABI property
    "in_anglevel_[xyz]_calibbias". This is in positive/negative
    values of the raw values, so a suitable calibration bias can be
    determined by userspace by reading the "in_anglevel_[xyz]_raw"
    for a few iterations while holding the sensor still, create an
    average integer, and writing the negative inverse of that into
    "in_anglevel_[xyz]_calibbias". After this the hardware will
    automatically subtract the bias, also when using buffered
    readings.
    
    Since the MPU-3050 has an outgoing I2C port it needs to act as
    an I2C mux. This means that the device is switching I2C traffic
    to devices beyond it. On my system this is the only way to reach
    the accelerometer. The "sensor fusion" ability of the MPU-3050
    to directly talk to the device on the outgoing I2C port is
    currently not used by the driver, but it has code to allow I2C
    traffic to pass through so that the Linux kernel can reach the
    device on the other side with a kernel driver.
    
    Example usage with the native trigger:
    
    $ generic_buffer -a -c10 -n mpu3050
    iio device number being used is 0
    iio trigger number being used is 0
    No channels are enabled, enabling all channels
    Enabling: in_anglvel_z_en
    Enabling: in_timestamp_en
    Enabling: in_anglvel_y_en
    Enabling: in_temp_en
    Enabling: in_anglvel_x_en
    /sys/bus/iio/devices/iio:device0 mpu3050-dev0
    29607.142578 -0.117493 0.074768 0.012817 180788797150
    29639.285156 -0.117493 0.076904 0.013885 180888982335
    29696.427734 -0.116425 0.076904 0.012817 180989178039
    29742.857422 -0.117493 0.076904 0.012817 181089377742
    29764.285156 -0.116425 0.077972 0.012817 181189574187
    29860.714844 -0.115356 0.076904 0.012817 181289772705
    29864.285156 -0.117493 0.076904 0.012817 181389971520
    29910.714844 -0.115356 0.076904 0.013885 181490170483
    29917.857422 -0.116425 0.076904 0.011749 181590369742
    29975.000000 -0.116425 0.076904 0.012817 181690567075
    Disabling: in_anglvel_z_en
    Disabling: in_timestamp_en
    Disabling: in_anglvel_y_en
    Disabling: in_temp_en
    Disabling: in_anglvel_x_en
    
    The first column is the temperature in millidegrees, then the x,y,z
    axes in succession followed by the timestamp. Also tested successfully
    using the HRTimer trigger.
    
    Cc: Nick Vaccaro <nvaccaro@google.com>
    Cc: Ge Gao <ggao@invensense.com>
    Cc: Anna Si <asi@invensense.com>
    Cc: Dmitry Torokhov <dmitry.torokhov@gmail.com>
    Cc: Crestez Dan Leonard <leonard.crestez@intel.com>
    Cc: Daniel Baluta <daniel.baluta@intel.com>
    Cc: Gregor Boirie <gregor.boirie@parrot.com>
    Cc: Peter Rosin <peda@axentia.se>
    Cc: Peter Meerwald-Stadler <pmeerw@pmeerw.net>
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>
    Signed-off-by: Jonathan Cameron <jic23@kernel.org>

diff --git a/drivers/iio/gyro/mpu3050-i2c.c b/drivers/iio/gyro/mpu3050-i2c.c
new file mode 100644
index 000000000000..06007200bf49
--- /dev/null
+++ b/drivers/iio/gyro/mpu3050-i2c.c
@@ -0,0 +1,124 @@
+#include <linux/err.h>
+#include <linux/i2c.h>
+#include <linux/i2c-mux.h>
+#include <linux/iio/iio.h>
+#include <linux/module.h>
+#include <linux/regmap.h>
+#include <linux/pm_runtime.h>
+
+#include "mpu3050.h"
+
+static const struct regmap_config mpu3050_i2c_regmap_config = {
+	.reg_bits = 8,
+	.val_bits = 8,
+};
+
+static int mpu3050_i2c_bypass_select(struct i2c_mux_core *mux, u32 chan_id)
+{
+	struct mpu3050 *mpu3050 = i2c_mux_priv(mux);
+
+	/* Just power up the device, that is all that is needed */
+	pm_runtime_get_sync(mpu3050->dev);
+	return 0;
+}
+
+static int mpu3050_i2c_bypass_deselect(struct i2c_mux_core *mux, u32 chan_id)
+{
+	struct mpu3050 *mpu3050 = i2c_mux_priv(mux);
+
+	pm_runtime_mark_last_busy(mpu3050->dev);
+	pm_runtime_put_autosuspend(mpu3050->dev);
+	return 0;
+}
+
+static int mpu3050_i2c_probe(struct i2c_client *client,
+			     const struct i2c_device_id *id)
+{
+	struct regmap *regmap;
+	const char *name;
+	struct mpu3050 *mpu3050;
+	int ret;
+
+	if (!i2c_check_functionality(client->adapter,
+				     I2C_FUNC_SMBUS_I2C_BLOCK))
+		return -EOPNOTSUPP;
+
+	if (id)
+		name = id->name;
+	else
+		return -ENODEV;
+
+	regmap = devm_regmap_init_i2c(client, &mpu3050_i2c_regmap_config);
+	if (IS_ERR(regmap)) {
+		dev_err(&client->dev, "Failed to register i2c regmap %d\n",
+			(int)PTR_ERR(regmap));
+		return PTR_ERR(regmap);
+	}
+
+	ret = mpu3050_common_probe(&client->dev, regmap, client->irq, name);
+	if (ret)
+		return ret;
+
+	/* The main driver is up, now register the I2C mux */
+	mpu3050 = iio_priv(dev_get_drvdata(&client->dev));
+	mpu3050->i2cmux = i2c_mux_alloc(client->adapter, &client->dev,
+					1, 0, I2C_MUX_LOCKED | I2C_MUX_GATE,
+					mpu3050_i2c_bypass_select,
+					mpu3050_i2c_bypass_deselect);
+	/* Just fail the mux, there is no point in killing the driver */
+	if (!mpu3050->i2cmux)
+		dev_err(&client->dev, "failed to allocate I2C mux\n");
+	else {
+		mpu3050->i2cmux->priv = mpu3050;
+		ret = i2c_mux_add_adapter(mpu3050->i2cmux, 0, 0, 0);
+		if (ret)
+			dev_err(&client->dev, "failed to add I2C mux\n");
+	}
+
+	return 0;
+}
+
+static int mpu3050_i2c_remove(struct i2c_client *client)
+{
+	struct iio_dev *indio_dev = dev_get_drvdata(&client->dev);
+	struct mpu3050 *mpu3050 = iio_priv(indio_dev);
+
+	if (mpu3050->i2cmux)
+		i2c_mux_del_adapters(mpu3050->i2cmux);
+
+	return mpu3050_common_remove(&client->dev);
+}
+
+/*
+ * device id table is used to identify what device can be
+ * supported by this driver
+ */
+static const struct i2c_device_id mpu3050_i2c_id[] = {
+	{ "mpu3050" },
+	{}
+};
+MODULE_DEVICE_TABLE(i2c, mpu3050_i2c_id);
+
+static const struct of_device_id mpu3050_i2c_of_match[] = {
+	{ .compatible = "invensense,mpu3050", .data = "mpu3050" },
+	/* Deprecated vendor ID from the Input driver */
+	{ .compatible = "invn,mpu3050", .data = "mpu3050" },
+	{ },
+};
+MODULE_DEVICE_TABLE(of, mpu3050_i2c_of_match);
+
+static struct i2c_driver mpu3050_i2c_driver = {
+	.probe = mpu3050_i2c_probe,
+	.remove = mpu3050_i2c_remove,
+	.id_table = mpu3050_i2c_id,
+	.driver = {
+		.of_match_table = mpu3050_i2c_of_match,
+		.name = "mpu3050-i2c",
+		.pm = &mpu3050_dev_pm_ops,
+	},
+};
+module_i2c_driver(mpu3050_i2c_driver);
+
+MODULE_AUTHOR("Linus Walleij");
+MODULE_DESCRIPTION("Invensense MPU3050 gyroscope driver");
+MODULE_LICENSE("GPL");
