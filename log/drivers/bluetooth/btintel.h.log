commit fae7548f25a41443f1f074fcc6d3fed220a42a34
Author: Nathan Chancellor <natechancellor@gmail.com>
Date:   Fri Oct 18 15:29:24 2019 -0700

    Bluetooth: btusb: Remove return statement in btintel_reset_to_bootloader
    
    When building with Clang and CONFIG_BT_INTEL unset, the following error
    occurs:
    
    In file included from drivers/bluetooth/hci_ldisc.c:34:
    drivers/bluetooth/btintel.h:188:2: error: void function
    'btintel_reset_to_bootloader' should not return a value [-Wreturn-type]
            return -EOPNOTSUPP;
            ^      ~~~~~~~~~~~
    1 error generated.
    
    Remove the unneeded return statement to fix this.
    
    Fixes: b9a2562f4918 ("Bluetooth: btusb: Trigger Intel FW download error recovery")
    Link: https://github.com/ClangBuiltLinux/linux/issues/743
    Reported-by: <ci_notify@linaro.org>
    Reported-by: Stephen Rothwell <sfr@canb.auug.org.au>
    Signed-off-by: Nathan Chancellor <natechancellor@gmail.com>
    Reviewed-by: Nick Desaulniers <ndesaulniers@google.com>
    Signed-off-by: Marcel Holtmann <marcel@holtmann.org>

diff --git a/drivers/bluetooth/btintel.h b/drivers/bluetooth/btintel.h
index d2311156f778..a69ea8a87b9b 100644
--- a/drivers/bluetooth/btintel.h
+++ b/drivers/bluetooth/btintel.h
@@ -185,6 +185,5 @@ static inline int btintel_download_firmware(struct hci_dev *dev,
 
 static inline void btintel_reset_to_bootloader(struct hci_dev *hdev)
 {
-	return -EOPNOTSUPP;
 }
 #endif

commit b9a2562f4918c557f664fbba215122aca3cbb2fe
Author: Amit K Bag <amit.k.bag@intel.com>
Date:   Thu Oct 17 13:52:29 2019 +0530

    Bluetooth: btusb: Trigger Intel FW download error recovery
    
    Sometimes during FW data download stage, in case of an error is
    encountered the controller device could not be recovered. To recover
    from such failures send Intel hard Reset to re-trigger FW download in
    following error scenarios:
    
    1. Intel Read version command error
    2. Firmware download timeout
    3. Failure in Intel Soft Reset for switching to operational FW
    4. Boot timeout for switching to operaional FW
    
    Signed-off-by: Raghuram Hegde <raghuram.hegde@intel.com>
    Signed-off-by: Chethan T N <chethan.tumkur.narayan@intel.com>
    Signed-off-by: Amit K Bag <amit.k.bag@intel.com>
    Signed-off-by: Marcel Holtmann <marcel@holtmann.org>

diff --git a/drivers/bluetooth/btintel.h b/drivers/bluetooth/btintel.h
index 3d846190f2bf..d2311156f778 100644
--- a/drivers/bluetooth/btintel.h
+++ b/drivers/bluetooth/btintel.h
@@ -87,6 +87,7 @@ int btintel_read_boot_params(struct hci_dev *hdev,
 			     struct intel_boot_params *params);
 int btintel_download_firmware(struct hci_dev *dev, const struct firmware *fw,
 			      u32 *boot_param);
+void btintel_reset_to_bootloader(struct hci_dev *hdev);
 #else
 
 static inline int btintel_check_bdaddr(struct hci_dev *hdev)
@@ -181,4 +182,9 @@ static inline int btintel_download_firmware(struct hci_dev *dev,
 {
 	return -EOPNOTSUPP;
 }
+
+static inline void btintel_reset_to_bootloader(struct hci_dev *hdev)
+{
+	return -EOPNOTSUPP;
+}
 #endif

commit 1a59d1b8e05ea6ab45f7e18897de1ef0e6bc3da6
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Mon May 27 08:55:05 2019 +0200

    treewide: Replace GPLv2 boilerplate/reference with SPDX - rule 156
    
    Based on 1 normalized pattern(s):
    
      this program is free software you can redistribute it and or modify
      it under the terms of the gnu general public license as published by
      the free software foundation either version 2 of the license or at
      your option any later version this program is distributed in the
      hope that it will be useful but without any warranty without even
      the implied warranty of merchantability or fitness for a particular
      purpose see the gnu general public license for more details you
      should have received a copy of the gnu general public license along
      with this program if not write to the free software foundation inc
      59 temple place suite 330 boston ma 02111 1307 usa
    
    extracted by the scancode license scanner the SPDX license identifier
    
      GPL-2.0-or-later
    
    has been chosen to replace the boilerplate/reference in 1334 file(s).
    
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Reviewed-by: Allison Randal <allison@lohutok.net>
    Reviewed-by: Richard Fontana <rfontana@redhat.com>
    Cc: linux-spdx@vger.kernel.org
    Link: https://lkml.kernel.org/r/20190527070033.113240726@linutronix.de
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/bluetooth/btintel.h b/drivers/bluetooth/btintel.h
index 41c642cc523f..3d846190f2bf 100644
--- a/drivers/bluetooth/btintel.h
+++ b/drivers/bluetooth/btintel.h
@@ -1,24 +1,9 @@
+/* SPDX-License-Identifier: GPL-2.0-or-later */
 /*
  *
  *  Bluetooth support for Intel devices
  *
  *  Copyright (C) 2015  Intel Corporation
- *
- *
- *  This program is free software; you can redistribute it and/or modify
- *  it under the terms of the GNU General Public License as published by
- *  the Free Software Foundation; either version 2 of the License, or
- *  (at your option) any later version.
- *
- *  This program is distributed in the hope that it will be useful,
- *  but WITHOUT ANY WARRANTY; without even the implied warranty of
- *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- *  GNU General Public License for more details.
- *
- *  You should have received a copy of the GNU General Public License
- *  along with this program; if not, write to the Free Software
- *  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
- *
  */
 
 struct intel_version {

commit fbbe83c52bc0d52398de72d7df1857cc9b36244e
Author: Tedd Ho-Jeong An <tedd.an@linux.intel.com>
Date:   Wed Jan 24 09:19:21 2018 -0800

    Bluetooth: btintel: Create common function for firmware download
    
    The firmware download flow for RAM SKU is same for both USB and UART
    and this patch creates a common function for both driver.
    
    Signed-off-by: Tedd Ho-Jeong An <tedd.an@linux.intel.com>
    Signed-off-by: Marcel Holtmann <marcel@holtmann.org>

diff --git a/drivers/bluetooth/btintel.h b/drivers/bluetooth/btintel.h
index 0391e7aba03b..41c642cc523f 100644
--- a/drivers/bluetooth/btintel.h
+++ b/drivers/bluetooth/btintel.h
@@ -100,7 +100,8 @@ struct regmap *btintel_regmap_init(struct hci_dev *hdev, u16 opcode_read,
 int btintel_send_intel_reset(struct hci_dev *hdev, u32 boot_param);
 int btintel_read_boot_params(struct hci_dev *hdev,
 			     struct intel_boot_params *params);
-
+int btintel_download_firmware(struct hci_dev *dev, const struct firmware *fw,
+			      u32 *boot_param);
 #else
 
 static inline int btintel_check_bdaddr(struct hci_dev *hdev)
@@ -188,4 +189,11 @@ static inline int btintel_read_boot_params(struct hci_dev *hdev,
 {
 	return -EOPNOTSUPP;
 }
+
+static inline int btintel_download_firmware(struct hci_dev *dev,
+					    const struct firmware *fw,
+					    u32 *boot_param)
+{
+	return -EOPNOTSUPP;
+}
 #endif

commit faf174d297134ad071f528a9db787b4c95734b40
Author: Tedd Ho-Jeong An <tedd.an@linux.intel.com>
Date:   Wed Jan 24 09:19:20 2018 -0800

    Bluetooth: btintel: Create common Intel Read Boot Params function
    
    The Intel_Read_Boot_Params command is used to read boot parameters
    from the bootloader and this is Intel generic command used in USB
    and UART drivers.
    
    Signed-off-by: Tedd Ho-Jeong An <tedd.an@linux.intel.com>
    Signed-off-by: Marcel Holtmann <marcel@holtmann.org>

diff --git a/drivers/bluetooth/btintel.h b/drivers/bluetooth/btintel.h
index 2235705c2ef2..0391e7aba03b 100644
--- a/drivers/bluetooth/btintel.h
+++ b/drivers/bluetooth/btintel.h
@@ -98,6 +98,8 @@ int btintel_read_version(struct hci_dev *hdev, struct intel_version *ver);
 struct regmap *btintel_regmap_init(struct hci_dev *hdev, u16 opcode_read,
 				   u16 opcode_write);
 int btintel_send_intel_reset(struct hci_dev *hdev, u32 boot_param);
+int btintel_read_boot_params(struct hci_dev *hdev,
+			     struct intel_boot_params *params);
 
 #else
 
@@ -180,4 +182,10 @@ static inline int btintel_send_intel_reset(struct hci_dev *hdev,
 {
 	return -EOPNOTSUPP;
 }
+
+static inline int btintel_read_boot_params(struct hci_dev *hdev,
+					   struct intel_boot_params *params)
+{
+	return -EOPNOTSUPP;
+}
 #endif

commit e5889af62fce081dbd2e5d087683b9b7135bc731
Author: Tedd Ho-Jeong An <tedd.an@linux.intel.com>
Date:   Wed Jan 24 09:19:18 2018 -0800

    Bluetooth: btintel: Create common function for Intel Reset
    
    The Intel_Reset command is used to reset the device after downloading
    the firmware and this is Intel generic command used in both USB and
    UART.
    
    Signed-off-by: Tedd Ho-Jeong An <tedd.an@linux.intel.com>
    Signed-off-by: Marcel Holtmann <marcel@holtmann.org>

diff --git a/drivers/bluetooth/btintel.h b/drivers/bluetooth/btintel.h
index 1e8955aaafed..2235705c2ef2 100644
--- a/drivers/bluetooth/btintel.h
+++ b/drivers/bluetooth/btintel.h
@@ -69,6 +69,14 @@ struct intel_secure_send_result {
 	__u8     status;
 } __packed;
 
+struct intel_reset {
+	__u8     reset_type;
+	__u8     patch_enable;
+	__u8     ddc_reload;
+	__u8     boot_option;
+	__le32   boot_param;
+} __packed;
+
 #if IS_ENABLED(CONFIG_BT_INTEL)
 
 int btintel_check_bdaddr(struct hci_dev *hdev);
@@ -89,6 +97,7 @@ int btintel_read_version(struct hci_dev *hdev, struct intel_version *ver);
 
 struct regmap *btintel_regmap_init(struct hci_dev *hdev, u16 opcode_read,
 				   u16 opcode_write);
+int btintel_send_intel_reset(struct hci_dev *hdev, u32 boot_param);
 
 #else
 
@@ -165,4 +174,10 @@ static inline struct regmap *btintel_regmap_init(struct hci_dev *hdev,
 {
 	return ERR_PTR(-EINVAL);
 }
+
+static inline int btintel_send_intel_reset(struct hci_dev *hdev,
+					   u32 reset_param)
+{
+	return -EOPNOTSUPP;
+}
 #endif

commit 6c483de1b3c41e939b735df1861759815e125304
Author: Loic Poulain <loic.poulain@intel.com>
Date:   Sun Dec 6 16:18:34 2015 +0100

    Bluetooth: btintel: Create common Intel Version Read function
    
    The Intel Version Read command is used to retrieve information
    about hardware and firmware version/revision of Intel Bluetooth
    controllers. This is an Intel generic command used in USB and
    UART drivers.
    
    Signed-off-by: Loic Poulain <loic.poulain@intel.com>
    Signed-off-by: Marcel Holtmann <marcel@holtmann.org>

diff --git a/drivers/bluetooth/btintel.h b/drivers/bluetooth/btintel.h
index fa72eaec3461..1e8955aaafed 100644
--- a/drivers/bluetooth/btintel.h
+++ b/drivers/bluetooth/btintel.h
@@ -85,6 +85,7 @@ int btintel_secure_send(struct hci_dev *hdev, u8 fragment_type, u32 plen,
 int btintel_load_ddc_config(struct hci_dev *hdev, const char *ddc_name);
 int btintel_set_event_mask(struct hci_dev *hdev, bool debug);
 int btintel_set_event_mask_mfg(struct hci_dev *hdev, bool debug);
+int btintel_read_version(struct hci_dev *hdev, struct intel_version *ver);
 
 struct regmap *btintel_regmap_init(struct hci_dev *hdev, u16 opcode_read,
 				   u16 opcode_write);
@@ -152,6 +153,12 @@ static inline int btintel_set_event_mask_mfg(struct hci_dev *hdev, bool debug)
 	return -EOPNOTSUPP;
 }
 
+static inline int btintel_read_version(struct hci_dev *hdev,
+				       struct intel_version *ver)
+{
+	return -EOPNOTSUPP;
+}
+
 static inline struct regmap *btintel_regmap_init(struct hci_dev *hdev,
 						 u16 opcode_read,
 						 u16 opcode_write)

commit 28dc4b92e20e0fd18be2d8356abf959d58c7346a
Author: Loic Poulain <loic.poulain@intel.com>
Date:   Thu Dec 3 16:10:22 2015 +0100

    Bluetooth: btintel: Add manufacturing enter/exit helpers
    
    Older Intel controllers need to enter manufacturing mode to perform
    some vendor specific operations (patching, configuration...).
    Add enter/exit manufaturing methods and refactor existing
    manufacturing code.
    Exit can be configured to perform a reset. Reset can be performed
    either with patches activated or deactivated.
    
    Signed-off-by: Loic Poulain <loic.poulain@intel.com>
    Signed-off-by: Marcel Holtmann <marcel@holtmann.org>

diff --git a/drivers/bluetooth/btintel.h b/drivers/bluetooth/btintel.h
index 07e58e05a7fa..fa72eaec3461 100644
--- a/drivers/bluetooth/btintel.h
+++ b/drivers/bluetooth/btintel.h
@@ -72,6 +72,8 @@ struct intel_secure_send_result {
 #if IS_ENABLED(CONFIG_BT_INTEL)
 
 int btintel_check_bdaddr(struct hci_dev *hdev);
+int btintel_enter_mfg(struct hci_dev *hdev);
+int btintel_exit_mfg(struct hci_dev *hdev, bool reset, bool patched);
 int btintel_set_bdaddr(struct hci_dev *hdev, const bdaddr_t *bdaddr);
 int btintel_set_diag(struct hci_dev *hdev, bool enable);
 int btintel_set_diag_mfg(struct hci_dev *hdev, bool enable);
@@ -94,6 +96,16 @@ static inline int btintel_check_bdaddr(struct hci_dev *hdev)
 	return -EOPNOTSUPP;
 }
 
+static inline int btintel_enter_mfg(struct hci_dev *hdev)
+{
+	return -EOPNOTSUPP;
+}
+
+static inline int btintel_exit_mfg(struct hci_dev *hdev, bool reset, bool patched)
+{
+	return -EOPNOTSUPP;
+}
+
 static inline int btintel_set_bdaddr(struct hci_dev *hdev, const bdaddr_t *bdaddr)
 {
 	return -EOPNOTSUPP;

commit 213445b2b40e87e819c7d949ae7d97c30dcd0853
Author: Marcel Holtmann <marcel@holtmann.org>
Date:   Wed Oct 21 02:45:19 2015 +0200

    Bluetooth: btintel: Enable extra Intel vendor events
    
    The Intel Bluetooth controllers can emit extra vendor specific events in
    error conditions or for debugging purposes. To make the life easier for
    engineers, enable them by default. When the vendor_diag options has been
    enabled, then additional debug events are also enabled.
    
    Signed-off-by: Marcel Holtmann <marcel@holtmann.org>
    Signed-off-by: Johan Hedberg <johan.hedberg@intel.com>

diff --git a/drivers/bluetooth/btintel.h b/drivers/bluetooth/btintel.h
index 702a276b3c60..07e58e05a7fa 100644
--- a/drivers/bluetooth/btintel.h
+++ b/drivers/bluetooth/btintel.h
@@ -81,6 +81,8 @@ void btintel_version_info(struct hci_dev *hdev, struct intel_version *ver);
 int btintel_secure_send(struct hci_dev *hdev, u8 fragment_type, u32 plen,
 			const void *param);
 int btintel_load_ddc_config(struct hci_dev *hdev, const char *ddc_name);
+int btintel_set_event_mask(struct hci_dev *hdev, bool debug);
+int btintel_set_event_mask_mfg(struct hci_dev *hdev, bool debug);
 
 struct regmap *btintel_regmap_init(struct hci_dev *hdev, u16 opcode_read,
 				   u16 opcode_write);
@@ -128,6 +130,16 @@ static inline int btintel_load_ddc_config(struct hci_dev *hdev,
 	return -EOPNOTSUPP;
 }
 
+static inline int btintel_set_event_mask(struct hci_dev *hdev, bool debug)
+{
+	return -EOPNOTSUPP;
+}
+
+static inline int btintel_set_event_mask_mfg(struct hci_dev *hdev, bool debug)
+{
+	return -EOPNOTSUPP;
+}
+
 static inline struct regmap *btintel_regmap_init(struct hci_dev *hdev,
 						 u16 opcode_read,
 						 u16 opcode_write)

commit 3e24767b78744c7f335ca8c485ab0a0dcec693ec
Author: Marcel Holtmann <marcel@holtmann.org>
Date:   Sat Oct 17 16:00:28 2015 +0200

    Bluetooth: btintel: Add diagnostic support for older controllers
    
    For the older controllers like Wilkens Peak and Stone Peak, enabling the
    traces requires to switch into manufacturer mode first. This patch does
    exactly that, but only for these older controllers.
    
    Signed-off-by: Marcel Holtmann <marcel@holtmann.org>
    Signed-off-by: Johan Hedberg <johan.hedberg@intel.com>

diff --git a/drivers/bluetooth/btintel.h b/drivers/bluetooth/btintel.h
index 0af06ae197c1..702a276b3c60 100644
--- a/drivers/bluetooth/btintel.h
+++ b/drivers/bluetooth/btintel.h
@@ -74,6 +74,7 @@ struct intel_secure_send_result {
 int btintel_check_bdaddr(struct hci_dev *hdev);
 int btintel_set_bdaddr(struct hci_dev *hdev, const bdaddr_t *bdaddr);
 int btintel_set_diag(struct hci_dev *hdev, bool enable);
+int btintel_set_diag_mfg(struct hci_dev *hdev, bool enable);
 void btintel_hw_error(struct hci_dev *hdev, u8 code);
 
 void btintel_version_info(struct hci_dev *hdev, struct intel_version *ver);
@@ -101,6 +102,11 @@ static inline int btintel_set_diag(struct hci_dev *hdev, bool enable)
 	return -EOPNOTSUPP;
 }
 
+static inline int btintel_set_diag_mfg(struct hci_dev *hdev, bool enable)
+{
+	return -EOPNOTSUPP;
+}
+
 static inline void btintel_hw_error(struct hci_dev *hdev, u8 code)
 {
 }

commit 6d2e50d24098b1f80ad76db9a9cb9668c4bf6b50
Author: Marcel Holtmann <marcel@holtmann.org>
Date:   Fri Oct 9 14:42:08 2015 +0200

    Bluetooth: btintel: Add support for enabling tracing functionality
    
    For Intel controllers with firmware that allows tracing of baseband
    functionality this allows enabling it via set_diag driver callback.
    
    Signed-off-by: Marcel Holtmann <marcel@holtmann.org>
    Signed-off-by: Johan Hedberg <johan.hedberg@intel.com>

diff --git a/drivers/bluetooth/btintel.h b/drivers/bluetooth/btintel.h
index f0655c476fd2..0af06ae197c1 100644
--- a/drivers/bluetooth/btintel.h
+++ b/drivers/bluetooth/btintel.h
@@ -73,6 +73,7 @@ struct intel_secure_send_result {
 
 int btintel_check_bdaddr(struct hci_dev *hdev);
 int btintel_set_bdaddr(struct hci_dev *hdev, const bdaddr_t *bdaddr);
+int btintel_set_diag(struct hci_dev *hdev, bool enable);
 void btintel_hw_error(struct hci_dev *hdev, u8 code);
 
 void btintel_version_info(struct hci_dev *hdev, struct intel_version *ver);
@@ -95,6 +96,11 @@ static inline int btintel_set_bdaddr(struct hci_dev *hdev, const bdaddr_t *bdadd
 	return -EOPNOTSUPP;
 }
 
+static inline int btintel_set_diag(struct hci_dev *hdev, bool enable)
+{
+	return -EOPNOTSUPP;
+}
+
 static inline void btintel_hw_error(struct hci_dev *hdev, u8 code)
 {
 }

commit d06f107bcd828a6c3ecd4a7d449d5d0c0dba0326
Author: Loic Poulain <loic.poulain@intel.com>
Date:   Thu Oct 1 18:16:21 2015 +0200

    Bluetooth: btintel: Add iBT register access over HCI support
    
    Add regmap ibt to support Intel Bluetooth silicon register access
    over HCI. Intel BT/FM combo chip allows to read/write some registers
    (e.g. FM registers) via its HCI interface.
    
    Read/Write operations are performed via a HCI transaction composed of
    a HCI command (host->controller) followed by a HCI command complete
    event (controller->host). Read/Write Command opcodes can be specified
    to the regmap init function.
    We define data formats which are intel/vendor specific.
    
    Register Read/Write HCI command payload (Host):
    Field: | REG ADDR | MODE | DATA_LEN | DATA... |
    size:  |   32b    |  8b  |    8b    |  8b*    |
    
    Register Read HCI command complete event payload (Controller):
    Field: | CMD STATUS | REG ADDR | DATA... |
    size:  |     8b     |   32b    |  8b*    |
    
    Register Write HCI command complete event payload (Controller):
    Field: | CMD_STATUS |
    size:  |     8b     |
    
    Since this payload is HCI encapsulated, Little Endian byte order is
    used.
    
    Write/Read Example:
    
    If we write 0x0000002a at address 0x00008c04, with opcode_write 0xfc5d,
    The resulting transaction is (btmon trace):
    
    < HCI Command (0x3f|0x005d) plen 10 [hci0]
            04 8c 00 00 02 04 2a 00 00 00
    > HCI Event (0x0e) plen 4
          Unknown (0x3f|0x005d) ncmd 1
            00
    
    Then, if we read the same register with opcode_read 0xfc5e:
    
    < HCI Command (0x3f|0x005e) plen 6 [hci0]
            04 8c 00 00 02 04
    > HCI Event (0x0e) plen 12 [hci0]
          Unknown (0x3f|0x005e) ncmd 1
            00 04 8c 00 00 2a 00 00 00
    
    Signed-off-by: Loic Poulain <loic.poulain@intel.com>
    Signed-off-by: Marcel Holtmann <marcel@holtmann.org>

diff --git a/drivers/bluetooth/btintel.h b/drivers/bluetooth/btintel.h
index 52deaf2817cf..f0655c476fd2 100644
--- a/drivers/bluetooth/btintel.h
+++ b/drivers/bluetooth/btintel.h
@@ -80,6 +80,9 @@ int btintel_secure_send(struct hci_dev *hdev, u8 fragment_type, u32 plen,
 			const void *param);
 int btintel_load_ddc_config(struct hci_dev *hdev, const char *ddc_name);
 
+struct regmap *btintel_regmap_init(struct hci_dev *hdev, u16 opcode_read,
+				   u16 opcode_write);
+
 #else
 
 static inline int btintel_check_bdaddr(struct hci_dev *hdev)
@@ -113,4 +116,10 @@ static inline int btintel_load_ddc_config(struct hci_dev *hdev,
 	return -EOPNOTSUPP;
 }
 
+static inline struct regmap *btintel_regmap_init(struct hci_dev *hdev,
+						 u16 opcode_read,
+						 u16 opcode_write)
+{
+	return ERR_PTR(-EINVAL);
+}
 #endif

commit 145f2368c5fd7962e37315ccc092670743019d08
Author: Loic Poulain <loic.poulain@intel.com>
Date:   Fri Sep 4 17:54:34 2015 +0200

    Bluetooth: btintel: Add Device Configuration support
    
    btintel_load_ddc_config retrieves the ddc file and sends its content
    via DDC commands (opcode 0xfc8b).
    
    The ddc file should contain one or more DDC structures.
    A DDC structure is composed of the folowing fields:
    field: | DDC LEN |    DDC ID    |   DDC VALUE   |
    size:  | 1 byte  |    2 bytes   |  DDC LEN - 2  |
    
    Signed-off-by: Loic Poulain <loic.poulain@intel.com>
    Signed-off-by: Marcel Holtmann <marcel@holtmann.org>

diff --git a/drivers/bluetooth/btintel.h b/drivers/bluetooth/btintel.h
index a49c8dbbb4b7..52deaf2817cf 100644
--- a/drivers/bluetooth/btintel.h
+++ b/drivers/bluetooth/btintel.h
@@ -78,6 +78,7 @@ void btintel_hw_error(struct hci_dev *hdev, u8 code);
 void btintel_version_info(struct hci_dev *hdev, struct intel_version *ver);
 int btintel_secure_send(struct hci_dev *hdev, u8 fragment_type, u32 plen,
 			const void *param);
+int btintel_load_ddc_config(struct hci_dev *hdev, const char *ddc_name);
 
 #else
 
@@ -106,4 +107,10 @@ static inline int btintel_secure_send(struct hci_dev *hdev, u8 fragment_type,
 	return -EOPNOTSUPP;
 }
 
+static inline int btintel_load_ddc_config(struct hci_dev *hdev,
+					  const char *ddc_name)
+{
+	return -EOPNOTSUPP;
+}
+
 #endif

commit 0eee53cdd985772284a14b21088e7677aeca45f9
Author: Vincent Stehlé <vincent.stehle@laposte.net>
Date:   Thu Sep 3 23:08:45 2015 +0200

    Bluetooth: btintel: fix warning
    
    Fix compilation the following compilation warning, which happens when
    CONFIG_BT_INTEL is not set:
    
      drivers/bluetooth/btintel.h:98:13: warning: ‘btintel_version_info’
      defined but not used [-Wunused-function]
       static void btintel_version_info(struct hci_dev *hdev,
                                        struct intel_version *ver)
                   ^
    
    Signed-off-by: Vincent Stehlé <vincent.stehle@laposte.net>
    Signed-off-by: Marcel Holtmann <marcel@holtmann.org>

diff --git a/drivers/bluetooth/btintel.h b/drivers/bluetooth/btintel.h
index b278d14758d5..a49c8dbbb4b7 100644
--- a/drivers/bluetooth/btintel.h
+++ b/drivers/bluetooth/btintel.h
@@ -95,7 +95,8 @@ static inline void btintel_hw_error(struct hci_dev *hdev, u8 code)
 {
 }
 
-static void btintel_version_info(struct hci_dev *hdev, struct intel_version *ver)
+static inline void btintel_version_info(struct hci_dev *hdev,
+					struct intel_version *ver)
 {
 }
 

commit 7feb99e1308204e4d849dada3443bc410ce5026b
Author: Marcel Holtmann <marcel@holtmann.org>
Date:   Sun Jul 5 15:02:07 2015 +0200

    Bluetooth: btintel: Create common function for Intel version info
    
    The Intel version information is shared between USB and UART drivers
    and with that move it into a generic function of the Intel module.
    
    Signed-off-by: Marcel Holtmann <marcel@holtmann.org>
    Signed-off-by: Johan Hedberg <johan.hedberg@intel.com>

diff --git a/drivers/bluetooth/btintel.h b/drivers/bluetooth/btintel.h
index ec89e3cb645f..b278d14758d5 100644
--- a/drivers/bluetooth/btintel.h
+++ b/drivers/bluetooth/btintel.h
@@ -75,6 +75,7 @@ int btintel_check_bdaddr(struct hci_dev *hdev);
 int btintel_set_bdaddr(struct hci_dev *hdev, const bdaddr_t *bdaddr);
 void btintel_hw_error(struct hci_dev *hdev, u8 code);
 
+void btintel_version_info(struct hci_dev *hdev, struct intel_version *ver);
 int btintel_secure_send(struct hci_dev *hdev, u8 fragment_type, u32 plen,
 			const void *param);
 
@@ -94,6 +95,10 @@ static inline void btintel_hw_error(struct hci_dev *hdev, u8 code)
 {
 }
 
+static void btintel_version_info(struct hci_dev *hdev, struct intel_version *ver)
+{
+}
+
 static inline int btintel_secure_send(struct hci_dev *hdev, u8 fragment_type,
 				      u32 plen, const void *param)
 {

commit 09df123d2d128c52987f11c85397cdbc9ffc89c6
Author: Marcel Holtmann <marcel@holtmann.org>
Date:   Sun Jul 5 14:55:36 2015 +0200

    Bluetooth: btintel: Create common Intel Secure Send function
    
    The Intel Secure Send command is used the same in USB and UART drivers
    and with that move a generic version into the Intel module.
    
    Signed-off-by: Marcel Holtmann <marcel@holtmann.org>
    Signed-off-by: Johan Hedberg <johan.hedberg@intel.com>

diff --git a/drivers/bluetooth/btintel.h b/drivers/bluetooth/btintel.h
index c4680cd44011..ec89e3cb645f 100644
--- a/drivers/bluetooth/btintel.h
+++ b/drivers/bluetooth/btintel.h
@@ -75,6 +75,9 @@ int btintel_check_bdaddr(struct hci_dev *hdev);
 int btintel_set_bdaddr(struct hci_dev *hdev, const bdaddr_t *bdaddr);
 void btintel_hw_error(struct hci_dev *hdev, u8 code);
 
+int btintel_secure_send(struct hci_dev *hdev, u8 fragment_type, u32 plen,
+			const void *param);
+
 #else
 
 static inline int btintel_check_bdaddr(struct hci_dev *hdev)
@@ -91,4 +94,10 @@ static inline void btintel_hw_error(struct hci_dev *hdev, u8 code)
 {
 }
 
+static inline int btintel_secure_send(struct hci_dev *hdev, u8 fragment_type,
+				      u32 plen, const void *param)
+{
+	return -EOPNOTSUPP;
+}
+
 #endif

commit 973bb97e5aee56edddaae3d5c96877101ad509c0
Author: Marcel Holtmann <marcel@holtmann.org>
Date:   Sun Jul 5 14:37:38 2015 +0200

    Bluetooth: btintel: Add generic function for handling hardware errors
    
    The handling of hardware error has support for providing a vendor
    specific callback to deal with the error. Move the Intel specific
    function out of the USB driver into the generic module so that it
    can also be utilized by the UART driver.
    
    Signed-off-by: Marcel Holtmann <marcel@holtmann.org>
    Signed-off-by: Johan Hedberg <johan.hedberg@intel.com>

diff --git a/drivers/bluetooth/btintel.h b/drivers/bluetooth/btintel.h
index 4bda6ab34f60..c4680cd44011 100644
--- a/drivers/bluetooth/btintel.h
+++ b/drivers/bluetooth/btintel.h
@@ -73,6 +73,7 @@ struct intel_secure_send_result {
 
 int btintel_check_bdaddr(struct hci_dev *hdev);
 int btintel_set_bdaddr(struct hci_dev *hdev, const bdaddr_t *bdaddr);
+void btintel_hw_error(struct hci_dev *hdev, u8 code);
 
 #else
 
@@ -86,4 +87,8 @@ static inline int btintel_set_bdaddr(struct hci_dev *hdev, const bdaddr_t *bdadd
 	return -EOPNOTSUPP;
 }
 
+static inline void btintel_hw_error(struct hci_dev *hdev, u8 code)
+{
+}
+
 #endif

commit ccd6da2ab81815e03c0713069597a8fc8f6f8431
Author: Marcel Holtmann <marcel@holtmann.org>
Date:   Thu Apr 9 00:35:19 2015 -0700

    Bluetooth: btusb: Use proper data structures for Intel vendor events
    
    The Intel vendors events indicating firmware loading result and the
    bootup of the operational firmware are currently hardcoded byte
    comparisons. So intead of doing that, provide proper data structures
    and actually use them.
    
    Signed-off-by: Marcel Holtmann <marcel@holtmann.org>
    Signed-off-by: Johan Hedberg <johan.hedberg@intel.com>

diff --git a/drivers/bluetooth/btintel.h b/drivers/bluetooth/btintel.h
index d1581150679a..4bda6ab34f60 100644
--- a/drivers/bluetooth/btintel.h
+++ b/drivers/bluetooth/btintel.h
@@ -54,6 +54,21 @@ struct intel_boot_params {
 	__u8     unlocked_state;
 } __packed;
 
+struct intel_bootup {
+	__u8     zero;
+	__u8     num_cmds;
+	__u8     source;
+	__u8     reset_type;
+	__u8     reset_reason;
+	__u8     ddc_status;
+} __packed;
+
+struct intel_secure_send_result {
+	__u8     result;
+	__le16   opcode;
+	__u8     status;
+} __packed;
+
 #if IS_ENABLED(CONFIG_BT_INTEL)
 
 int btintel_check_bdaddr(struct hci_dev *hdev);

commit 59a077c4792e2226b8a95430c0f17d1098939647
Author: Marcel Holtmann <marcel@holtmann.org>
Date:   Mon Apr 6 00:52:13 2015 -0700

    Bluetooth: btusb: Move Intel command structs into its own header
    
    Since the Intel Bluetooth support has its own header, it makes sense
    to move all command structs into it.
    
    Signed-off-by: Marcel Holtmann <marcel@holtmann.org>
    Signed-off-by: Johan Hedberg <johan.hedberg@intel.com>

diff --git a/drivers/bluetooth/btintel.h b/drivers/bluetooth/btintel.h
index 20be247d2ff6..d1581150679a 100644
--- a/drivers/bluetooth/btintel.h
+++ b/drivers/bluetooth/btintel.h
@@ -21,6 +21,39 @@
  *
  */
 
+struct intel_version {
+	u8 status;
+	u8 hw_platform;
+	u8 hw_variant;
+	u8 hw_revision;
+	u8 fw_variant;
+	u8 fw_revision;
+	u8 fw_build_num;
+	u8 fw_build_ww;
+	u8 fw_build_yy;
+	u8 fw_patch_num;
+} __packed;
+
+struct intel_boot_params {
+	__u8     status;
+	__u8     otp_format;
+	__u8     otp_content;
+	__u8     otp_patch;
+	__le16   dev_revid;
+	__u8     secure_boot;
+	__u8     key_from_hdr;
+	__u8     key_type;
+	__u8     otp_lock;
+	__u8     api_lock;
+	__u8     debug_lock;
+	bdaddr_t otp_bdaddr;
+	__u8     min_fw_build_nn;
+	__u8     min_fw_build_cw;
+	__u8     min_fw_build_yy;
+	__u8     limited_cce;
+	__u8     unlocked_state;
+} __packed;
+
 #if IS_ENABLED(CONFIG_BT_INTEL)
 
 int btintel_check_bdaddr(struct hci_dev *hdev);

commit 48f0ed1bb68589db5d6566bd3cd28ec675feaf2f
Author: Marcel Holtmann <marcel@holtmann.org>
Date:   Mon Apr 6 00:52:11 2015 -0700

    Bluetooth: btintel: Introduce generic Intel Bluetooth support
    
    The majority of Intel Bluetooth vendor commands are shared between USB
    and UART transports. This creates a separate module that eventually
    will hold all Intel specific commands, but for now just start with the
    commands to change the Bluetooth public address and check for the
    default address.
    
    Signed-off-by: Marcel Holtmann <marcel@holtmann.org>
    Signed-off-by: Johan Hedberg <johan.hedberg@intel.com>

diff --git a/drivers/bluetooth/btintel.h b/drivers/bluetooth/btintel.h
new file mode 100644
index 000000000000..20be247d2ff6
--- /dev/null
+++ b/drivers/bluetooth/btintel.h
@@ -0,0 +1,41 @@
+/*
+ *
+ *  Bluetooth support for Intel devices
+ *
+ *  Copyright (C) 2015  Intel Corporation
+ *
+ *
+ *  This program is free software; you can redistribute it and/or modify
+ *  it under the terms of the GNU General Public License as published by
+ *  the Free Software Foundation; either version 2 of the License, or
+ *  (at your option) any later version.
+ *
+ *  This program is distributed in the hope that it will be useful,
+ *  but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ *  GNU General Public License for more details.
+ *
+ *  You should have received a copy of the GNU General Public License
+ *  along with this program; if not, write to the Free Software
+ *  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ *
+ */
+
+#if IS_ENABLED(CONFIG_BT_INTEL)
+
+int btintel_check_bdaddr(struct hci_dev *hdev);
+int btintel_set_bdaddr(struct hci_dev *hdev, const bdaddr_t *bdaddr);
+
+#else
+
+static inline int btintel_check_bdaddr(struct hci_dev *hdev)
+{
+	return -EOPNOTSUPP;
+}
+
+static inline int btintel_set_bdaddr(struct hci_dev *hdev, const bdaddr_t *bdaddr)
+{
+	return -EOPNOTSUPP;
+}
+
+#endif
