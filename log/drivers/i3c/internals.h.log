commit 3a379bbcea0af6280e1ca0d1edfcf4e68cde6ee0
Author: Boris Brezillon <boris.brezillon@bootlin.com>
Date:   Wed Jul 19 11:52:29 2017 +0200

    i3c: Add core I3C infrastructure
    
    Add core infrastructure to support I3C in Linux and document it.
    
    This infrastructure adds basic I3C support. Advanced features will be
    added afterwards.
    
    There are a few design choices that are worth mentioning because they
    impact the way I3C device drivers can interact with their devices:
    
    - all functions used to send I3C/I2C frames must be called in
      non-atomic context. Mainly done this way to ease implementation, but
      this is not set in stone, and if anyone needs async support, new
      functions can be added later on.
    - the bus element is a separate object, but it's tightly coupled with
      the master object. We thus have a 1:1 relationship between i3c_bus
      and i3c_master_controller objects, and if 2 master controllers are
      connected to the same bus and both exposed to the same Linux instance
      they will appear as two distinct busses, and devices on this bus will
      be exposed twice.
    - I2C backward compatibility has been designed to be transparent to I2C
      drivers and the I2C subsystem. The I3C master just registers an I2C
      adapter which creates a new I2C bus. I'd say that, from a
      representation PoV it's not ideal because what should appear as a
      single I3C bus exposing I3C and I2C devices here appears as 2
      different buses connected to each other through the parenting (the
      I3C master is the parent of the I2C and I3C busses).
      On the other hand, I don't see a better solution if we want something
      that is not invasive.
    
    Missing features:
    - I3C HDR modes are not supported
    - no support for multi-master and the associated concepts (mastership
      handover, support for secondary masters, ...)
    - I2C devices can only be described using DT because this is the only
      use case I have. However, the framework can easily be extended with
      ACPI and board info support
    - I3C slave framework. This has been completely omitted, but shouldn't
      have a huge impact on the I3C framework because I3C slaves don't see
      the whole bus, it's only about handling master requests and generating
      IBIs. Some of the struct, constant and enum definitions could be
      shared, but most of the I3C slave framework logic will be different
    
    Signed-off-by: Boris Brezillon <boris.brezillon@bootlin.com>
    Reviewed-by: Arnd Bergmann <arnd@arndb.de>
    Acked-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/i3c/internals.h b/drivers/i3c/internals.h
new file mode 100644
index 000000000000..86b7b44cfca2
--- /dev/null
+++ b/drivers/i3c/internals.h
@@ -0,0 +1,26 @@
+/* SPDX-License-Identifier: GPL-2.0 */
+/*
+ * Copyright (C) 2018 Cadence Design Systems Inc.
+ *
+ * Author: Boris Brezillon <boris.brezillon@bootlin.com>
+ */
+
+#ifndef I3C_INTERNALS_H
+#define I3C_INTERNALS_H
+
+#include <linux/i3c/master.h>
+
+extern struct bus_type i3c_bus_type;
+
+void i3c_bus_normaluse_lock(struct i3c_bus *bus);
+void i3c_bus_normaluse_unlock(struct i3c_bus *bus);
+
+int i3c_dev_do_priv_xfers_locked(struct i3c_dev_desc *dev,
+				 struct i3c_priv_xfer *xfers,
+				 int nxfers);
+int i3c_dev_disable_ibi_locked(struct i3c_dev_desc *dev);
+int i3c_dev_enable_ibi_locked(struct i3c_dev_desc *dev);
+int i3c_dev_request_ibi_locked(struct i3c_dev_desc *dev,
+			       const struct i3c_ibi_setup *req);
+void i3c_dev_free_ibi_locked(struct i3c_dev_desc *dev);
+#endif /* I3C_INTERNAL_H */
