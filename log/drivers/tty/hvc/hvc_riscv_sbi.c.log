commit f91253a3d005796404ae0e578b3394459b5f9b71
Author: Anup Patel <Anup.Patel@wdc.com>
Date:   Thu Apr 25 06:35:06 2019 -0700

    tty: Don't force RISCV SBI console as preferred console
    
    The Linux kernel will auto-disables all boot consoles whenever it
    gets a preferred real console.
    
    Currently on RISC-V systems, if we have a real console which is not
    RISCV SBI console then boot consoles (such as earlycon=sbi) are not
    auto-disabled when a real console (ttyS0 or ttySIF0) is available.
    This results in duplicate prints at boot-time after kernel starts
    using real console (i.e. ttyS0 or ttySIF0) if "earlycon=" kernel
    parameter was passed by bootloader.
    
    The reason for above issue is that RISCV SBI console always adds
    itself as preferred console which is causing other real consoles
    to be not used as preferred console.
    
    Ideally "console=" kernel parameter passed by bootloaders should
    be the one selecting a preferred real console.
    
    This patch fixes above issue by not forcing RISCV SBI console as
    preferred console.
    
    Fixes: afa6b1ccfad5 ("tty: New RISC-V SBI console driver")
    Cc: stable@vger.kernel.org
    Signed-off-by: Anup Patel <anup.patel@wdc.com>
    Reviewed-by: Atish Patra <atish.patra@wdc.com>
    Signed-off-by: Palmer Dabbelt <palmer@sifive.com>

diff --git a/drivers/tty/hvc/hvc_riscv_sbi.c b/drivers/tty/hvc/hvc_riscv_sbi.c
index 75155bde2b88..31f53fa77e4a 100644
--- a/drivers/tty/hvc/hvc_riscv_sbi.c
+++ b/drivers/tty/hvc/hvc_riscv_sbi.c
@@ -53,7 +53,6 @@ device_initcall(hvc_sbi_init);
 static int __init hvc_sbi_console_init(void)
 {
 	hvc_instantiate(0, 0, &hvc_sbi_ops);
-	add_preferred_console("hvc", 0, NULL);
 
 	return 0;
 }

commit afa6b1ccfad5e72918b79461a97fe21d1c2292da
Author: Palmer Dabbelt <palmer@sifive.com>
Date:   Thu Mar 8 14:27:34 2018 -0800

    tty: New RISC-V SBI console driver
    
    The RISC-V ISA defines a simple console that is availiable via SBI calls
    on all systems.  The SBI console is designed to be availiable at all
    times, so while it's most natural to use this as an early printk target
    it's also possible to use this as the system console when there isn't a
    better one availiable.
    
    This patch adds support for the RISC-V SBI console via the HVC
    infastructure.  It's entirely independent from our early printk support,
    which results in early boot messages appearing twice over the SBI
    console.  As far as I can tell that's the fault of our early printk
    support (we should support earlycon) as opposed to this driver.
    
    There is one checkpatch.pl warning here: to check the MAINTAINERS file.
    They're all matched by the "K: riscv" line.
    
    Signed-off-by: Palmer Dabbelt <palmer@sifive.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/tty/hvc/hvc_riscv_sbi.c b/drivers/tty/hvc/hvc_riscv_sbi.c
new file mode 100644
index 000000000000..75155bde2b88
--- /dev/null
+++ b/drivers/tty/hvc/hvc_riscv_sbi.c
@@ -0,0 +1,60 @@
+/* SPDX-License-Identifier: GPL-2.0 */
+/*
+ * Copyright (C) 2008 David Gibson, IBM Corporation
+ * Copyright (C) 2012 Regents of the University of California
+ * Copyright (C) 2017 SiFive
+ */
+
+#include <linux/console.h>
+#include <linux/err.h>
+#include <linux/init.h>
+#include <linux/moduleparam.h>
+#include <linux/types.h>
+
+#include <asm/sbi.h>
+
+#include "hvc_console.h"
+
+static int hvc_sbi_tty_put(uint32_t vtermno, const char *buf, int count)
+{
+	int i;
+
+	for (i = 0; i < count; i++)
+		sbi_console_putchar(buf[i]);
+
+	return i;
+}
+
+static int hvc_sbi_tty_get(uint32_t vtermno, char *buf, int count)
+{
+	int i, c;
+
+	for (i = 0; i < count; i++) {
+		c = sbi_console_getchar();
+		if (c < 0)
+			break;
+		buf[i] = c;
+	}
+
+	return i;
+}
+
+static const struct hv_ops hvc_sbi_ops = {
+	.get_chars = hvc_sbi_tty_get,
+	.put_chars = hvc_sbi_tty_put,
+};
+
+static int __init hvc_sbi_init(void)
+{
+	return PTR_ERR_OR_ZERO(hvc_alloc(0, 0, &hvc_sbi_ops, 16));
+}
+device_initcall(hvc_sbi_init);
+
+static int __init hvc_sbi_console_init(void)
+{
+	hvc_instantiate(0, 0, &hvc_sbi_ops);
+	add_preferred_console("hvc", 0, NULL);
+
+	return 0;
+}
+console_initcall(hvc_sbi_console_init);
