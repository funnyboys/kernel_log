commit 7252f1405df1634d798628847d87592de359fe47
Merge: a99d8080aaf3 6e001f6a4cc7
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Mon Nov 4 18:49:13 2019 +0100

    Merge tag 'timers-v5.6' of https://git.linaro.org/people/daniel.lezcano/linux into timers/core
    
    Pull clockevent updates from Daniel Lezcano:
    
     - Some cleanups for the timer-of, use %p0F and the unique device name
       (Geert Uytterhoeven)
    
     - Use timer-of for the renesas-ostm and the device name to prevent
       name collision in case of multiple timers (Geert Uytterhoeven)
    
     - Check if there is an error after calling of_clk_get in asm9260
       (Chuhong Yuan)

commit 4411464d6f8b5e5759637235a6f2b2a85c2be0f1
Author: Geert Uytterhoeven <geert+renesas@glider.be>
Date:   Wed Oct 16 16:47:45 2019 +0200

    clocksource/drivers/timer-of: Use unique device name instead of timer
    
    If a hardware-specific driver does not provide a name, the timer-of core
    falls back to device_node.name.  Due to generic DT node naming policies,
    that name is almost always "timer", and thus doesn't identify the actual
    timer used.
    
    Fix this by using device_node.full_name instead, which includes the unit
    addrees.
    
    Example impact on /proc/timer_list:
    
        -Clock Event Device: timer
        +Clock Event Device: timer@fcfec400
    
    Signed-off-by: Geert Uytterhoeven <geert+renesas@glider.be>
    Reviewed-by: Rob Herring <robh@kernel.org>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Link: https://lore.kernel.org/r/20191016144747.29538-3-geert+renesas@glider.be

diff --git a/drivers/clocksource/timer-of.c b/drivers/clocksource/timer-of.c
index 384394205a12..8c11bd743dd0 100644
--- a/drivers/clocksource/timer-of.c
+++ b/drivers/clocksource/timer-of.c
@@ -190,7 +190,7 @@ int __init timer_of_init(struct device_node *np, struct timer_of *to)
 	}
 
 	if (!to->clkevt.name)
-		to->clkevt.name = np->name;
+		to->clkevt.name = np->full_name;
 
 	to->np = np;
 

commit ccb80012481fd8d16c7557c00bb54c42103eef9d
Author: Geert Uytterhoeven <geert+renesas@glider.be>
Date:   Wed Oct 16 16:47:44 2019 +0200

    clocksource/drivers/timer-of: Convert last full_name to %pOF
    
    Commit 469869d18a886e04 ("clocksource: Convert to using %pOF instead of
    full_name") converted all but the one just added before by commit
    32f2fea6e77e64cd ("clocksource/drivers/timer-of: Handle
    of_irq_get_byname() result correctly").
    
    Signed-off-by: Geert Uytterhoeven <geert+renesas@glider.be>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Link: https://lore.kernel.org/r/20191016144747.29538-2-geert+renesas@glider.be

diff --git a/drivers/clocksource/timer-of.c b/drivers/clocksource/timer-of.c
index d8c2bd4391d0..384394205a12 100644
--- a/drivers/clocksource/timer-of.c
+++ b/drivers/clocksource/timer-of.c
@@ -55,8 +55,8 @@ static __init int timer_of_irq_init(struct device_node *np,
 	if (of_irq->name) {
 		of_irq->irq = ret = of_irq_get_byname(np, of_irq->name);
 		if (ret < 0) {
-			pr_err("Failed to get interrupt %s for %s\n",
-			       of_irq->name, np->full_name);
+			pr_err("Failed to get interrupt %s for %pOF\n",
+			       of_irq->name, np);
 			return ret;
 		}
 	} else	{

commit 0f1a7b3fac0583083ca19d4de47403511ced3521
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Wed Oct 2 16:16:07 2019 -0700

    timer-of: don't use conditional expression with mixed 'void' types
    
    Randy Dunlap reports on the sparse list that sparse warns about this
    expression:
    
            of_irq->percpu ? free_percpu_irq(of_irq->irq, clkevt) :
                    free_irq(of_irq->irq, clkevt);
    
    and honestly, sparse is correct to warn.  The return type of
    free_percpu_irq() is 'void', while free_irq() returns a 'const void *'
    that is the devname argument passed in to the request_irq().
    
    You can't mix a void type with a non-void types in a conditional
    expression according to the C standard.  It so happens that gcc seems to
    accept it - and the resulting type of the expression is void - but
    there's really no reason for the kernel to have this kind of
    non-standard expression with no real upside.
    
    The natural way to write that expression is with an if-statement:
    
            if (of_irq->percpu)
                    free_percpu_irq(of_irq->irq, clkevt);
            else
                    free_irq(of_irq->irq, clkevt);
    
    which is more legible anyway.
    
    I'm not sure why that timer-of code seems to have this odd pattern.  It
    does the same at allocation time, but at least there the types match,
    and it makes sense as an expression.
    
    Reported-by: Randy Dunlap <rdunlap@infradead.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

diff --git a/drivers/clocksource/timer-of.c b/drivers/clocksource/timer-of.c
index d8c2bd4391d0..11ff701ff4bb 100644
--- a/drivers/clocksource/timer-of.c
+++ b/drivers/clocksource/timer-of.c
@@ -25,7 +25,9 @@ static __init void timer_of_irq_exit(struct of_timer_irq *of_irq)
 
 	struct clock_event_device *clkevt = &to->clkevt;
 
-	of_irq->percpu ? free_percpu_irq(of_irq->irq, clkevt) :
+	if (of_irq->percpu)
+		free_percpu_irq(of_irq->irq, clkevt);
+	else
 		free_irq(of_irq->irq, clkevt);
 }
 

commit 763719771e84b8c8c2f53af668cdc905faa608de
Author: Jon Hunter <jonathanh@nvidia.com>
Date:   Wed Aug 21 16:02:40 2019 +0100

    clocksource/drivers/timer-of: Do not warn on deferred probe
    
    Deferred probe is an expected return value for clk_get() on many
    platforms. The driver deals with it properly, so there's no need
    to output a warning that may potentially confuse users.
    
    Signed-off-by: Jon Hunter <jonathanh@nvidia.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

diff --git a/drivers/clocksource/timer-of.c b/drivers/clocksource/timer-of.c
index 80542289fae7..d8c2bd4391d0 100644
--- a/drivers/clocksource/timer-of.c
+++ b/drivers/clocksource/timer-of.c
@@ -113,8 +113,10 @@ static __init int timer_of_clk_init(struct device_node *np,
 	of_clk->clk = of_clk->name ? of_clk_get_by_name(np, of_clk->name) :
 		of_clk_get(np, of_clk->index);
 	if (IS_ERR(of_clk->clk)) {
-		pr_err("Failed to get clock for %pOF\n", np);
-		return PTR_ERR(of_clk->clk);
+		ret = PTR_ERR(of_clk->clk);
+		if (ret != -EPROBE_DEFER)
+			pr_err("Failed to get clock for %pOF\n", np);
+		goto out;
 	}
 
 	ret = clk_prepare_enable(of_clk->clk);

commit 9952f6918daa4ab5fc81307a9f90e31a4df3b200
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Tue May 28 10:10:04 2019 -0700

    treewide: Replace GPLv2 boilerplate/reference with SPDX - rule 201
    
    Based on 1 normalized pattern(s):
    
      this program is free software you can redistribute it and or modify
      it under the terms and conditions of the gnu general public license
      version 2 as published by the free software foundation this program
      is distributed in the hope it will be useful but without any
      warranty without even the implied warranty of merchantability or
      fitness for a particular purpose see the gnu general public license
      for more details you should have received a copy of the gnu general
      public license along with this program if not see http www gnu org
      licenses
    
    extracted by the scancode license scanner the SPDX license identifier
    
      GPL-2.0-only
    
    has been chosen to replace the boilerplate/reference in 228 file(s).
    
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Reviewed-by: Allison Randal <allison@lohutok.net>
    Reviewed-by: Steve Winslow <swinslow@gmail.com>
    Reviewed-by: Richard Fontana <rfontana@redhat.com>
    Reviewed-by: Alexios Zavras <alexios.zavras@intel.com>
    Cc: linux-spdx@vger.kernel.org
    Link: https://lkml.kernel.org/r/20190528171438.107155473@linutronix.de
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/clocksource/timer-of.c b/drivers/clocksource/timer-of.c
index 06ed88a2a8a0..80542289fae7 100644
--- a/drivers/clocksource/timer-of.c
+++ b/drivers/clocksource/timer-of.c
@@ -1,19 +1,8 @@
+// SPDX-License-Identifier: GPL-2.0-only
 /*
  * Copyright (c) 2017, Linaro Ltd.  All rights reserved.
  *
  * Author: Daniel Lezcano <daniel.lezcano@linaro.org>
- *
- * This program is free software; you can redistribute it and/or modify it
- * under the terms and conditions of the GNU General Public License,
- * version 2, as published by the Free Software Foundation.
- *
- * This program is distributed in the hope it will be useful, but WITHOUT
- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
- * more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program.  If not, see <http://www.gnu.org/licenses/>.
  */
 #include <linux/clk.h>
 #include <linux/interrupt.h>

commit 9aea417afa6bf52f15a5b194944b6a646d61af04
Author: Daniel Lezcano <daniel.lezcano@linaro.org>
Date:   Mon Jan 8 14:28:49 2018 +0100

    clocksource/drivers/timer-of: Don't request the resource by name
    
    When the driver does not specify a name for the resource, don't use
    of_io_request_and_map() but of_iomap(). That prevents resource name allocation
    conflicts on some platforms which have the same name as the node.
    
    Tested-by: Benjamin Gaignard <benjamin.gaignard@st.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Acked-by: Benjamin Gaignard <benjamin.gaignard@st.com>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Link: http://lkml.kernel.org/r/1515418139-23276-10-git-send-email-daniel.lezcano@linaro.org
    Signed-off-by: Ingo Molnar <mingo@kernel.org>

diff --git a/drivers/clocksource/timer-of.c b/drivers/clocksource/timer-of.c
index 25008d2cc346..06ed88a2a8a0 100644
--- a/drivers/clocksource/timer-of.c
+++ b/drivers/clocksource/timer-of.c
@@ -161,11 +161,11 @@ static __init void timer_of_base_exit(struct of_timer_base *of_base)
 static __init int timer_of_base_init(struct device_node *np,
 				     struct of_timer_base *of_base)
 {
-	const char *name = of_base->name ? of_base->name : np->full_name;
-
-	of_base->base = of_io_request_and_map(np, of_base->index, name);
+	of_base->base = of_base->name ?
+		of_io_request_and_map(np, of_base->index, of_base->name) :
+		of_iomap(np, of_base->index);
 	if (IS_ERR(of_base->base)) {
-		pr_err("Failed to iomap (%s)\n", name);
+		pr_err("Failed to iomap (%s)\n", of_base->name);
 		return PTR_ERR(of_base->base);
 	}
 

commit 1c63c1c089a48e1b1821a73dc36a3997ced2f82d
Author: Daniel Lezcano <daniel.lezcano@linaro.org>
Date:   Mon Jan 8 14:28:48 2018 +0100

    clocksource/drivers/timer-of: Store the device node pointer in 'struct timer_of'
    
    Under certain circumstances, some specific operations must be done with the
    device node pointer, which forces the timer code to propagate the pointer to
    the functions which need it.
    
    In order to consolidate the function signatures in the different drivers
    by using the timer-of structure, let's store it in the timer-of structure
    as a handy pointer when it is needed.
    
    Tested-by: Benjamin Gaignard <benjamin.gaignard@st.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Acked-by: Benjamin Gaignard <benjamin.gaignard@st.com>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Link: http://lkml.kernel.org/r/1515418139-23276-9-git-send-email-daniel.lezcano@linaro.org
    Signed-off-by: Ingo Molnar <mingo@kernel.org>

diff --git a/drivers/clocksource/timer-of.c b/drivers/clocksource/timer-of.c
index c1045b9a787c..25008d2cc346 100644
--- a/drivers/clocksource/timer-of.c
+++ b/drivers/clocksource/timer-of.c
@@ -200,6 +200,9 @@ int __init timer_of_init(struct device_node *np, struct timer_of *to)
 
 	if (!to->clkevt.name)
 		to->clkevt.name = np->name;
+
+	to->np = np;
+
 	return ret;
 
 out_fail:

commit cf7f46b9b12269d204b6acd0925704543adb6e05
Author: Daniel Lezcano <daniel.lezcano@linaro.org>
Date:   Mon Jan 8 14:28:45 2018 +0100

    clocksource/drivers/timer-of: Add kernel documentation
    
    The current code has no comments, neither any function descriptions. Fix this by
    adding function descriptions in kernel doc format.
    
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Link: http://lkml.kernel.org/r/1515418139-23276-6-git-send-email-daniel.lezcano@linaro.org
    [ Spelling and style fixes. ]
    Signed-off-by: Ingo Molnar <mingo@kernel.org>

diff --git a/drivers/clocksource/timer-of.c b/drivers/clocksource/timer-of.c
index ad5565404e25..c1045b9a787c 100644
--- a/drivers/clocksource/timer-of.c
+++ b/drivers/clocksource/timer-of.c
@@ -24,6 +24,12 @@
 
 #include "timer-of.h"
 
+/**
+ * timer_of_irq_exit - Release the interrupt
+ * @of_irq: an of_timer_irq structure pointer
+ *
+ * Free the irq resource
+ */
 static __init void timer_of_irq_exit(struct of_timer_irq *of_irq)
 {
 	struct timer_of *to = container_of(of_irq, struct timer_of, of_irq);
@@ -34,6 +40,22 @@ static __init void timer_of_irq_exit(struct of_timer_irq *of_irq)
 		free_irq(of_irq->irq, clkevt);
 }
 
+/**
+ * timer_of_irq_init - Request the interrupt
+ * @np: a device tree node pointer
+ * @of_irq: an of_timer_irq structure pointer
+ *
+ * Get the interrupt number from the DT from its definition and
+ * request it. The interrupt is gotten by falling back the following way:
+ *
+ * - Get interrupt number by name
+ * - Get interrupt number by index
+ *
+ * When the interrupt is per CPU, 'request_percpu_irq()' is called,
+ * otherwise 'request_irq()' is used.
+ *
+ * Returns 0 on success, < 0 otherwise
+ */
 static __init int timer_of_irq_init(struct device_node *np,
 				    struct of_timer_irq *of_irq)
 {
@@ -72,6 +94,12 @@ static __init int timer_of_irq_init(struct device_node *np,
 	return 0;
 }
 
+/**
+ * timer_of_clk_exit - Release the clock resources
+ * @of_clk: a of_timer_clk structure pointer
+ *
+ * Disables and releases the refcount on the clk
+ */
 static __init void timer_of_clk_exit(struct of_timer_clk *of_clk)
 {
 	of_clk->rate = 0;
@@ -79,6 +107,15 @@ static __init void timer_of_clk_exit(struct of_timer_clk *of_clk)
 	clk_put(of_clk->clk);
 }
 
+/**
+ * timer_of_clk_init - Initialize the clock resources
+ * @np: a device tree node pointer
+ * @of_clk: a of_timer_clk structure pointer
+ *
+ * Get the clock by name or by index, enable it and get the rate
+ *
+ * Returns 0 on success, < 0 otherwise
+ */
 static __init int timer_of_clk_init(struct device_node *np,
 				    struct of_timer_clk *of_clk)
 {

commit 5bbf4ad945a9bb353e77ef71c753ca9bb1e3d978
Author: Daniel Lezcano <daniel.lezcano@linaro.org>
Date:   Mon Jan 8 14:28:44 2018 +0100

    clocksource/drivers/timer-of: Fix function names
    
    All the functions are not prefixed with 'timer_of_', fix the naming in order
    to have the code consistent.
    
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Link: http://lkml.kernel.org/r/1515418139-23276-5-git-send-email-daniel.lezcano@linaro.org
    Signed-off-by: Ingo Molnar <mingo@kernel.org>

diff --git a/drivers/clocksource/timer-of.c b/drivers/clocksource/timer-of.c
index a31990408153..ad5565404e25 100644
--- a/drivers/clocksource/timer-of.c
+++ b/drivers/clocksource/timer-of.c
@@ -24,7 +24,7 @@
 
 #include "timer-of.h"
 
-static __init void timer_irq_exit(struct of_timer_irq *of_irq)
+static __init void timer_of_irq_exit(struct of_timer_irq *of_irq)
 {
 	struct timer_of *to = container_of(of_irq, struct timer_of, of_irq);
 
@@ -34,8 +34,8 @@ static __init void timer_irq_exit(struct of_timer_irq *of_irq)
 		free_irq(of_irq->irq, clkevt);
 }
 
-static __init int timer_irq_init(struct device_node *np,
-				 struct of_timer_irq *of_irq)
+static __init int timer_of_irq_init(struct device_node *np,
+				    struct of_timer_irq *of_irq)
 {
 	int ret;
 	struct timer_of *to = container_of(of_irq, struct timer_of, of_irq);
@@ -72,15 +72,15 @@ static __init int timer_irq_init(struct device_node *np,
 	return 0;
 }
 
-static __init void timer_clk_exit(struct of_timer_clk *of_clk)
+static __init void timer_of_clk_exit(struct of_timer_clk *of_clk)
 {
 	of_clk->rate = 0;
 	clk_disable_unprepare(of_clk->clk);
 	clk_put(of_clk->clk);
 }
 
-static __init int timer_clk_init(struct device_node *np,
-				 struct of_timer_clk *of_clk)
+static __init int timer_of_clk_init(struct device_node *np,
+				    struct of_timer_clk *of_clk)
 {
 	int ret;
 
@@ -116,13 +116,13 @@ static __init int timer_clk_init(struct device_node *np,
 	goto out;
 }
 
-static __init void timer_base_exit(struct of_timer_base *of_base)
+static __init void timer_of_base_exit(struct of_timer_base *of_base)
 {
 	iounmap(of_base->base);
 }
 
-static __init int timer_base_init(struct device_node *np,
-				  struct of_timer_base *of_base)
+static __init int timer_of_base_init(struct device_node *np,
+				     struct of_timer_base *of_base)
 {
 	const char *name = of_base->name ? of_base->name : np->full_name;
 
@@ -141,21 +141,21 @@ int __init timer_of_init(struct device_node *np, struct timer_of *to)
 	int flags = 0;
 
 	if (to->flags & TIMER_OF_BASE) {
-		ret = timer_base_init(np, &to->of_base);
+		ret = timer_of_base_init(np, &to->of_base);
 		if (ret)
 			goto out_fail;
 		flags |= TIMER_OF_BASE;
 	}
 
 	if (to->flags & TIMER_OF_CLOCK) {
-		ret = timer_clk_init(np, &to->of_clk);
+		ret = timer_of_clk_init(np, &to->of_clk);
 		if (ret)
 			goto out_fail;
 		flags |= TIMER_OF_CLOCK;
 	}
 
 	if (to->flags & TIMER_OF_IRQ) {
-		ret = timer_irq_init(np, &to->of_irq);
+		ret = timer_of_irq_init(np, &to->of_irq);
 		if (ret)
 			goto out_fail;
 		flags |= TIMER_OF_IRQ;
@@ -167,13 +167,13 @@ int __init timer_of_init(struct device_node *np, struct timer_of *to)
 
 out_fail:
 	if (flags & TIMER_OF_IRQ)
-		timer_irq_exit(&to->of_irq);
+		timer_of_irq_exit(&to->of_irq);
 
 	if (flags & TIMER_OF_CLOCK)
-		timer_clk_exit(&to->of_clk);
+		timer_of_clk_exit(&to->of_clk);
 
 	if (flags & TIMER_OF_BASE)
-		timer_base_exit(&to->of_base);
+		timer_of_base_exit(&to->of_base);
 	return ret;
 }
 
@@ -187,11 +187,11 @@ int __init timer_of_init(struct device_node *np, struct timer_of *to)
 void __init timer_of_cleanup(struct timer_of *to)
 {
 	if (to->flags & TIMER_OF_IRQ)
-		timer_irq_exit(&to->of_irq);
+		timer_of_irq_exit(&to->of_irq);
 
 	if (to->flags & TIMER_OF_CLOCK)
-		timer_clk_exit(&to->of_clk);
+		timer_of_clk_exit(&to->of_clk);
 
 	if (to->flags & TIMER_OF_BASE)
-		timer_base_exit(&to->of_base);
+		timer_of_base_exit(&to->of_base);
 }

commit 558de28249508dc3ec0ec8981d1315eb8b63f0d9
Author: Benjamin Gaignard <benjamin.gaignard@linaro.org>
Date:   Tue Nov 14 09:52:38 2017 +0100

    clocksource/timer_of: Rename timer_of_exit to timer_of_cleanup
    
    Change the function name to something more explicit since it is only used
    in init error cases.
    
    Add __init annotation and description about the function usage.
    
    Signed-off-by: Benjamin Gaignard <benjamin.gaignard@linaro.org>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Cc: mark.rutland@arm.com
    Cc: devicetree@vger.kernel.org
    Cc: alexandre.torgue@st.com
    Cc: arnd@arndb.de
    Cc: julien.thierry@arm.com
    Cc: daniel.lezcano@linaro.org
    Cc: linux@armlinux.org.uk
    Cc: robh+dt@kernel.org
    Cc: linux-arm-kernel@lists.infradead.org
    Cc: mcoquelin.stm32@gmail.com
    Cc: sudeep.holla@arm.com
    Cc: ludovic.barre@st.com
    Link: https://lkml.kernel.org/r/1510649563-22975-2-git-send-email-benjamin.gaignard@linaro.org

diff --git a/drivers/clocksource/timer-of.c b/drivers/clocksource/timer-of.c
index 7c64a5c1bfc1..a31990408153 100644
--- a/drivers/clocksource/timer-of.c
+++ b/drivers/clocksource/timer-of.c
@@ -177,7 +177,14 @@ int __init timer_of_init(struct device_node *np, struct timer_of *to)
 	return ret;
 }
 
-void timer_of_exit(struct timer_of *to)
+/**
+ * timer_of_cleanup - release timer_of ressources
+ * @to: timer_of structure
+ *
+ * Release the ressources that has been used in timer_of_init().
+ * This function should be called in init error cases
+ */
+void __init timer_of_cleanup(struct timer_of *to)
 {
 	if (to->flags & TIMER_OF_IRQ)
 		timer_irq_exit(&to->of_irq);

commit f48729a999ee57b9e831245779e68200dd2bde09
Author: Benjamin Gaignard <benjamin.gaignard@linaro.org>
Date:   Mon Oct 23 11:58:37 2017 +0200

    clocksource/drivers/timer-of: Add timer_of_exit function
    
    The timer-of API does not provide a function to undo what has been done by
    the timer_of_init() function.
    
    Add a timer_of_exit() function.
    
    Signed-off-by: Benjamin Gaignard <benjamin.gaignard@linaro.org>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

diff --git a/drivers/clocksource/timer-of.c b/drivers/clocksource/timer-of.c
index c79122d8e10d..7c64a5c1bfc1 100644
--- a/drivers/clocksource/timer-of.c
+++ b/drivers/clocksource/timer-of.c
@@ -176,3 +176,15 @@ int __init timer_of_init(struct device_node *np, struct timer_of *to)
 		timer_base_exit(&to->of_base);
 	return ret;
 }
+
+void timer_of_exit(struct timer_of *to)
+{
+	if (to->flags & TIMER_OF_IRQ)
+		timer_irq_exit(&to->of_irq);
+
+	if (to->flags & TIMER_OF_CLOCK)
+		timer_clk_exit(&to->of_clk);
+
+	if (to->flags & TIMER_OF_BASE)
+		timer_base_exit(&to->of_base);
+}

commit dd90cccffc20a15d8e4c3ac8813f4b6a6cd4766f
Merge: b1b6f83ac938 51218298a25e
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Mon Sep 4 13:06:34 2017 -0700

    Merge branch 'timers-core-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip
    
    Pull timer fixes from Thomas Gleixner:
     "A rather small update for the time(r) subsystem:
    
       - A new clocksource driver IMX-TPM
    
       - Minor fixes to the alarmtimer facility
    
       - Device tree cleanups for Renesas drivers
    
       - A new kselftest and fixes for the timer related tests
    
       - Conversion of the clocksource drivers to use %pOF
    
       - Use the proper helpers to access rlimits in the posix-cpu-timer
         code"
    
    * 'timers-core-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip:
      alarmtimer: Ensure RTC module is not unloaded
      clocksource: Convert to using %pOF instead of full_name
      clocksource/drivers/bcm2835: Remove message for a memory allocation failure
      devicetree: bindings: Remove deprecated properties
      devicetree: bindings: Remove unused 32-bit CMT bindings
      devicetree: bindings: Deprecate property, update example
      devicetree: bindings: r8a73a4 and R-Car Gen2 CMT bindings
      devicetree: bindings: R-Car Gen2 CMT0 and CMT1 bindings
      devicetree: bindings: Remove sh7372 CMT binding
      clocksource/drivers/imx-tpm: Add imx tpm timer support
      dt-bindings: timer: Add nxp tpm timer binding doc
      posix-cpu-timers: Use dedicated helper to access rlimit values
      alarmtimer: Fix unavailable wake-up source in sysfs
      timekeeping: Use proper timekeeper for debug code
      kselftests: timers: set-timer-lat: Add one-shot timer test cases
      kselftests: timers: set-timer-lat: Tweak reporting when timer fires early
      kselftests: timers: freq-step: Fix build warning
      kselftests: timers: freq-step: Define ADJ_SETOFFSET if device has older kernel headers

commit 469869d18a886e046161ca65516bd3ffcd2f804b
Author: Rob Herring <robh@kernel.org>
Date:   Tue Jul 18 16:42:53 2017 -0500

    clocksource: Convert to using %pOF instead of full_name
    
    Now that we have a custom printf format specifier, convert users of
    full_name to use %pOF instead. This is preparation to remove storing
    of the full path string for each node.
    
    Signed-off-by: Rob Herring <robh@kernel.org>
    Cc: Daniel Lezcano <daniel.lezcano@linaro.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: Marc Gonzalez <marc_gonzalez@sigmadesigns.com>
    Cc: Maxime Coquelin <mcoquelin.stm32@gmail.com>
    Cc: Alexandre Torgue <alexandre.torgue@st.com>
    Cc: linux-arm-kernel@lists.infradead.org
    Acked-by: Marc Gonzalez <marc_gonzalez@sigmadesigns.com>
    Acked-by: Alexandre TORGUE <alexandre.torgue@st.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

diff --git a/drivers/clocksource/timer-of.c b/drivers/clocksource/timer-of.c
index d509b500a7b5..64e00dd41e6f 100644
--- a/drivers/clocksource/timer-of.c
+++ b/drivers/clocksource/timer-of.c
@@ -52,7 +52,7 @@ static __init int timer_irq_init(struct device_node *np,
 		of_irq->irq = irq_of_parse_and_map(np, of_irq->index);
 	}
 	if (!of_irq->irq) {
-		pr_err("Failed to map interrupt for %s\n", np->full_name);
+		pr_err("Failed to map interrupt for %pOF\n", np);
 		return -EINVAL;
 	}
 
@@ -63,8 +63,7 @@ static __init int timer_irq_init(struct device_node *np,
 			    of_irq->flags ? of_irq->flags : IRQF_TIMER,
 			    np->full_name, clkevt);
 	if (ret) {
-		pr_err("Failed to request irq %d for %s\n", of_irq->irq,
-		       np->full_name);
+		pr_err("Failed to request irq %d for %pOF\n", of_irq->irq, np);
 		return ret;
 	}
 
@@ -88,20 +87,20 @@ static __init int timer_clk_init(struct device_node *np,
 	of_clk->clk = of_clk->name ? of_clk_get_by_name(np, of_clk->name) :
 		of_clk_get(np, of_clk->index);
 	if (IS_ERR(of_clk->clk)) {
-		pr_err("Failed to get clock for %s\n", np->full_name);
+		pr_err("Failed to get clock for %pOF\n", np);
 		return PTR_ERR(of_clk->clk);
 	}
 
 	ret = clk_prepare_enable(of_clk->clk);
 	if (ret) {
-		pr_err("Failed for enable clock for %s\n", np->full_name);
+		pr_err("Failed for enable clock for %pOF\n", np);
 		goto out_clk_put;
 	}
 
 	of_clk->rate = clk_get_rate(of_clk->clk);
 	if (!of_clk->rate) {
 		ret = -EINVAL;
-		pr_err("Failed to get clock rate for %s\n", np->full_name);
+		pr_err("Failed to get clock rate for %pOF\n", np);
 		goto out_clk_disable;
 	}
 

commit 9e80dbd87286d3252ac2f78c6465c16e2ec8d476
Author: Dan Carpenter <dan.carpenter@oracle.com>
Date:   Mon Jul 10 10:22:25 2017 +0300

    clocksource/drivers/timer-of: Checking for IS_ERR() instead of NULL
    
    The current code checks the return value of the of_io_request_and_map()
    function as it was returning a NULL pointer in case of error.
    
    However, it returns an error code encoded in the pointer return value, not a
    NULL value. Fix this by checking the returned pointer against IS_ERR() and
    return the error with PTR_ERR().
    
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

diff --git a/drivers/clocksource/timer-of.c b/drivers/clocksource/timer-of.c
index d509b500a7b5..4d7aef9d9c15 100644
--- a/drivers/clocksource/timer-of.c
+++ b/drivers/clocksource/timer-of.c
@@ -128,9 +128,9 @@ static __init int timer_base_init(struct device_node *np,
 	const char *name = of_base->name ? of_base->name : np->full_name;
 
 	of_base->base = of_io_request_and_map(np, of_base->index, name);
-	if (!of_base->base) {
+	if (IS_ERR(of_base->base)) {
 		pr_err("Failed to iomap (%s)\n", name);
-		return -ENXIO;
+		return PTR_ERR(of_base->base);
 	}
 
 	return 0;

commit 32f2fea6e77e64cd4045ec2d5deb879aada3b476
Author: Sergei Shtylyov <sergei.shtylyov@cogentembedded.com>
Date:   Mon Jul 17 21:00:44 2017 +0300

    clocksource/drivers/timer-of: Handle of_irq_get_byname() result correctly
    
    of_irq_get_byname() may return a negative error number as well as 0 on
    failure, while timer_irq_init() only checks for 0, blithely continuing with
    the call to request_[percpu_]irq() -- those functions expect *unsigned int*,
    so would probably fail anyway when a large IRQ number resulting from a
    conversion of a negative error number is passed to them... This, however,
    is incorrect behavior -- error number is not IRQ number.
    
    Filter out the negative error numbers, complain, and return them to the
    timer_irq_init()'s callers...
    
    Fixes: dc11bae78529 ("clocksource/drivers: Add timer-of common init routine")
    Signed-off-by: Sergei Shtylyov <sergei.shtylyov@cogentembedded.com>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Cc: Daniel Lezcano <daniel.lezcano@linaro.org>
    Link: http://lkml.kernel.org/r/20170717180114.678825147@cogentembedded.com

diff --git a/drivers/clocksource/timer-of.c b/drivers/clocksource/timer-of.c
index f6e7491c873c..d509b500a7b5 100644
--- a/drivers/clocksource/timer-of.c
+++ b/drivers/clocksource/timer-of.c
@@ -41,8 +41,16 @@ static __init int timer_irq_init(struct device_node *np,
 	struct timer_of *to = container_of(of_irq, struct timer_of, of_irq);
 	struct clock_event_device *clkevt = &to->clkevt;
 
-	of_irq->irq = of_irq->name ? of_irq_get_byname(np, of_irq->name):
-		irq_of_parse_and_map(np, of_irq->index);
+	if (of_irq->name) {
+		of_irq->irq = ret = of_irq_get_byname(np, of_irq->name);
+		if (ret < 0) {
+			pr_err("Failed to get interrupt %s for %s\n",
+			       of_irq->name, np->full_name);
+			return ret;
+		}
+	} else	{
+		of_irq->irq = irq_of_parse_and_map(np, of_irq->index);
+	}
 	if (!of_irq->irq) {
 		pr_err("Failed to map interrupt for %s\n", np->full_name);
 		return -EINVAL;

commit 22ece4e3df6335e691207de1198a609e761b8640
Author: Daniel Lezcano <daniel.lezcano@linaro.org>
Date:   Tue Jun 20 07:51:11 2017 +0200

    clocksource/drivers/timer-of: Fix invalid iomap check
    
    A typo in the code checks the return value of iomap against !NULL
    and, thus, fails everytime the mapping succeed.
    
    Fix this by inverting the condition in the check.
    
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

diff --git a/drivers/clocksource/timer-of.c b/drivers/clocksource/timer-of.c
index 64b1c2081a67..f6e7491c873c 100644
--- a/drivers/clocksource/timer-of.c
+++ b/drivers/clocksource/timer-of.c
@@ -120,7 +120,7 @@ static __init int timer_base_init(struct device_node *np,
 	const char *name = of_base->name ? of_base->name : np->full_name;
 
 	of_base->base = of_io_request_and_map(np, of_base->index, name);
-	if (of_base->base) {
+	if (!of_base->base) {
 		pr_err("Failed to iomap (%s)\n", name);
 		return -ENXIO;
 	}

commit b7dcc4eacc45263ac5d3a0bd78c64e9ff7c94c13
Author: Arnd Bergmann <arnd@arndb.de>
Date:   Wed Jun 21 23:49:54 2017 +0200

    clocksource/drivers: Fix uninitialized variable use in timer_of_init
    
    If none of the flags are set, 'ret' is uninitialized as pointed out
    by gcc:
    
    drivers/clocksource/timer-of.c: In function 'timer_of_init':
    drivers/clocksource/timer-of.c:160:9: error: 'ret' may be used uninitialized in this function [-Werror=maybe-uninitialized]
    
    Since calling the function without any of the flags is an error,
    set the return value to -EINVAL for that case.
    
    [ tglx: Get rid of the silly backwards goto while at it ]
    
    Fixes: dc11bae78529 ("clocksource/drivers: Add timer-of common init routine")
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Cc: Daniel Lezcano <daniel.lezcano@linaro.org>
    Link: http://lkml.kernel.org/r/20170621215005.3870011-1-arnd@arndb.de

diff --git a/drivers/clocksource/timer-of.c b/drivers/clocksource/timer-of.c
index be1dbee11c20..64b1c2081a67 100644
--- a/drivers/clocksource/timer-of.c
+++ b/drivers/clocksource/timer-of.c
@@ -130,7 +130,7 @@ static __init int timer_base_init(struct device_node *np,
 
 int __init timer_of_init(struct device_node *np, struct timer_of *to)
 {
-	int ret;
+	int ret = -EINVAL;
 	int flags = 0;
 
 	if (to->flags & TIMER_OF_BASE) {
@@ -156,7 +156,6 @@ int __init timer_of_init(struct device_node *np, struct timer_of *to)
 
 	if (!to->clkevt.name)
 		to->clkevt.name = np->name;
-out:
 	return ret;
 
 out_fail:
@@ -168,5 +167,5 @@ int __init timer_of_init(struct device_node *np, struct timer_of *to)
 
 	if (flags & TIMER_OF_BASE)
 		timer_base_exit(&to->of_base);
-	goto out;
+	return ret;
 }

commit dc11bae78529526605c5c45c369c9512fd012093
Author: Daniel Lezcano <daniel.lezcano@linaro.org>
Date:   Mon Jun 5 00:18:43 2017 +0200

    clocksource/drivers: Add timer-of common init routine
    
    The different drivers are all using the same pattern when initializing.
    
     1. Get the base address
     2. Get the irq number
     3. Get the clock
     4. Prepare and enable the clock
     5. Get the rate
     6. Request an interrupt
    
    Instead of repeating again and again these steps in all the drivers, let's
    provide a common init routine to give the opportunity to factor all of them
    out.
    
    We can expect a significant kernel size improvement when the common routine
    will be used in all the drivers.
    
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

diff --git a/drivers/clocksource/timer-of.c b/drivers/clocksource/timer-of.c
new file mode 100644
index 000000000000..be1dbee11c20
--- /dev/null
+++ b/drivers/clocksource/timer-of.c
@@ -0,0 +1,172 @@
+/*
+ * Copyright (c) 2017, Linaro Ltd.  All rights reserved.
+ *
+ * Author: Daniel Lezcano <daniel.lezcano@linaro.org>
+ *
+ * This program is free software; you can redistribute it and/or modify it
+ * under the terms and conditions of the GNU General Public License,
+ * version 2, as published by the Free Software Foundation.
+ *
+ * This program is distributed in the hope it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
+ * more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ */
+#include <linux/clk.h>
+#include <linux/interrupt.h>
+#include <linux/of.h>
+#include <linux/of_address.h>
+#include <linux/of_irq.h>
+#include <linux/slab.h>
+
+#include "timer-of.h"
+
+static __init void timer_irq_exit(struct of_timer_irq *of_irq)
+{
+	struct timer_of *to = container_of(of_irq, struct timer_of, of_irq);
+
+	struct clock_event_device *clkevt = &to->clkevt;
+
+	of_irq->percpu ? free_percpu_irq(of_irq->irq, clkevt) :
+		free_irq(of_irq->irq, clkevt);
+}
+
+static __init int timer_irq_init(struct device_node *np,
+				 struct of_timer_irq *of_irq)
+{
+	int ret;
+	struct timer_of *to = container_of(of_irq, struct timer_of, of_irq);
+	struct clock_event_device *clkevt = &to->clkevt;
+
+	of_irq->irq = of_irq->name ? of_irq_get_byname(np, of_irq->name):
+		irq_of_parse_and_map(np, of_irq->index);
+	if (!of_irq->irq) {
+		pr_err("Failed to map interrupt for %s\n", np->full_name);
+		return -EINVAL;
+	}
+
+	ret = of_irq->percpu ?
+		request_percpu_irq(of_irq->irq, of_irq->handler,
+				   np->full_name, clkevt) :
+		request_irq(of_irq->irq, of_irq->handler,
+			    of_irq->flags ? of_irq->flags : IRQF_TIMER,
+			    np->full_name, clkevt);
+	if (ret) {
+		pr_err("Failed to request irq %d for %s\n", of_irq->irq,
+		       np->full_name);
+		return ret;
+	}
+
+	clkevt->irq = of_irq->irq;
+
+	return 0;
+}
+
+static __init void timer_clk_exit(struct of_timer_clk *of_clk)
+{
+	of_clk->rate = 0;
+	clk_disable_unprepare(of_clk->clk);
+	clk_put(of_clk->clk);
+}
+
+static __init int timer_clk_init(struct device_node *np,
+				 struct of_timer_clk *of_clk)
+{
+	int ret;
+
+	of_clk->clk = of_clk->name ? of_clk_get_by_name(np, of_clk->name) :
+		of_clk_get(np, of_clk->index);
+	if (IS_ERR(of_clk->clk)) {
+		pr_err("Failed to get clock for %s\n", np->full_name);
+		return PTR_ERR(of_clk->clk);
+	}
+
+	ret = clk_prepare_enable(of_clk->clk);
+	if (ret) {
+		pr_err("Failed for enable clock for %s\n", np->full_name);
+		goto out_clk_put;
+	}
+
+	of_clk->rate = clk_get_rate(of_clk->clk);
+	if (!of_clk->rate) {
+		ret = -EINVAL;
+		pr_err("Failed to get clock rate for %s\n", np->full_name);
+		goto out_clk_disable;
+	}
+
+	of_clk->period = DIV_ROUND_UP(of_clk->rate, HZ);
+out:
+	return ret;
+
+out_clk_disable:
+	clk_disable_unprepare(of_clk->clk);
+out_clk_put:
+	clk_put(of_clk->clk);
+
+	goto out;
+}
+
+static __init void timer_base_exit(struct of_timer_base *of_base)
+{
+	iounmap(of_base->base);
+}
+
+static __init int timer_base_init(struct device_node *np,
+				  struct of_timer_base *of_base)
+{
+	const char *name = of_base->name ? of_base->name : np->full_name;
+
+	of_base->base = of_io_request_and_map(np, of_base->index, name);
+	if (of_base->base) {
+		pr_err("Failed to iomap (%s)\n", name);
+		return -ENXIO;
+	}
+
+	return 0;
+}
+
+int __init timer_of_init(struct device_node *np, struct timer_of *to)
+{
+	int ret;
+	int flags = 0;
+
+	if (to->flags & TIMER_OF_BASE) {
+		ret = timer_base_init(np, &to->of_base);
+		if (ret)
+			goto out_fail;
+		flags |= TIMER_OF_BASE;
+	}
+
+	if (to->flags & TIMER_OF_CLOCK) {
+		ret = timer_clk_init(np, &to->of_clk);
+		if (ret)
+			goto out_fail;
+		flags |= TIMER_OF_CLOCK;
+	}
+
+	if (to->flags & TIMER_OF_IRQ) {
+		ret = timer_irq_init(np, &to->of_irq);
+		if (ret)
+			goto out_fail;
+		flags |= TIMER_OF_IRQ;
+	}
+
+	if (!to->clkevt.name)
+		to->clkevt.name = np->name;
+out:
+	return ret;
+
+out_fail:
+	if (flags & TIMER_OF_IRQ)
+		timer_irq_exit(&to->of_irq);
+
+	if (flags & TIMER_OF_CLOCK)
+		timer_clk_exit(&to->of_clk);
+
+	if (flags & TIMER_OF_BASE)
+		timer_base_exit(&to->of_base);
+	goto out;
+}
