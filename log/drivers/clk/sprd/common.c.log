commit f95e8c7923d1b65b892f7052f66f8588b08f65b3
Author: Chunyan Zhang <chunyan.zhang@unisoc.com>
Date:   Wed Mar 4 15:27:29 2020 +0800

    clk: sprd: support to get regmap from parent node
    
    Some SC9863a clock nodes would be the child of a syscon node, clocks can
    use the regmap of syscon device directly for this kind of cases.
    
    Signed-off-by: Chunyan Zhang <chunyan.zhang@unisoc.com>
    Link: https://lkml.kernel.org/r/20200304072730.9193-7-zhang.lyra@gmail.com
    Signed-off-by: Stephen Boyd <sboyd@kernel.org>

diff --git a/drivers/clk/sprd/common.c b/drivers/clk/sprd/common.c
index c0af4779892b..d620bbbcdfc8 100644
--- a/drivers/clk/sprd/common.c
+++ b/drivers/clk/sprd/common.c
@@ -40,7 +40,8 @@ int sprd_clk_regmap_init(struct platform_device *pdev,
 			 const struct sprd_clk_desc *desc)
 {
 	void __iomem *base;
-	struct device_node *node = pdev->dev.of_node;
+	struct device *dev = &pdev->dev;
+	struct device_node *node = dev->of_node;
 	struct regmap *regmap;
 
 	if (of_find_property(node, "sprd,syscon", NULL)) {
@@ -49,6 +50,13 @@ int sprd_clk_regmap_init(struct platform_device *pdev,
 			pr_err("%s: failed to get syscon regmap\n", __func__);
 			return PTR_ERR(regmap);
 		}
+	} else if (of_device_is_compatible(of_get_parent(dev->of_node),
+			   "syscon")) {
+		regmap = device_node_to_regmap(of_get_parent(dev->of_node));
+		if (IS_ERR(regmap)) {
+			dev_err(dev, "failed to get regmap from its parent.\n");
+			return PTR_ERR(regmap);
+		}
 	} else {
 		base = devm_platform_ioremap_resource(pdev, 0);
 		if (IS_ERR(base))

commit dabedfede32435ccb7cba4a8e527248d6aed6a39
Merge: 6df24d0c2f9d fc59462c5ce6 a31414e8c98d 9320c7ddf968 9629dbdabd19 46acbcb4849b
Author: Stephen Boyd <sboyd@kernel.org>
Date:   Wed Nov 27 08:15:00 2019 -0800

    Merge branches 'clk-gpio-flags', 'clk-tegra', 'clk-rockchip', 'clk-sprd' and 'clk-pxa' into clk-next
    
     - Make gpio gate clks propagate rate setting up to parent
    
    * clk-gpio-flags:
      clk: clk-gpio: propagate rate change to parent
    
    * clk-tegra: (23 commits)
      clk: tegra: Use match_string() helper to simplify the code
      clk: tegra: Fix build error without CONFIG_PM_SLEEP
      clk: tegra: Add missing stubs for the case of !CONFIG_PM_SLEEP
      clk: tegra: Optimize PLLX restore on Tegra20/30
      clk: tegra: Add suspend and resume support on Tegra210
      clk: tegra: Share clk and rst register defines with Tegra clock driver
      clk: tegra: Use fence_udelay() during PLLU init
      clk: tegra: clk-dfll: Add suspend and resume support
      clk: tegra: clk-super: Add restore-context support
      clk: tegra: clk-super: Fix to enable PLLP branches to CPU
      clk: tegra: periph: Add restore_context support
      clk: tegra: Support for OSC context save and restore
      clk: tegra: pll: Save and restore pll context
      clk: tegra: pllout: Save and restore pllout context
      clk: tegra: divider: Save and restore divider rate
      clk: tegra: Reimplement SOR clocks on Tegra210
      clk: tegra: Reimplement SOR clock on Tegra124
      clk: tegra: Rename sor0_lvds to sor0_out
      clk: tegra: Move SOR0 implementation to Tegra124
      clk: tegra: Remove last remains of TEGRA210_CLK_SOR1_SRC
      ...
    
    * clk-rockchip:
      clk: rockchip: protect the pclk_usb_grf as critical on px30
      clk: rockchip: add video-related niu clocks as critical on px30
      clk: rockchip: move px30 critical clocks to correct clock controller
      clk: rockchip: Add div50 clocks for px30 sdmmc, emmc, sdio and nandc
      clk: rockchip: Add div50 clock-ids for sdmmc on px30 and nandc
      clk: rockchip: make clk_half_divider_ops static
    
    * clk-sprd:
      clk: sprd: Use IS_ERR() to validate the return value of syscon_regmap_lookup_by_phandle()
    
    * clk-pxa:
      clk: pxa: fix one of the pxa RTC clocks

commit 9629dbdabd1983ef53f125336e1d62d77b1620f9
Author: Baolin Wang <baolin.wang@linaro.org>
Date:   Tue Oct 8 15:41:38 2019 +0800

    clk: sprd: Use IS_ERR() to validate the return value of syscon_regmap_lookup_by_phandle()
    
    The syscon_regmap_lookup_by_phandle() will never return NULL, thus use
    IS_ERR() to validate the return value instead of IS_ERR_OR_NULL().
    
    Fixes: d41f59fd92f2 ("clk: sprd: Add common infrastructure")
    Signed-off-by: Baolin Wang <baolin.wang@linaro.org>
    Link: https://lkml.kernel.org/r/1995139bee5248ff3e9d46dc715968f212cfc4cc.1570520268.git.baolin.wang@linaro.org
    Signed-off-by: Stephen Boyd <sboyd@kernel.org>

diff --git a/drivers/clk/sprd/common.c b/drivers/clk/sprd/common.c
index 9d56eac43832..7ad5ba26dfba 100644
--- a/drivers/clk/sprd/common.c
+++ b/drivers/clk/sprd/common.c
@@ -46,7 +46,7 @@ int sprd_clk_regmap_init(struct platform_device *pdev,
 
 	if (of_find_property(node, "sprd,syscon", NULL)) {
 		regmap = syscon_regmap_lookup_by_phandle(node, "sprd,syscon");
-		if (IS_ERR_OR_NULL(regmap)) {
+		if (IS_ERR(regmap)) {
 			pr_err("%s: failed to get syscon regmap\n", __func__);
 			return PTR_ERR(regmap);
 		}

commit 793ee798cc47abb41e9215d97cc38cb9e050e969
Author: Baolin Wang <baolin.wang@linaro.org>
Date:   Tue Oct 8 15:41:39 2019 +0800

    clk: sprd: Change to use devm_platform_ioremap_resource()
    
    Use the new helper that wraps the calls to platform_get_resource()
    and devm_ioremap_resource() together, which can simpify the code.
    
    Signed-off-by: Baolin Wang <baolin.wang@linaro.org>
    Link: https://lkml.kernel.org/r/841d26a2adb4bf3b4423f82a41dd3f1346413db6.1570520268.git.baolin.wang@linaro.org
    Signed-off-by: Stephen Boyd <sboyd@kernel.org>

diff --git a/drivers/clk/sprd/common.c b/drivers/clk/sprd/common.c
index 9d56eac43832..37186963d618 100644
--- a/drivers/clk/sprd/common.c
+++ b/drivers/clk/sprd/common.c
@@ -42,7 +42,6 @@ int sprd_clk_regmap_init(struct platform_device *pdev,
 	void __iomem *base;
 	struct device_node *node = pdev->dev.of_node;
 	struct regmap *regmap;
-	struct resource *res;
 
 	if (of_find_property(node, "sprd,syscon", NULL)) {
 		regmap = syscon_regmap_lookup_by_phandle(node, "sprd,syscon");
@@ -51,8 +50,7 @@ int sprd_clk_regmap_init(struct platform_device *pdev,
 			return PTR_ERR(regmap);
 		}
 	} else {
-		res = platform_get_resource(pdev, IORESOURCE_MEM, 0);
-		base = devm_ioremap_resource(&pdev->dev, res);
+		base = devm_platform_ioremap_resource(pdev, 0);
 		if (IS_ERR(base))
 			return PTR_ERR(base);
 

commit f6c90df8e7e33c3dc33d4d7471bc42c232b0510e
Author: Stephen Boyd <sboyd@kernel.org>
Date:   Wed Jul 31 12:35:15 2019 -0700

    clk: sprd: Don't reference clk_init_data after registration
    
    A future patch is going to change semantics of clk_register() so that
    clk_hw::init is guaranteed to be NULL after a clk is registered. Avoid
    referencing this member here so that we don't run into NULL pointer
    exceptions.
    
    Cc: Chunyan Zhang <zhang.chunyan@linaro.org>
    Cc: Baolin Wang <baolin.wang@linaro.org>
    Signed-off-by: Stephen Boyd <sboyd@kernel.org>
    Link: https://lkml.kernel.org/r/20190731193517.237136-8-sboyd@kernel.org
    Acked-by: Baolin Wang <baolin.wang@linaro.org>
    Acked-by: Chunyan Zhang <zhang.chunyan@linaro.org>

diff --git a/drivers/clk/sprd/common.c b/drivers/clk/sprd/common.c
index a5bdca1de5d0..9d56eac43832 100644
--- a/drivers/clk/sprd/common.c
+++ b/drivers/clk/sprd/common.c
@@ -76,16 +76,17 @@ int sprd_clk_probe(struct device *dev, struct clk_hw_onecell_data *clkhw)
 	struct clk_hw *hw;
 
 	for (i = 0; i < clkhw->num; i++) {
+		const char *name;
 
 		hw = clkhw->hws[i];
-
 		if (!hw)
 			continue;
 
+		name = hw->init->name;
 		ret = devm_clk_hw_register(dev, hw);
 		if (ret) {
 			dev_err(dev, "Couldn't register clock %d - %s\n",
-				i, hw->init->name);
+				i, name);
 			return ret;
 		}
 	}

commit 78f529695182b980a5183b850fe2d87091e36874
Author: Chunyan Zhang <zhang.chunyan@linaro.org>
Date:   Wed May 22 09:15:02 2019 +0800

    clk: sprd: Check error only for devm_regmap_init_mmio()
    
    The function devm_regmap_init_mmio() wouldn't return NULL pointer for
    now, so only need to ensure the return value is not an error code.
    
    Signed-off-by: Chunyan Zhang <zhang.chunyan@linaro.org>
    Reviewed-by: Baolin Wang <baolin.wang@linaro.org>
    Signed-off-by: Stephen Boyd <sboyd@kernel.org>

diff --git a/drivers/clk/sprd/common.c b/drivers/clk/sprd/common.c
index 9ce690999eaa..a5bdca1de5d0 100644
--- a/drivers/clk/sprd/common.c
+++ b/drivers/clk/sprd/common.c
@@ -58,7 +58,7 @@ int sprd_clk_regmap_init(struct platform_device *pdev,
 
 		regmap = devm_regmap_init_mmio(&pdev->dev, base,
 					       &sprdclk_regmap_config);
-		if (IS_ERR_OR_NULL(regmap)) {
+		if (IS_ERR(regmap)) {
 			pr_err("failed to init regmap\n");
 			return PTR_ERR(regmap);
 		}

commit 69b39d2503af55e3a2ac3130c95855ac185bb70d
Author: Chunyan Zhang <zhang.chunyan@linaro.org>
Date:   Wed May 22 09:15:01 2019 +0800

    clk: sprd: Switch from of_iomap() to devm_ioremap_resource()
    
    devm_ioremap_resources() automatically requests resources and devm_ wrappers
    do better error handling and unmapping of the I/O region when needed,
    that would make drivers more clean and simple.
    
    Signed-off-by: Chunyan Zhang <zhang.chunyan@linaro.org>
    Reviewed-by: Baolin Wang <baolin.wang@linaro.org>
    Signed-off-by: Stephen Boyd <sboyd@kernel.org>

diff --git a/drivers/clk/sprd/common.c b/drivers/clk/sprd/common.c
index e038b0447206..9ce690999eaa 100644
--- a/drivers/clk/sprd/common.c
+++ b/drivers/clk/sprd/common.c
@@ -42,6 +42,7 @@ int sprd_clk_regmap_init(struct platform_device *pdev,
 	void __iomem *base;
 	struct device_node *node = pdev->dev.of_node;
 	struct regmap *regmap;
+	struct resource *res;
 
 	if (of_find_property(node, "sprd,syscon", NULL)) {
 		regmap = syscon_regmap_lookup_by_phandle(node, "sprd,syscon");
@@ -50,7 +51,11 @@ int sprd_clk_regmap_init(struct platform_device *pdev,
 			return PTR_ERR(regmap);
 		}
 	} else {
-		base = of_iomap(node, 0);
+		res = platform_get_resource(pdev, IORESOURCE_MEM, 0);
+		base = devm_ioremap_resource(&pdev->dev, res);
+		if (IS_ERR(base))
+			return PTR_ERR(base);
+
 		regmap = devm_regmap_init_mmio(&pdev->dev, base,
 					       &sprdclk_regmap_config);
 		if (IS_ERR_OR_NULL(regmap)) {

commit d41f59fd92f2ef73026f55cd356a4ca253f4716a
Author: Chunyan Zhang <chunyan.zhang@spreadtrum.com>
Date:   Thu Dec 7 20:57:05 2017 +0800

    clk: sprd: Add common infrastructure
    
    Added Spreadtrum's clock driver framework together with common
    structures and interface functions.
    
    Signed-off-by: Chunyan Zhang <chunyan.zhang@spreadtrum.com>
    Signed-off-by: Stephen Boyd <sboyd@codeaurora.org>

diff --git a/drivers/clk/sprd/common.c b/drivers/clk/sprd/common.c
new file mode 100644
index 000000000000..e038b0447206
--- /dev/null
+++ b/drivers/clk/sprd/common.c
@@ -0,0 +1,96 @@
+// SPDX-License-Identifier: GPL-2.0
+//
+// Spreadtrum clock infrastructure
+//
+// Copyright (C) 2017 Spreadtrum, Inc.
+// Author: Chunyan Zhang <chunyan.zhang@spreadtrum.com>
+
+#include <linux/mfd/syscon.h>
+#include <linux/module.h>
+#include <linux/of_address.h>
+#include <linux/of_platform.h>
+#include <linux/regmap.h>
+
+#include "common.h"
+
+static const struct regmap_config sprdclk_regmap_config = {
+	.reg_bits	= 32,
+	.reg_stride	= 4,
+	.val_bits	= 32,
+	.max_register	= 0xffff,
+	.fast_io	= true,
+};
+
+static void sprd_clk_set_regmap(const struct sprd_clk_desc *desc,
+			 struct regmap *regmap)
+{
+	int i;
+	struct sprd_clk_common *cclk;
+
+	for (i = 0; i < desc->num_clk_clks; i++) {
+		cclk = desc->clk_clks[i];
+		if (!cclk)
+			continue;
+
+		cclk->regmap = regmap;
+	}
+}
+
+int sprd_clk_regmap_init(struct platform_device *pdev,
+			 const struct sprd_clk_desc *desc)
+{
+	void __iomem *base;
+	struct device_node *node = pdev->dev.of_node;
+	struct regmap *regmap;
+
+	if (of_find_property(node, "sprd,syscon", NULL)) {
+		regmap = syscon_regmap_lookup_by_phandle(node, "sprd,syscon");
+		if (IS_ERR_OR_NULL(regmap)) {
+			pr_err("%s: failed to get syscon regmap\n", __func__);
+			return PTR_ERR(regmap);
+		}
+	} else {
+		base = of_iomap(node, 0);
+		regmap = devm_regmap_init_mmio(&pdev->dev, base,
+					       &sprdclk_regmap_config);
+		if (IS_ERR_OR_NULL(regmap)) {
+			pr_err("failed to init regmap\n");
+			return PTR_ERR(regmap);
+		}
+	}
+
+	sprd_clk_set_regmap(desc, regmap);
+
+	return 0;
+}
+EXPORT_SYMBOL_GPL(sprd_clk_regmap_init);
+
+int sprd_clk_probe(struct device *dev, struct clk_hw_onecell_data *clkhw)
+{
+	int i, ret;
+	struct clk_hw *hw;
+
+	for (i = 0; i < clkhw->num; i++) {
+
+		hw = clkhw->hws[i];
+
+		if (!hw)
+			continue;
+
+		ret = devm_clk_hw_register(dev, hw);
+		if (ret) {
+			dev_err(dev, "Couldn't register clock %d - %s\n",
+				i, hw->init->name);
+			return ret;
+		}
+	}
+
+	ret = devm_of_clk_add_hw_provider(dev, of_clk_hw_onecell_get, clkhw);
+	if (ret)
+		dev_err(dev, "Failed to add clock provider\n");
+
+	return ret;
+}
+EXPORT_SYMBOL_GPL(sprd_clk_probe);
+
+MODULE_LICENSE("GPL v2");
