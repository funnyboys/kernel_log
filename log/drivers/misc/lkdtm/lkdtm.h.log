commit ae2e1aad3e48e495878d9f149e437a308bfdaefa
Author: Kees Cook <keescook@chromium.org>
Date:   Mon Apr 6 20:12:34 2020 -0700

    drivers/misc/lkdtm/bugs.c: add arithmetic overflow and array bounds checks
    
    Adds LKDTM tests for arithmetic overflow (both signed and unsigned), as
    well as array bounds checking.
    
    Signed-off-by: Kees Cook <keescook@chromium.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Acked-by: Dmitry Vyukov <dvyukov@google.com>
    Cc: Alexander Potapenko <glider@google.com>
    Cc: Andrey Konovalov <andreyknvl@google.com>
    Cc: Andrey Ryabinin <aryabinin@virtuozzo.com>
    Cc: Ard Biesheuvel <ard.biesheuvel@linaro.org>
    Cc: Arnd Bergmann <arnd@arndb.de>
    Cc: Dan Carpenter <dan.carpenter@oracle.com>
    Cc: Elena Petrova <lenaptr@google.com>
    Cc: "Gustavo A. R. Silva" <gustavo@embeddedor.com>
    Link: http://lkml.kernel.org/r/20200227193516.32566-4-keescook@chromium.org
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

diff --git a/drivers/misc/lkdtm/lkdtm.h b/drivers/misc/lkdtm/lkdtm.h
index 8d13d0176624..601a2156a0d4 100644
--- a/drivers/misc/lkdtm/lkdtm.h
+++ b/drivers/misc/lkdtm/lkdtm.h
@@ -22,6 +22,9 @@ void lkdtm_SOFTLOCKUP(void);
 void lkdtm_HARDLOCKUP(void);
 void lkdtm_SPINLOCKUP(void);
 void lkdtm_HUNG_TASK(void);
+void lkdtm_OVERFLOW_SIGNED(void);
+void lkdtm_OVERFLOW_UNSIGNED(void);
+void lkdtm_ARRAY_BOUNDS(void);
 void lkdtm_CORRUPT_LIST_ADD(void);
 void lkdtm_CORRUPT_LIST_DEL(void);
 void lkdtm_CORRUPT_USER_DS(void);

commit 6cb6982f42cbfaf5e50af1069451a8828231ffb9
Author: Amit Daniel Kachhap <amit.kachhap@arm.com>
Date:   Fri Mar 13 14:35:04 2020 +0530

    lkdtm: arm64: test kernel pointer authentication
    
    This test is specific for arm64. When in-kernel Pointer Authentication
    config is enabled, the return address stored in the stack is signed.
    This feature helps in ROP kind of attack. If any parameters used to
    generate the pac (<key, sp, lr>) is modified then this will fail in
    the authentication stage and will lead to abort.
    
    This test changes the input parameter APIA kernel keys to cause abort.
    The pac computed from the new key can be same as last due to hash
    collision so this is retried for few times as there is no reliable way
    to compare the pacs. Even though this test may fail even after retries
    but this may cause authentication failure at a later stage in earlier
    function returns.
    
    This test can be invoked as,
    echo CORRUPT_PAC > /sys/kernel/debug/provoke-crash/DIRECT
    
    or as below if inserted as a module,
    insmod lkdtm.ko cpoint_name=DIRECT cpoint_type=CORRUPT_PAC cpoint_count=1
    
    [   13.118166] lkdtm: Performing direct entry CORRUPT_PAC
    [   13.118298] lkdtm: Clearing PAC from the return address
    [   13.118466] Unable to handle kernel paging request at virtual address bfff8000108648ec
    [   13.118626] Mem abort info:
    [   13.118666]   ESR = 0x86000004
    [   13.118866]   EC = 0x21: IABT (current EL), IL = 32 bits
    [   13.118966]   SET = 0, FnV = 0
    [   13.119117]   EA = 0, S1PTW = 0
    
    Signed-off-by: Amit Daniel Kachhap <amit.kachhap@arm.com>
    Acked-by: Catalin Marinas <catalin.marinas@arm.com>
    Cc: Kees Cook <keescook@chromium.org>
    Signed-off-by: Catalin Marinas <catalin.marinas@arm.com>

diff --git a/drivers/misc/lkdtm/lkdtm.h b/drivers/misc/lkdtm/lkdtm.h
index c56d23e37643..8d13d0176624 100644
--- a/drivers/misc/lkdtm/lkdtm.h
+++ b/drivers/misc/lkdtm/lkdtm.h
@@ -31,6 +31,7 @@ void lkdtm_UNSET_SMEP(void);
 #ifdef CONFIG_X86_32
 void lkdtm_DOUBLE_FAULT(void);
 #endif
+void lkdtm_CORRUPT_PAC(void);
 
 /* lkdtm_heap.c */
 void __init lkdtm_heap_init(void);

commit b09511c253e5c739a60952b97c071a93e92b2e88
Author: Andy Lutomirski <luto@kernel.org>
Date:   Sun Nov 24 21:18:04 2019 -0800

    lkdtm: Add a DOUBLE_FAULT crash type on x86
    
    The DOUBLE_FAULT crash does INT $8, which is a decent approximation
    of a double fault.  This is useful for testing the double fault
    handling.  Use it like:
    
    Signed-off-by: Andy Lutomirski <luto@kernel.org>
    Cc: Kees Cook <keescook@chromium.org>
    Cc: Arnd Bergmann <arnd@arndb.de>
    Cc: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Cc: Borislav Petkov <bp@alien8.de>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Ingo Molnar <mingo@kernel.org>

diff --git a/drivers/misc/lkdtm/lkdtm.h b/drivers/misc/lkdtm/lkdtm.h
index ab446e0bde97..c56d23e37643 100644
--- a/drivers/misc/lkdtm/lkdtm.h
+++ b/drivers/misc/lkdtm/lkdtm.h
@@ -28,6 +28,9 @@ void lkdtm_CORRUPT_USER_DS(void);
 void lkdtm_STACK_GUARD_PAGE_LEADING(void);
 void lkdtm_STACK_GUARD_PAGE_TRAILING(void);
 void lkdtm_UNSET_SMEP(void);
+#ifdef CONFIG_X86_32
+void lkdtm_DOUBLE_FAULT(void);
+#endif
 
 /* lkdtm_heap.c */
 void __init lkdtm_heap_init(void);

commit 1ee170ea3f0dcf3a4b34f7e7c36559e84bb0d3d6
Author: Kees Cook <keescook@chromium.org>
Date:   Mon Aug 19 10:24:52 2019 -0700

    lkdtm: Split WARNING into separate tests
    
    There are three paths through the kernel code exception logging:
    
    - BUG (no configurable printk message)
    - WARN_ON (no configurable printk message)
    - WARN (configurable printk message)
    
    LKDTM was not testing WARN_ON(). This is needed to evaluate the placement
    of the "cut here" line, which needs special handling in each of the
    three exceptions (and between architectures that implement instruction
    exceptions to implement the code exceptions).
    
    Signed-off-by: Kees Cook <keescook@chromium.org>

diff --git a/drivers/misc/lkdtm/lkdtm.h b/drivers/misc/lkdtm/lkdtm.h
index 8a25afbdf954..ab446e0bde97 100644
--- a/drivers/misc/lkdtm/lkdtm.h
+++ b/drivers/misc/lkdtm/lkdtm.h
@@ -11,6 +11,7 @@ void __init lkdtm_bugs_init(int *recur_param);
 void lkdtm_PANIC(void);
 void lkdtm_BUG(void);
 void lkdtm_WARNING(void);
+void lkdtm_WARNING_MESSAGE(void);
 void lkdtm_EXCEPTION(void);
 void lkdtm_LOOP(void);
 void lkdtm_EXHAUST_STACK(void);

commit b0eb93cfd516201ccf0e4d36e226cfe1b16cc1fe
Author: Kees Cook <keescook@chromium.org>
Date:   Thu Aug 8 11:37:45 2019 -0700

    lkdtm: Add Control Flow Integrity test
    
    This adds a simple test for forward CFI (indirect function calls) with
    function prototype granularity (as implemented by Clang's CFI).
    
    Signed-off-by: Kees Cook <keescook@chromium.org>

diff --git a/drivers/misc/lkdtm/lkdtm.h b/drivers/misc/lkdtm/lkdtm.h
index 6a284a87a037..8a25afbdf954 100644
--- a/drivers/misc/lkdtm/lkdtm.h
+++ b/drivers/misc/lkdtm/lkdtm.h
@@ -95,4 +95,7 @@ void lkdtm_USERCOPY_KERNEL_DS(void);
 /* lkdtm_stackleak.c */
 void lkdtm_STACKLEAK_ERASING(void);
 
+/* cfi.c */
+void lkdtm_CFI_FORWARD_PROTO(void);
+
 #endif

commit ef8f3d48afd6a17a0dae8c277c2f539c2f19fd16
Merge: d7d170a8e357 2c207985f354
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Fri Jul 12 11:40:28 2019 -0700

    Merge branch 'akpm' (patches from Andrew)
    
    Merge updates from Andrew Morton:
     "Am experimenting with splitting MM up into identifiable subsystems
      perhaps with a view to gitifying it in complex ways. Also with more
      verbose "incoming" emails.
    
      Most of MM is here and a few other trees.
    
      Subsystems affected by this patch series:
       - hotfixes
       - iommu
       - scripts
       - arch/sh
       - ocfs2
       - mm:slab-generic
       - mm:slub
       - mm:kmemleak
       - mm:kasan
       - mm:cleanups
       - mm:debug
       - mm:pagecache
       - mm:swap
       - mm:memcg
       - mm:gup
       - mm:pagemap
       - mm:infrastructure
       - mm:vmalloc
       - mm:initialization
       - mm:pagealloc
       - mm:vmscan
       - mm:tools
       - mm:proc
       - mm:ras
       - mm:oom-kill
    
      hotfixes:
          mm: vmscan: scan anonymous pages on file refaults
          mm/nvdimm: add is_ioremap_addr and use that to check ioremap address
          mm/memcontrol: fix wrong statistics in memory.stat
          mm/z3fold.c: lock z3fold page before  __SetPageMovable()
          nilfs2: do not use unexported cpu_to_le32()/le32_to_cpu() in uapi header
          MAINTAINERS: nilfs2: update email address
    
      iommu:
          include/linux/dmar.h: replace single-char identifiers in macros
    
      scripts:
          scripts/decode_stacktrace: match basepath using shell prefix operator, not regex
          scripts/decode_stacktrace: look for modules with .ko.debug extension
          scripts/spelling.txt: drop "sepc" from the misspelling list
          scripts/spelling.txt: add spelling fix for prohibited
          scripts/decode_stacktrace: Accept dash/underscore in modules
          scripts/spelling.txt: add more spellings to spelling.txt
    
      arch/sh:
          arch/sh/configs/sdk7786_defconfig: remove CONFIG_LOGFS
          sh: config: remove left-over BACKLIGHT_LCD_SUPPORT
          sh: prevent warnings when using iounmap
    
      ocfs2:
          fs: ocfs: fix spelling mistake "hearbeating" -> "heartbeat"
          ocfs2/dlm: use struct_size() helper
          ocfs2: add last unlock times in locking_state
          ocfs2: add locking filter debugfs file
          ocfs2: add first lock wait time in locking_state
          ocfs: no need to check return value of debugfs_create functions
          fs/ocfs2/dlmglue.c: unneeded variable: "status"
          ocfs2: use kmemdup rather than duplicating its implementation
    
      mm:slab-generic:
        Patch series "mm/slab: Improved sanity checking":
          mm/slab: validate cache membership under freelist hardening
          mm/slab: sanity-check page type when looking up cache
          lkdtm/heap: add tests for freelist hardening
    
      mm:slub:
          mm/slub.c: avoid double string traverse in kmem_cache_flags()
          slub: don't panic for memcg kmem cache creation failure
    
      mm:kmemleak:
          mm/kmemleak.c: fix check for softirq context
          mm/kmemleak.c: change error at _write when kmemleak is disabled
          docs: kmemleak: add more documentation details
    
      mm:kasan:
          mm/kasan: print frame description for stack bugs
          Patch series "Bitops instrumentation for KASAN", v5:
            lib/test_kasan: add bitops tests
            x86: use static_cpu_has in uaccess region to avoid instrumentation
            asm-generic, x86: add bitops instrumentation for KASAN
          Patch series "mm/kasan: Add object validation in ksize()", v3:
            mm/kasan: introduce __kasan_check_{read,write}
            mm/kasan: change kasan_check_{read,write} to return boolean
            lib/test_kasan: Add test for double-kzfree detection
            mm/slab: refactor common ksize KASAN logic into slab_common.c
            mm/kasan: add object validation in ksize()
    
      mm:cleanups:
          include/linux/pfn_t.h: remove pfn_t_to_virt()
          Patch series "remove ARCH_SELECT_MEMORY_MODEL where it has no effect":
            arm: remove ARCH_SELECT_MEMORY_MODEL
            s390: remove ARCH_SELECT_MEMORY_MODEL
            sparc: remove ARCH_SELECT_MEMORY_MODEL
          mm/gup.c: make follow_page_mask() static
          mm/memory.c: trivial clean up in insert_page()
          mm: make !CONFIG_HUGE_PAGE wrappers into static inlines
          include/linux/mm_types.h: ifdef struct vm_area_struct::swap_readahead_info
          mm: remove the account_page_dirtied export
          mm/page_isolation.c: change the prototype of undo_isolate_page_range()
          include/linux/vmpressure.h: use spinlock_t instead of struct spinlock
          mm: remove the exporting of totalram_pages
          include/linux/pagemap.h: document trylock_page() return value
    
      mm:debug:
          mm/failslab.c: by default, do not fail allocations with direct reclaim only
          Patch series "debug_pagealloc improvements":
            mm, debug_pagelloc: use static keys to enable debugging
            mm, page_alloc: more extensive free page checking with debug_pagealloc
            mm, debug_pagealloc: use a page type instead of page_ext flag
    
      mm:pagecache:
          Patch series "fix filler_t callback type mismatches", v2:
            mm/filemap.c: fix an overly long line in read_cache_page
            mm/filemap: don't cast ->readpage to filler_t for do_read_cache_page
            jffs2: pass the correct prototype to read_cache_page
            9p: pass the correct prototype to read_cache_page
          mm/filemap.c: correct the comment about VM_FAULT_RETRY
    
      mm:swap:
          mm, swap: fix race between swapoff and some swap operations
          mm/swap_state.c: simplify total_swapcache_pages() with get_swap_device()
          mm, swap: use rbtree for swap_extent
          mm/mincore.c: fix race between swapoff and mincore
    
      mm:memcg:
          memcg, oom: no oom-kill for __GFP_RETRY_MAYFAIL
          memcg, fsnotify: no oom-kill for remote memcg charging
          mm, memcg: introduce memory.events.local
          mm: memcontrol: dump memory.stat during cgroup OOM
          Patch series "mm: reparent slab memory on cgroup removal", v7:
            mm: memcg/slab: postpone kmem_cache memcg pointer initialization to memcg_link_cache()
            mm: memcg/slab: rename slab delayed deactivation functions and fields
            mm: memcg/slab: generalize postponed non-root kmem_cache deactivation
            mm: memcg/slab: introduce __memcg_kmem_uncharge_memcg()
            mm: memcg/slab: unify SLAB and SLUB page accounting
            mm: memcg/slab: don't check the dying flag on kmem_cache creation
            mm: memcg/slab: synchronize access to kmem_cache dying flag using a spinlock
            mm: memcg/slab: rework non-root kmem_cache lifecycle management
            mm: memcg/slab: stop setting page->mem_cgroup pointer for slab pages
            mm: memcg/slab: reparent memcg kmem_caches on cgroup removal
          mm, memcg: add a memcg_slabinfo debugfs file
    
      mm:gup:
          Patch series "switch the remaining architectures to use generic GUP", v4:
            mm: use untagged_addr() for get_user_pages_fast addresses
            mm: simplify gup_fast_permitted
            mm: lift the x86_32 PAE version of gup_get_pte to common code
            MIPS: use the generic get_user_pages_fast code
            sh: add the missing pud_page definition
            sh: use the generic get_user_pages_fast code
            sparc64: add the missing pgd_page definition
            sparc64: define untagged_addr()
            sparc64: use the generic get_user_pages_fast code
            mm: rename CONFIG_HAVE_GENERIC_GUP to CONFIG_HAVE_FAST_GUP
            mm: reorder code blocks in gup.c
            mm: consolidate the get_user_pages* implementations
            mm: validate get_user_pages_fast flags
            mm: move the powerpc hugepd code to mm/gup.c
            mm: switch gup_hugepte to use try_get_compound_head
            mm: mark the page referenced in gup_hugepte
          mm/gup: speed up check_and_migrate_cma_pages() on huge page
          mm/gup.c: remove some BUG_ONs from get_gate_page()
          mm/gup.c: mark undo_dev_pagemap as __maybe_unused
    
      mm:pagemap:
          asm-generic, x86: introduce generic pte_{alloc,free}_one[_kernel]
          alpha: switch to generic version of pte allocation
          arm: switch to generic version of pte allocation
          arm64: switch to generic version of pte allocation
          csky: switch to generic version of pte allocation
          m68k: sun3: switch to generic version of pte allocation
          mips: switch to generic version of pte allocation
          nds32: switch to generic version of pte allocation
          nios2: switch to generic version of pte allocation
          parisc: switch to generic version of pte allocation
          riscv: switch to generic version of pte allocation
          um: switch to generic version of pte allocation
          unicore32: switch to generic version of pte allocation
          mm/pgtable: drop pgtable_t variable from pte_fn_t functions
          mm/memory.c: fail when offset == num in first check of __vm_map_pages()
    
      mm:infrastructure:
          mm/mmu_notifier: use hlist_add_head_rcu()
    
      mm:vmalloc:
          Patch series "Some cleanups for the KVA/vmalloc", v5:
            mm/vmalloc.c: remove "node" argument
            mm/vmalloc.c: preload a CPU with one object for split purpose
            mm/vmalloc.c: get rid of one single unlink_va() when merge
            mm/vmalloc.c: switch to WARN_ON() and move it under unlink_va()
          mm/vmalloc.c: spelling> s/informaion/information/
    
      mm:initialization:
          mm/large system hash: use vmalloc for size > MAX_ORDER when !hashdist
          mm/large system hash: clear hashdist when only one node with memory is booted
    
      mm:pagealloc:
          arm64: move jump_label_init() before parse_early_param()
          Patch series "add init_on_alloc/init_on_free boot options", v10:
            mm: security: introduce init_on_alloc=1 and init_on_free=1 boot options
            mm: init: report memory auto-initialization features at boot time
    
      mm:vmscan:
          mm: vmscan: remove double slab pressure by inc'ing sc->nr_scanned
          mm: vmscan: correct some vmscan counters for THP swapout
    
      mm:tools:
          tools/vm/slabinfo: order command line options
          tools/vm/slabinfo: add partial slab listing to -X
          tools/vm/slabinfo: add option to sort by partial slabs
          tools/vm/slabinfo: add sorting info to help menu
    
      mm:proc:
          proc: use down_read_killable mmap_sem for /proc/pid/maps
          proc: use down_read_killable mmap_sem for /proc/pid/smaps_rollup
          proc: use down_read_killable mmap_sem for /proc/pid/pagemap
          proc: use down_read_killable mmap_sem for /proc/pid/clear_refs
          proc: use down_read_killable mmap_sem for /proc/pid/map_files
          mm: use down_read_killable for locking mmap_sem in access_remote_vm
          mm: smaps: split PSS into components
          mm: vmalloc: show number of vmalloc pages in /proc/meminfo
    
      mm:ras:
          mm/memory-failure.c: clarify error message
    
      mm:oom-kill:
          mm: memcontrol: use CSS_TASK_ITER_PROCS at mem_cgroup_scan_tasks()
          mm, oom: refactor dump_tasks for memcg OOMs
          mm, oom: remove redundant task_in_mem_cgroup() check
          oom: decouple mems_allowed from oom_unkillable_task
          mm/oom_kill.c: remove redundant OOM score normalization in select_bad_process()"
    
    * akpm: (147 commits)
      mm/oom_kill.c: remove redundant OOM score normalization in select_bad_process()
      oom: decouple mems_allowed from oom_unkillable_task
      mm, oom: remove redundant task_in_mem_cgroup() check
      mm, oom: refactor dump_tasks for memcg OOMs
      mm: memcontrol: use CSS_TASK_ITER_PROCS at mem_cgroup_scan_tasks()
      mm/memory-failure.c: clarify error message
      mm: vmalloc: show number of vmalloc pages in /proc/meminfo
      mm: smaps: split PSS into components
      mm: use down_read_killable for locking mmap_sem in access_remote_vm
      proc: use down_read_killable mmap_sem for /proc/pid/map_files
      proc: use down_read_killable mmap_sem for /proc/pid/clear_refs
      proc: use down_read_killable mmap_sem for /proc/pid/pagemap
      proc: use down_read_killable mmap_sem for /proc/pid/smaps_rollup
      proc: use down_read_killable mmap_sem for /proc/pid/maps
      tools/vm/slabinfo: add sorting info to help menu
      tools/vm/slabinfo: add option to sort by partial slabs
      tools/vm/slabinfo: add partial slab listing to -X
      tools/vm/slabinfo: order command line options
      mm: vmscan: correct some vmscan counters for THP swapout
      mm: vmscan: remove double slab pressure by inc'ing sc->nr_scanned
      ...

commit 966fede8e4be15bcc08e3c390080d3f9072a5367
Author: Kees Cook <keescook@chromium.org>
Date:   Thu Jul 11 20:53:29 2019 -0700

    lkdtm/heap: add tests for freelist hardening
    
    This adds tests for double free and cross-cache freeing, which should both
    be caught by CONFIG_SLAB_FREELIST_HARDENED.
    
    Link: http://lkml.kernel.org/r/20190530045017.15252-4-keescook@chromium.org
    Signed-off-by: Kees Cook <keescook@chromium.org>
    Cc: Alexander Popov <alex.popov@linux.com>
    Cc: Alexander Potapenko <glider@google.com>
    Cc: Christoph Lameter <cl@linux.com>
    Cc: David Rientjes <rientjes@google.com>
    Cc: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Cc: Joonsoo Kim <iamjoonsoo.kim@lge.com>
    Cc: Matthew Wilcox <willy@infradead.org>
    Cc: Pekka Enberg <penberg@kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

diff --git a/drivers/misc/lkdtm/lkdtm.h b/drivers/misc/lkdtm/lkdtm.h
index 23dc565b4307..c5ae0b37587d 100644
--- a/drivers/misc/lkdtm/lkdtm.h
+++ b/drivers/misc/lkdtm/lkdtm.h
@@ -28,11 +28,16 @@ void lkdtm_STACK_GUARD_PAGE_LEADING(void);
 void lkdtm_STACK_GUARD_PAGE_TRAILING(void);
 
 /* lkdtm_heap.c */
+void __init lkdtm_heap_init(void);
+void __exit lkdtm_heap_exit(void);
 void lkdtm_OVERWRITE_ALLOCATION(void);
 void lkdtm_WRITE_AFTER_FREE(void);
 void lkdtm_READ_AFTER_FREE(void);
 void lkdtm_WRITE_BUDDY_AFTER_FREE(void);
 void lkdtm_READ_BUDDY_AFTER_FREE(void);
+void lkdtm_SLAB_FREE_DOUBLE(void);
+void lkdtm_SLAB_FREE_CROSS(void);
+void lkdtm_SLAB_FREE_PAGE(void);
 
 /* lkdtm_perms.c */
 void __init lkdtm_perms_init(void);

commit 06b32fdb030989c45bb9dad685b794bf2395d53a
Author: Kees Cook <keescook@chromium.org>
Date:   Sat Jun 22 13:18:23 2019 -0700

    lkdtm: Check for SMEP clearing protections
    
    This adds an x86-specific test for pinned cr4 bits. A successful test
    will validate pinning and check the ROP-style call-middle-of-function
    defense, if needed. For example, in the case of native_write_cr4()
    looking like this:
    
    ffffffff8171bce0 <native_write_cr4>:
    ffffffff8171bce0:       48 8b 35 79 46 f2 00    mov    0xf24679(%rip),%rsi
    ffffffff8171bce7:       48 09 f7                or     %rsi,%rdi
    ffffffff8171bcea:       0f 22 e7                mov    %rdi,%cr4
    ...
    ffffffff8171bd5a:       c3                      retq
    
    The UNSET_SMEP test will jump to ffffffff8171bcea (the mov to cr4)
    instead of ffffffff8171bce0 (native_write_cr4() entry) to simulate a
    direct-call bypass attempt.
    
    Expected successful results:
    
      # echo UNSET_SMEP > /sys/kernel/debug/provoke-crash/DIRECT
      # dmesg
      [   79.594433] lkdtm: Performing direct entry UNSET_SMEP
      [   79.596459] lkdtm: trying to clear SMEP normally
      [   79.598406] lkdtm: ok: SMEP did not get cleared
      [   79.599981] lkdtm: trying to clear SMEP with call gadget
      [   79.601810] ------------[ cut here ]------------
      [   79.603421] Attempt to unpin cr4 bits: 100000; bypass attack?!
      ...
      [   79.650170] ---[ end trace 2452ca0f6126242e ]---
      [   79.650937] lkdtm: ok: SMEP removal was reverted
    
    Signed-off-by: Kees Cook <keescook@chromium.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/misc/lkdtm/lkdtm.h b/drivers/misc/lkdtm/lkdtm.h
index 23dc565b4307..bbcd370786d4 100644
--- a/drivers/misc/lkdtm/lkdtm.h
+++ b/drivers/misc/lkdtm/lkdtm.h
@@ -26,6 +26,7 @@ void lkdtm_CORRUPT_LIST_DEL(void);
 void lkdtm_CORRUPT_USER_DS(void);
 void lkdtm_STACK_GUARD_PAGE_LEADING(void);
 void lkdtm_STACK_GUARD_PAGE_TRAILING(void);
+void lkdtm_UNSET_SMEP(void);
 
 /* lkdtm_heap.c */
 void lkdtm_OVERWRITE_ALLOCATION(void);

commit 24cccab42c4199c6daa0a6981e6f6a1ffb0b5a09
Author: Kees Cook <keescook@chromium.org>
Date:   Sat Apr 6 08:59:19 2019 -0700

    lkdtm/bugs: Adjust recursion test to avoid elision
    
    While I was able to trick gcc into keeping a pathological recursion,
    Clang was not so easily fooled. Instead, switch to using "volatile" and
    side-effects to keep the stack variable allocated and to run the function.
    Additionally renames "OVERFLOW" to "EXHAUST_STACK" to better describe the
    test.
    
    Signed-off-by: Kees Cook <keescook@chromium.org>

diff --git a/drivers/misc/lkdtm/lkdtm.h b/drivers/misc/lkdtm/lkdtm.h
index b69ee004a3f7..23dc565b4307 100644
--- a/drivers/misc/lkdtm/lkdtm.h
+++ b/drivers/misc/lkdtm/lkdtm.h
@@ -13,7 +13,7 @@ void lkdtm_BUG(void);
 void lkdtm_WARNING(void);
 void lkdtm_EXCEPTION(void);
 void lkdtm_LOOP(void);
-void lkdtm_OVERFLOW(void);
+void lkdtm_EXHAUST_STACK(void);
 void lkdtm_CORRUPT_STACK(void);
 void lkdtm_CORRUPT_STACK_STRONG(void);
 void lkdtm_UNALIGNED_LOAD_STORE_WRITE(void);

commit 59a12205d3c32aee4c13ca36889fdf7cfed31126
Author: Christophe Leroy <christophe.leroy@c-s.fr>
Date:   Fri Dec 14 15:26:20 2018 +0000

    lkdtm: Add tests for NULL pointer dereference
    
    Introduce lkdtm tests for NULL pointer dereference: check access or exec
    at NULL address, since these errors tend to be reported differently from
    the general fault error text. For example from x86:
    
        pr_alert("BUG: unable to handle kernel %s at %px\n",
            address < PAGE_SIZE ? "NULL pointer dereference" : "paging request",
            (void *)address);
    
    Signed-off-by: Christophe Leroy <christophe.leroy@c-s.fr>
    Signed-off-by: Kees Cook <keescook@chromium.org>

diff --git a/drivers/misc/lkdtm/lkdtm.h b/drivers/misc/lkdtm/lkdtm.h
index 3c6fd327e166..b69ee004a3f7 100644
--- a/drivers/misc/lkdtm/lkdtm.h
+++ b/drivers/misc/lkdtm/lkdtm.h
@@ -45,7 +45,9 @@ void lkdtm_EXEC_KMALLOC(void);
 void lkdtm_EXEC_VMALLOC(void);
 void lkdtm_EXEC_RODATA(void);
 void lkdtm_EXEC_USERSPACE(void);
+void lkdtm_EXEC_NULL(void);
 void lkdtm_ACCESS_USERSPACE(void);
+void lkdtm_ACCESS_NULL(void);
 
 /* lkdtm_refcount.c */
 void lkdtm_REFCOUNT_INC_OVERFLOW(void);

commit 2d6bb6adb714b133db92ccd4bfc9c20f75f71f3f
Merge: 7c6c54b505b8 6fcde9046673
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Thu Nov 1 11:46:27 2018 -0700

    Merge tag 'stackleak-v4.20-rc1' of git://git.kernel.org/pub/scm/linux/kernel/git/kees/linux
    
    Pull stackleak gcc plugin from Kees Cook:
     "Please pull this new GCC plugin, stackleak, for v4.20-rc1. This plugin
      was ported from grsecurity by Alexander Popov. It provides efficient
      stack content poisoning at syscall exit. This creates a defense
      against at least two classes of flaws:
    
       - Uninitialized stack usage. (We continue to work on improving the
         compiler to do this in other ways: e.g. unconditional zero init was
         proposed to GCC and Clang, and more plugin work has started too).
    
       - Stack content exposure. By greatly reducing the lifetime of valid
         stack contents, exposures via either direct read bugs or unknown
         cache side-channels become much more difficult to exploit. This
         complements the existing buddy and heap poisoning options, but
         provides the coverage for stacks.
    
      The x86 hooks are included in this series (which have been reviewed by
      Ingo, Dave Hansen, and Thomas Gleixner). The arm64 hooks have already
      been merged through the arm64 tree (written by Laura Abbott and
      reviewed by Mark Rutland and Will Deacon).
    
      With VLAs having been removed this release, there is no need for
      alloca() protection, so it has been removed from the plugin"
    
    * tag 'stackleak-v4.20-rc1' of git://git.kernel.org/pub/scm/linux/kernel/git/kees/linux:
      arm64: Drop unneeded stackleak_check_alloca()
      stackleak: Allow runtime disabling of kernel stack erasing
      doc: self-protection: Add information about STACKLEAK feature
      fs/proc: Show STACKLEAK metrics in the /proc file system
      lkdtm: Add a test for STACKLEAK
      gcc-plugins: Add STACKLEAK plugin for tracking the kernel stack
      x86/entry: Add STACKLEAK erasing the kernel stack at the end of syscalls

commit f90d1e0c7804b52e12fea501aa46a12c1ff6a567
Author: Alexander Popov <alex.popov@linux.com>
Date:   Fri Aug 17 01:17:00 2018 +0300

    lkdtm: Add a test for STACKLEAK
    
    Introduce an lkdtm test for the STACKLEAK feature: check that the
    current task stack is properly erased (filled with STACKLEAK_POISON).
    
    Signed-off-by: Alexander Popov <alex.popov@linux.com>
    Signed-off-by: Tycho Andersen <tycho@tycho.ws>
    Tested-by: Laura Abbott <labbott@redhat.com>
    Signed-off-by: Kees Cook <keescook@chromium.org>

diff --git a/drivers/misc/lkdtm/lkdtm.h b/drivers/misc/lkdtm/lkdtm.h
index 9e513dcfd809..b611b157c84f 100644
--- a/drivers/misc/lkdtm/lkdtm.h
+++ b/drivers/misc/lkdtm/lkdtm.h
@@ -83,4 +83,7 @@ void lkdtm_USERCOPY_STACK_FRAME_FROM(void);
 void lkdtm_USERCOPY_STACK_BEYOND(void);
 void lkdtm_USERCOPY_KERNEL(void);
 
+/* lkdtm_stackleak.c */
+void lkdtm_STACKLEAK_ERASING(void);
+
 #endif

commit bef459026b161fbc39d20dcba698ed0cfffbac38
Author: Jann Horn <jannh@google.com>
Date:   Tue Aug 28 22:14:21 2018 +0200

    lkdtm: Test copy_to_user() on bad kernel pointer under KERNEL_DS
    
    Test whether the kernel WARN()s when, under KERNEL_DS, a bad kernel pointer
    is used as "userspace" pointer. Should normally be used in "DIRECT" mode.
    
    Signed-off-by: Jann Horn <jannh@google.com>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Tested-by: Kees Cook <keescook@chromium.org>
    Acked-by: Kees Cook <keescook@chromium.org>
    Cc: Andy Lutomirski <luto@kernel.org>
    Cc: kernel-hardening@lists.openwall.com
    Cc: dvyukov@google.com
    Cc: Masami Hiramatsu <mhiramat@kernel.org>
    Cc: "Naveen N. Rao" <naveen.n.rao@linux.vnet.ibm.com>
    Cc: Anil S Keshavamurthy <anil.s.keshavamurthy@intel.com>
    Cc: "David S. Miller" <davem@davemloft.net>
    Cc: Alexander Viro <viro@zeniv.linux.org.uk>
    Cc: linux-fsdevel@vger.kernel.org
    Cc: Borislav Petkov <bp@alien8.de>
    Link: https://lkml.kernel.org/r/20180828201421.157735-8-jannh@google.com

diff --git a/drivers/misc/lkdtm/lkdtm.h b/drivers/misc/lkdtm/lkdtm.h
index 9e513dcfd809..07db641d71d0 100644
--- a/drivers/misc/lkdtm/lkdtm.h
+++ b/drivers/misc/lkdtm/lkdtm.h
@@ -82,5 +82,6 @@ void lkdtm_USERCOPY_STACK_FRAME_TO(void);
 void lkdtm_USERCOPY_STACK_FRAME_FROM(void);
 void lkdtm_USERCOPY_STACK_BEYOND(void);
 void lkdtm_USERCOPY_KERNEL(void);
+void lkdtm_USERCOPY_KERNEL_DS(void);
 
 #endif

commit 039a1c42058db54692a6d4497508bd48555f29fb
Author: Kees Cook <keescook@chromium.org>
Date:   Tue Mar 6 14:58:09 2018 -0800

    lkdtm: Relocate code to subdirectory
    
    The LKDTM modules keep expanding, and it's getting weird to have each file
    get a prefix. Instead, move to a subdirectory for cleaner handling.
    
    Signed-off-by: Kees Cook <keescook@chromium.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/misc/lkdtm/lkdtm.h b/drivers/misc/lkdtm/lkdtm.h
new file mode 100644
index 000000000000..9e513dcfd809
--- /dev/null
+++ b/drivers/misc/lkdtm/lkdtm.h
@@ -0,0 +1,86 @@
+/* SPDX-License-Identifier: GPL-2.0 */
+#ifndef __LKDTM_H
+#define __LKDTM_H
+
+#define pr_fmt(fmt) "lkdtm: " fmt
+
+#include <linux/kernel.h>
+
+/* lkdtm_bugs.c */
+void __init lkdtm_bugs_init(int *recur_param);
+void lkdtm_PANIC(void);
+void lkdtm_BUG(void);
+void lkdtm_WARNING(void);
+void lkdtm_EXCEPTION(void);
+void lkdtm_LOOP(void);
+void lkdtm_OVERFLOW(void);
+void lkdtm_CORRUPT_STACK(void);
+void lkdtm_CORRUPT_STACK_STRONG(void);
+void lkdtm_UNALIGNED_LOAD_STORE_WRITE(void);
+void lkdtm_SOFTLOCKUP(void);
+void lkdtm_HARDLOCKUP(void);
+void lkdtm_SPINLOCKUP(void);
+void lkdtm_HUNG_TASK(void);
+void lkdtm_CORRUPT_LIST_ADD(void);
+void lkdtm_CORRUPT_LIST_DEL(void);
+void lkdtm_CORRUPT_USER_DS(void);
+void lkdtm_STACK_GUARD_PAGE_LEADING(void);
+void lkdtm_STACK_GUARD_PAGE_TRAILING(void);
+
+/* lkdtm_heap.c */
+void lkdtm_OVERWRITE_ALLOCATION(void);
+void lkdtm_WRITE_AFTER_FREE(void);
+void lkdtm_READ_AFTER_FREE(void);
+void lkdtm_WRITE_BUDDY_AFTER_FREE(void);
+void lkdtm_READ_BUDDY_AFTER_FREE(void);
+
+/* lkdtm_perms.c */
+void __init lkdtm_perms_init(void);
+void lkdtm_WRITE_RO(void);
+void lkdtm_WRITE_RO_AFTER_INIT(void);
+void lkdtm_WRITE_KERN(void);
+void lkdtm_EXEC_DATA(void);
+void lkdtm_EXEC_STACK(void);
+void lkdtm_EXEC_KMALLOC(void);
+void lkdtm_EXEC_VMALLOC(void);
+void lkdtm_EXEC_RODATA(void);
+void lkdtm_EXEC_USERSPACE(void);
+void lkdtm_ACCESS_USERSPACE(void);
+
+/* lkdtm_refcount.c */
+void lkdtm_REFCOUNT_INC_OVERFLOW(void);
+void lkdtm_REFCOUNT_ADD_OVERFLOW(void);
+void lkdtm_REFCOUNT_INC_NOT_ZERO_OVERFLOW(void);
+void lkdtm_REFCOUNT_ADD_NOT_ZERO_OVERFLOW(void);
+void lkdtm_REFCOUNT_DEC_ZERO(void);
+void lkdtm_REFCOUNT_DEC_NEGATIVE(void);
+void lkdtm_REFCOUNT_DEC_AND_TEST_NEGATIVE(void);
+void lkdtm_REFCOUNT_SUB_AND_TEST_NEGATIVE(void);
+void lkdtm_REFCOUNT_INC_ZERO(void);
+void lkdtm_REFCOUNT_ADD_ZERO(void);
+void lkdtm_REFCOUNT_INC_SATURATED(void);
+void lkdtm_REFCOUNT_DEC_SATURATED(void);
+void lkdtm_REFCOUNT_ADD_SATURATED(void);
+void lkdtm_REFCOUNT_INC_NOT_ZERO_SATURATED(void);
+void lkdtm_REFCOUNT_ADD_NOT_ZERO_SATURATED(void);
+void lkdtm_REFCOUNT_DEC_AND_TEST_SATURATED(void);
+void lkdtm_REFCOUNT_SUB_AND_TEST_SATURATED(void);
+void lkdtm_REFCOUNT_TIMING(void);
+void lkdtm_ATOMIC_TIMING(void);
+
+/* lkdtm_rodata.c */
+void lkdtm_rodata_do_nothing(void);
+
+/* lkdtm_usercopy.c */
+void __init lkdtm_usercopy_init(void);
+void __exit lkdtm_usercopy_exit(void);
+void lkdtm_USERCOPY_HEAP_SIZE_TO(void);
+void lkdtm_USERCOPY_HEAP_SIZE_FROM(void);
+void lkdtm_USERCOPY_HEAP_WHITELIST_TO(void);
+void lkdtm_USERCOPY_HEAP_WHITELIST_FROM(void);
+void lkdtm_USERCOPY_STACK_FRAME_TO(void);
+void lkdtm_USERCOPY_STACK_FRAME_FROM(void);
+void lkdtm_USERCOPY_STACK_BEYOND(void);
+void lkdtm_USERCOPY_KERNEL(void);
+
+#endif
